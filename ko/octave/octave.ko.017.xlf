<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="octave">
    <body>
      <group id="octave">
        <trans-unit id="7ee2f50bb30c67eb1354e575d452b9626a597944" translate="yes" xml:space="preserve">
          <source>Searching Properties</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07de33955c8023d7e88a52754657a5b76ceceea6" translate="yes" xml:space="preserve">
          <source>Searching time limit, in milliseconds.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2f852bf6e38b55f56d78cb619b4cf9bd661401f" translate="yes" xml:space="preserve">
          <source>Second (00-61).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26775fb11bb6af82c988d5b62a46d6e3603b426a" translate="yes" xml:space="preserve">
          <source>Second of minute (padded with zeros)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b48dc754c19c743e507b27661651bfbedc043aa" translate="yes" xml:space="preserve">
          <source>Seconds after the minute (0-60). This number can be 60 to account for leap seconds.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f10853c2ee59b24e277398e879a016c44367d3b" translate="yes" xml:space="preserve">
          <source>Seconds offset from UTC.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2c6b564bd8119e16a3e573a6f9e7c6d1ac7820f" translate="yes" xml:space="preserve">
          <source>Section</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ff5a6dafd806f6d95302657c480d07703b64604" translate="yes" xml:space="preserve">
          <source>Sections</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a896a552768dc5dbe0afc195d07b5e385c8a5d38" translate="yes" xml:space="preserve">
          <source>Secure Hash Algorithm 1 (RFC 3174)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f24611705c4b42cdcee971edd366e6ab21e9f624" translate="yes" xml:space="preserve">
          <source>Secure Hash Algorithm 2 (224 Bits, RFC 3874)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6489edbdf15c3cce5ac839af209aaffb3a952583" translate="yes" xml:space="preserve">
          <source>Secure Hash Algorithm 2 (256 Bits, RFC 6234)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f39f576a21e69a9ff9b7a53226374ed04653836" translate="yes" xml:space="preserve">
          <source>Secure Hash Algorithm 2 (384 Bits, RFC 6234)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04bb9d3119e6b8448218927a9e585847e4405b51" translate="yes" xml:space="preserve">
          <source>Secure Hash Algorithm 2 (512 Bits, RFC 6234)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3d96b8dea63214b29880d932c1e83024db9b631" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;#XREFfigurewindowbuttonupfcn&quot;&gt;windowbuttonupfcn property&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8cb12e38e1af5ff1b01386ac5abb41369e117694" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;#XREFtic&quot;&gt;tic&lt;/a&gt;, for examples of the use of &lt;code&gt;tic&lt;/code&gt;/&lt;code&gt;toc&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04f6d11a21c01e2a08564f205009c18c742d3a9c" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;#fig_003asimplematrix&quot;&gt;Figure 22.3&lt;/a&gt;, for an example of the structure of a simple positive definite matrix.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="006007b444645d45824a75ded263c8f173654bd4" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;aspect-ratio#XREFpbaspect&quot;&gt;pbaspect function&lt;/a&gt;. Setting &lt;code&gt;plotboxaspectratio&lt;/code&gt; also forces the &lt;code&gt;plotboxaspectratiomode&lt;/code&gt; property to be set to &lt;code&gt;&quot;manual&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69a3cbf97477b967ce185a0ea5ca11c8b1eace71" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;cell-arrays#Cell-Arrays&quot;&gt;Cell Arrays&lt;/a&gt;, for more information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da96c5bc29129e196c6e2673e5ad476aa0b64a02" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;compiling-octave-with-64_002dbit-indexing#Compiling-Octave-with-64_002dbit-Indexing&quot;&gt;Compiling Octave with 64-bit Indexing&lt;/a&gt;, for more details about building Octave with more complete support for large arrays.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fcabd8aad40d2927a754433b0f80fceaad2519ce" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;http://cnswww.cns.cwru.edu/php/chet/readline/readline.html#Readline-Init-File&quot;&gt;Readline Init File&lt;/a&gt; in</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="859f873b40e9c2c27fbcaae03b894ef1f0dc063b" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;indexing-cell-arrays#Indexing-Cell-Arrays&quot;&gt;Indexing Cell Arrays&lt;/a&gt;, for an explanation of how to retrieve objects from cell arrays, and &lt;a href=&quot;defining-functions#Defining-Functions&quot;&gt;Defining Functions&lt;/a&gt;, for information about the variable &lt;code&gt;nargin&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="abe2485fc87a40f004a91770d6158d98009e9d25" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;line-properties#XREFlinelinewidth&quot;&gt;line linewidth property&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ffebbfd778d53afc050148902d05c9ccffa32202" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;line-properties#XREFlinemarker&quot;&gt;line marker property&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a60b685526b58d553c5c842d27a90d6aedb3d1c" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;line-properties#XREFlinemarkeredgecolor&quot;&gt;line markeredgecolor property&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22caf5b7eb4f72ae7f1bf1c4891fb4d9000a4834" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;line-properties#XREFlinemarkerfacecolor&quot;&gt;line markerfacecolor property&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="495c1bdbdfa410e4b9962c29a5e9369c5193a012" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;line-properties#XREFlinemarkersize&quot;&gt;line markersize property&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c99112d00e895ca652af563804794eff565b02d2" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;line-styles#Line-Styles&quot;&gt;Line Styles&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dbc7e6abd8b66e9a47bbdd065c32475fe1a37282" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;marker-styles#Marker-Styles&quot;&gt;Marker Styles&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a71467945ec5170ac689d2d596b2e1be5a0b112" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;numeric-data-types#Numeric-Data-Types&quot;&gt;Numeric Data Types&lt;/a&gt;, for more information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dbefbac8ff16cc6fcb2711e348e60a9078301bee" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;opening-and-closing-files#Opening-and-Closing-Files&quot;&gt;Opening and Closing Files&lt;/a&gt;, for details on how to use &lt;code&gt;fopen&lt;/code&gt; and &lt;code&gt;fclose&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8eee0703d1a1e311ae4e9948c1772c77c79e58b3" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;operator-overloading#Operator-Overloading&quot;&gt;Operator Overloading&lt;/a&gt;, for a list of operators which also have a functional form.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="efa43c7d346c69f10bfe5a53ebde2a59c06f893a" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;pkg_005fadd-and-pkg_005fdel-directives#PKG_005fADD-and-PKG_005fDEL-Directives&quot;&gt;PKG_ADD and PKG_DEL Directives&lt;/a&gt;, for details on &lt;code&gt;PKG_ADD&lt;/code&gt; directives.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aefaf8aea13312fbb41956ef1c1ed0be349da71d" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;strings#Strings&quot;&gt;Strings&lt;/a&gt;, for more information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ef944a2e3270548ab58196d49d9b978ae400221" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;structures#Structures&quot;&gt;Structures&lt;/a&gt;, for more information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a08e858a5d85ba362b4022fe98315b371748e609" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;text-properties#Text-Properties&quot;&gt;Text Properties&lt;/a&gt; for the properties that you can set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8b874ae3a7efc0790ec5f73071528f5fb5004db" translate="yes" xml:space="preserve">
          <source>See &lt;code&gt;&quot;rectangle&quot;&lt;/code&gt; annotations for customization.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2cc519cb1471e7a8294c94498b4aaab75fc660c8" translate="yes" xml:space="preserve">
          <source>See &lt;code&gt;demo&lt;/code&gt; for a complete explanation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2534fa01f1ddec0afc619e166d42f2b34bfa0c0" translate="yes" xml:space="preserve">
          <source>See &lt;code&gt;strrep&lt;/code&gt; for processing overlaps.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0eb65d4117d425d618bd16ccd0ea9f973c3a0db2" translate="yes" xml:space="preserve">
          <source>See &lt;code&gt;sum&lt;/code&gt; for an explanation of the optional parameters &lt;code&gt;&quot;native&quot;&lt;/code&gt; and &lt;code&gt;&quot;double&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b06c22e6bd72e9dbcff57049149c673b792395b" translate="yes" xml:space="preserve">
          <source>See &lt;var&gt;c&lt;/var&gt; above.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="423ebb2768eeff6ef48015bc7fb58e53337eeaa6" translate="yes" xml:space="preserve">
          <source>See &lt;var&gt;delim&lt;/var&gt; above.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df00539686d2f60ee51ef2e87bb27a4151ad6ef5" translate="yes" xml:space="preserve">
          <source>See &lt;var&gt;r&lt;/var&gt; above.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15d1bca009f7291dfaf9dce4135ee0250335f038" translate="yes" xml:space="preserve">
          <source>See Alan C. Hindmarsh,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fbabbcbf599c0c3fdf6908af1396281b2d1933de" translate="yes" xml:space="preserve">
          <source>See K. E. Brenan, et al.,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07a18fee84d6979de83318e72c8e6aa1900187ee" translate="yes" xml:space="preserve">
          <source>See Magnus and Neudecker (1988),</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1f87bc7f668489c223901ea47ccfbf7bc8d520d" translate="yes" xml:space="preserve">
          <source>See also &lt;code&gt;list_primes&lt;/code&gt; if you need a specific number &lt;var&gt;n&lt;/var&gt; of primes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d25281e9ec452488c44ffa245a113ed9bab342b" translate="yes" xml:space="preserve">
          <source>See the Formatted Input section of the GNU Octave manual for a complete description of the syntax of the template string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1c97e711cae291069c5e9133acf8502432b312c" translate="yes" xml:space="preserve">
          <source>See the Formatted Output section of the GNU Octave manual for a complete description of the syntax of the template string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9cb6f836c6a9421e8bb6fd41dc98d8943d2a90ac" translate="yes" xml:space="preserve">
          <source>See the Octave manual for more information in representing images.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dbd137d511b1a89b68190a376a5784a061f5e61a" translate="yes" xml:space="preserve">
          <source>See the documentation of &lt;code&gt;plot&lt;/code&gt; for a description of the arguments that &lt;code&gt;loglog&lt;/code&gt; will accept.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0747f4a0d0904811616f82742195a5c861f3d140" translate="yes" xml:space="preserve">
          <source>See the documentation of &lt;code&gt;plot&lt;/code&gt; for a description of the arguments that &lt;code&gt;semilogx&lt;/code&gt; will accept.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="850054756ad777725d393344a0eebcc656eb6888" translate="yes" xml:space="preserve">
          <source>See the documentation of &lt;code&gt;plot&lt;/code&gt; for a description of the arguments that &lt;code&gt;semilogy&lt;/code&gt; will accept.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9cf3bc15ed31d65a2fc3025ed85894ef4364294" translate="yes" xml:space="preserve">
          <source>See the example below for clarity:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6142ee968e835bf0e6a4b4bc0768ee08a0e5da77" translate="yes" xml:space="preserve">
          <source>See the file</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5fc19943ce39793f488167d4ffec173101330cb7" translate="yes" xml:space="preserve">
          <source>Select the library to use for image I/O. The two possible values are &lt;code&gt;&quot;GraphicsMagick&quot;&lt;/code&gt; (default) or &lt;code&gt;&quot;ImageMagick&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3a61145742bd6cd7e57c9df6b6d85e3a67fd222" translate="yes" xml:space="preserve">
          <source>Select the n-th smallest element of a vector, using the ordering defined by &lt;code&gt;sort&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19b5d4cbc7df665ca4bd27dd032dd8f8cd1ae260" translate="yes" xml:space="preserve">
          <source>Select which solver to use. If the problem is a MIP problem this flag will be ignored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4547d3856e52ab997e0bb4a89bc7a4cb5f33acfa" translate="yes" xml:space="preserve">
          <source>Self-contained Octave scripts are useful when you want to write a program which users can invoke without knowing that the program is written in the Octave language. Octave scripts are also used for batch processing of data files. Once an algorithm has been developed and tested in the interactive portion of Octave, it can be committed to an executable script and used again and again on new data files.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d37b5b2a1fd437cb6f9d3a91de1dc386161b696e" translate="yes" xml:space="preserve">
          <source>Send an explanation with your changes of what problem they fix or what improvement they bring about. For a bug fix, just include a copy of the bug report, and explain why the change fixes the bug.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="327be6a22b717fa79f7d56c264fd6cb51e3a7035" translate="yes" xml:space="preserve">
          <source>Send signal &lt;var&gt;sig&lt;/var&gt; to process &lt;var&gt;pid&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f832432a335e462741261d08ff45b8cf87ccebd" translate="yes" xml:space="preserve">
          <source>Sending Patches</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fdd289e370bd5cc575f48a16947d05c144ec474b" translate="yes" xml:space="preserve">
          <source>Sep</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25b2bf3b7420e8cad44e2704fdd71a5cfd4c1a5a" translate="yes" xml:space="preserve">
          <source>Sep.07,2000</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02af370be04159606424da0ceb145476a0f335ef" translate="yes" xml:space="preserve">
          <source>Sep.07,2000 15:38:08</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd4d9396142465e7adb821e81b69711879a4a54d" translate="yes" xml:space="preserve">
          <source>Sep00</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4f08b90f0f8065f237076e159ba0c4225e03cb5" translate="yes" xml:space="preserve">
          <source>Sep2000</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a582daa13a26e4f93880b8788d7e5941f2b6adce" translate="yes" xml:space="preserve">
          <source>Separate numbers with tabs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af979cf438135003591057259c05701b201de857" translate="yes" xml:space="preserve">
          <source>Set Operations</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="902e955fd7c108b453c591a06feaa103d7b9168d" translate="yes" xml:space="preserve">
          <source>Set aspect ratio modes to &lt;code&gt;&quot;manual&quot;&lt;/code&gt; for rotation without stretching.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a611cb25d9f0d9ea0c1854abdb3402bac106ccb6" translate="yes" xml:space="preserve">
          <source>Set axis limits and appearance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7fba484eff1e70b509e262eca2d0829270c639e0" translate="yes" xml:space="preserve">
          <source>Set breakpoints for the built-in debugger.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="548256f09a0281a2d037d32c6cace9026c6dda12" translate="yes" xml:space="preserve">
          <source>Set function name to be used in error messages; Defaults to empty string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91383510536d3af5b4be15304b1361d0794d7649" translate="yes" xml:space="preserve">
          <source>Set named property values for the graphics handle (or vector of graphics handles) &lt;var&gt;h&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7c3ec74de46dbb30a021476d952418364627f68" translate="yes" xml:space="preserve">
          <source>Set or get the camera position.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40ceab35304102ae3d3ecad2d9770c71c7853c52" translate="yes" xml:space="preserve">
          <source>Set or get the camera up vector.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90d0451d11e259411fa06d8cb166680351fe0005" translate="yes" xml:space="preserve">
          <source>Set or get the camera viewing angle.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef5327389e5f41cb01d3e6b14808bf0543be4ebb" translate="yes" xml:space="preserve">
          <source>Set or get where the camera is pointed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2567e849c8ebf4dea25f5c6ff02f24503c000097" translate="yes" xml:space="preserve">
          <source>Set or reset bit(s) &lt;var&gt;n&lt;/var&gt; of the unsigned integers in &lt;var&gt;A&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b07d799070c594cf6d6cd5ab29016fc82c9baa9" translate="yes" xml:space="preserve">
          <source>Set reflectance properties for the lighting of surfaces and patches.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4fe871710b9945027e0c55ad151b5bdbcf7aa403" translate="yes" xml:space="preserve">
          <source>Set the &lt;var&gt;printer&lt;/var&gt; name to which the plot is sent if no &lt;var&gt;filename&lt;/var&gt; is specified.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4879eef9fce3f0cbcfce68645f60ac6e6ca27fa5" translate="yes" xml:space="preserve">
          <source>Set the FTP connection &lt;var&gt;f&lt;/var&gt; to use ASCII mode for transfers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4e41faacb48e694af8e609c5b2c44f1d863a1b9" translate="yes" xml:space="preserve">
          <source>Set the FTP connection &lt;var&gt;f&lt;/var&gt; to use binary mode for transfers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3298bb98ec9623ea624d5b708d19f33616cf2486" translate="yes" xml:space="preserve">
          <source>Set the application data &lt;var&gt;name&lt;/var&gt; to &lt;var&gt;value&lt;/var&gt; for the graphics object with handle &lt;var&gt;h&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59d0a49ecbcefbd64b20cba8ebb20545bf13d447" translate="yes" xml:space="preserve">
          <source>Set the data aspect ratio mode of the current axes. &lt;var&gt;mode&lt;/var&gt; is either &lt;code&gt;&quot;auto&quot;&lt;/code&gt; or &lt;code&gt;&quot;manual&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28fb420496e23cda6476012c880422eacefb3c9c" translate="yes" xml:space="preserve">
          <source>Set the file descriptor flags for &lt;var&gt;fid&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7404b0e38a6bc582b01a093c2fe607f56238553a" translate="yes" xml:space="preserve">
          <source>Set the file in which to look for information on globally installed packages. Globally installed packages are those that are available to all users. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95aecfa84c6d1c0da77eedada0201624e394b515" translate="yes" xml:space="preserve">
          <source>Set the file in which to look for information on locally installed packages. Locally installed packages are those that are available only to the current user. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99f255dac13ca2e7c4b0993c37fb79fc6cfb177c" translate="yes" xml:space="preserve">
          <source>Set the file pointer to the location &lt;var&gt;offset&lt;/var&gt; within the file &lt;var&gt;fid&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1711018dac027b825bb1417c245fa25b9268d9d" translate="yes" xml:space="preserve">
          <source>Set the file status flags for &lt;var&gt;fid&lt;/var&gt; to the value specified by &lt;var&gt;arg&lt;/var&gt;. The only flags that can be changed are &lt;code&gt;O_APPEND&lt;/code&gt; and &lt;code&gt;O_NONBLOCK&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63a37e4cf1a843facc50d055ae3d37a90add68d9" translate="yes" xml:space="preserve">
          <source>Set the installation prefix directory. For example,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="276da283bcb85aaf7fb9521fdf1fb335baa0db11" translate="yes" xml:space="preserve">
          <source>Set the lighting of patch or surface graphic objects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61f79966493519a2669986895db489336012b18b" translate="yes" xml:space="preserve">
          <source>Set the permission mask for file creation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee7f187948563b8d936a970a94b54c19ecd56ce0" translate="yes" xml:space="preserve">
          <source>Set the plot box aspect ratio mode of the current axes. &lt;var&gt;mode&lt;/var&gt; is either &lt;code&gt;&quot;auto&quot;&lt;/code&gt; or &lt;code&gt;&quot;manual&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27f75a934210857295db59cd6b8ae649ecf41fba" translate="yes" xml:space="preserve">
          <source>Set the preference &lt;var&gt;pref&lt;/var&gt; to the given &lt;var&gt;val&lt;/var&gt; in the named preference group &lt;var&gt;group&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d92e1119b7dfb3bfdf94611daf6c2fff5c46317" translate="yes" xml:space="preserve">
          <source>Set the quality of the compression. The value should be an integer between 0 and 100, with larger values indicating higher visual quality and lower compression. Defaults to 75.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="acf97071e085dd95e907f044de2d7021efddd69f" translate="yes" xml:space="preserve">
          <source>Set the shading of patch or surface graphic objects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb479685eced82c3dfac46100aafbb82d92b5efb" translate="yes" xml:space="preserve">
          <source>Set the specified axes to have nice limits around the data or all if no axes are specified.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6aa7db994c6dad689df075e507a03a4accf17721" translate="yes" xml:space="preserve">
          <source>Set the value of property specified by &lt;var&gt;name&lt;/var&gt; to a given &lt;var&gt;value&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9aecd1bf6f2d3537b40f618fbb87f5f2f370f74f" translate="yes" xml:space="preserve">
          <source>Set the value of the environment variable &lt;var&gt;var&lt;/var&gt; to &lt;var&gt;value&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="297e47989906f41a7273d3bd14eeab8c37837d07" translate="yes" xml:space="preserve">
          <source>Set the value of the field &lt;var&gt;name&lt;/var&gt; of the Java object &lt;var&gt;obj&lt;/var&gt; to &lt;var&gt;val&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93af57fa9ea003adbbbc7a8c7cb5e85e7e59f747" translate="yes" xml:space="preserve">
          <source>Set the window as modal so that it will stay on top of all normal figures.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c629149be2ddff4c2aad2449c244fad4e0a59495" translate="yes" xml:space="preserve">
          <source>Set the window style as non modal.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40d4416efa5eec38281326f06c6d5bf4065ca154" translate="yes" xml:space="preserve">
          <source>Set this option to a nonzero value to display detailed information about the initial condition calculation (default is 0).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3e646c8c9b81166ea0e3e47e18e33b69216ada4" translate="yes" xml:space="preserve">
          <source>Set to a nonzero value to disable the linesearch algorithm (default is 0).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cdc8d4e88489aea3a9f5d620aaac7a08d605e6b1" translate="yes" xml:space="preserve">
          <source>Set to a nonzero value to exclude algebraic variables from the error test. You must also set the &lt;code&gt;&quot;algebraic variables&quot;&lt;/code&gt; option to declare which variables in the problem are algebraic (default is 0).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76a0093e69a6bd2fdd5136861fb0a1fdfa2e052e" translate="yes" xml:space="preserve">
          <source>Set to a nonzero value to use the initial condition heuristics options described below.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6df98952fa03f9ce30b8778c26becbedf9b5c702" translate="yes" xml:space="preserve">
          <source>Set to one of the following values to enforce the inequality constraints specified by the &lt;code&gt;&quot;inequality constraint types&quot;&lt;/code&gt; option (default is 0).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d9a22b80c1b8a7d0ce28d89329e64a592fdd7e8" translate="yes" xml:space="preserve">
          <source>Set transfer type to ascii</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24a528073d43be134f95dfbe442274b3be407aab" translate="yes" xml:space="preserve">
          <source>Set transfer type to binary</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6997585530389283bebfe4d36446005895785ac" translate="yes" xml:space="preserve">
          <source>Set up a plot grid with &lt;var&gt;rows&lt;/var&gt; by &lt;var&gt;cols&lt;/var&gt; subwindows and set the current axes for plotting (&lt;code&gt;gca&lt;/code&gt;) to the location given by &lt;var&gt;index&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c039fcd3a48cd18f76878210202c9e101dea7ffe" translate="yes" xml:space="preserve">
          <source>Set up the JVM</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bef9b3889a3b64540ff42409c791f04d2beafb03" translate="yes" xml:space="preserve">
          <source>Set whether a structure can be passed to the function instead of parameter/value pairs. Defaults to true.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f7819798a00c0b55788a403b20200b9fc5d3226" translate="yes" xml:space="preserve">
          <source>Set whether an error should be given for non-defined arguments. Defaults to false. If set to true, the extra arguments can be accessed through &lt;code&gt;Unmatched&lt;/code&gt; after the &lt;code&gt;parse&lt;/code&gt; method. Note that since &lt;code&gt;Switch&lt;/code&gt; and &lt;code&gt;Parameter&lt;/code&gt; arguments can be mixed, it is not possible to know the unmatched type. If argument is found unmatched it is assumed to be of the &lt;code&gt;Parameter&lt;/code&gt; type and it is expected to be followed by a value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bfbb50987512f34e07c5b2b17a1f719ebbffb61a" translate="yes" xml:space="preserve">
          <source>Set whether matching of argument names should be case sensitive. Defaults to false.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f8bf6bf889ee03f32a40a84b974e13e2f6d7419" translate="yes" xml:space="preserve">
          <source>Set xboxes plot style.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f01efd77cc6e7d081760772f870b2259d4afa5f3" translate="yes" xml:space="preserve">
          <source>Set xerrorbars plot style.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79e0538f8abbe98af4e85479df66abf441ae8893" translate="yes" xml:space="preserve">
          <source>Set xyboxes plot style.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5fd1405b99d595f2e1ddec0ff20f91aa26cbfb9" translate="yes" xml:space="preserve">
          <source>Set xyerrorbars plot style.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eba93eb0f77d42dfc68114c9ec5367c6e11545fa" translate="yes" xml:space="preserve">
          <source>Set yboxes plot style.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="116f68c6f45891e3dc1c548e16c64019c6c8b9d8" translate="yes" xml:space="preserve">
          <source>Set yerrorbars plot style (default).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ab262f44dfc9e1ee8adf98c1aa64de34434fa83" translate="yes" xml:space="preserve">
          <source>Sets</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8165241551c2370bd8ef6d8477eecbec25820c7" translate="yes" xml:space="preserve">
          <source>Setting &lt;code&gt;xdata&lt;/code&gt; to the empty matrix ([]) will restore the default value of &lt;code&gt;[1 columns(image)]&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="269391cfd6f0ebc585621f4e5c0329500d5d0ac0" translate="yes" xml:space="preserve">
          <source>Setting &lt;code&gt;ydata&lt;/code&gt; to the empty matrix ([]) will restore the default value of &lt;code&gt;[1 rows(image)]&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2abe35018db58cf8f88e92342c2ad224ac3085bc" translate="yes" xml:space="preserve">
          <source>Setting the maximum stepsize will avoid passing over very large regions (default is not specified).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="303183f3cdbf7ef3a51846318661d10e8f450909" translate="yes" xml:space="preserve">
          <source>Setting the maximum stepsize will avoid passing over very large regions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38f1bbc65c1d0f3f9b4dd4666f0b2be11cb40c31" translate="yes" xml:space="preserve">
          <source>Setting the window style as docked currently does not dock the window.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d08b91c89fa80ce074d03c75c8975ebfeb48017" translate="yes" xml:space="preserve">
          <source>Several features have to be added in future versions of Octave to be fully compatible to &lt;small&gt;MATLAB&lt;/small&gt;. An overview of what is missing can be found at &lt;a href=&quot;https://wiki.octave.org/Classdef&quot;&gt;https://wiki.octave.org/Classdef&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be12ddf46d6e20433993503b9d711ef67065de81" translate="yes" xml:space="preserve">
          <source>Several functions are available to reorder depending on the type of the matrix to be factorized. If the matrix is symmetric positive-definite, then &lt;em&gt;symamd&lt;/em&gt; or &lt;em&gt;csymamd&lt;/em&gt; should be used. Otherwise &lt;em&gt;amd&lt;/em&gt;, &lt;em&gt;colamd&lt;/em&gt; or &lt;em&gt;ccolamd&lt;/em&gt; should be used. For completeness the reordering functions &lt;em&gt;colperm&lt;/em&gt; and &lt;em&gt;randperm&lt;/em&gt; are also available.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83a13e14f6a038e4b28a57c91787ed29e69c4eb4" translate="yes" xml:space="preserve">
          <source>Several utility functions make it possible to store private data for use with a GUI which will not pollute the user&amp;rsquo;s variable space.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b593e4636c61e014727346ba65626922044ce1c7" translate="yes" xml:space="preserve">
          <source>Shape of higher dimensional arrays</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbc33efa294de25cc33cf44c8dd6d05879bb13bf" translate="yes" xml:space="preserve">
          <source>Shape of the marker for each data point. See &lt;a href=&quot;marker-styles#Marker-Styles&quot;&gt;Marker Styles&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3b5cd4b54f894ad809c310e1716ab215e230898" translate="yes" xml:space="preserve">
          <source>Shared memory size.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50965b23a9408a607643bdca2dd065c20ccef12f" translate="yes" xml:space="preserve">
          <source>Shift the dimensions of &lt;var&gt;x&lt;/var&gt; by &lt;var&gt;n&lt;/var&gt;, where &lt;var&gt;n&lt;/var&gt; must be an integer scalar.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c71c91d2b9b62daa0658ad3d17c4fb3e00b2cfea" translate="yes" xml:space="preserve">
          <source>Short-circuit Boolean Operators</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a654d37eedebc1e2d9134f3a3c06ebae747622e" translate="yes" xml:space="preserve">
          <source>Shorthand for &lt;code&gt;%!test assert (x, y, tol)&lt;/code&gt; or &lt;code&gt;%!test fail (CODE, PATTERN)&lt;/code&gt;. If &lt;code&gt;&amp;lt;MESSAGE&amp;gt;&lt;/code&gt; is present, the test block is interpreted as for &lt;code&gt;xtest&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8aee5699bf4d3ba6daa757dc21ed739d1a336d7" translate="yes" xml:space="preserve">
          <source>Show a box around legend (default)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d8dc780508fa73fa9b9f7edfb6e1e06091ceccd" translate="yes" xml:space="preserve">
          <source>Show a short description of installed packages. With the option &lt;code&gt;&quot;-verbose&quot;&lt;/code&gt; also list functions provided by the package. For example,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92fe0f8337fd8569bf306547a678f2a95fef2106" translate="yes" xml:space="preserve">
          <source>Show legend on the plot</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a76d60aba3b168af208e95754ee92adfa797312" translate="yes" xml:space="preserve">
          <source>Show the current memory usage of the Java virtual machine (JVM) and run the garbage collector.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c3ed87ff83efb0a41b36bbecc79e2b1e838873e" translate="yes" xml:space="preserve">
          <source>Show the graph window.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44503e4120a7e543b27ecbe62c8db321e33de1f9" translate="yes" xml:space="preserve">
          <source>Show the list of currently installed packages. For example,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9278c79e3521aa5b7c1c7e766263d78e88422e16" translate="yes" xml:space="preserve">
          <source>Shutdown is initiated with the &lt;code&gt;exit&lt;/code&gt; or &lt;code&gt;quit&lt;/code&gt; commands (they are equivalent). Similar to startup, Octave has a shutdown process that can be customized by user script files. During shutdown Octave will search for the script file</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20d7aa842aea03d5bc045f8d784a26a3f3f8fb11" translate="yes" xml:space="preserve">
          <source>Sibling functions (functions that have the same parents)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a6026aa4cd034ab7d128481283b6dc5adbff688" translate="yes" xml:space="preserve">
          <source>Side-by-side bars with a gap between bars and centered over the X-coordinate.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="170d16d925ad335966451d0a7e34612e942065e2" translate="yes" xml:space="preserve">
          <source>Side-by-side bars with a gap between bars and centered over the Y-coordinate.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2bb2ab5fe21cfbf70141bacf99ae095030175daa" translate="yes" xml:space="preserve">
          <source>Side-by-side bars with no gap between bars and centered over the X-coordinate.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50478bdb3a6a507168ee731413bd082606fa670e" translate="yes" xml:space="preserve">
          <source>Side-by-side bars with no gap between bars and centered over the Y-coordinate.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7d16ea86e7a05fe49f57012a3ae16ac7dc7d3a8" translate="yes" xml:space="preserve">
          <source>Side-by-side bars with no gap between bars and left-aligned to the X-coordinate.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea51bc2bbc2164071b8b464294e6e9e373d381eb" translate="yes" xml:space="preserve">
          <source>Side-by-side bars with no gap between bars and left-aligned to the Y-coordinate.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00a3d29ca138acab09663e0c643cbbd8b3d90a28" translate="yes" xml:space="preserve">
          <source>Signal Processing</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="341544c54fd8b9821cd7dbf11e7bebce35ea0429" translate="yes" xml:space="preserve">
          <source>Signal an error if some complex numbers could not be paired. Signal an error if all complex numbers are not exact conjugates (to within &lt;var&gt;tol&lt;/var&gt;). Note that there is no defined order for pairs with identical real parts but differing imaginary parts.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8e4c0f79245c3113a32adfb4d18e14f42fe7126" translate="yes" xml:space="preserve">
          <source>Similar operators also exist for subtraction (&lt;code&gt;-=&lt;/code&gt;), multiplication (&lt;code&gt;*=&lt;/code&gt;), and division (&lt;code&gt;/=&lt;/code&gt;). An expression of the form</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15bfc59ebae4f4782671752e07cf96cbb340e088" translate="yes" xml:space="preserve">
          <source>Similar to &lt;code&gt;&quot;measure&quot;&lt;/code&gt;, but a wider range of algorithms is considered.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a996eca989dcb275e29428e16aeb5127862b6f61" translate="yes" xml:space="preserve">
          <source>Similarly the axis limits of the colormap can be changed with the caxis function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc4fb6a726563143c1c04086d201d673d7729dd3" translate="yes" xml:space="preserve">
          <source>Similarly,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4d3379d0e668c3c89870157fefaf6bb1a09fa94" translate="yes" xml:space="preserve">
          <source>Similarly, &lt;code&gt;M*D&lt;/code&gt; will do a column scaling.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b67d3081cce4567ea08a97185d9d76ff3119741" translate="yes" xml:space="preserve">
          <source>Similarly, by indexing a scalar with two vectors of ones it is possible to create a matrix. The following statements</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e7473ddd23e799b4b5ea7a435333637e3646ab6" translate="yes" xml:space="preserve">
          <source>Similarly, it is possible to create a new cell array containing cell elements selected with &lt;code&gt;{}&lt;/code&gt;. By surrounding the list with &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6538900001efd5dcfb3366cc8fd6c0705e61a569" translate="yes" xml:space="preserve">
          <source>Similarly, the first argument to the &lt;code&gt;set&lt;/code&gt; method should be an object and any additional arguments should be property/value pairs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5d756b01da48dae2bd6cf75c7ce809bfb9ee2f2" translate="yes" xml:space="preserve">
          <source>Simple Examples</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f38128a917f0100cad786566b27a246c13ecdd9a" translate="yes" xml:space="preserve">
          <source>Simple File I/O</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a505aec2fa3b72f7f78306be89d6b54621f3da1" translate="yes" xml:space="preserve">
          <source>Simple Output</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56ed59267c06db5e1c6a5b182c5bebedf8df0043" translate="yes" xml:space="preserve">
          <source>Simple dialog menus are available for choosing directories or files. They return a string variable which can then be used with any command requiring a filename.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ced9c5c2b2152492df23e9164ce8fdf15a2c2838" translate="yes" xml:space="preserve">
          <source>Simplex iterations limit. It is decreased by one each time when one simplex iteration has been performed, and reaching zero value signals the solver to stop the search.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6164ce442d86bf5cc16340491d17bf106122e1df" translate="yes" xml:space="preserve">
          <source>Simplex method option:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ce6794f3e9c16306066004a750430b7e2e46402" translate="yes" xml:space="preserve">
          <source>Simulate an ARCH sequence of length &lt;var&gt;t&lt;/var&gt; with AR coefficients &lt;var&gt;b&lt;/var&gt; and CH coefficients &lt;var&gt;a&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44bf106ff1c1a8fcf042bfcd35ef0651b298f9f4" translate="yes" xml:space="preserve">
          <source>Since &lt;code&gt;eval()&lt;/code&gt; will stop at the first error it encounters, you must divide your tests up into blocks, with anything in a separate block evaluated separately. Blocks are introduced by valid keywords like &lt;code&gt;test&lt;/code&gt;, &lt;code&gt;function&lt;/code&gt;, or &lt;code&gt;assert&lt;/code&gt; immediately following &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="201609766611ec57a72c7e3684db99842e3c6ce8" translate="yes" xml:space="preserve">
          <source>Since Octave doesn&amp;rsquo;t look for definitions until they are needed, the following code will always print &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="371773c953f922ec34c46062009b429cecd8c026" translate="yes" xml:space="preserve">
          <source>Since Octave is Free Software users are encouraged to share their programs with others. To aid this sharing Octave supports the installation of extra packages. The &amp;lsquo;Octave Forge&amp;rsquo; project is a community-maintained set of packages that can be downloaded and installed in Octave. At the time of writing the &amp;lsquo;Octave Forge&amp;rsquo; project can be found online at &lt;a href=&quot;https://octave.sourceforge.io&quot;&gt;https://octave.sourceforge.io&lt;/a&gt;, but since the Internet is an ever-changing place this may not be true at the time of reading. Therefore it is recommended to see the Octave website for an updated reference.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad4e0cd4ecf9b63d40d0c2eca043253d1b9d05ca" translate="yes" xml:space="preserve">
          <source>Since Octave normally prints the value of an expression as soon as it has been evaluated, the simplest of all I/O functions is a simple expression. For example, the following expression will display the value of &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="225b42889e6df3331faaa56815bbd5042e1e5d0f" translate="yes" xml:space="preserve">
          <source>Since Octave supports variable number of input arguments, it is very useful to assign default values to some input arguments. When an input argument is declared in the argument list it is possible to assign a default value to the argument like this</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="866ccaee2f61d718a53644b84dec3ccfbb5f756b" translate="yes" xml:space="preserve">
          <source>Since a string is a character array, comparisons between strings work element by element as the following example shows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32f5d513fc377929c3ce16f779a17f10aa17ec5b" translate="yes" xml:space="preserve">
          <source>Since an error can occur during the evaluation of a program, it is very convenient to be able to detect that an error occurred, so that the error can be fixed. This is possible with the &lt;code&gt;try&lt;/code&gt; statement described in &lt;a href=&quot;the-try-statement#The-try-Statement&quot;&gt;The try Statement&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79f635a990cbd7ee9a0ffc758a4e38e23ce18655" translate="yes" xml:space="preserve">
          <source>Since an image is basically a matrix, Octave is a very powerful environment for processing and analyzing images. To illustrate how easy it is to do image processing in Octave, the following example will load an image, smooth it by a 5-by-5 averaging filter, and compute the gradient of the smoothed image.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe5a50d3e272f913cce77d8ade94d534983ec532" translate="yes" xml:space="preserve">
          <source>Since having this variable in memory might slow down other computations, it can be necessary to remove it manually from memory. The &lt;code&gt;clear&lt;/code&gt; or &lt;code&gt;clearvars&lt;/code&gt; functions do this.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="403c8d522dd65145f54ba91ab1025ca597ff7ac6" translate="yes" xml:space="preserve">
          <source>Since it is common to use errors when there is something wrong with the input to a function, Octave supports functions to simplify such code. When the &lt;code&gt;print_usage&lt;/code&gt; function is called, it reads the help text of the function calling &lt;code&gt;print_usage&lt;/code&gt;, and presents a useful error. If the help text is written in Texinfo it is possible to present an error message that only contains the function prototypes as described by the &lt;code&gt;@deftypefn&lt;/code&gt; parts of the help text. When the help text isn&amp;rsquo;t written in Texinfo, the error message contains the entire help message.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="647af729f3f59c989ee7a477f5faf6a5edda3f88" translate="yes" xml:space="preserve">
          <source>Since many of Octave&amp;rsquo;s functions use these functions, it is also useful to understand them, so that errors and warnings can be handled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="222643287bd79f5184811a5b23d9ec214d2d4673" translate="yes" xml:space="preserve">
          <source>Since sites may have many missing functions, you can define a macro rather than typing the same link over and again.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91c15c336de30c87933979657b6631114c883c9d" translate="yes" xml:space="preserve">
          <source>Since structures are themselves values, structure elements may reference other structures, as well. The following statement adds the field &lt;code&gt;d&lt;/code&gt; to the structure &lt;code&gt;x&lt;/code&gt;. The value of field &lt;code&gt;d&lt;/code&gt; is itself a data structure containing the single field &lt;code&gt;a&lt;/code&gt;, which has a value of 3.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="def2db0952bbc219ee5f013683f74cc0837a3963" translate="yes" xml:space="preserve">
          <source>Since the Kronecker product is associative, this is well-defined.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e9cfb649e69a5ff8daf4d32b2ef4f84d421e978" translate="yes" xml:space="preserve">
          <source>Since the comparison operators (see &lt;a href=&quot;comparison-ops#Comparison-Ops&quot;&gt;Comparison Ops&lt;/a&gt;) return matrices of ones and zeros, it is easy to test a matrix for many things, not just whether the elements are nonzero. For example,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d42c3c30d934452c5e8ebfa250047c7c60bb1ec8" translate="yes" xml:space="preserve">
          <source>Since the installed package expects its dependencies to be installed it may not function correctly. Because of this it is not recommended to disable dependency checking.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ef4405609b183b7b9a20751e89df21b1f551abe" translate="yes" xml:space="preserve">
          <source>Since the single-quote mark is also used for the transpose operator (see &lt;a href=&quot;arithmetic-ops#Arithmetic-Ops&quot;&gt;Arithmetic Ops&lt;/a&gt;) but double-quote marks have no other purpose in Octave, it is best to use double-quote marks to denote strings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7fb6379e2daec7344af74bc0b665728559823c8" translate="yes" xml:space="preserve">
          <source>Since the type of a variable may change during the execution of a program, it can be necessary to do type checking at run-time. Doing this also allows you to change the behavior of a function depending on the type of the input. As an example, this naive implementation of &lt;code&gt;abs&lt;/code&gt; returns the absolute value of the input if it is a real number, and the length of the input if it is a complex number.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dac4ffce91eecb19cc3cd8081caac352fbc6e347" translate="yes" xml:space="preserve">
          <source>Since this optimization may change the way code works (especially if badly written), a built-in variable &lt;code&gt;optimize_subsasgn_calls&lt;/code&gt; is provided to control it. It is on by default. Another way to avoid the optimization is to declare subsasgn methods with different output and input arguments like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ac95a7258e909bb0361d17155490a4eaf6cd501" translate="yes" xml:space="preserve">
          <source>Since version 4.0, Octave has limited support for &lt;code&gt;classdef&lt;/code&gt; classes. In contrast to the aforementioned classes, called &lt;em&gt;old style classes&lt;/em&gt; in this section, &lt;code&gt;classdef&lt;/code&gt; classes can be defined within a single m-file. Other innovations of &lt;code&gt;classdef&lt;/code&gt; classes are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7c5db2d26e80e53459f30f9acf9447e3d926806" translate="yes" xml:space="preserve">
          <source>Since warnings aren&amp;rsquo;t fatal to a running program, it is not possible to catch a warning using the &lt;code&gt;try&lt;/code&gt; statement or something similar. It is however possible to access the last warning as a string using the &lt;code&gt;lastwarn&lt;/code&gt; function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94c6125e1c86e8bf3b2c0837ddf2b6e445aea030" translate="yes" xml:space="preserve">
          <source>Single Line Comments</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1004d8f93de6f23a251afb70650b8fbc961d4086" translate="yes" xml:space="preserve">
          <source>Single Precision Data Types</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8fab969816d4c1ca976980acdf7fd40c38c7519" translate="yes" xml:space="preserve">
          <source>Single colored patches with black edges.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc9ff3a8fcff82feb886664cbc2dd32f393ad5c4" translate="yes" xml:space="preserve">
          <source>Single colored patches with invisible edges.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f656733602b547137a7138e6641374c712f73a3" translate="yes" xml:space="preserve">
          <source>Singular matrix.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c052ecd45535fd2eb8cf30fcb5756c9a3547f91" translate="yes" xml:space="preserve">
          <source>Singular values less than &lt;var&gt;tol&lt;/var&gt; are ignored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7152342a267362add3c0d7f69f720f7a9c76c9e" translate="yes" xml:space="preserve">
          <source>Size</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e88c3aeaceef44080e007ca9d259bb40dff2b1c5" translate="yes" xml:space="preserve">
          <source>Size in bytes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f627ac441f8efb99d166011508a0449eb79bfa84" translate="yes" xml:space="preserve">
          <source>Size of blocks in the file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9125ac99329267dfcc56d0e6838cc9abe6fbb2bb" translate="yes" xml:space="preserve">
          <source>Size of the &lt;code&gt;[left bottom right top]&lt;/code&gt; margins around the axes that enclose labels and title annotations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="465b658126fab8b90716a8f954fa745c105aa3b4" translate="yes" xml:space="preserve">
          <source>Size of the font used for text rendering. See &lt;a href=&quot;#XREFaxesfontunits&quot;&gt;fontunits property&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1f7a38788f0b96776df289c0701f783eba12752" translate="yes" xml:space="preserve">
          <source>Size of the font used for text rendering. See &lt;a href=&quot;#XREFtextfontunits&quot;&gt;fontunits property&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2dd1ac04e1b61d9ddc457565545dd5d426d4d72" translate="yes" xml:space="preserve">
          <source>Size of the font used for text rendering. See &lt;a href=&quot;#XREFuibuttongroupfontunits&quot;&gt;fontunits property&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6aaf136dde843ab375dd5e45162b3b58f14dc7d3" translate="yes" xml:space="preserve">
          <source>Size of the font used for text rendering. See &lt;a href=&quot;#XREFuicontrolfontunits&quot;&gt;fontunits property&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1b6fcff526047d2decf9cbd2da59424dca803e0" translate="yes" xml:space="preserve">
          <source>Size of the font used for text rendering. See &lt;a href=&quot;#XREFuipanelfontunits&quot;&gt;fontunits property&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23335be1698a2e5f80442b69442aac43a226290c" translate="yes" xml:space="preserve">
          <source>Size of the font used for text rendering. See &lt;a href=&quot;#XREFuitablefontunits&quot;&gt;fontunits property&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05a621f80794662cf288052bc2cc2991b4f5c198" translate="yes" xml:space="preserve">
          <source>Size of the markers measured in points.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3357c29c51bb8144039051ef8ada37c84b8539c" translate="yes" xml:space="preserve">
          <source>Skip if problem is well scaled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e58660d865aa6daf41a58389c12a5ab79f018561" translate="yes" xml:space="preserve">
          <source>Smallest Algebraic (valid only for real symmetric problems).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a71be3b9609b0438219f32b15b2ab97f307f931c" translate="yes" xml:space="preserve">
          <source>Smallest Imaginary part (valid only for complex or unsymmetric problems).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db5f0561ab6c97dd0c3af2812c9ddc5a33cbe3a5" translate="yes" xml:space="preserve">
          <source>Smallest Magnitude.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f13148512debf61bbaecd590a48e8682d237d0b2" translate="yes" xml:space="preserve">
          <source>Smallest Real part (valid only for complex or unsymmetric problems).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85fda9f3b6e4ba0ada81aa632d14bfbb8ae7cc85" translate="yes" xml:space="preserve">
          <source>Smooth values of 3-dimensional matrix &lt;var&gt;data&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2725354bfe2d5e64e4257e5072e990393e348f6" translate="yes" xml:space="preserve">
          <source>So with &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ad052271e0186ed108ab51a2c5684a90c5a025a" translate="yes" xml:space="preserve">
          <source>Software</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9c6254a5d8cda82d68d896471508a48803a8d70" translate="yes" xml:space="preserve">
          <source>Solid line. [default]</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27a6ad56591906c18de3e89218285c1e58228228" translate="yes" xml:space="preserve">
          <source>Solution is feasible.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c114424a32ca7edf575b61fc8536613cee0c1a59" translate="yes" xml:space="preserve">
          <source>Solution is infeasible.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b64aa9b1d05e5f6103f7205a8121c2dc7ad0bc6a" translate="yes" xml:space="preserve">
          <source>Solution is optimal.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb98e97e90c561fbce4ae23c21d6f7edd66a9a7b" translate="yes" xml:space="preserve">
          <source>Solution of Differential Equation Models by Polynomial Approximation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b5549f900e5a75819f5f2b25018e7cf42fa586e" translate="yes" xml:space="preserve">
          <source>Solution status is undefined.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11b4adc5624f6a37c266733c4d28a1c316ac8e0f" translate="yes" xml:space="preserve">
          <source>Solve &lt;code&gt;A x = b&lt;/code&gt; using the Preconditioned GMRES iterative method with restart, a.k.a. PGMRES(restart).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a56bc25499bb3f2ccdc8dd21836780439b8a341" translate="yes" xml:space="preserve">
          <source>Solve &lt;code&gt;A x = b&lt;/code&gt; using the Quasi-Minimal Residual iterative method (without look-ahead).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f714448aad754a4391cb5a149e40620f754877c" translate="yes" xml:space="preserve">
          <source>Solve &lt;code&gt;A x = b&lt;/code&gt; using the Transpose-Tree qmr method, based on the cgs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9287920f9cd3ee8b1303ef137116cbbdccfadb2a" translate="yes" xml:space="preserve">
          <source>Solve &lt;code&gt;A x = b&lt;/code&gt; using the stabilizied Bi-conjugate gradient iterative method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="650555541ec31c53188827ce347bcdfa5d3b0616" translate="yes" xml:space="preserve">
          <source>Solve &lt;code&gt;A x = b&lt;/code&gt;, where &lt;var&gt;A&lt;/var&gt; is a square matrix, using the Conjugate Gradients Squared method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="afab4881222d32a43f7b7b98e89f01036a666925" translate="yes" xml:space="preserve">
          <source>Solve &lt;code&gt;A'*x = b&lt;/code&gt; if true rather than &lt;code&gt;A*x = b&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ffac24b5143ba30317ea6904410def1be23ff1ef" translate="yes" xml:space="preserve">
          <source>Solve a linear program using the GNU &lt;small&gt;GLPK&lt;/small&gt; library.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01cfc99c80febf7222527b2eaa63d86746c9becb" translate="yes" xml:space="preserve">
          <source>Solve a quadratic program (QP).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e450dcd3a295d6e6b221c054e82f9600493bf77" translate="yes" xml:space="preserve">
          <source>Solve a set of differential-algebraic equations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63d55e72ddd9bd58de77f87066aa667182378df1" translate="yes" xml:space="preserve">
          <source>Solve a set of fully-implicit Ordinary Differential Equations (ODEs) or index 1 Differential Algebraic Equations (DAEs).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5669aa06148b60afc6c1c69f996b04952d417fd4" translate="yes" xml:space="preserve">
          <source>Solve a set of non-stiff Ordinary Differential Equations (non-stiff ODEs) with the well known explicit Bogacki-Shampine method of order 3.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="efbb3467eaea2583bc300ec27fc5544345eae48a" translate="yes" xml:space="preserve">
          <source>Solve a set of non-stiff Ordinary Differential Equations (non-stiff ODEs) with the well known explicit Dormand-Prince method of order 4.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32049ca21bd2f2547480f69bbdcc0166391bfc57" translate="yes" xml:space="preserve">
          <source>Solve a set of stiff Ordinary Differential Equations (ODEs) or stiff semi-explicit index 1 Differential Algebraic Equations (DAEs).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98854c7c1ede1b508a65943eced0675acc8111c1" translate="yes" xml:space="preserve">
          <source>Solve a system of nonlinear equations defined by the function &lt;var&gt;fcn&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6997e4ac2218cb10423f0e607b264f884b9dba58" translate="yes" xml:space="preserve">
          <source>Solve an unconstrained optimization problem defined by the function &lt;var&gt;fcn&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="894dc1f50bf06f31d043936b69846565b0951504" translate="yes" xml:space="preserve">
          <source>Solve the Sylvester equation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b6823b92b5c0c5e7586579a7008085337576a3a" translate="yes" xml:space="preserve">
          <source>Solve the linear system &lt;code&gt;A*x = b&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0e68743ccc31208b3a3d84b3a12ae2256e54337" translate="yes" xml:space="preserve">
          <source>Solve the linear system of equations &lt;code&gt;&lt;var&gt;A&lt;/var&gt; * &lt;var&gt;x&lt;/var&gt; = &lt;var&gt;b&lt;/var&gt;&lt;/code&gt; by means of the Preconditioned Conjugate Residuals iterative method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22aaff3af5782df56e3ea3d23b364113900d28da" translate="yes" xml:space="preserve">
          <source>Solve the linear system of equations &lt;code&gt;&lt;var&gt;A&lt;/var&gt;&amp;nbsp;*&amp;nbsp;&lt;var&gt;x&lt;/var&gt;&amp;nbsp;=&amp;nbsp;&lt;var&gt;b&lt;/var&gt;&lt;/code&gt; by means of the Bi-Conjugate Gradient iterative method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="102964a72c9a5fc127d68e470f82bbfbe4f569a5" translate="yes" xml:space="preserve">
          <source>Solve the linear system of equations &lt;code&gt;&lt;var&gt;A&lt;/var&gt;&amp;nbsp;*&amp;nbsp;&lt;var&gt;x&lt;/var&gt;&amp;nbsp;=&amp;nbsp;&lt;var&gt;b&lt;/var&gt;&lt;/code&gt; by means of the Preconditioned Conjugate Gradient iterative method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67d9d8eacbb3d6a289910f8582f45b27a9f67d12" translate="yes" xml:space="preserve">
          <source>Solve the nonlinear program</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f89aa4212e50146e9cf2260c6a241898928601bc" translate="yes" xml:space="preserve">
          <source>Solve the polynomial eigenvalue problem of degree &lt;var&gt;l&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="249c455887ab2639bba8bf14e0f466b4faf209eb" translate="yes" xml:space="preserve">
          <source>Solve the quadratic program defined by</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38cd603f29ea1f182a4589e3bef850f528b493a9" translate="yes" xml:space="preserve">
          <source>Solver failed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fde68155d35fbd41e88705c8707ef4fe1815a5b2" translate="yes" xml:space="preserve">
          <source>Solvers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a71b5cd1d7b5da45d2836c64130ddf657c322ab" translate="yes" xml:space="preserve">
          <source>Solving for &lt;var&gt;beta&lt;/var&gt; we can then write</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5300e77549d239058d2e444345b55e8cfb3f103a" translate="yes" xml:space="preserve">
          <source>Some examples signal errors. This normally displays an error message on your terminal. Error messages are shown on a line beginning with &lt;code&gt;error:&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6894d361de44277d12ab9974ccbc20b389e8a7a" translate="yes" xml:space="preserve">
          <source>Some file formats, such as TIFF and GIF, are able to store multiple images in a single file. &lt;var&gt;idx&lt;/var&gt; can be a scalar or vector specifying the index of the images to read. By default, Octave will read only the first page.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26ee9e7ecaadc7bc0ea2b3a75ffdfcd5dd2126b7" translate="yes" xml:space="preserve">
          <source>Some file formats, such as TIFF and GIF, are able to store multiple images in a single file. This option specifies if &lt;var&gt;img&lt;/var&gt; should be appended to the file (if it exists) or if a new file should be created for it (possibly overwriting an existing file). The value should be the string &lt;code&gt;&quot;Overwrite&quot;&lt;/code&gt; (default), or &lt;code&gt;&quot;Append&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="523ccdb6641c8121b47a15c058981b887f885544" translate="yes" xml:space="preserve">
          <source>Some of Octave&amp;rsquo;s functions are implemented in terms of functions that cannot be called recursively. For example, the ODE solver &lt;code&gt;lsode&lt;/code&gt; is ultimately implemented in a Fortran subroutine that cannot be called recursively, so &lt;code&gt;lsode&lt;/code&gt; should not be called either directly or indirectly from within the user-supplied function that &lt;code&gt;lsode&lt;/code&gt; requires. Doing so will result in an error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4cc0c6724d8956a64a1c85b6bd85f6a9e0e97f9e" translate="yes" xml:space="preserve">
          <source>Some of the Fortran subroutines may fail to compile with older versions of the Sun Fortran compiler. If you get errors like</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="142c0984f7ef0d791b0090f051e432fff494ae4c" translate="yes" xml:space="preserve">
          <source>Some of the built-in functions take a variable number of arguments, depending on the particular usage, and their behavior is different depending on the number of arguments supplied.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52eaefaaf1ddc65f86b8a23e5b39098204d70c31" translate="yes" xml:space="preserve">
          <source>Some of the properties of Hadamard matrices are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53b2cdebe3092f05376eba4dc6edb1163b208474" translate="yes" xml:space="preserve">
          <source>Some of these problems are due to bugs in other software, some are missing features that are too much work to add, and some are places where people&amp;rsquo;s opinions differ as to what is best.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd39171d5b22bd079b4782bc665d8b8c8fe81652" translate="yes" xml:space="preserve">
          <source>Some other built-in functions can also return permutation matrices. Examples include &lt;em&gt;inv&lt;/em&gt; or &lt;em&gt;lu&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a3d6a206eefad6142a61aca76135b4d937d720f" translate="yes" xml:space="preserve">
          <source>Some output may appear to be incorrect when it is in fact due to a program whose behavior is undefined, which happened by chance to give the desired results on another system. For example, the range operator may produce different results because of differences in the way floating point arithmetic is handled on various systems.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0934ee6f0aa978d6ce6002cb6bd7e4ba44175ca6" translate="yes" xml:space="preserve">
          <source>Some people have reported that calls to system() and the pager do not work on SunOS systems. This is apparently due to having &lt;code&gt;G_HAVE_SYS_WAIT&lt;/code&gt; defined to be 0 instead of 1 when compiling &lt;code&gt;libg++&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="efdcd5ee5905e7c1136ba86704f4cd00d6abfe1b" translate="yes" xml:space="preserve">
          <source>Some transmission channels can not accept binary data. It is customary to encode binary data in Base64 for transmission and to decode the data upon reception.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2cdabbfafe6456cf44071f24c3fa72727b449fb" translate="yes" xml:space="preserve">
          <source>Someday I hope to expand this to include a complete description of Octave&amp;rsquo;s mechanism for managing user-defined data types. Until this feature is documented here, you will have to make do by reading the code in the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b5e96ceab08252d1eef821882f143b564efd346" translate="yes" xml:space="preserve">
          <source>Sometimes &lt;code&gt;csymamd&lt;/code&gt; works well for symmetric indefinite matrices too. The matrix &lt;var&gt;S&lt;/var&gt; is assumed to be symmetric; only the strictly lower triangular part is referenced. &lt;var&gt;S&lt;/var&gt; must be square. The ordering is followed by an elimination tree post-ordering.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30b2e27ac34bfaf9352f265a47896dc4c408fe35" translate="yes" xml:space="preserve">
          <source>Sometimes &lt;code&gt;symamd&lt;/code&gt; works well for symmetric indefinite matrices too. The matrix &lt;var&gt;S&lt;/var&gt; is assumed to be symmetric; only the strictly lower triangular part is referenced. &lt;var&gt;S&lt;/var&gt; must be square.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ea7b41bdb61e7f0908947e520420677eb3d19fa" translate="yes" xml:space="preserve">
          <source>Sometimes during development there is a test that should work but is known to fail. You still want to leave the test in because when the final code is ready the test should pass, but you may not be able to fix it immediately. To avoid unnecessary bug reports for these known failures, mark the block with &lt;code&gt;xtest&lt;/code&gt; rather than &lt;code&gt;test&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74b55c3ad1d3f16673c7422322de8687afbcea27" translate="yes" xml:space="preserve">
          <source>Sometimes functions are only partially compatible, in which case you can list the non-compatible cases separately. To refer to another function in the package, use &lt;code&gt;&amp;lt;f&amp;gt;fn&amp;lt;/f&amp;gt;&lt;/code&gt;. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f87685ecdb67d35a3b6bc6b2e333004e848f9672" translate="yes" xml:space="preserve">
          <source>Sometimes it is useful to explicitly tell Octave to use the default value of an input argument. This can be done writing a &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d40175751641c0149662c2e7fdc0a8c98b8f3ad" translate="yes" xml:space="preserve">
          <source>Sometimes it is useful to see the commands in a function or script as they are being evaluated. This can be especially helpful for debugging some kinds of problems.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5869eabbff180993614716f7ca5c43d8f146844" translate="yes" xml:space="preserve">
          <source>Sometimes one does not have the function, but only the raw (x, y) points from which to perform an integration. This can occur when collecting data in an experiment. The &lt;code&gt;trapz&lt;/code&gt; function can integrate these values as shown in the following example where &quot;data&quot; has been collected on the cosine function over the range [0, pi/2).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0874d6009ea55db4bc27aea976ed62550ba7793" translate="yes" xml:space="preserve">
          <source>Sometimes one needs to write data to a file that is only temporary. This is most commonly used when an external program launched from within Octave needs to access data. When Octave exits all temporary files will be deleted, so this step need not be executed manually.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67c2414dad5e6606c74e5621bedc16eb20eb2b92" translate="yes" xml:space="preserve">
          <source>Sometimes people give a few sketchy facts and ask, &amp;ldquo;Does this ring a bell?&amp;rdquo; This cannot help us fix a bug. It is better to send a complete bug report to begin with.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77fdb42b6d7858a779b2dd1a067c845b83b88b34" translate="yes" xml:space="preserve">
          <source>Sometimes the number of input arguments is not known when the function is defined. As an example think of a function that returns the smallest of all its input arguments. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f043516b55f3e730a5faf94e9d0893f2093499f4" translate="yes" xml:space="preserve">
          <source>Sometimes the number of items can not be computed in advance, and stack-like operations are needed. When elements are being repeatedly inserted or removed from the end of an array, Octave detects it as stack usage and attempts to use a smarter memory management strategy by pre-allocating the array in bigger chunks. This strategy is also applied to cell and struct arrays.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83aff69815ec3a24ca7c78dfeebb73daf23d9f7c" translate="yes" xml:space="preserve">
          <source>Sometimes to help describe one expression, another expression is shown that produces identical results. The exact equivalence of expressions is indicated with &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77fa867ac8b4790ed4a80c01add5402eae41a327" translate="yes" xml:space="preserve">
          <source>Sometimes you want to write a function so that when you call it, it modifies variables in your own context. This allows you to use a pass-by-name style of function, which is similar to using a pointer in programming languages such as C.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d41bc42f4125dd6ccb562b1d2b6163511cc912b8" translate="yes" xml:space="preserve">
          <source>Sometimes, you may find it necessary to evaluate an expression that has been computed and stored in a string, which is exactly what the &lt;code&gt;eval&lt;/code&gt; function lets you do.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c10cf7cc6b6abf936456e36d5f1c4f05d8f496a" translate="yes" xml:space="preserve">
          <source>Sort the numbers &lt;var&gt;z&lt;/var&gt; into complex conjugate pairs ordered by increasing real part.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5036e93374c46c42b33691d52d91ebaf6f3745a8" translate="yes" xml:space="preserve">
          <source>Sort the rows of the matrix &lt;var&gt;A&lt;/var&gt; according to the order of the columns specified in &lt;var&gt;c&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cbb2b5b47fff53cc72f7a4fa47a4a4062d940701" translate="yes" xml:space="preserve">
          <source>Sorting of complex entries is done first by magnitude (&lt;code&gt;abs&amp;nbsp;(&lt;var&gt;z&lt;/var&gt;)&lt;/code&gt;) and for any ties by phase angle (&lt;code&gt;angle&amp;nbsp;(z)&lt;/code&gt;). For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b37110e5b01350732eac4676af2611966b9ccef" translate="yes" xml:space="preserve">
          <source>Source Code</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6a5e0794313567b1aed5db45657301b87ba6d57" translate="yes" xml:space="preserve">
          <source>Source code highlighter and manipulator; a Qt port of Scintilla (&lt;a href=&quot;http://www.riverbankcomputing.co.uk/software/qscintilla&quot;&gt;http://www.riverbankcomputing.co.uk/software/qscintilla&lt;/a&gt;). QScintilla is used for syntax highlighting and code completion in the GUI.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f4c0dde68555579644d68caee612932dac88084" translate="yes" xml:space="preserve">
          <source>Spaces are ignored during conversion and may be used to make the binary number more readable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f335077b01fdd9fd294932d3e50b87a70fca60bf" translate="yes" xml:space="preserve">
          <source>Sparse Functions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ddc3566eccc0108197128e17ff3a562299baeba" translate="yes" xml:space="preserve">
          <source>Sparse Linear Algebra</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ad5776ccb102de28793a78fafefcd37e2cc8937" translate="yes" xml:space="preserve">
          <source>Sparse Matrices</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac65ec062bad087c89e5083489cf99c0958a2129" translate="yes" xml:space="preserve">
          <source>Sparse Matrices in Oct-Files</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bfeeb60a9ad19a9e5e025fcf6393f9d0fb06cfa0" translate="yes" xml:space="preserve">
          <source>Sparse Matrices with Mex-Files</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e22ef5f20b58f8d2dbcb6c7973e3951cc07827a9" translate="yes" xml:space="preserve">
          <source>Sparse matrix conversion:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="abfc63d0bcf30ed336a360519e0b56c6ce1883b4" translate="yes" xml:space="preserve">
          <source>Sparse matrix factorization library (&lt;a href=&quot;http://faculty.cse.tamu.edu/davis/suitesparse.html&quot;&gt;http://faculty.cse.tamu.edu/davis/suitesparse.html&lt;/a&gt;). SuiteSparse is required to provide sparse matrix factorizations and solution of linear equations for sparse systems.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f735aa3c64269bf5978503baa9484358ced05b51" translate="yes" xml:space="preserve">
          <source>Sparse matrix reordering:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ca36f19363605580ce8ff8c0b8ba94b1548e941" translate="yes" xml:space="preserve">
          <source>Special Functions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd45a654c543215cf5030fdcdb09e81336ece671" translate="yes" xml:space="preserve">
          <source>Special Utility Matrices</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ceaf7b67f1d48e1b1a3e3472b62cfad72ebcf6b" translate="yes" xml:space="preserve">
          <source>Special functions such as &lt;code&gt;bessel&lt;/code&gt; or &lt;code&gt;factor&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="087ddf8bb894e200e5e65eaf8f6fd739a6c5ad0b" translate="yes" xml:space="preserve">
          <source>Specialized Solvers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0b79a9044b099df5c76420cefdf69c0be2f1a79" translate="yes" xml:space="preserve">
          <source>Specifies points to be used in defining subintervals of the quadrature algorithm, or if &lt;var&gt;a&lt;/var&gt;, &lt;var&gt;b&lt;/var&gt;, or &lt;var&gt;waypoints&lt;/var&gt; are complex then the quadrature is calculated as a contour integral along a piecewise continuous path. For more detail see &lt;code&gt;quadgk&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af7301f4937da84e3de23113df96bf1b1720b6b7" translate="yes" xml:space="preserve">
          <source>Specifies that no run-time measurement of the optimal means of calculating a particular is performed, and a simple heuristic is used to pick a (probably sub-optimal) plan. The advantage of this method is that there is little or no overhead in the generation of the plan, which is appropriate for a Fourier transform that will be calculated once.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5910626de7190ebfa4fa79a143f67897f65e50a" translate="yes" xml:space="preserve">
          <source>Specifies that the result should always include a decimal point, even if no digits follow it. For the &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a7ce37331ad35b9ff9dc267f3b3420119826396" translate="yes" xml:space="preserve">
          <source>Specifies the size of the text fields and can take three forms:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23ac5c7d252dbf7bee5ccf53cfee93ada2977599" translate="yes" xml:space="preserve">
          <source>Specifies whether the opengl (pixel-based) or painters (vector-based) renderer is used. This is equivalent to changing the figure&amp;rsquo;s &lt;code&gt;&quot;Renderer&quot;&lt;/code&gt; property. When the figure &lt;code&gt;RendererMode&lt;/code&gt; property is &lt;code&gt;&quot;auto&quot;&lt;/code&gt; Octave will use the &lt;code&gt;&quot;opengl&quot;&lt;/code&gt; renderer for raster formats (e.g., JPEG) and &lt;code&gt;&quot;painters&quot;&lt;/code&gt; for vector formats (e.g., PDF). Those options are only supported for the &quot;qt&quot; graphics tookit.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90928add3adddcf382d652603960e9f38bea10b4" translate="yes" xml:space="preserve">
          <source>Specify elements of the state vector that are expected to remain non-negative during the simulation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81ba07e09d600916af13c6aae4e7d0890ecc9275" translate="yes" xml:space="preserve">
          <source>Specify parts of the input which are considered comments and will be skipped. &lt;var&gt;value&lt;/var&gt; is the comment style and can be either (1) A string or 1x1 cell string, to skip everything to the right of it; (2) A cell array of two strings, to skip everything between the first and second strings. Comments are only parsed where whitespace is accepted and do not act as delimiters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d2d4eb1dda4ca29e59b36cfd893607b4c76eda6" translate="yes" xml:space="preserve">
          <source>Specify the color as a string</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df7b7d3112b2fb90b32562c04c8cacdce982cb64" translate="yes" xml:space="preserve">
          <source>Specify the color numerically</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="562e6bad4b3ada6f4a5be63c0881abbbc1dcd890" translate="yes" xml:space="preserve">
          <source>Specify the command for calling Ghostscript. For Unix the default is &lt;code&gt;&quot;gs&quot;&lt;/code&gt; and for Windows it is &lt;code&gt;&quot;gswin32c&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05e2bc4d0b445b41c967285a3ba0aada0cf3bc51" translate="yes" xml:space="preserve">
          <source>Specify the font to use</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4840b37bffefbee4cf0dbc184bf87455cef17f5" translate="yes" xml:space="preserve">
          <source>Specify the handle, &lt;var&gt;h&lt;/var&gt;, of the figure to be printed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a73d1182e2a631087c20acfff9947b21610717e" translate="yes" xml:space="preserve">
          <source>Specify the name of the doc cache file to use. The value of &lt;var&gt;filename&lt;/var&gt; specified on the command line will override any value of &lt;code&gt;OCTAVE_DOC_CACHE_FILE&lt;/code&gt; found in the environment, but not any commands in the system or user startup files that use the &lt;code&gt;doc_cache_file&lt;/code&gt; function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f33a3790f3074735dea3f123efcfa1210d80aa2a" translate="yes" xml:space="preserve">
          <source>Specify the name of the file containing Texinfo macros for use by makeinfo.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dadd7a8fcea9ba5a9847c9dc233eed8af5eca78d" translate="yes" xml:space="preserve">
          <source>Specify the name of the file containing documentation strings for the built-in functions of Octave. This value is normally correct and should only need to specified in extraordinary situations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a63ba63697242bda0a5ed4a89aa9e369044125f" translate="yes" xml:space="preserve">
          <source>Specify the name of the info file to use. The value of &lt;var&gt;filename&lt;/var&gt; specified on the command line will override any value of &lt;code&gt;OCTAVE_INFO_FILE&lt;/code&gt; found in the environment, but not any commands in the system or user startup files that use the &lt;code&gt;info_file&lt;/code&gt; function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4ec74bbdd1ca8a8e7ef4419bd7b494e74d8bcd1" translate="yes" xml:space="preserve">
          <source>Specify the name of the info program to use. The value of &lt;var&gt;program&lt;/var&gt; specified on the command line will override any value of &lt;code&gt;OCTAVE_INFO_PROGRAM&lt;/code&gt; found in the environment, but not any commands in the system or user startup files that use the &lt;code&gt;info_program&lt;/code&gt; function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa39a38b7d143c67307e92889fe5afc99ec9c746" translate="yes" xml:space="preserve">
          <source>Specify the orientation of the plot for printed output. For non-printed output the aspect ratio of the output corresponds to the plot area defined by the &lt;code&gt;&quot;paperposition&quot;&lt;/code&gt; property in the orientation specified. This option is equivalent to changing the figure&amp;rsquo;s &lt;code&gt;&quot;paperorientation&quot;&lt;/code&gt; property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7bef5fad77031d3f3d7aac86f5b156ab22c2a80f" translate="yes" xml:space="preserve">
          <source>Specify the path to search for programs to run. The value of &lt;var&gt;path&lt;/var&gt; specified on the command line will override any value of &lt;code&gt;OCTAVE_EXEC_PATH&lt;/code&gt; found in the environment, but not any commands in the system or user startup files that set the built-in variable &lt;code&gt;EXEC_PATH&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b5965c62716fac2f35247b08423ffaeff192e7f" translate="yes" xml:space="preserve">
          <source>Specify the position and size of the figure canvas. The four elements of the vector are the coordinates of the lower left corner and width and height of the figure. See &lt;a href=&quot;#XREFfigureunits&quot;&gt;units property&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e953d7c3ea3e3fe8f84ba0aa3099892b4f8efd25" translate="yes" xml:space="preserve">
          <source>Specify the position and size of the figure including the top menubar and the bottom status bar. The four elements of the vector are the coordinates of the lower left corner and width and height of the figure. See &lt;a href=&quot;#XREFfigureunits&quot;&gt;units property&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33ce3a8f0b635ee7f2535717e000f75ae819ecb4" translate="yes" xml:space="preserve">
          <source>Specify the position of the plot excluding titles, axes, and legend. The four elements of the vector are the coordinates of the lower left corner and width and height of the plot, in units normalized to the width and height of the plot window. For example, &lt;code&gt;[0.2, 0.3, 0.4, 0.5]&lt;/code&gt; sets the lower left corner of the axes at &lt;em&gt;(0.2, 0.3)&lt;/em&gt; and the width and height to be 0.4 and 0.5 respectively. See &lt;a href=&quot;#XREFaxesouterposition&quot;&gt;outerposition property&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83eac5a83a3a1663e06384694a46937eed04fcba" translate="yes" xml:space="preserve">
          <source>Specify the position of the plot including titles, axes, and legend. The four elements of the vector are the coordinates of the lower left corner and width and height of the plot, in units normalized to the width and height of the plot window. For example, &lt;code&gt;[0.2, 0.3, 0.4, 0.5]&lt;/code&gt; sets the lower left corner of the axes at &lt;em&gt;(0.2, 0.3)&lt;/em&gt; and the width and height to be 0.4 and 0.5 respectively. See &lt;a href=&quot;#XREFaxesposition&quot;&gt;position property&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c6bd62cefaaff89efd6ca243cd928686c1a4335" translate="yes" xml:space="preserve">
          <source>Specify the relative height and width of the data displayed in the axes. Setting &lt;code&gt;dataaspectratio&lt;/code&gt; to &lt;code&gt;[1,&amp;nbsp;2]&lt;/code&gt; causes the length of one unit as displayed on the x-axis to be the same as the length of 2 units on the y-axis. See &lt;a href=&quot;aspect-ratio#XREFdaspect&quot;&gt;daspect function&lt;/a&gt;. Setting &lt;code&gt;dataaspectratio&lt;/code&gt; also forces the &lt;code&gt;dataaspectratiomode&lt;/code&gt; property to be set to &lt;code&gt;&quot;manual&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb399d9ecc21d6d9faf632d70e7882354ed969f2" translate="yes" xml:space="preserve">
          <source>Specify the size of the font to use</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="949bdf5bfc1603589b3f94c1476ed82d4941351f" translate="yes" xml:space="preserve">
          <source>Specify the string used as a title for the current axis.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="852a970d78b8aefc2b71430d259aa4883ed6abbc" translate="yes" xml:space="preserve">
          <source>Specify the string used to label the x-axis of the current axis.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db1615b5d9cb2bf7edd617d95abf11a42460ba06" translate="yes" xml:space="preserve">
          <source>Specify the two-dimensional integration method to be used, with valid options being &lt;code&gt;&quot;auto&quot;&lt;/code&gt; (default), &lt;code&gt;&quot;tiled&quot;&lt;/code&gt;, or &lt;code&gt;&quot;iterated&quot;&lt;/code&gt;. When using &lt;code&gt;&quot;auto&quot;&lt;/code&gt;, Octave will choose the &lt;code&gt;&quot;tiled&quot;&lt;/code&gt; method unless any of the integration limits are infinite.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b70de08d5881405a9eaa20a0f16cbe55f10b109f" translate="yes" xml:space="preserve">
          <source>Specify whether &lt;code&gt;odefun&lt;/code&gt; can be passed multiple values of the state at once.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7aca6ce34edfde1663f9ec03bab8e6ff52ad7cc3" translate="yes" xml:space="preserve">
          <source>Specify whether axes processes mouse events or passes them to ancestors of the object. When enabled, the object may respond to mouse clicks by evaluating the &lt;code&gt;&quot;buttondownfcn&quot;&lt;/code&gt;, showing the uicontextmenu, and eventually becoming the root &lt;code&gt;&quot;currentobject&quot;&lt;/code&gt;. This property is only relevant when the object can accept mouse clicks which is determined by the &lt;code&gt;&quot;pickableparts&quot;&lt;/code&gt; property. See &lt;a href=&quot;#XREFaxespickableparts&quot;&gt;pickableparts property&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a55845eb0d1c1fe0e747399239d72c5c6914fb1" translate="yes" xml:space="preserve">
          <source>Specify whether axes will accept mouse clicks. By default, &lt;code&gt;pickableparts&lt;/code&gt; is &lt;code&gt;&quot;visible&quot;&lt;/code&gt; and only visible parts of the axes or its children may react to mouse clicks. When &lt;code&gt;pickableparts&lt;/code&gt; is &lt;code&gt;&quot;all&quot;&lt;/code&gt; both visible and invisible parts (or children) may react to mouse clicks. When &lt;code&gt;pickableparts&lt;/code&gt; is &lt;code&gt;&quot;none&quot;&lt;/code&gt; mouse clicks on the object are ignored and transmitted to any objects underneath this one. When an object is configured to accept mouse clicks the &lt;code&gt;&quot;hittest&quot;&lt;/code&gt; property will determine how they are processed. See &lt;a href=&quot;#XREFaxeshittest&quot;&gt;hittest property&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31769bd51827270cf3db5125b51c2540dd842068" translate="yes" xml:space="preserve">
          <source>Specify whether figure processes mouse events or passes them to ancestors of the object. When enabled, the object may respond to mouse clicks by evaluating the &lt;code&gt;&quot;buttondownfcn&quot;&lt;/code&gt;, showing the uicontextmenu, and eventually becoming the root &lt;code&gt;&quot;currentobject&quot;&lt;/code&gt;. This property is only relevant when the object can accept mouse clicks which is determined by the &lt;code&gt;&quot;pickableparts&quot;&lt;/code&gt; property. See &lt;a href=&quot;#XREFfigurepickableparts&quot;&gt;pickableparts property&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0da3dbd631ebdc9eb4e12ff57935c7ddc232f6ea" translate="yes" xml:space="preserve">
          <source>Specify whether image processes mouse events or passes them to ancestors of the object. When enabled, the object may respond to mouse clicks by evaluating the &lt;code&gt;&quot;buttondownfcn&quot;&lt;/code&gt;, showing the uicontextmenu, and eventually becoming the root &lt;code&gt;&quot;currentobject&quot;&lt;/code&gt;. This property is only relevant when the object can accept mouse clicks which is determined by the &lt;code&gt;&quot;pickableparts&quot;&lt;/code&gt; property. See &lt;a href=&quot;#XREFimagepickableparts&quot;&gt;pickableparts property&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a982c7994a71be438bdea3b32765e48eacc1b4f" translate="yes" xml:space="preserve">
          <source>Specify whether image will accept mouse clicks. By default, &lt;code&gt;pickableparts&lt;/code&gt; is &lt;code&gt;&quot;visible&quot;&lt;/code&gt; and only visible parts of the image or its children may react to mouse clicks. When &lt;code&gt;pickableparts&lt;/code&gt; is &lt;code&gt;&quot;all&quot;&lt;/code&gt; both visible and invisible parts (or children) may react to mouse clicks. When &lt;code&gt;pickableparts&lt;/code&gt; is &lt;code&gt;&quot;none&quot;&lt;/code&gt; mouse clicks on the object are ignored and transmitted to any objects underneath this one. When an object is configured to accept mouse clicks the &lt;code&gt;&quot;hittest&quot;&lt;/code&gt; property will determine how they are processed. See &lt;a href=&quot;#XREFimagehittest&quot;&gt;hittest property&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="206d69ba36785131de0181d4ae6cf8833f17ccae" translate="yes" xml:space="preserve">
          <source>Specify whether light processes mouse events or passes them to ancestors of the object. When enabled, the object may respond to mouse clicks by evaluating the &lt;code&gt;&quot;buttondownfcn&quot;&lt;/code&gt;, showing the uicontextmenu, and eventually becoming the root &lt;code&gt;&quot;currentobject&quot;&lt;/code&gt;. This property is only relevant when the object can accept mouse clicks which is determined by the &lt;code&gt;&quot;pickableparts&quot;&lt;/code&gt; property. See &lt;a href=&quot;#XREFlightpickableparts&quot;&gt;pickableparts property&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb1b96b0404b926b3a3547364b5292d25693688e" translate="yes" xml:space="preserve">
          <source>Specify whether light will accept mouse clicks. By default, &lt;code&gt;pickableparts&lt;/code&gt; is &lt;code&gt;&quot;visible&quot;&lt;/code&gt; and only visible parts of the light or its children may react to mouse clicks. When &lt;code&gt;pickableparts&lt;/code&gt; is &lt;code&gt;&quot;all&quot;&lt;/code&gt; both visible and invisible parts (or children) may react to mouse clicks. When &lt;code&gt;pickableparts&lt;/code&gt; is &lt;code&gt;&quot;none&quot;&lt;/code&gt; mouse clicks on the object are ignored and transmitted to any objects underneath this one. When an object is configured to accept mouse clicks the &lt;code&gt;&quot;hittest&quot;&lt;/code&gt; property will determine how they are processed. See &lt;a href=&quot;#XREFlighthittest&quot;&gt;hittest property&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="216256c74f8beb75e3cf481814065462e10cba37" translate="yes" xml:space="preserve">
          <source>Specify whether line processes mouse events or passes them to ancestors of the object. When enabled, the object may respond to mouse clicks by evaluating the &lt;code&gt;&quot;buttondownfcn&quot;&lt;/code&gt;, showing the uicontextmenu, and eventually becoming the root &lt;code&gt;&quot;currentobject&quot;&lt;/code&gt;. This property is only relevant when the object can accept mouse clicks which is determined by the &lt;code&gt;&quot;pickableparts&quot;&lt;/code&gt; property. See &lt;a href=&quot;#XREFlinepickableparts&quot;&gt;pickableparts property&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea590404ab330b999ba84b1fd163c21eaafb9bb4" translate="yes" xml:space="preserve">
          <source>Specify whether line will accept mouse clicks. By default, &lt;code&gt;pickableparts&lt;/code&gt; is &lt;code&gt;&quot;visible&quot;&lt;/code&gt; and only visible parts of the line or its children may react to mouse clicks. When &lt;code&gt;pickableparts&lt;/code&gt; is &lt;code&gt;&quot;all&quot;&lt;/code&gt; both visible and invisible parts (or children) may react to mouse clicks. When &lt;code&gt;pickableparts&lt;/code&gt; is &lt;code&gt;&quot;none&quot;&lt;/code&gt; mouse clicks on the object are ignored and transmitted to any objects underneath this one. When an object is configured to accept mouse clicks the &lt;code&gt;&quot;hittest&quot;&lt;/code&gt; property will determine how they are processed. See &lt;a href=&quot;#XREFlinehittest&quot;&gt;hittest property&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9491eeb43cea2264a189c437c76969dfb3acbd5" translate="yes" xml:space="preserve">
          <source>Specify whether output should be returned only at the end of each time step or also at intermediate time instances. The value should be a scalar indicating the number of equally spaced time points to use within each timestep at which to return output. &lt;em&gt;Note&lt;/em&gt;: This option is not yet implemented.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a92aa093cc5ef29c69f84d0808ea1e8e20664de" translate="yes" xml:space="preserve">
          <source>Specify whether patch processes mouse events or passes them to ancestors of the object. When enabled, the object may respond to mouse clicks by evaluating the &lt;code&gt;&quot;buttondownfcn&quot;&lt;/code&gt;, showing the uicontextmenu, and eventually becoming the root &lt;code&gt;&quot;currentobject&quot;&lt;/code&gt;. This property is only relevant when the object can accept mouse clicks which is determined by the &lt;code&gt;&quot;pickableparts&quot;&lt;/code&gt; property. See &lt;a href=&quot;#XREFpatchpickableparts&quot;&gt;pickableparts property&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95f8d625986da3138de946e568da91b6fa1638da" translate="yes" xml:space="preserve">
          <source>Specify whether patch will accept mouse clicks. By default, &lt;code&gt;pickableparts&lt;/code&gt; is &lt;code&gt;&quot;visible&quot;&lt;/code&gt; and only visible parts of the patch or its children may react to mouse clicks. When &lt;code&gt;pickableparts&lt;/code&gt; is &lt;code&gt;&quot;all&quot;&lt;/code&gt; both visible and invisible parts (or children) may react to mouse clicks. When &lt;code&gt;pickableparts&lt;/code&gt; is &lt;code&gt;&quot;none&quot;&lt;/code&gt; mouse clicks on the object are ignored and transmitted to any objects underneath this one. When an object is configured to accept mouse clicks the &lt;code&gt;&quot;hittest&quot;&lt;/code&gt; property will determine how they are processed. See &lt;a href=&quot;#XREFpatchhittest&quot;&gt;hittest property&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="005716b094a0cfedc0d5bd7ec26990cbf3434ffa" translate="yes" xml:space="preserve">
          <source>Specify whether surface processes mouse events or passes them to ancestors of the object. When enabled, the object may respond to mouse clicks by evaluating the &lt;code&gt;&quot;buttondownfcn&quot;&lt;/code&gt;, showing the uicontextmenu, and eventually becoming the root &lt;code&gt;&quot;currentobject&quot;&lt;/code&gt;. This property is only relevant when the object can accept mouse clicks which is determined by the &lt;code&gt;&quot;pickableparts&quot;&lt;/code&gt; property. See &lt;a href=&quot;#XREFsurfacepickableparts&quot;&gt;pickableparts property&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c741d803fdd471e2f9c461769c4e36e0433b4a44" translate="yes" xml:space="preserve">
          <source>Specify whether surface will accept mouse clicks. By default, &lt;code&gt;pickableparts&lt;/code&gt; is &lt;code&gt;&quot;visible&quot;&lt;/code&gt; and only visible parts of the surface or its children may react to mouse clicks. When &lt;code&gt;pickableparts&lt;/code&gt; is &lt;code&gt;&quot;all&quot;&lt;/code&gt; both visible and invisible parts (or children) may react to mouse clicks. When &lt;code&gt;pickableparts&lt;/code&gt; is &lt;code&gt;&quot;none&quot;&lt;/code&gt; mouse clicks on the object are ignored and transmitted to any objects underneath this one. When an object is configured to accept mouse clicks the &lt;code&gt;&quot;hittest&quot;&lt;/code&gt; property will determine how they are processed. See &lt;a href=&quot;#XREFsurfacehittest&quot;&gt;hittest property&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="426c1fa55c7c572e5535f2a7e6f57446f0504d7d" translate="yes" xml:space="preserve">
          <source>Specify whether text processes mouse events or passes them to ancestors of the object. When enabled, the object may respond to mouse clicks by evaluating the &lt;code&gt;&quot;buttondownfcn&quot;&lt;/code&gt;, showing the uicontextmenu, and eventually becoming the root &lt;code&gt;&quot;currentobject&quot;&lt;/code&gt;. This property is only relevant when the object can accept mouse clicks which is determined by the &lt;code&gt;&quot;pickableparts&quot;&lt;/code&gt; property. See &lt;a href=&quot;#XREFtextpickableparts&quot;&gt;pickableparts property&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db12be3a995b81861e703a56c90288d7a0b72edb" translate="yes" xml:space="preserve">
          <source>Specify whether text will accept mouse clicks. By default, &lt;code&gt;pickableparts&lt;/code&gt; is &lt;code&gt;&quot;visible&quot;&lt;/code&gt; and only visible parts of the text or its children may react to mouse clicks. When &lt;code&gt;pickableparts&lt;/code&gt; is &lt;code&gt;&quot;all&quot;&lt;/code&gt; both visible and invisible parts (or children) may react to mouse clicks. When &lt;code&gt;pickableparts&lt;/code&gt; is &lt;code&gt;&quot;none&quot;&lt;/code&gt; mouse clicks on the object are ignored and transmitted to any objects underneath this one. When an object is configured to accept mouse clicks the &lt;code&gt;&quot;hittest&quot;&lt;/code&gt; property will determine how they are processed. See &lt;a href=&quot;#XREFtexthittest&quot;&gt;hittest property&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="565bd677b5aa15edbb61e35501c3417d2447cc41" translate="yes" xml:space="preserve">
          <source>Specify whether the Jacobian is a constant matrix or depends on the state.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37c351ad215b6772172366b4281d507ed898aef9" translate="yes" xml:space="preserve">
          <source>Specify whether the mass matrix depends on the state or only on time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4c2147a103d9e36d277436e51a3ef27eb400ec9" translate="yes" xml:space="preserve">
          <source>Specify whether the mass matrix is singular.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c263ab2f6bb5ad109dfaa808729bde5cbe520444" translate="yes" xml:space="preserve">
          <source>Specify whether this object&amp;rsquo;s callback functions may be interrupted by other callbacks. By default &lt;code&gt;interruptible&lt;/code&gt; is &lt;code&gt;&quot;on&quot;&lt;/code&gt; and callbacks that make use of &lt;code&gt;drawnow&lt;/code&gt;, &lt;code&gt;figure&lt;/code&gt;, &lt;code&gt;waitfor&lt;/code&gt;, &lt;code&gt;getframe&lt;/code&gt; or &lt;code&gt;pause&lt;/code&gt; functions are eventually interrupted. See &lt;a href=&quot;callbacks#Callbacks&quot;&gt;Callbacks section&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3de050a95ee407b1581b3d04b254c5340be0acae" translate="yes" xml:space="preserve">
          <source>Specify whether uibuttongroup processes mouse events or passes them to ancestors of the object. When enabled, the object may respond to mouse clicks by evaluating the &lt;code&gt;&quot;buttondownfcn&quot;&lt;/code&gt;, showing the uicontextmenu, and eventually becoming the root &lt;code&gt;&quot;currentobject&quot;&lt;/code&gt;. This property is only relevant when the object can accept mouse clicks which is determined by the &lt;code&gt;&quot;pickableparts&quot;&lt;/code&gt; property. See &lt;a href=&quot;#XREFuibuttongrouppickableparts&quot;&gt;pickableparts property&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33aba09c1c61abcbbed4af4140ba61195967f450" translate="yes" xml:space="preserve">
          <source>Specify whether uibuttongroup will accept mouse clicks. By default, &lt;code&gt;pickableparts&lt;/code&gt; is &lt;code&gt;&quot;visible&quot;&lt;/code&gt; and only visible parts of the uibuttongroup or its children may react to mouse clicks. When &lt;code&gt;pickableparts&lt;/code&gt; is &lt;code&gt;&quot;all&quot;&lt;/code&gt; both visible and invisible parts (or children) may react to mouse clicks. When &lt;code&gt;pickableparts&lt;/code&gt; is &lt;code&gt;&quot;none&quot;&lt;/code&gt; mouse clicks on the object are ignored and transmitted to any objects underneath this one. When an object is configured to accept mouse clicks the &lt;code&gt;&quot;hittest&quot;&lt;/code&gt; property will determine how they are processed. See &lt;a href=&quot;#XREFuibuttongrouphittest&quot;&gt;hittest property&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da5375cf6c74d58675abd6eebe7a831a3f338d3b" translate="yes" xml:space="preserve">
          <source>Specify whether uicontextmenu processes mouse events or passes them to ancestors of the object. When enabled, the object may respond to mouse clicks by evaluating the &lt;code&gt;&quot;buttondownfcn&quot;&lt;/code&gt;, showing the uicontextmenu, and eventually becoming the root &lt;code&gt;&quot;currentobject&quot;&lt;/code&gt;. This property is only relevant when the object can accept mouse clicks which is determined by the &lt;code&gt;&quot;pickableparts&quot;&lt;/code&gt; property. See &lt;a href=&quot;#XREFuicontextmenupickableparts&quot;&gt;pickableparts property&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79d89ffc70cfe20cba45363a00d0cbb7444c6ab1" translate="yes" xml:space="preserve">
          <source>Specify whether uicontextmenu will accept mouse clicks. By default, &lt;code&gt;pickableparts&lt;/code&gt; is &lt;code&gt;&quot;visible&quot;&lt;/code&gt; and only visible parts of the uicontextmenu or its children may react to mouse clicks. When &lt;code&gt;pickableparts&lt;/code&gt; is &lt;code&gt;&quot;all&quot;&lt;/code&gt; both visible and invisible parts (or children) may react to mouse clicks. When &lt;code&gt;pickableparts&lt;/code&gt; is &lt;code&gt;&quot;none&quot;&lt;/code&gt; mouse clicks on the object are ignored and transmitted to any objects underneath this one. When an object is configured to accept mouse clicks the &lt;code&gt;&quot;hittest&quot;&lt;/code&gt; property will determine how they are processed. See &lt;a href=&quot;#XREFuicontextmenuhittest&quot;&gt;hittest property&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c824fa1a0b91806a4890616e6f03838d5d62804b" translate="yes" xml:space="preserve">
          <source>Specify whether uicontrol processes mouse events or passes them to ancestors of the object. When enabled, the object may respond to mouse clicks by evaluating the &lt;code&gt;&quot;buttondownfcn&quot;&lt;/code&gt;, showing the uicontextmenu, and eventually becoming the root &lt;code&gt;&quot;currentobject&quot;&lt;/code&gt;. This property is only relevant when the object can accept mouse clicks which is determined by the &lt;code&gt;&quot;pickableparts&quot;&lt;/code&gt; property. See &lt;a href=&quot;#XREFuicontrolpickableparts&quot;&gt;pickableparts property&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75b16b54bd2e92fa2c9faa308c8db1728fa3a67d" translate="yes" xml:space="preserve">
          <source>Specify whether uicontrol will accept mouse clicks. By default, &lt;code&gt;pickableparts&lt;/code&gt; is &lt;code&gt;&quot;visible&quot;&lt;/code&gt; and only visible parts of the uicontrol or its children may react to mouse clicks. When &lt;code&gt;pickableparts&lt;/code&gt; is &lt;code&gt;&quot;all&quot;&lt;/code&gt; both visible and invisible parts (or children) may react to mouse clicks. When &lt;code&gt;pickableparts&lt;/code&gt; is &lt;code&gt;&quot;none&quot;&lt;/code&gt; mouse clicks on the object are ignored and transmitted to any objects underneath this one. When an object is configured to accept mouse clicks the &lt;code&gt;&quot;hittest&quot;&lt;/code&gt; property will determine how they are processed. See &lt;a href=&quot;#XREFuicontrolhittest&quot;&gt;hittest property&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="702e7dec0321866145ff8e40a792d63115038d0e" translate="yes" xml:space="preserve">
          <source>Specify whether uimenu processes mouse events or passes them to ancestors of the object. When enabled, the object may respond to mouse clicks by evaluating the &lt;code&gt;&quot;buttondownfcn&quot;&lt;/code&gt;, showing the uicontextmenu, and eventually becoming the root &lt;code&gt;&quot;currentobject&quot;&lt;/code&gt;. This property is only relevant when the object can accept mouse clicks which is determined by the &lt;code&gt;&quot;pickableparts&quot;&lt;/code&gt; property. See &lt;a href=&quot;#XREFuimenupickableparts&quot;&gt;pickableparts property&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="818ce91eee2156a8cface64d69c57107aacdf8ab" translate="yes" xml:space="preserve">
          <source>Specify whether uimenu will accept mouse clicks. By default, &lt;code&gt;pickableparts&lt;/code&gt; is &lt;code&gt;&quot;visible&quot;&lt;/code&gt; and only visible parts of the uimenu or its children may react to mouse clicks. When &lt;code&gt;pickableparts&lt;/code&gt; is &lt;code&gt;&quot;all&quot;&lt;/code&gt; both visible and invisible parts (or children) may react to mouse clicks. When &lt;code&gt;pickableparts&lt;/code&gt; is &lt;code&gt;&quot;none&quot;&lt;/code&gt; mouse clicks on the object are ignored and transmitted to any objects underneath this one. When an object is configured to accept mouse clicks the &lt;code&gt;&quot;hittest&quot;&lt;/code&gt; property will determine how they are processed. See &lt;a href=&quot;#XREFuimenuhittest&quot;&gt;hittest property&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="faee55a345badb6ae77cea44076cf487607aef85" translate="yes" xml:space="preserve">
          <source>Specify whether uipanel processes mouse events or passes them to ancestors of the object. When enabled, the object may respond to mouse clicks by evaluating the &lt;code&gt;&quot;buttondownfcn&quot;&lt;/code&gt;, showing the uicontextmenu, and eventually becoming the root &lt;code&gt;&quot;currentobject&quot;&lt;/code&gt;. This property is only relevant when the object can accept mouse clicks which is determined by the &lt;code&gt;&quot;pickableparts&quot;&lt;/code&gt; property. See &lt;a href=&quot;#XREFuipanelpickableparts&quot;&gt;pickableparts property&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f83435f42cabdb14a4fe8915b449da50cf5396fb" translate="yes" xml:space="preserve">
          <source>Specify whether uipanel will accept mouse clicks. By default, &lt;code&gt;pickableparts&lt;/code&gt; is &lt;code&gt;&quot;visible&quot;&lt;/code&gt; and only visible parts of the uipanel or its children may react to mouse clicks. When &lt;code&gt;pickableparts&lt;/code&gt; is &lt;code&gt;&quot;all&quot;&lt;/code&gt; both visible and invisible parts (or children) may react to mouse clicks. When &lt;code&gt;pickableparts&lt;/code&gt; is &lt;code&gt;&quot;none&quot;&lt;/code&gt; mouse clicks on the object are ignored and transmitted to any objects underneath this one. When an object is configured to accept mouse clicks the &lt;code&gt;&quot;hittest&quot;&lt;/code&gt; property will determine how they are processed. See &lt;a href=&quot;#XREFuipanelhittest&quot;&gt;hittest property&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0b7a5a98c25cfad591c5c36cbd75b1cb58edb28" translate="yes" xml:space="preserve">
          <source>Specify whether uipushtool processes mouse events or passes them to ancestors of the object. When enabled, the object may respond to mouse clicks by evaluating the &lt;code&gt;&quot;buttondownfcn&quot;&lt;/code&gt;, showing the uicontextmenu, and eventually becoming the root &lt;code&gt;&quot;currentobject&quot;&lt;/code&gt;. This property is only relevant when the object can accept mouse clicks which is determined by the &lt;code&gt;&quot;pickableparts&quot;&lt;/code&gt; property. See &lt;a href=&quot;#XREFuipushtoolpickableparts&quot;&gt;pickableparts property&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67c8e58d94b0ea4869196f7700febf28af49ea6d" translate="yes" xml:space="preserve">
          <source>Specify whether uipushtool will accept mouse clicks. By default, &lt;code&gt;pickableparts&lt;/code&gt; is &lt;code&gt;&quot;visible&quot;&lt;/code&gt; and only visible parts of the uipushtool or its children may react to mouse clicks. When &lt;code&gt;pickableparts&lt;/code&gt; is &lt;code&gt;&quot;all&quot;&lt;/code&gt; both visible and invisible parts (or children) may react to mouse clicks. When &lt;code&gt;pickableparts&lt;/code&gt; is &lt;code&gt;&quot;none&quot;&lt;/code&gt; mouse clicks on the object are ignored and transmitted to any objects underneath this one. When an object is configured to accept mouse clicks the &lt;code&gt;&quot;hittest&quot;&lt;/code&gt; property will determine how they are processed. See &lt;a href=&quot;#XREFuipushtoolhittest&quot;&gt;hittest property&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21a61fde01fdc569a648814dc96315094e346082" translate="yes" xml:space="preserve">
          <source>Specify whether uitable processes mouse events or passes them to ancestors of the object. When enabled, the object may respond to mouse clicks by evaluating the &lt;code&gt;&quot;buttondownfcn&quot;&lt;/code&gt;, showing the uicontextmenu, and eventually becoming the root &lt;code&gt;&quot;currentobject&quot;&lt;/code&gt;. This property is only relevant when the object can accept mouse clicks which is determined by the &lt;code&gt;&quot;pickableparts&quot;&lt;/code&gt; property. See &lt;a href=&quot;#XREFuitablepickableparts&quot;&gt;pickableparts property&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb77cbf3899ebecc18e410172111245588c4d4e0" translate="yes" xml:space="preserve">
          <source>Specify whether uitable will accept mouse clicks. By default, &lt;code&gt;pickableparts&lt;/code&gt; is &lt;code&gt;&quot;visible&quot;&lt;/code&gt; and only visible parts of the uitable or its children may react to mouse clicks. When &lt;code&gt;pickableparts&lt;/code&gt; is &lt;code&gt;&quot;all&quot;&lt;/code&gt; both visible and invisible parts (or children) may react to mouse clicks. When &lt;code&gt;pickableparts&lt;/code&gt; is &lt;code&gt;&quot;none&quot;&lt;/code&gt; mouse clicks on the object are ignored and transmitted to any objects underneath this one. When an object is configured to accept mouse clicks the &lt;code&gt;&quot;hittest&quot;&lt;/code&gt; property will determine how they are processed. See &lt;a href=&quot;#XREFuitablehittest&quot;&gt;hittest property&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f59ca0e8011760a2cdda83da4e003f2956bf047f" translate="yes" xml:space="preserve">
          <source>Specify whether uitoggletool processes mouse events or passes them to ancestors of the object. When enabled, the object may respond to mouse clicks by evaluating the &lt;code&gt;&quot;buttondownfcn&quot;&lt;/code&gt;, showing the uicontextmenu, and eventually becoming the root &lt;code&gt;&quot;currentobject&quot;&lt;/code&gt;. This property is only relevant when the object can accept mouse clicks which is determined by the &lt;code&gt;&quot;pickableparts&quot;&lt;/code&gt; property. See &lt;a href=&quot;#XREFuitoggletoolpickableparts&quot;&gt;pickableparts property&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4467d5cf88880214ccc9ad2378383c0257c692e" translate="yes" xml:space="preserve">
          <source>Specify whether uitoggletool will accept mouse clicks. By default, &lt;code&gt;pickableparts&lt;/code&gt; is &lt;code&gt;&quot;visible&quot;&lt;/code&gt; and only visible parts of the uitoggletool or its children may react to mouse clicks. When &lt;code&gt;pickableparts&lt;/code&gt; is &lt;code&gt;&quot;all&quot;&lt;/code&gt; both visible and invisible parts (or children) may react to mouse clicks. When &lt;code&gt;pickableparts&lt;/code&gt; is &lt;code&gt;&quot;none&quot;&lt;/code&gt; mouse clicks on the object are ignored and transmitted to any objects underneath this one. When an object is configured to accept mouse clicks the &lt;code&gt;&quot;hittest&quot;&lt;/code&gt; property will determine how they are processed. See &lt;a href=&quot;#XREFuitoggletoolhittest&quot;&gt;hittest property&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07d7e39a7e926d99e3793bc5442ecad42a09179e" translate="yes" xml:space="preserve">
          <source>Specify whether uitoolbar processes mouse events or passes them to ancestors of the object. When enabled, the object may respond to mouse clicks by evaluating the &lt;code&gt;&quot;buttondownfcn&quot;&lt;/code&gt;, showing the uicontextmenu, and eventually becoming the root &lt;code&gt;&quot;currentobject&quot;&lt;/code&gt;. This property is only relevant when the object can accept mouse clicks which is determined by the &lt;code&gt;&quot;pickableparts&quot;&lt;/code&gt; property. See &lt;a href=&quot;#XREFuitoolbarpickableparts&quot;&gt;pickableparts property&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5976997d25887c154373b515fe2c2e364925698c" translate="yes" xml:space="preserve">
          <source>Specify whether uitoolbar will accept mouse clicks. By default, &lt;code&gt;pickableparts&lt;/code&gt; is &lt;code&gt;&quot;visible&quot;&lt;/code&gt; and only visible parts of the uitoolbar or its children may react to mouse clicks. When &lt;code&gt;pickableparts&lt;/code&gt; is &lt;code&gt;&quot;all&quot;&lt;/code&gt; both visible and invisible parts (or children) may react to mouse clicks. When &lt;code&gt;pickableparts&lt;/code&gt; is &lt;code&gt;&quot;none&quot;&lt;/code&gt; mouse clicks on the object are ignored and transmitted to any objects underneath this one. When an object is configured to accept mouse clicks the &lt;code&gt;&quot;hittest&quot;&lt;/code&gt; property will determine how they are processed. See &lt;a href=&quot;#XREFuitoolbarhittest&quot;&gt;hittest property&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="408c67cb2b2817254e23b2c5326154a60ad9441b" translate="yes" xml:space="preserve">
          <source>Specify which of &lt;code&gt;&quot;position&quot;&lt;/code&gt; or &lt;code&gt;&quot;outerposition&quot;&lt;/code&gt; properties takes precedence when axes annotations extent changes. See &lt;a href=&quot;#XREFaxesposition&quot;&gt;position property&lt;/a&gt;, and &lt;a href=&quot;#XREFaxesposition&quot;&gt;outerposition property&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29e84500b9677f1b58f84c3d2bd325bc1e225c68" translate="yes" xml:space="preserve">
          <source>Specifying a depth &lt;var&gt;d&lt;/var&gt; of 0 limits the search to the set of objects passed in &lt;var&gt;hlist&lt;/var&gt;. A depth of 0 is also equivalent to the &lt;code&gt;&quot;flat&quot;&lt;/code&gt; argument. The default depth value is &lt;code&gt;Inf&lt;/code&gt; which includes all descendants.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="906ab03452c408fb4fc7ef3ed5deccedd0fde2bd" translate="yes" xml:space="preserve">
          <source>Specifying a larger number for the first command than the last command reverses the list of commands before executing them. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e672777c7f4bb13b17b2c881800b8df4ffb46137" translate="yes" xml:space="preserve">
          <source>Specifying a new &amp;ldquo;up vector&amp;rdquo; rolls the camera and sets the mode to manual:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9426498d4e0cc9e4bd9ce403691ff75d70dc39e7" translate="yes" xml:space="preserve">
          <source>Split the string &lt;var&gt;s&lt;/var&gt; using one or more separators &lt;var&gt;sep&lt;/var&gt; and return a cell array of strings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aacf8dcdf8984ae90ed7be805dd8658f68541785" translate="yes" xml:space="preserve">
          <source>Split the string &lt;var&gt;str&lt;/var&gt; using the delimiters specified by &lt;var&gt;del&lt;/var&gt; and return a cell string array of substrings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ca14e582326103f5247e523624019df9982af4a" translate="yes" xml:space="preserve">
          <source>Spreadsheet files (depending on external software)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28d0587724b5664c8a319e166d585dfc509a22b1" translate="yes" xml:space="preserve">
          <source>Stack Limitation Note: Pattern searches are done with a recursive function which can overflow the program stack when there are a high number of matches. For example,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25d659f671afb763ffa401eecc56e85d545ae3fe" translate="yes" xml:space="preserve">
          <source>Stair Group</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53808b400aadab09e3c8c69f427e0c05a1de3d33" translate="yes" xml:space="preserve">
          <source>Stair series objects are created by the &lt;code&gt;stair&lt;/code&gt; function. Each &lt;code&gt;hggroup&lt;/code&gt; element of the series contains a single line object as a child representing the stair. The properties of the stair series are</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1537967b0cf1b6feca1b03ac19e597cb8ba7c89" translate="yes" xml:space="preserve">
          <source>Standalone Programs</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f98eae47e152fc5aca2099fcd02dbe0ce5773f42" translate="yes" xml:space="preserve">
          <source>Standard (&quot;textbook&quot;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a76202e4ee05ac61c0cfaf241cc522085fda430" translate="yes" xml:space="preserve">
          <source>Standard Normal Distribution</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="acf4f3a74e8df64e92c6e01109d6dbace3db5345" translate="yes" xml:space="preserve">
          <source>Start a process and create a pipe.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="575989893b09dde5bf3d6e568d9b8e8f145e6d74" translate="yes" xml:space="preserve">
          <source>Start a subprocess with two-way communication.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84cb9ff2621236c66d7b05d59eacb97a32970711" translate="yes" xml:space="preserve">
          <source>Start recording a session in a file called</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8138d76b94baaf1aaf7f570e85fa025f806572e5" translate="yes" xml:space="preserve">
          <source>Start the graphical user interface (GUI).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c892c01e3677396a101ed6883beca2974c4bb0a7" translate="yes" xml:space="preserve">
          <source>Start the profiler, clearing all previously collected data if there is any.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99b605da658b65d10cfcadb73da8e8e994cc67f7" translate="yes" xml:space="preserve">
          <source>Startup Files</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5653cebc057d4791ce07031ad9286e729de6d691" translate="yes" xml:space="preserve">
          <source>Statements</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5aaa01fb91e90665c840ddb58a847053964f3ce8" translate="yes" xml:space="preserve">
          <source>Statements may be a simple constant expression or a complicated list of nested loops and conditional statements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8302bce1e6a19b51484c03d14ddceac9d8d33dc0" translate="yes" xml:space="preserve">
          <source>Statistical functions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2086b21f8f49274138c38d476bee317a84a8aecc" translate="yes" xml:space="preserve">
          <source>Statistics</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cde5acc4f12778421d98943cb24db1b4e1280c99" translate="yes" xml:space="preserve">
          <source>Statistics on Sliding Windows of Data</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b9f8a58c7ae51e5494c611a446aeb25b41f4b58" translate="yes" xml:space="preserve">
          <source>Status of Variables</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93ba43513fa2a804aa1f44d637ae3f49f6db7f5c" translate="yes" xml:space="preserve">
          <source>Status of the optimization.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0fc3ab2e41c5a210473d13780129382f4d2710b" translate="yes" xml:space="preserve">
          <source>Steepest edge pricing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d172a62125010b1320157a6d90787d32ecc3a36" translate="yes" xml:space="preserve">
          <source>Stem Series</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5a01e2343f9fd9893e321038b24ffb8e69b028b" translate="yes" xml:space="preserve">
          <source>Stem Series Properties</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="635e0220f88acfda40e2892072799bfa17a3649a" translate="yes" xml:space="preserve">
          <source>Stem series objects are created by the &lt;code&gt;stem&lt;/code&gt; or &lt;code&gt;stem3&lt;/code&gt; functions. Each &lt;code&gt;hggroup&lt;/code&gt; element contains a single line object as a child representing the stems. The properties of the stem series are</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee69b23205de632d04716c5c601f32de8f2e429a" translate="yes" xml:space="preserve">
          <source>Stems are drawn from the height &lt;var&gt;z&lt;/var&gt; to the location in the x-y plane determined by &lt;var&gt;x&lt;/var&gt; and &lt;var&gt;y&lt;/var&gt;. The default color is &lt;code&gt;&quot;b&quot;&lt;/code&gt; (blue), the default line style is &lt;code&gt;&quot;-&quot;&lt;/code&gt;, and the default marker is &lt;code&gt;&quot;o&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f38e88c4023f1016eff84ed21613396db92938ce" translate="yes" xml:space="preserve">
          <source>Stop m-file execution and enter debug mode.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6dc31e50315112d5d8d11d64a1fb76c83432cd17" translate="yes" xml:space="preserve">
          <source>Stop profiling. The collected data can later be retrieved and examined with &lt;code&gt;T = profile (&quot;info&quot;)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4d89cd7dc6eac0458664c6e6a1b4b0b3b8495da" translate="yes" xml:space="preserve">
          <source>Stop recording the session in the diary file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c31fd9c9a206912a88ce24e9477bf090d7c9fd03" translate="yes" xml:space="preserve">
          <source>Stop the audiorecorder object &lt;var&gt;recorder&lt;/var&gt; and clean up any audio streams.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="485a306306a176a161c7cd90229a7fe1b5069087" translate="yes" xml:space="preserve">
          <source>Stop the playback for the audioplayer &lt;var&gt;player&lt;/var&gt; and reset the relevant variables to their starting values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="780786fed22a0b818643e258873a32c71925d690" translate="yes" xml:space="preserve">
          <source>Stop when a warning is reported. This is equivalent to specifying &lt;code&gt;debug_on_warning (true)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75ffc80cc73eae38f28b342db52f995f1021b227" translate="yes" xml:space="preserve">
          <source>Stop when an error is caught by a try-catch block (not yet implemented).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52a19cdd77ea1f54ae8b20d8f3ab8db825268a29" translate="yes" xml:space="preserve">
          <source>Stop when an error is reported. This is equivalent to specifying both &lt;code&gt;debug_on_error (true)&lt;/code&gt; and &lt;code&gt;debug_on_interrupt (true)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fdeaab323b0a2915aff912c480711a4e33741f79" translate="yes" xml:space="preserve">
          <source>Stop when an interrupt (</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fdd40a2050deeb8718584cb8c1d9528f9fd9d923" translate="yes" xml:space="preserve">
          <source>Stop when code returns a non-finite value (not yet implemented).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ddfde9aff292fb2e632c5dfc227aedd0ea32fb7" translate="yes" xml:space="preserve">
          <source>Stopped by &lt;code&gt;OutputFcn&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="027d3a1887f64c27ef6d22aa5c0d609d6992e29c" translate="yes" xml:space="preserve">
          <source>Storage of Sparse Matrices</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b9266240380edc919102acd3f6e9b8478243718" translate="yes" xml:space="preserve">
          <source>Store numbers in double-precision format.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ccc088492261ad340f627dbdff087c0aef9ba382" translate="yes" xml:space="preserve">
          <source>Storing a function in a file&amp;mdash;called a function file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8da621681e54d104ed61de05301a99cbdde0434" translate="yes" xml:space="preserve">
          <source>Storing a group of commands in a file &amp;mdash; called a script file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac12bcae9c914f7a30d699b16b8f1390539c9709" translate="yes" xml:space="preserve">
          <source>Strength of the ambient light. Value between 0.0 and 1.0</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="271bb864dd88df34d195cc190b33b703b228cc21" translate="yes" xml:space="preserve">
          <source>Strength of the diffuse reflex. Value between 0.0 (no diffuse reflex) and 1.0 (full diffuse reflex).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d764cd3de2e3500029af41c1c5ceda14e18270d" translate="yes" xml:space="preserve">
          <source>Strength of the specular reflex. Value between 0.0 (no specular reflex) and 1.0 (full specular reflex).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3df63b7acb0522da685dad5fe84b81fdd7b25264" translate="yes" xml:space="preserve">
          <source>String</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="396b00d6c7e8c1194e27297cd11ae3108cdacd84" translate="yes" xml:space="preserve">
          <source>String Conversions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="567f869fd84394714484d3f1f426d5c87d5f31ee" translate="yes" xml:space="preserve">
          <source>String Input Conversions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89cbb485747d960347cbfbda8168ab3117f6eabe" translate="yes" xml:space="preserve">
          <source>String Objects</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fda09e641f52cfaeb4abd8b344c8bb2a361e4108" translate="yes" xml:space="preserve">
          <source>String comparisons may also be performed with the &lt;code&gt;strcmp&lt;/code&gt; function, not with the comparison operators listed above. See &lt;a href=&quot;strings#Strings&quot;&gt;Strings&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df554899a61bae432303d9e377275bc8638bf095" translate="yes" xml:space="preserve">
          <source>String to use for the caption of the dialog. The default is &lt;code&gt;&quot;Input Dialog&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3816c4beac471c733eed1d91c213f8c2b6a29262" translate="yes" xml:space="preserve">
          <source>Strings</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e47e796128c185e94446a2360ec18368b1af2311" translate="yes" xml:space="preserve">
          <source>Strings can be concatenated using matrix notation (see &lt;a href=&quot;strings#Strings&quot;&gt;Strings&lt;/a&gt;, &lt;a href=&quot;character-arrays#Character-Arrays&quot;&gt;Character Arrays&lt;/a&gt;) which is often the most natural method. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6290a61a26ba509e05efc209b54797b15064ad89" translate="yes" xml:space="preserve">
          <source>Strings can be concatenated using the notation for defining matrices. For example, the expression</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b8f8175de11a05f912721903abc0b87f5479475" translate="yes" xml:space="preserve">
          <source>Strip the output file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1813f3a409e2eddaf339e9ce8b5e649495e86f27" translate="yes" xml:space="preserve">
          <source>Structure Arrays</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a87257330064acd32ad3386ad6f58d262332c4b1" translate="yes" xml:space="preserve">
          <source>Structure arrays can equally be used to create comma separated lists. This is done by addressing one of the fields of a structure array. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f967a0a9ea62ef4ed16c4ed98c85491a839cc52" translate="yes" xml:space="preserve">
          <source>Structure containing run-time information about the algorithm. The following fields are defined:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c64b6d8ab6a3167af6b211df05198e555a8951eb" translate="yes" xml:space="preserve">
          <source>Structures</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a09204c67a9734764504f9e0f6b9750f24b36406" translate="yes" xml:space="preserve">
          <source>Structures are a relatively complex data container and there are more functions available in</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="439ce3ada9fa30f9039504c14e5aa6d6691a5273" translate="yes" xml:space="preserve">
          <source>Structures in Oct-Files</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24f79f60f64d8de0f9e5fe542b497f1c56a1b1e4" translate="yes" xml:space="preserve">
          <source>Structures may be copied just like any other variable:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79216d18359ec3e584e1975e2c0ddef78c22b1c6" translate="yes" xml:space="preserve">
          <source>Structures with Mex-Files</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9bbf7345b9bfe858095adfc3791865761f4d2b4" translate="yes" xml:space="preserve">
          <source>Style of the outline. See &lt;a href=&quot;line-styles#Line-Styles&quot;&gt;Line Styles&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2b44907383eb40a4a8f5558da3e9824fdc448b4" translate="yes" xml:space="preserve">
          <source>Subfunction A subfunction with the required function name in the given scope.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b9c9d32f600c6330fa4f3958a3bbfc0205c11b6" translate="yes" xml:space="preserve">
          <source>Subfunctions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22af76f66f8e7003f422a986213cf141184adb6f" translate="yes" xml:space="preserve">
          <source>Subfunctions in function files.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10aee7ce55876228ad27a97a2afa3d3b0a1209da" translate="yes" xml:space="preserve">
          <source>Submit bug reports for Octave to the Octave bug tracker &lt;a href=&quot;https://bugs.octave.org&quot;&gt;https://bugs.octave.org&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f92885961e64c9c381851c1d548d845ee139f0b" translate="yes" xml:space="preserve">
          <source>Subscripted assignment</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="727064b91f59028a7e29271ff868a957fe47a440" translate="yes" xml:space="preserve">
          <source>Subscripted reference</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dfbd8ebb2f1dd481735eb01d81a6486e2d3b0c02" translate="yes" xml:space="preserve">
          <source>Subsequent sections show how to use specific classes from Octave&amp;rsquo;s core internals. Base classes like &lt;code&gt;dMatrix&lt;/code&gt; (a matrix of double values) are found in the directory</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dbeb73dcf6843a6d69cdebac178b3ef91474b79a" translate="yes" xml:space="preserve">
          <source>Subtract &lt;var&gt;x&lt;/var&gt; from &lt;var&gt;y&lt;/var&gt;, then add any remaining arguments to the result.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d8260158d00a6e0a6443a8a367a76c3a115fec3" translate="yes" xml:space="preserve">
          <source>Subtraction. If both operands are matrices, the number of rows and columns of both must agree, or they must be broadcastable to the same shape.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="baccfcbb445eff27f5b2a785a19124f1e917c57e" translate="yes" xml:space="preserve">
          <source>Such lines should be added before the &lt;code&gt;function&lt;/code&gt; keyword. In C++ files a &lt;code&gt;PKG_ADD&lt;/code&gt; directive looks like this</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09569110ce2e37ff3afa763d1337b1f872bc3d3c" translate="yes" xml:space="preserve">
          <source>Suggestions on how to compile ATLAS would be most welcome.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb7edf756f7f38bc26b7f5cab50b5319fffb5945" translate="yes" xml:space="preserve">
          <source>SuiteSparse</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b89d0e3c375bf0949f941ec5145e7a9703b4dff" translate="yes" xml:space="preserve">
          <source>SuiteSparse (&lt;a href=&quot;http://faculty.cse.tamu.edu/davis/suitesparse.html&quot;&gt;http://faculty.cse.tamu.edu/davis/suitesparse.html&lt;/a&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4185ba94e4a285cd65263c5c7c1e7a222d1899ed" translate="yes" xml:space="preserve">
          <source>Sum of elements along dimension &lt;var&gt;dim&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2d35891ca20f4e89bc1efda8dbe01d64bf18ee9" translate="yes" xml:space="preserve">
          <source>Sum of squares of elements along dimension &lt;var&gt;dim&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa8d10d925f729ebc6ba562bd4a727ccbd3ecb4a" translate="yes" xml:space="preserve">
          <source>Sums and Products</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48c98cab7866e606328c99289ed24e339393b5ab" translate="yes" xml:space="preserve">
          <source>Sun</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc5dd045b8623ddfc4bd0bce98ca5fda42accf88" translate="yes" xml:space="preserve">
          <source>Sunday</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9476dde8b65f8e1fd8cde05bd3282695372a8cc6" translate="yes" xml:space="preserve">
          <source>Support for N-dimensional images is given when each image projection, matrix sizes of MxN and MxNx3 for RGB images, is concatenated along the fourth dimension. In such cases, the returned value is a struct array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9b163c8cc620a88f6e3cfd3c37da05f035667c2" translate="yes" xml:space="preserve">
          <source>Support for N-dimensional images or movies is given when &lt;var&gt;frame&lt;/var&gt; is a struct array. In such cases, &lt;var&gt;x&lt;/var&gt; will be a MxNx1xK or MxNx3xK for indexed and RGB movies respectively, with each frame concatenated along the 4th dimension.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b86b9447b4bd4558f09f09b7a93df908b3d2e5a2" translate="yes" xml:space="preserve">
          <source>Supported &lt;var&gt;name&lt;/var&gt;/&lt;var&gt;value&lt;/var&gt; pair arguments are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="828a85a4805809127740353d34eed7731b3cfafb" translate="yes" xml:space="preserve">
          <source>Surface Group</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="025242c4f9c869d66ea7d48c42014abbc8ae33c5" translate="yes" xml:space="preserve">
          <source>Surface Properties</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="124ab4376fabdce2f0a18bd90a3e5be1028a03f0" translate="yes" xml:space="preserve">
          <source>Surface group objects are created by the &lt;code&gt;surf&lt;/code&gt; or &lt;code&gt;mesh&lt;/code&gt; functions, but are equally one of the handles returned by the &lt;code&gt;surfc&lt;/code&gt; or &lt;code&gt;meshc&lt;/code&gt; functions. The surface group is of the type &lt;code&gt;surface&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94f0ddeaae7706191d7f850c1cc43941d9055173" translate="yes" xml:space="preserve">
          <source>Suspend program execution until the figure with handle &lt;var&gt;h&lt;/var&gt; is deleted or &lt;code&gt;uiresume&lt;/code&gt; is called.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2522072d1cc0ff8a15ac989ada10f9bd8d030900" translate="yes" xml:space="preserve">
          <source>Suspend the execution of the current program until a condition is satisfied on the graphics handle &lt;var&gt;h&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="487d40189bed13303f33f951d1456d25e543c725" translate="yes" xml:space="preserve">
          <source>Suspend the execution of the program or change the state of the pause function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="349d94a70d6186b94d9d2e580a4582771984546b" translate="yes" xml:space="preserve">
          <source>Swap the byte order on values, converting from little endian to big endian and vice versa.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29efef6c85fb7339613040fcc6dcd2380f9ee01b" translate="yes" xml:space="preserve">
          <source>Swing components for lightweight GUIs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1bea6af8503d5cd7c7451820bc6fd54ddcd370cc" translate="yes" xml:space="preserve">
          <source>Swing factor in the Newton iteration convergence test. The test is applied to the residual vector, premultiplied by the approximate Jacobian. For convergence, the weighted RMS norm of this vector (scaled by the error weights) must be less than &lt;code&gt;EPINIT*EPCON&lt;/code&gt;, where &lt;code&gt;EPCON&lt;/code&gt; = 0.33 is the analogous test constant used in the time steps. The default is &lt;code&gt;EPINIT&lt;/code&gt; = 0.01.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f84ef531f9db996694ad09a8fdddbca1440577e" translate="yes" xml:space="preserve">
          <source>Symbol</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5131fe5695bc3ce3887d236a54747934336afaf8" translate="yes" xml:space="preserve">
          <source>System Information</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e22b956d1059038fd7374f974ccdeba45fd84c43" translate="yes" xml:space="preserve">
          <source>System Utilities</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7dbd1290865d5eb7c87e6beeb057644d2ee6e666" translate="yes" xml:space="preserve">
          <source>Systems of linear equations are ubiquitous in numerical analysis. To solve the set of linear equations &lt;code&gt;A&lt;var&gt;x&lt;/var&gt; = b&lt;/code&gt;, use the left division operator, &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2c53d66948214258a26ca9ca845d7ac0c17f8e7" translate="yes" xml:space="preserve">
          <source>T</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61d04f05b243034bb8a087c858b0c174c57a2387" translate="yes" xml:space="preserve">
          <source>T = camtarget ()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d977daa70de0acb6efe9dfce488dff75de3a87f2" translate="yes" xml:space="preserve">
          <source>T = delaunayn (pts)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c362a86f625a16d8be0676575876fadb366152d6" translate="yes" xml:space="preserve">
          <source>T = delaunayn (pts, options)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f5bb0c10a35e6360070bc301b19b5d1db493acf" translate="yes" xml:space="preserve">
          <source>T = profile (&quot;info&quot;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38d4aa698a701e2288a153e115d12aab45de5940" translate="yes" xml:space="preserve">
          <source>TAB</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8a3bf50ae3d2795d7fbc0051db435fadd91786f" translate="yes" xml:space="preserve">
          <source>TIFF Image, compressed</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ab9631450ba8d7284afc0b99944e17a2938d80c" translate="yes" xml:space="preserve">
          <source>TIFF image with LZW compression (tif, tiff) or uncompressed (tiffn).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70d0ea2bc55293b4dbebd9c283545828c0607b05" translate="yes" xml:space="preserve">
          <source>TM</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1cc2d0853890bcd6fe6b71e8d5ea9bae978bf66" translate="yes" xml:space="preserve">
          <source>TRANSA</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="018131b6dde092d4b00469dfe3b30d6fbcf15701" translate="yes" xml:space="preserve">
          <source>TYPE=&amp;gt;TYPE</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d06b6bd0c99e503334e58619eefd6723bec273bb" translate="yes" xml:space="preserve">
          <source>Tab character.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="821d8f5e40785b7235390c00808ca02df2ab0c73" translate="yes" xml:space="preserve">
          <source>Table of Input Conversions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="104e1f1a4ad90d706755d8c7d42df9d939314ee3" translate="yes" xml:space="preserve">
          <source>Table of Output Conversions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b431dad8b152c1737df7e5a412b313017091bb2a" translate="yes" xml:space="preserve">
          <source>Table of return values based on &lt;var&gt;format&lt;/var&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc3abe0c28109e7f53762ac878e1e4dab437531a" translate="yes" xml:space="preserve">
          <source>Takes one argument, &lt;var&gt;prompt&lt;/var&gt;, which is the string to display when asking the question. &lt;var&gt;prompt&lt;/var&gt; should end in a space; &lt;code&gt;yes-or-no&lt;/code&gt; adds the string &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c95f4794ccbd74a9725fcef2d4c3e72327581802" translate="yes" xml:space="preserve">
          <source>Technically speaking, zooming affects the &amp;ldquo;viewing angle&amp;rdquo;. The following command resets to the default zoom:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4277b4841d1f66073f37f33992027b193be527ea" translate="yes" xml:space="preserve">
          <source>Techniques Used for Linear Algebra</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aca013a4c7ad13553b2bdfa5ba17332f6149c248" translate="yes" xml:space="preserve">
          <source>Templates for the solution of linear systems: Building blocks for iterative methods</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0779c3234a0ebcf8bf12d2826604e1913cf9d8b0" translate="yes" xml:space="preserve">
          <source>Temporary Files</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e518d15cadbf25f6701100c9e664ae69e7991eac" translate="yes" xml:space="preserve">
          <source>Terminal Input</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11bcad1f9e713086d9e16b8089d00a33ed64d247" translate="yes" xml:space="preserve">
          <source>Terminal Output</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6af3bfa79e5288c1771140b90ad91842e75f797" translate="yes" xml:space="preserve">
          <source>Termination criterion for the function input. If the difference in &lt;var&gt;x&lt;/var&gt;, the current search point, between one algorithm iteration and the next is less than &lt;code&gt;TolX&lt;/code&gt; the optimization stops. Must be a positive scalar.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a67b26d2c8fc4556266288ee86cf9cb007d3fdf" translate="yes" xml:space="preserve">
          <source>Termination criterion for the function output. If the difference in the calculated objective function between one algorithm iteration and the next is less than &lt;code&gt;TolFun&lt;/code&gt; the optimization stops. Must be a positive scalar.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d493555d61b4b56a70024663150cd50b364e1d6" translate="yes" xml:space="preserve">
          <source>Test Functions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6b783c8ea10bc9e63c0d1f68a026b74c6f7f999" translate="yes" xml:space="preserve">
          <source>Test Plotting Functions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09d3d291900f73251c1e4959bc36f02fbff03b99" translate="yes" xml:space="preserve">
          <source>Test and Demo Functions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21c78b3d9fb58110b2e0b33120f32941c7f32e1e" translate="yes" xml:space="preserve">
          <source>Test blocks in any C++ source files (</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="054ff3e222dbb27da5c2db5e1b41b0cf3d72893d" translate="yes" xml:space="preserve">
          <source>Test character string properties.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f45b4f0fb4f2822335c780c335891ff82850deb9" translate="yes" xml:space="preserve">
          <source>Texinfo</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="365e9cddf5e8d6d2e87f22d4c069986e3b87f74e" translate="yes" xml:space="preserve">
          <source>Text Formatting</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cab6f246e70a36aae141ac1b47f69051720f2342" translate="yes" xml:space="preserve">
          <source>Text Properties</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b21225c82db729df6f3edd69c87b37f73e99f0a" translate="yes" xml:space="preserve">
          <source>Text annotations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="703950ee147cc1bd7ad19b0ff82d2c17660f6a72" translate="yes" xml:space="preserve">
          <source>Text for the legend entry corresponding to this line.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dbfa0b27d65eeca90c74d21e3465779bc08c016e" translate="yes" xml:space="preserve">
          <source>Text for the legend entry corresponding to this surface.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="caaed5b8f11efc81c59480df48443203e82d3080" translate="yes" xml:space="preserve">
          <source>Text of the legend entry corresponding to this patch.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e0d5f60952e1cce41bb2a49fad0519577d2d2a6" translate="yes" xml:space="preserve">
          <source>Text that is within these angles and separated by at least one space from the URL is a displayed text for the link.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d89971cb391ed07aa3ec8ab1a07718acbe9ed421" translate="yes" xml:space="preserve">
          <source>Textbook pricing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9523cad6936b7ae0a13cd45640c5aa373b8737a3" translate="yes" xml:space="preserve">
          <source>That is, the persistent variable is only removed from memory when the function containing the variable is removed. Note that if the function definition is typed directly into the Octave prompt, the persistent variable will be cleared by a simple &lt;code&gt;clear&lt;/code&gt; command as the entire function definition will be removed from memory. If you do not want a persistent variable to be removed from memory even if the function is cleared, you should use the &lt;code&gt;mlock&lt;/code&gt; function (see &lt;a href=&quot;function-locking#Function-Locking&quot;&gt;Function Locking&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0d0352339da4f80a87a901a9bc1db118471073e" translate="yes" xml:space="preserve">
          <source>That is, the smaller array of size &lt;code&gt;[1 3]&lt;/code&gt; gets copied along the singleton dimension (the number of rows) until it is &lt;code&gt;[3 3]&lt;/code&gt;. No actual copying takes place, however. The internal implementation reuses elements along the necessary dimension in order to achieve the desired effect without copying in memory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93ef0dd827103681fcee453b78be2ff14e1a261d" translate="yes" xml:space="preserve">
          <source>The</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ed4c9f9933dd9e4b8da3ca824145866c18f6a63" translate="yes" xml:space="preserve">
          <source>The &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17713f6405259d12f6344c703a0a2e80f3e5d540" translate="yes" xml:space="preserve">
          <source>The 3-input form returns a diagonal matrix with vector &lt;var&gt;v&lt;/var&gt; on the main diagonal and the resulting matrix being of size &lt;var&gt;m&lt;/var&gt; rows x &lt;var&gt;n&lt;/var&gt; columns.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f474ee3e5b48f85c0abd614f2cfc2e093f6ab44" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&quot;()&quot;&lt;/code&gt; case allows us to filter data using the polynomial provided to the constructor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1cbd4fab75110e4a004d3be03eb66f6d45a3e108" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&quot;-forge&quot;&lt;/code&gt; option lists packages available at the Octave Forge repository. This requires an internet connection and the cURL library. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="782d8e7c4fffe698e6d734e443abf9d1d343fce6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&quot;.&quot;&lt;/code&gt; case allows us to view the contents of the polynomial field.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7705a66708795817a46914316ff07b31ad4d5af3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&quot;Prefix&quot;&lt;/code&gt; option specifies the string &lt;var&gt;pfx&lt;/var&gt; to add as a prefix to the input if it begins with a digit. &lt;var&gt;pfx&lt;/var&gt; must be a valid variable name itself. The default prefix is &lt;code&gt;&quot;x&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d1361e4a0f003f40f7b4f5d232f834f7b4bc180" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&quot;ReplacementStyle&quot;&lt;/code&gt; option specifies how invalid characters are handled. Acceptable values are</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a16f1ef9c816649b06c370c1af1ae878fa11b74f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&quot;UniformValues&quot;&lt;/code&gt; option specifies whether the values of the map must be strictly of the same type. If &lt;var&gt;is_uniform&lt;/var&gt; is true, any values which would be added to the map are first validated to ensure they are of the correct type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4792abf35934ecc220f68b96d3f4564f14edf31e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&quot;emptyvalue&quot;&lt;/code&gt; option may be used to specify the value used to fill empty fields. The default is zero. Note that any non-numeric values, such as text, are also replaced by the &lt;code&gt;&quot;emptyvalue&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7243fc83d9fcbbbf6a18e5d473b4b0e85e2723e4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&quot;landscape&quot;&lt;/code&gt; option changes the orientation so the plot width is larger than the plot height. The &lt;code&gt;&quot;paperposition&quot;&lt;/code&gt; is also modified so that the plot fills the page, while leaving a 0.25 inch border.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eac4e084f9ef8b4b11773f898ad82f3d15c88c59" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&quot;portrait&quot;&lt;/code&gt; option (default) changes the orientation so the plot height is larger than the plot width. It also restores the default &lt;code&gt;&quot;paperposition&quot;&lt;/code&gt; property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4046473d8ff7d6d03dcf93be7777580c501500ba" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&quot;position&quot;&lt;/code&gt; property can be used to exactly position the subplot axes within the current figure. The option &lt;var&gt;pos&lt;/var&gt; is a 4-element vector [x, y, width, height] that determines the location and size of the axes. The values in &lt;var&gt;pos&lt;/var&gt; are normalized in the range [0,1].</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5346b5333a97d7b242dc33149e2a0ab596340bb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&quot;tall&quot;&lt;/code&gt; option sets the orientation to &lt;code&gt;&quot;portrait&quot;&lt;/code&gt; and fills the page with the plot, while leaving a 0.25 inch border.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03ce8a44865c39fa0bbf983ff7c576e1b9a1b7cc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&quot;tex&quot;&lt;/code&gt; option implements a subset of TeX functionality when rendering text. This allows the insertion of special glyphs such as Greek characters or mathematical symbols. Special characters are inserted by using a backslash (\) character followed by a code, as shown in &lt;a href=&quot;#tab_003aextended&quot;&gt;Table 15.1&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="603e00f91a0ef4381cd9cfb3a3d6db4607b5ecbf" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;()&lt;/code&gt; operator or &lt;code&gt;elem&lt;/code&gt; method allow the values of the matrix or array to be read or set. These methods take a single argument, which is of type &lt;code&gt;octave_idx_type&lt;/code&gt;, that is the index into the matrix or array. Additionally, the matrix type allows two argument versions of the &lt;code&gt;()&lt;/code&gt; operator and &lt;code&gt;elem&lt;/code&gt; method, giving the row and column index of the value to get or set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f132a2fe0b0e54eb20166fc0fc4f3ca25636d5c1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;OCTAVE_QUIT&lt;/code&gt; macro does impose a very small performance penalty; For loops that are known to be small it may not make sense to include &lt;code&gt;OCTAVE_QUIT&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2a30f3373f0d0db88811d9a0b8d1369b870ec1a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;axes&lt;/code&gt; properties are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="730159f8df4589840027f5ba8e7a22c096bd27ac" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;break&lt;/code&gt; statement jumps out of the innermost &lt;code&gt;while&lt;/code&gt;, &lt;code&gt;do-until&lt;/code&gt;, or &lt;code&gt;for&lt;/code&gt; loop that encloses it. The &lt;code&gt;break&lt;/code&gt; statement may only be used within the body of a loop. The following example finds the smallest divisor of a given integer, and also identifies prime numbers:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c8796d7cc102e834df647dd65baf13a2aba9077" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;camorbit&lt;/code&gt; command modifies two camera properties: see &lt;a href=&quot;#XREFcampos&quot;&gt;campos&lt;/a&gt; and see &lt;a href=&quot;#XREFcamup&quot;&gt;camup&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65cdaa2e79ad0cd3a34f2372b0588300bdab01cb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;cell&lt;/code&gt; function returns a cell array of a given size, containing empty matrices. This function is similar to the &lt;code&gt;zeros&lt;/code&gt; function for creating new numerical arrays. The following example creates a 2-by-2 cell array containing empty matrices</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e4c8ce78795eaa67447d62449a25a6053571f06" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;colormap&lt;/code&gt; function is used to change the colormap of the current axes or figure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c42499aa25b5ad8e0206993cc2163a3eab94c171" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;colstyle&lt;/code&gt; function will parse a &lt;code&gt;plot&lt;/code&gt;-style specification and will return the color, line, and marker values that would result.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c9ddb51cbcf836637a8001136d8f66fcaa77b0f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;continue&lt;/code&gt; statement, like &lt;code&gt;break&lt;/code&gt;, is used only inside &lt;code&gt;while&lt;/code&gt;, &lt;code&gt;do-until&lt;/code&gt;, or &lt;code&gt;for&lt;/code&gt; loops. It skips over the rest of the loop body, causing the next cycle around the loop to begin immediately. Contrast this with &lt;code&gt;break&lt;/code&gt;, which jumps out of the loop altogether. Here is an example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6dfc59cb0de95859a981f17d6b39bdfb1ecb5ae5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;contour&lt;/code&gt;, &lt;code&gt;contourf&lt;/code&gt; and &lt;code&gt;contourc&lt;/code&gt; functions produce two-dimensional contour plots from three-dimensional data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df19fb0ff85d4fa23b6fafde39255be757e20ab0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;diary&lt;/code&gt; is disabled during the execution of this function. When &lt;code&gt;system&lt;/code&gt; is used, any output produced by external programs is &lt;em&gt;not&lt;/em&gt; captured, unless their output is captured by the &lt;code&gt;system&lt;/code&gt; function itself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6dcf41efe3ac297bcd1c9cef686ebe69546de953" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;do-until&lt;/code&gt; statement is similar to the &lt;code&gt;while&lt;/code&gt; statement, except that it repeatedly executes a statement until a condition becomes true, and the test of the condition is at the end of the loop, so the body of the loop is always executed at least once. As with the condition in an &lt;code&gt;if&lt;/code&gt; statement, the condition in a &lt;code&gt;do-until&lt;/code&gt; statement is considered true if its value is nonzero, and false if its value is zero. If the value of the conditional expression in a &lt;code&gt;do-until&lt;/code&gt; statement is a vector or a matrix, it is considered true only if it is non-empty and &lt;em&gt;all&lt;/em&gt; of the elements are nonzero.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="483f5966de3d2a2ba96c6fd9a478b599610b3d3f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;dsearch&lt;/code&gt; and &lt;code&gt;dsearchn&lt;/code&gt; find the closest point in a tessellation to the desired point. The desired point does not necessarily have to be in the tessellation, and even if it the returned point of the tessellation does not have to be one of the vertexes of the N-simplex within which the desired point is found.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d62e408f290c96b87b5858a6b5438ad901b78351" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;errorbar&lt;/code&gt;, &lt;code&gt;semilogxerr&lt;/code&gt;, &lt;code&gt;semilogyerr&lt;/code&gt;, and &lt;code&gt;loglogerr&lt;/code&gt; functions produce plots with error bar markers. For example,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61014c9e718e98a73e81b10179efe4b3ee152221" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;evalc&lt;/code&gt; function additionally captures any console output produced by the evaluated expression.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="509d2582db1c93ab696df44f9c84e746413e9d92" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;feval&lt;/code&gt; function allows you to call a function from a string containing its name. This is useful when writing a function that needs to call user-supplied functions. The &lt;code&gt;feval&lt;/code&gt; function takes the name of the function to call as its first argument, and the remaining arguments are given to the function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87c11354ef352e13b0796229e1e83bf096c7d967" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;figure&lt;/code&gt; properties are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="925a45411deae0005f5a2c865b8a780d452c101f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;for&lt;/code&gt; statement makes it more convenient to count iterations of a loop. The general form of the &lt;code&gt;for&lt;/code&gt; statement looks like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d05152b66c1eed39986f997c32d60c360798047" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;format&lt;/code&gt; command offers some control over the way Octave prints values with &lt;code&gt;disp&lt;/code&gt; and through the normal echoing mechanism.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7cbdf64e08ff0ba853c5ae9da1b4e37eb171634d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;gcc&lt;/code&gt;&lt;code&gt;fixincludes&lt;/code&gt; and &lt;code&gt;fixproto&lt;/code&gt; scripts should probably fix these problems when &lt;code&gt;gcc&lt;/code&gt; installs its modified set of header files, but I don&amp;rsquo;t think that&amp;rsquo;s been done yet.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="441eb1f86fd62c35e411ab482d20d304e87f6baf" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;get&lt;/code&gt; and &lt;code&gt;set&lt;/code&gt; commands are used to obtain and set the values of properties of graphics objects. In addition, the &lt;code&gt;get&lt;/code&gt; command may be used to obtain property names.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4110f4d73bcf9001b789236ca58a1f45ba30b5b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;get&lt;/code&gt; and &lt;code&gt;set&lt;/code&gt; functions may be used to examine and set properties for graphics objects. For example,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60559a57168e0a91716c0cc39612946ee7d6a4ef" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;get&lt;/code&gt; function may also be used to find the value of a single property. For example,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5a043da58f8727e740710b74f2f115f7c202c4e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;glpk&lt;/code&gt; function also supports variations of this problem.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8fbaee4a932278a83178a64f4464a25eea518ea8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;help&lt;/code&gt; command (see &lt;a href=&quot;getting-help#Getting-Help&quot;&gt;Getting Help&lt;/a&gt;) is able to find the first block of comments in a function and return those as a documentation string. This means that the same commands used to get help on built-in functions are available for properly formatted user-defined functions. For example, after defining the function &lt;code&gt;f&lt;/code&gt; below,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8840f845ba48464837f01aeb2f5e37bdcf8e1251" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;help&lt;/code&gt; parser currently only recognizes single line comments (see &lt;a href=&quot;single-line-comments#Single-Line-Comments&quot;&gt;Single Line Comments&lt;/a&gt;) and not block comments for the initial help text.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15b4bf1ad88cbcb6d36e9138150b0224ab459af9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;if&lt;/code&gt; statement is Octave&amp;rsquo;s decision-making statement. There are three basic forms of an &lt;code&gt;if&lt;/code&gt; statement. In its simplest form, it looks like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a38d4863027876cbe657ed69b2f5a1b4f70936f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;image&lt;/code&gt; properties are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="064e728de3f6905c00f78cb2136df9fe76ec2d54" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;importdata&lt;/code&gt; function has the ability to work with a wide variety of data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e6ad6c1aeff624ee4b9fabace9d317cec09ce64" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;interruptible&lt;/code&gt; property has no effect when the interrupting callback is a &lt;code&gt;deletefcn&lt;/code&gt;, or a figure &lt;code&gt;resizefcn&lt;/code&gt; or &lt;code&gt;closerequestfcn&lt;/code&gt;. Those callbacks always interrupt the executing callback.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94db54692e64896414faab6a4eb60a3072c90f8d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;keyboard&lt;/code&gt; function is placed in a script at the point where the user desires that the execution be stopped. It automatically sets the running script into the debug mode.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47c4192b744f79c706e25903f1eba3493c55db89" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;legend&lt;/code&gt; function creates a graphics object which has various properties that can be manipulated with &lt;code&gt;get&lt;/code&gt;/&lt;code&gt;set&lt;/code&gt;. Alternatively, properties can be set directly when calling &lt;code&gt;legend&lt;/code&gt; by including &lt;var&gt;property&lt;/var&gt;/&lt;var&gt;value&lt;/var&gt; pairs. If using this calling form, the labels must be specified as a cell array of strings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96e3782f20dddf28f8f77cf1c5e42e6fa349f80a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;light&lt;/code&gt; properties are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cff563cfc9474b7350621b566b495da159b7e5a7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;line&lt;/code&gt; properties are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a88176a3850e7097798bc5b215b2071758c3a2f1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;linspace&lt;/code&gt; function returns a row vector when both &lt;var&gt;start&lt;/var&gt; and &lt;var&gt;end&lt;/var&gt; are scalars. If one, or both, inputs are vectors, then &lt;code&gt;linspace&lt;/code&gt; transforms them to column vectors and returns a matrix where each row is an independent sequence between &lt;code&gt;&lt;var&gt;start&lt;/var&gt;(&lt;var&gt;row_n&lt;/var&gt;),&amp;nbsp;&lt;var&gt;end&lt;/var&gt;(&lt;var&gt;row_n&lt;/var&gt;)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1beaacd5371e521bd8fa0398d8f69255b7c024d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;load&lt;/code&gt; command can read data stored in Octave&amp;rsquo;s text and binary formats, and &lt;small&gt;MATLAB&lt;/small&gt;&amp;rsquo;s binary format. If compiled with zlib support, it can also load gzip-compressed files. It will automatically detect the type of file and do conversion from different floating point formats (currently only IEEE big and little endian, though other formats may be added in the future).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4770cf41b695505b86f85480be60d89a092365aa" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ls&lt;/code&gt; command is implemented by calling the native operating system&amp;rsquo;s directory listing command&amp;mdash;available &lt;var&gt;options&lt;/var&gt; will vary from system to system.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d578e8f492bbbc0f8ffd09bbc377591391864884" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;meshc&lt;/code&gt; function is similar to &lt;code&gt;mesh&lt;/code&gt;, but also produces a plot of contours for the surface.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57065266da962dfcd961a1f795aa7c7c27b3f1c8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;mkoctfile&lt;/code&gt; function compiles source code written in C, C++, or Fortran. Depending on the options used with &lt;code&gt;mkoctfile&lt;/code&gt;, the compiled code can be called within Octave or can be used as a stand-alone application.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73937191f9dc336c120d656395e5309288a24253" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;mxArray&lt;/code&gt; structure contains at a minimum, the name of the variable it represents, its dimensions, its type, and whether the variable is real or complex. It can also contain a number of additional fields depending on the type of the &lt;code&gt;mxArray&lt;/code&gt;. There are a number of functions to create &lt;code&gt;mxArray&lt;/code&gt; structures, including &lt;code&gt;mxCreateDoubleMatrix&lt;/code&gt;, &lt;code&gt;mxCreateCellArray&lt;/code&gt;, &lt;code&gt;mxCreateSparse&lt;/code&gt;, and the generic &lt;code&gt;mxCreateNumericArray&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20b2e3632cdbaa615d7b61b55c633a0fdb6e361d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;num2str&lt;/code&gt; function is not very flexible. For better control over the results, use &lt;code&gt;sprintf&lt;/code&gt; (see &lt;a href=&quot;formatted-output#Formatted-Output&quot;&gt;Formatted Output&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d17b048b60b96c153c0ebdd88acb49a19f42af1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;onCleanup&lt;/code&gt; command associates an ordinary Octave variable (the trigger) with an arbitrary function (the action). Whenever the Octave variable ceases to exist&amp;mdash;whether due to a function return, an error, or simply because the variable has been removed with &lt;code&gt;clear&lt;/code&gt;&amp;mdash;then the assigned function is executed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a74b43e1922460183147883e092fcb75b599cf6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;patch&lt;/code&gt; properties are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b8a326b42d68a9f5fb3a21a5b3cd28c080108ef" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;path&lt;/code&gt; function changes the search path that Octave uses to find functions. It is possible to set the path to a value which excludes Octave&amp;rsquo;s own built-in functions. If the &lt;code&gt;Octave:remove-init-dir&lt;/code&gt; warning is enabled then Octave will warn when the &lt;code&gt;path&lt;/code&gt; function has been used in a way that may render Octave unworkable. By default, the &lt;code&gt;Octave:remove-init-dir&lt;/code&gt; warning is enabled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0032d658bcf8ec941fd5c19ffe1494ad7cf0bdc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;plot3&lt;/code&gt; function displays arbitrary three-dimensional data, without requiring it to form a surface. For example,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2fbbe49010a538bd06b6c604b49d9d477402ac2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;plot&lt;/code&gt; function allows you to create simple x-y plots with linear axes. For example,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79c7b15d20c99b010f3e5c4ed03d3c845083d652" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;plotyy&lt;/code&gt; function may be used to create a plot with two independent y axes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="adc1f28b08763a731f740388a6c5fc9202fba68e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;print&lt;/code&gt; command allows you to send plots to you printer and to save plots in a variety of formats. For example,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a471b384b92ae41a089bf9c15add8bbefd8a7cc0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;print&lt;/code&gt; command supports many &lt;var&gt;options&lt;/var&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb8c2620477c37ee17dbafc9627f0507eecdab6a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;printf&lt;/code&gt; function can be used to print any number of arguments. The template string argument you supply in a call provides information not only about the number of additional arguments, but also about their types and what style should be used for printing them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81c58b6eb38ec8ec440bc146f9a83401cffef524" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;printf&lt;/code&gt; statement (see &lt;a href=&quot;input-and-output#Input-and-Output&quot;&gt;Input and Output&lt;/a&gt;) simply tells Octave to print the string &lt;code&gt;&quot;\a&quot;&lt;/code&gt;. The special character &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="007ee24c031a79eaf70017c1159dfe8ad0be1d96" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;rindex&lt;/code&gt; function is equivalent to &lt;code&gt;index&lt;/code&gt; with &lt;var&gt;direction&lt;/var&gt; set to &lt;code&gt;&quot;last&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4bc27da441383312de305f72ba26029dbd0cdb0f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;root figure&lt;/code&gt; properties are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee8fc3ead561b5da0af5d16c62494e066b81427a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;save&lt;/code&gt; and &lt;code&gt;load&lt;/code&gt; commands allow data to be written to and read from disk files in various formats. The default format of files written by the &lt;code&gt;save&lt;/code&gt; command can be controlled using the functions &lt;code&gt;save_default_options&lt;/code&gt; and &lt;code&gt;save_precision&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e51b3a6cb462e96da2343ce7d1aac8dc2481991b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;savepath&lt;/code&gt; function makes it simple to customize a user&amp;rsquo;s configuration file to restore the working paths necessary for a particular instance of Octave. Assuming no filename is specified, Octave will automatically restore the saved directory paths from the appropriate</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95b46862d91432d083120c19a0e09188edd07551" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;set&lt;/code&gt; method makes use of the &lt;code&gt;subsasgn&lt;/code&gt; method of the class, and therefore this method must also be defined. The &lt;code&gt;subsasgn&lt;/code&gt; method is discussed more thoroughly in the next section (see &lt;a href=&quot;indexing-objects#Indexing-Objects&quot;&gt;Indexing Objects&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5870c1128168ca7d95414760736c2bcf786d037" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;sort&lt;/code&gt; function may also be used to produce a matrix containing the original row indices of the elements in the sorted matrix. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d3253f976be9d33b880ef9af2632461e0c413ba" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;sort&lt;/code&gt; function may also be used to sort strings and cell arrays of strings, in which case ASCII dictionary order (uppercase &amp;rsquo;A&amp;rsquo; precedes lowercase &amp;rsquo;a&amp;rsquo;) of the strings is used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39d8de6bd6aac10dcca15d68b569c68cef00b308" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;splinefit&lt;/code&gt; function also provides the convenience of a &lt;var&gt;robust&lt;/var&gt; fitting, where the effect of outlying data is reduced. In the example below, three different fits are provided. Two with differing levels of outlier suppression and a third illustrating the non-robust solution.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c018b85e65d06057863b294040a99df1138a5e07" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;surface&lt;/code&gt; properties are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24376f582abd3f17f8afc31103e6ecb8c2d29e80" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;svd&lt;/code&gt; and &lt;code&gt;lu&lt;/code&gt; functions are examples of built-in functions that behave differently depending on the value of &lt;code&gt;nargout&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9c31e84c0c485413d457148b2a942ed1db68c06" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;switch&lt;/code&gt; statement is also available in the widely used C programming language. There are, however, some differences between the statement in Octave and C</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="301025d2db723a83c944379523b62673d2af81ac" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;system&lt;/code&gt; function can return two values. The first is the exit status of the command and the second is any output from the command that was written to the standard output stream. For example,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49d12d39c6b1db23ba521b23ae56558fc8f3e3b9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;text&lt;/code&gt; properties are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a6a1ccb1e52a5f5ef8ef9594e49622d18bdb49a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;uibuttongroup&lt;/code&gt; properties are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab7411033e01a29ab5cb96012a098e488ce738db" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;uicontextmenu&lt;/code&gt; properties are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf00c72b37fb6c2b1b5e9dcd5289850bebe51b3c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;uicontrol&lt;/code&gt; properties are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61c032077d900706f55e391dcf575780c227a1ec" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;uimenu&lt;/code&gt; properties are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f7e71e333140a5507c891dd31f77af21bc16631" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;uipanel&lt;/code&gt; properties are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa2448b2ac84378cec8ae6192e493ca03897ede4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;uipushtool&lt;/code&gt; properties are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31839eff47f1847025c07b4e8c760580080d5058" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;uitable&lt;/code&gt; properties are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4705e338daa3ad95d10293f7d734c5923896fe90" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;uitoggletool&lt;/code&gt; properties are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28e2c2aaba875025388c33183c9d4d678be3f87e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;uitoolbar&lt;/code&gt; properties are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f48d192db49c9c6316b18605985d3ce8e22c410" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;warning&lt;/code&gt; function also allows you to control which warnings are actually printed to the screen. If the &lt;code&gt;warning&lt;/code&gt; function is called with a string argument that is either &lt;code&gt;&quot;on&quot;&lt;/code&gt; or &lt;code&gt;&quot;off&quot;&lt;/code&gt; all warnings will be enabled or disabled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a10d0fce6bf7cf2f287daa456bbaa37926ab095" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;while&lt;/code&gt; statement is the simplest looping statement in Octave. It repeatedly executes a statement as long as a condition is true. As with the condition in an &lt;code&gt;if&lt;/code&gt; statement, the condition in a &lt;code&gt;while&lt;/code&gt; statement is considered true if its value is nonzero, and false if its value is zero. If the value of the conditional expression in a &lt;code&gt;while&lt;/code&gt; statement is a vector or a matrix, it is considered true only if it is non-empty and &lt;em&gt;all&lt;/em&gt; of the elements are nonzero.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d15a14ea29c1e91cd3e23613eb4bd44a4f742de2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;width&lt;/code&gt; parameter is a positive integer specifying the minimum number of columns used for printing. No maximum is needed as the field will auto-expand as required.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82c37ed2e8e46b5ffe2b2fcaf9d56ce6771b1618" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;xlim&lt;/code&gt;, &lt;code&gt;ylim&lt;/code&gt;, and &lt;code&gt;zlim&lt;/code&gt; functions may be used to get or set individual axis limits. Each has the same form.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44b98a0cbd330d67a60568a44d5061058b24f0ad" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;xticklabels&lt;/code&gt;, &lt;code&gt;yticklabels&lt;/code&gt;, and &lt;code&gt;zticklabels&lt;/code&gt; functions may be used to get or set the label assigned to each tick location and the labeling mode on the respective axis. Each has the same form.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0000f27535797bbe117e7a5d7d015a4190506e1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;xticks&lt;/code&gt;, &lt;code&gt;yticks&lt;/code&gt;, &lt;code&gt;zticks&lt;/code&gt;, &lt;code&gt;rticks&lt;/code&gt;, and &lt;code&gt;thetaticks&lt;/code&gt; functions may be used to get or set the tick mark locations and modes on the respective axis. Each has the same form, although mode options are not currently available for &lt;code&gt;rticks&lt;/code&gt;, and &lt;code&gt;thetaticks&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="edd0d2aa215cb9ce6720030aac99d9fc06419a64" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;yum-builddep&lt;/code&gt; utility is part of the &lt;code&gt;yum-utils&lt;/code&gt; package.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86e41573edb1cf61fac8a858f0a2ebe7454dd6ed" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;i,j&lt;/em&gt; element of a Hilbert matrix is defined as</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37c9b002d22504c196d80e94f85c7fed0c1f6875" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;sparse&lt;/em&gt; function will convert a permutation matrix efficiently to a sparse matrix. The &lt;em&gt;find&lt;/em&gt; function will also work efficiently with a permutation matrix, making it possible to conveniently obtain the permutation indices.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1f8a0704bc2dcdb6d4eaea29bc7034f1997ec14" translate="yes" xml:space="preserve">
          <source>The &lt;small&gt;CHOLMOD&lt;/small&gt;, &lt;small&gt;UMFPACK&lt;/small&gt; and &lt;small&gt;CXSPARSE&lt;/small&gt; packages were written by Tim Davis and are available at &lt;a href=&quot;http://faculty.cse.tamu.edu/davis/suitesparse.html&quot;&gt;http://faculty.cse.tamu.edu/davis/suitesparse.html&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e242d0ea7352d1887ed7bcc6fd68a32b65a3e6d8" translate="yes" xml:space="preserve">
          <source>The &lt;var&gt;alg&lt;/var&gt; input argument, a guidance on solution method to use, is currently ignored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6fb439f36207bead467b03fbf8f4deaf0f659b35" translate="yes" xml:space="preserve">
          <source>The &lt;var&gt;command_list&lt;/var&gt; elements are not optional. Making the list optional would have meant requiring a separator between the label and the command list. Otherwise, things like</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="caa9fae576b6543b4edfe190e3ae1bcefdc91c95" translate="yes" xml:space="preserve">
          <source>The &lt;var&gt;devinfo&lt;/var&gt; structure has two fields &lt;code&gt;&quot;input&quot;&lt;/code&gt; and &lt;code&gt;&quot;output&quot;&lt;/code&gt;. The value of each field is a structure array with fields &lt;code&gt;&quot;Name&quot;&lt;/code&gt;, &quot;DriverVersion&quot; and &lt;code&gt;&quot;ID&quot;&lt;/code&gt; describing an audio device.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d89961f984b7a3c7fc236812f75c497a54c499a" translate="yes" xml:space="preserve">
          <source>The &lt;var&gt;field1&lt;/var&gt;, &lt;var&gt;field2&lt;/var&gt;, &amp;hellip; variables are strings specifying the names of the fields and the &lt;var&gt;value1&lt;/var&gt;, &lt;var&gt;value2&lt;/var&gt;, &amp;hellip; variables can be of any type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ff73d4cdbc9e0c69a17e4cd41c4efd868571981" translate="yes" xml:space="preserve">
          <source>The &lt;var&gt;fmt&lt;/var&gt; argument may also be used to assign legend labels. To do so, include the desired label between semicolons after the formatting sequence described above, e.g., &lt;code&gt;&quot;+b;Key Title;&quot;&lt;/code&gt;. Note that the last semicolon is required and Octave will generate an error if it is left out.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="777badc1f06b07a4f6a23617a1cd2d18b6964471" translate="yes" xml:space="preserve">
          <source>The &lt;var&gt;fmt&lt;/var&gt; argument specifies the linestyle to be used by the plot command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6ffb1139609aa98c19c9bec9b71daf4d6b0e515" translate="yes" xml:space="preserve">
          <source>The &lt;var&gt;fmt&lt;/var&gt; format argument can also be used to control the plot style. It is a string composed of four optional parts: &quot;&amp;lt;linestyle&amp;gt;&amp;lt;marker&amp;gt;&amp;lt;color&amp;gt;&amp;lt;;displayname;&amp;gt;&quot;. When a marker is specified, but no linestyle, only the markers are plotted. Similarly, if a linestyle is specified, but no marker, then only lines are drawn. If both are specified then lines and markers will be plotted. If no &lt;var&gt;fmt&lt;/var&gt; and no &lt;var&gt;property&lt;/var&gt;/&lt;var&gt;value&lt;/var&gt; pairs are given, then the default plot style is solid lines with no markers and the color determined by the &lt;code&gt;&quot;colororder&quot;&lt;/code&gt; property of the current axes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d94ee184f66e27609149e9280836d084981c57f" translate="yes" xml:space="preserve">
          <source>The &lt;var&gt;n&lt;/var&gt; are log-spaced from 1 to &lt;var&gt;max_n&lt;/var&gt;. For each &lt;var&gt;n&lt;/var&gt;, an initialization expression (&lt;var&gt;init&lt;/var&gt;) is computed to create any data needed for the test. If a second expression (&lt;var&gt;f2&lt;/var&gt;) is given then the execution times of the two expressions are compared. When called without output arguments the results are printed to stdout and displayed graphically.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a7b94d8a0f5577c340984b745f2063d724cf0c5" translate="yes" xml:space="preserve">
          <source>The &lt;var&gt;option&lt;/var&gt; variable can contain options that affect the manner in which a package is installed. These options can be one or more of</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d7c395564e72e834d0c3ee7a0b1ac8b5928fc40" translate="yes" xml:space="preserve">
          <source>The &lt;var&gt;options&lt;/var&gt; argument can be a bitwise OR of zero or more of the following constants:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d56251439548600bc2eb1489e200d7f875ce2238" translate="yes" xml:space="preserve">
          <source>The &lt;var&gt;options&lt;/var&gt; argument, which must be a string or cell array of strings, contains options passed to the underlying qhull command. See the documentation for the Qhull library for details &lt;a href=&quot;http://www.qhull.org/html/qh-quick.htm#options&quot;&gt;http://www.qhull.org/html/qh-quick.htm#options&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b6c30977f3ed90d4ca7cdf909fcee6937403330" translate="yes" xml:space="preserve">
          <source>The &lt;var&gt;p&lt;/var&gt;-th central moment of &lt;var&gt;x&lt;/var&gt; is defined as:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6572de72411474f89ed91472cda7174d5d93119e" translate="yes" xml:space="preserve">
          <source>The &lt;var&gt;pattern&lt;/var&gt; arguments are treated as regular expressions and any matches will be cleared.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b26db5add77b2e814022bd8179d259311901b00e" translate="yes" xml:space="preserve">
          <source>The &lt;var&gt;pattern&lt;/var&gt; may contain the following special characters:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45ecdde883aaaedeff79c7c3f534112f03320682" translate="yes" xml:space="preserve">
          <source>The &lt;var&gt;pid&lt;/var&gt; argument can be:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0067cae3d6ddff4f589473aa01b8cea94f15f3e" translate="yes" xml:space="preserve">
          <source>The &lt;var&gt;precision&lt;/var&gt; argument may also specify a type conversion. For example, &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="429a8e9b7ebe69a00a24f1f31367d0adac2e6c01" translate="yes" xml:space="preserve">
          <source>The &lt;var&gt;precision&lt;/var&gt; argument may also specify an optional repeat count. For example, &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df97a04197556fb351c514b8861d4bfd3a3be9c8" translate="yes" xml:space="preserve">
          <source>The &lt;var&gt;range&lt;/var&gt; parameter specifies exactly which data elements are read. The first form of the parameter is a 4-element vector containing the upper left and lower right corners &lt;code&gt;[&lt;var&gt;R0&lt;/var&gt;,&lt;var&gt;C0&lt;/var&gt;,&lt;var&gt;R1&lt;/var&gt;,&lt;var&gt;C1&lt;/var&gt;]&lt;/code&gt; where the indices are zero-based. Alternatively, a spreadsheet style form such as &lt;code&gt;&quot;A2..Q15&quot;&lt;/code&gt; or &lt;code&gt;&quot;T1:AA5&quot;&lt;/code&gt; can be used. The lowest alphabetical index &lt;code&gt;'A'&lt;/code&gt; refers to the first column. The lowest row index is 1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82b2f0ee2f6e870fe646131be27661cb2599d870" translate="yes" xml:space="preserve">
          <source>The &lt;var&gt;type&lt;/var&gt; argument is the string &lt;code&gt;&quot;lower&quot;&lt;/code&gt; for the lower bandwidth and &lt;code&gt;&quot;upper&quot;&lt;/code&gt; for the upper bandwidth. If no &lt;var&gt;type&lt;/var&gt; is specified return both the lower and upper bandwidth of &lt;var&gt;A&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f58e3ea33aec41eb2267e1effc949c7895b8381" translate="yes" xml:space="preserve">
          <source>The ARMA model is defined by</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b87e613b20b4e91b5375981e900d3aa08415cfb" translate="yes" xml:space="preserve">
          <source>The ASCII value of the key</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fcc1ce63cb7ea13103dc7186f7dc6e8c9d9f0b1c" translate="yes" xml:space="preserve">
          <source>The BFGS update failed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e0905e3b44ae71602e48d77c8e70670be4573c7" translate="yes" xml:space="preserve">
          <source>The Beta function can grow quite large and it is often more useful to work with the logarithm of the output rather than the function directly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0cf5e9bd0289704ff8de09d61bbb1430e35c8122" translate="yes" xml:space="preserve">
          <source>The Beta function can grow quite large and it is often more useful to work with the logarithm of the output rather than the function directly. See &lt;a href=&quot;#XREFbetaln&quot;&gt;betaln&lt;/a&gt;, for computing the logarithm of the Beta function in an efficient manner.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8fe23697bc078cacac92392b896c7864298ca307" translate="yes" xml:space="preserve">
          <source>The Beta function definition is</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e306e3ef53d198edbb707468bcc12f3787d07e5" translate="yes" xml:space="preserve">
          <source>The Cholesky factorization itself can be used to determine the appropriate sparsity preserving reordering of the matrix during the factorization, In that case this might be obtained with three return arguments as &lt;code&gt;[r, p, q] = chol (A); spy (r)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e4fc80f6e39b82e285c2a6e6b73c008a73743d8" translate="yes" xml:space="preserve">
          <source>The DESCRIPTION File</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="699d44f62e51b4654736c7125351973919c8bf5d" translate="yes" xml:space="preserve">
          <source>The Dawson function is defined as</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39b73e041e4cfe2300d361640a30bb9b7f3ecd6c" translate="yes" xml:space="preserve">
          <source>The Delaunay triangulation is a tessellation of the convex hull of a set of points such that no N-sphere defined by the N-triangles contains any other points from the set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20051206547134927c68ac4c39e9b6f847abdd24" translate="yes" xml:space="preserve">
          <source>The Delaunay triangulation is constructed from a set of circum-circles. These circum-circles are chosen so that there are at least three of the points in the set to triangulation on the circumference of the circum-circle. None of the points in the set of points falls within any of the circum-circles.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="405512acaa128d5d24b1310d52a57cdae9698f32" translate="yes" xml:space="preserve">
          <source>The FFT is calculated along the first non-singleton dimension of the array. Thus if &lt;var&gt;x&lt;/var&gt; is a matrix, &lt;code&gt;fft (&lt;var&gt;x&lt;/var&gt;)&lt;/code&gt; computes the FFT for each column of &lt;var&gt;x&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09ca8efb077332234cff4bca79aea29bbf852c63" translate="yes" xml:space="preserve">
          <source>The GECOS field.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="166dedbd6960a16ff4d5566aa8c0421542240eda" translate="yes" xml:space="preserve">
          <source>The GLS estimator for matrix &lt;var&gt;b&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a15f49c0ef62eb73dfe18d4aec76eea369ebaba9" translate="yes" xml:space="preserve">
          <source>The GLS estimator for scalar &lt;em&gt;s^2&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4da5003e094aaf9cefae17fe81a84360b6d2d4d1" translate="yes" xml:space="preserve">
          <source>The GUI data is stored in the figure handle &lt;var&gt;h&lt;/var&gt;. If &lt;var&gt;h&lt;/var&gt; is not a figure handle then it&amp;rsquo;s parent figure will be used for storage.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03e9050cc983310f804be8894df3755f7e7d325d" translate="yes" xml:space="preserve">
          <source>The GUI elements available are I/O dialogs, a progress bar, and UI elements for plot windows. For example, rather than hardcoding a filename for output results a script can open a dialog box and allow the user to choose a file. Similarly, if a calculation is expected to take a long time a script can display a progress bar. The various UI elements can be used to fully customize the plot window with menubars, toolbars, context menus, pushbuttons, sliders, etc.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="699376aaededb3123652368ff4ddea675782699d" translate="yes" xml:space="preserve">
          <source>The Gamma function is defined as</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2436afbcee02484ea98a75da0dfc039e6e3b7aa8" translate="yes" xml:space="preserve">
          <source>The Givens matrix is a 2-by-2 orthogonal matrix</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="220e18454da2f50f50554af72631bd9098d4cad2" translate="yes" xml:space="preserve">
          <source>The Hessenberg decomposition is &lt;code&gt;&lt;var&gt;P&lt;/var&gt; * &lt;var&gt;H&lt;/var&gt; * &lt;var&gt;P&lt;/var&gt;' = &lt;var&gt;A&lt;/var&gt;&lt;/code&gt; where &lt;var&gt;P&lt;/var&gt; is a square unitary matrix (&lt;code&gt;&lt;var&gt;P&lt;/var&gt;' * &lt;var&gt;P&lt;/var&gt; = I&lt;/code&gt;, using complex-conjugate transposition) and &lt;var&gt;H&lt;/var&gt; is upper Hessenberg (&lt;code&gt;&lt;var&gt;H&lt;/var&gt;(i, j) = 0 forall i &amp;gt; j+1)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8891ac3019c76e8b17351191e10a925342571cff" translate="yes" xml:space="preserve">
          <source>The Hessenberg decomposition is usually used as the first step in an eigenvalue computation, but has other applications as well (see Golub, Nash, and Van Loan, IEEE Transactions on Automatic Control, 1979).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3146a702d2881cc83e9ffd8322bffe5b5cb48c2" translate="yes" xml:space="preserve">
          <source>The Hessenberg-triangular decomposition is the first step in Moler and Stewart&amp;rsquo;s QZ decomposition algorithm.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f061f3f9180ccff298a7eea02062e945b4d10e24" translate="yes" xml:space="preserve">
          <source>The IEEE floating point standard defines the result of the expressions &lt;code&gt;0*Inf&lt;/code&gt; and &lt;code&gt;0*NaN&lt;/code&gt; as &lt;code&gt;NaN&lt;/code&gt;. This is widely agreed to be a good compromise. Numerical software dealing with structured and sparse matrices (including Octave) however, almost always makes a distinction between a &quot;numerical zero&quot; and an &quot;assumed zero&quot;. A &quot;numerical zero&quot; is a zero value occurring in a place where any floating-point value could occur. It is normally stored somewhere in memory as an explicit value. An &quot;assumed zero&quot;, on the contrary, is a zero matrix element implied by the matrix structure (diagonal, triangular) or a sparsity pattern; its value is usually not stored explicitly anywhere, but is implied by the underlying data structure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9f20f8b7e302ac50baff62ffc3db0821b2b19b6" translate="yes" xml:space="preserve">
          <source>The INDEX File</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65ae168b083f58ba98e6510a2ccd82c2fccc3f3f" translate="yes" xml:space="preserve">
          <source>The JIT compiler is a very new feature in Octave and not all valid Octave statements can currently be accelerated. However, if no other technique is available it may be worth benchmarking the code with JIT enabled. The function &lt;code&gt;jit_enable&lt;/code&gt; is used to turn compilation on or off. The function &lt;code&gt;jit_startcnt&lt;/code&gt; sets the threshold for acceleration. Loops with iteration counts above &lt;code&gt;jit_startcnt&lt;/code&gt; will be accelerated. The functions &lt;code&gt;jit_failcnt&lt;/code&gt; and &lt;code&gt;debug_jit&lt;/code&gt; are not likely to be of use to anyone not working directly on the implementation of the JIT compiler.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="973c57aba7a52d5d0a83ead841fe5b08d72f45e2" translate="yes" xml:space="preserve">
          <source>The JVM allocates a fixed amount of initial memory and may expand this pool up to a fixed maximum memory limit. The default values depend on the Java version (see &lt;a href=&quot;java-interface-functions#XREFjavamem&quot;&gt;javamem&lt;/a&gt;). The memory pool is shared by all Java objects running in the JVM. This strict memory limit is intended mainly to avoid runaway applications inside web browsers or in enterprise servers which can consume all memory and crash the system. When the maximum memory limit is hit, Java code will throw exceptions so that applications will fail or behave unexpectedly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb4c22e0ceb3444189bfb8679c76604338fcc7cc" translate="yes" xml:space="preserve">
          <source>The JVM is only loaded once per Octave session. Thus, to change the used version of the JVM, you might have to re-start Octave. To check which version of the JVM is currently being used, run &lt;code&gt;version -java&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e3d040fd00ac94c10fd5baf8705849b2fe32194" translate="yes" xml:space="preserve">
          <source>The Jacobian can then be used with the following call to &lt;code&gt;fsolve&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef745890729deeba5c95fa76dd7b5492c0316e8b" translate="yes" xml:space="preserve">
          <source>The Java Interface is designed for calling Java functions from within Octave. If you want to do the reverse, and call Octave from within Java, try a library like &lt;code&gt;joPas&lt;/code&gt; (&lt;a href=&quot;http://jopas.sourceforge.net&quot;&gt;http://jopas.sourceforge.net&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1fef42377a0e3bc4375f3a3317bf1e8d9bd33392" translate="yes" xml:space="preserve">
          <source>The OLS estimator for matrix &lt;var&gt;b&lt;/var&gt;. &lt;var&gt;beta&lt;/var&gt; is calculated directly via &lt;code&gt;inv (&lt;var&gt;x&lt;/var&gt;'*&lt;var&gt;x&lt;/var&gt;) * &lt;var&gt;x&lt;/var&gt;' * &lt;var&gt;y&lt;/var&gt;&lt;/code&gt; if the matrix &lt;code&gt;&lt;var&gt;x&lt;/var&gt;'*&lt;var&gt;x&lt;/var&gt;&lt;/code&gt; is of full rank. Otherwise, &lt;code&gt;&lt;var&gt;beta&lt;/var&gt; = pinv (&lt;var&gt;x&lt;/var&gt;) * &lt;var&gt;y&lt;/var&gt;&lt;/code&gt; where &lt;code&gt;pinv (&lt;var&gt;x&lt;/var&gt;)&lt;/code&gt; denotes the pseudoinverse of &lt;var&gt;x&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a2f25b185d1b5c5a3bf20ee83852cca36f9a83d" translate="yes" xml:space="preserve">
          <source>The OLS estimator for the matrix &lt;var&gt;s&lt;/var&gt;,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2cd102cbd3d0d49bfe1b135b80b8d99e07227625" translate="yes" xml:space="preserve">
          <source>The Octave &lt;code&gt;unwind_protect&lt;/code&gt; mechanism (&lt;a href=&quot;the-unwind_005fprotect-statement#The-unwind_005fprotect-Statement&quot;&gt;The unwind_protect Statement&lt;/a&gt;) can also be used in oct-files. In conjunction with the exception handling of Octave, it ensures that certain recovery code is always run even if an exception occurs. An example of the use of this mechanism is</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0fb609d36c50fd2bc69cd5ca11cc48bb090814c" translate="yes" xml:space="preserve">
          <source>The Octave format for sparse matrices is identical to the mex format in that it is a compressed column sparse format. Also, in both implementations sparse matrices are required to be two-dimensional. The only difference of importance to the programmer is that the real and imaginary parts of the matrix are stored separately.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac46c4648b94caae3a12f0486361b1efe4924820" translate="yes" xml:space="preserve">
          <source>The Octave interpreter calls the &lt;code&gt;display&lt;/code&gt; function whenever it needs to present a class on-screen. Typically, this would be a statement which does not end in a semicolon to suppress output. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10e510d4b1c0dc7ead2e026d62ffec851b0386dc" translate="yes" xml:space="preserve">
          <source>The Octave sources are primarily written in C++, but some portions are also written in C and Fortran. The Octave sources are intended to be portable. Recent versions of the GNU compiler collection (GCC) should work (&lt;a href=&quot;https://gcc.gnu.org&quot;&gt;https://gcc.gnu.org&lt;/a&gt;). If you use GCC, you should avoid mixing versions. For example, be sure that you are not using the obsolete &lt;code&gt;g77&lt;/code&gt; Fortran compiler with modern versions of &lt;code&gt;gcc&lt;/code&gt; and &lt;code&gt;g++&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e702e2c18c7ac3e20b2ddd1af828724e1f3d15d" translate="yes" xml:space="preserve">
          <source>The OpenGL-based graphics toolkits have limited support for text. Limitations include using only ASCII characters (e.g., no Greek letters) and support for just three base PostScript fonts: Helvetica (the default), Times, or Courier. Any other font will be replaced by Helvetica.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e3caa3d11b618561088ec8b8d742861b71c9028" translate="yes" xml:space="preserve">
          <source>The Pad&amp;eacute; approximant of &lt;code&gt;exp (-sT)&lt;/code&gt; is defined by the following equation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39a6c13a03c0c8f15dab8d6b56b238ee2b9b8348" translate="yes" xml:space="preserve">
          <source>The Perl Compatible Regular Expression library (&lt;a href=&quot;https://www.pcre.org&quot;&gt;https://www.pcre.org&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbc65ea6ba7c1657469e5a9e542e3eda20180baa" translate="yes" xml:space="preserve">
          <source>The QR factorization is</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5c26cc46e466e63af5d7a7912e05d78c4cb0c14" translate="yes" xml:space="preserve">
          <source>The QR factorization supplied may be either full (Q is square) or economized (R is square).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d282aa0ee7671215e959519ab51a88e444c2a3d" translate="yes" xml:space="preserve">
          <source>The QR solver factorizes the problem with a Dulmage-Mendelsohn decomposition, to separate the problem into blocks that can be treated as over-determined, multiple well determined blocks, and a final over-determined block. For matrices with blocks of strongly connected nodes this is a big win as LU decomposition can be used for many blocks. It also significantly improves the chance of finding a solution to over-determined problems rather than just returning a vector of &lt;em&gt;NaN&lt;/em&gt;&amp;rsquo;s.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d1242defec3953d30feb3ccb9be577e9bd83940" translate="yes" xml:space="preserve">
          <source>The Quickhull Algorithm for Convex Hulls</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c841b80a1ef550771a2ad721026e800e28ab440e" translate="yes" xml:space="preserve">
          <source>The RGB color or color name of the edges or faces of the surface. See &lt;a href=&quot;colors#Colors&quot;&gt;Colors&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95ca448c592c6c1ba6ee063089cb9cc6f2258a0e" translate="yes" xml:space="preserve">
          <source>The RGB color or color name of the line objects of the error bars. See &lt;a href=&quot;colors#Colors&quot;&gt;Colors&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f043a35be8a8a11be38cc69c86e3f8b01d4562c" translate="yes" xml:space="preserve">
          <source>The RGB color or color name of the line objects of the quiver. See &lt;a href=&quot;colors#Colors&quot;&gt;Colors&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c67b18972f53cecc4581a147b500167acec221e" translate="yes" xml:space="preserve">
          <source>The RGB color or color name of the line objects of the stairs. See &lt;a href=&quot;colors#Colors&quot;&gt;Colors&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31e0d166c90b903a28204dcf64cbd96808bbac9d" translate="yes" xml:space="preserve">
          <source>The RGB color or color name of the line objects of the stems. See &lt;a href=&quot;colors#Colors&quot;&gt;Colors&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="758d901309309644874e76ed1e2ab840b1f64eb3" translate="yes" xml:space="preserve">
          <source>The RGB color or color name of the line objects. See &lt;a href=&quot;colors#Colors&quot;&gt;Colors&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c694eb1c60ca8f5131f93b2f8598aa3cec0cb2b0" translate="yes" xml:space="preserve">
          <source>The SUite of Nonlinear and DIfferential/ALgebraic Equation Solvers (&lt;a href=&quot;https://computation.llnl.gov/projects/sundials&quot;&gt;https://computation.llnl.gov/projects/sundials&lt;/a&gt;) is required for the Ordinary Differential Equations (ODE) solvers &lt;code&gt;ode15i&lt;/code&gt; and &lt;code&gt;ode15s&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c14bcf8495c4730f4829e5efaef6209be4aa3e3" translate="yes" xml:space="preserve">
          <source>The Schur decomposition is defined as</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05f1b5660066010bdf76be34748853eb00d451e4" translate="yes" xml:space="preserve">
          <source>The Schur decomposition is used to compute eigenvalues of a square matrix, and has applications in the solution of algebraic Riccati equations in control (see &lt;code&gt;are&lt;/code&gt; and &lt;code&gt;dare&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67d985d09c2b3925624662f13c35a1968a7c2683" translate="yes" xml:space="preserve">
          <source>The SuiteSparse makefiles don&amp;rsquo;t generate shared libraries. On some systems, you can generate them by doing something as simple as</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d424d65ad126558eeb4d01bb628d13145bb19241" translate="yes" xml:space="preserve">
          <source>The Sylvester equation is defined as:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28199d112fc8ee18aab147a23523c5b2e60a02c7" translate="yes" xml:space="preserve">
          <source>The Vandermonde matrix used to compute the polynomial coefficients.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2985ab28fa8121fd275a2e89b9852b282ed611b" translate="yes" xml:space="preserve">
          <source>The Voronoi facets with points at infinity are not drawn.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29cf224a1d98d32d59c1b6dce8e836cfe2b34b4e" translate="yes" xml:space="preserve">
          <source>The above behavior is consistent with full matrices, but is not consistent with sparse implementations in other products.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eff16315a6fb3fd2b0830c6089998a6a0d75fe3b" translate="yes" xml:space="preserve">
          <source>The above example treats all errors the same. In many situations it can however be necessary to discriminate between errors, and take different actions depending on the error. The &lt;code&gt;lasterror&lt;/code&gt; function returns a structure containing information about the last error that occurred. As an example, the code above could be changed to count the number of errors related to the &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="149960ec33dd7832b62d061292b998c10e7e2d24" translate="yes" xml:space="preserve">
          <source>The above integrations can be fairly slow, and that problem increases exponentially with the dimensionality of the integral. Another possible solution for 2-D integration is to use Orthogonal Collocation as described in the previous section (see &lt;a href=&quot;orthogonal-collocation#Orthogonal-Collocation&quot;&gt;Orthogonal Collocation&lt;/a&gt;). The integral of a function &lt;em&gt;f(x,y)&lt;/em&gt; for &lt;em&gt;x&lt;/em&gt; and &lt;em&gt;y&lt;/em&gt; between 0 and 1 can be approximated using &lt;em&gt;n&lt;/em&gt; points by the sum over &lt;code&gt;i=1:n&lt;/code&gt; and &lt;code&gt;j=1:n&lt;/code&gt; of &lt;code&gt;q(i)*q(j)*f(r(i),r(j))&lt;/code&gt;, where &lt;em&gt;q&lt;/em&gt; and &lt;em&gt;r&lt;/em&gt; is as returned by &lt;code&gt;colloc (n)&lt;/code&gt;. The generalization to more than two variables is straight forward. The following code computes the studied integral using &lt;em&gt;n=8&lt;/em&gt; points.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7afc0c77cf05d517f55015cb31b9ba430b5cf705" translate="yes" xml:space="preserve">
          <source>The above problem of memory reallocation can be avoided in oct-files. However, the construction of a sparse matrix from an oct-file is more complex than can be discussed here. See &lt;a href=&quot;external-code-interface#External-Code-Interface&quot;&gt;External Code Interface&lt;/a&gt;, for a full description of the techniques involved.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40c12d359c13b5b206675a7a958dc47950219220" translate="yes" xml:space="preserve">
          <source>The above rules apply whenever the dimensionality of the index expression is greater than one (&lt;em&gt;M &amp;gt; 1&lt;/em&gt;). However, for one-dimensional index expressions special rules apply and the shape of the output &lt;strong&gt;is&lt;/strong&gt; determined by the shape of the indexing component. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4c4935525e52ec388cf28b9efd425352d52b921" translate="yes" xml:space="preserve">
          <source>The above table describes the most basic possible keystrokes that you need in order to do editing of the input line. On most terminals, you can also use the left and right arrow keys in place of</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d305844c1a53ad822a3abd3d24f10b1715133406" translate="yes" xml:space="preserve">
          <source>The above will print &lt;code&gt;&quot;Bye!&quot;&lt;/code&gt; to the terminal upon the closing (deleting) of the figure. There are many graphics property actions for which a callback function may be assigned, including, &lt;code&gt;buttondownfcn&lt;/code&gt;, &lt;code&gt;windowscrollwheelfcn&lt;/code&gt;, &lt;code&gt;createfcn&lt;/code&gt;, &lt;code&gt;deletefcn&lt;/code&gt;, &lt;code&gt;keypressfcn&lt;/code&gt;, etc.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f844f40c9f7d2f959bd4f1e589d305067320780e" translate="yes" xml:space="preserve">
          <source>The actual meaning of the value of a pixel in a grayscale or RGB image depends on the class of the matrix. If the matrix is of class &lt;code&gt;double&lt;/code&gt; pixel intensities are between 0 and 1, if it is of class &lt;code&gt;uint8&lt;/code&gt; intensities are between 0 and 255, and if it is of class &lt;code&gt;uint16&lt;/code&gt; intensities are between 0 and 65535.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e233951713ccf12ee461b3891821fd33f0d9a60f" translate="yes" xml:space="preserve">
          <source>The actual value is system dependent. On machines that support IEEE floating point arithmetic, &lt;code&gt;realmax&lt;/code&gt; is approximately 1.7977e+308 for double precision and 3.4028e+38 for single precision.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e89ad58de14a4d38985b1d0b4636b1f67b9e8dc0" translate="yes" xml:space="preserve">
          <source>The actual value is system dependent. On machines that support IEEE floating point arithmetic, &lt;code&gt;realmin&lt;/code&gt; is approximately 2.2251e-308 for double precision and 1.1755e-38 for single precision.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c72f97c437fbe81f894c84cc9e8f8b382a2f696" translate="yes" xml:space="preserve">
          <source>The additional argument &lt;var&gt;flag&lt;/var&gt; will register or unregister &lt;var&gt;fcn&lt;/var&gt; from the list of functions to be called when Octave exits. If &lt;var&gt;flag&lt;/var&gt; is true, the function is registered, and if &lt;var&gt;flag&lt;/var&gt; is false, it is unregistered. For example, after registering the function &lt;code&gt;last_words&lt;/code&gt; above,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44f1a6d118b687fc872576bc91ef45c8799420a5" translate="yes" xml:space="preserve">
          <source>The additional inputs &lt;var&gt;funcname&lt;/var&gt;, &lt;var&gt;varname&lt;/var&gt;, and &lt;var&gt;position&lt;/var&gt; are optional and will make any generated validation error message more specific.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6026b31b6f7f7e387d4295f52c3425faa0346e53" translate="yes" xml:space="preserve">
          <source>The adjusted skewness coefficient is obtained by replacing the sample second and third central moments by their bias-corrected versions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69e3c598d3cbcbc3abb5fb892de54ba934e2af1b" translate="yes" xml:space="preserve">
          <source>The algorithm above is implemented in the function &lt;code&gt;dblquad&lt;/code&gt; for integrals over two variables. The 3-D equivalent of this process is implemented in &lt;code&gt;triplequad&lt;/code&gt; for integrals over three variables. As an example, the result above can be replicated with a call to &lt;code&gt;dblquad&lt;/code&gt; as shown below.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee6b70299071a7650a26f10a57240b97c981d648" translate="yes" xml:space="preserve">
          <source>The algorithm makes two strings unique by appending an underscore (&lt;code&gt;&quot;_&quot;&lt;/code&gt; and a numeric count to the second string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3771c54083e500537749c68e0091674b66b83f2" translate="yes" xml:space="preserve">
          <source>The algorithm represents a heuristic approach to the NP-complete bandwidth minimization problem. The implementation is based in the descriptions found in</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88b0e878ed96d7fbd7abc73d91d0ef4f29920bdb" translate="yes" xml:space="preserve">
          <source>The algorithm terminated normally. All constraints meet the specified tolerance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="946ac5563671a594c394d44b8fb1e96cdb681268" translate="yes" xml:space="preserve">
          <source>The algorithm used by &lt;code&gt;fminunc&lt;/code&gt; is a gradient search which depends on the objective function being differentiable. If the function has discontinuities it may be better to use a derivative-free algorithm such as &lt;code&gt;fminsearch&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="473e4fa0905aab73c79d10f3f11625b98ced5728" translate="yes" xml:space="preserve">
          <source>The algorithm used by &lt;code&gt;quadgk&lt;/code&gt; involves subdividing the integration interval and evaluating each subinterval. If &lt;var&gt;trace&lt;/var&gt; is true then after computing each of these partial integrals display: (1) the number of subintervals at this step, (2) the current estimate of the error &lt;var&gt;err&lt;/var&gt;, (3) the current estimate for the integral &lt;var&gt;q&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38c6a9f92bd32bddc9ef6b25a98fcd53b2afaf80" translate="yes" xml:space="preserve">
          <source>The algorithm used by &lt;code&gt;quadl&lt;/code&gt; involves recursively subdividing the integration interval. If &lt;var&gt;trace&lt;/var&gt; is defined then for each subinterval display: (1) the total number of function evaluations, (2) the left end of the subinterval, (3) the length of the subinterval, (4) the approximation of the integral over the subinterval.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e548f4c7ef18c91f48239a4c65854df010763817" translate="yes" xml:space="preserve">
          <source>The algorithm used by &lt;code&gt;quadv&lt;/code&gt; involves recursively subdividing the integration interval and applying Simpson&amp;rsquo;s rule on each subinterval. If &lt;var&gt;trace&lt;/var&gt; is true then after computing each of these partial integrals display: (1) the total number of function evaluations, (2) the left end of the subinterval, (3) the length of the subinterval, (4) the approximation of the integral over the subinterval.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a72d551efe28812eb001f9c327767e90680fea0d" translate="yes" xml:space="preserve">
          <source>The algorithm used in &lt;code&gt;sort&lt;/code&gt; is optimized for the sorting of partially ordered lists.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1944e095f0df987085a9da82b64c31dd016474b" translate="yes" xml:space="preserve">
          <source>The algorithm uses Clenshaw-Curtis quadrature rules of increasing degree in each interval and bisects the interval if either the function does not appear to be smooth or a rule of maximum degree has been reached. The error estimate is computed from the L2-norm of the difference between two successive interpolations of the integrand over the nodes of the respective quadrature rules.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e466a58c0a6e3464ba1427617f536905c7e8cdb9" translate="yes" xml:space="preserve">
          <source>The allowed values for radio (string) properties can be retrieved programmatically or displayed using the one or two arguments call to &lt;code&gt;set&lt;/code&gt; function. See &lt;a href=&quot;graphics-objects#XREFset&quot;&gt;set&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4b40309b97ff4cb134f8367984db87b27e31926" translate="yes" xml:space="preserve">
          <source>The alternate mode &lt;code&gt;&quot;light&quot;&lt;/code&gt; creates a light object to illuminate the surface.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3f8858279abf3b92bc0e14c7d320f1365766788" translate="yes" xml:space="preserve">
          <source>The alternative is to first create a sparse matrix with the desired number of nonzero elements and then later fill those elements in. Sample code:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="776d6b67327e1ca5abb0a7dde452edd2a388f009" translate="yes" xml:space="preserve">
          <source>The amount of memory currently used to store the variable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9cf19e78ac86f374ceebf9bd040df5dc11592151" translate="yes" xml:space="preserve">
          <source>The amount of pre-allocated memory for a given matrix may be queried using the function &lt;code&gt;nzmax&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e277f055c5763053305839e70a87a8cfa34cc7f" translate="yes" xml:space="preserve">
          <source>The analogy of objects with structures is carried over into reading and writing object fields. To read a field the object is indexed with the &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f6cc7dfea4924f6a6219fdcc884099b205facd3" translate="yes" xml:space="preserve">
          <source>The angle brackets are not part of the output.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02b28169e15cc757faf58d8d2c3806f6119e98d6" translate="yes" xml:space="preserve">
          <source>The angle of rotation for the displayed text, measured in degrees.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="361b36c20d35c73ded357bfbc31bc571f95f9fa9" translate="yes" xml:space="preserve">
          <source>The answer is reasonably close to the exact value of 1. Ordinary quadrature is sensitive to the characteristics of the integrand. Empirical integration depends not just on the integrand, but also on the particular points chosen to represent the function. Repeating the example above with the sine function over the range [0, pi/2) produces far inferior results.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ec676e28ba9dee3356feae6724a761f16751f30" translate="yes" xml:space="preserve">
          <source>The appearance of contour lines can be defined with a line style &lt;var&gt;style&lt;/var&gt; in the same manner as &lt;code&gt;plot&lt;/code&gt;. Only line style and color are used; Any markers defined by &lt;var&gt;style&lt;/var&gt; are ignored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf146a5cae78f16f459fd50743efc79317ce8755" translate="yes" xml:space="preserve">
          <source>The appearance of the waitbar figure window can be configured by passing &lt;var&gt;prop&lt;/var&gt;/&lt;var&gt;val&lt;/var&gt; pairs to the function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b874fc920d3474422ea76b9b6c2223ce9b8c7dbf" translate="yes" xml:space="preserve">
          <source>The appropriate sparsity preserving permutation of the original matrix is given by &lt;em&gt;symamd&lt;/em&gt; and the factorization using this reordering can be visualized using the command &lt;code&gt;q = symamd (A);
r = chol (A(q,q)); spy (r)&lt;/code&gt;. This gives 399 nonzero terms which is a significant improvement.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="afd47f2ba007fa99fda788fb0ba69999495eb6ac" translate="yes" xml:space="preserve">
          <source>The argument &lt;var&gt;arg&lt;/var&gt; must be a cell array of character strings or a character array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c68254f3e0f825d9fc96cef2fcb781c49cf6ce4" translate="yes" xml:space="preserve">
          <source>The argument &lt;var&gt;beta&lt;/var&gt; must be a scalar between -1 and 1, where a negative value darkens and a positive value brightens the colormap.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b06737a953c8856fa1bd9bf295ab428163fa73d" translate="yes" xml:space="preserve">
          <source>The argument &lt;var&gt;data&lt;/var&gt; is a matrix of values that are to be written to the file. The values are extracted in column-major order.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ce2d2cebea5aeeb57ba9976cfb51493c5d22b6e" translate="yes" xml:space="preserve">
          <source>The argument &lt;var&gt;file&lt;/var&gt; is passed through the &lt;code&gt;glob&lt;/code&gt; function and any files that match the wildcards in &lt;var&gt;file&lt;/var&gt; will be uploaded.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="780dccc6835007e78c627352ba430f598f3e005f" translate="yes" xml:space="preserve">
          <source>The argument &lt;var&gt;limits&lt;/var&gt; should be a 2-, 4-, 6-, or 8-element vector. The first and second elements specify the lower and upper limits for the x-axis. The third and fourth specify the limits for the y-axis, the fifth and sixth specify the limits for the z-axis, and the seventh and eighth specify the limits for the color axis. The special values -Inf and Inf may be used to indicate that the limit should be automatically computed based on the data in the axes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f31e4181e426daa12a183db20add4a52c7053b6b" translate="yes" xml:space="preserve">
          <source>The argument &lt;var&gt;n&lt;/var&gt; must be a scalar. If unspecified, the length of the current colormap, or 64, is used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8afd65a81b20049215f94f590c35f99ed9be7e1a" translate="yes" xml:space="preserve">
          <source>The argument &lt;var&gt;nzmax&lt;/var&gt; is ignored but accepted for compatibility with &lt;small&gt;MATLAB&lt;/small&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1050bad88ce8793141ccb7077dd52291e5732705" translate="yes" xml:space="preserve">
          <source>The argument &lt;var&gt;opt&lt;/var&gt; determines the type of normalization to use. Valid values are</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a789c6f02a6aa50045fb91414a3cd5cdba7a739e" translate="yes" xml:space="preserve">
          <source>The argument &lt;var&gt;sigma&lt;/var&gt; determines which eigenvalues are returned. &lt;var&gt;sigma&lt;/var&gt; can be either a scalar or a string. When &lt;var&gt;sigma&lt;/var&gt; is a scalar, the &lt;var&gt;k&lt;/var&gt; eigenvalues closest to &lt;var&gt;sigma&lt;/var&gt; are returned. If &lt;var&gt;sigma&lt;/var&gt; is a string, it must have one of the following values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b66e28e6d60a7ea66d070c624f6f13f2f86d603" translate="yes" xml:space="preserve">
          <source>The argument &lt;var&gt;sigma&lt;/var&gt; specifies which singular values to find. When &lt;var&gt;sigma&lt;/var&gt; is the string &lt;code&gt;'L'&lt;/code&gt;, the default, the largest singular values of &lt;var&gt;A&lt;/var&gt; are found. Otherwise, &lt;var&gt;sigma&lt;/var&gt; must be a real scalar and the singular values closest to &lt;var&gt;sigma&lt;/var&gt; are found. As a corollary, &lt;code&gt;&lt;var&gt;sigma&lt;/var&gt; = 0&lt;/code&gt; finds the smallest singular values. Note that for relatively small values of &lt;var&gt;sigma&lt;/var&gt;, there is a chance that the requested number of singular values will not be found. In that case &lt;var&gt;sigma&lt;/var&gt; should be increased.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1841c5371d7a731d868ea48cd634b5ae54777f90" translate="yes" xml:space="preserve">
          <source>The argument &lt;var&gt;x&lt;/var&gt; must be a square matrix.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6e233cbce9ae2a239c1fb5cf4351bde02b681d2" translate="yes" xml:space="preserve">
          <source>The argument may be either &lt;code&gt;&quot;on&quot;&lt;/code&gt; or &lt;code&gt;&quot;off&quot;&lt;/code&gt;. If it is omitted, the current box state is toggled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b59ba25b7f9db29f6bbe0ee7a4a363eb23285d7" translate="yes" xml:space="preserve">
          <source>The arguments &lt;var&gt;file&lt;/var&gt; and &lt;var&gt;dir&lt;/var&gt; can include wildcards and any files or directories on the remote server that match will be downloaded.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5343db81382c966b7a973b590494cca44fc505d7" translate="yes" xml:space="preserve">
          <source>The arguments &lt;var&gt;freq&lt;/var&gt; and &lt;var&gt;ampl&lt;/var&gt; may be vectors of common size.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5070faf3ed2c27b9bd2c04fde84d386f59ff54eb" translate="yes" xml:space="preserve">
          <source>The arguments &lt;var&gt;n&lt;/var&gt; and &lt;var&gt;-completenames&lt;/var&gt; can be both specified in any order.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d38e4c2382b62786a0c57b156b010124db18451e" translate="yes" xml:space="preserve">
          <source>The arguments &lt;var&gt;x1&lt;/var&gt; and &lt;var&gt;y1&lt;/var&gt; define the arguments for the first plot and &lt;var&gt;x1&lt;/var&gt; and &lt;var&gt;y2&lt;/var&gt; for the second.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c7f9bd9a00106459fadcf60cf8125433d863ff7" translate="yes" xml:space="preserve">
          <source>The arguments &lt;var&gt;x&lt;/var&gt; and &lt;var&gt;y&lt;/var&gt; may be vectors or matrices. If only one argument is given, it is taken as a vector of Y values and the X coordinates are taken to be the indices of the elements (&lt;code&gt;&lt;var&gt;x&lt;/var&gt; = 1:numel (&lt;var&gt;y&lt;/var&gt;)&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c82f37d59e974f1d97bf9db5397490c1426ced1d" translate="yes" xml:space="preserve">
          <source>The arguments are handled the same as the arguments for &lt;code&gt;eye&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0800d8bc134eea27f50677f7805fb113b02be388" translate="yes" xml:space="preserve">
          <source>The arguments are handled the same as the arguments for &lt;code&gt;rand&lt;/code&gt;, except for the argument &lt;var&gt;a&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1055ad4da159cdc6c9089435fe8e9ceedeac8926" translate="yes" xml:space="preserve">
          <source>The arguments are handled the same as the arguments for &lt;code&gt;rand&lt;/code&gt;, except for the argument &lt;var&gt;l&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8933d94c0342f0587d3fbb812364c1d4946cad9d" translate="yes" xml:space="preserve">
          <source>The arguments are handled the same as the arguments for &lt;code&gt;rand&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="249618cc1b12f965d6e1d2eb80186b7cf3a145e4" translate="yes" xml:space="preserve">
          <source>The arguments to all of Octave&amp;rsquo;s bitwise operations can be scalar or arrays, except for &lt;code&gt;bitcmp&lt;/code&gt;, whose &lt;var&gt;k&lt;/var&gt; argument must a scalar. In the case where more than one argument is an array, then all arguments must have the same shape, and the bitwise operator is applied to each of the elements of the argument individually. If at least one argument is a scalar and one an array, then the scalar argument is duplicated. Therefore</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1a3814100a8ea1f1fceb0bbdbd315046b973750" translate="yes" xml:space="preserve">
          <source>The arguments which follow &lt;var&gt;x0&lt;/var&gt; are treated as parameters, and passed in a proper way to any of the functions (&lt;var&gt;A&lt;/var&gt; or &lt;var&gt;M&lt;/var&gt; or &lt;var&gt;M1&lt;/var&gt; or &lt;var&gt;M2&lt;/var&gt;) which are passed to &lt;code&gt;gmres&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2748d7c8b10909fbce9422c8ec630df7c6d40e46" translate="yes" xml:space="preserve">
          <source>The arguments which follow &lt;var&gt;x0&lt;/var&gt; are treated as parameters, and passed in a proper way to any of the functions (&lt;var&gt;A&lt;/var&gt; or &lt;var&gt;M&lt;/var&gt;) which are passed to &lt;code&gt;bicstab&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2379d0822fe8e575f31ac57a988c8c00aaf2c56" translate="yes" xml:space="preserve">
          <source>The arguments which follow &lt;var&gt;x0&lt;/var&gt; are treated as parameters, and passed in a proper way to any of the functions (&lt;var&gt;A&lt;/var&gt; or &lt;var&gt;M&lt;/var&gt;) which are passed to &lt;code&gt;tfqmr&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6aeb4a297fa092c4cb8e09e2cc614fc8b75721e6" translate="yes" xml:space="preserve">
          <source>The arguments which follow &lt;var&gt;x0&lt;/var&gt; are treated as parameters, and passed in a proper way to any of the functions (&lt;var&gt;A&lt;/var&gt; or &lt;var&gt;P&lt;/var&gt;) which are passed to &lt;code&gt;cgs&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47d9d4024a010d679a8dadfc11a11c1bdeb4aec5" translate="yes" xml:space="preserve">
          <source>The arguments which follow &lt;var&gt;x0&lt;/var&gt; are treated as parameters, and passed in a proper way to any of the functions (&lt;var&gt;A&lt;/var&gt; or &lt;var&gt;m&lt;/var&gt;) which are passed to &lt;code&gt;pcr&lt;/code&gt;. See the examples below for further details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77b697f312551fb36898401ffc4868aa51dc7362" translate="yes" xml:space="preserve">
          <source>The arguments which follow &lt;var&gt;x0&lt;/var&gt; are treated as parameters, and passed in an appropriate manner to any of the functions (&lt;var&gt;A&lt;/var&gt; or &lt;var&gt;m1&lt;/var&gt; or &lt;var&gt;m2&lt;/var&gt;) that have been given to &lt;code&gt;pcg&lt;/code&gt;. See the examples below for further details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b9425b160d1b6541e12153d1f97c88e4e390757" translate="yes" xml:space="preserve">
          <source>The arrow representing each vector has one end at the origin and the tip at [&lt;var&gt;u&lt;/var&gt;(i), &lt;var&gt;v&lt;/var&gt;(i)]. If a single complex argument &lt;var&gt;z&lt;/var&gt; is given, then &lt;code&gt;&lt;var&gt;u&lt;/var&gt; = real (&lt;var&gt;z&lt;/var&gt;)&lt;/code&gt; and &lt;code&gt;&lt;var&gt;v&lt;/var&gt; = imag (&lt;var&gt;z&lt;/var&gt;)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0df007680c3d602ac5c8891896cddd0b11ddb38" translate="yes" xml:space="preserve">
          <source>The aspect ratio is a normalized 3-element vector representing the rendered lengths of the x, y, and z axes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="377e27afbcbd0c17bb4c7b199f1d61835c17a25a" translate="yes" xml:space="preserve">
          <source>The aspect ratio is a normalized 3-element vector representing the span of the x, y, and z-axis limits.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3fd47be953618f33c106ed342cba9c9461111a9" translate="yes" xml:space="preserve">
          <source>The assignment expression in the &lt;code&gt;for&lt;/code&gt; statement works a bit differently than Octave&amp;rsquo;s normal assignment statement. Instead of assigning the complete result of the expression, it assigns each column of the expression to &lt;var&gt;var&lt;/var&gt; in turn. If &lt;var&gt;expression&lt;/var&gt; is a range, a row vector, or a scalar, the value of &lt;var&gt;var&lt;/var&gt; will be a scalar each time the loop body is executed. If &lt;var&gt;var&lt;/var&gt; is a column vector or a matrix, &lt;var&gt;var&lt;/var&gt; will be a column vector each time the loop body is executed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26b55e3e80661aedee6afd6bf9bf7fa5199a6bc3" translate="yes" xml:space="preserve">
          <source>The associated Legendre function of degree &lt;var&gt;n&lt;/var&gt; and order &lt;var&gt;m&lt;/var&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ce81e7ea3269a2feef392f41d18b66d5260aae8" translate="yes" xml:space="preserve">
          <source>The attempt has been made to make sparse matrices behave in exactly the same manner as there full counterparts. However, there are certain differences and especially differences with other products sparse implementations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11bdc99d3e9821843af771a553dc01634db7ef17" translate="yes" xml:space="preserve">
          <source>The attribute column displays &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="625929b613409ef8bd1ba57d2f97253ac6461e42" translate="yes" xml:space="preserve">
          <source>The audio data is stored as matrix with rows corresponding to audio frames and columns corresponding to channels.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53121bc5d1d83a95d67fea155cef9ac14a2bdff3" translate="yes" xml:space="preserve">
          <source>The audio signal &lt;var&gt;y&lt;/var&gt; can be a vector or a two-column array, representing mono or stereo audio, respectively.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4887d0d7972f558759ae0439cfcc5c73984cc8ce" translate="yes" xml:space="preserve">
          <source>The author of the code itself is Timothy A. Davis (see &lt;a href=&quot;http://faculty.cse.tamu.edu/davis/suitesparse.html&quot;&gt;http://faculty.cse.tamu.edu/davis/suitesparse.html&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9c3b7210f1fd5f36d386ae4e6b469e4bdebf195" translate="yes" xml:space="preserve">
          <source>The authors of the code itself are S. Larimore, T. Davis and S. Rajamanickam in collaboration with J. Bilbert and E. Ng. Supported by the National Science Foundation (DMS-9504974, DMS-9803599, CCR-0203270), and a grant from Sandia National Lab. See &lt;a href=&quot;http://faculty.cse.tamu.edu/davis/suitesparse.html&quot;&gt;http://faculty.cse.tamu.edu/davis/suitesparse.html&lt;/a&gt; for ccolamd, colamd, csymamd, amd, colamd, symamd, and other related orderings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05ad688454e30ebbc659f3baf8a6135c5a477079" translate="yes" xml:space="preserve">
          <source>The authors of the code itself are S. Larimore, T. Davis and S. Rajamanickam in collaboration with J. Bilbert and E. Ng. Supported by the National Science Foundation (DMS-9504974, DMS-9803599, CCR-0203270), and a grant from Sandia National Lab. See &lt;a href=&quot;http://faculty.cse.tamu.edu/davis/suitesparse.html&quot;&gt;http://faculty.cse.tamu.edu/davis/suitesparse.html&lt;/a&gt; for ccolamd, csymamd, amd, colamd, symamd, and other related orderings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28fa8131680138cafedaadede4e5d2099a9c9ce6" translate="yes" xml:space="preserve">
          <source>The authors of the code itself are Stefan I. Larimore and Timothy A. Davis. The algorithm was developed in collaboration with John Gilbert, Xerox PARC, and Esmond Ng, Oak Ridge National Laboratory. (see &lt;a href=&quot;http://faculty.cse.tamu.edu/davis/suitesparse.html&quot;&gt;http://faculty.cse.tamu.edu/davis/suitesparse.html&lt;/a&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af7702adc397096490d8fc24c84b211efdca6907" translate="yes" xml:space="preserve">
          <source>The available hash functions are given in the table below.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc2a7b3f6725c23404733e81ea413b19524e084c" translate="yes" xml:space="preserve">
          <source>The available methods of a class can be displayed with the &lt;code&gt;methods&lt;/code&gt; function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2247e4d5f26da3e32dea1ebc4fadd574562059f0" translate="yes" xml:space="preserve">
          <source>The available output format is specified by the option &lt;var&gt;device&lt;/var&gt;, and is one of the following (devices marked with a &quot;*&quot; are only available with the Gnuplot toolkit):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f27cf2809de7b55d43ba303da114353c5d9710e" translate="yes" xml:space="preserve">
          <source>The axes handles to be linked are passed as the first argument &lt;var&gt;hax&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ccb4475fda751c3b9db65148b5f02021fcbb0dd5" translate="yes" xml:space="preserve">
          <source>The axis function may be used to change the axis limits of an existing plot and various other axis properties, such as the aspect ratio and the appearance of tic marks. By default, high level plotting functions such as &lt;code&gt;plot&lt;/code&gt; reset axes properties. Any customization of properties, for example by calling &lt;code&gt;axis&lt;/code&gt;, &lt;code&gt;xlim&lt;/code&gt;, etc., should happen after the plot is done or, alternatively, after calling the &lt;a href=&quot;manipulation-of-plot-windows#XREFhold&quot;&gt;hold function&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2caf690d5d47f462a836b9179fc1a9fc36059fdd" translate="yes" xml:space="preserve">
          <source>The axis to apply the ticks to is determined by &lt;var&gt;axis_str&lt;/var&gt; which can take the values &lt;code&gt;&quot;x&quot;&lt;/code&gt;, &lt;code&gt;&quot;y&quot;&lt;/code&gt;, or &lt;code&gt;&quot;z&quot;&lt;/code&gt;. The default value is &lt;code&gt;&quot;x&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ad1ccda30445ef53229c7a746b24e930603abf3" translate="yes" xml:space="preserve">
          <source>The band density is defined as the number of nonzero values in the band divided by the total number of values in the full band. The banded matrix solvers can be entirely disabled by using &lt;em&gt;spparms&lt;/em&gt; to set &lt;code&gt;bandden&lt;/code&gt; to 1 (i.e., &lt;code&gt;spparms (&quot;bandden&quot;, 1)&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da46b79fd607ad6d62ad1d25505ec833dd2624d1" translate="yes" xml:space="preserve">
          <source>The base name of the currently executing script or function is returned without any extension. If called from outside an m-file, such as the command line, return the empty string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="393fee1557c1e1e92e2d67445f573c603ef3750e" translate="yes" xml:space="preserve">
          <source>The basename of the current working directory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff6e2b3414144544a6805b3c49657af102d25f63" translate="yes" xml:space="preserve">
          <source>The basic callback functions that are available for all graphics objects are</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a029b4985f8ec4dc3f21cb59cf85f8bfd82f91f5" translate="yes" xml:space="preserve">
          <source>The basic command to build a mex-file is either &lt;code&gt;mkoctfile --mex&lt;/code&gt; or &lt;code&gt;mex&lt;/code&gt;. The first command can be used either from within Octave or from the command line. To avoid issues with &lt;small&gt;MATLAB&lt;/small&gt;&amp;rsquo;s own &lt;code&gt;mex&lt;/code&gt; command, the use of the command &lt;code&gt;mex&lt;/code&gt; is limited to within Octave. Compiled mex-files have the extension</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d3f2f8230721a85ff84ea9c74025299bc00dbc1" translate="yes" xml:space="preserve">
          <source>The basic function to access the data in an array is &lt;code&gt;mxGetPr&lt;/code&gt;. Because the mex interface assumes that real and imaginary parts of a complex array are stored separately, there is an equivalent function &lt;code&gt;mxGetPi&lt;/code&gt; that gets the imaginary part. Both of these functions are only for use with double precision matrices. The generic functions &lt;code&gt;mxGetData&lt;/code&gt; and &lt;code&gt;mxGetImagData&lt;/code&gt; perform the same operation for all matrix types. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="771c44628f15e094363bd945e9110f939f6a1c30" translate="yes" xml:space="preserve">
          <source>The basic function to create a structure in a mex-file is &lt;code&gt;mxCreateStructMatrix&lt;/code&gt; which creates a structure array with a two dimensional matrix, or &lt;code&gt;mxCreateStructArray&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3992ad45fc3f8606fd1a27b0993886efa03419b" translate="yes" xml:space="preserve">
          <source>The basic logical operations are &lt;code&gt;&amp;amp;&lt;/code&gt;, &lt;code&gt;|&lt;/code&gt;, and &lt;code&gt;!&lt;/code&gt;, which correspond to &amp;ldquo;Logical And&amp;rdquo;, &amp;ldquo;Logical Or&amp;rdquo;, and &amp;ldquo;Logical Negation&amp;rdquo;. These operations all follow the usual rules of logic.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8a937c0a03f0051531e14298494283dbc08c4e7" translate="yes" xml:space="preserve">
          <source>The basic mex type of all variables is &lt;code&gt;mxArray&lt;/code&gt;. Any object, such as a matrix, cell array, or structure, is stored in this basic type. &lt;code&gt;mxArray&lt;/code&gt; serves essentially the same purpose as the &lt;code&gt;octave_value&lt;/code&gt; class in oct-files in that it acts as a container for all the more specialized types.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc66e6e5ced46fca4ed644917a4fde9d6ab6de94" translate="yes" xml:space="preserve">
          <source>The basic properties of such group objects is that they consist of one or more linked &lt;code&gt;hggroup&lt;/code&gt;, and that changes in certain properties of these groups are propagated to other members of the group. Whereas, certain properties of the members of the group only apply to the current member.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69db7f0fa7d3978110262685c033cfeb6d3fdb45" translate="yes" xml:space="preserve">
          <source>The behavior is controlled by &lt;var&gt;op&lt;/var&gt; which can take the following values</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17f1dbe80742fcbdc36e5d4ec9591543c3c0362b" translate="yes" xml:space="preserve">
          <source>The behavior of &lt;code&gt;fwrite&lt;/code&gt; is undefined if the values in &lt;var&gt;data&lt;/var&gt; are too large to fit in the specified precision.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="745ee57f2718ee9d74f11af3e3bcbb6fc59f5dca" translate="yes" xml:space="preserve">
          <source>The behavior of &lt;code&gt;strread&lt;/code&gt; can be changed via property-value pairs. The following properties are recognized:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dfcd5fa6f103b6640c6c301ab5e9ef2e1de4ee2d" translate="yes" xml:space="preserve">
          <source>The behavior of &lt;code&gt;textscan&lt;/code&gt; can be changed via property/value pairs. The following properties are recognized:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="009acd1a7bf984720f440a9f45de8e7f48211e4f" translate="yes" xml:space="preserve">
          <source>The behavior of persistent variables is equivalent to the behavior of static variables in C.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6163f173ffb18fe9c31cc39eb1269b32af13e23d" translate="yes" xml:space="preserve">
          <source>The best quadrature algorithm to use depends on the integrand. If you have empirical data, rather than a function, the choice is &lt;code&gt;trapz&lt;/code&gt; or &lt;code&gt;cumtrapz&lt;/code&gt;. If you are uncertain about the characteristics of the integrand, &lt;code&gt;quadcc&lt;/code&gt; will be the most robust as it can handle discontinuities, singularities, oscillatory functions, and infinite intervals. When the integrand is smooth &lt;code&gt;quadgk&lt;/code&gt; may be the fastest of the algorithms.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80243ff586c2a604f6444945cc0b95461a2ed4e8" translate="yes" xml:space="preserve">
          <source>The bias-corrected kurtosis coefficient is obtained by replacing the sample second and fourth central moments by their unbiased versions. It is an unbiased estimate of the population kurtosis for normal populations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb34b10f5d3e29d5305b9c0ca7f7219108e01c07" translate="yes" xml:space="preserve">
          <source>The binomial coefficient is defined as</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a213a74d761b60ea9680992b80f3b58405dfbe7" translate="yes" xml:space="preserve">
          <source>The bit depth of the image determines the class of the output: &lt;code&gt;&quot;uint8&quot;&lt;/code&gt;, &lt;code&gt;&quot;uint16&quot;&lt;/code&gt;, or &lt;code&gt;&quot;single&quot;&lt;/code&gt; for grayscale and color, and &lt;code&gt;&quot;logical&quot;&lt;/code&gt; for black-and-white. Note that indexed images always return the indexes for a colormap, independent of whether &lt;var&gt;map&lt;/var&gt; is a requested output. To obtain the actual RGB image, use &lt;code&gt;ind2rgb&lt;/code&gt;. When more than one indexed image is being read, &lt;var&gt;map&lt;/var&gt; is obtained from the first. In some rare cases this may be incorrect and &lt;code&gt;imfinfo&lt;/code&gt; can be used to obtain the colormap of each image.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2dfd85bd8cfe9aed6985cde9f061694d24d9f11c" translate="yes" xml:space="preserve">
          <source>The bitwise &amp;rsquo;not&amp;rsquo; operator is a unary operator that performs a logical negation of each of the bits of the value. For this to make sense, the mask against which the value is negated must be defined. Octave&amp;rsquo;s bitwise &amp;rsquo;not&amp;rsquo; operator is &lt;code&gt;bitcmp&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4eff4b570777932360eeab761803b81ff427b25" translate="yes" xml:space="preserve">
          <source>The block Krylov subspace has the following form:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5d04248cd249281b6fb86fc78462606df6869ad" translate="yes" xml:space="preserve">
          <source>The block comment markers must appear alone as the only characters on a line (excepting whitespace) in order to be parsed correctly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="442026b26ff59c32f2a2f6aab837d5b3dd985054" translate="yes" xml:space="preserve">
          <source>The blocks are given as 2-dimensional subarrays of the arrays &lt;var&gt;A&lt;/var&gt;, &lt;var&gt;B&lt;/var&gt;. The size of &lt;var&gt;A&lt;/var&gt; must have the form &lt;code&gt;[m,k,&amp;hellip;]&lt;/code&gt; and size of &lt;var&gt;B&lt;/var&gt; must be &lt;code&gt;[k,n,&amp;hellip;]&lt;/code&gt;. The result is then of size &lt;code&gt;[m,n,&amp;hellip;]&lt;/code&gt; and is computed as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a5e7c3679044e2205016beae5fb712a4eccd5c3" translate="yes" xml:space="preserve">
          <source>The body of a user-defined function can contain a &lt;code&gt;return&lt;/code&gt; statement. This statement returns control to the rest of the Octave program. It looks like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="504052d368b9bdd6a6a2dc3d60593f966584f3ec" translate="yes" xml:space="preserve">
          <source>The bounds are a quickly computed measure of the dispersion of a data set, but are less accurate than &lt;code&gt;iqr&lt;/code&gt; if there are outlying data points.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a67566a039d982f0674019db9518d57bc84b327c" translate="yes" xml:space="preserve">
          <source>The break Statement</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ea57a682ac93dd2039b8da2bf6c0b5753aa71ae" translate="yes" xml:space="preserve">
          <source>The built-in variable &lt;code&gt;max_recursion_depth&lt;/code&gt; specifies a limit to the recursion depth and prevents Octave from recursing infinitely. Similarly, the variable &lt;code&gt;max_stack_depth&lt;/code&gt; specifies a limit to the depth of function calls, whether recursive or not. These limits help prevent stack overflow on the computer Octave is running on, so that instead of exiting with a signal, the interpreter will throw an error and return to the command prompt.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d1917567fc1069030daf5ac29a3078e7ddb5260" translate="yes" xml:space="preserve">
          <source>The cache is saved in the file &lt;var&gt;out_file&lt;/var&gt; which defaults to the value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35c73b20b4212f33c43a9be7e2b6b771406dabe4" translate="yes" xml:space="preserve">
          <source>The calculation can be controlled by specifying &lt;var&gt;property&lt;/var&gt;/&lt;var&gt;value&lt;/var&gt; pairs. Valid properties are</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1cc562bef5ae58a5e85bc55a67aef6fec0410e87" translate="yes" xml:space="preserve">
          <source>The call &lt;code&gt;view (2)&lt;/code&gt; sets the viewpoint to &lt;var&gt;azimuth&lt;/var&gt; = 0 and &lt;var&gt;elevation&lt;/var&gt; = 90, which is the default for 2-D graphs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cda8c7229b583fce795b5cbe88d120f5a495250f" translate="yes" xml:space="preserve">
          <source>The call &lt;code&gt;view (3)&lt;/code&gt; sets the viewpoint to &lt;var&gt;azimuth&lt;/var&gt; = -37.5 and &lt;var&gt;elevation&lt;/var&gt; = 30, which is the default for 3-D graphs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11bd76a290eb2e35438bf108a0c23df4f0fa9edd" translate="yes" xml:space="preserve">
          <source>The call to &lt;code&gt;fork&lt;/code&gt; failed for some reason. You must take evasive action. A system dependent error message will be waiting in &lt;var&gt;msg&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7436cb1d6b7c236bdc2b55bad14930e48a642d66" translate="yes" xml:space="preserve">
          <source>The caller may use a variable as the expression for the argument, but the called function does not know this: it only knows what value the argument had. For example, given a function called as</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71decec5987ac8cfd2a62e0822d485ce9334043f" translate="yes" xml:space="preserve">
          <source>The camera has a viewing angle which determines how much can be seen. By default this is:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d0e49603795d4353ce000d603ca1fcdc7b49a34" translate="yes" xml:space="preserve">
          <source>The camera target is a point in space where the camera is pointing. Usually, it is determined automatically based on the scene:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b1b66e4066f97671c97989c4f8de1c354e46ce0" translate="yes" xml:space="preserve">
          <source>The cell array &lt;var&gt;c&lt;/var&gt; contains all of the elements with the maximum frequency.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43cb47408b6a935d48324baaf158a298b1987f08" translate="yes" xml:space="preserve">
          <source>The character vector &lt;var&gt;utf8_str&lt;/var&gt; is converted to a byte stream &lt;var&gt;native_bytes&lt;/var&gt; using the code page given by &lt;var&gt;codepage&lt;/var&gt;. The string &lt;var&gt;codepage&lt;/var&gt; must be an identifier of a valid code page. Examples for valid code pages are &lt;code&gt;&quot;ISO-8859-1&quot;&lt;/code&gt;, &lt;code&gt;&quot;Shift-JIS&quot;&lt;/code&gt;, or &lt;code&gt;&quot;UTF-16&quot;&lt;/code&gt;. For a list of supported code pages, see &lt;a href=&quot;https://www.gnu.org/software/libiconv&quot;&gt;https://www.gnu.org/software/libiconv&lt;/a&gt;. If &lt;var&gt;codepage&lt;/var&gt; is omitted or empty, the system default codepage is used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d36ae78c385b5b70cf3ea86fde5d17bedb97c68" translate="yes" xml:space="preserve">
          <source>The character whose character code in octal is &lt;var&gt;nnn&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5bf4aaed5c23a8acf1fa9b0ff78ecf62ce34ecc7" translate="yes" xml:space="preserve">
          <source>The character(s) to separate each row. Three special cases exist for this option. &lt;code&gt;&quot;unix&quot;&lt;/code&gt; is changed into &lt;code&gt;&quot;\n&quot;&lt;/code&gt;, &lt;code&gt;&quot;pc&quot;&lt;/code&gt; is changed into &lt;code&gt;&quot;\r\n&quot;&lt;/code&gt;, and &lt;code&gt;&quot;mac&quot;&lt;/code&gt; is changed into &lt;code&gt;&quot;\r&quot;&lt;/code&gt;. Any other value is used directly as the newline separator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="194b388657037795013e2f0e1a59cfc1d0b2434f" translate="yes" xml:space="preserve">
          <source>The characters &lt;code&gt;$.?[]&lt;/code&gt;, that have special meaning for regular expressions are escaped so that they are treated literally. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11de6006f7b993ff5380f571d82b142d3875ad3e" translate="yes" xml:space="preserve">
          <source>The characters read, excluding the possible trailing newline, are returned as a string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e67d376c3ca3d9d97289b8eb4f514126ecc8f12" translate="yes" xml:space="preserve">
          <source>The characters read, including the possible trailing newline, are returned as a string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e99e0503019b64c4143d052b9cec9b8a213ffa93" translate="yes" xml:space="preserve">
          <source>The class of the value returned can be controlled by a trailing &lt;code&gt;&quot;double&quot;&lt;/code&gt; or &lt;code&gt;&quot;single&quot;&lt;/code&gt; argument. These are the only valid classes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e8120275b18afe47be61d3696b6409a986f0ca1" translate="yes" xml:space="preserve">
          <source>The class of the variable. Examples include double, single, char, uint16, cell, and struct.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ce96a2bf7da67f84405505b2c42861c01b372a3" translate="yes" xml:space="preserve">
          <source>The code below demonstrates all four methods of passing a function to an oct-file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc11fe48539d1110fa36dcd1f3ba82f2c66012bb" translate="yes" xml:space="preserve">
          <source>The code expression to evaluate.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65a0669c341a54ed4cf94b05e81d6586808a2910" translate="yes" xml:space="preserve">
          <source>The color argument &lt;var&gt;c&lt;/var&gt; can take many forms. To create polygons which all share a single color use a string value (e.g., &lt;code&gt;&quot;r&quot;&lt;/code&gt; for red), a scalar value which is scaled by &lt;code&gt;caxis&lt;/code&gt; and indexed into the current colormap, or a 3-element RGB vector with the precise TrueColor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5b772ce0bc2661138a49c7b94ade1bc2d92c799" translate="yes" xml:space="preserve">
          <source>The color data for the points of the plot. Each point can have a separate color, or a unique color can be specified.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3260c82b824bbc949b022077c8ff18ebbd64992d" translate="yes" xml:space="preserve">
          <source>The color of the bars is taken from the figure&amp;rsquo;s colormap, such that</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc9fb27cff24d75bd6b746a15281622f665f5a91" translate="yes" xml:space="preserve">
          <source>The color of the edge around the marker, or &lt;code&gt;&quot;auto&quot;&lt;/code&gt;, meaning that the edge color is the same as the face color. See &lt;a href=&quot;colors#Colors&quot;&gt;Colors&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b9b873cea99cd5c5f17c21ec4d6af98c8918801" translate="yes" xml:space="preserve">
          <source>The color of the marker, or &lt;code&gt;&quot;none&quot;&lt;/code&gt; to indicate that the marker should not be filled. See &lt;a href=&quot;colors#Colors&quot;&gt;Colors&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bee954d4627870a0846e6a506817c82873b344e1" translate="yes" xml:space="preserve">
          <source>The color of the markers is determined by &lt;var&gt;c&lt;/var&gt;, which can be a string defining a fixed color; a 3-element vector giving the red, green, and blue components of the color; a vector of the same length as &lt;var&gt;x&lt;/var&gt; that gives a scaled index into the current colormap; or an Nx3 matrix defining the RGB color of each marker individually.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc69bc22b94caf9fa4fea72f6225e3873d20973e" translate="yes" xml:space="preserve">
          <source>The color of the mesh is computed by linearly scaling the &lt;var&gt;z&lt;/var&gt; values to fit the range of the current colormap. Use &lt;code&gt;caxis&lt;/code&gt; and/or change the colormap to control the appearance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4e7dba8f0e15fcb5e31cb32d8b7a5e04bd9bea8" translate="yes" xml:space="preserve">
          <source>The color of the stem, and if not separately specified, the marker. (Default: &lt;code&gt;&quot;b&quot;&lt;/code&gt; [blue])</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9c64cef14db4b651e28efce06acd03b632197e4" translate="yes" xml:space="preserve">
          <source>The color of the surface is computed by linearly scaling the &lt;var&gt;z&lt;/var&gt; values to fit the range of the current colormap. Use &lt;code&gt;caxis&lt;/code&gt; and/or change the colormap to control the appearance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f0c6144f9e47008ab283bbbc921ef0e90b5740b" translate="yes" xml:space="preserve">
          <source>The color of the text may also be changed inline using either a string (e.g., &quot;red&quot;) or numerically with a Red-Green-Blue (RGB) specification (e.g., [1 0 0], also red).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cdb971446ad08ce768931892edbb26ff3898eadd" translate="yes" xml:space="preserve">
          <source>The color of the trimesh is computed by linearly scaling the &lt;var&gt;z&lt;/var&gt; values to fit the range of the current colormap. Use &lt;code&gt;caxis&lt;/code&gt; and/or change the colormap to control the appearance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e48e4ab5baf36d1f7ea7cdbcd3688a7bf88e3ea" translate="yes" xml:space="preserve">
          <source>The color of the trisurf is computed by linearly scaling the &lt;var&gt;z&lt;/var&gt; values to fit the range of the current colormap. Use &lt;code&gt;caxis&lt;/code&gt; and/or change the colormap to control the appearance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98ba97c21e15c647b69250cedae7c0fcea5aec65" translate="yes" xml:space="preserve">
          <source>The color to use for &quot;filling&quot; the marker. (Default: &lt;code&gt;&quot;none&quot;&lt;/code&gt; [unfilled])</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66e2f2434f084f0d56756eeb409ebae56b404d50" translate="yes" xml:space="preserve">
          <source>The colormap is scaled so that the entries of the matrix occupy the entire colormap. If &lt;code&gt;&lt;var&gt;climits&lt;/var&gt; = [&lt;var&gt;lo&lt;/var&gt;, &lt;var&gt;hi&lt;/var&gt;]&lt;/code&gt; is given, then that range is set to the &lt;code&gt;&quot;clim&quot;&lt;/code&gt; of the current axes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80c93642ad25e73ec356c4d75026da74cd760bfc" translate="yes" xml:space="preserve">
          <source>The column number of the line where the breakpoint begins.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="062e4ea98a9662fe6dca5fb34a40a037aa606eb5" translate="yes" xml:space="preserve">
          <source>The command</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0607fd6335742c75395983adac90ba961676acb6" translate="yes" xml:space="preserve">
          <source>The command arguments you gave Octave to execute that example and observe the bug. To guarantee you won&amp;rsquo;t omit something important, list all the options.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3de00998d840db79f7d30b3b978af2a928a76a68" translate="yes" xml:space="preserve">
          <source>The command number of this command, counting from when Octave starts.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6528a73172930f3cfe2689af34f027a2635e345c" translate="yes" xml:space="preserve">
          <source>The command-line arguments you gave to the &lt;code&gt;configure&lt;/code&gt; command when you installed the interpreter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dfb5a735726c039f6c4ec86eb634ed4147548850" translate="yes" xml:space="preserve">
          <source>The commands to be edited are first copied to a temporary file. When you exit the editor, Octave executes the commands that remain in the file. It is often more convenient to use &lt;code&gt;edit_history&lt;/code&gt; to define functions rather than attempting to enter them directly on the command line. The block of commands is executed as soon as you exit the editor. To avoid executing any commands, simply delete all the lines from the buffer before leaving the editor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f21cf3116b739e8b91fd3f7feeebfe89842927d1" translate="yes" xml:space="preserve">
          <source>The companion matrix is</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dac581d03a568871589d3abe26776d9d6775547a" translate="yes" xml:space="preserve">
          <source>The complementary error function is defined as &lt;code&gt;1&amp;nbsp;-&amp;nbsp;erf&amp;nbsp;(&lt;var&gt;z&lt;/var&gt;)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d99fea8ecacd2ee7ee5058a0a62d8215a042d50c" translate="yes" xml:space="preserve">
          <source>The complex conjugate is defined as &lt;code&gt;conj (&lt;var&gt;z&lt;/var&gt;)&lt;/code&gt; = &lt;var&gt;x&lt;/var&gt; - &lt;var&gt;i&lt;/var&gt;&lt;var&gt;y&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="667eaa474631a33ef70e8086aebc51b82cc71149" translate="yes" xml:space="preserve">
          <source>The complexity is O(&lt;var&gt;n&lt;/var&gt;) in memory and O(&lt;var&gt;m&lt;/var&gt;) in time, unless &lt;var&gt;m&lt;/var&gt; &amp;lt; &lt;var&gt;n&lt;/var&gt;/5, in which case O(&lt;var&gt;m&lt;/var&gt;) memory is used as well. The randomization is performed using rand(). All permutations are equally likely.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9b2238b61fa3c48e71a14eae3eae989a8a5afb3" translate="yes" xml:space="preserve">
          <source>The complexity of accumarray in general for the non-sparse case is generally O(M+N), where N is the number of subscripts and M is the maximum subscript (linearized in multi-dimensional case). If &lt;var&gt;func&lt;/var&gt; is one of &lt;code&gt;@sum&lt;/code&gt; (default), &lt;code&gt;@max&lt;/code&gt;, &lt;code&gt;@min&lt;/code&gt; or &lt;code&gt;@(x) {x}&lt;/code&gt;, an optimized code path is used. Note that for general reduction function the interpreter overhead can play a major part and it may be more efficient to do multiple accumarray calls and compute the results in a vectorized manner.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4af71a3678164ab7d95dcdaf3d72d2387426e574" translate="yes" xml:space="preserve">
          <source>The complexity of the algorithm is O(n) in terms of is time and memory requirements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f63d9b46e62089155a1975a14121e346738c590e" translate="yes" xml:space="preserve">
          <source>The complexity of the algorithm is O(n) in terms of time and memory requirements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="142a28043b43014d6edf9988611ab856b16d47e2" translate="yes" xml:space="preserve">
          <source>The complexity of the lookup is O(M*log(N)) where M is the size of &lt;var&gt;y&lt;/var&gt;. In the special case when &lt;var&gt;y&lt;/var&gt; is also sorted, the complexity is O(min (M*log(N), M+N)).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa61429ec149d3ef8c02f5c956c0af899ef4a0c5" translate="yes" xml:space="preserve">
          <source>The components are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ecdb42a29a09af0fc0a6177a23f19c63dbc5da6" translate="yes" xml:space="preserve">
          <source>The computation uses the FFT by calling the function &lt;code&gt;fftfilt&lt;/code&gt;. If the optional argument &lt;var&gt;n&lt;/var&gt; is specified, an N-point FFT is used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0b5870cde4ea41e4f87a417e42e31df080d1efc" translate="yes" xml:space="preserve">
          <source>The condition in an &lt;code&gt;if&lt;/code&gt; statement is considered true if its value is nonzero, and false if its value is zero. If the value of the conditional expression in an &lt;code&gt;if&lt;/code&gt; statement is a vector or a matrix, it is considered true only if it is non-empty and &lt;em&gt;all&lt;/em&gt; of the elements are nonzero. The conceptually equivalent code when &lt;var&gt;condition&lt;/var&gt; is a matrix is shown below.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c300dd661a88b27a1af447b8d81ef160af981beb" translate="yes" xml:space="preserve">
          <source>The condition number of a matrix quantifies the sensitivity of the matrix inversion operation when small changes are made to matrix elements. Ideally the condition number will be close to 1. When the number is large this indicates small changes (such as underflow or round-off error) will produce large changes in the resulting output. In such cases the solution results from numerical computing are not likely to be accurate.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c0b6501ea60f59ea778b1a57cf4ed1ee50fc2b5" translate="yes" xml:space="preserve">
          <source>The condition numbers are the reciprocals of the cosines of the angles between the left and right eigenvectors; Large values indicate that the matrix has multiple distinct eigenvalues.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5304f1effe5e5e146e3c4421f811431227a2b8e0" translate="yes" xml:space="preserve">
          <source>The condition that must be satisfied for the breakpoint to be active, or the empty string for unconditional breakpoints.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a30c6451c33f87a6142045726ad50a2fd3591f2" translate="yes" xml:space="preserve">
          <source>The constant &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bdff90c9a0b850a9582bf8d85cee01be046226ef" translate="yes" xml:space="preserve">
          <source>The construction is made with Householder reflections to guard against loss of orthogonality.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="affd36f01ce3fe7f434380cf513d69d4b81fe3e4" translate="yes" xml:space="preserve">
          <source>The constructor for the class must be the name of the class itself; in this example the constructor resides in the file</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1fb200cd5b9bac39857aa9ee26151d0e25491cb" translate="yes" xml:space="preserve">
          <source>The constructor of the class is declared in the &lt;code&gt;methods&lt;/code&gt; block and must have the same name as the class and exactly one output argument which is an object of its class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e70d462143ea2f18cb6625bd9593f99bc7f6cfa" translate="yes" xml:space="preserve">
          <source>The continue Statement</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed539328d412715b66314811a136d389ae8f6657" translate="yes" xml:space="preserve">
          <source>The contour levels are specified by the contour matrix &lt;var&gt;c&lt;/var&gt; which is returned by &lt;code&gt;contour&lt;/code&gt;, &lt;code&gt;contourc&lt;/code&gt;, &lt;code&gt;contourf&lt;/code&gt;, and &lt;code&gt;contour3&lt;/code&gt;. Contour labels are rotated to match the local line orientation and centered on the line. The position of labels along the contour line is chosen randomly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18ee47f2d11d0187ac3ce0c7046e3cfd9a37d376" translate="yes" xml:space="preserve">
          <source>The conversion and repeat counts may be combined. For example, the specification &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e24af50380f5075021d24879ab18f03c165fd48" translate="yes" xml:space="preserve">
          <source>The conversion of &lt;var&gt;img&lt;/var&gt; to double precision, is dependent on the type of input image. The following input classes are supported:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e426bc9111064db425fc32d748dc584f58c42bd" translate="yes" xml:space="preserve">
          <source>The conversion specifications in a &lt;code&gt;printf&lt;/code&gt; template string have the general form:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b57bb6fbf8841c42d7a6b85fe160b5d9f1623479" translate="yes" xml:space="preserve">
          <source>The conversion specifications in a &lt;code&gt;scanf&lt;/code&gt; template string have the general form:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="304fdfb8df3c54dca2520a7c14ddd71ce81085ca" translate="yes" xml:space="preserve">
          <source>The conversion to an &lt;code&gt;octave_value&lt;/code&gt; is handled by the sparse &lt;code&gt;octave_value&lt;/code&gt; constructors, and so no special care is needed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e015cf49012677643ae34cdc223e3fde49423fc" translate="yes" xml:space="preserve">
          <source>The convex hull of a set of points is the minimum convex envelope containing all of the points. Octave has the functions &lt;code&gt;convhull&lt;/code&gt; and &lt;code&gt;convhulln&lt;/code&gt; to calculate the convex hull of 2-dimensional and N-dimensional sets of points.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c513307ad5296743bb23c0400d64a961f91d959" translate="yes" xml:space="preserve">
          <source>The coordinates of the vector field can be given by the arguments &lt;var&gt;x&lt;/var&gt;, &lt;var&gt;y&lt;/var&gt;, &lt;var&gt;z&lt;/var&gt; or &lt;var&gt;x&lt;/var&gt;, &lt;var&gt;y&lt;/var&gt; respectively.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2b132806ebbbe3c6c53b24bb8d79dbf6967e644" translate="yes" xml:space="preserve">
          <source>The coordinates of the vector field can be given by the arguments &lt;var&gt;x&lt;/var&gt;, &lt;var&gt;y&lt;/var&gt;, &lt;var&gt;z&lt;/var&gt; or &lt;var&gt;x&lt;/var&gt;, &lt;var&gt;y&lt;/var&gt; respectively. &lt;var&gt;v&lt;/var&gt; calculates the scalar component of the angular velocity vector in direction of the z-axis for two-dimensional input. For three-dimensional input the scalar rotation is calculated at each grid point in direction of the vector field at that point.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48370324c130af6a273d686bf38e2f593304a8fe" translate="yes" xml:space="preserve">
          <source>The corresponding default value &lt;var&gt;default&lt;/var&gt; may be any Octave value, .e.g., double, struct, cell array, object, etc. Or, if &lt;var&gt;pref&lt;/var&gt; is a cell array of strings then &lt;var&gt;default&lt;/var&gt; must be a cell array of values with the same size as &lt;var&gt;pref&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81e98533527b5f2266a000b4de1f61f0b84f5003" translate="yes" xml:space="preserve">
          <source>The corresponding value &lt;var&gt;val&lt;/var&gt; may be any Octave value, .e.g., double, struct, cell array, object, etc. Or, if &lt;var&gt;pref&lt;/var&gt; is a cell array of strings then &lt;var&gt;val&lt;/var&gt; must be a cell array of values with the same size as &lt;var&gt;pref&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23c49c92a6369d6557179cc75e36d0cede94c2d4" translate="yes" xml:space="preserve">
          <source>The counterpart to &lt;code&gt;publish&lt;/code&gt; is &lt;code&gt;grabcode&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc4ee3ba4cc9936be2a2fd5796e6ad05105bf3f8" translate="yes" xml:space="preserve">
          <source>The current axes is the default target for graphics output. In the case of a figure with multiple axes, &lt;code&gt;gca&lt;/code&gt; returns the last created axes or the last axes that was clicked on with the mouse.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88c0d54e1ceec4cfa4c1135fd559ec084dc20d30" translate="yes" xml:space="preserve">
          <source>The current figure is the default target for graphics output. If multiple figures exist, &lt;code&gt;gcf&lt;/code&gt; returns the last created figure or the last figure that was clicked on with the mouse.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ed71166ad4ed4f01a08656f9b7e4d2b25173a47" translate="yes" xml:space="preserve">
          <source>The current graphic toolkits produce very similar graphic displays, but differ in their capability to display unusual text and in their ability to print such text. In general, the &lt;code&gt;&quot;tex&quot;&lt;/code&gt; interpreter (default) is the best all-around performer for both on-screen display and printing. However, for the reproduction of complicated text formulas the &lt;code&gt;&quot;latex&quot;&lt;/code&gt; interpreter is preferred. The &lt;code&gt;&quot;latex&quot;&lt;/code&gt; interpreter will not display symbols on-screen, but the printed output will be correct. When printing, use one of the &lt;code&gt;standalone&lt;/code&gt; options which provide full access to LaTeX commands.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="218697f309cb21b6f492e2af59f7dabeafa844f2" translate="yes" xml:space="preserve">
          <source>The current installation directory can be retrieved by typing</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="690283cc685d978b4543fdb7834ae6e2327daaf5" translate="yes" xml:space="preserve">
          <source>The current object of a figure is the object that was last clicked on. It is stored in the &lt;code&gt;&quot;CurrentObject&quot;&lt;/code&gt; property of the target figure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0fbce00e86a58f53d494002de9003a826a84d2da" translate="yes" xml:space="preserve">
          <source>The current plotting mode can be changed by using either &lt;code&gt;&quot;auto&quot;&lt;/code&gt; or &lt;code&gt;&quot;manual&quot;&lt;/code&gt; as the argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a34433d3ae69e29089a80af2b2625c84c67ff539" translate="yes" xml:space="preserve">
          <source>The current state can be determined via &lt;code&gt;page_screen_output&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca202571762e01ca90b51a391b7abdf089622bd5" translate="yes" xml:space="preserve">
          <source>The current version of Octave executes in a graphical user interface (GUI). The GUI hosts an Integrated Development Environment (IDE) which includes a code editor with syntax highlighting, built-in debugger, documentation browser, as well as the interpreter for the language itself. A command-line interface for Octave is also available.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="268d2c468f4cf886bd407fa2469d0930bf3c8acc" translate="yes" xml:space="preserve">
          <source>The current working directory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="200e7515c866e80960b19bfb415a03233c0a47e6" translate="yes" xml:space="preserve">
          <source>The data type of a variable can be determined and changed through the use of the following functions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc18e6fc9a37c3fbe37ac4a49dec3a35e870d658" translate="yes" xml:space="preserve">
          <source>The date and time of image creation as defined by the Exif standard, i.e., it is the date and time the file was changed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2dd13d31bda205fd2a152477a7c70e8675912c1" translate="yes" xml:space="preserve">
          <source>The date vector contains the following fields: current year, month (1-12), day (1-31), hour (0-23), minute (0-59), and second (0-61). The seconds field has a fractional part after the decimal point for extended accuracy.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b6feaf8eb19c7b701a34cae815161491ba9eaf0" translate="yes" xml:space="preserve">
          <source>The date.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad9b98b4e3097a2315b7373dc69a19eebbdc90c3" translate="yes" xml:space="preserve">
          <source>The days of the week are numbered 1&amp;ndash;7 with the first day being Sunday.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3c221a22b0ef4474b2def339c45d88ea749685a" translate="yes" xml:space="preserve">
          <source>The default access for methods is &lt;code&gt;public&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c966f6520815869108503cd801f434489363c80" translate="yes" xml:space="preserve">
          <source>The default action of &lt;code&gt;accumarray&lt;/code&gt; is to sum the elements with the same subscripts. This behavior can be modified by defining the &lt;var&gt;func&lt;/var&gt; function. This should be a function or function handle that accepts a column vector and returns a scalar. The result of the function should not depend on the order of the subscripts.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9aa39f703b3aac7eff8352b490f1b435db9a1e30" translate="yes" xml:space="preserve">
          <source>The default action of &lt;code&gt;accumdim&lt;/code&gt; is to sum the subarrays with the same subscripts. This behavior can be modified by defining the &lt;var&gt;func&lt;/var&gt; function. This should be a function or function handle that accepts an array and a dimension, and reduces the array along this dimension. As a special exception, the built-in &lt;code&gt;min&lt;/code&gt; and &lt;code&gt;max&lt;/code&gt; functions can be used directly, and &lt;code&gt;accumdim&lt;/code&gt; accounts for the middle empty argument that is used in their calling.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63e60ff2e052f5051607e2f61f4c597cda17f7f7" translate="yes" xml:space="preserve">
          <source>The default camera position is determined automatically based on the scene. For example, to get the camera position:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4516cc75604b0119b524e790fa4b8ff3517c9be7" translate="yes" xml:space="preserve">
          <source>The default color is &lt;code&gt;&quot;b&quot;&lt;/code&gt; (blue), the default line style is &lt;code&gt;&quot;-&quot;&lt;/code&gt;, and the default marker is &lt;code&gt;&quot;o&quot;&lt;/code&gt;. The line style can be altered by the &lt;var&gt;linespec&lt;/var&gt; argument in the same manner as the &lt;code&gt;plot&lt;/code&gt; command. If the &lt;code&gt;&quot;filled&quot;&lt;/code&gt; argument is present the markers at the top of the stems will be filled in. For example,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e9e2032427b2415d7e070833b2197d80dbf48c7" translate="yes" xml:space="preserve">
          <source>The default error message is &lt;code&gt;&quot;This is the default error string.&quot;&lt;/code&gt; and the default caption is &lt;code&gt;&quot;Error Dialog&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ac0ea9a1f48ee536e35b6affdaebe0e06dce51a" translate="yes" xml:space="preserve">
          <source>The default for &lt;var&gt;type&lt;/var&gt; is &lt;code&gt;&quot;int32&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0bb699838f50b7c3677137e9ad440458b7feffe" translate="yes" xml:space="preserve">
          <source>The default for real matrices is a real Schur decomposition. A complex decomposition may be forced by passing the flag &lt;code&gt;&quot;complex&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d200a0e61046c0e59a27c52de477d5a698c15c47" translate="yes" xml:space="preserve">
          <source>The default format is</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fcbf3433d9294009e8d9584cd9e9ad4e1c232a58" translate="yes" xml:space="preserve">
          <source>The default format is:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d35b4719ff22781946d38c46275051a4c9e1725e" translate="yes" xml:space="preserve">
          <source>The default help message is &lt;code&gt;&quot;This is the default help string.&quot;&lt;/code&gt; and the default caption is &lt;code&gt;&quot;Help Dialog&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43ca7946377a9ee6264c5391b2c97a3c04e4444e" translate="yes" xml:space="preserve">
          <source>The default lighting mode &lt;code&gt;&quot;cdata&quot;&lt;/code&gt;, changes the cdata property of the surface object to give the impression of a lighted surface.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b616c6212379a1b6d52dc47fce53f4596a52f2d0" translate="yes" xml:space="preserve">
          <source>The default method is &lt;code&gt;&quot;estimate&quot;&lt;/code&gt;. The current method can be queried with</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94224fa2a351675a36430e5bbf2be056060e1be7" translate="yes" xml:space="preserve">
          <source>The default method is &lt;code&gt;&quot;linear&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24c21a8c5be01fd97548470a141123add81bcf88" translate="yes" xml:space="preserve">
          <source>The default mode when &lt;code&gt;test&lt;/code&gt; is called from the command line is interactive. In this mode, tests will be run until the first error is encountered, or all tests complete successfully. In batch mode, all tests are run regardless of any failures, and the results are collected for reporting. Tests which require user interaction, i.e., demo blocks, are never run in batch mode.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12bf11d85b8f30700ccf2ca996d856056706561d" translate="yes" xml:space="preserve">
          <source>The default options depend on the dimension of the input:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57c2976bd07bfbda565665739de953e77a2aeac8" translate="yes" xml:space="preserve">
          <source>The default precision is &lt;code&gt;&quot;uint8&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53454e9ac404221aa3c21ce85c31b1082b0363ef" translate="yes" xml:space="preserve">
          <source>The default properties differing from a figure are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f36540e01f3819c4e9c9e4a63187e6aa215816c" translate="yes" xml:space="preserve">
          <source>The default tolerance is zero (uses faster code).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6acd0a79a7f5c362a5484edba3538473b5bc067d" translate="yes" xml:space="preserve">
          <source>The default type is &lt;code&gt;&quot;double&quot;&lt;/code&gt;, but &lt;code&gt;&quot;single&quot;&lt;/code&gt; is a valid option. On IEEE 754 compatible systems, &lt;code&gt;flintmax&lt;/code&gt; is &lt;em&gt;2^{53}&lt;/em&gt; for &lt;code&gt;&quot;double&quot;&lt;/code&gt; and &lt;em&gt;2^{24}&lt;/em&gt; for &lt;code&gt;&quot;single&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb5ba3c1e1fa07c643d08eb748efa4ef494806d8" translate="yes" xml:space="preserve">
          <source>The default value for &lt;var&gt;d&lt;/var&gt; is 0 and the default value for &lt;var&gt;n&lt;/var&gt; is &lt;var&gt;m&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53e7bc279d95cda2ebbbb1459abca74187656471" translate="yes" xml:space="preserve">
          <source>The default value for &lt;var&gt;t&lt;/var&gt; is 2. The algorithm requires matrix-matrix products with sizes &lt;var&gt;n&lt;/var&gt; x &lt;var&gt;n&lt;/var&gt; and &lt;var&gt;n&lt;/var&gt; x &lt;var&gt;t&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a2526e3ca39d9fa85e49996435d625ac4ff87fa" translate="yes" xml:space="preserve">
          <source>The default value is</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b49bc8cd1252658786286922ea349403840d4da8" translate="yes" xml:space="preserve">
          <source>The default value is 17 which is the minimum necessary for the lossless saving and restoring of IEEE-754 double values; For IEEE-754 single values the minimum value is 9. If file size is a concern, it is probably better to choose a binary format for saving data rather than to reduce the precision of the saved values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="416f55b7ba8384b0adddd60c365a2f436c7662c3" translate="yes" xml:space="preserve">
          <source>The default value is &lt;code&gt;&quot; &quot;&lt;/code&gt; (a single space).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42ab7116829d7fbc4cfd8fc9aca3feae30b2351e" translate="yes" xml:space="preserve">
          <source>The default value is &lt;code&gt;&quot;+ &quot;&lt;/code&gt;. See &lt;a href=&quot;diary-and-echo-commands#Diary-and-Echo-Commands&quot;&gt;Diary and Echo Commands&lt;/a&gt;, for a description of echoing commands.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dfdc630fa0acd1db37ffa2c2814b525ccf8af458" translate="yes" xml:space="preserve">
          <source>The default value is &lt;code&gt;&quot;-text&quot;&lt;/code&gt; (Octave&amp;rsquo;s own text-based file format). See the documentation of the &lt;code&gt;save&lt;/code&gt; command for other choices.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1fe96909b266453ef46b398f97def234e728e08" translate="yes" xml:space="preserve">
          <source>The default value is &lt;code&gt;&quot;octave-workspace&quot;&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea6194a288b8cf00ae3e1a6df77f117c7ce8c191" translate="yes" xml:space="preserve">
          <source>The default value is &lt;code&gt;1000&lt;/code&gt;, but may be overridden by the environment variable &lt;code&gt;OCTAVE_HISTSIZE&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91480aa5578a469473216ff81520652afd1320f0" translate="yes" xml:space="preserve">
          <source>The default value is &lt;code&gt;makeinfo&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0283eeae3e6eee11a8edb21cc7e8f02d795d5a28" translate="yes" xml:space="preserve">
          <source>The default value is an empty character string, but may be overridden by the environment variable &lt;code&gt;OCTAVE_HISTCONTROL&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5bced592a048c4e28bc51dd718accfdb3fc3710b" translate="yes" xml:space="preserve">
          <source>The default value is false.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20b312595e3432641c294deb21f5168bd3370290" translate="yes" xml:space="preserve">
          <source>The default value is normally &lt;code&gt;&quot;less&quot;&lt;/code&gt;, &lt;code&gt;&quot;more&quot;&lt;/code&gt;, or &lt;code&gt;&quot;pg&quot;&lt;/code&gt;, depending on what programs are installed on your system. See &lt;a href=&quot;installation#Installation&quot;&gt;Installation&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72f9c8a80507b5f36341ab7c6a2c4b784ec80594" translate="yes" xml:space="preserve">
          <source>The default value is taken from the environment variable &lt;code&gt;EDITOR&lt;/code&gt; when Octave starts. If the environment variable is not initialized, &lt;code&gt;EDITOR&lt;/code&gt; will be set to &lt;code&gt;&quot;emacs&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1923125b02639f6745fb80c3b6a6ff44204fd38" translate="yes" xml:space="preserve">
          <source>The default value is true. If this option is disabled Octave will store diagonal matrices as full matrices.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e31b851ccb537b96c6ff6c96a222e463473abcd" translate="yes" xml:space="preserve">
          <source>The default value is true. If this option is disabled Octave will store permutation matrices as full matrices.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f403ba4aeef1c58bdfc50a8b4608930ed029de0e" translate="yes" xml:space="preserve">
          <source>The default value is true. If this option is disabled Octave will store ranges as full matrices.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4812e811a1cef74ae6b80b1a0d3ee95895126b26" translate="yes" xml:space="preserve">
          <source>The default value of &lt;var&gt;orient&lt;/var&gt; is &lt;code&gt;&quot;col&quot;&lt;/code&gt;. If &lt;var&gt;orient&lt;/var&gt; is &lt;code&gt;&quot;col&quot;&lt;/code&gt;, &lt;var&gt;u&lt;/var&gt; may be a matrix and &lt;var&gt;j&lt;/var&gt; an index vector resulting in the QR factorization of a matrix &lt;var&gt;B&lt;/var&gt; such that B(:,&lt;var&gt;j&lt;/var&gt;) gives &lt;var&gt;u&lt;/var&gt; and B(:,&lt;var&gt;j&lt;/var&gt;) = [] gives &lt;var&gt;A&lt;/var&gt;. Notice that the latter case is done as a sequence of k insertions; thus, for k large enough, it will be both faster and more accurate to recompute the factorization from scratch.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="295434b6624639fc75caca23bd6e525948629422" translate="yes" xml:space="preserve">
          <source>The default value of &lt;var&gt;origin&lt;/var&gt; is the center of the axes object that is the parent of &lt;var&gt;h&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b53adadedc6836aa1cffaac7f6d36145807da6a9" translate="yes" xml:space="preserve">
          <source>The default value of &lt;var&gt;t&lt;/var&gt; is 0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dfd85b7a53488e3a132a3c70bfe0782182be8f80" translate="yes" xml:space="preserve">
          <source>The default value of the primary prompt string is &lt;code&gt;'octave:\#&amp;gt; '&lt;/code&gt;. To change it, use a command like</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ccf7610b5c64aac3306f07c5fd644ec63a5a9ee6" translate="yes" xml:space="preserve">
          <source>The default warning message is &lt;code&gt;&quot;This is the default warning string.&quot;&lt;/code&gt; and the default caption is &lt;code&gt;&quot;Warning Dialog&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fdba1c6952cd09b4e5f6b3f72a351e64452829af" translate="yes" xml:space="preserve">
          <source>The default, however, is to return a permutation matrix and this may be explicitly specified by using a final argument of &lt;code&gt;&quot;matrix&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef0530da40e8ddc4fc555fe8c78a8c4a354cf4de" translate="yes" xml:space="preserve">
          <source>The defaults are &lt;var&gt;rate&lt;/var&gt; = 8000, &lt;var&gt;sec&lt;/var&gt; = 1, and &lt;var&gt;ampl&lt;/var&gt; = 64.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89f1845a2619ce16f406c413f0e94bfcbc006920" translate="yes" xml:space="preserve">
          <source>The degrees of freedom.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e96beb21a356ccb3f7afacae75a27dfa937189e0" translate="yes" xml:space="preserve">
          <source>The density of nonzero elements in a banded matrix before it is treated by the &lt;small&gt;LAPACK&lt;/small&gt; banded solvers (default 0.5)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fcc8dd0219bb802ae42116ac8d0cc5b3aa343233" translate="yes" xml:space="preserve">
          <source>The dependencies between the nodes of a Cholesky factorization can be calculated in linear time without explicitly needing to calculate the Cholesky factorization by the &lt;code&gt;etree&lt;/code&gt; command. This command returns the elimination tree of the matrix and can be displayed graphically by the command &lt;code&gt;treeplot (etree (A))&lt;/code&gt; if &lt;code&gt;A&lt;/code&gt; is symmetric or &lt;code&gt;treeplot (etree (A+A'))&lt;/code&gt; otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="657a95a42300b512a401041273022384803dc9a1" translate="yes" xml:space="preserve">
          <source>The depth of the object hierarchy to search can be limited with the &lt;code&gt;&quot;-depth&quot;&lt;/code&gt; argument. An example of searching through only three generations of children is:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47cba6a4894f2e1e318b8d17de1e81304fd948d9" translate="yes" xml:space="preserve">
          <source>The description follows on succeeding lines, sometimes with examples.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12a34669884f8d09b1c5368bbede2245094c9b49" translate="yes" xml:space="preserve">
          <source>The determinant should not be used to check a matrix for singularity. For that, use any of the condition number functions: &lt;code&gt;cond&lt;/code&gt;, &lt;code&gt;condest&lt;/code&gt;, &lt;code&gt;rcond&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8f0e80b5c9420623919a4085b40c66ea7771bc6" translate="yes" xml:space="preserve">
          <source>The developer is free to add additional arguments to the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2bb53908055a08f465d517ba418f4d56319a27d" translate="yes" xml:space="preserve">
          <source>The diagonal and permutation matrices are special objects in their own right. A number of operations and built-in functions are defined for these matrices to use special, more efficient code than would be used for a full matrix in the same place. Examples are given in further sections.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4006737207315f15f0f36233793c240f767dd81c" translate="yes" xml:space="preserve">
          <source>The diagonal of &lt;var&gt;L&lt;/var&gt; is modified so that row (and column) sums are preserved even when elements have been dropped during the factorization. The relationship preserved is: &lt;code&gt;&lt;var&gt;A&lt;/var&gt; * e = &lt;var&gt;L&lt;/var&gt; * &lt;var&gt;L&lt;/var&gt;' * e&lt;/code&gt;, where e is a vector of ones.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb67e97842958fe054431933f0a41c46a315c57e" translate="yes" xml:space="preserve">
          <source>The dialog box is a figure object with properties as recommended for a dialog box.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d5c67bf80718166c3bae7a763498bec7fd39c24" translate="yes" xml:space="preserve">
          <source>The dialog is displayed &lt;code&gt;&quot;modal&quot;&lt;/code&gt; which means it prevents users from interacting with any other GUI element until the dialog has been closed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9f40ad4ad4b800279c6c5cd4bde3d24cbfd5528" translate="yes" xml:space="preserve">
          <source>The dialog is normal.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8b833d2bb0684a5fb06b57f2bfde39463ff5e5e" translate="yes" xml:space="preserve">
          <source>The dialog may contain two or three buttons which will all close the dialog.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d89c45e99e890d765a509b1e0960194a7a5ee58" translate="yes" xml:space="preserve">
          <source>The difference between &lt;code&gt;triplot&lt;/code&gt;, and &lt;code&gt;trimesh&lt;/code&gt; or &lt;code&gt;trisurf&lt;/code&gt;, is that the former only plots the 2-dimensional triangulation itself, whereas the second two plot the value of a function &lt;code&gt;f (&lt;var&gt;x&lt;/var&gt;, &lt;var&gt;y&lt;/var&gt;)&lt;/code&gt;. An example of the use of the &lt;code&gt;triplot&lt;/code&gt; function is</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="767bdac3700233d926fe9f03b34c5a0dc08c6750" translate="yes" xml:space="preserve">
          <source>The digamma function is defined:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a74d96b49a2eab57e4e2ad6cff2a3f52141cf0fe" translate="yes" xml:space="preserve">
          <source>The dimension along which to take the difference can be explicitly stated with the optional variable &lt;var&gt;dim&lt;/var&gt;. In this case the &lt;var&gt;k&lt;/var&gt;-th order differences are calculated along this dimension. In the case where &lt;var&gt;k&lt;/var&gt; exceeds &lt;code&gt;size&amp;nbsp;(&lt;var&gt;x&lt;/var&gt;,&amp;nbsp;&lt;var&gt;dim&lt;/var&gt;)&lt;/code&gt; an empty matrix is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6b1fc01554d47f586c9b70a185584ca3aef959f" translate="yes" xml:space="preserve">
          <source>The dimension of the null space is taken as the number of singular values of &lt;var&gt;A&lt;/var&gt; not greater than &lt;var&gt;tol&lt;/var&gt;. If the argument &lt;var&gt;tol&lt;/var&gt; is missing, it is computed as</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43cdf4797a71664850cf5eda772286eeab998a88" translate="yes" xml:space="preserve">
          <source>The dimension of the range space is taken as the number of singular values of &lt;var&gt;A&lt;/var&gt; greater than &lt;var&gt;tol&lt;/var&gt;. If the argument &lt;var&gt;tol&lt;/var&gt; is missing, it is computed as</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14efe7f9b3db79c8f64e502e44b674de4e9de41f" translate="yes" xml:space="preserve">
          <source>The dimensions of &lt;var&gt;A&lt;/var&gt; and &lt;var&gt;B&lt;/var&gt; must be equal or singleton. The singleton dimensions of the arrays will be expanded to the same dimensionality as the other array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85201294da4b277ee772186f96a8bfe30de86142" translate="yes" xml:space="preserve">
          <source>The dimensions of the matrix or array in value of type &lt;code&gt;dim_vector&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c732726628d8a5fb0f3c7b69d22464cd32fa7ae" translate="yes" xml:space="preserve">
          <source>The directory name is taken first from the environment variable &lt;code&gt;TMPDIR&lt;/code&gt;. If that does not exist the system default returned by &lt;code&gt;P_tmpdir&lt;/code&gt; is used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e21af40f00f9e8e1761c18748021da450c111e16" translate="yes" xml:space="preserve">
          <source>The directory of &lt;code&gt;gcc&lt;/code&gt; include files normally begins in the same directory that contains the file</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0bfd26975e3cb0a673b91271d38518145a652889" translate="yes" xml:space="preserve">
          <source>The directory where the Java options file is located is specified by the environment variable &lt;code&gt;OCTAVE_JAVA_DIR&lt;/code&gt;. If unset the directory where</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c62c8685a6efd40cba2392acbf1d3197582e6f58" translate="yes" xml:space="preserve">
          <source>The disadvantage of this is that if the foreign code allocates any memory internally, then this memory might be lost during an interrupt, without being deallocated. Therefore, ideally Octave itself should allocate any memory that is needed by the foreign code, with either the &lt;code&gt;fortran_vec&lt;/code&gt; method or the &lt;code&gt;OCTAVE_LOCAL_BUFFER&lt;/code&gt; macro.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fed4329d63fad8383ada4be468248db4886ad082" translate="yes" xml:space="preserve">
          <source>The disadvantage of this technique for creating a sparse matrix is that there is a brief time when two copies of the data exist. For extremely memory constrained problems this may not be the best technique for creating a sparse matrix.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18f5769b31ffbf589af777f6b63d5fe610eb920c" translate="yes" xml:space="preserve">
          <source>The distance between labels on a single contour in points.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67815184b42f362df9e9cf82f507b421edaa0372" translate="yes" xml:space="preserve">
          <source>The do-until Statement</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01c7619dc78171ca9be96a0dca244ccd890f6252" translate="yes" xml:space="preserve">
          <source>The documentation for an oct-file is contained in the fourth string parameter of the &lt;code&gt;DEFUN_DLD&lt;/code&gt; macro. This string can be formatted in the same manner as the help strings for user functions, however there are some issues that are particular to the formatting of help strings within oct-files.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91a2bbe0a8fa4e57bc1da7cae2e702cead0b42ab" translate="yes" xml:space="preserve">
          <source>The easiest way to create a character matrix is to put several strings together into a matrix.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="003c203e948b30460e7ceab0075a46d3562a242f" translate="yes" xml:space="preserve">
          <source>The easiest way to create a string is, as illustrated in the introduction, to enclose a text in double-quotes or single-quotes. It is however possible to create a string without actually writing a text. The function &lt;code&gt;blanks&lt;/code&gt; creates a string of a given length consisting only of blank characters (ASCII code 32).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a58e1031dfc5ca615eb2e1257804deea87423fb8" translate="yes" xml:space="preserve">
          <source>The edge color of the marker. (Default: &lt;code&gt;&quot;color&quot;&lt;/code&gt; property)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f75c5e6c692a5a310d542e5c38ac019ec736453" translate="yes" xml:space="preserve">
          <source>The eigenvalue balancing option &lt;var&gt;opt&lt;/var&gt; may be one of:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a77ac999f0eefeaee844edd7fab8d2f86f2625f" translate="yes" xml:space="preserve">
          <source>The eigenvalues are optionally ordered along the diagonal according to the value of &lt;var&gt;opt&lt;/var&gt;. &lt;code&gt;&lt;var&gt;opt&lt;/var&gt; = &quot;a&quot;&lt;/code&gt; indicates that all eigenvalues with negative real parts should be moved to the leading block of &lt;var&gt;S&lt;/var&gt; (used in &lt;code&gt;are&lt;/code&gt;), &lt;code&gt;&lt;var&gt;opt&lt;/var&gt; = &quot;d&quot;&lt;/code&gt; indicates that all eigenvalues with magnitude less than one should be moved to the leading block of &lt;var&gt;S&lt;/var&gt; (used in &lt;code&gt;dare&lt;/code&gt;), and &lt;code&gt;&lt;var&gt;opt&lt;/var&gt; = &quot;u&quot;&lt;/code&gt;, the default, indicates that no ordering of eigenvalues should occur. The leading &lt;var&gt;k&lt;/var&gt; columns of &lt;var&gt;U&lt;/var&gt; always span the &lt;var&gt;A&lt;/var&gt;-invariant subspace corresponding to the &lt;var&gt;k&lt;/var&gt; leading eigenvalues of &lt;var&gt;S&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8017271ab847cca8e4081c7140dda4793e449de2" translate="yes" xml:space="preserve">
          <source>The eigenvalues of the companion matrix are equal to the roots of the polynomial.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb1a1b2ee5f194198817b043d664f91f4f0979d9" translate="yes" xml:space="preserve">
          <source>The eigenvalues returned by &lt;code&gt;eig&lt;/code&gt; are not ordered.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2d06f280a8e0a0b3d88bbc7583322ecd97bb536" translate="yes" xml:space="preserve">
          <source>The eigenvalues returned by &lt;code&gt;eigs&lt;/code&gt; correspond to the singular values of &lt;var&gt;A&lt;/var&gt;. The number of singular values to calculate is given by &lt;var&gt;k&lt;/var&gt; and defaults to 6.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a76fe336a98009fb5044dd816486d4539810c261" translate="yes" xml:space="preserve">
          <source>The eighth argument &lt;var&gt;tol&lt;/var&gt; specifies the tolerance for the stopping criteria. The default value is &lt;code&gt;sqrt (eps)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ac1f90a1013ef0e9d12364dbda40bda7b3d7a35" translate="yes" xml:space="preserve">
          <source>The elements are not accessed in any particular order. If you need to cycle through the list in a particular way, you will have to use the function &lt;code&gt;fieldnames&lt;/code&gt; and sort the list yourself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd0b6a2196e2220ae436d69aec18c49ae0e7ee33" translate="yes" xml:space="preserve">
          <source>The elements of &lt;var&gt;img&lt;/var&gt; are indices into the current colormap.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5b99e43168200106023afe68e90cd06a595a871" translate="yes" xml:space="preserve">
          <source>The elements of the i-th output argument contains the elements of the vector &lt;var&gt;x&lt;/var&gt;i repeated over all dimensions different from the i-th dimension. Calling ndgrid with only one input argument &lt;var&gt;x&lt;/var&gt; is equivalent to calling ndgrid with all n input arguments equal to &lt;var&gt;x&lt;/var&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f140e1d0fb74ac96f1cf64f0d598de7be82e121" translate="yes" xml:space="preserve">
          <source>The elements of the matrix are accessed in column-major order (like Fortran arrays are stored).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="efabfd8124295396d092f7e80f71e14a9f34baf0" translate="yes" xml:space="preserve">
          <source>The elements of the returned array that have no subscripts associated with them are set to zero. Defining &lt;var&gt;fillval&lt;/var&gt; to some other value allows these values to be defined. This behavior changes, however, for certain values of &lt;var&gt;func&lt;/var&gt;. If &lt;var&gt;func&lt;/var&gt; is &lt;code&gt;@min&lt;/code&gt; (respectively, &lt;code&gt;@max&lt;/code&gt;) then the result will be filled with the minimum (respectively, maximum) integer if &lt;var&gt;vals&lt;/var&gt; is of integral type, logical false (respectively, logical true) if &lt;var&gt;vals&lt;/var&gt; is of logical type, zero if &lt;var&gt;fillval&lt;/var&gt; is zero and all values are non-positive (respectively, non-negative), and NaN otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3fd9f45a23d143551ea9e615edb4456d5e52ed7c" translate="yes" xml:space="preserve">
          <source>The elimination tree itself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e74e2527d8954d4b8185a48dbf7f005ef7f6dec5" translate="yes" xml:space="preserve">
          <source>The encrypted password, if available.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3127e0016ce6de6c4a3f468732a5ca80adf0845" translate="yes" xml:space="preserve">
          <source>The end indices of each matching substring</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9830530893bd3e79bfe9aefc3a971390cf51149e" translate="yes" xml:space="preserve">
          <source>The entire text of this manual is available from the Octave prompt via the command</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2039db24b47d938bd2ee209f24d14188e2b00baf" translate="yes" xml:space="preserve">
          <source>The entries are the individual functions which have been executed (only the 10 most important ones), together with some information for each of them. The entries like &amp;lsquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="196c7caf3bfbc5e9097c7c82d48eae162af183b4" translate="yes" xml:space="preserve">
          <source>The entry point into the mex-file is defined by &lt;code&gt;mexFunction&lt;/code&gt;. The function takes four arguments:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36e3f1790e4a3af9412cc9a57d028ec2c7fd5c1f" translate="yes" xml:space="preserve">
          <source>The epoch is referenced to 00:00:00 UTC (Coordinated Universal Time) 1 Jan 1970. For example, on Monday February 17, 1997 at 07:15:06 UTC, the value returned by &lt;code&gt;time&lt;/code&gt; was 856163706.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13b874622d116128817fbd12f84413146b51bc66" translate="yes" xml:space="preserve">
          <source>The equation above is not accurate. The Law of Conservation of Mass requires that the number of molecules of each type balance on the left- and right-hand sides of the equation. Writing the variable overall reaction with individual equations for hydrogen and oxygen one finds:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6972eb8565c6c04f21f4c5889e14ced5b6e7c2f" translate="yes" xml:space="preserve">
          <source>The equivalent behavior can be implemented as a class &lt;code&gt;@FIRfilter&lt;/code&gt;. The constructor for this class is the file</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91e40aa9eb72a32b0c5bfc0c45877c2a0381d783" translate="yes" xml:space="preserve">
          <source>The equivalent functionality for subscripted assignments uses the &lt;code&gt;subsasgn&lt;/code&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc376b13b1bb45eec7975223e6cd10040cca826c" translate="yes" xml:space="preserve">
          <source>The error function is defined as</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="abc9c60987c96641767e54732f04d34419fdb93f" translate="yes" xml:space="preserve">
          <source>The error message may have multiple lines separated by newline characters (&quot;\n&quot;), or it may be a cellstr array with one element for each line.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80e12211bd2e1c06e515320a1a2853a3c56faa9b" translate="yes" xml:space="preserve">
          <source>The errors have a single low-side value and a single upper-side value. The errorbars are not symmetric and are drawn from &lt;var&gt;data&lt;/var&gt;-&lt;var&gt;lerr&lt;/var&gt; to &lt;var&gt;data&lt;/var&gt;+&lt;var&gt;uerr&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5df81009241d903dd90f308b94a47dbbd15d33c8" translate="yes" xml:space="preserve">
          <source>The estimators for all frequencies in the intervals described above is returned in &lt;var&gt;dd&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2884d55a71bf4cb2b7796d0bbd7265c5794f5bb4" translate="yes" xml:space="preserve">
          <source>The event queue is flushed and any callbacks generated are executed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="575502b109f4a08b788eb64ec8c02fe523ae38b1" translate="yes" xml:space="preserve">
          <source>The events &lt;code&gt;error&lt;/code&gt;, &lt;code&gt;caught error&lt;/code&gt;, and &lt;code&gt;warning&lt;/code&gt; can all be followed by a string specifying an error ID or warning ID. If that is done, only errors with the specified ID will cause execution to stop. To stop on one of a set of IDs, multiple &lt;code&gt;dbstop&lt;/code&gt; commands must be issued.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09ed7ee22dcd6b915e2113f5f8f6722e7cba1222" translate="yes" xml:space="preserve">
          <source>The exact options that are permitted and how they are interpreted vary between the different conversion specifiers. See the descriptions of the individual conversions for information about the particular options that they allow.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d82d6670edfd47bb4bab9fbebd1b393578f7c259" translate="yes" xml:space="preserve">
          <source>The exact options that are permitted and how they are interpreted vary between the different conversion specifiers. See the descriptions of the individual conversions for information about the particular options that they use.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c905ae5f7d5884c7f669eced5b85ceed432c1975" translate="yes" xml:space="preserve">
          <source>The example above can be carried out using only Java objects:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33ab1444f94dc7ecc190006c6d1b7d6eb4e241b4" translate="yes" xml:space="preserve">
          <source>The example above publishes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8ba840b65cd1ba1ed718252f8fd6de15df4e1d0" translate="yes" xml:space="preserve">
          <source>The example above specifically uses the &lt;code&gt;octave_scalar_map&lt;/code&gt; class which is for representing a single struct. For structure arrays, the &lt;code&gt;octave_map&lt;/code&gt; class is used instead. The commented code shows how the demo could be modified to handle a structure array. In that case, the &lt;code&gt;contents&lt;/code&gt; method returns a &lt;code&gt;Cell&lt;/code&gt; which may have more than one element. Therefore, to obtain the underlying &lt;code&gt;octave_value&lt;/code&gt; in the single struct example we would write</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c7c19e9f4afb2e119c95fa6009f853ef657cb5f" translate="yes" xml:space="preserve">
          <source>The example above used the root figure object so the default property value will apply to all line objects. However, default values are hierarchical, so defaults set in a figure objects override those set in the root figure object. Likewise, defaults set in axes objects override those set in figure or root figure objects. For example,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb3f8c4fbce4d0436f72626ff4a65de09383a6b3" translate="yes" xml:space="preserve">
          <source>The example above uses the functions &lt;code&gt;mxGetDimensions&lt;/code&gt;, &lt;code&gt;mxGetNumberOfElements&lt;/code&gt;, and &lt;code&gt;mxGetNumberOfDimensions&lt;/code&gt; to work with the dimensions of multi-dimensional arrays. The functions &lt;code&gt;mxGetM&lt;/code&gt;, and &lt;code&gt;mxGetN&lt;/code&gt; are also available to find the number of rows and columns in a 2-D matrix (MxN matrix).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f6ba6eb3dbbb6b561e7c8947f8baa5a0d7f8fe3" translate="yes" xml:space="preserve">
          <source>The example begins with an ordinary scalar structure to which a nested scalar structure is added. In all cases, if the structure index &lt;var&gt;sidx&lt;/var&gt; is not specified it defaults to 1 (scalar structure). Thus, the example above could be written more concisely as &lt;code&gt;setfield (&lt;var&gt;s&lt;/var&gt;, &quot;foo&quot;, &quot;bar&quot;, 54)&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="567ce5e37674f8b69bd0493a86686e8dbde08e4d" translate="yes" xml:space="preserve">
          <source>The exponential integral is defined as:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="682f2afe18d27a6b2d5109af77f4241c373f09ce" translate="yes" xml:space="preserve">
          <source>The expression</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c06c3d2681c3bcba49c0460219e923a27e4149fb" translate="yes" xml:space="preserve">
          <source>The expression &lt;var&gt;boolean1&lt;/var&gt; is evaluated and converted to a scalar using the equivalent of the operation &lt;code&gt;all (&lt;var&gt;boolean1&lt;/var&gt;(:))&lt;/code&gt;. If it is false, the result of the overall expression is 0. If it is true, the expression &lt;var&gt;boolean2&lt;/var&gt; is evaluated and converted to a scalar using the equivalent of the operation &lt;code&gt;all
(&lt;var&gt;boolean2&lt;/var&gt;(:))&lt;/code&gt;. If it is true, the result of the overall expression is 1. Otherwise, the result of the overall expression is 0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61e6e90b101b200b5711504357b1faa5c4f543e6" translate="yes" xml:space="preserve">
          <source>The expression &lt;var&gt;boolean1&lt;/var&gt; is evaluated and converted to a scalar using the equivalent of the operation &lt;code&gt;all (&lt;var&gt;boolean1&lt;/var&gt;(:))&lt;/code&gt;. If it is true, the result of the overall expression is 1. If it is false, the expression &lt;var&gt;boolean2&lt;/var&gt; is evaluated and converted to a scalar using the equivalent of the operation &lt;code&gt;all
(&lt;var&gt;boolean2&lt;/var&gt;(:))&lt;/code&gt;. If it is true, the result of the overall expression is 1. Otherwise, the result of the overall expression is 0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0dd72772471f8adbcd8c908bf4d6e77a93dcbefe" translate="yes" xml:space="preserve">
          <source>The expressions &lt;code&gt;D \ M&lt;/code&gt; and &lt;code&gt;M / D&lt;/code&gt; perform inverse scaling. They are equivalent to solving a diagonal (or rectangular diagonal) in a least-squares minimum-norm sense. In exact arithmetic, this is equivalent to multiplying by a pseudoinverse. The pseudoinverse of a rectangular diagonal matrix is again a rectangular diagonal matrix with swapped dimensions, where each nonzero diagonal element is replaced by its reciprocal. The matrix division algorithms do, in fact, use division rather than multiplication by reciprocals for better numerical accuracy; otherwise, they honor the above definition. Note that a diagonal matrix is never truncated due to ill-conditioning; otherwise, it would not be of much use for scaling. This is typically consistent with linear algebra needs. A full matrix that only happens to be diagonal (and is thus not a special object) is of course treated normally.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a97576f6c215bbe65edc4fdbed5338706ad263b" translate="yes" xml:space="preserve">
          <source>The expressions &lt;code&gt;I(p,:)&lt;/code&gt; and &lt;code&gt;I(:,p)&lt;/code&gt; are permutation matrices.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97605418b9aa14a4f34453c5f46d06b9c098045f" translate="yes" xml:space="preserve">
          <source>The extent of the result matrix in the working dimension will be determined by the subscripts themselves. However, if &lt;var&gt;n&lt;/var&gt; is defined it determines this extent.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee6fc30e7f26d63372b22a7e8e2e4994f56971ca" translate="yes" xml:space="preserve">
          <source>The extents of each matched token surrounded by &lt;code&gt;(&amp;hellip;)&lt;/code&gt; in &lt;var&gt;pat&lt;/var&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8db742b60427a91c8a62880e7e0c8ea1efe0c264" translate="yes" xml:space="preserve">
          <source>The face color of each cell of the mesh is determined by interpolating the values of &lt;var&gt;c&lt;/var&gt; for each of the cell&amp;rsquo;s vertices; Contrast this with &lt;code&gt;imagesc&lt;/code&gt; which renders one cell for each element of &lt;var&gt;c&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="290f64bd26e097bf66bba2cecab3f43ca9457ba9" translate="yes" xml:space="preserve">
          <source>The fact that both operands may not be evaluated before determining the overall truth value of the expression can be important. For example, in the expression</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2472df44392424f0cf90d2855a26ee0b937591d9" translate="yes" xml:space="preserve">
          <source>The factor given by this routine may be useful as a preconditioner for a system of linear equations being solved by iterative methods such as PCG (Preconditioned Conjugate Gradient).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2028f3b4b514e6a0008168d06ed7de008f07cb9d" translate="yes" xml:space="preserve">
          <source>The factorization may be modified by passing options in a structure &lt;var&gt;opts&lt;/var&gt;. The option name is a field of the structure and the setting is the value of field. Names and specifiers are case sensitive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="282198997593713d1268f638a43828ee88a43bea" translate="yes" xml:space="preserve">
          <source>The factors given by this routine may be useful as preconditioners for a system of linear equations being solved by iterative methods such as BICG (BiConjugate Gradients) or GMRES (Generalized Minimum Residual Method).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40e2a3cf29a78f9f3dd67b90794815161f2151af" translate="yes" xml:space="preserve">
          <source>The field &lt;code&gt;options&lt;/code&gt; is optional. All others are required.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f998ce462b67f57a0aeb096c7cd793ff65b74ac" translate="yes" xml:space="preserve">
          <source>The fieldname for each entry of &lt;var&gt;hdata&lt;/var&gt; is taken from the &lt;code&gt;&quot;tag&quot;&lt;/code&gt; property of the graphic object. If the tag is empty then the handle is not returned. If there are multiple graphic objects with the same tag then the entry in &lt;var&gt;hdata&lt;/var&gt; will be a vector of handles. &lt;code&gt;guihandles&lt;/code&gt; includes all possible handles, including those for which &lt;code&gt;&quot;HandleVisibility&quot;&lt;/code&gt; is &lt;code&gt;&quot;off&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="068b2c411989954acd803bab94dfc84c435af769" translate="yes" xml:space="preserve">
          <source>The fields of the structure &lt;var&gt;s&lt;/var&gt; are &lt;code&gt;&quot;type&quot;&lt;/code&gt;, &lt;code&gt;&quot;handle&quot;&lt;/code&gt;, &lt;code&gt;&quot;properties&quot;&lt;/code&gt;, &lt;code&gt;&quot;children&quot;&lt;/code&gt;, and &lt;code&gt;&quot;special&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eee5909cc06811197063a0ab2cbcc35a41242288" translate="yes" xml:space="preserve">
          <source>The fifth and sixth arguments, &lt;var&gt;lb&lt;/var&gt; and &lt;var&gt;ub&lt;/var&gt;, contain lower and upper bounds on &lt;var&gt;x&lt;/var&gt;. These must be consistent with the equality and inequality constraints &lt;var&gt;g&lt;/var&gt; and &lt;var&gt;h&lt;/var&gt;. If the arguments are vectors then &lt;var&gt;x&lt;/var&gt;(i) is bound by &lt;var&gt;lb&lt;/var&gt;(i) and &lt;var&gt;ub&lt;/var&gt;(i). A bound can also be a scalar in which case all elements of &lt;var&gt;x&lt;/var&gt; will share the same bound. If only one bound (lb, ub) is specified then the other will default to (-&lt;var&gt;realmax&lt;/var&gt;, +&lt;var&gt;realmax&lt;/var&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="abf7d6d8dcf3578d41a416c28014b0995f5b50fd" translate="yes" xml:space="preserve">
          <source>The fifth argument is optional, and may be used to specify a set of times that the DAE solver should not integrate past. It is useful for avoiding difficulties with singularities and points where there is a discontinuity in the derivative.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dbaaa58017e638f7b388075af8b2295aa6c4d513" translate="yes" xml:space="preserve">
          <source>The figure will be minimally moved to be entirely visible on the screen, with a 30 pixel extra padding from the sides of the screen. This is the default value if none is provided.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8daf1ac8a76295c357314f823477cf205d52b017" translate="yes" xml:space="preserve">
          <source>The file &lt;var&gt;filename&lt;/var&gt; is read and parsed according to &lt;var&gt;format&lt;/var&gt;. The function behaves like &lt;code&gt;strread&lt;/code&gt; except it works by parsing a file instead of a string. See the documentation of &lt;code&gt;strread&lt;/code&gt; for details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f280e4759947eae358c124897a5bcb31e7d9cd2" translate="yes" xml:space="preserve">
          <source>The file identifier corresponding to the input or output stream of the process is returned in &lt;var&gt;fid&lt;/var&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f455e31a5b5fba20742a91d3059b8edadc4a0679" translate="yes" xml:space="preserve">
          <source>The file identifiers for the input and output streams of the subprocess are returned in &lt;var&gt;in&lt;/var&gt; and &lt;var&gt;out&lt;/var&gt;. If execution of the command is successful, &lt;var&gt;pid&lt;/var&gt; contains the process ID of the subprocess. Otherwise, &lt;var&gt;pid&lt;/var&gt; is -1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34c5b7cebb2b7a944eaba0613ea0476449cc0879" translate="yes" xml:space="preserve">
          <source>The file is opened in binary read/write (&lt;code&gt;&quot;w+b&quot;&lt;/code&gt;) mode and will be deleted automatically when it is closed or when Octave exits.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="344940fc9340d0787f39f5263f96dfd4d44454bc" translate="yes" xml:space="preserve">
          <source>The file to compile or link. Recognized file types are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0bbb09ad0e8cdaea8adcdd3fee070a4439536499" translate="yes" xml:space="preserve">
          <source>The filename &lt;var&gt;script&lt;/var&gt; can be a bare, fully qualified, or relative filename and with or without a file extension. If no extension is specified, Octave will first search for a script with the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2f334aa5e1cc68ce3725b13eea2882882f45b8c" translate="yes" xml:space="preserve">
          <source>The filename used when saving the plot figure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a2e7a325cb451df4ce56eb63fa5ac60cae19dff" translate="yes" xml:space="preserve">
          <source>The filter string can also contain a semicolon separated list of filter extensions. Example: &lt;code&gt;uigetfile ({&quot;*.gif;*.png;*.jpg&quot;, &quot;Supported Picture
Formats&quot;})&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
