<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="chef">
    <body>
      <group id="chef">
        <trans-unit id="5210df803b928874d783047316753e01a03909b6" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;knife bootstrap&lt;/code&gt; subcommand to run a bootstrap operation that installs the chef-client on the target system. The bootstrap operation must specify the IP address or FQDN of the target system.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52dbf96326ac143580c5d6d7ff5c2506beed1246" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;knife configure&lt;/code&gt; subcommand to create the knife.rb and client.rb files so that they can be distributed to workstations and nodes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a53e7b9fbf45b3db0799dcf85bb377cd756f7782" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;knife delete&lt;/code&gt; subcommand to delete an object from a Chef server. This subcommand works similar to &lt;code&gt;knife cookbook delete&lt;/code&gt;, &lt;code&gt;knife data bag delete&lt;/code&gt;, &lt;code&gt;knife environment delete&lt;/code&gt;, &lt;code&gt;knife node delete&lt;/code&gt;, and &lt;code&gt;knife role delete&lt;/code&gt;, but with a single verb (and a single action).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5a1159c115870bf5ba1cb1da2a1a2fedd0f1c64" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;knife deps&lt;/code&gt; subcommand to identify dependencies for a node, role, or cookbook.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10ae621344050fb2e52d4e942a41bcd8243cd1cd" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;knife diff&lt;/code&gt; subcommand to compare the differences between files and directories on the Chef server and in the chef-repo. For example, to compare files on the Chef server prior to an uploading or downloading files using the &lt;code&gt;knife download&lt;/code&gt; and &lt;code&gt;knife upload&lt;/code&gt; subcommands, or to ensure that certain files in multiple production environments are the same. This subcommand is similar to the &lt;code&gt;git diff&lt;/code&gt; command that can be used to diff what is in the chef-repo with what is synced to a git repository.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e53636a38de902c467c0b7ec49827e37a090941c" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;knife download&lt;/code&gt; subcommand to download roles, cookbooks, environments, nodes, and data bags from the Chef server to the current working directory. It can be used to back up data on the Chef server, inspect the state of one or more files, or to extract out-of-process changes users may have made to files on the Chef server, such as if a user made a change that bypassed version source control. This subcommand is often used in conjunction with &lt;code&gt;knife diff&lt;/code&gt;, which can be used to see exactly what changes will be downloaded, and then &lt;code&gt;knife upload&lt;/code&gt;, which does the opposite of &lt;code&gt;knife download&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0e44600e35f130d16a92ba313d9f4e344bee757" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;knife edit&lt;/code&gt; subcommand to edit objects on the Chef server. This subcommand works similar to &lt;code&gt;knife cookbook edit&lt;/code&gt;, &lt;code&gt;knife data bag edit&lt;/code&gt;, &lt;code&gt;knife environment edit&lt;/code&gt;, &lt;code&gt;knife node edit&lt;/code&gt;, and &lt;code&gt;knife role edit&lt;/code&gt;, but with a single verb (and a single action).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0400eaa4fecc7bd2df662c31cba345bd22731b8f" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;knife list&lt;/code&gt; subcommand to view a list of objects on the Chef server. This subcommand works similar to &lt;code&gt;knife cookbook list&lt;/code&gt;, &lt;code&gt;knife data bag list&lt;/code&gt;, &lt;code&gt;knife environment list&lt;/code&gt;, &lt;code&gt;knife node list&lt;/code&gt;, and &lt;code&gt;knife role list&lt;/code&gt;, but with a single verb (and a single action).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ec9f12eb600fae19956a0a2aaede2f757ffa4bc" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;knife raw&lt;/code&gt; subcommand to send a REST request to an endpoint in the Chef server API.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec9c1923837e421406d63385ef28748e81898193" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;knife recipe list&lt;/code&gt; subcommand to view all of the recipes that are on a Chef server. A regular expression can be used to limit the results to recipes that match a specific pattern. The regular expression must be within quotes and not be surrounded by forward slashes (/).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce93bba05b411c57e8f3e372bea50c911b9de0f2" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;knife search&lt;/code&gt; subcommand to run a search query for information that is indexed on a Chef server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36d5477e284f5466eac12578361c48267dbdf8f1" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;knife serve&lt;/code&gt; subcommand to run a persistent chef-zero against the local chef-repo. (chef-zero is a lightweight Chef server that runs in-memory on the local machine.) This is the same as running the chef-client executable with the &lt;code&gt;--local-mode&lt;/code&gt; option. The &lt;code&gt;chef_repo_path&lt;/code&gt; is located automatically and the Chef server will bind to the first available port between &lt;code&gt;8889&lt;/code&gt; and &lt;code&gt;9999&lt;/code&gt;. &lt;code&gt;knife serve&lt;/code&gt; will print the URL for the local Chef server, so that it may be added to the knife.rb file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="027d7048ec9480ca69a2ae16fc2556555147c416" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;knife show&lt;/code&gt; subcommand to view the details of one (or more) objects on the Chef server. This subcommand works similar to &lt;code&gt;knife cookbook show&lt;/code&gt;, &lt;code&gt;knife data bag show&lt;/code&gt;, &lt;code&gt;knife environment show&lt;/code&gt;, &lt;code&gt;knife node show&lt;/code&gt;, and &lt;code&gt;knife role show&lt;/code&gt;, but with a single verb (and a single action).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97f1dbca48b58d7e7546d362af5828dd56b59b2d" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;knife ssh&lt;/code&gt; subcommand to invoke SSH commands (in parallel) on a subset of nodes within an organization, based on the results of a search query made to the Chef server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40d82ed60e23fd52f444d29a9a2db5cd89424a21" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;knife ssl check&lt;/code&gt; subcommand to verify the SSL configuration for the Chef server or a location specified by a URL or URI. Invalid certificates will not be used by OpenSSL.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="462aad59aa0cb9c6c99edcb2b1c3e83923a78fb9" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;knife ssl fetch&lt;/code&gt; subcommand to copy SSL certificates from an HTTPS server to the &lt;code&gt;trusted_certs_dir&lt;/code&gt; directory that is used by knife and the chef-client to store trusted SSL certificates. When these certificates match the hostname of the remote server, running &lt;code&gt;knife ssl fetch&lt;/code&gt; is the only step required to verify a remote server that is accessed by either knife or the chef-client.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf7c99788cd062757099beb29237157b3245735b" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;knife ssl fetch&lt;/code&gt; subcommand to pull the SSL certificate down from the Chef server:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eae71a31292a879e189e94e20e3291852cc111ca" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;knife status&lt;/code&gt; subcommand to display a brief summary of the nodes on a Chef server, including the time of the most recent successful chef-client run.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99692197c977b4f7e8229481357e3d0669a8ea1e" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;knife upload&lt;/code&gt; subcommand to upload data to the Chef server from the current working directory in the chef-repo. The following types of data may be uploaded with this subcommand:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="557555214d92a8ddfbd51639b54c363f256cdda5" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;knife xargs&lt;/code&gt; subcommand to take patterns from standard input, download as JSON, run a command against the downloaded JSON, and then upload any changes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93dbf331a2ae001683cfcb17c0ce4cc1a3ed7542" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;list-client-keys&lt;/code&gt; subcommand to list client keys.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4fa103c7705333a53ffbb9d451cea94c95af4dad" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;list-user-keys&lt;/code&gt; subcommand to list client keys.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2a006f90c882d4391344e3551779d331f9ef9bc" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;list&lt;/code&gt; argument to list all of the environments that are currently available on the Chef server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e2cebd98f62ea605ae22e56a8666c6fb9d480bf" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;list&lt;/code&gt; argument to list all of the tags that have been applied to a node.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6247bebf17bb505c487f5590462745c34099697e" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;list&lt;/code&gt; argument to view a list of cookbooks that are currently available at &lt;a href=&quot;https://supermarket.chef.io/cookbooks&quot;&gt;https://supermarket.chef.io/cookbooks&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c049eb3f411691f3fadc7caee418342429b0e93" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;list&lt;/code&gt; argument to view a list of cookbooks that are currently available on the Chef server. The list will contain only the most recent version for each cookbook by default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d77afa98b4a047d8ddd1e001a02e389711cad9e" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;list&lt;/code&gt; argument to view a list of data bags that are currently available on the Chef server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab09453d0072599edb15e03e7718dbaa9b3b275e" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;list&lt;/code&gt; argument to view a list of registered API client.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0ed57d2e6da340811f3a53e6b4930fef28b5c2a" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;list&lt;/code&gt; argument to view a list of registered users.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d9207c1e3aa238c893e182f42ff275e96ceeb9f" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;list&lt;/code&gt; argument to view a list of roles that are currently available on the Chef server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d29088bf50138db1b1b2359cc741df590dcfc0a7" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;list&lt;/code&gt; argument to view all of the nodes that exist on a Chef server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="551c7c5d2de78b5287bec30a70f655d6109a637f" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;load_current_value&lt;/code&gt; method to guard against property values being replaced. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0f050e1e424d443f3cd9a723b54cd13d1a37deb" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;load_current_value&lt;/code&gt; method to load the specified property values from the node, and then use those values when the resource is converged. This method may take a block argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7262982e0cbb3ccb9132419482acf488c1d3c67a" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;lockfile&lt;/code&gt; setting in the client.rb file to specify non-default locations for the lock file. (The default location is typically platform-dependent and is recommended.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05a33328bb9fa809a525ed5fe694affee3e3aea6" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;metadata from file&lt;/code&gt; argument to load the metadata for a cookbook from a file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f798982668cb08b9125cbb75a4ee719824c1ba6" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;metadata&lt;/code&gt; argument to generate the metadata for one or more cookbooks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ad92e125dbacb246bf71166d33e0ed723b981d3" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;on&lt;/code&gt; method to associate an event type with a callback. The callback defines what steps are taken if the event occurs during the chef-client run and is defined using arbitrary Ruby code. The syntax is as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61e37a462740d4450511b184b7c67c024807640f" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;on&lt;/code&gt; method to create an event handler that sends email when the chef-client run fails. This will require:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8975f3f091e92cfc6b94cea62bdca561b1cdee88" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;on&lt;/code&gt; method to specify the event type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="834407fdebf0d2e72992dcbf4c4b7e674d986c5c" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;org-create&lt;/code&gt;, &lt;code&gt;org-delete&lt;/code&gt;, &lt;code&gt;org-list&lt;/code&gt;, &lt;code&gt;org-show&lt;/code&gt;, &lt;code&gt;org-user-add&lt;/code&gt; and &lt;code&gt;org-user-remove&lt;/code&gt; commands to manage organizations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d7a82ec7f87675e92fc75d0eea94f2d5af543e4" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;owner&lt;/code&gt; and &lt;code&gt;right&lt;/code&gt; properties and avoid the &lt;code&gt;group&lt;/code&gt; and &lt;code&gt;mode&lt;/code&gt; properties whenever possible. The &lt;code&gt;group&lt;/code&gt; and &lt;code&gt;mode&lt;/code&gt; properties are not true Microsoft Windows concepts and are provided more for backward compatibility than for best practice.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a3621f954b71b3f423cdd1bf4471a50d4842b8c" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;platform?&lt;/code&gt; method to ensure that certain actions are run for specific platform. The &lt;code&gt;platform?&lt;/code&gt; method will return true if one of the listed parameters matches the &lt;code&gt;node['platform']&lt;/code&gt; attribute that is detected by Ohai during every chef-client run.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eea254ba1ff1e4cc097c1796449fac4c46acb269" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;platform_family?&lt;/code&gt; method to ensure that certain actions are run for specific platform family. The &lt;code&gt;platform_family?&lt;/code&gt; method will return true if one of the listed parameters matches the &lt;code&gt;node['platform_family']&lt;/code&gt; attribute that is detected by Ohai during every chef-client run.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b890654f19c90ea7f6fe1c741d64f70b5448e97" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;property&lt;/code&gt; method to define properties for the custom resource. The syntax is:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e93d9f3d44e75eb72d88cd7268737658175eccd3" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;property_is_set?&lt;/code&gt; method to check if the value for a property is set. The syntax is:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e93edf871889a477372408f8e4b879ef4b883f6c" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;provider&lt;/code&gt; property within the resource block to specify the long name of the provider as a property of a resource. For example: &lt;code&gt;provider Chef::Provider::Long::Name&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c3eee443a260d6e60454142071479426a741637" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;provides&lt;/code&gt; method to associate a custom resource with the Recipe DSL on different operating systems. When multiple custom resources use the same DSL, specificity rules are applied to determine the priority, from highest to lowest:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b57bfb34165658d79d9044c36a02fd8eac2804c2" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;ps_credential&lt;/code&gt; helper to embed a &lt;code&gt;PSCredential&lt;/code&gt; object&amp;mdash;&lt;a href=&quot;https://technet.microsoft.com/en-us/magazine/ff714574.aspx&quot;&gt;a set of security credentials, such as a user name or password&lt;/a&gt;&amp;mdash;within a script, which allows that script to be run using security credentials.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d1c9f2ecd8ffbea32630be614b76eef454bf8e6" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;raise&lt;/code&gt; keyword to stop a chef-client run by triggering an unhandled exception</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b809fac36c33968c49dd6642b2cae79e81a6f186" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;reboot_pending?&lt;/code&gt; method to test if a node needs a reboot, or is expected to reboot. &lt;code&gt;reboot_pending?&lt;/code&gt; returns &lt;code&gt;true&lt;/code&gt; when the node needs a reboot.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="366e4b2c3272d72f5f3aeb03669ce834f91bb649" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;recipe_name&lt;/code&gt; method to return the name of a recipe.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b155c03987f6a6f02a6723f217b166f971fb7d25" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;registry_data_exists?&lt;/code&gt; method to find out if a Microsoft Windows registry key contains the specified data of the specified type under the value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c33747c4557fe1de6f29574464161fc18705b8a" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;registry_get_subkeys&lt;/code&gt; method to get a list of registry key values that are present for a Microsoft Windows registry key.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e80da035bb6729fda9d984c7fe15041b86ba3341" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;registry_get_values&lt;/code&gt; method to get the registry key values (name, type, and data) for a Microsoft Windows registry key.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15060630594455a1a6b7b00ac785018e4d64c00b" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;registry_has_subkeys?&lt;/code&gt; method to find out if a Microsoft Windows registry key has one (or more) values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d42eb7df40ec285c95bfb21cd06f308f220fed2f" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;registry_key_exists?&lt;/code&gt; method to find out if a Microsoft Windows registry key exists at the specified path.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d176d7f1f3dd45872cded0f9b7a89d8c5b4c352d" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;registry_value_exists?&lt;/code&gt; method to find out if a registry key value exists. Use &lt;code&gt;registry_data_exists?&lt;/code&gt; to test for the type and data of a registry key value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08fab553855cc2127336e8807637ef89d9aeb1c2" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;render&lt;/code&gt; method in a template to reference a partial template file:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9f082f253eade2d7b8363854bd28ba6c0f80991" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;reregister&lt;/code&gt; argument to regenerate an RSA key pair for a user. The public key will be stored on the Chef server and the private key will be displayed on &lt;code&gt;STDOUT&lt;/code&gt; or written to a named file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac3fa4f51165a37df496d95c459d058ac9c6cb02" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;reregister&lt;/code&gt; argument to regenerate an RSA key pair for an API client. The public key will be stored on the Chef server and the private key will be displayed on &lt;code&gt;STDOUT&lt;/code&gt; or written to a named file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4aeeb486152d731333deb6e68aed5a2f7253a8af" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;reset_property&lt;/code&gt; method to clear the value for a property as if it had never been set, and then use the default value. For example, to clear the value for a property named &lt;code&gt;password&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4bf367c62e846e5b178aa328679c4b9b64092bd0" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;resource_name&lt;/code&gt; method at the top of a custom resource to declare a custom name for that resource. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef0c674ab821550de2ccdf089610fac65eda381c" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;resources&lt;/code&gt; method to look up a resource in the resource collection. The &lt;code&gt;resources&lt;/code&gt; method returns the value for the resource that it finds in the resource collection. The preferred syntax for the &lt;code&gt;resources&lt;/code&gt; method is as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f9f89fba3809b53a7a20e5085165d1addc4141c" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;return&lt;/code&gt; keyword to stop processing a recipe based on a condition, but continue processing the chef-client run</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a493faf8785cbfa9e801382df00bdb1a60672db6" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;run_list add&lt;/code&gt; argument to add run-list items (roles or recipes) to a node.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="584fd4f3c3d1a0f9d52782f0c7e8144d8e1aa30b" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;run_list remove&lt;/code&gt; argument to remove run-list items (roles or recipes) from a node. A recipe must be in one of the following formats: fully qualified, cookbook, or default. Both roles and recipes must be in quotes, for example: &lt;code&gt;'role[ROLE_NAME]'&lt;/code&gt; or &lt;code&gt;'recipe[COOKBOOK::RECIPE_NAME]'&lt;/code&gt;. Use a comma to separate roles and recipes when removing more than one, like this: &lt;code&gt;'recipe[COOKBOOK::RECIPE_NAME],COOKBOOK::RECIPE_NAME,role[ROLE_NAME]'&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="450429495eff6e7e3773a78121ddb263f43b7745" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;run_list set&lt;/code&gt; argument to set the run-list for a node. A recipe must be in one of the following formats: fully qualified, cookbook, or default. Both roles and recipes must be in quotes, for example: &lt;code&gt;'role[ROLE_NAME]'&lt;/code&gt; or &lt;code&gt;'recipe[COOKBOOK::RECIPE_NAME]'&lt;/code&gt;. Use a comma to separate roles and recipes when setting more than one, like this: &lt;code&gt;'recipe[COOKBOOK::RECIPE_NAME],COOKBOOK::RECIPE_NAME,role[ROLE_NAME]'&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="977257b993910a9429ee62f85fe7f2d7e44ec778" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;run_lock_timeout&lt;/code&gt; setting in the client.rb file to specify the amount of time (in seconds) to wait for the lock file associated with an in-progress chef-client run to be deleted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47171e0831576f4a7e1789c9ba38005a71ef040b" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;sea:power&lt;/code&gt; re-creation step above first, to follow the difference in the vault permissions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="508f4affe13f4ce48cc9ca79e4cc15bfc1a6c0b2" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;sea:power&lt;/code&gt; recreation step above first, to follow the difference in the vault permissions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68e84fec741c0765af729a0c364bcb852be5a245" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;search&lt;/code&gt; argument to search for a cookbook at &lt;a href=&quot;https://supermarket.chef.io/cookbooks&quot;&gt;https://supermarket.chef.io/cookbooks&lt;/a&gt;. A search query is used to return a list of cookbooks at &lt;a href=&quot;https://supermarket.chef.io/cookbooks&quot;&gt;https://supermarket.chef.io/cookbooks&lt;/a&gt; and uses the same syntax as the &lt;code&gt;knife search&lt;/code&gt; subcommand.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b52c7674019fff750e7506da0d113545ddc5118" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;search&lt;/code&gt; method to perform a search query against the Chef server from within a recipe.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5420b184ac1a8789b1d1cd2803f525760ade84e0" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;share&lt;/code&gt; argument to add a cookbook to &lt;a href=&quot;https://supermarket.chef.io/cookbooks&quot;&gt;https://supermarket.chef.io/cookbooks&lt;/a&gt;. This action will require a user account and a certificate for &lt;a href=&quot;https://supermarket.chef.io&quot;&gt;https://supermarket.chef.io&lt;/a&gt;. By default, knife will use the user name and API key that is identified in the configuration file used during the upload; otherwise these values must be specified on the command line or in an alternate configuration file. If a cookbook already exists on &lt;a href=&quot;https://supermarket.chef.io/cookbooks&quot;&gt;https://supermarket.chef.io/cookbooks&lt;/a&gt;, then only an owner or maintainer of that cookbook can make updates.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0742f9c74324e7953d94a9de88e84bec7405850e" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;show&lt;/code&gt; argument to display information about a node.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed47b9f282742dc35472b3f4692b1ea79d29d18f" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;show&lt;/code&gt; argument to display information about the specified environment.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb32038754c33c01b36eef96d324b81e6507c737" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;show&lt;/code&gt; argument to show the details of a user.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50186697bd7771e4d64ceff6c4560fb720c1e472" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;show&lt;/code&gt; argument to show the details of an API client.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c02be3bb7bcbee6d278f4e70272d028ab9ba9416" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;show&lt;/code&gt; argument to view information about a cookbook on &lt;a href=&quot;https://supermarket.chef.io/cookbooks&quot;&gt;https://supermarket.chef.io/cookbooks&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49e824225ad285c4134afcbe3fea512d9d8f33a4" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;show&lt;/code&gt; argument to view information about a cookbook, parts of a cookbook (attributes, definitions, files, libraries, providers, recipes, resources, and templates), or a file that is associated with a cookbook (including attributes such as checksum or specificity).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d071fef8e9bf5ab079cd3dcb602e51285b978b36" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;show&lt;/code&gt; argument to view the contents of a data bag.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7bd7d0492a4de27bf60d1be6e161a3ac2fca1d5" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;show&lt;/code&gt; argument to view the details of a role.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba380e5d379394962594689bfecbfc792afdb7b8" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;test&lt;/code&gt; argument to test a cookbook for syntax errors. This argument uses Ruby syntax checking to verify every file in a cookbook that ends in .rb and Embedded Ruby (ERB). This argument will respect chefignore files when determining which cookbooks to test for syntax errors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58a10f8fea546a6db45f6b6d40c8fba03665191f" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;unshare&lt;/code&gt; argument to stop the sharing of a cookbook at &lt;a href=&quot;https://supermarket.chef.io/cookbooks&quot;&gt;https://supermarket.chef.io/cookbooks&lt;/a&gt;. Only the maintainer of a cookbook may perform this action.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e89b4b24dd07d0624722db7058dedcab91d7378" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;upload&lt;/code&gt; argument to upload one or more cookbooks (and any files that are associated with those cookbooks) from a local repository to the Chef server. Only files that do not already exist on the Chef server will be uploaded.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d05c2d09e325c7c07fed5fc42791b09ba3cbb90" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;user-create&lt;/code&gt;, &lt;code&gt;user-delete&lt;/code&gt;, &lt;code&gt;user-edit&lt;/code&gt;, &lt;code&gt;user-list&lt;/code&gt; and &lt;code&gt;user-show&lt;/code&gt; subcommands to manage users.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43a07b71d53c0276bc534c54aba580bffc7d6e78" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;value_for_platform&lt;/code&gt; method in a recipe to select a value based on the &lt;code&gt;node['platform']&lt;/code&gt; and &lt;code&gt;node['platform_version']&lt;/code&gt; attributes. These values are detected by Ohai during every chef-client run.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c36fdd86667ef62ddf9bbb7aca10480a4ffb0b6c" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;value_for_platform_family&lt;/code&gt; method in a recipe to select a value based on the &lt;code&gt;node['platform_family']&lt;/code&gt; attribute. This value is detected by Ohai during every chef-client run.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7453b9383f6f43687daa6ed1712b1ce82ba6b2d0" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;wc&lt;/code&gt; command to get the character count of a large node object file. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10ef89f4a254f8045426030b1de27b73f7603cb7" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;with_run_context&lt;/code&gt; method to define a block that has a pointer to a location in the &lt;code&gt;run_context&lt;/code&gt; hierarchy. Resources in recipes always run at the root of the &lt;code&gt;run_context&lt;/code&gt; hierarchy, whereas custom resources and notification blocks always build a child &lt;code&gt;run_context&lt;/code&gt; which contains their sub-resources.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ec60b3b199d9c35cb58aa144db5f7f7db790d07" translate="yes" xml:space="preserve">
          <source>Use the &lt;strong&gt;Create&lt;/strong&gt; global permission to define which users and groups may create the following server object types: cookbooks, data bags, environments, nodes, roles, and tags. This permission is required for any user who uses the &lt;code&gt;knife [object] create&lt;/code&gt; argument to interact with objects on the Chef server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce753ac54606793a8ebf04547e1649c504b49535" translate="yes" xml:space="preserve">
          <source>Use the &lt;strong&gt;Delete&lt;/strong&gt; permission to define which users and groups may delete an object. This permission is required for any user who uses the &lt;code&gt;knife [object] delete [object_name]&lt;/code&gt; argument to interact with objects on the Chef server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d261956a2e0b7777fe260c55af70c5852c93f0be" translate="yes" xml:space="preserve">
          <source>Use the &lt;strong&gt;Grant&lt;/strong&gt; permission to define which users and groups may configure permissions on an object. This permission is required for any user who configures permissions using the &lt;strong&gt;Administration&lt;/strong&gt; tab in the Chef management console.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4741d620c10e18ceda12e0a19c2a7406c177b5f" translate="yes" xml:space="preserve">
          <source>Use the &lt;strong&gt;List&lt;/strong&gt; global permission to define which users and groups may view the following server object types: cookbooks, data bags, environments, nodes, roles, and tags. This permission is required for any user who uses the &lt;code&gt;knife [object] list&lt;/code&gt; argument to interact with objects on the Chef server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="032b2cfaf62b05a4e88362d2d25bef1d3e54b0b6" translate="yes" xml:space="preserve">
          <source>Use the &lt;strong&gt;Read&lt;/strong&gt; permission to define which users and groups may view the details of an object. This permission is required for any user who uses the &lt;code&gt;knife [object] show [object_name]&lt;/code&gt; argument to interact with objects on the Chef server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c604a48448f3a87e180aa9df7314a2511f8d992" translate="yes" xml:space="preserve">
          <source>Use the &lt;strong&gt;Update&lt;/strong&gt; permission to define which users and groups may edit the details of an object. This permission is required for any user who uses the &lt;code&gt;knife [object] edit [object_name]&lt;/code&gt; argument to interact with objects on the Chef server and for any chef-client to save node data to the Chef server at the conclusion of a chef-client run.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7166aff231c0a04702fdc0393345f87bdc208e12" translate="yes" xml:space="preserve">
          <source>Use the &lt;strong&gt;apt_package&lt;/strong&gt; resource to manage packages for the Debian and Ubuntu platforms.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be12131d80b28d5df8c363c712d48ab2885f25ac" translate="yes" xml:space="preserve">
          <source>Use the &lt;strong&gt;apt_update&lt;/strong&gt; resource to manage Apt repository updates on Debian and Ubuntu platforms.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fbaf08c28bd501547f529f1be006ed7a4c48f54f" translate="yes" xml:space="preserve">
          <source>Use the &lt;strong&gt;bash&lt;/strong&gt; resource to execute scripts using the Bash interpreter. This resource may also use any of the actions and properties that are available to the &lt;strong&gt;execute&lt;/strong&gt; resource. Commands that are executed with this resource are (by their nature) not idempotent, as they are typically unique to the environment in which they are run. Use &lt;code&gt;not_if&lt;/code&gt; and &lt;code&gt;only_if&lt;/code&gt; to guard this resource for idempotence.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89ca34a371bcab395e46fe5aa9ee6aee3559b6e4" translate="yes" xml:space="preserve">
          <source>Use the &lt;strong&gt;bash&lt;/strong&gt; resource to install the package on the node, but only when the package is not already installed</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="677e88bbec47d21f42cea7fe662f74ae7ea8cdfa" translate="yes" xml:space="preserve">
          <source>Use the &lt;strong&gt;batch&lt;/strong&gt; resource to execute a batch script using the cmd.exe interpreter. The &lt;strong&gt;batch&lt;/strong&gt; resource creates and executes a temporary file (similar to how the &lt;strong&gt;script&lt;/strong&gt; resource behaves), rather than running the command inline. This resource inherits actions (&lt;code&gt;:run&lt;/code&gt; and &lt;code&gt;:nothing&lt;/code&gt;) and properties (&lt;code&gt;creates&lt;/code&gt;, &lt;code&gt;cwd&lt;/code&gt;, &lt;code&gt;environment&lt;/code&gt;, &lt;code&gt;group&lt;/code&gt;, &lt;code&gt;path&lt;/code&gt;, &lt;code&gt;timeout&lt;/code&gt;, and &lt;code&gt;user&lt;/code&gt;) from the &lt;strong&gt;execute&lt;/strong&gt; resource. Commands that are executed with this resource are (by their nature) not idempotent, as they are typically unique to the environment in which they are run. Use &lt;code&gt;not_if&lt;/code&gt; and &lt;code&gt;only_if&lt;/code&gt; to guard this resource for idempotence.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac2c87a62f39fcf9c43c531bdfeef73ad08f7c6e" translate="yes" xml:space="preserve">
          <source>Use the &lt;strong&gt;bff_package&lt;/strong&gt; resource to manage packages for the AIX platform using the installp utility. When a package is installed from a local file, it must be added to the node using the &lt;strong&gt;remote_file&lt;/strong&gt; or &lt;strong&gt;cookbook_file&lt;/strong&gt; resources.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b987cf240df0fa9fb8013559e78d9667f60d28db" translate="yes" xml:space="preserve">
          <source>Use the &lt;strong&gt;breakpoint&lt;/strong&gt; resource to add breakpoints to recipes. Run the chef-shell in chef-client mode, and then use those breakpoints to debug recipes. Breakpoints are ignored by the chef-client during an actual chef-client run. That said, breakpoints are typically used to debug recipes only when running them in a non-production environment, after which they are removed from those recipes before the parent cookbook is uploaded to the Chef server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9e2ee0608311e6069ae5775da91f9451d1c4e2a" translate="yes" xml:space="preserve">
          <source>Use the &lt;strong&gt;chef_gem&lt;/strong&gt; resource to install a gem only for the instance of Ruby that is dedicated to the chef-client. When a package is installed from a local file, it must be added to the node using the &lt;strong&gt;remote_file&lt;/strong&gt; or &lt;strong&gt;cookbook_file&lt;/strong&gt; resources.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="948156762fbfa51cb4c42c477f7513466819d45d" translate="yes" xml:space="preserve">
          <source>Use the &lt;strong&gt;chef_gem&lt;/strong&gt; resource to install gems that are needed by the chef-client during the execution phase.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="675ecd4e092b95f3fd511e8877d8bf182a3599e3" translate="yes" xml:space="preserve">
          <source>Use the &lt;strong&gt;chef_handler&lt;/strong&gt; resource to enable handlers during a chef-client run. The resource allows arguments to be passed to the chef-client, which then applies the conditions defined by the custom handler to the node attribute data collected during the chef-client run, and then processes the handler based on that data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="337aa68feb0e1cea62e94479594be739c88d5765" translate="yes" xml:space="preserve">
          <source>Use the &lt;strong&gt;chocolatey_package&lt;/strong&gt; resource to manage packages using Chocolatey for the Microsoft Windows platform.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3cc5649c23b3a3322f870fc4c144efaaa52ac4ea" translate="yes" xml:space="preserve">
          <source>Use the &lt;strong&gt;cookbook_file&lt;/strong&gt; resource to copy a file from a cookbook&amp;rsquo;s &lt;code&gt;/files&lt;/code&gt; directory. Use the &lt;strong&gt;template&lt;/strong&gt; resource to create a file based on a template in a cookbook&amp;rsquo;s &lt;code&gt;/templates&lt;/code&gt; directory. And use the &lt;strong&gt;remote_file&lt;/strong&gt; resource to transfer a file to a node from a remote location.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b71e67ab7f06235997ede8875db89e7b342b1769" translate="yes" xml:space="preserve">
          <source>Use the &lt;strong&gt;cookbook_file&lt;/strong&gt; resource to transfer files from a sub-directory of &lt;code&gt;COOKBOOK_NAME/files/&lt;/code&gt; to a specified path located on a host that is running the chef-client. The file is selected according to file specificity, which allows different source files to be used based on the hostname, host platform (operating system, distro, or as appropriate), or platform version. Files that are located in the &lt;code&gt;COOKBOOK_NAME/files/default&lt;/code&gt; sub-directory may be used on any platform.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06db049ed297d81c67e7887490d284caa11ca40e" translate="yes" xml:space="preserve">
          <source>Use the &lt;strong&gt;cron&lt;/strong&gt; resource to manage cron entries for time-based job scheduling. Properties for a schedule will default to &lt;code&gt;*&lt;/code&gt; if not provided. The &lt;strong&gt;cron&lt;/strong&gt; resource requires access to a crontab program, typically cron.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e6864f6b5d04d408d2aaaa26af13acb0b3a369a" translate="yes" xml:space="preserve">
          <source>Use the &lt;strong&gt;csh&lt;/strong&gt; resource to execute scripts using the csh interpreter. This resource may also use any of the actions and properties that are available to the &lt;strong&gt;execute&lt;/strong&gt; resource. Commands that are executed with this resource are (by their nature) not idempotent, as they are typically unique to the environment in which they are run. Use &lt;code&gt;not_if&lt;/code&gt; and &lt;code&gt;only_if&lt;/code&gt; to guard this resource for idempotence.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4de0986a7ea78e3a9866e60daee96853ad59a796" translate="yes" xml:space="preserve">
          <source>Use the &lt;strong&gt;deploy&lt;/strong&gt; resource to manage and control deployments. This is a popular resource, but is also complex, having the most properties, multiple providers, the added complexity of callbacks, plus four attributes that support layout modifications from within a recipe.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98d1a49a4ed01f402c04b42451251324f1e7adfe" translate="yes" xml:space="preserve">
          <source>Use the &lt;strong&gt;directory&lt;/strong&gt; resource to create the &lt;code&gt;/var/www/vhosts&lt;/code&gt; directory on the node:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3014efe157591e10b9006754f38885cc79fe9440" translate="yes" xml:space="preserve">
          <source>Use the &lt;strong&gt;directory&lt;/strong&gt; resource to manage a directory, which is a hierarchy of folders that comprises all of the information stored on a computer. The root directory is the top-level, under which the rest of the directory is organized. The &lt;strong&gt;directory&lt;/strong&gt; resource uses the &lt;code&gt;name&lt;/code&gt; property to specify the path to a location in a directory. Typically, permission to access that location in the directory is required.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39ebd8f223e2da98f1f4fe32e698251bef2ffeb8" translate="yes" xml:space="preserve">
          <source>Use the &lt;strong&gt;dpkg_package&lt;/strong&gt; resource to manage packages for the dpkg platform. When a package is installed from a local file, it must be added to the node using the &lt;strong&gt;remote_file&lt;/strong&gt; or &lt;strong&gt;cookbook_file&lt;/strong&gt; resources.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6477a5686eaf401c903ee4d4d14cced35662d870" translate="yes" xml:space="preserve">
          <source>Use the &lt;strong&gt;easy_install_package&lt;/strong&gt; resource to manage packages for the Python platform.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="612a91435c6158156cba9a752734e580a8b125ce" translate="yes" xml:space="preserve">
          <source>Use the &lt;strong&gt;env&lt;/strong&gt; resource to manage environment keys in Microsoft Windows. After an environment key is set, Microsoft Windows must be restarted before the environment key will be available to the Task Scheduler.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c2237b910251373078c607166c83d27b352f6e5" translate="yes" xml:space="preserve">
          <source>Use the &lt;strong&gt;erl_call&lt;/strong&gt; resource to connect to a node located within a distributed Erlang system. Commands that are executed with this resource are (by their nature) not idempotent, as they are typically unique to the environment in which they are run. Use &lt;code&gt;not_if&lt;/code&gt; and &lt;code&gt;only_if&lt;/code&gt; to guard this resource for idempotence.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="181731579984b2e96d816dd4a6ea66a605d8e4e5" translate="yes" xml:space="preserve">
          <source>Use the &lt;strong&gt;execute&lt;/strong&gt; resource to execute a single command. Commands that are executed with this resource are (by their nature) not idempotent, as they are typically unique to the environment in which they are run. Use &lt;code&gt;not_if&lt;/code&gt; and &lt;code&gt;only_if&lt;/code&gt; to guard this resource for idempotence.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5cf5e1fd4d63f5e5a12f86fb2bc130ea58829752" translate="yes" xml:space="preserve">
          <source>Use the &lt;strong&gt;execute&lt;/strong&gt; resource to run a single command. Use multiple &lt;strong&gt;execute&lt;/strong&gt; resource blocks to run multiple commands.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca2d567b0931aeeb9abd4e62143fa96f5828069d" translate="yes" xml:space="preserve">
          <source>Use the &lt;strong&gt;file&lt;/strong&gt; resource to manage files directly on a node.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72197bd8a7c79a5b9c776b2cf935c6e1a8dadb1c" translate="yes" xml:space="preserve">
          <source>Use the &lt;strong&gt;freebsd_package&lt;/strong&gt; resource to manage packages for the FreeBSD platform.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="893ede68bd872363279a84faf0196df54adcf46a" translate="yes" xml:space="preserve">
          <source>Use the &lt;strong&gt;gem_package&lt;/strong&gt; resource to manage gem packages that are only included in recipes. When a package is installed from a local file, it must be added to the node using the &lt;strong&gt;remote_file&lt;/strong&gt; or &lt;strong&gt;cookbook_file&lt;/strong&gt; resources.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b037ffaf121a050a88a96784a098dce8ab2653a6" translate="yes" xml:space="preserve">
          <source>Use the &lt;strong&gt;git&lt;/strong&gt; resource to manage source control resources that exist in a git repository. git version 1.6.5 (or higher) is required to use all of the functionality in the &lt;strong&gt;git&lt;/strong&gt; resource.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="364b27e1b10ad6fc3df234b043a6f2ff03250bf9" translate="yes" xml:space="preserve">
          <source>Use the &lt;strong&gt;group&lt;/strong&gt; resource to manage a local group.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c275828bb71af3cb39156a6739f7b33c1735944" translate="yes" xml:space="preserve">
          <source>Use the &lt;strong&gt;homebrew_package&lt;/strong&gt; resource to manage packages for the Mac OS X platform.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a77409fe34ff1a52101c0b65cec2cbef482ce0c" translate="yes" xml:space="preserve">
          <source>Use the &lt;strong&gt;http_request&lt;/strong&gt; resource to send an HTTP request (&lt;code&gt;GET&lt;/code&gt;, &lt;code&gt;PUT&lt;/code&gt;, &lt;code&gt;POST&lt;/code&gt;, &lt;code&gt;DELETE&lt;/code&gt;, &lt;code&gt;HEAD&lt;/code&gt;, or &lt;code&gt;OPTIONS&lt;/code&gt;) with an arbitrary message. This resource is often useful when custom callbacks are necessary.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08fe5f76d9264c393dcbe293c862a6945e22eb3c" translate="yes" xml:space="preserve">
          <source>Use the &lt;strong&gt;ifconfig&lt;/strong&gt; resource to manage interfaces.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57b311520fdd77b6c3ac8c80ef929e6f312a0b1f" translate="yes" xml:space="preserve">
          <source>Use the &lt;strong&gt;ips_package&lt;/strong&gt; resource to manage packages (using Image Packaging System (IPS)) on the Solaris 11 platform.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa7f58a0cfb975303d8003e8bde63fb108a743e8" translate="yes" xml:space="preserve">
          <source>Use the &lt;strong&gt;ksh&lt;/strong&gt; resource to execute scripts using the Korn shell (ksh) interpreter. This resource may also use any of the actions and properties that are available to the &lt;strong&gt;execute&lt;/strong&gt; resource. Commands that are executed with this resource are (by their nature) not idempotent, as they are typically unique to the environment in which they are run. Use &lt;code&gt;not_if&lt;/code&gt; and &lt;code&gt;only_if&lt;/code&gt; to guard this resource for idempotence.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d1724c595266e206a8a5796e92056d9dc3390ff" translate="yes" xml:space="preserve">
          <source>Use the &lt;strong&gt;launchd&lt;/strong&gt; resource to manage system-wide services (daemons) and per-user services (agents) on the Mac OS X platform.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5354da973aca7c570bedb9130be87f426025c027" translate="yes" xml:space="preserve">
          <source>Use the &lt;strong&gt;link&lt;/strong&gt; resource to create symbolic or hard links.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd6e1deb7c2034441f18224a38361a9253a2e553" translate="yes" xml:space="preserve">
          <source>Use the &lt;strong&gt;log&lt;/strong&gt; resource to create log entries. The &lt;strong&gt;log&lt;/strong&gt; resource behaves like any other resource: built into the resource collection during the compile phase, and then run during the execution phase. (To create a log entry that is not built into the resource collection, use &lt;code&gt;Chef::Log&lt;/code&gt; instead of the &lt;strong&gt;log&lt;/strong&gt; resource.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84c2e7065cf3608463e4f376afbd990b67e6f7b7" translate="yes" xml:space="preserve">
          <source>Use the &lt;strong&gt;macports_package&lt;/strong&gt; resource to manage packages for the Mac OS X platform.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee91ca3a487cc7f19b95ea5d89855713e1603630" translate="yes" xml:space="preserve">
          <source>Use the &lt;strong&gt;mdadm&lt;/strong&gt; resource to manage RAID devices in a Linux environment using the mdadm utility. The &lt;strong&gt;mdadm&lt;/strong&gt; provider will create and assemble an array, but it will not create the config file that is used to persist the array upon reboot. If the config file is required, it must be done by specifying a template with the correct array layout, and then by using the &lt;strong&gt;mount&lt;/strong&gt; provider to create a file systems table (fstab) entry.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ee770db601d15771798a415579fd73c30035dc1" translate="yes" xml:space="preserve">
          <source>Use the &lt;strong&gt;mount&lt;/strong&gt; resource to manage a mounted file system.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a9ebe5f4cda020eb74fcb5094a9e7b5f1480dd9" translate="yes" xml:space="preserve">
          <source>Use the &lt;strong&gt;ohai&lt;/strong&gt; resource to reload the Ohai configuration on a node. This allows recipes that change system attributes (like a recipe that adds a user) to refer to those attributes later on during the chef-client run.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4e96ec1d99d7a091968dbd5e43b05a1b4198a0e" translate="yes" xml:space="preserve">
          <source>Use the &lt;strong&gt;openbsd_package&lt;/strong&gt; resource to manage packages for the OpenBSD platform.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f09854760eefe202c8aec9ab08cf71db7cf2ddf" translate="yes" xml:space="preserve">
          <source>Use the &lt;strong&gt;osx_profile&lt;/strong&gt; resource to manage configuration profiles (&lt;code&gt;.mobileconfig&lt;/code&gt; files) on the Mac OS X platform. The &lt;strong&gt;osx_profile&lt;/strong&gt; resource installs profiles by using the &lt;code&gt;uuidgen&lt;/code&gt; library to generate a unique &lt;code&gt;ProfileUUID&lt;/code&gt;, and then using the &lt;code&gt;profiles&lt;/code&gt; command to install the profile on the system.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97c776bd23050fe9c39f15fa76ef49973948e0b7" translate="yes" xml:space="preserve">
          <source>Use the &lt;strong&gt;package&lt;/strong&gt; resource to install httpd:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="edaa47a34abb5ad6836a3f292f845cc294ac8901" translate="yes" xml:space="preserve">
          <source>Use the &lt;strong&gt;package&lt;/strong&gt; resource to manage packages. When the package is installed from a local file (such as with RubyGems, dpkg, or RPM Package Manager), the file must be added to the node using the &lt;strong&gt;remote_file&lt;/strong&gt; or &lt;strong&gt;cookbook_file&lt;/strong&gt; resources.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61ee9c81789af5c67ed583f61a2bac99d2663b21" translate="yes" xml:space="preserve">
          <source>Use the &lt;strong&gt;package&lt;/strong&gt;, &lt;strong&gt;template&lt;/strong&gt; (two times), &lt;strong&gt;directory&lt;/strong&gt;, and &lt;strong&gt;service&lt;/strong&gt; resources to define the &lt;code&gt;website&lt;/code&gt; resource. Remember: order matters !</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dffc9a79f88812fea780ae865713df2980a08f3f" translate="yes" xml:space="preserve">
          <source>Use the &lt;strong&gt;pacman_package&lt;/strong&gt; resource to manage packages (using pacman) on the Arch Linux platform.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b3e8b6fd904c8d90fae3861d137c2289b503854" translate="yes" xml:space="preserve">
          <source>Use the &lt;strong&gt;paludis_package&lt;/strong&gt; resource to manage packages for the Paludis platform.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b89ea8e2bfa633563ad693f615948189c8b58fe5" translate="yes" xml:space="preserve">
          <source>Use the &lt;strong&gt;perl&lt;/strong&gt; resource to execute scripts using the Perl interpreter. This resource may also use any of the actions and properties that are available to the &lt;strong&gt;execute&lt;/strong&gt; resource. Commands that are executed with this resource are (by their nature) not idempotent, as they are typically unique to the environment in which they are run. Use &lt;code&gt;not_if&lt;/code&gt; and &lt;code&gt;only_if&lt;/code&gt; to guard this resource for idempotence.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef0b1413fb2384d70ced09a9653e73736e71c8da" translate="yes" xml:space="preserve">
          <source>Use the &lt;strong&gt;portage_package&lt;/strong&gt; resource to manage packages for the Gentoo platform.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="147d92f9423d09eabc92c3a46b854089ae147d62" translate="yes" xml:space="preserve">
          <source>Use the &lt;strong&gt;powershell_script&lt;/strong&gt; resource to execute a script using the Windows PowerShell interpreter, much like how the &lt;strong&gt;script&lt;/strong&gt; and &lt;strong&gt;script&lt;/strong&gt;-based resources&amp;mdash;&lt;strong&gt;bash&lt;/strong&gt;, &lt;strong&gt;csh&lt;/strong&gt;, &lt;strong&gt;perl&lt;/strong&gt;, &lt;strong&gt;python&lt;/strong&gt;, and &lt;strong&gt;ruby&lt;/strong&gt;&amp;mdash;are used. The &lt;strong&gt;powershell_script&lt;/strong&gt; is specific to the Microsoft Windows platform and the Windows PowerShell interpreter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="925199f5eebd0e001cbe7f0d116c764a0be83069" translate="yes" xml:space="preserve">
          <source>Use the &lt;strong&gt;python&lt;/strong&gt; resource to execute scripts using the Python interpreter. This resource may also use any of the actions and properties that are available to the &lt;strong&gt;execute&lt;/strong&gt; resource. Commands that are executed with this resource are (by their nature) not idempotent, as they are typically unique to the environment in which they are run. Use &lt;code&gt;not_if&lt;/code&gt; and &lt;code&gt;only_if&lt;/code&gt; to guard this resource for idempotence.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fbc3d775627937453b722e78f2b315f80ca25126" translate="yes" xml:space="preserve">
          <source>Use the &lt;strong&gt;reboot&lt;/strong&gt; resource to reboot a node, a necessary step with some installations on certain platforms. This resource is supported for use on the Microsoft Windows, Mac OS X, and Linux platforms.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="922b566218dcf6b57b581913f2840d0d826d2037" translate="yes" xml:space="preserve">
          <source>Use the &lt;strong&gt;registry_key&lt;/strong&gt; resource to create and delete registry keys in Microsoft Windows.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40d766a3e9221cb87e51acf8a9e58a7d103054ae" translate="yes" xml:space="preserve">
          <source>Use the &lt;strong&gt;remote_directory&lt;/strong&gt; resource to incrementally transfer a directory from a cookbook to a node. The directory that is copied from the cookbook should be located under &lt;code&gt;COOKBOOK_NAME/files/default/REMOTE_DIRECTORY&lt;/code&gt;. The &lt;strong&gt;remote_directory&lt;/strong&gt; resource will obey file specificity.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c437acafd1ff2641117e3080e70e1224d96feb0a" translate="yes" xml:space="preserve">
          <source>Use the &lt;strong&gt;remote_file&lt;/strong&gt; resource to transfer a file from a remote location using file specificity. This resource is similar to the &lt;strong&gt;file&lt;/strong&gt; resource.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16f68c615a59c98ec85989c03b00905e62a3963b" translate="yes" xml:space="preserve">
          <source>Use the &lt;strong&gt;route&lt;/strong&gt; resource to manage the system routing table in a Linux environment.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16eb2b5d177da6a86831305ac129ba7696ba42a3" translate="yes" xml:space="preserve">
          <source>Use the &lt;strong&gt;rpm_package&lt;/strong&gt; resource to manage packages for the RPM Package Manager platform.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f77348664d28010b862223bb63f6ee928d39d4f" translate="yes" xml:space="preserve">
          <source>Use the &lt;strong&gt;ruby&lt;/strong&gt; resource to execute scripts using the Ruby interpreter. This resource may also use any of the actions and properties that are available to the &lt;strong&gt;execute&lt;/strong&gt; resource. Commands that are executed with this resource are (by their nature) not idempotent, as they are typically unique to the environment in which they are run. Use &lt;code&gt;not_if&lt;/code&gt; and &lt;code&gt;only_if&lt;/code&gt; to guard this resource for idempotence.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="652e680cf7d133b13b5b249b82eb1e879584e688" translate="yes" xml:space="preserve">
          <source>Use the &lt;strong&gt;ruby_block&lt;/strong&gt; resource to execute Ruby code during a chef-client run. Ruby code in the &lt;code&gt;ruby_block&lt;/code&gt; resource is evaluated with other resources during convergence, whereas Ruby code outside of a &lt;code&gt;ruby_block&lt;/code&gt; resource is evaluated before other resources, as the recipe is compiled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="785f40219e9f5bd2a9c4e99a43a760731c77232f" translate="yes" xml:space="preserve">
          <source>Use the &lt;strong&gt;script&lt;/strong&gt; resource to execute a script using a specific interpreter (Ruby, Python, Perl, csh, or Bash).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2161d1c2eaaa66a62bc140895fb35dfbdbd6b572" translate="yes" xml:space="preserve">
          <source>Use the &lt;strong&gt;script&lt;/strong&gt; resource to execute scripts using a specified interpreter, such as Bash, csh, Perl, Python, or Ruby. This resource may also use any of the actions and properties that are available to the &lt;strong&gt;execute&lt;/strong&gt; resource. Commands that are executed with this resource are (by their nature) not idempotent, as they are typically unique to the environment in which they are run. Use &lt;code&gt;not_if&lt;/code&gt; and &lt;code&gt;only_if&lt;/code&gt; to guard this resource for idempotence.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c2aefc00f45ad814f6ea056fedff141222d2915" translate="yes" xml:space="preserve">
          <source>Use the &lt;strong&gt;service&lt;/strong&gt; resource to enable, and then start the service:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75ad0bbd2d4558d71c9e43c41cb84bfa84065584" translate="yes" xml:space="preserve">
          <source>Use the &lt;strong&gt;service&lt;/strong&gt; resource to manage a service.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01f40ab2d13fd9d46c78fa32abd79432e45474a8" translate="yes" xml:space="preserve">
          <source>Use the &lt;strong&gt;service&lt;/strong&gt; resource to restart and reload the Nginx service</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22b6f9f974e040d9a68bf8b5d35a03da15525d38" translate="yes" xml:space="preserve">
          <source>Use the &lt;strong&gt;smartos_package&lt;/strong&gt; resource to manage packages for the SmartOS platform.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70217323d9db0929eebf6fc62f5b4a10e67b59c8" translate="yes" xml:space="preserve">
          <source>Use the &lt;strong&gt;subversion&lt;/strong&gt; resource to manage source control resources that exist in a Subversion repository.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b0d2e1fe8c4e580e021172734a739600d35d6ae" translate="yes" xml:space="preserve">
          <source>Use the &lt;strong&gt;template&lt;/strong&gt; resource to configure httpd on the node based on the &lt;code&gt;httpd.conf.erb&lt;/code&gt; template located in the cookbook:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91d68ce8ae712a40e66f17ff3531b10dd0b885c9" translate="yes" xml:space="preserve">
          <source>Use the &lt;strong&gt;template&lt;/strong&gt; resource to create an &lt;code&gt;httpd.service&lt;/code&gt; on the node based on the &lt;code&gt;httpd.service.erb&lt;/code&gt; template located in the cookbook:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3278536a9bbeb436bc4f4663526f902d7db3464" translate="yes" xml:space="preserve">
          <source>Use the &lt;strong&gt;template&lt;/strong&gt; resource to manage the contents of a file using an Embedded Ruby (ERB) template by transferring files from a sub-directory of &lt;code&gt;COOKBOOK_NAME/templates/&lt;/code&gt; to a specified path located on a host that is running the chef-client. This resource includes actions and properties from the &lt;strong&gt;file&lt;/strong&gt; resource. Template files managed by the &lt;strong&gt;template&lt;/strong&gt; resource follow the same file specificity rules as the &lt;strong&gt;remote_file&lt;/strong&gt; and &lt;strong&gt;file&lt;/strong&gt; resources.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="784234285789d4425b6b71125672c8bf671bb11b" translate="yes" xml:space="preserve">
          <source>Use the &lt;strong&gt;user&lt;/strong&gt; resource to add users, update existing users, remove users, and to lock/unlock user passwords.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad1118450fd8840b0b379bebd70e1316541cedd9" translate="yes" xml:space="preserve">
          <source>Use the &lt;strong&gt;windows_package&lt;/strong&gt; resource to manage Microsoft Installer Package (MSI) packages for the Microsoft Windows platform.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ebdea0aaf5302da52533cf928f59d66a830d041a" translate="yes" xml:space="preserve">
          <source>Use the &lt;strong&gt;windows_service&lt;/strong&gt; resource to manage a service on the Microsoft Windows platform.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97a209a27724b4510cf0bc5b8ef732cda4e45609" translate="yes" xml:space="preserve">
          <source>Use the &lt;strong&gt;yum_package&lt;/strong&gt; resource to install, upgrade, and remove packages with Yum for the Red Hat and CentOS platforms. The &lt;strong&gt;yum_package&lt;/strong&gt; resource is able to resolve &lt;code&gt;provides&lt;/code&gt; data for packages much like Yum can do when it is run from the command line. This allows a variety of options for installing packages, like minimum versions, virtual provides, and library names.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24c520a51939fc7b2c4b0bd20b0278764d5c3f20" translate="yes" xml:space="preserve">
          <source>Use the Chef DK</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1bfa7e7daac99ab63bdeb3418321c68e5661cc32" translate="yes" xml:space="preserve">
          <source>Use the Chef management console to create a key pair, download the private key, and then set permissions, to delete a key, or to reset a key.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b356b911cf68c4d20c299a67cca402d3333f5d12" translate="yes" xml:space="preserve">
          <source>Use the Handler DSL to attach a callback to an event. If the event occurs during the chef-client run, the associated callback is executed. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4aef8884cfc04b45953c72add25ef694d397795" translate="yes" xml:space="preserve">
          <source>Use the Ruby &lt;code&gt;File&lt;/code&gt; class in a recipe. Because Chef has the &lt;strong&gt;file&lt;/strong&gt; resource, use &lt;code&gt;File&lt;/code&gt; to use the Ruby &lt;code&gt;File&lt;/code&gt; class. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c439c93d2ee1d6b7f1f3f397e128c9abe92bbad" translate="yes" xml:space="preserve">
          <source>Use the Ruby programming language to make decisions about what should happen to specific resources and recipes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62d3b82f957dbe5b3012616a74d842168f33596b" translate="yes" xml:space="preserve">
          <source>Use the backslash character (&lt;code&gt;\&lt;/code&gt;) as an escape character when quotes must appear within strings. However, you do not need to escape single quotes inside double quotes. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4a7fc900ee737a5728b95ca09674134c5ba99a4" translate="yes" xml:space="preserve">
          <source>Use the calculated password shadow hash with the &lt;strong&gt;user&lt;/strong&gt; resource:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60eaa89ef7daa6b956789669d632132c5d9bc929" translate="yes" xml:space="preserve">
          <source>Use the chef command-line tool to work with items in a chef-repo, which is the primary location in which cookbooks are authored, tested, and maintained, and from which policy is uploaded to the Chef server</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28fbb313e56b1d422efa308edf4b73b1b4ee90fe" translate="yes" xml:space="preserve">
          <source>Use the chef generate app command to create the chef-repo.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="227b26532c37c73c77f91d6092a46633be54b193" translate="yes" xml:space="preserve">
          <source>Use the following Ruby types to define &lt;code&gt;property_value&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ebbb1685f2486ae450f5270d41d9c02e250c338" translate="yes" xml:space="preserve">
          <source>Use the following code block to trigger the exception and have the chef-client send email to the specified email address:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="700150ad4b84ead1ba310c07268020644e3a1fd1" translate="yes" xml:space="preserve">
          <source>Use the following code to set the correct permissions:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="899161af972fabc7e1cc06c9a0782f11fc315c35" translate="yes" xml:space="preserve">
          <source>Use the following command to remove the Chef development kit on Debian-based platforms:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1e169733c1723d5caa4b342d2aa2726f00fda90" translate="yes" xml:space="preserve">
          <source>Use the following commands to manage and rotate shared secrets and service credentials. The secrets file used for credential rotation is located at &lt;code&gt;/etc/opscode/private-chef-secrets.json&lt;/code&gt; on your Chef server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa0ee0ed81178146d52152dcddf06355ed649837" translate="yes" xml:space="preserve">
          <source>Use the following commands to manage backups of Chef server data, and then to restore those backups.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba5cf22960520c2ad0adad9f90bde22e220c33a9" translate="yes" xml:space="preserve">
          <source>Use the following commands to manage public and private key rotation for users and clients.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32949a03021b8e6df4bea790de8b420232c0b0f4" translate="yes" xml:space="preserve">
          <source>Use the following commands to monitor global disk usage on a Chef server with a typical installation:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c814435b994bddd006d020727740115ce57c534a" translate="yes" xml:space="preserve">
          <source>Use the following commands to remove the Chef development kit on Mac OS X.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f55f2a6a2540e9a873471bc79c48a46221866169" translate="yes" xml:space="preserve">
          <source>Use the following commands to remove the Chef development kit on Red Hat Enterprise Linux-based platforms:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73b47ebc208abcd11780e009e2e403825084179a" translate="yes" xml:space="preserve">
          <source>Use the following configuration setting to help ensure that Apache Solr does not run out of memory:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="205ae2e0652f6bee017bb92cd8526447c910a72c" translate="yes" xml:space="preserve">
          <source>Use the following configuration setting to improve the indexing performance of node objects:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55c40354df7013b21a7d0b4514054c698a16fa4e" translate="yes" xml:space="preserve">
          <source>Use the following configuration settings in the chef-server.rb file to configure PostgreSQL for use with the Chef server:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae08c717c6eb3041cd86c4ab16ac57ba87dd244a" translate="yes" xml:space="preserve">
          <source>Use the following configuration settings in the chef-server.rb file to configure external cookbook storage using Amazon Simple Storage Service (S3):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82fff5dbce00322979f3ff00e5b0309ba9f343e5" translate="yes" xml:space="preserve">
          <source>Use the following formula to help determine what the increased value should be:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="599d69bed4a8afe3e0aec15727f4a221d154fa59" translate="yes" xml:space="preserve">
          <source>Use the following helpers in a library file to get and/or set resource and/or provider priority mapping before any recipes are compiled:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b3a80eab1eb9136336215fc4edbdd422fdfed6c" translate="yes" xml:space="preserve">
          <source>Use the following knife subcommands to create, install, and/or download cookbooks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3171ad3bdcc76789a6ed3b5ac7694c0bf8f7cfb3" translate="yes" xml:space="preserve">
          <source>Use the following methods within the attributes file for a cookbook or within a recipe. These methods correspond to the attribute type of the same name:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6a131f97721941448ac5c221b477bf672ebd1b2" translate="yes" xml:space="preserve">
          <source>Use the following options with a validatorless bootstrap to specify items that are stored in chef-vault:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7228a4d3bf2017027716d72b78b92bc5386b87f" translate="yes" xml:space="preserve">
          <source>Use the following recipe to set those parameters:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08e02c41b7d97c851010a8d32d48d0a1484c71c3" translate="yes" xml:space="preserve">
          <source>Use the following recipe to specify that configuration:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee02369ae3030f7ad3cf516aa33ec42eb101208c" translate="yes" xml:space="preserve">
          <source>Use the following recipe to specify the location of that data file:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f910e5c605370e7a315e97332ffdb1f780e33dda" translate="yes" xml:space="preserve">
          <source>Use the following sections to verify the hostnames that is used by the Chef server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b71269458f6f754009245945b5e9d112e198b15" translate="yes" xml:space="preserve">
          <source>Use the following setting to specify URLs that do not need a proxy:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc23b1b2b838e95392be2adeee5aa4482bf43697" translate="yes" xml:space="preserve">
          <source>Use the following settings in the client.rb or knife.rb files for environments that use an FTP proxy:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cbbb57393532f175f647b91b1098ce0898c8e7a4" translate="yes" xml:space="preserve">
          <source>Use the following settings in the client.rb or knife.rb files for environments that use an HTTP proxy:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee25cc00886527f6966738761653c0860d141f51" translate="yes" xml:space="preserve">
          <source>Use the following settings in the client.rb or knife.rb files for environments that use an HTTPS proxy:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="edca8df7fe27d6390343b9f21799987dde2df91a" translate="yes" xml:space="preserve">
          <source>Use the following steps to create a topic branch:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bcf8bb4da39e1c94020430d2be0849b326164fc3" translate="yes" xml:space="preserve">
          <source>Use the following steps to keep the master branch up to date.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5af03311cff5d65d244f21b9ba53e693c16f58c5" translate="yes" xml:space="preserve">
          <source>Use the following steps to manually set up the chef-repo and to use the Chef management console to get the .pem and knife.rb files.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a08ad8faadc7be83c309ecce2c498e9cf881f35" translate="yes" xml:space="preserve">
          <source>Use the following steps to manually set up the chef-repo, create the ORGANIZATION-validator.pem and USER.pem files with the chef-server-ctl command line tool, and then create the knife.rb file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61e6823f7c5e131d58b097df9c706afcc5b24b2f" translate="yes" xml:space="preserve">
          <source>Use the following steps to set up a development repository for Chef:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd5d9865d891860b0f358fa9c696fa25fcf66ce0" translate="yes" xml:space="preserve">
          <source>Use the following steps to set up each frontend Chef server:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="512a7ac5ee51045c1b28a90042208e4c87eafccf" translate="yes" xml:space="preserve">
          <source>Use the following steps to set up the backend Chef server:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c67364200bc73944394900186fafa16e4ec4fc6" translate="yes" xml:space="preserve">
          <source>Use the following steps to set up the primary backend Chef server:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77a46bc8dd73ecf94f369b0203d1070b8c49ed06" translate="yes" xml:space="preserve">
          <source>Use the following steps to set up the secondary backend Chef server:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08e11a1146359e135c86768b637110721f3b4dfd" translate="yes" xml:space="preserve">
          <source>Use the following steps to synchronize the master branch.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="221aab09a1b05d063db202c962f29849b4d38b7a" translate="yes" xml:space="preserve">
          <source>Use the knife command-line tool to interact with nodes or work with objects on the Chef server</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d7a05d9de042c546c44a053a067cc4f3a9a7eed" translate="yes" xml:space="preserve">
          <source>Use the long name&amp;mdash;&lt;code&gt;Chef::Provider::Service::AixInit&lt;/code&gt;&amp;mdash;in a recipe to manage services with BSD-based init systems on the AIX platform.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24d1244cf17520314a9efdf799bec1beba87bfb4" translate="yes" xml:space="preserve">
          <source>Use the starter kit built into the Chef server web user interface</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a87b17e19edb31f123289c6d26d8601f34b4513" translate="yes" xml:space="preserve">
          <source>Use the sudo utility</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0469411cbd7723f353d79ff480af58f68510a379" translate="yes" xml:space="preserve">
          <source>Use the verbose logging that is built into knife:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e76cac1dadf923e91bfe39f91f494a65f920b0bb" translate="yes" xml:space="preserve">
          <source>Use the verbose logging that is built into the chef-client:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6d91441d7d8a001e13c83bd573ee44b9f181358" translate="yes" xml:space="preserve">
          <source>Use these keywords in a class. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ae3acb3669a797a5f9a7904ca7fa6cffebc0828" translate="yes" xml:space="preserve">
          <source>Use these keywords in a recipe&amp;mdash;but outside of any resource blocks&amp;mdash;to trigger an unhandled exception during the compile phase. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37a9426e294b77eaf27acb075a47fb18b1b6e177" translate="yes" xml:space="preserve">
          <source>Use these keywords in the &lt;strong&gt;ruby_block&lt;/strong&gt; resource to trigger an unhandled exception during the execute phase. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49f2f5e7980252977831887c114aa1450702a5b9" translate="yes" xml:space="preserve">
          <source>Use these patterns to configure, deploy, and manage nodes across the network</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44b488004843f1f58a6dc48ffbef640dee5a97ee" translate="yes" xml:space="preserve">
          <source>Use this option to define a &lt;code&gt;run_list&lt;/code&gt; object. For example, a JSON file similar to:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0358fc9af3c33d32c760545483cda76ab4442375" translate="yes" xml:space="preserve">
          <source>Use this option to disable a user&amp;rsquo;s system recovery password.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1cdd8663f44b99d43bb1691fc5d18da3c635ace9" translate="yes" xml:space="preserve">
          <source>Use this option to set the &lt;code&gt;chef_environment&lt;/code&gt; value for a node.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="211372a851793a8dc3052f69991056e0c544eeea" translate="yes" xml:space="preserve">
          <source>Use this option to use policy files by specifying a JSON file that contains the following settings:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a595cc690ee5226a77c53c31811f44b578b4de56" translate="yes" xml:space="preserve">
          <source>Use to add a breakpoint to a recipe.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87b8953d2741bbb99f6714a8aa1a39ff4df0f95f" translate="yes" xml:space="preserve">
          <source>Use to add an object to the Chef server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76adf99178658c50dad7e8eaa8758a14db3df04f" translate="yes" xml:space="preserve">
          <source>Use to configure Microsoft Windows optional features.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e6946f13ad29ed07578fdfa59958a779a041d27" translate="yes" xml:space="preserve">
          <source>Use to configure permissions for directories. A string or ID that identifies the group owner by group name, including fully qualified group names such as &lt;code&gt;domain\group&lt;/code&gt; or &lt;code&gt;group@domain&lt;/code&gt;. If this value is not specified, existing groups remain unchanged and new group assignments use the default &lt;code&gt;POSIX&lt;/code&gt; group (if available).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8e852c5c24ffea8de1e9d0567ffb368703f6b51" translate="yes" xml:space="preserve">
          <source>Use to configure permissions for directories. A string or ID that identifies the group owner by user name, including fully qualified user names such as &lt;code&gt;domain\user&lt;/code&gt; or &lt;code&gt;user@domain&lt;/code&gt;. If this value is not specified, existing owners remain unchanged and new owner assignments use the current user (when necessary).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0561ee4518fe7ea7b710516d271f12cea80faa5a" translate="yes" xml:space="preserve">
          <source>Use to configure the chef-client as a service in Microsoft Windows.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f8d800c4f4555e479f7b3313091964829fd6fb4" translate="yes" xml:space="preserve">
          <source>Use to create and initiate jobs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae3a5150c48c0bdc68fe52e67e949635c222184f" translate="yes" xml:space="preserve">
          <source>Use to delete an object from the Chef server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1468c093706999ef8ee37162523e7a2044b74f03" translate="yes" xml:space="preserve">
          <source>Use to disable sign-up and only allow sign-in. Default value: &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25dcc508bddc54da3adc60d07f7b23f60fec9265" translate="yes" xml:space="preserve">
          <source>Use to disable the Chef server API to prevent writes during reindexing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18b7f817f8e9a31d228d27cb6647b0a7920501f3" translate="yes" xml:space="preserve">
          <source>Use to display the aggregate queue backlog.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42225378e8b1074c4832bf60d33f4aca573ce6ef" translate="yes" xml:space="preserve">
          <source>Use to display the marketing name for a Microsoft Windows platform.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="acd1755dd79f2b78e4e2a3b39dc900ece107b7d0" translate="yes" xml:space="preserve">
          <source>Use to dump a stack trace, and continue to run.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39cba5a92ff7e16f25aa455f5bf51752e128ecda" translate="yes" xml:space="preserve">
          <source>Use to enable Chef actions, a premium feature of the Chef server. Default value: &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38a2a03de3fdeccfd19be56d9929637b2a7ad7bd" translate="yes" xml:space="preserve">
          <source>Use to enable the &lt;code&gt;opscode-manage-events&lt;/code&gt; service. Default value: &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="842233cd8ff6624adbff7a64712a193b45fdbf2a" translate="yes" xml:space="preserve">
          <source>Use to enable the &lt;code&gt;opscode-manage-webapp&lt;/code&gt; service. Default value: &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ffcb8f76a5a229d31d10cb560794d41c0693613" translate="yes" xml:space="preserve">
          <source>Use to enable the &lt;code&gt;opscode-manage-worker&lt;/code&gt; service. Default value: &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1206638ad7b8016f3557b298f71f72164a864ac" translate="yes" xml:space="preserve">
          <source>Use to enable write access to the PostgreSQL database.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ee393143afad93453111f3e0387c586a820ea7a" translate="yes" xml:space="preserve">
          <source>Use to exclude the term after &lt;code&gt;NOT&lt;/code&gt; from the search results.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80bbbfee294dbd10bebe4bd17f62af7e12681f66" translate="yes" xml:space="preserve">
          <source>Use to exit immediately upon error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76f7a43da5b091661388b3402b9a238c48221c5f" translate="yes" xml:space="preserve">
          <source>Use to filter the search output based on the pattern that matches the specified &lt;code&gt;FILTER&lt;/code&gt;. Only attributes in the &lt;code&gt;FILTER&lt;/code&gt; will be returned. For example: &lt;code&gt;\&quot;ServerName=name, Kernel=kernel.version\&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20c852c92599bc7836a1d9da19af16dba6bf6378" translate="yes" xml:space="preserve">
          <source>Use to find a match if either term exists.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="275f381bb1c9c081d33715aaf07bedf9bcc8f076" translate="yes" xml:space="preserve">
          <source>Use to find a match when both terms exist.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c889febdd55abeb5eeef89bf98bedd1d932090c" translate="yes" xml:space="preserve">
          <source>Use to get the details of an object on the Chef server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a431aa908c373cf2409a0b6ae7f979d01704aae6" translate="yes" xml:space="preserve">
          <source>Use to import DSC resources from a module.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a535fa98ff2274f7d1aa3279e02ab77626d29978" translate="yes" xml:space="preserve">
          <source>Use to install the chef-client.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2590f0fffba2d78eda66dc7bbb2cf899771db762" translate="yes" xml:space="preserve">
          <source>Use to preserve the non-root user&amp;rsquo;s &lt;code&gt;HOME&lt;/code&gt; environment.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2455856b5ea8175c6d8603d354ec0535c09d26f8" translate="yes" xml:space="preserve">
          <source>Use to print timing information for the reindex processes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50e624565aab3f7b3424756a25a0e81585afc862" translate="yes" xml:space="preserve">
          <source>Use to reconfigure the chef-client.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0fd0c98bc0ae1ea347a22edaa79987039b866a3" translate="yes" xml:space="preserve">
          <source>Use to reindex all organizations on the Chef server. This option will override any organization specified as part of the command, i.e. &lt;code&gt;chef-server-ctl reindex ORG_NAME -a&lt;/code&gt; will reindex all organizations and not just the specified organization.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1232b2d99e23df8b5fa95249da778ffbe6a5931d" translate="yes" xml:space="preserve">
          <source>Use to remove all existing data on the Chef server; it will be replaced by the data in the backup archive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5298591b17449beb142c29d0f3ef119af37e393" translate="yes" xml:space="preserve">
          <source>Use to request an immediate reboot or to queue a reboot using the &lt;code&gt;:reboot_now&lt;/code&gt; (immediate reboot) or &lt;code&gt;:request_reboot&lt;/code&gt; (queued reboot) actions built into the &lt;strong&gt;reboot&lt;/strong&gt; resource.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="683a4a28e950e8d5a5c8da475de4ecde9f262a24" translate="yes" xml:space="preserve">
          <source>Use to return the &lt;code&gt;~&lt;/code&gt; path in Linux and Mac OS X or the &lt;code&gt;%HOMEPATH%&lt;/code&gt; in Microsoft Windows.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99690fe09153c17b912ea3bdf38c2702cb7a9894" translate="yes" xml:space="preserve">
          <source>Use to run the chef-client using default settings. This will prevent the normally-associated configuration file from being used. This setting should only be used for testing purposes and should never be used in a production setting.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85b80eee32b21cc061e32b7edafc34be7520583d" translate="yes" xml:space="preserve">
          <source>Use to send application statistics with StatsD protocol formatting. Set this value to &lt;code&gt;statsd&lt;/code&gt; to apply StatsD protocol formatting.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3bf3a05873efee0f784a96464981ddeaa5acc2b" translate="yes" xml:space="preserve">
          <source>Use to set the IP version: &lt;code&gt;&quot;ipv4&quot;&lt;/code&gt; or &lt;code&gt;&quot;ipv6&quot;&lt;/code&gt;. When set to &lt;code&gt;&quot;ipv6&quot;&lt;/code&gt;, the API listens on IPv6 and front end and back end services communicate via IPv6 when a high availability configuration is used. When configuring for IPv6 in a high availability configuration, be sure to set the netmask on the IPv6 &lt;code&gt;backend_vip&lt;/code&gt; attribute. Default value: &lt;code&gt;&quot;ipv4&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6e48f8e1f4c9c184b30172e7776e616f47d7347" translate="yes" xml:space="preserve">
          <source>Use to set the environment version dependency to the cookbook version being uploaded.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8ace223dfa8e359bd66bb920fc6779113750840" translate="yes" xml:space="preserve">
          <source>Use to show help for the &lt;code&gt;chef-server-ctl upgrade&lt;/code&gt; subcommand.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f8440bf8f3c25d1f4d2e40257c81bfe39985f30" translate="yes" xml:space="preserve">
          <source>Use to show the backlog and consumer counts for each vnode queue.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="175554b01d75d04e6851a980bd1c90257c64ec65" translate="yes" xml:space="preserve">
          <source>Use to show the full public key strings in command output.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e935146a0f3a2e1fa693d6e2a231d562fdf95c8e" translate="yes" xml:space="preserve">
          <source>Use to show the log level for all nodes in the cluster.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2489df46eb3ba03b2eb2d945774cc38834929927" translate="yes" xml:space="preserve">
          <source>Use to show the status for all nodes in the cluster.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f76ba9544f23125884da745a5782350cef3b34a3" translate="yes" xml:space="preserve">
          <source>Use to skip confirmation prompts during the upgrade process.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="304f0b51f062a9d8897874020a3cb2347059f790" translate="yes" xml:space="preserve">
          <source>Use to specify a group or user name. This is identical to what is entered in the login box for Microsoft Windows, such as &lt;code&gt;user_name&lt;/code&gt;, &lt;code&gt;domain\user_name&lt;/code&gt;, or &lt;code&gt;user_name@fully_qualified_domain_name&lt;/code&gt;. The chef-client does not need to know if a principal is a user or a group.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e999a34dd243f80371fa0684c3bf7da2ab65990" translate="yes" xml:space="preserve">
          <source>Use to specify a profile. This may be the name of a profile contained in a cookbook or a Hash that contains the contents of the profile.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c24c2d74f1e082deac32c5fe00b06a12216b158e" translate="yes" xml:space="preserve">
          <source>Use to specify if a file system is already mounted. Default value: &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a534c79cb2f1bee82e96f42df799ceafe547666c" translate="yes" xml:space="preserve">
          <source>Use to specify if a mounted file system is enabled. Default value: &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e267b095e96a8fcb86d139a3c0dd0263f36b57d6" translate="yes" xml:space="preserve">
          <source>Use to specify if the Chef server can go offline during tar.gz-based backups.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c91ce6e5e601233d69507be24f8a0a0138c28605" translate="yes" xml:space="preserve">
          <source>Use to specify that Chef server data on an external PostgreSQL database should be removed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d80fab2943c426cc7193c234f8619bc8d95eb4e" translate="yes" xml:space="preserve">
          <source>Use to specify that search results only return objects to which an actor (user, client, etc.) has read access, as determined by ACL settings. This affects all searches. When &lt;code&gt;true&lt;/code&gt;, the performance of the Chef management console may increase because it enables the Chef management console to skip redundant ACL checks. To ensure the Chef management console is configured properly, after this setting has been applied with a &lt;code&gt;chef-server-ctl reconfigure&lt;/code&gt; run &lt;code&gt;chef-manage-ctl reconfigure&lt;/code&gt; to ensure the Chef management console also picks up the setting. Default value: &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2feab096cbd2e9f44afb037571d008cc11b604b7" translate="yes" xml:space="preserve">
          <source>Use to specify that the path to an empty directory to be used during the restore process. This directory must have enough disk space to expand all data in the backup archive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84b26eee18ad2bfeb53b36c8dad561c9ae5baf24" translate="yes" xml:space="preserve">
          <source>Use to specify the identifier for the profile, such as &lt;code&gt;com.company.screensaver&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25939ad9bec33706ec5bd7fcd6810ba05a919d62" translate="yes" xml:space="preserve">
          <source>Use to specify the local chef-repo layout. Possible values: &lt;code&gt;static&lt;/code&gt; (for environments, roles, data bags, and cookbooks), &lt;code&gt;everything&lt;/code&gt; (same as static, plus nodes, clients, and users), &lt;code&gt;hosted_everything&lt;/code&gt; (for ACLs, groups). Default value: &lt;code&gt;everything/hosted_everything&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10ce8055160c204b7212b59451a496e7afcdebfb" translate="yes" xml:space="preserve">
          <source>Use to specify the location of a package. This option is not required when packages are downloaded from &lt;a href=&quot;https://packages.chef.io/&quot;&gt;https://packages.chef.io/&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96fe29427a62f6406839e4ace77c3345e4149cbf" translate="yes" xml:space="preserve">
          <source>Use to specify the location of the lock file, which prevents multiple chef-client processes from converging at the same time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef7ff32a810f43d112b8f6f8a06523a93e42cf3f" translate="yes" xml:space="preserve">
          <source>Use to specify the name of the profile, if different from the name of the resource block.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca8c51ffa71177e39759df2bebb90b06e704fa40" translate="yes" xml:space="preserve">
          <source>Use to specify the startup type for a Microsoft Windows service. Possible values: &lt;code&gt;:automatic&lt;/code&gt;, &lt;code&gt;:disabled&lt;/code&gt;, or &lt;code&gt;:manual&lt;/code&gt;. Default value: &lt;code&gt;:automatic&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f99fb3243fba076c9305ec28f9b35cb1258e181c" translate="yes" xml:space="preserve">
          <source>Use to specify which rights are granted to the &lt;code&gt;principal&lt;/code&gt;. The possible values are: &lt;code&gt;:read&lt;/code&gt;, &lt;code&gt;:write&lt;/code&gt;, &lt;code&gt;read_execute&lt;/code&gt;, &lt;code&gt;:modify&lt;/code&gt;, and &lt;code&gt;:full_control&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="690749815981af59876c32c2d00b4341441785c1" translate="yes" xml:space="preserve">
          <source>Use to terminate but wait for the current chef-client run to finish, and then exit.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0de501dcbdf00529be9bbc450ef0d5de478b6faa" translate="yes" xml:space="preserve">
          <source>Use to terminate immediately without waiting for the current chef-client run to finish.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9fc801a6d3fdf4be4867ee1546bfa4d75d273b10" translate="yes" xml:space="preserve">
          <source>Use to test for Windows 2000.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e04a1ee5d1a9ba3b10653e03807b8524d9d4cf36" translate="yes" xml:space="preserve">
          <source>Use to test for Windows 7.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b762548e5dffdd0056871700decade741215c31f" translate="yes" xml:space="preserve">
          <source>Use to test for Windows 8.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a291f77a8eeea550554e300b93ada92bf1a0f9b2" translate="yes" xml:space="preserve">
          <source>Use to test for Windows 8.1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ddccd04c00629089fa3be3b7175bd97d4c66c2d" translate="yes" xml:space="preserve">
          <source>Use to test for Windows Home Server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4a0b1846118a423744fbb6f12be6953e6eb71f3" translate="yes" xml:space="preserve">
          <source>Use to test for Windows Server 2003 R2.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e31988ed9874dfedb6cd987b50383510dbeffbf" translate="yes" xml:space="preserve">
          <source>Use to test for Windows Server 2003.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07d2451046f260d9f93ea214cb8c3f70633499d4" translate="yes" xml:space="preserve">
          <source>Use to test for Windows Server 2008 R2.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f3d7403ace41afdec1b4adaf8a0dc6edd2bbbde" translate="yes" xml:space="preserve">
          <source>Use to test for Windows Server 2008.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df5b5c3be10a464c35d3cff94b7dd76efa25238d" translate="yes" xml:space="preserve">
          <source>Use to test for Windows Server 2012 R2.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85ff14d09026635001c51b70a2ac00708cf26b2b" translate="yes" xml:space="preserve">
          <source>Use to test for Windows Server 2012.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fbb72540dc335bad71a820aa3aeb9d19dd4b4b19" translate="yes" xml:space="preserve">
          <source>Use to test for Windows Vista.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df4ed6c5454967bf0c9ef5e35332243c49729496" translate="yes" xml:space="preserve">
          <source>Use to test for Windows XP.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a475d4d7ec410327b513f0e3c3336c34f960fd5" translate="yes" xml:space="preserve">
          <source>Use to test for a Cluster SKU (Windows Server 2003 and later).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da5569828f566aa7153e7ea413d157eec33d0289" translate="yes" xml:space="preserve">
          <source>Use to test for a Core SKU (Windows Server 2003 and later).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae4aa912df1c06fa5600f4942226c4cf27276ef6" translate="yes" xml:space="preserve">
          <source>Use to test for a Datacenter SKU.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b4fa8c16dd8c1923f250bf88a5f0965d27e49d4" translate="yes" xml:space="preserve">
          <source>Use to test if a directory is mounted. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eda99a5538582c7244581f55357d37094d008005" translate="yes" xml:space="preserve">
          <source>Use to test if a file contains specific contents. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a4161e9a4fc3839746e91280de056f0a844f513" translate="yes" xml:space="preserve">
          <source>Use to test if a file exists as a socket. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c5ab8b6c724429f7a3a87e11afe757d60172f70" translate="yes" xml:space="preserve">
          <source>Use to test if a file exists as a symbolic link. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="934a0de5d940465d835ccb03a58ed3a3db20b6a9" translate="yes" xml:space="preserve">
          <source>Use to test if a file exists. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20c4c4d8c8851069d1d39bed5c50b53d1daf2496" translate="yes" xml:space="preserve">
          <source>Use to test if a file is executable. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa0646b61e9cc6c0fb72973291c58b636d344068" translate="yes" xml:space="preserve">
          <source>Use to test if a file is grouped into the named group. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03a98fc0985e322b1a06fbdd253d3538392fd8fc" translate="yes" xml:space="preserve">
          <source>Use to test if a file is owned by the named owner. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90712063d0799df4e072c241fa0bae1af059d9fc" translate="yes" xml:space="preserve">
          <source>Use to test if a file is readable. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07fc2206ed5592d824527966aa322094cb94bad4" translate="yes" xml:space="preserve">
          <source>Use to test if a file is set to the specified mode. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bdd69c041ab7e38cd14b2be10173b63b2fb40753" translate="yes" xml:space="preserve">
          <source>Use to test if a file is writable. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6daa3b96b2a25987fb480ef0c8939ef829658df" translate="yes" xml:space="preserve">
          <source>Use to test if a subject is linked to the named directory. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4543c74d79ac6527af997825bb3a77cc3326081" translate="yes" xml:space="preserve">
          <source>Use to test if a subject is linked to the named file. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5fb5eea0d44dccb46d00b9dc05c22aa65cb5ddf5" translate="yes" xml:space="preserve">
          <source>Use to test if directory exists. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c025aca3f24a6635de4410cc87a05f1ece8bdd7" translate="yes" xml:space="preserve">
          <source>Use to test if the named package is installed. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="406d0edaf883518d2a71a53e70b8ef92439a4a47" translate="yes" xml:space="preserve">
          <source>Use to test if the named port is listening. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90d7b20460b38af10f2c79587e48bf1fb3da5c47" translate="yes" xml:space="preserve">
          <source>Use to test if the named service is being monitored by the named monitoring application. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d60a572e07ed2c06455e9cc6143085453eb78a9e" translate="yes" xml:space="preserve">
          <source>Use to test if the named service is enabled (i.e. will start up automatically). For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eba98948e81eaafa519b35e32cb14f6d3f8f6fe3" translate="yes" xml:space="preserve">
          <source>Use to test if the named service is running. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7a6425704f7f5ba0a0cfbbee1a30a5002fbf79f" translate="yes" xml:space="preserve">
          <source>Use to to &lt;a href=&quot;https://msdn.microsoft.com/en-us/powershell/dsc/archiveresource&quot;&gt;unpack archive (.zip) files&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48f2f772e50ba6f73c5cd757f3545a959496af80" translate="yes" xml:space="preserve">
          <source>Use to to &lt;a href=&quot;https://msdn.microsoft.com/en-us/powershell/dsc/environmentresource&quot;&gt;manage system environment variables&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="420d07f342fc2d9fea36ce00dd4b8aa3697010a2" translate="yes" xml:space="preserve">
          <source>Use to to &lt;a href=&quot;https://msdn.microsoft.com/en-us/powershell/dsc/fileresource&quot;&gt;manage files and directories&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57f64d8f4f486b91ffd885c26f319171d174b61e" translate="yes" xml:space="preserve">
          <source>Use to to &lt;a href=&quot;https://msdn.microsoft.com/en-us/powershell/dsc/groupresource&quot;&gt;manage local groups&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d173265fb5796b15595c1ad66962dad9c3139a22" translate="yes" xml:space="preserve">
          <source>Use to to &lt;a href=&quot;https://msdn.microsoft.com/en-us/powershell/dsc/logresource&quot;&gt;log configuration messages&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0976412258ada58b082ec1c9fabdcda2daa5840f" translate="yes" xml:space="preserve">
          <source>Use to to &lt;a href=&quot;https://msdn.microsoft.com/en-us/powershell/dsc/packageresource&quot;&gt;install and manage packages&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9779961ed9beeb500458b909bb338e93e223a372" translate="yes" xml:space="preserve">
          <source>Use to to &lt;a href=&quot;https://msdn.microsoft.com/en-us/powershell/dsc/registryresource&quot;&gt;manage registry keys and registry key values&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8728f3ba753686e519e78d5ca0c00737d5e869c4" translate="yes" xml:space="preserve">
          <source>Use to to &lt;a href=&quot;https://msdn.microsoft.com/en-us/powershell/dsc/scriptresource&quot;&gt;run Powershell script blocks&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b46d64df5a6e2fa9bd621a41e943fed82c8af65" translate="yes" xml:space="preserve">
          <source>Use to to &lt;a href=&quot;https://msdn.microsoft.com/en-us/powershell/dsc/serviceresource&quot;&gt;manage services&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a029bfd7a70c50fda82cfabc72a4592aebec4f9" translate="yes" xml:space="preserve">
          <source>Use to to &lt;a href=&quot;https://msdn.microsoft.com/en-us/powershell/dsc/userresource&quot;&gt;manage local user accounts&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68a9b3aae1b6b46ca90f93dfea47c57a1507af99" translate="yes" xml:space="preserve">
          <source>Use to to &lt;a href=&quot;https://msdn.microsoft.com/en-us/powershell/dsc/windowsfeatureresource&quot;&gt;add or remove Windows features and roles&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f859a69b2ed169691eff2093de7667d8067f315" translate="yes" xml:space="preserve">
          <source>Use to to &lt;a href=&quot;https://msdn.microsoft.com/en-us/powershell/dsc/windowsprocessresource&quot;&gt;configure Windows processes&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9c63d8e24c63e4a2f1a529552b1f2093db48469" translate="yes" xml:space="preserve">
          <source>Use to update an object on the Chef server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d97163d50060e51aad721eb2838bda60910a499c" translate="yes" xml:space="preserve">
          <source>Use to view and configure reports.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1fe35e9b0495b47b0e3a4408dcdbd6c9c4bd049a" translate="yes" xml:space="preserve">
          <source>Use to view the status of jobs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52176614cca1b3efc385efc5f6d4c2e32a37f934" translate="yes" xml:space="preserve">
          <source>Use to wait for the reindexing queue to clear before exiting.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="729100b6cfa2b19ae1fb8e79c20a6e0b352cd023" translate="yes" xml:space="preserve">
          <source>Use to wake up sleeping chef-client and trigger node convergence.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7b2ad9eb5a0329e9dd82406b85df63e4a82b361" translate="yes" xml:space="preserve">
          <source>Use when the &lt;code&gt;svn info&lt;/code&gt; command is used by the chef-client and arguments need to be passed. The &lt;code&gt;svn_arguments&lt;/code&gt; command does not work when the &lt;code&gt;svn info&lt;/code&gt; command is used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7bef3c06b5cc94f283299876f7c5900c3f930322" translate="yes" xml:space="preserve">
          <source>Used to install the chef PowerShell module. This will enable chef command line utilities within PowerShell.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="727cb3581f40e4a11fa7d41d65b7850112f83d34" translate="yes" xml:space="preserve">
          <source>User Account</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92d0e65449810eaad3e056745b3a6112e850811c" translate="yes" xml:space="preserve">
          <source>User Accounts</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ca6e571e0d3add6b3954eb296783de689f78dc1" translate="yes" xml:space="preserve">
          <source>User Management</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="111c86031a15b13eaf95eb5647c67566b06bc2ab" translate="yes" xml:space="preserve">
          <source>User accounts and user data for the individuals who have permission to log on to and access the Chef server</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7597feb3acdabb727b02648de7465d5f25e0dbc8" translate="yes" xml:space="preserve">
          <source>User invitations</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57f2b181d0a5e79a147ea1cdf41457f58dbbb3c9" translate="yes" xml:space="preserve">
          <source>Users</source>
          <target state="translated">Users</target>
        </trans-unit>
        <trans-unit id="afbac1d7f8993f570ce7caa30693a9bd125775ba" translate="yes" xml:space="preserve">
          <source>Users may be invited to join organizations via the web user interface in the Chef management console or via the &lt;code&gt;POST&lt;/code&gt; endpoint in the Chef server API.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0be059acda0366aa63455c4d53ce07521e230886" translate="yes" xml:space="preserve">
          <source>Uses &lt;code&gt;psql&lt;/code&gt; (the interactive terminal for PostgreSQL)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4275c65a0ef1a30c1778340c03fd81c5581c4b59" translate="yes" xml:space="preserve">
          <source>Uses a comprehensive set of base images provided by &lt;a href=&quot;https://github.com/chef/bento&quot;&gt;Bento&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89ff1ad079708bfb1a100cd66baca323177cf002" translate="yes" xml:space="preserve">
          <source>Uses a driver plugin architecture</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd59b39343db8678cc7286021f9551d70ebd440c" translate="yes" xml:space="preserve">
          <source>Uses chef-zero or chef-solo</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f2475f1072a78d337728daeaa083bc82dea28ad" translate="yes" xml:space="preserve">
          <source>Uses the Chef server as if it were a file system, allowing the chef-repo on the Chef server to behave like a mirror of the chef-repo on the workstation. The Chef server will have the same objects as the local chef-repo. To make changes to the files on the Chef server, just download files from the Chef server or upload files from the chef-repo</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e45d4a6e38e2987e8681bd3951384c2ae0208a62" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;AND NOT&lt;/code&gt; together may trigger an error. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df7e0cee9e47f4217109b6d9b560a0d1ac29e5a0" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;attribute?()&lt;/code&gt; in a recipe:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71c1d1857df029152e339a8ba4709056b557cbb0" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;attribute?()&lt;/code&gt; in an attributes file:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65e9b581d334787dadeffd912dfa2d5af6126aa1" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;node['foo'].delete('bar')&lt;/code&gt; will throw an exception that points to the new API.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="290e67dc99059977275221704e9326513d50804e" translate="yes" xml:space="preserve">
          <source>Using Knife</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6181d27ee0988ca463f9715d6396c8ffb0f17e05" translate="yes" xml:space="preserve">
          <source>Using Quotes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2bdcb486fee8f928e6c7e37223e07b0f33283cc7" translate="yes" xml:space="preserve">
          <source>Using Templates</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6bdd55389d9b8fd9882d510e9535fbc406d4f413" translate="yes" xml:space="preserve">
          <source>Using a Ruby expression is the most common approach for defining template variables because this is how all variables that are sent to a template are referenced. Whenever a template needs to use an &lt;code&gt;each&lt;/code&gt;, &lt;code&gt;if&lt;/code&gt;, or &lt;code&gt;end&lt;/code&gt;, use a Ruby statement.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a972bbf85ccca976e361294cfc080b82df2c503" translate="yes" xml:space="preserve">
          <source>Using a branch tracking strategy requires that a branch for each environment exists in the source control and that each cookbook&amp;rsquo;s versioning policy is tracked at the branch level. This approach is relatively simple and lightweight: for development environments that track the latest cookbooks, just bump the version before a cookbook is uploaded for testing. For any cookbooks that require higher levels of version control, knife allows cookbooks to be uploaded to specific environments and for cookbooks to be frozen (which prevents others from being able to make changes to that cookbook).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1891857d92e126efdd6e0e0563547f1cdcd73734" translate="yes" xml:space="preserve">
          <source>Using a maximum version control strategy is required when everything needs to be tracked in source control. This approach is very similar to a branch tracking strategy while the cookbook is in development and being tested, but is more complicated and time-consuming (and requires file-level editing for environment data) in order to get the cookbook deployed to a production environment.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61af566c3f90792a553ee5a06894179949b865f4" translate="yes" xml:space="preserve">
          <source>Using a tar.gz archive is the more common approach, but requires that cookbooks be added to an archive. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f6a1e9e87c455e11b78815fcb664cfb67877df4" translate="yes" xml:space="preserve">
          <source>Using an empty run-list</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed86de8e24ce2d9f2cefebfaa6dd3124dd75a45c" translate="yes" xml:space="preserve">
          <source>Using chef-solo to run targeted chef-client runs for specific scenarios</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f76649cf48c7410a246ea1bee11b9f8338e23a5" translate="yes" xml:space="preserve">
          <source>Using command-line tools</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a7cedb4af4d8c7460cc923f0eac732e09af8a32" translate="yes" xml:space="preserve">
          <source>Using community-authored lightweight resources before creating custom ones</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd62e28ba49c99a41fb7d90704bb9b67a9531f1b" translate="yes" xml:space="preserve">
          <source>Using cron and the &lt;code&gt;/etc/cron.d&lt;/code&gt; directory for periodic maintenance tasks</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5f4cf591e49d887ecc4f74b05fc5b92a6ea44e9" translate="yes" xml:space="preserve">
          <source>Using logging with the chef-client</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b59ca1091d3668988072c959fb2dd77ffda11dd" translate="yes" xml:space="preserve">
          <source>Using multiple organizations within the Chef server ensures that the same toolset, coding patterns and practices, physical hardware, and product support effort is being applied across the entire company, even when:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="730d7f709959b695391d09cace2d1b116b078f6e" translate="yes" xml:space="preserve">
          <source>Using platform resources before creating custom ones</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b34c0c2e1fe9ff3e3dca66165919549e5930d7a8" translate="yes" xml:space="preserve">
          <source>Using resources from within your callbacks as blocks or within callback files distributed with your application&amp;rsquo;s source code. To use embedded recipes for callbacks:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c62ac5ca27d8f51d2c90ca63fcc9a474f209bafe" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;debug_value&lt;/code&gt; method from chef-shell to indentify the location(s) from which attribute values are being set</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48a306a5bc6a42bc4398a62854dffaed901f1696" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;ignore_failure&lt;/code&gt; method in a recipe to force the chef-client to move past an error to see what else is going on in the recipe, outside of a known failure</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="966c9e89cf37c88f59b6989157beee60837f92d7" translate="yes" xml:space="preserve">
          <source>Using the &lt;strong&gt;bff_package&lt;/strong&gt; resource:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af127a37183ec235fc0b16a11733e9a24cd81711" translate="yes" xml:space="preserve">
          <source>Using the &lt;strong&gt;chef_handler&lt;/strong&gt; cookbook</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dda344e66237b8f7c8ee6a9eab470c78e93ec40a" translate="yes" xml:space="preserve">
          <source>Using the &lt;strong&gt;dsc_resource&lt;/strong&gt; has the following requirements:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5eba8bb5d4c2fd647daeaad086716e440f063164" translate="yes" xml:space="preserve">
          <source>Using the &lt;strong&gt;log&lt;/strong&gt; resource in a recipe to define custom logging</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0d431ab6dbd881bf58d039d5d5f48c662c31f41" translate="yes" xml:space="preserve">
          <source>Using the Chef development kit-provided Ruby as your system Ruby is optional. This just depends on how you are using Ruby on your system. For many users, Ruby is primarily used for authoring Chef cookbooks and recipes. If that&amp;rsquo;s true for you, then using the Chef development kit-provided Ruby as your system Ruby is recommended. But for other users who are already using tools like rbenv to manage Ruby versions, then that&amp;rsquo;s OK too.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80a1d7f530b8e4a849d3fadf3595baad7577a98b" translate="yes" xml:space="preserve">
          <source>Using the FQDN as the node name, and then allowing Ohai to collect this information during each chef-client run, is the recommended approach and the easiest way to ensure that the names of all nodes across the organization are unique.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dbea11d1d8889d1bd6b6546ac2363707adc053f1" translate="yes" xml:space="preserve">
          <source>Using the base &lt;strong&gt;package&lt;/strong&gt; resource:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04b451edcb65739494d0b9f24b4705e06c42ed06" translate="yes" xml:space="preserve">
          <source>Using the chef-shell and the &lt;strong&gt;breakpoint&lt;/strong&gt; resource to add breakpoints to recipes, and to then step through the recipes using the breakpoints</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa3493904a3071bf8b6db8d2233289fb3284eff4" translate="yes" xml:space="preserve">
          <source>Using the default property values for the various resources is the recommended starting point when working with recipes. Then, depending on what each node requires, these default values can be overridden with node-, role-, environment-, and cookbook-specific values. The &lt;strong&gt;deploy&lt;/strong&gt; resource has four layout modifiers: &lt;code&gt;create_dirs_before_symlink&lt;/code&gt;, &lt;code&gt;purge_before_symlink&lt;/code&gt;, &lt;code&gt;symlink_before_migrate&lt;/code&gt;, and &lt;code&gt;symlinks&lt;/code&gt;. Each of these is a Hash that behaves as a property of the &lt;strong&gt;deploy&lt;/strong&gt; resource. When these layout modifiers are used in a recipe, they appear similar to the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a97469d22d63c7d3e47351d56871019c80c30887" translate="yes" xml:space="preserve">
          <source>Using the same patterns in Ruby</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fdbda7dc622620b491df3241093d7de7f59a028e" translate="yes" xml:space="preserve">
          <source>Using this property may leave the system in an inconsistent state. For example, a user account will be removed even if the user is logged in. A user&amp;rsquo;s home directory will be removed, even if that directory is shared by multiple users.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ce711fa93715372421d777f5542631cf179f0a2" translate="yes" xml:space="preserve">
          <source>Using verbose logging with knife</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f26ec68ac052fa84dd0deb8752a95a9bcbdec541" translate="yes" xml:space="preserve">
          <source>Utilize hardware RAID</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b54677adae1a1bfcb5b28081976e35691eaecb99" translate="yes" xml:space="preserve">
          <source>Validate that the system process limits have not already been increased.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99ebdcc7d044fb6c6d186b99925dd79f5a105264" translate="yes" xml:space="preserve">
          <source>Validatorless Bootstrap</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8dce170de238b1feda2ecd9674ea3ca0d068fbcb" translate="yes" xml:space="preserve">
          <source>Value</source>
          <target state="translated">Value</target>
        </trans-unit>
        <trans-unit id="9178214f41f09a6bf0837f53cdca224986f13e25" translate="yes" xml:space="preserve">
          <source>Values can be entered with double quotes (&amp;rdquo; &amp;rdquo;) or single quotes (&amp;lsquo; &amp;lsquo;), but this should be done consistently.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac018db1f7b00972061adff843d37497d8ee153c" translate="yes" xml:space="preserve">
          <source>Variables</source>
          <target state="translated">Variables</target>
        </trans-unit>
        <trans-unit id="4734cbabb290e7813d46f701d8efaaf8e0e9678a" translate="yes" xml:space="preserve">
          <source>Verb Subcommands</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4fe74f3b79d3d216c1e128ae1b7dd493a738d116" translate="yes" xml:space="preserve">
          <source>Verify Failover</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b33cd0458fc840dc8000beb9127465810a9e4a2a" translate="yes" xml:space="preserve">
          <source>Verify Install</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2434e171041d33376689e566533aef55b6d5bc3" translate="yes" xml:space="preserve">
          <source>Verify Resize</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eceedb4efa2bc7884cd229413744d3a30309226e" translate="yes" xml:space="preserve">
          <source>Verify Syntax</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f52b6d4ec2e8eff6b64e34dc894ef12291af8ac" translate="yes" xml:space="preserve">
          <source>Verify that DRBD is in good shape on both backend machines. Both the primary and secondary machines should show states similar to &lt;code&gt;Primary/Secondary UpToDate/UpToDate&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9885e5f46bca8e9e5737d03294d9dbdfd3849118" translate="yes" xml:space="preserve">
          <source>Verify that Redis is re-populated, as indicated by the key &lt;code&gt;dl_default&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0645a55e529475caca1c73f6b9a28bed8a944b1" translate="yes" xml:space="preserve">
          <source>Verify that the &lt;code&gt;make&lt;/code&gt; command is available on the Chef server server. If it is not available, install the &lt;code&gt;make&lt;/code&gt; command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee6cef85ac87699cf69bdb1340e10fab4cc8b486" translate="yes" xml:space="preserve">
          <source>Verify that the &lt;code&gt;make&lt;/code&gt; command is available on the Enterprise Chef server. If it is not available, install the &lt;code&gt;make&lt;/code&gt; command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25afd040b9a08f4b73977e4711bee25f81bf3b72" translate="yes" xml:space="preserve">
          <source>Verify that the &lt;code&gt;make&lt;/code&gt; command is available on the primary backend Chef server server. If it is not available, install the &lt;code&gt;make&lt;/code&gt; command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd7613a64ae8a38df1a3ce4c57b40898acae8923" translate="yes" xml:space="preserve">
          <source>Verify that the &lt;code&gt;make&lt;/code&gt; command is available on the primary backend Enterprise Chef server. If it is not available, install the &lt;code&gt;make&lt;/code&gt; command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f73b09688901d80ad1d8fce64862a8ecd348bb83" translate="yes" xml:space="preserve">
          <source>Verify that the checksum values are identical.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f7facc80bf9dca1a5714b52352a71fc94e317ce" translate="yes" xml:space="preserve">
          <source>Verify that the files are in the .chef folder.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fbd07d867893353922f526ef8d41dde4d90199f4" translate="yes" xml:space="preserve">
          <source>Verify the SSL certificate on the Chef server. When &lt;code&gt;true&lt;/code&gt;, the chef-client always verifies the SSL certificate. When &lt;code&gt;false&lt;/code&gt;, the chef-client uses the value of &lt;code&gt;ssl_verify_mode&lt;/code&gt; to determine if the SSL certificate requires verification. Default value: &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6961be1cb7aaff20c8fead6464421c2f39f75ac" translate="yes" xml:space="preserve">
          <source>Verify the SSL certificate on the Chef server. When &lt;code&gt;true&lt;/code&gt;, the chef-client always verifies the SSL certificate. When &lt;code&gt;false&lt;/code&gt;, the chef-client uses the value of &lt;code&gt;ssl_verify_mode&lt;/code&gt; to determine if the SSL certificate requires verification. If this option is not specified, the setting for &lt;code&gt;verify_api_cert&lt;/code&gt; in the configuration file is applied.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65decf83cc6dc55a7a49e442eb166061b311acc3" translate="yes" xml:space="preserve">
          <source>Verify the chef-client install</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b80c1107a12eef276e708e26d3b550bd28906784" translate="yes" xml:space="preserve">
          <source>Verify the installation:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0521df51ab588f5e1215c1f57dec7b14487ce4b" translate="yes" xml:space="preserve">
          <source>Verify the machine is the primary backend server:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54335ace58fb12abcbe613963c09d3c41484d5f1" translate="yes" xml:space="preserve">
          <source>Verify the secondary backend server:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05cf110c5cc2be95359a61a05e13b3f0b1fd5805" translate="yes" xml:space="preserve">
          <source>Verify the settings by reviewing the documentation for the knife subcommands and/or knife plugins</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1717f89bb92b9fc43de679909ca9dcc7a1b15b1" translate="yes" xml:space="preserve">
          <source>Verify the use case(s) your organization has for adding them</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53ada8b8131d0fd0553ae2d8248832c943484ba2" translate="yes" xml:space="preserve">
          <source>Verify:</source>
          <target state="translated">Verify:</target>
        </trans-unit>
        <trans-unit id="2da600bf9404843107a9531694f654e5662959e0" translate="yes" xml:space="preserve">
          <source>Version</source>
          <target state="translated">Version</target>
        </trans-unit>
        <trans-unit id="307ab25c08a0161bb61e4b199670193ee0fcf33e" translate="yes" xml:space="preserve">
          <source>Version Source Control</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3167f0e5b6720e28d04bd643a0f9eaf3f860e0d" translate="yes" xml:space="preserve">
          <source>Version constraints&amp;mdash;&lt;code&gt;&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;&lt;/code&gt;, &lt;code&gt;&amp;gt;=&lt;/code&gt;, &lt;code&gt;&amp;lt;=&lt;/code&gt;, &lt;code&gt;~&amp;gt;&lt;/code&gt;&amp;mdash;may be used with &lt;code&gt;version&lt;/code&gt;; an exception is raised if two version constraints match; an exact match will always take precedence over a match made from a version constraint</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d3cc462836f0f2e2501b7b1d9d1f61ad039d37e" translate="yes" xml:space="preserve">
          <source>Versions and version constraints can be specified in a cookbook&amp;rsquo;s metadata.rb file by using the following functions. Each function accepts a name and an optional version constraint; if a version constraint is not provided, &lt;code&gt;&amp;gt;= 0.0.0&lt;/code&gt; is used as the default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69bd4ef9fbd0894a22759c3766b859defbdedbc8" translate="yes" xml:space="preserve">
          <source>View</source>
          <target state="translated">View</target>
        </trans-unit>
        <trans-unit id="57596940b42227fdfe2c333826fe4e5b2f99ffa2" translate="yes" xml:space="preserve">
          <source>View All Roles</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0abfb1b86703c1689a4759b544f6112ee9621bef" translate="yes" xml:space="preserve">
          <source>View Attributes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4b6a0f121769834180b680b0006f673bf9f750c" translate="yes" xml:space="preserve">
          <source>View Cookbook Details</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13be36f28de3f337acf8ae0e46990160c7b2590c" translate="yes" xml:space="preserve">
          <source>View Current</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f914d1a881875249baaddfc0a892908d14ecc91" translate="yes" xml:space="preserve">
          <source>View Default Attributes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="907b3bee27789aea8e5741129a807a24712d027c" translate="yes" xml:space="preserve">
          <source>View Details</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb9345f08dcb1aed6e9e4b0a64328686751ad653" translate="yes" xml:space="preserve">
          <source>View Item</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f6b5b7bff7a2acfa99c0f12b322c59f442119e9" translate="yes" xml:space="preserve">
          <source>View Log Files</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="127aa733f3f5cc9bb5f984a7efec5c6dc3e2ac38" translate="yes" xml:space="preserve">
          <source>View Override Attributes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64bc083d0f0faa76fea2a6bc71635fcb307ca28b" translate="yes" xml:space="preserve">
          <source>View User Account Details</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9acafdb56566e6e5a5e0063d9cf290df870f5d0" translate="yes" xml:space="preserve">
          <source>View a File</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec6a0983535ff3a21d08fdc7a2a4fb3259a4dfb1" translate="yes" xml:space="preserve">
          <source>View colored output.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78ff0a2cdc02796dcea69ad4f5f90c4cef07e952" translate="yes" xml:space="preserve">
          <source>View colored output. Default setting: &lt;code&gt;--color&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="714930af397f125eeda0a57030dce7c5db5e1ea4" translate="yes" xml:space="preserve">
          <source>View the &lt;strong&gt;Proxy server&lt;/strong&gt; setting. If this setting is blank, then a proxy server may not be available.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f7a3f521d40c7e46fb380f925a447a487f5e706" translate="yes" xml:space="preserve">
          <source>View the checksum on the Chef server:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2b31f5123be3235bc905c5417ffd38109c7c079" translate="yes" xml:space="preserve">
          <source>View the checksum on the workstation:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3e5c23ee46040d53981407218a8ed6495f248ec" translate="yes" xml:space="preserve">
          <source>View the topic &lt;a href=&quot;install_server_ha_aws&quot;&gt;High Availability: AWS&lt;/a&gt; for more information about how to set up the Chef server for high availability in Amazon Web Services (AWS).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dfdd83a2717e74fd174cd5cac41e2316e828f915" translate="yes" xml:space="preserve">
          <source>Viewing a user&amp;rsquo;s profile</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7c044397964df7f9ce38005a202a70069a19504" translate="yes" xml:space="preserve">
          <source>Visit this page: &lt;a href=&quot;http://downloads.chef.io/chef-dk/&quot;&gt;http://downloads.chef.io/chef-dk/&lt;/a&gt;. The Chef development kit supports Mac OS X, Red Hat Enterprise Linux, Ubuntu, and Microsoft Windows.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20e064ecc1df246539820ccbcf3251b6003edc6b" translate="yes" xml:space="preserve">
          <source>Volume Groups</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3009d557c90c919cd9d0ea8a12b75430344b5929" translate="yes" xml:space="preserve">
          <source>Warn</source>
          <target state="translated">Warn</target>
        </trans-unit>
        <trans-unit id="e9c45563358e813f157ba81b33143542165ba84e" translate="yes" xml:space="preserve">
          <source>Warning</source>
          <target state="translated">Warning</target>
        </trans-unit>
        <trans-unit id="56c66f447130c877a3b88917de0f3e153832db4c" translate="yes" xml:space="preserve">
          <source>We are not affiliated with, endorsed or sponsored by Chef Inc.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="012ffa968d4a0eaddd5b5352be97ebf65feb50f5" translate="yes" xml:space="preserve">
          <source>Welcome to Chef!</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7663c83ff9b46cab45592cf19ac6fe115992eb0" translate="yes" xml:space="preserve">
          <source>What is left under &lt;code&gt;'foo'&lt;/code&gt; is only &lt;code&gt;'bat'&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="662279334e3272328122d3f5c655e1f3f81a33f2" translate="yes" xml:space="preserve">
          <source>What is needed?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41485971d2cf90213ea77f9639e3f0927c27fe53" translate="yes" xml:space="preserve">
          <source>What the state of the node should be at the end of the current chef-client run</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="111aa1f9659ff42f398553a1ac29d51290f7a755" translate="yes" xml:space="preserve">
          <source>What the state of the node was at the end of the previous chef-client run</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e96f5bc26f239b0766accf7dfad51f5393e0cc7a" translate="yes" xml:space="preserve">
          <source>What this means:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="719f5f16f17a0c97631d4fb9ea5f045681ddc50e" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;%w&lt;/code&gt; syntax uses a variable, such as &lt;code&gt;|foo|&lt;/code&gt;, double quoted strings should be used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a896f9f5d92c20936b169c51a3fc808d9ee25f05" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;false&lt;/code&gt;, no data for that property is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c957217e6ca925958e09d9214d3c4f4849e40260" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;false&lt;/code&gt;, the values defined by the recipe or custom resource will determine the value, i.e. &amp;ldquo;the desired state of this system includes setting the value defined in this custom resource or recipe&amp;rdquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af1f3d40b67efe1913a56d72c1f94ea0ce890472" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;node_count&lt;/code&gt; is greater than &lt;code&gt;node_license&lt;/code&gt;, then &lt;code&gt;limit_exceeded&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt; and the Chef management console will display a notification about this status. The way to resolve this is to visit the upgrade URL, add the appropriate number of licenses, and then update the configuration settings appropriately.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="312b868323b7d2ed62b92a3704fc67bb3ba1991e" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;true&lt;/code&gt; this property sets the default values for &lt;code&gt;chunk&lt;/code&gt; and &lt;code&gt;metadata&lt;/code&gt; to &lt;code&gt;nil&lt;/code&gt; allowing mdadm to use its own default values. Default value: &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ccfdacacb8774ea0f96d05bfab72bffef1737da9" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;opscode_erchef['strict_search_result_acls']&lt;/code&gt; affects all search results and any actor (user, client, etc.) that does not have read access to a search result will not be able to view it. For example, this could affect search results returned during chef-client runs if a chef-client does not have permission to read the information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef954e458c9992a20b3e92f4e2bf93d298a78bf3" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;true&lt;/code&gt;, data for that property is returned as part of the resource data set and may be available to external applications, such as reporting</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5c881c64047a80b39df442ae1bf654f32d9adb0" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;true&lt;/code&gt;, the state of the system will determine the value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86d5993c53287ab5643507474bcce1111a1139b9" translate="yes" xml:space="preserve">
          <source>When a &lt;code&gt;gem_binary&lt;/code&gt; property is specified (as a hash, a string, or by a .gemrc file), the chef-client will run that command to examine its environment settings and then again to install the gem.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5cce03894455a1d2d5f2a8d3a516da6db02e2d60" translate="yes" xml:space="preserve">
          <source>When a &lt;code&gt;solo.rb&lt;/code&gt; file is present in this directory, the settings contained within that file will override the default configuration settings</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb76d8b83ee8ddfb5219601e5d85d4727cc7ac28" translate="yes" xml:space="preserve">
          <source>When a &lt;strong&gt;cookbook_file&lt;/strong&gt; resource and a &lt;strong&gt;yum_package&lt;/strong&gt; resource are both called from within the same recipe, use the &lt;code&gt;flush_cache&lt;/code&gt; attribute to dump the in-memory Yum cache, and then use the repository immediately to ensure that the correct package is installed:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b5897ca25677ccb6baffd3b4590086fa3765ea2" translate="yes" xml:space="preserve">
          <source>When a Microsoft Windows file path is enclosed in a double-quoted string (&amp;rdquo; &amp;rdquo;), the same backslash character (&lt;code&gt;\&lt;/code&gt;) that is used to define the file path separator is also used in Ruby to define an escape character. The knife.rb file is a Ruby file; therefore, file path separators must be escaped. In addition, spaces in the file path must be replaced with &lt;code&gt;~1&lt;/code&gt; so that the length of each section within the file path is not more than 8 characters. For example, if EditPad Pro is the text editor of choice and is located at the following path:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54fc32f23545bb2e882e0655d0cecf10072a2194" translate="yes" xml:space="preserve">
          <source>When a client.rb file is present in the default location, the settings contained within that client.rb file will override the default configuration settings</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e06cf18148170cad9892d48eb9fdac5df4f751c6" translate="yes" xml:space="preserve">
          <source>When a cookbook is uploaded, only files that are new or updated will be included. This approach minimizes the amount of storage and time that is required during the modify-upload-test cycle. To keep track of which files have already been uploaded, the chef-client uses a checksum and assigns a checksum to each file. These checksums are used in the cookbook version manifest, alongside the same records that store the file description (name, specificity, and so on), as well as the checksum and the URL from which the file&amp;rsquo;s contents can be retrieved.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9aa7deaed3e90874e193b7aefdb1014380063cb4" translate="yes" xml:space="preserve">
          <source>When a default attribute is set like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a5e2a19f2cfb12f3b820078845ad0799d634a8e" translate="yes" xml:space="preserve">
          <source>When a plugin is disabled, the chef-client log file will contain entries similar to:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3e640b2f6e6329a57aa68901cf10040cfeef38d" translate="yes" xml:space="preserve">
          <source>When a template is rendered, Ruby expressions and statements are evaluated by the chef-client. The variables listed in the &lt;strong&gt;template&lt;/strong&gt; resource&amp;rsquo;s &lt;code&gt;variables&lt;/code&gt; parameter and in the node object are evaluated. The chef-client then passes these variables to the template, where they will be accessible as instance variables within the template. The node object can be accessed just as if it were part of a recipe, using the same syntax.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f88ee6242a8b3eebcc2d9131256fe1f0da166c2" translate="yes" xml:space="preserve">
          <source>When a user makes a request to the Chef server using the Chef server API, permission to perform that action is determined by the following process:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="274d8a8e1fdb5c46efb40ec584d9ce2e350b4c65" translate="yes" xml:space="preserve">
          <source>When a whitelist is defined, any attribute of that type that is not specified in that attribute whitelist &lt;strong&gt;will not&lt;/strong&gt; be saved. So based on the previous whitelist for normal attributes, the &lt;code&gt;filesystem&lt;/code&gt; and &lt;code&gt;map - autohome&lt;/code&gt; attributes will not be saved, but the &lt;code&gt;network&lt;/code&gt; attributes will.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1dc8206fe79d6aed5d38a31812891fd1100ad28" translate="yes" xml:space="preserve">
          <source>When all of the actions identified by resources in the resource collection have been done, and when the chef-client run finished successfully, the chef-client updates the node object on the Chef server with the node object that was built during this chef-client run. (This node object will be pulled down by the chef-client during the next chef-client run.) This makes the node object (and the data in the node object) available for search.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b40616c78b8413404a5d0278e33082eccf7e1920" translate="yes" xml:space="preserve">
          <source>When an override attribute is set like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5560ad3ddcc9843cf1a14f18512e2c4effe24a64" translate="yes" xml:space="preserve">
          <source>When backing up Chef server data, be sure that the system is shut down (or otherwise quiet) at the time of the backup. Perform all activities as root unless otherwise directed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7122ad012c71e5f78ae5ae6285b11c6ef9aa8532" translate="yes" xml:space="preserve">
          <source>When both the primary and secondary nodes are running and behaving as expected, the contents of &lt;code&gt;/proc/drbd&lt;/code&gt; on the primary node will look similar to the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="455e11e3231043056ca042548a352507ab146542" translate="yes" xml:space="preserve">
          <source>When changes are made to the chef-server.rb file the Chef server must be reconfigured by running the following command:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb97f8aa25fc7fa40fb8d3d029c5f81a62242f47" translate="yes" xml:space="preserve">
          <source>When chef-shell is configured to access a Chef server, chef-shell can list, show, search for and edit cookbooks, clients, nodes, roles, environments, and data bags.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f51f7b09a49abb35a4a9bd027a110e0a3fa9f970" translate="yes" xml:space="preserve">
          <source>When chef-shell is started using a named configuration as an argument, chef-shell will search for a chef-shell.rb file in that directory under &lt;code&gt;~/.chef&lt;/code&gt;. For example, if chef-shell is started using &lt;code&gt;production&lt;/code&gt; as the named configuration, the chef-shell will load a configuration file from &lt;code&gt;~/.chef/production/chef_shell.rb&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3909e52c3189a207799970fd25951971c4689c57" translate="yes" xml:space="preserve">
          <source>When creating a key, this value specifies that the required keys for the specified path are to be created. When using the &lt;code&gt;:delete_key&lt;/code&gt; action in a recipe, and if the registry key has subkeys, then set the value for this property to &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea9a5fb985bea71724c63dac6715e3021018f3d7" translate="yes" xml:space="preserve">
          <source>When data is committed to the Apache Solr index, all incoming updates are blocked. If the duration between updates is too short, it is possible for the rate at which updates are asked to occur to be faster than the rate at which objects can be actually committed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="000ef8cb9881f18153f320800a34a97368cd96d0" translate="yes" xml:space="preserve">
          <source>When debug logging is enabled, a log entry will look like the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="284fb295bbd3ca646cc2d559dc31242045d110e7" translate="yes" xml:space="preserve">
          <source>When deploying code that is not Ruby on Rails and symbolic links to a shared folder are not wanted, use parentheses &lt;code&gt;()&lt;/code&gt; or &lt;code&gt;Hash.new&lt;/code&gt; to avoid ambiguity. For example, using parentheses:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94442725cb2e557adb59cd117ce58c4d035bfcaa" translate="yes" xml:space="preserve">
          <source>When each value has more than one platform, the syntax changes to:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5deea28ce8b7d54242a26ccba6406d17522a9d1" translate="yes" xml:space="preserve">
          <source>When each value only has a single platform, use the following syntax:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6b66587e9510443619a11eb7fd9d4e09ec3126b" translate="yes" xml:space="preserve">
          <source>When enabled the chef-client will raise an error if it is unable to successfully POST to the data collector server. Default value: &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d027ca64eda87d1b7a957187a39801fb7265f658" translate="yes" xml:space="preserve">
          <source>When everything is configured and the chef-client run is complete, the chef-client stops and waits until the next time it is asked to run.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3591aecf2aeffb9b092f6e3f30c45914d78622a1" translate="yes" xml:space="preserve">
          <source>When finished adding the templates and building the custom resource, the cookbook directory structure should look like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f2fbc92654bfc5c18f8768d74d1d711a698b71e" translate="yes" xml:space="preserve">
          <source>When finished creating the directory and the Embedded Ruby (ERB) template file, edit the template to run the SSH commands. Then set up the validation certificate and the client configuration file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de67b2cc61bc9b9d578482ce6e9e6cd93f1f5120" translate="yes" xml:space="preserve">
          <source>When finished, click &lt;strong&gt;Change Password&lt;/strong&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5651870dc29394e230a28ae303c14e514ba31a47" translate="yes" xml:space="preserve">
          <source>When finished, open a command window and enter the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00791356f115d3adea1ce348c3988557c7cce41e" translate="yes" xml:space="preserve">
          <source>When finished, save it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49db0d867c4aadb181c93ad72233ea71ab98cf24" translate="yes" xml:space="preserve">
          <source>When install options are specified as a string, the chef-client will span a gems command with those options when installing the gem.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="216a15cfb011b795625615078550c8c5fcc9b17b" translate="yes" xml:space="preserve">
          <source>When items cannot be merged through substitution, the original data is overwritten.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c067a3e63043ffcb2f08739c9f29cb06384ed41a" translate="yes" xml:space="preserve">
          <source>When launchd is run as the root user, the group to run the job as. If the &lt;code&gt;username&lt;/code&gt; property is specified and this property is not, this value is set to the default group for the user.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c07d63a566790570212009218ba5f52ba8070d2" translate="yes" xml:space="preserve">
          <source>When launchd is run as the root user, the user to run the job as.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0b41095689fbcfc54bd20ae6954803dd67ad293" translate="yes" xml:space="preserve">
          <source>When multiple paths are specified, the chef-client will attempt to download the files in the order listed, stopping after the first successful download.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38ed49170c83700fe75b3a0c2564641e56a19e7e" translate="yes" xml:space="preserve">
          <source>When restoring Chef server data, the previously backed-up files will be required, along with the Chef server running only the &lt;strong&gt;postgresql&lt;/strong&gt; service. Perform all activities as root unless otherwise directed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16f6bb6fd201d3552ea078d6a297c6d9b74263d0" translate="yes" xml:space="preserve">
          <source>When running Microsoft Windows, the knife.rb file is located at &lt;code&gt;%HOMEDRIVE%:%HOMEPATH%\chef-repo\.chef&lt;/code&gt; (e.g. &lt;code&gt;c:\Users\&amp;lt;username&amp;gt;\chef-repo\.chef&lt;/code&gt;). If this path needs to be scripted, use &lt;code&gt;%USERPROFILE%\chef-repo\.chef&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cca959a975b325f9db1923c8d060d10bed9d8004" translate="yes" xml:space="preserve">
          <source>When running a 32-bit version of chef-client, the script will write the &lt;code&gt;chef_architecture&lt;/code&gt; file to the &lt;code&gt;C:\Windows\SysWow64&lt;/code&gt; directory. However, when running a native 64-bit version of the chef-client, the script will write a file to the &lt;code&gt;C:\Windows\System32&lt;/code&gt; directory, as expected.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a97d0bc891b7f7e21d9a700ff6ab57a06726a6ed" translate="yes" xml:space="preserve">
          <source>When running a validatorless &lt;code&gt;knife bootstrap&lt;/code&gt; operation, the output is similar to:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dcd7562a3ef9bb8edc18e0f0549a56b6df2a0a3c" translate="yes" xml:space="preserve">
          <source>When running knife from Windows PowerShell, a string should be surrounded by triple single quotes (&lt;code&gt;''' '''&lt;/code&gt;). For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80713522149ead8b25c4b005b4695056666bf00b" translate="yes" xml:space="preserve">
          <source>When running knife from the command prompt, a string should be surrounded by single quotes (&lt;code&gt;' '&lt;/code&gt;). For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7526fbbb49f4d3a1758dfa90dd6df86decc0f81b" translate="yes" xml:space="preserve">
          <source>When running knife in Microsoft Windows, a string may be interpreted as a wildcard pattern when quotes are not present in the command. The number of quotes to use depends on the shell from which the command is being run.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f1e490ef91a69b0eb9872551293f64706fcb8ec" translate="yes" xml:space="preserve">
          <source>When running the &lt;code&gt;create&lt;/code&gt; argument, be sure to omit the &lt;code&gt;-a&lt;/code&gt; option:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="437fb7bde6d1141e8fa7b55eef1235fe12f82177" translate="yes" xml:space="preserve">
          <source>When running the Chef server in a high availability configuration, restarting all services may trigger failover.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="290e5b149ded69d2ecd2572471b56037fa19b245" translate="yes" xml:space="preserve">
          <source>When running the chef-client using the &lt;code&gt;--local-mode&lt;/code&gt; option, &lt;code&gt;~/.chef/local-mode-cache&lt;/code&gt; is the default value for &lt;code&gt;cache_path&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9857ce1e17f6b8101ae7c73ab44b0927ab20087" translate="yes" xml:space="preserve">
          <source>When searching, an environment is an attribute. This allows search results to be limited to a specified environment by using Boolean operators and extra search terms. For example, to use knife to search for all of the servers running CentOS in an environment named &amp;ldquo;QA&amp;rdquo;, enter the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d660821009d5c9563c41513e78d6f6b0349917c" translate="yes" xml:space="preserve">
          <source>When service status is requested, the output should be similar to:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f17be5ad1ed414878523442f85607809d27f7d2" translate="yes" xml:space="preserve">
          <source>When set to &lt;code&gt;:enabled&lt;/code&gt;, chef-client will use &lt;a href=&quot;https://github.com/chef/chef-rfc/blob/master/rfc062-exit-status.#exit-codes-in-use&quot;&gt;stardardized exit codes&lt;/a&gt; for Chef client run status, and any non-standard exit codes will be converted to &lt;code&gt;1&lt;/code&gt; or &lt;code&gt;GENERIC_FAILURE&lt;/code&gt;. This setting can also be set to &lt;code&gt;:disabled&lt;/code&gt; which preserves the old behavior of using non-standardized exit codes and skips the deprecation warnings. Default value: &lt;code&gt;nil&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cfcd7c338bc0a15d6811f4cdf4d1c9a2269a1044" translate="yes" xml:space="preserve">
          <source>When specifying a local Microsoft Windows file path as a valid file URI, an additional forward slash (&lt;code&gt;/&lt;/code&gt;) is required. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e28049b62e09081f0ac59d5ac685e4098cbef3d" translate="yes" xml:space="preserve">
          <source>When strings have quotes within quotes, use double quotes (&lt;code&gt;&quot; &quot;&lt;/code&gt;) on the outer quotes, and then single quotes (&lt;code&gt;' '&lt;/code&gt;) for the inner quotes. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2d3d9fef660b6fc8a8ec198dca2860af78e837c" translate="yes" xml:space="preserve">
          <source>When synchronization is complete, run the following command on the primary backend server:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a335a434bfdbfe48e6abdcb2cbc1a97fc770f607" translate="yes" xml:space="preserve">
          <source>When the &lt;code&gt;guard_intrepreter&lt;/code&gt; common attribute is set to &lt;code&gt;:powershell_script&lt;/code&gt;, a string command will be evaluated as if this value were set to &lt;code&gt;true&lt;/code&gt;. This is because the behavior of this attribute is similar to the value of the &lt;code&gt;&quot;$?&quot;&lt;/code&gt; expression common in UNIX interpreters. For example, this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4cc72f82e95582cc29af477475377c4d3dd5b36" translate="yes" xml:space="preserve">
          <source>When the &lt;strong&gt;package&lt;/strong&gt; resource has to install the package for the scripting language, it looks up the scripting language and uses the one defined in &lt;code&gt;node.run_state['scripting_language']&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0f036eed5b120a47413b3fb1a9a6777e1115ba2" translate="yes" xml:space="preserve">
          <source>When the active backup server fails, DRBD on the master will continue to function in primary mode, whether the DRBD on the secondary was shut down gracefully or became unavailable unexpectedly. Verify that DRBD is functioning by running &lt;code&gt;drbdadm role pc0&lt;/code&gt; on the primary:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="389c15389fe9e50c6af22b4997696a294b7307e9" translate="yes" xml:space="preserve">
          <source>When the chef-client is installed using RubyGems or a package manager, chef-shell should already be installed. When the chef-client is run from a git clone, it will be located in &lt;code&gt;chef/bin/chef shell&lt;/code&gt;. To start chef-shell, just run it without any options. You&amp;rsquo;ll see the loading message, then the banner, and then the chef-shell prompt:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d65c6ecbbc2e3768146274b07f23fb57416c7d6" translate="yes" xml:space="preserve">
          <source>When the chef-client is installed using an unattended bootstrap, it is typically built into an image that starts the chef-client on boot. The type of image used depends on the platform on which the unattended bootstrap will take place.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83bfd6a4bffd06be2ced30d7818003434492fffe" translate="yes" xml:space="preserve">
          <source>When the chef-client is installed using an unattended bootstrap, remember that the chef-client:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03b5c3de24213db96739960d92a12b9fdb28ee6f" translate="yes" xml:space="preserve">
          <source>When the chef-client is run as a daemon, the following signals may be used:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="626aaa3ddfb7288466cf6d37bb5b93aece9a7122" translate="yes" xml:space="preserve">
          <source>When the chef-client is run as a non-root user the chef-client can perform any action allowed to that user, as long as that action does not also require elevated privileges (such as sudo or pbrun). Attempts to manage any object that requires elevated privileges will result in an error. For example, when the chef-client is run as a non-root user that is unable to create or modify users, the &lt;strong&gt;user&lt;/strong&gt; resource will not work.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="167cfbb3426feecf99d56ab0b37f11ead19c2ae7" translate="yes" xml:space="preserve">
          <source>When the chef-client is run in why-run mode, certain assumptions are made:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e7b5fb4e00d5780e07fc3ef8c7b3bbeb752d290" translate="yes" xml:space="preserve">
          <source>When the chef-client runs, the &lt;strong&gt;remote_directory&lt;/strong&gt; resource will tell the chef-client to copy the directory tree from the cookbook to the file system using the structure defined in cookbook:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d3b9fe2bc043147aecf9e5b17083a7d629b68f6" translate="yes" xml:space="preserve">
          <source>When the chef-shell DSL is available, the chef-client DSL will not be (unless the management workstation is also a chef-client). Without the chef-client DSL, a bash block cannot be used to run bash commands.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de92db0f84488f1505efba7a2d38a42613e82803" translate="yes" xml:space="preserve">
          <source>When the cookbook is finished, move those changes to the production environment and use the &lt;code&gt;--freeze&lt;/code&gt; option to prevent others from making further changes:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5825e9075f7edfc4d855d37e79e2f344ef81c426" translate="yes" xml:space="preserve">
          <source>When the default attribute precedence &lt;code&gt;node['foo']['bar']&lt;/code&gt; is removed:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26fbe442b9eddbb8f1ca7e4dcd6eccc2917afb1e" translate="yes" xml:space="preserve">
          <source>When the disks return to a synced state, that field will return to &lt;code&gt;0&lt;/code&gt;. While the secondary is syncing, status about the syncing process will be shown for both hosts. For the secondary, something like the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f20a2610ec0a50d232c0acc8dc8b69c8ce1957f1" translate="yes" xml:space="preserve">
          <source>When the file does not exist, the &lt;code&gt;IO.write(path, content)&lt;/code&gt; code is executed and the chef-client output will print something similar to:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1cdfaffd2dd0f74d13c911f3ec7f71b291e3e79a" translate="yes" xml:space="preserve">
          <source>When the primary Chef server in the cluster fails, the VRRP heartbeat will stop. At this point, the backup server will begin transitioning to the primary state by:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cef8e27229ef66ef4c1dd8f059d18f17bc750c8a" translate="yes" xml:space="preserve">
          <source>When the primary back-end server has been lost while the secondary back-end server is in an &lt;code&gt;Inconsistent&lt;/code&gt; state and it&amp;rsquo;s not going to be back online quickly, the best thing to do is to provision another host to become the new Chef server cluster partner for the secondary back-end server, and then build it out. If the new host has an IP address that is different from the primary back-end server, change the configuration on the secondary back-end server, and then reconfigure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a947e90d80b660897fbf0e97d52cef9ed9798dd5" translate="yes" xml:space="preserve">
          <source>When the secondary becomes available again, two things may happen:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25a9c7f4bcb5a28a49d89e2bae95b57a324b2aff" translate="yes" xml:space="preserve">
          <source>When the system process limits are too low, an error is returned similar to:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7edd1f86ae5afd6980dbf8067a3e42c324b62ca0" translate="yes" xml:space="preserve">
          <source>When the tar.gz archive contains all of the cookbooks required by chef-solo, upload it to the web server from which chef-solo will access the archive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77742ba9d4441c9cd6ebfcc2dc3a742b4ac97778" translate="yes" xml:space="preserve">
          <source>When these settings are used, any attribute not defined in a whitelist will not be saved. Each attribute type is whitelisted independently of the other attribute types. For example, if &lt;code&gt;automatic_attribute_whitelist&lt;/code&gt; defines attributes to be saved, but &lt;code&gt;normal_attribute_whitelist&lt;/code&gt;, &lt;code&gt;default_attribute_whitelist&lt;/code&gt;, and &lt;code&gt;override_attribute_whitelist&lt;/code&gt; are not defined, then all normal, default and override attributes are saved, along with only the specified automatic attributes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e78bc6510ccf8d4739c5137f99df81be935db3dd" translate="yes" xml:space="preserve">
          <source>When this approach is used, the client.rb file must also tell the chef-client how to install and run the handler. There is no default install location for handlers. The simplest way to distribute and install them is via RubyGems, though other methods such as GitHub or HTTP will also work. Once the handler is installed on the system, enable it in the client.rb file by requiring it. After the handler is installed, it may require additional configuration. This will vary from handler to handler. If a handler is a very simple handler, it may only require the creation of a new instance. For example, if a handler named &lt;code&gt;MyOrg::EmailMe&lt;/code&gt; is hardcoded for all of the values required to send email, a new instance is required. And then the custom handler must be associated with each of the handler types for which it will run.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db3b0d487c1d3167554fcaf027b2e3195c6f4531" translate="yes" xml:space="preserve">
          <source>When this command is run, the certificate files (&lt;code&gt;*.crt&lt;/code&gt; and/or &lt;code&gt;*.pem&lt;/code&gt;) that are located in the &lt;code&gt;/.chef/trusted_certs&lt;/code&gt; directory are checked to see if they have valid X.509 certificate properties. A warning is returned when certificates do not have valid X.509 certificate properties or if the &lt;code&gt;/.chef/trusted_certs&lt;/code&gt; directory does not contain any certificates.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2bdc44cbc8a44d20394ad10d22eee3657cdfd3bc" translate="yes" xml:space="preserve">
          <source>When this occurs, after the &lt;strong&gt;redis_lb&lt;/strong&gt; service started, it&amp;rsquo;s logs will show a statement similar to the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62873267d203abf8225df3a7a909506141461e71" translate="yes" xml:space="preserve">
          <source>When this recipe runs, the chef-client will print something like the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be51d4127907ed93e42148a6a9cc2ebdd2a9f501" translate="yes" xml:space="preserve">
          <source>When this short name is used, the chef-client will attempt to determine the correct provider during the chef-client run.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d027b11bbc594358ff66b3b8c2121bd02602ac9" translate="yes" xml:space="preserve">
          <source>When this short name is used, the chef-client will determine the correct provider during the chef-client run.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04fafabbbaa6e595cfbe9706a786d7b2f5686845" translate="yes" xml:space="preserve">
          <source>When to log a slow PostgreSQL query statement. Possible values: &lt;code&gt;-1&lt;/code&gt; (disabled, do not log any statements), &lt;code&gt;0&lt;/code&gt; (log every statement), or an integer greater than zero. When the integer is greater than zero, this value is the amount of time (in milliseconds) that a query statement must have run before it is logged. Default value: &lt;code&gt;-1&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18bc2797d66f62a3470719935aa7dd21f8724265" translate="yes" xml:space="preserve">
          <source>When using &lt;code&gt;mkpasswd&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="112b3ca0ac91a967ddb00f9b7db21c6dc463f7c3" translate="yes" xml:space="preserve">
          <source>When using an explicit &lt;code&gt;gem_binary&lt;/code&gt;, options must be passed as a string. When not using an explicit &lt;code&gt;gem_binary&lt;/code&gt;, the chef-client is forced to spawn a gems process to install the gems (which uses more system resources) when options are passed as a string. String options are passed verbatim to the gems command and should be specified just as if they were passed on a command line. For example, &lt;code&gt;--prerelease&lt;/code&gt; for a pre-release gem.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="901b83fe68a7c3ddb30041341e9d5f27fd54abbd" translate="yes" xml:space="preserve">
          <source>When using more than 25 nodes, a configuration change to your Chef server needs to be made in order for your Chef server to be properly configured and recognize your purchased licenses. You will need to edit to your &lt;code&gt;chef-server.rb&lt;/code&gt; file by following the process below:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b249f284c80a3b64f8de6c2ce7dc7531ea896dc9" translate="yes" xml:space="preserve">
          <source>When using the &lt;code&gt;deploy_revision&lt;/code&gt; provider, and when the deploy fails for any reason, and when the same code is used to re-deploy, the action should be set manually to &lt;code&gt;:force_deploy&lt;/code&gt;. Forcing the re-deploy will remove the old release directory, after which the deploy can proceed as usual. (Forcing a re-deploy over the current release can cause some downtime.) Deployed revisions are stored in &lt;code&gt;(file_cache_path)/revision-deploys/(deploy_path)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b83abce04cb9c7d14595e1327103e2bc21adfc6" translate="yes" xml:space="preserve">
          <source>When using the &lt;code&gt;not_if&lt;/code&gt; and &lt;code&gt;only_if&lt;/code&gt; guards with the &lt;strong&gt;execute&lt;/strong&gt; resource, the current working directory property (&lt;code&gt;cwd&lt;/code&gt;) is &lt;strong&gt;not&lt;/strong&gt; inherited from the resource. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0040c85f8abe58074c384781c6fd4b3223eb4ff7" translate="yes" xml:space="preserve">
          <source>When verification of a remote server&amp;rsquo;s SSL certificate is disabled, the chef-client will issue a warning similar to &amp;ldquo;SSL validation of HTTPS requests is disabled. HTTPS connections are still encrypted, but the chef-client is not able to detect forged replies or man-in-the-middle attacks.&amp;rdquo; To configure SSL for the chef-client, set &lt;code&gt;ssl_verify_mode&lt;/code&gt; to &lt;code&gt;:verify_peer&lt;/code&gt; (recommended) &lt;strong&gt;or&lt;/strong&gt;&lt;code&gt;verify_api_cert&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; in the client.rb file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0227fa6558c9601baadd253c145f6887e51b3837" translate="yes" xml:space="preserve">
          <source>When why-run mode is enabled, a chef-client run will occur that does everything up to the point at which configuration would normally occur. This includes getting the configuration data, authenticating to the Chef server, rebuilding the node object, expanding the run-list, getting the necessary cookbook files, resetting node attributes, identifying the resources, and building the resource collection and does not include mapping each resource to a provider or configuring any part of the system.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf41f5464ac513f2f6466c8614e787c8bdfe70cb" translate="yes" xml:space="preserve">
          <source>When working with chef-container, add the following setting:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2203122b92fbe282840f379767439bb07437c3e1" translate="yes" xml:space="preserve">
          <source>Where &lt;code&gt;ORGANIZATION&lt;/code&gt; and &lt;code&gt;USER&lt;/code&gt; represent strings that are unique to each organization. These files must be present in the .chef directory in order for a workstation to be able to connect to a Chef server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab70283287c4438fec6c0cde5b463dd902fec1da" translate="yes" xml:space="preserve">
          <source>Where a resource represents a piece of the system (and its desired state), a provider defines the steps that are needed to bring that piece of the system from its current state into the desired state.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6018bcffb08936603df92fdca4c08cbe0153e429" translate="yes" xml:space="preserve">
          <source>Whereas, this should return &lt;code&gt;false&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52899964f3f990709a082a2590b553f172c27820" translate="yes" xml:space="preserve">
          <source>Whether Nginx is used to cache cookbooks. When &lt;code&gt;:on&lt;/code&gt;, Nginx serves up the cached content instead of forwarding the request. Default value: &lt;code&gt;:off&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7cb4123658a6094a0a1da9b578c1289c74a9862b" translate="yes" xml:space="preserve">
          <source>Whether or not users can create new organizations from Chef management console. Default value: &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aad7a1653a57cc011ce3bce30e974f0dc1bea6b3" translate="yes" xml:space="preserve">
          <source>Whether the Chef server or chef-client generates the private/public key pair. When &lt;code&gt;true&lt;/code&gt;, the chef-client generates the key pair, and then sends the public key to the Chef server. Default value: &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15d6d7effb6e653d290a5d0c104cda2f69bd9c3f" translate="yes" xml:space="preserve">
          <source>Whether the chef-client uses active or passive FTP. Set to &lt;code&gt;true&lt;/code&gt; to use active FTP. Default value: &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56dc93dce7e6b54c8f92a0e565b6ff689bea1354" translate="yes" xml:space="preserve">
          <source>Whether this cookbook should replace another (and can be used in-place of that cookbook).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6511063a03ddc32097ca6f751f3d8d2398097ac9" translate="yes" xml:space="preserve">
          <source>Which is the same as entering:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cbe3af15c6d2638752064bd99ad8abbd3a5a2c64" translate="yes" xml:space="preserve">
          <source>Which saves the database every 15 minutes if at least one key changes, every 5 minutes if at least 10 keys change, and every 60 seconds if 10000 keys change.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e33313a455cd07ca964cb62e0d9987c19e03dd7" translate="yes" xml:space="preserve">
          <source>Which users should be set or appended to a group. When more than one group member is identified, the list of members should be an array: &lt;code&gt;members ['user1', 'user2']&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2137e28a3982a645707427cdd5af998c59076fa4" translate="yes" xml:space="preserve">
          <source>While Chef includes tooling like the Chef development kit, encourages integration and unit testing, and defines workflow around cookbook authoring and policy, it&amp;rsquo;s important to note that you know best about how your infrastructure should be put together. Therefore, Chef makes as few decisions on its own as possible. When a decision must be made, the chef-client uses a reasonable default setting that can be easily changed. While Chef encourages the use of the tooling packaged in the Chef development kit, none of these tools should be seen as a requirement or pre-requisite for being successful using Chef.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="746b2c279e92645e782e0ea37d08555e191cfa2b" translate="yes" xml:space="preserve">
          <source>While synthetic benchmarks should be taken with a grain of salt, as they don&amp;rsquo;t typically represent real-world performance, internal synthetic benchmarks at Chef have seen a standalone Chef server installed on a &lt;code&gt;c3.2xlarge&lt;/code&gt; Amazon Web Services (AWS) instance handle more than 1,000 CCRs/min (30k nodes).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dba0f52fcbfb044a1bcd79757615eed5c9eb9731" translate="yes" xml:space="preserve">
          <source>Whitelist Attributes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9b84190cf878a963c04636c60b2ee29a10d3cf2" translate="yes" xml:space="preserve">
          <source>Whitespace Arrays</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96fd3a3f273f8da3ce33ca25d30f0df34195ed96" translate="yes" xml:space="preserve">
          <source>WiX includes serveral tools &amp;ndash; such as &lt;code&gt;candle&lt;/code&gt; (preprocesses and compiles source files into object files), &lt;code&gt;light&lt;/code&gt; (links and binds object files to an installer database), and &lt;code&gt;heat&lt;/code&gt; (harvests files from various input formats). The following example uses a whitespace array and the InSpec &lt;code&gt;file&lt;/code&gt; audit resource to verify if these three tools are present:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="641be895c08513d3bfd01d7c1a2ff3ca352244e4" translate="yes" xml:space="preserve">
          <source>Wildcard Matching</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0774b81b662cb7c3bfab731a7cbb23085a2cb853" translate="yes" xml:space="preserve">
          <source>Wildcard Search</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0dbb6054a85d69dee69bd97a36b21d26b10d171a" translate="yes" xml:space="preserve">
          <source>Wildcard matching may be used in the &lt;code&gt;no_proxy&lt;/code&gt; list&amp;mdash;such as &lt;code&gt;no_proxy '*.*.example.*'&lt;/code&gt;&amp;mdash;however, many situations require hostnames to be specified explicitly (i.e. &amp;ldquo;without wildcards&amp;rdquo;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4ea818f4f60089e09a6ddbcfe1ab466f6e38738" translate="yes" xml:space="preserve">
          <source>Wildcard patterns must be escaped (using a backslash) so that the wildcard itself can reach the Chef server. If they are not escaped, the wildcard is expanded into the actual filenames and knife will not know the wildcard was intended to be used. For example, if the Chef server has data bags named &lt;code&gt;aardvarks&lt;/code&gt;, &lt;code&gt;anagrams&lt;/code&gt;, and &lt;code&gt;arp_tables&lt;/code&gt;, but the local file system only has &lt;code&gt;aardvarks&lt;/code&gt; and &lt;code&gt;anagrams&lt;/code&gt;, escaping vs. not escaping the wildcard pattern will yield different results:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f30b6fed6f7375733b9bc83000abdfd6b22cf6e" translate="yes" xml:space="preserve">
          <source>Will override the default configuration when a knife.rb file exists at the default path or the path specified by the &lt;code&gt;--config&lt;/code&gt; option</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d51b978f381a8ae38830cc5e304b90d0f5e6764d" translate="yes" xml:space="preserve">
          <source>Will return something like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8718eb7c1c6d5f2192aa1769aa6d7662203c3c8" translate="yes" xml:space="preserve">
          <source>WinRM requires that a target node be accessible via the ports configured to support access via HTTP or HTTPS.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26d9c28d789c254f71ea99a3463b99a7ccc2f4fa" translate="yes" xml:space="preserve">
          <source>Windows</source>
          <target state="translated">Windows</target>
        </trans-unit>
        <trans-unit id="6068c58fc1377a294a266598e4a1be86b7b44628" translate="yes" xml:space="preserve">
          <source>Windows File Redirection</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a28c70822bef11a77c25b8363183b0a0f932897" translate="yes" xml:space="preserve">
          <source>Windows File Security</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a695680a169f834cb90980af459fde815c291b7c" translate="yes" xml:space="preserve">
          <source>Windows Management Framework (WMF) 5.0 February Preview (or higher), which includes Windows PowerShell 5.0.10018.0 (or higher).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="733b53500cac45b1ccabfeea23e2dd3682ceafd7" translate="yes" xml:space="preserve">
          <source>Windows Platform</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7aec405442c5cb6c886214b18022f4f9d2af5cbf" translate="yes" xml:space="preserve">
          <source>Windows PowerShell</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e91da6c893abd8d5688a76bbb53d053949364907" translate="yes" xml:space="preserve">
          <source>Windows PowerShell 4.0 is required for using the &lt;strong&gt;dsc_script&lt;/strong&gt; resource with Chef.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb49bbe222b03cdcf0474de8fae174d5e3bb9354" translate="yes" xml:space="preserve">
          <source>Windows PowerShell is a task-based command-line shell and scripting language developed by Microsoft. Windows PowerShell uses a document-oriented approach for managing Microsoft Windows-based machines, similar to the approach that is used for managing UNIX- and Linux-based machines. Windows PowerShell is &lt;a href=&quot;http://technet.microsoft.com/en-us/library/bb978526.aspx&quot;&gt;a tool-agnostic platform&lt;/a&gt; that supports using Chef for configuration management.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="258e84f31318a582fd49804f0452b27bc7daf642" translate="yes" xml:space="preserve">
          <source>With &lt;code&gt;force_default!&lt;/code&gt; there is no other data under &lt;code&gt;'bar'&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d180225395aa938ca1d96a13a5bf37c6b823a95" translate="yes" xml:space="preserve">
          <source>With a full assignment:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71d294cbd746726f768e0115df4546ccbda6f835" translate="yes" xml:space="preserve">
          <source>With override attributes:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d9c8864d8a552e3879c77f195628ae597bb271a" translate="yes" xml:space="preserve">
          <source>With the &lt;code&gt;:create&lt;/code&gt; action, a user&amp;rsquo;s home directory is created based on &lt;code&gt;HOME_DIR&lt;/code&gt;. If the home directory is missing, it is created unless &lt;code&gt;CREATE_HOME&lt;/code&gt; in &lt;code&gt;/etc/login.defs&lt;/code&gt; is set to &lt;code&gt;no&lt;/code&gt;. When created, a skeleton set of files and sub-directories is also created in the home directory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ff8894b04fbfd4489b0b6bab41c67509b8cafae" translate="yes" xml:space="preserve">
          <source>With the &lt;code&gt;:modify&lt;/code&gt; action, a user&amp;rsquo;s home directory is moved to &lt;code&gt;HOME_DIR&lt;/code&gt;. If the home directory is missing, it is created unless &lt;code&gt;CREATE_HOME&lt;/code&gt; in &lt;code&gt;/etc/login.defs&lt;/code&gt; is set to &lt;code&gt;no&lt;/code&gt;. The contents of the user&amp;rsquo;s home directory are moved to the new location.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf2200878084bfab02f9303a1df2f242ce6ccbcc" translate="yes" xml:space="preserve">
          <source>With the improved custom resource pattern available starting with chef-client 12.5, the need to use definitions is greatly minimized. In every case when considering to use a definition, first evaluate whether that defintion is better represented as a custom resource.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38363e0794c795b66fd5caa2a2fc973d3d1f034f" translate="yes" xml:space="preserve">
          <source>Within a callback, there are two ways to get access to information about the deployment:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fec2d1608728cea8bea6c61361c3f7426322762a" translate="yes" xml:space="preserve">
          <source>Within the &lt;code&gt;on&lt;/code&gt; block, tell the chef-client how to handle the event when it&amp;rsquo;s triggered.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26222b3b03011f8e9b93559428b51e98e71a6bf8" translate="yes" xml:space="preserve">
          <source>Without the &lt;code&gt;--force&lt;/code&gt; option specified, an error will be returned similar to:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fcf6d20c281619ed256e5e60e7b077aea3b22e88" translate="yes" xml:space="preserve">
          <source>Work with Cookbooks</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26a3e60f386442716279db7bf22f91ea3242a0cc" translate="yes" xml:space="preserve">
          <source>Work with Recipes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d02d6a8e13042c295a3791a9f73737dc690386b2" translate="yes" xml:space="preserve">
          <source>Work with basic truths:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3bcfcb2dcfa7560c98d5435a34cd222b75bdfd8" translate="yes" xml:space="preserve">
          <source>Work with basic untruths (&lt;code&gt;!&lt;/code&gt; means not!):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="592d5b8e5474064d20d011e559c0862d0fbc188a" translate="yes" xml:space="preserve">
          <source>Work with strings:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3fec5ac86e16b0009eabd9fdf1982b0b7d3e6d71" translate="yes" xml:space="preserve">
          <source>Workflow Tools</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c920c594234fe9de0efc9f55a16f621905c766ac" translate="yes" xml:space="preserve">
          <source>Working with Knife</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f81a883329bcba57e3860a0191b0768eacd5b58" translate="yes" xml:space="preserve">
          <source>Workstations</source>
          <target state="translated">Workstations</target>
        </trans-unit>
        <trans-unit id="3649ee60f82cecac530b8dff4a9a9b3fd44cfc99" translate="yes" xml:space="preserve">
          <source>Would render something like:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="285e44d885dc4172b3d4f2f306e188c7cae2a514" translate="yes" xml:space="preserve">
          <source>Write a recipe using the &lt;strong&gt;chef_handler&lt;/strong&gt; resource</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e6e98acee5f62a8ef971a9a250b569ab85edad8" translate="yes" xml:space="preserve">
          <source>Write the ORGANIZATION-validator.pem to &lt;code&gt;FILE_NAME&lt;/code&gt; instead of printing it to &lt;code&gt;STDOUT&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="864ff71b4e5b60798bcef8ba5cf4934d8c2e4de3" translate="yes" xml:space="preserve">
          <source>Write the USER.pem to a file instead of &lt;code&gt;STDOUT&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9dcefd3c5d200ed5ec11ecb202e04e26c84f3510" translate="yes" xml:space="preserve">
          <source>Write the USER.pem to a file instead of &lt;code&gt;STDOUT&lt;/code&gt;. For example: &lt;code&gt;/tmp/grantmc.key&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74c063af2db81640da30a0a0e6278cc4cda4b874" translate="yes" xml:space="preserve">
          <source>Wrong:</source>
          <target state="translated">Wrong:</target>
        </trans-unit>
        <trans-unit id="068862954c50124683380f88d7ce734ef567f279" translate="yes" xml:space="preserve">
          <source>You can see the full status by running cat &lt;code&gt;/proc/drbd&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="375dcc0bfcfa694e2a37da575fcee2883a42bd51" translate="yes" xml:space="preserve">
          <source>You can use &lt;code&gt;chef shell-init&lt;/code&gt; with Windows PowerShell.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18bad0161494ddab412989c13eedc8806b7771fe" translate="yes" xml:space="preserve">
          <source>You may see an empty list or you may see a populated list of invites. No invites looks like this</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0aac482b615c2326f56c47e24481c130811ec35" translate="yes" xml:space="preserve">
          <source>You may use a cookbook that already exists or you may create a new cookbook.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9aae51ee98111c8a86615fa07879bdb189fa847b" translate="yes" xml:space="preserve">
          <source>Yum automatically synchronizes remote metadata to a local cache. The chef-client creates a copy of the local cache, and then stores it in-memory during the chef-client run. The in-memory cache allows packages to be installed during the chef-client run without the need to continue synchronizing the remote metadata to the local cache while the chef-client run is in-progress.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02708c7ee146a95feac8f3d37a907da17d3a0e0c" translate="yes" xml:space="preserve">
          <source>Zero or more arguments that define parameters their default values; if a default value is not specified, it is assumed to be &lt;code&gt;nil&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78bd317f5b8d325620a9a040abd97ebb2ed25504" translate="yes" xml:space="preserve">
          <source>ZooKeeper</source>
          <target state="translated">ZooKeeper</target>
        </trans-unit>
        <trans-unit id="9e78325b3e8408521d7eaf8500fcff47ee47baf1" translate="yes" xml:space="preserve">
          <source>_status</source>
          <target state="translated">_status</target>
        </trans-unit>
        <trans-unit id="32ba549638f717c883b6c63921c633fd9ea5ab6b" translate="yes" xml:space="preserve">
          <source>a partial search query can be used to return something like:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81cc5990f6500c8146362356c2b73d11a8dc4540" translate="yes" xml:space="preserve">
          <source>a private key has been added to the node</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="326b426f9ac7a96ed6baf62f8838565416d27df8" translate="yes" xml:space="preserve">
          <source>actions</source>
          <target state="translated">actions</target>
        </trans-unit>
        <trans-unit id="bc57ad923c0607b7b66aa1f60dc914b716293d64" translate="yes" xml:space="preserve">
          <source>actions_messages</source>
          <target state="translated">actions_messages</target>
        </trans-unit>
        <trans-unit id="a21f59951777714dd9a88351fb6d3cc972c0440c" translate="yes" xml:space="preserve">
          <source>add-client-key</source>
          <target state="translated">add-client-key</target>
        </trans-unit>
        <trans-unit id="9f1255420c65d9733c194d2bacab89e81ce70c27" translate="yes" xml:space="preserve">
          <source>add-user-key</source>
          <target state="translated">add-user-key</target>
        </trans-unit>
        <trans-unit id="c5a2dc3dcb24a8c9c790110e437b2a1960cba13e" translate="yes" xml:space="preserve">
          <source>admins</source>
          <target state="translated">admins</target>
        </trans-unit>
        <trans-unit id="d9ae3f56e9f2a9684537d2dbc0f23821371d6c01" translate="yes" xml:space="preserve">
          <source>after-sb-0pri: A &lt;code&gt;split-brain&lt;/code&gt; event has been detected and neither node is the primary node. The &lt;code&gt;discard-younger-primary&lt;/code&gt; action will roll back any changes made on the last host that was the primary node.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d50db1bc1545f6958f08bc69f9b95d3aacfee8f0" translate="yes" xml:space="preserve">
          <source>after-sb-1pri: A &lt;code&gt;split-brain&lt;/code&gt; event has been detected and only one node believes that it was the primary node when the event happened. The &lt;code&gt;discard-secondary&lt;/code&gt; action will continue operations on the primary node and will assume that the secondary node was lost.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24c3c13890be67f81a66ef221a1fd6fded1878c6" translate="yes" xml:space="preserve">
          <source>after-sb-2pri: A &lt;code&gt;split-brain&lt;/code&gt; event has been detected and both nodes believed they were primary nodes. The &lt;code&gt;call-pri-lost-after-sb&lt;/code&gt; action will attempt to apply the &lt;code&gt;discard-younger-primary&lt;/code&gt; from the &lt;code&gt;0pri&lt;/code&gt; configuration to determine which host should be the primary node. Once determined, the other host takes action to become the secondary node.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d49ae02d2299b2f4291a67ba6807b9795144733f" translate="yes" xml:space="preserve">
          <source>an SSH wrapper is being used</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cffa50a32cb13a240d705317bcec65dd1f31b6ad" translate="yes" xml:space="preserve">
          <source>and</source>
          <target state="translated">and</target>
        </trans-unit>
        <trans-unit id="296ee54aadda84e938eff3be7ad405a37d8aa962" translate="yes" xml:space="preserve">
          <source>and NOT something like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ddaa49053336974d196e8fd26d778f1b79fa6ba" translate="yes" xml:space="preserve">
          <source>and a &lt;code&gt;run_list&lt;/code&gt; like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ff3295979787f54ece891c8314bb899fea195eb" translate="yes" xml:space="preserve">
          <source>and a force at each attribute precedence:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60041820cee1f990176fadf5d6c5d8694fddeab8" translate="yes" xml:space="preserve">
          <source>and a resource block that installs a tar.gz package for version 1.6.1 like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3665155a6bfce344576c302ee2e6e173bd4324ba" translate="yes" xml:space="preserve">
          <source>and a resource block that is doing lazy evaluation:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b0aa7f450ea9361c0db2e4eb922d20ed33c6bbf" translate="yes" xml:space="preserve">
          <source>and a resource block:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="277f84edcbd9a577b161c940e623db76a44d2552" translate="yes" xml:space="preserve">
          <source>and a resource that looks something like the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="079bf76fd8f49ca1d0e6f0400dda49f7b347c6e6" translate="yes" xml:space="preserve">
          <source>and as a Hash:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c3df46f28356d8b3aab48dd9a1ea911a2ab7a6a" translate="yes" xml:space="preserve">
          <source>and be sure to edit &lt;code&gt;shadow-check.rb&lt;/code&gt; so that it defines the path to that file correctly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96740a1ce9a9e8ba6824057bac3521ae91254892" translate="yes" xml:space="preserve">
          <source>and finally, JSON data passed to chef-solo:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bdcf0b8c870fa352facfc5a7edc8a0e83d998c08" translate="yes" xml:space="preserve">
          <source>and for a client, similar to:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a18ee518b421f29ee8fd7b90a01c7b94ad869c4" translate="yes" xml:space="preserve">
          <source>and for multiple plugins:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="880745716f7fa5f07c331eb7588609f7908a5568" translate="yes" xml:space="preserve">
          <source>and for the primary, something like the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37ae62f27848dd22f09c3661bc9013c3e3c19f92" translate="yes" xml:space="preserve">
          <source>and for vim, do something like:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d7e32fb792ac522a4a37988c55f630a617919b8" translate="yes" xml:space="preserve">
          <source>and for vim:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e547a173945b9e4cadb739c6eab98d4b56e9019" translate="yes" xml:space="preserve">
          <source>and from within a recipe:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1062522a23431f4cb6e988fc01822c45ff92b402" translate="yes" xml:space="preserve">
          <source>and is located in a directory named &lt;code&gt;scripts/&lt;/code&gt;, enter:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0439ed182dd92cf4867bf66ae63a434efdfe7e3e" translate="yes" xml:space="preserve">
          <source>and is the same search as:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e82f9def386479e09e793fc4f3d80615ffdd78dd" translate="yes" xml:space="preserve">
          <source>and is then usable in a recipe like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a1a746f51aef73cdf1d6b68aae0bfcc8a36289c" translate="yes" xml:space="preserve">
          <source>and it returns the following error:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28b3f3b0ae733621cdd272a15885a4d29686eb1f" translate="yes" xml:space="preserve">
          <source>and it returns the following response:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b50e52a5847743eaaede1a0c8f6bc2a89b997c4c" translate="yes" xml:space="preserve">
          <source>and it returns the same list of users:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ba16f9251ee088655c62366136f59c6d700d518" translate="yes" xml:space="preserve">
          <source>and like the following in the Ruby DSL:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8624e2e425b3176466d281319eee68a442bc7a9e" translate="yes" xml:space="preserve">
          <source>and not this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18c1a77af4b2d10df8fd420df46103ee641b73a3" translate="yes" xml:space="preserve">
          <source>and requires adding the &lt;code&gt;environment&lt;/code&gt; property to the &lt;code&gt;not_if&lt;/code&gt; guard statement so that it may use the &lt;code&gt;JAVA_HOME&lt;/code&gt; path as part of its evaluation:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95003e806400e4a8da4ad4bbab3310303009a475" translate="yes" xml:space="preserve">
          <source>and should be updated to add &lt;code&gt;organizations/ORG_NAME&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57a229e576b65c3c1df2c36195970001c17dea61" translate="yes" xml:space="preserve">
          <source>and the $EDITOR opens in which Alice makes changes, and then saves them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b91aa85ce5b25aceae7df13a812493508f15adbf" translate="yes" xml:space="preserve">
          <source>and the following error is returned:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f63013823f4e2231c00ef693050dd37b1350167" translate="yes" xml:space="preserve">
          <source>and the following example shows how to make API calls directly:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81ec35097018f6aa6b8873410d909b7e8af55323" translate="yes" xml:space="preserve">
          <source>and the following example shows the same comparison, but with the &lt;code&gt;deploy:migrations&lt;/code&gt; process:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fff1030f126282b807705de35e21faae32c0611a" translate="yes" xml:space="preserve">
          <source>and the following syntax when creating a client.rb file:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62c24954cf88d0bd55bb714258f98f6e6c51f49b" translate="yes" xml:space="preserve">
          <source>and the full syntax for all of the properties that are available to the &lt;strong&gt;deploy&lt;/strong&gt; when used with Subversion is:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ac50daebaf74b82617ee2af245e7bc37177a300" translate="yes" xml:space="preserve">
          <source>and the next uses a single &lt;strong&gt;package&lt;/strong&gt; resource and a whitespace array (&lt;code&gt;%w&lt;/code&gt;):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a284d904277949a25ed00be185ea4f9d712e1c1a" translate="yes" xml:space="preserve">
          <source>and then (if it is not running), start the service:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="280373ff49ffee1d16bb134f9ba5cb6c30a729dc" translate="yes" xml:space="preserve">
          <source>and then a role named &lt;code&gt;web.rb&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="920261f0f72f95ec90ed0b28425a7b6211429d7a" translate="yes" xml:space="preserve">
          <source>and then add them to the chef-shell.rb file. Other configuration possibilities include disabling Ohai plugins (which will speed up the chef-shell boot process) or including arbitrary Ruby code in the chef-shell.rb file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c127069a2c0cd6a9a4faf8562782fa90636054e" translate="yes" xml:space="preserve">
          <source>and then change it:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="453482b1133ecd3ec8ccc3a6cc8796c101208fde" translate="yes" xml:space="preserve">
          <source>and then check the status:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0de6d61938be9fbffcd240addc560b53925e8755" translate="yes" xml:space="preserve">
          <source>and then create a JSON file in that location:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b16368e3821434948398d85ee009a3d8a0f2e41" translate="yes" xml:space="preserve">
          <source>and then enable it using the &lt;code&gt;mkitab&lt;/code&gt; command:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b5d8655ea4591edf43f128dcac0dcb1c0fa4d4a" translate="yes" xml:space="preserve">
          <source>and then ensure there is a buffer beyond that value. For example, verify the size of the largest node object file:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f30f7749287864cd78ce6b0d1baab5847f61f306" translate="yes" xml:space="preserve">
          <source>and then enter the password and confirm it:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64d1eef00dae9671fcc25b0cef71429e35614c64" translate="yes" xml:space="preserve">
          <source>and then extract the URLs and sort them by &lt;code&gt;uniq&lt;/code&gt; count:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49456328440dda229bd774d4e17915da727d5b4d" translate="yes" xml:space="preserve">
          <source>and then is activated in a recipe by using the &lt;strong&gt;chef_handler&lt;/strong&gt; resource:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14c4c0cc6bd5576583483ff8fd5f6717f6b5ee6b" translate="yes" xml:space="preserve">
          <source>and then is used in a recipe like:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02c2b2003c7555171b7368a4156937ff8f121a93" translate="yes" xml:space="preserve">
          <source>and then later in the same recipe, or elsewhere:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca806fc103cb223940800393b802e005d63de557" translate="yes" xml:space="preserve">
          <source>and then later on:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0cf14a82e8bb6d2f27cce5d425c5d6fa53a2d4e0" translate="yes" xml:space="preserve">
          <source>and then make the following changes in the knife.rb file:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8ff4013f70123757f1867c992fc95df690970ab" translate="yes" xml:space="preserve">
          <source>and then remove a passphrase from a private key by using code similar to:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef8375eac5dafd34ea72958aa7567f46f63c6ca0" translate="yes" xml:space="preserve">
          <source>and then run the chef-client:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6bd148f4455ff9c4183fa76534b07711dad724d0" translate="yes" xml:space="preserve">
          <source>and then setting their values to define the paths to the certificate and key.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a051334288aadbf8931504afe8c8480219124748" translate="yes" xml:space="preserve">
          <source>and then start the chef-client as a service:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4899f8ce8cc2a6f7c8775dc348d7f8b67d52c965" translate="yes" xml:space="preserve">
          <source>and then the chef-client would immediately run the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="202d71adbc0e1dcf060dc2192b91fa7d6570dcd5" translate="yes" xml:space="preserve">
          <source>and then the following example specifies how to use inheritance to deny access to the child directory:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="227e4d4c0ded27a7a5bb901d44fe8d0cb813302e" translate="yes" xml:space="preserve">
          <source>and then the following resources manage the dotfiles:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9269edd0699e6db575c9662031ec1822ba4facd1" translate="yes" xml:space="preserve">
          <source>and then the methods in the recipe may refer to these values. A recipe that is used to install Python will need to do the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5cb7d02b39e97cc6e198aae932363abc0a19e155" translate="yes" xml:space="preserve">
          <source>and then the same &lt;strong&gt;dsc_resource&lt;/strong&gt; with Chef:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26523ffcacdf43c1f1362133c96858af875046c4" translate="yes" xml:space="preserve">
          <source>and then using the results of that query to populate a template:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c027f9759650256d8d1932a672937340fb002e39" translate="yes" xml:space="preserve">
          <source>and then what these layout modifiers look like if they were empty:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="478c17c32f1bc3336788616eaad90d7da7f5fbd4" translate="yes" xml:space="preserve">
          <source>and then:</source>
          <target state="translated">그리고:</target>
        </trans-unit>
        <trans-unit id="dcc3c49675ec93304eccab72febf1e1741ad888b" translate="yes" xml:space="preserve">
          <source>and to delete the exampleco website, do the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="391e71321d57b118916af4b0e1299150bb3a8c96" translate="yes" xml:space="preserve">
          <source>and to disable multiple plugins, including Ohai 6 plugins:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f8df5f5d8cb99f011a764366680fbb691db9b91" translate="yes" xml:space="preserve">
          <source>and to ensure that the output is visible in the console, add the &lt;code&gt;puts&lt;/code&gt; in front of the API authorization request:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65bb186e65eb9451ab888e06ab0bf88cdbfcf41b" translate="yes" xml:space="preserve">
          <source>and to show the full list of nodes (and workstations) that are registered with the Chef server, run the following command:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61839608795afad23b43cc0c61a112b0369ac465" translate="yes" xml:space="preserve">
          <source>and where &lt;code&gt;_default&lt;/code&gt; is the name of the environment that is assigned to the node.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e39286a3de2476192b0e375c5f883c4481de55fd" translate="yes" xml:space="preserve">
          <source>and will return a list of users similar to:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52f671b9a2687428cdee74300c20625794c35d6c" translate="yes" xml:space="preserve">
          <source>and will return something like:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62335d3007f86e1196e9c09e583e66ca66e65ba3" translate="yes" xml:space="preserve">
          <source>and will return the status for all services. Status can be returned for individual services by specifying the name of the service as part of the command:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d57d0fb0cca15273ca3569e493393fe2c8a681fc" translate="yes" xml:space="preserve">
          <source>and/or:</source>
          <target state="translated">and/or:</target>
        </trans-unit>
        <trans-unit id="a5230bf3ac1fc697c044aa12dc9e2fb2c6ea3dcf" translate="yes" xml:space="preserve">
          <source>and:</source>
          <target state="translated">and:</target>
        </trans-unit>
        <trans-unit id="e9baf705782b04fa850944c23a90b0d1a4af24e9" translate="yes" xml:space="preserve">
          <source>any cross-platform abstraction for an application, such as the path to a configuration file</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="682aeb5e6a7ffdaa97567b10aeb1ba549b8bd2dd" translate="yes" xml:space="preserve">
          <source>any value set by a role or an environment will replace it. To prevent this value from being replaced, use the &lt;code&gt;force_default&lt;/code&gt; attribute precedence:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="973ee9e92a4a3c0fbe347d750a0729eb1297d5b6" translate="yes" xml:space="preserve">
          <source>any value set by a role or an environment will replace it. To prevent this value from being replaced, use the &lt;code&gt;force_override&lt;/code&gt; attribute precedence:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6d6c120756dceeea81d0a63d9870278e280b638" translate="yes" xml:space="preserve">
          <source>anything that may need to be persisted in node data between chef-client runs</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d3f9f12b50b1be4a0c95b34e7aaa80469b79e97" translate="yes" xml:space="preserve">
          <source>approximately greater than; also known as &amp;ldquo;pessimistically greater than&amp;rdquo;, or &amp;ldquo;pessimistic&amp;rdquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b0ed685297462cde06d8c87c5d533e98fdc2a9c" translate="yes" xml:space="preserve">
          <source>apt_package</source>
          <target state="translated">apt_package</target>
        </trans-unit>
        <trans-unit id="866cd180c8ec57b80f54eaef14f1d957d8b91e37" translate="yes" xml:space="preserve">
          <source>apt_update</source>
          <target state="translated">apt_update</target>
        </trans-unit>
        <trans-unit id="d3623e7a6c05389e86c06617be6fa73ff5e2c44c" translate="yes" xml:space="preserve">
          <source>asks the Chef server for everything starting with the letter &amp;ldquo;a&amp;rdquo; and will return:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2fffd155a0a39cc4a582db50fc00b808a192fdee" translate="yes" xml:space="preserve">
          <source>at that point the status will change to something like the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64932f6336b13e15f031218f3c3438462bb8bbbb" translate="yes" xml:space="preserve">
          <source>attribute?</source>
          <target state="translated">attribute?</target>
        </trans-unit>
        <trans-unit id="46b53a61162fa05261bdb46b9ed22701fca50438" translate="yes" xml:space="preserve">
          <source>attributes: &lt;code&gt;node['foo']['bar']&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="754a08ddf8bcb1cf22f310f09206dd783d42f7dd" translate="yes" xml:space="preserve">
          <source>backend</source>
          <target state="translated">backend</target>
        </trans-unit>
        <trans-unit id="89121dc99c7db9ce2553a093a2ab29e07f7df34f" translate="yes" xml:space="preserve">
          <source>backup</source>
          <target state="translated">backup</target>
        </trans-unit>
        <trans-unit id="3b05fd226a6df8210102d426c7682040a3fec3a4" translate="yes" xml:space="preserve">
          <source>backup-recover</source>
          <target state="translated">backup-recover</target>
        </trans-unit>
        <trans-unit id="c8a16b493c487d9f0d43546b842106bf2ffa7152" translate="yes" xml:space="preserve">
          <source>bash</source>
          <target state="translated">bash</target>
        </trans-unit>
        <trans-unit id="7f01fe787c49e4adbe32533279699f08494c6472" translate="yes" xml:space="preserve">
          <source>batch</source>
          <target state="translated">batch</target>
        </trans-unit>
        <trans-unit id="2ad03bb7b5a627d44a206885d94ea98ac8901a4f" translate="yes" xml:space="preserve">
          <source>be.example.com</source>
          <target state="translated">be.example.com</target>
        </trans-unit>
        <trans-unit id="63745bbc0edc7283efbd187027a4f3d1f9d47257" translate="yes" xml:space="preserve">
          <source>be1.example.com</source>
          <target state="translated">be1.example.com</target>
        </trans-unit>
        <trans-unit id="b226e3d4c49d3e794fd8d6955945486df82f6820" translate="yes" xml:space="preserve">
          <source>be2.example.com</source>
          <target state="translated">be2.example.com</target>
        </trans-unit>
        <trans-unit id="9b96204c0187263048684eaac9fdecc4fa4a01d4" translate="yes" xml:space="preserve">
          <source>bff_package</source>
          <target state="translated">bff_package</target>
        </trans-unit>
        <trans-unit id="703a85bdb2d44ac3a043cb8a4f74d4b205b54832" translate="yes" xml:space="preserve">
          <source>bifrost</source>
          <target state="translated">bifrost</target>
        </trans-unit>
        <trans-unit id="d2ede9c781e61d721aed0554ad49c2166e99e966" translate="yes" xml:space="preserve">
          <source>billing_admins</source>
          <target state="translated">billing_admins</target>
        </trans-unit>
        <trans-unit id="8e435573c7522ea78a602b172ac69fcc451d38e2" translate="yes" xml:space="preserve">
          <source>bookshelf</source>
          <target state="translated">bookshelf</target>
        </trans-unit>
        <trans-unit id="3c71cc99d2fc1c12a3d3e1b27e448ca612a89a1d" translate="yes" xml:space="preserve">
          <source>bootstrap</source>
          <target state="translated">bootstrap</target>
        </trans-unit>
        <trans-unit id="5c0a31c48cda57c40dc61b785110d76593834ffd" translate="yes" xml:space="preserve">
          <source>breakpoint</source>
          <target state="translated">breakpoint</target>
        </trans-unit>
        <trans-unit id="ff43b3b6cb947613b30a113108bd9ec73f1995c9" translate="yes" xml:space="preserve">
          <source>breakpoint Resource</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a64476f7dd72860dad80017d9b67deb10666ffee" translate="yes" xml:space="preserve">
          <source>bulk delete</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a875238e6bec13e4f89b51fc5971ea6931afc91" translate="yes" xml:space="preserve">
          <source>but the following syntax can also be used:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="344b5d14e36cece1ead95f2ad1e4d58bbf7831a6" translate="yes" xml:space="preserve">
          <source>but then not use the &lt;code&gt;inherits&lt;/code&gt; property to deny those rights on a child directory:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17b9e8cbdbbc183c3b1243eecb8bcc1ae13f8718" translate="yes" xml:space="preserve">
          <source>but without needing to define a &lt;code&gt;run_action&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f33e9d0e6fe998434c8f5a140db1c5fc7c6a2bff" translate="yes" xml:space="preserve">
          <source>by using the following command, which will exclude PostgreSQL files:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a3987eb526c8de66f24478cfd3c25f74cf74202" translate="yes" xml:space="preserve">
          <source>cURL</source>
          <target state="translated">cURL</target>
        </trans-unit>
        <trans-unit id="03ca6f2b4abe8ceada63d546ecdc4a01710bd33b" translate="yes" xml:space="preserve">
          <source>can be accessed in a recipe, like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6406510c31e0c9925733c7f21414bf6428333ed2" translate="yes" xml:space="preserve">
          <source>case</source>
          <target state="translated">case</target>
        </trans-unit>
        <trans-unit id="c68ab5de8460d29922e6ae962d802bdd17dacfab" translate="yes" xml:space="preserve">
          <source>case Statements</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2b696eeaad4230962471ecbcbf3dbdfbd971e0e" translate="yes" xml:space="preserve">
          <source>checks out the master branch</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5f2e5c77054c44c2c72a1b017deca06fc637c99" translate="yes" xml:space="preserve">
          <source>chef</source>
          <target state="translated">chef</target>
        </trans-unit>
        <trans-unit id="4a819c4f189cc3e5f796e33a77a1d646723b8748" translate="yes" xml:space="preserve">
          <source>chef-apply (executable)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dfd5b2b437df44aa1638cb9413382f510c9d5d65" translate="yes" xml:space="preserve">
          <source>chef-apply is an executable program that runs a single recipe from the command line:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba119695ed1da0d4e8e2a3d8224b8289030aee07" translate="yes" xml:space="preserve">
          <source>chef-client</source>
          <target state="translated">chef-client</target>
        </trans-unit>
        <trans-unit id="aadc4b42e14d20925c0544cf84d4606567e3f9d0" translate="yes" xml:space="preserve">
          <source>chef-client (executable)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca1bfdea3d315d851ab6db4b2f5c16b0f6a93612" translate="yes" xml:space="preserve">
          <source>chef-client Lock File</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5de103007604c8263c8cd766d2c2119ca82a824" translate="yes" xml:space="preserve">
          <source>chef-client Settings</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d30ae401db07d616da3d802d57f9ad58104c0fd" translate="yes" xml:space="preserve">
          <source>chef-client runs are daemonized, and are not initiated by a cron job. Using cron to schedule runs can create &amp;ldquo;thundering herd&amp;rdquo; problems</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="edf6db12560f383f22286b1fc41faf58d81d6b17" translate="yes" xml:space="preserve">
          <source>chef-client runs are set to a default 30-minute interval with a 5-minute splay</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="643cbbca5ff5ff2e4de53716dea3ace3ff2a234f" translate="yes" xml:space="preserve">
          <source>chef-client: &lt;code&gt;/opt/chef/embedded/ssl/certs/cacert.pem&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e018abb12aa0f069076faa0bc178478402bebc4" translate="yes" xml:space="preserve">
          <source>chef-expander is used to pull messages from the RabbitMQ queue, process them into the required format, and then post them to chef-solr for indexing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae9193ebd9a4f482d97cb34429daf1ac718c044e" translate="yes" xml:space="preserve">
          <source>chef-repo</source>
          <target state="translated">chef-repo</target>
        </trans-unit>
        <trans-unit id="6b49bc8be6192aecab57d1fb821822df0c4f7d90" translate="yes" xml:space="preserve">
          <source>chef-server-ctl</source>
          <target state="translated">chef-server-ctl</target>
        </trans-unit>
        <trans-unit id="6c10f6e1030e27af8cc2e35b9e30eb456acaeafb" translate="yes" xml:space="preserve">
          <source>chef-server-ctl (executable)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc356fd1bf7c7ae62d3dda25e5a1ebb06cc05911" translate="yes" xml:space="preserve">
          <source>chef-server-webui is a Ruby on Rails 3.0 application that hosts the web interface for the Chef server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87c6570d39196bca5c51fef9dae41f18e36bc44e" translate="yes" xml:space="preserve">
          <source>chef-server.rb</source>
          <target state="translated">chef-server.rb</target>
        </trans-unit>
        <trans-unit id="62739c5f285b4c8459eb14cca56a6e4e86753253" translate="yes" xml:space="preserve">
          <source>chef-server.rb Optional Settings</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77a0f13df6f3646a37b891b2f225aa7f91100e25" translate="yes" xml:space="preserve">
          <source>chef-server.rb Settings</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c06f594420e4748c2d747aef320634527d331c9" translate="yes" xml:space="preserve">
          <source>chef-shell</source>
          <target state="translated">chef-shell</target>
        </trans-unit>
        <trans-unit id="548d8825e6f34b9ad4645b8c35de1a689e7decca" translate="yes" xml:space="preserve">
          <source>chef-shell (executable)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ddae7deed37895fff43b9a5e8f2251545d3489a" translate="yes" xml:space="preserve">
          <source>chef-shell acts as a chef-client. During startup, it reads the chef-client configuration file and contacts the Chef server to get attributes and cookbooks. The run-list will be set in the same way as normal chef-client runs. chef-client mode is activated with the &lt;code&gt;-z&lt;/code&gt; or &lt;code&gt;--client&lt;/code&gt; options. You can also specify the configuration file with &lt;code&gt;-c CONFIG&lt;/code&gt; and the server URL with &lt;code&gt;-S SERVER_URL&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f05a7d2758ae67b3c0895f41d142c0590adbf06" translate="yes" xml:space="preserve">
          <source>chef-shell acts as a chef-solo client. It attempts to load the chef-solo configuration file and JSON attributes. If the JSON attributes set a run-list, it will be honored. Cookbooks will be loaded in the same way that chef-solo loads them. chef-solo mode is activated with the &lt;code&gt;-s&lt;/code&gt; or &lt;code&gt;--solo&lt;/code&gt; command line option, and JSON attributes are specified in the same way as for chef-solo, with &lt;code&gt;-j /path/to/chef-solo.json&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f7408aafd25b2f52d5d82c9b6f83773285dd376" translate="yes" xml:space="preserve">
          <source>chef-shell allows the current position in a run-list to be manipulated during a chef-client run. Add breakpoints to a recipe to take advantage of this functionality.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dfa9b9408055dfa6295df4af8f6183b566385267" translate="yes" xml:space="preserve">
          <source>chef-shell can also switch to the same context as attribute files. Set an attribute with the following syntax:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c295aa8bd92f54b32a70dbc5e8fde375e855d60" translate="yes" xml:space="preserve">
          <source>chef-shell can be used to debug existing recipes. The recipe first needs to be added to a run-list for the node, so that it is cached when starting chef-shell and then used for debugging. chef-shell will report which recipes are being cached when it is started:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41cb85c17fbed55dc12ca08fb52034ebfce84da6" translate="yes" xml:space="preserve">
          <source>chef-shell can use the same credentials as knife when connecting to a Chef server. Make sure that the settings in chef-shell.rb are the same as those in knife.rb, and then use the &lt;code&gt;-z&lt;/code&gt; option as part of the command. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af7d2b1a622b363fe15aaf4bfa3c72a2e3108c2a" translate="yes" xml:space="preserve">
          <source>chef-shell determines which configuration file to load based on the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f149c89be3a8edc3ff7ebeb3a0bedfe4b342e82e" translate="yes" xml:space="preserve">
          <source>chef-shell is a recipe debugging tool that allows the use of breakpoints within recipes. chef-shell runs as an Interactive Ruby (IRb) session. chef-shell supports both recipe and attribute file syntax, as well as interactive debugging features.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42a3bebb14fd1bbf74a7738311a6fa9de24a39b5" translate="yes" xml:space="preserve">
          <source>chef-shell is the new name for Shef as of chef-client version 11.0. chef-shell is backwards compatible and aside from the name change, has the same set of functionality as with previous releases.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fbb1687e074f63312e4d8f4e5631aa3b2aa9876a" translate="yes" xml:space="preserve">
          <source>chef-shell is tool that is run using an Interactive Ruby (IRb) session. chef-shell currently supports recipe and attribute file syntax, as well as interactive debugging features. chef-shell has three run modes:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3a86ca4c66c8cabcfc3b50c3616e4e09d87f346" translate="yes" xml:space="preserve">
          <source>chef-shell.rb</source>
          <target state="translated">chef-shell.rb</target>
        </trans-unit>
        <trans-unit id="da90802b6f0545883ca0a28e40f0cc4747fe71f5" translate="yes" xml:space="preserve">
          <source>chef-solo</source>
          <target state="translated">chef-solo</target>
        </trans-unit>
        <trans-unit id="d42559e99753393cf165a87598b2537e9c8526f8" translate="yes" xml:space="preserve">
          <source>chef-solo (executable)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="271aa8aee0057d90bb6bb7f1065bfd6512d78ccc" translate="yes" xml:space="preserve">
          <source>chef-solo can be run as a daemon.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="361e18bf42bd66bb70890b5c9bb863899759f2a9" translate="yes" xml:space="preserve">
          <source>chef-solo can be used to manage node data using the command line and JSON files. Each JSON file contains a hash, the elements of which are added as node attributes. In addition, the &lt;code&gt;run_list&lt;/code&gt; setting allows roles and/or recipes to be added to the node.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4125af62a7430e5a5088734b4107e34ec92fa6b7" translate="yes" xml:space="preserve">
          <source>chef-solo does not interact with the Chef server. Consequently, node-specific attributes must be located in a JSON file on the target system, a remote location (such as Amazon Simple Storage Service (S3)), or a web server on the local network.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="113f322d156e15762faef3d0f9442fadbce05db9" translate="yes" xml:space="preserve">
          <source>chef-solo is an open source version of the chef-client that allows using cookbooks with nodes without requiring access to a Chef server. chef-solo uses &lt;a href=&quot;ctl_chef_client#ctl-chef-client-run-in-local-mode&quot;&gt;Chef local mode&lt;/a&gt;, and &lt;strong&gt;does not support&lt;/strong&gt; the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc925a537b6bfc9ed15e934b43da29ed58c4a223" translate="yes" xml:space="preserve">
          <source>chef-solo may be run as a non-root user. For example, the &lt;code&gt;sudoers&lt;/code&gt; file can be updated similar to:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6552a0b33101b60157efca55614ec9fa0211b886" translate="yes" xml:space="preserve">
          <source>chef-solo supports two locations from which cookbooks can be run:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68230fa5471c91b2e301247a49b402cc5f41ed32" translate="yes" xml:space="preserve">
          <source>chef-solo will look in the solo.rb file to determine the directory in which cookbooks are located.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89fdf2a04ec253c549fb25f6bfd05be6d67387bd" translate="yes" xml:space="preserve">
          <source>chef-solr wraps Apache Solr and exposes its REST API for indexing and search.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2cc2a5921193dcf26498c99426cfe3e7a6d23e35" translate="yes" xml:space="preserve">
          <source>chef-validator</source>
          <target state="translated">chef-validator</target>
        </trans-unit>
        <trans-unit id="9ecd570a74a02aff9c125147a9a36794a44f24b5" translate="yes" xml:space="preserve">
          <source>chef-validator Keys</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3726d55aa9b944bcfaa129f62f56b80ab981df3d" translate="yes" xml:space="preserve">
          <source>chef-zero</source>
          <target state="translated">chef-zero</target>
        </trans-unit>
        <trans-unit id="3b8c63143703a1b7db02e6354d88682dc85167fe" translate="yes" xml:space="preserve">
          <source>chef-zero is a very lightweight Chef server that runs in-memory on the local machine. This allows the chef-client to be run against the chef-repo as if it were running against the Chef server. chef-zero was &lt;a href=&quot;https://github.com/chef/chef-zero&quot;&gt;originally a standalone tool&lt;/a&gt;; it is enabled from within the chef-client by using the &lt;code&gt;--local-mode&lt;/code&gt; option. chef-zero is very useful for quickly testing and validating the behavior of the chef-client, cookbooks, recipes, and run-lists before uploading that data to the actual Chef server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="725103b6426a7e974a604fe1ab1e6e2000e8b6e0" translate="yes" xml:space="preserve">
          <source>chef.example.com</source>
          <target state="translated">chef.example.com</target>
        </trans-unit>
        <trans-unit id="8f7cefee34e2f48f3550ca621aab9fef159cea31" translate="yes" xml:space="preserve">
          <source>chef_gem</source>
          <target state="translated">chef_gem</target>
        </trans-unit>
        <trans-unit id="7459190863904ad71d51bd8d8fb4edb4f579fb28" translate="yes" xml:space="preserve">
          <source>chef_handler</source>
          <target state="translated">chef_handler</target>
        </trans-unit>
        <trans-unit id="cfe0a3508ba0d2bd9145c751648599d9ad14fc84" translate="yes" xml:space="preserve">
          <source>chefignore Files</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e9b7bf06a377549c71272e0bca470856414456b" translate="yes" xml:space="preserve">
          <source>chocolatey_package</source>
          <target state="translated">chocolatey_package</target>
        </trans-unit>
        <trans-unit id="f55c0a4ce495956fedbe7a84f3465e4497f183c8" translate="yes" xml:space="preserve">
          <source>cleanse</source>
          <target state="translated">cleanse</target>
        </trans-unit>
        <trans-unit id="902d02c37ec39ad1bda908e62840f30010109800" translate="yes" xml:space="preserve">
          <source>client create</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74f1683ee6fd283ac5f474d0b6d5777aaa82ebdd" translate="yes" xml:space="preserve">
          <source>client reregister</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd5516a0ac881619a5deeec4df0d5d2aad476539" translate="yes" xml:space="preserve">
          <source>client.rb</source>
          <target state="translated">client.rb</target>
        </trans-unit>
        <trans-unit id="f063068c0a6fb8b09c4906adf3e66105cd64228b" translate="yes" xml:space="preserve">
          <source>client.rb Settings</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93df14617ceda8ee499003ae137b44e91aa26cce" translate="yes" xml:space="preserve">
          <source>clients</source>
          <target state="translated">clients</target>
        </trans-unit>
        <trans-unit id="b64ca250f492e3f0444ad32b68be5f60a163bede" translate="yes" xml:space="preserve">
          <source>compare</source>
          <target state="translated">compare</target>
        </trans-unit>
        <trans-unit id="09be8533ff0a6ee5d577f971145ed449399fcda4" translate="yes" xml:space="preserve">
          <source>configure</source>
          <target state="translated">configure</target>
        </trans-unit>
        <trans-unit id="2aeede80be6f6dfc0aa4d1cbd6487e24e27a81be" translate="yes" xml:space="preserve">
          <source>control</source>
          <target state="translated">control</target>
        </trans-unit>
        <trans-unit id="412c105a9560fd6abe314b366528a7a433a020d9" translate="yes" xml:space="preserve">
          <source>control_group</source>
          <target state="translated">control_group</target>
        </trans-unit>
        <trans-unit id="46e2cd28250cb7a156befe5a45de7c245d245588" translate="yes" xml:space="preserve">
          <source>converge_if_changed</source>
          <target state="translated">converge_if_changed</target>
        </trans-unit>
        <trans-unit id="2b1a76ad0130a0a9fa023a956939b41be45d1387" translate="yes" xml:space="preserve">
          <source>cookbook bulk delete</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="784f63fa8354f6189d0142be8bf50f0a7e49bca3" translate="yes" xml:space="preserve">
          <source>cookbook create</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6b77773fe729a9d6814bdc33c2af916a95b42f4" translate="yes" xml:space="preserve">
          <source>cookbook delete</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb20d5d6cd0ab85b0a19550bf18ad14b7ca757c7" translate="yes" xml:space="preserve">
          <source>cookbook download</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ea0b14a6a0130db3d607623dc6c3c5bd4960c2c" translate="yes" xml:space="preserve">
          <source>cookbook list</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="050b7af2f0420c73062e61a55b8fb456d88f31a9" translate="yes" xml:space="preserve">
          <source>cookbook metadata</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6639dc1965f1f57774ec068751443ae707cf3e2" translate="yes" xml:space="preserve">
          <source>cookbook show</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3044a813c53db6889f605b7f55600fec1b19542" translate="yes" xml:space="preserve">
          <source>cookbook site download</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9834aaee6d4e571909e2455ab37e3a0268006f14" translate="yes" xml:space="preserve">
          <source>cookbook site install</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7c443ebb8c027af947ca5faf2340faacda2a0e9" translate="yes" xml:space="preserve">
          <source>cookbook site share</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4af4a90b658636131aea9b060d6209329c0c43d" translate="yes" xml:space="preserve">
          <source>cookbook test</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd0e72cb8a112eb0a6d4b9775c7bd91c29772aa6" translate="yes" xml:space="preserve">
          <source>cookbook upload</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60926047c0f8299218c2c5ea3f031818ca3c6ced" translate="yes" xml:space="preserve">
          <source>cookbook_artifacts</source>
          <target state="translated">cookbook_artifacts</target>
        </trans-unit>
        <trans-unit id="76fa6d8171a29f415679ca024e30e2af86b8c4fa" translate="yes" xml:space="preserve">
          <source>cookbook_file</source>
          <target state="translated">cookbook_file</target>
        </trans-unit>
        <trans-unit id="38680aefe9b5b0e618302201cc5bc642c5fafb18" translate="yes" xml:space="preserve">
          <source>cookbook_name</source>
          <target state="translated">cookbook_name</target>
        </trans-unit>
        <trans-unit id="aa970d27fa72971bdfac96a623fab42faf242b0a" translate="yes" xml:space="preserve">
          <source>cookbook_versions.rb</source>
          <target state="translated">cookbook_versions.rb</target>
        </trans-unit>
        <trans-unit id="44eba5c8691b9e50f57b2d9405c672784b663a6e" translate="yes" xml:space="preserve">
          <source>cookbook_versions.rb:</source>
          <target state="translated">cookbook_versions.rb:</target>
        </trans-unit>
        <trans-unit id="b14f77cad8437a67804f9fca3d5fb7b665a484b0" translate="yes" xml:space="preserve">
          <source>cookbooks</source>
          <target state="translated">cookbooks</target>
        </trans-unit>
        <trans-unit id="74bd75b98edb223129809ca9fd52ced9ea532904" translate="yes" xml:space="preserve">
          <source>cookbooks/</source>
          <target state="translated">cookbooks/</target>
        </trans-unit>
        <trans-unit id="9b7c68a918b17eb053809b198d7c9abfc142f30a" translate="yes" xml:space="preserve">
          <source>create</source>
          <target state="translated">create</target>
        </trans-unit>
        <trans-unit id="41a0eb783120bbdb92cde4c71f94768f99fa1aab" translate="yes" xml:space="preserve">
          <source>creates a tag for the version that was downloaded</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02f919145acd5795f2be3b610280992c94482221" translate="yes" xml:space="preserve">
          <source>cron</source>
          <target state="translated">cron</target>
        </trans-unit>
        <trans-unit id="9145a3ad32249e3a113e52d2384b4bf1bb0f3b0f" translate="yes" xml:space="preserve">
          <source>csh</source>
          <target state="translated">csh</target>
        </trans-unit>
        <trans-unit id="b614bc0ea4cde673095d30b90a6f7c46e54eb9c3" translate="yes" xml:space="preserve">
          <source>dark_launch</source>
          <target state="translated">dark_launch</target>
        </trans-unit>
        <trans-unit id="a17c9aaa61e80a1bf71d0d850af4e5baa9800bbd" translate="yes" xml:space="preserve">
          <source>data</source>
          <target state="translated">data</target>
        </trans-unit>
        <trans-unit id="6c9809bbe8e24a62f8f6a417a6decce94937f7ef" translate="yes" xml:space="preserve">
          <source>data bag create</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7dcb7678292fe515af68720c438d318fb4b97cbc" translate="yes" xml:space="preserve">
          <source>data bag edit</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="893c53edcf5ef2631a7e20d05c031ae2b8090bb8" translate="yes" xml:space="preserve">
          <source>data bag from file</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="418fbb80454bfcad8578382d692cf4880d066aa9" translate="yes" xml:space="preserve">
          <source>data bag show</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8974da72ecd5dff6539712b65239934a46fe087e" translate="yes" xml:space="preserve">
          <source>data_bag</source>
          <target state="translated">data_bag</target>
        </trans-unit>
        <trans-unit id="bb9b008c6784d64177400a2af9d9d2965432a3a4" translate="yes" xml:space="preserve">
          <source>data_bag_item</source>
          <target state="translated">data_bag_item</target>
        </trans-unit>
        <trans-unit id="a684bf060dfc15749f42991cfb1a0e2ea5affd04" translate="yes" xml:space="preserve">
          <source>data_bags/</source>
          <target state="translated">data_bags/</target>
        </trans-unit>
        <trans-unit id="58500128d3479fe88f278074b8bc7b866bf38140" translate="yes" xml:space="preserve">
          <source>debug_value</source>
          <target state="translated">debug_value</target>
        </trans-unit>
        <trans-unit id="58ead0fc4c1e0ba4c9f4cd21156cef8cbf714e1d" translate="yes" xml:space="preserve">
          <source>declare_resource</source>
          <target state="translated">declare_resource</target>
        </trans-unit>
        <trans-unit id="5daf605fd2c46154b42e884cb25f87816e12073d" translate="yes" xml:space="preserve">
          <source>default values for tunable settings, such as the amount of memory assigned to a process or the number of workers to spawn</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="670f5ded053335a96d4658383ba3d3839df7751c" translate="yes" xml:space="preserve">
          <source>default.rb</source>
          <target state="translated">default.rb</target>
        </trans-unit>
        <trans-unit id="fb10155f0feb5b2ea9bc75346cef0aeb66a31ecc" translate="yes" xml:space="preserve">
          <source>default.rb:</source>
          <target state="translated">default.rb:</target>
        </trans-unit>
        <trans-unit id="58e108ad1f623d5cd375d8dfdd274b46c8947068" translate="yes" xml:space="preserve">
          <source>default_action</source>
          <target state="translated">default_action</target>
        </trans-unit>
        <trans-unit id="04e9e49089f26e999e13feee38f1aadad0b894e6" translate="yes" xml:space="preserve">
          <source>defines action &lt;code&gt;aaaaa&lt;/code&gt; as the default action. If &lt;code&gt;default_action :bbbbb&lt;/code&gt; is specified, then action &lt;code&gt;bbbbb&lt;/code&gt; is the default action. Use this method for clarity in custom resources, if deliberately stating the default resource is desired, or to specify a default action that is not listed first in the custom resource.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9485989ff514b5106b7738850fd73c23e8c1e3f7" translate="yes" xml:space="preserve">
          <source>delete</source>
          <target state="translated">delete</target>
        </trans-unit>
        <trans-unit id="2e198b895fd885528b3c8178c6ae1ce7dff1cc5e" translate="yes" xml:space="preserve">
          <source>delete-client-key</source>
          <target state="translated">delete-client-key</target>
        </trans-unit>
        <trans-unit id="357ba724109aa8487c806f1e7718080390c70096" translate="yes" xml:space="preserve">
          <source>delete-user-key</source>
          <target state="translated">delete-user-key</target>
        </trans-unit>
        <trans-unit id="545d5c8b2e040ce8d3cd4a7a174185debc2c7a94" translate="yes" xml:space="preserve">
          <source>delete_resource</source>
          <target state="translated">delete_resource</target>
        </trans-unit>
        <trans-unit id="5791c27e3302386fed78909abc12efa5f08b3ecb" translate="yes" xml:space="preserve">
          <source>delete_resource!</source>
          <target state="translated">delete_resource!</target>
        </trans-unit>
        <trans-unit id="b0d51b9ff91b623cc42b17c529b7c21c2ab57fb4" translate="yes" xml:space="preserve">
          <source>deploy</source>
          <target state="translated">deploy</target>
        </trans-unit>
        <trans-unit id="43a1712c947639db19a3ce2fa5cac19901c36fcb" translate="yes" xml:space="preserve">
          <source>deploy_branch</source>
          <target state="translated">deploy_branch</target>
        </trans-unit>
        <trans-unit id="7bb25485aebc363eac18dc1c62e32f2d75a0bd89" translate="yes" xml:space="preserve">
          <source>deploy_revision</source>
          <target state="translated">deploy_revision</target>
        </trans-unit>
        <trans-unit id="9f2696583122964a7d696a2d47ac4a3db6ad1bcb" translate="yes" xml:space="preserve">
          <source>deps</source>
          <target state="translated">deps</target>
        </trans-unit>
        <trans-unit id="5349f299d65621379979ce954b26f24e0774a598" translate="yes" xml:space="preserve">
          <source>desired_state</source>
          <target state="translated">desired_state</target>
        </trans-unit>
        <trans-unit id="75a0ee1ba911f2f5199177dfd31808a12511bbdc" translate="yes" xml:space="preserve">
          <source>diff</source>
          <target state="translated">diff</target>
        </trans-unit>
        <trans-unit id="bdf0c2355b273914f47405929020cb3bf764a879" translate="yes" xml:space="preserve">
          <source>directories: &lt;code&gt;foo/bar&lt;/code&gt; (if specific to component), &lt;code&gt;foo&lt;/code&gt; (if not). For example: &lt;code&gt;/var/log/foo/bar&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d392f56d616a516ceabb82ed8906418bce4647d" translate="yes" xml:space="preserve">
          <source>directory</source>
          <target state="translated">directory</target>
        </trans-unit>
        <trans-unit id="50760bdf06930b6220eac6f2ab2059ff91b33794" translate="yes" xml:space="preserve">
          <source>directory Matcher</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="817248fb77fb5c2cef3f2c732ad257cb1fb9c5e4" translate="yes" xml:space="preserve">
          <source>download</source>
          <target state="translated">download</target>
        </trans-unit>
        <trans-unit id="3b6c366dface59a790b42a41d79681a5e0f2ef0e" translate="yes" xml:space="preserve">
          <source>downloads the cookbook from &lt;a href=&quot;https://supermarket.chef.io&quot;&gt;https://supermarket.chef.io&lt;/a&gt; as a tar.gz archive</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d8957b9744ada822bbef61dc1d01fb5e947c560" translate="yes" xml:space="preserve">
          <source>dpkg_package</source>
          <target state="translated">dpkg_package</target>
        </trans-unit>
        <trans-unit id="0470364788f45609fdee08f6152c11c6009b34b0" translate="yes" xml:space="preserve">
          <source>dsc_resource</source>
          <target state="translated">dsc_resource</target>
        </trans-unit>
        <trans-unit id="37d24abb5d29cd18f95238cd95e1b0dc1d29144f" translate="yes" xml:space="preserve">
          <source>dsc_script</source>
          <target state="translated">dsc_script</target>
        </trans-unit>
        <trans-unit id="3312c1e00e4e6c3889cf74a7697b36f57c198d97" translate="yes" xml:space="preserve">
          <source>easy_install_package</source>
          <target state="translated">easy_install_package</target>
        </trans-unit>
        <trans-unit id="9ead47a82a0d25985f22f10651d1f93b3abba317" translate="yes" xml:space="preserve">
          <source>edit</source>
          <target state="translated">edit</target>
        </trans-unit>
        <trans-unit id="e4138f32306d13f76ed7186dd213a5a0dc71ac63" translate="yes" xml:space="preserve">
          <source>edit_resource</source>
          <target state="translated">edit_resource</target>
        </trans-unit>
        <trans-unit id="7328dc791471bf2b6998453a07000fa09ba2ded6" translate="yes" xml:space="preserve">
          <source>edit_resource!</source>
          <target state="translated">edit_resource!</target>
        </trans-unit>
        <trans-unit id="18ce22dbe86aad5d87c7661575db42db4ee97d07" translate="yes" xml:space="preserve">
          <source>ensures that its using the git master branch, and then checks out the cookbook from a vendor branch (creating a new vendor branch, if required)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2aa0f964704937667c2cd1b5ce390afdad86c8a" translate="yes" xml:space="preserve">
          <source>enter:</source>
          <target state="translated">enter:</target>
        </trans-unit>
        <trans-unit id="920f8f5815b381ea692e9e7c2f7119f2b1aa620a" translate="yes" xml:space="preserve">
          <source>env</source>
          <target state="translated">env</target>
        </trans-unit>
        <trans-unit id="d35f6fe020c56287a5b15519f209fa4c92a6edc4" translate="yes" xml:space="preserve">
          <source>environment create</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="776e4625ad939e0c95ed05373b40aa8a38ce17b7" translate="yes" xml:space="preserve">
          <source>environment from file</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7087514ca1e7c2971e84492e450e4dd6c78df8f" translate="yes" xml:space="preserve">
          <source>environment set</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac99b7bd0d0f556d68e12e2d5755f7bdce06ade2" translate="yes" xml:space="preserve">
          <source>environments</source>
          <target state="translated">environments</target>
        </trans-unit>
        <trans-unit id="30356f5f2b55b0071f2bfe395b2bc347ab8a5d99" translate="yes" xml:space="preserve">
          <source>environments/</source>
          <target state="translated">environments/</target>
        </trans-unit>
        <trans-unit id="a1e8770fdaf17ab3d6203d23bb1e2c8efd5a66e8" translate="yes" xml:space="preserve">
          <source>equal to</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b9034f562da01390c56ed78f572c61df015deeb" translate="yes" xml:space="preserve">
          <source>erl_call</source>
          <target state="translated">erl_call</target>
        </trans-unit>
        <trans-unit id="e46c34c059ca534bc27b9b727928e52766e1cfa5" translate="yes" xml:space="preserve">
          <source>error_report Handler</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6bd203f7bb9afaad5220cbb4f2c2b998a3539646" translate="yes" xml:space="preserve">
          <source>estatsd</source>
          <target state="translated">estatsd</target>
        </trans-unit>
        <trans-unit id="cf2644a35722108d5148ecd02eb2ff64993f16e5" translate="yes" xml:space="preserve">
          <source>etcd Locks</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d42ad1769f229c76031f30a404b4f7863d68de0" translate="yes" xml:space="preserve">
          <source>exception</source>
          <target state="translated">exception</target>
        </trans-unit>
        <trans-unit id="be62562725d30894d1641b11d5106adde66f0d79" translate="yes" xml:space="preserve">
          <source>exec</source>
          <target state="translated">exec</target>
        </trans-unit>
        <trans-unit id="39ae89e0a135945a5e08d9340cd2eac771f228f6" translate="yes" xml:space="preserve">
          <source>execute</source>
          <target state="translated">execute</target>
        </trans-unit>
        <trans-unit id="50098967fe7bc49c645257dfe72be9251b50425e" translate="yes" xml:space="preserve">
          <source>expands the tar.gz archive and adds the expanded files to the git index and commits</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0cdcab1108d6ea665bb24f5b84c2d8678ab799a4" translate="yes" xml:space="preserve">
          <source>fail/raise Keywords</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b82ef4c164eb99dbe687a93c218960c568de3f06" translate="yes" xml:space="preserve">
          <source>fe1.example.com</source>
          <target state="translated">fe1.example.com</target>
        </trans-unit>
        <trans-unit id="26a9f79450025a21d2a3849f5d2c26ddec83eac6" translate="yes" xml:space="preserve">
          <source>fe2.example.com</source>
          <target state="translated">fe2.example.com</target>
        </trans-unit>
        <trans-unit id="f7d429cfae85711f8ebcd52c4eba24a7920c8416" translate="yes" xml:space="preserve">
          <source>fe3.example.com</source>
          <target state="translated">fe3.example.com</target>
        </trans-unit>
        <trans-unit id="971c419dd609331343dee105fffd0f4608dc0bf2" translate="yes" xml:space="preserve">
          <source>file</source>
          <target state="translated">file</target>
        </trans-unit>
        <trans-unit id="67d91d24e0aa0ad7dbe30bf1cfa0e8e084c905da" translate="yes" xml:space="preserve">
          <source>file Matcher</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ae11a34a7f7a6586aa49f629b995308ca1f273b" translate="yes" xml:space="preserve">
          <source>find_resource</source>
          <target state="translated">find_resource</target>
        </trans-unit>
        <trans-unit id="207daedd8cb3ca1f89fdc1279b4bc559d2e349cf" translate="yes" xml:space="preserve">
          <source>find_resource!</source>
          <target state="translated">find_resource!</target>
        </trans-unit>
        <trans-unit id="9351bd81e6470b3b0902ff748b289a7935609351" translate="yes" xml:space="preserve">
          <source>followed by:</source>
          <target state="translated">뒤에 :</target>
        </trans-unit>
        <trans-unit id="1bc3ecae19e8e2bc8a0044d37820cf08749d3e89" translate="yes" xml:space="preserve">
          <source>for Sublime Text:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c902b85a361162ff2c9e73b74afa7fed5e542827" translate="yes" xml:space="preserve">
          <source>for TextPad:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07d20acd3d6d3a65dab86aac1963f8fc7266dde3" translate="yes" xml:space="preserve">
          <source>for example:</source>
          <target state="translated">for example:</target>
        </trans-unit>
        <trans-unit id="3d64f8edf4ad10038b52d0623307848c8ad0b430" translate="yes" xml:space="preserve">
          <source>freebsd_package</source>
          <target state="translated">freebsd_package</target>
        </trans-unit>
        <trans-unit id="9b86f93c66562c2612bd5a911294e5d3d931fa4c" translate="yes" xml:space="preserve">
          <source>from file</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ecc8459ea5f39f9da55cb4d71a70b5d1e0f0b80" translate="yes" xml:space="preserve">
          <source>frontend</source>
          <target state="translated">frontend</target>
        </trans-unit>
        <trans-unit id="340ceff92041cb2391da00b10d0a7f5e758e4a58" translate="yes" xml:space="preserve">
          <source>gather-logs</source>
          <target state="translated">gather-logs</target>
        </trans-unit>
        <trans-unit id="7354f0bed7fbc22ef446273a6f43f2dcfa2b7baa" translate="yes" xml:space="preserve">
          <source>gem_package</source>
          <target state="translated">gem_package</target>
        </trans-unit>
        <trans-unit id="46f1a0bd5592a2f9244ca321b129902a06b53e03" translate="yes" xml:space="preserve">
          <source>git</source>
          <target state="translated">git</target>
        </trans-unit>
        <trans-unit id="7d90ea5732b37d09041285d8dcba148501d95117" translate="yes" xml:space="preserve">
          <source>git Etiquette</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a359562115ff6be9188de34cf9a42afab75bab45" translate="yes" xml:space="preserve">
          <source>git will let you know if there are any problems. In the event of problems, fix them as directed, and then mark as fixed with a &lt;code&gt;git add&lt;/code&gt;, and then continue the rebase process using &lt;code&gt;git rebase --continue&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2fa709f02b0516ccfdcfe5e3158bedc23fbc69c5" translate="yes" xml:space="preserve">
          <source>greater than</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7819419cae36d1a87511ce092d383c5bc507d9d1" translate="yes" xml:space="preserve">
          <source>greater than or equal to; also known as &amp;ldquo;optimistically greater than&amp;rdquo;, or &amp;ldquo;optimistic&amp;rdquo;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64292b1c2b2e13ead8788fc8a2b8edc8c1db4ecd" translate="yes" xml:space="preserve">
          <source>group</source>
          <target state="translated">group</target>
        </trans-unit>
        <trans-unit id="57b7449f70962a29890e3457fc4180bc18298249" translate="yes" xml:space="preserve">
          <source>ha-status</source>
          <target state="translated">ha-status</target>
        </trans-unit>
        <trans-unit id="92005ecf3788faea8346a7919fba0232188561ab" translate="yes" xml:space="preserve">
          <source>help</source>
          <target state="translated">help</target>
        </trans-unit>
        <trans-unit id="13035959008f95706a612e434bffd7186a2e40eb" translate="yes" xml:space="preserve">
          <source>homebrew_package</source>
          <target state="translated">homebrew_package</target>
        </trans-unit>
        <trans-unit id="036710a3536091d106dca8ac3c597effb353adf9" translate="yes" xml:space="preserve">
          <source>http_request</source>
          <target state="translated">http_request</target>
        </trans-unit>
        <trans-unit id="b44c4597b4046dfefcb68d7b53c5738ea33ed2a4" translate="yes" xml:space="preserve">
          <source>httpd.conf.erb</source>
          <target state="translated">httpd.conf.erb</target>
        </trans-unit>
        <trans-unit id="96c9178448f88ee023c6e201c37e2a7474aa6323" translate="yes" xml:space="preserve">
          <source>httpd.service.erb</source>
          <target state="translated">httpd.service.erb</target>
        </trans-unit>
        <trans-unit id="1e822857ae7dbc93e3b042fd74cca83a79a7a79a" translate="yes" xml:space="preserve">
          <source>hup</source>
          <target state="translated">hup</target>
        </trans-unit>
        <trans-unit id="90cc4901e79f88b6832ffedd5c17de5a39c1eabb" translate="yes" xml:space="preserve">
          <source>identify the location from which Ohai plugins are stored</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1db089a9f84e14e95f11dcb5c57fa10d60aa84bb" translate="yes" xml:space="preserve">
          <source>identity</source>
          <target state="translated">identity</target>
        </trans-unit>
        <trans-unit id="958f57f57d72a30f329ee5538f21b0257a49a46e" translate="yes" xml:space="preserve">
          <source>if</source>
          <target state="translated">if</target>
        </trans-unit>
        <trans-unit id="006fbdba3d59b8a66a141861e6f111e188bd1134" translate="yes" xml:space="preserve">
          <source>if &lt;code&gt;node.run_list.include?('foo')&lt;/code&gt; i.e. branching in recipes based on what&amp;rsquo;s in the node&amp;rsquo;s run-list. Better and more readable to use a feature flag and set its precedence appropriately.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69137052077678220bab5a6605fc35ba0150171b" translate="yes" xml:space="preserve">
          <source>if Statements</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d3342dd7f0ce7f842a9784d3e079cab7f270414" translate="yes" xml:space="preserve">
          <source>ifconfig</source>
          <target state="translated">ifconfig</target>
        </trans-unit>
        <trans-unit id="120f8457935eae542ec514961fb479a409c0dffd" translate="yes" xml:space="preserve">
          <source>ignore_failure Method</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b45e776df889354fe58bf0df946928b7a298525" translate="yes" xml:space="preserve">
          <source>in terminal windows on both the primary and secondary servers prior to stopping Keepalived.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1102735525e5825bccc4f6362fa12e0b10ca07e" translate="yes" xml:space="preserve">
          <source>include? Method</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89fb511ffe93ee7826661ca1e3bb468dc1ad0ff2" translate="yes" xml:space="preserve">
          <source>install</source>
          <target state="translated">install</target>
        </trans-unit>
        <trans-unit id="d21f73a0674838be9d3e0a36bdc93ff35333eec9" translate="yes" xml:space="preserve">
          <source>instead of strings:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46f8ab7c0cff9df7cd124852e26022a6bf89e315" translate="yes" xml:space="preserve">
          <source>int</source>
          <target state="translated">int</target>
        </trans-unit>
        <trans-unit id="905e929451ee71583ac445be1110a437c6bff030" translate="yes" xml:space="preserve">
          <source>ips_package</source>
          <target state="translated">ips_package</target>
        </trans-unit>
        <trans-unit id="f7b53f6297261e525ce516380d28dac4935b04b6" translate="yes" xml:space="preserve">
          <source>is effectively the same as</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18ab6ac7001b131bc4dc74bd619c612205dff372" translate="yes" xml:space="preserve">
          <source>is equivalent to:</source>
          <target state="translated">다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="5f846d1676ec04f38fdb828a98ddcb790ddf3aa3" translate="yes" xml:space="preserve">
          <source>is now:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09e367c3fc5cc8d794bb19d7c88ac5b3dbdeee84" translate="yes" xml:space="preserve">
          <source>is similar to:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e675b7edb726f21e7dcd149d1659f46d47e43586" translate="yes" xml:space="preserve">
          <source>jetty</source>
          <target state="translated">jetty</target>
        </trans-unit>
        <trans-unit id="7e463daa95e8de2036ca29d8ba47ef3521867ab3" translate="yes" xml:space="preserve">
          <source>json_file Handler</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb84374ef0eb1538da6e1f85ef588adbb48be3a9" translate="yes" xml:space="preserve">
          <source>keepalived</source>
          <target state="translated">keepalived</target>
        </trans-unit>
        <trans-unit id="f92c7ec41064705eae4b0a3e23397f6f18175f5c" translate="yes" xml:space="preserve">
          <source>key create</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ee88964ce2cf5b4b120d7eb04dade9b1d20f50f" translate="yes" xml:space="preserve">
          <source>key delete</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19be158ed458991d2def7a264435268197d816f8" translate="yes" xml:space="preserve">
          <source>key edit</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce6a067fc93704a0a0fba79a6b602abb3f10fc9a" translate="yes" xml:space="preserve">
          <source>key list</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fbee4231e0db7c6f1574502c91749c49ab6e41bf" translate="yes" xml:space="preserve">
          <source>key show</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c80f5bc166cd6739ba9ba6d94acabc0aa01494da" translate="yes" xml:space="preserve">
          <source>kill</source>
          <target state="translated">kill</target>
        </trans-unit>
        <trans-unit id="b8abb6220fa3295ef1b8445df214ca789baecc54" translate="yes" xml:space="preserve">
          <source>knife bootstrap</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9aa089fbd35ec282707c96d1fe8262046144952" translate="yes" xml:space="preserve">
          <source>knife bootstrap Options</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c33ac60bf8c3e7b9c268e8494d7e7669e2ef053" translate="yes" xml:space="preserve">
          <source>knife can also use the &lt;code&gt;knife exec&lt;/code&gt; subcommand to make specific, authenticated requests to the Chef server. knife plugins can also make authenticated requests to the Chef server by leveraging the &lt;code&gt;knife exec&lt;/code&gt; subcommand.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbf2e72facd107b034d274362a16d806e45bb768" translate="yes" xml:space="preserve">
          <source>knife can be used to create, edit, view, list, tag, and delete nodes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0249d7b8f208eb9c825cbc3beb81e629e8a2376" translate="yes" xml:space="preserve">
          <source>knife client</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d980b52eba85afdbff85adb76b81dbde9de0dfa9" translate="yes" xml:space="preserve">
          <source>knife comes with a collection of built in subcommands that work together to provide all of the functionality required to take specific actions against any object in an organization, including cookbooks, nodes, roles, data bags, environments, and users. A knife plugin extends the functionality beyond built-in subcommands.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f06f4d213c60f645dbc63e4f1ea9a46247e9422" translate="yes" xml:space="preserve">
          <source>knife configure</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6fbed1d41c2d730322f09b8eb2c57c7cf5c80eb" translate="yes" xml:space="preserve">
          <source>knife cookbook</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67a1c62935a5851239544e8ce58419ad18a6f8d9" translate="yes" xml:space="preserve">
          <source>knife cookbook site</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="059c6009f1e59b2c4f5a75fa1fac6fd6997e1d90" translate="yes" xml:space="preserve">
          <source>knife data bag</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd4069da8f79d563a63d76ffe8b5278cd2dbf3d7" translate="yes" xml:space="preserve">
          <source>knife delete</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d118c0c3292e21bfb7583a9d642cc93ede03176" translate="yes" xml:space="preserve">
          <source>knife deps</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc6c09a3f60b5fd491fab67bad79831fded3578e" translate="yes" xml:space="preserve">
          <source>knife diff</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38c777ce6777ffd9bb73b477747789c159ca5fe1" translate="yes" xml:space="preserve">
          <source>knife download</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4db77f85849abd6a9d171c8b6c473a88c7b30ba8" translate="yes" xml:space="preserve">
          <source>knife edit</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da3080108b0d8911880cc75417de9c0f333eef70" translate="yes" xml:space="preserve">
          <source>knife environment</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aea604ee704fc4c11da1f5dfbb0d357a52acac37" translate="yes" xml:space="preserve">
          <source>knife exec</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2158afc1424bc3022c6ed542de503406b2eb25e4" translate="yes" xml:space="preserve">
          <source>knife has the following subcommands: &lt;code&gt;bootstrap&lt;/code&gt;, &lt;code&gt;client&lt;/code&gt;, &lt;code&gt;configure&lt;/code&gt;, &lt;code&gt;cookbook&lt;/code&gt;, &lt;code&gt;cookbook site&lt;/code&gt;, &lt;code&gt;data bag&lt;/code&gt;, &lt;code&gt;delete&lt;/code&gt;, &lt;code&gt;deps&lt;/code&gt;, &lt;code&gt;diff&lt;/code&gt;, &lt;code&gt;download&lt;/code&gt;, &lt;code&gt;edit&lt;/code&gt;, &lt;code&gt;environment&lt;/code&gt;, &lt;code&gt;exec&lt;/code&gt;, &lt;code&gt;index rebuild&lt;/code&gt;, &lt;code&gt;list&lt;/code&gt;, &lt;code&gt;node&lt;/code&gt;, &lt;code&gt;recipe list&lt;/code&gt;, &lt;code&gt;role&lt;/code&gt;, &lt;code&gt;search&lt;/code&gt;, &lt;code&gt;show&lt;/code&gt;, &lt;code&gt;ssh&lt;/code&gt;, &lt;code&gt;status&lt;/code&gt;, &lt;code&gt;tag&lt;/code&gt;, &lt;code&gt;upload&lt;/code&gt;, &lt;code&gt;user&lt;/code&gt;, and &lt;code&gt;xargs&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d9c4b1d783d31dfbac0bea1c2054e927435ee84" translate="yes" xml:space="preserve">
          <source>knife includes a set of subcommands that are built around common verbs: &lt;code&gt;delete&lt;/code&gt;, &lt;code&gt;deps&lt;/code&gt;, &lt;code&gt;diff&lt;/code&gt;, &lt;code&gt;download&lt;/code&gt;, &lt;code&gt;edit&lt;/code&gt;, &lt;code&gt;list&lt;/code&gt;, &lt;code&gt;show&lt;/code&gt;, &lt;code&gt;upload&lt;/code&gt;, &lt;code&gt;xargs&lt;/code&gt;. These subcommands allow knife to issue commands that interact with any object stored in the chef-repo or stored on the Chef server. Some important principles behind this group of subcommands includes:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8f78991909897b5428e5ddf4f47244c6ad08a3b" translate="yes" xml:space="preserve">
          <source>knife includes the following subcommands:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db5830069d2268730c191b571fd182b185b84427" translate="yes" xml:space="preserve">
          <source>knife is a command-line tool that provides an interface between a local chef-repo and the Chef server. knife helps users to manage:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c162f53a53c9b63668a9f17380a85289de92c7b4" translate="yes" xml:space="preserve">
          <source>knife is used to upload data to the Chef server from the chef-repo. Once uploaded, that data is used by the chef-client to manage all of the nodes that are registered with the Chef server and to ensure that the correct cookbooks, environments, roles, and other settings are applied to nodes correctly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af12fb4a6dde3bfa85c01153e319a464f4b80813" translate="yes" xml:space="preserve">
          <source>knife list</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64406901df3a4f47ea29248ccb44bd9184a633a6" translate="yes" xml:space="preserve">
          <source>knife node</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b4d322f26f9f303a4aa0b234338fd051206ab11" translate="yes" xml:space="preserve">
          <source>knife plug-ins can be used to create, edit, and manage nodes that are located on cloud providers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd0ea2cf5796c3b0ab343e32510a1b2e0bb0bd2c" translate="yes" xml:space="preserve">
          <source>knife raw</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="146156270cd7191c806d3e7c1f436cee52b68ace" translate="yes" xml:space="preserve">
          <source>knife recipe list</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3736373cf964f3c15f85793785709fb7d48505eb" translate="yes" xml:space="preserve">
          <source>knife role</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30d3ab0d592e353c50a133822f24aeb4e842d6d0" translate="yes" xml:space="preserve">
          <source>knife runs from a management workstation and sits in-between a Chef server and an organization&amp;rsquo;s infrastructure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86446f6f5581b2d622de04107ef197819e36d13e" translate="yes" xml:space="preserve">
          <source>knife runs from a management workstation and sits in-between a Chef server and an organization&amp;rsquo;s infrastructure. knife interacts with a Chef server by using the same REST API that is used by a chef-client. Role-based authentication controls (RBAC) can be used to authorize changes when knife is run with the Chef server. knife is configured during workstation setup, but subsequent modifications can be made using the knife.rb configuration file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8782fb3e969892333e679e396645105751f7a6e9" translate="yes" xml:space="preserve">
          <source>knife search</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8006930807b077974f5a223990901d30e6b6cc4" translate="yes" xml:space="preserve">
          <source>knife serve</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ade04d1b1978a4731e5305ab143aa4a38bc7a01" translate="yes" xml:space="preserve">
          <source>knife show</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2a60b7d73521ffca35fc5c187d9536a57ee0b83" translate="yes" xml:space="preserve">
          <source>knife ssh</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad4e30bd279df1a3ff59cbeba25ab032ad5f37be" translate="yes" xml:space="preserve">
          <source>knife ssl check</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="090849baa4a7195c2d17e6d866f91aeeb2cfbe0e" translate="yes" xml:space="preserve">
          <source>knife ssl fetch</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7ab2e2bf3fef36ab7006805a2ba5e399bd1a11f" translate="yes" xml:space="preserve">
          <source>knife ssl_fetch</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2c296489db9f2d4fdada9ec92343d855b52ca85" translate="yes" xml:space="preserve">
          <source>knife status</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2badb14acfb8c92f09f7199968396c4613e78385" translate="yes" xml:space="preserve">
          <source>knife subcommand [ARGUMENT] (options)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2743b6bc9112703f891fda7a39289af964121029" translate="yes" xml:space="preserve">
          <source>knife tag</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c92008f5c4ce4b0bce8d6a50fd72f38eae8beaba" translate="yes" xml:space="preserve">
          <source>knife upload</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6ad2008624bf5af865fe14c75b09e0d86888632" translate="yes" xml:space="preserve">
          <source>knife user</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97daa4dc8483760ea265b9cb64e2552df48696f7" translate="yes" xml:space="preserve">
          <source>knife xargs</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4201b2ce9f1796d50e7cfc53866f27e721582544" translate="yes" xml:space="preserve">
          <source>knife.rb</source>
          <target state="translated">knife.rb</target>
        </trans-unit>
        <trans-unit id="e94fa34babf1de81a64d1d5655d131007981487a" translate="yes" xml:space="preserve">
          <source>knife.rb Optional Settings</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc2fb68b3c810297c49a23909a3f24cf01666fb9" translate="yes" xml:space="preserve">
          <source>knife.rb. This configuration file can be downloaded from the &lt;strong&gt;Organizations&lt;/strong&gt; page.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e2ff2fcafa9e9d00113f6de489ce260cc60a64e" translate="yes" xml:space="preserve">
          <source>ksh</source>
          <target state="translated">ksh</target>
        </trans-unit>
        <trans-unit id="6f3b1cb33246daee8361d54ca386f516e325eb5a" translate="yes" xml:space="preserve">
          <source>launchd</source>
          <target state="translated">launchd</target>
        </trans-unit>
        <trans-unit id="ebec3b9cdaa0e2146b148f6e4ca24688c47884f9" translate="yes" xml:space="preserve">
          <source>lb / lb_internal</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61a135089eac561a2ff7cedeefb03975bed000f8" translate="yes" xml:space="preserve">
          <source>ldap</source>
          <target state="translated">ldap</target>
        </trans-unit>
        <trans-unit id="6bb2aa987a1cdc7525f5672334ed54a5cee446c5" translate="yes" xml:space="preserve">
          <source>less than</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b709205d85df56c7a244034c07e09a1af509871" translate="yes" xml:space="preserve">
          <source>less than or equal to</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f0aa52d656a3d75867f784b7e9c5d23bf1321c0" translate="yes" xml:space="preserve">
          <source>link</source>
          <target state="translated">link</target>
        </trans-unit>
        <trans-unit id="38b62be4bddaa5661c7d6b8e36e28159314df5c7" translate="yes" xml:space="preserve">
          <source>list</source>
          <target state="translated">list</target>
        </trans-unit>
        <trans-unit id="ccd3473985fecfa46af84b9fe393e5830305f4db" translate="yes" xml:space="preserve">
          <source>list-client-key</source>
          <target state="translated">list-client-key</target>
        </trans-unit>
        <trans-unit id="b7bb40a44ff8d86454e34c4fa7159cb64c562b5c" translate="yes" xml:space="preserve">
          <source>list-client-keys</source>
          <target state="translated">list-client-keys</target>
        </trans-unit>
        <trans-unit id="a041e1429900f6467d6d9dac3b036073272367d5" translate="yes" xml:space="preserve">
          <source>list-user-key</source>
          <target state="translated">list-user-key</target>
        </trans-unit>
        <trans-unit id="66a3d39e0d0003f42cc7cfc1a5d2b2d569be7fd3" translate="yes" xml:space="preserve">
          <source>list-user-keys</source>
          <target state="translated">list-user-keys</target>
        </trans-unit>
        <trans-unit id="eb0b872b763adf692f7015838706f3b113c10498" translate="yes" xml:space="preserve">
          <source>load balanced backend VIP</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="291d8541c2fb12986a4a5c43038271f27dea13f7" translate="yes" xml:space="preserve">
          <source>load balanced frontend VIP</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="087b91eebcfd551fd9ad6a72a663eb8e13a64ec1" translate="yes" xml:space="preserve">
          <source>load_current_value</source>
          <target state="translated">load_current_value</target>
        </trans-unit>
        <trans-unit id="7babc233de26ab19ead1b9c278128d5c434910ee" translate="yes" xml:space="preserve">
          <source>log</source>
          <target state="translated">log</target>
        </trans-unit>
        <trans-unit id="e97a26f3a23ada6223328bd81dfddbef735f7a91" translate="yes" xml:space="preserve">
          <source>log Resource</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a442dde9b0df4cd79ff417662f916d8c43cd983a" translate="yes" xml:space="preserve">
          <source>macports_package</source>
          <target state="translated">macports_package</target>
        </trans-unit>
        <trans-unit id="a21729d519cc820a651b50f84d61a1c4cc3c8632" translate="yes" xml:space="preserve">
          <source>make the required changes, and then save the file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10a1280bf27dc456f4a19594f0c4a4c916ca8406" translate="yes" xml:space="preserve">
          <source>manage.rb</source>
          <target state="translated">manage.rb</target>
        </trans-unit>
        <trans-unit id="d81439d86942e6a45a2609bfc98f093ebd61ec6f" translate="yes" xml:space="preserve">
          <source>master-recover</source>
          <target state="translated">master-recover</target>
        </trans-unit>
        <trans-unit id="9f2d43c9986a4a09a85ee68a7cb977c2bec7f7c6" translate="yes" xml:space="preserve">
          <source>may be encloused in a single-quoted string with a single backslash:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fad6fce0a16989518bdecece97ac83958b50eed9" translate="yes" xml:space="preserve">
          <source>may be used by running &lt;code&gt;chef-client -j path/to/file.json&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e28eba71c1880544eff06d4127bbfca8361e4179" translate="yes" xml:space="preserve">
          <source>mdadm</source>
          <target state="translated">mdadm</target>
        </trans-unit>
        <trans-unit id="b3871c5b6431ecf7fc9d5ea911f1862418764f32" translate="yes" xml:space="preserve">
          <source>merges the cookbook into the master (to ensure that any local changes or modifications are preserved)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c24b2612e94e2ae622e54397663f2b7bf0a2e17" translate="yes" xml:space="preserve">
          <source>metadata</source>
          <target state="translated">metadata</target>
        </trans-unit>
        <trans-unit id="98be7d0333822fcb07a476a9bb5851b0c2e8b720" translate="yes" xml:space="preserve">
          <source>metadata from file</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a2d4adbe09225e82826acd98e5e3c1c96800909" translate="yes" xml:space="preserve">
          <source>metadata.rb</source>
          <target state="translated">metadata.rb</target>
        </trans-unit>
        <trans-unit id="c7a6dddea994b2601021855183ae08b234de9f20" translate="yes" xml:space="preserve">
          <source>mount</source>
          <target state="translated">mount</target>
        </trans-unit>
        <trans-unit id="a67c13fede7c4f39c2c30c330e0897b1ee0507ef" translate="yes" xml:space="preserve">
          <source>net/http</source>
          <target state="translated">net/http</target>
        </trans-unit>
        <trans-unit id="6b70aa46d375936decf9a5385efe61547eecdd12" translate="yes" xml:space="preserve">
          <source>new_resource.property</source>
          <target state="translated">new_resource.property</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
