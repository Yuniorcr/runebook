<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="qt">
    <body>
      <group id="qt">
        <trans-unit id="47709bb293bcfa4fae79437bdee1e02fc37acb17" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qabstractitemmodel&quot;&gt;QAbstractItemModel&lt;/a&gt; *QDataWidgetMapper::model() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d991c7002c1b7d5dca08dfae730e367457c302f" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qabstractitemmodel&quot;&gt;QAbstractItemModel&lt;/a&gt; *QItemSelectionModel::model()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd0b1394cdecbf9b78131d597cecf9c3633acdee" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qabstractitemmodel&quot;&gt;QAbstractItemModel&lt;/a&gt; presents a hierarchy of tables, but the views currently provided by QML can only display list data. In order to display the child lists of a hierarchical model, use the &lt;a href=&quot;qml-qtqml-models-delegatemodel&quot;&gt;DelegateModel&lt;/a&gt; QML type, which provides the following properties and functions to be used with list models of &lt;a href=&quot;qabstractitemmodel&quot;&gt;QAbstractItemModel&lt;/a&gt; type:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b2ddd9032aa91aa4eaefff53630f19846331e5e" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qabstractitemmodel&quot;&gt;QAbstractItemModel&lt;/a&gt; provides a hierarchical tree of data, whereas QML only operates on list data. &lt;code&gt;rootIndex&lt;/code&gt; allows the children of any node in a &lt;a href=&quot;qabstractitemmodel&quot;&gt;QAbstractItemModel&lt;/a&gt; to be provided by this model.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7d55f192000472c6f2dd08eb0fe24d6b31b1c47" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qabstractitemmodel&quot;&gt;QAbstractItemModel&lt;/a&gt; provides a hierarchical tree of data, whereas QML only operates on list data. This function assists in using tree models in QML.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d0157c6eb3387e050a3c34eec17a39f4927c1ac" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qabstractitemmodel&quot;&gt;QAbstractItemModel&lt;/a&gt; provides an interface to data that is flexible enough to handle views that represent data in the form of tables, lists, and trees. However, when implementing new models for list and table-like data structures, the &lt;a href=&quot;qabstractlistmodel&quot;&gt;QAbstractListModel&lt;/a&gt; and &lt;a href=&quot;qabstracttablemodel&quot;&gt;QAbstractTableModel&lt;/a&gt; classes are better starting points because they provide appropriate default implementations of common functions. Each of these classes can be subclassed to provide models that support specialized kinds of lists and tables.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8e13bf6940f0db3ab4a17ccd7af59efb55c4896" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qabstractitemmodel#QAbstractItemModel&quot;&gt;QAbstractItemModel&lt;/a&gt; *QAbstractProxyModel::sourceModel() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a56add39c9e499ce1a5f0090377a575ce6d14bb0" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qabstractitemmodel#roleNames&quot;&gt;roleNames&lt;/a&gt;() to expose the role names to the QML frontend. For example, the following version returns the selected table's field names as role names:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75813b6f10f4bedf74fb820b4f614011384491ec" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qabstractitemmodeltester&quot;&gt;QAbstractItemModelTester&lt;/a&gt; employs non-destructive tests, which typically consist in reading data and metadata out of a given item model. &lt;a href=&quot;qabstractitemmodeltester&quot;&gt;QAbstractItemModelTester&lt;/a&gt; will also attempt illegal modifications of the model. In models which are properly implemented, such attempts should be rejected, and no data should be changed as a consequence.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66692e62a164757cc6cd6509f7bbcd7e591120df" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qabstractitemmodeltester&quot;&gt;QAbstractItemModelTester&lt;/a&gt; helps catching the most common errors in custom item model classes. By performing a series of tests, it will try to check that the model status is consistent at all times. The tests will be repeated automatically every time the model is modified.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="887e2973182c544385087c26cae154733852ae85" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qabstractitemmodeltester&quot;&gt;QAbstractItemModelTester&lt;/a&gt; may also report additional debugging information as logging messages under the &lt;code&gt;qt.modeltest&lt;/code&gt; logging category. Such debug logging is disabled by default; refer to the &lt;a href=&quot;qloggingcategory&quot;&gt;QLoggingCategory&lt;/a&gt; documentation to learn how to enable it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f89875029ecd9bdcf9a20a09349a341629bed53c" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qabstractitemmodeltester&quot;&gt;QAbstractItemModelTester&lt;/a&gt; will report testing failures through the Qt Test logging mechanisms.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4fb0e4f50010d82a9e2b6b9c0aa43c570fd41e9c" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qabstractitemmodeltester#FailureReportingMode-enum&quot;&gt;QAbstractItemModelTester::FailureReportingMode&lt;/a&gt; QAbstractItemModelTester::failureReportingMode() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a47d8451cbbf6c2eeb7e924b29b1236e891401c" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qabstractitemview&quot;&gt;QAbstractItemView&lt;/a&gt; *QComboBox::view() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fffab10c02c406c2ac1294a934d9b2a168fc5a05" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qabstractitemview&quot;&gt;QAbstractItemView&lt;/a&gt; *QCompleter::popup() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d25d949406da67817fbe3a5230c66e95f279a09e" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qabstractitemview&quot;&gt;QAbstractItemView&lt;/a&gt; class is the base class for every standard view that uses a &lt;a href=&quot;qabstractitemmodel&quot;&gt;QAbstractItemModel&lt;/a&gt;. &lt;a href=&quot;qabstractitemview&quot;&gt;QAbstractItemView&lt;/a&gt; is an abstract class and cannot itself be instantiated. It provides a standard interface for interoperating with models through the signals and slots mechanism, enabling subclasses to be kept up-to-date with changes to their models. This class provides standard support for keyboard and mouse navigation, viewport scrolling, item editing, and selections. The keyboard navigation implements this functionality:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85a40e6de1224e22af277b788e98343fb02ba0e3" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qabstractitemview&quot;&gt;QAbstractItemView&lt;/a&gt; provides a lot of protected functions. Some are concerned with editing, for example, &lt;a href=&quot;qabstractitemview#edit&quot;&gt;edit&lt;/a&gt;(), and &lt;a href=&quot;qabstractitemview#commitData&quot;&gt;commitData&lt;/a&gt;(), whilst others are keyboard and mouse event handlers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba4349027b444b82834163de7a39141f1ba23842" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qabstractitemview&quot;&gt;QAbstractItemView&lt;/a&gt; provides common slots such as &lt;a href=&quot;qabstractitemview#edit&quot;&gt;edit&lt;/a&gt;() and &lt;a href=&quot;qabstractitemview#setCurrentIndex&quot;&gt;setCurrentIndex&lt;/a&gt;(). Many protected slots are also provided, including &lt;a href=&quot;qabstractitemview#dataChanged&quot;&gt;dataChanged&lt;/a&gt;(), &lt;a href=&quot;qabstractitemview#rowsInserted&quot;&gt;rowsInserted&lt;/a&gt;(), &lt;a href=&quot;qabstractitemview#rowsAboutToBeRemoved&quot;&gt;rowsAboutToBeRemoved&lt;/a&gt;(), &lt;a href=&quot;qabstractitemview#selectionChanged&quot;&gt;selectionChanged&lt;/a&gt;(), and &lt;a href=&quot;qabstractitemview#currentChanged&quot;&gt;currentChanged&lt;/a&gt;().</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93efd28e6cc7d5411660b5602eb713a44feea6c8" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qabstractitemview&quot;&gt;QAbstractItemView&lt;/a&gt;, &lt;a href=&quot;qgraphicsview&quot;&gt;QGraphicsView&lt;/a&gt;, &lt;a href=&quot;qmdiarea&quot;&gt;QMdiArea&lt;/a&gt;, &lt;a href=&quot;qplaintextedit&quot;&gt;QPlainTextEdit&lt;/a&gt;, &lt;a href=&quot;qscrollarea&quot;&gt;QScrollArea&lt;/a&gt;, and &lt;a href=&quot;qtextedit&quot;&gt;QTextEdit&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a337c42afe3e08bab42a658871a72583da03d58" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qabstractlistmodel&quot;&gt;QAbstractListModel&lt;/a&gt; provides a standard interface for models that represent their data as a simple non-hierarchical sequence of items. It is not used directly, but must be subclassed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f26644a49a290d3813578f8121bdb5b752d07b5e" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qabstractlistmodel&quot;&gt;QAbstractListModel&lt;/a&gt;, &lt;a href=&quot;qabstractproxymodel&quot;&gt;QAbstractProxyModel&lt;/a&gt;, &lt;a href=&quot;qabstracttablemodel&quot;&gt;QAbstractTableModel&lt;/a&gt;, and &lt;a href=&quot;qconcatenatetablesproxymodel&quot;&gt;QConcatenateTablesProxyModel&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a09d324908b2372f775078241c34cdd4adc425b" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qabstractmessagehandler&quot;&gt;QAbstractMessageHandler&lt;/a&gt; *QXmlQuery::messageHandler() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d7a5131a9737de4ea039e7b8cc5fecc3a467615" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qabstractmessagehandler&quot;&gt;QAbstractMessageHandler&lt;/a&gt; *QXmlSchema::messageHandler() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26673103164154dd48b2d4862a67d0015c846fa9" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qabstractmessagehandler&quot;&gt;QAbstractMessageHandler&lt;/a&gt; *QXmlSchemaValidator::messageHandler() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de0464b0b2416b10153beee705c7b340cdf4282b" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qabstractmessagehandler&quot;&gt;QAbstractMessageHandler&lt;/a&gt; is an abstract base class that provides a callback interface for handling messages. For example, class &lt;a href=&quot;qxmlquery&quot;&gt;QXmlQuery&lt;/a&gt; parses and runs an &lt;a href=&quot;xmlprocessing#&quot;&gt;XQuery&lt;/a&gt;. When it detects a compile or runtime error, it generates an appropriate error message, but rather than output the message itself, it passes the message to the &lt;a href=&quot;qabstractmessagehandler#message&quot;&gt;message&lt;/a&gt;() function of its &lt;a href=&quot;qabstractmessagehandler&quot;&gt;QAbstractMessageHandler&lt;/a&gt;. See &lt;a href=&quot;qxmlquery#setMessageHandler&quot;&gt;QXmlQuery::setMessageHandler&lt;/a&gt;().</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="050d9fd07f260f816b25fceec6fc3ed985f60d34" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qabstractnetworkcache&quot;&gt;QAbstractNetworkCache&lt;/a&gt; *QNetworkAccessManager::cache() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0ed6bb45c2b628bb3cf0b90b40480eee184620e" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qabstractnetworkcache&quot;&gt;QAbstractNetworkCache&lt;/a&gt; is the base class for every standard cache that is used by &lt;a href=&quot;qnetworkaccessmanager&quot;&gt;QNetworkAccessManager&lt;/a&gt;. &lt;a href=&quot;qabstractnetworkcache&quot;&gt;QAbstractNetworkCache&lt;/a&gt; is an abstract class and cannot be instantiated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77514447e5a61c8e6a5aca3b2979c4ba95250f78" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qabstractoauth#ContentType-enum&quot;&gt;QAbstractOAuth::ContentType&lt;/a&gt; QAbstractOAuth::contentType() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3365c6385baf615ef16f012e9238ef651a4dae6" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qabstractoauth#Status-enum&quot;&gt;QAbstractOAuth::Status&lt;/a&gt; QAbstractOAuth::status() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5fcd4c51e0b5f2197b1df90b14e8ae3d4e567ee" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qabstractoauth2&quot;&gt;QAbstractOAuth2&lt;/a&gt; and &lt;a href=&quot;qoauth1&quot;&gt;QOAuth1&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c51f78bc877f324c4ed20e96d05895f4e4fd29db" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qabstractoauthreplyhandler&quot;&gt;QAbstractOAuthReplyHandler&lt;/a&gt; *QAbstractOAuth::replyHandler() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08ecae6b79abb439d700c1852555a433e1793ffe" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qabstractopenglfunctions&quot;&gt;QAbstractOpenGLFunctions&lt;/a&gt; *QOpenGLContext::versionFunctions(const &lt;a href=&quot;qopenglversionprofile&quot;&gt;QOpenGLVersionProfile&lt;/a&gt; &amp;amp;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbbe16570d913fbf31e8b01f5bc7f81f5163962f" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qabstractplanarvideobuffer&quot;&gt;QAbstractPlanarVideoBuffer&lt;/a&gt; extends &lt;a href=&quot;qabstractvideobuffer&quot;&gt;QAbstractVideoBuffer&lt;/a&gt; to support mapping non-continuous planar video data. Implement this instead of &lt;a href=&quot;qabstractvideobuffer&quot;&gt;QAbstractVideoBuffer&lt;/a&gt; when the abstracted video data stores planes in separate buffers or includes padding between planes which would interfere with calculating offsets from the bytes per line and frame height.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f00aab216000e945825b0871e463613300641462" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qabstractprintdialog#PrintRange-enum&quot;&gt;QAbstractPrintDialog::PrintRange&lt;/a&gt; QAbstractPrintDialog::printRange() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e361cd2d42b7bcad510d954a519511641dde1619" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qabstractproxymodel&quot;&gt;QAbstractProxyModel&lt;/a&gt; *QFileDialog::proxyModel() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8751cdfdb08d76809289e532d849df0dec18cd66" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qabstractscrollarea&quot;&gt;QAbstractScrollArea&lt;/a&gt; already provides horizontal and vertical scroll bars by default. You can call this function to replace the default horizontal scroll bar with your own custom scroll bar.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6fbc5874a0042e86c250bc0ca20d65a960fee105" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qabstractscrollarea&quot;&gt;QAbstractScrollArea&lt;/a&gt; already provides vertical and horizontal scroll bars by default. You can call this function to replace the default vertical scroll bar with your own custom scroll bar.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e98d2b9786137b9d66ced360e7e06b3c220ffeb" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qabstractscrollarea&quot;&gt;QAbstractScrollArea&lt;/a&gt; always shows a scroll bar. This property is ignored on systems with transient scroll bars (e.g., on Mac from version 10.7).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a46a7c93da6ca31bec22eaa58b2d7d97d422b37a" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qabstractscrollarea&quot;&gt;QAbstractScrollArea&lt;/a&gt; is a low-level abstraction of a scrolling area. The area provides a central widget called the viewport, in which the contents of the area is to be scrolled (i.e, the visible parts of the contents are rendered in the viewport).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a051fcd614fe17d02f13ab60940407a6c131bcf5" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qabstractscrollarea&quot;&gt;QAbstractScrollArea&lt;/a&gt; never shows a scroll bar.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37f30baab6732ce94471ba7265d3f5b5886025fc" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qabstractscrollarea&quot;&gt;QAbstractScrollArea&lt;/a&gt; shows a scroll bar when the content is too large to fit and not otherwise. This is the default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d54038a3561ec9d82b026ca096094e80599c9442" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qabstractscrollarea&quot;&gt;QAbstractScrollArea&lt;/a&gt;, &lt;a href=&quot;qlabel&quot;&gt;QLabel&lt;/a&gt;, &lt;a href=&quot;qlcdnumber&quot;&gt;QLCDNumber&lt;/a&gt;, &lt;a href=&quot;qsplitter&quot;&gt;QSplitter&lt;/a&gt;, &lt;a href=&quot;qstackedwidget&quot;&gt;QStackedWidget&lt;/a&gt;, and &lt;a href=&quot;qtoolbox&quot;&gt;QToolBox&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb6d49464e18971ac2d29b9afd0e9a86a6ba9cc1" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qabstractslider&quot;&gt;QAbstractSlider&lt;/a&gt; emits a comprehensive set of signals:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62eddf0ec88468b30f377c859df51f3216d7e2a2" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qabstractslider&quot;&gt;QAbstractSlider&lt;/a&gt; provides a virtual &lt;a href=&quot;qabstractslider#sliderChange&quot;&gt;sliderChange&lt;/a&gt;() function that is well suited for updating the on-screen representation of sliders. By calling &lt;a href=&quot;qabstractslider#triggerAction&quot;&gt;triggerAction&lt;/a&gt;(), subclasses trigger slider actions. Two helper functions &lt;a href=&quot;qstyle#sliderPositionFromValue&quot;&gt;QStyle::sliderPositionFromValue&lt;/a&gt;() and &lt;a href=&quot;qstyle#sliderValueFromPosition&quot;&gt;QStyle::sliderValueFromPosition&lt;/a&gt;() help subclasses and styles to map screen coordinates to logical range values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ececaab9ef066f244026cff500bfcd0d15b6730" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qabstractslider#actionTriggered&quot;&gt;actionTriggered()&lt;/a&gt; is emitted when the scroll bar is changed by user interaction or via the &lt;a href=&quot;qabstractslider#triggerAction&quot;&gt;triggerAction()&lt;/a&gt; function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c006eafb673215a0347e74e49b6d5d2afc7d82df" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qabstractslider#actionTriggered&quot;&gt;actionTriggered&lt;/a&gt;()</source>
          <target state="translated">&lt;a href=&quot;qabstractslider#actionTriggered&quot;&gt;actionTriggered&lt;/a&gt;()</target>
        </trans-unit>
        <trans-unit id="be07dd0fd78cd034b3a19c4b63e585f1afe9fb8d" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qabstractslider#maximum-prop&quot;&gt;maximum&lt;/a&gt;: The highest possible value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25f501e9b1daee337f9bf0bc582f2a9e9edb949a" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qabstractslider#minimum-prop&quot;&gt;minimum&lt;/a&gt;: The lowest possible value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="137652883d9106c27620e31a33877347d4e6960d" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qabstractslider#pageStep-prop&quot;&gt;pageStep&lt;/a&gt;: The larger of two natural steps that an abstract slider provides and typically corresponds to the user pressing PageUp or PageDown.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="827698ee12e16bb14b78012389f642902380a5bb" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qabstractslider#rangeChanged&quot;&gt;rangeChanged()&lt;/a&gt; is emitted when the scroll bar's range of values has changed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20ffd21f95b283ef0c943683060350656b87aaad" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qabstractslider#rangeChanged&quot;&gt;rangeChanged&lt;/a&gt;()</source>
          <target state="translated">&lt;a href=&quot;qabstractslider#rangeChanged&quot;&gt;rangeChanged&lt;/a&gt;()</target>
        </trans-unit>
        <trans-unit id="09d79208df4a8af2f75b3f7a2a53575c354e08ac" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qabstractslider#singleStep-prop&quot;&gt;singleStep&lt;/a&gt;: The smaller of two natural steps that an abstract sliders provides and typically corresponds to the user pressing an arrow key.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc11b46d87628e46fc62d703c46559040a010283" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qabstractslider#sliderMoved&quot;&gt;sliderMoved()&lt;/a&gt; is emitted when the user drags the slider.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f50606ad729e759551ed6833be7664224d36d362" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qabstractslider#sliderMoved&quot;&gt;sliderMoved&lt;/a&gt;()</source>
          <target state="translated">&lt;a href=&quot;qabstractslider#sliderMoved&quot;&gt;sliderMoved&lt;/a&gt;()</target>
        </trans-unit>
        <trans-unit id="3f07705de636ca8a4d84aab9498622ea74331fcb" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qabstractslider#sliderPosition-prop&quot;&gt;sliderPosition&lt;/a&gt;: The current position of the slider. If &lt;a href=&quot;qabstractslider#tracking-prop&quot;&gt;tracking&lt;/a&gt; is enabled (the default), this is identical to &lt;a href=&quot;qabstractslider#value-prop&quot;&gt;value&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13363979aa07cdd3481c826ca950ddee2e7ad795" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qabstractslider#sliderPressed&quot;&gt;sliderPressed()&lt;/a&gt; is emitted when the user starts to drag the slider.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb0c3be3f783ea8626bccf35aa4ff249a6edbeed" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qabstractslider#sliderPressed&quot;&gt;sliderPressed&lt;/a&gt;()</source>
          <target state="translated">&lt;a href=&quot;qabstractslider#sliderPressed&quot;&gt;sliderPressed&lt;/a&gt;()</target>
        </trans-unit>
        <trans-unit id="ed8f9c9f4368c360dec50d1667ce10cdd94057cc" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qabstractslider#sliderReleased&quot;&gt;sliderReleased()&lt;/a&gt; is emitted when the user releases the slider.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9343078d0f65b20cdd8a99c3299e1e8314b61023" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qabstractslider#sliderReleased&quot;&gt;sliderReleased&lt;/a&gt;()</source>
          <target state="translated">&lt;a href=&quot;qabstractslider#sliderReleased&quot;&gt;sliderReleased&lt;/a&gt;()</target>
        </trans-unit>
        <trans-unit id="65f15ced18c9cee3c71c1a5376c563ff4d84e3ca" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qabstractslider#tracking-prop&quot;&gt;tracking&lt;/a&gt;: Whether slider tracking is enabled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b992eaab6bf3f2df93546ef2fc2d5ef20d1e95cb" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qabstractslider#value-prop&quot;&gt;value&lt;/a&gt;: The bounded integer that &lt;a href=&quot;qabstractslider&quot;&gt;QAbstractSlider&lt;/a&gt; maintains.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6355e2aef5b06da1d8c4e4758630aeafb40f7d5c" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qabstractslider#valueChanged&quot;&gt;valueChanged()&lt;/a&gt; is emitted when the scroll bar's value has changed. The tracking() determines whether this signal is emitted during user interaction.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a73cb616b0b78902d0c3eb567f8c5c956f401058" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qabstractslider#valueChanged&quot;&gt;valueChanged&lt;/a&gt;()</source>
          <target state="translated">&lt;a href=&quot;qabstractslider#valueChanged&quot;&gt;valueChanged&lt;/a&gt;()</target>
        </trans-unit>
        <trans-unit id="dbf2c918c85728eccaaeedda9f81ffaf777f22d3" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qabstractsocket&quot;&gt;QAbstractSocket&lt;/a&gt; can be used with &lt;a href=&quot;qtextstream&quot;&gt;QTextStream&lt;/a&gt; and &lt;a href=&quot;qdatastream&quot;&gt;QDataStream&lt;/a&gt;'s stream operators (operator&amp;lt;&amp;lt;() and operator&amp;gt;&amp;gt;()). There is one issue to be aware of, though: You must make sure that enough data is available before attempting to read it using operator&amp;gt;&amp;gt;().</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71dd819d8012280dc685714be88faf0487956b9c" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qabstractsocket&quot;&gt;QAbstractSocket&lt;/a&gt; is the base class for &lt;a href=&quot;qtcpsocket&quot;&gt;QTcpSocket&lt;/a&gt; and &lt;a href=&quot;qudpsocket&quot;&gt;QUdpSocket&lt;/a&gt; and contains all common functionality of these two classes. If you need a socket, you have two options:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a48b5f7d3645925cb24e8220e7a82e9d763608a1" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qabstractsocket&quot;&gt;QAbstractSocket&lt;/a&gt; provides a set of functions that suspend the calling thread until certain signals are emitted. These functions can be used to implement blocking sockets:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb49194bbe8972c95bde5bb225f038c1b01ed7f3" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qabstractsocket&quot;&gt;QAbstractSocket&lt;/a&gt;'s API unifies most of the differences between the two protocols. For example, although UDP is connectionless, &lt;a href=&quot;qabstractsocket#connectToHost&quot;&gt;connectToHost&lt;/a&gt;() establishes a virtual connection for UDP sockets, enabling you to use &lt;a href=&quot;qabstractsocket&quot;&gt;QAbstractSocket&lt;/a&gt; in more or less the same way regardless of the underlying protocol. Internally, &lt;a href=&quot;qabstractsocket&quot;&gt;QAbstractSocket&lt;/a&gt; remembers the address and port passed to &lt;a href=&quot;qabstractsocket#connectToHost&quot;&gt;connectToHost&lt;/a&gt;(), and functions like &lt;a href=&quot;qiodevice#read&quot;&gt;read&lt;/a&gt;() and &lt;a href=&quot;qiodevice#write&quot;&gt;write&lt;/a&gt;() use these values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="827807b0e875c345d4bd5421a2d04c2d638cef6b" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qabstractsocket#NetworkLayerProtocol-enum&quot;&gt;QAbstractSocket::NetworkLayerProtocol&lt;/a&gt; QHostAddress::protocol() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e16211ffb1b8044f3cfab6e70f1cb6e28b69b9b" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qabstractsocket#PauseMode-enum&quot;&gt;QAbstractSocket::PauseModes&lt;/a&gt; QAbstractSocket::pauseMode() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ebf4229842d365c77f2526579ba77af2cc382aa2" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qabstractsocket#PauseMode-enum&quot;&gt;QAbstractSocket::PauseModes&lt;/a&gt; QWebSocket::pauseMode() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d58449bc2d83d306d93eebde2ed78898ecd4d1d" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qabstractsocket#SocketError-enum&quot;&gt;QAbstractSocket::SocketError&lt;/a&gt; QAbstractSocket::error() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08d76d6d27e45f3f1252d05c436fdcc6b9db81a3" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qabstractsocket#SocketError-enum&quot;&gt;QAbstractSocket::SocketError&lt;/a&gt; QLocalServer::serverError() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7751af26b82cdefa705463e97011c4521fd1faaa" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qabstractsocket#SocketError-enum&quot;&gt;QAbstractSocket::SocketError&lt;/a&gt; QTcpServer::serverError() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="573def6e28b7b10e2725b657d9458de57eabbfe5" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qabstractsocket#SocketError-enum&quot;&gt;QAbstractSocket::SocketError&lt;/a&gt; QWebSocket::error() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53f3be417bf4fb877d2e6f9035eff918926d25c2" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qabstractsocket#SocketError-enum&quot;&gt;QAbstractSocket::SocketError&lt;/a&gt; is not a registered metatype, so for queued connections, you will have to register it with &lt;a href=&quot;qmetatype#Q_DECLARE_METATYPE&quot;&gt;Q_DECLARE_METATYPE&lt;/a&gt;() and &lt;a href=&quot;qmetatype#qRegisterMetaType-1&quot;&gt;qRegisterMetaType&lt;/a&gt;().</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="494c3598d2bfc899b7f4452db29d26080093fe09" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qabstractsocket#SocketState-enum&quot;&gt;QAbstractSocket::SocketState&lt;/a&gt; QAbstractSocket::state() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11b9e8576a3f02213fb6c8f0b44195bab0aa933a" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qabstractsocket#SocketState-enum&quot;&gt;QAbstractSocket::SocketState&lt;/a&gt; QWebSocket::state() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80323a0bbbb8718376f12a45d54eb0d572d0087b" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qabstractsocket#SocketState-enum&quot;&gt;QAbstractSocket::SocketState&lt;/a&gt; is not a registered metatype, so for queued connections, you will have to register it with &lt;a href=&quot;qmetatype#Q_DECLARE_METATYPE&quot;&gt;Q_DECLARE_METATYPE&lt;/a&gt;() and &lt;a href=&quot;qmetatype#qRegisterMetaType-1&quot;&gt;qRegisterMetaType&lt;/a&gt;().</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce7cbe4f402af89106f79e160ed4f819032e370c" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qabstractsocket#SocketState-enum&quot;&gt;QAbstractSocket::SocketState&lt;/a&gt; is not a registered metatype, so for queued connections, you will have to register it with Q_REGISTER_METATYPE() and &lt;a href=&quot;qmetatype#qRegisterMetaType-1&quot;&gt;qRegisterMetaType&lt;/a&gt;().</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="947108e01b5fc3a9a3ef778552c4f30115e821fb" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qabstractsocket#SocketType-enum&quot;&gt;QAbstractSocket::SocketType&lt;/a&gt; QAbstractSocket::socketType() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f7e24aff31a21ec614c2610c1068806ffc446dc" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qabstractsocket#bind&quot;&gt;QUdpSocket::bind&lt;/a&gt;() prepares the socket for accepting incoming datagrams, much like &lt;a href=&quot;qtcpserver#listen&quot;&gt;QTcpServer::listen&lt;/a&gt;() for TCP servers. Whenever one or more datagrams arrive, &lt;a href=&quot;qudpsocket&quot;&gt;QUdpSocket&lt;/a&gt; emits the &lt;a href=&quot;qiodevice#readyRead&quot;&gt;readyRead()&lt;/a&gt; signal. Call &lt;a href=&quot;qudpsocket#readDatagram&quot;&gt;QUdpSocket::readDatagram&lt;/a&gt;() to read the datagram.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0cecd6179bbe277dabca696e0d61cd2f7b327c85" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qabstractsocket#waitForBytesWritten&quot;&gt;waitForBytesWritten&lt;/a&gt;() blocks until one payload of data has been written to the socket.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc64c53f42a30b7955e9f1a1ddd9eda2b722dacf" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qabstractsocket#waitForConnected&quot;&gt;waitForConnected&lt;/a&gt;() blocks until a connection has been established.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6e79f5da14818a1150fa8df971a0d0f57ea02b0" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qabstractsocket#waitForDisconnected&quot;&gt;waitForDisconnected&lt;/a&gt;() blocks until the connection has closed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf441a9da6ba9ebc3d2f4f73135a53b68debdb15" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qabstractsocket#waitForReadyRead&quot;&gt;waitForReadyRead&lt;/a&gt;() blocks until new data is available for reading.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a63f4e3b06f9e5c630b82670f6813b9cd70366d" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qabstractspinbox&quot;&gt;QAbstractSpinBox&lt;/a&gt; also provide a virtual function &lt;a href=&quot;qabstractspinbox#stepEnabled&quot;&gt;stepEnabled&lt;/a&gt;() to determine whether stepping up/down is allowed at any point. This function returns a bitset of &lt;a href=&quot;qabstractspinbox#StepEnabledFlag-enum&quot;&gt;StepEnabled&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c5fe9394f857dce75051a23fbd4132ea702d2bc" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qabstractspinbox&quot;&gt;QAbstractSpinBox&lt;/a&gt; provides a virtual &lt;a href=&quot;qabstractspinbox#stepBy&quot;&gt;stepBy&lt;/a&gt;() function that is called whenever the user triggers a step. This function takes an integer value to signify how many steps were taken. E.g. Pressing &lt;a href=&quot;qt#Key-enum&quot;&gt;Qt::Key_Down&lt;/a&gt; will trigger a call to &lt;a href=&quot;qabstractspinbox#stepBy&quot;&gt;stepBy&lt;/a&gt;(-1).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2d37f0c4176a2ed70b0e1e4e3fc441bdc76887a" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qabstractspinbox&quot;&gt;QAbstractSpinBox&lt;/a&gt; takes ownership of the new &lt;a href=&quot;qabstractspinbox#lineEdit&quot;&gt;lineEdit&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee38ca8d8cde2fb035babce609a4067c3a04f58d" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qabstractspinbox#ButtonSymbols-enum&quot;&gt;QAbstractSpinBox::ButtonSymbols&lt;/a&gt; QStyleOptionSpinBox::buttonSymbols</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d743121d350d27df403095c05d9eb61523f21f04" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qabstractspinbox#StepEnabledFlag-enum&quot;&gt;QAbstractSpinBox::StepEnabled&lt;/a&gt; QStyleOptionSpinBox::stepEnabled</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="014c9e0873e309a0e1b783cac6167e2c40a920ce" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qabstractspinbox#text-prop&quot;&gt;text&lt;/a&gt;: The text that is displayed in the &lt;a href=&quot;qabstractspinbox&quot;&gt;QAbstractSpinBox&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd0975c325dd33cac804ab071984d33a4d05ec01" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qabstractspinbox#wrapping-prop&quot;&gt;wrapping&lt;/a&gt;: Whether the &lt;a href=&quot;qabstractspinbox&quot;&gt;QAbstractSpinBox&lt;/a&gt; wraps from the minimum value to the maximum value and vice versa.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="090e3762c4d9823f1873a34160b1e48d33786f67" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qabstractstate&quot;&gt;QAbstractState&lt;/a&gt; *QAbstractTransition::targetState() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7cd8410be639282e788d6a21607d1ede8a45e9e2" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qabstractstate#QAbstractState&quot;&gt;QAbstractState&lt;/a&gt; *QHistoryState::defaultState() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89d97d42edbfc14dc8c5748556b408d428afc34e" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qabstractstate#QAbstractState&quot;&gt;QAbstractState&lt;/a&gt; *QState::errorState() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc0286c30bf5b48034940b4fce2bdd361344c027" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qabstractstate#QAbstractState&quot;&gt;QAbstractState&lt;/a&gt; *QState::initialState() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a03275603b174cde94b9a3af9bbe19b472dd84f" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qabstracttablemodel&quot;&gt;QAbstractTableModel&lt;/a&gt; provides a standard interface for models that represent their data as a two-dimensional array of items. It is not used directly, but must be subclassed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c5104f70c27dd38a91fe597fe2ff95b02d2197e" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qabstracttextdocumentlayout&quot;&gt;QAbstractTextDocumentLayout&lt;/a&gt; *QTextDocument::documentLayout() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10c05b6504d1396bb38ce97c71ebb0e36bb114e8" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qabstracttransition&quot;&gt;QAbstractTransition&lt;/a&gt; *QHistoryState::defaultTransition() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6319fe8a06dee57744bcf9caca9650ab2004dab" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qabstracttransition&quot;&gt;QAbstractTransition&lt;/a&gt; *QState::addTransition(&lt;a href=&quot;qabstractstate#QAbstractState&quot;&gt;QAbstractState&lt;/a&gt; *</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c442de5d5555a176750c362b18282aa8e18aed57" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qabstracttransition#TransitionType-enum&quot;&gt;QAbstractTransition::TransitionType&lt;/a&gt; QAbstractTransition::transitionType() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6cba8d5bac028f8957c87741958322ef4fb89963" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qabstractvideobuffer&quot;&gt;QAbstractVideoBuffer&lt;/a&gt; *QVideoFrame::buffer() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fab2ad314e4242130dde758d36c7766aaba88f02" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qabstractvideobuffer#HandleType-enum&quot;&gt;QAbstractVideoBuffer::HandleType&lt;/a&gt; QAbstractVideoBuffer::handleType() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7f50700d2fc3ecf50bf919439c2c1cfe0548438" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qabstractvideobuffer#HandleType-enum&quot;&gt;QAbstractVideoBuffer::HandleType&lt;/a&gt; QVideoFrame::handleType() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50750cd4685969d2dd5778139d8d6a9c5d002a8b" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qabstractvideobuffer#HandleType-enum&quot;&gt;QAbstractVideoBuffer::HandleType&lt;/a&gt; QVideoSurfaceFormat::handleType() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e154f0d033b99ea080b3705bb7a9202d66c0be5c" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qabstractvideobuffer#MapMode-enum&quot;&gt;QAbstractVideoBuffer::MapMode&lt;/a&gt; QVideoFrame::mapMode() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f05cab714aa424398849f41cdb19048213da921" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qabstractvideofilter&quot;&gt;QAbstractVideoFilter&lt;/a&gt; is meant to be subclassed. The subclasses are then registered to the QML engine, so they can be used as a QML type. The list of filters are assigned to a &lt;a href=&quot;qml-qtmultimedia-videooutput&quot;&gt;VideoOutput&lt;/a&gt; type via its &lt;a href=&quot;qml-qtmultimedia-videooutput#filters-prop&quot;&gt;filters&lt;/a&gt; property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d39350c6e768b539f7da32bb80eca5188c5360a9" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qabstractvideofilter&quot;&gt;QAbstractVideoFilter&lt;/a&gt; provides a convenient way for applications to run image processing, computer vision algorithms or any generic transformation or calculation on the output of a &lt;a href=&quot;qml-qtmultimedia-videooutput&quot;&gt;VideoOutput&lt;/a&gt; type, regardless of the source (video or camera). By providing a simple interface it allows applications and third parties to easily develop QML types that provide image processing algorithms using popular frameworks like &lt;a href=&quot;http://opencv.org&quot;&gt;OpenCV&lt;/a&gt;. Due to the close integration with the final stages of the Qt Multimedia video pipeline, accelerated and possibly zero-copy solutions are feasible too: for instance, a plugin providing OpenCL-based algorithms can use OpenCL's OpenGL interop to use the OpenGL textures created by a hardware accelerated video decoder, without additional readbacks and copies.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a60c4e3a4afe6d1134099639c0cdda4683cc83cf" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qabstractvideosurface#Error-enum&quot;&gt;QAbstractVideoSurface::Error&lt;/a&gt; QAbstractVideoSurface::error() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d8a92ffd87f2832d75038fb2bbf75f01bc8f7a8" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qabstractxmlnodemodel&quot;&gt;QAbstractXmlNodeModel&lt;/a&gt; bridges the gap between the arbitrary structure of the non-XML data to be queried and the well-defined structure of XML data understood by &lt;a href=&quot;qxmlquery&quot;&gt;QXmlQuery&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df67eea8569fc689c003ffd2bb4afe40c1339bca" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qabstractxmlreceiver&quot;&gt;QAbstractXmlReceiver&lt;/a&gt; is an abstract base class that provides a callback interface for receiving an &lt;a href=&quot;qabstractxmlreceiver#xquery-sequence&quot;&gt;XQuery sequence&lt;/a&gt;, usually the output of an &lt;a href=&quot;qxmlquery&quot;&gt;QXmlQuery&lt;/a&gt;, and transforming that sequence into a structure of your choosing, usually XML. Consider the example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1aef3c692c4123734170ceb19a8fca2ba111be2d" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qabstractxmlreceiver#atomicValue&quot;&gt;atomicValue&lt;/a&gt;() is called for each</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7a77c01880bab83b319dacb6bb9b334c73b6db5" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qabstractxmlreceiver#attribute&quot;&gt;attribute&lt;/a&gt;() is called for each</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ed0c25b1e817dceea702100fc88641e0bb2b0ff" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qabstractxmlreceiver#characters&quot;&gt;characters&lt;/a&gt;() is called for each</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c239f5b4e7ab7df60d6af8bec6188a4611c76eab" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qabstractxmlreceiver#comment&quot;&gt;comment&lt;/a&gt;() is called for each</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f882c0af435f17d8e493868f04ccae0a1e7bfb0" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qabstractxmlreceiver#namespaceBinding&quot;&gt;namespaceBinding&lt;/a&gt;() is called for each</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d73f2991231d6dd9ec6cd34b831d2fce74b5562" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qabstractxmlreceiver#processingInstruction&quot;&gt;processingInstruction&lt;/a&gt;() is called for each</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89c89970eb001f5188b9566a6a80a382dad6a9fb" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qabstractxmlreceiver#startDocument&quot;&gt;startDocument&lt;/a&gt;() and &lt;a href=&quot;qabstractxmlreceiver#endDocument&quot;&gt;endDocument&lt;/a&gt;() are called for each</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="253abf400a4cb38e47da7b5f515d3e631aaf70fb" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qabstractxmlreceiver#startElement&quot;&gt;startElement&lt;/a&gt;() and &lt;a href=&quot;qabstractxmlreceiver#endElement&quot;&gt;endElement&lt;/a&gt;() are called for each</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e923cf387bb71f9de3f2e0c8ac7ca0b44e45a1a" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qaccelerometer&quot;&gt;QAccelerometer&lt;/a&gt;, &lt;a href=&quot;qaltimeter&quot;&gt;QAltimeter&lt;/a&gt;, &lt;a href=&quot;qambientlightsensor&quot;&gt;QAmbientLightSensor&lt;/a&gt;, &lt;a href=&quot;qambienttemperaturesensor&quot;&gt;QAmbientTemperatureSensor&lt;/a&gt;, &lt;a href=&quot;qcompass&quot;&gt;QCompass&lt;/a&gt;, &lt;a href=&quot;qdistancesensor&quot;&gt;QDistanceSensor&lt;/a&gt;, &lt;a href=&quot;qgyroscope&quot;&gt;QGyroscope&lt;/a&gt;, &lt;a href=&quot;qholstersensor&quot;&gt;QHolsterSensor&lt;/a&gt;, &lt;a href=&quot;qhumiditysensor&quot;&gt;QHumiditySensor&lt;/a&gt;, &lt;a href=&quot;qirproximitysensor&quot;&gt;QIRProximitySensor&lt;/a&gt;, &lt;a href=&quot;qlidsensor&quot;&gt;QLidSensor&lt;/a&gt;, &lt;a href=&quot;qlightsensor&quot;&gt;QLightSensor&lt;/a&gt;, &lt;a href=&quot;qmagnetometer&quot;&gt;QMagnetometer&lt;/a&gt;, &lt;a href=&quot;qorientationsensor&quot;&gt;QOrientationSensor&lt;/a&gt;, &lt;a href=&quot;qpressuresensor&quot;&gt;QPressureSensor&lt;/a&gt;, &lt;a href=&quot;qproximitysensor&quot;&gt;QProximitySensor&lt;/a&gt;, &lt;a href=&quot;qrotationsensor&quot;&gt;QRotationSensor&lt;/a&gt;, &lt;a href=&quot;qtapsensor&quot;&gt;QTapSensor&lt;/a&gt;, and &lt;a href=&quot;qtiltsensor&quot;&gt;QTiltSensor&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="552de771fd34f4b58decfe16584873bfe521c555" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qaccelerometerfilter&quot;&gt;QAccelerometerFilter&lt;/a&gt;, &lt;a href=&quot;qaltimeterfilter&quot;&gt;QAltimeterFilter&lt;/a&gt;, &lt;a href=&quot;qambientlightfilter&quot;&gt;QAmbientLightFilter&lt;/a&gt;, &lt;a href=&quot;qambienttemperaturefilter&quot;&gt;QAmbientTemperatureFilter&lt;/a&gt;, &lt;a href=&quot;qcompassfilter&quot;&gt;QCompassFilter&lt;/a&gt;, &lt;a href=&quot;qdistancefilter&quot;&gt;QDistanceFilter&lt;/a&gt;, &lt;a href=&quot;qgyroscopefilter&quot;&gt;QGyroscopeFilter&lt;/a&gt;, &lt;a href=&quot;qholsterfilter&quot;&gt;QHolsterFilter&lt;/a&gt;, &lt;a href=&quot;qhumidityfilter&quot;&gt;QHumidityFilter&lt;/a&gt;, &lt;a href=&quot;qirproximityfilter&quot;&gt;QIRProximityFilter&lt;/a&gt;, &lt;a href=&quot;qlidfilter&quot;&gt;QLidFilter&lt;/a&gt;, &lt;a href=&quot;qlightfilter&quot;&gt;QLightFilter&lt;/a&gt;, &lt;a href=&quot;qmagnetometerfilter&quot;&gt;QMagnetometerFilter&lt;/a&gt;, &lt;a href=&quot;qorientationfilter&quot;&gt;QOrientationFilter&lt;/a&gt;, &lt;a href=&quot;qpressurefilter&quot;&gt;QPressureFilter&lt;/a&gt;, &lt;a href=&quot;qproximityfilter&quot;&gt;QProximityFilter&lt;/a&gt;, &lt;a href=&quot;qrotationfilter&quot;&gt;QRotationFilter&lt;/a&gt;, &lt;a href=&quot;qtapfilter&quot;&gt;QTapFilter&lt;/a&gt;, and &lt;a href=&quot;qtiltfilter&quot;&gt;QTiltFilter&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9157c37bc22c15f5691427f7267859107ef895ec" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qaccelerometerreading&quot;&gt;QAccelerometerReading&lt;/a&gt; *QAccelerometer::reading() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d7fcb1121b29661def3616b1254c955046b0fe8" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qaccelerometerreading&quot;&gt;QAccelerometerReading&lt;/a&gt;, &lt;a href=&quot;qaltimeterreading&quot;&gt;QAltimeterReading&lt;/a&gt;, &lt;a href=&quot;qambientlightreading&quot;&gt;QAmbientLightReading&lt;/a&gt;, &lt;a href=&quot;qambienttemperaturereading&quot;&gt;QAmbientTemperatureReading&lt;/a&gt;, &lt;a href=&quot;qcompassreading&quot;&gt;QCompassReading&lt;/a&gt;, &lt;a href=&quot;qdistancereading&quot;&gt;QDistanceReading&lt;/a&gt;, &lt;a href=&quot;qgyroscopereading&quot;&gt;QGyroscopeReading&lt;/a&gt;, &lt;a href=&quot;qholsterreading&quot;&gt;QHolsterReading&lt;/a&gt;, &lt;a href=&quot;qhumidityreading&quot;&gt;QHumidityReading&lt;/a&gt;, &lt;a href=&quot;qirproximityreading&quot;&gt;QIRProximityReading&lt;/a&gt;, &lt;a href=&quot;qlidreading&quot;&gt;QLidReading&lt;/a&gt;, &lt;a href=&quot;qlightreading&quot;&gt;QLightReading&lt;/a&gt;, &lt;a href=&quot;qmagnetometerreading&quot;&gt;QMagnetometerReading&lt;/a&gt;, &lt;a href=&quot;qorientationreading&quot;&gt;QOrientationReading&lt;/a&gt;, &lt;a href=&quot;qpressurereading&quot;&gt;QPressureReading&lt;/a&gt;, &lt;a href=&quot;qproximityreading&quot;&gt;QProximityReading&lt;/a&gt;, &lt;a href=&quot;qrotationreading&quot;&gt;QRotationReading&lt;/a&gt;, &lt;a href=&quot;qtapreading&quot;&gt;QTapReading&lt;/a&gt;, and &lt;a href=&quot;qtiltreading&quot;&gt;QTiltReading&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11f8a10fa83df759c7b425bad8c9ea1bd109122f" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qaccessible#Event-enum&quot;&gt;QAccessible::Event&lt;/a&gt; QAccessibleEvent::type() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5da233e37189aa11691ea4bfaa522c09b6b9d2ed" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qaccessible#RelationFlag-enum&quot;&gt;Relation&lt;/a&gt;: Describes the relationship between objects in the object hierarchy.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eeb08d7ac559f7a220ae35cc0be9b7cfa8f0b3a1" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qaccessible#Role-enum&quot;&gt;Role&lt;/a&gt;: Describes the role the object fills in the user interface, e.g., if it is a window, a text edit, or a cell in a table.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06fdda3d04eebc92c2d6631d0f8c135bc2ced605" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qaccessible#queryAccessibleInterface&quot;&gt;queryAccessibleInterface()&lt;/a&gt; returns accessible interfaces for &lt;a href=&quot;qobject&quot;&gt;QObject&lt;/a&gt;s. All widgets in Qt provide interfaces; if you need interfaces to control the behavior of other &lt;a href=&quot;qobject&quot;&gt;QObject&lt;/a&gt; subclasses, you must implement the interfaces yourself, although the &lt;a href=&quot;qaccessibleobject&quot;&gt;QAccessibleObject&lt;/a&gt; convenience class implements parts of the functionality for you.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="446c91c9f9fd1ab0afe0e00d2e59f241f8adf432" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qaccessible-state&quot;&gt;QAccessible::State&lt;/a&gt; QAccessibleStateChangeEvent::changedStates() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d0dbaa444dbc8045c40bc38381d5f29542f9e3f" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qaccessible-state&quot;&gt;State&lt;/a&gt;: The objects can be in a number of different states. Examples of states are whether the object is disabled, if it has focus, or if it provides a pop-up menu.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d0f5f894cfe492a1e1859b88a701bef20974045" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qaccessibleactioninterface&quot;&gt;QAccessibleActionInterface&lt;/a&gt; *QAccessibleInterface::actionInterface()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10e32961c2b5cfc2ac11c2a3d2b47b5a535f0374" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qaccessibleactioninterface#decreaseAction&quot;&gt;decreaseAction&lt;/a&gt;()</source>
          <target state="translated">&lt;a href=&quot;qaccessibleactioninterface#decreaseAction&quot;&gt;decreaseAction&lt;/a&gt;()</target>
        </trans-unit>
        <trans-unit id="45e98771138608b9cee2acfb7f2f1bd716874c04" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qaccessibleactioninterface#increaseAction&quot;&gt;increaseAction&lt;/a&gt;()</source>
          <target state="translated">&lt;a href=&quot;qaccessibleactioninterface#increaseAction&quot;&gt;increaseAction&lt;/a&gt;()</target>
        </trans-unit>
        <trans-unit id="df5ed891f394fb494f4f075f8fdb3c7b697a1b65" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qaccessibleactioninterface#pressAction&quot;&gt;pressAction&lt;/a&gt;()</source>
          <target state="translated">&lt;a href=&quot;qaccessibleactioninterface#pressAction&quot;&gt;pressAction&lt;/a&gt;()</target>
        </trans-unit>
        <trans-unit id="446b39a764bf0b933bd240aa2a6dc0f916a8c330" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qaccessibleactioninterface#setFocusAction&quot;&gt;setFocusAction&lt;/a&gt;()</source>
          <target state="translated">&lt;a href=&quot;qaccessibleactioninterface#setFocusAction&quot;&gt;setFocusAction&lt;/a&gt;()</target>
        </trans-unit>
        <trans-unit id="04943ed48b2b77bc767518ac130b28e76d1aa073" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qaccessibleactioninterface#showMenuAction&quot;&gt;showMenuAction&lt;/a&gt;()</source>
          <target state="translated">&lt;a href=&quot;qaccessibleactioninterface#showMenuAction&quot;&gt;showMenuAction&lt;/a&gt;()</target>
        </trans-unit>
        <trans-unit id="b4e8e491fefc28a414bc48f0c8bfad00aa68042f" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qaccessibleactioninterface#toggleAction&quot;&gt;toggleAction&lt;/a&gt;()</source>
          <target state="translated">&lt;a href=&quot;qaccessibleactioninterface#toggleAction&quot;&gt;toggleAction&lt;/a&gt;()</target>
        </trans-unit>
        <trans-unit id="c9fcda555a92cf8b404c0b3f449c247ff61ef793" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qaccessibleinterface&quot;&gt;QAccessibleInterface&lt;/a&gt; supports several sub interfaces. In order to provide more information about some objects, their accessible representation should implement one or more of these interfaces.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="836507fa400412bbbfa16b504fd19ce29cba9314" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qaccessibleobject&quot;&gt;QAccessibleObject&lt;/a&gt; and &lt;a href=&quot;qaccessibleactioninterface&quot;&gt;QAccessibleActionInterface&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1066a9a19bcc2d31cf9966f88eeaefeed28c813" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qaccessiblestatechangeevent&quot;&gt;QAccessibleStateChangeEvent&lt;/a&gt;, &lt;a href=&quot;qaccessibletablemodelchangeevent&quot;&gt;QAccessibleTableModelChangeEvent&lt;/a&gt;, &lt;a href=&quot;qaccessibletextcursorevent&quot;&gt;QAccessibleTextCursorEvent&lt;/a&gt;, and &lt;a href=&quot;qaccessiblevaluechangeevent&quot;&gt;QAccessibleValueChangeEvent&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="284f10950cd882fb04c91babb93bc9697048d0be" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qaccessibletablecellinterface&quot;&gt;QAccessibleTableCellInterface&lt;/a&gt; *QAccessibleInterface::tableCellInterface()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="791220b78b71b355c66f6234a7be71268258273a" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qaccessibletableinterface&quot;&gt;QAccessibleTableInterface&lt;/a&gt; *QAccessibleInterface::tableInterface()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cce1e0ac920d4377eecb56ed1cec5bb760e9653b" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qaccessibletablemodelchangeevent#ModelChangeType-enum&quot;&gt;QAccessibleTableModelChangeEvent::ModelChangeType&lt;/a&gt; QAccessibleTableModelChangeEvent::modelChangeType() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9c5c330ee99670d85060554e03c70c874d3d1e2" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qaccessibletextinsertevent&quot;&gt;QAccessibleTextInsertEvent&lt;/a&gt;, &lt;a href=&quot;qaccessibletextremoveevent&quot;&gt;QAccessibleTextRemoveEvent&lt;/a&gt;, &lt;a href=&quot;qaccessibletextselectionevent&quot;&gt;QAccessibleTextSelectionEvent&lt;/a&gt;, and &lt;a href=&quot;qaccessibletextupdateevent&quot;&gt;QAccessibleTextUpdateEvent&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c2c3b3bf3722c68ad046fd6868c233275458576" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qaccessibletextinterface&quot;&gt;QAccessibleTextInterface&lt;/a&gt; *QAccessibleInterface::textInterface()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ef8821f98a2ec4bd8a78195f5d313ec9189da22" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qaccessibletextselectionevent&quot;&gt;QAccessibleTextSelectionEvent&lt;/a&gt; signals a change in the text selection of an object. &lt;a href=&quot;#details&quot;&gt;More...&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81c3f3ed63835e5f76f57ea4bfb4368bc7559f05" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qaccessiblevalueinterface&quot;&gt;QAccessibleValueInterface&lt;/a&gt; *QAccessibleInterface::valueInterface()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80170098a6414c14bbf2ed2ca83d844941c9de8c" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qaction&quot;&gt;QAction&lt;/a&gt; *QActionEvent::action() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1e329eecee3bd8fb2912ec739afabb2916c1417" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qaction&quot;&gt;QAction&lt;/a&gt; *QActionEvent::before() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="701e00ddafa1b973ec9799661e085aa04cad7ce2" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qaction&quot;&gt;QAction&lt;/a&gt; *QActionGroup::addAction(&lt;a href=&quot;qaction&quot;&gt;QAction&lt;/a&gt; *</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fdfb63afa7f3099d08dfa7101e8046009c464ece" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qaction&quot;&gt;QAction&lt;/a&gt; *QActionGroup::addAction(const &lt;a href=&quot;qicon&quot;&gt;QIcon&lt;/a&gt; &amp;amp;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb665b3cae851b80ae1139298f7fbd3fc2cafef6" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qaction&quot;&gt;QAction&lt;/a&gt; *QActionGroup::addAction(const &lt;a href=&quot;qstring&quot;&gt;QString&lt;/a&gt; &amp;amp;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79c57a113f6b7aa3d54979c9c961722d4bc79cae" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qaction&quot;&gt;QAction&lt;/a&gt; *QActionGroup::checkedAction() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23a92f900a7accbc831fa15620df10ac7d30f271" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qaction&quot;&gt;QAction&lt;/a&gt; *QDockWidget::toggleViewAction() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8d463f875baa44c7b975899b3e85576d1eaf97a" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qaction&quot;&gt;QAction&lt;/a&gt; *QLineEdit::addAction(const &lt;a href=&quot;qicon&quot;&gt;QIcon&lt;/a&gt; &amp;amp;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8589e64b4c7b02557efae3ed6280c3c41507ed2b" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qaction&quot;&gt;QAction&lt;/a&gt; *QMenu::actionAt(const &lt;a href=&quot;qpoint&quot;&gt;QPoint&lt;/a&gt; &amp;amp;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="973aa5a2a6de530d1723a84d72a7009fadba1ce1" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qaction&quot;&gt;QAction&lt;/a&gt; *QMenu::activeAction() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e88102a3a7bb010a315faf48f6cc072ac240d13" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qaction&quot;&gt;QAction&lt;/a&gt; *QMenu::addAction(const &lt;a href=&quot;qicon&quot;&gt;QIcon&lt;/a&gt; &amp;amp;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a238ef204dcc3ad1890bb582fae3337d26b303eb" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qaction&quot;&gt;QAction&lt;/a&gt; *QMenu::addAction(const &lt;a href=&quot;qstring&quot;&gt;QString&lt;/a&gt; &amp;amp;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c5a16da6a88f0a61308a463b64cd8379b06190a" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qaction&quot;&gt;QAction&lt;/a&gt; *QMenu::addMenu(&lt;a href=&quot;qmenu#QMenu&quot;&gt;QMenu&lt;/a&gt; *</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b405fe651cee009b6234078f33730c75e85dfe9" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qaction&quot;&gt;QAction&lt;/a&gt; *QMenu::addSection(const &lt;a href=&quot;qicon&quot;&gt;QIcon&lt;/a&gt; &amp;amp;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d354600c35c4079a47ef13eacb6d04b16a67e5c8" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qaction&quot;&gt;QAction&lt;/a&gt; *QMenu::addSection(const &lt;a href=&quot;qstring&quot;&gt;QString&lt;/a&gt; &amp;amp;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc12bd85965932f4af4aede0500f04903551347f" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qaction&quot;&gt;QAction&lt;/a&gt; *QMenu::addSeparator()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c53377740a2347466fa1a47fab4971f1d2ea843b" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qaction&quot;&gt;QAction&lt;/a&gt; *QMenu::defaultAction() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ebe9002b1524b21514791f3725b9806dbdc5254" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qaction&quot;&gt;QAction&lt;/a&gt; *QMenu::exec()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2dcc513db5a0837c2189349dbe4b3eb6b7e85271" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qaction&quot;&gt;QAction&lt;/a&gt; *QMenu::exec(const &lt;a href=&quot;qpoint&quot;&gt;QPoint&lt;/a&gt; &amp;amp;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aea888d86376166a80ca2f6e0ee2a71a13129944" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qaction&quot;&gt;QAction&lt;/a&gt; *QMenu::insertMenu(&lt;a href=&quot;qaction&quot;&gt;QAction&lt;/a&gt; *</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3f4d86d22778f80aed089048b5b32f750a660c3" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qaction&quot;&gt;QAction&lt;/a&gt; *QMenu::insertSection(&lt;a href=&quot;qaction&quot;&gt;QAction&lt;/a&gt; *</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17b16805b80e8d1ed19484669d79804c92bca222" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qaction&quot;&gt;QAction&lt;/a&gt; *QMenu::insertSeparator(&lt;a href=&quot;qaction&quot;&gt;QAction&lt;/a&gt; *</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36ffa64156e132fbc6c22e5cde471c655f41ac3c" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qaction&quot;&gt;QAction&lt;/a&gt; *QMenu::menuAction() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c2ca17587f848db0da55409360af60b526615ce" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qaction&quot;&gt;QAction&lt;/a&gt; *QMenuBar::actionAt(const &lt;a href=&quot;qpoint&quot;&gt;QPoint&lt;/a&gt; &amp;amp;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d36af21184bb74235de6bc30fe7bc11b1b77130" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qaction&quot;&gt;QAction&lt;/a&gt; *QMenuBar::activeAction() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13270a03df1360203718124a69e55c7b249aeba3" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qaction&quot;&gt;QAction&lt;/a&gt; *QMenuBar::addAction(const &lt;a href=&quot;qstring&quot;&gt;QString&lt;/a&gt; &amp;amp;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="174d6a2d33691af85691f8c190cbc774fb2ba541" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qaction&quot;&gt;QAction&lt;/a&gt; *QMenuBar::addMenu(&lt;a href=&quot;qmenu&quot;&gt;QMenu&lt;/a&gt; *</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6dc663f996a96c30931532a5de184f81682d8352" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qaction&quot;&gt;QAction&lt;/a&gt; *QMenuBar::addSeparator()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c17fa36c149ed51d26336e435a9331227e80df8" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qaction&quot;&gt;QAction&lt;/a&gt; *QMenuBar::insertMenu(&lt;a href=&quot;qaction&quot;&gt;QAction&lt;/a&gt; *</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1eac5a36baae945134367cb13e3240c862a2a25" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qaction&quot;&gt;QAction&lt;/a&gt; *QMenuBar::insertSeparator(&lt;a href=&quot;qaction&quot;&gt;QAction&lt;/a&gt; *</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2ba5b18758d68a95ef0fd0c0e5b6a26bd4eeef9" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qaction&quot;&gt;QAction&lt;/a&gt; *QToolBar::actionAt(const &lt;a href=&quot;qpoint&quot;&gt;QPoint&lt;/a&gt; &amp;amp;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4443a888157d81c70e862b689a2c39892bfed727" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qaction&quot;&gt;QAction&lt;/a&gt; *QToolBar::actionAt(int</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa2a73522b0308d15eecdaccc5dd65d3326b1cd4" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qaction&quot;&gt;QAction&lt;/a&gt; *QToolBar::addAction(const &lt;a href=&quot;qicon&quot;&gt;QIcon&lt;/a&gt; &amp;amp;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18fec0fdb64d8d0c05545f6fd015a2d61fe92bc5" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qaction&quot;&gt;QAction&lt;/a&gt; *QToolBar::addAction(const &lt;a href=&quot;qstring&quot;&gt;QString&lt;/a&gt; &amp;amp;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3a21aa6047db4b203ce691d73dfc62af346d2da" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qaction&quot;&gt;QAction&lt;/a&gt; *QToolBar::addSeparator()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea210c6cd131db97c23558c87e9beb72410cf358" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qaction&quot;&gt;QAction&lt;/a&gt; *QToolBar::addWidget(&lt;a href=&quot;qwidget#QWidget&quot;&gt;QWidget&lt;/a&gt; *</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35ba93824752bf3d298cacd3a789e08bd7c2055b" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qaction&quot;&gt;QAction&lt;/a&gt; *QToolBar::insertSeparator(&lt;a href=&quot;qaction&quot;&gt;QAction&lt;/a&gt; *</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca50e2e782cecd6c58b147e4003ba152c9840c0f" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qaction&quot;&gt;QAction&lt;/a&gt; *QToolBar::insertWidget(&lt;a href=&quot;qaction&quot;&gt;QAction&lt;/a&gt; *</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea69025be7ebb7dad8ec463df29b67df278eaedc" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qaction&quot;&gt;QAction&lt;/a&gt; *QToolBar::toggleViewAction() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1985d7b7c9ca01a33317be9916a2fb1ec8efc86" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qaction&quot;&gt;QAction&lt;/a&gt; *QToolButton::defaultAction() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4d3c1e80c68acc9257f28cf60df05644f3f661d" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qaction&quot;&gt;QAction&lt;/a&gt; *QUndoGroup::createRedoAction(&lt;a href=&quot;qobject#QObject&quot;&gt;QObject&lt;/a&gt; *</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c476e4c938b114385f3d0b781658996cc6b2309a" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qaction&quot;&gt;QAction&lt;/a&gt; *QUndoGroup::createUndoAction(&lt;a href=&quot;qobject#QObject&quot;&gt;QObject&lt;/a&gt; *</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12cf1f9f746866c2365c5ec28bdb386fe2713ce1" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qaction&quot;&gt;QAction&lt;/a&gt; *QUndoStack::createRedoAction(&lt;a href=&quot;qobject#QObject&quot;&gt;QObject&lt;/a&gt; *</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6262ec1a1d84179cd2cf086f20200ec70d1300c7" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qaction&quot;&gt;QAction&lt;/a&gt; *QUndoStack::createUndoAction(&lt;a href=&quot;qobject#QObject&quot;&gt;QObject&lt;/a&gt; *</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a00182f5a38ef7cdbbd341234be52622e3d61bc" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qaction&quot;&gt;QAction&lt;/a&gt; *QWebEnginePage::action(&lt;a href=&quot;qwebenginepage#WebAction-enum&quot;&gt;QWebEnginePage::WebAction&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74cd1d3955d1827aa63c3b65f170cc7c9e73fbfe" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qaction&quot;&gt;QAction&lt;/a&gt; *QWebEngineView::pageAction(&lt;a href=&quot;qwebenginepage#WebAction-enum&quot;&gt;QWebEnginePage::WebAction&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3f8bf642134e33209274210e894cd53a8d0d1f1" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qactiongroup&quot;&gt;QActionGroup&lt;/a&gt; *QAction::actionGroup() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8681f0e0f82f020bac00a6f9072624337727e053" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qaltimeterreading&quot;&gt;QAltimeterReading&lt;/a&gt; *QAltimeter::reading() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74d00fa33e78390805c3030440269852c1b48d77" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qambientlightreading&quot;&gt;QAmbientLightReading&lt;/a&gt; *QAmbientLightSensor::reading() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69a2026d42a91a63c5e06d2dbef902aace65910d" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qambienttemperaturereading&quot;&gt;QAmbientTemperatureReading&lt;/a&gt; *QAmbientTemperatureSensor::reading() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e62e0f9abdff14885045c5386c0a1116f7ec17e7" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qandroidbinder&quot;&gt;QAndroidBinder&lt;/a&gt; QAndroidParcel::readBinder() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2619a01ad080503a866b6e203078fd8708d21807" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qandroidjniobject&quot;&gt;QAndroidJniObject&lt;/a&gt; QAndroidBinder::handle() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2453c25353635c3a513d58bad855795a0551ff34" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qandroidjniobject&quot;&gt;QAndroidJniObject&lt;/a&gt; QAndroidIntent::handle() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aaea56b228782a062bd951b456a0ae2f98e1fb8b" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qandroidjniobject&quot;&gt;QAndroidJniObject&lt;/a&gt; QAndroidParcel::handle() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cdfa13bf6a0c216f5d86679fad999f7722b28b2f" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qandroidjniobject&quot;&gt;QAndroidJniObject&lt;/a&gt; QAndroidServiceConnection::handle() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce44262d6472572c34ffd7e81f149fb94f2dd21a" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qandroidjniobject&quot;&gt;QAndroidJniObject&lt;/a&gt; QtAndroid::androidActivity()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6126b4f0bdd8c771879013f9935275377aaa856f" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qandroidjniobject&quot;&gt;QAndroidJniObject&lt;/a&gt; QtAndroid::androidContext()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e331805c0a243d60b6757c874fbe70c8176ec682" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qandroidjniobject&quot;&gt;QAndroidJniObject&lt;/a&gt; QtAndroid::androidService()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dbb40b8e8052bec995c2ab6bd74cda0f81031f99" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qandroidjniobject#QAndroidJniObject&quot;&gt;QAndroidJniObject&lt;/a&gt; &amp;amp;QAndroidJniObject::operator=(T</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e62260adee2b030cffdbcefc28f95481094a0637" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qandroidjniobject#QAndroidJniObject&quot;&gt;QAndroidJniObject&lt;/a&gt; QAndroidJniObject::callObjectMethod(const char *</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3de9798ff60cacc7141a2288740e0e6bc736d856" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qandroidjniobject#QAndroidJniObject&quot;&gt;QAndroidJniObject&lt;/a&gt; QAndroidJniObject::getObjectField(const char *</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="346ec670b9a2e172e53167b8f5c7b13f767b4ac1" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qanimationgroup&quot;&gt;QAnimationGroup&lt;/a&gt; *QAbstractAnimation::group() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10c31855974515a3b34cd0a637d352d01eb3d2e4" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qanimationgroup&quot;&gt;QAnimationGroup&lt;/a&gt; provides methods for adding and retrieving animations. Besides that, you can remove animations by calling &lt;a href=&quot;qanimationgroup#removeAnimation&quot;&gt;removeAnimation&lt;/a&gt;(), and clear the animation group by calling &lt;a href=&quot;qanimationgroup#clear&quot;&gt;clear&lt;/a&gt;(). You may keep track of changes in the group's animations by listening to &lt;a href=&quot;qevent#Type-enum&quot;&gt;QEvent::ChildAdded&lt;/a&gt; and &lt;a href=&quot;qevent#Type-enum&quot;&gt;QEvent::ChildRemoved&lt;/a&gt; events.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55301d56e9eaa3e74ec5477430eb2b94473bd642" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qanimationgroup&quot;&gt;QAnimationGroup&lt;/a&gt; takes ownership of the animations it manages, and ensures that they are deleted when the animation group is deleted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e705340dab2e663295935e389b161520f012ee74" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qanimationgroup&quot;&gt;QAnimationGroup&lt;/a&gt;, &lt;a href=&quot;qpauseanimation&quot;&gt;QPauseAnimation&lt;/a&gt;, and &lt;a href=&quot;qvariantanimation&quot;&gt;QVariantAnimation&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8fddfe2bcc64b02310eba111f440d3d6e40e8c8e" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qapplication&quot;&gt;QApplication&lt;/a&gt; provides this functionality as a slot.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d5805c2265565366a62f6aa6c79c73abc45ec73" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qapplication&quot;&gt;QApplication&lt;/a&gt; specializes &lt;a href=&quot;qguiapplication&quot;&gt;QGuiApplication&lt;/a&gt; with some functionality needed for &lt;a href=&quot;qwidget&quot;&gt;QWidget&lt;/a&gt;-based applications. It handles widget specific initialization, finalization.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8450e1fd48d7415025e9dcf4e87b8904183aace3" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qapplication&quot;&gt;QApplication&lt;/a&gt;'s main areas of responsibility are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a939e0faf8c2296b0d46e193309c86d7f434c20" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qapplication#allWidgets&quot;&gt;allWidgets&lt;/a&gt;(), &lt;a href=&quot;qapplication#topLevelWidgets&quot;&gt;topLevelWidgets&lt;/a&gt;(), &lt;a href=&quot;qapplication#desktop&quot;&gt;desktop&lt;/a&gt;(), &lt;a href=&quot;qapplication#activePopupWidget&quot;&gt;activePopupWidget&lt;/a&gt;(), &lt;a href=&quot;qapplication#activeModalWidget&quot;&gt;activeModalWidget&lt;/a&gt;(), &lt;a href=&quot;qguiapplication#clipboard&quot;&gt;clipboard&lt;/a&gt;(), &lt;a href=&quot;qapplication#focusWidget&quot;&gt;focusWidget&lt;/a&gt;(), &lt;a href=&quot;qapplication#activeWindow&quot;&gt;activeWindow&lt;/a&gt;(), &lt;a href=&quot;qapplication#widgetAt&quot;&gt;widgetAt&lt;/a&gt;().</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="847d0fd64fcb4abe6259514809f3acfe582667bb" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qapplication#closeAllWindows&quot;&gt;closeAllWindows&lt;/a&gt;(), &lt;a href=&quot;qcoreapplication#startingUp&quot;&gt;startingUp&lt;/a&gt;(), &lt;a href=&quot;qcoreapplication#closingDown&quot;&gt;closingDown&lt;/a&gt;().</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0a76ef2a2c1727ffe245b70bca5e551fe2cb527" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qapplication#exec&quot;&gt;exec&lt;/a&gt;(), &lt;a href=&quot;qcoreapplication#processEvents&quot;&gt;processEvents&lt;/a&gt;(), &lt;a href=&quot;qcoreapplication#exit&quot;&gt;exit&lt;/a&gt;(), &lt;a href=&quot;qcoreapplication#quit&quot;&gt;quit&lt;/a&gt;(). &lt;a href=&quot;qcoreapplication#sendEvent&quot;&gt;sendEvent&lt;/a&gt;(), &lt;a href=&quot;qcoreapplication#postEvent&quot;&gt;postEvent&lt;/a&gt;(), &lt;a href=&quot;qcoreapplication#sendPostedEvents&quot;&gt;sendPostedEvents&lt;/a&gt;(), &lt;a href=&quot;qcoreapplication#removePostedEvents&quot;&gt;removePostedEvents&lt;/a&gt;(), hasPendingEvents(), &lt;a href=&quot;qapplication#notify&quot;&gt;notify&lt;/a&gt;().</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="daf6dcdcd669cbd6b4ff904e96e74f4284ac4713" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qapplication#style&quot;&gt;style&lt;/a&gt;(), &lt;a href=&quot;qapplication#setStyle&quot;&gt;setStyle&lt;/a&gt;().</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64c67092c25b09dd93c80eec0559fd9a9e721d11" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qarealegendmarker&quot;&gt;QAreaLegendMarker&lt;/a&gt;, &lt;a href=&quot;qbarlegendmarker&quot;&gt;QBarLegendMarker&lt;/a&gt;, &lt;a href=&quot;qboxplotlegendmarker&quot;&gt;QBoxPlotLegendMarker&lt;/a&gt;, &lt;a href=&quot;qcandlesticklegendmarker&quot;&gt;QCandlestickLegendMarker&lt;/a&gt;, &lt;a href=&quot;qpielegendmarker&quot;&gt;QPieLegendMarker&lt;/a&gt;, and &lt;a href=&quot;qxylegendmarker&quot;&gt;QXYLegendMarker&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8491ceed52f216a48b33ea627d502440e67593c2" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qareaseries&quot;&gt;QAreaSeries&lt;/a&gt; supports the following format tags:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7174df74067b9a92bd59df10aaeb3b64390af0ff" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qassociativeiterable-const-iterator&quot;&gt;QAssociativeIterable::const_iterator&lt;/a&gt; QAssociativeIterable::begin() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb1f9bb2727d684bb7d49162240b9ea825ff606b" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qassociativeiterable-const-iterator&quot;&gt;QAssociativeIterable::const_iterator&lt;/a&gt; QAssociativeIterable::end() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="207fa66fb991dff49b358207eef820be0a1b87b5" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qassociativeiterable-const-iterator&quot;&gt;QAssociativeIterable::const_iterator&lt;/a&gt; QAssociativeIterable::find(const &lt;a href=&quot;qvariant&quot;&gt;QVariant&lt;/a&gt; &amp;amp;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9df5e7f6e3a0f4fe4c0bf862bdeba31e691859ef" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qatomicinteger&quot;&gt;QAtomicInteger&lt;/a&gt; provides several implementations of the atomic test-and-set, fetch-and-store, and fetch-and-add functions. Each implementation defines a memory ordering semantic that describes how memory accesses surrounding the atomic instruction are executed by the processor. Since many modern architectures allow out-of-order execution and memory ordering, using the correct semantic is necessary to ensure that your application functions properly on all processors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c642b2bb4795af8ec6b4e8f15687220489b7594" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qatomicinteger#memory-ordering&quot;&gt;memory ordering&lt;/a&gt; semantics, leaving the compiler and processor to freely reorder memory accesses.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c84deecc2dbce8ec5c8d9ef896054b4c586cd6f" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qatomicinteger#memory-ordering&quot;&gt;memory ordering&lt;/a&gt; semantics, which ensures that memory access before and after the atomic operation (in program order) may not be re-ordered.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6bed2414f1d3a13990f60ecb3d16c063fb51d962" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qatomicinteger#memory-ordering&quot;&gt;memory ordering&lt;/a&gt; semantics, which ensures that memory access before the atomic operation (in program order) may not be re-ordered after the atomic operation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8681129c7eba99b7fc8028c639449dfc9c047f7" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qatomicinteger#memory-ordering&quot;&gt;memory ordering&lt;/a&gt; semantics, which ensures that memory access following the atomic operation (in program order) may not be re-ordered before the atomic operation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e68cef097188df99d0647f5c889d3fb1b1b63fd5" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qatomicpointer&quot;&gt;QAtomicPointer&lt;/a&gt; provides several implementations of the atomic test-and-set, fetch-and-store, and fetch-and-add functions. Each implementation defines a memory ordering semantic that describes how memory accesses surrounding the atomic instruction are executed by the processor. Since many modern architectures allow out-of-order execution and memory ordering, using the correct semantic is necessary to ensure that your application functions properly on all processors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66731f6cbe4e616f3b74169cf445041377432a30" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qatomicpointer#QAtomicPointer&quot;&gt;QAtomicPointer&lt;/a&gt;&amp;lt;T&amp;gt; &amp;amp;QAtomicPointer::operator=(const &lt;a href=&quot;qatomicpointer#QAtomicPointer&quot;&gt;QAtomicPointer&lt;/a&gt;&amp;lt;T&amp;gt; &amp;amp;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e0297841d825654438304b682f31171eeecbece" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qatomicpointer#memory-ordering&quot;&gt;memory ordering&lt;/a&gt; semantics, leaving the compiler and processor to freely reorder memory accesses.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f34107f77662187a694b5986d5d75362fc1e8960" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qatomicpointer#memory-ordering&quot;&gt;memory ordering&lt;/a&gt; semantics, which ensures that memory access before and after the atomic operation (in program order) may not be re-ordered.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97d7d408b04cdab1b3f63e864862268b1e5252e9" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qatomicpointer#memory-ordering&quot;&gt;memory ordering&lt;/a&gt; semantics, which ensures that memory access before the atomic operation (in program order) may not be re-ordered after the atomic operation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b1145bad33c8e3161e0f581907fb8e5e665d433" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qatomicpointer#memory-ordering&quot;&gt;memory ordering&lt;/a&gt; semantics, which ensures that memory access following the atomic operation (in program order) may not be re-ordered before the atomic operation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="276f5e6d3418dd188368f419918caa5c98145e37" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qaudio#Error-enum&quot;&gt;QAudio::Error&lt;/a&gt; QAudioInput::error() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="109af5fc03d244705616dbd49560cd4787bd8f05" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qaudio#Error-enum&quot;&gt;QAudio::Error&lt;/a&gt; QAudioOutput::error() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="025b9dfd408e8f9c7a4cd5e2f17f66cb5e49ab74" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qaudio#State-enum&quot;&gt;QAudio::State&lt;/a&gt; QAudioInput::state() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ec04fe364c6ab7e91aba5ba2362555aadd594b7" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qaudio#State-enum&quot;&gt;QAudio::State&lt;/a&gt; QAudioOutput::state() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a7e2878aecfe13374fe43ce795eb57fa0b94ac0" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qaudiobuffer&quot;&gt;QAudioBuffer&lt;/a&gt; QAudioDecoder::read() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77736d1296de7928230612451dd62075e4e05492" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qaudiobuffer#QAudioBuffer&quot;&gt;QAudioBuffer&lt;/a&gt; &amp;amp;QAudioBuffer::operator=(const &lt;a href=&quot;qaudiobuffer#QAudioBuffer&quot;&gt;QAudioBuffer&lt;/a&gt; &amp;amp;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08f1f036c1a2e70bd1577a9ebab0cb5c6737ec03" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qaudiobuffer-stereoframe#StereoFrame&quot;&gt;StereoFrame&lt;/a&gt;&amp;lt;T&amp;gt; &amp;amp;StereoFrame::operator=(const &lt;a href=&quot;qaudiobuffer-stereoframe#StereoFrame&quot;&gt;StereoFrame&lt;/a&gt;&amp;lt;T&amp;gt; &amp;amp;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61f86eed560704fb2fa5396b1afe7df0d32e40d1" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qaudiodecoder&quot;&gt;QAudioDecoder&lt;/a&gt;, &lt;a href=&quot;qcamera&quot;&gt;QCamera&lt;/a&gt;, &lt;a href=&quot;qmediaplayer&quot;&gt;QMediaPlayer&lt;/a&gt;, and &lt;a href=&quot;qradiotuner&quot;&gt;QRadioTuner&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7d8d4b6d8d305af4d9936994b9642ed60e2f02b" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qaudiodecoder#Error-enum&quot;&gt;QAudioDecoder::Error&lt;/a&gt; QAudioDecoder::error() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78cd4987bc2cf4f12b7e8f92956bc6e6aa4e6d7a" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qaudiodecodercontrol&quot;&gt;QAudioDecoderControl&lt;/a&gt;, &lt;a href=&quot;qaudioencodersettingscontrol&quot;&gt;QAudioEncoderSettingsControl&lt;/a&gt;, &lt;a href=&quot;qaudioinputselectorcontrol&quot;&gt;QAudioInputSelectorControl&lt;/a&gt;, &lt;a href=&quot;qaudiooutputselectorcontrol&quot;&gt;QAudioOutputSelectorControl&lt;/a&gt;, &lt;a href=&quot;qaudiorolecontrol&quot;&gt;QAudioRoleControl&lt;/a&gt;, &lt;a href=&quot;qcameracapturebufferformatcontrol&quot;&gt;QCameraCaptureBufferFormatControl&lt;/a&gt;, &lt;a href=&quot;qcameracapturedestinationcontrol&quot;&gt;QCameraCaptureDestinationControl&lt;/a&gt;, &lt;a href=&quot;qcameracontrol&quot;&gt;QCameraControl&lt;/a&gt;, &lt;a href=&quot;qcameraexposurecontrol&quot;&gt;QCameraExposureControl&lt;/a&gt;, &lt;a href=&quot;qcamerafeedbackcontrol&quot;&gt;QCameraFeedbackControl&lt;/a&gt;, &lt;a href=&quot;qcameraflashcontrol&quot;&gt;QCameraFlashControl&lt;/a&gt;, &lt;a href=&quot;qcamerafocuscontrol&quot;&gt;QCameraFocusControl&lt;/a&gt;, &lt;a href=&quot;qcameraimagecapturecontrol&quot;&gt;QCameraImageCaptureControl&lt;/a&gt;, &lt;a href=&quot;qcameraimageprocessingcontrol&quot;&gt;QCameraImageProcessingControl&lt;/a&gt;, &lt;a href=&quot;qcamerainfocontrol&quot;&gt;QCameraInfoControl&lt;/a&gt;, &lt;a href=&quot;qcameralockscontrol&quot;&gt;QCameraLocksControl&lt;/a&gt;, &lt;a href=&quot;qcameraviewfindersettingscontrol&quot;&gt;QCameraViewfinderSettingsControl&lt;/a&gt;, &lt;a href=&quot;qcameraviewfindersettingscontrol2&quot;&gt;QCameraViewfinderSettingsControl2&lt;/a&gt;, &lt;a href=&quot;qcamerazoomcontrol&quot;&gt;QCameraZoomControl&lt;/a&gt;, &lt;a href=&quot;qcustomaudiorolecontrol&quot;&gt;QCustomAudioRoleControl&lt;/a&gt;, &lt;a href=&quot;qimageencodercontrol&quot;&gt;QImageEncoderControl&lt;/a&gt;, &lt;a href=&quot;qmediaaudioprobecontrol&quot;&gt;QMediaAudioProbeControl&lt;/a&gt;, &lt;a href=&quot;qmediaavailabilitycontrol&quot;&gt;QMediaAvailabilityControl&lt;/a&gt;, &lt;a href=&quot;qmediacontainercontrol&quot;&gt;QMediaContainerControl&lt;/a&gt;, &lt;a href=&quot;qmediagaplessplaybackcontrol&quot;&gt;QMediaGaplessPlaybackControl&lt;/a&gt;, &lt;a href=&quot;qmedianetworkaccesscontrol&quot;&gt;QMediaNetworkAccessControl&lt;/a&gt;, &lt;a href=&quot;qmediaplayercontrol&quot;&gt;QMediaPlayerControl&lt;/a&gt;, &lt;a href=&quot;qmediarecordercontrol&quot;&gt;QMediaRecorderControl&lt;/a&gt;, &lt;a href=&quot;qmediastreamscontrol&quot;&gt;QMediaStreamsControl&lt;/a&gt;, &lt;a href=&quot;qmediavideoprobecontrol&quot;&gt;QMediaVideoProbeControl&lt;/a&gt;, &lt;a href=&quot;qmetadatareadercontrol&quot;&gt;QMetaDataReaderControl&lt;/a&gt;, &lt;a href=&quot;qmetadatawritercontrol&quot;&gt;QMetaDataWriterControl&lt;/a&gt;, &lt;a href=&quot;qradiodatacontrol&quot;&gt;QRadioDataControl&lt;/a&gt;, &lt;a href=&quot;qradiotunercontrol&quot;&gt;QRadioTunerControl&lt;/a&gt;, &lt;a href=&quot;qvideodeviceselectorcontrol&quot;&gt;QVideoDeviceSelectorControl&lt;/a&gt;, &lt;a href=&quot;qvideoencodersettingscontrol&quot;&gt;QVideoEncoderSettingsControl&lt;/a&gt;, &lt;a href=&quot;qvideorenderercontrol&quot;&gt;QVideoRendererControl&lt;/a&gt;, &lt;a href=&quot;qvideowidgetcontrol&quot;&gt;QVideoWidgetControl&lt;/a&gt;, and &lt;a href=&quot;qvideowindowcontrol&quot;&gt;QVideoWindowControl&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c23cee799c79dc3b07c505460773bd32f9ffa9f4" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qaudiodeviceinfo&quot;&gt;QAudioDeviceInfo&lt;/a&gt; lets you query for audio devices--such as sound cards and USB headsets--that are currently available on the system. The audio devices available are dependent on the platform or audio plugins installed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="828266d67b9127ba7bfe69f47a2b50f3b461b1ef" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qaudiodeviceinfo#QAudioDeviceInfo&quot;&gt;QAudioDeviceInfo&lt;/a&gt; &amp;amp;QAudioDeviceInfo::operator=(const &lt;a href=&quot;qaudiodeviceinfo#QAudioDeviceInfo&quot;&gt;QAudioDeviceInfo&lt;/a&gt; &amp;amp;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8cf041d1a7d0b92618dfa69ac019845ec86d039" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qaudiodeviceinfo#availableDevices&quot;&gt;QAudioDeviceInfo::availableDevices&lt;/a&gt;(&lt;a href=&quot;qaudio#Mode-enum&quot;&gt;QAudio::AudioOutput&lt;/a&gt;).size() = 0 (dummy backend)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ecbea4ba947843964c4fd82d48c3b52d527fe8c" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qaudioencodersettings&quot;&gt;QAudioEncoderSettings&lt;/a&gt; QMediaRecorder::audioSettings() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2b0f458e5363c99957b1b42872087f63b2e63a1" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qaudioencodersettings#QAudioEncoderSettings&quot;&gt;QAudioEncoderSettings&lt;/a&gt; &amp;amp;QAudioEncoderSettings::operator=(const &lt;a href=&quot;qaudioencodersettings#QAudioEncoderSettings&quot;&gt;QAudioEncoderSettings&lt;/a&gt; &amp;amp;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20f55fb9758e2e3dcfe1335bd170f2aa60b1915d" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qaudioformat&quot;&gt;QAudioFormat&lt;/a&gt; QAudioBuffer::format() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2bdec7a4f3b0fd2a4e1dba3eaebe562e3913f6d" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qaudioformat&quot;&gt;QAudioFormat&lt;/a&gt; QAudioDecoder::audioFormat() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b6877a6cf44bce53de518b8105007c937ef29be" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qaudioformat&quot;&gt;QAudioFormat&lt;/a&gt; QAudioDeviceInfo::nearestFormat(const &lt;a href=&quot;qaudioformat&quot;&gt;QAudioFormat&lt;/a&gt; &amp;amp;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99b65af8d83e4974327e0ae8be9c184454f340aa" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qaudioformat&quot;&gt;QAudioFormat&lt;/a&gt; QAudioDeviceInfo::preferredFormat() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2253b4ce0eb190c79b6c451c6f8fe35fe8a82b9b" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qaudioformat&quot;&gt;QAudioFormat&lt;/a&gt; QAudioInput::format() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ef57edae6c143eac342dd23cb79ff68dec03e0f" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qaudioformat&quot;&gt;QAudioFormat&lt;/a&gt; QAudioOutput::format() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dcf3af2dd411d820d4c948c62f9f5314f53f936b" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qaudioformat&quot;&gt;QAudioFormat&lt;/a&gt;; otherwise returns false.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9a573343c474c3d5e22f30a5538f9d80cd2f236" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qaudioformat#Endian-enum&quot;&gt;QAudioFormat::Endian&lt;/a&gt; QAudioFormat::byteOrder() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f013fb6b3d2d584b963778c0fab8bedc694b358" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qaudioformat#QAudioFormat&quot;&gt;QAudioFormat&lt;/a&gt; &amp;amp;QAudioFormat::operator=(const &lt;a href=&quot;qaudioformat#QAudioFormat&quot;&gt;QAudioFormat&lt;/a&gt; &amp;amp;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec65960b367e0d32f5fd64250147ddfdbf4fb93d" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qaudioformat#SampleType-enum&quot;&gt;QAudioFormat::SampleType&lt;/a&gt; QAudioFormat::sampleType() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca533f3c486df011a8442092c7bbdb6f54c8086e" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qaudioformat#byteOrder&quot;&gt;byteOrder&lt;/a&gt;() = &lt;a href=&quot;qaudioformat#Endian-enum&quot;&gt;QAudioFormat::Endian&lt;/a&gt;(&lt;a href=&quot;qsysinfo#Endian-enum&quot;&gt;QSysInfo::ByteOrder&lt;/a&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e766aee35fb0112e39aae6b85496df300da9d47" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qaudioformat#channelCount&quot;&gt;channelCount&lt;/a&gt;() = -1</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c16336f0e2d62c078d984f479da65a0732cc1dc" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qaudioformat#sampleRate&quot;&gt;sampleRate&lt;/a&gt;() = -1</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4d77b59aa8c041155bb932d8e4a0208655b7959" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qaudioformat#sampleSize&quot;&gt;sampleSize&lt;/a&gt;() = -1</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82de70b9a634a18339d2de0d6b7b0f584431738d" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qaudioformat#sampleType&quot;&gt;sampleType&lt;/a&gt;() = &lt;a href=&quot;qaudioformat#SampleType-enum&quot;&gt;QAudioFormat::Unknown&lt;/a&gt;&lt;code&gt;codec()&lt;/code&gt; = &quot;&quot;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3933cf313af272867ef50f2d97f9ebc8f5a135ac" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qaudioinput&quot;&gt;QAudioInput&lt;/a&gt; lets you record audio with an audio input device. The default constructor of this class will use the systems default audio device, but you can also specify a &lt;a href=&quot;qaudiodeviceinfo&quot;&gt;QAudioDeviceInfo&lt;/a&gt; for a specific device. You also need to pass in the &lt;a href=&quot;qaudioformat&quot;&gt;QAudioFormat&lt;/a&gt; in which you wish to record.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0aa1df3e7f2a49ddd428b5d891dc9548c89d8611" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qaudioinput&quot;&gt;QAudioInput&lt;/a&gt; provides several ways of measuring the time that has passed since the &lt;a href=&quot;qaudioinput#start-1&quot;&gt;start&lt;/a&gt;() of the recording. The &lt;code&gt;processedUSecs()&lt;/code&gt; function returns the length of the stream in microseconds written, i.e., it leaves out the times the audio input was suspended or idle. The &lt;a href=&quot;qaudioinput#elapsedUSecs&quot;&gt;elapsedUSecs&lt;/a&gt;() function returns the time elapsed since &lt;a href=&quot;qaudioinput#start-1&quot;&gt;start&lt;/a&gt;() was called regardless of which states the &lt;a href=&quot;qaudioinput&quot;&gt;QAudioInput&lt;/a&gt; has been in.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0160170c22e9a5f4fe9243c34225c0d98e262166" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qaudioprobe&quot;&gt;QAudioProbe&lt;/a&gt; is the client facing class for probing audio - this class is implemented by media backends to provide this functionality.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3994d6c7336d2f701894d5af1607a63b184bf50d" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qauthenticator&quot;&gt;QAuthenticator&lt;/a&gt; supports the following authentication methods:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="abc626f64704bc51d7fcd39a8498a990a9c59b31" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qauthenticator#QAuthenticator&quot;&gt;QAuthenticator&lt;/a&gt; &amp;amp;QAuthenticator::operator=(const &lt;a href=&quot;qauthenticator#QAuthenticator&quot;&gt;QAuthenticator&lt;/a&gt; &amp;amp;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4a64f2d89d52ca70bc0b9c948c724bdabcfdf12" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qaxaggregated&quot;&gt;QAxAggregated&lt;/a&gt; can be subclassed to implement additional COM interfaces.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6bbfdb955650985130c0e91c306770b8dceb55ba" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qaxbase&quot;&gt;QAxBase&lt;/a&gt; is an abstract class that cannot be used directly, and is instantiated through the subclasses &lt;a href=&quot;qaxobject&quot;&gt;QAxObject&lt;/a&gt; and &lt;a href=&quot;qaxwidget&quot;&gt;QAxWidget&lt;/a&gt;. This class provides the API to access the COM object directly through its IUnknown implementation. If the COM object implements the IDispatch interface, the properties and methods of that object become available as Qt properties and slots.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c9e00de1f370d4a545da11e2cccdf1c21e73004" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qaxbase&quot;&gt;QAxBase&lt;/a&gt; is an abstract class that provides an API to initialize and access a COM object or ActiveX control.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd75cbdf400cdd4babd8ff474292b1154c773ff2" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qaxbase&quot;&gt;QAxBase&lt;/a&gt; transparently converts between COM data types and the equivalent Qt data types. Some COM types have no equivalent Qt data structure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07f6d3131d0d4788b054a78375c30cbe553ba533" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qaxbase#PropertyBag-typedef&quot;&gt;QAxBase::PropertyBag&lt;/a&gt; QAxBase::propertyBag() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d13f537a13a67885375f029d1ad782dec2734db" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qaxbindable&quot;&gt;QAxBindable&lt;/a&gt; provides an interface between the Qt widget and the COM object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa5add0abc2ede837f3f3ce8751d4cfea57f6f77" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qaxfactory&quot;&gt;QAxFactory&lt;/a&gt; defines a factory for the creation of COM objects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75b35af3f922a500181190a2f7acbd9dcd817661" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qaxobject&quot;&gt;QAxObject&lt;/a&gt; *QAxBase::querySubObject(const char *</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6499a5a16f75e051b7ac9dba7ac287abc51c5f4d" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qaxobject&quot;&gt;QAxObject&lt;/a&gt; also inherits most of its ActiveX-related functionality from &lt;a href=&quot;qaxbase&quot;&gt;QAxBase&lt;/a&gt;, notably &lt;a href=&quot;qaxbase#dynamicCall&quot;&gt;dynamicCall&lt;/a&gt;() and &lt;a href=&quot;qaxbase#querySubObject&quot;&gt;querySubObject&lt;/a&gt;().</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6fc4c0612680f1f13cf16194b3e30a23e655ad60" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qaxobject&quot;&gt;QAxObject&lt;/a&gt; and &lt;a href=&quot;qaxwidget&quot;&gt;QAxWidget&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9845e7fcc524a7ff60d964da4d0e95c066e1a1fd" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qaxobject&quot;&gt;QAxObject&lt;/a&gt; is a &lt;a href=&quot;qobject&quot;&gt;QObject&lt;/a&gt; and can be used as such, e.g. it can be organized in an object hierarchy, receive events and connect to signals and slots.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8351a07abcec8099f1c8a2ef3c209dfe59eb927c" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qaxobject&quot;&gt;QAxObject&lt;/a&gt; provides a &lt;a href=&quot;qobject&quot;&gt;QObject&lt;/a&gt; that wraps a COM object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00c4622378eaee07dfe9647cc469d33429a4563e" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qaxobject&quot;&gt;QAxObject&lt;/a&gt;*</source>
          <target state="translated">&lt;a href=&quot;qaxobject&quot;&gt;QAxObject&lt;/a&gt;*</target>
        </trans-unit>
        <trans-unit id="96dd4b291e15fd0f89aefe6759239ec074b6db0c" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qaxobject&quot;&gt;QAxObject&lt;/a&gt;* (return value)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b554db2675dd9b0b0220b54cea496af08823aecc" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qaxscript&quot;&gt;QAxScript&lt;/a&gt; *QAxScriptManager::load(const &lt;a href=&quot;qstring&quot;&gt;QString&lt;/a&gt; &amp;amp;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0fed29330f0026802b93a8dd5659f620151f8ab" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qaxscript&quot;&gt;QAxScript&lt;/a&gt; *QAxScriptManager::script(const &lt;a href=&quot;qstring&quot;&gt;QString&lt;/a&gt; &amp;amp;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96873b62daf87c70760965b58814323ef41e38cf" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qaxscriptengine&quot;&gt;QAxScriptEngine&lt;/a&gt; *QAxScript::scriptEngine() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5819a9786bf0ee011d214468e9f93d400ef46c4" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qaxscriptengine#State-enum&quot;&gt;QAxScriptEngine::State&lt;/a&gt; QAxScriptEngine::state() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="808e0178d60a2f5b417b03ca712265af7e000714" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qaxscriptmanager&quot;&gt;QAxScriptManager&lt;/a&gt;, &lt;a href=&quot;qaxscript&quot;&gt;QAxScript&lt;/a&gt; and &lt;a href=&quot;qaxscriptengine&quot;&gt;QAxScriptEngine&lt;/a&gt; provide an interface to the Windows Script Host.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f052125a2d959f6426094c1fcb2114cbaf93c767" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qaxselect&quot;&gt;QAxSelect&lt;/a&gt; dialog can be used to provide users with a way to browse the registered COM components of the system and select one. It also provides a combo box for selecting desired sandboxing level. The CLSID of the selected component can then be used in the application to e.g. initialize a &lt;a href=&quot;qaxwidget&quot;&gt;QAxWidget&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e35c3c81d2776592c4c76cc16c68960e0d3ea0e5" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qaxselect#SandboxingLevel-enum&quot;&gt;QAxSelect::SandboxingLevel&lt;/a&gt; QAxSelect::sandboxingLevel() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4053a41c3f038a4c107888ec764b7643026d5a0" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qaxwidget&quot;&gt;QAxWidget&lt;/a&gt; also inherits most of its ActiveX-related functionality from &lt;a href=&quot;qaxbase&quot;&gt;QAxBase&lt;/a&gt;, notably &lt;a href=&quot;qaxbase#dynamicCall&quot;&gt;dynamicCall&lt;/a&gt;() and &lt;a href=&quot;qaxbase#querySubObject&quot;&gt;querySubObject&lt;/a&gt;().</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f80adf012ccb822a448b26c5d97a8d32aebb294a" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qaxwidget&quot;&gt;QAxWidget&lt;/a&gt; is a &lt;a href=&quot;qwidget&quot;&gt;QWidget&lt;/a&gt; and can mostly be used as such, e.g. it can be organized in a widget hierarchy and layouts or act as an event filter. Standard widget properties, e.g. &lt;a href=&quot;qwidget#enabled-prop&quot;&gt;enabled&lt;/a&gt; are supported, but it depends on the ActiveX control to implement support for ambient properties like e.g. palette or font. &lt;a href=&quot;qaxwidget&quot;&gt;QAxWidget&lt;/a&gt; tries to provide the necessary hints.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04aae60ec3a62675c97cf1d0f522fb97b859b1e6" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qaxwidget&quot;&gt;QAxWidget&lt;/a&gt; is a &lt;a href=&quot;qwidget&quot;&gt;QWidget&lt;/a&gt; that wraps an ActiveX control.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb8851db8fff9a4de355a46747a3e2ed502d2d33" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbackingstore&quot;&gt;QBackingStore&lt;/a&gt; *QWidget::backingStore() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0fd98416bd49b6901cc201157da9160b8506051b" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbackingstore&quot;&gt;QBackingStore&lt;/a&gt; enables the use of &lt;a href=&quot;qpainter&quot;&gt;QPainter&lt;/a&gt; to paint on a &lt;a href=&quot;qwindow&quot;&gt;QWindow&lt;/a&gt; with type RasterSurface. The other way of rendering to a &lt;a href=&quot;qwindow&quot;&gt;QWindow&lt;/a&gt; is through the use of OpenGL with &lt;a href=&quot;qopenglcontext&quot;&gt;QOpenGLContext&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="944dafdece671d320d479191dfa65b6b8f0269e2" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbackingstore&quot;&gt;QBackingStore&lt;/a&gt; might be used by an application that wants to use &lt;a href=&quot;qpainter&quot;&gt;QPainter&lt;/a&gt; without OpenGL acceleration and without the extra overhead of using the &lt;a href=&quot;qwidget&quot;&gt;QWidget&lt;/a&gt; or &lt;a href=&quot;qgraphicsview&quot;&gt;QGraphicsView&lt;/a&gt; UI stacks. For an example of how to use &lt;a href=&quot;qbackingstore&quot;&gt;QBackingStore&lt;/a&gt; see the &lt;a href=&quot;https://doc.qt.io/qt-5.13/qtgui-rasterwindow-example.html#&quot;&gt;Raster Window Example&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4be1594379168ef95dbc7ee40f5e562f06416c3a" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbar3dseries&quot;&gt;QBar3DSeries&lt;/a&gt; supports the following format tags for &lt;a href=&quot;qabstract3dseries#itemLabelFormat-prop&quot;&gt;QAbstract3DSeries::setItemLabelFormat&lt;/a&gt;():</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9fec151ab862a0976599606c3815df57242472c7" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbar3dseries&quot;&gt;QBar3DSeries&lt;/a&gt;, &lt;a href=&quot;qscatter3dseries&quot;&gt;QScatter3DSeries&lt;/a&gt;, and &lt;a href=&quot;qsurface3dseries&quot;&gt;QSurface3DSeries&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87358932c3fff7aacc7121cf38dfff0d18347b68" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbarcategoryaxis&quot;&gt;QBarCategoryAxis&lt;/a&gt; can be set up to show an axis line with tick marks, grid lines, and shades. Categories are drawn between the ticks. It can be used also with a line series, as demonstrated by the &lt;a href=&quot;https://doc.qt.io/qt-5.13/qtcharts-lineandbar-example.html#&quot;&gt;Line and BarChart Example&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce9a57d2a9297867eb97823483202fdcf4adb472" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbarcategoryaxis&quot;&gt;QBarCategoryAxis&lt;/a&gt;, &lt;a href=&quot;qdatetimeaxis&quot;&gt;QDateTimeAxis&lt;/a&gt;, &lt;a href=&quot;qlogvalueaxis&quot;&gt;QLogValueAxis&lt;/a&gt;, and &lt;a href=&quot;qvalueaxis&quot;&gt;QValueAxis&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e63cb9e894744efadd2459359c3cf9e38cd0ceb" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbardataitem#QBarDataItem&quot;&gt;QBarDataItem&lt;/a&gt; &amp;amp;QBarDataItem::operator=(const &lt;a href=&quot;qbardataitem#QBarDataItem&quot;&gt;QBarDataItem&lt;/a&gt; &amp;amp;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e0aa1dfba29bcc4aad35f57f95dfa97e19b8d96" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbardataproxy&quot;&gt;QBarDataProxy&lt;/a&gt; optionally keeps track of row and column labels, which &lt;a href=&quot;qcategory3daxis&quot;&gt;QCategory3DAxis&lt;/a&gt; can utilize to show axis labels. The row and column labels are stored in a separate array from the data and row manipulation methods provide alternate versions that do not affect the row labels. This enables the option of having row labels that relate to the position of the data in the array rather than the data itself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40bbd349a065e2b2b7a2d4ae212560e5c86dac27" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbardataproxy&quot;&gt;QBarDataProxy&lt;/a&gt; takes ownership of all QtDataVisualization::QBarDataRow objects passed to it, whether directly or in a QtDataVisualization::QBarDataArray container. If bar data row pointers are used to directly modify data after adding the array to the proxy, the appropriate signal must be emitted to update the graph.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="834190045d586ffe9986d9ee8433c45512c16a53" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbardataproxy&quot;&gt;QBarDataProxy&lt;/a&gt;, &lt;a href=&quot;qscatterdataproxy&quot;&gt;QScatterDataProxy&lt;/a&gt;, and &lt;a href=&quot;qsurfacedataproxy&quot;&gt;QSurfaceDataProxy&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="115325fad0a9cc718a786e5c9d605a6e282b1faa" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbarseries&quot;&gt;QBarSeries&lt;/a&gt;, &lt;a href=&quot;qhorizontalbarseries&quot;&gt;QHorizontalBarSeries&lt;/a&gt;, &lt;a href=&quot;qhorizontalpercentbarseries&quot;&gt;QHorizontalPercentBarSeries&lt;/a&gt;, &lt;a href=&quot;qhorizontalstackedbarseries&quot;&gt;QHorizontalStackedBarSeries&lt;/a&gt;, &lt;a href=&quot;qpercentbarseries&quot;&gt;QPercentBarSeries&lt;/a&gt;, and &lt;a href=&quot;qstackedbarseries&quot;&gt;QStackedBarSeries&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0fedeb99e287f017d477a57c4006bdc656cbc5a2" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbarset&quot;&gt;QBarSet&lt;/a&gt; *QBarLegendMarker::barset()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="afacbae7a1cc6269401d7ded5afc70e78f9e6cdb" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbarset#QBarSet&quot;&gt;QBarSet&lt;/a&gt; &amp;amp;QBarSet::operator&amp;lt;&amp;lt;(const &lt;a href=&quot;#qreal-typedef&quot;&gt;qreal&lt;/a&gt; &amp;amp;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93104dde7808748c8b449d3282683c219c26851d" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbeinteger#QBEInteger&quot;&gt;QBEInteger&lt;/a&gt;&amp;lt;T&amp;gt; &amp;amp;QBEInteger::operator%=(T</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98c0f8f67f349dbf10ccb6289a17eff3d597bcec" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbeinteger#QBEInteger&quot;&gt;QBEInteger&lt;/a&gt;&amp;lt;T&amp;gt; &amp;amp;QBEInteger::operator&amp;amp;=(T</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b8f5b804fb66a0ffba06b81fbc3c7bd4367eceb" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbeinteger#QBEInteger&quot;&gt;QBEInteger&lt;/a&gt;&amp;lt;T&amp;gt; &amp;amp;QBEInteger::operator&amp;gt;&amp;gt;=(T</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e22b966bc0c35d19bfec47ecbdc4e849150e933" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbeinteger#QBEInteger&quot;&gt;QBEInteger&lt;/a&gt;&amp;lt;T&amp;gt; &amp;amp;QBEInteger::operator&amp;lt;&amp;lt;=(T</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd703548c99bdfaef7763c1b7510c1c7f1b6ddc3" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbeinteger#QBEInteger&quot;&gt;QBEInteger&lt;/a&gt;&amp;lt;T&amp;gt; &amp;amp;QBEInteger::operator*=(T</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9fc07a110ff3f975639d8015b48478707a021582" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbeinteger#QBEInteger&quot;&gt;QBEInteger&lt;/a&gt;&amp;lt;T&amp;gt; &amp;amp;QBEInteger::operator++(</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db9649e1299658925af6f4a003e9c958747b4104" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbeinteger#QBEInteger&quot;&gt;QBEInteger&lt;/a&gt;&amp;lt;T&amp;gt; &amp;amp;QBEInteger::operator++()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7660e814b38f849af7a7d96cdceeae1f8797bf8" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbeinteger#QBEInteger&quot;&gt;QBEInteger&lt;/a&gt;&amp;lt;T&amp;gt; &amp;amp;QBEInteger::operator+=(T</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45e4f06bbab58a8e47c2a98b0d56deba33ca7652" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbeinteger#QBEInteger&quot;&gt;QBEInteger&lt;/a&gt;&amp;lt;T&amp;gt; &amp;amp;QBEInteger::operator--(</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a214580668e5174b7364a9a39c3c286849efd323" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbeinteger#QBEInteger&quot;&gt;QBEInteger&lt;/a&gt;&amp;lt;T&amp;gt; &amp;amp;QBEInteger::operator--()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="021be692a91ac4ff1dc7dbd185d04d9f104d2437" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbeinteger#QBEInteger&quot;&gt;QBEInteger&lt;/a&gt;&amp;lt;T&amp;gt; &amp;amp;QBEInteger::operator-=(T</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6862d8d0a43f9133d75a9a7c79444a83e3d5ea3" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbeinteger#QBEInteger&quot;&gt;QBEInteger&lt;/a&gt;&amp;lt;T&amp;gt; &amp;amp;QBEInteger::operator/=(T</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01ec7695711c545633c553a282411df5b3bac28c" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbeinteger#QBEInteger&quot;&gt;QBEInteger&lt;/a&gt;&amp;lt;T&amp;gt; &amp;amp;QBEInteger::operator=(T</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="886272d301b389cb59dde96bc390dfc09b22a5b7" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbeinteger#QBEInteger&quot;&gt;QBEInteger&lt;/a&gt;&amp;lt;T&amp;gt; &amp;amp;QBEInteger::operator^=(T</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69f6d91affdc0d99ec88254b1ad1a66b20018f77" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbeinteger#QBEInteger&quot;&gt;QBEInteger&lt;/a&gt;&amp;lt;T&amp;gt; &amp;amp;QBEInteger::operator|=(T</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85e805f6af5b3ace78af850649fb4454c2643878" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbitarray&quot;&gt;QBitArray&lt;/a&gt; QVariant::toBitArray() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="614a5f5e34a2ea94cc2465ec6eeecd0209a43a2e" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbitarray&quot;&gt;QBitArray&lt;/a&gt; supports &lt;code&gt;&amp;amp;&lt;/code&gt; (&lt;a href=&quot;qbitarray#operator-and&quot;&gt;AND&lt;/a&gt;), &lt;code&gt;|&lt;/code&gt; (&lt;a href=&quot;qbitarray#operator-7c&quot;&gt;OR&lt;/a&gt;), &lt;code&gt;^&lt;/code&gt; (&lt;a href=&quot;qbitarray#operator-5e&quot;&gt;XOR&lt;/a&gt;), &lt;code&gt;~&lt;/code&gt; (&lt;a href=&quot;qbitarray#operator-7e&quot;&gt;NOT&lt;/a&gt;), as well as &lt;code&gt;&amp;amp;=&lt;/code&gt;, &lt;code&gt;|=&lt;/code&gt;, and &lt;code&gt;^=&lt;/code&gt;. These operators work in the same way as the built-in C++ bitwise operators of the same name. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c839c279e79e1b43e97e7b6ce3e08cd991048de" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbitarray&quot;&gt;QBitArray&lt;/a&gt; uses 0-based indexes, just like C++ arrays. To access the bit at a particular index position, you can use operator[](). On non-const bit arrays, operator[]() returns a reference to a bit that can be used on the left side of an assignment. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e724e2865741239d11ada1c85025e79772c913f5" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbitarray#QBitArray&quot;&gt;QBitArray&lt;/a&gt; &amp;amp;QBitArray::operator&amp;amp;=(const &lt;a href=&quot;qbitarray#QBitArray&quot;&gt;QBitArray&lt;/a&gt; &amp;amp;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dadfcb27345754e9eb55ae8f84f1745bc25d0295" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbitarray#QBitArray&quot;&gt;QBitArray&lt;/a&gt; &amp;amp;QBitArray::operator=(&lt;a href=&quot;qbitarray#QBitArray&quot;&gt;QBitArray&lt;/a&gt; &amp;amp;&amp;amp;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89a63349f62aaa5dd2e85280758c049b2079d3a4" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbitarray#QBitArray&quot;&gt;QBitArray&lt;/a&gt; &amp;amp;QBitArray::operator=(const &lt;a href=&quot;qbitarray#QBitArray&quot;&gt;QBitArray&lt;/a&gt; &amp;amp;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="518824c287292cc947f53e607e5b4dc6aeecc980" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbitarray#QBitArray&quot;&gt;QBitArray&lt;/a&gt; &amp;amp;QBitArray::operator^=(const &lt;a href=&quot;qbitarray#QBitArray&quot;&gt;QBitArray&lt;/a&gt; &amp;amp;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9bba072d0e564e988bad63baa26d6b980ab09d8e" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbitarray#QBitArray&quot;&gt;QBitArray&lt;/a&gt; &amp;amp;QBitArray::operator|=(const &lt;a href=&quot;qbitarray#QBitArray&quot;&gt;QBitArray&lt;/a&gt; &amp;amp;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7c00384eca3022348b478a132eba8a4a46e56ba" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbitarray#QBitArray&quot;&gt;QBitArray&lt;/a&gt; QBitArray::operator&amp;amp;(const &lt;a href=&quot;qbitarray#QBitArray&quot;&gt;QBitArray&lt;/a&gt; &amp;amp;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e04c1c5f06bb92169070384f226512d567a2dc67" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbitarray#QBitArray&quot;&gt;QBitArray&lt;/a&gt; QBitArray::operator^(const &lt;a href=&quot;qbitarray#QBitArray&quot;&gt;QBitArray&lt;/a&gt; &amp;amp;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="200efefb2d41b0423c2937a6e9a44a94c1c8a5a6" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbitarray#QBitArray&quot;&gt;QBitArray&lt;/a&gt; QBitArray::operator|(const &lt;a href=&quot;qbitarray#QBitArray&quot;&gt;QBitArray&lt;/a&gt; &amp;amp;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="386d5e7a77a02dd4cb9d59c01628d717195a450a" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbitarray#QBitArray&quot;&gt;QBitArray&lt;/a&gt; QBitArray::operator~() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="197ef87d816422ad23fa38479a108726b2e9eab1" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbitmap&quot;&gt;QBitmap&lt;/a&gt; QPixmap::createHeuristicMask(bool</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="476b636778f77483889b70cecb7d3b63b3714bb1" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbitmap&quot;&gt;QBitmap&lt;/a&gt; QPixmap::createMaskFromColor(const &lt;a href=&quot;qcolor&quot;&gt;QColor&lt;/a&gt; &amp;amp;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cff1feb3b172d4622684c7028781290afa120c04" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbitmap&quot;&gt;QBitmap&lt;/a&gt; QPixmap::mask() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52e3970c74764029db676b19d515e865f105ca09" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbitmap&quot;&gt;QBitmap&lt;/a&gt; is a &lt;a href=&quot;qpixmap&quot;&gt;QPixmap&lt;/a&gt; subclass ensuring a depth of 1, except for null objects which have a depth of 0. If a pixmap with a depth greater than 1 is assigned to a bitmap, the bitmap will be dithered automatically.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1e699da562dcb8cde18153c968f5a061ea0972b" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbitmap#QBitmap&quot;&gt;QBitmap&lt;/a&gt; &amp;amp;QBitmap::operator=(const &lt;a href=&quot;qpixmap#QPixmap&quot;&gt;QPixmap&lt;/a&gt; &amp;amp;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1fa7a365f00094d71ffda5d5ce4473d7604800a" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbitmap#QBitmap&quot;&gt;QBitmap&lt;/a&gt; QBitmap::transformed(const &lt;a href=&quot;qtransform&quot;&gt;QTransform&lt;/a&gt; &amp;amp;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="522becbb61ebed59307b6fb5faa9feae3d88d507" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbluetooth#AttAccessConstraint-enum&quot;&gt;QBluetooth::AttAccessConstraints&lt;/a&gt; QLowEnergyCharacteristicData::readConstraints() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d25035e7073f62ed9b272d92882e643377af364" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbluetooth#AttAccessConstraint-enum&quot;&gt;QBluetooth::AttAccessConstraints&lt;/a&gt; QLowEnergyCharacteristicData::writeConstraints() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2bf957a6b78a54b1a1d65ccd708a708b9bad1c23" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbluetooth#AttAccessConstraint-enum&quot;&gt;QBluetooth::AttAccessConstraints&lt;/a&gt; QLowEnergyDescriptorData::readConstraints() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5f1f8bdef1ac353686a828509200b12f004ecb6" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbluetooth#AttAccessConstraint-enum&quot;&gt;QBluetooth::AttAccessConstraints&lt;/a&gt; QLowEnergyDescriptorData::writeConstraints() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="409ba32c9a33721b257572e109246d302d625fe1" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbluetooth#QLowEnergyHandle-typedef&quot;&gt;QLowEnergyHandle&lt;/a&gt; QLowEnergyCharacteristic::handle() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab37b0bf5b639bc8326296a7b5e5b0049ba4d32e" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbluetooth#QLowEnergyHandle-typedef&quot;&gt;QLowEnergyHandle&lt;/a&gt; QLowEnergyDescriptor::handle() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb0ad38b5cf6588836825958844dc4d76e53cd40" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbluetooth#Security-enum&quot;&gt;QBluetooth::SecurityFlags&lt;/a&gt; QBluetoothServer::securityFlags() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8197e380af70fd870e461660ba3700dd985bf5cb" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbluetooth#Security-enum&quot;&gt;QBluetooth::SecurityFlags&lt;/a&gt; QBluetoothSocket::preferredSecurityFlags() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd4b7e3329e1d8fd8fbedea3c4c5417dbfbf432f" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbluetoothaddress&quot;&gt;QBluetoothAddress&lt;/a&gt; AddressInfo::address</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="473c05e9881d4c71245dae8732633bdb87b354f5" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbluetoothaddress&quot;&gt;QBluetoothAddress&lt;/a&gt; QBluetoothDeviceInfo::address() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23c83a07b3b9ca7920325717cad1b1ae8b2edf55" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbluetoothaddress&quot;&gt;QBluetoothAddress&lt;/a&gt; QBluetoothHostInfo::address() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2bd3583bd81097a895fdc35d0ac5a4e5b4ca4bdb" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbluetoothaddress&quot;&gt;QBluetoothAddress&lt;/a&gt; QBluetoothLocalDevice::address() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10e9dc9cdb1bc6733e8ffd6ded3d7333c571678e" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbluetoothaddress&quot;&gt;QBluetoothAddress&lt;/a&gt; QBluetoothServer::serverAddress() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88fffe871baecb8071ab19e6d357152813ad8425" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbluetoothaddress&quot;&gt;QBluetoothAddress&lt;/a&gt; QBluetoothServiceDiscoveryAgent::remoteAddress() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07a8253ff440a84375cf0e981bf2c056c8ca6f30" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbluetoothaddress&quot;&gt;QBluetoothAddress&lt;/a&gt; QBluetoothSocket::localAddress() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0010212b04270400c7e76564ad74dc419e029f1f" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbluetoothaddress&quot;&gt;QBluetoothAddress&lt;/a&gt; QBluetoothSocket::peerAddress() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e54094dc538755ccbf530e544b368235933b68fe" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbluetoothaddress&quot;&gt;QBluetoothAddress&lt;/a&gt; QBluetoothTransferRequest::address() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2dc3b383659b96b8b89b332789dfc9fac76ac64e" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbluetoothaddress&quot;&gt;QBluetoothAddress&lt;/a&gt; QLowEnergyController::localAddress() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68e326a5ef597d32e2eb121bae5233cba42dff8e" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbluetoothaddress&quot;&gt;QBluetoothAddress&lt;/a&gt; QLowEnergyController::remoteAddress() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a78917cdd1ab643cf0fcf1de26c980392b6fc9ce" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbluetoothaddress#QBluetoothAddress&quot;&gt;QBluetoothAddress&lt;/a&gt; &amp;amp;QBluetoothAddress::operator=(const &lt;a href=&quot;qbluetoothaddress#QBluetoothAddress&quot;&gt;QBluetoothAddress&lt;/a&gt; &amp;amp;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f0666888b6565c766f797b7faa99ce7ebe8e8e2" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbluetoothdevicediscoveryagent#Error-enum&quot;&gt;QBluetoothDeviceDiscoveryAgent::Error&lt;/a&gt; QBluetoothDeviceDiscoveryAgent::error() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f867a532e187f70f197f1352e3c5498ecfae8ef0" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbluetoothdeviceinfo&quot;&gt;QBluetoothDeviceInfo&lt;/a&gt; QBluetoothServiceInfo::device() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d354b251b6db442922c16d2d4ed838c6923653b8" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbluetoothdeviceinfo&quot;&gt;QBluetoothDeviceInfo&lt;/a&gt; object and this are identical.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a80467cd10e428e256e8485d401e3c0e280daef" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbluetoothdeviceinfo&quot;&gt;QBluetoothDeviceInfo&lt;/a&gt; provides information about a Bluetooth device's name, address and class of device.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="069b3a08bdf1e5529daa02d1e379132eebbf086d" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbluetoothdeviceinfo#CoreConfiguration-enum&quot;&gt;QBluetoothDeviceInfo::CoreConfigurations&lt;/a&gt; QBluetoothDeviceInfo::coreConfigurations() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53623d1279fd0fbd9fd59d8f7da6d839a244c7e1" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbluetoothdeviceinfo#MajorDeviceClass-enum&quot;&gt;QBluetoothDeviceInfo::MajorDeviceClass&lt;/a&gt; QBluetoothDeviceInfo::majorDeviceClass() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4045ad7d1b56f6680ec31b301801c55a3458b76a" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbluetoothdeviceinfo#QBluetoothDeviceInfo&quot;&gt;QBluetoothDeviceInfo&lt;/a&gt; &amp;amp;QBluetoothDeviceInfo::operator=(const &lt;a href=&quot;qbluetoothdeviceinfo#QBluetoothDeviceInfo&quot;&gt;QBluetoothDeviceInfo&lt;/a&gt; &amp;amp;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e683e3af89d541b26df9078b16aeb65d2410b4c1" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbluetoothdeviceinfo#ServiceClass-enum&quot;&gt;QBluetoothDeviceInfo::ServiceClasses&lt;/a&gt; QBluetoothDeviceInfo::serviceClasses() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ebda4720517a4059bd7f4bbdb4dc9636d21dd18f" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbluetoothhostinfo#QBluetoothHostInfo&quot;&gt;QBluetoothHostInfo&lt;/a&gt; &amp;amp;QBluetoothHostInfo::operator=(const &lt;a href=&quot;qbluetoothhostinfo#QBluetoothHostInfo&quot;&gt;QBluetoothHostInfo&lt;/a&gt; &amp;amp;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c88212ba343ee875be70b6e15f6ad8e033cee5b7" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbluetoothlocaldevice&quot;&gt;QBluetoothLocalDevice&lt;/a&gt; provides functions for getting and setting the state of local Bluetooth devices.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fdbca26974d89d9afc144bb04750f3ee38801543" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbluetoothlocaldevice#HostMode-enum&quot;&gt;QBluetoothLocalDevice::HostMode&lt;/a&gt; QBluetoothLocalDevice::hostMode() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aebeb637d0c4cf33fab8a70af9f0ef10ea5ae2b8" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbluetoothlocaldevice#Pairing-enum&quot;&gt;QBluetoothLocalDevice::Pairing&lt;/a&gt; QBluetoothLocalDevice::pairingStatus(const &lt;a href=&quot;qbluetoothaddress&quot;&gt;QBluetoothAddress&lt;/a&gt; &amp;amp;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9cef6008ec6d9dc5870d34168b1b941c5bc03b3a" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbluetoothserver&quot;&gt;QBluetoothServer&lt;/a&gt; is used to implement Bluetooth services over RFCOMM or L2cap.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90ddff6e8ea95aefaa9f230634cebae63ca3f95b" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbluetoothserver#Error-enum&quot;&gt;QBluetoothServer::Error&lt;/a&gt; QBluetoothServer::error() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="243ac40d380f342996478cdbe1157c16767e86d1" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbluetoothservicediscoveryagent#Error-enum&quot;&gt;QBluetoothServiceDiscoveryAgent::Error&lt;/a&gt; QBluetoothServiceDiscoveryAgent::error() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51ab65932139279c221885d50dd2da6848704182" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbluetoothserviceinfo&quot;&gt;QBluetoothServiceInfo&lt;/a&gt; QBluetoothServer::listen(const &lt;a href=&quot;qbluetoothuuid&quot;&gt;QBluetoothUuid&lt;/a&gt; &amp;amp;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0647fb7a844203fa8b903689bd933600e398ed92" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbluetoothserviceinfo&quot;&gt;QBluetoothServiceInfo&lt;/a&gt; is not a value type in the traditional sense. All copies of the same service info object share the same data as they do not detach upon changing them. This ensures that two copies can (de)register the same Bluetooth service.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5172a735c4b916772a2c2deb51487ca3c335d83c" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbluetoothserviceinfo&quot;&gt;QBluetoothServiceInfo&lt;/a&gt; provides information about a service offered by a Bluetooth device. In addition it can be used to register new services on the local device. Note that such a registration only affects the Bluetooth SDP entries. Any server listening for incoming connections (e.g an RFCOMM server) must be started before &lt;a href=&quot;qbluetoothserviceinfo#registerService&quot;&gt;registerService&lt;/a&gt;() is called. Deregistration must happen in the reverse order.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e48d82705ee504fd75967ca0856e8e9f8cf0923" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbluetoothserviceinfo#Protocol-enum&quot;&gt;L2CAP&lt;/a&gt; is a low level datagram-oriented Bluetooth socket. Android does not support &lt;a href=&quot;qbluetoothserviceinfo#Protocol-enum&quot;&gt;L2CAP&lt;/a&gt; for socket connections.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04a76fc480160b3783848f1d3cc7d69ae58930c7" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbluetoothserviceinfo#Protocol-enum&quot;&gt;QBluetoothServiceInfo::Protocol&lt;/a&gt; QBluetoothServer::serverType() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="096c8bbeed71d93b977101cad31a9555fe1f2abd" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbluetoothserviceinfo#Protocol-enum&quot;&gt;QBluetoothServiceInfo::Protocol&lt;/a&gt; QBluetoothServiceInfo::socketProtocol() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87bade9e6e100e8914456d952c93e864eb28057b" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbluetoothserviceinfo#Protocol-enum&quot;&gt;QBluetoothServiceInfo::Protocol&lt;/a&gt; QBluetoothSocket::socketType() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34a4ecdf727f64526fbe649843a6c644f3ed84ca" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbluetoothserviceinfo#Protocol-enum&quot;&gt;RFCOMM&lt;/a&gt; is a reliable, stream-oriented socket. RFCOMM sockets emulate an RS-232 serial port.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d60f3578df2a04707b59857f4573de20d1c0791" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbluetoothserviceinfo#QBluetoothServiceInfo&quot;&gt;QBluetoothServiceInfo&lt;/a&gt; &amp;amp;QBluetoothServiceInfo::operator=(const &lt;a href=&quot;qbluetoothserviceinfo#QBluetoothServiceInfo&quot;&gt;QBluetoothServiceInfo&lt;/a&gt; &amp;amp;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f100b3c104431ad344c7c47f516828fe37d8aa58" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbluetoothserviceinfo-sequence&quot;&gt;QBluetoothServiceInfo::Sequence&lt;/a&gt; QBluetoothServiceInfo::protocolDescriptor(&lt;a href=&quot;qbluetoothuuid#ProtocolUuid-enum&quot;&gt;QBluetoothUuid::ProtocolUuid&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ace554d81f3f30673ecba0e5e059217fb710faf7" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbluetoothsocket&quot;&gt;QBluetoothSocket&lt;/a&gt; *QBluetoothServer::nextPendingConnection()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e0a844d3cc372b29621dc1ae3245a3356260c06" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbluetoothsocket&quot;&gt;QBluetoothSocket&lt;/a&gt; supports two socket types, &lt;a href=&quot;qbluetoothserviceinfo#Protocol-enum&quot;&gt;L2CAP&lt;/a&gt; and &lt;a href=&quot;qbluetoothserviceinfo#Protocol-enum&quot;&gt;RFCOMM&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45d93e3b834447e4c3bad147a8dcf7b0065b903b" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbluetoothsocket#SocketError-enum&quot;&gt;QBluetoothSocket::SocketError&lt;/a&gt; QBluetoothSocket::error() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7099ae905fbde545b711a1f979534ba891831c41" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbluetoothsocket#SocketState-enum&quot;&gt;QBluetoothSocket::SocketState&lt;/a&gt; QBluetoothSocket::state() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70aa4319a2eed253e88b6c25eb6e153f094841c1" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbluetoothtransfermanager&quot;&gt;QBluetoothTransferManager&lt;/a&gt; *QBluetoothTransferReply::manager() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e369a3c0e439b19dc67dd5aca3091a6cf26f2163" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbluetoothtransfermanager&quot;&gt;QBluetoothTransferManager&lt;/a&gt; uses OBEX to send put commands to remote devices. A typical OBEX transfer is initialized as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bfe3ad8e878081b3fb8ed2de4a8d291ba482fdc9" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbluetoothtransferreply&quot;&gt;QBluetoothTransferReply&lt;/a&gt; *QBluetoothTransferManager::put(const &lt;a href=&quot;qbluetoothtransferrequest&quot;&gt;QBluetoothTransferRequest&lt;/a&gt; &amp;amp;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1b7a1979d41b042ea6cd41fb73249d70b48c5d4" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbluetoothtransferrequest&quot;&gt;QBluetoothTransferRequest&lt;/a&gt; QBluetoothTransferReply::request() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="731f6d181168a5060624b29c566507885464cb47" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbluetoothtransferrequest&quot;&gt;QBluetoothTransferRequest&lt;/a&gt; is part of the Bluetooth Transfer API and is the class holding the information necessary to initiate a transfer over Bluetooth.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10d5129af6584ab572c6a44847f2d80065b496f7" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbluetoothtransferrequest#QBluetoothTransferRequest&quot;&gt;QBluetoothTransferRequest&lt;/a&gt; &amp;amp;QBluetoothTransferRequest::operator=(const &lt;a href=&quot;qbluetoothtransferrequest#QBluetoothTransferRequest&quot;&gt;QBluetoothTransferRequest&lt;/a&gt; &amp;amp;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1518263c6dfb35fbfa07b578b965c87bd31d70dd" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbluetoothuuid&quot;&gt;QBluetoothUuid&lt;/a&gt; QBluetoothDeviceInfo::deviceUuid() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f72453cde63ecf4cc8b38314fcd48fb20ddd9e3a" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbluetoothuuid&quot;&gt;QBluetoothUuid&lt;/a&gt; QBluetoothServiceInfo::serviceUuid() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ddb4a6346bb9096ab9ffb257f42546b7470d773c" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbluetoothuuid&quot;&gt;QBluetoothUuid&lt;/a&gt; QLowEnergyCharacteristic::uuid() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc02cb46120c6876bbb8ff98ab5e9b2f26d4620f" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbluetoothuuid&quot;&gt;QBluetoothUuid&lt;/a&gt; QLowEnergyCharacteristicData::uuid() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e87be70810f3bef50ddc7eb7cc3630b691790dcf" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbluetoothuuid&quot;&gt;QBluetoothUuid&lt;/a&gt; QLowEnergyController::remoteDeviceUuid() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e64ef42387b55d3a2dde1851628a963789b10e2" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbluetoothuuid&quot;&gt;QBluetoothUuid&lt;/a&gt; QLowEnergyDescriptor::uuid() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b0fff5f1fee940171c4f1dca598f037e19b1503" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbluetoothuuid&quot;&gt;QBluetoothUuid&lt;/a&gt; QLowEnergyDescriptorData::uuid() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2b6c6976ee2753151564ff1ce8f8cdf2f3e80ed" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbluetoothuuid&quot;&gt;QBluetoothUuid&lt;/a&gt; QLowEnergyService::serviceUuid() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5b14163629a6668db94aecbe16298078153f523" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbluetoothuuid&quot;&gt;QBluetoothUuid&lt;/a&gt; QLowEnergyServiceData::uuid() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92e2f91b07982a8948dd06848c32cd4af4cfae51" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbluetoothuuid#DescriptorType-enum&quot;&gt;QBluetoothUuid::DescriptorType&lt;/a&gt; QLowEnergyDescriptor::type() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46424e8c838f09d167b10a454e5e51d69f62f54c" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qboxlayout&quot;&gt;QBoxLayout&lt;/a&gt; also includes two margin widths:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbec89e64ae7325d00f38e882a5d439866cb3820" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qboxlayout&quot;&gt;QBoxLayout&lt;/a&gt; takes the space it gets (from its parent layout or from the &lt;a href=&quot;qlayout#parentWidget&quot;&gt;parentWidget&lt;/a&gt;()), divides it up into a row of boxes, and makes each managed widget fill one box.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c1170965e232efa1f31b6444a7a91b3a5ac6a73" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qboxlayout&quot;&gt;QBoxLayout&lt;/a&gt;, &lt;a href=&quot;qformlayout&quot;&gt;QFormLayout&lt;/a&gt;, &lt;a href=&quot;qgridlayout&quot;&gt;QGridLayout&lt;/a&gt;, and &lt;a href=&quot;qstackedlayout&quot;&gt;QStackedLayout&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f7def93c81eb5ac5734bb2194c5530cfe10e52c" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qboxlayout#Direction-enum&quot;&gt;QBoxLayout::Direction&lt;/a&gt; QBoxLayout::direction() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8cd2b6ec3c565ae1901be139b658c60b5c430541" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qboxlayout#addLayout&quot;&gt;addLayout&lt;/a&gt;() to add a box containing another &lt;a href=&quot;qlayout&quot;&gt;QLayout&lt;/a&gt; to the row and set that layout's stretch factor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9fed6a9f486c6c713b97cc3b2199d4205420d544" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qboxlayout#addSpacing&quot;&gt;addSpacing()&lt;/a&gt;, &lt;a href=&quot;qboxlayout#addStretch&quot;&gt;addStretch()&lt;/a&gt;, &lt;a href=&quot;qboxlayout#insertSpacing&quot;&gt;insertSpacing()&lt;/a&gt;, &lt;a href=&quot;qboxlayout#insertStretch&quot;&gt;insertStretch()&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2b8e261e128bffb948780016a247345f042761c" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qboxlayout#addSpacing&quot;&gt;addSpacing&lt;/a&gt;() to create an empty box; this is one of the functions you use to create nice and spacious dialogs. See below for ways to set margins.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a0c7717c4be2f80aad0f28a348ef090b6188a84" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qboxlayout#addStretch&quot;&gt;addStretch&lt;/a&gt;() to create an empty, stretchable box.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0062baeb5a83106d6d37e64eb75f652c66c814b4" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qboxlayout#addWidget&quot;&gt;addWidget()&lt;/a&gt;, &lt;a href=&quot;qboxlayout#insertWidget&quot;&gt;insertWidget()&lt;/a&gt;, &lt;a href=&quot;qboxlayout#setStretchFactor&quot;&gt;setStretchFactor()&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1acfaa8210478d3760a77bb79c7496c5d7006fca" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qboxlayout#addWidget&quot;&gt;addWidget&lt;/a&gt;() to add a widget to the &lt;a href=&quot;qboxlayout&quot;&gt;QBoxLayout&lt;/a&gt; and set the widget's stretch factor. (The stretch factor is along the row of boxes.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="094b1741469e178dfd71550eb3f0f6ff3283ab33" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qboxlayout#setSpacing&quot;&gt;setSpacing&lt;/a&gt;() sets the width between neighboring boxes. (You can use &lt;a href=&quot;qboxlayout#addSpacing&quot;&gt;addSpacing&lt;/a&gt;() to get more space at a particular spot.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f3d2fef37c5d51254755ed4ea12f58ad750a449" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qboxset#QBoxSet&quot;&gt;QBoxSet&lt;/a&gt; &amp;amp;QBoxSet::operator&amp;lt;&amp;lt;(const &lt;a href=&quot;#qreal-typedef&quot;&gt;qreal&lt;/a&gt; &amp;amp;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c696987a621596494600d45de9a2d4d6c201426" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbrush&quot;&gt;QBrush&lt;/a&gt; (</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="741f49ee9f5acefa325fea997851974cefdfaa57" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbrush&quot;&gt;QBrush&lt;/a&gt; QAbstractAxis::labelsBrush() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e1574ade6a26ffcd65e1a796226f305fb0c8b59" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbrush&quot;&gt;QBrush&lt;/a&gt; QAbstractAxis::shadesBrush() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed0b140250c7b72cd1660bbb2fad620d2e82e5ce" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbrush&quot;&gt;QBrush&lt;/a&gt; QAbstractAxis::titleBrush() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d77f1655f0cf600173b61e06888f9364c0b63eae" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbrush&quot;&gt;QBrush&lt;/a&gt; QAbstractGraphicsShapeItem::brush() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6269eaa949d53fe1c0d2ff30d1701977bebfe32b" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbrush&quot;&gt;QBrush&lt;/a&gt; QAreaSeries::brush() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b95bc5bc513b8e21ce793ee3e902522de31c3fc" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbrush&quot;&gt;QBrush&lt;/a&gt; QBarSet::brush() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46c2d29803ad3bff2e72ddc9e476e49979360e65" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbrush&quot;&gt;QBrush&lt;/a&gt; QBarSet::labelBrush() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3db77c6aa4885ed476cbb0da6c4e90eea65966a1" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbrush&quot;&gt;QBrush&lt;/a&gt; QBoxSet::brush() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a4e7d77856462156097889250e1625ac8a36963" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbrush&quot;&gt;QBrush&lt;/a&gt; QChart::backgroundBrush() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba3dae28522a429347a5e9ad35b34c5187855842" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbrush&quot;&gt;QBrush&lt;/a&gt; QChart::plotAreaBackgroundBrush() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="502c80044d90b77e432ff1f2e7d7d604444974a4" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbrush&quot;&gt;QBrush&lt;/a&gt; QChart::titleBrush() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0a5c0ffda416aba82fc86f81b40db87b07c6ae6" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbrush&quot;&gt;QBrush&lt;/a&gt; QLegend::brush() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fef96df101d8a68cd127660c28c427726d86f1c1" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbrush&quot;&gt;QBrush&lt;/a&gt; QLegend::labelBrush() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1010c5d20043c0fa40264f6ff66889e301e38562" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbrush&quot;&gt;QBrush&lt;/a&gt; QLegendMarker::brush() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be4254457b08957316afa18670ba0ddee3a686a1" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbrush&quot;&gt;QBrush&lt;/a&gt; QLegendMarker::labelBrush() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b51cde38eb668f733691362520af0f28653bc8e4" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbrush&quot;&gt;QBrush&lt;/a&gt; QListWidgetItem::background() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d94ee546fcc473847a5c7b7d48c5aade118a52a5" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbrush&quot;&gt;QBrush&lt;/a&gt; QListWidgetItem::foreground() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8fa26b8cde432841f4432d839f9b041a9445ff4d" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbrush&quot;&gt;QBrush&lt;/a&gt; QPaintEngineState::backgroundBrush() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2583bc859980ea628063da96af0b505c6f10f26a" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbrush&quot;&gt;QBrush&lt;/a&gt; QPaintEngineState::brush() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77d765963afe9903373f5143ed53e9f87d411ae5" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbrush&quot;&gt;QBrush&lt;/a&gt; QPen::brush() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b014e8d5c9a2827b670212ed07f0d09452a0661" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbrush&quot;&gt;QBrush&lt;/a&gt; QStandardItem::background() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b21c1c0db907de6ef15f075225e8be10cc36db94" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbrush&quot;&gt;QBrush&lt;/a&gt; QStandardItem::foreground() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47242040c4bc9fae2bf702550cb32db5d366fe2d" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbrush&quot;&gt;QBrush&lt;/a&gt; QStyleOptionViewItem::backgroundBrush</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4c66c551acf255ce2571824708c51820d1a1a08" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbrush&quot;&gt;QBrush&lt;/a&gt; QTableWidgetItem::background() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0967adce3485a3d58f3f19244eb4da2f729f58e" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbrush&quot;&gt;QBrush&lt;/a&gt; QTableWidgetItem::foreground() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8279bcb7a91029c9bb32b0c77597ebad4217a2c" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbrush&quot;&gt;QBrush&lt;/a&gt; QTextFormat::background() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c98d5e84325e779396f76358eb0db7a6531afb37" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbrush&quot;&gt;QBrush&lt;/a&gt; QTextFormat::brushProperty(int</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a1e65d1a02b73f4c137849e4b12f520590af8b5" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbrush&quot;&gt;QBrush&lt;/a&gt; QTextFormat::foreground() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8816906375580152d8cdc97ea0118b0aae5427fb" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbrush&quot;&gt;QBrush&lt;/a&gt; QTextFrameFormat::borderBrush() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5b7fb9ae362a736c0c901eb1d04bb96628e6547" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbrush&quot;&gt;QBrush&lt;/a&gt; QTreeWidgetItem::background(int</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5f533cde81d81fe8a131ea067f4634ed9495aa4" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbrush&quot;&gt;QBrush&lt;/a&gt; QTreeWidgetItem::foreground(int</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dae527798268e865eb96940baced7f1a033f8fdc" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbrush&quot;&gt;QBrush&lt;/a&gt; QXYSeries::brush() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59b0e57864d66d468039bddc8297d07b487636e9" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbrush#QBrush&quot;&gt;QBrush&lt;/a&gt; &amp;amp;QBrush::operator=(&lt;a href=&quot;qbrush#QBrush&quot;&gt;QBrush&lt;/a&gt; &amp;amp;&amp;amp;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5afed32bf54c05e9053abcb9c158cf1c35675ec5" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbrush#QBrush&quot;&gt;QBrush&lt;/a&gt; &amp;amp;QBrush::operator=(const &lt;a href=&quot;qbrush#QBrush&quot;&gt;QBrush&lt;/a&gt; &amp;amp;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="421de56f3ad2a01483f6413288659603896dc875" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbuffer&quot;&gt;QBuffer&lt;/a&gt; allows you to access a &lt;a href=&quot;qbytearray&quot;&gt;QByteArray&lt;/a&gt; using the &lt;a href=&quot;qiodevice&quot;&gt;QIODevice&lt;/a&gt; interface. The &lt;a href=&quot;qbytearray&quot;&gt;QByteArray&lt;/a&gt; is treated just as a standard random-accessed file. Example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4125f3b9341c7cf1edc4e08ed66bde1a689260af" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbuffer&quot;&gt;QBuffer&lt;/a&gt; emits &lt;a href=&quot;qiodevice#readyRead&quot;&gt;readyRead&lt;/a&gt;() when new data has arrived in the buffer. By connecting to this signal, you can use &lt;a href=&quot;qbuffer&quot;&gt;QBuffer&lt;/a&gt; to store temporary data before processing it. &lt;a href=&quot;qbuffer&quot;&gt;QBuffer&lt;/a&gt; also emits &lt;a href=&quot;qiodevice#bytesWritten&quot;&gt;bytesWritten&lt;/a&gt;() every time new data has been written to the buffer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="449e762f3dd54e1bd00981b8ff24415c4a11e2ab" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbuffer&quot;&gt;QBuffer&lt;/a&gt;, &lt;a href=&quot;qfiledevice&quot;&gt;QFileDevice&lt;/a&gt;, and &lt;a href=&quot;qprocess&quot;&gt;QProcess&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d90b2c82eefb39c4fee1612c0f769fd054d6c9dd" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbuttongroup&quot;&gt;QButtonGroup&lt;/a&gt; *QAbstractButton::group() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7e86d6777643667d4cea7b79d87eff4cf09502e" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbuttongroup&quot;&gt;QButtonGroup&lt;/a&gt; provides an abstract container into which button widgets can be placed. It does not provide a visual representation of this container (see &lt;a href=&quot;qgroupbox&quot;&gt;QGroupBox&lt;/a&gt; for a container widget), but instead manages the states of each of the buttons in the group.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d282ce418a3810b84884e0dcc56e27a5b8adedd" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbytearray&quot;&gt;QByteArray&lt;/a&gt; &amp;amp;QBuffer::buffer()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84c495aeab1cde3810aabf35f033462a855252cf" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbytearray&quot;&gt;QByteArray&lt;/a&gt; QAndroidIntent::extraBytes(const &lt;a href=&quot;qstring&quot;&gt;QString&lt;/a&gt; &amp;amp;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af882c5bb2378fc2a97ed83830c02f3a6916e6f7" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbytearray&quot;&gt;QByteArray&lt;/a&gt; QAndroidParcel::readData() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80b3777c8bde16153865bb8dee87f192e838ce17" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbytearray&quot;&gt;QByteArray&lt;/a&gt; QBluetoothDeviceInfo::manufacturerData(&lt;a href=&quot;#quint16-typedef&quot;&gt;quint16&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b773319dff1ab0dc5627d250679656a6bc66ebe" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbytearray&quot;&gt;QByteArray&lt;/a&gt; QBuffer::data() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8020def6c87a83611588f0adb4439f7a1763977a" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbytearray&quot;&gt;QByteArray&lt;/a&gt; QByteArrayList::join() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="217bf05a1f344f252697d630f534b8230c23ddd0" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbytearray&quot;&gt;QByteArray&lt;/a&gt; QByteArrayList::join(char</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c962de821385dfee9e6723624520018132acb10d" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbytearray&quot;&gt;QByteArray&lt;/a&gt; QByteArrayList::join(const &lt;a href=&quot;qbytearray&quot;&gt;QByteArray&lt;/a&gt; &amp;amp;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="943fb3c505ccab067001055056675e0a19144dfe" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbytearray&quot;&gt;QByteArray&lt;/a&gt; QByteArrayMatcher::pattern() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be3599d64eb81e9b556299f12f801c04a75935de" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbytearray&quot;&gt;QByteArray&lt;/a&gt; QCanBusFrame::payload() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2eafeae7f30fa9f979f4c83df400f67012d6c343" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbytearray&quot;&gt;QByteArray&lt;/a&gt; QCborValue::toByteArray(const &lt;a href=&quot;qbytearray&quot;&gt;QByteArray&lt;/a&gt; &amp;amp;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ecde3d8fa1d2d51a13f85eb07de07f547be84c0e" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbytearray&quot;&gt;QByteArray&lt;/a&gt; QCborValue::toCbor(&lt;a href=&quot;qcborvalue#EncodingOption-enum&quot;&gt;QCborValue::EncodingOptions&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa5a5f039367f4d2f8c4de5e17905f0e3fc330cf" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbytearray&quot;&gt;QByteArray&lt;/a&gt; QCryptographicHash::result() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec35374419e1e9317b6c414f9b58d552f8e46a77" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbytearray&quot;&gt;QByteArray&lt;/a&gt; QDataWidgetMapper::mappedPropertyName(&lt;a href=&quot;qwidget&quot;&gt;QWidget&lt;/a&gt; *</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aff700be97b2824cb52595fbdebd3ddf2c1911a7" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbytearray&quot;&gt;QByteArray&lt;/a&gt; QDomDocument::toByteArray(int</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf29af9a7ea526d6159eecfffd7176e7de6e38fd" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbytearray&quot;&gt;QByteArray&lt;/a&gt; QDtls::decryptDatagram(&lt;a href=&quot;qudpsocket&quot;&gt;QUdpSocket&lt;/a&gt; *</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e1f9db5e86aeaeb4d5b4bbe63af81d90d6f30b7" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbytearray&quot;&gt;QByteArray&lt;/a&gt; QDtlsClientVerifier::verifiedHello() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="847af28d97d4f9425f6a621bcc2c26271da1b7e7" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbytearray&quot;&gt;QByteArray&lt;/a&gt; QDynamicPropertyChangeEvent::propertyName() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="701831f1644f71713f598b8f39569a1e8a30fac4" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbytearray&quot;&gt;QByteArray&lt;/a&gt; QDynamicPropertyUpdatedChange::propertyName() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="edc470737c5f5257183c20fa2a199b32dde621cf" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbytearray&quot;&gt;QByteArray&lt;/a&gt; QFileDialog::saveState() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="217124a6e6bb5ee270f72a746a72da9caf97eda5" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbytearray&quot;&gt;QByteArray&lt;/a&gt; QHeaderView::saveState() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="586bdf0559c33fdf391ad4ca4c760cb599f74006" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbytearray&quot;&gt;QByteArray&lt;/a&gt; QHelpEngineCore::fileData(const &lt;a href=&quot;qurl&quot;&gt;QUrl&lt;/a&gt; &amp;amp;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6b0d62670ec519db6aca8927801e5d85c2a9927" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbytearray&quot;&gt;QByteArray&lt;/a&gt; QHttpMultiPart::boundary() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7cba2978a12cf2130fb1cd26291e8c772ece9d8b" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbytearray&quot;&gt;QByteArray&lt;/a&gt; QIODevice::peek(&lt;a href=&quot;qtglobal#qint64-typedef&quot;&gt;qint64&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc5ffed9f19d0d387222c8a5a5df9fc54e9bf690" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbytearray&quot;&gt;QByteArray&lt;/a&gt; QIODevice::read(&lt;a href=&quot;qtglobal#qint64-typedef&quot;&gt;qint64&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8530a25acfea9a765f5272916069b00b2f65b792" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbytearray&quot;&gt;QByteArray&lt;/a&gt; QIODevice::readAll()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5d75771b4fc928c37105720b4296d76059cd3cd" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbytearray&quot;&gt;QByteArray&lt;/a&gt; QIODevice::readLine(&lt;a href=&quot;qtglobal#qint64-typedef&quot;&gt;qint64&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38606777c1cf6b030a3a983b4107bdcddd7c52de" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbytearray&quot;&gt;QByteArray&lt;/a&gt; QImageIOHandler::format() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28f21937d4707dfc69431af27d14f38f174595bd" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbytearray&quot;&gt;QByteArray&lt;/a&gt; QImageReader::format() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9234108f932f024b6d3612f4152b15497801d57" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbytearray&quot;&gt;QByteArray&lt;/a&gt; QImageReader::subType() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9426fd2950eb3a234452fd451661471552be3c1" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbytearray&quot;&gt;QByteArray&lt;/a&gt; QImageWriter::format() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7aa89e1554357a181a63fcdf6063807563dbb1f4" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbytearray&quot;&gt;QByteArray&lt;/a&gt; QImageWriter::subType() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="898a155431be1946df173b29a8f55b7d96a098bc" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbytearray&quot;&gt;QByteArray&lt;/a&gt; QJsonDocument::toBinaryData() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5610b0ada72ddb37a125f7789c8ae0caa37e21b" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbytearray&quot;&gt;QByteArray&lt;/a&gt; QJsonDocument::toJson() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fcfbf9b72d427a40591d6ef838eae9a74dc70b78" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbytearray&quot;&gt;QByteArray&lt;/a&gt; QJsonDocument::toJson(&lt;a href=&quot;qjsondocument#JsonFormat-enum&quot;&gt;QJsonDocument::JsonFormat&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76e2e2db1bc89bd42eda172d8795f4a7c5de42f5" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbytearray&quot;&gt;QByteArray&lt;/a&gt; QLowEnergyAdvertisingData::manufacturerData() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8db814ca875f38365d5e7259e4fde8878bf687c1" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbytearray&quot;&gt;QByteArray&lt;/a&gt; QLowEnergyAdvertisingData::rawData() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7be19f77c8d773d00e56c2fa3aca1531d5e5cd79" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbytearray&quot;&gt;QByteArray&lt;/a&gt; QLowEnergyCharacteristic::value() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f164ce1df78a82a31d4ab3657b0e93f0dacc3827" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbytearray&quot;&gt;QByteArray&lt;/a&gt; QLowEnergyCharacteristicData::value() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97abfa0b290950f8bac1d113e41ca37df4163276" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbytearray&quot;&gt;QByteArray&lt;/a&gt; QLowEnergyDescriptor::value() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53896762390c604ffa2364272318887dbf2c5412" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbytearray&quot;&gt;QByteArray&lt;/a&gt; QLowEnergyDescriptorData::value() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8370ae8e67a178f716b761e28a527ee91c16e1f7" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbytearray&quot;&gt;QByteArray&lt;/a&gt; QMainWindow::saveState(int</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cffc0367fa627d9a182185bd66b5cff71f87096e" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbytearray&quot;&gt;QByteArray&lt;/a&gt; QMessageAuthenticationCode::result() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cfee161234da95fc3d762aa7df82481eebde25df" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbytearray&quot;&gt;QByteArray&lt;/a&gt; QMetaEnum::valueToKeys(int</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56304a78fc1db73cc9231a8ea998bdf5d3a6de8e" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbytearray&quot;&gt;QByteArray&lt;/a&gt; QMetaMethod::methodSignature() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff7d3ef19afc27e6ed15781d004a102e9d8c680e" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbytearray&quot;&gt;QByteArray&lt;/a&gt; QMetaMethod::name() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="186fadfacd31a876f25181978f0b427aac94d0ac" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbytearray&quot;&gt;QByteArray&lt;/a&gt; QMimeData::data(const &lt;a href=&quot;qstring&quot;&gt;QString&lt;/a&gt; &amp;amp;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ca6a300f3d2dc6baf0350cfcc114d29d4c49392" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbytearray&quot;&gt;QByteArray&lt;/a&gt; QModbusDeviceIdentification::value(&lt;a href=&quot;#uint-typedef&quot;&gt;uint&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8bd1bcbc35954d56e7dec543dd4c5295037cc773" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbytearray&quot;&gt;QByteArray&lt;/a&gt; QModbusPdu::data() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6fb11bd0b684a60135473bf613e91e35820bf94" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbytearray&quot;&gt;QByteArray&lt;/a&gt; QMovie::format() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="883e3b93f4cc5f3573ed6617e72155385b6a701b" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbytearray&quot;&gt;QByteArray&lt;/a&gt; QNdefMessage::toByteArray() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0024fdd65ac3c5dc778f3ff665bd548dbeaa1bfe" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbytearray&quot;&gt;QByteArray&lt;/a&gt; QNdefNfcSmartPosterRecord::icon(const &lt;a href=&quot;qbytearray&quot;&gt;QByteArray&lt;/a&gt; &amp;amp;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09147106f222a22eb7a33d14ab2fb46a9cbb5cae" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbytearray&quot;&gt;QByteArray&lt;/a&gt; QNdefNfcSmartPosterRecord::typeInfo() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dcbccdd94ab7707810f753a7b64ac94a485a3584" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbytearray&quot;&gt;QByteArray&lt;/a&gt; QNdefRecord::id() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="243cdad061cbb18e306a9afef349d20c16724ab3" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbytearray&quot;&gt;QByteArray&lt;/a&gt; QNdefRecord::payload() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c777c791d9699a445bfeb3104896d138755c7b8" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbytearray&quot;&gt;QByteArray&lt;/a&gt; QNdefRecord::type() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2d2bd4455d9366b886563978d043ba406c8ab40" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbytearray&quot;&gt;QByteArray&lt;/a&gt; QNetworkCookie::name() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="803e1f43c281dcb2bea6573cef215806cb7e3de6" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbytearray&quot;&gt;QByteArray&lt;/a&gt; QNetworkCookie::toRawForm(&lt;a href=&quot;qnetworkcookie#RawForm-enum&quot;&gt;QNetworkCookie::RawForm&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f659b1522db2b6ddd407abb95f84cef727cfcb47" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbytearray&quot;&gt;QByteArray&lt;/a&gt; QNetworkCookie::value() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="130479fd4d6eda1503520cd3c9d6521420e29166" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbytearray&quot;&gt;QByteArray&lt;/a&gt; QNetworkDatagram::data() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e93bd49bf6bd0d97df2558703a29d9efa1a4d62d" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbytearray&quot;&gt;QByteArray&lt;/a&gt; QNetworkProxy::rawHeader(const &lt;a href=&quot;qbytearray&quot;&gt;QByteArray&lt;/a&gt; &amp;amp;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed9625425decf22000c88425e3a88456c8143924" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbytearray&quot;&gt;QByteArray&lt;/a&gt; QNetworkReply::rawHeader(const &lt;a href=&quot;qbytearray&quot;&gt;QByteArray&lt;/a&gt; &amp;amp;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09422c5f93aced739922d2a6150e78187ceef549" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbytearray&quot;&gt;QByteArray&lt;/a&gt; QNetworkRequest::rawHeader(const &lt;a href=&quot;qbytearray&quot;&gt;QByteArray&lt;/a&gt; &amp;amp;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa495d1addcbd8e68337521c31e83f8be880c837" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbytearray&quot;&gt;QByteArray&lt;/a&gt; QOAuth1Signature::customMethodString() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5a603f2b6cf697f65cd19a6b4c622b7ae91c951" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbytearray&quot;&gt;QByteArray&lt;/a&gt; QOAuth1Signature::hmacSha1() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c98d989c7f778f775e4124d13cc54c33ac4fcdb6" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbytearray&quot;&gt;QByteArray&lt;/a&gt; QOAuth1Signature::plainText() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a311a4493ecaa4fe5683087cc1d7b43b73932ca" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbytearray&quot;&gt;QByteArray&lt;/a&gt; QOAuth1Signature::rsaSha1() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a103048baf15bec0c35940a3bceddd2c698238ff" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbytearray&quot;&gt;QByteArray&lt;/a&gt; QOpenGLShader::sourceCode() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa84ce194aa7a4d33c81fd521fc7d5b953fd181d" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbytearray&quot;&gt;QByteArray&lt;/a&gt; QProcess::readAllStandardError()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="167a17bebfa89a86548b8c75a0cfff9136b2411f" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbytearray&quot;&gt;QByteArray&lt;/a&gt; QProcess::readAllStandardOutput()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15eac24d6c1fc6e941d74672598731adcc96aa07" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbytearray&quot;&gt;QByteArray&lt;/a&gt; QRawFont::fontTable(const char *</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9549867410352088bb458d9ae7c2439776ab20e5" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbytearray&quot;&gt;QByteArray&lt;/a&gt; QShaderProgram::shaderCode(&lt;a href=&quot;qt3drender-qshaderprogram#ShaderType-enum&quot;&gt;Qt3DRender::QShaderProgram::ShaderType&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b98aa84ba2d48cd0220e28fa2eb92754244d91b" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbytearray&quot;&gt;QByteArray&lt;/a&gt; QSignalSpy::signal() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dfe29ddccb1f6442829f7c7cca9367d0fcf26c85" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbytearray&quot;&gt;QByteArray&lt;/a&gt; QSignalTransition::signal() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5aec15d5bd4346e5c86d9d369ada7b307673fe9f" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbytearray&quot;&gt;QByteArray&lt;/a&gt; QSplitter::saveState() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b45c0cd612a9138e90c2cc1cb024b9961ea3433e" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbytearray&quot;&gt;QByteArray&lt;/a&gt; QSslCertificate::digest(&lt;a href=&quot;qcryptographichash#Algorithm-enum&quot;&gt;QCryptographicHash::Algorithm&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9b563bb44f745b04a533a2fb604281fa7216b00" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbytearray&quot;&gt;QByteArray&lt;/a&gt; QSslCertificate::serialNumber() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c35592407daa09b304b0c15f43fc5114f9dcd613" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbytearray&quot;&gt;QByteArray&lt;/a&gt; QSslCertificate::toDer() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3cf702d8ce8c8e644da8590eeb41a4c3fef12502" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbytearray&quot;&gt;QByteArray&lt;/a&gt; QSslCertificate::toPem() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dfbc4c56578d04865e70fb528f38d8937fede806" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbytearray&quot;&gt;QByteArray&lt;/a&gt; QSslCertificate::version() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb6b5faa2b733fbe466720c5b4bf27ca2315546b" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbytearray&quot;&gt;QByteArray&lt;/a&gt; QSslConfiguration::nextNegotiatedProtocol() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb980474206d256182c238ce5b130ecc791ead34" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbytearray&quot;&gt;QByteArray&lt;/a&gt; QSslConfiguration::preSharedKeyIdentityHint() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d2a84dbedd1909485ac908e002fb89355a463dc" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbytearray&quot;&gt;QByteArray&lt;/a&gt; QSslConfiguration::sessionTicket() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c84b448f0b6f8a497f333f02331c14d143b32fa6" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbytearray&quot;&gt;QByteArray&lt;/a&gt; QSslKey::toDer(const &lt;a href=&quot;qbytearray&quot;&gt;QByteArray&lt;/a&gt; &amp;amp;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29cbe49055e6308afd6d6e79fdb2d99fb7ef257f" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbytearray&quot;&gt;QByteArray&lt;/a&gt; QSslKey::toPem(const &lt;a href=&quot;qbytearray&quot;&gt;QByteArray&lt;/a&gt; &amp;amp;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62020d54e3f4ae14d885b470bbaa8ef1c9468262" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbytearray&quot;&gt;QByteArray&lt;/a&gt; QSslPreSharedKeyAuthenticator::identity() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="509b0f9be5ecf7d8cff4178ca08cfb50fd4ca2c1" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbytearray&quot;&gt;QByteArray&lt;/a&gt; QSslPreSharedKeyAuthenticator::identityHint() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b5d7f60da3b7b5e8ad76103e8d8ccbc2c33c9e2" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbytearray&quot;&gt;QByteArray&lt;/a&gt; QSslPreSharedKeyAuthenticator::preSharedKey() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d6c7368a62e8a8d8f215502240ff64d5c70b029" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbytearray&quot;&gt;QByteArray&lt;/a&gt; QStaticByteArrayMatcher::pattern() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="886312b24bbec6fff7a866605b6bac7ada6671e8" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbytearray&quot;&gt;QByteArray&lt;/a&gt; QStorageInfo::device() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b18c2ecd096ccf89226dac2046337f24943476bd" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbytearray&quot;&gt;QByteArray&lt;/a&gt; QStorageInfo::fileSystemType() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56915568921cc90fbdfa69d5ed72dd8fb183bfd9" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbytearray&quot;&gt;QByteArray&lt;/a&gt; QStorageInfo::subvolume() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad38e1f9aaed677a7ea7c2ff590897aba4f2599b" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbytearray&quot;&gt;QByteArray&lt;/a&gt; QString::toLatin1() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e11a00cdf9df906b185c67b0fb24af8e0a8907c1" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbytearray&quot;&gt;QByteArray&lt;/a&gt; QString::toLocal8Bit() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="caa01d71b92f42e2d7ab3e6ddb29b2e21c6bfe3f" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbytearray&quot;&gt;QByteArray&lt;/a&gt; QString::toUtf8() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7738cf17cb62fdf968eb49b971b21c4c176fcb0a" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbytearray&quot;&gt;QByteArray&lt;/a&gt; QStringRef::toLatin1() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38cee15e79e95a34eac37ae9f8d37f82acbae9c1" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbytearray&quot;&gt;QByteArray&lt;/a&gt; QStringRef::toLocal8Bit() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b54464b8408a21a133f479245cd49fe81d69cca" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbytearray&quot;&gt;QByteArray&lt;/a&gt; QStringRef::toUtf8() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f7044e7c3401184e42f1a37e3a410bee6e8c21a" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbytearray&quot;&gt;QByteArray&lt;/a&gt; QStringView::toLatin1() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e4c1bcbdb19e119e341403e38a29d245cde633e" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbytearray&quot;&gt;QByteArray&lt;/a&gt; QStringView::toLocal8Bit() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="181a8d7a3197c5ac3a6761043af62f0360cb0cd4" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbytearray&quot;&gt;QByteArray&lt;/a&gt; QStringView::toUtf8() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57c5176eec0e073c63ed2ac12d50d7e2277ff50e" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbytearray&quot;&gt;QByteArray&lt;/a&gt; QTextCodec::fromUnicode(&lt;a href=&quot;qstringview&quot;&gt;QStringView&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec211f227d2a026dcfce71ad4c9b5b868b64cb49" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbytearray&quot;&gt;QByteArray&lt;/a&gt; QTextCodec::fromUnicode(const &lt;a href=&quot;qchar&quot;&gt;QChar&lt;/a&gt; *</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0231f779224715f943575372ceab49781c56d03" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbytearray&quot;&gt;QByteArray&lt;/a&gt; QTextCodec::fromUnicode(const &lt;a href=&quot;qstring&quot;&gt;QString&lt;/a&gt; &amp;amp;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7a5029d7242145ef5611c41b27ea1b634a70e24" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbytearray&quot;&gt;QByteArray&lt;/a&gt; QTextDocumentWriter::format() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2b3ada52b573d27bda820f3799ee890f8abbfdc" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbytearray&quot;&gt;QByteArray&lt;/a&gt; QTextEncoder::fromUnicode(&lt;a href=&quot;qstringview&quot;&gt;QStringView&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba6eca909b1a1d4cafa5e9052ee361c356bf1935" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbytearray&quot;&gt;QByteArray&lt;/a&gt; QTextEncoder::fromUnicode(const &lt;a href=&quot;qchar&quot;&gt;QChar&lt;/a&gt; *</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89686d7f38851653cf513bc129cc5efe87f2a858" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbytearray&quot;&gt;QByteArray&lt;/a&gt; QTextEncoder::fromUnicode(const &lt;a href=&quot;qstring&quot;&gt;QString&lt;/a&gt; &amp;amp;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3fc470fdd0e80fdd5ef08eb496da74d9269d7d75" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbytearray&quot;&gt;QByteArray&lt;/a&gt; QTextureImageData::data(int</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d647370ee5f675033ec29dd44a41fbec5f44fe0" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbytearray&quot;&gt;QByteArray&lt;/a&gt; QTimeZone::id() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e3c0243fdbd6e528ebd9fd892f8ba7ccadaf6c8" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbytearray&quot;&gt;QByteArray&lt;/a&gt; QUrl::toEncoded(&lt;a href=&quot;qurl#UrlFormattingOption-enum&quot;&gt;QUrl::FormattingOptions&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c64dce1d064209f85d6662f03d2213a86d52a775" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbytearray&quot;&gt;QByteArray&lt;/a&gt; QUuid::toByteArray() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13ea6a5c2944a56f9a9ebe4ccf746172a1c64ca1" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbytearray&quot;&gt;QByteArray&lt;/a&gt; QUuid::toByteArray(&lt;a href=&quot;quuid#StringFormat-enum&quot;&gt;QUuid::StringFormat&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98f66ca7f239f46f979a56d04ed056ef819c4403" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbytearray&quot;&gt;QByteArray&lt;/a&gt; QUuid::toRfc4122() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f43462bba7f04fd852fc3df4bae4e08ddce5faf6" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbytearray&quot;&gt;QByteArray&lt;/a&gt; QVariant::toByteArray() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52d68f7da7b56346f25be21fb4c05600a9354a58" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbytearray&quot;&gt;QByteArray&lt;/a&gt; QVulkanExtension::name</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4c1d31fb2ba73e4e052b8340304ffb6360433aa" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbytearray&quot;&gt;QByteArray&lt;/a&gt; QVulkanLayer::description</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6dd2d05c177135da1500e7a8eb4468e4cb2482af" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbytearray&quot;&gt;QByteArray&lt;/a&gt; QVulkanLayer::name</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8658702321b0ef9d4cefc448e5d7dfdd344d8d5" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbytearray&quot;&gt;QByteArray&lt;/a&gt; QWebEngineHttpRequest::header(const &lt;a href=&quot;qbytearray&quot;&gt;QByteArray&lt;/a&gt; &amp;amp;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83a0a1d58d98572dde4a787e5a4233f217132958" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbytearray&quot;&gt;QByteArray&lt;/a&gt; QWebEngineHttpRequest::postData() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb157cf7ab00b54d29868fe2aeadbee7ff19b49b" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbytearray&quot;&gt;QByteArray&lt;/a&gt; QWebEngineUrlRequestInfo::requestMethod() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40b726a6f9f0eb5d6c27268a963144c51b478f30" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbytearray&quot;&gt;QByteArray&lt;/a&gt; QWebEngineUrlRequestJob::requestMethod() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9e2dfd06628708d261c1acbc91c7d10a68c3ce9" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbytearray&quot;&gt;QByteArray&lt;/a&gt; QWebEngineUrlScheme::name() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27296ddc34eb7a1a41809eb05df4321af94fe17c" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbytearray&quot;&gt;QByteArray&lt;/a&gt; QWidget::saveGeometry() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b48d7cf4ab32b73b6a2810363072974bcefba409" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbytearray&quot;&gt;QByteArray&lt;/a&gt; and &lt;a href=&quot;qlist&quot;&gt;QList&lt;/a&gt;&amp;lt;T&amp;gt; use more or less the same algorithm as &lt;a href=&quot;qstring&quot;&gt;QString&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5471b81fe9db8ec3cd039e65dd20f796f2158b50" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbytearray&quot;&gt;QByteArray&lt;/a&gt; can be used to store both raw bytes (including '\0's) and traditional 8-bit '\0'-terminated strings. Using &lt;a href=&quot;qbytearray&quot;&gt;QByteArray&lt;/a&gt; is much more convenient than using &lt;code&gt;const char *&lt;/code&gt;. Behind the scenes, it always ensures that the data is followed by a '\0' terminator, and uses &lt;a href=&quot;implicit-sharing#&quot;&gt;implicit sharing&lt;/a&gt; (copy-on-write) to reduce memory usage and avoid needless copying of data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8aff0372d2625c62d15247b8788a11c178cfc4e" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbytearray&quot;&gt;QByteArray&lt;/a&gt; makes a deep copy of the &lt;code&gt;const char *&lt;/code&gt; data, so you can modify it later without experiencing side effects. (If for performance reasons you don't want to take a deep copy of the character data, use &lt;a href=&quot;qbytearray#fromRawData&quot;&gt;QByteArray::fromRawData&lt;/a&gt;() instead.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05f426c094bc30b0cb5c0111df7329bceb8fc1d3" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbytearray&quot;&gt;QByteArray&lt;/a&gt; makes a deep copy of the string data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="004db49c0966b1c82dc77fed0d9c83390fee024a" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbytearray&quot;&gt;QByteArray&lt;/a&gt; provides the following basic functions for modifying the byte data: &lt;a href=&quot;qbytearray#append&quot;&gt;append&lt;/a&gt;(), &lt;a href=&quot;qbytearray#prepend&quot;&gt;prepend&lt;/a&gt;(), &lt;a href=&quot;qbytearray#insert&quot;&gt;insert&lt;/a&gt;(), &lt;a href=&quot;qbytearray#replace&quot;&gt;replace&lt;/a&gt;(), and &lt;a href=&quot;qbytearray#remove&quot;&gt;remove&lt;/a&gt;(). For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b15ca0411b8f6769e4d109848c6c37185889ed24" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbytearray&quot;&gt;QByteArray&lt;/a&gt;&amp;amp;</source>
          <target state="translated">&lt;a href=&quot;qbytearray&quot;&gt;QByteArray&lt;/a&gt;&amp;amp;</target>
        </trans-unit>
        <trans-unit id="8e617746b3d7e6202a5ecda082fe30578c45f1f7" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbytearray&quot;&gt;QByteArray&lt;/a&gt;, const &lt;a href=&quot;qbytearray&quot;&gt;QByteArray&lt;/a&gt;&amp;amp;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41e9f1f96b442bb4c4d65b86b851a3a714a2b5cc" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbytearray&quot;&gt;QByteArray&lt;/a&gt;: a byte array (&quot;byte string&quot;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c935f52712ebd4f706227a19e3a8118d6034aab" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbytearray&quot;&gt;QByteArray&lt;/a&gt;qgetenv(const char *</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39238a1c8ca38ae5b17d7ba5a9ca6dc7fb978a07" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbytearray&quot;&gt;QByteArray&lt;/a&gt;s can be compared using overloaded operators such as operator&amp;lt;(), operator&amp;lt;=(), operator==(), operator&amp;gt;=(), and so on. The comparison is based exclusively on the numeric values of the characters and is very fast, but is not what a human would expect. &lt;a href=&quot;qstring#localeAwareCompare&quot;&gt;QString::localeAwareCompare&lt;/a&gt;() is a better choice for sorting user-interface strings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8c75d7c7f77a6e73f4676364b9ca0d69137829c" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbytearray#QByteArray&quot;&gt;QByteArray&lt;/a&gt; &amp;amp;QByteArray::append(char</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f38d4f040d43007db4c8cd8129908f2ce017f17a" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbytearray#QByteArray&quot;&gt;QByteArray&lt;/a&gt; &amp;amp;QByteArray::append(const &lt;a href=&quot;qbytearray#QByteArray&quot;&gt;QByteArray&lt;/a&gt; &amp;amp;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2c360e21194f5c5d6695d949d047b77cf5ae46b" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbytearray#QByteArray&quot;&gt;QByteArray&lt;/a&gt; &amp;amp;QByteArray::append(const &lt;a href=&quot;qstring&quot;&gt;QString&lt;/a&gt; &amp;amp;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02220dad4ba0b5ee3233da99cece1e4dc9eb7323" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbytearray#QByteArray&quot;&gt;QByteArray&lt;/a&gt; &amp;amp;QByteArray::append(const char *</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8dd8a27be53164f7dc6b62aff7138b9114f84f8" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbytearray#QByteArray&quot;&gt;QByteArray&lt;/a&gt; &amp;amp;QByteArray::append(int</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a90285e9e0a9e5a294c07dd979b48c4bdc545333" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbytearray#QByteArray&quot;&gt;QByteArray&lt;/a&gt; &amp;amp;QByteArray::fill(char</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e57e5d1a6bc2cbff66fc4459c3119c16db248478" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbytearray#QByteArray&quot;&gt;QByteArray&lt;/a&gt; &amp;amp;QByteArray::insert(int</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4411d2851a8ea215e8becb61f9d659fa6e34650d" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbytearray#QByteArray&quot;&gt;QByteArray&lt;/a&gt; &amp;amp;QByteArray::operator+=(char</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5005956c93da6520fe05d7a6a1f4e4b7891c9032" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbytearray#QByteArray&quot;&gt;QByteArray&lt;/a&gt; &amp;amp;QByteArray::operator+=(const &lt;a href=&quot;qbytearray#QByteArray&quot;&gt;QByteArray&lt;/a&gt; &amp;amp;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8839b19f3580f33a47a1b5067fe9a9a31ddef459" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbytearray#QByteArray&quot;&gt;QByteArray&lt;/a&gt; &amp;amp;QByteArray::operator+=(const &lt;a href=&quot;qstring&quot;&gt;QString&lt;/a&gt; &amp;amp;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d33171b5821795c4fc16db1258ca2ddc77b09ec9" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbytearray#QByteArray&quot;&gt;QByteArray&lt;/a&gt; &amp;amp;QByteArray::operator+=(const char *</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77915e2d91f4dfa212e41af94295da8b7d603c76" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbytearray#QByteArray&quot;&gt;QByteArray&lt;/a&gt; &amp;amp;QByteArray::operator=(&lt;a href=&quot;qbytearray#QByteArray&quot;&gt;QByteArray&lt;/a&gt; &amp;amp;&amp;amp;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="726e2e281a6c3e69874923136cfd19a658885719" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbytearray#QByteArray&quot;&gt;QByteArray&lt;/a&gt; &amp;amp;QByteArray::operator=(const &lt;a href=&quot;qbytearray#QByteArray&quot;&gt;QByteArray&lt;/a&gt; &amp;amp;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f29968389e10ef7be639e7bc69bb35e5f7198c3" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbytearray#QByteArray&quot;&gt;QByteArray&lt;/a&gt; &amp;amp;QByteArray::operator=(const char *</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab1e79fef3c0e28ac47c24a0ec3996ffbb80c5f9" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbytearray#QByteArray&quot;&gt;QByteArray&lt;/a&gt; &amp;amp;QByteArray::prepend(char</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80e3492306e0c5c26f6f300752fe2e4a75682a5e" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbytearray#QByteArray&quot;&gt;QByteArray&lt;/a&gt; &amp;amp;QByteArray::prepend(const &lt;a href=&quot;qbytearray#QByteArray&quot;&gt;QByteArray&lt;/a&gt; &amp;amp;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81c0651e98ae1beed0605590f4cedfccb4b657e2" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbytearray#QByteArray&quot;&gt;QByteArray&lt;/a&gt; &amp;amp;QByteArray::prepend(const char *</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="306d30b1bd219f16551a986c40f04220a4d74277" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbytearray#QByteArray&quot;&gt;QByteArray&lt;/a&gt; &amp;amp;QByteArray::prepend(int</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf14fb7047486c11ebd048fca5c50d451941ffa2" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbytearray#QByteArray&quot;&gt;QByteArray&lt;/a&gt; &amp;amp;QByteArray::remove(int</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="548850faa4aa3217c55e2f4e61481fc444e25198" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbytearray#QByteArray&quot;&gt;QByteArray&lt;/a&gt; &amp;amp;QByteArray::replace(char</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28a6c1ad3e52286fe548baf5988dbeaa366f81ab" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbytearray#QByteArray&quot;&gt;QByteArray&lt;/a&gt; &amp;amp;QByteArray::replace(const &lt;a href=&quot;qbytearray#QByteArray&quot;&gt;QByteArray&lt;/a&gt; &amp;amp;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a455da27036e64ab9bdfdaa6d81123ab5a5e1a08" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbytearray#QByteArray&quot;&gt;QByteArray&lt;/a&gt; &amp;amp;QByteArray::replace(const &lt;a href=&quot;qstring&quot;&gt;QString&lt;/a&gt; &amp;amp;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d20a795fee48e1361814ee8527e591330984ceb" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbytearray#QByteArray&quot;&gt;QByteArray&lt;/a&gt; &amp;amp;QByteArray::replace(const char *</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3993aa66ecaeb433f51d93d7bc4fdb210546c8e" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbytearray#QByteArray&quot;&gt;QByteArray&lt;/a&gt; &amp;amp;QByteArray::replace(int</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d181d67686324ef4c4e15405e1bc508b1f049ab" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbytearray#QByteArray&quot;&gt;QByteArray&lt;/a&gt; &amp;amp;QByteArray::setNum(&lt;a href=&quot;qtglobal#qlonglong-typedef&quot;&gt;qlonglong&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="398fca2a78dd9cb6fc596e95c6e620970b689c52" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbytearray#QByteArray&quot;&gt;QByteArray&lt;/a&gt; &amp;amp;QByteArray::setNum(&lt;a href=&quot;qtglobal#qulonglong-typedef&quot;&gt;qulonglong&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1db7a2b420a851c662294e6be04409930f8c6cb8" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbytearray#QByteArray&quot;&gt;QByteArray&lt;/a&gt; &amp;amp;QByteArray::setNum(&lt;a href=&quot;qtglobal#uint-typedef&quot;&gt;uint&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d7570c7c75f399f02b1a79d76b26bf62073ba5e" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbytearray#QByteArray&quot;&gt;QByteArray&lt;/a&gt; &amp;amp;QByteArray::setNum(&lt;a href=&quot;qtglobal#ushort-typedef&quot;&gt;ushort&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f91e09a70b4c34273c7a685f3ff951185ccab48" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbytearray#QByteArray&quot;&gt;QByteArray&lt;/a&gt; &amp;amp;QByteArray::setNum(double</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ca5f12781b278cf67d3ba5883a16637633e2c3d" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbytearray#QByteArray&quot;&gt;QByteArray&lt;/a&gt; &amp;amp;QByteArray::setNum(float</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6a21c275f6c06d91fac856b7774a680827ff4b2" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbytearray#QByteArray&quot;&gt;QByteArray&lt;/a&gt; &amp;amp;QByteArray::setNum(int</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce8020876cf0e5b1a4903ebec60b6791c61f51c5" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbytearray#QByteArray&quot;&gt;QByteArray&lt;/a&gt; &amp;amp;QByteArray::setNum(short</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e60ea3ad035e9d1f7ca56770d120e5f4c3f8d64" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbytearray#QByteArray&quot;&gt;QByteArray&lt;/a&gt; &amp;amp;QByteArray::setRawData(const char *</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="514a37d993ed1441ab75983068472b97f8ea22ee" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbytearray#QByteArray&quot;&gt;QByteArray&lt;/a&gt; QByteArray::chopped(int</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c66dc31049ec42ef3024037195006682f0b221f6" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbytearray#QByteArray&quot;&gt;QByteArray&lt;/a&gt; QByteArray::left(int</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ca3929b4acfbb75814d6d982e8733ec730207ac" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbytearray#QByteArray&quot;&gt;QByteArray&lt;/a&gt; QByteArray::leftJustified(int</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb839b819f171bbb00f36c28861f95e1a26984c7" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbytearray#QByteArray&quot;&gt;QByteArray&lt;/a&gt; QByteArray::mid(int</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="069c636d551983fea415124807e48c82bd54e3ae" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbytearray#QByteArray&quot;&gt;QByteArray&lt;/a&gt; QByteArray::qCompress(const &lt;a href=&quot;qbytearray#QByteArray&quot;&gt;QByteArray&lt;/a&gt; &amp;amp;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="006041f1d5aa8bebae5d0ca3ce760fbae3017f98" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbytearray#QByteArray&quot;&gt;QByteArray&lt;/a&gt; QByteArray::qCompress(const &lt;a href=&quot;qtglobal#uchar-typedef&quot;&gt;uchar&lt;/a&gt; *</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2930ef98996bfd0396773eb6ea292cbe902cc57f" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbytearray#QByteArray&quot;&gt;QByteArray&lt;/a&gt; QByteArray::qUncompress(const &lt;a href=&quot;qbytearray#QByteArray&quot;&gt;QByteArray&lt;/a&gt; &amp;amp;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ce777b3977edc79a9b81e5b2597dd6f6b13684f" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbytearray#QByteArray&quot;&gt;QByteArray&lt;/a&gt; QByteArray::qUncompress(const &lt;a href=&quot;qtglobal#uchar-typedef&quot;&gt;uchar&lt;/a&gt; *</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f24cdc2cc8cba234ecdf0532aae23f8128d58bc" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbytearray#QByteArray&quot;&gt;QByteArray&lt;/a&gt; QByteArray::repeated(int</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35151dd0269e3dc1f3511a8538c6fbeabcfbbde6" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbytearray#QByteArray&quot;&gt;QByteArray&lt;/a&gt; QByteArray::right(int</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d8764b9f798f23f5b0390864882a1588f5efc6d" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbytearray#QByteArray&quot;&gt;QByteArray&lt;/a&gt; QByteArray::rightJustified(int</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a730f1e2681bd083da43e069af55a0a1cb308105" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbytearray#QByteArray&quot;&gt;QByteArray&lt;/a&gt; QByteArray::simplified() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20c7deb21301ba8e910aaff39a7461594476f6c2" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbytearray#QByteArray&quot;&gt;QByteArray&lt;/a&gt; QByteArray::toBase64() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04a6b5d13492efe8d565bc6f1ca8eb3405fad90a" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbytearray#QByteArray&quot;&gt;QByteArray&lt;/a&gt; QByteArray::toBase64(&lt;a href=&quot;qbytearray#Base64Option-enum&quot;&gt;QByteArray::Base64Options&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9464319c7f52f5070d6e7127b4447452833657eb" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbytearray#QByteArray&quot;&gt;QByteArray&lt;/a&gt; QByteArray::toHex() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af9376a3e3fe4cbd1072df3b573b9e9e52c45fbe" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbytearray#QByteArray&quot;&gt;QByteArray&lt;/a&gt; QByteArray::toHex(char</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6b6275d9e782fe0bc4046d2b102f3217760bd6b" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbytearray#QByteArray&quot;&gt;QByteArray&lt;/a&gt; QByteArray::toLower() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5fa5dd73122e70902d4a0f9cbbac6bc6705cf964" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbytearray#QByteArray&quot;&gt;QByteArray&lt;/a&gt; QByteArray::toPercentEncoding(const &lt;a href=&quot;qbytearray#QByteArray&quot;&gt;QByteArray&lt;/a&gt; &amp;amp;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="efb3be7c2c8b151a17ad595b448499f91e5a6125" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbytearray#QByteArray&quot;&gt;QByteArray&lt;/a&gt; QByteArray::toUpper() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="417d2f2c7ad27dc7f4ee39ad53dd289116ee4fc5" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbytearray#QByteArray&quot;&gt;QByteArray&lt;/a&gt; QByteArray::trimmed() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d794b860d8be6ce5c1a42243b906fbd96e2411ca" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbytearray#at&quot;&gt;at&lt;/a&gt;() can be faster than operator[](), because it never causes a &lt;a href=&quot;implicit-sharing#deep-copy&quot;&gt;deep copy&lt;/a&gt; to occur.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78d9e2e38ecb4c66a7873f0b76f542f3f6770247" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbytearray#const_iterator-typedef&quot;&gt;QByteArray::const_iterator&lt;/a&gt; QByteArray::begin() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9e1d83bfc86a04eb5ee387b3d5bff290d63c41b" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbytearray#const_iterator-typedef&quot;&gt;QByteArray::const_iterator&lt;/a&gt; QByteArray::cbegin() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f082f705b78ee4c36b2a992f7b8d4b2def84cc2d" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbytearray#const_iterator-typedef&quot;&gt;QByteArray::const_iterator&lt;/a&gt; QByteArray::cend() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc32d44eabd567898b2912fd15456a7dbfecabe7" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbytearray#const_iterator-typedef&quot;&gt;QByteArray::const_iterator&lt;/a&gt; QByteArray::constBegin() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="624c68dc3c4a2756bf74964e79c4571292fd5591" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbytearray#const_iterator-typedef&quot;&gt;QByteArray::const_iterator&lt;/a&gt; QByteArray::constEnd() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66bbfc97f51db7dead4dfd0b98fb0ebf9e5005cf" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbytearray#const_iterator-typedef&quot;&gt;QByteArray::const_iterator&lt;/a&gt; QByteArray::end() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92c674e1fe2c0d06ebc204ee67766a54d5dffba1" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbytearray#const_reverse_iterator-typedef&quot;&gt;QByteArray::const_reverse_iterator&lt;/a&gt; QByteArray::crbegin() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d35226e1190a7c4b497fcfdf6625a5826a70a421" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbytearray#const_reverse_iterator-typedef&quot;&gt;QByteArray::const_reverse_iterator&lt;/a&gt; QByteArray::crend() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8395670b0e4830ae32419bbdc19b223aaa5f4956" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbytearray#const_reverse_iterator-typedef&quot;&gt;QByteArray::const_reverse_iterator&lt;/a&gt; QByteArray::rbegin() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f058e1eac0c39a729a4088877440c3664e3ebd1" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbytearray#const_reverse_iterator-typedef&quot;&gt;QByteArray::const_reverse_iterator&lt;/a&gt; QByteArray::rend() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3126ad572e64f9bb99bc334546a708472700da7" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbytearray#fromBase64&quot;&gt;QByteArray::fromBase64&lt;/a&gt;() ignores the KeepTrailingEquals and OmitTrailingEquals options and will not flag errors in case they are missing or if there are too many of them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96aef4f0d6015af453f607268d277a1cadad0a98" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbytearray#iterator-typedef&quot;&gt;QByteArray::iterator&lt;/a&gt; QByteArray::begin()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8fca96de28b15184e05f177ef4088dfec97f576a" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbytearray#iterator-typedef&quot;&gt;QByteArray::iterator&lt;/a&gt; QByteArray::end()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="050567641e80ea8e00db2fd2a704f48c535b534b" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbytearray#reverse_iterator-typedef&quot;&gt;QByteArray::reverse_iterator&lt;/a&gt; QByteArray::rbegin()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eae7e5995a7711900e387713676559e015ccb215" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbytearray#reverse_iterator-typedef&quot;&gt;QByteArray::reverse_iterator&lt;/a&gt; QByteArray::rend()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="884f4e4c72563e9fb2777a860f3c1f3527779406" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbytearraylist&quot;&gt;QByteArrayList&lt;/a&gt; QVulkanInstance::extensions() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="983eb63e674f80bc22f41eb638e78110fb998839" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbytearraylist&quot;&gt;QByteArrayList&lt;/a&gt; QVulkanInstance::layers() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8242c46fd7897ddbf85757e537dee36f59c6687" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbytearraylist&quot;&gt;QByteArrayList&lt;/a&gt; is actually just a &lt;a href=&quot;qlist&quot;&gt;QList&lt;/a&gt;&amp;lt;&lt;a href=&quot;qbytearray&quot;&gt;QByteArray&lt;/a&gt;&amp;gt;. It is documented as a full class just for simplicity of documenting the member methods that exist only in &lt;a href=&quot;qlist&quot;&gt;QList&lt;/a&gt;&amp;lt;&lt;a href=&quot;qbytearray&quot;&gt;QByteArray&lt;/a&gt;&amp;gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="998412eb7763f98ce4a412dd02acf965a3fe29e3" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbytearraylist&quot;&gt;QByteArrayList&lt;/a&gt; provides both &lt;a href=&quot;containers#java-style-iterators&quot;&gt;Java-style iterators&lt;/a&gt; and &lt;a href=&quot;containers#stl-style-iterators&quot;&gt;STL-style iterators&lt;/a&gt;. The Java-style const iterator is simply a type definition for &lt;a href=&quot;qlistiterator&quot;&gt;QListIterator&lt;/a&gt;&amp;lt;&lt;a href=&quot;qbytearray&quot;&gt;QByteArray&lt;/a&gt;&amp;gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d80a088d5845b80bc9c4a31300a8476f590dd498" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbytearraylist&quot;&gt;QByteArrayList&lt;/a&gt; provides both &lt;a href=&quot;containers#java-style-iterators&quot;&gt;Java-style iterators&lt;/a&gt; and &lt;a href=&quot;containers#stl-style-iterators&quot;&gt;STL-style iterators&lt;/a&gt;. The Java-style non-const iterator is simply a type definition for &lt;a href=&quot;qmutablelistiterator&quot;&gt;QMutableListIterator&lt;/a&gt;&amp;lt;&lt;a href=&quot;qbytearray&quot;&gt;QByteArray&lt;/a&gt;&amp;gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2325912e73c007dc191ab19fd469bb530c478db8" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbytearraylist&quot;&gt;QByteArrayList&lt;/a&gt;, &lt;a href=&quot;qitemselection&quot;&gt;QItemSelection&lt;/a&gt;, &lt;a href=&quot;qqueue&quot;&gt;QQueue&lt;/a&gt;, and &lt;a href=&quot;qstringlist&quot;&gt;QStringList&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a601c4f37aa0398fc7924333a90986e9abf1d9a9" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbytearraymatcher#QByteArrayMatcher&quot;&gt;QByteArrayMatcher&lt;/a&gt; &amp;amp;QByteArrayMatcher::operator=(const &lt;a href=&quot;qbytearraymatcher#QByteArrayMatcher&quot;&gt;QByteArrayMatcher&lt;/a&gt; &amp;amp;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54f54671cfc835e0020167d1921bf3b133c03c38" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbyteref&quot;&gt;QByteRef&lt;/a&gt; QByteArray::back()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e020ce47f388be5078b05e08d8dcd23be36bc57" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbyteref&quot;&gt;QByteRef&lt;/a&gt; QByteArray::front()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1040e7e3750e308b228eadde72602f5be2a88009" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbyteref&quot;&gt;QByteRef&lt;/a&gt; QByteArray::operator[](&lt;a href=&quot;qtglobal#uint-typedef&quot;&gt;uint&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bfe47378eb1c90f04075cc7e92cc27550b99c9d9" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qbyteref&quot;&gt;QByteRef&lt;/a&gt; QByteArray::operator[](int</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="897edb80ee7af45abef4aa01efeba44e98f44027" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcache&quot;&gt;QCache&lt;/a&gt;&amp;lt;Key, T&amp;gt; defines a cache that stores objects of type T associated with keys of type Key. For example, here's the definition of a cache that stores objects of type Employee associated with an integer key:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ee3980757a66b0c816b7c1331b6029e0f484952" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcache&quot;&gt;QCache&lt;/a&gt;&amp;lt;Key, T&amp;gt; provides a cache to store objects of a certain type T associated with keys of type Key.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc93da7cdbf431ce33420ee899857a884cd2fda8" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcalendarwidget&quot;&gt;QCalendarWidget&lt;/a&gt; (2) provides a monthly calendar widget that can be used to select dates.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="413c2f2fb0dd8fc34a18bc856e46e2e0fe102617" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcalendarwidget&quot;&gt;QCalendarWidget&lt;/a&gt; *QDateTimeEdit::calendarWidget() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce7f776218bb2b336aaea746eef8e9ffc7e3dd83" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcamera&quot;&gt;QCamera&lt;/a&gt; also emits &lt;a href=&quot;qcamera#lockStatusChanged&quot;&gt;lockStatusChanged&lt;/a&gt;(&lt;a href=&quot;qcamera#LockType-enum&quot;&gt;QCamera::LockType&lt;/a&gt;, &lt;a href=&quot;qcamera#LockStatus-enum&quot;&gt;QCamera::LockStatus&lt;/a&gt;) on individual lock status changes and &lt;a href=&quot;qcamera#lockStatusChanged&quot;&gt;lockStatusChanged&lt;/a&gt;(&lt;a href=&quot;qcamera#LockStatus-enum&quot;&gt;QCamera::LockStatus&lt;/a&gt;) signal on composite status changes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce2e7c343dba8ab192d5a86c402222f829f6464e" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcamera&quot;&gt;QCamera&lt;/a&gt; can be used with &lt;a href=&quot;qcameraviewfinder&quot;&gt;QCameraViewfinder&lt;/a&gt; for viewfinder display, &lt;a href=&quot;qmediarecorder&quot;&gt;QMediaRecorder&lt;/a&gt; for video recording and &lt;a href=&quot;qcameraimagecapture&quot;&gt;QCameraImageCapture&lt;/a&gt; for image taking.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d57dc1f4a9af287d0b5bb6de9b9437218a38bdce" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcamera&quot;&gt;QCamera&lt;/a&gt; saves all the capture parameters like exposure settings or image processing parameters, so changes to camera parameters after capture() is called do not affect previous capture requests.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a94c3b8abef709a9a363f5ea33af628dd4c165dd" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcamera#Error-enum&quot;&gt;QCamera::Error&lt;/a&gt; QCamera::error() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff65c9da57e7405ebc7fc0469b60a13aff4db2a1" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcamera#LockStatus-enum&quot;&gt;QCamera::LockStatus&lt;/a&gt; QCamera::lockStatus() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56d18d382746d75f57dcfa167f79bb88d49335bf" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcamera#LockStatus-enum&quot;&gt;QCamera::LockStatus&lt;/a&gt; QCamera::lockStatus(&lt;a href=&quot;qcamera#LockType-enum&quot;&gt;QCamera::LockType&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79b70aa1dfabf92c39208fcca4149a0668b8a8c4" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcamera#LockType-enum&quot;&gt;QCamera::LockTypes&lt;/a&gt; QCamera::requestedLocks() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51830d6788359158d27a69c5b399e93b72a1a814" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcamera#LockType-enum&quot;&gt;QCamera::LockTypes&lt;/a&gt; QCamera::supportedLocks() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90056884f91b045b3522894b8c20f243ff8a1b2a" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcamera#Position-enum&quot;&gt;QCamera::Position&lt;/a&gt; QCameraInfo::position() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="138331ad56f1c3932f94baa6d6bada4a505516e3" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcameraexposure&quot;&gt;QCameraExposure&lt;/a&gt; *QCamera::exposure() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef336c8ff458f696ddc605ef3cfbdfbf7b30d8a8" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcamerafocus&quot;&gt;QCameraFocus&lt;/a&gt; *QCamera::focus() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f77702509e03724766c43fc7191fc6e4f7acaabe" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcamerafocuszone#FocusZoneStatus-enum&quot;&gt;QCameraFocusZone::FocusZoneStatus&lt;/a&gt; QCameraFocusZone::status() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64661f55a1773c4f1afe584be1d677eb3c9a7f46" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcameraimagecapture&quot;&gt;QCameraImageCapture&lt;/a&gt;, &lt;a href=&quot;qgraphicsvideoitem&quot;&gt;QGraphicsVideoItem&lt;/a&gt;, &lt;a href=&quot;qmediaplaylist&quot;&gt;QMediaPlaylist&lt;/a&gt;, &lt;a href=&quot;qmediarecorder&quot;&gt;QMediaRecorder&lt;/a&gt;, &lt;a href=&quot;qradiodata&quot;&gt;QRadioData&lt;/a&gt;, and &lt;a href=&quot;qvideowidget&quot;&gt;QVideoWidget&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47bafcb2391f9e8dd392f6a8abf880bf71fedf6b" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcameraimagecapture#CaptureDestination-enum&quot;&gt;QCameraImageCapture::CaptureDestinations&lt;/a&gt; QCameraImageCapture::captureDestination() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7be8dcaca9168f777354d70ebc6aa29483193503" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcameraimagecapture#Error-enum&quot;&gt;QCameraImageCapture::Error&lt;/a&gt; QCameraImageCapture::error() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46c6d3c27a6e2db70f02a983cb168e56d910e4c4" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcameraimageprocessing&quot;&gt;QCameraImageProcessing&lt;/a&gt; *QCamera::imageProcessing() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a5801027bc709c7b4658af9b3595fbba8598b1e" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcameraimageprocessing#ColorFilter-enum&quot;&gt;QCameraImageProcessing::ColorFilter&lt;/a&gt; QCameraImageProcessing::colorFilter() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="454a80f28fd9091984b967301dfccb9e7cbaa6a0" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcameraimageprocessing#WhiteBalanceMode-enum&quot;&gt;QCameraImageProcessing::WhiteBalanceMode&lt;/a&gt; QCameraImageProcessing::whiteBalanceMode() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1cab7b5983e0bf4840b71732998ad56472b054bb" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcamerainfo&quot;&gt;QCameraInfo&lt;/a&gt; lets you query for camera devices that are currently available on the system.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9f5f9c776b0db66802a016a1f34d6a44f36815f" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcamerainfo#QCameraInfo&quot;&gt;QCameraInfo&lt;/a&gt; &amp;amp;QCameraInfo::operator=(const &lt;a href=&quot;qcamerainfo#QCameraInfo&quot;&gt;QCameraInfo&lt;/a&gt; &amp;amp;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e93234379285ca16812f3608ef1705a8940d3ca" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcameraviewfindersettings&quot;&gt;QCameraViewfinderSettings&lt;/a&gt; QCamera::viewfinderSettings() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4729703d0f660cbf18cb5a63caf40035d93a0672" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcameraviewfindersettings#QCameraViewfinderSettings&quot;&gt;QCameraViewfinderSettings&lt;/a&gt; &amp;amp;QCameraViewfinderSettings::operator=(&lt;a href=&quot;qcameraviewfindersettings#QCameraViewfinderSettings&quot;&gt;QCameraViewfinderSettings&lt;/a&gt; &amp;amp;&amp;amp;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c55b4cbd4bee83ab6bac2d349bb8d1412a84d87f" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcameraviewfindersettings#QCameraViewfinderSettings&quot;&gt;QCameraViewfinderSettings&lt;/a&gt; &amp;amp;QCameraViewfinderSettings::operator=(const &lt;a href=&quot;qcameraviewfindersettings#QCameraViewfinderSettings&quot;&gt;QCameraViewfinderSettings&lt;/a&gt; &amp;amp;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="571799f037011c1cbddebdf4b67ec6b576b31a22" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcanbus&quot;&gt;QCanBus&lt;/a&gt; loads Qt CAN Bus plugins at runtime. The ownership of serial bus plugins is transferred to the loader.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b808045075bbf59084d9d82ea09ae71c9b991fd" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcanbus&quot;&gt;QCanBus&lt;/a&gt; provides an API to create a &lt;a href=&quot;qcanbusdevice&quot;&gt;QCanBusDevice&lt;/a&gt; from a chosen plugin.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec5811525692c3f46e7b9c573a9163e1cf4329db" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcanbusdevice&quot;&gt;QCanBusDevice&lt;/a&gt; *QCanBus::createDevice(const &lt;a href=&quot;qstring&quot;&gt;QString&lt;/a&gt; &amp;amp;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a825444bfc96cac478fd91a5a900009a8e6b7c25" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcanbusdevice&quot;&gt;QCanBusDevice&lt;/a&gt; can use &lt;a href=&quot;qcanbusframe&quot;&gt;QCanBusFrame&lt;/a&gt; for read and write operations. It contains the frame identifier and the data payload. &lt;a href=&quot;qcanbusframe&quot;&gt;QCanBusFrame&lt;/a&gt; contains the timestamp of the moment it was read.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24672c30141777423c47ee8a83f62d716eafce45" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcanbusdevice&quot;&gt;QCanBusDevice&lt;/a&gt; communicates with a CAN plugin providing users with a convenient API. The CAN plugin must be specified during the object creation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89976ec076e91a413e8cef8126b27549f358049a" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcanbusdevice&quot;&gt;QCanBusDevice&lt;/a&gt; provides an API for direct access to the CAN device.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21e79d2729ddd8031868f44d697e32c9085fef84" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcanbusdevice#CanBusDeviceState-enum&quot;&gt;QCanBusDevice::CanBusDeviceState&lt;/a&gt; QCanBusDevice::state() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ccc2db52ec2339bc5bc9a1e1d2fd2882c1e7962" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcanbusdevice#CanBusError-enum&quot;&gt;QCanBusDevice::CanBusError&lt;/a&gt; QCanBusDevice::error() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="377a074bc92775b64f56b9d63632ee2583d9689d" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcanbusdevice#ConfigurationKey-enum&quot;&gt;QCanBusDevice::ReceiveOwnKey&lt;/a&gt; must be set to true to receive echo frames.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81f36c791ff5149443cd1f18e34f3a22323d677a" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcanbusdevice#close&quot;&gt;QCanBusDevice::close&lt;/a&gt;()</source>
          <target state="translated">&lt;a href=&quot;qcanbusdevice#close&quot;&gt;QCanBusDevice::close&lt;/a&gt;()</target>
        </trans-unit>
        <trans-unit id="548b7ffcbf2639abf5ede460d4ea83cd2b5f5dc6" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcanbusdevice#interpretErrorFrame&quot;&gt;QCanBusDevice::interpretErrorFrame&lt;/a&gt;()</source>
          <target state="translated">&lt;a href=&quot;qcanbusdevice#interpretErrorFrame&quot;&gt;QCanBusDevice::interpretErrorFrame&lt;/a&gt;()</target>
        </trans-unit>
        <trans-unit id="5aa98a84e354bd1ac187bf51bc9e4e618a9cc571" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcanbusdevice#open&quot;&gt;QCanBusDevice::open&lt;/a&gt;()</source>
          <target state="translated">&lt;a href=&quot;qcanbusdevice#open&quot;&gt;QCanBusDevice::open&lt;/a&gt;()</target>
        </trans-unit>
        <trans-unit id="1b1dd1a7eabd2da4a84886f96e79e780ffe0ff40" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcanbusdevice#writeFrame&quot;&gt;QCanBusDevice::writeFrame&lt;/a&gt;()</source>
          <target state="translated">&lt;a href=&quot;qcanbusdevice#writeFrame&quot;&gt;QCanBusDevice::writeFrame&lt;/a&gt;()</target>
        </trans-unit>
        <trans-unit id="61125268677f5c4a0581a57f152cd2e91f125eea" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcanbusdevice#writeFrame&quot;&gt;QCanBusDevice::writeFrame&lt;/a&gt;() is responsible for sanity checks such as the validity of the &lt;a href=&quot;qcanbusframe&quot;&gt;QCanBusFrame&lt;/a&gt; and that the device is still connected. Provided that the checks passed, it writes the frame to the CAN bus. Upon success it emits the &lt;a href=&quot;qcanbusdevice#framesWritten&quot;&gt;QCanBusDevice::framesWritten&lt;/a&gt;() signal; otherwise &lt;a href=&quot;qcanbusdevice#setError&quot;&gt;QCanBusDevice::setError&lt;/a&gt;() is called with an appropriate error message. This function may also be used to implement an asynchronous write operation. It is the plugin implementors responsibility to emit the appropriate signals at the appropriate time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76f16382cd87668f4259dd74b7645d0418f1a937" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcanbusdevice-filter#FormatFilter-enum&quot;&gt;QCanBusDevice::Filter::FormatFilter&lt;/a&gt; Filter::format</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c04e69613d46b6f4f1a43d8fa45d5e41169c1941" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcanbusdeviceinfo&quot;&gt;QCanBusDeviceInfo&lt;/a&gt; provides information about available CAN devices.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84bcc5937436b660701e78878b01bf40290e077c" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcanbusframe&quot;&gt;QCanBusFrame&lt;/a&gt; QCanBusDevice::readFrame()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1fa689e48bae4e407640ddffe63c916be43cb6c8" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcanbusframe&quot;&gt;QCanBusFrame&lt;/a&gt; defines a CAN frame that can be written and read from &lt;a href=&quot;qcanbusdevice&quot;&gt;QCanBusDevice&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2cd95ca6882592fd54caf2f337fffe2d772d08d5" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcanbusframe&quot;&gt;QCanBusFrame&lt;/a&gt; is a container class representing a single CAN frame. &lt;a href=&quot;#details&quot;&gt;More...&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0de1c43a3f87e467d2fca0018e1fec1e969b00a" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcanbusframe#FrameError-enum&quot;&gt;QCanBusFrame::FrameErrors&lt;/a&gt; QCanBusFrame::error() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="005649aae2eb577e5b3042350efec1a0b132a53a" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcanbusframe#FrameType-enum&quot;&gt;QCanBusFrame::FrameType&lt;/a&gt; Filter::type</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d13d4c08757afcfcd7f471910477a1920962b64a" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcanbusframe#FrameType-enum&quot;&gt;QCanBusFrame::FrameType&lt;/a&gt; QCanBusFrame::frameType() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af68ec59e3c6d1c5399c217e65fc105ce47ee3b5" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcanbusframe-timestamp&quot;&gt;QCanBusFrame::TimeStamp&lt;/a&gt; QCanBusFrame::timeStamp() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20609f120446d5d85c68913d214651f5929cea2a" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcandlesticklegendmarker&quot;&gt;QCandlestickLegendMarker&lt;/a&gt; is related to &lt;a href=&quot;qcandlestickseries&quot;&gt;QCandlestickSeries&lt;/a&gt;, so that one candlestick series results in one marker.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98efe91755417b4ca046855c1e37678902fae398" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcategory3daxis&quot;&gt;QCategory3DAxis&lt;/a&gt; and &lt;a href=&quot;qvalue3daxis&quot;&gt;QValue3DAxis&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9bcb697ab27ca374ce662519ad114bad4692f1c7" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcategory3daxis&quot;&gt;QCategory3DAxis&lt;/a&gt; provides an axis that can be given labels. The axis is divided into equal-sized categories based on the data window size defined by setting the axis range.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73954fee837aa9261457c124ee008dfae01a94b5" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcborarray&quot;&gt;QCborArray&lt;/a&gt; QCborValue::toArray() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="679f850ef833a909283091fba2f5f89c44d05c17" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcborarray&quot;&gt;QCborArray&lt;/a&gt; QCborValue::toArray(const &lt;a href=&quot;qcborarray&quot;&gt;QCborArray&lt;/a&gt; &amp;amp;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92c7a4e7983e72037be551ad1132019da747dd12" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcborarray&quot;&gt;QCborArray&lt;/a&gt; is very similar to &lt;a href=&quot;qvariant#QVariantList-typedef&quot;&gt;QVariantList&lt;/a&gt; and &lt;a href=&quot;qjsonarray&quot;&gt;QJsonArray&lt;/a&gt; and its API is almost identical to those two classes. It can also be converted to and from those two, though there may be loss of information in some conversions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7dec7d4fd10cd152443dc0af34a3379c5f52ac4f" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcborarray&quot;&gt;QCborArray&lt;/a&gt;: an array of QCborValues</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="407373ffb9e6fbf33ae962c40b8bc2067b8a0bce" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcborarray#QCborArray&quot;&gt;QCborArray&lt;/a&gt; &amp;amp;QCborArray::operator&amp;lt;&amp;lt;(const &lt;a href=&quot;qcborvalue&quot;&gt;QCborValue&lt;/a&gt; &amp;amp;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b3a8ff4e24980dea8e6313d9a92d776b0becf5d" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcborarray#QCborArray&quot;&gt;QCborArray&lt;/a&gt; &amp;amp;QCborArray::operator+=(const &lt;a href=&quot;qcborvalue&quot;&gt;QCborValue&lt;/a&gt; &amp;amp;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1415d56a152d3a63c06854b813405cad8aebb54" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcborarray#QCborArray&quot;&gt;QCborArray&lt;/a&gt; &amp;amp;QCborArray::operator=(const &lt;a href=&quot;qcborarray#QCborArray&quot;&gt;QCborArray&lt;/a&gt; &amp;amp;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cdf7216847223e9ec297793056d50fd192932ea4" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcborarray#QCborArray&quot;&gt;QCborArray&lt;/a&gt; QCborArray::operator+(const &lt;a href=&quot;qcborvalue&quot;&gt;QCborValue&lt;/a&gt; &amp;amp;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2b8f9ef0ec4d208b9c9665e86d932c6966120f9" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcborarray#const_iterator-typedef&quot;&gt;QCborArray::const_iterator&lt;/a&gt; QCborArray::begin() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25a0630ef5d440b513e55e38b9c4d3101653783f" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcborarray#const_iterator-typedef&quot;&gt;QCborArray::const_iterator&lt;/a&gt; QCborArray::cbegin() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="649f1d7c329718f5dd7a314e2b2cf72008ac5858" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcborarray#const_iterator-typedef&quot;&gt;QCborArray::const_iterator&lt;/a&gt; QCborArray::cend() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="168c810f0b197f4775a2c4cc3448577d093d927e" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcborarray#const_iterator-typedef&quot;&gt;QCborArray::const_iterator&lt;/a&gt; QCborArray::constBegin() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76d520348fca96313a1aa2eb551a3f70cbcdf880" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcborarray#const_iterator-typedef&quot;&gt;QCborArray::const_iterator&lt;/a&gt; QCborArray::constEnd() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a50fabafb649644abb323b3247f0dcbefd07f12e" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcborarray#const_iterator-typedef&quot;&gt;QCborArray::const_iterator&lt;/a&gt; QCborArray::end() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41184f4856885ac8824c98c215a50eced4ab0079" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcborarray#iterator-typedef&quot;&gt;QCborArray::iterator&lt;/a&gt; QCborArray::begin()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dba97caf27ae8b762aae9107936c284fb15be637" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcborarray#iterator-typedef&quot;&gt;QCborArray::iterator&lt;/a&gt; QCborArray::end()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a46729f7e5fe4dc2fcae14a4445de5ae278141e" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcborarray#iterator-typedef&quot;&gt;QCborArray::iterator&lt;/a&gt; QCborArray::erase(&lt;a href=&quot;qcborarray#const_iterator-typedef&quot;&gt;QCborArray::const_iterator&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a5e6188a67498105ecefbd67aca06ec616aa7fd" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcborarray#iterator-typedef&quot;&gt;QCborArray::iterator&lt;/a&gt; QCborArray::erase(&lt;a href=&quot;qcborarray#iterator-typedef&quot;&gt;QCborArray::iterator&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc48b9d5da935950f96d7488e879983517758446" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcborarray#iterator-typedef&quot;&gt;QCborArray::iterator&lt;/a&gt; QCborArray::insert(&lt;a href=&quot;qcborarray#const_iterator-typedef&quot;&gt;QCborArray::const_iterator&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a51a4f76bef463406c50dffeefb538b0691753d4" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcborarray#iterator-typedef&quot;&gt;QCborArray::iterator&lt;/a&gt; QCborArray::insert(&lt;a href=&quot;qcborarray#iterator-typedef&quot;&gt;QCborArray::iterator&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7e79de404921ef98e33e43f4e5537f2ce4be172" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcborarray-constiterator&quot;&gt;QCborArray::ConstIterator&lt;/a&gt; allows you to iterate over a &lt;a href=&quot;qcborarray&quot;&gt;QCborArray&lt;/a&gt;. If you want to modify the &lt;a href=&quot;qcborarray&quot;&gt;QCborArray&lt;/a&gt; as you iterate over it, use &lt;a href=&quot;qcborarray-iterator&quot;&gt;QCborArray::Iterator&lt;/a&gt; instead. It is generally good practice to use &lt;a href=&quot;qcborarray-constiterator&quot;&gt;QCborArray::ConstIterator&lt;/a&gt;, even on a non-const &lt;a href=&quot;qcborarray&quot;&gt;QCborArray&lt;/a&gt;, when you don't need to change the &lt;a href=&quot;qcborarray&quot;&gt;QCborArray&lt;/a&gt; through the iterator. Const iterators are slightly faster and improves code readability.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="744be70bbd163c4d964c556974ee1d573bea1909" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcborarray-iterator&quot;&gt;QCborArray::Iterator&lt;/a&gt; allows you to iterate over a &lt;a href=&quot;qcborarray&quot;&gt;QCborArray&lt;/a&gt; and to modify the array item associated with the iterator. If you want to iterate over a const &lt;a href=&quot;qcborarray&quot;&gt;QCborArray&lt;/a&gt;, use &lt;a href=&quot;qcborarray-constiterator&quot;&gt;QCborArray::ConstIterator&lt;/a&gt; instead. It is generally a good practice to use &lt;a href=&quot;qcborarray-constiterator&quot;&gt;QCborArray::ConstIterator&lt;/a&gt; on a non-const &lt;a href=&quot;qcborarray&quot;&gt;QCborArray&lt;/a&gt; as well, unless you need to change the &lt;a href=&quot;qcborarray&quot;&gt;QCborArray&lt;/a&gt; through the iterator. Const iterators are slightly faster and improve code readability.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7400d8a4145030b9b919fabc22e005e87c2be795" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcborerror&quot;&gt;QCborError&lt;/a&gt; QCborParserError::error</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72774b666b641f7c329496fba4283b2dfb18112c" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcborerror&quot;&gt;QCborError&lt;/a&gt; QCborStreamReader::lastError()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e44343dd53710ebf937c935275c5bfd49d33f030" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcborerror#Code-enum&quot;&gt;QCborError::Code&lt;/a&gt; QCborError::operator QCborError::Code() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f77d5277a7af3a07845173d3cf52199bbf12e1c" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcbormap&quot;&gt;QCborMap&lt;/a&gt; QCborValue::toMap() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b35b99ecd6feecfd790c5434a9cef6631695d0c" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcbormap&quot;&gt;QCborMap&lt;/a&gt; QCborValue::toMap(const &lt;a href=&quot;qcbormap&quot;&gt;QCborMap&lt;/a&gt; &amp;amp;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="247a37cff6b0ba25dfd5de9faa7f89e27aa902d5" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcbormap&quot;&gt;QCborMap&lt;/a&gt; can also be converted to and from &lt;a href=&quot;qvariant#QVariantMap-typedef&quot;&gt;QVariantMap&lt;/a&gt; and &lt;a href=&quot;qjsonobject&quot;&gt;QJsonObject&lt;/a&gt;. However, when performing the conversion, any non-string keys will be stringified using a one-way method that the conversion back to &lt;a href=&quot;qcbormap&quot;&gt;QCborMap&lt;/a&gt; will not undo.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4f0b0187da34d430d709506740f40fdf93a56c0" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcbormap&quot;&gt;QCborMap&lt;/a&gt; is not sorted, because of that, searching for keys has linear complexity (O(n)). &lt;a href=&quot;qcbormap&quot;&gt;QCborMap&lt;/a&gt; actually keeps the elements in the order that they were inserted, which means that it is possible to make sorted QCborMaps by carefully inserting elements in sorted order. CBOR does not require sorting, but recommends it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="857c1cd8c1ffdc5eb2c878a9e3b2cb7986e905e3" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcbormap&quot;&gt;QCborMap&lt;/a&gt;: an associative container of QCborValues</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e886821255794f224cc4070e05dbe4550ccccaa9" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcbormap#QCborMap&quot;&gt;QCborMap&lt;/a&gt; &amp;amp;QCborMap::operator=(const &lt;a href=&quot;qcbormap#QCborMap&quot;&gt;QCborMap&lt;/a&gt; &amp;amp;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f92e0541b403d501a2ed63c822d2dc4dcc836da" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcbormap#const_iterator-typedef&quot;&gt;QCborMap::const_iterator&lt;/a&gt; QCborMap::begin() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7cc51fd8fe62d642a02f6d3aa444c5391bcc464" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcbormap#const_iterator-typedef&quot;&gt;QCborMap::const_iterator&lt;/a&gt; QCborMap::cbegin() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e41f6ca5b296aff1d6688c69053bf99efca9d3b0" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcbormap#const_iterator-typedef&quot;&gt;QCborMap::const_iterator&lt;/a&gt; QCborMap::cend() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1616190ec42e7dfae372c3a2cccd34700ed7b8ff" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcbormap#const_iterator-typedef&quot;&gt;QCborMap::const_iterator&lt;/a&gt; QCborMap::constBegin() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ecd3fc90131a2cebce02cc957795283804b0d066" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcbormap#const_iterator-typedef&quot;&gt;QCborMap::const_iterator&lt;/a&gt; QCborMap::constEnd() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab155f3b9ed1068628c8c1fc7a1ac31730eedb49" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcbormap#const_iterator-typedef&quot;&gt;QCborMap::const_iterator&lt;/a&gt; QCborMap::constFind(&lt;a href=&quot;qlatin1string&quot;&gt;QLatin1String&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ab6290ffa85a563c43e2927484f6b109db1fd22" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcbormap#const_iterator-typedef&quot;&gt;QCborMap::const_iterator&lt;/a&gt; QCborMap::constFind(&lt;a href=&quot;qtglobal#qint64-typedef&quot;&gt;qint64&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68b46d91ede453e498f36c74731a540ba9df79ec" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcbormap#const_iterator-typedef&quot;&gt;QCborMap::const_iterator&lt;/a&gt; QCborMap::constFind(const &lt;a href=&quot;qcborvalue&quot;&gt;QCborValue&lt;/a&gt; &amp;amp;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6a7cfed3fb6cef2efd3cc157a741c8f513e12c5" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcbormap#const_iterator-typedef&quot;&gt;QCborMap::const_iterator&lt;/a&gt; QCborMap::constFind(const &lt;a href=&quot;qstring&quot;&gt;QString&lt;/a&gt; &amp;amp;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d34956b437adf305c558b9b59a4425b43c3f8f1a" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcbormap#const_iterator-typedef&quot;&gt;QCborMap::const_iterator&lt;/a&gt; QCborMap::end() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16bae505e1f2e006751379940afa00a1443ae05a" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcbormap#const_iterator-typedef&quot;&gt;QCborMap::const_iterator&lt;/a&gt; QCborMap::find(&lt;a href=&quot;qlatin1string&quot;&gt;QLatin1String&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b91f0dd40d017db3b0591bc3bc54ab7198515cea" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcbormap#const_iterator-typedef&quot;&gt;QCborMap::const_iterator&lt;/a&gt; QCborMap::find(&lt;a href=&quot;qtglobal#qint64-typedef&quot;&gt;qint64&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14d86c0adbb6c36aea2576903af5470e5288a91a" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcbormap#const_iterator-typedef&quot;&gt;QCborMap::const_iterator&lt;/a&gt; QCborMap::find(const &lt;a href=&quot;qcborvalue&quot;&gt;QCborValue&lt;/a&gt; &amp;amp;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52f94f579729d9ce0442d58ebc57d1e70394755f" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcbormap#const_iterator-typedef&quot;&gt;QCborMap::const_iterator&lt;/a&gt; QCborMap::find(const &lt;a href=&quot;qstring&quot;&gt;QString&lt;/a&gt; &amp;amp;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f5e510e598de9f7711a1049c584504404daf4f7" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcbormap#iterator-typedef&quot;&gt;QCborMap::iterator&lt;/a&gt; QCborMap::begin()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d70071d4fd33553822006a9b0d951340cc77152" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcbormap#iterator-typedef&quot;&gt;QCborMap::iterator&lt;/a&gt; QCborMap::end()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1471e6fe8c0767cb74c9b52460a062031b215ccf" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcbormap#iterator-typedef&quot;&gt;QCborMap::iterator&lt;/a&gt; QCborMap::erase(&lt;a href=&quot;qcbormap#const_iterator-typedef&quot;&gt;QCborMap::const_iterator&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86fb5864ba72bf5c0bffbebcca8c46d1bb2eaa9a" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcbormap#iterator-typedef&quot;&gt;QCborMap::iterator&lt;/a&gt; QCborMap::erase(&lt;a href=&quot;qcbormap#iterator-typedef&quot;&gt;QCborMap::iterator&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c948133222129b3bf48dbe4a2bc8b832237aaeaf" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcbormap#iterator-typedef&quot;&gt;QCborMap::iterator&lt;/a&gt; QCborMap::find(&lt;a href=&quot;qlatin1string&quot;&gt;QLatin1String&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84c5e5ae85ac703ae738fa98228aa67901611954" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcbormap#iterator-typedef&quot;&gt;QCborMap::iterator&lt;/a&gt; QCborMap::find(&lt;a href=&quot;qtglobal#qint64-typedef&quot;&gt;qint64&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="449f662636033abede5b383fc7b845a287b382cd" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcbormap#iterator-typedef&quot;&gt;QCborMap::iterator&lt;/a&gt; QCborMap::find(const &lt;a href=&quot;qcborvalue&quot;&gt;QCborValue&lt;/a&gt; &amp;amp;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f18f9a4a9a5ff074ab984fda8140c26d8f59bc27" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcbormap#iterator-typedef&quot;&gt;QCborMap::iterator&lt;/a&gt; QCborMap::find(const &lt;a href=&quot;qstring&quot;&gt;QString&lt;/a&gt; &amp;amp;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a298a6d9fff68216fa573661e6675b1ba7ab940" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcbormap#iterator-typedef&quot;&gt;QCborMap::iterator&lt;/a&gt; QCborMap::insert(&lt;a href=&quot;qcbormap#value_type-typedef&quot;&gt;QCborMap::value_type&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d0f98d35d46ed9032d07c2f11a8c76c208f8282" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcbormap#iterator-typedef&quot;&gt;QCborMap::iterator&lt;/a&gt; QCborMap::insert(&lt;a href=&quot;qlatin1string&quot;&gt;QLatin1String&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="696cde04c014572c64bcf142dac944e60c88bc48" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcbormap#iterator-typedef&quot;&gt;QCborMap::iterator&lt;/a&gt; QCborMap::insert(&lt;a href=&quot;qtglobal#qint64-typedef&quot;&gt;qint64&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ddc2d141afea9164dbd49d847bab5ee8028f689a" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcbormap#iterator-typedef&quot;&gt;QCborMap::iterator&lt;/a&gt; QCborMap::insert(const &lt;a href=&quot;qcborvalue&quot;&gt;QCborValue&lt;/a&gt; &amp;amp;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f67e35f584c207aea4904a9bf1085275c00bafe" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcbormap#iterator-typedef&quot;&gt;QCborMap::iterator&lt;/a&gt; QCborMap::insert(const &lt;a href=&quot;qstring&quot;&gt;QString&lt;/a&gt; &amp;amp;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6fd17127506f4a342e5b650e27110b22a455a0b" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcbormap-constiterator&quot;&gt;QCborMap::ConstIterator&lt;/a&gt; allows you to iterate over a &lt;a href=&quot;qcbormap&quot;&gt;QCborMap&lt;/a&gt;. If you want to modify the &lt;a href=&quot;qcbormap&quot;&gt;QCborMap&lt;/a&gt; as you iterate over it, you must use &lt;a href=&quot;qcbormap-iterator&quot;&gt;QCborMap::Iterator&lt;/a&gt; instead. It is generally good practice to use &lt;a href=&quot;qcbormap-constiterator&quot;&gt;QCborMap::ConstIterator&lt;/a&gt;, even on a non-const &lt;a href=&quot;qcbormap&quot;&gt;QCborMap&lt;/a&gt;, when you don't need to change the &lt;a href=&quot;qcbormap&quot;&gt;QCborMap&lt;/a&gt; through the iterator. Const iterators are slightly faster and improve code readability.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a2c88f01b5305d7a9c74905b12e46c9c5bdc7ec" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcbormap-iterator&quot;&gt;QCborMap::Iterator&lt;/a&gt; allows you to iterate over a &lt;a href=&quot;qcbormap&quot;&gt;QCborMap&lt;/a&gt; and to modify the value (but not the key) stored under a particular key. If you want to iterate over a const &lt;a href=&quot;qcbormap&quot;&gt;QCborMap&lt;/a&gt;, you should use &lt;a href=&quot;qcbormap-constiterator&quot;&gt;QCborMap::ConstIterator&lt;/a&gt;. It is generally good practice to use &lt;a href=&quot;qcbormap-constiterator&quot;&gt;QCborMap::ConstIterator&lt;/a&gt; on a non-const &lt;a href=&quot;qcbormap&quot;&gt;QCborMap&lt;/a&gt; as well, unless you need to change the &lt;a href=&quot;qcbormap&quot;&gt;QCborMap&lt;/a&gt; through the iterator. Const iterators are slightly faster, and improve code readability.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29dc50a854b29a6d3afc9fa9d4c11c80c005761a" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcborstreamreader&quot;&gt;QCborStreamReader&lt;/a&gt; is capable of detecting corrupt input on its own. The library it uses has been extensively tested against invalid input of any kind and is quite able to report errors. If any is detected, &lt;a href=&quot;qcborstreamreader&quot;&gt;QCborStreamReader&lt;/a&gt; will set &lt;a href=&quot;qcborstreamreader#lastError&quot;&gt;lastError&lt;/a&gt;() to a value besides &lt;a href=&quot;qcborerror#Code-enum&quot;&gt;QCborError::NoError&lt;/a&gt;, indicating which situation was detected.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69d54bb1ff6a658c98689a1cbe09fe7a7aa4658c" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcborstreamreader&quot;&gt;QCborStreamReader&lt;/a&gt; provides a StAX-like API, similar to that of &lt;a href=&quot;qxmlstreamreader&quot;&gt;QXmlStreamReader&lt;/a&gt;. Using it requires a bit of knowledge of CBOR encoding. For a simpler API, see &lt;a href=&quot;qcborvalue&quot;&gt;QCborValue&lt;/a&gt; and especially the decoding function &lt;a href=&quot;qcborvalue#fromCbor&quot;&gt;QCborValue::fromCbor&lt;/a&gt;().</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7bba893200b39e345c3dcdddf0e5859917bb7bb" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcborstreamreader#StringResultCode-enum&quot;&gt;QCborStreamReader::StringResultCode&lt;/a&gt; StringResult::status</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c747d2b61951a39dab219b99e8f955090d9c5e2" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcborstreamreader#Type-enum&quot;&gt;QCborStreamReader::Type&lt;/a&gt; QCborStreamReader::parentContainerType() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f56b4c43d8abadbe4a911fb5e06f7e4d7b3bb6da" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcborstreamreader#Type-enum&quot;&gt;QCborStreamReader::Type&lt;/a&gt; QCborStreamReader::type() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b80c807a7e1946ac453a83e5f4630273d78492e" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcborstreamreader#next&quot;&gt;QCborStreamReader::next&lt;/a&gt;() was called but there are no more elements in the current context.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a98b6205609bd10114e9f427770ef249a120ef1" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcborstreamreader-stringresult&quot;&gt;StringResult&lt;/a&gt;&amp;lt;&lt;a href=&quot;qbytearray&quot;&gt;QByteArray&lt;/a&gt;&amp;gt; QCborStreamReader::readByteArray()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1313be6decbe84593212831c549e4801c5e5a7b8" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcborstreamreader-stringresult&quot;&gt;StringResult&lt;/a&gt;&amp;lt;&lt;a href=&quot;qstring&quot;&gt;QString&lt;/a&gt;&amp;gt; QCborStreamReader::readString()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49f6a0b9da4d76e101726f231aaf602fca2c3d74" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcborstreamreader-stringresult&quot;&gt;StringResult&lt;/a&gt;&amp;lt;qsizetype&amp;gt; QCborStreamReader::readStringChunk(char *</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d04c45198ad271ac913d982e09f8deff6273942" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcborstreamwriter&quot;&gt;QCborStreamWriter&lt;/a&gt; does not perform error checking to see if all required items were written to the stream prior to the object being destroyed. It is the programmer's responsibility to ensure that it was done.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4fe6a448bf2541670177f2f80b96229df8a69ca" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcborstreamwriter&quot;&gt;QCborStreamWriter&lt;/a&gt; does not take ownership of</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49d39ab557a4839f12fc4d2dcf5ef52037f58a7b" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcborstreamwriter&quot;&gt;QCborStreamWriter&lt;/a&gt; has no buffering, so every &lt;a href=&quot;qcborstreamwriter#append&quot;&gt;append&lt;/a&gt;() call will result in one or more calls to the device's &lt;a href=&quot;qiodevice#write&quot;&gt;write()&lt;/a&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aed4db7bb4be30697a46d45eca9006f930582138" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcborstreamwriter&quot;&gt;QCborStreamWriter&lt;/a&gt; provides a StAX-like API, similar to that of &lt;a href=&quot;qxmlstreamwriter&quot;&gt;QXmlStreamWriter&lt;/a&gt;. It is rather low-level and requires a bit of knowledge of CBOR encoding. For a simpler API, see &lt;a href=&quot;qcborvalue&quot;&gt;QCborValue&lt;/a&gt; and especially the encoding function &lt;a href=&quot;qcborvalue#toCbor&quot;&gt;QCborValue::toCbor&lt;/a&gt;().</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a87d32bb615dae44b1380cba3c3189c2795eee3e" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcborstreamwriter&quot;&gt;QCborStreamWriter&lt;/a&gt; supports all CBOR features required to create canonical and strict streams. It implements almost all of the features specified in &lt;a href=&quot;https://tools.ietf.org/html/rfc7049&quot;&gt;RFC 7049&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6edc035974da9068ffb428b9c0d561498bfd855e" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcborvalue&quot;&gt;QCborValue&lt;/a&gt; ConstIterator::key() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9b37e38d77dbdf5046207fab599ce6b2a8a6e26" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcborvalue&quot;&gt;QCborValue&lt;/a&gt; Iterator::key() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="172ab986462cb7aa910756e2744477a1e54523cd" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcborvalue&quot;&gt;QCborValue&lt;/a&gt; QCborArray::at(qsizetype</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bff71253c609cda5aaa75325533d179aaed2390f" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcborvalue&quot;&gt;QCborValue&lt;/a&gt; QCborArray::extract(&lt;a href=&quot;qcborarray-constiterator&quot;&gt;QCborArray::ConstIterator&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b83720a4fb280bb3de9bd577bc71b436403917a" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcborvalue&quot;&gt;QCborValue&lt;/a&gt; QCborArray::extract(&lt;a href=&quot;qcborarray-iterator&quot;&gt;QCborArray::Iterator&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99d1490ae3ed40646d3a5e124f80d92591330542" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcborvalue&quot;&gt;QCborValue&lt;/a&gt; QCborArray::first() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e0a04724908d6f8fc420571a38fdb91da0d884f" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcborvalue&quot;&gt;QCborValue&lt;/a&gt; QCborArray::last() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac29c7d52a896d37cac85e2635a4f762bd883941" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcborvalue&quot;&gt;QCborValue&lt;/a&gt; QCborArray::takeAt(qsizetype</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a27f6732df4b505087493bc8156239737733b3e" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcborvalue&quot;&gt;QCborValue&lt;/a&gt; QCborArray::takeFirst()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30174e676f7f7712fbf6fb5e8b74227295b401a0" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcborvalue&quot;&gt;QCborValue&lt;/a&gt; QCborArray::takeLast()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16fe3a900cc7351297218afe1ffd674c616f0cdc" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcborvalue&quot;&gt;QCborValue&lt;/a&gt; QCborArray::toCborValue() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9879f140b5971abd3213ec409fbcf8b3c8130032" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcborvalue&quot;&gt;QCborValue&lt;/a&gt; QCborMap::extract(&lt;a href=&quot;qcbormap#const_iterator-typedef&quot;&gt;QCborMap::const_iterator&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5a64e177f2373e4b0ad7c2f4f644114d77ebce7" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcborvalue&quot;&gt;QCborValue&lt;/a&gt; QCborMap::extract(&lt;a href=&quot;qcbormap#iterator-typedef&quot;&gt;QCborMap::iterator&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="943d083bca6f42a7880ffd1911a140befee27488" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcborvalue&quot;&gt;QCborValue&lt;/a&gt; QCborMap::take(&lt;a href=&quot;qlatin1string&quot;&gt;QLatin1String&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29c4a3de6eafd0cc91665d7f9746f5e382255685" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcborvalue&quot;&gt;QCborValue&lt;/a&gt; QCborMap::take(&lt;a href=&quot;qtglobal#qint64-typedef&quot;&gt;qint64&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87939dcbc9903b29d6c9c5d0a17b0bad59221b86" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcborvalue&quot;&gt;QCborValue&lt;/a&gt; QCborMap::take(const &lt;a href=&quot;qcborvalue&quot;&gt;QCborValue&lt;/a&gt; &amp;amp;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="473ae57fa958afaea1c23bfef9fca5c5a5183ac3" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcborvalue&quot;&gt;QCborValue&lt;/a&gt; QCborMap::take(const &lt;a href=&quot;qstring&quot;&gt;QString&lt;/a&gt; &amp;amp;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34ec86041cd188c38c3da204d106b97ca83d9d9a" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcborvalue&quot;&gt;QCborValue&lt;/a&gt; QCborMap::toCborValue() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="051ca62ae88b854b10f1db35d4af0d53b7078725" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcborvalue&quot;&gt;QCborValue&lt;/a&gt; QCborMap::value(&lt;a href=&quot;qlatin1string&quot;&gt;QLatin1String&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3e02e06f589fb950e8f2b346b663eb5224113bf" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcborvalue&quot;&gt;QCborValue&lt;/a&gt; QCborMap::value(&lt;a href=&quot;qtglobal#qint64-typedef&quot;&gt;qint64&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1cb187e6fa57a6c1286fe1420e5cc9a2cf9868ca" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcborvalue&quot;&gt;QCborValue&lt;/a&gt; QCborMap::value(const &lt;a href=&quot;qcborvalue&quot;&gt;QCborValue&lt;/a&gt; &amp;amp;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2b7aaf7aa306f449300ea04248fd293f90ea359" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcborvalue&quot;&gt;QCborValue&lt;/a&gt; QCborMap::value(const &lt;a href=&quot;qstring&quot;&gt;QString&lt;/a&gt; &amp;amp;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93c301130b58ff68d766fdec9e10d74950f86196" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcborvalue&quot;&gt;QCborValue&lt;/a&gt; can also be of the undefined type, which represents a value of &quot;undefined&quot;. In fact, that is what the &lt;a href=&quot;qcborvalue&quot;&gt;QCborValue&lt;/a&gt; default constructor creates.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15d943bb679bb17eb5b36428cb131a1cdf2adabb" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcborvalue&quot;&gt;QCborValue&lt;/a&gt; can contain a value of &quot;null&quot;, which is not of any specific type. It resembles the C++ &lt;code&gt;std::nullptr_t&lt;/code&gt; type, whose only possible value is &lt;code&gt;nullptr&lt;/code&gt;. &lt;a href=&quot;qcborvalue&quot;&gt;QCborValue&lt;/a&gt; has a constructor taking such a type and creates a null &lt;a href=&quot;qcborvalue&quot;&gt;QCborValue&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8b48c7554812a05fff8ff2a6d00b3b243d2f503" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcborvalue&quot;&gt;QCborValue&lt;/a&gt; compares equal a &lt;a href=&quot;qcborvalue&quot;&gt;QCborValue&lt;/a&gt; containing an extended type, like &lt;a href=&quot;qcborvalue#Type-enum&quot;&gt;Url&lt;/a&gt; and &lt;a href=&quot;qcborvalue#Type-enum&quot;&gt;Url&lt;/a&gt; and its equivalent tagged representation. So, for example, the following expression is true:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29c2d29d071102afc95e02d82e99284ce428d19c" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcborvalue&quot;&gt;QCborValue&lt;/a&gt; has support for certain extended types in the API, like URL (with &lt;a href=&quot;qurl&quot;&gt;QUrl&lt;/a&gt;) and UUID (with &lt;a href=&quot;quuid&quot;&gt;QUuid&lt;/a&gt;). Other extended types not supported in the API are represented by a &lt;a href=&quot;qcborvalue&quot;&gt;QCborValue&lt;/a&gt; of &lt;a href=&quot;qcborvalue#Type-enum&quot;&gt;Tag&lt;/a&gt; type. The tag can later be retrieved by &lt;a href=&quot;qcborvalue#tag&quot;&gt;tag&lt;/a&gt;() and the tagged value using &lt;a href=&quot;qcborvalue#taggedValue&quot;&gt;taggedValue&lt;/a&gt;().</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="280774bd9965b511810195e5f8bf006a87ce6a77" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcborvalue&quot;&gt;QCborValue&lt;/a&gt; object into this one and frees the resources of this one.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3a7c8cddbc40eced278466798b2025144883050" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcborvalue&quot;&gt;QCborValue&lt;/a&gt; object into this one and frees the resources of this one. Returns a reference to this object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eacc0cdad0fd56f44e6a464d665bb1e230cbd86c" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcborvalue&quot;&gt;QCborValue&lt;/a&gt; objects with undefined values are also different from invalid &lt;a href=&quot;qcborvalue&quot;&gt;QCborValue&lt;/a&gt; objects. The API will not create invalid QCborValues, but they may exist as a result of a parsing error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16bf1cd9d9352eb4a18ac1c580b2f01436ed971a" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcborvalue&quot;&gt;QCborValue&lt;/a&gt; supports all CBOR features required to create canonical and strict streams. It implements almost all of the features specified in &lt;a href=&quot;https://tools.ietf.org/html/rfc7049&quot;&gt;RFC 7049&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e071936db1375f0190bb3e1a8556fc24aa9e54a" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcborvalue&quot;&gt;QCborValue&lt;/a&gt; will always convert half- and single-precision floating point values in the CBOR stream to double-precision. The &lt;a href=&quot;qcborvalue#toCbor&quot;&gt;toCbor&lt;/a&gt;() function can take a parameter indicating to recreate them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b82591a4adc5dd9f59e73be8adac2e348c2fe5e2" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcborvalue#QCborValue&quot;&gt;QCborValue&lt;/a&gt; &amp;amp;QCborValue::operator=(&lt;a href=&quot;qcborvalue#QCborValue&quot;&gt;QCborValue&lt;/a&gt; &amp;amp;&amp;amp;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2473b18f4c1f82a5a1b7d325f0ea2b1b93a00096" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcborvalue#QCborValue&quot;&gt;QCborValue&lt;/a&gt; &amp;amp;QCborValue::operator=(const &lt;a href=&quot;qcborvalue#QCborValue&quot;&gt;QCborValue&lt;/a&gt; &amp;amp;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4447a47cddb1e0373b530103c1972e9daf4f711" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcborvalue#QCborValue&quot;&gt;QCborValue&lt;/a&gt; QCborValue::taggedValue(const &lt;a href=&quot;qcborvalue#QCborValue&quot;&gt;QCborValue&lt;/a&gt; &amp;amp;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8fbe8e19f9b085de5cf7c1d5ea5a47db653f7c4d" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcborvalue#Type-enum&quot;&gt;QCborValue::Type&lt;/a&gt; QCborValue::type() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b26504623ee3f5dedab6f55eb4ecd70c79900b7" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcborvalue#fromCbor&quot;&gt;fromCbor&lt;/a&gt;() is able to decode chunked strings, but will always merge the chunks together into a single &lt;a href=&quot;qcborvalue&quot;&gt;QCborValue&lt;/a&gt;. For that reason, it always writes non-chunked strings when using &lt;a href=&quot;qcborvalue#toCbor&quot;&gt;toCbor&lt;/a&gt;() (which is required by the Canonical format anyway).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fcc50e151e7ffd8b8a0f701cb05708e027ba0983" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcborvalue#isSimpleType&quot;&gt;isSimpleType&lt;/a&gt;(), &lt;a href=&quot;qcborvalue#isNull&quot;&gt;isNull&lt;/a&gt;(), &lt;a href=&quot;qcborvalue#isUndefined&quot;&gt;isUndefined&lt;/a&gt;(), &lt;a href=&quot;qcborvalue#isTrue&quot;&gt;isTrue&lt;/a&gt;(), &lt;a href=&quot;qcborvalue#isFalse&quot;&gt;isFalse&lt;/a&gt;()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed3c146a127c0d76ee00e7861a6aea3484599ef7" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcborvalue#qcborvalueref&quot;&gt;QCborValueRef&lt;/a&gt; has the exact same API as &lt;a href=&quot;qcborvalue&quot;&gt;QCborValue&lt;/a&gt;, with one important difference: if you assign new values to it, this array will be updated with that new value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d52436969ed625469b8081af75a80bb81830941" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcborvalue#qcborvalueref&quot;&gt;QCborValueRef&lt;/a&gt; has the exact same API as &lt;a href=&quot;qcborvalue&quot;&gt;QCborValue&lt;/a&gt;, with one important difference: if you assign new values to it, this map will be updated with that new value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9fd7bbefd1c640030624cb8ff8f094fe0c0fd0c7" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcborvalue#qcborvalueref&quot;&gt;QCborValueRef&lt;/a&gt; is a helper class for &lt;a href=&quot;qcborarray&quot;&gt;QCborArray&lt;/a&gt; and &lt;a href=&quot;qcbormap&quot;&gt;QCborMap&lt;/a&gt;. It is the type you get when using one of the mutating APIs in those classes. Unlike &lt;a href=&quot;qcborvalue&quot;&gt;QCborValue&lt;/a&gt;, new values can be assigned to that class. When that is done, the array or map it refers to will be modified with the new value. In all other aspects, its API is identical to &lt;a href=&quot;qcborvalue&quot;&gt;QCborValue&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5dfbd97235b1253958310cda01241d0641c7b0c5" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcborvalueref&quot;&gt;QCborValueRef&lt;/a&gt; *Iterator::operator-&amp;gt;() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d43a20a2ab128edbb069757e99aa9d6508a55585" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcborvalueref&quot;&gt;QCborValueRef&lt;/a&gt; ConstIterator::value() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ef18c3e6a7f34ec347fb65e587e967614ab57fb" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcborvalueref&quot;&gt;QCborValueRef&lt;/a&gt; Iterator::operator*() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c15861a11240e3608044615ff4df53a5ba6eba6" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcborvalueref&quot;&gt;QCborValueRef&lt;/a&gt; Iterator::operator[](qsizetype</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41844a5c3ec74c7228a99a71c8e56b96e67e353e" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcborvalueref&quot;&gt;QCborValueRef&lt;/a&gt; Iterator::value() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a32ace26fb200e937a4166b1f42eedfc1359f67f" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcborvalueref&quot;&gt;QCborValueRef&lt;/a&gt; QCborArray::first()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1fbcf6d89621d7fb69e843556953de24182e4760" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcborvalueref&quot;&gt;QCborValueRef&lt;/a&gt; QCborArray::last()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dbf0e3535ad859c0798829a536ffe4ca687f156a" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcborvalueref&quot;&gt;QCborValueRef&lt;/a&gt; QCborArray::operator[](qsizetype</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7a474d72b225164b09aeac97dd7fe01570e980c" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcborvalueref&quot;&gt;QCborValueRef&lt;/a&gt; QCborMap::operator[](&lt;a href=&quot;qlatin1string&quot;&gt;QLatin1String&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9ba424fcbadd13b82982589b950f007b04e91ab" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcborvalueref&quot;&gt;QCborValueRef&lt;/a&gt; QCborMap::operator[](&lt;a href=&quot;qtglobal#qint64-typedef&quot;&gt;qint64&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4df2559a70cfb901140329dddfaa5c95c0d4e85a" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcborvalueref&quot;&gt;QCborValueRef&lt;/a&gt; QCborMap::operator[](const &lt;a href=&quot;qcborvalue&quot;&gt;QCborValue&lt;/a&gt; &amp;amp;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6438c62e44ac77f7c2c978f6b1d2b325f473377a" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcborvalueref&quot;&gt;QCborValueRef&lt;/a&gt; QCborMap::operator[](const &lt;a href=&quot;qstring&quot;&gt;QString&lt;/a&gt; &amp;amp;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ebab0403d5b5d5b97020a0b641759ae355b72dc4" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcborvalueref&quot;&gt;QCborValueRef&lt;/a&gt; QCborValue::operator[](&lt;a href=&quot;qlatin1string&quot;&gt;QLatin1String&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="632206616951da804bbd3fff89bb344bff30fa7d" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcborvalueref&quot;&gt;QCborValueRef&lt;/a&gt; QCborValue::operator[](&lt;a href=&quot;qtglobal#qint64-typedef&quot;&gt;qint64&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b52e491db36063dc125d6c4df365bbc27f13abc" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcborvalueref&quot;&gt;QCborValueRef&lt;/a&gt; QCborValue::operator[](const &lt;a href=&quot;qstring&quot;&gt;QString&lt;/a&gt; &amp;amp;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85490285499b920e9d27a4531746fe8c290ca61a" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qchar&quot;&gt;QChar&lt;/a&gt; *QString::data()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3121dcaf8a25dbc6d804583d0218afb9582935c" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qchar&quot;&gt;QChar&lt;/a&gt; QLocale::decimalPoint() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df833d3d916eaaf8e4e84246f0854188554b9e50" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qchar&quot;&gt;QChar&lt;/a&gt; QLocale::exponential() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bfb3568d13e7086d5d97c2428f0afcab76edcdf3" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qchar&quot;&gt;QChar&lt;/a&gt; QLocale::groupSeparator() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4c99c6681fe5539aad398c999271f031a8de76f" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qchar&quot;&gt;QChar&lt;/a&gt; QLocale::negativeSign() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3028be4bceb5518a5eb72c4c5e3cef8bbdfa9de5" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qchar&quot;&gt;QChar&lt;/a&gt; QLocale::percent() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c673dbd894680baaf41f2afaf2bdd443e73db955" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qchar&quot;&gt;QChar&lt;/a&gt; QLocale::positiveSign() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c88134861fab5919e546fa7365d8dfed40720dd8" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qchar&quot;&gt;QChar&lt;/a&gt; QLocale::zeroDigit() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="349fe8810f3565d152bb622b062d737048756170" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qchar&quot;&gt;QChar&lt;/a&gt; QString::back() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3eae248b0721ca09dc17dab0c9714e3014f4f70" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qchar&quot;&gt;QChar&lt;/a&gt; QString::front() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92d40ca5b95d86ff1bbfcbf4617ec0e925846e38" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qchar&quot;&gt;QChar&lt;/a&gt; QStringRef::back() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7752c2c4a493374c751c75b29be268688665e0c0" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qchar&quot;&gt;QChar&lt;/a&gt; QStringRef::front() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a1e23a7c960a0658b6567953826a71a3febf255" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qchar&quot;&gt;QChar&lt;/a&gt; QStringRef::operator[](int</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20563ef03cf930c4029057acc4148f8541c3fa71" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qchar&quot;&gt;QChar&lt;/a&gt; QStringView::at(qsizetype</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4792eb786a77f57da17a5635d76544f5c04f2fa" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qchar&quot;&gt;QChar&lt;/a&gt; QStringView::back() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09b81c7a3d817d30cbb75f22b04a6ba32a8193c4" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qchar&quot;&gt;QChar&lt;/a&gt; QStringView::first() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="035be3318ab225f1db657dcadfc39ce519542013" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qchar&quot;&gt;QChar&lt;/a&gt; QStringView::front() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c01bec2478d0fbf820846a150af411d4afc053c6" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qchar&quot;&gt;QChar&lt;/a&gt; QStringView::last() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a004d006ab8172f8babc84e6d906b8675712704" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qchar&quot;&gt;QChar&lt;/a&gt; QStringView::operator[](qsizetype</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9fa9941c199784cf97a8e4e69df330dd6a49d04f" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qchar&quot;&gt;QChar&lt;/a&gt; QTextDocument::characterAt(int</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81219c5a603f290ebfbc881a0516fcc9795b97ce" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qchar&quot;&gt;QChar&lt;/a&gt; QTextStream::padChar() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f602ab1a33b18a2176de9319839cb1d80846ddc" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qchar&quot;&gt;QChar&lt;/a&gt; QUrlQuery::queryPairDelimiter() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e87f1fd1b08a74ad90891bd30eb55c00530ee17" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qchar&quot;&gt;QChar&lt;/a&gt; QUrlQuery::queryValueDelimiter() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7942b4f8fb9225db9a023601678df5a698f933c" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qchar&quot;&gt;QChar&lt;/a&gt; QVariant::toChar() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="705a16d6b5dddae5ca2f020d49ed089b4a9054a5" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qchar&quot;&gt;QChar&lt;/a&gt; Tab::delimiter</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99d60e49d2d6370c712bfa338e5ef04683658ccd" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qchar&quot;&gt;QChar&lt;/a&gt; also provides &lt;a href=&quot;qchar#direction&quot;&gt;direction&lt;/a&gt;(), which indicates the &quot;natural&quot; writing direction of this character. The &lt;a href=&quot;qchar#joiningType&quot;&gt;joiningType&lt;/a&gt;() function indicates how the character joins with it's neighbors (needed mostly for Arabic or Syriac) and finally &lt;a href=&quot;qchar#hasMirrored&quot;&gt;hasMirrored&lt;/a&gt;(), which indicates whether the character needs to be mirrored when it is printed in it's &quot;unnatural&quot; writing direction.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2518e3e7e544d06cd263e2cb71b27c707df75e1" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qchar&quot;&gt;QChar&lt;/a&gt; provides a full complement of testing/classification functions, converting to and from other formats, converting from composed to decomposed Unicode, and trying to compare and case-convert if you ask it to.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5df50a742b9ffc24f53bda96c67a4bea6768c675" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qchar&quot;&gt;QChar&lt;/a&gt; provides constructors and cast operators that make it easy to convert to and from traditional 8-bit &lt;code&gt;char&lt;/code&gt;s. If you defined &lt;code&gt;QT_NO_CAST_FROM_ASCII&lt;/code&gt; and &lt;code&gt;QT_NO_CAST_TO_ASCII&lt;/code&gt;, as explained in the &lt;a href=&quot;qstring&quot;&gt;QString&lt;/a&gt; documentation, you will need to explicitly call &lt;a href=&quot;qchar#fromLatin1&quot;&gt;fromLatin1&lt;/a&gt;(), or use &lt;a href=&quot;qlatin1char&quot;&gt;QLatin1Char&lt;/a&gt;, to construct a &lt;a href=&quot;qchar&quot;&gt;QChar&lt;/a&gt; from an 8-bit &lt;code&gt;char&lt;/code&gt;, and you will need to call &lt;a href=&quot;qchar#toLatin1&quot;&gt;toLatin1&lt;/a&gt;() to get the 8-bit value back.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f22ecc9470aaf8f9b6bd950218c5289ef4e56d90" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qchar&quot;&gt;QChar&lt;/a&gt;. 'T' means true direction and 'M' is magnetic direction.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f5a3186aadd0120ba28ad6638fbffde7c08b611" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qchar#Category-enum&quot;&gt;QChar::Category&lt;/a&gt; QChar::category() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53f5ba8d5f87a8d26198a073b182847feefc8be0" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qchar#Decomposition-enum&quot;&gt;QChar::Decomposition&lt;/a&gt; QChar::decompositionTag() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d4a3e52a4ccee059a31786b394a04f50c57ce48" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qchar#Direction-enum&quot;&gt;QChar::Direction&lt;/a&gt; QChar::direction() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8eb86f7ea672fc8ae3bf177e9aa9593624fff30" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qchar#JoiningType-enum&quot;&gt;QChar::JoiningType&lt;/a&gt; QChar::joiningType() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7186b589e2191ad302c71d0beeff0b80c5c554a2" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qchar#QChar&quot;&gt;QChar&lt;/a&gt; QChar::mirroredChar() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="442db800b061d1c2f8501b2a793b8e90a157451e" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qchar#QChar&quot;&gt;QChar&lt;/a&gt; QChar::toCaseFolded() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f8c88fe1bb6b60179be67252532a89264930ef0" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qchar#QChar&quot;&gt;QChar&lt;/a&gt; QChar::toLower() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2f84727033f5220b8ed9ae7e654e77c595e2f57" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qchar#QChar&quot;&gt;QChar&lt;/a&gt; QChar::toTitleCase() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82907a3940f26909e0a064416869ae626559b4c0" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qchar#QChar&quot;&gt;QChar&lt;/a&gt; QChar::toUpper() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="adb6f851d0d0dabe6b624d308c4a695e7de481d8" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qchar#Script-enum&quot;&gt;QChar::Script&lt;/a&gt; QChar::script() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c066d89fd50cdd6219597ec81c30a694d4356ca" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qchar#UnicodeVersion-enum&quot;&gt;QChar::UnicodeVersion&lt;/a&gt; QChar::unicodeVersion() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91d634bd7896c81480fccacad1a937c37a034103" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qchart&quot;&gt;QChart&lt;/a&gt; *QAbstractSeries::chart() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="588ac775b082fa1a5716dbd241b898e514896e96" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qchart&quot;&gt;QChart&lt;/a&gt; *QChartView::chart() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97507452cef902f729d60ae9b926ea80c87fee37" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qchart&quot;&gt;QChart&lt;/a&gt; is a &lt;a href=&quot;qgraphicswidget&quot;&gt;QGraphicsWidget&lt;/a&gt; that you can show in a &lt;a href=&quot;qgraphicsscene&quot;&gt;QGraphicsScene&lt;/a&gt;. It manages the graphical representation of different types of series and other chart related objects like legend and axes. To simply show a chart in a layout, the convenience class &lt;a href=&quot;qchartview&quot;&gt;QChartView&lt;/a&gt; can be used instead of &lt;a href=&quot;qchart&quot;&gt;QChart&lt;/a&gt;. In addition, line, spline, area, and scatter series can be presented as polar charts by using the &lt;a href=&quot;qpolarchart&quot;&gt;QPolarChart&lt;/a&gt; class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="744255351a04802ad1ea8c61445484f18182ca60" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qchartview#RubberBand-enum&quot;&gt;QChartView::RubberBands&lt;/a&gt; QChartView::rubberBand() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79d2eb0e0845bb575ca92c9e5b734e8d4dd5cf47" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcheckbox&quot;&gt;QCheckBox&lt;/a&gt; (1) provides a checkbox with a text label.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4ace2b2b529045f0d69a1b86c162d5733330069" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcheckbox&quot;&gt;QCheckBox&lt;/a&gt; *QMessageBox::checkBox() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0418895086227a22d2cd3f735c29df63defb573c" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcheckbox&quot;&gt;QCheckBox&lt;/a&gt;, &lt;a href=&quot;qpushbutton&quot;&gt;QPushButton&lt;/a&gt;, &lt;a href=&quot;qradiobutton&quot;&gt;QRadioButton&lt;/a&gt;, and &lt;a href=&quot;qtoolbutton&quot;&gt;QToolButton&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf28c4dbde81919d0d9c307217ba4c16cf6a696d" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qchildevent&quot;&gt;QChildEvent&lt;/a&gt;, &lt;a href=&quot;qdynamicpropertychangeevent&quot;&gt;QDynamicPropertyChangeEvent&lt;/a&gt;, &lt;a href=&quot;qstatemachine-signalevent&quot;&gt;QStateMachine::SignalEvent&lt;/a&gt;, &lt;a href=&quot;qstatemachine-wrappedevent&quot;&gt;QStateMachine::WrappedEvent&lt;/a&gt;, and &lt;a href=&quot;qtimerevent&quot;&gt;QTimerEvent&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef62422ac38cf7404fa4387cf5aa7f4404ed2536" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qclipboard&quot;&gt;QClipboard&lt;/a&gt; features some convenience functions to access common data types: &lt;a href=&quot;qclipboard#setText&quot;&gt;setText&lt;/a&gt;() allows the exchange of Unicode text and &lt;a href=&quot;qclipboard#setPixmap&quot;&gt;setPixmap&lt;/a&gt;() and &lt;a href=&quot;qclipboard#setImage&quot;&gt;setImage&lt;/a&gt;() allows the exchange of QPixmaps and QImages between applications. The &lt;a href=&quot;qclipboard#setMimeData&quot;&gt;setMimeData&lt;/a&gt;() function is the ultimate in flexibility: it allows you to add any &lt;a href=&quot;qmimedata&quot;&gt;QMimeData&lt;/a&gt; into the clipboard. There are corresponding getters for each of these, e.g. &lt;a href=&quot;qclipboard#text&quot;&gt;text&lt;/a&gt;(), &lt;a href=&quot;qclipboard#image&quot;&gt;image&lt;/a&gt;() and &lt;a href=&quot;qclipboard#pixmap&quot;&gt;pixmap&lt;/a&gt;(). You can clear the clipboard by calling &lt;a href=&quot;qclipboard#clear&quot;&gt;clear&lt;/a&gt;().</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93c175ab26fb0aea3a7623206aa868ef099906bc" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qclipboard&quot;&gt;QClipboard&lt;/a&gt; supports the same data types that &lt;a href=&quot;qdrag&quot;&gt;QDrag&lt;/a&gt; does, and uses similar mechanisms. For advanced clipboard usage read &lt;a href=&quot;dnd#&quot;&gt;Drag and Drop&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9104c46a41da8155f62e55df48f1d2beb6dd4b13" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcollator&quot;&gt;QCollator&lt;/a&gt; is initialized with a &lt;a href=&quot;qlocale&quot;&gt;QLocale&lt;/a&gt; and an optional collation strategy. It tries to initialize the collator with the specified values. The collator can then be used to compare and sort strings in a locale dependent fashion.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fbc917adda86b157254208b0d529f643c5aad0db" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcollator#QCollator&quot;&gt;QCollator&lt;/a&gt; &amp;amp;QCollator::operator=(&lt;a href=&quot;qcollator#QCollator&quot;&gt;QCollator&lt;/a&gt; &amp;amp;&amp;amp;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10a814b13c89c9d7015f56108a8bbaeb1fa345e2" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcollator#QCollator&quot;&gt;QCollator&lt;/a&gt; &amp;amp;QCollator::operator=(const &lt;a href=&quot;qcollator#QCollator&quot;&gt;QCollator&lt;/a&gt; &amp;amp;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee62abfdf141f6ba5f213f68bc65129a1554c520" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcollatorsortkey&quot;&gt;QCollatorSortKey&lt;/a&gt; QCollator::sortKey(const &lt;a href=&quot;qstring&quot;&gt;QString&lt;/a&gt; &amp;amp;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2648eb61d376d037f4d221dfed0116f728efe5f9" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcollatorsortkey#QCollatorSortKey&quot;&gt;QCollatorSortKey&lt;/a&gt; &amp;amp;QCollatorSortKey::operator=(&lt;a href=&quot;qcollatorsortkey#QCollatorSortKey&quot;&gt;QCollatorSortKey&lt;/a&gt; &amp;amp;&amp;amp;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9222f92bdca0133a4a8f84a0f645469dc031a70b" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcollatorsortkey#QCollatorSortKey&quot;&gt;QCollatorSortKey&lt;/a&gt; &amp;amp;QCollatorSortKey::operator=(const &lt;a href=&quot;qcollatorsortkey#QCollatorSortKey&quot;&gt;QCollatorSortKey&lt;/a&gt; &amp;amp;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e321ba0c4d40bb70551d76ef8a6c797db3ec0a1a" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcolor&quot;&gt;QColor&lt;/a&gt; (obsolete; use &lt;a href=&quot;qt#ItemDataRole-enum&quot;&gt;Qt::BackgroundRole&lt;/a&gt; instead)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ee7fbb765bb0ae89a16867b90b94c18ed508736" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcolor&quot;&gt;QColor&lt;/a&gt; (obsolete; use &lt;a href=&quot;qt#ItemDataRole-enum&quot;&gt;Qt::ForegroundRole&lt;/a&gt; instead)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5cf5813cad8c8635020fcfefa401a3f0b6a99c53" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcolor&quot;&gt;QColor&lt;/a&gt; -&amp;gt; vec4 - When colors are passed to the shader, they are first premultiplied. Thus Qt.rgba(0.2, 0.6, 1.0, 0.5) becomes vec4(0.1, 0.3, 0.5, 0.5) in the shader, for example.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da6a3956918191faa3c5b04797b5936040897828" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcolor&quot;&gt;QColor&lt;/a&gt; QBarSet::borderColor()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc746650ac6aa6aa272d045bc5992cd48b667f45" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcolor&quot;&gt;QColor&lt;/a&gt; QBarSet::color()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48ec6036e04bd06952d71fa6809082198b548126" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcolor&quot;&gt;QColor&lt;/a&gt; QBarSet::labelColor()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44096c1e69361402130fb1ed0013d08f5213b237" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcolor&quot;&gt;QColor&lt;/a&gt; QColorDialog::selectedColor() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a19eff3b69c144d121f8c8e1029a5ae48a463c0" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcolor&quot;&gt;QColor&lt;/a&gt; QGraphicsTextItem::defaultTextColor() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9cdc55961a8ecfd8c705f3953f0600af4b5ce9fb" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcolor&quot;&gt;QColor&lt;/a&gt; QImage::pixelColor(const &lt;a href=&quot;qpoint&quot;&gt;QPoint&lt;/a&gt; &amp;amp;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dcc82a186a290424c951649f7b5ce83ba46e43df" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcolor&quot;&gt;QColor&lt;/a&gt; QImage::pixelColor(int</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c05cae81eb13cb05d34075480fdf4e9f5c820d6" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcolor&quot;&gt;QColor&lt;/a&gt; QImageReader::backgroundColor() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10d7bc227e543a16f254be4984c45386adba3acc" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcolor&quot;&gt;QColor&lt;/a&gt; QMovie::backgroundColor() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d41a5afec2ca4712d2284d93ce25b2189e36e9b" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcolor&quot;&gt;QColor&lt;/a&gt; QOpenGLTexture::borderColor() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8dd3278f924f4a018099f9074de43191e8a4766f" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcolor&quot;&gt;QColor&lt;/a&gt; QPen::color() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82f6d6bf522f9a8d1d2031d82b2fa1669b657834" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcolor&quot;&gt;QColor&lt;/a&gt; QSGAbstractRenderer::clearColor() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e47141c69ee6536a792fabc9a11abc21bb934525" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcolor&quot;&gt;QColor&lt;/a&gt; QSGSimpleRectNode::color() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ba393aa140d2b9540f88d3c3257515a8ad6d072" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcolor&quot;&gt;QColor&lt;/a&gt; QStyleOptionFocusRect::backgroundColor</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0f5807cd857b6c695171f53bda7408d851731df" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcolor&quot;&gt;QColor&lt;/a&gt; QStyleOptionGroupBox::textColor</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d31aa8cd02c1fa932c3ba0abe3cb007dbe5cc315" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcolor&quot;&gt;QColor&lt;/a&gt; QTabBar::tabTextColor(int</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42ffc98c62b3c61c31f7f490c0eb488f0bb0271d" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcolor&quot;&gt;QColor&lt;/a&gt; QTextCharFormat::underlineColor() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c25b0270146118fef33ca3cdfc653fa484535d9e" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcolor&quot;&gt;QColor&lt;/a&gt; QTextEdit::textBackgroundColor() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18b795a2d15f1e674fc5e0e8af5854e0dc6b4a4f" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcolor&quot;&gt;QColor&lt;/a&gt; QTextEdit::textColor() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b5872370f0828589a106c653d8a965644360025" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcolor&quot;&gt;QColor&lt;/a&gt; QTextFormat::colorProperty(int</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c464501496a8879b259051eec96af7253c72e27" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcolor&quot;&gt;QColor&lt;/a&gt; also support alpha-blended outlining and filling. The alpha channel of a color specifies the transparency effect, 0 represents a fully transparent color, while 255 represents a fully opaque color. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07bd88bb71b1ab8b808e55b0cdd79a9973cfa794" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcolor&quot;&gt;QColor&lt;/a&gt; is platform and device independent. The &lt;a href=&quot;qcolormap&quot;&gt;QColormap&lt;/a&gt; class maps the color to the hardware.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89c0ca22ed8aa14284ac26fdf2a56b4385a5bdbf" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcolor&quot;&gt;QColor&lt;/a&gt; supports floating point precision and provides floating point versions of all the color components functions, e.g. &lt;a href=&quot;qcolor#getRgbF&quot;&gt;getRgbF&lt;/a&gt;(), &lt;a href=&quot;qcolor#hueF&quot;&gt;hueF&lt;/a&gt;() and &lt;a href=&quot;qcolor#fromCmykF&quot;&gt;fromCmykF&lt;/a&gt;(). Note that since the components are stored using 16-bit integers, there might be minor deviations between the values set using, for example, &lt;a href=&quot;qcolor#setRgbF&quot;&gt;setRgbF&lt;/a&gt;() and the values returned by the &lt;a href=&quot;qcolor#getRgbF&quot;&gt;getRgbF&lt;/a&gt;() function due to rounding.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85b757bad6c9e05429be6e76e7325d1e461328c3" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcolor&quot;&gt;QColor&lt;/a&gt;&amp;amp;</source>
          <target state="translated">&lt;a href=&quot;qcolor&quot;&gt;QColor&lt;/a&gt;&amp;amp;</target>
        </trans-unit>
        <trans-unit id="5de39ebabfaf658114c14ae6503c46d5b90b12cf" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcolor&quot;&gt;QColor&lt;/a&gt;, const &lt;a href=&quot;qcolor&quot;&gt;QColor&lt;/a&gt;&amp;amp;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5b8b81c67880542e16a21be325aabf3cc6a0726" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcolor#QColor&quot;&gt;QColor&lt;/a&gt; &amp;amp;QColor::operator=(&lt;a href=&quot;qt#GlobalColor-enum&quot;&gt;Qt::GlobalColor&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80bb3dbb1b239f90d4a0b4aa99279a0b13e81ca0" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcolor#QColor&quot;&gt;QColor&lt;/a&gt; &amp;amp;QColor::operator=(const &lt;a href=&quot;qcolor#QColor&quot;&gt;QColor&lt;/a&gt; &amp;amp;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7af894218ac5a841e517f009eb6c4c1acea2b87e" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcolor#QColor&quot;&gt;QColor&lt;/a&gt; QColor::convertTo(&lt;a href=&quot;qcolor#Spec-enum&quot;&gt;QColor::Spec&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9914a461038bcea0fe5243f9557f4377cb8f516" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcolor#QColor&quot;&gt;QColor&lt;/a&gt; QColor::darker(int</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd902b82dba813c67abe3f8e8ba68893571e290e" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcolor#QColor&quot;&gt;QColor&lt;/a&gt; QColor::lighter(int</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b938b03a58267858fb4a005547e35d291cc49ef2" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcolor#QColor&quot;&gt;QColor&lt;/a&gt; QColor::toCmyk() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7129fad27aed66ad23ad258ca63a1edd916e956a" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcolor#QColor&quot;&gt;QColor&lt;/a&gt; QColor::toHsl() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cacd53da7a273489388f8fe19a5d778d9331f513" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcolor#QColor&quot;&gt;QColor&lt;/a&gt; QColor::toHsv() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f98aebd0cab9793bb561747d15e140da66f14d8b" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcolor#QColor&quot;&gt;QColor&lt;/a&gt; QColor::toRgb() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27676e00a06e83b51733f48187c284264d89f8ab" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcolor#QRgb-typedef&quot;&gt;QRgb&lt;/a&gt; QColor::qPremultiply(&lt;a href=&quot;qcolor#QRgb-typedef&quot;&gt;QRgb&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6e007f9f34c487e0715a2c43b8bb0550fb4e096" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcolor#QRgb-typedef&quot;&gt;QRgb&lt;/a&gt; QColor::qRgb(int</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ddf31f8056fbcf8e497dd359dc8cfbc84627ac43" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcolor#QRgb-typedef&quot;&gt;QRgb&lt;/a&gt; QColor::qRgba(int</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7da4e53b9d2d22f90a185c01f560d627497a8c2" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcolor#QRgb-typedef&quot;&gt;QRgb&lt;/a&gt; QColor::qUnpremultiply(&lt;a href=&quot;qcolor#QRgb-typedef&quot;&gt;QRgb&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34957a36dd1f90c71db98dfefcd177e54abbd089" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcolor#QRgb-typedef&quot;&gt;QRgb&lt;/a&gt; QColor::rgb() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc2ea4e126c326eee5e9f9bfd1d3cf965c045b22" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcolor#QRgb-typedef&quot;&gt;QRgb&lt;/a&gt; QColor::rgba() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d00049efd63cbbb4842522e91cca9e98936c2714" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcolor#QRgb-typedef&quot;&gt;QRgb&lt;/a&gt; QImage::color(int</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="547b0a3e67ab31dbcf58724c477484e2278096b4" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcolor#QRgb-typedef&quot;&gt;QRgb&lt;/a&gt; QImage::pixel(const &lt;a href=&quot;qpoint&quot;&gt;QPoint&lt;/a&gt; &amp;amp;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fae15da499b75d425c19785cc847e06d3a5be9c4" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcolor#QRgb-typedef&quot;&gt;QRgb&lt;/a&gt; QImage::pixel(int</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c703b22b30a8434e2822bc630a68e6bedd7e9b2" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcolor#Spec-enum&quot;&gt;QColor::Spec&lt;/a&gt; QColor::spec() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="072f05151c6a9f75125f0c54a9091ab307ca326a" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcolordialog&quot;&gt;QColorDialog&lt;/a&gt;, &lt;a href=&quot;qerrormessage&quot;&gt;QErrorMessage&lt;/a&gt;, &lt;a href=&quot;qfiledialog&quot;&gt;QFileDialog&lt;/a&gt;, &lt;a href=&quot;qfontdialog&quot;&gt;QFontDialog&lt;/a&gt;, &lt;a href=&quot;qinputdialog&quot;&gt;QInputDialog&lt;/a&gt;, &lt;a href=&quot;qmessagebox&quot;&gt;QMessageBox&lt;/a&gt;, &lt;a href=&quot;qprogressdialog&quot;&gt;QProgressDialog&lt;/a&gt;, and &lt;a href=&quot;qwizard&quot;&gt;QWizard&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05f92232d69c3c8f77a9186801201ee776b9b21e" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcolormap#Mode-enum&quot;&gt;QColormap::Mode&lt;/a&gt; QColormap::mode() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0efcf0f4a958d1f1a213324a45a415cc7e4de19" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcolormap#QColormap&quot;&gt;QColormap&lt;/a&gt; &amp;amp;QColormap::operator=(const &lt;a href=&quot;qcolormap#QColormap&quot;&gt;QColormap&lt;/a&gt; &amp;amp;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e68946071df80ab15f976df0a0d3dea2e40c746" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcolumnview&quot;&gt;QColumnView&lt;/a&gt; displays a model in a number of QListViews, one for each hierarchy in the tree. This is sometimes referred to as a cascading list.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8d3db7701c23b43af83f37e088347c9cedae3dc" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcolumnview&quot;&gt;QColumnView&lt;/a&gt; implements the interfaces defined by the &lt;a href=&quot;qabstractitemview&quot;&gt;QAbstractItemView&lt;/a&gt; class to allow it to display data provided by models derived from the &lt;a href=&quot;qabstractitemmodel&quot;&gt;QAbstractItemModel&lt;/a&gt; class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f5f9ec5df9cffbc52fccdf478e4eb3563edcbe7" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcolumnview&quot;&gt;QColumnView&lt;/a&gt;, &lt;a href=&quot;qheaderview&quot;&gt;QHeaderView&lt;/a&gt;, &lt;a href=&quot;qlistview&quot;&gt;QListView&lt;/a&gt;, &lt;a href=&quot;qtableview&quot;&gt;QTableView&lt;/a&gt;, and &lt;a href=&quot;qtreeview&quot;&gt;QTreeView&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fad4c9c3e2628f83f4e567d742b25ea701c17e9a" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcombobox&quot;&gt;QComboBox&lt;/a&gt; (5) provides a combined button and pop-up list.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54a8c49abf1de97e85b90a14ed37fa6f0963320a" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcombobox&quot;&gt;QComboBox&lt;/a&gt; uses the &lt;a href=&quot;model-view-programming#&quot;&gt;model/view framework&lt;/a&gt; for its popup list and to store its items. By default a &lt;a href=&quot;qstandarditemmodel&quot;&gt;QStandardItemModel&lt;/a&gt; stores the items and a &lt;a href=&quot;qlistview&quot;&gt;QListView&lt;/a&gt; subclass displays the popuplist. You can access the model and view directly (with &lt;a href=&quot;qcombobox#model&quot;&gt;model&lt;/a&gt;() and &lt;a href=&quot;qcombobox#view&quot;&gt;view&lt;/a&gt;()), but &lt;a href=&quot;qcombobox&quot;&gt;QComboBox&lt;/a&gt; also provides functions to set and get item data (e.g., &lt;a href=&quot;qcombobox#setItemData&quot;&gt;setItemData&lt;/a&gt;() and &lt;a href=&quot;qcombobox#itemText&quot;&gt;itemText&lt;/a&gt;()). You can also set a new model and view (with &lt;a href=&quot;qcombobox#setModel&quot;&gt;setModel&lt;/a&gt;() and &lt;a href=&quot;qcombobox#setView&quot;&gt;setView&lt;/a&gt;()). For the text and icon in the combobox label, the data in the model that has the &lt;a href=&quot;qt#ItemDataRole-enum&quot;&gt;Qt::DisplayRole&lt;/a&gt; and &lt;a href=&quot;qt#ItemDataRole-enum&quot;&gt;Qt::DecorationRole&lt;/a&gt; is used. Note that you cannot alter the &lt;a href=&quot;qabstractitemview#SelectionMode-enum&quot;&gt;SelectionMode&lt;/a&gt; of the &lt;a href=&quot;qcombobox#view&quot;&gt;view&lt;/a&gt;(), e.g., by using &lt;a href=&quot;qabstractitemview#selectionMode-prop&quot;&gt;setSelectionMode()&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de7b06a6de4901d3d01724826d1a1ba72d89fe5d" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcommandlineoption&quot;&gt;QCommandLineOption&lt;/a&gt; QCommandLineParser::addHelpOption()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d0bbb576d820deff42d9d82709128d945df5036" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcommandlineoption&quot;&gt;QCommandLineOption&lt;/a&gt; QCommandLineParser::addVersionOption()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58554b17cf57478c5e7c9e9c4d3a4dc8fcf187de" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcommandlineoption#Flag-enum&quot;&gt;QCommandLineOption::Flags&lt;/a&gt; QCommandLineOption::flags() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb49284b00540a41dd39b38e622a1e28c4a9afb6" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcommandlineoption#QCommandLineOption&quot;&gt;QCommandLineOption&lt;/a&gt; &amp;amp;QCommandLineOption::operator=(&lt;a href=&quot;qcommandlineoption#QCommandLineOption&quot;&gt;QCommandLineOption&lt;/a&gt; &amp;amp;&amp;amp;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6e58430e5046fd2b788b0bd1e32a00967bb5a96" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcommandlineoption#QCommandLineOption&quot;&gt;QCommandLineOption&lt;/a&gt; &amp;amp;QCommandLineOption::operator=(const &lt;a href=&quot;qcommandlineoption#QCommandLineOption&quot;&gt;QCommandLineOption&lt;/a&gt; &amp;amp;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1f9d936e4e8462c63e7e0269402f2f37bcb5bc5" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcommonstyle&quot;&gt;QCommonStyle&lt;/a&gt; derived styles (except QPlastiqueStyle)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="288600cc9b4d28642a2db48fc026fa5a6c937e9c" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcommonstyle&quot;&gt;QCommonStyle&lt;/a&gt; handles the CE_CheckBox element. The &lt;a href=&quot;qcheckbox&quot;&gt;QCheckBox&lt;/a&gt; has two sub elements: SE_CheckBoxIndicator (the checked indicator) and SE_CheckBoxContents (the contents, which are used for the checkbox label). &lt;a href=&quot;qcommonstyle&quot;&gt;QCommonStyle&lt;/a&gt; also implements these sub element bounding rectangles. Next, we'll have a look at the &lt;a href=&quot;qcommonstyle&quot;&gt;QCommonStyle&lt;/a&gt; code:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e817182ab95a43aa5809a46a931784b8fa02ed28" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcommonstyle&quot;&gt;QCommonStyle&lt;/a&gt; provides a convenient base for full custom style implementations. The approach is same than with &lt;a href=&quot;qproxystyle&quot;&gt;QProxyStyle&lt;/a&gt;, but inherit &lt;a href=&quot;qcommonstyle&quot;&gt;QCommonStyle&lt;/a&gt; instead and reimplement the appropriate virtual methods. Implementing a full custom style is somewhat involved, and we therefore provide this overview. We give a step-by-step walkthrough of how to style individual Qt widgets. We will examine the &lt;a href=&quot;qstyle&quot;&gt;QStyle&lt;/a&gt; virtual functions, member variables, and enumerations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa88a869150b3bd85ccdc6569ea679a03abe47eb" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcompassreading&quot;&gt;QCompassReading&lt;/a&gt; *QCompass::reading() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d3dd12984824d37a98895e4d8a84acbf0873ffa" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcompleter&quot;&gt;QCompleter&lt;/a&gt; *QComboBox::completer() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9733689aeb7e53fbee7f8a76be51dd0f14933220" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcompleter&quot;&gt;QCompleter&lt;/a&gt; *QLineEdit::completer() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15483827694addadd7e19f1e49a1e61c4fe15cab" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcompleter&quot;&gt;QCompleter&lt;/a&gt; can look for completions in tree models, assuming that any item (or sub-item or sub-sub-item) can be unambiguously represented as a string by specifying the path to the item. The completion is then performed one level at a time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7628d854b74000b8554ca28cefdbc27d151eafc" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcompleter#completionCount&quot;&gt;completionCount&lt;/a&gt;() returns the total number of completions for the current prefix. &lt;a href=&quot;qcompleter#completionCount&quot;&gt;completionCount&lt;/a&gt;() should be avoided when possible, since it requires a scan of the entire model.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c594cade8e6c6a3fc003bc211b8f873a181a7b7" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcompleter#completionModel&quot;&gt;completionModel&lt;/a&gt;() return a list model that contains all possible completions for the current completion prefix, in the order in which they appear in the model. This model can be used to display the current completions in a custom view. Calling &lt;a href=&quot;qcompleter#completionPrefix-prop&quot;&gt;setCompletionPrefix&lt;/a&gt;() automatically refreshes the completion model.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5cc38e9e70131a06bed2cd0b6e5b6c21d4fd52be" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcompressedhelpinfo#QCompressedHelpInfo&quot;&gt;QCompressedHelpInfo&lt;/a&gt; &amp;amp;QCompressedHelpInfo::operator=(&lt;a href=&quot;qcompressedhelpinfo#QCompressedHelpInfo&quot;&gt;QCompressedHelpInfo&lt;/a&gt; &amp;amp;&amp;amp;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0207ec86490d510230eaaf4ef4118f2393df478c" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcompressedhelpinfo#QCompressedHelpInfo&quot;&gt;QCompressedHelpInfo&lt;/a&gt; &amp;amp;QCompressedHelpInfo::operator=(const &lt;a href=&quot;qcompressedhelpinfo#QCompressedHelpInfo&quot;&gt;QCompressedHelpInfo&lt;/a&gt; &amp;amp;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ebc09995d8beae72bb8a64304b3dfda226481aa4" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qconcatenatetablesproxymodel&quot;&gt;QConcatenateTablesProxyModel&lt;/a&gt; handles dropping onto an item, between items, and after the last item. In all cases the call is forwarded to the underlying source model. When dropping onto an item, the source model for this item is called. When dropping between items, the source model immediately below the drop position is called. When dropping after the last item, the last source model is called.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d9b6e96dfbaad471314e9eec51f908f16bab799" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qconcatenatetablesproxymodel&quot;&gt;QConcatenateTablesProxyModel&lt;/a&gt; takes multiple source models and concatenates their rows.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e1d76677da9abdbef22c2908d1838441739d921" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qconicalgradient&quot;&gt;QConicalGradient&lt;/a&gt;, &lt;a href=&quot;qlineargradient&quot;&gt;QLinearGradient&lt;/a&gt;, and &lt;a href=&quot;qradialgradient&quot;&gt;QRadialGradient&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="674df93f9ec51c5bde7e0fe97a40b8c3a32cfdfa" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcontextmenuevent&quot;&gt;QContextMenuEvent&lt;/a&gt;, &lt;a href=&quot;qhoverevent&quot;&gt;QHoverEvent&lt;/a&gt;, &lt;a href=&quot;qkeyevent&quot;&gt;QKeyEvent&lt;/a&gt;, &lt;a href=&quot;qmouseevent&quot;&gt;QMouseEvent&lt;/a&gt;, &lt;a href=&quot;qnativegestureevent&quot;&gt;QNativeGestureEvent&lt;/a&gt;, &lt;a href=&quot;qtabletevent&quot;&gt;QTabletEvent&lt;/a&gt;, &lt;a href=&quot;qtouchevent&quot;&gt;QTouchEvent&lt;/a&gt;, and &lt;a href=&quot;qwheelevent&quot;&gt;QWheelEvent&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="543c21ea84cc87defb7ad2aa6075672b49f7bc9e" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcontextmenuevent#Reason-enum&quot;&gt;QContextMenuEvent::Reason&lt;/a&gt; QContextMenuEvent::reason() const</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0ffa26345c14ba4d6333e91e47b4f35cda266ad" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcontiguouscache&quot;&gt;QContiguousCache&lt;/a&gt; operates on a fixed capacity, set with &lt;a href=&quot;qcontiguouscache#setCapacity&quot;&gt;setCapacity&lt;/a&gt;() or passed as a parameter to the constructor. This capacity is the upper bound on memory usage by the cache itself, not including the memory allocated by the elements themselves. Note that a cache with a capacity of zero (the default) means no items will be stored: the &lt;a href=&quot;qcontiguouscache#insert&quot;&gt;insert&lt;/a&gt;(), &lt;a href=&quot;qcontiguouscache#append&quot;&gt;append&lt;/a&gt;() and &lt;a href=&quot;qcontiguouscache#prepend&quot;&gt;prepend&lt;/a&gt;() operations will effectively be no-ops. Therefore, it's important to set the capacity to a reasonable value before adding items to the cache.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8fc29270bc5060cd0514a23fe10d0925685f4fb" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcontiguouscache&quot;&gt;QContiguousCache&lt;/a&gt;&amp;lt;T&amp;gt; provides an efficient way of caching data that is typically accessed in a contiguous way.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="168c478841ac09818dcee441ce40c2789f36b0aa" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcontiguouscache#QContiguousCache&quot;&gt;QContiguousCache&lt;/a&gt;&amp;lt;T&amp;gt; &amp;amp;QContiguousCache::operator=(&lt;a href=&quot;qcontiguouscache#QContiguousCache&quot;&gt;QContiguousCache&lt;/a&gt;&amp;lt;T&amp;gt; &amp;amp;&amp;amp;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2860e62b5483b6b074dd15d4893f15f5962f99f9" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcontiguouscache#QContiguousCache&quot;&gt;QContiguousCache&lt;/a&gt;&amp;lt;T&amp;gt; &amp;amp;QContiguousCache::operator=(const &lt;a href=&quot;qcontiguouscache#QContiguousCache&quot;&gt;QContiguousCache&lt;/a&gt;&amp;lt;T&amp;gt; &amp;amp;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4da53df1e99bd48cf8476211d6617bb64388dc5f" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcoreapplication&quot;&gt;QCoreApplication&lt;/a&gt; contains the main event loop, where all events from the operating system (e.g., timer and network events) and other sources are processed and dispatched. It also handles the application's initialization and finalization, as well as system-wide and application-wide settings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86c0747442e6c5cef7682f91a8af9372c0a4b8c6" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcoreapplication&quot;&gt;QCoreApplication&lt;/a&gt; provides the command-line arguments as a simple list of strings. &lt;a href=&quot;qcommandlineparser&quot;&gt;QCommandLineParser&lt;/a&gt; provides the ability to define a set of options, parse the command-line arguments, and store which options have actually been used, as well as option values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49e1f7d6936b4d1e78cdad52b207d3a68c3d544d" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcoreapplication#applicationDirPath&quot;&gt;QCoreApplication::applicationDirPath&lt;/a&gt;()</source>
          <target state="translated">&lt;a href=&quot;qcoreapplication#applicationDirPath&quot;&gt;QCoreApplication::applicationDirPath&lt;/a&gt;()</target>
        </trans-unit>
        <trans-unit id="25907e4500ada3e576177be55c2ca3f69be357c8" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcoreapplication#applicationDirPath&quot;&gt;QCoreApplication::applicationDirPath&lt;/a&gt;() can be used to determine the path of the binary within the bundle.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15c74ae1213492de1403a0fae7705123a115bf53" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcoreapplication#applicationDirPath&quot;&gt;QCoreApplication::applicationDirPath&lt;/a&gt;()/qtwebengine_dictionaries or &lt;a href=&quot;qcoreapplication#applicationDirPath&quot;&gt;QCoreApplication::applicationDirPath&lt;/a&gt;()/../Contents/Resources/qtwebengine_dictionaries (on &lt;a href=&quot;qtwebengine-platform-notes#macos&quot;&gt;macOS&lt;/a&gt;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="506ab02a491b8ee279320714814a7e1b7afe3a07" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcoreapplication#applicationName-prop&quot;&gt;QCoreApplication::applicationName&lt;/a&gt;()</source>
          <target state="translated">&lt;a href=&quot;qcoreapplication#applicationName-prop&quot;&gt;QCoreApplication::applicationName&lt;/a&gt;()</target>
        </trans-unit>
        <trans-unit id="6565f3edaa49ac7a9d94b2b524ea2c5c7409ef00" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcoreapplication#applicationPid&quot;&gt;QCoreApplication::applicationPid&lt;/a&gt;()</source>
          <target state="translated">&lt;a href=&quot;qcoreapplication#applicationPid&quot;&gt;QCoreApplication::applicationPid&lt;/a&gt;()</target>
        </trans-unit>
        <trans-unit id="88e8741e8bed823ecacfc4c83d95ec39131a842e" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcoreapplication#installTranslator&quot;&gt;installTranslator&lt;/a&gt;(), &lt;a href=&quot;qcoreapplication#removeTranslator&quot;&gt;removeTranslator&lt;/a&gt;() &lt;a href=&quot;qcoreapplication#translate&quot;&gt;translate&lt;/a&gt;().</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="764abf2d0117d965174fd46ea3626cd5a96bfbf0" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcoreapplication#postEvent&quot;&gt;postEvent()&lt;/a&gt; is also used during object initialization, since the posted event will typically be dispatched very soon after the initialization of the object is complete. When implementing a widget, it is important to realize that events can be delivered very early in its lifetime so, in its constructor, be sure to initialize member variables early on, before there's any chance that it might receive an event.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d91a8bc3b83866c8de63595dd9c0a355c7a32173" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcoreapplication#postEvent&quot;&gt;postEvent()&lt;/a&gt; posts the event on a queue for later dispatch. The next time Qt's main event loop runs, it dispatches all posted events, with some optimization. For example, if there are several resize events, they are compressed into one. The same applies to paint events: &lt;a href=&quot;qwidget#update&quot;&gt;QWidget::update&lt;/a&gt;() calls &lt;a href=&quot;qcoreapplication#postEvent&quot;&gt;postEvent()&lt;/a&gt;, which eliminates flickering and increases speed by avoiding multiple repaints.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bafd7cea3e624179d017c6063566b448b1024a0e" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;qcoreapplication#sendEvent&quot;&gt;sendEvent()&lt;/a&gt; processes the event immediately. When it returns, the event filters and/or the object itself have already processed the event. For many event classes there is a function called &lt;a href=&quot;qevent#accepted-prop&quot;&gt;isAccepted()&lt;/a&gt; that tells you whether the event was accepted or rejected by the last handler that was called.</source>
          <target state="new"/>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
