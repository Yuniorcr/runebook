<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="composer">
    <body>
      <group id="composer">
        <trans-unit id="f4ca5196f9ff4ad22b0d9c78a3c939b4e5aa1466" translate="yes" xml:space="preserve">
          <source>&quot;The system cannot find the path specified&quot; (Windows)</source>
          <target state="translated">&quot;The system cannot find the path specified&quot; (Windows)</target>
        </trans-unit>
        <trans-unit id="61714664a60e74bb9ba53df18abb5cdece955ce8" translate="yes" xml:space="preserve">
          <source>&amp;copy; Nils Adermann, Jordi Boggiano</source>
          <target state="translated">&amp;copy; Nils Adermann, Jordi Boggiano</target>
        </trans-unit>
        <trans-unit id="7be86bd215ca5ef3d7d786c2800effd418fc4dfa" translate="yes" xml:space="preserve">
          <source>&amp;larr; &lt;a href=&quot;00-intro.md&quot;&gt;Intro&lt;/a&gt; | &lt;a href=&quot;02-libraries.md&quot;&gt;Libraries&lt;/a&gt; &amp;rarr;</source>
          <target state="translated">&amp;larr; &lt;a href=&quot;00-intro.md&quot;&gt;Intro&lt;/a&gt; | &lt;a href=&quot;02-libraries.md&quot;&gt;Libraries&lt;/a&gt; &amp;rarr;</target>
        </trans-unit>
        <trans-unit id="a933e9286f26fa87fe3bb3f850c8dd90fb85c177" translate="yes" xml:space="preserve">
          <source>&amp;larr; &lt;a href=&quot;01-basic-usage.md&quot;&gt;Basic usage&lt;/a&gt; | &lt;a href=&quot;03-cli.md&quot;&gt;Command-line interface&lt;/a&gt; &amp;rarr;</source>
          <target state="translated">&amp;larr; &lt;a href=&quot;01-basic-usage.md&quot;&gt;Basic usage&lt;/a&gt; | &lt;a href=&quot;03-cli.md&quot;&gt;Command-line interface&lt;/a&gt; &amp;rarr;</target>
        </trans-unit>
        <trans-unit id="89e1906837779f975f241a01e3dd17f79caedf38" translate="yes" xml:space="preserve">
          <source>&amp;larr; &lt;a href=&quot;02-libraries.md&quot;&gt;Libraries&lt;/a&gt; | &lt;a href=&quot;04-schema.md&quot;&gt;Schema&lt;/a&gt; &amp;rarr;</source>
          <target state="translated">&amp;larr; &lt;a href=&quot;02-libraries.md&quot;&gt;Libraries&lt;/a&gt; | &lt;a href=&quot;04-schema.md&quot;&gt;Schema&lt;/a&gt; &amp;rarr;</target>
        </trans-unit>
        <trans-unit id="5e79d72d8ed7ac11838d0af4cd9c9deee848feee" translate="yes" xml:space="preserve">
          <source>&amp;larr; &lt;a href=&quot;03-cli.md&quot;&gt;Command-line interface&lt;/a&gt; | &lt;a href=&quot;05-repositories.md&quot;&gt;Repositories&lt;/a&gt; &amp;rarr;</source>
          <target state="translated">&amp;larr; &lt;a href=&quot;03-cli.md&quot;&gt;Command-line interface&lt;/a&gt; | &lt;a href=&quot;05-repositories.md&quot;&gt;Repositories&lt;/a&gt; &amp;rarr;</target>
        </trans-unit>
        <trans-unit id="931bb3b8aa57e1dc4286104763e3d472c0339f7a" translate="yes" xml:space="preserve">
          <source>&amp;larr; &lt;a href=&quot;04-schema.md&quot;&gt;Schema&lt;/a&gt; | &lt;a href=&quot;06-config.md&quot;&gt;Config&lt;/a&gt; &amp;rarr;</source>
          <target state="translated">&amp;larr; &lt;a href=&quot;04-schema.md&quot;&gt;Schema&lt;/a&gt; | &lt;a href=&quot;06-config.md&quot;&gt;Config&lt;/a&gt; &amp;rarr;</target>
        </trans-unit>
        <trans-unit id="6cba335dbfd0edc4bc3a00ace6808bd677db41bb" translate="yes" xml:space="preserve">
          <source>&amp;larr; &lt;a href=&quot;05-repositories.md&quot;&gt;Repositories&lt;/a&gt; | &lt;a href=&quot;07-community.md&quot;&gt;Community&lt;/a&gt; &amp;rarr;</source>
          <target state="translated">&amp;larr; &lt;a href=&quot;05-repositories.md&quot;&gt;Repositories&lt;/a&gt; | &lt;a href=&quot;07-community.md&quot;&gt;Community&lt;/a&gt; &amp;rarr;</target>
        </trans-unit>
        <trans-unit id="70f33919d22c9a0005150dfa3e1f75c411d11833" translate="yes" xml:space="preserve">
          <source>&amp;larr; &lt;a href=&quot;06-config.md&quot;&gt;Config&lt;/a&gt;</source>
          <target state="translated">&amp;larr; &lt;a href=&quot;06-config.md&quot;&gt;Config&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="f189b8dbc452ee2bcbb7cf6ade70c1f019a52882" translate="yes" xml:space="preserve">
          <source>1. Introduction</source>
          <target state="translated">1. 소개</target>
        </trans-unit>
        <trans-unit id="35213e58dfdb246cfaeaf75c8dfcb2726b47e2e9" translate="yes" xml:space="preserve">
          <source>1.0.0-RC5</source>
          <target state="translated">1.0.0-RC5</target>
        </trans-unit>
        <trans-unit id="32677f938c7fb77803242a1f8527474a280bb565" translate="yes" xml:space="preserve">
          <source>1.0.0-alpha3</source>
          <target state="translated">1.0.0-alpha3</target>
        </trans-unit>
        <trans-unit id="f104a17f69852aaa1e5c2b4ae621ae9be289e8eb" translate="yes" xml:space="preserve">
          <source>1.0.0-beta2</source>
          <target state="translated">1.0.0-beta2</target>
        </trans-unit>
        <trans-unit id="25cf73b921bade9c931214c627fc4b1c98a1c39d" translate="yes" xml:space="preserve">
          <source>1.0.0-dev</source>
          <target state="translated">1.0.0-dev</target>
        </trans-unit>
        <trans-unit id="a42e45f9ca82518f6e8ba6a549668fcf25dea16c" translate="yes" xml:space="preserve">
          <source>2. Basic usage</source>
          <target state="translated">2. 기본 사용법</target>
        </trans-unit>
        <trans-unit id="a04a39ed4144de6344ff166a121e11ad9ccf9f07" translate="yes" xml:space="preserve">
          <source>3. Libraries</source>
          <target state="translated">3. 라이브러리</target>
        </trans-unit>
        <trans-unit id="0d7f5de74f1dfdac4ed3f41666431bfde147e568" translate="yes" xml:space="preserve">
          <source>4. Command-line interface / Commands</source>
          <target state="translated">4. 명령 줄 인터페이스 / 명령</target>
        </trans-unit>
        <trans-unit id="d643f52ebe5997b6108d46be67f9055303d64bb8" translate="yes" xml:space="preserve">
          <source>5. The composer.json Schema</source>
          <target state="translated">5. composer.json 스키마</target>
        </trans-unit>
        <trans-unit id="cd81bdfbc177a0ca6adcea80af150b1ceffdb6b3" translate="yes" xml:space="preserve">
          <source>6. Repositories</source>
          <target state="translated">6. 리포지토리</target>
        </trans-unit>
        <trans-unit id="afaa6435ff39561884a857486ca7a2fd317ed3b4" translate="yes" xml:space="preserve">
          <source>7. Config</source>
          <target state="translated">7. 구성</target>
        </trans-unit>
        <trans-unit id="6b4837ff5634431d1894540e443f3b2195059983" translate="yes" xml:space="preserve">
          <source>8. Community</source>
          <target state="translated">8. 커뮤니티</target>
        </trans-unit>
        <trans-unit id="f6569067d917c5d5585013ca1e142c00d3e4fc99" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;01-basic-usage.md&quot;&gt;Basic usage&lt;/a&gt; &amp;rarr;</source>
          <target state="translated">&lt;a href=&quot;01-basic-usage.md&quot;&gt;기본 사용법&lt;/a&gt; &amp;rarr;</target>
        </trans-unit>
        <trans-unit id="52b0392293b77b887c8c5c33ae37294ab84cbb74" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;articles/aliases.md&quot;&gt;Aliases&lt;/a&gt;Alias branch names to versions</source>
          <target state="translated">&lt;a href=&quot;articles/aliases.md&quot;&gt;별명&lt;/a&gt; 별명 분기 이름을 버전으로</target>
        </trans-unit>
        <trans-unit id="d38624e46441b69745b3300480649427b86ed09d" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;articles/autoloader-optimization.md&quot;&gt;Autoloader Optimization&lt;/a&gt;How to reduce the performance impact of the autoloader</source>
          <target state="translated">&lt;a href=&quot;articles/autoloader-optimization.md&quot;&gt;오토로더 최적화 오토로더&lt;/a&gt; 의 성능 영향을 줄이는 방법</target>
        </trans-unit>
        <trans-unit id="21dc154eb2bec94b3219a18d77ae871cb3aea5b6" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;articles/custom-installers.md&quot;&gt;Setting up and using custom installers&lt;/a&gt;Modify the way certain types of packages are installed</source>
          <target state="translated">&lt;a href=&quot;articles/custom-installers.md&quot;&gt;사용자 정의 설치 프로그램 설정 및 사용&lt;/a&gt; 특정 유형의 패키지가 설치되는 방식 수정</target>
        </trans-unit>
        <trans-unit id="8ab9ccf6a0778c05f59fdb523e8a8ea245c0dbc7" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;articles/handling-private-packages-with-satis.md&quot;&gt;Handling private packages&lt;/a&gt;Hosting and installing private Composer packages</source>
          <target state="translated">&lt;a href=&quot;articles/handling-private-packages-with-satis.md&quot;&gt;개인 패키지 처리 개인&lt;/a&gt; Composer 패키지 호스팅 및 설치</target>
        </trans-unit>
        <trans-unit id="38cb66eef73b7de2767cd5adeffb2e98e2879b50" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;articles/http-basic-authentication.md&quot;&gt;HTTP basic authentication&lt;/a&gt;Access privately hosted packages</source>
          <target state="translated">&lt;a href=&quot;articles/http-basic-authentication.md&quot;&gt;HTTP 기본 인증&lt;/a&gt; 개인 호스팅 패키지에 액세스</target>
        </trans-unit>
        <trans-unit id="fbde4be7da9b4ae07a45a0026286a6e07e013d30" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;articles/plugins.md&quot;&gt;Setting up and using plugins&lt;/a&gt;Modify and extend Composer's functionality</source>
          <target state="translated">&lt;a href=&quot;articles/plugins.md&quot;&gt;플러그인 설정 및 사용&lt;/a&gt; Composer 기능 수정 및 확장</target>
        </trans-unit>
        <trans-unit id="3fa32fc7c8f2943148b7813c705e4f8d6eb8eec7" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;articles/scripts.md&quot;&gt;Scripts&lt;/a&gt;Script are callbacks that are called before/after installing packages</source>
          <target state="translated">&lt;a href=&quot;articles/scripts.md&quot;&gt;스크립트&lt;/a&gt; 스크립트는 패키지 설치 전 / 후에 호출되는 콜백입니다.</target>
        </trans-unit>
        <trans-unit id="721818c45c73ca5a281d16b32f7f5b2fbb8e3364" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;articles/troubleshooting.md&quot;&gt;Troubleshooting&lt;/a&gt;Solving problems</source>
          <target state="translated">&lt;a href=&quot;articles/troubleshooting.md&quot;&gt;문제&lt;/a&gt; 해결 문제 해결</target>
        </trans-unit>
        <trans-unit id="02c3d44e8d3f389ee6a3668d658e48589c725e8a" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;articles/vendor-binaries.md&quot;&gt;Vendor binaries and the `vendor/bin` directory&lt;/a&gt;Expose command-line scripts from packages</source>
          <target state="translated">&lt;a href=&quot;articles/vendor-binaries.md&quot;&gt;공급 업체 바이너리 및`vendor / bin` 디렉토리&lt;/a&gt; 패키지에서 명령 줄 스크립트 노출</target>
        </trans-unit>
        <trans-unit id="454d22d364beb6382f9a19063005058fa0026a41" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;articles/versions.md&quot;&gt;Versions and constraints&lt;/a&gt;Versions explained.</source>
          <target state="translated">&lt;a href=&quot;articles/versions.md&quot;&gt;버전 및 제약 사항&lt;/a&gt; 버전 설명.</target>
        </trans-unit>
        <trans-unit id="8f127788d142cf73ef953139ac56346b3eb9cc06" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://www.php-fig.org/psr/psr-4/&quot;&gt;&lt;code&gt;PSR-4&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;http://www.php-fig.org/psr/psr-0/&quot;&gt;&lt;code&gt;PSR-0&lt;/code&gt;&lt;/a&gt; autoloading, &lt;code&gt;classmap&lt;/code&gt; generation and &lt;code&gt;files&lt;/code&gt; includes are supported.</source>
          <target state="translated">&lt;a href=&quot;http://www.php-fig.org/psr/psr-4/&quot;&gt; &lt;code&gt;PSR-4&lt;/code&gt; &lt;/a&gt; 및&lt;a href=&quot;http://www.php-fig.org/psr/psr-0/&quot;&gt; &lt;code&gt;PSR-0&lt;/code&gt; &lt;/a&gt; 자동로드, &lt;code&gt;classmap&lt;/code&gt; 생성 및 &lt;code&gt;files&lt;/code&gt; 포함이 지원됩니다.</target>
        </trans-unit>
        <trans-unit id="a5c84c55dfabff132243f0b04d5eea88de96f2ff" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/settings/tokens&quot;&gt;Create&lt;/a&gt; an OAuth token on GitHub. &lt;a href=&quot;https://github.com/blog/1509-personal-api-tokens&quot;&gt;Read more&lt;/a&gt; on this.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/settings/tokens&quot;&gt;&lt;/a&gt;GitHub에서 OAuth 토큰을 생성하십시오 . 이것에 대해 &lt;a href=&quot;https://github.com/blog/1509-personal-api-tokens&quot;&gt;더 읽으십시오&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="2e316d95a461116ece689308f91fd1e88132521d" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://packagist.com&quot;&gt;Private Packagist&lt;/a&gt; is a commercial package hosting product offering professional support and web based management of private and public packages, and granular access permissions. Private Packagist provides mirroring for packages' zip files which makes installs faster and independent from third party systems - e.g. you can deploy even if GitHub is down because your zip files are mirrored.</source>
          <target state="translated">&lt;a href=&quot;https://packagist.com&quot;&gt;Private Packagist&lt;/a&gt; 는 개인 및 공개 패키지에 대한 전문적인 지원 및 웹 기반 관리 및 세분화 된 액세스 권한을 제공하는 상용 패키지 호스팅 제품입니다. Private Packagist는 패키지의 zip 파일에 대한 미러링을 제공하여 타사 시스템과 더 빠르고 독립적으로 설치합니다. 예를 들어 zip 파일이 미러링되어 GitHub가 다운 된 경우에도 배치 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a34719309e5d6aa3a87946e25525eb2e5c039012" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://packagist.com/&quot;&gt;Private Packagist&lt;/a&gt; is a hosted or self-hosted application providing private package hosting as well as mirroring of GitHub, Packagist.org and other package repositories.</source>
          <target state="translated">&lt;a href=&quot;https://packagist.com/&quot;&gt;Private Packagist&lt;/a&gt; 는 GitHub, Packagist.org 및 기타 패키지 리포지토리의 미러링뿐만 아니라 개인 패키지 호스팅을 제공하는 호스팅 또는 자체 호스팅 응용 프로그램입니다.</target>
        </trans-unit>
        <trans-unit id="a73010ec20dd9a4bb65ad8cd6a915fbea90486c1" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://packagist.org/&quot;&gt;Packagist&lt;/a&gt; is the main Composer repository. A Composer repository is basically a package source: a place where you can get packages from. Packagist aims to be the central repository that everybody uses. This means that you can automatically &lt;code&gt;require&lt;/code&gt; any package that is available there, without further specifying where Composer should look for the package.</source>
          <target state="translated">&lt;a href=&quot;https://packagist.org/&quot;&gt;Packagist&lt;/a&gt; 는 주요 Composer 저장소입니다. Composer 저장소는 기본적으로 패키지 소스입니다. 패키지를 얻을 수있는 곳입니다. Packagist는 모든 사람이 사용하는 중앙 저장소가되는 것을 목표로합니다. 즉 , Composer가 패키지를 찾을 위치를 추가로 지정하지 않고도 패키지를 사용할 수있는 패키지가 자동으로 &lt;code&gt;require&lt;/code&gt; 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="51a9981c44f6135b58412d815eed10491bd577a8" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://packagist.org/&quot;&gt;Packagist&lt;/a&gt; is the main package repository for Composer, and it is enabled by default. Anything that is published on Packagist is available automatically through Composer. Since &lt;a href=&quot;https://packagist.org/packages/monolog/monolog&quot;&gt;Monolog is on Packagist&lt;/a&gt;, we can depend on it without having to specify any additional repositories.</source>
          <target state="translated">&lt;a href=&quot;https://packagist.org/&quot;&gt;Packagist&lt;/a&gt; 는 Composer의 기본 패키지 저장소이며 기본적으로 사용됩니다. Packagist에 게시 된 모든 내용은 Composer를 통해 자동으로 제공됩니다. &lt;a href=&quot;https://packagist.org/packages/monolog/monolog&quot;&gt;Monolog는 Packagist에&lt;/a&gt; 있기 때문에 추가 리포지토리를 지정하지 않고도이를 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2f8d95cc6f11a73bfaae566fb66164c1ffa32e4f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;IntermediatePackage&lt;/code&gt;, which depends on &lt;code&gt;BasePackage&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;IntermediatePackage&lt;/code&gt; &lt;code&gt;BasePackage&lt;/code&gt; 에 따라 다른 중급 패키지</target>
        </trans-unit>
        <trans-unit id="c97af29157c8b8f02c9d1849bb18c05afe041451" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;TopLevelPackage1&lt;/code&gt; and &lt;code&gt;TopLevelPackage2&lt;/code&gt; which both depend on &lt;code&gt;IntermediatePackage&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;TopLevelPackage1&lt;/code&gt; &lt;code&gt;IntermediatePackage&lt;/code&gt; &lt;code&gt;TopLevelPackage2&lt;/code&gt; 에 의존하는 TopLevelPackage1 및 TopLevelPackage2</target>
        </trans-unit>
        <trans-unit id="2e6547936d424568452ba1a388d5e912b6ff4b7a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;absolute-directory&lt;/code&gt;: optional, a &lt;em&gt;local&lt;/em&gt; directory where the dist files are dumped instead of &lt;code&gt;output-dir&lt;/code&gt;/&lt;code&gt;directory&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;absolute-directory&lt;/code&gt; : 선택적, &lt;code&gt;output-dir&lt;/code&gt; / &lt;code&gt;directory&lt;/code&gt; 대신 dist 파일이 덤프 되는 &lt;em&gt;로컬 &lt;/em&gt;디렉토리</target>
        </trans-unit>
        <trans-unit id="b198fa112f0bbb468cc9a93fba00e2691ff604db" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;blacklist&lt;/code&gt;: optional, if set as a list of package names, satis will not dump the dist files of these packages</source>
          <target state="translated">&lt;code&gt;blacklist&lt;/code&gt; : 옵션, 패키지 이름 목록으로 설정하면 satis는이 패키지의 dist 파일을 덤프하지 않습니다</target>
        </trans-unit>
        <trans-unit id="ac9e75546ff24f9c2b8db9b20a9cb08139426b03" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;checksum&lt;/code&gt;: optional, &lt;code&gt;true&lt;/code&gt; by default, when disabled (&lt;code&gt;false&lt;/code&gt;) satis will not provide the sha1 checksum for the dist files</source>
          <target state="translated">&lt;code&gt;checksum&lt;/code&gt; : 선택, 기본적으로 &lt;code&gt;true&lt;/code&gt; , 비활성화되면 ( &lt;code&gt;false&lt;/code&gt; ) satis는 dist 파일에 대해 sha1 체크섬을 제공하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="38c0ef4a6dd08c91b5e6e07cc94348d6397bcfe2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;composer.json&lt;/code&gt;: Project setup</source>
          <target state="translated">&lt;code&gt;composer.json&lt;/code&gt; : 프로젝트 설정</target>
        </trans-unit>
        <trans-unit id="8c2a50728481a45b81650be6576035eb96cb5f62" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;config&lt;/code&gt;: optional, lets you define all config options from composer, except &lt;code&gt;archive-format&lt;/code&gt; and &lt;code&gt;archive-dir&lt;/code&gt; as the configuration is done through &lt;a href=&quot;#downloads&quot;&gt;archive&lt;/a&gt; instead. See docs on &lt;a href=&quot;../04-schema.md#config&quot;&gt;config schema&lt;/a&gt; for more details.</source>
          <target state="translated">&lt;code&gt;config&lt;/code&gt; : 선택 사항이며, 대신 &lt;a href=&quot;#downloads&quot;&gt;archive&lt;/a&gt; 를 통해 구성을 수행 할 때 &lt;code&gt;archive-format&lt;/code&gt; 및 &lt;code&gt;archive-dir&lt;/code&gt; 을 제외하고 composer에서 모든 구성 옵션을 정의 할 수 있습니다 . 자세한 내용은 &lt;a href=&quot;../04-schema.md#config&quot;&gt;구성 스키마에&lt;/a&gt; 대한 문서 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="c1e60a313eeef19dfa5ea7ff1081101138fa08eb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;description&lt;/code&gt;, &lt;code&gt;homepage&lt;/code&gt;, &lt;code&gt;keywords&lt;/code&gt;, &lt;code&gt;license&lt;/code&gt;, &lt;code&gt;minimum-stability&lt;/code&gt;, &lt;code&gt;name&lt;/code&gt;, &lt;code&gt;prefer-stable&lt;/code&gt;, &lt;code&gt;type&lt;/code&gt; and &lt;code&gt;version&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;description&lt;/code&gt; , &lt;code&gt;homepage&lt;/code&gt; , &lt;code&gt;keywords&lt;/code&gt; , &lt;code&gt;license&lt;/code&gt; , &lt;code&gt;minimum-stability&lt;/code&gt; , &lt;code&gt;name&lt;/code&gt; , &lt;code&gt;prefer-stable&lt;/code&gt; , &lt;code&gt;type&lt;/code&gt; 및 &lt;code&gt;version&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="d75d3f3556066feedf52b3171af355f56ebb0145" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;directory&lt;/code&gt;: required, the location of the dist files (inside the &lt;code&gt;output-dir&lt;/code&gt;)</source>
          <target state="translated">&lt;code&gt;directory&lt;/code&gt; : 필수, dist 파일의 위치 ( &lt;code&gt;output-dir&lt;/code&gt; 내부 )</target>
        </trans-unit>
        <trans-unit id="0e131a9cd9c9cce12d4ffffc9c7f2fd9651f9725" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ext-&amp;lt;name&amp;gt;&lt;/code&gt; allows you to require PHP extensions (includes core extensions). Versioning can be quite inconsistent here, so it's often a good idea to set the constraint to &lt;code&gt;*&lt;/code&gt;. An example of an extension package name is &lt;code&gt;ext-gd&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;ext-&amp;lt;name&amp;gt;&lt;/code&gt; 을 사용하면 PHP 확장 (핵심 확장 포함)이 필요합니다. 여기에서 버전 관리가 일관되지 않을 수 있으므로 제약 조건을 &lt;code&gt;*&lt;/code&gt; 로 설정하는 것이 좋습니다 . 확장 패키지 이름의 예는 &lt;code&gt;ext-gd&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="679508ecfec33432665b9bda223426aab7264827" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;format&lt;/code&gt;: optional, &lt;code&gt;zip&lt;/code&gt; (default) or &lt;code&gt;tar&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;format&lt;/code&gt; : 선택 사항, &lt;code&gt;zip&lt;/code&gt; (기본값) 또는 &lt;code&gt;tar&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="3b8223a09896d0d02daa5edaa85bbd94bec4b18b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;hhvm&lt;/code&gt; represents the version of the HHVM runtime and allows you to apply a constraint, e.g., &lt;code&gt;^2.3&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;hhvm&lt;/code&gt; 은 HHVM 런타임 버전을 나타내며, 예를 들어 &lt;code&gt;^2.3&lt;/code&gt; 과 같은 제약 조건을 적용 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="67a67e5a538438f0ae349f6d0484a263e9baeb72" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lib-&amp;lt;name&amp;gt;&lt;/code&gt; allows constraints to be made on versions of libraries used by PHP. The following are available: &lt;code&gt;curl&lt;/code&gt;, &lt;code&gt;iconv&lt;/code&gt;, &lt;code&gt;icu&lt;/code&gt;, &lt;code&gt;libxml&lt;/code&gt;, &lt;code&gt;openssl&lt;/code&gt;, &lt;code&gt;pcre&lt;/code&gt;, &lt;code&gt;uuid&lt;/code&gt;, &lt;code&gt;xsl&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;lib-&amp;lt;name&amp;gt;&lt;/code&gt; 을 사용하면 PHP가 사용하는 라이브러리 버전에서 제약 조건을 만들 수 있습니다. 다음을 사용할 수 있습니다 &lt;code&gt;curl&lt;/code&gt; , &lt;code&gt;iconv&lt;/code&gt; , &lt;code&gt;icu&lt;/code&gt; , &lt;code&gt;libxml&lt;/code&gt; , &lt;code&gt;openssl&lt;/code&gt; , &lt;code&gt;pcre&lt;/code&gt; , &lt;code&gt;uuid&lt;/code&gt; , &lt;code&gt;xsl&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="d86016a714e39684ab681491c97e6fd86feb1497" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;notify-batch&lt;/code&gt;: optional, specify a URL that will be called every time a user installs a package. See &lt;a href=&quot;../05-repositories.md#notify-batch&quot;&gt;notify-batch&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;notify-batch&lt;/code&gt; : 선택 사항이며, 사용자가 패키지를 설치할 때마다 호출 될 URL을 지정하십시오. &lt;a href=&quot;../05-repositories.md#notify-batch&quot;&gt;notify-batch를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="bbe88be73fbb4a95b28815d69696637af544dd06" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;output-dir&lt;/code&gt;: optional, defines where to output the repository files if not provided as an argument when calling the &lt;code&gt;build&lt;/code&gt; command.</source>
          <target state="translated">&lt;code&gt;output-dir&lt;/code&gt; : 선택 사항이며 &lt;code&gt;build&lt;/code&gt; 명령을 호출 할 때 인수로 제공되지 않은 경우 리포지토리 파일을 출력 할 위치를 정의합니다 .</target>
        </trans-unit>
        <trans-unit id="594bd80832cf804800b9f0ff495ea34a72146191" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;output-html&lt;/code&gt;: optional, &lt;code&gt;true&lt;/code&gt; by default, when disabled (&lt;code&gt;false&lt;/code&gt;) satis will not generate the &lt;code&gt;output-dir&lt;/code&gt;/index.html page.</source>
          <target state="translated">&lt;code&gt;output-html&lt;/code&gt; : 선택 사항, 기본적으로 &lt;code&gt;true&lt;/code&gt; , 비활성화 된 경우 ( &lt;code&gt;false&lt;/code&gt; ) satis는 &lt;code&gt;output-dir&lt;/code&gt; /index.html 페이지를 생성하지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="dcc17d6df4998746b6378927f41123757bec6723" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;php&lt;/code&gt; represents the PHP version of the user, allowing you to apply constraints, e.g. &lt;code&gt;^7.1&lt;/code&gt;. To require a 64bit version of php, you can require the &lt;code&gt;php-64bit&lt;/code&gt; package.</source>
          <target state="translated">&lt;code&gt;php&lt;/code&gt; 는 사용자의 PHP 버전을 나타내며, 예를 들어 &lt;code&gt;^7.1&lt;/code&gt; 과 같은 제약 조건을 적용 할 수 있습니다 . 64 비트 버전의 PHP가 필요하면 &lt;code&gt;php-64bit&lt;/code&gt; 패키지 가 필요할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="281b25574038a232c87c8262faa71fe4677631e8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;prefix-url&lt;/code&gt;: optional, location of the downloads, homepage (from &lt;code&gt;satis.json&lt;/code&gt;) followed by &lt;code&gt;directory&lt;/code&gt; by default</source>
          <target state="translated">&lt;code&gt;prefix-url&lt;/code&gt; : 선택 사항, 다운로드 위치, 홈페이지 ( &lt;code&gt;satis.json&lt;/code&gt; ) 및 기본적 으로 &lt;code&gt;directory&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="43ef97ed3cea66ff838f9963595a313cea141567" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;providers&lt;/code&gt;: optional, &lt;code&gt;false&lt;/code&gt; by default, when enabled (&lt;code&gt;true&lt;/code&gt;) each package will be dumped into a separate include file which will be only loaded by composer when the package is really required. Speeds up composer handling for repositories with huge number of packages like f.i. packagist.</source>
          <target state="translated">&lt;code&gt;providers&lt;/code&gt; : 선택 사항, 기본적으로 &lt;code&gt;false&lt;/code&gt; , 활성화 된 경우 ( &lt;code&gt;true&lt;/code&gt; ) 각 패키지는 패키지가 실제로 필요할 때만 composer에 의해로드되는 별도의 포함 파일로 덤프됩니다. fi packagist와 같은 수많은 패키지로 리포지토리의 작곡가 처리 속도를 높입니다.</target>
        </trans-unit>
        <trans-unit id="09803c1856f9c77da7455e7e8e85d93c066217fb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;require&lt;/code&gt; and &lt;code&gt;require-dev&lt;/code&gt; additionally support explicit references (i.e. commit) for dev versions to make sure they are locked to a given state, even when you run update. These only work if you explicitly require a dev version and append the reference with &lt;code&gt;#&amp;lt;ref&amp;gt;&lt;/code&gt;. This is also a &lt;a href=&quot;04-schema.md#root-package&quot;&gt;root-only&lt;/a&gt; feature and will be ignored in dependencies.</source>
          <target state="translated">&lt;code&gt;require&lt;/code&gt; 및 &lt;code&gt;require-dev&lt;/code&gt; 는 업데이트를 실행할 때에도 개발자 버전이 지정된 상태로 잠겨 있는지 확인하기 위해 명시 적 참조 (예 : 커밋)를 추가로 지원합니다. 명시 적으로 개발자 버전이 필요하고 참조를 &lt;code&gt;#&amp;lt;ref&amp;gt;&lt;/code&gt; 로 추가하는 경우에만 작동합니다 . 이것은 또한 &lt;a href=&quot;04-schema.md#root-package&quot;&gt;루트 전용&lt;/a&gt; 기능이며 종속성에서 무시됩니다.</target>
        </trans-unit>
        <trans-unit id="9c58c08b8c40d2e2430bd8a779f673b0ca6e174c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;require&lt;/code&gt; and &lt;code&gt;require-dev&lt;/code&gt; additionally support stability flags (&lt;a href=&quot;04-schema.md#root-package&quot;&gt;root-only&lt;/a&gt;). These allow you to further restrict or expand the stability of a package beyond the scope of the &lt;a href=&quot;#minimum-stability&quot;&gt;minimum-stability&lt;/a&gt; setting. You can apply them to a constraint, or apply them to an empty constraint if you want to allow unstable packages of a dependency for example.</source>
          <target state="translated">&lt;code&gt;require&lt;/code&gt; 및 &lt;code&gt;require-dev&lt;/code&gt; 는 안정성 플래그를 추가로 지원합니다 ( &lt;a href=&quot;04-schema.md#root-package&quot;&gt;root-only&lt;/a&gt; ). 이를 통해 &lt;a href=&quot;#minimum-stability&quot;&gt;최소 안정성&lt;/a&gt; 설정 범위를 넘어서 패키지의 안정성을 추가로 제한하거나 확장 할 수 있습니다 . 예를 들어, 종속성의 불안정한 패키지를 허용하려는 경우 제약 조건에 적용하거나 빈 제약 조건에 적용 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="110e5b74d09bfeb5b8d896805490746c9860ba1e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;require&lt;/code&gt; and &lt;code&gt;require-dev&lt;/code&gt; also support references to specific PHP versions and PHP extensions your project needs to run successfully.</source>
          <target state="translated">&lt;code&gt;require&lt;/code&gt; 및 &lt;code&gt;require-dev&lt;/code&gt; 는 프로젝트를 성공적으로 실행하는 데 필요한 특정 PHP 버전 및 PHP 확장에 대한 참조도 지원합니다.</target>
        </trans-unit>
        <trans-unit id="ada8fab31a3fc7c76ddbe7b6249857e3bf1fcfbd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;setting-key&lt;/code&gt; is a configuration option name and &lt;code&gt;setting-value1&lt;/code&gt; is a configuration value. For settings that can take an array of values (like &lt;code&gt;github-protocols&lt;/code&gt;), more than one setting-value arguments are allowed.</source>
          <target state="translated">&lt;code&gt;setting-key&lt;/code&gt; 는 구성 옵션 이름이고 &lt;code&gt;setting-value1&lt;/code&gt; 은 구성 값입니다. &lt;code&gt;github-protocols&lt;/code&gt; 와 같이 값 배열을 사용할 수있는 설정의 경우 둘 이상의 설정 값 인수가 허용됩니다.</target>
        </trans-unit>
        <trans-unit id="2e45f2746ca4fa66796beddc0d44b5aec66d0356" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;skip-dev&lt;/code&gt;: optional, &lt;code&gt;false&lt;/code&gt; by default, when enabled (&lt;code&gt;true&lt;/code&gt;) satis will not create downloads for branches</source>
          <target state="translated">&lt;code&gt;skip-dev&lt;/code&gt; : 선택, 기본적으로 &lt;code&gt;false&lt;/code&gt; , 활성화 된 경우 ( &lt;code&gt;true&lt;/code&gt; ) satis는 분기에 대한 다운로드를 생성하지 않습니다</target>
        </trans-unit>
        <trans-unit id="1fb7239dafbd5a81a2db305d00fbed7893fa72bd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;twig-template&lt;/code&gt;: optional, a path to a personalized &lt;a href=&quot;https://twig.sensiolabs.org/&quot;&gt;Twig&lt;/a&gt; template for the &lt;code&gt;output-dir&lt;/code&gt;/index.html page.</source>
          <target state="translated">&lt;code&gt;twig-template&lt;/code&gt; : 선택 사항이며 &lt;code&gt;output-dir&lt;/code&gt; /index.html 페이지에 대한 개인화 된 &lt;a href=&quot;https://twig.sensiolabs.org/&quot;&gt;Twig&lt;/a&gt; 템플릿 경로 입니다.</target>
        </trans-unit>
        <trans-unit id="dbff6a322930947824e72c4ec1f0e16333fb9b54" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;whitelist&lt;/code&gt;: optional, if set as a list of package names, satis will only dump the dist files of these packages</source>
          <target state="translated">&lt;code&gt;whitelist&lt;/code&gt; : 옵션, 패키지 이름 목록으로 설정된 경우 satis는이 패키지의 dist 파일 만 덤프합니다</target>
        </trans-unit>
        <trans-unit id="de9e57f8389bb01d5c30f2bed2f51a6d08c660f6" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Composer commands are based on the &lt;a href=&quot;https://symfony.com/doc/current/components/console.html&quot;&gt;Symfony Console Component&lt;/a&gt;.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;Composer 명령은 &lt;a href=&quot;https://symfony.com/doc/current/components/console.html&quot;&gt;Symfony Console 구성 요소를&lt;/a&gt; 기반으로합니다 .&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="6ccb76c81fa61f75f41815c8ceeb093b4b4d4077" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;For the following discussion, let's assume the following sample library repository:&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;다음 논의를 위해 다음 샘플 라이브러리 저장소를 가정하십시오.&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="1d7df88c19567dd6e16f727e3b8803fe9830deaa" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Instead of being installed in &lt;code&gt;/vendor&lt;/code&gt; any package installed using this Installer will be put in the &lt;code&gt;/data/templates/&amp;lt;stripped name&amp;gt;&lt;/code&gt; folder.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt; &lt;code&gt;/vendor&lt;/code&gt; 에 설치하는 대신 이 설치 프로그램을 사용하여 설치된 패키지는 &lt;code&gt;/data/templates/&amp;lt;stripped name&amp;gt;&lt;/code&gt; 폴더에 저장됩니다.&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="c968d452eee5799f7b1088aee8a056da1f636231" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;See the next chapter for an instruction how to create Custom Installers.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;사용자 정의 설치 프로그램을 만드는 방법에 대한 지침은 다음 장을 참조하십시오.&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="dec386eb9531926a09288fea60802644d93575a1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--absolute:&lt;/strong&gt; Returns absolute paths when fetching *-dir config values instead of relative.</source>
          <target state="translated">&lt;strong&gt;--absolute:&lt;/strong&gt; Returns absolute paths when fetching *-dir config values instead of relative.</target>
        </trans-unit>
        <trans-unit id="371ceb7123ea241c2c12742e4590333cbc99a380" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--all (-a):&lt;/strong&gt; Show all packages, not just outdated (alias for &lt;code&gt;composer show -l&lt;/code&gt;).</source>
          <target state="translated">&lt;strong&gt;--all (-a):&lt;/strong&gt; Show all packages, not just outdated (alias for &lt;code&gt;composer show -l&lt;/code&gt;).</target>
        </trans-unit>
        <trans-unit id="c2cd131dda29cfaa33574ac56c57153cbc281558" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--all :&lt;/strong&gt; List all packages available in all your repositories.</source>
          <target state="translated">&lt;strong&gt;--all :&lt;/strong&gt; List all packages available in all your repositories.</target>
        </trans-unit>
        <trans-unit id="5692feca06452dd2bc9335eea0ef06204f8f2680" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--ansi:&lt;/strong&gt; Force ANSI output.</source>
          <target state="translated">&lt;strong&gt;--ansi:&lt;/strong&gt; Force ANSI output.</target>
        </trans-unit>
        <trans-unit id="5054bfc1f8ec08c16f152b8b07aa60154d2e60b7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--apcu-autoloader:&lt;/strong&gt; Use APCu to cache found/not-found classes.</source>
          <target state="translated">&lt;strong&gt;--apcu-autoloader:&lt;/strong&gt; Use APCu to cache found/not-found classes.</target>
        </trans-unit>
        <trans-unit id="c5937266e89d837369ef5f13718f20be62478d8b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--apcu:&lt;/strong&gt; Use APCu to cache found/not-found classes.</source>
          <target state="translated">&lt;strong&gt;--apcu:&lt;/strong&gt; Use APCu to cache found/not-found classes.</target>
        </trans-unit>
        <trans-unit id="77c602af3b26ab8cb84fd370ed05bad85a090158" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--auth (-a):&lt;/strong&gt; Affect auth config file (only used for --editor).</source>
          <target state="translated">&lt;strong&gt;--auth (-a):&lt;/strong&gt; Affect auth config file (only used for --editor).</target>
        </trans-unit>
        <trans-unit id="3670d4e6c1063481934923942d3a28c79af08e1a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--author:&lt;/strong&gt; Author name of the package.</source>
          <target state="translated">&lt;strong&gt;--author:&lt;/strong&gt; Author name of the package.</target>
        </trans-unit>
        <trans-unit id="4b43bc0a394cd5014544a282bb1d5ee286ed090a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--available (-a):&lt;/strong&gt; List available packages only.</source>
          <target state="translated">&lt;strong&gt;--available (-a):&lt;/strong&gt; List available packages only.</target>
        </trans-unit>
        <trans-unit id="b6494bbaaebfe1f05f8745dd3df1d22039bbef15" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--by-package:&lt;/strong&gt; Groups output by suggesting package.</source>
          <target state="translated">&lt;strong&gt;--by-package:&lt;/strong&gt; Groups output by suggesting package.</target>
        </trans-unit>
        <trans-unit id="12e3089da04250b5fc0f0d195641a1440c31ed72" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--by-suggestion:&lt;/strong&gt; Groups output by suggested package.</source>
          <target state="translated">&lt;strong&gt;--by-suggestion:&lt;/strong&gt; Groups output by suggested package.</target>
        </trans-unit>
        <trans-unit id="8761b53e8658e2f79294741dffb5f333f7ddaf63" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--classmap-authoritative (-a):&lt;/strong&gt; Autoload classes from the classmap only. Implicitly enables &lt;code&gt;--optimize-autoloader&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;--classmap-authoritative (-a):&lt;/strong&gt; Autoload classes from the classmap only. Implicitly enables &lt;code&gt;--optimize-autoloader&lt;/code&gt;.</target>
        </trans-unit>
        <trans-unit id="1a5a400d83b6b0ab4fd61f58f8b4ac0e22c50191" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--classmap-authoritative (-a):&lt;/strong&gt; Autoload classes from the classmap only. Implicitly enables &lt;code&gt;--optimize&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;--classmap-authoritative (-a):&lt;/strong&gt; Autoload classes from the classmap only. Implicitly enables &lt;code&gt;--optimize&lt;/code&gt;.</target>
        </trans-unit>
        <trans-unit id="e61a887544eda06725c54d9026f05db95f65ef6f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--clean-backups:&lt;/strong&gt; Delete old backups during an update. This makes the current version of Composer the only backup available after the update.</source>
          <target state="translated">&lt;strong&gt;--clean-backups:&lt;/strong&gt; Delete old backups during an update. This makes the current version of Composer the only backup available after the update.</target>
        </trans-unit>
        <trans-unit id="a1781db80bdda4a7187020ebe3e4a001640577ad" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--description:&lt;/strong&gt; Description of the package.</source>
          <target state="translated">&lt;strong&gt;--description:&lt;/strong&gt; Description of the package.</target>
        </trans-unit>
        <trans-unit id="3c3237d5ec8261f1a62db7391df06071b985a12c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--dev:&lt;/strong&gt; Add packages to &lt;code&gt;require-dev&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;--dev:&lt;/strong&gt; Add packages to &lt;code&gt;require-dev&lt;/code&gt;.</target>
        </trans-unit>
        <trans-unit id="7b85e4c322b3a94bab7b40bde3ae8f3177989801" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--dev:&lt;/strong&gt; Install packages listed in &lt;code&gt;require-dev&lt;/code&gt; (this is the default behavior).</source>
          <target state="translated">&lt;strong&gt;--dev:&lt;/strong&gt; Install packages listed in &lt;code&gt;require-dev&lt;/code&gt; (this is the default behavior).</target>
        </trans-unit>
        <trans-unit id="bd9a9396996057e266c59adea7e719cecdf2f25a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--dev:&lt;/strong&gt; Install packages listed in &lt;code&gt;require-dev&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;--dev:&lt;/strong&gt; Install packages listed in &lt;code&gt;require-dev&lt;/code&gt;.</target>
        </trans-unit>
        <trans-unit id="5ba13a3634f9c75ec03e84f10520c9cd89990b40" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--dev:&lt;/strong&gt; Remove packages from &lt;code&gt;require-dev&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;--dev:&lt;/strong&gt; Remove packages from &lt;code&gt;require-dev&lt;/code&gt;.</target>
        </trans-unit>
        <trans-unit id="17e87b7ddca31591b3c65a0614b9011c92fc8afa" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--dev:&lt;/strong&gt; Sets the dev mode.</source>
          <target state="translated">&lt;strong&gt;--dev:&lt;/strong&gt; Sets the dev mode.</target>
        </trans-unit>
        <trans-unit id="91c0dc4766e2ebc6f181d78c5717ed9c6942b828" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--dir:&lt;/strong&gt; Write the archive to this directory (default: &quot;.&quot;)</source>
          <target state="translated">&lt;strong&gt;--dir:&lt;/strong&gt; Write the archive to this directory (default: &quot;.&quot;)</target>
        </trans-unit>
        <trans-unit id="8fe22edfc27397c3d36e9e89be864072aa35241f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--direct (-D):&lt;/strong&gt; Restricts the list of packages to your direct dependencies.</source>
          <target state="translated">&lt;strong&gt;--direct (-D):&lt;/strong&gt; Restricts the list of packages to your direct dependencies.</target>
        </trans-unit>
        <trans-unit id="6aaa26835161c91175aa04b808343b783352d92f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--dry-run:&lt;/strong&gt; If you want to run through an installation without actually installing a package, you can use &lt;code&gt;--dry-run&lt;/code&gt;. This will simulate the installation and show you what would happen.</source>
          <target state="translated">&lt;strong&gt;--dry-run:&lt;/strong&gt; If you want to run through an installation without actually installing a package, you can use &lt;code&gt;--dry-run&lt;/code&gt;. This will simulate the installation and show you what would happen.</target>
        </trans-unit>
        <trans-unit id="ecc8b40af03d44f84feefa1a79a3111aa59277ff" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--dry-run:&lt;/strong&gt; Simulate the command without actually doing anything.</source>
          <target state="translated">&lt;strong&gt;--dry-run:&lt;/strong&gt; Simulate the command without actually doing anything.</target>
        </trans-unit>
        <trans-unit id="eb4cf15691dfeabfe5d9acb26299e1d77ff0ea64" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--editor (-e):&lt;/strong&gt; Open the local composer.json file using in a text editor as defined by the &lt;code&gt;EDITOR&lt;/code&gt; env variable. With the &lt;code&gt;--global&lt;/code&gt; option, this opens the global config file.</source>
          <target state="translated">&lt;strong&gt;--editor (-e):&lt;/strong&gt; Open the local composer.json file using in a text editor as defined by the &lt;code&gt;EDITOR&lt;/code&gt; env variable. With the &lt;code&gt;--global&lt;/code&gt; option, this opens the global config file.</target>
        </trans-unit>
        <trans-unit id="943978498ae9ab15ce459d1cb0a2e10a9439da83" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--file:&lt;/strong&gt; Write the archive with the given file name.</source>
          <target state="translated">&lt;strong&gt;--file:&lt;/strong&gt; Write the archive with the given file name.</target>
        </trans-unit>
        <trans-unit id="9b6b0bdcdf9143a74e62d6e1db83ab688e5c1834" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--file=&quot;...&quot; (-f):&lt;/strong&gt; Operate on a specific file instead of composer.json. Note that this cannot be used in conjunction with the &lt;code&gt;--global&lt;/code&gt; option.</source>
          <target state="translated">&lt;strong&gt;--file=&quot;...&quot; (-f):&lt;/strong&gt; Operate on a specific file instead of composer.json. Note that this cannot be used in conjunction with the &lt;code&gt;--global&lt;/code&gt; option.</target>
        </trans-unit>
        <trans-unit id="659a1e21cbb0221761c3aff2cd66d56382f70801" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--format (-f):&lt;/strong&gt; Format of the resulting archive: tar or zip (default: &quot;tar&quot;)</source>
          <target state="translated">&lt;strong&gt;--format (-f):&lt;/strong&gt; Format of the resulting archive: tar or zip (default: &quot;tar&quot;)</target>
        </trans-unit>
        <trans-unit id="5c612927ebb4a11278c5f202a204a0a5f03bcd21" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--format (-f):&lt;/strong&gt; Lets you pick between text (default) or json output format.</source>
          <target state="translated">&lt;strong&gt;--format (-f):&lt;/strong&gt; Lets you pick between text (default) or json output format.</target>
        </trans-unit>
        <trans-unit id="c91dc0c1155b96d1b57b79e67c218f044efc2a74" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--format:&lt;/strong&gt; Format of the output: text or json (default: &quot;text&quot;)</source>
          <target state="translated">&lt;strong&gt;--format:&lt;/strong&gt; Format of the output: text or json (default: &quot;text&quot;)</target>
        </trans-unit>
        <trans-unit id="de4ea042f2767199ae39a7d6bfda61867b9330a3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--global (-g):&lt;/strong&gt; Operate on the global config file located at &lt;code&gt;$COMPOSER_HOME/config.json&lt;/code&gt; by default. Without this option, this command affects the local composer.json file or a file specified by &lt;code&gt;--file&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;--global (-g):&lt;/strong&gt; Operate on the global config file located at &lt;code&gt;$COMPOSER_HOME/config.json&lt;/code&gt; by default. Without this option, this command affects the local composer.json file or a file specified by &lt;code&gt;--file&lt;/code&gt;.</target>
        </trans-unit>
        <trans-unit id="0ec73deaf9374b0b7955dbcc3b9d179cc442d790" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--help (-h):&lt;/strong&gt; Display help information.</source>
          <target state="translated">&lt;strong&gt;--help (-h):&lt;/strong&gt; Display help information.</target>
        </trans-unit>
        <trans-unit id="590e94faeb874423eecbf9ce2380df0d1454cf51" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--homepage (-H):&lt;/strong&gt; Open the homepage instead of the repository URL.</source>
          <target state="translated">&lt;strong&gt;--homepage (-H):&lt;/strong&gt; Open the homepage instead of the repository URL.</target>
        </trans-unit>
        <trans-unit id="e6d2210ad5dfa4b17c04487c08704d1875d1e18c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--homepage:&lt;/strong&gt; Homepage of the package.</source>
          <target state="translated">&lt;strong&gt;--homepage:&lt;/strong&gt; Homepage of the package.</target>
        </trans-unit>
        <trans-unit id="362276146b492a875910f38b6f642c647715944a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--ignore-platform-reqs:&lt;/strong&gt; ignore &lt;code&gt;php&lt;/code&gt;, &lt;code&gt;hhvm&lt;/code&gt;, &lt;code&gt;lib-*&lt;/code&gt; and &lt;code&gt;ext-*&lt;/code&gt; requirements and force the installation even if the local machine does not fulfill these.</source>
          <target state="translated">&lt;strong&gt;--ignore-platform-reqs:&lt;/strong&gt; ignore &lt;code&gt;php&lt;/code&gt;, &lt;code&gt;hhvm&lt;/code&gt;, &lt;code&gt;lib-*&lt;/code&gt; and &lt;code&gt;ext-*&lt;/code&gt; requirements and force the installation even if the local machine does not fulfill these.</target>
        </trans-unit>
        <trans-unit id="c622d4c08a8d9d565106baf426b408159b1cff4a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--ignore-platform-reqs:&lt;/strong&gt; ignore &lt;code&gt;php&lt;/code&gt;, &lt;code&gt;hhvm&lt;/code&gt;, &lt;code&gt;lib-*&lt;/code&gt; and &lt;code&gt;ext-*&lt;/code&gt; requirements and force the installation even if the local machine does not fulfill these. See also the &lt;a href=&quot;06-config.md#platform&quot;&gt;&lt;code&gt;platform&lt;/code&gt;&lt;/a&gt; config option.</source>
          <target state="translated">&lt;strong&gt;--ignore-platform-reqs:&lt;/strong&gt; ignore &lt;code&gt;php&lt;/code&gt;, &lt;code&gt;hhvm&lt;/code&gt;, &lt;code&gt;lib-*&lt;/code&gt; and &lt;code&gt;ext-*&lt;/code&gt; requirements and force the installation even if the local machine does not fulfill these. See also the &lt;a href=&quot;06-config.md#platform&quot;&gt;&lt;code&gt;platform&lt;/code&gt;&lt;/a&gt; config option.</target>
        </trans-unit>
        <trans-unit id="b0d7e505532b41d64c6416ffdbcbcaa1f34ad469" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--installed (-i):&lt;/strong&gt; List the packages that are installed (this is enabled by default, and deprecated).</source>
          <target state="translated">&lt;strong&gt;--installed (-i):&lt;/strong&gt; List the packages that are installed (this is enabled by default, and deprecated).</target>
        </trans-unit>
        <trans-unit id="7bb8181536f98c0f1c75ab90ad8001a1716516d2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--interactive:&lt;/strong&gt; Interactive interface with autocompletion to select the packages to update.</source>
          <target state="translated">&lt;strong&gt;--interactive:&lt;/strong&gt; Interactive interface with autocompletion to select the packages to update.</target>
        </trans-unit>
        <trans-unit id="3be741ac62d9530ee5e1d21b3df1ecbee139ee8b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--keep-vcs:&lt;/strong&gt; Skip the deletion of the VCS metadata for the created project. This is mostly useful if you run the command in non-interactive mode.</source>
          <target state="translated">&lt;strong&gt;--keep-vcs:&lt;/strong&gt; Skip the deletion of the VCS metadata for the created project. This is mostly useful if you run the command in non-interactive mode.</target>
        </trans-unit>
        <trans-unit id="9c3969d77674d274d1b6cd87d51f3f9d07d7967e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--latest (-l):&lt;/strong&gt; List all installed packages including their latest version.</source>
          <target state="translated">&lt;strong&gt;--latest (-l):&lt;/strong&gt; List all installed packages including their latest version.</target>
        </trans-unit>
        <trans-unit id="085d066bda65add716833dbc98538672d289de65" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--license (-l):&lt;/strong&gt; License of package.</source>
          <target state="translated">&lt;strong&gt;--license (-l):&lt;/strong&gt; License of package.</target>
        </trans-unit>
        <trans-unit id="f48801de109320f2bb4dc4b2a8f97a0d0609a435" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--list (-l):&lt;/strong&gt; List the available composer binaries.</source>
          <target state="translated">&lt;strong&gt;--list (-l):&lt;/strong&gt; List the available composer binaries.</target>
        </trans-unit>
        <trans-unit id="4039633ce1b90616305f938d369e276e5ae60b97" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--list (-l):&lt;/strong&gt; List user defined scripts.</source>
          <target state="translated">&lt;strong&gt;--list (-l):&lt;/strong&gt; List user defined scripts.</target>
        </trans-unit>
        <trans-unit id="32c137ac5f6d53ba055415e124f6c31525ac19c9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--list (-l):&lt;/strong&gt; Show the list of current config variables. With the &lt;code&gt;--global&lt;/code&gt; option this lists the global configuration only.</source>
          <target state="translated">&lt;strong&gt;--list (-l):&lt;/strong&gt; Show the list of current config variables. With the &lt;code&gt;--global&lt;/code&gt; option this lists the global configuration only.</target>
        </trans-unit>
        <trans-unit id="72ff0a3ad2fdd0b114a9fd794172d6338e7dc7ca" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--lock:&lt;/strong&gt; Only updates the lock file hash to suppress warning about the lock file being out of date.</source>
          <target state="translated">&lt;strong&gt;--lock:&lt;/strong&gt; Only updates the lock file hash to suppress warning about the lock file being out of date.</target>
        </trans-unit>
        <trans-unit id="983161050f323402209940917450a0eaa16dad3d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--minor-only (-m):&lt;/strong&gt; Only shows packages that have minor SemVer-compatible updates.</source>
          <target state="translated">&lt;strong&gt;--minor-only (-m):&lt;/strong&gt; Only shows packages that have minor SemVer-compatible updates.</target>
        </trans-unit>
        <trans-unit id="5ba29fcb0a6f804b1d1c0e199ae109c4a4418eb6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--minor-only (-m):&lt;/strong&gt; Use with --latest. Only shows packages that have minor SemVer-compatible updates.</source>
          <target state="translated">&lt;strong&gt;--minor-only (-m):&lt;/strong&gt; Use with --latest. Only shows packages that have minor SemVer-compatible updates.</target>
        </trans-unit>
        <trans-unit id="fdd8aa443c682088b133c921732d266443081b97" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--name-only (-N):&lt;/strong&gt; List package names only.</source>
          <target state="translated">&lt;strong&gt;--name-only (-N):&lt;/strong&gt; List package names only.</target>
        </trans-unit>
        <trans-unit id="4a7bf7a8caaf051fcfad6b8466167846d0ce88f3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--name:&lt;/strong&gt; Name of the package.</source>
          <target state="translated">&lt;strong&gt;--name:&lt;/strong&gt; Name of the package.</target>
        </trans-unit>
        <trans-unit id="eef784e5890b101fa241f172e76e8c3555d37459" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--no-ansi:&lt;/strong&gt; Disable ANSI output.</source>
          <target state="translated">&lt;strong&gt;--no-ansi:&lt;/strong&gt; Disable ANSI output.</target>
        </trans-unit>
        <trans-unit id="387943bf1b3ed3aace86fe9cbf17713d4ff2eace" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--no-autoloader:&lt;/strong&gt; Skips autoloader generation.</source>
          <target state="translated">&lt;strong&gt;--no-autoloader:&lt;/strong&gt; Skips autoloader generation.</target>
        </trans-unit>
        <trans-unit id="d37de835b97ed526cc926032b14f2fc7b6165a6d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--no-cache:&lt;/strong&gt; Disables the use of the cache directory. Same as setting the COMPOSER_CACHE_DIR env var to /dev/null (or NUL on Windows).</source>
          <target state="translated">&lt;strong&gt;--no-cache:&lt;/strong&gt; Disables the use of the cache directory. Same as setting the COMPOSER_CACHE_DIR env var to /dev/null (or NUL on Windows).</target>
        </trans-unit>
        <trans-unit id="a2fe70ec4b0e47428c2fc6e83e5fda244dee190b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--no-check-all:&lt;/strong&gt; Do not emit a warning if requirements in &lt;code&gt;composer.json&lt;/code&gt; use unbound or overly strict version constraints.</source>
          <target state="translated">&lt;strong&gt;--no-check-all:&lt;/strong&gt; Do not emit a warning if requirements in &lt;code&gt;composer.json&lt;/code&gt; use unbound or overly strict version constraints.</target>
        </trans-unit>
        <trans-unit id="66dd00e74a9689610353942214160c2588e15e69" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--no-check-lock:&lt;/strong&gt; Do not emit an error if &lt;code&gt;composer.lock&lt;/code&gt; exists and is not up to date.</source>
          <target state="translated">&lt;strong&gt;--no-check-lock:&lt;/strong&gt; Do not emit an error if &lt;code&gt;composer.lock&lt;/code&gt; exists and is not up to date.</target>
        </trans-unit>
        <trans-unit id="0312657edd42b7d6194357d6c323a08d086ac6ec" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--no-check-publish:&lt;/strong&gt; Do not emit an error if &lt;code&gt;composer.json&lt;/code&gt; is unsuitable for publishing as a package on Packagist but is otherwise valid.</source>
          <target state="translated">&lt;strong&gt;--no-check-publish:&lt;/strong&gt; Do not emit an error if &lt;code&gt;composer.json&lt;/code&gt; is unsuitable for publishing as a package on Packagist but is otherwise valid.</target>
        </trans-unit>
        <trans-unit id="478cf0d7cf6c299e583b7f5eeeb71aa128a5a5ee" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--no-dev:&lt;/strong&gt; Disable dev mode.</source>
          <target state="translated">&lt;strong&gt;--no-dev:&lt;/strong&gt; Disable dev mode.</target>
        </trans-unit>
        <trans-unit id="33b4918df9d8207addad27d893dd3d1104fd8e9c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--no-dev:&lt;/strong&gt; Disables autoload-dev rules.</source>
          <target state="translated">&lt;strong&gt;--no-dev:&lt;/strong&gt; Disables autoload-dev rules.</target>
        </trans-unit>
        <trans-unit id="2215266c8be34ec3720733be85ba076b0d08e87b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--no-dev:&lt;/strong&gt; Disables installation of require-dev packages.</source>
          <target state="translated">&lt;strong&gt;--no-dev:&lt;/strong&gt; Disables installation of require-dev packages.</target>
        </trans-unit>
        <trans-unit id="c9c0d99cdbd04b725a72f21c014cd2b0795270ce" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--no-dev:&lt;/strong&gt; Excludes suggestions from &lt;code&gt;require-dev&lt;/code&gt; packages.</source>
          <target state="translated">&lt;strong&gt;--no-dev:&lt;/strong&gt; Excludes suggestions from &lt;code&gt;require-dev&lt;/code&gt; packages.</target>
        </trans-unit>
        <trans-unit id="c2496eca3984956706deed36f576f4df48bbf792" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--no-dev:&lt;/strong&gt; Remove dev dependencies from the output</source>
          <target state="translated">&lt;strong&gt;--no-dev:&lt;/strong&gt; Remove dev dependencies from the output</target>
        </trans-unit>
        <trans-unit id="fa5a4dd82b9a32babe8d8d3fd7eda7f2346f1a4a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--no-dev:&lt;/strong&gt; Skip installing packages listed in &lt;code&gt;require-dev&lt;/code&gt;. The autoloader generation skips the &lt;code&gt;autoload-dev&lt;/code&gt; rules.</source>
          <target state="translated">&lt;strong&gt;--no-dev:&lt;/strong&gt; Skip installing packages listed in &lt;code&gt;require-dev&lt;/code&gt;. The autoloader generation skips the &lt;code&gt;autoload-dev&lt;/code&gt; rules.</target>
        </trans-unit>
        <trans-unit id="4d87ee3b9b8c831ade789e27909dd3bf83a05766" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--no-install:&lt;/strong&gt; Disables installation of the vendors.</source>
          <target state="translated">&lt;strong&gt;--no-install:&lt;/strong&gt; Disables installation of the vendors.</target>
        </trans-unit>
        <trans-unit id="0e2dd7facaf0d3d64be7dd6ad9c937435b4c0ed3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--no-interaction (-n):&lt;/strong&gt; Do not ask any interactive question.</source>
          <target state="translated">&lt;strong&gt;--no-interaction (-n):&lt;/strong&gt; Do not ask any interactive question.</target>
        </trans-unit>
        <trans-unit id="338aaff32a0346a9aef4270ee82adff9a2b81f00" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--no-plugins:&lt;/strong&gt; Disables plugins.</source>
          <target state="translated">&lt;strong&gt;--no-plugins:&lt;/strong&gt; Disables plugins.</target>
        </trans-unit>
        <trans-unit id="b6db78133c9dc3a331aee25dbfebaa946fde56ba" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--no-progress:&lt;/strong&gt; Do not output download progress.</source>
          <target state="translated">&lt;strong&gt;--no-progress:&lt;/strong&gt; Do not output download progress.</target>
        </trans-unit>
        <trans-unit id="ec017d78b532aac5f6e563c76cc0ddf35b6bc559" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--no-progress:&lt;/strong&gt; Removes the progress display that can mess with some terminals or scripts which don't handle backspace characters.</source>
          <target state="translated">&lt;strong&gt;--no-progress:&lt;/strong&gt; Removes the progress display that can mess with some terminals or scripts which don't handle backspace characters.</target>
        </trans-unit>
        <trans-unit id="0ab8aa4b90617335ca20c01d0c31fdb6ecf90d53" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--no-scripts:&lt;/strong&gt; Disables the execution of the scripts defined in the root package.</source>
          <target state="translated">&lt;strong&gt;--no-scripts:&lt;/strong&gt; Disables the execution of the scripts defined in the root package.</target>
        </trans-unit>
        <trans-unit id="2f462f5e04ea5de751f245a73a853fd7da6da59b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--no-scripts:&lt;/strong&gt; Skips execution of scripts defined in &lt;code&gt;composer.json&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;--no-scripts:&lt;/strong&gt; Skips execution of scripts defined in &lt;code&gt;composer.json&lt;/code&gt;.</target>
        </trans-unit>
        <trans-unit id="199d11c67222c42b6782424630d9fe7477f1b04b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--no-scripts:&lt;/strong&gt; Skips the execution of all scripts defined in &lt;code&gt;composer.json&lt;/code&gt; file.</source>
          <target state="translated">&lt;strong&gt;--no-scripts:&lt;/strong&gt; Skips the execution of all scripts defined in &lt;code&gt;composer.json&lt;/code&gt; file.</target>
        </trans-unit>
        <trans-unit id="20b10ba3c35298247600417854a02c7ebca6293f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--no-secure-http:&lt;/strong&gt; Disable the secure-http config option temporarily while installing the root package. Use at your own risk. Using this flag is a bad idea.</source>
          <target state="translated">&lt;strong&gt;--no-secure-http:&lt;/strong&gt; Disable the secure-http config option temporarily while installing the root package. Use at your own risk. Using this flag is a bad idea.</target>
        </trans-unit>
        <trans-unit id="e3448e78d83e13cdf17aeb6014c57abcc788634a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--no-suggest:&lt;/strong&gt; Skips suggested packages in the output.</source>
          <target state="translated">&lt;strong&gt;--no-suggest:&lt;/strong&gt; Skips suggested packages in the output.</target>
        </trans-unit>
        <trans-unit id="61d5ee9e9d1b2241aea940bb023f6cc3819c22e9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--no-update:&lt;/strong&gt; Disables the automatic update of the dependencies.</source>
          <target state="translated">&lt;strong&gt;--no-update:&lt;/strong&gt; Disables the automatic update of the dependencies.</target>
        </trans-unit>
        <trans-unit id="18ec46eafe06a346360e0c2ab299de540abcd326" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--only-name (-N):&lt;/strong&gt; Search only in name.</source>
          <target state="translated">&lt;strong&gt;--only-name (-N):&lt;/strong&gt; Search only in name.</target>
        </trans-unit>
        <trans-unit id="6ece66fc983b90b4843f17873aa4b8e86aa5509f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--optimize (-o):&lt;/strong&gt; Convert PSR-0/4 autoloading to classmap to get a faster autoloader. This is recommended especially for production, but can take a bit of time to run so it is currently not done by default.</source>
          <target state="translated">&lt;strong&gt;--optimize (-o):&lt;/strong&gt; Convert PSR-0/4 autoloading to classmap to get a faster autoloader. This is recommended especially for production, but can take a bit of time to run so it is currently not done by default.</target>
        </trans-unit>
        <trans-unit id="c85f802b66283eaa75c0b55cc4c2ff31044efc61" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--optimize-autoloader (-o):&lt;/strong&gt; Convert PSR-0/4 autoloading to classmap to get a faster autoloader. This is recommended especially for production, but can take a bit of time to run so it is currently not done by default.</source>
          <target state="translated">&lt;strong&gt;--optimize-autoloader (-o):&lt;/strong&gt; Convert PSR-0/4 autoloading to classmap to get a faster autoloader. This is recommended especially for production, but can take a bit of time to run so it is currently not done by default.</target>
        </trans-unit>
        <trans-unit id="3ceb3df3d1bb5938696791760a0ef03b92974a4d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--outdated (-o):&lt;/strong&gt; Implies --latest, but this lists &lt;em&gt;only&lt;/em&gt; packages that have a newer version available.</source>
          <target state="translated">&lt;strong&gt;--outdated (-o):&lt;/strong&gt; Implies --latest, but this lists &lt;em&gt;only&lt;/em&gt; packages that have a newer version available.</target>
        </trans-unit>
        <trans-unit id="327b42fd6f61c8ba13f911bc3133df81d2dcae30" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--path (-P):&lt;/strong&gt; List package paths.</source>
          <target state="translated">&lt;strong&gt;--path (-P):&lt;/strong&gt; List package paths.</target>
        </trans-unit>
        <trans-unit id="99da7297ab9f643a9d42975ba3b6640a90410676" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--platform (-p):&lt;/strong&gt; List only platform packages (php &amp;amp; extensions).</source>
          <target state="translated">&lt;strong&gt;--platform (-p):&lt;/strong&gt; List only platform packages (php &amp;amp; extensions).</target>
        </trans-unit>
        <trans-unit id="96d12d6b4205c09a617d80cc021a8918d7a3cff0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--prefer-dist:&lt;/strong&gt; Install packages from &lt;code&gt;dist&lt;/code&gt; when available.</source>
          <target state="translated">&lt;strong&gt;--prefer-dist:&lt;/strong&gt; Install packages from &lt;code&gt;dist&lt;/code&gt; when available.</target>
        </trans-unit>
        <trans-unit id="90a02ee65ccd712464eff6d7ae41c564e37b777b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--prefer-dist:&lt;/strong&gt; Reverse of &lt;code&gt;--prefer-source&lt;/code&gt;, Composer will install from &lt;code&gt;dist&lt;/code&gt; if possible. This can speed up installs substantially on build servers and other use cases where you typically do not run updates of the vendors. It is also a way to circumvent problems with git if you do not have a proper setup.</source>
          <target state="translated">&lt;strong&gt;--prefer-dist:&lt;/strong&gt; Reverse of &lt;code&gt;--prefer-source&lt;/code&gt;, Composer will install from &lt;code&gt;dist&lt;/code&gt; if possible. This can speed up installs substantially on build servers and other use cases where you typically do not run updates of the vendors. It is also a way to circumvent problems with git if you do not have a proper setup.</target>
        </trans-unit>
        <trans-unit id="dc1861539f4c5c16e8f7caa027821474ae9c4e1e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--prefer-lowest:&lt;/strong&gt; Prefer lowest versions of dependencies. Useful for testing minimal versions of requirements, generally used with &lt;code&gt;--prefer-stable&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;--prefer-lowest:&lt;/strong&gt; Prefer lowest versions of dependencies. Useful for testing minimal versions of requirements, generally used with &lt;code&gt;--prefer-stable&lt;/code&gt;.</target>
        </trans-unit>
        <trans-unit id="74763d02ffa6f6be2598fcbe149cfd20cd6c6a08" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--prefer-source:&lt;/strong&gt; Install packages from &lt;code&gt;source&lt;/code&gt; when available.</source>
          <target state="translated">&lt;strong&gt;--prefer-source:&lt;/strong&gt; Install packages from &lt;code&gt;source&lt;/code&gt; when available.</target>
        </trans-unit>
        <trans-unit id="a08e518a183628ada7ab7abbb9e8618c00044a6d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--prefer-source:&lt;/strong&gt; There are two ways of downloading a package: &lt;code&gt;source&lt;/code&gt; and &lt;code&gt;dist&lt;/code&gt;. For stable versions Composer will use the &lt;code&gt;dist&lt;/code&gt; by default. The &lt;code&gt;source&lt;/code&gt; is a version control repository. If &lt;code&gt;--prefer-source&lt;/code&gt; is enabled, Composer will install from &lt;code&gt;source&lt;/code&gt; if there is one. This is useful if you want to make a bugfix to a project and get a local git clone of the dependency directly.</source>
          <target state="translated">&lt;strong&gt;--prefer-source:&lt;/strong&gt; There are two ways of downloading a package: &lt;code&gt;source&lt;/code&gt; and &lt;code&gt;dist&lt;/code&gt;. For stable versions Composer will use the &lt;code&gt;dist&lt;/code&gt; by default. The &lt;code&gt;source&lt;/code&gt; is a version control repository. If &lt;code&gt;--prefer-source&lt;/code&gt; is enabled, Composer will install from &lt;code&gt;source&lt;/code&gt; if there is one. This is useful if you want to make a bugfix to a project and get a local git clone of the dependency directly.</target>
        </trans-unit>
        <trans-unit id="fc6cda61acf1d50859b32513ed6dce7db0d15b24" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--prefer-stable:&lt;/strong&gt; Prefer stable versions of dependencies.</source>
          <target state="translated">&lt;strong&gt;--prefer-stable:&lt;/strong&gt; Prefer stable versions of dependencies.</target>
        </trans-unit>
        <trans-unit id="b706e5fa49c266823be2908787e21d21a4da56e3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--preview:&lt;/strong&gt; Force an update to the preview channel.</source>
          <target state="translated">&lt;strong&gt;--preview:&lt;/strong&gt; Force an update to the preview channel.</target>
        </trans-unit>
        <trans-unit id="fec703c6b8bf454a2c0094d2f582b37ef4f4f050" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--profile:&lt;/strong&gt; Display timing and memory usage information</source>
          <target state="translated">&lt;strong&gt;--profile:&lt;/strong&gt; Display timing and memory usage information</target>
        </trans-unit>
        <trans-unit id="c9663b0573f22877b83653ea4ffaf9440f320758" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--quiet (-q):&lt;/strong&gt; Do not output any message.</source>
          <target state="translated">&lt;strong&gt;--quiet (-q):&lt;/strong&gt; Do not output any message.</target>
        </trans-unit>
        <trans-unit id="801c2afba24e529f743a45d30775c542f3b7954d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--recursive (-r):&lt;/strong&gt; Recursively resolves up to the root package.</source>
          <target state="translated">&lt;strong&gt;--recursive (-r):&lt;/strong&gt; Recursively resolves up to the root package.</target>
        </trans-unit>
        <trans-unit id="0ef1d9bcfcbc4aad51868b6c163c71782231bc48" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--remove-vcs:&lt;/strong&gt; Force-remove the VCS metadata without prompting.</source>
          <target state="translated">&lt;strong&gt;--remove-vcs:&lt;/strong&gt; Force-remove the VCS metadata without prompting.</target>
        </trans-unit>
        <trans-unit id="7984bbd9183b33633a40e3cf001cec9d3232b5c3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--repository:&lt;/strong&gt; Provide a custom repository to search for the package, which will be used instead of packagist. Can be either an HTTP URL pointing to a &lt;code&gt;composer&lt;/code&gt; repository, a path to a local &lt;code&gt;packages.json&lt;/code&gt; file, or a JSON string which similar to what the &lt;a href=&quot;04-schema.md#repositories&quot;&gt;repositories&lt;/a&gt; key accepts.</source>
          <target state="translated">&lt;strong&gt;--repository:&lt;/strong&gt; Provide a custom repository to search for the package, which will be used instead of packagist. Can be either an HTTP URL pointing to a &lt;code&gt;composer&lt;/code&gt; repository, a path to a local &lt;code&gt;packages.json&lt;/code&gt; file, or a JSON string which similar to what the &lt;a href=&quot;04-schema.md#repositories&quot;&gt;repositories&lt;/a&gt; key accepts.</target>
        </trans-unit>
        <trans-unit id="31ff4ec1c94dbce4eefe51f7cbcd4d88257e4210" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--repository:&lt;/strong&gt; Provide one (or more) custom repositories. They will be stored in the generated composer.json, and used for auto-completion when prompting for the list of requires. Every repository can be either an HTTP URL pointing to a &lt;code&gt;composer&lt;/code&gt; repository or a JSON string which similar to what the &lt;a href=&quot;04-schema.md#repositories&quot;&gt;repositories&lt;/a&gt; key accepts.</source>
          <target state="translated">&lt;strong&gt;--repository:&lt;/strong&gt; Provide one (or more) custom repositories. They will be stored in the generated composer.json, and used for auto-completion when prompting for the list of requires. Every repository can be either an HTTP URL pointing to a &lt;code&gt;composer&lt;/code&gt; repository or a JSON string which similar to what the &lt;a href=&quot;04-schema.md#repositories&quot;&gt;repositories&lt;/a&gt; key accepts.</target>
        </trans-unit>
        <trans-unit id="0f6905fbc9cfb7b9c687630730796eff1ffccfb1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--require-dev:&lt;/strong&gt; Development requirements, see &lt;strong&gt;--require&lt;/strong&gt;.</source>
          <target state="translated">&lt;strong&gt;--require-dev:&lt;/strong&gt; Development requirements, see &lt;strong&gt;--require&lt;/strong&gt;.</target>
        </trans-unit>
        <trans-unit id="d3c22afe8ccde6da606ef27f402b5cd65739b5a5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--require:&lt;/strong&gt; Package to require with a version constraint. Should be in format &lt;code&gt;foo/bar:1.0.0&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;--require:&lt;/strong&gt; Package to require with a version constraint. Should be in format &lt;code&gt;foo/bar:1.0.0&lt;/code&gt;.</target>
        </trans-unit>
        <trans-unit id="a873ce46364150747629463652004637586a1121" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--rollback (-r):&lt;/strong&gt; Rollback to the last version you had installed.</source>
          <target state="translated">&lt;strong&gt;--rollback (-r):&lt;/strong&gt; Rollback to the last version you had installed.</target>
        </trans-unit>
        <trans-unit id="9709706c604505ed5da4cec4e3b02bf77dc7ac24" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--root-reqs:&lt;/strong&gt; Restricts the update to your first degree dependencies.</source>
          <target state="translated">&lt;strong&gt;--root-reqs:&lt;/strong&gt; Restricts the update to your first degree dependencies.</target>
        </trans-unit>
        <trans-unit id="ff0cae2ac2279d93932eb2ec7087d210ce778579" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--self (-s):&lt;/strong&gt; List the root package info.</source>
          <target state="translated">&lt;strong&gt;--self (-s):&lt;/strong&gt; List the root package info.</target>
        </trans-unit>
        <trans-unit id="c4d2fa15c5d0bde93ff6308ca429e57fdba0dfb4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--show (-s):&lt;/strong&gt; Only show the homepage or repository URL.</source>
          <target state="translated">&lt;strong&gt;--show (-s):&lt;/strong&gt; Only show the homepage or repository URL.</target>
        </trans-unit>
        <trans-unit id="fed2c0799b53b670b7f2fe65bc86bbcd6359f705" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--snapshot:&lt;/strong&gt; Force an update to the snapshot channel.</source>
          <target state="translated">&lt;strong&gt;--snapshot:&lt;/strong&gt; Force an update to the snapshot channel.</target>
        </trans-unit>
        <trans-unit id="c76a0d7f47313017104bffa7155e0f92ebcbde3a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--sort-packages:&lt;/strong&gt; Keep packages sorted in &lt;code&gt;composer.json&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;--sort-packages:&lt;/strong&gt; Keep packages sorted in &lt;code&gt;composer.json&lt;/code&gt;.</target>
        </trans-unit>
        <trans-unit id="c1ecb4375a4182c894adefec9be69e0c6095e623" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--stability (-s):&lt;/strong&gt; Minimum stability of package. Defaults to &lt;code&gt;stable&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;--stability (-s):&lt;/strong&gt; Minimum stability of package. Defaults to &lt;code&gt;stable&lt;/code&gt;.</target>
        </trans-unit>
        <trans-unit id="e30444ca5d6754585a1dd17c6306ede6e9612c3c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--stability (-s):&lt;/strong&gt; Value for the &lt;code&gt;minimum-stability&lt;/code&gt; field.</source>
          <target state="translated">&lt;strong&gt;--stability (-s):&lt;/strong&gt; Value for the &lt;code&gt;minimum-stability&lt;/code&gt; field.</target>
        </trans-unit>
        <trans-unit id="af05dd8820fc74dda5954af65e01f230e4a8a343" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--stable:&lt;/strong&gt; Force an update to the stable channel.</source>
          <target state="translated">&lt;strong&gt;--stable:&lt;/strong&gt; Force an update to the stable channel.</target>
        </trans-unit>
        <trans-unit id="0ce291a1ad6cde49ba197595b9ce3245ed305188" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--strict:&lt;/strong&gt; Return a non-zero exit code for warnings as well as errors.</source>
          <target state="translated">&lt;strong&gt;--strict:&lt;/strong&gt; Return a non-zero exit code for warnings as well as errors.</target>
        </trans-unit>
        <trans-unit id="677a4f8a5917a4e1258ba9dfa1e60b1d106b73c5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--strict:&lt;/strong&gt; Return a non-zero exit code when there are outdated packages.</source>
          <target state="translated">&lt;strong&gt;--strict:&lt;/strong&gt; Return a non-zero exit code when there are outdated packages.</target>
        </trans-unit>
        <trans-unit id="d31fe1a158fba316dbbe2c8d9c17041cba03853d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--strict:&lt;/strong&gt; Returns non-zero exit code if any package is outdated.</source>
          <target state="translated">&lt;strong&gt;--strict:&lt;/strong&gt; Returns non-zero exit code if any package is outdated.</target>
        </trans-unit>
        <trans-unit id="482043461ddcf6b3cf3678498b882f8bded2634f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--timeout:&lt;/strong&gt; Set the script timeout in seconds, or 0 for no timeout.</source>
          <target state="translated">&lt;strong&gt;--timeout:&lt;/strong&gt; Set the script timeout in seconds, or 0 for no timeout.</target>
        </trans-unit>
        <trans-unit id="cdda1854a4c8a1992d305e65ec0456c58f9c4390" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--tree (-t):&lt;/strong&gt; List your dependencies as a tree. If you pass a package name it will show the dependency tree for that package.</source>
          <target state="translated">&lt;strong&gt;--tree (-t):&lt;/strong&gt; List your dependencies as a tree. If you pass a package name it will show the dependency tree for that package.</target>
        </trans-unit>
        <trans-unit id="631e7d74a91253e8ef2774d1d9f9c7d59409ba83" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--tree (-t):&lt;/strong&gt; Prints the results as a nested tree, implies -r.</source>
          <target state="translated">&lt;strong&gt;--tree (-t):&lt;/strong&gt; Prints the results as a nested tree, implies -r.</target>
        </trans-unit>
        <trans-unit id="b3ed5859a1845d71fcb740dce3a02e9069cd464c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--type (-t):&lt;/strong&gt; Search for a specific package type.</source>
          <target state="translated">&lt;strong&gt;--type (-t):&lt;/strong&gt; Search for a specific package type.</target>
        </trans-unit>
        <trans-unit id="dfc629fd189876f798cc8eba1cf2e5602f408c00" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--type:&lt;/strong&gt; Type of package.</source>
          <target state="translated">&lt;strong&gt;--type:&lt;/strong&gt; Type of package.</target>
        </trans-unit>
        <trans-unit id="59e7a681e63aa4e5e0c188cfea5ec69716ffcfa3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--unset:&lt;/strong&gt; Remove the configuration element named by &lt;code&gt;setting-key&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;--unset:&lt;/strong&gt; Remove the configuration element named by &lt;code&gt;setting-key&lt;/code&gt;.</target>
        </trans-unit>
        <trans-unit id="cc7e74e23beb39a9571575c4733da72fea85b991" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--update-keys:&lt;/strong&gt; Prompt user for a key update.</source>
          <target state="translated">&lt;strong&gt;--update-keys:&lt;/strong&gt; Prompt user for a key update.</target>
        </trans-unit>
        <trans-unit id="1a8d1c15da24615046b1ad9558caa96adf3cd125" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--update-no-dev:&lt;/strong&gt; Run the dependency update with the --no-dev option.</source>
          <target state="translated">&lt;strong&gt;--update-no-dev:&lt;/strong&gt; Run the dependency update with the --no-dev option.</target>
        </trans-unit>
        <trans-unit id="d640b4028c4f564009b8726d9c358e75999af529" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--update-no-dev:&lt;/strong&gt; Run the dependency update with the &lt;code&gt;--no-dev&lt;/code&gt; option.</source>
          <target state="translated">&lt;strong&gt;--update-no-dev:&lt;/strong&gt; Run the dependency update with the &lt;code&gt;--no-dev&lt;/code&gt; option.</target>
        </trans-unit>
        <trans-unit id="f1353fc50d67df7d1048f88fd4582e845885a319" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--update-with-all-dependencies:&lt;/strong&gt; Also update dependencies of the newly required packages, including those that are root requirements.</source>
          <target state="translated">&lt;strong&gt;--update-with-all-dependencies:&lt;/strong&gt; Also update dependencies of the newly required packages, including those that are root requirements.</target>
        </trans-unit>
        <trans-unit id="d1246d2ea48925340474895c6d7ec377fee832a8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--update-with-dependencies:&lt;/strong&gt; Also update dependencies of the newly required packages, except those that are root requirements.</source>
          <target state="translated">&lt;strong&gt;--update-with-dependencies:&lt;/strong&gt; Also update dependencies of the newly required packages, except those that are root requirements.</target>
        </trans-unit>
        <trans-unit id="b8ba13a53f23cd124b70335d5bcee7fed2eafa72" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--update-with-dependencies:&lt;/strong&gt; Also update dependencies of the removed packages.</source>
          <target state="translated">&lt;strong&gt;--update-with-dependencies:&lt;/strong&gt; Also update dependencies of the removed packages.</target>
        </trans-unit>
        <trans-unit id="7596bc5a7b0242f1baa4bf8464428cdd7ac2048b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--verbose (-v):&lt;/strong&gt; Increase verbosity of messages.</source>
          <target state="translated">&lt;strong&gt;--verbose (-v):&lt;/strong&gt; Increase verbosity of messages.</target>
        </trans-unit>
        <trans-unit id="e15740473a3b73f146bba611af32263e3cea2c77" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--version (-V):&lt;/strong&gt; Display this application version.</source>
          <target state="translated">&lt;strong&gt;--version (-V):&lt;/strong&gt; Display this application version.</target>
        </trans-unit>
        <trans-unit id="be77cf898af6310b33d8538438cff3a368cdb58c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--with-all-dependencies:&lt;/strong&gt; Add also all dependencies of whitelisted packages to the whitelist, including those that are root requirements.</source>
          <target state="translated">&lt;strong&gt;--with-all-dependencies:&lt;/strong&gt; Add also all dependencies of whitelisted packages to the whitelist, including those that are root requirements.</target>
        </trans-unit>
        <trans-unit id="ff50d0d44432f52015adfb397f223c2a517bd3b6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--with-dependencies:&lt;/strong&gt; Add also dependencies of whitelisted packages to the whitelist, except those that are root requirements.</source>
          <target state="translated">&lt;strong&gt;--with-dependencies:&lt;/strong&gt; Add also dependencies of whitelisted packages to the whitelist, except those that are root requirements.</target>
        </trans-unit>
        <trans-unit id="dc7e26a16513b4ea2055f8155835b1d1609a6eac" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--with-dependencies:&lt;/strong&gt; Also validate the composer.json of all installed dependencies.</source>
          <target state="translated">&lt;strong&gt;--with-dependencies:&lt;/strong&gt; Also validate the composer.json of all installed dependencies.</target>
        </trans-unit>
        <trans-unit id="12fc70d6f7a689d57e8371943643e8d34bfa4213" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;--working-dir (-d):&lt;/strong&gt; If specified, use the given directory as working directory.</source>
          <target state="translated">&lt;strong&gt;--working-dir (-d):&lt;/strong&gt; If specified, use the given directory as working directory.</target>
        </trans-unit>
        <trans-unit id="2ddb5e07cc6fa020ccf53c6c7dc6bdca25ffe395" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;0:&lt;/strong&gt; OK</source>
          <target state="translated">&lt;strong&gt;0 :&lt;/strong&gt; OK</target>
        </trans-unit>
        <trans-unit id="26588361e31218abb17a1066e167ca8c30d24dc0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;1:&lt;/strong&gt; Generic/unknown error code</source>
          <target state="translated">&lt;strong&gt;1 :&lt;/strong&gt; 일반 / 알 수없는 오류 코드</target>
        </trans-unit>
        <trans-unit id="7b49fc70f5e12332fcc306841921b8e49989c836" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;2:&lt;/strong&gt; Dependency solving error code</source>
          <target state="translated">&lt;strong&gt;2 :&lt;/strong&gt; 종속성 해결 오류 코드</target>
        </trans-unit>
        <trans-unit id="4c77d8ece173d77948ed51b9ec42cee73be2e11b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;BitBucket:&lt;/strong&gt;&lt;a href=&quot;https://bitbucket.org&quot;&gt;bitbucket.org&lt;/a&gt; (Git and Mercurial)</source>
          <target state="translated">&lt;strong&gt;BitBucket : &lt;/strong&gt;&lt;a href=&quot;https://bitbucket.org&quot;&gt;bitbucket.org&lt;/a&gt; (Git 및 Mercurial)</target>
        </trans-unit>
        <trans-unit id="a6ff007121e45355bb9e537533ba87767872c05d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;DEPRECATED&lt;/strong&gt;: This is only present to support legacy PSR-0 style autoloading, and all new code should preferably use PSR-4 without target-dir and projects using PSR-0 with PHP namespaces are encouraged to migrate to PSR-4 instead.</source>
          <target state="translated">&lt;strong&gt;더 이상 사용되지 않음&lt;/strong&gt; : 이는 레거시 PSR-0 스타일 자동로드를 지원하기 위해서만 제공되며 모든 새 코드는 target-dir없이 PSR-4를 사용하는 것이 좋으며 PHP 네임 스페이스가있는 PSR-0을 사용하는 프로젝트는 대신 PSR-4로 마이그레이션하는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="10d9db569cdd3e4b372d79d5b51743d812f02c27" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;DEPRECATED&lt;/strong&gt;: This is only present to support legacy projects, and all new code should preferably use autoloading. As such it is a deprecated practice, but the feature itself will not likely disappear from Composer.</source>
          <target state="translated">&lt;strong&gt;더 이상 사용되지 않음&lt;/strong&gt; : 이것은 레거시 프로젝트를 지원하기 위해서만 존재하며 모든 새 코드는 자동로드를 사용해야합니다. 따라서 더 이상 사용되지 않지만 기능 자체는 Composer에서 사라지지 않을 것입니다.</target>
        </trans-unit>
        <trans-unit id="49fa3b05a631bf394d1bde42c7fbaab76b7110e2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Dist:&lt;/strong&gt; The dist is a packaged version of the package data. Usually a released version, usually a stable release.</source>
          <target state="translated">&lt;strong&gt;Dist :&lt;/strong&gt; dist는 패키지 데이터의 패키지 버전입니다. 일반적으로 릴리스 된 버전, 일반적으로 안정적인 릴리스입니다.</target>
        </trans-unit>
        <trans-unit id="0c126f672f29007068021841ab06334ba71673e7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Fossil&lt;/strong&gt;: &lt;a href=&quot;https://www.fossil-scm.org/&quot;&gt;fossil-scm.org&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;화석&lt;/strong&gt; : &lt;a href=&quot;https://www.fossil-scm.org/&quot;&gt;fossil-scm.org&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="3de808c660a0f8db1771b8162e5005e058278801" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Git:&lt;/strong&gt;&lt;a href=&quot;https://git-scm.com&quot;&gt;git-scm.com&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;Git:&lt;/strong&gt;&lt;a href=&quot;https://git-scm.com&quot;&gt;git-scm.com&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="7285ea123f6266aca8aea1f0535e96f390a5f462" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;GitHub:&lt;/strong&gt;&lt;a href=&quot;https://github.com&quot;&gt;github.com&lt;/a&gt; (Git)</source>
          <target state="translated">&lt;strong&gt;GitHub : &lt;/strong&gt;&lt;a href=&quot;https://github.com&quot;&gt;github.com&lt;/a&gt; (Git)</target>
        </trans-unit>
        <trans-unit id="a486bfa0211053a651d88fa31857218b3061c731" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;How does Composer download the right files?&lt;/strong&gt; When you specify a dependency in &lt;code&gt;composer.json&lt;/code&gt;, Composer first takes the name of the package that you have requested and searches for it in any repositories that you have registered using the &lt;a href=&quot;04-schema.md#repositories&quot;&gt;&lt;code&gt;repositories&lt;/code&gt;&lt;/a&gt; key. If you have not registered any extra repositories, or it does not find a package with that name in the repositories you have specified, it falls back to Packagist (more &lt;a href=&quot;#packagist&quot;&gt;below&lt;/a&gt;).</source>
          <target state="translated">&lt;strong&gt;Composer는 올바른 파일을 어떻게 다운로드합니까? &lt;/strong&gt; &lt;code&gt;composer.json&lt;/code&gt; 에 종속성을 지정하면 Composer는 먼저 요청한 패키지 이름을 가져 와서 &lt;a href=&quot;04-schema.md#repositories&quot;&gt; &lt;code&gt;repositories&lt;/code&gt; &lt;/a&gt; 키를 사용하여 등록한 모든 저장소에서 검색합니다 . 추가 리포지토리를 등록하지 않았거나 지정한 리포지토리에서 해당 이름의 패키지를 찾지 못하면 Packagist ( &lt;a href=&quot;#packagist&quot;&gt;아래에&lt;/a&gt; 자세히 표시 )로 돌아갑니다 .</target>
        </trans-unit>
        <trans-unit id="61776e841338982493d2e31da4a3a4bb775e32a7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;IMPORTANT&lt;/strong&gt;: to make sure that the template installer is present at the time the template package is installed, template packages should require the plugin package.</source>
          <target state="translated">&lt;strong&gt;중요&lt;/strong&gt; : 템플릿 패키지가 설치 될 때 템플릿 설치 관리자가 있는지 확인하려면 템플릿 패키지에 플러그인 패키지가 필요합니다.</target>
        </trans-unit>
        <trans-unit id="f938d4a705cb3ce9d06f792260304e003195f9ea" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;If you already used a private repository&lt;/strong&gt;, this means Composer should have cloned it in cache. If you want to install the same package with drivers, remember to launch the command &lt;code&gt;composer clearcache&lt;/code&gt; followed by the command &lt;code&gt;composer update&lt;/code&gt; to update composer cache and install the package from dist.</source>
          <target state="translated">&lt;strong&gt;이미 개인 저장소를 사용한 경우&lt;/strong&gt; Composer가이를 캐시에 복제해야합니다. 드라이버와 동일한 패키지를 설치하려면 &lt;code&gt;composer clearcache&lt;/code&gt; 명령을 실행 한 다음 &lt;code&gt;composer update&lt;/code&gt; 명령을 실행하여 composer 캐시를 업데이트하고 dist에서 패키지를 설치하십시오.</target>
        </trans-unit>
        <trans-unit id="bc3f1f2d9b8f636caf2bfe191be5a0d0e8989427" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Mercurial:&lt;/strong&gt;&lt;a href=&quot;https://www.mercurial-scm.org&quot;&gt;mercurial-scm.org&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;Mercurial:&lt;/strong&gt;&lt;a href=&quot;https://www.mercurial-scm.org&quot;&gt;mercurial-scm.org&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="db8af289d4a664a89833a26318c3ac1d64bc4971" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;NOTE&lt;/strong&gt;: &lt;em&gt;choose your &lt;a href=&quot;../04-schema.md#type&quot;&gt;type&lt;/a&gt; name carefully, it is recommended to follow the format: &lt;code&gt;vendor-type&lt;/code&gt;&lt;/em&gt;. For example: &lt;code&gt;phpdocumentor-template&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;참고&lt;/strong&gt; : &lt;em&gt;&lt;a href=&quot;../04-schema.md#type&quot;&gt;유형&lt;/a&gt;&lt;/em&gt;&lt;em&gt; 이름을 신중하게 &lt;/em&gt;&lt;em&gt;선택하십시오 . &lt;code&gt;vendor-type&lt;/code&gt; 형식을 따르는 것이 좋습니다&lt;/em&gt; . 예를 들면 : &lt;code&gt;phpdocumentor-template&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="3b868635801824ededfdb8e7d84c0f8c861bd8ca" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note that the repository endpoint needs to be https rather than git.&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;리포지토리 끝점은 git이 아닌 https 여야합니다.&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="3f28806810d8db8c71ee5f48e2c6bb639ce8e098" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; A package can be the root package or not, depending on the context. For example, if your project depends on the &lt;code&gt;monolog&lt;/code&gt; library, your project is the root package. However, if you clone &lt;code&gt;monolog&lt;/code&gt; from GitHub in order to fix a bug in it, then &lt;code&gt;monolog&lt;/code&gt; is the root package.</source>
          <target state="translated">&lt;strong&gt;참고 :&lt;/strong&gt; 컨텍스트에 따라 패키지는 루트 패키지 일 수 있습니다. 예를 들어 프로젝트가 &lt;code&gt;monolog&lt;/code&gt; 라이브러리 에 의존하는 경우 프로젝트는 루트 패키지입니다. 그러나 버그를 수정하기 위해 GitHub에서 &lt;code&gt;monolog&lt;/code&gt; 를 복제하면 &lt;code&gt;monolog&lt;/code&gt; 가 루트 패키지입니다.</target>
        </trans-unit>
        <trans-unit id="6431dd45e363b04efe2ec67b618969dae37f7d93" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Although &lt;code&gt;2.0-beta.1&lt;/code&gt; is strictly before &lt;code&gt;2.0&lt;/code&gt;, a version constraint like &lt;code&gt;~1.2&lt;/code&gt; would not install it. As said above &lt;code&gt;~1.2&lt;/code&gt; only means the &lt;code&gt;.2&lt;/code&gt; can change but the &lt;code&gt;1.&lt;/code&gt; part is fixed.</source>
          <target state="translated">&lt;strong&gt;참고 : &lt;/strong&gt; &lt;code&gt;2.0-beta.1&lt;/code&gt; 은 &lt;code&gt;2.0&lt;/code&gt; 이전 버전 이지만 &lt;code&gt;~1.2&lt;/code&gt; 와 같은 버전 제약 조건 에서는이를 설치하지 않습니다. 위에서 언급했듯이 &lt;code&gt;~1.2&lt;/code&gt; 는 &lt;code&gt;.2&lt;/code&gt; 만 변경할 수 있지만 &lt;code&gt;1.&lt;/code&gt; 부분은 고정되어 있음을 의미합니다 .</target>
        </trans-unit>
        <trans-unit id="977789847f3175f93a20091377fdaaf5651a654f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Authentication-related config options like &lt;code&gt;http-basic&lt;/code&gt; and &lt;code&gt;github-oauth&lt;/code&gt; can also be specified inside a &lt;code&gt;auth.json&lt;/code&gt; file that goes besides your &lt;code&gt;composer.json&lt;/code&gt;. That way you can gitignore it and every developer can place their own credentials in there.</source>
          <target state="translated">&lt;strong&gt;참고 : &lt;/strong&gt; &lt;code&gt;http-basic&lt;/code&gt; 및 &lt;code&gt;github-oauth&lt;/code&gt; 와 같은 인증 관련 구성 옵션은 &lt;code&gt;composer.json&lt;/code&gt; 외에 &lt;code&gt;auth.json&lt;/code&gt; 파일 내에 지정할 수도 있습니다 . 그렇게하면 기각 할 수 있으며 모든 개발자는 자신의 자격 증명을 거기에 넣을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a21cc1bf5565577e8342815d5580c7f7c42bf158" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Be careful when using unbounded ranges as you might end up unexpectedly installing versions that break backwards compatibility. Consider using the &lt;a href=&quot;#caret-version-range-&quot;&gt;caret&lt;/a&gt; operator instead for safety.</source>
          <target state="translated">&lt;strong&gt;참고 :&lt;/strong&gt; 제한없는 범위를 사용할 때는 이전 버전과의 호환성을 손상시키는 버전이 예기치 않게 설치 될 수 있으므로주의하십시오. 안전을 위해 &lt;a href=&quot;#caret-version-range-&quot;&gt;캐럿&lt;/a&gt; 작업자를 대신 사용해보십시오 .</target>
        </trans-unit>
        <trans-unit id="62c90e08c9149aa546233fdc9ce6e446325d2295" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Before executing scripts, Composer's bin-dir is temporarily pushed on top of the PATH environment variable so that binaries of dependencies are easily accessible. In this example no matter if the &lt;code&gt;phpunit&lt;/code&gt; binary is actually in &lt;code&gt;vendor/bin/phpunit&lt;/code&gt; or &lt;code&gt;bin/phpunit&lt;/code&gt; it will be found and executed.</source>
          <target state="translated">&lt;strong&gt;참고 :&lt;/strong&gt; 스크립트를 실행하기 전에 Composer의 bin-dir이 PATH 환경 변수 위에 일시적으로 푸시되므로 종속성의 이진에 쉽게 액세스 할 수 있습니다. 이 예제에서 &lt;code&gt;phpunit&lt;/code&gt; 바이너리가 실제로 &lt;code&gt;vendor/bin/phpunit&lt;/code&gt; 또는 &lt;code&gt;bin/phpunit&lt;/code&gt; 에 있는지 여부에 관계없이 이를 찾아서 실행합니다.</target>
        </trans-unit>
        <trans-unit id="fe7e4d7fba4c019988edaa9498cfc6633267f5b8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Close your current terminal. Test usage with a new terminal: This is important since the PATH only gets loaded when the terminal starts.</source>
          <target state="translated">&lt;strong&gt;참고 :&lt;/strong&gt; 현재 터미널을 닫으십시오. 새 터미널로 사용 테스트 : 터미널이 시작될 때 PATH 만로드되므로 중요합니다.</target>
        </trans-unit>
        <trans-unit id="b52c85f6a19edcbdf741c95a92520811a55f625e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Composer internally increases the &lt;code&gt;memory_limit&lt;/code&gt; to &lt;code&gt;1.5G&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;참고 :&lt;/strong&gt; Composer는 내부적으로 &lt;code&gt;memory_limit&lt;/code&gt; 를 &lt;code&gt;1.5G&lt;/code&gt; 로 증가시킵니다 .</target>
        </trans-unit>
        <trans-unit id="49d23ab0b19f7ee09dc40117645373e231d5387a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Composer makes no assumptions about the state of your dependencies prior to &lt;code&gt;install&lt;/code&gt; or &lt;code&gt;update&lt;/code&gt;. Therefore, you should not specify scripts that require Composer-managed dependencies in the &lt;code&gt;pre-update-cmd&lt;/code&gt; or &lt;code&gt;pre-install-cmd&lt;/code&gt; event hooks. If you need to execute scripts prior to &lt;code&gt;install&lt;/code&gt; or &lt;code&gt;update&lt;/code&gt; please make sure they are self-contained within your root package.</source>
          <target state="translated">&lt;strong&gt;참고 :&lt;/strong&gt; Composer는 &lt;code&gt;install&lt;/code&gt; 또는 &lt;code&gt;update&lt;/code&gt; 전에 종속성 상태에 대한 가정을하지 않습니다 . 따라서 &lt;code&gt;pre-update-cmd&lt;/code&gt; 또는 &lt;code&gt;pre-install-cmd&lt;/code&gt; 이벤트 후크 에서 Composer 관리 종속성이 필요한 스크립트를 지정하지 않아야합니다 . &lt;code&gt;install&lt;/code&gt; 또는 &lt;code&gt;update&lt;/code&gt; 전에 스크립트를 실행해야하는 경우 루트 패키지 내에 스크립트 가 포함되어 있는지 확인하십시오.</target>
        </trans-unit>
        <trans-unit id="e71c16a33d2a9dad6810833ad22ee605acdad06a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Composer provides its own autoloader. If you don't want to use that one, you can include &lt;code&gt;vendor/composer/autoload_*.php&lt;/code&gt; files, which return associative arrays allowing you to configure your own autoloader.</source>
          <target state="translated">&lt;strong&gt;참고 :&lt;/strong&gt; Composer는 자체 오토로더를 제공합니다. 이 파일을 사용하지 않으려면 &lt;code&gt;vendor/composer/autoload_*.php&lt;/code&gt; 파일을 포함시켜 연관 배열을 반환하여 자체 오토로더를 구성 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2e9b74c6c27f1d9ce2c60e8e26d1489d32b02ce9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Composer will display a Warning when executing an &lt;code&gt;install&lt;/code&gt; command if the &lt;code&gt;composer.lock&lt;/code&gt; has not been updated since changes were made to the &lt;code&gt;composer.json&lt;/code&gt; that might affect dependency resolution.</source>
          <target state="translated">&lt;strong&gt;참고 :&lt;/strong&gt; 실행할 때 작곡가가 경고를 표시합니다 &lt;code&gt;install&lt;/code&gt; 경우 생성 명령 &lt;code&gt;composer.lock&lt;/code&gt; 이 변경 사항이 제작 된 이후 업데이트되지 않은 &lt;code&gt;composer.json&lt;/code&gt; 의존성 해상도에 영향을 미칠 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="460652f1521729fac843fa821fbec87c39430832" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; During a composer install or update process, a variable named &lt;code&gt;COMPOSER_DEV_MODE&lt;/code&gt; will be added to the environment. If the command was run with the &lt;code&gt;--no-dev&lt;/code&gt; flag, this variable will be set to 0, otherwise it will be set to 1.</source>
          <target state="translated">&lt;strong&gt;참고 :&lt;/strong&gt; 작성기 설치 또는 업데이트 프로세스 중에 &lt;code&gt;COMPOSER_DEV_MODE&lt;/code&gt; 라는 변수 가 환경에 추가됩니다. &lt;code&gt;--no-dev&lt;/code&gt; 플래그를 사용하여 명령을 실행 한 경우이 변수는 0으로 설정되고, 그렇지 않으면 1로 설정됩니다.</target>
        </trans-unit>
        <trans-unit id="8ae64c2d320ceca282e7962b7afe05d2bef1761c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; For information on changing your PATH, please read the &lt;a href=&quot;https://en.wikipedia.org/wiki/PATH_(variable)&quot;&gt;Wikipedia article&lt;/a&gt; and/or use Google.</source>
          <target state="translated">&lt;strong&gt;참고 :&lt;/strong&gt; PATH 변경에 대한 자세한 내용은 &lt;a href=&quot;https://en.wikipedia.org/wiki/PATH_(variable)&quot;&gt;Wikipedia 기사를 참조&lt;/a&gt; 하거나 Google을 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="5ef6ebac896a02be2cd3d1583d81a52e745bd3a6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; For libraries it is not necessary to commit the lock file, see also: &lt;a href=&quot;02-libraries.md#lock-file&quot;&gt;Libraries - Lock file&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;참고 :&lt;/strong&gt; 라이브러리의 경우 잠금 파일을 커밋 할 필요는 없습니다. &lt;a href=&quot;02-libraries.md#lock-file&quot;&gt;라이브러리-잠금 파일을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="bf7ad9fb36b514bac11bdebaab1c702d4491f4dc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; If the above fails due to permissions, you may need to run it again with sudo.</source>
          <target state="translated">&lt;strong&gt;참고 :&lt;/strong&gt; 권한으로 인해 위의 작업이 실패하면 sudo를 사용하여 다시 실행해야 할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="c911518cb3659fbe5714c4c9633aba6282ce4572" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; If you are trying to require a package but Composer throws an error regarding package stability, the version you have specified may not meet your default minimum stability requirements. By default only stable releases are taken into consideration when searching for valid package versions in your VCS.</source>
          <target state="translated">&lt;strong&gt;참고 :&lt;/strong&gt; 패키지가 필요하지만 Composer에서 패키지 안정성과 관련하여 오류가 발생하면 지정한 버전이 기본 최소 안정성 요구 사항을 충족하지 못할 수 있습니다. 기본적으로 VCS에서 유효한 패키지 버전을 검색 할 때는 안정적인 릴리스 만 고려됩니다.</target>
        </trans-unit>
        <trans-unit id="720201f8cea9a16bd571cd440491585314a94229" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; If you don't know what to use as a vendor name, your GitHub username is usually a good bet. While package names are case insensitive, the convention is all lowercase and dashes for word separation.</source>
          <target state="translated">&lt;strong&gt;참고 :&lt;/strong&gt; 공급 업체 이름으로 무엇을 사용해야할지 모르는 경우 GitHub 사용자 이름이 좋습니다. 패키지 이름은 대소 문자를 구분하지 않지만 단어 분리를위한 규칙은 모두 소문자와 대시입니다.</target>
        </trans-unit>
        <trans-unit id="04d3b9dfe332a4d5be5e4dec0f8bb7f1dab37af1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Inline aliasing is a root-only feature. If a package with inline aliases is required, the alias (right of the &lt;code&gt;as&lt;/code&gt;) is used as the version constraint. The part left of the &lt;code&gt;as&lt;/code&gt; is discarded. As a consequence, if A requires B and B requires &lt;code&gt;monolog/monolog&lt;/code&gt; version &lt;code&gt;dev-bugfix as 1.0.x-dev&lt;/code&gt;, installing A will make B require &lt;code&gt;1.0.x-dev&lt;/code&gt;, which may exist as a branch alias or an actual &lt;code&gt;1.0&lt;/code&gt; branch. If it does not, it must be inline-aliased again in A's &lt;code&gt;composer.json&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;참고 :&lt;/strong&gt; 인라인 앨리어싱은 루트 전용 기능입니다. 인라인 별칭이있는 패키지가 필요한 경우 별칭 ( &lt;code&gt;as&lt;/code&gt; 오른쪽 )이 버전 제약 조건으로 사용됩니다. 의 좌측 부분 &lt;code&gt;as&lt;/code&gt; 폐기된다. 결과적으로 A에 B가 필요하고 B에 &lt;code&gt;monolog/monolog&lt;/code&gt; 버전 &lt;code&gt;dev-bugfix as 1.0.x-dev&lt;/code&gt; 가 필요한 경우 A를 설치하면 B에 &lt;code&gt;1.0.x-dev&lt;/code&gt; 가 필요합니다 . 이는 분기 별명 또는 실제 &lt;code&gt;1.0&lt;/code&gt; 분기 로 존재할 수 있습니다 . 그렇지 않은 경우 A의 &lt;code&gt;composer.json&lt;/code&gt; 에서 다시 인라인 앨리어싱되어야합니다 .</target>
        </trans-unit>
        <trans-unit id="24b2a3912db59c2651d08f09c21d7fea882761d7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Inline aliasing should be avoided, especially for published packages/libraries. If you found a bug, try and get your fix merged upstream. This helps to avoid issues for users of your package.</source>
          <target state="translated">&lt;strong&gt;참고 :&lt;/strong&gt; 특히 게시 된 패키지 / 라이브러리의 경우 인라인 앨리어싱을 피해야합니다. 버그를 발견 한 경우 수정 사항을 업스트림으로 병합하십시오. 이렇게하면 패키지 사용자의 문제를 피할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="93b0c41de147177a86dd482c80f2a94b3c39bfc3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; It is important to list PHP extensions your project requires. Not all PHP installations are created equal: some may miss extensions you may consider as standard (such as &lt;code&gt;ext-mysqli&lt;/code&gt; which is not installed by default in Fedora/CentOS minimal installation systems). Failure to list required PHP extensions may lead to a bad user experience: Composer will install your package without any errors but it will then fail at run-time. The &lt;code&gt;composer show --platform&lt;/code&gt; command lists all PHP extensions available on your system. You may use it to help you compile the list of extensions you use and require. Alternatively you may use third party tools to analyze your project for the list of extensions used.</source>
          <target state="translated">&lt;strong&gt;참고 :&lt;/strong&gt; 프로젝트에 필요한 PHP 확장명을 나열하는 것이 중요합니다. 모든 PHP 설치가 동일하게 생성되는 것은 아닙니다. 일부는 표준으로 간주되는 확장 기능 (예 : Fedora / CentOS 최소 설치 시스템에 기본적으로 설치되지 않은 &lt;code&gt;ext-mysqli&lt;/code&gt; ) 을 놓칠 수 있습니다 . 필요한 PHP 확장명을 나열하지 않으면 사용자 경험이 나빠질 수 있습니다. Composer는 오류없이 패키지를 설치하지만 런타임에 실패합니다. &lt;code&gt;composer show --platform&lt;/code&gt; 시스템에 사용할 수있는 명령 목록 모든 PHP 확장. 사용하고 필요한 확장명 목록을 컴파일하는 데 도움이 될 수 있습니다. 또는 타사 도구를 사용하여 사용 된 확장 목록에 대한 프로젝트를 분석 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="445b8401fb21aad2d3617f047300268585c4b410" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; On Windows, directory symlinks are implemented using NTFS junctions because they can be created by non-admin users. Mirroring will always be used on versions below Windows 7 or if &lt;code&gt;proc_open&lt;/code&gt; has been disabled.</source>
          <target state="translated">&lt;strong&gt;참고 :&lt;/strong&gt; Windows에서 디렉토리 심볼릭 링크는 관리자가 아닌 사용자가 만들 수 있으므로 NTFS 접점을 사용하여 구현됩니다. 미러링은 항상 Windows 7 이하 버전 또는 &lt;code&gt;proc_open&lt;/code&gt; 이 비활성화 된 경우 에 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="3413b08d82b86122e78a808acd2b3f5f51aba898" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; On some versions of macOS the &lt;code&gt;/usr&lt;/code&gt; directory does not exist by default. If you receive the error &quot;/usr/local/bin/composer: No such file or directory&quot; then you must create the directory manually before proceeding: &lt;code&gt;mkdir -p /usr/local/bin&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;참고 :&lt;/strong&gt; 일부 버전의 macOS에는 &lt;code&gt;/usr&lt;/code&gt; 디렉토리가 기본적으로 존재하지 않습니다. &quot;/ usr / local / bin / composer : No such file or directory&quot;오류가 표시되면 &lt;code&gt;mkdir -p /usr/local/bin&lt;/code&gt; 으로 진행하기 전에 디렉토리를 수동으로 작성해야합니다 .</target>
        </trans-unit>
        <trans-unit id="3887083995c2d7cce4b610cb2fc9342d5fbc91e5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Only scripts defined in the root package's &lt;code&gt;composer.json&lt;/code&gt; are executed. If a dependency of the root package specifies its own scripts, Composer does not execute those additional scripts.</source>
          <target state="translated">&lt;strong&gt;참고 :&lt;/strong&gt; 루트 패키지의 &lt;code&gt;composer.json&lt;/code&gt; 에 정의 된 스크립트 만 실행됩니다. 루트 패키지의 종속성이 자체 스크립트를 지정하면 Composer는 해당 추가 스크립트를 실행하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="406ad3f2ac4e637957fa87488f2d21015124eb19" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Order is significant here. When looking for a package, Composer will look from the first to the last repository, and pick the first match. By default Packagist is added last which means that custom repositories can override packages from it.</source>
          <target state="translated">&lt;strong&gt;참고 :&lt;/strong&gt; 여기서 순서는 중요합니다. 패키지를 찾을 때 Composer는 첫 번째 저장소에서 마지막 저장소를 찾아 첫 번째 일치 항목을 선택합니다. 기본적으로 Packagist가 마지막에 추가되므로 사용자 정의 저장소가 패키지를 대체 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a583dccc80f4f4ad817ea602d58b42389e605ed4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Order matters. More specific patterns should be earlier than more relaxed patterns. When mixing the string notation with the hash configuration in global and package configurations the string notation is translated to a &lt;code&gt;*&lt;/code&gt; package pattern.</source>
          <target state="translated">&lt;strong&gt;참고 :&lt;/strong&gt; 주문이 중요합니다. 보다 특정한 패턴은보다 편안한 패턴보다 빠릅니다. 전역 및 패키지 구성에서 문자열 표기법을 해시 구성과 혼합하면 문자열 표기법이 &lt;code&gt;*&lt;/code&gt; 패키지 패턴으로 변환됩니다 .</target>
        </trans-unit>
        <trans-unit id="9dd1433a92f1efdc5e9fd530b23fe13308f9b8aa" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Packagist uses VCS repositories, so the statement above is very much true for Packagist as well. Specifying the version yourself will most likely end up creating problems at some point due to human error.</source>
          <target state="translated">&lt;strong&gt;참고 :&lt;/strong&gt; Packagist는 VCS 리포지토리를 사용하므로 위의 설명은 Packagist에도 적용됩니다. 버전을 직접 지정하면 사람의 실수로 인해 어느 시점에서 문제가 발생할 가능성이 큽니다.</target>
        </trans-unit>
        <trans-unit id="8fcd532d9e2aae7148e88c3ef77bb5f324a39886" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Repository paths can also contain wildcards like &lt;code&gt;*&lt;/code&gt; and &lt;code&gt;?&lt;/code&gt;. For details, see the &lt;a href=&quot;http://php.net/glob&quot;&gt;PHP glob function&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;참고 :&lt;/strong&gt; 리포지토리 경로에는 &lt;code&gt;*&lt;/code&gt; 및 &lt;code&gt;?&lt;/code&gt; 와 같은 와일드 카드도 포함될 수 있습니다 . . 자세한 내용은 &lt;a href=&quot;http://php.net/glob&quot;&gt;PHP glob 함수를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="99b126dfe73a699b29161b41ac5292adb7024603" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; The &lt;code&gt;pear&lt;/code&gt; repository requires doing quite a few requests per package, so this may considerably slow down the installation process.</source>
          <target state="translated">&lt;strong&gt;참고 : &lt;/strong&gt; &lt;code&gt;pear&lt;/code&gt; 이 상당히 설치 과정을 늦출 수 있도록 저장소, 패키지 당 꽤 많은 요청을 수행해야합니다.</target>
        </trans-unit>
        <trans-unit id="cae3e6e6e95ca80806ca3dfbcfe5a592f163ac1c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; The &lt;code&gt;~&lt;/code&gt; operator has an exception on its behavior for the major release number. This means for example that &lt;code&gt;~1&lt;/code&gt; is the same as &lt;code&gt;~1.0&lt;/code&gt; as it will not allow the major number to increase trying to keep backwards compatibility.</source>
          <target state="translated">&lt;strong&gt;참고 : &lt;/strong&gt; &lt;code&gt;~&lt;/code&gt; 연산자는 주요 릴리스 번호에 대한 행동에 예외가 있습니다. 예를 들어, &lt;code&gt;~1&lt;/code&gt; 은 &lt;code&gt;~1.0&lt;/code&gt; 과 동일하므로 주 번호가 이전 버전과의 호환성을 유지하려는 시도를 증가시키지 않습니다.</target>
        </trans-unit>
        <trans-unit id="12a9535648df2da8a81680f63397580c84ca9071" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; This feature has severe technical limitations, as the composer.json metadata will still be read from the branch name you specify before the hash. You should therefore only use this as a temporary solution during development to remediate transient issues, until you can switch to tagged releases. The Composer team does not actively support this feature and will not accept bug reports related to it.</source>
          <target state="translated">&lt;strong&gt;참고 :&lt;/strong&gt; composer.json 메타 데이터는 여전히 해시 전에 지정한 분기 이름에서 읽으므로이 기능에는 심각한 기술적 제한이 있습니다. 따라서 태그가있는 릴리스로 전환 할 수있을 때까지 일시적인 문제를 해결하기 위해 개발 중에이 솔루션을 임시 솔루션으로 만 사용해야합니다. Composer 팀은이 기능을 적극적으로 지원하지 않으며 이와 관련된 버그 보고서를 수락하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="1f35478ca99bd8cc07331ea1ed610cfd72683356" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; When you add a hardcoded version to a VCS, the version will conflict with tag names. Composer will not be able to determine the version number.</source>
          <target state="translated">&lt;strong&gt;참고 :&lt;/strong&gt; 하드 코딩 된 버전을 VCS에 추가하면 버전이 태그 이름과 충돌합니다. Composer가 버전 번호를 판별 할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="9a20789a1745de934c89c710b3175a2fc83a3fc0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; While this is convenient at times, it should not be how you use packages in the long term because it comes with a technical limitation. The composer.json metadata will still be read from the branch name you specify before the hash. Because of that in some cases it will not be a practical workaround, and you should always try to switch to tagged releases as soon as you can.</source>
          <target state="translated">&lt;strong&gt;참고 :&lt;/strong&gt; 이 기능은 때때로 편리하지만 기술적으로 제한이 있기 때문에 장기적으로 패키지를 사용하는 방법이되어서는 안됩니다. composer.json 메타 데이터는 여전히 해시 이전에 지정한 분기 이름에서 읽습니다. 따라서 일부 경우에는 실질적인 해결 방법이 아니며 가능한 빨리 태그가있는 릴리스로 전환해야합니다.</target>
        </trans-unit>
        <trans-unit id="ecb822af2057532a238358469c9420a73650ffb5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; You &lt;strong&gt;should not&lt;/strong&gt; enable any of these optimizations in &lt;strong&gt;development&lt;/strong&gt; as they all will cause various problems when adding/removing classes. The performance gains are not worth the trouble in a development setting.</source>
          <target state="translated">&lt;strong&gt;참고 :&lt;/strong&gt; 당신은 &lt;strong&gt;안&lt;/strong&gt; 이러한 최적화의 수 있도록 &lt;strong&gt;개발&lt;/strong&gt; 클래스를 추가 / 제거 할 때 모든 다양한 문제를 일으킬 수있다. 성능 향상은 개발 환경에서 문제가되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="5086af16e6c8feb0c766646a2f36588098876d85" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; You can only set custom descriptions of custom commands.</source>
          <target state="translated">&lt;strong&gt;참고 :&lt;/strong&gt; 사용자 정의 명령에 대한 사용자 정의 설명 만 설정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="40caf8939bb0f1d291b6a912c0d8ac4b989618e6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; for the sake of simplicity, this introduction will assume you have performed a &lt;a href=&quot;00-intro.md#locally&quot;&gt;local&lt;/a&gt; install of Composer.</source>
          <target state="translated">&lt;strong&gt;참고 :&lt;/strong&gt; 간단하게하기 위해이 소개에서는 Composer 의 &lt;a href=&quot;00-intro.md#locally&quot;&gt;로컬&lt;/a&gt; 설치를 수행했다고 가정합니다 .</target>
        </trans-unit>
        <trans-unit id="5f9c8d323ce830c12d58374c9210c8fa1c3f7fe1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: This repository type has a few limitations and should be avoided whenever possible:</source>
          <target state="translated">&lt;strong&gt;참고&lt;/strong&gt; :이 저장소 유형에는 몇 가지 제한 사항이 있으며 가능할 때마다 피해야합니다.</target>
        </trans-unit>
        <trans-unit id="63105deca0febefa6cbaeac217860910544675c4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Private company packages:&lt;/strong&gt; If you are part of a company that uses Composer for their packages internally, you might want to keep those packages private.</source>
          <target state="translated">&lt;strong&gt;개인 회사 패키지 :&lt;/strong&gt; 내부적으로 패키지에 Composer를 사용하는 회사의 일부인 경우 해당 패키지를 개인용으로 유지할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f21b18245a1b3680f03d2e45566b1cd3ce942aed" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Recap:&lt;/strong&gt; Any git/svn/hg/fossil repository containing a &lt;code&gt;composer.json&lt;/code&gt; can be added to your project by specifying the package repository and declaring the dependency in the &lt;a href=&quot;04-schema.md#require&quot;&gt;&lt;code&gt;require&lt;/code&gt;&lt;/a&gt; field.</source>
          <target state="translated">&lt;strong&gt;요약 :&lt;/strong&gt; 패키지 저장소를 지정하고 &lt;a href=&quot;04-schema.md#require&quot;&gt; &lt;code&gt;require&lt;/code&gt; &lt;/a&gt; 필드에 종속성을 선언하여 &lt;code&gt;composer.json&lt;/code&gt; 을 포함하는 git / svn / hg / fossil 저장소를 프로젝트에 추가 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="cdf9bd19c04dac6bdf5d67d9742b4f6f60c65fc8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Separate ecosystem:&lt;/strong&gt; If you have a project which has its own ecosystem, and the packages aren't really reusable by the greater PHP community, you might want to keep them separate to packagist. An example of this would be wordpress plugins.</source>
          <target state="translated">&lt;strong&gt;별도의 에코 시스템 :&lt;/strong&gt; 자체 에코 시스템이있는 프로젝트가 있고 더 큰 PHP 커뮤니티에서 패키지를 재사용 할 수없는 경우 패키지를 별도의 패키지로 유지할 수 있습니다. 예를 들어 워드 프레스 플러그인이 있습니다.</target>
        </trans-unit>
        <trans-unit id="f565ba64da710e49662c7c998622da3c2398b8e4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Source:&lt;/strong&gt; The source is used for development. This will usually originate from a source code repository, such as git. You can fetch this when you want to modify the downloaded package.</source>
          <target state="translated">&lt;strong&gt;출처 :&lt;/strong&gt; 출처는 개발에 사용됩니다. 이것은 일반적으로 git과 같은 소스 코드 저장소에서 시작됩니다. 다운로드 한 패키지를 수정하려는 경우이를 가져올 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2846119bd84e4a514a1a1cf2dbb72bccc2bb0a72" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Subversion:&lt;/strong&gt;&lt;a href=&quot;https://subversion.apache.org&quot;&gt;subversion.apache.org&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt;Subversion:&lt;/strong&gt;&lt;a href=&quot;https://subversion.apache.org&quot;&gt;subversion.apache.org&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="de29bfe94d76ca09c52f0578e83dfbf4464c153f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Tip:&lt;/strong&gt; If you are using git for your project, you probably want to add &lt;code&gt;vendor&lt;/code&gt; in your &lt;code&gt;.gitignore&lt;/code&gt;. You really don't want to add all of that third-party code to your versioned repository.</source>
          <target state="translated">&lt;strong&gt;팁 :&lt;/strong&gt; 당신이 당신의 프로젝트에 자식을 사용하는 경우, 당신은 아마 추가 할 &lt;code&gt;vendor&lt;/code&gt; 당신에 &lt;code&gt;.gitignore&lt;/code&gt; . 실제로 모든 타사 코드를 버전이 지정된 리포지토리에 추가하고 싶지 않습니다.</target>
        </trans-unit>
        <trans-unit id="dfa4b0a37f5f8e7f419ce599af13b46ed31f1bfe" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Tip:&lt;/strong&gt; See &lt;a href=&quot;https://secure.php.net/manual/en/context.ssl.php&quot;&gt;ssl context options&lt;/a&gt; for more information.</source>
          <target state="translated">&lt;strong&gt;팁 :&lt;/strong&gt; 자세한 내용은 &lt;a href=&quot;https://secure.php.net/manual/en/context.ssl.php&quot;&gt;SSL 컨텍스트 옵션&lt;/a&gt; 을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="1408830decacd8e82668fd0066eee7e84ae9acc6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Tip:&lt;/strong&gt; See &lt;a href=&quot;https://secure.php.net/manual/en/wrappers.ssh2.php#refsect1-wrappers.ssh2-options&quot;&gt;ssh2 context options&lt;/a&gt; for more information.</source>
          <target state="translated">&lt;strong&gt;팁 :&lt;/strong&gt; 자세한 정보는 &lt;a href=&quot;https://secure.php.net/manual/en/wrappers.ssh2.php#refsect1-wrappers.ssh2-options&quot;&gt;ssh2 컨텍스트 옵션&lt;/a&gt; 을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="5d2496fe3b1b84c20dfd2112ea12f40ff7b68c90" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;To let Composer choose which driver to use&lt;/strong&gt; the repository type needs to be defined as &quot;vcs&quot;</source>
          <target state="translated">&lt;strong&gt;Composer&lt;/strong&gt; 가 저장소 유형 &lt;strong&gt;을 사용할 드라이버를 선택하도록하려면&lt;/strong&gt; &quot;vcs&quot;로 정의해야합니다.</target>
        </trans-unit>
        <trans-unit id="775edf9de2e72c0cd98fa5c1586c0ad69503a728" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Workaround Linux:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;해결 방법 Linux :&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="979242d8b8c3417d45458b910400c8a87a277c0f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Workaround Mac OS X:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;해결 방법 Mac OS X :&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="0e1a9a461530e50d9a6811125f4fccbd3eed2fd1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Workaround Windows:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;해결 방법 Windows :&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="8aca7735c32e763022b684ce025510fe67b04d4e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;chat:&lt;/strong&gt; URL to the chat channel.</source>
          <target state="translated">&lt;strong&gt;채팅 :&lt;/strong&gt; 채팅 채널의 URL입니다.</target>
        </trans-unit>
        <trans-unit id="b088b5977a410080b7d68a84be4a6056632350b6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;command&lt;/strong&gt;: occurs before any Composer Command is executed on the CLI. It provides you with access to the input and output objects of the program.</source>
          <target state="translated">&lt;strong&gt;command&lt;/strong&gt; : Composer Command가 CLI에서 실행되기 전에 발생합니다. 프로그램의 입력 및 출력 오브젝트에 대한 액세스를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="37cf871f7b57acf308b23c22687f539fd91723c2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;composer-plugin:&lt;/strong&gt; A package of type &lt;code&gt;composer-plugin&lt;/code&gt; may provide an installer for other packages that have a custom type. Read more in the &lt;a href=&quot;articles/custom-installers.md&quot;&gt;dedicated article&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;작곡가 플러그인 :&lt;/strong&gt; 타입의 패키지 &lt;code&gt;composer-plugin&lt;/code&gt; 사용자 정의 유형이 다른 패키지에 대한 설치 프로그램을 제공 할 수 있습니다. &lt;a href=&quot;articles/custom-installers.md&quot;&gt;전용 기사&lt;/a&gt; 에서 자세히 읽어보십시오 .</target>
        </trans-unit>
        <trans-unit id="ad6b3b514ee71ec9674b91b0582a9aa02d8397cc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;composer:&lt;/strong&gt; A Composer repository is simply a &lt;code&gt;packages.json&lt;/code&gt; file served via the network (HTTP, FTP, SSH), that contains a list of &lt;code&gt;composer.json&lt;/code&gt; objects with additional &lt;code&gt;dist&lt;/code&gt; and/or &lt;code&gt;source&lt;/code&gt; information. The &lt;code&gt;packages.json&lt;/code&gt; file is loaded using a PHP stream. You can set extra options on that stream using the &lt;code&gt;options&lt;/code&gt; parameter.</source>
          <target state="translated">&lt;strong&gt;composer :&lt;/strong&gt; Composer 저장소는 네트워크 (HTTP, FTP, SSH)를 통해 제공 되는 &lt;code&gt;packages.json&lt;/code&gt; 파일 이며 추가 &lt;code&gt;dist&lt;/code&gt; 및 / 또는 &lt;code&gt;source&lt;/code&gt; 정보 가있는 &lt;code&gt;composer.json&lt;/code&gt; 객체 목록이 포함되어 있습니다 . &lt;code&gt;packages.json&lt;/code&gt; 의 파일은 PHP 스트림을 사용하여로드됩니다. &lt;code&gt;options&lt;/code&gt; 매개 변수를 사용하여 해당 스트림에서 추가 옵션을 설정할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="e49741341d8e0a5edde684302a3b79ea04892353" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;docs:&lt;/strong&gt; URL to the documentation.</source>
          <target state="translated">&lt;strong&gt;docs :&lt;/strong&gt; 설명서의 URL입니다.</target>
        </trans-unit>
        <trans-unit id="9cf3908747ea405ebe85090170fcfa6af178036d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;email:&lt;/strong&gt; Email address for support.</source>
          <target state="translated">&lt;strong&gt;이메일 :&lt;/strong&gt; 지원할 이메일 주소입니다.</target>
        </trans-unit>
        <trans-unit id="d387ada5bf3aa045a4bc7cbbc4aa37f14e1aa5da" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;email:&lt;/strong&gt; The author's email address.</source>
          <target state="translated">&lt;strong&gt;이메일 :&lt;/strong&gt; 작성자의 이메일 주소입니다.</target>
        </trans-unit>
        <trans-unit id="0b93b65f351e385e2c3b2439d796d0c11292b529" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;exclude:&lt;/strong&gt; Allows configuring a list of patterns for excluded paths. The pattern syntax matches .gitignore files. A leading exclamation mark (!) will result in any matching files to be included even if a previous pattern excluded them. A leading slash will only match at the beginning of the project relative path. An asterisk will not expand to a directory separator.</source>
          <target state="translated">&lt;strong&gt;제외 :&lt;/strong&gt; 제외 된 경로에 대한 패턴 목록을 구성 할 수 있습니다. 패턴 구문은 .gitignore 파일과 일치합니다. 선행 느낌표 (!)는 이전 패턴에서 제외하더라도 일치하는 파일이 포함되도록합니다. 선행 슬래시는 프로젝트 상대 경로의 시작 부분에서만 일치합니다. 별표는 디렉토리 구분 기호로 확장되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="30ca3458b7a9af21701d5627a46bbd219478107b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;forum:&lt;/strong&gt; URL to the forum.</source>
          <target state="translated">&lt;strong&gt;포럼 : 포럼의&lt;/strong&gt; URL입니다.</target>
        </trans-unit>
        <trans-unit id="22f55b899dc68f29a9e9c3b53bf8ab1580eb0163" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;getInstallPath()&lt;/strong&gt;, this method should return the location where the package is to be installed, &lt;em&gt;relative from the location of composer.json.&lt;/em&gt;</source>
          <target state="translated">&lt;strong&gt;getInstallPath ()&lt;/strong&gt; ,이 메소드는 &lt;em&gt;composer.json의 위치와 관련&lt;/em&gt; 하여 패키지를 설치할 위치를 리턴해야합니다 &lt;em&gt;.&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="4bdfafe8749549306ea27eaf054b9e4777c5e1a2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;green (=)&lt;/strong&gt;: Dependency is in the latest version and is up to date.</source>
          <target state="translated">&lt;strong&gt;녹색 (=)&lt;/strong&gt; : 종속성이 최신 버전이며 최신 상태입니다.</target>
        </trans-unit>
        <trans-unit id="5dba7d0d38e4f50d35a61f0f57bd1c209d8fc357" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;homepage:&lt;/strong&gt; An URL to the author's website.</source>
          <target state="translated">&lt;strong&gt;홈페이지 :&lt;/strong&gt; 저자 웹 사이트의 URL.</target>
        </trans-unit>
        <trans-unit id="dd8ac0521ba00173fcff19a28072d318e7146894" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;init&lt;/strong&gt;: occurs after a Composer instance is done being initialized.</source>
          <target state="translated">&lt;strong&gt;init&lt;/strong&gt; : Composer 인스턴스가 초기화 된 후에 발생합니다.</target>
        </trans-unit>
        <trans-unit id="d93b3405b1d61a9e0c22367280cbcf8cf81b713c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;install()&lt;/strong&gt;, here you can determine the actions that need to be executed upon installation.</source>
          <target state="translated">&lt;strong&gt;install ()&lt;/strong&gt; 여기에서 설치시 실행해야하는 조치를 결정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a7d2cb22756dcc95b66818577cbab9908b21f7d2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;irc:&lt;/strong&gt; IRC channel for support, as irc://server/channel.</source>
          <target state="translated">&lt;strong&gt;irc :&lt;/strong&gt; irc : // server / channel과 같은 지원을위한 IRC 채널.</target>
        </trans-unit>
        <trans-unit id="ab6bdfba8f5260ed2502c64d2be8d066dc3a8e4b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;isInstalled()&lt;/strong&gt;, determines whether a supported package is installed or not.</source>
          <target state="translated">&lt;strong&gt;isInstalled ()&lt;/strong&gt; 는 지원되는 패키지의 설치 여부를 결정합니다.</target>
        </trans-unit>
        <trans-unit id="9b404970d40c19f4c3b7ea79b77d7842d255cd4e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;issues:&lt;/strong&gt; URL to the issue tracker.</source>
          <target state="translated">&lt;strong&gt;이슈 :&lt;/strong&gt; 이슈 트래커의 URL입니다.</target>
        </trans-unit>
        <trans-unit id="e33ca8ee93468a50681e30f03e296ed4967ac18c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;library:&lt;/strong&gt; This is the default. It will simply copy the files to &lt;code&gt;vendor&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;라이브러리 :&lt;/strong&gt; 이것이 기본값입니다. 단순히 파일을 &lt;code&gt;vendor&lt;/code&gt; 복사합니다 .</target>
        </trans-unit>
        <trans-unit id="4933438bd5f8c7a8bedb35c6ed6e7f848e429940" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;metapackage:&lt;/strong&gt; An empty package that contains requirements and will trigger their installation, but contains no files and will not write anything to the filesystem. As such, it does not require a dist or source key to be installable.</source>
          <target state="translated">&lt;strong&gt;메타&lt;/strong&gt; 패키지 &lt;strong&gt;:&lt;/strong&gt; 요구 사항을 포함하고 설치를 트리거하지만 파일이없고 파일 시스템에 아무것도 쓰지 않는 빈 패키지. 따라서 dist 또는 source 키를 설치할 필요가 없습니다.</target>
        </trans-unit>
        <trans-unit id="3afbe1e90c3d04b30a7df8b56b74b61d632983bf" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;name:&lt;/strong&gt; The author's name. Usually their real name.</source>
          <target state="translated">&lt;strong&gt;이름 :&lt;/strong&gt; 저자의 이름. 보통은 실명입니다.</target>
        </trans-unit>
        <trans-unit id="f3c2f8747cde4d7be3bf8a3ba7ea5546983e7b4d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;package:&lt;/strong&gt; If you depend on a project that does not have any support for composer whatsoever you can define the package inline using a &lt;code&gt;package&lt;/code&gt; repository. You basically inline the &lt;code&gt;composer.json&lt;/code&gt; object.</source>
          <target state="translated">&lt;strong&gt;패키지 :&lt;/strong&gt; 작성기를 지원하지 않는 프로젝트에 의존하는 경우 &lt;code&gt;package&lt;/code&gt; 저장소를 사용하여 패키지를 인라인으로 정의 할 수 있습니다 . 기본적으로 &lt;code&gt;composer.json&lt;/code&gt; 객체를 인라인 합니다.</target>
        </trans-unit>
        <trans-unit id="8cff7a514f0e6a07e3f87d6d8fc31384a8b57e37" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;pear:&lt;/strong&gt; With this you can import any pear repository into your Composer project.</source>
          <target state="translated">&lt;strong&gt;배 :&lt;/strong&gt; 이것으로 모든 배 저장소를 Composer 프로젝트로 가져올 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="1385500b801a0f1c2e61204451f2131197d7b3cb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;post-archive-cmd&lt;/strong&gt;: occurs after the &lt;code&gt;archive&lt;/code&gt; command has been executed.</source>
          <target state="translated">&lt;strong&gt;post-archive-cmd&lt;/strong&gt; : &lt;code&gt;archive&lt;/code&gt; 명령이 실행 된 후에 발생합니다 .</target>
        </trans-unit>
        <trans-unit id="5485db196efa858644c2775709a710b969058910" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;post-autoload-dump&lt;/strong&gt;: occurs after the autoloader has been dumped, either during &lt;code&gt;install&lt;/code&gt;/&lt;code&gt;update&lt;/code&gt;, or via the &lt;code&gt;dump-autoload&lt;/code&gt; command.</source>
          <target state="translated">&lt;strong&gt;post-autoload-dump&lt;/strong&gt; : &lt;code&gt;install&lt;/code&gt; / &lt;code&gt;update&lt;/code&gt; 중 또는 &lt;code&gt;dump-autoload&lt;/code&gt; 명령을 통해 오토로더가 덤프 된 후 발생합니다 .</target>
        </trans-unit>
        <trans-unit id="1c0fd9ff93a939377a1c237ee6fb37aa4500eaad" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;post-create-project-cmd&lt;/strong&gt;: occurs after the &lt;code&gt;create-project&lt;/code&gt; command has been executed.</source>
          <target state="translated">&lt;strong&gt;post-create-project-cmd&lt;/strong&gt; : &lt;code&gt;create-project&lt;/code&gt; 명령이 실행 된 후에 발생합니다 .</target>
        </trans-unit>
        <trans-unit id="c25b682e67a24a63eb36d0f72c5bee9a7651f449" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;post-dependencies-solving&lt;/strong&gt;: occurs after the dependencies have been resolved.</source>
          <target state="translated">&lt;strong&gt;사후 종속성 해결&lt;/strong&gt; : &lt;strong&gt;종속성이 해결 된&lt;/strong&gt; 후에 발생합니다.</target>
        </trans-unit>
        <trans-unit id="16b9bd189e89bf7a5042c9dc2592196119c4257d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;post-install-cmd&lt;/strong&gt;: occurs after the &lt;code&gt;install&lt;/code&gt; command has been executed with a lock file present.</source>
          <target state="translated">&lt;strong&gt;post-install-cmd&lt;/strong&gt; : 잠금 파일이있는 상태 에서 &lt;code&gt;install&lt;/code&gt; 명령이 실행 된 후 발생합니다 .</target>
        </trans-unit>
        <trans-unit id="0307fca9c2ff355b1f9bdca174b625ddfcabaad7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;post-package-install&lt;/strong&gt;: occurs after a package has been installed.</source>
          <target state="translated">&lt;strong&gt;post-package-install&lt;/strong&gt; : 패키지가 설치된 후 발생합니다.</target>
        </trans-unit>
        <trans-unit id="6c6ac2336d97f0faaf9c589a59373f8776bf2f4d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;post-package-uninstall&lt;/strong&gt;: occurs after a package has been uninstalled.</source>
          <target state="translated">&lt;strong&gt;post-package-uninstall&lt;/strong&gt; : &lt;strong&gt;패키지가 제거 된&lt;/strong&gt; 후 발생합니다.</target>
        </trans-unit>
        <trans-unit id="5d85bc7ae2eac58b4282c9f1ddc878be66f059d5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;post-package-update&lt;/strong&gt;: occurs after a package has been updated.</source>
          <target state="translated">&lt;strong&gt;post-package-update&lt;/strong&gt; : 패키지가 업데이트 된 후 발생합니다.</target>
        </trans-unit>
        <trans-unit id="ea5b0e8990febaff591be31bfa67f545e5f21fee" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;post-root-package-install&lt;/strong&gt;: occurs after the root package has been installed, during the &lt;code&gt;create-project&lt;/code&gt; command.</source>
          <target state="translated">&lt;strong&gt;post-root-package-install&lt;/strong&gt; : &lt;code&gt;create-project&lt;/code&gt; 명령 중에 루트 패키지가 설치된 후 발생합니다 .</target>
        </trans-unit>
        <trans-unit id="7a9d0f6608e9bcee9a5b0ed69e2f9f8c49164332" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;post-status-cmd&lt;/strong&gt;: occurs after the &lt;code&gt;status&lt;/code&gt; command has been executed.</source>
          <target state="translated">&lt;strong&gt;post-status-cmd&lt;/strong&gt; : &lt;code&gt;status&lt;/code&gt; 명령이 실행 된 후에 발생합니다 .</target>
        </trans-unit>
        <trans-unit id="f264f6c92d7d0905a592e96af6cfe73e67f42e2f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;post-update-cmd&lt;/strong&gt;: occurs after the &lt;code&gt;update&lt;/code&gt; command has been executed, or after the &lt;code&gt;install&lt;/code&gt; command has been executed without a lock file present.</source>
          <target state="translated">&lt;strong&gt;post-update-cmd&lt;/strong&gt; : &lt;code&gt;update&lt;/code&gt; 명령이 실행 된 후 또는 잠금 파일이없는 &lt;code&gt;install&lt;/code&gt; 명령이 실행 된 후 발생합니다 .</target>
        </trans-unit>
        <trans-unit id="b49f43b6230cced94feec71053a00ef0d1c031de" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;pre-archive-cmd&lt;/strong&gt;: occurs before the &lt;code&gt;archive&lt;/code&gt; command is executed.</source>
          <target state="translated">&lt;strong&gt;pre-archive-cmd&lt;/strong&gt; : &lt;code&gt;archive&lt;/code&gt; 명령이 실행 되기 전에 발생합니다 .</target>
        </trans-unit>
        <trans-unit id="80425f8361785ea7b053fc799b24b5d35dcec474" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;pre-autoload-dump&lt;/strong&gt;: occurs before the autoloader is dumped, either during &lt;code&gt;install&lt;/code&gt;/&lt;code&gt;update&lt;/code&gt;, or via the &lt;code&gt;dump-autoload&lt;/code&gt; command.</source>
          <target state="translated">&lt;strong&gt;pre-autoload-dump&lt;/strong&gt; : 자동 로더가 덤프되기 전에 &lt;code&gt;install&lt;/code&gt; / &lt;code&gt;update&lt;/code&gt; 중 또는 &lt;code&gt;dump-autoload&lt;/code&gt; 명령을 통해 발생합니다 .</target>
        </trans-unit>
        <trans-unit id="fd446d44f849170885a7616beed19363eb03e561" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;pre-command-run&lt;/strong&gt;: occurs before a command is executed and allows you to manipulate the &lt;code&gt;InputInterface&lt;/code&gt; object's options and arguments to tweak a command's behavior.</source>
          <target state="translated">&lt;strong&gt;pre-command-run&lt;/strong&gt; : 명령이 실행되기 전에 발생하며 &lt;code&gt;InputInterface&lt;/code&gt; 개체의 옵션 및 인수를 조작하여 명령의 동작을 조정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e199058be7095072f0f16b73924ce1dff7a079c3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;pre-dependencies-solving&lt;/strong&gt;: occurs before the dependencies are resolved.</source>
          <target state="translated">&lt;strong&gt;사전 종속성 해결&lt;/strong&gt; : 종속성이 해결되기 전에 발생합니다.</target>
        </trans-unit>
        <trans-unit id="ebdafd4fa63e78146bdebfbda68c42df58b13b8c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;pre-file-download&lt;/strong&gt;: occurs before files are downloaded and allows you to manipulate the &lt;code&gt;RemoteFilesystem&lt;/code&gt; object prior to downloading files based on the URL to be downloaded.</source>
          <target state="translated">&lt;strong&gt;pre-file-download&lt;/strong&gt; : 파일을 다운로드하기 전에 발생 하며 다운로드 할 URL을 기반으로 파일을 다운로드하기 전에 &lt;code&gt;RemoteFilesystem&lt;/code&gt; 객체 를 조작 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="26cf2f90f95a80866e0e35b487f56eba4212221a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;pre-install-cmd&lt;/strong&gt;: occurs before the &lt;code&gt;install&lt;/code&gt; command is executed with a lock file present.</source>
          <target state="translated">&lt;strong&gt;pre-install-cmd&lt;/strong&gt; : 잠금 파일이있는 상태 에서 &lt;code&gt;install&lt;/code&gt; 명령이 실행 되기 전에 발생합니다 .</target>
        </trans-unit>
        <trans-unit id="22bec3f86a454eba738b38d2a50c08fb558df7a7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;pre-package-install&lt;/strong&gt;: occurs before a package is installed.</source>
          <target state="translated">&lt;strong&gt;pre-package-install&lt;/strong&gt; : 패키지가 설치되기 전에 발생합니다.</target>
        </trans-unit>
        <trans-unit id="4f22d64e0f23a67827d5c068855fd036154edc41" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;pre-package-uninstall&lt;/strong&gt;: occurs before a package is uninstalled.</source>
          <target state="translated">&lt;strong&gt;pre-package-uninstall&lt;/strong&gt; : 패키지를 제거하기 전에 발생합니다.</target>
        </trans-unit>
        <trans-unit id="cffaa6b05c8ed9edca8efe82f92ff26f022894e2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;pre-package-update&lt;/strong&gt;: occurs before a package is updated.</source>
          <target state="translated">&lt;strong&gt;pre-package-update&lt;/strong&gt; : 패키지가 업데이트되기 전에 발생합니다.</target>
        </trans-unit>
        <trans-unit id="40c377a1df051cec64481fe13d71cda8e02634cb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;pre-update-cmd&lt;/strong&gt;: occurs before the &lt;code&gt;update&lt;/code&gt; command is executed, or before the &lt;code&gt;install&lt;/code&gt; command is executed without a lock file present.</source>
          <target state="translated">&lt;strong&gt;pre-update-cmd&lt;/strong&gt; : &lt;code&gt;update&lt;/code&gt; 명령이 실행되기 전에 또는 잠금 파일이없는 &lt;code&gt;install&lt;/code&gt; 명령이 실행 되기 전에 발생합니다 .</target>
        </trans-unit>
        <trans-unit id="04475ca215f6342f4c43a84c45ad9384a4977036" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;project:&lt;/strong&gt; This denotes a project rather than a library. For example application shells like the &lt;a href=&quot;https://github.com/symfony/symfony-standard&quot;&gt;Symfony standard edition&lt;/a&gt;, CMSs like the &lt;a href=&quot;https://github.com/silverstripe/silverstripe-installer&quot;&gt;SilverStripe installer&lt;/a&gt; or full fledged applications distributed as packages. This can for example be used by IDEs to provide listings of projects to initialize when creating a new workspace.</source>
          <target state="translated">&lt;strong&gt;프로젝트 :&lt;/strong&gt; 라이브러리가 아닌 프로젝트를 나타냅니다. 예를 들어 &lt;a href=&quot;https://github.com/symfony/symfony-standard&quot;&gt;Symfony Standard Edition&lt;/a&gt; 과 같은 응용 프로그램 셸 , &lt;a href=&quot;https://github.com/silverstripe/silverstripe-installer&quot;&gt;SilverStripe 설치 프로그램&lt;/a&gt; 과 같은 CMS 또는 패키지로 배포 된 본격적인 응용 프로그램이 있습니다. 예를 들어 IDE에서 새 작업 공간을 작성할 때 초기화 할 프로젝트 목록을 제공하는 데 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3c355a4a8154e7739358584fa3aab1e7e1e22335" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;red (!)&lt;/strong&gt;: Dependency has a new version that is semver-compatible and you should upgrade it.</source>
          <target state="translated">&lt;strong&gt;빨간색 (!)&lt;/strong&gt; : Dependency에는 semver와 호환되는 새 버전이 있으므로 업그레이드해야합니다.</target>
        </trans-unit>
        <trans-unit id="86458479615e09edd2f03c10bf9cfa525ebe0203" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;role:&lt;/strong&gt; The author's role in the project (e.g. developer or translator)</source>
          <target state="translated">&lt;strong&gt;역할 :&lt;/strong&gt; 프로젝트에서 저자의 역할 (예 : 개발자 또는 번역자)</target>
        </trans-unit>
        <trans-unit id="dd91008c8d0a132e14c3309c54d1c9ce1a665817" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;rss:&lt;/strong&gt; URL to the RSS feed.</source>
          <target state="translated">&lt;strong&gt;rss :&lt;/strong&gt; RSS 피드의 URL입니다.</target>
        </trans-unit>
        <trans-unit id="caea9c44e70ec991ace0896e0ac65e564c782a8d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;source:&lt;/strong&gt; URL to browse or download the sources.</source>
          <target state="translated">&lt;strong&gt;출처 : 소스&lt;/strong&gt; 를 찾아 보거나 다운로드 할 수있는 URL입니다.</target>
        </trans-unit>
        <trans-unit id="ecde19c0529bdf8289391f552a2d40ebe81cf094" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;supports()&lt;/strong&gt;, here you test whether the passed &lt;a href=&quot;../04-schema.md#type&quot;&gt;type&lt;/a&gt; matches the name that you declared for this installer (see the example).</source>
          <target state="translated">&lt;strong&gt;supports ()&lt;/strong&gt; 여기에서 전달 된 &lt;a href=&quot;../04-schema.md#type&quot;&gt;유형&lt;/a&gt; 이이 설치 프로그램에 선언 한 이름과 일치 하는지 테스트합니다 (예 참조).</target>
        </trans-unit>
        <trans-unit id="2faf403f49a22ce321ebd9bafc79f25d5cfd4a51" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;uninstall()&lt;/strong&gt;, here you can determine the actions that need to be executed when the package needs to be removed.</source>
          <target state="translated">&lt;strong&gt;uninstall ()&lt;/strong&gt; 여기에서 패키지를 제거해야 할 때 실행해야 할 작업을 결정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="02a50753a20a6df341616b1a1bf2be66fe4450dc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;update()&lt;/strong&gt;, here you define the behavior that is required when Composer is invoked with the update argument.</source>
          <target state="translated">&lt;strong&gt;update ()&lt;/strong&gt; 여기에서 update 인수로 Composer를 호출 할 때 필요한 동작을 정의합니다.</target>
        </trans-unit>
        <trans-unit id="39e060a629f0d4f6b6289958517694bd585f87fd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;vcs:&lt;/strong&gt; The version control system repository can fetch packages from git, svn, fossil and hg repositories.</source>
          <target state="translated">&lt;strong&gt;vcs :&lt;/strong&gt; 버전 제어 시스템 저장소는 git, svn, fossil 및 hg 저장소에서 패키지를 가져올 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e2287278b4abfc7ea4c156aa77bd63f441d1f7f4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;wiki:&lt;/strong&gt; URL to the wiki.</source>
          <target state="translated">&lt;strong&gt;위키 : 위키의&lt;/strong&gt; URL입니다.</target>
        </trans-unit>
        <trans-unit id="94ad895969e1582599227bfde1525e4970e99b98" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;yellow (~)&lt;/strong&gt;: Dependency has a new version available that includes backwards compatibility breaks according to semver, so upgrade when you can but it may involve work.</source>
          <target state="translated">&lt;strong&gt;yellow (~)&lt;/strong&gt; : Dependance에는 semver에 따라 이전 버전과의 호환성 중단이 포함 된 새 버전이 있으므로 업그레이드 할 수 있지만 작업이 필요할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="13f519f1221d935086efe9208ff05e7e16c60337" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;.bat&lt;/code&gt; file is generated automatically to reference the binary</source>
          <target state="translated">&lt;code&gt;.bat&lt;/code&gt; 파일은 바이너리를 참조하기 위해 자동으로 생성됩니다</target>
        </trans-unit>
        <trans-unit id="df8e93aaac13af9b503414f82da517f4bea95052" translate="yes" xml:space="preserve">
          <source>A Custom Installer is defined as a class that implements the &lt;a href=&quot;https://github.com/composer/composer/blob/master/src/Composer/Installer/InstallerInterface.php&quot;&gt;&lt;code&gt;Composer\Installer\InstallerInterface&lt;/code&gt;&lt;/a&gt; and is usually distributed in a Composer Plugin.</source>
          <target state="translated">사용자 정의 설치 프로그램은 &lt;a href=&quot;https://github.com/composer/composer/blob/master/src/Composer/Installer/InstallerInterface.php&quot;&gt; &lt;code&gt;Composer\Installer\InstallerInterface&lt;/code&gt; &lt;/a&gt; 를 구현하는 클래스로 정의되며 일반적으로 Composer 플러그인에 배포됩니다.</target>
        </trans-unit>
        <trans-unit id="8e936a7b0ce95b88be1d5722da2927d874b03bec" translate="yes" xml:space="preserve">
          <source>A Unix-style proxy file with the same name as the binary is generated automatically (useful for Cygwin or Git Bash)</source>
          <target state="translated">바이너리와 이름이 같은 Unix 스타일 프록시 파일이 자동으로 생성됩니다 (Cygwin 또는 Git Bash에 유용)</target>
        </trans-unit>
        <trans-unit id="d36d6ed29388c5e09d8001c42082fc76405dd6c0" translate="yes" xml:space="preserve">
          <source>A basic Installer Plugin would thus compose of three files:</source>
          <target state="translated">따라서 기본 설치 프로그램 플러그인은 세 가지 파일로 구성됩니다.</target>
        </trans-unit>
        <trans-unit id="963ab2dabf21f8bf030c1ed281079db920e26963" translate="yes" xml:space="preserve">
          <source>A list of domain names and consumers. For example using &lt;code&gt;{&quot;bitbucket.org&quot;: {&quot;consumer-key&quot;: &quot;myKey&quot;, &quot;consumer-secret&quot;: &quot;mySecret&quot;}}&lt;/code&gt;. &lt;a href=&quot;https://confluence.atlassian.com/bitbucket/oauth-on-bitbucket-cloud-238027431.html&quot;&gt;Read&lt;/a&gt; how to set up a consumer on Bitbucket.</source>
          <target state="translated">도메인 이름 및 소비자 목록 예를 들어 &lt;code&gt;{&quot;bitbucket.org&quot;: {&quot;consumer-key&quot;: &quot;myKey&quot;, &quot;consumer-secret&quot;: &quot;mySecret&quot;}}&lt;/code&gt; 입니다. Bitbucket에서 소비자를 설정하는 방법을 &lt;a href=&quot;https://confluence.atlassian.com/bitbucket/oauth-on-bitbucket-cloud-238027431.html&quot;&gt;읽으십시오&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="bf8460fbf4fb187b445cdae1730d9cd743cf0782" translate="yes" xml:space="preserve">
          <source>A list of domain names and oauth keys. For example using &lt;code&gt;{&quot;github.com&quot;: &quot;oauthtoken&quot;}&lt;/code&gt; as the value of this option will use &lt;code&gt;oauthtoken&lt;/code&gt; to access private repositories on github and to circumvent the low IP-based rate limiting of their API. &lt;a href=&quot;articles/troubleshooting.md#api-rate-limit-and-oauth-tokens&quot;&gt;Read more&lt;/a&gt; on how to get an OAuth token for GitHub.</source>
          <target state="translated">도메인 이름 및 oauth 키 목록 예를 &lt;code&gt;{&quot;github.com&quot;: &quot;oauthtoken&quot;}&lt;/code&gt; 옵션의 값으로 { &quot;github.com&quot;: &quot;oauthtoken&quot;} 을 사용하면 &lt;code&gt;oauthtoken&lt;/code&gt; 을 사용 하여 github의 개인 리포지토리에 액세스하고 API의 낮은 IP 기반 속도 제한을 우회합니다. GitHub 용 OAuth 토큰을 얻는 방법에 대해 &lt;a href=&quot;articles/troubleshooting.md#api-rate-limit-and-oauth-tokens&quot;&gt;자세히&lt;/a&gt; 알아 보십시오 .</target>
        </trans-unit>
        <trans-unit id="18cd575ab46d0c021d06912a47a33ce83304917c" translate="yes" xml:space="preserve">
          <source>A list of domain names and oauth keys. For example using &lt;code&gt;{&quot;gitlab.com&quot;: &quot;oauthtoken&quot;}&lt;/code&gt; as the value of this option will use &lt;code&gt;oauthtoken&lt;/code&gt; to access private repositories on gitlab. Please note: If the package is not hosted at gitlab.com the domain names must be also specified with the &lt;a href=&quot;06-config.md#gitlab-domains&quot;&gt;&lt;code&gt;gitlab-domains&lt;/code&gt;&lt;/a&gt; option.</source>
          <target state="translated">도메인 이름 및 oauth 키 목록 예를 &lt;code&gt;{&quot;gitlab.com&quot;: &quot;oauthtoken&quot;}&lt;/code&gt; 옵션의 값으로 { &quot;gitlab.com&quot;: &quot;oauthtoken&quot;} 을 사용하면 &lt;code&gt;oauthtoken&lt;/code&gt; 을 사용하여 gitlab의 개인 저장소에 액세스합니다. 참고 : 패키지가 gitlab.com에서 호스팅되지 않으면 &lt;a href=&quot;06-config.md#gitlab-domains&quot;&gt; &lt;code&gt;gitlab-domains&lt;/code&gt; &lt;/a&gt; 옵션으로 도메인 이름도 지정해야합니다 .</target>
        </trans-unit>
        <trans-unit id="5d8219d3461c8053f1343674ecb76e260d2dc2b4" translate="yes" xml:space="preserve">
          <source>A list of domain names and private tokens. For example using &lt;code&gt;{&quot;gitlab.com&quot;: &quot;privatetoken&quot;}&lt;/code&gt; as the value of this option will use &lt;code&gt;privatetoken&lt;/code&gt; to access private repositories on gitlab. Please note: If the package is not hosted at gitlab.com the domain names must be also specified with the &lt;a href=&quot;06-config.md#gitlab-domains&quot;&gt;&lt;code&gt;gitlab-domains&lt;/code&gt;&lt;/a&gt; option.</source>
          <target state="translated">도메인 이름 및 개인 토큰 목록 예를 &lt;code&gt;{&quot;gitlab.com&quot;: &quot;privatetoken&quot;}&lt;/code&gt; 옵션의 값으로 { &quot;gitlab.com&quot;: &quot;privatetoken&quot;} 을 사용하면 &lt;code&gt;privatetoken&lt;/code&gt; 을 사용 하여 gitlab의 개인 저장소에 액세스합니다. 참고 : 패키지가 gitlab.com에서 호스팅되지 않으면 &lt;a href=&quot;06-config.md#gitlab-domains&quot;&gt; &lt;code&gt;gitlab-domains&lt;/code&gt; &lt;/a&gt; 옵션으로 도메인 이름도 지정해야합니다 .</target>
        </trans-unit>
        <trans-unit id="75b1a0230c760020ef540883d86be481fb5442e2" translate="yes" xml:space="preserve">
          <source>A list of domain names and username/passwords to authenticate against them. For example using &lt;code&gt;{&quot;example.org&quot;: {&quot;username&quot;: &quot;alice&quot;, &quot;password&quot;: &quot;foo&quot;}}&lt;/code&gt; as the value of this option will let Composer authenticate against example.org.</source>
          <target state="translated">인증 할 도메인 이름 및 사용자 이름 / 암호 목록입니다. 예를 &lt;code&gt;{&quot;example.org&quot;: {&quot;username&quot;: &quot;alice&quot;, &quot;password&quot;: &quot;foo&quot;}}&lt;/code&gt; 옵션의 값으로 { &quot;example.org&quot;: { &quot;username&quot;: &quot;alice&quot;, &quot;password&quot;: &quot;foo&quot;}} 를 사용하면 Composer가 example.org에 대해 인증 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="8d0f1e7d680e9bb21dfe2a43ac53de2651082f73" translate="yes" xml:space="preserve">
          <source>A list of paths which should get appended to PHP's &lt;code&gt;include_path&lt;/code&gt;.</source>
          <target state="translated">PHP의 &lt;code&gt;include_path&lt;/code&gt; 에 추가되어야하는 경로 목록 .</target>
        </trans-unit>
        <trans-unit id="ee8970991ade70b038fbc1c02ead3f988987e111" translate="yes" xml:space="preserve">
          <source>A list of regex patterns of branch names that are non-numeric (e.g. &quot;latest&quot; or something), that will NOT be handled as feature branches. This is an array of strings.</source>
          <target state="translated">기능 분기로 처리되지 않는 숫자가 아닌 (예 : &quot;최신&quot;또는 기타) 분기 이름의 정규식 패턴 목록입니다. 이것은 문자열 배열입니다.</target>
        </trans-unit>
        <trans-unit id="67dc6540231c3964d515a09c73ef009a8f20b66d" translate="yes" xml:space="preserve">
          <source>A plugin is a regular Composer package which ships its code as part of the package and may also depend on further packages.</source>
          <target state="translated">플러그인은 코드를 패키지의 일부로 제공하는 일반 Composer 패키지이며 추가 패키지에 따라 달라질 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="d38e4e12abef5906db7925a3e48d134dba1fe3e2" translate="yes" xml:space="preserve">
          <source>A relative path to the readme document.</source>
          <target state="translated">추가 정보 문서의 상대 경로입니다.</target>
        </trans-unit>
        <trans-unit id="c9e7ec8b9486551865fc10f61b46c82d028e9b62" translate="yes" xml:space="preserve">
          <source>A repository is a package source. It's a list of packages/versions. Composer will look in all your repositories to find the packages your project requires.</source>
          <target state="translated">저장소는 패키지 소스입니다. 패키지 / 버전 목록입니다. Composer는 모든 리포지토리에서 프로젝트에 필요한 패키지를 찾습니다.</target>
        </trans-unit>
        <trans-unit id="79c1bc7dd91120fb559a7de4a04428d3770b85b7" translate="yes" xml:space="preserve">
          <source>A script, in Composer's terms, can either be a PHP callback (defined as a static method) or any command-line executable command. Scripts are useful for executing a package's custom code or package-specific commands during the Composer execution process.</source>
          <target state="translated">Composer의 관점에서 스크립트는 PHP 콜백 (정적 메소드로 정의) 또는 명령 행 실행 가능 명령 일 수 있습니다. 스크립트는 Composer 실행 프로세스 중에 패키지의 사용자 정의 코드 또는 패키지 특정 명령을 실행하는 데 유용합니다.</target>
        </trans-unit>
        <trans-unit id="661c092eebd5a622e6d617dddbbcaf329411e963" translate="yes" xml:space="preserve">
          <source>A set of configuration options. It is only used for projects. See &lt;a href=&quot;06-config.md&quot;&gt;Config&lt;/a&gt; for a description of each individual option.</source>
          <target state="translated">구성 옵션 세트. 프로젝트에만 사용됩니다. 각 개별 옵션에 대한 설명은 &lt;a href=&quot;06-config.md&quot;&gt;구성&lt;/a&gt; 을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="d59b72e748ce0333cf4c7df4110d02d76f06ef78" translate="yes" xml:space="preserve">
          <source>A set of files that should be treated as binaries and symlinked into the &lt;code&gt;bin-dir&lt;/code&gt; (from config).</source>
          <target state="translated">바이너리로 취급되고 &lt;code&gt;bin-dir&lt;/code&gt; 로 심볼릭 링크되어야하는 파일 세트 (설정에서).</target>
        </trans-unit>
        <trans-unit id="356c9597f36e258a39b6f52825b6cf8d5ddf3e2a" translate="yes" xml:space="preserve">
          <source>A set of options for creating package archives.</source>
          <target state="translated">패키지 아카이브를 만들기위한 옵션 세트.</target>
        </trans-unit>
        <trans-unit id="c03be50246edab18dfc20fb8f672c92310fa23d8" translate="yes" xml:space="preserve">
          <source>A short description of the package. Usually this is one line long.</source>
          <target state="translated">패키지에 대한 간단한 설명. 보통 이것은 한 줄 길이입니다.</target>
        </trans-unit>
        <trans-unit id="a826a7267f013e941b307b609fd6033381d10f1c" translate="yes" xml:space="preserve">
          <source>API Docs</source>
          <target state="translated">API 문서</target>
        </trans-unit>
        <trans-unit id="3166ff840d994bface9fa737e8528f4da2d762d2" translate="yes" xml:space="preserve">
          <source>API rate limit and OAuth tokens</source>
          <target state="translated">API 속도 제한 및 OAuth 토큰</target>
        </trans-unit>
        <trans-unit id="00a5c80e1460844da318f6587c5820f97141554c" translate="yes" xml:space="preserve">
          <source>Abandoned packages</source>
          <target state="translated">버려진 패키지</target>
        </trans-unit>
        <trans-unit id="5858378096c74bbfef20cd02cc772338b68222de" translate="yes" xml:space="preserve">
          <source>Add it to the configuration running &lt;code&gt;composer config -g github-oauth.github.com &amp;lt;oauthtoken&amp;gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;composer config -g github-oauth.github.com &amp;lt;oauthtoken&amp;gt;&lt;/code&gt; 을 실행하는 구성에 추가하십시오.</target>
        </trans-unit>
        <trans-unit id="2308a774677a3e82d6a92ebd3b52235665e96a82" translate="yes" xml:space="preserve">
          <source>Add the &lt;code&gt;--tree&lt;/code&gt; or &lt;code&gt;-t&lt;/code&gt; flag to show a recursive tree of why the package is depended upon, for example:</source>
          <target state="translated">패키지가 의존하는 이유의 재귀 트리를 표시 하려면 &lt;code&gt;--tree&lt;/code&gt; 또는 &lt;code&gt;-t&lt;/code&gt; 플래그를 추가하십시오 .</target>
        </trans-unit>
        <trans-unit id="1ad15dee4c3dc14abeaf2d1e6a47f79a600d06c6" translate="yes" xml:space="preserve">
          <source>Add the directory to your PATH environment variable if it isn't already. For information on changing your PATH variable, please see &lt;a href=&quot;https://www.computerhope.com/issues/ch000549.htm&quot;&gt;this article&lt;/a&gt; and/or use Google.</source>
          <target state="translated">디렉토리를 PATH 환경 변수에 추가하십시오 (아직없는 경우). PATH 변수 변경에 대한 자세한 내용은 &lt;a href=&quot;https://www.computerhope.com/issues/ch000549.htm&quot;&gt;이 기사&lt;/a&gt; 를 참조 하거나 Google을 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="0e87b9fd5b7ceb11080424614b21756f76294bc4" translate="yes" xml:space="preserve">
          <source>Add this to your project's root &lt;code&gt;composer.json&lt;/code&gt;:</source>
          <target state="translated">이것을 프로젝트의 루트 &lt;code&gt;composer.json&lt;/code&gt; 에 추가하십시오 :</target>
        </trans-unit>
        <trans-unit id="cfc6af115ac1a521e168f2c24495fb0c056c9b05" translate="yes" xml:space="preserve">
          <source>Additionally it lets you edit most properties in the local &lt;code&gt;composer.json&lt;/code&gt;.</source>
          <target state="translated">또한 로컬 &lt;code&gt;composer.json&lt;/code&gt; 에서 대부분의 속성을 편집 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="5946d4847f4d0001af33058666731d42d192d1b5" translate="yes" xml:space="preserve">
          <source>Additionally, it can dump an optimized autoloader that converts PSR-0/4 packages into classmap ones for performance reasons. In large applications with many classes, the autoloader can take up a substantial portion of every request's time. Using classmaps for everything is less convenient in development, but using this option you can still use PSR-0/4 for convenience and classmaps for performance.</source>
          <target state="translated">또한 성능상의 이유로 PSR-0 / 4 패키지를 클래스 맵 패키지로 변환하는 최적화 된 오토로더를 덤프 할 수 있습니다. 클래스가 많은 대규모 응용 프로그램에서 오토로더는 모든 요청 시간의 상당 부분을 차지할 수 있습니다. 개발에있어 모든 것에 클래스 맵을 사용하는 것은 덜 편리하지만이 옵션을 사용하면 편의상 PSR-0 / 4를 사용하고 성능을 위해 클래스 맵을 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e224601a817edf322b786028b91a01b43efae446" translate="yes" xml:space="preserve">
          <source>After adding the &lt;a href=&quot;04-schema.md#autoload&quot;&gt;&lt;code&gt;autoload&lt;/code&gt;&lt;/a&gt; field, you have to re-run &lt;a href=&quot;03-cli.md#dump-autoload&quot;&gt;&lt;code&gt;dump-autoload&lt;/code&gt;&lt;/a&gt; to re-generate the &lt;code&gt;vendor/autoload.php&lt;/code&gt; file.</source>
          <target state="translated">&lt;a href=&quot;04-schema.md#autoload&quot;&gt; &lt;code&gt;autoload&lt;/code&gt; &lt;/a&gt; 필드를 추가 한 후 , &lt;code&gt;vendor/autoload.php&lt;/code&gt; 파일 을 다시 생성하려면 &lt;a href=&quot;03-cli.md#dump-autoload&quot;&gt; &lt;code&gt;dump-autoload&lt;/code&gt; &lt;/a&gt; 를 다시 실행해야 합니다.</target>
        </trans-unit>
        <trans-unit id="61dd6cf6833b4b17b8948e12ac8cbbb0e1ca5e3c" translate="yes" xml:space="preserve">
          <source>After adding/changing the requirements, the modified requirements will be installed or updated.</source>
          <target state="translated">요구 사항을 추가 / 변경 한 후 수정 된 요구 사항이 설치되거나 업데이트됩니다.</target>
        </trans-unit>
        <trans-unit id="0f3944b7d7d2f2695ba96aba671b0a1f5ded0713" translate="yes" xml:space="preserve">
          <source>After creating an OAuth consumer in the BitBucket control panel, you need to setup your auth.json file with the credentials like this (more info &lt;a href=&quot;06-config.md#bitbucket-oauth&quot;&gt;here&lt;/a&gt;):</source>
          <target state="translated">BitBucket 제어판에서 OAuth 소비자를 생성 한 후 다음과 같은 자격 증명으로 auth.json 파일을 설정해야합니다 (자세한 내용은 &lt;a href=&quot;06-config.md#bitbucket-oauth&quot;&gt;여기&lt;/a&gt; ).</target>
        </trans-unit>
        <trans-unit id="4aa28c32fb5dbe71ebbd79ed9650dd181355fabf" translate="yes" xml:space="preserve">
          <source>After removing the requirements, the modified requirements will be uninstalled.</source>
          <target state="translated">요구 사항을 제거한 후 수정 된 요구 사항이 제거됩니다.</target>
        </trans-unit>
        <trans-unit id="17903b957c1d940039b3bd82f45433a8f0bba168" translate="yes" xml:space="preserve">
          <source>After running the installer following &lt;a href=&quot;https://getcomposer.org/download/&quot;&gt;the Download page instructions&lt;/a&gt; you can run this to move composer.phar to a directory that is in your path:</source>
          <target state="translated">&lt;a href=&quot;https://getcomposer.org/download/&quot;&gt;다운로드 페이지 지시 사항에&lt;/a&gt; 따라 설치 프로그램을 실행 한 후 composer.phar를 경로에있는 디렉토리로 이동하기 위해이를 실행할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="6a8b49f23c0c2e66b347773e3a4bb453ff1fb91c" translate="yes" xml:space="preserve">
          <source>Aliases</source>
          <target state="translated">Aliases</target>
        </trans-unit>
        <trans-unit id="a6a9e38b01b416e6059104fd466af81fe97ecb7b" translate="yes" xml:space="preserve">
          <source>All code contributions - including those of people having commit access - must go through a pull request and approved by a core developer before being merged. This is to ensure proper review of all the code.</source>
          <target state="translated">커밋 액세스 권한을 가진 사람을 포함하여 모든 코드 기여는 풀 요청을 거쳐야하며 병합되기 전에 핵심 개발자의 승인을 받아야합니다. 이것은 모든 코드를 적절히 검토하기위한 것입니다.</target>
        </trans-unit>
        <trans-unit id="05cfff0020a373bb0881550ea0e0b0a465acb49f" translate="yes" xml:space="preserve">
          <source>All links are optional fields.</source>
          <target state="translated">모든 링크는 옵션 필드입니다.</target>
        </trans-unit>
        <trans-unit id="7b44701e8b75ad8b60f4dd7fb48d869cab914d68" translate="yes" xml:space="preserve">
          <source>All of the following take an object which maps package names to versions of the package via version constraints. Read more about versions &lt;a href=&quot;articles/versions.md&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">다음은 모두 버전 제약 조건을 통해 패키지 이름을 패키지 버전에 매핑하는 객체입니다. 버전에 대한 자세한 내용은 &lt;a href=&quot;articles/versions.md&quot;&gt;여기를&lt;/a&gt; 참조 하십시오 .</target>
        </trans-unit>
        <trans-unit id="923b16c0ad8a8ee5768b8d8bb663bb3058b74d02" translate="yes" xml:space="preserve">
          <source>All versions of each package are checked for stability, and those that are less stable than the &lt;code&gt;minimum-stability&lt;/code&gt; setting will be ignored when resolving your project dependencies. (Note that you can also specify stability requirements on a per-package basis using stability flags in the version constraints that you specify in a &lt;code&gt;require&lt;/code&gt; block (see &lt;a href=&quot;#package-links&quot;&gt;package links&lt;/a&gt; for more details).</source>
          <target state="translated">각 패키지의 모든 버전은 안정성을 검사하며, 프로젝트 종속성을 해결할 때 &lt;code&gt;minimum-stability&lt;/code&gt; 설정 보다 덜 안정적인 버전은 무시됩니다. &lt;code&gt;require&lt;/code&gt; 블록에 지정한 버전 제약 조건에서 안정성 플래그를 사용하여 패키지별로 안정성 요구 사항을 지정할 수도 있습니다 ( 자세한 내용 은 &lt;a href=&quot;#package-links&quot;&gt;패키지 링크&lt;/a&gt; 참조).</target>
        </trans-unit>
        <trans-unit id="317179843c1c1730dec66f620daad146ccc731bd" translate="yes" xml:space="preserve">
          <source>Alright, so now you can publish packages. But specifying the VCS repository every time is cumbersome. You don't want to force all your users to do that.</source>
          <target state="translated">이제 패키지를 게시 할 수 있습니다. 그러나 매번 VCS 저장소를 지정하는 것은 번거 롭습니다. 모든 사용자가 그렇게하도록 강요하지는 않습니다.</target>
        </trans-unit>
        <trans-unit id="4f20259389c1d9d8d131ff2817be13419ba6cc2a" translate="yes" xml:space="preserve">
          <source>Also note that the override will not work if you change the &lt;code&gt;name&lt;/code&gt; property in your forked repository's &lt;code&gt;composer.json&lt;/code&gt; file as this needs to match the original for the override to work.</source>
          <target state="translated">또한 포크 저장소의 &lt;code&gt;composer.json&lt;/code&gt; 파일 에서 &lt;code&gt;name&lt;/code&gt; 특성 을 변경 하면 대체가 작동하기 위해 원본과 일치해야하므로 대체가 작동하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="f197754bda54aa57234fe164ab5f3668001a20e5" translate="yes" xml:space="preserve">
          <source>Alternatively if you prefer not to have your OAuth credentials on your filesystem you may export the &lt;code&gt;bitbucket-oauth&lt;/code&gt; block above to the &lt;a href=&quot;03-cli.md#composer-auth&quot;&gt;COMPOSER_AUTH&lt;/a&gt; environment variable instead.</source>
          <target state="translated">또는 파일 시스템에서 OAuth 자격 증명을 사용하지 않으려면 위 의 &lt;code&gt;bitbucket-oauth&lt;/code&gt; 블록을 대신 &lt;a href=&quot;03-cli.md#composer-auth&quot;&gt;COMPOSER_AUTH&lt;/a&gt; 환경 변수로 내보낼 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="6e4b8666417c4b7a8c3048862314d49c204146d1" translate="yes" xml:space="preserve">
          <source>Alternatively they can be separated with &quot;or&quot; and enclosed in parenthesis;</source>
          <target state="translated">또는 &quot;또는&quot;으로 분리하고 괄호로 묶을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="be3cb14740493823ed9e3ccdfd4affedbf1dfc10" translate="yes" xml:space="preserve">
          <source>Although Composer is not intended to manage long-running processes and other such aspects of PHP projects, it can sometimes be handy to disable the process timeout on custom commands. This timeout defaults to 300 seconds and can be overridden in a variety of ways depending on the desired effect:</source>
          <target state="translated">Composer는 장기 실행 프로세스 및 PHP 프로젝트의 다른 측면을 관리하기위한 것이 아니지만 사용자 정의 명령에서 프로세스 시간 초과를 비활성화하는 것이 편리한 경우가 있습니다. 이 시간 제한은 기본적으로 300 초이며 원하는 효과에 따라 다양한 방식으로 재정의 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="af91eaa25ce544bf469ffd0d071c132eeb8d516c" translate="yes" xml:space="preserve">
          <source>An Example for disjunctive licenses:</source>
          <target state="translated">이종 라이센스의 예 :</target>
        </trans-unit>
        <trans-unit id="d9060137a9bfa6f1c4f44c0578f5e597f5cd1b28" translate="yes" xml:space="preserve">
          <source>An Example:</source>
          <target state="translated">예 :</target>
        </trans-unit>
        <trans-unit id="488b684d555d11d379d702469529c661f8ccc88d" translate="yes" xml:space="preserve">
          <source>An URL to the website of the project.</source>
          <target state="translated">프로젝트 웹 사이트의 URL입니다.</target>
        </trans-unit>
        <trans-unit id="3c7da7fff804312b1eed098770f5296093e76532" translate="yes" xml:space="preserve">
          <source>An array of keywords that the package is related to. These can be used for searching and filtering.</source>
          <target state="translated">패키지와 관련된 키워드 배열입니다. 이들은 검색 및 필터링에 사용될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="34a9d39085608fb9a2a771f12b1263eea511009a" translate="yes" xml:space="preserve">
          <source>An array of scripts wired to a single event can contain both PHP callbacks and command-line executable commands.</source>
          <target state="translated">단일 이벤트에 연결된 스크립트 배열에는 PHP 콜백과 명령 줄 실행 가능 명령이 모두 포함될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="22aadf8b617fee0ea472666edf16fe14ec4b7f57" translate="yes" xml:space="preserve">
          <source>An example composer.json of such a template package would be:</source>
          <target state="translated">이러한 템플릿 패키지의 예제 composer.json은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="b0531e39fe8a7df00689f5afffd161d403a410b5" translate="yes" xml:space="preserve">
          <source>An example is Symfony. There are individual packages for the components. The Yaml component is under &lt;code&gt;Symfony\Component\Yaml&lt;/code&gt;. The package root is that &lt;code&gt;Yaml&lt;/code&gt; directory. To make autoloading possible, we need to make sure that it is not installed into &lt;code&gt;vendor/symfony/yaml&lt;/code&gt;, but instead into &lt;code&gt;vendor/symfony/yaml/Symfony/Component/Yaml&lt;/code&gt;, so that the autoloader can load it from &lt;code&gt;vendor/symfony/yaml&lt;/code&gt;.</source>
          <target state="translated">예를 들어 Symfony가 있습니다. 구성 요소를위한 개별 패키지가 있습니다. Yaml 구성 요소는 &lt;code&gt;Symfony\Component\Yaml&lt;/code&gt; 아래에 있습니다. 패키지 루트는 해당 &lt;code&gt;Yaml&lt;/code&gt; 디렉토리입니다. 가능한 자동 로딩하기 위해, 우리는에 설치되지 않았 음을 확인해야 &lt;code&gt;vendor/symfony/yaml&lt;/code&gt; , 대신에 &lt;code&gt;vendor/symfony/yaml/Symfony/Component/Yaml&lt;/code&gt; , 그래서 오토로더에서로드 할 수있는 &lt;code&gt;vendor/symfony/yaml&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="0339cebaea5e4ff28605686519382e5830abc261" translate="yes" xml:space="preserve">
          <source>An example of a valid plugin &lt;code&gt;composer.json&lt;/code&gt; file (with the autoloading part omitted):</source>
          <target state="translated">유효한 플러그인 &lt;code&gt;composer.json&lt;/code&gt; 파일 의 예 (자동 로딩 부분이 생략 된 경우) :</target>
        </trans-unit>
        <trans-unit id="bf1fd0e9fdf4378c62fe51d50345262e5b266da6" translate="yes" xml:space="preserve">
          <source>An example of the former looks like this:</source>
          <target state="translated">전자의 예는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="c264995e1a53090886ec6704f2cc9997edc074cc" translate="yes" xml:space="preserve">
          <source>An example use-case would be:</source>
          <target state="translated">사용 사례의 예는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="4f74c81ba0e6c0f4b5e46560390f7ab5d2847548" translate="yes" xml:space="preserve">
          <source>An example value:</source>
          <target state="translated">예제 값 :</target>
        </trans-unit>
        <trans-unit id="f481ad49809e7c27b79d2e6d830283b22c04c1f7" translate="yes" xml:space="preserve">
          <source>An example:</source>
          <target state="translated">예를 들면 :</target>
        </trans-unit>
        <trans-unit id="9704694c76c9e98120c00b94b09d9f74d4d832e6" translate="yes" xml:space="preserve">
          <source>Any command line script that a Composer package would like to pass along to a user who installs the package should be listed as a vendor binary.</source>
          <target state="translated">Composer 패키지가 패키지를 설치 한 사용자에게 전달하려는 모든 명령 행 스크립트는 공급 업체 바이너리로 나열되어야합니다.</target>
        </trans-unit>
        <trans-unit id="6e13958a7f476347a0a27581c50c98880b6ecc66" translate="yes" xml:space="preserve">
          <source>Any open source project using Composer is recommended to publish their packages on Packagist. A library does not need to be on Packagist to be used by Composer, but it enables discovery and adoption by other developers more quickly.</source>
          <target state="translated">Compager를 사용하는 모든 오픈 소스 프로젝트는 패키지를 Packagist에 게시하는 것이 좋습니다. Composer에서 라이브러리를 사용하기 위해 Packagist에있을 필요는 없지만 다른 개발자가 더 빨리 발견하고 채택 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="9e50bc5c66adf3beca901b35da041ca722d6892c" translate="yes" xml:space="preserve">
          <source>Apache-2.0</source>
          <target state="translated">Apache-2.0</target>
        </trans-unit>
        <trans-unit id="97f66d41c11acc717f2700d3949ddca4a8745c7b" translate="yes" xml:space="preserve">
          <source>Arbitrary extra data for consumption by &lt;code&gt;scripts&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;scripts&lt;/code&gt; 가 소비 할 임의의 추가 데이터 .</target>
        </trans-unit>
        <trans-unit id="7c422841b7e3951946583038790545c4ed38481b" translate="yes" xml:space="preserve">
          <source>Articles</source>
          <target state="translated">Articles</target>
        </trans-unit>
        <trans-unit id="aa778b50a158bc996419912e96c1852b2ba59623" translate="yes" xml:space="preserve">
          <source>Artifact</source>
          <target state="translated">Artifact</target>
        </trans-unit>
        <trans-unit id="83746a64f3579fba8670f7ff387e1cd02c821240" translate="yes" xml:space="preserve">
          <source>As Composer uses &lt;a href=&quot;https://github.com/symfony/console&quot;&gt;symfony/console&lt;/a&gt; you can call commands by short name if it's not ambiguous.</source>
          <target state="translated">Composer는 &lt;a href=&quot;https://github.com/symfony/console&quot;&gt;symfony / console&lt;/a&gt; 을 사용하므로 모호하지 않은 경우 짧은 이름으로 명령을 호출 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="4cc2d185c72be53aa9065a9d2804ea68b6da7b69" translate="yes" xml:space="preserve">
          <source>As a result, anyone can now require &lt;code&gt;1.0.*&lt;/code&gt; and it will happily install &lt;code&gt;dev-master&lt;/code&gt;.</source>
          <target state="translated">결과적으로 누구나 &lt;code&gt;1.0.*&lt;/code&gt; 을 요구할 수 있으며 &lt;code&gt;dev-master&lt;/code&gt; 는 행복하게 dev-master를 설치할 것 입니다.</target>
        </trans-unit>
        <trans-unit id="cc2eb351aa7f41fa352e127c8c2e9a76d9db0e54" translate="yes" xml:space="preserve">
          <source>As a workaround, open a SSH connection to your Git host before running Composer:</source>
          <target state="translated">해결 방법으로 Composer를 실행하기 전에 Git 호스트에 대한 SSH 연결을여십시오.</target>
        </trans-unit>
        <trans-unit id="5c60684f215ca3f207993ba9fd601061e20cd23a" translate="yes" xml:space="preserve">
          <source>As mentioned above, the &lt;code&gt;composer.lock&lt;/code&gt; file prevents you from automatically getting the latest versions of your dependencies. To update to the latest versions, use the &lt;a href=&quot;03-cli.md#update&quot;&gt;&lt;code&gt;update&lt;/code&gt;&lt;/a&gt; command. This will fetch the latest matching versions (according to your &lt;code&gt;composer.json&lt;/code&gt; file) and update the lock file with the new versions. (This is equivalent to deleting the &lt;code&gt;composer.lock&lt;/code&gt; file and running &lt;code&gt;install&lt;/code&gt; again.)</source>
          <target state="translated">위에서 언급했듯이 &lt;code&gt;composer.lock&lt;/code&gt; 파일은 최신 버전의 종속성을 자동으로 얻지 못하게합니다. 최신 버전으로 업데이트하려면 사용 &lt;a href=&quot;03-cli.md#update&quot;&gt; &lt;code&gt;update&lt;/code&gt; &lt;/a&gt; 명령을 사용합니다. 그러면 &lt;code&gt;composer.json&lt;/code&gt; 파일 에 따라 일치하는 최신 버전을 가져오고 새 버전으로 잠금 파일을 업데이트합니다. 이것은 &lt;code&gt;composer.lock&lt;/code&gt; 파일 을 삭제하고 다시 &lt;code&gt;install&lt;/code&gt; 하는 것과 같습니다 .</target>
        </trans-unit>
        <trans-unit id="6c039e17f280882f1d5927f7eb4bb1a439bebbd7" translate="yes" xml:space="preserve">
          <source>As soon as you have a &lt;code&gt;composer.json&lt;/code&gt; in a directory, that directory is a package. When you add a &lt;a href=&quot;04-schema.md#require&quot;&gt;&lt;code&gt;require&lt;/code&gt;&lt;/a&gt; to a project, you are making a package that depends on other packages. The only difference between your project and a library is that your project is a package without a name.</source>
          <target state="translated">디렉토리에 &lt;code&gt;composer.json&lt;/code&gt; 이있는 즉시 해당 디렉토리는 패키지입니다. 프로젝트에 &lt;a href=&quot;04-schema.md#require&quot;&gt; &lt;code&gt;require&lt;/code&gt; &lt;/a&gt; 을 추가하면 다른 패키지에 의존하는 패키지를 작성하게됩니다. 프로젝트와 라이브러리의 유일한 차이점은 프로젝트가 이름이없는 패키지라는 것입니다.</target>
        </trans-unit>
        <trans-unit id="c1aabc679ca33306f57f0fe08b498796ae5fe846" translate="yes" xml:space="preserve">
          <source>As with &lt;code&gt;depends&lt;/code&gt; you can request a recursive lookup, which will list all packages depending on the packages that cause the conflict.</source>
          <target state="translated">마찬가지로 &lt;code&gt;depends&lt;/code&gt; 재귀 조회를 요청할 수 있으며 충돌을 일으키는 패키지에 따라 모든 패키지가 나열됩니다.</target>
        </trans-unit>
        <trans-unit id="d202c4453954d168e38baec60c33f0d506920f64" translate="yes" xml:space="preserve">
          <source>As you can see, &lt;a href=&quot;04-schema.md#require&quot;&gt;&lt;code&gt;require&lt;/code&gt;&lt;/a&gt; takes an object that maps &lt;strong&gt;package names&lt;/strong&gt; (e.g. &lt;code&gt;monolog/monolog&lt;/code&gt;) to &lt;strong&gt;version constraints&lt;/strong&gt; (e.g. &lt;code&gt;1.0.*&lt;/code&gt;).</source>
          <target state="translated">보다시피 &lt;a href=&quot;04-schema.md#require&quot;&gt; &lt;code&gt;require&lt;/code&gt; &lt;/a&gt; 는 &lt;strong&gt;패키지 이름&lt;/strong&gt; (예 : &lt;code&gt;monolog/monolog&lt;/code&gt; )을 &lt;strong&gt;버전 제약&lt;/strong&gt; (예 : &lt;code&gt;1.0.*&lt;/code&gt; )에 매핑하는 객체를 가져옵니다 .</target>
        </trans-unit>
        <trans-unit id="f38a05a8846d18a6daea8aced7cdc6262589cf2e" translate="yes" xml:space="preserve">
          <source>Assuming &lt;code&gt;doctrine/doctrine-fixtures-bundle&lt;/code&gt; requires &lt;code&gt;&quot;doctrine/data-fixtures&quot;: &quot;dev-master&quot;&lt;/code&gt; then inside the root composer.json you need to add the second line below to allow dev releases for the &lt;code&gt;doctrine/data-fixtures&lt;/code&gt; package :</source>
          <target state="translated">가정 &lt;code&gt;doctrine/doctrine-fixtures-bundle&lt;/code&gt; 필요 &lt;code&gt;&quot;doctrine/data-fixtures&quot;: &quot;dev-master&quot;&lt;/code&gt; 당신이에 대한 dev에 출시 할 수 있도록 아래의 두 번째 줄을 추가 할 필요가 루트 composer.json 내부 후 &lt;code&gt;doctrine/data-fixtures&lt;/code&gt; 패키지를 :</target>
        </trans-unit>
        <trans-unit id="b26618622d53fbf3bd19bd424616badd12317792" translate="yes" xml:space="preserve">
          <source>At the same time, this implies that all code which is hosted somewhere else (on another service or for example in Subversion) will not have downloads available and thus installations usually take a lot longer.</source>
          <target state="translated">동시에 이는 다른 서비스 (예 : 다른 서비스 또는 Subversion)에서 호스팅되는 모든 코드에 다운로드가 제공되지 않으므로 설치 시간이 오래 걸립니다.</target>
        </trans-unit>
        <trans-unit id="8e1fec418eb438cc1626beef3a2c9b16ec051907" translate="yes" xml:space="preserve">
          <source>At times it may be necessary for a package to require additional actions during installation, such as installing packages outside of the default &lt;code&gt;vendor&lt;/code&gt; library.</source>
          <target state="translated">때때로 패키지가 기본 &lt;code&gt;vendor&lt;/code&gt; 라이브러리 외부에 패키지를 설치하는 것과 같이 설치 중에 추가 조치가 필요할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="ee1acfa55eb1476c86c5c4a68f256a67b25289ab" translate="yes" xml:space="preserve">
          <source>Authentication</source>
          <target state="translated">Authentication</target>
        </trans-unit>
        <trans-unit id="328562ec3a0ea503937712c9339a32e0ddecbdc8" translate="yes" xml:space="preserve">
          <source>Autoload mapping for a PHP autoloader.</source>
          <target state="translated">PHP 오토로더에 대한 오토로드 매핑.</target>
        </trans-unit>
        <trans-unit id="e0d04c67ce4415b0100fef1d7082f93a04ad4202" translate="yes" xml:space="preserve">
          <source>Autoloader Optimization</source>
          <target state="translated">오토로더 최적화</target>
        </trans-unit>
        <trans-unit id="3fa81ba949fafdad4688aed6d9380f82976ca9d7" translate="yes" xml:space="preserve">
          <source>Autoloading</source>
          <target state="translated">Autoloading</target>
        </trans-unit>
        <trans-unit id="e1250113018e58f1b919dbf17ed6b4e89358edcf" translate="yes" xml:space="preserve">
          <source>Available options (in order of stability) are &lt;code&gt;dev&lt;/code&gt;, &lt;code&gt;alpha&lt;/code&gt;, &lt;code&gt;beta&lt;/code&gt;, &lt;code&gt;RC&lt;/code&gt;, and &lt;code&gt;stable&lt;/code&gt;.</source>
          <target state="translated">사용 가능한 옵션 (안정성 순서)은 &lt;code&gt;dev&lt;/code&gt; , &lt;code&gt;alpha&lt;/code&gt; , &lt;code&gt;beta&lt;/code&gt; , &lt;code&gt;RC&lt;/code&gt; 및 &lt;code&gt;stable&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="0216db4ce6f2ea64dc7b8fe10f1a6c5c52bb7bd7" translate="yes" xml:space="preserve">
          <source>BSD-2-Clause</source>
          <target state="translated">BSD-2-Clause</target>
        </trans-unit>
        <trans-unit id="d6f9c69f2854ede6f6c6c74c61a8e511654060d0" translate="yes" xml:space="preserve">
          <source>BSD-3-Clause</source>
          <target state="translated">BSD-3-Clause</target>
        </trans-unit>
        <trans-unit id="f583344b17d6a421172c1f4d2a7fa649e96f7370" translate="yes" xml:space="preserve">
          <source>BSD-4-Clause</source>
          <target state="translated">BSD-4-Clause</target>
        </trans-unit>
        <trans-unit id="acc4dcc7543cec838398b3fb7433a77d63b4c27f" translate="yes" xml:space="preserve">
          <source>Base class: &lt;a href=&quot;https://getcomposer.org/apidoc/master/Composer/EventDispatcher/Event.html&quot;&gt;&lt;code&gt;Composer\EventDispatcher\Event&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">기본 클래스 : &lt;a href=&quot;https://getcomposer.org/apidoc/master/Composer/EventDispatcher/Event.html&quot;&gt; &lt;code&gt;Composer\EventDispatcher\Event&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="cb3a8802da5b3164771a468d78ff7995a249f08a" translate="yes" xml:space="preserve">
          <source>Basic usage</source>
          <target state="translated">기본 사용법</target>
        </trans-unit>
        <trans-unit id="c3b2e01e7c06744d0ef00f9d777cf3cc3507e38c" translate="yes" xml:space="preserve">
          <source>Basically, you define the same information that is included in the &lt;code&gt;composer&lt;/code&gt; repository's &lt;code&gt;packages.json&lt;/code&gt;, but only for a single package. Again, the minimum required fields are &lt;code&gt;name&lt;/code&gt;, &lt;code&gt;version&lt;/code&gt;, and either of &lt;code&gt;dist&lt;/code&gt; or &lt;code&gt;source&lt;/code&gt;.</source>
          <target state="translated">기본적으로 &lt;code&gt;composer&lt;/code&gt; 저장소의 &lt;code&gt;packages.json&lt;/code&gt; 에 포함 된 동일한 정보를 단일 패키지에 대해서만 정의하십시오 . 다시 말하지만 최소 필수 필드는 &lt;code&gt;name&lt;/code&gt; , &lt;code&gt;version&lt;/code&gt; 및 &lt;code&gt;dist&lt;/code&gt; 또는 &lt;code&gt;source&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="e77116810cc0989f719eb50cb433c362056a10f6" translate="yes" xml:space="preserve">
          <source>Be sure to &lt;strong&gt;set the right &lt;a href=&quot;../04-schema.md#minimum-stability&quot;&gt;minimum-stability&lt;/a&gt;&lt;/strong&gt;. To get started or be sure this is no issue, set &lt;code&gt;minimum-stability&lt;/code&gt; to &quot;dev&quot;.</source>
          <target state="translated">&lt;strong&gt;올바른 &lt;a href=&quot;../04-schema.md#minimum-stability&quot;&gt;최소 안정성&lt;/a&gt;&lt;/strong&gt; 을 &lt;strong&gt;설정하십시오&lt;/strong&gt; . 시작하거나 이것이 문제가되지 않도록하려면 &lt;code&gt;minimum-stability&lt;/code&gt; 을 &quot;dev&quot;로 설정하십시오.</target>
        </trans-unit>
        <trans-unit id="55fcce021fba295a9c1a6af7f5ed93b60787340c" translate="yes" xml:space="preserve">
          <source>Because Composer is heavily geared toward utilizing version control systems like git, the term &quot;version&quot; can be a little ambiguous. In the sense of a version control system, a &quot;version&quot; is a specific set of files that contain specific data. In git terminology, this is a &quot;ref&quot;, or a specific commit, which may be represented by a branch HEAD or a tag. When you check out that version in your VCS -- for example, tag &lt;code&gt;v1.1&lt;/code&gt; or commit &lt;code&gt;e35fa0d&lt;/code&gt; --, you're asking for a single, known set of files, and you always get the same files back.</source>
          <target state="translated">Composer는 git과 같은 버전 제어 시스템을 사용하는 데 중점을두기 때문에 &quot;버전&quot;이라는 용어는 약간 모호 할 수 있습니다. 버전 제어 시스템의 관점에서 &quot;버전&quot;은 특정 데이터를 포함하는 특정 파일 세트입니다. git 용어에서 이것은 &quot;ref&quot;또는 특정 커밋으로 분기 HEAD 또는 태그로 표시 될 수 있습니다. VCS에서 해당 버전 (예 : 태그 &lt;code&gt;v1.1&lt;/code&gt; 또는 커밋 &lt;code&gt;e35fa0d&lt;/code&gt; ) 을 체크 아웃하면 알려진 단일 파일 세트를 요청하며 항상 동일한 파일을 다시 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="152c73cab95ce715e300079e2e37c6e93412341a" translate="yes" xml:space="preserve">
          <source>Because of GitHub's rate limits on their API it can happen that Composer prompts for authentication asking your username and password so it can go ahead with its work.</source>
          <target state="translated">API에 대한 GitHub의 속도 제한으로 인해 Composer는 사용자 이름과 비밀번호를 묻는 인증을 요구하여 작업을 계속할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e07ed9be88f11daeec2a6ef0ecdd15133bab6a21" translate="yes" xml:space="preserve">
          <source>Before asking anyone, run &lt;a href=&quot;../03-cli.md#diagnose&quot;&gt;&lt;code&gt;composer diagnose&lt;/code&gt;&lt;/a&gt; to check for common problems. If it all checks out, proceed to the next steps.</source>
          <target state="translated">다른 사람에게 묻기 전에 &lt;a href=&quot;../03-cli.md#diagnose&quot;&gt; &lt;code&gt;composer diagnose&lt;/code&gt; &lt;/a&gt; 을 실행 하여 일반적인 문제를 확인하십시오. 모두 체크 아웃되면 다음 단계로 진행하십시오.</target>
        </trans-unit>
        <trans-unit id="67d05586169b883cd7101add6b91b3ddadc6b33f" translate="yes" xml:space="preserve">
          <source>Before we look at the different types of repositories that exist, we need to understand some of the basic concepts that Composer is built on.</source>
          <target state="translated">존재하는 여러 유형의 리포지토리를 살펴보기 전에 Composer가 구축 한 기본 개념 중 일부를 이해해야합니다.</target>
        </trans-unit>
        <trans-unit id="f02382aa58e0da8edd4751f27e1393584e3e5513" translate="yes" xml:space="preserve">
          <source>BitBucket Driver Configuration</source>
          <target state="translated">BitBucket 드라이버 구성</target>
        </trans-unit>
        <trans-unit id="f69f233005f15802770fd26fbf7ead52ec13d9e6" translate="yes" xml:space="preserve">
          <source>Book</source>
          <target state="translated">Book</target>
        </trans-unit>
        <trans-unit id="c4b615a43fc4986cda3a69b80cf7e516c14464e4" translate="yes" xml:space="preserve">
          <source>Branch alias</source>
          <target state="translated">지점 별명</target>
        </trans-unit>
        <trans-unit id="fe4749631b96d3c49496c6cb6e1a1bcfee742c85" translate="yes" xml:space="preserve">
          <source>Branch aliases are great for aliasing main development lines. But in order to use them you need to have control over the source repository, and you need to commit changes to version control.</source>
          <target state="translated">분기 별명은 기본 개발 라인의 별명 지정에 유용합니다. 그러나이를 사용하려면 소스 리포지토리를 제어해야하며 버전 제어에 대한 변경 사항을 커밋해야합니다.</target>
        </trans-unit>
        <trans-unit id="f578227926a03a85a494aaca127cfbff63d7ec5e" translate="yes" xml:space="preserve">
          <source>Branches</source>
          <target state="translated">Branches</target>
        </trans-unit>
        <trans-unit id="09a38d3ff9a1586cae8f4664c995a48251312bf5" translate="yes" xml:space="preserve">
          <source>By default Composer only uses the packagist repository. By specifying repositories you can get packages from elsewhere.</source>
          <target state="translated">기본적으로 Composer는 packagist 저장소 만 사용합니다. 리포지토리를 지정하면 다른 곳에서 패키지를 얻을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2a8b9a8a3d0850cf06867f84d12744deee4d4819" translate="yes" xml:space="preserve">
          <source>By default it points to &lt;code&gt;$COMPOSER_HOME/cache&lt;/code&gt; on *nix and macOS, and &lt;code&gt;C:\Users\&amp;lt;user&amp;gt;\AppData\Local\Composer&lt;/code&gt; (or &lt;code&gt;%LOCALAPPDATA%/Composer&lt;/code&gt;) on Windows.</source>
          <target state="translated">기본적 으로 * nix 및 macOS의 &lt;code&gt;$COMPOSER_HOME/cache&lt;/code&gt; 및 Windows의 &lt;code&gt;C:\Users\&amp;lt;user&amp;gt;\AppData\Local\Composer&lt;/code&gt; (또는 &lt;code&gt;%LOCALAPPDATA%/Composer&lt;/code&gt; )를 가리 킵니다 .</target>
        </trans-unit>
        <trans-unit id="64cae90b72b27fba8f02807aaf622339c1454ab7" translate="yes" xml:space="preserve">
          <source>By default it points to &lt;code&gt;C:\Users\&amp;lt;user&amp;gt;\AppData\Roaming\Composer&lt;/code&gt; on Windows and &lt;code&gt;/Users/&amp;lt;user&amp;gt;/.composer&lt;/code&gt; on macOS. On *nix systems that follow the &lt;a href=&quot;https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html&quot;&gt;XDG Base Directory Specifications&lt;/a&gt;, it points to &lt;code&gt;$XDG_CONFIG_HOME/composer&lt;/code&gt;. On other *nix systems, it points to &lt;code&gt;/home/&amp;lt;user&amp;gt;/.composer&lt;/code&gt;.</source>
          <target state="translated">기본적 으로 Windows의 경우 &lt;code&gt;C:\Users\&amp;lt;user&amp;gt;\AppData\Roaming\Composer&lt;/code&gt; , macOS의 경우 &lt;code&gt;/Users/&amp;lt;user&amp;gt;/.composer&lt;/code&gt; 를 가리 킵니다 . &lt;a href=&quot;https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html&quot;&gt;XDG 기본 디렉토리 스펙&lt;/a&gt; 을 따르는 * nix 시스템에서는 &lt;code&gt;$XDG_CONFIG_HOME/composer&lt;/code&gt; 가리 킵니다 . 다른 * nix 시스템에서는 &lt;code&gt;/home/&amp;lt;user&amp;gt;/.composer&lt;/code&gt; 를 가리 킵니다 .</target>
        </trans-unit>
        <trans-unit id="b10a53f3d48e004da63c6762c842f3369378f24a" translate="yes" xml:space="preserve">
          <source>By default only the Packagist repository is registered in Composer. You can add more repositories to your project by declaring them in &lt;code&gt;composer.json&lt;/code&gt;.</source>
          <target state="translated">기본적으로 Packagist 저장소 만 Composer에 등록됩니다. &lt;code&gt;composer.json&lt;/code&gt; 에 선언하여 더 많은 저장소를 프로젝트에 추가 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="74e9252d3f7d6051ccb03a29298d08944c0fe629" translate="yes" xml:space="preserve">
          <source>By default the command checks for the packages on packagist.org.</source>
          <target state="translated">기본적으로이 명령은 packagist.org에서 패키지를 확인합니다.</target>
        </trans-unit>
        <trans-unit id="97376d9330f10aa21dfe86e18b60daccda7ebab1" translate="yes" xml:space="preserve">
          <source>By default, the Composer autoloader runs relatively fast. However, due to the way PSR-4 and PSR-0 autoloading rules are set up, it needs to check the filesystem before resolving a classname conclusively. This slows things down quite a bit, but it is convenient in development environments because when you add a new class it can immediately be discovered/used without having to rebuild the autoloader configuration.</source>
          <target state="translated">기본적으로 Composer 오토로더는 비교적 빠르게 실행됩니다. 그러나 PSR-4 및 PSR-0 자동로드 규칙이 설정되는 방식으로 인해 클래스 이름을 결정적으로 해결하기 전에 파일 시스템을 확인해야합니다. 이로 인해 작업 속도가 약간 느려지지만 개발 환경에서는 편리합니다. 새 클래스를 추가하면 자동 로더 구성을 다시 작성하지 않고도 즉시 검색 / 사용할 수 있기 때문에 편리합니다.</target>
        </trans-unit>
        <trans-unit id="2b1e704f6f2630ce516890978ee40d5f5b8d2c1c" translate="yes" xml:space="preserve">
          <source>By default, the priority of an event handler is set to 0. The priority can be changed by attaching a tuple where the first value is the method name, as before, and the second value is an integer representing the priority. Higher integers represent higher priorities. Priority 2 is called before priority 1, etc.</source>
          <target state="translated">기본적으로 이벤트 핸들러의 우선 순위는 0으로 설정됩니다. 우선 순위는 이전과 같이 첫 번째 값이 메소드 이름이고 두 번째 값이 우선 순위를 나타내는 정수인 튜플을 첨부하여 변경할 수 있습니다. 높은 정수는 높은 우선 순위를 나타냅니다. 우선 순위 2는 우선 순위 1보다 먼저 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="6a25f87d24c99b1abbe31d6ee5eeab7df2a02e90" translate="yes" xml:space="preserve">
          <source>By setting the &lt;code&gt;COMPOSER&lt;/code&gt; env variable it is possible to set the filename of &lt;code&gt;composer.json&lt;/code&gt; to something else.</source>
          <target state="translated">설정에 따라 &lt;code&gt;COMPOSER&lt;/code&gt; ENV 변수를 그것의 파일 이름 설정이 가능합니다 &lt;code&gt;composer.json&lt;/code&gt; 을 다른 것으로.</target>
        </trans-unit>
        <trans-unit id="469bfa76674356b37b03b941b79f5ca6765089e7" translate="yes" xml:space="preserve">
          <source>By setting this environmental value, you can set a path to a certificate bundle file to be used during SSL/TLS peer verification.</source>
          <target state="translated">이 환경 값을 설정하면 SSL / TLS 피어 확인 중에 사용할 인증서 번들 파일의 경로를 설정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c3b7d12599f837bb730748fd91344be9d410d870" translate="yes" xml:space="preserve">
          <source>By setting this option you can change the &lt;code&gt;bin&lt;/code&gt; (&lt;a href=&quot;articles/vendor-binaries.md&quot;&gt;Vendor Binaries&lt;/a&gt;) directory to something other than &lt;code&gt;vendor/bin&lt;/code&gt;.</source>
          <target state="translated">이 옵션을 설정하면 &lt;code&gt;bin&lt;/code&gt; ( &lt;a href=&quot;articles/vendor-binaries.md&quot;&gt;Vendor Binaries&lt;/a&gt; ) 디렉토리를 &lt;code&gt;vendor/bin&lt;/code&gt; 이외의 디렉토리로 변경할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="7be72e168bf1e5048755e96032f845b3e549174b" translate="yes" xml:space="preserve">
          <source>By setting this var you can make Composer install the dependencies into a directory other than &lt;code&gt;vendor&lt;/code&gt;.</source>
          <target state="translated">이 변수를 설정하면 Composer가 &lt;code&gt;vendor&lt;/code&gt; 이외의 디렉토리에 종속성을 설치할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="01a2ee466b5c41ba64286ce1734f0deba4e0276a" translate="yes" xml:space="preserve">
          <source>By setting this var you can specify the version of the root package, if it can not be guessed from VCS info and is not present in &lt;code&gt;composer.json&lt;/code&gt;.</source>
          <target state="translated">이 var를 설정하면 VCS 정보에서 추측 할 수없고 &lt;code&gt;composer.json&lt;/code&gt; 에 없는 경우 루트 패키지의 버전을 지정할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="b3e712363655d1d41023e3aa1789639227680ec6" translate="yes" xml:space="preserve">
          <source>By specifying &lt;code&gt;vendor-alias&lt;/code&gt; for the PEAR repository from the start, you can avoid this scenario and future-proof your package names.</source>
          <target state="translated">처음부터 PEAR 저장소의 &lt;code&gt;vendor-alias&lt;/code&gt; 을 지정 하면이 시나리오를 피하고 패키지 이름을 미래에 보장 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f17f4270d15421931e070fa495df5c5e37761cf6" translate="yes" xml:space="preserve">
          <source>By using comparison operators you can specify ranges of valid versions. Valid operators are &lt;code&gt;&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;gt;=&lt;/code&gt;, &lt;code&gt;&amp;lt;&lt;/code&gt;, &lt;code&gt;&amp;lt;=&lt;/code&gt;, &lt;code&gt;!=&lt;/code&gt;.</source>
          <target state="translated">비교 연산자를 사용하여 유효한 버전의 범위를 지정할 수 있습니다. 유효한 사업자는 &lt;code&gt;&amp;gt;&lt;/code&gt; , &lt;code&gt;&amp;gt;=&lt;/code&gt; , &lt;code&gt;&amp;lt;&lt;/code&gt; , &lt;code&gt;&amp;lt;=&lt;/code&gt; , &lt;code&gt;!=&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="c80f725e1f1fa64bc36b4ab6a91320da73c186ea" translate="yes" xml:space="preserve">
          <source>COMPOSER</source>
          <target state="translated">COMPOSER</target>
        </trans-unit>
        <trans-unit id="811286a00e3339baaad2d587906a50d0a5e7d07c" translate="yes" xml:space="preserve">
          <source>COMPOSER_ALLOW_SUPERUSER</source>
          <target state="translated">COMPOSER_ALLOW_SUPERUSER</target>
        </trans-unit>
        <trans-unit id="b04df09bbd89c2397dd18d6a63c9ff0758f6c294" translate="yes" xml:space="preserve">
          <source>COMPOSER_AUTH</source>
          <target state="translated">COMPOSER_AUTH</target>
        </trans-unit>
        <trans-unit id="60affbc85fc8fa713061f77f2269bcb4cceecd91" translate="yes" xml:space="preserve">
          <source>COMPOSER_BIN_DIR</source>
          <target state="translated">COMPOSER_BIN_DIR</target>
        </trans-unit>
        <trans-unit id="08671b47da28cf39041cfaa93342bdf251d4277c" translate="yes" xml:space="preserve">
          <source>COMPOSER_CACHE_DIR</source>
          <target state="translated">COMPOSER_CACHE_DIR</target>
        </trans-unit>
        <trans-unit id="2716563bcb8d0e8160b81fe8dba1c12874d1fbf3" translate="yes" xml:space="preserve">
          <source>COMPOSER_CAFILE</source>
          <target state="translated">COMPOSER_CAFILE</target>
        </trans-unit>
        <trans-unit id="9cd165d498d8467f52200c1094ac3c1366629fa7" translate="yes" xml:space="preserve">
          <source>COMPOSER_DISCARD_CHANGES</source>
          <target state="translated">COMPOSER_DISCARD_CHANGES</target>
        </trans-unit>
        <trans-unit id="dec4d4484b7da5bf2a4839a69cfb71305c57da1e" translate="yes" xml:space="preserve">
          <source>COMPOSER_HOME</source>
          <target state="translated">COMPOSER_HOME</target>
        </trans-unit>
        <trans-unit id="002ca46200390b4dffc437d7a5b4a8fe12a927ff" translate="yes" xml:space="preserve">
          <source>COMPOSER_HOME/config.json</source>
          <target state="translated">COMPOSER_HOME/config.json</target>
        </trans-unit>
        <trans-unit id="b0dd2ac67407e7516a1d40b2596aad90bff3cd56" translate="yes" xml:space="preserve">
          <source>COMPOSER_HTACCESS_PROTECT</source>
          <target state="translated">COMPOSER_HTACCESS_PROTECT</target>
        </trans-unit>
        <trans-unit id="518818cb74c2ab09567ec3ee44acbd971048955a" translate="yes" xml:space="preserve">
          <source>COMPOSER_MEMORY_LIMIT</source>
          <target state="translated">COMPOSER_MEMORY_LIMIT</target>
        </trans-unit>
        <trans-unit id="0b9a6f1a423b3d80d2e683f4d045962f5129b0e1" translate="yes" xml:space="preserve">
          <source>COMPOSER_MIRROR_PATH_REPOS</source>
          <target state="translated">COMPOSER_MIRROR_PATH_REPOS</target>
        </trans-unit>
        <trans-unit id="839f5a811dd50bed10be63eb1e3e27070f045463" translate="yes" xml:space="preserve">
          <source>COMPOSER_NO_INTERACTION</source>
          <target state="translated">COMPOSER_NO_INTERACTION</target>
        </trans-unit>
        <trans-unit id="ce2e7f03bdcd08ed026ebec46acbebc5c289ef2c" translate="yes" xml:space="preserve">
          <source>COMPOSER_PROCESS_TIMEOUT</source>
          <target state="translated">COMPOSER_PROCESS_TIMEOUT</target>
        </trans-unit>
        <trans-unit id="fd3289742ccea1c0b5b04e4bae337b35b40bbedc" translate="yes" xml:space="preserve">
          <source>COMPOSER_ROOT_VERSION</source>
          <target state="translated">COMPOSER_ROOT_VERSION</target>
        </trans-unit>
        <trans-unit id="29ba3f80cb4fbd7b0bd52f40bf529513f4bc0deb" translate="yes" xml:space="preserve">
          <source>COMPOSER_SELF_UPDATE_TARGET</source>
          <target state="translated">COMPOSER_SELF_UPDATE_TARGET</target>
        </trans-unit>
        <trans-unit id="25e1f34af5377a144fe0fc11466df9f68711dbe7" translate="yes" xml:space="preserve">
          <source>COMPOSER_VENDOR_DIR</source>
          <target state="translated">COMPOSER_VENDOR_DIR</target>
        </trans-unit>
        <trans-unit id="c0d1b9c003d5d8d40a926fbd3fa60c770d402adb" translate="yes" xml:space="preserve">
          <source>Call &lt;code&gt;dump-autoload&lt;/code&gt; with &lt;code&gt;--apcu&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;--apcu&lt;/code&gt; 를 사용 하여 &lt;code&gt;dump-autoload&lt;/code&gt; 호출</target>
        </trans-unit>
        <trans-unit id="3b0b7e75ebc1d8ff08fe4ead9851ef02b810b602" translate="yes" xml:space="preserve">
          <source>Call &lt;code&gt;dump-autoload&lt;/code&gt; with &lt;code&gt;-a&lt;/code&gt; / &lt;code&gt;--classmap-authoritative&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;-a&lt;/code&gt; / &lt;code&gt;--classmap-authoritative&lt;/code&gt; 를 사용 하여 &lt;code&gt;dump-autoload&lt;/code&gt; 호출</target>
        </trans-unit>
        <trans-unit id="9c1bbea1499aa2b8977e9b7e8f2b4d3e68e869a7" translate="yes" xml:space="preserve">
          <source>Call &lt;code&gt;dump-autoload&lt;/code&gt; with &lt;code&gt;-o&lt;/code&gt; / &lt;code&gt;--optimize&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;-o&lt;/code&gt; / &lt;code&gt;--optimize&lt;/code&gt; 를 사용 하여 &lt;code&gt;dump-autoload&lt;/code&gt; 호출</target>
        </trans-unit>
        <trans-unit id="67ff7e41394ab0443066504daf647293140ed095" translate="yes" xml:space="preserve">
          <source>Call &lt;code&gt;install&lt;/code&gt; or &lt;code&gt;update&lt;/code&gt; with &lt;code&gt;--apcu-autoloader&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;--apcu-autoloader&lt;/code&gt; 를 &lt;code&gt;update&lt;/code&gt; 하여 &lt;code&gt;install&lt;/code&gt; 또는 업데이트 호출</target>
        </trans-unit>
        <trans-unit id="7d942037648d77359138da13a97dd5f195963bdb" translate="yes" xml:space="preserve">
          <source>Call &lt;code&gt;install&lt;/code&gt; or &lt;code&gt;update&lt;/code&gt; with &lt;code&gt;-a&lt;/code&gt; / &lt;code&gt;--classmap-authoritative&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;-a&lt;/code&gt; / &lt;code&gt;--classmap-authoritative&lt;/code&gt; 를 &lt;code&gt;update&lt;/code&gt; 하여 &lt;code&gt;install&lt;/code&gt; 또는 업데이트 호출</target>
        </trans-unit>
        <trans-unit id="2f47df95d2a46c67a0047d88ff4c647a2efcdcbc" translate="yes" xml:space="preserve">
          <source>Call &lt;code&gt;install&lt;/code&gt; or &lt;code&gt;update&lt;/code&gt; with &lt;code&gt;-o&lt;/code&gt; / &lt;code&gt;--optimize-autoloader&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;-o&lt;/code&gt; / &lt;code&gt;--optimize-autoloader&lt;/code&gt; 를 &lt;code&gt;update&lt;/code&gt; 하여 &lt;code&gt;install&lt;/code&gt; 또는 업데이트 호출</target>
        </trans-unit>
        <trans-unit id="99965321c935b5a96e87e9bdba285ca4a39c5383" translate="yes" xml:space="preserve">
          <source>Callbacks can only autoload classes from psr-0, psr-4 and classmap definitions. If a defined callback relies on functions defined outside of a class, the callback itself is responsible for loading the file containing these functions.</source>
          <target state="translated">콜백은 psr-0, psr-4 및 클래스 맵 정의의 클래스 만 자동로드 할 수 있습니다. 정의 된 콜백이 클래스 외부에서 정의 된 함수에 의존하는 경우 콜백 자체는 이러한 함수를 포함하는 파일을로드합니다.</target>
        </trans-unit>
        <trans-unit id="6fe4f83df362d3832d1e83d41e9b63b23a3216d8" translate="yes" xml:space="preserve">
          <source>Calling Composer commands</source>
          <target state="translated">작성기 명령 호출</target>
        </trans-unit>
        <trans-unit id="83f809c10eaa48c9342843ecdebde7f746889a5d" translate="yes" xml:space="preserve">
          <source>Calling a Custom Installer</source>
          <target state="translated">사용자 정의 설치 프로그램 호출</target>
        </trans-unit>
        <trans-unit id="ed12502177a4977a99424b228a00927e85dfa7d3" translate="yes" xml:space="preserve">
          <source>Can vendor binaries be installed somewhere other than vendor/bin?</source>
          <target state="translated">공급 업체 바이너리를 공급 업체 / 빈 이외의 곳에 설치할 수 있습니까?</target>
        </trans-unit>
        <trans-unit id="e253bce929413fa3ba2d6bd71ce6fa040084e4b5" translate="yes" xml:space="preserve">
          <source>Capable Plugins classes must implement the &lt;a href=&quot;https://github.com/composer/composer/blob/master/src/Composer/Plugin/Capable.php&quot;&gt;&lt;code&gt;Composer\Plugin\Capable&lt;/code&gt;&lt;/a&gt; interface and declare their capabilities in the &lt;code&gt;getCapabilities()&lt;/code&gt; method. This method must return an array, with the &lt;em&gt;key&lt;/em&gt; as a Composer Capability class name, and the &lt;em&gt;value&lt;/em&gt; as the Plugin's own implementation class name of said Capability:</source>
          <target state="translated">Capable Plugins 클래스는 &lt;a href=&quot;https://github.com/composer/composer/blob/master/src/Composer/Plugin/Capable.php&quot;&gt; &lt;code&gt;Composer\Plugin\Capable&lt;/code&gt; &lt;/a&gt; 인터페이스를 구현 하고 &lt;code&gt;getCapabilities()&lt;/code&gt; 메소드 에서 해당 기능을 선언해야합니다 . 이 메소드는 &lt;em&gt;키&lt;/em&gt; 를 Composer Capability 클래스 이름으로, &lt;em&gt;값&lt;/em&gt; 을 해당 Capability 의 플러그인 자체 구현 클래스 이름으로 배열을 리턴해야합니다 .</target>
        </trans-unit>
        <trans-unit id="ffa0cee94ccf4b87b8503213ee98e3a3f10269b1" translate="yes" xml:space="preserve">
          <source>Caret Version Range (^)</source>
          <target state="translated">캐럿 버전 범위 (^)</target>
        </trans-unit>
        <trans-unit id="c64d89c645acb633b019e7040519250c7745d79e" translate="yes" xml:space="preserve">
          <source>Caution is advised when using replace for the sub-package purpose explained above. You should then typically only replace using &lt;code&gt;self.version&lt;/code&gt; as a version constraint, to make sure the main package only replaces the sub-packages of that exact version, and not any other version, which would be incorrect.</source>
          <target state="translated">위에서 설명한 하위 패키지 목적으로 교체를 사용할 때는주의해야합니다. 그런 다음 일반적으로 &lt;code&gt;self.version&lt;/code&gt; 을 버전 제약 조건으로 사용하여 기본 패키지 만 다른 버전이 아닌 정확한 버전의 하위 패키지 만 대체하는지 확인해야합니다.</target>
        </trans-unit>
        <trans-unit id="1904d3ced95667b12c381358c305a2a50254c463" translate="yes" xml:space="preserve">
          <source>Certain fields only apply when in the root package context. One example of this is the &lt;code&gt;config&lt;/code&gt; field. Only the root package can define configuration. The config of dependencies is ignored. This makes the &lt;code&gt;config&lt;/code&gt; field &lt;code&gt;root-only&lt;/code&gt;.</source>
          <target state="translated">특정 필드는 루트 패키지 컨텍스트에있을 때만 적용됩니다. 이에 대한 한 가지 예는 &lt;code&gt;config&lt;/code&gt; 필드입니다. 루트 패키지 만 구성을 정의 할 수 있습니다. 종속성 구성은 무시됩니다. 이것은 &lt;code&gt;config&lt;/code&gt; 필드를 &lt;code&gt;root-only&lt;/code&gt; 만듭니다.</target>
        </trans-unit>
        <trans-unit id="8a8a27821a6ffed36d55100b9bdfe83edfaf54a2" translate="yes" xml:space="preserve">
          <source>Change to a directory on your &lt;code&gt;PATH&lt;/code&gt; and run the installer following &lt;a href=&quot;https://getcomposer.org/download/&quot;&gt;the Download page instructions&lt;/a&gt; to download &lt;code&gt;composer.phar&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;PATH&lt;/code&gt; 의 디렉토리로 변경 &lt;a href=&quot;https://getcomposer.org/download/&quot;&gt;하고 다운로드 페이지 지시 사항&lt;/a&gt; 에 따라 설치 프로그램을 실행하여 &lt;code&gt;composer.phar&lt;/code&gt; 를 다운로드 하십시오 .</target>
        </trans-unit>
        <trans-unit id="264d009fefae2f4632d8f612cc3cfdc5360fe171" translate="yes" xml:space="preserve">
          <source>Check &lt;a href=&quot;https://github.com/composer/satis&quot;&gt;the satis GitHub repository&lt;/a&gt; and the &lt;a href=&quot;articles/handling-private-packages-with-satis.md&quot;&gt;Satis article&lt;/a&gt; for more information.</source>
          <target state="translated">자세한 내용 &lt;a href=&quot;https://github.com/composer/satis&quot;&gt;은 satis GitHub 저장소&lt;/a&gt; 및 &lt;a href=&quot;articles/handling-private-packages-with-satis.md&quot;&gt;Satis 기사&lt;/a&gt; 를 확인하십시오.</target>
        </trans-unit>
        <trans-unit id="d66040cda0e16ed8b27275f86a5716cb3dec4f86" translate="yes" xml:space="preserve">
          <source>Check if it contains any path to non-existent file, if it's the case, remove them.</source>
          <target state="translated">존재하지 않는 파일의 경로가 포함되어 있는지 확인하고, 존재하는 경우 제거하십시오.</target>
        </trans-unit>
        <trans-unit id="25fc1135a1a9fc602b1cf7be138488357d3a97f2" translate="yes" xml:space="preserve">
          <source>Check out &lt;a href=&quot;https://packagist.com/&quot;&gt;Packagist.com&lt;/a&gt; for more information.</source>
          <target state="translated">자세한 내용은 &lt;a href=&quot;https://packagist.com/&quot;&gt;Packagist.com&lt;/a&gt; 을 확인 하십시오.</target>
        </trans-unit>
        <trans-unit id="7d23e1e1c386a696a627548f3491698127ca6fcb" translate="yes" xml:space="preserve">
          <source>Check the &lt;a href=&quot;#package-not-found&quot;&gt;&quot;Package not found&quot;&lt;/a&gt; item above.</source>
          <target state="translated">위 의 &lt;a href=&quot;#package-not-found&quot;&gt;&quot;패키지를 찾을 수 없음&quot;&lt;/a&gt; 항목을 확인하십시오 .</target>
        </trans-unit>
        <trans-unit id="aa69c3b3440bce802584fb5a2fee8a43140046a3" translate="yes" xml:space="preserve">
          <source>Class map generation essentially converts PSR-4/PSR-0 rules into classmap rules. This makes everything quite a bit faster as for known classes the class map returns instantly the path, and Composer can guarantee the class is in there so there is no filesystem check needed.</source>
          <target state="translated">클래스 맵 생성은 기본적으로 PSR-4 / PSR-0 규칙을 클래스 맵 규칙으로 변환합니다. 알려진 클래스의 경우 클래스 맵이 즉시 경로를 반환하므로 Composer는 클래스가 있음을 보장하므로 파일 시스템 검사가 필요하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="03f3c4b37979729c081d5b7761f1e9831a1fb382" translate="yes" xml:space="preserve">
          <source>Classes needed to run the test suite should not be included in the main autoload rules to avoid polluting the autoloader in production and when other people use your package as a dependency.</source>
          <target state="translated">테스트 스위트를 실행하는 데 필요한 클래스는 기본 오토로드 규칙에 포함되어 프로덕션에서 오토로더의 오염을 피하고 다른 사람들이 패키지를 종속성으로 사용하는 경우를 피해야합니다.</target>
        </trans-unit>
        <trans-unit id="f76907ed4d39d90e7317a23474d708e26daa9462" translate="yes" xml:space="preserve">
          <source>Classmap</source>
          <target state="translated">Classmap</target>
        </trans-unit>
        <trans-unit id="9da95dffd9499928fc1adcf1824546a50350bb7a" translate="yes" xml:space="preserve">
          <source>Close your current terminal. Test usage with a new terminal:</source>
          <target state="translated">현재 터미널을 닫습니다. 새 터미널로 사용법을 테스트하십시오.</target>
        </trans-unit>
        <trans-unit id="16888f6f5885bcfabfaa6232751203e89dcc0902" translate="yes" xml:space="preserve">
          <source>Command Events</source>
          <target state="translated">명령 이벤트</target>
        </trans-unit>
        <trans-unit id="3780fe92a09dbc3757632112464d665685b72894" translate="yes" xml:space="preserve">
          <source>Command Events: &lt;a href=&quot;https://getcomposer.org/apidoc/master/Composer/Script/Event.html&quot;&gt;&lt;code&gt;Composer\Script\Event&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">명령 이벤트 : &lt;a href=&quot;https://getcomposer.org/apidoc/master/Composer/Script/Event.html&quot;&gt; &lt;code&gt;Composer\Script\Event&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="e5f6b8926102bd39752771e1fee23adf5e0891ac" translate="yes" xml:space="preserve">
          <source>Command provider</source>
          <target state="translated">명령 제공자</target>
        </trans-unit>
        <trans-unit id="36445bce193e3cada4ed3f6d24054222a746b990" translate="yes" xml:space="preserve">
          <source>Command-line completion</source>
          <target state="translated">명령 줄 완성</target>
        </trans-unit>
        <trans-unit id="2776e2db8abab47b7f4a12550f08b2039ca69d97" translate="yes" xml:space="preserve">
          <source>Command-line completion can be enabled by following instructions &lt;a href=&quot;https://github.com/bamarni/symfony-console-autocomplete&quot;&gt;on this page&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/bamarni/symfony-console-autocomplete&quot;&gt;이 페이지의&lt;/a&gt; 지침 에 따라 명령 줄 완료를 활성화 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="f16f2f417e9b1c9a406ae47a7808a9c66f4a4ee9" translate="yes" xml:space="preserve">
          <source>Command-line interface / Commands</source>
          <target state="translated">명령 줄 인터페이스 / 명령</target>
        </trans-unit>
        <trans-unit id="29d47fd518d126ab7f144f7ebeb9c4c2f9f944ec" translate="yes" xml:space="preserve">
          <source>Commit your &lt;code&gt;composer.lock&lt;/code&gt; file to version control</source>
          <target state="translated">&lt;code&gt;composer.lock&lt;/code&gt; 파일을 버전 관리로 커밋</target>
        </trans-unit>
        <trans-unit id="bd042abd32546f9fee391ccd10f7d04496c6a026" translate="yes" xml:space="preserve">
          <source>Committing this file to VC is important because it will cause anyone who sets up the project to use the exact same versions of the dependencies that you are using. Your CI server, production machines, other developers in your team, everything and everyone runs on the same dependencies, which mitigates the potential for bugs affecting only some parts of the deployments. Even if you develop alone, in six months when reinstalling the project you can feel confident the dependencies installed are still working even if your dependencies released many new versions since then. (See note below about using the &lt;code&gt;update&lt;/code&gt; command.)</source>
          <target state="translated">이 파일을 VC에 커밋하는 것은 프로젝트를 설정 한 사람이 사용중인 것과 동일한 버전의 종속성을 사용하게하므로 중요합니다. CI 서버, 프로덕션 시스템, 팀의 다른 개발자, 모든 사람 및 모든 사람이 동일한 종속성에서 실행되므로 배포의 일부에만 영향을주는 버그의 가능성이 줄어 듭니다. 단독으로 개발하더라도 프로젝트를 다시 설치할 때 6 개월 만에 종속성이 이후 많은 새 버전을 릴리스하더라도 설치된 종속성이 여전히 작동한다고 확신 할 수 있습니다. ( &lt;code&gt;update&lt;/code&gt; 명령 사용에 대해서는 아래 참고 사항을 참조하십시오 .)</target>
        </trans-unit>
        <trans-unit id="bfd58ee3a270f3a931009900e1008d549bbd7453" translate="yes" xml:space="preserve">
          <source>Community</source>
          <target state="translated">Community</target>
        </trans-unit>
        <trans-unit id="10c35d71ded7545a87321c94b9da10ed95f1480d" translate="yes" xml:space="preserve">
          <source>Composer</source>
          <target state="translated">Composer</target>
        </trans-unit>
        <trans-unit id="564213f6a01d835d602a467ede4f4e6509159897" translate="yes" xml:space="preserve">
          <source>Composer Versions vs VCS Versions</source>
          <target state="translated">작곡가 버전과 VCS 버전</target>
        </trans-unit>
        <trans-unit id="bbddf50c065e5012ad5f83a93f20f4a3bde4fd0c" translate="yes" xml:space="preserve">
          <source>Composer allows you to hook into various parts of the installation process through the use of scripts.</source>
          <target state="translated">Composer를 사용하면 스크립트를 사용하여 설치 프로세스의 다양한 부분에 연결할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="966bba701e0aba49b50e5b6531a3a374b71cc35c" translate="yes" xml:space="preserve">
          <source>Composer also respects a memory limit defined by the &lt;code&gt;COMPOSER_MEMORY_LIMIT&lt;/code&gt; environment variable:</source>
          <target state="translated">Composer는 또한 &lt;code&gt;COMPOSER_MEMORY_LIMIT&lt;/code&gt; 환경 변수에 의해 정의 된 메모리 한계를 준수 합니다.</target>
        </trans-unit>
        <trans-unit id="2eb0317485a25f5cde4722c87f3837d85ede7074" translate="yes" xml:space="preserve">
          <source>Composer can unpack zipballs using either a system-provided &lt;code&gt;unzip&lt;/code&gt; utility or PHP's native &lt;code&gt;ZipArchive&lt;/code&gt; class. The &lt;code&gt;ZipArchive&lt;/code&gt; class is preferred on Windows. On other OSes where ZIP files can contain permissions and symlinks, the &lt;code&gt;unzip&lt;/code&gt; utility is preferred. You're advised to install it if you need these features.</source>
          <target state="translated">Composer는 시스템에서 제공하는 &lt;code&gt;unzip&lt;/code&gt; 유틸리티 또는 PHP의 기본 &lt;code&gt;ZipArchive&lt;/code&gt; 클래스를 사용하여 zipball의 압축을 풀 수 있습니다 . &lt;code&gt;ZipArchive&lt;/code&gt; 클래스는 Windows에서 바람직하다. ZIP 파일이 권한 및 심볼릭 링크를 포함 할 수있는 다른 OS에서는 &lt;code&gt;unzip&lt;/code&gt; 유틸리티가 선호됩니다. 이러한 기능이 필요한 경우 설치하는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="4c8b5e83405fef865298a550f83b50d3d70ff646" translate="yes" xml:space="preserve">
          <source>Composer defines a standard set of capabilities which may be implemented by plugins. Their goal is to make the plugin ecosystem more stable as it reduces the need to mess with &lt;a href=&quot;https://github.com/composer/composer/blob/master/src/Composer/Composer.php&quot;&gt;&lt;code&gt;Composer\Composer&lt;/code&gt;&lt;/a&gt;'s internal state, by providing explicit extension points for common plugin requirements.</source>
          <target state="translated">Composer는 플러그인으로 구현할 수있는 표준 기능 세트를 정의합니다. 이들의 목표는 일반적인 플러그인 요구 사항에 대한 명확한 확장 점을 제공 하여 &lt;a href=&quot;https://github.com/composer/composer/blob/master/src/Composer/Composer.php&quot;&gt; &lt;code&gt;Composer\Composer&lt;/code&gt; &lt;/a&gt; 의 내부 상태 를 망칠 필요가 없기 때문에 플러그인 생태계를보다 안정적으로 만드는 것입니다 .</target>
        </trans-unit>
        <trans-unit id="9a438d57c1e2cf695257cdbd80897a83ad51780a" translate="yes" xml:space="preserve">
          <source>Composer fires the following named events during its execution process:</source>
          <target state="translated">Composer는 실행 프로세스 중에 다음과 같은 명명 된 이벤트를 발생시킵니다.</target>
        </trans-unit>
        <trans-unit id="1e7eb8107596ba9de20f27e26cbe8f734f0b71d8" translate="yes" xml:space="preserve">
          <source>Composer hangs with SSH ControlMaster</source>
          <target state="translated">SSH ControlMaster와 함께 작곡가 중단</target>
        </trans-unit>
        <trans-unit id="39a2e677494b5ab72daf55f8b03dbf15535a3d38" translate="yes" xml:space="preserve">
          <source>Composer has platform packages, which are virtual packages for things that are installed on the system but are not actually installable by Composer. This includes PHP itself, PHP extensions and some system libraries.</source>
          <target state="translated">Composer에는 플랫폼 패키지가 있습니다. 플랫폼 패키지는 시스템에 설치되어 있지만 실제로 Composer에서 설치할 수없는 것들에 대한 가상 패키지입니다. 여기에는 PHP 자체, PHP 확장 및 일부 시스템 라이브러리가 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="573ce7b411054d4c02a18f5529546d6492648137" translate="yes" xml:space="preserve">
          <source>Composer is &lt;strong&gt;not&lt;/strong&gt; a package manager in the same sense as Yum or Apt are. Yes, it deals with &quot;packages&quot; or libraries, but it manages them on a per-project basis, installing them in a directory (e.g. &lt;code&gt;vendor&lt;/code&gt;) inside your project. By default it does not install anything globally. Thus, it is a dependency manager. It does however support a &quot;global&quot; project for convenience via the &lt;a href=&quot;03-cli.md#global&quot;&gt;global&lt;/a&gt; command.</source>
          <target state="translated">Composer는 Yum 또는 Apt와 같은 의미의 패키지 관리자 가 &lt;strong&gt;아닙니다&lt;/strong&gt; . 예. &quot;패키지&quot;또는 라이브러리를 처리하지만 프로젝트별로 디렉토리 (예 : &lt;code&gt;vendor&lt;/code&gt; ) 에 설치하여 프로젝트별로 관리합니다 . 기본적으로 전체적으로 아무것도 설치하지 않습니다. 따라서 종속성 관리자입니다. 그러나 &lt;a href=&quot;03-cli.md#global&quot;&gt;전역&lt;/a&gt; 명령을 통해 편의상 &quot;전역&quot;프로젝트를 지원합니다 .</target>
        </trans-unit>
        <trans-unit id="0ab18fe365dceb6a4bab6699bbef3db838115483" translate="yes" xml:space="preserve">
          <source>Composer is a dependency manager. It installs packages locally. A package is essentially a directory containing something. In this case it is PHP code, but in theory it could be anything. And it contains a package description which has a name and a version. The name and the version are used to identify the package.</source>
          <target state="translated">Composer는 종속성 관리자입니다. 로컬로 패키지를 설치합니다. 패키지는 본질적으로 무언가를 포함하는 디렉토리입니다. 이 경우 PHP 코드이지만 이론적으로는 무엇이든 가능합니다. 그리고 이름과 버전을 가진 패키지 설명이 포함되어 있습니다. 이름과 버전은 패키지를 식별하는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="59999efe265ca7e466df3fff847ca9b9a9316741" translate="yes" xml:space="preserve">
          <source>Composer is a tool for dependency management in PHP. It allows you to declare the libraries your project depends on and it will manage (install/update) them for you.</source>
          <target state="translated">Composer는 PHP의 의존성 관리 도구입니다. 프로젝트가 의존하는 라이브러리를 선언 할 수 있으며 라이브러리를 관리 (설치 / 업데이트)합니다.</target>
        </trans-unit>
        <trans-unit id="366ae20a8e8e63302cc0fdee26078a4cd4ee6e73" translate="yes" xml:space="preserve">
          <source>Composer is multi-platform and we strive to make it run equally well on Windows, Linux and macOS.</source>
          <target state="translated">Composer는 다중 플랫폼이며 Windows, Linux 및 macOS에서 동일하게 실행되도록 노력하고 있습니다.</target>
        </trans-unit>
        <trans-unit id="691dc889620b5d930df233445b1acf0bc95c7a4f" translate="yes" xml:space="preserve">
          <source>Composer looks for the binaries defined in all of the dependencies. A symlink is created from each dependency's binaries to &lt;code&gt;vendor/bin&lt;/code&gt;.</source>
          <target state="translated">Composer는 모든 종속성에 정의 된 바이너리를 찾습니다. symlink는 각 의존성 바이너리에서 &lt;code&gt;vendor/bin&lt;/code&gt; 까지 생성됩니다 .</target>
        </trans-unit>
        <trans-unit id="707aede2a268d7b206c88bc185db4d78ec2efc70" translate="yes" xml:space="preserve">
          <source>Composer may sometimes fail on some commands with this message:</source>
          <target state="translated">이 메시지와 함께 일부 명령에서 작성기가 실패 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="733d99a35d5c1e976c74dc0fdd45cb1f0f594b3c" translate="yes" xml:space="preserve">
          <source>Composer offers a convenient installer that you can execute directly from the command line. Feel free to &lt;a href=&quot;https://getcomposer.org/installer&quot;&gt;download this file&lt;/a&gt; or review it on &lt;a href=&quot;https://github.com/composer/getcomposer.org/blob/master/web/installer&quot;&gt;GitHub&lt;/a&gt; if you wish to know more about the inner workings of the installer. The source is plain PHP.</source>
          <target state="translated">Composer는 명령 줄에서 직접 실행할 수있는 편리한 설치 프로그램을 제공합니다. 설치 프로그램의 내부 작동에 대해 더 알고 싶다면 &lt;a href=&quot;https://getcomposer.org/installer&quot;&gt;이 파일&lt;/a&gt; 을 다운로드 하거나 &lt;a href=&quot;https://github.com/composer/getcomposer.org/blob/master/web/installer&quot;&gt;GitHub에서&lt;/a&gt; 검토하십시오 . 소스는 일반 PHP입니다.</target>
        </trans-unit>
        <trans-unit id="241ce300335a27c01b1e988de7c691cd71c253e7" translate="yes" xml:space="preserve">
          <source>Composer requires PHP 5.3.2+ to run. A few sensitive php settings and compile flags are also required, but when using the installer you will be warned about any incompatibilities.</source>
          <target state="translated">Composer를 실행하려면 PHP 5.3.2 이상이 필요합니다. 몇 가지 민감한 PHP 설정 및 컴파일 플래그도 필요하지만 설치 프로그램을 사용할 때 비 호환성에 대한 경고가 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="90c3049ed21de69b64a44b7a76d46bec6eae029a" translate="yes" xml:space="preserve">
          <source>Composer uses this information to search for the right set of files in package &quot;repositories&quot; that you register using the &lt;a href=&quot;04-schema.md#repositories&quot;&gt;&lt;code&gt;repositories&lt;/code&gt;&lt;/a&gt; key, or in Packagist, the default package repository. In the above example, since no other repository has been registered in the &lt;code&gt;composer.json&lt;/code&gt; file, it is assumed that the &lt;code&gt;monolog/monolog&lt;/code&gt; package is registered on Packagist. (See more about Packagist &lt;a href=&quot;#packagist&quot;&gt;below&lt;/a&gt;, or read more about repositories &lt;a href=&quot;05-repositories.md&quot;&gt;here&lt;/a&gt;).</source>
          <target state="translated">Composer는이 정보를 사용하여 &lt;a href=&quot;04-schema.md#repositories&quot;&gt; &lt;code&gt;repositories&lt;/code&gt; &lt;/a&gt; 키를 사용하여 등록한 패키지 &quot;저장소&quot; 또는 기본 패키지 저장소 인 Packagist에서 올바른 파일 세트를 검색 합니다. 위의 예에서 &lt;code&gt;composer.json&lt;/code&gt; 파일 에 다른 저장소가 등록되어 있지 않기 때문에 monoag &lt;code&gt;monolog/monolog&lt;/code&gt; 패키지가 Packagist에 등록되어 있다고 가정합니다 . &lt;a href=&quot;#packagist&quot;&gt;아래의&lt;/a&gt; Packagist에 대한 자세한 내용을 보거나 &lt;a href=&quot;05-repositories.md&quot;&gt;여기에서&lt;/a&gt; 리포지토리 에 대한 자세한 내용을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="6481c2852cf8382e61732068f690be54cb541baa" translate="yes" xml:space="preserve">
          <source>Composer uses your VCS's branch and tag features to resolve the version constraints you specify in your &lt;code&gt;require&lt;/code&gt; field to specific sets of files. When determining valid available versions, Composer looks at all of your tags and branches and translates their names into an internal list of options that it then matches against the version constraint you provided.</source>
          <target state="translated">Composer는 VCS의 브랜치 및 태그 기능을 사용하여 &lt;code&gt;require&lt;/code&gt; 필드에 지정한 버전 제약 조건 을 특정 파일 세트로 해결합니다. 사용 가능한 유효한 버전을 결정할 때 Composer는 모든 태그 및 분기를보고 해당 이름을 내부 옵션 목록으로 변환 한 다음 제공 한 버전 제약 조건과 일치합니다.</target>
        </trans-unit>
        <trans-unit id="95d8e13cca24c5991166c47d870424b90cfc0d71" translate="yes" xml:space="preserve">
          <source>Composer will always show a warning if xdebug is being used, but you can override this with an environment variable: &lt;code&gt;COMPOSER_DISABLE_XDEBUG_WARN=1&lt;/code&gt;. If you see this warning unexpectedly, then the restart process has failed: please report this &lt;a href=&quot;https://github.com/composer/composer/issues&quot;&gt;issue&lt;/a&gt;.</source>
          <target state="translated">xdebug를 사용중인 경우 Composer는 항상 경고를 표시하지만 환경 변수 &lt;code&gt;COMPOSER_DISABLE_XDEBUG_WARN=1&lt;/code&gt; 로이를 대체 할 수 있습니다 . 이 경고가 예기치 않게 표시되면 다시 시작 프로세스가 실패한 것입니다.이 &lt;a href=&quot;https://github.com/composer/composer/issues&quot;&gt;문제&lt;/a&gt; 를보고하십시오 .</target>
        </trans-unit>
        <trans-unit id="8cab82feaeeb9d53f20f389c3a7760a03f0111d3" translate="yes" xml:space="preserve">
          <source>Composer will not update the commit references, so if you use &lt;code&gt;master&lt;/code&gt; as reference you will have to delete the package to force an update, and will have to deal with an unstable lock file.</source>
          <target state="translated">Composer는 커밋 참조를 업데이트하지 않으므로 &lt;code&gt;master&lt;/code&gt; 를 참조로 사용하는 경우 패키지를 삭제하여 업데이트를 강제 실행해야하며 불안정한 잠금 파일을 처리해야합니다.</target>
        </trans-unit>
        <trans-unit id="688b6c8d7810fec22a4430ea6ece1485660f438c" translate="yes" xml:space="preserve">
          <source>Composer will not update the package unless you change the &lt;code&gt;version&lt;/code&gt; field.</source>
          <target state="translated">&lt;code&gt;version&lt;/code&gt; 필드 를 변경하지 않으면 Composer가 패키지를 업데이트하지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="440ed834dac39bdde4e92eb504700db8b62a8f71" translate="yes" xml:space="preserve">
          <source>Composer will register a &lt;a href=&quot;http://www.php-fig.org/psr/psr-4/&quot;&gt;PSR-4&lt;/a&gt; autoloader for the &lt;code&gt;Acme&lt;/code&gt; namespace.</source>
          <target state="translated">Composer는 &lt;code&gt;Acme&lt;/code&gt; 네임 스페이스에 &lt;a href=&quot;http://www.php-fig.org/psr/psr-4/&quot;&gt;PSR-4&lt;/a&gt; 오토로더를 등록합니다 .</target>
        </trans-unit>
        <trans-unit id="9925588b41b559458e85322904fa8a33d93eb91c" translate="yes" xml:space="preserve">
          <source>Composer:</source>
          <target state="translated">Composer:</target>
        </trans-unit>
        <trans-unit id="6f58d263f33944384921df8405fd4a36e06175e2" translate="yes" xml:space="preserve">
          <source>Concepts</source>
          <target state="translated">Concepts</target>
        </trans-unit>
        <trans-unit id="8851142da56fd885ce668a165b33fee7003e858d" translate="yes" xml:space="preserve">
          <source>Config</source>
          <target state="translated">Config</target>
        </trans-unit>
        <trans-unit id="b8577c99aaca7f628cb921ee68fce4bf962909c4" translate="yes" xml:space="preserve">
          <source>Configuration Options</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cdd87b7907fb17673e884c148848c9c5e93b59ca" translate="yes" xml:space="preserve">
          <source>Constraint</source>
          <target state="translated">Constraint</target>
        </trans-unit>
        <trans-unit id="2d82a4b27a4b305690d5ac612046a955778a9fa5" translate="yes" xml:space="preserve">
          <source>Contributing</source>
          <target state="translated">Contributing</target>
        </trans-unit>
        <trans-unit id="ef66b677f36f651075aa196f90344383d2d3ce7e" translate="yes" xml:space="preserve">
          <source>Create a new &lt;code&gt;composer.bat&lt;/code&gt; file alongside &lt;code&gt;composer.phar&lt;/code&gt;:</source>
          <target state="translated">새로 만들기 &lt;code&gt;composer.bat&lt;/code&gt; 의 함께 파일 &lt;code&gt;composer.phar&lt;/code&gt; 을 :</target>
        </trans-unit>
        <trans-unit id="4d78ac4eeb4777f579bb151b7e35e611b7af1d11" translate="yes" xml:space="preserve">
          <source>Creating a Plugin</source>
          <target state="translated">플러그인 만들기</target>
        </trans-unit>
        <trans-unit id="4d452209c3a2b8a15387e01f17039d3b71192ca2" translate="yes" xml:space="preserve">
          <source>Creating an Installer</source>
          <target state="translated">설치 프로그램 만들기</target>
        </trans-unit>
        <trans-unit id="0daf585327efff762b3b8d8b84e8b0c38eb881d3" translate="yes" xml:space="preserve">
          <source>Custom descriptions.</source>
          <target state="translated">사용자 정의 설명.</target>
        </trans-unit>
        <trans-unit id="1cbe9ea3b339f05ed199bddfc0abd3eb69def700" translate="yes" xml:space="preserve">
          <source>Custom package repositories to use.</source>
          <target state="translated">사용할 사용자 정의 패키지 저장소.</target>
        </trans-unit>
        <trans-unit id="cb973ac8447e7992a1d0cab66fa6da45eb931473" translate="yes" xml:space="preserve">
          <source>Custom vendor alias</source>
          <target state="translated">커스텀 벤더 별명</target>
        </trans-unit>
        <trans-unit id="90250ae668e1c5af84df13ad2b78b18baa9765f1" translate="yes" xml:space="preserve">
          <source>Defaults to &lt;code&gt;$cache-dir/files&lt;/code&gt;. Stores the zip archives of packages.</source>
          <target state="translated">기본값은 &lt;code&gt;$cache-dir/files&lt;/code&gt; 입니다. 패키지의 zip 아카이브를 저장합니다.</target>
        </trans-unit>
        <trans-unit id="f5dbffeb8c8d4f1d00a524ba11351aa99fdc62ae" translate="yes" xml:space="preserve">
          <source>Defaults to &lt;code&gt;$cache-dir/repo&lt;/code&gt;. Stores repository metadata for the &lt;code&gt;composer&lt;/code&gt; type and the VCS repos of type &lt;code&gt;svn&lt;/code&gt;, &lt;code&gt;fossil&lt;/code&gt;, &lt;code&gt;github&lt;/code&gt; and &lt;code&gt;bitbucket&lt;/code&gt;.</source>
          <target state="translated">기본값은 &lt;code&gt;$cache-dir/repo&lt;/code&gt; 입니다. &lt;code&gt;composer&lt;/code&gt; 유형 및 &lt;code&gt;svn&lt;/code&gt; , &lt;code&gt;fossil&lt;/code&gt; , &lt;code&gt;github&lt;/code&gt; 및 &lt;code&gt;bitbucket&lt;/code&gt; 유형의 VCS 저장소에 대한 저장소 메타 데이터를 저장합니다 .</target>
        </trans-unit>
        <trans-unit id="60925053f3188a3be542e8f5b25d3fd918eebd2a" translate="yes" xml:space="preserve">
          <source>Defaults to &lt;code&gt;$cache-dir/vcs&lt;/code&gt;. Stores VCS clones for loading VCS repository metadata for the &lt;code&gt;git&lt;/code&gt;/&lt;code&gt;hg&lt;/code&gt; types and to speed up installs.</source>
          <target state="translated">기본값은 &lt;code&gt;$cache-dir/vcs&lt;/code&gt; 입니다. &lt;code&gt;git&lt;/code&gt; / &lt;code&gt;hg&lt;/code&gt; 유형 의 VCS 저장소 메타 데이터를로드 하고 설치 속도를 높이기 위한 VCS 복제본을 저장 합니다.</target>
        </trans-unit>
        <trans-unit id="ef15ec621f0b30559931c497419fee3e418e84cf" translate="yes" xml:space="preserve">
          <source>Defaults to &lt;code&gt;.&lt;/code&gt;. Composer allows you to add a default archive directory when the workflow needs to create a dedicated archiving format. Or for easier development between modules.</source>
          <target state="translated">기본값은 &lt;code&gt;.&lt;/code&gt; . Composer를 사용하면 워크 플로에서 전용 보관 형식을 만들어야하는 경우 기본 보관 디렉토리를 추가 할 수 있습니다. 또는 모듈 간 개발이 쉬워집니다.</target>
        </trans-unit>
        <trans-unit id="aba9a295bb89950c86dcda1697662dc74f5d7a5e" translate="yes" xml:space="preserve">
          <source>Defaults to &lt;code&gt;15552000&lt;/code&gt; (6 months). Composer caches all dist (zip, tar, ..) packages that it downloads. Those are purged after six months of being unused by default. This option allows you to tweak this duration (in seconds) or disable it completely by setting it to 0.</source>
          <target state="translated">기본값은 &lt;code&gt;15552000&lt;/code&gt; (6 개월)입니다. Composer는 다운로드 한 모든 dist (zip, tar, ..) 패키지를 캐시합니다. 기본적으로 6 개월 동안 사용하지 않으면 제거됩니다. 이 옵션을 사용하면이 기간 (초)을 조정하거나 0으로 설정하여 완전히 비활성화 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a6e579c359951a0c9ce797a6efb7d13505153da1" translate="yes" xml:space="preserve">
          <source>Defaults to &lt;code&gt;1&lt;/code&gt;. If set to &lt;code&gt;0&lt;/code&gt;, Composer will not create &lt;code&gt;.htaccess&lt;/code&gt; files in the composer home, cache, and data directories.</source>
          <target state="translated">기본값은 &lt;code&gt;1&lt;/code&gt; 입니다. &lt;code&gt;0&lt;/code&gt; 으로 설정하면 Composer는 작성기 홈, 캐시 및 데이터 디렉토리에 &lt;code&gt;.htaccess&lt;/code&gt; 파일을 작성하지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="5161525864513a85308ab6f0d10187a3304c00a1" translate="yes" xml:space="preserve">
          <source>Defaults to &lt;code&gt;300&lt;/code&gt;. The duration processes like git clones can run before Composer assumes they died out. You may need to make this higher if you have a slow connection or huge vendors.</source>
          <target state="translated">기본값은 &lt;code&gt;300&lt;/code&gt; 입니다. Composer가 죽었다고 가정하기 전에 git 클론과 같은 기간 프로세스를 실행할 수 있습니다. 연결 속도가 느리거나 공급 업체가 큰 경우이 값을 더 높게 설정해야합니다.</target>
        </trans-unit>
        <trans-unit id="23df58a81df571c1a060d7620d5546039e3a05da" translate="yes" xml:space="preserve">
          <source>Defaults to &lt;code&gt;300MiB&lt;/code&gt;. Composer caches all dist (zip, tar, ..) packages that it downloads. When the garbage collection is periodically ran, this is the maximum size the cache will be able to use. Older (less used) files will be removed first until the cache fits.</source>
          <target state="translated">기본값은 &lt;code&gt;300MiB&lt;/code&gt; 입니다. Composer는 다운로드 한 모든 dist (zip, tar, ..) 패키지를 캐시합니다. 가비지 수집이 주기적으로 실행되면 캐시에서 사용할 수있는 최대 크기입니다. 캐시가 맞을 때까지 오래된 파일 (사용하지 않은 파일)이 먼저 제거됩니다.</target>
        </trans-unit>
        <trans-unit id="5f3d6d54fd5210b07957c6ba8c9bf5ab5a43c946" translate="yes" xml:space="preserve">
          <source>Defaults to &lt;code&gt;C:\Users\&amp;lt;user&amp;gt;\AppData\Local\Composer&lt;/code&gt; on Windows, &lt;code&gt;$XDG_CACHE_HOME/composer&lt;/code&gt; on unix systems that follow the XDG Base Directory Specifications, and &lt;code&gt;$home/cache&lt;/code&gt; on other unix systems. Stores all the caches used by Composer. See also &lt;a href=&quot;03-cli.md#composer-home&quot;&gt;COMPOSER_HOME&lt;/a&gt;.</source>
          <target state="translated">기본적으로 Windows의 경우 &lt;code&gt;C:\Users\&amp;lt;user&amp;gt;\AppData\Local\Composer&lt;/code&gt; , XDG 기본 디렉토리 스펙을 따르는 UNIX 시스템의 경우 &lt;code&gt;$XDG_CACHE_HOME/composer&lt;/code&gt; 및 기타 유닉스 시스템의 경우 &lt;code&gt;$home/cache&lt;/code&gt; 입니다. Composer가 사용하는 모든 캐시를 저장합니다. &lt;a href=&quot;03-cli.md#composer-home&quot;&gt;COMPOSER_HOME&lt;/a&gt; 도 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="d23df709207ae7094d9f027aed62436abb2249dd" translate="yes" xml:space="preserve">
          <source>Defaults to &lt;code&gt;C:\Users\&amp;lt;user&amp;gt;\AppData\Roaming\Composer&lt;/code&gt; on Windows, &lt;code&gt;$XDG_DATA_HOME/composer&lt;/code&gt; on unix systems that follow the XDG Base Directory Specifications, and &lt;code&gt;$home&lt;/code&gt; on other unix systems. Right now it is only used for storing past composer.phar files to be able to rollback to older versions. See also &lt;a href=&quot;03-cli.md#composer-home&quot;&gt;COMPOSER_HOME&lt;/a&gt;.</source>
          <target state="translated">기본적으로 Windows의 경우 &lt;code&gt;C:\Users\&amp;lt;user&amp;gt;\AppData\Roaming\Composer&lt;/code&gt; , XDG 기본 디렉토리 스펙을 따르는 UNIX 시스템의 경우 &lt;code&gt;$XDG_DATA_HOME/composer&lt;/code&gt; , 기타 UNIX 시스템의 경우 &lt;code&gt;$home&lt;/code&gt; 입니다. 현재는 이전 composer.phar 파일을 저장하여 이전 버전으로 롤백 할 때만 사용됩니다. &lt;a href=&quot;03-cli.md#composer-home&quot;&gt;COMPOSER_HOME&lt;/a&gt; 도 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="9cfcf65c954d7cc28f62704f45323cbb37e78fbe" translate="yes" xml:space="preserve">
          <source>Defaults to &lt;code&gt;[&quot;github.com&quot;]&lt;/code&gt;. A list of domains to use in github mode. This is used for GitHub Enterprise setups.</source>
          <target state="translated">기본값은 &lt;code&gt;[&quot;github.com&quot;]&lt;/code&gt; 입니다. github 모드에서 사용할 도메인 목록입니다. 이것은 GitHub Enterprise 설정에 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="270ddeeb4e0195bf3dca99343b8d21f5f6d6576f" translate="yes" xml:space="preserve">
          <source>Defaults to &lt;code&gt;[&quot;gitlab.com&quot;]&lt;/code&gt;. A list of domains of GitLab servers. This is used if you use the &lt;code&gt;gitlab&lt;/code&gt; repository type.</source>
          <target state="translated">기본값은 &lt;code&gt;[&quot;gitlab.com&quot;]&lt;/code&gt; 입니다. GitLab 서버의 도메인 목록. &lt;code&gt;gitlab&lt;/code&gt; 저장소 유형 을 사용하는 경우에 사용됩니다 .</target>
        </trans-unit>
        <trans-unit id="f0ba63f4844bdae3555691c9e5fb89e994e9dec8" translate="yes" xml:space="preserve">
          <source>Defaults to &lt;code&gt;[&quot;https&quot;, &quot;ssh&quot;, &quot;git&quot;]&lt;/code&gt;. A list of protocols to use when cloning from github.com, in priority order. By default &lt;code&gt;git&lt;/code&gt; is present but only if &lt;a href=&quot;#secure-http&quot;&gt;secure-http&lt;/a&gt; is disabled, as the git protocol is not encrypted. If you want your origin remote push URLs to be using https and not ssh (&lt;code&gt;git@github.com:...&lt;/code&gt;), then set the protocol list to be only &lt;code&gt;[&quot;https&quot;]&lt;/code&gt; and Composer will stop overwriting the push URL to an ssh URL.</source>
          <target state="translated">기본값은 &lt;code&gt;[&quot;https&quot;, &quot;ssh&quot;, &quot;git&quot;]&lt;/code&gt; 입니다. 우선 순위에 따라 github.com에서 복제 할 때 사용할 프로토콜 목록입니다. 기본적으로 &lt;code&gt;git&lt;/code&gt; 은 존재하지만 git 프로토콜이 암호화되지 않기 때문에 &lt;a href=&quot;#secure-http&quot;&gt;secure-http&lt;/a&gt; 가 비활성화 된 경우에만 존재 합니다. 오리진 원격 푸시 URL이 ssh ( &lt;code&gt;git@github.com:...&lt;/code&gt; )가 아닌 https 를 사용하도록하려면 프로토콜 목록을 &lt;code&gt;[&quot;https&quot;]&lt;/code&gt; 로만 설정하면 Composer는 푸시 URL 덮어 쓰기를 중지합니다. ssh URL.</target>
        </trans-unit>
        <trans-unit id="6a0c54139aca248f3da477274931315b5640d0f7" translate="yes" xml:space="preserve">
          <source>Defaults to &lt;code&gt;auto&lt;/code&gt; and can be any of &lt;code&gt;source&lt;/code&gt;, &lt;code&gt;dist&lt;/code&gt; or &lt;code&gt;auto&lt;/code&gt;. This option allows you to set the install method Composer will prefer to use. Can optionally be a hash of patterns for more granular install preferences.</source>
          <target state="translated">기본값은 &lt;code&gt;auto&lt;/code&gt; 이며 &lt;code&gt;source&lt;/code&gt; , &lt;code&gt;dist&lt;/code&gt; 또는 &lt;code&gt;auto&lt;/code&gt; 중 하나 일 수 있습니다 . 이 옵션을 사용하면 Composer가 선호하는 설치 방법을 설정할 수 있습니다. 보다 세분화 된 설치 환경 설정을위한 패턴 해시 일 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="9a7659f1bd7ec5f92ddfb60fda3c827733e381ff" translate="yes" xml:space="preserve">
          <source>Defaults to &lt;code&gt;auto&lt;/code&gt;. Determines the compatibility of the binaries to be installed. If it is &lt;code&gt;auto&lt;/code&gt; then Composer only installs .bat proxy files when on Windows. If set to &lt;code&gt;full&lt;/code&gt; then both .bat files for Windows and scripts for Unix-based operating systems will be installed for each binary. This is mainly useful if you run Composer inside a linux VM but still want the .bat proxies available for use in the Windows host OS.</source>
          <target state="translated">기본값은 &lt;code&gt;auto&lt;/code&gt; 입니다. 설치할 바이너리의 호환성을 결정합니다. 이 경우 &lt;code&gt;auto&lt;/code&gt; 다음 작곡가 때 윈도우에서만 프록시 .bat 파일 설치합니다. &lt;code&gt;full&lt;/code&gt; 로 설정하면 Windows 용 .bat 파일과 Unix 기반 운영 체제 용 스크립트가 각 바이너리마다 설치됩니다. 이것은 Linux VM 내에서 Composer를 실행하지만 Windows 호스트 OS에서 .bat 프록시를 계속 사용할 수있는 경우에 주로 유용합니다.</target>
        </trans-unit>
        <trans-unit id="9579f034c4fbdb78670ad56c0278b7f59193eece" translate="yes" xml:space="preserve">
          <source>Defaults to &lt;code&gt;false&lt;/code&gt; and can be any of &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt; or &lt;code&gt;&quot;stash&quot;&lt;/code&gt;. This option allows you to set the default style of handling dirty updates when in non-interactive mode. &lt;code&gt;true&lt;/code&gt; will always discard changes in vendors, while &lt;code&gt;&quot;stash&quot;&lt;/code&gt; will try to stash and reapply. Use this for CI servers or deploy scripts if you tend to have modified vendors.</source>
          <target state="translated">기본값은 &lt;code&gt;false&lt;/code&gt; 이며 &lt;code&gt;true&lt;/code&gt; , &lt;code&gt;false&lt;/code&gt; 또는 &lt;code&gt;&quot;stash&quot;&lt;/code&gt; 중 하나 일 수 있습니다 . 이 옵션을 사용하면 비 대화식 모드 일 때 더티 업데이트를 처리하는 기본 스타일을 설정할 수 있습니다. &lt;code&gt;true&lt;/code&gt; 는 공급 업체의 변경 사항을 항상 버리고 &lt;code&gt;&quot;stash&quot;&lt;/code&gt; 는 숨기고 다시 적용하려고합니다. 공급 업체를 수정하려는 경향이있는 경우 CI 서버에이를 사용하거나 스크립트를 배포하십시오.</target>
        </trans-unit>
        <trans-unit id="30ed8dc291791a405af4586c20f86a3e3f29c7b2" translate="yes" xml:space="preserve">
          <source>Defaults to &lt;code&gt;false&lt;/code&gt;. If &lt;code&gt;true&lt;/code&gt;, always optimize when dumping the autoloader.</source>
          <target state="translated">기본값은 &lt;code&gt;false&lt;/code&gt; 입니다. &lt;code&gt;true&lt;/code&gt; 인 경우 오토로더를 덤프 할 때 항상 최적화하십시오.</target>
        </trans-unit>
        <trans-unit id="ccf4618ef53908056dd7f64b918a26d4351b9663" translate="yes" xml:space="preserve">
          <source>Defaults to &lt;code&gt;false&lt;/code&gt;. If &lt;code&gt;true&lt;/code&gt;, the &lt;code&gt;require&lt;/code&gt; command keeps packages sorted by name in &lt;code&gt;composer.json&lt;/code&gt; when adding a new package.</source>
          <target state="translated">기본값은 &lt;code&gt;false&lt;/code&gt; 입니다. 경우 &lt;code&gt;true&lt;/code&gt; 의가 &lt;code&gt;require&lt;/code&gt; 명령은 패키지에 이름으로 정렬 유지 &lt;code&gt;composer.json&lt;/code&gt; 새 패키지를 추가 할 때.</target>
        </trans-unit>
        <trans-unit id="9ec7002d679899bf558291eaa0656a39e111cea5" translate="yes" xml:space="preserve">
          <source>Defaults to &lt;code&gt;false&lt;/code&gt;. If &lt;code&gt;true&lt;/code&gt;, the Composer autoloader will also look for classes in the PHP include path.</source>
          <target state="translated">기본값은 &lt;code&gt;false&lt;/code&gt; 입니다. 경우 &lt;code&gt;true&lt;/code&gt; , 합성기 자동 로더는 또한 PHP에서 클래스 경로를 포함 찾습니다.</target>
        </trans-unit>
        <trans-unit id="c7a7234b1481674a29bbbca0d9873decde7379ac" translate="yes" xml:space="preserve">
          <source>Defaults to &lt;code&gt;false&lt;/code&gt;. If &lt;code&gt;true&lt;/code&gt;, the Composer autoloader will check for APCu and use it to cache found/not-found classes when the extension is enabled.</source>
          <target state="translated">기본값은 &lt;code&gt;false&lt;/code&gt; 입니다. 경우 &lt;code&gt;true&lt;/code&gt; , 합성기 자동 로더는 APCu 확인하고 확장이 활성화 된 경우 클래스를 찾을 수 없다는 / 발견 캐시를 사용합니다.</target>
        </trans-unit>
        <trans-unit id="7d2ad6085afe35b59a9da389f7c57053c3415afe" translate="yes" xml:space="preserve">
          <source>Defaults to &lt;code&gt;false&lt;/code&gt;. If &lt;code&gt;true&lt;/code&gt;, the Composer autoloader will only load classes from the classmap. Implies &lt;code&gt;optimize-autoloader&lt;/code&gt;.</source>
          <target state="translated">기본값은 &lt;code&gt;false&lt;/code&gt; 입니다. 경우 &lt;code&gt;true&lt;/code&gt; , 합성기 자동 로더 만 classmap에서 클래스를로드합니다. &lt;code&gt;optimize-autoloader&lt;/code&gt; 를 의미합니다 .</target>
        </trans-unit>
        <trans-unit id="54f61ce2db0c1f39b9be5512ad7c90eca4cc1fb5" translate="yes" xml:space="preserve">
          <source>Defaults to &lt;code&gt;false&lt;/code&gt;. If set to true all HTTPS URLs will be tried with HTTP instead and no network level encryption is performed. Enabling this is a security risk and is NOT recommended. The better way is to enable the php_openssl extension in php.ini.</source>
          <target state="translated">기본값은 &lt;code&gt;false&lt;/code&gt; 입니다. true로 설정하면 모든 HTTPS URL이 HTTP 대신 HTTP로 시도되고 네트워크 레벨 암호화가 수행되지 않습니다. 이 기능을 사용하면 보안 상 위험하므로 권장하지 않습니다. 더 좋은 방법은 php.ini에서 php_openssl 확장을 활성화하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="0720dca754225861b3aca2c2e0b4840759379056" translate="yes" xml:space="preserve">
          <source>Defaults to &lt;code&gt;null&lt;/code&gt;. String to be used as a suffix for the generated Composer autoloader. When null a random one will be generated.</source>
          <target state="translated">기본값은 &lt;code&gt;null&lt;/code&gt; 입니다. 생성 된 Composer 오토로더의 접미사로 사용되는 문자열입니다. null의 경우, 임의의 것이 생성됩니다.</target>
        </trans-unit>
        <trans-unit id="60e243a398baee85d82bccb057c4f127b94472a5" translate="yes" xml:space="preserve">
          <source>Defaults to &lt;code&gt;tar&lt;/code&gt;. Composer allows you to add a default archive format when the workflow needs to create a dedicated archiving format.</source>
          <target state="translated">기본값은 &lt;code&gt;tar&lt;/code&gt; 입니다. Composer를 사용하면 워크 플로에서 전용 보관 형식을 만들어야하는 경우 기본 보관 형식을 추가 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="1acd77b1fadbd3d095a10817a18f09ebd4b172ea" translate="yes" xml:space="preserve">
          <source>Defaults to &lt;code&gt;true&lt;/code&gt;. Composer allows repositories to define a notification URL, so that they get notified whenever a package from that repository is installed. This option allows you to disable that behaviour.</source>
          <target state="translated">기본값은 &lt;code&gt;true&lt;/code&gt; 입니다. Composer를 사용하면 리포지토리에서 알림 URL을 정의하여 해당 리포지토리의 패키지가 설치 될 때마다 알림을받을 수 있습니다. 이 옵션을 사용하면 해당 동작을 비활성화 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c3bffdb458c9ed8e8bfab8050af2b00220009ecb" translate="yes" xml:space="preserve">
          <source>Defaults to &lt;code&gt;true&lt;/code&gt;. If &lt;code&gt;false&lt;/code&gt;, the Composer autoloader will not be prepended to existing autoloaders. This is sometimes required to fix interoperability issues with other autoloaders.</source>
          <target state="translated">기본값은 &lt;code&gt;true&lt;/code&gt; 입니다. 경우 &lt;code&gt;false&lt;/code&gt; , 합성기 자동 로더는 기존의 자동 로더 앞에 추가되지 않습니다. 다른 오토로더와의 상호 운용성 문제를 해결하기 위해 때때로 필요합니다.</target>
        </trans-unit>
        <trans-unit id="cfb2e70db979f856e068496117ba528fd9004761" translate="yes" xml:space="preserve">
          <source>Defaults to &lt;code&gt;true&lt;/code&gt;. If &lt;code&gt;false&lt;/code&gt;, the OAuth tokens created to access the github API will have a date instead of the machine hostname.</source>
          <target state="translated">기본값은 &lt;code&gt;true&lt;/code&gt; 입니다. &lt;code&gt;false&lt;/code&gt; 인 경우 github API에 액세스하기 위해 생성 된 OAuth 토큰은 시스템 호스트 이름 대신 날짜를 갖습니다.</target>
        </trans-unit>
        <trans-unit id="5b6db4727e51acd66e5b8e2f9c957b5e19bbeb8f" translate="yes" xml:space="preserve">
          <source>Defaults to &lt;code&gt;true&lt;/code&gt;. If set to &lt;code&gt;false&lt;/code&gt;, Composer will not create &lt;code&gt;.htaccess&lt;/code&gt; files in the composer home, cache, and data directories.</source>
          <target state="translated">기본값은 &lt;code&gt;true&lt;/code&gt; 입니다. &lt;code&gt;false&lt;/code&gt; 로 설정 되면 Composer는 작성기 홈, 캐시 및 데이터 디렉토리에 &lt;code&gt;.htaccess&lt;/code&gt; 파일을 작성하지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="0cdb650038d31ec6dc4e1dedd307018f52f284c6" translate="yes" xml:space="preserve">
          <source>Defaults to &lt;code&gt;true&lt;/code&gt;. If set to true only HTTPS URLs are allowed to be downloaded via Composer. If you really absolutely need HTTP access to something then you can disable it, but using &lt;a href=&quot;https://letsencrypt.org/&quot;&gt;Let's Encrypt&lt;/a&gt; to get a free SSL certificate is generally a better alternative.</source>
          <target state="translated">기본값은 &lt;code&gt;true&lt;/code&gt; 입니다. true로 설정하면 Composer를 통해 HTTPS URL 만 다운로드 할 수 있습니다. 무언가에 대한 HTTP 액세스가 정말로 필요한 경우 비활성화 할 수 있지만 &lt;a href=&quot;https://letsencrypt.org/&quot;&gt;Let 's Encrypt&lt;/a&gt; 를 사용하여 무료 SSL 인증서를 얻는 것이 일반적으로 더 나은 대안입니다.</target>
        </trans-unit>
        <trans-unit id="3232c38a06afd2f3ded8a9bcb42d70f35b1c02b1" translate="yes" xml:space="preserve">
          <source>Defaults to &lt;code&gt;true&lt;/code&gt;. Similar to the &lt;code&gt;no-api&lt;/code&gt; key on a specific repository, setting &lt;code&gt;use-github-api&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt; will define the global behavior for all GitHub repositories to clone the repository as it would with any other git repository instead of using the GitHub API. But unlike using the &lt;code&gt;git&lt;/code&gt; driver directly, Composer will still attempt to use GitHub's zip files.</source>
          <target state="translated">기본값은 &lt;code&gt;true&lt;/code&gt; 입니다. 특정 리포지토리 의 &lt;code&gt;no-api&lt;/code&gt; 키 와 유사하게 &lt;code&gt;use-github-api&lt;/code&gt; 를 &lt;code&gt;false&lt;/code&gt; 로 설정 하면 모든 GitHub 리포지토리가 GitHub API를 사용하는 대신 다른 git 리포지토리와 마찬가지로 리포지토리를 복제하는 전역 동작을 정의합니다. 그러나 &lt;code&gt;git&lt;/code&gt; 드라이버를 직접 사용하는 것과 달리 Composer는 여전히 GitHub의 zip 파일을 사용하려고 시도합니다.</target>
        </trans-unit>
        <trans-unit id="d8e47ec67b9cb40ae6122f45c7a5df56f0a3781f" translate="yes" xml:space="preserve">
          <source>Defaults to &lt;code&gt;vendor/bin&lt;/code&gt;. If a project includes binaries, they will be symlinked into this directory.</source>
          <target state="translated">&lt;code&gt;vendor/bin&lt;/code&gt; 의 기본값 입니다. 프로젝트에 바이너리가 포함되어 있으면이 디렉토리로 심볼릭 링크됩니다.</target>
        </trans-unit>
        <trans-unit id="5334cea41c645eb8c9b207fb529f60e8436e4960" translate="yes" xml:space="preserve">
          <source>Defaults to &lt;code&gt;vendor&lt;/code&gt;. You can install dependencies into a different directory if you want to. &lt;code&gt;$HOME&lt;/code&gt; and &lt;code&gt;~&lt;/code&gt; will be replaced by your home directory's path in vendor-dir and all &lt;code&gt;*-dir&lt;/code&gt; options below.</source>
          <target state="translated">기본값은 &lt;code&gt;vendor&lt;/code&gt; 입니다. 원하는 경우 종속성을 다른 디렉토리에 설치할 수 있습니다. &lt;code&gt;$HOME&lt;/code&gt; 및 &lt;code&gt;~&lt;/code&gt; 는 vendor-dir의 홈 디렉토리 경로와 아래의 모든 &lt;code&gt;*-dir&lt;/code&gt; 옵션 으로 대체됩니다 .</target>
        </trans-unit>
        <trans-unit id="83771af0d9e990cfd4209b40879c5dd720b86a4b" translate="yes" xml:space="preserve">
          <source>Defaults to false.</source>
          <target state="translated">기본값은 false입니다.</target>
        </trans-unit>
        <trans-unit id="71c9fdaea74e5c44ac9fb6140d13ce5d2d247244" translate="yes" xml:space="preserve">
          <source>Defines the installation target.</source>
          <target state="translated">설치 대상을 정의합니다.</target>
        </trans-unit>
        <trans-unit id="2e345d151e8d839841cb86b04d07be9401525be5" translate="yes" xml:space="preserve">
          <source>Defining scripts</source>
          <target state="translated">스크립트 정의</target>
        </trans-unit>
        <trans-unit id="50fbc17151272b6e3055d5b3153f9c497974382b" translate="yes" xml:space="preserve">
          <source>Degraded Mode</source>
          <target state="translated">저하 된 모드</target>
        </trans-unit>
        <trans-unit id="c3af5c8d633c065338498aeafc39df57df28dc70" translate="yes" xml:space="preserve">
          <source>Deletes all content from Composer's cache directories.</source>
          <target state="translated">Composer의 캐시 디렉토리에서 모든 컨텐츠를 삭제합니다.</target>
        </trans-unit>
        <trans-unit id="9079efef93a26b3b473c6cb3d20683ad6140b067" translate="yes" xml:space="preserve">
          <source>Dependency management</source>
          <target state="translated">의존성 관리</target>
        </trans-unit>
        <trans-unit id="5fd002d42b32b03691630ef9a99e8b355e766c30" translate="yes" xml:space="preserve">
          <source>Depending on the &lt;a href=&quot;#event-names&quot;&gt;script types&lt;/a&gt; you will get various event subclasses containing various getters with relevant data and associated objects:</source>
          <target state="translated">&lt;a href=&quot;#event-names&quot;&gt;스크립트 유형&lt;/a&gt; 에 따라 관련 데이터 및 관련 객체와 함께 다양한 getter를 포함하는 다양한 이벤트 서브 클래스가 제공됩니다.</target>
        </trans-unit>
        <trans-unit id="011df189338d66155256f1d43e14a60a54f15106" translate="yes" xml:space="preserve">
          <source>Dev dependencies are packaged only if the &lt;code&gt;require-dev-dependencies&lt;/code&gt; parameter is set to true.</source>
          <target state="translated">dev 종속성은 &lt;code&gt;require-dev-dependencies&lt;/code&gt; 매개 변수가 true로 설정된 경우에만 패키지됩니다 .</target>
        </trans-unit>
        <trans-unit id="c883fbe88c32f0f5cf075f3503ad2cdcf1f5bad7" translate="yes" xml:space="preserve">
          <source>Disable IPv6 on that device (in this case &quot;Wi-Fi&quot;):</source>
          <target state="translated">해당 장치에서 IPv6을 비활성화합니다 (이 경우 &quot;Wi-Fi&quot;).</target>
        </trans-unit>
        <trans-unit id="a84f03bb4b91183eed6a5128fa8833cc9d74b1bc" translate="yes" xml:space="preserve">
          <source>Disabling Packagist.org</source>
          <target state="translated">Packagist.org 비활성화</target>
        </trans-unit>
        <trans-unit id="9e4ca2d79673bd28c9455522fb4e74a264f7d301" translate="yes" xml:space="preserve">
          <source>Double-check you &lt;strong&gt;don't have typos&lt;/strong&gt; in your &lt;code&gt;composer.json&lt;/code&gt; or repository branches and tag names.</source>
          <target state="translated">당신이 다시 확인 &lt;strong&gt;오타가없는&lt;/strong&gt; 당신의 &lt;code&gt;composer.json&lt;/code&gt; 또는 저장소 나뭇 가지와 태그 이름을.</target>
        </trans-unit>
        <trans-unit id="5e0b4ddd148deee1125634df43eb708e2bea6a20" translate="yes" xml:space="preserve">
          <source>Download and run &lt;a href=&quot;https://getcomposer.org/Composer-Setup.exe&quot;&gt;Composer-Setup.exe&lt;/a&gt;. It will install the latest Composer version and set up your PATH so that you can call &lt;code&gt;composer&lt;/code&gt; from any directory in your command line.</source>
          <target state="translated">&lt;a href=&quot;https://getcomposer.org/Composer-Setup.exe&quot;&gt;Composer-Setup.exe를&lt;/a&gt; 다운로드하여 실행하십시오 . 최신 Composer 버전을 설치하고 PATH를 설정 하여 명령 행의 모든 ​​디렉토리에서 &lt;code&gt;composer&lt;/code&gt; 를 호출 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="900b6536438229ef107bd7f67b2de2a927b64d57" translate="yes" xml:space="preserve">
          <source>Downloading the Composer Executable</source>
          <target state="translated">Composer 실행 파일 다운로드</target>
        </trans-unit>
        <trans-unit id="a862c2b21b5e1337de2b76d5e43ae1375117d34d" translate="yes" xml:space="preserve">
          <source>Downloads</source>
          <target state="translated">Downloads</target>
        </trans-unit>
        <trans-unit id="b4086a63ae25cf6bb443162780d2074dca067ddd" translate="yes" xml:space="preserve">
          <source>Due to some intermittent issues on Travis and other systems, we introduced a degraded network mode which helps Composer finish successfully but disables a few optimizations. This is enabled automatically when an issue is first detected. If you see this issue sporadically you probably don't have to worry (a slow or overloaded network can also cause those time outs), but if it appears repeatedly you might want to look at the options below to identify and resolve it.</source>
          <target state="translated">Travis 및 기타 시스템에서 간헐적으로 발생하는 일부 문제로 인해 Composer가 성공적으로 완료하는 데 도움이되는 몇 가지 최적화를 비활성화하는 저하 된 네트워크 모드가 도입되었습니다. 문제가 처음 감지되면 자동으로 활성화됩니다. 이 문제가 산발적으로 발생하는 경우 걱정할 필요가 없습니다 (느리거나 과부하 된 네트워크로 인해 시간 초과가 발생할 수 있음). 반복적으로 나타나는 경우 아래 옵션을 확인하여 문제를 식별 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b28903ed833112745caa96d6b9dc6663bdcf8d57" translate="yes" xml:space="preserve">
          <source>Each author object can have following properties:</source>
          <target state="translated">각 작성자 개체는 다음과 같은 속성을 가질 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="65809a0834cd6f2253e992b6ec06734d4cad1432" translate="yes" xml:space="preserve">
          <source>Each zip artifact is a ZIP archive with &lt;code&gt;composer.json&lt;/code&gt; in root folder:</source>
          <target state="translated">각 zip 아티팩트는 루트 폴더에 &lt;code&gt;composer.json&lt;/code&gt; 이있는 ZIP 아카이브입니다 .</target>
        </trans-unit>
        <trans-unit id="265ef52f371f285cd7bba79de0137ca6283eff5c" translate="yes" xml:space="preserve">
          <source>Either way, running &lt;code&gt;install&lt;/code&gt; when a &lt;code&gt;composer.lock&lt;/code&gt; file is present resolves and installs all dependencies that you listed in &lt;code&gt;composer.json&lt;/code&gt;, but Composer uses the exact versions listed in &lt;code&gt;composer.lock&lt;/code&gt; to ensure that the package versions are consistent for everyone working on your project. As a result you will have all dependencies requested by your &lt;code&gt;composer.json&lt;/code&gt; file, but they may not all be at the very latest available versions (some of the dependencies listed in the &lt;code&gt;composer.lock&lt;/code&gt; file may have released newer versions since the file was created). This is by design, it ensures that your project does not break because of unexpected changes in dependencies.</source>
          <target state="translated">어느 쪽이든, 실행 &lt;code&gt;install&lt;/code&gt; 때 &lt;code&gt;composer.lock&lt;/code&gt; 의 파일이 존재 결의이며 나열하는 모든 종속성을 설치 &lt;code&gt;composer.json&lt;/code&gt; 을 하지만, 작곡가가에 나와있는 정확한 버전 사용 &lt;code&gt;composer.lock&lt;/code&gt; 를 패키지 버전은 모든 사람의 작업에 대한 일관성을 보장하기 위해 계획. 결과적으로 &lt;code&gt;composer.json&lt;/code&gt; 파일에 의해 요청 된 모든 종속성이 있지만, 모두 최신 버전이 아닐 수도 있습니다 ( &lt;code&gt;composer.lock&lt;/code&gt; 파일에 나열된 일부 종속성 은 파일이 작성된 후 최신 버전을 릴리스했을 수 있습니다) ). 이것은 의도적으로 설계된 것으로, 예기치 않은 종속성 변경으로 인해 프로젝트가 중단되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="605308caa7f206b2f491e248ad63cb440939faac" translate="yes" xml:space="preserve">
          <source>Enables you to declare the libraries you depend on.</source>
          <target state="translated">의존하는 라이브러리를 선언 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="cd95372241a5c7be4433dcc726965658231ddc53" translate="yes" xml:space="preserve">
          <source>Enabling this automatically enables Level 1 class map optimizations.</source>
          <target state="translated">이를 활성화하면 레벨 1 클래스 맵 최적화가 자동으로 활성화됩니다.</target>
        </trans-unit>
        <trans-unit id="cf0fbef1f216c16cf5e3f84a56150aa6f8f0e4f5" translate="yes" xml:space="preserve">
          <source>Ensure you're &lt;strong&gt;installing vendors straight from your &lt;code&gt;composer.json&lt;/code&gt;&lt;/strong&gt; via &lt;code&gt;rm -rf vendor &amp;amp;&amp;amp; composer update -v&lt;/code&gt; when troubleshooting, excluding any possible interferences with existing vendor installations or &lt;code&gt;composer.lock&lt;/code&gt; entries.</source>
          <target state="translated">기존 공급 업체 설치 또는 &lt;code&gt;composer.lock&lt;/code&gt; 항목 과의 간섭을 배제하고 문제 해결시 &lt;code&gt;rm -rf vendor &amp;amp;&amp;amp; composer update -v&lt;/code&gt; 를 통해 &lt;strong&gt; &lt;code&gt;composer.json&lt;/code&gt; &lt;/strong&gt;&lt;strong&gt; 에서 직접 공급 업체를 설치&lt;/strong&gt; 하고 있는지 확인하십시오 .</target>
        </trans-unit>
        <trans-unit id="6564e88a14f1ab08cd478fc47de541aa22aa3f50" translate="yes" xml:space="preserve">
          <source>Enter aliases.</source>
          <target state="translated">별명을 입력하십시오.</target>
        </trans-unit>
        <trans-unit id="1173b2e11bd16e5dc36c119a4b84f02be11626b5" translate="yes" xml:space="preserve">
          <source>Environment variables</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a316cddac25605e48610f8a6dd964f873589b328" translate="yes" xml:space="preserve">
          <source>Event Handler</source>
          <target state="translated">이벤트 핸들러</target>
        </trans-unit>
        <trans-unit id="e83eedb3b5bebe9166bb9a244d25cc00a3a8e7b9" translate="yes" xml:space="preserve">
          <source>Event classes</source>
          <target state="translated">이벤트 클래스</target>
        </trans-unit>
        <trans-unit id="8cd8e98fdf756acb328b050073c765756bdae804" translate="yes" xml:space="preserve">
          <source>Event names</source>
          <target state="translated">이벤트 이름</target>
        </trans-unit>
        <trans-unit id="b0a3cebb28f832f0854d2e85130ab1964d9ead5a" translate="yes" xml:space="preserve">
          <source>Every Custom Installer defines which &lt;a href=&quot;../04-schema.md#type&quot;&gt;type&lt;/a&gt; string it will recognize. Once recognized it will completely override the default installer and only apply its own logic.</source>
          <target state="translated">모든 사용자 정의 설치 프로그램은 인식 할 &lt;a href=&quot;../04-schema.md#type&quot;&gt;유형&lt;/a&gt; 문자열을 정의합니다 . 인식되면 기본 설치 프로그램을 완전히 무시하고 자체 논리 만 적용합니다.</target>
        </trans-unit>
        <trans-unit id="3b00106ed1cf4f1597a65d595e1e958593489c86" translate="yes" xml:space="preserve">
          <source>Every plugin has to supply a class which implements the &lt;a href=&quot;https://github.com/composer/composer/blob/master/src/Composer/Plugin/PluginInterface.php&quot;&gt;&lt;code&gt;Composer\Plugin\PluginInterface&lt;/code&gt;&lt;/a&gt;. The &lt;code&gt;activate()&lt;/code&gt; method of the plugin is called after the plugin is loaded and receives an instance of &lt;a href=&quot;https://github.com/composer/composer/blob/master/src/Composer/Composer.php&quot;&gt;&lt;code&gt;Composer\Composer&lt;/code&gt;&lt;/a&gt; as well as an instance of &lt;a href=&quot;https://github.com/composer/composer/blob/master/src/Composer/IO/IOInterface.php&quot;&gt;&lt;code&gt;Composer\IO\IOInterface&lt;/code&gt;&lt;/a&gt;. Using these two objects all configuration can be read and all internal objects and state can be manipulated as desired.</source>
          <target state="translated">모든 플러그인은 &lt;a href=&quot;https://github.com/composer/composer/blob/master/src/Composer/Plugin/PluginInterface.php&quot;&gt; &lt;code&gt;Composer\Plugin\PluginInterface&lt;/code&gt; &lt;/a&gt; 를 구현하는 클래스를 제공해야합니다 . 플러그인 의 &lt;code&gt;activate()&lt;/code&gt; 메소드는 플러그인이로드 된 후 호출 되며 &lt;a href=&quot;https://github.com/composer/composer/blob/master/src/Composer/IO/IOInterface.php&quot;&gt; &lt;code&gt;Composer\IO\IOInterface&lt;/code&gt; &lt;/a&gt; 인스턴스뿐만 아니라 &lt;a href=&quot;https://github.com/composer/composer/blob/master/src/Composer/Composer.php&quot;&gt; &lt;code&gt;Composer\Composer&lt;/code&gt; &lt;/a&gt; 인스턴스를 수신합니다 . 이 두 개체를 사용하면 모든 구성을 읽고 모든 내부 개체와 상태를 원하는대로 조작 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2f6f4fb775c6074126c5e65c6480a9fa3f801538" translate="yes" xml:space="preserve">
          <source>Every project is a package</source>
          <target state="translated">모든 프로젝트는 패키지입니다</target>
        </trans-unit>
        <trans-unit id="40a9ee12036124d5e9bb9410c6341294eeb32ac9" translate="yes" xml:space="preserve">
          <source>Exact Version Constraint</source>
          <target state="translated">정확한 버전 제약</target>
        </trans-unit>
        <trans-unit id="dfc04035aec2660a76d7a80845c35f65055c4698" translate="yes" xml:space="preserve">
          <source>Exactly the same solution allows you to work with your private repositories at GitHub and BitBucket:</source>
          <target state="translated">정확히 동일한 솔루션을 사용하면 GitHub 및 BitBucket에서 개인 리포지토리를 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ca8c81a380f09ae6e9cabe40e437bc7578ea021b" translate="yes" xml:space="preserve">
          <source>Example assuming you patched monolog to fix a bug in the &lt;code&gt;bugfix&lt;/code&gt; branch:</source>
          <target state="translated">버그 &lt;code&gt;bugfix&lt;/code&gt; 지점 의 버그를 수정하기 위해 모노로그를 패치했다고 가정하는 예 :</target>
        </trans-unit>
        <trans-unit id="efc96200b84684c798d80db2272bf506435fe077" translate="yes" xml:space="preserve">
          <source>Example using &lt;code&gt;pear2.php.net&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;pear2.php.net&lt;/code&gt; 사용 예 :</target>
        </trans-unit>
        <trans-unit id="b37796feda26a9a236e4716df885cb8dfcffeeef" translate="yes" xml:space="preserve">
          <source>Example using SSL/TLS (HTTPS) using a client certificate:</source>
          <target state="translated">클라이언트 인증서를 사용하는 SSL / TLS (HTTPS)를 사용하는 예 :</target>
        </trans-unit>
        <trans-unit id="ed099e0a0bc7609b0d797a168a09f7f13ae1f005" translate="yes" xml:space="preserve">
          <source>Example using a custom HTTP Header field for token authentication:</source>
          <target state="translated">토큰 인증에 사용자 정의 HTTP 헤더 필드를 사용하는 예 :</target>
        </trans-unit>
        <trans-unit id="d1e9e1a0132a5a98e967e64001753f55b04b2e91" translate="yes" xml:space="preserve">
          <source>Example using a custom repository using SSH (requires the SSH2 PECL extension):</source>
          <target state="translated">SSH를 사용하여 사용자 정의 저장소를 사용하는 예 (SSH2 PECL 확장 필요) :</target>
        </trans-unit>
        <trans-unit id="c63737abd7347a7ae582cb9fbdf37d6c0e5b251e" translate="yes" xml:space="preserve">
          <source>Example:</source>
          <target state="translated">Example:</target>
        </trans-unit>
        <trans-unit id="e7d7b95925251198ad685f710f5a28f508b6deb1" translate="yes" xml:space="preserve">
          <source>Example: &lt;code&gt;1.0 - 2.0&lt;/code&gt;</source>
          <target state="translated">예 : &lt;code&gt;1.0 - 2.0&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="73a452712ad40d50f2c244207f8b955ab4362a02" translate="yes" xml:space="preserve">
          <source>Example: &lt;code&gt;1.0.*&lt;/code&gt;</source>
          <target state="translated">예 : &lt;code&gt;1.0.*&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e47f2f9866593afe4443a3d466b58b1244e14bc0" translate="yes" xml:space="preserve">
          <source>Example: &lt;code&gt;1.0.2&lt;/code&gt;</source>
          <target state="translated">예 : &lt;code&gt;1.0.2&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="1e4c95e3482a8e429cb00f5067fe9d37f08a1145" translate="yes" xml:space="preserve">
          <source>Example: &lt;code&gt;^1.2.3&lt;/code&gt;</source>
          <target state="translated">예 : &lt;code&gt;^1.2.3&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="4bc8d64f1b4347ae1c27dcaf6ec15d5e34b16442" translate="yes" xml:space="preserve">
          <source>Example: &lt;code&gt;~1.2&lt;/code&gt;</source>
          <target state="translated">예 : &lt;code&gt;~1.2&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="eace9adaa2d97ffb2d799bb6d7c05a809674fc00" translate="yes" xml:space="preserve">
          <source>Example: A &lt;code&gt;prefix-url&lt;/code&gt; of &lt;code&gt;https://my-bucket.s3.amazonaws.com&lt;/code&gt; (and &lt;code&gt;directory&lt;/code&gt; set to &lt;code&gt;dist&lt;/code&gt;) creates download URLs which look like the following: &lt;code&gt;https://my-bucket.s3.amazonaws.com/dist/vendor-package-version-ref.zip&lt;/code&gt;.</source>
          <target state="translated">예 :의 &lt;code&gt;prefix-url&lt;/code&gt; 의 &lt;code&gt;https://my-bucket.s3.amazonaws.com&lt;/code&gt; (그리고 &lt;code&gt;directory&lt;/code&gt; 로 설정 &lt;code&gt;dist&lt;/code&gt; ) 다운로드 URL을 생성하는 다음과 같이 : &lt;code&gt;https://my-bucket.s3.amazonaws.com/dist/vendor-package-version-ref.zip&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="fb3447b632f6a431215776dcf254a01001a40c4f" translate="yes" xml:space="preserve">
          <source>Examples:</source>
          <target state="translated">Examples:</target>
        </trans-unit>
        <trans-unit id="57df4f096a0336166a8449200edbb838aaf3b1df" translate="yes" xml:space="preserve">
          <source>Exclude files from classmaps</source>
          <target state="translated">클래스 맵에서 파일 제외</target>
        </trans-unit>
        <trans-unit id="7576ea680485379c7e63fcdc20bd70360a432244" translate="yes" xml:space="preserve">
          <source>Executes a vendored binary/script. You can execute any command and this will ensure that the Composer bin-dir is pushed on your PATH before the command runs.</source>
          <target state="translated">공급 업체 바이너리 / 스크립트를 실행합니다. 모든 명령을 실행할 수 있으며 이는 명령이 실행되기 전에 Composer bin-dir이 PATH에서 푸시되도록합니다.</target>
        </trans-unit>
        <trans-unit id="7f5075d30198af47ebe4e9d8043055792cdc7e19" translate="yes" xml:space="preserve">
          <source>Executing PHP scripts</source>
          <target state="translated">PHP 스크립트 실행</target>
        </trans-unit>
        <trans-unit id="ab9dcd4a0295bd5e2c0f799fd9becca5752365e8" translate="yes" xml:space="preserve">
          <source>FAQs</source>
          <target state="translated">FAQs</target>
        </trans-unit>
        <trans-unit id="6ce6c512ea433a7fc5c8841628e7696cd0ff7f2b" translate="yes" xml:space="preserve">
          <source>Files</source>
          <target state="translated">Files</target>
        </trans-unit>
        <trans-unit id="e4fc07f498212de95ed124da2a8d8c1a4b04067e" translate="yes" xml:space="preserve">
          <source>Finds out which versions of which packages can and need to be installed, and installs them (meaning it downloads them into your project).</source>
          <target state="translated">어떤 버전의 패키지를 설치해야하는지 찾아서 설치합니다 (프로젝트로 다운로드한다는 의미).</target>
        </trans-unit>
        <trans-unit id="b6ac8873357db35b4041f9990002e5f9a1f8df5e" translate="yes" xml:space="preserve">
          <source>For &lt;code&gt;example.org/packages.json&lt;/code&gt; containing a &lt;code&gt;monolog/monolog&lt;/code&gt; package, this would send a &lt;code&gt;POST&lt;/code&gt; request to &lt;code&gt;example.org/downloads/&lt;/code&gt; with following JSON request body:</source>
          <target state="translated">예를 들어 &lt;code&gt;monolog/monolog&lt;/code&gt; 패키지를 포함하는 &lt;code&gt;example.org/packages.json&lt;/code&gt; 은 &lt;code&gt;POST&lt;/code&gt; 요청을 다음 JSON 요청 본문과 함께 &lt;code&gt;example.org/downloads/&lt;/code&gt; 에 보냅니다 .</target>
        </trans-unit>
        <trans-unit id="7ed04b2021243ae78807bf0ec583c388ceaf5701" translate="yes" xml:space="preserve">
          <source>For a package, when there is a choice between licenses (&quot;disjunctive license&quot;), multiple can be specified as array.</source>
          <target state="translated">패키지의 경우 라이센스 ( &quot;분리 라이센스&quot;) 중에서 선택할 수있는 경우 여러 개를 배열로 지정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f0c87d2954978715a0a6ce7368978dfa4b0140b7" translate="yes" xml:space="preserve">
          <source>For any given event:</source>
          <target state="translated">주어진 이벤트에 대해 :</target>
        </trans-unit>
        <trans-unit id="fa042e578e268745d2b0d30c073540804c66196f" translate="yes" xml:space="preserve">
          <source>For closed-source software, you may use &lt;code&gt;&quot;proprietary&quot;&lt;/code&gt; as the license identifier.</source>
          <target state="translated">비공개 소스 소프트웨어의 경우 &lt;code&gt;&quot;proprietary&quot;&lt;/code&gt; 을 라이센스 식별자로 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="4abb367a965c9af766137da6a7fa4e637665b385" translate="yes" xml:space="preserve">
          <source>For example &lt;code&gt;composer run-script post-install-cmd&lt;/code&gt; will run any &lt;strong&gt;post-install-cmd&lt;/strong&gt; scripts and &lt;a href=&quot;plugins.md&quot;&gt;plugins&lt;/a&gt; that have been defined.</source>
          <target state="translated">예를 들어 &lt;code&gt;composer run-script post-install-cmd&lt;/code&gt; 는 정의 된 모든 &lt;strong&gt;post-install-cmd&lt;/strong&gt; 스크립트 및 &lt;a href=&quot;plugins.md&quot;&gt;플러그인&lt;/a&gt; 을 실행합니다 .</target>
        </trans-unit>
        <trans-unit id="39494316aea08c0ac4d476c250a86d97b773bbe8" translate="yes" xml:space="preserve">
          <source>For example let's assume you have a few packages you want to reuse across your company but don't really want to open-source. You would first define a Satis configuration: a json file with an arbitrary name that lists your curated &lt;a href=&quot;../05-repositories.md&quot;&gt;repositories&lt;/a&gt;.</source>
          <target state="translated">예를 들어 회사 전체에서 재사용하고 싶지만 실제로는 오픈 소스를 원하지 않는 패키지가 있다고 가정 해 봅시다. 먼저 Satis 구성을 정의 &lt;a href=&quot;../05-repositories.md&quot;&gt;합니다&lt;/a&gt; . 큐레이터 된 저장소 를 나열하는 임의의 이름을 가진 json 파일입니다 .</target>
        </trans-unit>
        <trans-unit id="059c3e8cce263b2945a18ac90b2637e10a8026b1" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="translated">예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="5e34a2027562a942c714f5bde8188a6e49c2c032" translate="yes" xml:space="preserve">
          <source>For hosting your own packages, a native &lt;code&gt;composer&lt;/code&gt; type of repository is recommended, which provides the best performance.</source>
          <target state="translated">자체 패키지를 호스팅 하려면 최상의 성능을 제공 하는 기본 &lt;code&gt;composer&lt;/code&gt; 유형의 저장소가 권장됩니다.</target>
        </trans-unit>
        <trans-unit id="d8287a23dda68d844acc73a7c1845b7f6a6d6172" translate="yes" xml:space="preserve">
          <source>For instance, if you have the following directory structure in your repository:</source>
          <target state="translated">예를 들어, 저장소에 다음 디렉토리 구조가있는 경우 :</target>
        </trans-unit>
        <trans-unit id="62abc70e0e723f10b90009a677b8dfeb7833b48e" translate="yes" xml:space="preserve">
          <source>For libraries that specify autoload information, Composer generates a &lt;code&gt;vendor/autoload.php&lt;/code&gt; file. You can simply include this file and start using the classes that those libraries provide without any extra work:</source>
          <target state="translated">자동로드 정보를 지정하는 라이브러리의 경우 Composer는 &lt;code&gt;vendor/autoload.php&lt;/code&gt; 파일을 생성 합니다. 이 파일을 포함시키고 추가 작업없이 해당 라이브러리가 제공하는 클래스를 사용하여 시작할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="bb5dcb61d9064db38c175a51aa16cae4d7d2dd53" translate="yes" xml:space="preserve">
          <source>For more details on how package repositories work and what other types are available, see &lt;a href=&quot;05-repositories.md&quot;&gt;Repositories&lt;/a&gt;.</source>
          <target state="translated">패키지 리포지토리 작동 방식 및 사용 가능한 다른 유형에 대한 자세한 내용은 &lt;a href=&quot;05-repositories.md&quot;&gt;리포지토리를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="b3185000751c25fc4e13ea74bb77692b36565bc4" translate="yes" xml:space="preserve">
          <source>For more information on any of these, see &lt;a href=&quot;05-repositories.md&quot;&gt;Repositories&lt;/a&gt;.</source>
          <target state="translated">이들에 대한 자세한 정보는 &lt;a href=&quot;05-repositories.md&quot;&gt;저장소를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="8dc45732f77bea68f0e8ff8a0b47988252184c97" translate="yes" xml:space="preserve">
          <source>For more on how Composer treats tags and branches and how it resolves package version constraints, read the &lt;a href=&quot;articles/versions.md&quot;&gt;versions&lt;/a&gt; article.</source>
          <target state="translated">Composer가 태그 및 분기를 처리하는 방법 및 패키지 버전 제약 조건을 해결하는 방법에 대한 자세한 내용은 &lt;a href=&quot;articles/versions.md&quot;&gt;버전&lt;/a&gt; 기사를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="c3779f01dd2f4be8d6240102b16d51f8e32c7471" translate="yes" xml:space="preserve">
          <source>For our basic usage introduction, we will be installing &lt;code&gt;monolog/monolog&lt;/code&gt;, a logging library. If you have not yet installed Composer, refer to the &lt;a href=&quot;00-intro.md&quot;&gt;Intro&lt;/a&gt; chapter.</source>
          <target state="translated">기본 사용법 소개를 위해 로깅 라이브러리 인 &lt;code&gt;monolog/monolog&lt;/code&gt; 를 설치 합니다. Composer를 아직 설치하지 않은 경우 &lt;a href=&quot;00-intro.md&quot;&gt;소개&lt;/a&gt; 장을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="75e6d2b31cc97dd0197cef2e617f14aba33ae55a" translate="yes" xml:space="preserve">
          <source>For the binaries that a package defines directly, nothing happens.</source>
          <target state="translated">패키지가 직접 정의한 바이너리의 경우 아무 일도 일어나지 않습니다.</target>
        </trans-unit>
        <trans-unit id="8dfaefa87378cfa297ae6856b372ac1883972a68" translate="yes" xml:space="preserve">
          <source>For this reason, Composer offers a few strategies to optimize the autoloader.</source>
          <target state="translated">이러한 이유로 Composer는 오토로더를 최적화하기위한 몇 가지 전략을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="eec20781e79661edb638ee3edc392f4c97c44dd5" translate="yes" xml:space="preserve">
          <source>For this reason, you can alias packages in your &lt;code&gt;require&lt;/code&gt; and &lt;code&gt;require-dev&lt;/code&gt; fields. Let's say you found a bug in the &lt;code&gt;monolog/monolog&lt;/code&gt; package. You cloned &lt;a href=&quot;https://github.com/Seldaek/monolog&quot;&gt;Monolog&lt;/a&gt; on GitHub and fixed the issue in a branch named &lt;code&gt;bugfix&lt;/code&gt;. Now you want to install that version of monolog in your local project.</source>
          <target state="translated">이러한 이유로 &lt;code&gt;require&lt;/code&gt; 및 &lt;code&gt;require-dev&lt;/code&gt; 필드 에서 패키지 별명을 지정할 수 있습니다. &lt;code&gt;monolog/monolog&lt;/code&gt; 패키지 에서 버그를 발견했다고 가정 해 봅시다 . GitHub에서 &lt;a href=&quot;https://github.com/Seldaek/monolog&quot;&gt;Monolog&lt;/a&gt; 를 복제 하고 &lt;code&gt;bugfix&lt;/code&gt; 라는 지점에서 문제를 해결했습니다 . 이제 로컬 프로젝트에 해당 버전의 모노로그를 설치하려고합니다.</target>
        </trans-unit>
        <trans-unit id="9d240f8dbe6b660fdb55b1b62de641dcc119e2e7" translate="yes" xml:space="preserve">
          <source>For your library you may commit the &lt;code&gt;composer.lock&lt;/code&gt; file if you want to. This can help your team to always test against the same dependency versions. However, this lock file will not have any effect on other projects that depend on it. It only has an effect on the main project.</source>
          <target state="translated">라이브러리의 경우 원하는 경우 &lt;code&gt;composer.lock&lt;/code&gt; 파일을 커밋 할 수 있습니다 . 이를 통해 팀은 항상 동일한 종속성 버전에 대해 테스트 할 수 있습니다. 그러나이 잠금 파일은 종속 된 다른 프로젝트에는 영향을 미치지 않습니다. 메인 프로젝트에만 영향을 미칩니다.</target>
        </trans-unit>
        <trans-unit id="67ed2a0d1646a25e4e5c6357ab650cceede2463a" translate="yes" xml:space="preserve">
          <source>Fork the project, create a feature branch, and send us a pull request.</source>
          <target state="translated">프로젝트를 포크하고, 피처 브랜치를 만들고, 풀 요청을 보내십시오.</target>
        </trans-unit>
        <trans-unit id="e2ba7e21d0866d570745e0be2cd4ae1740b0c75b" translate="yes" xml:space="preserve">
          <source>Furthermore plugins may implement the &lt;a href=&quot;https://github.com/composer/composer/blob/master/src/Composer/EventDispatcher/EventSubscriberInterface.php&quot;&gt;&lt;code&gt;Composer\EventDispatcher\EventSubscriberInterface&lt;/code&gt;&lt;/a&gt; in order to have its event handlers automatically registered with the &lt;code&gt;EventDispatcher&lt;/code&gt; when the plugin is loaded.</source>
          <target state="translated">또한 플러그인은 플러그인이로드 될 때 이벤트 핸들러가 &lt;code&gt;EventDispatcher&lt;/code&gt; 에 자동으로 등록 되도록 &lt;a href=&quot;https://github.com/composer/composer/blob/master/src/Composer/EventDispatcher/EventSubscriberInterface.php&quot;&gt; &lt;code&gt;Composer\EventDispatcher\EventSubscriberInterface&lt;/code&gt; &lt;/a&gt; 를 구현할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="fb703587700452b28bfa08ef925463786dcb39c4" translate="yes" xml:space="preserve">
          <source>GPL-2.0-only / GPL-2.0-or-later</source>
          <target state="translated">GPL-2.0 전용 / GPL-2.0 이상</target>
        </trans-unit>
        <trans-unit id="4f6d1551c226b3db5d0a73f882940e4664405676" translate="yes" xml:space="preserve">
          <source>GPL-3.0-only / GPL-3.0-or-later</source>
          <target state="translated">GPL-3.0 전용 / GPL-3.0 이상</target>
        </trans-unit>
        <trans-unit id="9239ee2cda84eca4c3440e2a7b50148af67da3d4" translate="yes" xml:space="preserve">
          <source>General</source>
          <target state="translated">General</target>
        </trans-unit>
        <trans-unit id="01dde436c5bf40ebfa15e6a97edceace99a5403d" translate="yes" xml:space="preserve">
          <source>Get name of your network device:</source>
          <target state="translated">네트워크 장치의 이름을 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="7b97569b40d2f05a951d4cc330cbcfd7c88620a2" translate="yes" xml:space="preserve">
          <source>Git alternatives</source>
          <target state="translated">힘내 대안</target>
        </trans-unit>
        <trans-unit id="3379efac69c85d5a3a34d9e84195afe7e45df889" translate="yes" xml:space="preserve">
          <source>Git is not the only version control system supported by the VCS repository. The following are supported:</source>
          <target state="translated">Git은 VCS 저장소에서 지원하는 유일한 버전 제어 시스템이 아닙니다. 다음이 지원됩니다.</target>
        </trans-unit>
        <trans-unit id="97fa0a5d6f5cbf067a98b0bd198984e13706b234" translate="yes" xml:space="preserve">
          <source>Global Options</source>
          <target state="translated">글로벌 옵션</target>
        </trans-unit>
        <trans-unit id="5aebcb4070ba960a8a38b0cbb75dfb7c7ef36e09" translate="yes" xml:space="preserve">
          <source>Globally</source>
          <target state="translated">Globally</target>
        </trans-unit>
        <trans-unit id="40da55bdbda9f92b4cb162d0fa0d30ae87ad8e57" translate="yes" xml:space="preserve">
          <source>HTTP basic authentication</source>
          <target state="translated">HTTP 기본 인증</target>
        </trans-unit>
        <trans-unit id="bd035743983c709d15f86865690d660745bc99b2" translate="yes" xml:space="preserve">
          <source>HTTPS_PROXY_REQUEST_FULLURI</source>
          <target state="translated">HTTPS_PROXY_REQUEST_FULLURI</target>
        </trans-unit>
        <trans-unit id="37b7cecc73b4173370f09237f4290bf6c8d5a3c9" translate="yes" xml:space="preserve">
          <source>HTTP_PROXY_REQUEST_FULLURI</source>
          <target state="translated">HTTP_PROXY_REQUEST_FULLURI</target>
        </trans-unit>
        <trans-unit id="e627c1e3518e94d5aae9b3b933c59079e3fb4c7a" translate="yes" xml:space="preserve">
          <source>Handling private packages</source>
          <target state="translated">개인 패키지 처리</target>
        </trans-unit>
        <trans-unit id="64fcc7c4ab0402024824d129419bca4c329e16e2" translate="yes" xml:space="preserve">
          <source>Here is a minimal package definition:</source>
          <target state="translated">최소 패키지 정의는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="9623f75af0d8ab19c9cf3c45fafbbf6d16d1d8cc" translate="yes" xml:space="preserve">
          <source>Here is an example configuration, you see that it holds a few VCS repositories, but those could be any types of &lt;a href=&quot;../05-repositories.md&quot;&gt;repositories&lt;/a&gt;. Then it uses &lt;code&gt;&quot;require-all&quot;: true&lt;/code&gt; which selects all versions of all packages in the repositories you defined.</source>
          <target state="translated">다음은 구성 예입니다. VCS 리포지토리가 몇 개 있지만 모든 유형의 &lt;a href=&quot;../05-repositories.md&quot;&gt;리포지토리&lt;/a&gt; 가 될 수 있습니다 . 그런 다음 &lt;code&gt;&quot;require-all&quot;: true&lt;/code&gt; 를 사용하여 정의한 리포지토리에있는 모든 패키지의 모든 버전을 선택합니다.</target>
        </trans-unit>
        <trans-unit id="09f3dbbeaa3b1c6d87e5cac25a5fb203a0c173ad" translate="yes" xml:space="preserve">
          <source>Here is an example for the smarty template engine:</source>
          <target state="translated">smarty 템플릿 엔진의 예는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="ac8594886bfaef3d4a21e69ed81096539b2cedff" translate="yes" xml:space="preserve">
          <source>Here's a complete example:</source>
          <target state="translated">다음은 완전한 예입니다.</target>
        </trans-unit>
        <trans-unit id="733c1498f2b4229070221e228ebee2782a0bb81b" translate="yes" xml:space="preserve">
          <source>Hosting your own</source>
          <target state="translated">자신의 호스팅</target>
        </trans-unit>
        <trans-unit id="a1b8a37912007fc22004a1b7e2e6ef7f70f8a9db" translate="yes" xml:space="preserve">
          <source>How do I install Composer programmatically?</source>
          <target state="translated">프로그래밍 방식으로 Composer를 설치하려면 어떻게합니까?</target>
        </trans-unit>
        <trans-unit id="32b4c15f519c8cfc9fbaf27d93840a74834fb5b9" translate="yes" xml:space="preserve">
          <source>How do I install a package to a custom path for my framework?</source>
          <target state="translated">내 프레임 워크의 사용자 정의 경로에 패키지를 어떻게 설치합니까?</target>
        </trans-unit>
        <trans-unit id="76d4c5f8ba475f3a6f4ced76d79b3ccc79ab9f04" translate="yes" xml:space="preserve">
          <source>How do I install untrusted packages safely? Is it safe to run Composer as superuser or root?</source>
          <target state="translated">신뢰할 수없는 패키지를 안전하게 설치하려면 어떻게합니까? Composer를 수퍼 유저 또는 루트로 실행하는 것이 안전합니까?</target>
        </trans-unit>
        <trans-unit id="102fbd7c49585622551e497c9a5e68dde8d945d3" translate="yes" xml:space="preserve">
          <source>How is it defined?</source>
          <target state="translated">어떻게 정의 되나요?</target>
        </trans-unit>
        <trans-unit id="b015b20972be7789cbf4dd0ca63686c363187c6c" translate="yes" xml:space="preserve">
          <source>How to run it?</source>
          <target state="translated">그것을 실행하는 방법?</target>
        </trans-unit>
        <trans-unit id="67020c6d121c72562a74fdb6b4b5279456ecf8e7" translate="yes" xml:space="preserve">
          <source>Hyphenated Version Range ( - )</source>
          <target state="translated">하이픈 버전 범위 (-)</target>
        </trans-unit>
        <trans-unit id="576efc347180df74028853390e9844adb07ea6d9" translate="yes" xml:space="preserve">
          <source>I have a dependency which contains a &quot;repositories&quot; definition in its composer.json, but it seems to be ignored.</source>
          <target state="translated">composer.json에 &quot;리포지토리&quot;정의가 포함 된 종속성이 있지만 무시 된 것 같습니다.</target>
        </trans-unit>
        <trans-unit id="5afc80c8e1732662deb554c6e05c589ccaca1bd0" translate="yes" xml:space="preserve">
          <source>I have locked a dependency to a specific commit but get unexpected results.</source>
          <target state="translated">특정 커밋에 대한 종속성을 잠 갔지만 예기치 않은 결과가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="50ae4de91a28fad6ee03d5e34f4682e79a7025a7" translate="yes" xml:space="preserve">
          <source>IRC / mailing list</source>
          <target state="translated">IRC / 메일 링리스트</target>
        </trans-unit>
        <trans-unit id="2374cc06896a068605271a7e5fd9f58c772c9ea1" translate="yes" xml:space="preserve">
          <source>IRC channels are on irc.freenode.org: &lt;a href=&quot;irc://irc.freenode.org/composer&quot;&gt;#composer&lt;/a&gt; for users and &lt;a href=&quot;irc://irc.freenode.org/composer-dev&quot;&gt;#composer-dev&lt;/a&gt; for development.</source>
          <target state="translated">IRC 채널은 irc.freenode.org에 있습니다 : &lt;a href=&quot;irc://irc.freenode.org/composer&quot;&gt;#composer&lt;/a&gt; for users, &lt;a href=&quot;irc://irc.freenode.org/composer-dev&quot;&gt;# composer-dev&lt;/a&gt; for development.</target>
        </trans-unit>
        <trans-unit id="f0a12ce5c3c75ddf52de114d3d2a8f8d29349b20" translate="yes" xml:space="preserve">
          <source>If a package contains other scripts that are not needed by the package users (like build or compile scripts) that code should not be listed as a vendor binary.</source>
          <target state="translated">패키지 사용자가 필요하지 않은 다른 스크립트 (빌드 또는 컴파일 스크립트와 같은)가 패키지에 포함 된 경우 해당 코드는 공급 업체 바이너리로 표시되지 않아야합니다.</target>
        </trans-unit>
        <trans-unit id="c9878365edd01c34cda883058a9f9235932776b8" translate="yes" xml:space="preserve">
          <source>If anyone wants to require the latest &lt;code&gt;dev-master&lt;/code&gt;, they have a problem: Other packages may require &lt;code&gt;1.0.*&lt;/code&gt;, so requiring that dev version will lead to conflicts, since &lt;code&gt;dev-master&lt;/code&gt; does not match the &lt;code&gt;1.0.*&lt;/code&gt; constraint.</source>
          <target state="translated">누구든지 최신 &lt;code&gt;dev-master&lt;/code&gt; 가 필요하면 문제가 있습니다. 다른 패키지에는 &lt;code&gt;1.0.*&lt;/code&gt; 이 필요할 수 있으므로 &lt;code&gt;dev-master&lt;/code&gt; 가 &lt;code&gt;1.0.*&lt;/code&gt; 제약 조건 과 일치하지 않으므로 dev 버전이 필요하면 충돌이 발생할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="99d86305d22f8bb706853318ad611fc3e468676b" translate="yes" xml:space="preserve">
          <source>If cafile is not specified or if the certificate is not found there, the directory pointed to by capath is searched for a suitable certificate. capath must be a correctly hashed certificate directory.</source>
          <target state="translated">cafile을 지정하지 않거나 인증서를 찾을 수없는 경우, capath가 가리키는 디렉토리에서 적합한 인증서를 검색합니다. capath는 올바르게 해시 된 인증서 디렉토리 여야합니다.</target>
        </trans-unit>
        <trans-unit id="5f9bcad59c2f8e80c2013ea1b4e8ab33bd62738e" translate="yes" xml:space="preserve">
          <source>If composer shows proc_open() fork failed on some commands:</source>
          <target state="translated">composer가 일부 명령에서 proc_open () fork failed를 표시하는 경우 :</target>
        </trans-unit>
        <trans-unit id="2c991edee9aba048db8b1999d7c98f52a07f8f83" translate="yes" xml:space="preserve">
          <source>If multiple methods should be called, then an array of tuples can be attached to each event. The tuples do not need to include the priority. If it is omitted, it will default to 0.</source>
          <target state="translated">여러 메소드를 호출해야하는 경우 각 이벤트에 튜플 배열을 첨부 할 수 있습니다. 튜플은 우선 순위를 포함하지 않아도됩니다. 생략하면 기본값은 0입니다.</target>
        </trans-unit>
        <trans-unit id="1cc270b289ba799faf0a3f94cfd39eaf16dc0d41" translate="yes" xml:space="preserve">
          <source>If none of the above helped, please report the error.</source>
          <target state="translated">위의 방법 중 어느 것도 도움이되지 않으면 오류를보고하십시오.</target>
        </trans-unit>
        <trans-unit id="da92988a7e481bbe7ab895b51780cde0c69ae365" translate="yes" xml:space="preserve">
          <source>If one of your dependencies has a dependency on an unstable package you need to explicitly require it as well, along with its sufficient stability flag.</source>
          <target state="translated">의존성 중 하나가 불안정한 패키지에 의존하는 경우, 충분한 안정성 플래그와 함께 명시 적으로 요구해야합니다.</target>
        </trans-unit>
        <trans-unit id="652d81fbfa99ef96428ee35af1a0c5775df526f4" translate="yes" xml:space="preserve">
          <source>If other dependencies rely on the package you forked, it is possible to inline-alias it so that it matches a constraint that it otherwise would not. For more information &lt;a href=&quot;articles/aliases.md&quot;&gt;see the aliases article&lt;/a&gt;.</source>
          <target state="translated">다른 종속성이 사용자가 분기 한 패키지에 의존하는 경우 인라인 별명을 사용하여 그렇지 않은 제약 조건과 일치시킬 수 있습니다. 자세한 내용 &lt;a href=&quot;articles/aliases.md&quot;&gt;은 aliases article을 참조하십시오&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="9090b390f4e7f9e30dfd176510ae3dced3e642e3" translate="yes" xml:space="preserve">
          <source>If set to 1, this env changes the default path repository strategy to &lt;code&gt;mirror&lt;/code&gt; instead of &lt;code&gt;symlink&lt;/code&gt;. As it is the default strategy being set it can still be overwritten by repository options.</source>
          <target state="translated">1로 설정되면이 env는 기본 경로 저장소 전략을 &lt;code&gt;symlink&lt;/code&gt; 대신 &lt;code&gt;mirror&lt;/code&gt; 로 변경합니다 . 기본 전략이므로 리포지토리 옵션으로 덮어 쓸 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d56b92c2662fea7d4d9a480564618932a4dbc891" translate="yes" xml:space="preserve">
          <source>If set to 1, this env disables the warning about running commands as root/super user. It also disables automatic clearing of sudo sessions, so you should really only set this if you use Composer as super user at all times like in docker containers.</source>
          <target state="translated">1로 설정된 경우이 env는 명령을 루트 / 슈퍼 사용자로 실행하는 것에 대한 경고를 비활성화합니다. 또한 sudo 세션의 자동 지우기를 비활성화하므로 도커 컨테이너와 같이 항상 Composer를 수퍼 유저로 사용하는 경우에만 설정해야합니다.</target>
        </trans-unit>
        <trans-unit id="38bfe50f2ecd6244f1a6c53de8e608b2760e15b7" translate="yes" xml:space="preserve">
          <source>If set to 1, this env var will make Composer behave as if you passed the &lt;code&gt;--no-interaction&lt;/code&gt; flag to every command. This can be set on build boxes/CI.</source>
          <target state="translated">1로 설정하면이 env var는 마치 &lt;code&gt;--no-interaction&lt;/code&gt; 플래그를 모든 명령에 전달한 것처럼 Composer를 작동 시킵니다. 빌드 상자 / CI에서 설정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="64e467fe5be7021a5ba669d137edfa0d51f65a23" translate="yes" xml:space="preserve">
          <source>If set, makes the self-update command write the new Composer phar file into that path instead of overwriting itself. Useful for updating Composer on read-only filesystem.</source>
          <target state="translated">설정된 경우 자체 업데이트 명령으로 새 Composer phar 파일을 덮어 쓰지 않고 해당 경로에 작성합니다. 읽기 전용 파일 시스템에서 Composer를 업데이트하는 데 유용합니다.</target>
        </trans-unit>
        <trans-unit id="3ab8d09688cc5ca6dad1cca57382b3474e5b2aa8" translate="yes" xml:space="preserve">
          <source>If set, the value is used as php's memory_limit.</source>
          <target state="translated">설정하면 값은 PHP의 memory_limit로 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="2543b50b6cb029ab5a5ed083d2af0de12cb24ab3" translate="yes" xml:space="preserve">
          <source>If the directory does not currently exist, it will be created during installation.</source>
          <target state="translated">디렉토리가 현재 존재하지 않으면 설치 중에 작성됩니다.</target>
        </trans-unit>
        <trans-unit id="8ce36768537dc598e7768afc0257ba9d4428ce97" translate="yes" xml:space="preserve">
          <source>If the package is a local VCS repository, the version may be inferred by the branch or tag that is currently checked out. Otherwise, the version should be explicitly defined in the package's &lt;code&gt;composer.json&lt;/code&gt; file. If the version cannot be resolved by these means, it is assumed to be &lt;code&gt;dev-master&lt;/code&gt;.</source>
          <target state="translated">패키지가 로컬 VCS 저장소 인 경우 현재 체크 아웃 된 분기 또는 태그에 의해 버전이 유추 될 수 있습니다. 그렇지 않으면 패키지의 &lt;code&gt;composer.json&lt;/code&gt; 파일 에 버전을 명시 적으로 정의해야 합니다. 이러한 방법으로 버전을 확인할 수 없으면 &lt;code&gt;dev-master&lt;/code&gt; 로 간주됩니다 .</target>
        </trans-unit>
        <trans-unit id="14833f4633aa0b879e70aa37a9d50696f7aa5f37" translate="yes" xml:space="preserve">
          <source>If the package is in a sub-directory, e.g. &lt;code&gt;/trunk/foo/bar/composer.json&lt;/code&gt; and &lt;code&gt;/tags/1.0/foo/bar/composer.json&lt;/code&gt;, then you can make Composer access it by setting the &lt;code&gt;&quot;package-path&quot;&lt;/code&gt; option to the sub-directory, in this example it would be &lt;code&gt;&quot;package-path&quot;: &quot;foo/bar/&quot;&lt;/code&gt;.</source>
          <target state="translated">패키지가 하위 디렉토리 (예 : &lt;code&gt;/trunk/foo/bar/composer.json&lt;/code&gt; 및 &lt;code&gt;/tags/1.0/foo/bar/composer.json&lt;/code&gt; )에있는 경우 &lt;code&gt;&quot;package-path&quot;&lt;/code&gt; 를 설정하여 Composer가 액세스하도록 할 수 있습니다 하위 디렉토리에 대한 옵션 (이 예에서는 &lt;code&gt;&quot;package-path&quot;: &quot;foo/bar/&quot;&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="c2b6be5233d4eba96fdf2a2b89233da0d23b8f23" translate="yes" xml:space="preserve">
          <source>If the package tested is a dependency of one of its dependencies (cyclic dependency), the problem might be that Composer is not able to detect the version of the package properly. If it is a git clone it is generally alright and Composer will detect the version of the current branch, but travis does shallow clones so that process can fail when testing pull requests and feature branches in general. The best solution is to define the version you are on via an environment variable called COMPOSER_ROOT_VERSION. You set it to &lt;code&gt;dev-master&lt;/code&gt; for example to define the root package's version as &lt;code&gt;dev-master&lt;/code&gt;. Use: &lt;code&gt;before_script: COMPOSER_ROOT_VERSION=dev-master composer install&lt;/code&gt; to export the variable for the call to composer.</source>
          <target state="translated">테스트 한 패키지가 종속성 중 하나의 종속성 (순환 종속성) 인 경우 Composer가 패키지 버전을 제대로 감지하지 못할 수 있습니다. 그것이 git clone이라면 일반적으로 괜찮고 Composer는 현재 브랜치의 버전을 감지하지만 travis는 얕은 클론을 수행하므로 풀 요청 및 기능 분기를 일반적으로 테스트 할 때 프로세스가 실패 할 수 있습니다. 최선의 해결책은 COMPOSER_ROOT_VERSION이라는 환경 변수를 통해 현재 버전을 정의하는 것입니다. 예를 들어 루트 패키지의 버전을 &lt;code&gt;dev-master&lt;/code&gt; 로 정의 하기 위해 &lt;code&gt;dev-master&lt;/code&gt; 로 설정했습니다 . 사용 : &lt;code&gt;before_script: COMPOSER_ROOT_VERSION=dev-master composer install&lt;/code&gt; 작곡가에 대한 호출에 대한 변수를 내 보냅니다.</target>
        </trans-unit>
        <trans-unit id="9e61f385a08c111b685ded10cd096bfb36759926" translate="yes" xml:space="preserve">
          <source>If there are two archives with different versions of a package, they are both imported. When an archive with a newer version is added in the artifact folder and you run &lt;code&gt;update&lt;/code&gt;, that version will be imported as well and Composer will update to the latest version.</source>
          <target state="translated">다른 버전의 패키지를 가진 두 개의 아카이브가있는 경우 모두 가져옵니다. 최신 버전의 아카이브가 이슈 폴더에 추가되고 &lt;code&gt;update&lt;/code&gt; 를 실행 하면 해당 버전도 가져오고 Composer는 최신 버전으로 업데이트됩니다.</target>
        </trans-unit>
        <trans-unit id="4e348d79c2291e232760cee8518c2aaa309fc793" translate="yes" xml:space="preserve">
          <source>If there is a &lt;code&gt;composer.lock&lt;/code&gt; file in the current directory, it will use the exact versions from there instead of resolving them. This ensures that everyone using the library will get the same versions of the dependencies.</source>
          <target state="translated">현재 디렉토리에 &lt;code&gt;composer.lock&lt;/code&gt; 파일 이 있으면이 를 해결하는 대신 정확한 버전을 사용합니다. 이를 통해 라이브러리를 사용하는 모든 사람이 동일한 버전의 종속성을 얻을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ad9b942389111f2a40c08cad82e13bf58d73c57d" translate="yes" xml:space="preserve">
          <source>If there is no &lt;code&gt;composer.lock&lt;/code&gt; file, Composer will create one after dependency resolution.</source>
          <target state="translated">&lt;code&gt;composer.lock&lt;/code&gt; 파일 이 없으면 Composer는 종속성 해결 후 파일을 만듭니다.</target>
        </trans-unit>
        <trans-unit id="626c3cd3ac80e286d5b341e20dfc161383a10b95" translate="yes" xml:space="preserve">
          <source>If we wanted to share &lt;code&gt;hello-world&lt;/code&gt; with the world, we would publish it on Packagist as well. Doing so is really easy.</source>
          <target state="translated">우리가 &lt;code&gt;hello-world&lt;/code&gt; 와 hello-world 를 공유 하고 싶다면 Packagist에도 게시 할 것입니다. 그렇게하는 것은 정말 쉽습니다.</target>
        </trans-unit>
        <trans-unit id="78b8c57955622e3c9dd99413d98367dd63fd9bdf" translate="yes" xml:space="preserve">
          <source>If you add custom scripts that do not fit one of the predefined event name above, you can either run them with run-script or also run them as native Composer commands. For example the handler defined below is executable by simply running &lt;code&gt;composer test&lt;/code&gt;:</source>
          <target state="translated">위의 사전 정의 된 이벤트 이름 중 하나에 맞지 않는 사용자 정의 스크립트를 추가하는 경우 run-script로 실행하거나 기본 Composer 명령으로 실행할 수도 있습니다. 예를 들어 아래에 정의 된 핸들러는 &lt;code&gt;composer test&lt;/code&gt; 를 실행하여 실행 가능합니다 .</target>
        </trans-unit>
        <trans-unit id="8af62393468189affa3bd84e482c30715a61ff7e" translate="yes" xml:space="preserve">
          <source>If you alias a non-comparable version (such as dev-develop) &lt;code&gt;dev-&lt;/code&gt; must prefix the branch name. You may also alias a comparable version (i.e. start with numbers, and end with &lt;code&gt;.x-dev&lt;/code&gt;), but only as a more specific version. For example, 1.x-dev could be aliased as 1.2.x-dev.</source>
          <target state="translated">(DEV-개발 등)이 아닌 비교 버전 별칭 당신이 만약 &lt;code&gt;dev-&lt;/code&gt; 은 분기 이름 앞에해야합니다. 유사한 버전 (예 : 숫자로 시작하고 &lt;code&gt;.x-dev&lt;/code&gt; 로 끝남)을 별칭으로 지정할 수도 있지만보다 구체적인 버전으로 만 사용할 수 있습니다. 예를 들어, 1.x-dev는 1.2.x-dev로 별칭을 지정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ff2632c14db6a49a315cef5ff5a44ea962b68182" translate="yes" xml:space="preserve">
          <source>If you are behind a proxy and would like to disable it for certain domains, you can use the &lt;code&gt;no_proxy&lt;/code&gt; or &lt;code&gt;NO_PROXY&lt;/code&gt; env var. Simply set it to a comma separated list of domains the proxy should &lt;em&gt;not&lt;/em&gt; be used for.</source>
          <target state="translated">프록시 뒤에 있고 특정 도메인에 대해 프록시를 비활성화하려는 경우 &lt;code&gt;no_proxy&lt;/code&gt; 또는 &lt;code&gt;NO_PROXY&lt;/code&gt; env var를 사용할 수 있습니다 . 프록시를 사용해서는 &lt;em&gt;안되는&lt;/em&gt; 쉼표로 구분 된 도메인 목록으로 설정하십시오 .</target>
        </trans-unit>
        <trans-unit id="c82daf78b6ad5e12a3006ff299f06dd1f92c604c" translate="yes" xml:space="preserve">
          <source>If you are maintaining packages by hand (i.e., without a VCS), you'll need to specify the version explicitly by adding a &lt;code&gt;version&lt;/code&gt; value in your &lt;code&gt;composer.json&lt;/code&gt; file:</source>
          <target state="translated">직접 패키지를 유지 관리하는 경우 (예 : VCS가없는 경우) &lt;code&gt;composer.json&lt;/code&gt; 파일 에 &lt;code&gt;version&lt;/code&gt; 값 을 추가하여 버전을 명시 적으로 지정해야 합니다.</target>
        </trans-unit>
        <trans-unit id="0a563964d428b8cf75ee5ba1b60df36e9d7cd77a" translate="yes" xml:space="preserve">
          <source>If you are updating a single package, it may depend on newer versions itself. In this case add the &lt;code&gt;--with-dependencies&lt;/code&gt; argument &lt;strong&gt;or&lt;/strong&gt; add all dependencies which need an update to the command.</source>
          <target state="translated">단일 패키지를 업데이트하는 경우 최신 버전 자체에 따라 달라질 수 있습니다. 이 경우 &lt;code&gt;--with-dependencies&lt;/code&gt; 인수를 추가 &lt;strong&gt;하거나&lt;/strong&gt; 명령을 업데이트해야하는 모든 종속성을 추가하십시오.</target>
        </trans-unit>
        <trans-unit id="eb79f392f486e35ae98362b5acf26232cc081a6d" translate="yes" xml:space="preserve">
          <source>If you are updating to a recently published version of a package, be aware that Packagist has a delay of up to 1 minute before new packages are visible to Composer.</source>
          <target state="translated">최근에 게시 된 패키지 버전으로 업데이트하는 경우 새 패키지가 Composer에 표시되기까지 Packagist의 지연 시간이 최대 1 분이라는 점에 유의하십시오.</target>
        </trans-unit>
        <trans-unit id="214c408a3ac668f2be206dab1b2b6aa0d9b7cef2" translate="yes" xml:space="preserve">
          <source>If you are using Composer from behind an HTTP proxy, you can use the standard &lt;code&gt;http_proxy&lt;/code&gt; or &lt;code&gt;HTTP_PROXY&lt;/code&gt; env vars. Simply set it to the URL of your proxy. Many operating systems already set this variable for you.</source>
          <target state="translated">HTTP 프록시 뒤에서 Composer를 사용하는 경우 표준 &lt;code&gt;http_proxy&lt;/code&gt; 또는 &lt;code&gt;HTTP_PROXY&lt;/code&gt; env vars를 사용할 수 있습니다 . 간단히 프록시의 URL로 설정하십시오. 많은 운영 체제가 이미이 변수를 설정했습니다.</target>
        </trans-unit>
        <trans-unit id="a3a34660b13c92ff230c92ecc3445778d514c737" translate="yes" xml:space="preserve">
          <source>If you are using Composer in a non-CLI context (i.e. integration into a CMS or similar use case), and need to support proxies, please provide the &lt;code&gt;CGI_HTTP_PROXY&lt;/code&gt; environment variable instead. See &lt;a href=&quot;https://httpoxy.org/&quot;&gt;httpoxy.org&lt;/a&gt; for further details.</source>
          <target state="translated">CLI가 아닌 컨텍스트 (예 : CMS 또는 유사한 유스 케이스에 통합)에서 Composer를 사용하고 프록시를 지원해야하는 경우 &lt;code&gt;CGI_HTTP_PROXY&lt;/code&gt; 환경 변수를 대신 제공하십시오 . 자세한 내용은 &lt;a href=&quot;https://httpoxy.org/&quot;&gt;httpoxy.org&lt;/a&gt; 를 참조 하십시오.</target>
        </trans-unit>
        <trans-unit id="7a7a7c5a1ab1688bacc0cf072fd3c28547ddf845" translate="yes" xml:space="preserve">
          <source>If you are using ESET antivirus, go in &quot;Advanced Settings&quot; and disable &quot;HTTP-scanner&quot; under &quot;web access protection&quot;</source>
          <target state="translated">ESET 바이러스 백신을 사용하는 경우 &quot;고급 설정&quot;으로 이동하여 &quot;웹 액세스 보호&quot;에서 &quot;HTTP 스캐너&quot;를 비활성화하십시오.</target>
        </trans-unit>
        <trans-unit id="b736abe3ce5462ae838e506eeb53c220f283d06f" translate="yes" xml:space="preserve">
          <source>If you are using IPv6, try disabling it. If that solves your issues, get in touch with your ISP or server host, the problem is not at the Packagist level but in the routing rules between you and Packagist (i.e. the internet at large). The best way to get these fixed is raise awareness to the network engineers that have the power to fix it. Take a look at the next section for IPv6 workarounds.</source>
          <target state="translated">IPv6을 사용하는 경우 비활성화하십시오. 그래도 문제가 해결되면 ISP 나 서버 호스트와 연락하십시오. 문제는 Packagist 수준이 아니라 사용자와 Packagist (예 : 인터넷) 간의 라우팅 규칙에 있습니다. 이러한 문제를 해결하는 가장 좋은 방법은 문제를 해결할 수있는 네트워크 엔지니어에게 인식을 높이는 것입니다. IPv6 해결 방법에 대한 다음 섹션을 살펴보십시오.</target>
        </trans-unit>
        <trans-unit id="0297fb844c98d88aec299e5d01a69883fb33c2b8" translate="yes" xml:space="preserve">
          <source>If you are using a constraint that does not explicitly define a stability, Composer will default internally to &lt;code&gt;-dev&lt;/code&gt; or &lt;code&gt;-stable&lt;/code&gt;, depending on the operator(s) used. This happens transparently.</source>
          <target state="translated">안정성을 명시 적으로 정의하지 않는 제약 조건을 사용하는 경우 Composer는 사용 된 연산자에 따라 기본적으로 &lt;code&gt;-dev&lt;/code&gt; 또는 &lt;code&gt;-stable&lt;/code&gt; 로 설정 됩니다. 이것은 투명하게 발생합니다.</target>
        </trans-unit>
        <trans-unit id="d73e91c66121d31d4e38b634e488e742825b8d0c" translate="yes" xml:space="preserve">
          <source>If you configure &lt;code&gt;latest-.*&lt;/code&gt; as a pattern for non-feature-branches like this:</source>
          <target state="translated">비 기능 분기에 대한 패턴으로 latest- &lt;code&gt;latest-.*&lt;/code&gt; 과 같이 구성하는 경우 :</target>
        </trans-unit>
        <trans-unit id="ca231dc25c174b7538db93b9f1af2bc4278a1bce" translate="yes" xml:space="preserve">
          <source>If you do not specify a package, composer will prompt you to search for a package, and given results, provide a list of matches to require.</source>
          <target state="translated">패키지를 지정하지 않으면 작곡가가 패키지를 검색하라는 메시지를 표시하고 주어진 결과가 필요한 경우 일치하는 목록을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="2470d75b272eaf6e6c6d30fd50cd562308916d69" translate="yes" xml:space="preserve">
          <source>If you do not want to choose requirements interactively, you can pass them to the command.</source>
          <target state="translated">대화식으로 요구 사항을 선택하지 않으려면 요구 사항을 명령에 전달할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f44476b16acbca33e02b01a2cfc7763a99dde3ff" translate="yes" xml:space="preserve">
          <source>If you do not want to commit the lock file and you are using git, add it to the &lt;code&gt;.gitignore&lt;/code&gt;.</source>
          <target state="translated">잠금 파일을 커밋하지 않고 git을 사용하는 경우 &lt;code&gt;.gitignore&lt;/code&gt; 에 추가하십시오 .</target>
        </trans-unit>
        <trans-unit id="3a0d24e0066c5c369022ce8f6b5fd47f08d87060" translate="yes" xml:space="preserve">
          <source>If you go to the &lt;a href=&quot;https://packagist.org/&quot;&gt;Packagist website&lt;/a&gt; (packagist.org), you can browse and search for packages.</source>
          <target state="translated">당신이에 가면 &lt;a href=&quot;https://packagist.org/&quot;&gt;Packagist 웹 사이트&lt;/a&gt; (packagist.org), 당신은 찾아 패키지를 검색 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="06cd11334ea9a696d3396d6cd048332b3a6d4d74" translate="yes" xml:space="preserve">
          <source>If you have a private Subversion repository you can save credentials in the http-basic section of your config (See &lt;a href=&quot;04-schema.md&quot;&gt;Schema&lt;/a&gt;):</source>
          <target state="translated">개인용 Subversion 저장소가있는 경우 구성의 http-basic 섹션에 신임 정보를 저장할 수 있습니다 ( &lt;a href=&quot;04-schema.md&quot;&gt;스키마&lt;/a&gt; 참조 ).</target>
        </trans-unit>
        <trans-unit id="0854a6579605c2130f219568e0280e58360ad28c" translate="yes" xml:space="preserve">
          <source>If you have a testing branch, that is heavily maintained during a testing phase and is deployed to your staging environment, normally &lt;code&gt;composer show -s&lt;/code&gt; will give you &lt;code&gt;versions : * dev-master&lt;/code&gt;.</source>
          <target state="translated">테스트 브랜치가있는 경우 (테스트 단계에서 크게 유지 보수되고 스테이징 환경에 배치 된 경우) 일반적으로 &lt;code&gt;composer show -s&lt;/code&gt; 는 다음과 같은 &lt;code&gt;versions : * dev-master&lt;/code&gt; 을 제공합니다 . * dev-master .</target>
        </trans-unit>
        <trans-unit id="8ef4c3860cebec88583b720b8210cb7cd83193c4" translate="yes" xml:space="preserve">
          <source>If you have been pointed to this page, you want to check a few things:</source>
          <target state="translated">이 페이지를 가리키면 몇 가지 사항을 확인하십시오.</target>
        </trans-unit>
        <trans-unit id="186247001f7e113a5aa68a248c4b8e7522db2a76" translate="yes" xml:space="preserve">
          <source>If you have installed Composer for your entire system (see &lt;a href=&quot;00-intro.md#globally&quot;&gt;global installation&lt;/a&gt;), you may have to run the command with &lt;code&gt;root&lt;/code&gt; privileges</source>
          <target state="translated">전체 시스템에 Composer를 설치 한 경우 ( &lt;a href=&quot;00-intro.md#globally&quot;&gt;전역 설치&lt;/a&gt; 참조 ) &lt;code&gt;root&lt;/code&gt; 권한으로 명령을 실행해야 할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="ff855960cce21697a7506692481856bdd607cf39" translate="yes" xml:space="preserve">
          <source>If you have never run the command before and there is also no &lt;code&gt;composer.lock&lt;/code&gt; file present, Composer simply resolves all dependencies listed in your &lt;code&gt;composer.json&lt;/code&gt; file and downloads the latest version of their files into the &lt;code&gt;vendor&lt;/code&gt; directory in your project. (The &lt;code&gt;vendor&lt;/code&gt; directory is the conventional location for all third-party code in a project). In our example from above, you would end up with the Monolog source files in &lt;code&gt;vendor/monolog/monolog/&lt;/code&gt;. If Monolog listed any dependencies, those would also be in folders under &lt;code&gt;vendor/&lt;/code&gt;.</source>
          <target state="translated">이전에 명령을 실행 한 적이없고 &lt;code&gt;composer.lock&lt;/code&gt; 파일 도없는 경우 Composer는 &lt;code&gt;composer.json&lt;/code&gt; 파일에 나열된 모든 종속성을 해결하고 해당 파일의 최신 버전을 프로젝트 의 &lt;code&gt;vendor&lt;/code&gt; 디렉토리에 다운로드합니다. 합니다 ( &lt;code&gt;vendor&lt;/code&gt; 디렉토리는 프로젝트의 모든 제 3 자 코드에 대한 기존의 위치입니다). 위의 예에서 &lt;code&gt;vendor/monolog/monolog/&lt;/code&gt; 의 Monolog 소스 파일로 끝납니다 . Monolog에 종속성이 나열되어 있으면 &lt;code&gt;vendor/&lt;/code&gt; 아래의 폴더에도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="0d1805dea127164a1d22e823add2a8d04954f2fd" translate="yes" xml:space="preserve">
          <source>If you have no branches or tags directory you can disable them entirely by setting the &lt;code&gt;branches-path&lt;/code&gt; or &lt;code&gt;tags-path&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">분기 또는 태그 디렉토리가없는 경우 &lt;code&gt;branches-path&lt;/code&gt; 또는 &lt;code&gt;tags-path&lt;/code&gt; 를 &lt;code&gt;false&lt;/code&gt; 로 설정하여 완전히 비활성화 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="9fdb3f5de4ebac5ba748c10f5b5017b71d5209cb" translate="yes" xml:space="preserve">
          <source>If you have non-numeric branch names, for example like &quot;latest&quot;, &quot;current&quot;, &quot;latest-stable&quot; or something, that do not look like a version number, then Composer handles such branches as feature branches. This means it searches for parent branches, that look like a version or ends at special branches (like master) and the root package version number becomes the version of the parent branch or at least master or something.</source>
          <target state="translated">&quot;latest&quot;, &quot;current&quot;, &quot;latest-stable&quot;과 같이 숫자가 아닌 분기 이름이 있거나 버전 번호가 아닌 경우 Composer는 기능 분기와 같은 분기를 처리합니다. 즉, 버전처럼 보이거나 마스터와 같은 특수 분기로 끝나는 상위 분기를 검색하고 루트 패키지 버전 번호는 상위 분기 또는 적어도 마스터 또는 다른 버전이됩니다.</target>
        </trans-unit>
        <trans-unit id="0a56ee656028257ad006b1e65bfa82d219ebd5ab" translate="yes" xml:space="preserve">
          <source>If you like to install it only for your user and avoid requiring root permissions, you can use &lt;code&gt;~/.local/bin&lt;/code&gt; instead which is available by default on some Linux distributions.</source>
          <target state="translated">사용자에게만 설치하고 루트 권한이 필요하지 않은 경우 &lt;code&gt;~/.local/bin&lt;/code&gt; 을 대신 사용할 수 있습니다 (일부 Linux 배포판에서 기본적으로 사용 가능).</target>
        </trans-unit>
        <trans-unit id="b1b53c2f91ab667b2afe417a4423be64fdf5e853" translate="yes" xml:space="preserve">
          <source>If you need to search for a same prefix in multiple directories, you can specify them as an array as such:</source>
          <target state="translated">여러 디렉토리에서 동일한 접두사를 검색해야하는 경우 다음과 같이 접두사를 배열로 지정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f478626e7651a39ebec29434873a03ee56d5ea94" translate="yes" xml:space="preserve">
          <source>If you need to update the autoloader because of new classes in a classmap package for example, you can use &lt;code&gt;dump-autoload&lt;/code&gt; to do that without having to go through an install or update.</source>
          <target state="translated">예를 들어 클래스 맵 패키지의 새 클래스로 인해 오토로더를 업데이트해야하는 경우 , 설치 또는 업데이트를 거치지 않고 &lt;code&gt;dump-autoload&lt;/code&gt; 를 사용 하여이를 수행 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="45f5af54e96bfab85edc9ec72806abe899bed0db" translate="yes" xml:space="preserve">
          <source>If you need to work with composer as a library you may also want to check out the &lt;a href=&quot;https://getcomposer.org/apidoc/master/index.html&quot;&gt;API Docs&lt;/a&gt;</source>
          <target state="translated">composer를 라이브러리로 작업해야하는 경우 &lt;a href=&quot;https://getcomposer.org/apidoc/master/index.html&quot;&gt;API 문서&lt;/a&gt; 를 확인하십시오.</target>
        </trans-unit>
        <trans-unit id="d0bab24d8881b62d58afe616d8a186eddeb30dd9" translate="yes" xml:space="preserve">
          <source>If you often need to modify the code of your dependencies and they are installed from source, the &lt;code&gt;status&lt;/code&gt; command allows you to check if you have local changes in any of them.</source>
          <target state="translated">종속성 코드를 수정해야하는 경우가 많고 소스에서 설치 한 경우 &lt;code&gt;status&lt;/code&gt; 명령을 사용하면 로컬 변경 사항이 있는지 확인할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f4433cbc27ee9f55a46c17668d0e2b7df7f51c28" translate="yes" xml:space="preserve">
          <source>If you only want to install or update one dependency, you can whitelist them:</source>
          <target state="translated">하나의 종속성 만 설치하거나 업데이트하려는 경우 해당 종속성을 허용 목록에 추가 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="37c078d691204589628a1c61d798e3249f1857b9" translate="yes" xml:space="preserve">
          <source>If you only want to update a few packages and not all, you can list them as such:</source>
          <target state="translated">전체 패키지가 아닌 일부 패키지 만 업데이트하려는 경우 다음과 같이 나열 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="0bfb23379dfbe8fd9e6d96b0bc658af47a41ba43" translate="yes" xml:space="preserve">
          <source>If you set the &lt;code&gt;no-api&lt;/code&gt; key to &lt;code&gt;true&lt;/code&gt; on a github repository it will clone the repository as it would with any other git repository instead of using the GitHub API. But unlike using the &lt;code&gt;git&lt;/code&gt; driver directly, Composer will still attempt to use github's zip files.</source>
          <target state="translated">github 저장소 에서 &lt;code&gt;no-api&lt;/code&gt; 키를 &lt;code&gt;true&lt;/code&gt; 로 설정하면 GitHub API를 사용하는 대신 다른 git 저장소와 마찬가지로 저장소를 복제합니다. 그러나 &lt;code&gt;git&lt;/code&gt; 드라이버를 직접 사용하는 것과 달리 Composer는 여전히 github의 zip 파일을 사용하려고 시도합니다.</target>
        </trans-unit>
        <trans-unit id="c0038faa59f789af61ca1da736eaa7df44af5eed" translate="yes" xml:space="preserve">
          <source>If you think you found a bug, or something is behaving strangely, you might want to run the &lt;code&gt;diagnose&lt;/code&gt; command to perform automated checks for many common problems.</source>
          <target state="translated">버그를 발견했거나 이상하게 동작하는 것으로 생각되는 경우 &lt;code&gt;diagnose&lt;/code&gt; 명령을 실행하여 많은 일반적인 문제를 자동으로 검사 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="92b3bae8dc6cad3e5e2f7cb5260a21e1be5a8462" translate="yes" xml:space="preserve">
          <source>If you use a proxy but it does not support the request_fulluri flag for HTTPS requests, then you should set this env var to &lt;code&gt;false&lt;/code&gt; or &lt;code&gt;0&lt;/code&gt; to prevent Composer from setting the request_fulluri option.</source>
          <target state="translated">프록시를 사용하지만 HTTPS 요청에 대해 request_fulluri 플래그를 지원하지 않는 경우 Composer가 request_fulluri 옵션을 설정하지 못하게 하려면이 env var를 &lt;code&gt;false&lt;/code&gt; 또는 &lt;code&gt;0&lt;/code&gt; 으로 설정해야합니다.</target>
        </trans-unit>
        <trans-unit id="85d8396f73132b120e95ee633516d15440e3bf36" translate="yes" xml:space="preserve">
          <source>If you use a proxy but it does not support the request_fulluri flag, then you should set this env var to &lt;code&gt;false&lt;/code&gt; or &lt;code&gt;0&lt;/code&gt; to prevent Composer from setting the request_fulluri option.</source>
          <target state="translated">프록시를 사용하지만 request_fulluri 플래그를 지원하지 않는 경우 Composer가 request_fulluri 옵션을 설정하지 못하게 하려면이 env var를 &lt;code&gt;false&lt;/code&gt; 또는 &lt;code&gt;0&lt;/code&gt; 으로 설정해야합니다.</target>
        </trans-unit>
        <trans-unit id="44de192e0126331f914d4933480e0c49b603f76a" translate="yes" xml:space="preserve">
          <source>If you want Composer to check out a branch instead of a tag, you need to point it to the branch using the special &lt;code&gt;dev-*&lt;/code&gt; prefix (or sometimes suffix; see below). If you're checking out a branch, it's assumed that you want to &lt;em&gt;work&lt;/em&gt; on the branch and Composer actually clones the repo into the correct place in your &lt;code&gt;vendor&lt;/code&gt; directory. For tags, it copies the right files without actually cloning the repo. (You can modify this behavior with --prefer-source and --prefer-dist, see &lt;a href=&quot;../03-cli.md#install&quot;&gt;install options&lt;/a&gt;.)</source>
          <target state="translated">Composer가 태그 대신 분기를 체크 아웃하려면 특별한 &lt;code&gt;dev-*&lt;/code&gt; 접두사 (또는 때때로 접미사를 사용하여 분기를 가리켜 야 합니다 (아래 참조)). 지점을 체크 아웃하는 경우 지점에서 &lt;em&gt;작업&lt;/em&gt; 하고 Composer가 실제로 저장소를 &lt;code&gt;vendor&lt;/code&gt; 디렉토리 의 올바른 위치에 복제 한다고 가정합니다 . 태그의 경우 실제로 저장소를 복제하지 않고 올바른 파일을 복사합니다. --prefer-source 및 --prefer-dist를 사용하여이 동작을 수정할 수 있습니다 ( &lt;a href=&quot;../03-cli.md#install&quot;&gt;설치 옵션&lt;/a&gt; 참조 ).</target>
        </trans-unit>
        <trans-unit id="55f79210d46f07282dbf89385baebc71ad1b28ee" translate="yes" xml:space="preserve">
          <source>If you want to cherry pick which packages you want, you can list all the packages you want to have in your satis repository inside the classic composer &lt;code&gt;require&lt;/code&gt; key, using a &lt;code&gt;&quot;*&quot;&lt;/code&gt; constraint to make sure all versions are selected, or another constraint if you want really specific versions.</source>
          <target state="translated">원하는 패키지를 선택하려면 &lt;code&gt;&quot;*&quot;&lt;/code&gt; 제약 조건을 사용하여 클래식 작곡가 &lt;code&gt;require&lt;/code&gt; 키 내의 satis 저장소에 포함하려는 모든 패키지를 나열 하거나 모든 버전이 선택되어 있는지 확인하십시오. 당신은 정말로 특정한 버전을 원합니다.</target>
        </trans-unit>
        <trans-unit id="f13efbb7ac71ddeb7534aac795151e408acc5fa0" translate="yes" xml:space="preserve">
          <source>If you want to exclude some files or folders from the classmap you can use the &lt;code&gt;exclude-from-classmap&lt;/code&gt; property. This might be useful to exclude test classes in your live environment, for example, as those will be skipped from the classmap even when building an optimized autoloader.</source>
          <target state="translated">클래스 맵에서 일부 파일 또는 폴더를 제외하려는 경우 &lt;code&gt;exclude-from-classmap&lt;/code&gt; 특성을 사용할 수 있습니다 . 예를 들어 최적화 된 오토로더를 빌드 할 때 클래스 맵에서 건너 뛰기 때문에 실제 환경에서 테스트 클래스를 제외하는 데 유용 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b025eb2e6edeeb2c120f7599d2a9d04fe52bda64" translate="yes" xml:space="preserve">
          <source>If you want to have a fallback directory where any namespace can be, you can use an empty prefix like:</source>
          <target state="translated">네임 스페이스가 될 수있는 폴백 디렉토리를 원하면 다음과 같은 빈 접두사를 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f1a38ae9b1e7c1f52baf24f7fdce94b5b20ea762" translate="yes" xml:space="preserve">
          <source>If you want to have a fallback directory where any namespace will be looked for, you can use an empty prefix like:</source>
          <target state="translated">네임 스페이스를 찾을 폴백 디렉토리를 원하면 다음과 같은 빈 접두사를 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="039247ec0f83e47d8473b4e158781ab16a4b2334" translate="yes" xml:space="preserve">
          <source>If you want to require certain files explicitly on every request then you can use the &lt;code&gt;files&lt;/code&gt; autoloading mechanism. This is useful if your package includes PHP functions that cannot be autoloaded by PHP.</source>
          <target state="translated">모든 요청에서 특정 파일을 명시 적으로 요구하려면 &lt;code&gt;files&lt;/code&gt; 자동로드 메커니즘을 사용할 수 있습니다 . 이는 패키지에 PHP가 자동로드 할 수없는 PHP 함수를 포함하는 경우에 유용합니다.</target>
        </trans-unit>
        <trans-unit id="39c1ae4e2a50cf6c1fcc88c7b7e7e78d29669faa" translate="yes" xml:space="preserve">
          <source>If you want to scan only a single repository and update all packages found in it, pass the VCS repository URL as an optional argument:</source>
          <target state="translated">단일 저장소 만 스캔하고 발견 된 모든 패키지를 업데이트하려면 VCS 저장소 URL을 선택적 인수로 전달하십시오.</target>
        </trans-unit>
        <trans-unit id="7a5767bb08621435fefaabf93b7649df7819c09f" translate="yes" xml:space="preserve">
          <source>If you want to scan only the selected package and not all VCS repositories you need to declare a &lt;em&gt;name&lt;/em&gt; for all your package (this only work on VCS repositories type) :</source>
          <target state="translated">선택한 패키지 만 스캔하고 모든 VCS 리포지토리를 스캔하지 않으 려면 모든 패키지 의 &lt;em&gt;이름&lt;/em&gt; 을 선언 해야합니다 (VCS 리포지토리 유형에서만 작동).</target>
        </trans-unit>
        <trans-unit id="4db9a2f1f18b4c6bf7b791fb5dbde76c3b86956a" translate="yes" xml:space="preserve">
          <source>If you want to see the details of a certain package, you can pass the package name.</source>
          <target state="translated">특정 패키지의 세부 정보를 보려면 패키지 이름을 전달하면됩니다.</target>
        </trans-unit>
        <trans-unit id="c5e6d88e4258a31296a1f91aa671c93061b55add" translate="yes" xml:space="preserve">
          <source>If you want to use a project that does not support Composer through any of the means above, you still can define the package yourself by using a &lt;code&gt;package&lt;/code&gt; repository.</source>
          <target state="translated">위의 방법을 통해 Composer를 지원하지 않는 프로젝트를 사용하려는 경우 &lt;code&gt;package&lt;/code&gt; 저장소 를 사용하여 패키지를 직접 정의 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="6028e69cd147ad305c8b9b1c5c1f58afd0a9413f" translate="yes" xml:space="preserve">
          <source>If you wish to explicitly consider only the stable release in the comparison, add the suffix &lt;code&gt;-stable&lt;/code&gt;.</source>
          <target state="translated">비교에서 안정적인 릴리스 만 명시 적으로 고려하려면 접미사 &lt;code&gt;-stable&lt;/code&gt; 을 추가하십시오 .</target>
        </trans-unit>
        <trans-unit id="a4beab1c9689ede4fe7f9949cf6e86909429578d" translate="yes" xml:space="preserve">
          <source>If you wish to update the binary later on you can run a global update:</source>
          <target state="translated">바이너리를 나중에 업데이트하려면 전역 업데이트를 실행할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="4964960c30bc7d3323604eec740fe51ed759cbcc" translate="yes" xml:space="preserve">
          <source>If you would like to contribute to Composer, please read the &lt;a href=&quot;https://github.com/composer/composer&quot;&gt;README&lt;/a&gt; and &lt;a href=&quot;https://github.com/composer/composer/blob/master/.github/CONTRIBUTING.md&quot;&gt;CONTRIBUTING&lt;/a&gt; documents.</source>
          <target state="translated">Composer에 기고하려면 &lt;a href=&quot;https://github.com/composer/composer&quot;&gt;README&lt;/a&gt; 및 &lt;a href=&quot;https://github.com/composer/composer/blob/master/.github/CONTRIBUTING.md&quot;&gt;CONTRIBUTING&lt;/a&gt; 문서 를 읽으십시오 .</target>
        </trans-unit>
        <trans-unit id="6963e449f581002a0c44e6a9d4da812d9bc89061" translate="yes" xml:space="preserve">
          <source>If you would like to instead update to a specific release simply specify it:</source>
          <target state="translated">대신 특정 릴리스로 업데이트하려면 간단히 지정하십시오.</target>
        </trans-unit>
        <trans-unit id="05c1ceeea7ce577ba2bed1b7cb4a51e5a658c8c1" translate="yes" xml:space="preserve">
          <source>If you would like to run the scripts for an event manually, the syntax is:</source>
          <target state="translated">이벤트 스크립트를 수동으로 실행하려는 경우 구문은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="bb435988793ab200f1d2586c89bb80db3f459cfa" translate="yes" xml:space="preserve">
          <source>If you would prefer not to provide your GitHub credentials to Composer you can manually create a token using the following procedure:</source>
          <target state="translated">GitHub 자격 증명을 Composer에 제공하지 않으려면 다음 절차를 사용하여 수동으로 토큰을 만들 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="9c5a5a78ae54c33fe4ab9aca3cfeaf309132ed18" translate="yes" xml:space="preserve">
          <source>If your &lt;code&gt;master&lt;/code&gt; branch is used to tag releases of the &lt;code&gt;1.0&lt;/code&gt; development line, i.e. &lt;code&gt;1.0.1&lt;/code&gt;, &lt;code&gt;1.0.2&lt;/code&gt;, &lt;code&gt;1.0.3&lt;/code&gt;, etc., any package depending on it will probably require version &lt;code&gt;1.0.*&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;master&lt;/code&gt; 브랜치가 &lt;code&gt;1.0&lt;/code&gt; 개발 라인의 릴리스 ( 예 : &lt;code&gt;1.0.1&lt;/code&gt; , &lt;code&gt;1.0.2&lt;/code&gt; , &lt;code&gt;1.0.3&lt;/code&gt; 등) 에 태그를 지정하는 데 사용되는 경우 , 이에 따라 모든 패키지에는 버전 &lt;code&gt;1.0.*&lt;/code&gt; 이 필요할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="85c7b943405e2749fb3c9f750c7fe352e18413b1" translate="yes" xml:space="preserve">
          <source>If your Subversion client is configured to store credentials by default these credentials will be saved for the current user and existing saved credentials for this server will be overwritten. To change this behavior by setting the &lt;code&gt;&quot;svn-cache-credentials&quot;&lt;/code&gt; option in your repository configuration:</source>
          <target state="translated">Subversion 클라이언트가 기본적으로 자격 증명을 저장하도록 구성된 경우 이러한 자격 증명은 현재 사용자에 대해 저장되며이 서버에 대한 기존 저장된 자격 증명을 덮어 씁니다. 저장소 구성에서 &lt;code&gt;&quot;svn-cache-credentials&quot;&lt;/code&gt; 옵션 을 설정하여이 동작을 변경하려면 다음 을 수행하십시오.</target>
        </trans-unit>
        <trans-unit id="9dd02a0fc08eda5fab24424683485cdd68b99b45" translate="yes" xml:space="preserve">
          <source>If your repository requires more configuration options, you can instead pass its JSON representation :</source>
          <target state="translated">저장소에 더 많은 구성 옵션이 필요한 경우 대신 JSON 표현을 전달할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2c37319ca4dbde153c43110cb80c63b0cf6850ce" translate="yes" xml:space="preserve">
          <source>In Composer, what's often referred to casually as a version -- that is, the string that follows the package name in a require line (e.g., &lt;code&gt;~1.1&lt;/code&gt; or &lt;code&gt;1.2.*&lt;/code&gt;) -- is actually more specifically a version constraint. Composer uses version constraints to figure out which refs in a VCS it should be checking out (or simply to verify that a given library is acceptable in the case of a statically-maintained library with a &lt;code&gt;version&lt;/code&gt; specification in &lt;code&gt;composer.json&lt;/code&gt;).</source>
          <target state="translated">Composer에서 종종 캐주얼 버전이라고하는 것은, 즉 요구 라인 (예 : &lt;code&gt;~1.1&lt;/code&gt; 또는 &lt;code&gt;1.2.*&lt;/code&gt; ) 에서 패키지 이름 다음에 오는 문자열 은 실제로는보다 구체적으로 버전 제약입니다. Composer는 버전 제약 조건을 사용하여 VCS에서 체크 아웃해야하는 참조를 파악합니다 (또는 &lt;code&gt;composer.json&lt;/code&gt; 에 &lt;code&gt;version&lt;/code&gt; 사양 이있는 정적으로 유지 관리되는 라이브러리의 경우 지정된 라이브러리가 허용되는지 확인 ).</target>
        </trans-unit>
        <trans-unit id="3860748b7db84c776b09c637cb222a535886a2a1" translate="yes" xml:space="preserve">
          <source>In addition to PSR-4 autoloading, Composer also supports PSR-0, classmap and files autoloading. See the &lt;a href=&quot;04-schema.md#autoload&quot;&gt;&lt;code&gt;autoload&lt;/code&gt;&lt;/a&gt; reference for more information.</source>
          <target state="translated">Composer는 PSR-4 자동 로딩 외에도 PSR-0, 클래스 맵 및 파일 자동 로딩을 지원합니다. 자세한 정보는 &lt;a href=&quot;04-schema.md#autoload&quot;&gt; &lt;code&gt;autoload&lt;/code&gt; &lt;/a&gt; 참조를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="a867c9b8c3cabee64d6b05ee556a5afff1016d16" translate="yes" xml:space="preserve">
          <source>In addition to modifying the config section, the &lt;code&gt;config&lt;/code&gt; command also supports making changes to the extra section by using it the following way:</source>
          <target state="translated">&lt;code&gt;config&lt;/code&gt; 명령 은 config 섹션을 수정하는 것 외에도 다음과 같은 방법으로 추가 섹션을 변경할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2b39212db13d7fe902058fc96c0038991089f654" translate="yes" xml:space="preserve">
          <source>In addition to modifying the config section, the &lt;code&gt;config&lt;/code&gt; command also supports making changes to the repositories section by using it the following way:</source>
          <target state="translated">&lt;code&gt;config&lt;/code&gt; 명령 은 config 섹션을 수정하는 것 외에도 다음과 같은 방법으로 리포지토리 섹션을 변경할 수 있도록 지원합니다.</target>
        </trans-unit>
        <trans-unit id="2d383ca19b495532ea690d9a1e23da833be95661" translate="yes" xml:space="preserve">
          <source>In addition to the artifact repository, you can use the path one, which allows you to depend on a local directory, either absolute or relative. This can be especially useful when dealing with monolithic repositories.</source>
          <target state="translated">아티팩트 저장소 외에도 경로 1을 사용하여 절대 또는 상대 로컬 디렉토리에 의존 할 수 있습니다. 이것은 모 놀리 식 리포지토리를 처리 할 때 특히 유용 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a09fb51e45d167e1f9714cc02e99c769d87f9f3f" translate="yes" xml:space="preserve">
          <source>In addition to the name and the version, there is useful metadata. The information most relevant for installation is the source definition, which describes where to get the package contents. The package data points to the contents of the package. And there are two options here: dist and source.</source>
          <target state="translated">이름과 버전 외에도 유용한 메타 데이터가 있습니다. 설치와 가장 관련이있는 정보는 패키지 정의를 얻을 수있는 위치를 설명하는 소스 정의입니다. 패키지 데이터는 패키지의 내용을 가리 킵니다. 여기에는 dist와 source라는 두 가지 옵션이 있습니다.</target>
        </trans-unit>
        <trans-unit id="aabc722227f77cc44f2dd4ebba9f418fd1086fee" translate="yes" xml:space="preserve">
          <source>In case global configuration matches &lt;em&gt;local&lt;/em&gt; configuration, the &lt;em&gt;local&lt;/em&gt; configuration in the project's &lt;code&gt;composer.json&lt;/code&gt; always wins.</source>
          <target state="translated">글로벌 구성이 &lt;em&gt;로컬&lt;/em&gt; 구성과 일치하는 경우 프로젝트 &lt;code&gt;composer.json&lt;/code&gt; 의 &lt;em&gt;로컬&lt;/em&gt; 구성이 항상 이깁니다.</target>
        </trans-unit>
        <trans-unit id="a232ca8017214f112197ab8a59fc91ab0d6fdc06" translate="yes" xml:space="preserve">
          <source>In case the package root is below the namespace declaration you cannot autoload properly. &lt;code&gt;target-dir&lt;/code&gt; solves this problem.</source>
          <target state="translated">패키지 루트가 네임 스페이스 선언 아래에있는 경우 제대로 자동로드 할 수 없습니다. &lt;code&gt;target-dir&lt;/code&gt; 은이 문제를 해결합니다.</target>
        </trans-unit>
        <trans-unit id="514951e744d431fba84a184763bc0c5182b87a7a" translate="yes" xml:space="preserve">
          <source>In fact, internally Composer sees every version as a separate package. While this distinction does not matter when you are using Composer, it's quite important when you want to change it.</source>
          <target state="translated">실제로 내부 Composer는 모든 버전을 별도의 패키지로 간주합니다. Composer를 사용할 때는이 구분이 중요하지 않지만 변경할 때는 매우 중요합니다.</target>
        </trans-unit>
        <trans-unit id="7fbe0750ceedb244ed354a301496f21ce026f969" translate="yes" xml:space="preserve">
          <source>In order to get the latest versions of the dependencies and to update the &lt;code&gt;composer.lock&lt;/code&gt; file, you should use the &lt;code&gt;update&lt;/code&gt; command. This command is also aliased as &lt;code&gt;upgrade&lt;/code&gt; as it does the same as &lt;code&gt;upgrade&lt;/code&gt; does if you are thinking of &lt;code&gt;apt-get&lt;/code&gt; or similar package managers.</source>
          <target state="translated">최신 버전의 종속성을 가져오고 &lt;code&gt;composer.lock&lt;/code&gt; 파일 을 업데이트 하려면 &lt;code&gt;update&lt;/code&gt; 명령을 사용해야합니다 . 이 명령은 &lt;code&gt;apt-get&lt;/code&gt; 또는 유사한 패키지 관리자를 생각할 때 &lt;code&gt;upgrade&lt;/code&gt; 와 동일하게 &lt;code&gt;upgrade&lt;/code&gt; 로 별명됩니다 .</target>
        </trans-unit>
        <trans-unit id="fa048ba15ab79c443eba36cbe514ccf101c430b5" translate="yes" xml:space="preserve">
          <source>In order to make that package installable you need to give it a name. You do this by adding the &lt;a href=&quot;04-schema.md#name&quot;&gt;&lt;code&gt;name&lt;/code&gt;&lt;/a&gt; property in &lt;code&gt;composer.json&lt;/code&gt;:</source>
          <target state="translated">해당 패키지를 설치 가능하게하려면 이름을 지정해야합니다. &lt;code&gt;composer.json&lt;/code&gt; 에&lt;a href=&quot;04-schema.md#name&quot;&gt; &lt;code&gt;name&lt;/code&gt; &lt;/a&gt; 속성 을 추가하면됩니다 :</target>
        </trans-unit>
        <trans-unit id="f5581c3335e7d368782b7aa61c1110389f74d217" translate="yes" xml:space="preserve">
          <source>In order to use branch aliasing, you must own the repository of the package being aliased. If you want to alias a third party package without maintaining a fork of it, use inline aliases as described below.</source>
          <target state="translated">분기 별명을 사용하려면 별명을 지정할 패키지의 저장소를 소유해야합니다. 포크를 유지하지 않고 써드 파티 패키지의 별명을 지정하려면 아래에 설명 된대로 인라인 별명을 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="1b2b09f7f75da25891d541b08223becf58cd09cd" translate="yes" xml:space="preserve">
          <source>In our example, we are requesting the Monolog package with the version constraint &lt;a href=&quot;https://semver.mwl.be/#?package=monolog%2Fmonolog&amp;amp;version=1.0.*&quot;&gt;&lt;code&gt;1.0.*&lt;/code&gt;&lt;/a&gt;. This means any version in the &lt;code&gt;1.0&lt;/code&gt; development branch, or any version that is greater than or equal to 1.0 and less than 1.1 (&lt;code&gt;&amp;gt;=1.0 &amp;lt;1.1&lt;/code&gt;).</source>
          <target state="translated">이 예에서는 버전 제약 조건이 &lt;a href=&quot;https://semver.mwl.be/#?package=monolog%2Fmonolog&amp;amp;version=1.0.*&quot;&gt; &lt;code&gt;1.0.*&lt;/code&gt; 인&lt;/a&gt; Monolog 패키지를 요청합니다 . 이는 &lt;code&gt;1.0&lt;/code&gt; 개발 분기의 모든 버전 또는 1.0 이상 1.1 미만 ( &lt;code&gt;&amp;gt;=1.0 &amp;lt;1.1&lt;/code&gt; )의 모든 버전을 의미합니다 .</target>
        </trans-unit>
        <trans-unit id="81986004cc1edc50bd4c375d6b69e538384f12f9" translate="yes" xml:space="preserve">
          <source>In the &lt;a href=&quot;02-libraries.md&quot;&gt;Libraries&lt;/a&gt; chapter we looked at how to create a &lt;code&gt;composer.json&lt;/code&gt; by hand. There is also an &lt;code&gt;init&lt;/code&gt; command available that makes it a bit easier to do this.</source>
          <target state="translated">에서 &lt;a href=&quot;02-libraries.md&quot;&gt;라이브러리의&lt;/a&gt; 장 우리는 만드는 방법에 보았다 &lt;code&gt;composer.json&lt;/code&gt; 손을. 도 있습니다 &lt;code&gt;init&lt;/code&gt; 가 좀 더 쉽게이 작업을 수행 할 수 있습니다 사용할 수있는 명령은.</target>
        </trans-unit>
        <trans-unit id="0a2da24732faf864f958efa71b75fa65732d782b" translate="yes" xml:space="preserve">
          <source>In the above example, if you wanted to check out the &lt;code&gt;my-feature&lt;/code&gt; branch, you would specify &lt;code&gt;dev-my-feature&lt;/code&gt; as the version constraint in your &lt;code&gt;require&lt;/code&gt; clause. This would result in Composer cloning the &lt;code&gt;my-library&lt;/code&gt; repository into my &lt;code&gt;vendor&lt;/code&gt; directory and checking out the &lt;code&gt;my-feature&lt;/code&gt; branch.</source>
          <target state="translated">위의 예에서 &lt;code&gt;my-feature&lt;/code&gt; 브랜치 를 체크 아웃하려면 &lt;code&gt;require&lt;/code&gt; 절 에서 &lt;code&gt;dev-my-feature&lt;/code&gt; 를 버전 제약 조건으로 지정합니다 . 이로 인해 Composer는 &lt;code&gt;my-library&lt;/code&gt; 저장소를 &lt;code&gt;vendor&lt;/code&gt; 디렉토리 로 복제 하고 &lt;code&gt;my-feature&lt;/code&gt; 브랜치를 확인합니다.</target>
        </trans-unit>
        <trans-unit id="d5130afafe2bbd873a555483b33693b38146a596" translate="yes" xml:space="preserve">
          <source>In the vast majority of cases, you will be maintaining your library using some sort of version control system like git, svn, hg or fossil. In these cases, Composer infers versions from your VCS and you &lt;strong&gt;should not&lt;/strong&gt; specify a version in your &lt;code&gt;composer.json&lt;/code&gt; file. (See the &lt;a href=&quot;articles/versions.md&quot;&gt;Versions article&lt;/a&gt; to learn about how Composer uses VCS branches and tags to resolve version constraints.)</source>
          <target state="translated">대부분의 경우 git, svn, hg 또는 fossil과 같은 일종의 버전 제어 시스템을 사용하여 라이브러리를 유지 관리합니다. 이 경우 Composer는 VCS에서 버전을 유추 하므로 &lt;code&gt;composer.json&lt;/code&gt; 파일에 버전을 지정 &lt;strong&gt;하지 않아야&lt;/strong&gt; 합니다. Composer가 VCS 분기 및 태그를 사용하여 버전 제약 조건을 해결하는 방법에 대한 자세한 내용은 &lt;a href=&quot;articles/versions.md&quot;&gt;버전 기사&lt;/a&gt; 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="ed442c1bb5da178492831e28d91ea61751721014" translate="yes" xml:space="preserve">
          <source>In these cases you could consider creating a Custom Installer to handle your specific logic.</source>
          <target state="translated">이 경우 특정 논리를 처리하기 위해 사용자 정의 설치 프로그램을 작성하는 것을 고려할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="170a8dbc9b4f77d0bd1614591599fbf7c96848eb" translate="yes" xml:space="preserve">
          <source>In these cases you could consider creating a plugin to handle your specific logic.</source>
          <target state="translated">이 경우 특정 로직을 처리 할 플러그인을 만드는 것을 고려할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="793ba49616bce296e29c482a71377cbea235e2c5" translate="yes" xml:space="preserve">
          <source>In this case the project name is &lt;code&gt;acme/hello-world&lt;/code&gt;, where &lt;code&gt;acme&lt;/code&gt; is the vendor name. Supplying a vendor name is mandatory.</source>
          <target state="translated">이 경우 프로젝트 이름은 &lt;code&gt;acme/hello-world&lt;/code&gt; 이며 여기서 &lt;code&gt;acme&lt;/code&gt; 은 공급 업체 이름입니다. 공급 업체 이름을 제공해야합니다.</target>
        </trans-unit>
        <trans-unit id="c717d3566ef7080f16efa4b5f212a62fcb3d59ad" translate="yes" xml:space="preserve">
          <source>In this case the short name of the channel is &lt;code&gt;pear2&lt;/code&gt;, so the &lt;code&gt;PEAR2_HTTP_Request&lt;/code&gt; package name becomes &lt;code&gt;pear-pear2/PEAR2_HTTP_Request&lt;/code&gt;.</source>
          <target state="translated">이 경우 채널의 짧은 이름은 &lt;code&gt;pear2&lt;/code&gt; 이므로 &lt;code&gt;PEAR2_HTTP_Request&lt;/code&gt; 패키지 이름은 &lt;code&gt;pear-pear2/PEAR2_HTTP_Request&lt;/code&gt; 가 됩니다.</target>
        </trans-unit>
        <trans-unit id="b496889f750f4195a099872e2f6e1aa87dff2efa" translate="yes" xml:space="preserve">
          <source>In this case, Composer will make &lt;code&gt;vendor/my-vendor/project-a/bin/project-a-bin&lt;/code&gt; available as &lt;code&gt;vendor/bin/project-a-bin&lt;/code&gt;. On a Unix-like platform this is accomplished by creating a symlink.</source>
          <target state="translated">이 경우 Composer는 &lt;code&gt;vendor/my-vendor/project-a/bin/project-a-bin&lt;/code&gt; 을 &lt;code&gt;vendor/bin/project-a-bin&lt;/code&gt; 으로 제공 합니다. 유닉스 계열 플랫폼에서 이것은 심볼릭 링크를 생성함으로써 달성됩니다.</target>
        </trans-unit>
        <trans-unit id="a963ad558749f4cae6f3cb3300dfe673677907fc" translate="yes" xml:space="preserve">
          <source>In this case, the PHP &lt;code&gt;memory_limit&lt;/code&gt; should be increased.</source>
          <target state="translated">이 경우 PHP &lt;code&gt;memory_limit&lt;/code&gt; 를 늘려야합니다.</target>
        </trans-unit>
        <trans-unit id="324274df727baf36f83a94f18b8f85c487c1d51b" translate="yes" xml:space="preserve">
          <source>In your projects all you need to add now is your own composer repository using the &lt;code&gt;packages.example.org&lt;/code&gt; as URL, then you can require your private packages and everything should work smoothly. You don't need to copy all your repositories in every project anymore. Only that one unique repository that will update itself.</source>
          <target state="translated">귀하의 프로젝트에서 지금 추가해야 할 것은 URL로 &lt;code&gt;packages.example.org&lt;/code&gt; 를 사용하는 자신의 작곡가 저장소 이므로 개인 패키지가 필요할 수 있으며 모든 것이 원활하게 작동해야합니다. 더 이상 모든 프로젝트의 모든 저장소를 복사 할 필요는 없습니다. 자체적으로 업데이트되는 유일한 리포지토리입니다.</target>
        </trans-unit>
        <trans-unit id="58421e47121f093aa54aa3849421fb584b427a27" translate="yes" xml:space="preserve">
          <source>Including that file will also return the autoloader instance, so you can store the return value of the include call in a variable and add more namespaces. This can be useful for autoloading classes in a test suite, for example.</source>
          <target state="translated">해당 파일을 포함하면 오토로더 인스턴스도 반환되므로 include 호출의 반환 값을 변수에 저장하고 네임 스페이스를 더 추가 할 수 있습니다. 예를 들어, 테스트 스위트에서 클래스를 자동로드하는 데 유용 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="4791f829db2b3e39aa06b77d019786a191286558" translate="yes" xml:space="preserve">
          <source>Inclusive set of versions. Partial versions on the right include are completed with a wildcard. For example &lt;code&gt;1.0 - 2.0&lt;/code&gt; is equivalent to &lt;code&gt;&amp;gt;=1.0.0 &amp;lt;2.1&lt;/code&gt; as the &lt;code&gt;2.0&lt;/code&gt; becomes &lt;code&gt;2.0.*&lt;/code&gt;. On the other hand &lt;code&gt;1.0.0 - 2.1.0&lt;/code&gt; is equivalent to &lt;code&gt;&amp;gt;=1.0.0 &amp;lt;=2.1.0&lt;/code&gt;.</source>
          <target state="translated">포괄적 인 버전 세트. 오른쪽 부분 버전에는 와일드 카드가 포함되어 있습니다. 예를 들어 &lt;code&gt;1.0 - 2.0&lt;/code&gt; 동등 &lt;code&gt;&amp;gt;=1.0.0 &amp;lt;2.1&lt;/code&gt; 은 AS &lt;code&gt;2.0&lt;/code&gt; 해진다 &lt;code&gt;2.0.*&lt;/code&gt; . 반면에 &lt;code&gt;1.0.0 - 2.1.0&lt;/code&gt; 은 &lt;code&gt;&amp;gt;=1.0.0 &amp;lt;=2.1.0&lt;/code&gt; 과 같습니다 .</target>
        </trans-unit>
        <trans-unit id="f69204db48cfe1d2b13b7af95c6b1b35fb75fdf3" translate="yes" xml:space="preserve">
          <source>Indicates whether this package has been abandoned.</source>
          <target state="translated">이 패키지가 폐기되었는지를 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="e10dd585e5e2afa8bd14cac56f251d2de6fe174d" translate="yes" xml:space="preserve">
          <source>Installation - Linux / Unix / macOS</source>
          <target state="translated">설치-Linux / Unix / macOS</target>
        </trans-unit>
        <trans-unit id="76837ac73a7ca41aaf9bcf6e335659ac5b4eb0d2" translate="yes" xml:space="preserve">
          <source>Installation - Windows</source>
          <target state="translated">설치-Windows</target>
        </trans-unit>
        <trans-unit id="f1e881a2224fe5122792e10d0ad077069f2a07cc" translate="yes" xml:space="preserve">
          <source>Installer Events</source>
          <target state="translated">설치자 이벤트</target>
        </trans-unit>
        <trans-unit id="d5bb2ef38f6014141846b3e9d556916c8a004edd" translate="yes" xml:space="preserve">
          <source>Installer Events: &lt;a href=&quot;https://getcomposer.org/apidoc/master/Composer/Installer/InstallerEvent.html&quot;&gt;&lt;code&gt;Composer\Installer\InstallerEvent&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">설치 프로그램 이벤트 : &lt;a href=&quot;https://getcomposer.org/apidoc/master/Composer/Installer/InstallerEvent.html&quot;&gt; &lt;code&gt;Composer\Installer\InstallerEvent&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="2185bce3af0f7dfafcbb1cdcdd31a0ce17c7d717" translate="yes" xml:space="preserve">
          <source>Installing dependencies</source>
          <target state="translated">종속성 설치</target>
        </trans-unit>
        <trans-unit id="6e4592e8c95b8b5a452392334a783ccb721f727f" translate="yes" xml:space="preserve">
          <source>Installing with &lt;code&gt;composer.lock&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;composer.lock&lt;/code&gt; 으로 설치</target>
        </trans-unit>
        <trans-unit id="2ffb7489b0b00521f207ccc72e71117f8946745b" translate="yes" xml:space="preserve">
          <source>Installing without &lt;code&gt;composer.lock&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;composer.lock&lt;/code&gt; 없이 설치</target>
        </trans-unit>
        <trans-unit id="fb948f9b97509ab4b83d0202b63cd87f44f32873" translate="yes" xml:space="preserve">
          <source>Instead of default fallback strategy you can force to use symlink with &lt;code&gt;&quot;symlink&quot;: true&lt;/code&gt; or mirroring with &lt;code&gt;&quot;symlink&quot;: false&lt;/code&gt; option. Forcing mirroring can be useful when deploying or generating package from a monolithic repository.</source>
          <target state="translated">기본 대체 전략 대신 &lt;code&gt;&quot;symlink&quot;: true&lt;/code&gt; 와 함께 symlink를 사용 하거나 &lt;code&gt;&quot;symlink&quot;: false&lt;/code&gt; 옵션 과 함께 미러링을 강제로 사용할 수 있습니다 . 모 놀리 식 리포지토리에서 패키지를 배포하거나 생성 할 때 강제 미러링이 유용 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3089277c7bf15c0f5a062881095ff5217e66742e" translate="yes" xml:space="preserve">
          <source>Internally</source>
          <target state="translated">Internally</target>
        </trans-unit>
        <trans-unit id="2473e96bc614a911821242119918a241a41836d6" translate="yes" xml:space="preserve">
          <source>Introduction</source>
          <target state="translated">Introduction</target>
        </trans-unit>
        <trans-unit id="a961ea723a682c40aadfeddfdbe09d83b7f6ddff" translate="yes" xml:space="preserve">
          <source>It can be boolean or a package name/URL pointing to a recommended alternative.</source>
          <target state="translated">부울이거나 권장되는 대체 방법을 가리키는 패키지 이름 / URL 일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="75731472d443051a88f8e3db5c6bb1a963dfc837" translate="yes" xml:space="preserve">
          <source>It instructs Composer to install the package's binaries to &lt;code&gt;vendor/bin&lt;/code&gt; for any project that &lt;strong&gt;depends&lt;/strong&gt; on that project.</source>
          <target state="translated">Composer 는 해당 프로젝트에 &lt;strong&gt;종속&lt;/strong&gt; 된 프로젝트 의 패키지 바이너리를 &lt;code&gt;vendor/bin&lt;/code&gt; 에 설치하도록 지시 합니다.&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ebd9d8878f4e1d5e19cd618e1e3280c80110bef0" translate="yes" xml:space="preserve">
          <source>It is also possible to inline-alias a package constraint so that it matches a constraint that it otherwise would not. For more information &lt;a href=&quot;articles/aliases.md&quot;&gt;see the aliases article&lt;/a&gt;.</source>
          <target state="translated">패키지 제약 조건을 인라인 별칭으로 지정하여 그렇지 않은 제약 조건과 일치시킬 수도 있습니다. 자세한 내용 &lt;a href=&quot;articles/aliases.md&quot;&gt;은 aliases article을 참조하십시오&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="f1701bb7c05ef8c8846ba5dbd9b146867982796b" translate="yes" xml:space="preserve">
          <source>It is also possible to run the command without params in a directory with an existing &lt;code&gt;composer.json&lt;/code&gt; file to bootstrap a project.</source>
          <target state="translated">기존 &lt;code&gt;composer.json&lt;/code&gt; 파일이 있는 디렉토리에서 매개 변수없이 명령을 실행하여 프로젝트를 부트 스트랩 할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="812c26e53095ee59b36e6192646c8eadab90da06" translate="yes" xml:space="preserve">
          <source>It is defined by adding the &lt;code&gt;bin&lt;/code&gt; key to a project's &lt;code&gt;composer.json&lt;/code&gt;. It is specified as an array of files so multiple binaries can be added for any given project.</source>
          <target state="translated">&lt;code&gt;bin&lt;/code&gt; 키를 프로젝트의 &lt;code&gt;composer.json&lt;/code&gt; 에 추가하여 정의됩니다 . 주어진 프로젝트에 대해 여러 바이너리를 추가 할 수 있도록 파일 배열로 지정됩니다.</target>
        </trans-unit>
        <trans-unit id="f972ca266357af82698d3ce7ec46d2e7b1589618" translate="yes" xml:space="preserve">
          <source>It is possible to alias PEAR channel packages with a custom vendor name.</source>
          <target state="translated">사용자 지정 공급 업체 이름으로 PEAR 채널 패키지의 별명을 지정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="bce0e2f917ce9777e7806b5d4a2c61107711704c" translate="yes" xml:space="preserve">
          <source>It is possible to install packages from any PEAR channel by using the &lt;code&gt;pear&lt;/code&gt; repository. Composer will prefix all package names with &lt;code&gt;pear-{channelName}/&lt;/code&gt; to avoid conflicts. All packages are also aliased with prefix &lt;code&gt;pear-{channelAlias}/&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;pear&lt;/code&gt; 저장소 를 사용하여 모든 PEAR 채널에서 패키지를 설치할 수 있습니다 . Composer는 충돌을 피하기 위해 모든 패키지 이름 앞에 &lt;code&gt;pear-{channelName}/&lt;/code&gt; 을 붙 입니다. 모든 패키지는 접두사 &lt;code&gt;pear-{channelAlias}/&lt;/code&gt; 로 별칭이 지정됩니다 .</target>
        </trans-unit>
        <trans-unit id="20da6f1f5d601bd4c92b807a8c8d91dbc3566e9d" translate="yes" xml:space="preserve">
          <source>It is possible to make satis automatically resolve and add all dependencies for your projects. This can be used with the Downloads functionality to have a complete local mirror of packages. Add the following to your &lt;code&gt;satis.json&lt;/code&gt;:</source>
          <target state="translated">satis를 자동으로 해결하고 프로젝트에 대한 모든 종속성을 추가 할 수 있습니다. 이를 다운로드 기능과 함께 사용하여 패키지의 완전한 로컬 미러를 가질 수 있습니다. &lt;code&gt;satis.json&lt;/code&gt; 에 다음을 추가하십시오 .</target>
        </trans-unit>
        <trans-unit id="ca67ab1d1939601285ad03b6ac304cb65650bfc6" translate="yes" xml:space="preserve">
          <source>It may include any of the other fields specified in the &lt;a href=&quot;04-schema.md&quot;&gt;schema&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;04-schema.md&quot;&gt;스키마에&lt;/a&gt; 지정된 다른 필드를 포함 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="f6dce6ad8bf561cb3edb056891527e20b965d26a" translate="yes" xml:space="preserve">
          <source>It's also possible to set the global environment variable to disable the timeout of all following scripts in the current terminal environment:</source>
          <target state="translated">현재 터미널 환경에서 다음 스크립트의 시간 초과를 비활성화하도록 전역 환경 변수를 설정할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="1a5fdc02561b421ddd2832ed52db04d9182f02fd" translate="yes" xml:space="preserve">
          <source>JSON Schema</source>
          <target state="translated">JSON 스키마</target>
        </trans-unit>
        <trans-unit id="56063a235ba093ec4ad8756556e3c89fce47c420" translate="yes" xml:space="preserve">
          <source>JSON schema</source>
          <target state="translated">JSON 스키마</target>
        </trans-unit>
        <trans-unit id="6ccc57a8ec29ead468f4b6e64fdc72971898b7e5" translate="yes" xml:space="preserve">
          <source>LGPL-2.1-only / LGPL-2.1-or-later</source>
          <target state="translated">LGPL-2.1 전용 / LGPL-2.1 이상</target>
        </trans-unit>
        <trans-unit id="cee59ed970b6f0f108ee08f93c956dbacca4badc" translate="yes" xml:space="preserve">
          <source>LGPL-3.0-only / LGPL-3.0-or-later</source>
          <target state="translated">LGPL-3.0 전용 / LGPL-3.0 이상</target>
        </trans-unit>
        <trans-unit id="04a80eef404b788c2ac3096db7191dcd5c52bde5" translate="yes" xml:space="preserve">
          <source>Leading tildes are expanded to the current user's home folder, and environment variables are parsed in both Windows and Linux/Mac notations. For example &lt;code&gt;~/git/mypackage&lt;/code&gt; will automatically load the mypackage clone from &lt;code&gt;/home/&amp;lt;username&amp;gt;/git/mypackage&lt;/code&gt;, equivalent to &lt;code&gt;$HOME/git/mypackage&lt;/code&gt; or &lt;code&gt;%USERPROFILE%/git/mypackage&lt;/code&gt;.</source>
          <target state="translated">선행 물결표가 현재 사용자의 홈 폴더로 확장되고 환경 변수가 Windows 및 Linux / Mac 표기법으로 구문 분석됩니다. 예를 들어 &lt;code&gt;~/git/mypackage&lt;/code&gt; 는 &lt;code&gt;/home/&amp;lt;username&amp;gt;/git/mypackage&lt;/code&gt; 에서 &lt;code&gt;$HOME/git/mypackage&lt;/code&gt; 또는 &lt;code&gt;%USERPROFILE%/git/mypackage&lt;/code&gt; 와 동일한 mypackage 복제본을 자동으로로드합니다 .</target>
        </trans-unit>
        <trans-unit id="6115eb8222524faf94a1fd28058cb3eed07fe3ff" translate="yes" xml:space="preserve">
          <source>Let's say your project depends on package A, which in turn depends on a specific version of package B (say 0.1). But you need a different version of said package B (say 0.11).</source>
          <target state="translated">프로젝트가 패키지 A에 의존하고 패키지 B의 특정 버전 (예 : 0.1)에 의존한다고 가정 해 봅시다. 그러나 다른 패키지 B 버전 (예 : 0.11)이 필요합니다.</target>
        </trans-unit>
        <trans-unit id="d150eb83739732c4183bc14cdcc3456ee159d0e2" translate="yes" xml:space="preserve">
          <source>Lets you fake platform packages (PHP and extensions) so that you can emulate a production env or define your target platform in the config. Example: &lt;code&gt;{&quot;php&quot;: &quot;7.0.3&quot;, &quot;ext-something&quot;: &quot;4.0.3&quot;}&lt;/code&gt;.</source>
          <target state="translated">프로덕션 환경을 에뮬레이션하거나 구성에서 대상 플랫폼을 정의 할 수 있도록 플랫폼 패키지 (PHP 및 확장)를 위조 할 수 있습니다. 예 : &lt;code&gt;{&quot;php&quot;: &quot;7.0.3&quot;, &quot;ext-something&quot;: &quot;4.0.3&quot;}&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="27c968e6692b41bf6e1a241b870dc41ff1a51b17" translate="yes" xml:space="preserve">
          <source>Libraries</source>
          <target state="translated">Libraries</target>
        </trans-unit>
        <trans-unit id="bfa04fb368a5e0983364490b2e0a25c4b7186a60" translate="yes" xml:space="preserve">
          <source>Library Versioning</source>
          <target state="translated">라이브러리 버전 관리</target>
        </trans-unit>
        <trans-unit id="58fd3b1b83cc7fc933d72fe934bdb6e534441281" translate="yes" xml:space="preserve">
          <source>Licensed under the MIT License.</source>
          <target state="translated">MIT 라이센스에 따라 라이센스가 부여되었습니다.</target>
        </trans-unit>
        <trans-unit id="92852867281c5fe7ebe05f70897286a34e6ea878" translate="yes" xml:space="preserve">
          <source>List of other packages that are provided by this package. This is mostly useful for common interfaces. A package could depend on some virtual &lt;code&gt;logger&lt;/code&gt; package, any library that implements this logger interface would simply list it in &lt;code&gt;provide&lt;/code&gt;.</source>
          <target state="translated">이 패키지에서 제공하는 다른 패키지 목록. 이것은 대부분 공통 인터페이스에 유용합니다. 패키지는 일부 가상 &lt;code&gt;logger&lt;/code&gt; 패키지 에 의존 할 수 있으며 ,이 로거 인터페이스를 구현하는 모든 라이브러리는 단순히로 &lt;code&gt;provide&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="9964d59d546e2e351e6b893948b041ecb483b85c" translate="yes" xml:space="preserve">
          <source>Lists all packages suggested by currently installed set of packages. You can optionally pass one or multiple package names in the format of &lt;code&gt;vendor/package&lt;/code&gt; to limit output to suggestions made by those packages only.</source>
          <target state="translated">현재 설치된 패키지 세트에서 제안한 모든 패키지를 나열합니다. 선택적으로 &lt;code&gt;vendor/package&lt;/code&gt; 형식으로 하나 이상의 패키지 이름을 전달 하여 해당 패키지의 제안으로 만 출력을 제한 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="67693068fa45e351323ce3ae6696a59d9281155f" translate="yes" xml:space="preserve">
          <source>Lists packages required by this package. The package will not be installed unless those requirements can be met.</source>
          <target state="translated">이 패키지에 필요한 패키지를 나열합니다. 해당 요구 사항을 충족하지 않으면 패키지가 설치되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="57a8af45ed1f93453f445887172684b97b1e5d0c" translate="yes" xml:space="preserve">
          <source>Lists packages required for developing this package, or running tests, etc. The dev requirements of the root package are installed by default. Both &lt;code&gt;install&lt;/code&gt; or &lt;code&gt;update&lt;/code&gt; support the &lt;code&gt;--no-dev&lt;/code&gt; option that prevents dev dependencies from being installed.</source>
          <target state="translated">이 패키지를 개발하거나 테스트를 실행하는 데 필요한 패키지를 나열합니다. 루트 패키지의 dev 요구 사항은 기본적으로 설치됩니다. &lt;code&gt;install&lt;/code&gt; 또는 &lt;code&gt;update&lt;/code&gt; 는 모두 dev 종속성이 설치되지 않도록 하는 &lt;code&gt;--no-dev&lt;/code&gt; 옵션을 지원합니다 .</target>
        </trans-unit>
        <trans-unit id="7c9efbb6b043ec1ede887fd2eab1b41e770a97af" translate="yes" xml:space="preserve">
          <source>Lists packages that are replaced by this package. This allows you to fork a package, publish it under a different name with its own version numbers, while packages requiring the original package continue to work with your fork because it replaces the original package.</source>
          <target state="translated">이 패키지로 교체 된 패키지를 나열합니다. 이를 통해 패키지를 포크하고 고유 한 버전 번호를 가진 다른 이름으로 패키지를 게시 할 수 있으며 원래 패키지를 필요로하는 패키지는 원래 패키지를 대체하므로 포크와 계속 작동합니다.</target>
        </trans-unit>
        <trans-unit id="2424c6a9d887557b6e5c88b7812c8eda4c6edee6" translate="yes" xml:space="preserve">
          <source>Lists packages that conflict with this version of this package. They will not be allowed to be installed together with your package.</source>
          <target state="translated">이 버전의이 패키지와 충돌하는 패키지를 나열합니다. 패키지와 함께 설치할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="b290639a378efa8d0461f9052cc8455a8022f8fa" translate="yes" xml:space="preserve">
          <source>Lists the name, version and license of every package installed. Use &lt;code&gt;--format=json&lt;/code&gt; to get machine readable output.</source>
          <target state="translated">설치된 모든 패키지의 이름, 버전 및 라이센스를 나열합니다. &lt;code&gt;--format=json&lt;/code&gt; 을 사용 하여 기계가 읽을 수있는 출력을 얻으십시오.</target>
        </trans-unit>
        <trans-unit id="3bffbc8e6cfafc13c95a1ceacb012f9aad3c63b0" translate="yes" xml:space="preserve">
          <source>Loading a package from a VCS repository</source>
          <target state="translated">VCS 저장소에서 패키지로드</target>
        </trans-unit>
        <trans-unit id="e93141d83b8039749e1ed013e1831599e1264246" translate="yes" xml:space="preserve">
          <source>Locally</source>
          <target state="translated">Locally</target>
        </trans-unit>
        <trans-unit id="e398e289ecf1e6bf36e8b61d84c66dd67ec4b4bd" translate="yes" xml:space="preserve">
          <source>Location of Certificate Authority file on local filesystem. In PHP 5.6+ you should rather set this via openssl.cafile in php.ini, although PHP 5.6+ should be able to detect your system CA file automatically.</source>
          <target state="translated">로컬 파일 시스템에서 인증 기관 파일의 위치 PHP 5.6+에서는 php.ini의 openssl.cafile을 통해이를 설정해야하지만 PHP 5.6+는 시스템 CA 파일을 자동으로 감지 할 수 있어야합니다.</target>
        </trans-unit>
        <trans-unit id="f1310cac3ef8c63b05825909f7fce70ea9e456dd" translate="yes" xml:space="preserve">
          <source>Lock file</source>
          <target state="translated">파일 잠금</target>
        </trans-unit>
        <trans-unit id="89690ac571dcf4c9c40c842efed3f11171d07b29" translate="yes" xml:space="preserve">
          <source>MIT</source>
          <target state="translated">MIT</target>
        </trans-unit>
        <trans-unit id="f9965c47af74ea6d77810c86b1fdead400609d1f" translate="yes" xml:space="preserve">
          <source>Mailing lists for &lt;a href=&quot;https://groups.google.com/group/composer-users&quot;&gt;user support&lt;/a&gt; and &lt;a href=&quot;https://groups.google.com/group/composer-dev&quot;&gt;development&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://groups.google.com/group/composer-users&quot;&gt;사용자 지원&lt;/a&gt; 및 &lt;a href=&quot;https://groups.google.com/group/composer-dev&quot;&gt;개발을&lt;/a&gt; 위한 메일 링리스트 .</target>
        </trans-unit>
        <trans-unit id="09afead4c4b37b59df1a8776647a9a30ed1c4fd2" translate="yes" xml:space="preserve">
          <source>Make sure you have no problems with your setup by running the installer's checks via &lt;code&gt;curl -sS https://getcomposer.org/installer | php -- --check&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;curl -sS https://getcomposer.org/installer | php -- --check&lt;/code&gt; 를 통해 설치 프로그램 검사를 실행하여 설정에 문제가 없는지 확인하십시오. PHP - --check .</target>
        </trans-unit>
        <trans-unit id="a7dbbb4172263077674577b2683165b09aa78cdb" translate="yes" xml:space="preserve">
          <source>Manual Installation</source>
          <target state="translated">수동 설치</target>
        </trans-unit>
        <trans-unit id="1c3f45515cc28f74919408ffa9ca1a39a38b78f1" translate="yes" xml:space="preserve">
          <source>Memory limit errors</source>
          <target state="translated">메모리 제한 오류</target>
        </trans-unit>
        <trans-unit id="8752821c95f2b75d4dc8449c22b28ade8698a073" translate="yes" xml:space="preserve">
          <source>Minimum Stability</source>
          <target state="translated">최소 안정성</target>
        </trans-unit>
        <trans-unit id="3ea0c857ba165aef26712171a2a706b53b8a0468" translate="yes" xml:space="preserve">
          <source>Modifying Extra Values</source>
          <target state="translated">추가 값 수정</target>
        </trans-unit>
        <trans-unit id="91e2a3d97529d7420f188c7aaf45493ca9ec4280" translate="yes" xml:space="preserve">
          <source>Modifying Repositories</source>
          <target state="translated">리포지토리 수정</target>
        </trans-unit>
        <trans-unit id="f76fee3286f84871a39a5e5f7f2503a3abf7f498" translate="yes" xml:space="preserve">
          <source>Must be in &lt;code&gt;YYYY-MM-DD&lt;/code&gt; or &lt;code&gt;YYYY-MM-DD HH:MM:SS&lt;/code&gt; format.</source>
          <target state="translated">&lt;code&gt;YYYY-MM-DD&lt;/code&gt; 또는 &lt;code&gt;YYYY-MM-DD HH:MM:SS&lt;/code&gt; 형식 이어야 합니다.</target>
        </trans-unit>
        <trans-unit id="4025b616f677202a7be84eb179a61bc894d1cd18" translate="yes" xml:space="preserve">
          <source>Namespace prefixes must end in &lt;code&gt;\\&lt;/code&gt; to avoid conflicts between similar prefixes. For example &lt;code&gt;Foo&lt;/code&gt; would match classes in the &lt;code&gt;FooBar&lt;/code&gt; namespace so the trailing backslashes solve the problem: &lt;code&gt;Foo\\&lt;/code&gt; and &lt;code&gt;FooBar\\&lt;/code&gt; are distinct.</source>
          <target state="translated">네임 스페이스 접두사는 &lt;code&gt;\\&lt;/code&gt; 로 끝나야 유사한 접두사 간의 충돌을 피할 수 있습니다. 예를 들어 &lt;code&gt;Foo&lt;/code&gt; 는 &lt;code&gt;FooBar&lt;/code&gt; 네임 스페이스의 클래스와 일치 하므로 후행 백 슬래시로 문제가 해결됩니다. &lt;code&gt;Foo\\&lt;/code&gt; 및 &lt;code&gt;FooBar\\&lt;/code&gt; 는 고유합니다.</target>
        </trans-unit>
        <trans-unit id="fc3e4b461b8b1cf9a32915e44b9c1d726c407755" translate="yes" xml:space="preserve">
          <source>Need to override a package version</source>
          <target state="translated">패키지 버전을 재정의해야합니다.</target>
        </trans-unit>
        <trans-unit id="28ee11c63fdc46b8c878bc353cf5dfd2cbbb147d" translate="yes" xml:space="preserve">
          <source>Next Significant Release Operators</source>
          <target state="translated">다음 주요 릴리스 운영자</target>
        </trans-unit>
        <trans-unit id="39c736c92084eab192eb0796662a0f1c7f600808" translate="yes" xml:space="preserve">
          <source>Normally, Composer deals with tags (as opposed to branches -- if you don't know what this means, read up on &lt;a href=&quot;https://en.wikipedia.org/wiki/Version_control#Common_vocabulary&quot;&gt;version control systems&lt;/a&gt;). When you write a version constraint, it may reference a specific tag (e.g., &lt;code&gt;1.1&lt;/code&gt;) or it may reference a valid range of tags (e.g., &lt;code&gt;&amp;gt;=1.1 &amp;lt;2.0&lt;/code&gt;, or &lt;code&gt;~4.0&lt;/code&gt;). To resolve these constraints, Composer first asks the VCS to list all available tags, then creates an internal list of available versions based on these tags. In the above example, composer's internal list includes versions &lt;code&gt;1.0&lt;/code&gt;, &lt;code&gt;1.0.1&lt;/code&gt;, &lt;code&gt;1.0.2&lt;/code&gt;, the beta release of &lt;code&gt;1.1&lt;/code&gt;, the first and second release candidates of &lt;code&gt;1.1&lt;/code&gt;, the final release version &lt;code&gt;1.1&lt;/code&gt;, etc.... (Note that Composer automatically removes the 'v' prefix in the actual tagname to get a valid final version number.)</source>
          <target state="translated">일반적으로 Composer는 브랜치와 달리 태그를 처리합니다 (이 의미가 무엇인지 모르는 경우 &lt;a href=&quot;https://en.wikipedia.org/wiki/Version_control#Common_vocabulary&quot;&gt;버전 관리 시스템을&lt;/a&gt; 읽어보십시오 ). 버전 제약 조건을 작성할 때 특정 태그 (예 : &lt;code&gt;1.1&lt;/code&gt; )를 참조하거나 유효한 태그 범위 (예 : &lt;code&gt;&amp;gt;=1.1 &amp;lt;2.0&lt;/code&gt; 또는 &lt;code&gt;~4.0&lt;/code&gt; )를 참조 할 수 있습니다. 이러한 제약 조건을 해결하기 위해 Composer는 먼저 VCS에 사용 가능한 모든 태그를 나열하도록 요청한 다음이 태그를 기반으로 사용 가능한 버전의 내부 목록을 만듭니다. 위의 예제에서 작곡가의 내부 목록에는 버전 &lt;code&gt;1.0&lt;/code&gt; , &lt;code&gt;1.0.1&lt;/code&gt; , &lt;code&gt;1.0.2&lt;/code&gt; , 베타 릴리스 &lt;code&gt;1.1&lt;/code&gt; , 첫 번째 및 두 번째 릴리스 후보 &lt;code&gt;1.1&lt;/code&gt; 이 포함됩니다, 최종 출시 버전 &lt;code&gt;1.1&lt;/code&gt; 등 ... (Composer는 유효한 최종 버전 번호를 얻기 위해 실제 태그 이름에서 'v'접두사를 자동으로 제거합니다.)</target>
        </trans-unit>
        <trans-unit id="66ec2e93672c49b92fb864b93b03dba5a399c1ee" translate="yes" xml:space="preserve">
          <source>Note that all packages set as abandoned in their own &lt;code&gt;composer.json&lt;/code&gt; file will be marked abandoned as well.</source>
          <target state="translated">자체 &lt;code&gt;composer.json&lt;/code&gt; 파일에 버려진 것으로 설정된 모든 패키지도 버려진 것으로 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="21967d75d7258073c7e7e8056ae0005a275d4501" translate="yes" xml:space="preserve">
          <source>Note that if your private packages are hosted on GitHub, your server should have an ssh key that gives it access to those packages, and then you should add the &lt;code&gt;--no-interaction&lt;/code&gt; (or &lt;code&gt;-n&lt;/code&gt;) flag to the command to make sure it falls back to ssh key authentication instead of prompting for a password. This is also a good trick for continuous integration servers.</source>
          <target state="translated">개인 패키지가 GitHub에서 호스팅되는 경우 서버에 해당 패키지에 대한 액세스를 제공하는 ssh 키가 있어야 하며 명령에 &lt;code&gt;--no-interaction&lt;/code&gt; (또는 &lt;code&gt;-n&lt;/code&gt; ) 플래그를 추가 해야합니다. 암호를 묻지 않고 ssh 키 인증으로 돌아갑니다. 이것은 지속적인 통합 서버에 대한 좋은 트릭입니다.</target>
        </trans-unit>
        <trans-unit id="eb8ff490b71790f9c09f4f22c1a128673037a74b" translate="yes" xml:space="preserve">
          <source>Note that this will still need to pull and scan all of your VCS repositories because any VCS repository might contain (on any branch) one of the selected packages.</source>
          <target state="translated">VCS 리포지토리에는 선택한 패키지 중 하나가 포함되어 있기 때문에 모든 VCS 리포지토리를 가져 와서 스캔해야합니다.</target>
        </trans-unit>
        <trans-unit id="f01bc369850f21ecb0b302f70e46cf0c42088b86" translate="yes" xml:space="preserve">
          <source>Note that when specifying ranges like &lt;code&gt;&amp;lt;1.0 &amp;gt;=1.1&lt;/code&gt; in a &lt;code&gt;conflict&lt;/code&gt; link, this will state a conflict with all versions that are less than 1.0 &lt;em&gt;and&lt;/em&gt; equal or newer than 1.1 at the same time, which is probably not what you want. You probably want to go for &lt;code&gt;&amp;lt;1.0 || &amp;gt;=1.1&lt;/code&gt; in this case.</source>
          <target state="translated">지정 범위이 좋아하는 때주의 &lt;code&gt;&amp;lt;1.0 &amp;gt;=1.1&lt;/code&gt; A의 &lt;code&gt;conflict&lt;/code&gt; 링크이 1.0 이하 모든 버전과 충돌 상태 것이다 &lt;em&gt;및&lt;/em&gt; 당신이 원하는 아마 인 동시에,에서와 동일하거나 1.1보다 최신 버전입니다. 아마도 &lt;code&gt;&amp;lt;1.0 || &amp;gt;=1.1&lt;/code&gt; 이 경우 &amp;gt; = 1.1 입니다.</target>
        </trans-unit>
        <trans-unit id="349b8b2d44121046ce03f6a242ab3742d620205a" translate="yes" xml:space="preserve">
          <source>Note that you can also specify platform requirements, for example to check whether you can upgrade your server to PHP 8.0:</source>
          <target state="translated">예를 들어 서버를 PHP 8.0으로 업그레이드 할 수 있는지 확인하기 위해 플랫폼 요구 사항을 지정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f8d858dc9f61c771e304c17678cf573f732e62b5" translate="yes" xml:space="preserve">
          <source>Note that you should not rename the package unless you really intend to fork it in the long term, and completely move away from the original package. Composer will correctly pick your package over the original one since the custom repository has priority over packagist. If you want to rename the package, you should do so in the default (often master) branch and not in a feature branch, since the package name is taken from the default branch.</source>
          <target state="translated">실제로 장기적으로 포크하려는 경우가 아니라면 패키지 이름을 바꾸지 말고 원래 패키지에서 완전히 옮기십시오. 사용자 정의 저장소가 packagist보다 우선하므로 Composer가 패키지를 원래 패키지보다 올바르게 선택합니다. 패키지 이름을 바꾸려면 패키지 이름이 기본 분기에서 가져 오기 때문에 기능 분기가 아닌 기본 (종종 마스터) 분기에서 이름을 변경해야합니다.</target>
        </trans-unit>
        <trans-unit id="65627b96ba23d8784652148c698d095d8aa281c4" translate="yes" xml:space="preserve">
          <source>Note: This can not be combined with Level 2/A optimizations. You have to choose one as they address the same issue in different ways.</source>
          <target state="translated">참고 : 레벨 2 / A 최적화와 함께 사용할 수 없습니다. 서로 다른 방식으로 동일한 문제를 해결하므로 하나를 선택해야합니다.</target>
        </trans-unit>
        <trans-unit id="a5ff623c6e03990dd6b7700d8d7c9f6a47910f9d" translate="yes" xml:space="preserve">
          <source>Note: This can not be combined with Level 2/B optimizations. You have to choose one as they address the same issue in different ways.</source>
          <target state="translated">참고 : 레벨 2 / B 최적화와 함께 사용할 수 없습니다. 서로 다른 방식으로 동일한 문제를 해결하므로 하나를 선택해야합니다.</target>
        </trans-unit>
        <trans-unit id="387af04d85e51dc7c42b167c7882a89f1e6dcdb8" translate="yes" xml:space="preserve">
          <source>Now Composer should install/update without asking for authentication.</source>
          <target state="translated">이제 Composer는 인증을 요구하지 않고 설치 / 업데이트해야합니다.</target>
        </trans-unit>
        <trans-unit id="9263c718ae240bde8332cbe309524bedf436eeb2" translate="yes" xml:space="preserve">
          <source>Now run &lt;code&gt;composer&lt;/code&gt; in order to run Composer instead of &lt;code&gt;php composer.phar&lt;/code&gt;.</source>
          <target state="translated">이제 실행 &lt;code&gt;composer&lt;/code&gt; 실행 작곡가 대신하기 위해 &lt;code&gt;php composer.phar&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="b4e7cc9974d34dfe545130531200e0ad3cd778a8" translate="yes" xml:space="preserve">
          <source>Now run &lt;code&gt;php bin/composer&lt;/code&gt; in order to run Composer.</source>
          <target state="translated">이제 Composer를 실행하기 위해 &lt;code&gt;php bin/composer&lt;/code&gt; 를 실행하십시오.</target>
        </trans-unit>
        <trans-unit id="7e592a51014fd9c1cdc6d0842c0a3d7115a7ee5d" translate="yes" xml:space="preserve">
          <source>Now run &lt;code&gt;php composer.phar&lt;/code&gt; in order to run Composer.</source>
          <target state="translated">이제 Composer를 실행하려면 &lt;code&gt;php composer.phar&lt;/code&gt; 를 실행하십시오.</target>
        </trans-unit>
        <trans-unit id="2fab28bb5852f336cde499074da143417cfa4131" translate="yes" xml:space="preserve">
          <source>Now that you have an idea of how Composer sees versions, let's talk about how to specify version constraints for your project dependencies.</source>
          <target state="translated">이제 Composer가 버전을 보는 방법에 대한 아이디어를 얻었으므로 프로젝트 종속성에 대한 버전 제약 조건을 지정하는 방법에 대해 살펴 보겠습니다.</target>
        </trans-unit>
        <trans-unit id="3fe810793472cdd189145b4ace481ad873c4b2f7" translate="yes" xml:space="preserve">
          <source>Now that you've installed Composer, you are ready to use it! Head on over to the next chapter for a short and simple demonstration.</source>
          <target state="translated">이제 Composer를 설치 했으므로 사용할 준비가되었습니다! 짧고 간단한 데모를 위해 다음 장으로 넘어가십시오.</target>
        </trans-unit>
        <trans-unit id="2bd3a570efb4d8c629a0ee8a6d69ac026d9eacac" translate="yes" xml:space="preserve">
          <source>Now the &lt;code&gt;custom-plugin-command&lt;/code&gt; is available alongside Composer commands.</source>
          <target state="translated">이제 &lt;code&gt;custom-plugin-command&lt;/code&gt; 를 Composer 명령과 함께 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e9e6eca78d466b159aa78053709e4ad719a70c6b" translate="yes" xml:space="preserve">
          <source>Now the &lt;code&gt;php-cs-fixer&lt;/code&gt; binary is available globally. Make sure your global &lt;a href=&quot;articles/vendor-binaries.md&quot;&gt;vendor binaries&lt;/a&gt; directory is in your &lt;code&gt;$PATH&lt;/code&gt; environment variable, you can get its location with the following command :</source>
          <target state="translated">이제 &lt;code&gt;php-cs-fixer&lt;/code&gt; 바이너리는 전 세계적으로 사용 가능합니다. 글로벌 &lt;a href=&quot;articles/vendor-binaries.md&quot;&gt;벤더 바이너리&lt;/a&gt; 디렉토리가 &lt;code&gt;$PATH&lt;/code&gt; 환경 변수에 있는지 확인하십시오 . 다음 명령으로 해당 위치를 얻을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="1476aa89b57099f5cad68b9f9cf684fc7a4f638e" translate="yes" xml:space="preserve">
          <source>Now we need to tell the blog app where to find the &lt;code&gt;hello-world&lt;/code&gt; dependency. We do this by adding a package repository specification to the blog's &lt;code&gt;composer.json&lt;/code&gt;:</source>
          <target state="translated">이제 블로그 앱에 &lt;code&gt;hello-world&lt;/code&gt; 종속성 을 찾을 수있는 위치를 알려줘야합니다 . 블로그의 &lt;code&gt;composer.json&lt;/code&gt; 에 패키지 저장소 사양을 추가하면됩니다 :</target>
        </trans-unit>
        <trans-unit id="32ce30c25194aacb1ca0174ad92a44bfeacc8bf6" translate="yes" xml:space="preserve">
          <source>Now, to test installing the &lt;code&gt;acme/hello-world&lt;/code&gt; package, we create a new project locally. We will call it &lt;code&gt;acme/blog&lt;/code&gt;. This blog will depend on &lt;code&gt;acme/hello-world&lt;/code&gt;, which in turn depends on &lt;code&gt;monolog/monolog&lt;/code&gt;. We can accomplish this by creating a new &lt;code&gt;blog&lt;/code&gt; directory somewhere, containing a &lt;code&gt;composer.json&lt;/code&gt;:</source>
          <target state="translated">이제 &lt;code&gt;acme/hello-world&lt;/code&gt; 패키지 설치를 테스트하기 위해 로컬로 새 프로젝트를 만듭니다. 우리는 그것을 &lt;code&gt;acme/blog&lt;/code&gt; 라고 부를 것 입니다. 이 블로그는 &lt;code&gt;acme/hello-world&lt;/code&gt; 에 의존하며, &lt;code&gt;monolog/monolog&lt;/code&gt; 에 의존합니다 . &lt;code&gt;composer.json&lt;/code&gt; 을 포함하는 새로운 &lt;code&gt;blog&lt;/code&gt; 디렉토리 를 작성하여이를 수행 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="4587b368346a74605e0d40b442bfdf26f03c54d5" translate="yes" xml:space="preserve">
          <source>On PHP 5.6+, the class map is also cached in opcache which improves the initialization time greatly. If you make sure opcache is enabled, then the class map should load almost instantly and then class loading is fast.</source>
          <target state="translated">PHP 5.6 이상에서는 클래스 맵이 opcache에 캐시되어 초기화 시간이 크게 향상됩니다. opcache가 활성화되어 있으면 클래스 맵이 거의 즉시로드되고 클래스 로딩이 빠릅니다.</target>
        </trans-unit>
        <trans-unit id="ae3c3db6d2a031bc3ad36779c6b3e1cdc1fa2c2a" translate="yes" xml:space="preserve">
          <source>On linux, it seems that running this command helps to make ipv4 traffic have a higher prio than ipv6, which is a better alternative than disabling ipv6 entirely:</source>
          <target state="translated">Linux에서이 명령을 실행하면 ipv4 트래픽이 ipv6보다 높은 prio를 갖는 데 도움이되는 것 같습니다. ipv6를 완전히 비활성화하는 것보다 더 나은 대안입니다.</target>
        </trans-unit>
        <trans-unit id="4cfae3e0baae856236b797ca3f70b48ef9740a1d" translate="yes" xml:space="preserve">
          <source>On windows the only way is to disable ipv6 entirely I am afraid (either in windows or in your home router).</source>
          <target state="translated">Windows에서 유일한 방법은 ipv6을 완전히 비활성화하는 것입니다 (Windows 또는 홈 라우터에서).</target>
        </trans-unit>
        <trans-unit id="f4caa5db27c7bbfc7acf3e76298574742a7900d8" translate="yes" xml:space="preserve">
          <source>Once enabled, all downloads (include those from GitHub and BitBucket) will be replaced with a &lt;em&gt;local&lt;/em&gt; version.</source>
          <target state="translated">활성화되면 모든 다운로드 (GitHub 및 BitBucket의 다운로드 포함)가 &lt;em&gt;로컬&lt;/em&gt; 버전 으로 대체됩니다 .</target>
        </trans-unit>
        <trans-unit id="3c8ecb0a49d67dfd20f0c2a0a5ec46c497e69fbc" translate="yes" xml:space="preserve">
          <source>Once you have a VCS repository (version control system, e.g. git) containing a &lt;code&gt;composer.json&lt;/code&gt; file, your library is already composer-installable. In this example we will publish the &lt;code&gt;acme/hello-world&lt;/code&gt; library on GitHub under &lt;code&gt;github.com/username/hello-world&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;composer.json&lt;/code&gt; 파일을 포함하는 VCS 저장소 (버전 제어 시스템 (예 : git))가 있으면 라이브러리는 이미 작곡가 설치 가능합니다. 이 예에서는 GitHub의 &lt;code&gt;github.com/username/hello-world&lt;/code&gt; 에 &lt;code&gt;acme/hello-world&lt;/code&gt; 라이브러리를 게시합니다 .</target>
        </trans-unit>
        <trans-unit id="2be4082b951f4b0fec0a31f2ad0abe0239fad5f2" translate="yes" xml:space="preserve">
          <source>Once you've done this, you run:</source>
          <target state="translated">이 작업을 완료하면 다음을 실행합니다.</target>
        </trans-unit>
        <trans-unit id="8041e10b705dc85b075554596c8ea75b31b23844" translate="yes" xml:space="preserve">
          <source>One limitation of this is that you can not call multiple commands in a row like &lt;code&gt;@php install &amp;amp;&amp;amp; @php foo&lt;/code&gt;. You must split them up in a JSON array of commands.</source>
          <target state="translated">이것의 한 가지 제한은 &lt;code&gt;@php install &amp;amp;&amp;amp; @php foo&lt;/code&gt; 와 같은 여러 명령을 연속해서 호출 할 수 없다는 것 입니다. JSON 배열의 명령으로 분할해야합니다.</target>
        </trans-unit>
        <trans-unit id="09f49662c505ecd16b312d8170a9b9c8b2a7367b" translate="yes" xml:space="preserve">
          <source>One limitation of this is that you can not call multiple composer commands in a row like &lt;code&gt;@composer install &amp;amp;&amp;amp; @composer foo&lt;/code&gt;. You must split them up in a JSON array of commands.</source>
          <target state="translated">이것의 한 가지 제한은 &lt;code&gt;@composer install &amp;amp;&amp;amp; @composer foo&lt;/code&gt; 와 같은 행에서 여러 개의 composer 명령을 호출 할 수 없다는 것 입니다. JSON 배열의 명령으로 분할해야합니다.</target>
        </trans-unit>
        <trans-unit id="88a71808a6e53aa8ac0a7288de26ea1f6ebb9c6c" translate="yes" xml:space="preserve">
          <source>Only use a custom type if you need custom logic during installation. It is recommended to omit this field and have it default to &lt;code&gt;library&lt;/code&gt;.</source>
          <target state="translated">설치 중에 사용자 정의 논리가 필요한 경우에만 사용자 정의 유형을 사용하십시오. 이 필드를 생략하고 기본값을 &lt;code&gt;library&lt;/code&gt; 로 설정하는 것이 좋습니다 .</target>
        </trans-unit>
        <trans-unit id="5ca29842b6366a87b12b2dfc5e1f8ba42909a4e8" translate="yes" xml:space="preserve">
          <source>Open regedit.</source>
          <target state="translated">regedit를여십시오.</target>
        </trans-unit>
        <trans-unit id="35064de80e652d77dcded899337a2daf36a48c6a" translate="yes" xml:space="preserve">
          <source>Operation timed out (IPv6 issues)</source>
          <target state="translated">작업 시간 초과 (IPv6 문제)</target>
        </trans-unit>
        <trans-unit id="e98a8860ae41df2f164bc4524d7707c1fa03e9cb" translate="yes" xml:space="preserve">
          <source>Optimization Level 1: Class map generation</source>
          <target state="translated">최적화 레벨 1 : 클래스 맵 생성</target>
        </trans-unit>
        <trans-unit id="b88ba88fdefd32d130d14691f8cd9af2d80e4300" translate="yes" xml:space="preserve">
          <source>Optimization Level 2/A: Authoritative class maps</source>
          <target state="translated">최적화 수준 2 / A : 신뢰할 수있는 클래스 맵</target>
        </trans-unit>
        <trans-unit id="374cf1c74f6c9b8b61c87ca0039a7ef67526d9ae" translate="yes" xml:space="preserve">
          <source>Optimization Level 2/B: APCu cache</source>
          <target state="translated">최적화 레벨 2 / B : APCu 캐시</target>
        </trans-unit>
        <trans-unit id="dcb8c77ab80793f9f37a1a328a3f0f9842d229c7" translate="yes" xml:space="preserve">
          <source>Optimizing the autoloader</source>
          <target state="translated">오토로더 최적화</target>
        </trans-unit>
        <trans-unit id="ff1450379f5e57929e363c8b2643a47a4501cc42" translate="yes" xml:space="preserve">
          <source>Optional if the package repository can infer the version from somewhere, such as the VCS tag name in the VCS repository. In that case it is also recommended to omit it.</source>
          <target state="translated">패키지 저장소가 VCS 저장소의 VCS 태그 이름과 같은 다른 곳에서 버전을 유추 할 수있는 경우 선택 사항입니다. 이 경우 생략하는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="5d05d2dd7183d099b1103019a900abd314417d7a" translate="yes" xml:space="preserve">
          <source>Optional, but highly recommended.</source>
          <target state="translated">선택 사항이지만 적극 권장됩니다.</target>
        </trans-unit>
        <trans-unit id="5a6e381addee65c08c090c3ca7506df2c0160b90" translate="yes" xml:space="preserve">
          <source>Optional, but it is highly recommended to supply this. More identifiers are listed at the &lt;a href=&quot;https://spdx.org/licenses/&quot;&gt;SPDX Open Source License Registry&lt;/a&gt;.</source>
          <target state="translated">선택 사항이지만이를 제공하는 것이 좋습니다. &lt;a href=&quot;https://spdx.org/licenses/&quot;&gt;SPDX Open Source License Registry에&lt;/a&gt; 더 많은 식별자가 나열되어 있습니다 .</target>
        </trans-unit>
        <trans-unit id="a4149a55fc8e55fc8490190fca6fd327f9a538b3" translate="yes" xml:space="preserve">
          <source>Optional.</source>
          <target state="translated">Optional.</target>
        </trans-unit>
        <trans-unit id="6bf5da9c080bee3a8142586c412aa39971137eee" translate="yes" xml:space="preserve">
          <source>Options</source>
          <target state="translated">Options</target>
        </trans-unit>
        <trans-unit id="debe6f39ae1c4b3cf5d5b85436ee9ae9c53b497c" translate="yes" xml:space="preserve">
          <source>Options explained</source>
          <target state="translated">옵션 설명</target>
        </trans-unit>
        <trans-unit id="b0a85adf308424bc26224008cff29d5723289ca4" translate="yes" xml:space="preserve">
          <source>Or let composer add it for you with:</source>
          <target state="translated">또는 작곡가가 당신을 위해 그것을 추가하도록하십시오 :</target>
        </trans-unit>
        <trans-unit id="920735b63b1ba85cdd5521f7e488d6c682247074" translate="yes" xml:space="preserve">
          <source>Or, you can increase the limit with a command-line argument:</source>
          <target state="translated">또는 명령 행 인수를 사용하여 한계를 늘릴 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d291165f3e48fa04de2df661e5577d3237e36a86" translate="yes" xml:space="preserve">
          <source>Other options</source>
          <target state="translated">다른 옵션</target>
        </trans-unit>
        <trans-unit id="7c4bcdf19c07367e085db3c2d0ddc529436b907b" translate="yes" xml:space="preserve">
          <source>Out of the box, Composer supports four types:</source>
          <target state="translated">기본적으로 Composer는 다음 네 가지 유형을 지원합니다.</target>
        </trans-unit>
        <trans-unit id="145c01c620170c3ab3ab1215a0dfe84a56338dba" translate="yes" xml:space="preserve">
          <source>PEAR</source>
          <target state="translated">PEAR</target>
        </trans-unit>
        <trans-unit id="b6e0d0c69cff41f30dce51b7b05962b13a29ec59" translate="yes" xml:space="preserve">
          <source>PHP classes containing defined callbacks must be autoloadable via Composer's autoload functionality.</source>
          <target state="translated">정의 된 콜백을 포함하는 PHP 클래스는 Composer의 자동로드 기능을 통해 자동로드 할 수 있어야합니다.</target>
        </trans-unit>
        <trans-unit id="7b85166b23e4fdb8a3f3d6707be258197c2f05da" translate="yes" xml:space="preserve">
          <source>PSR-0</source>
          <target state="translated">PSR-0</target>
        </trans-unit>
        <trans-unit id="68e25a577a611f4f331ecea46a4359c671d2e74e" translate="yes" xml:space="preserve">
          <source>PSR-4</source>
          <target state="translated">PSR-4</target>
        </trans-unit>
        <trans-unit id="52d9c7a80cbf6e9fceabf8a3117045a2cd4cbe6c" translate="yes" xml:space="preserve">
          <source>PSR-4 is the recommended way since it offers greater ease of use (no need to regenerate the autoloader when you add classes).</source>
          <target state="translated">PSR-4는 사용 편의성이 뛰어나므로 클래스를 추가 할 때 오토로더를 재생성 할 필요가 없으므로 권장되는 방법입니다.</target>
        </trans-unit>
        <trans-unit id="7431e3df243c5be33cffa0b28ca2a76b93f0538c" translate="yes" xml:space="preserve">
          <source>Package</source>
          <target state="translated">Package</target>
        </trans-unit>
        <trans-unit id="d73077614a8918bcc7ab02c45fb25c2c3ea664b3" translate="yes" xml:space="preserve">
          <source>Package Events</source>
          <target state="translated">패키지 이벤트</target>
        </trans-unit>
        <trans-unit id="9cd2dccd7cba2c30aa43f6a4a27d8a1ba63796dd" translate="yes" xml:space="preserve">
          <source>Package Events: &lt;a href=&quot;https://getcomposer.org/apidoc/master/Composer/Installer/PackageEvent.html&quot;&gt;&lt;code&gt;Composer\Installer\PackageEvent&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">패키지 이벤트 : &lt;a href=&quot;https://getcomposer.org/apidoc/master/Composer/Installer/PackageEvent.html&quot;&gt; &lt;code&gt;Composer\Installer\PackageEvent&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="f7ee708da2b2b4ac2f2b6dc1f83560afdbaa61c3" translate="yes" xml:space="preserve">
          <source>Package links</source>
          <target state="translated">패키지 링크</target>
        </trans-unit>
        <trans-unit id="7808007c934c54e5e8c20cde242071f3de2b4543" translate="yes" xml:space="preserve">
          <source>Package names</source>
          <target state="translated">패키지 이름</target>
        </trans-unit>
        <trans-unit id="9b6676118da40f238ed9660264a2908784ef4d5f" translate="yes" xml:space="preserve">
          <source>Package not found</source>
          <target state="translated">패키지를 찾을 수 없습니다</target>
        </trans-unit>
        <trans-unit id="65bf5a7cd4916964c223ea4dc17425667807c1c9" translate="yes" xml:space="preserve">
          <source>Package not found in a Jenkins-build</source>
          <target state="translated">Jenkins 빌드에서 패키지를 찾을 수 없음</target>
        </trans-unit>
        <trans-unit id="cf7ada2ffe27de5fe65906b47c96e5bf9be8d26c" translate="yes" xml:space="preserve">
          <source>Package not found on travis-ci.org</source>
          <target state="translated">travis-ci.org에 패키지가 없습니다</target>
        </trans-unit>
        <trans-unit id="9d66039c4da8ed7be8986cbc17aef4f92c7e728d" translate="yes" xml:space="preserve">
          <source>Package types are used for custom installation logic. If you have a package that needs some special logic, you can define a custom type. This could be a &lt;code&gt;symfony-bundle&lt;/code&gt;, a &lt;code&gt;wordpress-plugin&lt;/code&gt; or a &lt;code&gt;typo3-cms-extension&lt;/code&gt;. These types will all be specific to certain projects, and they will need to provide an installer capable of installing packages of that type.</source>
          <target state="translated">패키지 유형은 사용자 정의 설치 로직에 사용됩니다. 특별한 로직이 필요한 패키지가있는 경우 사용자 정의 유형을 정의 할 수 있습니다. 이것은 &lt;code&gt;symfony-bundle&lt;/code&gt; , &lt;code&gt;wordpress-plugin&lt;/code&gt; 또는 &lt;code&gt;typo3-cms-extension&lt;/code&gt; 일 수 있습니다. 이러한 유형은 모두 특정 프로젝트에만 적용되며 해당 유형의 패키지를 설치할 수있는 설치 프로그램을 제공해야합니다.</target>
        </trans-unit>
        <trans-unit id="b1148d2ffb47e8ac173078f14c3968dd49a99de0" translate="yes" xml:space="preserve">
          <source>Package version constraints</source>
          <target state="translated">패키지 버전 제약</target>
        </trans-unit>
        <trans-unit id="7795b2a652dd3647020427af8e59a1a34d64b2c1" translate="yes" xml:space="preserve">
          <source>Packages &lt;strong&gt;not coming from &lt;a href=&quot;https://packagist.org/&quot;&gt;Packagist&lt;/a&gt;&lt;/strong&gt; should always be &lt;strong&gt;defined in the root package&lt;/strong&gt; (the package depending on all vendors).</source>
          <target state="translated">&lt;strong&gt;&lt;a href=&quot;https://packagist.org/&quot;&gt;Packagist&lt;/a&gt;&lt;/strong&gt;&lt;strong&gt; 에서 제공되지 않는&lt;/strong&gt; 패키지 는 항상 &lt;strong&gt;루트 패키지&lt;/strong&gt; (모든 공급 업체에 따라 패키지)에 &lt;strong&gt;정의&lt;/strong&gt; 해야합니다 .</target>
        </trans-unit>
        <trans-unit id="f2f1d4136f717c17ab1127fb36edacfeb63c693f" translate="yes" xml:space="preserve">
          <source>Packages can supply either of these, or even both. Depending on certain factors, such as user-supplied options and stability of the package, one will be preferred.</source>
          <target state="translated">패키지는 이들 중 하나 또는 둘 다를 제공 할 수 있습니다. 사용자 제공 옵션 및 패키지의 안정성과 같은 특정 요소에 따라 선호됩니다.</target>
        </trans-unit>
        <trans-unit id="880f5abce3a48ec9c69994966d82b07c36f2c125" translate="yes" xml:space="preserve">
          <source>Packages managed entirely by Composer do not &lt;em&gt;need&lt;/em&gt; to contain any &lt;code&gt;.bat&lt;/code&gt; files for Windows compatibility. Composer handles installation of binaries in a special way when run in a Windows environment:</source>
          <target state="translated">Composer가 전적으로 관리하는 패키지 는 Windows 호환성을 위해 &lt;code&gt;.bat&lt;/code&gt; 파일 을 포함 하지 &lt;em&gt;않아도&lt;/em&gt; 됩니다. Composer는 Windows 환경에서 실행될 때 특별한 방법으로 바이너리 설치를 처리합니다.</target>
        </trans-unit>
        <trans-unit id="26055ee12e3b8d847d880cd6592b032b9f872d9a" translate="yes" xml:space="preserve">
          <source>Packages that need to support workflows that may not include Composer are welcome to maintain custom &lt;code&gt;.bat&lt;/code&gt; files. In this case, the package should &lt;strong&gt;not&lt;/strong&gt; list the &lt;code&gt;.bat&lt;/code&gt; file as a binary as it is not needed.</source>
          <target state="translated">Composer가 포함되지 않은 워크 플로를 지원해야하는 패키지는 사용자 지정 &lt;code&gt;.bat&lt;/code&gt; 파일 을 유지 관리 할 수 있습니다. 이 경우 패키지는 &lt;code&gt;.bat&lt;/code&gt; 파일을 필요하지 않은 바이너리로 나열 해서는 &lt;strong&gt;안됩니다&lt;/strong&gt; .</target>
        </trans-unit>
        <trans-unit id="c6250cdaf320b82f3e5a0d36976d129cdc787296" translate="yes" xml:space="preserve">
          <source>Packagist</source>
          <target state="translated">Packagist</target>
        </trans-unit>
        <trans-unit id="2f4831d117e9d70eb059538b163468d2567d16f0" translate="yes" xml:space="preserve">
          <source>Partial Updates</source>
          <target state="translated">부분 업데이트</target>
        </trans-unit>
        <trans-unit id="519e39132bb98418cc0483cc446ccf5f3c8dcffe" translate="yes" xml:space="preserve">
          <source>Path</source>
          <target state="translated">Path</target>
        </trans-unit>
        <trans-unit id="70bff551342eea6aa8f97b6fb1a2dd9985b39fe4" translate="yes" xml:space="preserve">
          <source>Platform packages</source>
          <target state="translated">플랫폼 패키지</target>
        </trans-unit>
        <trans-unit id="96d94578c257f290e0c3f650c9d7c1b66632be47" translate="yes" xml:space="preserve">
          <source>Please note namespace declarations should end in &lt;code&gt;\\&lt;/code&gt; to make sure the autoloader responds exactly. For example &lt;code&gt;Foo&lt;/code&gt; would match in &lt;code&gt;FooBar&lt;/code&gt; so the trailing backslashes solve the problem: &lt;code&gt;Foo\\&lt;/code&gt; and &lt;code&gt;FooBar\\&lt;/code&gt; are distinct.</source>
          <target state="translated">오토로더가 정확하게 응답하도록 네임 스페이스 선언은 &lt;code&gt;\\&lt;/code&gt; 로 끝나야 합니다. 예를 들어 &lt;code&gt;Foo&lt;/code&gt; 는 &lt;code&gt;FooBar&lt;/code&gt; 에서 일치 하므로 후행 백 슬래시는 문제를 해결합니다. &lt;code&gt;Foo\\&lt;/code&gt; 와 &lt;code&gt;FooBar\\&lt;/code&gt; 는 고유합니다.</target>
        </trans-unit>
        <trans-unit id="b092b192a4d648e172b4a375b0666e778cde5015" translate="yes" xml:space="preserve">
          <source>Please note:</source>
          <target state="translated">참고 :</target>
        </trans-unit>
        <trans-unit id="dc8572ee2a167aa3f336a06359c0636a878ee8b8" translate="yes" xml:space="preserve">
          <source>Please read &lt;a href=&quot;articles/versions.md&quot;&gt;versions&lt;/a&gt; for more in-depth information on versions, how versions relate to each other, and on version constraints.</source>
          <target state="translated">버전, 버전 간의 관계 및 버전 제약에 대한 자세한 정보는 &lt;a href=&quot;articles/versions.md&quot;&gt;버전&lt;/a&gt; 을 읽으십시오 .</target>
        </trans-unit>
        <trans-unit id="2727c3578f91631c9e0a5c09bb235062be698f63" translate="yes" xml:space="preserve">
          <source>Plugin Class</source>
          <target state="translated">플러그인 클래스</target>
        </trans-unit>
        <trans-unit id="fbdd2cb4c3815c09ac6f353fde19990df0b826d0" translate="yes" xml:space="preserve">
          <source>Plugin Events</source>
          <target state="translated">플러그인 이벤트</target>
        </trans-unit>
        <trans-unit id="1df4349176f4606f4b4fc1a4c20f4de9c5fe741c" translate="yes" xml:space="preserve">
          <source>Plugin Events:</source>
          <target state="translated">플러그인 이벤트 :</target>
        </trans-unit>
        <trans-unit id="f2d09e4541ac1902ecf8252c0d5a538540c73aee" translate="yes" xml:space="preserve">
          <source>Plugin Package</source>
          <target state="translated">플러그인 패키지</target>
        </trans-unit>
        <trans-unit id="e1e8cb868c4b032adc5e4c82f96fadede05e328f" translate="yes" xml:space="preserve">
          <source>Plugin capabilities</source>
          <target state="translated">플러그인 기능</target>
        </trans-unit>
        <trans-unit id="a53d056c00a56390bd56f3c78f912907c666bd3c" translate="yes" xml:space="preserve">
          <source>Plugin packages are automatically loaded as soon as they are installed and will be loaded when composer starts up if they are found in the current project's list of installed packages. Additionally all plugin packages installed in the &lt;code&gt;COMPOSER_HOME&lt;/code&gt; directory using the composer global command are loaded before local project plugins are loaded.</source>
          <target state="translated">플러그인 패키지는 설치되는 즉시 자동으로로드되며 현재 프로젝트의 설치된 패키지 목록에서 컴포저가 시작될 때로드됩니다. 또한 composer global 명령을 사용하여 &lt;code&gt;COMPOSER_HOME&lt;/code&gt; 디렉토리에 설치된 모든 플러그인 패키지 는 로컬 프로젝트 플러그인이로드되기 전에로드됩니다.</target>
        </trans-unit>
        <trans-unit id="b7c6ef4a80a2bb0071c2036b48d6fd0521467b1a" translate="yes" xml:space="preserve">
          <source>Plugins for an event can be run manually by the &lt;code&gt;run-script&lt;/code&gt; command. This works the same way as &lt;a href=&quot;scripts.md#running-scripts-manually&quot;&gt;running scripts manually&lt;/a&gt;.</source>
          <target state="translated">이벤트 용 플러그인은 &lt;code&gt;run-script&lt;/code&gt; 명령 으로 수동으로 실행할 수 있습니다 . 이것은 &lt;a href=&quot;scripts.md#running-scripts-manually&quot;&gt;스크립트를 수동으로 실행&lt;/a&gt; 하는 것과 같은 방식으로 작동합니다 .</target>
        </trans-unit>
        <trans-unit id="17141dcfb65c0d75c4b8fa523d332056f8473365" translate="yes" xml:space="preserve">
          <source>Prefixing the URL with another host is especially helpful if the downloads end up in a private Amazon S3 bucket or on a CDN host. A CDN would drastically improve download times and therefore package installation.</source>
          <target state="translated">다운로드가 개인 Amazon S3 버킷 또는 CDN 호스트에있는 경우 다른 호스트에 URL을 접두어로 사용하면 특히 유용합니다. CDN은 다운로드 시간을 대폭 향상시켜 패키지 설치를 향상시킵니다.</target>
        </trans-unit>
        <trans-unit id="3dbe65a0c8818c614259574a8fd951bbed420749" translate="yes" xml:space="preserve">
          <source>Private Packagist</source>
          <target state="translated">개인 팩커 지스트</target>
        </trans-unit>
        <trans-unit id="0b2b487a5d607bb7624863de43f47569bd855362" translate="yes" xml:space="preserve">
          <source>Private Packagist is available as a hosted SaaS solution or as an on-premise self-hosted package, providing an easy interactive set up experience.</source>
          <target state="translated">Private Packagist는 호스팅 된 SaaS 솔루션 또는 온 프레미스 자체 호스팅 패키지로 제공되므로 대화식 설정 환경을 쉽게 제공 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="27ffe1daea0160bc5786db4606d8a83b60d8853e" translate="yes" xml:space="preserve">
          <source>Process Exit Codes</source>
          <target state="translated">프로세스 종료 코드</target>
        </trans-unit>
        <trans-unit id="cf2d7e79920f5805b436bb910c9b0246a2e2d54d" translate="yes" xml:space="preserve">
          <source>Projects with multiple developers can use this feature to bootstrap the initial application for development.</source>
          <target state="translated">여러 개발자가있는 프로젝트는이 기능을 사용하여 개발을 위해 초기 응용 프로그램을 부트 스트랩 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="bc6c88db2f0703a9e2461a4a8060ccf1cb881998" translate="yes" xml:space="preserve">
          <source>Properties</source>
          <target state="translated">Properties</target>
        </trans-unit>
        <trans-unit id="51d00bce44383befa1de652a2c9d7a4923aa0aa3" translate="yes" xml:space="preserve">
          <source>Publishing to a VCS</source>
          <target state="translated">VCS에 게시</target>
        </trans-unit>
        <trans-unit id="42996cc0d06a03dc418669f81467080a796b0d5a" translate="yes" xml:space="preserve">
          <source>Publishing to packagist</source>
          <target state="translated">packagist에 게시</target>
        </trans-unit>
        <trans-unit id="90648a9b69d6e473de40f812b8e2311c4bc465c2" translate="yes" xml:space="preserve">
          <source>Read more about publishing packages and package naming &lt;a href=&quot;02-libraries.md&quot;&gt;here&lt;/a&gt;. (Note that you can also specify &quot;platform packages&quot; as dependencies, allowing you to require certain versions of server software. See &lt;a href=&quot;#platform-packages&quot;&gt;platform packages&lt;/a&gt; below.)</source>
          <target state="translated">패키지 게시 및 패키지 이름 지정에 대한 자세한 내용은 &lt;a href=&quot;02-libraries.md&quot;&gt;여기를 참조하십시오&lt;/a&gt; . (또한 &quot;플랫폼 패키지&quot;를 종속성으로 지정할 수 있으므로 특정 버전의 서버 소프트웨어가 필요할 수 있습니다. 아래 &lt;a href=&quot;#platform-packages&quot;&gt;플랫폼 패키지를&lt;/a&gt; 참조하십시오 .)</target>
        </trans-unit>
        <trans-unit id="681d40c1d15168cc59415bffa0703c0b2c2a59fc" translate="yes" xml:space="preserve">
          <source>Reason for failing is similar to the problem which can occur on travis-ci.org: The git-clone / checkout within Jenkins leaves the branch in a &quot;detached HEAD&quot;-state. As a result, Composer is not able to identify the version of the current checked out branch and may not be able to resolve a cyclic dependency. To solve this problem, you can use the &quot;Additional Behaviours&quot; -&amp;gt; &quot;Check out to specific local branch&quot; in your Git-settings for your Jenkins-job, where your &quot;local branch&quot; shall be the same branch as you are checking out. Using this, the checkout will not be in detached state any more and cyclic dependency is recognized correctly.</source>
          <target state="translated">실패 이유는 travis-ci.org에서 발생할 수있는 문제와 유사합니다. Jenkins의 git-clone / checkout은 분기를 &quot;분리 된 HEAD&quot;상태로 둡니다. 결과적으로 Composer는 현재 체크 아웃 된 분기의 버전을 식별 할 수 없으며 주기적 종속성을 해결할 수 없습니다. 이 문제를 해결하려면 Jenkins 작업에 대한 Git 설정에서 &quot;추가 행동&quot;-&amp;gt; &quot;특정 로컬 지점 체크 아웃&quot;을 사용할 수 있습니다. 여기서 &quot;로컬 브랜치&quot;는 체크 아웃하는 지점과 동일합니다. . 이를 사용하면 체크 아웃이 더 이상 분리 상태가 아니고 주기적 종속성이 올바르게 인식됩니다.</target>
        </trans-unit>
        <trans-unit id="e65b862a7b98484b46ff204d10dc79c7f23dbb75" translate="yes" xml:space="preserve">
          <source>Referencing scripts</source>
          <target state="translated">스크립트 참조</target>
        </trans-unit>
        <trans-unit id="658a9348d9a36546995e485b083535db9c64517f" translate="yes" xml:space="preserve">
          <source>Release date of the version.</source>
          <target state="translated">버전의 출시일.</target>
        </trans-unit>
        <trans-unit id="c91e6e6a538a5087a64a99718ae975966b761c1e" translate="yes" xml:space="preserve">
          <source>Repositories</source>
          <target state="translated">Repositories</target>
        </trans-unit>
        <trans-unit id="605e324dd79c33933203988a504354e6dc37d2e2" translate="yes" xml:space="preserve">
          <source>Repositories are not resolved recursively. You can only add them to your main &lt;code&gt;composer.json&lt;/code&gt;. Repository declarations of dependencies' &lt;code&gt;composer.json&lt;/code&gt;s are ignored.</source>
          <target state="translated">리포지토리는 재귀 적으로 해결되지 않습니다. 메인 &lt;code&gt;composer.json&lt;/code&gt; 에만 추가 할 수 있습니다 . 의존성 &lt;code&gt;composer.json&lt;/code&gt; 의 저장소 선언 은 무시됩니다.</target>
        </trans-unit>
        <trans-unit id="b677b0048a64154830ece638e2fb27b8f835437b" translate="yes" xml:space="preserve">
          <source>Repositories are only available to the root package and the repositories defined in your dependencies will not be loaded. Read the &lt;a href=&quot;https://getcomposer.org/doc/faqs/why-can't-composer-load-repositories-recursively.md&quot;&gt;FAQ entry&lt;/a&gt; if you want to learn why.</source>
          <target state="translated">리포지토리는 루트 패키지에서만 사용할 수 있으며 종속성에 정의 된 리포지토리는로드되지 않습니다. 이유를 배우려면 &lt;a href=&quot;https://getcomposer.org/doc/faqs/why-can't-composer-load-repositories-recursively.md&quot;&gt;FAQ 항목을&lt;/a&gt; 읽으십시오 .</target>
        </trans-unit>
        <trans-unit id="312386841084261c610413fa4de8b7505f469407" translate="yes" xml:space="preserve">
          <source>Repository</source>
          <target state="translated">Repository</target>
        </trans-unit>
        <trans-unit id="0e55ca59eef1f33d943a8c14fb2edc1bffd9bc99" translate="yes" xml:space="preserve">
          <source>Require inline alias</source>
          <target state="translated">인라인 별칭 필요</target>
        </trans-unit>
        <trans-unit id="636bb9b3d34f25b03a23fc4011cb6c5b95c66512" translate="yes" xml:space="preserve">
          <source>Required for published packages (libraries).</source>
          <target state="translated">게시 된 패키지 (라이브러리)에 필요합니다.</target>
        </trans-unit>
        <trans-unit id="67e63d91858ebf302948af233d78d205f3631584" translate="yes" xml:space="preserve">
          <source>Resolving dependencies</source>
          <target state="translated">의존성 해결</target>
        </trans-unit>
        <trans-unit id="bf3c723943afb10b30be5099934d0061dde1b3a0" translate="yes" xml:space="preserve">
          <source>Root Package</source>
          <target state="translated">루트 패키지</target>
        </trans-unit>
        <trans-unit id="40a11bc6f420df54a1cc6ac2f27779f1a22bcf02" translate="yes" xml:space="preserve">
          <source>Run composer ...</source>
          <target state="translated">작곡가 실행 ...</target>
        </trans-unit>
        <trans-unit id="02c176abc5d53a5cddcb7db60b388f7f2db17a9f" translate="yes" xml:space="preserve">
          <source>Running &lt;code&gt;composer install&lt;/code&gt; for this &lt;code&gt;composer.json&lt;/code&gt; will look at all of project-a's binaries and install them to &lt;code&gt;vendor/bin&lt;/code&gt;.</source>
          <target state="translated">이 &lt;code&gt;composer.json&lt;/code&gt; 에 대해 &lt;code&gt;composer install&lt;/code&gt; 을 실행 하면 project-a의 모든 바이너리를보고 &lt;code&gt;vendor/bin&lt;/code&gt; 에 설치합니다 .</target>
        </trans-unit>
        <trans-unit id="77d6c9754e9d79e4c035466336d20ed9c56cf340" translate="yes" xml:space="preserve">
          <source>Running &lt;code&gt;composer install&lt;/code&gt; for this &lt;code&gt;composer.json&lt;/code&gt; will not do anything with &lt;code&gt;bin/project-a-bin&lt;/code&gt;.</source>
          <target state="translated">이 &lt;code&gt;composer.json&lt;/code&gt; 에 대해 &lt;code&gt;composer install&lt;/code&gt; 을 실행 하면 &lt;code&gt;bin/project-a-bin&lt;/code&gt; 으로 아무것도 수행하지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="2c66496e4b8a83692d805b42d3fb10a45cf55a2b" translate="yes" xml:space="preserve">
          <source>Running &lt;code&gt;composer install&lt;/code&gt; for this &lt;code&gt;composer.json&lt;/code&gt; will result in all of the vendor binaries being installed in &lt;code&gt;scripts/&lt;/code&gt; instead of &lt;code&gt;vendor/bin/&lt;/code&gt;.</source>
          <target state="translated">이 &lt;code&gt;composer.json&lt;/code&gt; 에 대해 &lt;code&gt;composer install&lt;/code&gt; 를 실행 하면 모든 공급 업체 바이너리가 &lt;code&gt;vendor/bin/&lt;/code&gt; 대신 &lt;code&gt;scripts/&lt;/code&gt; 에 설치됩니다 .</target>
        </trans-unit>
        <trans-unit id="462d1db361dd2705327cbd57e61bc116206a5b83" translate="yes" xml:space="preserve">
          <source>Running plugins manually</source>
          <target state="translated">플러그인 수동 실행</target>
        </trans-unit>
        <trans-unit id="63661918ff1f46e010610418f83ba15536a0edad" translate="yes" xml:space="preserve">
          <source>Running scripts manually</source>
          <target state="translated">수동으로 스크립트 실행</target>
        </trans-unit>
        <trans-unit id="69ae939a6e24536ac11cc6467262835c9ffe1ab4" translate="yes" xml:space="preserve">
          <source>Satis</source>
          <target state="translated">Satis</target>
        </trans-unit>
        <trans-unit id="afa4ca2e1dad5257bc45bcb2ae3345ecd9520e05" translate="yes" xml:space="preserve">
          <source>Satis is a static &lt;code&gt;composer&lt;/code&gt; repository generator. It is a bit like an ultra- lightweight, static file-based version of packagist.</source>
          <target state="translated">Satis는 정적 &lt;code&gt;composer&lt;/code&gt; 저장소 생성기입니다. 그것은 초경량의 정적 파일 기반 버전의 packagist와 비슷합니다.</target>
        </trans-unit>
        <trans-unit id="0ade51e1e159b2e3e7fa56b4472a1503e5ac6f7d" translate="yes" xml:space="preserve">
          <source>Satis on the other hand is open source but only a static &lt;code&gt;composer&lt;/code&gt; repository generator. It is a bit like an ultra-lightweight, static file-based version of packagist and can be used to host the metadata of your company's private packages, or your own. You can get it from &lt;a href=&quot;https://github.com/composer/satis&quot;&gt;GitHub&lt;/a&gt; or install via CLI:</source>
          <target state="translated">반면 Satis는 오픈 소스이지만 정적 &lt;code&gt;composer&lt;/code&gt; 저장소 생성기입니다. 이것은 초경량의 정적 파일 기반 버전의 packagist와 비슷하며 회사의 개인 패키지 또는 자체 패키지의 메타 데이터를 호스팅하는 데 사용할 수 있습니다. &lt;a href=&quot;https://github.com/composer/satis&quot;&gt;GitHub&lt;/a&gt; 에서 가져 오거나 CLI를 통해 설치할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="3085f6884448b8a839b11cdf3feb5ca13ee5f95f" translate="yes" xml:space="preserve">
          <source>Say package &lt;code&gt;my-vendor/project-a&lt;/code&gt; has binaries setup like this:</source>
          <target state="translated">&lt;code&gt;my-vendor/project-a&lt;/code&gt; 패키지에 다음과 같은 바이너리 설정이 있다고 가정 해보십시오.</target>
        </trans-unit>
        <trans-unit id="876d059b9d11b42563fa49538d722751048969b4" translate="yes" xml:space="preserve">
          <source>Say project &lt;code&gt;my-vendor/project-b&lt;/code&gt; has requirements setup like this:</source>
          <target state="translated">말은 프로젝트 &lt;code&gt;my-vendor/project-b&lt;/code&gt; 이 같은 요구 사항 설정이 있습니다 :</target>
        </trans-unit>
        <trans-unit id="141f05a2d444aedb2a416b6f6aa967c248a38bdb" translate="yes" xml:space="preserve">
          <source>Script definition example:</source>
          <target state="translated">스크립트 정의 예 :</target>
        </trans-unit>
        <trans-unit id="381e3298b2b8f6caeb2208b57d805ada38402f0b" translate="yes" xml:space="preserve">
          <source>Scripts</source>
          <target state="translated">Scripts</target>
        </trans-unit>
        <trans-unit id="8c20810320df84c5a3a66b73a1a4a6799911bd24" translate="yes" xml:space="preserve">
          <source>Scripts execute in the order defined when their corresponding event is fired.</source>
          <target state="translated">스크립트는 해당 이벤트가 실행될 때 정의 된 순서대로 실행됩니다.</target>
        </trans-unit>
        <trans-unit id="bca27a084b31f7d5711e8aa95a27580b07d7ceb8" translate="yes" xml:space="preserve">
          <source>Search for an &lt;code&gt;AutoRun&lt;/code&gt; key inside &lt;code&gt;HKEY_LOCAL_MACHINE\Software\Microsoft\Command Processor&lt;/code&gt;, &lt;code&gt;HKEY_CURRENT_USER\Software\Microsoft\Command Processor&lt;/code&gt; or &lt;code&gt;HKEY_LOCAL_MACHINE\Software\Wow6432Node\Microsoft\Command Processor&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;HKEY_LOCAL_MACHINE\Software\Microsoft\Command Processor&lt;/code&gt; , &lt;code&gt;HKEY_CURRENT_USER\Software\Microsoft\Command Processor&lt;/code&gt; 또는 &lt;code&gt;HKEY_LOCAL_MACHINE\Software\Wow6432Node\Microsoft\Command Processor&lt;/code&gt; 에서 &lt;code&gt;AutoRun&lt;/code&gt; 키를 검색하십시오 .</target>
        </trans-unit>
        <trans-unit id="f25ce1b8a399bd8621a57427a20039b4b13935db" translate="yes" xml:space="preserve">
          <source>Security</source>
          <target state="translated">Security</target>
        </trans-unit>
        <trans-unit id="2f2e0cfb9b921677358c2029c8aa562157bb4028" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;aliases.md&quot;&gt;aliases&lt;/a&gt; for more information.</source>
          <target state="translated">자세한 정보는 &lt;a href=&quot;aliases.md&quot;&gt;별명&lt;/a&gt; 을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="9fa3e83b7d0fca52d3747da12efee577c92ff227" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;articles/scripts.md&quot;&gt;Scripts&lt;/a&gt; for events details and examples.</source>
          <target state="translated">이벤트 세부 사항 및 예제는 &lt;a href=&quot;articles/scripts.md&quot;&gt;스크립트&lt;/a&gt; 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="9d620fa0ce1b37fe9dd7ba9d411ab04a43133094" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;articles/vendor-binaries.md&quot;&gt;Vendor Binaries&lt;/a&gt; for more details.</source>
          <target state="translated">자세한 내용은 &lt;a href=&quot;articles/vendor-binaries.md&quot;&gt;공급 업체 바이너리&lt;/a&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="559b72f77032e67604dc874b9a392a115d181b4e" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;https://github.com/composer/composer/issues/4180&quot;&gt;https://github.com/composer/composer/issues/4180&lt;/a&gt; for more information.</source>
          <target state="translated">자세한 내용은 &lt;a href=&quot;https://github.com/composer/composer/issues/4180&quot;&gt;https://github.com/composer/composer/issues/4180&lt;/a&gt; 을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="0de267ef8a389c1e7998354eba22473decbeb28f" translate="yes" xml:space="preserve">
          <source>See also the docs on &lt;a href=&quot;articles/autoloader-optimization.md&quot;&gt;optimizing the autoloader&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;articles/autoloader-optimization.md&quot;&gt;오토로더 최적화에&lt;/a&gt; 대한 문서도 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="40a90c87b8f1bab04a3544adc01bea2e0e9bce45" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;01-basic-usage.md&quot;&gt;Basic usage&lt;/a&gt; chapter for more details on declaring dependencies.</source>
          <target state="translated">종속성 선언에 대한 자세한 내용 은 &lt;a href=&quot;01-basic-usage.md&quot;&gt;기본 사용법&lt;/a&gt; 장을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="2575ba8fbc7c125e927fe44e94d8db132d3a6adb" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;06-config.md&quot;&gt;Config&lt;/a&gt; chapter for valid configuration options.</source>
          <target state="translated">유효한 구성 옵션에 대해서는 &lt;a href=&quot;06-config.md&quot;&gt;구성&lt;/a&gt; 장을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="e4650020b4ad72f5700c979161041d4ed54e1267" translate="yes" xml:space="preserve">
          <source>Set &lt;code&gt;&quot;apcu-autoloader&quot;: true&lt;/code&gt; inside the config key of composer.json</source>
          <target state="translated">composer.json의 구성 키 내에서 &lt;code&gt;&quot;apcu-autoloader&quot;: true&lt;/code&gt; 설정하십시오 .</target>
        </trans-unit>
        <trans-unit id="214a7a23d5f78ae506afcb7b0713b0f632fd1c5f" translate="yes" xml:space="preserve">
          <source>Set &lt;code&gt;&quot;classmap-authoritative&quot;: true&lt;/code&gt; inside the config key of composer.json</source>
          <target state="translated">설정 &lt;code&gt;&quot;classmap-authoritative&quot;: true&lt;/code&gt; composer.json의 설정 키 내부에</target>
        </trans-unit>
        <trans-unit id="5c0a92c54590466a677967f926d1748729dcfdaf" translate="yes" xml:space="preserve">
          <source>Set &lt;code&gt;&quot;optimize-autoloader&quot;: true&lt;/code&gt; inside the config key of composer.json</source>
          <target state="translated">설정 &lt;code&gt;&quot;optimize-autoloader&quot;: true&lt;/code&gt; composer.json의 설정 키 내부</target>
        </trans-unit>
        <trans-unit id="a8874dcc81d1b0c7d334d5272e38e9accbd8eeb3" translate="yes" xml:space="preserve">
          <source>Set up a virtual-host that points to that &lt;code&gt;web/&lt;/code&gt; directory, let's say it is &lt;code&gt;packages.example.org&lt;/code&gt;. Alternatively, with PHP &amp;gt;= 5.4.0, you can use the built-in CLI server &lt;code&gt;php -S localhost:port -t satis-output-dir/&lt;/code&gt; for a temporary solution.</source>
          <target state="translated">해당 &lt;code&gt;web/&lt;/code&gt; 디렉토리 를 가리키는 가상 호스트를 설정하십시오 ( &lt;code&gt;packages.example.org&lt;/code&gt; ) . 또는 PHP&amp;gt; = 5.4.0 인 경우 임시 솔루션으로 내장 CLI 서버 &lt;code&gt;php -S localhost:port -t satis-output-dir/&lt;/code&gt; 을 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ad1bd84f8db19260d4b3be58ad221bf7fd52b6ac" translate="yes" xml:space="preserve">
          <source>Setting the &lt;code&gt;bin-dir&lt;/code&gt; configuration setting in &lt;code&gt;composer.json&lt;/code&gt;</source>
          <target state="translated">설정 &lt;code&gt;bin-dir&lt;/code&gt; 에 구성 설정 &lt;code&gt;composer.json&lt;/code&gt; 을</target>
        </trans-unit>
        <trans-unit id="e60dbf0bbeb4c51b8c1fb230befbe410040e5635" translate="yes" xml:space="preserve">
          <source>Setting the environment variable &lt;code&gt;COMPOSER_BIN_DIR&lt;/code&gt;</source>
          <target state="translated">환경 변수 &lt;code&gt;COMPOSER_BIN_DIR&lt;/code&gt; 설정</target>
        </trans-unit>
        <trans-unit id="af23ae56582131e07f436b39f455d9b7d1775c48" translate="yes" xml:space="preserve">
          <source>Setting up and using custom installers</source>
          <target state="translated">사용자 정의 설치 프로그램 설정 및 사용</target>
        </trans-unit>
        <trans-unit id="f9f484fe084b559575d6a474fc363c8262aa4d5b" translate="yes" xml:space="preserve">
          <source>Setting up and using plugins</source>
          <target state="translated">플러그인 설정 및 사용</target>
        </trans-unit>
        <trans-unit id="cdd7bb2816b7a8f88bce0e47be39943bc369516b" translate="yes" xml:space="preserve">
          <source>Setup</source>
          <target state="translated">Setup</target>
        </trans-unit>
        <trans-unit id="4226ac02b9051f1d88c8061a46bff4b36feed5e3" translate="yes" xml:space="preserve">
          <source>Should I commit the dependencies in my vendor directory?</source>
          <target state="translated">공급 업체 디렉토리에서 종속성을 커밋해야합니까?</target>
        </trans-unit>
        <trans-unit id="fed63dbe315e1977317e6b4cf10f84a0bfa8ebac" translate="yes" xml:space="preserve">
          <source>Similar to the &lt;code&gt;run-script&lt;/code&gt; command you can give additional arguments to scripts, e.g. &lt;code&gt;composer test -- --filter &amp;lt;pattern&amp;gt;&lt;/code&gt; will pass &lt;code&gt;--filter &amp;lt;pattern&amp;gt;&lt;/code&gt; along to the &lt;code&gt;phpunit&lt;/code&gt; script.</source>
          <target state="translated">&lt;code&gt;run-script&lt;/code&gt; 명령 과 유사하게 스크립트에 추가 인수를 제공 할 수 있습니다 (예 : &lt;code&gt;composer test -- --filter &amp;lt;pattern&amp;gt;&lt;/code&gt; 는 &lt;code&gt;--filter &amp;lt;pattern&amp;gt;&lt;/code&gt; 을 &lt;code&gt;phpunit&lt;/code&gt; 스크립트 와 함께 전달 함) .</target>
        </trans-unit>
        <trans-unit id="505c2aef95bc2765ce09ae92a6ca5a4a2e326f2b" translate="yes" xml:space="preserve">
          <source>Similarly when multiple licenses need to be applied (&quot;conjunctive license&quot;), they should be separated with &quot;and&quot; and enclosed in parenthesis.</source>
          <target state="translated">마찬가지로 여러 라이센스를 적용해야하는 경우 ( &quot;연관 라이센스&quot;) &quot;and&quot;로 분리하고 괄호로 묶어야합니다.</target>
        </trans-unit>
        <trans-unit id="07757201e1834f1bb8a3143e05ba241fefdc3d8b" translate="yes" xml:space="preserve">
          <source>Since Subversion has no native concept of branches and tags, Composer assumes by default that code is located in &lt;code&gt;$url/trunk&lt;/code&gt;, &lt;code&gt;$url/branches&lt;/code&gt; and &lt;code&gt;$url/tags&lt;/code&gt;. If your repository has a different layout you can change those values. For example if you used capitalized names you could configure the repository like this:</source>
          <target state="translated">Subversion에는 기본 분기 및 태그 개념이 없으므로 Composer는 기본적으로 코드가 &lt;code&gt;$url/trunk&lt;/code&gt; , &lt;code&gt;$url/branches&lt;/code&gt; 및 &lt;code&gt;$url/tags&lt;/code&gt; 있다고 가정 합니다 . 저장소에 다른 레이아웃이있는 경우 해당 값을 변경할 수 있습니다. 예를 들어 대문자를 사용한 경우 다음과 같이 저장소를 구성 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a1bed418fe5291e542f2bb5af84238985d583150" translate="yes" xml:space="preserve">
          <source>Some of Private Packagist's revenue is used to pay for Composer and Packagist.org development and hosting so using it is a good way to support the maintenance of these open source projects financially. You can find more information about how to set up your own package archive on &lt;a href=&quot;https://packagist.com&quot;&gt;Packagist.com&lt;/a&gt;.</source>
          <target state="translated">Private Packagist의 수익 중 일부는 Composer 및 Packagist.org 개발 및 호스팅 비용을 지불하는 데 사용되므로이를 사용하면 이러한 오픈 소스 프로젝트의 유지 관리를 재정적으로 지원할 수 있습니다. &lt;a href=&quot;https://packagist.com&quot;&gt;Packagist.com&lt;/a&gt; 에서 자체 패키지 아카이브를 설정하는 방법에 대한 자세한 정보를 찾을 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="d5d81a8f8c1036267fdfca0f8435abe72c266686" translate="yes" xml:space="preserve">
          <source>Some of those libraries depend on other libraries.</source>
          <target state="translated">이러한 라이브러리 중 일부는 다른 라이브러리에 의존합니다.</target>
        </trans-unit>
        <trans-unit id="ce09e2a04d1ee91f7c193aa30ccee69c0962bbb6" translate="yes" xml:space="preserve">
          <source>Stability Constraints</source>
          <target state="translated">안정성 제약</target>
        </trans-unit>
        <trans-unit id="b500adbbebfd71b34fddb37de3e62913e7c37fbd" translate="yes" xml:space="preserve">
          <source>Stack Overflow has a growing collection of &lt;a href=&quot;https://stackoverflow.com/questions/tagged/composer-php&quot;&gt;Composer related questions&lt;/a&gt;.</source>
          <target state="translated">스택 오버플로에는 점점 더 많은 &lt;a href=&quot;https://stackoverflow.com/questions/tagged/composer-php&quot;&gt;Composer 관련 질문이&lt;/a&gt; 있습니다.</target>
        </trans-unit>
        <trans-unit id="3fc3578f9d49c8b0cad651c3dd63878f9b611d5e" translate="yes" xml:space="preserve">
          <source>Subversion Options</source>
          <target state="translated">서브 버전 옵션</target>
        </trans-unit>
        <trans-unit id="c0b6128dc969b8189931a29860ad74c7707de85e" translate="yes" xml:space="preserve">
          <source>Suggested packages that can enhance or work well with this package. These are informational and are displayed after the package is installed, to give your users a hint that they could add more packages, even though they are not strictly required.</source>
          <target state="translated">이 패키지를 향상 시키거나 잘 사용할 수있는 제안 된 패키지. 정보 제공 용이며 패키지 설치 후 표시되므로 사용자가 패키지를 엄격하게 요구하지 않아도 추가 할 수 있다는 힌트를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="12b71c3e0fe5f7c0b8d17cc03186e281412da4a8" translate="yes" xml:space="preserve">
          <source>Summary</source>
          <target state="translated">Summary</target>
        </trans-unit>
        <trans-unit id="28d1a6decd2e638f2e207094e4022a81f85e33b1" translate="yes" xml:space="preserve">
          <source>Support information includes the following:</source>
          <target state="translated">지원 정보는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="178e128d3e0c743ef84dc31fd34744e94560d958" translate="yes" xml:space="preserve">
          <source>Suppose at a later time you wish to migrate your PEAR packages to a Composer repository and naming scheme, and adopt the vendor name of &lt;code&gt;foobar&lt;/code&gt;. Projects using your PEAR packages would not see the updated packages, since they have a different vendor name (&lt;code&gt;foobar/IntermediatePackage&lt;/code&gt; vs &lt;code&gt;pear-pear.foobar.repo/IntermediatePackage&lt;/code&gt;).</source>
          <target state="translated">나중에 PEAR 패키지를 Composer 저장소 및 이름 지정 체계로 마이그레이션하고 공급 업체 이름 &lt;code&gt;foobar&lt;/code&gt; 를 채택하려고한다고 가정하십시오 . PEAR 패키지를 사용하는 프로젝트는 다른 공급 업체 이름 ( &lt;code&gt;foobar/IntermediatePackage&lt;/code&gt; vs &lt;code&gt;pear-pear.foobar.repo/IntermediatePackage&lt;/code&gt; ) 을 갖기 때문에 업데이트 된 패키지를 볼 수 없습니다 .</target>
        </trans-unit>
        <trans-unit id="b7151b24f20e3570c88fe771b993984180a7026e" translate="yes" xml:space="preserve">
          <source>Suppose that your project already has a Custom Installer for specific modules then invoking that installer is a matter of defining the correct &lt;a href=&quot;../04-schema.md#type&quot;&gt;type&lt;/a&gt; in your package file.</source>
          <target state="translated">프로젝트에 특정 모듈에 대한 사용자 정의 설치 프로그램이 이미 있다고 가정하고 해당 설치 프로그램을 호출하는 것은 패키지 파일에서 올바른 &lt;a href=&quot;../04-schema.md#type&quot;&gt;유형&lt;/a&gt; 을 정의하는 문제입니다 .</target>
        </trans-unit>
        <trans-unit id="e52bd5474aee7c47125d6c88e627d38304399a38" translate="yes" xml:space="preserve">
          <source>Suppose you have a private PEAR repository and wish to use Composer to incorporate dependencies from a VCS. Your PEAR repository contains the following packages:</source>
          <target state="translated">개인 PEAR 저장소가 있고 Composer를 사용하여 VCS의 종속성을 통합하려고한다고 가정하십시오. PEAR 저장소에는 다음 패키지가 포함되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="b130631fc1a052b53e9b573c6a35c3793ee28509" translate="yes" xml:space="preserve">
          <source>Suppose:</source>
          <target state="translated">Suppose:</target>
        </trans-unit>
        <trans-unit id="36c0630a340d2960affa1c4d2360b0e2c06793fb" translate="yes" xml:space="preserve">
          <source>Synopsis</source>
          <target state="translated">Synopsis</target>
        </trans-unit>
        <trans-unit id="0e1642f6a15ccf097e1cdabd2a2cd6876eb2a2b4" translate="yes" xml:space="preserve">
          <source>System Requirements</source>
          <target state="translated">시스템 요구 사항</target>
        </trans-unit>
        <trans-unit id="848eed0fbd5429f556b2982dec3ea87136e33e44" translate="yes" xml:space="preserve">
          <source>Tags</source>
          <target state="translated">Tags</target>
        </trans-unit>
        <trans-unit id="b70c6eaf1355459ee9b2792678e48b364ac7a92a" translate="yes" xml:space="preserve">
          <source>Testing Version Constraints</source>
          <target state="translated">버전 제약 조건 테스트</target>
        </trans-unit>
        <trans-unit id="38971f840464aad791a1ca6172cba81ab073a153" translate="yes" xml:space="preserve">
          <source>That said, if this fixes your problem, please talk to your ISP about it to try and resolve the routing errors. That's the best way to get things resolved for everyone.</source>
          <target state="translated">즉, 문제가 해결되면 ISP에 문의하여 라우팅 오류를 해결하십시오. 이것이 모든 사람에게 문제를 해결하는 가장 좋은 방법입니다.</target>
        </trans-unit>
        <trans-unit id="0cf9c170058ae7fe4ac78ba8a0f70a5c525899ab" translate="yes" xml:space="preserve">
          <source>That will fetch the &lt;code&gt;dev-bugfix&lt;/code&gt; version of &lt;code&gt;monolog/monolog&lt;/code&gt; from your GitHub and alias it to &lt;code&gt;1.0.x-dev&lt;/code&gt;.</source>
          <target state="translated">그러면 GitHub에서 &lt;code&gt;dev-bugfix&lt;/code&gt; 버전의 &lt;code&gt;monolog/monolog&lt;/code&gt; 를 가져 와서 &lt;code&gt;1.0.x-dev&lt;/code&gt; 로 별칭을 지정합니다 .</target>
        </trans-unit>
        <trans-unit id="1ae72273043859b4044f98f451fcae97261be08a" translate="yes" xml:space="preserve">
          <source>That will store it in the current directory's auth.json, but if you want it available globally you can use the &lt;code&gt;--global&lt;/code&gt; (&lt;code&gt;-g&lt;/code&gt;) flag.</source>
          <target state="translated">현재 디렉토리의 auth.json에 저장하지만, 전 세계에서 사용 가능하게하려면 &lt;code&gt;--global&lt;/code&gt; ( &lt;code&gt;-g&lt;/code&gt; ) 플래그를 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="38ca4f78e527bb3cb8fc5615d830b1cad2faef41" translate="yes" xml:space="preserve">
          <source>That's all. You can now install the dependencies by running Composer's &lt;a href=&quot;03-cli.md#install&quot;&gt;&lt;code&gt;install&lt;/code&gt;&lt;/a&gt; command!</source>
          <target state="translated">그게 다야. 이제 Composer의 &lt;a href=&quot;03-cli.md#install&quot;&gt; &lt;code&gt;install&lt;/code&gt; &lt;/a&gt; 명령 을 실행하여 종속성을 설치할 수 있습니다 !</target>
        </trans-unit>
        <trans-unit id="6f7a7ff242bfd8b5c67a5855a5c9da8aeb28993f" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../04-schema.md#extra&quot;&gt;extra&lt;/a&gt; attribute must contain an element &lt;code&gt;class&lt;/code&gt; defining the class name of the plugin (including namespace). If a package contains multiple plugins, this can be array of class names.</source>
          <target state="translated">&lt;a href=&quot;../04-schema.md#extra&quot;&gt;추가&lt;/a&gt; 속성은 요소의 메시지 있어야합니다 &lt;code&gt;class&lt;/code&gt; (네임 스페이스 포함) 플러그인의 클래스 이름을 정의합니다. 패키지에 여러 개의 플러그인이 포함 된 경우 클래스 이름 배열 일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e63d949c881e513c359946a15964fc66ca3a9f38" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../04-schema.md#repositories&quot;&gt;&lt;code&gt;repositories&lt;/code&gt;&lt;/a&gt; configuration property is defined as &lt;a href=&quot;../04-schema.md#root-package&quot;&gt;root-only&lt;/a&gt;. It is not inherited. You can read more about the reasons behind this in the &quot;&lt;a href=&quot;https://getcomposer.org/doc/faqs/why-can't-composer-load-repositories-recursively.md&quot;&gt;why can't composer load repositories recursively?&lt;/a&gt;&quot; article. The simplest work-around to this limitation, is moving or duplicating the &lt;code&gt;repositories&lt;/code&gt; definition into your root composer.json.</source>
          <target state="translated">&lt;a href=&quot;../04-schema.md#repositories&quot;&gt; &lt;code&gt;repositories&lt;/code&gt; &lt;/a&gt; 구성 등록 정보는 다음과 같이 정의된다 &lt;a href=&quot;../04-schema.md#root-package&quot;&gt;루트 전용&lt;/a&gt; . 상속되지 않습니다. &quot; &lt;a href=&quot;https://getcomposer.org/doc/faqs/why-can't-composer-load-repositories-recursively.md&quot;&gt;컴포저가 저장소를 재귀 적으로로드 할 수없는 이유는 무엇입니까?&lt;/a&gt; &quot;기사 에서이 이유에 대한 자세한 내용을 읽을 수 있습니다 . 이 제한에 대한 가장 간단한 해결 방법은 &lt;code&gt;repositories&lt;/code&gt; 정의를 루트 composer.json으로 옮기거나 복제하는 것 입니다.</target>
        </trans-unit>
        <trans-unit id="7e648472e86fccaf7b5a0d4f0178fcbf7990ea9f" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../04-schema.md#type&quot;&gt;type&lt;/a&gt; attribute must be &lt;code&gt;composer-plugin&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;../04-schema.md#type&quot;&gt;유형의&lt;/a&gt; 속성은해야 &lt;code&gt;composer-plugin&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="9c0c186b57848575cfd467a57c175faa35ce67c4" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://github.com/composer/composer/blob/master/src/Composer/Plugin/Capability/CommandProvider.php&quot;&gt;&lt;code&gt;Composer\Plugin\Capability\CommandProvider&lt;/code&gt;&lt;/a&gt; capability allows to register additional commands for Composer :</source>
          <target state="translated">&lt;a href=&quot;https://github.com/composer/composer/blob/master/src/Composer/Plugin/Capability/CommandProvider.php&quot;&gt; &lt;code&gt;Composer\Plugin\Capability\CommandProvider&lt;/code&gt; &lt;/a&gt; 기능은 작곡가에 대한 추가 명령을 등록 할 수 있습니다 :</target>
        </trans-unit>
        <trans-unit id="325c906fcb1706b6d31de5f9aea2d2c7863feee2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&quot;package&quot;&lt;/code&gt; key in a &lt;code&gt;package&lt;/code&gt; repository may be set to an array to define multiple versions of a package:</source>
          <target state="translated">&lt;code&gt;package&lt;/code&gt; 저장소 의 &lt;code&gt;&quot;package&quot;&lt;/code&gt; 키는 패키지의 여러 버전을 정의하기 위해 배열로 설정 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2d194afcac512a2852d1eb7e545166d274d4dfcf" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@composer.json&lt;/code&gt; marker would be the contents of the &lt;code&gt;composer.json&lt;/code&gt; from that package version including as a minimum:</source>
          <target state="translated">&lt;code&gt;@composer.json&lt;/code&gt; 마커의 내용이 될 것 &lt;code&gt;composer.json&lt;/code&gt; 최소로 포함하는 패키지 버전 :</target>
        </trans-unit>
        <trans-unit id="bd712f3b81992c5860b40a6b5ab839dc7e577f9c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;COMPOSER_AUTH&lt;/code&gt; var allows you to set up authentication as an environment variable. The contents of the variable should be a JSON formatted object containing http-basic, github-oauth, bitbucket-oauth, ... objects as needed, and following the &lt;a href=&quot;06-config.md#gitlab-oauth&quot;&gt;spec from the config&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;COMPOSER_AUTH&lt;/code&gt; 의 VAR은 환경 변수로 인증을 설정할 수 있습니다. 변수의 내용은 필요에 따라 http-basic, github-oauth, bitbucket-oauth, ... 객체 &lt;a href=&quot;06-config.md#gitlab-oauth&quot;&gt;를 포함하고 config&lt;/a&gt; 의 스펙을 따르는 JSON 형식의 객체 여야합니다 .</target>
        </trans-unit>
        <trans-unit id="3ed00a9880a9e50789f89e7aab7d95b03db98829" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;COMPOSER_CACHE_DIR&lt;/code&gt; var allows you to change the Composer cache directory, which is also configurable via the &lt;a href=&quot;06-config.md#cache-dir&quot;&gt;&lt;code&gt;cache-dir&lt;/code&gt;&lt;/a&gt; option.</source>
          <target state="translated">&lt;code&gt;COMPOSER_CACHE_DIR&lt;/code&gt; 의 VAR은 또한을 통해 구성 할 합성기 캐시 디렉토리, 변경할 수있는 &lt;a href=&quot;06-config.md#cache-dir&quot;&gt; &lt;code&gt;cache-dir&lt;/code&gt; &lt;/a&gt; 옵션을 선택합니다.</target>
        </trans-unit>
        <trans-unit id="7bc49fec4bcc895b60c5179e29c54bb2670855e4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;COMPOSER_HOME&lt;/code&gt; var allows you to change the Composer home directory. This is a hidden, global (per-user on the machine) directory that is shared between all projects.</source>
          <target state="translated">&lt;code&gt;COMPOSER_HOME&lt;/code&gt; 의 VAR는 합성기의 홈 디렉토리를 변경할 수 있습니다. 이것은 모든 프로젝트간에 공유되는 숨겨진 전역 (시스템의 사용자 별) 디렉토리입니다.</target>
        </trans-unit>
        <trans-unit id="e041cfbe9bb1437b512da0ba6bc16c640c5d064f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;^&lt;/code&gt; operator behaves very similarly but it sticks closer to semantic versioning, and will always allow non-breaking updates. For example &lt;code&gt;^1.2.3&lt;/code&gt; is equivalent to &lt;code&gt;&amp;gt;=1.2.3 &amp;lt;2.0.0&lt;/code&gt; as none of the releases until 2.0 should break backwards compatibility. For pre-1.0 versions it also acts with safety in mind and treats &lt;code&gt;^0.3&lt;/code&gt; as &lt;code&gt;&amp;gt;=0.3.0 &amp;lt;0.4.0&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;^&lt;/code&gt; 운영자 동작합니다 매우 유사하지만, 의미 론적 버전에 가까운 스틱, 항상 비 분리 업데이트를 허용합니다. 예를 들어 &lt;code&gt;^1.2.3&lt;/code&gt; 은 2.0보다 이전 버전과의 호환성이 없어야 하기 때문에 &lt;code&gt;&amp;gt;=1.2.3 &amp;lt;2.0.0&lt;/code&gt; 과 같습니다. 1.0 이전 버전의 경우 안전을 염두에두고 &lt;code&gt;^0.3&lt;/code&gt; 을 &lt;code&gt;&amp;gt;=0.3.0 &amp;lt;0.4.0&lt;/code&gt; 으로 취급합니다 .</target>
        </trans-unit>
        <trans-unit id="015e5b54a0eec0b1d03e7f482cd6462e60215bba" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;browse&lt;/code&gt; (aliased to &lt;code&gt;home&lt;/code&gt;) opens a package's repository URL or homepage in your browser.</source>
          <target state="translated">&lt;code&gt;browse&lt;/code&gt; (별칭 &lt;code&gt;home&lt;/code&gt; ) 브라우저에서 패키지의 저장소 URL 또는 홈페이지를 엽니 다.</target>
        </trans-unit>
        <trans-unit id="e24a601ed15c83838a05734062b36f958f6fe9aa" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;classmap&lt;/code&gt; references are all combined, during install/update, into a single key =&amp;gt; value array which may be found in the generated file &lt;code&gt;vendor/composer/autoload_classmap.php&lt;/code&gt;. This map is built by scanning for classes in all &lt;code&gt;.php&lt;/code&gt; and &lt;code&gt;.inc&lt;/code&gt; files in the given directories/files.</source>
          <target state="translated">&lt;code&gt;classmap&lt;/code&gt; 에서 생성 된 파일에서 발견 될 수있는 하나의 키 =&amp;gt; 값의 배열 / 업데이트를 설치할 때 참조는 모든 결합 &lt;code&gt;vendor/composer/autoload_classmap.php&lt;/code&gt; . 이 맵은 주어진 디렉토리 / 파일에있는 모든 &lt;code&gt;.php&lt;/code&gt; 및 &lt;code&gt;.inc&lt;/code&gt; 파일에서 클래스를 스캔하여 작성됩니다 .</target>
        </trans-unit>
        <trans-unit id="21bbbda97714f24cc525ea7078e6201890999863" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;config&lt;/code&gt; command allows you to edit composer config settings and repositories in either the local &lt;code&gt;composer.json&lt;/code&gt; file or the global &lt;code&gt;config.json&lt;/code&gt; file.</source>
          <target state="translated">&lt;code&gt;config&lt;/code&gt; 명령은 로컬 하나로 편집 작곡가의 구성 설정 및 저장소에 당신을 수 있습니다 &lt;code&gt;composer.json&lt;/code&gt; 의 파일 또는 글로벌 &lt;code&gt;config.json&lt;/code&gt; 의 파일.</target>
        </trans-unit>
        <trans-unit id="c6c37718b606670d0260bf58b8957a8aa19464e2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;depends&lt;/code&gt; command tells you which other packages depend on a certain package. As with installation &lt;code&gt;require-dev&lt;/code&gt; relationships are only considered for the root package.</source>
          <target state="translated">&lt;code&gt;depends&lt;/code&gt; 명령이 다른 패키지가 어떤 패키지에 의존을 알려줍니다. 설치와 마찬가지로 &lt;code&gt;require-dev&lt;/code&gt; 관계는 루트 패키지에만 고려됩니다.</target>
        </trans-unit>
        <trans-unit id="cd8cb2da2827dbba6abaedf322dadfb22ed9c77d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;dev-master&lt;/code&gt; branch is one in your main VCS repo. It is rather common that someone will want the latest master dev version. Thus, Composer allows you to alias your &lt;code&gt;dev-master&lt;/code&gt; branch to a &lt;code&gt;1.0.x-dev&lt;/code&gt; version. It is done by specifying a &lt;code&gt;branch-alias&lt;/code&gt; field under &lt;code&gt;extra&lt;/code&gt; in &lt;code&gt;composer.json&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;dev-master&lt;/code&gt; 분기 주요 VCS의 환매 특약의 하나입니다. 누군가가 최신 마스터 개발 버전을 원할 것입니다. 따라서 Composer를 사용하면 &lt;code&gt;dev-master&lt;/code&gt; 분기의 별칭 을 &lt;code&gt;1.0.x-dev&lt;/code&gt; 버전 으로 지정할 수 있습니다 . 그것은 지정하여 수행되는 &lt;code&gt;branch-alias&lt;/code&gt; 에서 필드 &lt;code&gt;extra&lt;/code&gt; 에 &lt;code&gt;composer.json&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="3ffd5faf0b39f88ce9eee783d1d943fc47e2604b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;install&lt;/code&gt; command reads the &lt;code&gt;composer.json&lt;/code&gt; file from the current directory, resolves the dependencies, and installs them into &lt;code&gt;vendor&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;install&lt;/code&gt; 명령은 읽기 &lt;code&gt;composer.json&lt;/code&gt; 의 현재 디렉토리에서 파일을 종속성을 해결하고로 설치 &lt;code&gt;vendor&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="af9d00ff9fc127804bb95896f7496fcf274263e3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;notify-batch&lt;/code&gt; field allows you to specify a URL that will be called every time a user installs a package. The URL can be either an absolute path (that will use the same domain as the repository) or a fully qualified URL.</source>
          <target state="translated">는 &lt;code&gt;notify-batch&lt;/code&gt; 필드는 사용자가 패키지를 설치 할 때마다 호출되는 URL을 지정할 수 있습니다. URL은 절대 경로 (저장소와 동일한 도메인을 사용함) 또는 완전한 URL 일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5dc0d928853964ca3fd6729ac78fc54fe7baf249" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;outdated&lt;/code&gt; command shows a list of installed packages that have updates available, including their current and latest versions. This is basically an alias for &lt;code&gt;composer show -lo&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;outdated&lt;/code&gt; 명령 쇼 현재 최신 버전을 포함하여 사용 가능한 업데이트를 가지고 설치된 패키지의 목록을 표시합니다. 기본적으로 &lt;code&gt;composer show -lo&lt;/code&gt; 의 별칭입니다 .</target>
        </trans-unit>
        <trans-unit id="1fc3b3ae8a67c22d97268e322bf22ea6082ae19e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;packages.json&lt;/code&gt; file is loaded using a PHP stream. You can set extra options on that stream using the &lt;code&gt;options&lt;/code&gt; parameter. You can set any valid PHP stream context option. See &lt;a href=&quot;https://php.net/manual/en/context.php&quot;&gt;Context options and parameters&lt;/a&gt; for more information.</source>
          <target state="translated">&lt;code&gt;packages.json&lt;/code&gt; 의 파일은 PHP 스트림을 사용하여로드됩니다. &lt;code&gt;options&lt;/code&gt; 매개 변수를 사용하여 해당 스트림에서 추가 옵션을 설정할 수 있습니다 . 유효한 PHP 스트림 컨텍스트 옵션을 설정할 수 있습니다. 자세한 정보는 &lt;a href=&quot;https://php.net/manual/en/context.php&quot;&gt;컨텍스트 옵션 및 매개 변수&lt;/a&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="71efcc29e40b42abc0b13e32c0ea8a45315fc701" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;prohibits&lt;/code&gt; command tells you which packages are blocking a given package from being installed. Specify a version constraint to verify whether upgrades can be performed in your project, and if not why not. See the following example:</source>
          <target state="translated">&lt;code&gt;prohibits&lt;/code&gt; 명령은 패키지가 설치되는 특정 패키지를 차단하는 방법을 알려줍니다. 버전 제약 조건을 지정하여 프로젝트에서 업그레이드를 수행 할 수 있는지 여부를 확인하십시오. 다음 예를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="f4fb232cdcc4af02a2a6fc8964c4e4e68c3772b2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;provider-includes&lt;/code&gt; field allows you to list a set of files that list package names provided by this repository. The hash should be a sha256 of the files in this case.</source>
          <target state="translated">&lt;code&gt;provider-includes&lt;/code&gt; 필드는 목록 패키지 이름이 저장소에 의해 제공되는 파일 세트를 나열 할 수 있습니다. 이 경우 해시는 파일의 sha256이어야합니다.</target>
        </trans-unit>
        <trans-unit id="99a72339c9fbd5f71d239e716a19d3ef78a99394" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;providers-url&lt;/code&gt; describes how provider files are found on the server. It is an absolute path from the repository root. It must contain the placeholders &lt;code&gt;%package%&lt;/code&gt; and &lt;code&gt;%hash%&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;providers-url&lt;/code&gt; 제공 파일이 서버에서 찾을 수있는 방법에 대해 설명합니다. 저장소 루트로부터의 절대 경로입니다. 플레이스 홀더 &lt;code&gt;%package%&lt;/code&gt; 및 &lt;code&gt;%hash%&lt;/code&gt; 가 포함되어야합니다 .</target>
        </trans-unit>
        <trans-unit id="28b5498e54a0d27ed7d7003af00bb9c9ef721186" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;remove&lt;/code&gt; command removes packages from the &lt;code&gt;composer.json&lt;/code&gt; file from the current directory.</source>
          <target state="translated">&lt;code&gt;remove&lt;/code&gt; 명령에서 패키지를 제거 &lt;code&gt;composer.json&lt;/code&gt; 의 현재 디렉토리에서 파일.</target>
        </trans-unit>
        <trans-unit id="a2a826c2fb4b4f08c3a69b19718facb4884e979c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;require&lt;/code&gt; command adds new packages to the &lt;code&gt;composer.json&lt;/code&gt; file from the current directory. If no file exists one will be created on the fly.</source>
          <target state="translated">이 &lt;code&gt;require&lt;/code&gt; 명령은 새로운 패키지를 추가 &lt;code&gt;composer.json&lt;/code&gt; 의 현재 디렉토리에서 파일. 파일이 없으면 즉시 생성됩니다.</target>
        </trans-unit>
        <trans-unit id="3ab1e58fb4e10f7b6b5e0e76a52020bdc4252e34" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;require&lt;/code&gt; key</source>
          <target state="translated">은 &lt;code&gt;require&lt;/code&gt; 키를</target>
        </trans-unit>
        <trans-unit id="346d1272d0323d4c3803e8e8e133e5fcf9d5248b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;true&lt;/code&gt; value indicates that the package is truly abandoned while the &lt;code&gt;&quot;company/newpackage&quot;&lt;/code&gt; value specifies that the package is replaced by the &lt;code&gt;company/newpackage&lt;/code&gt; package.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 값은 패키지가 진정으로 포기되는 것을 나타내는 반면 &lt;code&gt;&quot;company/newpackage&quot;&lt;/code&gt; 패키지가 대체되는 값을 지정 &lt;code&gt;company/newpackage&lt;/code&gt; 패키지로 제공된다.</target>
        </trans-unit>
        <trans-unit id="c56cadbd66f034c7c3ee76e3d00211e36a3d21e0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;~&lt;/code&gt; operator is best explained by example: &lt;code&gt;~1.2&lt;/code&gt; is equivalent to &lt;code&gt;&amp;gt;=1.2 &amp;lt;2.0.0&lt;/code&gt;, while &lt;code&gt;~1.2.3&lt;/code&gt; is equivalent to &lt;code&gt;&amp;gt;=1.2.3 &amp;lt;1.3.0&lt;/code&gt;. As you can see it is mostly useful for projects respecting &lt;a href=&quot;https://semver.org/&quot;&gt;semantic versioning&lt;/a&gt;. A common usage would be to mark the minimum minor version you depend on, like &lt;code&gt;~1.2&lt;/code&gt; (which allows anything up to, but not including, 2.0). Since in theory there should be no backwards compatibility breaks until 2.0, that works well. Another way of looking at it is that using &lt;code&gt;~&lt;/code&gt; specifies a minimum version, but allows the last digit specified to go up.</source>
          <target state="translated">&lt;code&gt;~&lt;/code&gt; 연산자 가장 예에 의해 설명된다 : &lt;code&gt;~1.2&lt;/code&gt; 당량되는 &lt;code&gt;&amp;gt;=1.2 &amp;lt;2.0.0&lt;/code&gt; 반면 &lt;code&gt;~1.2.3&lt;/code&gt; 동등 &lt;code&gt;&amp;gt;=1.2.3 &amp;lt;1.3.0&lt;/code&gt; . 당신이 볼 수 있듯이 그것은 &lt;a href=&quot;https://semver.org/&quot;&gt;의미 버전 관리와&lt;/a&gt; 관련된 프로젝트에 주로 유용합니다 . 일반적인 사용법은 &lt;code&gt;~1.2&lt;/code&gt; 와 같이 의존하는 최소 부 버전을 표시하는 것입니다 (2.0까지는 포함하지 않음). 이론적으로 2.0까지는 이전 버전과의 호환성 중단이 없어야하므로 잘 작동합니다. &lt;code&gt;~&lt;/code&gt; 를 사용 하면 최소 버전을 지정하지만 지정된 마지막 숫자가 올라갈 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f025912d98018c171a9e7aa4c512d6735e081304" translate="yes" xml:space="preserve">
          <source>The BitBucket driver uses OAuth to access your private repositories via the BitBucket REST APIs and you will need to create an OAuth consumer to use the driver, please refer to &lt;a href=&quot;https://confluence.atlassian.com/bitbucket/oauth-on-bitbucket-cloud-238027431.html&quot;&gt;Atlassian's Documentation&lt;/a&gt;. You will need to fill the callback url with something to satisfy BitBucket, but the address does not need to go anywhere and is not used by Composer.</source>
          <target state="translated">BitBucket 드라이버는 OAuth를 사용하여 BitBucket REST API를 통해 개인 리포지토리에 액세스하므로 드라이버를 사용하려면 OAuth 소비자를 만들어야합니다 . &lt;a href=&quot;https://confluence.atlassian.com/bitbucket/oauth-on-bitbucket-cloud-238027431.html&quot;&gt;Atlassian 's Documentation을&lt;/a&gt; 참조하십시오 . 콜백 URL을 BitBucket을 만족시키기 위해 무언가로 채워야하지만 주소는 어디든 갈 필요가 없으며 Composer에서 사용하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="d8325f01cfc89ecc5834c22272e499dc2a35975d" translate="yes" xml:space="preserve">
          <source>The Custom Installer class</source>
          <target state="translated">커스텀 인스톨러 클래스</target>
        </trans-unit>
        <trans-unit id="9ffda155dc61c6b7fc0c53c17b097166f828397f" translate="yes" xml:space="preserve">
          <source>The Installer class, e.g.: &lt;code&gt;My\Project\Composer\Installer.php&lt;/code&gt;, containing a class that implements &lt;code&gt;Composer\Installer\InstallerInterface&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Composer\Installer\InstallerInterface&lt;/code&gt; 를 구현하는 클래스를 포함하는 Installer 클래스 (예 : &lt;code&gt;My\Project\Composer\Installer.php&lt;/code&gt; ) .</target>
        </trans-unit>
        <trans-unit id="40980219df2f4506ac88e5c28f53b42bdd97d1a6" translate="yes" xml:space="preserve">
          <source>The InstallerInterface class defines the following methods (please see the source for the exact signature):</source>
          <target state="translated">InstallerInterface 클래스는 다음 메소드를 정의합니다 (정확한 서명은 소스를 참조하십시오).</target>
        </trans-unit>
        <trans-unit id="6a8be988f00a6babc58dafb4dd2328cbd191b0a7" translate="yes" xml:space="preserve">
          <source>The PSR-0 references are all combined, during install/update, into a single key =&amp;gt; value array which may be found in the generated file &lt;code&gt;vendor/composer/autoload_namespaces.php&lt;/code&gt;.</source>
          <target state="translated">PSR-0 참조는 설치 / 업데이트 중에 생성 된 파일 &lt;code&gt;vendor/composer/autoload_namespaces.php&lt;/code&gt; 에서 찾을 수있는 단일 키 =&amp;gt; 값 배열로 모두 결합 됩니다.</target>
        </trans-unit>
        <trans-unit id="e895bca51e7dbca56269fca833da7d53335b08ce" translate="yes" xml:space="preserve">
          <source>The PSR-0 style is not limited to namespace declarations only but may be specified right down to the class level. This can be useful for libraries with only one class in the global namespace. If the php source file is also located in the root of the package, for example, it may be declared like this:</source>
          <target state="translated">PSR-0 스타일은 네임 스페이스 선언에만 국한되지 않고 클래스 수준까지 바로 지정할 수 있습니다. 전역 네임 스페이스에 클래스가 하나 뿐인 라이브러리에 유용 할 수 있습니다. 예를 들어, PHP 소스 파일이 패키지의 루트에있는 경우 다음과 같이 선언 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="cbb9bada46ef9caab4f699c77fb22360668e31ba" translate="yes" xml:space="preserve">
          <source>The PSR-4 references are all combined, during install/update, into a single key =&amp;gt; value array which may be found in the generated file &lt;code&gt;vendor/composer/autoload_psr4.php&lt;/code&gt;.</source>
          <target state="translated">PSR-4 참조는 설치 / 업데이트 중에 생성 된 파일 &lt;code&gt;vendor/composer/autoload_psr4.php&lt;/code&gt; 에서 찾을 수있는 단일 키 =&amp;gt; 값 배열로 모두 결합 됩니다.</target>
        </trans-unit>
        <trans-unit id="ea8afc8984ffee8650e20f4736a1022091c847c6" translate="yes" xml:space="preserve">
          <source>The Plugin class</source>
          <target state="translated">플러그인 클래스</target>
        </trans-unit>
        <trans-unit id="b068549699c4405448400cc7e68c4a937ff32939" translate="yes" xml:space="preserve">
          <source>The Plugin class, e.g.: &lt;code&gt;My\Project\Composer\Plugin.php&lt;/code&gt;, containing a class that implements &lt;code&gt;Composer\Plugin\PluginInterface&lt;/code&gt;.</source>
          <target state="translated">플러그인 클래스 (예 : &lt;code&gt;My\Project\Composer\Plugin.php&lt;/code&gt; ) . &lt;code&gt;Composer\Plugin\PluginInterface&lt;/code&gt; 를 구현하는 클래스가 포함되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="a9837d2cfdfe1047f666926235fe851440587ed9" translate="yes" xml:space="preserve">
          <source>The VCS driver to be used is detected automatically based on the URL. However, should you need to specify one for whatever reason, you can use &lt;code&gt;git-bitbucket&lt;/code&gt;, &lt;code&gt;hg-bitbucket&lt;/code&gt;, &lt;code&gt;github&lt;/code&gt;, &lt;code&gt;gitlab&lt;/code&gt;, &lt;code&gt;perforce&lt;/code&gt;, &lt;code&gt;fossil&lt;/code&gt;, &lt;code&gt;git&lt;/code&gt;, &lt;code&gt;svn&lt;/code&gt; or &lt;code&gt;hg&lt;/code&gt; as the repository type instead of &lt;code&gt;vcs&lt;/code&gt;.</source>
          <target state="translated">사용할 VCS 드라이버는 URL을 기반으로 자동 감지됩니다. 그러나 어떤 이유로 든 하나를 지정 &lt;code&gt;gitlab&lt;/code&gt; 경우 &lt;code&gt;vcs&lt;/code&gt; 대신 저장소 유형으로 &lt;code&gt;git-bitbucket&lt;/code&gt; , &lt;code&gt;hg-bitbucket&lt;/code&gt; , &lt;code&gt;github&lt;/code&gt; , gitlab , &lt;code&gt;perforce&lt;/code&gt; , &lt;code&gt;fossil&lt;/code&gt; , &lt;code&gt;git&lt;/code&gt; , &lt;code&gt;svn&lt;/code&gt; 또는 &lt;code&gt;hg&lt;/code&gt; 를 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5c420979637a5530647ac1a7b4bf05aaac4a2eb2" translate="yes" xml:space="preserve">
          <source>The alias must be a comparable dev version, and the &lt;code&gt;branch-alias&lt;/code&gt; must be present on the branch that it references. For &lt;code&gt;dev-master&lt;/code&gt;, you need to commit it on the &lt;code&gt;master&lt;/code&gt; branch.</source>
          <target state="translated">별명은 비슷한 dev 버전 이어야하며, &lt;code&gt;branch-alias&lt;/code&gt; 은 참조하는 지점에 있어야합니다. 들어 &lt;code&gt;dev-master&lt;/code&gt; , 당신은 그것을 커밋 할 필요가 &lt;code&gt;master&lt;/code&gt; 지점입니다.</target>
        </trans-unit>
        <trans-unit id="c2cac23aeb2cc9f6f9a5c06f625e856aa7411284" translate="yes" xml:space="preserve">
          <source>The authors of the package. This is an array of objects.</source>
          <target state="translated">패키지 작성자. 이것은 객체의 배열입니다.</target>
        </trans-unit>
        <trans-unit id="7eb0326398d1c95d61a67bf85374074040d3aaf6" translate="yes" xml:space="preserve">
          <source>The autoloader can have quite a substantial impact on your request time (50-100ms per request in large frameworks using a lot of classes). See the &lt;a href=&quot;articles/autoloader-optimization.md&quot;&gt;article about optimizing the autoloader&lt;/a&gt; for more details on how to reduce this impact.</source>
          <target state="translated">오토로더는 요청 시간 (많은 클래스를 사용하는 대규모 프레임 워크에서 요청 당 50-100ms)에 상당한 영향을 줄 수 있습니다. 이 영향을 줄이는 방법에 대한 자세한 내용 &lt;a href=&quot;articles/autoloader-optimization.md&quot;&gt;은 오토로더 최적화에 관한 기사를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="6edc136191c54700a29b49ad70fd35ef21540920" translate="yes" xml:space="preserve">
          <source>The check-platform-reqs command checks that your PHP and extensions versions match the platform requirements of the installed packages. This can be used to verify that a production server has all the extensions needed to run a project after installing it for example.</source>
          <target state="translated">check-platform-reqs 명령은 PHP 및 확장 버전이 설치된 패키지의 플랫폼 요구 사항과 일치하는지 확인합니다. 예를 들어, 프로덕션 서버에 프로젝트를 설치 한 후 프로젝트를 실행하는 데 필요한 모든 확장이 있는지 확인하는 데 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="7214bc8cd5c44f89fec9925261db070ce7d274d6" translate="yes" xml:space="preserve">
          <source>The class defining the Composer plugin must implement the &lt;a href=&quot;https://github.com/composer/composer/blob/master/src/Composer/Plugin/PluginInterface.php&quot;&gt;&lt;code&gt;Composer\Plugin\PluginInterface&lt;/code&gt;&lt;/a&gt;. It can then register the Custom Installer in its &lt;code&gt;activate()&lt;/code&gt; method.</source>
          <target state="translated">Composer 플러그인을 정의하는 클래스는 &lt;a href=&quot;https://github.com/composer/composer/blob/master/src/Composer/Plugin/PluginInterface.php&quot;&gt; &lt;code&gt;Composer\Plugin\PluginInterface&lt;/code&gt; &lt;/a&gt; 구현해야합니다 . 그런 다음 &lt;code&gt;activate()&lt;/code&gt; 메소드 에서 사용자 정의 설치 프로그램을 등록 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="78950139234e498468b2a4ae5ec9d8e2bc496990" translate="yes" xml:space="preserve">
          <source>The class may be placed in any location and have any name, as long as it is autoloadable and matches the &lt;code&gt;extra.class&lt;/code&gt; element in the package definition.</source>
          <target state="translated">클래스는 자동로드 가능하고 패키지 정의 의 &lt;code&gt;extra.class&lt;/code&gt; 요소 와 일치하는 한 어떤 위치 에나 이름을 가질 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="56dd19048623d8951439a67803c703f7d2bdaa57" translate="yes" xml:space="preserve">
          <source>The class that executes the custom installation should implement the &lt;a href=&quot;https://github.com/composer/composer/blob/master/src/Composer/Installer/InstallerInterface.php&quot;&gt;&lt;code&gt;Composer\Installer\InstallerInterface&lt;/code&gt;&lt;/a&gt; (or extend another installer that implements that interface). It defines the &lt;a href=&quot;../04-schema.md#type&quot;&gt;type&lt;/a&gt; string as it will be recognized by packages that will use this installer in the &lt;code&gt;supports()&lt;/code&gt; method.</source>
          <target state="translated">사용자 정의 설치를 실행하는 클래스는 &lt;a href=&quot;https://github.com/composer/composer/blob/master/src/Composer/Installer/InstallerInterface.php&quot;&gt; &lt;code&gt;Composer\Installer\InstallerInterface&lt;/code&gt; &lt;/a&gt; 를 구현하거나 해당 인터페이스를 구현하는 다른 설치 프로그램을 확장해야합니다. &lt;code&gt;supports()&lt;/code&gt; 메소드 에서이 설치 프로그램을 사용하는 패키지가 인식 할 &lt;a href=&quot;../04-schema.md#type&quot;&gt;유형&lt;/a&gt; 문자열을 정의합니다 .</target>
        </trans-unit>
        <trans-unit id="8131e8038e7a59be229bcd80fa0d944009da9be3" translate="yes" xml:space="preserve">
          <source>The classmap generator will ignore all files in the paths configured here. The paths are absolute from the package root directory (i.e. composer.json location), and support &lt;code&gt;*&lt;/code&gt; to match anything but a slash, and &lt;code&gt;**&lt;/code&gt; to match anything. &lt;code&gt;**&lt;/code&gt; is implicitly added to the end of the paths.</source>
          <target state="translated">클래스 맵 생성기는 여기에 구성된 경로의 모든 파일을 무시합니다. 경로는 패키지 루트 디렉토리 (예 : composer.json 위치)에서 절대적이며 슬래시 이외의 항목과 일치하려면 &lt;code&gt;*&lt;/code&gt; 를 지원 하고, 무엇이든 일치하려면 &lt;code&gt;**&lt;/code&gt; 를 지원하십시오. &lt;code&gt;**&lt;/code&gt; 는 경로 끝에 암시 적으로 추가됩니다.</target>
        </trans-unit>
        <trans-unit id="c8aa46cca88981162bd728fbbc3eec19ff704de5" translate="yes" xml:space="preserve">
          <source>The color coding is as such:</source>
          <target state="translated">컬러 코딩은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="3406243459548a65cba91c96d7498aeca9791af0" translate="yes" xml:space="preserve">
          <source>The composer.json Schema</source>
          <target state="translated">composer.json 스키마</target>
        </trans-unit>
        <trans-unit id="f7d96ecd6ebde5fd4e1ab5d82811712e5da91ffa" translate="yes" xml:space="preserve">
          <source>The current composer plugin API version is 1.1.0.</source>
          <target state="translated">현재 작성기 플러그인 API 버전은 1.1.0입니다.</target>
        </trans-unit>
        <trans-unit id="7e11cbbb09c0ca65a8dd4a02c0c684bedae13af1" translate="yes" xml:space="preserve">
          <source>The default file Satis looks for is &lt;code&gt;satis.json&lt;/code&gt; in the root of the repository.</source>
          <target state="translated">Satis가 찾는 기본 파일 은 저장소의 루트에있는 &lt;code&gt;satis.json&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="abc92330ba7d4489dae7ca56a23c07eaff4520aa" translate="yes" xml:space="preserve">
          <source>The dots indicate array nesting, a max depth of 3 levels is allowed though. The above would set &lt;code&gt;&quot;extra&quot;: { &quot;foo&quot;: { &quot;bar&quot;: &quot;value&quot; } }&lt;/code&gt;.</source>
          <target state="translated">점은 배열 중첩을 나타내며 최대 수준은 3 수준입니다. 위에서 &lt;code&gt;&quot;extra&quot;: { &quot;foo&quot;: { &quot;bar&quot;: &quot;value&quot; } }&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="74881a8aac37fc93dea5343409e2d729aa3c5f0c" translate="yes" xml:space="preserve">
          <source>The env var accepts domains, IP addresses, and IP address blocks in CIDR notation. You can restrict the filter to a particular port (e.g. &lt;code&gt;:80&lt;/code&gt;). You can also set it to &lt;code&gt;*&lt;/code&gt; to ignore the proxy for all HTTP requests.</source>
          <target state="translated">env var는 CIDR 표기법으로 도메인, IP 주소 및 IP 주소 블록을 허용합니다. 필터를 특정 포트로 제한 할 수 있습니다 (예 &lt;code&gt;:80&lt;/code&gt; ). 모든 HTTP 요청에 대한 프록시를 무시 하도록 &lt;code&gt;*&lt;/code&gt; 로 설정할 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="56026558ef4f20a6fe91ce4862f665827754603a" translate="yes" xml:space="preserve">
          <source>The example above has Composer itself in its require-dev, which allows you to use the Composer classes in your test suite for example.</source>
          <target state="translated">위의 예제에는 require-dev에 Composer 자체가 있으므로 테스트 스위트에서 Composer 클래스를 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e055753e0d7efaac55d01e0c0c7e3200bf65f47f" translate="yes" xml:space="preserve">
          <source>The example demonstrates that it is quite simple to extend the &lt;a href=&quot;https://github.com/composer/composer/blob/master/src/Composer/Installer/LibraryInstaller.php&quot;&gt;&lt;code&gt;Composer\Installer\LibraryInstaller&lt;/code&gt;&lt;/a&gt; class to strip a prefix (&lt;code&gt;phpdocumentor/template-&lt;/code&gt;) and use the remaining part to assemble a completely different installation path.</source>
          <target state="translated">이 예제는 &lt;a href=&quot;https://github.com/composer/composer/blob/master/src/Composer/Installer/LibraryInstaller.php&quot;&gt; &lt;code&gt;Composer\Installer\LibraryInstaller&lt;/code&gt; &lt;/a&gt; 클래스 를 확장하여 접두사 ( &lt;code&gt;phpdocumentor/template-&lt;/code&gt; ) 를 제거 하고 나머지 부분을 사용하여 완전히 다른 설치 경로를 조립하는 것이 매우 간단하다는 것을 보여줍니다 .</target>
        </trans-unit>
        <trans-unit id="81ae7fa842663d4675156a0236029004afaad470" translate="yes" xml:space="preserve">
          <source>The example will include &lt;code&gt;/dir/foo/bar/file&lt;/code&gt;, &lt;code&gt;/foo/bar/baz&lt;/code&gt;, &lt;code&gt;/file.php&lt;/code&gt;, &lt;code&gt;/foo/my.test&lt;/code&gt; but it will exclude &lt;code&gt;/foo/bar/any&lt;/code&gt;, &lt;code&gt;/foo/baz&lt;/code&gt;, and &lt;code&gt;/my.test&lt;/code&gt;.</source>
          <target state="translated">예제에는 &lt;code&gt;/dir/foo/bar/file&lt;/code&gt; , &lt;code&gt;/foo/bar/baz&lt;/code&gt; , &lt;code&gt;/file.php&lt;/code&gt; , &lt;code&gt;/foo/my.test&lt;/code&gt; 가 포함 되지만 &lt;code&gt;/foo/bar/any&lt;/code&gt; , &lt;code&gt;/foo/baz&lt;/code&gt; 및 &lt;code&gt;/my.test&lt;/code&gt; 는 제외됩니다 .test .</target>
        </trans-unit>
        <trans-unit id="1a0f3bc9bad979ddd627af3051a98ef3a26f4b7d" translate="yes" xml:space="preserve">
          <source>The file above declares that acme/foo and acme/bar can be found in this repository, by loading the file referenced by &lt;code&gt;providers-url&lt;/code&gt;, replacing &lt;code&gt;%package%&lt;/code&gt; by the vendor namespaced package name and &lt;code&gt;%hash%&lt;/code&gt; by the sha256 field. Those files themselves contain package definitions as described &lt;a href=&quot;#packages&quot;&gt;above&lt;/a&gt;.</source>
          <target state="translated">위의 파일은 &lt;code&gt;providers-url&lt;/code&gt; 에서 참조하는 파일을로드하고 &lt;code&gt;%package%&lt;/code&gt; 를 공급 업체 네임 스페이스 패키지 이름으로 대체 하고 sha256 필드로 &lt;code&gt;%hash%&lt;/code&gt; 를 대체하여 acme / foo 및 acme / bar를이 저장소에서 찾을 수 있음을 선언 합니다. 이러한 파일 자체에는 &lt;a href=&quot;#packages&quot;&gt;위에서&lt;/a&gt; 설명한 패키지 정의가 포함됩니다 .</target>
        </trans-unit>
        <trans-unit id="6d04c87c83c5973964832e301e5817c17e04115c" translate="yes" xml:space="preserve">
          <source>The file should contain a set of hostnames followed each with their own username/password pairs, for example:</source>
          <target state="translated">파일에는 호스트 이름 세트와 그 뒤에 고유 한 사용자 이름 / 암호 쌍이 있어야합니다.</target>
        </trans-unit>
        <trans-unit id="091badbd3ca13442d4996bee76cff03f2295613e" translate="yes" xml:space="preserve">
          <source>The first (and often only) thing you specify in &lt;code&gt;composer.json&lt;/code&gt; is the &lt;a href=&quot;04-schema.md#require&quot;&gt;&lt;code&gt;require&lt;/code&gt;&lt;/a&gt; key. You are simply telling Composer which packages your project depends on.</source>
          <target state="translated">당신이 지정하는 첫 번째 (그리고 종종) 일 &lt;code&gt;composer.json&lt;/code&gt; 이 (가)입니다 &lt;a href=&quot;04-schema.md#require&quot;&gt; &lt;code&gt;require&lt;/code&gt; &lt;/a&gt; 키를. 프로젝트에 의존하는 패키지를 Composer에 알려 주기만하면됩니다.</target>
        </trans-unit>
        <trans-unit id="4068eb0da4bab0dfa6227d4ca7a2283c9ce6189b" translate="yes" xml:space="preserve">
          <source>The following options are available with every command:</source>
          <target state="translated">모든 명령에 다음 옵션을 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3ab6a9f1a0bbaef19cacfbc5c31136467bf2e22d" translate="yes" xml:space="preserve">
          <source>The following options are supported:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="688e77612c7849c6eb5d4e0fbd7cfa158fa310b2" translate="yes" xml:space="preserve">
          <source>The following repository types are supported:</source>
          <target state="translated">다음 저장소 유형이 지원됩니다.</target>
        </trans-unit>
        <trans-unit id="38c69aebc2faf396ee7792986c5789b23a388455" translate="yes" xml:space="preserve">
          <source>The format is like package links above, except that the values are free text and not version constraints.</source>
          <target state="translated">형식은 값이 자유 텍스트이며 버전 제약 조건이 아니라는 점을 제외하면 위의 패키지 링크와 같습니다.</target>
        </trans-unit>
        <trans-unit id="576aa3666a88d5083d4ea7e2b38f285df4a4c92c" translate="yes" xml:space="preserve">
          <source>The generated lock file will use the same name: &lt;code&gt;composer-other.lock&lt;/code&gt; in this example.</source>
          <target state="translated">생성 된 잠금 파일은 이 예에서 &lt;code&gt;composer-other.lock&lt;/code&gt; 과 같은 이름을 사용합니다 .</target>
        </trans-unit>
        <trans-unit id="fe31ec4a7957f674f8ecc0410e91ef85456dc028" translate="yes" xml:space="preserve">
          <source>The global command allows you to run other commands like &lt;code&gt;install&lt;/code&gt;, &lt;code&gt;remove&lt;/code&gt;, &lt;code&gt;require&lt;/code&gt; or &lt;code&gt;update&lt;/code&gt; as if you were running them from the &lt;a href=&quot;#composer-home&quot;&gt;COMPOSER_HOME&lt;/a&gt; directory.</source>
          <target state="translated">글로벌 명령을 사용하면 마치 &lt;a href=&quot;#composer-home&quot;&gt;COMPOSER_HOME&lt;/a&gt; 디렉토리 에서 마치 마치 마치 &lt;code&gt;install&lt;/code&gt; , &lt;code&gt;remove&lt;/code&gt; , &lt;code&gt;require&lt;/code&gt; 또는 &lt;code&gt;update&lt;/code&gt; 같은 다른 명령을 실행할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="09296591caac805b00e1c7c545308983c42db440" translate="yes" xml:space="preserve">
          <source>The installer will check a few PHP settings and then download &lt;code&gt;composer.phar&lt;/code&gt; to your working directory. This file is the Composer binary. It is a PHAR (PHP archive), which is an archive format for PHP which can be run on the command line, amongst other things.</source>
          <target state="translated">설치 프로그램은 몇 가지 PHP 설정을 확인한 다음 &lt;code&gt;composer.phar&lt;/code&gt; 를 작업 디렉토리에 다운로드 합니다. 이 파일은 Composer 바이너리입니다. PHAR (PHP 아카이브)이며, 다른 것들 중에서도 명령 행에서 실행할 수있는 PHP의 아카이브 형식입니다.</target>
        </trans-unit>
        <trans-unit id="6ab73b5d5179ad996c84e68defcb2f4641ccefde" translate="yes" xml:space="preserve">
          <source>The license of the package. This can be either a string or an array of strings.</source>
          <target state="translated">패키지의 라이센스. 문자열이거나 문자열 배열 일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="9b254b0f71f0fb069aac1d74943b185fdca724e6" translate="yes" xml:space="preserve">
          <source>The local package will be symlinked if possible, in which case the output in the console will read &lt;code&gt;Symlinking from ../../packages/my-package&lt;/code&gt;. If symlinking is &lt;em&gt;not&lt;/em&gt; possible the package will be copied. In that case, the console will output &lt;code&gt;Mirrored from ../../packages/my-package&lt;/code&gt;.</source>
          <target state="translated">로컬 패키지는 가능한 경우 &lt;code&gt;Symlinking from ../../packages/my-package&lt;/code&gt; 콘솔의 출력은 ../../packages/my-package의 심볼릭 링크를 읽습니다 . 심볼릭 링크 인 경우 &lt;em&gt;하지&lt;/em&gt; 가능 패키지가 복사됩니다. 이 경우 콘솔은 &lt;code&gt;Mirrored from ../../packages/my-package&lt;/code&gt; 출력 합니다.</target>
        </trans-unit>
        <trans-unit id="36c3a0eac5c63bf1776205e5e15f95251c900625" translate="yes" xml:space="preserve">
          <source>The main advantage of the auth.json file is that it can be gitignored so that every developer in your team can place their own credentials in there, which makes revocation of credentials much easier than if you all share the same.</source>
          <target state="translated">auth.json 파일의 주요 장점은 팀의 모든 개발자가 자신의 자격 증명을 거기에 배치 할 수있어 모두 공유 할 때보 다 자격 증명을 쉽게 취소 할 수 있다는 점입니다.</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
