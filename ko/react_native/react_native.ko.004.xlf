<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="react_native">
    <body>
      <group id="react_native">
        <trans-unit id="2d1e76cda793e289a92d82fd8c936a1934145df4" translate="yes" xml:space="preserve">
          <source>Rendered at the very beginning of the list. Can be a React Component Class, a render function, or a rendered element.</source>
          <target state="translated">목록의 맨 처음에 렌더링됩니다. 반응 컴포넌트 클래스, 렌더링 함수 또는 렌더링 된 요소 일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="da10f865f169113e8152326af6c9b4289eee6d2d" translate="yes" xml:space="preserve">
          <source>Rendered at the very end of the list. Can be a React Component Class, a render function, or a rendered element.</source>
          <target state="translated">리스트의 맨 끝에서 렌더링됩니다. 반응 컴포넌트 클래스, 렌더링 함수 또는 렌더링 된 요소 일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c59bc8a2f8b9404264b6ce2fcab1d38699a841e2" translate="yes" xml:space="preserve">
          <source>Rendered in between each item, but not at the top or bottom. By default, &lt;code&gt;highlighted&lt;/code&gt; and &lt;code&gt;leadingItem&lt;/code&gt; props are provided. &lt;code&gt;renderItem&lt;/code&gt; provides &lt;code&gt;separators.highlight&lt;/code&gt;/&lt;code&gt;unhighlight&lt;/code&gt; which will update the &lt;code&gt;highlighted&lt;/code&gt; prop, but you can also add custom props with &lt;code&gt;separators.updateProps&lt;/code&gt;.</source>
          <target state="translated">각 항목 사이에 렌더링되지만 맨 위나 맨 아래는 아닙니다. 기본적으로 &lt;code&gt;highlighted&lt;/code&gt; 및 &lt;code&gt;leadingItem&lt;/code&gt; 소품이 제공됩니다. &lt;code&gt;renderItem&lt;/code&gt; 가 제공 &lt;code&gt;separators.highlight&lt;/code&gt; / &lt;code&gt;unhighlight&lt;/code&gt; 업데이트되는 &lt;code&gt;highlighted&lt;/code&gt; 소품,하지만 당신은 또한 함께 사용자 정의 소품을 추가 할 수 있습니다 &lt;code&gt;separators.updateProps&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="fd1d34d9360775311f3111960ed2ab7cd3b35d82" translate="yes" xml:space="preserve">
          <source>Rendered in between each item, but not at the top or bottom. By default, &lt;code&gt;highlighted&lt;/code&gt;, &lt;code&gt;section&lt;/code&gt;, and &lt;code&gt;[leading/trailing][Item/Separator]&lt;/code&gt; props are provided. &lt;code&gt;renderItem&lt;/code&gt; provides &lt;code&gt;separators.highlight&lt;/code&gt;/&lt;code&gt;unhighlight&lt;/code&gt; which will update the &lt;code&gt;highlighted&lt;/code&gt; prop, but you can also add custom props with &lt;code&gt;separators.updateProps&lt;/code&gt;.</source>
          <target state="translated">각 항목 사이에 렌더링되지만 맨 위나 맨 아래는 아닙니다. 기본적으로 &lt;code&gt;highlighted&lt;/code&gt; , &lt;code&gt;section&lt;/code&gt; 및 &lt;code&gt;[leading/trailing][Item/Separator]&lt;/code&gt; 소품이 제공됩니다. &lt;code&gt;renderItem&lt;/code&gt; 가 제공 &lt;code&gt;separators.highlight&lt;/code&gt; / &lt;code&gt;unhighlight&lt;/code&gt; 업데이트되는 &lt;code&gt;highlighted&lt;/code&gt; 소품,하지만 당신은 또한 함께 사용자 정의 소품을 추가 할 수 있습니다 &lt;code&gt;separators.updateProps&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="c5595788685a3d13ce82d849180c4df961a5b13c" translate="yes" xml:space="preserve">
          <source>Rendered when the list is empty. Can be a React Component Class, a render function, or a rendered element.</source>
          <target state="translated">목록이 비어있을 때 렌더링됩니다. 반응 컴포넌트 클래스, 렌더링 함수 또는 렌더링 된 요소 일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="07c08afc2b4a0176225e6da6d0d58c177dce4dea" translate="yes" xml:space="preserve">
          <source>Rendering offscreen to preserve correct alpha behavior is extremely expensive and hard to debug for non-native developers, which is why it is not turned on by default. If you do need to enable this property for an animation, consider combining it with renderToHardwareTextureAndroid if the view &lt;strong&gt;contents&lt;/strong&gt; are static (i.e. it doesn't need to be redrawn each frame). If that property is enabled, this View will be rendered off-screen once, saved in a hardware texture, and then composited onto the screen with an alpha each frame without having to switch rendering targets on the GPU.</source>
          <target state="translated">올바른 알파 동작을 유지하기 위해 오프 스크린으로 렌더링하는 것은 비용이 많이 들고 네이티브가 아닌 개발자에게는 디버깅하기 어렵 기 때문에 기본적으로 켜져 있지 않습니다. 애니메이션에이 속성을 활성화해야하는 경우 뷰 &lt;strong&gt;내용&lt;/strong&gt; 이 정적 인 경우 (즉, 각 프레임을 다시 그릴 필요가없는 경우) renderToHardwareTextureAndroid와 결합하는 것이 좋습니다 . 해당 속성이 활성화 된 경우이 뷰는 화면 외부에서 한 번 렌더링되고 하드웨어 텍스처에 저장된 다음 GPU에서 렌더링 대상을 전환하지 않고도 각 프레임에 알파를 사용하여 화면에 합성됩니다.</target>
        </trans-unit>
        <trans-unit id="909233026a92bb68e624b6146a3d358f4ae9afd0" translate="yes" xml:space="preserve">
          <source>Renders a &lt;code&gt;DrawerLayout&lt;/code&gt; on Android.</source>
          <target state="translated">Android 에서 &lt;code&gt;DrawerLayout&lt;/code&gt; 을 렌더링합니다 .</target>
        </trans-unit>
        <trans-unit id="bfb73ef6aab7d420b2b38af311ddc2352edf7bcb" translate="yes" xml:space="preserve">
          <source>Renders a &lt;code&gt;ProgressBar&lt;/code&gt; on Android.</source>
          <target state="translated">Android 에서 &lt;code&gt;ProgressBar&lt;/code&gt; 를 렌더링합니다 .</target>
        </trans-unit>
        <trans-unit id="8c55a629acbb3511069b99fee79e91ff0b528b6a" translate="yes" xml:space="preserve">
          <source>Renders a &lt;code&gt;Toolbar&lt;/code&gt; on Android.</source>
          <target state="translated">Android 에서 &lt;code&gt;Toolbar&lt;/code&gt; 를 렌더링합니다 .</target>
        </trans-unit>
        <trans-unit id="f4dd91feda88132b98d23362146455739b69a75a" translate="yes" xml:space="preserve">
          <source>Renders a &lt;code&gt;UIProgressView&lt;/code&gt; on iOS.</source>
          <target state="translated">iOS 에서 &lt;code&gt;UIProgressView&lt;/code&gt; 를 렌더링합니다 .</target>
        </trans-unit>
        <trans-unit id="f164262af0d2bb9fdf59f83119c268c454d23df4" translate="yes" xml:space="preserve">
          <source>Renders a &lt;code&gt;UISegmentedControl&lt;/code&gt; on iOS.</source>
          <target state="translated">iOS 에서 &lt;code&gt;UISegmentedControl&lt;/code&gt; 을 렌더링합니다 .</target>
        </trans-unit>
        <trans-unit id="ab496212c570ddc4ef8bd26317c6cf9eeb8c94a4" translate="yes" xml:space="preserve">
          <source>Renders a &lt;code&gt;UITabViewController&lt;/code&gt; on iOS. Use with &lt;a href=&quot;tabbarios-item&quot;&gt;TabBarIOS.Item&lt;/a&gt;.</source>
          <target state="translated">iOS 에서 &lt;code&gt;UITabViewController&lt;/code&gt; 를 렌더링합니다 . &lt;a href=&quot;tabbarios-item&quot;&gt;TabBarIOS.Item&lt;/a&gt; 과 함께 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="85a71c956a0fc6fe8a9a3fc7ddcd46f082acc710" translate="yes" xml:space="preserve">
          <source>Renders a boolean input.</source>
          <target state="translated">부울 입력을 렌더링합니다.</target>
        </trans-unit>
        <trans-unit id="bae422b4f0982cbfbee7c84affeaff9665412ff1" translate="yes" xml:space="preserve">
          <source>Renders a date/time picker (selector) on iOS.</source>
          <target state="translated">iOS에서 날짜 / 시간 선택기 (선택기)를 렌더링합니다.</target>
        </trans-unit>
        <trans-unit id="c6932e5a74d3d1cb31839205cafaa5a315ec3734" translate="yes" xml:space="preserve">
          <source>Renders a image picker on iOS.</source>
          <target state="translated">iOS에서 이미지 선택기를 렌더링합니다.</target>
        </trans-unit>
        <trans-unit id="8de4d09daadd2cae67cf40e739676f713815bcbb" translate="yes" xml:space="preserve">
          <source>Renders the child view with a mask specified in the &lt;code&gt;maskElement&lt;/code&gt; prop.</source>
          <target state="translated">&lt;code&gt;maskElement&lt;/code&gt; 소품에 지정된 마스크로 자식 뷰를 렌더링합니다 .</target>
        </trans-unit>
        <trans-unit id="a3e68f8004a894b7fb46ae10f25d304d3f9f4836" translate="yes" xml:space="preserve">
          <source>Renders the native picker component on iOS and Android.</source>
          <target state="translated">iOS 및 Android에서 기본 선택기 구성 요소를 렌더링합니다.</target>
        </trans-unit>
        <trans-unit id="8d9d3cc5acb004062230116fec28ad696e269bbe" translate="yes" xml:space="preserve">
          <source>Renders the native picker component on iOS and Android. Example:</source>
          <target state="translated">iOS 및 Android에서 기본 선택기 구성 요소를 렌더링합니다. 예:</target>
        </trans-unit>
        <trans-unit id="c81fe06c2954aa17cf310658a0cca1955ae55ebe" translate="yes" xml:space="preserve">
          <source>Repeat this step for the Tests target in your project.</source>
          <target state="translated">프로젝트의 테스트 대상에 대해이 단계를 반복하십시오.</target>
        </trans-unit>
        <trans-unit id="3fe5754c6bdce3b9ed8c1c82bc4547e29ff73c81" translate="yes" xml:space="preserve">
          <source>Repeat vibration pattern until cancel(), default to false.</source>
          <target state="translated">cancel ()이 될 때까지 진동 패턴을 반복합니다. 기본값은 false입니다.</target>
        </trans-unit>
        <trans-unit id="074a8643e268726c1af2a22d0c3a70e0de7298d0" translate="yes" xml:space="preserve">
          <source>Repeatable vibration is also supported, the vibration will repeat with defined pattern until &lt;code&gt;cancel()&lt;/code&gt; is called.</source>
          <target state="translated">반복 진동도 지원되며 &lt;code&gt;cancel()&lt;/code&gt; 이 호출 될 때까지 정의 된 패턴으로 진동이 반복됩니다 .</target>
        </trans-unit>
        <trans-unit id="76dd8534035c7d132e36fffae002a8dfe65c628a" translate="yes" xml:space="preserve">
          <source>Replace a route in the navigation stack.</source>
          <target state="translated">탐색 스택에서 경로를 교체하십시오.</target>
        </trans-unit>
        <trans-unit id="de54bcdd3ea95b86da630fecfe6e1672185d1cc8" translate="yes" xml:space="preserve">
          <source>Replace the route for the current scene and immediately load the view for the new route.</source>
          <target state="translated">현재 장면의 경로를 바꾸고 즉시 새 경로의 뷰를로드하십시오.</target>
        </trans-unit>
        <trans-unit id="f8aa1086a5727c2918f300774947f4cc6655ad01" translate="yes" xml:space="preserve">
          <source>Replace the route/view for the previous scene.</source>
          <target state="translated">이전 장면의 경로 /보기를 교체하십시오.</target>
        </trans-unit>
        <trans-unit id="5ea8a5bc04a70db7742ff5d3a1f757d08fc39c4c" translate="yes" xml:space="preserve">
          <source>Replaces the previous route/view and transitions back to it.</source>
          <target state="translated">이전 라우트 / 뷰를 대체하고 다시 라우트합니다.</target>
        </trans-unit>
        <trans-unit id="095c1a9c46cba32abe0c2068fb5f0a270545c502" translate="yes" xml:space="preserve">
          <source>Replaces the top item and pop to it.</source>
          <target state="translated">상단 항목을 교체하고 팝업합니다.</target>
        </trans-unit>
        <trans-unit id="4f1c7325609c0579d5a2d516e43bd306bc11d73f" translate="yes" xml:space="preserve">
          <source>Reporting new issues</source>
          <target state="translated">새로운 문제보고</target>
        </trans-unit>
        <trans-unit id="393c29013a274d8c67c0ec4b9cfc3594c0ce1e54" translate="yes" xml:space="preserve">
          <source>Request suitable Location permission based on the key configured on pList. If NSLocationAlwaysUsageDescription is set, it will request Always authorization, although if NSLocationWhenInUseUsageDescription is set, it will request InUse authorization.</source>
          <target state="translated">pList에 구성된 키를 기반으로 적절한 위치 권한을 요청하십시오. NSLocationAlwaysUsageDescription이 설정된 경우 항상 권한 부여를 요청하지만 NSLocationWhenInUseUsageDescription이 설정된 경우 InUse 권한 부여를 요청합니다.</target>
        </trans-unit>
        <trans-unit id="c686e0781457559d143ddbbb56506da966f0559b" translate="yes" xml:space="preserve">
          <source>Requests focus for the given input or view. The exact behavior triggered will depend on the platform and type of view.</source>
          <target state="translated">주어진 입력 또는보기에 대한 초점을 요청합니다. 트리거되는 정확한 동작은 플랫폼 및보기 유형에 따라 다릅니다.</target>
        </trans-unit>
        <trans-unit id="d5b633162188bab8acd3e88edc1ad876d94d1fb0" translate="yes" xml:space="preserve">
          <source>Requests notification permissions from iOS, prompting the user's dialog box. By default, it will request all notification permissions, but a subset of these can be requested by passing a map of requested permissions. The following permissions are supported:</source>
          <target state="translated">iOS의 알림 권한을 요청하여 사용자의 대화 상자를 표시합니다. 기본적으로 모든 알림 권한을 요청하지만 요청 된 권한 맵을 전달하여 서브 세트를 요청할 수 있습니다. 다음과 같은 권한이 지원됩니다.</target>
        </trans-unit>
        <trans-unit id="eed6bfb41051ed5b74447340f3c2e29d11e99a7c" translate="yes" xml:space="preserve">
          <source>Required</source>
          <target state="translated">Required</target>
        </trans-unit>
        <trans-unit id="5ca474a725101528c709fe68b81037d33482f4ea" translate="yes" xml:space="preserve">
          <source>Required props:</source>
          <target state="translated">필요한 소품 :</target>
        </trans-unit>
        <trans-unit id="e7aa2256e003beb5f51ee251c3af6a4184bf3369" translate="yes" xml:space="preserve">
          <source>Requires linear scan through data - use &lt;code&gt;scrollToIndex&lt;/code&gt; instead if possible.</source>
          <target state="translated">데이터를 통한 선형 스캔이 필요 합니다. 가능하면 &lt;code&gt;scrollToIndex&lt;/code&gt; 를 대신 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="a6745831a8e19569e4ad834641dfc1dd7ebbed27" translate="yes" xml:space="preserve">
          <source>Reserved Words: &lt;code&gt;promise.catch(function() { });&lt;/code&gt;</source>
          <target state="translated">예약어 : &lt;code&gt;promise.catch(function() { });&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="1ad40efdd7b7c06547eecda5e57359ff2ae3be37" translate="yes" xml:space="preserve">
          <source>Resolves an asset reference into an object which has the properties &lt;code&gt;uri&lt;/code&gt;, &lt;code&gt;width&lt;/code&gt;, and &lt;code&gt;height&lt;/code&gt;.</source>
          <target state="translated">자산 참조를 &lt;code&gt;uri&lt;/code&gt; , &lt;code&gt;width&lt;/code&gt; 및 &lt;code&gt;height&lt;/code&gt; 속성이있는 객체로 확인합니다 .</target>
        </trans-unit>
        <trans-unit id="7fc62e5833ad279225ae02d68855cc111213ed9b" translate="yes" xml:space="preserve">
          <source>Resolving JavaScript issues</source>
          <target state="translated">자바 스크립트 문제 해결</target>
        </trans-unit>
        <trans-unit id="4080d7a2c68ba46beabadcf2bc1a045214a10147" translate="yes" xml:space="preserve">
          <source>Resolving native UI Issues</source>
          <target state="translated">기본 UI 문제 해결</target>
        </trans-unit>
        <trans-unit id="acf5d1eb02ebebf894aa1dc86bf7380cec563752" translate="yes" xml:space="preserve">
          <source>Responder Lifecycle</source>
          <target state="translated">응답자 라이프 사이클</target>
        </trans-unit>
        <trans-unit id="13aaec4b3eb6e962653914efb011e0e7cc030908" translate="yes" xml:space="preserve">
          <source>Responding to the current animation value</source>
          <target state="translated">현재 애니메이션 값에 응답</target>
        </trans-unit>
        <trans-unit id="8d4078df59774d2677104ccfe6e790e6941acc35" translate="yes" xml:space="preserve">
          <source>Restricts the range of possible date/time values.</source>
          <target state="translated">가능한 날짜 / 시간 값의 범위를 제한합니다.</target>
        </trans-unit>
        <trans-unit id="9e8bffd9063d4bae24ded787de73c3cf1cbcbd0e" translate="yes" xml:space="preserve">
          <source>Result strings for requesting permissions</source>
          <target state="translated">권한 요청을위한 결과 문자열</target>
        </trans-unit>
        <trans-unit id="064091338b36cb126977671d74b7285375b77cd6" translate="yes" xml:space="preserve">
          <source>Retrieve the width and height (in pixels) of an image prior to displaying it. This method can fail if the image cannot be found, or fails to download.</source>
          <target state="translated">이미지를 표시하기 전에 이미지의 너비와 높이를 픽셀 단위로 검색하십시오. 이미지를 찾을 수 없거나 다운로드하지 못하면이 방법이 실패 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="23c6c23a369d2acd0b466711f56561217361986a" translate="yes" xml:space="preserve">
          <source>Retrieves the base64-encoded data for an image in the ImageStore. If the specified URI does not match an image in the store, the failure callback will be called.</source>
          <target state="translated">ImageStore에서 이미지에 대한 base64로 인코딩 된 데이터를 검색합니다. 지정된 URI가 상점의 이미지와 일치하지 않으면 실패 콜백이 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="c949493c991d47b2138addce2c33197dfe87da5d" translate="yes" xml:space="preserve">
          <source>Returning to packager/config.js we should update it to use our newly generated modulePaths.js file.</source>
          <target state="translated">packager / config.js로 돌아가서 새로 생성 된 modulePaths.js 파일을 사용하도록 업데이트해야합니다.</target>
        </trans-unit>
        <trans-unit id="a83807e88498f5f4a57583a58f12eb074c3b30ed" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;true&lt;/code&gt; if the input is currently focused; &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="translated">입력이 현재 포커스 된 경우 &lt;code&gt;true&lt;/code&gt; 를 리턴 합니다 . 그렇지 않으면 &lt;code&gt;false&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="7194c9e824e27e807fd86ff8828e0b16bf2e2d61" translate="yes" xml:space="preserve">
          <source>Returns a Promise which when resolved will be of the following shape:</source>
          <target state="translated">해결할 때 다음과 같은 형태의 약속을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="0aa440c168b82ba5ee44c7c58a007e91b2171652" translate="yes" xml:space="preserve">
          <source>Returns a Promise which will be invoked an object containing &lt;code&gt;action&lt;/code&gt;, &lt;code&gt;hour&lt;/code&gt; (0-23), &lt;code&gt;minute&lt;/code&gt; (0-59) if the user picked a time. If the user dismissed the dialog, the Promise will still be resolved with action being &lt;code&gt;TimePickerAndroid.dismissedAction&lt;/code&gt; and all the other keys being undefined. &lt;strong&gt;Always&lt;/strong&gt; check whether the &lt;code&gt;action&lt;/code&gt; before reading the values.</source>
          <target state="translated">사용자가 시간을 선택한 경우 &lt;code&gt;action&lt;/code&gt; , &lt;code&gt;hour&lt;/code&gt; (0-23), &lt;code&gt;minute&lt;/code&gt; (0-59)이 포함 된 개체를 호출 할 약속을 반환합니다 . 사용자가 대화 상자를 닫아도 약속은 여전히 &lt;code&gt;TimePickerAndroid.dismissedAction&lt;/code&gt; 이고 다른 모든 키는 정의되지 않은 상태로 해결됩니다 . 값을 읽기 전에 &lt;strong&gt;항상 &lt;/strong&gt; &lt;code&gt;action&lt;/code&gt; 있는지 확인하십시오 .</target>
        </trans-unit>
        <trans-unit id="def8be44a160927caa4e70226238669abdb858dd" translate="yes" xml:space="preserve">
          <source>Returns a Promise which will be invoked an object containing &lt;code&gt;action&lt;/code&gt;, &lt;code&gt;year&lt;/code&gt;, &lt;code&gt;month&lt;/code&gt; (0-11), &lt;code&gt;day&lt;/code&gt; if the user picked a date. If the user dismissed the dialog, the Promise will still be resolved with action being &lt;code&gt;DatePickerAndroid.dismissedAction&lt;/code&gt; and all the other keys being undefined. &lt;strong&gt;Always&lt;/strong&gt; check whether the &lt;code&gt;action&lt;/code&gt; before reading the values.</source>
          <target state="translated">포함하는 객체 호출 될 약속 반환 &lt;code&gt;action&lt;/code&gt; , &lt;code&gt;year&lt;/code&gt; , &lt;code&gt;month&lt;/code&gt; (0-11), &lt;code&gt;day&lt;/code&gt; 사용자가 날짜를 고른 경우는. 사용자가 대화 상자를 닫은 경우에도 약속은 여전히 &lt;code&gt;DatePickerAndroid.dismissedAction&lt;/code&gt; 이고 다른 모든 키는 정의되지 않은 상태로 해결됩니다 . 값을 읽기 전에 &lt;strong&gt;항상 &lt;/strong&gt; &lt;code&gt;action&lt;/code&gt; 있는지 확인하십시오 .</target>
        </trans-unit>
        <trans-unit id="efe21209dd0fabd2258e9f6537ab1baba2eb485d" translate="yes" xml:space="preserve">
          <source>Returns a Promise which will resolve with the new URI.</source>
          <target state="translated">새 URI로 해결 될 약속을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="a0a93117f92639c0f3082895870a1cb5d3673566" translate="yes" xml:space="preserve">
          <source>Returns a Promise with photo identifier objects from the local camera roll of the device matching shape defined by &lt;code&gt;getPhotosReturnChecker&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;getPhotosReturnChecker&lt;/code&gt; 에 의해 정의 된 모양과 일치하는 장치의 로컬 카메라 롤에서 사진 식별자 개체가있는 Promise를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="58f66caea697b597b2ae7c74941b69262f092ff3" translate="yes" xml:space="preserve">
          <source>Returns a profiled version of the input function. For example, you can: JSON.parse = Systrace.measure('JSON', 'parse', JSON.parse);</source>
          <target state="translated">입력 함수의 프로파일 버전을 반환합니다. 예를 들어, JSON.parse = Systrace.measure ( 'JSON', 'parse', JSON.parse);</target>
        </trans-unit>
        <trans-unit id="fa30dfc19f447c835e39dff598fd337ff145920c" translate="yes" xml:space="preserve">
          <source>Returns a promise resolving to a boolean value as to whether the specified permissions has been granted.</source>
          <target state="translated">지정된 권한이 부여되었는지 여부에 대한 부울 값으로 해석되는 약속을 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="43f65dd790c41c16371bae2cd150421d5adfb4f3" translate="yes" xml:space="preserve">
          <source>Returns a promise that resolves to an object with &lt;code&gt;type&lt;/code&gt; and &lt;code&gt;effectiveType&lt;/code&gt; keys whose values are a &lt;a href=&quot;netinfo#connectiontype-enum&quot;&gt;&lt;code&gt;ConnectionType&lt;/code&gt;&lt;/a&gt; and an &lt;a href=&quot;netinfo#effectiveconnectiontype-enum&quot;&gt;&lt;code&gt;EffectiveConnectionType&lt;/code&gt;&lt;/a&gt;), respectively.</source>
          <target state="translated">값이 각각 &lt;a href=&quot;netinfo#connectiontype-enum&quot;&gt; &lt;code&gt;ConnectionType&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;netinfo#effectiveconnectiontype-enum&quot;&gt; &lt;code&gt;EffectiveConnectionType&lt;/code&gt; &lt;/a&gt; 인 &lt;code&gt;type&lt;/code&gt; 및 &lt;code&gt;effectiveType&lt;/code&gt; 키가 있는 객체로 해석되는 promise를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="00a862f6c9cf5a4840fd527267e740fa2a971f8b" translate="yes" xml:space="preserve">
          <source>Returns an array containing the number of rows in each section</source>
          <target state="translated">각 섹션의 행 수를 포함하는 배열을 반환합니다</target>
        </trans-unit>
        <trans-unit id="5da0c42641041162564a9cf58f87364ed4f79c68" translate="yes" xml:space="preserve">
          <source>Returns if the row is dirtied and needs to be rerendered</source>
          <target state="translated">행이 더러워 져 있고 다시 렌더링해야하는 경우 반환</target>
        </trans-unit>
        <trans-unit id="67ec4e888d6f62f40467b6b909bf01304cfbac00" translate="yes" xml:space="preserve">
          <source>Returns if the section header is dirtied and needs to be rerendered</source>
          <target state="translated">섹션 헤더가 더러워 져 있고 다시 렌더링해야하는 경우 반환</target>
        </trans-unit>
        <trans-unit id="24283fa42f093c1f4d3820f2867cde8beb74453c" translate="yes" xml:space="preserve">
          <source>Returns the device pixel density. Some examples:</source>
          <target state="translated">장치 픽셀 밀도를 반환합니다. 몇 가지 예 :</target>
        </trans-unit>
        <trans-unit id="9d60496cdb0dee984d9f8da81b86f8a4afe82141" translate="yes" xml:space="preserve">
          <source>Returns the scaling factor for font sizes. This is the ratio that is used to calculate the absolute font size, so any elements that heavily depend on that should use this to do calculations.</source>
          <target state="translated">글꼴 크기의 배율을 반환합니다. 이것은 절대 글꼴 크기를 계산하는 데 사용되는 비율이므로 이에 의존하는 모든 요소는이를 사용하여 계산해야합니다.</target>
        </trans-unit>
        <trans-unit id="64426e2557fbd84cbe8e8e76ac50d9a3ab090ff9" translate="yes" xml:space="preserve">
          <source>Returns the total number of rows in the data source (see &lt;code&gt;getRowCount&lt;/code&gt; for how this is calculated) plus the number of sections in the data.</source>
          <target state="translated">데이터 소스의 총 행 수 ( 이 계산 방법 은 &lt;code&gt;getRowCount&lt;/code&gt; 참조 )와 데이터의 섹션 수를 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="8ac6b4596f776ea4171315bd740590e0a508975d" translate="yes" xml:space="preserve">
          <source>Returns the total number of rows in the data source.</source>
          <target state="translated">데이터 소스의 총 행 수를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="cc01639c4e5ee299613e09a28d59d15f27094c60" translate="yes" xml:space="preserve">
          <source>Reverses the direction of scroll. Uses scale transforms of -1.</source>
          <target state="translated">스크롤 방향을 반대로 바꿉니다. -1의 스케일 변환을 사용합니다.</target>
        </trans-unit>
        <trans-unit id="b6d9d8e26fb88297760584a43d9868a96dc96a40" translate="yes" xml:space="preserve">
          <source>Reverses the direction of scroll. Uses scale transforms of &lt;code&gt;-1&lt;/code&gt;.</source>
          <target state="translated">스크롤 방향을 반대로 바꿉니다. 스케일 변환 &lt;code&gt;-1&lt;/code&gt; 을 사용합니다 .</target>
        </trans-unit>
        <trans-unit id="d354d64ddcaf511aa889fc6a79fd1cbcae7b96ac" translate="yes" xml:space="preserve">
          <source>Review it or cc someone who might be able to review. Finding the right person to review a pull request can sometimes be tricky. A pull request may simultaneously touch iOS, Java, and JavaScript code. If a pull request has been waiting for review for a while, you can help out by looking at the blame history for the files you're touching. Is there anyone that appears to be knowledgeable in the part of the codebase the PR is touching?</source>
          <target state="translated">검토하거나 검토 할 수있는 사람을 참조하십시오. 풀 요청을 검토 할 올바른 사람을 찾는 것은 때때로 까다로울 수 있습니다. 풀 요청은 iOS, Java 및 JavaScript 코드를 동시에 터치 할 수 있습니다. 풀 요청이 잠시 동안 검토를 대기 한 경우, 터치중인 파일의 책임 기록을 보면 도움이 될 수 있습니다. PR이 만지고있는 코드베이스 부분에서 지식이있는 사람이 있습니까?</target>
        </trans-unit>
        <trans-unit id="97ca94b53fe8d14bd42ba1fd78aa609881e9a462" translate="yes" xml:space="preserve">
          <source>Reviewing a PR can sometimes require more time from a maintainer than it took you to write the code. Maintainers need to consider all the ramifications of importing your patch into the codebase. Does it potentially introduce breaking changes? What are the performance considerations of adding a new dependency? Will the docs need to be updated as well? Does this belong in core, or would it be a better fit as a third party package?</source>
          <target state="translated">PR을 검토하려면 코드를 작성하는 데 걸리는 시간보다 유지 보수 담당자가 더 많은 시간을 요구할 수 있습니다. 관리자는 패치를 코드베이스로 가져 오는 데 따른 모든 영향을 고려해야합니다. 잠재적 인 변경 사항이 발생할 가능성이 있습니까? 새 종속성을 추가 할 때 고려해야 할 성능은 무엇입니까? 문서도 업데이트해야합니까? 이것이 핵심이거나 타사 패키지로 더 적합합니까?</target>
        </trans-unit>
        <trans-unit id="1870609e702caec4e6c65c9b1947bc8cbb64d450" translate="yes" xml:space="preserve">
          <source>Rounds a layout size (dp) to the nearest layout size that corresponds to an integer number of pixels. For example, on a device with a PixelRatio of 3, &lt;code&gt;PixelRatio.roundToNearestPixel(8.4) = 8.33&lt;/code&gt;, which corresponds to exactly (8.33 * 3) = 25 pixels.</source>
          <target state="translated">레이아웃 크기 (dp)를 정수 픽셀 수에 해당하는 가장 가까운 레이아웃 크기로 반올림합니다. 예를 들어 PixelRatio가 3 인 장치에서 &lt;code&gt;PixelRatio.roundToNearestPixel(8.4) = 8.33&lt;/code&gt; 은 정확히 (8.33 * 3) = 25 픽셀에 해당합니다.</target>
        </trans-unit>
        <trans-unit id="30ec61fcf11aac1803bf040f62510d6f1e102322" translate="yes" xml:space="preserve">
          <source>Run &lt;code&gt;react-native run-android&lt;/code&gt; inside your React Native project folder:</source>
          <target state="translated">실행 &lt;code&gt;react-native run-android&lt;/code&gt; 당신의 반작용 기본 프로젝트 폴더 내부 :</target>
        </trans-unit>
        <trans-unit id="b12f772d6b1d763da51af6ec67e6a0e28baa2ee5" translate="yes" xml:space="preserve">
          <source>Run &lt;code&gt;react-native run-android&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;react-native run-android&lt;/code&gt; 를 실행하십시오 .</target>
        </trans-unit>
        <trans-unit id="f2b5e559348996c0a0e04e4da74625bd033c05c6" translate="yes" xml:space="preserve">
          <source>Run &lt;code&gt;react-native run-ios&lt;/code&gt; inside your React Native project folder:</source>
          <target state="translated">실행 &lt;code&gt;react-native run-ios&lt;/code&gt; 당신의 반작용 기본 프로젝트 폴더 내부를 :</target>
        </trans-unit>
        <trans-unit id="1b0549e0199a814398f9e4c2c54c5a5d10c0d28a" translate="yes" xml:space="preserve">
          <source>Run the following command in a Command Prompt or shell:</source>
          <target state="translated">명령 프롬프트 또는 셸에서 다음 명령을 실행하십시오.</target>
        </trans-unit>
        <trans-unit id="03a16a3c3af6b5ec24d5cdd9c021c6edc9b693d8" translate="yes" xml:space="preserve">
          <source>Run the following command in a Terminal:</source>
          <target state="translated">터미널에서 다음 명령을 실행하십시오.</target>
        </trans-unit>
        <trans-unit id="61bfc27032449f6f60131caab3d200b93d7ad60f" translate="yes" xml:space="preserve">
          <source>Run the following command to find the id for the process that is listening on port 8081:</source>
          <target state="translated">다음 명령을 실행하여 포트 8081에서 수신 대기중인 프로세스의 ID를 찾으십시오.</target>
        </trans-unit>
        <trans-unit id="a6f9361cb884748c598570cff45a9337529cc7e2" translate="yes" xml:space="preserve">
          <source>Run the following command to start the process of upgrading to the latest version:</source>
          <target state="translated">다음 명령을 실행하여 최신 버전으로 업그레이드하는 프로세스를 시작하십시오.</target>
        </trans-unit>
        <trans-unit id="47026dc85cf7526419f0cb794141404b2dc5847f" translate="yes" xml:space="preserve">
          <source>Run the following in a command prompt:</source>
          <target state="translated">명령 프롬프트에서 다음을 실행하십시오.</target>
        </trans-unit>
        <trans-unit id="d7f574b5a07f6cb4c4273677c2143e991380d370" translate="yes" xml:space="preserve">
          <source>Running On Device</source>
          <target state="translated">장치에서 실행</target>
        </trans-unit>
        <trans-unit id="6fd97b6d7f7308378a268e915f1594ef33e19335" translate="yes" xml:space="preserve">
          <source>Running On Simulator</source>
          <target state="translated">시뮬레이터에서 실행</target>
        </trans-unit>
        <trans-unit id="b2e6eac36887952b63fd7b4987083565a8cf6ff2" translate="yes" xml:space="preserve">
          <source>Running in development mode (&lt;code&gt;dev=true&lt;/code&gt;)</source>
          <target state="translated">개발 모드에서 실행 ( &lt;code&gt;dev=true&lt;/code&gt; )</target>
        </trans-unit>
        <trans-unit id="53a3759b41abf1b25e77f89a1e708a452aec43e7" translate="yes" xml:space="preserve">
          <source>Running on a device</source>
          <target state="translated">장치에서 실행</target>
        </trans-unit>
        <trans-unit id="ad95734b239d50e73c951ed59216790b0a724c33" translate="yes" xml:space="preserve">
          <source>Running your React Native application</source>
          <target state="translated">React Native 애플리케이션 실행</target>
        </trans-unit>
        <trans-unit id="e46a209cba86e71411ca37c1837a284ddea3142e" translate="yes" xml:space="preserve">
          <source>Running your app on Android devices</source>
          <target state="translated">Android 기기에서 앱 실행</target>
        </trans-unit>
        <trans-unit id="383dc47bbd432363eab380404479fac91e533cf1" translate="yes" xml:space="preserve">
          <source>Running your app on a simulator or virtual device</source>
          <target state="translated">시뮬레이터 또는 가상 장치에서 앱 실행</target>
        </trans-unit>
        <trans-unit id="d7233a3b7ad43b41d73a3cd872a169170b54c083" translate="yes" xml:space="preserve">
          <source>Running your app on iOS devices</source>
          <target state="translated">iOS 기기에서 앱 실행</target>
        </trans-unit>
        <trans-unit id="a6c21a42e8340391df383856d226b7047f1f9127" translate="yes" xml:space="preserve">
          <source>Runs an easing function backwards.</source>
          <target state="translated">여유 기능을 뒤로 실행합니다.</target>
        </trans-unit>
        <trans-unit id="477a8873a0a910dfdedb77a1e584db92e113528b" translate="yes" xml:space="preserve">
          <source>Runs an easing function forwards.</source>
          <target state="translated">여유 기능을 앞으로 실행합니다.</target>
        </trans-unit>
        <trans-unit id="18ac44c4b5f1097ca4ffff32a1c13934243c60dd" translate="yes" xml:space="preserve">
          <source>SDK build tools version 26.0.3 (buildToolsVersion in &lt;a href=&quot;https://github.com/facebook/react-native/blob/master/ReactAndroid/build.gradle&quot;&gt;&lt;code&gt;build.gradle&lt;/code&gt;&lt;/a&gt;)</source>
          <target state="translated">SDK 빌드 도구 버전 26.0.3 (build.gradle의 &lt;a href=&quot;https://github.com/facebook/react-native/blob/master/ReactAndroid/build.gradle&quot;&gt; &lt;code&gt;build.gradle&lt;/code&gt; &lt;/a&gt; )</target>
        </trans-unit>
        <trans-unit id="8f75ac6cee53ffa880ea91307d184adba66b3bbc" translate="yes" xml:space="preserve">
          <source>SafeAreaView</source>
          <target state="translated">SafeAreaView</target>
        </trans-unit>
        <trans-unit id="aa91fd13d58da510ca2de4f101af5c376a5acaad" translate="yes" xml:space="preserve">
          <source>Same system on iOS and Android.</source>
          <target state="translated">iOS 및 Android에서 동일한 시스템.</target>
        </trans-unit>
        <trans-unit id="028753af88a81ad26c167b7f6db3f2f017ddc26a" translate="yes" xml:space="preserve">
          <source>Saves the photo or video to the camera roll or photo library.</source>
          <target state="translated">사진 또는 비디오를 카메라 롤 또는 사진 라이브러리에 저장합니다.</target>
        </trans-unit>
        <trans-unit id="f155161b5030bf68b7e571bf50bb9da15a590b12" translate="yes" xml:space="preserve">
          <source>Schedule a function to run after all interactions have completed. Returns a cancellable &quot;promise&quot;.</source>
          <target state="translated">모든 상호 작용이 완료된 후 기능이 실행되도록 스케줄하십시오. 취소 가능한 &quot;약속&quot;을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="0f72c59a3140a985f2c0971393b00f2b7315fa96" translate="yes" xml:space="preserve">
          <source>Schedules an animation to happen on the next layout.</source>
          <target state="translated">다음 레이아웃에서 애니메이션이 발생하도록 예약합니다.</target>
        </trans-unit>
        <trans-unit id="becce01d2997766392f47f8fa14e7e7b1f91aa06" translate="yes" xml:space="preserve">
          <source>Schedules the localNotification for future presentation.</source>
          <target state="translated">향후 프리젠 테이션을 위해 localNotification을 예약합니다.</target>
        </trans-unit>
        <trans-unit id="fe3d802d026e0365d3c634bfa6b1f583e710f3d6" translate="yes" xml:space="preserve">
          <source>Schedules the localNotification for immediate presentation.</source>
          <target state="translated">즉각적인 프리젠 테이션을 위해 localNotification을 예약합니다.</target>
        </trans-unit>
        <trans-unit id="dee915be58e460a0714c8355cd2bf5742a5c9804" translate="yes" xml:space="preserve">
          <source>Screen orientation lock</source>
          <target state="translated">화면 방향 잠금</target>
        </trans-unit>
        <trans-unit id="7436e20873a9f18cd6bcd7875423c8d17c6289eb" translate="yes" xml:space="preserve">
          <source>Screenshot/Snapshot Tests</source>
          <target state="translated">스크린 샷 / 스냅 샷 테스트</target>
        </trans-unit>
        <trans-unit id="4e385c6989f06f87c82b1b15dfd6196726e3e728" translate="yes" xml:space="preserve">
          <source>Scroll loading.</source>
          <target state="translated">스크롤 로딩.</target>
        </trans-unit>
        <trans-unit id="00721c07887ea57b48761c40d89c65af4ecdb113" translate="yes" xml:space="preserve">
          <source>Scroll to a specific content pixel offset in the list.</source>
          <target state="translated">목록에서 특정 컨텐츠 픽셀 오프셋으로 스크롤하십시오.</target>
        </trans-unit>
        <trans-unit id="1053f7933618e87aea94b0f63a296d0831e11fcd" translate="yes" xml:space="preserve">
          <source>Scroll until you see (part of) the name of your package. In this case, I was profiling &lt;code&gt;com.facebook.adsmanager&lt;/code&gt;, which shows up as &lt;code&gt;book.adsmanager&lt;/code&gt; because of silly thread name limits in the kernel.</source>
          <target state="translated">패키지 이름이 보일 때까지 스크롤하십시오. 이 경우 &lt;code&gt;com.facebook.adsmanager&lt;/code&gt; 를 프로파일 링 했습니다 . 커널의 스레드 이름 제한 때문에 &lt;code&gt;book.adsmanager&lt;/code&gt; 로 표시됩니다 .</target>
        </trans-unit>
        <trans-unit id="2c8019bc5f85eeec89dca6860cd81700481a925c" translate="yes" xml:space="preserve">
          <source>ScrollToIndex support.</source>
          <target state="translated">ScrollToIndex 지원</target>
        </trans-unit>
        <trans-unit id="0e984940f09189feb0e21d7f060742be727ea68a" translate="yes" xml:space="preserve">
          <source>ScrollView</source>
          <target state="translated">ScrollView</target>
        </trans-unit>
        <trans-unit id="c3568b49e1e271e9a393a596984429a8b4de30be" translate="yes" xml:space="preserve">
          <source>ScrollView props...</source>
          <target state="translated">ScrollView 소품 ...</target>
        </trans-unit>
        <trans-unit id="490fc13985587d9f36c7e38e59f46728d4be09b6" translate="yes" xml:space="preserve">
          <source>ScrollView#DEPRECATED_sendUpdatedChildFrames</source>
          <target state="translated">ScrollView#DEPRECATED_sendUpdatedChildFrames</target>
        </trans-unit>
        <trans-unit id="b411bc7d5df2a14448c31dc1993d00b8cbb13e51" translate="yes" xml:space="preserve">
          <source>ScrollView#alwaysBounceHorizontal</source>
          <target state="translated">ScrollView#alwaysBounceHorizontal</target>
        </trans-unit>
        <trans-unit id="8357785d6e8226b80e5886935098d11bdb3c3c82" translate="yes" xml:space="preserve">
          <source>ScrollView#alwaysBounceVertical</source>
          <target state="translated">ScrollView#alwaysBounceVertical</target>
        </trans-unit>
        <trans-unit id="17e33934f82432c9a1a1321e2cf9a8f2f5507976" translate="yes" xml:space="preserve">
          <source>ScrollView#automaticallyAdjustContentInsets</source>
          <target state="translated">ScrollView#automaticallyAdjustContentInsets</target>
        </trans-unit>
        <trans-unit id="c5dc761a8323ee554925e77910639a8f307e7bef" translate="yes" xml:space="preserve">
          <source>ScrollView#bounces</source>
          <target state="translated">ScrollView#bounces</target>
        </trans-unit>
        <trans-unit id="a4881d2fc328564c84fe834c0ba0b3df594699eb" translate="yes" xml:space="preserve">
          <source>ScrollView#bouncesZoom</source>
          <target state="translated">ScrollView#bouncesZoom</target>
        </trans-unit>
        <trans-unit id="be14557ba33f532a9a9c8c44750cd63015b9f354" translate="yes" xml:space="preserve">
          <source>ScrollView#canCancelContentTouches</source>
          <target state="translated">ScrollView#canCancelContentTouches</target>
        </trans-unit>
        <trans-unit id="83c0abc7df4539415c21392770fa764d44d0a8e4" translate="yes" xml:space="preserve">
          <source>ScrollView#centerContent</source>
          <target state="translated">ScrollView#centerContent</target>
        </trans-unit>
        <trans-unit id="806655057f9bb64510b4c92ed20131db68d235b9" translate="yes" xml:space="preserve">
          <source>ScrollView#contentContainerStyle</source>
          <target state="translated">ScrollView#contentContainerStyle</target>
        </trans-unit>
        <trans-unit id="510b1d133b9f6aefce38a81cfbddbf252c79a20f" translate="yes" xml:space="preserve">
          <source>ScrollView#contentInset</source>
          <target state="translated">ScrollView#contentInset</target>
        </trans-unit>
        <trans-unit id="8f126579d32af66d065e2b7c85c771a6d43e4cbc" translate="yes" xml:space="preserve">
          <source>ScrollView#contentInsetAdjustmentBehavior</source>
          <target state="translated">ScrollView#contentInsetAdjustmentBehavior</target>
        </trans-unit>
        <trans-unit id="a24bd82e9f18643a807f6f7ce93f043c796e3ff3" translate="yes" xml:space="preserve">
          <source>ScrollView#contentOffset</source>
          <target state="translated">ScrollView#contentOffset</target>
        </trans-unit>
        <trans-unit id="11be18e155f5c9eacf89fdafbf69fba5727479b3" translate="yes" xml:space="preserve">
          <source>ScrollView#decelerationRate</source>
          <target state="translated">ScrollView#decelerationRate</target>
        </trans-unit>
        <trans-unit id="7890b71156b41223968b3c7824895ae200a37155" translate="yes" xml:space="preserve">
          <source>ScrollView#directionalLockEnabled</source>
          <target state="translated">ScrollView#directionalLockEnabled</target>
        </trans-unit>
        <trans-unit id="9220d5b83bace6b9d252628b4ed9bcb87376a171" translate="yes" xml:space="preserve">
          <source>ScrollView#endFillColor</source>
          <target state="translated">ScrollView#endFillColor</target>
        </trans-unit>
        <trans-unit id="43c03120645bfccd3baf40d46c97a24eacc49512" translate="yes" xml:space="preserve">
          <source>ScrollView#horizontal</source>
          <target state="translated">ScrollView#horizontal</target>
        </trans-unit>
        <trans-unit id="05d6cf11fddc666361e3f2a203254031d6de204a" translate="yes" xml:space="preserve">
          <source>ScrollView#indicatorStyle</source>
          <target state="translated">ScrollView#indicatorStyle</target>
        </trans-unit>
        <trans-unit id="8f2dae0a3510c0898f8aa28891fd26287c4192f0" translate="yes" xml:space="preserve">
          <source>ScrollView#keyboardDismissMode</source>
          <target state="translated">ScrollView#keyboardDismissMode</target>
        </trans-unit>
        <trans-unit id="2e8c866a82dc49e2bff99048ec51ce4682e9295c" translate="yes" xml:space="preserve">
          <source>ScrollView#keyboardShouldPersistTaps</source>
          <target state="translated">ScrollView#keyboardShouldPersistTaps</target>
        </trans-unit>
        <trans-unit id="0b85dddb71eeaeed045d3f78ff54cc714e6d023b" translate="yes" xml:space="preserve">
          <source>ScrollView#maximumZoomScale</source>
          <target state="translated">ScrollView#maximumZoomScale</target>
        </trans-unit>
        <trans-unit id="39e3c27ebe76e174a98861fa5e9918ce315d6c26" translate="yes" xml:space="preserve">
          <source>ScrollView#minimumZoomScale</source>
          <target state="translated">ScrollView#minimumZoomScale</target>
        </trans-unit>
        <trans-unit id="b4debaaeaaf692a9fdfde15fc51ccdca49c5a16e" translate="yes" xml:space="preserve">
          <source>ScrollView#nestedScrollEnabled</source>
          <target state="translated">ScrollView#nestedScrollEnabled</target>
        </trans-unit>
        <trans-unit id="878a7d4a3e7383da2a975f909d49a99b99475510" translate="yes" xml:space="preserve">
          <source>ScrollView#onContentSizeChange</source>
          <target state="translated">ScrollView#onContentSizeChange</target>
        </trans-unit>
        <trans-unit id="c18b6a9fee7b7f287766f13847eca6767d3de0b0" translate="yes" xml:space="preserve">
          <source>ScrollView#onMomentumScrollBegin</source>
          <target state="translated">ScrollView#onMomentumScrollBegin</target>
        </trans-unit>
        <trans-unit id="489e90bbec8e977f0406dae4a7508e83adc3055a" translate="yes" xml:space="preserve">
          <source>ScrollView#onMomentumScrollEnd</source>
          <target state="translated">ScrollView#onMomentumScrollEnd</target>
        </trans-unit>
        <trans-unit id="0038806ed934c8dd6c6bc0ae7bb91b771fde1ee5" translate="yes" xml:space="preserve">
          <source>ScrollView#onScroll</source>
          <target state="translated">ScrollView#onScroll</target>
        </trans-unit>
        <trans-unit id="95354023797054b0b9267e9ce9d0851cba2d8cf8" translate="yes" xml:space="preserve">
          <source>ScrollView#onScrollBeginDrag</source>
          <target state="translated">ScrollView#onScrollBeginDrag</target>
        </trans-unit>
        <trans-unit id="4f84b682bda115a76350b6a102bafae1572585d7" translate="yes" xml:space="preserve">
          <source>ScrollView#onScrollEndDrag</source>
          <target state="translated">ScrollView#onScrollEndDrag</target>
        </trans-unit>
        <trans-unit id="08922787555602ee3f3a0d8b2372850a4c2988ac" translate="yes" xml:space="preserve">
          <source>ScrollView#overScrollMode</source>
          <target state="translated">ScrollView#overScrollMode</target>
        </trans-unit>
        <trans-unit id="e4365be22cf20544243d548279aded9c24049dc2" translate="yes" xml:space="preserve">
          <source>ScrollView#pagingEnabled</source>
          <target state="translated">ScrollView#pagingEnabled</target>
        </trans-unit>
        <trans-unit id="f50a3935f6c20221eebfadf20be462d1ed06a525" translate="yes" xml:space="preserve">
          <source>ScrollView#pinchGestureEnabled</source>
          <target state="translated">ScrollView#pinchGestureEnabled</target>
        </trans-unit>
        <trans-unit id="7de887a35c93cfb57498cc535ffdefa3df52862a" translate="yes" xml:space="preserve">
          <source>ScrollView#refreshControl</source>
          <target state="translated">ScrollView#refreshControl</target>
        </trans-unit>
        <trans-unit id="77c659317f99375cd00033f286b036d988f6c8a9" translate="yes" xml:space="preserve">
          <source>ScrollView#removeClippedSubviews</source>
          <target state="translated">ScrollView#removeClippedSubviews</target>
        </trans-unit>
        <trans-unit id="db4cc21930479e824c6effe975903bd94de6c1bf" translate="yes" xml:space="preserve">
          <source>ScrollView#scrollEnabled</source>
          <target state="translated">ScrollView#scrollEnabled</target>
        </trans-unit>
        <trans-unit id="3d03ffbada9beccd5dcb92128bd6f351c2af8c89" translate="yes" xml:space="preserve">
          <source>ScrollView#scrollEventThrottle</source>
          <target state="translated">ScrollView#scrollEventThrottle</target>
        </trans-unit>
        <trans-unit id="be688a1e4f21111879e3c9d4baed1907f3f2cb9d" translate="yes" xml:space="preserve">
          <source>ScrollView#scrollIndicatorInsets</source>
          <target state="translated">ScrollView#scrollIndicatorInsets</target>
        </trans-unit>
        <trans-unit id="b8910ba3ac9bccac5358d42b26b7808e5aae5a67" translate="yes" xml:space="preserve">
          <source>ScrollView#scrollPerfTag</source>
          <target state="translated">ScrollView#scrollPerfTag</target>
        </trans-unit>
        <trans-unit id="455f926f4708345fb930e77d87e375ad51d09afb" translate="yes" xml:space="preserve">
          <source>ScrollView#scrollsToTop</source>
          <target state="translated">ScrollView#scrollsToTop</target>
        </trans-unit>
        <trans-unit id="b2b160d1e8d1612170271c0fe94572ef4bd6615d" translate="yes" xml:space="preserve">
          <source>ScrollView#showsHorizontalScrollIndicator</source>
          <target state="translated">ScrollView#showsHorizontalScrollIndicator</target>
        </trans-unit>
        <trans-unit id="03a290ff9ccbca157a8a7bf6c199988d2c17760a" translate="yes" xml:space="preserve">
          <source>ScrollView#showsVerticalScrollIndicator</source>
          <target state="translated">ScrollView#showsVerticalScrollIndicator</target>
        </trans-unit>
        <trans-unit id="9565b831656c35af45caa405578baee8b15e6ddb" translate="yes" xml:space="preserve">
          <source>ScrollView#snapToAlignment</source>
          <target state="translated">ScrollView#snapToAlignment</target>
        </trans-unit>
        <trans-unit id="2b132b84d873e30a907406e1b748b11bf763a25e" translate="yes" xml:space="preserve">
          <source>ScrollView#snapToInterval</source>
          <target state="translated">ScrollView#snapToInterval</target>
        </trans-unit>
        <trans-unit id="b72fd992cb58fde7b00b5a69fc9b7697bb1def42" translate="yes" xml:space="preserve">
          <source>ScrollView#stickyHeaderIndices</source>
          <target state="translated">ScrollView#stickyHeaderIndices</target>
        </trans-unit>
        <trans-unit id="1ea4d2ecba162c814867f677a8af45dd92ea083a" translate="yes" xml:space="preserve">
          <source>ScrollView#zoomScale</source>
          <target state="translated">ScrollView#zoomScale</target>
        </trans-unit>
        <trans-unit id="b05b97b19c872477b923c1cb22498a18998378fc" translate="yes" xml:space="preserve">
          <source>ScrollView.flashScrollIndicators()</source>
          <target state="translated">ScrollView.flashScrollIndicators()</target>
        </trans-unit>
        <trans-unit id="8693e1d3a2dd347891936e7d36e9960121023cbd" translate="yes" xml:space="preserve">
          <source>ScrollView.propTypes.decelerationRate</source>
          <target state="translated">ScrollView.propTypes.decelerationRate</target>
        </trans-unit>
        <trans-unit id="06ac589fc4536ccaf1c2223b620fc551c24c9a32" translate="yes" xml:space="preserve">
          <source>ScrollView.scrollTo()</source>
          <target state="translated">ScrollView.scrollTo()</target>
        </trans-unit>
        <trans-unit id="56473823fe55c39be7ee3c50109473b5a0abb4e4" translate="yes" xml:space="preserve">
          <source>ScrollView.scrollToEnd()</source>
          <target state="translated">ScrollView.scrollToEnd()</target>
        </trans-unit>
        <trans-unit id="79ea80d6314324799ad3f5e1c36adc73e75bdecc" translate="yes" xml:space="preserve">
          <source>ScrollView.scrollWithoutAnimationTo()</source>
          <target state="translated">ScrollView.scrollWithoutAnimationTo()</target>
        </trans-unit>
        <trans-unit id="ad29cb0d1b8f27a73f2dd3215b79de7ab9d489c6" translate="yes" xml:space="preserve">
          <source>ScrollViews can be configured to allow paging through views using swiping gestures by using the &lt;code&gt;pagingEnabled&lt;/code&gt; props. Swiping horizontally between views can also be implemented on Android using the &lt;a href=&quot;viewpagerandroid&quot;&gt;ViewPagerAndroid&lt;/a&gt; component.</source>
          <target state="translated">&lt;code&gt;pagingEnabled&lt;/code&gt; 소품 을 사용하여 스 와이프 제스처를 사용하여 뷰를 통해 페이징 할 수 있도록 ScrollViews를 구성 할 수 있습니다 . &lt;a href=&quot;viewpagerandroid&quot;&gt;ViewPagerAndroid&lt;/a&gt; 구성 요소를 사용하여 Android에서 뷰 사이를 가로로 스 와이프 할 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="6bf78634783c1732ee5896c645935a34c135069d" translate="yes" xml:space="preserve">
          <source>Scrolling lists, swiping pages, and pinch-to-zoom</source>
          <target state="translated">스크롤 목록, 스 와이프 페이지 및 핀치 투 줌</target>
        </trans-unit>
        <trans-unit id="dc9e885c29968b1e688aa8dd352776a9c9223e3c" translate="yes" xml:space="preserve">
          <source>Scrolls to a given x, y offset, either immediately or with a smooth animation.</source>
          <target state="translated">주어진 x, y 오프셋으로 즉시 또는 부드러운 애니메이션으로 스크롤합니다.</target>
        </trans-unit>
        <trans-unit id="1910124f1afeedd4a7ea27dec9a3150b3443ac8c" translate="yes" xml:space="preserve">
          <source>Scrolls to the end of the content. May be janky without &lt;code&gt;getItemLayout&lt;/code&gt; prop.</source>
          <target state="translated">내용의 끝으로 스크롤합니다. &lt;code&gt;getItemLayout&lt;/code&gt; 소품이 없으면 jan 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="fca01864952375e61715c077daa160a9db7e072a" translate="yes" xml:space="preserve">
          <source>Scrolls to the item at the specified &lt;code&gt;sectionIndex&lt;/code&gt; and &lt;code&gt;itemIndex&lt;/code&gt; (within the section) positioned in the viewable area such that &lt;code&gt;viewPosition&lt;/code&gt; 0 places it at the top (and may be covered by a sticky header), 1 at the bottom, and 0.5 centered in the middle.</source>
          <target state="translated">&lt;code&gt;viewPosition&lt;/code&gt; 0이 항목을 맨 위에 배치하고 (스티커 헤더로 덮일 수 있음), 맨 아래에 1, 맨 아래에 0.5가 표시되도록 볼 수있는 영역 에 위치한 지정된 &lt;code&gt;sectionIndex&lt;/code&gt; 및 &lt;code&gt;itemIndex&lt;/code&gt; (섹션 내) 의 항목으로 스크롤 합니다. 가운데.</target>
        </trans-unit>
        <trans-unit id="4e52e2abf4d87874ce000a79fef3b45c4b2c5fba" translate="yes" xml:space="preserve">
          <source>Scrolls to the item at the specified index such that it is positioned in the viewable area such that &lt;code&gt;viewPosition&lt;/code&gt; 0 places it at the top, 1 at the bottom, and 0.5 centered in the middle.</source>
          <target state="translated">&lt;code&gt;viewPosition&lt;/code&gt; 0이 맨 위에, 맨 아래에 1, 중간에 0.5를 배치 하도록 볼 수있는 영역에 위치하도록 지정된 색인의 항목으로 스크롤합니다 .</target>
        </trans-unit>
        <trans-unit id="f2c6b564bd8119e16a3e573a6f9e7c6d1ac7820f" translate="yes" xml:space="preserve">
          <source>Section</source>
          <target state="translated">Section</target>
        </trans-unit>
        <trans-unit id="9e21d541f34bd06e7415583abd146e0bb64c2b22" translate="yes" xml:space="preserve">
          <source>Section header support.</source>
          <target state="translated">섹션 헤더 지원.</target>
        </trans-unit>
        <trans-unit id="89d35c6aae5a1516f05acb1fc9b8a2b962f5d937" translate="yes" xml:space="preserve">
          <source>Section separator support.</source>
          <target state="translated">섹션 구분자 지원.</target>
        </trans-unit>
        <trans-unit id="5a61ee4ad6b6d49e55495262350141dcc48da291" translate="yes" xml:space="preserve">
          <source>SectionList</source>
          <target state="translated">SectionList</target>
        </trans-unit>
        <trans-unit id="e91483830f797e35ffa11203b5899ab72b8f6570" translate="yes" xml:space="preserve">
          <source>SectionList#ItemSeparatorComponent</source>
          <target state="translated">SectionList#ItemSeparatorComponent</target>
        </trans-unit>
        <trans-unit id="2aace6b4f894e0ad94b4e86d953fbcb98685459e" translate="yes" xml:space="preserve">
          <source>SectionList#ListEmptyComponent</source>
          <target state="translated">SectionList#ListEmptyComponent</target>
        </trans-unit>
        <trans-unit id="b998cabd2554adc136b36b3c93da7ada29d1d55e" translate="yes" xml:space="preserve">
          <source>SectionList#ListFooterComponent</source>
          <target state="translated">SectionList#ListFooterComponent</target>
        </trans-unit>
        <trans-unit id="ceba5f2dccdf4a5bdd4da62c5eb89340e21dfe1c" translate="yes" xml:space="preserve">
          <source>SectionList#ListHeaderComponent</source>
          <target state="translated">SectionList#ListHeaderComponent</target>
        </trans-unit>
        <trans-unit id="856229dea4cedfc9012a525bba11c062694932e7" translate="yes" xml:space="preserve">
          <source>SectionList#SectionSeparatorComponent</source>
          <target state="translated">SectionList#SectionSeparatorComponent</target>
        </trans-unit>
        <trans-unit id="804ce421ac15863fd6ac9a396c6dd269c3f5e803" translate="yes" xml:space="preserve">
          <source>SectionList#extraData</source>
          <target state="translated">SectionList#extraData</target>
        </trans-unit>
        <trans-unit id="a25b4888171769e961f93b80492e20f2f2620478" translate="yes" xml:space="preserve">
          <source>SectionList#initialNumToRender</source>
          <target state="translated">SectionList#initialNumToRender</target>
        </trans-unit>
        <trans-unit id="80dab922b9766b39e6b2f620bd3fe506ae9928ca" translate="yes" xml:space="preserve">
          <source>SectionList#inverted</source>
          <target state="translated">SectionList#inverted</target>
        </trans-unit>
        <trans-unit id="929a5fe46e6b29ed50baef793a5d2ceade6ccaa3" translate="yes" xml:space="preserve">
          <source>SectionList#keyExtractor</source>
          <target state="translated">SectionList#keyExtractor</target>
        </trans-unit>
        <trans-unit id="986bc45d31611182968e894cec84799ba723eccd" translate="yes" xml:space="preserve">
          <source>SectionList#legacyImplementation</source>
          <target state="translated">SectionList#legacyImplementation</target>
        </trans-unit>
        <trans-unit id="f4fbcbf194a1248845957469787551a3d12a07ce" translate="yes" xml:space="preserve">
          <source>SectionList#onEndReached</source>
          <target state="translated">SectionList#onEndReached</target>
        </trans-unit>
        <trans-unit id="721801b0f2e47cfeb51233b4990d3258b426af67" translate="yes" xml:space="preserve">
          <source>SectionList#onEndReachedThreshold</source>
          <target state="translated">SectionList#onEndReachedThreshold</target>
        </trans-unit>
        <trans-unit id="c4bf9d3743d8007009969988d3af79c1713859ef" translate="yes" xml:space="preserve">
          <source>SectionList#onRefresh</source>
          <target state="translated">SectionList#onRefresh</target>
        </trans-unit>
        <trans-unit id="7c7a6c0ed4e2f4601adf6ad0fc87466bab9f81f4" translate="yes" xml:space="preserve">
          <source>SectionList#onViewableItemsChanged</source>
          <target state="translated">SectionList#onViewableItemsChanged</target>
        </trans-unit>
        <trans-unit id="6c1a8f6d64378d57fe33474f80cf14f4878b355a" translate="yes" xml:space="preserve">
          <source>SectionList#refreshing</source>
          <target state="translated">SectionList#refreshing</target>
        </trans-unit>
        <trans-unit id="d2cc0198afc3eaa7d6844699105e3fa977561baf" translate="yes" xml:space="preserve">
          <source>SectionList#removeClippedSubviews</source>
          <target state="translated">SectionList#removeClippedSubviews</target>
        </trans-unit>
        <trans-unit id="78b8e4bbfe138046d278e1fae3b75d5df06042eb" translate="yes" xml:space="preserve">
          <source>SectionList#renderItem</source>
          <target state="translated">SectionList#renderItem</target>
        </trans-unit>
        <trans-unit id="b16f336af0e6fb1e141c60f30a0c0056baf8ab03" translate="yes" xml:space="preserve">
          <source>SectionList#renderSectionFooter</source>
          <target state="translated">SectionList#renderSectionFooter</target>
        </trans-unit>
        <trans-unit id="53076f5c3a0881b403734e0970a602f5451ba050" translate="yes" xml:space="preserve">
          <source>SectionList#renderSectionHeader</source>
          <target state="translated">SectionList#renderSectionHeader</target>
        </trans-unit>
        <trans-unit id="6c5609730bd0271232cb2059c7aa53ff7724aac2" translate="yes" xml:space="preserve">
          <source>SectionList#sections</source>
          <target state="translated">SectionList#sections</target>
        </trans-unit>
        <trans-unit id="f82a58364c2a948d3ac2294be9f2058726b91a4c" translate="yes" xml:space="preserve">
          <source>SectionList#stickySectionHeadersEnabled</source>
          <target state="translated">SectionList#stickySectionHeadersEnabled</target>
        </trans-unit>
        <trans-unit id="b6103a601fceeda41b9195c3df5b0d7111bc679c" translate="yes" xml:space="preserve">
          <source>SectionList.flashScrollIndicators()</source>
          <target state="translated">SectionList.flashScrollIndicators()</target>
        </trans-unit>
        <trans-unit id="69e7388b51eed2589712260ab93da335c5af48ac" translate="yes" xml:space="preserve">
          <source>SectionList.recordInteraction()</source>
          <target state="translated">SectionList.recordInteraction()</target>
        </trans-unit>
        <trans-unit id="4931ab4c0770241b135622113573e1fbba04c5c3" translate="yes" xml:space="preserve">
          <source>SectionList.scrollToLocation()</source>
          <target state="translated">SectionList.scrollToLocation()</target>
        </trans-unit>
        <trans-unit id="a514721116be0e98655ff15f001865e414d95d40" translate="yes" xml:space="preserve">
          <source>Secure text input alert</source>
          <target state="translated">안전한 텍스트 입력 경고</target>
        </trans-unit>
        <trans-unit id="aeb78a3e092c34ec269f3990359bac2fb367389e" translate="yes" xml:space="preserve">
          <source>Security bugs</source>
          <target state="translated">보안 버그</target>
        </trans-unit>
        <trans-unit id="907d2a9dbe70b4ef38b86c4a97e113d491c2dc7e" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;cameraroll&quot;&gt;CameraRoll&lt;/a&gt; for an example of using local resources that are outside of &lt;code&gt;Images.xcassets&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Images.xcassets&lt;/code&gt; 외부에있는 로컬 리소스를 사용하는 예는 &lt;a href=&quot;cameraroll&quot;&gt;CameraRoll&lt;/a&gt; 을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="59141f48aefefc41f849597993219cbe0f329169" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;datepickerios#maximumdate&quot;&gt;&lt;code&gt;maximumDate&lt;/code&gt;&lt;/a&gt; for an example image.</source>
          <target state="translated">이미지 예는 &lt;a href=&quot;datepickerios#maximumdate&quot;&gt; &lt;code&gt;maximumDate&lt;/code&gt; &lt;/a&gt; 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="01f56686e75f687f9ee20cea5df2f7b34d16b439" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/bottom&quot;&gt;https://developer.mozilla.org/en-US/docs/Web/CSS/bottom&lt;/a&gt; for more details of how &lt;code&gt;bottom&lt;/code&gt; affects layout.</source>
          <target state="translated">&lt;code&gt;bottom&lt;/code&gt; 레이아웃에 미치는 영향에 대한 자세한 내용은 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/bottom&quot;&gt;https://developer.mozilla.org/en-US/docs/Web/CSS/bottom&lt;/a&gt; 을 참조 하십시오 .</target>
        </trans-unit>
        <trans-unit id="c80e303a04767472bc7592fd3e1c6c335ae85882" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/left&quot;&gt;https://developer.mozilla.org/en-US/docs/Web/CSS/left&lt;/a&gt; for more details of how &lt;code&gt;left&lt;/code&gt; affects layout.</source>
          <target state="translated">&lt;code&gt;left&lt;/code&gt; 레이아웃에 미치는 영향에 대한 자세한 내용은 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/left&quot;&gt;https://developer.mozilla.org/en-US/docs/Web/CSS/left&lt;/a&gt; 를 참조 하십시오 .</target>
        </trans-unit>
        <trans-unit id="05c94d991c56ef358713728e969a0ccb0f8ad7bf" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/max-height&quot;&gt;https://developer.mozilla.org/en-US/docs/Web/CSS/max-height&lt;/a&gt; for more details.</source>
          <target state="translated">자세한 내용은 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/max-height&quot;&gt;https://developer.mozilla.org/en-US/docs/Web/CSS/max-height&lt;/a&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="1cbdf30d47e6696251419fbdcb612cd3dc4fc644" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/max-width&quot;&gt;https://developer.mozilla.org/en-US/docs/Web/CSS/max-width&lt;/a&gt; for more details.</source>
          <target state="translated">자세한 내용은 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/max-width&quot;&gt;https://developer.mozilla.org/en-US/docs/Web/CSS/max-width&lt;/a&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="ee91275e7e9e3256d8b4058f14a0aa73c518516c" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/min-height&quot;&gt;https://developer.mozilla.org/en-US/docs/Web/CSS/min-height&lt;/a&gt; for more details.</source>
          <target state="translated">자세한 내용은 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/min-height&quot;&gt;https://developer.mozilla.org/en-US/docs/Web/CSS/min-height&lt;/a&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="4e20784d023d32e46fc8dfc60e48346b9d85b30b" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/min-width&quot;&gt;https://developer.mozilla.org/en-US/docs/Web/CSS/min-width&lt;/a&gt; for more details.</source>
          <target state="translated">자세한 내용은 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/min-width&quot;&gt;https://developer.mozilla.org/en-US/docs/Web/CSS/min-width&lt;/a&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="e20324938abcc7c650fa1500a4096ca66d2e24ca" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/right&quot;&gt;https://developer.mozilla.org/en-US/docs/Web/CSS/right&lt;/a&gt; for more details of how &lt;code&gt;right&lt;/code&gt; affects layout.</source>
          <target state="translated">&lt;code&gt;right&lt;/code&gt; 레이아웃에 미치는 영향에 대한 자세한 내용은 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/right&quot;&gt;https://developer.mozilla.org/en-US/docs/Web/CSS/right&lt;/a&gt; 를 참조 하십시오 .</target>
        </trans-unit>
        <trans-unit id="90fe86bbcc1d8647358f95b4b4f9ebba5e4caa63" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/top&quot;&gt;https://developer.mozilla.org/en-US/docs/Web/CSS/top&lt;/a&gt; for more details of how &lt;code&gt;top&lt;/code&gt; affects layout.</source>
          <target state="translated">&lt;code&gt;top&lt;/code&gt; 이 레이아웃에 미치는 영향에 대한 자세한 내용은 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/top&quot;&gt;https://developer.mozilla.org/en-US/docs/Web/CSS/top&lt;/a&gt; 을 참조 하십시오 .</target>
        </trans-unit>
        <trans-unit id="5d6678373b55eea9b104ccd383c9d7a320576f68" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://github.com/facebook/yoga&quot;&gt;https://github.com/facebook/yoga&lt;/a&gt; for more details on how &lt;code&gt;position&lt;/code&gt; differs between React Native and CSS.</source>
          <target state="translated">React Native와 CSS의 &lt;code&gt;position&lt;/code&gt; 가 어떻게 다른지 에 대한 자세한 내용 은 &lt;a href=&quot;https://github.com/facebook/yoga&quot;&gt;https://github.com/facebook/yoga&lt;/a&gt; 를 참조 하십시오 .</target>
        </trans-unit>
        <trans-unit id="48a52297679dcecc3eb4179db1c185c337a54c15" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://medium.com/@martinkonicek/what-is-a-test-plan-8bfc840ec171#.y9lcuqqi9&quot;&gt;What is a Test Plan?&lt;/a&gt; to learn more.</source>
          <target state="translated">참조 &lt;a href=&quot;https://medium.com/@martinkonicek/what-is-a-test-plan-8bfc840ec171#.y9lcuqqi9&quot;&gt;테스트 계획은 무엇입니까? &lt;/a&gt;더 배우기 위해.</target>
        </trans-unit>
        <trans-unit id="528134d34412307cd29d3c2ec9a348d185058366" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;refreshcontrol&quot;&gt;RefreshControl&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;refreshcontrol&quot;&gt;RefreshControl을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="3fa2254cc8a8b738cf26cc0336a551038bf9c185" translate="yes" xml:space="preserve">
          <source>See &lt;code&gt;ScrollView#scrollTo&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;ScrollView#scrollTo&lt;/code&gt; 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="9b2695b3c5bfbf11b095e739267825fc3d1955c3" translate="yes" xml:space="preserve">
          <source>See &lt;code&gt;ScrollView#scrollToEnd&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;ScrollView#scrollToEnd&lt;/code&gt; 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="7fbcc2aba4ae853c05e4836426fd41046715ec13" translate="yes" xml:space="preserve">
          <source>See &lt;code&gt;ViewabilityHelper.js&lt;/code&gt; for flow type and further documentation.</source>
          <target state="translated">흐름 유형 및 추가 설명서는 &lt;code&gt;ViewabilityHelper.js&lt;/code&gt; 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="432cb254f15763b7805bdd86025f5f8cf43aec8f" translate="yes" xml:space="preserve">
          <source>See above.</source>
          <target state="translated">위 참조.</target>
        </trans-unit>
        <trans-unit id="2d58c9b9c853c290bccf0dad5f628c40565aad77" translate="yes" xml:space="preserve">
          <source>See below.</source>
          <target state="translated">아래를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="1a5470a9f513db4153166e903710027d59dc6695" translate="yes" xml:space="preserve">
          <source>See config parameters below.</source>
          <target state="translated">아래의 구성 매개 변수를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="d8df23368bd6e332916fb14546986d3b0d3cf009" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;accessibility#accessibilityelementshidden-ios&quot;&gt;Accessibility guide&lt;/a&gt; for more information.</source>
          <target state="translated">자세한 내용은 &lt;a href=&quot;accessibility#accessibilityelementshidden-ios&quot;&gt;내게 필요한 옵션 안내서&lt;/a&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="d1084b1ac9c3fc3f2f9dc1cafe54f333ef6870d9" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;accessibility#accessibilitytraits-ios&quot;&gt;Accessibility guide&lt;/a&gt; for more information.</source>
          <target state="translated">자세한 내용은 &lt;a href=&quot;accessibility#accessibilitytraits-ios&quot;&gt;내게 필요한 옵션 안내서&lt;/a&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="dfc074e594c1b96a0096ce85f9aca455e5497d8b" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;accessibility#accessibilityviewismodal-ios&quot;&gt;Accessibility guide&lt;/a&gt; for more information.</source>
          <target state="translated">자세한 내용은 &lt;a href=&quot;accessibility#accessibilityviewismodal-ios&quot;&gt;내게 필요한 옵션 안내서&lt;/a&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="aead24c8e2e7cd690e185a98a689820e84f865ba" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;accessibility#accessible-ios-android&quot;&gt;Accessibility guide&lt;/a&gt; for more information.</source>
          <target state="translated">자세한 내용은 &lt;a href=&quot;accessibility#accessible-ios-android&quot;&gt;내게 필요한 옵션 안내서&lt;/a&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="5f79de42fd860328414d025e2a845e0fd7ba1111" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;http://developer.android.com/reference/android/R.attr.html#importantForAccessibility&quot;&gt;Android &lt;code&gt;importantForAccessibility&lt;/code&gt; docs&lt;/a&gt; for reference.</source>
          <target state="translated">참조를 위해 &lt;a href=&quot;http://developer.android.com/reference/android/R.attr.html#importantForAccessibility&quot;&gt;Android &lt;code&gt;importantForAccessibility&lt;/code&gt; 문서&lt;/a&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="5c3f9b4a4ace5d2cdb01d3e1479b375ed8526f86" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;http://developer.android.com/reference/android/view/View.html#attr_android:accessibilityLiveRegion&quot;&gt;Android &lt;code&gt;View&lt;/code&gt; docs&lt;/a&gt; for reference.</source>
          <target state="translated">참고로 &lt;a href=&quot;http://developer.android.com/reference/android/view/View.html#attr_android:accessibilityLiveRegion&quot;&gt;Android &lt;code&gt;View&lt;/code&gt; 문서&lt;/a&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="9c71c8228e8bc739f6f49bce591f18245cb9d298" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;https://github.com/react-community/create-react-native-app/blob/master/react-native-scripts/template/README.md#updating-to-new-releases&quot;&gt;CRNA user guide&lt;/a&gt; for up-to-date information about upgrading your project.</source>
          <target state="translated">프로젝트 업그레이드에 대한 최신 정보 는 &lt;a href=&quot;https://github.com/react-community/create-react-native-app/blob/master/react-native-scripts/template/README.md#updating-to-new-releases&quot;&gt;CRNA 사용자 안내서&lt;/a&gt; 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="14e80ade1e2cf260fbfddd8bac245f09c76e7204" translate="yes" xml:space="preserve">
          <source>See the Code</source>
          <target state="translated">코드를 참조하십시오</target>
        </trans-unit>
        <trans-unit id="be2574e61ce83071a5385dd938470f1288a765f2" translate="yes" xml:space="preserve">
          <source>See the following for example usage and integration points:</source>
          <target state="translated">사용 및 통합 지점의 예는 다음을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="d5b07318ffe369a984bc07beb9fe919b568dc253" translate="yes" xml:space="preserve">
          <source>See what push permissions are currently enabled.</source>
          <target state="translated">현재 어떤 푸시 권한이 활성화되어 있는지 확인하십시오.</target>
        </trans-unit>
        <trans-unit id="baf13f431e118d444a712d57b964bfa42ea12051" translate="yes" xml:space="preserve">
          <source>Seeing &lt;code&gt;device&lt;/code&gt; in the right column means the device is connected. You must have &lt;strong&gt;only one device connected&lt;/strong&gt; at a time.</source>
          <target state="translated">보고 &lt;code&gt;device&lt;/code&gt; 장치가 접속되고, 우측 칼럼 수단. &lt;strong&gt;한 번에 하나의 장치 만 연결&lt;/strong&gt; 해야합니다 .</target>
        </trans-unit>
        <trans-unit id="069825a9879dfe419a9d6ef4815760cfd7fa7da1" translate="yes" xml:space="preserve">
          <source>SegmentedControlIOS</source>
          <target state="translated">SegmentedControlIOS</target>
        </trans-unit>
        <trans-unit id="663c1a50e9d3d2b57cec7cc3da6993f4c4003edb" translate="yes" xml:space="preserve">
          <source>SegmentedControlIOS#enabled</source>
          <target state="translated">SegmentedControlIOS#enabled</target>
        </trans-unit>
        <trans-unit id="533d7b637a830343e7afb15be22e72bdbea4f5a5" translate="yes" xml:space="preserve">
          <source>SegmentedControlIOS#momentary</source>
          <target state="translated">SegmentedControlIOS#momentary</target>
        </trans-unit>
        <trans-unit id="1d412390cc91a56307ee0abccd9582e61bf165e3" translate="yes" xml:space="preserve">
          <source>SegmentedControlIOS#onChange</source>
          <target state="translated">SegmentedControlIOS#onChange</target>
        </trans-unit>
        <trans-unit id="ed84e4bc4f4e5ed4e1d5a15b31f3db5b344736f2" translate="yes" xml:space="preserve">
          <source>SegmentedControlIOS#onValueChange</source>
          <target state="translated">SegmentedControlIOS#onValueChange</target>
        </trans-unit>
        <trans-unit id="048cac7f3825e16e16c81a5fa1800c324873bdc4" translate="yes" xml:space="preserve">
          <source>SegmentedControlIOS#selectedIndex</source>
          <target state="translated">SegmentedControlIOS#selectedIndex</target>
        </trans-unit>
        <trans-unit id="4ec508c1335bf925a4953659e15f19614827a126" translate="yes" xml:space="preserve">
          <source>SegmentedControlIOS#tintColor</source>
          <target state="translated">SegmentedControlIOS#tintColor</target>
        </trans-unit>
        <trans-unit id="325b7f2467020f850c69df2f07c6266bb82309b1" translate="yes" xml:space="preserve">
          <source>SegmentedControlIOS#values</source>
          <target state="translated">SegmentedControlIOS#values</target>
        </trans-unit>
        <trans-unit id="8113044b9d896abd4fa7735e4874ce22b7ffa06a" translate="yes" xml:space="preserve">
          <source>Select &lt;code&gt;Tools &amp;rarr; Developer Tools&lt;/code&gt; from the Chrome Menu to open the &lt;a href=&quot;https://developer.chrome.com/devtools&quot;&gt;Developer Tools&lt;/a&gt;. You may also access the DevTools using keyboard shortcuts (&lt;code&gt;⌘⌥I&lt;/code&gt; on macOS, &lt;code&gt;Ctrl&lt;/code&gt;&lt;code&gt;Shift&lt;/code&gt;&lt;code&gt;I&lt;/code&gt; on Windows). You may also want to enable &lt;a href=&quot;http://stackoverflow.com/questions/2233339/javascript-is-there-a-way-to-get-chrome-to-break-on-all-errors/17324511#17324511&quot;&gt;Pause On Caught Exceptions&lt;/a&gt; for a better debugging experience.</source>
          <target state="translated">Chrome 메뉴에서 &lt;code&gt;Tools &amp;rarr; Developer Tools&lt;/code&gt; 를 선택 하여 &lt;a href=&quot;https://developer.chrome.com/devtools&quot;&gt;개발자 도구&lt;/a&gt; 를 엽니 다 . 키보드 단축키 ( macOS의 경우 &lt;code&gt;⌘⌥I&lt;/code&gt; , Windows의 경우 &lt;code&gt;Ctrl&lt;/code&gt; &lt;code&gt;Shift&lt;/code&gt; &lt;code&gt;I&lt;/code&gt; ) 를 사용하여 DevTools에 액세스 할 수도 있습니다 . 더 나은 디버깅 경험을 위해 &lt;a href=&quot;http://stackoverflow.com/questions/2233339/javascript-is-there-a-way-to-get-chrome-to-break-on-all-errors/17324511#17324511&quot;&gt;Pause On Caught Exceptions&lt;/a&gt; 를 활성화 할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="ba17caa4eb0cee5c1110710ba144260d1ed93b63" translate="yes" xml:space="preserve">
          <source>Select the &quot;SDK Platforms&quot; tab from within the SDK Manager, then check the box next to &quot;Show Package Details&quot; in the bottom right corner. Look for and expand the &lt;code&gt;Android 6.0 (Marshmallow)&lt;/code&gt; entry, then make sure the following items are all checked:</source>
          <target state="translated">SDK 관리자에서 &quot;SDK 플랫폼&quot;탭을 선택한 다음 오른쪽 하단에서 &quot;패키지 세부 정보 표시&quot;옆의 확인란을 선택하십시오. &lt;code&gt;Android 6.0 (Marshmallow)&lt;/code&gt; 항목 을 찾아 확장 한 후 다음 항목이 모두 선택되어 있는지 확인하십시오.</target>
        </trans-unit>
        <trans-unit id="66cdb0b8d876156b74a55a55b612065573186fce" translate="yes" xml:space="preserve">
          <source>Select the &quot;x86 Images&quot; tab, then look for the &lt;strong&gt;Marshmallow&lt;/strong&gt; API Level 23, x86_64 ABI image with a Android 6.0 (Google APIs) target.</source>
          <target state="translated">&quot;x86 이미지&quot;탭을 선택한 다음 Android 6.0 (Google API) 대상이 있는 &lt;strong&gt;Marshmallow&lt;/strong&gt; API 레벨 23 x86_64 ABI 이미지 를 찾으십시오 .</target>
        </trans-unit>
        <trans-unit id="c731c4163da7d03b13151f1e2555d1b6c36924cd" translate="yes" xml:space="preserve">
          <source>Select your project in the Xcode Project Navigator, then select your main target (it should share the same name as your project). Look for the &quot;General&quot; tab. Go to &quot;Signing&quot; and make sure your Apple developer account or team is selected under the Team dropdown.</source>
          <target state="translated">Xcode 프로젝트 네비게이터에서 프로젝트를 선택한 다음 기본 대상을 선택하십시오 (프로젝트와 동일한 이름을 공유해야 함). &quot;일반&quot;탭을 찾으십시오. &quot;서명&quot;으로 이동하여 팀 드롭 다운에서 Apple 개발자 계정 또는 팀이 선택되어 있는지 확인하십시오.</target>
        </trans-unit>
        <trans-unit id="b1ea280e9f06086452485e1dc29063742914879f" translate="yes" xml:space="preserve">
          <source>Selecting load</source>
          <target state="translated">하중 선택</target>
        </trans-unit>
        <trans-unit id="711a689c12650be64853fa6e68a1a613728d667e" translate="yes" xml:space="preserve">
          <source>Selecting the html file generated from the previous command.</source>
          <target state="translated">이전 명령에서 생성 된 html 파일을 선택합니다.</target>
        </trans-unit>
        <trans-unit id="58e40be182dcb67b6e25bf1559c65eb81e70e6e2" translate="yes" xml:space="preserve">
          <source>Sending Accessibility Events (Android)</source>
          <target state="translated">접근성 이벤트 보내기 (Android)</target>
        </trans-unit>
        <trans-unit id="97eac09347105a260ff2ba610458a361b634bae9" translate="yes" xml:space="preserve">
          <source>Sending Events to JavaScript</source>
          <target state="translated">JavaScript로 이벤트 보내기</target>
        </trans-unit>
        <trans-unit id="e5a90661e8eabfe67d3e6d8b891fceca0e1bcc9a" translate="yes" xml:space="preserve">
          <source>Sending a pull request</source>
          <target state="translated">풀 요청 보내기</target>
        </trans-unit>
        <trans-unit id="80f95b59d7d775659cb8fd6987a01b1fe16ad1d9" translate="yes" xml:space="preserve">
          <source>Separator support.</source>
          <target state="translated">분리기 지원.</target>
        </trans-unit>
        <trans-unit id="1729419995645c7a5d17fce568fae268b9ea4daf" translate="yes" xml:space="preserve">
          <source>Service can be started from Java API. First you need to decide when the service should be started and implement your solution accordingly. Here is a simple example that reacts to network connection change.</source>
          <target state="translated">Java API에서 서비스를 시작할 수 있습니다. 먼저 서비스 시작시기를 결정하고 그에 따라 솔루션을 구현해야합니다. 다음은 네트워크 연결 변경에 반응하는 간단한 예입니다.</target>
        </trans-unit>
        <trans-unit id="a78cfbae4602b25e7e07c3e5990c2d546e957b6a" translate="yes" xml:space="preserve">
          <source>Set as translucent.</source>
          <target state="translated">반투명으로 설정하십시오.</target>
        </trans-unit>
        <trans-unit id="6efb624885bc4953b48eede80bbc5c075420a42d" translate="yes" xml:space="preserve">
          <source>Set content of string type. You can use following code to set clipboard content</source>
          <target state="translated">문자열 타입의 내용을 설정합니다. 다음 코드를 사용하여 클립 보드 내용을 설정할 수 있습니다</target>
        </trans-unit>
        <trans-unit id="e273417178ceb5631523ed2eefd225020f4d41ab" translate="yes" xml:space="preserve">
          <source>Set text break strategy on Android API Level 23+, possible values are &lt;code&gt;simple&lt;/code&gt;, &lt;code&gt;highQuality&lt;/code&gt;, &lt;code&gt;balanced&lt;/code&gt; The default value is &lt;code&gt;highQuality&lt;/code&gt;.</source>
          <target state="translated">Android API 레벨 23+에서 텍스트 나누기 전략을 설정하십시오. 가능한 값은 &lt;code&gt;simple&lt;/code&gt; 하고 &lt;code&gt;highQuality&lt;/code&gt; 이며 &lt;code&gt;balanced&lt;/code&gt; 이 &lt;code&gt;highQuality&lt;/code&gt; . 기본값은 highQuality 입니다.</target>
        </trans-unit>
        <trans-unit id="5e7d7b7534d436b2140571ce0560d1e60f312d9b" translate="yes" xml:space="preserve">
          <source>Set text break strategy on Android API Level 23+, possible values are &lt;code&gt;simple&lt;/code&gt;, &lt;code&gt;highQuality&lt;/code&gt;, &lt;code&gt;balanced&lt;/code&gt; The default value is &lt;code&gt;simple&lt;/code&gt;.</source>
          <target state="translated">Android API 레벨 23+에서 텍스트 나누기 전략을 설정하십시오. 가능한 값은 &lt;code&gt;simple&lt;/code&gt; 하고 &lt;code&gt;highQuality&lt;/code&gt; 이며 &lt;code&gt;balanced&lt;/code&gt; 이 맞습니다 . 기본값은 &lt;code&gt;simple&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="8f98b25f871e1af507044a03a530ee1302ede139" translate="yes" xml:space="preserve">
          <source>Set the background color for the status bar</source>
          <target state="translated">상태 표시 줄의 배경색 설정</target>
        </trans-unit>
        <trans-unit id="01df3bde3d59a190125ff6bb7cc62c804926babb" translate="yes" xml:space="preserve">
          <source>Set the status bar style</source>
          <target state="translated">상태 표시 줄 스타일 설정</target>
        </trans-unit>
        <trans-unit id="9e330f5626eed6df49f7e435933b9aa5469b630f" translate="yes" xml:space="preserve">
          <source>Set this to provide JavaScript that will be injected into the web page when the view loads.</source>
          <target state="translated">뷰가로드 될 때 웹 페이지에 삽입 될 JavaScript를 제공하려면이를 설정하십시오.</target>
        </trans-unit>
        <trans-unit id="76fe04b18d298eb91e501ccd6d09143c05bf449c" translate="yes" xml:space="preserve">
          <source>Set this true while waiting for new data from a refresh.</source>
          <target state="translated">새로 고침에서 새 데이터를 기다리는 동안이 값을 true로 설정하십시오.</target>
        </trans-unit>
        <trans-unit id="e47e4ed9e4a1903e9de964cea83128a236ffe81d" translate="yes" xml:space="preserve">
          <source>Set this when offset is needed for the loading indicator to show correctly.</source>
          <target state="translated">로딩 표시기가 올바르게 표시 되려면 오프셋이 필요한 경우이를 설정하십시오.</target>
        </trans-unit>
        <trans-unit id="151dbc325adb92c8cb8f12672f5159523d19e1f6" translate="yes" xml:space="preserve">
          <source>Set to &lt;code&gt;false&lt;/code&gt; to remove extra font padding intended to make space for certain ascenders / descenders. With some fonts, this padding can make text look slightly misaligned when centered vertically. For best results also set &lt;code&gt;textAlignVertical&lt;/code&gt; to &lt;code&gt;center&lt;/code&gt;. Default is true.</source>
          <target state="translated">특정 어 센더 / 하강 인을위한 공간을 만들기 위해 추가 글꼴 패딩을 제거 하려면 &lt;code&gt;false&lt;/code&gt; 로 설정하십시오 . 일부 글꼴의 경우이 패딩은 세로 중앙에있을 때 텍스트가 약간 정렬되지 않은 것처럼 보일 수 있습니다. 최상의 결과를 얻으려면 &lt;code&gt;textAlignVertical&lt;/code&gt; 을 &lt;code&gt;center&lt;/code&gt; 로 설정하십시오 . 기본값은 true입니다.</target>
        </trans-unit>
        <trans-unit id="1238a993d6f232aacfaf4ae7bbc4a807f6fb33b5" translate="yes" xml:space="preserve">
          <source>Set to true to add the ripple effect to the foreground of the view, instead of the background. This is useful if one of your child views has a background of its own, or you're e.g. displaying images, and you don't want the ripple to be covered by them.</source>
          <target state="translated">배경 대신보기의 전경에 잔물결 효과를 추가하려면 true로 설정하십시오. 이 방법은 자녀보기 중 하나에 자체 배경이 있거나 이미지를 표시하는 경우 잔물결이 이미지에 포함되지 않도록하려는 경우에 유용합니다.</target>
        </trans-unit>
        <trans-unit id="fe81dbe7b791f22dc0a8a4f8f880daabb793be71" translate="yes" xml:space="preserve">
          <source>Set up React Native dependencies and directory structure.</source>
          <target state="translated">React Native 종속성 및 디렉토리 구조를 설정하십시오.</target>
        </trans-unit>
        <trans-unit id="868713e5bbfa6702d7a54177d67b6abcaae003fe" translate="yes" xml:space="preserve">
          <source>Set whether Geolocation is enabled in the &lt;code&gt;WebView&lt;/code&gt;. The default value is &lt;code&gt;false&lt;/code&gt;. Used only in Android.</source>
          <target state="translated">&lt;code&gt;WebView&lt;/code&gt; 에서 위치 정보 사용 여부를 설정하십시오 . 기본값은 &lt;code&gt;false&lt;/code&gt; 입니다. Android에서만 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="d8ef5004eb5f1562c51128e61ff6f6be0a5edfac" translate="yes" xml:space="preserve">
          <source>Sets a function to use to pre-process a style property value. This is used internally to process color and transform values. You should not use this unless you really know what you are doing and have exhausted other options.</source>
          <target state="translated">스타일 속성 값을 사전 처리하는 데 사용할 함수를 설정합니다. 내부적으로 색상을 처리하고 값을 변환하는 데 사용됩니다. 자신이하고있는 일을 정말로 알고 있고 다른 옵션을 다 써본 적이 없다면 이것을 사용해서는 안됩니다.</target>
        </trans-unit>
        <trans-unit id="78f1653f76894aa101ff949f676f6c6515e021a7" translate="yes" xml:space="preserve">
          <source>Sets an image for the thumb. Only static images are supported.</source>
          <target state="translated">엄지 손가락의 이미지를 설정합니다. 정적 이미지 만 지원됩니다.</target>
        </trans-unit>
        <trans-unit id="b244aecda13d0b95eb8bf978bb286ed4aafe1635" translate="yes" xml:space="preserve">
          <source>Sets configuration options that will be used in all location requests.</source>
          <target state="translated">모든 위치 요청에 사용될 구성 옵션을 설정합니다.</target>
        </trans-unit>
        <trans-unit id="ecbb65064159e93c16eb523e65b3c39ecc5c0de9" translate="yes" xml:space="preserve">
          <source>Sets possible actions on the toolbar as part of the action menu. These are displayed as icons or text on the right side of the widget. If they don't fit they are placed in an 'overflow' menu.</source>
          <target state="translated">도구 모음에서 가능한 조치를 조치 메뉴의 일부로 설정합니다. 이들은 위젯의 오른쪽에 아이콘 또는 텍스트로 표시됩니다. 맞지 않으면 '오버플로'메뉴에 배치됩니다.</target>
        </trans-unit>
        <trans-unit id="c87ff4f4fcc827caf2c291115a0130f5e96b575d" translate="yes" xml:space="preserve">
          <source>Sets the badge number for the app icon on the home screen</source>
          <target state="translated">홈 화면에서 앱 아이콘의 배지 번호를 설정합니다</target>
        </trans-unit>
        <trans-unit id="2a48b744899a032c5f3d1d2ade27641256ee021c" translate="yes" xml:space="preserve">
          <source>Sets the color of the status bar text.</source>
          <target state="translated">상태 표시 줄 텍스트의 색상을 설정합니다.</target>
        </trans-unit>
        <trans-unit id="4c7aa28902d1162f819e491ea10b97554f7982f4" translate="yes" xml:space="preserve">
          <source>Sets the content inset for the toolbar ending edge.</source>
          <target state="translated">도구 모음 끝 가장자리의 내용 삽입을 설정합니다.</target>
        </trans-unit>
        <trans-unit id="fd760dbe794a035b10de15a19aba0cf61f7604af" translate="yes" xml:space="preserve">
          <source>Sets the content inset for the toolbar starting edge.</source>
          <target state="translated">도구 모음 시작 가장자리의 내용 삽입을 설정합니다.</target>
        </trans-unit>
        <trans-unit id="2357350a349cba4f1ddd74b43255f6193748614e" translate="yes" xml:space="preserve">
          <source>Sets the drop shadow blur radius</source>
          <target state="translated">그림자 흐림 반경을 설정합니다</target>
        </trans-unit>
        <trans-unit id="5e440039bfec1b68c8b3e58d152432a9f0ad1f0e" translate="yes" xml:space="preserve">
          <source>Sets the drop shadow color</source>
          <target state="translated">그림자 색상을 설정합니다</target>
        </trans-unit>
        <trans-unit id="5668c7922681607ec3be71c6fa1b5c65888622b2" translate="yes" xml:space="preserve">
          <source>Sets the drop shadow offset</source>
          <target state="translated">그림자 오프셋을 설정합니다</target>
        </trans-unit>
        <trans-unit id="8ca9e5f817e93391fbe081fe31e0b08beeb9ef79" translate="yes" xml:space="preserve">
          <source>Sets the drop shadow opacity (multiplied by the color's alpha component)</source>
          <target state="translated">그림자 불투명도를 설정합니다 (색의 알파 성분을 곱한 값).</target>
        </trans-unit>
        <trans-unit id="6127983e45cd88450fc61e1bdfe0414329823a9d" translate="yes" xml:space="preserve">
          <source>Sets the navigation icon.</source>
          <target state="translated">탐색 아이콘을 설정합니다.</target>
        </trans-unit>
        <trans-unit id="349053aee58f4eadeaf3c2c06c6f507891e62650" translate="yes" xml:space="preserve">
          <source>Sets the number of lines for a &lt;code&gt;TextInput&lt;/code&gt;. Use it with multiline set to &lt;code&gt;true&lt;/code&gt; to be able to fill the lines.</source>
          <target state="translated">&lt;code&gt;TextInput&lt;/code&gt; 의 행수를 설정합니다 . 여러 줄 을 &lt;code&gt;true&lt;/code&gt; 로 설정 하여 사용하면 줄을 채울 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d3711ac7600c90b862d7efc7a1530bd2e38f3418" translate="yes" xml:space="preserve">
          <source>Sets the overflow icon.</source>
          <target state="translated">오버플로 아이콘을 설정합니다.</target>
        </trans-unit>
        <trans-unit id="ab16e035fa066f6d21ce73f50ff382ed6abf73ce" translate="yes" xml:space="preserve">
          <source>Sets the return key to the label. Use it instead of &lt;code&gt;returnKeyType&lt;/code&gt;.</source>
          <target state="translated">리턴 키를 레이블로 설정합니다. &lt;code&gt;returnKeyType&lt;/code&gt; 대신 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="8d72b85f2739932e7db4a0a7f43db1f6028449cb" translate="yes" xml:space="preserve">
          <source>Sets the toolbar logo.</source>
          <target state="translated">툴바 로고를 설정합니다.</target>
        </trans-unit>
        <trans-unit id="62ced106d55ffba15502328ca28c714767987094" translate="yes" xml:space="preserve">
          <source>Sets the toolbar subtitle color.</source>
          <target state="translated">툴바 자막 색상을 설정합니다.</target>
        </trans-unit>
        <trans-unit id="13b2a7f28f7a55435aadeb8fdebb11ee008a2649" translate="yes" xml:space="preserve">
          <source>Sets the toolbar subtitle.</source>
          <target state="translated">툴바 자막을 설정합니다.</target>
        </trans-unit>
        <trans-unit id="a1a0cd5d23b11fe8ebf96bae61f043dc705ca732" translate="yes" xml:space="preserve">
          <source>Sets the toolbar title color.</source>
          <target state="translated">툴바 제목 색상을 설정합니다.</target>
        </trans-unit>
        <trans-unit id="137b0a1497a6489c27396f256d62186169783c9e" translate="yes" xml:space="preserve">
          <source>Sets the toolbar title.</source>
          <target state="translated">툴바 제목을 설정합니다.</target>
        </trans-unit>
        <trans-unit id="d69b1eecd5ccc8aa60e35cb44153fe4dd9db589d" translate="yes" xml:space="preserve">
          <source>Sets the user-agent for the &lt;code&gt;WebView&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;WebView&lt;/code&gt; 사용자 에이전트를 설정합니다 .</target>
        </trans-unit>
        <trans-unit id="a37848745e8f189bad8cd6e89d761299f67c0c70" translate="yes" xml:space="preserve">
          <source>Sets the value for a &lt;code&gt;key&lt;/code&gt; and invokes a callback upon completion. Returns a &lt;code&gt;Promise&lt;/code&gt; object.</source>
          <target state="translated">&lt;code&gt;key&lt;/code&gt; 값을 설정하고 완료시 콜백을 호출합니다. &lt;code&gt;Promise&lt;/code&gt; 객체를 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="821ef1f69a83191e3767f38775f1c8f893396eb0" translate="yes" xml:space="preserve">
          <source>Setter declaration requirements for methods annotated with &lt;code&gt;@ReactPropGroup&lt;/code&gt; are different than for &lt;code&gt;@ReactProp&lt;/code&gt;, please refer to the &lt;code&gt;@ReactPropGroup&lt;/code&gt; annotation class docs for more information about it.</source>
          <target state="translated">주석 방법에 대한 선언을 요구 세터 &lt;code&gt;@ReactPropGroup&lt;/code&gt; 가 보다 다른 &lt;code&gt;@ReactProp&lt;/code&gt; 의 참조하시기 바랍니다 &lt;code&gt;@ReactPropGroup&lt;/code&gt; 의 그것에 대한 자세한 내용은 주석 클래스 문서.</target>
        </trans-unit>
        <trans-unit id="4e11d55780ed7b3c19a57a6aec4aa6c3881e8176" translate="yes" xml:space="preserve">
          <source>Setting &lt;code&gt;margin&lt;/code&gt; has the same effect as setting each of &lt;code&gt;marginTop&lt;/code&gt;, &lt;code&gt;marginLeft&lt;/code&gt;, &lt;code&gt;marginBottom&lt;/code&gt;, and &lt;code&gt;marginRight&lt;/code&gt;. See &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/margin&quot;&gt;https://developer.mozilla.org/en-US/docs/Web/CSS/margin&lt;/a&gt; for more details.</source>
          <target state="translated">설정 &lt;code&gt;margin&lt;/code&gt; 각각 설정하는 것과 같은 효과가 &lt;code&gt;marginTop&lt;/code&gt; , &lt;code&gt;marginLeft&lt;/code&gt; , &lt;code&gt;marginBottom&lt;/code&gt; 및 &lt;code&gt;marginRight&lt;/code&gt; 을 . 자세한 내용은 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/margin&quot;&gt;https://developer.mozilla.org/en-US/docs/Web/CSS/margin&lt;/a&gt; 을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="a782a0ddfde20f568358f293347866e85c970405" translate="yes" xml:space="preserve">
          <source>Setting &lt;code&gt;marginHorizontal&lt;/code&gt; has the same effect as setting both &lt;code&gt;marginLeft&lt;/code&gt; and &lt;code&gt;marginRight&lt;/code&gt;.</source>
          <target state="translated">설정 &lt;code&gt;marginHorizontal&lt;/code&gt; 은 모두 설정하는 것과 같은 효과가 &lt;code&gt;marginLeft&lt;/code&gt; 및 &lt;code&gt;marginRight&lt;/code&gt; 을 .</target>
        </trans-unit>
        <trans-unit id="c302e69054c42451103fb84e0793cd5996cae036" translate="yes" xml:space="preserve">
          <source>Setting &lt;code&gt;marginVertical&lt;/code&gt; has the same effect as setting both &lt;code&gt;marginTop&lt;/code&gt; and &lt;code&gt;marginBottom&lt;/code&gt;.</source>
          <target state="translated">설정 &lt;code&gt;marginVertical&lt;/code&gt; 은 모두 설정하는 것과 같은 효과가 &lt;code&gt;marginTop&lt;/code&gt; 및 &lt;code&gt;marginBottom&lt;/code&gt; 을 .</target>
        </trans-unit>
        <trans-unit id="b7862aa8bf686daa6ea868b004619cdf3fa460fa" translate="yes" xml:space="preserve">
          <source>Setting &lt;code&gt;padding&lt;/code&gt; has the same effect as setting each of &lt;code&gt;paddingTop&lt;/code&gt;, &lt;code&gt;paddingBottom&lt;/code&gt;, &lt;code&gt;paddingLeft&lt;/code&gt;, and &lt;code&gt;paddingRight&lt;/code&gt;. See &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/padding&quot;&gt;https://developer.mozilla.org/en-US/docs/Web/CSS/padding&lt;/a&gt; for more details.</source>
          <target state="translated">설정 &lt;code&gt;padding&lt;/code&gt; 각각 설정하는 것과 동일한 효과를 갖는다 &lt;code&gt;paddingTop&lt;/code&gt; , &lt;code&gt;paddingBottom&lt;/code&gt; , &lt;code&gt;paddingLeft&lt;/code&gt; 및 &lt;code&gt;paddingRight&lt;/code&gt; 를 . 자세한 내용은 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/padding&quot;&gt;https://developer.mozilla.org/en-US/docs/Web/CSS/padding&lt;/a&gt; 을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="1f1ad8878c69f5d27750ade539c1745d60304142" translate="yes" xml:space="preserve">
          <source>Setting &lt;code&gt;paddingHorizontal&lt;/code&gt; is like setting both of &lt;code&gt;paddingLeft&lt;/code&gt; and &lt;code&gt;paddingRight&lt;/code&gt;.</source>
          <target state="translated">설정 &lt;code&gt;paddingHorizontal&lt;/code&gt; 은 모두 설정처럼 &lt;code&gt;paddingLeft&lt;/code&gt; 및 &lt;code&gt;paddingRight&lt;/code&gt; 을 .</target>
        </trans-unit>
        <trans-unit id="7286d4d2beeee7f9772d787b3719bdf3d6a0d4f7" translate="yes" xml:space="preserve">
          <source>Setting &lt;code&gt;paddingVertical&lt;/code&gt; is like setting both of &lt;code&gt;paddingTop&lt;/code&gt; and &lt;code&gt;paddingBottom&lt;/code&gt;.</source>
          <target state="translated">설정 &lt;code&gt;paddingVertical&lt;/code&gt; 은 모두 설정처럼 &lt;code&gt;paddingTop&lt;/code&gt; 및 &lt;code&gt;paddingBottom&lt;/code&gt; 을 .</target>
        </trans-unit>
        <trans-unit id="a11a6fa3fa715bc8693a8315ab4c5cbc60e32b21" translate="yes" xml:space="preserve">
          <source>Setting dimensions this way is common for components that should always render at exactly the same size, regardless of screen dimensions.</source>
          <target state="translated">이 방법으로 치수를 설정하는 것은 화면 치수와 상관없이 항상 정확히 동일한 크기로 렌더링해야하는 구성 요소에 공통입니다.</target>
        </trans-unit>
        <trans-unit id="46d0e27630fb8d75c9ae0b84067b362e742620f5" translate="yes" xml:space="preserve">
          <source>Setting up gradle variables</source>
          <target state="translated">gradle 변수 설정</target>
        </trans-unit>
        <trans-unit id="1285ada3ff4f2dc7ed11c1d69bbef2df5ee5a05a" translate="yes" xml:space="preserve">
          <source>Setting up your development environment can be somewhat tedious if you're new to Android development. If you're already familiar with Android development, there are a few things you may need to configure. In either case, please make sure to carefully follow the next few steps.</source>
          <target state="translated">Android 개발을 처음 사용하는 경우 개발 환경을 설정하는 것이 다소 지루할 수 있습니다. 이미 Android 개발에 익숙하다면 몇 가지 구성해야 할 사항이 있습니다. 두 경우 모두 다음 몇 단계를 신중하게 따르십시오.</target>
        </trans-unit>
        <trans-unit id="c7f73bb54d928922c3838bb789ee9fb8a5b1eb37" translate="yes" xml:space="preserve">
          <source>Settings</source>
          <target state="translated">Settings</target>
        </trans-unit>
        <trans-unit id="f4de2b87cdd8b3dd83b4776897d3f28647b71808" translate="yes" xml:space="preserve">
          <source>Settings.clearWatch()</source>
          <target state="translated">Settings.clearWatch()</target>
        </trans-unit>
        <trans-unit id="b90417499b30c8956dd9ce1786bf9dbc94f071d2" translate="yes" xml:space="preserve">
          <source>Settings.get()</source>
          <target state="translated">Settings.get()</target>
        </trans-unit>
        <trans-unit id="eb4645d58a59a6e642217f66792b8939b01636a3" translate="yes" xml:space="preserve">
          <source>Settings.set()</source>
          <target state="translated">Settings.set()</target>
        </trans-unit>
        <trans-unit id="90e10c020fb166cf50f046118c3095e24b3eb8a0" translate="yes" xml:space="preserve">
          <source>Settings.watchKeys()</source>
          <target state="translated">Settings.watchKeys()</target>
        </trans-unit>
        <trans-unit id="723fca1b96960f297a3574fc7a5605220dff06d6" translate="yes" xml:space="preserve">
          <source>Shadow Props</source>
          <target state="translated">그림자 소품</target>
        </trans-unit>
        <trans-unit id="2c7663474af451a97e6349d97385a92fe925ad03" translate="yes" xml:space="preserve">
          <source>Shadow Props#shadowColor</source>
          <target state="translated">그림자 소품</target>
        </trans-unit>
        <trans-unit id="3d99d9b39e2f937a49e69b0bb0268b3def3a0a5c" translate="yes" xml:space="preserve">
          <source>Shadow Props#shadowOffset</source>
          <target state="translated">그림자 소품 #shadowOffset</target>
        </trans-unit>
        <trans-unit id="8a8cfbe24cc9d4945882c024e63820f9357de4ee" translate="yes" xml:space="preserve">
          <source>Shadow Props#shadowOpacity</source>
          <target state="translated">그림자 소품 #shadowOpacity</target>
        </trans-unit>
        <trans-unit id="700535f2c4d0e52463558e2f7b2dcbc469dc194b" translate="yes" xml:space="preserve">
          <source>Shadow Props#shadowRadius</source>
          <target state="translated">그림자 소품 #shadowRadius</target>
        </trans-unit>
        <trans-unit id="16a29d3d4dd04ed1a23843e00962b1db3599d5c1" translate="yes" xml:space="preserve">
          <source>Shadow Props...</source>
          <target state="translated">그림자 소품 ...</target>
        </trans-unit>
        <trans-unit id="09ca55ca52d207f2cc1d9339e0226a88e9e96e2f" translate="yes" xml:space="preserve">
          <source>Share</source>
          <target state="translated">Share</target>
        </trans-unit>
        <trans-unit id="96d808ed7c8f95b54ce048ea28e5b0f8a9f2b5e2" translate="yes" xml:space="preserve">
          <source>Share.dismissedAction()</source>
          <target state="translated">Share.dismissedAction()</target>
        </trans-unit>
        <trans-unit id="9840fdaf34a2b01b1215883944511876db74df18" translate="yes" xml:space="preserve">
          <source>Share.share()</source>
          <target state="translated">Share.share()</target>
        </trans-unit>
        <trans-unit id="e6b8d8ceb87cd7b8e1a3fe1ab3c02787180a2b07" translate="yes" xml:space="preserve">
          <source>Share.sharedAction()</source>
          <target state="translated">Share.sharedAction()</target>
        </trans-unit>
        <trans-unit id="07778c8db6d3cda83dd750f4ad7fb483328592e4" translate="yes" xml:space="preserve">
          <source>Shell Command Unresponsive Exception</source>
          <target state="translated">셸 명령 무응답 예외</target>
        </trans-unit>
        <trans-unit id="67153da050c03b6efabb8a5189fe4ea8c01762ce" translate="yes" xml:space="preserve">
          <source>Show or hide the status bar</source>
          <target state="translated">상태 표시 줄 표시 또는 숨기기</target>
        </trans-unit>
        <trans-unit id="1075057ff0100516e3c4aa8f51f52a1a95d8ed04" translate="yes" xml:space="preserve">
          <source>Show the indicator.</source>
          <target state="translated">표시기를 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="d993fbafe18223732be15fd565e7e5b74a3a7755" translate="yes" xml:space="preserve">
          <source>Similar to &lt;code&gt;viewAreaPercentThreshold&lt;/code&gt;, but considers the percent of the item that is visible, rather than the fraction of the viewable area it covers.</source>
          <target state="translated">유사 &lt;code&gt;viewAreaPercentThreshold&lt;/code&gt; , 오히려 그것을 커버 볼 수있는 영역의 비율보다, 볼 수있는 항목의 비율을 고려한다.</target>
        </trans-unit>
        <trans-unit id="0258e46ad994fb3800faae223f283914319ce3b4" translate="yes" xml:space="preserve">
          <source>Similarly to &lt;code&gt;source&lt;/code&gt;, this property represents the resource used to render the loading indicator for the image, displayed until image is ready to be displayed, typically after when it got downloaded from network.</source>
          <target state="translated">&lt;code&gt;source&lt;/code&gt; 와 유사하게이 속성은 이미지가 표시 될 준비가 될 때까지 (일반적으로 네트워크에서 다운로드 한 후) 표시되는 이미지의로드 표시기를 렌더링하는 데 사용되는 리소스를 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="817386305f38eb47e659c60313e3edae5043dc49" translate="yes" xml:space="preserve">
          <source>Similarly, if an operation may take a long time to complete, the native module should not block and can specify it's own queue to run operations on. For example, the &lt;code&gt;RCTAsyncLocalStorage&lt;/code&gt; module creates its own queue so the React queue isn't blocked waiting on potentially slow disk access:</source>
          <target state="translated">마찬가지로 작업을 완료하는 데 시간이 오래 걸릴 수있는 경우 기본 모듈은 작업을 실행하기 위해 자체 대기열을 차단하고 지정할 수 없습니다. 예를 들어 &lt;code&gt;RCTAsyncLocalStorage&lt;/code&gt; 모듈은 자체 대기열을 생성하므로 잠재적으로 느린 디스크 액세스를 기다리는 동안 React 대기열이 차단되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="e251571f86f7d8f659f99f68d14d516681105af9" translate="yes" xml:space="preserve">
          <source>Similarly, you can happily scroll up and down through a &lt;code&gt;ScrollView&lt;/code&gt; when the JavaScript thread is locked up because the &lt;code&gt;ScrollView&lt;/code&gt; lives on the main thread. The scroll events are dispatched to the JS thread, but their receipt is not necessary for the scroll to occur.</source>
          <target state="translated">마찬가지로, &lt;code&gt;ScrollView&lt;/code&gt; 가 기본 스레드에 있기 때문에 JavaScript 스레드가 잠겨 있으면 &lt;code&gt;ScrollView&lt;/code&gt; 를 통해 위아래로 행복하게 스크롤 할 수 있습니다 . 스크롤 이벤트는 JS 스레드로 전달되지만 스크롤이 발생하기 위해 수신 할 필요는 없습니다.</target>
        </trans-unit>
        <trans-unit id="b12147170a3013816226454438a9889640966213" translate="yes" xml:space="preserve">
          <source>Similarly, you can implement &lt;code&gt;shouldComponentUpdate&lt;/code&gt; and indicate the exact conditions under which you would like the component to re-render. If you write pure components (where the return value of the render function is entirely dependent on props and state), you can leverage PureComponent to do this for you. Once again, immutable data structures are useful to keep this fast -- if you have to do a deep comparison of a large list of objects, it may be that re-rendering your entire component would be quicker, and it would certainly require less code.</source>
          <target state="translated">마찬가지로 &lt;code&gt;shouldComponentUpdate&lt;/code&gt; 를 구현 하고 구성 요소를 다시 렌더링 할 정확한 조건을 표시 할 수 있습니다 . 렌더 함수의 반환 값이 소품과 상태에 전적으로 의존하는 순수 컴포넌트를 작성하는 경우 PureComponent를 사용하여이를 수행 할 수 있습니다. 다시 한번, 불변의 데이터 구조는 이것을 빠르게 유지하는 데 유용합니다. 큰 객체 목록을 심도있게 비교 해야하는 경우 전체 구성 요소를 다시 렌더링하는 것이 더 빠를 수 있으며 코드가 덜 필요합니다. .</target>
        </trans-unit>
        <trans-unit id="b0ec13a382c7ff03b6c12e7dc8cf2865adb3b4b1" translate="yes" xml:space="preserve">
          <source>Simple Examples:</source>
          <target state="translated">간단한 예 :</target>
        </trans-unit>
        <trans-unit id="8c37359a3663e0cdf12183043049304a94b3c3b2" translate="yes" xml:space="preserve">
          <source>Simply commenting that the issue still exists is not very compelling (it's rare for critical, release blocking issues to have no activity for two months!). In order to make a good case for reopening the issue, you may need to do a bit of work:</source>
          <target state="translated">문제가 여전히 존재한다고 간단히 언급하는 것은 그리 매력적이지 않습니다 (중요한 릴리스 차단 문제가 2 개월 동안 활동하지 않는 경우는 드!니다!). 문제를 다시 여는 데 도움이 되려면 약간의 작업이 필요할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="32cf148f656cb7661621abbedc2f36a32dc1d1c8" translate="yes" xml:space="preserve">
          <source>Simply run the following in a terminal:</source>
          <target state="translated">터미널에서 간단히 다음을 실행하십시오.</target>
        </trans-unit>
        <trans-unit id="59d72f3985f6891a7ae1709b4162c8711f700250" translate="yes" xml:space="preserve">
          <source>Simply start using React Native. Go through the &lt;a href=&quot;http://facebook.github.io/react-native/docs/getting-started.html&quot;&gt;Getting Started&lt;/a&gt; guide. Does everything work as expected? If not, we're always looking for improvements. Let us know by &lt;a href=&quot;http://facebook.github.io/react-native/docs/contributing.html#reporting-new-issues&quot;&gt;opening an issue&lt;/a&gt;.</source>
          <target state="translated">React Native를 사용하기 만하면됩니다. 관통 가기 &lt;a href=&quot;http://facebook.github.io/react-native/docs/getting-started.html&quot;&gt;시작&lt;/a&gt; 가이드. 모든 것이 예상대로 작동합니까? 그렇지 않은 경우 항상 개선을 찾고 있습니다. &lt;a href=&quot;http://facebook.github.io/react-native/docs/contributing.html#reporting-new-issues&quot;&gt;이슈&lt;/a&gt; 를 열어 알려주세요 .</target>
        </trans-unit>
        <trans-unit id="7357966bc6d557009edd5454aa4c04f3134562fe" translate="yes" xml:space="preserve">
          <source>Simply wrap your top level view with a &lt;code&gt;SafeAreaView&lt;/code&gt; with a &lt;code&gt;flex: 1&lt;/code&gt; style applied to it. You may also want to use a background color that matches your application's design.</source>
          <target state="translated">&lt;code&gt;flex: 1&lt;/code&gt; 스타일이 적용된 &lt;code&gt;SafeAreaView&lt;/code&gt; 로 최상위 뷰를 간단히 감싸십시오 . 응용 프로그램 디자인과 일치하는 배경색을 사용할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="0fdaebb56ae674fc7bd439ed65ef80413580f78c" translate="yes" xml:space="preserve">
          <source>Since &lt;code&gt;Object.observe&lt;/code&gt; was deprecated in recent browsers, you may have to open the file from the Google Chrome Tracing tool. You can do so by:</source>
          <target state="translated">이후 &lt;code&gt;Object.observe&lt;/code&gt; 는 최근 브라우저에서 사용되지 않습니다, 당신은 구글 크롬 추적 도구에서 파일을 열 수 있습니다. 당신은 그렇게 할 수 있습니다 :</target>
        </trans-unit>
        <trans-unit id="bfbc306e997a250786539c4b9ac3a624fdc9fef2" translate="yes" xml:space="preserve">
          <source>Since &lt;code&gt;pointerEvents&lt;/code&gt; does not affect layout/appearance, and we are already deviating from the spec by adding additional modes, we opt to not include &lt;code&gt;pointerEvents&lt;/code&gt; on &lt;code&gt;style&lt;/code&gt;. On some platforms, we would need to implement it as a &lt;code&gt;className&lt;/code&gt; anyways. Using &lt;code&gt;style&lt;/code&gt; or not is an implementation detail of the platform.</source>
          <target state="translated">이후 &lt;code&gt;pointerEvents&lt;/code&gt; 이 레이아웃 / 모양에 영향을주지 않으며, 우리가 이미 추가 모드를 추가하여 사양에서 벗어나는, 우리는 포함하지 않도록 선택 &lt;code&gt;pointerEvents&lt;/code&gt; 에 &lt;code&gt;style&lt;/code&gt; . 어떤 플랫폼에서는 어쨌든 &lt;code&gt;className&lt;/code&gt; 으로 구현해야합니다 . &lt;code&gt;style&lt;/code&gt; 사용 여부는 플랫폼의 구현 세부 사항입니다.</target>
        </trans-unit>
        <trans-unit id="e913f4671cbcaaa450c5621688fc3bf60462e195" translate="yes" xml:space="preserve">
          <source>Since all our native react views are subclasses of &lt;code&gt;UIView&lt;/code&gt;, most style attributes will work like you would expect out of the box. Some components will want a default style, however, for example &lt;code&gt;UIDatePicker&lt;/code&gt; which is a fixed size. This default style is important for the layout algorithm to work as expected, but we also want to be able to override the default style when using the component. &lt;code&gt;DatePickerIOS&lt;/code&gt; does this by wrapping the native component in an extra view, which has flexible styling, and using a fixed style (which is generated with constants passed in from native) on the inner native component:</source>
          <target state="translated">모든 기본 반응보기는 &lt;code&gt;UIView&lt;/code&gt; 의 하위 클래스 이므로 대부분의 스타일 속성은 기본적으로 예상대로 작동합니다. 그러나 일부 구성 요소는 기본 스타일을 원할 것입니다 (예 : 고정 크기 인 &lt;code&gt;UIDatePicker&lt;/code&gt; ) . 이 기본 스타일은 레이아웃 알고리즘이 예상대로 작동하는 데 중요하지만 구성 요소를 사용할 때 기본 스타일을 재정의 할 수도 있습니다. &lt;code&gt;DatePickerIOS&lt;/code&gt; 는 유연한 스타일링을 제공하는 추가보기에서 기본 구성 요소를 래핑하고 내부 기본 구성 요소에서 고정 스타일 (기본에서 전달 된 상수로 생성됨)을 사용하여이를 수행합니다.</target>
        </trans-unit>
        <trans-unit id="939e35656b99aa4ec4e1b6286c760ba8d738c06b" translate="yes" xml:space="preserve">
          <source>Since it accepts &lt;code&gt;any&lt;/code&gt; value, you can also use it to return platform specific component, like below:</source>
          <target state="translated">그것을 받아들이 때문에 &lt;code&gt;any&lt;/code&gt; 값을, 당신은 또한 다음과 같은 플랫폼 특정 구성 요소를 반환하는 데 사용할 수 있습니다 :</target>
        </trans-unit>
        <trans-unit id="9b3af3d816cb0bcca184faf0dc2b97b26bff7e46" translate="yes" xml:space="preserve">
          <source>Size of the indicator (default is 'small'). Passing a number to the size prop is only supported on Android.</source>
          <target state="translated">표시기의 크기 (기본값은 '작음') 크기 소품에 숫자를 전달하는 것은 Android에서만 지원됩니다.</target>
        </trans-unit>
        <trans-unit id="67440a7d94f5e86b733538c80f15f8cc2b9f1389" translate="yes" xml:space="preserve">
          <source>Size of the refresh indicator, see RefreshControl.SIZE.</source>
          <target state="translated">새로 고침 표시기의 크기는 RefreshControl.SIZE를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="6569241afc63ce63f410215eb457980569c6fdfc" translate="yes" xml:space="preserve">
          <source>Slide animation</source>
          <target state="translated">슬라이드 애니메이션</target>
        </trans-unit>
        <trans-unit id="aa5db7d82232ee34651eb5adea59b01c839eb843" translate="yes" xml:space="preserve">
          <source>Slider</source>
          <target state="translated">Slider</target>
        </trans-unit>
        <trans-unit id="3293eb10be7f20734dc4056c7a723502bab888f8" translate="yes" xml:space="preserve">
          <source>Slider#disabled</source>
          <target state="translated">Slider#disabled</target>
        </trans-unit>
        <trans-unit id="dbd2466ece0e781b4ad4dc51cc581e4f57a7054d" translate="yes" xml:space="preserve">
          <source>Slider#maximumTrackImage</source>
          <target state="translated">Slider#maximumTrackImage</target>
        </trans-unit>
        <trans-unit id="b49b1fecbce33a5c851a9fd2b7f2098c539d39f0" translate="yes" xml:space="preserve">
          <source>Slider#maximumTrackTintColor</source>
          <target state="translated">Slider#maximumTrackTintColor</target>
        </trans-unit>
        <trans-unit id="b9529aa7ce34023e83cad98d57ec8274ea4fe790" translate="yes" xml:space="preserve">
          <source>Slider#maximumValue</source>
          <target state="translated">Slider#maximumValue</target>
        </trans-unit>
        <trans-unit id="918ee827b4bf5123ea7efd455ab4ba6dfd6979f9" translate="yes" xml:space="preserve">
          <source>Slider#minimumTrackImage</source>
          <target state="translated">Slider#minimumTrackImage</target>
        </trans-unit>
        <trans-unit id="86437a628cbe864a0f5bcec6e98808b9d009c195" translate="yes" xml:space="preserve">
          <source>Slider#minimumTrackTintColor</source>
          <target state="translated">Slider#minimumTrackTintColor</target>
        </trans-unit>
        <trans-unit id="cd7149df36b37c94a64ebdf99bddb2ec75838bf9" translate="yes" xml:space="preserve">
          <source>Slider#minimumValue</source>
          <target state="translated">Slider#minimumValue</target>
        </trans-unit>
        <trans-unit id="a970b1ea206ae3630a7b47f0d602c4e67e54ec29" translate="yes" xml:space="preserve">
          <source>Slider#onSlidingComplete</source>
          <target state="translated">Slider#onSlidingComplete</target>
        </trans-unit>
        <trans-unit id="9b5dcb06f79a8f3bb95152ca9b64c0f68de2161c" translate="yes" xml:space="preserve">
          <source>Slider#onValueChange</source>
          <target state="translated">Slider#onValueChange</target>
        </trans-unit>
        <trans-unit id="4c939df923908c4e4259c6098b60915c3b5aa224" translate="yes" xml:space="preserve">
          <source>Slider#step</source>
          <target state="translated">Slider#step</target>
        </trans-unit>
        <trans-unit id="e896462b29b86005346d8da73d0a43549a7a5da7" translate="yes" xml:space="preserve">
          <source>Slider#style</source>
          <target state="translated">Slider#style</target>
        </trans-unit>
        <trans-unit id="c1b4b2374ecadf43046d8ced513af39fbf83c200" translate="yes" xml:space="preserve">
          <source>Slider#testID</source>
          <target state="translated">Slider#testID</target>
        </trans-unit>
        <trans-unit id="d04779845cd4bad76768fa1b37b622d38674c7f6" translate="yes" xml:space="preserve">
          <source>Slider#thumbImage</source>
          <target state="translated">Slider#thumbImage</target>
        </trans-unit>
        <trans-unit id="a0af9fcd3c0d5f3a4a64a9e195229d2265c79045" translate="yes" xml:space="preserve">
          <source>Slider#thumbTintColor</source>
          <target state="translated">Slider#thumbTintColor</target>
        </trans-unit>
        <trans-unit id="bb9013c0ee09a6688eb42cf27e066094bd28b5f1" translate="yes" xml:space="preserve">
          <source>Slider#trackImage</source>
          <target state="translated">Slider#trackImage</target>
        </trans-unit>
        <trans-unit id="1be3a59747be6cd5f72988402d0aeb7b205d295e" translate="yes" xml:space="preserve">
          <source>Slider#value</source>
          <target state="translated">Slider#value</target>
        </trans-unit>
        <trans-unit id="8532ea10a43677461eced933347956970e112bbf" translate="yes" xml:space="preserve">
          <source>Slow navigator transitions</source>
          <target state="translated">느린 네비게이터 전환</target>
        </trans-unit>
        <trans-unit id="c74fd9714e38b26dbf7f58d75f93cfc977a05ba6" translate="yes" xml:space="preserve">
          <source>Small</source>
          <target state="translated">Small</target>
        </trans-unit>
        <trans-unit id="9032b2d0648f2bcdcc8ac868909e70ceeae0dfc7" translate="yes" xml:space="preserve">
          <source>Small pull requests are much easier to review and more likely to get merged. Make sure the PR does only one thing, otherwise please split it.</source>
          <target state="translated">작은 풀 요청은 검토하기가 훨씬 쉽고 병합 될 가능성이 높습니다. PR이 한 가지만 수행하는지 확인하십시오. 그렇지 않으면 분할하십시오.</target>
        </trans-unit>
        <trans-unit id="cf40e735c580da582b6c52ac4337290613067ebe" translate="yes" xml:space="preserve">
          <source>SmallInverse</source>
          <target state="translated">SmallInverse</target>
        </trans-unit>
        <trans-unit id="784f9f592ec2f155083449344dda0b4379d2b0bb" translate="yes" xml:space="preserve">
          <source>SnapshotViewIOS</source>
          <target state="translated">SnapshotViewIOS</target>
        </trans-unit>
        <trans-unit id="75b8c26caf4fa5c405d4034dccd4c652a38265ae" translate="yes" xml:space="preserve">
          <source>SnapshotViewIOS#onSnapshotReady</source>
          <target state="translated">SnapshotViewIOS#onSnapshotReady</target>
        </trans-unit>
        <trans-unit id="0d4d911cc9172c0be4a44af2c78f71f5f156fd90" translate="yes" xml:space="preserve">
          <source>SnapshotViewIOS#testIdentifier</source>
          <target state="translated">SnapshotViewIOS#testIdentifier</target>
        </trans-unit>
        <trans-unit id="11d58c978549bdf36cbc8bf786f2a687dd509bb4" translate="yes" xml:space="preserve">
          <source>So now we have a native map component that we can control easily from JS, but how do we deal with events from the user, like pinch-zooms or panning to change the visible region?</source>
          <target state="translated">이제 JS에서 쉽게 제어 할 수있는 기본 맵 구성 요소가 있지만 핀치 줌 또는 패닝과 같은 사용자의 이벤트를 처리하여 가시 영역을 변경하는 방법은 무엇입니까?</target>
        </trans-unit>
        <trans-unit id="01d3103f8aee677b523f973184f03507f63bcdda" translate="yes" xml:space="preserve">
          <source>So now we know how to expose native view components that we can control easily from JS, but how do we deal with events from the user, like pinch-zooms or panning? When a native event occurs the native code should issue an event to the JavaScript representation of the View, and the two views are linked with the value returned from the &lt;code&gt;getId()&lt;/code&gt; method.</source>
          <target state="translated">이제 JS에서 쉽게 제어 할 수있는 기본 뷰 구성 요소를 노출하는 방법을 알고 있지만 핀치 줌 또는 패닝과 같은 사용자의 이벤트를 어떻게 처리합니까? 기본 이벤트가 발생하면 기본 코드는보기의 JavaScript 표시에 이벤트를 발행해야하며 두보기는 &lt;code&gt;getId()&lt;/code&gt; 메소드 에서 리턴 된 값과 연결됩니다 .</target>
        </trans-unit>
        <trans-unit id="2827fce32a206ffd39f51b6162ceb3859b3f2269" translate="yes" xml:space="preserve">
          <source>So this code is defining &lt;code&gt;HelloWorldApp&lt;/code&gt;, a new &lt;code&gt;Component&lt;/code&gt;. When you're building a React Native app, you'll be making new components a lot. Anything you see on the screen is some sort of component. A component can be pretty simple - the only thing that's required is a &lt;code&gt;render&lt;/code&gt; function which returns some JSX to render.</source>
          <target state="translated">이 코드는 새로운 &lt;code&gt;Component&lt;/code&gt; &lt;code&gt;HelloWorldApp&lt;/code&gt; 를 정의 하고 있습니다. React Native 앱을 빌드 할 때 새로운 컴포넌트를 많이 만들게됩니다. 화면에 보이는 것은 일종의 구성 요소입니다. 컴포넌트는 매우 단순 할 수 있습니다. 필요한 것은 JSX를 렌더링하기 위해 리턴 하는 &lt;code&gt;render&lt;/code&gt; 함수입니다.</target>
        </trans-unit>
        <trans-unit id="824c1517ba318dee8eac21987c8bc695a68d062c" translate="yes" xml:space="preserve">
          <source>So you have decided to contribute code back to upstream by opening a pull request. You've invested a good chunk of time, and we appreciate it. We will do our best to work with you and get the PR looked at.</source>
          <target state="translated">따라서 풀 요청을 열어 코드를 다시 업스트림에 제공하기로 결정했습니다. 좋은 시간을 투자하셨습니다. 감사합니다. 우리는 당신과 함께 일하고 PR을 볼 수 있도록 최선을 다할 것입니다.</target>
        </trans-unit>
        <trans-unit id="f0f5595bfe088f1b5651ed389c5e0974e1f302c2" translate="yes" xml:space="preserve">
          <source>So you have read through the &lt;a href=&quot;contributing&quot;&gt;contributor's guide&lt;/a&gt; and you're getting ready to send your first pull request. Perhaps you've found an issue in React Native and want to work with the maintainers to land a fix. Here's what you can expect to happen when you open an issue or send a pull request.</source>
          <target state="translated">&lt;a href=&quot;contributing&quot;&gt;기고자 안내서를&lt;/a&gt; 읽고 첫 번째 풀 요청을 보낼 준비가되었습니다. 아마도 React Native에서 문제를 발견했고 관리자와 협력하여 문제를 해결하려고합니다. 이슈를 열거 나 풀 요청을 보낼 때 발생할 수있는 상황은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="4fe7e4c7de6ce13ba9cc5dd5220e5d5441de849f" translate="yes" xml:space="preserve">
          <source>Software keyboard takes almost half of the screen. If you have interactive elements that can get covered by the keyboard, make sure they are still accessible by using the &lt;a href=&quot;keyboardavoidingview&quot;&gt;&lt;code&gt;KeyboardAvoidingView&lt;/code&gt; component&lt;/a&gt;.</source>
          <target state="translated">소프트웨어 키보드는 화면의 거의 절반을 차지합니다. 키보드로 덮을 수있는 대화식 요소가있는 경우 &lt;a href=&quot;keyboardavoidingview&quot;&gt; &lt;code&gt;KeyboardAvoidingView&lt;/code&gt; 구성 요소&lt;/a&gt; 를 사용하여 여전히 액세스 가능한 요소 인지 확인하십시오 .</target>
        </trans-unit>
        <trans-unit id="4cd3dd14c8723b7b004f09e91fcb22fc58a54ae5" translate="yes" xml:space="preserve">
          <source>Solving this is one of the main goals behind the new &lt;a href=&quot;navigation&quot;&gt;React Navigation&lt;/a&gt; library. The views in React Navigation use native components and the &lt;a href=&quot;animated&quot;&gt;&lt;code&gt;Animated&lt;/code&gt;&lt;/a&gt; library to deliver 60 FPS animations that are run on the native thread.</source>
          <target state="translated">이를 해결하는 것은 새로운 &lt;a href=&quot;navigation&quot;&gt;React Navigation&lt;/a&gt; 라이브러리 의 주요 목표 중 하나입니다 . React Navigation의보기는 기본 구성 요소 및 &lt;a href=&quot;animated&quot;&gt; &lt;code&gt;Animated&lt;/code&gt; &lt;/a&gt; 라이브러리를 사용하여 기본 스레드에서 실행되는 60 개의 FPS 애니메이션을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="581d00aebe1d33523f4c674e9bb77378752aea1c" translate="yes" xml:space="preserve">
          <source>Some caveats:</source>
          <target state="translated">몇 가지주의 사항 :</target>
        </trans-unit>
        <trans-unit id="cf1ead0ff4f080596646d13e7bd5b362e2659c63" translate="yes" xml:space="preserve">
          <source>Some devices and some emulator configurations may not work with the tests. We do maintain an emulator configuration that works, as the standard for testing. To run this emulator config:</source>
          <target state="translated">일부 장치 및 일부 에뮬레이터 구성은 테스트에서 작동하지 않을 수 있습니다. 테스트 표준으로 작동하는 에뮬레이터 구성을 유지합니다. 이 에뮬레이터 구성을 실행하려면</target>
        </trans-unit>
        <trans-unit id="db20bf8c13e015ab68d8192cdf64c8bc94e6712b" translate="yes" xml:space="preserve">
          <source>Some features may not be a good fit for the core React Native library. This is usually the case for *&lt;em&gt;new modules&lt;/em&gt; that Facebook does not use in production. In this case, a maintainer will explain that this should be released to npm as a separate module, allowing users to easily pull in the module in their projects.</source>
          <target state="translated">일부 기능은 핵심 React Native 라이브러리에 적합하지 않을 수 있습니다. 이는 일반적으로 Facebook에서 프로덕션에서 사용하지 않는 &lt;em&gt;새 모듈&lt;/em&gt; 의 경우입니다 . 이 경우 관리자는이 모듈을 별도의 모듈로 npm에 릴리스해야하므로 사용자가 프로젝트에서 모듈을 쉽게 가져올 수 있도록합니다.</target>
        </trans-unit>
        <trans-unit id="c4c8265b70880d8cf3fc47f6b5c6443721f3050e" translate="yes" xml:space="preserve">
          <source>Some functionality that can be performed with this instance is:</source>
          <target state="translated">이 인스턴스로 수행 할 수있는 일부 기능은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="dfc1fa7b37d49ae10b93a2d78ad3b2e21a072822" translate="yes" xml:space="preserve">
          <source>Some issues need additional information in order to reproduce them. Maintainers should explain what additional information is needed, after adding the 'Needs more information' label.</source>
          <target state="translated">일부 문제는이를 재현하기 위해 추가 정보가 필요합니다. 관리자는 '추가 정보 필요'레이블을 추가 한 후 필요한 추가 정보를 설명해야합니다.</target>
        </trans-unit>
        <trans-unit id="c66d9ee313c34a46d002612bae13058345adccb1" translate="yes" xml:space="preserve">
          <source>Some of the things in here might not look like JavaScript to you. Don't panic. &lt;em&gt;This is the future&lt;/em&gt;.</source>
          <target state="translated">여기에있는 것들 중 일부는 JavaScript처럼 보이지 않을 수 있습니다. 당황하지 마십시오. &lt;em&gt;이것은 미래&lt;/em&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="a5426a06bab601ebc51e5d388f524ee1f0ed9a38" translate="yes" xml:space="preserve">
          <source>Some other &lt;code&gt;View&lt;/code&gt; wants to become responder and is asking this &lt;code&gt;View&lt;/code&gt; to release its responder. Returning &lt;code&gt;true&lt;/code&gt; allows its release.</source>
          <target state="translated">다른 &lt;code&gt;View&lt;/code&gt; 가 응답자가 되고자이 &lt;code&gt;View&lt;/code&gt; 에 응답자를 해제하도록 요청 하고 있습니다. &lt;code&gt;true&lt;/code&gt; 를 반환 하면 릴리스가 허용됩니다.</target>
        </trans-unit>
        <trans-unit id="838080e38f40bb620774df4c4d7f6b0ce4240a47" translate="yes" xml:space="preserve">
          <source>Some upgrades require manual steps, e.g. 0.13 to 0.14, or 0.28 to 0.29. Be sure to check the &lt;a href=&quot;https://github.com/facebook/react-native/releases&quot;&gt;release notes&lt;/a&gt; when upgrading so that you can identify any manual changes your particular project may require.</source>
          <target state="translated">일부 업그레이드에는 수동 단계 (예 : 0.13-0.14 또는 0.28-0.29)가 필요합니다. 특정 프로젝트에 필요할 수있는 수동 변경 사항을 식별 할 수 있도록 업그레이드 할 때 &lt;a href=&quot;https://github.com/facebook/react-native/releases&quot;&gt;릴리스 정보&lt;/a&gt; 를 확인하십시오 .</target>
        </trans-unit>
        <trans-unit id="92a0a2a0da3e3cecf5656ca5fe9b6426910a0f00" translate="yes" xml:space="preserve">
          <source>Sometimes a maintainer may decide that a pull request will not be accepted. Maybe the pull request is out of scope for the project, or the idea is good but the implementation is poor. Whatever the reason, when closing a pull request maintainers should keep the conversation friendly:</source>
          <target state="translated">때때로 관리자는 풀 요청을 수락하지 않기로 결정할 수 있습니다. 풀 요청이 프로젝트 범위를 벗어 났거나 아이디어는 좋지만 구현은 좋지 않습니다. 이유를 불문하고 풀 요청 관리자를 닫을 때 대화를 친절하게 유지해야합니다.</target>
        </trans-unit>
        <trans-unit id="e0df73ac42819a4280a1d070d6398770a96fdb98" translate="yes" xml:space="preserve">
          <source>Sometimes a scrollview takes up more space than its content fills. When this is the case, this prop will fill the rest of the scrollview with a color to avoid setting a background and creating unnecessary overdraw. This is an advanced optimization that is not needed in the general case.</source>
          <target state="translated">때로는 스크롤보기가 내용이 채우는 것보다 더 많은 공간을 차지합니다. 이 경우이 소품은 배경을 설정하고 불필요한 오버 드로우를 생성하지 않도록 나머지 스크롤보기를 색상으로 채 웁니다. 일반적인 경우에는 필요하지 않은 고급 최적화입니다.</target>
        </trans-unit>
        <trans-unit id="0317a64d573f2f33178bf39c2ad6af9d8651924f" translate="yes" xml:space="preserve">
          <source>Sometimes an app needs access to a platform API that React Native doesn't have a corresponding module for yet. Maybe you want to reuse some existing Java code without having to reimplement it in JavaScript, or write some high performance, multi-threaded code such as for image processing, a database, or any number of advanced extensions.</source>
          <target state="translated">때로는 앱에 React Native에 해당 모듈이없는 플랫폼 API에 액세스해야하는 경우가 있습니다. JavaScript로 다시 구현하지 않고도 기존 Java 코드를 재사용하거나 이미지 처리, 데이터베이스 또는 여러 가지 고급 확장과 같은 고성능 멀티 스레드 코드를 작성할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="93d6c8fb0b1a9fc513bd98f9e96bde2923ca3469" translate="yes" xml:space="preserve">
          <source>Sometimes an app needs access to platform API, and React Native doesn't have a corresponding module yet. Maybe you want to reuse some existing Objective-C, Swift or C++ code without having to reimplement it in JavaScript, or write some high performance, multi-threaded code such as for image processing, a database, or any number of advanced extensions.</source>
          <target state="translated">때때로 앱에 플랫폼 API에 대한 액세스가 필요하고 React Native에 해당 모듈이 아직 없습니다. JavaScript로 코드를 다시 구현하지 않고도 기존 Objective-C, Swift 또는 C ++ 코드를 재사용하거나 이미지 처리, 데이터베이스 또는 여러 가지 고급 확장과 같은 고성능 멀티 스레드 코드를 작성할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a357beec463889b7dd9fd26a8498c639fb277dfb" translate="yes" xml:space="preserve">
          <source>Sometimes another contributor has already provided a solution in the comments. Maintainers may close the issue in this case.</source>
          <target state="translated">때로는 다른 제공자가 이미 의견에 해결책을 제공했습니다. 이 경우 관리자가 문제를 닫을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="08ab22a138481dd3053b7ae9439527c859fa184f" translate="yes" xml:space="preserve">
          <source>Sometimes it is useful to trigger an accessibility event on a UI component (i.e. when a custom view appears on a screen or a custom radio button has been selected). Native UIManager module exposes a method &amp;lsquo;sendAccessibilityEvent&amp;rsquo; for this purpose. It takes two arguments: view tag and a type of an event.</source>
          <target state="translated">때때로 UI 구성 요소에서 접근성 이벤트를 트리거하는 것이 유용합니다 (예 : 사용자 정의보기가 화면에 표시되거나 사용자 정의 단일 선택 단추가 선택된 경우). Native UIManager 모듈은이 목적으로 'sendAccessibilityEvent'메소드를 노출합니다. 뷰 태그와 이벤트 유형의 두 가지 인수가 필요합니다.</target>
        </trans-unit>
        <trans-unit id="f83daa8a7ece5a02eb43dcb0937a968a00ce3959" translate="yes" xml:space="preserve">
          <source>Sometimes it's useful to know whether or not the device has a screen reader that is currently active. The &lt;code&gt;AccessibilityInfo&lt;/code&gt; API is designed for this purpose. You can use it to query the current state of the screen reader as well as to register to be notified when the state of the screen reader changes.</source>
          <target state="translated">때때로 장치에 현재 활성화 된 화면 판독기가 있는지 여부를 아는 것이 유용합니다. &lt;code&gt;AccessibilityInfo&lt;/code&gt; 의 API는이 목적을 위해 설계되었습니다. 이를 사용하여 스크린 리더의 현재 상태를 쿼리하고 스크린 리더의 상태가 변경 될 때 알림을 받도록 등록 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f626c97e1b154a12aba5765be1239ad60bcac2dc" translate="yes" xml:space="preserve">
          <source>Sometimes we have React conferences. We posted the &lt;a href=&quot;https://www.youtube.com/playlist?list=PLb0IAmt7-GS3fZ46IGFirdqKTIxlws7e0&quot;&gt;videos from React.js Conf 2017&lt;/a&gt;, &lt;a href=&quot;https://www.youtube.com/playlist?list=PLb0IAmt7-GS0M8Q95RIc2lOM6nc77q1IY&quot;&gt;React.js Conf 2016&lt;/a&gt;, and &lt;a href=&quot;https://www.youtube.com/watch?list=PLb0IAmt7-GS1cbw4qonlQztYV1TAW0sCr&amp;amp;v=KVZ-P-ZI6W4&quot;&gt;React.js Conf 2015&lt;/a&gt;. We'll probably have more conferences in the future, too. Stay tuned. You can also find a list of dedicated React Native conferences &lt;a href=&quot;http://www.awesome-react-native.com/#conferences&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">때때로 우리는 React 회의를합니다. 우리는 &lt;a href=&quot;https://www.youtube.com/playlist?list=PLb0IAmt7-GS3fZ46IGFirdqKTIxlws7e0&quot;&gt;React.js Conf 2017&lt;/a&gt; , &lt;a href=&quot;https://www.youtube.com/playlist?list=PLb0IAmt7-GS0M8Q95RIc2lOM6nc77q1IY&quot;&gt;React.js Conf 2016&lt;/a&gt; 및 &lt;a href=&quot;https://www.youtube.com/watch?list=PLb0IAmt7-GS1cbw4qonlQztYV1TAW0sCr&amp;amp;v=KVZ-P-ZI6W4&quot;&gt;React.js Conf 2015&lt;/a&gt; 의 비디오를 게시했습니다 . 앞으로 더 많은 회의가있을 것입니다. 계속 지켜봐 주시기 바랍니다. 전용 네이티브 회의 반응의 또한 목록을 찾을 수 있습니다 &lt;a href=&quot;http://www.awesome-react-native.com/#conferences&quot;&gt;여기에&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="60c75e815b6f3b219f53b541720581bef02e1735" translate="yes" xml:space="preserve">
          <source>Sometimes when a maintainer says no to a pull request or close an issue, a contributor may get upset and criticize your decision. Maintainers will take steps to defuse the situation.</source>
          <target state="translated">때때로 관리자가 풀 요청을 거부하거나 문제를 종결 할 때 기여자가 화가 나서 결정을 비판 할 수 있습니다. 관리자는 상황을 해소하기위한 조치를 취합니다.</target>
        </trans-unit>
        <trans-unit id="79b74bd12550c57569caa25620f8aa12b7631caa" translate="yes" xml:space="preserve">
          <source>Sometimes you may want absoluteFill but with a couple tweaks - absoluteFillObject can be used to create a customized entry in a StyleSheet, e.g.:</source>
          <target state="translated">때로는 absoluteFill을 원하지만 몇 가지 조정이 필요합니다. absoluteFillObject를 사용하여 StyleSheet에서 사용자 정의 항목을 만들 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="8d04d053b0262ae56debd702fb822156fb3f8dfe" translate="yes" xml:space="preserve">
          <source>Sometimes your native component will have some special properties that you don't want to be part of the API for the associated React component. For example, &lt;code&gt;Switch&lt;/code&gt; has a custom &lt;code&gt;onChange&lt;/code&gt; handler for the raw native event, and exposes an &lt;code&gt;onValueChange&lt;/code&gt; handler property that is invoked with just the boolean value rather than the raw event. Since you don't want these native only properties to be part of the API, you don't want to put them in &lt;code&gt;propTypes&lt;/code&gt;, but if you don't you'll get an error. The solution is simply to add them to the &lt;code&gt;nativeOnly&lt;/code&gt; option, e.g.</source>
          <target state="translated">때때로 네이티브 컴포넌트에는 연관된 React 컴포넌트의 API에 포함되지 않는 특수 속성이 있습니다. 예를 들어, &lt;code&gt;Switch&lt;/code&gt; 에는 원시 원시 이벤트에 대한 사용자 정의 &lt;code&gt;onChange&lt;/code&gt; 핸들러가 있으며 원시 이벤트 가 아닌 부울 값으로 만 호출 되는 &lt;code&gt;onValueChange&lt;/code&gt; 핸들러 특성을 노출합니다 . 이러한 네이티브 전용 속성이 API의 일부가되기를 원하지 않기 때문에 &lt;code&gt;propTypes&lt;/code&gt; 에 넣기를 원하지 않지만 오류가 없으면 오류가 발생합니다. 해결책은 단순히 &lt;code&gt;nativeOnly&lt;/code&gt; 옵션 에 추가하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="1f4b060fd57af658051291d4d852619c87aeb748" translate="yes" xml:space="preserve">
          <source>Sometimes, if we do an action in the same frame that we are adjusting the opacity or highlight of a component that is responding to a touch, we won't see that effect until after the &lt;code&gt;onPress&lt;/code&gt; function has returned. If &lt;code&gt;onPress&lt;/code&gt; does a &lt;code&gt;setState&lt;/code&gt; that results in a lot of work and a few frames dropped, this may occur. A solution to this is to wrap any action inside of your &lt;code&gt;onPress&lt;/code&gt; handler in &lt;code&gt;requestAnimationFrame&lt;/code&gt;:</source>
          <target state="translated">때로는 터치에 응답하는 구성 요소의 불투명도 또는 강조 표시를 조정하는 것과 동일한 프레임에서 작업을 수행하면 &lt;code&gt;onPress&lt;/code&gt; 함수가 반환 될 때까지 해당 효과를 볼 수 없습니다 . 경우 &lt;code&gt;onPress&lt;/code&gt; 에이 않습니다 &lt;code&gt;setState&lt;/code&gt; 를을 많은 작업과 몇 프레임에 결과가 떨어졌다,이 발생할 수 있습니다. 이에 대한 해결책 은 &lt;code&gt;requestAnimationFrame&lt;/code&gt; 에서 &lt;code&gt;onPress&lt;/code&gt; 핸들러 내부의 모든 조치를 래핑하는 것입니다 .</target>
        </trans-unit>
        <trans-unit id="806dcf104ee0a116832b3c097889fd42ae786694" translate="yes" xml:space="preserve">
          <source>Sometimes, you might be getting encoded image data from a REST API call. You can use the &lt;code&gt;'data:'&lt;/code&gt; uri scheme to use these images. Same as for network resources, &lt;em&gt;you will need to manually specify the dimensions of your image&lt;/em&gt;.</source>
          <target state="translated">때로는 REST API 호출에서 인코딩 된 이미지 데이터를 가져올 수 있습니다. 당신이 사용할 수있는 &lt;code&gt;'data:'&lt;/code&gt; URI 체계를 이러한 이미지를 사용할 수 있습니다. 네트워크 리소스와 마찬가지로 &lt;em&gt;이미지의 크기를 수동으로 지정해야합니다&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="fb5e14a435fb6c916f9b37f52d602793142989aa" translate="yes" xml:space="preserve">
          <source>Source as an object</source>
          <target state="translated">객체로서의 소스</target>
        </trans-unit>
        <trans-unit id="9e4cc67c47a57a6771e6c1978a1315802da5fa0b" translate="yes" xml:space="preserve">
          <source>Space after &lt;code&gt;@property&lt;/code&gt; declarations</source>
          <target state="translated">&lt;code&gt;@property&lt;/code&gt; 선언 후 공백</target>
        </trans-unit>
        <trans-unit id="bb57ed3b903d5ac2cdd49868fc64f77b4ea3ef1c" translate="yes" xml:space="preserve">
          <source>Specific</source>
          <target state="translated">Specific</target>
        </trans-unit>
        <trans-unit id="a88abffb690bd69f661604e7ee904359982043fb" translate="yes" xml:space="preserve">
          <source>Specifies font weight. The values 'normal' and 'bold' are supported for most fonts. Not all fonts have a variant for each of the numeric values, in that case the closest one is chosen.</source>
          <target state="translated">글꼴 두께를 지정합니다. 'normal'및 'bold'값은 대부분의 글꼴에 지원됩니다. 모든 글꼴에 각 숫자 값에 대한 변형이있는 것은 아니며,이 경우 가장 가까운 글꼴이 선택됩니다.</target>
        </trans-unit>
        <trans-unit id="762ce84248da077c1f5bdf4f4f6dadae23c7d3d5" translate="yes" xml:space="preserve">
          <source>Specifies smallest possible scale a font can reach when adjustsFontSizeToFit is enabled. (values 0.01-1.0).</source>
          <target state="translated">adjustsFontSizeToFit가 활성화 된 경우 글꼴이 도달 할 수있는 가장 작은 배율을 지정합니다. (값 0.01-1.0).</target>
        </trans-unit>
        <trans-unit id="68946261a5c42910006dcbfae9f13f08e40c1ff0" translate="yes" xml:space="preserve">
          <source>Specifies tab bar item positioning. Available values are:</source>
          <target state="translated">탭 막대 항목 위치를 지정합니다. 사용 가능한 값은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="77026a1149a8a13fa85f92f78f74c813e8d5bec9" translate="yes" xml:space="preserve">
          <source>Specifies text alignment. The value 'justify' is only supported on iOS and fallbacks to &lt;code&gt;left&lt;/code&gt; on Android.</source>
          <target state="translated">텍스트 정렬을 지정합니다. 'justify'값은 iOS에서만 지원 되며 Android에서는 &lt;code&gt;left&lt;/code&gt; 으로 대체됩니다 .</target>
        </trans-unit>
        <trans-unit id="d4c1196866944c1f9f14cf5b29c020fd74584dac" translate="yes" xml:space="preserve">
          <source>Specifies the background color of the drawer. The default value is white. If you want to set the opacity of the drawer, use rgba. Example:</source>
          <target state="translated">서랍의 배경색을 지정합니다. 기본값은 흰색입니다. 서랍의 불투명도를 설정하려면 rgba를 사용하십시오. 예:</target>
        </trans-unit>
        <trans-unit id="dfcf1eda432b5151650fb087f2d773a45ddb567b" translate="yes" xml:space="preserve">
          <source>Specifies the disabled state of the text view for testing purposes</source>
          <target state="translated">테스트 목적으로 텍스트보기의 비활성화 된 상태를 지정합니다.</target>
        </trans-unit>
        <trans-unit id="8d9437dc7f3f81cf9b0164706682070bbaaafed6" translate="yes" xml:space="preserve">
          <source>Specifies the lock mode of the drawer. The drawer can be locked in 3 states:</source>
          <target state="translated">서랍의 잠금 모드를 지정합니다. 서랍은 3 가지 상태로 잠글 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="6dc6ef439870031fa25d9e064ae6bfe59be22802" translate="yes" xml:space="preserve">
          <source>Specifies the mixed content mode. i.e WebView will allow a secure origin to load content from any other origin.</source>
          <target state="translated">혼합 컨텐츠 모드를 지정합니다. 즉, WebView를 사용하면 안전한 출처가 다른 출처의 콘텐츠를로드 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="61462e57c74c92bb5ca1f3cee227d8fd2f1eec46" translate="yes" xml:space="preserve">
          <source>Specifies the side of the screen from which the drawer will slide in.</source>
          <target state="translated">서랍이 들어갈 화면의 측면을 지정합니다.</target>
        </trans-unit>
        <trans-unit id="bd10f6ce8bb335b611859e4c4a4bba649f0609cc" translate="yes" xml:space="preserve">
          <source>Specifies the width of the drawer, more precisely the width of the view that be pulled in from the edge of the window.</source>
          <target state="translated">서랍의 너비, 더 정확하게는 창의 가장자리에서 끌어 오는보기의 너비를 지정합니다.</target>
        </trans-unit>
        <trans-unit id="4e49b3aee60e3ab97d0b6c0e9b56fce42dbc21cd" translate="yes" xml:space="preserve">
          <source>Specifies whether font should be scaled down automatically to fit given style constraints.</source>
          <target state="translated">주어진 스타일 제약 조건에 맞게 글꼴을 자동으로 축소할지 여부를 지정합니다.</target>
        </trans-unit>
        <trans-unit id="174db4e477d6be0a3545972b6489f177d699fe28" translate="yes" xml:space="preserve">
          <source>Specifies whether fonts should scale to respect Text Size accessibility settings. The default is &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">텍스트 크기 접근성 설정을 고려하여 글꼴 크기를 조정할지 여부를 지정합니다. 기본값은 &lt;code&gt;true&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="ff622318301b79b419908b73cd3f64aab53d0fd4" translate="yes" xml:space="preserve">
          <source>Specifying a device</source>
          <target state="translated">장치 지정</target>
        </trans-unit>
        <trans-unit id="dcaf52160535c2f3c2cbed0026789ae60aac703b" translate="yes" xml:space="preserve">
          <source>Specifying stiffness/damping/mass as parameters makes &lt;code&gt;Animated.spring&lt;/code&gt; use an analytical spring model based on the motion equations of a &lt;a href=&quot;https://en.wikipedia.org/wiki/Harmonic_oscillator#Damped_harmonic_oscillator&quot;&gt;damped harmonic oscillator&lt;/a&gt;. This behavior is slightly more precise and faithful to the physics behind spring dynamics, and closely mimics the implementation in iOS's CASpringAnimation primitive.</source>
          <target state="translated">강성 / 댐핑 / 질량을 매개 변수로 지정하면 &lt;code&gt;Animated.spring&lt;/code&gt; 은 &lt;a href=&quot;https://en.wikipedia.org/wiki/Harmonic_oscillator#Damped_harmonic_oscillator&quot;&gt;감쇠 고조파 발진기&lt;/a&gt; 의 운동 방정식을 기반으로 분석 스프링 모델을 사용합니다 . 이 동작은 스프링 다이내믹스의 물리학에 약간 더 정확하고 충실하며 iOS의 CASpringAnimation 프리미티브의 구현과 매우 유사합니다.</target>
        </trans-unit>
        <trans-unit id="5fd4d7eb0c234c30e3cd55dcd36064bbd1127d69" translate="yes" xml:space="preserve">
          <source>Split APKs by ABI to reduce file size</source>
          <target state="translated">파일 크기를 줄이기 위해 APK를 ABI로 분할</target>
        </trans-unit>
        <trans-unit id="b3b520c802ab9b25bf85b34a1ad722e46e414d9b" translate="yes" xml:space="preserve">
          <source>Stage 3</source>
          <target state="translated">3 단계</target>
        </trans-unit>
        <trans-unit id="797050348a505da64fd5440f4089492899f1608e" translate="yes" xml:space="preserve">
          <source>Stale issues</source>
          <target state="translated">오래된 문제</target>
        </trans-unit>
        <trans-unit id="ad9344815dc0ca5e3531e14f6a13398d1066ff3d" translate="yes" xml:space="preserve">
          <source>Standard functions</source>
          <target state="translated">표준 기능</target>
        </trans-unit>
        <trans-unit id="62881eee1ffc260a65089518aeeb1a5121c31241" translate="yes" xml:space="preserve">
          <source>Start by following the &lt;code&gt;Point Gradle to your Android SDK&lt;/code&gt; section of this page. Once you do this, assuming you have Gradle configured properly, you can then run the following command from the root of your React Native checkout to build and package all required files:</source>
          <target state="translated">이 페이지 &lt;code&gt;Point Gradle to your Android SDK&lt;/code&gt; 대한 Point Gradle 섹션을 따라 시작하십시오. 일단 Gradle을 올바르게 구성했다고 가정하면 React Native 체크 아웃 루트에서 다음 명령을 실행하여 필요한 모든 파일을 빌드하고 패키지 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b81892b516c01e0944a0e8d6f21655bbb4478f21" translate="yes" xml:space="preserve">
          <source>Start the React Native server and run your native application.</source>
          <target state="translated">React Native 서버를 시작하고 기본 애플리케이션을 실행하십시오.</target>
        </trans-unit>
        <trans-unit id="0acb999b3fec51a26337e59c05109e52d38c0c6d" translate="yes" xml:space="preserve">
          <source>Start your package server with &lt;code&gt;npm start&lt;/code&gt;. Note that when the dev packager is automatically launched via xcode and &lt;code&gt;react-native run-android&lt;/code&gt;, etc, it does not use &lt;code&gt;npm start&lt;/code&gt;, so it won't use the config.</source>
          <target state="translated">&lt;code&gt;npm start&lt;/code&gt; 로 패키지 서버를 시작하십시오 . dev 패키지 프로그램이 xcode 및 &lt;code&gt;react-native run-android&lt;/code&gt; 등을 통해 자동으로 &lt;code&gt;npm start&lt;/code&gt; 되면 npm start를 사용하지 않으므로 구성을 사용하지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="83a2a5cb5d52573f01ca5775cc4e612c180b7e34" translate="yes" xml:space="preserve">
          <source>Starting the simulator</source>
          <target state="translated">시뮬레이터 시작</target>
        </trans-unit>
        <trans-unit id="e9e00587bed6f3907f597e401739adebc193aa05" translate="yes" xml:space="preserve">
          <source>Starts an animation after the given delay.</source>
          <target state="translated">주어진 지연 후에 애니메이션을 시작합니다.</target>
        </trans-unit>
        <trans-unit id="218ad1c5fa269bd266025d78a326d670630955bb" translate="yes" xml:space="preserve">
          <source>Starts an array of animations all at the same time. By default, if one of the animations is stopped, they will all be stopped. You can override this with the &lt;code&gt;stopTogether&lt;/code&gt; flag.</source>
          <target state="translated">모든 애니메이션 배열을 동시에 시작합니다. 기본적으로 애니메이션 중 하나가 중지되면 모두 중지됩니다. &lt;code&gt;stopTogether&lt;/code&gt; 플래그로 이를 대체 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="5cca2fd9c631e29624254bf0c13ededeafb3abb7" translate="yes" xml:space="preserve">
          <source>Starts an array of animations in order, waiting for each to complete before starting the next. If the current running animation is stopped, no following animations will be started.</source>
          <target state="translated">다음 배열을 시작하기 전에 각 배열이 완료되기를 기다리는 애니메이션 배열을 순서대로 시작합니다. 현재 실행중인 애니메이션이 중지되면 다음 애니메이션이 시작되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="a72502067518684f9deeec70cf119fd26326cd33" translate="yes" xml:space="preserve">
          <source>State</source>
          <target state="translated">State</target>
        </trans-unit>
        <trans-unit id="56ef0509a7fcd409a0589ed5ee6ed9d9a22db2d8" translate="yes" xml:space="preserve">
          <source>State works the same way as it does in React, so for more details on handling state, you can look at the &lt;a href=&quot;https://reactjs.org/docs/react-component.html#setstate&quot;&gt;React.Component API&lt;/a&gt;. At this point, you might be annoyed that most of our examples so far use boring default black text. To make things more beautiful, you will have to &lt;a href=&quot;style&quot;&gt;learn about Style&lt;/a&gt;.</source>
          <target state="translated">State는 React에서와 동일한 방식으로 작동하므로 상태 처리에 대한 자세한 내용은 &lt;a href=&quot;https://reactjs.org/docs/react-component.html#setstate&quot;&gt;React.Component API를 참조하십시오&lt;/a&gt; . 이 시점에서 지금까지 대부분의 예제는 지루한 기본 검정 텍스트를 사용한다는 사실에 짜증이 날 수 있습니다. 일을 더 아름답게하려면 &lt;a href=&quot;style&quot;&gt;스타일&lt;/a&gt; 에 대해 배워야 합니다.</target>
        </trans-unit>
        <trans-unit id="1b103760acdf715d108a2168584bb8018a17ce54" translate="yes" xml:space="preserve">
          <source>Static Image Resources</source>
          <target state="translated">정적 이미지 리소스</target>
        </trans-unit>
        <trans-unit id="840c8e58dd72551c185c94db723e4403475cf429" translate="yes" xml:space="preserve">
          <source>Static Non-Image Resources</source>
          <target state="translated">정적 비 이미지 리소스</target>
        </trans-unit>
        <trans-unit id="9b75cbfb249af9c0f7b1047ff748a74b85bc8436" translate="yes" xml:space="preserve">
          <source>Status bar animation</source>
          <target state="translated">상태 표시 줄 애니메이션</target>
        </trans-unit>
        <trans-unit id="b1458a435d3ca6fd9862a8d3ce2c7b7f4b7893ea" translate="yes" xml:space="preserve">
          <source>Status bar style</source>
          <target state="translated">상태 표시 줄 스타일</target>
        </trans-unit>
        <trans-unit id="7c188efac7001fec932a493c07e178ef0d8b50ef" translate="yes" xml:space="preserve">
          <source>Status bar style to set</source>
          <target state="translated">설정할 상태 표시 줄 스타일</target>
        </trans-unit>
        <trans-unit id="7de1c1596973efa1e95d16d7cb9229f4c6d36db9" translate="yes" xml:space="preserve">
          <source>StatusBar</source>
          <target state="translated">StatusBar</target>
        </trans-unit>
        <trans-unit id="7d474673dc01f5cc7c8345542ed07ba664e6820d" translate="yes" xml:space="preserve">
          <source>StatusBar#animated</source>
          <target state="translated">StatusBar#animated</target>
        </trans-unit>
        <trans-unit id="5581fde6fd7addbc491641a681aa2782dd58f4ce" translate="yes" xml:space="preserve">
          <source>StatusBar#backgroundColor</source>
          <target state="translated">StatusBar#backgroundColor</target>
        </trans-unit>
        <trans-unit id="7943bdd8af89d14ac4c6bc2d06e243d0e7d765d8" translate="yes" xml:space="preserve">
          <source>StatusBar#barStyle</source>
          <target state="translated">StatusBar#barStyle</target>
        </trans-unit>
        <trans-unit id="38a3ba08fa64b9328a4a844efc4e60a363f345bc" translate="yes" xml:space="preserve">
          <source>StatusBar#hidden</source>
          <target state="translated">StatusBar#hidden</target>
        </trans-unit>
        <trans-unit id="cc38dc939f64ac24102e9ab18120250e59e52712" translate="yes" xml:space="preserve">
          <source>StatusBar#networkActivityIndicatorVisible</source>
          <target state="translated">StatusBar#networkActivityIndicatorVisible</target>
        </trans-unit>
        <trans-unit id="d4bfcc0b2e3f1964d9f1e71b760ec3cbc8d57460" translate="yes" xml:space="preserve">
          <source>StatusBar#showHideTransition</source>
          <target state="translated">StatusBar#showHideTransition</target>
        </trans-unit>
        <trans-unit id="db192204b655d45a72a1982c2d7c317cac79cd33" translate="yes" xml:space="preserve">
          <source>StatusBar#translucent</source>
          <target state="translated">StatusBar#translucent</target>
        </trans-unit>
        <trans-unit id="930d5b5e3eb5c0cbdf10b97191de7f2e071f755d" translate="yes" xml:space="preserve">
          <source>StatusBar.setBackgroundColor()</source>
          <target state="translated">StatusBar.setBackgroundColor()</target>
        </trans-unit>
        <trans-unit id="4bebafbfdd3a5b771c65a637acf2769eebdf24e1" translate="yes" xml:space="preserve">
          <source>StatusBar.setBarStyle()</source>
          <target state="translated">StatusBar.setBarStyle()</target>
        </trans-unit>
        <trans-unit id="19ec3f6e959a63a7a6fb6dbd92537edf44c91cdb" translate="yes" xml:space="preserve">
          <source>StatusBar.setHidden()</source>
          <target state="translated">StatusBar.setHidden()</target>
        </trans-unit>
        <trans-unit id="76ee34977b43d5e10d21744a4018ecfdbe5dba83" translate="yes" xml:space="preserve">
          <source>StatusBar.setNetworkActivityIndicatorVisible()</source>
          <target state="translated">StatusBar.setNetworkActivityIndicatorVisible()</target>
        </trans-unit>
        <trans-unit id="1fcae87a48cf62d551725cab503db51d1679d10d" translate="yes" xml:space="preserve">
          <source>StatusBar.setTranslucent()</source>
          <target state="translated">StatusBar.setTranslucent()</target>
        </trans-unit>
        <trans-unit id="bc814d7ec86b26e2d2d3b5428c8608deb42be4f5" translate="yes" xml:space="preserve">
          <source>StatusBarAnimation</source>
          <target state="translated">StatusBarAnimation</target>
        </trans-unit>
        <trans-unit id="8dbd7590b977b83d69e8125846511f50a9a99c49" translate="yes" xml:space="preserve">
          <source>StatusBarIOS</source>
          <target state="translated">StatusBarIOS</target>
        </trans-unit>
        <trans-unit id="e4699a48a5590599d91166ffc47c3f22a7a9a9a5" translate="yes" xml:space="preserve">
          <source>StatusBarStyle</source>
          <target state="translated">StatusBarStyle</target>
        </trans-unit>
        <trans-unit id="6bac23c6dfc3b1372d6c716fd7e26a124fa33b35" translate="yes" xml:space="preserve">
          <source>Step 1</source>
          <target state="translated">1 단계</target>
        </trans-unit>
        <trans-unit id="aefbadf9176e8b04a9c6bae3b469d2ad2c20b5f5" translate="yes" xml:space="preserve">
          <source>Step 2</source>
          <target state="translated">2 단계</target>
        </trans-unit>
        <trans-unit id="27030a62f7c332e0255651a98eba33b992aa684c" translate="yes" xml:space="preserve">
          <source>Step 3</source>
          <target state="translated">3 단계</target>
        </trans-unit>
        <trans-unit id="1d0e7b63534194e883fa1142ce2d49d73746013d" translate="yes" xml:space="preserve">
          <source>Step value of the slider. The value should be between 0 and (maximumValue - minimumValue). Default value is 0.</source>
          <target state="translated">슬라이더의 단계 값. 값은 0과 (maximumValue-minimumValue) 사이 여야합니다. 기본값은 0입니다.</target>
        </trans-unit>
        <trans-unit id="fade9269e255a8d840b3f72cfc6088e0722fa50a" translate="yes" xml:space="preserve">
          <source>Stop loading the current page.</source>
          <target state="translated">현재 페이지로드를 중지하십시오.</target>
        </trans-unit>
        <trans-unit id="d54ed270aa3a9cbd33ab05802cd38d96b70d8826" translate="yes" xml:space="preserve">
          <source>Stop vibration.</source>
          <target state="translated">진동을 멈추십시오.</target>
        </trans-unit>
        <trans-unit id="0117e9d520e6baddb6a9f47ddb8421f19ce38874" translate="yes" xml:space="preserve">
          <source>Stops observing for device location changes. In addition, it removes all listeners previously registered.</source>
          <target state="translated">장치 위치 변경 관찰을 중지합니다. 또한 이전에 등록 된 모든 리스너를 제거합니다.</target>
        </trans-unit>
        <trans-unit id="28e22663cfd0bef6c75d430a03b6bdfa46bbb331" translate="yes" xml:space="preserve">
          <source>Stores a base64-encoded image in the ImageStore, and returns a URI that can be used to access or display the image later. Images are stored in memory only, and must be manually deleted when you are finished with them by calling &lt;code&gt;removeImageForTag()&lt;/code&gt;.</source>
          <target state="translated">Base64로 인코딩 된 이미지를 ImageStore에 저장하고 나중에 이미지에 액세스하거나 표시하는 데 사용할 수있는 URI를 반환합니다. 이미지는 메모리에만 저장되며 &lt;code&gt;removeImageForTag()&lt;/code&gt; 를 호출하여 완료되면 수동으로 삭제해야합니다 .</target>
        </trans-unit>
        <trans-unit id="3df63b7acb0522da685dad5fe84b81fdd7b25264" translate="yes" xml:space="preserve">
          <source>String</source>
          <target state="translated">String</target>
        </trans-unit>
        <trans-unit id="ed8a895c2cfdb1a6b2bca118f76b16a1f4c6a669" translate="yes" xml:space="preserve">
          <source>String message: A string with the text to toast</source>
          <target state="translated">문자열 메시지 : 토스트 할 텍스트가있는 문자열</target>
        </trans-unit>
        <trans-unit id="12b99c74e7c704f22a9a0fc647cde5c304769402" translate="yes" xml:space="preserve">
          <source>String.prototype.{&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith&quot;&gt;startsWith&lt;/a&gt;, &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith&quot;&gt;endsWith&lt;/a&gt;, &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/repeat&quot;&gt;repeat&lt;/a&gt;, &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes&quot;&gt;includes&lt;/a&gt;}</source>
          <target state="translated">String.prototype. { &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith&quot;&gt;startsWith&lt;/a&gt; , &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith&quot;&gt;endsWith&lt;/a&gt; , &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/repeat&quot;&gt;반복&lt;/a&gt; , &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes&quot;&gt;포함&lt;/a&gt; }</target>
        </trans-unit>
        <trans-unit id="99a0efc6cfd85d8ff2732a6718140f822cb90472" translate="yes" xml:space="preserve">
          <source>Style</source>
          <target state="translated">Style</target>
        </trans-unit>
        <trans-unit id="74b4f2ed89813f9a73f7270d61c097ff9c059dd6" translate="yes" xml:space="preserve">
          <source>Style Guide</source>
          <target state="translated">스타일 가이드</target>
        </trans-unit>
        <trans-unit id="3903981dbc6393b5539ee8fd52fc82a8960f1523" translate="yes" xml:space="preserve">
          <source>Style of the ProgressBar. One of:</source>
          <target state="translated">ProgressBar의 스타일. 다음 중 하나 :</target>
        </trans-unit>
        <trans-unit id="be1c62fe4bdc85778f7e567589c03953812a90d1" translate="yes" xml:space="preserve">
          <source>Style to apply to each of the item labels.</source>
          <target state="translated">각 항목 레이블에 적용 할 스타일입니다.</target>
        </trans-unit>
        <trans-unit id="ce867a84f68c1d0cd7e5d2e0a575c394cc078c03" translate="yes" xml:space="preserve">
          <source>StyleSheet</source>
          <target state="translated">StyleSheet</target>
        </trans-unit>
        <trans-unit id="91ba4145bc55279e0f6cd26cf6a137f746bef5a5" translate="yes" xml:space="preserve">
          <source>StyleSheet#absoluteFill</source>
          <target state="translated">StyleSheet#absoluteFill</target>
        </trans-unit>
        <trans-unit id="1ffa6bc7f93efead007b2e4620ee22b6b0844dca" translate="yes" xml:space="preserve">
          <source>StyleSheet#absoluteFillObject</source>
          <target state="translated">StyleSheet#absoluteFillObject</target>
        </trans-unit>
        <trans-unit id="e678cd19ed06d2e41c33427399b770f859a27a98" translate="yes" xml:space="preserve">
          <source>StyleSheet#flatten</source>
          <target state="translated">StyleSheet#flatten</target>
        </trans-unit>
        <trans-unit id="cff515c57366dd185c1d555def3dfda9954b816e" translate="yes" xml:space="preserve">
          <source>StyleSheet#hairlineWidth</source>
          <target state="translated">StyleSheet#hairlineWidth</target>
        </trans-unit>
        <trans-unit id="cd98c42358d0c7677a65427dfd8ebe0266a32865" translate="yes" xml:space="preserve">
          <source>StyleSheet.create()</source>
          <target state="translated">StyleSheet.create()</target>
        </trans-unit>
        <trans-unit id="fb62d005677d99decf87d31d129926b3aa35600b" translate="yes" xml:space="preserve">
          <source>StyleSheet.setStyleAttributePreprocessor()</source>
          <target state="translated">StyleSheet.setStyleAttributePreprocessor()</target>
        </trans-unit>
        <trans-unit id="df7d8ac370779c1d100b7ca7d7989697f5e8af70" translate="yes" xml:space="preserve">
          <source>StyleSheetPropType(View Style props)</source>
          <target state="translated">StyleSheetPropType (스타일 소품보기)</target>
        </trans-unit>
        <trans-unit id="52db564b0ad83b57f6f43fd2a22822492d585a15" translate="yes" xml:space="preserve">
          <source>Styles</source>
          <target state="translated">Styles</target>
        </trans-unit>
        <trans-unit id="882e18fbe975bc824d30afdfbbb8cdffade8dcec" translate="yes" xml:space="preserve">
          <source>Subclass &lt;code&gt;RCTViewManager&lt;/code&gt; to create a manager for your component.</source>
          <target state="translated">컴포넌트의 관리자를 작성하기위한 서브 클래스 &lt;code&gt;RCTViewManager&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="41eefe3ced63ed0213bd234866cdbb8c74a89142" translate="yes" xml:space="preserve">
          <source>Suggest &lt;a href=&quot;https://github.com/facebook/react-native/labels&quot;&gt;labels&lt;/a&gt; that can help categorize issues.</source>
          <target state="translated">문제를 분류하는 데 도움이되는 &lt;a href=&quot;https://github.com/facebook/react-native/labels&quot;&gt;라벨&lt;/a&gt; 을 제안하십시오 .</target>
        </trans-unit>
        <trans-unit id="87f382bcfc7270fa0c60864065f8693eb4b7a5a8" translate="yes" xml:space="preserve">
          <source>Supported events:</source>
          <target state="translated">지원되는 이벤트 :</target>
        </trans-unit>
        <trans-unit id="d0377706508a1a8ffc7b2445d9c4711ecfe46bce" translate="yes" xml:space="preserve">
          <source>Supported options:</source>
          <target state="translated">지원되는 옵션 :</target>
        </trans-unit>
        <trans-unit id="4be9e58c958af2deb38e42d96e6aaa365a252705" translate="yes" xml:space="preserve">
          <source>Swift doesn't have support for macros so exposing it to React Native requires a bit more setup but works relatively the same.</source>
          <target state="translated">Swift는 매크로를 지원하지 않으므로 React Native에 노출하려면 약간 더 설정해야하지만 상대적으로 동일하게 작동합니다.</target>
        </trans-unit>
        <trans-unit id="3e44c920427e845df4958295eb8c3045b55fcfd5" translate="yes" xml:space="preserve">
          <source>Switch</source>
          <target state="translated">Switch</target>
        </trans-unit>
        <trans-unit id="05cbdf0937c3c1b2a3bab4fe6fe49b9e9c756eb6" translate="yes" xml:space="preserve">
          <source>Switch#disabled</source>
          <target state="translated">Switch#disabled</target>
        </trans-unit>
        <trans-unit id="8bd702c06fa7bca68970d0ca46a9f208f3648364" translate="yes" xml:space="preserve">
          <source>Switch#onTintColor</source>
          <target state="translated">Switch#onTintColor</target>
        </trans-unit>
        <trans-unit id="19f6f235889ffaba47503068c8cd6022bf59f0d5" translate="yes" xml:space="preserve">
          <source>Switch#onValueChange</source>
          <target state="translated">Switch#onValueChange</target>
        </trans-unit>
        <trans-unit id="3b45801972c6e1380f61d302bc6b35a04966b990" translate="yes" xml:space="preserve">
          <source>Switch#testID</source>
          <target state="translated">Switch#testID</target>
        </trans-unit>
        <trans-unit id="673b92d2105df9b422cc982bd14fbdddc2a75c2d" translate="yes" xml:space="preserve">
          <source>Switch#thumbTintColor</source>
          <target state="translated">Switch#thumbTintColor</target>
        </trans-unit>
        <trans-unit id="56a2fe45517bbc9bbbabef0ce561b62bca19d7e4" translate="yes" xml:space="preserve">
          <source>Switch#tintColor</source>
          <target state="translated">Switch#tintColor</target>
        </trans-unit>
        <trans-unit id="58cd030a61d36f9753f72dcb0da8664d22c44782" translate="yes" xml:space="preserve">
          <source>Switch#value</source>
          <target state="translated">Switch#value</target>
        </trans-unit>
        <trans-unit id="08cd2d4ae39c9fb7211cc588435b4c52abcd37fe" translate="yes" xml:space="preserve">
          <source>Syntax transformers make writing code more enjoyable by allowing you to use new JavaScript syntax without having to wait for support on all interpreters.</source>
          <target state="translated">구문 변환기를 사용하면 모든 인터프리터에서 지원을 기다릴 필요없이 새로운 JavaScript 구문을 사용할 수 있으므로 코드 작성이 더 즐거워집니다.</target>
        </trans-unit>
        <trans-unit id="7de50df5c83b2f8b64ea311a6d2b667d3aacd75a" translate="yes" xml:space="preserve">
          <source>Synthetic Touch Events</source>
          <target state="translated">합성 터치 이벤트</target>
        </trans-unit>
        <trans-unit id="15c3e4a956c3f7ed705d0574168e6082b24b7b41" translate="yes" xml:space="preserve">
          <source>Systrace</source>
          <target state="translated">Systrace</target>
        </trans-unit>
        <trans-unit id="50643f765de830eda5735ce8f01f8555d6cc0f7b" translate="yes" xml:space="preserve">
          <source>Systrace.attachToRelayProfiler()</source>
          <target state="translated">Systrace.attachToRelayProfiler()</target>
        </trans-unit>
        <trans-unit id="4468d308336fe73b1c73d541aec4b497dfdc13bb" translate="yes" xml:space="preserve">
          <source>Systrace.beginAsyncEvent()</source>
          <target state="translated">Systrace.beginAsyncEvent()</target>
        </trans-unit>
        <trans-unit id="ea6c0e2cf9474d43d018320bc91a9795b384130f" translate="yes" xml:space="preserve">
          <source>Systrace.beginEvent()</source>
          <target state="translated">Systrace.beginEvent()</target>
        </trans-unit>
        <trans-unit id="b1136e1f35190b06d41ec92185dd771df941cacd" translate="yes" xml:space="preserve">
          <source>Systrace.counterEvent()</source>
          <target state="translated">Systrace.counterEvent()</target>
        </trans-unit>
        <trans-unit id="46a1a652fd7a7390f9f81aa8fe2a444d73f311ae" translate="yes" xml:space="preserve">
          <source>Systrace.endAsyncEvent()</source>
          <target state="translated">Systrace.endAsyncEvent()</target>
        </trans-unit>
        <trans-unit id="0f7804e0d7496a89d1d85dccdd5a907cb91a66f8" translate="yes" xml:space="preserve">
          <source>Systrace.endEvent()</source>
          <target state="translated">Systrace.endEvent()</target>
        </trans-unit>
        <trans-unit id="e0208130fec6ca2a9ca1ba2755ae1abad63ea2cb" translate="yes" xml:space="preserve">
          <source>Systrace.installReactHook()</source>
          <target state="translated">Systrace.installReactHook()</target>
        </trans-unit>
        <trans-unit id="ddafa9150edf8dd70860e9b91e19591fafbe00e5" translate="yes" xml:space="preserve">
          <source>Systrace.isEnabled()</source>
          <target state="translated">Systrace.isEnabled()</target>
        </trans-unit>
        <trans-unit id="0d6ac5906e52c40976262f76c60b6534ad36fb3b" translate="yes" xml:space="preserve">
          <source>Systrace.measure()</source>
          <target state="translated">Systrace.measure()</target>
        </trans-unit>
        <trans-unit id="668b9d841935ff6330d82b0fa7b8e4530e3c7c9f" translate="yes" xml:space="preserve">
          <source>Systrace.measureMethods()</source>
          <target state="translated">Systrace.measureMethods()</target>
        </trans-unit>
        <trans-unit id="830b093effeafaef97b356a7b4b68d2789b4384b" translate="yes" xml:space="preserve">
          <source>Systrace.setEnabled()</source>
          <target state="translated">Systrace.setEnabled()</target>
        </trans-unit>
        <trans-unit id="5d1189f6cfcef4f0dc8976e4b4e47a8bdc265021" translate="yes" xml:space="preserve">
          <source>Systrace.swizzleJSON()</source>
          <target state="translated">Systrace.swizzleJSON()</target>
        </trans-unit>
        <trans-unit id="7407e5938b092cfbf85773b34db0604d7134d9a7" translate="yes" xml:space="preserve">
          <source>TODO: now that AppState is a subclass of NativeEventEmitter, we could deprecate &lt;code&gt;addEventListener&lt;/code&gt; and &lt;code&gt;removeEventListener&lt;/code&gt; and just use &lt;code&gt;addListener&lt;/code&gt; and &lt;code&gt;listener.remove()&lt;/code&gt; directly. That will be a breaking change though, as both the method and event names are different (addListener events are currently required to be globally unique).</source>
          <target state="translated">TODO : 이제 AppState는 NativeEventEmitter의 서브 클래스이므로 &lt;code&gt;addEventListener&lt;/code&gt; 및 &lt;code&gt;removeEventListener&lt;/code&gt; 를 더 이상 사용하지 않고 &lt;code&gt;addListener&lt;/code&gt; 및 &lt;code&gt;listener.remove()&lt;/code&gt; 직접 사용할 수 있습니다. 그러나 메소드와 이벤트 이름이 다르기 때문에 주요 변경 사항이됩니다 (addListener 이벤트는 현재 전역 적으로 고유해야합니다).</target>
        </trans-unit>
        <trans-unit id="ffc29a9f375236222d847bc718b63b76107ecd91" translate="yes" xml:space="preserve">
          <source>TV devices support has been implemented with the intention of making existing React Native applications &quot;just work&quot; on Apple TV and Android TV, with few or no changes needed in the JavaScript code for the applications.</source>
          <target state="translated">TV 장치 지원은 기존 React Native 응용 프로그램을 Apple TV 및 Android TV에서 &quot;작동하는&quot;응용 프로그램의 JavaScript 코드에서 거의 또는 전혀 변경하지 않고도 구현할 수 있도록 구현되었습니다.</target>
        </trans-unit>
        <trans-unit id="b6ce6e3342bf41c612ce255a93611e837712af4d" translate="yes" xml:space="preserve">
          <source>TabBarIOS</source>
          <target state="translated">TabBarIOS</target>
        </trans-unit>
        <trans-unit id="a47fef1d6f3e865f3319cd2de1ed6812623166d9" translate="yes" xml:space="preserve">
          <source>TabBarIOS#barStyle</source>
          <target state="translated">TabBarIOS#barStyle</target>
        </trans-unit>
        <trans-unit id="2f92e3f169dfab75b2c314b45ec1016afe9c5469" translate="yes" xml:space="preserve">
          <source>TabBarIOS#barTintColor</source>
          <target state="translated">TabBarIOS#barTintColor</target>
        </trans-unit>
        <trans-unit id="bfce729581da2d15bb7b8455b1aed9151a3d8686" translate="yes" xml:space="preserve">
          <source>TabBarIOS#itemPositioning</source>
          <target state="translated">TabBarIOS#itemPositioning</target>
        </trans-unit>
        <trans-unit id="69fc572d37db0dfff93357976bda3e11461f4d35" translate="yes" xml:space="preserve">
          <source>TabBarIOS#style</source>
          <target state="translated">TabBarIOS#style</target>
        </trans-unit>
        <trans-unit id="68e88818d6985db203557fae4f5dc0b53f18f7c2" translate="yes" xml:space="preserve">
          <source>TabBarIOS#tintColor</source>
          <target state="translated">TabBarIOS#tintColor</target>
        </trans-unit>
        <trans-unit id="c57394074938c55a95def9b5d8edc31cc50321ec" translate="yes" xml:space="preserve">
          <source>TabBarIOS#translucent</source>
          <target state="translated">TabBarIOS#translucent</target>
        </trans-unit>
        <trans-unit id="9feaa7bad0fe758af66c5d2b6cc358a5b47d986b" translate="yes" xml:space="preserve">
          <source>TabBarIOS#unselectedItemTintColor</source>
          <target state="translated">TabBarIOS#unselectedItemTintColor</target>
        </trans-unit>
        <trans-unit id="11907de901cec834949c2b477a9450a2608df679" translate="yes" xml:space="preserve">
          <source>TabBarIOS#unselectedTintColor</source>
          <target state="translated">TabBarIOS#unselectedTintColor</target>
        </trans-unit>
        <trans-unit id="083085d58536294b2617e47e1d6860c941e5f345" translate="yes" xml:space="preserve">
          <source>TabBarIOS.Item</source>
          <target state="translated">TabBarIOS.Item</target>
        </trans-unit>
        <trans-unit id="de7209fe8a4f3437e02c8773104f9c78722b0d4c" translate="yes" xml:space="preserve">
          <source>TabBarIOS.Item#badge</source>
          <target state="translated">TabBarIOS.Item#badge</target>
        </trans-unit>
        <trans-unit id="04e7ee9f1b5319c6146ad957d3ea0cba91bc2531" translate="yes" xml:space="preserve">
          <source>TabBarIOS.Item#badgeColor</source>
          <target state="translated">TabBarIOS.Item#badgeColor</target>
        </trans-unit>
        <trans-unit id="f010b3fb310f4d57f7771ec69a1c980ef0fe73aa" translate="yes" xml:space="preserve">
          <source>TabBarIOS.Item#icon</source>
          <target state="translated">TabBarIOS.Item#icon</target>
        </trans-unit>
        <trans-unit id="ced633a14d0a888f092c2558b4a99af34bbdeb08" translate="yes" xml:space="preserve">
          <source>TabBarIOS.Item#isTVSelectable</source>
          <target state="translated">TabBarIOS.Item#isTVSelectable</target>
        </trans-unit>
        <trans-unit id="5813ab9ce02680ea7320e686b9d21fe07ce425bd" translate="yes" xml:space="preserve">
          <source>TabBarIOS.Item#onPress</source>
          <target state="translated">TabBarIOS.Item#onPress</target>
        </trans-unit>
        <trans-unit id="bc70e5387f1d9ddf2cc19b13b3108898f6c8de4c" translate="yes" xml:space="preserve">
          <source>TabBarIOS.Item#renderAsOriginal</source>
          <target state="translated">TabBarIOS.Item#renderAsOriginal</target>
        </trans-unit>
        <trans-unit id="04ff7ea7667d21c7bc1bdce72043027eb84ffa1c" translate="yes" xml:space="preserve">
          <source>TabBarIOS.Item#selected</source>
          <target state="translated">TabBarIOS.Item#selected</target>
        </trans-unit>
        <trans-unit id="2ac50dd58f21f14c1cd3eb3920c4c686c8efbf96" translate="yes" xml:space="preserve">
          <source>TabBarIOS.Item#selectedIcon</source>
          <target state="translated">TabBarIOS.Item#selectedIcon</target>
        </trans-unit>
        <trans-unit id="cff9db2f94f12c4d641d3c52849a5ad779a5288d" translate="yes" xml:space="preserve">
          <source>TabBarIOS.Item#style</source>
          <target state="translated">TabBarIOS.Item#style</target>
        </trans-unit>
        <trans-unit id="75ba326ddc4f84c1d73c8e443aea2ffe8628f39f" translate="yes" xml:space="preserve">
          <source>TabBarIOS.Item#systemIcon</source>
          <target state="translated">TabBarIOS.Item#systemIcon</target>
        </trans-unit>
        <trans-unit id="ad48d57518b34ce302340893a66f373900305721" translate="yes" xml:space="preserve">
          <source>TabBarIOS.Item#title</source>
          <target state="translated">TabBarIOS.Item#title</target>
        </trans-unit>
        <trans-unit id="da4db21f2118a27664957aee84bff276367de957" translate="yes" xml:space="preserve">
          <source>Tag the relevant people.</source>
          <target state="translated">관련 사람들을 태그하십시오.</target>
        </trans-unit>
        <trans-unit id="275a74c20fe10f11bf259b293e851b3c9c4a51ec" translate="yes" xml:space="preserve">
          <source>Tag used to log scroll performance on this scroll view. Will force momentum events to be turned on (see sendMomentumEvents). This doesn't do anything out of the box and you need to implement a custom native FpsListener for it to be useful.</source>
          <target state="translated">이 스크롤보기에서 스크롤 성능을 기록하는 데 사용되는 태그입니다. 운동량 이벤트를 강제로 켭니다 (sendMomentumEvents 참조). 이것은 기본적으로 아무것도하지 않으며 유용하게 사용하려면 사용자 정의 네이티브 FpsListener를 구현해야합니다.</target>
        </trans-unit>
        <trans-unit id="c5ad300d8ec641cfc0395022b20434e7be669b27" translate="yes" xml:space="preserve">
          <source>Take a look at the &lt;a href=&quot;animated#configuring-animations&quot;&gt;Configuring animations&lt;/a&gt; section of the &lt;code&gt;Animated&lt;/code&gt; API reference to learn more about all the config parameters supported by the built-in animations.</source>
          <target state="translated">기본 제공 애니메이션에서 지원하는 모든 구성 매개 변수에 대해 자세히 알려면 &lt;code&gt;Animated&lt;/code&gt; API 참조 의 애니메이션 &lt;a href=&quot;animated#configuring-animations&quot;&gt;구성&lt;/a&gt; 섹션을 살펴보십시오 .</target>
        </trans-unit>
        <trans-unit id="9b2172a91891422ad3b56afdfe7b38c5150bf994" translate="yes" xml:space="preserve">
          <source>Take a look at the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Request&quot;&gt;Fetch Request docs&lt;/a&gt; for a full list of properties.</source>
          <target state="translated">(가)에서보세요 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Request&quot;&gt;요청 문서를 가져 오기&lt;/a&gt; 속성의 전체 목록.</target>
        </trans-unit>
        <trans-unit id="986b4c180f80d224eb70f830468a2eb9d7d3b48f" translate="yes" xml:space="preserve">
          <source>Take a look at the &lt;a href=&quot;https://react-native.canny.io/feature-requests&quot;&gt;features requested&lt;/a&gt; by others in the community and consider opening a pull request if you see something you want to work on.</source>
          <target state="translated">커뮤니티의 다른 사용자가 &lt;a href=&quot;https://react-native.canny.io/feature-requests&quot;&gt;요청한 기능을&lt;/a&gt; 살펴보고 작업하려는 것이 있으면 풀 요청을 여는 것을 고려하십시오.</target>
        </trans-unit>
        <trans-unit id="54acef368e36ad72557d1dd4d5bbca95451e8fb6" translate="yes" xml:space="preserve">
          <source>Takes a data entry from the data source and its ids and should return a renderable component to be rendered as the row. By default the data is exactly what was put into the data source, but it's also possible to provide custom extractors. ListView can be notified when a row is being highlighted by calling &lt;code&gt;highlightRow(sectionID, rowID)&lt;/code&gt;. This sets a boolean value of adjacentRowHighlighted in renderSeparator, allowing you to control the separators above and below the highlighted row. The highlighted state of a row can be reset by calling highlightRow(null).</source>
          <target state="translated">데이터 소스 및 해당 ID에서 데이터 항목을 가져 와서 렌더링 가능한 컴포넌트를 행으로 렌더링해야합니다. 기본적으로 데이터는 데이터 소스에 입력 된 것과 정확히 같지만 사용자 지정 추출기를 제공 할 수도 있습니다. &lt;code&gt;highlightRow(sectionID, rowID)&lt;/code&gt; 호출하여 행이 강조 표시 될 때 ListView에 알릴 수 있습니다 . renderSeparator에서 인접한 RowHighlighted의 부울 값을 설정하여 강조 표시된 행 위와 아래의 구분 기호를 제어 할 수 있습니다. highlightRow (null)을 호출하여 강조 표시된 행 상태를 재설정 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b44ab2bb0eeeb75bcb345f01af8941b831cdf765" translate="yes" xml:space="preserve">
          <source>Takes an array of mappings and extracts values from each arg accordingly, then calls &lt;code&gt;setValue&lt;/code&gt; on the mapped outputs. e.g.</source>
          <target state="translated">매핑 배열을 가져와 그에 따라 각 arg에서 값을 추출한 다음 매핑 된 출력에서 &lt;code&gt;setValue&lt;/code&gt; 를 호출 합니다. 예 :</target>
        </trans-unit>
        <trans-unit id="8eebfb97ca4c2f545460d8a2a8fdbf543274eaab" translate="yes" xml:space="preserve">
          <source>Takes an item from &lt;code&gt;data&lt;/code&gt; and renders it into the list</source>
          <target state="translated">&lt;code&gt;data&lt;/code&gt; 에서 항목을 가져 와서 목록으로 렌더링</target>
        </trans-unit>
        <trans-unit id="80e405629f366aab799ea6c84106f9e23731f2c5" translate="yes" xml:space="preserve">
          <source>Takes an item from &lt;code&gt;data&lt;/code&gt; and renders it into the list.</source>
          <target state="translated">&lt;code&gt;data&lt;/code&gt; 에서 항목을 가져 와서 목록에 렌더링합니다.</target>
        </trans-unit>
        <trans-unit id="14f9dfa0db8e74a49c5c7d7b439b89b961cd390a" translate="yes" xml:space="preserve">
          <source>Tells the list an interaction has occured, which should trigger viewability calculations, e.g. if &lt;code&gt;waitForInteractions&lt;/code&gt; is true and the user has not scrolled. This is typically called by taps on items or by navigation actions.</source>
          <target state="translated">&lt;code&gt;waitForInteractions&lt;/code&gt; 가 true이고 사용자가 스크롤하지 않은 경우와 같이 조회 가능성 계산을 트리거해야하는 상호 작용이 발생한 목록을 알려줍니다 . 일반적으로 항목을 탭하거나 탐색 작업을 통해 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="a26f916e2d89adb6afc5a647f984ab00c43a1130" translate="yes" xml:space="preserve">
          <source>Tells the list an interaction has occurred, which should trigger viewability calculations, e.g. if &lt;code&gt;waitForInteractions&lt;/code&gt; is true and the user has not scrolled. This is typically called by taps on items or by navigation actions.</source>
          <target state="translated">&lt;code&gt;waitForInteractions&lt;/code&gt; 가 true이고 사용자가 스크롤하지 않은 경우와 같이 조회 가능성 계산을 트리거해야하는 상호 작용이 발생한 목록을 알려줍니다 . 일반적으로 항목을 탭하거나 탐색 작업을 통해 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="0b4cd4f995019d6ff36200be6e215aeb53a19138" translate="yes" xml:space="preserve">
          <source>Terminating a process on port 8081</source>
          <target state="translated">포트 8081에서 프로세스 종료</target>
        </trans-unit>
        <trans-unit id="5c2bfa76d23bccc54d981cb25c3fb6c74e0041ad" translate="yes" xml:space="preserve">
          <source>Test and Measure Improvements</source>
          <target state="translated">테스트 및 측정 개선</target>
        </trans-unit>
        <trans-unit id="afa2ab77f0e4c73a5b8752118ebc04b1efa8e6f1" translate="yes" xml:space="preserve">
          <source>Test plan</source>
          <target state="translated">테스트 계획</target>
        </trans-unit>
        <trans-unit id="f4df32c15dea68447d29987dfd251d7dcdff81c9" translate="yes" xml:space="preserve">
          <source>Test your integration</source>
          <target state="translated">통합 테스트</target>
        </trans-unit>
        <trans-unit id="b21cc0be41a02fff0c48957fb274aeb3bbfe02db" translate="yes" xml:space="preserve">
          <source>Testing VoiceOver Support (iOS)</source>
          <target state="translated">VoiceOver 지원 테스트 (iOS)</target>
        </trans-unit>
        <trans-unit id="603caced5f80d81b533e86d7cefae6e72d9f8d18" translate="yes" xml:space="preserve">
          <source>Testing the release build of your app</source>
          <target state="translated">앱의 릴리스 빌드 테스트</target>
        </trans-unit>
        <trans-unit id="7c2ec7e2152ee65a2c55691b84e1418d1179b25d" translate="yes" xml:space="preserve">
          <source>Testing your Changes</source>
          <target state="translated">변경 사항 테스트</target>
        </trans-unit>
        <trans-unit id="c3328c39b0e29f78e9ff45db674248b1d245887d" translate="yes" xml:space="preserve">
          <source>Text</source>
          <target state="translated">Text</target>
        </trans-unit>
        <trans-unit id="3d9b17f71a061efc1822ec65908a81acf32f3db2" translate="yes" xml:space="preserve">
          <source>Text Style Props</source>
          <target state="translated">텍스트 스타일 소품</target>
        </trans-unit>
        <trans-unit id="c61f972954a30d711b9ba989e46737a9e7ba2f36" translate="yes" xml:space="preserve">
          <source>Text Style Props#color</source>
          <target state="translated">텍스트 스타일 소품</target>
        </trans-unit>
        <trans-unit id="4d88aa486bbea57cbeedd5cf8cc4ee9f91dc2a51" translate="yes" xml:space="preserve">
          <source>Text Style Props#fontFamily</source>
          <target state="translated">텍스트 스타일 소품 #fontFamily</target>
        </trans-unit>
        <trans-unit id="c18e6d10b3da32f05c19c47a00c69cc604759340" translate="yes" xml:space="preserve">
          <source>Text Style Props#fontSize</source>
          <target state="translated">텍스트 스타일 소품 #fontSize</target>
        </trans-unit>
        <trans-unit id="eae60d841c6501f22b4535fbc6d0b90bcd0f0a1d" translate="yes" xml:space="preserve">
          <source>Text Style Props#fontStyle</source>
          <target state="translated">텍스트 스타일 소품 #fontStyle</target>
        </trans-unit>
        <trans-unit id="e5748425fb1080eeb8994c10ee3414d9d0e443ff" translate="yes" xml:space="preserve">
          <source>Text Style Props#fontVariant</source>
          <target state="translated">텍스트 스타일 소품 #fontVariant</target>
        </trans-unit>
        <trans-unit id="26805327c87d6572dc6306017a732d9d0b72d0ad" translate="yes" xml:space="preserve">
          <source>Text Style Props#fontWeight</source>
          <target state="translated">텍스트 스타일 소품 #fontWeight</target>
        </trans-unit>
        <trans-unit id="0ac49c52da74c8d7c6b6b39aab1c62eac018ea86" translate="yes" xml:space="preserve">
          <source>Text Style Props#includeFontPadding</source>
          <target state="translated">텍스트 스타일 소품 #includeFontPadding</target>
        </trans-unit>
        <trans-unit id="ad204b577b20d3585a7a20efdedcf18a19bc11a7" translate="yes" xml:space="preserve">
          <source>Text Style Props#letterSpacing</source>
          <target state="translated">텍스트 스타일 소품 #letterSpacing</target>
        </trans-unit>
        <trans-unit id="a42abd51e8c07bc32a0ef68183128b6ef9460eb9" translate="yes" xml:space="preserve">
          <source>Text Style Props#lineHeight</source>
          <target state="translated">텍스트 스타일 소품 #lineHeight</target>
        </trans-unit>
        <trans-unit id="cf7dedb68a4dafefb2882ee07a0525bf198d1906" translate="yes" xml:space="preserve">
          <source>Text Style Props#textAlign</source>
          <target state="translated">텍스트 스타일 소품 #textAlign</target>
        </trans-unit>
        <trans-unit id="1e91f0978efd58b434dcee80523fc7cde4f66dbb" translate="yes" xml:space="preserve">
          <source>Text Style Props#textAlignVertical</source>
          <target state="translated">텍스트 스타일 소품 #textAlignVertical</target>
        </trans-unit>
        <trans-unit id="cd06ff340c555b98ea8300703e56b9f68c8c937c" translate="yes" xml:space="preserve">
          <source>Text Style Props#textDecorationColor</source>
          <target state="translated">텍스트 스타일 소품 #textDecorationColor</target>
        </trans-unit>
        <trans-unit id="94114fa8cdfd58f254dcdaf0b2d12d62215207fe" translate="yes" xml:space="preserve">
          <source>Text Style Props#textDecorationLine</source>
          <target state="translated">텍스트 스타일 소품 #textDecorationLine</target>
        </trans-unit>
        <trans-unit id="5dbfafeea7bc54ce2bf17c0074811e97452514fd" translate="yes" xml:space="preserve">
          <source>Text Style Props#textDecorationStyle</source>
          <target state="translated">텍스트 스타일 소품 #textDecorationStyle</target>
        </trans-unit>
        <trans-unit id="101e1e04d57d1f45c0a30a0e81e750b3bb632caa" translate="yes" xml:space="preserve">
          <source>Text Style Props#textShadowColor</source>
          <target state="translated">텍스트 스타일 소품 #textShadowColor</target>
        </trans-unit>
        <trans-unit id="55eaf6dfa1430a525a265de9c02c93dba606d279" translate="yes" xml:space="preserve">
          <source>Text Style Props#textShadowOffset</source>
          <target state="translated">텍스트 스타일 소품 #textShadowOffset</target>
        </trans-unit>
        <trans-unit id="6e1e0c8ff094ee6ddf7951b9d5628b9235a92b62" translate="yes" xml:space="preserve">
          <source>Text Style Props#textShadowRadius</source>
          <target state="translated">텍스트 스타일 소품 #textShadowRadius</target>
        </trans-unit>
        <trans-unit id="d14b9cf6d9e0b8684b8e534f7fd4ed850728550f" translate="yes" xml:space="preserve">
          <source>Text Style Props#textTransform</source>
          <target state="translated">텍스트 스타일 소품</target>
        </trans-unit>
        <trans-unit id="f7f64f3848c3e638784cfad9dcabdb2a3b9db466" translate="yes" xml:space="preserve">
          <source>Text Style Props#writingDirection</source>
          <target state="translated">텍스트 스타일 소품 #writingDirection</target>
        </trans-unit>
        <trans-unit id="b24d012cf2fc8780b4a27af04a714fc84dfc095c" translate="yes" xml:space="preserve">
          <source>Text input is one of the ways the user interacts with the app. Next, let's look at another type of input and &lt;a href=&quot;handling-touches&quot;&gt;learn how to handle touches&lt;/a&gt;.</source>
          <target state="translated">텍스트 입력은 사용자가 앱과 상호 작용하는 방법 중 하나입니다. 다음으로 다른 유형의 입력을 &lt;a href=&quot;handling-touches&quot;&gt;보고 터치를 처리하는 방법에 대해 알아 보겠습니다&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="e18f59cc06178d7daed9eea6487c99fafa7082bc" translate="yes" xml:space="preserve">
          <source>Text that appears under the icon. It is ignored when a system icon is defined.</source>
          <target state="translated">아이콘 아래에 나타나는 텍스트. 시스템 아이콘이 정의되면 무시됩니다.</target>
        </trans-unit>
        <trans-unit id="49691735842942bb3626d19a6587fd5b270cc4af" translate="yes" xml:space="preserve">
          <source>Text to display for blindness accessibility features</source>
          <target state="translated">실명 접근 기능을 위해 표시 할 텍스트</target>
        </trans-unit>
        <trans-unit id="e24797a4945527f162b6657319c304ec12799559" translate="yes" xml:space="preserve">
          <source>Text to display inside the button</source>
          <target state="translated">버튼 안에 표시 할 텍스트</target>
        </trans-unit>
        <trans-unit id="64d6154cd2887defb16791899f63b8ea1be44aa6" translate="yes" xml:space="preserve">
          <source>Text#accessible</source>
          <target state="translated">Text#accessible</target>
        </trans-unit>
        <trans-unit id="4c275467640d49b14746bcdae295ddd8f447ede4" translate="yes" xml:space="preserve">
          <source>Text#adjustsFontSizeToFit</source>
          <target state="translated">Text#adjustsFontSizeToFit</target>
        </trans-unit>
        <trans-unit id="20ea9eb12e7e39abdef33e26d9e8f04c8d9b899b" translate="yes" xml:space="preserve">
          <source>Text#allowFontScaling</source>
          <target state="translated">Text#allowFontScaling</target>
        </trans-unit>
        <trans-unit id="d298ed01d54553352f12154455017a29e2d44756" translate="yes" xml:space="preserve">
          <source>Text#disabled</source>
          <target state="translated">Text#disabled</target>
        </trans-unit>
        <trans-unit id="e8659fe4ff2b9a59cc6965e05619a9dea632f049" translate="yes" xml:space="preserve">
          <source>Text#ellipsizeMode</source>
          <target state="translated">Text#ellipsizeMode</target>
        </trans-unit>
        <trans-unit id="310ecba5f158ea34bfd695bf14b9613c55be00cf" translate="yes" xml:space="preserve">
          <source>Text#minimumFontScale</source>
          <target state="translated">Text#minimumFontScale</target>
        </trans-unit>
        <trans-unit id="ee41f87c5957ea64738307ed55cd00f9ccda8ae0" translate="yes" xml:space="preserve">
          <source>Text#nativeID</source>
          <target state="translated">Text#nativeID</target>
        </trans-unit>
        <trans-unit id="63d0c1a80db2df719726788d3f01889c88f9e34f" translate="yes" xml:space="preserve">
          <source>Text#numberOfLines</source>
          <target state="translated">Text#numberOfLines</target>
        </trans-unit>
        <trans-unit id="10eb56de8aae2e832a210f9e383a6343494c7a03" translate="yes" xml:space="preserve">
          <source>Text#onLayout</source>
          <target state="translated">Text#onLayout</target>
        </trans-unit>
        <trans-unit id="94c2b5c42f22db009ad076155e9e939edf7629eb" translate="yes" xml:space="preserve">
          <source>Text#onLongPress</source>
          <target state="translated">Text#onLongPress</target>
        </trans-unit>
        <trans-unit id="b4199c8c3178ce3e5c421ee90a00722658326faa" translate="yes" xml:space="preserve">
          <source>Text#onPress</source>
          <target state="translated">Text#onPress</target>
        </trans-unit>
        <trans-unit id="8bb0af8e6128747344dd111237460fb1fefcf2d7" translate="yes" xml:space="preserve">
          <source>Text#pressRetentionOffset</source>
          <target state="translated">Text#pressRetentionOffset</target>
        </trans-unit>
        <trans-unit id="7afe4f98923e67fe1f06a72a39133cfaaa1b3bf0" translate="yes" xml:space="preserve">
          <source>Text#selectable</source>
          <target state="translated">Text#selectable</target>
        </trans-unit>
        <trans-unit id="2835181c04c591fc6b106d4ef29434f09b482650" translate="yes" xml:space="preserve">
          <source>Text#selectionColor</source>
          <target state="translated">Text#selectionColor</target>
        </trans-unit>
        <trans-unit id="a80176ae16b7d7bd30166c2bd16e81eed6907b3a" translate="yes" xml:space="preserve">
          <source>Text#style</source>
          <target state="translated">Text#style</target>
        </trans-unit>
        <trans-unit id="d22f6dd375901a286f96248be0cad34aea905dcb" translate="yes" xml:space="preserve">
          <source>Text#suppressHighlighting</source>
          <target state="translated">Text#suppressHighlighting</target>
        </trans-unit>
        <trans-unit id="d9f7071ad3f626557595f73d5e868ddefe4ac17b" translate="yes" xml:space="preserve">
          <source>Text#testID</source>
          <target state="translated">Text#testID</target>
        </trans-unit>
        <trans-unit id="e787a060a125df55c55f90a86563a1e953e458a6" translate="yes" xml:space="preserve">
          <source>Text#textBreakStrategy</source>
          <target state="translated">Text#textBreakStrategy</target>
        </trans-unit>
        <trans-unit id="5e2fc1bfacb6999f20887e827d2295c0b41a052c" translate="yes" xml:space="preserve">
          <source>TextInput</source>
          <target state="translated">TextInput</target>
        </trans-unit>
        <trans-unit id="8f6137a54cf9649f19ce4e5bf54bad3e5a4a2ab4" translate="yes" xml:space="preserve">
          <source>TextInput#allowFontScaling</source>
          <target state="translated">TextInput#allowFontScaling</target>
        </trans-unit>
        <trans-unit id="c51861b14fb332ee422a9c826d41f0ab3595fe57" translate="yes" xml:space="preserve">
          <source>TextInput#autoCapitalize</source>
          <target state="translated">TextInput#autoCapitalize</target>
        </trans-unit>
        <trans-unit id="e7db14b30fc6e2726c296b453007fa5e438815ce" translate="yes" xml:space="preserve">
          <source>TextInput#autoCorrect</source>
          <target state="translated">TextInput#autoCorrect</target>
        </trans-unit>
        <trans-unit id="22af55a058b06fd3c4863d76cd5d1a01779d1e4e" translate="yes" xml:space="preserve">
          <source>TextInput#autoFocus</source>
          <target state="translated">TextInput#autoFocus</target>
        </trans-unit>
        <trans-unit id="ab4516fe355d6805bce3b15fce544c2b15fa796f" translate="yes" xml:space="preserve">
          <source>TextInput#blurOnSubmit</source>
          <target state="translated">TextInput#blurOnSubmit</target>
        </trans-unit>
        <trans-unit id="461708f4c1351733c637054ac6e26151d92e7227" translate="yes" xml:space="preserve">
          <source>TextInput#caretHidden</source>
          <target state="translated">TextInput#caretHidden</target>
        </trans-unit>
        <trans-unit id="37aa1f7717c20567bd5ea953ee2e4c1318be5df4" translate="yes" xml:space="preserve">
          <source>TextInput#clearButtonMode</source>
          <target state="translated">TextInput#clearButtonMode</target>
        </trans-unit>
        <trans-unit id="cef83d09f349312e62c1bc8054e7ee91682b7696" translate="yes" xml:space="preserve">
          <source>TextInput#clearTextOnFocus</source>
          <target state="translated">TextInput#clearTextOnFocus</target>
        </trans-unit>
        <trans-unit id="b41a0c303c0090490da47a440c5f3d532674a35d" translate="yes" xml:space="preserve">
          <source>TextInput#contextMenuHidden</source>
          <target state="translated">TextInput#contextMenuHidden</target>
        </trans-unit>
        <trans-unit id="d1335f308c541c432e7c0e5d4c9f1734daf1359c" translate="yes" xml:space="preserve">
          <source>TextInput#dataDetectorTypes</source>
          <target state="translated">TextInput#dataDetectorTypes</target>
        </trans-unit>
        <trans-unit id="6ac968b65946bf6094e1e1a3445c8d442a648ad9" translate="yes" xml:space="preserve">
          <source>TextInput#defaultValue</source>
          <target state="translated">TextInput#defaultValue</target>
        </trans-unit>
        <trans-unit id="6d7e3f71db3c07a79343a8d817397e48e729c00e" translate="yes" xml:space="preserve">
          <source>TextInput#disableFullscreenUI</source>
          <target state="translated">TextInput#disableFullscreenUI</target>
        </trans-unit>
        <trans-unit id="fab8e5117095706b69c4505133499ad8ca759bfd" translate="yes" xml:space="preserve">
          <source>TextInput#editable</source>
          <target state="translated">TextInput#editable</target>
        </trans-unit>
        <trans-unit id="7c35e7d91d6a7dbe76276505c5b7cbcf47ff5d96" translate="yes" xml:space="preserve">
          <source>TextInput#enablesReturnKeyAutomatically</source>
          <target state="translated">TextInput#enablesReturnKeyAutomatically</target>
        </trans-unit>
        <trans-unit id="7714dff4044659b2521b4d13cc3464b4439c8e5f" translate="yes" xml:space="preserve">
          <source>TextInput#inlineImageLeft</source>
          <target state="translated">TextInput#inlineImageLeft</target>
        </trans-unit>
        <trans-unit id="3e6a1b4f1c164ce84aa70282910a8317b56ee4ed" translate="yes" xml:space="preserve">
          <source>TextInput#inlineImagePadding</source>
          <target state="translated">TextInput#inlineImagePadding</target>
        </trans-unit>
        <trans-unit id="792b3d396d147da1d46049d4d700bd625e4b61ac" translate="yes" xml:space="preserve">
          <source>TextInput#keyboardAppearance</source>
          <target state="translated">TextInput#keyboardAppearance</target>
        </trans-unit>
        <trans-unit id="0eb680e7cb53a7859a0ceab462835a53923b4620" translate="yes" xml:space="preserve">
          <source>TextInput#keyboardType</source>
          <target state="translated">TextInput#keyboardType</target>
        </trans-unit>
        <trans-unit id="f5f83356b44f2af81386e42406b60fabb779bd0f" translate="yes" xml:space="preserve">
          <source>TextInput#maxLength</source>
          <target state="translated">TextInput#maxLength</target>
        </trans-unit>
        <trans-unit id="49e767f8ed2f53203511f724a9b0b91edefe8d1b" translate="yes" xml:space="preserve">
          <source>TextInput#multiline</source>
          <target state="translated">TextInput#multiline</target>
        </trans-unit>
        <trans-unit id="a3f3aaeb6f5d45ea67736f337d3004a50ce485bf" translate="yes" xml:space="preserve">
          <source>TextInput#numberOfLines</source>
          <target state="translated">TextInput#numberOfLines</target>
        </trans-unit>
        <trans-unit id="0384193061322bf7dc26b14a506c88be5703df77" translate="yes" xml:space="preserve">
          <source>TextInput#onBlur</source>
          <target state="translated">TextInput#onBlur</target>
        </trans-unit>
        <trans-unit id="34249b260b87a48c290b207f6e8d3ef288017267" translate="yes" xml:space="preserve">
          <source>TextInput#onChange</source>
          <target state="translated">TextInput#onChange</target>
        </trans-unit>
        <trans-unit id="ec7d55015235475c8e571d5b42cbbb8111a37ceb" translate="yes" xml:space="preserve">
          <source>TextInput#onChangeText</source>
          <target state="translated">TextInput#onChangeText</target>
        </trans-unit>
        <trans-unit id="f060e56c9c23fe3042ee04412ed16c7ddae37328" translate="yes" xml:space="preserve">
          <source>TextInput#onContentSizeChange</source>
          <target state="translated">TextInput#onContentSizeChange</target>
        </trans-unit>
        <trans-unit id="7e313e1bb0da0342de34879fc43cce51873384f3" translate="yes" xml:space="preserve">
          <source>TextInput#onEndEditing</source>
          <target state="translated">TextInput#onEndEditing</target>
        </trans-unit>
        <trans-unit id="de6e2416c294e8c35ee274e7f5df8473db83c70d" translate="yes" xml:space="preserve">
          <source>TextInput#onFocus</source>
          <target state="translated">TextInput#onFocus</target>
        </trans-unit>
        <trans-unit id="2ebe4a9d104b15b32780209e2742e3386a7a99c4" translate="yes" xml:space="preserve">
          <source>TextInput#onKeyPress</source>
          <target state="translated">TextInput#onKeyPress</target>
        </trans-unit>
        <trans-unit id="280edfdc559df16cc8f51c66a206403475ad6525" translate="yes" xml:space="preserve">
          <source>TextInput#onLayout</source>
          <target state="translated">TextInput#onLayout</target>
        </trans-unit>
        <trans-unit id="bcf85f903d101173a56d48b9fb1a8121e725a31c" translate="yes" xml:space="preserve">
          <source>TextInput#onScroll</source>
          <target state="translated">TextInput#onScroll</target>
        </trans-unit>
        <trans-unit id="720784f322877b59e78d138fc18540a00f248023" translate="yes" xml:space="preserve">
          <source>TextInput#onSelectionChange</source>
          <target state="translated">TextInput#onSelectionChange</target>
        </trans-unit>
        <trans-unit id="c13e2f90b4e4f3680053aed8e2831022d131ac5b" translate="yes" xml:space="preserve">
          <source>TextInput#onSubmitEditing</source>
          <target state="translated">TextInput#onSubmitEditing</target>
        </trans-unit>
        <trans-unit id="86095f4941e44c2eb4064fe2064cb54c8bb9fff7" translate="yes" xml:space="preserve">
          <source>TextInput#placeholder</source>
          <target state="translated">TextInput#placeholder</target>
        </trans-unit>
        <trans-unit id="037602ff9a199b8042fda3ca0ac59986f385e161" translate="yes" xml:space="preserve">
          <source>TextInput#placeholderTextColor</source>
          <target state="translated">TextInput#placeholderTextColor</target>
        </trans-unit>
        <trans-unit id="6ac658211b9757139e91c1175358cf27826fb58e" translate="yes" xml:space="preserve">
          <source>TextInput#returnKeyLabel</source>
          <target state="translated">TextInput#returnKeyLabel</target>
        </trans-unit>
        <trans-unit id="b08bb90350dc980f5f83fc50c764c3a7f02c1eb6" translate="yes" xml:space="preserve">
          <source>TextInput#returnKeyType</source>
          <target state="translated">TextInput#returnKeyType</target>
        </trans-unit>
        <trans-unit id="9cb8528f926aee22bb7b60978c6a1b417d20c8cd" translate="yes" xml:space="preserve">
          <source>TextInput#secureTextEntry</source>
          <target state="translated">TextInput#secureTextEntry</target>
        </trans-unit>
        <trans-unit id="56387d0343ed84ecd1f7406b846517f0ebaefaa9" translate="yes" xml:space="preserve">
          <source>TextInput#selectTextOnFocus</source>
          <target state="translated">TextInput#selectTextOnFocus</target>
        </trans-unit>
        <trans-unit id="683c6cae4732e73ef0ed7da3008e693666cc7aa9" translate="yes" xml:space="preserve">
          <source>TextInput#selection</source>
          <target state="translated">TextInput#selection</target>
        </trans-unit>
        <trans-unit id="7f07636a844dbd13d5f17b4bf79d006bf65f6532" translate="yes" xml:space="preserve">
          <source>TextInput#selectionColor</source>
          <target state="translated">TextInput#selectionColor</target>
        </trans-unit>
        <trans-unit id="813cf9cc2a600775baaf4df236c2a1ece4b84fda" translate="yes" xml:space="preserve">
          <source>TextInput#selectionState</source>
          <target state="translated">TextInput#selectionState</target>
        </trans-unit>
        <trans-unit id="9c9342cbf35d00ceae8490e5952cee9f07a0353a" translate="yes" xml:space="preserve">
          <source>TextInput#spellCheck</source>
          <target state="translated">TextInput#spellCheck</target>
        </trans-unit>
        <trans-unit id="17fa34c340a284f138ed6791d90d6f1819e27e86" translate="yes" xml:space="preserve">
          <source>TextInput#style</source>
          <target state="translated">TextInput#style</target>
        </trans-unit>
        <trans-unit id="cfea93f40ec533ebe0a5fbbbcb0be7d4b8aba1fd" translate="yes" xml:space="preserve">
          <source>TextInput#textBreakStrategy</source>
          <target state="translated">TextInput#textBreakStrategy</target>
        </trans-unit>
        <trans-unit id="3823e0b281484b519274e44c50bfe8bcd62b89fc" translate="yes" xml:space="preserve">
          <source>TextInput#textContentType</source>
          <target state="translated">TextInput#textContentType</target>
        </trans-unit>
        <trans-unit id="c2f1d571cc1dc38ffbcf13899cc6e6820194fd7a" translate="yes" xml:space="preserve">
          <source>TextInput#underlineColorAndroid</source>
          <target state="translated">TextInput#underlineColorAndroid</target>
        </trans-unit>
        <trans-unit id="f47415806cbf61cd7f26e86532063ad0ad6788a4" translate="yes" xml:space="preserve">
          <source>TextInput#value</source>
          <target state="translated">TextInput#value</target>
        </trans-unit>
        <trans-unit id="b9d0a24d4f3442934667ffe906449c64977c8d92" translate="yes" xml:space="preserve">
          <source>TextInput.clear()</source>
          <target state="translated">TextInput.clear()</target>
        </trans-unit>
        <trans-unit id="dc112032cfd811093afb84b77b7793e1d70c9c40" translate="yes" xml:space="preserve">
          <source>TextInput.isFocused()</source>
          <target state="translated">TextInput.isFocused()</target>
        </trans-unit>
        <trans-unit id="da1acfac6c17674970b8e393431f09ea853f0850" translate="yes" xml:space="preserve">
          <source>Thanks for making the pull request, but we are closing it due to inactivity. If you want to get your proposed changes merged, please rebase your branch with master and send a new pull request.</source>
          <target state="translated">풀 요청을 해주셔서 감사합니다. 비활성 상태로 인해 요청을 마감하고 있습니다. 제안 된 변경 사항을 병합하려면 지점을 마스터로 리베이스하고 새로운 풀 요청을 보내십시오.</target>
        </trans-unit>
        <trans-unit id="e93f4cf2c16977aa0828b84202ee64df60519c65" translate="yes" xml:space="preserve">
          <source>That's it!</source>
          <target state="translated">그게 다야!</target>
        </trans-unit>
        <trans-unit id="e55c8d6a3020fe886e1d39aa6a7e439952698f6c" translate="yes" xml:space="preserve">
          <source>That's it. We did not remove the &lt;code&gt;INTERNET&lt;/code&gt; permission as pretty much all apps use it. Now whenever you create a production APK all these 4 permissions will be removed. When you create a debug APK (&lt;code&gt;react-native run-android&lt;/code&gt;) it will install the APK with only the three permissions removed, and &lt;code&gt;SYSTEM_ALERT_WINDOW&lt;/code&gt; will remain.</source>
          <target state="translated">그게 다야. 거의 모든 앱에서 사용하기 때문에 &lt;code&gt;INTERNET&lt;/code&gt; 권한을 제거하지 않았습니다 . 이제 프로덕션 APK를 만들 때마다이 4 가지 권한이 모두 제거됩니다. 디버그 APK ( &lt;code&gt;react-native run-android&lt;/code&gt; ) 를 만들면 세 가지 권한 만 제거하여 APK를 설치하고 &lt;code&gt;SYSTEM_ALERT_WINDOW&lt;/code&gt; 가 유지됩니다.</target>
        </trans-unit>
        <trans-unit id="6080d90a81febb097c98ed7fa2f273fb55cf8412" translate="yes" xml:space="preserve">
          <source>The 'callback' function takes one parameter, the zero-based index of the selected item.</source>
          <target state="translated">'콜백'함수는 선택한 항목의 0부터 시작하는 인덱스 중 하나의 매개 변수를 사용합니다.</target>
        </trans-unit>
        <trans-unit id="24e54117e5c494ef260259e099f3fe33fbbf239a" translate="yes" xml:space="preserve">
          <source>The 'failureCallback' function takes one parameter, an error object. The only property defined on this object is an optional &lt;code&gt;stack&lt;/code&gt; property of type &lt;code&gt;string&lt;/code&gt;.</source>
          <target state="translated">'failureCallback'함수는 하나의 매개 변수, 오류 객체를 사용합니다. 이 객체에 정의 된 유일한 속성은 &lt;code&gt;string&lt;/code&gt; 유형 의 선택적 &lt;code&gt;stack&lt;/code&gt; 속성입니다 .</target>
        </trans-unit>
        <trans-unit id="44c015d8837473f0f54a94bbbe1a489b83113a27" translate="yes" xml:space="preserve">
          <source>The 'showWithGravityAndOffset' function adds on the ability to specify offset These offset values will translate to pixels.</source>
          <target state="translated">'showWithGravityAndOffset'함수는 오프셋을 지정하는 기능을 추가합니다.이 오프셋 값은 픽셀로 변환됩니다.</target>
        </trans-unit>
        <trans-unit id="6f39a292b1eddb5636c7ab14123b16876fb25d18" translate="yes" xml:space="preserve">
          <source>The 'successCallback' function takes two parameters:</source>
          <target state="translated">'successCallback'함수는 두 가지 매개 변수를 사용합니다.</target>
        </trans-unit>
        <trans-unit id="8bf8f7269f76092d7aef471e68eff6a8491a8718" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;animated&quot;&gt;&lt;code&gt;Animated&lt;/code&gt;&lt;/a&gt; API is designed to make it very easy to concisely express a wide variety of interesting animation and interaction patterns in a very performant way. &lt;code&gt;Animated&lt;/code&gt; focuses on declarative relationships between inputs and outputs, with configurable transforms in between, and simple &lt;code&gt;start&lt;/code&gt;/&lt;code&gt;stop&lt;/code&gt; methods to control time-based animation execution.</source>
          <target state="translated">&lt;a href=&quot;animated&quot;&gt; &lt;code&gt;Animated&lt;/code&gt; &lt;/a&gt; API는 매우 쉽게 간결하게 아주 성능이 좋은 방법으로 재미있는 애니메이션과 상호 작용 패턴의 다양한 표현을 할 수 있도록 설계되었습니다. &lt;code&gt;Animated&lt;/code&gt; 는 입력과 출력 사이의 선언적 관계, 구성 가능한 변환 사이, 시간 기반 애니메이션 실행을 제어하는 간단한 &lt;code&gt;start&lt;/code&gt; / &lt;code&gt;stop&lt;/code&gt; 방법을 사용하여 초점을 맞 춥니 다 .</target>
        </trans-unit>
        <trans-unit id="4c5982a502ab62e111c85a3f615073fd5b1d877b" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;debugging#react-developer-tools&quot;&gt;React Developer Tools&lt;/a&gt; are great for debugging React and React Native apps.</source>
          <target state="translated">는 &lt;a href=&quot;debugging#react-developer-tools&quot;&gt;개발자 도구 반응&lt;/a&gt; 반응 네이티브 애플리케이션 반응 디버깅을 위해 중대하다.</target>
        </trans-unit>
        <trans-unit id="7f28e384f786987743bbc97a993a87a3817c1e7e" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;easing#poly&quot;&gt;&lt;code&gt;poly&lt;/code&gt;&lt;/a&gt; function can be used to implement quartic, quintic, and other higher power functions.</source>
          <target state="translated">&lt;a href=&quot;easing#poly&quot;&gt; &lt;code&gt;poly&lt;/code&gt; &lt;/a&gt; 함수는 사차에서 quintic 및 다른 높은 전력 기능들을 구현하는데 사용될 수있다.</target>
        </trans-unit>
        <trans-unit id="e9e79f972a4e185717ca452e81bc8b0bbeb7db83" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest&quot;&gt;XMLHttpRequest API&lt;/a&gt; is built in to React Native. This means that you can use third party libraries such as &lt;a href=&quot;https://github.com/niftylettuce/frisbee&quot;&gt;frisbee&lt;/a&gt; or &lt;a href=&quot;https://github.com/mzabriskie/axios&quot;&gt;axios&lt;/a&gt; that depend on it, or you can use the XMLHttpRequest API directly if you prefer.</source>
          <target state="translated">&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest&quot;&gt;XMLHttpRequest의 API는&lt;/a&gt; 기본을 반응에 내장되어 있습니다. 따라서 &lt;a href=&quot;https://github.com/niftylettuce/frisbee&quot;&gt;프리즈 비&lt;/a&gt; 또는 &lt;a href=&quot;https://github.com/mzabriskie/axios&quot;&gt;Axios&lt;/a&gt; 와 같은 타사 라이브러리 를 사용하거나 원하는 경우 XMLHttpRequest API를 직접 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="6a3215e9e755d5dfeb85680b0770fe96018cd5ed" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://discuss.reactjs.org/&quot;&gt;forum at discuss.reactjs.org&lt;/a&gt; is a great place for discussion about best practices and application architecture as well as the future of React Native.</source>
          <target state="translated">&lt;a href=&quot;https://discuss.reactjs.org/&quot;&gt;토론 .reactjs.org&lt;/a&gt; 의 포럼 은 React Native의 미래뿐만 아니라 모범 사례 및 애플리케이션 아키텍처에 대한 토론을위한 훌륭한 장소입니다.</target>
        </trans-unit>
        <trans-unit id="7767d6134433ed26fa9021bdcdae2607b1c47cc9" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://github.com/facebook/react-native&quot;&gt;&lt;code&gt;facebook/react-native&lt;/code&gt;&lt;/a&gt; repository on GitHub contains a mirror of the React Native library used internally at Facebook. The GitHub repository is linked to Facebook's internal source control, and all changes made to the internal React Native project &lt;a href=&quot;https://github.com/facebook/react-native/commits/master&quot;&gt;get synced to the &lt;code&gt;master&lt;/code&gt; branch on GitHub&lt;/a&gt; on an ongoing basis. Having Facebook's internal source control serve as the source of truth allows engineers at Facebook outside of the React Native team to move fast and contritube from an environment they are comfortable in.</source>
          <target state="translated">GitHub 의 &lt;a href=&quot;https://github.com/facebook/react-native&quot;&gt; &lt;code&gt;facebook/react-native&lt;/code&gt; &lt;/a&gt; 액트 네이티브 리포지토리에는 Facebook에서 내부적으로 사용되는 React Native 라이브러리의 미러가 포함되어 있습니다. GitHub 리포지토리는 Facebook의 내부 소스 제어에 연결되며 내부 React Native 프로젝트의 모든 변경 사항은 지속적으로 &lt;a href=&quot;https://github.com/facebook/react-native/commits/master&quot;&gt;GitHub &lt;/a&gt;의 &lt;code&gt;master&lt;/code&gt; 브랜치에 동기화 됩니다. Facebook의 내부 소스 제어 기능을 진실의 소스로 사용하면 React Native 팀 외부의 Facebook 엔지니어가 편안한 환경에서 빠르고 Contritube로 이동할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3f498c9af7aadf6496e3e42d9b85b59c41ff62e0" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://twitter.com/reactjs&quot;&gt;React Twitter account&lt;/a&gt; covers both React and React Native. Follow the React Native &lt;a href=&quot;https://twitter.com/reactnative&quot;&gt;Twitter account&lt;/a&gt; and &lt;a href=&quot;https://facebook.github.io/react-native/blog/&quot;&gt;blog&lt;/a&gt; to find out what's happening in the world of React Native.</source>
          <target state="translated">는 &lt;a href=&quot;https://twitter.com/reactjs&quot;&gt;트위터 계정 반작용&lt;/a&gt; 커버를 모두 반응 원주민 반응한다. React Native &lt;a href=&quot;https://twitter.com/reactnative&quot;&gt;Twitter 계정&lt;/a&gt; 및 &lt;a href=&quot;https://facebook.github.io/react-native/blog/&quot;&gt;블로그&lt;/a&gt; 를 따라 React Native 세계에서 무슨 일이 일어나고 있는지 알아보십시오.</target>
        </trans-unit>
        <trans-unit id="6eab6f552bee74930768c7a6a83d475b633eecb1" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;scrollview&quot;&gt;ScrollView&lt;/a&gt; is a generic scrolling container that can host multiple components and views. The scrollable items need not be homogeneous, and you can scroll both vertically and horizontally (by setting the &lt;code&gt;horizontal&lt;/code&gt; property).</source>
          <target state="translated">&lt;a href=&quot;scrollview&quot;&gt;있는 ScrollView는&lt;/a&gt; 여러 구성 요소 및 뷰를 호스팅 할 수있는 일반적인 스크롤 컨테이너입니다. 스크롤 가능한 항목은 동종 일 필요가 없으며 &lt;code&gt;horizontal&lt;/code&gt; 속성 을 설정하여 세로 및 가로로 스크롤 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="019ba09058d94cdfe07b47451523c4232e4049e4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&amp;lt;Text&amp;gt;&lt;/code&gt; element is special relative to layout: everything inside is no longer using the flexbox layout but using text layout. This means that elements inside of a &lt;code&gt;&amp;lt;Text&amp;gt;&lt;/code&gt; are no longer rectangles, but wrap when they see the end of the line.</source>
          <target state="translated">&lt;code&gt;&amp;lt;Text&amp;gt;&lt;/code&gt; 요소는 레이아웃에 특별한 상대입니다 : 모든 것을 내부가 인 flexbox 레이아웃을 사용하지만 텍스트 레이아웃을 사용하여 더 이상이다. 즉, &lt;code&gt;&amp;lt;Text&amp;gt;&lt;/code&gt; 내부의 요소 는 더 이상 사각형이 아니지만 선의 끝을 볼 때 줄 바꿈됩니다.</target>
        </trans-unit>
        <trans-unit id="31e6e328bf618f065a57d83a16179606b8cb76ee" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;AccessibilityInfo&lt;/code&gt; API allows you to determine whether or not a screen reader is currently active. See the &lt;a href=&quot;accessibilityinfo&quot;&gt;AccessibilityInfo documentation&lt;/a&gt; for details.</source>
          <target state="translated">&lt;code&gt;AccessibilityInfo&lt;/code&gt; API를 사용하면 화면 판독기가 현재 활성화되어 있는지 여부를 확인할 수 있습니다. 자세한 내용은 &lt;a href=&quot;accessibilityinfo&quot;&gt;AccessibilityInfo 설명서&lt;/a&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="992237d59098c3ffb9bd5d4da57082ead0db8e2f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Animated&lt;/code&gt; API is designed to be serializable. By using the &lt;a href=&quot;http://facebook.github.io/react-native/blog/2017/02/14/using-native-driver-for-animated.html&quot;&gt;native driver&lt;/a&gt;, we send everything about the animation to native before starting the animation, allowing native code to perform the animation on the UI thread without having to go through the bridge on every frame. Once the animation has started, the JS thread can be blocked without affecting the animation.</source>
          <target state="translated">&lt;code&gt;Animated&lt;/code&gt; API는 직렬화 가능하도록 설계되었습니다. &lt;a href=&quot;http://facebook.github.io/react-native/blog/2017/02/14/using-native-driver-for-animated.html&quot;&gt;네이티브 드라이버&lt;/a&gt; 를 사용하면 애니메이션을 시작하기 전에 애니메이션에 대한 모든 것을 네이티브로 보내어 네이티브 코드가 모든 프레임에서 브리지를 거치지 않고도 UI 스레드에서 애니메이션을 수행 할 수 있습니다. 애니메이션이 시작되면 애니메이션에 영향을주지 않고 JS 스레드를 차단할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="8c147dfb9c4fd69046b04e85c0899a72ffd58adc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Animated&lt;/code&gt; library is designed to make animations fluid, powerful, and easy to build and maintain. &lt;code&gt;Animated&lt;/code&gt; focuses on declarative relationships between inputs and outputs, with configurable transforms in between, and simple &lt;code&gt;start&lt;/code&gt;/&lt;code&gt;stop&lt;/code&gt; methods to control time-based animation execution.</source>
          <target state="translated">&lt;code&gt;Animated&lt;/code&gt; 라이브러리는 애니메이션, 유체 강력하고 쉬운 구축 및 유지 관리 할 수 있도록 설계되었습니다. &lt;code&gt;Animated&lt;/code&gt; 는 입력과 출력 간의 선언적 관계, 구성 가능한 변환 사이, 시간 기반 애니메이션 실행을 제어하는 간단한 &lt;code&gt;start&lt;/code&gt; / &lt;code&gt;stop&lt;/code&gt; 방법을 사용하여 초점을 맞 춥니 다 .</target>
        </trans-unit>
        <trans-unit id="838d0eef79c469f7be1ef1efdad13fae666a0b3e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;AsyncStorage&lt;/code&gt; JavaScript code is a simple facade that provides a clear JavaScript API, real &lt;code&gt;Error&lt;/code&gt; objects, and simple non-multi functions. Each method in the API returns a &lt;code&gt;Promise&lt;/code&gt; object.</source>
          <target state="translated">&lt;code&gt;AsyncStorage&lt;/code&gt; 자바 스크립트 코드는 분명 자바 스크립트 API, 실제 제공하는 간단한 외관입니다 &lt;code&gt;Error&lt;/code&gt; 개체 및 간단한 비 멀티 기능을. API의 각 메소드는 &lt;code&gt;Promise&lt;/code&gt; 오브젝트를 리턴 합니다.</target>
        </trans-unit>
        <trans-unit id="db60d8e8e420e046bac2940142c1119a61791ef2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Easing&lt;/code&gt; module implements common easing functions. This module is used by &lt;a href=&quot;animated#timing&quot;&gt;Animated.timing()&lt;/a&gt; to convey physically believable motion in animations.</source>
          <target state="translated">&lt;code&gt;Easing&lt;/code&gt; 모듈 구현은 일반적인 기능을 완화. 이 모듈은 &lt;a href=&quot;animated#timing&quot;&gt;Animated.timing ()&lt;/a&gt; 에서 애니메이션에서 물리적으로 믿을 수있는 동작을 전달하는 데 사용됩니다 .</target>
        </trans-unit>
        <trans-unit id="a0c907ccba8dc64a79bba191474dfec3878dcaa0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Easing&lt;/code&gt; module provides several predefined animations through the following methods:</source>
          <target state="translated">&lt;code&gt;Easing&lt;/code&gt; 모듈은 다음과 같은 여러 방법을 통해 소정의 애니메이션을 제공한다 :</target>
        </trans-unit>
        <trans-unit id="de603da1d3fd2216bdae2451ad3ed9dc395b97aa" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;FlatList&lt;/code&gt; component displays a scrolling list of changing, but similarly structured, data. &lt;code&gt;FlatList&lt;/code&gt; works well for long lists of data, where the number of items might change over time. Unlike the more generic &lt;a href=&quot;using-a-scrollview&quot;&gt;&lt;code&gt;ScrollView&lt;/code&gt;&lt;/a&gt;, the &lt;code&gt;FlatList&lt;/code&gt; only renders elements that are currently showing on the screen, not all the elements at once.</source>
          <target state="translated">&lt;code&gt;FlatList&lt;/code&gt; 성분 표시 변화의 스크롤링리스트하지만 유사 구조화 데이터. &lt;code&gt;FlatList&lt;/code&gt; 는 시간이지나면서 항목 수가 변경 될 수있는 긴 데이터 목록에 적합합니다. 보다 일반적인 달리 &lt;a href=&quot;using-a-scrollview&quot;&gt; &lt;code&gt;ScrollView&lt;/code&gt; &lt;/a&gt; 의 &lt;code&gt;FlatList&lt;/code&gt; 는 단지 현재 모든 요소를 한 번에, 화면에 표시되는 요소를 렌더링합니다.</target>
        </trans-unit>
        <trans-unit id="6ada2a76971bcdc889aa6fdb02b63d36ede5c0ec" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;FlatList&lt;/code&gt; component requires two props: &lt;code&gt;data&lt;/code&gt; and &lt;code&gt;renderItem&lt;/code&gt;. &lt;code&gt;data&lt;/code&gt; is the source of information for the list. &lt;code&gt;renderItem&lt;/code&gt; takes one item from the source and returns a formatted component to render.</source>
          <target state="translated">&lt;code&gt;FlatList&lt;/code&gt; 의 : 구성 요소는 두 개의 소품 필요 &lt;code&gt;data&lt;/code&gt; 및 &lt;code&gt;renderItem&lt;/code&gt; 를 . &lt;code&gt;data&lt;/code&gt; 는 목록의 정보 소스입니다. &lt;code&gt;renderItem&lt;/code&gt; 은 소스에서 하나의 항목을 가져 와서 렌더링 할 형식화 된 구성 요소를 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="aa2d6ff751205e977e6681dc333a916e5ef8798e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Podfile&lt;/code&gt; will contain a boilerplate setup that you will tweak for your integration purposes. In the end, &lt;code&gt;Podfile&lt;/code&gt; should look something similar to this:</source>
          <target state="translated">&lt;code&gt;Podfile&lt;/code&gt; 은 당신이 당신의 통합을 목적으로 조정할 것 상용구 설정이 포함됩니다. 결국 &lt;code&gt;Podfile&lt;/code&gt; 은 다음과 유사하게 나타납니다.</target>
        </trans-unit>
        <trans-unit id="21493eb99bd77ff635aaf2cc6725c0361c82d6fd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Promise&lt;/code&gt; implementation uses &lt;code&gt;setImmediate&lt;/code&gt; as its asynchronicity primitive.</source>
          <target state="translated">&lt;code&gt;Promise&lt;/code&gt; 구현 사용 &lt;code&gt;setImmediate&lt;/code&gt; 를 프리미티브의 동시성있다.</target>
        </trans-unit>
        <trans-unit id="9f57f6849264e3c7bd4eb1912bd142636a8a36a3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;RCTDatePickerIOSConsts&lt;/code&gt; constants are exported from native by grabbing the actual frame of the native component like so:</source>
          <target state="translated">&lt;code&gt;RCTDatePickerIOSConsts&lt;/code&gt; 의 상수는 그래서 같은 기본 구성 요소의 실제 프레임을 잡아서 네이티브에서 내 보낸 :</target>
        </trans-unit>
        <trans-unit id="f64f90185b94cf6ae96b552b642603cb1d68f23d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ViewToken&lt;/code&gt; type is exported by &lt;code&gt;ViewabilityHelper.js&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;ViewToken&lt;/code&gt; 의 유형은 내 보낸 &lt;code&gt;ViewabilityHelper.js&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="cfaa1846c5e7be2d6ffba4bc400bd7672d7c0d20" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;addListener&lt;/code&gt; function connects a JavaScript function to an identified native keyboard notification event.</source>
          <target state="translated">&lt;code&gt;addListener&lt;/code&gt; 기능은 확인 된 기본 키보드 알림 이벤트에 자바 스크립트 함수를 연결합니다.</target>
        </trans-unit>
        <trans-unit id="2be63025d666e244fa92a2449edc41cf725527d5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;animationType&lt;/code&gt; prop controls how the modal animates.</source>
          <target state="translated">&lt;code&gt;animationType&lt;/code&gt; 의 소품 컨트롤은 어떻게 모달 애니메이션.</target>
        </trans-unit>
        <trans-unit id="7e663d3352bd4af230ed6a2abb005537d9d4ad84" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;hardwareAccelerated&lt;/code&gt; prop controls whether to force hardware acceleration for the underlying window.</source>
          <target state="translated">&lt;code&gt;hardwareAccelerated&lt;/code&gt; 여부를 기본 창에 대한 강제 하드웨어 가속에 소품을 제어합니다.</target>
        </trans-unit>
        <trans-unit id="cecd566e7e09df18e77731887dfa11b7d29a5627" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;initialProperties&lt;/code&gt; are here for illustration purposes so we have some data for our high score screen. In our React Native component, we will use &lt;code&gt;this.props&lt;/code&gt; to get access to that data.</source>
          <target state="translated">초기 &lt;code&gt;initialProperties&lt;/code&gt; 은 설명을 위해 여기에 있으므로 높은 점수 화면에 대한 데이터가 있습니다. React Native 컴포넌트에서 &lt;code&gt;this.props&lt;/code&gt; 를 사용 하여 해당 데이터에 액세스합니다.</target>
        </trans-unit>
        <trans-unit id="8b9b4323d8f1f8257fb3c54bc46f4a7d345f2004" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;interpolate()&lt;/code&gt; function allows input ranges to map to different output ranges. By default, it will extrapolate the curve beyond the ranges given, but you can also have it clamp the output value. It uses lineal interpolation by default but also supports easing functions.</source>
          <target state="translated">&lt;code&gt;interpolate()&lt;/code&gt; 함수는, 입력 범위의 서로 다른 출력 범위에 매핑 할 수있다. 기본적으로 주어진 범위를 넘어서 곡선을 추정하지만 출력 값을 고정시킬 수도 있습니다. 기본적으로 선형 보간을 사용하지만 여유 함수도 지원합니다.</target>
        </trans-unit>
        <trans-unit id="7b484fdb057756de32d246de5fadffd833f20261" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;leader&lt;/code&gt; and &lt;code&gt;follower&lt;/code&gt; animated values would be implemented using &lt;code&gt;Animated.ValueXY()&lt;/code&gt;. &lt;code&gt;ValueXY&lt;/code&gt; is a handy way to deal with 2D interactions, such as panning or dragging. It is a simple wrapper that basically contains two &lt;code&gt;Animated.Value&lt;/code&gt; instances and some helper functions that call through to them, making &lt;code&gt;ValueXY&lt;/code&gt; a drop-in replacement for &lt;code&gt;Value&lt;/code&gt; in many cases. It allows us to track both x and y values in the example above.</source>
          <target state="translated">&lt;code&gt;leader&lt;/code&gt; 와 &lt;code&gt;follower&lt;/code&gt; 애니메이션 값을 사용하여 구현 될 수 &lt;code&gt;Animated.ValueXY()&lt;/code&gt; . &lt;code&gt;ValueXY&lt;/code&gt; 는 이동 또는 끌기와 같은 2D 상호 작용을 처리하는 편리한 방법입니다. 기본적으로 두 개의 &lt;code&gt;Animated.Value&lt;/code&gt; 인스턴스와이를 호출하는 일부 도우미 함수를 포함하는 간단한 래퍼로 , &lt;code&gt;ValueXY&lt;/code&gt; 를 &lt;code&gt;Value&lt;/code&gt; 의 대체품으로 대체하는 경우가 많습니다. 위 예제에서 x와 y 값을 모두 추적 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3e2823bfe7865551264688a14dc524bda6c6c04e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;methodQueue&lt;/code&gt; method will be called once when the module is initialized, and then retained by the bridge, so there is no need to retain the queue yourself, unless you wish to make use of it within your module. However, if you wish to share the same queue between multiple modules then you will need to ensure that you retain and return the same queue instance for each of them; merely returning a queue of the same name for each won't work.</source>
          <target state="translated">&lt;code&gt;methodQueue&lt;/code&gt; 의 방법은 모듈이 초기화 될 때 한 번 호출 한 다음 다리로 유지됩니다, 그래서 당신은 당신의 모듈 내에서의 사용을하고자하지 않는 한, 큐 자신을 보유 할 필요가 없습니다. 그러나 여러 모듈간에 동일한 큐를 공유하려면 각 모듈에 대해 동일한 큐 인스턴스를 유지하고 리턴해야합니다. 각각 동일한 이름의 대기열을 반환하면 작동하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="ba06800dab3ea7169e19d71f06e51d51a6f5ad36" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;onDismiss&lt;/code&gt; prop allows passing a function that will be called once the modal has been dismissed.</source>
          <target state="translated">&lt;code&gt;onDismiss&lt;/code&gt; 소품은 모달이 기각 된 후 호출되는 함수를 통과 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="22af4f6c8fa9a8459d70d1bfe9024eb3a0d5aeef" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;onOrientationChange&lt;/code&gt; callback is called when the orientation changes while the modal is being displayed. The orientation provided is only 'portrait' or 'landscape'. This callback is also called on initial render, regardless of the current orientation.</source>
          <target state="translated">&lt;code&gt;onOrientationChange&lt;/code&gt; 의 콜백은 모달 표시되는 동안 방향이 변경 될 때 호출된다. 제공된 방향은 '세로'또는 '가로'입니다. 이 콜백은 현재 방향에 관계없이 초기 렌더링시에도 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="4ceb7d8cbebe1074f7cde332280ad93d98e68a54" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;onRequestClose&lt;/code&gt; callback is called when the user taps the hardware back button on Android or the menu button on Apple TV. Because of this required prop, be aware that &lt;code&gt;BackHandler&lt;/code&gt; events will not be emitted as long as the modal is open.</source>
          <target state="translated">&lt;code&gt;onRequestClose&lt;/code&gt; 사용자가 안드로이드에 하드웨어 뒤로 버튼 또는 애플 TV의 메뉴 버튼을 탭하면 콜백이 호출됩니다. 이 필수 소품 으로 인해 모달이 열려있는 한 &lt;code&gt;BackHandler&lt;/code&gt; 이벤트가 생성되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="16d45c61475deebfd8ff7357e406099d320a800b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;onShow&lt;/code&gt; prop allows passing a function that will be called once the modal has been shown.</source>
          <target state="translated">&lt;code&gt;onShow&lt;/code&gt; 소품은 모달이 표시 된 후 호출되는 함수를 통과 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f63b69aa936f9d64088fba49ac62784242b2349b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;presentationStyle&lt;/code&gt; prop controls how the modal appears (generally on larger devices such as iPad or plus-sized iPhones). See &lt;a href=&quot;https://developer.apple.com/reference/uikit/uimodalpresentationstyle&quot;&gt;https://developer.apple.com/reference/uikit/uimodalpresentationstyle&lt;/a&gt; for details.</source>
          <target state="translated">&lt;code&gt;presentationStyle&lt;/code&gt; 의 소품을 제어하는 방법 (일반적으로 아이 패드 또는 더하기 크기의 아이폰과 같은 큰 장치) 모달 나타납니다. 자세한 내용은 &lt;a href=&quot;https://developer.apple.com/reference/uikit/uimodalpresentationstyle&quot;&gt;https://developer.apple.com/reference/uikit/uimodalpresentationstyle&lt;/a&gt; 을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="73d99501d071ea1931b564c8a4d3b926f2080155" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;react-native-git-upgrade&lt;/code&gt; module provides a CLI and must be installed globally:</source>
          <target state="translated">는 &lt;code&gt;react-native-git-upgrade&lt;/code&gt; 모듈은 CLI를 제공하고, 전 세계적으로 설치해야합니다 :</target>
        </trans-unit>
        <trans-unit id="d56687b236a3206ec18dc5db4fd2184d7ddc53ea" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;require&lt;/code&gt; syntax described above can be used to statically include audio, video or document files in your project as well. Most common file types are supported including &lt;code&gt;.mp3&lt;/code&gt;, &lt;code&gt;.wav&lt;/code&gt;, &lt;code&gt;.mp4&lt;/code&gt;, &lt;code&gt;.mov&lt;/code&gt;, &lt;code&gt;.html&lt;/code&gt; and &lt;code&gt;.pdf&lt;/code&gt;. See &lt;a href=&quot;https://github.com/facebook/react-native/blob/master/local-cli/util/Config.js#L68&quot;&gt;packager defaults&lt;/a&gt; for the full list.</source>
          <target state="translated">가 &lt;code&gt;require&lt;/code&gt; 구문은 정적으로 오디오, 비디오 또는 문서 프로젝트의 파일과를 포함 할 수 있습니다 위의 설명. &lt;code&gt;.mp3&lt;/code&gt; , &lt;code&gt;.wav&lt;/code&gt; , &lt;code&gt;.mp4&lt;/code&gt; , &lt;code&gt;.mov&lt;/code&gt; , &lt;code&gt;.html&lt;/code&gt; 및 &lt;code&gt;.pdf&lt;/code&gt; 를 포함하여 가장 일반적인 파일 형식이 지원됩니다 . 전체 목록 은 &lt;a href=&quot;https://github.com/facebook/react-native/blob/master/local-cli/util/Config.js#L68&quot;&gt;packager 기본값&lt;/a&gt; 을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="4b95b6be280f5c1a0c88602d0aaf4f3b8d242d54" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;rowIdentities&lt;/code&gt; is a 2D array of identifiers for rows. ie. [['a1', 'a2'], ['b1', 'b2', 'b3'], ...]. If not provided, it's assumed that the keys of the section data are the row identities.</source>
          <target state="translated">&lt;code&gt;rowIdentities&lt;/code&gt; 는 행에 대한 식별자들의 2 차원 배열이다. 즉. [[ 'a1', 'a2'], [ 'b1', 'b2', 'b3'], ...]. 제공되지 않은 경우 섹션 데이터의 키가 행 ID 인 것으로 가정합니다.</target>
        </trans-unit>
        <trans-unit id="25dc8b0c046a6d61726fa16b0f209357274e8183" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;style&lt;/code&gt; prop can be a plain old JavaScript object. That's the simplest and what we usually use for example code. You can also pass an array of styles - the last style in the array has precedence, so you can use this to inherit styles.</source>
          <target state="translated">&lt;code&gt;style&lt;/code&gt; 소품은 평범한 구식 자바 스크립트 객체가 될 수 있습니다. 그것은 가장 단순하고 우리가 일반적으로 예제 코드로 사용하는 것입니다. 스타일 배열을 전달할 수도 있습니다. 배열의 마지막 스타일이 우선하므로이 스타일을 사용하여 스타일을 상속 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f9266269f97688236752f488b5538f8ff18dfd4c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;supportedOrientations&lt;/code&gt; prop allows the modal to be rotated to any of the specified orientations. On iOS, the modal is still restricted by what's specified in your app's Info.plist's UISupportedInterfaceOrientations field. When using &lt;code&gt;presentationStyle&lt;/code&gt; of &lt;code&gt;pageSheet&lt;/code&gt; or &lt;code&gt;formSheet&lt;/code&gt;, this property will be ignored by iOS.</source>
          <target state="translated">&lt;code&gt;supportedOrientations&lt;/code&gt; 모달을 허용 소품은 지정된 방향의 어떤으로 회전한다. iOS에서 모달은 여전히 ​​앱의 Info.plist의 UISupportedInterfaceOrientations 필드에 지정된 내용으로 제한됩니다. &lt;code&gt;pageSheet&lt;/code&gt; 또는 &lt;code&gt;formSheet&lt;/code&gt; 의 &lt;code&gt;presentationStyle&lt;/code&gt; 을 사용하는 경우이 특성은 iOS에서 무시됩니다.</target>
        </trans-unit>
        <trans-unit id="12dc993adb59e81c5b74589e7afa69a5e98d28a3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;transparent&lt;/code&gt; prop determines whether your modal will fill the entire view. Setting this to &lt;code&gt;true&lt;/code&gt; will render the modal over a transparent background.</source>
          <target state="translated">&lt;code&gt;transparent&lt;/code&gt; 소품은 모달 전체보기를 채울할지 여부를 결정합니다. 이것을 &lt;code&gt;true&lt;/code&gt; 로 설정하면 투명한 배경 위에 모달이 렌더링됩니다.</target>
        </trans-unit>
        <trans-unit id="0340383d69fb1020ed8e647955f682ae8fbe4fb8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;visible&lt;/code&gt; prop determines whether your modal is visible.</source>
          <target state="translated">&lt;code&gt;visible&lt;/code&gt; 소품은 모달 표시 여부를 결정합니다.</target>
        </trans-unit>
        <trans-unit id="86d9dbb1b582ae40d8e1783e6f26131547dd4195" translate="yes" xml:space="preserve">
          <source>The Android unit tests do not run in an emulator. They just use a normal Java installation. The default macOS Java install is insufficient, you may need to install &lt;a href=&quot;http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html&quot;&gt;Java 8 (JDK8)&lt;/a&gt;. You can type &lt;code&gt;javac -version&lt;/code&gt; in a terminal to see what version you have:</source>
          <target state="translated">Android 단위 테스트는 에뮬레이터에서 실행되지 않습니다. 그들은 단지 일반적인 Java 설치를 사용합니다. 기본 macOS Java 설치가 충분하지 &lt;a href=&quot;http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html&quot;&gt;않으므로 Java 8 (JDK8)&lt;/a&gt; 을 설치해야 할 수 있습니다 . 터미널에 &lt;code&gt;javac -version&lt;/code&gt; 을 입력 하여 사용중인 버전을 확인할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3b1588a3390ab265f0d13c40edcff3074636e6e4" translate="yes" xml:space="preserve">
          <source>The Animated API currently calculates each keyframe on-demand on the JavaScript thread unless you &lt;a href=&quot;https://facebook.github.io/react-native/blog/2017/02/14/using-native-driver-for-animated.html#how-do-i-use-this-in-my-app&quot;&gt;set &lt;code&gt;useNativeDriver: true&lt;/code&gt;&lt;/a&gt;, while LayoutAnimation leverages Core Animation and is unaffected by JS thread and main thread frame drops.</source>
          <target state="translated">useAativeDriver &lt;a href=&quot;https://facebook.github.io/react-native/blog/2017/02/14/using-native-driver-for-animated.html#how-do-i-use-this-in-my-app&quot;&gt; &lt;code&gt;useNativeDriver: true&lt;/code&gt; &lt;/a&gt; 를 설정 하지 않으면 Animated API는 현재 JavaScript 스레드에서 요청시 각 키 프레임을 계산 하지만 LayoutAnimation은 Core Animation을 활용하고 JS 스레드 및 기본 스레드 프레임 드롭의 영향을받지 않습니다.</target>
        </trans-unit>
        <trans-unit id="62fbe28e1ecbb418fd2ca87a435d256e14c91d8f" translate="yes" xml:space="preserve">
          <source>The CalendarManager module is instantiated on the Objective-C side using a [CalendarManager new] call. The return type of bridge methods is always &lt;code&gt;void&lt;/code&gt;. React Native bridge is asynchronous, so the only way to pass a result to JavaScript is by using callbacks or emitting events (see below).</source>
          <target state="translated">CalendarManager 모듈은 [CalendarManager new] 호출을 사용하여 Objective-C 측에서 인스턴스화됩니다. 브릿지 메소드의 리턴 유형은 항상 &lt;code&gt;void&lt;/code&gt; 입니다. React Native 브릿지는 비동기식이므로 결과를 JavaScript로 전달하는 유일한 방법은 콜백 또는 이벤트 생성 (아래 참조)을 사용하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="07008625f9c2f52c06be218dfb50406128a3287f" translate="yes" xml:space="preserve">
          <source>The Developer Menu is disabled in release (production) builds.</source>
          <target state="translated">릴리스 (프로덕션) 빌드에서는 개발자 메뉴가 비활성화되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="9ad9935fc1f4cbb15ca4bc69d648cf02ae6bc0e9" translate="yes" xml:space="preserve">
          <source>The Facebook GitHub Bot was used to allow members of the community to perform administrative actions such as labeling and closing issues. The bot is no longer necessary, as maintainers will be granted the necessary permissions to manage issues. If you are interested in maintaining the repo, please reach out to H&amp;eacute;ctor Ramos (@hramos) on GitHub.</source>
          <target state="translated">Facebook GitHub Bot은 커뮤니티 회원이 라벨링 및 마감 문제와 같은 관리 작업을 수행하는 데 사용되었습니다. 관리자에게는 문제를 관리하는 데 필요한 권한이 부여되므로 봇은 더 이상 필요하지 않습니다. 리포지토리 유지에 관심이 있다면 GitHub의 H&amp;eacute;ctor Ramos (@hramos)에게 문의하십시오.</target>
        </trans-unit>
        <trans-unit id="b50a2ba1aca28cee75a1a5c1ae2f9119e17a953a" translate="yes" xml:space="preserve">
          <source>The Geolocation API extends the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Geolocation&quot;&gt;Geolocation web spec&lt;/a&gt;.</source>
          <target state="translated">Geolocation API는 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Geolocation&quot;&gt;Geolocation 웹 사양을&lt;/a&gt; 확장합니다 .</target>
        </trans-unit>
        <trans-unit id="0787c007008eff3b8c52ccc7660ec76c7b554958" translate="yes" xml:space="preserve">
          <source>The JS API</source>
          <target state="translated">JS API</target>
        </trans-unit>
        <trans-unit id="9ae4341f130a124d6b987ae6abc8891876c21f60" translate="yes" xml:space="preserve">
          <source>The Java API</source>
          <target state="translated">자바 API</target>
        </trans-unit>
        <trans-unit id="f4ce28826126c85a8eaaaba1f5ba70796c227938" translate="yes" xml:space="preserve">
          <source>The JavaScript counterpart of this method returns a Promise. This means you can use the &lt;code&gt;await&lt;/code&gt; keyword within an async function to call it and wait for its result:</source>
          <target state="translated">이 메소드의 JavaScript는 Promise를 리턴합니다. 이 방법은 당신이 사용할 수있는 &lt;code&gt;await&lt;/code&gt; 를 호출하고 그 결과를 기다릴 비동기 함수 내에서 키워드 :</target>
        </trans-unit>
        <trans-unit id="81dabcfcd4b5e905eb29ad82fb0c89657ebbd03d" translate="yes" xml:space="preserve">
          <source>The Keyboard module allows you to listen for native events and react to them, as well as make changes to the keyboard, like dismissing it.</source>
          <target state="translated">키보드 모듈을 사용하면 기본 이벤트를 듣고 반응 할뿐만 아니라 키보드를 닫는 것처럼 키보드를 변경할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="505d8367b6af55ff0ca263eaa28304dcf0fef70a" translate="yes" xml:space="preserve">
          <source>The Magic: &lt;code&gt;RCTRootView&lt;/code&gt;</source>
          <target state="translated">마술 : &lt;code&gt;RCTRootView&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="8d7b77441a250ed5052f005826acd7ae8e9adbc9" translate="yes" xml:space="preserve">
          <source>The Magic: &lt;code&gt;ReactRootView&lt;/code&gt;</source>
          <target state="translated">마술 : &lt;code&gt;ReactRootView&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0537cac877d5dbdf4afe26e07526115c1c97035f" translate="yes" xml:space="preserve">
          <source>The Modal component is a simple way to present content above an enclosing view.</source>
          <target state="translated">모달 구성 요소는 둘러싸는보기 위에 컨텐츠를 표시하는 간단한 방법입니다.</target>
        </trans-unit>
        <trans-unit id="6a3ab81cdd1df975944732370cef371d355ea02d" translate="yes" xml:space="preserve">
          <source>The RNTester app has various examples of &lt;code&gt;Animated&lt;/code&gt; in use:</source>
          <target state="translated">RNTester 앱에는 다양한 &lt;code&gt;Animated&lt;/code&gt; 사용 예가 있습니다.</target>
        </trans-unit>
        <trans-unit id="3c8577da6a4a042011ab64dee2c86bdc49a5357c" translate="yes" xml:space="preserve">
          <source>The RNTester app supports Apple TV; use the &lt;code&gt;RNTester-tvOS&lt;/code&gt; build target to build for tvOS.</source>
          <target state="translated">RNTester 앱은 Apple TV를 지원합니다. &lt;code&gt;RNTester-tvOS&lt;/code&gt; 빌드 하려면 RNTester-tvOS 빌드 대상을 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="4a1713bcf0b41c545ec5070e8560a7d0fdb8160d" translate="yes" xml:space="preserve">
          <source>The React Native CLI</source>
          <target state="translated">리 액트 네이티브 CLI</target>
        </trans-unit>
        <trans-unit id="1bd1354d786b5956eb1776b0fd2d43e62f580db8" translate="yes" xml:space="preserve">
          <source>The React Native component</source>
          <target state="translated">리 액트 네이티브 컴포넌트</target>
        </trans-unit>
        <trans-unit id="60b46d20bc98d8ec50ddeb1d02865fea3d2c5347" translate="yes" xml:space="preserve">
          <source>The React Native packager runs on port 8081. If another process is already using that port, you can either terminate that process, or change the port that the packager uses.</source>
          <target state="translated">React Native Packager는 포트 8081에서 실행됩니다. 다른 프로세스가 이미 해당 포트를 사용중인 경우 해당 프로세스를 종료하거나 패키지가 사용하는 포트를 변경할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f23a4e00712e9270a9522207ee08934fda35117c" translate="yes" xml:space="preserve">
          <source>The React Native repo has several tests you can run to verify you haven't caused a regression with your PR. These tests are run using &lt;a href=&quot;https://circleci.com/gh/facebook/react-native&quot;&gt;Circle&lt;/a&gt;, a continuous integration system. Circle will automatically annotate pull requests with the test results.</source>
          <target state="translated">React Native repo에는 PR로 회귀하지 않은지 확인하기 위해 실행할 수있는 몇 가지 테스트가 있습니다. 이러한 테스트는 지속적인 통합 시스템 인 &lt;a href=&quot;https://circleci.com/gh/facebook/react-native&quot;&gt;Circle을&lt;/a&gt; 사용하여 실행 됩니다. Circle은 테스트 결과와 함께 풀 요청에 자동으로 주석을 추가합니다.</target>
        </trans-unit>
        <trans-unit id="dc6cc40db6e7fa2b228d13055b7c389acdaa30b2" translate="yes" xml:space="preserve">
          <source>The React Native tools require some environment variables to be set up in order to build apps with native code.</source>
          <target state="translated">React Native 도구는 네이티브 코드로 앱을 빌드하기 위해 일부 환경 변수를 설정해야합니다.</target>
        </trans-unit>
        <trans-unit id="846b2dc8b25acd05a41b497a1547258c8865a9f8" translate="yes" xml:space="preserve">
          <source>The SDK Manager can also be found within the Android Studio &quot;Preferences&quot; dialog, under &lt;strong&gt;Appearance &amp;amp; Behavior&lt;/strong&gt; &amp;rarr; &lt;strong&gt;System Settings&lt;/strong&gt; &amp;rarr; &lt;strong&gt;Android SDK&lt;/strong&gt;.</source>
          <target state="translated">SDK 관리자는 Android Studio &quot;환경 설정&quot;대화 상자의 &lt;strong&gt;모양 및 동작&lt;/strong&gt; &amp;rarr; &lt;strong&gt;시스템 설정&lt;/strong&gt; &amp;rarr; &lt;strong&gt;Android SDK에서 찾을 수&lt;/strong&gt; 있습니다.</target>
        </trans-unit>
        <trans-unit id="ea66f4613c985554e6d46984a68565d9de0c6837" translate="yes" xml:space="preserve">
          <source>The SDK Manager can be accessed from the &quot;Welcome to Android Studio&quot; screen. Click on &quot;Configure&quot;, then select &quot;SDK Manager&quot;.</source>
          <target state="translated">SDK 관리자는 &quot;Welcome to Android Studio&quot;화면에서 액세스 할 수 있습니다. &quot;구성&quot;을 클릭 한 다음 &quot;SDK 관리자&quot;를 선택하십시오.</target>
        </trans-unit>
        <trans-unit id="9534a45514d8132daa975ae1eafa2a43af4bcfc5" translate="yes" xml:space="preserve">
          <source>The SDK is installed, by default, at the following location:</source>
          <target state="translated">SDK는 기본적으로 다음 위치에 설치됩니다.</target>
        </trans-unit>
        <trans-unit id="893c7f67380120bd0fc5f2de79db4b387c5e875c" translate="yes" xml:space="preserve">
          <source>The ScrollView works best to present a small amount of things of a limited size. All the elements and views of a &lt;code&gt;ScrollView&lt;/code&gt; are rendered, even if they are not currently shown on the screen. If you have a long list of more items than can fit on the screen, you should use a &lt;code&gt;FlatList&lt;/code&gt; instead. So let's &lt;a href=&quot;using-a-listview&quot;&gt;learn about list views&lt;/a&gt; next.</source>
          <target state="translated">ScrollView는 제한된 크기의 소량을 표시하는 데 가장 적합합니다. &lt;code&gt;ScrollView&lt;/code&gt; 의 모든 요소와보기는 현재 화면에 표시되지 않더라도 렌더링됩니다. 화면에 표시 할 수있는 것보다 더 많은 항목 목록이있는 경우 대신 &lt;code&gt;FlatList&lt;/code&gt; 를 사용해야합니다 . 다음으로 &lt;a href=&quot;using-a-listview&quot;&gt;목록보기에 대해 알아&lt;/a&gt; 보겠습니다 .</target>
        </trans-unit>
        <trans-unit id="c1c4bc8d04d3e6b646c9fe548b8be5454e9e5bd1" translate="yes" xml:space="preserve">
          <source>The Toast Module</source>
          <target state="translated">토스트 모듈</target>
        </trans-unit>
        <trans-unit id="c0f5750b5c0a4e3fdbbf3c6a5dea9ed4f789ee22" translate="yes" xml:space="preserve">
          <source>The URL to open.</source>
          <target state="translated">열 URL입니다.</target>
        </trans-unit>
        <trans-unit id="caf03acaa75d68377a6e2af2ecb0e7a7f171601e" translate="yes" xml:space="preserve">
          <source>The Vibration API is exposed at &lt;code&gt;Vibration.vibrate()&lt;/code&gt;. The vibration is asynchronous so this method will return immediately.</source>
          <target state="translated">Vibration API는 &lt;code&gt;Vibration.vibrate()&lt;/code&gt; 노출됩니다 . 진동은 비동기 적이므로이 방법은 즉시 돌아옵니다.</target>
        </trans-unit>
        <trans-unit id="1f8d6ff10078074f00191439939ab39467bceaa2" translate="yes" xml:space="preserve">
          <source>The Vibration API is exposed at &lt;code&gt;VibrationIOS.vibrate()&lt;/code&gt;. On iOS, calling this function will trigger a one second vibration. The vibration is asynchronous so this method will return immediately.</source>
          <target state="translated">Vibration API는 &lt;code&gt;VibrationIOS.vibrate()&lt;/code&gt; 노출됩니다 . iOS에서이 함수를 호출하면 1 초의 진동이 트리거됩니다. 진동은 비동기 적이므로이 방법은 즉시 돌아옵니다.</target>
        </trans-unit>
        <trans-unit id="44aff4ce641012c993c80d4fe100b14c5e7e250a" translate="yes" xml:space="preserve">
          <source>The View is now responding for touch events. This is the time to highlight and show the user what is happening.</source>
          <target state="translated">보기가 터치 이벤트에 응답하고 있습니다. 사용자에게 무슨 일이 일어나고 있는지 강조하고 보여줄 때입니다.</target>
        </trans-unit>
        <trans-unit id="007fb43d0830e4aa85e4cb52c6dfe8f34962890a" translate="yes" xml:space="preserve">
          <source>The above command will automatically run your app on the iOS Simulator by default. If you want to run the app on an actual physical iOS device, please follow the instructions &lt;a href=&quot;running-on-device&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">위 명령은 기본적으로 iOS 시뮬레이터에서 앱을 자동으로 실행합니다. 실제 물리적 iOS 기기에서 앱을 실행하려면 &lt;a href=&quot;running-on-device&quot;&gt;여기&lt;/a&gt; 의 지침을 따르십시오 .</target>
        </trans-unit>
        <trans-unit id="5e82ba2fde92bfbf2b714c33de2998b218c94080" translate="yes" xml:space="preserve">
          <source>The above examples show how you can make a request. In many cases, you will want to do something with the response.</source>
          <target state="translated">위의 예는 요청하는 방법을 보여줍니다. 대부분의 경우 응답으로 무언가를 원할 것입니다.</target>
        </trans-unit>
        <trans-unit id="19503d7e2267c6c194fa4746886e8da7d1f876be" translate="yes" xml:space="preserve">
          <source>The above will configure Stetho v1.5.0. You can check at &lt;a href=&quot;http://facebook.github.io/stetho/&quot;&gt;http://facebook.github.io/stetho/&lt;/a&gt; if a newer version is available.</source>
          <target state="translated">위는 Stetho v1.5.0을 구성합니다. 최신 버전이 제공되는 경우 &lt;a href=&quot;http://facebook.github.io/stetho/&quot;&gt;http://facebook.github.io/stetho/&lt;/a&gt; 에서 확인할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f2b4fe6c2cc64decf98a5c1ae5373ead8a757f21" translate="yes" xml:space="preserve">
          <source>The actual data to render, akin to the &lt;code&gt;data&lt;/code&gt; prop in &lt;a href=&quot;flatlist&quot;&gt;&lt;code&gt;FlatList&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;flatlist&quot;&gt; &lt;code&gt;FlatList&lt;/code&gt; &lt;/a&gt; 의 &lt;code&gt;data&lt;/code&gt; 소품 과 유사하게 렌더링 할 실제 데이터 입니다.</target>
        </trans-unit>
        <trans-unit id="83eb476e82dab922f1ff49ecff3b7260c0f5eb7b" translate="yes" xml:space="preserve">
          <source>The amount by which the scroll view content is inset from the edges of the scroll view. Defaults to &lt;code&gt;{top: 0, left: 0, bottom: 0, right: 0}&lt;/code&gt;.</source>
          <target state="translated">스크롤보기 내용이 스크롤보기의 가장자리에서 삽입되는 양입니다. 기본값은 &lt;code&gt;{top: 0, left: 0, bottom: 0, right: 0}&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="fa349c1a56437d813c481e56f564c8c95f42629e" translate="yes" xml:space="preserve">
          <source>The amount by which the scroll view indicators are inset from the edges of the scroll view. This should normally be set to the same value as the &lt;code&gt;contentInset&lt;/code&gt;. Defaults to &lt;code&gt;{0, 0, 0, 0}&lt;/code&gt;.</source>
          <target state="translated">스크롤보기 표시기가 스크롤보기의 가장자리에서 삽입되는 양입니다. 일반적으로 &lt;code&gt;contentInset&lt;/code&gt; 과 동일한 값으로 설정해야합니다 . 기본값은 &lt;code&gt;{0, 0, 0, 0}&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="b833d2ce3772f4f0a562c22c2b9d37507aa2a0f6" translate="yes" xml:space="preserve">
          <source>The amount by which the web view content is inset from the edges of the scroll view. Defaults to {top: 0, left: 0, bottom: 0, right: 0}.</source>
          <target state="translated">웹보기 컨텐츠가 스크롤보기의 가장자리에서 삽입되는 양입니다. 기본값은 {top : 0, left : 0, bottom : 0, right : 0}입니다.</target>
        </trans-unit>
        <trans-unit id="2177fbdcf1769660b4b6c4b249c6028aef969a3f" translate="yes" xml:space="preserve">
          <source>The available keys for the &lt;code&gt;options&lt;/code&gt; object are:</source>
          <target state="translated">&lt;code&gt;options&lt;/code&gt; 객체에 사용 가능한 키 는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="8cbb2dda4399e0fb2fd18825b12855dadd0de4cf" translate="yes" xml:space="preserve">
          <source>The background color of the refresh indicator.</source>
          <target state="translated">새로 고침 표시기의 배경색입니다.</target>
        </trans-unit>
        <trans-unit id="e03f5b1cf1755ca492e2aeba5b9c21dcaa41c376" translate="yes" xml:space="preserve">
          <source>The background color of the status bar.</source>
          <target state="translated">상태 표시 줄의 배경색입니다.</target>
        </trans-unit>
        <trans-unit id="3c18f66b86b18c1525b72494f1df2d570d63cc93" translate="yes" xml:space="preserve">
          <source>The bridge initializes any registered RCTBridgeModules automatically, however you may wish to instantiate your own module instances (so you may inject dependencies, for example).</source>
          <target state="translated">브리지는 등록 된 RCTBridgeModule을 자동으로 초기화하지만 고유 한 모듈 인스턴스를 인스턴스화 할 수 있습니다 (예 : 종속성을 주입 할 수 있음).</target>
        </trans-unit>
        <trans-unit id="5a7ca8aad43a7c1c289a3cd5a27d22ded6a10b38" translate="yes" xml:space="preserve">
          <source>The change event name.</source>
          <target state="translated">변경 이벤트 이름</target>
        </trans-unit>
        <trans-unit id="45f4cc1332ec9b3e0abd4e5f40a6465b28e10ee2" translate="yes" xml:space="preserve">
          <source>The code above adds a &lt;code&gt;_handleNavigationRequest&lt;/code&gt; private method that is invoked from the &lt;code&gt;NavigatorIOS&lt;/code&gt; component when the right navigation bar item is pressed. To get access to the navigator functionality, a reference to it is saved in the &lt;code&gt;ref&lt;/code&gt; prop and later referenced to push a new scene into the navigation stack.</source>
          <target state="translated">위의 코드 는 오른쪽 탐색 모음 항목을 누를 때 &lt;code&gt;NavigatorIOS&lt;/code&gt; 구성 요소 에서 호출되는 &lt;code&gt;_handleNavigationRequest&lt;/code&gt; 개인 메서드를 추가합니다 . 네비게이터 기능에 액세스하기 위해 해당 참조가 &lt;code&gt;ref&lt;/code&gt; 소품에 저장 되고 나중에 새 장면을 탐색 스택으로 푸시하도록 참조됩니다.</target>
        </trans-unit>
        <trans-unit id="6e8dc02211742dde009ce948ab738d8506229056" translate="yes" xml:space="preserve">
          <source>The color of the &lt;code&gt;TextInput&lt;/code&gt; underline.</source>
          <target state="translated">&lt;code&gt;TextInput&lt;/code&gt; 밑줄 의 색입니다 .</target>
        </trans-unit>
        <trans-unit id="5ee59cf8f04d002b4cadc4e0e89545fe3a8bd202" translate="yes" xml:space="preserve">
          <source>The color of the refresh indicator.</source>
          <target state="translated">새로 고침 표시기의 색상입니다.</target>
        </trans-unit>
        <trans-unit id="c3565cd21b2872d4f3d9642f100bf29f4e1128e1" translate="yes" xml:space="preserve">
          <source>The color of the underlay that will show through when the touch is active.</source>
          <target state="translated">터치가 활성화 될 때 표시되는 언더 레이의 색상입니다.</target>
        </trans-unit>
        <trans-unit id="d12f9ef2f382c8fdeb436b8f4fde77341213d0c7" translate="yes" xml:space="preserve">
          <source>The color used for the track to the left of the button. Overrides the default blue gradient image on iOS.</source>
          <target state="translated">버튼 왼쪽의 트랙에 사용되는 색상입니다. iOS의 기본 파란색 그라디언트 이미지를 재정의합니다.</target>
        </trans-unit>
        <trans-unit id="e6181bcdc78752c9916a7f71ab582ee16d905bc8" translate="yes" xml:space="preserve">
          <source>The color used for the track to the right of the button. Overrides the default gray gradient image on iOS.</source>
          <target state="translated">버튼 오른쪽의 트랙에 사용되는 색상입니다. iOS의 기본 회색 그라디언트 이미지를 재정의합니다.</target>
        </trans-unit>
        <trans-unit id="afabd6fe8970895298517bc90aec1b090b28239e" translate="yes" xml:space="preserve">
          <source>The colors (at least one) that will be used to draw the refresh indicator.</source>
          <target state="translated">새로 고침 표시기를 그리는 데 사용될 색상 (적어도 하나).</target>
        </trans-unit>
        <trans-unit id="c8bc08b3e7ea5d5b5018045a4f8abcb54cbdeab3" translate="yes" xml:space="preserve">
          <source>The command name identifies the parameters that a command would expect. When the command parameter is surrounded by greater-than, less-than symbols &lt;code&gt;&amp;lt; &amp;gt;&lt;/code&gt;, this indicates that the parameter is expected. When a parameter is surrounded by brackets &lt;code&gt;[ ]&lt;/code&gt;, this indicates that the parameter is optional.</source>
          <target state="translated">명령 이름은 명령이 예상하는 매개 변수를 식별합니다. 명령 매개 변수가보다 크거나 작음 기호 &lt;code&gt;&amp;lt; &amp;gt;&lt;/code&gt; 로 둘러싸인 경우 이는 매개 변수가 예상됨을 나타냅니다. 매개 변수가 대괄호 &lt;code&gt;[ ]&lt;/code&gt; 로 묶인 경우 이는 매개 변수가 선택적임을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="5cb5c64090454c0c777cd0e805871882b50a3e59" translate="yes" xml:space="preserve">
          <source>The common pattern we use when embedding native in React Native is to make the native component's RCTViewManager a delegate for the views, sending events back to JavaScript via the bridge. This keeps related event calls in one place.</source>
          <target state="translated">React Native에 네이티브를 임베드 할 때 사용하는 일반적인 패턴은 네이티브 컴포넌트의 RCTViewManager를 뷰의 대리자로 만들어 브리지를 통해 JavaScript로 이벤트를 다시 보내는 것입니다. 이렇게하면 관련 이벤트 호출이 한 곳에 유지됩니다.</target>
        </trans-unit>
        <trans-unit id="b6b13aa3635472311d2d6e1d7e8954dc1de874a5" translate="yes" xml:space="preserve">
          <source>The community solution to navigation is a standalone library that allows developers to set up the screens of an app with just a few lines of code.</source>
          <target state="translated">내비게이션 커뮤니티 솔루션은 개발자가 단 몇 줄의 코드로 앱의 화면을 설정할 수있는 독립형 라이브러리입니다.</target>
        </trans-unit>
        <trans-unit id="69c141ef736909141f287b6a6286f78f44509fd2" translate="yes" xml:space="preserve">
          <source>The constructor takes in a params argument that can contain any of the following:</source>
          <target state="translated">생성자는 다음 중 하나를 포함 할 수있는 params 인수를받습니다.</target>
        </trans-unit>
        <trans-unit id="94d17bb69d28f91b17d9ae78a963106f9291aa73" translate="yes" xml:space="preserve">
          <source>The content inset affects the valid area for Toolbar content other than the navigation button and menu. Insets define the minimum margin for these components and can be used to effectively align Toolbar content along well-known gridlines.</source>
          <target state="translated">컨텐츠 삽입은 탐색 버튼 및 메뉴 이외의 툴바 컨텐츠의 유효한 영역에 영향을줍니다. 삽입은 이러한 구성 요소의 최소 여백을 정의하며 잘 알려진 눈금 선을 따라 툴바 컨텐츠를 효과적으로 정렬하는 데 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e1e41abdd048a9ccc7b6b18d29f6eb4eeda2c2c3" translate="yes" xml:space="preserve">
          <source>The content was successfully shared.</source>
          <target state="translated">컨텐츠가 성공적으로 공유되었습니다.</target>
        </trans-unit>
        <trans-unit id="b938b60cf6ccfe7afbe5434375a8f25ecf692570" translate="yes" xml:space="preserve">
          <source>The core team will be monitoring for pull requests. Read &lt;a href=&quot;maintainers#handling-pull-requests&quot;&gt;what to expect from maintainers&lt;/a&gt; to understand what may happen after you open a pull request.</source>
          <target state="translated">핵심 팀은 풀 요청을 모니터링합니다. 풀 요청을 연 후 발생할 수있는 상황을 이해하려면 &lt;a href=&quot;maintainers#handling-pull-requests&quot;&gt;유지 보수 담당자에게 기대할&lt;/a&gt; 사항을 읽으십시오 .</target>
        </trans-unit>
        <trans-unit id="8b1c9393a2d305ef587e5171a25a3b1e5e12d965" translate="yes" xml:space="preserve">
          <source>The core team will be monitoring for pull requests. When we get one, we'll run some Facebook-specific integration tests on it first. From here, we'll need to get another person to sign off on the changes and then merge the pull request. For API changes we may need to fix internal uses, which could cause some delay. We'll do our best to provide updates and feedback throughout the process.</source>
          <target state="translated">핵심 팀은 풀 요청을 모니터링합니다. 하나를 얻으면 먼저 Facebook 관련 통합 테스트를 실행합니다. 여기에서 다른 사람에게 변경 사항에 대해 사인 오프 한 다음 풀 요청을 병합해야합니다. API 변경의 경우 내부 사용을 수정해야 할 수 있으며 이로 인해 약간의 지연이 발생할 수 있습니다. 프로세스 전반에 걸쳐 업데이트 및 피드백을 제공하기 위해 최선을 다하겠습니다.</target>
        </trans-unit>
        <trans-unit id="69370ead0af92daa61e7dd3afe76b7b9226f7e9b" translate="yes" xml:space="preserve">
          <source>The current scale of the scroll view content. The default value is 1.0.</source>
          <target state="translated">스크롤보기 내용의 현재 배율입니다. 기본값은 1.0입니다.</target>
        </trans-unit>
        <trans-unit id="189d819788cb7129f34b4f19db137231c96f862f" translate="yes" xml:space="preserve">
          <source>The currently selected date.</source>
          <target state="translated">현재 선택된 날짜입니다.</target>
        </trans-unit>
        <trans-unit id="d2131260c4a24598e3cba9f270e85308a43e59d1" translate="yes" xml:space="preserve">
          <source>The currently supported formats are &lt;code&gt;png&lt;/code&gt;, &lt;code&gt;jpg&lt;/code&gt;, &lt;code&gt;jpeg&lt;/code&gt;, &lt;code&gt;bmp&lt;/code&gt;, &lt;code&gt;gif&lt;/code&gt;, &lt;code&gt;webp&lt;/code&gt; (Android only), &lt;code&gt;psd&lt;/code&gt; (iOS only).</source>
          <target state="translated">현재 지원되는 형식은 &lt;code&gt;png&lt;/code&gt; , &lt;code&gt;jpg&lt;/code&gt; , &lt;code&gt;jpeg&lt;/code&gt; , &lt;code&gt;bmp&lt;/code&gt; , &lt;code&gt;gif&lt;/code&gt; , &lt;code&gt;webp&lt;/code&gt; (Android 만 해당), &lt;code&gt;psd&lt;/code&gt; (iOS 만 해당)입니다.</target>
        </trans-unit>
        <trans-unit id="f33bf7802d824a734ab74c6f8f739b9bf465bc3f" translate="yes" xml:space="preserve">
          <source>The data for rendering items in this section. Array of objects, much like &lt;a href=&quot;flatlist#data&quot;&gt;&lt;code&gt;FlatList&lt;/code&gt;'s data prop&lt;/a&gt;.</source>
          <target state="translated">이 섹션에서 항목을 렌더링하기위한 데이터입니다. &lt;a href=&quot;flatlist#data&quot;&gt; &lt;code&gt;FlatList&lt;/code&gt; 의 데이터 소품&lt;/a&gt; 과 매우 유사한 객체 배열 .</target>
        </trans-unit>
        <trans-unit id="721c8884815f348d6ecb022a9fb505a1a317b917" translate="yes" xml:space="preserve">
          <source>The date picker mode.</source>
          <target state="translated">날짜 선택기 모드입니다.</target>
        </trans-unit>
        <trans-unit id="efd3b77cb55246a2c4204e13156ff3455e8db6c4" translate="yes" xml:space="preserve">
          <source>The debugger will receive a list of all project roots, separated by a space. For example, if you set &lt;code&gt;REACT_DEBUGGER=&quot;node /path/to/launchDebugger.js --port 2345 --type ReactNative&quot;&lt;/code&gt;, then the command &lt;code&gt;node /path/to/launchDebugger.js --port 2345 --type ReactNative /path/to/reactNative/app&lt;/code&gt; will be used to start your debugger.</source>
          <target state="translated">디버거는 공백으로 구분 된 모든 프로젝트 루트 목록을받습니다. 예를 들어, &lt;code&gt;REACT_DEBUGGER=&quot;node /path/to/launchDebugger.js --port 2345 --type ReactNative&quot;&lt;/code&gt; 를 설정하면 명령 &lt;code&gt;node /path/to/launchDebugger.js --port 2345 --type ReactNative /path/to/reactNative/app&lt;/code&gt; 는 디버거를 시작하는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="187f1fc57bb7fee83c69d4712eaa1bfd310814e7" translate="yes" xml:space="preserve">
          <source>The default accessor functions assume this is an array of objects with shape &lt;code&gt;{key: string}&lt;/code&gt; but you can override &lt;code&gt;getItem&lt;/code&gt;, &lt;code&gt;getItemCount&lt;/code&gt;, and &lt;code&gt;keyExtractor&lt;/code&gt; to handle any type of index-based data.</source>
          <target state="translated">기본 접근 자 함수는 이것이 &lt;code&gt;{key: string}&lt;/code&gt; 모양의 객체 배열이라고 가정 하지만 &lt;code&gt;getItem&lt;/code&gt; , &lt;code&gt;getItemCount&lt;/code&gt; 및 &lt;code&gt;keyExtractor&lt;/code&gt; 를 재정 의하여 모든 유형의 인덱스 기반 데이터를 처리 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="d21e42b542810f976858e9c193dd5dea6f38a59d" translate="yes" xml:space="preserve">
          <source>The default background color of the navigation bar.</source>
          <target state="translated">탐색 모음의 기본 배경색입니다.</target>
        </trans-unit>
        <trans-unit id="0993da60f25edae4e6cb1899b5d69398e152ff2d" translate="yes" xml:space="preserve">
          <source>The default color used for the buttons in the navigation bar.</source>
          <target state="translated">탐색 모음의 버튼에 사용되는 기본 색상입니다.</target>
        </trans-unit>
        <trans-unit id="a8384720909edef346e851d5b257194b1558cdd8" translate="yes" xml:space="preserve">
          <source>The default extractor expects data of one of the following forms:</source>
          <target state="translated">기본 추출기는 다음 형식 중 하나의 데이터를 예상합니다.</target>
        </trans-unit>
        <trans-unit id="41c2d6fee3f5794643529d5aac3e5bf4be04874e" translate="yes" xml:space="preserve">
          <source>The default is &lt;code&gt;tail&lt;/code&gt;.</source>
          <target state="translated">기본값은 &lt;code&gt;tail&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="2185216ec6ee788486d7243373d90ca3594cfcd8" translate="yes" xml:space="preserve">
          <source>The default permissions that get added are:</source>
          <target state="translated">추가되는 기본 권한은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="bbd45e70329d2e6a727a3be379cf1290582031c8" translate="yes" xml:space="preserve">
          <source>The default text color of the navigation bar title.</source>
          <target state="translated">탐색 줄 제목의 기본 텍스트 색상입니다.</target>
        </trans-unit>
        <trans-unit id="494276631b5f3b087181905257d4760f4e776c94" translate="yes" xml:space="preserve">
          <source>The default text in text input.</source>
          <target state="translated">텍스트 입력의 기본 텍스트입니다.</target>
        </trans-unit>
        <trans-unit id="4fd1614d4306cac3234a71f8aebade13c67d1368" translate="yes" xml:space="preserve">
          <source>The default wrapper style for components in the navigator. A common use case is to set the &lt;code&gt;backgroundColor&lt;/code&gt; for every scene.</source>
          <target state="translated">네비게이터의 구성 요소에 대한 기본 랩퍼 스타일. 일반적인 사용 사례는 모든 장면에 대해 &lt;code&gt;backgroundColor&lt;/code&gt; 를 설정하는 것 입니다.</target>
        </trans-unit>
        <trans-unit id="308e2ddfaa04ffa90bfb01ac32302d9161d76d04" translate="yes" xml:space="preserve">
          <source>The device names correspond to the list of devices available in Xcode. You can check your available devices by running &lt;code&gt;xcrun simctl list devices&lt;/code&gt; from the console.</source>
          <target state="translated">장치 이름은 Xcode에서 사용 가능한 장치 목록에 해당합니다. 콘솔에서 &lt;code&gt;xcrun simctl list devices&lt;/code&gt; 를 실행하여 사용 가능한 장치를 확인할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="a67b4a8fc2b1e7a8a584d9d3b0833044e93eeba5" translate="yes" xml:space="preserve">
          <source>The dialog has been dismissed.</source>
          <target state="translated">대화 상자가 닫혔습니다.</target>
        </trans-unit>
        <trans-unit id="22d13e56b1ec589d092e670c2d3116ecf6869efb" translate="yes" xml:space="preserve">
          <source>The dialog has been dismissed. @platform ios</source>
          <target state="translated">대화 상자가 닫혔습니다. @ 플랫폼 ios</target>
        </trans-unit>
        <trans-unit id="8688e1dc6946318c386fe5cc5186ddd541be7233" translate="yes" xml:space="preserve">
          <source>The dialog's title.</source>
          <target state="translated">대화 상자의 제목.</target>
        </trans-unit>
        <trans-unit id="5a49bf3c3edc0df6bf46cdfb99659679f9e28c55" translate="yes" xml:space="preserve">
          <source>The dialog's title. Passing null or '' will hide the title.</source>
          <target state="translated">대화 상자의 제목. null 또는 ''를 전달하면 제목이 숨겨집니다.</target>
        </trans-unit>
        <trans-unit id="5ba74ca11f6ca07d294b30b43727538a30b13434" translate="yes" xml:space="preserve">
          <source>The easiest way to install Xcode is via the &lt;a href=&quot;https://itunes.apple.com/us/app/xcode/id497799835?mt=12&quot;&gt;Mac App Store&lt;/a&gt;. Installing Xcode will also install the iOS Simulator and all the necessary tools to build your iOS app.</source>
          <target state="translated">Xcode를 설치하는 가장 쉬운 방법은 &lt;a href=&quot;https://itunes.apple.com/us/app/xcode/id497799835?mt=12&quot;&gt;Mac App Store&lt;/a&gt; 를 이용하는 것 입니다. Xcode를 설치하면 iOS 시뮬레이터 및 iOS 앱을 빌드하는 데 필요한 모든 도구가 설치됩니다.</target>
        </trans-unit>
        <trans-unit id="a21eb16fa61a72014070b7e917662d58ec9b5551" translate="yes" xml:space="preserve">
          <source>The event subscriptions are called in reverse order (i.e. last registered subscription first), and if one subscription returns true then subscriptions registered earlier will not be called.</source>
          <target state="translated">이벤트 구독은 역순으로 호출됩니다 (즉, 마지막으로 등록 된 구독이 먼저). 하나의 구독이 true를 리턴하면 이전에 등록 된 구독이 호출되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="2c58fb42292aac42bc8f6615a4a1236c1d90fc31" translate="yes" xml:space="preserve">
          <source>The fact that native modules are singletons limits the mechanism in the context of embedding. Let's say we have a React Native component embedded in a native view and we want to update the native, parent view. Using the native module mechanism, we would export a function that not only takes expected arguments, but also an identifier of the parent native view. The identifier would be used to retrieve a reference to the parent view to update. That said, we would need to keep a mapping from identifiers to native views in the module.</source>
          <target state="translated">기본 모듈이 싱글 톤이라는 사실은 임베딩 컨텍스트에서 메커니즘을 제한합니다. 네이티브 뷰에 내장 된 React Native 컴포넌트가 있고 네이티브 상위 뷰를 업데이트하려고한다고 가정 해 봅시다. 네이티브 모듈 메커니즘을 사용하여 예상 인수뿐만 아니라 부모 네이티브 뷰의 식별자를 취하는 함수를 내 보냅니다. 식별자는 업데이트 할 상위 뷰에 대한 참조를 검색하는 데 사용됩니다. 즉, 모듈의 식별자에서 기본 뷰로의 매핑을 유지해야합니다.</target>
        </trans-unit>
        <trans-unit id="1b1abcbee252eb1c0ea3bbe1f74f3b750892b55f" translate="yes" xml:space="preserve">
          <source>The final Java step is to register the ViewManager to the application, this happens in a similar way to &lt;a href=&quot;native-modules-android&quot;&gt;Native Modules&lt;/a&gt;, via the applications package member function &lt;code&gt;createViewManagers.&lt;/code&gt;</source>
          <target state="translated">마지막 Java 단계는 애플리케이션에 ViewManager를 등록하는 것 &lt;code&gt;createViewManagers.&lt;/code&gt; 이는 애플리케이션 패키지 멤버 함수 createViewManagers 를 통해 &lt;a href=&quot;native-modules-android&quot;&gt;Native Modules&lt;/a&gt; 와 유사한 방식으로 발생합니다 .</target>
        </trans-unit>
        <trans-unit id="aea2211b3602d80b88b10e78044f2242e5076be6" translate="yes" xml:space="preserve">
          <source>The first bit of code we will write is the actual React Native code for the new &quot;High Score&quot; screen that will be integrated into our application.</source>
          <target state="translated">우리가 작성할 첫 번째 코드는 응용 프로그램에 통합 될 새로운 &quot;High Score&quot;화면에 대한 실제 React Native 코드입니다.</target>
        </trans-unit>
        <trans-unit id="3e31a0ab116e734974ca9f3bb524782a1fa4879a" translate="yes" xml:space="preserve">
          <source>The first step for debugging this jank is to answer the fundamental question of where your time is being spent during each 16ms frame. For that, we'll be using a standard Android profiling tool called &lt;code&gt;systrace&lt;/code&gt;.</source>
          <target state="translated">이 jank 디버깅을위한 첫 번째 단계는 각 16ms 프레임 동안 시간이 어디에서 소비되는지에 대한 근본적인 질문에 대답하는 것입니다. 이를 위해 &lt;code&gt;systrace&lt;/code&gt; 라는 표준 Android 프로파일 링 도구를 사용합니다 .</target>
        </trans-unit>
        <trans-unit id="039fa912693bf062ff5382cdf4de803cf73680fa" translate="yes" xml:space="preserve">
          <source>The first step is to install in your project:</source>
          <target state="translated">첫 번째 단계는 프로젝트에 설치하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="4b91bfe31eef52e29d637012888f6db174d61a71" translate="yes" xml:space="preserve">
          <source>The first thing we can do to make this component more usable is to bridge over some native properties. Let's say we want to be able to disable zooming and specify the visible region. Disabling zoom is a simple boolean, so we add this one line:</source>
          <target state="translated">이 구성 요소를보다 유용하게 만들기 위해 할 수있는 첫 번째 작업은 일부 기본 속성을 연결하는 것입니다. 확대 / 축소를 비활성화하고 표시되는 영역을 지정하려고한다고 가정 해 봅시다. 확대 / 축소 비활성화는 간단한 부울이므로 다음 한 줄을 추가합니다.</target>
        </trans-unit>
        <trans-unit id="63881562a6f919ae3a78b4dfb56b128190dd0d76" translate="yes" xml:space="preserve">
          <source>The folks who built the app for Facebook's F8 conference also &lt;a href=&quot;https://github.com/fbsamples/f8app&quot;&gt;open-sourced the code&lt;/a&gt; and wrote up a &lt;a href=&quot;http://makeitopen.com/&quot;&gt;detailed series of tutorials&lt;/a&gt;. This is useful if you want a more in-depth example that's more realistic than most sample apps out there.</source>
          <target state="translated">또한 페이스 북의 F8 컨퍼런스에 대한 응용 프로그램을 내장 사람 &lt;a href=&quot;https://github.com/fbsamples/f8app&quot;&gt;의 코드를 오픈 소스 화&lt;/a&gt; 하고 쓴 &lt;a href=&quot;http://makeitopen.com/&quot;&gt;튜토리얼의 자세한 시리즈&lt;/a&gt; . 이 방법은 대부분의 샘플 앱보다 더 현실적인보다 심층적 인 예제를 원하는 경우에 유용합니다.</target>
        </trans-unit>
        <trans-unit id="221632fa2f7cb525be495895e8ff449bee0e8fd0" translate="yes" xml:space="preserve">
          <source>The following argument types are supported for methods annotated with &lt;code&gt;@ReactMethod&lt;/code&gt; and they directly map to their JavaScript equivalents</source>
          <target state="translated">다음 인수 유형은 &lt;code&gt;@ReactMethod&lt;/code&gt; 로 어노테이션이있는 메소드에 지원되며 JavaScript에 해당하는 항목에 직접 맵핑됩니다.</target>
        </trans-unit>
        <trans-unit id="f439c6ef4e1a0ae57d846ec3d6e60df150551193" translate="yes" xml:space="preserve">
          <source>The following helpers are used to modify other easing functions.</source>
          <target state="translated">다음 도우미는 다른 여유 기능을 수정하는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="0bc06a063c30621d34184397a674775d958c6980" translate="yes" xml:space="preserve">
          <source>The following image demonstrates that you can put almost anything behind the mask. The three examples shown are masked &lt;code&gt;&amp;lt;View&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;Text&amp;gt;&lt;/code&gt;, and &lt;code&gt;&amp;lt;Image&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">다음 이미지는 마스크 뒤에 거의 모든 것을 넣을 수 있음을 보여줍니다. 표시된 세 가지 예는 &lt;code&gt;&amp;lt;View&amp;gt;&lt;/code&gt; , &lt;code&gt;&amp;lt;Text&amp;gt;&lt;/code&gt; 및 &lt;code&gt;&amp;lt;Image&amp;gt;&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="eb7dfdd4d23add6b4f89b38e4a46d709d9ef6b28" translate="yes" xml:space="preserve">
          <source>The following is adapted from the excellent &lt;a href=&quot;https://opensource.guide/&quot;&gt;Open Source Guide&lt;/a&gt; from GitHub and reflects how the maintainers of React Native are encouraged to handle your contributions.</source>
          <target state="translated">다음은 GitHub 의 훌륭한 &lt;a href=&quot;https://opensource.guide/&quot;&gt;오픈 소스 가이드&lt;/a&gt; 에서 수정되었으며 React Native의 관리자가 귀하의 기여를 처리하도록 권장하는 방법을 반영합니다.</target>
        </trans-unit>
        <trans-unit id="4f254b12eab595fa8027f4f8853fff7b40d5328e" translate="yes" xml:space="preserve">
          <source>The following values work across platforms:</source>
          <target state="translated">다음 값이 플랫폼에서 작동합니다.</target>
        </trans-unit>
        <trans-unit id="04930774ba9ab3abb21c8b866e6dc6d8da7f1b7a" translate="yes" xml:space="preserve">
          <source>The following values work on Android only:</source>
          <target state="translated">다음 값은 Android에서만 작동합니다.</target>
        </trans-unit>
        <trans-unit id="6f96a234ddf648b28b5199b0decbd2e929e98c2b" translate="yes" xml:space="preserve">
          <source>The following values work on iOS only:</source>
          <target state="translated">다음 값은 iOS에서만 작동합니다.</target>
        </trans-unit>
        <trans-unit id="77c97fc1195acdc67739a05ce53b9662a4830e71" translate="yes" xml:space="preserve">
          <source>The foreground color of the spinner (default is gray).</source>
          <target state="translated">스피너의 전경색 (기본값은 회색)입니다.</target>
        </trans-unit>
        <trans-unit id="7df29c3006994f598facf9c754780a7a4a70c2d5" translate="yes" xml:space="preserve">
          <source>The friction/tension or bounciness/speed options match the spring model in &lt;a href=&quot;https://github.com/facebook/pop&quot;&gt;Facebook Pop&lt;/a&gt;, &lt;a href=&quot;http://facebook.github.io/rebound/&quot;&gt;Rebound&lt;/a&gt;, and &lt;a href=&quot;http://origami.design/&quot;&gt;Origami&lt;/a&gt;.</source>
          <target state="translated">마찰 / 인장 또는 바운스 / 속도 옵션은 &lt;a href=&quot;https://github.com/facebook/pop&quot;&gt;Facebook Pop&lt;/a&gt; , &lt;a href=&quot;http://facebook.github.io/rebound/&quot;&gt;Rebound&lt;/a&gt; 및 &lt;a href=&quot;http://origami.design/&quot;&gt;Origami&lt;/a&gt; 의 스프링 모델과 일치합니다 .</target>
        </trans-unit>
        <trans-unit id="311a86822eda9c8d439ddb3168ab87e1332bc527" translate="yes" xml:space="preserve">
          <source>The function that will be called if the image was successfully found and width and height retrieved.</source>
          <target state="translated">이미지가 성공적으로 발견되고 너비와 높이가 검색된 경우 호출되는 함수입니다.</target>
        </trans-unit>
        <trans-unit id="97e5a3af183dba8164127100bfab944978fe8cea" translate="yes" xml:space="preserve">
          <source>The function that will be called if there was an error, such as failing to retrieve the image.</source>
          <target state="translated">이미지 검색 실패와 같은 오류가 발생한 경우 호출되는 함수입니다.</target>
        </trans-unit>
        <trans-unit id="78be74f2cf30fef2c1637b6d49a49244d9b6e8d4" translate="yes" xml:space="preserve">
          <source>The function will be passed an object with the following keys:</source>
          <target state="translated">이 함수는 다음 키를 사용하여 객체에 전달됩니다.</target>
        </trans-unit>
        <trans-unit id="fecd05060321962a49f809c752372294a085d1d1" translate="yes" xml:space="preserve">
          <source>The generated APK can be found under &lt;code&gt;android/app/build/outputs/apk/app-release.apk&lt;/code&gt;, and is ready to be distributed.</source>
          <target state="translated">생성 된 APK는 &lt;code&gt;android/app/build/outputs/apk/app-release.apk&lt;/code&gt; 에서 찾을 수 있으며 배포 할 준비가되었습니다.</target>
        </trans-unit>
        <trans-unit id="d92ae19b8995b8f955a69e7170c77900c21de1e0" translate="yes" xml:space="preserve">
          <source>The gesture responder system manages the lifecycle of gestures in your app. A touch can go through several phases as the app determines what the user's intention is. For example, the app needs to determine if the touch is scrolling, sliding on a widget, or tapping. This can even change during the duration of a touch. There can also be multiple simultaneous touches.</source>
          <target state="translated">제스처 응답기 시스템은 앱에서 제스처의 수명주기를 관리합니다. 앱이 사용자의 의도를 결정함에 따라 터치는 여러 단계를 거칠 수 있습니다. 예를 들어, 앱이 터치가 스크롤 중인지, 위젯을 슬라이딩하는지, 또는 탭핑 중인지 확인해야합니다. 터치하는 동안에도 변경 될 수 있습니다. 동시에 여러 번 터치 할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="a3346f289bf62c95f547c1a51d6ff1295ea32e72" translate="yes" xml:space="preserve">
          <source>The header and footer are always rendered (if these props are provided) on every render pass. If they are expensive to re-render, wrap them in StaticContainer or other mechanism as appropriate. Footer is always at the bottom of the list, and header at the top, on every render pass. In a horizontal ListView, the header is rendered on the left and the footer on the right.</source>
          <target state="translated">머리글과 바닥 글은 모든 렌더링 패스에서 항상 렌더링됩니다 (이러한 소품이 제공되는 경우). 다시 렌더링하는 데 비용이 많이 드는 경우 StaticContainer 또는 기타 메커니즘으로 적절히 포장하십시오. 바닥 글은 항상 모든 렌더링 패스에서 목록의 맨 아래에 있고 머리글은 맨 위에 있습니다. 가로 ListView에서는 머리글이 왼쪽에 렌더링되고 바닥 글이 오른쪽에 렌더링됩니다.</target>
        </trans-unit>
        <trans-unit id="0bf23c80a6c29741ab70cd48daaa738389b8bbe9" translate="yes" xml:space="preserve">
          <source>The highlight and cursor color of the text input.</source>
          <target state="translated">텍스트 입력의 하이라이트 및 커서 색상.</target>
        </trans-unit>
        <trans-unit id="893347ca0e703f0904da2b7f97991e4061ac3634" translate="yes" xml:space="preserve">
          <source>The highlight color of the text.</source>
          <target state="translated">텍스트의 강조 색상입니다.</target>
        </trans-unit>
        <trans-unit id="8d9809434d83464674dfe92f30c507ff86a23933" translate="yes" xml:space="preserve">
          <source>The image name is resolved the same way JS modules are resolved. In the example above, the packager will look for &lt;code&gt;my-icon.png&lt;/code&gt; in the same folder as the component that requires it. Also, if you have &lt;code&gt;my-icon.ios.png&lt;/code&gt; and &lt;code&gt;my-icon.android.png&lt;/code&gt;, the packager will pick the correct file for the platform.</source>
          <target state="translated">이미지 이름은 JS 모듈을 확인하는 것과 같은 방법으로 확인됩니다. 위의 예제에서 패키저는 &lt;code&gt;my-icon.png&lt;/code&gt; 를 필요한 구성 요소와 동일한 폴더에서 찾습니다 . 또한 &lt;code&gt;my-icon.ios.png&lt;/code&gt; 및 &lt;code&gt;my-icon.android.png&lt;/code&gt; 가 있으면 패키지 관리자가 플랫폼에 맞는 파일을 선택합니다.</target>
        </trans-unit>
        <trans-unit id="ce20467627ab1a3958213389bfd2c53752cb0616" translate="yes" xml:space="preserve">
          <source>The image source (either a remote URL or a local file resource).</source>
          <target state="translated">이미지 소스 (원격 URL 또는 로컬 파일 리소스)</target>
        </trans-unit>
        <trans-unit id="ceeeb0b112ea5912e550276c316898a430bb1f4b" translate="yes" xml:space="preserve">
          <source>The index in &lt;code&gt;props.values&lt;/code&gt; of the segment to be (pre)selected.</source>
          <target state="translated">(사전) 선택 될 세그먼트의 &lt;code&gt;props.values&lt;/code&gt; 의 인덱스 .</target>
        </trans-unit>
        <trans-unit id="248bef3fccc82aeff5c14f09e20a0dbb7659f4db" translate="yes" xml:space="preserve">
          <source>The instructions are a bit different depending on your development operating system, and whether you want to start developing for iOS or Android. If you want to develop for both iOS and Android, that's fine - you just have to pick one to start with, since the setup is a bit different.</source>
          <target state="translated">지침은 개발 운영 체제 및 iOS 또는 Android 용으로 개발을 시작할지 여부에 따라 약간 다릅니다. iOS와 Android 모두를 위해 개발하고 싶다면 괜찮습니다. 설정이 약간 다르기 때문에 시작하기 위해 하나를 선택해야합니다.</target>
        </trans-unit>
        <trans-unit id="ad8641b58ce8d70c517df1c687aae6b6b2d250d0" translate="yes" xml:space="preserve">
          <source>The integration tests should only take a few minutes to run on a modern developer machine.</source>
          <target state="translated">통합 테스트는 최신 개발자 시스템에서 실행하는 데 몇 분 밖에 걸리지 않습니다.</target>
        </trans-unit>
        <trans-unit id="511be5acf4aeb6bdd8d407a74ce4808ac29cc950" translate="yes" xml:space="preserve">
          <source>The interval at which minutes can be selected.</source>
          <target state="translated">분을 선택할 수있는 간격입니다.</target>
        </trans-unit>
        <trans-unit id="6c05f2b6b7c96ec92c55143249948cb08b21bdc1" translate="yes" xml:space="preserve">
          <source>The keyboard type of first text field(if exists). One of 'default', 'email-address', 'numeric', 'phone-pad', 'ascii-capable', 'numbers-and-punctuation', 'url', 'number-pad', 'name-phone-pad', 'decimal-pad', 'twitter' or 'web-search'.</source>
          <target state="translated">첫 번째 텍스트 필드의 키보드 유형 (있는 경우). 'default', 'e-mail-address', 'numeric', 'phone-pad', 'ascii-capable', 'number-and-punctuation', 'url', 'number-pad', 'name-phone'중 하나 -pad ','decimal-pad ','twitter '또는'web-search '.</target>
        </trans-unit>
        <trans-unit id="896873b80afa8ea216c736de96f1313d55fc8c6d" translate="yes" xml:space="preserve">
          <source>The keys to integrating React Native components into your Android application are to:</source>
          <target state="translated">React Native 컴포넌트를 Android 애플리케이션에 통합하기위한 핵심은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="aafc35ac616dfea6b8eeaf3818cca61f3ae96c01" translate="yes" xml:space="preserve">
          <source>The keys to integrating React Native components into your iOS application are to:</source>
          <target state="translated">React Native 컴포넌트를 iOS 애플리케이션에 통합하기위한 핵심은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="33e6d1d8c65f5e76a4bdc0d4e26a78c30610d54e" translate="yes" xml:space="preserve">
          <source>The keystore contains a single key, valid for 10000 days. The alias is a name that you will use later when signing your app, so remember to take note of the alias.</source>
          <target state="translated">키 저장소에는 10000 일 동안 유효한 단일 키가 있습니다. 별칭은 나중에 앱에 서명 할 때 사용할 이름이므로 별칭을 기록해 두십시오.</target>
        </trans-unit>
        <trans-unit id="ccd857175b40970a08bb5f75225af76911a4fb9a" translate="yes" xml:space="preserve">
          <source>The labels for the control's segment buttons, in order.</source>
          <target state="translated">컨트롤의 세그먼트 버튼 레이블을 순서대로 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="570b3ac24ca8cff422f45c8885def124c44eb345" translate="yes" xml:space="preserve">
          <source>The last step within Java is to register the Module; this happens in the &lt;code&gt;createNativeModules&lt;/code&gt; of your apps package. If a module is not registered it will not be available from JavaScript.</source>
          <target state="translated">Java의 마지막 단계는 모듈을 등록하는 것입니다. 이것은 앱 패키지 의 &lt;code&gt;createNativeModules&lt;/code&gt; 에서 발생 합니다. 모듈이 등록되지 않으면 JavaScript에서 사용할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="bb6782dcd3aa45f17c80741940077e2dfe3991b8" translate="yes" xml:space="preserve">
          <source>The list of supported &lt;code&gt;subspec&lt;/code&gt;s is available in &lt;a href=&quot;https://github.com/facebook/react-native/blob/master/React.podspec&quot;&gt;&lt;code&gt;/node_modules/react-native/React.podspec&lt;/code&gt;&lt;/a&gt;. They are generally named by functionality. For example, you will generally always want the &lt;code&gt;Core&lt;/code&gt;&lt;code&gt;subspec&lt;/code&gt;. That will get you the &lt;code&gt;AppRegistry&lt;/code&gt;, &lt;code&gt;StyleSheet&lt;/code&gt;, &lt;code&gt;View&lt;/code&gt; and other core React Native libraries. If you want to add the React Native &lt;code&gt;Text&lt;/code&gt; library (e.g., for &lt;code&gt;&amp;lt;Text&amp;gt;&lt;/code&gt; elements), then you will need the &lt;code&gt;RCTText&lt;/code&gt;&lt;code&gt;subspec&lt;/code&gt;. If you want the &lt;code&gt;Image&lt;/code&gt; library (e.g., for &lt;code&gt;&amp;lt;Image&amp;gt;&lt;/code&gt; elements), then you will need the &lt;code&gt;RCTImage&lt;/code&gt;&lt;code&gt;subspec&lt;/code&gt;.</source>
          <target state="translated">지원 목록 &lt;code&gt;subspec&lt;/code&gt; 들에서 사용할 수 &lt;a href=&quot;https://github.com/facebook/react-native/blob/master/React.podspec&quot;&gt; &lt;code&gt;/node_modules/react-native/React.podspec&lt;/code&gt; &lt;/a&gt; . 그것들은 일반적으로 기능에 의해 명명됩니다. 예를 들어, 일반적으로 항상 &lt;code&gt;Core&lt;/code&gt; &lt;code&gt;subspec&lt;/code&gt; 합니다. 그러면 &lt;code&gt;AppRegistry&lt;/code&gt; , &lt;code&gt;StyleSheet&lt;/code&gt; , &lt;code&gt;View&lt;/code&gt; 및 기타 핵심 React Native 라이브러리가 제공됩니다. React Native &lt;code&gt;Text&lt;/code&gt; 라이브러리 를 추가하려면 (예 : &lt;code&gt;&amp;lt;Text&amp;gt;&lt;/code&gt; 요소의 경우) &lt;code&gt;RCTText&lt;/code&gt; &lt;code&gt;subspec&lt;/code&gt; 이 필요합니다 . 당신이 원하는 경우 &lt;code&gt;Image&lt;/code&gt; (예 : 도서관 &lt;code&gt;&amp;lt;Image&amp;gt;&lt;/code&gt; 요소), 당신은해야합니다 &lt;code&gt;RCTImage&lt;/code&gt; 의 &lt;code&gt;subspec&lt;/code&gt; 을.</target>
        </trans-unit>
        <trans-unit id="dc7958efd147f967eb239e7133833d760d0f1f36" translate="yes" xml:space="preserve">
          <source>The loaded module names get us part of the way there, but we actually need absolute module paths, so the next script will set that up. Add &lt;code&gt;packager/generateModulePaths.js&lt;/code&gt; to your project with the following:</source>
          <target state="translated">로드 된 모듈 이름은 우리에게 그 길의 일부를 제공하지만 실제로 절대 모듈 경로가 필요하므로 다음 스크립트에서 설정합니다. 다음 을 사용하여 &lt;code&gt;packager/generateModulePaths.js&lt;/code&gt; 를 프로젝트에 추가하십시오 .</target>
        </trans-unit>
        <trans-unit id="a24bbfab5d5b017da5648ce46952a8e022dee88a" translate="yes" xml:space="preserve">
          <source>The local CLI</source>
          <target state="translated">로컬 CLI</target>
        </trans-unit>
        <trans-unit id="3a58dc76d6c2012a3a4457d5c081a5cdcafc5810" translate="yes" xml:space="preserve">
          <source>The locale for the date picker. Value needs to be a &lt;a href=&quot;https://developer.apple.com/library/content/documentation/MacOSX/Conceptual/BPInternational/LanguageandLocaleIDs/LanguageandLocaleIDs.html&quot;&gt;Locale ID&lt;/a&gt;.</source>
          <target state="translated">날짜 선택기의 로캘입니다. 값은 &lt;a href=&quot;https://developer.apple.com/library/content/documentation/MacOSX/Conceptual/BPInternational/LanguageandLocaleIDs/LanguageandLocaleIDs.html&quot;&gt;로캘 ID&lt;/a&gt; 여야합니다 .</target>
        </trans-unit>
        <trans-unit id="f919883a93eca04a7d2c0cd18c9a70b60405bd9b" translate="yes" xml:space="preserve">
          <source>The location of the image.</source>
          <target state="translated">이미지의 위치입니다.</target>
        </trans-unit>
        <trans-unit id="000a2d762395d80a888e04bebdc35b95130b1e1c" translate="yes" xml:space="preserve">
          <source>The main drawback of cross-language properties is that they do not support callbacks, which would allow us to handle bottom-up data bindings. Imagine you have a small RN view that you want to be removed from the native parent view as a result of a JS action. There is no way to do that with props, as the information would need to go bottom-up.</source>
          <target state="translated">언어 간 속성의 주요 단점은 콜백을 지원하지 않기 때문에 상향식 데이터 바인딩을 처리 할 수 ​​있다는 것입니다. JS 조치의 결과로 기본 상위보기에서 제거하려는 작은 RN보기가 있다고 가정하십시오. 정보가 상향식으로 올라갈 필요가 있기 때문에 소품으로 그렇게 할 수있는 방법이 없습니다.</target>
        </trans-unit>
        <trans-unit id="16fea9a858cc8fe5ed1bec0da37fecce9c79b794" translate="yes" xml:space="preserve">
          <source>The maximum allowed zoom scale. The default value is 1.0.</source>
          <target state="translated">허용되는 최대 줌 배율입니다. 기본값은 1.0입니다.</target>
        </trans-unit>
        <trans-unit id="d7a989a848211d407d41fa475478b6c13a8b8003" translate="yes" xml:space="preserve">
          <source>The maximum number of items to render in each incremental render batch. The more rendered at once, the better the fill rate, but responsiveness my suffer because rendering content may interfere with responding to button taps or other interactions.</source>
          <target state="translated">각 증분 렌더 배치에서 렌더링 할 최대 항목 수입니다. 한 번에 더 많이 렌더링할수록 채우기 속도는 좋아 지지만 렌더링 내용이 버튼 탭이나 다른 상호 작용에 응답하는 데 방해가 될 수 있으므로 응답 성이 떨어집니다.</target>
        </trans-unit>
        <trans-unit id="8caa7cb26bc8baac7e92d6cab12ea97daab32b37" translate="yes" xml:space="preserve">
          <source>The mechanism that should be used to resize the image when the image's dimensions differ from the image view's dimensions. Defaults to &lt;code&gt;auto&lt;/code&gt;.</source>
          <target state="translated">이미지의 크기가 이미지보기의 크기와 다를 때 이미지 크기를 조정하는 데 사용해야하는 메커니즘입니다. 기본값은 &lt;code&gt;auto&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="f31ba748102187c7d20a3c323280c0ec4f58f3d0" translate="yes" xml:space="preserve">
          <source>The memory limit of a Today widget is 16 MB. As it happens, Today widget implementations using React Native may work unreliably because the memory usage tends to be too high. You can tell if your Today widget is exceeding the memory limit if it yields the message 'Unable to Load':</source>
          <target state="translated">Today 위젯의 메모리 제한은 16MB입니다. 이와 같이 React Native를 사용하는 Today 위젯 구현은 메모리 사용량이 너무 많기 때문에 안정적으로 작동하지 않을 수 있습니다. 오늘 위젯이 '로드 할 수 없습니다'라는 메시지가 표시되면 메모리 제한을 초과하는지 알 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="1a14c48613de548e060eeefdf2683cceb9843824" translate="yes" xml:space="preserve">
          <source>The method returns a &lt;code&gt;Promise&lt;/code&gt; object.</source>
          <target state="translated">이 메서드는 &lt;code&gt;Promise&lt;/code&gt; 개체를 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="d894f082385702d79dc9d6de8340176f18320360" translate="yes" xml:space="preserve">
          <source>The method returns a &lt;code&gt;Promise&lt;/code&gt; object. If the user confirms the open dialog or the url automatically opens, the promise is resolved. If the user cancels the open dialog or there are no registered applications for the url, the promise is rejected.</source>
          <target state="translated">이 메서드는 &lt;code&gt;Promise&lt;/code&gt; 개체를 반환 합니다. 사용자가 열린 대화 상자를 확인하거나 URL이 자동으로 열리면 약속이 해결됩니다. 사용자가 열린 대화 상자를 취소하거나 URL에 등록 된 응용 프로그램이 없으면 약속이 거부됩니다.</target>
        </trans-unit>
        <trans-unit id="d4d66bdd5be505ddb21f1ec7bffb16779387c343" translate="yes" xml:space="preserve">
          <source>The method returns a &lt;code&gt;Promise&lt;/code&gt; object. When it is determined whether or not the given URL can be handled, the promise is resolved and the first parameter is whether or not it can be opened.</source>
          <target state="translated">이 메서드는 &lt;code&gt;Promise&lt;/code&gt; 개체를 반환 합니다. 주어진 URL을 처리 할 수 ​​있는지 여부가 판별되면 약속이 해결되고 첫 번째 매개 변수는 URL을 열 수 있는지 여부입니다.</target>
        </trans-unit>
        <trans-unit id="a54f9442e4e022ba82c1168fab092f0a1d1487de" translate="yes" xml:space="preserve">
          <source>The methods described here are available on most of the default components provided by React Native. Note, however, that they are &lt;em&gt;not&lt;/em&gt; available on composite components that aren't directly backed by a native view. This will generally include most components that you define in your own app.</source>
          <target state="translated">여기에 설명 된 방법은 React Native에서 제공하는 대부분의 기본 구성 요소에서 사용할 수 있습니다. 그러나 기본보기에서 직접 지원하지 않는 복합 구성 요소 &lt;em&gt;에서는&lt;/em&gt; 사용할 수 없습니다. 여기에는 일반적으로 자신의 앱에서 정의한 대부분의 구성 요소가 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="a66a39ed26f56985424e218dfc07bb77464e5efd" translate="yes" xml:space="preserve">
          <source>The minimum allowed zoom scale. The default value is 1.0.</source>
          <target state="translated">허용되는 최소 줌 배율입니다. 기본값은 1.0입니다.</target>
        </trans-unit>
        <trans-unit id="f594c7116228c1bda6af2842899a9fc7f608b954" translate="yes" xml:space="preserve">
          <source>The module &lt;code&gt;react-native-git-upgrade&lt;/code&gt; provides a one-step operation to upgrade the source files with a minimum of conflicts. Under the hood, it consists in 2 phases:</source>
          <target state="translated">&lt;code&gt;react-native-git-upgrade&lt;/code&gt; 모듈 은 최소한의 충돌로 소스 파일을 업그레이드하는 1 단계 작업을 제공합니다. 후드 아래에서 2 단계로 구성됩니다.</target>
        </trans-unit>
        <trans-unit id="e928b777710f48cf90e0fb3faace725cbe9e7806" translate="yes" xml:space="preserve">
          <source>The most fundamental component for building a UI, &lt;code&gt;View&lt;/code&gt; is a container that supports layout with &lt;a href=&quot;flexbox&quot;&gt;flexbox&lt;/a&gt;, &lt;a href=&quot;style&quot;&gt;style&lt;/a&gt;, &lt;a href=&quot;handling-touches&quot;&gt;some touch handling&lt;/a&gt;, and &lt;a href=&quot;accessibility&quot;&gt;accessibility&lt;/a&gt; controls. &lt;code&gt;View&lt;/code&gt; maps directly to the native view equivalent on whatever platform React Native is running on, whether that is a &lt;code&gt;UIView&lt;/code&gt;, &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;, &lt;code&gt;android.view&lt;/code&gt;, etc.</source>
          <target state="translated">UI 구축을위한 가장 기본적인 구성 요소 인 &lt;code&gt;View&lt;/code&gt; 는 &lt;a href=&quot;flexbox&quot;&gt;flexbox&lt;/a&gt; , &lt;a href=&quot;style&quot;&gt;스타일&lt;/a&gt; , &lt;a href=&quot;handling-touches&quot;&gt;일부 터치 처리&lt;/a&gt; 및 &lt;a href=&quot;accessibility&quot;&gt;접근성&lt;/a&gt; 컨트롤 이있는 레이아웃을 지원하는 컨테이너입니다 . &lt;code&gt;View&lt;/code&gt; , 기본이 실행되는 반작용 어떤 플랫폼에서 네이티브보기에 해당 고객에게 직접이 있는지 여부를 매핑 &lt;code&gt;UIView&lt;/code&gt; , &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; , &lt;code&gt;android.view&lt;/code&gt; 등</target>
        </trans-unit>
        <trans-unit id="20b440a15c2782386b326ee7f9e59c280bd7fdd9" translate="yes" xml:space="preserve">
          <source>The most fundamental component for building a UI.</source>
          <target state="translated">UI 구축을위한 가장 기본적인 구성 요소입니다.</target>
        </trans-unit>
        <trans-unit id="09fb3ed5734c2ba461620b29a8389e6b26a3a9fb" translate="yes" xml:space="preserve">
          <source>The name of the method exported to JavaScript is the native method's name up to the first colon. React Native also defines a macro called &lt;code&gt;RCT_REMAP_METHOD()&lt;/code&gt; to specify the JavaScript method's name. This is useful when multiple native methods are the same up to the first colon and would have conflicting JavaScript names.</source>
          <target state="translated">JavaScript로 내 보낸 메소드 이름은 첫 번째 콜론까지의 고유 메소드 이름입니다. React Native는 &lt;code&gt;RCT_REMAP_METHOD()&lt;/code&gt; 라는 매크로를 정의 하여 JavaScript 메서드의 이름을 지정합니다. 여러 원시 메소드가 첫 번째 콜론까지 동일하고 JavaScript 이름이 충돌 할 때 유용합니다.</target>
        </trans-unit>
        <trans-unit id="3709290d1cd99d279d5416fb66abd23169c42589" translate="yes" xml:space="preserve">
          <source>The native driver also works with &lt;code&gt;Animated.event&lt;/code&gt;. This is specially useful for animations that follow the scroll position as without the native driver, the animation will always run a frame behind the gesture due to the async nature of React Native.</source>
          <target state="translated">기본 드라이버는 &lt;code&gt;Animated.event&lt;/code&gt; 와도 작동합니다 . 이것은 네이티브 드라이버없이 스크롤 위치를 따르는 애니메이션에 특히 유용합니다. 애니메이션은 React Native의 비동기 특성으로 인해 항상 제스처 뒤에서 프레임을 실행합니다.</target>
        </trans-unit>
        <trans-unit id="18b5fb2c3aba96245852f59c34d66a2d1fff21a4" translate="yes" xml:space="preserve">
          <source>The native module can signal events to JavaScript without being invoked directly. The preferred way to do this is to subclass &lt;code&gt;RCTEventEmitter&lt;/code&gt;, implement &lt;code&gt;supportedEvents&lt;/code&gt; and call &lt;code&gt;self sendEventWithName&lt;/code&gt;:</source>
          <target state="translated">기본 모듈은 직접 호출하지 않고 JavaScript로 이벤트를 신호 할 수 있습니다. 이 작업을 수행하는 좋은 방법은 하위 클래스입니다 &lt;code&gt;RCTEventEmitter&lt;/code&gt; 을 구현 &lt;code&gt;supportedEvents&lt;/code&gt; 및 통화 &lt;code&gt;self sendEventWithName&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="37b5da301799d317e450df6d2f3ddaa28c4fa855" translate="yes" xml:space="preserve">
          <source>The native module should not have any assumptions about what thread it is being called on. React Native invokes native modules methods on a separate serial GCD queue, but this is an implementation detail and might change. The &lt;code&gt;- (dispatch_queue_t)methodQueue&lt;/code&gt; method allows the native module to specify which queue its methods should be run on. For example, if it needs to use a main-thread-only iOS API, it should specify this via:</source>
          <target state="translated">네이티브 모듈에는 어떤 스레드가 호출되는지에 대한 가정이 없어야합니다. React Native는 별도의 직렬 GCD 대기열에서 기본 모듈 메소드를 호출하지만 이는 구현 세부 사항이며 변경 될 수 있습니다. &lt;code&gt;- (dispatch_queue_t)methodQueue&lt;/code&gt; 방법은 그 방법을 실행해야 큐 지정하려면 네이티브 모듈을 수 있습니다. 예를 들어 메인 스레드 전용 iOS API를 사용해야하는 경우 다음을 통해이를 지정해야합니다.</target>
        </trans-unit>
        <trans-unit id="6e5c828a253793e2d9d2b4710789384fec7a0fa6" translate="yes" xml:space="preserve">
          <source>The navigation view that will be rendered to the side of the screen and can be pulled in.</source>
          <target state="translated">화면 측면으로 렌더링되고 끌어 올 수있는 탐색보기입니다.</target>
        </trans-unit>
        <trans-unit id="662fc0d74c4ebf3be45a793dcf6fa4c7bb8e2732" translate="yes" xml:space="preserve">
          <source>The new npm package may contain updates to the files that are normally generated when you run &lt;code&gt;react-native init&lt;/code&gt;, like the iOS and the Android sub-projects.</source>
          <target state="translated">새로운 npm 패키지에는 iOS 및 Android 하위 프로젝트와 같이 &lt;code&gt;react-native init&lt;/code&gt; 를 실행할 때 일반적으로 생성되는 파일에 대한 업데이트가 포함될 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="a1d9cd0084a459520640409a6b121e0aa168b1bb" translate="yes" xml:space="preserve">
          <source>The new route that replaces the previous scene.</source>
          <target state="translated">이전 장면을 대체하는 새로운 경로.</target>
        </trans-unit>
        <trans-unit id="c928c8a63d43039ea62fb17c74dfe3b7525046f3" translate="yes" xml:space="preserve">
          <source>The new route that will replace the specified one.</source>
          <target state="translated">지정된 경로를 대체 할 새 경로</target>
        </trans-unit>
        <trans-unit id="1010747221de7b8ffb2b4766e4737955a0993420" translate="yes" xml:space="preserve">
          <source>The new route that will replace the topmost item.</source>
          <target state="translated">최상위 항목을 대체 할 새로운 경로입니다.</target>
        </trans-unit>
        <trans-unit id="489cc098b261e438c5e057e4d9f2c08b9292dda4" translate="yes" xml:space="preserve">
          <source>The new route to navigate to.</source>
          <target state="translated">탐색 할 새로운 경로입니다.</target>
        </trans-unit>
        <trans-unit id="ad70826a31ebd14f0a3752e7bca3e7a598aaa50f" translate="yes" xml:space="preserve">
          <source>The new route to will replace the previous scene.</source>
          <target state="translated">새 경로는 이전 장면을 대체합니다.</target>
        </trans-unit>
        <trans-unit id="39640a860aea859ad4a286cfef78ac5ef96dcc56" translate="yes" xml:space="preserve">
          <source>The number of scenes to pop.</source>
          <target state="translated">팝업 할 장면의 수입니다.</target>
        </trans-unit>
        <trans-unit id="e36223905e0e89454fb6c1a6983e7485bbf115ea" translate="yes" xml:space="preserve">
          <source>The other new thing going on here is the &lt;a href=&quot;view&quot;&gt;&lt;code&gt;View&lt;/code&gt;&lt;/a&gt; component. A &lt;a href=&quot;view&quot;&gt;&lt;code&gt;View&lt;/code&gt;&lt;/a&gt; is useful as a container for other components, to help control style and layout.</source>
          <target state="translated">여기서 진행되는 또 다른 새로운 것은 &lt;a href=&quot;view&quot;&gt; &lt;code&gt;View&lt;/code&gt; &lt;/a&gt; 구성 요소입니다. &lt;a href=&quot;view&quot;&gt; &lt;code&gt;View&lt;/code&gt; &lt;/a&gt; 도움말 컨트롤 스타일 및 레이아웃에 다른 구성 요소의 컨테이너로서 유용하다.</target>
        </trans-unit>
        <trans-unit id="0a37992d56d976fb19664f412559457cde83717c" translate="yes" xml:space="preserve">
          <source>The other unusual thing in this code example is &lt;code&gt;&amp;lt;View&amp;gt;&amp;lt;Text&amp;gt;Hello world!&amp;lt;/Text&amp;gt;&amp;lt;/View&amp;gt;&lt;/code&gt;. This is JSX - a syntax for embedding XML within JavaScript. Many frameworks use a special templating language which lets you embed code inside markup language. In React, this is reversed. JSX lets you write your markup language inside code. It looks like HTML on the web, except instead of web things like &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; or &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt;, you use React components. In this case, &lt;code&gt;&amp;lt;Text&amp;gt;&lt;/code&gt; is a built-in component that just displays some text and &lt;code&gt;View&lt;/code&gt; is like the &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; or &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">이 코드 예제에서 다른 특이한 것은 &lt;code&gt;&amp;lt;View&amp;gt;&amp;lt;Text&amp;gt;Hello world!&amp;lt;/Text&amp;gt;&amp;lt;/View&amp;gt;&lt;/code&gt; 입니다. 이것은 JavaScript 내에 XML을 포함시키기위한 구문 인 JSX입니다. 많은 프레임 워크에서 마크 업 언어에 코드를 포함시킬 수있는 특수 템플릿 언어를 사용합니다. React에서는 반대로됩니다. JSX를 사용하면 코드 내에 마크 업 언어를 작성할 수 있습니다. &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; 또는 &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt; 과 같은 웹 항목 대신 React 구성 요소를 사용하는 것을 제외하고는 웹에서 HTML처럼 보입니다 . 이 경우 &lt;code&gt;&amp;lt;Text&amp;gt;&lt;/code&gt; 는 일부 텍스트 만 표시하는 내장 구성 요소이며 &lt;code&gt;View&lt;/code&gt; 는 &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; 또는 &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt; 과 같습니다 .</target>
        </trans-unit>
        <trans-unit id="a53e83d5be38ec47bf1748ae62b1ba247fe67af6" translate="yes" xml:space="preserve">
          <source>The package needs to be provided in the &lt;code&gt;getPackages&lt;/code&gt; method of the &lt;code&gt;MainApplication.java&lt;/code&gt; file. This file exists under the android folder in your react-native application directory. The path to this file is: &lt;code&gt;android/app/src/main/java/com/your-app-name/MainApplication.java&lt;/code&gt;.</source>
          <target state="translated">패키지 는 &lt;code&gt;MainApplication.java&lt;/code&gt; 파일 의 &lt;code&gt;getPackages&lt;/code&gt; 메소드에 제공 되어야 합니다. 이 파일은 react-native 응용 프로그램 디렉토리의 android 폴더 아래에 있습니다. 이 파일의 경로는 &lt;code&gt;android/app/src/main/java/com/your-app-name/MainApplication.java&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="2c97eea1deefaceba58e6d32e57c6a94b27a5601" translate="yes" xml:space="preserve">
          <source>The packager knows the image dimensions, no need to duplicate it in the code.</source>
          <target state="translated">패키저는 이미지 크기를 알고 있으므로 코드에서 이미지 크기를 복제 할 필요가 없습니다.</target>
        </trans-unit>
        <trans-unit id="5c8a2c2e006e39effe75271a7965ce7b80f6e9d6" translate="yes" xml:space="preserve">
          <source>The permission to check for.</source>
          <target state="translated">확인할 권한입니다.</target>
        </trans-unit>
        <trans-unit id="e8493b81a1016dfec936898b56e484c6385c1cfd" translate="yes" xml:space="preserve">
          <source>The permission to request.</source>
          <target state="translated">요청 권한</target>
        </trans-unit>
        <trans-unit id="af14789cf0a69dcff551bd42aac668c1ab81ce3b" translate="yes" xml:space="preserve">
          <source>The preloadedModules entry in the config indicates which modules should be marked as preloaded by the unbundler. When the bundle is loaded, those modules are immediately loaded, before any requires have even executed. The blacklist entry indicates that those modules should not be required inline. Because they are preloaded, there is no performance benefit from using an inline require. In fact the javascript spends extra time resolving the inline require every time the imports are referenced.</source>
          <target state="translated">구성의 preloadedModules 항목은 번 들러가 사전로드 한 것으로 표시해야하는 모듈을 나타냅니다. 번들이로드되면 요구 사항이 실행되기 전에 해당 모듈이 즉시로드됩니다. 블랙리스트 항목은 해당 모듈을 인라인 할 필요가 없음을 나타냅니다. 사전로드되어 있기 때문에 인라인 요구를 사용하면 성능상의 이점이 없습니다. 실제로 자바 스크립트는 가져 오기가 참조 될 때마다 인라인 요구를 해결하는 데 추가 시간을 소비합니다.</target>
        </trans-unit>
        <trans-unit id="f1bdbabdb16e4cb925e7907171a4fb67ae3be579" translate="yes" xml:space="preserve">
          <source>The problem exposing properties of native components is covered in detail in &lt;a href=&quot;native-components-ios#properties&quot;&gt;this article&lt;/a&gt;. In short, export properties with &lt;code&gt;RCT_CUSTOM_VIEW_PROPERTY&lt;/code&gt; macro in your custom native component, then just use them in React Native as if the component was an ordinary React Native component.</source>
          <target state="translated">네이티브 구성 요소의 속성을 노출하는 문제는 &lt;a href=&quot;native-components-ios#properties&quot;&gt;이 기사&lt;/a&gt; 에서 자세히 다룹니다 . 즉, 사용자 정의 기본 컴포넌트에서 &lt;code&gt;RCT_CUSTOM_VIEW_PROPERTY&lt;/code&gt; 매크로를 사용하여 특성을 내보내고 컴포넌트가 일반 React Native 컴포넌트 인 것처럼 React Native에서 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="537aa47c01854db8240851f3629e46043409e86e" translate="yes" xml:space="preserve">
          <source>The progress bar style.</source>
          <target state="translated">진행률 표시 줄 스타일.</target>
        </trans-unit>
        <trans-unit id="8869ca6b151fe507a8ae1321573b18fbff6fd6eb" translate="yes" xml:space="preserve">
          <source>The progress value (between 0 and 1).</source>
          <target state="translated">진행률 값 (0과 1 사이).</target>
        </trans-unit>
        <trans-unit id="85268e57d560cc7536342dd8a65aa766d08b18b9" translate="yes" xml:space="preserve">
          <source>The purpose of &lt;code&gt;SafeAreaView&lt;/code&gt; is to render content within the safe area boundaries of a device. It is currently only applicable to iOS devices.</source>
          <target state="translated">&lt;code&gt;SafeAreaView&lt;/code&gt; 의 목적은 장치의 안전 영역 경계 내에서 콘텐츠를 렌더링하는 것입니다. 현재 iOS 기기에만 적용됩니다.</target>
        </trans-unit>
        <trans-unit id="e261b880251a6a44c14a8b699e31744b414e5ed1" translate="yes" xml:space="preserve">
          <source>The remainder of this guide only applies to projects made with &lt;code&gt;react-native init&lt;/code&gt; or to those made with Create React Native App which have since ejected. For more information about ejecting, please see the &lt;a href=&quot;https://github.com/react-community/create-react-native-app/blob/master/EJECTING.md&quot;&gt;guide&lt;/a&gt; on the Create React Native App repository.</source>
          <target state="translated">이 안내서의 나머지 부분은 &lt;code&gt;react-native init&lt;/code&gt; 로 만든 프로젝트 또는 추출 된 네이티브 반응 앱 만들기로 만든 프로젝트에만 적용 됩니다. 추출에 대한 자세한 내용은 React Native App 리포지토리 생성 &lt;a href=&quot;https://github.com/react-community/create-react-native-app/blob/master/EJECTING.md&quot;&gt;가이드&lt;/a&gt; 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="881ba3deffeafa7cc7782449c93683d68b7e307d" translate="yes" xml:space="preserve">
          <source>The remote location of the image.</source>
          <target state="translated">이미지의 원격 위치</target>
        </trans-unit>
        <trans-unit id="74344a2f618b88aec5f2166a95a8e6a4a3652c52" translate="yes" xml:space="preserve">
          <source>The render function will be passed an object with the following keys:</source>
          <target state="translated">다음 키를 사용하여 렌더링 함수에 객체가 전달됩니다.</target>
        </trans-unit>
        <trans-unit id="14618f9ff8d9aded4dd2a97c769210a6fd29ad4c" translate="yes" xml:space="preserve">
          <source>The responder has been taken from the &lt;code&gt;View&lt;/code&gt;. Might be taken by other views after a call to &lt;code&gt;onResponderTerminationRequest&lt;/code&gt;, or might be taken by the OS without asking (e.g., happens with control center/ notification center on iOS)</source>
          <target state="translated">응답자가 &lt;code&gt;View&lt;/code&gt; 에서 가져 왔습니다 . &lt;code&gt;onResponderTerminationRequest&lt;/code&gt; 호출 후 다른 뷰에서 가져 오거나 묻지 않고 OS에서 발생할 수 있습니다 (예 : iOS의 제어 센터 / 알림 센터에서 발생)</target>
        </trans-unit>
        <trans-unit id="36e69c4dde39630f4fc79cbaef732d5b7877c706" translate="yes" xml:space="preserve">
          <source>The responder system can be complicated to use. So we have provided an abstract &lt;code&gt;Touchable&lt;/code&gt; implementation for things that should be &quot;tappable&quot;. This uses the responder system and allows you to easily configure tap interactions declaratively. Use &lt;code&gt;TouchableHighlight&lt;/code&gt; anywhere where you would use a button or link on web.</source>
          <target state="translated">응답기 시스템은 사용하기가 복잡 할 수 있습니다. 그래서 우리는 &quot;탭할 수있는&quot;것들에 대한 추상적 인 &lt;code&gt;Touchable&lt;/code&gt; 구현을 제공했습니다 . 응답 시스템을 사용하여 탭 상호 작용을 선언적으로 쉽게 구성 할 수 있습니다. 웹에서 버튼이나 링크를 사용하는 곳이라면 어디든지 &lt;code&gt;TouchableHighlight&lt;/code&gt; 를 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="6dfbc243b05d992d23ce146205888358c76115e1" translate="yes" xml:space="preserve">
          <source>The ripple color</source>
          <target state="translated">리플 색상</target>
        </trans-unit>
        <trans-unit id="b30852fde6529e85dc3c210f1ee36c229763d450" translate="yes" xml:space="preserve">
          <source>The rotate transformations require a string so that the transform may be expressed in degrees (deg) or radians (rad). For example:</source>
          <target state="translated">회전 변환에는 변환이도 (deg) 또는 라디안 (rad)으로 표시 될 수 있도록 문자열이 필요합니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="b0b34f6c9f735900d7e3afd846181a45e92be29a" translate="yes" xml:space="preserve">
          <source>The route into the stack that should be replaced. If it is negative, it counts from the back of the stack.</source>
          <target state="translated">교체해야 할 스택으로의 경로입니다. 음수이면 스택 뒷면부터 계산됩니다.</target>
        </trans-unit>
        <trans-unit id="1a264e63b00894ee54c4555e7307e67a35e41b3d" translate="yes" xml:space="preserve">
          <source>The same concept applies to React Native. As long as we are building our application purely within the framework, we can drive our app with properties and callbacks. But, when we mix React Native and native components, we need some special, cross-language mechanisms that would allow us to pass information between them.</source>
          <target state="translated">React Native에도 동일한 개념이 적용됩니다. 프레임 워크 내에서 애플리케이션을 순수하게 구축하는 한 속성 및 콜백으로 앱을 구동 할 수 있습니다. 그러나 React Native 컴포넌트와 Native 컴포넌트를 혼합 할 때 정보를 전달할 수있는 특수한 언어 간 메커니즘이 필요합니다.</target>
        </trans-unit>
        <trans-unit id="38f8a48abb7817f47344238b25a64d4df8fb747c" translate="yes" xml:space="preserve">
          <source>The same tests discussed above for iOS will also run on tvOS. In the RNTester Xcode project, select the RNTester-tvOS target, and you can follow the same steps above to run the tests in Xcode.</source>
          <target state="translated">iOS에 대해 위에서 설명한 동일한 테스트는 tvOS에서도 실행됩니다. RNTester Xcode 프로젝트에서 RNTester-tvOS 대상을 선택하고 위의 동일한 단계에 따라 Xcode에서 테스트를 실행할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3774f6e821740f9e47e5936052e951273e64a175" translate="yes" xml:space="preserve">
          <source>The security model for XMLHttpRequest is different than on web as there is no concept of &lt;a href=&quot;http://en.wikipedia.org/wiki/Cross-origin_resource_sharing&quot;&gt;CORS&lt;/a&gt; in native apps.</source>
          <target state="translated">기본 앱 에는 &lt;a href=&quot;http://en.wikipedia.org/wiki/Cross-origin_resource_sharing&quot;&gt;CORS&lt;/a&gt; 개념이 없으므로 XMLHttpRequest의 보안 모델은 웹과 다릅니다 .</target>
        </trans-unit>
        <trans-unit id="299470c7bd804fa5b7fe68f85b1e6977e389694d" translate="yes" xml:space="preserve">
          <source>The selected index can be changed on the fly by assigning the selectedIndex prop to a state variable, then changing that variable. Note that the state variable would need to be updated as the user selects a value and changes the index, as shown in the example below.</source>
          <target state="translated">selectedIndex 소품을 상태 변수에 할당 한 다음 해당 변수를 변경하면 선택한 인덱스를 즉석에서 변경할 수 있습니다. 아래 예제와 같이 사용자가 값을 선택하고 색인을 변경하면 상태 변수를 업데이트해야합니다.</target>
        </trans-unit>
        <trans-unit id="707928309c9a6c225b22a11d7ceb24307cccc99a" translate="yes" xml:space="preserve">
          <source>The simplest scenario is when we have a React Native app with a fixed size, which is known to the native side. In particular, a full-screen React Native view falls into this case. If we want a smaller root view, we can explicitly set RCTRootView's frame.</source>
          <target state="translated">가장 간단한 시나리오는 고정 크기의 기본 네이티브 React Native 앱을 사용하는 경우입니다. 특히, 전체 화면 React Native보기가이 경우에 해당합니다. 더 작은 루트 뷰를 원한다면 RCTRootView의 프레임을 명시 적으로 설정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="59578814b7be6e9853392ab733ab491b689f5f07" translate="yes" xml:space="preserve">
          <source>The simplest use case is to plop down a &lt;code&gt;TextInput&lt;/code&gt; and subscribe to the &lt;code&gt;onChangeText&lt;/code&gt; events to read the user input. There are also other events, such as &lt;code&gt;onSubmitEditing&lt;/code&gt; and &lt;code&gt;onFocus&lt;/code&gt; that can be subscribed to. A simple example:</source>
          <target state="translated">가장 간단한 사용 사례는 &lt;code&gt;TextInput&lt;/code&gt; 을 내려 놓고 &lt;code&gt;onChangeText&lt;/code&gt; 이벤트를 구독 하여 사용자 입력을 읽는 것입니다. 구독 할 수있는 &lt;code&gt;onSubmitEditing&lt;/code&gt; 및 &lt;code&gt;onFocus&lt;/code&gt; 와 같은 다른 이벤트도 있습니다. 간단한 예 :</target>
        </trans-unit>
        <trans-unit id="885e0faaf4c77172a5a209dc660b25f17d4f7cfa" translate="yes" xml:space="preserve">
          <source>The simplest way to set the dimensions of a component is by adding a fixed &lt;code&gt;width&lt;/code&gt; and &lt;code&gt;height&lt;/code&gt; to style. All dimensions in React Native are unitless, and represent density-independent pixels.</source>
          <target state="translated">구성 요소의 치수를 설정하는 가장 간단한 방법은 스타일에 고정 &lt;code&gt;width&lt;/code&gt; 와 &lt;code&gt;height&lt;/code&gt; 를 추가하는 것입니다. React Native의 모든 치수는 단위가 없으며 밀도 독립적 픽셀을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="7a14a078e55223d40a77b561027fd314b485ac0c" translate="yes" xml:space="preserve">
          <source>The simplest workflow for creating an animation is to create an &lt;code&gt;Animated.Value&lt;/code&gt;, hook it up to one or more style attributes of an animated component, and then drive updates via animations using &lt;code&gt;Animated.timing()&lt;/code&gt;:</source>
          <target state="translated">애니메이션을 만드는 가장 간단한 작업 과정은 &lt;code&gt;Animated.Value&lt;/code&gt; 를 만들고 애니메이션 구성 요소의 하나 이상의 스타일 속성에 연결 한 다음 &lt;code&gt;Animated.timing()&lt;/code&gt; 사용하여 애니메이션을 통해 업데이트를 유도하는 것입니다 .</target>
        </trans-unit>
        <trans-unit id="98cc8d421410e7416e335e353bad2aa18e7f8bd2" translate="yes" xml:space="preserve">
          <source>The skew transformations require a string so that the transform may be expressed in degrees (deg). For example:</source>
          <target state="translated">스큐 변환에는 변환이도 (deg)로 표시 될 수 있도록 문자열이 필요합니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="435dd6dc202bde91139dd2f37cb384cd6871b0b7" translate="yes" xml:space="preserve">
          <source>The specific steps are different depending on what platform you're targeting.</source>
          <target state="translated">구체적인 단계는 타겟팅하는 플랫폼에 따라 다릅니다.</target>
        </trans-unit>
        <trans-unit id="ce662cafcc2a7155e8604df008bc85e2daa4ddc6" translate="yes" xml:space="preserve">
          <source>The specified &lt;code&gt;methodQueue&lt;/code&gt; will be shared by all of the methods in your module. If &lt;em&gt;just one&lt;/em&gt; of your methods is long-running (or needs to be run on a different queue than the others for some reason), you can use &lt;code&gt;dispatch_async&lt;/code&gt; inside the method to perform that particular method's code on another queue, without affecting the others:</source>
          <target state="translated">지정된 &lt;code&gt;methodQueue&lt;/code&gt; 는 모듈의 모든 메소드에서 공유합니다. 경우 &lt;em&gt;하나의&lt;/em&gt; 당신의 방법은 (또는 필요 어떤 이유로 다른 사람보다 다른 큐에서 실행되는) 장기 실행, 당신은 사용할 수 있습니다 &lt;code&gt;dispatch_async&lt;/code&gt; 다른 영향을주지 않고, 다른 큐에 특정 메소드의 코드를 수행하는 방법 내부 :</target>
        </trans-unit>
        <trans-unit id="fe65d0cd27237ba285083a8b361fdff4b6799aec" translate="yes" xml:space="preserve">
          <source>The start and end of the text input's selection. Set start and end to the same value to position the cursor.</source>
          <target state="translated">텍스트 입력 선택의 시작과 끝. 시작 및 종료를 동일한 값으로 설정하여 커서를 배치하십시오.</target>
        </trans-unit>
        <trans-unit id="10b123821f4ba4cc03134d9f2de7e33637887a4a" translate="yes" xml:space="preserve">
          <source>The string that will be rendered before text input has been entered.</source>
          <target state="translated">텍스트 입력 전에 렌더링 될 문자열입니다.</target>
        </trans-unit>
        <trans-unit id="bd80dc055a7033e71a1266331bc932f351dc1828" translate="yes" xml:space="preserve">
          <source>The style of the content container(View) when behavior is 'position'.</source>
          <target state="translated">동작이 '위치'인 경우 컨텐츠 컨테이너 (보기)의 스타일입니다.</target>
        </trans-unit>
        <trans-unit id="999cd7fca17803306a02a56c280cd945ae3046a5" translate="yes" xml:space="preserve">
          <source>The style of the navigation bar. Supported values are 'default', 'black'. Use 'black' instead of setting &lt;code&gt;barTintColor&lt;/code&gt; to black. This produces a navigation bar with the native iOS style with higher translucency.</source>
          <target state="translated">탐색 모음의 스타일입니다. 지원되는 값은 'default', 'black'입니다. &lt;code&gt;barTintColor&lt;/code&gt; 를 검은 색 으로 설정하는 대신 '검은 색'을 사용하십시오 . 반투명도가 높은 기본 iOS 스타일의 탐색 모음이 생성됩니다.</target>
        </trans-unit>
        <trans-unit id="268d9e130d69d670509aaa394cdde48c7a09eb08" translate="yes" xml:space="preserve">
          <source>The style of the scroll indicators.</source>
          <target state="translated">스크롤 표시기의 스타일입니다.</target>
        </trans-unit>
        <trans-unit id="045d295e1dff870cb4e6e3168bf2ffd02bbf8ddd" translate="yes" xml:space="preserve">
          <source>The style of the tab bar. Supported values are 'default', 'black'. Use 'black' instead of setting &lt;code&gt;barTintColor&lt;/code&gt; to black. This produces a tab bar with the native iOS style with higher translucency.</source>
          <target state="translated">탭 막대의 스타일입니다. 지원되는 값은 'default', 'black'입니다. &lt;code&gt;barTintColor&lt;/code&gt; 를 검은 색 으로 설정하는 대신 '검은 색'을 사용하십시오 . 반투명도가 높은 기본 iOS 스타일의 탭 막대가 생성됩니다.</target>
        </trans-unit>
        <trans-unit id="a61b73901ecdcbc62e86c7a2735de2e3c5b0b334" translate="yes" xml:space="preserve">
          <source>The style to apply to the &lt;code&gt;WebView&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;WebView&lt;/code&gt; 에 적용 할 스타일 입니다.</target>
        </trans-unit>
        <trans-unit id="35cfdee68e4c34c52dad690fd5741d78a797bf33" translate="yes" xml:space="preserve">
          <source>The templates are upgraded in a optimized way. You still may encounter conflicts but only where the Git 3-way merge have failed, depending on the version and how you modified your sources.</source>
          <target state="translated">템플릿은 최적화 된 방식으로 업그레이드됩니다. 버전과 소스 수정 방법에 따라 여전히 충돌이 발생할 수 있지만 Git 3-way 병합이 실패한 경우에만 가능합니다.</target>
        </trans-unit>
        <trans-unit id="26efa6168325b3edf70ec515a0043a8d57d4094a" translate="yes" xml:space="preserve">
          <source>The tests themselves are written in JS, and must call &lt;code&gt;TestModule.markTestCompleted()&lt;/code&gt; when they are done, otherwise the test will timeout and fail. Test failures are primarily indicated by throwing a JS exception. It is also possible to test error conditions with &lt;code&gt;runTest:module:initialProps:expectErrorRegex:&lt;/code&gt; or &lt;code&gt;runTest:module:initialProps:expectErrorBlock:&lt;/code&gt; which will expect an error to be thrown and verify the error matches the provided criteria.</source>
          <target state="translated">테스트 자체는 JS로 작성되었으며 완료되면 &lt;code&gt;TestModule.markTestCompleted()&lt;/code&gt; 호출해야합니다 . 그렇지 않으면 테스트가 시간 초과되고 실패합니다. 테스트 실패는 주로 JS 예외를 발생시켜 나타냅니다. &lt;code&gt;runTest:module:initialProps:expectErrorRegex:&lt;/code&gt; 또는 &lt;code&gt;runTest:module:initialProps:expectErrorBlock:&lt;/code&gt; 을 사용 하여 오류 조건을 테스트 할 수도 있습니다 . 그러면 오류가 발생하고 오류가 제공된 기준과 일치하는지 확인할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b23e0987d00a9ae81d7bee3c69a402b5778d6ac4" translate="yes" xml:space="preserve">
          <source>The tests themselves live in the &lt;code&gt;__tests__&lt;/code&gt; directories of the files they test. See &lt;a href=&quot;https://github.com/facebook/react-native/blob/master/Libraries/Components/Touchable/__tests__/TouchableHighlight-test.js&quot;&gt;&lt;code&gt;TouchableHighlight-test.js&lt;/code&gt;&lt;/a&gt; for a basic example.</source>
          <target state="translated">테스트 자체는 테스트 하는 파일 의 &lt;code&gt;__tests__&lt;/code&gt; 디렉토리에 있습니다. 기본 예제는 &lt;a href=&quot;https://github.com/facebook/react-native/blob/master/Libraries/Components/Touchable/__tests__/TouchableHighlight-test.js&quot;&gt; &lt;code&gt;TouchableHighlight-test.js&lt;/code&gt; &lt;/a&gt; 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="9ac0913da6fc5fe96f136edaf9fcc55923515e2d" translate="yes" xml:space="preserve">
          <source>The text color of the placeholder string.</source>
          <target state="translated">자리 표시 자 문자열의 텍스트 색입니다.</target>
        </trans-unit>
        <trans-unit id="32731387d77ec71d4eabebc2c9661c9e3815d310" translate="yes" xml:space="preserve">
          <source>The text that's read by the screen reader when the user interacts with the image.</source>
          <target state="translated">사용자가 이미지와 상호 작용할 때 스크린 리더가 읽는 텍스트입니다.</target>
        </trans-unit>
        <trans-unit id="d299fb38cca83d0802dff201a7e8545b98ddc8df" translate="yes" xml:space="preserve">
          <source>The tint color of the progress bar itself.</source>
          <target state="translated">진행률 표시 줄 자체의 색조 색상입니다.</target>
        </trans-unit>
        <trans-unit id="a0a2cc99e32c187a3eb75e1baac402c3400c6544" translate="yes" xml:space="preserve">
          <source>The tint color of the progress bar track.</source>
          <target state="translated">진행률 표시 줄의 색조 색상.</target>
        </trans-unit>
        <trans-unit id="270deb5d45572540f091490e5891e12e566c5110" translate="yes" xml:space="preserve">
          <source>The title displayed under the refresh indicator.</source>
          <target state="translated">새로 고침 표시기 아래에 제목이 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="73691e9264c62832caf924a09e78d7171e6da674" translate="yes" xml:space="preserve">
          <source>The touch area never extends past the parent view bounds and the Z-index of sibling views always takes precedence if a touch hits two overlapping views.</source>
          <target state="translated">터치 영역은 상위 뷰 경계를 넘어 확장되지 않으며 터치가 두 개의 겹치는 뷰에 부딪 치면 형제 뷰의 Z- 인덱스가 항상 우선합니다.</target>
        </trans-unit>
        <trans-unit id="d083d0655b4da3d0f82d421de5813611ab7eb57f" translate="yes" xml:space="preserve">
          <source>The touch handling system considers one or more active touches to be an 'interaction' and will delay &lt;code&gt;runAfterInteractions()&lt;/code&gt; callbacks until all touches have ended or been cancelled.</source>
          <target state="translated">터치 처리 시스템은 하나 이상의 활성 터치를 '상호 작용'으로 간주하고 모든 터치가 종료되거나 취소 될 때까지 &lt;code&gt;runAfterInteractions()&lt;/code&gt; 콜백을 지연 시킵니다 .</target>
        </trans-unit>
        <trans-unit id="b5a0c192ea3c01be308a5069260cd03f62aea189" translate="yes" xml:space="preserve">
          <source>The touch responder system is needed to allow components to negotiate these touch interactions without any additional knowledge about their parent or child components.</source>
          <target state="translated">터치 응답기 시스템은 컴포넌트가 부모 또는 자식 컴포넌트에 대한 추가 지식없이 이러한 터치 상호 작용을 협상 할 수 있도록해야합니다.</target>
        </trans-unit>
        <trans-unit id="06f94eed98331787cf231249738a3efe27c05907" translate="yes" xml:space="preserve">
          <source>The transition effect when showing and hiding the status bar using the &lt;code&gt;hidden&lt;/code&gt; prop. Defaults to 'fade'.</source>
          <target state="translated">&lt;code&gt;hidden&lt;/code&gt; 소품을 사용하여 상태 표시 줄을 표시하거나 숨길 때의 전환 효과 . 기본값은 'fade'입니다.</target>
        </trans-unit>
        <trans-unit id="f5161854f9420eaf902c06ea7194c47b6760b3ee" translate="yes" xml:space="preserve">
          <source>The underlay comes from wrapping the child in a new View, which can affect layout, and sometimes cause unwanted visual artifacts if not used correctly, for example if the backgroundColor of the wrapped view isn't explicitly set to an opaque color.</source>
          <target state="translated">언더 레이는 자식을 새로운 View로 래핑하여 생성되며 레이아웃에 영향을 줄 수 있으며 래핑 된 뷰의 backgroundColor가 명시 적으로 불투명 한 색상으로 설정되지 않은 경우와 같이 올바르게 사용하지 않으면 원치 않는 시각적 아티팩트가 발생할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="bfcf7eaa6a7ce49a18ab1243b13a25b2305c54a4" translate="yes" xml:space="preserve">
          <source>The user is moving their finger.</source>
          <target state="translated">사용자가 손가락을 움직이고 있습니다.</target>
        </trans-unit>
        <trans-unit id="94f86370a25279c6a221ae85efbac74f340d8629" translate="yes" xml:space="preserve">
          <source>The user's permission is required in order to access the Camera Roll on devices running iOS 10 or later. Add the &lt;code&gt;NSPhotoLibraryUsageDescription&lt;/code&gt; key in your &lt;code&gt;Info.plist&lt;/code&gt; with a string that describes how your app will use this data. This key will appear as &lt;code&gt;Privacy - Photo Library Usage Description&lt;/code&gt; in Xcode.</source>
          <target state="translated">iOS 10 이상을 실행하는 장치에서 카메라 롤에 액세스하려면 사용자의 권한이 필요합니다. 앱이이 데이터를 사용하는 방법을 설명하는 문자열과 함께 &lt;code&gt;Info.plist&lt;/code&gt; 에 &lt;code&gt;NSPhotoLibraryUsageDescription&lt;/code&gt; 키를 추가하십시오 . 이 키는 Xcode에서 &lt;code&gt;Privacy - Photo Library Usage Description&lt;/code&gt; 으로 나타납니다 .</target>
        </trans-unit>
        <trans-unit id="b3462092cef005a614428165f33a9ccb7ce45d52" translate="yes" xml:space="preserve">
          <source>The value of the switch. If true the switch will be turned on. Default value is false.</source>
          <target state="translated">스위치의 값입니다. true이면 스위치가 켜집니다. 기본값은 false입니다.</target>
        </trans-unit>
        <trans-unit id="c502d0d82ca04243d426898e385a6456f2302455" translate="yes" xml:space="preserve">
          <source>The value to show for the text input. &lt;code&gt;TextInput&lt;/code&gt; is a controlled component, which means the native value will be forced to match this value prop if provided. For most uses, this works great, but in some cases this may cause flickering - one common cause is preventing edits by keeping value the same. In addition to simply setting the same value, either set &lt;code&gt;editable={false}&lt;/code&gt;, or set/update &lt;code&gt;maxLength&lt;/code&gt; to prevent unwanted edits without flicker.</source>
          <target state="translated">텍스트 입력에 표시 할 값입니다. &lt;code&gt;TextInput&lt;/code&gt; 은 제어 된 구성 요소입니다. 이는 제공된 경우 기본 값이이 값 소품과 일치하도록 강제 함을 의미합니다. 대부분의 경우이 방법이 효과적이지만 어떤 경우에는 깜박임이 발생할 수 있습니다. 일반적인 원인 중 하나는 값을 동일하게 유지하여 편집을 방해하는 것입니다. 단순히 같은 값을 설정하는 것 외에도 set &lt;code&gt;editable={false}&lt;/code&gt; 또는 &lt;code&gt;maxLength&lt;/code&gt; 를 설정 / 업데이트 하여 깜박임없이 원치 않는 편집을 방지하십시오.</target>
        </trans-unit>
        <trans-unit id="bcf7e0493641e1d3111e8880577f119b79d3fc4a" translate="yes" xml:space="preserve">
          <source>The version string &lt;code&gt;1.8.x_xxx&lt;/code&gt; corresponds to JDK 8.</source>
          <target state="translated">버전 문자열 &lt;code&gt;1.8.x_xxx&lt;/code&gt; 는 JDK 8에 해당합니다.</target>
        </trans-unit>
        <trans-unit id="7b31530b32a80831a81b4b40f5cacca0649ce97c" translate="yes" xml:space="preserve">
          <source>The very final step is to create the JavaScript module that defines the interface layer between Java and JavaScript for the users of your new view. Much of the effort is handled by internal React code in Java and JavaScript and all that is left for you is to describe the &lt;code&gt;propTypes&lt;/code&gt;.</source>
          <target state="translated">마지막 단계는 새로운보기의 사용자를 위해 Java와 JavaScript 사이의 인터페이스 계층을 정의하는 JavaScript 모듈을 작성하는 것입니다. 대부분의 노력은 Java 및 JavaScript의 내부 React 코드로 처리되며 &lt;code&gt;propTypes&lt;/code&gt; 를 설명하기 만하면 됩니다.</target>
        </trans-unit>
        <trans-unit id="42df6bf8492f799336e3dfb9a8e2de3937accc1f" translate="yes" xml:space="preserve">
          <source>The views in React Navigation use native components and the &lt;a href=&quot;animated&quot;&gt;&lt;code&gt;Animated&lt;/code&gt;&lt;/a&gt; library to deliver 60fps animations that are run on the native thread. Plus, the animations and gestures can be easily customized.</source>
          <target state="translated">React Navigation의보기는 기본 구성 요소 및 &lt;a href=&quot;animated&quot;&gt; &lt;code&gt;Animated&lt;/code&gt; &lt;/a&gt; 라이브러리를 사용하여 기본 스레드에서 실행되는 60fps 애니메이션을 제공합니다. 또한 애니메이션과 제스처를 쉽게 사용자 지정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e130dc096c63ecbb9456a66ae954f0c438fe93c6" translate="yes" xml:space="preserve">
          <source>Then add the service to your &lt;code&gt;AndroidManifest.xml&lt;/code&gt; file:</source>
          <target state="translated">그런 다음 &lt;code&gt;AndroidManifest.xml&lt;/code&gt; 파일에 서비스를 추가 하십시오.</target>
        </trans-unit>
        <trans-unit id="569a0fa47c022d0e8d2e1db354946c75fe508528" translate="yes" xml:space="preserve">
          <source>Then create a private implementation file that will register the required information with the React Native bridge:</source>
          <target state="translated">그런 다음 React Native 브릿지에 필요한 정보를 등록 할 개인 구현 파일을 작성하십시오.</target>
        </trans-unit>
        <trans-unit id="5a747952f220762dc27361ff93a4e5f1a8bfc4bc" translate="yes" xml:space="preserve">
          <source>Then run the following commands to create a new React Native project called &quot;AwesomeProject&quot;:</source>
          <target state="translated">그런 다음 다음 명령을 실행하여 &quot;AwesomeProject&quot;라는 새로운 React Native 프로젝트를 작성하십시오.</target>
        </trans-unit>
        <trans-unit id="c082168ff646d35830a603004efb2e22324c2424" translate="yes" xml:space="preserve">
          <source>Then run the following to terminate the process:</source>
          <target state="translated">그런 다음 다음을 실행하여 프로세스를 종료하십시오.</target>
        </trans-unit>
        <trans-unit id="12ed92a5245e0740aa75b1a110854778ec7f18f1" translate="yes" xml:space="preserve">
          <source>Then select a React component in React DevTools. There is a search box at the top that helps you find one by name. As soon as you select it, it will be available as &lt;code&gt;$r&lt;/code&gt; in the Chrome console, letting you inspect its props, state, and instance properties.</source>
          <target state="translated">그런 다음 React DevTools에서 React 컴포넌트를 선택하십시오. 상단에는 이름으로 검색하는 데 도움이되는 검색 창이 있습니다. 선택하자마자 Chrome 콘솔에서 &lt;code&gt;$r&lt;/code&gt; 로 제공되므로 소품, 상태 및 인스턴스 속성을 검사 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="0a36900e0d30d4901c62b197e418c55b9158b831" translate="yes" xml:space="preserve">
          <source>Then you can quickly create an app with a home screen and a profile screen:</source>
          <target state="translated">그런 다음 홈 화면과 프로필 화면으로 앱을 빠르게 만들 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="aabf20a2ce39770c6ea443537f9ca9a180e77eeb" translate="yes" xml:space="preserve">
          <source>Then you just need a little bit of JavaScript to make this a usable React component:</source>
          <target state="translated">그런 다음이 유용한 React 구성 요소를 만들려면 약간의 JavaScript가 필요합니다.</target>
        </trans-unit>
        <trans-unit id="074c07ad771748ee4516287b79348e32f94a5412" translate="yes" xml:space="preserve">
          <source>Then, click &quot;Next&quot; to install all of these components.</source>
          <target state="translated">그런 다음 &quot;다음&quot;을 클릭하여 이러한 모든 구성 요소를 설치하십시오.</target>
        </trans-unit>
        <trans-unit id="8846f81fe4c2504387e1ed895213695e34c7c1fd" translate="yes" xml:space="preserve">
          <source>Then, in &lt;code&gt;SomeTaskName.js&lt;/code&gt;:</source>
          <target state="translated">그런 다음 &lt;code&gt;SomeTaskName.js&lt;/code&gt; 에서 :</target>
        </trans-unit>
        <trans-unit id="1712054043ce978a69f64bcb85109731af670272" translate="yes" xml:space="preserve">
          <source>Then, the patch is applied on the user's sources.</source>
          <target state="translated">그런 다음 패치가 사용자의 소스에 적용됩니다.</target>
        </trans-unit>
        <trans-unit id="75f1a1dade7ab0adc4f6b5f67b167c6912625a77" translate="yes" xml:space="preserve">
          <source>There are a few performance operations designed to make ListView scroll smoothly while dynamically loading potentially very large (or conceptually infinite) data sets:</source>
          <target state="translated">잠재적으로 매우 큰 (또는 개념적으로 무한한) 데이터 세트를 동적으로로드하는 동안 ListView를 부드럽게 스크롤하도록 설계된 몇 가지 성능 조작이 있습니다.</target>
        </trans-unit>
        <trans-unit id="04b525506e8f51360c4fbaf7b61f701b8eed133c" translate="yes" xml:space="preserve">
          <source>There are a lot more things you might want to do with a text input. For example, you could validate the text inside while the user types. For more detailed examples, see the &lt;a href=&quot;https://reactjs.org/docs/forms.html#controlled-components&quot;&gt;React docs on controlled components&lt;/a&gt;, or the &lt;a href=&quot;textinput&quot;&gt;reference docs for TextInput&lt;/a&gt;.</source>
          <target state="translated">텍스트 입력으로 할 수있는 일이 훨씬 더 많습니다. 예를 들어, 사용자가 입력하는 동안 내부 텍스트를 확인할 수 있습니다. 더 자세한 예 &lt;a href=&quot;https://reactjs.org/docs/forms.html#controlled-components&quot;&gt;는 제어 된 컴포넌트&lt;/a&gt; 의 React 문서 또는 &lt;a href=&quot;textinput&quot;&gt;TextInput&lt;/a&gt; 의 참조 문서를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="7efe98812c9e9deaaba59f28660baa998042fdab" translate="yes" xml:space="preserve">
          <source>There are a lot more ways to customize text style. Check out the &lt;a href=&quot;text&quot;&gt;Text component reference&lt;/a&gt; for a complete list.</source>
          <target state="translated">텍스트 스타일을 사용자 정의하는 더 많은 방법이 있습니다. 전체 목록 은 &lt;a href=&quot;text&quot;&gt;텍스트 구성 요소 참조&lt;/a&gt; 를 확인하십시오 .</target>
        </trans-unit>
        <trans-unit id="00d66e35ac092c3346534604118518f3a7e3d2f9" translate="yes" xml:space="preserve">
          <source>There are a lot of &lt;a href=&quot;http://www.meetup.com/topics/react-native/&quot;&gt;React Native Meetups&lt;/a&gt; that happen around the world. Often there is React Native content in React meetups as well.</source>
          <target state="translated">전 세계에서 일어나는 많은 &lt;a href=&quot;http://www.meetup.com/topics/react-native/&quot;&gt;React Native Meetup&lt;/a&gt; 이 있습니다. React 밋업에는 React Native 컨텐츠도 있습니다.</target>
        </trans-unit>
        <trans-unit id="4a4688b1ed5bf83899d113e3605b1e8be88da161" translate="yes" xml:space="preserve">
          <source>There are many ways to contribute to React Native, and many of them do not involve writing any code. Here's a few ideas to get started:</source>
          <target state="translated">React Native에 기여할 수있는 방법은 여러 가지가 있으며 많은 방법으로 코드를 작성하지 않아도됩니다. 시작하는 몇 가지 아이디어가 있습니다.</target>
        </trans-unit>
        <trans-unit id="80f84fe3f4e52e203116e302af4e5b9042a4a77c" translate="yes" xml:space="preserve">
          <source>There are some cases where an animated value needs to invert another animated value for calculation. An example is inverting a scale (2x --&amp;gt; 0.5x):</source>
          <target state="translated">애니메이션 값이 계산을 위해 다른 애니메이션 값을 반전시켜야하는 경우가 있습니다. 예를 들어 스케일 반전 (2x-&amp;gt; 0.5x)이 있습니다.</target>
        </trans-unit>
        <trans-unit id="0ba262cc1e0d7b9a2f0104ad76ee69f3a9c3b861" translate="yes" xml:space="preserve">
          <source>There are some instances where hot reloading cannot be implemented perfectly. If you run into any issues, use a full reload to reset your app.</source>
          <target state="translated">핫 리로딩을 완벽하게 구현할 수없는 경우가 있습니다. 문제가 발생하면 전체 새로 고침을 사용하여 앱을 재설정하십시오.</target>
        </trans-unit>
        <trans-unit id="33342ff1d7873051c95802d721ef9c6febc4748f" translate="yes" xml:space="preserve">
          <source>There are tons of native UI widgets out there ready to be used in the latest apps - some of them are part of the platform, others are available as third-party libraries, and still more might be in use in your very own portfolio. React Native has several of the most critical platform components already wrapped, like &lt;code&gt;ScrollView&lt;/code&gt; and &lt;code&gt;TextInput&lt;/code&gt;, but not all of them, and certainly not ones you might have written yourself for a previous app. Fortunately, it's quite easy to wrap up these existing components for seamless integration with your React Native application.</source>
          <target state="translated">최신 앱에 사용할 수있는 수많은 네이티브 UI 위젯이 있습니다. 그 중 일부는 플랫폼의 일부이고 다른 일부는 타사 라이브러리로 사용 가능하며 자체 포트폴리오에서 더 많이 사용 중일 수 있습니다. React Native에는 &lt;code&gt;ScrollView&lt;/code&gt; 및 &lt;code&gt;TextInput&lt;/code&gt; 과 같이 가장 중요한 플랫폼 구성 요소가 이미 래핑되어 있지만 전부는 아니며 이전 앱에 대해 작성한 것이 아닙니다. 다행스럽게도 React Native 응용 프로그램과의 원활한 통합을 위해 이러한 기존 구성 요소를 마무리하는 것은 매우 쉽습니다.</target>
        </trans-unit>
        <trans-unit id="bb781c96f4a71de015bb7a594fd12e2d7c7e08c7" translate="yes" xml:space="preserve">
          <source>There are two types of data that control a component: &lt;code&gt;props&lt;/code&gt; and &lt;code&gt;state&lt;/code&gt;. &lt;code&gt;props&lt;/code&gt; are set by the parent and they are fixed throughout the lifetime of a component. For data that is going to change, we have to use &lt;code&gt;state&lt;/code&gt;.</source>
          <target state="translated">구성 요소를 제어하는 ​​데이터 유형에는 &lt;code&gt;props&lt;/code&gt; 및 &lt;code&gt;state&lt;/code&gt; 두 가지가 있습니다 . &lt;code&gt;props&lt;/code&gt; 은 부모에 의해 설정되며 구성 요소의 수명 기간 동안 고정됩니다. 변경 될 데이터에는 &lt;code&gt;state&lt;/code&gt; 를 사용해야 합니다 .</target>
        </trans-unit>
        <trans-unit id="a35ff9b7cbdae590ccb56dde5ed3a20f0cd54a7f" translate="yes" xml:space="preserve">
          <source>There are two value types you can use with &lt;code&gt;Animated&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;Animated&lt;/code&gt; 와 함께 사용할 수있는 두 가지 값 유형이 있습니다 .</target>
        </trans-unit>
        <trans-unit id="38a3371286c5be9258fae18d52a4b725cbb64a19" translate="yes" xml:space="preserve">
          <source>There is a CocoaPods plugin called &lt;a href=&quot;https://github.com/orta/cocoapods-fix-react-native&quot;&gt;cocoapods-fix-react-native&lt;/a&gt; which handles any potential post-fixing of the source code due to differences when using a dependency manager.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/orta/cocoapods-fix-react-native&quot;&gt;cocoapods-fix-react-native&lt;/a&gt; 라는 CocoaPods 플러그인이 있는데 , 의존성 관리자를 사용할 때의 차이로 인해 소스 코드의 잠재적 인 사후 수정을 처리합니다.</target>
        </trans-unit>
        <trans-unit id="789c3667e76fbda7af363c11e805d9d580365195" translate="yes" xml:space="preserve">
          <source>There is also a &lt;code&gt;Platform.select&lt;/code&gt; method available, that given an object containing Platform.OS as keys, returns the value for the platform you are currently running on.</source>
          <target state="translated">Platform.OS를 키로 포함하는 객체에 대해 현재 사용중인 플랫폼의 값을 반환 하는 &lt;code&gt;Platform.select&lt;/code&gt; 메소드도 있습니다.</target>
        </trans-unit>
        <trans-unit id="cc37fe05f09583620569db494e062716999e75b7" translate="yes" xml:space="preserve">
          <source>There is also a function &lt;code&gt;showWithGravity&lt;/code&gt; to specify the layout gravity. May be ToastAndroid.TOP, ToastAndroid.BOTTOM, ToastAndroid.CENTER.</source>
          <target state="translated">레이아웃 중력을 지정하는 &lt;code&gt;showWithGravity&lt;/code&gt; 기능도 있습니다 . ToastAndroid.TOP, ToastAndroid.BOTTOM, ToastAndroid.CENTER 일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3cd07d09d5988953984d912a17f7a627f379ebc0" translate="yes" xml:space="preserve">
          <source>There is no way to update only a few properties at a time. We suggest that you build it into your own wrapper instead.</source>
          <target state="translated">한 번에 몇 가지 속성 만 업데이트 할 수있는 방법이 없습니다. 대신 자신의 래퍼에 빌드하는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="72666930a6ed5228aacbcfaddae069319f9ebad3" translate="yes" xml:space="preserve">
          <source>There isn't an easy way to mitigate this unless you're able to postpone creating new UI until after the interaction, or you are able to simplify the UI you're creating. The react native team is working on an infrastructure level solution for this that will allow new UI to be created and configured off the main thread, allowing the interaction to continue smoothly.</source>
          <target state="translated">상호 작용이 끝날 때까지 새 UI 작성을 연기 할 수 없거나 작성중인 UI를 단순화 할 수 없다면이 방법을 쉽게 완화 할 수 없습니다. 반응 네이티브 팀은이를 위해 인프라 수준의 솔루션을 개발하고 있으며이를 통해 메인 UI에서 새로운 UI를 만들고 구성 할 수있어 상호 작용을 원활하게 진행할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="bf44e1f64b0dc379672897b51ce7798884c8b791" translate="yes" xml:space="preserve">
          <source>There will be no effect on devices that do not support Vibration, eg. the iOS simulator.</source>
          <target state="translated">예를 들어 진동을 지원하지 않는 장치에는 영향이 없습니다. iOS 시뮬레이터.</target>
        </trans-unit>
        <trans-unit id="0e9d82714860becc2d982293d9c3fc717f67e7a7" translate="yes" xml:space="preserve">
          <source>There will be no effect on devices that do not support Vibration, eg. the simulator.</source>
          <target state="translated">예를 들어 진동을 지원하지 않는 장치에는 영향이 없습니다. 시뮬레이터.</target>
        </trans-unit>
        <trans-unit id="14bfe4c96bb7c5de2222130ff48f9e735b88d918" translate="yes" xml:space="preserve">
          <source>These approaches provide no safety checks. It's up to you to guarantee that those images are available in the application. Also you have to specify image dimensions manually.</source>
          <target state="translated">이러한 접근 방식은 안전 점검을 제공하지 않습니다. 해당 이미지를 응용 프로그램에서 사용할 수 있는지 확인하는 것은 귀하의 책임입니다. 또한 이미지 크기를 수동으로 지정해야합니다.</target>
        </trans-unit>
        <trans-unit id="fe5bc62249ecb7cba8779c543ffe93b15437829d" translate="yes" xml:space="preserve">
          <source>These are going to be global gradle variables, which we can later use in our gradle config to sign our app.</source>
          <target state="translated">이것들은 전역 gradle 변수가 될 것이고, 나중에 gradle 설정에서 앱 서명에 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="0ad48da747249d0a489297a9c9c515a3f559be2f" translate="yes" xml:space="preserve">
          <source>These are some common issues you may run into while setting up React Native. If you encounter something that is not listed here, try &lt;a href=&quot;https://github.com/facebook/react-native/issues/&quot;&gt;searching for the issue in GitHub&lt;/a&gt;.</source>
          <target state="translated">React Native를 설정하는 동안 발생할 수있는 몇 가지 일반적인 문제입니다. 여기에 나열되지 않은 &lt;a href=&quot;https://github.com/facebook/react-native/issues/&quot;&gt;문제가 발생하면 GitHub에서 문제를 검색&lt;/a&gt; 하십시오 .</target>
        </trans-unit>
        <trans-unit id="e19f556521403a22e4c8f656dcebf9c5c1d2f633" translate="yes" xml:space="preserve">
          <source>These components may come in handy for certain applications. For an exhaustive list of components and APIs, check out the sidebar to the left.</source>
          <target state="translated">이러한 구성 요소는 특정 응용 프로그램에 유용 할 수 있습니다. 전체 컴포넌트 및 API 목록은 왼쪽의 사이드 바를 확인하십시오.</target>
        </trans-unit>
        <trans-unit id="2a05e360350d15c249e088ac0093fdc1c7cf3a01" translate="yes" xml:space="preserve">
          <source>These conversion functions are designed to safely process any JSON that the JS might throw at them by displaying &quot;RedBox&quot; errors and returning standard initialization values when missing keys or other developer errors are encountered.</source>
          <target state="translated">이러한 변환 함수는 누락 된 키 또는 기타 개발자 오류가 발생할 때 &quot;RedBox&quot;오류를 표시하고 표준 초기화 값을 반환하여 JS가 던질 수있는 모든 JSON을 안전하게 처리하도록 설계되었습니다.</target>
        </trans-unit>
        <trans-unit id="d8e705b851b3585c4c6119e2184784fe48d5c869" translate="yes" xml:space="preserve">
          <source>These features make users more comfortable while using an app, because it allows people to experiment and interact without fear of making mistakes.</source>
          <target state="translated">이 기능은 사람들이 실수를 두려워하지 않고 실험하고 상호 작용할 수 있기 때문에 앱을 사용하는 동안 사용자를 더욱 편안하게 만듭니다.</target>
        </trans-unit>
        <trans-unit id="28a40c8f7c447501b26ecb4b7960212be6476531" translate="yes" xml:space="preserve">
          <source>These lines represent the USB devices currently connected to your machine.</source>
          <target state="translated">이 라인은 현재 기기에 연결된 USB 장치를 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="6d6eb553a5de5b30b726de612c51db1e8e8c7222" translate="yes" xml:space="preserve">
          <source>These styles will be applied to the scroll view content container which wraps all of the child views. Example:</source>
          <target state="translated">이러한 스타일은 모든 자식보기를 래핑하는 스크롤보기 내용 컨테이너에 적용됩니다. 예:</target>
        </trans-unit>
        <trans-unit id="3b1ece141e072ff5af934d6577658a366e7c9ca4" translate="yes" xml:space="preserve">
          <source>These subclasses are essentially singletons - only one instance of each is created by the bridge. They vend native views to the &lt;code&gt;NativeViewHierarchyManager&lt;/code&gt;, which delegates back to them to set and update the properties of the views as necessary. The &lt;code&gt;ViewManagers&lt;/code&gt; are also typically the delegates for the views, sending events back to JavaScript via the bridge.</source>
          <target state="translated">이 서브 클래스는 본질적으로 싱글 톤입니다. 브리지에 의해 하나의 인스턴스 만 생성됩니다. 네이티브 뷰를 &lt;code&gt;NativeViewHierarchyManager&lt;/code&gt; 로 공급합니다. NativeViewHierarchyManager 는 필요에 따라 뷰의 속성을 설정하고 업데이트하도록 다시 뷰에 위임합니다. 또한 &lt;code&gt;ViewManagers&lt;/code&gt; 는 일반적으로 뷰의 대리자로서 브리지를 통해 이벤트를 JavaScript로 다시 보냅니다.</target>
        </trans-unit>
        <trans-unit id="57ab75c71e06661a026368f99a009a5fc31c8c87" translate="yes" xml:space="preserve">
          <source>This API only works in projects made with &lt;code&gt;react-native init&lt;/code&gt; or in those made with Create React Native App which have since ejected. For more information about ejecting, please see the &lt;a href=&quot;https://github.com/react-community/create-react-native-app/blob/master/EJECTING.md&quot;&gt;guide&lt;/a&gt; on the Create React Native App repository.</source>
          <target state="translated">이 API는 &lt;code&gt;react-native init&lt;/code&gt; 로 작성된 프로젝트 또는 배출 된 React Native App로 작성된 프로젝트에서만 작동합니다 . 추출에 대한 자세한 내용은 React Native App 리포지토리 생성 &lt;a href=&quot;https://github.com/react-community/create-react-native-app/blob/master/EJECTING.md&quot;&gt;가이드&lt;/a&gt; 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="801323845c18ba7304eeae010c132af00021ce07" translate="yes" xml:space="preserve">
          <source>This allows JavaScript to control what happens when the user presses the hardware back button (e.g. to implement navigation). When JavaScript doesn't handle the back button press, your &lt;code&gt;invokeDefaultOnBackPressed&lt;/code&gt; method will be called. By default this simply finishes your &lt;code&gt;Activity&lt;/code&gt;.</source>
          <target state="translated">이를 통해 JavaScript는 사용자가 하드웨어 뒤로 버튼을 누를 때 발생하는 작업을 제어 할 수 있습니다 (예 : 탐색 구현). JavaScript가 뒤로 버튼 누름을 처리하지 않으면 &lt;code&gt;invokeDefaultOnBackPressed&lt;/code&gt; 메소드가 호출됩니다. 기본적으로 이것은 단순히 &lt;code&gt;Activity&lt;/code&gt; 완료합니다 .</target>
        </trans-unit>
        <trans-unit id="c027e0c2fbc01fa0e9d2952239d9527248c55799" translate="yes" xml:space="preserve">
          <source>This allows us to write the following code and know that the child will have its opacity updated in response to taps, without the child having any knowledge of that fact or requiring any changes to its implementation:</source>
          <target state="translated">이를 통해 우리는 다음 코드를 작성하고 그 사실을 알지 못하거나 구현을 변경하지 않고도 탭에 대한 응답으로 불투명도가 업데이트됨을 알 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="234de2e0a0bc55d82490e410e8d9667d6ffeee21" translate="yes" xml:space="preserve">
          <source>This allows you to batch the fetching of items given an array of &lt;code&gt;key&lt;/code&gt; inputs. Your callback will be invoked with an array of corresponding key-value pairs found:</source>
          <target state="translated">이를 통해 &lt;code&gt;key&lt;/code&gt; 입력 배열이 지정된 항목을 페치 할 수 있습니다 . 콜백은 해당하는 키-값 쌍의 배열로 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="7cc5df55746760864f2ec6ffaf372b4c5e981c1a" translate="yes" xml:space="preserve">
          <source>This app doesn't do very much</source>
          <target state="translated">이 응용 프로그램은별로하지 않습니다</target>
        </trans-unit>
        <trans-unit id="a578e5c8556d1a59d950beaf60a16c63266e2a22" translate="yes" xml:space="preserve">
          <source>This callback is invoked with the raw event, which we typically process in the wrapper component to make a simpler API:</source>
          <target state="translated">이 콜백은 raw 이벤트와 함께 호출되며 일반적으로 더 간단한 API를 만들기 위해 래퍼 구성 요소에서 처리합니다.</target>
        </trans-unit>
        <trans-unit id="9543aad7dde842ffb079abd78b07a74be60b58cb" translate="yes" xml:space="preserve">
          <source>This callback will be called once ViewPager finish navigating to selected page (when user swipes between pages). The &lt;code&gt;event.nativeEvent&lt;/code&gt; object passed to this callback will have following fields:</source>
          <target state="translated">이 콜백은 ViewPager가 선택된 페이지 탐색을 마치면 (사용자가 페이지 사이를 스 와이프 할 때) 호출됩니다. 이 콜백에 전달 된 &lt;code&gt;event.nativeEvent&lt;/code&gt; 객체에는 다음 필드가 있습니다.</target>
        </trans-unit>
        <trans-unit id="928f1332e3c7d94a7d8c7304c30bffb7365f77d1" translate="yes" xml:space="preserve">
          <source>This can be one of the following values:</source>
          <target state="translated">다음 값 중 하나 일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="97c2b9cfa0ee7116d238874f86461c20697ebfda" translate="yes" xml:space="preserve">
          <source>This case is covered in &lt;a href=&quot;native-components-ios#styles&quot;&gt;this article&lt;/a&gt;. Basically, as all our native react views are subclasses of &lt;code&gt;UIView&lt;/code&gt;, most style and size attributes will work like you would expect out of the box.</source>
          <target state="translated">이 사례는 &lt;a href=&quot;native-components-ios#styles&quot;&gt;이 기사&lt;/a&gt; 에서 다룹니다 . 기본적으로 모든 기본 반응보기는 &lt;code&gt;UIView&lt;/code&gt; 의 하위 클래스 이므로 대부분의 스타일 및 크기 속성은 기본적으로 예상대로 작동합니다.</target>
        </trans-unit>
        <trans-unit id="af0421c05fb8390e670ebc79ede98af0b2ae69f4" translate="yes" xml:space="preserve">
          <source>This command prompts you for passwords for the keystore and key, and to provide the Distinguished Name fields for your key. It then generates the keystore as a file called &lt;code&gt;my-release-key.keystore&lt;/code&gt;.</source>
          <target state="translated">이 명령은 키 저장소 및 키의 비밀번호를 묻고 키의 식별 이름 필드를 제공하라는 프롬프트를 표시합니다. 그런 다음 키 저장소를 &lt;code&gt;my-release-key.keystore&lt;/code&gt; 파일로 생성합니다 .</target>
        </trans-unit>
        <trans-unit id="e228388487cba327b323e19ae7ad6c36ea08359e" translate="yes" xml:space="preserve">
          <source>This component can also be used to create sticky text inputs (text inputs which are anchored to the top of the keyboard). To do this, wrap a &lt;code&gt;TextInput&lt;/code&gt; with the &lt;code&gt;InputAccessoryView&lt;/code&gt; component, and don't set a &lt;code&gt;nativeID&lt;/code&gt;. For an example, look at &lt;a href=&quot;https://github.com/facebook/react-native/blob/master/RNTester/js/InputAccessoryViewExample.js&quot;&gt;InputAccessoryViewExample.js&lt;/a&gt;.</source>
          <target state="translated">이 구성 요소를 사용하여 고정 텍스트 입력 (키보드 상단에 고정 된 텍스트 입력)을 작성할 수도 있습니다. 이렇게하려면 &lt;code&gt;InputAccessoryView&lt;/code&gt; 구성 요소 로 &lt;code&gt;TextInput&lt;/code&gt; 을 래핑 하고 &lt;code&gt;nativeID&lt;/code&gt; 를 설정하지 마십시오 . 예를 들어, &lt;a href=&quot;https://github.com/facebook/react-native/blob/master/RNTester/js/InputAccessoryViewExample.js&quot;&gt;InputAccessoryViewExample.js를보십시오&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="094121364efc46523beb851f803d91f5e7e1c277" translate="yes" xml:space="preserve">
          <source>This component is used inside a &lt;code&gt;ScrollView&lt;/code&gt; to add pull to refresh functionality.</source>
          <target state="translated">이 구성 요소는 &lt;code&gt;ScrollView&lt;/code&gt; 내부에서 사용되어 새로 고침 기능을 추가합니다.</target>
        </trans-unit>
        <trans-unit id="fba05360c9194acf6b39f5a348d39f4bcbc16240" translate="yes" xml:space="preserve">
          <source>This component is used inside a ScrollView or ListView to add pull to refresh functionality. When the ScrollView is at &lt;code&gt;scrollY: 0&lt;/code&gt;, swiping down triggers an &lt;code&gt;onRefresh&lt;/code&gt; event.</source>
          <target state="translated">이 구성 요소는 ScrollView 또는 ListView 내부에서 끌어서 새로 고침 기능을 추가하는 데 사용됩니다. ScrollView가 &lt;code&gt;scrollY: 0&lt;/code&gt; 경우 아래로 스 와이프하면 &lt;code&gt;onRefresh&lt;/code&gt; 이벤트가 트리거됩니다 .</target>
        </trans-unit>
        <trans-unit id="e906f78c4fc3b80d1924e7adbd6fe660a6478454" translate="yes" xml:space="preserve">
          <source>This configures the text input. One of 'plain-text', 'secure-text' or 'login-password'.</source>
          <target state="translated">텍스트 입력을 구성합니다. '일반 텍스트', '보안 텍스트'또는 '로그인 암호'중 하나입니다.</target>
        </trans-unit>
        <trans-unit id="3b22b261ceac526a1adb89d6d5e594327bfdae2c" translate="yes" xml:space="preserve">
          <source>This constant will always be a round number of pixels (so a line defined by it can look crisp) and will try to match the standard width of a thin line on the underlying platform. However, you should not rely on it being a constant size, because on different platforms and screen densities its value may be calculated differently.</source>
          <target state="translated">이 상수는 항상 둥근 픽셀 수 (그에 의해 정의 된 선이 선명하게 보일 수 있음)이며 기본 플랫폼에서가는 선의 표준 너비와 일치하려고합니다. 그러나 플랫폼과 화면 밀도가 다르면 값이 다르게 계산 될 수 있으므로 일정한 크기에 의존해서는 안됩니다.</target>
        </trans-unit>
        <trans-unit id="7c5d379ad863ce62011612edecf0a6dd9ebd213c" translate="yes" xml:space="preserve">
          <source>This controls how often the scroll event will be fired while scrolling (as a time interval in ms). A lower number yields better accuracy for code that is tracking the scroll position, but can lead to scroll performance problems due to the volume of information being send over the bridge. You will not notice a difference between values set between 1-16 as the JS run loop is synced to the screen refresh rate. If you do not need precise scroll position tracking, set this value higher to limit the information being sent across the bridge. The default value is zero, which results in the scroll event being sent only once each time the view is scrolled.</source>
          <target state="translated">스크롤하는 동안 스크롤 이벤트가 발생하는 빈도를 시간 단위 (ms)로 제어합니다. 숫자가 작 으면 스크롤 위치를 추적하는 코드의 정확도가 높아지지만 브리지를 통해 전송되는 정보의 양으로 인해 스크롤 성능 문제가 발생할 수 있습니다. JS 실행 루프가 화면 새로 고침 빈도에 동기화되므로 1-16 사이에 설정된 값의 차이를 알 수 없습니다. 정확한 스크롤 위치 추적이 필요하지 않은 경우이 값을 높게 설정하면 브리지를 통해 전송되는 정보가 제한됩니다. 기본값은 0이며,보기를 스크롤 할 때마다 스크롤 이벤트가 한 번만 전송됩니다.</target>
        </trans-unit>
        <trans-unit id="d834df1ea3cfec45cc3cf5e89666f239364e3178" translate="yes" xml:space="preserve">
          <source>This defines how far a touch event can start away from the view. Typical interface guidelines recommend touch targets that are at least 30 - 40 points/density-independent pixels.</source>
          <target state="translated">터치 이벤트가 뷰에서 얼마나 멀리 시작할 수 있는지를 정의합니다. 일반적인 인터페이스 지침에서는 밀도가 독립적 인 픽셀 당 30-40 포인트 이상의 터치 대상을 권장합니다.</target>
        </trans-unit>
        <trans-unit id="1116ebca89c716f7dddb07e94d117734a7686315" translate="yes" xml:space="preserve">
          <source>This defines how far your touch can start away from the button. This is added to &lt;code&gt;pressRetentionOffset&lt;/code&gt; when moving off of the button. ** NOTE ** The touch area never extends past the parent view bounds and the Z-index of sibling views always takes precedence if a touch hits two overlapping views.</source>
          <target state="translated">버튼에서 터치가 시작될 수있는 거리를 정의합니다. 버튼 에서 &lt;code&gt;pressRetentionOffset&lt;/code&gt; 때 RetentionOffset 을 누르면 추가됩니다 . ** 참고 ** 터치 영역은 상위 뷰 경계를 넘어 확장되지 않으며 터치가 두 개의 겹치는 뷰에 닿으면 형제 뷰의 Z- 인덱스가 항상 우선합니다.</target>
        </trans-unit>
        <trans-unit id="af7258b8c3ca5e80ea3b8f919d20e048d8161548" translate="yes" xml:space="preserve">
          <source>This disables the 'layout-only view removal' optimization for this view!</source>
          <target state="translated">이 뷰에 대해 '레이아웃 전용 뷰 제거'최적화가 비활성화됩니다!</target>
        </trans-unit>
        <trans-unit id="01cfc03dd8cac1d87f641e6189969983b5ca8752" translate="yes" xml:space="preserve">
          <source>This document is about testing your changes to React Native as a &lt;a href=&quot;contributing&quot;&gt;contributor&lt;/a&gt;. If you're interested in testing a React Native app, check out the &lt;a href=&quot;https://facebook.github.io/jest/docs/en/tutorial-react-native.html&quot;&gt;React Native Tutorial&lt;/a&gt; on the Jest website.</source>
          <target state="translated">이 문서는 React Native의 변경 사항을 &lt;a href=&quot;contributing&quot;&gt;컨트&lt;/a&gt; 리뷰 터로 테스트하는 것에 관한 것 입니다. React Native 앱 테스트에 관심이 있다면 Jest 웹 사이트 에서 &lt;a href=&quot;https://facebook.github.io/jest/docs/en/tutorial-react-native.html&quot;&gt;React Native Tutorial&lt;/a&gt; 을 확인하십시오 .</target>
        </trans-unit>
        <trans-unit id="601446ae494b64bfc06cdfa632336e0cc35505c9" translate="yes" xml:space="preserve">
          <source>This doesn't seem right. Why is it being called so often? Are they actually different events? The answers to these questions will probably depend on your product code. And many times, you'll want to look into &lt;a href=&quot;https://facebook.github.io/react/component-specs.md#updating-shouldcomponentupdate&quot;&gt;shouldComponentUpdate&lt;/a&gt;.</source>
          <target state="translated">이것은 옳지 않은 것 같습니다. 왜 그렇게 자주 호출됩니까? 실제로 다른 이벤트입니까? 이러한 질문에 대한 답변은 제품 코드에 따라 다를 수 있습니다. 그리고 여러 번, &lt;a href=&quot;https://facebook.github.io/react/component-specs.md#updating-shouldcomponentupdate&quot;&gt;shouldComponentUpdate&lt;/a&gt; 를 살펴보고 싶을 것 입니다.</target>
        </trans-unit>
        <trans-unit id="1d5208709b796e4e0ac5666a55b7c7958cc9d1b2" translate="yes" xml:space="preserve">
          <source>This event is fired immediately once the layout has been calculated, but the new layout may not yet be reflected on the screen at the time the event is received, especially if a layout animation is in progress.</source>
          <target state="translated">이 이벤트는 레이아웃이 계산되면 즉시 시작되지만 특히 레이아웃 애니메이션이 진행중인 경우 이벤트가 수신 될 때 새 레이아웃이 화면에 반영되지 않을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d13c76e68eb8a30b6c2e3799e7d6623f282da6e4" translate="yes" xml:space="preserve">
          <source>This example creates a &lt;code&gt;View&lt;/code&gt; that wraps two colored boxes and a text component in a row with padding.</source>
          <target state="translated">이 예제에서는 채색 된 두 개의 상자와 텍스트 구성 요소를 행으로 묶는 &lt;code&gt;View&lt;/code&gt; 를 만듭니다 .</target>
        </trans-unit>
        <trans-unit id="2a097180ba5c84376ca288b0aeebea462bc81f84" translate="yes" xml:space="preserve">
          <source>This example creates a simple &lt;code&gt;FlatList&lt;/code&gt; of hardcoded data. Each item in the &lt;code&gt;data&lt;/code&gt; props is rendered as a &lt;code&gt;Text&lt;/code&gt; component. The &lt;code&gt;FlatListBasics&lt;/code&gt; component then renders the &lt;code&gt;FlatList&lt;/code&gt; and all &lt;code&gt;Text&lt;/code&gt; components.</source>
          <target state="translated">이 예제 는 하드 코드 된 데이터 의 간단한 &lt;code&gt;FlatList&lt;/code&gt; 를 작성합니다 . &lt;code&gt;data&lt;/code&gt; 소품의 각 항목은 &lt;code&gt;Text&lt;/code&gt; 구성 요소 로 렌더링됩니다 . &lt;code&gt;FlatListBasics&lt;/code&gt; 의 구성 요소는 다음 렌더링 &lt;code&gt;FlatList&lt;/code&gt; 모든 &lt;code&gt;Text&lt;/code&gt; 구성 요소를.</target>
        </trans-unit>
        <trans-unit id="097bbafb6e3dd816019aefa356bc1811b8014c67" translate="yes" xml:space="preserve">
          <source>This example creates a vertical &lt;code&gt;ScrollView&lt;/code&gt; with both images and text mixed together.</source>
          <target state="translated">이 예제에서는 이미지와 텍스트가 함께 혼합 된 세로 &lt;code&gt;ScrollView&lt;/code&gt; 를 만듭니다 .</target>
        </trans-unit>
        <trans-unit id="e640d33fef6b627ef19f059672ebeade4a5d5fe0" translate="yes" xml:space="preserve">
          <source>This example shows fetching and displaying an image from local storage as well as one from network and even from data provided in the &lt;code&gt;'data:'&lt;/code&gt; uri scheme.</source>
          <target state="translated">이 예는 로컬 스토리지뿐만 아니라 네트워크 및 &lt;code&gt;'data:'&lt;/code&gt; uri 체계에 제공된 데이터에서 이미지를 가져오고 표시하는 방법을 보여줍니다 .</target>
        </trans-unit>
        <trans-unit id="72dd788ea01930caf13ac7fa6bceec3bbad90407" translate="yes" xml:space="preserve">
          <source>This example uses a preset value, you can customize the animations as you need, see &lt;a href=&quot;https://github.com/facebook/react-native/blob/master/Libraries/LayoutAnimation/LayoutAnimation.js&quot;&gt;LayoutAnimation.js&lt;/a&gt; for more information.</source>
          <target state="translated">이 예제는 사전 설정 값을 사용하며 필요에 따라 애니메이션을 사용자 정의 할 수 있습니다 . 자세한 내용 은 &lt;a href=&quot;https://github.com/facebook/react-native/blob/master/Libraries/LayoutAnimation/LayoutAnimation.js&quot;&gt;LayoutAnimation.js&lt;/a&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="aed8ea6851a6b0c9c1047ddd151cd05b26391c4b" translate="yes" xml:space="preserve">
          <source>This example will only ever appear to say &quot;Current state is: active&quot; because the app is only visible to the user when in the &lt;code&gt;active&lt;/code&gt; state, and the null state will happen only momentarily.</source>
          <target state="translated">이 예제는 앱이 &lt;code&gt;active&lt;/code&gt; 상태 일 때만 사용자에게만 표시되고 null 상태는 순간적으로 발생 하기 때문에 &quot;현재 상태 : 활성&quot;이라고 만 표시됩니다 .</target>
        </trans-unit>
        <trans-unit id="950fe2614a1cbf9e3b1703841a441c3765c5e407" translate="yes" xml:space="preserve">
          <source>This exposes the native ToastAndroid module as a JS module. This has a function 'show' which takes the following parameters:</source>
          <target state="translated">네이티브 ToastAndroid 모듈이 JS 모듈로 노출됩니다. 여기에는 다음 매개 변수를 사용하는 'show'함수가 있습니다.</target>
        </trans-unit>
        <trans-unit id="3420b9f14b2ff6146ff731501c2a8ed98ad17ebd" translate="yes" xml:space="preserve">
          <source>This function is called on long press.</source>
          <target state="translated">이 기능은 길게 누르면 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="8da5c7897fd470a9d9c68f392fcf69ca66f4a70e" translate="yes" xml:space="preserve">
          <source>This function is called on press.</source>
          <target state="translated">이 기능은 언론에서 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="b6de1ae72f9d64602cc2b6634c0036b342970c57" translate="yes" xml:space="preserve">
          <source>This function then returns the reference to the listener.</source>
          <target state="translated">그런 다음이 함수는 리스너에 대한 참조를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="b94c47492f86ad8af1986eea05fe48784b65b1c3" translate="yes" xml:space="preserve">
          <source>This guide covered many of the aspects of bridging over custom native components, but there is even more you might need to consider, such as custom hooks for inserting and laying out subviews. If you want to go even deeper, check out the &lt;a href=&quot;https://github.com/facebook/react-native/blob/master/React/Views&quot;&gt;source code&lt;/a&gt; of some of the implemented components.</source>
          <target state="translated">이 가이드에서는 사용자 지정 네이티브 구성 요소에 대한 브리징의 여러 측면을 다루었지만 하위 뷰 삽입 및 레이아웃을위한 사용자 지정 후크와 같이 고려해야 할 사항이 더 있습니다. 더 깊이 들어가고 싶다면 구현 된 일부 구성 요소 의 &lt;a href=&quot;https://github.com/facebook/react-native/blob/master/React/Views&quot;&gt;소스 코드&lt;/a&gt; 를 확인하십시오 .</target>
        </trans-unit>
        <trans-unit id="2f71b5503abd44360766902b9b8630363509ce4a" translate="yes" xml:space="preserve">
          <source>This guide covers the various navigation components available in React Native. If you are just getting started with navigation, you will probably want to use &lt;a href=&quot;navigation#react-navigation&quot;&gt;React Navigation&lt;/a&gt;. React Navigation provides an easy to use navigation solution, with the ability to present common stack navigation and tabbed navigation patterns on both iOS and Android. As this is a JavaScript implementation, it provides the greatest amount of configurability as well as flexibility when integrating with state management libraries such as &lt;a href=&quot;https://reactnavigation.org/docs/redux-integration.html&quot;&gt;redux&lt;/a&gt;.</source>
          <target state="translated">이 안내서는 React Native에서 사용할 수있는 다양한 탐색 구성 요소를 다룹니다. 탐색을 시작한 경우 &lt;a href=&quot;navigation#react-navigation&quot;&gt;React Navigation&lt;/a&gt; 을 사용하고 싶을 것입니다 . React Navigation은 iOS 및 Android에서 공통 스택 탐색 및 탭 탐색 패턴을 표시 할 수있는 기능으로 사용하기 쉬운 탐색 솔루션을 제공합니다. 이것은 JavaScript 구현이므로 &lt;a href=&quot;https://reactnavigation.org/docs/redux-integration.html&quot;&gt;redux&lt;/a&gt; 와 같은 상태 관리 라이브러리와 통합 할 때 유연성뿐만 아니라 가장 많은 구성 기능을 제공합니다 .</target>
        </trans-unit>
        <trans-unit id="764c0c1850c39368c045b5a79d4b8f01afd3a483" translate="yes" xml:space="preserve">
          <source>This guide is intended to teach you some basics to help you to &lt;a href=&quot;performance#profiling&quot;&gt;troubleshoot performance issues&lt;/a&gt;, as well as discuss &lt;a href=&quot;performance#common-sources-of-performance-problems&quot;&gt;common sources of problems and their suggested solutions&lt;/a&gt;.</source>
          <target state="translated">이 가이드는 당신을 돕기 위해 몇 가지 기본을 가르치는 것입니다 &lt;a href=&quot;performance#profiling&quot;&gt;문제 해결 성능 문제가&lt;/a&gt; 아니라 토론 할 때, &lt;a href=&quot;performance#common-sources-of-performance-problems&quot;&gt;문제와 그 제안 된 솔루션의 일반적인 소스를&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="fadff495ade83f37aa005235048cc00987093157" translate="yes" xml:space="preserve">
          <source>This guide will use the &lt;a href=&quot;http://developer.android.com/reference/android/widget/Toast.html&quot;&gt;Toast&lt;/a&gt; example. Let's say we would like to be able to create a toast message from JavaScript.</source>
          <target state="translated">이 안내서는 &lt;a href=&quot;http://developer.android.com/reference/android/widget/Toast.html&quot;&gt;토스트&lt;/a&gt; 예 를 사용합니다 . JavaScript에서 토스트 메시지를 만들 수 있다고 가정 해 봅시다.</target>
        </trans-unit>
        <trans-unit id="19f8cce1cd453cfd55859ca8ae6b6b1e61f0df42" translate="yes" xml:space="preserve">
          <source>This guide will use the &lt;a href=&quot;https://developer.apple.com/library/mac/documentation/DataManagement/Conceptual/EventKitProgGuide/Introduction/Introduction.html&quot;&gt;iOS Calendar API&lt;/a&gt; example. Let's say we would like to be able to access the iOS calendar from JavaScript.</source>
          <target state="translated">이 가이드는 &lt;a href=&quot;https://developer.apple.com/library/mac/documentation/DataManagement/Conceptual/EventKitProgGuide/Introduction/Introduction.html&quot;&gt;iOS 캘린더 API&lt;/a&gt; 예제를 사용합니다 . JavaScript에서 iOS 캘린더에 액세스하고 싶다고 가정 해 봅시다.</target>
        </trans-unit>
        <trans-unit id="9a9154ee6d573635a70b6374d41d1d9e70ff590e" translate="yes" xml:space="preserve">
          <source>This is OK, it means we also need to install React:</source>
          <target state="translated">괜찮습니다. React도 설치해야합니다 :</target>
        </trans-unit>
        <trans-unit id="df13ef2de2fb7594856954e6efb5e265a7752985" translate="yes" xml:space="preserve">
          <source>This is a &lt;code&gt;PureComponent&lt;/code&gt; which means that it will not re-render if &lt;code&gt;props&lt;/code&gt; remain shallow- equal. Make sure that everything your &lt;code&gt;renderItem&lt;/code&gt; function depends on is passed as a prop (e.g. &lt;code&gt;extraData&lt;/code&gt;) that is not &lt;code&gt;===&lt;/code&gt; after updates, otherwise your UI may not update on changes. This includes the &lt;code&gt;data&lt;/code&gt; prop and parent component state.</source>
          <target state="translated">이는 &lt;code&gt;props&lt;/code&gt; 이 &lt;code&gt;PureComponent&lt;/code&gt; 유지 되면 다시 렌더링하지 않는 PureComponent 입니다 . &lt;code&gt;renderItem&lt;/code&gt; 함수가 의존 하는 모든 것이 업데이트 후 &lt;code&gt;===&lt;/code&gt; 가 아닌 prop (예 : &lt;code&gt;extraData&lt;/code&gt; ) 로 전달 되어야 합니다. 그렇지 않으면 UI가 변경시 업데이트되지 않을 수 있습니다. 여기에는 &lt;code&gt;data&lt;/code&gt; 소품 및 상위 구성 요소 상태가 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="ea176feaac8d25f73ab6ba694db37600e632e5b0" translate="yes" xml:space="preserve">
          <source>This is a controlled component that requires an &lt;code&gt;onValueChange&lt;/code&gt; callback that updates the &lt;code&gt;value&lt;/code&gt; prop in order for the component to reflect user actions. If the &lt;code&gt;value&lt;/code&gt; prop is not updated, the component will continue to render the supplied &lt;code&gt;value&lt;/code&gt; prop instead of the expected result of any user actions.</source>
          <target state="translated">이것은 컴포넌트가 사용자 조치를 반영하기 위해 &lt;code&gt;value&lt;/code&gt; prop 를 업데이트 하는 &lt;code&gt;onValueChange&lt;/code&gt; 콜백 이 필요한 제어되는 컴포넌트입니다 . 는 IF &lt;code&gt;value&lt;/code&gt; 소품이 업데이트되지 않은 구성 요소는 제공된 렌더링 계속 &lt;code&gt;value&lt;/code&gt; 소품 대신 사용자 작업의 예상 결과입니다.</target>
        </trans-unit>
        <trans-unit id="a26dd46c9fd7637cd0b36d5a00752ce14aab1ba2" translate="yes" xml:space="preserve">
          <source>This is a convenience wrapper around &lt;a href=&quot;virtualizedlist&quot;&gt;&lt;code&gt;&amp;lt;VirtualizedList&amp;gt;&lt;/code&gt;&lt;/a&gt;, and thus inherits its props (as well as those of &lt;a href=&quot;scrollview&quot;&gt;&lt;code&gt;&amp;lt;ScrollView&amp;gt;&lt;/code&gt;&lt;/a&gt; that aren't explicitly listed here, along with the following caveats:</source>
          <target state="translated">이것은 &lt;a href=&quot;virtualizedlist&quot;&gt; &lt;code&gt;&amp;lt;VirtualizedList&amp;gt;&lt;/code&gt; &lt;/a&gt; 주위의 편리한 래퍼 이므로 소품 (및 여기에 명시 적으로 나열되지 않은 &lt;a href=&quot;scrollview&quot;&gt; &lt;code&gt;&amp;lt;ScrollView&amp;gt;&lt;/code&gt; &lt;/a&gt; 의 소품) 과 다음 경고 사항 을 상속합니다 .</target>
        </trans-unit>
        <trans-unit id="088d27e1e8c77500053aaabdaf671afa75a1f65a" translate="yes" xml:space="preserve">
          <source>This is a convenience wrapper around &lt;a href=&quot;virtualizedlist&quot;&gt;&lt;code&gt;&amp;lt;VirtualizedList&amp;gt;&lt;/code&gt;&lt;/a&gt;, and thus inherits its props (as well as those of &lt;a href=&quot;scrollview&quot;&gt;&lt;code&gt;&amp;lt;ScrollView&amp;gt;&lt;/code&gt;&lt;/a&gt;) that aren't explicitly listed here, along with the following caveats:</source>
          <target state="translated">이것은 &lt;a href=&quot;virtualizedlist&quot;&gt; &lt;code&gt;&amp;lt;VirtualizedList&amp;gt;&lt;/code&gt; &lt;/a&gt; 주위의 편리한 래퍼 이므로 여기에 명시 적으로 나열되지 않은 소품 ( &lt;a href=&quot;scrollview&quot;&gt; &lt;code&gt;&amp;lt;ScrollView&amp;gt;&lt;/code&gt; &lt;/a&gt; 의 소품 )과 다음 경고 사항 을 상속합니다 .</target>
        </trans-unit>
        <trans-unit id="0efe5d310385b7ed2c8cc4cb75e404936463aa82" translate="yes" xml:space="preserve">
          <source>This is a more advanced guide that shows how to build a native module. It assumes the reader knows Objective-C or Swift and core libraries (Foundation, UIKit).</source>
          <target state="translated">기본 모듈을 작성하는 방법을 보여주는 고급 안내서입니다. 독자가 Objective-C 또는 Swift 및 핵심 라이브러리 (Foundation, UIKit)를 알고 있다고 가정합니다.</target>
        </trans-unit>
        <trans-unit id="58d463b5ee6d3824cf058e14aad3baacc2c3b052" translate="yes" xml:space="preserve">
          <source>This is a shortcut for &lt;code&gt;rgba(0,0,0,0)&lt;/code&gt;:</source>
          <target state="translated">이것은 &lt;code&gt;rgba(0,0,0,0)&lt;/code&gt; 의 단축키입니다 .</target>
        </trans-unit>
        <trans-unit id="5dc9165e9384905a992f2c196858db764afaf5fa" translate="yes" xml:space="preserve">
          <source>This is a special performance property exposed by &lt;code&gt;RCTView&lt;/code&gt; and is useful for scrolling content when there are many subviews, most of which are offscreen. For this property to be effective, it must be applied to a view that contains many subviews that extend outside its bound. The subviews must also have &lt;code&gt;overflow: hidden&lt;/code&gt;, as should the containing view (or one of its superviews).</source>
          <target state="translated">이 속성은 &lt;code&gt;RCTView&lt;/code&gt; 에 의해 노출되는 특수 성능 속성 이며 대부분 오프 스크린 인 서브 뷰가 많은 경우 컨텐츠를 스크롤하는 데 유용합니다. 이 속성을 적용하려면 경계 외부로 확장되는 많은 하위 뷰가 포함 된 뷰에 적용해야합니다. 포함 된 뷰 (또는 해당 슈퍼 뷰 중 하나)와 마찬가지로 하위 뷰에도 &lt;code&gt;overflow: hidden&lt;/code&gt; 이 있어야합니다.</target>
        </trans-unit>
        <trans-unit id="e9d2a916aba1d06a39c281da6ae94219e845931e" translate="yes" xml:space="preserve">
          <source>This is an API that works both on iOS and Android and can show static alerts. To show an alert that prompts the user to enter some information, see &lt;code&gt;AlertIOS&lt;/code&gt;; entering text in an alert is common on iOS only.</source>
          <target state="translated">이것은 iOS 및 Android에서 모두 작동하며 정적 경고를 표시 할 수있는 API입니다. 사용자에게 정보를 입력하라는 프롬프트를 표시하려면 &lt;code&gt;AlertIOS&lt;/code&gt; 를 참조하십시오 . 알림에 텍스트를 입력하는 것은 iOS에서만 일반적입니다.</target>
        </trans-unit>
        <trans-unit id="99a6a48284b10184dd8820f726f2b46558622a40" translate="yes" xml:space="preserve">
          <source>This is called when the user changes the date or time in the UI. The first and only argument is a Date object representing the new date and time.</source>
          <target state="translated">사용자가 UI에서 날짜 또는 시간을 변경할 때 호출됩니다. 첫 번째이자 유일한 인수는 새로운 날짜와 시간을 나타내는 Date 객체입니다.</target>
        </trans-unit>
        <trans-unit id="12637247c1fe88f8f68aaac554130ec9c3802bdd" translate="yes" xml:space="preserve">
          <source>This is computationally intensive compared to the original example - React needs to re-render the component hierarchy each time the opacity changes, even though other properties of the view and its children haven't changed. Usually this overhead isn't a concern but when performing continuous animations and responding to gestures, judiciously optimizing your components can improve your animations' fidelity.</source>
          <target state="translated">원래 예제와 비교할 때 계산이 많이 필요합니다. 뷰와 그 자식의 다른 속성이 변경되지 않은 경우에도 React는 불투명도가 변경 될 때마다 컴포넌트 계층을 다시 렌더링해야합니다. 일반적으로이 오버 헤드는 문제가되지 않지만 연속적인 애니메이션을 수행하고 제스처에 응답 할 때 구성 요소를 신중하게 최적화하면 애니메이션의 충실도가 향상 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="6f0a7d0902e7f077c2024aa460dd7af9d9e7d246" translate="yes" xml:space="preserve">
          <source>This is done in an optimized way that is faster than calling &lt;code&gt;setState&lt;/code&gt; and re-rendering.</source>
          <target state="translated">이것은 &lt;code&gt;setState&lt;/code&gt; 를 호출 하고 다시 렌더링 하는 것보다 빠른 최적화 된 방법으로 수행됩니다 .</target>
        </trans-unit>
        <trans-unit id="96b36adeed315f989331032cf58ae2468abc2578" translate="yes" xml:space="preserve">
          <source>This is especially true when you have text with a transparent background positioned on top of an image, or any other situation where alpha compositing would be required to re-draw the view on each frame. You will find that enabling &lt;code&gt;shouldRasterizeIOS&lt;/code&gt; or &lt;code&gt;renderToHardwareTextureAndroid&lt;/code&gt; can help with this significantly.</source>
          <target state="translated">이미지 위에 투명한 배경을 가진 텍스트가 있거나 각 프레임에서 뷰를 다시 그리려면 알파 합성이 필요한 다른 상황에서 특히 그렇습니다. &lt;code&gt;shouldRasterizeIOS&lt;/code&gt; 또는 &lt;code&gt;renderToHardwareTextureAndroid&lt;/code&gt; 를 활성화 하면이 기능에 크게 도움이됩니다.</target>
        </trans-unit>
        <trans-unit id="72b474cd435a147a556cd54897bc57a285a7cdb2" translate="yes" xml:space="preserve">
          <source>This is not called by default due to performance overhead, but it's useful for finding traces which spend too much time in JSON.</source>
          <target state="translated">성능 오버 헤드로 인해 기본적으로 호출되지는 않지만 JSON에서 너무 많은 시간을 소비하는 추적을 찾는 데 유용합니다.</target>
        </trans-unit>
        <trans-unit id="385a00629c4c21eee8f6409bb615fdb8e4fc5a52" translate="yes" xml:space="preserve">
          <source>This is not necessary if you are integrating React Native into an existing application, if you &quot;ejected&quot; from Create React Native App, or if you're adding Android support to an existing React Native project (see &lt;a href=&quot;platform-specific-code&quot;&gt;Platform Specific Code&lt;/a&gt;).</source>
          <target state="translated">React Native를 기존 애플리케이션에 통합하거나 React Native 앱 생성에서 &quot;추출&quot;했거나 기존 React Native 프로젝트에 Android 지원을 추가하는 경우 ( &lt;a href=&quot;platform-specific-code&quot;&gt;플랫폼 별 코드&lt;/a&gt; 참조 )에는 필요하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="b909d0401ca91b82ea47fee4665950cc57626714" translate="yes" xml:space="preserve">
          <source>This is not necessary if you are integrating React Native into an existing application, if you &quot;ejected&quot; from Create React Native App, or if you're adding iOS support to an existing React Native project (see &lt;a href=&quot;platform-specific-code&quot;&gt;Platform Specific Code&lt;/a&gt;).</source>
          <target state="translated">React Native를 기존 애플리케이션에 통합하거나 React Native 앱 생성에서 &quot;추출&quot;했거나 기존 React Native 프로젝트에 iOS 지원을 추가하는 경우에는 필요하지 않습니다 ( &lt;a href=&quot;platform-specific-code&quot;&gt;플랫폼 별 코드&lt;/a&gt; 참조 ).</target>
        </trans-unit>
        <trans-unit id="81fc4b4ed8a96be269a24e3630359e455854a42f" translate="yes" xml:space="preserve">
          <source>This is now a fully-functioning native map view component in JavaScript, complete with pinch-zoom and other native gesture support. We can't really control it from JavaScript yet, though :(</source>
          <target state="translated">이것은 이제 pinch-zoom 및 기타 기본 제스처 지원과 함께 JavaScript에서 완벽하게 작동하는 기본 맵 뷰 구성 요소입니다. 그래도 아직 JavaScript에서 제어 할 수는 없습니다.</target>
        </trans-unit>
        <trans-unit id="525b2d553248954fb8b44422be820c9ce75bddbc" translate="yes" xml:space="preserve">
          <source>This is only used in dev mode when reloading JavaScript from the development server, so you can strip this in release builds if you need to.</source>
          <target state="translated">개발 서버에서 JavaScript를 다시로드 할 때 개발 모드에서만 사용되므로 필요한 경우 릴리스 빌드에서이를 제거 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f615b7beb80dc23062c6f35875edf9041c7eb92c" translate="yes" xml:space="preserve">
          <source>This is recommended for very small and dynamic images only, like icons in a list from a DB.</source>
          <target state="translated">DB의 목록에있는 아이콘과 같이 매우 작고 동적 인 이미지에만 권장됩니다.</target>
        </trans-unit>
        <trans-unit id="c2b8537b320037cf179daabe5fac751267be7749" translate="yes" xml:space="preserve">
          <source>This is the distance between the top of the user screen and the react native view, may be non-zero in some use cases.</source>
          <target state="translated">사용자 화면 상단과 반응 기본보기 간의 거리이며 일부 사용 사례에서는 0이 아닐 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e4d54bdd57b334e73adf1ac0efb59940242adf70" translate="yes" xml:space="preserve">
          <source>This is useful with scroll events, for example, to show the navbar when scrolling up and to hide it when scrolling down.</source>
          <target state="translated">예를 들어 스크롤 할 때 탐색 표시 줄을 표시하고 아래로 스크롤 할 때 탐색 표시 줄을 숨기는 등의 스크롤 이벤트에 유용합니다.</target>
        </trans-unit>
        <trans-unit id="a9f024d6e5fa5f41792c5ee3505d2fa72fe6a752" translate="yes" xml:space="preserve">
          <source>This is where &lt;code&gt;FlatList&lt;/code&gt; comes into play. &lt;code&gt;FlatList&lt;/code&gt; renders items lazily, just when they are about to appear, and removes items that scroll way off screen to save memory and processing time.</source>
          <target state="translated">&lt;code&gt;FlatList&lt;/code&gt; 가 사용되는 곳 입니다. &lt;code&gt;FlatList&lt;/code&gt; 는 항목이 나타나 자마자 게으르게 항목을 렌더링하고 메모리와 처리 시간을 절약하기 위해 화면 밖으로 스크롤되는 항목을 제거합니다.</target>
        </trans-unit>
        <trans-unit id="d1c394c0d13cb72926cf0481c61eeee64a1ab349" translate="yes" xml:space="preserve">
          <source>This library does not ship with React Native - in order to use it on your project, you will need to install it with &lt;code&gt;npm i react-timer-mixin --save&lt;/code&gt; from your project directory.</source>
          <target state="translated">이 라이브러리는 React Native와 함께 제공되지 않습니다-프로젝트에서 사용하려면 프로젝트 디렉토리에서 &lt;code&gt;npm i react-timer-mixin --save&lt;/code&gt; 를 사용하여 설치해야합니다 .</target>
        </trans-unit>
        <trans-unit id="879fbff809517327163d1a254188ed29ebe8d802" translate="yes" xml:space="preserve">
          <source>This may improve scroll performance for large lists.</source>
          <target state="translated">이렇게하면 큰 목록의 스크롤 성능이 향상 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f69aa61eb018c5246c726465c6330765cb34a9a4" translate="yes" xml:space="preserve">
          <source>This method internally uses &lt;code&gt;StyleSheetRegistry.getStyleByID(style)&lt;/code&gt; to resolve style objects represented by IDs. Thus, an array of style objects (instances of &lt;code&gt;StyleSheet.create()&lt;/code&gt;), are individually resolved to, their respective objects, merged as one and then returned. This also explains the alternative use.</source>
          <target state="translated">이 메소드는 내부적으로 &lt;code&gt;StyleSheetRegistry.getStyleByID(style)&lt;/code&gt; 를 사용 하여 ID로 표시되는 스타일 오브젝트를 분석합니다. 따라서 스타일 객체의 배열 ( &lt;code&gt;StyleSheet.create()&lt;/code&gt; 인스턴스 )은 개별적으로 해당 객체로 해석되어 하나로 병합 된 다음 반환됩니다. 대체 사용에 대해서도 설명합니다.</target>
        </trans-unit>
        <trans-unit id="19c3fb29a7603834deb54b850eea3273b0cc3d40" translate="yes" xml:space="preserve">
          <source>This method is available for remote notifications that have been received via: &lt;code&gt;application:didReceiveRemoteNotification:fetchCompletionHandler:&lt;/code&gt;&lt;a href=&quot;https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIApplicationDelegate_Protocol/#//apple_ref/occ/intfm/UIApplicationDelegate/application:didReceiveRemoteNotification:fetchCompletionHandler&quot;&gt;https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIApplicationDelegate_Protocol/#//apple_ref/occ/intfm/UIApplicationDelegate/application:didReceiveRemoteNotification:fetchCompletionHandler&lt;/a&gt;:</source>
          <target state="translated">이 메소드는 다음을 통해 수신 된 원격 알림에 사용할 수 있습니다. &lt;code&gt;application:didReceiveRemoteNotification:fetchCompletionHandler:&lt;/code&gt; &lt;a href=&quot;https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIApplicationDelegate_Protocol/#//apple_ref/occ/intfm/UIApplicationDelegate/application:didReceiveRemoteNotification:fetchCompletionHandler&quot;&gt;https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIApplicationDelegate_Protocol/#//apple_ref/occ/intfm/ UIApplicationDelegate / application : didReceiveRemoteNotification : fetchCompletionHandler&lt;/a&gt; :</target>
        </trans-unit>
        <trans-unit id="cf5e3a8b01dfd91b63b225a42e908be6a62c1e20" translate="yes" xml:space="preserve">
          <source>This method returns a promise that will resolve when the user accepts, rejects, or if the permissions were previously rejected. The promise resolves to the current state of the permission.</source>
          <target state="translated">이 메소드는 사용자가 승인, 거부 또는 권한이 이전에 거부 된 경우 해결 될 약속을 리턴합니다. 약속은 권한의 현재 상태로 해결됩니다.</target>
        </trans-unit>
        <trans-unit id="9fb388aa1e89f0f8d773cbab6b7219805aa700ed" translate="yes" xml:space="preserve">
          <source>This method returns a promise. If the app was launched by a push notification, this promise resolves to an object of type &lt;code&gt;PushNotificationIOS&lt;/code&gt;. Otherwise, it resolves to &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">이 방법은 약속을 반환합니다. 푸시 알림으로 앱을 시작한 경우이 약속은 &lt;code&gt;PushNotificationIOS&lt;/code&gt; 유형의 객체로 확인됩니다 . 그렇지 않으면 &lt;code&gt;null&lt;/code&gt; 로 확인 됩니다.</target>
        </trans-unit>
        <trans-unit id="a592bf9d480d697930fad782945fc55a15cd5824" translate="yes" xml:space="preserve">
          <source>This method will fail if the system doesn't know how to open the specified URL. If you're passing in a non-http(s) URL, it's best to check {@code canOpenURL} first.</source>
          <target state="translated">시스템이 지정된 URL을 여는 방법을 모르면이 방법이 실패합니다. http가 아닌 URL을 전달하는 경우 먼저 {@code canOpenURL}을 확인하는 것이 가장 좋습니다.</target>
        </trans-unit>
        <trans-unit id="103a497420423a87836bf74252ccf681b79b2416" translate="yes" xml:space="preserve">
          <source>This method would be accessed in JavaScript using:</source>
          <target state="translated">이 방법은 다음을 사용하여 JavaScript로 액세스합니다.</target>
        </trans-unit>
        <trans-unit id="2261160404950e08088ac018c0b7f317489efbe4" translate="yes" xml:space="preserve">
          <source>This often happens during &lt;code&gt;Navigator&lt;/code&gt; transitions: when you push a new route, the JavaScript thread needs to render all of the components necessary for the scene in order to send over the proper commands to the native side to create the backing views. It's common for the work being done here to take a few frames and cause &lt;a href=&quot;http://jankfree.org/&quot;&gt;jank&lt;/a&gt; because the transition is controlled by the JavaScript thread. Sometimes components will do additional work on &lt;code&gt;componentDidMount&lt;/code&gt;, which might result in a second stutter in the transition.</source>
          <target state="translated">이것은 &lt;code&gt;Navigator&lt;/code&gt; 전환 중에 종종 발생 합니다. 새 경로를 푸시하면 JavaScript 스레드가 장면에 필요한 모든 구성 요소를 렌더링하여 적절한 명령을 기본 측으로 보내서 백업 뷰를 생성해야합니다. 전환이 JavaScript 스레드에 의해 제어되므로 여기에서 수행되는 작업이 몇 프레임을 &lt;a href=&quot;http://jankfree.org/&quot;&gt;차지하고 jan을&lt;/a&gt; 발생 시키는 것이 일반적 입니다. 때때로 구성 요소에 대한 추가 작업을 할 것입니다 &lt;code&gt;componentDidMount&lt;/code&gt; 전환에 두 번째 더듬이 발생할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="0c77c88cc594de09f771d17a070cd93e0b846c0a" translate="yes" xml:space="preserve">
          <source>This optional argument should be either a single-argument function or an array of buttons. If passed a function, it will be called when the user taps 'OK'. If passed an array of button configurations, each button should include a &lt;code&gt;text&lt;/code&gt; key, as well as optional &lt;code&gt;onPress&lt;/code&gt; and &lt;code&gt;style&lt;/code&gt; keys. &lt;code&gt;style&lt;/code&gt; should be one of 'default', 'cancel' or 'destructive'.</source>
          <target state="translated">이 선택적 인수는 단일 인수 함수 또는 단추 배열이어야합니다. 함수가 전달되면 사용자가 '확인'을 누를 때 호출됩니다. 버튼 구성 배열을 전달한 경우 각 버튼에는 &lt;code&gt;text&lt;/code&gt; 키와 선택적 &lt;code&gt;onPress&lt;/code&gt; 및 &lt;code&gt;style&lt;/code&gt; 키 가 포함되어야 합니다. &lt;code&gt;style&lt;/code&gt; 은 'default', 'cancel'또는 'destructive'중 하나 여야합니다.</target>
        </trans-unit>
        <trans-unit id="3320bb53cecccf21c496152fce27fa50241dcd43" translate="yes" xml:space="preserve">
          <source>This optional argument should be either a single-argument function or an array of buttons. If passed a function, it will be called with the prompt's value when the user taps 'OK'. If passed an array of button configurations, each button should include a &lt;code&gt;text&lt;/code&gt; key, as well as optional &lt;code&gt;onPress&lt;/code&gt; and &lt;code&gt;style&lt;/code&gt; keys (see example). &lt;code&gt;style&lt;/code&gt; should be one of 'default', 'cancel' or 'destructive'.</source>
          <target state="translated">이 선택적 인수는 단일 인수 함수 또는 단추 배열이어야합니다. 함수가 전달되면 사용자가 '확인'을 누를 때 프롬프트 값으로 호출됩니다. 버튼 구성 배열을 전달한 경우 각 버튼에는 &lt;code&gt;text&lt;/code&gt; 키와 선택적 &lt;code&gt;onPress&lt;/code&gt; 및 &lt;code&gt;style&lt;/code&gt; 키 가 포함되어야 합니다 (예 참조). &lt;code&gt;style&lt;/code&gt; 은 'default', 'cancel'또는 'destructive'중 하나 여야합니다.</target>
        </trans-unit>
        <trans-unit id="d8f2592c783597970e92fa047830553ca3373903" translate="yes" xml:space="preserve">
          <source>This page will help you install and build your first React Native app. If you already have React Native installed, you can skip ahead to the &lt;a href=&quot;tutorial&quot;&gt;Tutorial&lt;/a&gt;.</source>
          <target state="translated">이 페이지는 첫 React Native 앱을 설치하고 빌드하는 데 도움이됩니다. React Native가 이미 설치되어 있으면 &lt;a href=&quot;tutorial&quot;&gt;Tutorial으로&lt;/a&gt; 넘어갈 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="43bc53b4331ebbf9d823b4ccdd0bfa415b61d989" translate="yes" xml:space="preserve">
          <source>This performs the same function as the &lt;code&gt;cloneWithRows&lt;/code&gt; function but here you also specify what your &lt;code&gt;sectionIdentities&lt;/code&gt; are. If you don't care about sections you should safely be able to use &lt;code&gt;cloneWithRows&lt;/code&gt;.</source>
          <target state="translated">이것은 &lt;code&gt;cloneWithRows&lt;/code&gt; 함수 와 동일한 기능을 수행 하지만 여기서 &lt;code&gt;sectionIdentities&lt;/code&gt; 가 무엇인지 지정합니다 . 섹션에 신경 쓰지 않으면 &lt;code&gt;cloneWithRows&lt;/code&gt; 를 안전하게 사용할 수 있어야합니다 .</target>
        </trans-unit>
        <trans-unit id="dc958ccada810154a48732d0e2b59d563e66fc2e" translate="yes" xml:space="preserve">
          <source>This prop can also contain several remote URLs, specified together with their width and height and potentially with scale/other URI arguments. The native side will then choose the best &lt;code&gt;uri&lt;/code&gt; to display based on the measured size of the image container. A &lt;code&gt;cache&lt;/code&gt; property can be added to control how networked request interacts with the local cache.</source>
          <target state="translated">이 prop은 너비와 높이 및 스케일 / 기타 URI 인수와 함께 지정된 여러 원격 URL을 포함 할 수도 있습니다. 그런 다음 기본면은 이미지 컨테이너의 측정 된 크기에 따라 표시 할 최상의 &lt;code&gt;uri&lt;/code&gt; 를 선택합니다 . &lt;code&gt;cache&lt;/code&gt; 속성은 로컬 캐시 방식 네트워크 요청 상호 작용을 제어하기 위해 첨가 될 수있다.</target>
        </trans-unit>
        <trans-unit id="f3e2ab2d63d36f62a4097bf54961555e18caef91" translate="yes" xml:space="preserve">
          <source>This prop is commonly used with &lt;code&gt;ellipsizeMode&lt;/code&gt;.</source>
          <target state="translated">이 소품은 일반적으로 &lt;code&gt;ellipsizeMode&lt;/code&gt; 와 함께 사용됩니다 .</target>
        </trans-unit>
        <trans-unit id="a8b0815991f548cd64f0ce862f42cf4063c64b97" translate="yes" xml:space="preserve">
          <source>This property specifies how the safe area insets are used to modify the content area of the scroll view. The default value of this property is &quot;never&quot;. Available on iOS 11 and later.</source>
          <target state="translated">이 속성은 안전 영역 삽입을 사용하여 스크롤보기의 내용 영역을 수정하는 방법을 지정합니다. 이 속성의 기본값은 &quot;never&quot;입니다. iOS 11 이상에서 사용 가능합니다.</target>
        </trans-unit>
        <trans-unit id="0a79e5dec25c1a523b210e024f4d100a31807f8a" translate="yes" xml:space="preserve">
          <source>This property takes an array of objects, where each object has the following keys:</source>
          <target state="translated">이 속성은 객체 배열을 사용하며 각 객체에는 다음 키가 있습니다.</target>
        </trans-unit>
        <trans-unit id="87c0238db7d2aa7900d737e3109af9b2fbd09da1" translate="yes" xml:space="preserve">
          <source>This script attempts to map from the module names to module paths. Its not foolproof though, for instance, it ignores platform specific files (*ios.js, and *.android.js). However based on initial testing, it handles 95% of cases. When it runs, after some time it should complete and output a file named &lt;code&gt;packager/modulePaths.js&lt;/code&gt;. It should contain paths to module files that are relative to your projects root. You can commit modulePaths.js to your repo so it is transportable.</source>
          <target state="translated">이 스크립트는 모듈 이름에서 모듈 경로로 매핑을 시도합니다. 예를 들어, 플랫폼 특정 파일 (* ios.js 및 * .android.js)은 무시할 수 없습니다. 그러나 초기 테스트를 기반으로 95 %의 사례를 처리합니다. 실행되면 얼마 후 &lt;code&gt;packager/modulePaths.js&lt;/code&gt; 파일을 완료하고 출력해야합니다 . 프로젝트 루트와 관련된 모듈 파일의 경로를 포함해야합니다. repo에 modulePaths.js를 커밋하여 전송할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="469af447dd8150c7205482df7bc69441fa1a6480" translate="yes" xml:space="preserve">
          <source>This section is more experimental than others because we don't have a solid set of best practices around callbacks yet.</source>
          <target state="translated">이 섹션은 아직 콜백에 대한 확실한 모범 사례가 없기 때문에 다른 섹션보다 실험적입니다.</target>
        </trans-unit>
        <trans-unit id="33c3b258dfa8566284e35490f2ddf0a6240b5aa6" translate="yes" xml:space="preserve">
          <source>This section only applies to projects made with &lt;code&gt;react-native init&lt;/code&gt; or to those made with Create React Native App which have since ejected. For more information about ejecting, please see the &lt;a href=&quot;https://github.com/react-community/create-react-native-app/blob/master/EJECTING.md&quot;&gt;guide&lt;/a&gt; on the Create React Native App repository.</source>
          <target state="translated">이 섹션은 &lt;code&gt;react-native init&lt;/code&gt; 로 작성된 프로젝트 또는 배출 된 React Native App로 작성된 프로젝트에만 적용 됩니다. 추출에 대한 자세한 내용은 React Native App 리포지토리 생성 &lt;a href=&quot;https://github.com/react-community/create-react-native-app/blob/master/EJECTING.md&quot;&gt;가이드&lt;/a&gt; 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="1899a78bc738ea9a1d7a7912e3e40e21417a49c9" translate="yes" xml:space="preserve">
          <source>This should only be called from native code by sending the didUpdateDimensions event.</source>
          <target state="translated">didUpdateDimensions 이벤트를 보내 원시 코드에서만 호출해야합니다.</target>
        </trans-unit>
        <trans-unit id="4f8baf6716df0c58ec2fe7f1b362acd6370b64fc" translate="yes" xml:space="preserve">
          <source>This style takes precedence over the &lt;code&gt;left&lt;/code&gt; and &lt;code&gt;right&lt;/code&gt; styles.</source>
          <target state="translated">이 스타일은 &lt;code&gt;left&lt;/code&gt; 및 &lt;code&gt;right&lt;/code&gt; 스타일 보다 우선 합니다.</target>
        </trans-unit>
        <trans-unit id="248075517f17409952b8950d98aa3dd331616006" translate="yes" xml:space="preserve">
          <source>This style takes precedence over the &lt;code&gt;left&lt;/code&gt;, &lt;code&gt;right&lt;/code&gt;, and &lt;code&gt;end&lt;/code&gt; styles.</source>
          <target state="translated">이 스타일은 &lt;code&gt;left&lt;/code&gt; , &lt;code&gt;right&lt;/code&gt; 및 &lt;code&gt;end&lt;/code&gt; 스타일 보다 우선 합니다.</target>
        </trans-unit>
        <trans-unit id="3168c87e990bac7c17434cadd2bd6fd628bc2220" translate="yes" xml:space="preserve">
          <source>This will automatically remove all &lt;code&gt;console.*&lt;/code&gt; calls in the release (production) versions of your project.</source>
          <target state="translated">이렇게하면 프로젝트의 릴리스 (프로덕션) 버전에서 모든 &lt;code&gt;console.*&lt;/code&gt; 호출 이 자동으로 제거됩니다 .</target>
        </trans-unit>
        <trans-unit id="2eb2ca5c78d44af579285e1d9b7d6125e67b09c8" translate="yes" xml:space="preserve">
          <source>This will check your files against the latest template and perform the following:</source>
          <target state="translated">그러면 최신 템플릿과 비교하여 파일을 확인하고 다음을 수행합니다.</target>
        </trans-unit>
        <trans-unit id="08d487e08791a4afe0f61aa0b0ce7bda14507677" translate="yes" xml:space="preserve">
          <source>This will eliminate a lot of hard work tracking down bugs, such as crashes caused by timeouts firing after a component has been unmounted.</source>
          <target state="translated">이렇게하면 구성 요소를 마운트 해제 한 후 발생하는 시간 초과로 인한 충돌과 같은 버그를 추적하는 많은 노력이 필요하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="213511d48aec4b8eee142dbd08bc3d2e7e2535ca" translate="yes" xml:space="preserve">
          <source>This will now reference the &lt;code&gt;main.jsbundle&lt;/code&gt; resource file that is created during the &lt;code&gt;Bundle React Native code and images&lt;/code&gt; Build Phase in Xcode.</source>
          <target state="translated">이제 &lt;code&gt;Bundle React Native code and images&lt;/code&gt; &lt;code&gt;main.jsbundle&lt;/code&gt; 네이티브 코드와 Xcode의 빌드 단계 이미지 중에 생성 된 main.jsbundle 리소스 파일을 참조합니다 .</target>
        </trans-unit>
        <trans-unit id="091a3653458a2bb847bcb3c3427f4746ee0b94b8" translate="yes" xml:space="preserve">
          <source>This will package everything that would typically be included in the &lt;code&gt;android&lt;/code&gt; directory of your &lt;code&gt;node_modules/react-native/&lt;/code&gt; installation in the root directory of your React Native checkout.</source>
          <target state="translated">이것은 일반적으로 React Native 체크 아웃의 루트 디렉토리에 &lt;code&gt;node_modules/react-native/&lt;/code&gt; 설치 의 &lt;code&gt;android&lt;/code&gt; 디렉토리에 포함되는 모든 것을 패키지 합니다.</target>
        </trans-unit>
        <trans-unit id="db6c7ffc36edeab7a4d26569ca167ccd247e08a8" translate="yes" xml:space="preserve">
          <source>This will print a message similar to the following (scroll up in the yarn output to see it):</source>
          <target state="translated">그러면 다음과 유사한 메시지가 인쇄됩니다 (원사 출력에서 ​​위로 스크롤하여 확인).</target>
        </trans-unit>
        <trans-unit id="6010b29a3d8662b06ba17a4fe0d6fff436f7f810" translate="yes" xml:space="preserve">
          <source>This will render a blue label on iOS, and a blue rounded rectangle with white text on Android. Pressing the button will call the &quot;onPress&quot; function, which in this case displays an alert popup. If you like, you can specify a &quot;color&quot; prop to change the color of your button.</source>
          <target state="translated">iOS에서 파란색 레이블을, Android에서 흰색 텍스트가있는 파란색 둥근 사각형을 렌더링합니다. 버튼을 누르면 &quot;onPress&quot;기능이 호출되며이 경우 경고 팝업이 표시됩니다. 원하는 경우 &quot;색상&quot;소품을 지정하여 단추의 색상을 변경할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d82c2390c03255287b8b41f929d55d482fae5642" translate="yes" xml:space="preserve">
          <source>This will result in a container having &lt;code&gt;flex: 1&lt;/code&gt; on both platforms, a red background color on iOS, and a blue background color on Android.</source>
          <target state="translated">두 플랫폼 모두 에서 컨테이너가 &lt;code&gt;flex: 1&lt;/code&gt; , iOS의 경우 빨간색 배경색, Android의 경우 파란색 배경색이됩니다.</target>
        </trans-unit>
        <trans-unit id="f6f08daa062f7cd8baa541e61bb425c265f5898f" translate="yes" xml:space="preserve">
          <source>This will start a development server for you.</source>
          <target state="translated">개발 서버가 시작됩니다.</target>
        </trans-unit>
        <trans-unit id="a3074276c1aa65eaf1d046ad6f6215021ffc6b12" translate="yes" xml:space="preserve">
          <source>Though you may have installed the &lt;code&gt;react-native-cli&lt;/code&gt; via npm as a separate module, it is a shell for accessing the CLI embedded in the React Native of each project. Your commands and their effects are dependent on the version of the module of &lt;code&gt;react-native&lt;/code&gt; in context of the project. This guide will give a brief overview of the CLI in the module.</source>
          <target state="translated">npm을 통해 &lt;code&gt;react-native-cli&lt;/code&gt; 를 별도의 모듈로 설치했지만 각 프로젝트의 React Native에 포함 된 CLI에 액세스하기위한 쉘입니다. 명령과 그 효과는 프로젝트의 맥락에서 &lt;code&gt;react-native&lt;/code&gt; 모듈의 버전에 따라 다릅니다 . 이 안내서는 모듈의 CLI에 대한 간략한 개요를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="5541d0b76d127f6a3c54bbc247ffcc1b6c2bbc25" translate="yes" xml:space="preserve">
          <source>Threading</source>
          <target state="translated">Threading</target>
        </trans-unit>
        <trans-unit id="236758baf2d1f4e9e50870f9c35a578bfad9929b" translate="yes" xml:space="preserve">
          <source>Three buttons mean 'neutral', 'negative', 'positive' (such as 'Later', 'Cancel', 'OK')</source>
          <target state="translated">세 개의 버튼은 '중립', '음성', '양성'(예 : '나중', '취소', '확인')</target>
        </trans-unit>
        <trans-unit id="3937302e43d6795dd2ba380b09f29bcb5916b250" translate="yes" xml:space="preserve">
          <source>Three standard easing functions are provided:</source>
          <target state="translated">세 가지 표준 여유 기능이 제공됩니다.</target>
        </trans-unit>
        <trans-unit id="218fe1c150b8e4e874fcd136f65c00092debbd09" translate="yes" xml:space="preserve">
          <source>Threshold in pixels (virtual, not physical) for calling onEndReached.</source>
          <target state="translated">onEndReached를 호출하기위한 임계 값 (가상이 아닌 가상)입니다.</target>
        </trans-unit>
        <trans-unit id="205b6a46e3d1b0637597ade9c38bdf1e45565662" translate="yes" xml:space="preserve">
          <source>TimePickerAndroid</source>
          <target state="translated">TimePickerAndroid</target>
        </trans-unit>
        <trans-unit id="ffca255421eef1e58970752ade9e94264336a9fb" translate="yes" xml:space="preserve">
          <source>TimePickerAndroid.dismissedAction()</source>
          <target state="translated">TimePickerAndroid.dismissedAction()</target>
        </trans-unit>
        <trans-unit id="0773daf0a687f2a88d206c54b56883dfe37bd0af" translate="yes" xml:space="preserve">
          <source>TimePickerAndroid.open()</source>
          <target state="translated">TimePickerAndroid.open()</target>
        </trans-unit>
        <trans-unit id="fd877ef8eb38572d715b15d14edc129bb1947ff1" translate="yes" xml:space="preserve">
          <source>TimePickerAndroid.timeSetAction()</source>
          <target state="translated">TimePickerAndroid.timeSetAction()</target>
        </trans-unit>
        <trans-unit id="f46212363e678ee97e4206fd8e79d9de3ece700b" translate="yes" xml:space="preserve">
          <source>TimerMixin</source>
          <target state="translated">TimerMixin</target>
        </trans-unit>
        <trans-unit id="841cd03a97cd854590864d79ae48ee749c5e902e" translate="yes" xml:space="preserve">
          <source>Timers</source>
          <target state="translated">Timers</target>
        </trans-unit>
        <trans-unit id="24c1f5b8292a5d203884073f480ea8bb1efa9cda" translate="yes" xml:space="preserve">
          <source>Timers are an important part of an application and React Native implements the &lt;a href=&quot;https://developer.mozilla.org/en-US/Add-ons/Code_snippets/Timers&quot;&gt;browser timers&lt;/a&gt;.</source>
          <target state="translated">타이머는 응용 프로그램의 중요한 부분이며 React Native는 &lt;a href=&quot;https://developer.mozilla.org/en-US/Add-ons/Code_snippets/Timers&quot;&gt;브라우저 타이머를&lt;/a&gt; 구현합니다 .</target>
        </trans-unit>
        <trans-unit id="0e80c78fe00de24a898a7ae47a8b1d680deaf816" translate="yes" xml:space="preserve">
          <source>Timezone offset in minutes.</source>
          <target state="translated">분 단위의 시간대 오프셋.</target>
        </trans-unit>
        <trans-unit id="5446e9af023e67acb45771c3714df8111e1c7ae4" translate="yes" xml:space="preserve">
          <source>Title color.</source>
          <target state="translated">제목 색상.</target>
        </trans-unit>
        <trans-unit id="f589f114f90883d51f1743f27a1eb723613c7b22" translate="yes" xml:space="preserve">
          <source>To &quot;stop&quot; an application when a view should be destroyed, call &lt;code&gt;AppRegistry.unmountApplicationComponentAtRootTag&lt;/code&gt; with the tag that was passed into &lt;code&gt;runApplication&lt;/code&gt;. These should always be used as a pair.</source>
          <target state="translated">뷰를 삭제해야 할 때 애플리케이션을 &quot;중지&quot;하려면 &lt;code&gt;AppRegistry.unmountApplicationComponentAtRootTag&lt;/code&gt; 에 전달 된 태그를 사용하여 AppRegistry.unmountApplicationComponentAtRootTag 를 호출 &lt;code&gt;runApplication&lt;/code&gt; . 이들은 항상 쌍으로 사용해야합니다.</target>
        </trans-unit>
        <trans-unit id="52aacd3deea38df46a465a38e4f9fb7c2916c99a" translate="yes" xml:space="preserve">
          <source>To configure your app to be built using the &lt;code&gt;Release&lt;/code&gt; scheme, go to &lt;strong&gt;Product&lt;/strong&gt; &amp;rarr; &lt;strong&gt;Scheme&lt;/strong&gt; &amp;rarr; &lt;strong&gt;Edit Scheme&lt;/strong&gt;. Select the &lt;strong&gt;Run&lt;/strong&gt; tab in the sidebar, then set the Build Configuration dropdown to &lt;code&gt;Release&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Release&lt;/code&gt; 구성표를 사용하여 앱을 빌드하도록 구성하려면 &lt;strong&gt;제품&lt;/strong&gt; &amp;rarr; &lt;strong&gt;구성표&lt;/strong&gt; &amp;rarr; &lt;strong&gt;구성표 편집으로&lt;/strong&gt; 이동 &lt;strong&gt;하십시오&lt;/strong&gt; . 선택 &lt;strong&gt;실행&lt;/strong&gt; 사이드 바에서 탭을, 다음에 빌드 구성 드롭 다운 설정 &lt;code&gt;Release&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="ff59d7aff49f763fc1d5fd7587ec27067cddc25b" translate="yes" xml:space="preserve">
          <source>To debug the JavaScript code in Chrome, select &quot;Debug JS Remotely&quot; from the Developer Menu. This will open a new tab at &lt;a href=&quot;http://localhost:8081/debugger-ui&quot;&gt;http://localhost:8081/debugger-ui&lt;/a&gt;.</source>
          <target state="translated">Chrome에서 JavaScript 코드를 디버깅하려면 개발자 메뉴에서 &quot;원격으로 JS 디버그&quot;를 선택하십시오. &lt;a href=&quot;http://localhost:8081/debugger-ui&quot;&gt;http : // localhost : 8081 / debugger-ui&lt;/a&gt; 에서 새 탭이 열립니다 .</target>
        </trans-unit>
        <trans-unit id="d9a2873f948fa14a383e8bb50a2f61ca81dbda2d" translate="yes" xml:space="preserve">
          <source>To disable autofill, set &lt;code&gt;textContentType&lt;/code&gt; to &lt;code&gt;none&lt;/code&gt;.</source>
          <target state="translated">자동 완성을 비활성화하려면 &lt;code&gt;textContentType&lt;/code&gt; 을 &lt;code&gt;none&lt;/code&gt; 으로 설정하십시오 .</target>
        </trans-unit>
        <trans-unit id="1df9e8dffcbe777ba957881cdf85687f0806c986" translate="yes" xml:space="preserve">
          <source>To document the properties (and which values they accept) of our MapView component we'll add a wrapper component and document the interface with React &lt;code&gt;PropTypes&lt;/code&gt;:</source>
          <target state="translated">MapView 컴포넌트의 속성 (및 허용되는 값)을 문서화하기 위해 래퍼 컴포넌트를 추가하고 React &lt;code&gt;PropTypes&lt;/code&gt; 로 인터페이스를 문서화합니다 .</target>
        </trans-unit>
        <trans-unit id="05fe3207e4e0bc5c86d89c1132b73dcef95813e1" translate="yes" xml:space="preserve">
          <source>To enable Proguard, edit &lt;code&gt;android/app/build.gradle&lt;/code&gt;:</source>
          <target state="translated">Proguard를 활성화하려면 &lt;code&gt;android/app/build.gradle&lt;/code&gt; 을 편집 하십시오 .</target>
        </trans-unit>
        <trans-unit id="2f742ad58da04725cd32af7049ca731dd63fc5b6" translate="yes" xml:space="preserve">
          <source>To enable USB debugging on your device, you will first need to enable the &quot;Developer options&quot; menu by going to &lt;strong&gt;Settings&lt;/strong&gt; &amp;rarr; &lt;strong&gt;About phone&lt;/strong&gt; and then tapping the &lt;code&gt;Build number&lt;/code&gt; row at the bottom seven times. You can then go back to &lt;strong&gt;Settings&lt;/strong&gt; &amp;rarr; &lt;strong&gt;Developer options&lt;/strong&gt; to enable &quot;USB debugging&quot;.</source>
          <target state="translated">장치에서 USB 디버깅을 활성화하려면 먼저 &lt;strong&gt;설정&lt;/strong&gt; &amp;rarr; &lt;strong&gt;전화 정보&lt;/strong&gt; 로 이동 한 다음 맨 아래에서 &lt;code&gt;Build number&lt;/code&gt; 행을 7 번 눌러 &quot;개발자 옵션&quot;메뉴를 활성화해야합니다 . 그런 다음 &lt;strong&gt;설정&lt;/strong&gt; &amp;rarr; &lt;strong&gt;개발자 옵션&lt;/strong&gt; 으로 돌아가 &quot;USB 디버깅&quot;을 활성화하십시오.</target>
        </trans-unit>
        <trans-unit id="0840fa70e8738b8a054ad31a6ccc66cdba8cb255" translate="yes" xml:space="preserve">
          <source>To enable VoiceOver, go to the Settings app on your iOS device. Tap General, then Accessibility. There you will find many tools that people use to make their devices more usable, such as bolder text, increased contrast, and VoiceOver.</source>
          <target state="translated">VoiceOver를 활성화하려면 iOS 장비의 설정 앱으로 이동하십시오. 일반을 누른 다음 접근성을 누릅니다. 더 굵은 글씨, 대비 증가 및 VoiceOver와 같이 사람들이 장치를보다 유용하게 사용하기 위해 사용하는 많은 도구가 있습니다.</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
