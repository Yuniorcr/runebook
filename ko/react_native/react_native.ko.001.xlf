<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="react_native">
    <body>
      <group id="react_native">
        <trans-unit id="2591813530e6a042f3e4368f8631aaa2429f3899" translate="yes" xml:space="preserve">
          <source>&quot;Attractive&quot;</source>
          <target state="translated">&quot;Attractive&quot;</target>
        </trans-unit>
        <trans-unit id="424e049218f78575665fb240a0cc67a900d8b37a" translate="yes" xml:space="preserve">
          <source>&quot;Slow Navigator transitions&quot; is the most common manifestation of this, but there are other times this can happen. Using InteractionManager can be a good approach, but if the user experience cost is too high to delay work during an animation, then you might want to consider LayoutAnimation.</source>
          <target state="translated">&quot;느린 네비게이터 전환&quot;이 가장 일반적인 증상이지만 다른 경우가 발생할 수 있습니다. InteractionManager를 사용하는 것이 좋은 방법 일 수 있지만 애니메이션 작업 중에 작업 경험을 지연시키기에 사용자 경험 비용이 너무 높으면 LayoutAnimation을 고려할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3a8249e0064881697f9053980132d1e4f99c733b" translate="yes" xml:space="preserve">
          <source>$Enum</source>
          <target state="translated">$Enum</target>
        </trans-unit>
        <trans-unit id="15592fda29ecdb7787d77de06ea1384ff4216371" translate="yes" xml:space="preserve">
          <source>&amp;copy; 2015&amp;ndash;2018 Facebook Inc.</source>
          <target state="translated">&amp;copy; 2015&amp;ndash;2018 Facebook Inc.</target>
        </trans-unit>
        <trans-unit id="4400070c3a87bfdb1b9337243aa40e6674739417" translate="yes" xml:space="preserve">
          <source>&amp;gt;) =&amp;gt; void</source>
          <target state="translated">&amp;gt;) =&amp;gt; 무효</target>
        </trans-unit>
        <trans-unit id="a00784714dd685f1086cd3a873f78203bb82bfb5" translate="yes" xml:space="preserve">
          <source>'animated' (boolean) - Whether the list should do an animation while scrolling. Defaults to &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">'animated'(boolean)-스크롤하는 동안 목록이 애니메이션을 수행해야하는지 여부입니다. 기본값은 &lt;code&gt;true&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="103e34b186dc14acd70ff84c85c9fcb1c0162de6" translate="yes" xml:space="preserve">
          <source>'calendar': Show a date picker in calendar mode.</source>
          <target state="translated">'달력': 달력 모드에서 날짜 선택기를 표시합니다.</target>
        </trans-unit>
        <trans-unit id="85d3e3ed2b8f0ae14c660ce742104605c2af31ab" translate="yes" xml:space="preserve">
          <source>'changed' (array of &lt;code&gt;ViewToken&lt;/code&gt;s)</source>
          <target state="translated">'변경됨'( &lt;code&gt;ViewToken&lt;/code&gt; 의 배열 )</target>
        </trans-unit>
        <trans-unit id="c4450afca7dc97dfbaf0689ef06a77fd1bb876e5" translate="yes" xml:space="preserve">
          <source>'clock': Show a time picker in clock mode.</source>
          <target state="translated">'clock': 시계 모드에서 시간 선택기를 표시합니다.</target>
        </trans-unit>
        <trans-unit id="e6d5428947f8e52531874160ec7eb1fb4b6a1e8f" translate="yes" xml:space="preserve">
          <source>'default': Show a default native date picker(spinner/calendar) based on android versions.</source>
          <target state="translated">'default': Android 버전을 기반으로 기본 기본 날짜 선택기 (스피너 / 달력)를 표시합니다.</target>
        </trans-unit>
        <trans-unit id="f44cc1e85d83f6ad423c4af52fed39eafce3ba3a" translate="yes" xml:space="preserve">
          <source>'default': Show a default time picker based on Android versions.</source>
          <target state="translated">'default': Android 버전을 기반으로 기본 시간 선택기를 표시합니다.</target>
        </trans-unit>
        <trans-unit id="afe78190b04f6daeac8c14acaeae3dc81ed04f33" translate="yes" xml:space="preserve">
          <source>'dialog': Show a modal dialog. This is the default.</source>
          <target state="translated">'dialog': 모달 대화 상자를 표시합니다. 이것이 기본값입니다.</target>
        </trans-unit>
        <trans-unit id="39dcb8e4f638788d1365e051c603c48737ac2e53" translate="yes" xml:space="preserve">
          <source>'dropdown': Shows a dropdown anchored to the picker view</source>
          <target state="translated">'드롭 다운': 선택기보기에 고정 된 드롭 다운을 표시합니다</target>
        </trans-unit>
        <trans-unit id="45f58d7807cc64e8d6ec568375d7da40a1f050e9" translate="yes" xml:space="preserve">
          <source>'highlight' (function) - &lt;code&gt;() =&amp;gt; void&lt;/code&gt;</source>
          <target state="translated">'highlight'(function)- &lt;code&gt;() =&amp;gt; void&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="db816252a5693150d328105a8db89fb13c1b8b24" translate="yes" xml:space="preserve">
          <source>'index' (number) - Item's index within the section.</source>
          <target state="translated">'index'(숫자)-섹션 내 항목의 색인입니다.</target>
        </trans-unit>
        <trans-unit id="c642c45216c6cbed3529a967c85529a58a3cc2a1" translate="yes" xml:space="preserve">
          <source>'index' (number) - The index to scroll to. Required.</source>
          <target state="translated">'index'(number)-스크롤 할 인덱스입니다. 필수입니다.</target>
        </trans-unit>
        <trans-unit id="a14c8a7ea7f3efdf7cb8e8a3d9abcdeb66f710db" translate="yes" xml:space="preserve">
          <source>'item' (object) - The item to scroll to. Required.</source>
          <target state="translated">'item'(object)-스크롤 할 항목입니다. 필수입니다.</target>
        </trans-unit>
        <trans-unit id="fa98fb71ef27ea6816ae9c03cfb44d49726a75d0" translate="yes" xml:space="preserve">
          <source>'item' (object) - the item object as specified in this section's &lt;code&gt;data&lt;/code&gt; key</source>
          <target state="translated">'item'(객체)-이 섹션의 &lt;code&gt;data&lt;/code&gt; 키에 지정된 항목 객체</target>
        </trans-unit>
        <trans-unit id="2c12ee08b902b0f6d497ec7298587d2530297a67" translate="yes" xml:space="preserve">
          <source>'itemIndex' (number) - Index within section for the item to scroll to. Required.</source>
          <target state="translated">'itemIndex'(숫자)-스크롤 할 항목의 섹션 내 색인입니다. 필수입니다.</target>
        </trans-unit>
        <trans-unit id="17729d9106d3148857c031b3bfa416898de67294" translate="yes" xml:space="preserve">
          <source>'newProps' (object)</source>
          <target state="translated">'newProps'(개체)</target>
        </trans-unit>
        <trans-unit id="390d94f0483c19da11361dc6770c6f6cfa1bb507" translate="yes" xml:space="preserve">
          <source>'none' (the default), drags do not dismiss the keyboard.</source>
          <target state="translated">'없음'(기본값), 드래그는 키보드를 닫지 않습니다.</target>
        </trans-unit>
        <trans-unit id="ce5fc3373fb2b5d6762adb4ddd5532c9322a84fa" translate="yes" xml:space="preserve">
          <source>'offset' (number) - The offset to scroll to. In case of &lt;code&gt;horizontal&lt;/code&gt; being true, the offset is the x-value, in any other case the offset is the y-value. Required.</source>
          <target state="translated">'offset'(숫자)-스크롤 할 오프셋입니다. 경우 &lt;code&gt;horizontal&lt;/code&gt; 진실되고, 상기는 Y 값 오프셋은 임의의 다른 경우에, x 값을 오프셋. 필수입니다.</target>
        </trans-unit>
        <trans-unit id="72e88f103828e43f392c7794b86f47ce2b261bd5" translate="yes" xml:space="preserve">
          <source>'on-drag', the keyboard is dismissed when a drag begins.</source>
          <target state="translated">'드래그'하면 드래그가 시작될 때 키보드가 사라집니다.</target>
        </trans-unit>
        <trans-unit id="fa8a393711eb000b296402f624c41108fe96c1a0" translate="yes" xml:space="preserve">
          <source>'section' (object) - The full section object as specified in &lt;code&gt;sections&lt;/code&gt;.</source>
          <target state="translated">'섹션'(개체) -에 규정 된 전체 섹션 개체 &lt;code&gt;sections&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="93d35f2c4610d0378709349e745788fd3a91a971" translate="yes" xml:space="preserve">
          <source>'sectionIndex' (number) - Index for section that contains the item to scroll to. Required.</source>
          <target state="translated">'sectionIndex'(number)-스크롤 할 항목이 포함 된 섹션의 인덱스입니다. 필수입니다.</target>
        </trans-unit>
        <trans-unit id="ab26e83d8aabe12740583a554fe7f5b50082b9e9" translate="yes" xml:space="preserve">
          <source>'select' (enum) - possible values are 'leading', 'trailing'</source>
          <target state="translated">'select'(enum)-가능한 값은 'leading', 'trailing'입니다.</target>
        </trans-unit>
        <trans-unit id="9fb974fe37d6a9ea8e96db2b6bfccdfb449bd1a8" translate="yes" xml:space="preserve">
          <source>'separators' (object) - An object with the following keys:</source>
          <target state="translated">'separators'(객체)-다음 키가있는 객체 :</target>
        </trans-unit>
        <trans-unit id="7f01225e79f79e854a25b83a5a2a29c60b6e3121" translate="yes" xml:space="preserve">
          <source>'spinner': Show a date picker in spinner mode.</source>
          <target state="translated">'스피너': 스피너 모드에서 날짜 선택기를 표시합니다.</target>
        </trans-unit>
        <trans-unit id="664788e769c8baf44bcc75df3d26c6a145143557" translate="yes" xml:space="preserve">
          <source>'spinner': Show a time picker in spinner mode.</source>
          <target state="translated">'스피너': 스피너 모드에서 시간 선택기를 표시합니다.</target>
        </trans-unit>
        <trans-unit id="4e5295820984ab784cfd97d72be99a4fe4e7b185" translate="yes" xml:space="preserve">
          <source>'unhighlight' (function) - &lt;code&gt;() =&amp;gt; void&lt;/code&gt;</source>
          <target state="translated">'unhighlight'(기능)- &lt;code&gt;() =&amp;gt; void&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="668d87cf507e475ad4823ceccc291b6b2472983e" translate="yes" xml:space="preserve">
          <source>'updateProps' (function) - &lt;code&gt;(select, newProps) =&amp;gt; void&lt;/code&gt;</source>
          <target state="translated">'updateProps'(기능)- &lt;code&gt;(select, newProps) =&amp;gt; void&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="215f6d8d762739ca5665682120065cb5ce5019c3" translate="yes" xml:space="preserve">
          <source>'viewOffset' (number) - A fixed number of pixels to offset the final target position, e.g. to compensate for sticky headers.</source>
          <target state="translated">'viewOffset'(숫자)-최종 대상 위치를 오프셋하기위한 고정 된 수의 픽셀입니다 (예 : 고정 헤더를 보정하기 위해).</target>
        </trans-unit>
        <trans-unit id="29804b845b0085ae71ee14d7df17aa4f87263393" translate="yes" xml:space="preserve">
          <source>'viewOffset' (number) - A fixed number of pixels to offset the final target position. Required.</source>
          <target state="translated">'viewOffset'(숫자)-최종 대상 위치를 오프셋 할 고정 픽셀 수입니다. 필수입니다.</target>
        </trans-unit>
        <trans-unit id="5bd35a8959eb182836884c7640925d44709d0777" translate="yes" xml:space="preserve">
          <source>'viewPosition' (number)</source>
          <target state="translated">'viewPosition'(숫자)</target>
        </trans-unit>
        <trans-unit id="404d820aec3a4df8341744fc8c827382aa94908d" translate="yes" xml:space="preserve">
          <source>'viewPosition' (number) - A value of &lt;code&gt;0&lt;/code&gt; places the item specified by index at the top, &lt;code&gt;1&lt;/code&gt; at the bottom, and &lt;code&gt;0.5&lt;/code&gt; centered in the middle.</source>
          <target state="translated">'viewPosition'(숫자)-값이 &lt;code&gt;0&lt;/code&gt; 이면 index로 지정된 항목이 맨 위에, 맨 아래에 &lt;code&gt;1&lt;/code&gt; , 가운데에 &lt;code&gt;0.5&lt;/code&gt; 가 배치됩니다.</target>
        </trans-unit>
        <trans-unit id="ec2d69203c7fc90701a15ed5002d3da6acb2796a" translate="yes" xml:space="preserve">
          <source>'viewableItems' (array of &lt;code&gt;ViewToken&lt;/code&gt;s)</source>
          <target state="translated">'viewableItems'( &lt;code&gt;ViewToken&lt;/code&gt; 의 배열 )</target>
        </trans-unit>
        <trans-unit id="06797d453d4b2f57f6c87d40d4a8780895b47b05" translate="yes" xml:space="preserve">
          <source>() =&amp;gt; renderable</source>
          <target state="translated">() =&amp;gt; 렌더링 가능</target>
        </trans-unit>
        <trans-unit id="3725fa6f06c2d492033a13b5e7a0071c5aad835b" translate="yes" xml:space="preserve">
          <source>(Android-only) Sets the elevation of a view, using Android's underlying &lt;a href=&quot;https://developer.android.com/training/material/shadows-clipping.html#Elevation&quot;&gt;elevation API&lt;/a&gt;. This adds a drop shadow to the item and affects z-order for overlapping views. Only supported on Android 5.0+, has no effect on earlier versions.</source>
          <target state="translated">(Android 만 해당) Android의 기본 &lt;a href=&quot;https://developer.android.com/training/material/shadows-clipping.html#Elevation&quot;&gt;고도 API를&lt;/a&gt; 사용하여 뷰의 고도를 설정합니다 . 항목에 그림자가 추가되고 겹치는 뷰의 z 순서에 영향을줍니다. Android 5.0 이상에서만 지원되며 이전 버전에는 영향을 미치지 않습니다.</target>
        </trans-unit>
        <trans-unit id="84b63dc52473b9a18dd26b1f495f7f89b0d0d4e3" translate="yes" xml:space="preserve">
          <source>(Apple TV only)* When set to true, this view will be focusable and navigable using the Apple TV remote.</source>
          <target state="translated">(Apple TV 만 해당) * true로 설정하면이보기는 Apple TV 리모컨을 사용하여 초점을 맞추고 탐색 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="095eb16bae39f2a55d42581cc38ebf5f9667414e" translate="yes" xml:space="preserve">
          <source>(Developer) React components are designed with strong isolation in mind: You should be able to drop a component anywhere in your application, trusting that as long as the props are the same, it will look and behave the same way. Text properties that could inherit from outside of the props would break this isolation.</source>
          <target state="translated">(개발자) React 구성 요소는 강력한 격리를 염두에두고 설계되었습니다. 소품이 동일하면 구성 요소가 모양과 동작이 동일하다는 것을 신뢰하면서 응용 프로그램의 어느 곳에 나 구성 요소를 놓을 수 있어야합니다. 소품 외부에서 상속 할 수있는 텍스트 속성은 이러한 격리를 손상시킵니다.</target>
        </trans-unit>
        <trans-unit id="d02a30f022e73e1089b4bc5b7e587346dad50369" translate="yes" xml:space="preserve">
          <source>(Implementor) The implementation of React Native is also simplified. We do not need to have a &lt;code&gt;fontFamily&lt;/code&gt; field on every single element, and we do not need to potentially traverse the tree up to the root every time we display a text node. The style inheritance is only encoded inside of the native Text component and doesn't leak to other components or the system itself.</source>
          <target state="translated">(구현 자) React Native의 구현도 단순화되었습니다. 우리는 할 필요가 없습니다 &lt;code&gt;fontFamily&lt;/code&gt; 모든 단일 요소에 필드를, 우리는 잠재적으로 루트에 우리는 텍스트 노드를 표시 할 때마다 트리를 통과 할 필요가 없습니다. 스타일 상속은 기본 Text 구성 요소 내에서만 인코딩되며 다른 구성 요소 나 시스템 자체로 유출되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="d0c1735060d5c254357f443bed4c62f3292e1ff3" translate="yes" xml:space="preserve">
          <source>(Others)</source>
          <target state="translated">(Others)</target>
        </trans-unit>
        <trans-unit id="10910835dac06afc048a9db2cb2a48700e640c88" translate="yes" xml:space="preserve">
          <source>(item: Item, index: number) =&amp;gt; string</source>
          <target state="translated">(항목 : 항목, 색인 : 숫자) =&amp;gt; 문자열</target>
        </trans-unit>
        <trans-unit id="1694290cc3aa691445ed23c8dad1d3bfb3ac73c9" translate="yes" xml:space="preserve">
          <source>(props) =&amp;gt; renderable</source>
          <target state="translated">(props) =&amp;gt; 렌더링 가능</target>
        </trans-unit>
        <trans-unit id="2a1c9522ebf541b245e58c52a98554a64982f5e1" translate="yes" xml:space="preserve">
          <source>(rowData, sectionID, rowID, highlightRow) =&amp;gt; renderable</source>
          <target state="translated">(rowData, sectionID, rowID, highlightRow) =&amp;gt; 렌더링 가능</target>
        </trans-unit>
        <trans-unit id="58749be7266ca21fdb0aa150d934debe861c5b31" translate="yes" xml:space="preserve">
          <source>(sectionData, sectionID) =&amp;gt; renderable</source>
          <target state="translated">(sectionData, sectionID) =&amp;gt; 렌더링 가능</target>
        </trans-unit>
        <trans-unit id="8a23bd569288081b820ae2643f404b5d89b784ec" translate="yes" xml:space="preserve">
          <source>(sectionID, rowID, adjacentRowHighlighted) =&amp;gt; renderable</source>
          <target state="translated">(sectionID, rowID, 인접 RowHighlighted) =&amp;gt; 렌더링 가능</target>
        </trans-unit>
        <trans-unit id="b67f1b9b89973a083cf51e10e9e25f592171fd9d" translate="yes" xml:space="preserve">
          <source>(visibleRows, changedRows) =&amp;gt; void</source>
          <target state="translated">(visibleRows, changedRows) =&amp;gt; 무효</target>
        </trans-unit>
        <trans-unit id="a8c84433ef1998dc1e29bbf549ee3f33dec9914e" translate="yes" xml:space="preserve">
          <source>) =&amp;gt; void</source>
          <target state="translated">) =&amp;gt; 무효</target>
        </trans-unit>
        <trans-unit id="1dab0023e499ad68b923d523a2973ec7a096a1cc" translate="yes" xml:space="preserve">
          <source>, result: ?Array&amp;lt;Array</source>
          <target state="translated">결과 :? Array &amp;lt;Array</target>
        </trans-unit>
        <trans-unit id="122fd022cee342765ceb21ce497963e20c816263" translate="yes" xml:space="preserve">
          <source>...and &lt;code&gt;button.js&lt;/code&gt; code contains:</source>
          <target state="translated">... 및 &lt;code&gt;button.js&lt;/code&gt; 코드에는 다음이 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="a308b9c52057380a14629a0e94f043a8d82659c2" translate="yes" xml:space="preserve">
          <source>...the packager will bundle and serve the image corresponding to device's screen density. For example, &lt;code&gt;check@2x.png&lt;/code&gt;, will be used on an iPhone 7, while&lt;code&gt;check@3x.png&lt;/code&gt; will be used on an iPhone 7 Plus or a Nexus 5. If there is no image matching the screen density, the closest best option will be selected.</source>
          <target state="translated">... 패 키기는 장치의 화면 밀도에 해당하는 이미지를 번들로 제공합니다. 예를 들어 &lt;code&gt;check@2x.png&lt;/code&gt; 는 iPhone 7에서, &lt;code&gt;check@3x.png&lt;/code&gt; 는 iPhone 7 Plus 또는 Nexus 5에서 사용됩니다. 화면 밀도와 일치하는 이미지가없는 경우 가장 가까운 최상의 옵션 선택됩니다.</target>
        </trans-unit>
        <trans-unit id="37ce78d86ede6d7664cd643617f88807f3bab7f2" translate="yes" xml:space="preserve">
          <source>// No-op for iOS, but used on the web. Should not be documented.</source>
          <target state="translated">// iOS 용 No-op이지만 웹에서 사용됩니다. 문서화해서는 안됩니다.</target>
        </trans-unit>
        <trans-unit id="3c15e7147ddeb59729812cef3637100a45cfb6ea" translate="yes" xml:space="preserve">
          <source>1. Add App Transport Security exception</source>
          <target state="translated">1. 앱 전송 보안 예외 추가</target>
        </trans-unit>
        <trans-unit id="f0a1f5ce1f015155cdb2dc8db5e1eddf87d040c3" translate="yes" xml:space="preserve">
          <source>1. Collecting a trace</source>
          <target state="translated">1. 추적 수집</target>
        </trans-unit>
        <trans-unit id="f42ef9e267f18289ac2df296b1cd09b2e90825f2" translate="yes" xml:space="preserve">
          <source>1. Create a &lt;code&gt;index.js&lt;/code&gt; file</source>
          <target state="translated">1. &lt;code&gt;index.js&lt;/code&gt; 파일을 만듭니다</target>
        </trans-unit>
        <trans-unit id="0e1c71302039e8d8fa01db25400203b290628c6f" translate="yes" xml:space="preserve">
          <source>1. Create an Event Path</source>
          <target state="translated">1. 이벤트 경로 생성</target>
        </trans-unit>
        <trans-unit id="0cd217a1b2ed69c9a9528569dcd58f35a0905ec1" translate="yes" xml:space="preserve">
          <source>1. Create the &lt;code&gt;ViewManager&lt;/code&gt; subclass</source>
          <target state="translated">1. &lt;code&gt;ViewManager&lt;/code&gt; 서브 클래스 생성</target>
        </trans-unit>
        <trans-unit id="e22fe5bda2f2d242d0773f526fd4c20f85bb6634" translate="yes" xml:space="preserve">
          <source>1. Enable App Transport Security</source>
          <target state="translated">1. 앱 전송 보안 활성화</target>
        </trans-unit>
        <trans-unit id="b7c9869a851cf7d123f8270adc28a67ff217cbcd" translate="yes" xml:space="preserve">
          <source>1. Enable Debugging over USB</source>
          <target state="translated">1. USB를 통한 디버깅 활성화</target>
        </trans-unit>
        <trans-unit id="e4771e44a3718eb70299910135c209f7eb6f5a63" translate="yes" xml:space="preserve">
          <source>1. Install Android Studio</source>
          <target state="translated">1. 안드로이드 스튜디오 설치</target>
        </trans-unit>
        <trans-unit id="74416e8346b3f1004ea8c96c3417587477d3f79e" translate="yes" xml:space="preserve">
          <source>1. Install Git</source>
          <target state="translated">1. 힘내 설치</target>
        </trans-unit>
        <trans-unit id="4edae085d1968c8fddc579bf25e708b4ea01b3f2" translate="yes" xml:space="preserve">
          <source>1. Installing the fork</source>
          <target state="translated">1. 포크 설치</target>
        </trans-unit>
        <trans-unit id="64ca7494da294cc46e3e6708e0470c1d878d0eab" translate="yes" xml:space="preserve">
          <source>1. Plug in your device via USB</source>
          <target state="translated">1. USB를 통해 장치를 연결하십시오</target>
        </trans-unit>
        <trans-unit id="2a35dfe19165d6d77e8b6e623d94820141e557c1" translate="yes" xml:space="preserve">
          <source>1. Run the packager</source>
          <target state="translated">1. 패키저 실행</target>
        </trans-unit>
        <trans-unit id="b517b18a319c3c4a79acece93402da0bdf97df99" translate="yes" xml:space="preserve">
          <source>1. Set up directory structure</source>
          <target state="translated">1. 디렉토리 구조 설정</target>
        </trans-unit>
        <trans-unit id="56ea9f197787bf49664a87675040527264eb77ee" translate="yes" xml:space="preserve">
          <source>1. Upgrade the &lt;code&gt;react-native&lt;/code&gt; dependency</source>
          <target state="translated">1. &lt;code&gt;react-native&lt;/code&gt; 종속성을 업그레이드하십시오.</target>
        </trans-unit>
        <trans-unit id="2bce1e6a19a9ca54a5372d9d211435a284090031" translate="yes" xml:space="preserve">
          <source>1. Wi-Fi network.</source>
          <target state="translated">1. Wi-Fi 네트워크.</target>
        </trans-unit>
        <trans-unit id="1174078d33f03ee53dabbc132d5d180d397bf5ca" translate="yes" xml:space="preserve">
          <source>100 character line length</source>
          <target state="translated">100 자 길이</target>
        </trans-unit>
        <trans-unit id="4aa9dc3c7bee9e3cd97593da8cd50329dad257a4" translate="yes" xml:space="preserve">
          <source>2 spaces for indentation (no tabs)</source>
          <target state="translated">들여 쓰기를위한 2 칸 (탭 없음)</target>
        </trans-unit>
        <trans-unit id="9c5de82f3d483da66b6cbe96eae94c5c023e9c7f" translate="yes" xml:space="preserve">
          <source>2. Add your React Native code</source>
          <target state="translated">2. React Native 코드 추가</target>
        </trans-unit>
        <trans-unit id="d2adfcce7e1e99f110be6b74d8f71353e9d082e9" translate="yes" xml:space="preserve">
          <source>2. Adding gradle dependencies</source>
          <target state="translated">2. gradle 의존성 추가</target>
        </trans-unit>
        <trans-unit id="5fb874387f630d6a5b86291b8304a08a4f64f624" translate="yes" xml:space="preserve">
          <source>2. Configure code signing</source>
          <target state="translated">2. 코드 서명 구성</target>
        </trans-unit>
        <trans-unit id="9994f05075f3b59b69ee6433e79b4613b574007e" translate="yes" xml:space="preserve">
          <source>2. Configure release scheme</source>
          <target state="translated">2. 릴리스 구성표 구성</target>
        </trans-unit>
        <trans-unit id="9eb39c760db01f22dede966f57dc455d18bde56a" translate="yes" xml:space="preserve">
          <source>2. Event Handler</source>
          <target state="translated">2. 이벤트 핸들러</target>
        </trans-unit>
        <trans-unit id="55762bb9cfb85020ca99cd5e6ae4894ac705641c" translate="yes" xml:space="preserve">
          <source>2. IP address</source>
          <target state="translated">2. IP 주소</target>
        </trans-unit>
        <trans-unit id="e02f64d9988cfa53d3bff02abb3a4a0b39d5fa20" translate="yes" xml:space="preserve">
          <source>2. Implement method &lt;code&gt;createViewInstance&lt;/code&gt;</source>
          <target state="translated">2. &lt;code&gt;createViewInstance&lt;/code&gt; 메소드 구현</target>
        </trans-unit>
        <trans-unit id="60de64df0432d843872cd8315cd887c0551427fb" translate="yes" xml:space="preserve">
          <source>2. Install JavaScript dependencies</source>
          <target state="translated">2. JavaScript 의존성 설치</target>
        </trans-unit>
        <trans-unit id="2c7c1cfd3702593e3554d9b3791bc21943ebf5bd" translate="yes" xml:space="preserve">
          <source>2. Install the &lt;code&gt;react-native-git-upgrade&lt;/code&gt; module</source>
          <target state="translated">2. &lt;code&gt;react-native-git-upgrade&lt;/code&gt; 모듈을 설치하십시오.</target>
        </trans-unit>
        <trans-unit id="be4f5e89f7184f15d6d8296a9e34a80a076ed3d2" translate="yes" xml:space="preserve">
          <source>2. Install the Android SDK</source>
          <target state="translated">2. 안드로이드 SDK 설치</target>
        </trans-unit>
        <trans-unit id="66bef5ac7e4b88c0c01d644a8b14d54c0657749e" translate="yes" xml:space="preserve">
          <source>2. Plug in your device via USB</source>
          <target state="translated">2. USB를 통해 장치를 연결하십시오</target>
        </trans-unit>
        <trans-unit id="5b3aaf97f137c974718636106399fb12422538a1" translate="yes" xml:space="preserve">
          <source>2. Reading the trace</source>
          <target state="translated">2. 흔적을 읽고</target>
        </trans-unit>
        <trans-unit id="f72b8a27b0b55465d185d8094c3f2fd8de3a79c7" translate="yes" xml:space="preserve">
          <source>2. Run the app</source>
          <target state="translated">2. 응용 프로그램을 실행</target>
        </trans-unit>
        <trans-unit id="43b366d2deeb9c20614f1a0326e7efb97460a51e" translate="yes" xml:space="preserve">
          <source>2. Run the packager</source>
          <target state="translated">2. 패키저를 실행하십시오</target>
        </trans-unit>
        <trans-unit id="97f1a60a650908515decfee4758150778a7d0e48" translate="yes" xml:space="preserve">
          <source>2. Upgrade your project templates</source>
          <target state="translated">2. 프로젝트 템플릿 업그레이드</target>
        </trans-unit>
        <trans-unit id="0e5b898cee6a60f00da6d4242ccecb976bcdde14" translate="yes" xml:space="preserve">
          <source>3. Adding the &lt;code&gt;:ReactAndroid&lt;/code&gt; project</source>
          <target state="translated">3. &lt;code&gt;:ReactAndroid&lt;/code&gt; 프로젝트 추가</target>
        </trans-unit>
        <trans-unit id="e195927ac074c5f710b24c602a1d0add0ebc512a" translate="yes" xml:space="preserve">
          <source>3. Build and Run your app</source>
          <target state="translated">3. 앱 빌드 및 실행</target>
        </trans-unit>
        <trans-unit id="ae5162a46f58d2ab79978380c03db84d5ccd4c15" translate="yes" xml:space="preserve">
          <source>3. Configure app to use static bundle</source>
          <target state="translated">3. 정적 번들을 사용하도록 앱 구성</target>
        </trans-unit>
        <trans-unit id="30e437883105300be1aa0a618093c3ed9c31b871" translate="yes" xml:space="preserve">
          <source>3. Configure permissions for development error overlay</source>
          <target state="translated">3. 개발 오류 오버레이에 대한 권한 구성</target>
        </trans-unit>
        <trans-unit id="c0de8dfe190ccc00ebbdeb3fc3a2b4eca7cc9d4c" translate="yes" xml:space="preserve">
          <source>3. Configure the ANDROID_HOME environment variable</source>
          <target state="translated">3. ANDROID_HOME 환경 변수를 구성하십시오.</target>
        </trans-unit>
        <trans-unit id="6fb5e7bf7c136e4f503eff46336d62e3fd6bddf8" translate="yes" xml:space="preserve">
          <source>3. Expose view property setters using &lt;code&gt;@ReactProp&lt;/code&gt; (or &lt;code&gt;@ReactPropGroup&lt;/code&gt;) annotation</source>
          <target state="translated">3. &lt;code&gt;@ReactProp&lt;/code&gt; (또는 &lt;code&gt;@ReactPropGroup&lt;/code&gt; ) 주석을 사용하여 뷰 속성 설정 기 노출</target>
        </trans-unit>
        <trans-unit id="ad7c8c165e5ec4ae73fc6d87f1d6da5cb1730b59" translate="yes" xml:space="preserve">
          <source>3. Find your process</source>
          <target state="translated">3. 프로세스 찾기</target>
        </trans-unit>
        <trans-unit id="6bb91b2c182d5fd2f10c002cd6153a11f404f716" translate="yes" xml:space="preserve">
          <source>3. Install CocoaPods</source>
          <target state="translated">3. CocoaPods 설치</target>
        </trans-unit>
        <trans-unit id="a083dedf6422b430a1c662867fc3a774ec87aca7" translate="yes" xml:space="preserve">
          <source>3. Network/router configuration</source>
          <target state="translated">3. 네트워크 / 라우터 구성</target>
        </trans-unit>
        <trans-unit id="79dd5c7f66be7bfb2bd824724c8b0feafd57a6b4" translate="yes" xml:space="preserve">
          <source>3. Run the app</source>
          <target state="translated">3. 응용 프로그램을 실행</target>
        </trans-unit>
        <trans-unit id="6f2f469b1d769ace8a324ed56d223f5204764e2c" translate="yes" xml:space="preserve">
          <source>3. Run the command</source>
          <target state="translated">3. 명령을 실행</target>
        </trans-unit>
        <trans-unit id="9fce02b6d0843a910e4d81844c56fbee0e5c5a94" translate="yes" xml:space="preserve">
          <source>3. Run your app</source>
          <target state="translated">3. 앱 실행</target>
        </trans-unit>
        <trans-unit id="b9153c74e05ad30caa9b3dbcc65f0fd1248662a6" translate="yes" xml:space="preserve">
          <source>3. Wire Up</source>
          <target state="translated">3. 와이어 업</target>
        </trans-unit>
        <trans-unit id="c5bdb1505e412e41588d6e3076e0d3faa4a5c433" translate="yes" xml:space="preserve">
          <source>4. Build app for release</source>
          <target state="translated">4. 출시 용 앱 빌드</target>
        </trans-unit>
        <trans-unit id="e33105543cc50cf75c28020f23db907880edeb19" translate="yes" xml:space="preserve">
          <source>4. Making 3rd-party modules use your fork</source>
          <target state="translated">4. 포크를 사용하는 타사 모듈 만들기</target>
        </trans-unit>
        <trans-unit id="4cad682dcff535850c02ca7ec43e00aa685122b3" translate="yes" xml:space="preserve">
          <source>4. Register the &lt;code&gt;ViewManager&lt;/code&gt;</source>
          <target state="translated">4. &lt;code&gt;ViewManager&lt;/code&gt; 를 등록하십시오</target>
        </trans-unit>
        <trans-unit id="a488696b4f67585f352e88f9cf4c137e27d96156" translate="yes" xml:space="preserve">
          <source>4. Resolve the conflicts</source>
          <target state="translated">4. 갈등 해결</target>
        </trans-unit>
        <trans-unit id="ccf860b4b86ed371538e2d3858196b29d710cda7" translate="yes" xml:space="preserve">
          <source>5. Implement the JavaScript module</source>
          <target state="translated">5. 자바 스크립트 모듈 구현</target>
        </trans-unit>
        <trans-unit id="8128646ca19941278cbb64800995b0349505cdbe" translate="yes" xml:space="preserve">
          <source>80 character line length</source>
          <target state="translated">80 자 길이</target>
        </trans-unit>
        <trans-unit id="1a2238313638e0052638b0adf46c3bbb1c154229" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;animated#createanimatedcomponent&quot;&gt;&lt;code&gt;createAnimatedComponent()&lt;/code&gt;&lt;/a&gt; can be used to make a component animatable.</source>
          <target state="translated">&lt;a href=&quot;animated#createanimatedcomponent&quot;&gt; &lt;code&gt;createAnimatedComponent()&lt;/code&gt; &lt;/a&gt; 를 사용하여 구성 요소를 애니메이션화 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="92f68930f10f48ad766545daf49f8ac3ab2d4d86" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;animated#decay&quot;&gt;&lt;code&gt;Animated.decay()&lt;/code&gt;&lt;/a&gt; starts with an initial velocity and gradually slows to a stop.</source>
          <target state="translated">&lt;a href=&quot;animated#decay&quot;&gt; &lt;code&gt;Animated.decay()&lt;/code&gt; &lt;/a&gt; 는 초기 속도로 시작하여 점차 정지합니다.</target>
        </trans-unit>
        <trans-unit id="a807a5fe8afa1414e4295ea78ee69c8488ab67f6" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;animated#delay&quot;&gt;&lt;code&gt;Animated.delay()&lt;/code&gt;&lt;/a&gt; starts an animation after a given delay.</source>
          <target state="translated">&lt;a href=&quot;animated#delay&quot;&gt; &lt;code&gt;Animated.delay()&lt;/code&gt; &lt;/a&gt; 는 주어진 지연 후에 애니메이션을 시작합니다.</target>
        </trans-unit>
        <trans-unit id="3594b5ad2cced8f77b46632f477b322e5ed3e366" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;animated#interpolate&quot;&gt;&lt;code&gt;interpolate()&lt;/code&gt;&lt;/a&gt; supports multiple range segments as well, which is handy for defining dead zones and other handy tricks. For example, to get an negation relationship at -300 that goes to 0 at -100, then back up to 1 at 0, and then back down to zero at 100 followed by a dead-zone that remains at 0 for everything beyond that, you could do:</source>
          <target state="translated">&lt;a href=&quot;animated#interpolate&quot;&gt; &lt;code&gt;interpolate()&lt;/code&gt; &lt;/a&gt; 는 다중 범위 세그먼트도 지원하므로 데드 존 및 기타 편리한 트릭을 정의하는 데 편리합니다. 예를 들어 -300에서 -100에서 0으로, 0에서 1로, 100에서 0으로, 그 이후의 모든 항목에 대해 0으로 유지되는 데드 존 (dead-zone)으로 돌아가는 부정 관계를 얻으려면, 당신은 할 수 있습니다 :</target>
        </trans-unit>
        <trans-unit id="064ee5d8882f73e712c3a633cb8c0e3ca7239ef6" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;animated#parallel&quot;&gt;&lt;code&gt;Animated.parallel()&lt;/code&gt;&lt;/a&gt; starts a number of animations at the same time.</source>
          <target state="translated">&lt;a href=&quot;animated#parallel&quot;&gt; &lt;code&gt;Animated.parallel()&lt;/code&gt; &lt;/a&gt; 은 여러 애니메이션을 동시에 시작합니다.</target>
        </trans-unit>
        <trans-unit id="02ffd063dff89ff0b14d3eaceb5af6602fa10e6e" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;animated#sequence&quot;&gt;&lt;code&gt;Animated.sequence()&lt;/code&gt;&lt;/a&gt; starts the animations in order, waiting for each to complete before starting the next.</source>
          <target state="translated">&lt;a href=&quot;animated#sequence&quot;&gt; &lt;code&gt;Animated.sequence()&lt;/code&gt; &lt;/a&gt; 는 애니메이션을 순서대로 시작하여 다음이 시작되기 전에 각 애니메이션이 완료 될 때까지 기다립니다.</target>
        </trans-unit>
        <trans-unit id="c65a4cefd4578616301a2778b545a2bb5991ce10" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;animated#spring&quot;&gt;&lt;code&gt;Animated.spring()&lt;/code&gt;&lt;/a&gt; provides a simple spring physics model.</source>
          <target state="translated">&lt;a href=&quot;animated#spring&quot;&gt; &lt;code&gt;Animated.spring()&lt;/code&gt; &lt;/a&gt; 은 간단한 스프링 물리 모델을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="2fbec3f3483ce2a1582c8e4889536e9e827ec4fd" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;animated#stagger&quot;&gt;&lt;code&gt;Animated.stagger()&lt;/code&gt;&lt;/a&gt; starts animations in order and in parallel, but with successive delays.</source>
          <target state="translated">&lt;a href=&quot;animated#stagger&quot;&gt; &lt;code&gt;Animated.stagger()&lt;/code&gt; &lt;/a&gt; 는 애니메이션을 순서와 병렬로 시작하지만 연속 지연됩니다.</target>
        </trans-unit>
        <trans-unit id="0ef2fc06940efaa33449bf07e8cd41a293737232" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;animated#timing&quot;&gt;&lt;code&gt;Animated.timing()&lt;/code&gt;&lt;/a&gt; animates a value over time using &lt;a href=&quot;easing&quot;&gt;easing functions&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;animated#timing&quot;&gt; &lt;code&gt;Animated.timing()&lt;/code&gt; &lt;/a&gt; 은&lt;a href=&quot;easing&quot;&gt; 여유 함수를&lt;/a&gt; 사용하여 시간이 지남에 따라 값을 애니메이션 합니다 .</target>
        </trans-unit>
        <trans-unit id="66a72bc65f21d13ce334c0da6147ac55cf3a3079" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;animated#value&quot;&gt;&lt;code&gt;Animated.Value()&lt;/code&gt;&lt;/a&gt; for single values</source>
          <target state="translated">&lt;a href=&quot;animated#value&quot;&gt; &lt;code&gt;Animated.Value()&lt;/code&gt; &lt;/a&gt;단일 값에 대한 Animated.Value ()</target>
        </trans-unit>
        <trans-unit id="e5bd1624f8a26aa6fcdaadfdfe2236ed6f5e8f53" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;animated#valuexy&quot;&gt;&lt;code&gt;Animated.ValueXY()&lt;/code&gt;&lt;/a&gt; for vectors</source>
          <target state="translated">&lt;a href=&quot;animated#valuexy&quot;&gt; &lt;code&gt;Animated.ValueXY()&lt;/code&gt; &lt;/a&gt;벡터에 대한 Animated.ValueXY ()</target>
        </trans-unit>
        <trans-unit id="b3d0cf5cedca9e2f4f2308c99e6acb669eb7d03b" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;button&quot;&gt;Button&lt;/a&gt; provides a basic button component that is rendered nicely on all platforms. The minimal example to display a button looks like this:</source>
          <target state="translated">&lt;a href=&quot;button&quot;&gt;Button&lt;/a&gt; 은 모든 플랫폼에서 훌륭하게 렌더링되는 기본 버튼 구성 요소를 제공합니다. 버튼을 표시하는 최소한의 예는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="cf753f6a7eace68449d1abfdd8aaf4404e988790" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;easing#back&quot;&gt;&lt;code&gt;back&lt;/code&gt;&lt;/a&gt; provides a simple animation where the object goes slightly back before moving forward</source>
          <target state="translated">&lt;a href=&quot;easing#back&quot;&gt; &lt;code&gt;back&lt;/code&gt; &lt;/a&gt; 이동하면 객체가 약간 뒤로 이동하는 간단한 애니메이션을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="6757caa3994cf6516f4348a59951a8b8dfb7d053" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;easing#bezier&quot;&gt;&lt;code&gt;bezier&lt;/code&gt;&lt;/a&gt; provides a cubic bezier curve</source>
          <target state="translated">&lt;a href=&quot;easing#bezier&quot;&gt; &lt;code&gt;bezier&lt;/code&gt; &lt;/a&gt; 는 3 차 베 지어 곡선을 제공합니다</target>
        </trans-unit>
        <trans-unit id="0f6775b4f8784c53f3d0f130f93103c3aadfe82c" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;easing#bounce&quot;&gt;&lt;code&gt;bounce&lt;/code&gt;&lt;/a&gt; provides a bouncing animation</source>
          <target state="translated">&lt;a href=&quot;easing#bounce&quot;&gt; &lt;code&gt;bounce&lt;/code&gt; &lt;/a&gt; 는 튀는 애니메이션을 제공합니다</target>
        </trans-unit>
        <trans-unit id="9110c659fa7f3c65a5a86682ea939f29e74c0597" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;easing#circle&quot;&gt;&lt;code&gt;circle&lt;/code&gt;&lt;/a&gt; provides a circular function</source>
          <target state="translated">&lt;a href=&quot;easing#circle&quot;&gt; &lt;code&gt;circle&lt;/code&gt; &lt;/a&gt; 은 원형 기능을 제공합니다</target>
        </trans-unit>
        <trans-unit id="ded9971857233cdc7c27eb22413349ee882e094c" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;easing#ease&quot;&gt;&lt;code&gt;ease&lt;/code&gt;&lt;/a&gt; provides a simple inertial animation</source>
          <target state="translated">&lt;a href=&quot;easing#ease&quot;&gt; &lt;code&gt;ease&lt;/code&gt; &lt;/a&gt; 는 간단한 관성 애니메이션을 제공합니다</target>
        </trans-unit>
        <trans-unit id="83f6066918cba4706067b7c4df8b84c064c679b7" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;easing#elastic&quot;&gt;&lt;code&gt;elastic&lt;/code&gt;&lt;/a&gt; provides a simple spring interaction</source>
          <target state="translated">&lt;a href=&quot;easing#elastic&quot;&gt; &lt;code&gt;elastic&lt;/code&gt; &lt;/a&gt; 은 간단한 스프링 상호 작용을 제공합니다</target>
        </trans-unit>
        <trans-unit id="91d0bd59d95b07f2b04e2abe111faf7cc27e9b7e" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;easing#exp&quot;&gt;&lt;code&gt;exp&lt;/code&gt;&lt;/a&gt; provides an exponential function</source>
          <target state="translated">&lt;a href=&quot;easing#exp&quot;&gt; &lt;code&gt;exp&lt;/code&gt; &lt;/a&gt; 는 지수 함수를 제공합니다</target>
        </trans-unit>
        <trans-unit id="1c53aeab229762fd588842a26c245608b087fd42" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;easing#in&quot;&gt;&lt;code&gt;in&lt;/code&gt;&lt;/a&gt; runs an easing function forwards</source>
          <target state="translated">&lt;a href=&quot;easing#in&quot;&gt; &lt;code&gt;in&lt;/code&gt; &lt;/a&gt; 여유 기능을 앞으로 실행</target>
        </trans-unit>
        <trans-unit id="1ae7df9d4435a84333c0b0e4bc4079f4bb5efc6c" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;easing#inout&quot;&gt;&lt;code&gt;inOut&lt;/code&gt;&lt;/a&gt; makes any easing function symmetrical</source>
          <target state="translated">&lt;a href=&quot;easing#inout&quot;&gt; &lt;code&gt;inOut&lt;/code&gt; &lt;/a&gt; 은 여유 함수를 대칭으로 만듭니다.</target>
        </trans-unit>
        <trans-unit id="0a883d34d1b1decb7113501e639b20efdb65adc5" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;easing#out&quot;&gt;&lt;code&gt;out&lt;/code&gt;&lt;/a&gt; runs an easing function backwards</source>
          <target state="translated">&lt;a href=&quot;easing#out&quot;&gt; &lt;code&gt;out&lt;/code&gt; &lt;/a&gt; 여유 기능을 뒤로 실행합니다</target>
        </trans-unit>
        <trans-unit id="398168e2afbddc4b69a4e7807a25cf88ebe69fbf" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;easing#sin&quot;&gt;&lt;code&gt;sin&lt;/code&gt;&lt;/a&gt; provides a sinusoidal function</source>
          <target state="translated">&lt;a href=&quot;easing#sin&quot;&gt; &lt;code&gt;sin&lt;/code&gt; &lt;/a&gt; 정현파 기능을 제공합니다</target>
        </trans-unit>
        <trans-unit id="c6104e626da4667c0d92ac46c5ceb25887862148" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://babeljs.io/docs/learn-es2015/#arrows&quot;&gt;Arrow functions&lt;/a&gt;: &lt;code&gt;&amp;lt;C onPress={() =&amp;gt; this.setState({pressed: true})}&lt;/code&gt;</source>
          <target state="translated">&lt;a href=&quot;http://babeljs.io/docs/learn-es2015/#arrows&quot;&gt;화살표 함수&lt;/a&gt; : &lt;code&gt;&amp;lt;C onPress={() =&amp;gt; this.setState({pressed: true})}&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="386abb514bd7fa1ae8b0ce3d20f9198c4e76a1fb" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://babeljs.io/docs/learn-es2015/#classes&quot;&gt;Classes&lt;/a&gt;: &lt;code&gt;class C extends React.Component { render() { return &amp;lt;View /&amp;gt;; } }&lt;/code&gt;</source>
          <target state="translated">&lt;a href=&quot;http://babeljs.io/docs/learn-es2015/#classes&quot;&gt;클래스&lt;/a&gt; : &lt;code&gt;class C extends React.Component { render() { return &amp;lt;View /&amp;gt;; } }&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="166de4327bb5305a72ef43bc538b64b3067520cb" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://babeljs.io/docs/learn-es2015/#default-rest-spread&quot;&gt;Call spread&lt;/a&gt;: &lt;code&gt;Math.max(...array);&lt;/code&gt;</source>
          <target state="translated">&lt;a href=&quot;http://babeljs.io/docs/learn-es2015/#default-rest-spread&quot;&gt;콜 스프레드&lt;/a&gt; : &lt;code&gt;Math.max(...array);&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5675829d9957604c68024baceb3c6b1e3f736774" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://babeljs.io/docs/learn-es2015/#destructuring&quot;&gt;Destructuring&lt;/a&gt;: &lt;code&gt;var {isActive, style} = this.props;&lt;/code&gt;</source>
          <target state="translated">&lt;a href=&quot;http://babeljs.io/docs/learn-es2015/#destructuring&quot;&gt;파괴&lt;/a&gt; : &lt;code&gt;var {isActive, style} = this.props;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="38e718897aedc2a8fd945fff683e3da3edefc75f" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://babeljs.io/docs/learn-es2015/#enhanced-object-literals&quot;&gt;Computed Properties&lt;/a&gt;: &lt;code&gt;var key = 'abc'; var obj = {[key]: 10};&lt;/code&gt;</source>
          <target state="translated">&lt;a href=&quot;http://babeljs.io/docs/learn-es2015/#enhanced-object-literals&quot;&gt;계산 된 속성&lt;/a&gt; : &lt;code&gt;var key = 'abc'; var obj = {[key]: 10};&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b83a27e53e966e0752649a4c07be87539792a118" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://babeljs.io/docs/learn-es2015/#enhanced-object-literals&quot;&gt;Object Concise Method&lt;/a&gt;: &lt;code&gt;var obj = { method() { return 10; } };&lt;/code&gt;</source>
          <target state="translated">&lt;a href=&quot;http://babeljs.io/docs/learn-es2015/#enhanced-object-literals&quot;&gt;객체 간결한 메소드&lt;/a&gt; : &lt;code&gt;var obj = { method() { return 10; } };&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e4461d381467a631dbabe2376ded1ea3eec97c96" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://babeljs.io/docs/learn-es2015/#enhanced-object-literals&quot;&gt;Object Short Notation&lt;/a&gt;: &lt;code&gt;var name = 'vjeux'; var obj = { name };&lt;/code&gt;</source>
          <target state="translated">&lt;a href=&quot;http://babeljs.io/docs/learn-es2015/#enhanced-object-literals&quot;&gt;객체 짧은 표기법&lt;/a&gt; : &lt;code&gt;var name = 'vjeux'; var obj = { name };&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="cc07add00548e2b0432051b51bc7676989142665" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://babeljs.io/docs/learn-es2015/#modules&quot;&gt;Modules&lt;/a&gt;: &lt;code&gt;import React, { Component } from 'react';&lt;/code&gt;</source>
          <target state="translated">&lt;a href=&quot;http://babeljs.io/docs/learn-es2015/#modules&quot;&gt;모듈&lt;/a&gt; : &lt;code&gt;import React, { Component } from 'react';&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="bc8263315e4d74233620154e9e122c5d1c1a4a99" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://babeljs.io/docs/learn-es2015/#template-strings&quot;&gt;Template Literals&lt;/a&gt;: &lt;code&gt;var who = 'world'; var str = `Hello ${who}`;&lt;/code&gt;</source>
          <target state="translated">&lt;a href=&quot;http://babeljs.io/docs/learn-es2015/#template-strings&quot;&gt;템플릿 리터럴&lt;/a&gt; : &lt;code&gt;var who = 'world'; var str = `Hello ${who}`;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="9313bb66a336bc9f9bfa64921eaf4ca224988bfb" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://cocoapods.org&quot;&gt;CocoaPods&lt;/a&gt; is a package management tool for iOS and macOS development. We use it to add the actual React Native framework code locally into your current project.</source>
          <target state="translated">&lt;a href=&quot;http://cocoapods.org&quot;&gt;CocoaPods&lt;/a&gt; 는 iOS 및 macOS 개발을위한 패키지 관리 도구입니다. 실제 React Native 프레임 워크 코드를 현재 프로젝트에 로컬로 추가하는 데 사용합니다.</target>
        </trans-unit>
        <trans-unit id="8fce302d6ed6d4cf692bda1f39cc62ba417795c2" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://flowtype.org/&quot;&gt;Flow&lt;/a&gt;: &lt;code&gt;function foo(x: ?number): string {}&lt;/code&gt;</source>
          <target state="translated">&lt;a href=&quot;http://flowtype.org/&quot;&gt;흐름&lt;/a&gt; : &lt;code&gt;function foo(x: ?number): string {}&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="68caeb98ca3b7ee0895e87be64674d6a1a11ac78" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://babeljs.io/docs/learn-es2015/#let-const&quot;&gt;Block scoping&lt;/a&gt;: &lt;code&gt;let greeting = 'hi';&lt;/code&gt;</source>
          <target state="translated">&lt;a href=&quot;https://babeljs.io/docs/learn-es2015/#let-const&quot;&gt;범위 지정 차단&lt;/a&gt; : &lt;code&gt;let greeting = 'hi';&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="6f39e102dbf6964a4286c6d5d5195995bb641add" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://babeljs.io/docs/learn-es2015/#let-const&quot;&gt;Constants&lt;/a&gt;: &lt;code&gt;const answer = 42;&lt;/code&gt;</source>
          <target state="translated">&lt;a href=&quot;https://babeljs.io/docs/learn-es2015/#let-const&quot;&gt;상수&lt;/a&gt; : &lt;code&gt;const answer = 42;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="2ef452f1782fe7e745d5da8f31633cce5649a814" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://developer.android.com/studio/index.html&quot;&gt;Download and install Android Studio&lt;/a&gt;. Choose a &quot;Custom&quot; setup when prompted to select an installation type. Make sure the boxes next to all of the following are checked:</source>
          <target state="translated">&lt;a href=&quot;https://developer.android.com/studio/index.html&quot;&gt;Android Studio를 다운로드하여 설치하십시오&lt;/a&gt; . 설치 유형을 선택하라는 메시지가 표시되면 &quot;사용자 정의&quot;설정을 선택하십시오. 다음 옆의 상자가 모두 선택되어 있는지 확인하십시오.</target>
        </trans-unit>
        <trans-unit id="52093488d8aa24c42b2323dbe14ac4269ee4aad7" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of&quot;&gt;for...of&lt;/a&gt;: &lt;code&gt;for (var num of [1, 2, 3]) {}&lt;/code&gt;</source>
          <target state="translated">&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of&quot;&gt;for ... of&lt;/a&gt; : &lt;code&gt;for (var num of [1, 2, 3]) {}&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c5220ecff86bb4743806cdccf1aca79310a7bbc2" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://discord.gg/0ZcbPKXt5bZjGY5n&quot;&gt;Reactiflux&lt;/a&gt; is a Discord chat where a lot of React-related discussion happens, including React Native. Discord is just like Slack except it works better for open source projects with a zillion contributors. Check out the #react-native channel.</source>
          <target state="translated">&lt;a href=&quot;https://discord.gg/0ZcbPKXt5bZjGY5n&quot;&gt;Reactiflux&lt;/a&gt; 는 React Native를 포함하여 많은 React 관련 토론이 이루어지는 Discord 채팅입니다. 불협화음은 슬랙과 비슷합니다. 단골 기여자가있는 오픈 소스 프로젝트에 더 효과적입니다. # react-native 채널을 확인하십시오.</target>
        </trans-unit>
        <trans-unit id="91586fd799e2ae47a04a0cd563a3d0036cb4f3f2" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://docs.expo.io&quot;&gt;Expo&lt;/a&gt; is a development environment plus application that focuses on letting you build React Native apps in the Expo development environment, without ever touching Xcode or Android Studio. If you wish React Native was even more JavaScripty and webby, check out Expo.</source>
          <target state="translated">&lt;a href=&quot;https://docs.expo.io&quot;&gt;Expo&lt;/a&gt; 는 Xcode 또는 Android Studio를 건드리지 않고 Expo 개발 환경에서 React Native 앱을 빌드 할 수 있도록하는 개발 환경 및 애플리케이션입니다. React Native가 JavaScript 및 웹보다 훨씬 더 많은 것을 원한다면 Expo를 확인하십시오.</target>
        </trans-unit>
        <trans-unit id="3331b312f2a57317a3a563576633ce2bcfdbc7c9" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://facebook.github.io/watchman&quot;&gt;Watchman&lt;/a&gt; is a tool by Facebook for watching changes in the filesystem. It is highly recommended you install it for better performance.</source>
          <target state="translated">&lt;a href=&quot;https://facebook.github.io/watchman&quot;&gt;Watchman&lt;/a&gt; 은 Facebook에서 파일 시스템의 변경 사항을 보는 도구입니다. 더 나은 성능을 위해 설치하는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="d0c62232de56ec2d3fcffa6882c15a06d7b88346" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://facebook.github.io/watchman/docs/install.html&quot;&gt;Watchman&lt;/a&gt; is a tool by Facebook for watching changes in the filesystem. It is highly recommended you install it for better performance, but it's alright to skip this if you find the process to be tedious.</source>
          <target state="translated">&lt;a href=&quot;https://facebook.github.io/watchman/docs/install.html&quot;&gt;Watchman&lt;/a&gt; 은 Facebook에서 파일 시스템의 변경 사항을 보는 도구입니다. 더 나은 성능을 위해 설치하는 것이 좋지만 프로세스가 지루한 경우에는 건너 뛰어도됩니다.</target>
        </trans-unit>
        <trans-unit id="409978e60800b80cb711c36fc3dd80b7ffdf2d68" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/facebook/react-native/blob/master/Libraries/Components/Touchable/TouchableOpacity.js&quot;&gt;TouchableOpacity&lt;/a&gt; uses &lt;code&gt;setNativeProps&lt;/code&gt; internally to update the opacity of its child component:</source>
          <target state="translated">&lt;a href=&quot;https://github.com/facebook/react-native/blob/master/Libraries/Components/Touchable/TouchableOpacity.js&quot;&gt;TouchableOpacity&lt;/a&gt; 는 내부적으로 &lt;code&gt;setNativeProps&lt;/code&gt; 를 사용 하여 하위 구성 요소의 불투명도를 업데이트합니다.</target>
        </trans-unit>
        <trans-unit id="b4a9f4caf15f6ce804d085f883a959dd4c67f5c5" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/facebook/react-native/issues/12793&quot;&gt;ListView scrolling&lt;/a&gt;. The issue can be easily worked around by setting &lt;code&gt;removeClippedSubviews&lt;/code&gt; to false in ListView and similar components. For more discussion of this issue, see &lt;a href=&quot;https://github.com/facebook/react-native/pull/12944&quot;&gt;this PR&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/facebook/react-native/issues/12793&quot;&gt;ListView 스크롤&lt;/a&gt; . ListView 및 유사한 구성 요소에서 &lt;code&gt;removeClippedSubviews&lt;/code&gt; 를 false 로 설정하면이 문제를 쉽게 해결할 수 있습니다 . 이 문제에 대한 자세한 내용은 &lt;a href=&quot;https://github.com/facebook/react-native/pull/12944&quot;&gt;이 PR을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="e2cc49dc5ff03915051483fde92cdb134eb565cd" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/infinitered/ignite&quot;&gt;Ignite&lt;/a&gt; is a starter kit that uses Redux and a few different common UI libraries. It has a CLI to generate apps, components, and containers. If you like all of the individual tech choices, Ignite could be perfect for you.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/infinitered/ignite&quot;&gt;Ignite&lt;/a&gt; 는 Redux와 몇 가지 다른 공통 UI 라이브러리를 사용하는 스타터 키트입니다. 앱, 구성 요소 및 컨테이너를 생성하는 CLI가 있습니다. 개별 기술 선택을 모두 좋아한다면 Ignite가 완벽 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="06b8c1c55f4bb4f178484399ff7133b1be3300ae" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/jeffmo/es-trailing-function-commas&quot;&gt;Function Trailing Comma&lt;/a&gt;: &lt;code&gt;function f(a, b, c,) { }&lt;/code&gt;</source>
          <target state="translated">&lt;a href=&quot;https://github.com/jeffmo/es-trailing-function-commas&quot;&gt;함수 후행 쉼표&lt;/a&gt; : &lt;code&gt;function f(a, b, c,) { }&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="4ffaa9f3398712ab1629ac0377a21a9b1f25a9ce" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/react-community/create-react-native-app&quot;&gt;Create React Native App&lt;/a&gt; is the easiest way to start building a new React Native application. It allows you to start a project without installing or configuring any tools to build native code - no Xcode or Android Studio installation required (see &lt;a href=&quot;getting-started#caveats&quot;&gt;Caveats&lt;/a&gt;).</source>
          <target state="translated">&lt;a href=&quot;https://github.com/react-community/create-react-native-app&quot;&gt;React Native 앱 생성&lt;/a&gt; 은 새로운 React Native 애플리케이션을 구축하는 가장 쉬운 방법입니다. Xcode 또는 Android Studio 설치가 필요하지 않은 네이티브 코드를 빌드하기위한 도구를 설치하거나 구성하지 않고 프로젝트를 시작할 수 있습니다 ( &lt;a href=&quot;getting-started#caveats&quot;&gt;주의 사항&lt;/a&gt; 참조 ).</target>
        </trans-unit>
        <trans-unit id="c6fab1a30f64caa8c29a3cf88fa77364f1f5ffb4" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/sebmarkbage/ecmascript-rest-spread&quot;&gt;Object Spread&lt;/a&gt;: &lt;code&gt;var extended = { ...obj, a: 10 };&lt;/code&gt;</source>
          <target state="translated">&lt;a href=&quot;https://github.com/sebmarkbage/ecmascript-rest-spread&quot;&gt;개체 확산&lt;/a&gt; : &lt;code&gt;var extended = { ...obj, a: 10 };&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="1074d13e8c1a20671f6101b43413b2bfa8f2e1e2" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/sebmarkbage/ecmascript-rest-spread&quot;&gt;Rest Params&lt;/a&gt;: &lt;code&gt;function(type, ...args) { }&lt;/code&gt;</source>
          <target state="translated">&lt;a href=&quot;https://github.com/sebmarkbage/ecmascript-rest-spread&quot;&gt;쉼표 매개 변수&lt;/a&gt; : &lt;code&gt;function(type, ...args) { }&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="388b29fbab338d2e301fe32df45265f901707b34" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/tc39/ecmascript-asyncawait&quot;&gt;Async Functions&lt;/a&gt;: &lt;code&gt;async function doStuffAsync() { const foo = await doOtherStuffAsync(); }&lt;/code&gt;;</source>
          <target state="translated">&lt;a href=&quot;https://github.com/tc39/ecmascript-asyncawait&quot;&gt;비동기 함수&lt;/a&gt; : &lt;code&gt;async function doStuffAsync() { const foo = await doOtherStuffAsync(); }&lt;/code&gt; ;</target>
        </trans-unit>
        <trans-unit id="695afaddeabeffd0340a9b91f422e9825c348dd9" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://material.io/&quot;&gt;Material Design&lt;/a&gt; and &lt;a href=&quot;https://developer.apple.com/ios/human-interface-guidelines/overview/design-principles/&quot;&gt;Human Interface Guidelines&lt;/a&gt; are great resources for learning more about designing for mobile platforms.</source>
          <target state="translated">&lt;a href=&quot;https://material.io/&quot;&gt;머티리얼 디자인&lt;/a&gt; 및 &lt;a href=&quot;https://developer.apple.com/ios/human-interface-guidelines/overview/design-principles/&quot;&gt;휴먼 인터페이스 가이드 라인&lt;/a&gt; 은 모바일 플랫폼 디자인에 대한 자세한 정보를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="5ea06439d7609db29f6736fe5ee62b8b4f65973c" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://microsoft.github.io/code-push/&quot;&gt;CodePush&lt;/a&gt; is a service from Microsoft that makes it easy to deploy live updates to your React Native app. If you don't like going through the app store process to deploy little tweaks, and you also don't like setting up your own backend, give CodePush a try.</source>
          <target state="translated">&lt;a href=&quot;https://microsoft.github.io/code-push/&quot;&gt;CodePush&lt;/a&gt; 는 Microsoft의 서비스로 React Native 앱에 실시간 업데이트를 쉽게 배포 할 수 있습니다. 약간의 조정을 배포하기 위해 앱 스토어 프로세스를 거치지 않고 자신의 백엔드 설정을 좋아하지 않는다면 CodePush를 사용해보십시오.</target>
        </trans-unit>
        <trans-unit id="9719ef1757e6aef726df518e7870c14f5248eef0" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://nuclide.io/&quot;&gt;Nuclide&lt;/a&gt; is the IDE that Facebook uses internally for JavaScript development. The killer feature of Nuclide is its debugging ability. It also has great inline Flow support. &lt;a href=&quot;https://code.visualstudio.com/&quot;&gt;VS Code&lt;/a&gt; is another IDE that is popular with JavaScript developers.</source>
          <target state="translated">&lt;a href=&quot;https://nuclide.io/&quot;&gt;Nuclide&lt;/a&gt; 는 Facebook이 JavaScript 개발을 위해 내부적으로 사용하는 IDE입니다. Nuclide의 킬러 기능은 디버깅 능력입니다. 또한 훌륭한 인라인 흐름 지원 기능이 있습니다. &lt;a href=&quot;https://code.visualstudio.com/&quot;&gt;VS Code&lt;/a&gt; 는 JavaScript 개발자에게 인기있는 또 다른 IDE입니다.</target>
        </trans-unit>
        <trans-unit id="af9adc5d5315a7c9d71f4aa31f13a51b784d905d" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://reactjs.org/docs/jsx-in-depth.html&quot;&gt;JSX&lt;/a&gt;: &lt;code&gt;&amp;lt;View style={{color: 'red'}} /&amp;gt;&lt;/code&gt;</source>
          <target state="translated">&lt;a href=&quot;https://reactjs.org/docs/jsx-in-depth.html&quot;&gt;JSX&lt;/a&gt; : &lt;code&gt;&amp;lt;View style={{color: 'red'}} /&amp;gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0fc4c1210482753e2f8af07a8f44dccfe096eb9c" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;linking-libraries-ios#manual-linking&quot;&gt;Manually link&lt;/a&gt; the PushNotificationIOS library</source>
          <target state="translated">&lt;a href=&quot;linking-libraries-ios#manual-linking&quot;&gt;&lt;/a&gt;PushNotificationIOS 라이브러리를 수동으로 연결</target>
        </trans-unit>
        <trans-unit id="4c91a0248d96f87448057060bfeddc164d9f3110" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;textinput#content&quot;&gt;&lt;code&gt;TextInput&lt;/code&gt;&lt;/a&gt; is a basic component that allows the user to enter text. It has an &lt;code&gt;onChangeText&lt;/code&gt; prop that takes a function to be called every time the text changed, and an &lt;code&gt;onSubmitEditing&lt;/code&gt; prop that takes a function to be called when the text is submitted.</source>
          <target state="translated">&lt;a href=&quot;textinput#content&quot;&gt; &lt;code&gt;TextInput&lt;/code&gt; &lt;/a&gt; 은 사용자가 텍스트를 입력 할 수있는 기본 구성 요소입니다. 그것은이 &lt;code&gt;onChangeText&lt;/code&gt; 의 텍스트를 변경할 때마다 호출 할 함수를 취 소품 및 &lt;code&gt;onSubmitEditing&lt;/code&gt; 텍스트가 제출 될 때 기능을한다 소품 호출 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="65c88c78a48df2279c6930dabdd2f77ed8dd645b" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;touchableopacity&quot;&gt;&lt;strong&gt;TouchableOpacity&lt;/strong&gt;&lt;/a&gt; can be used to provide feedback by reducing the opacity of the button, allowing the background to be seen through while the user is pressing down.</source>
          <target state="translated">&lt;a href=&quot;touchableopacity&quot;&gt;&lt;strong&gt;TouchableOpacity&lt;/strong&gt;&lt;/a&gt; 를 사용하면 버튼의 불투명도를 줄여 피드백을 제공 할 수 있으므로 사용자가 누른 상태에서 배경을 볼 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f66c3881cb3ab33f33fe2715c9d64b94141c050b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;&amp;lt;ScrollView&amp;gt;&lt;/code&gt; vs &lt;a href=&quot;flatlist&quot;&gt;&lt;code&gt;&amp;lt;FlatList&amp;gt;&lt;/code&gt;&lt;/a&gt; - which one to use?</source>
          <target state="translated">&lt;code&gt;&amp;lt;ScrollView&amp;gt;&lt;/code&gt; vs &lt;a href=&quot;flatlist&quot;&gt; &lt;code&gt;&amp;lt;FlatList&amp;gt;&lt;/code&gt; &lt;/a&gt; -어느 것을 사용해야합니까?</target>
        </trans-unit>
        <trans-unit id="b9cdf0b4a1f2f1046195786d83cbf4b353c993e2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;'#f0f'&lt;/code&gt; (#rgb)</source>
          <target state="translated">&lt;code&gt;'#f0f'&lt;/code&gt; ( # rgb )</target>
        </trans-unit>
        <trans-unit id="65f38447a58e9873faf5b532701e1ea9cb8e20bc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;'#f0ff'&lt;/code&gt; (#rgba)</source>
          <target state="translated">&lt;code&gt;'#f0ff'&lt;/code&gt; ( # rgba )</target>
        </trans-unit>
        <trans-unit id="b39cdb9b0c290b0eee57e9e525b1d55eef8c9209" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;'#ff00ff'&lt;/code&gt; (#rrggbb)</source>
          <target state="translated">&lt;code&gt;'#ff00ff'&lt;/code&gt; ( # rrggbb )</target>
        </trans-unit>
        <trans-unit id="13ea4ae9b4c9d198f920808cf115bd1fc51480c6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;'#ff00ff00'&lt;/code&gt; (#rrggbbaa)</source>
          <target state="translated">&lt;code&gt;'#ff00ff00'&lt;/code&gt; ( # rrggbbaa )</target>
        </trans-unit>
        <trans-unit id="db39c6cf3d93a55f34b02cbd398a2dad7d55db25" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;'adjustable'&lt;/code&gt; - The element allows adjustment over a range of values.</source>
          <target state="translated">&lt;code&gt;'adjustable'&lt;/code&gt; - 요소를 사용하여 값 범위를 조정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b2246b0d4b0a94637ab98e04797ae3431ce93d44" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;'allowsDirectInteraction'&lt;/code&gt; - The element allows direct touch interaction for VoiceOver users.</source>
          <target state="translated">&lt;code&gt;'allowsDirectInteraction'&lt;/code&gt; - 이 요소를 사용하면 VoiceOver 사용자가 직접 터치 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="749c16630825145aa74c7ff083c82d345fc7c493" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;'always'&lt;/code&gt; - Always allow a user to over-scroll this view.</source>
          <target state="translated">&lt;code&gt;'always'&lt;/code&gt; -항상 사용자가이보기를 오버 스크롤 할 수 있도록합니다.</target>
        </trans-unit>
        <trans-unit id="d1b4290d0eae18e86e0abcc329487dcd6127a8f4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;'always'&lt;/code&gt; - WebView will allow a secure origin to load content from any other origin, even if that origin is insecure.</source>
          <target state="translated">&lt;code&gt;'always'&lt;/code&gt; -원본이 안전하지 않은 경우에도 WebView를 통해 다른 원본의 콘텐츠를 보안 원본에서로드 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5538bb01a4445151cc3154d54888cf0d9145e3e6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;'always'&lt;/code&gt;, the keyboard will not dismiss automatically, and the scroll view will not catch taps, but children of the scroll view can catch taps.</source>
          <target state="translated">&lt;code&gt;'always'&lt;/code&gt; 이면 키보드가 자동으로 닫히지 않으며 스크롤보기는 탭을 잡을 수 없지만 스크롤보기의 하위 항목은 탭을 잡을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="33e667937a43bd7978dac77f5481a83b3bd11f7c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;'assertive'&lt;/code&gt; - Accessibility services should interrupt ongoing speech to immediately announce changes to this view.</source>
          <target state="translated">&lt;code&gt;'assertive'&lt;/code&gt; - 접근성 서비스는 진행중인 언어를 중단하여이보기에 대한 변경 사항을 즉시 발표해야합니다.</target>
        </trans-unit>
        <trans-unit id="a0438bf2c5f32541892c4255d21ef0d9530bd436" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;'auto'&lt;/code&gt; - Default value, allow a user to over-scroll this view only if the content is large enough to meaningfully scroll.</source>
          <target state="translated">&lt;code&gt;'auto'&lt;/code&gt; - 기본값으로, 내용이 의미있게 스크롤 할 수있을만큼 큰 경우에만이보기를 오버 스크롤 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2997c0e62014324405c5a6ca7f2f441c989e49fe" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;'auto'&lt;/code&gt; - The system determines whether the view is important for accessibility - default (recommended).</source>
          <target state="translated">&lt;code&gt;'auto'&lt;/code&gt; - 시스템이보기가 접근성에 중요한지 여부를 결정합니다 (기본값).</target>
        </trans-unit>
        <trans-unit id="0d4465292d7b7bba4f25bee4dac05d3b7222387d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;'auto'&lt;/code&gt;: The View can be the target of touch events.</source>
          <target state="translated">&lt;code&gt;'auto'&lt;/code&gt; :보기가 터치 이벤트의 대상이 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="38cde7102825602a0f3aa507cacc0f9529730063" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;'black'&lt;/code&gt;, scroll indicator is black. This style is good against a light background.</source>
          <target state="translated">&lt;code&gt;'black'&lt;/code&gt; , 스크롤 표시기가 검은 색입니다. 이 스타일은 밝은 배경에 적합합니다.</target>
        </trans-unit>
        <trans-unit id="b1ca268e335f907834308bbe96f67c1cbcdbd7fc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;'box-none'&lt;/code&gt;: The View is never the target of touch events but it's subviews can be. It behaves like if the view had the following classes in CSS:</source>
          <target state="translated">&lt;code&gt;'box-none'&lt;/code&gt; : View는 터치 이벤트의 대상이 아니지만 하위 뷰가 될 수 있습니다. 뷰에 CSS에서 다음 클래스가있는 것처럼 동작합니다.</target>
        </trans-unit>
        <trans-unit id="701def4653bca55a7c16fad3659f670ecb6c31ce" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;'box-only'&lt;/code&gt;: The view can be the target of touch events but it's subviews cannot be. It behaves like if the view had the following classes in CSS:</source>
          <target state="translated">&lt;code&gt;'box-only'&lt;/code&gt; :보기는 터치 이벤트의 대상이 될 수 있지만 하위보기는 될 수 없습니다. 뷰에 CSS에서 다음 클래스가있는 것처럼 동작합니다.</target>
        </trans-unit>
        <trans-unit id="ac552f0fadc1686998588cb22f1da94df792b59c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;'button'&lt;/code&gt; - The element should be treated as a button.</source>
          <target state="translated">&lt;code&gt;'button'&lt;/code&gt; - 요소는 버튼으로 취급되어야합니다.</target>
        </trans-unit>
        <trans-unit id="e82e5edd8cedbf416fa4943e17d2602a49267eaf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;'center'&lt;/code&gt; will align the snap in the center</source>
          <target state="translated">&lt;code&gt;'center'&lt;/code&gt; 는 가운데 에 스냅을 정렬합니다</target>
        </trans-unit>
        <trans-unit id="6aa5672317917033645d6b65aba6e1a9c4048391" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;'compatibility'&lt;/code&gt; - WebView will attempt to be compatible with the approach of a modern web browser with regard to mixed content.</source>
          <target state="translated">&lt;code&gt;'compatibility'&lt;/code&gt; -WebView는 혼합 컨텐츠와 관련하여 최신 웹 브라우저의 접근 방식과 호환되도록 시도합니다.</target>
        </trans-unit>
        <trans-unit id="53263bd97caae25d73bbbc1c3796f7ca0a2e1ff8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;'default'&lt;/code&gt; (the default), same as &lt;code&gt;black&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;'default'&lt;/code&gt; 과 동일 (기본), &lt;code&gt;black&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="d79cc1b3ace92b3532d4a92503a51c1552da82d5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;'disabled'&lt;/code&gt; - The element is disabled.</source>
          <target state="translated">&lt;code&gt;'disabled'&lt;/code&gt; - 요소가 비활성화되었습니다.</target>
        </trans-unit>
        <trans-unit id="6dee7c6295f2814b12d8efc690b23d33372cb05d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;'end'&lt;/code&gt; will align the snap at the right (horizontal) or bottom (vertical)</source>
          <target state="translated">&lt;code&gt;'end'&lt;/code&gt; 은 스냅을 오른쪽 (수평) 또는 아래쪽 (수직)에 정렬합니다</target>
        </trans-unit>
        <trans-unit id="f36f203c27c137b3c97804fbbf1720fe04cafeef" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;'fast'&lt;/code&gt;: 0.99</source>
          <target state="translated">&lt;code&gt;'fast'&lt;/code&gt; : 0.99</target>
        </trans-unit>
        <trans-unit id="c2f5e204965e2779e477f6e3d05a24aba6245273" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;'frequentUpdates'&lt;/code&gt; - The element frequently changes its value.</source>
          <target state="translated">&lt;code&gt;'frequentUpdates'&lt;/code&gt; - 요소가 자주 값을 변경합니다.</target>
        </trans-unit>
        <trans-unit id="0905e707a47c2b50dfa6054fe898efe24a22d128" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;'handled'&lt;/code&gt;, the keyboard will not dismiss automatically when the tap was handled by a children, (or captured by an ancestor).</source>
          <target state="translated">&lt;code&gt;'handled'&lt;/code&gt; 이면 어린이가 탭을 다룰 때 (또는 조상이 캡처 한 경우) 키보드가 자동으로 닫히지 않습니다.</target>
        </trans-unit>
        <trans-unit id="7d69f8e50a6fdad985a8fa9936c913fdf1cfe7d9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;'header'&lt;/code&gt; - The element is a header that divides content into sections.</source>
          <target state="translated">&lt;code&gt;'header'&lt;/code&gt; - 요소는 콘텐츠를 섹션으로 나누는 헤더입니다.</target>
        </trans-unit>
        <trans-unit id="f6ba0d9b7d0d5f4f8bfebc40da342b4e936b9d6a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;'image'&lt;/code&gt; - The element should be treated as an image.</source>
          <target state="translated">&lt;code&gt;'image'&lt;/code&gt; - 요소를 이미지로 취급해야합니다.</target>
        </trans-unit>
        <trans-unit id="ef38a966f4f65bbbf40b44db282115d57709d6de" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;'interactive'&lt;/code&gt;, the keyboard is dismissed interactively with the drag and moves in synchrony with the touch; dragging upwards cancels the dismissal. On android this is not supported and it will have the same behavior as 'none'.</source>
          <target state="translated">&lt;code&gt;'interactive'&lt;/code&gt; , 키보드는 드래그와 대화식으로 닫히고 터치와 동 기적으로 움직입니다. 위로 드래그하면 해고가 취소됩니다. 안드로이드에서는 지원되지 않으며 '없음'과 동일한 동작을합니다.</target>
        </trans-unit>
        <trans-unit id="0534497399f938aad1ec559136e84664fa1a9cea" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;'key'&lt;/code&gt; - The element should be treated like a keyboard key.</source>
          <target state="translated">&lt;code&gt;'key'&lt;/code&gt; - 요소는 키보드 키처럼 취급되어야합니다.</target>
        </trans-unit>
        <trans-unit id="66c0842dfb1480adf83cd51e4f16123e6aa8e8a0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;'link'&lt;/code&gt; - The element should be treated as a link.</source>
          <target state="translated">&lt;code&gt;'link'&lt;/code&gt; - 요소는 링크로 취급되어야합니다.</target>
        </trans-unit>
        <trans-unit id="2ddc0c6ec59a83ddec76f12a701160eae7fbb3f4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;'never'&lt;/code&gt; (default) - WebView will not allow a secure origin to load content from an insecure origin.</source>
          <target state="translated">&lt;code&gt;'never'&lt;/code&gt; (기본값)-WebView는 보안 오리진이 안전하지 않은 오리진에서 컨텐츠를로드하도록 허용하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="a008bbf8bc3af4106ad91a5b446ddfcf05d830e6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;'never'&lt;/code&gt; (the default), tapping outside of the focused text input when the keyboard is up dismisses the keyboard. When this happens, children won't receive the tap.</source>
          <target state="translated">&lt;code&gt;'never'&lt;/code&gt; 키보드가 작동 중일 때 포커스가있는 텍스트 입력 외부를 두드리면 'never' (기본값)가 키보드를 닫습니다. 이런 일이 발생하면 아이들은 탭을받지 못합니다.</target>
        </trans-unit>
        <trans-unit id="b7dd5b71130d4cc7e902d906ad1eb529fabacde8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;'never'&lt;/code&gt; - Never allow a user to over-scroll this view.</source>
          <target state="translated">&lt;code&gt;'never'&lt;/code&gt; - 사용자가이보기를 과도하게 스크롤 할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="7064eefdaf8a26b1d4e61df25b34f406041b2467" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;'no'&lt;/code&gt; - The view is not important for accessibility.</source>
          <target state="translated">&lt;code&gt;'no'&lt;/code&gt; -접근성이 중요하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="6d375aebd80817aa391b2c55d59d7c9184469790" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;'no-hide-descendants'&lt;/code&gt; - The view is not important for accessibility, nor are any of its descendant views.</source>
          <target state="translated">&lt;code&gt;'no-hide-descendants'&lt;/code&gt; -보기는 접근성에 중요하지 않으며 하위보기도 아닙니다.</target>
        </trans-unit>
        <trans-unit id="fa5c726879b881c0b3d2c148d09ab6de21de5f55" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;'none'&lt;/code&gt; (the default), drags do not dismiss the keyboard.</source>
          <target state="translated">&lt;code&gt;'none'&lt;/code&gt; (기본값), 드래그는 키보드를 닫지 않습니다.</target>
        </trans-unit>
        <trans-unit id="b2cc2e79a8a9e1946cb9431c69ceefbab25c82c1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;'none'&lt;/code&gt; - Accessibility services should not announce changes to this view.</source>
          <target state="translated">&lt;code&gt;'none'&lt;/code&gt; -접근성 서비스가이보기에 대한 변경 사항을 발표해서는 안됩니다.</target>
        </trans-unit>
        <trans-unit id="eb74b9a6b1ed9818c0f5dd6e960446f2884857f7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;'none'&lt;/code&gt; - The element has no traits.</source>
          <target state="translated">&lt;code&gt;'none'&lt;/code&gt; -요소에 특성이 없습니다.</target>
        </trans-unit>
        <trans-unit id="8c7a625cefb8b6402eb26703a5dabea4254c5738" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;'none'&lt;/code&gt;: The View is never the target of touch events.</source>
          <target state="translated">&lt;code&gt;'none'&lt;/code&gt; :보기가 터치 이벤트의 대상이 아닙니다.</target>
        </trans-unit>
        <trans-unit id="e055e0abb767499a572d49786d4927954bd37d94" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;'normal'&lt;/code&gt;: 0.998 (the default)</source>
          <target state="translated">&lt;code&gt;'normal'&lt;/code&gt; : 0.998 (기본값)</target>
        </trans-unit>
        <trans-unit id="64146c996a1d184683e9420d5bd07f1d95261775" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;'on-drag'&lt;/code&gt;, the keyboard is dismissed when a drag begins.</source>
          <target state="translated">&lt;code&gt;'on-drag'&lt;/code&gt; 이면 드래그가 시작될 때 키보드가 사라집니다.</target>
        </trans-unit>
        <trans-unit id="71e5b35483a30e62d77a4b1e93c5f9bff1bab613" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;'pageTurn'&lt;/code&gt; - Informs VoiceOver that it should scroll to the next page when it finishes reading the contents of the element.</source>
          <target state="translated">&lt;code&gt;'pageTurn'&lt;/code&gt; - 요소의 내용 읽기를 마치면 다음 페이지로 스크롤해야한다는 것을 VoiceOver에 알립니다.</target>
        </trans-unit>
        <trans-unit id="deee1c650e8a2a012005a22ff281eab6123bd4bd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;'plays'&lt;/code&gt; - The element plays sound.</source>
          <target state="translated">&lt;code&gt;'plays'&lt;/code&gt; - 요소가 소리를 재생합니다.</target>
        </trans-unit>
        <trans-unit id="6c6d75c2654c1ace9bace0d00237004e431f636a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;'polite'&lt;/code&gt;- Accessibility services should announce changes to this view.</source>
          <target state="translated">&lt;code&gt;'polite'&lt;/code&gt; - 접근성 서비스는이보기에 대한 변경 사항을 발표해야합니다.</target>
        </trans-unit>
        <trans-unit id="3753c023085340ae47caf775ce65715438a0f4de" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;'search'&lt;/code&gt; - The element should be treated as a search field.</source>
          <target state="translated">&lt;code&gt;'search'&lt;/code&gt; - 요소는 검색 필드로 취급되어야합니다.</target>
        </trans-unit>
        <trans-unit id="d3da0411705b8e9e33c1b1fa947873cdab0fc726" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;'selected'&lt;/code&gt; - The element is selected.</source>
          <target state="translated">&lt;code&gt;'selected'&lt;/code&gt; - 요소가 선택되었습니다.</target>
        </trans-unit>
        <trans-unit id="ce00fac7232d1c2a2646c05450b56a3c4615332e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;'start'&lt;/code&gt; (the default) will align the snap at the left (horizontal) or top (vertical)</source>
          <target state="translated">&lt;code&gt;'start'&lt;/code&gt; (기본값)은 스냅을 왼쪽 (수평) 또는 상단 (수직)에 정렬합니다</target>
        </trans-unit>
        <trans-unit id="0769c856f6f7d22d1ffc9de4e24f5050b97bc183" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;'startsMedia'&lt;/code&gt; - The element starts a media session.</source>
          <target state="translated">&lt;code&gt;'startsMedia'&lt;/code&gt; - 요소가 미디어 세션을 시작합니다.</target>
        </trans-unit>
        <trans-unit id="6c9a76fef1f670cde6b158eeb596bb182ea68783" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;'summary'&lt;/code&gt; - The element provides app summary information.</source>
          <target state="translated">&lt;code&gt;'summary'&lt;/code&gt; - 요소는 앱 요약 정보를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="15571c121035c716d0ebef297f3ce541f1b77c98" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;'text'&lt;/code&gt; - The element should be treated as text.</source>
          <target state="translated">&lt;code&gt;'text'&lt;/code&gt; - 요소를 텍스트로 취급해야합니다.</target>
        </trans-unit>
        <trans-unit id="836383dc6583fbf2939494d1b9e23935f2a0be22" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;'white'&lt;/code&gt;, scroll indicator is white. This style is good against a dark background.</source>
          <target state="translated">&lt;code&gt;'white'&lt;/code&gt; , 스크롤 표시기가 흰색입니다. 이 스타일은 어두운 배경에 적합합니다.</target>
        </trans-unit>
        <trans-unit id="812d57b875c207198f2220535560463458d64ff2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;'yes'&lt;/code&gt; - The view is important for accessibility.</source>
          <target state="translated">&lt;code&gt;'yes'&lt;/code&gt; - 보기는 접근성에 중요합니다.</target>
        </trans-unit>
        <trans-unit id="857b160cda3795e849bb775a5a7306c66059bf29" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;*&lt;/code&gt; operator goes with the variable name (e.g. &lt;code&gt;NSObject *variableName;&lt;/code&gt;)</source>
          <target state="translated">&lt;code&gt;*&lt;/code&gt; 연산자는 변수 이름으로갑니다 (예 : &lt;code&gt;NSObject *variableName;&lt;/code&gt; )</target>
        </trans-unit>
        <trans-unit id="ff04b673d53568fb804c69921d74258335744e00" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;- method&lt;/code&gt;, &lt;code&gt;@interface&lt;/code&gt;, and &lt;code&gt;@implementation&lt;/code&gt; brackets on the following line</source>
          <target state="translated">&lt;code&gt;- method&lt;/code&gt; 다음 줄의 method , &lt;code&gt;@interface&lt;/code&gt; 및 &lt;code&gt;@implementation&lt;/code&gt; 괄호</target>
        </trans-unit>
        <trans-unit id="7148a23ae447b7e7e1f3c5e71140c187235ae251" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;-a &amp;lt;your_package_name&amp;gt;&lt;/code&gt; enables app-specific markers, specifically the ones built into the React Native framework. &lt;code&gt;your_package_name&lt;/code&gt; can be found in the &lt;code&gt;AndroidManifest.xml&lt;/code&gt; of your app and looks like &lt;code&gt;com.example.app&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;-a &amp;lt;your_package_name&amp;gt;&lt;/code&gt; 은 앱별 마커, 특히 React Native 프레임 워크에 내장 된 마커를 활성화합니다. &lt;code&gt;your_package_name&lt;/code&gt; 은 앱 의 &lt;code&gt;AndroidManifest.xml&lt;/code&gt; 에서 찾을 수 있으며 &lt;code&gt;com.example.app&lt;/code&gt; 처럼 보입니다.</target>
        </trans-unit>
        <trans-unit id="8e4b1c8e7d03a53b0126852dbdadc66c493fe02b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;.bash_profile&lt;/code&gt; is specific to &lt;code&gt;bash&lt;/code&gt;. If you're using another shell, you will need to edit the appropriate shell-specific config file.</source>
          <target state="translated">&lt;code&gt;.bash_profile&lt;/code&gt; 은 &lt;code&gt;bash&lt;/code&gt; 에만 해당됩니다 . 다른 쉘을 사용하는 경우 적절한 쉘 특정 구성 파일을 편집해야합니다.</target>
        </trans-unit>
        <trans-unit id="62606f04bef3c53b4a8ebecbd9dac0839eb1fac0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ACCESS_COARSE_LOCATION&lt;/code&gt;: 'android.permission.ACCESS_COARSE_LOCATION'</source>
          <target state="translated">&lt;code&gt;ACCESS_COARSE_LOCATION&lt;/code&gt; : 'android.permission.ACCESS_COARSE_LOCATION'</target>
        </trans-unit>
        <trans-unit id="9902c6e7dfedafe264b8c7f9c8c1e131a967fc1c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ACCESS_FINE_LOCATION&lt;/code&gt;: 'android.permission.ACCESS_FINE_LOCATION'</source>
          <target state="translated">&lt;code&gt;ACCESS_FINE_LOCATION&lt;/code&gt; : 'android.permission.ACCESS_FINE_LOCATION'</target>
        </trans-unit>
        <trans-unit id="4303650fe6179ca1b7b18a16c9f1fe7ac94895c9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ADD_VOICEMAIL&lt;/code&gt;: 'com.android.voicemail.permission.ADD_VOICEMAIL'</source>
          <target state="translated">&lt;code&gt;ADD_VOICEMAIL&lt;/code&gt; : 'com.android.voicemail.permission.ADD_VOICEMAIL'</target>
        </trans-unit>
        <trans-unit id="27e897997f39acfdffb108095382d44cdfb2b7c4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;AlertIOS&lt;/code&gt; provides functionality to create an iOS alert dialog with a message or create a prompt for user input.</source>
          <target state="translated">&lt;code&gt;AlertIOS&lt;/code&gt; 는 메시지로 iOS 경고 대화 상자를 작성하거나 사용자 입력을위한 프롬프트를 작성하는 기능을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="ec68ee027e8abe1d5019fd39fe3371633ebda008" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Animated.Value&lt;/code&gt; can bind to style properties or other props, and can be interpolated as well. A single &lt;code&gt;Animated.Value&lt;/code&gt; can drive any number of properties.</source>
          <target state="translated">&lt;code&gt;Animated.Value&lt;/code&gt; 는 스타일 속성이나 다른 소품에 바인딩 될 수 있으며 보간 될 수도 있습니다. 단일 &lt;code&gt;Animated.Value&lt;/code&gt; 는 여러 속성을 구동 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a85af542169f0021f8c831993ab8804ae3fe226d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Animated&lt;/code&gt; API</source>
          <target state="translated">&lt;code&gt;Animated&lt;/code&gt; API</target>
        </trans-unit>
        <trans-unit id="faae5d0a870386061a81d7ab2d8f13af2e646cca" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Animated&lt;/code&gt; exports four animatable component types: &lt;code&gt;View&lt;/code&gt;, &lt;code&gt;Text&lt;/code&gt;, &lt;code&gt;Image&lt;/code&gt;, and &lt;code&gt;ScrollView&lt;/code&gt;, but you can also create your own using &lt;code&gt;Animated.createAnimatedComponent()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Animated&lt;/code&gt; 는 애니메이션 가능한 구성 요소 유형 인 &lt;code&gt;View&lt;/code&gt; , &lt;code&gt;Text&lt;/code&gt; , &lt;code&gt;Image&lt;/code&gt; 및 &lt;code&gt;ScrollView&lt;/code&gt; 를 내보내 지만 &lt;code&gt;Animated.createAnimatedComponent()&lt;/code&gt; 사용하여 직접 만들 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="b1acc6290ad377cd53054e47a056ab5f22dbbe26" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Animated&lt;/code&gt; exports the following animatable components using the above wrapper:</source>
          <target state="translated">&lt;code&gt;Animated&lt;/code&gt; 은 위 래퍼를 사용하여 다음 애니메이션 가능 구성 요소를 내 보냅니다.</target>
        </trans-unit>
        <trans-unit id="5c2efb61ca6fd17b5a66b67eccfd32af82e2b556" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Animated&lt;/code&gt; is designed to be fully serializable so that animations can be run in a high performance way, independent of the normal JavaScript event loop. This does influence the API, so keep that in mind when it seems a little trickier to do something compared to a fully synchronous system. Check out &lt;code&gt;Animated.Value.addListener&lt;/code&gt; as a way to work around some of these limitations, but use it sparingly since it might have performance implications in the future.</source>
          <target state="translated">&lt;code&gt;Animated&lt;/code&gt; 는 일반적인 JavaScript 이벤트 루프와 상관없이 애니메이션을 고성능 방식으로 실행할 수 있도록 완전히 직렬화 할 수 있도록 설계되었습니다. 이는 API에 영향을 미치므로 완전히 동기화 된 시스템과 비교할 때 약간 까다로울 때 염두에 두십시오. 이러한 제한 사항 중 일부를 해결하는 방법으로 &lt;code&gt;Animated.Value.addListener&lt;/code&gt; 를 확인 하되 나중에 성능에 영향을 줄 수 있으므로 조금만 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="61b3de3a5d6df28886821c04a1bf445a11da862a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Animated&lt;/code&gt; provides several animation types, the most commonly used one being &lt;a href=&quot;animated#timing&quot;&gt;&lt;code&gt;Animated.timing()&lt;/code&gt;&lt;/a&gt;. It supports animating a value over time using one of various predefined easing functions, or you can use your own. Easing functions are typically used in animation to convey gradual acceleration and deceleration of objects.</source>
          <target state="translated">&lt;code&gt;Animated&lt;/code&gt; 는 여러 애니메이션 유형을 제공하며 가장 일반적으로 사용되는 애니메이션 유형은 &lt;a href=&quot;animated#timing&quot;&gt; &lt;code&gt;Animated.timing()&lt;/code&gt; &lt;/a&gt; 입니다. 미리 정의 된 다양한 여유 함수 중 하나를 사용하여 시간에 따른 값 애니메이션을 지원하거나 직접 사용할 수 있습니다. 완화 기능은 일반적으로 객체의 점진적인 가속 및 감속을 전달하기 위해 애니메이션에서 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="b31fa14aaa6c35594fa4b0af14e7ed7ddcb72706" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Animated&lt;/code&gt; provides three types of animation types. Each animation type provides a particular animation curve that controls how your values animate from their initial value to the final value:</source>
          <target state="translated">&lt;code&gt;Animated&lt;/code&gt; 는 세 가지 유형의 애니메이션 유형을 제공합니다. 각 애니메이션 유형은 값이 초기 값에서 최종 값으로 애니메이션되는 방식을 제어하는 ​​특정 애니메이션 곡선을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="4b7130e78cc3e183361ad668d511dab8b32ab534" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;AppRegistry&lt;/code&gt; is the JS entry point to running all React Native apps. App root components should register themselves with &lt;code&gt;AppRegistry.registerComponent&lt;/code&gt;, then the native system can load the bundle for the app and then actually run the app when it's ready by invoking &lt;code&gt;AppRegistry.runApplication&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;AppRegistry&lt;/code&gt; 는 모든 React Native 앱을 실행하기위한 JS 진입 점입니다. 앱 루트 구성 요소는 &lt;code&gt;AppRegistry.registerComponent&lt;/code&gt; 에 자체 등록해야합니다 . 그러면 기본 시스템은 앱의 번들을로드 한 다음 &lt;code&gt;AppRegistry.runApplication&lt;/code&gt; 을 호출하여 준비가되면 앱을 실제로 실행할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="4252d98078a297e3bf0c78a9e84cefa15890c463" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;AppRegistry&lt;/code&gt; should be &lt;code&gt;require&lt;/code&gt;d early in the &lt;code&gt;require&lt;/code&gt; sequence to make sure the JS execution environment is setup before other modules are &lt;code&gt;require&lt;/code&gt;d.</source>
          <target state="translated">&lt;code&gt;AppRegistry&lt;/code&gt; 다른 모듈이 &lt;code&gt;require&lt;/code&gt; 하기 전에 JS 실행 환경이 설정 되도록 &lt;code&gt;require&lt;/code&gt; AppRegistry 가 &lt;code&gt;require&lt;/code&gt; 순서의 초기에 d 가되어야 합니다 .</target>
        </trans-unit>
        <trans-unit id="55d93f133bced2b3301df6f038fefab2b033f97f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;AppState&lt;/code&gt; can tell you if the app is in the foreground or background, and notify you when the state changes.</source>
          <target state="translated">&lt;code&gt;AppState&lt;/code&gt; 는 앱이 포 그라운드 또는 백그라운드에 있는지 알려주고 상태가 변경되면 알려줍니다.</target>
        </trans-unit>
        <trans-unit id="b6bfbd4d7586aac3950b7b9a1bb6c2dd33430798" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;AsyncStorage&lt;/code&gt; is a simple, unencrypted, asynchronous, persistent, key-value storage system that is global to the app. It should be used instead of LocalStorage.</source>
          <target state="translated">&lt;code&gt;AsyncStorage&lt;/code&gt; 는 단순하고 암호화되지 않은 비동기식의 영구적 인 키-값 스토리지 시스템으로 앱 전체에 적용됩니다. LocalStorage 대신 사용해야합니다.</target>
        </trans-unit>
        <trans-unit id="3fc3c3807cd7cd8eb4b3a55779f592be06a21dea" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;BODY_SENSORS&lt;/code&gt;: 'android.permission.BODY_SENSORS'</source>
          <target state="translated">&lt;code&gt;BODY_SENSORS&lt;/code&gt; : 'android.permission.BODY_SENSORS'</target>
        </trans-unit>
        <trans-unit id="682bb4be482a5dc53ad9e99ec797e9da83ba9c25" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;CALL_PHONE&lt;/code&gt;: 'android.permission.CALL_PHONE'</source>
          <target state="translated">&lt;code&gt;CALL_PHONE&lt;/code&gt; : 'android.permission.CALL_PHONE'</target>
        </trans-unit>
        <trans-unit id="8990182cc6559546a71ea51a7d9a9cd6bb6312cf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;CAMERA&lt;/code&gt;: 'android.permission.CAMERA'</source>
          <target state="translated">&lt;code&gt;CAMERA&lt;/code&gt; : 'android.permission.CAMERA'</target>
        </trans-unit>
        <trans-unit id="00b368b885889768e515b5597e475982484dffa3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;CameraRoll&lt;/code&gt; provides access to the local camera roll or photo library.</source>
          <target state="translated">&lt;code&gt;CameraRoll&lt;/code&gt; 은 로컬 카메라 롤 또는 사진 라이브러리에 대한 액세스를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="3ba0f3e3068de06af3c51057c00d5e8649c58957" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Clipboard&lt;/code&gt; gives you an interface for setting and getting content from Clipboard on both iOS and Android</source>
          <target state="translated">&lt;code&gt;Clipboard&lt;/code&gt; 는 iOS 및 Android 모두에서 클립 보드에서 컨텐츠를 설정하고 가져 오기위한 인터페이스를 제공합니다</target>
        </trans-unit>
        <trans-unit id="27ad1f404f6d1bf694946da894bc704f62c32208" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ConnectionType&lt;/code&gt; describes the type of connection the device is using to communicate with the network.</source>
          <target state="translated">&lt;code&gt;ConnectionType&lt;/code&gt; 은 장치가 네트워크와 통신하는 데 사용하는 연결 유형을 설명합니다.</target>
        </trans-unit>
        <trans-unit id="d56c0da1dd0fcce5609a7384421961ea5419e25c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;DENIED&lt;/code&gt;: 'denied'</source>
          <target state="translated">&lt;code&gt;DENIED&lt;/code&gt; : '거부 됨'</target>
        </trans-unit>
        <trans-unit id="a1a290321d417d666f6f1e92de9434ced454bde7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;FlatList&lt;/code&gt; is also handy if you want to render separators between your items, multiple columns, infinite scroll loading, or any number of other features it supports out of the box.</source>
          <target state="translated">&lt;code&gt;FlatList&lt;/code&gt; 는 항목, 여러 열, 무한 스크롤 로딩 또는 지원되는 다른 많은 기능 사이에서 구분 기호를 렌더링하려는 경우에도 편리합니다.</target>
        </trans-unit>
        <trans-unit id="852756916c7ef8b2e1dbc46f613e69fd1dcc7a23" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;GET_ACCOUNTS&lt;/code&gt;: 'android.permission.GET_ACCOUNTS'</source>
          <target state="translated">&lt;code&gt;GET_ACCOUNTS&lt;/code&gt; : 'android.permission.GET_ACCOUNTS'</target>
        </trans-unit>
        <trans-unit id="37d6f2d8d7f65ae02f6e0ff796dd42b8fbc226bc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;GRANTED&lt;/code&gt;: 'granted'</source>
          <target state="translated">&lt;code&gt;GRANTED&lt;/code&gt; : 'granted'</target>
        </trans-unit>
        <trans-unit id="cde7ddaa3ab4b6edc779747d445f750aead3ba66" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ImageResizeMode&lt;/code&gt; is an &lt;code&gt;Enum&lt;/code&gt; for different image resizing modes, set via the &lt;code&gt;resizeMode&lt;/code&gt; style property on &lt;code&gt;Image&lt;/code&gt; components. The values are &lt;code&gt;contain&lt;/code&gt;, &lt;code&gt;cover&lt;/code&gt;, &lt;code&gt;stretch&lt;/code&gt;, &lt;code&gt;center&lt;/code&gt;, &lt;code&gt;repeat&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;ImageResizeMode&lt;/code&gt; 는 다양한 이미지 크기 조정 모드를위한 &lt;code&gt;Enum&lt;/code&gt; 이며 &lt;code&gt;Image&lt;/code&gt; 구성 요소 의 &lt;code&gt;resizeMode&lt;/code&gt; 스타일 속성을 통해 설정됩니다 . 값은 &lt;code&gt;contain&lt;/code&gt; , &lt;code&gt;cover&lt;/code&gt; , &lt;code&gt;stretch&lt;/code&gt; , &lt;code&gt;center&lt;/code&gt; , &lt;code&gt;repeat&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="c673c507277c72a05c551e4be335b7522ab8c4bb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ImageSource&lt;/code&gt; is an object like &lt;code&gt;{ uri: '&amp;lt;http location || file path&amp;gt;' }&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;ImageSource&lt;/code&gt; 는 &lt;code&gt;{ uri: '&amp;lt;http location || file path&amp;gt;' }&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0f224f46da67abe6c64414911739578902d95b6d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;InputText&lt;/code&gt; components do not work for now (i.e. they cannot receive focus).</source>
          <target state="translated">&lt;code&gt;InputText&lt;/code&gt; 구성 요소는 현재 작동하지 않습니다 (즉, 포커스를받을 수 없음).</target>
        </trans-unit>
        <trans-unit id="f913cd52f2d9c32cd47af469c3c9424e3fe1c02a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Keyboard&lt;/code&gt; module to control keyboard events.</source>
          <target state="translated">&lt;code&gt;Keyboard&lt;/code&gt; 제어 키보드 이벤트에 모듈.</target>
        </trans-unit>
        <trans-unit id="a903b3efbc768854d4d7e347cda447a2ca661743" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LayoutAnimation&lt;/code&gt; API</source>
          <target state="translated">&lt;code&gt;LayoutAnimation&lt;/code&gt; API</target>
        </trans-unit>
        <trans-unit id="7d6e764c979dbb8da35c92ba7da787773d761c30" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;LayoutAnimation&lt;/code&gt; allows you to globally configure &lt;code&gt;create&lt;/code&gt; and &lt;code&gt;update&lt;/code&gt; animations that will be used for all views in the next render/layout cycle. This is useful for doing flexbox layout updates without bothering to measure or calculate specific properties in order to animate them directly, and is especially useful when layout changes may affect ancestors, for example a &quot;see more&quot; expansion that also increases the size of the parent and pushes down the row below which would otherwise require explicit coordination between the components in order to animate them all in sync.</source>
          <target state="translated">&lt;code&gt;LayoutAnimation&lt;/code&gt; 을 사용하면 다음 렌더링 / 레이아웃주기에서 모든 뷰에 사용될 애니메이션 &lt;code&gt;create&lt;/code&gt; 및 &lt;code&gt;update&lt;/code&gt; 를 전체적으로 구성 할 수 있습니다. 이는 특정 속성을 직접 애니메이션으로 표시하기 위해 측정하거나 계산하지 않고 flexbox 레이아웃 업데이트를 수행하는 데 유용하며, 레이아웃 변경 사항이 상위 항목에 영향을 줄 수있는 경우 (예 : 부모의 크기를 늘리는 &quot;더보기&quot;확장)에 특히 유용합니다. 구성 요소를 모두 동기화하기 위해 구성 요소간에 명시적인 조정이 필요한 아래 행을 아래로 내립니다.</target>
        </trans-unit>
        <trans-unit id="9444080d485aab84fc5e506ce38ae60e9ebf2a96" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Linking&lt;/code&gt; gives you a general interface to interact with both incoming and outgoing app links.</source>
          <target state="translated">&lt;code&gt;Linking&lt;/code&gt; 은 수신 및 발신 앱 링크와 상호 작용할 수있는 일반 인터페이스를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="eea6f18c6130e319efac3a70615d724228d99cff" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ListView&lt;/code&gt; initial rendering is too slow or scroll performance is bad for large lists</source>
          <target state="translated">&lt;code&gt;ListView&lt;/code&gt; 초기 렌더링이 너무 느리거나 큰 목록의 경우 스크롤 성능이 좋지 않습니다.</target>
        </trans-unit>
        <trans-unit id="7b74ecb3100e9cf90eb23759b7eed920b75119eb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;NEVER_ASK_AGAIN&lt;/code&gt;: 'never_ask_again'</source>
          <target state="translated">&lt;code&gt;NEVER_ASK_AGAIN&lt;/code&gt; : 'never_ask_again'</target>
        </trans-unit>
        <trans-unit id="36c5ca2db39a7eaa5c1695664b393bf5cb276397" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;NavigatorIOS&lt;/code&gt; is a wrapper around &lt;a href=&quot;https://developer.apple.com/library/ios/documentation/UIKit/Reference/UINavigationController_Class/&quot;&gt;&lt;code&gt;UINavigationController&lt;/code&gt;&lt;/a&gt;, enabling you to implement a navigation stack. It works exactly the same as it would on a native app using &lt;code&gt;UINavigationController&lt;/code&gt;, providing the same animations and behavior from UIKit.</source>
          <target state="translated">&lt;code&gt;NavigatorIOS&lt;/code&gt; 는 &lt;a href=&quot;https://developer.apple.com/library/ios/documentation/UIKit/Reference/UINavigationController_Class/&quot;&gt; &lt;code&gt;UINavigationController&lt;/code&gt; 에&lt;/a&gt; 대한 래퍼이므로 탐색 스택을 구현할 수 있습니다. UIKit과 동일한 애니메이션과 동작을 제공하는 &lt;code&gt;UINavigationController&lt;/code&gt; 를 사용하는 기본 앱 에서와 동일하게 작동합니다.</target>
        </trans-unit>
        <trans-unit id="99964f3596d1c48786d441f0ce2a87e18f29c3b5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;NavigatorIOS&lt;/code&gt; looks and feels just like &lt;a href=&quot;https://developer.apple.com/library/ios/documentation/UIKit/Reference/UINavigationController_Class/&quot;&gt;&lt;code&gt;UINavigationController&lt;/code&gt;&lt;/a&gt;, because it is actually built on top of it.</source>
          <target state="translated">&lt;code&gt;NavigatorIOS&lt;/code&gt; 는 실제로 &lt;a href=&quot;https://developer.apple.com/library/ios/documentation/UIKit/Reference/UINavigationController_Class/&quot;&gt; &lt;code&gt;UINavigationController&lt;/code&gt; &lt;/a&gt; 와 비슷하게 보이고 느껴집니다 .</target>
        </trans-unit>
        <trans-unit id="66e43df36bac598ec372cbb4e5aaeab55fb61748" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;PROCESS_OUTGOING_CALLS&lt;/code&gt;: 'android.permission.PROCESS_OUTGOING_CALLS'</source>
          <target state="translated">&lt;code&gt;PROCESS_OUTGOING_CALLS&lt;/code&gt; : 'android.permission.PROCESS_OUTGOING_CALLS'</target>
        </trans-unit>
        <trans-unit id="b1cf6697c662f7828fe70541922df8cbab80c88d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;PanResponder&lt;/code&gt; reconciles several touches into a single gesture. It makes single-touch gestures resilient to extra touches, and can be used to recognize simple multi-touch gestures.</source>
          <target state="translated">&lt;code&gt;PanResponder&lt;/code&gt; 는 여러 터치를 단일 제스처로 조정합니다. 단일 터치 제스처를 추가 터치에 대해 탄력적으로 만들며 간단한 멀티 터치 제스처를 인식하는 데 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f35a393844438e78b458f400d6f84097a2da54bb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;PermissionsAndroid&lt;/code&gt; provides access to Android M's new permissions model. The so-called &quot;normal&quot; permissions are granted by default when the application is installed so long as they appear in &lt;code&gt;AndroidManifest.xml&lt;/code&gt;. However, &quot;dangerous&quot; permissions require a dialog prompt. You should use this module for those permissions.</source>
          <target state="translated">&lt;code&gt;PermissionsAndroid&lt;/code&gt; Android는 Android M의 새로운 권한 모델에 대한 액세스를 제공합니다. 소위 &quot;일반&quot;권한은 기본적으로 애플리케이션이 &lt;code&gt;AndroidManifest.xml&lt;/code&gt; 에 나타나는 한 애플리케이션을 설치할 때 부여됩니다 . 그러나 &quot;위험한&quot;권한에는 대화 상자 프롬프트가 필요합니다. 해당 권한에 대해이 모듈을 사용해야합니다.</target>
        </trans-unit>
        <trans-unit id="9f287954582de63ef076b698764f68e8ea4911fb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Photos&lt;/code&gt; // default</source>
          <target state="translated">&lt;code&gt;Photos&lt;/code&gt; // 기본</target>
        </trans-unit>
        <trans-unit id="86eec165f74cc410507ce8216d1228eca841ff35" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Platform.OS&lt;/code&gt; will be &lt;code&gt;ios&lt;/code&gt; when running on iOS and &lt;code&gt;android&lt;/code&gt; when running on Android.</source>
          <target state="translated">&lt;code&gt;Platform.OS&lt;/code&gt; 이 될 것 &lt;code&gt;ios&lt;/code&gt; iOS에서 실행하면 &lt;code&gt;android&lt;/code&gt; 안드로이드에서 실행되는 경우.</target>
        </trans-unit>
        <trans-unit id="61811820eb25e7646075a971b510e3ceb13cf194" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;RCTResponseSenderBlock&lt;/code&gt; accepts only one argument - an array of parameters to pass to the JavaScript callback. In this case we use Node's convention to make the first parameter an error object (usually &lt;code&gt;null&lt;/code&gt; when there is no error) and the rest are the results of the function.</source>
          <target state="translated">&lt;code&gt;RCTResponseSenderBlock&lt;/code&gt; 은 JavaScript 콜백에 전달할 매개 변수 배열 인 하나의 인수 만 허용합니다. 이 경우 노드의 규칙을 사용하여 첫 번째 매개 변수를 오류 개체 (일반적으로 오류가없는 경우 &lt;code&gt;null&lt;/code&gt; )로 만들고 나머지는 함수의 결과입니다.</target>
        </trans-unit>
        <trans-unit id="e2868225fdda3c200512a96de4aa25115c2526d1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;RCTRootView&lt;/code&gt; also provides a read-write property &lt;code&gt;appProperties&lt;/code&gt;. After &lt;code&gt;appProperties&lt;/code&gt; is set, the React Native app is re-rendered with new properties. The update is only performed when the new updated properties differ from the previous ones.</source>
          <target state="translated">&lt;code&gt;RCTRootView&lt;/code&gt; 는 또한 읽기-쓰기 특성 &lt;code&gt;appProperties&lt;/code&gt; 를 제공합니다 . 후 &lt;code&gt;appProperties&lt;/code&gt; 이 설정되어 네이티브 응용 프로그램은 다시 렌더링 된 새로운 속성입니다 반응한다. 업데이트는 새로 업데이트 된 속성이 이전 속성과 다른 경우에만 수행됩니다.</target>
        </trans-unit>
        <trans-unit id="c70e777758a8ef5b4fd699f0639924449916d8fe" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;RCTRootView&lt;/code&gt; has an initializer that allows you to pass arbitrary properties down to the React Native app. The &lt;code&gt;initialProperties&lt;/code&gt; parameter has to be an instance of &lt;code&gt;NSDictionary&lt;/code&gt;. The dictionary is internally converted into a JSON object that the top-level JS component can reference.</source>
          <target state="translated">&lt;code&gt;RCTRootView&lt;/code&gt; 에는 임의의 속성을 React Native 앱으로 전달할 수있는 초기화 기능이 있습니다. &lt;code&gt;initialProperties&lt;/code&gt; 이 매개 변수의 인스턴스 할 수 &lt;code&gt;NSDictionary&lt;/code&gt; . 사전은 내부적으로 최상위 JS 컴포넌트가 참조 할 수있는 JSON 오브젝트로 변환됩니다.</target>
        </trans-unit>
        <trans-unit id="91e0f63e11d62cb5532695e76954a36849ce2710" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;RCTRootView&lt;/code&gt; supports 4 different size flexibility modes:</source>
          <target state="translated">&lt;code&gt;RCTRootView&lt;/code&gt; 는 4 가지 크기의 유연성 모드를 지원합니다 :</target>
        </trans-unit>
        <trans-unit id="2f98fd865fec26339f5c990530596d2f5222cf36" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;RCTRootViewSizeFlexibilityNone&lt;/code&gt; is the default value, which makes a root view's size fixed (but it still can be updated with &lt;code&gt;setFrame:&lt;/code&gt;). The other three modes allow us to track React Native content's size updates. For instance, setting mode to &lt;code&gt;RCTRootViewSizeFlexibilityHeight&lt;/code&gt; will cause React Native to measure the content's height and pass that information back to &lt;code&gt;RCTRootView&lt;/code&gt;'s delegate. An arbitrary action can be performed within the delegate, including setting the root view's frame, so the content fits. The delegate is called only when the size of the content has changed.</source>
          <target state="translated">&lt;code&gt;RCTRootViewSizeFlexibilityNone&lt;/code&gt; 이 기본값이며 루트보기의 크기를 고정시킵니다 (그러나 여전히 &lt;code&gt;setFrame:&lt;/code&gt; 으로 업데이트 할 수 있음 ). 다른 세 가지 모드를 통해 React Native 컨텐츠의 크기 업데이트를 추적 할 수 있습니다. 예를 들어, 모드를 &lt;code&gt;RCTRootViewSizeFlexibilityHeight&lt;/code&gt; 로 설정 하면 React Native가 컨텐츠의 높이를 측정하고 해당 정보를 &lt;code&gt;RCTRootView&lt;/code&gt; 의 대리인 에게 다시 전달합니다 . 루트 뷰의 프레임 설정을 포함하여 대의원 내에서 임의의 작업을 수행 할 수 있으므로 내용이 맞습니다. 내용의 크기가 변경된 경우에만 대리인이 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="f38d72efd67ab9f4508e0c33fb5fb49a5eb72ed6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;RCT_EXPORT_METHOD&lt;/code&gt; supports all standard JSON object types, such as:</source>
          <target state="translated">&lt;code&gt;RCT_EXPORT_METHOD&lt;/code&gt; 는 다음과 같은 모든 표준 JSON 객체 유형을 지원합니다.</target>
        </trans-unit>
        <trans-unit id="e33fa8901194cfb3be1b1423bf78a31e786f8119" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;READ_CALENDAR&lt;/code&gt;: 'android.permission.READ_CALENDAR'</source>
          <target state="translated">&lt;code&gt;READ_CALENDAR&lt;/code&gt; : 'android.permission.READ_CALENDAR'</target>
        </trans-unit>
        <trans-unit id="d7dff09ba64f6e89f162352fce6dfab31723795d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;READ_CALL_LOG&lt;/code&gt;: 'android.permission.READ_CALL_LOG'</source>
          <target state="translated">&lt;code&gt;READ_CALL_LOG&lt;/code&gt; : 'android.permission.READ_CALL_LOG'</target>
        </trans-unit>
        <trans-unit id="074b5d356af195130bd0e18d50321d6ab18ac66d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;READ_CONTACTS&lt;/code&gt;: 'android.permission.READ_CONTACTS'</source>
          <target state="translated">&lt;code&gt;READ_CONTACTS&lt;/code&gt; : 'android.permission.READ_CONTACTS'</target>
        </trans-unit>
        <trans-unit id="73ca38def1223e769e06ae9667e87a39b125494b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;READ_EXTERNAL_STORAGE&lt;/code&gt;: 'android.permission.READ_EXTERNAL_STORAGE'</source>
          <target state="translated">&lt;code&gt;READ_EXTERNAL_STORAGE&lt;/code&gt; : 'android.permission.READ_EXTERNAL_STORAGE'</target>
        </trans-unit>
        <trans-unit id="8511e8a8e09d3de898ea6bed64c58ab6798454ac" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;READ_PHONE_STATE&lt;/code&gt;: 'android.permission.READ_PHONE_STATE'</source>
          <target state="translated">&lt;code&gt;READ_PHONE_STATE&lt;/code&gt; : 'android.permission.READ_PHONE_STATE'</target>
        </trans-unit>
        <trans-unit id="d5c13d7b13d84f74e535ff6a34a4da5082a7f0af" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;READ_SMS&lt;/code&gt;: 'android.permission.READ_SMS'</source>
          <target state="translated">&lt;code&gt;READ_SMS&lt;/code&gt; : 'android.permission.READ_SMS'</target>
        </trans-unit>
        <trans-unit id="6155cb614ddc663ce1011186eecb851d4cc852c1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;RECEIVE_MMS&lt;/code&gt;: 'android.permission.RECEIVE_MMS'</source>
          <target state="translated">&lt;code&gt;RECEIVE_MMS&lt;/code&gt; : 'android.permission.RECEIVE_MMS'</target>
        </trans-unit>
        <trans-unit id="6c2cb5772e4bb5e19dc9e29024709f42e3716ac9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;RECEIVE_SMS&lt;/code&gt;: 'android.permission.RECEIVE_SMS'</source>
          <target state="translated">&lt;code&gt;RECEIVE_SMS&lt;/code&gt; : 'android.permission.RECEIVE_SMS'</target>
        </trans-unit>
        <trans-unit id="13137e730b49365e92b21ea8960ff3e0eaad7356" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;RECEIVE_WAP_PUSH&lt;/code&gt;: 'android.permission.RECEIVE_WAP_PUSH'</source>
          <target state="translated">&lt;code&gt;RECEIVE_WAP_PUSH&lt;/code&gt; : 'android.permission.RECEIVE_WAP_PUSH'</target>
        </trans-unit>
        <trans-unit id="26ee95e5bf78071b6871531b5669ef390a10b7e7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;RECORD_AUDIO&lt;/code&gt;: 'android.permission.RECORD_AUDIO'</source>
          <target state="translated">&lt;code&gt;RECORD_AUDIO&lt;/code&gt; : 'android.permission.RECORD_AUDIO'</target>
        </trans-unit>
        <trans-unit id="a414f651dab3b0ba51734119ce920cd0eb48ce7f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;RNHighScores&lt;/code&gt; is the name of your module that will be used when you add a view to React Native from within your iOS application.</source>
          <target state="translated">&lt;code&gt;RNHighScores&lt;/code&gt; 는 iOS 애플리케이션 내에서 React Native 에보기를 추가 할 때 사용되는 모듈 이름입니다.</target>
        </trans-unit>
        <trans-unit id="10c3db8677e0ac4d77736dc02bf22da0c60e3f4a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ReactContextBaseJavaModule&lt;/code&gt; requires that a method called &lt;code&gt;getName&lt;/code&gt; is implemented. The purpose of this method is to return the string name of the &lt;code&gt;NativeModule&lt;/code&gt; which represents this class in JavaScript. So here we will call this &lt;code&gt;ToastExample&lt;/code&gt; so that we can access it through &lt;code&gt;React.NativeModules.ToastExample&lt;/code&gt; in JavaScript.</source>
          <target state="translated">&lt;code&gt;ReactContextBaseJavaModule&lt;/code&gt; 을 사용 하려면 &lt;code&gt;getName&lt;/code&gt; 이라는 메소드 가 구현되어 있어야합니다 . 이 메소드의 목적은 JavaScript에서이 클래스를 나타내는 &lt;code&gt;NativeModule&lt;/code&gt; 의 문자열 이름을 리턴하는 것 입니다. 여기서는 JavaScript에서 &lt;code&gt;React.NativeModules.ToastExample&lt;/code&gt; 을 통해 액세스 할 수 있도록 이 &lt;code&gt;ToastExample&lt;/code&gt; 을 호출합니다 .</target>
        </trans-unit>
        <trans-unit id="cbafb3b1d687d0c403440159724f04d32fddc20b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;SEND_SMS&lt;/code&gt;: 'android.permission.SEND_SMS'</source>
          <target state="translated">&lt;code&gt;SEND_SMS&lt;/code&gt; : 'android.permission.SEND_SMS'</target>
        </trans-unit>
        <trans-unit id="2d8b4039254b0a3d2e68ae57298a078c6c094901" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;SafeAreaView&lt;/code&gt; renders nested content and automatically applies paddings reflect the portion of the view that is not covered by navigation bars, tab bars, toolbars, and other ancestor views. Moreover, and most importantly, Safe Area's paddings reflect the physical limitation of the screen, such as rounded corners or camera notches (i.e. the sensor housing area on iPhone X).</source>
          <target state="translated">&lt;code&gt;SafeAreaView&lt;/code&gt; 는 내포 된 내용을 렌더링하고 탐색 막대, 탭 막대, 도구 모음 및 기타 조상보기에서 다루지 않는보기 부분을 자동으로 여백에 적용합니다. 또한 가장 중요한 것은 Safe Area의 패딩은 둥근 모서리 또는 카메라 노치 (예 : iPhone X의 센서 하우징 영역)와 같은 화면의 물리적 한계를 반영합니다.</target>
        </trans-unit>
        <trans-unit id="044bf55832cff3edc30fb6111b4514e9a3bb9f6b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;SavedPhotos&lt;/code&gt; // default</source>
          <target state="translated">&lt;code&gt;SavedPhotos&lt;/code&gt; // 기본</target>
        </trans-unit>
        <trans-unit id="230b868cecf9e47d19ddf6137d2ed6972876842b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ScrollView&lt;/code&gt; props...</source>
          <target state="translated">&lt;code&gt;ScrollView&lt;/code&gt; 소품 ...</target>
        </trans-unit>
        <trans-unit id="12454e6a159e27c3e57b1d3e173c1058f9c54323" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ScrollView&lt;/code&gt; simply renders all its react child components at once. That makes it very easy to understand and use.</source>
          <target state="translated">&lt;code&gt;ScrollView&lt;/code&gt; 는 모든 반응 자식 구성 요소를 한 번에 렌더링합니다. 따라서 이해하고 사용하기가 매우 쉽습니다.</target>
        </trans-unit>
        <trans-unit id="a13789791d06667647a56d4a91e0488b6e53f1e6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Text&lt;/code&gt; supports nesting, styling, and touch handling.</source>
          <target state="translated">&lt;code&gt;Text&lt;/code&gt; 는 중첩, 스타일 및 터치 처리를 지원합니다.</target>
        </trans-unit>
        <trans-unit id="6857a026937a1d49959278b1ef135486c26f55b9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;TextInput&lt;/code&gt; has by default a border at the bottom of its view. This border has its padding set by the background image provided by the system, and it cannot be changed. Solutions to avoid this is to either not set height explicitly, case in which the system will take care of displaying the border in the correct position, or to not display the border by setting &lt;code&gt;underlineColorAndroid&lt;/code&gt; to transparent.</source>
          <target state="translated">&lt;code&gt;TextInput&lt;/code&gt; 은 기본적으로보기 하단에 테두리가 있습니다. 이 테두리에는 시스템에서 제공 한 배경 이미지로 패딩이 설정되어 있으며 변경할 수 없습니다. 이를 피하기위한 해결책은 시스템이 정확한 위치에 테두리를 표시하는 경우 높이를 명시 적으로 설정하지 않거나 &lt;code&gt;underlineColorAndroid&lt;/code&gt; 를 투명 으로 설정하여 테두리를 표시하지 않는 것 입니다.</target>
        </trans-unit>
        <trans-unit id="95dfb51a598839a7ed79f52bf07adbcd9dd7f02d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;USE_SIP&lt;/code&gt;: 'android.permission.USE_SIP'</source>
          <target state="translated">&lt;code&gt;USE_SIP&lt;/code&gt; : 'android.permission.USE_SIP'</target>
        </trans-unit>
        <trans-unit id="53e208470eac19080a629ae9a7253b46527e5bd4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;View.props.onMoveShouldSetResponder: (event) =&amp;gt; [true | false]&lt;/code&gt;, where &lt;code&gt;event&lt;/code&gt; is a synthetic touch event as described above.</source>
          <target state="translated">&lt;code&gt;View.props.onMoveShouldSetResponder: (event) =&amp;gt; [true | false]&lt;/code&gt; 에서 &lt;code&gt;event&lt;/code&gt; 는 위에서 설명한 합성 터치 이벤트입니다.</target>
        </trans-unit>
        <trans-unit id="4f14af35d37874f30e724b1e853104ef77a9521c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;View.props.onMoveShouldSetResponder: (evt) =&amp;gt; true,&lt;/code&gt; - Called for every touch move on the View when it is not the responder: does this view want to &quot;claim&quot; touch responsiveness?</source>
          <target state="translated">&lt;code&gt;View.props.onMoveShouldSetResponder: (evt) =&amp;gt; true,&lt;/code&gt; -응답자가 아닌보기에서 모든 터치 이동에 대해 호출됩니다.이보기는 터치 응답 성을 &quot;고발&quot;하겠습니까?</target>
        </trans-unit>
        <trans-unit id="e2dd01c4835d5d54a7ec499e9254f5bafaf47ca8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;View.props.onMoveShouldSetResponderCapture: (event) =&amp;gt; [true | false]&lt;/code&gt;, where &lt;code&gt;event&lt;/code&gt; is a synthetic touch event as described above.</source>
          <target state="translated">&lt;code&gt;View.props.onMoveShouldSetResponderCapture: (event) =&amp;gt; [true | false]&lt;/code&gt; 에서 &lt;code&gt;event&lt;/code&gt; 는 위에서 설명한 합성 터치 이벤트입니다.</target>
        </trans-unit>
        <trans-unit id="769394f7ff30ef98f5192cddd5ecfadba660c42f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;View.props.onResponderGrant: (event) =&amp;gt; {}&lt;/code&gt;, where &lt;code&gt;event&lt;/code&gt; is a synthetic touch event as described above.</source>
          <target state="translated">&lt;code&gt;View.props.onResponderGrant: (event) =&amp;gt; {}&lt;/code&gt; 여기서 &lt;code&gt;event&lt;/code&gt; 는 위에서 설명한 합성 터치 이벤트입니다.</target>
        </trans-unit>
        <trans-unit id="1e1d1cb3d23d489f81ce25a7a291247276bc6098" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;View.props.onResponderGrant: (evt) =&amp;gt; {}&lt;/code&gt; - The View is now responding for touch events. This is the time to highlight and show the user what is happening</source>
          <target state="translated">&lt;code&gt;View.props.onResponderGrant: (evt) =&amp;gt; {}&lt;/code&gt; -보기가 터치 이벤트에 응답하고 있습니다. 사용자에게 무슨 일이 일어나고 있는지 강조하고 보여줄 때입니다.</target>
        </trans-unit>
        <trans-unit id="058dfe244882b6bbbe4198de3f444bf0c76967c1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;View.props.onResponderMove: (event) =&amp;gt; {}&lt;/code&gt;, where &lt;code&gt;event&lt;/code&gt; is a synthetic touch event as described above.</source>
          <target state="translated">&lt;code&gt;View.props.onResponderMove: (event) =&amp;gt; {}&lt;/code&gt; 여기서 &lt;code&gt;event&lt;/code&gt; 는 위에서 설명한 합성 터치 이벤트입니다.</target>
        </trans-unit>
        <trans-unit id="1cde9775c99dd71cc888cc8d7dda76d1b2c42471" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;View.props.onResponderMove: (evt) =&amp;gt; {}&lt;/code&gt; - The user is moving their finger</source>
          <target state="translated">&lt;code&gt;View.props.onResponderMove: (evt) =&amp;gt; {}&lt;/code&gt; -사용자가 손가락을 움직이고 있습니다</target>
        </trans-unit>
        <trans-unit id="40a9ac9793e9feb948485c01a27f4248b755899b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;View.props.onResponderReject: (event) =&amp;gt; {}&lt;/code&gt;, where &lt;code&gt;event&lt;/code&gt; is a synthetic touch event as described above.</source>
          <target state="translated">&lt;code&gt;View.props.onResponderReject: (event) =&amp;gt; {}&lt;/code&gt; 여기서 &lt;code&gt;event&lt;/code&gt; 는 위에서 설명한 합성 터치 이벤트입니다.</target>
        </trans-unit>
        <trans-unit id="c7eaac65d218c1c0e2080d6f98543e512d6276f1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;View.props.onResponderReject: (evt) =&amp;gt; {}&lt;/code&gt; - Something else is the responder right now and will not release it</source>
          <target state="translated">&lt;code&gt;View.props.onResponderReject: (evt) =&amp;gt; {}&lt;/code&gt; -응답자가 다른 것이므로 해제하지 않습니다</target>
        </trans-unit>
        <trans-unit id="cd389b718fb3a8a4e78dadcc4acd6463475d28ae" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;View.props.onResponderRelease: (event) =&amp;gt; {}&lt;/code&gt;, where &lt;code&gt;event&lt;/code&gt; is a synthetic touch event as described above.</source>
          <target state="translated">&lt;code&gt;View.props.onResponderRelease: (event) =&amp;gt; {}&lt;/code&gt; 여기서 &lt;code&gt;event&lt;/code&gt; 는 위에서 설명한 합성 터치 이벤트입니다.</target>
        </trans-unit>
        <trans-unit id="20d14dddc5af7645460ad8e2f9d6bfc5625c5f84" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;View.props.onResponderRelease: (evt) =&amp;gt; {}&lt;/code&gt; - Fired at the end of the touch, ie &quot;touchUp&quot;</source>
          <target state="translated">&lt;code&gt;View.props.onResponderRelease: (evt) =&amp;gt; {}&lt;/code&gt; -터치 종료시 시작됩니다 (예 : &quot;touchUp&quot;</target>
        </trans-unit>
        <trans-unit id="4d5558c0160ada184023e2682fe550cad337722b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;View.props.onResponderTerminate: (event) =&amp;gt; {}&lt;/code&gt;, where &lt;code&gt;event&lt;/code&gt; is a synthetic touch event as described above.</source>
          <target state="translated">&lt;code&gt;View.props.onResponderTerminate: (event) =&amp;gt; {}&lt;/code&gt; 여기서 &lt;code&gt;event&lt;/code&gt; 는 위에서 설명한 합성 터치 이벤트입니다.</target>
        </trans-unit>
        <trans-unit id="061a0a26e944568a78b87dadb4b3ca0046545ca0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;View.props.onResponderTerminate: (evt) =&amp;gt; {}&lt;/code&gt; - The responder has been taken from the View. Might be taken by other views after a call to &lt;code&gt;onResponderTerminationRequest&lt;/code&gt;, or might be taken by the OS without asking (happens with control center/ notification center on iOS)</source>
          <target state="translated">&lt;code&gt;View.props.onResponderTerminate: (evt) =&amp;gt; {}&lt;/code&gt; -응답자가보기에서 가져 왔습니다. &lt;code&gt;onResponderTerminationRequest&lt;/code&gt; 호출 후 다른 뷰에서 가져 오거나 묻지 않고 OS에서 발생할 수 있습니다 (iOS의 제어 센터 / 알림 센터가있는 경우)</target>
        </trans-unit>
        <trans-unit id="74b5828b16f8ef9e00030c292f55b532d4a76209" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;View.props.onResponderTerminationRequest: (event) =&amp;gt; {}&lt;/code&gt;, where &lt;code&gt;event&lt;/code&gt; is a synthetic touch event as described above.</source>
          <target state="translated">&lt;code&gt;View.props.onResponderTerminationRequest: (event) =&amp;gt; {}&lt;/code&gt; 여기서 &lt;code&gt;event&lt;/code&gt; 는 위에서 설명한 합성 터치 이벤트입니다.</target>
        </trans-unit>
        <trans-unit id="82c690779d792536e17899bfe992586081659245" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;View.props.onResponderTerminationRequest: (evt) =&amp;gt; true&lt;/code&gt; - Something else wants to become responder. Should this view release the responder? Returning true allows release</source>
          <target state="translated">&lt;code&gt;View.props.onResponderTerminationRequest: (evt) =&amp;gt; true&lt;/code&gt; 다른 것이 응답자가되고 싶어합니다. 이 뷰가 응답자를 해제해야합니까? true를 반환하면 릴리스가 허용됩니다.</target>
        </trans-unit>
        <trans-unit id="bb0a6d78f68ed36df58beccab79e8208840c7c5b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;View.props.onStartShouldSetResponder: (event) =&amp;gt; [true | false]&lt;/code&gt;, where &lt;code&gt;event&lt;/code&gt; is a synthetic touch event as described above.</source>
          <target state="translated">&lt;code&gt;View.props.onStartShouldSetResponder: (event) =&amp;gt; [true | false]&lt;/code&gt; 에서 &lt;code&gt;event&lt;/code&gt; 는 위에서 설명한 합성 터치 이벤트입니다.</target>
        </trans-unit>
        <trans-unit id="0a76ec7ec4f4eea57450bf1b44f1a9c7c43bd875" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;View.props.onStartShouldSetResponder: (evt) =&amp;gt; true,&lt;/code&gt; - Does this view want to become responder on the start of a touch?</source>
          <target state="translated">&lt;code&gt;View.props.onStartShouldSetResponder: (evt) =&amp;gt; true,&lt;/code&gt; -이 뷰는 터치 시작시 응답자가 되려고합니까?</target>
        </trans-unit>
        <trans-unit id="071079ad2744af54c77f9144a29bced9a205b0aa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;View.props.onStartShouldSetResponderCapture: (event) =&amp;gt; [true | false]&lt;/code&gt;, where &lt;code&gt;event&lt;/code&gt; is a synthetic touch event as described above.</source>
          <target state="translated">&lt;code&gt;View.props.onStartShouldSetResponderCapture: (event) =&amp;gt; [true | false]&lt;/code&gt; 에서 &lt;code&gt;event&lt;/code&gt; 는 위에서 설명한 합성 터치 이벤트입니다.</target>
        </trans-unit>
        <trans-unit id="8ec0e49aa840ffca924e4a4f173d29ffee96d628" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;View&lt;/code&gt; is designed to be nested inside other views and can have 0 to many children of any type.</source>
          <target state="translated">&lt;code&gt;View&lt;/code&gt; 는 다른 뷰 안에 중첩되도록 설계되었으며 0에서 많은 유형의 자식을 가질 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="16206a26f6f6b2c3b5492ee5e6b7eefa9399850b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;View&lt;/code&gt;s are designed to be used with &lt;a href=&quot;style&quot;&gt;&lt;code&gt;StyleSheet&lt;/code&gt;&lt;/a&gt; for clarity and performance, although inline styles are also supported.</source>
          <target state="translated">&lt;code&gt;View&lt;/code&gt; 인라인 스타일도 지원되지만 View 는 명확성과 성능을 위해 &lt;a href=&quot;style&quot;&gt; &lt;code&gt;StyleSheet&lt;/code&gt; &lt;/a&gt; 와 함께 사용하도록 설계되었습니다 .</target>
        </trans-unit>
        <trans-unit id="fea222cfc32c00ce827409644702b31f0eea9f84" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;VirtualizedList&lt;/code&gt; props...</source>
          <target state="translated">&lt;code&gt;VirtualizedList&lt;/code&gt; 리스트 소품 ...</target>
        </trans-unit>
        <trans-unit id="9179cd153f9f08a0d6c47ced674919e1ad63ad36" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;WRITE_CALENDAR&lt;/code&gt;: 'android.permission.WRITE_CALENDAR'</source>
          <target state="translated">&lt;code&gt;WRITE_CALENDAR&lt;/code&gt; : 'android.permission.WRITE_CALENDAR'</target>
        </trans-unit>
        <trans-unit id="389b2b8c8eee837de87da9cac082c1c9696ec894" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;WRITE_CALL_LOG&lt;/code&gt;: 'android.permission.WRITE_CALL_LOG'</source>
          <target state="translated">&lt;code&gt;WRITE_CALL_LOG&lt;/code&gt; : 'android.permission.WRITE_CALL_LOG'</target>
        </trans-unit>
        <trans-unit id="dcd91b170ab8220c0146f0e0952f5fd454895437" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;WRITE_CONTACTS&lt;/code&gt;: 'android.permission.WRITE_CONTACTS'</source>
          <target state="translated">&lt;code&gt;WRITE_CONTACTS&lt;/code&gt; : 'android.permission.WRITE_CONTACTS'</target>
        </trans-unit>
        <trans-unit id="2b25581641d424f9d3389a335f1c0590b4a71ab2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;WRITE_EXTERNAL_STORAGE&lt;/code&gt;: 'android.permission.WRITE_EXTERNAL_STORAGE'</source>
          <target state="translated">&lt;code&gt;WRITE_EXTERNAL_STORAGE&lt;/code&gt; : 'android.permission.WRITE_EXTERNAL_STORAGE'</target>
        </trans-unit>
        <trans-unit id="8c2e4b131b7abc0794f29704fcb65053c2fac2b9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;WebView&lt;/code&gt; renders web content in a native view.</source>
          <target state="translated">&lt;code&gt;WebView&lt;/code&gt; 는 웹 컨텐츠를 기본보기로 렌더링합니다.</target>
        </trans-unit>
        <trans-unit id="85a8888b57f2d29a7158fd2b67e28d20e3af39a5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;active&lt;/code&gt; - The app is running in the foreground</source>
          <target state="translated">&lt;code&gt;active&lt;/code&gt; - 앱이 포 그라운드에서 실행 중입니다</target>
        </trans-unit>
        <trans-unit id="dbb2c1fef4699c5a01537a92d00f2fdb426fae58" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;after&lt;/code&gt; : {string} : A cursor that matches &lt;code&gt;page_info { end_cursor }&lt;/code&gt; returned from a previous call to &lt;code&gt;getPhotos&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;after&lt;/code&gt; : {문자열} : 일치하는 커서 &lt;code&gt;page_info { end_cursor }&lt;/code&gt; 에 대한 이전 호출에서 반환 &lt;code&gt;getPhotos&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="a5b95a98a608cffc83cdef5bb24f8e1a2842fe8c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;alert&lt;/code&gt; :boolean</source>
          <target state="translated">&lt;code&gt;alert&lt;/code&gt; : 부울</target>
        </trans-unit>
        <trans-unit id="de1e43b18afc088caeb29f9a43de45c10944be8d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;alertAction&lt;/code&gt; : The &quot;action&quot; displayed beneath an actionable notification. Defaults to &quot;view&quot;;</source>
          <target state="translated">&lt;code&gt;alertAction&lt;/code&gt; : 조치 가능한 알림 아래에 &quot;조치&quot;가 표시됩니다. 기본값은 &quot;보기&quot;입니다.</target>
        </trans-unit>
        <trans-unit id="dc86b4fdd32456de85f68e9a2b386dace17115e3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;alertBody&lt;/code&gt; : The message displayed in the notification alert.</source>
          <target state="translated">&lt;code&gt;alertBody&lt;/code&gt; : 알림 알림에 표시되는 메시지입니다.</target>
        </trans-unit>
        <trans-unit id="8a67f42e6ec04dccb3bdb969ace7496578ccc885" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;alertTitle&lt;/code&gt; : The text displayed as the title of the notification alert.</source>
          <target state="translated">&lt;code&gt;alertTitle&lt;/code&gt; : 알림 경고의 제목으로 표시되는 텍스트입니다.</target>
        </trans-unit>
        <trans-unit id="b3a95b5a71f011a89f0914e2e72a7ab9a7d81cdc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;alignContent&lt;/code&gt; controls how rows align in the cross direction, overriding the &lt;code&gt;alignContent&lt;/code&gt; of the parent. See &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/align-content&quot;&gt;https://developer.mozilla.org/en-US/docs/Web/CSS/align-content&lt;/a&gt; for more details.</source>
          <target state="translated">&lt;code&gt;alignContent&lt;/code&gt; 는 행의 가로 방향 정렬 방식을 제어 하여 부모 의 &lt;code&gt;alignContent&lt;/code&gt; 를 재정의합니다 . 자세한 내용은 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/align-content&quot;&gt;https://developer.mozilla.org/en-US/docs/Web/CSS/align-content&lt;/a&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="6b7d94d4913ddaff7d01d6ee67ac812515f9c4f3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;alignItems&lt;/code&gt; aligns children in the cross direction. For example, if children are flowing vertically, &lt;code&gt;alignItems&lt;/code&gt; controls how they align horizontally. It works like &lt;code&gt;align-items&lt;/code&gt; in CSS (default: stretch). See &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/align-items&quot;&gt;https://developer.mozilla.org/en-US/docs/Web/CSS/align-items&lt;/a&gt; for more details.</source>
          <target state="translated">&lt;code&gt;alignItems&lt;/code&gt; 는 자식을 가로 방향으로 정렬합니다. 예를 들어 자식이 세로로 흐르는 경우 &lt;code&gt;alignItems&lt;/code&gt; 는 가로로 정렬하는 방법을 제어합니다. CSS에서 &lt;code&gt;align-items&lt;/code&gt; 처럼 작동합니다 (기본값 : stretch). 자세한 내용은 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/align-items&quot;&gt;https://developer.mozilla.org/en-US/docs/Web/CSS/align-items&lt;/a&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="7560954ae705ecf10bf4a389189d7958dae3925b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;alignSelf&lt;/code&gt; controls how a child aligns in the cross direction, overriding the &lt;code&gt;alignItems&lt;/code&gt; of the parent. It works like &lt;code&gt;align-self&lt;/code&gt; in CSS (default: auto). See &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/align-self&quot;&gt;https://developer.mozilla.org/en-US/docs/Web/CSS/align-self&lt;/a&gt; for more details.</source>
          <target state="translated">&lt;code&gt;alignSelf&lt;/code&gt; 는 자식이 십자 방향으로 정렬되는 방식을 제어 하여 부모 의 &lt;code&gt;alignItems&lt;/code&gt; 를 재정의합니다 . CSS에서 &lt;code&gt;align-self&lt;/code&gt; 처럼 작동합니다 (기본값 : auto). 자세한 내용은 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/align-self&quot;&gt;https://developer.mozilla.org/en-US/docs/Web/CSS/align-self&lt;/a&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="fc5f3010a2d199b73c707b317b1a8b54b2d4d897" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;altitude&lt;/code&gt;: {number}</source>
          <target state="translated">&lt;code&gt;altitude&lt;/code&gt; : {번호}</target>
        </trans-unit>
        <trans-unit id="1e4241db4d39cb85295423006b826c4d1157fae5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;announcement&lt;/code&gt;: The string announced by the screen reader.</source>
          <target state="translated">&lt;code&gt;announcement&lt;/code&gt; : 스크린 리더가 발표 한 문자열.</target>
        </trans-unit>
        <trans-unit id="169504b547b2798e93815625803d006a0eb4d9a4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;announcementFinished&lt;/code&gt;: iOS-only event. Fires when the screen reader has finished making an announcement. The argument to the event handler is a dictionary with these keys:</source>
          <target state="translated">&lt;code&gt;announcementFinished&lt;/code&gt; : iOS 전용 이벤트. 스크린 리더가 발표를 마치면 시작됩니다. 이벤트 핸들러에 대한 인수는 다음 키가 포함 된 사전입니다.</target>
        </trans-unit>
        <trans-unit id="e0cff87245279eb2869128ff45ee9cc5d6155fd8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;applicationIconBadgeNumber&lt;/code&gt; (optional) : The number to display as the app's icon badge. Setting the number to 0 removes the icon badge.</source>
          <target state="translated">&lt;code&gt;applicationIconBadgeNumber&lt;/code&gt; (선택 사항) : 앱의 아이콘 배지로 표시 할 숫자입니다. 숫자를 0으로 설정하면 아이콘 배지가 제거됩니다.</target>
        </trans-unit>
        <trans-unit id="ad018ad045d09fee7ae8ddd22000ce099184f9ec" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;applicationIconBadgeNumber&lt;/code&gt; (optional) : The number to display as the app's icon badge. The default value of this property is 0, which means that no badge is displayed.</source>
          <target state="translated">&lt;code&gt;applicationIconBadgeNumber&lt;/code&gt; (선택 사항) : 앱의 아이콘 배지로 표시 할 숫자입니다. 이 속성의 기본값은 0이며 이는 배지가 표시되지 않음을 의미합니다.</target>
        </trans-unit>
        <trans-unit id="0fea321f21a0bba006024a64fd962b820fc0c9dc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;assetType&lt;/code&gt; : {string} : Specifies filter on asset type. Valid values are:</source>
          <target state="translated">&lt;code&gt;assetType&lt;/code&gt; : {string} : 자산 유형에 대한 필터를 지정합니다. 유효한 값은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="a00807487a5faad3732ecc289505d9f9a4eea09d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;auto&lt;/code&gt;: Use heuristics to pick between &lt;code&gt;resize&lt;/code&gt; and &lt;code&gt;scale&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;auto&lt;/code&gt; : 사용 휴리스틱 사이에 선택하는 &lt;code&gt;resize&lt;/code&gt; 및 &lt;code&gt;scale&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="8ab8a89b676eaa292675ea44743664fce4a35518" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;background&lt;/code&gt; - The app is running in the background. The user is either:</source>
          <target state="translated">&lt;code&gt;background&lt;/code&gt; - 앱이 백그라운드에서 실행 중입니다. 사용자는 다음 중 하나입니다.</target>
        </trans-unit>
        <trans-unit id="ec01b7d247cd75e28fbf37fbe0af5d1152caecea" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;badge&lt;/code&gt; :boolean</source>
          <target state="translated">&lt;code&gt;badge&lt;/code&gt; : 부울</target>
        </trans-unit>
        <trans-unit id="d719280cdc66b354bdfb537f6c1b3e654ba3a9a0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;bluetooth&lt;/code&gt; - device is connected via Bluetooth</source>
          <target state="translated">&lt;code&gt;bluetooth&lt;/code&gt; -기기가 블루투스를 통해 연결됨</target>
        </trans-unit>
        <trans-unit id="69d17cbb79eace59c8d442f556e8783f072190d5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;body&lt;/code&gt; : The body of this notification.</source>
          <target state="translated">&lt;code&gt;body&lt;/code&gt; :이 알림의 본문입니다.</target>
        </trans-unit>
        <trans-unit id="8c05458ada702cb04313c4d15371209ec0b877bd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;borderBottomWidth&lt;/code&gt; works like &lt;code&gt;border-bottom-width&lt;/code&gt; in CSS. See &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/border-bottom-width&quot;&gt;https://developer.mozilla.org/en-US/docs/Web/CSS/border-bottom-width&lt;/a&gt; for more details.</source>
          <target state="translated">&lt;code&gt;borderBottomWidth&lt;/code&gt; 는 CSS에서 &lt;code&gt;border-bottom-width&lt;/code&gt; 처럼 작동합니다 . 자세한 내용은 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/border-bottom-width&quot;&gt;https://developer.mozilla.org/en-US/docs/Web/CSS/border-bottom-width&lt;/a&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="6fe0b63b47838d7280a214748de61989a056212b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;borderLeftWidth&lt;/code&gt; works like &lt;code&gt;border-left-width&lt;/code&gt; in CSS. See &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/border-left-width&quot;&gt;https://developer.mozilla.org/en-US/docs/Web/CSS/border-left-width&lt;/a&gt; for more details.</source>
          <target state="translated">&lt;code&gt;borderLeftWidth&lt;/code&gt; 는 CSS에서 &lt;code&gt;border-left-width&lt;/code&gt; 와 같이 작동합니다 . 자세한 내용은 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/border-left-width&quot;&gt;https://developer.mozilla.org/en-US/docs/Web/CSS/border-left-width&lt;/a&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="bd26aadf37f2659148623383aff0686feb2385b4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;borderRightWidth&lt;/code&gt; works like &lt;code&gt;border-right-width&lt;/code&gt; in CSS. See &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/border-right-width&quot;&gt;https://developer.mozilla.org/en-US/docs/Web/CSS/border-right-width&lt;/a&gt; for more details.</source>
          <target state="translated">&lt;code&gt;borderRightWidth&lt;/code&gt; 는 CSS에서 &lt;code&gt;border-right-width&lt;/code&gt; 처럼 작동합니다 . 자세한 내용은 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/border-right-width&quot;&gt;https://developer.mozilla.org/en-US/docs/Web/CSS/border-right-width&lt;/a&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="d2ddbf99242467ace304177b85105076ffc83d0c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;borderTopWidth&lt;/code&gt; works like &lt;code&gt;border-top-width&lt;/code&gt; in CSS. See &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/border-top-width&quot;&gt;https://developer.mozilla.org/en-US/docs/Web/CSS/border-top-width&lt;/a&gt; for more details.</source>
          <target state="translated">&lt;code&gt;borderTopWidth&lt;/code&gt; 는 CSS에서 &lt;code&gt;border-top-width&lt;/code&gt; 처럼 작동합니다 . 자세한 내용은 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/border-top-width&quot;&gt;https://developer.mozilla.org/en-US/docs/Web/CSS/border-top-width&lt;/a&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="5f4d44fb5026b55a385b712cb76423bf73c5cb3e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;borderWidth&lt;/code&gt; works like &lt;code&gt;border-width&lt;/code&gt; in CSS. See &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/border-width&quot;&gt;https://developer.mozilla.org/en-US/docs/Web/CSS/border-width&lt;/a&gt; for more details.</source>
          <target state="translated">&lt;code&gt;borderWidth&lt;/code&gt; 는 CSS에서 &lt;code&gt;border-width&lt;/code&gt; 처럼 작동합니다 . 자세한 내용은 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/border-width&quot;&gt;https://developer.mozilla.org/en-US/docs/Web/CSS/border-width&lt;/a&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="9078aeb175f8ae7d9d39c131083ec8654a1cbac0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;bottom&lt;/code&gt; is the number of logical pixels to offset the bottom edge of this component.</source>
          <target state="translated">&lt;code&gt;bottom&lt;/code&gt; 은이 구성 요소의 아래쪽 가장자리를 오프셋 할 논리 픽셀 수입니다.</target>
        </trans-unit>
        <trans-unit id="8492f768b394dbdc9eec8d9b3f76c44ce2149ccd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;bounciness&lt;/code&gt;: Controls bounciness. Default 8.</source>
          <target state="translated">&lt;code&gt;bounciness&lt;/code&gt; : 바운싱을 제어합니다. 기본값 8.</target>
        </trans-unit>
        <trans-unit id="2def52c698136016247c32ef7f66073b55329616" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;callback&lt;/code&gt; will be invoked with a &lt;code&gt;permissions&lt;/code&gt; object:</source>
          <target state="translated">&lt;code&gt;callback&lt;/code&gt; 은 &lt;code&gt;permissions&lt;/code&gt; 객체 로 호출됩니다 .</target>
        </trans-unit>
        <trans-unit id="1c0d5ade1a5d2b9c30ce27bc25cf3d90f44281c5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;cancelButtonIndex&lt;/code&gt; (int) - index of cancel button in &lt;code&gt;options&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;cancelButtonIndex&lt;/code&gt; (int)- &lt;code&gt;options&lt;/code&gt; 의 취소 버튼의 인덱스</target>
        </trans-unit>
        <trans-unit id="6eadd624376825399c6e25e4c7f5b56a240e6c7d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;category&lt;/code&gt; : The category of this notification, if has one.</source>
          <target state="translated">&lt;code&gt;category&lt;/code&gt; :이 알림의 범주입니다 (있는 경우).</target>
        </trans-unit>
        <trans-unit id="8a8596bfef774e4904f12d11b3c80ee0906e90e2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;category&lt;/code&gt; : The category of this notification, required for actionable notifications (optional).</source>
          <target state="translated">&lt;code&gt;category&lt;/code&gt; : 실행 가능한 알림에 필요한이 알림의 범주입니다 (선택 사항).</target>
        </trans-unit>
        <trans-unit id="d46a4f2576ee9a197aee18cca3eee19e6e259e42" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;cellular&lt;/code&gt; - device is connected via Edge, 3G, WiMax, or LTE</source>
          <target state="translated">&lt;code&gt;cellular&lt;/code&gt; -장치가 Edge, 3G, WiMax 또는 LTE를 통해 연결됨</target>
        </trans-unit>
        <trans-unit id="022033db1446b77cf82a2a56c38db3d509c44d73" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;center&lt;/code&gt;: Center the image in the view along both dimensions. If the image is larger than the view, scale it down uniformly so that it is contained in the view.</source>
          <target state="translated">&lt;code&gt;center&lt;/code&gt; : 뷰에서 이미지를 두 차원을 따라 중앙에 놓습니다. 이미지가보기보다 큰 경우 이미지가보기에 포함되도록 균일하게 축소하십시오.</target>
        </trans-unit>
        <trans-unit id="cd9e5fb9de2621e2a0549e5d8a2471205585e70b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;change&lt;/code&gt;: Fires when a property within the &lt;code&gt;Dimensions&lt;/code&gt; object changes. The argument to the event handler is an object with &lt;code&gt;window&lt;/code&gt; and &lt;code&gt;screen&lt;/code&gt; properties whose values are the same as the return values of &lt;code&gt;Dimensions.get('window')&lt;/code&gt; and &lt;code&gt;Dimensions.get('screen')&lt;/code&gt;, respectively.</source>
          <target state="translated">&lt;code&gt;change&lt;/code&gt; : &lt;code&gt;Dimensions&lt;/code&gt; 객체 내의 속성이 변경 되면 시작 됩니다. 이벤트 핸들러에 대한 인수 는 값이 각각 &lt;code&gt;Dimensions.get('window')&lt;/code&gt; 및 &lt;code&gt;Dimensions.get('screen')&lt;/code&gt; 의 반환 값과 동일한 &lt;code&gt;window&lt;/code&gt; 및 &lt;code&gt;screen&lt;/code&gt; 속성을 가진 객체입니다 .</target>
        </trans-unit>
        <trans-unit id="97a68b958589b998cf8a44610fa3402f8de7e5b1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;change&lt;/code&gt;: Fires when the state of the screen reader changes. The argument to the event handler is a boolean. The boolean is &lt;code&gt;true&lt;/code&gt; when a screen reader is enabled and &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="translated">&lt;code&gt;change&lt;/code&gt; : 스크린 리더 상태가 변경 되면 시작됩니다. 이벤트 핸들러에 대한 인수는 부울입니다. 화면 판독기가 활성화되면 부울은 &lt;code&gt;true&lt;/code&gt; 이고 그렇지 않으면 &lt;code&gt;false&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="acd40e46f686b396cb4cf3905a87b5564c75a0b3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;change&lt;/code&gt;: This event is deprecated. Listen to &lt;code&gt;connectionChange&lt;/code&gt; instead. Fires when the network status changes. The argument to the event handler is one of the deprecated connectivity types listed above.</source>
          <target state="translated">&lt;code&gt;change&lt;/code&gt; :이 이벤트는 더 이상 사용되지 않습니다. &lt;code&gt;connectionChange&lt;/code&gt; 를 대신 들어보십시오 . 네트워크 상태가 변경되면 발생합니다. 이벤트 핸들러에 대한 인수는 위에 나열된 더 이상 사용되지 않는 연결 유형 중 하나입니다.</target>
        </trans-unit>
        <trans-unit id="b5d8a49d76576b31d63c0ac7fe216186e460f7b2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;changedTouches&lt;/code&gt; - Array of all touch events that have changed since the last event</source>
          <target state="translated">&lt;code&gt;changedTouches&lt;/code&gt; - 마지막 이벤트 이후 변경된 모든 터치 이벤트의 배열</target>
        </trans-unit>
        <trans-unit id="fc6c11e187794a6f5ee3bf059789c076577697e2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;changedTouches&lt;/code&gt; - Array of all touch events that have changed since the last event.</source>
          <target state="translated">&lt;code&gt;changedTouches&lt;/code&gt; - 마지막 이벤트 이후 변경된 모든 터치 이벤트의 배열입니다.</target>
        </trans-unit>
        <trans-unit id="a6480cfba0a6e4989a952fe3067cdc35b9a6f3e5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;characters&lt;/code&gt;: all characters.</source>
          <target state="translated">&lt;code&gt;characters&lt;/code&gt; : 모든 문자.</target>
        </trans-unit>
        <trans-unit id="bf5fc96bfece7b2f20dcf0006579b2ed174877ac" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;clip&lt;/code&gt; - Lines are not drawn past the edge of the text container.</source>
          <target state="translated">&lt;code&gt;clip&lt;/code&gt; -텍스트 컨테이너의 가장자리를지나 선이 그려지지 않습니다.</target>
        </trans-unit>
        <trans-unit id="a49ddbe6d05848b032def56a0a268018f30fc805" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;connectionChange&lt;/code&gt;: Fires when the network status changes. The argument to the event handler is an object with keys:</source>
          <target state="translated">&lt;code&gt;connectionChange&lt;/code&gt; : 네트워크 상태가 변경되면 시작됩니다. 이벤트 핸들러에 대한 인수는 키가있는 객체입니다.</target>
        </trans-unit>
        <trans-unit id="65e4d43318d654a28e83132c3b8302942a99be01" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;contain&lt;/code&gt;: Scale the image uniformly (maintain the image's aspect ratio) so that both dimensions (width and height) of the image will be equal to or less than the corresponding dimension of the view (minus padding).</source>
          <target state="translated">&lt;code&gt;contain&lt;/code&gt; : 이미지의 크기 (너비와 높이)가보기의 해당 치수 (마이너스 패딩)와 같거나 작도록 이미지를 균일하게 조정합니다 (이미지의 가로 세로 비율 유지).</target>
        </trans-unit>
        <trans-unit id="3febcb6e41f928672a6f96863595d2c94b592415" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;cover&lt;/code&gt;: Scale the image uniformly (maintain the image's aspect ratio) so that both dimensions (width and height) of the image will be equal to or larger than the corresponding dimension of the view (minus padding).</source>
          <target state="translated">&lt;code&gt;cover&lt;/code&gt; : 이미지의 크기 (너비와 높이)가보기의 해당 크기 (마이너스 패딩)와 같거나 커지도록 이미지의 크기를 균일하게 조정합니다 (이미지의 가로 세로 비율 유지).</target>
        </trans-unit>
        <trans-unit id="eaf251dcf43e2047c2e7eaa9db47215e601ac937" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;create&lt;/code&gt;, config for animating in new views (see &lt;code&gt;Anim&lt;/code&gt; type)</source>
          <target state="translated">&lt;code&gt;create&lt;/code&gt; 새 뷰에서 애니메이션을 생성하기위한 , 구성 작성 ( &lt;code&gt;Anim&lt;/code&gt; 유형 참조 )</target>
        </trans-unit>
        <trans-unit id="9e23e3ed2f9fde8ea51d57be2eb4da49c48d04b6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;currentHeight&lt;/code&gt; (Android only) The height of the status bar.</source>
          <target state="translated">&lt;code&gt;currentHeight&lt;/code&gt; (Android 만 해당) 상태 표시 줄의 높이입니다.</target>
        </trans-unit>
        <trans-unit id="fc17b2c4a526836cb70f4e915f760f43e5c77e8f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;damping&lt;/code&gt;: Defines how the spring&amp;rsquo;s motion should be damped due to the forces of friction. Default 10.</source>
          <target state="translated">&lt;code&gt;damping&lt;/code&gt; : 마찰력으로 인해 스프링의 움직임이 감쇠되는 방법을 정의합니다. 기본 10.</target>
        </trans-unit>
        <trans-unit id="fc429b4f84224e8e605756a4a2b40df412ba392f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;date&lt;/code&gt; (&lt;code&gt;Date&lt;/code&gt; object or timestamp in milliseconds) - date to show by default</source>
          <target state="translated">&lt;code&gt;date&lt;/code&gt; ( &lt;code&gt;Date&lt;/code&gt; 오브젝트 또는 시간 소인 (밀리 초))-기본적으로 표시 할 날짜</target>
        </trans-unit>
        <trans-unit id="ff12c2d17c16d1336e15f49ce915cb25d17a668d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;debug&lt;/code&gt; will turn on extra logging and visual overlays to aid with debugging both usage and implementation, but with a significant perf hit.</source>
          <target state="translated">&lt;code&gt;debug&lt;/code&gt; 는 추가 로깅 및 시각적 오버레이를 켜서 사용 및 구현을 디버깅하는 데 도움이되지만 성능이 크게 저하됩니다.</target>
        </trans-unit>
        <trans-unit id="43bea0c5aed56454320413a4ca7773801a1a5c53" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;deceleration&lt;/code&gt;: Rate of decay. Default 0.997.</source>
          <target state="translated">&lt;code&gt;deceleration&lt;/code&gt; : 감쇄율. 기본값은 0.997입니다.</target>
        </trans-unit>
        <trans-unit id="e2823fb4cdf5b7f93fc7101db3e9e42cd14037a4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;default&lt;/code&gt;: Use the native platforms default strategy.</source>
          <target state="translated">&lt;code&gt;default&lt;/code&gt; : 기본 플랫폼 기본 전략을 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="578b1e2180c6371d05471a81ff8c7914b443fc61" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;delay&lt;/code&gt;: Start the animation after delay (milliseconds). Default 0.</source>
          <target state="translated">&lt;code&gt;delay&lt;/code&gt; : 지연 후 애니메이션을 시작합니다 (밀리 초). 기본값은 0입니다.</target>
        </trans-unit>
        <trans-unit id="9febc79594a3bbf1cd02433822081036e59afd44" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;destructiveButtonIndex&lt;/code&gt; (int) - index of destructive button in &lt;code&gt;options&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;destructiveButtonIndex&lt;/code&gt; (int)- &lt;code&gt;options&lt;/code&gt; 의 파괴 버튼 인덱스</target>
        </trans-unit>
        <trans-unit id="513cc85138ba0418c776085a17d0edd247c1d409" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;direction&lt;/code&gt; specifies the directional flow of the user interface. The default is &lt;code&gt;inherit&lt;/code&gt;, except for root node which will have value based on the current locale. See &lt;a href=&quot;https://facebook.github.io/yoga/docs/rtl/&quot;&gt;https://facebook.github.io/yoga/docs/rtl/&lt;/a&gt; for more details.</source>
          <target state="translated">&lt;code&gt;direction&lt;/code&gt; 은 사용자 인터페이스의 방향 흐름을 지정합니다. 현재 로케일에 따라 값을 갖는 루트 노드를 제외하고 기본값은 &lt;code&gt;inherit&lt;/code&gt; 입니다. 자세한 내용은 &lt;a href=&quot;https://facebook.github.io/yoga/docs/rtl/&quot;&gt;https://facebook.github.io/yoga/docs/rtl/&lt;/a&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="3e288105a864383db30ba75512fdf1594b690779" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;display&lt;/code&gt; sets the display type of this component.</source>
          <target state="translated">&lt;code&gt;display&lt;/code&gt; 는이 컴포넌트의 표시 유형을 설정합니다.</target>
        </trans-unit>
        <trans-unit id="c8e44a944f88b32bb93e523b58b2a6781f343a1a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;distanceFilter&lt;/code&gt; (m)</source>
          <target state="translated">&lt;code&gt;distanceFilter&lt;/code&gt; (m)</target>
        </trans-unit>
        <trans-unit id="936f68a2c1f88fa1a79adac8933514e7daf0e5f4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;duration&lt;/code&gt; in milliseconds</source>
          <target state="translated">&lt;code&gt;duration&lt;/code&gt; 밀리 초 단위의 지속 시간</target>
        </trans-unit>
        <trans-unit id="731a92ea87d2fce924499e16a443df426da8fc84" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;duration&lt;/code&gt;: Length of animation (milliseconds). Default 500.</source>
          <target state="translated">&lt;code&gt;duration&lt;/code&gt; : 애니메이션 길이 (밀리 초). 기본값은 500입니다.</target>
        </trans-unit>
        <trans-unit id="e0288ee9b9277785a8bdaa70d3693f5a47abb0a6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;dx&lt;/code&gt; - accumulated distance of the gesture since the touch started</source>
          <target state="translated">&lt;code&gt;dx&lt;/code&gt; - 터치 시작 이후 제스처의 누적 거리</target>
        </trans-unit>
        <trans-unit id="49ea1031c8f495ca5299613440265af289c0d580" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;dy&lt;/code&gt; - accumulated distance of the gesture since the touch started</source>
          <target state="translated">&lt;code&gt;dy&lt;/code&gt; - 터치가 시작된 이후 제스처의 누적 거리</target>
        </trans-unit>
        <trans-unit id="7014f92b9f223547d1034a4d149e94a6748699d9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;easing&lt;/code&gt;: Easing function to define curve. Default is &lt;code&gt;Easing.inOut(Easing.ease)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;easing&lt;/code&gt; : 곡선을 정의하는 완화 기능. 기본값은 &lt;code&gt;Easing.inOut(Easing.ease)&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="39a4cdbc05be8d15d3b502abb990216728efdb79" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;edges&lt;/code&gt; : {Array</source>
          <target state="translated">&lt;code&gt;edges&lt;/code&gt; : {배열</target>
        </trans-unit>
        <trans-unit id="eaa2cf160366e43edaff25832d29066d197635cc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;effectiveType&lt;/code&gt;: An &lt;code&gt;EffectiveConnectionType&lt;/code&gt; (listed above)</source>
          <target state="translated">&lt;code&gt;effectiveType&lt;/code&gt; : &lt;code&gt;EffectiveConnectionType&lt;/code&gt; (위에 나열된)</target>
        </trans-unit>
        <trans-unit id="2e1ce89573931e74345114cf96f540fd61d7d707" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;enableHighAccuracy&lt;/code&gt; (bool)</source>
          <target state="translated">&lt;code&gt;enableHighAccuracy&lt;/code&gt; (부울)</target>
        </trans-unit>
        <trans-unit id="66d3c7d2c0724bc156bf74d7f33324fc06f4b30c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;enableHighAccuracy&lt;/code&gt; (bool) - On Android, if the location is cached this can return almost immediately, or it will request an update which might take a while.</source>
          <target state="translated">&lt;code&gt;enableHighAccuracy&lt;/code&gt; (bool) -Android 에서 위치가 캐시되면 거의 즉시 리턴되거나 시간이 걸릴 수있는 업데이트를 요청합니다.</target>
        </trans-unit>
        <trans-unit id="d04ef4cb89528e0aac54fc18491249998f62c4e6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;end_cursor&lt;/code&gt;: {string}</source>
          <target state="translated">&lt;code&gt;end_cursor&lt;/code&gt; : {string}</target>
        </trans-unit>
        <trans-unit id="eb4d42c207b8380fbdafa81bffcaeec86a7e3bd2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ethernet&lt;/code&gt; - device is connected via Ethernet</source>
          <target state="translated">&lt;code&gt;ethernet&lt;/code&gt; -장치가 이더넷을 통해 연결됨</target>
        </trans-unit>
        <trans-unit id="b2e181b739d2a4ba4c5881d76a9fe26f73269538" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;evt&lt;/code&gt; is a synthetic touch event with the following form:</source>
          <target state="translated">&lt;code&gt;evt&lt;/code&gt; 는 다음과 같은 형식의 합성 터치 이벤트입니다.</target>
        </trans-unit>
        <trans-unit id="3463a977fb161be864f04c11085e5405d5f3d579" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;excludedActivityTypes&lt;/code&gt; (array) - the activities to exclude from the ActionSheet</source>
          <target state="translated">&lt;code&gt;excludedActivityTypes&lt;/code&gt; (array)-ActionSheet에서 제외 할 활동</target>
        </trans-unit>
        <trans-unit id="4f66995f09877092eccf53eae795b62182dbe45e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fade&lt;/code&gt; fades into view</source>
          <target state="translated">&lt;code&gt;fade&lt;/code&gt; 페이드</target>
        </trans-unit>
        <trans-unit id="c5fdeaed3f52a00254d081c7c3af1521f9e75f12" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;false&lt;/code&gt;, deprecated, use 'never' instead</source>
          <target state="translated">&lt;code&gt;false&lt;/code&gt; , 더 이상 사용되지 않으며 대신 'never'를 사용하십시오</target>
        </trans-unit>
        <trans-unit id="23b1764971e51ba4d2c873b14d7e453911e97136" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fireDate&lt;/code&gt; : The date and time when the system should deliver the notification.</source>
          <target state="translated">&lt;code&gt;fireDate&lt;/code&gt; : 시스템이 알림을 전달해야하는 날짜 및 시간입니다.</target>
        </trans-unit>
        <trans-unit id="d8a680d2ab071c3e47472942026e3da453885e48" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;first&lt;/code&gt; : {number} : The number of photos wanted in reverse order of the photo application (i.e. most recent first for SavedPhotos).</source>
          <target state="translated">&lt;code&gt;first&lt;/code&gt; : {number} : 사진 응용 프로그램의 역순으로 원하는 사진 수입니다 (즉, 가장 최근에 저장된 사진).</target>
        </trans-unit>
        <trans-unit id="6f7171b54c433fac49d69a7c13128ac33126a261" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;flexDirection&lt;/code&gt; controls which directions children of a container go. &lt;code&gt;row&lt;/code&gt; goes left to right, &lt;code&gt;column&lt;/code&gt; goes top to bottom, and you may be able to guess what the other two do. It works like &lt;code&gt;flex-direction&lt;/code&gt; in CSS, except the default is &lt;code&gt;column&lt;/code&gt;. See &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/flex-direction&quot;&gt;https://developer.mozilla.org/en-US/docs/Web/CSS/flex-direction&lt;/a&gt; for more details.</source>
          <target state="translated">&lt;code&gt;flexDirection&lt;/code&gt; 은 컨테이너의 하위로가는 방향을 제어합니다. &lt;code&gt;row&lt;/code&gt; 은 왼쪽에서 오른쪽으로, &lt;code&gt;column&lt;/code&gt; 은 위에서 아래로, 다른 두 가지 작업을 추측 할 수 있습니다. CSS의 &lt;code&gt;flex-direction&lt;/code&gt; 처럼 작동하지만 기본값은 &lt;code&gt;column&lt;/code&gt; 입니다. 자세한 내용은 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/flex-direction&quot;&gt;https://developer.mozilla.org/en-US/docs/Web/CSS/flex-direction&lt;/a&gt; 을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="26bbeb1a6ef8ec8a9081640850fb3d5774ded5db" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;flexWrap&lt;/code&gt; controls whether children can wrap around after they hit the end of a flex container. It works like &lt;code&gt;flex-wrap&lt;/code&gt; in CSS (default: nowrap). See &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/flex-wrap&quot;&gt;https://developer.mozilla.org/en-US/docs/Web/CSS/flex-wrap&lt;/a&gt; for more details. Note it does not work anymore with &lt;code&gt;alignItems: stretch&lt;/code&gt; (the default), so you may want to use &lt;code&gt;alignItems: flex-start&lt;/code&gt; for example (breaking change details: &lt;a href=&quot;https://github.com/facebook/react-native/releases/tag/v0.28.0&quot;&gt;https://github.com/facebook/react-native/releases/tag/v0.28.0&lt;/a&gt;).</source>
          <target state="translated">&lt;code&gt;flexWrap&lt;/code&gt; 은 어린이가 Flex 컨테이너의 끝에 닿은 후 랩핑 할 수 있는지 여부를 제어합니다. CSS에서 &lt;code&gt;flex-wrap&lt;/code&gt; 처럼 작동합니다 (기본값 : nowrap). 자세한 내용은 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/flex-wrap&quot;&gt;https://developer.mozilla.org/en-US/docs/Web/CSS/flex-wrap&lt;/a&gt; 을 참조하십시오. &lt;code&gt;alignItems: stretch&lt;/code&gt; (기본값)에서는 더 이상 작동하지 않으므로 &lt;code&gt;alignItems: flex-start&lt;/code&gt; 를 사용할 수 있습니다 (예 : 주요 변경 내용 : &lt;a href=&quot;https://github.com/facebook/react-native/releases/tag/v0.28.0&quot;&gt;https://github.com/facebook/react-native/releases/tag). /v0.28.0&lt;/a&gt; ).</target>
        </trans-unit>
        <trans-unit id="010da56b26e6d7f0a066f7f204c17efd70f802af" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;force-cache&lt;/code&gt;: The existing cached data will be used to satisfy the request, regardless of its age or expiration date. If there is no existing data in the cache corresponding the request, the data is loaded from the originating source.</source>
          <target state="translated">&lt;code&gt;force-cache&lt;/code&gt; : 기존 캐시 된 데이터는 만료 날짜 나 만료 날짜에 관계없이 요청을 충족시키는 데 사용됩니다. 요청에 해당하는 캐시에 기존 데이터가없는 경우 데이터는 원래 소스에서로드됩니다.</target>
        </trans-unit>
        <trans-unit id="189426dc7f54c6a9e3c44537b119c362156bad9a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;formSheet&lt;/code&gt; covers narrow-width view centered (only on larger devices)</source>
          <target state="translated">&lt;code&gt;formSheet&lt;/code&gt; 는 좁은 너비의 뷰를 중심으로합니다 (더 큰 장치에서만)</target>
        </trans-unit>
        <trans-unit id="a892cb8cb9568f62431de88a2f46aa15fbc0b80d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;friction&lt;/code&gt;: Controls &quot;bounciness&quot;/overshoot. Default 7.</source>
          <target state="translated">&lt;code&gt;friction&lt;/code&gt; : &quot;바운스 니스&quot;/ 오버 슈트를 제어합니다. 기본값 7.</target>
        </trans-unit>
        <trans-unit id="73cb5bdba49364bbe04d27773ce94ddee45ba412" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fullScreen&lt;/code&gt; covers the screen completely</source>
          <target state="translated">&lt;code&gt;fullScreen&lt;/code&gt; 은 화면을 완전히 덮습니다.</target>
        </trans-unit>
        <trans-unit id="33511df82d4d13fa4fa57fb8e6013f6a3130024f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;getItemLayout&lt;/code&gt; is an optional optimization that let us skip the measurement of dynamic content if you know the height of items ahead of time. &lt;code&gt;getItemLayout&lt;/code&gt; is both efficient and easy to use if you have fixed height items, for example:</source>
          <target state="translated">&lt;code&gt;getItemLayout&lt;/code&gt; 은 선택적인 최적화로, 항목의 높이를 미리 알고있는 경우 동적 내용의 측정을 건너 뛸 수 있습니다. &lt;code&gt;getItemLayout&lt;/code&gt; 은 고정 높이 항목이있는 경우 효율적이고 사용하기 쉽습니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="def09feb858fb2e4fb959cdd28abad0a5c9eff1f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;groupName&lt;/code&gt; : {string} : Specifies filter on group names, like 'Recent Photos' or custom album titles.</source>
          <target state="translated">&lt;code&gt;groupName&lt;/code&gt; : {string} : '최근 사진'또는 사용자 정의 앨범 제목과 같은 그룹 이름에 대한 필터를 지정합니다.</target>
        </trans-unit>
        <trans-unit id="c6e9d66a6e9249d97be9857ff9dfb4c5c6f382c4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;groupTypes&lt;/code&gt; : {string} : Specifies which group types to filter the results to. Valid values are:</source>
          <target state="translated">&lt;code&gt;groupTypes&lt;/code&gt; : {string} : 결과를 필터링 할 그룹 유형을 지정합니다. 유효한 값은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="7af48fcd6260fd973848b7316e47e557ddcb80a2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;group_name&lt;/code&gt;: {string}</source>
          <target state="translated">&lt;code&gt;group_name&lt;/code&gt; : {string}</target>
        </trans-unit>
        <trans-unit id="235860b30f7ca1dc0bb773514ccde23583f4a36d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;has_next_page&lt;/code&gt;: {boolean}</source>
          <target state="translated">&lt;code&gt;has_next_page&lt;/code&gt; : {boolean}</target>
        </trans-unit>
        <trans-unit id="8d1d7aa058eef876669e1c91971c1a04c54c4d5c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;head&lt;/code&gt; - The line is displayed so that the end fits in the container and the missing text at the beginning of the line is indicated by an ellipsis glyph. e.g., &quot;...wxyz&quot;</source>
          <target state="translated">&lt;code&gt;head&lt;/code&gt; - 선은 컨테이너와 라인의 시작 부분에서 누락 된 텍스트의 최종 맞는이 생략 그림 문자로 표시되도록 표시됩니다. 예 : &quot;... wxyz&quot;</target>
        </trans-unit>
        <trans-unit id="fa3b5ff57b244330bfe44b9adfb960ba2cdd2a71" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;heading&lt;/code&gt;: {number}</source>
          <target state="translated">&lt;code&gt;heading&lt;/code&gt; : {번호}</target>
        </trans-unit>
        <trans-unit id="bb1f461ccbff85537bec3069278ca3460f227ff7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;height&lt;/code&gt; sets the height of this component.</source>
          <target state="translated">&lt;code&gt;height&lt;/code&gt; 는이 구성 요소의 높이를 설정합니다.</target>
        </trans-unit>
        <trans-unit id="b8865ec9d236b857229eda0cdb5a393c3d3fbc5a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;height&lt;/code&gt;: {number}</source>
          <target state="translated">&lt;code&gt;height&lt;/code&gt; : {number}</target>
        </trans-unit>
        <trans-unit id="732b98fc6632b46637beaa65e094ed7c337d9298" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;hour&lt;/code&gt; (0-23) - the hour to show, defaults to the current time</source>
          <target state="translated">&lt;code&gt;hour&lt;/code&gt; (0-23)-표시 할 시간이며 기본값은 현재 시간입니다.</target>
        </trans-unit>
        <trans-unit id="dcbc650670e57a81bf61c970c31bf283b38d4f69" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;hsl()&lt;/code&gt; and &lt;code&gt;hsla()&lt;/code&gt; is supported in functional notation:</source>
          <target state="translated">&lt;code&gt;hsl()&lt;/code&gt; 및 &lt;code&gt;hsla()&lt;/code&gt; 는 기능 표기법에서 지원됩니다.</target>
        </trans-unit>
        <trans-unit id="c0b52fdf9a38a29f7710313bf26b99e4f0c6315c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;icon&lt;/code&gt;: the icon for this action, e.g. &lt;code&gt;require('./some_icon.png')&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;icon&lt;/code&gt; :이 액션의 아이콘, 예 : &lt;code&gt;require('./some_icon.png')&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5e5ead0ca1bba539a9c1e3b47ed2a252186c5e44" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;identifier&lt;/code&gt; - The ID of the touch</source>
          <target state="translated">&lt;code&gt;identifier&lt;/code&gt; - 터치의 ID</target>
        </trans-unit>
        <trans-unit id="8b6641467ba9c6bdab811e032987c74a8d1f95a5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;identifier&lt;/code&gt; - The ID of the touch.</source>
          <target state="translated">&lt;code&gt;identifier&lt;/code&gt; - 터치의 ID입니다.</target>
        </trans-unit>
        <trans-unit id="4fa9d63b366cb93cab5736e9520dae4af1708fe5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;identifier&lt;/code&gt; : The identifier of this notification.</source>
          <target state="translated">&lt;code&gt;identifier&lt;/code&gt; :이 알림의 식별자입니다.</target>
        </trans-unit>
        <trans-unit id="31a673af677e17add4a63c88564a24de9b545575" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;image&lt;/code&gt;: {object} : An object with the following shape:</source>
          <target state="translated">&lt;code&gt;image&lt;/code&gt; : {object} : 다음 모양의 객체 :</target>
        </trans-unit>
        <trans-unit id="3e8d055c79513f6b67d09b0d6372424f9600a0a7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;inactive&lt;/code&gt; - This is a state that occurs when transitioning between foreground &amp;amp; background, and during periods of inactivity such as entering the Multitasking view or in the event of an incoming call</source>
          <target state="translated">&lt;code&gt;inactive&lt;/code&gt; -전경과 배경 사이를 전환 할 때와 멀티 태스킹보기 입력 또는 전화 수신과 같은 비활성 기간 동안 발생하는 상태입니다.</target>
        </trans-unit>
        <trans-unit id="386b21eb987063ce6aab7cb497d42671b05b0edf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;index.js&lt;/code&gt; is the starting point for React Native applications, and it is always required. It can be a small file that &lt;code&gt;require&lt;/code&gt;s other file that are part of your React Native component or application, or it can contain all the code that is needed for it. In our case, we will just put everything in &lt;code&gt;index.js&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;index.js&lt;/code&gt; 는 React Native 애플리케이션의 시작점이며 항상 필요합니다. React Native 구성 요소 또는 응용 프로그램의 일부인 다른 파일을 &lt;code&gt;require&lt;/code&gt; 로하는 작은 파일 이거나 필요한 모든 코드를 포함 할 수 있습니다. 이 경우 모든 것을 &lt;code&gt;index.js&lt;/code&gt; 에 넣습니다 .</target>
        </trans-unit>
        <trans-unit id="5fd8c4407a8189ec1fa493948ee5e30863a3a837" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;interpolate()&lt;/code&gt; also supports arbitrary easing functions, many of which are already implemented in the &lt;a href=&quot;easing&quot;&gt;&lt;code&gt;Easing&lt;/code&gt;&lt;/a&gt; module. &lt;code&gt;interpolate()&lt;/code&gt; also has configurable behavior for extrapolating the &lt;code&gt;outputRange&lt;/code&gt;. You can set the extrapolation by setting the &lt;code&gt;extrapolate&lt;/code&gt;, &lt;code&gt;extrapolateLeft&lt;/code&gt;, or &lt;code&gt;extrapolateRight&lt;/code&gt; options. The default value is &lt;code&gt;extend&lt;/code&gt; but you can use &lt;code&gt;clamp&lt;/code&gt; to prevent the output value from exceeding &lt;code&gt;outputRange&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;interpolate()&lt;/code&gt; 는 임의의 여유 함수도 지원하며,이 중 대부분은 이미 &lt;a href=&quot;easing&quot;&gt; &lt;code&gt;Easing&lt;/code&gt; &lt;/a&gt; 모듈 에서 구현되어 있습니다. &lt;code&gt;interpolate()&lt;/code&gt; 에는 &lt;code&gt;outputRange&lt;/code&gt; 를 추정하기 위해 구성 가능한 동작이 있습니다 . &lt;code&gt;extrapolate&lt;/code&gt; , &lt;code&gt;extrapolateLeft&lt;/code&gt; 또는 &lt;code&gt;extrapolateRight&lt;/code&gt; 옵션을 설정하여 외삽을 설정할 수 있습니다. 기본값은 &lt;code&gt;extend&lt;/code&gt; 이지만 출력 값이 &lt;code&gt;outputRange&lt;/code&gt; 를 초과하지 않도록 &lt;code&gt;clamp&lt;/code&gt; 를 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="19f62ca9fbf7d35dde0c6da0ab9f608b8064e4d7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;interpolate()&lt;/code&gt; also supports mapping to strings, allowing you to animate colors as well as values with units. For example, if you wanted to animate a rotation you could do:</source>
          <target state="translated">&lt;code&gt;interpolate()&lt;/code&gt; 는 문자열에 대한 매핑도 지원하므로 단위를 사용하여 값과 색상에 애니메이션을 적용 할 수 있습니다. 예를 들어 회전에 애니메이션을 적용하려면 다음을 수행하십시오.</target>
        </trans-unit>
        <trans-unit id="137d4ba81a07e8fe7ac2883b5126475cc470cdc1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;is24Hour&lt;/code&gt; (boolean) - If &lt;code&gt;true&lt;/code&gt;, the picker uses the 24-hour format. If &lt;code&gt;false&lt;/code&gt;, the picker shows an AM/PM chooser. If undefined, the default for the current locale is used.</source>
          <target state="translated">&lt;code&gt;is24Hour&lt;/code&gt; 는 (부울) - 경우 &lt;code&gt;true&lt;/code&gt; , 피커는 24 시간 형식을 사용합니다. 만약 &lt;code&gt;false&lt;/code&gt; , 피커 보여줍니다 AM / PM 선택기. 정의되지 않은 경우 현재 로캘의 기본값이 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="9aba406e0372a17638b5defaf70c9a5c500da67c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;isInteraction&lt;/code&gt;: Whether or not this animation creates an &quot;interaction handle&quot; on the &lt;code&gt;InteractionManager&lt;/code&gt;. Default true.</source>
          <target state="translated">&lt;code&gt;isInteraction&lt;/code&gt; : 여부는 여부를이 애니메이션은에 &quot;상호 작용 핸들&quot;생성 &lt;code&gt;InteractionManager&lt;/code&gt; 입니다를 . 기본값은 true입니다.</target>
        </trans-unit>
        <trans-unit id="0ba5984269442b3e61fd5614bcc840a48abe294f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;isSilent&lt;/code&gt; : If true, the notification will appear without sound (optional).</source>
          <target state="translated">&lt;code&gt;isSilent&lt;/code&gt; : true 인 경우 알림이 소리없이 나타납니다 (선택 사항).</target>
        </trans-unit>
        <trans-unit id="d361b08f337e6c799a012fc66390d3b37d3ca8d6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;isStored&lt;/code&gt;: {boolean}</source>
          <target state="translated">&lt;code&gt;isStored&lt;/code&gt; : {boolean}</target>
        </trans-unit>
        <trans-unit id="d33b07c23e59cb67aae3abb98c1446ca4149cea0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;itemPosition&lt;/code&gt;: the index of the selected item in this picker</source>
          <target state="translated">&lt;code&gt;itemPosition&lt;/code&gt; :이 선택 도구에서 선택된 항목의 색인</target>
        </trans-unit>
        <trans-unit id="7672972d472ae55057faac841cba434dfcae752b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;itemValue&lt;/code&gt;: the &lt;code&gt;value&lt;/code&gt; prop of the item that was selected</source>
          <target state="translated">&lt;code&gt;itemValue&lt;/code&gt; : 선택된 아이템 의 &lt;code&gt;value&lt;/code&gt; prop</target>
        </trans-unit>
        <trans-unit id="a4d16308a96394206a751998ff38da21be3bac87" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;justifyContent&lt;/code&gt; aligns children in the main direction. For example, if children are flowing vertically, &lt;code&gt;justifyContent&lt;/code&gt; controls how they align vertically. It works like &lt;code&gt;justify-content&lt;/code&gt; in CSS (default: flex-start). See &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/justify-content&quot;&gt;https://developer.mozilla.org/en-US/docs/Web/CSS/justify-content&lt;/a&gt; for more details.</source>
          <target state="translated">&lt;code&gt;justifyContent&lt;/code&gt; 는 자식을 기본 방향으로 정렬합니다. 예를 들어, 어린이가 세로로 흐르는 경우 &lt;code&gt;justifyContent&lt;/code&gt; 는 세로로 정렬되는 방법을 제어합니다. CSS의 &lt;code&gt;justify-content&lt;/code&gt; 와 같이 작동합니다 (기본값 : flex-start). 자세한 내용은 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/justify-content&quot;&gt;https://developer.mozilla.org/en-US/docs/Web/CSS/justify-content&lt;/a&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="5b152d2cf68462291122082a59f86151bd3ae169" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;keyExtractor&lt;/code&gt; tells the list to use the &lt;code&gt;id&lt;/code&gt;s for the react keys instead of the default &lt;code&gt;key&lt;/code&gt; property.</source>
          <target state="translated">&lt;code&gt;keyExtractor&lt;/code&gt; 는 기본 &lt;code&gt;key&lt;/code&gt; 속성 대신 반응 키에 &lt;code&gt;id&lt;/code&gt; 를 사용하도록 목록에 지시합니다 .</target>
        </trans-unit>
        <trans-unit id="4c067bc24c521de200289e5250d2f5434581647d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;latitude&lt;/code&gt;: {number}</source>
          <target state="translated">&lt;code&gt;latitude&lt;/code&gt; : {number}</target>
        </trans-unit>
        <trans-unit id="6223dfdbb6dad8a72796d824ae1242adc81b57c4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;left&lt;/code&gt; is the number of logical pixels to offset the left edge of this component.</source>
          <target state="translated">&lt;code&gt;left&lt;/code&gt; 는이 구성 요소의 왼쪽 가장자리를 오프셋 할 논리 픽셀 수입니다.</target>
        </trans-unit>
        <trans-unit id="dfb103bbc97c507021dc3c13531325166eec6a22" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;listener&lt;/code&gt;: Optional async listener.</source>
          <target state="translated">&lt;code&gt;listener&lt;/code&gt; : 선택적 비동기 리스너.</target>
        </trans-unit>
        <trans-unit id="fc3e2f63dd7f533461f8c31af0f9d57763fd9fd7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;localNotification&lt;/code&gt; : Fired when a local notification is received. The handler will be invoked with an instance of &lt;code&gt;PushNotificationIOS&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;localNotification&lt;/code&gt; : 로컬 알림을 받으면 시작 됩니다. 핸들러는 &lt;code&gt;PushNotificationIOS&lt;/code&gt; 인스턴스와 함께 호출됩니다 .</target>
        </trans-unit>
        <trans-unit id="74b4ed4fcc67992e10883ab34944ca555c8d54d1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;location&lt;/code&gt;: {object} : An object with the following shape:</source>
          <target state="translated">&lt;code&gt;location&lt;/code&gt; : {object} : 다음 모양의 객체 :</target>
        </trans-unit>
        <trans-unit id="02c53b39c29af8e48aab2e1eb41f80ac587bd1d5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;locationX&lt;/code&gt; - The X position of the touch, relative to the element</source>
          <target state="translated">&lt;code&gt;locationX&lt;/code&gt; - 요소를 기준으로 한 터치의 X 위치</target>
        </trans-unit>
        <trans-unit id="c13f6f70663248e13187d0307e87f1a9289d855b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;locationX&lt;/code&gt; - The X position of the touch, relative to the element.</source>
          <target state="translated">&lt;code&gt;locationX&lt;/code&gt; - 요소를 기준으로 한 터치의 X 위치입니다.</target>
        </trans-unit>
        <trans-unit id="864bd30de29ff945ed8aaa5041b70560d94c501e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;locationY&lt;/code&gt; - The Y position of the touch, relative to the element</source>
          <target state="translated">&lt;code&gt;locationY&lt;/code&gt; - 요소를 기준으로 한 터치의 Y 위치</target>
        </trans-unit>
        <trans-unit id="2b28b2671bfa773a3620e26ecc07937d368cdcd9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;locationY&lt;/code&gt; - The Y position of the touch, relative to the element.</source>
          <target state="translated">&lt;code&gt;locationY&lt;/code&gt; - 요소를 기준으로 한 터치의 Y 위치입니다.</target>
        </trans-unit>
        <trans-unit id="f225e61ad50bee05a6398c088ea16248ea449c0b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;longitude&lt;/code&gt;: {number}</source>
          <target state="translated">&lt;code&gt;longitude&lt;/code&gt; : {number}</target>
        </trans-unit>
        <trans-unit id="b65963e0128bde8ab5124eae168fe10782d756d1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;marginBottom&lt;/code&gt; works like &lt;code&gt;margin-bottom&lt;/code&gt; in CSS. See &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/margin-bottom&quot;&gt;https://developer.mozilla.org/en-US/docs/Web/CSS/margin-bottom&lt;/a&gt; for more details.</source>
          <target state="translated">&lt;code&gt;marginBottom&lt;/code&gt; 은 CSS에서 &lt;code&gt;margin-bottom&lt;/code&gt; 처럼 작동합니다 . 자세한 내용은 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/margin-bottom&quot;&gt;https://developer.mozilla.org/en-US/docs/Web/CSS/margin-bottom&lt;/a&gt; 을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="5f9d1c179a0731dc662b938f9d944dd9ad1ea4e9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;marginLeft&lt;/code&gt; works like &lt;code&gt;margin-left&lt;/code&gt; in CSS. See &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/margin-left&quot;&gt;https://developer.mozilla.org/en-US/docs/Web/CSS/margin-left&lt;/a&gt; for more details.</source>
          <target state="translated">&lt;code&gt;marginLeft&lt;/code&gt; 는 CSS에서 &lt;code&gt;margin-left&lt;/code&gt; 처럼 작동합니다 . 자세한 내용은 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/margin-left&quot;&gt;https://developer.mozilla.org/en-US/docs/Web/CSS/margin-left&lt;/a&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="65495c38aeb2986cc50bc6892fd4043246858f62" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;marginRight&lt;/code&gt; works like &lt;code&gt;margin-right&lt;/code&gt; in CSS. See &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/margin-right&quot;&gt;https://developer.mozilla.org/en-US/docs/Web/CSS/margin-right&lt;/a&gt; for more details.</source>
          <target state="translated">&lt;code&gt;marginRight&lt;/code&gt; 는 CSS에서 &lt;code&gt;margin-right&lt;/code&gt; 처럼 작동합니다 . 자세한 내용은 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/margin-right&quot;&gt;https://developer.mozilla.org/en-US/docs/Web/CSS/margin-right&lt;/a&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="0eb5a26ce0e8d8fc7f8c6a2d080292d7331877b5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;marginTop&lt;/code&gt; works like &lt;code&gt;margin-top&lt;/code&gt; in CSS. See &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/margin-top&quot;&gt;https://developer.mozilla.org/en-US/docs/Web/CSS/margin-top&lt;/a&gt; for more details.</source>
          <target state="translated">&lt;code&gt;marginTop&lt;/code&gt; 은 CSS에서 &lt;code&gt;margin-top&lt;/code&gt; 처럼 작동합니다 . 자세한 내용은 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/margin-top&quot;&gt;https://developer.mozilla.org/en-US/docs/Web/CSS/margin-top&lt;/a&gt; 을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="2683214d4b9937533236ec00a67a00f44388c7fb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;mass&lt;/code&gt;: The mass of the object attached to the end of the spring. Default 1.</source>
          <target state="translated">&lt;code&gt;mass&lt;/code&gt; : 스프링 끝에 부착 된 물체의 질량. 기본</target>
        </trans-unit>
        <trans-unit id="156a0a8a7003011156a7fd3debe97424b4692558" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;maxDate&lt;/code&gt; (&lt;code&gt;Date&lt;/code&gt; object or timestamp in milliseconds) - maximum date that can be selected</source>
          <target state="translated">&lt;code&gt;maxDate&lt;/code&gt; ( &lt;code&gt;Date&lt;/code&gt; 오브젝트 또는 시간 소인 (밀리 초))-선택할 수있는 최대 날짜</target>
        </trans-unit>
        <trans-unit id="cf562c7c0cab3df3bde2ee0f54bf77d58bd950db" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;maxHeight&lt;/code&gt; is the maximum height for this component, in logical pixels.</source>
          <target state="translated">&lt;code&gt;maxHeight&lt;/code&gt; 는이 구성 요소의 최대 높이 (논리 픽셀)입니다.</target>
        </trans-unit>
        <trans-unit id="ccc5649abcca39f63f1307854545cff8f5e5ba0e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;maxWidth&lt;/code&gt; is the maximum width for this component, in logical pixels.</source>
          <target state="translated">&lt;code&gt;maxWidth&lt;/code&gt; 는이 구성 요소의 최대 너비 (논리 픽셀)입니다.</target>
        </trans-unit>
        <trans-unit id="7f3d02fc20b4f00b9598569e1529fc1e608e0809" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;maximumAge&lt;/code&gt; (ms) - Defaults to INFINITY.</source>
          <target state="translated">&lt;code&gt;maximumAge&lt;/code&gt; (ms)-기본값은 INFINITY입니다.</target>
        </trans-unit>
        <trans-unit id="d3ccbb977af4e60115316299193d2f48e72fcac9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;message&lt;/code&gt; (string) - a message to share</source>
          <target state="translated">&lt;code&gt;message&lt;/code&gt; (string)-공유 할 메시지</target>
        </trans-unit>
        <trans-unit id="5c3214e961cef4d8be1d6e8ce9be119d4212f105" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;message&lt;/code&gt; (string) - a message to show below the title</source>
          <target state="translated">&lt;code&gt;message&lt;/code&gt; (string)-제목 아래에 표시 할 메시지</target>
        </trans-unit>
        <trans-unit id="168582eefc8cfce63b0eb0e9d05977a9c356d73b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;message&lt;/code&gt; - a message to share</source>
          <target state="translated">&lt;code&gt;message&lt;/code&gt; - 공유 할 메시지</target>
        </trans-unit>
        <trans-unit id="c2575351790cec7f09d130a6223b3b7a8beb69b5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;middle&lt;/code&gt; - The line is displayed so that the beginning and end fit in the container and the missing text in the middle is indicated by an ellipsis glyph. &quot;ab...yz&quot;</source>
          <target state="translated">&lt;code&gt;middle&lt;/code&gt; - 컨테이너에 시작과 끝이 맞도록 줄이 표시되고 누락 된 텍스트는 줄임표로 표시됩니다. &quot;ab ... yz&quot;</target>
        </trans-unit>
        <trans-unit id="fab5b1d6303ce209aa7dbbbdb8dd0d927f829695" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;mimeTypes&lt;/code&gt; : {Array} : Filter by mimetype (e.g. image/jpeg).</source>
          <target state="translated">&lt;code&gt;mimeTypes&lt;/code&gt; : {Array} : mimetype별로 필터링합니다 (예 : image / jpeg).</target>
        </trans-unit>
        <trans-unit id="17a2c9bad5d5721b1a3a0c28e43d1e55b9e4e484" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;minDate&lt;/code&gt; (&lt;code&gt;Date&lt;/code&gt; or timestamp in milliseconds) - minimum date that can be selected</source>
          <target state="translated">&lt;code&gt;minDate&lt;/code&gt; ( &lt;code&gt;Date&lt;/code&gt; 또는 시간 소인 (밀리 초))-선택할 수있는 최소 날짜</target>
        </trans-unit>
        <trans-unit id="92703c208cc1a02d0d9400710e78457954b2a236" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;minHeight&lt;/code&gt; is the minimum height for this component, in logical pixels.</source>
          <target state="translated">&lt;code&gt;minHeight&lt;/code&gt; 는이 구성 요소의 최소 높이이며 논리 픽셀입니다.</target>
        </trans-unit>
        <trans-unit id="bd98c8d0499b145e761958bc2b157806a9a903f6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;minWidth&lt;/code&gt; is the minimum width for this component, in logical pixels.</source>
          <target state="translated">&lt;code&gt;minWidth&lt;/code&gt; 는이 구성 요소의 최소 너비이며 논리 픽셀입니다.</target>
        </trans-unit>
        <trans-unit id="715b23cbe8198f096a8ea441e1429d97b9e84dfb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;minute&lt;/code&gt; (0-59) - the minute to show, defaults to the current time</source>
          <target state="translated">&lt;code&gt;minute&lt;/code&gt; (0-59)-표시 할 분이며 기본값은 현재 시간입니다.</target>
        </trans-unit>
        <trans-unit id="bed2a4d22e80055261eba7fd7181c71e80ca1860" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;mode&lt;/code&gt; (&lt;code&gt;enum('calendar', 'spinner', 'default')&lt;/code&gt;) - To set the date-picker mode to calendar/spinner/default</source>
          <target state="translated">&lt;code&gt;mode&lt;/code&gt; ( &lt;code&gt;enum('calendar', 'spinner', 'default')&lt;/code&gt; )-날짜 선택기 모드를 calendar / spinner / default로 설정하려면</target>
        </trans-unit>
        <trans-unit id="77c1ea217fd2a6e58338b23ead35943d8d27b4e9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;mode&lt;/code&gt; (&lt;code&gt;enum('clock', 'spinner', 'default')&lt;/code&gt;) - set the time picker mode</source>
          <target state="translated">&lt;code&gt;mode&lt;/code&gt; ( &lt;code&gt;enum('clock', 'spinner', 'default')&lt;/code&gt; )-시간 선택 모드 설정</target>
        </trans-unit>
        <trans-unit id="8fce8627c362472b3b516c01ddb7d1c43ab3d39d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;moveX&lt;/code&gt; - the latest screen coordinates of the recently-moved touch</source>
          <target state="translated">&lt;code&gt;moveX&lt;/code&gt; - 최근에 이동 한 터치의 최신 화면 좌표</target>
        </trans-unit>
        <trans-unit id="923f4597505948a396697652c56bd99ae28e20d7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;moveY&lt;/code&gt; - the latest screen coordinates of the recently-moved touch</source>
          <target state="translated">&lt;code&gt;moveY&lt;/code&gt; - 최근에 이동 한 터치의 최신 화면 좌표</target>
        </trans-unit>
        <trans-unit id="591546f1807dd2e4f0db914a9024e4626ee030c9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;node&lt;/code&gt;: {object} An object with the following shape:</source>
          <target state="translated">&lt;code&gt;node&lt;/code&gt; : {object} 모양이 다음과 같은 객체입니다.</target>
        </trans-unit>
        <trans-unit id="7896bd61695429613d711bc4ef75441d54b72766" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;none&lt;/code&gt; - device is offline</source>
          <target state="translated">&lt;code&gt;none&lt;/code&gt; - 기기가 오프라인 상태입니다</target>
        </trans-unit>
        <trans-unit id="c87fdbc1484427355840331ad747a8413b65ccb4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;none&lt;/code&gt; appears without an animation</source>
          <target state="translated">&lt;code&gt;none&lt;/code&gt; 애니메이션없이 나타납니다</target>
        </trans-unit>
        <trans-unit id="e50193e861007b33905a29cd0514a5ce8dc03ba1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;none&lt;/code&gt;: don't auto capitalize anything.</source>
          <target state="translated">&lt;code&gt;none&lt;/code&gt; : 자동으로 대문자를 사용하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="8e66a56f3596f0babd9099e804149dfac3b874ab" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;notification&lt;/code&gt; : Fired when a remote notification is received. The handler will be invoked with an instance of &lt;code&gt;PushNotificationIOS&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;notification&lt;/code&gt; : 원격 알림이 수신되면 시작됩니다. 핸들러는 &lt;code&gt;PushNotificationIOS&lt;/code&gt; 인스턴스와 함께 호출됩니다 .</target>
        </trans-unit>
        <trans-unit id="d81e5d19b64745b6f0bc5e57cb71c0be2cafbeee" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;number&lt;/code&gt; - Opaque type returned by something like &lt;code&gt;require('./image.jpg')&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;number&lt;/code&gt; - &lt;code&gt;require('./image.jpg')&lt;/code&gt; 와 같은 것으로 반환되는 불투명 한 유형 입니다.</target>
        </trans-unit>
        <trans-unit id="bb8ea72a96f07c67e13b99418bb9259c41643f8a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;numberActiveTouches&lt;/code&gt; - Number of touches currently on screen</source>
          <target state="translated">&lt;code&gt;numberActiveTouches&lt;/code&gt; - 현재 화면에있는 터치 수</target>
        </trans-unit>
        <trans-unit id="06e465867441abb93cad1a831a62851daeff18ce" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;onStartShouldSetResponder&lt;/code&gt; and &lt;code&gt;onMoveShouldSetResponder&lt;/code&gt; are called with a bubbling pattern, where the deepest node is called first. That means that the deepest component will become responder when multiple Views return true for &lt;code&gt;*ShouldSetResponder&lt;/code&gt; handlers. This is desirable in most cases, because it makes sure all controls and buttons are usable.</source>
          <target state="translated">&lt;code&gt;onStartShouldSetResponder&lt;/code&gt; 및 &lt;code&gt;onMoveShouldSetResponder&lt;/code&gt; 는 버블 링 패턴으로 호출되며 가장 깊은 노드가 먼저 호출됩니다. 이는 &lt;code&gt;*ShouldSetResponder&lt;/code&gt; 핸들러에 대해 여러 개의 Views가 true를 리턴 할 때 가장 깊은 컴포넌트가 응답자가됨을 의미합니다 . 모든 컨트롤과 버튼을 사용할 수 있도록하기 때문에 대부분의 경우에 바람직합니다.</target>
        </trans-unit>
        <trans-unit id="ba87096c0a7c2f4b09857c1404ef7bf97661d302" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;only-if-cached&lt;/code&gt;: The existing cache data will be used to satisfy a request, regardless of its age or expiration date. If there is no existing data in the cache corresponding to a URL load request, no attempt is made to load the data from the originating source, and the load is considered to have failed.</source>
          <target state="translated">&lt;code&gt;only-if-cached&lt;/code&gt; : 기존 캐시 데이터는 보존 기간이나 만료 날짜에 관계없이 요청을 충족시키는 데 사용됩니다. URL로드 요청에 해당하는 캐시에 기존 데이터가없는 경우 원래 소스에서 데이터를로드하려고 시도하지 않았으며로드가 실패한 것으로 간주됩니다.</target>
        </trans-unit>
        <trans-unit id="2285e71d4e181cbdc03866fe2cebedd2c20163fe" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;options&lt;/code&gt; (array of strings) - a list of button titles (required)</source>
          <target state="translated">&lt;code&gt;options&lt;/code&gt; (문자열 배열)-버튼 제목 목록 (필수)</target>
        </trans-unit>
        <trans-unit id="89b40ba992d7cb9d3af50de345a5874be4734f2d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;overFullScreen&lt;/code&gt; covers the screen completely, but allows transparency</source>
          <target state="translated">&lt;code&gt;overFullScreen&lt;/code&gt; 은 화면을 완전히 덮지 만 투명도는 허용합니다</target>
        </trans-unit>
        <trans-unit id="add0e8cd8a61dbd6ea84698db55a1ae025b9c3ba" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;overflow&lt;/code&gt; controls how children are measured and displayed. &lt;code&gt;overflow: hidden&lt;/code&gt; causes views to be clipped while &lt;code&gt;overflow: scroll&lt;/code&gt; causes views to be measured independently of their parents main axis. It works like &lt;code&gt;overflow&lt;/code&gt; in CSS (default: visible). See &lt;a href=&quot;https://developer.mozilla.org/en/docs/Web/CSS/overflow&quot;&gt;https://developer.mozilla.org/en/docs/Web/CSS/overflow&lt;/a&gt; for more details. &lt;code&gt;overflow: visible&lt;/code&gt; only works on iOS. On Android, all views will clip their children.</source>
          <target state="translated">&lt;code&gt;overflow&lt;/code&gt; 는 어린이 측정 및 표시 방법을 제어합니다. &lt;code&gt;overflow: hidden&lt;/code&gt; 은 뷰를 자르는 반면 &lt;code&gt;overflow: scroll&lt;/code&gt; 은 부모의 주축과 독립적으로 뷰를 측정합니다. CSS의 &lt;code&gt;overflow&lt;/code&gt; 로 처럼 작동합니다 (기본값 : 표시). 자세한 내용은 &lt;a href=&quot;https://developer.mozilla.org/en/docs/Web/CSS/overflow&quot;&gt;https://developer.mozilla.org/en/docs/Web/CSS/overflow&lt;/a&gt; 를 참조하십시오. &lt;code&gt;overflow: visible&lt;/code&gt; 은 iOS에서만 작동합니다. Android에서는 모든보기가 자녀를 자릅니다.</target>
        </trans-unit>
        <trans-unit id="75594efb591c8f5e49cc4aa354993ee9213402f3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;overshootClamping&lt;/code&gt;: Boolean indiciating whether the spring should be clamped and not bounce. Default false.</source>
          <target state="translated">&lt;code&gt;overshootClamping&lt;/code&gt; : 스프링이 고정되고 바운스되지 않아야하는지 여부를 나타내는 부울입니다. 기본값은 false입니다.</target>
        </trans-unit>
        <trans-unit id="f1b64c54bd7859b4aa56df433b5327cc11bfbeee" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;paddingBottom&lt;/code&gt; works like &lt;code&gt;padding-bottom&lt;/code&gt; in CSS. See &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/padding-bottom&quot;&gt;https://developer.mozilla.org/en-US/docs/Web/CSS/padding-bottom&lt;/a&gt; for more details.</source>
          <target state="translated">&lt;code&gt;paddingBottom&lt;/code&gt; 은 CSS에서 &lt;code&gt;padding-bottom&lt;/code&gt; 처럼 작동합니다 . 자세한 내용은 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/padding-bottom&quot;&gt;https://developer.mozilla.org/en-US/docs/Web/CSS/padding-bottom&lt;/a&gt; 을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="f5258dd4cb2c28009f4e4d27c40acdd30bf3b69d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;paddingLeft&lt;/code&gt; works like &lt;code&gt;padding-left&lt;/code&gt; in CSS. See &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/padding-left&quot;&gt;https://developer.mozilla.org/en-US/docs/Web/CSS/padding-left&lt;/a&gt; for more details.</source>
          <target state="translated">&lt;code&gt;paddingLeft&lt;/code&gt; 는 CSS에서 &lt;code&gt;padding-left&lt;/code&gt; 처럼 작동합니다 . 자세한 내용은 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/padding-left&quot;&gt;https://developer.mozilla.org/en-US/docs/Web/CSS/padding-left&lt;/a&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="7dbaea6509352dae5b9b5c516d121b66ea8209d1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;paddingRight&lt;/code&gt; works like &lt;code&gt;padding-right&lt;/code&gt; in CSS. See &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/padding-right&quot;&gt;https://developer.mozilla.org/en-US/docs/Web/CSS/padding-right&lt;/a&gt; for more details.</source>
          <target state="translated">&lt;code&gt;paddingRight&lt;/code&gt; 는 CSS에서 &lt;code&gt;padding-right&lt;/code&gt; 처럼 작동합니다 . 자세한 내용은 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/padding-right&quot;&gt;https://developer.mozilla.org/en-US/docs/Web/CSS/padding-right&lt;/a&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="cbc3529c2fdca211f3d4c7fbdd6c1bb1b390f1c8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;paddingTop&lt;/code&gt; works like &lt;code&gt;padding-top&lt;/code&gt; in CSS. See &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/padding-top&quot;&gt;https://developer.mozilla.org/en-US/docs/Web/CSS/padding-top&lt;/a&gt; for more details.</source>
          <target state="translated">&lt;code&gt;paddingTop&lt;/code&gt; 은 CSS에서 &lt;code&gt;padding-top&lt;/code&gt; 처럼 작동합니다 . 자세한 내용은 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/padding-top&quot;&gt;https://developer.mozilla.org/en-US/docs/Web/CSS/padding-top&lt;/a&gt; 을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="85dcfa4c69472b497a7bd09c395b4eb5d14817e0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pageSheet&lt;/code&gt; covers portrait-width view centered (only on larger devices)</source>
          <target state="translated">&lt;code&gt;pageSheet&lt;/code&gt; 는 세로 세로보기를 중심으로합니다 (더 큰 장치에서만)</target>
        </trans-unit>
        <trans-unit id="1b8264271b7c3826fcb9f8819f98feb22c34867e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pageX&lt;/code&gt; - The X position of the touch, relative to the root element</source>
          <target state="translated">&lt;code&gt;pageX&lt;/code&gt; - 루트 요소를 기준으로 한 터치의 X 위치</target>
        </trans-unit>
        <trans-unit id="edca18f823af0057ba5ed227ff45f2d4e5a38b0f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pageX&lt;/code&gt; - The X position of the touch, relative to the root element.</source>
          <target state="translated">&lt;code&gt;pageX&lt;/code&gt; - 루트 요소를 기준으로 한 터치의 X 위치입니다.</target>
        </trans-unit>
        <trans-unit id="9fba8b27a948dec21805e1c39b15e453ab55bd20" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pageY&lt;/code&gt; - The Y position of the touch, relative to the root element</source>
          <target state="translated">&lt;code&gt;pageY&lt;/code&gt; - 루트 요소를 기준으로 한 터치의 Y 위치</target>
        </trans-unit>
        <trans-unit id="2cb79fb934b1a2e252fb774e54b5f067f3ded9ff" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pageY&lt;/code&gt; - The Y position of the touch, relative to the root element.</source>
          <target state="translated">&lt;code&gt;pageY&lt;/code&gt; - 루트 요소를 기준으로 한 터치의 Y 위치입니다.</target>
        </trans-unit>
        <trans-unit id="940a339e2f8926fa10679aef45b2c1ee1abe2368" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;page_info&lt;/code&gt; : {object} : An object with the following shape:</source>
          <target state="translated">&lt;code&gt;page_info&lt;/code&gt; : {object} : 다음과 같은 형태의 객체 :</target>
        </trans-unit>
        <trans-unit id="7a30245c76fe573dd12014d5739cdd875a14270f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;playableDuration&lt;/code&gt;: {number}</source>
          <target state="translated">&lt;code&gt;playableDuration&lt;/code&gt; : {번호}</target>
        </trans-unit>
        <trans-unit id="75759e980b27702bff80d3ca0375d738ac69fadc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;position&lt;/code&gt; in React Native is similar to regular CSS, but everything is set to &lt;code&gt;relative&lt;/code&gt; by default, so &lt;code&gt;absolute&lt;/code&gt; positioning is always just relative to the parent.</source>
          <target state="translated">&lt;code&gt;position&lt;/code&gt; React Native의 위치 는 일반 CSS와 비슷하지만 기본적 &lt;code&gt;relative&lt;/code&gt; 모든 것이 상대로 설정 되므로 &lt;code&gt;absolute&lt;/code&gt; 위치는 항상 부모와 관련이 있습니다.</target>
        </trans-unit>
        <trans-unit id="454de999bf7533cf8147dd1dd5d030b675bc57d7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;react-native run-android&lt;/code&gt; is just one way to run your app - you can also run it directly from within Android Studio or &lt;a href=&quot;https://nuclide.io/&quot;&gt;Nuclide&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;react-native run-android&lt;/code&gt; 는 앱을 실행하는 한 가지 방법 일뿐 입니다. Android Studio 또는 &lt;a href=&quot;https://nuclide.io/&quot;&gt;Nuclide&lt;/a&gt; 내에서 직접 실행할 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="d9dd2819f98c724bc864fce5a8cbed9a2f2e8a82" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;react-native run-ios&lt;/code&gt; is just one way to run your app. You can also run it directly from within Xcode or &lt;a href=&quot;https://nuclide.io/&quot;&gt;Nuclide&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;react-native run-ios&lt;/code&gt; 는 앱을 실행하는 한 가지 방법입니다. Xcode 또는 &lt;a href=&quot;https://nuclide.io/&quot;&gt;Nuclide&lt;/a&gt; 내에서 직접 실행할 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="19d37bfe240d61aa652f7c71fbee92e55f0dc859" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;register&lt;/code&gt;: Fired when the user registers for remote notifications. The handler will be invoked with a hex string representing the deviceToken.</source>
          <target state="translated">&lt;code&gt;register&lt;/code&gt; : 사용자가 원격 알림을 등록 할 때 시작됩니다. 핸들러는 deviceToken을 나타내는 16 진 문자열로 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="f0e7a637360815c48a6e06e59032ea2dcf35fda3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;registrationError&lt;/code&gt;: Fired when the user fails to register for remote notifications. Typically occurs when APNS is having issues, or the device is a simulator. The handler will be invoked with {message: string, code: number, details: any}.</source>
          <target state="translated">&lt;code&gt;registrationError&lt;/code&gt; : 사용자가 원격 알림 등록에 실패하면 시작됩니다. 일반적으로 APNS에 문제가 있거나 장치가 시뮬레이터 인 경우에 발생합니다. 핸들러는 {message : string, code : number, details : any}와 함께 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="b3bd1a82e79902bb364a4e119175a2e975f92d22" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;reload&lt;/code&gt;: The data for the URL will be loaded from the originating source. No existing cache data should be used to satisfy a URL load request.</source>
          <target state="translated">&lt;code&gt;reload&lt;/code&gt; : URL의 데이터가 원래 소스에서로드됩니다. URL로드 요청을 충족시키기 위해 기존 캐시 데이터를 사용해서는 안됩니다.</target>
        </trans-unit>
        <trans-unit id="abae89f6bdf2540afa73c2ff29f0e39502f20fb8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;repeat&lt;/code&gt;: Repeat the image to cover the frame of the view. The image will keep its size and aspect ratio, unless it is larger than the view, in which case it will be scaled down uniformly so that it is contained in the view.</source>
          <target state="translated">&lt;code&gt;repeat&lt;/code&gt; : 이미지를 반복하여보기의 프레임을 덮습니다. 이미지가보기보다 크지 않으면 이미지의 크기와 종횡비를 유지합니다.이 경우 이미지가보기에 포함되도록 균일하게 축소됩니다.</target>
        </trans-unit>
        <trans-unit id="0291799412c73acf58a9799e203ad8ab9506e442" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;repeatInterval&lt;/code&gt; : The interval to repeat as a string. Possible values: &lt;code&gt;minute&lt;/code&gt;, &lt;code&gt;hour&lt;/code&gt;, &lt;code&gt;day&lt;/code&gt;, &lt;code&gt;week&lt;/code&gt;, &lt;code&gt;month&lt;/code&gt;, &lt;code&gt;year&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;repeatInterval&lt;/code&gt; : 문자열로 반복 할 간격 입니다 . 가능한 값 : &lt;code&gt;minute&lt;/code&gt; , &lt;code&gt;hour&lt;/code&gt; , &lt;code&gt;day&lt;/code&gt; , &lt;code&gt;week&lt;/code&gt; , &lt;code&gt;month&lt;/code&gt; , &lt;code&gt;year&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="e9791562e02937e4099cf256efee1dc706d03db3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;requestAnimationFrame(fn)&lt;/code&gt; is not the same as &lt;code&gt;setTimeout(fn, 0)&lt;/code&gt; - the former will fire after all the frame has flushed, whereas the latter will fire as quickly as possible (over 1000x per second on a iPhone 5S).</source>
          <target state="translated">&lt;code&gt;requestAnimationFrame(fn)&lt;/code&gt; 은 &lt;code&gt;setTimeout(fn, 0)&lt;/code&gt; 과 동일하지 않습니다. 전자는 모든 프레임이 플러시 된 후 발생하지만 후자는 최대한 빨리 (iPhone 5S에서 초당 1000x 이상) 발생합니다.</target>
        </trans-unit>
        <trans-unit id="254c77899dafd1ec02af887ade4cbdb65b72cd06" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;requestAnimationFrame&lt;/code&gt; is a polyfill from the browser that you might be familiar with. It accepts a function as its only argument and calls that function before the next repaint. It is an essential building block for animations that underlies all of the JavaScript-based animation APIs. In general, you shouldn't need to call this yourself - the animation APIs will manage frame updates for you.</source>
          <target state="translated">&lt;code&gt;requestAnimationFrame&lt;/code&gt; 은 익숙한 브라우저의 폴리 필입니다. 함수를 유일한 인수로 받아들이고 다음 다시 그리기 전에 해당 함수를 호출합니다. 모든 JavaScript 기반 애니메이션 API의 기초가되는 애니메이션의 필수 구성 요소입니다. 일반적으로 직접 호출 할 필요는 없습니다. 애니메이션 API가 프레임 업데이트를 관리합니다.</target>
        </trans-unit>
        <trans-unit id="b3de6fadac1347a00156afc60bc01ddcda8bf3dd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;requireNativeComponent&lt;/code&gt; commonly takes two parameters, the first is the name of the native view and the second is an object that describes the component interface. The component interface should declare a friendly &lt;code&gt;name&lt;/code&gt; for use in debug messages and must declare the &lt;code&gt;propTypes&lt;/code&gt; reflected by the Native View. The &lt;code&gt;propTypes&lt;/code&gt; are used for checking the validity of a user's use of the native view. Note that if you need your JavaScript component to do more than just specify a name and propTypes, like do custom event handling, you can wrap the native component in a normal react component. In that case, you want to pass in the wrapper component instead of &lt;code&gt;iface&lt;/code&gt; to &lt;code&gt;requireNativeComponent&lt;/code&gt;. This is illustrated in the &lt;code&gt;MyCustomView&lt;/code&gt; example below.</source>
          <target state="translated">&lt;code&gt;requireNativeComponent&lt;/code&gt; 는 일반적으로 두 개의 매개 변수를 사용합니다. 첫 번째는 기본 뷰의 이름이고 두 번째는 구성 요소 인터페이스를 설명하는 객체입니다. 구성 요소 인터페이스는 디버그 메시지에 사용할 &lt;code&gt;name&lt;/code&gt; 을 선언해야 하며 기본보기에 반영된 &lt;code&gt;propTypes&lt;/code&gt; 선언해야합니다 . &lt;code&gt;propTypes&lt;/code&gt; 는 기본보기의 사용자의 사용의 유효성을 확인하기 위해 사용된다. 사용자 정의 이벤트 처리와 같이 이름과 propTypes를 지정하는 것 이상의 작업을 수행하기 위해 JavaScript 컴포넌트가 필요한 경우 기본 컴포넌트를 일반 반응 컴포넌트로 랩핑 할 수 있습니다. 이 경우, 당신은 대신 래퍼 구성 요소에 전달하려는 &lt;code&gt;iface&lt;/code&gt; 에 &lt;code&gt;requireNativeComponent&lt;/code&gt; . 이는 도시되어 &lt;code&gt;MyCustomView&lt;/code&gt; 의 아래 예.</target>
        </trans-unit>
        <trans-unit id="93fa96393b28c337baf21b4ef63224f6a5afeed9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;resize&lt;/code&gt;: A software operation which changes the encoded image in memory before it gets decoded. This should be used instead of &lt;code&gt;scale&lt;/code&gt; when the image is much larger than the view.</source>
          <target state="translated">&lt;code&gt;resize&lt;/code&gt; : 디코딩되기 전에 메모리에서 인코딩 된 이미지를 변경하는 소프트웨어 작업입니다. 이미지가 뷰보다 훨씬 큰 경우에는 &lt;code&gt;scale&lt;/code&gt; 대신 사용해야합니다 .</target>
        </trans-unit>
        <trans-unit id="11802d312d78c2338fed6bb93b5c51abf69da36d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;restDisplacementThreshold&lt;/code&gt;: The threshold of displacement from rest below which the spring should be considered at rest. Default 0.001.</source>
          <target state="translated">&lt;code&gt;restDisplacementThreshold&lt;/code&gt; : 스프링이 정지 상태로 간주되어야하는 정지 위치에서의 변위 임계 값입니다. 기본값은 0.001입니다.</target>
        </trans-unit>
        <trans-unit id="7af6e2ceb4e5e062da3e8dc1fb1b760a999c9b08" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;restSpeedThreshold&lt;/code&gt;: The speed at which the spring should be considered at rest in pixels per second. Default 0.001.</source>
          <target state="translated">&lt;code&gt;restSpeedThreshold&lt;/code&gt; : 스프링이 정지 상태에서 초당 픽셀로 간주되는 속도. 기본값은 0.001입니다.</target>
        </trans-unit>
        <trans-unit id="0c0fac05a98f08c4290a535fe199ac7b990701db" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;right&lt;/code&gt; is the number of logical pixels to offset the right edge of this component.</source>
          <target state="translated">&lt;code&gt;right&lt;/code&gt; 는이 컴포넌트의 오른쪽 가장자리를 오프셋 할 논리 픽셀 수입니다.</target>
        </trans-unit>
        <trans-unit id="db0afcbb9cc0884252dad0bcd28aa1ec0688cb85" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;runAfterInteractions&lt;/code&gt; takes either a plain callback function, or a &lt;code&gt;PromiseTask&lt;/code&gt; object with a &lt;code&gt;gen&lt;/code&gt; method that returns a &lt;code&gt;Promise&lt;/code&gt;. If a &lt;code&gt;PromiseTask&lt;/code&gt; is supplied, then it is fully resolved (including asynchronous dependencies that also schedule more tasks via &lt;code&gt;runAfterInteractions&lt;/code&gt;) before starting on the next task that might have been queued up synchronously earlier.</source>
          <target state="translated">&lt;code&gt;runAfterInteractions&lt;/code&gt; 는 일반 콜백 함수 또는 &lt;code&gt;Promise&lt;/code&gt; 를 반환하는 &lt;code&gt;gen&lt;/code&gt; 메소드를 가진 &lt;code&gt;PromiseTask&lt;/code&gt; 객체를 사용합니다 . 경우 &lt;code&gt;PromiseTask&lt;/code&gt; 가 공급되고, 그것은 완전히 (도를 통해 많은 작업 일정을 비동기 의존성을 포함하여 해결 &lt;code&gt;runAfterInteractions&lt;/code&gt; 동 기적으로 이전까지 대기중인 수있는 다음 작업을 시작하기 전에 참조).</target>
        </trans-unit>
        <trans-unit id="5600a2ca1524e6a09b24456d5e5daf6936987f48" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;scale&lt;/code&gt; - used to indicate the scale factor of the image. Defaults to 1.0 if unspecified, meaning that one image pixel equates to one display point / DIP.</source>
          <target state="translated">&lt;code&gt;scale&lt;/code&gt; - 이미지의 배율을 나타내는 데 사용됩니다. 지정되지 않은 경우 기본값은 1.0입니다. 즉, 하나의 이미지 픽셀이 하나의 표시 점 / DIP와 같습니다.</target>
        </trans-unit>
        <trans-unit id="c82fbdde5977cc88bb41f8dfee61b8646e13318d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;scale&lt;/code&gt;: The image gets drawn downscaled or upscaled. Compared to &lt;code&gt;resize&lt;/code&gt;, &lt;code&gt;scale&lt;/code&gt; is faster (usually hardware accelerated) and produces higher quality images. This should be used if the image is smaller than the view. It should also be used if the image is slightly bigger than the view.</source>
          <target state="translated">&lt;code&gt;scale&lt;/code&gt; : 이미지가 축소되거나 확대됩니다. 에 비해 &lt;code&gt;resize&lt;/code&gt; , &lt;code&gt;scale&lt;/code&gt; 빠르게 (일반적으로 하드웨어 가속)이고 높은 품질의 이미지를 생성합니다. 이미지가보기보다 작은 경우 사용해야합니다. 이미지가보기보다 약간 큰 경우에도 사용해야합니다.</target>
        </trans-unit>
        <trans-unit id="e0e606d170945c4ffa0aac26e2e0fc1d090e8494" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;sched&lt;/code&gt;, &lt;code&gt;gfx&lt;/code&gt;, and &lt;code&gt;view&lt;/code&gt; are the android SDK tags (collections of markers) we care about: &lt;code&gt;sched&lt;/code&gt; gives you information about what's running on each core of your phone, &lt;code&gt;gfx&lt;/code&gt; gives you graphics info such as frame boundaries, and &lt;code&gt;view&lt;/code&gt; gives you information about measure, layout, and draw passes</source>
          <target state="translated">&lt;code&gt;sched&lt;/code&gt; , &lt;code&gt;gfx&lt;/code&gt; 및 &lt;code&gt;view&lt;/code&gt; 는 우리가 관심을 갖는 안드로이드 SDK 태그 (마커 모음)입니다. &lt;code&gt;sched&lt;/code&gt; 는 휴대 전화의 각 코어에서 실행되는 정보를 제공하고 , &lt;code&gt;gfx&lt;/code&gt; 는 프레임 경계와 같은 그래픽 정보를 제공하며, &lt;code&gt;view&lt;/code&gt; 는 정보를 제공합니다. 패스 측정, 레이아웃 및 그리기</target>
        </trans-unit>
        <trans-unit id="ddd3fa68216a7f891600504a920104167d8b8e45" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;sectionIdentities&lt;/code&gt; is an array of identifiers for sections. ie. ['s1', 's2', ...]. The identifiers should correspond to the keys or array indexes of the data you wish to include. If not provided, it's assumed that the keys of dataBlob are the section identities.</source>
          <target state="translated">&lt;code&gt;sectionIdentities&lt;/code&gt; 는 섹션의 식별자 배열입니다. 즉. [ 's1', 's2', ...]. 식별자는 포함하려는 데이터의 키 또는 배열 색인과 일치해야합니다. 제공되지 않은 경우 dataBlob의 키가 섹션 ID 인 것으로 가정합니다.</target>
        </trans-unit>
        <trans-unit id="1884a0136f167f3a04e685d5e45be949143a395c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;sentences&lt;/code&gt;: first letter of each sentence (&lt;em&gt;default&lt;/em&gt;).</source>
          <target state="translated">&lt;code&gt;sentences&lt;/code&gt; : 각 문장의 첫 글자 ( &lt;em&gt;기본값&lt;/em&gt; ).</target>
        </trans-unit>
        <trans-unit id="856cf0b71ecd517d89f191c3dbf3a829783fbbe7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;setImmediate&lt;/code&gt; is executed at the end of the current JavaScript execution block, right before sending the batched response back to native. Note that if you call &lt;code&gt;setImmediate&lt;/code&gt; within a &lt;code&gt;setImmediate&lt;/code&gt; callback, it will be executed right away, it won't yield back to native in between.</source>
          <target state="translated">&lt;code&gt;setImmediate&lt;/code&gt; 는 현재 JavaScript 실행 블록의 끝에서 일괄 처리 된 응답을 기본으로 다시 보내기 직전에 실행됩니다. 주 당신이 호출하면 것을 &lt;code&gt;setImmediate&lt;/code&gt; 를 내 &lt;code&gt;setImmediate&lt;/code&gt; 의 콜백, 그것은 바로 실행됩니다, 그것은 사이에 기본으로 돌아 양보하지 않을 것이다.</target>
        </trans-unit>
        <trans-unit id="d44a7795a15ff52d4995e6d365e2a1d1883a9773" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;show&lt;/code&gt;: when to show this action as an icon or hide it in the overflow menu: &lt;code&gt;always&lt;/code&gt;, &lt;code&gt;ifRoom&lt;/code&gt; or &lt;code&gt;never&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;show&lt;/code&gt; :이 작업을 아이콘으로 표시하거나 오버플로 메뉴에서 숨길 때 : &lt;code&gt;always&lt;/code&gt; , &lt;code&gt;ifRoom&lt;/code&gt; 또는 &lt;code&gt;never&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="9bd323290316cb619f7faa5347ed5fddb1cd80a9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;showWithText&lt;/code&gt;: boolean, whether to show text alongside the icon or not</source>
          <target state="translated">&lt;code&gt;showWithText&lt;/code&gt; : 부울, 아이콘과 함께 텍스트를 표시할지 여부</target>
        </trans-unit>
        <trans-unit id="5bfb8d652bc010eeaa7a7b4ce3db045db7284fd3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;skipPermissionRequests&lt;/code&gt; (boolean, iOS-only) - Defaults to &lt;code&gt;false&lt;/code&gt;. If &lt;code&gt;true&lt;/code&gt;, you must request permissions before using Geolocation APIs.</source>
          <target state="translated">&lt;code&gt;skipPermissionRequests&lt;/code&gt; (boolean, iOS 전용)-기본값은 &lt;code&gt;false&lt;/code&gt; 입니다. &lt;code&gt;true&lt;/code&gt; 인 경우 Geolocation API를 사용하기 전에 권한을 요청해야합니다.</target>
        </trans-unit>
        <trans-unit id="7bd7eb116b1ea53249ed1e6acf8118cb7e39e6a2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;slide&lt;/code&gt; slides in from the bottom</source>
          <target state="translated">&lt;code&gt;slide&lt;/code&gt; 바닥에서 슬라이드를 밀어 넣다</target>
        </trans-unit>
        <trans-unit id="85d673fc07be538dad6f6fab1b91066f891c50d6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;sound&lt;/code&gt; :boolean</source>
          <target state="translated">&lt;code&gt;sound&lt;/code&gt; : 부울</target>
        </trans-unit>
        <trans-unit id="7262863c38e19b5f444c084133a83c71574f3b80" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;soundName&lt;/code&gt; : The sound played when the notification is fired (optional).</source>
          <target state="translated">&lt;code&gt;soundName&lt;/code&gt; : 알림이 실행될 때 재생되는 소리입니다 (선택 사항).</target>
        </trans-unit>
        <trans-unit id="5e8bc2c1f2d954a2f3dc66b5d02484e48b612cce" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;speed&lt;/code&gt;: Controls speed of the animation. Default 12.</source>
          <target state="translated">&lt;code&gt;speed&lt;/code&gt; : 애니메이션의 속도를 제어합니다. 기본 12.</target>
        </trans-unit>
        <trans-unit id="3c79b4e086429df16252c25a2757ee64d4dc4ad7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;speed&lt;/code&gt;: {number}</source>
          <target state="translated">&lt;code&gt;speed&lt;/code&gt; : {번호}</target>
        </trans-unit>
        <trans-unit id="e5bdba600abe7b8728a7b92461d8ee7350b65689" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;spring.addListener(callback)&lt;/code&gt; will invoke &lt;code&gt;callback&lt;/code&gt; asynchronously while the animation is running, providing a recent value. This is useful for triggering state changes, for example snapping a bobble to a new option as the user drags it closer, because these larger state changes are less sensitive to a few frames of lag compared to continuous gestures like panning which need to run at 60 fps.</source>
          <target state="translated">&lt;code&gt;spring.addListener(callback)&lt;/code&gt; 은 애니메이션이 실행되는 동안 &lt;code&gt;callback&lt;/code&gt; 비동기 적으로 호출 하여 최근 값을 제공합니다. 이는 상태 변경을 트리거하는 데 유용합니다. 예를 들어 사용자가 더 가까이 드래그 할 때 보블을 새 옵션에 스냅하면 이러한 큰 상태 변경은 60에서 실행해야하는 패닝과 같은 연속 제스처에 비해 몇 프레임 지연에 덜 민감합니다. fps.</target>
        </trans-unit>
        <trans-unit id="2fb9a3d00f5585e29891514ddec2b0c2379f0ee7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;spring.stopAnimation(callback)&lt;/code&gt; will stop the animation and invoke &lt;code&gt;callback&lt;/code&gt; with the final value. This is useful when making gesture transitions.</source>
          <target state="translated">&lt;code&gt;spring.stopAnimation(callback)&lt;/code&gt; 은 애니메이션을 멈추고 최종 값으로 &lt;code&gt;callback&lt;/code&gt; 을 호출 합니다. 제스처 전환을 할 때 유용합니다.</target>
        </trans-unit>
        <trans-unit id="e0a33f03849f36586d3a2749c71ece4e2fb8833f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;start_cursor&lt;/code&gt;: {string}</source>
          <target state="translated">&lt;code&gt;start_cursor&lt;/code&gt; : {string}</target>
        </trans-unit>
        <trans-unit id="b941f22737fb04122fbd0d8f788c8bb2811db646" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;stateID&lt;/code&gt; - ID of the gestureState- persisted as long as there at least one touch on screen</source>
          <target state="translated">&lt;code&gt;stateID&lt;/code&gt; -제스처의 ID- 화면을 한 번 이상 터치하면 지속됩니다.</target>
        </trans-unit>
        <trans-unit id="47b18f556d25009c5f1f9b916b3e42e78d74f5cb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;stiffness&lt;/code&gt;: The spring stiffness coefficient. Default 100.</source>
          <target state="translated">&lt;code&gt;stiffness&lt;/code&gt; : 스프링 강성 계수. 기본값은 100입니다.</target>
        </trans-unit>
        <trans-unit id="258a345ea671667933dd8f99cc0fe690cb994249" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;stretch&lt;/code&gt;: Scale width and height independently, This may change the aspect ratio of the src.</source>
          <target state="translated">&lt;code&gt;stretch&lt;/code&gt; : 너비와 높이를 독립적으로 조정합니다. 이는 src의 종횡비를 변경할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c34a13545f9e47512eed2a88c8c86a38f7acba52" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;subject&lt;/code&gt; (string) - a subject for the message</source>
          <target state="translated">&lt;code&gt;subject&lt;/code&gt; (문자열)-메시지의 제목</target>
        </trans-unit>
        <trans-unit id="cdddeec889f0f3f916e2c25e2a1aa20cd8ba14d2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;subject&lt;/code&gt; - a subject to share via email</source>
          <target state="translated">&lt;code&gt;subject&lt;/code&gt; -이메일을 통해 공유 할 주제</target>
        </trans-unit>
        <trans-unit id="afcfb1d5585e89836490ec412ed0e63667a83888" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;success&lt;/code&gt;: A boolean indicating whether the announcement was successfully made.</source>
          <target state="translated">&lt;code&gt;success&lt;/code&gt; : 공지가 성공적으로 이루어 졌는지 여부를 나타내는 부울입니다.</target>
        </trans-unit>
        <trans-unit id="9c0d6a025e3527d03a63730fef96c02430e51b4f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;systrace&lt;/code&gt; is a standard Android marker-based profiling tool (and is installed when you install the Android platform-tools package). Profiled code blocks are surrounded by start/end markers which are then visualized in a colorful chart format. Both the Android SDK and React Native framework provide standard markers that you can visualize.</source>
          <target state="translated">&lt;code&gt;systrace&lt;/code&gt; 는 표준 Android 마커 기반 프로파일 링 도구입니다 (Android 플랫폼 도구 패키지를 설치할 때 설치됨). 프로파일 링 된 코드 블록은 시작 / 종료 마커로 둘러싸여 있으며 다채로운 차트 형식으로 표시됩니다. Android SDK 및 React Native 프레임 워크는 모두 시각화 할 수있는 표준 마커를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="3288c34d8638ac04b0ad486c3ae5bd490e277a25" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;tail&lt;/code&gt; - The line is displayed so that the beginning fits in the container and the missing text at the end of the line is indicated by an ellipsis glyph. e.g., &quot;abcd...&quot;</source>
          <target state="translated">&lt;code&gt;tail&lt;/code&gt; - 컨테이너에 시작 부분이 맞도록 줄이 표시되고 줄 끝에 누락 된 텍스트가 줄임표로 표시됩니다. 예 : &quot;abcd ...&quot;</target>
        </trans-unit>
        <trans-unit id="58b4251f9a6016377431e2ac733ac5836c1b4dd2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;target&lt;/code&gt; - The node id of the element receiving the touch event</source>
          <target state="translated">&lt;code&gt;target&lt;/code&gt; - 터치 이벤트를받는 요소의 노드 ID</target>
        </trans-unit>
        <trans-unit id="05a1e7d6e6e67b5c9baf6c3aab5d3d120aef106b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;target&lt;/code&gt; - The node id of the element receiving the touch event.</source>
          <target state="translated">&lt;code&gt;target&lt;/code&gt; - 터치 이벤트를받는 요소의 노드 ID</target>
        </trans-unit>
        <trans-unit id="584c13d1e77692004cb3596c57888db2146a5a17" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;tension&lt;/code&gt;: Controls speed. Default 40.</source>
          <target state="translated">&lt;code&gt;tension&lt;/code&gt; : 속도를 제어합니다. 기본값은 40입니다.</target>
        </trans-unit>
        <trans-unit id="c2c4a1f20fe744c7ab0de4792cc8e1703cbfb2b1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;thread-id&lt;/code&gt; : The thread identifier of this notification, if has one.</source>
          <target state="translated">&lt;code&gt;thread-id&lt;/code&gt; :이 알림의 스레드 식별자 (있는 경우)입니다.</target>
        </trans-unit>
        <trans-unit id="ea688c08d5f8b5e94d35759fc52b7481c843b1a1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;time&lt;/code&gt; is the length of time the trace will be collected in seconds</source>
          <target state="translated">&lt;code&gt;time&lt;/code&gt; 은 초 단위로 추적이 수집되는 시간입니다.</target>
        </trans-unit>
        <trans-unit id="fb990a568a3792cdc0a0106fdffbe6bc588120d0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;timeout&lt;/code&gt; (ms)</source>
          <target state="translated">&lt;code&gt;timeout&lt;/code&gt; (ms)</target>
        </trans-unit>
        <trans-unit id="2a684a47546a4af612d36c020a75e16ef3560b62" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;timestamp&lt;/code&gt; - A time identifier for the touch, useful for velocity calculation</source>
          <target state="translated">&lt;code&gt;timestamp&lt;/code&gt; -터치의 시간 식별자로 속도 계산에 유용</target>
        </trans-unit>
        <trans-unit id="a3a24a804af82d38874b6be2fc2b480b87d6d021" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;timestamp&lt;/code&gt; - A time identifier for the touch, useful for velocity calculation.</source>
          <target state="translated">&lt;code&gt;timestamp&lt;/code&gt; -터치의 시간 식별자로 속도 계산에 유용합니다.</target>
        </trans-unit>
        <trans-unit id="b9a2e044a3e806b27a774af4af2cb4fb0bc16971" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;timestamp&lt;/code&gt;: {number}</source>
          <target state="translated">&lt;code&gt;timestamp&lt;/code&gt; : {number}</target>
        </trans-unit>
        <trans-unit id="c362392f5dde1f44384785999de438dec0117eb4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;tintColor&lt;/code&gt; (string) - the &lt;a href=&quot;colors&quot;&gt;color&lt;/a&gt; used for non-destructive button titles</source>
          <target state="translated">&lt;code&gt;tintColor&lt;/code&gt; (string)- 비파괴 적 버튼 타이틀에 사용되는 &lt;a href=&quot;colors&quot;&gt;색상&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="e6488b85c4d0b50a40f1d7acd8c5fdea4aeb1a9d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;title&lt;/code&gt; (string) - a title to show above the action sheet</source>
          <target state="translated">&lt;code&gt;title&lt;/code&gt; (문자열)-작업 시트 위에 표시 할 제목</target>
        </trans-unit>
        <trans-unit id="cecff45165f79578b57efabf064c8e5559b324cc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;title&lt;/code&gt; - title of the message</source>
          <target state="translated">&lt;code&gt;title&lt;/code&gt; -메시지 제목</target>
        </trans-unit>
        <trans-unit id="89fa8777efee25368991b0707e251b185f3d6da3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;title&lt;/code&gt; : The title of this notification.</source>
          <target state="translated">&lt;code&gt;title&lt;/code&gt; :이 알림의 제목입니다.</target>
        </trans-unit>
        <trans-unit id="5f1afd75be655de8c22c860e081dd86b05df039a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;title&lt;/code&gt;: &lt;strong&gt;required&lt;/strong&gt;, the title of this action</source>
          <target state="translated">&lt;code&gt;title&lt;/code&gt; : &lt;strong&gt;필수&lt;/strong&gt; ,이 조치의 제목</target>
        </trans-unit>
        <trans-unit id="ca247a8501ebdc52d299172e6e636b4fe7163009" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;top&lt;/code&gt; is the number of logical pixels to offset the top edge of this component.</source>
          <target state="translated">&lt;code&gt;top&lt;/code&gt; 은이 구성 요소의 위쪽 가장자리를 오프셋 할 논리 픽셀 수입니다.</target>
        </trans-unit>
        <trans-unit id="fc115ebfb5f393cefec466ecdc84a55662f2367b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;touchableHandleActivePressIn&lt;/code&gt; will be executed when the touchable view goes into focus</source>
          <target state="translated">&lt;code&gt;touchableHandleActivePressIn&lt;/code&gt; 은 터치 가능한 뷰가 초점을 맞출 때 실행됩니다.</target>
        </trans-unit>
        <trans-unit id="0d198b21e0226ef734461988f6ef225ee271b8b6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;touchableHandleActivePressOut&lt;/code&gt; will be executed when the touchable view goes out of focus</source>
          <target state="translated">&lt;code&gt;touchableHandleActivePressOut&lt;/code&gt; 은 터치 가능한 뷰가 초점을 벗어날 때 실행됩니다.</target>
        </trans-unit>
        <trans-unit id="89bc369ccc759680815951393642dddf785868d5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;touchableHandlePress&lt;/code&gt; will be executed when the touchable view is actually selected by pressing the &quot;select&quot; button on the TV remote.</source>
          <target state="translated">&lt;code&gt;touchableHandlePress&lt;/code&gt; 는 TV 리모컨에서 &quot;선택&quot;버튼을 눌러 터치 가능한보기를 실제로 선택하면 실행됩니다.</target>
        </trans-unit>
        <trans-unit id="620806885ae88566fa550f616936d2e73a23b515" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;touches&lt;/code&gt; - Array of all current touches on the screen</source>
          <target state="translated">&lt;code&gt;touches&lt;/code&gt; - 화면의 모든 현재 터치 배열</target>
        </trans-unit>
        <trans-unit id="2feed898a1a5b8bf60a2f542e7ee23e01b985dd4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;touches&lt;/code&gt; - Array of all current touches on the screen.</source>
          <target state="translated">&lt;code&gt;touches&lt;/code&gt; - 화면의 모든 현재 터치 배열.</target>
        </trans-unit>
        <trans-unit id="dcd5d7925f1ab9c4928b87aa22176eb6c67fab83" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;transform&lt;/code&gt; accepts an array of transformation objects. Each object specifies the property that will be transformed as the key, and the value to use in the transformation. Objects should not be combined. Use a single key/value pair per object.</source>
          <target state="translated">&lt;code&gt;transform&lt;/code&gt; 은 변형 객체 배열을 허용합니다. 각 개체는 키로 변환 될 속성과 변환에 사용할 값을 지정합니다. 개체를 결합해서는 안됩니다. 객체 당 단일 키 / 값 쌍을 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="6c7f131fe82f9be7fbeeee1ad273daa2befa272a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt;, deprecated, use 'always' instead</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; , 더 이상 사용되지 않으며 대신 'always'를 사용하십시오</target>
        </trans-unit>
        <trans-unit id="93270b1e2879dfe65ffa086c2fc1f98dbe419d49" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;type&lt;/code&gt;: A &lt;code&gt;ConnectionType&lt;/code&gt; (listed above)</source>
          <target state="translated">&lt;code&gt;type&lt;/code&gt; : &lt;code&gt;ConnectionType&lt;/code&gt; (위에 나열된)</target>
        </trans-unit>
        <trans-unit id="db3ad1d794a8be38f047f0903c995b26e44ceee2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;type&lt;/code&gt;: {string}</source>
          <target state="translated">&lt;code&gt;type&lt;/code&gt; : {string}</target>
        </trans-unit>
        <trans-unit id="4f3a7282d3edcafac762df3491764ad15cd19b99" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;unknown&lt;/code&gt; - error case and the network status is unknown</source>
          <target state="translated">&lt;code&gt;unknown&lt;/code&gt; - 오류 사례 및 네트워크 상태를 알 수 없음</target>
        </trans-unit>
        <trans-unit id="da9238dd4aba5205d4ca38207fe802333410bcd6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;update&lt;/code&gt;, config for animating views that have been updated (see &lt;code&gt;Anim&lt;/code&gt; type)</source>
          <target state="translated">&lt;code&gt;update&lt;/code&gt; , 업데이트 된 뷰를 애니메이션하기위한 구성 ( &lt;code&gt;Anim&lt;/code&gt; 유형 참조 )</target>
        </trans-unit>
        <trans-unit id="a6a260a8ae11ddd1e8e9dbd0d1b34f5dbd19d4e8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;uri&lt;/code&gt; - a string representing the resource identifier for the image, which should be either a local file path or the name of a static image resource (which should be wrapped in the &lt;code&gt;require('./path/to/image.png')&lt;/code&gt; function).</source>
          <target state="translated">&lt;code&gt;uri&lt;/code&gt; - 이미지의 리소스 식별자를 나타내는 문자열. 로컬 파일 경로 또는 정적 이미지 리소스의 이름이어야 &lt;code&gt;require('./path/to/image.png')&lt;/code&gt; 함수 로 감싸 야합니다 ) ).</target>
        </trans-unit>
        <trans-unit id="efb8e21447e189e7e164f38f4bc50f59bc05371a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;uri&lt;/code&gt;: {string}</source>
          <target state="translated">&lt;code&gt;uri&lt;/code&gt; : {string}</target>
        </trans-unit>
        <trans-unit id="29f514a0bb1144dec5b80efb69ede79b90f72c22" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;url&lt;/code&gt; (string) - a URL to share</source>
          <target state="translated">&lt;code&gt;url&lt;/code&gt; (string)-공유 할 URL</target>
        </trans-unit>
        <trans-unit id="ba927ea1dcf8ca789b8c39137eeff39fbd13a7ad" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;url&lt;/code&gt; - an URL to share</source>
          <target state="translated">&lt;code&gt;url&lt;/code&gt; - 공유 할 URL</target>
        </trans-unit>
        <trans-unit id="2173d969d8af86ce58663db738863c672acedbf6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;useNativeDriver&lt;/code&gt;: Uses the native driver when true. Default false.</source>
          <target state="translated">&lt;code&gt;useNativeDriver&lt;/code&gt; : true 인 경우 기본 드라이버를 사용합니다. 기본값은 false입니다.</target>
        </trans-unit>
        <trans-unit id="e8dabea4087609d3cb497483938a9577b99f7fc4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;useSignificantChanges&lt;/code&gt; (bool)</source>
          <target state="translated">&lt;code&gt;useSignificantChanges&lt;/code&gt; (bool)</target>
        </trans-unit>
        <trans-unit id="c1879908634b30e95106b4744cd51572e3315eec" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;userInfo&lt;/code&gt; : An optional object containing additional notification data.</source>
          <target state="translated">&lt;code&gt;userInfo&lt;/code&gt; : 추가 알림 데이터가 포함 된 선택적 객체입니다.</target>
        </trans-unit>
        <trans-unit id="3d82b1aedde516c20a0818e509a65402a32919fa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;velocity&lt;/code&gt;: Initial velocity. Required.</source>
          <target state="translated">&lt;code&gt;velocity&lt;/code&gt; : 초기 속도. 필수입니다.</target>
        </trans-unit>
        <trans-unit id="72a136c8362fddf8ded9c202177531f6a2c22e64" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;velocity&lt;/code&gt;: The initial velocity of the object attached to the spring. Default 0 (object is at rest).</source>
          <target state="translated">&lt;code&gt;velocity&lt;/code&gt; : 스프링에 부착 된 객체의 초기 속도. 기본값은 0입니다 (개체가 정지 상태 임).</target>
        </trans-unit>
        <trans-unit id="b208ed8df34c5f8eeec195e03d696c268fc40dbc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;viewabilityConfig&lt;/code&gt; takes a type &lt;code&gt;ViewabilityConfig&lt;/code&gt; an object with following properties</source>
          <target state="translated">&lt;code&gt;viewabilityConfig&lt;/code&gt; 는 다음과 같은 속성을 가진 객체 인 &lt;code&gt;ViewabilityConfig&lt;/code&gt; 유형을 취 합니다.</target>
        </trans-unit>
        <trans-unit id="8c819ee0362eef5787e1d2699b35289f92c36a77" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;vx&lt;/code&gt; - current velocity of the gesture</source>
          <target state="translated">&lt;code&gt;vx&lt;/code&gt; - 제스처의 현재 속도</target>
        </trans-unit>
        <trans-unit id="6dbf6ac88d0c82819a0f2d64f4551d1d94c263f2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;vy&lt;/code&gt; - current velocity of the gesture</source>
          <target state="translated">&lt;code&gt;vy&lt;/code&gt; - 제스처의 현재 속도</target>
        </trans-unit>
        <trans-unit id="45613ba12e2f057981563181e1a8ba1a3b6ebe38" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;width&lt;/code&gt; sets the width of this component.</source>
          <target state="translated">&lt;code&gt;width&lt;/code&gt; 는이 구성 요소의 너비를 설정합니다.</target>
        </trans-unit>
        <trans-unit id="8a07b2ded200a22c3fd462faeda527ab85d77a0b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;width&lt;/code&gt;, &lt;code&gt;height&lt;/code&gt; - can be specified if known at build time, in which case these will be used to set the default &lt;code&gt;&amp;lt;Image/&amp;gt;&lt;/code&gt; component dimensions.</source>
          <target state="translated">&lt;code&gt;width&lt;/code&gt; , &lt;code&gt;height&lt;/code&gt; - 빌드 타임에 알려진 경우 지정할 수 있으며,이 경우 기본 &lt;code&gt;&amp;lt;Image/&amp;gt;&lt;/code&gt; 구성 요소 크기 를 설정하는 데 사용됩니다 .</target>
        </trans-unit>
        <trans-unit id="bd8eb230fa88ab95341bda78327c04b3ad704802" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;width&lt;/code&gt;: {number}</source>
          <target state="translated">&lt;code&gt;width&lt;/code&gt; : {번호}</target>
        </trans-unit>
        <trans-unit id="2cdbe97f730b46b3713411feb19e3c4eebf74994" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;wifi&lt;/code&gt; - device is online and connected via wifi, or is the iOS simulator</source>
          <target state="translated">&lt;code&gt;wifi&lt;/code&gt; - 기기가 온라인 상태이며 wifi를 통해 연결되어 있거나 iOS 시뮬레이터 인 경우</target>
        </trans-unit>
        <trans-unit id="510ba45326914a69226abee2488406b4f8b4aa95" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;wimax&lt;/code&gt; - device is connected via WiMAX</source>
          <target state="translated">&lt;code&gt;wimax&lt;/code&gt; - 기기가 WiMAX를 통해 연결됨</target>
        </trans-unit>
        <trans-unit id="5ab6beb3b8b8889e28c68cfa6320b668155800b2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;window.postMessage&lt;/code&gt; accepts one argument, &lt;code&gt;data&lt;/code&gt;, which will be available on the event object, &lt;code&gt;event.nativeEvent.data&lt;/code&gt;. &lt;code&gt;data&lt;/code&gt; must be a string.</source>
          <target state="translated">&lt;code&gt;window.postMessage&lt;/code&gt; 는 이벤트 객체 &lt;code&gt;event.nativeEvent.data&lt;/code&gt; 에서 사용할 수있는 &lt;code&gt;data&lt;/code&gt; 인수 하나를 허용 합니다 . &lt;code&gt;data&lt;/code&gt; 는 문자열이어야합니다.</target>
        </trans-unit>
        <trans-unit id="639c20c5cd22155b2d5087c03acb9313dd0d449c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;words&lt;/code&gt;: first letter of each word.</source>
          <target state="translated">&lt;code&gt;words&lt;/code&gt; : 각 단어의 첫 글자.</target>
        </trans-unit>
        <trans-unit id="113d38a784a94afcbde0b086ec92966a6a1536a8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;x0&lt;/code&gt; - the screen coordinates of the responder grant</source>
          <target state="translated">&lt;code&gt;x0&lt;/code&gt; - 응답자 보조금의 화면 좌표</target>
        </trans-unit>
        <trans-unit id="69e078cdb57b71aa9f49aa854b488045b571b203" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;y0&lt;/code&gt; - the screen coordinates of the responder grant</source>
          <target state="translated">&lt;code&gt;y0&lt;/code&gt; - 응답자 보조금의 화면 좌표</target>
        </trans-unit>
        <trans-unit id="886c373552b57b21661083045cfc074c537785f7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;zIndex&lt;/code&gt; controls which components display on top of others. Normally, you don't use &lt;code&gt;zIndex&lt;/code&gt;. Components render according to their order in the document tree, so later components draw over earlier ones. &lt;code&gt;zIndex&lt;/code&gt; may be useful if you have animations or custom modal interfaces where you don't want this behavior.</source>
          <target state="translated">&lt;code&gt;zIndex&lt;/code&gt; 는 어떤 컴포넌트가 다른 컴포넌트 위에 표시되는지 제어합니다. 일반적으로 &lt;code&gt;zIndex&lt;/code&gt; 는 사용하지 않습니다 . 컴포넌트는 문서 트리에서 순서에 따라 렌더링되므로 나중에 컴포넌트는 이전 컴포넌트를 그립니다. 이 동작을 원하지 않는 애니메이션 또는 사용자 정의 모달 인터페이스가있는 경우 &lt;code&gt;zIndex&lt;/code&gt; 가 유용 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="181b423dc40ea467b49ec432041c248fbc5d5d49" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{}&lt;/code&gt; of props should hug their values (no spaces)</source>
          <target state="translated">&lt;code&gt;{}&lt;/code&gt; 소품의 {} 은 값을 껴안아 야합니다 (공백 없음).</target>
        </trans-unit>
        <trans-unit id="3e41d76b84e251119ba5cd6a620480d951b559df" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;(Apple TV only)&lt;/em&gt; Object with properties to control Apple TV parallax effects.</source>
          <target state="translated">&lt;em&gt;(Apple TV 만 해당)&lt;/em&gt; Apple TV 시차 효과를 제어 할 수있는 속성이있는 객체입니다.</target>
        </trans-unit>
        <trans-unit id="0478b26f059b91c6eea04db019aa266f71571fac" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;(Apple TV only)&lt;/em&gt; TV preferred focus (see documentation for the View component).</source>
          <target state="translated">&lt;em&gt;(Apple TV 만 해당)&lt;/em&gt; TV 기본 설정 (View 구성 요소 설명서 참조).</target>
        </trans-unit>
        <trans-unit id="86c240a6750a27915ff88d71033af1448025f1f0" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;&lt;strong&gt;IMPORTANT&lt;/strong&gt;: Make sure to thoroughly test your app if you've enabled Proguard. Proguard often requires configuration specific to each native library you're using. See &lt;code&gt;app/proguard-rules.pro&lt;/code&gt;.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;&lt;strong&gt;중요&lt;/strong&gt; : Proguard를 활성화 한 경우 앱을 철저히 테스트하십시오. Proguard에는 종종 사용중인 각 기본 라이브러리에 특정한 구성이 필요합니다. &lt;code&gt;app/proguard-rules.pro&lt;/code&gt; 를 참조하십시오 .&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="600d822541859731fa9a0b0984548f59f1cf41fa" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Access to touchable controls&lt;/em&gt;: When running on Android TV the Android framework will automatically apply a directional navigation scheme based on relative position of focusable elements in your views. The &lt;code&gt;Touchable&lt;/code&gt; mixin has code added to detect focus changes and use existing methods to style the components properly and initiate the proper actions when the view is selected using the TV remote, so &lt;code&gt;TouchableHighlight&lt;/code&gt;, &lt;code&gt;TouchableOpacity&lt;/code&gt; and &lt;code&gt;TouchableNativeFeedback&lt;/code&gt; will &quot;just work&quot;. In particular:</source>
          <target state="translated">&lt;em&gt;터치 가능한 컨트롤에 액세스&lt;/em&gt; : Android TV에서 실행할 때 Android 프레임 워크는 뷰에서 포커스 가능한 요소의 상대적 위치를 기반으로 방향 탐색 체계를 자동으로 적용합니다. &lt;code&gt;Touchable&lt;/code&gt; 뷰가 원격 TV를 사용하기를 선택하면 믹스 인 코드 때문에, 초점의 변화를 감지하고 적절하게 스타일에 구성 요소를 기존의 방법을 사용하고 적절한 조치를 시작할 추가했습니다 &lt;code&gt;TouchableHighlight&lt;/code&gt; , &lt;code&gt;TouchableOpacity&lt;/code&gt; 및 &lt;code&gt;TouchableNativeFeedback&lt;/code&gt; 것 &quot;단지 작품&quot;. 특히:</target>
        </trans-unit>
        <trans-unit id="aa5e422d5c166220e8910453f532e8fbf6c186ac" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Access to touchable controls&lt;/em&gt;: When running on Apple TV, the native view class is &lt;code&gt;RCTTVView&lt;/code&gt;, which has additional methods to make use of the tvOS focus engine. The &lt;code&gt;Touchable&lt;/code&gt; mixin has code added to detect focus changes and use existing methods to style the components properly and initiate the proper actions when the view is selected using the TV remote, so &lt;code&gt;TouchableHighlight&lt;/code&gt; and &lt;code&gt;TouchableOpacity&lt;/code&gt; will &quot;just work&quot;. In particular:</source>
          <target state="translated">&lt;em&gt;터치 가능한 컨트롤에 액세스&lt;/em&gt; : Apple TV에서 실행할 때 기본 뷰 클래스는 &lt;code&gt;RCTTVView&lt;/code&gt; 이며 tvOS 포커스 엔진을 사용하는 추가 방법이 있습니다. &lt;code&gt;Touchable&lt;/code&gt; 뷰가 있으므로, 원격 TV를 사용하기를 선택하면 믹스 인 포커스 변화를 감지하고 적절하게 스타일에 구성 요소를 기존의 방법을 사용하고 적절한 조치를 시작할 추가 코드가 &lt;code&gt;TouchableHighlight&lt;/code&gt; 및 &lt;code&gt;TouchableOpacity&lt;/code&gt; 것 &quot;단지 작품&quot;. 특히:</target>
        </trans-unit>
        <trans-unit id="d913fe4df6084733a78c172d1eaff390ba81a95c" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;All the libraries we ship with React Native live on the &lt;code&gt;Libraries&lt;/code&gt; folder in the root of the repository. Some of them are pure JavaScript, and you only need to &lt;code&gt;require&lt;/code&gt; it. Other libraries also rely on some native code, in that case you'll have to add these files to your app, otherwise the app will throw an error as soon as you try to use the library.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;리 액트 네이티브와 함께 제공되는 모든 라이브러리는 리포지토리 루트의 &lt;code&gt;Libraries&lt;/code&gt; 폴더에 있습니다. 그중 일부는 순수한 JavaScript이므로 &lt;code&gt;require&lt;/code&gt; 경우 에만 필요 합니다. 다른 라이브러리도 일부 원시 코드를 사용하므로이 파일을 앱에 추가해야합니다. 그렇지 않으면 라이브러리를 사용하려고하면 앱에서 오류가 발생합니다.&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="2b3d3e21f94f0f7977ae5cffd1059229c560ad11" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Android Only&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;안드로이드 전용&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="f1ca505c74037636f201cc94e8a0e43383d3fe43" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Back navigation with the TV remote menu button&lt;/em&gt;: The &lt;code&gt;BackHandler&lt;/code&gt; component, originally written to support the Android back button, now also supports back navigation on the Apple TV using the menu button on the TV remote.</source>
          <target state="translated">&lt;em&gt;TV 리모컨 메뉴 버튼으로 뒤로 탐색&lt;/em&gt; : 원래 Android 뒤로 버튼을 지원하도록 작성된 &lt;code&gt;BackHandler&lt;/code&gt; 구성 요소는 이제 TV 리모컨의 메뉴 버튼을 사용하여 Apple TV에서 뒤로 탐색을 지원합니다.</target>
        </trans-unit>
        <trans-unit id="36fb6792d14faf2b5fad4e6278fc847109952a39" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Common codebase&lt;/em&gt;: Since tvOS and iOS share most Objective-C and JavaScript code in common, most documentation for iOS applies equally to tvOS.</source>
          <target state="translated">&lt;em&gt;공통 코드베이스&lt;/em&gt; : tvOS와 iOS는 대부분의 Objective-C 및 JavaScript 코드를 공통으로 공유하므로 iOS에 대한 대부분의 문서는 tvOS에 동일하게 적용됩니다.</target>
        </trans-unit>
        <trans-unit id="360cd818eb177c052a26811e23931460c49ffd04" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Cross platform&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;크로스 플랫폼&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="f17cdd5ed24f7ed88470caf8d285befb249b4597" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Dev Menu support&lt;/em&gt;: On the simulator, cmd-D will bring up the developer menu, just like on iOS. To bring it up on a real Apple TV device, make a long press on the play/pause button on the remote. (Please do not shake the Apple TV device, that will not work :) )</source>
          <target state="translated">&lt;em&gt;개발자 메뉴 지원&lt;/em&gt; : 시뮬레이터에서 cmd-D는 iOS에서와 같이 개발자 메뉴를 불러옵니다. 실제 Apple TV 장치로 가져 오려면 리모컨의 재생 / 일시 정지 버튼을 길게 누르십시오. (작동하지 않는 Apple TV 장치를 흔들지 마십시오.)</target>
        </trans-unit>
        <trans-unit id="7b78d01f8b3c74c413c8d48822ac4dc7bd4c2b2f" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Dev Menu support&lt;/em&gt;: On the simulator, cmd-M will bring up the developer menu, just like on Android. To bring it up on a real Android TV device, make a long press on the play/pause button on the remote. (Please do not shake the Android TV device, that will not work :) )</source>
          <target state="translated">&lt;em&gt;개발자 메뉴 지원&lt;/em&gt; : 시뮬레이터에서 cmd-M은 Android와 마찬가지로 개발자 메뉴를 불러옵니다. 실제 Android TV 기기에서 가져 오려면 리모컨의 재생 / 일시 정지 버튼을 길게 누르십시오. (안드로이드 TV 장치를 흔들지 마십시오. 작동하지 않습니다 :))</target>
        </trans-unit>
        <trans-unit id="e60cf587277802a427776343523c6fcc96298462" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Do I need to know the contents of the library at compile time?&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;컴파일 타임에 라이브러리의 내용을 알아야합니까?&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="782c9f1c37f2a30b68f0a9fc45ea6a42661f5af5" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;General support for tvOS&lt;/em&gt;: Apple TV specific changes in native code are all wrapped by the TARGET_OS_TV define. These include changes to suppress APIs that are not supported on tvOS (e.g. web views, sliders, switches, status bar, etc.), and changes to support user input from the TV remote or keyboard.</source>
          <target state="translated">&lt;em&gt;tvOS에 대한 일반 지원&lt;/em&gt; : 네이티브 코드의 Apple TV 특정 변경 사항은 모두 TARGET_OS_TV 정의에 의해 랩핑됩니다. 여기에는 tvOS에서 지원되지 않는 API 억제 (예 : 웹보기, 슬라이더, 스위치, 상태 표시 줄 등) 및 TV 리모컨 또는 키보드에서 사용자 입력을 지원하기위한 변경 사항이 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="add494e1d6d36156c9f455a296b083786cd9a9f2" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;In React Native&lt;/em&gt; this behavior is intentionally not implemented. It is more work for the developer to know the dimensions (or aspect ratio) of the remote image in advance, but we believe that it leads to a better user experience. Static images loaded from the app bundle via the &lt;code&gt;require('./my-icon.png')&lt;/code&gt; syntax &lt;em&gt;can be automatically sized&lt;/em&gt; because their dimensions are available immediately at the time of mounting.</source>
          <target state="translated">&lt;em&gt;React Native&lt;/em&gt; 에서이 동작은 의도적으로 구현되지 않았습니다. 개발자가 원격 이미지의 크기 (또는 종횡비)를 미리 아는 것이 더 많은 작업이지만 더 나은 사용자 경험을 제공한다고 생각합니다. &lt;code&gt;require('./my-icon.png')&lt;/code&gt; 구문을 통해 앱 번들에서로드 된 정적 이미지의 &lt;em&gt;크기&lt;/em&gt; 는 마운트 시점에 즉시 사용할 &lt;em&gt;수 있으므로 자동으로 크기를 조정할 수 있습니다&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="1db1d313a9ba4a6373e1c40843c476bc53783c7a" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;In the browser&lt;/em&gt; if you don't give a size to an image, the browser is going to render a 0x0 element, download the image, and then render the image based with the correct size. The big issue with this behavior is that your UI is going to jump all around as images load, this makes for a very bad user experience.</source>
          <target state="translated">&lt;em&gt;브라우저에서&lt;/em&gt; 이 이미지에 크기를 제공하지 않는 경우, 브라우저는 올바른 크기를 기반으로 이미지를하는 0x0으로 요소를 렌더링 이미지를 다운로드 한 다음 렌더링하는 것입니다. 이 동작의 큰 문제는 이미지가로드 될 때 UI가 모든 것을 뛰어 넘을 수 있다는 것입니다. 이로 인해 사용자 환경이 매우 나빠집니다.</target>
        </trans-unit>
        <trans-unit id="a0a8437d61e43874c107a2978c50475b0e41f229" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;JavaScript layer&lt;/em&gt;: Support for Android TV has been added to &lt;code&gt;Platform.android.js&lt;/code&gt;. You can check whether code is running on Android TV by doing</source>
          <target state="translated">&lt;em&gt;JavaScript 레이어&lt;/em&gt; : Android TV에 대한 지원이 &lt;code&gt;Platform.android.js&lt;/code&gt; 에 추가되었습니다 . Android TV에서 코드가 실행 중인지 확인할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ea85ea5d0b969638afbf120791a78039092cd2e7" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;JavaScript layer&lt;/em&gt;: Support for Apple TV has been added to &lt;code&gt;Platform.ios.js&lt;/code&gt;. You can check whether code is running on AppleTV by doing</source>
          <target state="translated">&lt;em&gt;JavaScript 레이어&lt;/em&gt; : Apple TV에 ​​대한 지원이 &lt;code&gt;Platform.ios.js&lt;/code&gt; 에 추가되었습니다 . AppleTV에서 코드가 실행 중인지 확인할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="955eb741784d92aad4548a43f57cd785a3ed710d" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Known issues&lt;/em&gt;:</source>
          <target state="translated">&lt;em&gt;알려진 문제&lt;/em&gt; :</target>
        </trans-unit>
        <trans-unit id="93d063abc086117781d87d7e9de29797d3bf5ee6" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;NOTE&lt;/em&gt;: Exercise caution as abusing this can tax you in terms of optimizations. IDs enable optimizations through the bridge and memory in general. Refering to style objects directly will deprive you of these optimizations.</source>
          <target state="translated">&lt;em&gt;참고&lt;/em&gt; :이를 악용하면 최적화 측면에서 세금이 부과 될 수 있으므로주의하십시오. ID는 일반적으로 브리지와 메모리를 통한 최적화를 가능하게합니다. 스타일 객체를 직접 참조하면 이러한 최적화가 박탈됩니다.</target>
        </trans-unit>
        <trans-unit id="267f88e7e63dacb3c07e54cf0399038151929358" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Native layer&lt;/em&gt;: React Native Xcode projects all now have Apple TV build targets, with names ending in the string '-tvOS'.</source>
          <target state="translated">&lt;em&gt;네이티브 레이어&lt;/em&gt; : React Native Xcode 프로젝트는 이제 이름이 '-tvOS'로 끝나는 Apple TV 빌드 대상을 갖습니다.</target>
        </trans-unit>
        <trans-unit id="2efed9328653de8412b8d6402ab17896ea54487e" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Native layer&lt;/em&gt;: To run React Native project on Android TV make sure to make the following changes to &lt;code&gt;AndroidManifest.xml&lt;/code&gt;</source>
          <target state="translated">&lt;em&gt;기본 레이어&lt;/em&gt; : Android TV에서 React Native 프로젝트를 실행하려면 &lt;code&gt;AndroidManifest.xml&lt;/code&gt; 을 다음과 같이 변경하십시오.</target>
        </trans-unit>
        <trans-unit id="3ff64be88525c4e7a92d9682b55068c003837d23" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Note about security: If you are not keen on storing your passwords in plaintext and you are running OSX, you can also &lt;a href=&quot;https://pilloxa.gitlab.io/posts/safer-passwords-in-gradle/&quot;&gt;store your credentials in the Keychain Access app&lt;/a&gt;. Then you can skip the two last rows in &lt;code&gt;~/.gradle/gradle.properties&lt;/code&gt;.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;보안에 대한 참고 사항 : 비밀번호를 일반 텍스트로 저장하지 않고 OSX를 실행중인 &lt;a href=&quot;https://pilloxa.gitlab.io/posts/safer-passwords-in-gradle/&quot;&gt;경우 키 체인 액세스 앱에 신임 정보를 저장할&lt;/a&gt; 수도 있습니다 . 그런 다음 &lt;code&gt;~/.gradle/gradle.properties&lt;/code&gt; 에서 마지막 두 행을 건너 뛸 수 있습니다 .&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="d2262ea0b4bd38e56d0634b940debe6a22bd8742" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Note: Android and iOS both interact with this prop differently.&lt;/em&gt;&lt;em&gt;Android may behave better when given no behavior prop at all, whereas iOS is the opposite.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;참고 : Android와 iOS는이 소품과 다르게 상호 작용합니다. &lt;/em&gt;&lt;em&gt;동작 소품이 전혀 없을 경우 Android가 더 잘 동작 할 수 있지만 iOS는 그 반대입니다.&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="5451a51abcb899bd2bd4892022ff7e6f18da6c98" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;TV remote animations&lt;/em&gt;: &lt;code&gt;RCTTVView&lt;/code&gt; native code implements Apple-recommended parallax animations to help guide the eye as the user navigates through views. The animations can be disabled or adjusted with new optional view properties.</source>
          <target state="translated">&lt;em&gt;TV 원격 애니메이션&lt;/em&gt; : &lt;code&gt;RCTTVView&lt;/code&gt; 기본 코드는 Apple 권장 시차 애니메이션을 구현하여 사용자가 뷰를 탐색 할 때 눈을 안내합니다. 새로운 선택적 뷰 속성을 사용하여 애니메이션을 비활성화하거나 조정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b3538c8bfcadaf0082e58951eae68014879fd1d6" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;TV remote/keyboard input&lt;/em&gt;: A new native class, &lt;code&gt;RCTTVRemoteHandler&lt;/code&gt;, sets up gesture recognizers for TV remote events. When TV remote events occur, this class fires notifications that are picked up by &lt;code&gt;RCTTVNavigationEventEmitter&lt;/code&gt; (a subclass of &lt;code&gt;RCTEventEmitter&lt;/code&gt;), that fires a JS event. This event will be picked up by instances of the &lt;code&gt;TVEventHandler&lt;/code&gt; JavaScript object. Application code that needs to implement custom handling of TV remote events can create an instance of &lt;code&gt;TVEventHandler&lt;/code&gt; and listen for these events, as in the following code:</source>
          <target state="translated">&lt;em&gt;TV 원격 / 키보드 입력&lt;/em&gt; : 새로운 기본 클래스 인 &lt;code&gt;RCTTVRemoteHandler&lt;/code&gt; 는 TV 원격 이벤트에 대한 제스처 인식기를 설정합니다. TV 원격 이벤트가 발생하면이 클래스는 &lt;code&gt;RCTTVNavigationEventEmitter&lt;/code&gt; ( RCTEventEmitter 의 서브 클래스)에 의해 선택되어 JS 이벤트를 발생시키는 알림을 발생 &lt;code&gt;RCTEventEmitter&lt;/code&gt; . 이 이벤트는 &lt;code&gt;TVEventHandler&lt;/code&gt; JavaScript 객체의 인스턴스에 의해 선택됩니다 . TV 원격 이벤트의 사용자 지정 처리를 구현해야하는 응용 프로그램 코드 는 다음 코드와 같이 &lt;code&gt;TVEventHandler&lt;/code&gt; 인스턴스를 만들고 이러한 이벤트를 수신 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="4b0ebfa9323e046379704cc6eba3192849f502d4" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;TV remote/keyboard input&lt;/em&gt;: A new native class, &lt;code&gt;ReactAndroidTVRootViewHelper&lt;/code&gt;, sets up key events handlers for TV remote events. When TV remote events occur, this class fires a JS event. This event will be picked up by instances of the &lt;code&gt;TVEventHandler&lt;/code&gt; JavaScript object. Application code that needs to implement custom handling of TV remote events can create an instance of &lt;code&gt;TVEventHandler&lt;/code&gt; and listen for these events, as in the following code:</source>
          <target state="translated">&lt;em&gt;TV 원격 / 키보드 입력&lt;/em&gt; : 새로운 기본 클래스 인 &lt;code&gt;ReactAndroidTVRootViewHelper&lt;/code&gt; 는 TV 원격 이벤트에 대한 주요 이벤트 핸들러를 설정합니다. TV 원격 이벤트가 발생하면이 클래스는 JS 이벤트를 발생시킵니다. 이 이벤트는 &lt;code&gt;TVEventHandler&lt;/code&gt; JavaScript 객체의 인스턴스에 의해 선택됩니다 . TV 원격 이벤트의 사용자 지정 처리를 구현해야하는 응용 프로그램 코드 는 다음 코드와 같이 &lt;code&gt;TVEventHandler&lt;/code&gt; 인스턴스를 만들고 이러한 이벤트를 수신 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="ffef31fcff49df156c13b48243d0701131d73d6d" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;TabBarIOS behavior&lt;/em&gt;: The &lt;code&gt;TabBarIOS&lt;/code&gt; component wraps the native &lt;code&gt;UITabBar&lt;/code&gt; API, which works differently on Apple TV. To avoid jittery rerendering of the tab bar in tvOS (see &lt;a href=&quot;https://github.com/facebook/react-native/issues/15081&quot;&gt;this issue&lt;/a&gt;), the selected tab bar item can only be set from Javascript on initial render, and is controlled after that by the user through native code.</source>
          <target state="translated">&lt;em&gt;TabBarIOS 동작&lt;/em&gt; : &lt;code&gt;TabBarIOS&lt;/code&gt; 구성 요소 는 Apple TV에서 다르게 작동 하는 기본 &lt;code&gt;UITabBar&lt;/code&gt; API를 래핑합니다 . tvOS에서 탭 표시 줄의 불안 정한 렌더링을 피하기 위해 ( &lt;a href=&quot;https://github.com/facebook/react-native/issues/15081&quot;&gt;이 문제&lt;/a&gt; 참조 ) 선택한 탭 표시 줄 항목은 초기 렌더링시 Javascript에서만 설정할 수 있으며 기본 코드를 통해 사용자가 제어합니다.</target>
        </trans-unit>
        <trans-unit id="7d295a282499cc828753536d44055fe15b6eee8d" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;This is not a controlled component&lt;/em&gt;, you don't need to update the value during dragging.</source>
          <target state="translated">&lt;em&gt;이것은 제어되는 구성 요소가 아니므로&lt;/em&gt; 드래그하는 동안 값을 업데이트 할 필요가 없습니다.</target>
        </trans-unit>
        <trans-unit id="998804bd465f908567b06a0781d8d09c95f93d01" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Try&lt;/em&gt; to keep it around 80 characters line length (sometimes it's just not possible...)</source>
          <target state="translated">&lt;em&gt;시도&lt;/em&gt; 80 자 라인의 길이를 유지하기 위해 (때로는 그냥 ... 불가능)</target>
        </trans-unit>
        <trans-unit id="80ac8dcc54397c2ace5139a65e74acc60cc01db2" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;iOS Only&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;iOS 만&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="cbd1a6177d04e3cd7a1b34276c347974cf71287d" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;react-native init&lt;/em&gt;: New React Native projects created with &lt;code&gt;react-native init&lt;/code&gt; will have Apple TV target automatically created in their XCode projects.</source>
          <target state="translated">&lt;em&gt;반응-기본 초기화를&lt;/em&gt; : 새로 만든 기본 프로젝트 반작용 &lt;code&gt;react-native init&lt;/code&gt; 애플 TV 대상이 자동으로 엑스 코드 프로젝트에서 만든 것입니다.</target>
        </trans-unit>
        <trans-unit id="eb35a096afbbbb0074bfc656f5c3d478bd505fc9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;backfaceVisibility&lt;/code&gt;&lt;/strong&gt;: enum('visible', 'hidden')</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;backfaceVisibility&lt;/code&gt; &lt;/strong&gt; : enum ( '보이는', '숨겨진')</target>
        </trans-unit>
        <trans-unit id="63fe1b8edec03b27d5c6841868ffaf9c356fe835" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;backgroundColor&lt;/code&gt;&lt;/strong&gt;: &lt;a href=&quot;colors&quot;&gt;color&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;backgroundColor&lt;/code&gt; &lt;/strong&gt; :&lt;a href=&quot;colors&quot;&gt; 컬러&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="66bb748d444e1891325cc297c844cebcde1111fd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;borderBottomLeftRadius&lt;/code&gt;&lt;/strong&gt;: number</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;borderBottomLeftRadius&lt;/code&gt; &lt;/strong&gt; : 숫자</target>
        </trans-unit>
        <trans-unit id="f38aa30c80439e79922b708885f2ca025f217cf5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;borderBottomRightRadius&lt;/code&gt;&lt;/strong&gt;: number</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;borderBottomRightRadius&lt;/code&gt; &lt;/strong&gt; : 숫자</target>
        </trans-unit>
        <trans-unit id="488ed166bf478b3dc101863343042173ce5d33b2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;borderColor&lt;/code&gt;&lt;/strong&gt;: &lt;a href=&quot;colors&quot;&gt;color&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;borderColor&lt;/code&gt; &lt;/strong&gt; :&lt;a href=&quot;colors&quot;&gt; 색&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="69e57ac91e16dd517950c39c9d82c5de0557f87b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;borderRadius&lt;/code&gt;&lt;/strong&gt;: number</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;borderRadius&lt;/code&gt; &lt;/strong&gt; : 숫자</target>
        </trans-unit>
        <trans-unit id="74114470f2a0ab5730c8569b4ccdce4ad58ce532" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;borderTopLeftRadius&lt;/code&gt;&lt;/strong&gt;: number</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;borderTopLeftRadius&lt;/code&gt; &lt;/strong&gt; : 숫자</target>
        </trans-unit>
        <trans-unit id="24b7a25307488113b0f7109af6ad745d7279e7db" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;borderTopRightRadius&lt;/code&gt;&lt;/strong&gt;: number</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;borderTopRightRadius&lt;/code&gt; &lt;/strong&gt; : 숫자</target>
        </trans-unit>
        <trans-unit id="d358f3ee8370bc5f7e3b778252b78c18e4efb62f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;borderWidth&lt;/code&gt;&lt;/strong&gt;: number</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;borderWidth&lt;/code&gt; &lt;/strong&gt; : 숫자</target>
        </trans-unit>
        <trans-unit id="311c5ad764d28cbe2ffd1ababb06cf6666267708" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;color&lt;/code&gt;&lt;/strong&gt;: &lt;a href=&quot;colors&quot;&gt;color&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;color&lt;/code&gt; &lt;/strong&gt; :&lt;a href=&quot;colors&quot;&gt; 색깔&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="eda3165d95099b3b0f5825285800c427e9fe6c39" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;fontFamily&lt;/code&gt;&lt;/strong&gt;: string</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;fontFamily&lt;/code&gt; &lt;/strong&gt; : 문자열</target>
        </trans-unit>
        <trans-unit id="a6c8a0c6cc0e3007d38b3e5b96b62d6e47cc953d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;fontSize&lt;/code&gt;&lt;/strong&gt;: number</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;fontSize&lt;/code&gt; &lt;/strong&gt; : 숫자</target>
        </trans-unit>
        <trans-unit id="705b2209ce078e900e3c52e4fbaaf19ec1c05af9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;fontStyle&lt;/code&gt;&lt;/strong&gt;: enum('normal', 'italic')</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;fontStyle&lt;/code&gt; &lt;/strong&gt; : enum ( 'normal', 'italic')</target>
        </trans-unit>
        <trans-unit id="fc4b8dfceca9bcefddd92d3b8950d6cc0d8dfdaf" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;fontVariant&lt;/code&gt;&lt;/strong&gt;: array of enum('small-caps', 'oldstyle-nums', 'lining-nums', 'tabular-nums', 'proportional-nums') (&lt;em&gt;iOS&lt;/em&gt;)</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;fontVariant&lt;/code&gt; &lt;/strong&gt; : enum ( 'small-caps', 'oldstyle-nums', 'lining-nums', 'tabular-nums', 'proportional-nums')의 배열 (&lt;em&gt; iOS&lt;/em&gt; )</target>
        </trans-unit>
        <trans-unit id="3888d84dcac3d019e7d4833427898e61804283bb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;fontWeight&lt;/code&gt;&lt;/strong&gt;: enum('normal', 'bold', '100', '200', '300', '400', '500', '600', '700', '800', '900')</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;fontWeight&lt;/code&gt; &lt;/strong&gt; : enum ( 'normal', 'bold', '100', '200', '300', '400', '500', '600', '700', '800', '900')</target>
        </trans-unit>
        <trans-unit id="04e3056cac72b0f11ee6c65e9099b4e667e9374a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;includeFontPadding&lt;/code&gt;&lt;/strong&gt;: bool (&lt;em&gt;Android&lt;/em&gt;)</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;includeFontPadding&lt;/code&gt; &lt;/strong&gt; : bool (&lt;em&gt; Android&lt;/em&gt; )</target>
        </trans-unit>
        <trans-unit id="52ce441f74f0eb51b4e9fada9c21665997c8758c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;letterSpacing&lt;/code&gt;&lt;/strong&gt;: number</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;letterSpacing&lt;/code&gt; &lt;/strong&gt; : 숫자</target>
        </trans-unit>
        <trans-unit id="ca9a466687b418dfdc91ee5646bc62d596c5971d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;lineHeight&lt;/code&gt;&lt;/strong&gt;: number</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;lineHeight&lt;/code&gt; &lt;/strong&gt; : 숫자</target>
        </trans-unit>
        <trans-unit id="2ff06a3400481e28cd22d493bf92a948f5aabf01" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;opacity&lt;/code&gt;&lt;/strong&gt;: number</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;opacity&lt;/code&gt; &lt;/strong&gt; : 숫자</target>
        </trans-unit>
        <trans-unit id="28cde23478110349ebacc20f03084360c6d895e6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;overflow&lt;/code&gt;&lt;/strong&gt;: enum('visible', 'hidden')</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;overflow&lt;/code&gt; &lt;/strong&gt; : enum ( 'visible', 'hidden')</target>
        </trans-unit>
        <trans-unit id="a39f79cc6acbd9c9af7a46a3d36a3b7d4a1674e4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;overlayColor&lt;/code&gt;&lt;/strong&gt;: string (&lt;em&gt;Android&lt;/em&gt;)</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;overlayColor&lt;/code&gt; &lt;/strong&gt; : 문자열 (&lt;em&gt; Android&lt;/em&gt; )</target>
        </trans-unit>
        <trans-unit id="320c03689638e7816cca896d29a2a2a812e054c9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;resizeMode&lt;/code&gt;&lt;/strong&gt;: Object.keys(ImageResizeMode)</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;resizeMode&lt;/code&gt; &lt;/strong&gt; : Object.keys (ImageResizeMode)</target>
        </trans-unit>
        <trans-unit id="b15167eff4d70a4d484e61ea1e124dc5f69c1f85" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;textAlign&lt;/code&gt;&lt;/strong&gt;: enum('auto', 'left', 'right', 'center', 'justify')</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;textAlign&lt;/code&gt; &lt;/strong&gt; : enum ( 'auto', 'left', 'right', 'center', 'justify')</target>
        </trans-unit>
        <trans-unit id="e3205b151c63e363940195851dbcfafaa278ca63" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;textAlignVertical&lt;/code&gt;&lt;/strong&gt;: enum('auto', 'top', 'bottom', 'center') (&lt;em&gt;Android&lt;/em&gt;)</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;textAlignVertical&lt;/code&gt; &lt;/strong&gt; : enum ( 'auto', 'top', 'bottom', 'center') (&lt;em&gt; Android&lt;/em&gt; )</target>
        </trans-unit>
        <trans-unit id="8defe62b2a9ca6df98759993e6ea3f0786f81bab" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;textDecorationColor&lt;/code&gt;&lt;/strong&gt;: &lt;a href=&quot;colors&quot;&gt;color&lt;/a&gt; (&lt;em&gt;iOS&lt;/em&gt;)</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;textDecorationColor&lt;/code&gt; &lt;/strong&gt; :&lt;a href=&quot;colors&quot;&gt; 색상&lt;/a&gt; (&lt;em&gt; iOS&lt;/em&gt; )</target>
        </trans-unit>
        <trans-unit id="b22a4f5a3d9524ae864218b4d7ac26a5997a5415" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;textDecorationLine&lt;/code&gt;&lt;/strong&gt;: enum('none', 'underline', 'line-through', 'underline line-through')</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;textDecorationLine&lt;/code&gt; &lt;/strong&gt; : enum ( 'none', 'underline', 'line-through', 'underline line-through')</target>
        </trans-unit>
        <trans-unit id="633773601b0990195b47a4dcdabd322ad4bb39bf" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;textDecorationStyle&lt;/code&gt;&lt;/strong&gt;: enum('solid', 'double', 'dotted', 'dashed') (&lt;em&gt;iOS&lt;/em&gt;)</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;textDecorationStyle&lt;/code&gt; &lt;/strong&gt; : enum ( 'solid', 'double', 'dotted', 'dashed') (&lt;em&gt; iOS&lt;/em&gt; )</target>
        </trans-unit>
        <trans-unit id="e7f515852768bc12312fd299cddb5af2f2c19cb4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;textShadowColor&lt;/code&gt;&lt;/strong&gt;: &lt;a href=&quot;colors&quot;&gt;color&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;textShadowColor&lt;/code&gt; &lt;/strong&gt; :&lt;a href=&quot;colors&quot;&gt; 색상&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="9ba6a5efa3ae6f4af57063d3b2958cc06cfae28f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;textShadowOffset&lt;/code&gt;&lt;/strong&gt;: object: {width: number,height: number}</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;textShadowOffset&lt;/code&gt; &lt;/strong&gt; : 객체 : {너비 : 숫자, 높이 : 숫자}</target>
        </trans-unit>
        <trans-unit id="405ab4857a7d1aeb3c84631bfdf244fe479f47f1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;textShadowRadius&lt;/code&gt;&lt;/strong&gt;: number</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;textShadowRadius&lt;/code&gt; &lt;/strong&gt; : 숫자</target>
        </trans-unit>
        <trans-unit id="8566cc8067aa8923393cedbf29800f3605dcbf1b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;textTransform&lt;/code&gt;&lt;/strong&gt;: enum('none', 'uppercase', 'lowercase', 'capitalize') (&lt;em&gt;iOS&lt;/em&gt;)</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;textTransform&lt;/code&gt; &lt;/strong&gt; : enum ( '없음', '대문자', '소문자', '대문자') (&lt;em&gt; iOS&lt;/em&gt; )</target>
        </trans-unit>
        <trans-unit id="98756f804a2d68b2641b076b256825113642e523" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;tintColor&lt;/code&gt;&lt;/strong&gt;: &lt;a href=&quot;colors&quot;&gt;color&lt;/a&gt;</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;tintColor&lt;/code&gt; &lt;/strong&gt; :&lt;a href=&quot;colors&quot;&gt; 색&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="3f52f7630cb7a5da59a1ca1f38f9008e546d4f3a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;code&gt;writingDirection&lt;/code&gt;&lt;/strong&gt;: enum('auto', 'ltr', 'rtl') (&lt;em&gt;iOS&lt;/em&gt;)</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;writingDirection&lt;/code&gt; &lt;/strong&gt; : enum ( 'auto', 'ltr', 'rtl') (&lt;em&gt; iOS&lt;/em&gt; )</target>
        </trans-unit>
        <trans-unit id="4ba60a9ef71114d1bc0e5a2622d7a74353cb27ff" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;em&gt;Note:&lt;/em&gt;&lt;/strong&gt; Currently, JS functions &lt;code&gt;componentWillReceiveProps&lt;/code&gt; and &lt;code&gt;componentWillUpdateProps&lt;/code&gt; of the top level RN component will not be called after a prop update. However, you can access the new props in &lt;code&gt;componentWillMount&lt;/code&gt; function.</source>
          <target state="translated">&lt;strong&gt;&lt;em&gt;참고 :&lt;/em&gt;&lt;/strong&gt; 현재prop 업데이트 후에 최상위 RN 구성 &lt;code&gt;componentWillUpdateProps&lt;/code&gt; 의 &lt;code&gt;componentWillReceiveProps&lt;/code&gt; 및 componentWillUpdateProps JS 함수가 호출되지 않습니다. 그러나 &lt;code&gt;componentWillMount&lt;/code&gt; 함수의 새 소품에 액세스 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e01a3a44d4fcb53cfc168b115c700c9b94187385" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;em&gt;Note:&lt;/em&gt;&lt;/strong&gt; If your iOS project is using CocoaPods (contains &lt;code&gt;Podfile&lt;/code&gt;) and linked library has &lt;code&gt;podspec&lt;/code&gt; file, then &lt;code&gt;react-native link&lt;/code&gt; will link library using Podfile. To support non-trivial Podfiles add &lt;code&gt;# Add new pods below this line&lt;/code&gt; comment to places where you expect pods to be added.</source>
          <target state="translated">&lt;strong&gt;&lt;em&gt;참고 :&lt;/em&gt;&lt;/strong&gt; 귀하의 아이폰 OS 프로젝트 CocoaPods를 (포함 사용하는 경우 &lt;code&gt;Podfile&lt;/code&gt; 을 )와 연결 라이브러리가 &lt;code&gt;podspec&lt;/code&gt; 파일을 다음 &lt;code&gt;react-native link&lt;/code&gt; Podfile를 사용하여 라이브러리를 연결됩니다. 사소한 Podfile을 지원하려면 &lt;code&gt;# Add new pods below this line&lt;/code&gt; 주석 아래에 새 Pod를 추가하십시오 . Pod를 추가할 위치에 추가하십시오.</target>
        </trans-unit>
        <trans-unit id="4d2794923881d5b552e6280f394a6172219225b2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;em&gt;Note:&lt;/em&gt;&lt;/strong&gt; React Native does not perform any layout calculations until the root view becomes a subview of some other views. If you want to hide React Native view until its dimensions are known, add the root view as a subview and make it initially hidden (use &lt;code&gt;UIView&lt;/code&gt;'s &lt;code&gt;hidden&lt;/code&gt; property). Then change its visibility in the delegate method.</source>
          <target state="translated">&lt;strong&gt;&lt;em&gt;참고 :&lt;/em&gt;&lt;/strong&gt; React Native는 루트 뷰가 다른 뷰의 하위 뷰가 될 때까지 레이아웃 계산을 수행하지 않습니다. 차원을 알 때까지 React Native보기를 숨기려면 루트보기를 하위보기로 추가하고 처음에 숨기십시오 ( &lt;code&gt;UIView&lt;/code&gt; 의 &lt;code&gt;hidden&lt;/code&gt; 속성 사용). 그런 다음 대리자 메서드에서 가시성을 변경하십시오.</target>
        </trans-unit>
        <trans-unit id="97f08969f170a1e1b7b3ff5c58ae61f5c130dcf9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;em&gt;Note:&lt;/em&gt;&lt;/strong&gt; React Native layout calculation is performed on a special thread, while native UI view updates are done on the main thread. This may cause temporary UI inconsistencies between native and React Native. This is a known problem and our team is working on synchronizing UI updates coming from different sources.</source>
          <target state="translated">&lt;strong&gt;&lt;em&gt;참고 :&lt;/em&gt;&lt;/strong&gt; React 기본 레이아웃 계산은 특수 스레드에서 수행되는 반면 기본 UI보기 업데이트는 기본 스레드에서 수행됩니다. 이로 인해 기본 UI와 기본 네이티브간에 UI가 일시적으로 일치하지 않을 수 있습니다. 이것은 알려진 문제이며 우리 팀은 다른 소스에서 오는 UI 업데이트 동기화를 위해 노력하고 있습니다.</target>
        </trans-unit>
        <trans-unit id="9dd0b90ca1195d98455128984582d19f974d4390" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;em&gt;Note:&lt;/em&gt;&lt;/strong&gt;&lt;code&gt;--save&lt;/code&gt; or &lt;code&gt;--save-dev&lt;/code&gt; flag is very important for this step. React Native will link your libs based on &lt;code&gt;dependencies&lt;/code&gt; and &lt;code&gt;devDependencies&lt;/code&gt; in your &lt;code&gt;package.json&lt;/code&gt; file.</source>
          <target state="translated">&lt;strong&gt;&lt;em&gt;참고 :&lt;/em&gt;&lt;/strong&gt; &lt;code&gt;--save&lt;/code&gt; 또는 &lt;code&gt;--save-dev&lt;/code&gt; 플래그는이 단계에서 매우 중요합니다. React Native는 &lt;code&gt;package.json&lt;/code&gt; 파일의 &lt;code&gt;dependencies&lt;/code&gt; 및 &lt;code&gt;devDependencies&lt;/code&gt; 를기반으로 라이브러리를 링크합니다.</target>
        </trans-unit>
        <trans-unit id="f9c097ef16556d721ace3b6690c1c262fa02c8cb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;em&gt;Warning:&lt;/em&gt;&lt;/strong&gt; Making a dimension flexible in both JS and native leads to undefined behavior. For example - don't make a top-level React component's width flexible (with &lt;code&gt;flexbox&lt;/code&gt;) while you're using &lt;code&gt;RCTRootViewSizeFlexibilityWidth&lt;/code&gt; on the hosting &lt;code&gt;RCTRootView&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;&lt;em&gt;경고 :&lt;/em&gt;&lt;/strong&gt; JS와 기본에서 모두 차원을 유연하게 만들면 동작이 정의되지 않습니다. 예를 들어, 호스팅 &lt;code&gt;RCTRootView&lt;/code&gt; 에서 &lt;code&gt;RCTRootViewSizeFlexibilityWidth&lt;/code&gt; 를사용하는 동안최상위 React 컴포넌트의 너비를 &lt;code&gt;flexbox&lt;/code&gt; 로 유연하게 만들지 마십시오 .</target>
        </trans-unit>
        <trans-unit id="d3312dfda74f7daace53b755d40233551d914037" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;&lt;em&gt;Warning&lt;/em&gt;&lt;/strong&gt;: All native modules share the same namespace. Watch out for name collisions when creating new ones.</source>
          <target state="translated">&lt;strong&gt;&lt;em&gt;경고&lt;/em&gt;&lt;/strong&gt; : 모든 기본 모듈은 동일한 네임 스페이스를 공유합니다. 새로운 이름을 만들 때 이름 충돌에주의하십시오.</target>
        </trans-unit>
        <trans-unit id="226b0fd6c21469dbb2d8520690d88f48afd6712c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Bonus: Render Thread.&lt;/strong&gt; If you're using Android L (5.0) and up, you will also have a render thread in your application. This thread generates the actual OpenGL commands used to draw your UI. The thread name will be either &lt;code&gt;RenderThread&lt;/code&gt; or &lt;code&gt;&amp;lt;...&amp;gt;&lt;/code&gt;. To identify it in the latter case, look for things like &lt;code&gt;DrawFrame&lt;/code&gt; and &lt;code&gt;queueBuffer&lt;/code&gt;:</source>
          <target state="translated">&lt;strong&gt;보너스 : 렌더 스레드. &lt;/strong&gt;Android L (5.0) 이상을 사용하는 경우 응용 프로그램에 렌더 스레드가 있습니다. 이 스레드는 UI를 그리는 데 사용되는 실제 OpenGL 명령을 생성합니다. 스레드 이름은 &lt;code&gt;RenderThread&lt;/code&gt; 또는 &lt;code&gt;&amp;lt;...&amp;gt;&lt;/code&gt; 입니다. 후자의 경우이를 식별하려면 &lt;code&gt;DrawFrame&lt;/code&gt; 및 &lt;code&gt;queueBuffer&lt;/code&gt; 와 같은 것을 찾으십시오 .</target>
        </trans-unit>
        <trans-unit id="e00294a185f06e851204850411e8e5589bd890dc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Can the issue be reliably reproduced?&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;문제를 안정적으로 재현 할 수 있습니까?&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d233d192e085ed080aff4b6dd4a10af1b549261a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Close&lt;/strong&gt; the request.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;요청을 &lt;strong&gt;닫&lt;/strong&gt; 습니다.</target>
        </trans-unit>
        <trans-unit id="d612f53da3f1ad73c2ca3385a1ec6fc098ec1649" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Constants:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Constants:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="98fddc35eeb6696ca5d22ae8aa9b24891f85eb34" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;DEPRECATED.&lt;/strong&gt; Virtualization provides significant performance and memory optimizations, but fully unmounts react instances that are outside of the render window. You should only need to disable this for debugging purposes.</source>
          <target state="translated">&lt;strong&gt;더 이상 사용되지 않습니다. &lt;/strong&gt;가상화는 상당한 성능 및 메모리 최적화를 제공하지만 렌더 윈도우 외부에있는 반응 인스턴스를 완전히 마운트 해제합니다. 디버깅 목적으로 만이를 비활성화해야합니다.</target>
        </trans-unit>
        <trans-unit id="85f5c199a5aef4635c66b91b4457dabf6bc3ed78" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Deprecated.&lt;/strong&gt; Use the &lt;code&gt;source&lt;/code&gt; prop instead.</source>
          <target state="translated">&lt;strong&gt;더 이상 사용되지 않습니다. &lt;/strong&gt;대신 &lt;code&gt;source&lt;/code&gt; 소품을 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="10cc6473b064c507b8d9e7a5b531471db41382f9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Does the code style match the &lt;a href=&quot;contributing#style-guide&quot;&gt;Style guide&lt;/a&gt;?&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;코드 스타일이 &lt;a href=&quot;contributing#style-guide&quot;&gt;스타일 가이드&lt;/a&gt; 와 일치합니까 ?&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="817b84e577beb244ccf40456cbca7e716348cb7e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Does the issue include a Snack or list of steps to reproduce the issue?&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;문제에 간식 또는 문제 재현 단계 목록이 포함되어 있습니까?&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="059c387ff3290cbf4f5ce463bab277de35a9d162" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Does the issue need more information?&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;문제에 추가 정보가 필요합니까?&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="716b4a5a5925c51d310690b44ad8b97c8ca3494c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Does the pull request add a completely new feature we don't want to add to the core and maintain?&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;풀 요청이 코어에 추가하고 유지하고 싶지 않은 완전히 새로운 기능을 추가합니까?&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="0b19c9a26031f1e70a3501657920a9dc4bd62a37" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Does the pull request do several unrelated things at the same time?&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;풀 요청이 동시에 여러 관련되지 않은 작업을 수행합니까?&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="b7951b71c79710c6d25076d2d52c9faa8b0d63e6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Enable VSync highlighting&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;VSync 강조 표시 사용&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="db1cac0c321d0c0541894492791de778177e56b0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Explain why&lt;/strong&gt; it doesn't fit into the scope of the project.</source>
          <target state="translated">&lt;strong&gt;왜&lt;/strong&gt; 그것이 프로젝트의 범위에 맞지 &lt;strong&gt;않는지 설명&lt;/strong&gt; 하십시오.</target>
        </trans-unit>
        <trans-unit id="68847114f71639ada1b9e324ec7ca08f86fc6f19" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;HINT&lt;/strong&gt;: Use the WASD keys to strafe and zoom</source>
          <target state="translated">&lt;strong&gt;힌트&lt;/strong&gt; : WASD 키를 사용하여 스트래핑 및 확대</target>
        </trans-unit>
        <trans-unit id="3661ee8f9da1e9b389819f67b4b05559c33f6b4e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Has the issue been resolved already in the comments?&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;의견에서 문제가 이미 해결 되었습니까?&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="68ba9a871f714dde2cd0f7ecc91125447587b520" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;How to Contribute to an Open Source Project on GitHub&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;GitHub에서 오픈 소스 프로젝트에 참여하는 방법&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="8d553f6cc32126072a31a45f3949306eb04c4ec1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;IMPORTANT!&lt;/strong&gt; in ReactJS updating the property value will result in setter method call. Note that one of the ways we can update component is by removing properties that have been set before. In that case setter method will be called as well to notify view manager that property has changed. In that case &quot;default&quot; value will be provided (for primitive types &quot;default&quot; can value can be specified using &lt;code&gt;defaultBoolean&lt;/code&gt;, &lt;code&gt;defaultFloat&lt;/code&gt;, etc. arguments of &lt;code&gt;@ReactProp&lt;/code&gt; annotation, for complex types setter will be called with value set to &lt;code&gt;null&lt;/code&gt;).</source>
          <target state="translated">&lt;strong&gt;중대한! &lt;/strong&gt;ReactJS에서 특성 값을 업데이트하면 setter 메소드 호출이 발생합니다. 컴포넌트를 업데이트 할 수있는 방법 중 하나는 이전에 설정된 속성을 제거하는 것입니다. 이 경우 뷰 관리자에게 속성이 변경되었음을 알리기 위해 setter 메소드가 호출됩니다. 이 경우 &quot;default&quot;값이 제공됩니다 (기본 유형의 경우 &quot;default&quot;는 &lt;code&gt;defaultBoolean&lt;/code&gt; , &lt;code&gt;defaultFloat&lt;/code&gt; 등을 사용하여 &lt;code&gt;@ReactProp&lt;/code&gt; 주석의 인수를 사용하여 값을 지정할 수 있습니다 . 복잡한 유형의 경우 setter가 value를 &lt;code&gt;null&lt;/code&gt; 로 설정하여 호출 됨 ).</target>
        </trans-unit>
        <trans-unit id="451790cdceba20b50fc41f08dac996452c4cbc88" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;IMPORTANT:&lt;/strong&gt; You don't have to install the new version of the &lt;code&gt;react-native&lt;/code&gt; package, it will be installed automatically.</source>
          <target state="translated">&lt;strong&gt;중요 : &lt;/strong&gt; &lt;code&gt;react-native&lt;/code&gt; 패키지 의 새 버전을 설치할 필요가 없으며 자동으로 설치됩니다.</target>
        </trans-unit>
        <trans-unit id="82f1d28f431835884e68d92f634388e020e94480" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Important when making third party modules&lt;/strong&gt;: Static libraries with Swift are only supported in Xcode 9 and later. In order for the Xcode project to build when you use Swift in the iOS static library you include in the module, your main app project must contain Swift code and a bridging header itself. If your app project does not contain any Swift code, a workaround can be a single empty .swift file and an empty bridging header.</source>
          <target state="translated">&lt;strong&gt;타사 모듈을 만들 때 중요&lt;/strong&gt; : Swift가 포함 된 정적 라이브러리는 Xcode 9 이상에서만 지원됩니다. 모듈에 포함 된 iOS 정적 라이브러리에서 Swift를 사용할 때 Xcode 프로젝트를 빌드하려면 기본 앱 프로젝트에 Swift 코드와 브리징 헤더 자체가 포함되어야합니다. 앱 프로젝트에 Swift 코드가 포함되어 있지 않은 경우 해결 방법은 하나의 빈 .swift 파일과 빈 브리징 헤더 일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="37c2b3e7c695651c83e1b241712bc85e47f80670" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Is a pull request waiting for a response from author?&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;풀 요청이 작성자의 응답을 기다리고 있습니까?&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="999a02462e7604fb27384707e110501ee07960cf" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Is the issue a duplicate of an existing, open issue?&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;문제가 기존의 공개 문제와 중복됩니까?&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="f6cc116b3240d49593d1e49505f84cfb6001878c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Is the issue for an old release of React Native?&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;React Native의 이전 릴리스에 문제가 있습니까?&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="1c07a185f55d5c21bdbe5cfae6512bec8b56f607" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Is the pull request missing information?&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;풀 요청에 정보가 누락 되었습니까?&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="5c0255488621745bb0f7d7868102a1261f101ade" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Is the pull request old and need rebasing?&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;풀 요청이 오래되었고 리베이스가 필요합니까?&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="76a8a39c32c58d144387b4089cf73d0ced50f065" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Is the pull request old and waiting for review?&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;풀 요청이 오래되었고 검토 대기 중입니까?&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="9f7bdc9570c91d6631bbdde19b271ca6a48a29a4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Is this issue a feature request?&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;이 문제는 기능 요청입니까?&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="37dd7fff5448e3a5655e22c5741c06e62a60e122" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Is this issue a request for help?&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;이 문제가 도움을 요청합니까?&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="40ea43acb2cd230fcfeebcbd23b0d02157ac29f0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;JS Thread.&lt;/strong&gt; This is where JavaScript is executed. The thread name will be either &lt;code&gt;mqt_js&lt;/code&gt; or &lt;code&gt;&amp;lt;...&amp;gt;&lt;/code&gt; depending on how cooperative the kernel on your device is being. To identify it if it doesn't have a name, look for things like &lt;code&gt;JSCall&lt;/code&gt;, &lt;code&gt;Bridge.executeJSCall&lt;/code&gt;, etc:</source>
          <target state="translated">&lt;strong&gt;JS 스레드. &lt;/strong&gt;이곳은 JavaScript가 실행되는 곳입니다. 스레드 이름은 장치의 커널이 작동하는 방식에 따라 &lt;code&gt;mqt_js&lt;/code&gt; 또는 &lt;code&gt;&amp;lt;...&amp;gt;&lt;/code&gt; 입니다. 이름이 없으면 식별하려면 &lt;code&gt;JSCall&lt;/code&gt; , &lt;code&gt;Bridge.executeJSCall&lt;/code&gt; 등을 찾으십시오 .</target>
        </trans-unit>
        <trans-unit id="be24f8249da2832b75664e72da0ce307d4847918" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Link to relevant documentation&lt;/strong&gt;, if you have it.</source>
          <target state="translated">&lt;strong&gt;관련 문서&lt;/strong&gt; 가 있으면 &lt;strong&gt;링크&lt;/strong&gt; 하십시오.</target>
        </trans-unit>
        <trans-unit id="5c0696fd0b8bc4d0c5e3e3f946b7980755a82b85" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Most important: Look around.&lt;/strong&gt; Match the style you see used in the rest of the project. This includes formatting, naming things in code, naming things in documentation.</source>
          <target state="translated">&lt;strong&gt;가장 중요한 : 둘러보세요. &lt;/strong&gt;프로젝트의 나머지 부분에서 사용 된 스타일과 일치하십시오. 여기에는 형식 지정, 코드 이름 지정, 문서 이름 지정이 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="93850fe8d6048bf67a7a36db8e12128b1f2581a7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;NOTE:&lt;/strong&gt; This is not supported by all native implementations.</source>
          <target state="translated">&lt;strong&gt;참고 :&lt;/strong&gt; 일부 기본 구현에서는 지원되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="f32e04ca96baaa9deec9655ab37a911f64435783" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;NOTE&lt;/strong&gt; : In order for video to play inline, not only does this property need to be set to &lt;code&gt;true&lt;/code&gt;, but the video element in the HTML document must also include the &lt;code&gt;webkit-playsinline&lt;/code&gt; attribute.</source>
          <target state="translated">&lt;strong&gt;참고&lt;/strong&gt; : 비디오를 인라인으로 재생하려면이 속성을 &lt;code&gt;true&lt;/code&gt; 로 설정해야 할 뿐만 아니라 HTML 문서의 비디오 요소에도 &lt;code&gt;webkit-playsinline&lt;/code&gt; 속성이 포함되어야 합니다.</target>
        </trans-unit>
        <trans-unit id="2a16336108d52b9dd56df151a78a130f3361c040" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;NOTE&lt;/strong&gt;: About array and map</source>
          <target state="translated">&lt;strong&gt;참고&lt;/strong&gt; : 배열 및 맵</target>
        </trans-unit>
        <trans-unit id="2a3247ae2ec2bb9379177e6d5e46ceaaa11dada8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;NOTE&lt;/strong&gt;: It is important to use the @objc modifiers to ensure the class and functions are exported properly to the Objective-C runtime.</source>
          <target state="translated">&lt;strong&gt;참고&lt;/strong&gt; : 클래스와 함수를 Objective-C 런타임으로 올바르게 내보내려면 @objc 수정자를 사용해야합니다.</target>
        </trans-unit>
        <trans-unit id="a6c85e4aae22bfd53f1ed3ca8577954dda2af8cf" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;NOTE&lt;/strong&gt;: JavaScript method names</source>
          <target state="translated">&lt;strong&gt;참고&lt;/strong&gt; : JavaScript 메소드 이름</target>
        </trans-unit>
        <trans-unit id="4d4f177fa39ef792bc0f310ec4cb92a9d74d41f7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;NOTE&lt;/strong&gt;: Sharing dispatch queues between modules</source>
          <target state="translated">&lt;strong&gt;참고&lt;/strong&gt; : 모듈간에 디스패치 큐 공유</target>
        </trans-unit>
        <trans-unit id="8ea12e47faef483743a9437da1c5e87b0deea1aa" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;NOTE&lt;/strong&gt;: This is not supported by all native implementations.</source>
          <target state="translated">&lt;strong&gt;참고&lt;/strong&gt; : 모든 기본 구현에서 지원되는 것은 아닙니다.</target>
        </trans-unit>
        <trans-unit id="350a09972d0a15d926f202c4e7ff37b2021450de" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Native Modules Thread.&lt;/strong&gt; This is where native module calls (e.g. the &lt;code&gt;UIManager&lt;/code&gt;) are executed. The thread name will be either &lt;code&gt;mqt_native_modules&lt;/code&gt; or &lt;code&gt;&amp;lt;...&amp;gt;&lt;/code&gt;. To identify it in the latter case, look for things like &lt;code&gt;NativeCall&lt;/code&gt;, &lt;code&gt;callJavaModuleMethod&lt;/code&gt;, and &lt;code&gt;onBatchComplete&lt;/code&gt;:</source>
          <target state="translated">&lt;strong&gt;네이티브 모듈 스레드. &lt;/strong&gt;네이티브 모듈 호출 (예 : &lt;code&gt;UIManager&lt;/code&gt; )이 실행되는 곳입니다. 스레드 이름은 &lt;code&gt;mqt_native_modules&lt;/code&gt; 또는 &lt;code&gt;&amp;lt;...&amp;gt;&lt;/code&gt; 입니다. 후자의 경우이를 식별하려면 &lt;code&gt;NativeCall&lt;/code&gt; , &lt;code&gt;callJavaModuleMethod&lt;/code&gt; 및 &lt;code&gt;onBatchComplete&lt;/code&gt; 와 같은 것을 찾으십시오 .</target>
        </trans-unit>
        <trans-unit id="b174e637a99c959acedd2e085ae198d4923a1b21" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note about saving the keystore:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;키 저장소 저장에 대한 참고 사항 :&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="b1674a715614154ac6289ba71e4b85e3d2f98e48" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note for Android:&lt;/strong&gt; add &lt;code&gt;&amp;lt;uses-permission android:name=&quot;android.permission.VIBRATE&quot;/&amp;gt;&lt;/code&gt; to &lt;code&gt;AndroidManifest.xml&lt;/code&gt;</source>
          <target state="translated">&lt;strong&gt;안드로이드에 대한 참고 :&lt;/strong&gt; 추가 &lt;code&gt;&amp;lt;uses-permission android:name=&quot;android.permission.VIBRATE&quot;/&amp;gt;&lt;/code&gt; 에 &lt;code&gt;AndroidManifest.xml&lt;/code&gt; 에</target>
        </trans-unit>
        <trans-unit id="4be4ffdddb8b9573bfe7619a952594de97734c23" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Do not attempt to set the &lt;code&gt;frame&lt;/code&gt; or &lt;code&gt;backgroundColor&lt;/code&gt; properties on the &lt;code&gt;UIView&lt;/code&gt; instance that you expose through the &lt;code&gt;-view&lt;/code&gt; method. React Native will overwrite the values set by your custom class in order to match your JavaScript component's layout props. If you need this granularity of control it might be better to wrap the &lt;code&gt;UIView&lt;/code&gt; instance you want to style in another &lt;code&gt;UIView&lt;/code&gt; and return the wrapper &lt;code&gt;UIView&lt;/code&gt; instead. See &lt;a href=&quot;https://github.com/facebook/react-native/issues/2948&quot;&gt;Issue 2948&lt;/a&gt; for more context.</source>
          <target state="translated">&lt;strong&gt;참고 : &lt;/strong&gt; &lt;code&gt;-view&lt;/code&gt; 메서드를 통해 노출 되는 &lt;code&gt;UIView&lt;/code&gt; 인스턴스 에서 &lt;code&gt;frame&lt;/code&gt; 또는 &lt;code&gt;backgroundColor&lt;/code&gt; 속성 을 설정하지 마십시오 . React Native는 JavaScript 컴포넌트의 레이아웃 소품과 일치시키기 위해 사용자 정의 클래스에서 설정 한 값을 덮어 씁니다. 이 세분화 된 제어가 필요한 경우 다른 &lt;code&gt;UIView&lt;/code&gt; 에서 스타일을 지정하려는 &lt;code&gt;UIView&lt;/code&gt; 인스턴스 를 래핑하고 대신 래퍼 &lt;code&gt;UIView&lt;/code&gt; 를 반환하는 것이 좋습니다. 자세한 내용은 &lt;a href=&quot;https://github.com/facebook/react-native/issues/2948&quot;&gt;2948 문제를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="d07b97f70a7823eaa15bdf836c1df537b0f49504" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; It is not necessary to keep clicking &lt;code&gt;Merge master to your branch&lt;/code&gt; on the PR page. You would want to merge master if there are conflicts or tests are failing. The Facebook-GitHub-Bot ultimately squashes all commits to a single one before merging your PR.</source>
          <target state="translated">&lt;strong&gt;참고 :&lt;/strong&gt; PR 페이지에서 &lt;code&gt;Merge master to your branch&lt;/code&gt; 으로 마스터 병합 을 계속 클릭 할 필요는 없습니다 . 충돌이 있거나 테스트가 실패하면 마스터를 병합하려고합니다. Facebook-GitHub-Bot은 궁극적으로 PR을 병합하기 전에 모든 커밋을 단일 커밋으로 스쿼시합니다.</target>
        </trans-unit>
        <trans-unit id="bce480223b46f1bdb75af809152112deb7ecd52d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; When rendering, don't forget to stretch the view, otherwise you'll be staring at a blank screen.</source>
          <target state="translated">&lt;strong&gt;참고 :&lt;/strong&gt; 렌더링 할 때 뷰를 늘이는 것을 잊지 마십시오. 그렇지 않으면 빈 화면을 쳐다볼 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="89e837e9d97c46ec660f3f92466fc99cb3fc3a47" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt;&lt;code&gt;refreshing&lt;/code&gt; is a controlled prop, this is why it needs to be set to true in the &lt;code&gt;onRefresh&lt;/code&gt; function otherwise the refresh indicator will stop immediately.</source>
          <target state="translated">&lt;strong&gt;참고 : &lt;/strong&gt; &lt;code&gt;refreshing&lt;/code&gt; 은 제어 된 소품이므로 &lt;code&gt;onRefresh&lt;/code&gt; 기능 에서 true로 설정해야합니다. 그렇지 않으면 새로 고침 표시기가 즉시 중지됩니다.</target>
        </trans-unit>
        <trans-unit id="9afec4757738ed089345fc87d59852c21cf30688" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;One issue, one bug:&lt;/strong&gt; Please report a single bug per issue.</source>
          <target state="translated">&lt;strong&gt;하나의 이슈, 하나의 버그 :&lt;/strong&gt; 이슈 당 하나의 버그를보고하십시오.</target>
        </trans-unit>
        <trans-unit id="8cf6a6684f50f3ea7a170aa3398f4403873e6036" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Parameters:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Parameters:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="12dd8e61ba852c1ce0bccefae413e8c66850ca3e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Properties:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Properties:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="9850c7d140af7598e8fa8b5482778306197994b6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Provide a Snack:&lt;/strong&gt; The best way to get attention on your issue is to provide a reduced test case. You can use &lt;a href=&quot;https://snack.expo.io/&quot;&gt;Snack&lt;/a&gt; to demonstrate the issue.</source>
          <target state="translated">&lt;strong&gt;간식 제공 :&lt;/strong&gt; 문제에주의를 기울이는 가장 좋은 방법은 축소 된 테스트 사례를 제공하는 것입니다. &lt;a href=&quot;https://snack.expo.io/&quot;&gt;스낵&lt;/a&gt; 을 사용 하여 문제를 보여줄 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="9534fe3662923da56f1da1f5a1a4727588b02983" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Provide reproduction steps:&lt;/strong&gt; List all the steps necessary to reproduce the issue. Provide a Snack or upload a sample project to GitHub. The person reading your bug report should be able to follow these steps to reproduce your issue with minimal effort.</source>
          <target state="translated">&lt;strong&gt;재현 단계 제공 :&lt;/strong&gt; 문제를 재현하는 데 필요한 모든 &lt;strong&gt;단계를&lt;/strong&gt; 나열하십시오. 스낵을 제공하거나 샘플 프로젝트를 GitHub에 업로드하십시오. 버그 보고서를 읽는 사람은 다음 단계를 따라 최소한의 노력으로 문제를 재현 할 수 있어야합니다.</target>
        </trans-unit>
        <trans-unit id="b9625ccedbac5e1c3e43830419c371d5089c27e0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Reopening a closed issue:&lt;/strong&gt; Sometimes it's necessary to reopen an issue. For example, if an issue was closed waiting for the author, then the author replied and it turns out this is indeed a bug, maintainers can reopen the issue.</source>
          <target state="translated">&lt;strong&gt;닫힌 문제&lt;/strong&gt; 다시 열기 &lt;strong&gt;:&lt;/strong&gt; 때때로 &lt;strong&gt;문제&lt;/strong&gt; 를 다시 열어야합니다. 예를 들어, 작성자를 기다리는 문제가 종료 된 경우 작성자가 대답하고 실제로 버그 인 것으로 확인되면 관리자가 문제를 다시 열 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f01bfbced6ea3dc7a3670cf94ad2ba2845dde8de" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Security Warning:&lt;/strong&gt; Currently, &lt;code&gt;onMessage&lt;/code&gt; and &lt;code&gt;postMessage&lt;/code&gt; do not allow specifying an origin. This can lead to cross-site scripting attacks if an unexpected document is loaded within a &lt;code&gt;WebView&lt;/code&gt; instance. Please refer to the MDN documentation for &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage&quot;&gt;&lt;code&gt;Window.postMessage()&lt;/code&gt;&lt;/a&gt; for more details on the security implications of this.</source>
          <target state="translated">&lt;strong&gt;보안 경고 :&lt;/strong&gt; 현재 &lt;code&gt;onMessage&lt;/code&gt; 및 &lt;code&gt;postMessage&lt;/code&gt; 에서는 원본을 지정할 수 없습니다. 이로 인해 예기치 않은 문서가 &lt;code&gt;WebView&lt;/code&gt; 인스턴스 내에로드되면 사이트 간 스크립팅 공격이 발생할 수 있습니다 . 이에 대한 보안 영향에 대한 자세한 내용 은 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage&quot;&gt; &lt;code&gt;Window.postMessage()&lt;/code&gt; &lt;/a&gt; MDN 설명서를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="21d7a775ee526d4f487f64da53f7c8fb76bd2753" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Step 1:&lt;/strong&gt; Set environment variables through your local shell.</source>
          <target state="translated">&lt;strong&gt;1 단계 :&lt;/strong&gt; 로컬 쉘을 통해 환경 변수를 설정하십시오.</target>
        </trans-unit>
        <trans-unit id="35e4c3527154de063c5d2d7831d287303e0666f2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Step 2:&lt;/strong&gt; Create a &lt;code&gt;local.properties&lt;/code&gt; file in the &lt;code&gt;android&lt;/code&gt; directory of your react-native app with the following contents:</source>
          <target state="translated">&lt;strong&gt;2 단계 :&lt;/strong&gt; 다음과 같은 내용으로 react-native 앱 의 &lt;code&gt;android&lt;/code&gt; 디렉토리에 &lt;code&gt;local.properties&lt;/code&gt; 파일을 작성하십시오 .</target>
        </trans-unit>
        <trans-unit id="1c7c71e9c9c6cbf85b43d351794f447a4f52bbe8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Thank&lt;/strong&gt; them for their contribution.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;그들의 기여에 &lt;strong&gt;감사드립니다&lt;/strong&gt; .</target>
        </trans-unit>
        <trans-unit id="db78fbedcf96c64deccf79f27b9dadcd96fc12e4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;The alpha channel of the view rendered by the &lt;code&gt;maskElement&lt;/code&gt; prop determines how much of the view's content and background shows through.&lt;/strong&gt; Fully or partially opaque pixels allow the underlying content to show through but fully transparent pixels block that content.</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;maskElement&lt;/code&gt; 소품으로 렌더링 된 뷰의 알파 채널은 뷰의 내용과 배경이 얼마나 많이 보여 지는지를 결정합니다. &lt;/strong&gt;완전히 또는 부분적으로 불투명 한 픽셀은 기본 컨텐트가 통과하지만 완전히 투명한 픽셀은 해당 컨텐트를 차단합니다.</target>
        </trans-unit>
        <trans-unit id="acda93e0731199644b2b506bceefbecec207c048" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;The vibration duration in iOS is not configurable&lt;/strong&gt;, so there are some differences with Android. In Android, if &lt;code&gt;pattern&lt;/code&gt; is a number, it specifies the vibration duration in ms. If &lt;code&gt;pattern&lt;/code&gt; is an array, those odd indices are the vibration duration, while the even ones are the separation time.</source>
          <target state="translated">&lt;strong&gt;iOS의 진동 지속 시간은 구성&lt;/strong&gt; 할 수 없으므로 Android와 약간의 차이가 있습니다. Android에서 &lt;code&gt;pattern&lt;/code&gt; 이 숫자 인 경우 진동 지속 시간을 ms 단위로 지정합니다. 경우 &lt;code&gt;pattern&lt;/code&gt; 배열되는 것들도가 분리 시간 동안, 그 홀수 인덱스는, 상기 진동 구간이다.</target>
        </trans-unit>
        <trans-unit id="3a849a2441be83a5b5bb89b84ceb349782e094f3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Try out the latest version:&lt;/strong&gt; Verify that the issue can be reproduced locally by updating your project to use &lt;a href=&quot;http://facebook.github.io/react-native/versions.html&quot;&gt;React Native from &lt;code&gt;master&lt;/code&gt;&lt;/a&gt;. The bug may have already been fixed!</source>
          <target state="translated">&lt;strong&gt;최신 버전을 사용해보십시오&lt;/strong&gt; . &lt;a href=&quot;http://facebook.github.io/react-native/versions.html&quot;&gt;React Native from &lt;code&gt;master&lt;/code&gt; &lt;/a&gt; 를 사용하도록 프로젝트를 업데이트하여 로컬에서 문제를 재현 할 수 있는지 확인하십시오 . 버그가 이미 수정되었을 수 있습니다!</target>
        </trans-unit>
        <trans-unit id="61e1ec8479c938f51d0e86b7d8d2cb8c18b5fb63" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;UI Thread.&lt;/strong&gt; This is where standard android measure/layout/draw happens. The thread name on the right will be your package name (in my case book.adsmanager) or UI Thread. The events that you see on this thread should look something like this and have to do with &lt;code&gt;Choreographer&lt;/code&gt;, &lt;code&gt;traversals&lt;/code&gt;, and &lt;code&gt;DispatchUI&lt;/code&gt;:</source>
          <target state="translated">&lt;strong&gt;UI 스레드. &lt;/strong&gt;이것은 표준 안드로이드 측정 / 레이아웃 / 그리기가 발생하는 곳입니다. 오른쪽의 스레드 이름은 패키지 이름 (필자의 경우 book.adsmanager) 또는 UI 스레드입니다. 이 스레드에서 볼 수있는 이벤트는 다음과 같아야하며 &lt;code&gt;Choreographer&lt;/code&gt; , &lt;code&gt;traversals&lt;/code&gt; 및 &lt;code&gt;DispatchUI&lt;/code&gt; 와 관련이 있습니다 .</target>
        </trans-unit>
        <trans-unit id="a61fe7dcc9b944b7aa4bb3863418ae332c93ffba" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;WARNING&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;WARNING&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="b6ae8d9c3245259c6783ec0a6a8282c22223fc76" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Was the &lt;a href=&quot;https://github.com/facebook/react-native/blob/master/.github/ISSUE_TEMPLATE.md&quot;&gt;Issue Template&lt;/a&gt; used to fill out the issue? Did the author answer Yes to both questions at the top?&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;&lt;a href=&quot;https://github.com/facebook/react-native/blob/master/.github/ISSUE_TEMPLATE.md&quot;&gt;이슈 템플릿을&lt;/a&gt; 사용 하여 이슈 를 작성 했습니까? 저자는 맨 위에있는 두 질문에 모두 예라고 대답 했습니까?&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="955663bfdafcf8e588727b759a8a0cae5c86172e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;adjustable&lt;/strong&gt; Used when an element can be &quot;adjusted&quot; (e.g. a slider).</source>
          <target state="translated">&lt;strong&gt;조정 가능&lt;/strong&gt; 요소를 &quot;조정&quot;할 수있는 경우에 사용됩니다 (예 : 슬라이더).</target>
        </trans-unit>
        <trans-unit id="caa770326ebf6886a4f4e3970c551bfb003e4995" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;allowsDirectInteraction&lt;/strong&gt; Used when an element allows direct touch interaction for VoiceOver users (for example, a view representing a piano keyboard).</source>
          <target state="translated">&lt;strong&gt;allowDirectInteraction&lt;/strong&gt; 요소가 VoiceOver 사용자에게 직접 터치 상호 작용을 허용 할 때 사용됩니다 (예 : 피아노 키보드를 나타내는보기).</target>
        </trans-unit>
        <trans-unit id="51cb7e53233000710e0cd20800024d1229206811" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;assertive&lt;/strong&gt; Accessibility services should interrupt ongoing speech to immediately announce changes to this view.</source>
          <target state="translated">&lt;strong&gt;독단적&lt;/strong&gt; 접근성 서비스는 진행중인 발언을 중단하여이 견해에 대한 변경 사항을 즉시 발표해야합니다.</target>
        </trans-unit>
        <trans-unit id="d97abc1d53ef7358c7d1e48501e2baf4d8675234" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;button&lt;/strong&gt; Used when the element should be treated as a button.</source>
          <target state="translated">&lt;strong&gt;버튼&lt;/strong&gt; 요소를 버튼으로 취급해야 할 때 사용합니다.</target>
        </trans-unit>
        <trans-unit id="c7ae2102a86aef1f0ea9c57cf978f2e4dacab0b8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;disabled&lt;/strong&gt; Used when the control is not enabled and does not respond to user input.</source>
          <target state="translated">&lt;strong&gt;disabled&lt;/strong&gt; 컨트롤이 활성화되어 있지 않고 사용자 입력에 응답하지 않을 때 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="623718018c1976dc7cb018eac7be138c2289c595" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;frequentUpdates&lt;/strong&gt; Used when the element frequently updates its label or value, but too often to send notifications. Allows an accessibility client to poll for changes. A stopwatch would be an example.</source>
          <target state="translated">&lt;strong&gt;frequentUpdates&lt;/strong&gt; 요소가 레이블이나 값을 자주 업데이트하지만 너무 자주 알림을 보내지 않을 때 사용됩니다. 접근성 클라이언트가 변경 사항을 폴링 할 수 있도록합니다. 스톱워치가 그 예입니다.</target>
        </trans-unit>
        <trans-unit id="6d46bd5de68bb9e0de4f4aa274b60c00c50cb262" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;header&lt;/strong&gt; Used when an element acts as a header for a content section (e.g. the title of a navigation bar).</source>
          <target state="translated">&lt;strong&gt;header&lt;/strong&gt; 요소가 컨텐츠 섹션의 헤더 역할을하는 경우에 사용됩니다 (예 : 탐색 막대의 제목).</target>
        </trans-unit>
        <trans-unit id="67171c73db0f03c23ed330eebcf08212b783b898" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;image&lt;/strong&gt; Used when the element should be treated as an image. Can be combined with button or link, for example.</source>
          <target state="translated">&lt;strong&gt;image&lt;/strong&gt; 요소를 이미지로 취급해야 할 때 사용합니다. 예를 들어 버튼 또는 링크와 결합 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="17338e17149cec2e0f91c0ddc5b7acccf3299b36" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;key&lt;/strong&gt; Used when the element acts as a keyboard key.</source>
          <target state="translated">&lt;strong&gt;키&lt;/strong&gt; 요소가 키보드 키 역할을 할 때 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="8fb68825282764664f021b10715c75bc1598c30f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;link&lt;/strong&gt; Used when the element should be treated as a link.</source>
          <target state="translated">&lt;strong&gt;링크&lt;/strong&gt; 요소를 링크로 취급해야 할 때 사용합니다.</target>
        </trans-unit>
        <trans-unit id="94cd51a113f7d06e77c42bc108fb590897b58f80" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;none&lt;/strong&gt; Accessibility services should not announce changes to this view.</source>
          <target state="translated">&lt;strong&gt;없음&lt;/strong&gt; 접근성 서비스는이보기에 대한 변경 사항을 발표해서는 안됩니다.</target>
        </trans-unit>
        <trans-unit id="6c571475085ab7686f1624eec81d1f6fbf867e9a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;none&lt;/strong&gt; Used when the element has no traits.</source>
          <target state="translated">&lt;strong&gt;none&lt;/strong&gt; 요소에 특성이 없을 때 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="24f90c6f6ecfc85f3539818ee1cf3b4422eb808f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;pageTurn&lt;/strong&gt; Informs VoiceOver that it should scroll to the next page when it finishes reading the contents of the element.</source>
          <target state="translated">&lt;strong&gt;pageTurn&lt;/strong&gt; 요소의 내용을 다 읽은 후 다음 페이지로 스크롤해야한다는 것을 VoiceOver에 알립니다.</target>
        </trans-unit>
        <trans-unit id="055e3ac86bfdc54152f2209612c3fb6cc36b2566" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;plays&lt;/strong&gt; Used when the element plays its own sound when activated.</source>
          <target state="translated">&lt;strong&gt;plays&lt;/strong&gt; 요소가 활성화 될 때 자체 사운드를 재생할 때 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="3d7771ce8358bc3b5ba46bd8855ea1ed9a2b8bf3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;polite&lt;/strong&gt; Accessibility services should announce changes to this view.</source>
          <target state="translated">&lt;strong&gt;공손한&lt;/strong&gt; 접근성 서비스는이 견해에 대한 변경 사항을 발표해야합니다.</target>
        </trans-unit>
        <trans-unit id="e2875ac36111f2bec92389b6b3b4440d19375b95" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;search&lt;/strong&gt; Used when the text field element should also be treated as a search field.</source>
          <target state="translated">&lt;strong&gt;search&lt;/strong&gt; 텍스트 필드 요소를 검색 필드로 취급해야 할 때 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="34ede3829af0f6f09350b08d1e211282e1dd3264" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;selected&lt;/strong&gt; Used when the element is selected. For example, a selected row in a table or a selected button within a segmented control.</source>
          <target state="translated">&lt;strong&gt;selected&lt;/strong&gt; 요소를 선택할 때 사용됩니다. 예를 들어, 테이블에서 선택된 행 또는 세그먼트 된 컨트롤 내에서 선택된 버튼.</target>
        </trans-unit>
        <trans-unit id="89bf1b98822f376c3cc097dfff36a50ad1600c7c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;startsMedia&lt;/strong&gt; Used when activating an element starts a media session (e.g. playing a movie, recording audio) that should not be interrupted by output from an assistive technology, like VoiceOver.</source>
          <target state="translated">&lt;strong&gt;startsMedia&lt;/strong&gt; 요소를 활성화 할 때 VoiceOver와 같은 보조 기술의 출력에 의해 중단되지 않아야하는 미디어 세션 (예 : 영화 재생, 오디오 녹음)을 시작할 때 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="1694d38578965d2cff52ae39937dbdf958b4dbe7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;summary&lt;/strong&gt; Used when an element can be used to provide a quick summary of current conditions in the app when the app first launches. For example, when Weather first launches, the element with today's weather conditions is marked with this trait.</source>
          <target state="translated">&lt;strong&gt;summary&lt;/strong&gt; 앱을 처음 시작할 때 요소를 사용하여 앱의 현재 상태를 빠르게 요약 할 수있는 경우에 사용됩니다. 예를 들어 날씨가 처음 시작되면 오늘 날씨 조건이있는 요소에이 특성이 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="e86ff4a1317ed6881d4465e1f5b871f9689dc5b4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;text&lt;/strong&gt; Used when the element should be treated as static text that cannot change.</source>
          <target state="translated">&lt;strong&gt;text&lt;/strong&gt; 요소를 변경할 수없는 정적 텍스트로 처리해야 할 때 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="ad0a9a6bbdc27942100f8f60e9f0060fffd79c5f" translate="yes" xml:space="preserve">
          <source>?(() =&amp;gt; void),&lt;a href=&quot;alertios#buttonsarray&quot;&gt;ButtonsArray&lt;/a&gt;</source>
          <target state="translated">? (() =&amp;gt; void), &lt;a href=&quot;alertios#buttonsarray&quot;&gt;ButtonsArray&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="1a8c1e683078e6d3e4a9c2ada7a307bf284ac90d" translate="yes" xml:space="preserve">
          <source>?((text: string) =&amp;gt; void),&lt;a href=&quot;alertios#buttonsarray&quot;&gt;ButtonsArray&lt;/a&gt;</source>
          <target state="translated">? ((text : string) =&amp;gt; void), &lt;a href=&quot;alertios#buttonsarray&quot;&gt;ButtonsArray&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="e406c4711ff6c42a7908aed1907cc13072898efe" translate="yes" xml:space="preserve">
          <source>?(error: ?Error) =&amp;gt; void</source>
          <target state="translated">? (오류 :? Error) =&amp;gt; void</target>
        </trans-unit>
        <trans-unit id="87705ce5a9b16fb2fcf9c469fb7b5feda34aeb73" translate="yes" xml:space="preserve">
          <source>?(error: ?Error, keys: ?Array</source>
          <target state="translated">? (오류 :? 오류, 키 :? Array</target>
        </trans-unit>
        <trans-unit id="538b9650307f6f96842b1be1b717922bfe7c5078" translate="yes" xml:space="preserve">
          <source>?(error: ?Error, result: ?string) =&amp;gt; void</source>
          <target state="translated">? (오류 :? 오류, 결과 :? string) =&amp;gt; void</target>
        </trans-unit>
        <trans-unit id="8836a69e2d4409fbe47ef07e8bddcb7d788f43b7" translate="yes" xml:space="preserve">
          <source>?(errors: ?Array</source>
          <target state="translated">? (오류 :? Array</target>
        </trans-unit>
        <trans-unit id="c08752e551e2e2ba935d7cf167052d0eed1ec746" translate="yes" xml:space="preserve">
          <source>@deprecated</source>
          <target state="translated">@deprecated</target>
        </trans-unit>
        <trans-unit id="81fa55d50be6fb46c1d469383fcf49714600da45" translate="yes" xml:space="preserve">
          <source>@keyword checkbox @keyword toggle</source>
          <target state="translated">@keyword 확인란 @keyword toggle</target>
        </trans-unit>
        <trans-unit id="16464ddad1cc4d8d36bae3d13fadc3129b1bfca7" translate="yes" xml:space="preserve">
          <source>@param objName @param fnName @param {function} func @return {function} replacement function</source>
          <target state="translated">@param objName @param fnName @param {function} func @return {function} 대체 함수</target>
        </trans-unit>
        <trans-unit id="6a3618818333feb7f4764c81c4da2a78b256f4a8" translate="yes" xml:space="preserve">
          <source>@param object @param objectName @param methodNames Map from method names to method display names.</source>
          <target state="translated">@param object @param objectName @param methodNames 메서드 이름에서 메서드 표시 이름으로 매핑합니다.</target>
        </trans-unit>
        <trans-unit id="3f4b85dd6d4cc6ebd732d232d951cea4c84f9db5" translate="yes" xml:space="preserve">
          <source>@param taskId the native id for this task instance to keep track of its execution @param taskKey the key for the task to start @param data the data to pass to the task</source>
          <target state="translated">@param taskId 실행을 추적하는이 작업 인스턴스의 고유 ID @param taskKey 작업을위한 키 @param data 작업에 전달할 데이터</target>
        </trans-unit>
        <trans-unit id="56037c72516f19e995509d02c9c82ef986a63085" translate="yes" xml:space="preserve">
          <source>@param the content to be stored in the clipboard.</source>
          <target state="translated">@param 클립 보드에 저장 될 내용.</target>
        </trans-unit>
        <trans-unit id="c1be8eadbdb68bfb210e72c6149dc1e19f4eb40d" translate="yes" xml:space="preserve">
          <source>@param {function} callback function to be called when the event fires.</source>
          <target state="translated">@param {function} 콜백 함수는 이벤트가 발생할 때 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="1e2b3dc926ca275308996b63aa373ea2eeb35202" translate="yes" xml:space="preserve">
          <source>@param {object} config Enhanced versions of all of the responder callbacks that provide not only the typical &lt;code&gt;ResponderSyntheticEvent&lt;/code&gt;, but also the &lt;code&gt;PanResponder&lt;/code&gt; gesture state. Simply replace the word &lt;code&gt;Responder&lt;/code&gt; with &lt;code&gt;PanResponder&lt;/code&gt; in each of the typical &lt;code&gt;onResponder*&lt;/code&gt; callbacks. For example, the &lt;code&gt;config&lt;/code&gt; object would look like:</source>
          <target state="translated">@param {object} config 일반적인 &lt;code&gt;ResponderSyntheticEvent&lt;/code&gt; 뿐만 아니라 &lt;code&gt;PanResponder&lt;/code&gt; 동작 상태 를 제공하는 모든 응답기 콜백의 향상된 버전 . 일반적인 &lt;code&gt;onResponder*&lt;/code&gt; 콜백 에서 &lt;code&gt;Responder&lt;/code&gt; 라는 단어 를 &lt;code&gt;PanResponder&lt;/code&gt; 로 바꾸십시오 . 예를 들어 &lt;code&gt;config&lt;/code&gt; 개체는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="7a1935d6a746f30c386323abd90437a390197828" translate="yes" xml:space="preserve">
          <source>@param {object} dims Simple string-keyed object of dimensions to set</source>
          <target state="translated">@param {object} dims 설정할 간단한 문자열 키 개체</target>
        </trans-unit>
        <trans-unit id="b40d3c15c84908436991d4f0f855e807a5619866" translate="yes" xml:space="preserve">
          <source>@param {string} dim Name of dimension as defined when calling &lt;code&gt;set&lt;/code&gt;. @returns {Object?} Value for the dimension.</source>
          <target state="translated">@param {string} dim &lt;code&gt;set&lt;/code&gt; 호출시 정의 된 차원의 이름입니다 . @returns {Object?} 차원의 값입니다.</target>
        </trans-unit>
        <trans-unit id="3081eb28c72be8dde440fb3118bd28d7db4d0679" translate="yes" xml:space="preserve">
          <source>@param {string} eventName The &lt;code&gt;nativeEvent&lt;/code&gt; is the string that identifies the event you're listening for. @param {function} callback function to be called when the event fires.</source>
          <target state="translated">@param {string} eventName &lt;code&gt;nativeEvent&lt;/code&gt; 는 듣고있는 이벤트를 식별하는 문자열입니다. @param {function} 콜백 함수는 이벤트가 발생할 때 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="26cacdb0b9fc8e7728d9cee9f7661f3875f98d71" translate="yes" xml:space="preserve">
          <source>@param {string} eventName The &lt;code&gt;nativeEvent&lt;/code&gt; is the string that identifies the event you're listening for. This can be any of the following:</source>
          <target state="translated">@param {string} eventName &lt;code&gt;nativeEvent&lt;/code&gt; 는 듣고있는 이벤트를 식별하는 문자열입니다. 다음 중 하나 일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="52c063b71fd1e576a00cfad6709f419b673ecc6e" translate="yes" xml:space="preserve">
          <source>@param {string} eventType The native event string listeners are watching which will be removed.</source>
          <target state="translated">@param {string} eventType 제거 될 기본 이벤트 문자열 리스너가보고 있습니다.</target>
        </trans-unit>
        <trans-unit id="5aeb466b9ccfb915bbcbf3ac1626e13e1f4e32fd" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;ReactInstanceManager&lt;/code&gt; can be shared by multiple activities and/or fragments. You will want to make your own &lt;code&gt;ReactFragment&lt;/code&gt; or &lt;code&gt;ReactActivity&lt;/code&gt; and have a singleton &lt;em&gt;holder&lt;/em&gt; that holds a &lt;code&gt;ReactInstanceManager&lt;/code&gt;. When you need the &lt;code&gt;ReactInstanceManager&lt;/code&gt; (e.g., to hook up the &lt;code&gt;ReactInstanceManager&lt;/code&gt; to the lifecycle of those Activities or Fragments) use the one provided by the singleton.</source>
          <target state="translated">&lt;code&gt;ReactInstanceManager&lt;/code&gt; 는 여러 활동 및 / 또는 조각을 공유 할 수 있습니다. 자신의 &lt;code&gt;ReactFragment&lt;/code&gt; 또는 &lt;code&gt;ReactActivity&lt;/code&gt; 를 만들고 ReactInstanceManager 를 보유하는 싱글 톤 &lt;em&gt;홀더&lt;/em&gt; 를 &lt;code&gt;ReactInstanceManager&lt;/code&gt; 입니다. &lt;code&gt;ReactInstanceManager&lt;/code&gt; 가 필요한 경우 (예 : &lt;code&gt;ReactInstanceManager&lt;/code&gt; 를 해당 활동 또는 프래그먼트의 라이프 사이클에 연결하려면) 싱글 톤에서 제공 한 것을 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="a1ed1350cf233a2333ae79a10f3f9d01ded49693" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;gestureState&lt;/code&gt; object has the following:</source>
          <target state="translated">&lt;code&gt;gestureState&lt;/code&gt; 의 객체는 다음이 있습니다 :</target>
        </trans-unit>
        <trans-unit id="019956b19386766d9f33d8d381edb0f9b3a3c751" translate="yes" xml:space="preserve">
          <source>A Boolean value indicating whether VoiceOver should ignore the elements within views that are siblings of the receiver.</source>
          <target state="translated">VoiceOver가 수신자의 형제 인보기 내의 요소를 무시해야하는지 여부를 나타내는 부울 값입니다.</target>
        </trans-unit>
        <trans-unit id="0857bf536fa638eb2ae129a502367d125bed411d" translate="yes" xml:space="preserve">
          <source>A Boolean value indicating whether the accessibility elements contained within this accessibility element are hidden.</source>
          <target state="translated">이 내게 필요한 옵션 요소에 포함 된 내게 필요한 옵션 요소가 숨겨져 있는지 여부를 나타내는 부울 값입니다.</target>
        </trans-unit>
        <trans-unit id="b19ed506b716c1a127e33b0f405eb55bc6a1780d" translate="yes" xml:space="preserve">
          <source>A Boolean value that indicates whether the tab bar is translucent</source>
          <target state="translated">탭 막대가 반투명인지 여부를 나타내는 부울 값</target>
        </trans-unit>
        <trans-unit id="d36f3099aca06eb285221ea19ab89b4c0853b217" translate="yes" xml:space="preserve">
          <source>A Mac is required in order to build your app for iOS devices. Alternatively, you can refer to the &lt;a href=&quot;getting-started&quot;&gt;Quick Start instructions&lt;/a&gt; to learn how to build your app using Create React Native App, which will allow you to run your app using the Expo client app.</source>
          <target state="translated">iOS 기기 용 앱을 빌드하려면 Mac이 필요합니다. 또는 &lt;a href=&quot;getting-started&quot;&gt;빠른 시작 지시 사항&lt;/a&gt; 을 참조하여 Expact 클라이언트 앱을 사용하여 앱을 실행할 수있는 React Native 앱 작성을 사용하여 앱을 빌드하는 방법을 배울 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5a432a28a726bf50ff20fb56f3178405c6d988f1" translate="yes" xml:space="preserve">
          <source>A Mac is required to build projects with native code for iOS. You can follow the &lt;a href=&quot;index&quot;&gt;Quick Start&lt;/a&gt; to learn how to build your app using Create React Native App instead.</source>
          <target state="translated">iOS 용 기본 코드로 프로젝트를 빌드하려면 Mac이 필요합니다. &lt;a href=&quot;index&quot;&gt;빠른 시작&lt;/a&gt; 에 따라 대신 React Native App 생성을 사용하여 앱을 빌드하는 방법을 배울 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="5cdec57fd28ad4fda7bbc10bde95f2248352eaa2" translate="yes" xml:space="preserve">
          <source>A React component for displaying different types of images, including network images, static resources, temporary local images, and images from local disk, such as the camera roll.</source>
          <target state="translated">네트워크 이미지, 정적 리소스, 임시 로컬 이미지 및 카메라 롤과 같은 로컬 디스크의 이미지를 포함하여 다양한 유형의 이미지를 표시하기위한 React 구성 요소.</target>
        </trans-unit>
        <trans-unit id="d74da5c8728b041b234ef5c7a8a4b062d4efc521" translate="yes" xml:space="preserve">
          <source>A React component for displaying text.</source>
          <target state="translated">텍스트를 표시하기위한 React 컴포넌트</target>
        </trans-unit>
        <trans-unit id="391623f7b64b41249909875b47c88f67fe6a2e1d" translate="yes" xml:space="preserve">
          <source>A RefreshControl component, used to provide pull-to-refresh functionality for the ScrollView. Only works for vertical ScrollViews (&lt;code&gt;horizontal&lt;/code&gt; prop must be &lt;code&gt;false&lt;/code&gt;).</source>
          <target state="translated">ScrollView에 대해 새로 고침 풀 기능을 제공하는 데 사용되는 RefreshControl 구성 요소입니다. 세로 ScrollView에만 작동합니다 ( &lt;code&gt;horizontal&lt;/code&gt; 소품은 &lt;code&gt;false&lt;/code&gt; 여야 함 ).</target>
        </trans-unit>
        <trans-unit id="9c1f41a955fde9875adab7a627cde7895072ca15" translate="yes" xml:space="preserve">
          <source>A ScrollView with a single item can be used to allow the user to zoom content. Set up the &lt;code&gt;maximumZoomScale&lt;/code&gt; and &lt;code&gt;minimumZoomScale&lt;/code&gt; props and your user will be able to use pinch and expand gestures to zoom in and out.</source>
          <target state="translated">단일 항목이있는 ScrollView를 사용하여 사용자가 컨텐츠를 확대 / 축소 할 수 있습니다. &lt;code&gt;maximumZoomScale&lt;/code&gt; 및 &lt;code&gt;minimumZoomScale&lt;/code&gt; 소품을 설정하면 사용자가 핀치 및 확장 제스처를 사용하여 확대 및 축소 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="aa023eae2cf3911e8d2f35cad5e3fe35e7f4d673" translate="yes" xml:space="preserve">
          <source>A StyleSheet is an abstraction similar to CSS StyleSheets</source>
          <target state="translated">StyleSheet는 CSS StyleSheets와 유사한 추상화입니다.</target>
        </trans-unit>
        <trans-unit id="f57a0dd6c20fdf56d1ac254722472f0e17114b31" translate="yes" xml:space="preserve">
          <source>A basic button component for handling touches that should render nicely on any platform.</source>
          <target state="translated">모든 플랫폼에서 멋지게 렌더링되는 터치를 처리하기위한 기본 버튼 구성 요소입니다.</target>
        </trans-unit>
        <trans-unit id="6994b3393ad14c12f76de0587a5f29e1c0eecf10" translate="yes" xml:space="preserve">
          <source>A basic button component that should render nicely on any platform. Supports a minimal level of customization.</source>
          <target state="translated">모든 플랫폼에서 멋지게 렌더링되는 기본 버튼 구성 요소입니다. 최소 수준의 사용자 정의를 지원합니다.</target>
        </trans-unit>
        <trans-unit id="4c7b8cf5b3f88586c77b787e0a4521c96dfe4be6" translate="yes" xml:space="preserve">
          <source>A caveat is that videos must use absolute positioning instead of &lt;code&gt;flexGrow&lt;/code&gt;, since size info is not currently passed for non-image assets. This limitation doesn't occur for videos that are linked directly into Xcode or the Assets folder for Android.</source>
          <target state="translated">주의 사항은 크기 정보가 현재 비 이미지 자산에 전달되지 않기 때문에 비디오는 &lt;code&gt;flexGrow&lt;/code&gt; 대신 절대 위치를 사용해야한다는 것입니다 . Xcode 또는 Android의 Assets 폴더에 직접 연결된 비디오에는이 제한이 발생하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="6cf41feb76c065b633d179bb1de00be54c27de3b" translate="yes" xml:space="preserve">
          <source>A circular function.</source>
          <target state="translated">원형 기능.</target>
        </trans-unit>
        <trans-unit id="9ff8104e13e8be4bb1296f0decc50b026beb2d09" translate="yes" xml:space="preserve">
          <source>A common feature request from developers familiar with the web is &lt;code&gt;background-image&lt;/code&gt;. To handle this use case, you can use the &lt;code&gt;&amp;lt;ImageBackground&amp;gt;&lt;/code&gt; component, which has the same props as &lt;code&gt;&amp;lt;Image&amp;gt;&lt;/code&gt;, and add whatever children to it you would like to layer on top of it.</source>
          <target state="translated">웹에 익숙한 개발자의 일반적인 기능 요청은 &lt;code&gt;background-image&lt;/code&gt; 입니다. 이 사용 사례를 처리하기 위해 &lt;code&gt;&amp;lt;Image&amp;gt;&lt;/code&gt; 와 동일한 소품을 가진 &lt;code&gt;&amp;lt;ImageBackground&amp;gt;&lt;/code&gt; 구성 요소를 사용하고 그 위에 하위 요소를 추가 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="148d65bf70cfb542e473c42899f18003cde9065a" translate="yes" xml:space="preserve">
          <source>A common type of integration test is the snapshot test. These tests render a component, and verify snapshots of the screen against reference images using &lt;code&gt;TestModule.verifySnapshot()&lt;/code&gt;, using the &lt;a href=&quot;https://github.com/facebook/ios-snapshot-test-case&quot;&gt;&lt;code&gt;FBSnapshotTestCase&lt;/code&gt;&lt;/a&gt; library behind the scenes. Reference images are recorded by setting &lt;code&gt;recordMode = YES&lt;/code&gt; on the &lt;code&gt;RCTTestRunner&lt;/code&gt;, then running the tests. Snapshots will differ slightly between 32 and 64 bit, and various OS versions, so it's recommended that you enforce tests are run with the correct configuration. It's also highly recommended that all network data be mocked out, along with other potentially troublesome dependencies. See &lt;a href=&quot;https://github.com/facebook/react-native/blob/master/IntegrationTests/SimpleSnapshotTest.js&quot;&gt;&lt;code&gt;SimpleSnapshotTest&lt;/code&gt;&lt;/a&gt; for a basic example.</source>
          <target state="translated">일반적인 유형의 통합 테스트는 스냅 샷 테스트입니다. 이 테스트 는 &lt;a href=&quot;https://github.com/facebook/ios-snapshot-test-case&quot;&gt; &lt;code&gt;FBSnapshotTestCase&lt;/code&gt; &lt;/a&gt; 라이브러리를 사용 하여 &lt;code&gt;TestModule.verifySnapshot()&lt;/code&gt; 을 사용하여 컴포넌트를 렌더링하고 화면의 스냅 샷을 참조 이미지와 비교하여 검증 합니다. &lt;code&gt;RCTTestRunner&lt;/code&gt; 에서 &lt;code&gt;recordMode = YES&lt;/code&gt; 를 설정 한 다음 테스트를 실행하면 참조 이미지가 기록됩니다 . 스냅 샷은 32 비트와 64 비트, OS 버전마다 약간 씩 다르므로 올바른 구성으로 테스트를 실행하는 것이 좋습니다. 또한 잠재적으로 문제가되는 다른 종속성과 함께 모든 네트워크 데이터를 조롱하는 것이 좋습니다. 기본 예제는 &lt;a href=&quot;https://github.com/facebook/react-native/blob/master/IntegrationTests/SimpleSnapshotTest.js&quot;&gt; &lt;code&gt;SimpleSnapshotTest&lt;/code&gt; &lt;/a&gt; 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="71fabd7a8b91843c73ea699b12a71ff2cf5f2838" translate="yes" xml:space="preserve">
          <source>A common way to use this API is to call it before calling &lt;code&gt;setState&lt;/code&gt;.</source>
          <target state="translated">이 API를 사용하는 일반적인 방법은 &lt;code&gt;setState&lt;/code&gt; 를 호출하기 전에 호출하는 것 입니다.</target>
        </trans-unit>
        <trans-unit id="0e166634f29fa3f7bd1450542ce8992c1f1f1d1e" translate="yes" xml:space="preserve">
          <source>A compelling reason for using React Native instead of WebView-based tools is to achieve 60 frames per second and a native look and feel to your apps. Where possible, we would like for React Native to do the right thing and help you to focus on your app instead of performance optimization, but there are areas where we're not quite there yet, and others where React Native (similar to writing native code directly) cannot possibly determine the best way to optimize for you and so manual intervention will be necessary. We try our best to deliver buttery-smooth UI performance by default, but sometimes that just isn't possible.</source>
          <target state="translated">WebView 기반 도구 대신 React Native를 사용하는 매력적인 이유는 초당 60 프레임과 앱의 기본 모양과 느낌을 얻는 것입니다. 가능한 경우 React Native가 올바른 작업을 수행하고 성능 최적화 대신 앱에 집중할 수 있도록 도와 드리고 싶지만 아직 멀지 않은 영역과 React Native (네이티브 작성과 유사한) 영역이 있습니다. 코드를 직접 찾을 수 없음) 최적의 방법을 결정할 수 없으므로 수동 개입이 필요합니다. 기본적으로 버터처럼 부드러운 UI 성능을 제공하기 위해 최선을 다하지만 때로는 불가능한 경우도 있습니다.</target>
        </trans-unit>
        <trans-unit id="e0c72b300f82ed6aae6f87e302bd6cb762c3cf2c" translate="yes" xml:space="preserve">
          <source>A component can only expand to fill available space if its parent has dimensions greater than 0. If a parent does not have either a fixed &lt;code&gt;width&lt;/code&gt; and &lt;code&gt;height&lt;/code&gt; or &lt;code&gt;flex&lt;/code&gt;, the parent will have dimensions of 0 and the &lt;code&gt;flex&lt;/code&gt; children will not be visible.</source>
          <target state="translated">부모의 크기가 0보다 큰 경우 구성 요소는 사용 가능한 공간을 채우기 위해 만 확장 할 수 있습니다. 부모의 &lt;code&gt;width&lt;/code&gt; 와 &lt;code&gt;height&lt;/code&gt; 또는 &lt;code&gt;flex&lt;/code&gt; 가 고정되어 있지 않으면 부모의 크기는 0이고 &lt;code&gt;flex&lt;/code&gt; 자식은 표시되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="a97c0667d0d75bd0214ef42fba808bab5450a07f" translate="yes" xml:space="preserve">
          <source>A component can specify the layout of its children using the flexbox algorithm. Flexbox is designed to provide a consistent layout on different screen sizes.</source>
          <target state="translated">구성 요소는 flexbox 알고리즘을 사용하여 자식의 레이아웃을 지정할 수 있습니다. Flexbox는 다양한 화면 크기에서 일관된 레이아웃을 제공하도록 설계되었습니다.</target>
        </trans-unit>
        <trans-unit id="06735076c496345cae3048cf34389709e4415031" translate="yes" xml:space="preserve">
          <source>A component for displaying images.</source>
          <target state="translated">이미지를 표시하는 구성 요소입니다.</target>
        </trans-unit>
        <trans-unit id="67972ace285ed8abce4e083b79016d95ffe9de8b" translate="yes" xml:space="preserve">
          <source>A component for displaying text.</source>
          <target state="translated">텍스트를 표시하는 구성 요소입니다.</target>
        </trans-unit>
        <trans-unit id="26d1701ead7bb9571a92f5b6cc9da4e2ea0ffc41" translate="yes" xml:space="preserve">
          <source>A component for inputting text into the app via a keyboard.</source>
          <target state="translated">키보드를 통해 앱에 텍스트를 입력하기위한 구성 요소입니다.</target>
        </trans-unit>
        <trans-unit id="65ecc2fc2ab8dfc7b7db8375d3ed7546e59f2796" translate="yes" xml:space="preserve">
          <source>A component for rendering performant scrollable lists.</source>
          <target state="translated">수행 가능한 스크롤 가능 목록을 렌더링하기위한 구성 요소입니다.</target>
        </trans-unit>
        <trans-unit id="35f89baec7c67a355729763bbe8177ca6c24897f" translate="yes" xml:space="preserve">
          <source>A component that renders web content in a native view.</source>
          <target state="translated">웹 컨텐츠를 기본보기로 렌더링하는 구성 요소입니다.</target>
        </trans-unit>
        <trans-unit id="6068a182acfc5f22574e692c18af5c440d06c2de" translate="yes" xml:space="preserve">
          <source>A component used to select a single value from a range of values.</source>
          <target state="translated">값 범위에서 단일 값을 선택하는 데 사용되는 구성 요소입니다.</target>
        </trans-unit>
        <trans-unit id="594f7edda2ed9f5769f0b371380d9a6ee419e75b" translate="yes" xml:space="preserve">
          <source>A component which enables customization of the keyboard input accessory view on iOS. The input accessory view is displayed above the keyboard whenever a &lt;code&gt;TextInput&lt;/code&gt; has focus. This component can be used to create custom toolbars.</source>
          <target state="translated">iOS에서 키보드 입력 액세서리보기를 사용자 정의 할 수있는 구성 요소입니다. 입력 액세서리보기는 때마다 키보드 위에 표시됩니다 &lt;code&gt;TextInput&lt;/code&gt; 포커스가 있습니다. 이 컴포넌트는 사용자 정의 도구 모음을 작성하는 데 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3acc9dd9779be5c018184fb35c071244d38d0edc" translate="yes" xml:space="preserve">
          <source>A component's height and width determine its size on the screen.</source>
          <target state="translated">구성 요소의 높이와 너비는 화면에서 크기를 결정합니다.</target>
        </trans-unit>
        <trans-unit id="10930e64cc380172b35c276d9fe5f969c9e898db" translate="yes" xml:space="preserve">
          <source>A couple of contributors making a good case may be all that is needed to reopen the issue.</source>
          <target state="translated">좋은 사례를 제시하는 기고자 두 명이 문제를 다시 여는 데 필요한 전부일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="303a8001aac6c16d65eb120b672e32bcb2b6e650" translate="yes" xml:space="preserve">
          <source>A cubic function, &lt;code&gt;f(t) = t * t * t&lt;/code&gt;. Position equals the cube of elapsed time.</source>
          <target state="translated">차 함수, &lt;code&gt;f(t) = t * t * t&lt;/code&gt; . 위치는 경과 시간의 큐브와 같습니다.</target>
        </trans-unit>
        <trans-unit id="2885d6d19389a48e74a01a988a62fa8735af2301" translate="yes" xml:space="preserve">
          <source>A custom icon for the tab. It is ignored when a system icon is defined.</source>
          <target state="translated">탭의 사용자 정의 아이콘. 시스템 아이콘이 정의되면 무시됩니다.</target>
        </trans-unit>
        <trans-unit id="163bad88bdebb163cd974f2a6bf5d3f5779b1f73" translate="yes" xml:space="preserve">
          <source>A custom icon when the tab is selected. It is ignored when a system icon is defined. If left empty, the icon will be tinted in blue.</source>
          <target state="translated">탭이 선택된 경우 사용자 정의 아이콘. 시스템 아이콘이 정의되면 무시됩니다. 비워두면 아이콘이 파란색으로 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="632daea69dbaf163a844ebab613e866bbb9bd00b" translate="yes" xml:space="preserve">
          <source>A date has been selected.</source>
          <target state="translated">날짜가 선택되었습니다.</target>
        </trans-unit>
        <trans-unit id="6f0998357d3fb0b8e3e9a9ab65e27b112c82ae07" translate="yes" xml:space="preserve">
          <source>A delivered notification is an object containing:</source>
          <target state="translated">전달 된 알림은 다음을 포함하는 객체입니다.</target>
        </trans-unit>
        <trans-unit id="1c70bd301dae61f565fe4f3c3802f7cc92e061f3" translate="yes" xml:space="preserve">
          <source>A floating-point number that determines how quickly the scroll view decelerates after the user lifts their finger. You may also use string shortcuts &lt;code&gt;&quot;normal&quot;&lt;/code&gt; and &lt;code&gt;&quot;fast&quot;&lt;/code&gt; which match the underlying iOS settings for &lt;code&gt;UIScrollViewDecelerationRateNormal&lt;/code&gt; and &lt;code&gt;UIScrollViewDecelerationRateFast&lt;/code&gt; respectively.</source>
          <target state="translated">사용자가 손가락을 after 후 스크롤보기가 얼마나 빨리 감속되는지 결정하는 부동 소수점 숫자입니다. &lt;code&gt;UIScrollViewDecelerationRateNormal&lt;/code&gt; 및 &lt;code&gt;UIScrollViewDecelerationRateFast&lt;/code&gt; 의 기본 iOS 설정 과 각각 일치하는 &lt;code&gt;&quot;normal&quot;&lt;/code&gt; 및 &lt;code&gt;&quot;fast&quot;&lt;/code&gt; 문자열 단축키를 사용할 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="b9b5bbe8424a18f4d2b594a7d9f8fe312c46a844" translate="yes" xml:space="preserve">
          <source>A floating-point number that determines how quickly the scroll view decelerates after the user lifts their finger. You may also use the string shortcuts &lt;code&gt;&quot;normal&quot;&lt;/code&gt; and &lt;code&gt;&quot;fast&quot;&lt;/code&gt; which match the underlying iOS settings for &lt;code&gt;UIScrollViewDecelerationRateNormal&lt;/code&gt; and &lt;code&gt;UIScrollViewDecelerationRateFast&lt;/code&gt; respectively:</source>
          <target state="translated">사용자가 손가락을 after 후 스크롤보기가 얼마나 빨리 감속되는지 결정하는 부동 소수점 숫자입니다. &lt;code&gt;UIScrollViewDecelerationRateNormal&lt;/code&gt; 및 &lt;code&gt;UIScrollViewDecelerationRateFast&lt;/code&gt; 의 기본 iOS 설정 과 각각 일치하는 &lt;code&gt;&quot;normal&quot;&lt;/code&gt; 및 &lt;code&gt;&quot;fast&quot;&lt;/code&gt; 문자열 바로 가기를 사용할 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="16daa06c0c4fb2f6604d2e7bb18408b251ba933c" translate="yes" xml:space="preserve">
          <source>A foundational component for inputting text into the app via a keyboard. Props provide configurability for several features, such as auto-correction, auto-capitalization, placeholder text, and different keyboard types, such as a numeric keypad.</source>
          <target state="translated">키보드를 통해 앱에 텍스트를 입력하기위한 기본 구성 요소입니다. 소품은 자동 수정, 자동 대문자, 자리 표시 자 텍스트 및 숫자 키패드와 같은 다른 키보드 유형과 같은 여러 기능에 대한 구성 기능을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="00a1ac6167af060d434ebb64924c01f7d8329b90" translate="yes" xml:space="preserve">
          <source>A function that is invoked when the webview calls &lt;code&gt;window.postMessage&lt;/code&gt;. Setting this property will inject a &lt;code&gt;postMessage&lt;/code&gt; global into your webview, but will still call pre-existing values of &lt;code&gt;postMessage&lt;/code&gt;.</source>
          <target state="translated">웹뷰가 &lt;code&gt;window.postMessage&lt;/code&gt; 를 호출 할 때 호출되는 함수입니다 . 이 속성을 설정하면 &lt;code&gt;postMessage&lt;/code&gt; 전역을 웹보기에 삽입 하지만 여전히 기존의 &lt;code&gt;postMessage&lt;/code&gt; 값을 호출 합니다.</target>
        </trans-unit>
        <trans-unit id="97251288c8999e4d7ca28b1fb79fa3eeccfdc665" translate="yes" xml:space="preserve">
          <source>A function that returns the scrollable component in which the list rows are rendered. Defaults to returning a ScrollView with the given props.</source>
          <target state="translated">목록 행이 렌더링되는 스크롤 가능 구성 요소를 반환하는 함수입니다. 주어진 소품으로 ScrollView를 반환하도록 기본 설정됩니다.</target>
        </trans-unit>
        <trans-unit id="482fdf43966153203b04c87da6e3f742feea4f17" translate="yes" xml:space="preserve">
          <source>A function that will be passed an array of objects describing local notifications.</source>
          <target state="translated">로컬 알림을 설명하는 객체 배열로 전달되는 함수입니다.</target>
        </trans-unit>
        <trans-unit id="171a68ebbb4f3a0eb13f35f632f353223c1577d9" translate="yes" xml:space="preserve">
          <source>A function that will be passed the current badge number.</source>
          <target state="translated">현재 배지 번호가 전달되는 기능입니다.</target>
        </trans-unit>
        <trans-unit id="1bcabf91db2b15c0c0e1d1421d04d26f05c41dce" translate="yes" xml:space="preserve">
          <source>A generic accessor for extracting an item from any sort of data blob.</source>
          <target state="translated">모든 종류의 데이터 Blob에서 항목을 추출하기위한 일반 접근 자입니다.</target>
        </trans-unit>
        <trans-unit id="d113bdcc341fe15908a1a5daf690ad88708e5a39" translate="yes" xml:space="preserve">
          <source>A good test plan has the exact commands you ran and their output, provides screenshots or videos if the pull request changes UI or updates the website.</source>
          <target state="translated">좋은 테스트 계획에는 실행 한 정확한 명령과 출력이 있으며 풀 요청이 UI를 변경하거나 웹 사이트를 업데이트하는 경우 스크린 샷 또는 비디오를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="a1dde56c95c364a2dd916abcba5b5623dcdd74c0" translate="yes" xml:space="preserve">
          <source>A helper function to scroll to a specific page in the ViewPager. The transition between pages will &lt;em&gt;not&lt;/em&gt; be animated.</source>
          <target state="translated">ViewPager에서 특정 페이지로 스크롤하는 도우미 기능입니다. 페이지 간 전환에 애니메이션 이 적용 &lt;em&gt;되지 않습니다&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="0913c2a4db0d2eb222d5b024a7c9e98522f02260" translate="yes" xml:space="preserve">
          <source>A helper function to scroll to a specific page in the ViewPager. The transition between pages will be animated.</source>
          <target state="translated">ViewPager에서 특정 페이지로 스크롤하는 도우미 기능입니다. 페이지 간 전환에 애니메이션이 적용됩니다.</target>
        </trans-unit>
        <trans-unit id="83100667498d38ece33a90030de72ca32af3952f" translate="yes" xml:space="preserve">
          <source>A library for creating fluid, powerful animations that are easy to build and maintain.</source>
          <target state="translated">제작 및 유지 관리가 용이 ​​한 유동적이고 강력한 애니메이션을 만들기위한 라이브러리입니다.</target>
        </trans-unit>
        <trans-unit id="ce0d111d00e97556b82df40173ce3f060c84c313" translate="yes" xml:space="preserve">
          <source>A line with hairline width may not be visible if your simulator is downscaled.</source>
          <target state="translated">시뮬레이터가 축소 된 경우 헤어 라인 너비가있는 선이 보이지 않을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="017e21380565f3d0850da48eedc3a6f5213dab59" translate="yes" xml:space="preserve">
          <source>A linear function, &lt;code&gt;f(t) = t&lt;/code&gt;. Position correlates to elapsed time one to one.</source>
          <target state="translated">선형 함수 &lt;code&gt;f(t) = t&lt;/code&gt; . 위치는 일대일 경과 시간과 관련됩니다.</target>
        </trans-unit>
        <trans-unit id="2767fcb7d2bb22c48ef8b8fab649a90980a218ef" translate="yes" xml:space="preserve">
          <source>A maintainer will add a comment, &lt;code&gt;Duplicate of #123&lt;/code&gt;, which will mark the issue as a duplicate of issue #123. They will then close the issue.</source>
          <target state="translated">관리자는 &lt;code&gt;Duplicate of #123&lt;/code&gt; 주석을 추가 하여 이슈를 이슈 # 123의 복제본으로 표시합니다. 그런 다음 문제를 해결합니다.</target>
        </trans-unit>
        <trans-unit id="9faebbe4463593be1781261ed5bd1cebfcff2004" translate="yes" xml:space="preserve">
          <source>A marker property for telling the list to re-render (since it implements &lt;code&gt;PureComponent&lt;/code&gt;). If any of your &lt;code&gt;renderItem&lt;/code&gt;, Header, Footer, etc. functions depend on anything outside of the &lt;code&gt;data&lt;/code&gt; prop, stick it here and treat it immutably.</source>
          <target state="translated">목록을 다시 렌더링하도록 지시하는 마커 특성 ( &lt;code&gt;PureComponent&lt;/code&gt; 를 구현 하므로 ). 귀하의 경우 &lt;code&gt;renderItem&lt;/code&gt; , 머리글, 바닥 글 등 기능의 아무것도 외부에 의존하는 &lt;code&gt;data&lt;/code&gt; 소품, 여기 스틱 불변 취급.</target>
        </trans-unit>
        <trans-unit id="5575aa78c318423bd450894291d2f95c522df37b" translate="yes" xml:space="preserve">
          <source>A native event is a synthetic touch event with the following form:</source>
          <target state="translated">기본 이벤트는 다음과 같은 형식의 합성 터치 이벤트입니다.</target>
        </trans-unit>
        <trans-unit id="13f004e9ea3b85c5d65c73d05c1663b717bfce52" translate="yes" xml:space="preserve">
          <source>A native module can export constants that are immediately available to JavaScript at runtime. This is useful for communicating static data that would otherwise require a round-trip through the bridge.</source>
          <target state="translated">기본 모듈은 런타임시 JavaScript에 즉시 사용 가능한 상수를 내보낼 수 있습니다. 이는 브리지를 통한 왕복이 필요한 정적 데이터 통신에 유용합니다.</target>
        </trans-unit>
        <trans-unit id="8d20fd55ebf941b9595eec282dfe9c4767d42f8c" translate="yes" xml:space="preserve">
          <source>A native module is just an Objective-C class that implements the &lt;code&gt;RCTBridgeModule&lt;/code&gt; protocol. If you are wondering, RCT is an abbreviation of ReaCT.</source>
          <target state="translated">기본 모듈은 &lt;code&gt;RCTBridgeModule&lt;/code&gt; 프로토콜 을 구현하는 Objective-C 클래스 일뿐 입니다. 궁금하다면 RCT는 ReaCT의 약자입니다.</target>
        </trans-unit>
        <trans-unit id="124a960de7dd34cee290dd418b0c6316e900165e" translate="yes" xml:space="preserve">
          <source>A native module is supposed to invoke its callback only once. It can, however, store the callback and invoke it later.</source>
          <target state="translated">네이티브 모듈은 콜백을 한 번만 호출해야합니다. 그러나 콜백을 저장하고 나중에 호출 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d1dbea2ff0b6381f5366edd9c45819f901216135" translate="yes" xml:space="preserve">
          <source>A native module should invoke its callback exactly once. It's okay to store the callback and invoke it later. This pattern is often used to wrap iOS APIs that require delegates - see &lt;a href=&quot;https://github.com/facebook/react-native/blob/master/React/Modules/RCTAlertManager.m&quot;&gt;&lt;code&gt;RCTAlertManager&lt;/code&gt;&lt;/a&gt; for an example. If the callback is never invoked, some memory is leaked. If both &lt;code&gt;onSuccess&lt;/code&gt; and &lt;code&gt;onFail&lt;/code&gt; callbacks are passed, you should only invoke one of them.</source>
          <target state="translated">네이티브 모듈은 콜백을 정확히 한 번만 호출해야합니다. 콜백을 저장하고 나중에 호출해도됩니다. 이 패턴은 종종 델리게이트가 필요한 iOS API를 래핑하는 데 사용됩니다 . 예제는 &lt;a href=&quot;https://github.com/facebook/react-native/blob/master/React/Modules/RCTAlertManager.m&quot;&gt; &lt;code&gt;RCTAlertManager&lt;/code&gt; &lt;/a&gt; 를 참조하십시오 . 콜백이 호출되지 않으면 일부 메모리가 누출됩니다. 두 경우 &lt;code&gt;onSuccess&lt;/code&gt; 와 &lt;code&gt;onFail&lt;/code&gt; 콜백이 전달됩니다, 당신은 그들의 호출을해야한다.</target>
        </trans-unit>
        <trans-unit id="1864cc3b9e403eefa32ec078bdf1b0f3487499f4" translate="yes" xml:space="preserve">
          <source>A number (opaque type returned by require('./foo.png')) or an &lt;code&gt;ImageSource&lt;/code&gt;.</source>
          <target state="translated">숫자 또는 (에 의해 반환 불투명 유형 ( './ foo.png') 필요) &lt;code&gt;ImageSource&lt;/code&gt; 을 .</target>
        </trans-unit>
        <trans-unit id="578458acdb7a59534cf04aa05d1439351ba3e10b" translate="yes" xml:space="preserve">
          <source>A performance optimization for improving scroll perf of large lists, used in conjunction with overflow: 'hidden' on the row containers. This is enabled by default.</source>
          <target state="translated">행 컨테이너에서 overflow : 'hidden'과 함께 사용되는 대형 목록의 스크롤 성능을 개선하기위한 성능 최적화 기본적으로 활성화되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="29a0a83fd3a5edf779c5f843bf824236c9ee5b61" translate="yes" xml:space="preserve">
          <source>A performant interface for rendering sectioned lists, supporting the most handy features:</source>
          <target state="translated">가장 편리한 기능을 지원하는 섹션 목록 렌더링을위한 성능 인터페이스 :</target>
        </trans-unit>
        <trans-unit id="41959416ca8549d42043c008aa48b269f664a86a" translate="yes" xml:space="preserve">
          <source>A performant interface for rendering simple, flat lists, supporting the most handy features:</source>
          <target state="translated">가장 편리한 기능을 지원하는 단순하고 간단한 목록을 렌더링하기위한 고성능 인터페이스</target>
        </trans-unit>
        <trans-unit id="2a7df7e3afc97f44bad8933ea0bde59cb6bf70e8" translate="yes" xml:space="preserve">
          <source>A positive number will use setTimeout to schedule any tasks after the eventLoopRunningTime hits the deadline value, otherwise all tasks will be executed in one setImmediate batch (default).</source>
          <target state="translated">양수는 setTimeout을 사용하여 eventLoopRunningTime이 최종 기한 값에 도달 한 후 작업을 예약합니다. 그렇지 않으면 모든 작업이 하나의 setImmediate 일괄 처리 (기본값)로 실행됩니다.</target>
        </trans-unit>
        <trans-unit id="43bbb6d72ce5f84d837c54902a18c75a92fffb7e" translate="yes" xml:space="preserve">
          <source>A power function. Position is equal to the Nth power of elapsed time.</source>
          <target state="translated">전원 기능. 위치는 경과 시간의 N 번째 거듭 제곱과 같습니다.</target>
        </trans-unit>
        <trans-unit id="eb47a278799c6aae215fdb0c91b2565f1d4e6615" translate="yes" xml:space="preserve">
          <source>A quadratic function, &lt;code&gt;f(t) = t * t&lt;/code&gt;. Position equals the square of elapsed time.</source>
          <target state="translated">이차 함수, &lt;code&gt;f(t) = t * t&lt;/code&gt; . 위치는 경과 시간의 제곱과 같습니다.</target>
        </trans-unit>
        <trans-unit id="e085ebbfc48600e656be2ba95c9cae3601973a7b" translate="yes" xml:space="preserve">
          <source>A quick breakdown of this command:</source>
          <target state="translated">이 명령의 빠른 분석 :</target>
        </trans-unit>
        <trans-unit id="9cd6c0a77e3adf4e6a0d1220298522a487be6f5c" translate="yes" xml:space="preserve">
          <source>A simple elastic interaction, similar to a spring oscillating back and forth.</source>
          <target state="translated">스프링이 앞뒤로 진동하는 것과 유사한 간단한 탄성 상호 작용.</target>
        </trans-unit>
        <trans-unit id="7a0ad65732344dff27843a455a3c4e2d0962c255" translate="yes" xml:space="preserve">
          <source>A simple inertial interaction, similar to an object slowly accelerating to speed.</source>
          <target state="translated">물체가 속도로 천천히 가속되는 것과 유사한 간단한 관성 상호 작용.</target>
        </trans-unit>
        <trans-unit id="2abbc177f291ccfbae328d4ddded2298ef9d521d" translate="yes" xml:space="preserve">
          <source>A simple mapping to convert a 0-1 range to a 0-100 range would be:</source>
          <target state="translated">0-1 범위를 0-100 범위로 변환하는 간단한 매핑은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="f18e2c43dfc1ce54352dd88c57fdb59d2d37a2f3" translate="yes" xml:space="preserve">
          <source>A sinusoidal function.</source>
          <target state="translated">정현파 함수.</target>
        </trans-unit>
        <trans-unit id="5a91e9ac50bea28846689bef3d55b0fe2097449f" translate="yes" xml:space="preserve">
          <source>A smooth animation should look something like the following:</source>
          <target state="translated">부드러운 애니메이션은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="d23e512a887cb55a89d4aa1713041b1b009d2d22" translate="yes" xml:space="preserve">
          <source>A static image to display while loading the image source.</source>
          <target state="translated">이미지 소스를로드하는 동안 표시 할 정적 이미지입니다.</target>
        </trans-unit>
        <trans-unit id="8e2d7d08501956fc2c57139fb06826c23e1e8c32" translate="yes" xml:space="preserve">
          <source>A stepping function, returns 1 for any positive value of &lt;code&gt;n&lt;/code&gt;.</source>
          <target state="translated">스테핑 함수는 &lt;code&gt;n&lt;/code&gt; 의 양수 값에 대해 1을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="e112672b401efdb1a8ed2ef65c9516e2a11d489f" translate="yes" xml:space="preserve">
          <source>A stepping function, returns 1 if &lt;code&gt;n&lt;/code&gt; is greater than or equal to 1.</source>
          <target state="translated">스테핑 함수는 &lt;code&gt;n&lt;/code&gt; 이 1 보다 크거나 같으면 1을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="d9ed0ab51f78ccc9b21f94e6b6baf14e30113037" translate="yes" xml:space="preserve">
          <source>A stretchable image to display as the progress bar.</source>
          <target state="translated">진행률 표시 줄로 표시 할 확장 가능한 이미지입니다.</target>
        </trans-unit>
        <trans-unit id="7cf817e0804a7cee0ca43cbcf43546a26c743bb0" translate="yes" xml:space="preserve">
          <source>A stretchable image to display behind the progress bar.</source>
          <target state="translated">진행률 표시 줄 뒤에 표시 할 수있는 확장 가능한 이미지입니다.</target>
        </trans-unit>
        <trans-unit id="470cb7dddeed4e81a62183fcda110f7105f0aa54" translate="yes" xml:space="preserve">
          <source>A task is a simple async function that you register on &lt;code&gt;AppRegistry&lt;/code&gt;, similar to registering React applications:</source>
          <target state="translated">작업은 React 애플리케이션 등록과 비슷한 &lt;code&gt;AppRegistry&lt;/code&gt; 에 등록하는 간단한 비동기 기능입니다 .</target>
        </trans-unit>
        <trans-unit id="c3424e7b25380caf6c2d3375912fe515935adadb" translate="yes" xml:space="preserve">
          <source>A test plan is required! Add the labels 'Needs revision' and 'Needs response from author'. You can then follow up with a response like:</source>
          <target state="translated">테스트 계획이 필요합니다! '수정 필요'및 '저자로부터 응답 필요'레이블을 추가하십시오. 그런 다음 다음과 같은 응답을 수행 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5a49c084c7743ce5b3db42b00ffbed194cc26694" translate="yes" xml:space="preserve">
          <source>A time has been selected.</source>
          <target state="translated">시간이 선택되었습니다.</target>
        </trans-unit>
        <trans-unit id="295a5567a5c7b8b03b93f04200d8189c4afa89d3" translate="yes" xml:space="preserve">
          <source>A typical way to use this prop is with images displayed on a solid background and setting the &lt;code&gt;overlayColor&lt;/code&gt; to the same color as the background.</source>
          <target state="translated">이 소품을 사용하는 일반적인 방법은 이미지를 단색 배경으로 표시하고 &lt;code&gt;overlayColor&lt;/code&gt; 를 배경과 같은 색으로 설정하는 것 입니다.</target>
        </trans-unit>
        <trans-unit id="4289bb22e2134d8b06c9b9f1985d2693f1cbc433" translate="yes" xml:space="preserve">
          <source>A unique identifier for this element to be used in UI Automation testing scripts.</source>
          <target state="translated">UI 자동화 테스트 스크립트에서이 요소의 고유 식별자입니다.</target>
        </trans-unit>
        <trans-unit id="6cc9d1e74feee7151391148a4d702a234b6cd59d" translate="yes" xml:space="preserve">
          <source>A useful tool to visualize cubic bezier curves can be found at &lt;a href=&quot;http://cubic-bezier.com/&quot;&gt;http://cubic-bezier.com/&lt;/a&gt;</source>
          <target state="translated">3 차 베 지어 곡선을 시각화하는 유용한 도구는 &lt;a href=&quot;http://cubic-bezier.com/&quot;&gt;http://cubic-bezier.com/&lt;/a&gt; 에서 찾을 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="513db7f631fd2fb38caa053662a837994954f48f" translate="yes" xml:space="preserve">
          <source>A value indicating whether VoiceOver should ignore the elements within views that are siblings of the receiver. Default is &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">VoiceOver가 수신자의 형제 인보기 내의 요소를 무시해야하는지 여부를 나타내는 값입니다. 기본값은 &lt;code&gt;false&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="e5a86e10d90734bd66304d1ea5063302520b5687" translate="yes" xml:space="preserve">
          <source>A value indicating whether the accessibility elements contained within this accessibility element are hidden. Default is &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">이 내게 필요한 옵션 요소에 포함 된 내게 필요한 옵션 요소가 숨겨져 있는지 여부를 나타내는 값입니다. 기본값은 &lt;code&gt;false&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="9b8a91d9f4d7faedd095aede69c5cbc90a78979e" translate="yes" xml:space="preserve">
          <source>A very common pattern is to create overlays with position absolute and zero positioning, so &lt;code&gt;absoluteFill&lt;/code&gt; can be used for convenience and to reduce duplication of these repeated styles.</source>
          <target state="translated">매우 일반적인 패턴은 위치 절대 값과 위치가 0 인 오버레이를 만드는 것이므로 &lt;code&gt;absoluteFill&lt;/code&gt; 을 사용하여 편의성을 높이고 반복되는 스타일의 중복을 줄일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="350ac36cbfb6c21608597caec6cb12ee201bd3b8" translate="yes" xml:space="preserve">
          <source>A view can become the touch responder by implementing the correct negotiation methods. There are two methods to ask the view if it wants to become responder:</source>
          <target state="translated">올바른 협상 방법을 구현하면 뷰가 터치 응답자가 될 수 있습니다. 응답자가되고 싶은지 여부를 묻는 두 가지 방법이 있습니다.</target>
        </trans-unit>
        <trans-unit id="1a2a16269e7a18bc6cb96c9edb985d59ea02403b" translate="yes" xml:space="preserve">
          <source>A wrapper around &lt;code&gt;UINavigationController&lt;/code&gt;, enabling you to implement a navigation stack.</source>
          <target state="translated">탐색 스택을 구현할 수있는 &lt;code&gt;UINavigationController&lt;/code&gt; 주위의 래퍼 입니다.</target>
        </trans-unit>
        <trans-unit id="3c8cff30cc6dac9f1c628e3debdbb92ec8ba8df1" translate="yes" xml:space="preserve">
          <source>A wrapper for making views respond properly to touches (Android only). On Android this component uses native state drawable to display touch feedback.</source>
          <target state="translated">뷰가 터치에 올바르게 반응하도록하는 래퍼입니다 (Android 만 해당). Android에서이 구성 요소는 기본 상태 드로어 블을 사용하여 터치 피드백을 표시합니다.</target>
        </trans-unit>
        <trans-unit id="080ef16368c837465ac83f9eb3bb25651e09f94a" translate="yes" xml:space="preserve">
          <source>A wrapper for making views respond properly to touches. On press down, the opacity of the wrapped view is decreased, dimming it.</source>
          <target state="translated">뷰가 터치에 올바르게 응답하도록하는 래퍼입니다. 누를 때 래핑 된보기의 불투명도가 감소되어 흐리게 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="be7a3d3fcca42ae325205f7773e82950fa4cbba7" translate="yes" xml:space="preserve">
          <source>A wrapper for making views respond properly to touches. On press down, the opacity of the wrapped view is decreased, which allows the underlay color to show through, darkening or tinting the view.</source>
          <target state="translated">뷰가 터치에 올바르게 응답하도록하는 래퍼입니다. 누를 때 래핑 된 뷰의 불투명도가 감소하여 언더 레이 색상이 뷰를 통과하거나 어둡게하거나 색조로 표시 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="dd3d258d550d68ba1be5f0d3012a9f3d92e426f3" translate="yes" xml:space="preserve">
          <source>API to display an iOS action sheet or share sheet.</source>
          <target state="translated">iOS 작업 시트 또는 공유 시트를 표시하는 API.</target>
        </trans-unit>
        <trans-unit id="4ca0a1dafaea5e84f002eb1c3a7a92dd033b7a8c" translate="yes" xml:space="preserve">
          <source>APIs</source>
          <target state="translated">APIs</target>
        </trans-unit>
        <trans-unit id="26376cc81dd35204671d2646c0c88e1aba13fe50" translate="yes" xml:space="preserve">
          <source>Abort prefetch request. Android-only.</source>
          <target state="translated">프리 페치 요청을 중단하십시오. 안드로이드 전용.</target>
        </trans-unit>
        <trans-unit id="33d264807d480b8f702eda60d3b1d2123383b568" translate="yes" xml:space="preserve">
          <source>Accent color of the control.</source>
          <target state="translated">컨트롤의 악센트 색상.</target>
        </trans-unit>
        <trans-unit id="d660049bc1f2f54fc0e3f4ace6fa5eb205f2f1e0" translate="yes" xml:space="preserve">
          <source>Accessibility</source>
          <target state="translated">Accessibility</target>
        </trans-unit>
        <trans-unit id="e0caf26de2b0a085bfe73345602971dce84595cd" translate="yes" xml:space="preserve">
          <source>Accessibility properties</source>
          <target state="translated">접근성 속성</target>
        </trans-unit>
        <trans-unit id="1b04f0a7c190693f97621bb7532c9adadc0484d8" translate="yes" xml:space="preserve">
          <source>Accessibility traits tell a person using VoiceOver what kind of element they have selected. Is this element a label? A button? A header? These questions are answered by &lt;code&gt;accessibilityTraits&lt;/code&gt;.</source>
          <target state="translated">손쉬운 사용 특성은 VoiceOver를 사용하는 사람에게 선택한 종류의 요소를 알려줍니다. 이 요소는 레이블입니까? 단추? 헤더? 이러한 질문은 &lt;code&gt;accessibilityTraits&lt;/code&gt; 에 의해 답변됩니다 .</target>
        </trans-unit>
        <trans-unit id="98874c69821f85830f96eca165391792a838543d" translate="yes" xml:space="preserve">
          <source>AccessibilityComponentTypes</source>
          <target state="translated">AccessibilityComponentTypes</target>
        </trans-unit>
        <trans-unit id="69b45888e33a406a042374f7ee398eab71d9e6e3" translate="yes" xml:space="preserve">
          <source>AccessibilityInfo</source>
          <target state="translated">AccessibilityInfo</target>
        </trans-unit>
        <trans-unit id="bcc30d6184b0dcc29e02b6dd954ec394032d6cb2" translate="yes" xml:space="preserve">
          <source>AccessibilityInfo.addEventListener()</source>
          <target state="translated">AccessibilityInfo.addEventListener()</target>
        </trans-unit>
        <trans-unit id="f3aa241aa5219144ce5b7d1803a12622733162fc" translate="yes" xml:space="preserve">
          <source>AccessibilityInfo.announceForAccessibility()</source>
          <target state="translated">AccessibilityInfo.announceForAccessibility()</target>
        </trans-unit>
        <trans-unit id="fb0d0a907d76c14892e7ab25824065b041330d66" translate="yes" xml:space="preserve">
          <source>AccessibilityInfo.fetch()</source>
          <target state="translated">AccessibilityInfo.fetch()</target>
        </trans-unit>
        <trans-unit id="30cc8bc69a34da6cd4bae1e0e929842cf37e3e14" translate="yes" xml:space="preserve">
          <source>AccessibilityInfo.removeEventListener()</source>
          <target state="translated">AccessibilityInfo.removeEventListener()</target>
        </trans-unit>
        <trans-unit id="5ef4ffa8374c254c0b68a314429a989d868f256c" translate="yes" xml:space="preserve">
          <source>AccessibilityInfo.setAccessibilityFocus()</source>
          <target state="translated">AccessibilityInfo.setAccessibilityFocus()</target>
        </trans-unit>
        <trans-unit id="020e913444b32a432faba0ce18d89add018d6ddb" translate="yes" xml:space="preserve">
          <source>AccessibilityTraits, ,array of AccessibilityTraits</source>
          <target state="translated">접근성 특성, 접근성 특성의 배열</target>
        </trans-unit>
        <trans-unit id="e58a854150d51363a38b795c21756c41aaaf0440" translate="yes" xml:space="preserve">
          <source>Accessing console logs</source>
          <target state="translated">콘솔 로그에 액세스</target>
        </trans-unit>
        <trans-unit id="6269a323cfd3c8afe205ce18533af4f7ff9832f2" translate="yes" xml:space="preserve">
          <source>Accessing the In-App Developer Menu</source>
          <target state="translated">인앱 개발자 메뉴에 액세스</target>
        </trans-unit>
        <trans-unit id="82091c0c7be8459e23be522b4faffbb21088bc1b" translate="yes" xml:space="preserve">
          <source>ActionSheetIOS</source>
          <target state="translated">ActionSheetIOS</target>
        </trans-unit>
        <trans-unit id="b0d26927f7c53d7af37be63f6ff6ce3a01a1ab8e" translate="yes" xml:space="preserve">
          <source>ActionSheetIOS.showActionSheetWithOptions()</source>
          <target state="translated">ActionSheetIOS.showActionSheetWithOptions()</target>
        </trans-unit>
        <trans-unit id="500a9340f24268187ac5e0fc15d8ace1136b78c9" translate="yes" xml:space="preserve">
          <source>ActionSheetIOS.showShareActionSheetWithOptions()</source>
          <target state="translated">ActionSheetIOS.showShareActionSheetWithOptions()</target>
        </trans-unit>
        <trans-unit id="5c380b342d5d754ff5004fa64e6bfdbf794f4c9b" translate="yes" xml:space="preserve">
          <source>ActivityIndicator</source>
          <target state="translated">ActivityIndicator</target>
        </trans-unit>
        <trans-unit id="4cc6ecb653844c7270d40b1bee8d5bfa426c5732" translate="yes" xml:space="preserve">
          <source>ActivityIndicator#animating</source>
          <target state="translated">ActivityIndicator#animating</target>
        </trans-unit>
        <trans-unit id="b412131bfd8829f6cc3a255ddc6ffb59e0868c30" translate="yes" xml:space="preserve">
          <source>ActivityIndicator#color</source>
          <target state="translated">ActivityIndicator#color</target>
        </trans-unit>
        <trans-unit id="876990e6c94686c0b0a62088c84496abc7ecd026" translate="yes" xml:space="preserve">
          <source>ActivityIndicator#hidesWhenStopped</source>
          <target state="translated">ActivityIndicator#hidesWhenStopped</target>
        </trans-unit>
        <trans-unit id="022fa8f22e3fc5e4e3eb1f3f7df0c78d70384011" translate="yes" xml:space="preserve">
          <source>ActivityIndicator#size</source>
          <target state="translated">ActivityIndicator#size</target>
        </trans-unit>
        <trans-unit id="63fa68e1f9e6b22efcefbd65b0388cad561a15c8" translate="yes" xml:space="preserve">
          <source>Add &lt;code&gt;gradle-download-task&lt;/code&gt; as dependency in &lt;code&gt;android/build.gradle&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;android/build.gradle&lt;/code&gt; 에서 &lt;code&gt;gradle-download-task&lt;/code&gt; 를 종속성으로 추가하십시오 .</target>
        </trans-unit>
        <trans-unit id="5dc4610629383cb36bd03eacb7dd59fb9467c2e9" translate="yes" xml:space="preserve">
          <source>Add &lt;code&gt;node_modules/&lt;/code&gt; to your &lt;code&gt;.gitignore&lt;/code&gt; file.</source>
          <target state="translated">추가 &lt;code&gt;node_modules/&lt;/code&gt; 당신에 &lt;code&gt;.gitignore&lt;/code&gt; 의 파일.</target>
        </trans-unit>
        <trans-unit id="7d2d1cf5d2c70af125b1d4750697da42441f32ee" translate="yes" xml:space="preserve">
          <source>Add a &lt;code&gt;RCTRootView&lt;/code&gt; to your iOS app. This view will serve as the container for your React Native component.</source>
          <target state="translated">iOS 앱에 &lt;code&gt;RCTRootView&lt;/code&gt; 를 추가하십시오 . 이 뷰는 React Native 컴포넌트의 컨테이너 역할을합니다.</target>
        </trans-unit>
        <trans-unit id="916590042278c3d21aeb86381c87071eacb7b34c" translate="yes" xml:space="preserve">
          <source>Add a &lt;code&gt;ReactRootView&lt;/code&gt; to your Android app. This view will serve as the container for your React Native component.</source>
          <target state="translated">Android 앱에 &lt;code&gt;ReactRootView&lt;/code&gt; 를 추가하십시오 . 이 뷰는 React Native 컴포넌트의 컨테이너 역할을합니다.</target>
        </trans-unit>
        <trans-unit id="d7136a70dc962575062ede102ec6cedc3d0db0a9" translate="yes" xml:space="preserve">
          <source>Add a handler to AppState changes by listening to the &lt;code&gt;change&lt;/code&gt; event type and providing the handler</source>
          <target state="translated">&lt;code&gt;change&lt;/code&gt; 이벤트 유형 을 수신하고 핸들러를 제공하여 AppState 변경 사항에 핸들러 추가</target>
        </trans-unit>
        <trans-unit id="fce8c1a1ea252bfa6eca12a162dfc71a42d1dc60" translate="yes" xml:space="preserve">
          <source>Add a handler to Linking changes by listening to the &lt;code&gt;url&lt;/code&gt; event type and providing the handler</source>
          <target state="translated">&lt;code&gt;url&lt;/code&gt; 이벤트 유형 을 수신 하고 핸들러를 제공하여 변경 사항 링크에 핸들러 추가</target>
        </trans-unit>
        <trans-unit id="a1c1f3027be2d1297e41c31914d28badd36421d2" translate="yes" xml:space="preserve">
          <source>Add an entry for the local React Native maven directory to &lt;code&gt;build.gradle&lt;/code&gt;. Be sure to add it to the &quot;allprojects&quot; block, above other maven repositories:</source>
          <target state="translated">로컬 React Native maven 디렉토리에 대한 항목을 &lt;code&gt;build.gradle&lt;/code&gt; 에 추가하십시오 . 다른 maven 저장소보다 &quot;allprojects&quot;블록에 추가하십시오.</target>
        </trans-unit>
        <trans-unit id="25ba4707ba4cc17c0e74f136ab669037ac565ff4" translate="yes" xml:space="preserve">
          <source>Add an event handler. Supported events:</source>
          <target state="translated">이벤트 핸들러를 추가하십시오. 지원되는 이벤트 :</target>
        </trans-unit>
        <trans-unit id="f303f4327ec2a57555287d2aebee3c2bc26d3f6f" translate="yes" xml:space="preserve">
          <source>Add relevant labels.</source>
          <target state="translated">관련 레이블을 추가하십시오.</target>
        </trans-unit>
        <trans-unit id="074c612537d6150278f9e572a2905863092b0b0a" translate="yes" xml:space="preserve">
          <source>Add the &lt;code&gt;:ReactAndroid&lt;/code&gt; project in &lt;code&gt;android/settings.gradle&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;android/settings.gradle&lt;/code&gt; 에 &lt;code&gt;:ReactAndroid&lt;/code&gt; 프로젝트를 추가하십시오 .</target>
        </trans-unit>
        <trans-unit id="6ac1017be497071a089a0ae525f02abd1c1c799c" translate="yes" xml:space="preserve">
          <source>Add the &lt;code&gt;RCT_EXPORT_MODULE()&lt;/code&gt; marker macro.</source>
          <target state="translated">&lt;code&gt;RCT_EXPORT_MODULE()&lt;/code&gt; 마커 매크로를 추가하십시오 .</target>
        </trans-unit>
        <trans-unit id="7577945c194a9ae90a1862498e32b45c859f912b" translate="yes" xml:space="preserve">
          <source>Add the React Native dependency to your app's &lt;code&gt;build.gradle&lt;/code&gt; file:</source>
          <target state="translated">앱의 &lt;code&gt;build.gradle&lt;/code&gt; 파일에 React Native 종속성을 추가 하십시오.</target>
        </trans-unit>
        <trans-unit id="2963b0257cb6c0d07ed24bfd1cb0460cb508b8b1" translate="yes" xml:space="preserve">
          <source>Add the copyright notice to the top of any new files you've added.</source>
          <target state="translated">추가 한 새 파일의 맨 위에 저작권 표시를 추가하십시오.</target>
        </trans-unit>
        <trans-unit id="c1a4f72ae8deaa5b81c4bd4a83091036a3b3dca3" translate="yes" xml:space="preserve">
          <source>Add the following lines to your &lt;code&gt;$HOME/.bash_profile&lt;/code&gt; config file:</source>
          <target state="translated">&lt;code&gt;$HOME/.bash_profile&lt;/code&gt; 구성 파일에 다음 행을 추가 하십시오.</target>
        </trans-unit>
        <trans-unit id="3d5a2b8b6cdd3f4ade54c21adb21982f1917e19e" translate="yes" xml:space="preserve">
          <source>Add the following to &lt;code&gt;Link Binary With Libraries&lt;/code&gt;: &lt;code&gt;libRCTPushNotification.a&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;Link Binary With Libraries&lt;/code&gt; 하려면 다음을 추가하십시오 . &lt;code&gt;libRCTPushNotification.a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f2a6546ce6f3182347d06c181addea11df21a115" translate="yes" xml:space="preserve">
          <source>Add the following to your Project: &lt;code&gt;node_modules/react-native/Libraries/PushNotificationIOS/RCTPushNotification.xcodeproj&lt;/code&gt;</source>
          <target state="translated">프로젝트에 다음을 추가하십시오 : &lt;code&gt;node_modules/react-native/Libraries/PushNotificationIOS/RCTPushNotification.xcodeproj&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d616e5291badd62b4e7a9ee2b837059d33b27a2e" translate="yes" xml:space="preserve">
          <source>Add these components as dependencies using CocoaPods.</source>
          <target state="translated">CocoaPods를 사용하여 이러한 컴포넌트를 종속성으로 추가하십시오.</target>
        </trans-unit>
        <trans-unit id="9d52590470cf0c91606faff5ecdbdb6fed300941" translate="yes" xml:space="preserve">
          <source>Add trailing commas,</source>
          <target state="translated">뒤에 쉼표를 추가하십시오.</target>
        </trans-unit>
        <trans-unit id="5de6a0ee1053f262231bdac88a9eb2c5bed4956d" translate="yes" xml:space="preserve">
          <source>Adding &lt;code&gt;alignItems&lt;/code&gt; to a component's style determines the &lt;strong&gt;alignment&lt;/strong&gt; of children along the &lt;strong&gt;secondary axis&lt;/strong&gt; (if the primary axis is &lt;code&gt;row&lt;/code&gt;, then the secondary is &lt;code&gt;column&lt;/code&gt;, and vice versa). Should children be aligned at the start, the center, the end, or stretched to fill? Available options are &lt;code&gt;flex-start&lt;/code&gt;, &lt;code&gt;center&lt;/code&gt;, &lt;code&gt;flex-end&lt;/code&gt;, and &lt;code&gt;stretch&lt;/code&gt;.</source>
          <target state="translated">추가 &lt;code&gt;alignItems&lt;/code&gt; 를 구성 요소의 스타일은 결정 &lt;strong&gt;정렬&lt;/strong&gt; 함께 아이들의 &lt;strong&gt;보조 축&lt;/strong&gt; (기본 축 인 경우 &lt;code&gt;row&lt;/code&gt; 다음 보조가 &lt;code&gt;column&lt;/code&gt; 하고, 그 반대의 경우도 마찬가지). 아이들이 시작, 중심, 끝 또는 늘어날 때 정렬되어야합니까? 사용 가능한 옵션은 &lt;code&gt;flex-start&lt;/code&gt; , &lt;code&gt;center&lt;/code&gt; , &lt;code&gt;flex-end&lt;/code&gt; 및 &lt;code&gt;stretch&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="29b705d4b8a52fdf872808a18710afded6391c16" translate="yes" xml:space="preserve">
          <source>Adding &lt;code&gt;flexDirection&lt;/code&gt; to a component's &lt;code&gt;style&lt;/code&gt; determines the &lt;strong&gt;primary axis&lt;/strong&gt; of its layout. Should the children be organized horizontally (&lt;code&gt;row&lt;/code&gt;) or vertically (&lt;code&gt;column&lt;/code&gt;)? The default is &lt;code&gt;column&lt;/code&gt;.</source>
          <target state="translated">구성 요소 &lt;code&gt;style&lt;/code&gt; &lt;code&gt;flexDirection&lt;/code&gt; 을 추가하면 해당 레이아웃 의 &lt;strong&gt;기본 축&lt;/strong&gt; 이 결정 됩니다. 어린이를 수평 ( &lt;code&gt;row&lt;/code&gt; ) 또는 수직 ( &lt;code&gt;column&lt;/code&gt; ) 으로 구성해야합니까 ? 기본값은 &lt;code&gt;column&lt;/code&gt; 입니다.&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="5d1070fdbefd559aa13da043f9303321d241c711" translate="yes" xml:space="preserve">
          <source>Adding &lt;code&gt;getItemLayout&lt;/code&gt; can be a great performance boost for lists of several hundred items. Remember to include separator length (height or width) in your offset calculation if you specify &lt;code&gt;ItemSeparatorComponent&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;getItemLayout&lt;/code&gt; 을 추가하면 수백 개의 항목 목록에서 성능이 크게 향상 될 수 있습니다. &lt;code&gt;ItemSeparatorComponent&lt;/code&gt; 를 지정하는 경우 오프셋 계산에 구분 기호 길이 (높이 또는 너비)를 포함해야합니다 .</target>
        </trans-unit>
        <trans-unit id="9d6c176af6548817af9fc6625215cd776e1c7ea5" translate="yes" xml:space="preserve">
          <source>Adding &lt;code&gt;justifyContent&lt;/code&gt; to a component's style determines the &lt;strong&gt;distribution&lt;/strong&gt; of children along the &lt;strong&gt;primary axis&lt;/strong&gt;. Should children be distributed at the start, the center, the end, or spaced evenly? Available options are &lt;code&gt;flex-start&lt;/code&gt;, &lt;code&gt;center&lt;/code&gt;, &lt;code&gt;flex-end&lt;/code&gt;, &lt;code&gt;space-around&lt;/code&gt;, &lt;code&gt;space-between&lt;/code&gt; and &lt;code&gt;space-evenly&lt;/code&gt;.</source>
          <target state="translated">구성 요소 스타일에 &lt;code&gt;justifyContent&lt;/code&gt; 를 추가 하면 &lt;strong&gt;기본 축을&lt;/strong&gt; 따라 자식 &lt;strong&gt;분포&lt;/strong&gt; 가 결정 됩니다. 아이들은 시작, 중심, 끝 또는 균등 한 간격으로 분배되어야합니까? 사용 가능한 옵션은 &lt;code&gt;flex-start&lt;/code&gt; , &lt;code&gt;center&lt;/code&gt; , &lt;code&gt;flex-end&lt;/code&gt; , &lt;code&gt;space-around&lt;/code&gt; , &lt;code&gt;space-between&lt;/code&gt; 및 &lt;code&gt;space-evenly&lt;/code&gt; 입니다.&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="4195b3d05331174fae8d0e5e75a87f2fbe08cdb7" translate="yes" xml:space="preserve">
          <source>Adding React Native to your app</source>
          <target state="translated">앱에 React Native 추가</target>
        </trans-unit>
        <trans-unit id="280406c715a147e4dab05a4132d28e39dd6ba2a9" translate="yes" xml:space="preserve">
          <source>Adding a packager config file</source>
          <target state="translated">패키저 구성 파일 추가</target>
        </trans-unit>
        <trans-unit id="a5a856a9d71d35f891815e17f6414297e234c8ee" translate="yes" xml:space="preserve">
          <source>Adding and changing images doesn't require app recompilation, just refresh the simulator as you normally do.</source>
          <target state="translated">이미지를 추가하고 변경하기 위해 앱을 다시 컴파일 할 필요가 없습니다. 일반적으로 시뮬레이터를 새로 고치십시오.</target>
        </trans-unit>
        <trans-unit id="214cdb151befd0f57a160c861c003b38b5edb8ba" translate="yes" xml:space="preserve">
          <source>Adding signing config to your app's gradle config</source>
          <target state="translated">앱의 gradle 구성에 서명 구성 추가</target>
        </trans-unit>
        <trans-unit id="6ea5ef09a89f93581e248dcc20539555e85c3a48" translate="yes" xml:space="preserve">
          <source>Additional examples</source>
          <target state="translated">추가 예</target>
        </trans-unit>
        <trans-unit id="a56b8c19348d98277a2ab2565fe432ec6f0edd2e" translate="yes" xml:space="preserve">
          <source>Additional functions</source>
          <target state="translated">추가 기능</target>
        </trans-unit>
        <trans-unit id="1dde6c66311d292f27e518eed3a47f1a7e03d5c7" translate="yes" xml:space="preserve">
          <source>Additional mathematical functions are provided by the following methods:</source>
          <target state="translated">다음과 같은 방법으로 추가 수학 함수가 제공됩니다.</target>
        </trans-unit>
        <trans-unit id="41b5f2e6aebc43182a4eee3c33dbf7e657d4ea1a" translate="yes" xml:space="preserve">
          <source>Additional notes</source>
          <target state="translated">추가 사항</target>
        </trans-unit>
        <trans-unit id="7510927c2aa72376fc39878e290f2e3536722ddd" translate="yes" xml:space="preserve">
          <source>Adds an event handler.</source>
          <target state="translated">이벤트 핸들러를 추가합니다.</target>
        </trans-unit>
        <trans-unit id="24c69bb24702905cdf642515a4592dfd88d53d84" translate="yes" xml:space="preserve">
          <source>Advanced imperative API for snooping on animated events that are passed in through props. It permits to add a new javascript listener to an existing &lt;code&gt;AnimatedEvent&lt;/code&gt;. If &lt;code&gt;animatedEvent&lt;/code&gt; is a simple javascript listener, it will merge the 2 listeners into a single one, and if &lt;code&gt;animatedEvent&lt;/code&gt; is null/undefined, it will assign the javascript listener directly. Use values directly where possible.</source>
          <target state="translated">소품을 통해 전달되는 애니메이션 이벤트의 스누핑을위한 고급 명령 API. 기존 &lt;code&gt;AnimatedEvent&lt;/code&gt; 에 새로운 자바 스크립트 리스너를 추가 할 수 있습니다 . 경우 &lt;code&gt;animatedEvent&lt;/code&gt; 는 간단한 자바 스크립트 수신기는, 단일 하나로 2 개 수신기를 병합하며, 경우 &lt;code&gt;animatedEvent&lt;/code&gt; 는 널 / 정의되어 직접적 자바 스크립트 리스너를 할당한다. 가능한 경우 직접 값을 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="a309f95fac40f55a77533521adc602cc620c60a0" translate="yes" xml:space="preserve">
          <source>After opening the trace in your browser (preferably Chrome), you should see something like this:</source>
          <target state="translated">브라우저에서 추적을 열면 (바람직하게는 Chrome) 다음과 같은 내용이 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="f42db79116697318c59fd84d7b3fbb6259975222" translate="yes" xml:space="preserve">
          <source>After you can control a component's size, the next step is to &lt;a href=&quot;flexbox&quot;&gt;learn how to lay it out on the screen&lt;/a&gt;.</source>
          <target state="translated">구성 요소의 크기를 제어 한 후 다음 단계는 &lt;a href=&quot;flexbox&quot;&gt;화면에&lt;/a&gt; 구성 요소 를 배치하는 방법을 배우는 것 입니다.</target>
        </trans-unit>
        <trans-unit id="b10bb943b12fdd5453cec9e91c3860b00c664a1f" translate="yes" xml:space="preserve">
          <source>After you have created your &lt;code&gt;Podfile&lt;/code&gt;, you are ready to install the React Native pod.</source>
          <target state="translated">&lt;code&gt;Podfile&lt;/code&gt; 을 생성 하면 React Native 포드를 설치할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b969680a4943d3e0dd28ec47387f131504ca1678" translate="yes" xml:space="preserve">
          <source>Alert</source>
          <target state="translated">Alert</target>
        </trans-unit>
        <trans-unit id="79e896d799c53c217163b021439a66fef710dca8" translate="yes" xml:space="preserve">
          <source>Alert.alert()</source>
          <target state="translated">Alert.alert()</target>
        </trans-unit>
        <trans-unit id="df25fd19aa260cbda6c684347060b289f8aac360" translate="yes" xml:space="preserve">
          <source>AlertButtonStyle</source>
          <target state="translated">AlertButtonStyle</target>
        </trans-unit>
        <trans-unit id="d8b72e570dc926d8b316198d23d63599457447b5" translate="yes" xml:space="preserve">
          <source>AlertIOS</source>
          <target state="translated">AlertIOS</target>
        </trans-unit>
        <trans-unit id="55bd194949a8cde1dc1992e05552e642bdef3c2d" translate="yes" xml:space="preserve">
          <source>AlertIOS.alert()</source>
          <target state="translated">AlertIOS.alert()</target>
        </trans-unit>
        <trans-unit id="204e0cb06b9654a5aa24e905cfe3c0478e7f638a" translate="yes" xml:space="preserve">
          <source>AlertIOS.prompt()</source>
          <target state="translated">AlertIOS.prompt()</target>
        </trans-unit>
        <trans-unit id="3f23184d3dacf8f4fb6470a31ea0912c1f168fa0" translate="yes" xml:space="preserve">
          <source>AlertType</source>
          <target state="translated">AlertType</target>
        </trans-unit>
        <trans-unit id="34adacaf51bbf3bed523354f7b789bd245e81207" translate="yes" xml:space="preserve">
          <source>Align Items</source>
          <target state="translated">항목 정렬</target>
        </trans-unit>
        <trans-unit id="07d1fe0625bf44e9d6b31ac45520f31de2a3642c" translate="yes" xml:space="preserve">
          <source>All elements in the document will inherit this font unless they or one of their parents specifies a new rule.</source>
          <target state="translated">문서의 모든 요소는 부모 또는 부모 중 하나가 새 규칙을 지정하지 않는 한이 글꼴을 상속합니다.</target>
        </trans-unit>
        <trans-unit id="20406b744679254a8a2d5fa7aa117f500bc57d84" translate="yes" xml:space="preserve">
          <source>All pull requests should be opened against the &lt;code&gt;master&lt;/code&gt; branch. After opening your pull request, ensure &lt;a href=&quot;contributing#contrinuous-integration-tests&quot;&gt;&lt;strong&gt;all tests pass&lt;/strong&gt;&lt;/a&gt; on Circle CI. If a test fails and you believe it is unrelated to your change, leave a comment on the pull request explaining why.</source>
          <target state="translated">&lt;code&gt;master&lt;/code&gt; 풀에 대해 모든 풀 요청을 열어야합니다 . 풀 요청을 연 후 &lt;a href=&quot;contributing#contrinuous-integration-tests&quot;&gt;&lt;strong&gt;모든 테스트&lt;/strong&gt;&lt;/a&gt; 가 Circle CI를 &lt;strong&gt;통과&lt;/strong&gt; 하는지 확인 &lt;strong&gt;하십시오&lt;/strong&gt; . 테스트가 실패하고 테스트가 변경 사항과 관련이 없다고 생각되면 풀 요청에 이유를 설명하는 주석을 남기십시오.</target>
        </trans-unit>
        <trans-unit id="b17ad7f883e3804d64a4f5c91f8f7f5eeb5a7887" translate="yes" xml:space="preserve">
          <source>All we need to do is provide a &lt;code&gt;setNativeProps&lt;/code&gt; method on our component that calls &lt;code&gt;setNativeProps&lt;/code&gt; on the appropriate child with the given arguments.</source>
          <target state="translated">주어진 인수로 적절한 자식에서 &lt;code&gt;setNativeProps&lt;/code&gt; 를 호출 하는 &lt;code&gt;setNativeProps&lt;/code&gt; 메소드를 컴포넌트에 제공하기 만하면 됩니다.</target>
        </trans-unit>
        <trans-unit id="5b816d968fb4616ce124639458b9c411b2af71c6" translate="yes" xml:space="preserve">
          <source>Also inherits &lt;a href=&quot;scrollview#props&quot;&gt;ScrollView Props&lt;/a&gt;, unless it is nested in another FlatList of same orientation.</source>
          <target state="translated">같은 방향의 다른 FlatList에 중첩되어 있지 않으면 &lt;a href=&quot;scrollview#props&quot;&gt;ScrollView Props&lt;/a&gt; 도 상속 합니다.</target>
        </trans-unit>
        <trans-unit id="3b74e96e489cf616e54374e5e92ff3290101f441" translate="yes" xml:space="preserve">
          <source>Alternative</source>
          <target state="translated">Alternative</target>
        </trans-unit>
        <trans-unit id="e1388482402bd31bffda429da2b45a801887004e" translate="yes" xml:space="preserve">
          <source>Alternative use:</source>
          <target state="translated">대체 사용 :</target>
        </trans-unit>
        <trans-unit id="99b0e0b3b5899ff415ee10cb8e7acc1fe28a4d28" translate="yes" xml:space="preserve">
          <source>Alternatively, select &quot;Dev Settings&quot; from the Developer Menu, then update the &quot;Debug server host for device&quot; setting to match the IP address of your computer.</source>
          <target state="translated">또는 개발자 메뉴에서 &quot;Dev 설정&quot;을 선택한 다음 컴퓨터의 IP 주소와 일치하도록 &quot;장치의 서버 호스트 디버그&quot;설정을 업데이트하십시오.</target>
        </trans-unit>
        <trans-unit id="acee9402e60cbbc82c8c94eee405711b0ac54397" translate="yes" xml:space="preserve">
          <source>Alternatively, the dismissing behavior can be disabled altogether by providing an optional &lt;code&gt;options&lt;/code&gt; parameter with the &lt;code&gt;cancelable&lt;/code&gt; property set to &lt;code&gt;false&lt;/code&gt; i.e. &lt;code&gt;{ cancelable: false }&lt;/code&gt;</source>
          <target state="translated">또는 &lt;code&gt;cancelable&lt;/code&gt; 특성이 &lt;code&gt;false&lt;/code&gt; 로 설정된 선택적 &lt;code&gt;options&lt;/code&gt; 매개 변수 ( 예 : &lt;code&gt;{ cancelable: false }&lt;/code&gt; 를 제공하여 해제 동작을 모두 사용하지 않을 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="1df2e3db0b97d56099d6d160609304e633921fda" translate="yes" xml:space="preserve">
          <source>Alternatively, you can clone the repo to your &lt;code&gt;node_modules&lt;/code&gt; directory and run &lt;code&gt;npm install&lt;/code&gt; inside the cloned repo.</source>
          <target state="translated">또는 repo를 &lt;code&gt;node_modules&lt;/code&gt; 디렉토리 에 복제하고 복제 된 저장소 내에서 &lt;code&gt;npm install&lt;/code&gt; 을 실행할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2cf2b3f05dce307c23a3ffc8ef3d3979ef42a72a" translate="yes" xml:space="preserve">
          <source>Although the Toolbar supports remote images for the logo, navigation and action icons, this should only be used in DEV mode where &lt;code&gt;require('./some_icon.png')&lt;/code&gt; translates into a packager URL. In release mode you should always use a drawable resource for these icons. Using &lt;code&gt;require('./some_icon.png')&lt;/code&gt; will do this automatically for you, so as long as you don't explicitly use e.g. &lt;code&gt;{uri: 'http://...'}&lt;/code&gt;, you will be good.</source>
          <target state="translated">툴바는 로고, 탐색 및 동작 아이콘에 대한 원격 이미지를 지원하지만, &lt;code&gt;require('./some_icon.png')&lt;/code&gt; 가 패키지 URL로 변환되는 DEV 모드에서만 사용해야합니다 . 릴리스 모드에서는 항상이 아이콘에 드로어 블 리소스를 사용해야합니다. 사용 &lt;code&gt;require('./some_icon.png')&lt;/code&gt; 않도록 당신이 명시 적으로 예를 들어, 사용하지 않는 한, 당신을 위해 자동으로 수행됩니다 &lt;code&gt;{uri: 'http://...'}&lt;/code&gt; , 당신은 좋은 것입니다.</target>
        </trans-unit>
        <trans-unit id="034c454efe83e2c65ff9691e7f12eeae8394c1ea" translate="yes" xml:space="preserve">
          <source>Although this solution is complex, it is used in &lt;code&gt;RCTUIManager&lt;/code&gt;, which is an internal React Native class that manages all React Native views.</source>
          <target state="translated">이 솔루션은 복잡하지만 모든 React Native보기를 관리하는 내부 React Native 클래스 인 &lt;code&gt;RCTUIManager&lt;/code&gt; 에서 사용됩니다 .</target>
        </trans-unit>
        <trans-unit id="f27127b22d4171c1709437d6d968320c1476238c" translate="yes" xml:space="preserve">
          <source>Although we have a flavor of cross-language callbacks (&lt;a href=&quot;native-modules-ios#callbacks&quot;&gt;described here&lt;/a&gt;), these callbacks are not always the thing we need. The main problem is that they are not intended to be passed as properties. Rather, this mechanism allows us to trigger a native action from JS, and handle the result of that action in JS.</source>
          <target state="translated">다양한 언어의 콜백 ( &lt;a href=&quot;native-modules-ios#callbacks&quot;&gt;여기 설명&lt;/a&gt; )이 있지만이 콜백이 항상 필요한 것은 아닙니다. 주요 문제는 속성으로 전달되지 않는다는 것입니다. 오히려이 메커니즘을 사용하면 JS에서 기본 조치를 트리거하고 JS에서 해당 조치의 결과를 처리 할 수 ​​있습니다.</target>
        </trans-unit>
        <trans-unit id="7a9959f087a71e49ec9ede4d2cf7d591bd3a8154" translate="yes" xml:space="preserve">
          <source>Always make sure to test your app extensions in a real device, but be aware that this may not be sufficient, especially when dealing with Today widgets. Debug-configured builds are more likely to exceed the memory limits, while release-configured builds don't fail right away. We highly recommend that you use &lt;a href=&quot;https://developer.apple.com/library/content/documentation/DeveloperTools/Conceptual/InstrumentsUserGuide/index.html&quot;&gt;Xcode's Instruments&lt;/a&gt; to analyze your real world memory usage, as it's very likely that your release-configured build is very close to the 16 MB limit. In situations like these, it is easy to go over the 16 MB limit by performing common operations, such as fetching data from an API.</source>
          <target state="translated">항상 실제 기기에서 추가 앱 정보를 테스트해야하지만 특히 오늘 위젯을 처리 할 때는 충분하지 않을 수 있습니다. 디버그 구성 빌드는 메모리 제한을 초과 할 가능성이 높지만 릴리스 구성 빌드는 즉시 실패하지 않습니다. 릴리스 구성 빌드가 16MB 제한에 매우 가깝기 때문에 &lt;a href=&quot;https://developer.apple.com/library/content/documentation/DeveloperTools/Conceptual/InstrumentsUserGuide/index.html&quot;&gt;Xcode의 인스트루먼트&lt;/a&gt; 를 사용하여 실제 메모리 사용량을 분석 하는 것이 좋습니다 . 이러한 상황에서는 API에서 데이터 가져 오기와 같은 일반적인 작업을 수행하여 16MB 제한을 쉽게 초과 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="8d48e94690a25a9fc6614d178fc7d55cddd86b2f" translate="yes" xml:space="preserve">
          <source>Amount of time between low-pri item render batches, e.g. for rendering items quite a ways off screen. Similar fill rate/responsiveness tradeoff as &lt;code&gt;maxToRenderPerBatch&lt;/code&gt;.</source>
          <target state="translated">낮은 프라이스 아이템 렌더 배치 사이의 시간, 예를 들어 아이템을 화면 밖에서 상당히 렌더링하는 경우. 유사 채우기 속도 /로 응답 트레이드 오프 &lt;code&gt;maxToRenderPerBatch&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="7f36d0d32a28adf2f3ddf21558719dd4387518d7" translate="yes" xml:space="preserve">
          <source>An Alert button style</source>
          <target state="translated">경고 버튼 스타일</target>
        </trans-unit>
        <trans-unit id="67fb546a4e5173057393237941be56f2dc2b24ed" translate="yes" xml:space="preserve">
          <source>An Alert button type</source>
          <target state="translated">경고 버튼 유형</target>
        </trans-unit>
        <trans-unit id="74b3fd96dbb16c1641358343d1463fe891fc8954" translate="yes" xml:space="preserve">
          <source>An ID which is used to associate this &lt;code&gt;InputAccessoryView&lt;/code&gt; to specified TextInput(s).</source>
          <target state="translated">이 &lt;code&gt;InputAccessoryView&lt;/code&gt; 를 지정된 TextInput (들) 에 연관시키는 데 사용되는 ID입니다 .</target>
        </trans-unit>
        <trans-unit id="41984ee14abf658a322341e9fdcf6e0645b5ade5" translate="yes" xml:space="preserve">
          <source>An alias for &lt;code&gt;getAlert&lt;/code&gt; to get the notification's main message string</source>
          <target state="translated">알림의 기본 메시지 문자열을 가져 오기 위한 &lt;code&gt;getAlert&lt;/code&gt; 의 별명</target>
        </trans-unit>
        <trans-unit id="76724469185b353f9acef0af89ecfece51dd23ea" translate="yes" xml:space="preserve">
          <source>An array of child indices determining which children get docked to the top of the screen when scrolling. For example, passing &lt;code&gt;stickyHeaderIndices={[0]}&lt;/code&gt; will cause the first child to be fixed to the top of the scroll view. This property is not supported in conjunction with &lt;code&gt;horizontal={true}&lt;/code&gt;.</source>
          <target state="translated">스크롤 할 때 화면 상단에 도킹되는 어린이를 결정하는 자식 인덱스 배열입니다. 예를 들어, &lt;code&gt;stickyHeaderIndices={[0]}&lt;/code&gt; 을 전달하면 첫 번째 자식이 스크롤보기의 맨 위에 고정됩니다. 이 속성은 &lt;code&gt;horizontal={true}&lt;/code&gt; 와 함께 지원되지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="f725a499ae5becf588cd0249c0318d3e7c6682d7" translate="yes" xml:space="preserve">
          <source>An exception can be made for proposals and long-running discussions, though these should be rare. If you have been contributing to the project long enough, you will probably already have access to the &lt;a href=&quot;https://www.facebook.com/groups/reactnativeoss/&quot;&gt;React Native Core Contributors&lt;/a&gt; Facebook Group, where this sort of discussion is usually held.</source>
          <target state="translated">제안서와 장기 토론에는 예외가있을 수 있지만 드문 경우입니다. 프로젝트에 오랫동안 기여한 적이 있다면 아마도 이러한 종류의 토론이 이루어지는 &lt;a href=&quot;https://www.facebook.com/groups/reactnativeoss/&quot;&gt;React Native Core Contributors&lt;/a&gt; Facebook 그룹에 이미 액세스했을 것입니다 .</target>
        </trans-unit>
        <trans-unit id="981710fcb3f4620321c5420deb8735e7ab1e1f6e" translate="yes" xml:space="preserve">
          <source>An exponential function.</source>
          <target state="translated">지수 함수.</target>
        </trans-unit>
        <trans-unit id="99cea3f87bde99b15df5de781ecfd0d90a175d3a" translate="yes" xml:space="preserve">
          <source>An instance of &lt;a href=&quot;listviewdatasource&quot;&gt;ListView.DataSource&lt;/a&gt; to use</source>
          <target state="translated">사용할 &lt;a href=&quot;listviewdatasource&quot;&gt;ListView.DataSource&lt;/a&gt; 의 인스턴스</target>
        </trans-unit>
        <trans-unit id="e94b1d0cae7c725683dd20c7f8fa029ca475b666" translate="yes" xml:space="preserve">
          <source>An instance of &lt;code&gt;DocumentSelectionState&lt;/code&gt;, this is some state that is responsible for maintaining selection information for a document.</source>
          <target state="translated">&lt;code&gt;DocumentSelectionState&lt;/code&gt; 의 인스턴스로, 문서의 선택 정보를 유지 관리하는 상태입니다.</target>
        </trans-unit>
        <trans-unit id="62604565379796378e4f88c415806563425c43cb" translate="yes" xml:space="preserve">
          <source>An object that identifies the data to be rendered for a given section.</source>
          <target state="translated">지정된 섹션에 렌더링 될 데이터를 식별하는 객체입니다.</target>
        </trans-unit>
        <trans-unit id="f7d85b0a9dc7d9238ceef4c0bad355550211f9dc" translate="yes" xml:space="preserve">
          <source>An optional message that appears above the text input.</source>
          <target state="translated">텍스트 입력 위에 나타나는 선택적 메시지입니다.</target>
        </trans-unit>
        <trans-unit id="100b2c227025f0bbafce2d1538757d23bb2d1c4d" translate="yes" xml:space="preserve">
          <source>An optional message that appears below the dialog's title.</source>
          <target state="translated">대화 상자 제목 아래에 표시되는 선택적 메시지입니다.</target>
        </trans-unit>
        <trans-unit id="25b5ac1d977d301eda1fe9cf552450d90bc3f5aa" translate="yes" xml:space="preserve">
          <source>An optional method called &lt;code&gt;getConstants&lt;/code&gt; returns the constant values exposed to JavaScript. Its implementation is not required but is very useful to key pre-defined values that need to be communicated from JavaScript to Java in sync.</source>
          <target state="translated">&lt;code&gt;getConstants&lt;/code&gt; 라는 선택적 메소드는 JavaScript에 노출 된 상수 값을 리턴합니다. 구현은 필수는 아니지만 JavaScript에서 Java로 통신해야하는 사전 정의 된 주요 값에 매우 유용합니다.</target>
        </trans-unit>
        <trans-unit id="d65cdd40f486811dca77fed7d311ab2ad01c7185" translate="yes" xml:space="preserve">
          <source>And both values would get converted correctly to the native &lt;code&gt;NSDate&lt;/code&gt;. A bad value, like an &lt;code&gt;Array&lt;/code&gt;, would generate a helpful &quot;RedBox&quot; error message.</source>
          <target state="translated">그리고 두 값 모두 기본 &lt;code&gt;NSDate&lt;/code&gt; 로 올바르게 변환됩니다 . &lt;code&gt;Array&lt;/code&gt; 와 같은 잘못된 값 은 유용한 &quot;RedBox&quot;오류 메시지를 생성합니다.</target>
        </trans-unit>
        <trans-unit id="e3cbc089f1d8b7cd88652d0099a7ca3b0e723883" translate="yes" xml:space="preserve">
          <source>And then in your AppDelegate implementation add the following:</source>
          <target state="translated">그런 다음 AppDelegate 구현에서 다음을 추가하십시오.</target>
        </trans-unit>
        <trans-unit id="09655531b7fe85aa499df4fa3914b542b698a481" translate="yes" xml:space="preserve">
          <source>And then on your React component you'll be able to listen to the events on &lt;code&gt;Linking&lt;/code&gt; as follows</source>
          <target state="translated">그런 다음 React 컴포넌트 에서 다음과 같이 &lt;code&gt;Linking&lt;/code&gt; 의 이벤트를들을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="1928f95c598b9e69462fcb512625cf8e28923044" translate="yes" xml:space="preserve">
          <source>Android</source>
          <target state="translated">Android</target>
        </trans-unit>
        <trans-unit id="c1fedc7ad3eb75e5247c7d6573777ec7109c8c47" translate="yes" xml:space="preserve">
          <source>Android (Java)</source>
          <target state="translated">안드로이드 (자바)</target>
        </trans-unit>
        <trans-unit id="158ef2b0224946c5cf5ac420b1b126af3795ca1f" translate="yes" xml:space="preserve">
          <source>Android API &amp;gt;= 18 Positions will also contain a &lt;code&gt;mocked&lt;/code&gt; boolean to indicate if position was created from a mock provider.</source>
          <target state="translated">안드로이드 API&amp;gt; = 18 개 포지션도 포함됩니다 &lt;code&gt;mocked&lt;/code&gt; 위치가 모의 공급자로부터 생성 된 경우 표시하는 부울.</target>
        </trans-unit>
        <trans-unit id="567830a4ab339e68ec6acff6208cdb40d647193e" translate="yes" xml:space="preserve">
          <source>Android API &amp;gt;= 23 Requires an additional step to check for, and request the ACCESS_FINE_LOCATION permission using the &lt;a href=&quot;permissionsandroid&quot;&gt;PermissionsAndroid API&lt;/a&gt;. Failure to do so may result in a hard crash.</source>
          <target state="translated">Android API&amp;gt; = 23 &lt;a href=&quot;permissionsandroid&quot;&gt;PermissionsAndroid API를&lt;/a&gt; 사용하여 ACCESS_FINE_LOCATION 권한을 확인하고 요청하려면 추가 단계가 필요합니다 . 그렇지 않으면 심각한 충돌이 발생할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="712717b810c5fa4733db5419291e5f4b57838493" translate="yes" xml:space="preserve">
          <source>Android API 21+ uses the material design ripple to provide user with feedback when they touch an interactable area on the screen. React Native exposes this through the &lt;a href=&quot;touchablenativefeedback&quot;&gt;&lt;code&gt;TouchableNativeFeedback&lt;/code&gt; component&lt;/a&gt;. Using this touchable effect instead of opacity or highlight will often make your app feel much more fitting on the platform. That said, you need to be careful when using it because it doesn't work on iOS or on Android API &amp;lt; 21, so you will need to fallback to using one of the other Touchable components on iOS. You can use a library like &lt;a href=&quot;https://github.com/react-community/react-native-platform-touchable&quot;&gt;react-native-platform-touchable&lt;/a&gt; to handle the platform differences for you.</source>
          <target state="translated">Android API 21+는 머티리얼 디자인 리플을 사용하여 사용자가 화면에서 상호 작용 가능한 영역을 터치 할 때 피드백을 제공합니다. React Native는 &lt;a href=&quot;touchablenativefeedback&quot;&gt; &lt;code&gt;TouchableNativeFeedback&lt;/code&gt; 구성 요소를&lt;/a&gt; 통해이를 노출합니다 . 불투명도 또는 하이라이트 대신이 터치 가능한 효과를 사용하면 앱이 플랫폼에서 훨씬 더 적합하다고 느끼게됩니다. 즉, iOS 또는 Android API &amp;lt;21에서 작동하지 않기 때문에 사용할 때주의해야하므로 iOS의 다른 Touchable 구성 요소 중 하나를 사용하는 것으로 대체해야합니다. &lt;a href=&quot;https://github.com/react-community/react-native-platform-touchable&quot;&gt;react-native-platform-touchable&lt;/a&gt; 과 같은 라이브러리 를 사용하여 플랫폼 차이를 처리 할 수 ​​있습니다.</target>
        </trans-unit>
        <trans-unit id="732ba4b5e7a873beeb555fdb428575d7b23b0113" translate="yes" xml:space="preserve">
          <source>Android Components and APIs</source>
          <target state="translated">안드로이드 컴포넌트 및 API</target>
        </trans-unit>
        <trans-unit id="a05d295ead2e2538cc44366f376d8f774befc43b" translate="yes" xml:space="preserve">
          <source>Android NDK (download links and installation instructions below)</source>
          <target state="translated">Android NDK (아래 링크 다운로드 및 설치 지침)</target>
        </trans-unit>
        <trans-unit id="9f343d8305efd8ee6b8433767144ff4e9f3060ea" translate="yes" xml:space="preserve">
          <source>Android SDK version 26 (compileSdkVersion in &lt;a href=&quot;https://github.com/facebook/react-native/blob/master/ReactAndroid/build.gradle&quot;&gt;&lt;code&gt;build.gradle&lt;/code&gt;&lt;/a&gt;)</source>
          <target state="translated">Android SDK 버전 26 (build.gradle의 &lt;a href=&quot;https://github.com/facebook/react-native/blob/master/ReactAndroid/build.gradle&quot;&gt; &lt;code&gt;build.gradle&lt;/code&gt; &lt;/a&gt; )</target>
        </trans-unit>
        <trans-unit id="5c47570e28a741377a4d405e37b43625f6502fa4" translate="yes" xml:space="preserve">
          <source>Android Studio installs the latest Android SDK by default. Building a React Native app with native code, however, requires the &lt;code&gt;Android 6.0 (Marshmallow)&lt;/code&gt; SDK in particular. Additional Android SDKs can be installed through the SDK Manager in Android Studio.</source>
          <target state="translated">Android Studio는 기본적으로 최신 Android SDK를 설치합니다. 그러나 네이티브 코드로 React Native 앱을 빌드하려면 특히 &lt;code&gt;Android 6.0 (Marshmallow)&lt;/code&gt; SDK가 필요합니다 . Android Studio의 SDK Manager를 통해 추가 Android SDK를 설치할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="119a24ff4b90a19b4f8aad0877a225ac9af2d52f" translate="yes" xml:space="preserve">
          <source>Android Support Repository &amp;gt;= 26 (for Android Support Library)</source>
          <target state="translated">Android 지원 리포지토리&amp;gt; = 26 (Android 지원 라이브러리)</target>
        </trans-unit>
        <trans-unit id="81b9b34cc6f2a09467345d27ebf1c818b61a38e9" translate="yes" xml:space="preserve">
          <source>Android development environment</source>
          <target state="translated">안드로이드 개발 환경</target>
        </trans-unit>
        <trans-unit id="82cd2dec3702f4a6464cccbfa51bc70730077b2d" translate="yes" xml:space="preserve">
          <source>Android only. By default, it is 300ms.</source>
          <target state="translated">안드로이드 전용. 기본적으로 300ms입니다.</target>
        </trans-unit>
        <trans-unit id="7a22278e118a42040b99c4dc90c943ea81d4ab0a" translate="yes" xml:space="preserve">
          <source>Android requires that all apps be digitally signed with a certificate before they can be installed, so to distribute your Android application via &lt;a href=&quot;https://play.google.com/store&quot;&gt;Google Play store&lt;/a&gt;, you'll need to generate a signed release APK. The &lt;a href=&quot;https://developer.android.com/tools/publishing/app-signing.html&quot;&gt;Signing Your Applications&lt;/a&gt; page on Android Developers documentation describes the topic in detail. This guide covers the process in brief, as well as lists the steps required to package the JavaScript bundle.</source>
          <target state="translated">Android에서는 모든 앱을 설치하기 전에 인증서로 디지털 서명해야하므로 &lt;a href=&quot;https://play.google.com/store&quot;&gt;Google Play 스토어&lt;/a&gt; 를 통해 Android 애플리케이션을 배포 하려면 서명 된 릴리스 APK를 생성해야합니다. &lt;a href=&quot;https://developer.android.com/tools/publishing/app-signing.html&quot;&gt;서명 응용 프로그램의&lt;/a&gt; 안드로이드 개발자 문서에 페이지 상세 항목을 설명합니다. 이 안내서는 프로세스를 간략하게 설명하고 JavaScript 번들을 패키지하는 데 필요한 단계를 나열합니다.</target>
        </trans-unit>
        <trans-unit id="39e36f7b43eb5d9efa837b1daa26e7bd56ba4eff" translate="yes" xml:space="preserve">
          <source>Android supports 10k+ different phones and is generalized to support software rendering: the framework architecture and need to generalize across many hardware targets unfortunately means you get less for free relative to iOS. But sometimes, there are things you can improve -- and many times it's not native code's fault at all!</source>
          <target state="translated">안드로이드는 10k + 이상의 다른 전화를 지원하며 소프트웨어 렌더링을 지원하도록 일반화되어 있습니다 : 프레임 워크 아키텍처와 많은 하드웨어 대상에서 일반화해야한다는 것은 불행히도 iOS에 비해 비용이 적게 듭니다. 그러나 때로는 개선 할 수있는 것들이 있습니다. 여러 번 네이티브 코드의 결함이 아닙니다!</target>
        </trans-unit>
        <trans-unit id="8edc25d5c41c7e739c1d05e685c70482b92231b5" translate="yes" xml:space="preserve">
          <source>Android, Platform.isTVOS</source>
          <target state="translated">안드로이드, Platform.isTVOS</target>
        </trans-unit>
        <trans-unit id="aebf2f15fba317dd7435b57168f729ae2f48cd7a" translate="yes" xml:space="preserve">
          <source>Android-only React component used to indicate that the app is loading or there is some activity in the app.</source>
          <target state="translated">앱이로드 중이거나 앱에 일부 활동이 있음을 나타내는 데 사용되는 Android 전용 React 구성 요소입니다.</target>
        </trans-unit>
        <trans-unit id="de9c5b9f226999765b7bfc332e00f3ea1fc3e488" translate="yes" xml:space="preserve">
          <source>Android-only values for &lt;code&gt;ConnectionType&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;ConnectionType&lt;/code&gt; 에 대한 Android 전용 값 :</target>
        </trans-unit>
        <trans-unit id="e12c1d13d502721ea025df651e34d045e40d176a" translate="yes" xml:space="preserve">
          <source>Android-specific</source>
          <target state="translated">Android-specific</target>
        </trans-unit>
        <trans-unit id="58b438d28fa6dd247b7f2f61962f4d45e0c19040" translate="yes" xml:space="preserve">
          <source>Android: Detect hardware back button presses, and programmatically invoke the default back button functionality to exit the app if there are no listeners or if none of the listeners return true.</source>
          <target state="translated">Android : 하드웨어 뒤로 버튼 누름 감지 및 리스너가 없거나 true를 반환하는 수신기가없는 경우 기본적으로 뒤로 버튼 기능을 프로그래밍 방식으로 호출하여 앱을 종료합니다.</target>
        </trans-unit>
        <trans-unit id="e252fcb3b3c73ba40a78e9c929c0e65e7051958d" translate="yes" xml:space="preserve">
          <source>Android: Only supported since Android 5.0 - older versions will ignore this attribute. Please note that additional space will be added &lt;em&gt;around&lt;/em&gt; the glyphs (half on each side), which differs from the iOS rendering. It is possible to emulate the iOS rendering by using layout attributes, e.g. negative margins, as appropriate for your situation.</source>
          <target state="translated">Android : Android 5.0부터 지원됩니다. 이전 버전은이 속성을 무시합니다. iOS 렌더링과 다른 글리프 &lt;em&gt;주위에&lt;/em&gt; 추가 공간이 추가됩니다 (각 측면의 절반). 상황에 따라 음수 여백과 같은 레이아웃 속성을 사용하여 iOS 렌더링을 에뮬레이션 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d24af0c4febad200ecfcee8d6dad59f89faf5c6d" translate="yes" xml:space="preserve">
          <source>Animatable components</source>
          <target state="translated">애니메이션 가능한 구성 요소</target>
        </trans-unit>
        <trans-unit id="da7f27f688d2406ea815b0d94411ae6e147d139d" translate="yes" xml:space="preserve">
          <source>Animate the style change.</source>
          <target state="translated">스타일 변경에 애니메이션을 적용하십시오.</target>
        </trans-unit>
        <trans-unit id="5efbc522088a67f31a5e6714ebb340452a57172d" translate="yes" xml:space="preserve">
          <source>Animate the touchable to a new opacity.</source>
          <target state="translated">터치 가능을 새로운 불투명도로 애니메이션합니다.</target>
        </trans-unit>
        <trans-unit id="45dbdd70502ea39b116a520ceaf2fbd1f05c61d7" translate="yes" xml:space="preserve">
          <source>Animated</source>
          <target state="translated">Animated</target>
        </trans-unit>
        <trans-unit id="c687f70be6954dc09f5b730532adb29619119e0a" translate="yes" xml:space="preserve">
          <source>Animated GIFs</source>
          <target state="translated">애니메이션 GIF</target>
        </trans-unit>
        <trans-unit id="48e5bdd04035feb1d503dd408262067782af0092" translate="yes" xml:space="preserve">
          <source>Animated values are only compatible with one driver so if you use native driver when starting an animation on a value, make sure every animation on that value also uses the native driver.</source>
          <target state="translated">애니메이션 값은 하나의 드라이버와 만 호환되므로 값에서 애니메이션을 시작할 때 기본 드라이버를 사용하는 경우 해당 값의 모든 애니메이션이 기본 드라이버도 사용하는지 확인하십시오.</target>
        </trans-unit>
        <trans-unit id="1daf09cee4c9a1e0a748bcf9f64d09f261d36e36" translate="yes" xml:space="preserve">
          <source>Animated values can also track other values. Just set the &lt;code&gt;toValue&lt;/code&gt; of an animation to another animated value instead of a plain number. For example, a &quot;Chat Heads&quot; animation like the one used by Messenger on Android could be implemented with a &lt;code&gt;spring()&lt;/code&gt; pinned on another animated value, or with &lt;code&gt;timing()&lt;/code&gt; and a &lt;code&gt;duration&lt;/code&gt; of 0 for rigid tracking. They can also be composed with interpolations:</source>
          <target state="translated">애니메이션 값은 다른 값을 추적 할 수도 있습니다. 애니메이션 의 &lt;code&gt;toValue&lt;/code&gt; 를 일반 숫자 대신 다른 애니메이션 값으로 설정하십시오 . 예를 들어, Android에서 Messenger가 사용하는 것과 같은 &quot;Chat Heads&quot;애니메이션 은 다른 애니메이션 값에 고정 된 &lt;code&gt;spring()&lt;/code&gt; , 또는 엄격한 추적을 위해 &lt;code&gt;timing()&lt;/code&gt; 및 &lt;code&gt;duration&lt;/code&gt; 을 0 으로 구현할 수 있습니다 . 보간으로 구성 할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="505d3ff8797e1a6bf379c622243df8684325e754" translate="yes" xml:space="preserve">
          <source>Animated.add()</source>
          <target state="translated">Animated.add()</target>
        </trans-unit>
        <trans-unit id="ced8a48a68d75d7c64b480a5499ad1b7b37231f7" translate="yes" xml:space="preserve">
          <source>Animated.decay()</source>
          <target state="translated">Animated.decay()</target>
        </trans-unit>
        <trans-unit id="09f9d9e7212befef126d5fdc50f8ac27698b026f" translate="yes" xml:space="preserve">
          <source>Animated.delay()</source>
          <target state="translated">Animated.delay()</target>
        </trans-unit>
        <trans-unit id="d8caf79cdf4257443c1b6b097f2b2b44900a173f" translate="yes" xml:space="preserve">
          <source>Animated.diffClamp()</source>
          <target state="translated">Animated.diffClamp()</target>
        </trans-unit>
        <trans-unit id="203a460f1de1bb25de8774682d1da8674894e1f1" translate="yes" xml:space="preserve">
          <source>Animated.divide()</source>
          <target state="translated">Animated.divide()</target>
        </trans-unit>
        <trans-unit id="4a4cbe7e3326f448f56fc22a75d05d5a8c65fb2c" translate="yes" xml:space="preserve">
          <source>Animated.event()</source>
          <target state="translated">Animated.event()</target>
        </trans-unit>
        <trans-unit id="dcd4881c67351593d388a082962748981e62f20d" translate="yes" xml:space="preserve">
          <source>Animated.forkEvent()</source>
          <target state="translated">Animated.forkEvent()</target>
        </trans-unit>
        <trans-unit id="7e5dda553507ab1f32af5fb1525bef8b5ce834d3" translate="yes" xml:space="preserve">
          <source>Animated.loop()</source>
          <target state="translated">Animated.loop()</target>
        </trans-unit>
        <trans-unit id="67914976dd67068a607243070f1d013379609cfc" translate="yes" xml:space="preserve">
          <source>Animated.modulo()</source>
          <target state="translated">Animated.modulo()</target>
        </trans-unit>
        <trans-unit id="ad33ce01e3c5d34f3beaee4e18f4f18b601692e9" translate="yes" xml:space="preserve">
          <source>Animated.multiply()</source>
          <target state="translated">Animated.multiply()</target>
        </trans-unit>
        <trans-unit id="a374bb3f17aea8a695cd2c394830e2153b447ffc" translate="yes" xml:space="preserve">
          <source>Animated.parallel()</source>
          <target state="translated">Animated.parallel()</target>
        </trans-unit>
        <trans-unit id="7ef324eb74926c8c0b06d1d1c41ff5a7879458f9" translate="yes" xml:space="preserve">
          <source>Animated.sequence()</source>
          <target state="translated">Animated.sequence()</target>
        </trans-unit>
        <trans-unit id="2c9ac9c14d8f268d1749a2725bbd9894fb719a20" translate="yes" xml:space="preserve">
          <source>Animated.spring()</source>
          <target state="translated">Animated.spring()</target>
        </trans-unit>
        <trans-unit id="74dcf3199ae6a54d0bd5e63eb7545b4e2fe7a4f4" translate="yes" xml:space="preserve">
          <source>Animated.stagger()</source>
          <target state="translated">Animated.stagger()</target>
        </trans-unit>
        <trans-unit id="7b91507d53a4c1bfda7d9790c5805523b8a2b692" translate="yes" xml:space="preserve">
          <source>Animated.subtract()</source>
          <target state="translated">Animated.subtract()</target>
        </trans-unit>
        <trans-unit id="17f0bc76c15ce3db8c54103ba37f963b5749c0df" translate="yes" xml:space="preserve">
          <source>Animated.timing()</source>
          <target state="translated">Animated.timing()</target>
        </trans-unit>
        <trans-unit id="3cc504dd9cad0fd5bfd495eebca3f8e7bc2bfc77" translate="yes" xml:space="preserve">
          <source>Animated.unforkEvent()</source>
          <target state="translated">Animated.unforkEvent()</target>
        </trans-unit>
        <trans-unit id="ca6dcd341ad002fa9d0a559d4cf7015019876fb9" translate="yes" xml:space="preserve">
          <source>AnimatedGratuitousApp</source>
          <target state="translated">AnimatedGratuitousApp</target>
        </trans-unit>
        <trans-unit id="65fae40a69f32e96f079fa849e5c24d1ac1b0a7a" translate="yes" xml:space="preserve">
          <source>Animates a value according to an analytical spring model based on &lt;a href=&quot;https://en.wikipedia.org/wiki/Harmonic_oscillator#Damped_harmonic_oscillator&quot;&gt;damped harmonic oscillation&lt;/a&gt;. Tracks velocity state to create fluid motions as the &lt;code&gt;toValue&lt;/code&gt; updates, and can be chained together.</source>
          <target state="translated">&lt;a href=&quot;https://en.wikipedia.org/wiki/Harmonic_oscillator#Damped_harmonic_oscillator&quot;&gt;감쇠 고조파 진동을&lt;/a&gt; 기반으로하는 분석 스프링 모델에 따라 값을 애니메이션합니다 . &lt;code&gt;toValue&lt;/code&gt; 가 업데이트 될 때 유체 상태를 생성하기 위해 속도 상태를 추적 하고 함께 연결할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="1171f77e28cc3c5098c84e2d4392fe67d496508b" translate="yes" xml:space="preserve">
          <source>Animates a value along a timed easing curve. The &lt;a href=&quot;easing&quot;&gt;&lt;code&gt;Easing&lt;/code&gt;&lt;/a&gt; module has tons of predefined curves, or you can use your own function.</source>
          <target state="translated">시간제 여유 곡선을 따라 값을 애니메이션합니다. &lt;a href=&quot;easing&quot;&gt; &lt;code&gt;Easing&lt;/code&gt; &lt;/a&gt; 모듈은 미리 정의 된 곡선의 톤을 가지고, 또는 당신은 당신의 자신의 기능을 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="0364cac8675d55bbeaa3c83d28471ae6f28697b5" translate="yes" xml:space="preserve">
          <source>Animates a value from an initial velocity to zero based on a decay coefficient.</source>
          <target state="translated">감쇠 계수에 따라 초기 속도에서 0까지의 값을 애니메이션합니다.</target>
        </trans-unit>
        <trans-unit id="9acc7e79a762d1e6a015ef7397c215154f9575a2" translate="yes" xml:space="preserve">
          <source>Animating the size of an image drops UI thread FPS</source>
          <target state="translated">이미지 크기에 애니메이션을 적용하면 UI 스레드 FPS가 삭제됩니다.</target>
        </trans-unit>
        <trans-unit id="c77dcdedc0f40e8dac08a08c8bef7255abb90e75" translate="yes" xml:space="preserve">
          <source>Animations</source>
          <target state="translated">Animations</target>
        </trans-unit>
        <trans-unit id="55b89f417cc7a3500208d5eb659d2d0456937a5d" translate="yes" xml:space="preserve">
          <source>Animations are heavily configurable. Custom and predefined easing functions, delays, durations, decay factors, spring constants, and more can all be tweaked depending on the type of animation.</source>
          <target state="translated">애니메이션은 크게 구성 할 수 있습니다. 애니메이션 유형에 따라 사용자 정의 및 사전 정의 된 여유 함수, 지연, 지속 시간, 감쇠 계수, 스프링 상수 등을 모두 조정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="36498870d4bf61bd5ef374b97c61df4bdef4b903" translate="yes" xml:space="preserve">
          <source>Animations are started by calling &lt;code&gt;start()&lt;/code&gt; on your animation. &lt;code&gt;start()&lt;/code&gt; takes a completion callback that will be called when the animation is done. If the animation finished running normally, the completion callback will be invoked with &lt;code&gt;{finished: true}&lt;/code&gt;. If the animation is done because &lt;code&gt;stop()&lt;/code&gt; was called on it before it could finish (e.g. because it was interrupted by a gesture or another animation), then it will receive &lt;code&gt;{finished: false}&lt;/code&gt;.</source>
          <target state="translated">애니메이션에서 &lt;code&gt;start()&lt;/code&gt; 를 호출하면 애니메이션이 시작됩니다 . &lt;code&gt;start()&lt;/code&gt; 는 애니메이션이 완료 될 때 호출되는 완료 콜백을받습니다. 애니메이션 실행이 정상적으로 완료되면 &lt;code&gt;{finished: true}&lt;/code&gt; 완료 콜백이 호출됩니다 . 애니메이션이 완료되기 전에 &lt;code&gt;stop()&lt;/code&gt; 이 호출되어 (예 : 제스처 또는 다른 애니메이션에 의해 중단되어) 애니메이션이 &lt;code&gt;{finished: false}&lt;/code&gt; 되면 {finished : false}를 받습니다.</target>
        </trans-unit>
        <trans-unit id="4e45e759ee5e37eccbd44f60396ce46bc7e41409" translate="yes" xml:space="preserve">
          <source>Animations are very important to create a great user experience. Stationary objects must overcome inertia as they start moving. Objects in motion have momentum and rarely come to a stop immediately. Animations allow you to convey physically believable motion in your interface.</source>
          <target state="translated">훌륭한 사용자 경험을 위해서는 애니메이션이 매우 중요합니다. 정지 된 물체는 움직이기 시작할 때 관성을 극복해야합니다. 움직이는 물체는 운동량을 가지므로 거의 즉시 멈추지 않습니다. 애니메이션을 사용하면 인터페이스에서 물리적으로 믿을 수있는 동작을 전달할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d6450d7a7d867e4140d1f5621f6007cc166b9bf7" translate="yes" xml:space="preserve">
          <source>Animations can also be chained together simply by setting the &lt;code&gt;toValue&lt;/code&gt; of one animation to be another &lt;code&gt;Animated.Value&lt;/code&gt;. See &lt;a href=&quot;animations#tracking-dynamic-values&quot;&gt;Tracking dynamic values&lt;/a&gt; in the Animations guide.</source>
          <target state="translated">한 애니메이션의 &lt;code&gt;toValue&lt;/code&gt; 를 다른 &lt;code&gt;Animated.Value&lt;/code&gt; 로 설정하여 애니메이션을 간단히 연결할 수도 있습니다 . 애니메이션 안내서의 &lt;a href=&quot;animations#tracking-dynamic-values&quot;&gt;동적 값 추적을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="79feb872f385ec41c1d5df5b989889284cc475e9" translate="yes" xml:space="preserve">
          <source>Animations can also be combined in complex ways using composition functions:</source>
          <target state="translated">컴포지션 함수를 사용하여 애니메이션을 복잡한 방식으로 결합 할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="3b98ae9b72b2b2c18beb39da3d9023f90f1eaa01" translate="yes" xml:space="preserve">
          <source>Animations can be combined and played in sequence or in parallel. Sequential animations can play immediately after the previous animation has finished, or they can start after a specified delay. The &lt;code&gt;Animated&lt;/code&gt; API provides several methods, such as &lt;code&gt;sequence()&lt;/code&gt; and &lt;code&gt;delay()&lt;/code&gt;, each of which simply take an array of animations to execute and automatically calls &lt;code&gt;start()&lt;/code&gt;/&lt;code&gt;stop()&lt;/code&gt; as needed.</source>
          <target state="translated">애니메이션은 순서대로 또는 병렬로 결합하여 재생할 수 있습니다. 순차적 애니메이션은 이전 애니메이션이 끝난 직후에 재생되거나 지정된 지연 후에 시작할 수 있습니다. &lt;code&gt;Animated&lt;/code&gt; API는 여러 가지 방법 등 제공 &lt;code&gt;sequence()&lt;/code&gt; 및 &lt;code&gt;delay()&lt;/code&gt; 단순히 실행 자동 호출 할 애니메이션의 배열을 가지고, 각각의 &lt;code&gt;start()&lt;/code&gt; / &lt;code&gt;stop()&lt;/code&gt; 필요로한다.</target>
        </trans-unit>
        <trans-unit id="4809aa0328d56ab70f72d54d2955afe4a6dbeea2" translate="yes" xml:space="preserve">
          <source>Animations#requestAnimationFrame</source>
          <target state="translated">Animations#requestAnimationFrame</target>
        </trans-unit>
        <trans-unit id="f03768be9ac019705780bbcee81c3a5b270398f9" translate="yes" xml:space="preserve">
          <source>Animations#setNativeProps</source>
          <target state="translated">Animations#setNativeProps</target>
        </trans-unit>
        <trans-unit id="877d801bd6d113fe98e54b06ea41c02c6804bbb8" translate="yes" xml:space="preserve">
          <source>Annotation &lt;code&gt;@ReactProp&lt;/code&gt; has one obligatory argument &lt;code&gt;name&lt;/code&gt; of type &lt;code&gt;String&lt;/code&gt;. Name assigned to the &lt;code&gt;@ReactProp&lt;/code&gt; annotation linked to the setter method is used to reference the property on JS side.</source>
          <target state="translated">주석 &lt;code&gt;@ReactProp&lt;/code&gt; 에는 &lt;code&gt;String&lt;/code&gt; 유형의 필수 인수 &lt;code&gt;name&lt;/code&gt; 이 하나 있습니다. setter 메소드에 링크 된 &lt;code&gt;@ReactProp&lt;/code&gt; 주석에 지정된 이름 은 JS 측의 특성을 참조하는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="645a5dfadaaf392ed6b4446887d107ed8fe6019e" translate="yes" xml:space="preserve">
          <source>Another example is responding to touches: if you are doing work across multiple frames on the JavaScript thread, you might notice a delay in responding to &lt;code&gt;TouchableOpacity&lt;/code&gt;, for example. This is because the JavaScript thread is busy and cannot process the raw touch events sent over from the main thread. As a result, &lt;code&gt;TouchableOpacity&lt;/code&gt; cannot react to the touch events and command the native view to adjust its opacity.</source>
          <target state="translated">또 다른 예는 터치에 응답합니다. JavaScript 스레드에서 여러 프레임에 걸쳐 작업을 수행하는 경우 &lt;code&gt;TouchableOpacity&lt;/code&gt; 에 응답하는 데 지연이 발생할 수 있습니다 ( 예 : TouchableOpacity ). JavaScript 스레드가 사용 중이고 기본 스레드에서 전송 된 원시 터치 이벤트를 처리 할 수 ​​없기 때문입니다. 결과적으로 &lt;code&gt;TouchableOpacity&lt;/code&gt; 는 터치 이벤트에 반응 할 수 없으며 기본보기에 불투명도를 조정하도록 명령 할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="9bd16bd2b361f58e81a3a116772f71c9fd91c29a" translate="yes" xml:space="preserve">
          <source>Another gesture commonly used in mobile apps is the swipe or pan. This gesture allows the user to scroll through a list of items, or swipe through pages of content. In order to handle these and other gestures, we'll learn &lt;a href=&quot;using-a-scrollview&quot;&gt;how to use a ScrollView&lt;/a&gt; next.</source>
          <target state="translated">모바일 앱에서 일반적으로 사용되는 또 다른 제스처는 스 와이프 또는 팬입니다. 이 동작을 통해 사용자는 항목 목록을 스크롤하거나 콘텐츠 페이지를 스 와이프 할 수 있습니다. 이러한 제스처 및 기타 제스처를 처리하기 위해 다음 &lt;a href=&quot;using-a-scrollview&quot;&gt;에 ScrollView를 사용하는 방법을&lt;/a&gt; 배웁니다 .</target>
        </trans-unit>
        <trans-unit id="4035eeb54c1e45afe78501009d55880ef0d6a9af" translate="yes" xml:space="preserve">
          <source>Another responder is already active and will not release it to that &lt;code&gt;View&lt;/code&gt; asking to be the responder.</source>
          <target state="translated">다른 응답자가 이미 활성화 되어 있으며 응답자 요청을 해당 &lt;code&gt;View&lt;/code&gt; 해제하지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="851c8725e140140ad7c343787ce5709b06446736" translate="yes" xml:space="preserve">
          <source>Another very common use case of &lt;code&gt;setNativeProps&lt;/code&gt; is to clear the value of a TextInput. The &lt;code&gt;controlled&lt;/code&gt; prop of TextInput can sometimes drop characters when the &lt;code&gt;bufferDelay&lt;/code&gt; is low and the user types very quickly. Some developers prefer to skip this prop entirely and instead use &lt;code&gt;setNativeProps&lt;/code&gt; to directly manipulate the TextInput value when necessary. For example, the following code demonstrates clearing the input when you tap a button:</source>
          <target state="translated">&lt;code&gt;setNativeProps&lt;/code&gt; 의 또 다른 일반적인 사용 사례 는 TextInput의 값을 지우는 것입니다. &lt;code&gt;bufferDelay&lt;/code&gt; 가 낮고 사용자가 매우 빠르게 입력 할 때 TextInput 의 &lt;code&gt;controlled&lt;/code&gt; 소품이 때때로 문자를 떨어 뜨릴 수 있습니다 . 일부 개발자는이 소품을 완전히 건너 뛰고 대신 &lt;code&gt;setNativeProps&lt;/code&gt; 를 사용 하여 필요한 경우 TextInput 값을 직접 조작하는 것을 선호 합니다 . 예를 들어 다음 코드는 버튼을 누를 때 입력을 지우는 방법을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="44e1be6b44cd4717015f2daae07956f18a26a3f3" translate="yes" xml:space="preserve">
          <source>Another way to profile JavaScript is to use the Chrome profiler while debugging. This won't give you accurate results as the code is running in Chrome but will give you a general idea of where bottlenecks might be. Run the profiler under Chrome's &lt;code&gt;Performance&lt;/code&gt; tab. A flame graph will appear under &lt;code&gt;User Timing&lt;/code&gt;. To view more details in tabular format, click at the &lt;code&gt;Bottom Up&lt;/code&gt; tab below and then select &lt;code&gt;DedicatedWorker Thread&lt;/code&gt; at the top left menu.</source>
          <target state="translated">JavaScript를 프로파일 링하는 다른 방법은 디버깅하는 동안 Chrome 프로파일 러를 사용하는 것입니다. 코드가 Chrome에서 실행될 때 정확한 결과를 제공하지는 않지만 병목 현상이 발생하는 위치에 대한 일반적인 아이디어를 제공합니다. Chrome의 &lt;code&gt;Performance&lt;/code&gt; 탭 에서 프로파일 러를 실행 하십시오. 불꽃 &lt;code&gt;User Timing&lt;/code&gt; 아래에 나타납니다 . 테이블 형식으로 자세한 내용을 보려면 아래 &lt;code&gt;Bottom Up&lt;/code&gt; 탭을 클릭 한 다음 왼쪽 상단 메뉴에서 &lt;code&gt;DedicatedWorker Thread&lt;/code&gt; 를 선택하십시오 .</target>
        </trans-unit>
        <trans-unit id="b596718c904f9b501d94c971887a679c2829e445" translate="yes" xml:space="preserve">
          <source>App Extensions</source>
          <target state="translated">앱 확장</target>
        </trans-unit>
        <trans-unit id="b09c6ece1a3d3fcafa4019157dbbce31ee676694" translate="yes" xml:space="preserve">
          <source>App States</source>
          <target state="translated">앱 상태</target>
        </trans-unit>
        <trans-unit id="4dc57876bae07f5406f7985ecbdd3b69f48ec1e7" translate="yes" xml:space="preserve">
          <source>App Transport Security is a security feature introduced in iOS 9 that rejects all HTTP requests that are not sent over HTTPS. This can result in HTTP traffic being blocked, including the developer React Native server. ATS is disabled for &lt;code&gt;localhost&lt;/code&gt; by default in React Native projects in order to make development easier.</source>
          <target state="translated">App Transport Security는 iOS 9에 도입 된 보안 기능으로 HTTPS를 통해 전송되지 않은 모든 HTTP 요청을 거부합니다. 이로 인해 개발자 React Native 서버를 포함하여 HTTP 트래픽이 차단 될 수 있습니다. React Native 프로젝트에서는 &lt;code&gt;localhost&lt;/code&gt; 에 대해 ATS가 기본적으로 비활성화 되어있어 개발이 더 쉽습니다.</target>
        </trans-unit>
        <trans-unit id="e37a1f4ed2e289d66a0af5b68f21ccc575ec98a4" translate="yes" xml:space="preserve">
          <source>App Transport Security is good for your users. Make sure to re-enable it prior to releasing your app for production.</source>
          <target state="translated">App Transport Security는 사용자에게 적합합니다. 프로덕션 용 앱을 출시하기 전에 다시 활성화해야합니다.</target>
        </trans-unit>
        <trans-unit id="2b42b464cdd2bf187496fb03ad8f4fbfae50d9e4" translate="yes" xml:space="preserve">
          <source>App extensions let you provide custom functionality and content outside of your main app. There are different types of app extensions on iOS, and they are all covered in the &lt;a href=&quot;https://developer.apple.com/library/content/documentation/General/Conceptual/ExtensibilityPG/index.html#//apple_ref/doc/uid/TP40014214-CH20-SW1&quot;&gt;App Extension Programming Guide&lt;/a&gt;. In this guide, we'll briefly cover how you may take advantage of app extensions on iOS.</source>
          <target state="translated">추가 앱 정보를 사용하면 기본 앱 외부에서 맞춤 기능과 콘텐츠를 제공 할 수 있습니다. iOS에는 다양한 유형의 앱 확장이 있으며 모두 &lt;a href=&quot;https://developer.apple.com/library/content/documentation/General/Conceptual/ExtensibilityPG/index.html#//apple_ref/doc/uid/TP40014214-CH20-SW1&quot;&gt;앱 확장 프로그래밍 가이드&lt;/a&gt; 에서 다룹니다 . 이 가이드에서는 iOS에서 추가 앱 정보를 활용하는 방법에 대해 간략하게 설명합니다.</target>
        </trans-unit>
        <trans-unit id="1fb948289cb08389afe1d053e65eb27722e4d0f2" translate="yes" xml:space="preserve">
          <source>AppRegistry</source>
          <target state="translated">AppRegistry</target>
        </trans-unit>
        <trans-unit id="4e3790bd33e3b960ecf5df793f3b2e2296c38b43" translate="yes" xml:space="preserve">
          <source>AppRegistry.getAppKeys()</source>
          <target state="translated">AppRegistry.getAppKeys()</target>
        </trans-unit>
        <trans-unit id="76c635be39405a1c76c92a04c0bda42249f78d05" translate="yes" xml:space="preserve">
          <source>AppRegistry.getRegistry()</source>
          <target state="translated">AppRegistry.getRegistry()</target>
        </trans-unit>
        <trans-unit id="aef3901f647d3d433c378e040fe5656b82efcd7e" translate="yes" xml:space="preserve">
          <source>AppRegistry.getRunnable()</source>
          <target state="translated">AppRegistry.getRunnable()</target>
        </trans-unit>
        <trans-unit id="93e30f9a55a64523bce0b68d6d2b436855b82bd0" translate="yes" xml:space="preserve">
          <source>AppRegistry.getSectionKeys()</source>
          <target state="translated">AppRegistry.getSectionKeys()</target>
        </trans-unit>
        <trans-unit id="a8505618a6e745d10f525c3af7f24571fac88b8d" translate="yes" xml:space="preserve">
          <source>AppRegistry.getSections()</source>
          <target state="translated">AppRegistry.getSections()</target>
        </trans-unit>
        <trans-unit id="42c1d3bb65daa9de3cdb03f075bc03e0efeee059" translate="yes" xml:space="preserve">
          <source>AppRegistry.registerComponent()</source>
          <target state="translated">AppRegistry.registerComponent()</target>
        </trans-unit>
        <trans-unit id="d94e82e8a9a41fbca2f92698f8a93c580278e83f" translate="yes" xml:space="preserve">
          <source>AppRegistry.registerConfig()</source>
          <target state="translated">AppRegistry.registerConfig()</target>
        </trans-unit>
        <trans-unit id="4a9c9e4b8c20f29bd0f79d3909aa63631e516ebc" translate="yes" xml:space="preserve">
          <source>AppRegistry.registerHeadlessTask()</source>
          <target state="translated">AppRegistry.registerHeadlessTask()</target>
        </trans-unit>
        <trans-unit id="7bb00aee94e0d17e8b25acf042c20f72b6e369aa" translate="yes" xml:space="preserve">
          <source>AppRegistry.registerRunnable()</source>
          <target state="translated">AppRegistry.registerRunnable()</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
