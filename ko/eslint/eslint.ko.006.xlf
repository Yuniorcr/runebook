<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="eslint">
    <body>
      <group id="eslint">
        <trans-unit id="98df4bc6fa104f9bb3d9aa58f24400b4ed78fce2" translate="yes" xml:space="preserve">
          <source>This rule enforces consistent spacing before and after commas in variable declarations, array literals, object literals, function parameters, and sequences.</source>
          <target state="translated">이 규칙은 변수 선언, 배열 리터럴, 객체 리터럴, 함수 매개 변수 및 시퀀스에서 쉼표 앞뒤에 일정한 간격을 적용합니다.</target>
        </trans-unit>
        <trans-unit id="0169481661b301da11577f8f07f4bc6e9cbac18b" translate="yes" xml:space="preserve">
          <source>This rule enforces consistent spacing between keys and values in object literal properties. In the case of long lines, it is acceptable to add a new line wherever whitespace is allowed.</source>
          <target state="translated">이 규칙은 객체 리터럴 속성에서 키와 값 사이에 일정한 간격을 유지합니다. 긴 줄의 경우 공백이 허용되는 곳에 새 줄을 추가 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c0f2ba86bbe27d84065f88fc40130b40923b309e" translate="yes" xml:space="preserve">
          <source>This rule enforces consistent spacing inside an open block token and the next token on the same line. This rule also enforces consistent spacing inside a close block token and previous token on the same line.</source>
          <target state="translated">이 규칙은 동일한 블록에서 열린 블록 토큰과 다음 토큰 내에서 일정한 간격을 유지합니다. 이 규칙은 또한 닫기 블록 토큰과 동일한 행의 이전 토큰 내에서 일정한 간격을 유지합니다.</target>
        </trans-unit>
        <trans-unit id="2f13854e69ca2deaa522c152aaf7bd0dd0713f47" translate="yes" xml:space="preserve">
          <source>This rule enforces consistent spacing inside array brackets.</source>
          <target state="translated">이 규칙은 배열 괄호 안에 일정한 간격을 유지합니다.</target>
        </trans-unit>
        <trans-unit id="0c0ca4e3390fdfbc5ad1498ea9a232e65edb5d66" translate="yes" xml:space="preserve">
          <source>This rule enforces consistent spacing inside braces of object literals, destructuring assignments, and import/export specifiers.</source>
          <target state="translated">이 규칙은 객체 리터럴의 중괄호 안에 할당 간격을 지정하고 할당을 구조화하며 가져 오기 / 내보내기 지정자를 적용합니다.</target>
        </trans-unit>
        <trans-unit id="6d043db0d1826295530e2f014a6d61ea421394ad" translate="yes" xml:space="preserve">
          <source>This rule enforces consistent spacing inside computed property brackets.</source>
          <target state="translated">이 규칙은 계산 된 속성 대괄호 안에 일정한 간격을 적용합니다.</target>
        </trans-unit>
        <trans-unit id="96c5f8bf2c347a8c17cc9bc88351a31a250cb1dd" translate="yes" xml:space="preserve">
          <source>This rule enforces consistent use of semicolons.</source>
          <target state="translated">이 규칙은 세미콜론의 일관된 사용을 강제합니다.</target>
        </trans-unit>
        <trans-unit id="a59f3959596b245a73594e6be551df468e1d0019" translate="yes" xml:space="preserve">
          <source>This rule enforces consistent use of trailing commas in object and array literals.</source>
          <target state="translated">이 규칙은 객체 및 배열 리터럴에서 후행 쉼표를 일관되게 사용하도록합니다.</target>
        </trans-unit>
        <trans-unit id="531a02291fc6e588ae212b7576b1a3890024effd" translate="yes" xml:space="preserve">
          <source>This rule enforces default parameters to be the last of parameters.</source>
          <target state="translated">이 규칙은 기본 매개 변수가 마지막 매개 변수가되도록합니다.</target>
        </trans-unit>
        <trans-unit id="5db3f9b56f56672b9a3126a59dac7ef87bdfc4fe" translate="yes" xml:space="preserve">
          <source>This rule enforces line breaks after opening and before closing array brackets.</source>
          <target state="translated">이 규칙은 배열 괄호를 열고 닫기 전에 줄 바꿈을 시행합니다.</target>
        </trans-unit>
        <trans-unit id="f2049a535cbc77192d993c38ebac6ec6175c4b5c" translate="yes" xml:space="preserve">
          <source>This rule enforces line breaks between arguments of a function call.</source>
          <target state="translated">이 규칙은 함수 호출의 인수 사이에 줄 바꿈을 적용합니다.</target>
        </trans-unit>
        <trans-unit id="e7ac9021b1e0472e05a8e46e25b3636bcc7f0646" translate="yes" xml:space="preserve">
          <source>This rule enforces line breaks between array elements.</source>
          <target state="translated">이 규칙은 배열 요소 사이에 줄 바꿈을 적용합니다.</target>
        </trans-unit>
        <trans-unit id="1c720f0d003344dc99467c044b35512793450286" translate="yes" xml:space="preserve">
          <source>This rule enforces or disallows newlines between operands of a ternary expression. Note: The location of the operators is not enforced by this rule. Please see the &lt;a href=&quot;operator-linebreak&quot;&gt;operator-linebreak&lt;/a&gt; rule if you are interested in enforcing the location of the operators themselves.</source>
          <target state="translated">이 규칙은 삼항 표현식의 피연산자 사이에 줄 바꿈을 시행하거나 허용하지 않습니다. 참고 : 운영자의 위치는이 규칙에 의해 시행되지 않습니다. 운영자 자신의 위치를 ​​적용하려는 경우 &lt;a href=&quot;operator-linebreak&quot;&gt;운영자 줄 바꿈&lt;/a&gt; 규칙을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="2ded924af44d0b97c4617f94c5ba97a87c7c8944" translate="yes" xml:space="preserve">
          <source>This rule enforces parentheses around arrow function parameters regardless of arity. For example:</source>
          <target state="translated">이 규칙은 arity에 관계없이 화살표 함수 매개 변수를 괄호로 묶습니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="bebe56e90b7c07354c98262213dfb3c803ec31b1" translate="yes" xml:space="preserve">
          <source>This rule enforces spacing around the &lt;code&gt;*&lt;/code&gt; in &lt;code&gt;yield*&lt;/code&gt; expressions.</source>
          <target state="translated">이 규칙은 &lt;code&gt;*&lt;/code&gt; 에서 &lt;code&gt;yield*&lt;/code&gt; 표현식 주위의 간격을 강제 합니다.</target>
        </trans-unit>
        <trans-unit id="9f888babe47c50998c63a687a9d3e9e18eafd108" translate="yes" xml:space="preserve">
          <source>This rule enforces spacing around the colon in object literal properties. It can verify each property individually, or it can ensure horizontal alignment of adjacent properties in an object literal.</source>
          <target state="translated">이 규칙은 객체 리터럴 속성에서 콜론 주위에 간격을 적용합니다. 각 속성을 개별적으로 확인하거나 객체 리터럴에서 인접한 속성을 가로로 정렬 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="032e73c7fd1f30f1da604d9f589b30f380222412" translate="yes" xml:space="preserve">
          <source>This rule enforces that a return statement is present in property getters.</source>
          <target state="translated">이 규칙은 속성 getter에 return 문이 존재하도록합니다.</target>
        </trans-unit>
        <trans-unit id="ac3a9a1350618d263f65980c27c390928db1e9dd" translate="yes" xml:space="preserve">
          <source>This rule enforces that each file may contain only a particular number of classes and no more.</source>
          <target state="translated">이 규칙은 각 파일이 특정 수의 클래스 만 포함 할 수 있도록합니다.</target>
        </trans-unit>
        <trans-unit id="83dae79a63a7a63a48d5387400e7d317de58b017" translate="yes" xml:space="preserve">
          <source>This rule enforces that the &lt;code&gt;*&lt;/code&gt; is either placed next to the &lt;code&gt;function&lt;/code&gt; keyword or the name of the function. The single option for this rule is a string specifying the placement of the asterisk. For this option you may pass &lt;code&gt;&quot;start&quot;&lt;/code&gt;, &lt;code&gt;&quot;middle&quot;&lt;/code&gt; or &lt;code&gt;&quot;end&quot;&lt;/code&gt;. The default is &lt;code&gt;&quot;end&quot;&lt;/code&gt;.</source>
          <target state="translated">이 규칙은 &lt;code&gt;*&lt;/code&gt; 가 &lt;code&gt;function&lt;/code&gt; 키워드 또는 함수 이름 옆에 위치 하도록 강제합니다 . 이 규칙의 단일 옵션은 별표 배치를 지정하는 문자열입니다. 이 옵션의 경우 &lt;code&gt;&quot;start&quot;&lt;/code&gt; , &lt;code&gt;&quot;middle&quot;&lt;/code&gt; 또는 &lt;code&gt;&quot;end&quot;&lt;/code&gt; 를 전달할 수 있습니다 . 기본값은 &lt;code&gt;&quot;end&quot;&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="f15cceed3a9ebc006b6f485b6d91b005b23ab944" translate="yes" xml:space="preserve">
          <source>This rule enforces the consistent use of either backticks, double, or single quotes.</source>
          <target state="translated">이 규칙은 백틱, 큰 따옴표 또는 작은 따옴표를 일관되게 사용합니다.</target>
        </trans-unit>
        <trans-unit id="47d291563f5b8d3c1ba3c39163caddeb773cd7b3" translate="yes" xml:space="preserve">
          <source>This rule enforces the consistent use of either double or single quotes in JSX attributes.</source>
          <target state="translated">이 규칙은 JSX 속성에서 큰 따옴표 나 작은 따옴표를 일관되게 사용합니다.</target>
        </trans-unit>
        <trans-unit id="73b3cab87eff32518800f9ef2b81d5e396da2f90" translate="yes" xml:space="preserve">
          <source>This rule enforces the use of the shorthand syntax. This applies to all methods (including generators) defined in object literals and any properties defined where the key name matches name of the assigned variable.</source>
          <target state="translated">이 규칙은 속기 구문을 사용합니다. 이는 객체 리터럴에 정의 된 모든 메소드 (생성기 포함) 및 키 이름이 지정된 변수의 이름과 일치하는 곳에 정의 된 모든 특성에 적용됩니다.</target>
        </trans-unit>
        <trans-unit id="63e2f1f4c345ee69dced3e8e0c71c623687568b8" translate="yes" xml:space="preserve">
          <source>This rule enforces two things about variables with the designated alias names for &lt;code&gt;this&lt;/code&gt;:</source>
          <target state="translated">이 규칙은 지정된 별명 이름을 가진 변수에 대해 두 가지 사항을 시행 &lt;code&gt;this&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="444d122a441ceea0b5a30eb297b723a3dc9f2033" translate="yes" xml:space="preserve">
          <source>This rule enforces usage of &lt;code&gt;return&lt;/code&gt; statement in callbacks of array's methods.</source>
          <target state="translated">이 규칙 은 배열 메소드의 콜백에서 &lt;code&gt;return&lt;/code&gt; 문 사용을 강제합니다 .</target>
        </trans-unit>
        <trans-unit id="238a9c1c0e3410b1c4e383ab10436cb8d26cbdb6" translate="yes" xml:space="preserve">
          <source>This rule enforces valid and consistent JSDoc comments. It reports any of the following problems:</source>
          <target state="translated">이 규칙은 유효하고 일관된 JSDoc 주석을 시행합니다. 다음 문제점 중 하나를보고합니다.</target>
        </trans-unit>
        <trans-unit id="f9d94e7695ada004444bae53825e6f669fd2ed50" translate="yes" xml:space="preserve">
          <source>This rule enforces variables to be declared either together or separately per function ( for &lt;code&gt;var&lt;/code&gt;) or block (for &lt;code&gt;let&lt;/code&gt; and &lt;code&gt;const&lt;/code&gt;) scope.</source>
          <target state="translated">이 규칙은 변수가 함수별로 ( &lt;code&gt;var&lt;/code&gt; 의 경우 ) 또는 블록 ( &lt;code&gt;let&lt;/code&gt; 과 &lt;code&gt;const&lt;/code&gt; 의 경우 ) 범위에 따라 함께 또는 별도로 선언되도록합니다 .</target>
        </trans-unit>
        <trans-unit id="18088de0cb810de950375f85f0f09acbaedce552" translate="yes" xml:space="preserve">
          <source>This rule expects that when you're using the callback pattern in Node.js you'll handle the error.</source>
          <target state="translated">이 규칙은 Node.js에서 콜백 패턴을 사용할 때 오류를 처리 할 것으로 예상합니다.</target>
        </trans-unit>
        <trans-unit id="6d08f014599aaed138d7f0531cd956e14e5af7cf" translate="yes" xml:space="preserve">
          <source>This rule finds callback functions of the following methods, then checks usage of &lt;code&gt;return&lt;/code&gt; statement.</source>
          <target state="translated">이 규칙은 다음 메소드의 콜백 함수를 찾은 다음 &lt;code&gt;return&lt;/code&gt; 문의 사용법을 확인합니다 .</target>
        </trans-unit>
        <trans-unit id="4de015a86c0eeee96f453acb9aeb00629487256a" translate="yes" xml:space="preserve">
          <source>This rule finds references which are inside of loop conditions, then checks the variables of those references are modified in the loop.</source>
          <target state="translated">이 규칙은 루프 조건 내에있는 참조를 찾은 다음 해당 참조의 변수가 루프에서 수정되었는지 확인합니다.</target>
        </trans-unit>
        <trans-unit id="7dc5c04a1930c4229e3eef900e2e631d84f34e42" translate="yes" xml:space="preserve">
          <source>This rule flags class constructors that can be safely removed without changing how the class works.</source>
          <target state="translated">이 규칙은 클래스 작동 방식을 변경하지 않고 안전하게 제거 할 수있는 클래스 생성자를 표시합니다.</target>
        </trans-unit>
        <trans-unit id="5d5510d64b1f962d0f715e17acd7b01cdebbb284" translate="yes" xml:space="preserve">
          <source>This rule flags escapes that can be safely removed without changing behavior.</source>
          <target state="translated">이 규칙은 동작을 변경하지 않고 안전하게 제거 할 수있는 이스케이프 플래그입니다.</target>
        </trans-unit>
        <trans-unit id="66515436d54a3d03c45800e5600fc63e0c805a04" translate="yes" xml:space="preserve">
          <source>This rule forbids the use of the comma operator, with the following exceptions:</source>
          <target state="translated">이 규칙은 다음을 제외하고 쉼표 연산자 사용을 금지합니다.</target>
        </trans-unit>
        <trans-unit id="752f68160927832b760bc0ca5bf1d1b31d519295" translate="yes" xml:space="preserve">
          <source>This rule generates warnings for generator functions that do not have the &lt;code&gt;yield&lt;/code&gt; keyword.</source>
          <target state="translated">이 규칙은 &lt;code&gt;yield&lt;/code&gt; 키워드 가없는 생성기 함수에 대한 경고를 생성합니다 .</target>
        </trans-unit>
        <trans-unit id="6e4baecfeba69217207c672a7f95b5eb1b32dcb2" translate="yes" xml:space="preserve">
          <source>This rule has 2 options that are boolean value.</source>
          <target state="translated">이 규칙에는 부울 값인 2 가지 옵션이 있습니다.</target>
        </trans-unit>
        <trans-unit id="9b81f45580b708ab900651667d8eac17ae2aa1cd" translate="yes" xml:space="preserve">
          <source>This rule has 2 options.</source>
          <target state="translated">이 규칙에는 2 가지 옵션이 있습니다.</target>
        </trans-unit>
        <trans-unit id="7f7a94f6d0862ad4b541f1ff11cc9e1506acb8a8" translate="yes" xml:space="preserve">
          <source>This rule has a mixed option:</source>
          <target state="translated">이 규칙에는 혼합 옵션이 있습니다.</target>
        </trans-unit>
        <trans-unit id="3a7b49741fdcbe3227285811a2145a024828ed28" translate="yes" xml:space="preserve">
          <source>This rule has a number or object option:</source>
          <target state="translated">이 규칙에는 숫자 또는 객체 옵션이 있습니다.</target>
        </trans-unit>
        <trans-unit id="bfc55f7c0830b8711cbf13cef899c1b734bd5933" translate="yes" xml:space="preserve">
          <source>This rule has a numeric option (defaulted to 1) to specify the maximum number of classes.</source>
          <target state="translated">이 규칙에는 최대 클래스 수를 지정하기위한 숫자 옵션 (기본값은 1)이 있습니다.</target>
        </trans-unit>
        <trans-unit id="29f7ddc0e749392a26648c1cf72ed0933f445be7" translate="yes" xml:space="preserve">
          <source>This rule has a shorthand integer option for the &lt;code&gt;&quot;min&quot;&lt;/code&gt; object property.</source>
          <target state="translated">이 규칙에는 &lt;code&gt;&quot;min&quot;&lt;/code&gt; 객체 속성에 대한 짧은 정수 옵션이 있습니다.</target>
        </trans-unit>
        <trans-unit id="f9b6b247413500cee0268031ac478171284bc1b7" translate="yes" xml:space="preserve">
          <source>This rule has a single object option:</source>
          <target state="translated">이 규칙에는 단일 객체 옵션이 있습니다.</target>
        </trans-unit>
        <trans-unit id="f9cb8fc4aaf5947c491c622a34259791e36e56d8" translate="yes" xml:space="preserve">
          <source>This rule has a single option, which can either be a string or an object.</source>
          <target state="translated">이 규칙에는 단일 옵션이 있으며 문자열 또는 객체 일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5f94691796172a25ab21a96670f27f9ad03de85a" translate="yes" xml:space="preserve">
          <source>This rule has a single string option:</source>
          <target state="translated">이 규칙에는 단일 문자열 옵션이 있습니다.</target>
        </trans-unit>
        <trans-unit id="b3f7cb49c96b78d738e5570bbaae300561ede995" translate="yes" xml:space="preserve">
          <source>This rule has a string option and an object one.</source>
          <target state="translated">이 규칙에는 문자열 옵션과 객체 규칙이 있습니다.</target>
        </trans-unit>
        <trans-unit id="1fdc543f514a45dc35817bd8a107deb20cf43858" translate="yes" xml:space="preserve">
          <source>This rule has a string option and an object option.</source>
          <target state="translated">이 규칙에는 문자열 옵션과 객체 옵션이 있습니다.</target>
        </trans-unit>
        <trans-unit id="15009c7b86491fb0cd854bebe75b417b85f21787" translate="yes" xml:space="preserve">
          <source>This rule has a string option for the specified regular expression.</source>
          <target state="translated">이 규칙에는 지정된 정규식에 대한 문자열 옵션이 있습니다.</target>
        </trans-unit>
        <trans-unit id="3c64e7764e3d5fce1031ea6e079ec3342bb3b38a" translate="yes" xml:space="preserve">
          <source>This rule has a string option or an object option:</source>
          <target state="translated">이 규칙에는 문자열 옵션 또는 객체 옵션이 있습니다.</target>
        </trans-unit>
        <trans-unit id="ba5afeca0a5893f9126d0d008ac1c37a6ccd0f8d" translate="yes" xml:space="preserve">
          <source>This rule has a string option, which can have one of the following values:</source>
          <target state="translated">이 규칙에는 문자열 옵션이 있으며 다음 값 중 하나를 가질 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="852afef235e861cde6503e9fa9f341ee032a0b57" translate="yes" xml:space="preserve">
          <source>This rule has a string option.</source>
          <target state="translated">이 규칙에는 문자열 옵션이 있습니다.</target>
        </trans-unit>
        <trans-unit id="f5bd93375b385530c03b8ebc157178d8d07f7212" translate="yes" xml:space="preserve">
          <source>This rule has a string option:</source>
          <target state="translated">이 규칙에는 문자열 옵션이 있습니다.</target>
        </trans-unit>
        <trans-unit id="9c39a55484c4b84bf6dfa5df5e0e53f6063212c9" translate="yes" xml:space="preserve">
          <source>This rule has an object option for an exception:</source>
          <target state="translated">이 규칙에는 예외에 대한 객체 옵션이 있습니다.</target>
        </trans-unit>
        <trans-unit id="52dd73bca8602fba0879d49a6e8fc4a2cfb3821b" translate="yes" xml:space="preserve">
          <source>This rule has an object option for exceptions to the &lt;code&gt;&quot;all&quot;&lt;/code&gt; option:</source>
          <target state="translated">이 규칙에는 &lt;code&gt;&quot;all&quot;&lt;/code&gt; 옵션에 대한 예외에 대한 객체 옵션이 있습니다.</target>
        </trans-unit>
        <trans-unit id="e70c4892dedde6b638785b6c88fe4c0813afdf96" translate="yes" xml:space="preserve">
          <source>This rule has an object option for exceptions to the &lt;code&gt;&quot;always&quot;&lt;/code&gt; option:</source>
          <target state="translated">이 규칙에는 &lt;code&gt;&quot;always&quot;&lt;/code&gt; 옵션에 대한 예외에 대한 객체 옵션이 있습니다.</target>
        </trans-unit>
        <trans-unit id="7201dcd2e7cfa36533a6e34dae235405ca73e080" translate="yes" xml:space="preserve">
          <source>This rule has an object option for exceptions to the &lt;code&gt;&quot;never&quot;&lt;/code&gt; option:</source>
          <target state="translated">이 규칙에는 &lt;code&gt;&quot;never&quot;&lt;/code&gt; 옵션에 대한 예외에 대한 객체 옵션이 있습니다.</target>
        </trans-unit>
        <trans-unit id="d9872be98d82a692df5d8a8b8578d4914805a58a" translate="yes" xml:space="preserve">
          <source>This rule has an object option for exceptions:</source>
          <target state="translated">이 규칙에는 예외에 대한 객체 옵션이 있습니다.</target>
        </trans-unit>
        <trans-unit id="82ca18776efa4316bf999374dc6d7106d4b5ba56" translate="yes" xml:space="preserve">
          <source>This rule has an object option with one option:</source>
          <target state="translated">이 규칙에는 하나의 옵션이있는 객체 옵션이 있습니다.</target>
        </trans-unit>
        <trans-unit id="6ad6fdc3c949dd957b61f76666484f847e8b4368" translate="yes" xml:space="preserve">
          <source>This rule has an object option, with one option:</source>
          <target state="translated">이 규칙에는 하나의 옵션이있는 객체 옵션이 있습니다.</target>
        </trans-unit>
        <trans-unit id="2f67df2ade235e8d54be3342c40546c77988ff4f" translate="yes" xml:space="preserve">
          <source>This rule has an object option, with two options:</source>
          <target state="translated">이 규칙에는 두 가지 옵션이있는 객체 옵션이 있습니다.</target>
        </trans-unit>
        <trans-unit id="3094029c213ee787cfbe2e63d5f34735e9fe502c" translate="yes" xml:space="preserve">
          <source>This rule has an object option.</source>
          <target state="translated">이 규칙에는 개체 옵션이 있습니다.</target>
        </trans-unit>
        <trans-unit id="951c0d8fb3776e9f35405a503895842b0d422784" translate="yes" xml:space="preserve">
          <source>This rule has an object option:</source>
          <target state="translated">이 규칙에는 객체 옵션이 있습니다.</target>
        </trans-unit>
        <trans-unit id="c4ac31fc845cd8efe5c02ca16935752b2eb4fa4a" translate="yes" xml:space="preserve">
          <source>This rule has an option to allow indirect calls to &lt;code&gt;eval&lt;/code&gt;. Indirect calls to &lt;code&gt;eval&lt;/code&gt; are less dangerous than direct calls to &lt;code&gt;eval&lt;/code&gt; because they cannot dynamically change the scope. Because of this, they also will not negatively impact performance to the degree of direct &lt;code&gt;eval&lt;/code&gt;.</source>
          <target state="translated">이 규칙에는 &lt;code&gt;eval&lt;/code&gt; 에 대한 간접 호출을 허용하는 옵션이 있습니다. &lt;code&gt;eval&lt;/code&gt; 에 대한 간접 호출 은 범위를 동적으로 변경할 수 없기 때문에 &lt;code&gt;eval&lt;/code&gt; 에 대한 직접 호출보다 덜 위험 합니다. 이로 인해 성능은 직접 &lt;code&gt;eval&lt;/code&gt; 수준에 부정적인 영향을 미치지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="ee5a0d877127f98f1f5190f49af0d5113ae140d3" translate="yes" xml:space="preserve">
          <source>This rule has an option to allow specific kinds of functions to be empty.</source>
          <target state="translated">이 규칙에는 특정 종류의 기능을 비울 수있는 옵션이 있습니다.</target>
        </trans-unit>
        <trans-unit id="eebb9041a17bd060368074b436e2c4a3d528bc12" translate="yes" xml:space="preserve">
          <source>This rule has an option.</source>
          <target state="translated">이 규칙에는 옵션이 있습니다.</target>
        </trans-unit>
        <trans-unit id="48d1c64d5495a2e99f48e9b8332c8af255d85c2a" translate="yes" xml:space="preserve">
          <source>This rule has an optional object option &lt;code&gt;{ allowAtRootLevel: &amp;lt;boolean&amp;gt; }&lt;/code&gt;, which determines whether synchronous methods should be allowed at the top level of a file, outside of any functions. This option defaults to &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">이 규칙에는 선택적 객체 옵션 &lt;code&gt;{ allowAtRootLevel: &amp;lt;boolean&amp;gt; }&lt;/code&gt; 있으며, 이는 함수 외부에서 파일의 최상위 레벨에서 동기 메소드를 허용해야하는지 여부를 결정합니다. 이 옵션의 기본값은 &lt;code&gt;false&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="21b2603628fe9561d676f4902dfce22ac9deade7" translate="yes" xml:space="preserve">
          <source>This rule has an optional object option with the following properties:</source>
          <target state="translated">이 규칙에는 다음 속성이있는 선택적 개체 옵션이 있습니다.</target>
        </trans-unit>
        <trans-unit id="ced4a1d3ef7275e0df77c251e97ec06ab62b39ab" translate="yes" xml:space="preserve">
          <source>This rule has an options object literal:</source>
          <target state="translated">이 규칙에는 옵션 객체 리터럴이 있습니다.</target>
        </trans-unit>
        <trans-unit id="d9e92c652ae0840e9d1a6ab9c4c2631180da05c6" translate="yes" xml:space="preserve">
          <source>This rule has built-in exceptions:</source>
          <target state="translated">이 규칙에는 내장 예외가 있습니다.</target>
        </trans-unit>
        <trans-unit id="c1e899620d824db9c2de90df8c792d8a678b20fc" translate="yes" xml:space="preserve">
          <source>This rule has either a string option:</source>
          <target state="translated">이 규칙에는 문자열 옵션이 있습니다.</target>
        </trans-unit>
        <trans-unit id="7e832ec5ce4347a640ccca3da541ebc06af56135" translate="yes" xml:space="preserve">
          <source>This rule has one option which has either &lt;code&gt;&quot;never&quot;&lt;/code&gt; or &lt;code&gt;&quot;always&quot;&lt;/code&gt; as value.</source>
          <target state="translated">이 규칙에는 &lt;code&gt;&quot;never&quot;&lt;/code&gt; 또는 &lt;code&gt;&quot;always&quot;&lt;/code&gt; 값을 갖는 하나의 옵션이 있습니다 .</target>
        </trans-unit>
        <trans-unit id="434cbdea5a2d3771f19900bdf532b25ee6bd3b10" translate="yes" xml:space="preserve">
          <source>This rule has one option whose value can be set to &lt;code&gt;&quot;never&quot;&lt;/code&gt; or &lt;code&gt;&quot;always&quot;&lt;/code&gt;</source>
          <target state="translated">이 규칙에는 값을 &lt;code&gt;&quot;never&quot;&lt;/code&gt; 또는 &lt;code&gt;&quot;always&quot;&lt;/code&gt; 로 설정할 수있는 하나의 옵션이 있습니다.</target>
        </trans-unit>
        <trans-unit id="9e5d3d8052d8d8f494f663e4fb4fa9e96f6509e0" translate="yes" xml:space="preserve">
          <source>This rule has one option, which can be a string option or an object option.</source>
          <target state="translated">이 규칙에는 문자열 옵션 또는 객체 옵션이 될 수있는 하나의 옵션이 있습니다.</target>
        </trans-unit>
        <trans-unit id="c84c9d52925fbbf04d2847bdd02983266eac0f1d" translate="yes" xml:space="preserve">
          <source>This rule has one option. It can either be a string or an object:</source>
          <target state="translated">이 규칙에는 하나의 옵션이 있습니다. 문자열이거나 객체 일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a85aef4180d14627deda0141bfb2f37cfa9a170f" translate="yes" xml:space="preserve">
          <source>This rule has one or more string options:</source>
          <target state="translated">이 규칙에는 하나 이상의 문자열 옵션이 있습니다.</target>
        </trans-unit>
        <trans-unit id="fa0560ddbbfcd6c046cd8119f1d093fe1c4a3718" translate="yes" xml:space="preserve">
          <source>This rule has the following options that can be specified using an object:</source>
          <target state="translated">이 규칙에는 객체를 사용하여 지정할 수있는 다음과 같은 옵션이 있습니다.</target>
        </trans-unit>
        <trans-unit id="933ccefd6eed6377af78dae0c80dd63dbc4981c2" translate="yes" xml:space="preserve">
          <source>This rule has the option to check properties as well.</source>
          <target state="translated">이 규칙에는 속성을 확인하는 옵션도 있습니다.</target>
        </trans-unit>
        <trans-unit id="2f294aaaed5cde3a854dbd6565794eac6902bde5" translate="yes" xml:space="preserve">
          <source>This rule has three main options and one override option to allow some coercions as required.</source>
          <target state="translated">이 규칙에는 필요에 따라 일부 강제를 허용하는 세 가지 기본 옵션과 하나의 대체 옵션이 있습니다.</target>
        </trans-unit>
        <trans-unit id="22b034be676241194793c07307d1b26caa995f81" translate="yes" xml:space="preserve">
          <source>This rule has three options:</source>
          <target state="translated">이 규칙에는 세 가지 옵션이 있습니다.</target>
        </trans-unit>
        <trans-unit id="9cc484d75588b2521efd443a2fa950909fe567b8" translate="yes" xml:space="preserve">
          <source>This rule has two options, a string option and an object option.</source>
          <target state="translated">이 규칙에는 문자열 옵션과 객체 옵션의 두 가지 옵션이 있습니다.</target>
        </trans-unit>
        <trans-unit id="ef2597dc19602c27c52cc77ab6d3826ed3d8ce10" translate="yes" xml:space="preserve">
          <source>This rule has two options, the first one can be a string option or an object option. The second one is an object option, it can allow exceptions.</source>
          <target state="translated">이 규칙에는 두 가지 옵션이 있으며 첫 번째 옵션은 문자열 옵션 또는 객체 옵션 일 수 있습니다. 두 번째 옵션은 객체 옵션이며 예외를 허용 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3f09a11456419342935fa96016d35ce66287c118" translate="yes" xml:space="preserve">
          <source>This rule has two options: a string value &lt;code&gt;&quot;always&quot;&lt;/code&gt; or &lt;code&gt;&quot;never&quot;&lt;/code&gt; which determines whether capitalization of the first word of a comment should be required or forbidden, and optionally an object containing more configuration parameters for the rule.</source>
          <target state="translated">이 규칙에는 주석의 첫 단어를 대문자로 표시해야하는지 여부를 결정 하는 문자열 값 &lt;code&gt;&quot;always&quot;&lt;/code&gt; 또는 &lt;code&gt;&quot;never&quot;&lt;/code&gt; 와 선택적으로 규칙에 대한 추가 구성 매개 변수를 포함하는 오브젝트의 두 가지 옵션 이 있습니다.</target>
        </trans-unit>
        <trans-unit id="6367078058884cd6b4661c5442744bde3aaff215" translate="yes" xml:space="preserve">
          <source>This rule ignores spacing which is between &lt;code&gt;=&amp;gt;&lt;/code&gt; and a block. The spacing is handled by the &lt;code&gt;arrow-spacing&lt;/code&gt; rule.</source>
          <target state="translated">이 규칙은 &lt;code&gt;=&amp;gt;&lt;/code&gt; 와 블록 사이의 간격을 무시합니다 . 간격은 &lt;code&gt;arrow-spacing&lt;/code&gt; 규칙에 의해 처리됩니다 .</target>
        </trans-unit>
        <trans-unit id="bca8e8fa94e09adcc696245c84caed302ba5ef5c" translate="yes" xml:space="preserve">
          <source>This rule ignores spacing which is between a keyword and a block. The spacing is handled by the &lt;code&gt;keyword-spacing&lt;/code&gt; rule.</source>
          <target state="translated">이 규칙은 키워드와 블록 사이의 간격을 무시합니다. 간격은 &lt;code&gt;keyword-spacing&lt;/code&gt; 규칙에 의해 처리됩니다 .</target>
        </trans-unit>
        <trans-unit id="c18caf633548258ef7489062bbf1f1475035babe" translate="yes" xml:space="preserve">
          <source>This rule improves readability by enforcing lines between class members. It will not check empty lines before the first member and after the last member, since that is already taken care of by padded-blocks.</source>
          <target state="translated">이 규칙은 클래스 멤버간에 행을 적용하여 가독성을 향상시킵니다. 첫 번째 멤버 이전과 마지막 멤버 이후의 빈 줄은 이미 패딩 된 블록으로 처리되므로 빈 줄을 확인하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="067b8ac57f499b00eba00dc6f549da0fd318c726" translate="yes" xml:space="preserve">
          <source>This rule is a formatting preference and not following it won't negatively affect the quality of your code. If alphabetizing imports isn't a part of your coding standards, then you can leave this rule disabled.</source>
          <target state="translated">이 규칙은 서식 환경 설정이며 따르지 않으면 코드 품질에 부정적인 영향을 미치지 않습니다. 알파벳순으로 가져 오기가 코딩 표준의 일부가 아닌 경우이 규칙을 비활성화 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e13e8e8f93d2b3049fe0f98cc456cd8cb2c4c64a" translate="yes" xml:space="preserve">
          <source>This rule is a formatting preference and not following it won't negatively affect the quality of your code. If you alphabetizing variables isn't a part of your coding standards, then you can leave this rule off.</source>
          <target state="translated">이 규칙은 서식 환경 설정이며 따르지 않으면 코드 품질에 부정적인 영향을 미치지 않습니다. 사전 순으로 변수를 코딩하는 것이 코딩 표준의 일부가 아닌 경우이 규칙을 해제 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="589d22b24ac15f05d684de370251ff86eab8c597" translate="yes" xml:space="preserve">
          <source>This rule is aimed at avoiding the unnecessary use of &lt;code&gt;bind()&lt;/code&gt; and as such will warn whenever an immediately-invoked function expression (IIFE) is using &lt;code&gt;bind()&lt;/code&gt; and doesn't have an appropriate &lt;code&gt;this&lt;/code&gt; value. This rule won't flag usage of &lt;code&gt;bind()&lt;/code&gt; that includes function argument binding.</source>
          <target state="translated">이 규칙은 &lt;code&gt;bind()&lt;/code&gt; 의 불필요한 사용을 피하기위한 것으로 , 즉시 호출되는 함수 표현식 (IIFE)이 &lt;code&gt;bind()&lt;/code&gt; 사용 중이고이 값 &lt;code&gt;this&lt;/code&gt; 적절하지 않을 때마다 경고 합니다. 이 규칙은 함수 인수 바인딩이 포함 된 &lt;code&gt;bind()&lt;/code&gt; 사용법을 표시하지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="8c70a2058d99c61f3b70746e9dac986e9a136f11" translate="yes" xml:space="preserve">
          <source>This rule is aimed at catching debugging code that should be removed and popup UI elements that should be replaced with less obtrusive, custom UIs. As such, it will warn when it encounters &lt;code&gt;alert&lt;/code&gt;, &lt;code&gt;prompt&lt;/code&gt;, and &lt;code&gt;confirm&lt;/code&gt; function calls which are not shadowed.</source>
          <target state="translated">이 규칙은 제거해야하는 디버깅 코드와 덜 눈에 띄는 사용자 정의 UI로 교체해야하는 팝업 UI 요소를 포착하는 데 목적이 있습니다. 이 발생하면 따라서, 그것은 경고합니다 &lt;code&gt;alert&lt;/code&gt; , &lt;code&gt;prompt&lt;/code&gt; 및 &lt;code&gt;confirm&lt;/code&gt; 그림자가되지 않는 함수 호출을.</target>
        </trans-unit>
        <trans-unit id="7bfb43ff0ffe91b368f21ec10e26cfeec43d8538" translate="yes" xml:space="preserve">
          <source>This rule is aimed at catching invalid whitespace that is not a normal tab and space. Some of these characters may cause issues in modern browsers and others will be a debugging issue to spot.</source>
          <target state="translated">이 규칙은 일반적인 탭과 공백이 아닌 유효하지 않은 공백을 포착하기위한 것입니다. 이러한 문자 중 일부는 최신 브라우저에서 문제를 일으킬 수 있고 다른 문자는 디버깅 문제가 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2b634aa750ad9f7595ca71468ab4512d71e09bfc" translate="yes" xml:space="preserve">
          <source>This rule is aimed at detecting trailing commas in object literals. As such, it will warn whenever it encounters a trailing comma in an object literal.</source>
          <target state="translated">이 규칙은 객체 리터럴에서 후행 쉼표를 감지하기위한 것입니다. 따라서 객체 리터럴에서 끝에 쉼표가 나타날 때마다 경고합니다.</target>
        </trans-unit>
        <trans-unit id="0e496dc6e0f7ecfc75282e800ae44b3ae2d20c0d" translate="yes" xml:space="preserve">
          <source>This rule is aimed at discouraging the use of &lt;code&gt;var&lt;/code&gt; and encouraging the use of &lt;code&gt;const&lt;/code&gt; or &lt;code&gt;let&lt;/code&gt; instead.</source>
          <target state="translated">이 규칙의 사용 낙담 대상으로 &lt;code&gt;var&lt;/code&gt; 하고 사용 장려 &lt;code&gt;const&lt;/code&gt; 또는 &lt;code&gt;let&lt;/code&gt; 대신.</target>
        </trans-unit>
        <trans-unit id="00e21f6b57d9223f33575e542a471d9015cb9895" translate="yes" xml:space="preserve">
          <source>This rule is aimed at discouraging the use of deprecated and sub-optimal code by disallowing the use of &lt;code&gt;arguments.caller&lt;/code&gt; and &lt;code&gt;arguments.callee&lt;/code&gt;. As such, it will warn when &lt;code&gt;arguments.caller&lt;/code&gt; and &lt;code&gt;arguments.callee&lt;/code&gt; are used.</source>
          <target state="translated">이 규칙은 &lt;code&gt;arguments.caller&lt;/code&gt; 및 &lt;code&gt;arguments.callee&lt;/code&gt; 의 사용을 금지하여 더 이상 사용되지 않고 차선책의 코드 사용을 권장하지 않습니다 . 따라서 &lt;code&gt;arguments.caller&lt;/code&gt; 및 &lt;code&gt;arguments.callee&lt;/code&gt; 가 사용될 때 경고 합니다.</target>
        </trans-unit>
        <trans-unit id="fe7262e8e2a0e5d4d25bce407d84657aee9eb731" translate="yes" xml:space="preserve">
          <source>This rule is aimed at discouraging use of &lt;code&gt;process.env&lt;/code&gt; to avoid global dependencies. As such, it will warn whenever &lt;code&gt;process.env&lt;/code&gt; is used.</source>
          <target state="translated">이 규칙은 전역 종속성을 피하기 위해 &lt;code&gt;process.env&lt;/code&gt; 사용을 권장하지 않습니다 . 따라서 &lt;code&gt;process.env&lt;/code&gt; 가 사용될 때마다 경고 합니다.</target>
        </trans-unit>
        <trans-unit id="f38d792a703ef9f9d6a2c68f162519eb9d489852" translate="yes" xml:space="preserve">
          <source>This rule is aimed at eliminating empty functions. A function will not be considered a problem if it contains a comment.</source>
          <target state="translated">이 규칙은 빈 기능을 제거하기위한 것입니다. 주석이 포함 된 함수는 문제로 간주되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="86048b16ce9efe6aadc447d1d1b69731d9850583" translate="yes" xml:space="preserve">
          <source>This rule is aimed at eliminating floating decimal points and will warn whenever a numeric value has a decimal point but is missing a number either before or after it.</source>
          <target state="translated">이 규칙은 부동 소수점을 제거하는 데 목적이 있으며 숫자 값에 소수점이 있지만 그 앞뒤에 숫자가 없을 때마다 경고합니다.</target>
        </trans-unit>
        <trans-unit id="90246f5410906fbbdf2c6d7d267c1e4dfbcaa5ca" translate="yes" xml:space="preserve">
          <source>This rule is aimed at eliminating self assignments.</source>
          <target state="translated">이 규칙은 자체 할당을 제거하기위한 것입니다.</target>
        </trans-unit>
        <trans-unit id="a3d8ced820518227c86205cea7adabb8486f2d45" translate="yes" xml:space="preserve">
          <source>This rule is aimed at eliminating the type-unsafe equality operators.</source>
          <target state="translated">이 규칙은 안전하지 않은 형식의 등식 연산자를 제거하기위한 것입니다.</target>
        </trans-unit>
        <trans-unit id="fd707f1fffe20cc0665053f189146e3082919d53" translate="yes" xml:space="preserve">
          <source>This rule is aimed at eliminating the use of ECMAScript 3 keywords and reserved words as object literal keys. As such, it warns whenever an object key would throw an error in an ECMAScript 3 environment.</source>
          <target state="translated">이 규칙은 ECMAScript 3 키워드 및 예약어를 객체 리터럴 키로 사용하지 않도록하기위한 것입니다. 따라서 ECMAScript 3 환경에서 객체 키가 오류를 발생시킬 때마다 경고합니다.</target>
        </trans-unit>
        <trans-unit id="6434e742662f465f2c60b84d6a9c01051ea938fa" translate="yes" xml:space="preserve">
          <source>This rule is aimed at eliminating unintentional fallthrough of one case to the other. As such, it flags any fallthrough scenarios that are not marked by a comment.</source>
          <target state="translated">이 규칙은 한 사례에서 다른 사례로의 의도하지 않은 오류를 제거하기위한 것입니다. 따라서 주석으로 표시되지 않은 모든 오류 시나리오에 플래그를 지정합니다.</target>
        </trans-unit>
        <trans-unit id="260f2ba586d82725492f572de36fdd4d41d3910e" translate="yes" xml:space="preserve">
          <source>This rule is aimed at eliminating unnecessary labels.</source>
          <target state="translated">이 규칙은 불필요한 라벨을 없애기위한 것입니다.</target>
        </trans-unit>
        <trans-unit id="0366528693bff0ad732982de9702f6b7dc5b293b" translate="yes" xml:space="preserve">
          <source>This rule is aimed at eliminating unused labels.</source>
          <target state="translated">이 규칙은 사용하지 않는 레이블을 제거하기위한 것입니다.</target>
        </trans-unit>
        <trans-unit id="da7670eae14b162ea5192dc3ed57dd1608fe62e7" translate="yes" xml:space="preserve">
          <source>This rule is aimed at eliminating unused variables, functions, and function parameters.</source>
          <target state="translated">이 규칙은 사용하지 않는 변수, 함수 및 함수 매개 변수를 제거하는 데 목적이 있습니다.</target>
        </trans-unit>
        <trans-unit id="02bb0cbd9de5fa8c51ec9d1f97a95452b48e34b0" translate="yes" xml:space="preserve">
          <source>This rule is aimed at eliminating variables that have multiple declarations in the same scope.</source>
          <target state="translated">이 규칙은 동일한 범위에서 여러 선언이있는 변수를 제거하는 데 목적이 있습니다.</target>
        </trans-unit>
        <trans-unit id="0c05a6e7ca0dd2fe40b3e1941f532a5f5cf4d6e3" translate="yes" xml:space="preserve">
          <source>This rule is aimed at enforcing or eliminating variable initializations during declaration. For example, in the following code, &lt;code&gt;foo&lt;/code&gt; is initialized during declaration, while &lt;code&gt;bar&lt;/code&gt; is not.</source>
          <target state="translated">이 규칙은 선언 중에 변수 초기화를 시행하거나 제거하는 것을 목표로합니다. 예를 들어 다음 코드 에서 선언하는 동안 &lt;code&gt;foo&lt;/code&gt; 는 초기화되지만 &lt;code&gt;bar&lt;/code&gt; 는 그렇지 않습니다.</target>
        </trans-unit>
        <trans-unit id="e2ec8ee15749e494465ab5b3d55baddc7a16afc4" translate="yes" xml:space="preserve">
          <source>This rule is aimed at ensuring that callbacks used outside of the main function block are always part-of or immediately preceding a &lt;code&gt;return&lt;/code&gt; statement. This rule decides what is a callback based on the name of the function being called.</source>
          <target state="translated">이 규칙은 기본 기능 블록 외부에서 사용되는 콜백이 항상 &lt;code&gt;return&lt;/code&gt; 문의 일부이거나 바로 앞에 오도록 하는 것을 목표 로 합니다. 이 규칙은 호출되는 함수의 이름에 따라 콜백을 결정합니다.</target>
        </trans-unit>
        <trans-unit id="12fc4b12ff585b13beb05aab3ac97951c7198eea" translate="yes" xml:space="preserve">
          <source>This rule is aimed at ensuring there are spaces around infix operators.</source>
          <target state="translated">이 규칙은 삽입 연산자 주위에 공백이 있는지 확인하기위한 것입니다.</target>
        </trans-unit>
        <trans-unit id="1a6387de3f3ea21e60c53ce842aae405efa22996" translate="yes" xml:space="preserve">
          <source>This rule is aimed at flagging variables that are declared using &lt;code&gt;let&lt;/code&gt; keyword, but never reassigned after the initial assignment.</source>
          <target state="translated">이 규칙은 &lt;code&gt;let&lt;/code&gt; 키워드를 사용하여 선언 되었지만 초기 할당 후에는 다시 할당하지 않는 변수에 플래그를 지정하기위한 것입니다.</target>
        </trans-unit>
        <trans-unit id="6b1b96aa79a5746db0fddb54574f83ee098c170e" translate="yes" xml:space="preserve">
          <source>This rule is aimed at highlighting an unnecessary block of code following an &lt;code&gt;if&lt;/code&gt; containing a return statement. As such, it will warn when it encounters an &lt;code&gt;else&lt;/code&gt; following a chain of &lt;code&gt;if&lt;/code&gt;s, all of them containing a &lt;code&gt;return&lt;/code&gt; statement.</source>
          <target state="translated">이 규칙은 &lt;code&gt;if&lt;/code&gt; 문이 포함 된 return 문 뒤에 불필요한 코드 블록을 강조 표시하는 데 목적이 있습니다. 따라서, &lt;code&gt;if&lt;/code&gt; 체인을 따르는 &lt;code&gt;else&lt;/code&gt; 를 만나면 , 모두 &lt;code&gt;return&lt;/code&gt; 문을 포함하고 있음을 경고 합니다.</target>
        </trans-unit>
        <trans-unit id="3c125b77e2053954512dc9e0da4e09f674ed2077" translate="yes" xml:space="preserve">
          <source>This rule is aimed at highlighting possible typos and unexpected behavior in regular expressions which may arise from the use of empty character classes.</source>
          <target state="translated">이 규칙은 빈 문자 클래스를 사용하여 발생할 수있는 정규식에서 오타 및 예상치 못한 동작을 강조하기위한 것입니다.</target>
        </trans-unit>
        <trans-unit id="8ce587787a5ec83605d0f57bdc841448b1724a7b" translate="yes" xml:space="preserve">
          <source>This rule is aimed at maintaining code consistency and improving code readability by encouraging use of the dot notation style whenever possible. As such, it will warn when it encounters an unnecessary use of square-bracket notation.</source>
          <target state="translated">이 규칙은 가능할 때마다 도트 표기법 스타일의 사용을 권장하여 코드 일관성을 유지하고 코드 가독성을 향상시키는 것을 목표로합니다. 따라서 대괄호 표기법을 불필요하게 사용하면 경고가 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="c85cc225ae8c575af3c27684f51644a15dda6865" translate="yes" xml:space="preserve">
          <source>This rule is aimed at maintaining consistency and convention by disallowing constructor calls using the &lt;code&gt;new&lt;/code&gt; keyword that do not assign the resulting object to a variable.</source>
          <target state="translated">이 규칙은 결과 개체를 변수에 할당하지 않는 &lt;code&gt;new&lt;/code&gt; 키워드를 사용하여 생성자 호출을 허용하지 않음으로써 일관성과 규칙을 유지 하기위한 것입니다.</target>
        </trans-unit>
        <trans-unit id="c7f71b3a65be1d97541f2cb6028ca8b6ae826b20" translate="yes" xml:space="preserve">
          <source>This rule is aimed at maintaining consistency when throwing exception by disallowing to throw literals and other expressions which cannot possibly be an &lt;code&gt;Error&lt;/code&gt; object.</source>
          <target state="translated">이 규칙은 &lt;code&gt;Error&lt;/code&gt; 개체가 될 수없는 리터럴 및 다른 식을 throw하지 않도록하여 예외를 throw 할 때 일관성을 유지하는 데 목적이 있습니다 .</target>
        </trans-unit>
        <trans-unit id="cf77e127446fb71dc0302c64127a5f9f047d3592" translate="yes" xml:space="preserve">
          <source>This rule is aimed at preventing bugs and increasing code clarity by ensuring that block statements are wrapped in curly braces. It will warn when it encounters blocks that omit curly braces.</source>
          <target state="translated">이 규칙은 블록 문을 중괄호로 묶어 버그를 방지하고 코드 선명도를 높이는 데 목적이 있습니다. 중괄호가 생략 된 블록이 발견되면 경고합니다.</target>
        </trans-unit>
        <trans-unit id="cc37a51fc3258e58ad6da2d081ed52d7b851fde8" translate="yes" xml:space="preserve">
          <source>This rule is aimed at preventing errors that may arise from using the &lt;code&gt;__iterator__&lt;/code&gt; property, which is not implemented in several browsers. As such, it will warn whenever it encounters the &lt;code&gt;__iterator__&lt;/code&gt; property.</source>
          <target state="translated">이 규칙은 여러 브라우저에서 구현되지 않은 &lt;code&gt;__iterator__&lt;/code&gt; 속성 을 사용하여 발생할 수있는 오류를 방지하기위한 것 입니다. 따라서 &lt;code&gt;__iterator__&lt;/code&gt; 속성 이 발생할 때마다 경고 합니다.</target>
        </trans-unit>
        <trans-unit id="560f64042b31848c0a3db333f58d5b5e2588f733" translate="yes" xml:space="preserve">
          <source>This rule is aimed at preventing potentially dangerous, unnecessary, and slow code by disallowing the use of the &lt;code&gt;eval()&lt;/code&gt; function. As such, it will warn whenever the &lt;code&gt;eval()&lt;/code&gt; function is used.</source>
          <target state="translated">이 규칙은 &lt;code&gt;eval()&lt;/code&gt; 함수 사용을 금지하여 잠재적으로 위험하고 불필요하며 느린 코드를 방지하기위한 것입니다 . 따라서 &lt;code&gt;eval()&lt;/code&gt; 함수가 사용될 때마다 경고합니다 .</target>
        </trans-unit>
        <trans-unit id="adf6b0cc4e71f7b12f6baf1f1a566a2f78392cec" translate="yes" xml:space="preserve">
          <source>This rule is aimed at preventing synchronous methods from being called in Node.js. It looks specifically for the method suffix &quot;&lt;code&gt;Sync&lt;/code&gt;&quot; (as is the convention with Node.js operations).</source>
          <target state="translated">이 규칙은 Node.js에서 동기 메소드가 호출되지 않도록하기위한 것입니다. 특히 Node.js 작업의 규칙과 같이 접미사 &quot; &lt;code&gt;Sync&lt;/code&gt; &quot; 메서드를 찾습니다 .</target>
        </trans-unit>
        <trans-unit id="7540a244d6ef1b536d6c740e84f0c2c02785e878" translate="yes" xml:space="preserve">
          <source>This rule is aimed at preventing the accidental calling of &lt;code&gt;Symbol&lt;/code&gt; with the &lt;code&gt;new&lt;/code&gt; operator.</source>
          <target state="translated">이 규칙은 &lt;code&gt;new&lt;/code&gt; 운영자 가 실수로 &lt;code&gt;Symbol&lt;/code&gt; 을 호출하는 것을 방지하기위한 것 입니다.</target>
        </trans-unit>
        <trans-unit id="469e6a65fc6fd9de2ace34ba2b94e32a85a0ef7a" translate="yes" xml:space="preserve">
          <source>This rule is aimed at preventing the unintended conversion of a string to a number of a different base than intended or at preventing the redundant &lt;code&gt;10&lt;/code&gt; radix if targeting modern environments only.</source>
          <target state="translated">이 규칙은 의도하지 않은 문자열을 의도하지 않은 여러 다른베이스로 변환하지 못하도록하거나 현대적인 환경 만 대상으로하는 경우 중복 &lt;code&gt;10&lt;/code&gt; 기수 를 방지하기위한 것 입니다.</target>
        </trans-unit>
        <trans-unit id="6082ce56b65e7772c7b223e16d93e46ed1bfc67b" translate="yes" xml:space="preserve">
          <source>This rule is aimed at preventing the use of multiline strings.</source>
          <target state="translated">이 규칙은 여러 줄 문자열 사용을 방지하기위한 것입니다.</target>
        </trans-unit>
        <trans-unit id="33ac7800e287b6d68c276fe31df41e059176f86f" translate="yes" xml:space="preserve">
          <source>This rule is aimed at preventing unexpected behavior in your program that may arise from a bug in IE 8 and earlier, in which the catch clause parameter can leak into outer scopes. This rule will warn whenever it encounters a catch clause parameter that has the same name as a variable in an outer scope.</source>
          <target state="translated">이 규칙은 catch 절 매개 변수가 외부 범위로 유출 될 수있는 IE 8 및 이전 버전의 버그로 인해 프로그램에서 예기치 않은 동작이 발생하지 않도록하기위한 것입니다. 이 규칙은 외부 범위의 변수와 이름이 같은 catch 절 매개 변수가 발생할 때마다 경고합니다.</target>
        </trans-unit>
        <trans-unit id="0dbcaf4d0178e2b4de696fe49e174ac1200fc1b2" translate="yes" xml:space="preserve">
          <source>This rule is aimed at preventing unexpected behavior that could arise from using a &lt;code&gt;for in&lt;/code&gt; loop without filtering the results in the loop. As such, it will warn when &lt;code&gt;for in&lt;/code&gt; loops do not filter their results with an &lt;code&gt;if&lt;/code&gt; statement.</source>
          <target state="translated">이 규칙은 루프에서 결과를 필터링하지 않고 &lt;code&gt;for in&lt;/code&gt; 루프 를 사용하여 발생할 수있는 예기치 않은 동작을 방지하기 위한 것입니다 . 따라서 &lt;code&gt;for in&lt;/code&gt; 루프가 &lt;code&gt;if&lt;/code&gt; 문으로 결과를 필터링하지 않을 때 경고 합니다.</target>
        </trans-unit>
        <trans-unit id="3a93186eda9fc1ad5e2354c3aec9e22d64effac0" translate="yes" xml:space="preserve">
          <source>This rule is aimed at preventing unnecessary &lt;code&gt;&quot;use strict&quot;;&lt;/code&gt; directives. As such, it will warn when it encounters a &lt;code&gt;&quot;use strict&quot;;&lt;/code&gt; directive when already in strict mode.</source>
          <target state="translated">이 규칙은 불필요한 &lt;code&gt;&quot;use strict&quot;;&lt;/code&gt; 을 방지하기위한 것입니다 . 지시어. 따라서 &lt;code&gt;&quot;use strict&quot;;&lt;/code&gt; 이 발생하면 경고합니다 . 이미 엄격 모드에있을 때 지시어.</target>
        </trans-unit>
        <trans-unit id="c75e9e0cef10da3b36758024c4ec0b7ab60d8f61" translate="yes" xml:space="preserve">
          <source>This rule is aimed at reducing code complexity by capping the amount of cyclomatic complexity allowed in a program. As such, it will warn when the cyclomatic complexity crosses the configured threshold (default is &lt;code&gt;20&lt;/code&gt;).</source>
          <target state="translated">이 규칙은 프로그램에서 허용되는 순환 복잡성의 양을 제한하여 코드 복잡성을 줄이는 것을 목표로합니다. 따라서 순환 복잡도가 구성된 임계 값을 초과하면 경고가 표시됩니다 (기본값은 &lt;code&gt;20&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="1c9f3c003687bf5a00c45b29be601579c09529f1" translate="yes" xml:space="preserve">
          <source>This rule is aimed at using named capture groups instead of numbered capture groups in regular expressions.</source>
          <target state="translated">이 규칙은 정규식에서 번호가 매겨진 캡처 그룹 대신 명명 된 캡처 그룹을 사용하는 것을 목표로합니다.</target>
        </trans-unit>
        <trans-unit id="e1f61236848decd6fad6b255224627f388f6ef5c" translate="yes" xml:space="preserve">
          <source>This rule is aimed to flag &lt;code&gt;this&lt;/code&gt;/&lt;code&gt;super&lt;/code&gt; keywords before &lt;code&gt;super()&lt;/code&gt; callings.</source>
          <target state="translated">이 규칙은 플래그를 대상으로 &lt;code&gt;this&lt;/code&gt; / &lt;code&gt;super&lt;/code&gt; 전에 키워드 &lt;code&gt;super()&lt;/code&gt; 부름.</target>
        </trans-unit>
        <trans-unit id="fbd358e28b01f27d52086bb527fafa61ec2d4f7f" translate="yes" xml:space="preserve">
          <source>This rule is aimed to flag class methods that do not use &lt;code&gt;this&lt;/code&gt;.</source>
          <target state="translated">이 규칙은 &lt;code&gt;this&lt;/code&gt; 사용하지 않는 클래스 메소드를 표시하는 것을 목표로 합니다 .</target>
        </trans-unit>
        <trans-unit id="ac40186b374e32b3e6012af68a62e2a5191a2d9a" translate="yes" xml:space="preserve">
          <source>This rule is aimed to flag invalid/missing &lt;code&gt;super()&lt;/code&gt; calls.</source>
          <target state="translated">이 규칙은 유효하지 않거나 누락 된 &lt;code&gt;super()&lt;/code&gt; 호출 에 플래그를 지정하기위한 것 입니다.</target>
        </trans-unit>
        <trans-unit id="6c08c2c004052d5b64c974234aa06e6ffef93c62" translate="yes" xml:space="preserve">
          <source>This rule is aimed to flag modifying variables of class declarations.</source>
          <target state="translated">이 규칙은 클래스 선언 변수를 수정하는 플래그를 지정하기위한 것입니다.</target>
        </trans-unit>
        <trans-unit id="dfd92744aabb4c3693bd07a9fcd78bf0a22ec16d" translate="yes" xml:space="preserve">
          <source>This rule is aimed to flag modifying variables that are declared using &lt;code&gt;const&lt;/code&gt; keyword.</source>
          <target state="translated">이 규칙은 &lt;code&gt;const&lt;/code&gt; 키워드를 사용하여 선언 된 수정 변수에 플래그를 지정하기위한 것 입니다.</target>
        </trans-unit>
        <trans-unit id="a3a1f9f8c364f4f2d38823a7ebaee68b7abc1d93" translate="yes" xml:space="preserve">
          <source>This rule is aimed to flag shorter notations for the type conversion, then suggest a more self-explanatory notation.</source>
          <target state="translated">이 규칙은 형식 변환에 대해 더 짧은 표기법을 표시하고보다 자명 한 표기법을 제안하는 것을 목표로합니다.</target>
        </trans-unit>
        <trans-unit id="0d483a51695be57209456cbf5a63f44d433ef8fd" translate="yes" xml:space="preserve">
          <source>This rule is aimed to flag the use of duplicate names in class members.</source>
          <target state="translated">이 규칙은 클래스 멤버에서 중복 이름 사용을 표시하는 것을 목표로합니다.</target>
        </trans-unit>
        <trans-unit id="d6c794328277f0807f621415f1e32fb251dcbe5a" translate="yes" xml:space="preserve">
          <source>This rule is aimed to flag usage of &lt;code&gt;+&lt;/code&gt; operators with strings.</source>
          <target state="translated">이 규칙은 &lt;code&gt;+&lt;/code&gt; 연산자의 사용법에 문자열 을 표시하는 것을 목표로 합니다.</target>
        </trans-unit>
        <trans-unit id="d2bbde19885322cbe4381d2e3df23145f2d289db" translate="yes" xml:space="preserve">
          <source>This rule is aimed to flag usage of &lt;code&gt;Function.prototype.apply()&lt;/code&gt; in situations where spread syntax could be used instead.</source>
          <target state="translated">이 규칙은 대신 확산 구문을 사용할 수있는 상황에서 &lt;code&gt;Function.prototype.apply()&lt;/code&gt; 사용법을 플래그로 지정합니다 .</target>
        </trans-unit>
        <trans-unit id="47e32fce626be8349cd3c6fcec19ea5364150d08" translate="yes" xml:space="preserve">
          <source>This rule is aimed to flag usage of &lt;code&gt;Function.prototype.call()&lt;/code&gt; and &lt;code&gt;Function.prototype.apply()&lt;/code&gt; that can be replaced with the normal function invocation.</source>
          <target state="translated">이 규칙은 정상적인 함수 호출로 대체 될 수있는 &lt;code&gt;Function.prototype.call()&lt;/code&gt; 및 &lt;code&gt;Function.prototype.apply()&lt;/code&gt; 사용법을 표시하는 데 목적 이 있습니다.</target>
        </trans-unit>
        <trans-unit id="a84766a7048c8e0f0348021406e6bb0ead824db7" translate="yes" xml:space="preserve">
          <source>This rule is aimed to flag usage of &lt;code&gt;arguments&lt;/code&gt; variables.</source>
          <target state="translated">이 규칙은 &lt;code&gt;arguments&lt;/code&gt; 변수의 사용법에 플래그를 지정하기위한 것 입니다.</target>
        </trans-unit>
        <trans-unit id="4c28d58028a6eec8a28d1185085e8ddf141802b5" translate="yes" xml:space="preserve">
          <source>This rule is mostly useful for browser scripts. Top-level declarations in ES modules and CommonJS modules create module-scoped variables. ES modules also have implicit &lt;code&gt;strict&lt;/code&gt; mode, which prevents global variable leaks.</source>
          <target state="translated">이 규칙은 대부분 브라우저 스크립트에 유용합니다. ES 모듈 및 CommonJS 모듈의 최상위 레벨 선언은 모듈 범위 변수를 작성합니다. 또한 ES 모듈에는 암시 적 &lt;code&gt;strict&lt;/code&gt; 모드가있어 전역 변수 누출을 ​​방지합니다.</target>
        </trans-unit>
        <trans-unit id="8cd3bc81b47b2e4d1e8c9005b39185071a1dbee0" translate="yes" xml:space="preserve">
          <source>This rule is warning every &lt;code&gt;eval()&lt;/code&gt; even if the &lt;code&gt;eval&lt;/code&gt; is not global's. This behavior is in order to detect calls of direct &lt;code&gt;eval&lt;/code&gt;. Such as:</source>
          <target state="translated">이 규칙은 &lt;code&gt;eval&lt;/code&gt; 이 전역이 아니더라도 모든 &lt;code&gt;eval()&lt;/code&gt; 경고합니다 . 이 동작은 직접 &lt;code&gt;eval&lt;/code&gt; 호출을 감지하기위한 것 입니다. 같은 :</target>
        </trans-unit>
        <trans-unit id="8a92f926f4ed7ce1fe6115db133b5a9bbf22e1b4" translate="yes" xml:space="preserve">
          <source>This rule judges from following conditions whether or not the function is a constructor:</source>
          <target state="translated">이 규칙은 함수가 생성자인지 여부를 다음 조건에서 판단합니다.</target>
        </trans-unit>
        <trans-unit id="fc898e9b4c8ea102c28b80e26d75de9f92115480" translate="yes" xml:space="preserve">
          <source>This rule judges from following conditions whether or not the function is a method:</source>
          <target state="translated">이 규칙은 함수가 메소드인지 여부를 다음 조건에서 판단합니다.</target>
        </trans-unit>
        <trans-unit id="6343f914f331a1a209ff6afd1ff389afe41cd1b8" translate="yes" xml:space="preserve">
          <source>This rule locates function expressions used as callbacks or function arguments. An error will be produced for any that could be replaced by an arrow function without changing the result.</source>
          <target state="translated">이 규칙은 콜백 또는 함수 인수로 사용되는 함수 표현식을 찾습니다. 결과를 변경하지 않고 화살표 기능으로 대체 할 수있는 오류가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="6ece644467d2a9c81b29d68c0b7edf838ce2a95c" translate="yes" xml:space="preserve">
          <source>This rule looks for accessing a given property key on a given object name, either when reading the property's value or invoking it as a function. You may specify an optional message to indicate an alternative API or a reason for the restriction.</source>
          <target state="translated">이 규칙은 속성 값을 읽거나 함수로 호출 할 때 지정된 객체 이름에서 지정된 속성 키에 액세스하는 것을 찾습니다. 대체 API 또는 제한 사유를 표시하기 위해 선택적 메시지를 지정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="aaf2ff078c424bc14e83623d32e969252a2c3994" translate="yes" xml:space="preserve">
          <source>This rule looks for any underscores (&lt;code&gt;_&lt;/code&gt;) located within the source code. It ignores leading and trailing underscores and only checks those in the middle of a variable name. If ESLint decides that the variable is a constant (all uppercase), then no warning will be thrown. Otherwise, a warning will be thrown. This rule only flags definitions and assignments but not function calls. In case of ES6 &lt;code&gt;import&lt;/code&gt; statements, this rule only targets the name of the variable that will be imported into the local module scope.</source>
          <target state="translated">이 규칙은 소스 코드 내에 있는 밑줄 ( &lt;code&gt;_&lt;/code&gt; )을 찾습니다 . 선행 및 후행 밑줄을 무시하고 변수 이름 중간의 밑줄 만 확인합니다. ESLint가 변수가 상수 (모두 대문자)라고 결정하면 경고가 발생하지 않습니다. 그렇지 않으면 경고가 발생합니다. 이 규칙은 정의 및 할당에만 플래그를 지정하지만 함수 호출에는 플래그를 지정하지 않습니다. ES6 &lt;code&gt;import&lt;/code&gt; 문의 경우이 규칙은 로컬 모듈 범위로 가져올 변수의 이름 만 대상으로합니다.</target>
        </trans-unit>
        <trans-unit id="e0626c81467713cb589ff34f137e8fb8cfd1e940" translate="yes" xml:space="preserve">
          <source>This rule looks for tabs anywhere inside a file: code, comments or anything else.</source>
          <target state="translated">이 규칙은 파일 내에서 코드, 주석 또는 기타 탭을 찾습니다.</target>
        </trans-unit>
        <trans-unit id="fe6d5bb22323ad5d5647f61d91ef52f3f08fa9fe" translate="yes" xml:space="preserve">
          <source>This rule makes it possible to ensure, as some style guides require, that property specifications appear on separate lines for better readability. For example, you can prohibit all of these:</source>
          <target state="translated">이 규칙을 사용하면 일부 스타일 가이드에서 요구하는대로 가독성을 높이기 위해 속성 사양이 별도의 줄에 표시되도록 할 수 있습니다. 예를 들어 다음을 모두 금지 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e6c6fd0d733257023837aabbd888ed65fb93bb96" translate="yes" xml:space="preserve">
          <source>This rule may conflict with &lt;a href=&quot;no-extra-parens&quot;&gt;no-extra-parens&lt;/a&gt; rule. If you use both this and &lt;a href=&quot;no-extra-parens&quot;&gt;no-extra-parens&lt;/a&gt; rule together, you need to use the &lt;code&gt;nestedBinaryExpressions&lt;/code&gt; option of &lt;a href=&quot;no-extra-parens&quot;&gt;no-extra-parens&lt;/a&gt; rule.</source>
          <target state="translated">이 규칙은 &lt;a href=&quot;no-extra-parens&quot;&gt;여분&lt;/a&gt; 이 없는 규칙과 충돌 할 수 있습니다 . 둘 다 사용하는 경우이와 &lt;a href=&quot;no-extra-parens&quot;&gt;노 여분의 괄호는&lt;/a&gt; 당신이 사용할 필요가 함께 지배 &lt;code&gt;nestedBinaryExpressions&lt;/code&gt; 의 의 옵션 &lt;a href=&quot;no-extra-parens&quot;&gt;없는 여분의 괄호&lt;/a&gt; 규칙을.</target>
        </trans-unit>
        <trans-unit id="8037ce93151914686c514294bbb5a47669603902" translate="yes" xml:space="preserve">
          <source>This rule normalize style of spacing before/after an arrow function's arrow(&lt;code&gt;=&amp;gt;&lt;/code&gt;).</source>
          <target state="translated">이 규칙은 화살표 함수의 화살표 ( &lt;code&gt;=&amp;gt;&lt;/code&gt; ) 전후에 간격 스타일을 정규화 합니다.</target>
        </trans-unit>
        <trans-unit id="464d96f575968e66e1eb040bc112bd7c57f4d84f" translate="yes" xml:space="preserve">
          <source>This rule optionally takes a second argument, which should be an object with the following supported properties:</source>
          <target state="translated">이 규칙은 선택적으로 두 번째 인수를 사용하며 다음과 같은 지원되는 특성을 가진 오브젝트 여야합니다.</target>
        </trans-unit>
        <trans-unit id="9baace629bb134edd43e4c5267c9efc7ed36c31e" translate="yes" xml:space="preserve">
          <source>This rule permits you to restrict the locations of property specifications in object literals. You may prohibit any part of any property specification from appearing on the same line as any part of any other property specification. You may make this prohibition absolute, or, by invoking an object option, you may allow an exception, permitting an object literal to have all parts of all of its property specifications on a single line.</source>
          <target state="translated">이 규칙을 사용하면 객체 리터럴에서 속성 사양의 위치를 ​​제한 할 수 있습니다. 속성 사양의 일부가 다른 속성 사양의 일부와 동일한 줄에 표시되는 것을 금지 할 수 있습니다. 이 금지를 절대적으로 만들거나 개체 옵션을 호출하여 개체 리터럴이 모든 속성 사양의 모든 부분을 한 줄에 갖도록 허용하여 예외를 허용 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="42e1fb9cb344e3a8741f57ed93b48a730c10e3e8" translate="yes" xml:space="preserve">
          <source>This rule prevents the use of spaces before a semicolon in expressions.</source>
          <target state="translated">이 규칙은 표현식에서 세미콜론 앞에 공백을 사용하지 못하게합니다.</target>
        </trans-unit>
        <trans-unit id="9344d4181d9d19d2241916e31b569c7283b76ebe" translate="yes" xml:space="preserve">
          <source>This rule provides compatibility with treatment of global variables in &lt;a href=&quot;http://jshint.com/&quot;&gt;JSHint&lt;/a&gt; and &lt;a href=&quot;http://www.jslint.com&quot;&gt;JSLint&lt;/a&gt;.</source>
          <target state="translated">이 규칙은 &lt;a href=&quot;http://jshint.com/&quot;&gt;JSHint&lt;/a&gt; 및 &lt;a href=&quot;http://www.jslint.com&quot;&gt;JSLint&lt;/a&gt; 의 전역 변수 처리와의 호환성을 제공합니다 .</target>
        </trans-unit>
        <trans-unit id="9b214579f0990ddb2ff473b51002db1c7d40b204" translate="yes" xml:space="preserve">
          <source>This rule reports &lt;code&gt;catch&lt;/code&gt; clauses that only &lt;code&gt;throw&lt;/code&gt; the caught error.</source>
          <target state="translated">이 규칙 보고서는 &lt;code&gt;catch&lt;/code&gt; 만 절을 &lt;code&gt;throw&lt;/code&gt; 잡힌 오류가 발생했습니다.</target>
        </trans-unit>
        <trans-unit id="86ccc54835bd27114caf48473e26f3403799e952" translate="yes" xml:space="preserve">
          <source>This rule reports comments that include any of the predefined terms specified in its configuration.</source>
          <target state="translated">이 규칙은 구성에 지정된 사전 정의 된 용어가 포함 된 주석을보고합니다.</target>
        </trans-unit>
        <trans-unit id="7203ab3e2552fc284d4c7e35257ffb49ab0e5bda" translate="yes" xml:space="preserve">
          <source>This rule reports line terminators around semicolons.</source>
          <target state="translated">이 규칙은 세미콜론 주위의 줄 종결자를보고합니다.</target>
        </trans-unit>
        <trans-unit id="c31d1fb3de11835c7945c7c990282db76d0347ec" translate="yes" xml:space="preserve">
          <source>This rule reports the regular expressions which include multiple code point characters in character class syntax.</source>
          <target state="translated">이 규칙은 문자 클래스 구문에 여러 코드 포인트 문자를 포함하는 정규식을보고합니다.</target>
        </trans-unit>
        <trans-unit id="3dcc1bc4f904048de1bf50d6256dfff027039954" translate="yes" xml:space="preserve">
          <source>This rule reports the regular expressions which include multiple code point characters in character class syntax. This rule considers the following characters as multiple code point characters.</source>
          <target state="translated">이 규칙은 문자 클래스 구문에 여러 코드 포인트 문자를 포함하는 정규식을보고합니다. 이 규칙은 다음 문자를 여러 코드 포인트 문자로 간주합니다.</target>
        </trans-unit>
        <trans-unit id="341b6ded2aa352fc643dd7e057d61170be9ad829" translate="yes" xml:space="preserve">
          <source>This rule requires &lt;code&gt;return&lt;/code&gt; statements to either always or never specify values. This rule ignores function definitions where the name begins with an uppercase letter, because constructors (when invoked with the &lt;code&gt;new&lt;/code&gt; operator) return the instantiated object implicitly if they do not return another object explicitly.</source>
          <target state="translated">이 규칙에는 항상 값을 지정하거나 지정하지 않는 &lt;code&gt;return&lt;/code&gt; 문 이 필요 합니다. 이 규칙은 이름이 대문자로 시작하는 함수 정의를 무시합니다. &lt;code&gt;new&lt;/code&gt; 연산자로 호출 할 때 생성자가 다른 객체를 명시 적으로 반환하지 않으면 인스턴스화 된 객체가 암시 적으로 반환 되기 때문 입니다.</target>
        </trans-unit>
        <trans-unit id="ee3453de508c549ff19a5f0b11826be286a05d96" translate="yes" xml:space="preserve">
          <source>This rule requires JSDoc comments for specified nodes. Supported nodes:</source>
          <target state="translated">이 규칙에는 지정된 노드에 대한 JSDoc 주석이 필요합니다. 지원되는 노드 :</target>
        </trans-unit>
        <trans-unit id="cec9a26dc266b4eb2c9c2da3663bcc6a85dec09a" translate="yes" xml:space="preserve">
          <source>This rule requires a newline after each call in a method chain or deep member access. Computed property accesses such as &lt;code&gt;instance[something]&lt;/code&gt; are excluded.</source>
          <target state="translated">이 규칙은 메소드 체인 또는 딥 멤버 액세스에서 각 호출 후 줄 바꿈이 필요합니다. &lt;code&gt;instance[something]&lt;/code&gt; 과 같은 계산 된 속성 액세스 는 제외됩니다.</target>
        </trans-unit>
        <trans-unit id="f95ad21be29bb1ede776ca2426d292d0dd3966e4" translate="yes" xml:space="preserve">
          <source>This rule requires all calls to &lt;code&gt;require()&lt;/code&gt; to be at the top level of the module, similar to ES6 &lt;code&gt;import&lt;/code&gt; and &lt;code&gt;export&lt;/code&gt; statements, which also can occur only at the top level.</source>
          <target state="translated">이 규칙은 &lt;code&gt;require()&lt;/code&gt; 에 대한 모든 호출 이 모듈의 최상위 수준에 있어야하며 ES6 &lt;code&gt;import&lt;/code&gt; 및 &lt;code&gt;export&lt;/code&gt; 문과 비슷 하며 최상위 수준에서만 발생할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="0177d9705774367a5c4aa0718fbbf2bd9ba69779" translate="yes" xml:space="preserve">
          <source>This rule requires all immediately-invoked function expressions to be wrapped in parentheses.</source>
          <target state="translated">이 규칙은 모든 즉시 호출 된 함수 표현식을 괄호로 묶어야합니다.</target>
        </trans-unit>
        <trans-unit id="e9e72f8218177dd1f7a1a226aff9535bffa2d8f5" translate="yes" xml:space="preserve">
          <source>This rule requires an empty line before &lt;code&gt;return&lt;/code&gt; statements to increase code clarity, except when the &lt;code&gt;return&lt;/code&gt; is alone inside a statement group (such as an if statement). In the latter case, the &lt;code&gt;return&lt;/code&gt; statement does not need to be delineated by virtue of it being alone. Comments are ignored and do not count as empty lines.</source>
          <target state="translated">이 규칙은 이전에 빈 줄 필요 &lt;code&gt;return&lt;/code&gt; 경우를 제외하고, 코드의 명확성을 높이기 위해 문을 &lt;code&gt;return&lt;/code&gt; (예 : if 문 같은) 문 그룹 내 혼자입니다. 후자의 경우에, &lt;code&gt;return&lt;/code&gt; 진술은 그것이 단독이기 때문에 설명 될 필요가 없다. 주석은 무시되며 빈 줄로 계산되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="bf9d62bda82c79ce01bd453293ce707585038d1f" translate="yes" xml:space="preserve">
          <source>This rule requires constructor names to begin with a capital letter. Certain built-in identifiers are exempt from this rule. These identifiers are:</source>
          <target state="translated">이 규칙은 생성자 이름이 대문자로 시작해야합니다. 특정 내장 식별자는이 규칙에서 제외됩니다. 이러한 식별자는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="9b1667cd42998acba334e40e3675461c6f6ea647" translate="yes" xml:space="preserve">
          <source>This rule requires empty lines before and/or after comments. It can be enabled separately for both block (&lt;code&gt;/*&lt;/code&gt;) and line (&lt;code&gt;//&lt;/code&gt;) comments. This rule does not apply to comments that appear on the same line as code and does not require empty lines at the beginning or end of a file.</source>
          <target state="translated">이 규칙에는 주석 전후에 빈 줄이 필요합니다. 블록 ( &lt;code&gt;/*&lt;/code&gt; ) 및 행 ( &lt;code&gt;//&lt;/code&gt; ) 주석 모두에 대해 별도로 활성화 할 수 있습니다 . 이 규칙은 코드와 같은 줄에 나타나는 주석에는 적용되지 않으며 파일의 시작 또는 끝에 빈 줄이 필요하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="8b344cf66704dc0e8c5d9619033160b8935d092d" translate="yes" xml:space="preserve">
          <source>This rule requires function names to match the name of the variable or property to which they are assigned. The rule will ignore property assignments where the property name is a literal that is not a valid identifier in the ECMAScript version specified in your configuration (default ES5).</source>
          <target state="translated">이 규칙에는 함수 이름이 할당 된 변수 또는 속성의 이름과 일치해야합니다. 규칙은 속성 이름이 구성에 지정된 ECMAScript 버전에서 유효한 식별자가 아닌 리터럴 인 속성 할당을 무시합니다 (기본 ES5).</target>
        </trans-unit>
        <trans-unit id="8e3ecea5100b9cfb30c6850203c63a3e999ae46a" translate="yes" xml:space="preserve">
          <source>This rule requires grouped definitions of accessor functions for the same property in object literals, class declarations and class expressions.</source>
          <target state="translated">이 규칙에는 객체 리터럴, 클래스 선언 및 클래스 표현식에서 동일한 속성에 대한 접근 자 함수의 그룹화 된 정의가 필요합니다.</target>
        </trans-unit>
        <trans-unit id="c6f6a421235f2b2c80fa80eed59abe0f68217d99" translate="yes" xml:space="preserve">
          <source>This rule requires identifiers in assignments and &lt;code&gt;function&lt;/code&gt; definitions to match a specified regular expression.</source>
          <target state="translated">이 규칙에는 지정된 정규식과 일치하기 위해 할당 및 &lt;code&gt;function&lt;/code&gt; 정의의 식별자가 필요합니다 .</target>
        </trans-unit>
        <trans-unit id="6c51336293652cc83ca8728f02c79367cda21e9d" translate="yes" xml:space="preserve">
          <source>This rule requires or disallows assignment operator shorthand where possible.</source>
          <target state="translated">이 규칙은 가능한 경우 할당 연산자 속기를 요구하거나 허용하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="22f10b36cba6586758eaf8ebcdbe60c0ebb48fbd" translate="yes" xml:space="preserve">
          <source>This rule requires or disallows blank lines between the given 2 kinds of statements. Properly blank lines help developers to understand the code.</source>
          <target state="translated">이 규칙은 주어진 두 종류의 진술 사이에 빈 줄을 요구하거나 허용하지 않습니다. 빈 줄은 개발자가 코드를 이해하는 데 도움이됩니다.</target>
        </trans-unit>
        <trans-unit id="5c859565f0d1ede643bfaafb3ac34fd0dc296134" translate="yes" xml:space="preserve">
          <source>This rule requires or disallows blank newlines around directive prologues. This rule does not enforce any conventions about blank newlines between the individual directives. In addition, it does not require blank newlines before directive prologues unless they are preceded by a comment. Please use the &lt;a href=&quot;padded-blocks&quot;&gt;padded-blocks&lt;/a&gt; rule if this is a style you would like to enforce.</source>
          <target state="translated">이 규칙은 지시문 프롤로그 주위에 빈 줄 바꿈을 요구하거나 허용하지 않습니다. 이 규칙은 개별 지시문 사이에 빈 줄 바꿈에 대한 규칙을 적용하지 않습니다. 또한 지시문이 나오지 않는 한 지시문 프롤로그 앞에 빈 줄 바꾸기가 필요하지 않습니다. 사용하시기 바랍니다 &lt;a href=&quot;padded-blocks&quot;&gt;패딩 블록의&lt;/a&gt; 이 당신이 적용하고 싶은 스타일 인 경우 규칙을.</target>
        </trans-unit>
        <trans-unit id="36f7341079241df9a4b2bc7451566985affaf21d" translate="yes" xml:space="preserve">
          <source>This rule requires or disallows global strict mode invoked by a &lt;code&gt;&quot;use strict&quot;&lt;/code&gt; pragma in the global scope.</source>
          <target state="translated">이 규칙은 전역 범위에서 &lt;code&gt;&quot;use strict&quot;&lt;/code&gt; pragma에 의해 호출 된 전역 엄격 모드를 요구하거나 허용하지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="1fc8f67c63328a85e17bae0b63d1e86f046a16cd" translate="yes" xml:space="preserve">
          <source>This rule requires or disallows spaces between the function name and the opening parenthesis that calls it.</source>
          <target state="translated">이 규칙은 함수 이름과이를 호출하는 여는 괄호 사이에 공백을 요구하거나 허용하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="0ab58631693b6855e4a8251c15c028da7aefe4d3" translate="yes" xml:space="preserve">
          <source>This rule requires or disallows strict mode directives.</source>
          <target state="translated">이 규칙은 엄격 모드 지시문을 요구하거나 허용하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="57f0399ff9843ec83d529b9015c1a7cc83634568" translate="yes" xml:space="preserve">
          <source>This rule requires quotes around object literal property names.</source>
          <target state="translated">이 규칙에는 객체 리터럴 속성 이름을 따옴표로 묶어야합니다.</target>
        </trans-unit>
        <trans-unit id="4ff93f7cafef4d6cf7e4c4ed239aaafdf010c4c0" translate="yes" xml:space="preserve">
          <source>This rule requires that all imports from a single module exists in a single &lt;code&gt;import&lt;/code&gt; statement.</source>
          <target state="translated">이 규칙을 사용하려면 단일 모듈의 모든 가져 &lt;code&gt;import&lt;/code&gt; 가 단일 가져 오기 문에 있어야합니다 .</target>
        </trans-unit>
        <trans-unit id="8e8edba64ba736d9f931bbdd0fd29d127cce08a0" translate="yes" xml:space="preserve">
          <source>This rule requires that function declarations and, optionally, variable declarations be in the root of a program or the body of a function.</source>
          <target state="translated">이 규칙에는 함수 선언이 필요하고 선택적으로 변수 선언은 프로그램의 루트 또는 함수 본문에 있어야합니다.</target>
        </trans-unit>
        <trans-unit id="53cfd9d729e8a263c0ddf818bb9f5eab7ee800a9" translate="yes" xml:space="preserve">
          <source>This rule restricts the use of parentheses to only where they are necessary.</source>
          <target state="translated">이 규칙은 괄호 사용이 필요한 경우에만 사용하도록 제한합니다.</target>
        </trans-unit>
        <trans-unit id="cef2b23a2f6a1633d7f45584fec2639671e225c6" translate="yes" xml:space="preserve">
          <source>This rule restricts what can be thrown as an exception. When it was first created, it only prevented literals from being thrown (hence the name), but it has now been expanded to only allow expressions which have a possibility of being an &lt;code&gt;Error&lt;/code&gt; object.</source>
          <target state="translated">이 규칙은 예외로 던질 수있는 것을 제한합니다. 처음 만들어 졌을 때 리터럴이 던져지지 않았으므로 (따라서 이름), 이제는 &lt;code&gt;Error&lt;/code&gt; 객체 일 가능성이있는 표현식 만 허용하도록 확장되었습니다 .</target>
        </trans-unit>
        <trans-unit id="c24e65c6fcdc1b378a60d46be96c51dbb547de6d" translate="yes" xml:space="preserve">
          <source>This rule should not be used in ES3/5 environments.</source>
          <target state="translated">ES3 / 5 환경에서는이 규칙을 사용하지 않아야합니다.</target>
        </trans-unit>
        <trans-unit id="24acb5e74167bd0bbfd66efd587e2707275f2d12" translate="yes" xml:space="preserve">
          <source>This rule should not be used in ES3/5 environments. In addition, this rule can be safely turned off if you don't want to enforce presence of &lt;code&gt;description&lt;/code&gt; when creating Symbols.</source>
          <target state="translated">ES3 / 5 환경에서는이 규칙을 사용하지 않아야합니다. 또한 심볼을 만들 때 &lt;code&gt;description&lt;/code&gt; 이없는 경우이 규칙을 안전하게 해제 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="151c41d8b4dc7702d9553b44714eec4695467e52" translate="yes" xml:space="preserve">
          <source>This rule should not be used unless ES2016 is supported in your codebase.</source>
          <target state="translated">코드 규칙에서 ES2016이 지원되지 않으면이 규칙을 사용해서는 안됩니다.</target>
        </trans-unit>
        <trans-unit id="0a5f78acac29dc36cd309e293b513159ad726d5a" translate="yes" xml:space="preserve">
          <source>This rule should not be used unless ES2018 is supported in your codebase.</source>
          <target state="translated">코드베이스에서 ES2018이 지원되지 않는 한이 규칙을 사용해서는 안됩니다.</target>
        </trans-unit>
        <trans-unit id="ba5e010c2d80cf6332f4d78e262ee0df96cd6c16" translate="yes" xml:space="preserve">
          <source>This rule takes a list of objects, where the object name and property names are specified:</source>
          <target state="translated">이 규칙은 객체 이름과 속성 이름이 지정된 객체 목록을 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="0b02f979bb1e5b0404a2b2da410003ab016f4ebd" translate="yes" xml:space="preserve">
          <source>This rule takes a list of strings, where each string is a global to be restricted:</source>
          <target state="translated">이 규칙은 문자열 목록을 가져옵니다. 여기서 각 문자열은 전역 적으로 제한됩니다.</target>
        </trans-unit>
        <trans-unit id="b201ae39f465f167a6f7078200eb2b3626059f5e" translate="yes" xml:space="preserve">
          <source>This rule takes a list of strings, where each string is an AST selector:</source>
          <target state="translated">이 규칙은 문자열 목록을 가져옵니다. 여기서 각 문자열은 AST 선택기입니다.</target>
        </trans-unit>
        <trans-unit id="82b286a5fe6ed277f08bedb934e5ba7461eea738" translate="yes" xml:space="preserve">
          <source>This rule takes an object argument with &lt;code&gt;before&lt;/code&gt; and &lt;code&gt;after&lt;/code&gt; properties, each with a Boolean value.</source>
          <target state="translated">이 규칙의 오브젝트 인수 얻어 &lt;code&gt;before&lt;/code&gt; 및 &lt;code&gt;after&lt;/code&gt; 부울 값 프로퍼티, 각.</target>
        </trans-unit>
        <trans-unit id="ef7b35502490d4261fd8713f1ba41161625386de" translate="yes" xml:space="preserve">
          <source>This rule takes an optional string of &quot;always&quot; or &quot;never&quot; (when omitted, it defaults to &quot;always&quot;), and an optional options object with two properties &lt;code&gt;considerPropertyDescriptor&lt;/code&gt; and &lt;code&gt;includeCommonJSModuleExports&lt;/code&gt;.</source>
          <target state="translated">이 규칙은 &quot;항상&quot;또는 &quot;절대로&quot;의 선택적 문자열을 사용합니다 ( &quot;항상&quot;으로, 기본값을 생략하는 경우), 및 선택 옵션은 두 가지 속성이 객체를 &lt;code&gt;considerPropertyDescriptor&lt;/code&gt; 및 &lt;code&gt;includeCommonJSModuleExports&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="d95c86b835fd844af2faf1d625ccd11d336d790a" translate="yes" xml:space="preserve">
          <source>This rule takes one argument which can be a string or an object. The string settings are the same as those of the &lt;code&gt;vars&lt;/code&gt; property (explained below).</source>
          <target state="translated">이 규칙은 문자열 또는 객체가 될 수있는 하나의 인수를 취합니다. 문자열 설정은 &lt;code&gt;vars&lt;/code&gt; 속성 의 설정과 동일 합니다 (아래 설명).</target>
        </trans-unit>
        <trans-unit id="61b52a64cc80497d13bf1f5087459fd9bf4f1964" translate="yes" xml:space="preserve">
          <source>This rule takes one argument, which can be a string or an object. The string settings are the same as those of the &lt;code&gt;position&lt;/code&gt; property (explained below). The object option has the following properties:</source>
          <target state="translated">이 규칙은 하나의 인수를 취하는데, 이는 문자열 또는 객체 일 수 있습니다. 문자열 설정은 &lt;code&gt;position&lt;/code&gt; 속성 (아래 설명)과 동일합니다. 객체 옵션에는 다음과 같은 속성이 있습니다.</target>
        </trans-unit>
        <trans-unit id="925c4aa1d0ad97e0afc5d3f1b41b3689f8b6569a" translate="yes" xml:space="preserve">
          <source>This rule takes one argument. If it is &lt;code&gt;&quot;always&quot;&lt;/code&gt; then blocks must always have at least one preceding space. If &lt;code&gt;&quot;never&quot;&lt;/code&gt; then all blocks should never have any preceding space. If different spacing is desired for function blocks, keyword blocks and classes, an optional configuration object can be passed as the rule argument to configure the cases separately. If any value in the configuration object is &lt;code&gt;&quot;off&quot;&lt;/code&gt;, then neither style will be enforced for blocks of that kind.</source>
          <target state="translated">이 규칙은 하나의 주장을 취합니다. 이 경우 &lt;code&gt;&quot;always&quot;&lt;/code&gt; 다음 블록은 항상 적어도 하나 개 앞의 공간이 있어야합니다. 경우 &lt;code&gt;&quot;never&quot;&lt;/code&gt; 모든 블록 중 어느 한 항에 공간이 안됩니다. 함수 블록, 키워드 블록 및 클래스에 서로 다른 간격이 필요한 경우 선택적 구성 개체를 규칙 인수로 전달하여 사례를 개별적으로 구성 할 수 있습니다. 구성 객체의 값이 &lt;code&gt;&quot;off&quot;&lt;/code&gt; 인 경우 해당 유형의 블록에 대해 스타일이 적용되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="0963778e2c1dedb94b331c8f2a270bc4d32e65ac" translate="yes" xml:space="preserve">
          <source>This rule takes one argument. If it is &lt;code&gt;&quot;always&quot;&lt;/code&gt; then the keywords must be followed by at least one space. If &lt;code&gt;&quot;never&quot;&lt;/code&gt; then there should be no spaces following. The default is &lt;code&gt;&quot;always&quot;&lt;/code&gt;.</source>
          <target state="translated">이 규칙은 하나의 주장을 취합니다. 이 경우 &lt;code&gt;&quot;always&quot;&lt;/code&gt; 다음 키워드는 적어도 하나의 공백해야합니다. 경우 &lt;code&gt;&quot;never&quot;&lt;/code&gt; 다음에 공백이 다음하지가 없어야합니다. 기본값은 &lt;code&gt;&quot;always&quot;&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="68e6e197c434d48e169b6986c95cbf5d52592e92" translate="yes" xml:space="preserve">
          <source>This rule takes one argument. If it is &lt;code&gt;&quot;always&quot;&lt;/code&gt;, which is the default option, all named functions and anonymous functions must have space before function parentheses. If &lt;code&gt;&quot;never&quot;&lt;/code&gt; then all named functions and anonymous functions must not have space before function parentheses. If you want different spacing for named and anonymous functions you can pass a configuration object as the rule argument to configure those separately (e. g. &lt;code&gt;{&quot;anonymous&quot;: &quot;always&quot;, &quot;named&quot;: &quot;never&quot;}&lt;/code&gt;).</source>
          <target state="translated">이 규칙은 하나의 주장을 취합니다. 이 경우 &lt;code&gt;&quot;always&quot;&lt;/code&gt; 기본 옵션 인 모든 이름이 지정된 함수와 익명 함수는 함수 괄호 전에 공간이 있어야합니다. 경우 &lt;code&gt;&quot;never&quot;&lt;/code&gt; 모든 이름 지정된 함수와 익명 함수는 함수 괄호 전에 공간이 있어야합니다. 명명 된 함수와 익명 함수에 서로 다른 간격을 원하면 구성 객체를 규칙 인수로 전달하여 개별적으로 구성 할 수 있습니다 (예 : &lt;code&gt;{&quot;anonymous&quot;: &quot;always&quot;, &quot;named&quot;: &quot;never&quot;}&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="3b267efe65f4c6431cd77e4ab353be6801239914" translate="yes" xml:space="preserve">
          <source>This rule takes one argument: &lt;code&gt;&quot;always&quot;&lt;/code&gt; or &lt;code&gt;&quot;never&quot;&lt;/code&gt;. If &lt;code&gt;&quot;always&quot;&lt;/code&gt; then the keywords must be preceded by at least one space. If &lt;code&gt;&quot;never&quot;&lt;/code&gt; then no spaces will be allowed before the keywords &lt;code&gt;else&lt;/code&gt;, &lt;code&gt;while&lt;/code&gt; (do...while), &lt;code&gt;finally&lt;/code&gt; and &lt;code&gt;catch&lt;/code&gt;. The default value is &lt;code&gt;&quot;always&quot;&lt;/code&gt;.</source>
          <target state="translated">이 규칙은 &lt;code&gt;&quot;always&quot;&lt;/code&gt; 또는 &lt;code&gt;&quot;never&quot;&lt;/code&gt; 중 하나의 인수를 사용 합니다. &lt;code&gt;&quot;always&quot;&lt;/code&gt; 경우 키워드 앞에 공백이 하나 이상 있어야합니다. 경우 &lt;code&gt;&quot;never&quot;&lt;/code&gt; 다음에 공백이 키워드 전에 허용되지 않습니다 &lt;code&gt;else&lt;/code&gt; , &lt;code&gt;while&lt;/code&gt; (할 ... 동안), &lt;code&gt;finally&lt;/code&gt; 하고 &lt;code&gt;catch&lt;/code&gt; . 기본값은 &lt;code&gt;&quot;always&quot;&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="921f45928af93ba562b5555f1761103f8b63f93f" translate="yes" xml:space="preserve">
          <source>This rule takes one option, an object, with a boolean property &lt;code&gt;&quot;props&quot;&lt;/code&gt;, and arrays &lt;code&gt;&quot;ignorePropertyModificationsFor&quot;&lt;/code&gt; and &lt;code&gt;&quot;ignorePropertyModificationsForRegex&quot;&lt;/code&gt;. &lt;code&gt;&quot;props&quot;&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt; by default. If &lt;code&gt;&quot;props&quot;&lt;/code&gt; is set to &lt;code&gt;true&lt;/code&gt;, this rule warns against the modification of parameter properties unless they're included in &lt;code&gt;&quot;ignorePropertyModificationsFor&quot;&lt;/code&gt; or &lt;code&gt;&quot;ignorePropertyModificationsForRegex&quot;&lt;/code&gt;, which is an empty array by default.</source>
          <target state="translated">이 규칙은 부울 속성이 &lt;code&gt;&quot;props&quot;&lt;/code&gt; 이고 &lt;code&gt;&quot;ignorePropertyModificationsFor&quot;&lt;/code&gt; 및 &lt;code&gt;&quot;ignorePropertyModificationsForRegex&quot;&lt;/code&gt; 배열을 갖는 하나의 옵션 인 객체를 사용합니다 . &lt;code&gt;&quot;props&quot;&lt;/code&gt; 는 기본적으로 &lt;code&gt;false&lt;/code&gt; 입니다. 경우 &lt;code&gt;&quot;props&quot;&lt;/code&gt; 로 설정 &lt;code&gt;true&lt;/code&gt; 그들이에 포함하지 않는 한,이 규칙은 매개 변수 속성의 수정에 대해 경고 &lt;code&gt;&quot;ignorePropertyModificationsFor&quot;&lt;/code&gt; 또는 &lt;code&gt;&quot;ignorePropertyModificationsForRegex&quot;&lt;/code&gt; 기본적으로 비어있는 배열입니다.</target>
        </trans-unit>
        <trans-unit id="1989e383b52a7c0690147a9f6a24292bd5b350e0" translate="yes" xml:space="preserve">
          <source>This rule takes one option, an object, with properties &lt;code&gt;&quot;builtinGlobals&quot;&lt;/code&gt;, &lt;code&gt;&quot;hoist&quot;&lt;/code&gt; and &lt;code&gt;&quot;allow&quot;&lt;/code&gt;.</source>
          <target state="translated">이 규칙은 &lt;code&gt;&quot;builtinGlobals&quot;&lt;/code&gt; , &lt;code&gt;&quot;hoist&quot;&lt;/code&gt; 및 &lt;code&gt;&quot;allow&quot;&lt;/code&gt; 속성이있는 하나의 옵션 인 객체를 사용합니다 .</target>
        </trans-unit>
        <trans-unit id="55cdaee2a0575694fdbef7580c26fdd32501b02c" translate="yes" xml:space="preserve">
          <source>This rule takes one option.</source>
          <target state="translated">이 규칙에는 하나의 옵션이 있습니다.</target>
        </trans-unit>
        <trans-unit id="d772fa94c11bdcbaaf11da3960b9dad0c56b7287" translate="yes" xml:space="preserve">
          <source>This rule takes one option: a string with the value of &lt;code&gt;&quot;never&quot;&lt;/code&gt; or &lt;code&gt;&quot;always&quot;&lt;/code&gt;. The default value is &lt;code&gt;&quot;never&quot;&lt;/code&gt;.</source>
          <target state="translated">이 규칙은 &lt;code&gt;&quot;never&quot;&lt;/code&gt; 또는 &lt;code&gt;&quot;always&quot;&lt;/code&gt; 값을 가진 문자열 중 하나의 옵션을 사용합니다 . 기본값은 &lt;code&gt;&quot;never&quot;&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="b91a4819236a2c8058289db3743ecb12444e779b" translate="yes" xml:space="preserve">
          <source>This rule takes one optional argument, an object with a boolean property &lt;code&gt;&quot;builtinGlobals&quot;&lt;/code&gt;. It defaults to &lt;code&gt;true&lt;/code&gt;. If set to &lt;code&gt;true&lt;/code&gt;, this rule also checks redeclaration of built-in globals, such as &lt;code&gt;Object&lt;/code&gt;, &lt;code&gt;Array&lt;/code&gt;, &lt;code&gt;Number&lt;/code&gt;...</source>
          <target state="translated">이 규칙은 부울 속성이 &lt;code&gt;&quot;builtinGlobals&quot;&lt;/code&gt; 인 객체 하나의 선택적 인수를 사용합니다 . 기본값은 &lt;code&gt;true&lt;/code&gt; 입니다. &lt;code&gt;true&lt;/code&gt; 로 설정된 경우이 규칙은 &lt;code&gt;Object&lt;/code&gt; , &lt;code&gt;Array&lt;/code&gt; , &lt;code&gt;Number&lt;/code&gt; ... 와 같은 내장 전역의 선언을 검사합니다 .</target>
        </trans-unit>
        <trans-unit id="b9cbcc761c175da60e181849bac41abcfeb1eb54" translate="yes" xml:space="preserve">
          <source>This rule takes one optional argument, an object with a single key, &lt;code&gt;includeExports&lt;/code&gt; which is a &lt;code&gt;boolean&lt;/code&gt;. It defaults to &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">이 규칙은 하나 개의 선택적 인수, 하나의 키와 객체, 소요 &lt;code&gt;includeExports&lt;/code&gt; A는 &lt;code&gt;boolean&lt;/code&gt; . 기본값은 &lt;code&gt;false&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="0b153c32b894cc5b1df1b907a860983e5820083f" translate="yes" xml:space="preserve">
          <source>This rule takes one optional object argument:</source>
          <target state="translated">이 규칙은 하나의 선택적 객체 인수를 취합니다.</target>
        </trans-unit>
        <trans-unit id="30aa84ef31b2b0e9486effe6efc775992ca799f6" translate="yes" xml:space="preserve">
          <source>This rule takes two arguments. If the first is &lt;code&gt;&quot;always&quot;&lt;/code&gt; then the &lt;code&gt;//&lt;/code&gt; must be followed by at least once whitespace. If &lt;code&gt;&quot;never&quot;&lt;/code&gt; then there should be no whitespace following. The default is &lt;code&gt;&quot;always&quot;&lt;/code&gt;.</source>
          <target state="translated">이 규칙은 두 가지 주장을 취합니다. 첫 번째가 &lt;code&gt;&quot;always&quot;&lt;/code&gt; 이면 &lt;code&gt;//&lt;/code&gt; 뒤에 공백이 한 번 이상 있어야합니다. 경우 &lt;code&gt;&quot;never&quot;&lt;/code&gt; 다음에 공백의 다음이 없어야합니다. 기본값은 &lt;code&gt;&quot;always&quot;&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="84d96e23bd49ca68e511d1e5e897131b026bcb0a" translate="yes" xml:space="preserve">
          <source>This rule takes two sets of configuration objects. The first object parameter determines what types of destructuring the rule applies to.</source>
          <target state="translated">이 규칙은 두 세트의 구성 객체를 사용합니다. 첫 번째 객체 매개 변수는 규칙이 적용되는 구조 해제 유형을 결정합니다.</target>
        </trans-unit>
        <trans-unit id="ae727accc6952dffe9642e70d5d9f54ce013860e" translate="yes" xml:space="preserve">
          <source>This rule warns async functions which have no &lt;code&gt;await&lt;/code&gt; expression.</source>
          <target state="translated">이 규칙은 &lt;code&gt;await&lt;/code&gt; 표현식 이없는 비동기 함수에 경고 합니다.</target>
        </trans-unit>
        <trans-unit id="74dd1649a62b8563503acf05aa42a909078345bb" translate="yes" xml:space="preserve">
          <source>This rule warns if setters are defined without getters. Using an option &lt;code&gt;getWithoutSet&lt;/code&gt;, it will warn if you have a getter without a setter also.</source>
          <target state="translated">이 규칙은 setter가 getter없이 정의되면 경고합니다. &lt;code&gt;getWithoutSet&lt;/code&gt; 옵션을 사용하면 setter가없는 getter가 있는지 경고합니다.</target>
        </trans-unit>
        <trans-unit id="1569e1ee08e710a201d5fae646056142b968ec87" translate="yes" xml:space="preserve">
          <source>This rule warns the assignments, increments, and decrements of imported bindings.</source>
          <target state="translated">이 규칙은 가져온 바인딩의 할당, 증분 및 감소를 경고합니다.</target>
        </trans-unit>
        <trans-unit id="b525b7aa7a74d04de20905491b2a8c8941e9d6ab" translate="yes" xml:space="preserve">
          <source>This rule was &lt;a href=&quot;https://eslint.org/blog/2018/11/jsdoc-end-of-life&quot;&gt;&lt;strong&gt;deprecated&lt;/strong&gt;&lt;/a&gt; in ESLint v5.10.0.</source>
          <target state="translated">이 규칙은 ESLint v5.10.0에서 &lt;a href=&quot;https://eslint.org/blog/2018/11/jsdoc-end-of-life&quot;&gt;&lt;strong&gt;더 이상 사용되지 않습니다&lt;/strong&gt;&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="97dcd4f368c345500c003b3e841d0a8400962324" translate="yes" xml:space="preserve">
          <source>This rule was &lt;strong&gt;deprecated&lt;/strong&gt; in ESLint v3.3.0 and replaced by the &lt;a href=&quot;func-call-spacing&quot;&gt;func-call-spacing&lt;/a&gt; rule.</source>
          <target state="translated">이 규칙은 ESLint v3.3.0에서 &lt;strong&gt;더 이상 사용되지 않으며 &lt;/strong&gt;&lt;a href=&quot;func-call-spacing&quot;&gt;func-call-spacing&lt;/a&gt; 규칙으로 대체되었습니다 .</target>
        </trans-unit>
        <trans-unit id="8ff1d82e180ba1773cb4a72ab00704f0010e710d" translate="yes" xml:space="preserve">
          <source>This rule was &lt;strong&gt;deprecated&lt;/strong&gt; in ESLint v3.3.0 and replaced by the &lt;a href=&quot;no-global-assign&quot;&gt;no-global-assign&lt;/a&gt; rule.</source>
          <target state="translated">이 규칙은 ESLint v3.3.0에서 &lt;strong&gt;더 이상 사용되지 않으며 &lt;/strong&gt;&lt;a href=&quot;no-global-assign&quot;&gt;no-global-assign&lt;/a&gt; 규칙으로 대체되었습니다 .</target>
        </trans-unit>
        <trans-unit id="1fb4dbae98047dd2a77e76468bbbd39dfc1c4441" translate="yes" xml:space="preserve">
          <source>This rule was &lt;strong&gt;deprecated&lt;/strong&gt; in ESLint v3.3.0 and replaced by the &lt;a href=&quot;no-unsafe-negation&quot;&gt;no-unsafe-negation&lt;/a&gt; rule.</source>
          <target state="translated">이 규칙은 ESLint v3.3.0에서 &lt;strong&gt;더 이상 사용되지 않으며 &lt;/strong&gt;&lt;a href=&quot;no-unsafe-negation&quot;&gt;안전하지 않은 부정&lt;/a&gt; 규칙으로 대체되었습니다 .</target>
        </trans-unit>
        <trans-unit id="6ba68fa34738bb389e81154d113b01d469e1d65a" translate="yes" xml:space="preserve">
          <source>This rule was &lt;strong&gt;deprecated&lt;/strong&gt; in ESLint v3.9.0 and will not be replaced. The original intent of this rule now seems misguided as we have come to understand that &lt;code&gt;Reflect&lt;/code&gt; methods are not actually intended to replace the &lt;code&gt;Object&lt;/code&gt; counterparts the rule suggests, but rather exist as low-level primitives to be used with proxies in order to replicate the default behavior of various previously existing functionality.</source>
          <target state="translated">이 규칙은 ESLint v3.9.0에서 &lt;strong&gt;더 이상 사용되지 않으며&lt;/strong&gt; 대체되지 않습니다. &lt;code&gt;Reflect&lt;/code&gt; 메소드는 실제로 규칙이 제안 하는 &lt;code&gt;Object&lt;/code&gt; 를 대체하기위한 것이 아니라 기본값을 복제하기 위해 프록시와 함께 사용되는 저수준 프리미티브로 존재 한다는 것을 이해하기 때문에이 규칙의 원래 의도는 잘못 안내 된 것 같습니다. 기존의 다양한 기능의 동작</target>
        </trans-unit>
        <trans-unit id="ce83f16eb6dd78df693370a9b8ab5161bcba25c0" translate="yes" xml:space="preserve">
          <source>This rule was &lt;strong&gt;deprecated&lt;/strong&gt; in ESLint v4.0.0 and replaced by the &lt;a href=&quot;padding-line-between-statements&quot;&gt;padding-line-between-statements&lt;/a&gt; rule.</source>
          <target state="translated">이 규칙은 ESLint v4.0.0 에서 &lt;strong&gt;더 이상 사용되지 않으며 &lt;/strong&gt;&lt;a href=&quot;padding-line-between-statements&quot;&gt;padding-line-between-&lt;/a&gt; stateween -statements 규칙으로 대체되었습니다 .</target>
        </trans-unit>
        <trans-unit id="595a0b53c9e454f2413cf7e2261c656c0f5d6fdb" translate="yes" xml:space="preserve">
          <source>This rule was &lt;strong&gt;deprecated&lt;/strong&gt; in ESLint v5.1.0.</source>
          <target state="translated">이 규칙은 ESLint v5.1.0에서 &lt;strong&gt;더 이상 사용되지 않습니다&lt;/strong&gt; .</target>
        </trans-unit>
        <trans-unit id="ac5a312f0cda349b78539a394ba1c7fd59148665" translate="yes" xml:space="preserve">
          <source>This rule was &lt;strong&gt;removed&lt;/strong&gt; in ESLint v0.10.0 and &lt;strong&gt;replaced&lt;/strong&gt; by the &lt;a href=&quot;space-unary-ops&quot;&gt;space-unary-ops&lt;/a&gt; rule.</source>
          <target state="translated">이 규칙은 ESLint v0.10.0에서 &lt;strong&gt;제거&lt;/strong&gt; 되었으며 &lt;a href=&quot;space-unary-ops&quot;&gt;space-unary-ops&lt;/a&gt; 규칙으로 &lt;strong&gt;대체&lt;/strong&gt; 되었습니다 .</target>
        </trans-unit>
        <trans-unit id="7acd7fc95d09451c1a526d7f453870f07f1aac69" translate="yes" xml:space="preserve">
          <source>This rule was &lt;strong&gt;removed&lt;/strong&gt; in ESLint v1.0 and &lt;strong&gt;replaced&lt;/strong&gt; by the &lt;a href=&quot;comma-dangle&quot;&gt;comma-dangle&lt;/a&gt; rule.</source>
          <target state="translated">이 규칙은 ESLint v1.0에서 &lt;strong&gt;제거&lt;/strong&gt; 되었으며 &lt;a href=&quot;comma-dangle&quot;&gt;쉼표-&lt;/a&gt; 댕글 규칙으로 &lt;strong&gt;대체&lt;/strong&gt; 되었습니다 .</target>
        </trans-unit>
        <trans-unit id="9fea70d644ca508ec2677a3f96f76959ba74e28c" translate="yes" xml:space="preserve">
          <source>This rule was &lt;strong&gt;removed&lt;/strong&gt; in ESLint v1.0 and &lt;strong&gt;replaced&lt;/strong&gt; by the &lt;a href=&quot;generator-star-spacing&quot;&gt;generator-star-spacing&lt;/a&gt; rule.</source>
          <target state="translated">이 규칙은 ESLint v1.0에서 &lt;strong&gt;제거&lt;/strong&gt; 되었으며 &lt;a href=&quot;generator-star-spacing&quot;&gt;generator-star-spacing&lt;/a&gt; 규칙으로 &lt;strong&gt;대체&lt;/strong&gt; 되었습니다 .</target>
        </trans-unit>
        <trans-unit id="454a8fed474e9b1a63295584bcba33699571409b" translate="yes" xml:space="preserve">
          <source>This rule was &lt;strong&gt;removed&lt;/strong&gt; in ESLint v1.0 and &lt;strong&gt;replaced&lt;/strong&gt; by the &lt;a href=&quot;no-empty-character-class&quot;&gt;no-empty-character-class&lt;/a&gt; rule.</source>
          <target state="translated">이 규칙은 ESLint v1.0에서 &lt;strong&gt;제거&lt;/strong&gt; 되었으며 &lt;a href=&quot;no-empty-character-class&quot;&gt;비어 있지 않은 문자 클래스&lt;/a&gt; 규칙으로 &lt;strong&gt;대체&lt;/strong&gt; 되었습니다 .</target>
        </trans-unit>
        <trans-unit id="3a4df1f13d548677fdf37e3b26d0ecaaf861ecd9" translate="yes" xml:space="preserve">
          <source>This rule was &lt;strong&gt;removed&lt;/strong&gt; in ESLint v1.0 and &lt;strong&gt;replaced&lt;/strong&gt; by the &lt;a href=&quot;no-extra-parens&quot;&gt;no-extra-parens&lt;/a&gt; rule. The &lt;code&gt;&quot;functions&quot;&lt;/code&gt; option in the new rule is equivalent to the removed rule.</source>
          <target state="translated">이 규칙은 한 &lt;strong&gt;제거&lt;/strong&gt; ESLint v1.0을과 &lt;strong&gt;대체&lt;/strong&gt; 에 의해 &lt;a href=&quot;no-extra-parens&quot;&gt;노 여분 괄호의&lt;/a&gt; 규칙입니다. 새 규칙 의 &lt;code&gt;&quot;functions&quot;&lt;/code&gt; 옵션은 제거 된 규칙과 동일합니다.</target>
        </trans-unit>
        <trans-unit id="a5b108031efa91ff62ed16986898b592f2099523" translate="yes" xml:space="preserve">
          <source>This rule was &lt;strong&gt;removed&lt;/strong&gt; in ESLint v1.0 and &lt;strong&gt;replaced&lt;/strong&gt; by the &lt;a href=&quot;object-curly-spacing&quot;&gt;object-curly-spacing&lt;/a&gt; and &lt;a href=&quot;array-bracket-spacing&quot;&gt;array-bracket-spacing&lt;/a&gt; rules.</source>
          <target state="translated">이 규칙은 ESLint v1.0에서 &lt;strong&gt;제거&lt;/strong&gt; 되었으며 &lt;a href=&quot;object-curly-spacing&quot;&gt;객체-구간 간격&lt;/a&gt; 및 &lt;a href=&quot;array-bracket-spacing&quot;&gt;배열-구간 간격&lt;/a&gt; 규칙으로 &lt;strong&gt;대체&lt;/strong&gt; 되었습니다 .</target>
        </trans-unit>
        <trans-unit id="15310b4262bdc098c85186e1c940ab4bc35713bd" translate="yes" xml:space="preserve">
          <source>This rule was &lt;strong&gt;removed&lt;/strong&gt; in ESLint v1.0 and &lt;strong&gt;replaced&lt;/strong&gt; by the &lt;a href=&quot;quote-props&quot;&gt;quote-props&lt;/a&gt; rule.</source>
          <target state="translated">이 규칙은 ESLint v1.0에서 &lt;strong&gt;제거&lt;/strong&gt; 되었으며 &lt;a href=&quot;quote-props&quot;&gt;quote-props&lt;/a&gt; 규칙으로 &lt;strong&gt;대체&lt;/strong&gt; 되었습니다 .</target>
        </trans-unit>
        <trans-unit id="806e99ea6529d453ff4fea7b67ef7d9411e7fc0b" translate="yes" xml:space="preserve">
          <source>This rule was &lt;strong&gt;removed&lt;/strong&gt; in ESLint v1.0 and &lt;strong&gt;replaced&lt;/strong&gt; by the &lt;a href=&quot;semi-spacing&quot;&gt;semi-spacing&lt;/a&gt; rule.</source>
          <target state="translated">이 규칙은 ESLint v1.0에서 &lt;strong&gt;제거&lt;/strong&gt; 되었으며 &lt;a href=&quot;semi-spacing&quot;&gt;세미 간격&lt;/a&gt; 규칙으로 &lt;strong&gt;대체&lt;/strong&gt; 되었습니다 .</target>
        </trans-unit>
        <trans-unit id="1433b9d464125b94ed46f2687a9a766095f2913f" translate="yes" xml:space="preserve">
          <source>This rule was &lt;strong&gt;removed&lt;/strong&gt; in ESLint v1.0 and &lt;strong&gt;replaced&lt;/strong&gt; by the &lt;a href=&quot;space-before-function-paren&quot;&gt;space-before-function-paren&lt;/a&gt; rule.</source>
          <target state="translated">이 규칙은 ESLint v1.0에서 &lt;strong&gt;제거&lt;/strong&gt; 되었고 기능별 &lt;a href=&quot;space-before-function-paren&quot;&gt;공간&lt;/a&gt; 규칙으로 &lt;strong&gt;대체&lt;/strong&gt; 되었습니다 .</target>
        </trans-unit>
        <trans-unit id="bfdf120e55f7a281a7a557f08326c688dd338dfd" translate="yes" xml:space="preserve">
          <source>This rule was &lt;strong&gt;removed&lt;/strong&gt; in ESLint v1.0 and &lt;strong&gt;replaced&lt;/strong&gt; by the &lt;a href=&quot;space-before-function-paren&quot;&gt;space-before-function-paren&lt;/a&gt; rule. The name of the rule changed from &quot;parentheses&quot; to &quot;paren&quot; for consistency with the names of other rules.</source>
          <target state="translated">이 규칙은 ESLint v1.0에서 &lt;strong&gt;제거&lt;/strong&gt; 되었고 기능별 &lt;a href=&quot;space-before-function-paren&quot;&gt;공간&lt;/a&gt; 규칙으로 &lt;strong&gt;대체&lt;/strong&gt; 되었습니다 . 다른 규칙의 이름과 일치하도록 규칙 이름이 &quot;괄호&quot;에서 &quot;paren&quot;으로 변경되었습니다.</target>
        </trans-unit>
        <trans-unit id="86775760ef9fb1f3cfe8506df115fa50fad7b3da" translate="yes" xml:space="preserve">
          <source>This rule was &lt;strong&gt;removed&lt;/strong&gt; in ESLint v1.0 and &lt;strong&gt;replaced&lt;/strong&gt; by the &lt;a href=&quot;spaced-comment&quot;&gt;spaced-comment&lt;/a&gt; rule.</source>
          <target state="translated">이 규칙은 ESLint v1.0에서 &lt;strong&gt;제거&lt;/strong&gt; 되었으며 공백 &lt;a href=&quot;spaced-comment&quot;&gt;주석&lt;/a&gt; 규칙 으로 &lt;strong&gt;대체&lt;/strong&gt; 되었습니다 .</target>
        </trans-unit>
        <trans-unit id="4d22e86fae8a14e5447a82e7f0330e058279ab58" translate="yes" xml:space="preserve">
          <source>This rule was &lt;strong&gt;removed&lt;/strong&gt; in ESLint v1.0 and &lt;strong&gt;replaced&lt;/strong&gt; by the &lt;a href=&quot;strict&quot;&gt;strict&lt;/a&gt; rule. The &lt;code&gt;&quot;global&quot;&lt;/code&gt; option in the new rule is most similar to the removed rule.</source>
          <target state="translated">이 규칙은 ESLint v1.0에서 &lt;strong&gt;제거&lt;/strong&gt; 되었으며 &lt;a href=&quot;strict&quot;&gt;엄격한&lt;/a&gt; 규칙으로 &lt;strong&gt;대체&lt;/strong&gt; 되었습니다 . 새 규칙 의 &lt;code&gt;&quot;global&quot;&lt;/code&gt; 옵션은 제거 된 규칙과 가장 유사합니다.</target>
        </trans-unit>
        <trans-unit id="9100ed1e2a807ef9327b2f5d35415892fa86cb22" translate="yes" xml:space="preserve">
          <source>This rule was &lt;strong&gt;removed&lt;/strong&gt; in ESLint v1.0 and &lt;strong&gt;replaced&lt;/strong&gt; by the &lt;a href=&quot;strict&quot;&gt;strict&lt;/a&gt; rule. The &lt;code&gt;&quot;global&quot;&lt;/code&gt; or &lt;code&gt;&quot;function&quot;&lt;/code&gt; options in the new rule are similar to the removed rule.</source>
          <target state="translated">이 규칙은 ESLint v1.0에서 &lt;strong&gt;제거&lt;/strong&gt; 되었으며 &lt;a href=&quot;strict&quot;&gt;엄격한&lt;/a&gt; 규칙으로 &lt;strong&gt;대체&lt;/strong&gt; 되었습니다 . 새 규칙 의 &lt;code&gt;&quot;global&quot;&lt;/code&gt; 또는 &lt;code&gt;&quot;function&quot;&lt;/code&gt; 옵션은 제거 된 규칙과 유사합니다.</target>
        </trans-unit>
        <trans-unit id="9f89e766710bf630ced43da3e69bce3992f2c41b" translate="yes" xml:space="preserve">
          <source>This rule was &lt;strong&gt;removed&lt;/strong&gt; in ESLint v2.0 and &lt;strong&gt;replaced&lt;/strong&gt; by a combination of the &lt;a href=&quot;no-confusing-arrow&quot;&gt;no-confusing-arrow&lt;/a&gt; and &lt;a href=&quot;no-constant-condition&quot;&gt;no-constant-condition&lt;/a&gt; rules.</source>
          <target state="translated">이 규칙은 ESLint v2.0에서 &lt;strong&gt;제거&lt;/strong&gt; 되었으며 &lt;a href=&quot;no-confusing-arrow&quot;&gt;혼란스럽지 않은 화살표&lt;/a&gt; 와 &lt;a href=&quot;no-constant-condition&quot;&gt;상수가없는&lt;/a&gt; 규칙 의 조합으로 &lt;strong&gt;대체&lt;/strong&gt; 되었습니다 .</target>
        </trans-unit>
        <trans-unit id="cda6801a02eb11d54e527ccd127c09f626d0664d" translate="yes" xml:space="preserve">
          <source>This rule was &lt;strong&gt;removed&lt;/strong&gt; in ESLint v2.0 and &lt;strong&gt;replaced&lt;/strong&gt; by the &lt;a href=&quot;keyword-spacing&quot;&gt;keyword-spacing&lt;/a&gt; rule.</source>
          <target state="translated">이 규칙은 ESLint v2.0에서 &lt;strong&gt;제거&lt;/strong&gt; 되었으며 &lt;a href=&quot;keyword-spacing&quot;&gt;키워드 간격&lt;/a&gt; 규칙으로 &lt;strong&gt;대체&lt;/strong&gt; 되었습니다 .</target>
        </trans-unit>
        <trans-unit id="b6bce407af2413b5937a155c9cf8c389ed6b52d2" translate="yes" xml:space="preserve">
          <source>This rule was &lt;strong&gt;removed&lt;/strong&gt; in ESLint v2.0 and &lt;strong&gt;replaced&lt;/strong&gt; by the &lt;a href=&quot;no-labels&quot;&gt;no-labels&lt;/a&gt; rule.</source>
          <target state="translated">이 규칙은 ESLint v2.0에서 &lt;strong&gt;제거&lt;/strong&gt; 되었으며 &lt;a href=&quot;no-labels&quot;&gt;레이블 없음&lt;/a&gt; 규칙으로 &lt;strong&gt;대체&lt;/strong&gt; 되었습니다 .</target>
        </trans-unit>
        <trans-unit id="c97ed5e1976f6e59cbc5958266519e944e1e11e9" translate="yes" xml:space="preserve">
          <source>This rule was &lt;strong&gt;removed&lt;/strong&gt; in ESLint v2.0 and replaced by the &lt;a href=&quot;keyword-spacing&quot;&gt;keyword-spacing&lt;/a&gt; rule.</source>
          <target state="translated">이 규칙은 ESLint v2.0에서 &lt;strong&gt;제거&lt;/strong&gt; 되었으며 &lt;a href=&quot;keyword-spacing&quot;&gt;키워드 간격&lt;/a&gt; 규칙으로 대체되었습니다 .</target>
        </trans-unit>
        <trans-unit id="7acf56d92530caa8171a9b77894e82f22211e06d" translate="yes" xml:space="preserve">
          <source>This rule was introduced in ESLint 0.0.2.</source>
          <target state="translated">이 규칙은 ESLint 0.0.2에서 도입되었습니다.</target>
        </trans-unit>
        <trans-unit id="d56f12d0cea2af7dab30391b1c91a8c5e8611ab7" translate="yes" xml:space="preserve">
          <source>This rule was introduced in ESLint 0.0.3-0.</source>
          <target state="translated">이 규칙은 ESLint 0.0.3-0에서 도입되었습니다.</target>
        </trans-unit>
        <trans-unit id="9f77090708a85102cf4f6ae95b7446a35a7e8831" translate="yes" xml:space="preserve">
          <source>This rule was introduced in ESLint 0.0.5.</source>
          <target state="translated">이 규칙은 ESLint 0.0.5에서 도입되었습니다.</target>
        </trans-unit>
        <trans-unit id="f63ca588b6adc8183fd416864c5b42f2c04e1cbe" translate="yes" xml:space="preserve">
          <source>This rule was introduced in ESLint 0.0.6.</source>
          <target state="translated">이 규칙은 ESLint 0.0.6에서 도입되었습니다.</target>
        </trans-unit>
        <trans-unit id="ee648d4cb2a57db16db2921c9d0df6db93140ef1" translate="yes" xml:space="preserve">
          <source>This rule was introduced in ESLint 0.0.7.</source>
          <target state="translated">이 규칙은 ESLint 0.0.7에서 도입되었습니다.</target>
        </trans-unit>
        <trans-unit id="7be8f0d556f11e7552c5d03d635e15e1e2586501" translate="yes" xml:space="preserve">
          <source>This rule was introduced in ESLint 0.0.9 and removed in 1.0.0-rc-1.</source>
          <target state="translated">이 규칙은 ESLint 0.0.9에서 도입되었으며 1.0.0-rc-1에서 제거되었습니다.</target>
        </trans-unit>
        <trans-unit id="991259711e9ffad37f494b317dc6ae1354d1cdec" translate="yes" xml:space="preserve">
          <source>This rule was introduced in ESLint 0.0.9 and removed in 2.0.0-rc.0.</source>
          <target state="translated">이 규칙은 ESLint 0.0.9에서 도입되었으며 2.0.0-rc.0에서 제거되었습니다.</target>
        </trans-unit>
        <trans-unit id="3826e79f1a573577ff21706cad07239818dc97a8" translate="yes" xml:space="preserve">
          <source>This rule was introduced in ESLint 0.0.9.</source>
          <target state="translated">이 규칙은 ESLint 0.0.9에서 도입되었습니다.</target>
        </trans-unit>
        <trans-unit id="104ee87c3025112a05265a39971ed20f008801f6" translate="yes" xml:space="preserve">
          <source>This rule was introduced in ESLint 0.1.0.</source>
          <target state="translated">이 규칙은 ESLint 0.1.0에서 도입되었습니다.</target>
        </trans-unit>
        <trans-unit id="6841448b528ccb28441ee5853c18598a8bae3314" translate="yes" xml:space="preserve">
          <source>This rule was introduced in ESLint 0.1.2.</source>
          <target state="translated">이 규칙은 ESLint 0.1.2에서 도입되었습니다.</target>
        </trans-unit>
        <trans-unit id="cc3311c1a58d2304884d53ec00bc0893123240e0" translate="yes" xml:space="preserve">
          <source>This rule was introduced in ESLint 0.1.4 and removed in 0.10.0.</source>
          <target state="translated">이 규칙은 ESLint 0.1.4에서 도입되었으며 0.10.0에서 제거되었습니다.</target>
        </trans-unit>
        <trans-unit id="9cd085f82a271e1296933b1d84ab883da8dc5fdc" translate="yes" xml:space="preserve">
          <source>This rule was introduced in ESLint 0.1.4 and removed in 2.0.0-beta.3.</source>
          <target state="translated">이 규칙은 ESLint 0.1.4에서 도입되었으며 2.0.0-beta.3에서 제거되었습니다.</target>
        </trans-unit>
        <trans-unit id="35169537b6d06f161ebb07cee67997ec7015db46" translate="yes" xml:space="preserve">
          <source>This rule was introduced in ESLint 0.1.4.</source>
          <target state="translated">이 규칙은 ESLint 0.1.4에서 도입되었습니다.</target>
        </trans-unit>
        <trans-unit id="f5f9cd2f36d4e67d1494162223864c9bde274c44" translate="yes" xml:space="preserve">
          <source>This rule was introduced in ESLint 0.10.0.</source>
          <target state="translated">이 규칙은 ESLint 0.10.0에서 도입되었습니다.</target>
        </trans-unit>
        <trans-unit id="6e464e7cf6aff81ac969bfa7300628a1595dbcbc" translate="yes" xml:space="preserve">
          <source>This rule was introduced in ESLint 0.11.0 and removed in 1.0.0-rc-1.</source>
          <target state="translated">이 규칙은 ESLint 0.11.0에서 도입되었으며 1.0.0-rc-1에서 제거되었습니다.</target>
        </trans-unit>
        <trans-unit id="f5e4e0c1277e58cff65243fba140eefd9e2dd691" translate="yes" xml:space="preserve">
          <source>This rule was introduced in ESLint 0.12.0 and removed in 1.0.0-rc-1.</source>
          <target state="translated">이 규칙은 ESLint 0.12.0에서 도입되었으며 1.0.0-rc-1에서 제거되었습니다.</target>
        </trans-unit>
        <trans-unit id="8e1016eb2eb9e5e64bc0b0dd57ca31abaa8b284d" translate="yes" xml:space="preserve">
          <source>This rule was introduced in ESLint 0.12.0.</source>
          <target state="translated">이 규칙은 ESLint 0.12.0에서 도입되었습니다.</target>
        </trans-unit>
        <trans-unit id="ec82419ed7cd6cb2cf32d689705adcf1ef19580d" translate="yes" xml:space="preserve">
          <source>This rule was introduced in ESLint 0.14.0.</source>
          <target state="translated">이 규칙은 ESLint 0.14.0에서 도입되었습니다.</target>
        </trans-unit>
        <trans-unit id="b4c7ed1964bbb84cf265249574359050ead50197" translate="yes" xml:space="preserve">
          <source>This rule was introduced in ESLint 0.15.0 and removed in 1.0.0-rc-1.</source>
          <target state="translated">이 규칙은 ESLint 0.15.0에서 도입되었으며 1.0.0-rc-1에서 제거되었습니다.</target>
        </trans-unit>
        <trans-unit id="022a60c1b9ae595ba84589e32239b3cc1abe85c0" translate="yes" xml:space="preserve">
          <source>This rule was introduced in ESLint 0.15.0.</source>
          <target state="translated">이 규칙은 ESLint 0.15.0에서 도입되었습니다.</target>
        </trans-unit>
        <trans-unit id="44b7c4a1ff6984989e180005d65c9ff021838b2b" translate="yes" xml:space="preserve">
          <source>This rule was introduced in ESLint 0.16.0.</source>
          <target state="translated">이 규칙은 ESLint 0.16.0에서 도입되었습니다.</target>
        </trans-unit>
        <trans-unit id="99811d057622f118ff8e5e3027a5aa79e7b5a1f8" translate="yes" xml:space="preserve">
          <source>This rule was introduced in ESLint 0.17.0.</source>
          <target state="translated">이 규칙은 ESLint 0.17.0에서 도입되었습니다.</target>
        </trans-unit>
        <trans-unit id="a24ab8acce4089e462954a9a8d11f04ed7e83d14" translate="yes" xml:space="preserve">
          <source>This rule was introduced in ESLint 0.18.0.</source>
          <target state="translated">이 규칙은 ESLint 0.18.0에서 도입되었습니다.</target>
        </trans-unit>
        <trans-unit id="22a4e79e1a7c4b86ae960caf61411eedb0cd54fe" translate="yes" xml:space="preserve">
          <source>This rule was introduced in ESLint 0.19.0.</source>
          <target state="translated">이 규칙은 ESLint 0.19.0에서 도입되었습니다.</target>
        </trans-unit>
        <trans-unit id="3d144e044cff9cede85dd4fb4692a332f5a8c611" translate="yes" xml:space="preserve">
          <source>This rule was introduced in ESLint 0.2.0.</source>
          <target state="translated">이 규칙은 ESLint 0.2.0에서 도입되었습니다.</target>
        </trans-unit>
        <trans-unit id="d1d0165d60b8c8a9fcebfd14fbf09279a7f3f639" translate="yes" xml:space="preserve">
          <source>This rule was introduced in ESLint 0.20.0.</source>
          <target state="translated">이 규칙은 ESLint 0.20.0에서 도입되었습니다.</target>
        </trans-unit>
        <trans-unit id="a2f350314ced59a62892af55c83b424897809d53" translate="yes" xml:space="preserve">
          <source>This rule was introduced in ESLint 0.21.0.</source>
          <target state="translated">이 규칙은 ESLint 0.21.0에서 도입되었습니다.</target>
        </trans-unit>
        <trans-unit id="ab2dc7a9090814ada544a547dc63e19480771694" translate="yes" xml:space="preserve">
          <source>This rule was introduced in ESLint 0.22.0.</source>
          <target state="translated">이 규칙은 ESLint 0.22.0에서 도입되었습니다.</target>
        </trans-unit>
        <trans-unit id="5e9ad892054ec8fd2a9b5a3d99565c92ebc8faa8" translate="yes" xml:space="preserve">
          <source>This rule was introduced in ESLint 0.23.0.</source>
          <target state="translated">이 규칙은 ESLint 0.23.0에서 도입되었습니다.</target>
        </trans-unit>
        <trans-unit id="a15cf25a65f1772b83540ce070583db9f0bea046" translate="yes" xml:space="preserve">
          <source>This rule was introduced in ESLint 0.24.0.</source>
          <target state="translated">이 규칙은 ESLint 0.24.0에서 도입되었습니다.</target>
        </trans-unit>
        <trans-unit id="4eb90bb8e8d0e4862e4c3c2110f52eabd22c5d95" translate="yes" xml:space="preserve">
          <source>This rule was introduced in ESLint 0.3.0 and removed in 1.0.0-rc-1.</source>
          <target state="translated">이 규칙은 ESLint 0.3.0에서 도입되었으며 1.0.0-rc-1에서 제거되었습니다.</target>
        </trans-unit>
        <trans-unit id="d534051e14d0ae5f4e8d170369285c7a7a833d72" translate="yes" xml:space="preserve">
          <source>This rule was introduced in ESLint 0.4.0.</source>
          <target state="translated">이 규칙은 ESLint 0.4.0에서 도입되었습니다.</target>
        </trans-unit>
        <trans-unit id="319d2d39aa4de595f2f2c47bce15edc744470e07" translate="yes" xml:space="preserve">
          <source>This rule was introduced in ESLint 0.4.1 and removed in 1.0.0-rc-1.</source>
          <target state="translated">이 규칙은 ESLint 0.4.1에서 도입되었으며 1.0.0-rc-1에서 제거되었습니다.</target>
        </trans-unit>
        <trans-unit id="690f00bbc758ba76165c1909c568ddef3d528500" translate="yes" xml:space="preserve">
          <source>This rule was introduced in ESLint 0.4.1.</source>
          <target state="translated">이 규칙은 ESLint 0.4.1에서 도입되었습니다.</target>
        </trans-unit>
        <trans-unit id="695fb83fb1f76ea78bd579fd8234746aef2c134b" translate="yes" xml:space="preserve">
          <source>This rule was introduced in ESLint 0.4.3 and removed in 1.0.0-rc-1.</source>
          <target state="translated">이 규칙은 ESLint 0.4.3에서 도입되었으며 1.0.0-rc-1에서 제거되었습니다.</target>
        </trans-unit>
        <trans-unit id="2104f264de79647569d42ba63afe56f30aaf6f4a" translate="yes" xml:space="preserve">
          <source>This rule was introduced in ESLint 0.4.4.</source>
          <target state="translated">이 규칙은 ESLint 0.4.4에서 도입되었습니다.</target>
        </trans-unit>
        <trans-unit id="1e6ec86f8fa1f44a023019cea42bc0bc4e88bfe9" translate="yes" xml:space="preserve">
          <source>This rule was introduced in ESLint 0.4.5.</source>
          <target state="translated">이 규칙은 ESLint 0.4.5에서 도입되었습니다.</target>
        </trans-unit>
        <trans-unit id="8f8be4f8a8eac1609244f86feda1f955f3651f40" translate="yes" xml:space="preserve">
          <source>This rule was introduced in ESLint 0.5.0.</source>
          <target state="translated">이 규칙은 ESLint 0.5.0에서 도입되었습니다.</target>
        </trans-unit>
        <trans-unit id="b5bd41becec94711e7ccb19f43f55a58cb3e3dfa" translate="yes" xml:space="preserve">
          <source>This rule was introduced in ESLint 0.5.1.</source>
          <target state="translated">이 규칙은 ESLint 0.5.1에서 도입되었습니다.</target>
        </trans-unit>
        <trans-unit id="6054666decb9a65e302b946e91edb674546d155d" translate="yes" xml:space="preserve">
          <source>This rule was introduced in ESLint 0.6.0 and removed in 2.0.0-beta.3.</source>
          <target state="translated">이 규칙은 ESLint 0.6.0에서 도입되었으며 2.0.0-beta.3에서 제거되었습니다.</target>
        </trans-unit>
        <trans-unit id="fca55944c7f00c80eb956197f3f3aa9e06639fe8" translate="yes" xml:space="preserve">
          <source>This rule was introduced in ESLint 0.6.0.</source>
          <target state="translated">이 규칙은 ESLint 0.6.0에서 도입되었습니다.</target>
        </trans-unit>
        <trans-unit id="612fad62eb56b4b3e86c60586d0f3c1dd4590c31" translate="yes" xml:space="preserve">
          <source>This rule was introduced in ESLint 0.7.1.</source>
          <target state="translated">이 규칙은 ESLint 0.7.1에서 도입되었습니다.</target>
        </trans-unit>
        <trans-unit id="7f6b3af67baac6593755ed43d947a149ef34dbd3" translate="yes" xml:space="preserve">
          <source>This rule was introduced in ESLint 0.8.0 and removed in 1.0.0-rc-1.</source>
          <target state="translated">이 규칙은 ESLint 0.8.0에서 도입되었으며 1.0.0-rc-1에서 제거되었습니다.</target>
        </trans-unit>
        <trans-unit id="9205461b44607eff74d1a2a6b6df2c77e39d4ef6" translate="yes" xml:space="preserve">
          <source>This rule was introduced in ESLint 0.8.0 and removed in 1.0.0.</source>
          <target state="translated">이 규칙은 ESLint 0.8.0에서 도입되었으며 1.0.0에서 제거되었습니다.</target>
        </trans-unit>
        <trans-unit id="2e0b51fe679fd742117998eff735fd41d10c73b5" translate="yes" xml:space="preserve">
          <source>This rule was introduced in ESLint 0.8.0.</source>
          <target state="translated">이 규칙은 ESLint 0.8.0에서 도입되었습니다.</target>
        </trans-unit>
        <trans-unit id="24474dd83f68e5a7f601af202c31fa078bd00972" translate="yes" xml:space="preserve">
          <source>This rule was introduced in ESLint 0.9.0 and removed in 1.0.0-rc-1.</source>
          <target state="translated">이 규칙은 ESLint 0.9.0에서 도입되었으며 1.0.0-rc-1에서 제거되었습니다.</target>
        </trans-unit>
        <trans-unit id="3f7b8b50cfbe149b58d16cd8e4f33ca11306175f" translate="yes" xml:space="preserve">
          <source>This rule was introduced in ESLint 0.9.0.</source>
          <target state="translated">이 규칙은 ESLint 0.9.0에서 도입되었습니다.</target>
        </trans-unit>
        <trans-unit id="253a90a08f1d4c26446ac375c0c3081ea7dfdee7" translate="yes" xml:space="preserve">
          <source>This rule was introduced in ESLint 1.0.0-rc-1.</source>
          <target state="translated">이 규칙은 ESLint 1.0.0-rc-1에서 도입되었습니다.</target>
        </trans-unit>
        <trans-unit id="0fae837ec3710a78127e4c46d18775e05d83bfab" translate="yes" xml:space="preserve">
          <source>This rule was introduced in ESLint 1.0.0-rc-2.</source>
          <target state="translated">이 규칙은 ESLint 1.0.0-rc-2에서 도입되었습니다.</target>
        </trans-unit>
        <trans-unit id="e6d687a3ec8e9e5e2c006bebf2c6d39a9b9e193f" translate="yes" xml:space="preserve">
          <source>This rule was introduced in ESLint 1.0.0.</source>
          <target state="translated">이 규칙은 ESLint 1.0.0에서 도입되었습니다.</target>
        </trans-unit>
        <trans-unit id="fdd4dd0af0c7ac98b3bc3458e813f63eda54538b" translate="yes" xml:space="preserve">
          <source>This rule was introduced in ESLint 1.2.0.</source>
          <target state="translated">이 규칙은 ESLint 1.2.0에서 도입되었습니다.</target>
        </trans-unit>
        <trans-unit id="6f9dca1480d72ed30fc7619ba2113159d7cd78bd" translate="yes" xml:space="preserve">
          <source>This rule was introduced in ESLint 1.3.0.</source>
          <target state="translated">이 규칙은 ESLint 1.3.0에서 도입되었습니다.</target>
        </trans-unit>
        <trans-unit id="cd566e50179c8aa41da415f9330a418b9f8fffa3" translate="yes" xml:space="preserve">
          <source>This rule was introduced in ESLint 1.4.0 and removed in 2.0.0-beta.3.</source>
          <target state="translated">이 규칙은 ESLint 1.4.0에서 도입되었으며 2.0.0-beta.3에서 제거되었습니다.</target>
        </trans-unit>
        <trans-unit id="8a4e16aa119e73b5bbc5848edd61c1a62e29fd1a" translate="yes" xml:space="preserve">
          <source>This rule was introduced in ESLint 1.4.0.</source>
          <target state="translated">이 규칙은 ESLint 1.4.0에서 도입되었습니다.</target>
        </trans-unit>
        <trans-unit id="76a5946c97a32256435372bd726587b5ede25a95" translate="yes" xml:space="preserve">
          <source>This rule was introduced in ESLint 1.6.0.</source>
          <target state="translated">이 규칙은 ESLint 1.6.0에서 도입되었습니다.</target>
        </trans-unit>
        <trans-unit id="7464555ca2178196c3754e81bf1f843e65019ee6" translate="yes" xml:space="preserve">
          <source>This rule was introduced in ESLint 1.7.0.</source>
          <target state="translated">이 규칙은 ESLint 1.7.0에서 도입되었습니다.</target>
        </trans-unit>
        <trans-unit id="06c23ddc2b85915de8efc2547e0828ccb7698482" translate="yes" xml:space="preserve">
          <source>This rule was introduced in ESLint 1.8.0 and removed in 2.0.0-beta.3.</source>
          <target state="translated">이 규칙은 ESLint 1.8.0에서 도입되었으며 2.0.0-beta.3에서 제거되었습니다.</target>
        </trans-unit>
        <trans-unit id="ecb498aeb472146953cb795acce90ce8cfbe658b" translate="yes" xml:space="preserve">
          <source>This rule was introduced in ESLint 1.8.0.</source>
          <target state="translated">이 규칙은 ESLint 1.8.0에서 도입되었습니다.</target>
        </trans-unit>
        <trans-unit id="d71bdb52847cd69a78bae99762742e55d3654047" translate="yes" xml:space="preserve">
          <source>This rule was introduced in ESLint 1.9.0.</source>
          <target state="translated">이 규칙은 ESLint 1.9.0에서 도입되었습니다.</target>
        </trans-unit>
        <trans-unit id="0846ea821f6cedd21e94c7e12adca7ddb223fafa" translate="yes" xml:space="preserve">
          <source>This rule was introduced in ESLint 2.0.0-alpha-1.</source>
          <target state="translated">이 규칙은 ESLint 2.0.0-alpha-1에서 도입되었습니다.</target>
        </trans-unit>
        <trans-unit id="c712a022971ad200dbe8c004c2be62c0b4e0b00f" translate="yes" xml:space="preserve">
          <source>This rule was introduced in ESLint 2.0.0-alpha-2.</source>
          <target state="translated">이 규칙은 ESLint 2.0.0-alpha-2에서 도입되었습니다.</target>
        </trans-unit>
        <trans-unit id="564f72fdde7e54d0c7b589c84bb0dd7853800b72" translate="yes" xml:space="preserve">
          <source>This rule was introduced in ESLint 2.0.0-beta.1.</source>
          <target state="translated">이 규칙은 ESLint 2.0.0-beta.1에서 도입되었습니다.</target>
        </trans-unit>
        <trans-unit id="94d6b360cd9ef42b0e62eaf087979490427823aa" translate="yes" xml:space="preserve">
          <source>This rule was introduced in ESLint 2.0.0-beta.2.</source>
          <target state="translated">이 규칙은 ESLint 2.0.0-beta.2에서 도입되었습니다.</target>
        </trans-unit>
        <trans-unit id="9649c1088345801ecd6f589d52de6c1232d6307d" translate="yes" xml:space="preserve">
          <source>This rule was introduced in ESLint 2.0.0-beta.3.</source>
          <target state="translated">이 규칙은 ESLint 2.0.0-beta.3에서 도입되었습니다.</target>
        </trans-unit>
        <trans-unit id="5d680d77d0beed833592689309422ca3ce2d7e21" translate="yes" xml:space="preserve">
          <source>This rule was introduced in ESLint 2.0.0-rc.0.</source>
          <target state="translated">이 규칙은 ESLint 2.0.0-rc.0에서 도입되었습니다.</target>
        </trans-unit>
        <trans-unit id="66dbbf4920030e8d0cefe80a34b176ce05b61df0" translate="yes" xml:space="preserve">
          <source>This rule was introduced in ESLint 2.0.0.</source>
          <target state="translated">이 규칙은 ESLint 2.0.0에서 도입되었습니다.</target>
        </trans-unit>
        <trans-unit id="b71385ef3c3e927c991a219f64384c985c1fcf90" translate="yes" xml:space="preserve">
          <source>This rule was introduced in ESLint 2.10.0.</source>
          <target state="translated">이 규칙은 ESLint 2.10.0에서 도입되었습니다.</target>
        </trans-unit>
        <trans-unit id="da405f0ddea9153a0ac587fe4e9d8164d01b0c16" translate="yes" xml:space="preserve">
          <source>This rule was introduced in ESLint 2.11.0.</source>
          <target state="translated">이 규칙은 ESLint 2.11.0에서 도입되었습니다.</target>
        </trans-unit>
        <trans-unit id="60862391299a40ab31b71b4b297983dc0f6e212b" translate="yes" xml:space="preserve">
          <source>This rule was introduced in ESLint 2.12.0.</source>
          <target state="translated">이 규칙은 ESLint 2.12.0에서 도입되었습니다.</target>
        </trans-unit>
        <trans-unit id="d03b31c8000a442f60231fc039e08815e8282c25" translate="yes" xml:space="preserve">
          <source>This rule was introduced in ESLint 2.3.0.</source>
          <target state="translated">이 규칙은 ESLint 2.3.0에서 도입되었습니다.</target>
        </trans-unit>
        <trans-unit id="7f16b8950c0bde6bb34ed5b7207fdc0b738fb630" translate="yes" xml:space="preserve">
          <source>This rule was introduced in ESLint 2.5.0.</source>
          <target state="translated">이 규칙은 ESLint 2.5.0에서 도입되었습니다.</target>
        </trans-unit>
        <trans-unit id="3f8a58c3d4da99f78398d3b64a91632e74df4c87" translate="yes" xml:space="preserve">
          <source>This rule was introduced in ESLint 2.9.0.</source>
          <target state="translated">이 규칙은 ESLint 2.9.0에서 도입되었습니다.</target>
        </trans-unit>
        <trans-unit id="a434d13be726419640646ee9cfdb8bd1785581c4" translate="yes" xml:space="preserve">
          <source>This rule was introduced in ESLint 3.1.0.</source>
          <target state="translated">이 규칙은 ESLint 3.1.0에서 도입되었습니다.</target>
        </trans-unit>
        <trans-unit id="858b084f5692784698710e54970501ccf2defec3" translate="yes" xml:space="preserve">
          <source>This rule was introduced in ESLint 3.10.0.</source>
          <target state="translated">이 규칙은 ESLint 3.10.0에서 도입되었습니다.</target>
        </trans-unit>
        <trans-unit id="36cd7ddeb04a21f5897e3d4b76cce15e87b7993f" translate="yes" xml:space="preserve">
          <source>This rule was introduced in ESLint 3.11.0.</source>
          <target state="translated">이 규칙은 ESLint 3.11.0에서 도입되었습니다.</target>
        </trans-unit>
        <trans-unit id="661306b0ad7d6ddb13c6aa40cfdba38f3593d8f0" translate="yes" xml:space="preserve">
          <source>This rule was introduced in ESLint 3.12.0.</source>
          <target state="translated">이 규칙은 ESLint 3.12.0에서 도입되었습니다.</target>
        </trans-unit>
        <trans-unit id="d6cb22ee8de2bdb3f0e4c59288bcbc8a30e84670" translate="yes" xml:space="preserve">
          <source>This rule was introduced in ESLint 3.13.0.</source>
          <target state="translated">이 규칙은 ESLint 3.13.0에서 도입되었습니다.</target>
        </trans-unit>
        <trans-unit id="015933b00ddaf61622019f00b91df5be845849c0" translate="yes" xml:space="preserve">
          <source>This rule was introduced in ESLint 3.14.0.</source>
          <target state="translated">이 규칙은 ESLint 3.14.0에서 도입되었습니다.</target>
        </trans-unit>
        <trans-unit id="c7d64c709b1b89ba9e136d3032dd0f5798649309" translate="yes" xml:space="preserve">
          <source>This rule was introduced in ESLint 3.15.0.</source>
          <target state="translated">이 규칙은 ESLint 3.15.0에서 도입되었습니다.</target>
        </trans-unit>
        <trans-unit id="27e706065fbfda963ea99d5bd446422094fd7668" translate="yes" xml:space="preserve">
          <source>This rule was introduced in ESLint 3.17.0.</source>
          <target state="translated">이 규칙은 ESLint 3.17.0에서 도입되었습니다.</target>
        </trans-unit>
        <trans-unit id="e09ff4e9278081df15e096fbf4e58b20f023a5ba" translate="yes" xml:space="preserve">
          <source>This rule was introduced in ESLint 3.2.0.</source>
          <target state="translated">이 규칙은 ESLint 3.2.0에서 도입되었습니다.</target>
        </trans-unit>
        <trans-unit id="a85d7cc0623d3501b8bca704f4e41164c09a7508" translate="yes" xml:space="preserve">
          <source>This rule was introduced in ESLint 3.3.0.</source>
          <target state="translated">이 규칙은 ESLint 3.3.0에서 도입되었습니다.</target>
        </trans-unit>
        <trans-unit id="b3fdf6d7d417b00e1c641b827ad2d5a23756333b" translate="yes" xml:space="preserve">
          <source>This rule was introduced in ESLint 3.4.0.</source>
          <target state="translated">이 규칙은 ESLint 3.4.0에서 도입되었습니다.</target>
        </trans-unit>
        <trans-unit id="081f1321385ea2db9cfc13a7ef6150816e60cfdf" translate="yes" xml:space="preserve">
          <source>This rule was introduced in ESLint 3.5.0.</source>
          <target state="translated">이 규칙은 ESLint 3.5.0에서 도입되었습니다.</target>
        </trans-unit>
        <trans-unit id="249f7539fd800e4a3448bebbb2a5d06ae7bdfbb1" translate="yes" xml:space="preserve">
          <source>This rule was introduced in ESLint 3.8.0.</source>
          <target state="translated">이 규칙은 ESLint 3.8.0에서 도입되었습니다.</target>
        </trans-unit>
        <trans-unit id="1d3a88f535dd46014212822bfcdb7b92057ec03c" translate="yes" xml:space="preserve">
          <source>This rule was introduced in ESLint 3.9.0.</source>
          <target state="translated">이 규칙은 ESLint 3.9.0에서 도입되었습니다.</target>
        </trans-unit>
        <trans-unit id="bc1167ff56b2f569216be1b53cbdda085c3f5925" translate="yes" xml:space="preserve">
          <source>This rule was introduced in ESLint 4.0.0-alpha.0.</source>
          <target state="translated">이 규칙은 ESLint 4.0.0-alpha.0에서 도입되었습니다.</target>
        </trans-unit>
        <trans-unit id="8e66018d7d2a9d9a93f9a651e08a252a3934f02b" translate="yes" xml:space="preserve">
          <source>This rule was introduced in ESLint 4.0.0-alpha.1.</source>
          <target state="translated">이 규칙은 ESLint 4.0.0-alpha.1에서 도입되었습니다.</target>
        </trans-unit>
        <trans-unit id="2d0c5eb6d6e8a9c24913bcf68ed584d5108017be" translate="yes" xml:space="preserve">
          <source>This rule was introduced in ESLint 4.0.0-beta.0.</source>
          <target state="translated">이 규칙은 ESLint 4.0.0-beta.0에서 도입되었습니다.</target>
        </trans-unit>
        <trans-unit id="4075da4b266c0716bb2a3425d000c5bcda9eba92" translate="yes" xml:space="preserve">
          <source>This rule was introduced in ESLint 4.0.0-rc.0.</source>
          <target state="translated">이 규칙은 ESLint 4.0.0-rc.0에서 도입되었습니다.</target>
        </trans-unit>
        <trans-unit id="263b2d3768d21d7440422e01223bff30dee0ef66" translate="yes" xml:space="preserve">
          <source>This rule was introduced in ESLint 4.10.0.</source>
          <target state="translated">이 규칙은 ESLint 4.10.0에서 도입되었습니다.</target>
        </trans-unit>
        <trans-unit id="23dfe0c95b1e5f030da59fd3fd60ce2334cd60e3" translate="yes" xml:space="preserve">
          <source>This rule was introduced in ESLint 4.12.0.</source>
          <target state="translated">이 규칙은 ESLint 4.12.0에서 도입되었습니다.</target>
        </trans-unit>
        <trans-unit id="d18235d7263ad097b73fc8033aad8ae250ea0e30" translate="yes" xml:space="preserve">
          <source>This rule was introduced in ESLint 4.2.0.</source>
          <target state="translated">이 규칙은 ESLint 4.2.0에서 도입되었습니다.</target>
        </trans-unit>
        <trans-unit id="4fcbf3e8c966c03a80f69bd99dc0d87087516dc6" translate="yes" xml:space="preserve">
          <source>This rule was introduced in ESLint 4.6.0.</source>
          <target state="translated">이 규칙은 ESLint 4.6.0에서 도입되었습니다.</target>
        </trans-unit>
        <trans-unit id="c29a10377df13f0c37ec8db63b847477502e584e" translate="yes" xml:space="preserve">
          <source>This rule was introduced in ESLint 4.9.0.</source>
          <target state="translated">이 규칙은 ESLint 4.9.0에서 도입되었습니다.</target>
        </trans-unit>
        <trans-unit id="f8550879bfc78f693f7b041484cf06a1cd547e0e" translate="yes" xml:space="preserve">
          <source>This rule was introduced in ESLint 5.0.0-alpha.3.</source>
          <target state="translated">이 규칙은 ESLint 5.0.0-alpha.3에서 도입되었습니다.</target>
        </trans-unit>
        <trans-unit id="418915a53d81a096edd9d904f41083006c174930" translate="yes" xml:space="preserve">
          <source>This rule was introduced in ESLint 5.0.0.</source>
          <target state="translated">이 규칙은 ESLint 5.0.0에서 도입되었습니다.</target>
        </trans-unit>
        <trans-unit id="8778f2ba95f794b36174b055c644cc679c9917a0" translate="yes" xml:space="preserve">
          <source>This rule was introduced in ESLint 5.11.0.</source>
          <target state="translated">이 규칙은 ESLint 5.11.0에서 도입되었습니다.</target>
        </trans-unit>
        <trans-unit id="1254815cfd5ae6a3473c9ae4729105dfd35da19f" translate="yes" xml:space="preserve">
          <source>This rule was introduced in ESLint 5.15.0.</source>
          <target state="translated">이 규칙은 ESLint 5.15.0에서 도입되었습니다.</target>
        </trans-unit>
        <trans-unit id="30dee8cf16e05b494ff0f1c742f6ab52422c2d28" translate="yes" xml:space="preserve">
          <source>This rule was introduced in ESLint 5.3.0.</source>
          <target state="translated">이 규칙은 ESLint 5.3.0에서 도입되었습니다.</target>
        </trans-unit>
        <trans-unit id="56ed5ba939eaef08ee30a77ef55edc5b4b03b38e" translate="yes" xml:space="preserve">
          <source>This rule was introduced in ESLint 6.2.0.</source>
          <target state="translated">이 규칙은 ESLint 6.2.0에서 도입되었습니다.</target>
        </trans-unit>
        <trans-unit id="f164dff149cab207f752d65fc42fa78c1b1bf72c" translate="yes" xml:space="preserve">
          <source>This rule was introduced in ESLint 6.4.0.</source>
          <target state="translated">이 규칙은 ESLint 6.4.0에서 도입되었습니다.</target>
        </trans-unit>
        <trans-unit id="6d5ce8145cb2e6d14c5a11d1bd60fe572558217d" translate="yes" xml:space="preserve">
          <source>This rule was introduced in ESLint 6.7.0.</source>
          <target state="translated">이 규칙은 ESLint 6.7.0에서 도입되었습니다.</target>
        </trans-unit>
        <trans-unit id="505fc61fb68ad7eac9fbf317a8b027ff98db1afe" translate="yes" xml:space="preserve">
          <source>This rule will allow keywords to be preceded by an opening curly brace (&lt;code&gt;{&lt;/code&gt;). If you wish to alter this behavior, consider using the &lt;a href=&quot;block-spacing&quot;&gt;block-spacing&lt;/a&gt; rule.</source>
          <target state="translated">이 규칙은 키워드 앞에 여는 중괄호 ( &lt;code&gt;{&lt;/code&gt; )를 붙일 수 있습니다. 이 동작을 변경하려면 &lt;a href=&quot;block-spacing&quot;&gt;블록 간격&lt;/a&gt; 규칙을 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="20fe84960dba868b1bee83459ec26e8090b503b5" translate="yes" xml:space="preserve">
          <source>This rule will catch blacklisted identifiers that are:</source>
          <target state="translated">이 규칙은 다음과 같은 블랙리스트 식별자를 포착합니다.</target>
        </trans-unit>
        <trans-unit id="7eb5eed91214ac1aae94e16a4b651e906d0ad590" translate="yes" xml:space="preserve">
          <source>This rule will enforce consistency of spacing after the keywords &lt;code&gt;if&lt;/code&gt;, &lt;code&gt;else&lt;/code&gt;, &lt;code&gt;for&lt;/code&gt;, &lt;code&gt;while&lt;/code&gt;, &lt;code&gt;do&lt;/code&gt;, &lt;code&gt;switch&lt;/code&gt;, &lt;code&gt;try&lt;/code&gt;, &lt;code&gt;catch&lt;/code&gt;, &lt;code&gt;finally&lt;/code&gt;, and &lt;code&gt;with&lt;/code&gt;.</source>
          <target state="translated">이 규칙은 키워드 후 간격의 일관성을 시행 할 &lt;code&gt;if&lt;/code&gt; , &lt;code&gt;else&lt;/code&gt; , &lt;code&gt;for&lt;/code&gt; , &lt;code&gt;while&lt;/code&gt; , &lt;code&gt;do&lt;/code&gt; , &lt;code&gt;switch&lt;/code&gt; , &lt;code&gt;try&lt;/code&gt; , &lt;code&gt;catch&lt;/code&gt; , &lt;code&gt;finally&lt;/code&gt; ,와 &lt;code&gt;with&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="dcfcc88f46e54dda18d566394faa28bc296e5fe2" translate="yes" xml:space="preserve">
          <source>This rule will enforce consistency of spacing after the start of a comment &lt;code&gt;//&lt;/code&gt; or &lt;code&gt;/*&lt;/code&gt;. It also provides several exceptions for various documentation styles.</source>
          <target state="translated">이 규칙은 &lt;code&gt;//&lt;/code&gt; 또는 &lt;code&gt;/*&lt;/code&gt; 주석이 시작된 후 간격의 일관성을 강제 합니다. 또한 다양한 문서 스타일에 대한 몇 가지 예외를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="8dfa11618d345f13d6dcd12dcc9d86af2a778106" translate="yes" xml:space="preserve">
          <source>This rule will enforce consistency of spacing after the start of a line comment &lt;code&gt;//&lt;/code&gt;.</source>
          <target state="translated">이 규칙은 줄 주석 시작 후 간격 일관성을 유지합니다 &lt;code&gt;//&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="f5a3463495b63cee8f00d005edffd52a371dbf7b" translate="yes" xml:space="preserve">
          <source>This rule will enforce consistency of spacing before blocks. It is only applied on blocks that don&amp;rsquo;t begin on a new line.</source>
          <target state="translated">이 규칙은 블록 전에 간격의 일관성을 강제합니다. 새 줄에서 시작하지 않는 블록에만 적용됩니다.</target>
        </trans-unit>
        <trans-unit id="899e832f0bb86e89cde9cb92bf01264670a49390" translate="yes" xml:space="preserve">
          <source>This rule will enforce consistency of spacing before the keywords &lt;code&gt;if&lt;/code&gt;, &lt;code&gt;else&lt;/code&gt;, &lt;code&gt;for&lt;/code&gt;, &lt;code&gt;while&lt;/code&gt;, &lt;code&gt;do&lt;/code&gt;, &lt;code&gt;switch&lt;/code&gt;, &lt;code&gt;throw&lt;/code&gt;, &lt;code&gt;try&lt;/code&gt;, &lt;code&gt;catch&lt;/code&gt;, &lt;code&gt;finally&lt;/code&gt;, &lt;code&gt;with&lt;/code&gt;, &lt;code&gt;break&lt;/code&gt;, &lt;code&gt;continue&lt;/code&gt;, &lt;code&gt;return&lt;/code&gt;, &lt;code&gt;function&lt;/code&gt;, &lt;code&gt;yield&lt;/code&gt;, &lt;code&gt;class&lt;/code&gt; and variable declarations (&lt;code&gt;let&lt;/code&gt;, &lt;code&gt;const&lt;/code&gt;, &lt;code&gt;var&lt;/code&gt;) and label statements.</source>
          <target state="translated">이 규칙은 키워드 전에 간격의 일관성을 시행 할 &lt;code&gt;if&lt;/code&gt; , &lt;code&gt;else&lt;/code&gt; , &lt;code&gt;for&lt;/code&gt; , &lt;code&gt;while&lt;/code&gt; , &lt;code&gt;do&lt;/code&gt; , &lt;code&gt;switch&lt;/code&gt; , &lt;code&gt;throw&lt;/code&gt; , &lt;code&gt;try&lt;/code&gt; , &lt;code&gt;catch&lt;/code&gt; , &lt;code&gt;finally&lt;/code&gt; , &lt;code&gt;with&lt;/code&gt; , &lt;code&gt;break&lt;/code&gt; , &lt;code&gt;continue&lt;/code&gt; , &lt;code&gt;return&lt;/code&gt; , &lt;code&gt;function&lt;/code&gt; , &lt;code&gt;yield&lt;/code&gt; , &lt;code&gt;class&lt;/code&gt; 및 변수 선언 ( &lt;code&gt;let&lt;/code&gt; , &lt;code&gt;const&lt;/code&gt; , &lt;code&gt;var&lt;/code&gt; ) 및 레이블 문.</target>
        </trans-unit>
        <trans-unit id="7ab2ddd96883c5601a31a0952609e729f28ed8c7" translate="yes" xml:space="preserve">
          <source>This rule will enforce consistent spacing directly inside of parentheses, by disallowing or requiring one or more spaces to the right of &lt;code&gt;(&lt;/code&gt; and to the left of &lt;code&gt;)&lt;/code&gt;.</source>
          <target state="translated">이 규칙은 불허 또는 오른쪽에 하나 개 이상의 공간을 요구함으로써, 괄호 안에 직접 일관된 간격을 적용한다 &lt;code&gt;(&lt;/code&gt; 그리고 왼쪽 &lt;code&gt;)&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="64502d44699c8fd75b6ff60a9772a5b144874128" translate="yes" xml:space="preserve">
          <source>This rule will raise a warning when it encounters a function expression wrapped in parentheses with no following invoking parentheses.</source>
          <target state="translated">이 규칙은 다음 호출 괄호없이 괄호로 묶인 함수 표현식이 발생하면 경고를 발생시킵니다.</target>
        </trans-unit>
        <trans-unit id="3643c6350c621113de6e30185b7a4873c306ccc3" translate="yes" xml:space="preserve">
          <source>This rule will warn when it encounters a reference to an identifier that has not yet been declared.</source>
          <target state="translated">이 규칙은 아직 선언되지 않은 식별자에 대한 참조가 발생하면 경고합니다.</target>
        </trans-unit>
        <trans-unit id="1aac283a5c8db3e909affa821ed372fee55531f6" translate="yes" xml:space="preserve">
          <source>This rule's configuration consists of an object with the following properties:</source>
          <target state="translated">이 규칙의 구성은 다음 속성을 가진 개체로 구성됩니다.</target>
        </trans-unit>
        <trans-unit id="686680eef8d702bbfccdffade327d244725c31c8" translate="yes" xml:space="preserve">
          <source>This rule, in its default state, does not require any arguments. If you would like to enable one or more of the following you may pass an object with the options set as follows:</source>
          <target state="translated">이 규칙은 기본 상태에서 인수가 필요하지 않습니다. 다음 중 하나 이상을 활성화하려면 다음과 같이 옵션이 설정된 객체를 전달할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f76749baa8bcf932d6af226607a409b5f06928d1" translate="yes" xml:space="preserve">
          <source>This rules requires a description when creating symbols.</source>
          <target state="translated">이 규칙에는 심볼을 만들 때 설명이 필요합니다.</target>
        </trans-unit>
        <trans-unit id="c0dfaa172d2d0fbecfbe10aea7c7cfdfe5fbe4fb" translate="yes" xml:space="preserve">
          <source>This saves the output into the &lt;code&gt;results.txt&lt;/code&gt; file.</source>
          <target state="translated">&lt;code&gt;results.txt&lt;/code&gt; 파일에 저장 합니다.</target>
        </trans-unit>
        <trans-unit id="3b159541e2337ac35e2095ddbe914c9d67ebbf08" translate="yes" xml:space="preserve">
          <source>This setting is similar to &lt;a href=&quot;command-line-interface#--no-inline-config&quot;&gt;--no-inline-config&lt;/a&gt; CLI option.</source>
          <target state="translated">이 설정은 &lt;a href=&quot;command-line-interface#--no-inline-config&quot;&gt;--no-inline-config&lt;/a&gt; CLI 옵션 과 유사합니다 .</target>
        </trans-unit>
        <trans-unit id="70f0b4c78e3353c2cf50cf6616c689f7ee16a770" translate="yes" xml:space="preserve">
          <source>This setting is similar to &lt;a href=&quot;command-line-interface#--report-unused-disable-directives&quot;&gt;--report-unused-disable-directives&lt;/a&gt; CLI option, but doesn't fail linting (reports as &lt;code&gt;&quot;warn&quot;&lt;/code&gt; severity).</source>
          <target state="translated">이 설정은 &lt;a href=&quot;command-line-interface#--report-unused-disable-directives&quot;&gt;--report-unused-disable-directives&lt;/a&gt; CLI 옵션과 유사하지만 보풀이 실패하지 않습니다 ( &lt;code&gt;&quot;warn&quot;&lt;/code&gt; 심각 도로보고 ).</target>
        </trans-unit>
        <trans-unit id="46894218d56351684b5188fefa742063dbd6acee" translate="yes" xml:space="preserve">
          <source>This setting mimics some of the default behavior from 0.x, but not all. If you don't want to use any of the recommended rules, you can delete this line.</source>
          <target state="translated">이 설정은 0.x의 일부 기본 동작을 모방하지만 전부는 아닙니다. 권장 규칙을 사용하지 않으려면이 줄을 삭제할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="875fb57cf6d00cd8167af70a6cec4b5baceb791b" translate="yes" xml:space="preserve">
          <source>This should be rewritten like so:</source>
          <target state="translated">다음과 같이 다시 작성해야합니다.</target>
        </trans-unit>
        <trans-unit id="22d329895d12968d8e388d4a016d9447d24df47a" translate="yes" xml:space="preserve">
          <source>This syntax is very powerful, and can be used to precisely select many syntactic patterns in your code.</source>
          <target state="translated">이 구문은 매우 강력하며 코드에서 많은 구문 패턴을 정확하게 선택하는 데 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c6fa14f74ba5c7c56fcdcd75a3d2c3a227de8b5a" translate="yes" xml:space="preserve">
          <source>This throws a &lt;code&gt;TypeError&lt;/code&gt; exception.</source>
          <target state="translated">그러면 &lt;code&gt;TypeError&lt;/code&gt; 예외가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="7bf06011358f7568e5271850e42bc163cc698e3e" translate="yes" xml:space="preserve">
          <source>This typically reads, &quot;if the color equals red&quot;, which is arguably a more natural way to describe the comparison.</source>
          <target state="translated">이것은 일반적으로 &quot;색이 빨간색이면&quot;이라고 읽습니다. 이는 비교를 설명하는 더 자연스러운 방법 일 것입니다.</target>
        </trans-unit>
        <trans-unit id="f9a598ad54e5a40cedb347d08b1cc89bf10028a9" translate="yes" xml:space="preserve">
          <source>This was a roundabout way to find the variable because it was added after the fact by ESLint. The &lt;code&gt;window&lt;/code&gt; variable was in &lt;code&gt;Scope#through&lt;/code&gt; because the definition couldn't be found.</source>
          <target state="translated">이것은 변수가 ESLint에 의해 추가 된 후에 추가 되었기 때문에 로터리 방식이었습니다. &lt;code&gt;window&lt;/code&gt; 변수에 있었다 &lt;code&gt;Scope#through&lt;/code&gt; 정의는 찾을 수 없기 때문에.</target>
        </trans-unit>
        <trans-unit id="b95c2d2d9ce069899ffb2f9324062dd0c340f08c" translate="yes" xml:space="preserve">
          <source>This was confusing to rule developers as it seemed that rules shouldn't be in charge of validating their own severity. In 2.0.0, rules no longer need to check their own severity.</source>
          <target state="translated">규칙이 자신의 심각도를 검증 할 책임이없는 것처럼 보이므로 규칙 개발자에게는 혼란 스러웠습니다. 2.0.0에서는 규칙이 더 이상 자체 심각도를 확인할 필요가 없습니다.</target>
        </trans-unit>
        <trans-unit id="6a0a2571f7edd8fae2645c0661fe251dab9d8a80" translate="yes" xml:space="preserve">
          <source>This will affect you if you are extending from &lt;code&gt;eslint:recommended&lt;/code&gt;, and are enabling &lt;a href=&quot;../rules/no-multiple-empty-lines&quot;&gt;&lt;code&gt;no-multiple-empty-lines&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../rules/func-style&quot;&gt;&lt;code&gt;func-style&lt;/code&gt;&lt;/a&gt; with only a severity, such as:</source>
          <target state="translated">당신이에서 연장하는 경우에 당신에 영향을 미칠 것입니다 &lt;code&gt;eslint:recommended&lt;/code&gt; 및 사용 가능하게 &lt;a href=&quot;../rules/no-multiple-empty-lines&quot;&gt; &lt;code&gt;no-multiple-empty-lines&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;../rules/func-style&quot;&gt; &lt;code&gt;func-style&lt;/code&gt; &lt;/a&gt; 등 만 심각도를 :</target>
        </trans-unit>
        <trans-unit id="7922d7623662d9c671198216874744cb22441012" translate="yes" xml:space="preserve">
          <source>This will open up your editor so you can make changes. After that, you'll need to do a forced push to your branch:</source>
          <target state="translated">편집기가 열리므로 변경할 수 있습니다. 그 후에는 지점으로 강제 푸시해야합니다.</target>
        </trans-unit>
        <trans-unit id="1e28b901c4ec23e324d1147022a9ffd9c884507c" translate="yes" xml:space="preserve">
          <source>Those can be replaced with the following code:</source>
          <target state="translated">그것들은 다음 코드로 대체 될 수 있습니다 :</target>
        </trans-unit>
        <trans-unit id="b8fc349a6394c8ce4c8dac8225a5cc00409443c4" translate="yes" xml:space="preserve">
          <source>Those members are defined but not used in ESLint.</source>
          <target state="translated">이러한 멤버는 ESLint에서 정의되었지만 사용되지는 않습니다.</target>
        </trans-unit>
        <trans-unit id="79219f954c37e740f44b8eeedc1672e971acb7f4" translate="yes" xml:space="preserve">
          <source>Thus, the rule (without the object option) prohibits both of these:</source>
          <target state="translated">따라서 (객체 옵션이없는) 규칙은 다음 두 가지를 모두 금지합니다.</target>
        </trans-unit>
        <trans-unit id="92dfc8d078c02dadc9f36bf0c250a63d56acd93a" translate="yes" xml:space="preserve">
          <source>Tips for &lt;code&gt;package.json&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;package.json&lt;/code&gt; 에 대한 팁 :</target>
        </trans-unit>
        <trans-unit id="12248fedc6e3a517137e5a922a0d0e1269b1fca7" translate="yes" xml:space="preserve">
          <source>To add the upstream source for ESLint, run the following in your repository:</source>
          <target state="translated">ESLint의 업스트림 소스를 추가하려면 리포지토리에서 다음을 실행하십시오.</target>
        </trans-unit>
        <trans-unit id="e12adbc2086a36a101b25ac6980400eced9fc9c9" translate="yes" xml:space="preserve">
          <source>To avoid conflicts between rules, this rule does not report non-error values used in &lt;code&gt;throw&lt;/code&gt; statements in async functions, even though these lead to Promise rejections. To lint for these cases, use the &lt;a href=&quot;no-throw-literal&quot;&gt;&lt;code&gt;no-throw-literal&lt;/code&gt;&lt;/a&gt; rule.</source>
          <target state="translated">규칙 간 충돌을 피하기 위해이 규칙은 Promise 거부로 이어 지더라도 비동기 함수의 &lt;code&gt;throw&lt;/code&gt; 문에 사용 된 오류가 아닌 값은보고하지 않습니다 . 이 경우 보푸라기를하려면 문지르지 &lt;a href=&quot;no-throw-literal&quot;&gt; &lt;code&gt;no-throw-literal&lt;/code&gt; &lt;/a&gt; 규칙을 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="538f66a6468f3d6c647b9926379987f5a2085e2e" translate="yes" xml:space="preserve">
          <source>To avoid contradictions with other rules that require multiple spaces, this rule has an &lt;code&gt;exceptions&lt;/code&gt; option to ignore certain nodes.</source>
          <target state="translated">여러 공백이 필요한 다른 규칙과의 모순을 피하기 위해이 규칙에는 특정 노드를 무시 하는 &lt;code&gt;exceptions&lt;/code&gt; 옵션이 있습니다.</target>
        </trans-unit>
        <trans-unit id="e5398e44e4a94ea4634ab5e90d6cb035b83c3671" translate="yes" xml:space="preserve">
          <source>To avoid subtle bugs like this, it's better to always call these methods from &lt;code&gt;Object.prototype&lt;/code&gt;. For example, &lt;code&gt;foo.hasOwnProperty(&quot;bar&quot;)&lt;/code&gt; should be replaced with &lt;code&gt;Object.prototype.hasOwnProperty.call(foo, &quot;bar&quot;)&lt;/code&gt;.</source>
          <target state="translated">이와 같은 미묘한 버그를 피하려면 항상 &lt;code&gt;Object.prototype&lt;/code&gt; 에서 이러한 메소드를 호출하는 것이 좋습니다 . 예를 들어, &lt;code&gt;foo.hasOwnProperty(&quot;bar&quot;)&lt;/code&gt; 는 &lt;code&gt;Object.prototype.hasOwnProperty.call(foo, &quot;bar&quot;)&lt;/code&gt; 로 바꿔야 합니다.</target>
        </trans-unit>
        <trans-unit id="58dc0124f1404afc0ef74d2cf10ed37334f28828" translate="yes" xml:space="preserve">
          <source>To avoid this ambiguity, in 4.0 references to scoped plugins must include the scope. The config from above should be fixed to:</source>
          <target state="translated">이 모호성을 피하려면 4.0에서 범위 지정된 플러그인에 대한 참조에 범위가 포함되어야합니다. 위의 구성은 다음과 같이 수정되어야합니다.</target>
        </trans-unit>
        <trans-unit id="ee30a5b5044b5098a2eec0a3715fc0eeef745ddd" translate="yes" xml:space="preserve">
          <source>To avoid this issue, one might require all single-line &lt;code&gt;if&lt;/code&gt; statements to appear directly after the conditional, without a linebreak:</source>
          <target state="translated">이 문제를 피하기 위해 줄 바꿈 없이 조건부 바로 다음에 모든 단일 행 &lt;code&gt;if&lt;/code&gt; 문을 표시 해야 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="aac8c73ad1cc50758b5de5f9a9bdff0e8124c6f3" translate="yes" xml:space="preserve">
          <source>To catch config errors earlier, ESLint v6 will report a linting error if you are trying to configure a non-existent rule.</source>
          <target state="translated">구성 오류를 조기에 포착하기 위해 존재하지 않는 규칙을 구성하려는 경우 ESLint v6에서 Linting 오류를보고합니다.</target>
        </trans-unit>
        <trans-unit id="cb843e3d53981deb8abc7dc005824cdecd1ade2e" translate="yes" xml:space="preserve">
          <source>To check state of a code path</source>
          <target state="translated">코드 경로의 상태를 확인하려면</target>
        </trans-unit>
        <trans-unit id="4ff92f7a6568bfcddaebb533847e4e8212496d5a" translate="yes" xml:space="preserve">
          <source>To check whether or not this is reachable</source>
          <target state="translated">도달 가능한지 여부를 확인하려면</target>
        </trans-unit>
        <trans-unit id="3a959c0a9d587954730ee7b4356f17c6e132b1a2" translate="yes" xml:space="preserve">
          <source>To compare against an initialized variable that may or may not have an object value.</source>
          <target state="translated">개체 값이 있거나 없을 수있는 초기화 된 변수와 비교합니다.</target>
        </trans-unit>
        <trans-unit id="62c512b7180a7c74f351c08380b6705d3c61abc0" translate="yes" xml:space="preserve">
          <source>To configure a rule which is defined within a plugin you have to prefix the rule ID with the plugin name and a &lt;code&gt;/&lt;/code&gt;. For example:</source>
          <target state="translated">플러그인 내에 정의 된 규칙을 구성하려면 규칙 ID 앞에 플러그인 이름과 &lt;code&gt;/&lt;/code&gt; 를 붙여야합니다 . 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="31d56a381f7ad5b91ad260fe2d353e306ee0ccb3" translate="yes" xml:space="preserve">
          <source>To configure global variables inside of a configuration file, set the &lt;code&gt;globals&lt;/code&gt; configuration property to an object containing keys named for each of the global variables you want to use. For each global variable key, set the corresponding value equal to &lt;code&gt;&quot;writable&quot;&lt;/code&gt; to allow the variable to be overwritten or &lt;code&gt;&quot;readonly&quot;&lt;/code&gt; to disallow overwriting. For example:</source>
          <target state="translated">구성 파일 내에서 전역 변수를 구성하려면 &lt;code&gt;globals&lt;/code&gt; 구성 특성을 사용하려는 각 전역 변수에 대해 명명 된 키가 포함 된 오브젝트로 설정하십시오 . 각 전역 변수 키에 대해 해당 값을 &lt;code&gt;&quot;writable&quot;&lt;/code&gt; 으로 설정하여 변수를 덮어 쓰거나 &lt;code&gt;&quot;readonly&quot;&lt;/code&gt; 으로 덮어 쓰기를 허용하지 않습니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="038570de33ddc446fb32433dab83190e57eb2224" translate="yes" xml:space="preserve">
          <source>To configure plugins inside of a configuration file, use the &lt;code&gt;plugins&lt;/code&gt; key, which contains a list of plugin names. The &lt;code&gt;eslint-plugin-&lt;/code&gt; prefix can be omitted from the plugin name.</source>
          <target state="translated">구성 파일 내에서 플러그인을 구성하려면 플러그인 이름 목록이 포함 된 &lt;code&gt;plugins&lt;/code&gt; 키를 사용하십시오 . &lt;code&gt;eslint-plugin-&lt;/code&gt; 접두사 플러그인 이름에서 생략 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f6b6a8aa347c25fe69bff51062679d168f8ac129" translate="yes" xml:space="preserve">
          <source>To configure rules inside of a configuration file, use the &lt;code&gt;rules&lt;/code&gt; key along with an error level and any options you want to use. For example:</source>
          <target state="translated">구성 파일 내에서 규칙을 구성하려면 오류 수준 및 사용하려는 옵션과 함께 &lt;code&gt;rules&lt;/code&gt; 키를 사용하십시오. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="4ebbfe48acca16cf580ee75882233871cf409bb0" translate="yes" xml:space="preserve">
          <source>To configure rules inside of a file using configuration comments, use a comment in the following format:</source>
          <target state="translated">구성 주석을 사용하여 파일 내부에서 규칙을 구성하려면 다음 형식의 주석을 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="4290412e19f3d42c2eb3bae9e46c3533963451fd" translate="yes" xml:space="preserve">
          <source>To convert your configuration file, pass in the location of your &lt;code&gt;.jscs.json&lt;/code&gt; file using the &lt;code&gt;--jscs&lt;/code&gt; flag:</source>
          <target state="translated">구성 파일을 변환하려면 &lt;code&gt;--jscs&lt;/code&gt; 플래그를 사용 하여 &lt;code&gt;.jscs.json&lt;/code&gt; 파일 의 위치를 ​​전달하십시오 .</target>
        </trans-unit>
        <trans-unit id="77785dc236e7b19dd9bed6daf0cc68f44f276c56" translate="yes" xml:space="preserve">
          <source>To create a new configuration, use &lt;code&gt;eslint --init&lt;/code&gt;.</source>
          <target state="translated">새 구성을 만들려면 &lt;code&gt;eslint --init&lt;/code&gt; 를 사용 하십시오 .</target>
        </trans-unit>
        <trans-unit id="ce6ce0f45296644008f861b43c9c686e0dc163fc" translate="yes" xml:space="preserve">
          <source>To disable a specific rule on a specific line:</source>
          <target state="translated">특정 줄에서 특정 규칙을 비활성화하려면</target>
        </trans-unit>
        <trans-unit id="0ac11ab6485b3bd3365938c2c8119a6d129eca53" translate="yes" xml:space="preserve">
          <source>To disable all inline config comments, use &lt;code&gt;noInlineConfig&lt;/code&gt; setting. For example:</source>
          <target state="translated">모든 인라인 구성 주석을 비활성화하려면 &lt;code&gt;noInlineConfig&lt;/code&gt; 설정을 사용 하십시오 . 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="03e0c39d9d8219c16b6cbcfc45577e3c33b02ebf" translate="yes" xml:space="preserve">
          <source>To disable all rules on a specific line, use a line or block comment in one of the following formats:</source>
          <target state="translated">특정 라인에서 모든 규칙을 비활성화하려면 다음 형식 중 하나의 라인 또는 블록 주석을 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="271e327f6c0834035985f27ecece143d28b8459e" translate="yes" xml:space="preserve">
          <source>To disable multiple rules on a specific line:</source>
          <target state="translated">특정 줄에서 여러 규칙을 비활성화하려면</target>
        </trans-unit>
        <trans-unit id="683c891a847acfa4dba3ef3ecf6ed604bdc365ca" translate="yes" xml:space="preserve">
          <source>To disable rule warnings in an entire file, put a &lt;code&gt;/* eslint-disable */&lt;/code&gt; block comment at the top of the file:</source>
          <target state="translated">전체 파일에서 규칙 경고를 비활성화하려면 파일 맨 위에 &lt;code&gt;/* eslint-disable */&lt;/code&gt; block comment를 넣으십시오 .</target>
        </trans-unit>
        <trans-unit id="f1745e3074c16577eb0d3188a55a10e1b867a9cd" translate="yes" xml:space="preserve">
          <source>To disable rules inside of a configuration file for a group of files, use the &lt;code&gt;overrides&lt;/code&gt; key along with a &lt;code&gt;files&lt;/code&gt; key. For example:</source>
          <target state="translated">파일 그룹에 대한 구성 파일의 내부 해제 규칙, 사용 &lt;code&gt;overrides&lt;/code&gt; A를 따라 키 &lt;code&gt;files&lt;/code&gt; 키를 누릅니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="b8f1f08d11bea7b02e90495a32037848c60c55f9" translate="yes" xml:space="preserve">
          <source>To ensure that the lexical declaration only applies to the current case clause wrap your clauses in blocks.</source>
          <target state="translated">어휘 선언이 현재 case 절에만 적용되도록하려면 절을 블록으로 묶습니다.</target>
        </trans-unit>
        <trans-unit id="203499bc397be69d693c53db5b7bda7324e98567" translate="yes" xml:space="preserve">
          <source>To indicate the npm module to use as your parser, specify it using the &lt;code&gt;parser&lt;/code&gt; option in your &lt;code&gt;.eslintrc&lt;/code&gt; file. For example, the following specifies to use Esprima instead of Espree:</source>
          <target state="translated">구문 분석기로 사용할 npm 모듈을 표시하려면 &lt;code&gt;.eslintrc&lt;/code&gt; 파일 에서 &lt;code&gt;parser&lt;/code&gt; 옵션을 사용하여 모듈을 지정 하십시오. 예를 들어 다음은 Espree 대신 Esprima를 사용하도록 지정합니다.</target>
        </trans-unit>
        <trans-unit id="f1585cd31339333c37b0e7c375bfef062803fc36" translate="yes" xml:space="preserve">
          <source>To initialize a variable that may later be assign an object value.</source>
          <target state="translated">나중에 객체 값을 할당 할 수있는 변수를 초기화합니다.</target>
        </trans-unit>
        <trans-unit id="d4f82ac6eaff3a37fd353e8d075c1052823073fd" translate="yes" xml:space="preserve">
          <source>To install Polyjuice:</source>
          <target state="translated">Polyjuice를 설치하려면</target>
        </trans-unit>
        <trans-unit id="89616f5d48bf864dd46150c58347b2c372b8b623" translate="yes" xml:space="preserve">
          <source>To keep a sense of consistency when using generators this rule enforces a single position for the &lt;code&gt;*&lt;/code&gt;.</source>
          <target state="translated">생성기를 사용할 때 일관성을 유지하기 위해이 규칙은 &lt;code&gt;*&lt;/code&gt; 에 대해 단일 위치를 적용합니다 .</target>
        </trans-unit>
        <trans-unit id="014798f51883ce0b4cab2a7f0b2665430ff5f4e4" translate="yes" xml:space="preserve">
          <source>To keep the linting process efficient and unobtrusive, it is useful to verify the performance impact of new rules or modifications to existing rules.</source>
          <target state="translated">린트 프로세스를 효율적이고 눈에 잘 띄지 않게하려면 새 규칙의 성능 영향 또는 기존 규칙에 대한 수정이 유용한 지 확인하는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="7d2dc22ac67dd4ce52516c75cdd733df869e84d8" translate="yes" xml:space="preserve">
          <source>To learn more about JSON Schema, we recommend looking at some &lt;a href=&quot;http://json-schema.org/examples.html&quot;&gt;examples&lt;/a&gt; to start, and also reading &lt;a href=&quot;http://spacetelescope.github.io/understanding-json-schema/&quot;&gt;Understanding JSON Schema&lt;/a&gt; (a free ebook).</source>
          <target state="translated">JSON 스키마에 대해 자세히 알아 보려면 시작할 몇 가지 &lt;a href=&quot;http://json-schema.org/examples.html&quot;&gt;예제&lt;/a&gt; 를 보고 &lt;a href=&quot;http://spacetelescope.github.io/understanding-json-schema/&quot;&gt;JSON 스키마 이해&lt;/a&gt; (무료 전자 책)를 읽는 것이 좋습니다 .</target>
        </trans-unit>
        <trans-unit id="79796a3f8f6c8d8fb890e20aed0a655344148bba" translate="yes" xml:space="preserve">
          <source>To learn more about JSON Schema, we recommend looking at some examples in &lt;a href=&quot;http://json-schema.org/learn/&quot;&gt;website&lt;/a&gt; to start, and also reading &lt;a href=&quot;http://spacetelescope.github.io/understanding-json-schema/&quot;&gt;Understanding JSON Schema&lt;/a&gt; (a free ebook).</source>
          <target state="translated">JSON 스키마에 대한 자세한 내용을 보려면 &lt;a href=&quot;http://json-schema.org/learn/&quot;&gt;웹 사이트&lt;/a&gt; 에서 몇 가지 예제 를 시작하고 &lt;a href=&quot;http://spacetelescope.github.io/understanding-json-schema/&quot;&gt;JSON 스키마 이해&lt;/a&gt; (무료 전자 책)를 읽는 것이 좋습니다 .</target>
        </trans-unit>
        <trans-unit id="3d8f5c39c2c8d40a0e743e69935a37baafecadf9" translate="yes" xml:space="preserve">
          <source>To make clear that the plugin requires ESLint to work correctly you have to declare ESLint as a &lt;code&gt;peerDependency&lt;/code&gt; in your &lt;code&gt;package.json&lt;/code&gt;. The plugin support was introduced in ESLint version &lt;code&gt;0.8.0&lt;/code&gt;. Ensure the &lt;code&gt;peerDependency&lt;/code&gt; points to ESLint &lt;code&gt;0.8.0&lt;/code&gt; or later.</source>
          <target state="translated">플러그인 당신이로 ESLint을 선언해야 제대로 작동하려면 ESLint 필요하다는 것을 명확하게하려면 &lt;code&gt;peerDependency&lt;/code&gt; 당신의 &lt;code&gt;package.json&lt;/code&gt; . 플러그인 지원은 ESLint 버전 &lt;code&gt;0.8.0&lt;/code&gt; 에서 도입되었습니다 . &lt;code&gt;peerDependency&lt;/code&gt; 가 ESLint &lt;code&gt;0.8.0&lt;/code&gt; 이상을 가리키는 지 확인하십시오 .</target>
        </trans-unit>
        <trans-unit id="7f0072825b5e8b7c9c452a6d4e5adffbaf9e06d2" translate="yes" xml:space="preserve">
          <source>To make the upgrade process easier, we've introduced the &lt;a href=&quot;../rules/indent-legacy&quot;&gt;&lt;code&gt;indent-legacy&lt;/code&gt;&lt;/a&gt; rule as a snapshot of the &lt;code&gt;indent&lt;/code&gt; rule from 3.x. If you run into issues from the &lt;code&gt;indent&lt;/code&gt; rule when you upgrade, you should be able to use the &lt;code&gt;indent-legacy&lt;/code&gt; rule to replicate the 3.x behavior. However, the &lt;code&gt;indent-legacy&lt;/code&gt; rule is deprecated and will not receive bugfixes or improvements in the future, so you should eventually switch back to the &lt;code&gt;indent&lt;/code&gt; rule.</source>
          <target state="translated">업그레이드 프로세스를보다 쉽게하기 위해 &lt;a href=&quot;../rules/indent-legacy&quot;&gt; &lt;code&gt;indent-legacy&lt;/code&gt; &lt;/a&gt; 규칙을 3.x에서 &lt;code&gt;indent&lt;/code&gt; 규칙 의 스냅 샷으로 도입했습니다 . 업그레이드 할 때 &lt;code&gt;indent&lt;/code&gt; 규칙 에서 문제가 발생하면 들여 쓰기 &lt;code&gt;indent-legacy&lt;/code&gt; 규칙을 사용하여 3.x 동작을 복제 할 수 있어야합니다 . 그러나 &lt;code&gt;indent-legacy&lt;/code&gt; 규칙은 더 이상 사용되지 않으며 향후 버그 수정 또는 개선 사항을받지 않으므로 결국 &lt;code&gt;indent&lt;/code&gt; 규칙으로 다시 전환해야합니다 .</target>
        </trans-unit>
        <trans-unit id="c45b0a04793c13b7a0abac51b4665eb87ba73c97" translate="yes" xml:space="preserve">
          <source>To pass into a function where an object is expected.</source>
          <target state="translated">객체가 필요한 함수에 전달합니다.</target>
        </trans-unit>
        <trans-unit id="83e3945e063cd92d025529797a0272c100afe72e" translate="yes" xml:space="preserve">
          <source>To prevent calling the callback multiple times it is important to &lt;code&gt;return&lt;/code&gt; anytime the callback is triggered outside of the main function body. Neglecting this technique often leads to issues where you do something more than once. For example, in the case of an HTTP request, you may try to send HTTP headers more than once leading Node.js to &lt;code&gt;throw&lt;/code&gt; a &lt;code&gt;Can't render headers after they are sent to the client.&lt;/code&gt; error.</source>
          <target state="translated">콜백을 여러 번 호출하는 것을 방지하려면 콜백이 주 함수 본문 외부에서 트리거 될 &lt;code&gt;return&lt;/code&gt; 마다 리턴해야 합니다. 이 기술을 무시하면 종종 두 번 이상 무언가를하는 문제가 발생합니다. 예를 들어, HTTP 요청의 경우, 당신은 Node.js를 선도하는 번 이상 HTTP 헤더를 보내려고 할 수 있습니다 &lt;code&gt;throw&lt;/code&gt; A는 &lt;code&gt;Can't render headers after they are sent to the client.&lt;/code&gt; 오류.</target>
        </trans-unit>
        <trans-unit id="a0be1e74e739008ed7d10977cc1e906c88cb6fa1" translate="yes" xml:space="preserve">
          <source>To programmatically set &lt;code&gt;.eslintrc.*&lt;/code&gt; options not supported above (such as &lt;code&gt;extends&lt;/code&gt;, &lt;code&gt;overrides&lt;/code&gt; and &lt;code&gt;settings&lt;/code&gt;), define them in a config object passed to &lt;code&gt;baseConfig&lt;/code&gt; instead.</source>
          <target state="translated">위에서 지원되지 않는 &lt;code&gt;.eslintrc.*&lt;/code&gt; 옵션 (예 : &lt;code&gt;extends&lt;/code&gt; , &lt;code&gt;overrides&lt;/code&gt; 및 &lt;code&gt;settings&lt;/code&gt; ) 을 프로그래밍 방식으로 설정하려면 대신 &lt;code&gt;baseConfig&lt;/code&gt; 에 전달 된 구성 객체에서 정의하십시오 .</target>
        </trans-unit>
        <trans-unit id="201bfabb446b5a5e524d44ebbd491ddebd41f0f7" translate="yes" xml:space="preserve">
          <source>To propose a change to an existing rule, &lt;a href=&quot;pull-requests&quot;&gt;create a pull request&lt;/a&gt; or &lt;a href=&quot;https://github.com/eslint/eslint/issues/new?template=RULE_CHANGE.md&quot;&gt;new issue&lt;/a&gt; and fill out the template.</source>
          <target state="translated">기존 규칙에 대한 변경을 제안하려면 &lt;a href=&quot;pull-requests&quot;&gt;풀 요청&lt;/a&gt; 또는 &lt;a href=&quot;https://github.com/eslint/eslint/issues/new?template=RULE_CHANGE.md&quot;&gt;새 이슈를 &lt;/a&gt;생성 하고 템플릿을 작성하십시오.</target>
        </trans-unit>
        <trans-unit id="e83198b0a74df694fcf2b005dd304829d6849799" translate="yes" xml:space="preserve">
          <source>To report a security vulnerability in ESLint, please use our &lt;a href=&quot;https://hackerone.com/eslint&quot;&gt;HackerOne program&lt;/a&gt;.</source>
          <target state="translated">ESLint의 보안 취약점을보고하려면 &lt;a href=&quot;https://hackerone.com/eslint&quot;&gt;HackerOne 프로그램을&lt;/a&gt; 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="b567fa067e888b6361b686f01a36f861a714890e" translate="yes" xml:space="preserve">
          <source>To report unused &lt;code&gt;eslint-disable&lt;/code&gt; comments, use &lt;code&gt;reportUnusedDisableDirectives&lt;/code&gt; setting. For example:</source>
          <target state="translated">사용하지 않는 &lt;code&gt;eslint-disable&lt;/code&gt; 설명 을보고하려면 &lt;code&gt;reportUnusedDisableDirectives&lt;/code&gt; 설정을 사용 하십시오 . 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="43674a214ae4f8884b5b999f624a4924ae51e2e3" translate="yes" xml:space="preserve">
          <source>To restore the previous behavior of a string option like &lt;code&gt;&quot;always-multiline&quot;&lt;/code&gt;, replace &lt;code&gt;&quot;never&quot;&lt;/code&gt; with &lt;code&gt;&quot;always-multiline&quot;&lt;/code&gt; in the example above.</source>
          <target state="translated">&lt;code&gt;&quot;always-multiline&quot;&lt;/code&gt; 과 같은 문자열 옵션의 이전 동작을 복원하려면 위 예에서 &lt;code&gt;&quot;never&quot;&lt;/code&gt; 를 &lt;code&gt;&quot;always-multiline&quot;&lt;/code&gt; 으로 바꾸십시오 .</target>
        </trans-unit>
        <trans-unit id="93f41caa6af8c347bb85a914ee52d8627febd940" translate="yes" xml:space="preserve">
          <source>To restore the previous options for the rule, you can configure it as follows:</source>
          <target state="translated">규칙의 이전 옵션을 복원하기 위해 다음과 같이 구성 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a1bd13d216162d39f3a12526c2dd871cd53799b1" translate="yes" xml:space="preserve">
          <source>To restrict the use of all Node.js core imports (via https://github.com/nodejs/node/tree/master/lib):</source>
          <target state="translated">https://github.com/nodejs/node/tree/master/lib를 통해 모든 Node.js 코어 가져 오기 사용을 제한하려면 다음을 수행하십시오.</target>
        </trans-unit>
        <trans-unit id="1c78dcabe0d43517abe82ce3e2716690299693b6" translate="yes" xml:space="preserve">
          <source>To restrict the use of all Node.js core modules (via https://github.com/nodejs/node/tree/master/lib):</source>
          <target state="translated">https://github.com/nodejs/node/tree/master/lib를 통해 모든 Node.js 핵심 모듈의 사용을 제한하려면 다음을 수행하십시오.</target>
        </trans-unit>
        <trans-unit id="c55df0a6472dd4b4e66373936e321df946ca7541" translate="yes" xml:space="preserve">
          <source>To return from a function where an object is expected.</source>
          <target state="translated">객체가 필요한 함수에서 돌아옵니다.</target>
        </trans-unit>
        <trans-unit id="721ccdb4417d969301a1c4093826c5db56bffc2f" translate="yes" xml:space="preserve">
          <source>To run ESLint on Node.js, you must have npm installed. If npm is not installed, follow the instructions here: https://www.npmjs.com/</source>
          <target state="translated">Node.js에서 ESLint를 실행하려면 npm이 설치되어 있어야합니다. npm이 설치되지 않은 경우 여기의 지시 사항을 따르십시오 : https://www.npmjs.com/</target>
        </trans-unit>
        <trans-unit id="7ef00b1683cdab559312cccf7254b9d3cdecbcf2" translate="yes" xml:space="preserve">
          <source>To run ESLint with this formatter, you can use the &lt;code&gt;-f&lt;/code&gt; (or &lt;code&gt;--formatter&lt;/code&gt;) command line flag:</source>
          <target state="translated">이 포맷터와 함께 ESLint를 실행하려면 &lt;code&gt;-f&lt;/code&gt; (또는 &lt;code&gt;--formatter&lt;/code&gt; ) 명령 행 플래그를 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="a03320f309e4584fa0a9625239401ea837f08db0" translate="yes" xml:space="preserve">
          <source>To specify environments in a configuration file, use the &lt;code&gt;env&lt;/code&gt; key and specify which environments you want to enable by setting each to &lt;code&gt;true&lt;/code&gt;. For example, the following enables the browser and Node.js environments:</source>
          <target state="translated">구성 파일에서 환경을 지정하려면 &lt;code&gt;env&lt;/code&gt; 키를 사용하고 각 환경을 &lt;code&gt;true&lt;/code&gt; 로 설정하여 사용하려는 환경을 지정하십시오 . 예를 들어, 다음은 브라우저 및 Node.js 환경을 활성화합니다.</target>
        </trans-unit>
        <trans-unit id="495e8e76dc85c614865914b900b3e79f15c83ac1" translate="yes" xml:space="preserve">
          <source>To specify environments using a comment inside of your JavaScript file, use the following format:</source>
          <target state="translated">JavaScript 파일 내에서 주석을 사용하여 환경을 지정하려면 다음 형식을 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="871bade776d5dd80ffa710cb32ea4c1f403ba185" translate="yes" xml:space="preserve">
          <source>To specify globals using a comment inside of your JavaScript file, use the following format:</source>
          <target state="translated">JavaScript 파일 내부의 주석을 사용하여 전역을 지정하려면 다음 형식을 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="4d99775a8ebadc5b547b76108d1fcd2ee02b18da" translate="yes" xml:space="preserve">
          <source>To specify processors for a specific kind of files, use the combination of the &lt;code&gt;overrides&lt;/code&gt; key and the &lt;code&gt;processor&lt;/code&gt; key. For example, the following uses the processor &lt;code&gt;a-plugin/markdown&lt;/code&gt; for &lt;code&gt;*.md&lt;/code&gt; files.</source>
          <target state="translated">특정 종류의 파일에 대한 프로세서를 지정하려면 &lt;code&gt;overrides&lt;/code&gt; 키와 &lt;code&gt;processor&lt;/code&gt; 키 의 조합을 사용하십시오 . 예를 들어, 다음은 &lt;code&gt;*.md&lt;/code&gt; 파일에 프로세서 &lt;code&gt;a-plugin/markdown&lt;/code&gt; 을 사용 합니다.</target>
        </trans-unit>
        <trans-unit id="723b7b22d828cba77882c9fa33c876e8ac01c597" translate="yes" xml:space="preserve">
          <source>To specify processors in a configuration file, use the &lt;code&gt;processor&lt;/code&gt; key with the concatenated string of a plugin name and a processor name by a slash. For example, the following enables the processor &lt;code&gt;a-processor&lt;/code&gt; that the plugin &lt;code&gt;a-plugin&lt;/code&gt; provided:</source>
          <target state="translated">구성 파일에서 프로세서를 지정하려면 플러그인 이름의 연결된 문자열과 프로세서 이름을 슬래시로 사용하여 &lt;code&gt;processor&lt;/code&gt; 키를 사용하십시오 . 예를 들어, 다음은 플러그인 &lt;code&gt;a-plugin&lt;/code&gt; 이 제공 한 &lt;code&gt;a-processor&lt;/code&gt; a- 프로세서 를 활성화합니다 .</target>
        </trans-unit>
        <trans-unit id="67c36e41c644a39ed1cc6fc2e78067a36986c4cc" translate="yes" xml:space="preserve">
          <source>To temporarily disable rule warnings in your file, use block comments in the following format:</source>
          <target state="translated">파일에서 규칙 경고를 일시적으로 비활성화하려면 다음 형식의 블록 주석을 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="eb0874bfc2758468b0b50d63606f56c7bf6e56d2" translate="yes" xml:space="preserve">
          <source>To test one rule explicitly, combine the &lt;code&gt;--no-eslintrc&lt;/code&gt;, and &lt;code&gt;--rule&lt;/code&gt; options:</source>
          <target state="translated">하나의 규칙을 명시 적으로 테스트하려면 &lt;code&gt;--no-eslintrc&lt;/code&gt; 및 &lt;code&gt;--rule&lt;/code&gt; 옵션을 결합하십시오 .</target>
        </trans-unit>
        <trans-unit id="891f46c7dc6414e9bb18032c28d627aeff17b6b1" translate="yes" xml:space="preserve">
          <source>To use a processor, add its ID to a &lt;code&gt;processor&lt;/code&gt; section in the config file. Processor ID is a concatenated string of plugin name and processor name with a slash as a separator. This can also be added to a &lt;code&gt;overrides&lt;/code&gt; section of the config, to specify which processors should handle which files.</source>
          <target state="translated">프로세서를 사용하려면 구성 파일 의 &lt;code&gt;processor&lt;/code&gt; 섹션에 해당 ID를 추가 하십시오. 프로세서 ID는 분리 된 플러그인 이름과 프로세서 이름의 문자열입니다. 이것은 어떤 프로세서가 어떤 파일을 처리해야하는지 지정하기 위해 구성 의 &lt;code&gt;overrides&lt;/code&gt; 섹션에 추가 될 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="6c4e8891d882a51f0c8905192b3c8f74ba87a214" translate="yes" xml:space="preserve">
          <source>To use custom parsers in tests, we could use &lt;code&gt;parser&lt;/code&gt; property with a package name or file path. However, if a package name was given, it's unclear where the tester should load the parser package from because the tester doesn't know which files are running the tester. In ESLint v6.0.0, &lt;code&gt;RuleTester&lt;/code&gt; disallows &lt;code&gt;parser&lt;/code&gt; property with a package name.</source>
          <target state="translated">테스트에서 사용자 정의 파서를 사용하기 위해 패키지 이름 또는 파일 경로와 함께 &lt;code&gt;parser&lt;/code&gt; 속성을 사용할 수 있습니다 . 그러나 패키지 이름이 지정된 경우 테스터가 어떤 파일이 테스터를 실행 중인지 알 수 없으므로 테스터가 파서 패키지를로드해야하는 위치가 확실하지 않습니다. ESLint v6.0.0에서 &lt;code&gt;RuleTester&lt;/code&gt; 는 패키지 이름이있는 &lt;code&gt;parser&lt;/code&gt; 특성을 허용하지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="e57cc33fc747f8014fd7902fcb60a357b4a1a111" translate="yes" xml:space="preserve">
          <source>To use the rule in ESLint, you would use the unprefixed plugin name, followed by a slash, followed by the rule name. So if this plugin were named &lt;code&gt;eslint-plugin-myplugin&lt;/code&gt;, then in your configuration you'd refer to the rule by the name &lt;code&gt;myplugin/dollar-sign&lt;/code&gt;. Example: &lt;code&gt;&quot;rules&quot;: {&quot;myplugin/dollar-sign&quot;: 2}&lt;/code&gt;.</source>
          <target state="translated">ESLint에서 규칙을 사용하려면 접두사 뒤에 붙지 않은 플러그인 이름, 슬래시, 규칙 이름을 사용합니다. 따라서이 플러그인의 이름이 &lt;code&gt;eslint-plugin-myplugin&lt;/code&gt; 이면 구성에서 이름이 &lt;code&gt;myplugin/dollar-sign&lt;/code&gt; 인 규칙을 참조하게됩니다 . 예 : &lt;code&gt;&quot;rules&quot;: {&quot;myplugin/dollar-sign&quot;: 2}&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="ff0243bfd180221afc684bd012fe971d219f3914" translate="yes" xml:space="preserve">
          <source>To use this rule you either need to &lt;a href=&quot;../user-guide/configuring#specifying-environments&quot;&gt;use the &lt;code&gt;es6&lt;/code&gt; environment&lt;/a&gt; or &lt;a href=&quot;../user-guide/configuring#specifying-parser-options&quot;&gt;set &lt;code&gt;ecmaVersion&lt;/code&gt; to &lt;code&gt;6&lt;/code&gt; in &lt;code&gt;parserOptions&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">이 규칙에 당신이 중 하나를 필요 사용하려면 &lt;a href=&quot;../user-guide/configuring#specifying-environments&quot;&gt;사용 &lt;code&gt;es6&lt;/code&gt; 환경&lt;/a&gt; 이나 &lt;a href=&quot;../user-guide/configuring#specifying-parser-options&quot;&gt;설정 &lt;code&gt;ecmaVersion&lt;/code&gt; 을 에 &lt;code&gt;6&lt;/code&gt; 에 &lt;code&gt;parserOptions&lt;/code&gt; 을&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="1f00b91a2a4b27b5dd6a4d6851934df0ad3c4918" translate="yes" xml:space="preserve">
          <source>Token traversal methods</source>
          <target state="translated">토큰 순회 방법</target>
        </trans-unit>
        <trans-unit id="f588750190bb407612d4d3cc95313c9f0366ef4b" translate="yes" xml:space="preserve">
          <source>Trailing commas in object literals are valid according to the ECMAScript 5 (and ECMAScript 3!) spec, however IE8 (when not in IE8 document mode) and below will throw an error when it encounters trailing commas in JavaScript.</source>
          <target state="translated">객체 리터럴의 후행 쉼표는 ECMAScript 5 (및 ECMAScript 3!) 사양에 따라 유효하지만, IE8 (IE8 문서 모드가 아닌 경우) 이하에서는 JavaScript에서 후행 쉼표가 발생하면 오류가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="a5e53b1f9f6188b4f85c8629c6f48dab687880d7" translate="yes" xml:space="preserve">
          <source>Trailing commas in object literals are valid according to the ECMAScript 5 (and ECMAScript 3!) spec. However, IE8 (when not in IE8 document mode) and below will throw an error when it encounters trailing commas in JavaScript.</source>
          <target state="translated">객체 리터럴의 후행 쉼표는 ECMAScript 5 (및 ECMAScript 3!) 사양에 따라 유효합니다. 그러나 IE8 (IE8 문서 모드가 아닌 경우) 이하에서는 JavaScript에서 후행 쉼표가 발생하면 오류가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="42f8e54908dd12f18038e48f38d2a5fc210a145c" translate="yes" xml:space="preserve">
          <source>Trailing commas simplify adding and removing items to objects and arrays, since only the lines you are modifying must be touched. Another argument in favor of trailing commas is that it improves the clarity of diffs when an item is added or removed from an object or array:</source>
          <target state="translated">후행 쉼표는 수정하려는 줄만 터치해야하므로 객체와 배열에 항목을 쉽게 추가하고 제거 할 수 있습니다. 후행 쉼표에 찬성하는 또 다른 주장은 항목이 객체 또는 배열에서 추가되거나 제거 될 때 diff의 선명도를 향상 시킨다는 것입니다.</target>
        </trans-unit>
        <trans-unit id="1e1791fddec4ea7e52795883f2a6849c505d7048" translate="yes" xml:space="preserve">
          <source>Trailing newlines in non-empty files are a common UNIX idiom. Benefits of trailing newlines include the ability to concatenate or append to files as well as output files to the terminal without interfering with shell prompts.</source>
          <target state="translated">비어 있지 않은 파일에서 줄 바꿈은 일반적인 UNIX 관용구입니다. 줄 바꿈 후행의 이점에는 쉘 프롬프트를 방해하지 않고 파일을 연결하거나 파일에 추가하고 터미널에 출력 파일을 추가하는 기능이 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="e53d9b4b888b92bc998ba043c0f679b9430de24e" translate="yes" xml:space="preserve">
          <source>Treat var as Block Scoped (block-scoped-var)</source>
          <target state="translated">var를 블록 범위로 취급 (block-scoped-var)</target>
        </trans-unit>
        <trans-unit id="4f3d6d9d6adfe503a76d26f73c73b70e417c1fa1" translate="yes" xml:space="preserve">
          <source>Triggering the callback within a nested function</source>
          <target state="translated">중첩 함수 내에서 콜백 트리거</target>
        </trans-unit>
        <trans-unit id="d6036734261e1407ac1587614623993db6543f63" translate="yes" xml:space="preserve">
          <source>Turn this rule off if you do not care about allowing whitespace around the dot or before the opening bracket before properties of objects if they are on the same line.</source>
          <target state="translated">점 주위에 공백을 허용하지 않거나 객체가 동일한 선에있는 객체의 속성 앞에 여는 괄호 앞에 공백을 허용하지 않으려면이 규칙을 해제하십시오.</target>
        </trans-unit>
        <trans-unit id="a6fb61d5bdbd5563cef73b185d48d5a12fd87675" translate="yes" xml:space="preserve">
          <source>Two blank lines should always be used in the following circumstances:</source>
          <target state="translated">다음과 같은 상황에서는 항상 두 개의 빈 줄을 사용해야합니다.</target>
        </trans-unit>
        <trans-unit id="23543bb6cae6e3faed2a4ea7359e13f3351fb804" translate="yes" xml:space="preserve">
          <source>Two identical test conditions in the same chain are almost always a mistake in the code. Unless there are side effects in the expressions, a duplicate will evaluate to the same &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt; value as the identical expression earlier in the chain, meaning that its branch can never execute.</source>
          <target state="translated">동일한 체인에서 두 개의 동일한 테스트 조건은 코드에서 거의 항상 실수입니다. 표현식에 부작용이없는 한 복제본은 체인의 앞부분에있는 동일한 표현식과 동일한 &lt;code&gt;true&lt;/code&gt; 또는 &lt;code&gt;false&lt;/code&gt; 값으로 평가 되므로 분기를 실행할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="6af0c5213fca9f8826d4d810bb2b07a12f3adeda" translate="yes" xml:space="preserve">
          <source>Two new rules have been added to the &lt;a href=&quot;configuring#using-eslintrecommended&quot;&gt;&lt;code&gt;eslint:recommended&lt;/code&gt;&lt;/a&gt; config:</source>
          <target state="translated">&lt;a href=&quot;configuring#using-eslintrecommended&quot;&gt; &lt;code&gt;eslint:recommended&lt;/code&gt; &lt;/a&gt; 구성에 두 가지 새로운 규칙이 추가되었습니다 .</target>
        </trans-unit>
        <trans-unit id="89012465840cf6a663f53d89d53a93ba89e2ab72" translate="yes" xml:space="preserve">
          <source>Two spaces, not longer and no tabs: Google, npm, Node.js, Idiomatic, Felix</source>
          <target state="translated">Google, npm, Node.js, 관용구, Felix 등 더 이상 공백이없고 탭이없는 공간</target>
        </trans-unit>
        <trans-unit id="91d3d6d9190bf1f4632f0830dbb8f846ba8033ea" translate="yes" xml:space="preserve">
          <source>Typing mistakes and misunderstandings about where semicolons are required can lead to semicolons that are unnecessary. While not technically an error, extra semicolons can cause confusion when reading code.</source>
          <target state="translated">세미콜론이 필요한 위치에 대한 실수와 오해를 입력하면 불필요한 세미콜론이 발생할 수 있습니다. 기술적으로 오류는 아니지만 코드를 읽을 때 여분의 세미콜론이 혼동 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="6b03881360fb7fb50c7b50f0425294244e2ef376" translate="yes" xml:space="preserve">
          <source>Under non ES2015 environment, it might be ignored merely.</source>
          <target state="translated">ES2015가 아닌 환경에서는 무시해도됩니다.</target>
        </trans-unit>
        <trans-unit id="6117511d586c10e8d8d5e71cb63042e9de4e8759" translate="yes" xml:space="preserve">
          <source>Under the strict mode, &lt;code&gt;this&lt;/code&gt; keywords outside of classes or class-like objects might be &lt;code&gt;undefined&lt;/code&gt; and raise a &lt;code&gt;TypeError&lt;/code&gt;.</source>
          <target state="translated">엄격 모드에서 클래스 또는 클래스 유사 오브젝트 외부 &lt;code&gt;this&lt;/code&gt; 키워드는 &lt;code&gt;undefined&lt;/code&gt; 으며 &lt;code&gt;TypeError&lt;/code&gt; 가 발생 합니다.</target>
        </trans-unit>
        <trans-unit id="435196d8251f5646211334f3e3f54b6b93ccb010" translate="yes" xml:space="preserve">
          <source>Understanding ES6: Accessor Properties</source>
          <target state="translated">ES6 이해 : 접근 자 속성</target>
        </trans-unit>
        <trans-unit id="83561aad3017c9c3ace3fd6ce8b94644c28a5684" translate="yes" xml:space="preserve">
          <source>Understanding ES6: Generators</source>
          <target state="translated">ES6 이해 : 생성기</target>
        </trans-unit>
        <trans-unit id="ab72f7b4a6ebe0315e7168be210b1247953821fe" translate="yes" xml:space="preserve">
          <source>Understanding JavaScript&amp;rsquo;s &amp;lsquo;undefined&amp;rsquo; | JavaScript, JavaScript...</source>
          <target state="translated">JavaScript의 '정의되지 않은'이해 | 자바 스크립트, 자바 스크립트 ...</target>
        </trans-unit>
        <trans-unit id="35bb1c8bbba51795c3d24686d2f47445bc17d0b6" translate="yes" xml:space="preserve">
          <source>Understanding JavaScript's Function.prototype.bind</source>
          <target state="translated">JavaScript의 Function.prototype.bind 이해</target>
        </trans-unit>
        <trans-unit id="bb8b88dbe8776e9f43a70c7c21cdbf0f5fb1ce3a" translate="yes" xml:space="preserve">
          <source>Unfortunately, this introduces a high potential for confusion since the code author likely meant to write:</source>
          <target state="translated">불행히도 코드 작성자는 다음과 같이 작성해야했기 때문에 혼동의 가능성이 높습니다.</target>
        </trans-unit>
        <trans-unit id="d48b11fe7b81214ca619d17883fb3645e879279b" translate="yes" xml:space="preserve">
          <source>Unicode includes the characters which are made with multiple code points. RegExp character class syntax (&lt;code&gt;/[abc]/&lt;/code&gt;) cannot handle characters which are made by multiple code points as a character; those characters will be dissolved to each code point. For example, &lt;code&gt;❇️&lt;/code&gt; is made by &lt;code&gt;❇&lt;/code&gt; (&lt;code&gt;U+2747&lt;/code&gt;) and VARIATION SELECTOR-16 (&lt;code&gt;U+FE0F&lt;/code&gt;). If this character is in RegExp character class, it will match to either &lt;code&gt;❇&lt;/code&gt; (&lt;code&gt;U+2747&lt;/code&gt;) or VARIATION SELECTOR-16 (&lt;code&gt;U+FE0F&lt;/code&gt;) rather than &lt;code&gt;❇️&lt;/code&gt;.</source>
          <target state="translated">유니 코드에는 여러 코드 포인트로 만든 문자가 포함됩니다. RegExp 문자 클래스 구문 ( &lt;code&gt;/[abc]/&lt;/code&gt; )은 여러 코드 포인트로 작성된 문자를 문자로 처리 할 수 ​​없습니다. 해당 문자는 각 코드 포인트에 용해됩니다. 예를 들어, &lt;code&gt;❇️&lt;/code&gt; 의해 이루어진다 &lt;code&gt;❇&lt;/code&gt; ( &lt;code&gt;U+2747&lt;/code&gt; )과 VARIATION SELECTOR-16 ( &lt;code&gt;U+FE0F&lt;/code&gt; ). 이 문자는 정규식 문자 클래스에있는 경우 중 하나에 일치 &lt;code&gt;❇&lt;/code&gt; ( &lt;code&gt;U+2747&lt;/code&gt; ) 또는 VARIATION SELECTOR-16 ( &lt;code&gt;U+FE0F&lt;/code&gt; 보다는) &lt;code&gt;❇️&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="55319d93decd49524c6577ad2944aab8499b8def" translate="yes" xml:space="preserve">
          <source>Unit Tests</source>
          <target state="translated">단위 테스트</target>
        </trans-unit>
        <trans-unit id="ed268ddbd2a8fdb80c5132135ac42034d7585ab8" translate="yes" xml:space="preserve">
          <source>Unlike statically-typed languages which enforce that a function returns a specified type of value, JavaScript allows different code paths in a function to return different types of values.</source>
          <target state="translated">함수가 지정된 유형의 값을 반환하도록하는 정적 인 형식의 언어와 달리 JavaScript는 함수의 다른 코드 경로가 다른 유형의 값을 반환 할 수 있도록합니다.</target>
        </trans-unit>
        <trans-unit id="e8255c66699d44e4e1f6dce4f3bf4faf99e81e92" translate="yes" xml:space="preserve">
          <source>Unlike string literals in JavaScript, string literals within JSX attributes can&amp;rsquo;t contain escaped quotes. If you want to have e.g. a double quote within a JSX attribute value, you have to use single quotes as string delimiter.</source>
          <target state="translated">JavaScript의 문자열 리터럴과 달리 JSX 속성 내의 문자열 리터럴은 이스케이프 따옴표를 포함 할 수 없습니다. 예를 들어 JSX 속성 값 내에 큰 따옴표를 사용하려면 작은 따옴표를 문자열 구분 기호로 사용해야합니다.</target>
        </trans-unit>
        <trans-unit id="61fa2bfb22938ebb5c32094dc4ee0f186aaf0a6b" translate="yes" xml:space="preserve">
          <source>Unquoted property names / object keys in JavaScript</source>
          <target state="translated">JavaScript에서 따옴표없는 속성 이름 / 개체 키</target>
        </trans-unit>
        <trans-unit id="7ff0c77b350a5aadeaa42ace88086b4b816bf51c" translate="yes" xml:space="preserve">
          <source>Unrecognized properties in config files now cause a fatal error</source>
          <target state="translated">구성 파일에서 인식 할 수없는 속성으로 인해 치명적인 오류가 발생 함</target>
        </trans-unit>
        <trans-unit id="bac9e5ab73111bc19c6b0aa90418a5f77b3cb1e5" translate="yes" xml:space="preserve">
          <source>Update the &lt;code&gt;postprocess&lt;/code&gt; method to additionally transform the &lt;code&gt;fix&lt;/code&gt; property of reported problems. All autofixable problems will have a &lt;code&gt;fix&lt;/code&gt; property, which is an object with the following schema:</source>
          <target state="translated">보고 된 문제점 의 &lt;code&gt;fix&lt;/code&gt; 특성 을 추가로 변환 하려면 &lt;code&gt;postprocess&lt;/code&gt; 메소드를 업데이트하십시오 . 모든 자동 &lt;code&gt;fix&lt;/code&gt; 문제점 에는 다음 스키마의 오브젝트 인 수정 특성 이 있습니다 .</target>
        </trans-unit>
        <trans-unit id="f19b54eaec0be934d9ffb5d7c086f2c3d8bbf5d2" translate="yes" xml:space="preserve">
          <source>Updating the Code</source>
          <target state="translated">코드 업데이트</target>
        </trans-unit>
        <trans-unit id="0081f6b97ccbd31d4c40065dd8731e13aa80ae30" translate="yes" xml:space="preserve">
          <source>Updating the Commit Message</source>
          <target state="translated">커밋 메시지 업데이트</target>
        </trans-unit>
        <trans-unit id="31fdeb34a4f4bc8a7b882018ab434e09d2defd44" translate="yes" xml:space="preserve">
          <source>Usage Examples</source>
          <target state="translated">사용 예</target>
        </trans-unit>
        <trans-unit id="ef470880f7ed6bef65c435b54eee6bca41e5a18b" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;===&lt;/code&gt; and &lt;code&gt;!==&lt;/code&gt; instead of &lt;code&gt;==&lt;/code&gt; and &lt;code&gt;!=&lt;/code&gt;. This avoids type coercion errors.</source>
          <target state="translated">&lt;code&gt;==&lt;/code&gt; 및 &lt;code&gt;!=&lt;/code&gt; 대신 &lt;code&gt;===&lt;/code&gt; 및 &lt;code&gt;!==&lt;/code&gt; 사용하십시오 . 이것은 유형 강제 오류를 피합니다.</target>
        </trans-unit>
        <trans-unit id="011ef28ad58486d3ab69359c58102b7363b2266a" translate="yes" xml:space="preserve">
          <source>Use Node.js-specific features</source>
          <target state="translated">Node.js 특정 기능 사용</target>
        </trans-unit>
        <trans-unit id="ff690daa270b01343fad8ceed7486bec02ce4b10" translate="yes" xml:space="preserve">
          <source>Use a Plugin</source>
          <target state="translated">플러그인 사용</target>
        </trans-unit>
        <trans-unit id="835f0fad91a05bc46b363064581ce1b2272a0c54" translate="yes" xml:space="preserve">
          <source>Use a formatter</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19d3d762409d13fdb5e17c521bdcc191df2d866e" translate="yes" xml:space="preserve">
          <source>Use dashes between words.</source>
          <target state="translated">단어 사이에 대시를 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="7b394f6356786472bb5d094c3bc4c3f3a803fefd" translate="yes" xml:space="preserve">
          <source>Use formatters</source>
          <target state="translated">포맷터 사용</target>
        </trans-unit>
        <trans-unit id="9066ba971418973fca320cd33a59b04d2bf395e0" translate="yes" xml:space="preserve">
          <source>Use of operator assignment shorthand is a stylistic choice. Leaving this rule turned off would allow developers to choose which style is more readable on a case-by-case basis.</source>
          <target state="translated">연산자 할당 속기 사용은 문체 선택입니다. 이 규칙을 해제하면 개발자가 사례별로 더 읽기 쉬운 스타일을 선택할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b86bbb341b0e64d3538dc061bfeb6f85388244ee" translate="yes" xml:space="preserve">
          <source>Use of the &lt;code&gt;Array&lt;/code&gt; constructor to construct a new array is generally discouraged in favor of array literal notation because of the single-argument pitfall and because the &lt;code&gt;Array&lt;/code&gt; global may be redefined. The exception is when the Array constructor is used to intentionally create sparse arrays of a specified size by giving the constructor a single numeric argument.</source>
          <target state="translated">새로운 배열을 구성하기 위해 &lt;code&gt;Array&lt;/code&gt; 생성자를 사용하는 것은 일반적으로 단일 인수 함정과 &lt;code&gt;Array&lt;/code&gt; 전역이 재정의 될 수 있기 때문에 배열 리터럴 표기법을 선호하지 않는 것이 좋습니다 . Array 생성자를 사용하여 생성자에게 단일 숫자 인수를 제공하여 지정된 크기의 희소 배열을 의도적으로 만드는 경우는 예외입니다.</target>
        </trans-unit>
        <trans-unit id="26a7add0d95cdf823b32ae21e2e3c0d2f08e62bf" translate="yes" xml:space="preserve">
          <source>Use the &lt;a href=&quot;working-on-issues#issue-labels&quot;&gt;labels of the issue you are working on&lt;/a&gt; to determine the best tag.</source>
          <target state="translated">&lt;a href=&quot;working-on-issues#issue-labels&quot;&gt;작업중인 문제&lt;/a&gt; 의 레이블을 사용하여 최상의 태그를 결정하십시오.</target>
        </trans-unit>
        <trans-unit id="bec249e659662f7d5947bf09a1ea1d4a552885b0" translate="yes" xml:space="preserve">
          <source>User Guide</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ca23839cda095745735c75553a12cf7908955e0" translate="yes" xml:space="preserve">
          <source>User-provided regular expressions in rule options are parsed with the unicode flag</source>
          <target state="translated">규칙 옵션의 사용자 제공 정규식은 유니 코드 플래그로 구문 분석됩니다</target>
        </trans-unit>
        <trans-unit id="7fd4dcddd3c0916bd4f60e031948757e96a9d5fb" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;&quot;eslint:all&quot;&lt;/code&gt;</source>
          <target state="translated">사용 &lt;code&gt;&quot;eslint:all&quot;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b1bfa835d3b3d9b6466c63ac32420431a606ac4b" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;&quot;eslint:recommended&quot;&lt;/code&gt;</source>
          <target state="translated">사용 &lt;code&gt;&quot;eslint:recommended&quot;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a2ba04df69fc28f857795f88a23c9275ba3ebf7e" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;allow&lt;/code&gt; list, we can override and allow specific operators.</source>
          <target state="translated">&lt;code&gt;allow&lt;/code&gt; 목록을 사용 하면 특정 연산자를 무시하고 허용 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c928729edb2b2cddd950bdbb1bdc2400601f8027" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;description&lt;/code&gt; promotes easier debugging: when a symbol is logged the description is used:</source>
          <target state="translated">&lt;code&gt;description&lt;/code&gt; 을 사용하면 디버깅이 쉬워집니다. 기호가 기록되면 설명이 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="20bce9c62cd08c2e7b72a20378cd436bb7459b13" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;javascript:&lt;/code&gt; URLs is considered by some as a form of &lt;code&gt;eval&lt;/code&gt;. Code passed in &lt;code&gt;javascript:&lt;/code&gt; URLs has to be parsed and evaluated by the browser in the same way that &lt;code&gt;eval&lt;/code&gt; is processed.</source>
          <target state="translated">&lt;code&gt;javascript:&lt;/code&gt; 사용 : URL은 &lt;code&gt;eval&lt;/code&gt; 형식으로 간주됩니다 . &lt;code&gt;javascript:&lt;/code&gt; 전달 된 코드 : &lt;code&gt;eval&lt;/code&gt; 을 처리 하는 것과 같은 방식으로 브라우저에서 URL을 구문 분석하고 평가해야 합니다.</target>
        </trans-unit>
        <trans-unit id="7736010ecd5cb06e1bd0f2122d0622ef44859f84" translate="yes" xml:space="preserve">
          <source>Using Configuration Comments</source>
          <target state="translated">구성 설명 사용</target>
        </trans-unit>
        <trans-unit id="dbd293c2b3a5260fa83b1710464219faa5a14998" translate="yes" xml:space="preserve">
          <source>Using Configuration Files</source>
          <target state="translated">구성 파일 사용</target>
        </trans-unit>
        <trans-unit id="5dc143959128e38d9a55d127c3233709b9ccb511" translate="yes" xml:space="preserve">
          <source>Using Different Options for Line and Block Comments</source>
          <target state="translated">라인 및 블록 주석에 다른 옵션 사용</target>
        </trans-unit>
        <trans-unit id="eeb7f893b5d295199ac44ad44dd9b3270246f3bd" translate="yes" xml:space="preserve">
          <source>Using Environment Variables</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b302e76ff285b7e457c22f8d88c69b64b865b32c" translate="yes" xml:space="preserve">
          <source>Using a Shareable Config</source>
          <target state="translated">공유 가능한 구성 사용</target>
        </trans-unit>
        <trans-unit id="e0c468455ec70051b77f083d9eccde45f228ea57" translate="yes" xml:space="preserve">
          <source>Using a configuration file</source>
          <target state="translated">구성 파일 사용</target>
        </trans-unit>
        <trans-unit id="2cc5fc29ca8bb9b59b9fff0159b64a0e0aa2b748" translate="yes" xml:space="preserve">
          <source>Using a shareable configuration package</source>
          <target state="translated">공유 가능한 구성 패키지 사용</target>
        </trans-unit>
        <trans-unit id="619cd389a4db55eac7086b03b5cfa54636ecf9b8" translate="yes" xml:space="preserve">
          <source>Using a single &lt;code&gt;import&lt;/code&gt; statement per module will make the code clearer because you can see everything being imported from that module on one line.</source>
          <target state="translated">모듈 당 단일 &lt;code&gt;import&lt;/code&gt; 문을 사용하면 해당 모듈에서 가져온 모든 내용을 한 줄로 볼 수 있으므로 코드가 더 명확 해집니다.</target>
        </trans-unit>
        <trans-unit id="e6fa437c6c23d5b7b45da7a2e2a1d10e28a8688b" translate="yes" xml:space="preserve">
          <source>Using an Alternate File</source>
          <target state="translated">대체 파일 사용</target>
        </trans-unit>
        <trans-unit id="586259f4885483121f27c4e9aa07069bd6c9cda2" translate="yes" xml:space="preserve">
          <source>Using eslintIgnore in package.json</source>
          <target state="translated">package.json에서 eslintIgnore 사용</target>
        </trans-unit>
        <trans-unit id="1b207cb89b9319ffb89553d14d6cf162c46b7f56" translate="yes" xml:space="preserve">
          <source>Using message placeholders</source>
          <target state="translated">메시지 자리 표시 자 사용</target>
        </trans-unit>
        <trans-unit id="3e16a605232a4a1c356a288a74f6943a34b8ae6f" translate="yes" xml:space="preserve">
          <source>Using selectors in the &lt;code&gt;no-restricted-syntax&lt;/code&gt; rule can give you a lot of control over problematic patterns in your codebase, without needing to write custom rules to detect each pattern.</source>
          <target state="translated">&lt;code&gt;no-restricted-syntax&lt;/code&gt; 이 없는 구문 규칙 에서 선택기를 사용하면 각 패턴을 감지하기 위해 사용자 지정 규칙을 작성할 필요없이 코드베이스에서 문제가있는 패턴을 많이 제어 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="accb6ab3309644f22a59e564f296b91db2b9ed86" translate="yes" xml:space="preserve">
          <source>Using stdin</source>
          <target state="translated">stdin 사용</target>
        </trans-unit>
        <trans-unit id="8ce680923ed405f0b52194a8fd5d25c5e6caea79" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;&quot;always&quot;&lt;/code&gt; option means that this rule will report any comments which start with a lowercase letter. This is the default configuration for this rule.</source>
          <target state="translated">&lt;code&gt;&quot;always&quot;&lt;/code&gt; 옵션을 사용하면 이 규칙은 소문자로 시작하는 모든 주석을보고합니다. 이것이이 규칙의 기본 구성입니다.</target>
        </trans-unit>
        <trans-unit id="96d576d0cd2c820dcea748257a03f18a8f838d88" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;&quot;never&quot;&lt;/code&gt; option means that this rule will report any comments which start with an uppercase letter.</source>
          <target state="translated">&lt;code&gt;&quot;never&quot;&lt;/code&gt; 옵션을 사용하면 이 규칙이 대문자로 시작하는 모든 주석을보고합니다.</target>
        </trans-unit>
        <trans-unit id="d2998154fd0b30ddea4d0f0a30a540b6234a2665" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;void&lt;/code&gt; operator to generate the value of &lt;code&gt;undefined&lt;/code&gt; if necessary.</source>
          <target state="translated">필요한 경우 &lt;code&gt;void&lt;/code&gt; 연산자를 사용하여 &lt;code&gt;undefined&lt;/code&gt; 값을 생성하십시오 .</target>
        </trans-unit>
        <trans-unit id="44db3e7e42ba5ebb8bf1cf0e5de90b5c7351d5d0" translate="yes" xml:space="preserve">
          <source>Using the configuration from a plugin</source>
          <target state="translated">플러그인에서 구성 사용</target>
        </trans-unit>
        <trans-unit id="d8a14a71e022c4c1cc64b31add3a38d0148f7afa" translate="yes" xml:space="preserve">
          <source>Using this rule with version control systems</source>
          <target state="translated">버전 관리 시스템에서이 규칙 사용</target>
        </trans-unit>
        <trans-unit id="8ca2c430d89057de6cb5c35279ea3569d34d0136" translate="yes" xml:space="preserve">
          <source>Usually, the code should be refactored to create all the promises at once, then get access to the results using &lt;code&gt;Promise.all()&lt;/code&gt;. Otherwise, each successive operation will not start until the previous one has completed.</source>
          <target state="translated">일반적으로 모든 약속을 한 번에 생성하기 위해 코드를 리팩토링 한 다음 &lt;code&gt;Promise.all()&lt;/code&gt; 사용하여 결과에 액세스해야합니다 . 그렇지 않으면 이전 작업이 완료 될 때까지 각 연속 작업이 시작되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="cb8af0b089c8e16de1808bbf42dbab1812ea017b" translate="yes" xml:space="preserve">
          <source>Valid Code</source>
          <target state="translated">유효한 코드</target>
        </trans-unit>
        <trans-unit id="532e17316f9909fba79f94428471eb6888d1b255" translate="yes" xml:space="preserve">
          <source>Variable Declarations</source>
          <target state="translated">변수 선언</target>
        </trans-unit>
        <trans-unit id="6d5e51d3d0dfe28a6c4746735fcea731cc9e3349" translate="yes" xml:space="preserve">
          <source>Variable Shadowing</source>
          <target state="translated">가변 그림자</target>
        </trans-unit>
        <trans-unit id="f34af863a0250ddb43caba08acbf9b7f07738053" translate="yes" xml:space="preserve">
          <source>Variable Sorting (sort-vars)</source>
          <target state="translated">변수 정렬 (정렬-바)</target>
        </trans-unit>
        <trans-unit id="2bd0e8a368c0c0738f15dfd8df4c9fa0b30a21c3" translate="yes" xml:space="preserve">
          <source>Variable interface</source>
          <target state="translated">가변 인터페이스</target>
        </trans-unit>
        <trans-unit id="6d8103227eb16ff6b41d4c197ddfa518ef072c15" translate="yes" xml:space="preserve">
          <source>Variable names should be formatted in camel case with the first letter being lowercase and the first letter of each subsequent word being uppercase. The first word of a variable name should be a noun (not a verb) to avoid confusion with functions. Do not use underscore for variable names.</source>
          <target state="translated">변수 이름은 첫 글자가 소문자이고 각 후속 단어의 첫 글자가 대문자 인 낙타 문자 형식이어야합니다. 변수 이름의 첫 단어는 함수와 혼동되지 않도록 명사 (동사 아님) 여야합니다. 변수 이름에 밑줄을 사용하지 마십시오.</target>
        </trans-unit>
        <trans-unit id="3944885d1531d2b22b8820788659f91568e08837" translate="yes" xml:space="preserve">
          <source>VariableDeclarator</source>
          <target state="translated">VariableDeclarator</target>
        </trans-unit>
        <trans-unit id="ac018db1f7b00972061adff843d37497d8ee153c" translate="yes" xml:space="preserve">
          <source>Variables</source>
          <target state="translated">Variables</target>
        </trans-unit>
        <trans-unit id="85379bf6ac3527cdbeb09a4791aad3097a8d3c57" translate="yes" xml:space="preserve">
          <source>Variables can be declared at any point in JavaScript code using &lt;code&gt;var&lt;/code&gt;, &lt;code&gt;let&lt;/code&gt;, or &lt;code&gt;const&lt;/code&gt;. There are many styles and preferences related to the declaration of variables, and one of those is deciding on how many variable declarations should be allowed in a single function.</source>
          <target state="translated">변수는 &lt;code&gt;var&lt;/code&gt; , &lt;code&gt;let&lt;/code&gt; 또는 &lt;code&gt;const&lt;/code&gt; 를 사용하여 JavaScript 코드의 어느 시점에서나 선언 될 수 있습니다 . 변수 선언과 관련된 많은 스타일과 환경 설정이 있으며 그 중 하나는 단일 함수에서 허용 할 변수 선언 수를 결정합니다.</target>
        </trans-unit>
        <trans-unit id="b737513f2b96c7e55dfed83a96a4d58ff87a2661" translate="yes" xml:space="preserve">
          <source>Variables defined in &lt;code&gt;/* global */&lt;/code&gt; comments.</source>
          <target state="translated">&lt;code&gt;/* global */&lt;/code&gt; 주석에 정의 된 변수</target>
        </trans-unit>
        <trans-unit id="892290ac7a5821c2d16856260d019953f711502f" translate="yes" xml:space="preserve">
          <source>Variables defined in config files.</source>
          <target state="translated">구성 파일에 정의 된 변수</target>
        </trans-unit>
        <trans-unit id="e7b48dd3dfa48fd2be30f8be1c1607d958c45208" translate="yes" xml:space="preserve">
          <source>Variables in a loop condition often are modified in the loop. If not, it's possibly a mistake.</source>
          <target state="translated">루프 조건의 변수는 종종 루프에서 수정됩니다. 그렇지 않으면 실수 일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2a17ee3a5cb7b17046c7c0ffba2f3dae33af728c" translate="yes" xml:space="preserve">
          <source>Variables must be initialized at declaration (default)</source>
          <target state="translated">선언시 변수를 초기화해야합니다 (기본값).</target>
        </trans-unit>
        <trans-unit id="c8ce71ce0391e3c1f3236dc47ecf35e3e114a29e" translate="yes" xml:space="preserve">
          <source>Variables must not be initialized at declaration</source>
          <target state="translated">선언시 변수를 초기화하면 안됩니다</target>
        </trans-unit>
        <trans-unit id="c6ff9a26e1b5b3339f7fd5e3a8a9767b43c9c97f" translate="yes" xml:space="preserve">
          <source>Variables must not be initialized at declaration, except in for loops, where it is allowed</source>
          <target state="translated">허용되는 경우 for 루프를 제외하고 선언시 변수를 초기화하면 안됩니다.</target>
        </trans-unit>
        <trans-unit id="bfd7f1b7ef4128d51344a9daf2228af23d80ba06" translate="yes" xml:space="preserve">
          <source>Variables should not be declared in the initialization section of a &lt;code&gt;for&lt;/code&gt; statement.</source>
          <target state="translated">&lt;code&gt;for&lt;/code&gt; 문의 초기화 섹션에서 변수를 선언해서는 안됩니다 .</target>
        </trans-unit>
        <trans-unit id="5c001ee08698935333b13c201a69d90cdf48e3fd" translate="yes" xml:space="preserve">
          <source>Variables that act as constants (values that won't be changed) should be formatted using all uppercase letters with words separated by a single underscore.</source>
          <target state="translated">상수 역할을하는 변수 (변경되지 않는 값)는 단일 밑줄로 구분 된 단어와 함께 모든 대문자를 사용하여 형식을 지정해야합니다.</target>
        </trans-unit>
        <trans-unit id="2e99b317be9905e39e1a207a58f6e60f75b0fe6f" translate="yes" xml:space="preserve">
          <source>Variables that are declared and not used anywhere in the code are most likely an error due to incomplete refactoring. Such variables take up space in the code and can lead to confusion by readers.</source>
          <target state="translated">코드에서 선언되고 사용되지 않은 변수는 불완전한 리팩토링으로 인해 오류 일 가능성이 높습니다. 이러한 변수는 코드에서 공간을 차지하므로 독자가 혼동 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c74715246fd4d194bd4188a3a75791e4b702dc5b" translate="yes" xml:space="preserve">
          <source>Variables that should be &lt;code&gt;undefined&lt;/code&gt; are simply left uninitialized. (All uninitialized variables automatically get the value of &lt;code&gt;undefined&lt;/code&gt; in JavaScript.)</source>
          <target state="translated">&lt;code&gt;undefined&lt;/code&gt; 변수 는 단순히 초기화되지 않은 상태로 유지됩니다. 초기화되지 않은 모든 변수 는 JavaScript에서 &lt;code&gt;undefined&lt;/code&gt; 값을 자동으로 가져옵니다 .</target>
        </trans-unit>
        <trans-unit id="c9e0a5d87acbaea46b5478bcb73fad51d8fd6826" translate="yes" xml:space="preserve">
          <source>Various whitespace characters can be inputted by programmers by mistake for example from copying or keyboard shortcuts. Pressing Alt + Space on macOS adds in a non breaking space character for example.</source>
          <target state="translated">프로그래머는 실수로 복사 또는 키보드 단축키와 같은 다양한 공백 문자를 입력 할 수 있습니다. 예를 들어 macOS에서 Alt + Space를 누르면 공백이 아닌 문자가 추가됩니다.</target>
        </trans-unit>
        <trans-unit id="85447ed9d63f1204cb8d98c10d07fa44bffd575f" translate="yes" xml:space="preserve">
          <source>Verify calls of &lt;code&gt;super()&lt;/code&gt; in constructors (constructor-super)</source>
          <target state="translated">생성자에서 &lt;code&gt;super()&lt;/code&gt; 호출 확인 (constructor-super)</target>
        </trans-unit>
        <trans-unit id="2da600bf9404843107a9531694f654e5662959e0" translate="yes" xml:space="preserve">
          <source>Version</source>
          <target state="translated">Version</target>
        </trans-unit>
        <trans-unit id="97d4ee0ebcffa2551648daf9af67c8a9b436fca2" translate="yes" xml:space="preserve">
          <source>Version control systems sometimes have special behavior for linebreaks. To make it easy for developers to contribute to your codebase from different platforms, you may want to configure your VCS to handle linebreaks appropriately.</source>
          <target state="translated">버전 관리 시스템은 때때로 줄 바꿈에 대해 특별한 동작을합니다. 개발자가 다양한 플랫폼에서 코드베이스에 쉽게 기여할 수 있도록 VCS를 구성하여 줄 바꿈을 적절하게 처리 할 수 ​​있습니다.</target>
        </trans-unit>
        <trans-unit id="e9f9cfd066fc0985106023b392c00252b116102c" translate="yes" xml:space="preserve">
          <source>Very long lines of code in any language can be difficult to read. In order to aid in readability and maintainability many coders have developed a convention to limit lines of code to X number of characters (traditionally 80 characters).</source>
          <target state="translated">모든 언어의 매우 긴 코드 줄은 읽기 어려울 수 있습니다. 가독성과 유지 관리 성을 돕기 위해 많은 코더는 코드 줄을 X 문자 수 (전통적으로 80 자)로 제한하는 규칙을 개발했습니다.</target>
        </trans-unit>
        <trans-unit id="584ebc802dcce40efe78e737e24b45e2d537c06c" translate="yes" xml:space="preserve">
          <source>Very short identifier names like &lt;code&gt;e&lt;/code&gt;, &lt;code&gt;x&lt;/code&gt;, &lt;code&gt;_t&lt;/code&gt; or very long ones like &lt;code&gt;hashGeneratorResultOutputContainerObject&lt;/code&gt; can make code harder to read and potentially less maintainable. To prevent this, one may enforce a minimum and/or maximum identifier length.</source>
          <target state="translated">&lt;code&gt;e&lt;/code&gt; , &lt;code&gt;x&lt;/code&gt; , &lt;code&gt;_t&lt;/code&gt; 와 같은 매우 짧은 식별자 이름 또는 &lt;code&gt;hashGeneratorResultOutputContainerObject&lt;/code&gt; 와 같은 매우 긴 식별자 이름 은 코드를 읽기 어렵게하고 유지 관리가 쉽지 않을 수 있습니다. 이를 방지하기 위해, 최소 및 / 또는 최대 식별자 길이를 시행 할 수있다.</target>
        </trans-unit>
        <trans-unit id="14a6eae4840d70e1008eaa9e5de7d019a31c7b73" translate="yes" xml:space="preserve">
          <source>Vim:</source>
          <target state="translated">Vim:</target>
        </trans-unit>
        <trans-unit id="91ad776df06e55e887b661baf20d704d31aca239" translate="yes" xml:space="preserve">
          <source>Visual Studio Code: &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint&quot;&gt;ESLint Extension&lt;/a&gt;</source>
          <target state="translated">Visual Studio 코드 : &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint&quot;&gt;ESLint 확장&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="db74b0813fc54ab1954f585e68f426fa2dae2151" translate="yes" xml:space="preserve">
          <source>Want to make a change to an existing rule? This section explains the process and how we evaluate such proposals.</source>
          <target state="translated">기존 규칙을 변경 하시겠습니까? 이 섹션에서는 프로세스와 이러한 제안을 평가하는 방법에 대해 설명합니다.</target>
        </trans-unit>
        <trans-unit id="aa01e84dc33f606dadcb9953b4367629a4af246e" translate="yes" xml:space="preserve">
          <source>Want to skip ahead and just start using ESLint? This section gives a high-level overview of installation, setup, and configuration options.</source>
          <target state="translated">앞서 건너 뛰고 ESLint를 사용하기 시작하고 싶습니까? 이 섹션에서는 설치, 설정 및 구성 옵션에 대한 고급 개요를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="5f19b7cfb75065744f09c3f3dbd1dd8602fb5742" translate="yes" xml:space="preserve">
          <source>Warning: a promise was rejected with a non-error</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8c03ef8e0919bf50f1a8491261b96a94272575b" translate="yes" xml:space="preserve">
          <source>Warns whenever &lt;code&gt;&quot;use strict&quot;&lt;/code&gt; is used in the global scope such that it could contaminate concatenated files.</source>
          <target state="translated">연결된 파일을 오염시킬 수 있도록 전역 범위에서 &lt;code&gt;&quot;use strict&quot;&lt;/code&gt; 이 사용될 때마다 경고 합니다.</target>
        </trans-unit>
        <trans-unit id="862cf79158d46c84f106f5399e9001e0931a8c82" translate="yes" xml:space="preserve">
          <source>We can embed expressions in template strings with using a pair of &lt;code&gt;${&lt;/code&gt; and &lt;code&gt;}&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;${&lt;/code&gt; 과 &lt;code&gt;}&lt;/code&gt; 쌍을 사용하여 템플릿 문자열에 표현식을 포함시킬 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="3c5a902008a05777020d1e0667971fb4a844bf34" translate="yes" xml:space="preserve">
          <source>We cannot modify variables that are declared using &lt;code&gt;const&lt;/code&gt; keyword. It will raise a runtime error.</source>
          <target state="translated">&lt;code&gt;const&lt;/code&gt; 키워드를 사용하여 선언 된 변수는 수정할 수 없습니다 . 런타임 오류가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="a15e550937b9a265d4784deb7bacb70d802adae3" translate="yes" xml:space="preserve">
          <source>We found some bugs in our scope analysis that needed to be addressed. Specifically, we were not properly accounting for global variables in all the ways they are defined.</source>
          <target state="translated">범위 분석에서 해결해야 할 몇 가지 버그가 발견되었습니다. 구체적으로, 우리는 정의 된 모든 방식으로 전역 변수를 제대로 설명하지 못했습니다.</target>
        </trans-unit>
        <trans-unit id="6bfb630517b3d4cb1d3083f6fd0e14a3770dd201" translate="yes" xml:space="preserve">
          <source>We get a lot of proposals for new rules in ESLint. This section explains how we determine which rules are accepted and what information you should provide to help us evaluate your proposal.</source>
          <target state="translated">우리는 ESLint에서 새로운 규칙에 대한 많은 제안을받습니다. 이 섹션에서는 승인 된 규칙을 결정하는 방법과 제안을 평가하는 데 도움이되는 정보를 설명합니다.</target>
        </trans-unit>
        <trans-unit id="32129814c6be2f4221beec5e8923016c3c8da569" translate="yes" xml:space="preserve">
          <source>We hope that by following these guidelines we will be able to continue improving and working to make ESLint the best tool it can be while causing as little disruption to our users as possible during the process.</source>
          <target state="translated">이러한 지침을 따르면 ESLint를 프로세스 중에 가능한 한 사용자에게 거의 지장을주지 않으면 서 ESLint를 최상의 도구로 만들기 위해 계속 개선하고 노력할 수 있기를 바랍니다.</target>
        </trans-unit>
        <trans-unit id="bc68a58faf81b9993b43de6f1d7e5591db60891c" translate="yes" xml:space="preserve">
          <source>We may ask you to make changes, rebase, or squash your commits.</source>
          <target state="translated">커밋을 변경하거나 리베이스하거나 스쿼시하도록 요청할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="be531f0e502915f32cc4ed514f6cfe1d76954139" translate="yes" xml:space="preserve">
          <source>We need all of this information in order to determine whether or not the change is a good candidate for inclusion.</source>
          <target state="translated">변경이 포함에 적합한 지 여부를 결정하려면이 모든 정보가 필요합니다.</target>
        </trans-unit>
        <trans-unit id="13e23ea2d55941a7a936ff6af2c7bd00ea304737" translate="yes" xml:space="preserve">
          <source>We need all of this information in order to determine whether or not the rule is a good core rule candidate.</source>
          <target state="translated">규칙이 올바른 핵심 규칙 후보인지 여부를 판별하려면이 모든 정보가 필요합니다.</target>
        </trans-unit>
        <trans-unit id="76127d70180cb6a86e3b0d95edc18d737fb0c703" translate="yes" xml:space="preserve">
          <source>We use labels to indicate the status of issues. The most complete documentation on the labels is found in the &lt;a href=&quot;https://eslint.org/docs/maintainer-guide/issues.html#when-an-issue-is-opened&quot;&gt;Maintainer Guide&lt;/a&gt;, but most contributors should find the information on this page sufficient. The most important questions that labels can help you, as a contributor, answer are:</source>
          <target state="translated">라벨을 사용하여 문제의 상태를 나타냅니다. 레이블에 대한 가장 완전한 문서는 &lt;a href=&quot;https://eslint.org/docs/maintainer-guide/issues.html#when-an-issue-is-opened&quot;&gt;관리자 안내서&lt;/a&gt; 에 있지만 대부분의 기고자는이 페이지의 정보가 충분해야합니다. 기고자로서 답변하는 데 도움이되는 가장 중요한 질문은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="fd0b33554faf50e6fb5d78c7badaed2df6f5a2b2" translate="yes" xml:space="preserve">
          <source>We're always looking for contributions from the community. This section explains the requirements for pull requests and the process of contributing code.</source>
          <target state="translated">우리는 항상 지역 사회의 공헌을 찾고 있습니다. 이 섹션에서는 풀 요청의 요구 사항 및 코드 제공 프로세스에 대해 설명합니다.</target>
        </trans-unit>
        <trans-unit id="1de59a98d6b9c70fbf9f8b419711208bf9e9bf8d" translate="yes" xml:space="preserve">
          <source>Webpack: &lt;a href=&quot;https://www.npmjs.com/package/eslint-loader&quot;&gt;eslint-loader&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://www.npmjs.com/package/eslint-loader&quot;&gt;웹팩&lt;/a&gt; : eslint-loader</target>
        </trans-unit>
        <trans-unit id="6ba525c7d4c75ba8b5f7dce088f61242a494e7bf" translate="yes" xml:space="preserve">
          <source>What actually happened.</source>
          <target state="translated">실제로 일어난 일.</target>
        </trans-unit>
        <trans-unit id="df224434e65934e06d2644009972ca3b020b97e8" translate="yes" xml:space="preserve">
          <source>What can selectors be used for?</source>
          <target state="translated">선택기는 무엇을 위해 사용될 수 있습니까?</target>
        </trans-unit>
        <trans-unit id="48681659913bbea6a16673eed0fa9cebd2513f10" translate="yes" xml:space="preserve">
          <source>What is a selector?</source>
          <target state="translated">선택기 란 무엇입니까?</target>
        </trans-unit>
        <trans-unit id="0465271c771ae7129e8e463a09cff2488f5861e4" translate="yes" xml:space="preserve">
          <source>What is the matter with script-targeted URLs?</source>
          <target state="translated">스크립트 대상 URL의 문제는 무엇입니까?</target>
        </trans-unit>
        <trans-unit id="775aca44e303c9a28765a76261e77703f8d71221" translate="yes" xml:space="preserve">
          <source>What is the priority of this issue? Because we have a lot of issues, we prioritize certain issues above others. The following is the list of priorities, from highest to lowest:</source>
          <target state="translated">이 문제의 우선 순위는 무엇입니까? 많은 문제가 있기 때문에 특정 문제를 다른 문제보다 우선합니다. 다음은 가장 높은 것부터 가장 낮은 것까지의 우선 순위 목록입니다.</target>
        </trans-unit>
        <trans-unit id="61f99ec705c943f1f33d040995e8f627884b7cf0" translate="yes" xml:space="preserve">
          <source>What is this issue about? Labels describing the nature of issues include &lt;code&gt;bug&lt;/code&gt;, &lt;code&gt;enhancement&lt;/code&gt;, &lt;code&gt;feature&lt;/code&gt;, &lt;code&gt;question&lt;/code&gt;, &lt;code&gt;rule&lt;/code&gt;, &lt;code&gt;documentation&lt;/code&gt;, &lt;code&gt;core&lt;/code&gt;, &lt;code&gt;build&lt;/code&gt;, &lt;code&gt;cli&lt;/code&gt;, &lt;code&gt;infrastructure&lt;/code&gt;, &lt;code&gt;breaking&lt;/code&gt;, and &lt;code&gt;chore&lt;/code&gt;. These are documented in the &lt;a href=&quot;https://eslint.org/docs/maintainer-guide/issues.html#types-of-issues&quot;&gt;Maintainer Guide&lt;/a&gt;.</source>
          <target state="translated">이 문제는 무엇입니까? 문제의 성격을 설명하는 레이블에는 &lt;code&gt;bug&lt;/code&gt; , &lt;code&gt;enhancement&lt;/code&gt; , &lt;code&gt;feature&lt;/code&gt; , &lt;code&gt;question&lt;/code&gt; , &lt;code&gt;rule&lt;/code&gt; , &lt;code&gt;documentation&lt;/code&gt; , &lt;code&gt;core&lt;/code&gt; , &lt;code&gt;build&lt;/code&gt; , &lt;code&gt;cli&lt;/code&gt; , &lt;code&gt;infrastructure&lt;/code&gt; , &lt;code&gt;breaking&lt;/code&gt; 및 &lt;code&gt;chore&lt;/code&gt; 됩니다. 이들은 &lt;a href=&quot;https://eslint.org/docs/maintainer-guide/issues.html#types-of-issues&quot;&gt;관리자 안내서에 설명되어&lt;/a&gt; 있습니다.</target>
        </trans-unit>
        <trans-unit id="aa2641da62c4ca7255239f5379f36bbc6fa2b626" translate="yes" xml:space="preserve">
          <source>What syntax can selectors have?</source>
          <target state="translated">선택기에는 어떤 구문이있을 수 있습니까?</target>
        </trans-unit>
        <trans-unit id="1537187228a7d0b7ed7c46e70ca704aef31c32b2" translate="yes" xml:space="preserve">
          <source>What you did.</source>
          <target state="translated">당신이 한.</target>
        </trans-unit>
        <trans-unit id="cb3d4d3c0898e5969ef92d5a6fdc5f3dff29f7fc" translate="yes" xml:space="preserve">
          <source>What you would like to happen.</source>
          <target state="translated">당신이하고 싶은 일.</target>
        </trans-unit>
        <trans-unit id="ccb746b4270f3fbe6b3dc6cea0e17fb49e243ff5" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;enforceForClassMembers&lt;/code&gt; is set to &lt;code&gt;true&lt;/code&gt;, the rule will also disallow unnecessary computed keys inside of class methods, getters and setters.</source>
          <target state="translated">&lt;code&gt;enforceForClassMembers&lt;/code&gt; 가 &lt;code&gt;true&lt;/code&gt; 로 설정 되면 규칙은 클래스 메소드, getter 및 setter 내에서 불필요한 계산 키를 허용하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="a8e281894a6a86cc5aed5d6044cfed2f796dc660" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;enforceForClassMembers&lt;/code&gt; is set to &lt;code&gt;true&lt;/code&gt;, the rule will also disallow/enforce spaces inside of computed keys of class methods, getters and setters.</source>
          <target state="translated">&lt;code&gt;enforceForClassMembers&lt;/code&gt; 가 &lt;code&gt;true&lt;/code&gt; 로 설정 되면 규칙은 클래스 메소드, getter 및 setter의 계산 된 키 내부에 공백을 허용하지 않거나 적용합니다.</target>
        </trans-unit>
        <trans-unit id="68a1046091137dc0b64b7621009bdfae020aa50f" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;enforceForClassMembers&lt;/code&gt; is set to &lt;code&gt;true&lt;/code&gt;:</source>
          <target state="translated">때 &lt;code&gt;enforceForClassMembers&lt;/code&gt; 이 설정되어 &lt;code&gt;true&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="40b208892363d77f54120b64383b5efd376dd4db" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;true&lt;/code&gt; the rule ignores the case-sensitivity of the imports local name.</source>
          <target state="translated">때 &lt;code&gt;true&lt;/code&gt; 규칙은 수입 로컬 이름의 대소 문자 구분을 무시합니다.</target>
        </trans-unit>
        <trans-unit id="2cf47cb024ed61b3595a6bac6d753c88a516200e" translate="yes" xml:space="preserve">
          <source>When ESLint is run, it looks in the current working directory to find an &lt;code&gt;.eslintignore&lt;/code&gt; file before determining which files to lint. If this file is found, then those preferences are applied when traversing directories. Only one &lt;code&gt;.eslintignore&lt;/code&gt; file can be used at a time, so &lt;code&gt;.eslintignore&lt;/code&gt; files other than the one in the current working directory will not be used.</source>
          <target state="translated">ESLint가 실행되면 현재 작업 디렉토리 에서 보풀 할 파일을 결정하기 전에 &lt;code&gt;.eslintignore&lt;/code&gt; 파일 을 찾습니다 . 이 파일을 찾으면 디렉토리를 통과 할 때 해당 환경 설정이 적용됩니다. 한 번에 하나의 &lt;code&gt;.eslintignore&lt;/code&gt; 파일 만 사용할 수 있으므로 현재 작업 디렉토리에있는 파일 이외의 &lt;code&gt;.eslintignore&lt;/code&gt; 파일은 사용되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="20c60a58611ef4be8a577170cdc4a73e06a4d3c9" translate="yes" xml:space="preserve">
          <source>When ESLint v5 encounters a plugin name in a config starting with &lt;code&gt;@&lt;/code&gt;, the plugin will be resolved as a &lt;a href=&quot;https://docs.npmjs.com/misc/scope&quot;&gt;scoped npm package&lt;/a&gt;. For example, if a config contains &lt;code&gt;&quot;plugins&quot;: [&quot;@foo&quot;]&lt;/code&gt;, ESLint v5 will attempt to load a package called &lt;code&gt;@foo/eslint-plugin&lt;/code&gt;. (On the other hand, ESLint v4 would attempt to load a package called &lt;code&gt;eslint-plugin-@foo&lt;/code&gt;.) This is a breaking change because users might have been relying on ESLint finding a package at &lt;code&gt;node_modules/eslint-plugin-@foo&lt;/code&gt;. However, we think it is unlikely that many users were relying on this behavior, because packages published to npm cannot contain an &lt;code&gt;@&lt;/code&gt; character in the middle.</source>
          <target state="translated">ESLint v5가 &lt;code&gt;@&lt;/code&gt; 로 시작하는 구성에서 플러그인 이름을 발견하면 플러그인 은 &lt;a href=&quot;https://docs.npmjs.com/misc/scope&quot;&gt;범위&lt;/a&gt; 가 지정된 npm 패키지 로 해석됩니다 . 예를 들어, 구성에 &lt;code&gt;&quot;plugins&quot;: [&quot;@foo&quot;]&lt;/code&gt; 경우 ESLint v5는 &lt;code&gt;@foo/eslint-plugin&lt;/code&gt; 이라는 패키지를로드하려고 시도합니다 . (반면 ESLint v4는 &lt;code&gt;eslint-plugin-@foo&lt;/code&gt; 라는 패키지를로드하려고 시도합니다 .) 이는 사용자가 &lt;code&gt;node_modules/eslint-plugin-@foo&lt;/code&gt; 에서 패키지를 찾는 ESLint에 의존했기 때문에 주요 변경 사항 입니다. 그러나 npm에 게시 된 패키지 는 중간에 &lt;code&gt;@&lt;/code&gt; 문자를 포함 할 수 없으므로 많은 사용자가이 동작에 의존하지 않았을 것으로 생각합니다 .</target>
        </trans-unit>
        <trans-unit id="dcf004efe477be5ae8d2e40ee02553789c8aae8c" translate="yes" xml:space="preserve">
          <source>When Not To Use It</source>
          <target state="translated">사용하지 않을 때</target>
        </trans-unit>
        <trans-unit id="203bf27409f5059980a9d42a50302c0e413f564e" translate="yes" xml:space="preserve">
          <source>When Object.assign is called using an object literal as the first argument, this rule requires using the object spread syntax instead. This rule also warns on cases where an &lt;code&gt;Object.assign&lt;/code&gt; call is made using a single argument that is an object literal, in this case, the &lt;code&gt;Object.assign&lt;/code&gt; call is not needed.</source>
          <target state="translated">첫 번째 인수로 객체 리터럴을 사용하여 Object.assign을 호출하면이 규칙에 대신 객체 스프레드 구문을 사용해야합니다. 이 규칙은 또한 객체 리터럴 인 단일 인수를 사용하여 &lt;code&gt;Object.assign&lt;/code&gt; 호출이 수행 되는 경우에도 경고합니다. 이 경우 &lt;code&gt;Object.assign&lt;/code&gt; 호출이 필요하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="9415933a71300f2c36380de3c9e37825354a76b1" translate="yes" xml:space="preserve">
          <source>When a directive occurs at the beginning of a function body, strict mode applies only to that function, including all contained functions:</source>
          <target state="translated">지시문이 함수 본문의 시작 부분에있을 때 엄격 모드는 포함 된 모든 함수를 포함하여 해당 함수에만 적용됩니다.</target>
        </trans-unit>
        <trans-unit id="3b945b44625e4e412ba636475a99a55bd8a52dc3" translate="yes" xml:space="preserve">
          <source>When a directive occurs in global scope, strict mode applies to the entire script:</source>
          <target state="translated">지시문이 전역 범위에서 발생하면 엄격 모드는 전체 스크립트에 적용됩니다.</target>
        </trans-unit>
        <trans-unit id="a7f8c7885496fcc670036ffbd015d93514a470ea" translate="yes" xml:space="preserve">
          <source>When a project may use non-strict-mode code side by side with strict-mode code and the files are not concatenated, the decision to use global strict mode can be made on an individual basis, rendering this rule unnecessary.</source>
          <target state="translated">프로젝트가 엄격 모드 코드와 함께 엄격하지 않은 모드 코드를 함께 사용할 수 있고 파일이 연결되지 않은 경우 전역 엄격 모드를 사용하기로 결정하면이 규칙을 불필요하게 만들 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="8d6a34d5119355a848730521094d00727d56e9fe" translate="yes" xml:space="preserve">
          <source>When a regular expression is known in advance, it is considered a best practice to avoid the string literal notation on top of the regular expression notation, and use regular expression literals instead of the constructor function.</source>
          <target state="translated">정규 표현식을 미리 알고있는 경우 정규 표현식 표기법에서 문자열 리터럴 표기법을 피하고 생성자 함수 대신 정규 표현식 리터럴을 사용하는 것이 가장 좋습니다.</target>
        </trans-unit>
        <trans-unit id="32e97b30949ce30d41853730be6d215853600032" translate="yes" xml:space="preserve">
          <source>When a regular expression is used in certain situations, it can end up looking like a division operator. For example:</source>
          <target state="translated">특정 상황에서 정규식을 사용하면 나누기 연산자처럼 보일 수 있습니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="e7de0f6154b5bffb994130a27056acf849724645" translate="yes" xml:space="preserve">
          <source>When a statement is too long to fit on a single line, line breaks are generally inserted next to the operators separating expressions. The first style coming to mind would be to place the operator at the end of the line, following the English punctuation rules.</source>
          <target state="translated">명령문이 단일 행에 맞추기에는 너무 긴 경우 일반적으로 표현식을 분리하는 연산자 옆에 줄 바꿈이 삽입됩니다. 가장 먼저 떠오르는 스타일은 영어 문장 부호 규칙에 따라 연산자를 줄 끝에 배치하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="93fb5fcb22010c57c3b649a0a8088840131fb0ad" translate="yes" xml:space="preserve">
          <source>When a value for &lt;code&gt;generators&lt;/code&gt; is not provided the behavior for generator functions falls back to the base option.</source>
          <target state="translated">&lt;code&gt;generators&lt;/code&gt; 의 값 이 제공되지 않으면 제너레이터 기능의 동작이 기본 옵션으로 돌아갑니다.</target>
        </trans-unit>
        <trans-unit id="ba329c57c39515909a5b2d824e3d5ce52ed9f493" translate="yes" xml:space="preserve">
          <source>When an object is created with the &lt;code&gt;new&lt;/code&gt; operator, &lt;code&gt;__proto__&lt;/code&gt; is set to the original &quot;prototype&quot; property of the object's constructor function. &lt;code&gt;Object.getPrototypeOf&lt;/code&gt; is the preferred method of getting the object's prototype. To change an object's prototype, use &lt;code&gt;Object.setPrototypeOf&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;new&lt;/code&gt; 연산자 로 객체를 &lt;code&gt;__proto__&lt;/code&gt; 가 객체 생성자 함수의 원래 &quot;prototype&quot;속성으로 설정됩니다. &lt;code&gt;Object.getPrototypeOf&lt;/code&gt; 는 객체의 프로토 타입을 얻는 데 선호되는 방법입니다. 객체의 프로토 타입을 변경하려면 &lt;code&gt;Object.setPrototypeOf&lt;/code&gt; 를 사용 하십시오 .</target>
        </trans-unit>
        <trans-unit id="e0bba3e468f3e8751ba8be23bf966776db6059a6" translate="yes" xml:space="preserve">
          <source>When an object literal is passed to a function, the opening brace should be on the same line as if the value is a variable. All other formatting rules from above still apply.</source>
          <target state="translated">객체 리터럴이 함수에 전달되면 값이 변수 인 것처럼 여는 중괄호가 같은 줄에 있어야합니다. 위의 다른 모든 형식 규칙이 계속 적용됩니다.</target>
        </trans-unit>
        <trans-unit id="e3b642b0ab807b653ce30cde6cabc5b5d00ea7af" translate="yes" xml:space="preserve">
          <source>When assigning a value to a variable, use parentheses around a right-side expression that contains a comparison.</source>
          <target state="translated">변수에 값을 지정할 때는 비교가 포함 된 오른쪽 표현식 주위에 괄호를 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="a152c3fe98d6af849e4f2641cb3aa3e4d5c168d4" translate="yes" xml:space="preserve">
          <source>When calling a function, developers may insert optional whitespace between the function's name and the parentheses that invoke it. The following pairs of function calls are equivalent:</source>
          <target state="translated">함수를 호출 할 때 개발자는 함수 이름과 함수를 호출하는 괄호 사이에 선택적 공백을 삽입 할 수 있습니다. 다음 함수 호출 쌍은 동일합니다.</target>
        </trans-unit>
        <trans-unit id="abe6033e5821a616ecbd384ea21e99fdaefa9553" translate="yes" xml:space="preserve">
          <source>When comparing two selectors, the selector that contains more class selectors, attribute selectors, and pseudo-class selectors (excluding &lt;code&gt;:not()&lt;/code&gt;) has higher specificity.</source>
          <target state="translated">두 선택기를 비교할 때 더 많은 클래스 선택기, 속성 선택기 및 의사 클래스 선택기가 포함 된 선택기 ( &lt;code&gt;:not()&lt;/code&gt; 제외 )는 더 높은 특이성을 갖습니다.</target>
        </trans-unit>
        <trans-unit id="563a2a9cd7c563ab5d8ae53b0347fa95ec09e16a" translate="yes" xml:space="preserve">
          <source>When creating a config, users sometimes make typos or misunderstand how the config is supposed to be structured. Previously, ESLint did not validate the properties of a config file, so a typo in a config could be very tedious to debug. Starting in 4.0.0, ESLint will raise an error if a property in a config file is unrecognized or has the wrong type.</source>
          <target state="translated">구성을 만들 때 사용자는 구성을 어떻게 구성해야하는지 오타하거나 오해하기도합니다. 이전에는 ESLint가 구성 파일의 속성을 확인하지 않았으므로 구성의 오타가 디버깅하는 데 매우 지루할 수 있습니다. 4.0.0부터는 구성 파일의 속성이 인식되지 않거나 잘못된 유형 인 경우 ESLint에서 오류가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="ea29648e037edef7cafa09376284dc4afc1ee408" translate="yes" xml:space="preserve">
          <source>When declaring multiple imports, a sorted list of import declarations make it easier for developers to read the code and find necessary imports later. This rule is purely a matter of style.</source>
          <target state="translated">여러 가져 오기를 선언 할 때 정렬 된 가져 오기 선언 목록을 사용하면 개발자가 코드를 읽고 나중에 필요한 가져 오기를 쉽게 찾을 수 있습니다. 이 규칙은 순전히 스타일의 문제입니다.</target>
        </trans-unit>
        <trans-unit id="01f73904c501ed9b42d55242c8ae09f4b585afda" translate="yes" xml:space="preserve">
          <source>When declaring multiple properties, some developers prefer to sort property names alphabetically to be able to find necessary property easier at the later time. Others feel that it adds complexity and becomes burden to maintain.</source>
          <target state="translated">여러 속성을 선언 할 때 일부 개발자는 나중에 필요한 속성을 쉽게 찾을 수 있도록 속성 이름을 사전 순으로 정렬하는 것을 선호합니다. 다른 사람들은 그것이 복잡성을 더하고 유지해야하는 부담이된다고 생각합니다.</target>
        </trans-unit>
        <trans-unit id="dbb2dab6a276d490636b69d0d44fa2ec1e3a9d07" translate="yes" xml:space="preserve">
          <source>When declaring multiple variables within the same block, some developers prefer to sort variable names alphabetically to be able to find necessary variable easier at the later time. Others feel that it adds complexity and becomes burden to maintain.</source>
          <target state="translated">동일한 블록 내에서 여러 변수를 선언 할 때 일부 개발자는 나중에 필요한 변수를 쉽게 찾을 수 있도록 변수 이름을 사전 순으로 정렬하는 것을 선호합니다. 다른 사람들은 그것이 복잡성을 더하고 유지해야하는 부담이된다고 생각합니다.</target>
        </trans-unit>
        <trans-unit id="509fcabb27dd7cfdfd2baa30eff71f1794f79697" translate="yes" xml:space="preserve">
          <source>When developing in the ESLint core repository, the &lt;code&gt;npm run perf&lt;/code&gt; command gives a high-level overview of ESLint running time with all core rules enabled.</source>
          <target state="translated">ESLint 코어 저장소에서 개발할 때 &lt;code&gt;npm run perf&lt;/code&gt; 명령은 모든 코어 규칙이 활성화 된 ESLint 실행 시간에 대한 고급 개요를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="9869fdd0a7363425715523b58b04c8e8afd5398f" translate="yes" xml:space="preserve">
          <source>When developing with a lot of people all having different editors, VCS applications and operating systems it may occur that different line endings are written by either of the mentioned (might especially happen when using the windows and mac versions of SourceTree together).</source>
          <target state="translated">모두 다른 편집자, VCS 응용 프로그램 및 운영 체제를 가진 많은 사람들과 함께 개발할 때 언급 된 것 중 하나에 의해 다른 줄 끝이 작성 될 수 있습니다 (특히 Windows 및 Mac 버전의 SourceTree를 함께 사용할 때 발생할 수 있음).</target>
        </trans-unit>
        <trans-unit id="24528f592879fc6dbe5e5bdfc58507e869312f54" translate="yes" xml:space="preserve">
          <source>When formatting a function, whitespace is allowed between the function name or &lt;code&gt;function&lt;/code&gt; keyword and the opening paren. Named functions also require a space between the &lt;code&gt;function&lt;/code&gt; keyword and the function name, but anonymous functions require no whitespace. For example:</source>
          <target state="translated">함수를 형식화 할 때 함수 이름 또는 &lt;code&gt;function&lt;/code&gt; 키워드와 여는 부분 사이에 공백이 허용 됩니다. 명명 된 함수에는 &lt;code&gt;function&lt;/code&gt; 키워드와 함수 이름 사이에 공백이 필요하지만 익명 함수에는 공백이 필요하지 않습니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="51a7c81608a2fb4ade673c3238c1ff45f26efbdd" translate="yes" xml:space="preserve">
          <source>When it comes to naming variables, style guides generally fall into one of two camps: camelcase (&lt;code&gt;variableName&lt;/code&gt;) and underscores (&lt;code&gt;variable_name&lt;/code&gt;). This rule focuses on using the camelcase approach. If your style guide calls for camelCasing your variable names, then this rule is for you!</source>
          <target state="translated">이름 지정 변수와 관련하여 스타일 안내서는 일반적으로 두 개의 캠프 중 하나 인 camelcase ( &lt;code&gt;variableName&lt;/code&gt; ) 및 밑줄 ( &lt;code&gt;variable_name&lt;/code&gt; )에 속합니다 . 이 규칙은 낙타 접근 방식에 중점을 둡니다. 스타일 가이드가 camelCasing 변수 이름을 요구하는 경우이 규칙이 적합합니다!</target>
        </trans-unit>
        <trans-unit id="da97dfc5cde15902d5f22cd88a96b7bbda7598f6" translate="yes" xml:space="preserve">
          <source>When linting files, ESLint will exit with one of the following exit codes:</source>
          <target state="translated">파일을 린트 할 때 ESLint는 다음 종료 코드 중 하나로 종료됩니다.</target>
        </trans-unit>
        <trans-unit id="ffc50d3c200d0e69215126757fd5407d7f1e935d" translate="yes" xml:space="preserve">
          <source>When on a separate line, a single-line comment should be at the same indentation level as the code it describes and be preceded by a single line. Never use multiple single-line comments on consecutive lines, use a multi-line comment instead.</source>
          <target state="translated">별도의 줄에있을 때 한 줄 주석은 설명하는 코드와 동일한 들여 쓰기 수준이어야하며 앞에 한 줄이 와야합니다. 연속 줄에 여러 줄 주석을 사용하지 말고 대신 여러 줄 주석을 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="0119aba772e3768887d5d3d6f3e7c08c6156ce21" translate="yes" xml:space="preserve">
          <source>When parentheses are used, there should be no whitespace immediately after the opening paren or immediately before the closing paren.</source>
          <target state="translated">괄호를 사용하는 경우 여는 괄호 바로 뒤에 또는 닫는 괄호 바로 앞에 공백이 없어야합니다.</target>
        </trans-unit>
        <trans-unit id="e92b56b46fd3333c3c86b73a448970aa9cd1f7a3" translate="yes" xml:space="preserve">
          <source>When parsing JSX code like &lt;code&gt;&amp;lt;a&amp;gt;foo&amp;lt;/a&amp;gt;&lt;/code&gt;, the default parser will now give the &lt;code&gt;foo&lt;/code&gt; AST node the &lt;code&gt;JSXText&lt;/code&gt; type, rather than the &lt;code&gt;Literal&lt;/code&gt; type. This makes the AST compliant with a recent update to the JSX spec.</source>
          <target state="translated">&lt;code&gt;&amp;lt;a&amp;gt;foo&amp;lt;/a&amp;gt;&lt;/code&gt; 와 같은 JSX 코드를 구문 분석 할 때 기본 구문 분석기는 이제 &lt;code&gt;Literal&lt;/code&gt; 유형이 아닌 &lt;code&gt;foo&lt;/code&gt; AST 노드에 &lt;code&gt;JSXText&lt;/code&gt; 유형을 제공 합니다. 이로 인해 AST는 최신 JSX 사양 업데이트를 준수합니다.</target>
        </trans-unit>
        <trans-unit id="7dee6841b50edc415bfe1c5c8466161d44e6e78e" translate="yes" xml:space="preserve">
          <source>When set to &lt;code&gt;false&lt;/code&gt; this option prohibits the use of function expressions as callbacks or function arguments entirely, without exception.</source>
          <target state="translated">&lt;code&gt;false&lt;/code&gt; 로 설정하면 이 옵션은 예외없이 함수 표현식을 콜백 또는 함수 인수로 사용하는 것을 금지합니다.</target>
        </trans-unit>
        <trans-unit id="3ba26a5a5d49bc636e6880dc523e7efaa7e3f9ff" translate="yes" xml:space="preserve">
          <source>When set to &lt;code&gt;true&lt;/code&gt;, which it is by default, The defaultAssignment option allows expressions of the form &lt;code&gt;x ? x : expr&lt;/code&gt; (where &lt;code&gt;x&lt;/code&gt; is any identifier and &lt;code&gt;expr&lt;/code&gt; is any expression).</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 로 설정되면 ( 기본적으로) defaultAssignment 옵션은 &lt;code&gt;x ? x : expr&lt;/code&gt; 형식의 표현식을 허용합니다 . x : expr (여기서 &lt;code&gt;x&lt;/code&gt; 는 식별자이고 &lt;code&gt;expr&lt;/code&gt; 은 모든 표현식 임)</target>
        </trans-unit>
        <trans-unit id="58c76c479951b060bb7467a1b0d3e833c0d8d2c6" translate="yes" xml:space="preserve">
          <source>When specified, the given format is output into the provided file name.</source>
          <target state="translated">지정된 경우 지정된 형식이 제공된 파일 이름으로 출력됩니다.</target>
        </trans-unit>
        <trans-unit id="9058d12891b7bc2d4e9327a4983a9feee1877886" translate="yes" xml:space="preserve">
          <source>When specified, the given format is output to the console. If you'd like to save that output into a file, you can do so on the command line like so:</source>
          <target state="translated">지정된 경우 지정된 형식이 콘솔로 출력됩니다. 출력을 파일로 저장하려면 다음과 같이 명령 행에서 수행 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="47889d2dbb1cf22065935476a0f8d0aa8e29fe7e" translate="yes" xml:space="preserve">
          <source>When the code is not in &lt;code&gt;strict&lt;/code&gt; mode, an assignment to an undeclared variable creates a new global variable. This will happen even is the code is in a function.</source>
          <target state="translated">코드가 &lt;code&gt;strict&lt;/code&gt; 모드 가 아닌 경우 선언되지 않은 변수에 할당하면 새 전역 변수가 만들어집니다. 이것은 코드가 함수에 있더라도 발생합니다.</target>
        </trans-unit>
        <trans-unit id="ba5826aadfa968a7067425694dbe879c9c132684" translate="yes" xml:space="preserve">
          <source>When there is a function</source>
          <target state="translated">기능이있는 경우</target>
        </trans-unit>
        <trans-unit id="6adbe1473af6389caf7437ed913a23dbb72e9491" translate="yes" xml:space="preserve">
          <source>When this rule is enabled, each &lt;code&gt;var&lt;/code&gt; statement must satisfy the following conditions:</source>
          <target state="translated">이 규칙이 활성화되면 각 &lt;code&gt;var&lt;/code&gt; 문은 다음 조건을 충족해야합니다.</target>
        </trans-unit>
        <trans-unit id="4af1a048904ebbc268d7e5d2a030b1271e1ca108" translate="yes" xml:space="preserve">
          <source>When updating the code, it's usually better to add additional commits to your branch rather than amending the original commit, because reviewers can easily tell which changes were made in response to a particular review. When we merge pull requests, we will squash all the commits from your branch into a single commit on the &lt;code&gt;master&lt;/code&gt; branch.</source>
          <target state="translated">코드를 업데이트 할 때는 일반적으로 원래 커밋을 수정하지 않고 분기에 추가 커밋을 추가하는 것이 좋습니다. 검토자는 특정 검토에 대한 변경 내용을 쉽게 알 수 있기 때문입니다. 풀 요청을 병합하면 브랜치의 모든 커밋을 &lt;code&gt;master&lt;/code&gt; 브랜치 의 단일 커밋으로 스쿼시합니다 .</target>
        </trans-unit>
        <trans-unit id="b872c16657ae9bf9c92c81eca4cedcf1ce4e3b38" translate="yes" xml:space="preserve">
          <source>When used globally, as in this example, the strict mode pragma applies to all code within a single file. This can be dangerous if you concatenate scripts together before serving them to a browser. For instance, if you have a file running in strict mode and you concatenate that file with jQuery, the strict mode now also applies to jQuery and may cause errors.</source>
          <target state="translated">이 예제에서와 같이 전역 모드를 사용할 경우 엄격 모드 pragma는 단일 파일 내의 모든 코드에 적용됩니다. 스크립트를 브라우저에 제공하기 전에 함께 연결하면 위험 할 수 있습니다. 예를 들어, 엄격 모드로 실행중인 파일이 있고 해당 파일을 jQuery와 연결하는 경우 이제 엄격 모드가 jQuery에도 적용되며 오류가 발생할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="aefeb6a510b4f06da8ab827396ab03e61b9a2b4f" translate="yes" xml:space="preserve">
          <source>When used with IIFE (immediately-invoked function expression), &lt;code&gt;void&lt;/code&gt; can be used to force the function keyword to be treated as an expression instead of a declaration:</source>
          <target state="translated">IIFE (즉시 호출 된 함수 표현식)와 함께 사용되는 경우 &lt;code&gt;void&lt;/code&gt; 를 사용하여 함수 키워드를 선언 대신 표현식으로 처리하도록 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ae07cc7a2c00ed114816981d903072e8072c3972" translate="yes" xml:space="preserve">
          <source>When using &lt;a href=&quot;https://docs.npmjs.com/misc/scope&quot;&gt;scoped modules&lt;/a&gt; it is not possible to omit the &lt;code&gt;eslint-config&lt;/code&gt; namespace. Doing so would result in resolution errors as explained above. Assuming the package name is &lt;code&gt;@scope/eslint-config&lt;/code&gt;, the additional config can be accessed as:</source>
          <target state="translated">&lt;a href=&quot;https://docs.npmjs.com/misc/scope&quot;&gt;범위가 지정된 모듈을&lt;/a&gt; 사용 하는 경우 &lt;code&gt;eslint-config&lt;/code&gt; 네임 스페이스 를 생략 할 수 없습니다 . 그렇게하면 위에서 설명한대로 해결 오류가 발생합니다. 패키지 이름이 &lt;code&gt;@scope/eslint-config&lt;/code&gt; 이면 다음과 같이 추가 구성에 액세스 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="26dd94e9925d7320e1851527a2ac78a589c822f5" translate="yes" xml:space="preserve">
          <source>When using &lt;code&gt;&quot;end&quot;&lt;/code&gt; this placement will be enforced:</source>
          <target state="translated">&lt;code&gt;&quot;end&quot;&lt;/code&gt; 사용하면 이 게재 위치가 시행됩니다.</target>
        </trans-unit>
        <trans-unit id="09ca3b175b033e6afa312c6e6f12311d2e033185" translate="yes" xml:space="preserve">
          <source>When using &lt;code&gt;&quot;middle&quot;&lt;/code&gt; this placement will be enforced:</source>
          <target state="translated">사용하는 경우 &lt;code&gt;&quot;middle&quot;&lt;/code&gt; 이 배치가 적용됩니다 :</target>
        </trans-unit>
        <trans-unit id="6c5237044c68d3a775c858f741758773f712859a" translate="yes" xml:space="preserve">
          <source>When using &lt;code&gt;&quot;start&quot;&lt;/code&gt; this placement will be enforced:</source>
          <target state="translated">&lt;code&gt;&quot;start&quot;&lt;/code&gt; 사용하면 이 배치가 적용됩니다.</target>
        </trans-unit>
        <trans-unit id="98295039ae3403c3effaa8e60d4f8b88e51b9a68" translate="yes" xml:space="preserve">
          <source>When using &lt;code&gt;--init&lt;/code&gt;, your configuration file will automatically include the following line:</source>
          <target state="translated">&lt;code&gt;--init&lt;/code&gt; 를 사용하면 구성 파일에 다음 줄이 자동으로 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="e12966d5c8e8533c8ea0391ab9f9bf76fed4d63c" translate="yes" xml:space="preserve">
          <source>When using &lt;code&gt;.eslintrc.*&lt;/code&gt; and &lt;code&gt;package.json&lt;/code&gt; files for configuration, you can take advantage of configuration cascading. For instance, suppose you have the following structure:</source>
          <target state="translated">사용하는 경우 &lt;code&gt;.eslintrc.*&lt;/code&gt; 및 &lt;code&gt;package.json&lt;/code&gt; 의 구성 파일을, 당신은 구성 계단식 활용할 수 있습니다. 예를 들어, 다음 구조를 가지고 있다고 가정하십시오.</target>
        </trans-unit>
        <trans-unit id="67eb92d73cc035fb0e740eeb9ee35d54c21b60c8" translate="yes" xml:space="preserve">
          <source>When using ESLint v4, both of the following scenarios resulted in an exit code of 1 when running ESLint on the command line:</source>
          <target state="translated">ESLint v4를 사용할 때 다음 두 시나리오 모두 명령 행에서 ESLint를 실행할 때 종료 코드 1이 발생했습니다.</target>
        </trans-unit>
        <trans-unit id="f1aa627c5d01df9707c9033e04463db737c25a39" translate="yes" xml:space="preserve">
          <source>When using ESLint's Node.js API, the &lt;a href=&quot;../developer-guide/nodejs-api#linter-1&quot;&gt;&lt;code&gt;linter&lt;/code&gt;&lt;/a&gt; property is now non-enumerable. Note that the &lt;code&gt;linter&lt;/code&gt; property was deprecated in ESLint v4 in favor of the &lt;a href=&quot;../developer-guide/nodejs-api#linter&quot;&gt;&lt;code&gt;Linter&lt;/code&gt;&lt;/a&gt; property.</source>
          <target state="translated">ESLint의 Node.js API를 사용할 때 &lt;a href=&quot;../developer-guide/nodejs-api#linter-1&quot;&gt; &lt;code&gt;linter&lt;/code&gt; &lt;/a&gt; 속성을 열거 할 수 없습니다. 있습니다 &lt;code&gt;linter&lt;/code&gt; 속성이 ESLint 사용되지 않습니다는 찬성 V4 &lt;a href=&quot;../developer-guide/nodejs-api#linter&quot;&gt; &lt;code&gt;Linter&lt;/code&gt; &lt;/a&gt; 속성입니다.</target>
        </trans-unit>
        <trans-unit id="3877034397bdd6655a65bb98713badfab70c61ee" translate="yes" xml:space="preserve">
          <source>When using a &lt;code&gt;for-in&lt;/code&gt; statement, double-check whether or not you need to use &lt;code&gt;hasOwnProperty()&lt;/code&gt; to filter out object members.</source>
          <target state="translated">사용하는 경우 &lt;code&gt;for-in&lt;/code&gt; 문을 사용할 필요가 있는지 여부를 다시 확인 &lt;code&gt;hasOwnProperty()&lt;/code&gt; 객체의 멤버를 필터링 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a472295684a43521cf709823b83a0dfc83f4c6ed" translate="yes" xml:space="preserve">
          <source>When using a config file that is located outside of the current project (with the &lt;code&gt;--config&lt;/code&gt; flag), if the config uses plugins which are installed locally to itself, &lt;code&gt;--resolve-plugins-relative-to&lt;/code&gt; should be set to the directory containing the config file.</source>
          <target state="translated">현재 프로젝트 외부에있는 구성 파일 ( &lt;code&gt;--config&lt;/code&gt; 플래그 사용)을 사용하는 경우 구성에 자체적으로 설치된 플러그인을 구성에 사용하는 경우 &lt;code&gt;--resolve-plugins-relative-to&lt;/code&gt; 는 다음을 포함하는 디렉토리로 설정해야합니다. 구성 파일.</target>
        </trans-unit>
        <trans-unit id="9fe44a79a84622c0b965f560717893c125cae83f" translate="yes" xml:space="preserve">
          <source>When using any of the &lt;code&gt;multi*&lt;/code&gt; options, you can add an option to enforce all bodies of a &lt;code&gt;if&lt;/code&gt;, &lt;code&gt;else if&lt;/code&gt; and &lt;code&gt;else&lt;/code&gt; chain to be with or without braces.</source>
          <target state="translated">&lt;code&gt;multi*&lt;/code&gt; 옵션 중 하나를 사용 하는 &lt;code&gt;if&lt;/code&gt; 의 모든 본문 , &lt;code&gt;else if&lt;/code&gt; 및 &lt;code&gt;else&lt;/code&gt; 체인이 중괄호의 유무에 관계없이 적용되도록 옵션을 추가 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="e1ce6d13212b9475ddace9afb3a4ec7570c6a3f8" translate="yes" xml:space="preserve">
          <source>When using destructuring, it's possible to create a pattern that has no effect. This happens when empty curly braces are used to the right of an embedded object destructuring pattern, such as:</source>
          <target state="translated">디스트 럭처링을 사용하면 효과가없는 패턴을 만들 수 있습니다. 이것은 다음과 같이 포함 된 객체 파괴 패턴의 오른쪽에 빈 중괄호가 사용될 때 발생합니다.</target>
        </trans-unit>
        <trans-unit id="db5460863d756d57789fab16c7a69040d5d2e79f" translate="yes" xml:space="preserve">
          <source>When using options, make sure that your rule has some logic defaults in case the options are not provided.</source>
          <target state="translated">옵션을 사용할 때 옵션이 제공되지 않는 경우 규칙에 일부 논리 기본값이 있는지 확인하십시오.</target>
        </trans-unit>
        <trans-unit id="1342a76757aef0e4e5631b4d0669dc7aeec279ca" translate="yes" xml:space="preserve">
          <source>When using options, make sure that your rule has some logical defaults in case the options are not provided.</source>
          <target state="translated">옵션을 사용할 때 옵션이 제공되지 않는 경우 규칙에 일부 논리 기본값이 있는지 확인하십시오.</target>
        </trans-unit>
        <trans-unit id="065a7400897a87490ae67a06072ac7d5967d0b59" translate="yes" xml:space="preserve">
          <source>When using rules, environments or configs defined by plugins, they must be referenced following the convention:</source>
          <target state="translated">플러그인으로 정의 된 규칙, 환경 또는 구성을 사용하는 경우 규칙에 따라 참조해야합니다.</target>
        </trans-unit>
        <trans-unit id="77682b7f7a1abb91eab097d1eb59bc1ac216c0eb" translate="yes" xml:space="preserve">
          <source>When using tagged template literals, it's possible to insert whitespace between the tag function and the template literal. Since this whitespace is optional, the following lines are equivalent:</source>
          <target state="translated">태그가 지정된 템플릿 리터럴을 사용하는 경우 태그 함수와 템플릿 리터럴 사이에 공백을 삽입 할 수 있습니다. 이 공백은 선택 사항이므로 다음 줄은 동일합니다.</target>
        </trans-unit>
        <trans-unit id="572505491b13551fec178b2c6eb532fad10fec71" translate="yes" xml:space="preserve">
          <source>When using the &lt;code&gt;&quot;always&quot;&lt;/code&gt; option, whitespace is required between spread operators and their expressions.</source>
          <target state="translated">&lt;code&gt;&quot;always&quot;&lt;/code&gt; 옵션을 사용하는 경우 스프레드 연산자와 표현식 사이에 공백이 필요합니다.</target>
        </trans-unit>
        <trans-unit id="88068f5e037d31b9f83bb310b2f96f7c77755ae1" translate="yes" xml:space="preserve">
          <source>When using the &lt;code&gt;parseInt()&lt;/code&gt; function it is common to omit the second argument, the radix, and let the function try to determine from the first argument what type of number it is. By default, &lt;code&gt;parseInt()&lt;/code&gt; will autodetect decimal and hexadecimal (via &lt;code&gt;0x&lt;/code&gt; prefix). Prior to ECMAScript 5, &lt;code&gt;parseInt()&lt;/code&gt; also autodetected octal literals, which caused problems because many developers assumed a leading &lt;code&gt;0&lt;/code&gt; would be ignored.</source>
          <target state="translated">&lt;code&gt;parseInt()&lt;/code&gt; 함수를 사용할 때 일반적으로 두 번째 인수 인 기수를 생략하고 함수가 첫 번째 인수에서 숫자 유형을 판별하려고 시도하는 것이 일반적입니다. 기본적으로 &lt;code&gt;parseInt()&lt;/code&gt; 는 10 진수와 16 진수 ( &lt;code&gt;0x&lt;/code&gt; 접두사 를 통해 ) 를 자동 감지 합니다. ECMAScript 5 이전에는 &lt;code&gt;parseInt()&lt;/code&gt; 도 8 진 리터럴을 자동 감지하여 많은 개발자가 선행 &lt;code&gt;0&lt;/code&gt; 을 무시 한다고 가정했기 때문에 문제를 일으켰습니다 .</target>
        </trans-unit>
        <trans-unit id="88284b0351505f62a836f42de5b2788b48eda806" translate="yes" xml:space="preserve">
          <source>When using the constructor function with string literals, don't forget that the string escaping rules still apply. If you want to put a backslash in the pattern, you need to escape it in the string literal. Thus, the following are equivalent:</source>
          <target state="translated">문자열 리터럴과 함께 생성자 함수를 사용할 때 문자열 이스케이프 규칙이 여전히 적용된다는 것을 잊지 마십시오. 패턴에 백 슬래시를 넣으려면 문자열 리터럴에서 이스케이프해야합니다. 따라서 다음은 동일합니다.</target>
        </trans-unit>
        <trans-unit id="1e14cbc834c9a5f17fbdfbd32b0519c83d4daeea" translate="yes" xml:space="preserve">
          <source>When using the default &lt;code&gt;&quot;never&quot;&lt;/code&gt; option, whitespace is not allowed between spread operators and their expressions.</source>
          <target state="translated">기본 &lt;code&gt;&quot;never&quot;&lt;/code&gt; 옵션을 사용하는 경우 스프레드 연산자와 해당 표현식 사이에 공백이 허용되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="8eb0941e44731d1406d202c3c09b679dece569a9" translate="yes" xml:space="preserve">
          <source>When using the default parser, rest operators now have type &lt;code&gt;RestElement&lt;/code&gt;</source>
          <target state="translated">기본 파서를 사용할 때 나머지 연산자는 이제 &lt;code&gt;RestElement&lt;/code&gt; 유형을 갖습니다.</target>
        </trans-unit>
        <trans-unit id="ac630bdfb56b2d802f81e1826acde944bb747613" translate="yes" xml:space="preserve">
          <source>When using the default parser, spread operators now have type &lt;code&gt;SpreadElement&lt;/code&gt;</source>
          <target state="translated">기본 파서를 사용할 때 스프레드 연산자의 유형은 &lt;code&gt;SpreadElement&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="8616f7cf1f10c7305732004515b3e0c7f1b326cf" translate="yes" xml:space="preserve">
          <source>When using the default parser, text nodes in JSX elements now have type &lt;code&gt;JSXText&lt;/code&gt;</source>
          <target state="translated">기본 파서를 사용할 때 JSX 요소의 텍스트 노드는 이제 &lt;code&gt;JSXText&lt;/code&gt; 유형을 갖습니다.</target>
        </trans-unit>
        <trans-unit id="3135ee8033e77839591488d21955ec0799490dc6" translate="yes" xml:space="preserve">
          <source>When using the expression syntax &lt;code&gt;&quot;end&quot;&lt;/code&gt; will be enforced here:</source>
          <target state="translated">표현식 구문을 사용할 때 &lt;code&gt;&quot;end&quot;&lt;/code&gt; 가 여기에 적용됩니다.</target>
        </trans-unit>
        <trans-unit id="8de601ce9b9f12866178ba6345b9ba4e726ea473" translate="yes" xml:space="preserve">
          <source>When using the expression syntax &lt;code&gt;&quot;middle&quot;&lt;/code&gt; will be enforced here:</source>
          <target state="translated">표현식 구문을 사용할 때 &lt;code&gt;&quot;middle&quot;&lt;/code&gt; 이 여기에 적용됩니다.</target>
        </trans-unit>
        <trans-unit id="8bd53727d730e4c05e40c010c8d70d943c9ea8ca" translate="yes" xml:space="preserve">
          <source>When using the expression syntax &lt;code&gt;&quot;start&quot;&lt;/code&gt; will be enforced here:</source>
          <target state="translated">표현식 구문을 사용하는 경우 &lt;code&gt;&quot;start&quot;&lt;/code&gt; 가 여기에 적용됩니다.</target>
        </trans-unit>
        <trans-unit id="b6d978f57faa0037e5473a90f3c71723c7f1acc3" translate="yes" xml:space="preserve">
          <source>When using the expression syntax this is valid for both &lt;code&gt;&quot;start&quot;&lt;/code&gt; and &lt;code&gt;&quot;end&quot;&lt;/code&gt;:</source>
          <target state="translated">표현식 구문을 사용하는 경우 &lt;code&gt;&quot;start&quot;&lt;/code&gt; 및 &lt;code&gt;&quot;end&quot;&lt;/code&gt; 모두에 유효합니다 .</target>
        </trans-unit>
        <trans-unit id="4ed32cf1f256eefd3785dd5a68ca7828859df24e" translate="yes" xml:space="preserve">
          <source>When using the object form, you can also specify an array of gitignore-style patterns:</source>
          <target state="translated">객체 형식을 사용할 때 gitignore 스타일 패턴의 배열을 지정할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="e017154842854f21c9d1f0307bc811b5980a759b" translate="yes" xml:space="preserve">
          <source>When working with browser scripts, developers often forget that variable and function declarations at the top-level scope become global variables on the &lt;code&gt;window&lt;/code&gt; object. As opposed to modules which have their own scope. Globals should be explicitly assigned to &lt;code&gt;window&lt;/code&gt; or &lt;code&gt;self&lt;/code&gt; if that is the intent. Otherwise variables intended to be local to the script should be wrapped in an IIFE.</source>
          <target state="translated">브라우저 스크립트로 작업 할 때 개발자는 최상위 수준의 변수 및 함수 선언이 &lt;code&gt;window&lt;/code&gt; 개체의 전역 변수가된다는 사실을 종종 잊어 버립니다 . 자체 범위를 가진 모듈과 달리. 전역 명시 적으로 할당해야합니다 &lt;code&gt;window&lt;/code&gt; 또는 &lt;code&gt;self&lt;/code&gt; 그 의도 경우. 그렇지 않으면 스크립트에 국한되는 변수는 IIFE로 싸야합니다.</target>
        </trans-unit>
        <trans-unit id="2ae3d6ae3c17238e69473bcfd258c180c90d185f" translate="yes" xml:space="preserve">
          <source>When writing &lt;code&gt;if&lt;/code&gt;, &lt;code&gt;else&lt;/code&gt;, &lt;code&gt;while&lt;/code&gt;, &lt;code&gt;do-while&lt;/code&gt;, and &lt;code&gt;for&lt;/code&gt; statements, the body can be a single statement instead of a block. It can be useful to enforce a consistent location for these single statements.</source>
          <target state="translated">쓸 때 &lt;code&gt;if&lt;/code&gt; , &lt;code&gt;else&lt;/code&gt; , &lt;code&gt;while&lt;/code&gt; , &lt;code&gt;do-while&lt;/code&gt; , 그리고 &lt;code&gt;for&lt;/code&gt; 문, 신체가 대신 블록의 하나의 문이 될 수 있습니다. 이러한 단일 진술에 대해 일관된 위치를 유지하는 것이 유용 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="fea634132274ace881ee0bca736c790f2b99034e" translate="yes" xml:space="preserve">
          <source>When writing a custom ESLint rule, you can listen for nodes that match a particular selector as the AST is traversed.</source>
          <target state="translated">사용자 정의 ESLint 규칙을 작성할 때 AST를 통과 할 때 특정 선택기와 일치하는 노드를 청취 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f7e1b6bb0b8e229c1579ec042f43f7fccc4c8e52" translate="yes" xml:space="preserve">
          <source>When writing asynchronous code, it is possible to create subtle race condition bugs. Consider the following example:</source>
          <target state="translated">비동기 코드를 작성할 때 미묘한 경쟁 조건 버그를 만들 수 있습니다. 다음 예제를 고려하십시오.</target>
        </trans-unit>
        <trans-unit id="9ab956d19f6a7d33bcea781c394aac7716e7d396" translate="yes" xml:space="preserve">
          <source>When you are indifferent as to how your variables are initialized.</source>
          <target state="translated">변수 초기화 방법에 대해 무관심한 경우.</target>
        </trans-unit>
        <trans-unit id="39cec6a53e81419ae94518ee1daf7421c15031c9" translate="yes" xml:space="preserve">
          <source>When you first get the source code, you need to run &lt;code&gt;npm install&lt;/code&gt; once initially to set ESLint for development. Once you've done that, you can run the tests via:</source>
          <target state="translated">소스 코드를 처음 얻을 때 개발을 위해 ESLint를 설정 &lt;code&gt;npm install&lt;/code&gt; 을 처음 한 번 실행해야합니다 . 일단 완료하면 다음을 통해 테스트를 실행할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="1fb96c9e3ee803081c2dbdc5072343cd0694c05e" translate="yes" xml:space="preserve">
          <source>When you pass directories to ESLint, files and directories are silently ignored. If you pass a specific file to ESLint, then you will see a warning indicating that the file was skipped. For example, suppose you have an &lt;code&gt;.eslintignore&lt;/code&gt; file that looks like this:</source>
          <target state="translated">디렉토리를 ESLint에 전달하면 파일 및 디렉토리는 자동으로 무시됩니다. 특정 파일을 ESLint에 전달하면 파일을 건너 뛰었다는 경고가 표시됩니다. 예를 들어, 다음과 같은 &lt;code&gt;.eslintignore&lt;/code&gt; 파일이 있다고 가정 하십시오.</target>
        </trans-unit>
        <trans-unit id="a40e7db8e660398609c617f2002410fe5311511d" translate="yes" xml:space="preserve">
          <source>Whereas others don't leave any empty newlines at all.</source>
          <target state="translated">다른 사람들은 빈 줄 바꿈을 전혀 남기지 않습니다.</target>
        </trans-unit>
        <trans-unit id="87fefcfc6db6a927999c919eb6932d1b0ddd6e8d" translate="yes" xml:space="preserve">
          <source>Whether or not you choose to allow dangling underscores in identifiers is purely a convention and has no effect on performance, readability, or complexity. It's purely a preference.</source>
          <target state="translated">식별자에 댕글 링 밑줄을 허용할지 여부는 전적으로 관례이며 성능, 가독성 또는 복잡성에는 영향을 미치지 않습니다. 순전히 선호 사항입니다.</target>
        </trans-unit>
        <trans-unit id="f6534f63646dd23727947c2cf6e7bcc6f3e758c3" translate="yes" xml:space="preserve">
          <source>While &lt;code&gt;require()&lt;/code&gt; may be called anywhere in code, some style guides prescribe that it should be called only in the top level of a module to make it easier to identify dependencies. For instance, it's arguably harder to identify dependencies when they are deeply nested inside of functions and other statements:</source>
          <target state="translated">동안 &lt;code&gt;require()&lt;/code&gt; 어디서나 코드에서 호출 할 수 있습니다, 어떤 스타일 가이드가 쉽게 종속성을 식별 할 수 있도록 만 모듈의 최상위에서 호출해야한다는 규정. 예를 들어, 의존성이 함수와 다른 문장 안에 깊숙이 중첩되어있을 때 의존성을 식별하는 것이 더 어렵습니다.</target>
        </trans-unit>
        <trans-unit id="29813e5d8bf1cb7355c7898a63fa4f03da45d7d8" translate="yes" xml:space="preserve">
          <source>While ESLint has some built-in formatters available to format the linting results, it's also possible to create and distribute your own custom formatters. You can include custom formatters in your project directly or create an npm package to distribute them separately.</source>
          <target state="translated">ESLint에는 린트 결과를 형식화하는 데 사용할 수있는 일부 내장 포맷터가 있지만 사용자 정의 포맷터를 작성하고 배포 할 수도 있습니다. 프로젝트에 직접 사용자 정의 포맷터를 포함 시키거나 npm 패키지를 만들어 별도로 배포 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="8311aac5b23a97503926ab51c441e3cee02f86ac" translate="yes" xml:space="preserve">
          <source>While ESLint is designed to be run on the command line, it's possible to use ESLint programmatically through the Node.js API. The purpose of the Node.js API is to allow plugin and tool authors to use the ESLint functionality directly, without going through the command line interface.</source>
          <target state="translated">ESLint는 명령 줄에서 실행되도록 설계되었지만 Node.js API를 통해 프로그래밍 방식으로 ESLint를 사용할 수 있습니다. Node.js API의 목적은 플러그인 및 도구 작성자가 명령 행 인터페이스를 거치지 않고 ESLint 기능을 직접 사용할 수 있도록하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="fd197d2828aa60783949613ca0213c33e76566f6" translate="yes" xml:space="preserve">
          <source>While comments are not technically part of the AST, ESLint provides a few ways for rules to access them:</source>
          <target state="translated">주석은 기술적으로 AST의 일부가 아니지만 ESLint는 규칙에 주석에 액세스 할 수있는 몇 가지 방법을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="37c4f55e4cdec2c52b9d1730070d74540af4ff31" translate="yes" xml:space="preserve">
          <source>While convenient in some cases, labels tend to be used only rarely and are frowned upon by some as a remedial form of flow control that is more error prone and harder to understand.</source>
          <target state="translated">경우에 따라 편리하지만 레이블은 거의 사용되지 않는 경향이 있으며 일부에서는 오류가 발생하기 쉽고 이해하기 어려운 흐름 제어의 개선 된 형태로 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="63cb520d8087bbdcbf754409ab27930737530ab8" translate="yes" xml:space="preserve">
          <source>While custom formatter do not receive arguments in addition to the results object, it is possible to pass additional data into formatters.</source>
          <target state="translated">사용자 정의 포맷터는 결과 오브젝트 외에 인수를받지 않지만 추가 데이터를 포맷터로 전달할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="0369fa756d04f135ed12a2b1afcb5955ad419079" translate="yes" xml:space="preserve">
          <source>While examples such as &lt;code&gt;window&lt;/code&gt; are obvious, there are often hundreds of built-in global objects provided by JavaScript environments. It can be hard to know if you're assigning to a global variable or not.</source>
          <target state="translated">&lt;code&gt;window&lt;/code&gt; 와 같은 예제 는 명백 하지만 JavaScript 환경에서 제공하는 수백 개의 내장 전역 객체가 종종 있습니다. 전역 변수에 할당하고 있는지 알기가 어려울 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="0c46f9484120e3dc21893826ed7750184420479e" translate="yes" xml:space="preserve">
          <source>While formatting preferences are very personal, a number of style guides require or disallow spaces between brackets:</source>
          <target state="translated">서식 환경 설정은 매우 개인적이지만 여러 스타일 가이드는 대괄호 사이에 공백이 필요하거나 허용하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="ead041c0e54e18e0aedd3c11f6e9467485197c87" translate="yes" xml:space="preserve">
          <source>While formatting preferences are very personal, a number of style guides require or disallow spaces between computed properties in the following situations:</source>
          <target state="translated">서식 환경 설정은 매우 개인적이지만 다음과 같은 상황에서는 여러 스타일 안내서에서 계산 된 속성 사이에 공백이 필요하거나 허용되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="95f4505cf507f8d42dd7d42c5558ca7478a729d0" translate="yes" xml:space="preserve">
          <source>While formatting preferences are very personal, a number of style guides require or disallow spaces between curly braces in the following situations:</source>
          <target state="translated">서식 환경 설정은 매우 개인적이지만 다음과 같은 상황에서는 여러 스타일 안내서에서 중괄호 사이에 공백이 필요하거나 허용되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="f05e62b6f2060865e9ec4b62cc00cdb590d96030" translate="yes" xml:space="preserve">
          <source>While formatting preferences are very personal, a number of style guides require spaces around operators, such as:</source>
          <target state="translated">서식 환경 설정은 매우 개인적이지만 많은 스타일 가이드에는 다음과 같이 연산자 주위에 공백이 필요합니다.</target>
        </trans-unit>
        <trans-unit id="d055d4afaa69216abb5964c95be2721bea469f97" translate="yes" xml:space="preserve">
          <source>While it is allowed to define the pair for a getter or a setter anywhere in an object or class definition, it's considered a best practice to group accessor functions for the same property.</source>
          <target state="translated">객체 또는 클래스 정의의 어느 곳에서나 getter 또는 setter의 쌍을 정의 할 수 있지만 동일한 속성에 대한 접근 자 함수를 그룹화하는 것이 가장 좋습니다.</target>
        </trans-unit>
        <trans-unit id="9d88f9eac375bda3a235e91d455dae4d347e664d" translate="yes" xml:space="preserve">
          <source>While it's possible to have whitespace between the name of a function and the parentheses that execute it, such patterns tend to look more like errors.</source>
          <target state="translated">함수 이름과 함수를 실행하는 괄호 사이에 공백이있을 수 있지만 이러한 패턴은 오류와 비슷해 보입니다.</target>
        </trans-unit>
        <trans-unit id="e7c4b87b0aeb5522a09379b8987d2ad80de6211b" translate="yes" xml:space="preserve">
          <source>While no style is considered better than the other, most developers agree that having a consistent style throughout a project is important for its long-term maintainability.</source>
          <target state="translated">다른 스타일보다 더 나은 스타일은 없지만 대부분의 개발자는 프로젝트 전체에서 일관된 스타일을 유지하는 것이 장기적인 유지 관리에 중요하다는 데 동의합니다.</target>
        </trans-unit>
        <trans-unit id="c9bd1ba118ab46e26a22fd543291c93549359df6" translate="yes" xml:space="preserve">
          <source>While returning a value from a setter does not produce an error, the returned value is being ignored. Therefore, returning a value from a setter is either unnecessary or a possible error, since the returned value cannot be used.</source>
          <target state="translated">setter에서 값을 반환해도 오류가 발생하지 않지만 반환 된 값은 무시됩니다. 따라서 반환 값을 사용할 수 없으므로 setter에서 값을 반환하는 것은 불필요하거나 오류 일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="24b0cbc319260120c825ff5810ce1e3e83466613" translate="yes" xml:space="preserve">
          <source>While the &lt;code&gt;items&lt;/code&gt; array in this example has a &lt;code&gt;length&lt;/code&gt; of 2, there are actually no values in &lt;code&gt;items[0]&lt;/code&gt; or &lt;code&gt;items[1]&lt;/code&gt;. The fact that the array literal is valid with only commas inside, coupled with the &lt;code&gt;length&lt;/code&gt; being set and actual item values not being set, make sparse arrays confusing for many developers. Consider the following:</source>
          <target state="translated">그동안 &lt;code&gt;items&lt;/code&gt; 이 예에서 어레이는 보유 &lt;code&gt;length&lt;/code&gt; 2를 실제로 값 적용 &lt;code&gt;items[0]&lt;/code&gt; 또는 &lt;code&gt;items[1]&lt;/code&gt; . 배열 리터럴이 내부에 쉼표로만 유효하고 &lt;code&gt;length&lt;/code&gt; 가 설정되고 실제 항목 값이 설정되어 있지 않다는 사실로 인해 많은 개발자에게는 희소 배열이 혼동됩니다. 다음을 고려하세요:</target>
        </trans-unit>
        <trans-unit id="f234db536011aa575688b43d86c313f74c7f0a44" translate="yes" xml:space="preserve">
          <source>While there are no performance differences between the two approaches, the byte savings and conciseness of the object literal form is what has made it the de facto way of creating new objects.</source>
          <target state="translated">두 접근 방식간에 성능 차이는 없지만 객체 리터럴 형식의 바이트 절약 및 간결성은 새로운 객체를 만드는 실질적인 방법입니다.</target>
        </trans-unit>
        <trans-unit id="abc8de1d6373af77c99606ce310c2bfa6eb601d3" translate="yes" xml:space="preserve">
          <source>While this is valid JavaScript syntax, it is hard to determine what the author intended.</source>
          <target state="translated">이것은 유효한 JavaScript 구문이지만 작성자가 의도 한 것을 결정하기는 어렵습니다.</target>
        </trans-unit>
        <trans-unit id="47b13cdb0607925057b8e9d36b0386d1a11eb54c" translate="yes" xml:space="preserve">
          <source>Whitespace</source>
          <target state="translated">Whitespace</target>
        </trans-unit>
        <trans-unit id="2959ec3d09a773efa13db9717c2200b428f7a939" translate="yes" xml:space="preserve">
          <source>Whitespace between a function name and its parameter list is optional.</source>
          <target state="translated">함수 이름과 매개 변수 목록 사이의 공백은 선택 사항입니다.</target>
        </trans-unit>
        <trans-unit id="3a7ac655f9d858d70a71d43d5e425ebf504053ad" translate="yes" xml:space="preserve">
          <source>Why not use &lt;code&gt;max-statements&lt;/code&gt; or other complexity measurement rules instead?</source>
          <target state="translated">왜 &lt;code&gt;max-statements&lt;/code&gt; 또는 다른 복잡성 측정 규칙을 사용하지 않습니까?</target>
        </trans-unit>
        <trans-unit id="c0db24e617409556a049b18d97243e71aeff0fa5" translate="yes" xml:space="preserve">
          <source>Why would you want to restrict a module?</source>
          <target state="translated">왜 모듈을 제한하고 싶습니까?</target>
        </trans-unit>
        <trans-unit id="a53bafb0392a4642abd5c673a31dd5985aabb07e" translate="yes" xml:space="preserve">
          <source>Why would you want to restrict imports?</source>
          <target state="translated">왜 수입을 제한하고 싶습니까?</target>
        </trans-unit>
        <trans-unit id="d1ee831b819c0a1c73da610e4524b70bce25e441" translate="yes" xml:space="preserve">
          <source>Will produce the following output:</source>
          <target state="translated">다음과 같은 출력을 생성합니다.</target>
        </trans-unit>
        <trans-unit id="3761ecd349f048bb5b8ad00362e8f092a85620b4" translate="yes" xml:space="preserve">
          <source>With &lt;code&gt;natural&lt;/code&gt; as false, the ordering would be 1 10 3 6 8</source>
          <target state="translated">함께 &lt;code&gt;natural&lt;/code&gt; 거짓, 순서가 될 것 1 10 3 6 8</target>
        </trans-unit>
        <trans-unit id="c01232fd7f3f7dfd38909a754e7cc306c6933563" translate="yes" xml:space="preserve">
          <source>With &lt;code&gt;natural&lt;/code&gt; as true, the ordering would be 1 3 6 8 10</source>
          <target state="translated">으로 &lt;code&gt;natural&lt;/code&gt; 참으로, 순서는 것 1 3 6 8 10</target>
        </trans-unit>
        <trans-unit id="d785c50edfc0dbd60d2a64feee379ed34c218574" translate="yes" xml:space="preserve">
          <source>With ES6, it's possible to create functions called &lt;a href=&quot;#further-reading&quot;&gt;tagged template literals&lt;/a&gt; where the function parameters consist of a template literal's strings and expressions.</source>
          <target state="translated">ES6을 사용 하면 함수 매개 변수가 템플리트 리터럴의 문자열 및 표현식으로 구성된 &lt;a href=&quot;#further-reading&quot;&gt;태그가 지정된 템플리트 리터럴&lt;/a&gt; 이라는 함수를 작성할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="a9694d5882ad512e79d20ad557b3c3e2d29bd728" translate="yes" xml:space="preserve">
          <source>With ESLint v3.0.0, we are dropping support for Node.js versions prior to 4. Node.js 0.10 and 0.12 are in &lt;a href=&quot;https://github.com/nodejs/Release&quot;&gt;maintenance mode&lt;/a&gt; and Node.js 4 is the current LTS version. If you are using an older version of Node.js, we recommend upgrading to at least Node.js 4 as soon as possible. If you are unable to upgrade to Node.js 4 or higher, then we recommend continuing to use ESLint v2.x until you are ready to upgrade Node.js.</source>
          <target state="translated">ESLint v3.0.0에서는 4 이전의 Node.js 버전에 대한 지원을 중단하고 있습니다. Node.js 0.10 및 0.12는 &lt;a href=&quot;https://github.com/nodejs/Release&quot;&gt;유지 보수 모드에&lt;/a&gt; 있으며 Node.js 4는 현재 LTS 버전입니다. 이전 버전의 Node.js를 사용하는 경우 가능한 빨리 Node.js 4 이상으로 업그레이드하는 것이 좋습니다. Node.js 4 이상으로 업그레이드 할 수없는 경우 Node.js를 업그레이드 할 준비가 될 때까지 ESLint v2.x를 계속 사용하는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="f738eadf308e98ed8b558385152e0810dbbb0149" translate="yes" xml:space="preserve">
          <source>With JavaScript ES6, a new syntax was added for creating variables from an array index or object property, called &lt;a href=&quot;#further-reading&quot;&gt;destructuring&lt;/a&gt;. This rule enforces usage of destructuring instead of accessing a property through a member expression.</source>
          <target state="translated">JavaScript ES6에서는 &lt;a href=&quot;#further-reading&quot;&gt;destructuring&lt;/a&gt; 이라는 배열 인덱스 또는 객체 속성에서 변수를 만들기위한 새로운 구문이 추가되었습니다 . 이 규칙은 멤버 식을 통해 속성에 액세스하는 대신 파괴 사용을 강제합니다.</target>
        </trans-unit>
        <trans-unit id="57127019f1509597574f983a2678ce6e71f7790d" translate="yes" xml:space="preserve">
          <source>With the &lt;a href=&quot;../rules/no-restricted-syntax&quot;&gt;no-restricted-syntax&lt;/a&gt; rule, you can restrict the usage of particular syntax in your code. For example, you can use the following configuration to disallow using &lt;code&gt;if&lt;/code&gt; statements that do not have block statements as their body:</source>
          <target state="translated">으로 &lt;a href=&quot;../rules/no-restricted-syntax&quot;&gt;노 제한 - 구문&lt;/a&gt; 규칙, 당신은 당신의 코드에서 특정 구문의 사용을 제한 할 수 있습니다. 예를 들어, 다음 구성을 사용하여 블록 문이없는 &lt;code&gt;if&lt;/code&gt; 문을 본문으로 사용하지 못하게 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="a2dbe434ed943c250d0b627de73aaf46b0b6237c" translate="yes" xml:space="preserve">
          <source>With the &lt;code&gt;no-console&lt;/code&gt; rule in the above example, ESLint will report an error. For the above example, you can disable the rule:</source>
          <target state="translated">으로 &lt;code&gt;no-console&lt;/code&gt; 위의 예에서 규칙 ESLint 오류를보고합니다. 위의 예에서 규칙을 비활성화 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2d65fde606f7cac945cb670aeed1ad1a40f85888" translate="yes" xml:space="preserve">
          <source>With the landing of ECMAScript 2018, named capture groups can be used in regular expressions, which can improve their readability.</source>
          <target state="translated">ECMAScript 2018이 시작되면 명명 된 캡처 그룹을 정규식에 사용하여 가독성을 향상시킬 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="14abd5610a4a8c353b6349e67b281b4db7600a4e" translate="yes" xml:space="preserve">
          <source>With this change, any unknown values in a &lt;code&gt;globals&lt;/code&gt; object result in a config validation error.</source>
          <target state="translated">이 변경으로 인해 &lt;code&gt;globals&lt;/code&gt; 개체의 알 수없는 값 으로 인해 구성 유효성 검사 오류가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="0e926cbdcb99b945229437e398eca4b6e42eaa74" translate="yes" xml:space="preserve">
          <source>With this option set to &lt;code&gt;true&lt;/code&gt; the rule is additionally enforced for:</source>
          <target state="translated">이 옵션을 &lt;code&gt;true&lt;/code&gt; 로 설정하면 다음에 대해 규칙이 추가로 적용됩니다.</target>
        </trans-unit>
        <trans-unit id="78d9433fdc1bf9be47875f8ba4596d9dc301fe59" translate="yes" xml:space="preserve">
          <source>With this syntax, it is possible to rename a reference to the same name. This is a completely redundant operation, as this is the same as not renaming at all. For example, this:</source>
          <target state="translated">이 구문을 사용하면 참조 이름을 같은 이름으로 바꿀 수 있습니다. 이름을 바꾸지 않는 것과 동일하기 때문에 이것은 완전히 중복 된 작업입니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="02ca31a1f795ee4542c1b86397f7a5ff221b1d4b" translate="yes" xml:space="preserve">
          <source>With your code ready to go, this is a good time to double-check your submission to make sure it follows our conventions. Here are the things to check:</source>
          <target state="translated">코드를 작성할 준비가 되었으면 제출 한 내용을 다시 확인하여 규칙을 준수하는지 확인하십시오. 확인할 사항은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="601b82919f56b023a6ac2f0d9e03ca91fb600482" translate="yes" xml:space="preserve">
          <source>Wondering if ESLint will work with your favorite editor or build system? This section has a list of all known integrations (submitted by their authors).</source>
          <target state="translated">ESLint가 선호하는 편집기 또는 빌드 시스템에서 작동하는지 궁금하십니까? 이 섹션에는 알려진 모든 통합 (작성자가 제출 한) 목록이 있습니다.</target>
        </trans-unit>
        <trans-unit id="d7a484140f5f9f7f5427e1f2c44dbfc1d3ad9eea" translate="yes" xml:space="preserve">
          <source>Workflow</source>
          <target state="translated">Workflow</target>
        </trans-unit>
        <trans-unit id="4d00e4b5ed7c06a07c082643961ab01179f8644a" translate="yes" xml:space="preserve">
          <source>Working on Issues</source>
          <target state="translated">문제에 대한 작업</target>
        </trans-unit>
        <trans-unit id="65a7fa564bad135bfd859a96e086258daeb6948b" translate="yes" xml:space="preserve">
          <source>Working with Code</source>
          <target state="translated">코드 작업</target>
        </trans-unit>
        <trans-unit id="6f9e3c993bff866f61140b68ae99ae2d931b77df" translate="yes" xml:space="preserve">
          <source>Working with Custom Formatters</source>
          <target state="translated">사용자 정의 포맷터 작업</target>
        </trans-unit>
        <trans-unit id="c03452259ea76fd47e1b6d08c558c054e72b6a09" translate="yes" xml:space="preserve">
          <source>Working with Custom Parsers</source>
          <target state="translated">사용자 정의 파서 작업</target>
        </trans-unit>
        <trans-unit id="df5a94f92bfe3900361a91260e60682f362b48ec" translate="yes" xml:space="preserve">
          <source>Working with Objects</source>
          <target state="translated">객체 작업</target>
        </trans-unit>
        <trans-unit id="f3e4a2517f0ec5774bec9b993d5ea963c9b5fee4" translate="yes" xml:space="preserve">
          <source>Working with Plugins</source>
          <target state="translated">플러그인 작업</target>
        </trans-unit>
        <trans-unit id="745cafc814f736540ab9a9ec69a843464c06b06e" translate="yes" xml:space="preserve">
          <source>Working with Rules</source>
          <target state="translated">규칙 작업</target>
        </trans-unit>
        <trans-unit id="30016dd60046581a591a23d81fed6873d23d1121" translate="yes" xml:space="preserve">
          <source>Wrapper objects</source>
          <target state="translated">래퍼 객체</target>
        </trans-unit>
        <trans-unit id="eef4ac1d5e4171148db0ef1d88a811525a9a8cad" translate="yes" xml:space="preserve">
          <source>Write Several Tests</source>
          <target state="translated">여러 테스트 작성</target>
        </trans-unit>
        <trans-unit id="6a8289d738e0fb6fd95be1b3b78774e9da362118" translate="yes" xml:space="preserve">
          <source>Writing functions within loops tends to result in errors due to the way the function creates a closure around the loop. For example:</source>
          <target state="translated">루프 내에서 함수를 작성하면 함수가 루프 주위에 클로저를 만드는 방식으로 인해 오류가 발생하는 경향이 있습니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="87add0c0035681380218188cbec89bf48229ce52" translate="yes" xml:space="preserve">
          <source>Yoda Conditions</source>
          <target state="translated">요다 조건</target>
        </trans-unit>
        <trans-unit id="4e2d480ae9994b683891b7b7854e1846f4452f37" translate="yes" xml:space="preserve">
          <source>Yoda Notation and Safe Switching</source>
          <target state="translated">요다 표기법 및 안전 스위칭</target>
        </trans-unit>
        <trans-unit id="c9a3b96ff6b13bf38caffa2bb77f3cdbfb82748d" translate="yes" xml:space="preserve">
          <source>Yoda conditions are so named because the literal value of the condition comes first while the variable comes second. For example, the following is a Yoda condition:</source>
          <target state="translated">조건의 리터럴 값이 먼저오고 변수가 두 번째로 오기 때문에 요다 조건은 그렇게 명명됩니다. 예를 들어 다음은 요다 조건입니다.</target>
        </trans-unit>
        <trans-unit id="5bb497f23923badcba527c315a5b086f90879370" translate="yes" xml:space="preserve">
          <source>You can achieve the same result by removing the label and using &lt;code&gt;break&lt;/code&gt; or &lt;code&gt;continue&lt;/code&gt; without a label. Probably those labels would confuse developers because they expect labels to jump to further.</source>
          <target state="translated">레이블을 제거하고 레이블 없이 &lt;code&gt;break&lt;/code&gt; 또는 &lt;code&gt;continue&lt;/code&gt; 을 사용하여 동일한 결과를 얻을 수 있습니다 . 아마도 이러한 레이블은 레이블이 더 나아갈 것으로 기대하기 때문에 개발자를 혼란스럽게 할 것입니다.</target>
        </trans-unit>
        <trans-unit id="25ee73f4f7b7aec2f114aa219eb0d14faae2dfc4" translate="yes" xml:space="preserve">
          <source>You can add exceptions like so:</source>
          <target state="translated">다음과 같이 예외를 추가 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="05559d8f54ee057db7a170c36968d244829fe84f" translate="yes" xml:space="preserve">
          <source>You can also create plugins that would tell ESLint how to process files other than JavaScript. In order to create a processor, the object that is exported from your module has to conform to the following interface:</source>
          <target state="translated">ESLint에 JavaScript 이외의 파일을 처리하는 방법을 알려주는 플러그인을 작성할 수도 있습니다. 프로세서를 만들려면 모듈에서 내 보낸 객체가 다음 인터페이스를 준수해야합니다.</target>
        </trans-unit>
        <trans-unit id="e85547bac3e889dbf55401869266f36d3fdd3a32" translate="yes" xml:space="preserve">
          <source>You can also define separate exceptions and markers for block and line comments. The &lt;code&gt;&quot;block&quot;&lt;/code&gt; object can have an additional key &lt;code&gt;&quot;balanced&quot;&lt;/code&gt;, a boolean that specifies if inline block comments should have balanced spacing. The default value is &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">블록 및 라인 주석에 대해 별도의 예외 및 마커를 정의 할 수도 있습니다. &lt;code&gt;&quot;block&quot;&lt;/code&gt; 개체가 추가 키있을 수 있습니다 &lt;code&gt;&quot;balanced&quot;&lt;/code&gt; , 인라인 블록 주석 균형 간격을해야 지정하면하는 부울. 기본값은 &lt;code&gt;false&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="0a0426d4eedbe98dbbce56f948aa26ba40b6773e" translate="yes" xml:space="preserve">
          <source>You can also disable or enable specific rules for an entire file:</source>
          <target state="translated">전체 파일에 대해 특정 규칙을 비활성화하거나 활성화 할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="4cad74a6b04617064996162fcbf25c1cd2f358b0" translate="yes" xml:space="preserve">
          <source>You can also disable or enable warnings for specific rules:</source>
          <target state="translated">특정 규칙에 대한 경고를 비활성화하거나 활성화 할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="63e369c28798d179460dccac0ab10ec17ec08dd9" translate="yes" xml:space="preserve">
          <source>You can also disable this rule if you are using the &lt;code&gt;&quot;always&quot;&lt;/code&gt; option for the &lt;a href=&quot;arrow-body-style&quot;&gt;&lt;code&gt;arrow-body-style&lt;/code&gt;&lt;/a&gt;, since this will disable the use of implicit returns in arrow functions.</source>
          <target state="translated">&lt;a href=&quot;arrow-body-style&quot;&gt; &lt;code&gt;arrow-body-style&lt;/code&gt; 에&lt;/a&gt; &lt;code&gt;&quot;always&quot;&lt;/code&gt; 옵션을 사용하는 경우 화살표 함수에서 암시 적 리턴을 사용할 수 없으므로이 규칙을 비활성화 할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="66057b1048ae4888b48ffe12dc10028ff6625e53" translate="yes" xml:space="preserve">
          <source>You can also get an instance of the &lt;code&gt;SourceCode&lt;/code&gt; object used inside of &lt;code&gt;linter&lt;/code&gt; by using the &lt;code&gt;getSourceCode()&lt;/code&gt; method:</source>
          <target state="translated">&lt;code&gt;getSourceCode()&lt;/code&gt; 메소드를 사용하여 &lt;code&gt;linter&lt;/code&gt; 내부에서 사용되는 &lt;code&gt;SourceCode&lt;/code&gt; 객체 의 인스턴스를 가져올 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="96caeb8b360405c15efae7c26778a678270acc60" translate="yes" xml:space="preserve">
          <source>You can also omit the &lt;code&gt;eslint-config-&lt;/code&gt; and it will be automatically assumed by ESLint:</source>
          <target state="translated">&lt;code&gt;eslint-config-&lt;/code&gt; 를 생략 해도 ESLint에서 자동으로 가정합니다.</target>
        </trans-unit>
        <trans-unit id="5f8d5e9a37f7691cb68bd5528c2532e0a9c51cbe" translate="yes" xml:space="preserve">
          <source>You can also omit the &lt;code&gt;eslint-config&lt;/code&gt; and it will be automatically assumed by ESLint:</source>
          <target state="translated">&lt;code&gt;eslint-config&lt;/code&gt; 를 생략 해도 ESLint에서 자동으로 가정합니다.</target>
        </trans-unit>
        <trans-unit id="b4735ac5a5e7b458de09eb07b6cdfa3376d84be8" translate="yes" xml:space="preserve">
          <source>You can also pass &lt;code&gt;fix: true&lt;/code&gt; when instantiating the &lt;code&gt;CLIEngine&lt;/code&gt; in order to have it figure out what fixes can be applied.</source>
          <target state="translated">&lt;code&gt;fix: true&lt;/code&gt; 을 전달할 수도 있습니다 . &lt;code&gt;CLIEngine&lt;/code&gt; 을 인스턴스화 할 때 적용 할 수있는 수정 사항을 파악하기 위해 true 입니다.</target>
        </trans-unit>
        <trans-unit id="3caccb62f48d43c846e4712d2c890079f03ab952" translate="yes" xml:space="preserve">
          <source>You can also pass options to the rule (if it accepts them). These arguments are equivalent to how people can configure rules in their &lt;code&gt;.eslintrc&lt;/code&gt; file. For example:</source>
          <target state="translated">옵션을 규칙에 전달할 수도 있습니다 (허용되는 경우). 이 인수는 사람들이 &lt;code&gt;.eslintrc&lt;/code&gt; 파일 에서 규칙을 구성 할 수있는 방법과 동일 합니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="e3b0fc4857f60066843c69b877d56edc2a4b10a7" translate="yes" xml:space="preserve">
          <source>You can also specify &lt;a href=&quot;../developer-guide/selectors&quot;&gt;AST selectors&lt;/a&gt; to restrict, allowing much more precise control over syntax patterns.</source>
          <target state="translated">&lt;a href=&quot;../developer-guide/selectors&quot;&gt;AST 선택기&lt;/a&gt; 를 제한하여 구문 패턴을 훨씬 정확하게 제어 할 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="7f7d3bf4d4850f84343c033961a07313b88fd9e2" translate="yes" xml:space="preserve">
          <source>You can also test your shareable config on your computer before publishing by linking your module globally. Type:</source>
          <target state="translated">모듈을 전체적으로 연결하여 게시하기 전에 컴퓨터에서 공유 가능한 구성을 테스트 할 수도 있습니다. 유형:</target>
        </trans-unit>
        <trans-unit id="9d2e9d075474530e945feab9e83c42a988c32062" translate="yes" xml:space="preserve">
          <source>You can also use a custom formatter from the command line by specifying a path to the custom formatter file.</source>
          <target state="translated">사용자 정의 포맷터 파일의 경로를 지정하여 명령 행에서 사용자 정의 포맷터를 사용할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="cbb077a84452356d24143083766c48897b00276b" translate="yes" xml:space="preserve">
          <source>You can also use a separate option for each type of function. Each of the following options can be set to &lt;code&gt;&quot;always&quot;&lt;/code&gt;, &lt;code&gt;&quot;never&quot;&lt;/code&gt;, or &lt;code&gt;&quot;ignore&quot;&lt;/code&gt;. The default is &lt;code&gt;&quot;always&quot;&lt;/code&gt;.</source>
          <target state="translated">각 기능 유형에 대해 별도의 옵션을 사용할 수도 있습니다. 다음 옵션 각각은 &lt;code&gt;&quot;always&quot;&lt;/code&gt; , &lt;code&gt;&quot;never&quot;&lt;/code&gt; 또는 &lt;code&gt;&quot;ignore&quot;&lt;/code&gt; 로 설정할 수 있습니다 . 기본값은 &lt;code&gt;&quot;always&quot;&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="dfcfa0a36bcea86d98c6565269b246d20e0c02a0" translate="yes" xml:space="preserve">
          <source>You can also use an object option to configure this rule for each type of syntax. Each of the following options can be set to &lt;code&gt;&quot;never&quot;&lt;/code&gt;, &lt;code&gt;&quot;always&quot;&lt;/code&gt;, &lt;code&gt;&quot;always-multiline&quot;&lt;/code&gt;, &lt;code&gt;&quot;only-multiline&quot;&lt;/code&gt;, or &lt;code&gt;&quot;ignore&quot;&lt;/code&gt;. The default for each option is &lt;code&gt;&quot;never&quot;&lt;/code&gt; unless otherwise specified.</source>
          <target state="translated">객체 옵션을 사용하여 각 구문 유형에 대해이 규칙을 구성 할 수도 있습니다. 다음 옵션 각각은 &lt;code&gt;&quot;never&quot;&lt;/code&gt; , &lt;code&gt;&quot;always&quot;&lt;/code&gt; , &lt;code&gt;&quot;always-multiline&quot;&lt;/code&gt; , &lt;code&gt;&quot;only-multiline&quot;&lt;/code&gt; 또는 &lt;code&gt;&quot;ignore&quot;&lt;/code&gt; 로 설정할 수 있습니다 . 별도로 지정하지 않는 한 각 옵션의 기본값은 &lt;code&gt;&quot;never&quot;&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="00180c44650979a8c22f493369d4d2da2df1f46c" translate="yes" xml:space="preserve">
          <source>You can also use placeholders in the message and provide &lt;code&gt;data&lt;/code&gt;:</source>
          <target state="translated">메시지에 자리 표시자를 사용하고 &lt;code&gt;data&lt;/code&gt; 제공 할 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="07f6d61661c3bae2bb89a0721dc25436c9bf11b6" translate="yes" xml:space="preserve">
          <source>You can also use placeholders in the suggestion message. This works the same way as placeholders for the overall error (see &lt;a href=&quot;#using-message-placeholders&quot;&gt;using message placeholders&lt;/a&gt;).</source>
          <target state="translated">제안 메시지에 자리 표시자를 사용할 수도 있습니다. 이것은 전체 오류에 대한 자리 표시 자와 동일한 방식으로 작동합니다 ( &lt;a href=&quot;#using-message-placeholders&quot;&gt;메시지 자리 표시 자 사용&lt;/a&gt; 참조 ).</target>
        </trans-unit>
        <trans-unit id="ca605e61057943ccd5955606dcd19f50dde745ad" translate="yes" xml:space="preserve">
          <source>You can also use your &lt;code&gt;.gitignore&lt;/code&gt; file:</source>
          <target state="translated">&lt;code&gt;.gitignore&lt;/code&gt; 파일을 사용할 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="ea7c0da956d7ace90e4f070c16cc82b3ced8c773" translate="yes" xml:space="preserve">
          <source>You can bundle configurations inside a plugin by specifying them under the &lt;code&gt;configs&lt;/code&gt; key. This can be useful when you want to provide not just code style, but also some custom rules to support it. Multiple configurations are supported per plugin. Note that it is not possible to specify a default configuration for a given plugin and that users must specify in their configuration file when they want to use one.</source>
          <target state="translated">&lt;code&gt;configs&lt;/code&gt; 키 에서 구성 을 지정하여 플러그인 내부에 구성을 번들 할 수 있습니다 . 이는 코드 스타일뿐만 아니라이를 지원하는 일부 사용자 지정 규칙을 제공하려는 경우에 유용 할 수 있습니다. 플러그인 당 여러 구성이 지원됩니다. 지정된 플러그인에 대한 기본 구성을 지정할 수 없으며 사용자가 구성 파일을 사용하려면 구성 파일에서 지정해야합니다.</target>
        </trans-unit>
        <trans-unit id="408d1e4c59ead333aa0e90a633c7cf6ab20ad2a3" translate="yes" xml:space="preserve">
          <source>You can call &lt;code&gt;verify()&lt;/code&gt; like this:</source>
          <target state="translated">다음 과 같이 &lt;code&gt;verify()&lt;/code&gt; 호출 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="3b414e60e62c83576ea85df58a75b414de4118fa" translate="yes" xml:space="preserve">
          <source>You can configure the rule as follows:</source>
          <target state="translated">다음과 같이 규칙을 구성 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="18a6a1e13449438deafc1f1f8cde716e1e37be44" translate="yes" xml:space="preserve">
          <source>You can enable these to be recognized as valid by setting the ECMAScript version to 6 in your &lt;a href=&quot;../user-guide/configuring&quot;&gt;ESLint configuration&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../user-guide/configuring&quot;&gt;ESLint 구성&lt;/a&gt; 에서 ECMAScript 버전을 6으로 설정하여 이것을 유효한 것으로 인식 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="72aad09087aa74acfb57b320084e2006a3465324" translate="yes" xml:space="preserve">
          <source>You can find a curated list of other popular integrations for ESLint in the &lt;a href=&quot;https://github.com/dustinspecker/awesome-eslint&quot;&gt;awesome-eslint&lt;/a&gt; GitHub repository.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/dustinspecker/awesome-eslint&quot;&gt;굉장히 기발한&lt;/a&gt; GitHub 리포지토리 에서 ESLint에 널리 사용되는 다른 통합 목록을 찾을 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="128a17e7087d8af10d63295faa62f42a110c524d" translate="yes" xml:space="preserve">
          <source>You can find an ESLint parser project &lt;a href=&quot;https://github.com/typescript-eslint/typescript-eslint&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">ESLint 파서 프로젝트는 &lt;a href=&quot;https://github.com/typescript-eslint/typescript-eslint&quot;&gt;여기에서&lt;/a&gt; 찾을 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="e0fad5513072db99ca70ae9120e4f7cc680583bc" translate="yes" xml:space="preserve">
          <source>You can get a reference to the &lt;code&gt;CLIEngine&lt;/code&gt; by doing the following:</source>
          <target state="translated">다음을 수행하여 &lt;code&gt;CLIEngine&lt;/code&gt; 에 대한 참조를 얻을 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="a518ae0ab65de37988407b5cfdcab7978b5b018a" translate="yes" xml:space="preserve">
          <source>You can get the equivalent behavior using this:</source>
          <target state="translated">다음을 사용하여 동등한 동작을 얻을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="25dd9e809cd682cff1a45b78dc393e334b8526b6" translate="yes" xml:space="preserve">
          <source>You can have both rules and processors in a single plugin. You can also have multiple processors in one plugin. To support multiple extensions, add each one to the &lt;code&gt;processors&lt;/code&gt; element and point them to the same object.</source>
          <target state="translated">단일 플러그인에 규칙과 프로세서를 둘 다 가질 수 있습니다. 하나의 플러그인에 여러 프로세서를 가질 수도 있습니다. 여러 확장을 지원하려면 각 확장을 &lt;code&gt;processors&lt;/code&gt; 요소에 추가 하고 동일한 객체를 가리 킵니다.</target>
        </trans-unit>
        <trans-unit id="3087edac471b3d5f8c40edc6d268bfad6c719717" translate="yes" xml:space="preserve">
          <source>You can immediately invoke function expressions, but not function declarations. A common technique to create an immediately-invoked function expression (IIFE) is to wrap a function declaration in parentheses. The opening parentheses causes the contained function to be parsed as an expression, rather than a declaration.</source>
          <target state="translated">함수 표현식을 즉시 호출 할 수 있지만 함수 선언은 호출 할 수 없습니다. IIFE (즉시 호출 함수 식)를 만드는 일반적인 기술은 함수 선언을 괄호로 묶는 것입니다. 여는 괄호로 인해 포함 된 함수가 선언이 아닌 표현식으로 구문 분석됩니다.</target>
        </trans-unit>
        <trans-unit id="9f3710ed0dc294fabe45a9230f72b331a70b348e" translate="yes" xml:space="preserve">
          <source>You can include multiple entries in the &lt;code&gt;&quot;exceptions&quot;&lt;/code&gt; array.</source>
          <target state="translated">&lt;code&gt;&quot;exceptions&quot;&lt;/code&gt; 배열 에 여러 항목을 포함 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="ee4f68234e6782bfe1c2177877e83c99c98f1f86" translate="yes" xml:space="preserve">
          <source>You can install ESLint using npm or yarn:</source>
          <target state="translated">npm 또는 yarn을 사용하여 ESLint를 설치할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="400cefc46404dba2c122576520dc9f4dffbc3998" translate="yes" xml:space="preserve">
          <source>You can override settings from the shareable config by adding them directly into your &lt;code&gt;.eslintrc&lt;/code&gt; file.</source>
          <target state="translated">공유 가능한 구성의 설정을 &lt;code&gt;.eslintrc&lt;/code&gt; 파일에 직접 추가하여 재정의 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="a1834766c7b7a5dcbd68859d50ddf1bda2811056" translate="yes" xml:space="preserve">
          <source>You can pass filesystem-style or glob patterns to ESLint and have it function properly. In order to achieve this, ESLint must resolve non-glob patterns into glob patterns before determining which files to execute on. The &lt;code&gt;resolveFileGlobPatterns()&lt;/code&gt; methods uses the current settings from &lt;code&gt;CLIEngine&lt;/code&gt; to resolve non-glob patterns into glob patterns. Pass an array of patterns that might be passed to the ESLint CLI and it will return an array of glob patterns that mean the same thing. Here's an example:</source>
          <target state="translated">파일 시스템 스타일 또는 glob 패턴을 ESLint에 전달하여 올바르게 작동시킬 수 있습니다. 이를 위해 ESLint는 실행할 파일을 결정하기 전에 비 글로브 패턴을 글로브 패턴으로 해석해야합니다. &lt;code&gt;resolveFileGlobPatterns()&lt;/code&gt; 메소드에서 현재 설정 사용 &lt;code&gt;CLIEngine&lt;/code&gt; 글로브 패턴으로 해결이 아닌 글로브 패턴에 있습니다. ESLint CLI에 전달 될 수있는 패턴 배열을 전달하면 동일한 것을 의미하는 glob 패턴 배열을 반환합니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="4905fdb9e87e9acb50e45f34d282a23c555e6a58" translate="yes" xml:space="preserve">
          <source>You can safely disable this rule if you do not care about enforcing consistent spacing between spread operators and their expressions.</source>
          <target state="translated">스프레드 연산자와 표현식 사이에 일정한 간격을 유지하는 데 신경 쓰지 않으면이 규칙을 안전하게 비활성화 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="73277d06b6ef13537e20c60df84883a999f6bbd8" translate="yes" xml:space="preserve">
          <source>You can safely disable this rule if you do not care about redundantly renaming import, export, and destructuring assignments.</source>
          <target state="translated">할당의 가져 오기, 내보내기 및 구조를 중복 변경하지 않아도되는 경우이 규칙을 안전하게 비활성화 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a60662574d47b5098f2ada55e6698ddf42cfc637" translate="yes" xml:space="preserve">
          <source>You can safely disable this rule if you do not have any strict conventions about whether or not directive prologues should have blank newlines before or after them.</source>
          <target state="translated">지시 프롤로그에 빈 줄 바꾸기가 있어야하는지 여부에 대한 엄격한 규칙이없는 경우이 규칙을 안전하게 비활성화 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="88af5ad155c22cbf7e07de392c29e5dad5964df5" translate="yes" xml:space="preserve">
          <source>You can safely disable this rule if you do not have any strict conventions about whether the operands of a ternary expression should be separated by newlines.</source>
          <target state="translated">삼항 표현식의 피연산자를 개행으로 구분해야하는지에 대한 엄격한 규칙이없는 경우이 규칙을 안전하게 비활성화 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="45180d1576e97232b2878b7e48300aa6419f4b8d" translate="yes" xml:space="preserve">
          <source>You can safely disable this rule if you do not have any strict conventions about whitespace before &lt;code&gt;return&lt;/code&gt; statements.</source>
          <target state="translated">&lt;code&gt;return&lt;/code&gt; 문 앞에 공백에 대한 엄격한 규칙이없는 경우이 규칙을 안전하게 비활성화 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="bfce14f8c899bcdd1e24f2f0b6601c19c38ed3b4" translate="yes" xml:space="preserve">
          <source>You can set the option in configuration like this:</source>
          <target state="translated">다음과 같이 구성에서 옵션을 설정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="14d70a05f0792c4a1ae4eaccddd4a37dbcf08531" translate="yes" xml:space="preserve">
          <source>You can set the style in configuration like this:</source>
          <target state="translated">다음과 같이 구성에서 스타일을 설정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d3a95ecc1d2ecda1203dd4ccc205cb90ab915cb0" translate="yes" xml:space="preserve">
          <source>You can specify a formatter using the &lt;code&gt;--format&lt;/code&gt; or &lt;code&gt;-f&lt;/code&gt; flag on the command line. For example, &lt;code&gt;--format codeframe&lt;/code&gt; uses the &lt;code&gt;codeframe&lt;/code&gt; formatter.</source>
          <target state="translated">명령 행 에서 &lt;code&gt;--format&lt;/code&gt; 또는 &lt;code&gt;-f&lt;/code&gt; 플래그를 사용하여 포맷터를 지정할 수 있습니다 . 예를 들어 &lt;code&gt;--format codeframe&lt;/code&gt; 은 &lt;code&gt;codeframe&lt;/code&gt; formatter를 사용합니다 .</target>
        </trans-unit>
        <trans-unit id="8c1f98ff8ebca28044ac67f7746aada07ad69565" translate="yes" xml:space="preserve">
          <source>You can specify different options for object literals, destructuring assignments, and named imports and exports:</source>
          <target state="translated">객체 리터럴, 할당 제거 및 명명 된 가져 오기 및 내보내기에 대해 다른 옵션을 지정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a7acef2ac1d2ee21d2e9b97981ca6660fa931bd0" translate="yes" xml:space="preserve">
          <source>You can specify one or more fix type on the command line. Here are some examples:</source>
          <target state="translated">명령 행에서 하나 이상의 수정 유형을 지정할 수 있습니다. 여기 몇 가지 예가 있어요.</target>
        </trans-unit>
        <trans-unit id="d8a66e3fbef03fc85ec06fb6eb87efdfac3ef227" translate="yes" xml:space="preserve">
          <source>You can tell ESLint to ignore specific files and directories by &lt;code&gt;ignorePatterns&lt;/code&gt; in your config files. Each value of &lt;code&gt;ignorePatterns&lt;/code&gt; is the same pattern as each line of &lt;code&gt;.eslintignore&lt;/code&gt; in the next section.</source>
          <target state="translated">구성 파일에서 &lt;code&gt;ignorePatterns&lt;/code&gt; 를 사용하여 ESLint에 특정 파일 및 디렉토리를 무시하도록 지시 할 수 있습니다 . &lt;code&gt;ignorePatterns&lt;/code&gt; 의 각 값은 다음 섹션에서 &lt;code&gt;.eslintignore&lt;/code&gt; 의 각 줄과 동일한 패턴 입니다.</target>
        </trans-unit>
        <trans-unit id="69eb6bace36d44d59da15e050f9d46b501ef2cde" translate="yes" xml:space="preserve">
          <source>You can tell ESLint to ignore specific files and directories by creating an &lt;code&gt;.eslintignore&lt;/code&gt; file in your project's root directory. The &lt;code&gt;.eslintignore&lt;/code&gt; file is a plain text file where each line is a glob pattern indicating which paths should be omitted from linting. For example, the following will omit all JavaScript files:</source>
          <target state="translated">프로젝트의 루트 디렉토리에 &lt;code&gt;.eslintignore&lt;/code&gt; 파일 을 작성하여 특정 파일 및 디렉토리를 무시하도록 ESLint에 지시 할 수 있습니다 . &lt;code&gt;.eslintignore&lt;/code&gt; 의 파일은 각각의 라인은 경로를 linting 생략되어야 하는지를 나타내는 글롭 패턴 인 일반 텍스트 파일이다. 예를 들어, 다음은 모든 JavaScript 파일을 생략합니다.</target>
        </trans-unit>
        <trans-unit id="07a5b92964320f755eb8b343a5549ac125d601ec" translate="yes" xml:space="preserve">
          <source>You can turn this rule off if you are confident that you will not accidentally introduce code like this.</source>
          <target state="translated">실수로 이와 같은 코드를 도입하지 않을 것으로 확신하는 경우이 규칙을 해제 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c1dabd948f8fc4368d9a096a0496588f5e9d7ac5" translate="yes" xml:space="preserve">
          <source>You can turn this rule off if you are happy for identifiers to be named freely.</source>
          <target state="translated">식별자의 이름을 자유롭게 지정하려면이 규칙을 해제 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ead51fe7eca0624058e9dd30d153690a5cfe5ef3" translate="yes" xml:space="preserve">
          <source>You can turn this rule off if you are not concerned with dangling commas.</source>
          <target state="translated">매달려있는 쉼표에 관심이없는 경우이 규칙을 해제 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="021a3d44e41aea17de61c2b2f39f3400f8007e26" translate="yes" xml:space="preserve">
          <source>You can turn this rule off if you are not concerned with the consistency of computed properties.</source>
          <target state="translated">계산 된 속성의 일관성에 관심이없는 경우이 규칙을 해제 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d1be2a0d6f7c962401db849d346008a44316bd07" translate="yes" xml:space="preserve">
          <source>You can turn this rule off if you are not concerned with the consistency of newlines before or after dots in member expressions.</source>
          <target state="translated">멤버 표현식에서 점 앞뒤에 줄 바꿈이 일관성이없는 경우이 규칙을 해제 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e83bc519032a6c2561f0d69d78c81eb51dab4ba4" translate="yes" xml:space="preserve">
          <source>You can turn this rule off if you are not concerned with the consistency of padding within blocks.</source>
          <target state="translated">블록 내 패딩 일관성에 관심이없는 경우이 규칙을 해제 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f0fee24285a9d479b0faa988ca701accb7f9e6f9" translate="yes" xml:space="preserve">
          <source>You can turn this rule off if you are not concerned with the consistency of spacing around infix operators.</source>
          <target state="translated">중위 연산자 주위의 간격 일관성에 관심이없는 경우이 규칙을 해제 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="46686a370899f52511887376b8a8af6f183f14d9" translate="yes" xml:space="preserve">
          <source>You can turn this rule off if you are not concerned with the consistency of spacing before blocks.</source>
          <target state="translated">블록 앞 간격의 일관성에 관심이없는 경우이 규칙을 해제 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="0cf5555ae8efd9cae7ca24601209d126bebf1c8d" translate="yes" xml:space="preserve">
          <source>You can turn this rule off if you are not concerned with the consistency of spacing before function parenthesis.</source>
          <target state="translated">함수 괄호 앞의 간격 일관성에 관심이없는 경우이 규칙을 해제 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="0c7ff0cc042575d1c3fe4a38fc882b384a792d7f" translate="yes" xml:space="preserve">
          <source>You can turn this rule off if you are not concerned with the consistency of spacing before or after semicolons.</source>
          <target state="translated">세미콜론 전후 간격의 일관성에 관심이없는 경우이 규칙을 해제 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="8ef79e010842921d6c0299b016b7b8187a59caa1" translate="yes" xml:space="preserve">
          <source>You can turn this rule off if you are not concerned with the consistency of spacing between array brackets.</source>
          <target state="translated">배열 괄호 사이의 간격 일관성에 관심이없는 경우이 규칙을 해제 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ae458600c4bf1541d70861fbf0c0093b0bffdb19" translate="yes" xml:space="preserve">
          <source>You can turn this rule off if you are not concerned with the consistency of spacing between brackets.</source>
          <target state="translated">대괄호 사이의 간격 일관성에 관심이없는 경우이 규칙을 해제 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b40ead7591a9d50bce86580342b6880495cb3d7d" translate="yes" xml:space="preserve">
          <source>You can turn this rule off if you are not concerned with the consistency of spacing between curly braces.</source>
          <target state="translated">중괄호 사이의 간격 일관성에 관심이없는 경우이 규칙을 해제 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="399911252d973444bfdd825e343ccf5b7f4fb13b" translate="yes" xml:space="preserve">
          <source>You can turn this rule off if you are not concerned with the consistency of spacing between parentheses.</source>
          <target state="translated">괄호 사이의 간격 일관성에 관심이없는 경우이 규칙을 해제 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="90db7f006b14b682efb99423e5e1f4b015b39c4a" translate="yes" xml:space="preserve">
          <source>You can turn this rule off if you are not concerned with the number of lines in your files.</source>
          <target state="translated">파일의 줄 수에 관심이없는 경우이 규칙을 해제 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="61f7943a7b36f0c9848cc344cf7beb7998fde107" translate="yes" xml:space="preserve">
          <source>You can turn this rule off if you are not concerned with the number of lines in your functions.</source>
          <target state="translated">함수의 줄 수에 관심이없는 경우이 규칙을 해제 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a80d6d17e9e0b7342253388cfca93c129e901873" translate="yes" xml:space="preserve">
          <source>You can turn this rule off if you are not concerned with the number of statements on each line.</source>
          <target state="translated">각 줄의 문장 수에 관심이없는 경우이 규칙을 해제 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="8cb2dfaaf52dcf5ab2a3865e1f1b53ee031efdc6" translate="yes" xml:space="preserve">
          <source>You can turn this rule off if you are not concerned with the simultaneous presence of setters and getters on objects.</source>
          <target state="translated">객체에 세터와 게터가 동시에 존재하는 것에 관심이없는 경우이 규칙을 해제 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c05ae4dd2004cda1d398dfd43981731a1d09efdc" translate="yes" xml:space="preserve">
          <source>You can turn this rule off if you are not concerned with unnecessary complexity in conditional expressions.</source>
          <target state="translated">조건식의 불필요한 복잡성이 걱정되지 않으면이 규칙을 해제 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e320636ccf27498a9b0e15597d84be4b5b8aa7fa" translate="yes" xml:space="preserve">
          <source>You can turn this rule off if you don&amp;rsquo;t use JSX or if you aren&amp;rsquo;t concerned with a consistent usage of quotes within JSX attributes.</source>
          <target state="translated">JSX를 사용하지 않거나 JSX 속성 내에서 일관된 따옴표 사용에 관심이없는 경우이 규칙을 해제 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="540472f7a9a56c6d9f25b9bbcb2abb0d340d1318" translate="yes" xml:space="preserve">
          <source>You can turn this rule off if you don't want to check RegExp character class syntax for multiple code point characters.</source>
          <target state="translated">여러 코드 포인트 문자에 대해 RegExp 문자 클래스 구문을 확인하지 않으려는 경우이 규칙을 해제 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e526062590775afa54b322407fb8936f5dd5cb2e" translate="yes" xml:space="preserve">
          <source>You can turn this rule off if you want to decide, case-by-case, whether to place property specifications on separate lines.</source>
          <target state="translated">속성 사양을 별도의 줄에 배치할지 여부를 사례별로 결정하려는 경우이 규칙을 해제 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="4795aed3116d450fce0dc286a41a09ef1d5f6de7" translate="yes" xml:space="preserve">
          <source>You can use another configuration that forces brace-less &lt;code&gt;if&lt;/code&gt;, &lt;code&gt;else if&lt;/code&gt;, &lt;code&gt;else&lt;/code&gt;, &lt;code&gt;for&lt;/code&gt;, &lt;code&gt;while&lt;/code&gt;, or &lt;code&gt;do&lt;/code&gt; if their body contains only one single-line statement. And forces braces in all other cases.</source>
          <target state="translated">&lt;code&gt;if&lt;/code&gt; , &lt;code&gt;else if&lt;/code&gt; , &lt;code&gt;else&lt;/code&gt; , &lt;code&gt;for&lt;/code&gt; , &lt;code&gt;while&lt;/code&gt; , 또는 본문에 한 줄짜리 문장 만 포함 된 경우 &lt;code&gt;do&lt;/code&gt; 하는 다른 구성을 사용할 수 있습니다 . 그리고 다른 모든 경우에는 중괄호를 강제합니다.</target>
        </trans-unit>
        <trans-unit id="0146f67de208ee83bb0e815d8eef8352a361a32b" translate="yes" xml:space="preserve">
          <source>You can use the &lt;code&gt;await&lt;/code&gt; operator inside of them.</source>
          <target state="translated">그 안에 &lt;code&gt;await&lt;/code&gt; 연산자를 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="dbf284ce3fc55bebb6f1aa6cfcfc6c24c2bf52e0" translate="yes" xml:space="preserve">
          <source>You can use this option if you want to prevent &lt;code&gt;typeof&lt;/code&gt; check on a variable which has not been declared.</source>
          <target state="translated">당신이 못하게하려는 경우이 옵션을 사용할 수 있습니다 &lt;code&gt;typeof&lt;/code&gt; 선언되지 않은 변수에 대한 확인.</target>
        </trans-unit>
        <trans-unit id="06188ee2bfe6d51c262fcb1ba3685af654f7ebbb" translate="yes" xml:space="preserve">
          <source>You cannot write &lt;code&gt;ignorePatterns&lt;/code&gt; property under &lt;code&gt;overrides&lt;/code&gt; property.</source>
          <target state="translated">&lt;code&gt;overrides&lt;/code&gt; 속성 아래에서 &lt;code&gt;ignorePatterns&lt;/code&gt; 속성을 쓸 수 없습니다 .</target>
        </trans-unit>
        <trans-unit id="093a1b6237db2060f03c41f895c893ee618b7668" translate="yes" xml:space="preserve">
          <source>You have some familiarity with Node.js, since ESLint runs on it.</source>
          <target state="translated">ESLint가 실행되므로 Node.js에 익숙합니다.</target>
        </trans-unit>
        <trans-unit id="80b9f29a995b6eb8ea91dfae43ee0a03ed99afbc" translate="yes" xml:space="preserve">
          <source>You know JavaScript, since ESLint is written in JavaScript.</source>
          <target state="translated">ESLint는 JavaScript로 작성되므로 JavaScript를 알고 있습니다.</target>
        </trans-unit>
        <trans-unit id="652daac85134f276e18c101e62292a46d35fc8b2" translate="yes" xml:space="preserve">
          <source>You may also specify a custom message for any paths you want to restrict as follows:</source>
          <target state="translated">다음과 같이 제한하려는 경로에 대한 사용자 정의 메시지를 지정할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="bfae34672f58cf174038fc89acc4f2786020643d" translate="yes" xml:space="preserve">
          <source>You may want to disable this rule when working with polyfills that try to patch older versions of JavaScript with the latest spec, such as those that might &lt;code&gt;Function.prototype.bind&lt;/code&gt; or &lt;code&gt;Array.prototype.forEach&lt;/code&gt; in a future-friendly way.</source>
          <target state="translated">미래의 친화적 인 방식으로 &lt;code&gt;Function.prototype.bind&lt;/code&gt; 또는 &lt;code&gt;Array.prototype.forEach&lt;/code&gt; 와 같은 최신 사양으로 이전 버전의 JavaScript를 패치하려고 시도하는 폴리 필로 작업 할 때이 규칙을 사용하지 않을 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="3ba039299af66f99c5cc429e70125b8732d098e1" translate="yes" xml:space="preserve">
          <source>You may want to turn this rule off if you will be using the &lt;code&gt;typeof&lt;/code&gt; operator on host objects.</source>
          <target state="translated">호스트 객체 에서 &lt;code&gt;typeof&lt;/code&gt; 연산자를 사용하려는 경우이 규칙을 해제 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="15d203ff88af08286d8cd15ae37ea009db758bab" translate="yes" xml:space="preserve">
          <source>You may want to turn this rule off if your code only touches objects with hardcoded keys, and you will never use an object that shadows an &lt;code&gt;Object.prototype&lt;/code&gt; method or which does not inherit from &lt;code&gt;Object.prototype&lt;/code&gt;.</source>
          <target state="translated">코드가 하드 코드 된 키가있는 객체에만 닿는 경우이 규칙을 해제 할 수 있으며 &lt;code&gt;Object.prototype&lt;/code&gt; 메서드를 숨기 거나 &lt;code&gt;Object.prototype&lt;/code&gt; 에서 상속되지 않은 객체는 사용 하지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="4669f66f3521a01d86f8e31089066032740f6fa2" translate="yes" xml:space="preserve">
          <source>You might enable all core rules as a shortcut to explore rules and options while you decide on the configuration for a project, especially if you rarely override options or disable rules. The default options for rules are not endorsements by ESLint (for example, the default option for the &lt;code&gt;quotes&lt;/code&gt; rule does not mean double quotes are better than single quotes).</source>
          <target state="translated">특히 옵션을 무시하거나 규칙을 거의 사용하지 않는 경우 프로젝트의 구성을 결정하는 동안 규칙 및 옵션을 탐색하는 바로 가기로 모든 핵심 규칙을 사용하도록 설정할 수 있습니다. 규칙의 기본 옵션은 ESLint의 보증이 아닙니다 (예 : &lt;code&gt;quotes&lt;/code&gt; 규칙 의 기본 옵션 은 큰 따옴표가 작은 따옴표보다 낫다는 의미는 아닙니다).</target>
        </trans-unit>
        <trans-unit id="984241dec3622d0778147047b3477fa1a80f7e56" translate="yes" xml:space="preserve">
          <source>You might find that there are merge conflicts when you attempt to rebase. Please &lt;a href=&quot;https://help.github.com/articles/resolving-merge-conflicts-after-a-git-rebase/&quot;&gt;resolve the conflicts&lt;/a&gt; and then do a forced push to your branch:</source>
          <target state="translated">리베이스하려고 할 때 병합 충돌이 있음을 알 수 있습니다. 제발 &lt;a href=&quot;https://help.github.com/articles/resolving-merge-conflicts-after-a-git-rebase/&quot;&gt;충돌을 해결&lt;/a&gt; 한 다음 지점에 강제로 밀어 넣기를 수행합니다</target>
        </trans-unit>
        <trans-unit id="05ec3e7a8155497c8ad786de4a91268cfe7e70bf" translate="yes" xml:space="preserve">
          <source>You might want to turn this rule off if you need to support legacy browsers which implement the &lt;code&gt;__proto__&lt;/code&gt; property but not &lt;code&gt;Object.getPrototypeOf&lt;/code&gt; or &lt;code&gt;Object.setPrototypeOf&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Object.getPrototypeOf&lt;/code&gt; 또는 &lt;code&gt;Object.setPrototypeOf&lt;/code&gt; 가 아닌 &lt;code&gt;__proto__&lt;/code&gt; 속성 을 구현하는 레거시 브라우저를 지원해야하는 경우이 규칙을 해제 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="41fc90cad0a71474be447e87ea4f5e2b7e8a9997" translate="yes" xml:space="preserve">
          <source>You must be connected to the Internet for this step to work. You'll see a lot of utilities being downloaded.</source>
          <target state="translated">이 단계가 작동하려면 인터넷에 연결되어 있어야합니다. 많은 유틸리티가 다운로드되는 것을 볼 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="9534af2849af88e43ed713b6727a35ec550aff58" translate="yes" xml:space="preserve">
          <source>You should declare your dependency on ESLint in &lt;code&gt;package.json&lt;/code&gt; using the &lt;a href=&quot;https://docs.npmjs.com/files/package.json#peerdependencies&quot;&gt;peerDependencies&lt;/a&gt; field. The recommended way to declare a dependency for future proof compatibility is with the &quot;&amp;gt;=&quot; range syntax, using the lowest required ESLint version. For example:</source>
          <target state="translated">&lt;a href=&quot;https://docs.npmjs.com/files/package.json#peerdependencies&quot;&gt;peerDependencies&lt;/a&gt; 필드를 사용하여 &lt;code&gt;package.json&lt;/code&gt; 에서 ESLint에 대한 종속성을 선언해야 합니다. 향후 증명 호환성을 위해 종속성을 선언하는 데 권장되는 방법은 가장 낮은 필수 ESLint 버전을 사용하여 &quot;&amp;gt; =&quot;범위 구문을 사용하는 것입니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="51cb4594f2086cdab814a1c9924b44c659ac4a30" translate="yes" xml:space="preserve">
          <source>You should do all of your development for the issue in this branch.</source>
          <target state="translated">이 지점의 문제에 대한 모든 개발을 수행해야합니다.</target>
        </trans-unit>
        <trans-unit id="28392df2557372b68ec7a977a5ef1e0831ad8895" translate="yes" xml:space="preserve">
          <source>You should start to see profiles for each run show up on the left side. If not, reload the page in the browser. Once all three profiles have completed, they will be available for inspection.</source>
          <target state="translated">각 런에 대한 프로파일이 왼쪽에 표시되기 시작해야합니다. 그렇지 않으면 브라우저에서 페이지를 다시로드하십시오. 세 개의 프로파일이 모두 완료되면 검사 할 수있게됩니다.</target>
        </trans-unit>
        <trans-unit id="236183c3c8f4123b70a42d215a4e2d52aacc1e08" translate="yes" xml:space="preserve">
          <source>You should then set up a configuration file:</source>
          <target state="translated">그런 다음 구성 파일을 설정해야합니다.</target>
        </trans-unit>
        <trans-unit id="640e3495295985ec29e96039f4eb1fd96e8e956a" translate="yes" xml:space="preserve">
          <source>You should use ECMAScript 6 iterators and generators instead.</source>
          <target state="translated">대신 ECMAScript 6 반복자와 생성기를 사용해야합니다.</target>
        </trans-unit>
        <trans-unit id="876adab9c57c28cfde5d73f7e924b6df72e25bf9" translate="yes" xml:space="preserve">
          <source>You should use a &lt;code&gt;SourceCode&lt;/code&gt; object whenever you need to get more information about the code being linted.</source>
          <target state="translated">보풀이있는 코드에 대한 자세한 정보가 필요할 때마다 &lt;code&gt;SourceCode&lt;/code&gt; 객체를 사용해야합니다 .</target>
        </trans-unit>
        <trans-unit id="4b67bebf6e83b9fc66b88ddf16726e4b0f92b58f" translate="yes" xml:space="preserve">
          <source>You should use one variable declaration for each variable you want to define.</source>
          <target state="translated">정의하려는 각 변수마다 하나의 변수 선언을 사용해야합니다.</target>
        </trans-unit>
        <trans-unit id="c44b71cc380e7464a953d3c6638501798e65849b" translate="yes" xml:space="preserve">
          <source>You understand unit tests and why they're important.</source>
          <target state="translated">단위 테스트와 왜 중요한지 이해합니다.</target>
        </trans-unit>
        <trans-unit id="f6fd99da694f8007d38abe30c71a8123ccc8a7ac" translate="yes" xml:space="preserve">
          <source>You want to use a non-identifier character in your property name, such as having a property with a space like &lt;code&gt;&quot;one two&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&quot;one two&quot;&lt;/code&gt; 와 같이 공백이있는 속성을 갖는 등 속성 이름에 식별자가 아닌 문자를 사용하려고합니다 .</target>
        </trans-unit>
        <trans-unit id="47471750817e30e32a10965f489650441c6575f2" translate="yes" xml:space="preserve">
          <source>You would run ESLint with this custom formatter and an environment variable set like this:</source>
          <target state="translated">이 사용자 정의 포맷터와 다음과 같이 환경 변수 세트를 사용하여 ESLint를 실행합니다.</target>
        </trans-unit>
        <trans-unit id="f4ad0fd583bd41cba03bd42f58f00e34a132498c" translate="yes" xml:space="preserve">
          <source>You'll be guided through a series of questions that will help you setup a basic configuration file to get you started.</source>
          <target state="translated">시작하기 위해 기본 구성 파일을 설정하는 데 도움이되는 일련의 질문을 안내합니다.</target>
        </trans-unit>
        <trans-unit id="9e61ed45590a5941ca638fc88271a7996f36df5a" translate="yes" xml:space="preserve">
          <source>You'll see this warning:</source>
          <target state="translated">이 경고가 나타납니다.</target>
        </trans-unit>
        <trans-unit id="ebf3fe8d9984f4669b4afb378d1d84dc239cf4f9" translate="yes" xml:space="preserve">
          <source>You're comfortable with command-line programs.</source>
          <target state="translated">명령 줄 프로그램에 익숙합니다.</target>
        </trans-unit>
        <trans-unit id="2f27029694e3d0a33c85b86f37c53f1f3fc4b2f4" translate="yes" xml:space="preserve">
          <source>You're finally ready to start working with rules. You may want to fix an existing rule or create a new one. This section explains how to do all of that.</source>
          <target state="translated">이제 규칙 작업을 시작할 준비가되었습니다. 기존 규칙을 수정하거나 새로 만들 수 있습니다. 이 섹션에서는 모든 작업을 수행하는 방법에 대해 설명합니다.</target>
        </trans-unit>
        <trans-unit id="b1370565ce49671150ada1e444ee84d0daa4c0d8" translate="yes" xml:space="preserve">
          <source>You've developed library-specific rules for ESLint and you want to share it with the community. You can publish an ESLint plugin on npm.</source>
          <target state="translated">ESLint에 대한 라이브러리 별 규칙을 개발했으며이를 커뮤니티와 공유하려고합니다. npm에 ESLint 플러그인을 게시 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="548972322e94bfb37e9b54b22fc8a86d696aec1f" translate="yes" xml:space="preserve">
          <source>Your &lt;code&gt;.eslintrc&lt;/code&gt; configuration file will also include the line:</source>
          <target state="translated">귀하의 &lt;code&gt;.eslintrc&lt;/code&gt; 의 구성 파일에는 줄을 포함합니다 :</target>
        </trans-unit>
        <trans-unit id="1d5d3e3b727a925611fde953c5cbcebdd85c46e1" translate="yes" xml:space="preserve">
          <source>Your browser should automatically open to the page in question. When that happens:</source>
          <target state="translated">브라우저가 해당 페이지를 자동으로 열어야합니다. 그럴 때 :</target>
        </trans-unit>
        <trans-unit id="ac122a235c4680c4dec5f8f339eaf95ba42f4ed4" translate="yes" xml:space="preserve">
          <source>Your take on the correct solution to problem.</source>
          <target state="translated">문제에 대한 올바른 해결책을 찾으십시오.</target>
        </trans-unit>
        <trans-unit id="ae9e6b60887f5d03432cb8ece2fe287bb9d89878" translate="yes" xml:space="preserve">
          <source>Zero Width Space</source>
          <target state="translated">제로 폭 공간</target>
        </trans-unit>
        <trans-unit id="f8beee34fe974e91aa606edae9e1b0b73946c619" translate="yes" xml:space="preserve">
          <source>a code path through the function returns a Boolean value &lt;code&gt;true&lt;/code&gt;</source>
          <target state="translated">함수를 통한 코드 경로는 부울 값 &lt;code&gt;true&lt;/code&gt; 를 리턴 합니다.</target>
        </trans-unit>
        <trans-unit id="8f3f5fe1eb7d80d5ade57b76fbbdc5e5cca40190" translate="yes" xml:space="preserve">
          <source>a string that specifies a configuration (either a path to a config file, the name of a shareable config, &lt;code&gt;eslint:recommended&lt;/code&gt;, or &lt;code&gt;eslint:all&lt;/code&gt;)</source>
          <target state="translated">구성을 지정하는 문자열 (구성 파일의 경로, 공유 가능한 구성의 이름, &lt;code&gt;eslint:recommended&lt;/code&gt; 또는 &lt;code&gt;eslint:all&lt;/code&gt; )</target>
        </trans-unit>
        <trans-unit id="55ad57398381af0c1ec59999ac96027d9b403554" translate="yes" xml:space="preserve">
          <source>accessor-pairs</source>
          <target state="translated">accessor-pairs</target>
        </trans-unit>
        <trans-unit id="e19caa9af9e68f5536563bcfa0e9f3f6849956ce" translate="yes" xml:space="preserve">
          <source>acquire(node, inner = false)</source>
          <target state="translated">획득 (노드, 내부 = 거짓)</target>
        </trans-unit>
        <trans-unit id="8aebea2d1f92e7cbb607f24786a59f502fbf3a2c" translate="yes" xml:space="preserve">
          <source>acquireAll(node)</source>
          <target state="translated">acquireAll(node)</target>
        </trans-unit>
        <trans-unit id="ceb1d2ad3a424f26e1e0174573173f02c909091c" translate="yes" xml:space="preserve">
          <source>addPlugin()</source>
          <target state="translated">addPlugin()</target>
        </trans-unit>
        <trans-unit id="f89e845bf8b2239b42b45149c012ac05e3c8d301" translate="yes" xml:space="preserve">
          <source>adjacent null elements</source>
          <target state="translated">인접한 널 요소</target>
        </trans-unit>
        <trans-unit id="bd836477cc221860a8a1dbf91ca18f434dbbaf0e" translate="yes" xml:space="preserve">
          <source>adjacent sibling: &lt;code&gt;VariableDeclaration ~ VariableDeclaration&lt;/code&gt;</source>
          <target state="translated">인접 형제 : &lt;code&gt;VariableDeclaration ~ VariableDeclaration&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="405906c9d5be6ae5393ca65fb0e7c38e0d585ecb" translate="yes" xml:space="preserve">
          <source>after</source>
          <target state="translated">after</target>
        </trans-unit>
        <trans-unit id="74a2f555de8192333b3fd2f6100996564e61e11e" translate="yes" xml:space="preserve">
          <source>afterBlockComment</source>
          <target state="translated">afterBlockComment</target>
        </trans-unit>
        <trans-unit id="c2423b09d679166df792f4ad59e399a6d7406b8f" translate="yes" xml:space="preserve">
          <source>afterColon</source>
          <target state="translated">afterColon</target>
        </trans-unit>
        <trans-unit id="7e0ee419ff22094eb9f3df7fd1683969a1f66046" translate="yes" xml:space="preserve">
          <source>afterLineComment</source>
          <target state="translated">afterLineComment</target>
        </trans-unit>
        <trans-unit id="ae21c64a87f6bb0b8e16e55c48be4cc638d7bd3f" translate="yes" xml:space="preserve">
          <source>align</source>
          <target state="translated">align</target>
        </trans-unit>
        <trans-unit id="4f67eb35f5745326d445bd9cd9afbfe8209622f3" translate="yes" xml:space="preserve">
          <source>align and multiLine</source>
          <target state="translated">정렬 및 여러 줄</target>
        </trans-unit>
        <trans-unit id="d87c448044defb778f33158d8ccf94a20531d600" translate="yes" xml:space="preserve">
          <source>all</source>
          <target state="translated">all</target>
        </trans-unit>
        <trans-unit id="43ad9521e976c32c511f9b332bd6f36b2a6ce966" translate="yes" xml:space="preserve">
          <source>all require declarations must be of the same type (grouping)</source>
          <target state="translated">모든 필수 선언은 동일한 유형이어야합니다 (그룹화).</target>
        </trans-unit>
        <trans-unit id="d0ae2001b5c0fb431a06c0bafd745201d5954e6b" translate="yes" xml:space="preserve">
          <source>allman</source>
          <target state="translated">allman</target>
        </trans-unit>
        <trans-unit id="6452e7c5a42f97b00af1a210afc7d4de315e57ec" translate="yes" xml:space="preserve">
          <source>allow</source>
          <target state="translated">allow</target>
        </trans-unit>
        <trans-unit id="3ca69f290e7656729c4d1a5240869a336d7b65a1" translate="yes" xml:space="preserve">
          <source>allow-null</source>
          <target state="translated">allow-null</target>
        </trans-unit>
        <trans-unit id="5ea023488b91691cc2e48a681964a431938bef53" translate="yes" xml:space="preserve">
          <source>allow: arrowFunctions</source>
          <target state="translated">허용 : arrow 기능</target>
        </trans-unit>
        <trans-unit id="52089bdf973f46fe17a3c28eb9f5ce96b3fe03ae" translate="yes" xml:space="preserve">
          <source>allow: constructors</source>
          <target state="translated">허용 : 생성자</target>
        </trans-unit>
        <trans-unit id="51e2b3e9cfb059d1171f1562fc8b35c43829dc9a" translate="yes" xml:space="preserve">
          <source>allow: functions</source>
          <target state="translated">허용 : 기능</target>
        </trans-unit>
        <trans-unit id="539242111915c8849f6b4f6f34c4a0051f9cbad5" translate="yes" xml:space="preserve">
          <source>allow: generatorFunctions</source>
          <target state="translated">허용 : generatorFunctions</target>
        </trans-unit>
        <trans-unit id="b49d6b9ce553f43ce01eb887ba09b8fc58e3b4c4" translate="yes" xml:space="preserve">
          <source>allow: generatorMethods</source>
          <target state="translated">허용 : generatorMethods</target>
        </trans-unit>
        <trans-unit id="05f83ce529f2972c160f4efff2e5eab71f4f327e" translate="yes" xml:space="preserve">
          <source>allow: getters</source>
          <target state="translated">허용 : 게터</target>
        </trans-unit>
        <trans-unit id="735b49264fe8edee6a7ac6b4d2e0c6014f8b5714" translate="yes" xml:space="preserve">
          <source>allow: methods</source>
          <target state="translated">허용 : 메소드</target>
        </trans-unit>
        <trans-unit id="688458cac85ecd5422ec02c30dccaf5177293534" translate="yes" xml:space="preserve">
          <source>allow: setters</source>
          <target state="translated">허용 : 세터</target>
        </trans-unit>
        <trans-unit id="39271317c9d8a679c7ce32b876e5718c248ff589" translate="yes" xml:space="preserve">
          <source>allowAfterSuper</source>
          <target state="translated">allowAfterSuper</target>
        </trans-unit>
        <trans-unit id="3c49fcb702ededa8738dd5f1cc2fdb5616797dab" translate="yes" xml:space="preserve">
          <source>allowAfterThis</source>
          <target state="translated">allowAfterThis</target>
        </trans-unit>
        <trans-unit id="83f18e864b60ea84a5554ceeb0ff6112e8b208aa" translate="yes" xml:space="preserve">
          <source>allowAfterThisConstructor</source>
          <target state="translated">allowAfterThisConstructor</target>
        </trans-unit>
        <trans-unit id="7949da6aba42bb23d6f3924d3614aa0500885950" translate="yes" xml:space="preserve">
          <source>allowArrayEnd</source>
          <target state="translated">allowArrayEnd</target>
        </trans-unit>
        <trans-unit id="08767bec82295aa348a346b65c675b4acfd3f480" translate="yes" xml:space="preserve">
          <source>allowArrayStart</source>
          <target state="translated">allowArrayStart</target>
        </trans-unit>
        <trans-unit id="c82ecb423ec3af960799f43a3eeee3cfd3007412" translate="yes" xml:space="preserve">
          <source>allowArrowFunctions</source>
          <target state="translated">allowArrowFunctions</target>
        </trans-unit>
        <trans-unit id="a95a7a057d0f55f84f86437322b8ae1227d825f4" translate="yes" xml:space="preserve">
          <source>allowBlockEnd</source>
          <target state="translated">allowBlockEnd</target>
        </trans-unit>
        <trans-unit id="2fff3b8e9b8392b64928faddf9097efaaa66b2c8" translate="yes" xml:space="preserve">
          <source>allowBlockStart</source>
          <target state="translated">allowBlockStart</target>
        </trans-unit>
        <trans-unit id="0139e5bdec80a23b197143e62c8a5a7c68947d12" translate="yes" xml:space="preserve">
          <source>allowCall</source>
          <target state="translated">allowCall</target>
        </trans-unit>
        <trans-unit id="a5ea685be48103093b0bc08055d0e89bf6eb43b5" translate="yes" xml:space="preserve">
          <source>allowClassEnd</source>
          <target state="translated">allowClassEnd</target>
        </trans-unit>
        <trans-unit id="c5c59a6fcfd50de637c625e9c2f0e5094176e026" translate="yes" xml:space="preserve">
          <source>allowClassStart</source>
          <target state="translated">allowClassStart</target>
        </trans-unit>
        <trans-unit id="00a8ce82bf7f8f30e8abb95849627f4d4584297a" translate="yes" xml:space="preserve">
          <source>allowConstructorFlags</source>
          <target state="translated">allowConstructorFlags</target>
        </trans-unit>
        <trans-unit id="8132dd882ad5a32e5b9d2cc316910c844c0bc2f9" translate="yes" xml:space="preserve">
          <source>allowEmptyCatch</source>
          <target state="translated">allowEmptyCatch</target>
        </trans-unit>
        <trans-unit id="6eebcbe067072c375be817bc967b5495d4530850" translate="yes" xml:space="preserve">
          <source>allowForLoopAfterthoughts</source>
          <target state="translated">allowForLoopAfterthoughts</target>
        </trans-unit>
        <trans-unit id="80b381a0a946ecf9e3ac6306409ac47689910cd5" translate="yes" xml:space="preserve">
          <source>allowIndentationTabs</source>
          <target state="translated">allowIndentationTabs</target>
        </trans-unit>
        <trans-unit id="d3f8a695710fdde390c6fe98b93c43fab26f2a82" translate="yes" xml:space="preserve">
          <source>allowKeywords</source>
          <target state="translated">allowKeywords</target>
        </trans-unit>
        <trans-unit id="09df55ecc46c60e0793a9895288d66e77b7f4699" translate="yes" xml:space="preserve">
          <source>allowLoop</source>
          <target state="translated">allowLoop</target>
        </trans-unit>
        <trans-unit id="b189567871edfe578613086f3c7011f75d7df980" translate="yes" xml:space="preserve">
          <source>allowNamedFunctions</source>
          <target state="translated">allowNamedFunctions</target>
        </trans-unit>
        <trans-unit id="f41dd5dba171785d998dd6404469b75119472821" translate="yes" xml:space="preserve">
          <source>allowNewlines</source>
          <target state="translated">allowNewlines</target>
        </trans-unit>
        <trans-unit id="440819b6c466f6a1972235069bed7bbb77d3c1f0" translate="yes" xml:space="preserve">
          <source>allowObjectEnd</source>
          <target state="translated">allowObjectEnd</target>
        </trans-unit>
        <trans-unit id="bf37c85b8433ef4eb42e95fd066380556b91ce1f" translate="yes" xml:space="preserve">
          <source>allowObjectStart</source>
          <target state="translated">allowObjectStart</target>
        </trans-unit>
        <trans-unit id="51eaa1574ed4ff038a09098fcefe75080cf39614" translate="yes" xml:space="preserve">
          <source>allowPattern</source>
          <target state="translated">allowPattern</target>
        </trans-unit>
        <trans-unit id="60860477af03a274894237bf2e6a4484e6f2639d" translate="yes" xml:space="preserve">
          <source>allowSamePrecedence</source>
          <target state="translated">allowSamePrecedence</target>
        </trans-unit>
        <trans-unit id="77fdecc9c001467f0f22002a7aa6a4312d733c23" translate="yes" xml:space="preserve">
          <source>allowShortCircuit</source>
          <target state="translated">allowShortCircuit</target>
        </trans-unit>
        <trans-unit id="78f26a39d292a340d8b11eb83c86b896631acbeb" translate="yes" xml:space="preserve">
          <source>allowShortCircuit and allowTernary</source>
          <target state="translated">allowShortCircuit 및 allowTernary</target>
        </trans-unit>
        <trans-unit id="ad2d04974dcbe7b6669773efb79c0c01c54c2ff2" translate="yes" xml:space="preserve">
          <source>allowSwitch</source>
          <target state="translated">allowSwitch</target>
        </trans-unit>
        <trans-unit id="829926aa9acd2aafd36696fa256128c51c7087a1" translate="yes" xml:space="preserve">
          <source>allowTaggedTemplates</source>
          <target state="translated">allowTaggedTemplates</target>
        </trans-unit>
        <trans-unit id="534e1e8ecd2f3d5aba71b781bea041db71c139ea" translate="yes" xml:space="preserve">
          <source>allowTemplateLiterals</source>
          <target state="translated">allowTemplateLiterals</target>
        </trans-unit>
        <trans-unit id="b39cc68db2274964dd17803a8af74bc21223f219" translate="yes" xml:space="preserve">
          <source>allowTernary</source>
          <target state="translated">allowTernary</target>
        </trans-unit>
        <trans-unit id="6c7edf96f4b9535b15e501f4311720fc25d141ba" translate="yes" xml:space="preserve">
          <source>allowUnboundThis</source>
          <target state="translated">allowUnboundThis</target>
        </trans-unit>
        <trans-unit id="6656018ac96d0295d887ff2893ba9af66ae16af2" translate="yes" xml:space="preserve">
          <source>always</source>
          <target state="translated">always</target>
        </trans-unit>
        <trans-unit id="6ba5d9b6bc209ef040bc0da18619f34bfccecb4d" translate="yes" xml:space="preserve">
          <source>always + allowSingleLineBlocks</source>
          <target state="translated">항상 + allowSingleLineBlocks</target>
        </trans-unit>
        <trans-unit id="f1ca906def0ef66f2de9d0027de7024b3ddd247f" translate="yes" xml:space="preserve">
          <source>always-multiline</source>
          <target state="translated">always-multiline</target>
        </trans-unit>
        <trans-unit id="c92723fcdb10d811bc3ea4bd3386d71f225f576c" translate="yes" xml:space="preserve">
          <source>an array of strings: each additional configuration extends the preceding configurations</source>
          <target state="translated">문자열 배열 : 각 추가 구성은 이전 구성을 확장합니다.</target>
        </trans-unit>
        <trans-unit id="6540a339ec4199127bcda7f2ea195f4fd7df7797" translate="yes" xml:space="preserve">
          <source>an initial null element, to avoid conflicts with the &lt;a href=&quot;array-bracket-spacing&quot;&gt;&lt;code&gt;array-bracket-spacing&lt;/code&gt;&lt;/a&gt; rule</source>
          <target state="translated">&lt;a href=&quot;array-bracket-spacing&quot;&gt; &lt;code&gt;array-bracket-spacing&lt;/code&gt; &lt;/a&gt; 규칙 과의 충돌을 피하기위한 초기 널 요소</target>
        </trans-unit>
        <trans-unit id="b93aba6b867449e9b476254a4f31ce706b82a6bb" translate="yes" xml:space="preserve">
          <source>another code path does not return a value explicitly, therefore returns &lt;code&gt;undefined&lt;/code&gt; implicitly</source>
          <target state="translated">다른 코드 경로는 명시 적으로 값을 반환하지 않으므로 암시 적으로 &lt;code&gt;undefined&lt;/code&gt; 를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="c5fe0200d1c7a5139bd18fd22268c4ca8bf45e90" translate="yes" xml:space="preserve">
          <source>any</source>
          <target state="translated">any</target>
        </trans-unit>
        <trans-unit id="09a7553104ea363ce5028cb76da58082a1edbd33" translate="yes" xml:space="preserve">
          <source>applyDefaultIgnorePatterns</source>
          <target state="translated">applyDefaultIgnorePatterns</target>
        </trans-unit>
        <trans-unit id="3030e728f154bf51419109efb93b6b8aeec9a976" translate="yes" xml:space="preserve">
          <source>args</source>
          <target state="translated">args</target>
        </trans-unit>
        <trans-unit id="1e59286f2bc11b24377b32330326472980a646a0" translate="yes" xml:space="preserve">
          <source>args: after-used</source>
          <target state="translated">인수 : 사용 후</target>
        </trans-unit>
        <trans-unit id="c1ac002dc3efeae80f1585ca083c89e1866bd8ac" translate="yes" xml:space="preserve">
          <source>args: all</source>
          <target state="translated">인수 : 모두</target>
        </trans-unit>
        <trans-unit id="0a14819862ce0f759ff9f4bb0b878fe61b53f896" translate="yes" xml:space="preserve">
          <source>args: none</source>
          <target state="translated">인수 : 없음</target>
        </trans-unit>
        <trans-unit id="53018a39bf1b388581a7617eb00ea39a1d70a9e5" translate="yes" xml:space="preserve">
          <source>argsIgnorePattern</source>
          <target state="translated">argsIgnorePattern</target>
        </trans-unit>
        <trans-unit id="60c1711fecbc0a515495b6aea9e713e6c9344678" translate="yes" xml:space="preserve">
          <source>array-bracket-newline</source>
          <target state="translated">array-bracket-newline</target>
        </trans-unit>
        <trans-unit id="6d9067df84915639765b60529e8ce494c247121e" translate="yes" xml:space="preserve">
          <source>array-bracket-spacing</source>
          <target state="translated">array-bracket-spacing</target>
        </trans-unit>
        <trans-unit id="24f80a8b77d682a4f386e8bfa62211038c97d927" translate="yes" xml:space="preserve">
          <source>array-callback-return</source>
          <target state="translated">array-callback-return</target>
        </trans-unit>
        <trans-unit id="80165b516f30050832e1e300ff26e01c0ea6013d" translate="yes" xml:space="preserve">
          <source>array-element-newline</source>
          <target state="translated">array-element-newline</target>
        </trans-unit>
        <trans-unit id="afe64e4f46964c362f7e064e18b9c2923112192f" translate="yes" xml:space="preserve">
          <source>arraysInArrays</source>
          <target state="translated">arraysInArrays</target>
        </trans-unit>
        <trans-unit id="cf49d4680de1fd64238232f3732ace8f77441d02" translate="yes" xml:space="preserve">
          <source>arraysInObjects</source>
          <target state="translated">arraysInObjects</target>
        </trans-unit>
        <trans-unit id="3281769c911f79dfa60fb53d1fffac7f3792e9bd" translate="yes" xml:space="preserve">
          <source>arrow function arguments to avoid conflicts with the &lt;a href=&quot;arrow-parens&quot;&gt;arrow-parens&lt;/a&gt; rule</source>
          <target state="translated">와 피할 충돌이 함수 인수 화살표 &lt;a href=&quot;arrow-parens&quot;&gt;화살표 괄호의&lt;/a&gt; 규칙</target>
        </trans-unit>
        <trans-unit id="b38bc9777a5a1f29a7c4b54eb3dab9b14f99cb11" translate="yes" xml:space="preserve">
          <source>arrow-body-style</source>
          <target state="translated">arrow-body-style</target>
        </trans-unit>
        <trans-unit id="b1b465dd389e1a217997265b0ee59e1c1e098ffc" translate="yes" xml:space="preserve">
          <source>arrow-parens</source>
          <target state="translated">arrow-parens</target>
        </trans-unit>
        <trans-unit id="f740d1aee1fd2b8f907ec2cbcc3f411aad3e92a6" translate="yes" xml:space="preserve">
          <source>arrow-spacing</source>
          <target state="translated">arrow-spacing</target>
        </trans-unit>
        <trans-unit id="4ce58f96295f51997b09a7029c957ffbe384f821" translate="yes" xml:space="preserve">
          <source>as-needed</source>
          <target state="translated">as-needed</target>
        </trans-unit>
        <trans-unit id="418a3e57b15792ec014b470a1e09c4b87c1516f5" translate="yes" xml:space="preserve">
          <source>attribute conditions: &lt;code&gt;[attr!=&quot;foo&quot;]&lt;/code&gt;, &lt;code&gt;[attr&amp;gt;2]&lt;/code&gt;, &lt;code&gt;[attr&amp;lt;3]&lt;/code&gt;, &lt;code&gt;[attr&amp;gt;=2]&lt;/code&gt;, or &lt;code&gt;[attr&amp;lt;=3]&lt;/code&gt;</source>
          <target state="translated">속성 조건 : &lt;code&gt;[attr!=&quot;foo&quot;]&lt;/code&gt; , &lt;code&gt;[attr&amp;gt;2]&lt;/code&gt; , &lt;code&gt;[attr&amp;lt;3]&lt;/code&gt; , &lt;code&gt;[attr&amp;gt;=2]&lt;/code&gt; 또는 &lt;code&gt;[attr&amp;lt;=3]&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="3e6776b93f94030e16bde1c32e24ea5a461073f7" translate="yes" xml:space="preserve">
          <source>attribute existence: &lt;code&gt;[attr]&lt;/code&gt;</source>
          <target state="translated">속성 존재 : &lt;code&gt;[attr]&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="387c3c31ea6969db20b74f51173832b97b7b04b6" translate="yes" xml:space="preserve">
          <source>attribute regex: &lt;code&gt;[attr=/foo.*/]&lt;/code&gt;</source>
          <target state="translated">정규식 속성 : &lt;code&gt;[attr=/foo.*/]&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a9f807c01a8c4783c3e25b66f91648401d75fb42" translate="yes" xml:space="preserve">
          <source>attribute value: &lt;code&gt;[attr=&quot;foo&quot;]&lt;/code&gt; or &lt;code&gt;[attr=123]&lt;/code&gt;</source>
          <target state="translated">속성 값 : &lt;code&gt;[attr=&quot;foo&quot;]&lt;/code&gt; 또는 &lt;code&gt;[attr=123]&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a21c1aef797148c460f0e9d672acd8aea7a56cd9" translate="yes" xml:space="preserve">
          <source>avoidEscape</source>
          <target state="translated">avoidEscape</target>
        </trans-unit>
        <trans-unit id="7509930d058130604f3243eff8e57a63497eff72" translate="yes" xml:space="preserve">
          <source>backticks</source>
          <target state="translated">backticks</target>
        </trans-unit>
        <trans-unit id="405d0c8b05e15f806c831836d5377dd1b42f46a5" translate="yes" xml:space="preserve">
          <source>because 1 character of the specification of &lt;code&gt;a&lt;/code&gt; (i.e. the trailing &lt;code&gt;]&lt;/code&gt; of its value) is on the same line as the specification of &lt;code&gt;b&lt;/code&gt;.</source>
          <target state="translated">명세서의 한 특성 때문에 (즉 후단 &lt;code&gt;]&lt;/code&gt; 의 값)은 명세서와 동일한 라인에 &lt;code&gt;b&lt;/code&gt; . &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="51de2b835bd35a67eb32dbcd3d77d4b96e5aa39d" translate="yes" xml:space="preserve">
          <source>before</source>
          <target state="translated">before</target>
        </trans-unit>
        <trans-unit id="e090eeb6a8cfee4dd4992e368cc2fb2adc8c3ef9" translate="yes" xml:space="preserve">
          <source>before &amp;amp; after</source>
          <target state="translated">전 후</target>
        </trans-unit>
        <trans-unit id="b659a68bc4bada7d20ad0f9d22adf555ca8e8752" translate="yes" xml:space="preserve">
          <source>beforeBlockComment</source>
          <target state="translated">beforeBlockComment</target>
        </trans-unit>
        <trans-unit id="fac6b7ed7ee02055a5265cd2ac08220e3faf9b00" translate="yes" xml:space="preserve">
          <source>beforeColon</source>
          <target state="translated">beforeColon</target>
        </trans-unit>
        <trans-unit id="6c2889673e3495222b15a3546c3f7ad011138a77" translate="yes" xml:space="preserve">
          <source>beforeLineComment</source>
          <target state="translated">beforeLineComment</target>
        </trans-unit>
        <trans-unit id="a7883500bb591d600e93c796b38ec08a00e2db97" translate="yes" xml:space="preserve">
          <source>beforeStatementContinuationChars</source>
          <target state="translated">beforeStatementContinuationChars</target>
        </trans-unit>
        <trans-unit id="0214b4b355d11ca8f2ce45a968c264651bdfbf83" translate="yes" xml:space="preserve">
          <source>block</source>
          <target state="translated">block</target>
        </trans-unit>
        <trans-unit id="18ba6beca51477739ab67d421ff8d4c6c2a853b8" translate="yes" xml:space="preserve">
          <source>block-scoped-var</source>
          <target state="translated">block-scoped-var</target>
        </trans-unit>
        <trans-unit id="ee193a5cd6247617e8b5bd8e743ae1c9ff0711b6" translate="yes" xml:space="preserve">
          <source>block-spacing</source>
          <target state="translated">block-spacing</target>
        </trans-unit>
        <trans-unit id="f7d5b2b95861daea9933ef0a243f733bbc79235e" translate="yes" xml:space="preserve">
          <source>blocks</source>
          <target state="translated">blocks</target>
        </trans-unit>
        <trans-unit id="48647474b89fa8f56ed6bda0f8148a17b51b97bd" translate="yes" xml:space="preserve">
          <source>boolean</source>
          <target state="translated">boolean</target>
        </trans-unit>
        <trans-unit id="fc39b18f287d8bbfaceae020f4a4eb32ac5c1e70" translate="yes" xml:space="preserve">
          <source>both</source>
          <target state="translated">both</target>
        </trans-unit>
        <trans-unit id="6780003a316a8f3eeb09da5e14260fb4828484e6" translate="yes" xml:space="preserve">
          <source>bound lexically regardless of where or when they are invoked.</source>
          <target state="translated">언제 어디서 호출되는지에 상관없이 어휘 적으로 바인딩됩니다.</target>
        </trans-unit>
        <trans-unit id="90f4ec3c48bff2faeeb61bcd3635002d7d61dad3" translate="yes" xml:space="preserve">
          <source>brace-style</source>
          <target state="translated">brace-style</target>
        </trans-unit>
        <trans-unit id="ef98362b8a6b0c8cd804b0d227aa1ffeaba89786" translate="yes" xml:space="preserve">
          <source>browser</source>
          <target state="translated">browser</target>
        </trans-unit>
        <trans-unit id="7f1988e40bdfe34d9dae05b7233ee913bfc3f0c5" translate="yes" xml:space="preserve">
          <source>builtinGlobals</source>
          <target state="translated">builtinGlobals</target>
        </trans-unit>
        <trans-unit id="b30b80162a303c56baf5a9e22cc348a6d0b4fb53" translate="yes" xml:space="preserve">
          <source>callback-return</source>
          <target state="translated">callback-return</target>
        </trans-unit>
        <trans-unit id="966537cc0c6f3eda2c5b03c7e88530d30068bb1e" translate="yes" xml:space="preserve">
          <source>camelcase</source>
          <target state="translated">camelcase</target>
        </trans-unit>
        <trans-unit id="2a1cef73489c1e5260bc31fe48497febdf22f358" translate="yes" xml:space="preserve">
          <source>capIsConstructor</source>
          <target state="translated">capIsConstructor</target>
        </trans-unit>
        <trans-unit id="5f79fd52b25108307a59b3a87eab0fa4a7d9e311" translate="yes" xml:space="preserve">
          <source>capIsNew</source>
          <target state="translated">capIsNew</target>
        </trans-unit>
        <trans-unit id="99f9c5f9bafbaa34fab6324bcb0fa3788b8c95a0" translate="yes" xml:space="preserve">
          <source>capIsNewExceptionPattern</source>
          <target state="translated">capIsNewExceptionPattern</target>
        </trans-unit>
        <trans-unit id="fbb93787cf59ac164bb0a0fc0045f83bc78d8127" translate="yes" xml:space="preserve">
          <source>capIsNewExceptions</source>
          <target state="translated">capIsNewExceptions</target>
        </trans-unit>
        <trans-unit id="e5d24abdd5c4c36846523bd3de38ab4d77ab5d12" translate="yes" xml:space="preserve">
          <source>capitalized-comments</source>
          <target state="translated">capitalized-comments</target>
        </trans-unit>
        <trans-unit id="6a075cf66214714c9a10a6c56fd924a07ea4191d" translate="yes" xml:space="preserve">
          <source>caughtErrors</source>
          <target state="translated">caughtErrors</target>
        </trans-unit>
        <trans-unit id="e9e6f2ac87d34063db398e291b4c8d8416a49429" translate="yes" xml:space="preserve">
          <source>caughtErrors: all</source>
          <target state="translated">caughtErrors : 모두</target>
        </trans-unit>
        <trans-unit id="30a4af32f43e0a2de6334ef951c4f4b986cf1a68" translate="yes" xml:space="preserve">
          <source>caughtErrors: none</source>
          <target state="translated">caughtErrors : 없음</target>
        </trans-unit>
        <trans-unit id="c5df8e348ff97c49a4149a8fed906c1d76cb43fc" translate="yes" xml:space="preserve">
          <source>caughtErrorsIgnorePattern</source>
          <target state="translated">caughtErrorsIgnorePattern</target>
        </trans-unit>
        <trans-unit id="55e2e0ac12a1c1796e41cb988f6b87f8fc7804ea" translate="yes" xml:space="preserve">
          <source>change an inherited rule's severity without changing its options:</source>
          <target state="translated">옵션을 변경하지 않고 상속 된 규칙의 심각도를 변경하십시오.</target>
        </trans-unit>
        <trans-unit id="54f71544ab6036d54f2cd78525e1cd4f4ff259d2" translate="yes" xml:space="preserve">
          <source>checkLoops</source>
          <target state="translated">checkLoops</target>
        </trans-unit>
        <trans-unit id="0806f3cbb7ba72a868e4d81efeeac5abe405b40c" translate="yes" xml:space="preserve">
          <source>checkstyle</source>
          <target state="translated">checkstyle</target>
        </trans-unit>
        <trans-unit id="1c9260f66277c32d6dfb0dfe7703984b587212df" translate="yes" xml:space="preserve">
          <source>child: &lt;code&gt;UnaryExpression &amp;gt; Literal&lt;/code&gt;</source>
          <target state="translated">자식 : &lt;code&gt;UnaryExpression &amp;gt; Literal&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="4236412df05a83ec6045dd74a99b88ba8d4fd521" translate="yes" xml:space="preserve">
          <source>childScopes</source>
          <target state="translated">childScopes</target>
        </trans-unit>
        <trans-unit id="0412d15223aca9b8a1519022f0c955a8c5563c3d" translate="yes" xml:space="preserve">
          <source>class of AST node: &lt;code&gt;:statement&lt;/code&gt;, &lt;code&gt;:expression&lt;/code&gt;, &lt;code&gt;:declaration&lt;/code&gt;, &lt;code&gt;:function&lt;/code&gt;, or &lt;code&gt;:pattern&lt;/code&gt;</source>
          <target state="translated">AST 노드 클래스 : &lt;code&gt;:statement&lt;/code&gt; , &lt;code&gt;:expression&lt;/code&gt; , &lt;code&gt;:declaration&lt;/code&gt; , &lt;code&gt;:function&lt;/code&gt; 또는 &lt;code&gt;:pattern&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e7eb69a5ba84f54b0338c828eb0178e81adc4c98" translate="yes" xml:space="preserve">
          <source>class-methods-use-this</source>
          <target state="translated">class-methods-use-this</target>
        </trans-unit>
        <trans-unit id="1adaa84dc07a16d34ede5b9a70713ff832a0f853" translate="yes" xml:space="preserve">
          <source>classes</source>
          <target state="translated">classes</target>
        </trans-unit>
        <trans-unit id="e6fb06210fafc02fd7479ddbed2d042cc3a5155e" translate="yes" xml:space="preserve">
          <source>code</source>
          <target state="translated">code</target>
        </trans-unit>
        <trans-unit id="e5a6db172a1571adadfedf3da85299d4d469cec1" translate="yes" xml:space="preserve">
          <source>codeframe</source>
          <target state="translated">codeframe</target>
        </trans-unit>
        <trans-unit id="6bddafe7f42d8d82e4723a9d5e20adde4a186205" translate="yes" xml:space="preserve">
          <source>comma preceded and followed by linebreak (lone comma)</source>
          <target state="translated">쉼표 앞뒤에 줄 바꿈 (고독 쉼표)</target>
        </trans-unit>
        <trans-unit id="887e2b42d5d83ce2903c8d29696f7a9babea39c1" translate="yes" xml:space="preserve">
          <source>comma-dangle</source>
          <target state="translated">comma-dangle</target>
        </trans-unit>
        <trans-unit id="63c7aebe56a0ae7f922ac1f2cc020c855593f049" translate="yes" xml:space="preserve">
          <source>comma-spacing</source>
          <target state="translated">comma-spacing</target>
        </trans-unit>
        <trans-unit id="f27bb0cea63377d026e33a9124e1baef8f01e69b" translate="yes" xml:space="preserve">
          <source>comma-style</source>
          <target state="translated">comma-style</target>
        </trans-unit>
        <trans-unit id="576caf6c5e15e2af06afa846cf8ab0661704718c" translate="yes" xml:space="preserve">
          <source>commentPattern</source>
          <target state="translated">commentPattern</target>
        </trans-unit>
        <trans-unit id="5b17a6c606a82dafd93db84a19945afe2d559ed4" translate="yes" xml:space="preserve">
          <source>comments</source>
          <target state="translated">comments</target>
        </trans-unit>
        <trans-unit id="4f44e2cffa8f7b516c9e499285c951d788431a28" translate="yes" xml:space="preserve">
          <source>compact</source>
          <target state="translated">compact</target>
        </trans-unit>
        <trans-unit id="8d08946e603eb0277964f9dffb00266975512736" translate="yes" xml:space="preserve">
          <source>complexity</source>
          <target state="translated">complexity</target>
        </trans-unit>
        <trans-unit id="a1a7aca5c916fa8627ce78b047bee90c3e80e3f3" translate="yes" xml:space="preserve">
          <source>computed-property-spacing</source>
          <target state="translated">computed-property-spacing</target>
        </trans-unit>
        <trans-unit id="f6ac9cd542333dbd500b9698e13050b3ae3f9360" translate="yes" xml:space="preserve">
          <source>conditionalAssign</source>
          <target state="translated">conditionalAssign</target>
        </trans-unit>
        <trans-unit id="dfba7aade0868074c2861c98e2a9a92f3178a51b" translate="yes" xml:space="preserve">
          <source>config</source>
          <target state="translated">config</target>
        </trans-unit>
        <trans-unit id="da4f063c733c2c650fdd295748735efc2e7ecc9b" translate="yes" xml:space="preserve">
          <source>consecutive</source>
          <target state="translated">consecutive</target>
        </trans-unit>
        <trans-unit id="20dfe8aaafc2c433eba2ded2b5e48dfc0249d733" translate="yes" xml:space="preserve">
          <source>considerPropertyDescriptor</source>
          <target state="translated">considerPropertyDescriptor</target>
        </trans-unit>
        <trans-unit id="8c305a07c6f8fa806cbf0aa9caa35c680fb0c4c7" translate="yes" xml:space="preserve">
          <source>consistent</source>
          <target state="translated">consistent</target>
        </trans-unit>
        <trans-unit id="de3f5fcc7dfbfb856983e0753f73f33e03fc66d1" translate="yes" xml:space="preserve">
          <source>consistent-as-needed</source>
          <target state="translated">consistent-as-needed</target>
        </trans-unit>
        <trans-unit id="99f3848c11080a8766d5dbe5a70bcfd5423f07e0" translate="yes" xml:space="preserve">
          <source>consistent-return</source>
          <target state="translated">consistent-return</target>
        </trans-unit>
        <trans-unit id="968a3bdc75d301e4c4384711b502cf88b29ad11d" translate="yes" xml:space="preserve">
          <source>consistent-this</source>
          <target state="translated">consistent-this</target>
        </trans-unit>
        <trans-unit id="2aa6d9f7ceeab6c27898a2ba26d7c4873b6802ec" translate="yes" xml:space="preserve">
          <source>constructor-super</source>
          <target state="translated">constructor-super</target>
        </trans-unit>
        <trans-unit id="b5dffe86c79e54353383ca3d9ab02dd82fc98957" translate="yes" xml:space="preserve">
          <source>context.getScope()</source>
          <target state="translated">context.getScope()</target>
        </trans-unit>
        <trans-unit id="a67bc5696e1cc9dac61092fa5fe35e92a80aa3ce" translate="yes" xml:space="preserve">
          <source>context.getSourceCode()</source>
          <target state="translated">context.getSourceCode()</target>
        </trans-unit>
        <trans-unit id="0e3179ab0aee364d346dab3c37c001c9814ee2b5" translate="yes" xml:space="preserve">
          <source>context.options</source>
          <target state="translated">context.options</target>
        </trans-unit>
        <trans-unit id="aba7d4de01c39fac57a0fc7a8e8bb43484deffe8" translate="yes" xml:space="preserve">
          <source>context.report()</source>
          <target state="translated">context.report()</target>
        </trans-unit>
        <trans-unit id="e122d28c768ab44ceafe00d71adedc80a535cdf1" translate="yes" xml:space="preserve">
          <source>curly</source>
          <target state="translated">curly</target>
        </trans-unit>
        <trans-unit id="a635d9a0594962e13edc7f188af0487f2d5a5f25" translate="yes" xml:space="preserve">
          <source>declaration</source>
          <target state="translated">declaration</target>
        </trans-unit>
        <trans-unit id="82e56d0dd502765f050df597885cb70547b8f887" translate="yes" xml:space="preserve">
          <source>default-case</source>
          <target state="translated">default-case</target>
        </trans-unit>
        <trans-unit id="1edf11011067f775b0a8b38b7257c7c03257152c" translate="yes" xml:space="preserve">
          <source>default-param-last</source>
          <target state="translated">default-param-last</target>
        </trans-unit>
        <trans-unit id="4097e63e6e1ebb894be3963fc2c243d766709785" translate="yes" xml:space="preserve">
          <source>defaultAssignment</source>
          <target state="translated">defaultAssignment</target>
        </trans-unit>
        <trans-unit id="8bf762a3363ce46cca0dac563354dd3f912de334" translate="yes" xml:space="preserve">
          <source>defineParser()</source>
          <target state="translated">defineParser()</target>
        </trans-unit>
        <trans-unit id="023e37930499a19bcb387a50f7768b198807afc6" translate="yes" xml:space="preserve">
          <source>defineRule()</source>
          <target state="translated">defineRule()</target>
        </trans-unit>
        <trans-unit id="983697eb973c76c2018139fad1e9b4e8dc076f9e" translate="yes" xml:space="preserve">
          <source>defineRules()</source>
          <target state="translated">defineRules()</target>
        </trans-unit>
        <trans-unit id="a59f3f3aaa01aee64fb80e525db04fc06a9ec00a" translate="yes" xml:space="preserve">
          <source>defs</source>
          <target state="translated">defs</target>
        </trans-unit>
        <trans-unit id="deb80331306dc3bc1cd0f2369ad72d699fe1e995" translate="yes" xml:space="preserve">
          <source>desc</source>
          <target state="translated">desc</target>
        </trans-unit>
        <trans-unit id="c7d9168ebd2fb8f70862926edece92d5266305a1" translate="yes" xml:space="preserve">
          <source>descendant: &lt;code&gt;FunctionExpression ReturnStatement&lt;/code&gt;</source>
          <target state="translated">자손 : &lt;code&gt;FunctionExpression ReturnStatement&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="3ac586ef45b0d57b84c02b13138e9fe037c8c8fb" translate="yes" xml:space="preserve">
          <source>designated alias names for &lt;code&gt;this&lt;/code&gt; (default &lt;code&gt;&quot;that&quot;&lt;/code&gt;)</source>
          <target state="translated">&lt;code&gt;this&lt;/code&gt; 대한 지정된 별명 (기본 &lt;code&gt;&quot;that&quot;&lt;/code&gt; )</target>
        </trans-unit>
        <trans-unit id="9a5693e54ebd7683088be59203ea23d4e8270124" translate="yes" xml:space="preserve">
          <source>destructuring</source>
          <target state="translated">destructuring</target>
        </trans-unit>
        <trans-unit id="7bd5d00880828aafa546d00daf5f9a4734c150e1" translate="yes" xml:space="preserve">
          <source>details here</source>
          <target state="translated">자세한 내용은 여기</target>
        </trans-unit>
        <trans-unit id="e7edbdbc896544209c8f370569ac79c612ca00ab" translate="yes" xml:space="preserve">
          <source>detectObjects</source>
          <target state="translated">detectObjects</target>
        </trans-unit>
        <trans-unit id="b0bcf701202c6a63aecac726d0f72d15b967bf68" translate="yes" xml:space="preserve">
          <source>directCallToEvalScope</source>
          <target state="translated">directCallToEvalScope</target>
        </trans-unit>
        <trans-unit id="0d16bce021877433787e556eccdd3660acebbe8d" translate="yes" xml:space="preserve">
          <source>disallow &lt;code&gt;Array&lt;/code&gt; constructors (no-array-constructor)</source>
          <target state="translated">&lt;code&gt;Array&lt;/code&gt; 생성자를 허용하지 않음 ( 배열 생성자 없음)</target>
        </trans-unit>
        <trans-unit id="3d5cb905c580c4b5eabb581c3c1b59d3bbe2282d" translate="yes" xml:space="preserve">
          <source>disallow &lt;code&gt;Object&lt;/code&gt; constructors (no-new-object)</source>
          <target state="translated">&lt;code&gt;Object&lt;/code&gt; 생성자 금지 (새로운 객체가 아님)</target>
        </trans-unit>
        <trans-unit id="42a4a7a330c591caaf652d9c30f5a520c3a350c8" translate="yes" xml:space="preserve">
          <source>disallow &lt;code&gt;continue&lt;/code&gt; statements (no-continue)</source>
          <target state="translated">&lt;code&gt;continue&lt;/code&gt; 문을 허용하지 않음 (계속)</target>
        </trans-unit>
        <trans-unit id="8a523f09e93f224e9169cc2f86d33136ccda7058" translate="yes" xml:space="preserve">
          <source>disallow &lt;code&gt;if&lt;/code&gt; statements as the only statement in &lt;code&gt;else&lt;/code&gt; blocks (no-lonely-if)</source>
          <target state="translated">&lt;code&gt;else&lt;/code&gt; 문에서 &lt;code&gt;if&lt;/code&gt; 문을 유일한 문으로 허용하지 않음 (금독의 경우)</target>
        </trans-unit>
        <trans-unit id="75be7fd831e421b3c85d2955a0bc513e110d59b2" translate="yes" xml:space="preserve">
          <source>disallow &lt;code&gt;parseInt()&lt;/code&gt; and &lt;code&gt;Number.parseInt()&lt;/code&gt; in favor of binary, octal, and hexadecimal literals (prefer-numeric-literals)</source>
          <target state="translated">이진, 8 진 및 16 진 리터럴 (숫자 리터럴 선호 &lt;code&gt;Number.parseInt()&lt;/code&gt; 을 위해 &lt;code&gt;parseInt()&lt;/code&gt; 및 Number.parseInt () 를 허용하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="1b14b18823992f5f2c0d44a5cbb86582ce69e0c7" translate="yes" xml:space="preserve">
          <source>disallow &lt;code&gt;require&lt;/code&gt; calls to be mixed with regular variable declarations (no-mixed-requires)</source>
          <target state="translated">허용 &lt;code&gt;require&lt;/code&gt; 통화를 일반 변수 선언과 혼합 할 (더 혼합은-필요하지 않습니다)</target>
        </trans-unit>
        <trans-unit id="7a4880d17a5cefba81d5b11930886d1d343c0f70" translate="yes" xml:space="preserve">
          <source>disallow &lt;code&gt;with&lt;/code&gt; statements (no-with)</source>
          <target state="translated">사용 해제 &lt;code&gt;with&lt;/code&gt; 문 (노 포함)</target>
        </trans-unit>
        <trans-unit id="9558eb12b6497566b1b403733d65067e8b73ab39" translate="yes" xml:space="preserve">
          <source>disallow `Array` constructors</source>
          <target state="translated">`배열`생성자를 허용하지 않음</target>
        </trans-unit>
        <trans-unit id="ff04e78830512f2a12127576258f1955856b4508" translate="yes" xml:space="preserve">
          <source>disallow `Object` constructors</source>
          <target state="translated">`Object` 생성자를 허용하지 않음</target>
        </trans-unit>
        <trans-unit id="3de143509df0bd27f17e106f43e0304c4510c442" translate="yes" xml:space="preserve">
          <source>disallow `await` inside of loops</source>
          <target state="translated">루프 내에서 '대기'를 허용하지 않습니다</target>
        </trans-unit>
        <trans-unit id="9a2fa0f7efcf91bcf647601fa47a361b9c412182" translate="yes" xml:space="preserve">
          <source>disallow `continue` statements</source>
          <target state="translated">`continue` 진술을 금지</target>
        </trans-unit>
        <trans-unit id="07b4a4dabba080d4ff063f797fdf39bd07608e3e" translate="yes" xml:space="preserve">
          <source>disallow `else` blocks after `return` statements in `if` statements</source>
          <target state="translated">`if` 문에서`return` 문 다음에`else` 블록을 허용하지 않습니다</target>
        </trans-unit>
        <trans-unit id="12ca2368b7629e14b7c2f37fecd15d14e5816d21" translate="yes" xml:space="preserve">
          <source>disallow `if` statements as the only statement in `else` blocks</source>
          <target state="translated">`if` 문을`else` 블록의 유일한 문으로 허용하지 않습니다</target>
        </trans-unit>
        <trans-unit id="8a7c34c8a03f94373023fb7f376390c1e0d4915c" translate="yes" xml:space="preserve">
          <source>disallow `javascript:` urls</source>
          <target state="translated">`javascript :`URL을 허용하지 않습니다</target>
        </trans-unit>
        <trans-unit id="8ad66ea5a0199ac2cbb9b40ea9de964dc335e370" translate="yes" xml:space="preserve">
          <source>disallow `new` operators outside of assignments or comparisons</source>
          <target state="translated">과제 나 비교 밖에서`new` 연산자를 허용하지 않음</target>
        </trans-unit>
        <trans-unit id="7d1d88ac1b2d8d3f2da955c81635c7da17ca0014" translate="yes" xml:space="preserve">
          <source>disallow `new` operators with calls to `require`</source>
          <target state="translated">`new` 연산자가`require`에 대한 호출을 허용하지 않음</target>
        </trans-unit>
        <trans-unit id="9ec7d64fc5e97179891e37537575f958c99ecfa8" translate="yes" xml:space="preserve">
          <source>disallow `new` operators with the `Function` object</source>
          <target state="translated">`Function` 객체로`new` 연산자를 허용하지 않습니다</target>
        </trans-unit>
        <trans-unit id="108d1784561e45b48bd68eb34d4e9c28c56abbc0" translate="yes" xml:space="preserve">
          <source>disallow `new` operators with the `String`, `Number`, and `Boolean` objects</source>
          <target state="translated">`String`,`Number` 및`Boolean` 객체로`new` 연산자를 허용하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="eaa5d250a29252aeea380ec642d48ddbfebc4653" translate="yes" xml:space="preserve">
          <source>disallow `new` operators with the `Symbol` object</source>
          <target state="translated">`Symbol` 객체로`new` 연산자를 허용하지 않습니다</target>
        </trans-unit>
        <trans-unit id="a3f2560a447abf7c21526fa2759db35979f2dad2" translate="yes" xml:space="preserve">
          <source>disallow `null` comparisons without type-checking operators</source>
          <target state="translated">타입 검사 연산자없이 널 (null) 비교를 허용하지 않습니다</target>
        </trans-unit>
        <trans-unit id="5afa1710be4e74694b527030d79597fa750bce93" translate="yes" xml:space="preserve">
          <source>disallow `parseInt()` and `Number.parseInt()` in favor of binary, octal, and hexadecimal literals</source>
          <target state="translated">2 진, 8 진 및 16 진 리터럴을 선호하는`parseInt ()`및`Number.parseInt ()`허용 안함</target>
        </trans-unit>
        <trans-unit id="ccf36ec884a67134d1943fbd9f4484502135f6f9" translate="yes" xml:space="preserve">
          <source>disallow `require` calls to be mixed with regular variable declarations</source>
          <target state="translated">`require` 호출이 일반 변수 선언과 혼합되는 것을 허용하지 않습니다</target>
        </trans-unit>
        <trans-unit id="e885d8264fe23a317944281a288548cc6336e6b8" translate="yes" xml:space="preserve">
          <source>disallow `this` keywords outside of classes or class-like objects</source>
          <target state="translated">클래스 나 클래스와 유사한 객체 외부에서`this` 키워드를 허용하지 않습니다</target>
        </trans-unit>
        <trans-unit id="3b4202215b79a89a34a26a25c95d366fcecef1ee" translate="yes" xml:space="preserve">
          <source>disallow `this`/`super` before calling `super()` in constructors</source>
          <target state="translated">생성자에서`super ()`를 호출하기 전에`this` /`super`를 허용하지 마십시오.</target>
        </trans-unit>
        <trans-unit id="6bd7200e4ef6ae3e032c7a0f2ab7b7b35fbc2269" translate="yes" xml:space="preserve">
          <source>disallow `void` operators</source>
          <target state="translated">`void` 연산자를 허용하지 않습니다</target>
        </trans-unit>
        <trans-unit id="8073d837792bdccc825320f2adf1fe72cc0233d7" translate="yes" xml:space="preserve">
          <source>disallow `with` statements</source>
          <target state="translated">`with` 진술을 금지하다</target>
        </trans-unit>
        <trans-unit id="2fd1fdb03b0df2701f91857884e9177d2c57e5b7" translate="yes" xml:space="preserve">
          <source>disallow all tabs</source>
          <target state="translated">모든 탭을 허용하지 않습니다</target>
        </trans-unit>
        <trans-unit id="8c0cf6289663934c3307c998aa133f01e028fa0e" translate="yes" xml:space="preserve">
          <source>disallow all tabs (no-tabs)</source>
          <target state="translated">모든 탭 허용 (탭 없음)</target>
        </trans-unit>
        <trans-unit id="6e1f56e8759442eaa9265c63f80816ab387ba7c6" translate="yes" xml:space="preserve">
          <source>disallow arrow functions where they could be confused with comparisons</source>
          <target state="translated">비교와 혼동 될 수있는 화살표 기능을 허용하지 않습니다</target>
        </trans-unit>
        <trans-unit id="b96710d97cf2a5be787dd7799df41130b78a3e77" translate="yes" xml:space="preserve">
          <source>disallow assigning to imported bindings</source>
          <target state="translated">가져온 바인딩에 할당 금지</target>
        </trans-unit>
        <trans-unit id="d5ad4605e1987f7ba9ea1dd7cf6a726260a4cb16" translate="yes" xml:space="preserve">
          <source>disallow assigning to imported bindings (no-import-assign)</source>
          <target state="translated">가져온 바인딩에 할당 금지 (가져 오기 불가 할당)</target>
        </trans-unit>
        <trans-unit id="61b564963f82b7d95a29494982c5c389edf374db" translate="yes" xml:space="preserve">
          <source>disallow assignment operators in `return` statements</source>
          <target state="translated">`return` 문장에서 할당 연산자를 허용하지 않습니다</target>
        </trans-unit>
        <trans-unit id="b99694ead734cc2e326f573be68e27338ee24076" translate="yes" xml:space="preserve">
          <source>disallow assignment operators in conditional expressions</source>
          <target state="translated">조건식에서 대입 연산자를 허용하지 않음</target>
        </trans-unit>
        <trans-unit id="2082f3bbc7e780842e99f58e0b66c62ac65f2a9e" translate="yes" xml:space="preserve">
          <source>disallow assignment operators in conditional statements (no-cond-assign)</source>
          <target state="translated">조건문에서 할당 연산자를 허용하지 않음 (무조건 할당)</target>
        </trans-unit>
        <trans-unit id="6a8801ac3f3a9610060fc283b78456743bdce635" translate="yes" xml:space="preserve">
          <source>disallow assignments that can lead to race conditions due to usage of `await` or `yield`</source>
          <target state="translated">`await` 또는`yield` 사용으로 인해 경쟁 조건으로 이어질 수있는 할당을 허용하지 않습니다</target>
        </trans-unit>
        <trans-unit id="8d2f4fe84fdf63541ef4df8eacb1ac7e5a453c82" translate="yes" xml:space="preserve">
          <source>disallow assignments to native objects or read-only global variables</source>
          <target state="translated">기본 객체 또는 읽기 전용 전역 변수에 대한 할당을 허용하지 않습니다</target>
        </trans-unit>
        <trans-unit id="287d156a309a594a4a7a16e15c0883ca62aa8605" translate="yes" xml:space="preserve">
          <source>disallow assignments where both sides are exactly the same</source>
          <target state="translated">양쪽이 정확히 같은 할당을 허용하지 않습니다</target>
        </trans-unit>
        <trans-unit id="ead5f07c3c32eb666e3a1077dfd3c515012167c2" translate="yes" xml:space="preserve">
          <source>disallow async functions which have no `await` expression</source>
          <target state="translated">`await` 표현식이없는 비동기 함수를 허용하지 않습니다</target>
        </trans-unit>
        <trans-unit id="8ff15126bb0272e9113ed155b8f2081cbde3e85c" translate="yes" xml:space="preserve">
          <source>disallow bitwise operators</source>
          <target state="translated">비트 연산자 금지</target>
        </trans-unit>
        <trans-unit id="6ff55908d2d2203b69b06a0c52584e7f1d9c60b5" translate="yes" xml:space="preserve">
          <source>disallow bitwise operators (no-bitwise)</source>
          <target state="translated">비트 연산자 허용 (비트 비트가 아님)</target>
        </trans-unit>
        <trans-unit id="8889c0584c52814c7d448e61d53eaf3c7614ab80" translate="yes" xml:space="preserve">
          <source>disallow calling global object properties as functions</source>
          <target state="translated">전역 객체 속성을 함수로 호출 할 수 없음</target>
        </trans-unit>
        <trans-unit id="ceec53c01177af174624e5ccc13ba35922d949d3" translate="yes" xml:space="preserve">
          <source>disallow calling global object properties as functions (no-obj-calls)</source>
          <target state="translated">전역 객체 속성을 함수 (no-obj-calls)로 호출 할 수 없음</target>
        </trans-unit>
        <trans-unit id="82872d0364e24fc85143280355cffe00bb4d775d" translate="yes" xml:space="preserve">
          <source>disallow calling some `Object.prototype` methods directly on objects</source>
          <target state="translated">객체에서 일부 'Object.prototype'메소드를 직접 호출하는 것을 허용하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="6b9977d6d7ce82c44944d9170e8e156341fb0ebd" translate="yes" xml:space="preserve">
          <source>disallow certain object properties (no-restricted-properties)</source>
          <target state="translated">특정 객체 속성을 허용하지 않음 (무제한 속성)</target>
        </trans-unit>
        <trans-unit id="e2fee193360183772f3eb451aefb0a7e125372a0" translate="yes" xml:space="preserve">
          <source>disallow certain properties on certain objects</source>
          <target state="translated">특정 객체의 특정 속성을 허용하지 않습니다</target>
        </trans-unit>
        <trans-unit id="cf84fe9500d51c6c0f8d86df71d88cd85bec2466" translate="yes" xml:space="preserve">
          <source>disallow characters which are made with multiple code points in character class syntax</source>
          <target state="translated">문자 클래스 구문에서 여러 코드 포인트로 작성된 문자를 허용하지 않음</target>
        </trans-unit>
        <trans-unit id="c03cf4dd4da82a793edc2b03fc8e9a63512a1b1b" translate="yes" xml:space="preserve">
          <source>disallow comma operators</source>
          <target state="translated">쉼표 연산자 허용 안함</target>
        </trans-unit>
        <trans-unit id="a97e31616648ae253f74f2d52574e88ea8eb19f4" translate="yes" xml:space="preserve">
          <source>disallow comparing against -0</source>
          <target state="translated">-0과 비교할 수 없음</target>
        </trans-unit>
        <trans-unit id="ba5f7571e8d4128cd77f3387858a4b4a760cd659" translate="yes" xml:space="preserve">
          <source>disallow comparing against -0 (no-compare-neg-zero)</source>
          <target state="translated">-0에 대한 비교를 허용하지 않음 (제로 없음 비교)</target>
        </trans-unit>
        <trans-unit id="30733513dc0c547094ecaaf4cedca314a039d0e7" translate="yes" xml:space="preserve">
          <source>disallow comparisons where both sides are exactly the same</source>
          <target state="translated">양쪽이 정확히 동일한 비교를 허용하지 않습니다</target>
        </trans-unit>
        <trans-unit id="574d4b4383bfa43facee1db9cf2de3699b898b71" translate="yes" xml:space="preserve">
          <source>disallow confusing multiline expressions</source>
          <target state="translated">혼란스러운 여러 줄 표현 금지</target>
        </trans-unit>
        <trans-unit id="0e4aaf1b0493f70a0b8ded536a234d063d3dc589" translate="yes" xml:space="preserve">
          <source>disallow confusing multiline expressions (no-unexpected-multiline)</source>
          <target state="translated">혼동되는 여러 줄 표현 금지 (예기치 않은 여러 줄)</target>
        </trans-unit>
        <trans-unit id="9209d6589c4f9c19c0df3d31abd9d4566974e45a" translate="yes" xml:space="preserve">
          <source>disallow constant expressions in conditions</source>
          <target state="translated">조건에서 상수 식을 허용하지 않음</target>
        </trans-unit>
        <trans-unit id="3420aa25a828f56eb072ed909f31990dae78d0e4" translate="yes" xml:space="preserve">
          <source>disallow constant expressions in conditions (no-constant-condition)</source>
          <target state="translated">조건에서 상수 표현식을 허용하지 않음 (일정하지 않은 조건)</target>
        </trans-unit>
        <trans-unit id="4b830eed8367e8526c6187118a16fd818fbac425" translate="yes" xml:space="preserve">
          <source>disallow control characters in regular expressions</source>
          <target state="translated">정규식에서 제어 문자를 허용하지 않음</target>
        </trans-unit>
        <trans-unit id="eaba2fc23e5acf772ff59d9c706a4e5c306a1033" translate="yes" xml:space="preserve">
          <source>disallow control characters in regular expressions (no-control-regex)</source>
          <target state="translated">정규식에서 제어 문자를 허용하지 않음 (no-control-regex)</target>
        </trans-unit>
        <trans-unit id="ecc03ed6d4d54fe3e8cb63f84844e9ae555bd76b" translate="yes" xml:space="preserve">
          <source>disallow control flow statements in &lt;code&gt;finally&lt;/code&gt; blocks (no-unsafe-finally)</source>
          <target state="translated">&lt;code&gt;finally&lt;/code&gt; 블록 에서 제어 흐름 설명을 허용하지 않음 (최종 안전하지 않음)</target>
        </trans-unit>
        <trans-unit id="16e31c1a7dfa8673583a16041df826ac5931464a" translate="yes" xml:space="preserve">
          <source>disallow control flow statements in `finally` blocks</source>
          <target state="translated">'최종'블록에서 제어 흐름 설명을 허용하지 않음</target>
        </trans-unit>
        <trans-unit id="8232667a93e41d561426d6975805d027608a23bc" translate="yes" xml:space="preserve">
          <source>disallow dangling underscores in identifiers</source>
          <target state="translated">식별자에 매달린 밑줄을 허용하지 않음</target>
        </trans-unit>
        <trans-unit id="e9f33ad24531c2cdbe05bbafaaf2460ddd10ac4b" translate="yes" xml:space="preserve">
          <source>disallow dangling underscores in identifiers (no-underscore-dangle)</source>
          <target state="translated">식별자에 매달린 밑줄 허용 (밑줄 없음)</target>
        </trans-unit>
        <trans-unit id="e16679c384435701f105f5b15576786141b61a83" translate="yes" xml:space="preserve">
          <source>disallow declarations in the global scope</source>
          <target state="translated">글로벌 범위에서 선언을 허용하지 않습니다</target>
        </trans-unit>
        <trans-unit id="2eff4b22395e12811d7a3c8f816ab5a8418c8660" translate="yes" xml:space="preserve">
          <source>disallow deleting variables</source>
          <target state="translated">변수 삭제 금지</target>
        </trans-unit>
        <trans-unit id="4f01114153b7b01df6e211858a41c3479e7b9fe5" translate="yes" xml:space="preserve">
          <source>disallow deleting variables (no-delete-var)</source>
          <target state="translated">변수 삭제 금지 (no-delete-var)</target>
        </trans-unit>
        <trans-unit id="93a7df659a0d7605764f4cde5734047792f8029e" translate="yes" xml:space="preserve">
          <source>disallow division operators explicitly at the beginning of regular expressions</source>
          <target state="translated">정규 표현식의 시작 부분에서 나누기 연산자를 명시 적으로 허용하지 않음</target>
        </trans-unit>
        <trans-unit id="5c66c8e072740063932c2eb7798617a8872052aa" translate="yes" xml:space="preserve">
          <source>disallow duplicate arguments in &lt;code&gt;function&lt;/code&gt; definitions (no-dupe-args)</source>
          <target state="translated">&lt;code&gt;function&lt;/code&gt; 정의 에서 중복 인수를 허용하지 않음 (무속 인수)</target>
        </trans-unit>
        <trans-unit id="5e806fbddb39cb8d7670416219d93806d53c81b4" translate="yes" xml:space="preserve">
          <source>disallow duplicate arguments in `function` definitions</source>
          <target state="translated">함수 정의에서 중복 인수를 허용하지 않음</target>
        </trans-unit>
        <trans-unit id="690a6b8dc5799010c42aa4d2c2f8e99d9eff70af" translate="yes" xml:space="preserve">
          <source>disallow duplicate case labels</source>
          <target state="translated">중복 사례 라벨을 허용하지 않음</target>
        </trans-unit>
        <trans-unit id="e42ab70c2221d2cdd3fc22d58477ca831caf916a" translate="yes" xml:space="preserve">
          <source>disallow duplicate class members</source>
          <target state="translated">중복 반원을 허용하지 않음</target>
        </trans-unit>
        <trans-unit id="ca762de1adae5bc68149daac151054d7858c93cb" translate="yes" xml:space="preserve">
          <source>disallow duplicate conditions in if-else-if chains</source>
          <target state="translated">if-else-if 체인에서 중복 조건을 허용하지 않습니다</target>
        </trans-unit>
        <trans-unit id="219f0c48ed1614f01da35d3038de8f5fbf2b7c93" translate="yes" xml:space="preserve">
          <source>disallow duplicate keys in object literals</source>
          <target state="translated">객체 리터럴에서 중복 키를 허용하지 않음</target>
        </trans-unit>
        <trans-unit id="75d6ed04c33041fc7c8463c6cc3602002882413b" translate="yes" xml:space="preserve">
          <source>disallow duplicate keys in object literals (no-dupe-keys)</source>
          <target state="translated">객체 리터럴에서 중복 키를 허용하지 않음 (무삭제 키)</target>
        </trans-unit>
        <trans-unit id="2b3400c890720145e748b4902a0bbfcfab1b059e" translate="yes" xml:space="preserve">
          <source>disallow duplicate module imports</source>
          <target state="translated">중복 모듈 가져 오기 금지</target>
        </trans-unit>
        <trans-unit id="28913afc1b68890ffb301f5aa275df4746bceea1" translate="yes" xml:space="preserve">
          <source>disallow empty block statements</source>
          <target state="translated">빈 블록 문을 허용하지 않습니다</target>
        </trans-unit>
        <trans-unit id="4091aecf7b64cb171b075fc835525fd865714baa" translate="yes" xml:space="preserve">
          <source>disallow empty block statements (no-empty)</source>
          <target state="translated">빈 블록 문을 허용하지 않음 (빈 없음)</target>
        </trans-unit>
        <trans-unit id="cb67c054d7ab45a9207557a17ed0e5ac7c350a36" translate="yes" xml:space="preserve">
          <source>disallow empty character classes in regular expressions</source>
          <target state="translated">정규식에서 빈 문자 클래스를 허용하지 않음</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
