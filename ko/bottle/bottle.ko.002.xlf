<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="bottle">
    <body>
      <group id="bottle">
        <trans-unit id="3f05bd815bc64ab3bc3175ce56a60867db2d7871" translate="yes" xml:space="preserve">
          <source>The last line tells Bottle to install the plugin to the default application. This causes the plugin to be automatically applied to all routes of that application. In other words, &lt;code&gt;stopwatch()&lt;/code&gt; is called once for each route callback and the return value is used as a replacement for the original callback.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d04873114709ee4836cabf076a18fff17fe06b7" translate="yes" xml:space="preserve">
          <source>The last point to do is to enable editing of existing items.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="472e2a57e19d59c4eddec46af306e99bad844af3" translate="yes" xml:space="preserve">
          <source>The main benefit is that the request handler terminates early. The handling thread can move on and accept new requests while the callbacks continue to write to sockets of previous requests. This is how these frameworks manage to process a lot of concurrent requests with only a small number of OS threads.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4bb22fedb53acb8311f23676f1430630c03378e0" translate="yes" xml:space="preserve">
          <source>The modified paths.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b55d5283becd2036045412ab850e0018a9305198" translate="yes" xml:space="preserve">
          <source>The module defines several functions, constants, and an exception.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ff613b353a32c9f833645bc313695851c21d793" translate="yes" xml:space="preserve">
          <source>The module-level &lt;a href=&quot;#bottle.request&quot;&gt;&lt;code&gt;bottle.request&lt;/code&gt;&lt;/a&gt; is a proxy object (implemented in &lt;a href=&quot;#bottle.LocalRequest&quot;&gt;&lt;code&gt;LocalRequest&lt;/code&gt;&lt;/a&gt;) and always refers to the &lt;code&gt;current&lt;/code&gt; request, or in other words, the request that is currently processed by the request handler in the current thread. This &lt;code&gt;thread locality&lt;/code&gt; ensures that you can safely use a global instance in a multi-threaded environment.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf71505a1047b5862ac2bc94cee226019a10f0b7" translate="yes" xml:space="preserve">
          <source>The module-level &lt;code&gt;install()&lt;/code&gt; and &lt;code&gt;uninstall()&lt;/code&gt; functions affect the &lt;a href=&quot;#default-app&quot;&gt;Default Application&lt;/a&gt;. To manage plugins for a specific application, use the corresponding methods on the &lt;a href=&quot;api#bottle.Bottle&quot;&gt;&lt;code&gt;Bottle&lt;/code&gt;&lt;/a&gt; application object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64c3d9d45899ed40133caac7e336415289947247" translate="yes" xml:space="preserve">
          <source>The name of the route (if specified) or &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58ce54e400f38f30e234a999baf1f5b9732a230e" translate="yes" xml:space="preserve">
          <source>The new rule syntax was introduce in &lt;strong&gt;Bottle 0.10&lt;/strong&gt; to simplify some common use cases, but the old syntax still works and you can find lot code examples still using it. The differences are best described by example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5391f56f8d4dd34274fc2b5065327514438c87e3" translate="yes" xml:space="preserve">
          <source>The new rule syntax was introduced in &lt;strong&gt;Bottle 0.10&lt;/strong&gt; to simplify some common use cases, but the old syntax still works and you can find a lot of code examples still using it. The differences are best described by example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e8f1a18da97ec1fdc1f4207bf72c9e4590bd543" translate="yes" xml:space="preserve">
          <source>The next step may is to catch the error with Bottle itself, to keep away any type of error message from the user of your application. To do that, Bottle has an &amp;ldquo;error-route&amp;rdquo;, which can be a assigned to a HTML-error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf675bce88de61640c2304b391973c2e50cb227f" translate="yes" xml:space="preserve">
          <source>The object-oriented approach is further described in the &lt;a href=&quot;#default-app&quot;&gt;Default Application&lt;/a&gt; section. Just keep in mind that you have a choice.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="140a1beb006443e6f28ad70e5632a27e7f4733cd" translate="yes" xml:space="preserve">
          <source>The ordering of this list is significant. You may for example return a subclass of &lt;a href=&quot;http://docs.python.org/library/functions.html#str&quot;&gt;&lt;code&gt;str&lt;/code&gt;&lt;/a&gt; with a &lt;code&gt;read()&lt;/code&gt; method. It is still treated as a string instead of a file, because strings are handled first.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5b911afe909021e27d14a63554527b72bef6c37" translate="yes" xml:space="preserve">
          <source>The original callback with no plugins applied. Useful for introspection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01c84aa73d0316262e1481b896427469bed0cf76" translate="yes" xml:space="preserve">
          <source>The path-rule string (e.g. &lt;code&gt;/wiki/:page&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a3557fd48c227d0085b25dccb57912d2bfcd7ed" translate="yes" xml:space="preserve">
          <source>The plugin API builds on the concept of &lt;a href=&quot;http://docs.python.org/glossary.html#term-decorator&quot;&gt;decorators&lt;/a&gt;. To put it briefly, a plugin is a decorator applied to every single route callback of an application.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7893c29e7145788924f9ffb3180a3f97e672fe5" translate="yes" xml:space="preserve">
          <source>The plugin is not applied to the route callbacks yet. This is delayed to make sure no routes are missed. You can install plugins first and add routes later, if you want to. The order of installed plugins is significant, though. If a plugin requires a database connection, you need to install the database plugin first.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b791ad877511dca238a4ca3a07cdf898fca0ccab" translate="yes" xml:space="preserve">
          <source>The query string (as in &lt;code&gt;/forum?id=1&amp;amp;page=5&lt;/code&gt;) is commonly used to transmit a small number of key/value pairs to the server. You can use the &lt;a href=&quot;api#bottle.BaseRequest.query&quot;&gt;&lt;code&gt;BaseRequest.query&lt;/code&gt;&lt;/a&gt; attribute (a &lt;a href=&quot;api#bottle.FormsDict&quot;&gt;&lt;code&gt;FormsDict&lt;/code&gt;&lt;/a&gt;) to access these values and the &lt;a href=&quot;api#bottle.BaseRequest.query_string&quot;&gt;&lt;code&gt;BaseRequest.query_string&lt;/code&gt;&lt;/a&gt; attribute to get the whole string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="569e5ec99938d698ef97ccd68edd5f7a9ec23a77" translate="yes" xml:space="preserve">
          <source>The raw &lt;a href=&quot;#bottle.BaseRequest.query&quot;&gt;&lt;code&gt;query&lt;/code&gt;&lt;/a&gt; part of the URL (everything in between &lt;code&gt;?&lt;/code&gt; and &lt;code&gt;#&lt;/code&gt;) as a string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bdab35d5c042b2721ca5089917ad2c80eee98a6f" translate="yes" xml:space="preserve">
          <source>The raw request body</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="013e6b9ce1f809f8e768f7b8c94458fa77762a62" translate="yes" xml:space="preserve">
          <source>The reloading depends on the ability to stop the child process. If you are running on Windows or any other operating system not supporting &lt;code&gt;signal.SIGINT&lt;/code&gt; (which raises &lt;code&gt;KeyboardInterrupt&lt;/code&gt; in Python), &lt;code&gt;signal.SIGTERM&lt;/code&gt; is used to kill the child. Note that exit handlers and finally clauses, etc., are not executed after a &lt;code&gt;SIGTERM&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="037ed18ba8506d9791f1b7f12de97f68e8192be6" translate="yes" xml:space="preserve">
          <source>The request body length as an integer. The client is responsible to set this header. Otherwise, the real length of the body is unknown and -1 is returned. In this case, &lt;a href=&quot;#bottle.BaseRequest.body&quot;&gt;&lt;code&gt;body&lt;/code&gt;&lt;/a&gt; will be empty.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5dea0cf5e78f99c7d9e0478ac0434afc61fb973e" translate="yes" xml:space="preserve">
          <source>The rest of this piece of code is just processing of the gained data: writing to the database, retrieve the corresponding id from the database and generate the output.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bba5523edeec11c3cbcbb26248f0be2c861ff36b" translate="yes" xml:space="preserve">
          <source>The route callback with all plugins applied. This property is created on demand and then cached to speed up subsequent requests.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ba7b4352dbc6eb908bceae990425115c36a5e77" translate="yes" xml:space="preserve">
          <source>The rule &lt;code&gt;/&amp;lt;action&amp;gt;/&amp;lt;item&amp;gt;&lt;/code&gt; matches as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b01d8c58b9c49391308d4b60922ebf4c3d305442" translate="yes" xml:space="preserve">
          <source>The rule string (e.g. &lt;code&gt;/wiki/:page&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21b547f5fc81fb460d3468dfce1ea82e0f971970" translate="yes" xml:space="preserve">
          <source>The simplest form of a wildcard consists of a name enclosed in angle brackets (e.g. &lt;code&gt;&amp;lt;name&amp;gt;&lt;/code&gt;). The name should be unique for a given route and form a valid python identifier (alphanumeric, starting with a letter). This is because wildcards are used as keyword arguments for the request callback later.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9ebe38a75163c600360dd074411e309a808b156" translate="yes" xml:space="preserve">
          <source>The template &lt;code&gt;edit_task.tpl&lt;/code&gt; called within the function looks like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6e6442fd08b84c38e4ed5b27ac005aa7413597b" translate="yes" xml:space="preserve">
          <source>The template engine allows you to embed lines or blocks of python code within your template. Code lines start with &lt;code&gt;%&lt;/code&gt; and code blocks are surrounded by &lt;code&gt;&amp;lt;%&lt;/code&gt; and &lt;code&gt;%&amp;gt;&lt;/code&gt; tokens:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ccd613dd169948dcad0704ae1aaafe52ec3d98ef" translate="yes" xml:space="preserve">
          <source>The template syntax is a very thin layer around the Python language. Its main purpose is to ensure correct indentation of blocks, so you can format your template without worrying about indentation. Follow the link for a full syntax description: &lt;a href=&quot;stpl&quot;&gt;SimpleTemplate Engine&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67c266a45e6151935f3d15b0af95c2d74e6234a9" translate="yes" xml:space="preserve">
          <source>The value of &lt;code&gt;PATH_INFO&lt;/code&gt; with exactly one prefixed slash (to fix broken clients and avoid the &amp;ldquo;empty path&amp;rdquo; edge case).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d85847bfa329fb1171939f8d6e73d32e1e6b7cf5" translate="yes" xml:space="preserve">
          <source>The values of &lt;a href=&quot;#bottle.BaseRequest.forms&quot;&gt;&lt;code&gt;forms&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#bottle.BaseRequest.files&quot;&gt;&lt;code&gt;files&lt;/code&gt;&lt;/a&gt; combined into a single &lt;a href=&quot;#bottle.FormsDict&quot;&gt;&lt;code&gt;FormsDict&lt;/code&gt;&lt;/a&gt;. Values are either strings (form values) or instances of &lt;code&gt;cgi.FieldStorage&lt;/code&gt; (file uploads).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e432e283133b97f7dafc36dd2ce0583548446b6c" translate="yes" xml:space="preserve">
          <source>The while-loop runs until the client closes the connection. You get the idea :)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9e41b041f206a620f1d48de0ac0344d24d5689e" translate="yes" xml:space="preserve">
          <source>The wrapped WSGI environ dictionary. This is the only real attribute. All other attributes actually are read-only properties.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73895ddb7c0e24078906486bf0fe5e27091bee2f" translate="yes" xml:space="preserve">
          <source>There are several other attributes used to access form data. Some of them combine values from different sources for easier access. The following table should give you a decent overview.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ade61b49a3005ebb6d5cb55657afe2410536678" translate="yes" xml:space="preserve">
          <source>There is no built-in support for sessions because there is no &lt;em&gt;right&lt;/em&gt; way to do it (in a micro framework). Depending on requirements and environment you could use &lt;a href=&quot;http://beaker.groovie.org/&quot;&gt;beaker&lt;/a&gt; middleware with a fitting backend or implement it yourself. Here is an example for beaker sessions with a file-based backend:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0fbd5950bc5482c12e75dbd1987af3aa741226bb" translate="yes" xml:space="preserve">
          <source>There may be cases where you do not want your application to generate the output directly, but return data to be processed further on, e.g. by JavaScript. For those cases, Bottle offers the possibility to return JSON objects, which is sort of standard for exchanging data between web applications. Furthermore, JSON can be processed by many programming languages, including Python</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47383ea7070398b48e42cf5344b94c14f6c29622" translate="yes" xml:space="preserve">
          <source>These chapters are intended for developers interested in the bottle development and release workflow.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef1efa715a19a76767e23be32cfc82fa6f8c8fc8" translate="yes" xml:space="preserve">
          <source>These produce an empty output with the &lt;code&gt;Content-Length&lt;/code&gt; header set to 0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97a499fc6489e4c1608ebef2e34e9b8cd021f993" translate="yes" xml:space="preserve">
          <source>This &lt;a href=&quot;#bottle.MultiDict&quot;&gt;&lt;code&gt;MultiDict&lt;/code&gt;&lt;/a&gt; subclass is used to store request form data. Additionally to the normal dict-like item access methods (which return unmodified data as native strings), this container also supports attribute-like access to its values. Attributes are automatically de- or recoded to match &lt;a href=&quot;#bottle.FormsDict.input_encoding&quot;&gt;&lt;code&gt;input_encoding&lt;/code&gt;&lt;/a&gt; (default: &amp;lsquo;utf8&amp;rsquo;). Missing attributes default to an empty string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="229c668abb46d0b0b35ed873fa0ecedaa262a500" translate="yes" xml:space="preserve">
          <source>This behavior is intended as a sane default, but can be overridden. The following example re-activates all plugins for a specific proxy-route:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="467341e0bb3ad77c6471df22a1ee5e9babbc50f7" translate="yes" xml:space="preserve">
          <source>This can be combined with the following &lt;code&gt;base.tpl&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4b2c15a0cbe42537675e5dbee488d899ce66159" translate="yes" xml:space="preserve">
          <source>This class does support dict-like case-insensitive item-access to headers, but is NOT a dict. Most notably, iterating over a response yields parts of the body and not the headers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3acb1048764709323551b9c22da312378d54e7cb" translate="yes" xml:space="preserve">
          <source>This class manages a list of search paths and helps to find and open application-bound resources (files).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84a780d032a9e93da4444e897d54d742f4f40cab" translate="yes" xml:space="preserve">
          <source>This class wraps a route callback along with route specific metadata and configuration and applies Plugins on demand. It is also responsible for turing an URL path rule into a regular expression usable by the Router.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10d4c8ab3d5158ae411d0f55447da9167fa127a4" translate="yes" xml:space="preserve">
          <source>This dict stores multiple values per key, but behaves exactly like a normal dict in that it returns only the newest value for any given key. There are special methods available to access the full list of values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26ff263b26858e1c316a6221fb954538ec930899" translate="yes" xml:space="preserve">
          <source>This dict-like class wraps a WSGI environ dict and provides convenient access to HTTP_* fields. Keys and values are native strings (2.x bytes or 3.x unicode) and keys are case-insensitive. If the WSGI environment contains non-native string values, these are de- or encoded using a lossless &amp;lsquo;latin1&amp;rsquo; character set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9adce9e9e3799ab801af538b6db0796adefe44a2" translate="yes" xml:space="preserve">
          <source>This example demonstrates two things: You can bind more than one route to a single callback, and you can add wildcards to URLs and access them via keyword arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82ba09ec5fc1df86ee18b723972d0b4c44e20b73" translate="yes" xml:space="preserve">
          <source>This feature is most useful for plugins. They can validate their config parameters or trigger side effects using filters and document their configuration via &lt;code&gt;help&lt;/code&gt; fields:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c83db15c1a14b1c1dee34f2ba638234b4698425" translate="yes" xml:space="preserve">
          <source>This generates a database-file &lt;code&gt;todo.db&lt;/code&gt; with tables called &lt;code&gt;todo&lt;/code&gt; and three columns &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;task&lt;/code&gt;, and &lt;code&gt;status&lt;/code&gt;. &lt;code&gt;id&lt;/code&gt; is a unique id for each row, which is used later on to reference the rows. The column &lt;code&gt;task&lt;/code&gt; holds the text which describes the task, it can be max 100 characters long. Finally, the column &lt;code&gt;status&lt;/code&gt; is used to mark a task as open (value 1) or closed (value 0).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6666d67facaf5ea7f9090332164ce6d445c3d350" translate="yes" xml:space="preserve">
          <source>This guide explains the plugin API and how to write custom plugins. I suggest reading &lt;a href=&quot;tutorial#plugins&quot;&gt;Plugins&lt;/a&gt; first if you have not done that already. You might also want to have a look at the &lt;a href=&quot;plugins/index&quot;&gt;List of available Plugins&lt;/a&gt; for some practical examples.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f913e5afca1ecc5e78c7fca61b35ff0fe6bffc61" translate="yes" xml:space="preserve">
          <source>This is a collection of code snippets and examples for common use cases.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10f43a0a774c92b0d60343a2e1eb2fc098d2238a" translate="yes" xml:space="preserve">
          <source>This is a draft. If you see any errors or find that a specific part is not explained clear enough, please tell the &lt;a href=&quot;mailto:bottlepy%40googlegroups.com&quot;&gt;mailing-list&lt;/a&gt; or file a &lt;a href=&quot;https://github.com/defnull/bottle/issues&quot;&gt;bug report&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09306d1e9c880512e51b859943f0c35107fa79a7" translate="yes" xml:space="preserve">
          <source>This is a list of third-party plugins that add extend Bottles core functionality or integrate other libraries with the Bottle framework.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77df5f1a0b185f51635ced2e0870f3e079bd7866" translate="yes" xml:space="preserve">
          <source>This is a mostly auto-generated API. If you are new to bottle, you might find the narrative &lt;a href=&quot;tutorial&quot;&gt;Tutorial&lt;/a&gt; more helpful.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7734a7b6fa68e867eb4674dcafab86aae989b14a" translate="yes" xml:space="preserve">
          <source>This is it. Run this script, visit &lt;a href=&quot;http://localhost:8080/hello&quot;&gt;http://localhost:8080/hello&lt;/a&gt; and you will see &amp;ldquo;Hello World!&amp;rdquo; in your browser. Here is how it works:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1287db8157257f274f2e23031e9ec6c12fbb2d7" translate="yes" xml:space="preserve">
          <source>This is not the recommend way (you should use a middleware in front of bottle to do this) but you can call other WSGI applications from within your bottle app and let bottle act as a pseudo-middleware. Here is an example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33649850ed75d74b71421a0f14b67cf3920d30cf" translate="yes" xml:space="preserve">
          <source>This is very convenient for small applications and saves you some typing, but also means that, as soon as your module is imported, routes are installed to the global application. To avoid this kind of import side-effects, Bottle offers a second, more explicit way to build applications:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b16d512b0abe04daf10c11555647905de7e9d1d0" translate="yes" xml:space="preserve">
          <source>This makes creating asynchronous applications incredibly easy, because they look and feel like synchronous applications. A gevent-based server is actually not asynchronous, but massively multi-threaded. Here is an example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1be7a8274ebcbd4a7c4171c9ebdcd3a2027af51f" translate="yes" xml:space="preserve">
          <source>This only works directly in front of code segments. In all other places you can control the whitespace yourself and don&amp;rsquo;t need any special syntax.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f27962dc481e90978ae9591fa6de076700c08f55" translate="yes" xml:space="preserve">
          <source>This plugin is actually useful and very similar to the version bundled with Bottle. Not bad for less than 60 lines of code, don&amp;rsquo;t you think? Here is a usage example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63f57e6debbf5d425ff86ec84b2c5806be97011c" translate="yes" xml:space="preserve">
          <source>This plugin measures the execution time for each request and adds an appropriate &lt;code&gt;X-Exec-Time&lt;/code&gt; header to the response. As you can see, the plugin returns a wrapper and the wrapper calls the original callback recursively. This is how decorators usually work.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05c93fb7f6f9f5c17417b0a80b5173f36d43f2c9" translate="yes" xml:space="preserve">
          <source>This plugin provides an sqlite3 database connection handle as an additional keyword argument to wrapped callbacks, but only if the callback expects it. If not, the route is ignored and no overhead is added. The wrapper does not affect the return value, but handles plugin-related exceptions properly. &lt;a href=&quot;#bottle.Plugin.setup&quot;&gt;&lt;code&gt;Plugin.setup()&lt;/code&gt;&lt;/a&gt; is used to inspect the application and search for conflicting plugins.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0bff7c8ab44e435fb549f3bc3764fce0df946ee1" translate="yes" xml:space="preserve">
          <source>This reads or sets the global settings stored in class.settings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="736c9455dfca6f294c0be54bd0ed37440e974ba9" translate="yes" xml:space="preserve">
          <source>This recipe is based upon the &lt;a href=&quot;http://devcenter.heroku.com/articles/quickstart&quot;&gt;Heroku Quickstart&lt;/a&gt;, with Bottle specific code replacing the &lt;a href=&quot;http://devcenter.heroku.com/articles/python#write_your_app&quot;&gt;Write Your App&lt;/a&gt; section of the &lt;a href=&quot;http://devcenter.heroku.com/articles/python&quot;&gt;Getting Started with Python on Heroku/Cedar&lt;/a&gt; guide:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f533332cb7158e256c604446c2005098f843b887" translate="yes" xml:space="preserve">
          <source>This snippet renders to clean and compact html:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0bb08f0074789a553fe9220dec84236cec8d2c1c" translate="yes" xml:space="preserve">
          <source>This storage is optimized for fast read access. Retrieving a key or using non-altering dict methods (e.g. &lt;code&gt;dict.get()&lt;/code&gt;) has no overhead compared to a native dict.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e96b25984df1681ec9e989ceeff26a3b9c2202d2" translate="yes" xml:space="preserve">
          <source>This tutorial assumes you have Bottle either &lt;a href=&quot;#installation&quot;&gt;installed&lt;/a&gt; or copied into your project directory. Let&amp;rsquo;s start with a very basic &amp;ldquo;Hello World&amp;rdquo; example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83237e6b5e4b708ba53384485d742a06d445214f" translate="yes" xml:space="preserve">
          <source>This tutorial introduces you to the concepts and features of the Bottle web framework and covers basic and advanced topics alike. You can read it from start to end, or use it as a reference later on. The automatically generated &lt;a href=&quot;api&quot;&gt;API Reference&lt;/a&gt; may be interesting for you, too. It covers more details, but explains less than this tutorial. Solutions for the most common questions can be found in our &lt;a href=&quot;recipes&quot;&gt;Recipes&lt;/a&gt; collection or on the &lt;a href=&quot;faq&quot;&gt;Frequently Asked Questions&lt;/a&gt; page. If you need any help, join our &lt;a href=&quot;mailto:bottlepy%40googlegroups.com&quot;&gt;mailing list&lt;/a&gt; or visit us in our &lt;a href=&quot;http://webchat.freenode.net/?channels=bottlepy&quot;&gt;IRC channel&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="992fd0ea8df12df0efd5d056c180c9ed8c9a2370" translate="yes" xml:space="preserve">
          <source>This tutorial is a work in progess and written by &lt;a href=&quot;http://github.com/noisefloor&quot;&gt;noisefloor&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="251c5415dcc555a965c16c8a456e1ad791d86805" translate="yes" xml:space="preserve">
          <source>This tutorial should give a brief introduction to the &lt;a href=&quot;http://bottle.paws.org&quot;&gt;Bottle&lt;/a&gt; WSGI Framework. The main goal is to be able, after reading through this tutorial, to create a project using Bottle. Within this document, not all abilities will be shown, but at least the main and important ones like routing, utilizing the Bottle template abilities to format output and handling GET / POST parameters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7b07ca8c8e9b94b7e950a34d914459277e1df7a" translate="yes" xml:space="preserve">
          <source>This will automatically detect changes to the script and reload the new version once it is called again, without the need to stop and start the server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db0843478a02b0e3f282ed437b82b2e18d2854ba" translate="yes" xml:space="preserve">
          <source>This will get you the latest development snapshot that includes all the new features. If you prefer a more stable environment, you should stick with the stable releases. These are available on &lt;a href=&quot;http://pypi.python.org/pypi/bottle&quot;&gt;PyPI&lt;/a&gt; and can be installed via &lt;strong&gt;pip&lt;/strong&gt; (recommended), &lt;strong&gt;easy_install&lt;/strong&gt; or your package manager:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e3075673514d3d5df60c9e8fb9a0b64ab162893" translate="yes" xml:space="preserve">
          <source>This will load the template file &lt;code&gt;hello_template.tpl&lt;/code&gt; and render it with the &lt;code&gt;name&lt;/code&gt; variable set. Bottle will look for templates in the &lt;code&gt;./views/&lt;/code&gt; folder or any folder specified in the &lt;code&gt;bottle.TEMPLATE_PATH&lt;/code&gt; list.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7c08cbe101b55ec65833d12f7c389f438055705" translate="yes" xml:space="preserve">
          <source>This works exactly the same way with &lt;code&gt;FlupServer&lt;/code&gt;, &lt;code&gt;CherryPyServer&lt;/code&gt; and &lt;code&gt;FapwsServer&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c106a16a3dcf99d5b2d8e09eba5949f4491fb0f8" translate="yes" xml:space="preserve">
          <source>This, and many other deployment options are described in a separate article: &lt;a href=&quot;deployment&quot;&gt;Deployment&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49ea3f930b5a01227a9157742ce3867f286c34f2" translate="yes" xml:space="preserve">
          <source>Thread-local property</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5112d7184f06128cb7587d4e585b7b282fdda5c" translate="yes" xml:space="preserve">
          <source>To access GET (or POST) data, we need to import &lt;code&gt;request&lt;/code&gt; from Bottle. To assign the actual data to a variable, we use the statement &lt;code&gt;request.GET.get('task','').strip()&lt;/code&gt; statement, where &lt;code&gt;task&lt;/code&gt; is the name of the GET data we want to access. That&amp;rsquo;s all. If your GET data has more than one variable, multiple &lt;code&gt;request.GET.get()&lt;/code&gt; statements can be used and assigned to other variables.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15d16c0760a336b781db159f7ed97c5a20943d1e" translate="yes" xml:space="preserve">
          <source>To achieve this, you need control over the callback cache: &lt;a href=&quot;api#bottle.Route.reset&quot;&gt;&lt;code&gt;Route.reset()&lt;/code&gt;&lt;/a&gt; clears the cache for a single route and &lt;a href=&quot;api#bottle.Bottle.reset&quot;&gt;&lt;code&gt;Bottle.reset()&lt;/code&gt;&lt;/a&gt; clears all caches for all routes of an application at once. On the next request, all plugins are re-applied to the route as if it were requested for the first time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3ffd7e3e8f974df12423679e4074bea307d3c4c" translate="yes" xml:space="preserve">
          <source>To change the IP address where Bottle is listening:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4628b54c19ea8a8c437c9f12d94addbd91e4ac46" translate="yes" xml:space="preserve">
          <source>To change the port, just add &lt;code&gt;port=portnumber&lt;/code&gt; to the run command. So, for example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80a53761e11b5bc605b2738abeb45f5463ef5d24" translate="yes" xml:space="preserve">
          <source>To do so, we first add a new route to our script and tell the route that it should get GET data:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3cf64a2cbd6ff70b2a6500ad8d2675f9f703aef9" translate="yes" xml:space="preserve">
          <source>To get your application available to the outside world, specify the IP of the interface the server should listen to (e.g. &lt;code&gt;run(host='192.168.0.1')&lt;/code&gt;) or let the server listen to all interfaces at once (e.g. &lt;code&gt;run(host='0.0.0.0')&lt;/code&gt;). The listening port can be changed in a similar way, but you need root or admin rights to choose a port below 1024. Port 80 is the standard for HTTP servers:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a52a8f9e73c43af5fe5b116b06602d0985b4387" translate="yes" xml:space="preserve">
          <source>To include the template in our example, just add the following lines:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="166b35740a5470e29948e7fde44c5920f8c32a30" translate="yes" xml:space="preserve">
          <source>To install a plugin, just call &lt;code&gt;install()&lt;/code&gt; with the plugin as first argument:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3cdd59dc17ceb1c3a2d44d579608a027a98c611b" translate="yes" xml:space="preserve">
          <source>To make life easier, plugins and applications should follow some simple rules when it comes to config parameter names:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad3adba67a7baf3672355a6fc3e72c4639f3df84" translate="yes" xml:space="preserve">
          <source>To redirect a client to a different URL, you can send a &lt;code&gt;303 See Other&lt;/code&gt; response with the &lt;code&gt;Location&lt;/code&gt; header set to the new URL. &lt;code&gt;redirect()&lt;/code&gt; does that for you:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d196d9cd7d7046cbe7471d5d051ccbb575ea75ed" translate="yes" xml:space="preserve">
          <source>To sum it up: HEAD requests fall back to GET routes and all requests fall back to ANY routes, but only if there is no matching route for the original request method. It&amp;rsquo;s as simple as that.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2847dfa59b39e2e62d5e3bd448bce30916210d5" translate="yes" xml:space="preserve">
          <source>To support file uploads, we have to change the &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; tag a bit. First, we tell the browser to encode the form data in a different way by adding an &lt;code&gt;enctype=&quot;multipart/form-data&quot;&lt;/code&gt; attribute to the &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; tag. Then, we add &lt;code&gt;&amp;lt;input type=&quot;file&quot; /&amp;gt;&lt;/code&gt; tags to allow the user to select a file. Here is an example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e5f831ee609f8b44a20b60aec308feffe449031" translate="yes" xml:space="preserve">
          <source>To understand the content here, it is not necessary to have a basic knowledge of WSGI, as Bottle tries to keep WSGI away from the user anyway. You should have a fair understanding of the &lt;a href=&quot;http://www.python.org&quot;&gt;Python&lt;/a&gt; programming language. Furthermore, the example used in the tutorial retrieves and stores data in a SQL databse, so a basic idea about SQL helps, but is not a must to understand the concepts of Bottle. Right here, &lt;a href=&quot;http://www.sqlite.org&quot;&gt;SQLite&lt;/a&gt; is used. The output of Bottle sent to the browser is formatted in some examples by the help of HTML. Thus, a basic idea about the common HTML tags does help as well.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="321fbc66aa248778c3348b79a0b27d4060084437" translate="yes" xml:space="preserve">
          <source>To use &lt;code&gt;MakoTemplate&lt;/code&gt; as your default template engine, just import its specialised decorator and render function:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f84bbc8ca391283a229028f548f1ced8381adf54" translate="yes" xml:space="preserve">
          <source>Trigger a hook and return a list of results.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc8fb6ea62ca72cbe8530c98c6d2589cc76da338" translate="yes" xml:space="preserve">
          <source>True if Chunked transfer encoding was.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b6933925666943cc638799d2ddeef6e74a38d20" translate="yes" xml:space="preserve">
          <source>True if the request was triggered by a XMLHttpRequest. This only works with JavaScript libraries that support the &lt;code&gt;X-Requested-With&lt;/code&gt; header (most of the popular libraries do).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aabb2986271672a123f55748f2c7d210453c2e68" translate="yes" xml:space="preserve">
          <source>Try to avoid the old syntax in future projects if you can. It is not currently deprecated, but will be eventually.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2701a94c0eb55cbd958a87dff3e959673ff1bf53" translate="yes" xml:space="preserve">
          <source>Tutorial</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d45ad648a14fd7ae4181a413dd8671f1ee1a34d" translate="yes" xml:space="preserve">
          <source>Tutorial: Todo-List Application</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e2d9b0777a485c1276de0803c12a7d76fbc5c39" translate="yes" xml:space="preserve">
          <source>URL</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86828104aad480fcc9e1071000ff315afe774e6f" translate="yes" xml:space="preserve">
          <source>Understanding routes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90ac7bb3b01b32e952ee295aa92163d24d25615d" translate="yes" xml:space="preserve">
          <source>Unicode strings</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93ed140ff524e6af0088b4d769964ad53f470a13" translate="yes" xml:space="preserve">
          <source>Unicode strings (or iterables yielding unicode strings) are automatically encoded with the codec specified in the &lt;code&gt;Content-Type&lt;/code&gt; header (utf8 by default) and then treated as normal byte strings (see below).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26c1f522c9c91190cd5ea339f09a7f3c17459e77" translate="yes" xml:space="preserve">
          <source>Uninstall Plugins</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94c9ff3ef6f8c57308d7ef2ca875c9512f3ab8a2" translate="yes" xml:space="preserve">
          <source>Uninstall plugins. Pass an instance to remove a specific plugin, a type object to remove all plugins that match that type, a string to remove all plugins with a matching &lt;code&gt;name&lt;/code&gt; attribute or &lt;code&gt;True&lt;/code&gt; to remove all plugins. Return the list of removed plugins.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="011dfd8ff83fd3b603bcb11b67f063458b92b30f" translate="yes" xml:space="preserve">
          <source>Unit-Testing Bottle Applications</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="453e83889f3ae25efaf3919ad4d3710fe70a75d3" translate="yes" xml:space="preserve">
          <source>Unit-testing is usually performed against methods defined in your web application without running a WSGI environment.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e37405daddda7cc61950cbd550940c6994562619" translate="yes" xml:space="preserve">
          <source>Usage of the template or server adapter classes of course requires the corresponding template or server modules.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94fd6d2cf2dbd7512b1df973bdd56e677457cfb2" translate="yes" xml:space="preserve">
          <source>Use a different server that is either multi-threaded or asynchronous.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cdbcc85b59e2fa3bd5873c0d45ca407de2a4f1a5" translate="yes" xml:space="preserve">
          <source>User&amp;rsquo;s Guide</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a32be0a7c841bd73d052c18775a549b30fe2a4f9" translate="yes" xml:space="preserve">
          <source>Using Bottle for a Web-Based ToDo List</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ba476521d0727083abe9910fddbc1927004db86" translate="yes" xml:space="preserve">
          <source>Using Bottle with Heroku</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1daf0ca7563593dec20cd84e90d2714acca466c5" translate="yes" xml:space="preserve">
          <source>Using GET and POST Values</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="578394d3577c461f01185797247e404e77f51916" translate="yes" xml:space="preserve">
          <source>Using dynamic routes is fine, but for many cases it makes sense to validate the dynamic part of the route. For example, we expect an integer number in our route for editing above. But if a float, characters or so are received, the Python interpreter throws an exception, which is not what we want.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae3d35e93e0f93abec193fb6a6b113d9c89c3e1e" translate="yes" xml:space="preserve">
          <source>Using the hooks plugin</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="359936c70836c3ff8ae5f7b70950e95d9ac759dd" translate="yes" xml:space="preserve">
          <source>Validating Dynamic Routes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b4857e0233b705134724da08c0f952ad4f82560" translate="yes" xml:space="preserve">
          <source>Verify and decode an encoded string. Return an object or None.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8869941c0890a55d337c977ad12476b81575155b" translate="yes" xml:space="preserve">
          <source>WSGI Environment</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="254545edde472f6994e2a30171f4c019b39c7a12" translate="yes" xml:space="preserve">
          <source>WSGI and HTTP Utilities</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d685c782bbf23ad3ec40541778d5dceb8bd5ef58" translate="yes" xml:space="preserve">
          <source>WSGI conform list of (header, value) tuples.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eaa052f4751a2ff2d5dfdce03a0f7d0d8ab2882e" translate="yes" xml:space="preserve">
          <source>WSGIHeaderDict</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="efdf966da6a56eb3353aa9da3bb2bddbfa2c94f4" translate="yes" xml:space="preserve">
          <source>WSGIHeaderDict::raw()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9c45563358e813f157ba81b33143542165ba84e" translate="yes" xml:space="preserve">
          <source>Warning</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92d3f163043b51bd940c19975e1032a04d0bcf88" translate="yes" xml:space="preserve">
          <source>Warning: Signed cookies are not encrypted (the client can still see the content) and not copy-protected (the client can restore an old cookie). The main intention is to make pickling and unpickling save, not to store secret information at client side.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7144c4e3bfcad8ce1d0b580a8543e0dd51687338" translate="yes" xml:space="preserve">
          <source>We assume that your Apache server is up and running and mod_wsgi is working fine as well. On a lot of Linux distributions, mod_wsgi can be easily installed via whatever package management system is in use.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99411abc1fb631f0203a2408d72a43958e8dba28" translate="yes" xml:space="preserve">
          <source>We have a growing &lt;a href=&quot;plugins/index&quot;&gt;List of available Plugins&lt;/a&gt; and most plugins are designed to be portable and re-usable across applications. The chances are high that your problem has already been solved and a ready-to-use plugin exists. If not, the &lt;a href=&quot;plugindev&quot;&gt;Plugin Development Guide&lt;/a&gt; may help you.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e840e7e0d94f710da6221b088347efe049efd215" translate="yes" xml:space="preserve">
          <source>We will end up with an application with the following pages and functionality:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4af291ec4e252da4f34ca2e16435e4676a523e3f" translate="yes" xml:space="preserve">
          <source>Web2py Dal integration for Bottle.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e7e69de18ab90771b235e6616afbd2460e20c65" translate="yes" xml:space="preserve">
          <source>What you will see in the browser is what is returned, thus the value given by the &lt;code&gt;return&lt;/code&gt; statement. In this example, we need to convert &lt;code&gt;result&lt;/code&gt; in to a string by &lt;code&gt;str()&lt;/code&gt;, as Bottle expects a string or a list of strings from the return statement. But here, the result of the database query is a list of tuples, which is the standard defined by the &lt;a href=&quot;http://www.python.org/dev/peps/pep-0249/&quot;&gt;Python DB API&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8c7f931c07ad999c7c48c278bb2ee385c967384" translate="yes" xml:space="preserve">
          <source>When you run your application via mod_wsgi, it is imperative to remove the &lt;code&gt;run()&lt;/code&gt; statement from your code, otherwise it won&amp;rsquo;t work here.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0ec53ff663836ceb52ca8bd3e579774c3397230" translate="yes" xml:space="preserve">
          <source>Whenever you mount an application, Bottle creates a proxy-route on the main-application that forwards all requests to the sub-application. Plugins are disabled for this kind of proxy-route by default. As a result, our (fictional) &lt;code&gt;WTForms&lt;/code&gt; plugin affects the &lt;code&gt;/contact&lt;/code&gt; route, but does not affect the routes of the &lt;code&gt;/blog&lt;/code&gt; sub-application.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef9aeacc0e2ffd83d3cf51e3d47fd25cf3e36e25" translate="yes" xml:space="preserve">
          <source>While some &lt;a href=&quot;api#bottle.Route&quot;&gt;&lt;code&gt;Route&lt;/code&gt;&lt;/a&gt; attributes are mutable, changes may have unwanted effects on other plugins. It is most likely a bad idea to monkey-patch a broken route instead of providing a helpful error message and let the user fix the problem.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e3fb6b9dddf2cf75633e30c42b159d65aafe736" translate="yes" xml:space="preserve">
          <source>Whitespace Control</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96c654391de847a99d71b1f1d8ca75a4700f1815" translate="yes" xml:space="preserve">
          <source>Wildcard Filters</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5be93facb119814bf7d4753472059b971cb20db6" translate="yes" xml:space="preserve">
          <source>With &lt;a href=&quot;#bottle.ConfigDict.load_config&quot;&gt;&lt;code&gt;ConfigDict.load_config()&lt;/code&gt;&lt;/a&gt; you can load these &lt;code&gt;*.ini&lt;/code&gt; style configuration files from disk and import their values into your existing configuration:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b68a421231f02f64ea3995f211362e5f098b205" translate="yes" xml:space="preserve">
          <source>With Gevent+WSGI, things are different: First, terminating early has no benefit because we have an unlimited pool of (pseudo)threads to accept new connections. Second, we cannot terminate early because that would close the socket (as required by WSGI). Third, we must return an iterable to conform to WSGI.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3567026868379caf3035d64405a47bc5b649b6d6" translate="yes" xml:space="preserve">
          <source>Wrap a WSGI environ dictionary.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d70b7d412b8cb8bf7af25ca8593ff39f1726cc8" translate="yes" xml:space="preserve">
          <source>Yield (header, value) tuples, skipping headers that are not allowed with the current response status code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3367e80231a6eb7d86ebfd1dc465e52ba240cfd5" translate="yes" xml:space="preserve">
          <source>Yield all Plugins affecting this route.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b45720ee4c6a4a131c422d4bea90646ba0023e7" translate="yes" xml:space="preserve">
          <source>You already learned the use of the &lt;code&gt;{{...}}&lt;/code&gt; syntax from the &amp;ldquo;Hello World!&amp;rdquo; example above, but there is more: any python expression is allowed within the curly brackets as long as it evaluates to a string or something that has a string representation:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9801f42108830f674bf2a4281daf051be7ef1fe4" translate="yes" xml:space="preserve">
          <source>You are allowed to use &lt;code&gt;yield&lt;/code&gt; within your callbacks or return an iterable, as long as the iterable yields byte strings, unicode strings, &lt;a href=&quot;api#bottle.HTTPError&quot;&gt;&lt;code&gt;HTTPError&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;api#bottle.HTTPResponse&quot;&gt;&lt;code&gt;HTTPResponse&lt;/code&gt;&lt;/a&gt; instances. Nested iterables are not supported, sorry. Please note that the HTTP status code and the headers are sent to the browser as soon as the iterable yields its first non-empty value. Changing these later has no effect.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb81d8e3897c19115ef1526fbc3e9ef6046f6a7a" translate="yes" xml:space="preserve">
          <source>You can access the raw body data as a file-like object via &lt;a href=&quot;api#bottle.BaseRequest.body&quot;&gt;&lt;code&gt;BaseRequest.body&lt;/code&gt;&lt;/a&gt;. This is a &lt;code&gt;BytesIO&lt;/code&gt; buffer or a temporary file depending on the content length and &lt;a href=&quot;api#bottle.BaseRequest.MEMFILE_MAX&quot;&gt;&lt;code&gt;BaseRequest.MEMFILE_MAX&lt;/code&gt;&lt;/a&gt; setting. In both cases the body is completely buffered before you can access the attribute. If you expect huge amounts of data and want to get direct unbuffered access to the stream, have a look at &lt;code&gt;request['wsgi.input']&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b1cac64bf876c603679d4fc2cc26748f650405c" translate="yes" xml:space="preserve">
          <source>You can add your own filters as well. See &lt;code&gt;Routing&lt;/code&gt; for details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad06c1635cdfe02d346a1c61ee2258918ebae6b7" translate="yes" xml:space="preserve">
          <source>You can add your own filters to the router. All you need is a function that returns three elements: A regular expression string, a callable to convert the URL fragment to a python value, and a callable that does the opposite. The filter function is called with the configuration string as the only parameter and may parse it as needed:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4347683b60abaedf673f246b544449227495891a" translate="yes" xml:space="preserve">
          <source>You can also use the &lt;code&gt;before_request&lt;/code&gt; to take an action before every function gets called.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7331b9ccce1d761e185da5888df1449e4a03cbf" translate="yes" xml:space="preserve">
          <source>You can change the exact behaviour in many ways using filters. This is described in the next section.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59a79f8e2d12804b237c84f6d3867dfa949eabd0" translate="yes" xml:space="preserve">
          <source>You can directly return file objects, but &lt;code&gt;static_file()&lt;/code&gt; is the recommended way to serve static files. It automatically guesses a mime-type, adds a &lt;code&gt;Last-Modified&lt;/code&gt; header, restricts paths to a &lt;code&gt;root&lt;/code&gt; directory for security reasons and generates appropriate error responses (403 on permission errors, 404 on missing files). It even supports the &lt;code&gt;If-Modified-Since&lt;/code&gt; header and eventually generates a &lt;code&gt;304 Not Modified&lt;/code&gt; response. You can pass a custom MIME type to disable guessing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c87abbf485356c97335ce7ded90804a56604dc1d" translate="yes" xml:space="preserve">
          <source>You can either manually install Bottle or use Python&amp;rsquo;s easy_install: &lt;code&gt;easy_install bottle&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd140198c3ad8e63c55de64dd8e05c5c55d74f72" translate="yes" xml:space="preserve">
          <source>You can raise the return value of &lt;code&gt;static_file()&lt;/code&gt; as an exception if you really need to.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f31d442e9367f700b4f4797349e3fe5570785c6c" translate="yes" xml:space="preserve">
          <source>You can use a name, class or instance to &lt;code&gt;uninstall()&lt;/code&gt; a previously installed plugin:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="062c73cd0144bf9d7e2706aa1715bfc387267986" translate="yes" xml:space="preserve">
          <source>You can write your own adapter for your favourite template engine or use one of the predefined adapters. Currently there are four fully supported template engines:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7da89368d068ad3a533aa1b1282cfddd2c0242e" translate="yes" xml:space="preserve">
          <source>You may provide a different HTTP status code as a second parameter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45bee7cbf3e2fad4e4323fd6e4dce7eefee440f5" translate="yes" xml:space="preserve">
          <source>You may want to explicitly disable a plugin for a number of routes. The &lt;a href=&quot;api#bottle.route&quot;&gt;&lt;code&gt;route()&lt;/code&gt;&lt;/a&gt; decorator has a &lt;code&gt;skip&lt;/code&gt; parameter for this purpose:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="113905791e0533eb2c728fff4f1cf5e9721330af" translate="yes" xml:space="preserve">
          <source>Your own application should use a separate namespace (e.g. &lt;code&gt;myapp.*&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f203d790d7d6f05e71c17b15d47b244124bc4c6b" translate="yes" xml:space="preserve">
          <source>adding new items to the list: &lt;code&gt;http://localhost:8080/new&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75daa03402efdd3a94aa815bc9a2a0e00c19e5d5" translate="yes" xml:space="preserve">
          <source>after_request</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="811dcdf57af401faec9e044488b7bd46dc4d6b3c" translate="yes" xml:space="preserve">
          <source>alias of &lt;a href=&quot;#bottle.BaseRequest&quot;&gt;&lt;code&gt;BaseRequest&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef649a1e88ec48ce3dcbbf5c7f0ffc24605d9a0f" translate="yes" xml:space="preserve">
          <source>alias of &lt;a href=&quot;#bottle.BaseResponse&quot;&gt;&lt;code&gt;BaseResponse&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0491df0f215614fe730c68581d199641b1c16eab" translate="yes" xml:space="preserve">
          <source>and save it in the same path, &lt;code&gt;/var/www/todo&lt;/code&gt;. Actually the name of the file can be anything, as long as the extension is &lt;code&gt;.wsgi&lt;/code&gt;. The name is only used to reference the file from your virtual host.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d1043473d55bfa90e8530d35801d4e381bc69f0" translate="yes" xml:space="preserve">
          <source>app</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c83f1f5829ef91e20b92b78798a2c99b3393b74b" translate="yes" xml:space="preserve">
          <source>app()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe82155bae28116971fc85490bc175257aac7ad6" translate="yes" xml:space="preserve">
          <source>app_reset</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d612c12d2ac33625bf3e0351b6f5e4f73829fa8" translate="yes" xml:space="preserve">
          <source>auto</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7aadf8fdfc1ef2331a37f98413e6de9feb8093e8" translate="yes" xml:space="preserve">
          <source>before_request</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a31805f6001ab3b535ea95133fbc4db46e97e8d1" translate="yes" xml:space="preserve">
          <source>bjoern</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4d5b37bf7a986c138ede89e0806f366b5cb1830" translate="yes" xml:space="preserve">
          <source>callback</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4acdb3ad6a28f9d09b7623b333da8fa63249da7" translate="yes" xml:space="preserve">
          <source>catching errors</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27b4d0f8ee1e61a07904f1afd558aa878973f2d1" translate="yes" xml:space="preserve">
          <source>cgi</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57ed5d98cce71967d508cb785aa76d2c23894347" translate="yes" xml:space="preserve">
          <source>cherrypy</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dfba7aade0868074c2861c98e2a9a92f3178a51b" translate="yes" xml:space="preserve">
          <source>config</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24e8dc3172f56a9e62b2ac2c68ed550fd5db6e93" translate="yes" xml:space="preserve">
          <source>cookie_decode()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a094e29fa8eac27d40d318b2fc75490bf222c3cd" translate="yes" xml:space="preserve">
          <source>cookie_encode()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20b325df9fa3c34d9daec04a11f56ed393cb7202" translate="yes" xml:space="preserve">
          <source>cookie_is_encoded()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c7594cc6b050fbac7c5b12fa905411430e20a9a" translate="yes" xml:space="preserve">
          <source>debug()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b56ad4352ac64195dfdeec746afce440701027d2" translate="yes" xml:space="preserve">
          <source>defined()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90cf16d678e8c6f00804f1cd5f9f0e7757b13993" translate="yes" xml:space="preserve">
          <source>diesel</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aca90d914519fdb9825352bdc0befb59f7c8510f" translate="yes" xml:space="preserve">
          <source>error()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ed8ea22373854abc813c27b8d1f6e7a98520a4e" translate="yes" xml:space="preserve">
          <source>eventlet</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="964cf2c901a58b9600a46d04a32803f6773e34c8" translate="yes" xml:space="preserve">
          <source>fapws3</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4bb4ca75941b7bbc5bc6a12be44b22fc9c8d234e" translate="yes" xml:space="preserve">
          <source>filter</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8664b63657e9106f87a107be2e3b45d4b4b6cc3e" translate="yes" xml:space="preserve">
          <source>flash plugin for bottle</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a54c11c850942da9140a2261750d98fbd429fdc" translate="yes" xml:space="preserve">
          <source>flup</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2e27618bb92ea5fd1493f8dd503add0447f61a8" translate="yes" xml:space="preserve">
          <source>gae</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a79533a2233d37071096ed5d29c1e9ac6cf66e6" translate="yes" xml:space="preserve">
          <source>get()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de9dd9562653655041cf7a809fcfb2178e4ec60e" translate="yes" xml:space="preserve">
          <source>gevent</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4dda27ec95a2c51a1bbfd235143a0adc4f51cf60" translate="yes" xml:space="preserve">
          <source>gunicorn</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92005ecf3788faea8346a7919fba0232188561ab" translate="yes" xml:space="preserve">
          <source>help</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86c2d513f250be3984b3ac5733cf9c5b817cc800" translate="yes" xml:space="preserve">
          <source>include()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94ea5f589396df68c37d6c28efac0a817a2fa0ce" translate="yes" xml:space="preserve">
          <source>load()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab6e3f06196d3579bdd29c145de0cdea113a7fd5" translate="yes" xml:space="preserve">
          <source>load_app()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="290ce43e9a82bd37c70bbd6bbb41c5a61d85bb2c" translate="yes" xml:space="preserve">
          <source>meinheld</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bfbaf8b2d1cdf92bf83857fe1748c0f68de03d47" translate="yes" xml:space="preserve">
          <source>method</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ae999552a0d2dca14d62e2bc8b764d377b1dd6c" translate="yes" xml:space="preserve">
          <source>name</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd1286353570c5703799ba76999323b7c7447b06" translate="yes" xml:space="preserve">
          <source>no</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="818d90713dc54fe481a6c0ab7fc2c2a9cb6547c1" translate="yes" xml:space="preserve">
          <source>or add a WSGI middleware that strips trailing slashes from all URLs:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0bd88fa7e3b742c4023df1cc0e90291ee25cbca8" translate="yes" xml:space="preserve">
          <source>page for editing items: &lt;code&gt;http://localhost:8080/edit/:no&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="deb866148d8d30519a465f3b1d65213af906ce8b" translate="yes" xml:space="preserve">
          <source>parse_auth()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54fdb1a9720f3519a2d2affe6d7a5d3abbef3dad" translate="yes" xml:space="preserve">
          <source>parse_date()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43bce7a87dd0e4b8c09b44173613bc95ba77d714" translate="yes" xml:space="preserve">
          <source>paste</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95c4e181abf64b5e936c498d2c43ab32726b8470" translate="yes" xml:space="preserve">
          <source>path_shift()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="440c3339cb056522cd1edf391e616ceb636e1a08" translate="yes" xml:space="preserve">
          <source>plugins</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d6f7ac901e5d04c6371875e27569749eefe8567" translate="yes" xml:space="preserve">
          <source>rebase()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14bdaf2c878209d944d81a54d773db2719f0113c" translate="yes" xml:space="preserve">
          <source>return a dict of template vars to fill out the template</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6012a6e6d35d6ba43ee41dc4cc717f61b24c45cd" translate="yes" xml:space="preserve">
          <source>return something other than a dict and the view decorator will not process the template, but return the handler result as is. This includes returning a HTTPResponse(dict) to get, for instance, JSON with autojson or other castfilters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef89a3a842b0384565a210f0122804f411fe51fb" translate="yes" xml:space="preserve">
          <source>rocket</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88e8b45994b813eb69a17874d0858982a9387f86" translate="yes" xml:space="preserve">
          <source>route()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f400122e37da3a462df347caac2be31d74be730" translate="yes" xml:space="preserve">
          <source>rule</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f805aaf52532959faf0be97c80abde3c8ae5e849" translate="yes" xml:space="preserve">
          <source>run()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="186e7e139d002714805331e77d5e7a3112f55f90" translate="yes" xml:space="preserve">
          <source>setdefault()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="abd0c274ede56d5c6f17be89ad32e3054098fad0" translate="yes" xml:space="preserve">
          <source>skiplist</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e5705665c28bfaa038e11d9138cd855a8d25b6b" translate="yes" xml:space="preserve">
          <source>so bottle searches the right paths.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a4ac62ca9d7db8c777de3e3f6f52a29156cc782" translate="yes" xml:space="preserve">
          <source>start page &lt;code&gt;http://localhost:8080/todo&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0bef18596fd84c20a131098dcb6f2778a4db20a7" translate="yes" xml:space="preserve">
          <source>template()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="474446ad24ee5490f8e879012ee2a855a7c7bf56" translate="yes" xml:space="preserve">
          <source>tornado</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="986f16f209e651c1a0f22c4010f329b8079f7fa4" translate="yes" xml:space="preserve">
          <source>twisted</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9accc21bb6501091860b4b6959780198f8935f0" translate="yes" xml:space="preserve">
          <source>validating data assigned by dynamic routes with the @validate decorator</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="145313cb43507ac1c8d47fc8da314899ad73fdd3" translate="yes" xml:space="preserve">
          <source>vice versa.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2540eae99824b579af30b949d544a727b977425b" translate="yes" xml:space="preserve">
          <source>view()</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1aed88e4a7e5cd305f613756678093e95c870924" translate="yes" xml:space="preserve">
          <source>waitress</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f29a29af63cb79cb0e113c9d4d7ed052368552d" translate="yes" xml:space="preserve">
          <source>will work fine, too. What will not work is to bind one route to more than one function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="242a44ec7e29dc38038e17cb7f27abfebbb92fc4" translate="yes" xml:space="preserve">
          <source>works fine, the following one as well:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1bb0af006484d47426b8626c8a83e7dec230345" translate="yes" xml:space="preserve">
          <source>would make Bottle listen to port 80.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc7b0ed7576dd4d42b349ceea389f65b16acabe2" translate="yes" xml:space="preserve">
          <source>wsgiref</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb360f9c09ac8c5edb2f18be5de4e80ea4c430d0" translate="yes" xml:space="preserve">
          <source>yes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="264f54d9f052a761c88f49edbe69d1315ae11ac7" translate="yes" xml:space="preserve">
          <source>yieldroutes()</source>
          <target state="new"/>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
