<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="ember">
    <body>
      <group id="ember">
        <trans-unit id="afd90f800629f2394b902ad7c46571f055d29df6" translate="yes" xml:space="preserve">
          <source>$ (selector) JQuerypublic</source>
          <target state="translated">$ (selector) JQuerypublic</target>
        </trans-unit>
        <trans-unit id="7ad5b47ca975d96f6b83940832507684f5bf7107" translate="yes" xml:space="preserve">
          <source>$public</source>
          <target state="translated">$public</target>
        </trans-unit>
        <trans-unit id="2bfa34271847bee75bf7a64e2a041f7ec99e8db3" translate="yes" xml:space="preserve">
          <source>&amp;copy; 2017 Yehuda Katz, Tom Dale and Ember.js contributors</source>
          <target state="translated">&amp;copy; 2017 Yehuda Katz, Tom Dale and Ember.js contributors</target>
        </trans-unit>
        <trans-unit id="8ba23f27f97dd77c72ac0e85b88dd9c27c2e081f" translate="yes" xml:space="preserve">
          <source>'identity'</source>
          <target state="translated">'identity'</target>
        </trans-unit>
        <trans-unit id="fee7ea95005925c7f93792ef0bda676ab556f4e6" translate="yes" xml:space="preserve">
          <source>'top navigation' with 'sub navigation' scenarios</source>
          <target state="translated">'top navigation' with 'sub navigation' scenarios</target>
        </trans-unit>
        <trans-unit id="69a128a1597d3fee8df9c8ea2f3e104f4da48577" translate="yes" xml:space="preserve">
          <source>(DS.Snapshot|Array)</source>
          <target state="translated">(DS.Snapshot|Array)</target>
        </trans-unit>
        <trans-unit id="e07a3f6a8deca62d37b6ce33ec322ede207d799f" translate="yes" xml:space="preserve">
          <source>(Optional) index to begin slicing from.</source>
          <target state="translated">(Optional) index to begin slicing from.</target>
        </trans-unit>
        <trans-unit id="aa8be7acd5454c5f064c0144e0577783d5fd34a8" translate="yes" xml:space="preserve">
          <source>(Optional) index to end the slice at (but not included).</source>
          <target state="translated">(Optional) index to end the slice at (but not included).</target>
        </trans-unit>
        <trans-unit id="5202448800cae538155d3ce37d8ef008413b69a6" translate="yes" xml:space="preserve">
          <source>(String|Array|Object)</source>
          <target state="translated">(String|Array|Object)</target>
        </trans-unit>
        <trans-unit id="83a9bc8480e986e64a3e5424db91d439e44cf9ad" translate="yes" xml:space="preserve">
          <source>(String|Integer)</source>
          <target state="translated">(String|Integer)</target>
        </trans-unit>
        <trans-unit id="e988009be10b30d92fd8fce8098b33fc86a27789" translate="yes" xml:space="preserve">
          <source>(String|Number)</source>
          <target state="translated">(String|Number)</target>
        </trans-unit>
        <trans-unit id="1542152a79ae7b23f685f1ace0382aba4e45a6d9" translate="yes" xml:space="preserve">
          <source>(To stop the server at any time, type Ctrl-C in your terminal.)</source>
          <target state="translated">(To stop the server at any time, type Ctrl-C in your terminal.)</target>
        </trans-unit>
        <trans-unit id="433602d14ad96b3d6e8fa32bf7809b4a5980423e" translate="yes" xml:space="preserve">
          <source>(e.g., App.Person)</source>
          <target state="translated">(e.g., App.Person)</target>
        </trans-unit>
        <trans-unit id="e5b272adff940688bf209175409c1755f3bdcd7a" translate="yes" xml:space="preserve">
          <source>(events)</source>
          <target state="translated">(events)</target>
        </trans-unit>
        <trans-unit id="c1b822de97643ccd4ef477058c74a2636780344e" translate="yes" xml:space="preserve">
          <source>(methods)</source>
          <target state="translated">(methods)</target>
        </trans-unit>
        <trans-unit id="b16c7ac6faff07d7e255da685e52bd66d3bf1575" translate="yes" xml:space="preserve">
          <source>(optional)</source>
          <target state="translated">(optional)</target>
        </trans-unit>
        <trans-unit id="0ab17c55be6fce55674c325ea764faf67c838936" translate="yes" xml:space="preserve">
          <source>(optional) a hash of options</source>
          <target state="translated">(optional) a hash of options</target>
        </trans-unit>
        <trans-unit id="1632fa33dd3478fc00177535ab0f0e3490587f11" translate="yes" xml:space="preserve">
          <source>(optional) disable instantiation or singleton usage</source>
          <target state="translated">(optional) disable instantiation or singleton usage</target>
        </trans-unit>
        <trans-unit id="ff4ff98cb7b85f90f10dd93fa8988f79a50da5ff" translate="yes" xml:space="preserve">
          <source>(optional) jQuery selector that will limit the selector argument to find only within the context's children</source>
          <target state="translated">(optional) jQuery selector that will limit the selector argument to find only within the context's children</target>
        </trans-unit>
        <trans-unit id="9f4808b61ca09a3bdeb042f6c0ae5dc9b34921ab" translate="yes" xml:space="preserve">
          <source>(optional) name of the controller to inject, defaults to the property's name</source>
          <target state="translated">(optional) name of the controller to inject, defaults to the property's name</target>
        </trans-unit>
        <trans-unit id="99d6c8fed0109f920bb130be6cb9c9991abc21ad" translate="yes" xml:space="preserve">
          <source>(optional) name of the service to inject, defaults to the property's name</source>
          <target state="translated">(optional) name of the service to inject, defaults to the property's name</target>
        </trans-unit>
        <trans-unit id="a8826ca98379807a5ad95546c5671719c8214e15" translate="yes" xml:space="preserve">
          <source>(optional) type of the relationship</source>
          <target state="translated">(optional) type of the relationship</target>
        </trans-unit>
        <trans-unit id="2ee0c01fae9988e502ef997c0ba4530e4e2d6fb7" translate="yes" xml:space="preserve">
          <source>(properties)</source>
          <target state="translated">(properties)</target>
        </trans-unit>
        <trans-unit id="d110b540beafd1e2a5387be6777876649be8c27b" translate="yes" xml:space="preserve">
          <source>- function to be called on each resolved value to filter the final results.</source>
          <target state="translated">- function to be called on each resolved value to filter the final results.</target>
        </trans-unit>
        <trans-unit id="6432ca5ae72b5497347728b9309d2562de0a8564" translate="yes" xml:space="preserve">
          <source>- optional string that describes the promise. Useful for tooling.</source>
          <target state="translated">- optional string that describes the promise. Useful for tooling.</target>
        </trans-unit>
        <trans-unit id="921ae5a7a3ac5fa640f14a518fe9b60a20b36a9b" translate="yes" xml:space="preserve">
          <source>- the original request information</source>
          <target state="translated">- the original request information</target>
        </trans-unit>
        <trans-unit id="aee82259f4d110878fc6aa1b613100544ef5026f" translate="yes" xml:space="preserve">
          <source>-1 if the first is smaller than the second,</source>
          <target state="translated">-1 if the first is smaller than the second,</target>
        </trans-unit>
        <trans-unit id="7129b8b7e61516593db5496d35f0f425c6f8537c" translate="yes" xml:space="preserve">
          <source>-1 if v &amp;lt; w, 0 if v = w and 1 if v &amp;gt; w.</source>
          <target state="translated">-1 if v &amp;lt; w, 0 if v = w and 1 if v &amp;gt; w.</target>
        </trans-unit>
        <trans-unit id="410e7990b54199a46e5163aee3a4bcd539697d75" translate="yes" xml:space="preserve">
          <source>...Object</source>
          <target state="translated">...Object</target>
        </trans-unit>
        <trans-unit id="e1d3847afa9af1bd3aa0dcbae48316effda7b5bf" translate="yes" xml:space="preserve">
          <source>...and this HTML when a title of &quot;Ember JS&quot; is passed to the component:</source>
          <target state="translated">...and this HTML when a title of &quot;Ember JS&quot; is passed to the component:</target>
        </trans-unit>
        <trans-unit id="19e0a939acd1228061f349746be86f1189303df1" translate="yes" xml:space="preserve">
          <source>.@each</source>
          <target state="translated">.@each</target>
        </trans-unit>
        <trans-unit id="d9d17ac7f7c28febf4cd18a15a7ae2a2219fdfbd" translate="yes" xml:space="preserve">
          <source>.Adapter</source>
          <target state="translated">.Adapter</target>
        </trans-unit>
        <trans-unit id="7668ce48bdd7ca0424c5fe9236d75884ca9d5fd2" translate="yes" xml:space="preserve">
          <source>.Adapter (methods)</source>
          <target state="translated">.Adapter (methods)</target>
        </trans-unit>
        <trans-unit id="9060a99e261cf6bfaea630fbb6f1069eee1bbec3" translate="yes" xml:space="preserve">
          <source>.Adapter.asyncEnd()</source>
          <target state="translated">.Adapter.asyncEnd()</target>
        </trans-unit>
        <trans-unit id="5dd6eb87dd78b489e4de1f345aee7b56294a2be4" translate="yes" xml:space="preserve">
          <source>.Adapter.asyncStart()</source>
          <target state="translated">.Adapter.asyncStart()</target>
        </trans-unit>
        <trans-unit id="533b060a2e002b516156b61218bd9184327778a3" translate="yes" xml:space="preserve">
          <source>.Adapter.exception()</source>
          <target state="translated">.Adapter.exception()</target>
        </trans-unit>
        <trans-unit id="a53155d282762217cad9f95d254c87d3ebe5a9d9" translate="yes" xml:space="preserve">
          <source>.BootOptions</source>
          <target state="translated">.BootOptions</target>
        </trans-unit>
        <trans-unit id="589a92bf5960fa418a437b95414a822fffaa964b" translate="yes" xml:space="preserve">
          <source>.BootOptions (properties)</source>
          <target state="translated">.BootOptions (properties)</target>
        </trans-unit>
        <trans-unit id="279f587bff69246088b9942c59ee490d662a90ca" translate="yes" xml:space="preserve">
          <source>.BootOptions.document</source>
          <target state="translated">.BootOptions.document</target>
        </trans-unit>
        <trans-unit id="633d2092809173844c1bd09d916e39d8d82c509b" translate="yes" xml:space="preserve">
          <source>.BootOptions.isBrowser</source>
          <target state="translated">.BootOptions.isBrowser</target>
        </trans-unit>
        <trans-unit id="fa1a53f092f07e7a527c21afb35d5746999d8fec" translate="yes" xml:space="preserve">
          <source>.BootOptions.location</source>
          <target state="translated">.BootOptions.location</target>
        </trans-unit>
        <trans-unit id="dafb35b4bc7f15b43ce9d9e8b1c60a3f88fd1a37" translate="yes" xml:space="preserve">
          <source>.BootOptions.rootElement</source>
          <target state="translated">.BootOptions.rootElement</target>
        </trans-unit>
        <trans-unit id="28fab097943776b7b239b7a85a2f4e1330c8e986" translate="yes" xml:space="preserve">
          <source>.BootOptions.shouldRender</source>
          <target state="translated">.BootOptions.shouldRender</target>
        </trans-unit>
        <trans-unit id="4d1da1f82e195fc4cd2c2e295420617bacb809f0" translate="yes" xml:space="preserve">
          <source>.EventTarget</source>
          <target state="translated">.EventTarget</target>
        </trans-unit>
        <trans-unit id="032888fc509a42902f1fc2e0aa20a989280ea372" translate="yes" xml:space="preserve">
          <source>.EventTarget (methods)</source>
          <target state="translated">.EventTarget (methods)</target>
        </trans-unit>
        <trans-unit id="2e54cc7c226a3e70b0084e3e22953cb59c7f67fd" translate="yes" xml:space="preserve">
          <source>.Promise</source>
          <target state="translated">.Promise</target>
        </trans-unit>
        <trans-unit id="72b7c69e6fda670c1ceb02f8a89c3f3af535f103" translate="yes" xml:space="preserve">
          <source>.Promise (methods)</source>
          <target state="translated">.Promise (methods)</target>
        </trans-unit>
        <trans-unit id="2426c00a83d2e3a89cf5a95cb4a96e8eec00599d" translate="yes" xml:space="preserve">
          <source>.Promise.catch()</source>
          <target state="translated">.Promise.catch()</target>
        </trans-unit>
        <trans-unit id="3ba572404828747c05da534c74d35c1005acfbd6" translate="yes" xml:space="preserve">
          <source>.Promise.finally()</source>
          <target state="translated">.Promise.finally()</target>
        </trans-unit>
        <trans-unit id="df294430294c0bc428fab183783c45d8ba8a920f" translate="yes" xml:space="preserve">
          <source>.Promise.then()</source>
          <target state="translated">.Promise.then()</target>
        </trans-unit>
        <trans-unit id="74e24ea39685065c17b126d5a06c651d736e383c" translate="yes" xml:space="preserve">
          <source>.QUnitAdapter</source>
          <target state="translated">.QUnitAdapter</target>
        </trans-unit>
        <trans-unit id="e463350c4ca53a5c0fa9973f8ba8e0f21ffc25bc" translate="yes" xml:space="preserve">
          <source>.QUnitAdapter (methods)</source>
          <target state="translated">.QUnitAdapter (methods)</target>
        </trans-unit>
        <trans-unit id="6db24efa3482bf71ce0881ffc5eb8131db942335" translate="yes" xml:space="preserve">
          <source>.VERSION</source>
          <target state="translated">.VERSION</target>
        </trans-unit>
        <trans-unit id="64ffa3d21ebf55257a1ee59f56051ff3cd5af347" translate="yes" xml:space="preserve">
          <source>.acceptsModelName</source>
          <target state="translated">.acceptsModelName</target>
        </trans-unit>
        <trans-unit id="d9f8486636249cc673d801d5241a02030f0ca4ea" translate="yes" xml:space="preserve">
          <source>.actions</source>
          <target state="translated">.actions</target>
        </trans-unit>
        <trans-unit id="a59446f613eb73546c8b5722d0129261a57a2c5a" translate="yes" xml:space="preserve">
          <source>.activate (event)</source>
          <target state="translated">.activate (event)</target>
        </trans-unit>
        <trans-unit id="ba41aeb393e6f7013d237ef6b3f5c6464018dba8" translate="yes" xml:space="preserve">
          <source>.activate()</source>
          <target state="translated">.activate()</target>
        </trans-unit>
        <trans-unit id="d6e2c2f3f818791e4b3850a029a9bc0ca0297a22" translate="yes" xml:space="preserve">
          <source>.activeClass</source>
          <target state="translated">.activeClass</target>
        </trans-unit>
        <trans-unit id="06a8fa3ade80812fdb59df02c4aa3a12ed58e453" translate="yes" xml:space="preserve">
          <source>.adapter</source>
          <target state="translated">.adapter</target>
        </trans-unit>
        <trans-unit id="4a7d93e466995644b9adc4f343e1fdd822525fe4" translate="yes" xml:space="preserve">
          <source>.addArrayObserver()</source>
          <target state="translated">.addArrayObserver()</target>
        </trans-unit>
        <trans-unit id="c36d563166cf45d777a6978909ff8a747f89dabb" translate="yes" xml:space="preserve">
          <source>.addListener()</source>
          <target state="translated">.addListener()</target>
        </trans-unit>
        <trans-unit id="f56ddaa66f6e807d6bf6f0d6b917f9d79e61aeba" translate="yes" xml:space="preserve">
          <source>.addObject()</source>
          <target state="translated">.addObject()</target>
        </trans-unit>
        <trans-unit id="17ed1fb8ddd9db90113dcf19f986ad197af6c691" translate="yes" xml:space="preserve">
          <source>.addObjects()</source>
          <target state="translated">.addObjects()</target>
        </trans-unit>
        <trans-unit id="616c2673fd001fd3f11f50fe2384edeb2cbafed7" translate="yes" xml:space="preserve">
          <source>.addObserver()</source>
          <target state="translated">.addObserver()</target>
        </trans-unit>
        <trans-unit id="a95420db59294501c5e04e27388ef56e4321d71b" translate="yes" xml:space="preserve">
          <source>.advanceReadiness()</source>
          <target state="translated">.advanceReadiness()</target>
        </trans-unit>
        <trans-unit id="70365f4aaafbcfbf251d0b7e1a08a2cfd989b1d7" translate="yes" xml:space="preserve">
          <source>.afterModel()</source>
          <target state="translated">.afterModel()</target>
        </trans-unit>
        <trans-unit id="f33cde8e3965bf348d7cdaa0deb1bdc4cd7f58e2" translate="yes" xml:space="preserve">
          <source>.alias()</source>
          <target state="translated">.alias()</target>
        </trans-unit>
        <trans-unit id="2f9611ed3103b152042575554afe5a730cd0ede1" translate="yes" xml:space="preserve">
          <source>.aliasMethod()</source>
          <target state="translated">.aliasMethod()</target>
        </trans-unit>
        <trans-unit id="60f30da724a2aea6cd8dccd7b043e6819fa0f14f" translate="yes" xml:space="preserve">
          <source>.all()</source>
          <target state="translated">.all()</target>
        </trans-unit>
        <trans-unit id="f95254a235428362ef0e6d7051bf6a6c531b6993" translate="yes" xml:space="preserve">
          <source>.allSettled()</source>
          <target state="translated">.allSettled()</target>
        </trans-unit>
        <trans-unit id="044d54a8f22feb4f6aab11ebb820a81c8503c591" translate="yes" xml:space="preserve">
          <source>.and()</source>
          <target state="translated">.and()</target>
        </trans-unit>
        <trans-unit id="6b33de0e9dba55b46253828d1c54bdb48574898b" translate="yes" xml:space="preserve">
          <source>.any()</source>
          <target state="translated">.any()</target>
        </trans-unit>
        <trans-unit id="e94620ff8f3616e737afa388d977b73d4b68e087" translate="yes" xml:space="preserve">
          <source>.ariaRole</source>
          <target state="translated">.ariaRole</target>
        </trans-unit>
        <trans-unit id="6a1236669c13e49fc66c8219a6699a1d08ef0e75" translate="yes" xml:space="preserve">
          <source>.arrayContentDidChange()</source>
          <target state="translated">.arrayContentDidChange()</target>
        </trans-unit>
        <trans-unit id="c08a832ac3b5a1442768735f7da85b5353530e73" translate="yes" xml:space="preserve">
          <source>.arrayContentWillChange()</source>
          <target state="translated">.arrayContentWillChange()</target>
        </trans-unit>
        <trans-unit id="324feb7ee87cf11bef0eafd56649e2aa8a0ff580" translate="yes" xml:space="preserve">
          <source>.assert()</source>
          <target state="translated">.assert()</target>
        </trans-unit>
        <trans-unit id="4fb1d337a3b2724679dc1a65dec7a270fd0b297d" translate="yes" xml:space="preserve">
          <source>.assign()</source>
          <target state="translated">.assign()</target>
        </trans-unit>
        <trans-unit id="13dcbab7aa59bafe4621bd55b92103397f240dce" translate="yes" xml:space="preserve">
          <source>.attributeBindings</source>
          <target state="translated">.attributeBindings</target>
        </trans-unit>
        <trans-unit id="77d9c4c8897afe31d19abcc6b7d6460a5b67f63a" translate="yes" xml:space="preserve">
          <source>.beforeModel()</source>
          <target state="translated">.beforeModel()</target>
        </trans-unit>
        <trans-unit id="5b40fb30d6092371937b634a9b6332bcac529690" translate="yes" xml:space="preserve">
          <source>.begin()</source>
          <target state="translated">.begin()</target>
        </trans-unit>
        <trans-unit id="856a1b3cdbdb46b1ca6e91af0585578d48848d07" translate="yes" xml:space="preserve">
          <source>.bind()</source>
          <target state="translated">.bind()</target>
        </trans-unit>
        <trans-unit id="a71dd0214da00aea488e1b200a7382e243c07ee9" translate="yes" xml:space="preserve">
          <source>.bool()</source>
          <target state="translated">.bool()</target>
        </trans-unit>
        <trans-unit id="93ff89749be2e98f95b5ce1f6235980257fe59ce" translate="yes" xml:space="preserve">
          <source>.cacheFor()</source>
          <target state="translated">.cacheFor()</target>
        </trans-unit>
        <trans-unit id="142b595906473bb40b3090ecbade321a5c03c198" translate="yes" xml:space="preserve">
          <source>.camelize()</source>
          <target state="translated">.camelize()</target>
        </trans-unit>
        <trans-unit id="2f2551f25c0c8be7ee10562b630d13eafec1e853" translate="yes" xml:space="preserve">
          <source>.canCatalogEntriesByType()</source>
          <target state="translated">.canCatalogEntriesByType()</target>
        </trans-unit>
        <trans-unit id="e7736015cfa961ad4c007b073c9bb1ef33149ce2" translate="yes" xml:space="preserve">
          <source>.cancel()</source>
          <target state="translated">.cancel()</target>
        </trans-unit>
        <trans-unit id="2344d8bdd6ede651f53874d4814cefa0ed0ecc06" translate="yes" xml:space="preserve">
          <source>.capitalize()</source>
          <target state="translated">.capitalize()</target>
        </trans-unit>
        <trans-unit id="8439ac6dc3fa14937ec506bf42624d7c406b7729" translate="yes" xml:space="preserve">
          <source>.catalogEntriesByType()</source>
          <target state="translated">.catalogEntriesByType()</target>
        </trans-unit>
        <trans-unit id="54e90cf454b63fd455dbc92d24a45d3da319e1c6" translate="yes" xml:space="preserve">
          <source>.catch()</source>
          <target state="translated">.catch()</target>
        </trans-unit>
        <trans-unit id="3816cca0bdc1756221aef1a3f15d50488eac306a" translate="yes" xml:space="preserve">
          <source>.checkWaiters()</source>
          <target state="translated">.checkWaiters()</target>
        </trans-unit>
        <trans-unit id="b3d88c7da9c88a8d974e345a4637afbb4de67e46" translate="yes" xml:space="preserve">
          <source>.classNameBindings</source>
          <target state="translated">.classNameBindings</target>
        </trans-unit>
        <trans-unit id="6aed7018b6e28a871eb95209d96a5c712b65ed1a" translate="yes" xml:space="preserve">
          <source>.classNames</source>
          <target state="translated">.classNames</target>
        </trans-unit>
        <trans-unit id="0ca143eb7d6519fc8217f13f529912862d6faf06" translate="yes" xml:space="preserve">
          <source>.classify()</source>
          <target state="translated">.classify()</target>
        </trans-unit>
        <trans-unit id="97d0c1b2a22fb8070a6017c75d88cfa057db7360" translate="yes" xml:space="preserve">
          <source>.clear()</source>
          <target state="translated">.clear()</target>
        </trans-unit>
        <trans-unit id="1e97d4d78725d4ecf32ba825a70fad7722570885" translate="yes" xml:space="preserve">
          <source>.click()</source>
          <target state="translated">.click()</target>
        </trans-unit>
        <trans-unit id="253b77c1d67d0655afd2be0c08d8eaf9612a3ff8" translate="yes" xml:space="preserve">
          <source>.collect()</source>
          <target state="translated">.collect()</target>
        </trans-unit>
        <trans-unit id="e77cd2823b7b2fc17d0760a3c5e99210fcb67feb" translate="yes" xml:space="preserve">
          <source>.compact()</source>
          <target state="translated">.compact()</target>
        </trans-unit>
        <trans-unit id="0fdeb1c6d65c66a6a86b995546fdbc0615e46e07" translate="yes" xml:space="preserve">
          <source>.compare()</source>
          <target state="translated">.compare()</target>
        </trans-unit>
        <trans-unit id="96d3780072df71a6459231c821d2b3f4666da624" translate="yes" xml:space="preserve">
          <source>.compute()</source>
          <target state="translated">.compute()</target>
        </trans-unit>
        <trans-unit id="2963725ff956f4be6c72f27262e7e06a6da46f22" translate="yes" xml:space="preserve">
          <source>.concatenatedProperties</source>
          <target state="translated">.concatenatedProperties</target>
        </trans-unit>
        <trans-unit id="d4d222ee0c6fed38d4a5b945d658185f7de139da" translate="yes" xml:space="preserve">
          <source>.containerDebugAdapter</source>
          <target state="translated">.containerDebugAdapter</target>
        </trans-unit>
        <trans-unit id="b0afd2ba7155b0630f555ff60ab15e534979eba6" translate="yes" xml:space="preserve">
          <source>.controller</source>
          <target state="translated">.controller</target>
        </trans-unit>
        <trans-unit id="268b5e34d861b733b2ff3f40a1be18070619b31d" translate="yes" xml:space="preserve">
          <source>.controller()</source>
          <target state="translated">.controller()</target>
        </trans-unit>
        <trans-unit id="fb5d390b324fe4314abe3b704f3fa96577bacda2" translate="yes" xml:space="preserve">
          <source>.controllerFor()</source>
          <target state="translated">.controllerFor()</target>
        </trans-unit>
        <trans-unit id="114fa033b023428b940d87af567fd5a73264a8cd" translate="yes" xml:space="preserve">
          <source>.controllerName</source>
          <target state="translated">.controllerName</target>
        </trans-unit>
        <trans-unit id="861e393ac224d6f14faa42242206eaf066c5eb6d" translate="yes" xml:space="preserve">
          <source>.copy()</source>
          <target state="translated">.copy()</target>
        </trans-unit>
        <trans-unit id="2a0f50d7d09b16509e1157dd95bedac3a7e649c1" translate="yes" xml:space="preserve">
          <source>.create()</source>
          <target state="translated">.create()</target>
        </trans-unit>
        <trans-unit id="18471bcdc7d07073aa9293a2688552846d32bd44" translate="yes" xml:space="preserve">
          <source>.currentPath()</source>
          <target state="translated">.currentPath()</target>
        </trans-unit>
        <trans-unit id="db8be4e4f3d4585f2b19e5efe028ea78f9ff3a49" translate="yes" xml:space="preserve">
          <source>.currentRouteName()</source>
          <target state="translated">.currentRouteName()</target>
        </trans-unit>
        <trans-unit id="0018df70099cd0dae3d0758532c12a8120caefa3" translate="yes" xml:space="preserve">
          <source>.currentURL()</source>
          <target state="translated">.currentURL()</target>
        </trans-unit>
        <trans-unit id="eb29d3752f4527467ef3f042434d4d470720489c" translate="yes" xml:space="preserve">
          <source>.currentWhen</source>
          <target state="translated">.currentWhen</target>
        </trans-unit>
        <trans-unit id="dd79925a8ded8495270e1d2437a7e18b75de05ba" translate="yes" xml:space="preserve">
          <source>.customEvents</source>
          <target state="translated">.customEvents</target>
        </trans-unit>
        <trans-unit id="d77ceb5aa4f3a56516c9624ea5bfb22cb7dbf209" translate="yes" xml:space="preserve">
          <source>.dasherize()</source>
          <target state="translated">.dasherize()</target>
        </trans-unit>
        <trans-unit id="ff971867400454b58b0cb4633aaec3503cbd7255" translate="yes" xml:space="preserve">
          <source>.deactivate (event)</source>
          <target state="translated">.deactivate (event)</target>
        </trans-unit>
        <trans-unit id="f2091d8e16fd0eb6e851eb2864cb3dc82024b4e2" translate="yes" xml:space="preserve">
          <source>.deactivate()</source>
          <target state="translated">.deactivate()</target>
        </trans-unit>
        <trans-unit id="e298e9f1f6c61b861d57ec4b28df4aaca950e823" translate="yes" xml:space="preserve">
          <source>.debounce()</source>
          <target state="translated">.debounce()</target>
        </trans-unit>
        <trans-unit id="45cd57a7a40b4bdf7697e22f5ac4e03e13e68bf3" translate="yes" xml:space="preserve">
          <source>.debug()</source>
          <target state="translated">.debug()</target>
        </trans-unit>
        <trans-unit id="117d76b07e6a35f5caddb7a302e63cb2d03dbef4" translate="yes" xml:space="preserve">
          <source>.decamelize()</source>
          <target state="translated">.decamelize()</target>
        </trans-unit>
        <trans-unit id="809cc67ddfb09d26ed1d16590b7925212ca57c53" translate="yes" xml:space="preserve">
          <source>.decrementProperty()</source>
          <target state="translated">.decrementProperty()</target>
        </trans-unit>
        <trans-unit id="37f7e78905b2d99dec3b1fd172ff4d168254695e" translate="yes" xml:space="preserve">
          <source>.defer()</source>
          <target state="translated">.defer()</target>
        </trans-unit>
        <trans-unit id="d3203b788f98ef2824d6f2d33ae99355623b30b6" translate="yes" xml:space="preserve">
          <source>.deferReadiness()</source>
          <target state="translated">.deferReadiness()</target>
        </trans-unit>
        <trans-unit id="c7d1cb7d848d2cb60ac02a093d233c87747d651f" translate="yes" xml:space="preserve">
          <source>.denodeify()</source>
          <target state="translated">.denodeify()</target>
        </trans-unit>
        <trans-unit id="bbb3004e35f00aeb3a3370ab1c4ec61ff8e92d4f" translate="yes" xml:space="preserve">
          <source>.deprecate()</source>
          <target state="translated">.deprecate()</target>
        </trans-unit>
        <trans-unit id="1b5c6e29e2de0b8189717eeba419ce437623cce1" translate="yes" xml:space="preserve">
          <source>.deprecatingAlias()</source>
          <target state="translated">.deprecatingAlias()</target>
        </trans-unit>
        <trans-unit id="e6ab8c224521bf01b65198f5b395f63c6e363c39" translate="yes" xml:space="preserve">
          <source>.destroy()</source>
          <target state="translated">.destroy()</target>
        </trans-unit>
        <trans-unit id="2af6259c68afa8549769a42dfa9c1f5f733b681c" translate="yes" xml:space="preserve">
          <source>.didInsertElement (event)</source>
          <target state="translated">.didInsertElement (event)</target>
        </trans-unit>
        <trans-unit id="94a637206451a81f079b57a84313729387f35b16" translate="yes" xml:space="preserve">
          <source>.didReceiveAttrs (event)</source>
          <target state="translated">.didReceiveAttrs (event)</target>
        </trans-unit>
        <trans-unit id="23969ba8f5040e08369cef4095bab8dc7739fe02" translate="yes" xml:space="preserve">
          <source>.didReceiveAttrs()</source>
          <target state="translated">.didReceiveAttrs()</target>
        </trans-unit>
        <trans-unit id="b67752103f19615b74e5eeb935a5b4f42e87b5fa" translate="yes" xml:space="preserve">
          <source>.didRender (event)</source>
          <target state="translated">.didRender (event)</target>
        </trans-unit>
        <trans-unit id="ab8fec5dd605bb6b304c8b74d6388b517dd0b1ba" translate="yes" xml:space="preserve">
          <source>.didRender()</source>
          <target state="translated">.didRender()</target>
        </trans-unit>
        <trans-unit id="c1e72dd34c50bccf4391cb44ead0acff02925834" translate="yes" xml:space="preserve">
          <source>.didTransition (event)</source>
          <target state="translated">.didTransition (event)</target>
        </trans-unit>
        <trans-unit id="ceb13fd831ea12cdda987f58789c4f718718ef6e" translate="yes" xml:space="preserve">
          <source>.didTransition()</source>
          <target state="translated">.didTransition()</target>
        </trans-unit>
        <trans-unit id="08f7fad176fc6b47f9d3b59cb9c7117be4496cdb" translate="yes" xml:space="preserve">
          <source>.didUpdate (event)</source>
          <target state="translated">.didUpdate (event)</target>
        </trans-unit>
        <trans-unit id="249b2310f730e76a470b279894468e1384dd07d6" translate="yes" xml:space="preserve">
          <source>.didUpdate()</source>
          <target state="translated">.didUpdate()</target>
        </trans-unit>
        <trans-unit id="6490c283f9ab347d6047822045aa790b9ade9a70" translate="yes" xml:space="preserve">
          <source>.didUpdateAttrs (event)</source>
          <target state="translated">.didUpdateAttrs (event)</target>
        </trans-unit>
        <trans-unit id="1c6458ee26b1a027c001e160145712539b64e836" translate="yes" xml:space="preserve">
          <source>.didUpdateAttrs()</source>
          <target state="translated">.didUpdateAttrs()</target>
        </trans-unit>
        <trans-unit id="b1353d59fb29ec973ea466a49206c5f5ef6d3f31" translate="yes" xml:space="preserve">
          <source>.disableCache;()</source>
          <target state="translated">.disableCache;()</target>
        </trans-unit>
        <trans-unit id="954dcfa4181a77bdc65adc825836d2adb7be244d" translate="yes" xml:space="preserve">
          <source>.disconnectOutlet()</source>
          <target state="translated">.disconnectOutlet()</target>
        </trans-unit>
        <trans-unit id="d850f5e76e5990148c7a3f45bd19a01a577c8def" translate="yes" xml:space="preserve">
          <source>.element</source>
          <target state="translated">.element</target>
        </trans-unit>
        <trans-unit id="37d2f12c9f857be1069ad5761cacf5249c5ebd95" translate="yes" xml:space="preserve">
          <source>.elementId</source>
          <target state="translated">.elementId</target>
        </trans-unit>
        <trans-unit id="e97cf4754f613bbb2ec3a15a3f9ec7dbc10f0f77" translate="yes" xml:space="preserve">
          <source>.empty()</source>
          <target state="translated">.empty()</target>
        </trans-unit>
        <trans-unit id="abf0ca61afdebe15168ffbf5e9af3f80ec1c20fc" translate="yes" xml:space="preserve">
          <source>.enableCache()</source>
          <target state="translated">.enableCache()</target>
        </trans-unit>
        <trans-unit id="4522dcb5c5069a2d58b7864d23fab8548e9bbc96" translate="yes" xml:space="preserve">
          <source>.end()</source>
          <target state="translated">.end()</target>
        </trans-unit>
        <trans-unit id="ab83e569fca1bf26cc89935595b87ae1e8d73f00" translate="yes" xml:space="preserve">
          <source>.equal()</source>
          <target state="translated">.equal()</target>
        </trans-unit>
        <trans-unit id="14f45c2328c6bdc23471f76af1a479d36fc41ec6" translate="yes" xml:space="preserve">
          <source>.error (event)</source>
          <target state="translated">.error (event)</target>
        </trans-unit>
        <trans-unit id="465d54eeaad7eafe88052e9f67e2a5f3dfd62383" translate="yes" xml:space="preserve">
          <source>.eventDispatcher</source>
          <target state="translated">.eventDispatcher</target>
        </trans-unit>
        <trans-unit id="ca50fef1c86f80ecac1245e21788e4a5584ac738" translate="yes" xml:space="preserve">
          <source>.every()</source>
          <target state="translated">.every()</target>
        </trans-unit>
        <trans-unit id="0b8aa4b1f7233b87ae67b4fd07a9cedd38cbd6fb" translate="yes" xml:space="preserve">
          <source>.extend()</source>
          <target state="translated">.extend()</target>
        </trans-unit>
        <trans-unit id="cfd55b792aa5dc90c5ba1163ee6aa40c9e65b8b0" translate="yes" xml:space="preserve">
          <source>.fillIn()</source>
          <target state="translated">.fillIn()</target>
        </trans-unit>
        <trans-unit id="0b55f75d20e84ea4218ae334a687431d8b584627" translate="yes" xml:space="preserve">
          <source>.filter()</source>
          <target state="translated">.filter()</target>
        </trans-unit>
        <trans-unit id="37b1d482c73248927be7b990b86d5e40dc5862dd" translate="yes" xml:space="preserve">
          <source>.filterBy()</source>
          <target state="translated">.filterBy()</target>
        </trans-unit>
        <trans-unit id="5f3178cf78a184a4d4b7881ae5d1a0e8e7c7b10e" translate="yes" xml:space="preserve">
          <source>.finally()</source>
          <target state="translated">.finally()</target>
        </trans-unit>
        <trans-unit id="d25980948b24cf9ba73d9afbc5d63be60b6e77fb" translate="yes" xml:space="preserve">
          <source>.find()</source>
          <target state="translated">.find()</target>
        </trans-unit>
        <trans-unit id="3e7119fb49fcbc95f918d7009b20973e687ba3dc" translate="yes" xml:space="preserve">
          <source>.findBy()</source>
          <target state="translated">.findBy()</target>
        </trans-unit>
        <trans-unit id="824b93b7a5a3151a7c48c80bb9e6f12c77ceba9d" translate="yes" xml:space="preserve">
          <source>.findWithAssert()</source>
          <target state="translated">.findWithAssert()</target>
        </trans-unit>
        <trans-unit id="7d1a9559ec1cd1706677818784fb44132d4905a0" translate="yes" xml:space="preserve">
          <source>.firstObject</source>
          <target state="translated">.firstObject</target>
        </trans-unit>
        <trans-unit id="fe5a1f4be45a725a6f693d5215c88479571204be" translate="yes" xml:space="preserve">
          <source>.forEach()</source>
          <target state="translated">.forEach()</target>
        </trans-unit>
        <trans-unit id="f8035b07e5bf0d30eb4314a6e83a9c9012930836" translate="yes" xml:space="preserve">
          <source>.get()</source>
          <target state="translated">.get()</target>
        </trans-unit>
        <trans-unit id="28e1c57d0bc40c81fc13158e8bb3cfe3d381384a" translate="yes" xml:space="preserve">
          <source>.getEach()</source>
          <target state="translated">.getEach()</target>
        </trans-unit>
        <trans-unit id="9787d1c95ec7e33d727c7f7457e23831ecd56561" translate="yes" xml:space="preserve">
          <source>.getEngineParent()</source>
          <target state="translated">.getEngineParent()</target>
        </trans-unit>
        <trans-unit id="67b150cd25b18d36da33db391e0f89faf0c6b95c" translate="yes" xml:space="preserve">
          <source>.getFilters()</source>
          <target state="translated">.getFilters()</target>
        </trans-unit>
        <trans-unit id="e9cc63e0675a4b24cb1f218dbef7ec59f211ea7f" translate="yes" xml:space="preserve">
          <source>.getOwner()</source>
          <target state="translated">.getOwner()</target>
        </trans-unit>
        <trans-unit id="053b16e527e426fbb8ff8a4c7f37d7c75cb0ed7e" translate="yes" xml:space="preserve">
          <source>.getProperties()</source>
          <target state="translated">.getProperties()</target>
        </trans-unit>
        <trans-unit id="7fa892a0180afd4a7dd0b1d64945145a7ae034e9" translate="yes" xml:space="preserve">
          <source>.getWithDefault()</source>
          <target state="translated">.getWithDefault()</target>
        </trans-unit>
        <trans-unit id="2aabf71bb96fb22b2f1a039399661fd641601462" translate="yes" xml:space="preserve">
          <source>.gte()</source>
          <target state="translated">.gte()</target>
        </trans-unit>
        <trans-unit id="f9294ba8ff7fca5df8479ef1d437f73ad0d8e33c" translate="yes" xml:space="preserve">
          <source>.guidFor()</source>
          <target state="translated">.guidFor()</target>
        </trans-unit>
        <trans-unit id="5a6fd171d97937dc930136f324f866b852aac0c2" translate="yes" xml:space="preserve">
          <source>.has()</source>
          <target state="translated">.has()</target>
        </trans-unit>
        <trans-unit id="0ac8688296ae7945b152d29afe9c5211cbb6d58a" translate="yes" xml:space="preserve">
          <source>.hasArrayObservers</source>
          <target state="translated">.hasArrayObservers</target>
        </trans-unit>
        <trans-unit id="935dea1cc3a9052cde901569945818f5a6753c61" translate="yes" xml:space="preserve">
          <source>.hasRegistration()</source>
          <target state="translated">.hasRegistration()</target>
        </trans-unit>
        <trans-unit id="0ee9a5bab8350f8cea48aa9910dd3b72d37b446a" translate="yes" xml:space="preserve">
          <source>.hash()</source>
          <target state="translated">.hash()</target>
        </trans-unit>
        <trans-unit id="5f40b2320210daffc198f8a71498e0c4fc5f09ed" translate="yes" xml:space="preserve">
          <source>.hashSettled()</source>
          <target state="translated">.hashSettled()</target>
        </trans-unit>
        <trans-unit id="9859c7c1ea8bd29f94a1df55bd49b2306a24c747" translate="yes" xml:space="preserve">
          <source>.helper()</source>
          <target state="translated">.helper()</target>
        </trans-unit>
        <trans-unit id="a083d43a3f4b3b54f848b38c32f944b17ce6fb99" translate="yes" xml:space="preserve">
          <source>.helpers</source>
          <target state="translated">.helpers</target>
        </trans-unit>
        <trans-unit id="12d62f7fbb4b89a50888ad04557f3d3fc1fdaa0c" translate="yes" xml:space="preserve">
          <source>.helpers (methods)</source>
          <target state="translated">.helpers (methods)</target>
        </trans-unit>
        <trans-unit id="be3f57362cd8e4d2233ee04f28a7ac350e11a31c" translate="yes" xml:space="preserve">
          <source>.helpers.action()</source>
          <target state="translated">.helpers.action()</target>
        </trans-unit>
        <trans-unit id="934a2227a542b5a09a5021b388da99fdd8eb9921" translate="yes" xml:space="preserve">
          <source>.helpers.component()</source>
          <target state="translated">.helpers.component()</target>
        </trans-unit>
        <trans-unit id="2ddc3926f54260d68a75ce33eb7c2a2817ab3700" translate="yes" xml:space="preserve">
          <source>.helpers.concat()</source>
          <target state="translated">.helpers.concat()</target>
        </trans-unit>
        <trans-unit id="b2baa6fd19770f574edef52e2c71187aa5124e2b" translate="yes" xml:space="preserve">
          <source>.helpers.debugger()</source>
          <target state="translated">.helpers.debugger()</target>
        </trans-unit>
        <trans-unit id="a9c8c5f84b2c57076a0c60f5cfb0075786024122" translate="yes" xml:space="preserve">
          <source>.helpers.each()</source>
          <target state="translated">.helpers.each()</target>
        </trans-unit>
        <trans-unit id="32d2a14eaf0a6661ccdd25db98accc5f784fb77e" translate="yes" xml:space="preserve">
          <source>.helpers.each-in()</source>
          <target state="translated">.helpers.each-in()</target>
        </trans-unit>
        <trans-unit id="2e6c0d9fdb2869c6f9acfbb59a98336edd33069a" translate="yes" xml:space="preserve">
          <source>.helpers.get()</source>
          <target state="translated">.helpers.get()</target>
        </trans-unit>
        <trans-unit id="dd5726bc575f53cb0ec4fa825deea0096fba669a" translate="yes" xml:space="preserve">
          <source>.helpers.hash()</source>
          <target state="translated">.helpers.hash()</target>
        </trans-unit>
        <trans-unit id="bede6232dd20b2132b882706887c0de45cf48171" translate="yes" xml:space="preserve">
          <source>.helpers.if()</source>
          <target state="translated">.helpers.if()</target>
        </trans-unit>
        <trans-unit id="04dc06d5dbe354c3edefa5b96b2b870d2513ecac" translate="yes" xml:space="preserve">
          <source>.helpers.input()</source>
          <target state="translated">.helpers.input()</target>
        </trans-unit>
        <trans-unit id="c7de47e894b452787ceecf6a39a878bea7499cbb" translate="yes" xml:space="preserve">
          <source>.helpers.link-to()</source>
          <target state="translated">.helpers.link-to()</target>
        </trans-unit>
        <trans-unit id="c5dda43131985e3825413f7a4ba95137e8a69199" translate="yes" xml:space="preserve">
          <source>.helpers.loc()</source>
          <target state="translated">.helpers.loc()</target>
        </trans-unit>
        <trans-unit id="7d20b6836cf085e01541276602fa142ed3055b05" translate="yes" xml:space="preserve">
          <source>.helpers.log()</source>
          <target state="translated">.helpers.log()</target>
        </trans-unit>
        <trans-unit id="77a20c9ff06af00ff97a5c31a9f0fa0cfef19be4" translate="yes" xml:space="preserve">
          <source>.helpers.mount()</source>
          <target state="translated">.helpers.mount()</target>
        </trans-unit>
        <trans-unit id="678abe588e23a899453e1fcf5203420707fc72e8" translate="yes" xml:space="preserve">
          <source>.helpers.mut()</source>
          <target state="translated">.helpers.mut()</target>
        </trans-unit>
        <trans-unit id="daab4c77baae3bd27989578843df8d70204622c1" translate="yes" xml:space="preserve">
          <source>.helpers.outlet()</source>
          <target state="translated">.helpers.outlet()</target>
        </trans-unit>
        <trans-unit id="a2383ef3e06da763ce5a76a0b3e8711f4e9643c0" translate="yes" xml:space="preserve">
          <source>.helpers.partial()</source>
          <target state="translated">.helpers.partial()</target>
        </trans-unit>
        <trans-unit id="b76b6e836e574e245ca5a3a92c1502318bcc4a2c" translate="yes" xml:space="preserve">
          <source>.helpers.query-params()</source>
          <target state="translated">.helpers.query-params()</target>
        </trans-unit>
        <trans-unit id="e0b750aecba4e9b798ef4fef745a24be34138374" translate="yes" xml:space="preserve">
          <source>.helpers.singularize()</source>
          <target state="translated">.helpers.singularize()</target>
        </trans-unit>
        <trans-unit id="e0a1d8eddf83eb16f439c4137c6fe1fc0359eb50" translate="yes" xml:space="preserve">
          <source>.helpers.textarea()</source>
          <target state="translated">.helpers.textarea()</target>
        </trans-unit>
        <trans-unit id="e9e65cb699367a60688cea73e59d656fbd88327e" translate="yes" xml:space="preserve">
          <source>.helpers.unbound()</source>
          <target state="translated">.helpers.unbound()</target>
        </trans-unit>
        <trans-unit id="d1d68a8041eb2624e013a3a179570f6786af7449" translate="yes" xml:space="preserve">
          <source>.helpers.unless()</source>
          <target state="translated">.helpers.unless()</target>
        </trans-unit>
        <trans-unit id="9c79f4cede634c817da72810e6a79d03d05b415c" translate="yes" xml:space="preserve">
          <source>.helpers.with()</source>
          <target state="translated">.helpers.with()</target>
        </trans-unit>
        <trans-unit id="462253ff4278ec1f6b2a3230aaca09d50f3e1870" translate="yes" xml:space="preserve">
          <source>.helpers.yield()</source>
          <target state="translated">.helpers.yield()</target>
        </trans-unit>
        <trans-unit id="4feac195a8cefa6f494bb2bc4d5acf9f5da63e1e" translate="yes" xml:space="preserve">
          <source>.htmlSafe()</source>
          <target state="translated">.htmlSafe()</target>
        </trans-unit>
        <trans-unit id="3e687af74dba35b0715b0884f67849c575864a62" translate="yes" xml:space="preserve">
          <source>.includes()</source>
          <target state="translated">.includes()</target>
        </trans-unit>
        <trans-unit id="19273bf9a771bbed33408064945f07c16e2a16e6" translate="yes" xml:space="preserve">
          <source>.incrementProperty()</source>
          <target state="translated">.incrementProperty()</target>
        </trans-unit>
        <trans-unit id="7ae838ecd0da0293024aba63a6fddfb0ade378a9" translate="yes" xml:space="preserve">
          <source>.indexOf()</source>
          <target state="translated">.indexOf()</target>
        </trans-unit>
        <trans-unit id="44dade9646a84176f0205cd62487852c60acc23a" translate="yes" xml:space="preserve">
          <source>.init()</source>
          <target state="translated">.init()</target>
        </trans-unit>
        <trans-unit id="fffb7ef5b01e22b8a7d68ed089f79b31ee886c9a" translate="yes" xml:space="preserve">
          <source>.initializer()</source>
          <target state="translated">.initializer()</target>
        </trans-unit>
        <trans-unit id="15973a006f9a54335337023f863099bd6ac5026f" translate="yes" xml:space="preserve">
          <source>.inject()</source>
          <target state="translated">.inject()</target>
        </trans-unit>
        <trans-unit id="a334dd13638d334f8ac1c3e1d3fd3de996ee3cf8" translate="yes" xml:space="preserve">
          <source>.injectTestHelpers()</source>
          <target state="translated">.injectTestHelpers()</target>
        </trans-unit>
        <trans-unit id="763337e9286aaa6b1715dada4b1bc35f4d79f02b" translate="yes" xml:space="preserve">
          <source>.insertAt()</source>
          <target state="translated">.insertAt()</target>
        </trans-unit>
        <trans-unit id="c11bbb86fe27e14977ba2a6e09c4cf62c06ca29c" translate="yes" xml:space="preserve">
          <source>.instanceInitializer()</source>
          <target state="translated">.instanceInitializer()</target>
        </trans-unit>
        <trans-unit id="b251652f0d9df365df5d14e2bea0322513a37ece" translate="yes" xml:space="preserve">
          <source>.intermediateTransitionTo()</source>
          <target state="translated">.intermediateTransitionTo()</target>
        </trans-unit>
        <trans-unit id="10ab60aa0144cdf6cb5634508af98bd41747b948" translate="yes" xml:space="preserve">
          <source>.intersect()</source>
          <target state="translated">.intersect()</target>
        </trans-unit>
        <trans-unit id="40fc0a74dacf15f75cb9f89cf88ae4d893036b67" translate="yes" xml:space="preserve">
          <source>.invoke()</source>
          <target state="translated">.invoke()</target>
        </trans-unit>
        <trans-unit id="b19adec7afdf30dcb59789e74821d5471b292ef8" translate="yes" xml:space="preserve">
          <source>.irregular()</source>
          <target state="translated">.irregular()</target>
        </trans-unit>
        <trans-unit id="b78ea1de4707003caec900395f0ea0ee78b3cc12" translate="yes" xml:space="preserve">
          <source>.isActive()</source>
          <target state="translated">.isActive()</target>
        </trans-unit>
        <trans-unit id="74278ede27a51044d9c79984a520995e9f182277" translate="yes" xml:space="preserve">
          <source>.isAny()</source>
          <target state="translated">.isAny()</target>
        </trans-unit>
        <trans-unit id="992d3fec9f166ceabc71ac8c38d1f57b10efbb27" translate="yes" xml:space="preserve">
          <source>.isArray()</source>
          <target state="translated">.isArray()</target>
        </trans-unit>
        <trans-unit id="b6316fb4d076579849a6e963f18beb156fc104f4" translate="yes" xml:space="preserve">
          <source>.isBlank()</source>
          <target state="translated">.isBlank()</target>
        </trans-unit>
        <trans-unit id="6e26d57e8b74901221512436b7b8a3722d5895aa" translate="yes" xml:space="preserve">
          <source>.isDestroyed</source>
          <target state="translated">.isDestroyed</target>
        </trans-unit>
        <trans-unit id="0eef71e4320236b0bbafe29123943406e484e253" translate="yes" xml:space="preserve">
          <source>.isDestroying</source>
          <target state="translated">.isDestroying</target>
        </trans-unit>
        <trans-unit id="b13bdfefb4929bf201197f3fe6779be602e64f6f" translate="yes" xml:space="preserve">
          <source>.isEmpty()</source>
          <target state="translated">.isEmpty()</target>
        </trans-unit>
        <trans-unit id="d61bc4bb293657711ea54fca95a2e1301e82413c" translate="yes" xml:space="preserve">
          <source>.isEnabled()</source>
          <target state="translated">.isEnabled()</target>
        </trans-unit>
        <trans-unit id="7f5752d3098be6438d4b8c426bdd6a1d908dfa54" translate="yes" xml:space="preserve">
          <source>.isEqual()</source>
          <target state="translated">.isEqual()</target>
        </trans-unit>
        <trans-unit id="95e56f7b9dc8846581498140d7166eecd43cfaac" translate="yes" xml:space="preserve">
          <source>.isEvery()</source>
          <target state="translated">.isEvery()</target>
        </trans-unit>
        <trans-unit id="f192284c9b94fd9d7b30eb0c8e9a9f9868f27efe" translate="yes" xml:space="preserve">
          <source>.isFulfilled</source>
          <target state="translated">.isFulfilled</target>
        </trans-unit>
        <trans-unit id="ee0ecdb3c38c5684bf51639e1055dafd4014d577" translate="yes" xml:space="preserve">
          <source>.isHTMLSafe()</source>
          <target state="translated">.isHTMLSafe()</target>
        </trans-unit>
        <trans-unit id="026b9878f28f1ec43cec1a70f34fa75dfcad5795" translate="yes" xml:space="preserve">
          <source>.isNone()</source>
          <target state="translated">.isNone()</target>
        </trans-unit>
        <trans-unit id="66544f666ca02a6960c992ad89110b37104959d4" translate="yes" xml:space="preserve">
          <source>.isPending</source>
          <target state="translated">.isPending</target>
        </trans-unit>
        <trans-unit id="d541f3a10666f5da457f277566a7be0bc89cf8e7" translate="yes" xml:space="preserve">
          <source>.isPresent()</source>
          <target state="translated">.isPresent()</target>
        </trans-unit>
        <trans-unit id="3d0bccdbc85f7e4398d1b0f76d7956f317cdc802" translate="yes" xml:space="preserve">
          <source>.isRejected</source>
          <target state="translated">.isRejected</target>
        </trans-unit>
        <trans-unit id="8b26d0bdff35cf916f62600219d8d073f1c81afc" translate="yes" xml:space="preserve">
          <source>.isSettled</source>
          <target state="translated">.isSettled</target>
        </trans-unit>
        <trans-unit id="dc0a5f5f92e5b29ba789ce0cb048f45f545d6528" translate="yes" xml:space="preserve">
          <source>.isVisible</source>
          <target state="translated">.isVisible</target>
        </trans-unit>
        <trans-unit id="ff0be563833e9dba2859728026295df9cebec204" translate="yes" xml:space="preserve">
          <source>.join()</source>
          <target state="translated">.join()</target>
        </trans-unit>
        <trans-unit id="e3e5f046fcb714cd66d3208863ae476fec64eb33" translate="yes" xml:space="preserve">
          <source>.keyEvent()</source>
          <target state="translated">.keyEvent()</target>
        </trans-unit>
        <trans-unit id="98a1cbe6578d448288bd939d53595d66adf17def" translate="yes" xml:space="preserve">
          <source>.lastIndexOf()</source>
          <target state="translated">.lastIndexOf()</target>
        </trans-unit>
        <trans-unit id="99d46cbf4d4b97e5ef0cb5d9c597082722e483a6" translate="yes" xml:space="preserve">
          <source>.lastObject</source>
          <target state="translated">.lastObject</target>
        </trans-unit>
        <trans-unit id="01c6b3e8df50b5a93feda7bc6c526e325aa47868" translate="yes" xml:space="preserve">
          <source>.later()</source>
          <target state="translated">.later()</target>
        </trans-unit>
        <trans-unit id="a1e74c6cedee754855e8a03b76cc0a48d3ae0618" translate="yes" xml:space="preserve">
          <source>.layout</source>
          <target state="translated">.layout</target>
        </trans-unit>
        <trans-unit id="75c8cae355fd4c112d13f45637f83c17709a774e" translate="yes" xml:space="preserve">
          <source>.length</source>
          <target state="translated">.length</target>
        </trans-unit>
        <trans-unit id="d9f9ba28f3a2d19852a55c94e8f011a62f846243" translate="yes" xml:space="preserve">
          <source>.loading (event)</source>
          <target state="translated">.loading (event)</target>
        </trans-unit>
        <trans-unit id="f7b357e4fc13951f6981b1543178ab9f663ea31a" translate="yes" xml:space="preserve">
          <source>.loc()</source>
          <target state="translated">.loc()</target>
        </trans-unit>
        <trans-unit id="429556509e7d312d2a77557509a585778b90d348" translate="yes" xml:space="preserve">
          <source>.location</source>
          <target state="translated">.location</target>
        </trans-unit>
        <trans-unit id="1c4ba3ab87f0637792448e98d16c30dce06b0979" translate="yes" xml:space="preserve">
          <source>.lookup()</source>
          <target state="translated">.lookup()</target>
        </trans-unit>
        <trans-unit id="61254a57ebc6332512afffe42cc7e1f4e14c3c8f" translate="yes" xml:space="preserve">
          <source>.lte()</source>
          <target state="translated">.lte()</target>
        </trans-unit>
        <trans-unit id="3185d17866a519bedb219fdba7b49006d6c86ef6" translate="yes" xml:space="preserve">
          <source>.map()</source>
          <target state="translated">.map()</target>
        </trans-unit>
        <trans-unit id="c0cbe319be6e77a5bd5ad581c3501154e54e2193" translate="yes" xml:space="preserve">
          <source>.mapBy()</source>
          <target state="translated">.mapBy()</target>
        </trans-unit>
        <trans-unit id="87445c4944041f5ace36b891c4a7bf4e043bdf6b" translate="yes" xml:space="preserve">
          <source>.match()</source>
          <target state="translated">.match()</target>
        </trans-unit>
        <trans-unit id="ae7e8f74ac4e2c0e12821fe16f559c8cdb7dfa1a" translate="yes" xml:space="preserve">
          <source>.max()</source>
          <target state="translated">.max()</target>
        </trans-unit>
        <trans-unit id="e8adc046ef0650935e5f71eb4524968aba0bda8f" translate="yes" xml:space="preserve">
          <source>.merge()</source>
          <target state="translated">.merge()</target>
        </trans-unit>
        <trans-unit id="088dc21ff1be8e9b2949bd56d484f4e5bf6aa1ed" translate="yes" xml:space="preserve">
          <source>.mergedProperties</source>
          <target state="translated">.mergedProperties</target>
        </trans-unit>
        <trans-unit id="91bee59b6e9000866f6ba38d2a7dc48d13d28b10" translate="yes" xml:space="preserve">
          <source>.meta()</source>
          <target state="translated">.meta()</target>
        </trans-unit>
        <trans-unit id="fe56cd3a51f42631214987863b59d824bfe5b922" translate="yes" xml:space="preserve">
          <source>.min()</source>
          <target state="translated">.min()</target>
        </trans-unit>
        <trans-unit id="c9c30d74368a4cde538d93b13ea54cce56f0d94d" translate="yes" xml:space="preserve">
          <source>.model</source>
          <target state="translated">.model</target>
        </trans-unit>
        <trans-unit id="18b8758a115a02fa71f72b0f596e099ad78a1a33" translate="yes" xml:space="preserve">
          <source>.model()</source>
          <target state="translated">.model()</target>
        </trans-unit>
        <trans-unit id="778e0d2b32a78b6543cb41e4afdb0e63fa672b3b" translate="yes" xml:space="preserve">
          <source>.modelFor()</source>
          <target state="translated">.modelFor()</target>
        </trans-unit>
        <trans-unit id="b3196db3b0dd5b08cfe13a23a1975feed3c1b047" translate="yes" xml:space="preserve">
          <source>.namespace</source>
          <target state="translated">.namespace</target>
        </trans-unit>
        <trans-unit id="9a846f6f00583840df2ea3f204d6a61be08f120e" translate="yes" xml:space="preserve">
          <source>.next()</source>
          <target state="translated">.next()</target>
        </trans-unit>
        <trans-unit id="ff759839ac21cf09fc1da6df5e18cfe3948fc384" translate="yes" xml:space="preserve">
          <source>.none()</source>
          <target state="translated">.none()</target>
        </trans-unit>
        <trans-unit id="31bffc417e9e69c3c4257c87226e3d355237fc02" translate="yes" xml:space="preserve">
          <source>.not()</source>
          <target state="translated">.not()</target>
        </trans-unit>
        <trans-unit id="5f66b00b92f2fde9513f3ec97dc4a9d269fa9139" translate="yes" xml:space="preserve">
          <source>.notEmpty()</source>
          <target state="translated">.notEmpty()</target>
        </trans-unit>
        <trans-unit id="23a8d72b16ece113424ab8259ac754866fbf87d0" translate="yes" xml:space="preserve">
          <source>.notifyPropertyChange()</source>
          <target state="translated">.notifyPropertyChange()</target>
        </trans-unit>
        <trans-unit id="2baab09d8de609e5ebcd1367d87754214f45f336" translate="yes" xml:space="preserve">
          <source>.objectAt()</source>
          <target state="translated">.objectAt()</target>
        </trans-unit>
        <trans-unit id="4334eccf92cf6c7eee24c9a95291555791cc5fb2" translate="yes" xml:space="preserve">
          <source>.objectAtContent()</source>
          <target state="translated">.objectAtContent()</target>
        </trans-unit>
        <trans-unit id="a27a290ff559701e5aaa7279d78ad3a831476be2" translate="yes" xml:space="preserve">
          <source>.objectsAt()</source>
          <target state="translated">.objectsAt()</target>
        </trans-unit>
        <trans-unit id="2c03be327fb23bc2633c1ad7f228ed876f715e6e" translate="yes" xml:space="preserve">
          <source>.observer()</source>
          <target state="translated">.observer()</target>
        </trans-unit>
        <trans-unit id="c90bd0e3ee12231330dbe04118106a93827d9694" translate="yes" xml:space="preserve">
          <source>.observes()</source>
          <target state="translated">.observes()</target>
        </trans-unit>
        <trans-unit id="2305a785f65598ad22af79c88580504c1dff0167" translate="yes" xml:space="preserve">
          <source>.off()</source>
          <target state="translated">.off()</target>
        </trans-unit>
        <trans-unit id="01f17f7869393d3f7d12f0550d86befdd45ff65f" translate="yes" xml:space="preserve">
          <source>.onInjectHelpers()</source>
          <target state="translated">.onInjectHelpers()</target>
        </trans-unit>
        <trans-unit id="1da7921c2c25ec886cbdb8640d9aa5c31f12ad39" translate="yes" xml:space="preserve">
          <source>.once()</source>
          <target state="translated">.once()</target>
        </trans-unit>
        <trans-unit id="b09861854e6cd9a5b49cfce4e11416c9c766638a" translate="yes" xml:space="preserve">
          <source>.one()</source>
          <target state="translated">.one()</target>
        </trans-unit>
        <trans-unit id="e21c115974d15aa17897e5ca75d7a55c029dc3cf" translate="yes" xml:space="preserve">
          <source>.oneWay()</source>
          <target state="translated">.oneWay()</target>
        </trans-unit>
        <trans-unit id="551af9d3d8b2bb7e1c84973b4fa6b0d3c4199c49" translate="yes" xml:space="preserve">
          <source>.onerror (event)</source>
          <target state="translated">.onerror (event)</target>
        </trans-unit>
        <trans-unit id="d51398bf03daa0dc8367d43f4d7aee3e8776eb94" translate="yes" xml:space="preserve">
          <source>.ownerInjection()</source>
          <target state="translated">.ownerInjection()</target>
        </trans-unit>
        <trans-unit id="6e15b87624ccd09e1857ea35d411f1c0377f3871" translate="yes" xml:space="preserve">
          <source>.paramsFor()</source>
          <target state="translated">.paramsFor()</target>
        </trans-unit>
        <trans-unit id="9b86b36accd9dc20c3bd2ddf5953d294062191a8" translate="yes" xml:space="preserve">
          <source>.pattern</source>
          <target state="translated">.pattern</target>
        </trans-unit>
        <trans-unit id="a32f8cc58be76bc51b81218feb64eeb33e79dc88" translate="yes" xml:space="preserve">
          <source>.pauseTest()</source>
          <target state="translated">.pauseTest()</target>
        </trans-unit>
        <trans-unit id="e40afbcd712deb4b53aeff024507f00a956e243c" translate="yes" xml:space="preserve">
          <source>.plural()</source>
          <target state="translated">.plural()</target>
        </trans-unit>
        <trans-unit id="209d198304420c613c5f38a5241f6cbf45e681be" translate="yes" xml:space="preserve">
          <source>.pluralize()</source>
          <target state="translated">.pluralize()</target>
        </trans-unit>
        <trans-unit id="5dcd2dc85b2c62031fd1fe47cd37f40d6457e354" translate="yes" xml:space="preserve">
          <source>.popObject()</source>
          <target state="translated">.popObject()</target>
        </trans-unit>
        <trans-unit id="f09bb99135bf49f81cf5d5850f360d6e6297d22f" translate="yes" xml:space="preserve">
          <source>.positionalParams</source>
          <target state="translated">.positionalParams</target>
        </trans-unit>
        <trans-unit id="f39d1a924efb0824f830fa152327cf87f76f6057" translate="yes" xml:space="preserve">
          <source>.promise</source>
          <target state="translated">.promise</target>
        </trans-unit>
        <trans-unit id="05f48948473b3cc64a8c927a9d9d865a36586483" translate="yes" xml:space="preserve">
          <source>.promise()</source>
          <target state="translated">.promise()</target>
        </trans-unit>
        <trans-unit id="3c52c48f25b68128075fde8e175310a0f2575583" translate="yes" xml:space="preserve">
          <source>.property()</source>
          <target state="translated">.property()</target>
        </trans-unit>
        <trans-unit id="9a8214b2505020f980915d24b28b1817c719c97a" translate="yes" xml:space="preserve">
          <source>.purgedCache()</source>
          <target state="translated">.purgedCache()</target>
        </trans-unit>
        <trans-unit id="05259fc0517bd9bd6e2dd55d756c3fd9cf39a1f1" translate="yes" xml:space="preserve">
          <source>.pushObject()</source>
          <target state="translated">.pushObject()</target>
        </trans-unit>
        <trans-unit id="5976f9747dee1bf246540f1fef79ed8880fcaef2" translate="yes" xml:space="preserve">
          <source>.pushObjects()</source>
          <target state="translated">.pushObjects()</target>
        </trans-unit>
        <trans-unit id="977cd649eb9161c515547c02de214320391e9ba8" translate="yes" xml:space="preserve">
          <source>.queryParams</source>
          <target state="translated">.queryParams</target>
        </trans-unit>
        <trans-unit id="5619af10f0e3837cd96c573221aa0fff755a22ac" translate="yes" xml:space="preserve">
          <source>.race()</source>
          <target state="translated">.race()</target>
        </trans-unit>
        <trans-unit id="444127ca8db794dc7139e43cc30ce4c271f454b5" translate="yes" xml:space="preserve">
          <source>.readDOMAttr()</source>
          <target state="translated">.readDOMAttr()</target>
        </trans-unit>
        <trans-unit id="fbe8069994d8faae286cbe9db57ac95821616227" translate="yes" xml:space="preserve">
          <source>.readOnly()</source>
          <target state="translated">.readOnly()</target>
        </trans-unit>
        <trans-unit id="c05bb6c41deb8806df65fc325006182b75cc8c84" translate="yes" xml:space="preserve">
          <source>.reads()</source>
          <target state="translated">.reads()</target>
        </trans-unit>
        <trans-unit id="4bf3011b55616ef26377dbd2a7e48fc53e9a6aa6" translate="yes" xml:space="preserve">
          <source>.ready (event)</source>
          <target state="translated">.ready (event)</target>
        </trans-unit>
        <trans-unit id="62d16a55db9ea0db85357e2ada99baaae86bd58d" translate="yes" xml:space="preserve">
          <source>.reason</source>
          <target state="translated">.reason</target>
        </trans-unit>
        <trans-unit id="c3b6ceb6d240bea689be208f48045d0a91908dae" translate="yes" xml:space="preserve">
          <source>.recompute()</source>
          <target state="translated">.recompute()</target>
        </trans-unit>
        <trans-unit id="fdb1446415a7cf26fd84346b7d42cda99c1b528b" translate="yes" xml:space="preserve">
          <source>.redirect()</source>
          <target state="translated">.redirect()</target>
        </trans-unit>
        <trans-unit id="d0f4b4460b8db067171b431083b80dc1bb7de9b4" translate="yes" xml:space="preserve">
          <source>.reduce()</source>
          <target state="translated">.reduce()</target>
        </trans-unit>
        <trans-unit id="eae610bc3a3c85f95afb9d3428e94c41de976375" translate="yes" xml:space="preserve">
          <source>.refresh()</source>
          <target state="translated">.refresh()</target>
        </trans-unit>
        <trans-unit id="82aa8c924a8119a8e0155eb10e8d2631621fa005" translate="yes" xml:space="preserve">
          <source>.register()</source>
          <target state="translated">.register()</target>
        </trans-unit>
        <trans-unit id="db9a0f96af82e5e74c18de28d453c78ef97746f0" translate="yes" xml:space="preserve">
          <source>.registerAsyncHelper()</source>
          <target state="translated">.registerAsyncHelper()</target>
        </trans-unit>
        <trans-unit id="4d55e97f23e1a9a10b7b952bf8d39db17c0e9d33" translate="yes" xml:space="preserve">
          <source>.registerDeprecationHandler()</source>
          <target state="translated">.registerDeprecationHandler()</target>
        </trans-unit>
        <trans-unit id="2ee3eadd2726672f96e3d6c6f56ebbfd17bf074b" translate="yes" xml:space="preserve">
          <source>.registerHelper()</source>
          <target state="translated">.registerHelper()</target>
        </trans-unit>
        <trans-unit id="8e82a13af8026b9c8cf12343953fe21b5f4361c3" translate="yes" xml:space="preserve">
          <source>.registerOptions()</source>
          <target state="translated">.registerOptions()</target>
        </trans-unit>
        <trans-unit id="8955eb096133a8d5bac783970c431e0c143ffbb0" translate="yes" xml:space="preserve">
          <source>.registerOptionsForType()</source>
          <target state="translated">.registerOptionsForType()</target>
        </trans-unit>
        <trans-unit id="74381ef48ff0e1aeb59e05242ae424ec5e320580" translate="yes" xml:space="preserve">
          <source>.registerWaiter()</source>
          <target state="translated">.registerWaiter()</target>
        </trans-unit>
        <trans-unit id="093cd72f1519c3aa003b42c1fcc4f097ed1dc934" translate="yes" xml:space="preserve">
          <source>.registerWarnHandler()</source>
          <target state="translated">.registerWarnHandler()</target>
        </trans-unit>
        <trans-unit id="c1086e4cb70651bec1935623f0ed604f7cd03274" translate="yes" xml:space="preserve">
          <source>.registeredOption()</source>
          <target state="translated">.registeredOption()</target>
        </trans-unit>
        <trans-unit id="7fec84b5fc9455c47d4b15dc8936c7c2a90c07d8" translate="yes" xml:space="preserve">
          <source>.registeredOptions()</source>
          <target state="translated">.registeredOptions()</target>
        </trans-unit>
        <trans-unit id="7a2ae1ecb91cc97ae0088d0a976f1b09eeff01f3" translate="yes" xml:space="preserve">
          <source>.registeredOptionsForType()</source>
          <target state="translated">.registeredOptionsForType()</target>
        </trans-unit>
        <trans-unit id="389b677fdec0bc402c00f0507c296a136c6a97cd" translate="yes" xml:space="preserve">
          <source>.reject()</source>
          <target state="translated">.reject()</target>
        </trans-unit>
        <trans-unit id="315540e6e23a86b8ef61b089aa3e943c7b16f09a" translate="yes" xml:space="preserve">
          <source>.rejectBy()</source>
          <target state="translated">.rejectBy()</target>
        </trans-unit>
        <trans-unit id="1583c75e9576c5e9065b81e7e4f23a2de3cee2d6" translate="yes" xml:space="preserve">
          <source>.removeArrayObserver()</source>
          <target state="translated">.removeArrayObserver()</target>
        </trans-unit>
        <trans-unit id="b3a045fb0e0a943cf04a0a57922cbcbf994c3259" translate="yes" xml:space="preserve">
          <source>.removeAt()</source>
          <target state="translated">.removeAt()</target>
        </trans-unit>
        <trans-unit id="6adf56dd3c2f8a0cc4d2aed40c857244b4885a4b" translate="yes" xml:space="preserve">
          <source>.removeListener()</source>
          <target state="translated">.removeListener()</target>
        </trans-unit>
        <trans-unit id="8c3abe8b080e17dc37228de7d64cf7bd225a4fe9" translate="yes" xml:space="preserve">
          <source>.removeObject()</source>
          <target state="translated">.removeObject()</target>
        </trans-unit>
        <trans-unit id="fa877589eae0e6a207c5563cac3aaadf160094ee" translate="yes" xml:space="preserve">
          <source>.removeObjects()</source>
          <target state="translated">.removeObjects()</target>
        </trans-unit>
        <trans-unit id="ad1fb8f779fa89364bea67279c13566b99aac705" translate="yes" xml:space="preserve">
          <source>.removeObserver()</source>
          <target state="translated">.removeObserver()</target>
        </trans-unit>
        <trans-unit id="dcb1a2414b0fa9e5e095d6e94014cc0691f41f3b" translate="yes" xml:space="preserve">
          <source>.removeTestHelpers()</source>
          <target state="translated">.removeTestHelpers()</target>
        </trans-unit>
        <trans-unit id="1a388604a7dd5ecab37a223d2c0246def5b8740b" translate="yes" xml:space="preserve">
          <source>.render()</source>
          <target state="translated">.render()</target>
        </trans-unit>
        <trans-unit id="d6aaf31bd2519f3a650ce07695cd9680e2709c16" translate="yes" xml:space="preserve">
          <source>.renderTemplate()</source>
          <target state="translated">.renderTemplate()</target>
        </trans-unit>
        <trans-unit id="6da4fd31bb492e9b443c0f3d767823cb4e66eda9" translate="yes" xml:space="preserve">
          <source>.reopen()</source>
          <target state="translated">.reopen()</target>
        </trans-unit>
        <trans-unit id="bbda02e537eebe1a1c2fb73f7de7b94556bb8b4a" translate="yes" xml:space="preserve">
          <source>.reopenClass()</source>
          <target state="translated">.reopenClass()</target>
        </trans-unit>
        <trans-unit id="628c163c0b8691c23baf6c7ecd42b9a217fc8f97" translate="yes" xml:space="preserve">
          <source>.replace</source>
          <target state="translated">.replace</target>
        </trans-unit>
        <trans-unit id="daa898cbc1bf9a928f4388c35562faae8d1f23f9" translate="yes" xml:space="preserve">
          <source>.replace()</source>
          <target state="translated">.replace()</target>
        </trans-unit>
        <trans-unit id="de096677e62e53d152371fee6160448d14c2af9c" translate="yes" xml:space="preserve">
          <source>.replaceRoute()</source>
          <target state="translated">.replaceRoute()</target>
        </trans-unit>
        <trans-unit id="df01b1bc3ad7202b48b72fb9201d86c3f82f6228" translate="yes" xml:space="preserve">
          <source>.replaceWith()</source>
          <target state="translated">.replaceWith()</target>
        </trans-unit>
        <trans-unit id="514512fdb962c802492f2e700703318166bff188" translate="yes" xml:space="preserve">
          <source>.rerender()</source>
          <target state="translated">.rerender()</target>
        </trans-unit>
        <trans-unit id="20f7e1a992266480d3b2ebeaabc13c686d37bc3e" translate="yes" xml:space="preserve">
          <source>.reset()</source>
          <target state="translated">.reset()</target>
        </trans-unit>
        <trans-unit id="d5db017ec9b464e8d299acde915ab4e4622f5f87" translate="yes" xml:space="preserve">
          <source>.resetController()</source>
          <target state="translated">.resetController()</target>
        </trans-unit>
        <trans-unit id="cf8d33e22e0b08a92c7c59349db36a00b651bf34" translate="yes" xml:space="preserve">
          <source>.resolve()</source>
          <target state="translated">.resolve()</target>
        </trans-unit>
        <trans-unit id="8433bb1791dced9aa024e683beb4a713bdfe40bd" translate="yes" xml:space="preserve">
          <source>.resolveRegistration()</source>
          <target state="translated">.resolveRegistration()</target>
        </trans-unit>
        <trans-unit id="aab779c70e1d68e3146c8837549ccc02f0c4858d" translate="yes" xml:space="preserve">
          <source>.resolver</source>
          <target state="translated">.resolver</target>
        </trans-unit>
        <trans-unit id="e435da409301a1f77eb2b81ff4bc3f4d417f9f84" translate="yes" xml:space="preserve">
          <source>.resumeTest()</source>
          <target state="translated">.resumeTest()</target>
        </trans-unit>
        <trans-unit id="d35efa22b35c58b26f52b7226331a2005af21d23" translate="yes" xml:space="preserve">
          <source>.rethrow()</source>
          <target state="translated">.rethrow()</target>
        </trans-unit>
        <trans-unit id="0e1f41ffa9623a4e6f0757f62ccb02a4777c3a46" translate="yes" xml:space="preserve">
          <source>.reverseObjects()</source>
          <target state="translated">.reverseObjects()</target>
        </trans-unit>
        <trans-unit id="709133869005bbf1b9bd7fd7ea42bfda7cf57723" translate="yes" xml:space="preserve">
          <source>.rootElement</source>
          <target state="translated">.rootElement</target>
        </trans-unit>
        <trans-unit id="cea167358d3e6988e70d3cda89a994718dd2ba82" translate="yes" xml:space="preserve">
          <source>.rootURL</source>
          <target state="translated">.rootURL</target>
        </trans-unit>
        <trans-unit id="7a56d18e21c87a45bcfec3e8558cf55d4eec3545" translate="yes" xml:space="preserve">
          <source>.routeName</source>
          <target state="translated">.routeName</target>
        </trans-unit>
        <trans-unit id="324cda9c74077dbce5a9cdb6c4c6c511172ad399" translate="yes" xml:space="preserve">
          <source>.runInDebug()</source>
          <target state="translated">.runInDebug()</target>
        </trans-unit>
        <trans-unit id="acc0c549ca05308a3a9c0e271bde4c7b6c5c6472" translate="yes" xml:space="preserve">
          <source>.schedule()</source>
          <target state="translated">.schedule()</target>
        </trans-unit>
        <trans-unit id="df7ccee3fe24ac90d472b9e2f46d000716debc5f" translate="yes" xml:space="preserve">
          <source>.scheduleOnce()</source>
          <target state="translated">.scheduleOnce()</target>
        </trans-unit>
        <trans-unit id="3f1df0644f32586fe1e99b5aa5992b2169c9c2f8" translate="yes" xml:space="preserve">
          <source>.send()</source>
          <target state="translated">.send()</target>
        </trans-unit>
        <trans-unit id="3df8bb574de4b23b89691a6e098153e71ad4a1a1" translate="yes" xml:space="preserve">
          <source>.sendAction()</source>
          <target state="translated">.sendAction()</target>
        </trans-unit>
        <trans-unit id="7c2621f0cf357269071448367a98b79afe4f1344" translate="yes" xml:space="preserve">
          <source>.sendEvent()</source>
          <target state="translated">.sendEvent()</target>
        </trans-unit>
        <trans-unit id="5cae48963d6123be8823d877400bfcbde3b51f55" translate="yes" xml:space="preserve">
          <source>.serialize()</source>
          <target state="translated">.serialize()</target>
        </trans-unit>
        <trans-unit id="50b54472661e36ad2672c1ed554f2eb13f355195" translate="yes" xml:space="preserve">
          <source>.service()</source>
          <target state="translated">.service()</target>
        </trans-unit>
        <trans-unit id="06e45937f01c9a038b655035b4eaa49501ced3fd" translate="yes" xml:space="preserve">
          <source>.set()</source>
          <target state="translated">.set()</target>
        </trans-unit>
        <trans-unit id="7dc070424c5dd10941e0ce6cc10b1731b19b599b" translate="yes" xml:space="preserve">
          <source>.setDiff()</source>
          <target state="translated">.setDiff()</target>
        </trans-unit>
        <trans-unit id="1c1d3b306d828683fac47a74d4f2e526bd2e824b" translate="yes" xml:space="preserve">
          <source>.setEach()</source>
          <target state="translated">.setEach()</target>
        </trans-unit>
        <trans-unit id="944fa3242a2f6f2cd243fb5124873dfb242f48f9" translate="yes" xml:space="preserve">
          <source>.setObjects()</source>
          <target state="translated">.setObjects()</target>
        </trans-unit>
        <trans-unit id="0d06f93ef4b94e974deb2abb16f5d1cbce9fd974" translate="yes" xml:space="preserve">
          <source>.setOwner()</source>
          <target state="translated">.setOwner()</target>
        </trans-unit>
        <trans-unit id="19a352dabe7c3240625c24de9270866f7bdc3338" translate="yes" xml:space="preserve">
          <source>.setProperties()</source>
          <target state="translated">.setProperties()</target>
        </trans-unit>
        <trans-unit id="7dbd27387a63918876282301a4d05f5f78be93db" translate="yes" xml:space="preserve">
          <source>.setupController()</source>
          <target state="translated">.setupController()</target>
        </trans-unit>
        <trans-unit id="49ab39c8357a8780d7424a3cff42cd55cb2b80e8" translate="yes" xml:space="preserve">
          <source>.setupForTesting()</source>
          <target state="translated">.setupForTesting()</target>
        </trans-unit>
        <trans-unit id="44debe3943696512ed37638998f9b458209057a8" translate="yes" xml:space="preserve">
          <source>.shiftObject()</source>
          <target state="translated">.shiftObject()</target>
        </trans-unit>
        <trans-unit id="b984ba174423a674e7539f0ae20e82ef6da8198a" translate="yes" xml:space="preserve">
          <source>.singular()</source>
          <target state="translated">.singular()</target>
        </trans-unit>
        <trans-unit id="e15ab5e5859a8cef699863490dd5b0db0894820e" translate="yes" xml:space="preserve">
          <source>.singularize()</source>
          <target state="translated">.singularize()</target>
        </trans-unit>
        <trans-unit id="6be3698ab08268d63e0d30c335775d92e26f8a1f" translate="yes" xml:space="preserve">
          <source>.slice()</source>
          <target state="translated">.slice()</target>
        </trans-unit>
        <trans-unit id="04f10b62f5957c03f949a789e69c46e07c97e47b" translate="yes" xml:space="preserve">
          <source>.sort()</source>
          <target state="translated">.sort()</target>
        </trans-unit>
        <trans-unit id="347d142f3b8796941c13c71beb26f3275a6b10ca" translate="yes" xml:space="preserve">
          <source>.sortBy()</source>
          <target state="translated">.sortBy()</target>
        </trans-unit>
        <trans-unit id="7d69e314f129bc6da2427bcac20d11fb0d178ba0" translate="yes" xml:space="preserve">
          <source>.sum()</source>
          <target state="translated">.sum()</target>
        </trans-unit>
        <trans-unit id="db0f4bc8f2a0faaa173a97c690ee3fc4bac1af07" translate="yes" xml:space="preserve">
          <source>.tabindex</source>
          <target state="translated">.tabindex</target>
        </trans-unit>
        <trans-unit id="5ddbe6b8c1d88e5873895f28d57864bd8c2dfa89" translate="yes" xml:space="preserve">
          <source>.tagName</source>
          <target state="translated">.tagName</target>
        </trans-unit>
        <trans-unit id="72696ccc80293d7cb64ff46f34e88a9ed1b773d9" translate="yes" xml:space="preserve">
          <source>.target</source>
          <target state="translated">.target</target>
        </trans-unit>
        <trans-unit id="dd8cc95545861c8c2e438b1150bfaccec00359fd" translate="yes" xml:space="preserve">
          <source>.templateName</source>
          <target state="translated">.templateName</target>
        </trans-unit>
        <trans-unit id="67710b3e43ca93c87c13cff2946239bdf994d13a" translate="yes" xml:space="preserve">
          <source>.testHelpers</source>
          <target state="translated">.testHelpers</target>
        </trans-unit>
        <trans-unit id="c11963101a531475a743a51f6277adccfd36ff1f" translate="yes" xml:space="preserve">
          <source>.testing</source>
          <target state="translated">.testing</target>
        </trans-unit>
        <trans-unit id="3b746a92956a266761e8d13a451cb51ad4e9e9a1" translate="yes" xml:space="preserve">
          <source>.then()</source>
          <target state="translated">.then()</target>
        </trans-unit>
        <trans-unit id="6dff2026165203d8960fd32e001e2add3dec8968" translate="yes" xml:space="preserve">
          <source>.throttle()</source>
          <target state="translated">.throttle()</target>
        </trans-unit>
        <trans-unit id="f2e5f1243797e0fc89bedab0f0fe5f36df4f8f57" translate="yes" xml:space="preserve">
          <source>.title</source>
          <target state="translated">.title</target>
        </trans-unit>
        <trans-unit id="96b9779b02de91f5d3e3d2367fcb7335cd09d167" translate="yes" xml:space="preserve">
          <source>.toArray()</source>
          <target state="translated">.toArray()</target>
        </trans-unit>
        <trans-unit id="87cca90e74625023a045b9c8594e8d9816fe9270" translate="yes" xml:space="preserve">
          <source>.toString()</source>
          <target state="translated">.toString()</target>
        </trans-unit>
        <trans-unit id="7536fcc02e1b725065b0fca1c8a967c4651b43e5" translate="yes" xml:space="preserve">
          <source>.toggleProperty()</source>
          <target state="translated">.toggleProperty()</target>
        </trans-unit>
        <trans-unit id="8063aabf938fa903c6f251ebbc00bd8d8f5252d0" translate="yes" xml:space="preserve">
          <source>.transitionTo()</source>
          <target state="translated">.transitionTo()</target>
        </trans-unit>
        <trans-unit id="403e5be93340bdfb989c1c22fb9f9af1a358cd10" translate="yes" xml:space="preserve">
          <source>.transitionToRoute()</source>
          <target state="translated">.transitionToRoute()</target>
        </trans-unit>
        <trans-unit id="252e6a710cfd64552c5a5126b772db8464e6406f" translate="yes" xml:space="preserve">
          <source>.trigger()</source>
          <target state="translated">.trigger()</target>
        </trans-unit>
        <trans-unit id="ebd4fe79603427fde7792c38b6ffe2dd324ab0e8" translate="yes" xml:space="preserve">
          <source>.triggerEvent()</source>
          <target state="translated">.triggerEvent()</target>
        </trans-unit>
        <trans-unit id="885206c8c44b9f8c15f1b4b9bb8d2d3a51953e36" translate="yes" xml:space="preserve">
          <source>.tryInvoke()</source>
          <target state="translated">.tryInvoke()</target>
        </trans-unit>
        <trans-unit id="ceab73322cb03773850bf20d7c11a4112c308e49" translate="yes" xml:space="preserve">
          <source>.trySet()</source>
          <target state="translated">.trySet()</target>
        </trans-unit>
        <trans-unit id="a2dab6c9649b3f13655894d01b438167e0e426b8" translate="yes" xml:space="preserve">
          <source>.typeOf()</source>
          <target state="translated">.typeOf()</target>
        </trans-unit>
        <trans-unit id="210986e77a26a3a117b23e47927dddb95a3dbc0b" translate="yes" xml:space="preserve">
          <source>.uncountable()</source>
          <target state="translated">.uncountable()</target>
        </trans-unit>
        <trans-unit id="07d634fa502df881049b0b436da756291a29881c" translate="yes" xml:space="preserve">
          <source>.underscore()</source>
          <target state="translated">.underscore()</target>
        </trans-unit>
        <trans-unit id="a73e243b46b75aa5490258439647fed5825962c5" translate="yes" xml:space="preserve">
          <source>.union()</source>
          <target state="translated">.union()</target>
        </trans-unit>
        <trans-unit id="4509e379a926c41e180d2d410612d54f6353e3f9" translate="yes" xml:space="preserve">
          <source>.uniq()</source>
          <target state="translated">.uniq()</target>
        </trans-unit>
        <trans-unit id="b0d08a4be748ddb03b449710b944e3be94d7ec2a" translate="yes" xml:space="preserve">
          <source>.uniqBy()</source>
          <target state="translated">.uniqBy()</target>
        </trans-unit>
        <trans-unit id="173162df9930f05f8b4876aef52e162768170554" translate="yes" xml:space="preserve">
          <source>.unregister()</source>
          <target state="translated">.unregister()</target>
        </trans-unit>
        <trans-unit id="3fabf9f087bfd5baf440b42c1dc9c757446f3eb4" translate="yes" xml:space="preserve">
          <source>.unregisterHelper()</source>
          <target state="translated">.unregisterHelper()</target>
        </trans-unit>
        <trans-unit id="c8795a09000b1b183d89d8f4b5b27c4086841889" translate="yes" xml:space="preserve">
          <source>.unregisterWaiter()</source>
          <target state="translated">.unregisterWaiter()</target>
        </trans-unit>
        <trans-unit id="1f7ae1f6b712fb238767027028535b51bba85747" translate="yes" xml:space="preserve">
          <source>.unshiftObject()</source>
          <target state="translated">.unshiftObject()</target>
        </trans-unit>
        <trans-unit id="30fecdb515ec54e933ce744c38edbcf6a06eb478" translate="yes" xml:space="preserve">
          <source>.unshiftObjects()</source>
          <target state="translated">.unshiftObjects()</target>
        </trans-unit>
        <trans-unit id="529736a421d2b3af6f2773551e349d2749c79770" translate="yes" xml:space="preserve">
          <source>.urlFor()</source>
          <target state="translated">.urlFor()</target>
        </trans-unit>
        <trans-unit id="f7bb4c48b4f8fbb517eefbc2486c31bb22243a46" translate="yes" xml:space="preserve">
          <source>.value</source>
          <target state="translated">.value</target>
        </trans-unit>
        <trans-unit id="a14cf37a71acce1919a2300e7bbef1bff367dbce" translate="yes" xml:space="preserve">
          <source>.visit()</source>
          <target state="translated">.visit()</target>
        </trans-unit>
        <trans-unit id="e1035e9bc446462904465be03a3fced5c6d08347" translate="yes" xml:space="preserve">
          <source>.volatile()</source>
          <target state="translated">.volatile()</target>
        </trans-unit>
        <trans-unit id="6419bff37c4a92412f77b7edc0d54e3aa361585f" translate="yes" xml:space="preserve">
          <source>.wait()</source>
          <target state="translated">.wait()</target>
        </trans-unit>
        <trans-unit id="6c60014f305a63248516a621058f002dae006b97" translate="yes" xml:space="preserve">
          <source>.warn()</source>
          <target state="translated">.warn()</target>
        </trans-unit>
        <trans-unit id="fb2a9b1aa26fbeef11ab5945f5041a788331216b" translate="yes" xml:space="preserve">
          <source>.watchModelTypes()</source>
          <target state="translated">.watchModelTypes()</target>
        </trans-unit>
        <trans-unit id="f1af775ba0ff416927d875c85b1d0e92d969c48f" translate="yes" xml:space="preserve">
          <source>.watchRecords()</source>
          <target state="translated">.watchRecords()</target>
        </trans-unit>
        <trans-unit id="a5c9b2ed0dd953ece9d432ae07fd679f5fcfb2ee" translate="yes" xml:space="preserve">
          <source>.willClearRender (event)</source>
          <target state="translated">.willClearRender (event)</target>
        </trans-unit>
        <trans-unit id="752125cd8e651eeafec8d59564d8774e122d832b" translate="yes" xml:space="preserve">
          <source>.willDestroy()</source>
          <target state="translated">.willDestroy()</target>
        </trans-unit>
        <trans-unit id="dbec194f85474c70034819ba8be78e4fb030c286" translate="yes" xml:space="preserve">
          <source>.willDestroyElement (event)</source>
          <target state="translated">.willDestroyElement (event)</target>
        </trans-unit>
        <trans-unit id="f72536317d7af32f1f9e8120862757bf9142a73d" translate="yes" xml:space="preserve">
          <source>.willInsertElement (event)</source>
          <target state="translated">.willInsertElement (event)</target>
        </trans-unit>
        <trans-unit id="202c2b8c9d5db361a6c7bf68e098f6aa22a65dd3" translate="yes" xml:space="preserve">
          <source>.willRender (event)</source>
          <target state="translated">.willRender (event)</target>
        </trans-unit>
        <trans-unit id="f7baa6fce678a563eb25ec1ebd52b27b67fbce80" translate="yes" xml:space="preserve">
          <source>.willRender()</source>
          <target state="translated">.willRender()</target>
        </trans-unit>
        <trans-unit id="8ac3d4bcb7c278576357c189beb239d3f6c5bd32" translate="yes" xml:space="preserve">
          <source>.willTransition (event)</source>
          <target state="translated">.willTransition (event)</target>
        </trans-unit>
        <trans-unit id="284ae029f9789822159cbfb5dd859c87b1d07fb0" translate="yes" xml:space="preserve">
          <source>.willTransition()</source>
          <target state="translated">.willTransition()</target>
        </trans-unit>
        <trans-unit id="9f4e20e78df2f687614d524d526d43caa69ca7a5" translate="yes" xml:space="preserve">
          <source>.willUpdate (event)</source>
          <target state="translated">.willUpdate (event)</target>
        </trans-unit>
        <trans-unit id="b848096d867e647a09e96dacdd01cadbf01cd3d3" translate="yes" xml:space="preserve">
          <source>.willUpdate()</source>
          <target state="translated">.willUpdate()</target>
        </trans-unit>
        <trans-unit id="30c6a21df39eeae90936e0722ad768363ce18ac4" translate="yes" xml:space="preserve">
          <source>.without()</source>
          <target state="translated">.without()</target>
        </trans-unit>
        <trans-unit id="a7030f2353f3f8f06ad1821c6f575081f512ffe1" translate="yes" xml:space="preserve">
          <source>/posts</source>
          <target state="translated">/posts</target>
        </trans-unit>
        <trans-unit id="0febbf643fa2d1e1b004712491bfb31ec43197c2" translate="yes" xml:space="preserve">
          <source>/posts/123</source>
          <target state="translated">/posts/123</target>
        </trans-unit>
        <trans-unit id="cd917b25c96589feb68fa856882d5619529786ec" translate="yes" xml:space="preserve">
          <source>0 if both are equal,</source>
          <target state="translated">둘 다 같으면 0</target>
        </trans-unit>
        <trans-unit id="212b3c1ec23de4d9b3c4efdb01c16e9d1f0cf892" translate="yes" xml:space="preserve">
          <source>1 if the first is greater than the second.</source>
          <target state="translated">첫 번째가 두 번째보다 큰 경우 1입니다.</target>
        </trans-unit>
        <trans-unit id="c841415dfd82185ca4d3deb0b06f47faeee1bf58" translate="yes" xml:space="preserve">
          <source>1) A decision can be made to redirect elsewhere without needing to resolve the model first. 2) Any async operations need to occur first before the model is attempted to be resolved.</source>
          <target state="translated">1) 모델을 먼저 해결할 필요없이 다른 곳으로 리디렉션하기로 결정할 수 있습니다. 2) 모델을 해결하기 전에 비동기 작업을 먼저 수행해야합니다.</target>
        </trans-unit>
        <trans-unit id="ae028af821b1dc344c1aa4b7b796219b4b012c28" translate="yes" xml:space="preserve">
          <source>1. Gather deprecations into one source</source>
          <target state="translated">1. 지원 중단을 하나의 소스로 수집</target>
        </trans-unit>
        <trans-unit id="d6de0c7a098c80f9386fa83cdb7a191bf208037f" translate="yes" xml:space="preserve">
          <source>2. &quot;Turn on&quot; a deprecation</source>
          <target state="translated">2. 지원 중단 &quot;켜기&quot;</target>
        </trans-unit>
        <trans-unit id="4ba398b02f2617e8b80f9e1661ae35fa479462dc" translate="yes" xml:space="preserve">
          <source>3. Fix and Repeat</source>
          <target state="translated">3. 수정 및 반복</target>
        </trans-unit>
        <trans-unit id="378cf3b4d4d62e8e5d6138d850b1f3d030b92adb" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;#method_createRecord&quot;&gt;createRecord&lt;/a&gt; is used for creating new records on the client side. This will return a new record in the &lt;code&gt;created.uncommitted&lt;/code&gt; state. In order to persist this record to the backend you will need to call &lt;code&gt;record.save()&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;#method_createRecord&quot;&gt;createRecord&lt;/a&gt; 는 클라이언트 측에서 새 레코드를 작성하는 데 사용됩니다. 이렇게하면 &lt;code&gt;created.uncommitted&lt;/code&gt; 상태 의 새 레코드가 반환됩니다 . 이 레코드를 백엔드에 유지하려면 &lt;code&gt;record.save()&lt;/code&gt; 를 호출해야합니다 .</target>
        </trans-unit>
        <trans-unit id="94fb9019a3f8a4ae22a7de0bc3ebb529506e1f9d" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;#method_push&quot;&gt;push&lt;/a&gt; is used to notify Ember Data's store of new or updated records that exist in the backend. This will return a record in the &lt;code&gt;loaded.saved&lt;/code&gt; state. The primary use-case for &lt;code&gt;store#push&lt;/code&gt; is to notify Ember Data about record updates (full or partial) that happen outside of the normal adapter methods (for example &lt;a href=&quot;http://dev.w3.org/html5/eventsource/&quot;&gt;SSE&lt;/a&gt; or &lt;a href=&quot;http://www.w3.org/TR/2009/WD-websockets-20091222/&quot;&gt;Web Sockets&lt;/a&gt;).</source>
          <target state="translated">&lt;a href=&quot;#method_push&quot;&gt;push&lt;/a&gt; 는 백엔드에 존재하는 새 레코드 나 업데이트 된 레코드를 Ember Data의 저장소에 알리는 데 사용됩니다. &lt;code&gt;loaded.saved&lt;/code&gt; 상태 의 레코드를 반환합니다 . &lt;code&gt;store#push&lt;/code&gt; 의 주요 사용 사례 는 일반적인 어댑터 메소드 (예 : &lt;a href=&quot;http://dev.w3.org/html5/eventsource/&quot;&gt;SSE&lt;/a&gt; 또는 &lt;a href=&quot;http://www.w3.org/TR/2009/WD-websockets-20091222/&quot;&gt;Web Sockets&lt;/a&gt; ) 외부에서 발생하는 레코드 업데이트 (전체 또는 부분)에 대해 Ember Data에 알리는 것 입니다.</target>
        </trans-unit>
        <trans-unit id="f3f2e448d00bd683324d8d696e05cf262b631a68" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;#method_pushPayload&quot;&gt;pushPayload&lt;/a&gt; is a convenience wrapper for &lt;code&gt;store#push&lt;/code&gt; that will deserialize payloads if the Serializer implements a &lt;code&gt;pushPayload&lt;/code&gt; method.</source>
          <target state="translated">&lt;a href=&quot;#method_pushPayload&quot;&gt;pushPayload&lt;/a&gt; 는 Serializer가 &lt;code&gt;pushPayload&lt;/code&gt; 메소드를 구현하는 경우 페이로드를 직렬화 해제하는 &lt;code&gt;store#push&lt;/code&gt; 의 편리한 래퍼입니다 .</target>
        </trans-unit>
        <trans-unit id="efd486f978589a84fff8cd4c0463e193b3106262" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../ember.copyable&quot;&gt;Ember.Copyable&lt;/a&gt;,</source>
          <target state="translated">&lt;a href=&quot;../ember.copyable&quot;&gt;Ember.Copyable&lt;/a&gt;,</target>
        </trans-unit>
        <trans-unit id="caefc9e9fd1edddd2bebb4f11031281e0ef914ad" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../ember.evented&quot;&gt;Ember.Evented&lt;/a&gt;,</source>
          <target state="translated">&lt;a href=&quot;../ember.evented&quot;&gt;Ember.Evented&lt;/a&gt;,</target>
        </trans-unit>
        <trans-unit id="a05318bcf9b50d50aecd12cb062551d79a8ff7d2" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../ember.mutableenumerable&quot;&gt;Ember.MutableEnumerable&lt;/a&gt;,</source>
          <target state="translated">&lt;a href=&quot;../ember.mutableenumerable&quot;&gt;Ember.MutableEnumerable&lt;/a&gt;,</target>
        </trans-unit>
        <trans-unit id="13f5cd7edbcca3b3505aefd2f4ab3a835c98193a" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../ember.observable&quot;&gt;Ember.Observable&lt;/a&gt;,&lt;a href=&quot;../ember.mutablearray&quot;&gt;Ember.MutableArray&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;../ember.observable&quot;&gt;Ember.Observable&lt;/a&gt;,&lt;a href=&quot;../ember.mutablearray&quot;&gt;Ember.MutableArray&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="d7a0ac7630ca263275c3a4f47046d40f46d261b7" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../ember.viewmixin&quot;&gt;Ember.ViewMixin&lt;/a&gt;,&lt;a href=&quot;../ember.actionsupport&quot;&gt;Ember.ActionSupport&lt;/a&gt;,&lt;a href=&quot;../ember.classnamessupport&quot;&gt;Ember.ClassNamesSupport&lt;/a&gt;,&lt;a href=&quot;../ember.targetactionsupport&quot;&gt;Ember.TargetActionSupport&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;../ember.viewmixin&quot;&gt;Ember.ViewMixin&lt;/a&gt;,&lt;a href=&quot;../ember.actionsupport&quot;&gt;Ember.ActionSupport&lt;/a&gt;,&lt;a href=&quot;../ember.classnamessupport&quot;&gt;Ember.ClassNamesSupport&lt;/a&gt;,&lt;a href=&quot;../ember.targetactionsupport&quot;&gt;Ember.TargetActionSupport&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="ade27e3f08588b3793932badbd180e468dca651b" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../ember.viewstatesupport&quot;&gt;Ember.ViewStateSupport&lt;/a&gt;,</source>
          <target state="translated">&lt;a href=&quot;../ember.viewstatesupport&quot;&gt;Ember.ViewStateSupport&lt;/a&gt;,</target>
        </trans-unit>
        <trans-unit id="c4fa28b118b6d7fe5f27d50fd81948d4f5de34ac" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;../registryproxymixin&quot;&gt;RegistryProxyMixin&lt;/a&gt;,</source>
          <target state="translated">&lt;a href=&quot;../registryproxymixin&quot;&gt;RegistryProxyMixin&lt;/a&gt;,</target>
        </trans-unit>
        <trans-unit id="00e03246e9b5bb21aac586b5903f0bb02944d72c" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;configuring-ember/configuring-ember-cli&quot;&gt;Ember CLI&lt;/a&gt; - A robust development toolkit to create, develop, and build Ember applications. When you see an &lt;code&gt;$ ember &amp;lt;command&amp;gt;&lt;/code&gt; instruction throughout the guides, that's Ember CLI!</source>
          <target state="translated">&lt;a href=&quot;configuring-ember/configuring-ember-cli&quot;&gt;Ember CLI&lt;/a&gt; -Ember 응용 프로그램을 생성, 개발 및 구축하기위한 강력한 개발 툴킷입니다. 가이드 전체에 &lt;code&gt;$ ember &amp;lt;command&amp;gt;&lt;/code&gt; 명령 이 표시되면 Ember CLI입니다!</target>
        </trans-unit>
        <trans-unit id="8c1a487cc059494fd23597e1da059f7f9f9fd201" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;ember-inspector&quot;&gt;Ember Inspector&lt;/a&gt; - A browser extension, or bookmarklet, to inspect your application live. It's also useful for spotting Ember applications in the wild, try to install it and open up the &lt;a href=&quot;https://www.nasa.gov/&quot;&gt;NASA website&lt;/a&gt;!</source>
          <target state="translated">&lt;a href=&quot;ember-inspector&quot;&gt;Ember Inspector-&lt;/a&gt; 응용 프로그램을 실시간으로 검사하기위한 브라우저 확장 또는 책갈피입니다. 또한 Ember 응용 프로그램을 야생에서 발견하고 설치하고 &lt;a href=&quot;https://www.nasa.gov/&quot;&gt;NASA 웹 사이트를&lt;/a&gt; 열 때 유용합니다 !</target>
        </trans-unit>
        <trans-unit id="7135fdf06fe98caeef5f6c7cf217082651e4ffa8" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;ember.copyable&quot;&gt;Ember.Copyable&lt;/a&gt;,</source>
          <target state="translated">&lt;a href=&quot;ember.copyable&quot;&gt;Ember.Copyable&lt;/a&gt;,</target>
        </trans-unit>
        <trans-unit id="c264df7e71e4c7aeefd184b6cf3db65ac070c19d" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;ember.evented&quot;&gt;Ember.Evented&lt;/a&gt;,</source>
          <target state="translated">&lt;a href=&quot;ember.evented&quot;&gt;Ember.Evented&lt;/a&gt;,</target>
        </trans-unit>
        <trans-unit id="0a52a0b714b5f7b1054e83b2fc8c116f7bfc2191" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;ember.mutableenumerable&quot;&gt;Ember.MutableEnumerable&lt;/a&gt;,</source>
          <target state="translated">&lt;a href=&quot;ember.mutableenumerable&quot;&gt;Ember.MutableEnumerable&lt;/a&gt;,</target>
        </trans-unit>
        <trans-unit id="c3e73fd1305beac88d7cb9d9c9c6944524f26731" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;ember.observable&quot;&gt;Ember.Observable&lt;/a&gt;,&lt;a href=&quot;ember.mutablearray&quot;&gt;Ember.MutableArray&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;ember.observable&quot;&gt;Ember.Observable&lt;/a&gt;,&lt;a href=&quot;ember.mutablearray&quot;&gt;Ember.MutableArray&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="6aa218a06f3cbd27433d0e888068372c2bceac3a" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;ember.viewmixin&quot;&gt;Ember.ViewMixin&lt;/a&gt;,&lt;a href=&quot;ember.actionsupport&quot;&gt;Ember.ActionSupport&lt;/a&gt;,&lt;a href=&quot;ember.classnamessupport&quot;&gt;Ember.ClassNamesSupport&lt;/a&gt;,&lt;a href=&quot;ember.targetactionsupport&quot;&gt;Ember.TargetActionSupport&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;ember.viewmixin&quot;&gt;Ember.ViewMixin&lt;/a&gt;,&lt;a href=&quot;ember.actionsupport&quot;&gt;Ember.ActionSupport&lt;/a&gt;,&lt;a href=&quot;ember.classnamessupport&quot;&gt;Ember.ClassNamesSupport&lt;/a&gt;,&lt;a href=&quot;ember.targetactionsupport&quot;&gt;Ember.TargetActionSupport&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="5f3cf9bcc8c720e1e8387c670042f4c2ad0eaa26" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;ember.viewstatesupport&quot;&gt;Ember.ViewStateSupport&lt;/a&gt;,</source>
          <target state="translated">&lt;a href=&quot;ember.viewstatesupport&quot;&gt;Ember.ViewStateSupport&lt;/a&gt;,</target>
        </trans-unit>
        <trans-unit id="4e9ec0dac46b178e0e6d7a19f36373f6b839c902" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://emberjs.com/api/#method_getOwner&quot;&gt;&lt;code&gt;Ember.getOwner&lt;/code&gt;&lt;/a&gt; will retrieve the application instance that &quot;owns&quot; an object. This means that framework objects like components, helpers, and routes can use &lt;a href=&quot;http://emberjs.com/api/#method_getOwner&quot;&gt;&lt;code&gt;Ember.getOwner&lt;/code&gt;&lt;/a&gt; to perform lookups through their application instance at runtime.</source>
          <target state="translated">&lt;a href=&quot;http://emberjs.com/api/#method_getOwner&quot;&gt; &lt;code&gt;Ember.getOwner&lt;/code&gt; &lt;/a&gt; 는 객체를 &quot;소유&quot;하는 응용 프로그램 인스턴스를 검색합니다. 즉, 컴포넌트, 헬퍼 및 라우트와 같은 프레임 워크 객체는&lt;a href=&quot;http://emberjs.com/api/#method_getOwner&quot;&gt; &lt;code&gt;Ember.getOwner&lt;/code&gt; &lt;/a&gt; 를사용하여 런타임에 애플리케이션 인스턴스를 통해 조회를 수행할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="396cc93a186da9cd9c54e5bd849a8de9d0be6a4a" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://emberjs.com/api/classes/Ember.Component.html#event_didInsertElement&quot;&gt;&lt;code&gt;didInsertElement()&lt;/code&gt;&lt;/a&gt; is also a good place to attach event listeners. This is particularly useful for custom events or other browser events which do not have a &lt;a href=&quot;http://guides.emberjs.com/v2.1.0/components/handling-events/#toc_event-names&quot;&gt;built-in event handler&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;http://emberjs.com/api/classes/Ember.Component.html#event_didInsertElement&quot;&gt; &lt;code&gt;didInsertElement()&lt;/code&gt; &lt;/a&gt; 또한 이벤트 리스너를 연결하기에 좋은 위치입니다. 이것은&lt;a href=&quot;http://guides.emberjs.com/v2.1.0/components/handling-events/#toc_event-names&quot;&gt; 내장 이벤트 핸들러&lt;/a&gt; 가없는 사용자 정의 이벤트 또는 기타 브라우저 이벤트에 특히 유용 합니다 .</target>
        </trans-unit>
        <trans-unit id="2c647fd90dc9c361df1e1b740ceb8846e96dea42" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://emberjs.com/api/classes/Ember.Component.html#method__&quot;&gt;&lt;code&gt;$()&lt;/code&gt;&lt;/a&gt; will, by default, return a jQuery object for the component's root element, but you can also target child elements within the component's template by passing a selector:</source>
          <target state="translated">&lt;a href=&quot;http://emberjs.com/api/classes/Ember.Component.html#method__&quot;&gt;&lt;code&gt;$()&lt;/code&gt;&lt;/a&gt; will, by default, return a jQuery object for the component's root element, but you can also target child elements within the component's template by passing a selector:</target>
        </trans-unit>
        <trans-unit id="a1321f0b9ddd11c6d639f990344577dafe803737" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://emberjs.com/api/classes/Ember.Object.html&quot;&gt;Ember.Object&lt;/a&gt; also provides a class system, supporting features like mixins and constructor methods. Some features in Ember's object model are not present in JavaScript classes or common patterns, but all are aligned as much as possible with the language and proposed additions.</source>
          <target state="translated">&lt;a href=&quot;http://emberjs.com/api/classes/Ember.Object.html&quot;&gt;Ember.Object&lt;/a&gt; 는 또한 믹스 인 및 생성자 메서드와 같은 기능을 지원하는 클래스 시스템을 제공합니다. Ember 객체 모델의 일부 기능은 JavaScript 클래스 또는 공통 패턴에 없지만 모든 언어 및 제안 된 추가 기능에 따라 정렬됩니다.</target>
        </trans-unit>
        <trans-unit id="76548f244d921d58f78d3a0632ac84a8a1098753" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://emberjs.com/api/classes/Ember.Templates.helpers.html#method_if&quot;&gt;&lt;code&gt;{{if}}&lt;/code&gt;&lt;/a&gt; checks for truthiness, which means all values except &lt;code&gt;false&lt;/code&gt;, &lt;code&gt;undefined&lt;/code&gt;, &lt;code&gt;null&lt;/code&gt;, &lt;code&gt;''&lt;/code&gt;, &lt;code&gt;0&lt;/code&gt; or &lt;code&gt;[]&lt;/code&gt; (i.e., any JavaScript falsy value or an empty array).</source>
          <target state="translated">&lt;a href=&quot;http://emberjs.com/api/classes/Ember.Templates.helpers.html#method_if&quot;&gt;&lt;code&gt;{{if}}&lt;/code&gt;&lt;/a&gt; checks for truthiness, which means all values except &lt;code&gt;false&lt;/code&gt;, &lt;code&gt;undefined&lt;/code&gt;, &lt;code&gt;null&lt;/code&gt;, &lt;code&gt;''&lt;/code&gt;, &lt;code&gt;0&lt;/code&gt; or &lt;code&gt;[]&lt;/code&gt; (i.e., any JavaScript falsy value or an empty array).</target>
        </trans-unit>
        <trans-unit id="3d6542e994074e7bfd6c755a51f13df82321c271" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://emberjs.com/api/classes/Ember.Templates.helpers.html#method_if&quot;&gt;&lt;code&gt;{{if}}&lt;/code&gt;&lt;/a&gt; in this case returns &lt;code&gt;&quot;zoooom&quot;&lt;/code&gt; when &lt;code&gt;isFast&lt;/code&gt; is true and &lt;code&gt;&quot;putt-putt-putt&quot;&lt;/code&gt; when &lt;code&gt;isFast&lt;/code&gt; is false. Helpers invoked as inline expressions render a single value, the same way that properties are a single value.</source>
          <target state="translated">&lt;a href=&quot;http://emberjs.com/api/classes/Ember.Templates.helpers.html#method_if&quot;&gt;&lt;code&gt;{{if}}&lt;/code&gt;&lt;/a&gt; in this case returns &lt;code&gt;&quot;zoooom&quot;&lt;/code&gt; when &lt;code&gt;isFast&lt;/code&gt; is true and &lt;code&gt;&quot;putt-putt-putt&quot;&lt;/code&gt; when &lt;code&gt;isFast&lt;/code&gt; is false. Helpers invoked as inline expressions render a single value, the same way that properties are a single value.</target>
        </trans-unit>
        <trans-unit id="5a843cbacb416eb7216a36e132ddf4c061011874" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://emberjs.com/api/classes/Ember.Templates.helpers.html#method_textarea&quot;&gt;&lt;code&gt;{{textarea}}&lt;/code&gt;&lt;/a&gt; supports binding and/or setting the following properties:</source>
          <target state="translated">&lt;a href=&quot;http://emberjs.com/api/classes/Ember.Templates.helpers.html#method_textarea&quot;&gt;&lt;code&gt;{{textarea}}&lt;/code&gt;&lt;/a&gt; supports binding and/or setting the following properties:</target>
        </trans-unit>
        <trans-unit id="02d91c301a049c1e6f6d547f7a7d9558e1967754" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://emberjs.com/api/classes/Ember.Test.html#method_click&quot;&gt;&lt;code&gt;click&lt;/code&gt;&lt;/a&gt; - pretends to be a user clicking on a specific part of the screen</source>
          <target state="translated">&lt;a href=&quot;http://emberjs.com/api/classes/Ember.Test.html#method_click&quot;&gt; &lt;code&gt;click&lt;/code&gt; &lt;/a&gt; -사용자가 화면의 특정 부분을 클릭하는 척</target>
        </trans-unit>
        <trans-unit id="8336c19db7c1d8bbcb7c879e4b1756edc537511f" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://emberjs.com/api/classes/Ember.Test.html#method_currentURL&quot;&gt;&lt;code&gt;currentURL&lt;/code&gt;&lt;/a&gt; - returns the URL of the page we're currently on</source>
          <target state="translated">&lt;a href=&quot;http://emberjs.com/api/classes/Ember.Test.html#method_currentURL&quot;&gt; &lt;code&gt;currentURL&lt;/code&gt; -&lt;/a&gt; 현재있는 페이지의 URL을 반환</target>
        </trans-unit>
        <trans-unit id="ada2cbe2851c1b4ade1b15a18f043bdec0e31dbf" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://emberjs.com/api/classes/Ember.Test.html#method_registerAsyncHelper&quot;&gt;&lt;code&gt;Ember.Test.registerAsyncHelper&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;http://emberjs.com/api/classes/Ember.Test.html#method_registerHelper&quot;&gt;&lt;code&gt;Ember.Test.registerHelper&lt;/code&gt;&lt;/a&gt; are used to register test helpers that will be injected when &lt;code&gt;startApp&lt;/code&gt; is called. The difference between &lt;code&gt;Ember.Test.registerHelper&lt;/code&gt; and &lt;code&gt;Ember.Test.registerAsyncHelper&lt;/code&gt; is that the latter will not run until any previous async helper has completed and any subsequent async helper will wait for it to finish before running.</source>
          <target state="translated">&lt;a href=&quot;http://emberjs.com/api/classes/Ember.Test.html#method_registerAsyncHelper&quot;&gt; &lt;code&gt;Ember.Test.registerAsyncHelper&lt;/code&gt; &lt;/a&gt; 및&lt;a href=&quot;http://emberjs.com/api/classes/Ember.Test.html#method_registerHelper&quot;&gt; &lt;code&gt;Ember.Test.registerHelper&lt;/code&gt; &lt;/a&gt; 는 &lt;code&gt;startApp&lt;/code&gt; 가 호출될 때 주입 될 테스트 헬퍼를 등록하는 데 사용됩니다. &lt;code&gt;Ember.Test.registerHelper&lt;/code&gt; 와 &lt;code&gt;Ember.Test.registerAsyncHelper&lt;/code&gt; 의 차이점은 후자가 이전의 비동기 헬퍼가 완료 될 때까지 실행되지 않으며 후속 비동기 헬퍼는 실행 전에 완료 될 때까지 대기한다는 것입니다.</target>
        </trans-unit>
        <trans-unit id="6db678b83d9e126ce24489c368f84d8ce76caa29" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://emberjs.com/api/classes/Ember.Test.html#method_visit&quot;&gt;&lt;code&gt;visit&lt;/code&gt;&lt;/a&gt; - loads a given URL</source>
          <target state="translated">&lt;a href=&quot;http://emberjs.com/api/classes/Ember.Test.html#method_visit&quot;&gt; &lt;code&gt;visit&lt;/code&gt; &lt;/a&gt; -주어진 URL을로드</target>
        </trans-unit>
        <trans-unit id="e4a72b752a5066259909bf4d1066caad98ff7a5b" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://emberjs.com/api/data/classes/DS.Adapter.html&quot;&gt;DS.Adapter&lt;/a&gt; is the basic adapter with no functionality. It is generally a good starting point if you want to create an adapter that is radically different from the other Ember adapters.</source>
          <target state="translated">&lt;a href=&quot;http://emberjs.com/api/data/classes/DS.Adapter.html&quot;&gt;DS.Adapter&lt;/a&gt; 는 기능이없는 기본 어댑터입니다. 다른 Ember 어댑터와 근본적으로 다른 어댑터를 작성하려는 경우 일반적으로 좋은 시작점입니다.</target>
        </trans-unit>
        <trans-unit id="96f4491b88b82408de1dfd5f60766ac52acc9789" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://emberjs.com/api/data/classes/DS.JSONAPIAdapter.html&quot;&gt;DS.JSONAPIAdapter&lt;/a&gt; The &lt;code&gt;JSONAPIAdapter&lt;/code&gt; is the default adapter and follows JSON API conventions to communicate with an HTTP server by transmitting JSON via XHR.</source>
          <target state="translated">&lt;a href=&quot;http://emberjs.com/api/data/classes/DS.JSONAPIAdapter.html&quot;&gt;DS.JSONAPIAdapter &lt;/a&gt; &lt;code&gt;JSONAPIAdapter&lt;/code&gt; 는 기본 어댑터이며, XHR를 통해 JSON을 전송하여 HTTP 서버와 통신하기 위해 JSON의 API 규칙을 따릅니다.</target>
        </trans-unit>
        <trans-unit id="822fdb2fad79fd6dfeaf4b2a1942f78d15d7018d" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://emberjs.com/api/data/classes/DS.Model.html#method_save&quot;&gt;&lt;code&gt;save()&lt;/code&gt;&lt;/a&gt; returns a promise, which makes it easy to asynchronously handle success and failure scenarios. Here's a common pattern:</source>
          <target state="translated">&lt;a href=&quot;http://emberjs.com/api/data/classes/DS.Model.html#method_save&quot;&gt; &lt;code&gt;save()&lt;/code&gt; &lt;/a&gt; 는 약속을 반환하므로 성공 및 실패 시나리오를 비동기 적으로 쉽게 처리 할 수 ​​있습니다. 일반적인 패턴은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="4ec2b8d0d8711d121be6d2b945f0b2de971d9257" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://emberjs.com/api/data/classes/DS.RESTAdapter.html&quot;&gt;DS.RESTAdapter&lt;/a&gt; The &lt;code&gt;RESTAdapter&lt;/code&gt; allows your store to communicate with an HTTP server by transmitting JSON via XHR. Before Ember Data 2.0 this adapter was the default.</source>
          <target state="translated">&lt;a href=&quot;http://emberjs.com/api/data/classes/DS.RESTAdapter.html&quot;&gt;DS.RESTAdapter &lt;/a&gt; &lt;code&gt;RESTAdapter&lt;/code&gt; 는 상점이 XHR를 통해 JSON을 전송하여 HTTP 서버와 통신 할 수 있습니다. Ember Data 2.0 이전에는이 ​​어댑터가 기본값이었습니다.</target>
        </trans-unit>
        <trans-unit id="3676a68075078656ecd2548aa89d007774a44c81" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://jsonapi.org/format/#document-meta&quot;&gt;&lt;code&gt;meta&lt;/code&gt;&lt;/a&gt; - object which contains meta-information about relationship</source>
          <target state="translated">&lt;a href=&quot;http://jsonapi.org/format/#document-meta&quot;&gt; &lt;code&gt;meta&lt;/code&gt; -&lt;/a&gt; 관계에 관한 메타 정보를 포함하는 객체</target>
        </trans-unit>
        <trans-unit id="5880f8847243beee2c64cef881bdf1b14cb003a8" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://jsonapi.org/format/#document-resource-object-linkage&quot;&gt;&lt;code&gt;data&lt;/code&gt;&lt;/a&gt; - place for primary data</source>
          <target state="translated">&lt;a href=&quot;http://jsonapi.org/format/#document-resource-object-linkage&quot;&gt; &lt;code&gt;data&lt;/code&gt; &lt;/a&gt; -기본 데이터의 장소</target>
        </trans-unit>
        <trans-unit id="47b29239a74d28b0168d8f5ac2ecbf2d96935d5a" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://jsonapi.org/format/#document-top-level&quot;&gt;Your primary data should be wrapped inside &lt;code&gt;data&lt;/code&gt; property&lt;/a&gt;:</source>
          <target state="translated">&lt;a href=&quot;http://jsonapi.org/format/#document-top-level&quot;&gt;기본 데이터는 &lt;code&gt;data&lt;/code&gt; 속성 안에 래핑되어야합니다&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="592bc6fbbdc15fa42f2299527de6565af39db043" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://qunitjs.com/&quot;&gt;QUnit&lt;/a&gt; is the default testing framework for this guide, but others are supported through third-party addons.</source>
          <target state="translated">&lt;a href=&quot;http://qunitjs.com/&quot;&gt;QUnit&lt;/a&gt; 은이 안내서의 기본 테스트 프레임 워크이지만 타사 애드온을 통해 지원됩니다.</target>
        </trans-unit>
        <trans-unit id="ced911c11f15ef1063d20152fcf9841cada25933" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://surge.sh/&quot;&gt;Surge.sh&lt;/a&gt; allows you to publish any folder to the web for free. To deploy an Ember application you can simply deploy the folder produced by &lt;code&gt;ember build&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;http://surge.sh/&quot;&gt;Surge.sh를&lt;/a&gt; 사용하면 모든 폴더를 웹에 무료로 게시 할 수 있습니다. Ember 응용 프로그램을 배포하려면 &lt;code&gt;ember build&lt;/code&gt; 에서 생성 한 폴더를 간단하게 배포하면됩니다 .</target>
        </trans-unit>
        <trans-unit id="1c4929b520ddbf59179c2c08b3ee6041ce07a5d5" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://www.ember-cli-mirage.com/&quot;&gt;Mirage&lt;/a&gt; is a client HTTP stubbing library often used for Ember acceptance testing. For the case of this tutorial, we'll use mirage as our source of data rather than a traditional backend server. Mirage will allow us to create fake data to work with while developing our app and mimic an API. The data and endpoints we setup here will come into play later in the tutorial, when we use Ember Data to make server requests.</source>
          <target state="translated">&lt;a href=&quot;http://www.ember-cli-mirage.com/&quot;&gt;Mirage&lt;/a&gt; 는 Ember 승인 테스트에 자주 사용되는 클라이언트 HTTP 스터 빙 라이브러리입니다. 이 튜토리얼의 경우 전통적인 백엔드 서버가 아닌 mirage를 데이터 소스로 사용합니다. Mirage를 사용하면 앱을 개발하고 API를 모방하면서 작업 할 가짜 데이터를 만들 수 있습니다. 여기에서 설정 한 데이터와 엔드 포인트는 Ember Data를 사용하여 서버 요청을 할 때 자습서의 뒷부분에서 실행됩니다.</target>
        </trans-unit>
        <trans-unit id="9eb2f601d697122061087e6b2761d78ddfd55ad3" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://emberjs.com/api/classes/Ember.Component.html#toc_event-names&quot;&gt;Event Names&lt;/a&gt; must be dasherized.</source>
          <target state="translated">&lt;a href=&quot;https://emberjs.com/api/classes/Ember.Component.html#toc_event-names&quot;&gt;이벤트 이름&lt;/a&gt; 은 대시해야합니다.</target>
        </trans-unit>
        <trans-unit id="f30149c0434aaab01f5b265e6add7c95728b8a1d" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/emberjs/data&quot;&gt;Ember Data&lt;/a&gt; Models can be tested using the &lt;code&gt;moduleForModel&lt;/code&gt; helper.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/emberjs/data&quot;&gt;Ember 데이터&lt;/a&gt; 모델은 &lt;code&gt;moduleForModel&lt;/code&gt; 헬퍼를 사용하여 테스트 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="4af5fc10000a617be08c56ddab4d5fa67190b725" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://github.com/tildeio/glimmer&quot;&gt;Glimmer&lt;/a&gt; is a templating engine used by Ember.js that is compatible with a subset of the &lt;a href=&quot;http://handlebarsjs.com/&quot;&gt;Handlebars&lt;/a&gt; syntax.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/tildeio/glimmer&quot;&gt;Glimmer&lt;/a&gt; 는 Ember.js에서 사용하는 템플릿 엔진으로 &lt;a href=&quot;http://handlebarsjs.com/&quot;&gt;Handlebars&lt;/a&gt; 구문 의 하위 집합과 호환됩니다 .</target>
        </trans-unit>
        <trans-unit id="80f252f8843a96d252c860810d51953221bb8cd3" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://guides.emberjs.com/testing/acceptance/#toc_wait-helpers&quot;&gt;&lt;code&gt;andThen&lt;/code&gt;&lt;/a&gt; - waits for our previous commands to run before executing our function. In our test below, we want to wait for our page to load after &lt;code&gt;click&lt;/code&gt; is called so that we can double-check that the new page has loaded</source>
          <target state="translated">&lt;a href=&quot;https://guides.emberjs.com/testing/acceptance/#toc_wait-helpers&quot;&gt; &lt;code&gt;andThen&lt;/code&gt; &lt;/a&gt; 함수를 실행하기 전에 이전 명령이 실행될 때까지 기다립니다. 아래 테스트에서 &lt;code&gt;click&lt;/code&gt; 이 호출 된후 페이지가로드 될 때까지 기다렸다가새 페이지가로드되었는지 다시 확인할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5ea739460b5b7828656b1b603321175e1b1e410f" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;models&quot;&gt;Data layer&lt;/a&gt; - Ember Data provides a consistent way to communicate with external APIs and manage application state</source>
          <target state="translated">&lt;a href=&quot;models&quot;&gt;데이터 계층&lt;/a&gt; -Ember Data는 외부 API와 통신하고 애플리케이션 상태를 관리하는 일관된 방법을 제공합니다</target>
        </trans-unit>
        <trans-unit id="dcb5028830a3127ff5a0c95dd67b97cd87cd50e7" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;registryproxymixin&quot;&gt;RegistryProxyMixin&lt;/a&gt;,</source>
          <target state="translated">&lt;a href=&quot;registryproxymixin&quot;&gt;RegistryProxyMixin&lt;/a&gt;,</target>
        </trans-unit>
        <trans-unit id="6f25b8c172bfba084f2c81e70704640878675488" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;routing&quot;&gt;Routing&lt;/a&gt; - The central part of an Ember application. Enables developers to drive the application state from the URL.</source>
          <target state="translated">&lt;a href=&quot;routing&quot;&gt;라우팅&lt;/a&gt; -Ember 애플리케이션의 중심 부분. 개발자가 URL에서 애플리케이션 상태를 구동 할 수 있도록합니다.</target>
        </trans-unit>
        <trans-unit id="2204f3850af16242f05b40fa09d79a38f20121a1" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;templates/handlebars-basics&quot;&gt;Templating engine&lt;/a&gt; - Use Handlebars syntax to write your application's templates</source>
          <target state="translated">&lt;a href=&quot;templates/handlebars-basics&quot;&gt;템플릿 엔진&lt;/a&gt; -핸들 바 구문을 사용하여 애플리케이션 템플릿 작성</target>
        </trans-unit>
        <trans-unit id="6b4287b4624e1edc34d7446a34ada06840c999eb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;@each&lt;/code&gt; should only be used in a non-terminal context. Example:</source>
          <target state="translated">&lt;code&gt;@each&lt;/code&gt; should only be used in a non-terminal context. Example:</target>
        </trans-unit>
        <trans-unit id="7ba5de7a6b1840ce0b3a9cfae7c6f7ba6d94fba5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;APP&lt;/code&gt; can be used to pass flags/options to your application instance.</source>
          <target state="translated">&lt;code&gt;APP&lt;/code&gt; 를 사용하여 플래그 / 옵션을 응용 프로그램 인스턴스에 전달할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="55b3bb55e28c0696dddc48bdd184e4b257ca4731" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Array&lt;/code&gt; is extended to implement the &lt;code&gt;Ember.Enumerable&lt;/code&gt;, &lt;code&gt;Ember.MutableEnumerable&lt;/code&gt;, &lt;code&gt;Ember.MutableArray&lt;/code&gt; and &lt;code&gt;Ember.Array&lt;/code&gt; interfaces. This polyfills ECMAScript 5 array methods in browsers that do not implement them, adds convenience methods and properties to built-in arrays, and makes array mutations observable.</source>
          <target state="translated">&lt;code&gt;Array&lt;/code&gt; 은 &lt;code&gt;Ember.Enumerable&lt;/code&gt; , &lt;code&gt;Ember.MutableEnumerable&lt;/code&gt; , &lt;code&gt;Ember.MutableArray&lt;/code&gt; 및 &lt;code&gt;Ember.Array&lt;/code&gt; 인터페이스 를 구현하도록 확장되었습니다 . 이는 ECMAScript 5 배열 메소드를 구현하지 않는 브라우저에서 ECMAScript 5 배열 메소드를 채우고 내장 메소드에 편리한 메소드 및 특성을 추가하며 배열 돌연변이를 관찰 할 수있게합니다.</target>
        </trans-unit>
        <trans-unit id="23d1166390dc21867392da9f609bbcdec1efc96c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Comments&lt;/code&gt; for a &lt;code&gt;post&lt;/code&gt; can be loaded by &lt;code&gt;post.get('comments')&lt;/code&gt;. The JSON API adapter will send 3 &lt;code&gt;GET&lt;/code&gt; requests to &lt;code&gt;/comments/1/&lt;/code&gt;, &lt;code&gt;/comments/2/&lt;/code&gt; and &lt;code&gt;/comments/3/&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Comments&lt;/code&gt; &lt;code&gt;post&lt;/code&gt; 대한 의견 은 &lt;code&gt;post.get('comments')&lt;/code&gt; 로로드 할 수 있습니다 . JSON API 어댑터는 3 개의 &lt;code&gt;GET&lt;/code&gt; 요청을 &lt;code&gt;/comments/1/&lt;/code&gt; , &lt;code&gt;/comments/2/&lt;/code&gt; 및 &lt;code&gt;/comments/3/&lt;/code&gt; 보냅니다 .</target>
        </trans-unit>
        <trans-unit id="d854a972dd6fd4ec982dedc13cacc52ff35aa482" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;DS.Adapter&lt;/code&gt; is an abstract base class that you should override in your application to customize it for your backend. The minimum set of methods that you should implement is:</source>
          <target state="translated">&lt;code&gt;DS.Adapter&lt;/code&gt; 는 백엔드에 맞게 사용자 정의하기 위해 애플리케이션에서 대체해야하는 추상 기본 클래스입니다. 구현해야하는 최소 메소드 세트는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="f04a2474000ffaf8bd81665372215c16468a28f2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;DS.EmbeddedRecordsMixin&lt;/code&gt; supports serializing embedded records.</source>
          <target state="translated">&lt;code&gt;DS.EmbeddedRecordsMixin&lt;/code&gt; 은 임베디드 레코드 직렬화를 지원합니다.</target>
        </trans-unit>
        <trans-unit id="69ed447649d6cd1c9d477ca4151de793f4202e35" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;DS.Serializer&lt;/code&gt; is an abstract base class that you should override in your application to customize it for your backend. The minimum set of methods that you should implement is:</source>
          <target state="translated">&lt;code&gt;DS.Serializer&lt;/code&gt; 는 백엔드에 맞게 사용자 지정하기 위해 응용 프로그램에서 재정의해야하는 추상 기본 클래스입니다. 구현해야하는 최소 메소드 세트는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="d28f3cbb87dc9784050a5974a979e45a38bd0617" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;DS.attr&lt;/code&gt; can also take a hash of options as a second parameter. At the moment the only option available is &lt;code&gt;defaultValue&lt;/code&gt;, which can use a value or a function to set the default value of the attribute if one is not supplied.</source>
          <target state="translated">&lt;code&gt;DS.attr&lt;/code&gt; 은 옵션의 해시를 두 번째 매개 변수로 사용할 수도 있습니다. 현재 사용 가능한 유일한 옵션은 &lt;code&gt;defaultValue&lt;/code&gt; 이며, 값이나 함수를 사용하여 속성의 기본값을 제공하지 않은 경우 기본값을 설정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5be5fb290d81f3380dfbcb59136bbcc0eb525f14" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;DS.attr&lt;/code&gt; defines an attribute on a &lt;a href=&quot;https://emberjs.com/api/data/classes/DS.Model.html&quot;&gt;DS.Model&lt;/a&gt;. By default, attributes are passed through as-is, however you can specify an optional type to have the value automatically transformed. Ember Data ships with four basic transform types: &lt;code&gt;string&lt;/code&gt;, &lt;code&gt;number&lt;/code&gt;, &lt;code&gt;boolean&lt;/code&gt; and &lt;code&gt;date&lt;/code&gt;. You can define your own transforms by subclassing &lt;a href=&quot;https://emberjs.com/api/data/classes/DS.Transform.html&quot;&gt;DS.Transform&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;DS.attr&lt;/code&gt; 는 A의 속성 정의 &lt;a href=&quot;https://emberjs.com/api/data/classes/DS.Model.html&quot;&gt;DS.Model을&lt;/a&gt; . 기본적으로 속성은있는 그대로 전달되지만 값을 자동으로 변환하도록 선택적 유형을 지정할 수 있습니다. Ember Data에는 &lt;code&gt;string&lt;/code&gt; , &lt;code&gt;number&lt;/code&gt; , &lt;code&gt;boolean&lt;/code&gt; 및 &lt;code&gt;date&lt;/code&gt; 의 네 가지 기본 변환 유형이 제공 됩니다 . &lt;a href=&quot;https://emberjs.com/api/data/classes/DS.Transform.html&quot;&gt;DS.Transform&lt;/a&gt; 을 서브 클래 싱하여 고유 한 변환을 정의 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="64878c1ce26c1de63531198d5f65ebeff52cbb78" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;DS.attr&lt;/code&gt; takes an optional hash as a second parameter, currently supported options are:</source>
          <target state="translated">&lt;code&gt;DS.attr&lt;/code&gt; 은 선택적 해시를 두 번째 매개 변수로 사용하며 현재 지원되는 옵션은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="3255532756f485a27d8c765a3e04cf4caa2e3a19" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;DS.belongsTo&lt;/code&gt; is used to define One-To-One and One-To-Many relationships on a &lt;a href=&quot;https://emberjs.com/api/data/classes/DS.Model.html&quot;&gt;DS.Model&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;DS.belongsTo&lt;/code&gt; 는 DS.Model 에서 일대일 및 &lt;a href=&quot;https://emberjs.com/api/data/classes/DS.Model.html&quot;&gt;일대 다&lt;/a&gt; 관계를 정의하는 데 사용됩니다 .</target>
        </trans-unit>
        <trans-unit id="fbbcc9780e470bad349e0239efaef09b3fac0a9c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;DS.belongsTo&lt;/code&gt; takes an optional hash as a second parameter, currently supported options are:</source>
          <target state="translated">&lt;code&gt;DS.belongsTo&lt;/code&gt; 는 선택적 해시를 두 번째 매개 변수로 사용하며 현재 지원되는 옵션은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="88080d5de66245118e9cb86c55a9a2ff96297e4b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;DS.hasMany&lt;/code&gt; is used to define One-To-Many and Many-To-Many relationships on a &lt;a href=&quot;https://emberjs.com/api/data/classes/DS.Model.html&quot;&gt;DS.Model&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;DS.hasMany&lt;/code&gt; 는 DS.Model에서 일대 다 및 다 &lt;a href=&quot;https://emberjs.com/api/data/classes/DS.Model.html&quot;&gt;대다&lt;/a&gt; 관계를 정의하는 데 사용됩니다 .</target>
        </trans-unit>
        <trans-unit id="597aeb6a8b4f6fb21fc8ca7d468463d724f30d13" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;DS.hasMany&lt;/code&gt; takes an optional hash as a second parameter, currently supported options are:</source>
          <target state="translated">&lt;code&gt;DS.hasMany&lt;/code&gt; 는 선택적 해시를 두 번째 매개 변수로 사용하며 현재 지원되는 옵션은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="f773cb46bfa31e00c9c3bafe7fdc61683aa35625" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Ember.ActionHandler&lt;/code&gt; is available on some familiar classes including &lt;code&gt;Ember.Route&lt;/code&gt;, &lt;code&gt;Ember.Component&lt;/code&gt;, and &lt;code&gt;Ember.Controller&lt;/code&gt;. (Internally the mixin is used by &lt;code&gt;Ember.CoreView&lt;/code&gt;, &lt;code&gt;Ember.ControllerMixin&lt;/code&gt;, and &lt;code&gt;Ember.Route&lt;/code&gt; and available to the above classes through inheritance.)</source>
          <target state="translated">&lt;code&gt;Ember.ActionHandler&lt;/code&gt; 는 &lt;code&gt;Ember.Route&lt;/code&gt; , &lt;code&gt;Ember.Component&lt;/code&gt; 및 &lt;code&gt;Ember.Controller&lt;/code&gt; 를 포함한 친숙한 클래스에서 사용할 수 있습니다 . 내부적으로 믹스 인은 &lt;code&gt;Ember.CoreView&lt;/code&gt; , &lt;code&gt;Ember.ControllerMixin&lt;/code&gt; 및 &lt;code&gt;Ember.Route&lt;/code&gt; 에서 사용되며 상속을 통해 위의 클래스에서 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="44271cea35a34c3f77424e06d9b571f6ac872e11" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Ember.Application&lt;/code&gt; has a number of default events that it listens for, as well as a mapping from lowercase events to camel-cased view method names. For example, the &lt;code&gt;keypress&lt;/code&gt; event causes the &lt;code&gt;keyPress&lt;/code&gt; method on the view to be called, the &lt;code&gt;dblclick&lt;/code&gt; event causes &lt;code&gt;doubleClick&lt;/code&gt; to be called, and so on.</source>
          <target state="translated">&lt;code&gt;Ember.Application&lt;/code&gt; 에는 리스너 이벤트에서 낙타 케이스보기 메소드 이름으로의 맵핑뿐만 아니라 청취하는 여러 기본 이벤트가 있습니다. 예를 들어, &lt;code&gt;keypress&lt;/code&gt; 이벤트 는 뷰 의 &lt;code&gt;keyPress&lt;/code&gt; 메소드를 호출하고 &lt;code&gt;dblclick&lt;/code&gt; 이벤트는 &lt;code&gt;doubleClick&lt;/code&gt; 을 호출하는 방식으로 작동합니다.</target>
        </trans-unit>
        <trans-unit id="5d829b50298afbcbafd33af41dd80990cbb5f788" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Ember.ApplicationInstance.BootOptions&lt;/code&gt; is an interface class that exists purely to document the available options; you do not need to construct it manually. Simply pass a regular JavaScript object containing of the desired options:</source>
          <target state="translated">&lt;code&gt;Ember.ApplicationInstance.BootOptions&lt;/code&gt; 는 사용 가능한 옵션을 문서화하기 위해 존재하는 인터페이스 클래스입니다. 수동으로 구성 할 필요가 없습니다. 원하는 옵션이 포함 된 일반 JavaScript 객체를 전달하면됩니다.</target>
        </trans-unit>
        <trans-unit id="1df386e235bb3c3d2e836e4b696f33d07ea70615" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Ember.CoreView&lt;/code&gt; is an abstract class that exists to give view-like behavior to both Ember's main view class &lt;code&gt;Ember.Component&lt;/code&gt; and other classes that don't need the full functionality of &lt;code&gt;Ember.Component&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Ember.CoreView&lt;/code&gt; 은 보기와 같은 두 엠버의 메인 뷰 클래스에 행동을 제공하기 위해 존재하는 추상 클래스입니다 &lt;code&gt;Ember.Component&lt;/code&gt; 의 모든 기능이 필요하지 않고, 다른 클래스 &lt;code&gt;Ember.Component&lt;/code&gt; 을 .</target>
        </trans-unit>
        <trans-unit id="cf65b463205b0a7fa1c1d9b3563859c37816b11b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Ember.HashLocation&lt;/code&gt; implements the location API using the browser's hash. At present, it relies on a &lt;code&gt;hashchange&lt;/code&gt; event existing in the browser.</source>
          <target state="translated">&lt;code&gt;Ember.HashLocation&lt;/code&gt; 은 브라우저의 해시를 사용하여 위치 API를 구현합니다. 현재 브라우저에 존재 하는 &lt;code&gt;hashchange&lt;/code&gt; 이벤트 에 의존 합니다.</target>
        </trans-unit>
        <trans-unit id="ec82e5b78d26ab4ed823740753ac5c00f381cc77" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Ember.LinkComponent&lt;/code&gt; components are invoked with {{#link-to}}. Properties of this class can be overridden with &lt;code&gt;reopen&lt;/code&gt; to customize application-wide behavior.</source>
          <target state="translated">&lt;code&gt;Ember.LinkComponent&lt;/code&gt; 컴포넌트는 {{# link-to}}로 호출됩니다. 이 클래스의 속성은 응용 프로그램 전체의 동작을 사용자 지정하기 위해 &lt;code&gt;reopen&lt;/code&gt; 재정의 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="f6c4985b1c4e34ee9bc87da815745bed255c2622" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Ember.LinkComponent&lt;/code&gt; renders an element whose &lt;code&gt;click&lt;/code&gt; event triggers a transition of the application's instance of &lt;code&gt;Ember.Router&lt;/code&gt; to a supplied route by name.</source>
          <target state="translated">&lt;code&gt;Ember.LinkComponent&lt;/code&gt; 는 &lt;code&gt;click&lt;/code&gt; 이벤트가 &lt;code&gt;Ember.Router&lt;/code&gt; 의 응용 프로그램 인스턴스를 제공된 경로로 이름 으로 전환 하는 요소를 렌더링 합니다.</target>
        </trans-unit>
        <trans-unit id="96ee626465af4e8592040f46042a9b92b724eeee" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Ember.Object&lt;/code&gt; is the main base class for all Ember objects. It is a subclass of &lt;code&gt;Ember.CoreObject&lt;/code&gt; with the &lt;code&gt;Ember.Observable&lt;/code&gt; mixin applied. For details, see the documentation for each of these.</source>
          <target state="translated">&lt;code&gt;Ember.Object&lt;/code&gt; 는 모든 Ember 객체의 기본 클래스입니다. 의 서브 클래스 &lt;code&gt;Ember.CoreObject&lt;/code&gt; 와 &lt;code&gt;Ember.Observable&lt;/code&gt; 의 믹스 인을 적용. 자세한 내용은 각 설명서를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="10a7208d81d375957a33a5a14608de72b99b3d62" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Ember.ObjectProxy&lt;/code&gt; forwards all properties not defined by the proxy itself to a proxied &lt;code&gt;content&lt;/code&gt; object.</source>
          <target state="translated">&lt;code&gt;Ember.ObjectProxy&lt;/code&gt; 는 프록시 자체에 의해 정의되지 않은 모든 속성을 프록시 &lt;code&gt;content&lt;/code&gt; 개체로 전달합니다.</target>
        </trans-unit>
        <trans-unit id="12efca5dd9b45220d381d2480b1510eaae10eab3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Ember.ProxyMixin&lt;/code&gt; forwards all properties not defined by the proxy itself to a proxied &lt;code&gt;content&lt;/code&gt; object. See Ember.ObjectProxy for more details.</source>
          <target state="translated">&lt;code&gt;Ember.ProxyMixin&lt;/code&gt; 은 프록시 자체에 의해 정의되지 않은 모든 속성을 프록시 &lt;code&gt;content&lt;/code&gt; 개체로 전달합니다. 자세한 내용은 Ember.ObjectProxy를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="263cf1b7a87671c904cacf1ecf699ae2793ad3aa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Ember.TargetActionSupport&lt;/code&gt; is a mixin that can be included in a class to add a &lt;code&gt;triggerAction&lt;/code&gt; method with semantics similar to the Handlebars &lt;code&gt;{{action}}&lt;/code&gt; helper. In normal Ember usage, the &lt;code&gt;{{action}}&lt;/code&gt; helper is usually the best choice. This mixin is most often useful when you are doing more complex event handling in Components.</source>
          <target state="translated">&lt;code&gt;Ember.TargetActionSupport&lt;/code&gt; 는 핸들 바 &lt;code&gt;{{action}}&lt;/code&gt; 도우미 와 유사한 의미를 가진 &lt;code&gt;triggerAction&lt;/code&gt; 메소드 를 추가하기 위해 클래스에 포함될 수있는 믹스 인입니다 . 일반적인 Ember 사용에서는 일반적으로 &lt;code&gt;{{action}}&lt;/code&gt; 도우미가 최선의 선택입니다. 이 믹스 인은 구성 요소에서 더 복잡한 이벤트 처리를 수행 할 때 가장 유용합니다.</target>
        </trans-unit>
        <trans-unit id="f5c7429aca8d8d55188710eb5feceb8f7ab49d84" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;EmberENV.ENABLE_OPTIONAL_FEATURES&lt;/code&gt; - enable any features that have not been explicitly enabled/disabled.</source>
          <target state="translated">&lt;code&gt;EmberENV.ENABLE_OPTIONAL_FEATURES&lt;/code&gt; - 명시 적으로 활성화 / 비활성화되지 않은 기능을 활성화합니다.</target>
        </trans-unit>
        <trans-unit id="998564aa043ef8bf0cbd9f7b069f4754b9d31a34" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;EmberENV&lt;/code&gt; can be used to define Ember feature flags (see the &lt;a href=&quot;../feature-flags&quot;&gt;Feature Flags guide&lt;/a&gt;).</source>
          <target state="translated">&lt;code&gt;EmberENV&lt;/code&gt; 를 사용하여 Ember 기능 플래그를 정의 할 수 있습니다 ( &lt;a href=&quot;../feature-flags&quot;&gt;기능 플래그 안내서&lt;/a&gt; 참조 ).</target>
        </trans-unit>
        <trans-unit id="a1dea5db05303e4cd6b07551e212f53ac8b31e64" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Function&lt;/code&gt; is extended with methods to annotate functions as computed properties, via the &lt;code&gt;property()&lt;/code&gt; method, and as observers, via the &lt;code&gt;observes()&lt;/code&gt; method. Use of these methods is now discouraged and not covered in recent versions of the Guides.</source>
          <target state="translated">&lt;code&gt;Function&lt;/code&gt; 는 &lt;code&gt;property()&lt;/code&gt; 메서드 를 통해 계산 된 속성으로, &lt;code&gt;observes()&lt;/code&gt; 메서드 를 통해 관찰자 로 주석을 달기위한 메서드로 확장됩니다 . 이러한 방법의 사용은 권장되지 않으며 최신 버전의 안내서에서는 다루지 않습니다.</target>
        </trans-unit>
        <trans-unit id="0264f057ca05257096c07aaaaa2bfc9f7ec5fb67" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;JSONAPISerializer&lt;/code&gt; supports the &lt;a href=&quot;http://jsonapi.org/&quot;&gt;http://jsonapi.org/&lt;/a&gt; spec and is the serializer recommended by Ember Data.</source>
          <target state="translated">&lt;code&gt;JSONAPISerializer&lt;/code&gt; 는 &lt;a href=&quot;http://jsonapi.org/&quot;&gt;http://jsonapi.org/&lt;/a&gt; 사양을 지원하며 Ember Data에서 권장하는 시리얼 라이저입니다.</target>
        </trans-unit>
        <trans-unit id="5e66b6f29b6c3076ed875537c6f3d4244778f763" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;JSONSerializer&lt;/code&gt; is useful for simpler or legacy backends that may not support the &lt;a href=&quot;http://jsonapi.org/&quot;&gt;http://jsonapi.org/&lt;/a&gt; spec.</source>
          <target state="translated">&lt;code&gt;JSONSerializer&lt;/code&gt; 는 &lt;a href=&quot;http://jsonapi.org/&quot;&gt;http://jsonapi.org/&lt;/a&gt; 사양을 지원하지 않을 수있는 더 단순하거나 레거시 백엔드에 유용합니다 .</target>
        </trans-unit>
        <trans-unit id="e345698b4a8f363536b7af85b9c0fd2f831f334c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;JSONSerializer&lt;/code&gt; will normalize the JSON payload to the JSON API format that the Ember Data store expects.</source>
          <target state="translated">&lt;code&gt;JSONSerializer&lt;/code&gt; 는 JSON 페이로드를 Ember Data Store가 기대하는 JSON API 형식으로 정규화합니다.</target>
        </trans-unit>
        <trans-unit id="9d07beb7bc151b660bc470868ba0a025ddfaa8d2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;RSVP.allSettled&lt;/code&gt; is similar to &lt;code&gt;RSVP.all&lt;/code&gt;, but instead of implementing a fail-fast method, it waits until all the promises have returned and shows you all the results. This is useful if you want to handle multiple promises' failure states together as a set.</source>
          <target state="translated">&lt;code&gt;RSVP.allSettled&lt;/code&gt; 은 유사하다 &lt;code&gt;RSVP.all&lt;/code&gt; 하지만, 대신에 실패 빠른 방법을 구현하는, 그것은 당신이 모든 결과를 모든 약속이 반환 될 때까지 기다린 보여줍니다. 여러 약속의 실패 상태를 집합으로 함께 처리하려는 경우에 유용합니다.</target>
        </trans-unit>
        <trans-unit id="4458786812a9c22bb74d6923553f2627669ce12c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;RSVP.defer&lt;/code&gt; returns an object similar to jQuery's &lt;code&gt;$.Deferred&lt;/code&gt;. &lt;code&gt;RSVP.defer&lt;/code&gt; should be used when porting over code reliant on &lt;code&gt;$.Deferred&lt;/code&gt;'s interface. New code should use the &lt;code&gt;RSVP.Promise&lt;/code&gt; constructor instead.</source>
          <target state="translated">&lt;code&gt;RSVP.defer&lt;/code&gt; 는 jQuery의 &lt;code&gt;$.Deferred&lt;/code&gt; 와 유사한 객체를 반환합니다 . &lt;code&gt;RSVP.defer&lt;/code&gt; 는 &lt;code&gt;$.Deferred&lt;/code&gt; 의 인터페이스 에 의존하는 코드를 포팅 할 때 사용해야합니다 . 새 코드는 &lt;code&gt;RSVP.Promise&lt;/code&gt; 생성자를 대신 사용해야합니다 .</target>
        </trans-unit>
        <trans-unit id="84d4c1db658795cb94a1414fa7edd5dc76c8416a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;RSVP.denodeify&lt;/code&gt; takes a 'node-style' function and returns a function that will return an &lt;code&gt;RSVP.Promise&lt;/code&gt;. You can use &lt;code&gt;denodeify&lt;/code&gt; in Node.js or the browser when you'd prefer to use promises over using callbacks. For example, &lt;code&gt;denodeify&lt;/code&gt; transforms the following:</source>
          <target state="translated">&lt;code&gt;RSVP.denodeify&lt;/code&gt; 는 '노드 스타일'함수를 사용하고 &lt;code&gt;RSVP.Promise&lt;/code&gt; 를 리턴하는 함수를 리턴합니다 . 콜백보다 약속을 사용하고 싶을 때 Node.js 또는 브라우저에서 &lt;code&gt;denodeify&lt;/code&gt; 를 사용할 수 있습니다 . 예를 들어, &lt;code&gt;denodeify&lt;/code&gt; 는 다음을 변환합니다.</target>
        </trans-unit>
        <trans-unit id="0867a5407a040e0d66f4e7f0e738109c36b3630e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;RSVP.filter&lt;/code&gt; is similar to JavaScript's native &lt;code&gt;filter&lt;/code&gt; method, except that it waits for all promises to become fulfilled before running the &lt;code&gt;filterFn&lt;/code&gt; on each item in given to &lt;code&gt;promises&lt;/code&gt;. &lt;code&gt;RSVP.filter&lt;/code&gt; returns a promise that will become fulfilled with the result of running &lt;code&gt;filterFn&lt;/code&gt; on the values the promises become fulfilled with.</source>
          <target state="translated">&lt;code&gt;RSVP.filter&lt;/code&gt; 는 자바 스크립트의 기본과 유사 &lt;code&gt;filter&lt;/code&gt; 의 모든 약속은 실행하기 전에 충족 될하기를 기다립니다 것을 제외하고, 방법 &lt;code&gt;filterFn&lt;/code&gt; 을 주어 각 항목에 &lt;code&gt;promises&lt;/code&gt; . &lt;code&gt;RSVP.filter&lt;/code&gt; 는 약속이 이행되는 값에 대해 &lt;code&gt;filterFn&lt;/code&gt; 을 실행 한 결과로 이행 될 약속을 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="7a9d49b03402f60fc136ff0f37bc0d6f97d35807" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;RSVP.filter&lt;/code&gt; will also wait for any promises returned from &lt;code&gt;filterFn&lt;/code&gt;. For instance, you may want to fetch a list of users then return a subset of those users based on some asynchronous operation:</source>
          <target state="translated">&lt;code&gt;RSVP.filter&lt;/code&gt; 는 도에서 반환 된 약속을 기다리는 &lt;code&gt;filterFn&lt;/code&gt; . 예를 들어, 사용자 목록을 가져온 다음 일부 비동기 작업을 기반으로 해당 사용자의 하위 집합을 반환 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="af547e1110e2aded790396cd03b33ce06d1f637d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;RSVP.hash&lt;/code&gt; is similar to &lt;code&gt;RSVP.all&lt;/code&gt;, but takes an object instead of an array for its &lt;code&gt;promises&lt;/code&gt; argument.</source>
          <target state="translated">&lt;code&gt;RSVP.hash&lt;/code&gt; 은 유사하다 &lt;code&gt;RSVP.all&lt;/code&gt; ,하지만에 대한 배열 대신 오브젝트를 &lt;code&gt;promises&lt;/code&gt; 인수.</target>
        </trans-unit>
        <trans-unit id="78f37561313fc177f539d348cdfc515cd3ae4eb5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;RSVP.hashSettled&lt;/code&gt; is similar to &lt;code&gt;RSVP.allSettled&lt;/code&gt;, but takes an object instead of an array for its &lt;code&gt;promises&lt;/code&gt; argument.</source>
          <target state="translated">&lt;code&gt;RSVP.hashSettled&lt;/code&gt; 은 유사하다 &lt;code&gt;RSVP.allSettled&lt;/code&gt; ,하지만에 대한 배열 대신 오브젝트를 &lt;code&gt;promises&lt;/code&gt; 인수.</target>
        </trans-unit>
        <trans-unit id="3d05d302767d21a4dc2003494eff34568888aabf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;RSVP.map&lt;/code&gt; is similar to JavaScript's native &lt;code&gt;map&lt;/code&gt; method, except that it waits for all promises to become fulfilled before running the &lt;code&gt;mapFn&lt;/code&gt; on each item in given to &lt;code&gt;promises&lt;/code&gt;. &lt;code&gt;RSVP.map&lt;/code&gt; returns a promise that will become fulfilled with the result of running &lt;code&gt;mapFn&lt;/code&gt; on the values the promises become fulfilled with.</source>
          <target state="translated">&lt;code&gt;RSVP.map&lt;/code&gt; 는 자바 스크립트의 기본과 유사 &lt;code&gt;map&lt;/code&gt; 모든 약속은 실행하기 전에 충족 될하기를 기다립니다 것을 제외하고, 방법 &lt;code&gt;mapFn&lt;/code&gt; 을 주어 각 항목에 &lt;code&gt;promises&lt;/code&gt; . &lt;code&gt;RSVP.map&lt;/code&gt; 은 약속이 이행 된 값에 대해 &lt;code&gt;mapFn&lt;/code&gt; 을 실행 한 결과로 이행 될 약속을 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="b4d97ecff2222269a39af3dbf91def7c977d4285" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;RSVP.map&lt;/code&gt; will also wait if a promise is returned from &lt;code&gt;mapFn&lt;/code&gt;. For example, say you want to get all comments from a set of blog posts, but you need the blog posts first because they contain a url to those comments.</source>
          <target state="translated">&lt;code&gt;RSVP.map&lt;/code&gt; 는 약속이에서 반환되는 경우도 대기 &lt;code&gt;mapFn&lt;/code&gt; . 예를 들어, 블로그 게시물 세트에서 모든 댓글을 가져오고 싶지만 해당 게시물에 대한 URL이 포함되어 있기 때문에 먼저 블로그 게시물이 필요하다고 가정하십시오.</target>
        </trans-unit>
        <trans-unit id="87db6ab1b50f8689071afc9bf045010b400cf879" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;RSVP.rethrow&lt;/code&gt; will rethrow an error on the next turn of the JavaScript event loop in order to aid debugging.</source>
          <target state="translated">&lt;code&gt;RSVP.rethrow&lt;/code&gt; 는 디버깅을 돕기 위해 JavaScript 이벤트 루프의 다음 차례에 오류를 다시 발생시킵니다.</target>
        </trans-unit>
        <trans-unit id="6f1fcbef14ead097ff65f6cfc9037043cbaf15c4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Route#transitionTo&lt;/code&gt; and &lt;code&gt;Controller#transitionToRoute&lt;/code&gt; accept a final argument, which is an object with the key &lt;code&gt;queryParams&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Route#transitionTo&lt;/code&gt; 및 &lt;code&gt;Controller#transitionToRoute&lt;/code&gt; 는 &lt;code&gt;queryParams&lt;/code&gt; 키가있는 객체 인 최종 인수를 허용합니다 .</target>
        </trans-unit>
        <trans-unit id="5782be01f09f5b958a177bed369d6bfaa5dca1b2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;String&lt;/code&gt; is extended to add convenience methods, such as &lt;code&gt;camelize()&lt;/code&gt; and &lt;code&gt;w()&lt;/code&gt;. You can find a list of these methods with the &lt;a href=&quot;http://emberjs.com/api/classes/Ember.String.html&quot;&gt;Ember.String documentation&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;String&lt;/code&gt; &lt;code&gt;camelize()&lt;/code&gt; 및 &lt;code&gt;w()&lt;/code&gt; 와 같은 편리한 메소드를 추가하기 위해 문자열 이 확장되었습니다 . &lt;a href=&quot;http://emberjs.com/api/classes/Ember.String.html&quot;&gt;Ember.String 문서&lt;/a&gt; 에서 이러한 메소드 목록을 찾을 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="d1037e9be45aa05da574c11f4410513c63a394a3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;TextSupport&lt;/code&gt; is a shared mixin used by both &lt;code&gt;Ember.TextField&lt;/code&gt; and &lt;code&gt;Ember.TextArea&lt;/code&gt;. &lt;code&gt;TextSupport&lt;/code&gt; adds a number of methods that allow you to specify a controller action to invoke when a certain event is fired on your text field or textarea. The specified controller action would get the current value of the field passed in as the only argument unless the value of the field is empty. In that case, the instance of the field itself is passed in as the only argument.</source>
          <target state="translated">&lt;code&gt;TextSupport&lt;/code&gt; 는 &lt;code&gt;Ember.TextField&lt;/code&gt; 와 &lt;code&gt;Ember.TextArea&lt;/code&gt; 에 의해 사용되는 공유 믹스 입니다. &lt;code&gt;TextSupport&lt;/code&gt; 는 텍스트 필드 나 텍스트 영역에서 특정 이벤트가 발생할 때 호출 할 컨트롤러 작업을 지정할 수있는 여러 가지 방법을 추가합니다. 지정된 제어기 조치는 필드 값이 비어 있지 않으면 필드의 현재 값을 유일한 인수로 전달합니다. 이 경우 필드 자체의 인스턴스가 유일한 인수로 전달됩니다.</target>
        </trans-unit>
        <trans-unit id="41f21713094ec778ac0cf266b52e32dc93359921" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;[]&lt;/code&gt; vs &lt;code&gt;@each&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;[]&lt;/code&gt; vs &lt;code&gt;@each&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c7c182ade2b210437da8c13643c536d268b266d2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;arrayDidChange(observedObj, start, removeCount, addCount)&lt;/code&gt; - This method will be called just after the array is modified.</source>
          <target state="translated">&lt;code&gt;arrayDidChange(observedObj, start, removeCount, addCount)&lt;/code&gt; -이 메소드는 배열이 수정 된 직후에 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="775fc777f7d1c0b07371e450f3c6bcb18756afa2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;arrayWillChange(observedObj, start, removeCount, addCount)&lt;/code&gt; - This method will be called just before the array is modified.</source>
          <target state="translated">&lt;code&gt;arrayWillChange(observedObj, start, removeCount, addCount)&lt;/code&gt; -이 메소드는 배열이 수정되기 직전에 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="91cef2babe644a19ee638c19c2334aba6f1a7bac" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;articles.error&lt;/code&gt; or &lt;code&gt;articles-error&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;articles.error&lt;/code&gt; 또는 &lt;code&gt;articles-error&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="2e4d828fcb9849f132eecc949fe046cf231ca8ef" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;async&lt;/code&gt;: A boolean value used to explicitly declare this to be an async relationship.</source>
          <target state="translated">&lt;code&gt;async&lt;/code&gt; : 비동기 관계로 명시 적으로 선언하는 데 사용되는 부울 값입니다.</target>
        </trans-unit>
        <trans-unit id="622e59c2c2d2c0c6909f6b0be793e6bc7d9aa055" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;attribute&lt;/code&gt; The name of the property associated with this error message</source>
          <target state="translated">&lt;code&gt;attribute&lt;/code&gt; 이 오류 메시지와 관련된 속성 의 이름</target>
        </trans-unit>
        <trans-unit id="83b2f8e522e2b320751f1863793a7cbdd436a11b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;attributeBindings&lt;/code&gt; can refer to computed properties:</source>
          <target state="translated">&lt;code&gt;attributeBindings&lt;/code&gt; 는 계산 된 속성 을 참조 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="41583f065d4efd05950283cf3afba61de6039210" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;attributes&lt;/code&gt; - object which holds data for record attributes - &lt;code&gt;DS.attr&lt;/code&gt;'s declared in model</source>
          <target state="translated">&lt;code&gt;attributes&lt;/code&gt; - 레코드 속성에 대한 데이터를 보유하는 오브젝트- 모델에서 선언 된 &lt;code&gt;DS.attr&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="7b2aa87d9416ec5dd84713016cfc1a0ff435bca1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;auto&lt;/code&gt; - use the best option based on browser capabilities: &lt;code&gt;history&lt;/code&gt; if possible, then &lt;code&gt;hash&lt;/code&gt; if possible, otherwise &lt;code&gt;none&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;auto&lt;/code&gt; -브라우저 기능에 따라 최상의 옵션을 사용하십시오 : 가능한 경우 &lt;code&gt;history&lt;/code&gt; , 가능하면 &lt;code&gt;hash&lt;/code&gt; , 그렇지 않은 경우 &lt;code&gt;none&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="9fbdcd2352c4af77bfddc01c68706b3eea48be08" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;before&lt;/code&gt; and &lt;code&gt;after&lt;/code&gt; are used to ensure that this initializer is ran prior or after the one identified by the value. This value can be a single string or an array of strings, referencing the &lt;code&gt;name&lt;/code&gt; of other initializers.</source>
          <target state="translated">&lt;code&gt;before&lt;/code&gt; 및 &lt;code&gt;after&lt;/code&gt; 는이 이니셜 라이저가 값으로 식별 된 초기화 이전 또는 이후에 실행되도록하는 데 사용됩니다. 이 값 은 다른 이니셜 라이저 의 &lt;code&gt;name&lt;/code&gt; 을 참조하는 단일 문자열 또는 문자열 배열 일 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="2fe55f4e23fc1a001c66b8c9cb06f50be9f6a10a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;beforeModel()&lt;/code&gt; receives the current transition as an argument, which we can store and retry later. This allows us to return the user back to the original route. For example, we might redirect a user to the login page when they try to edit their profile, and immediately redirect them back to the edit page once they have successfully logged in. See &lt;a href=&quot;../preventing-and-retrying-transitions#toc_storing-and-retrying-a-transition&quot;&gt;Storing and Retrying a Transition&lt;/a&gt; for how to do that.</source>
          <target state="translated">&lt;code&gt;beforeModel()&lt;/code&gt; 은 현재 전이를 인자로 받아 나중에 저장하고 다시 시도 할 수 있습니다. 이를 통해 사용자를 원래 경로로 되돌릴 수 있습니다. 예를 들어, 사용자가 프로파일을 편집하려고 할 때 사용자를 로그인 페이지로 리디렉션하고, 성공적으로 로그인하면 즉시 편집 페이지로 리디렉션 할 수 있습니다. 이를 수행하는 방법 &lt;a href=&quot;../preventing-and-retrying-transitions#toc_storing-and-retrying-a-transition&quot;&gt;은 전환 저장 및 재 시도를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="1ce9fbf30ac0910dc90ce0406380e8657af99213" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;catch&lt;/code&gt; is simply sugar for &lt;code&gt;then(undefined, onRejection)&lt;/code&gt; which makes it the same as the catch block of a try/catch statement.</source>
          <target state="translated">&lt;code&gt;catch&lt;/code&gt; 는 단순히 try / catch 문의 catch 블록과 동일하게 만드는 &lt;code&gt;then(undefined, onRejection)&lt;/code&gt; 설탕입니다 .</target>
        </trans-unit>
        <trans-unit id="03f3f2b6f6a5f42fd1aa0a58e71b6120c3845baf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;class&lt;/code&gt; - The registered or resolved class.</source>
          <target state="translated">&lt;code&gt;class&lt;/code&gt; - 등록 또는 확인 된 클래스</target>
        </trans-unit>
        <trans-unit id="a6a6a5a1fe5a3c22244426952c2dbd60f13de4be" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;class&lt;/code&gt; attribute values can also be set by providing a &lt;code&gt;classNameBindings&lt;/code&gt; property set to an array of properties names for the component. The return value of these properties will be added as part of the value for the components's &lt;code&gt;class&lt;/code&gt; attribute. These properties can be computed properties:</source>
          <target state="translated">&lt;code&gt;class&lt;/code&gt; &lt;code&gt;classNameBindings&lt;/code&gt; 속성 집합을 구성 요소의 속성 이름 배열 로 제공하여 클래스 속성 값을 설정할 수도 있습니다 . 이러한 속성의 반환 값은 구성 요소의 &lt;code&gt;class&lt;/code&gt; 속성 값의 일부로 추가됩니다 . 이러한 속성은 계산 속성 일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ad9e7a5d3ef21ddae3a87ccb7f34ec1d4235290d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;create&lt;/code&gt; - A function that will create an instance of the class with any dependencies injected.</source>
          <target state="translated">&lt;code&gt;create&lt;/code&gt; - 종속성 주입하여 클래스의 인스턴스를 생성하는 기능.</target>
        </trans-unit>
        <trans-unit id="bc700b35c7e4b027cba4d7456934bd40dc555792" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;create&lt;/code&gt; will call the &lt;code&gt;init&lt;/code&gt; function if defined during &lt;code&gt;Ember.AnyObject.extend&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;create&lt;/code&gt; &lt;code&gt;Ember.AnyObject.extend&lt;/code&gt; 중에 정의 된 경우 create 는 &lt;code&gt;init&lt;/code&gt; 함수 를 호출합니다.</target>
        </trans-unit>
        <trans-unit id="4894addcd1e30601ae8984e8cb5245921589e464" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;created&lt;/code&gt; The record has been created by the client and not yet saved to the adapter.</source>
          <target state="translated">&lt;code&gt;created&lt;/code&gt; 클라이언트가 레코드를 작성했으며 아직 어댑터에 저장하지 않았습니다.</target>
        </trans-unit>
        <trans-unit id="707d62fbd68dc1dbd39e65a444cf7b16273c9d2a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;data&lt;/code&gt; property can also hold an array (of records):</source>
          <target state="translated">&lt;code&gt;data&lt;/code&gt; 속성은 (레코드의) 배열을 보유 할 수도 있습니다 :</target>
        </trans-unit>
        <trans-unit id="2e6c754135ad7efc124afcdd21d9cf74d32c4b1b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;defaultValue&lt;/code&gt;: Pass a string or a function to be called to set the attribute</source>
          <target state="translated">&lt;code&gt;defaultValue&lt;/code&gt; : 속성을 설정하기 위해 호출 할 문자열 또는 함수를 전달</target>
        </trans-unit>
        <trans-unit id="53566246d98bcc2c59f45f8da64d84298eb99036" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;deleted&lt;/code&gt; The record has been deleted by the client and not yet saved to the adapter.</source>
          <target state="translated">&lt;code&gt;deleted&lt;/code&gt; 클라이언트가 레코드를 삭제했지만 아직 어댑터에 저장하지 않았습니다.</target>
        </trans-unit>
        <trans-unit id="9ca60116aa57510982737d240e9b21218811a264" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;descriptor&lt;/code&gt; the meta object that describes this relationship</source>
          <target state="translated">&lt;code&gt;descriptor&lt;/code&gt; 디스크립터이 관계를 설명 하는 메타 객체</target>
        </trans-unit>
        <trans-unit id="47e9a207c6e0c22d645e108ad2033ea3b65111b9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;didReceiveAttrs&lt;/code&gt; runs after &lt;code&gt;init&lt;/code&gt;, and it also runs on subsequent re-renders, which is useful for logic that is the same on all renders. It does not run when the re-render has been initiated internally.</source>
          <target state="translated">&lt;code&gt;didReceiveAttrs&lt;/code&gt; 는 &lt;code&gt;init&lt;/code&gt; 후에 실행되며 후속 렌더링에서 실행되므로 모든 렌더링에서 동일한 논리에 유용합니다. 다시 렌더링이 내부적으로 시작된 경우에는 실행되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="0b6e95b817e5e20c84f2f820da622c38af455334" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;didUpdateAttrs&lt;/code&gt; runs when the attributes of a component have changed, but not when the component is re-rendered, via &lt;code&gt;component.rerender&lt;/code&gt;, &lt;code&gt;component.set&lt;/code&gt;, or changes in models or services used by the template.</source>
          <target state="translated">&lt;code&gt;didUpdateAttrs&lt;/code&gt; 는 &lt;code&gt;component.rerender&lt;/code&gt; , &lt;code&gt;component.set&lt;/code&gt; 을 통해 컴포넌트를 다시 렌더링 하거나 템플리트가 사용하는 모델 또는 서비스의 변경 사항 이 아닌 컴포넌트의 속성이 변경 될 때 실행됩니다 .</target>
        </trans-unit>
        <trans-unit id="c922a1b7b4f3d3f06f2d0de2551d23b42172eed4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;enumerable&lt;/code&gt; is the enumerable object itself.</source>
          <target state="translated">&lt;code&gt;enumerable&lt;/code&gt; 은 열거 가능한 객체 자체입니다.</target>
        </trans-unit>
        <trans-unit id="7d26a30d47f9a6ee3f4a31708953ebc04cd3f3c0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;environment&lt;/code&gt; contains the name of the current environment (&lt;code&gt;development&lt;/code&gt;,&lt;code&gt;production&lt;/code&gt; or &lt;code&gt;test&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;environment&lt;/code&gt; 는 현재 환경의 이름을 포함합니다 ( &lt;code&gt;development&lt;/code&gt; , &lt;code&gt;production&lt;/code&gt; 또는 &lt;code&gt;test&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="f586aa04f6a33c25139d41659c3e7cb5bcb74d93" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;error&lt;/code&gt; actions that bubble up all the way to &lt;code&gt;ApplicationRoute&lt;/code&gt; will fire a default error handler that logs the error. You can specify your own global default error handler by overriding the &lt;code&gt;error&lt;/code&gt; handler on &lt;code&gt;ApplicationRoute&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;error&lt;/code&gt; &lt;code&gt;ApplicationRoute&lt;/code&gt; 까지 계속해서 발생하는 오류 작업은 오류를 기록하는 기본 오류 처리기를 시작합니다. &lt;code&gt;ApplicationRoute&lt;/code&gt; 에서 &lt;code&gt;error&lt;/code&gt; 처리기를 재정 의하여 고유 한 전역 기본 오류 처리기를 지정할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="f18684f852ebf15d6f94aabae631bc30feed9015" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;error&lt;/code&gt; or &lt;code&gt;application-error&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;error&lt;/code&gt; 또는 &lt;code&gt;application-error&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="06eb25243fcec514356f4606f769c07c02dfa195" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;error&lt;/code&gt; substates</source>
          <target state="translated">&lt;code&gt;error&lt;/code&gt; 하위 상태</target>
        </trans-unit>
        <trans-unit id="bdb8a82ddd4eb19aab6079072d00ee3d12e5bdc6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;exception&lt;/code&gt; is a value that is thrown using the throw statement.</source>
          <target state="translated">&lt;code&gt;exception&lt;/code&gt; 는 throw 문을 사용하여 발생하는 값입니다.</target>
        </trans-unit>
        <trans-unit id="2211c27dc3e64c28ce07cd46de8c49e66501584d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;extractErrors&lt;/code&gt; is used to extract model errors when a call to &lt;code&gt;DS.Model#save&lt;/code&gt; fails with an &lt;code&gt;InvalidError&lt;/code&gt;. By default Ember Data expects error information to be located on the &lt;code&gt;errors&lt;/code&gt; property of the payload object.</source>
          <target state="translated">&lt;code&gt;extractErrors&lt;/code&gt; 는 &lt;code&gt;DS.Model#save&lt;/code&gt; 호출이 &lt;code&gt;InvalidError&lt;/code&gt; 와 함께 실패 할 때 모델 오류를 추출하는 데 사용됩니다 . 기본적으로 Ember Data는 오류 정보가 페이로드 객체 의 &lt;code&gt;errors&lt;/code&gt; 속성 에있을 것으로 예상 합니다.</target>
        </trans-unit>
        <trans-unit id="2054e0871b018f0d7ad823c7a2a31b2c8ea2da24" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;extractId&lt;/code&gt; | &lt;code&gt;extractAttributes&lt;/code&gt; | &lt;code&gt;extractRelationships&lt;/code&gt; - &lt;code&gt;normalize&lt;/code&gt; delegates to these methods to turn the record payload into the JSON API format.</source>
          <target state="translated">&lt;code&gt;extractId&lt;/code&gt; | &lt;code&gt;extractAttributes&lt;/code&gt; | &lt;code&gt;extractRelationships&lt;/code&gt; - &lt;code&gt;normalize&lt;/code&gt; 이러한 방법 대의원은 JSON의 API 형식으로 기록 된 페이로드를 켭니다.</target>
        </trans-unit>
        <trans-unit id="29ba6b65e9b64a7bb87025ee2c3975f28d440da0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;extractMeta&lt;/code&gt; is used to deserialize any meta information in the adapter payload. By default Ember Data expects meta information to be located on the &lt;code&gt;meta&lt;/code&gt; property of the payload object.</source>
          <target state="translated">&lt;code&gt;extractMeta&lt;/code&gt; 는 어댑터 페이로드에서 메타 정보를 직렬화 해제하는 데 사용됩니다. 기본적으로 Ember Data는 메타 정보가 페이로드 객체 의 &lt;code&gt;meta&lt;/code&gt; 속성 에있을 것으로 예상 합니다.</target>
        </trans-unit>
        <trans-unit id="80cfa62b04e923696b186f1ca0ba7c1a31630517" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;false&lt;/code&gt; - The feature is entirely &lt;strong&gt;disabled&lt;/strong&gt;: the code behind the flag is not present in the generated build.</source>
          <target state="translated">&lt;code&gt;false&lt;/code&gt; - 기능이 완전히 &lt;strong&gt;사용되지 않습니다&lt;/strong&gt; . 플래그 뒤의 코드가 생성 된 빌드에 없습니다.</target>
        </trans-unit>
        <trans-unit id="b500a88acd39c4d2ee8f47351ab60d29596d6db3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;false&lt;/code&gt; is used to signal that the record is not expected</source>
          <target state="translated">&lt;code&gt;false&lt;/code&gt; 는 레코드가 예상되지 않음을 나타내는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="4861b2201a3e1e7e15919dca1531507f8ccc1f2c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;finally&lt;/code&gt; will be invoked regardless of the promise's fate just as native try/catch/finally behaves</source>
          <target state="translated">&lt;code&gt;finally&lt;/code&gt; 기본 시도 / 캐치 / 마지막으로 작동하는 것처럼 약속의 운명에 관계없이 마지막 으로 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="4c5caf0d04b99fd2d27a4348c01630b43bf8e675" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;findAll&lt;/code&gt; asks the adapter's &lt;code&gt;findAll&lt;/code&gt; method to find the records for the given type, and returns a promise which will resolve with all records of this type present in the store, even if the adapter only returns a subset of them.</source>
          <target state="translated">&lt;code&gt;findAll&lt;/code&gt; 은 어댑터의 &lt;code&gt;findAll&lt;/code&gt; 메소드에 지정된 유형에 대한 레코드를 찾도록 요청하고, 어댑터 가 서브 세트 만 리턴하더라도 저장소에 존재하는이 유형의 모든 레코드로 해결할 약속을 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="2c5100a4eee7926633f6061896f3c5c2b5d037e6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;findRecord()&lt;/code&gt; and &lt;code&gt;findAll()&lt;/code&gt; each take an &lt;code&gt;options&lt;/code&gt; argument in which you can specify the &lt;code&gt;include&lt;/code&gt; parameter. For example, given a &lt;code&gt;post&lt;/code&gt; model that has a &lt;code&gt;hasMany&lt;/code&gt; relationship with a &lt;code&gt;comment&lt;/code&gt; model, when retrieving a specific post we can have the server also return that post's comments as follows:</source>
          <target state="translated">&lt;code&gt;findRecord()&lt;/code&gt; 및 &lt;code&gt;findAll()&lt;/code&gt; 각각 &lt;code&gt;include&lt;/code&gt; 매개 변수를 지정할 수 있는 &lt;code&gt;options&lt;/code&gt; 인수를 사용합니다 . 예를 들어, &lt;code&gt;comment&lt;/code&gt; 모델 과 &lt;code&gt;hasMany&lt;/code&gt; 관계 가 있는 &lt;code&gt;post&lt;/code&gt; 모델이있는 경우 특정 게시물을 검색 할 때 서버가 다음과 같이 해당 게시물의 주석을 반환하도록 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d39770bf005c671d0765d4f733fc8798b58af2c9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;foo.bar.loading&lt;/code&gt; or &lt;code&gt;foo.bar-loading&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;foo.bar.loading&lt;/code&gt; 또는 &lt;code&gt;foo.bar-loading&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d481d4324f3a2ae18f68a100c4a8b0e69b17b9ab" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;foo.loading&lt;/code&gt; or &lt;code&gt;foo-loading&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;foo.loading&lt;/code&gt; 또는 &lt;code&gt;foo-loading&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="fe2f6d7f473b31f4d5e37a0e5a9070c26ee56ca0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;get&lt;/code&gt; is also aware of keywords. So in this situation</source>
          <target state="translated">&lt;code&gt;get&lt;/code&gt; 은 키워드도 알고 있습니다. 이 상황에서</target>
        </trans-unit>
        <trans-unit id="bfb9766a007374fdb54dea5ce76edb053723b5ac" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;get&lt;/code&gt; is also aware of keywords. So in this situation:</source>
          <target state="translated">&lt;code&gt;get&lt;/code&gt; 은 키워드도 알고 있습니다. 따라서이 상황에서</target>
        </trans-unit>
        <trans-unit id="c77687212cb6820e1023b98085664307e5ce4ffe" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;getEngineParent&lt;/code&gt; retrieves an engine instance's parent instance.</source>
          <target state="translated">&lt;code&gt;getEngineParent&lt;/code&gt; 는 엔진 인스턴스의 상위 인스턴스를 검색합니다.</target>
        </trans-unit>
        <trans-unit id="3f82d5fb6fbeb96e858012f94353179f08ac0db8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;getOwner&lt;/code&gt; fetches the owner object responsible for an instance. This can be used to lookup or resolve other class instances, or register new factories into the owner.</source>
          <target state="translated">&lt;code&gt;getOwner&lt;/code&gt; 는 인스턴스를 담당하는 소유자 객체를 가져옵니다. 다른 클래스 인스턴스를 조회하거나 해결하거나 소유자에게 새 팩토리를 등록하는 데 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="13527c3a116724a0d2e6d7aa69c57ed1f55b2ae6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;hash&lt;/code&gt; - use &lt;code&gt;#&lt;/code&gt; to separate the server part of the URL from the Ember part: &lt;code&gt;/blog/#/posts/new&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;hash&lt;/code&gt; - &lt;code&gt;#&lt;/code&gt; 을 사용 하여 URL의 서버 부분을 Ember 부분과 분리하십시오. &lt;code&gt;/blog/#/posts/new&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="69dcc8638bf9cd89a2efaeebe56b2899db174bef" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;headers&lt;/code&gt; can also be used as a computed property to support dynamic headers. In the example below, the &lt;code&gt;session&lt;/code&gt; object has been injected into an adapter by Ember's container.</source>
          <target state="translated">&lt;code&gt;headers&lt;/code&gt; 는 동적 헤더를 지원하기 위해 계산 된 속성으로 사용될 수도 있습니다. 아래 예에서 &lt;code&gt;session&lt;/code&gt; 객체는 Ember의 컨테이너에 의해 어댑터에 주입되었습니다.</target>
        </trans-unit>
        <trans-unit id="f67bfe13b3f1f5ab8deb0b9e55c41e0ce808c1e4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;headers&lt;/code&gt; can also be used as a computed property to support dynamic headers. In the example below, the headers are generated with a computed property dependent on the &lt;code&gt;session&lt;/code&gt; service.</source>
          <target state="translated">&lt;code&gt;headers&lt;/code&gt; 는 동적 헤더를 지원하기 위해 계산 된 속성으로 사용될 수도 있습니다. 아래 예에서, &lt;code&gt;session&lt;/code&gt; 서비스 에 따라 계산 된 속성으로 헤더가 생성됩니다 .</target>
        </trans-unit>
        <trans-unit id="251656b126ee82f7e89a0ef26338e7e89454cdda" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;history&lt;/code&gt; - use the browser's history API to make the URLs look just like any standard URL</source>
          <target state="translated">&lt;code&gt;history&lt;/code&gt; - 브라우저의 history API를 사용하여 URL을 표준 URL처럼 보이게합니다.</target>
        </trans-unit>
        <trans-unit id="c4abc3ee9a4baf6452013bbab99cd0d1aca6d818" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;id&lt;/code&gt; - An id of the deprecation in the form of &lt;code&gt;package-name.specific-deprecation&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;id&lt;/code&gt; &lt;code&gt;package-name.specific-deprecation&lt;/code&gt; 형식의 사용 중단 ID입니다 .</target>
        </trans-unit>
        <trans-unit id="30a468ba447bce078dcece7527774e4b4fc8e764" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;id&lt;/code&gt; - An id of the warning in the form of &lt;code&gt;package-name.specific-warning&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;id&lt;/code&gt; &lt;code&gt;package-name.specific-warning&lt;/code&gt; 형식의 경고 ID입니다 .</target>
        </trans-unit>
        <trans-unit id="fd6721cdab2fff6de8c24edceb6f6a55760e9d30" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;id&lt;/code&gt; - mandatory, unique record's key</source>
          <target state="translated">&lt;code&gt;id&lt;/code&gt; - 필수적이고 고유 한 레코드 키</target>
        </trans-unit>
        <trans-unit id="bfdfc60a5d4c257b92d7ba84ae60ea79d1f7bfd1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ids&lt;/code&gt; is used to signal that only the id of the record is expected</source>
          <target state="translated">&lt;code&gt;ids&lt;/code&gt; 는 레코드의 ID 만 예상됨을 알리는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="a51f14fcb6d5071d041ebe364dc6a93b10fe9b75" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;includeId&lt;/code&gt;: &lt;code&gt;true&lt;/code&gt; if the record's ID should be included in the JSON representation.</source>
          <target state="translated">&lt;code&gt;includeId&lt;/code&gt; : 레코드의 ID가 JSON 표현에 포함되어야하는 경우 &lt;code&gt;true&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="c162097db53c270e88aabcac2e749bc535bd43fc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;includeId&lt;/code&gt;: If this is &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;serialize&lt;/code&gt; should include the ID in the serialized object it builds.</source>
          <target state="translated">&lt;code&gt;includeId&lt;/code&gt; : 이것이 &lt;code&gt;true&lt;/code&gt; 이면 , &lt;code&gt;serialize&lt;/code&gt; 는 빌드 한 직렬화 된 객체에 ID를 포함해야합니다.</target>
        </trans-unit>
        <trans-unit id="6d69fa651b8b8f2d6359599400c9a952555aa463" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;index&lt;/code&gt; is the current index in the iteration.</source>
          <target state="translated">&lt;code&gt;index&lt;/code&gt; 는 반복의 현재 색인입니다.</target>
        </trans-unit>
        <trans-unit id="a283412fa72bf0168c93ccbf79e2c6f88e61cbd9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;initialize&lt;/code&gt; is a callback function that receives one argument, &lt;code&gt;application&lt;/code&gt;, on which you can operate.</source>
          <target state="translated">&lt;code&gt;initialize&lt;/code&gt; 는 작동 할 수있는 하나의 인수 &lt;code&gt;application&lt;/code&gt; 을 수신하는 콜백 함수입니다 .</target>
        </trans-unit>
        <trans-unit id="0bea57fe7ed9eba5409658f3a48c71c88f757fb3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;inverse&lt;/code&gt;: A string used to identify the inverse property on a related model in a One-To-Many relationship. See &lt;a href=&quot;#toc_explicit-inverses&quot;&gt;Explicit Inverses&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;inverse&lt;/code&gt; : 일대 다 관계에서 관련 모델의 역 속성을 식별하는 데 사용되는 문자열입니다. &lt;a href=&quot;#toc_explicit-inverses&quot;&gt;명시 적 역을&lt;/a&gt; 참조하십시오</target>
        </trans-unit>
        <trans-unit id="628f63eabdda031803f960c2f5d7c1f25f5440c1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;inverse&lt;/code&gt;: A string used to identify the inverse property on a related model.</source>
          <target state="translated">&lt;code&gt;inverse&lt;/code&gt; : 관련 모델에서 역 속성을 식별하는 데 사용되는 문자열입니다.</target>
        </trans-unit>
        <trans-unit id="981791f72f3307bc78b41c6c330298580432387a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;isEqual&lt;/code&gt; is a more specific comparison than a triple equal comparison. It will call the &lt;code&gt;isEqual&lt;/code&gt; instance method on the objects being compared, allowing finer control over when objects should be considered equal to each other.</source>
          <target state="translated">&lt;code&gt;isEqual&lt;/code&gt; 은 3 중 등가 비교보다 구체적인 비교입니다. 비교할 객체에 대해 &lt;code&gt;isEqual&lt;/code&gt; 인스턴스 메소드를 호출하여 객체가 서로 동등한 것으로 간주되는시기를보다 세밀하게 제어 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2346f6bdd49c17c71d47fea616e40ad21b80e6cf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;item&lt;/code&gt; is the current item in the iteration.</source>
          <target state="translated">&lt;code&gt;item&lt;/code&gt; 은 반복에서 현재 항목입니다.</target>
        </trans-unit>
        <trans-unit id="a70f061ddc09554649a7991421ffa60d4e22a5f4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;itemA&lt;/code&gt; the first item to compare.</source>
          <target state="translated">&lt;code&gt;itemA&lt;/code&gt; 비교할 첫 번째 항목입니다.</target>
        </trans-unit>
        <trans-unit id="afdb50c23fe67afb3844b199df6caf7806c4eec8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;itemB&lt;/code&gt; the second item to compare.</source>
          <target state="translated">&lt;code&gt;itemB&lt;/code&gt; 비교할 두 번째 항목입니다.</target>
        </trans-unit>
        <trans-unit id="e216418fca94596d04ac120f7ff2dbaa56280744" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;keyForAttribute&lt;/code&gt; can be used to define rules for how to convert an attribute name in your model to a key in your JSON.</source>
          <target state="translated">&lt;code&gt;keyForAttribute&lt;/code&gt; 를 사용하여 모델의 속성 이름을 JSON의 키로 변환하는 방법에 대한 규칙을 정의 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3587351164553ab65966caf0ed3f4b761f15a0df" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;keyForAttribute&lt;/code&gt; can be used to define rules for how to convert an attribute name in your model to a key in your JSON. By default &lt;code&gt;JSONAPISerializer&lt;/code&gt; follows the format used on the examples of &lt;a href=&quot;http://jsonapi.org/format&quot;&gt;http://jsonapi.org/format&lt;/a&gt; and uses dashes as the word separator in the JSON attribute keys.</source>
          <target state="translated">&lt;code&gt;keyForAttribute&lt;/code&gt; 를 사용하여 모델의 속성 이름을 JSON의 키로 변환하는 방법에 대한 규칙을 정의 할 수 있습니다. 기본적으로 &lt;code&gt;JSONAPISerializer&lt;/code&gt; 는 &lt;a href=&quot;http://jsonapi.org/format&quot;&gt;http://jsonapi.org/format&lt;/a&gt; 예제에 사용 된 형식을 따르며 JSON 속성 키에서 단어 구분 기호로 대시를 사용합니다.</target>
        </trans-unit>
        <trans-unit id="f808533e3034ea2e9751518d4320e331a3f662de" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;keyForLink&lt;/code&gt; can be used to define a custom key when deserializing link properties.</source>
          <target state="translated">&lt;code&gt;keyForLink&lt;/code&gt; 는 링크 속성을 직렬화 해제 할 때 사용자 정의 키를 정의하는 데 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3287f39e1be1499f1d146108b07ef8e04343b293" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;keyForPolymorphicType&lt;/code&gt; can be used to define a custom key when serializing and deserializing a polymorphic type. By default, the returned key is &lt;code&gt;${key}Type&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;keyForPolymorphicType&lt;/code&gt; 은 다형성 유형을 직렬화하고 역 직렬화 할 때 사용자 정의 키를 정의하는 데 사용할 수 있습니다. 리턴 된 키는 기본적으로 &lt;code&gt;${key}Type&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="efaf1e977e7c0cd18e1572ebc6888914a1dfeeae" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;keyForRelationship&lt;/code&gt; can be used to define a custom key when serializing and deserializing relationship properties. By default &lt;code&gt;JSONAPISerializer&lt;/code&gt; follows the format used on the examples of &lt;a href=&quot;http://jsonapi.org/format&quot;&gt;http://jsonapi.org/format&lt;/a&gt; and uses dashes as word separators in relationship properties.</source>
          <target state="translated">&lt;code&gt;keyForRelationship&lt;/code&gt; 을 사용하여 관계 특성을 직렬화 및 직렬화 해제 할 때 사용자 정의 키를 정의 할 수 있습니다. 기본적으로 &lt;code&gt;JSONAPISerializer&lt;/code&gt; 는 &lt;a href=&quot;http://jsonapi.org/format&quot;&gt;http://jsonapi.org/format&lt;/a&gt; 예제에 사용 된 형식을 따르며 관계 속성에서 대시를 단어 구분 기호로 사용합니다.</target>
        </trans-unit>
        <trans-unit id="ba2a505209583702fd1fa0ca4023ce337021a809" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;keyForRelationship&lt;/code&gt; can be used to define a custom key when serializing and deserializing relationship properties. By default &lt;code&gt;JSONSerializer&lt;/code&gt; does not provide an implementation of this method.</source>
          <target state="translated">&lt;code&gt;keyForRelationship&lt;/code&gt; 을 사용하여 관계 특성을 직렬화 및 직렬화 해제 할 때 사용자 정의 키를 정의 할 수 있습니다. 기본적으로 &lt;code&gt;JSONSerializer&lt;/code&gt; 는이 메소드의 구현을 제공하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="c6b2e545f2cd9da0e7e69c51e646b68a39a7a2c5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;loading&lt;/code&gt; or &lt;code&gt;application-loading&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;loading&lt;/code&gt; 또는 &lt;code&gt;application-loading&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="35ad4aa43087fcd09efd1d2e11e499df286f8655" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;loading&lt;/code&gt; substates</source>
          <target state="translated">&lt;code&gt;loading&lt;/code&gt; 하위 상태 로드</target>
        </trans-unit>
        <trans-unit id="ab4087088385999643f936fca83820ee440615d0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;log&lt;/code&gt; allows you to output the value of variables in the current rendering context. &lt;code&gt;log&lt;/code&gt; also accepts primitive types such as strings or numbers.</source>
          <target state="translated">&lt;code&gt;log&lt;/code&gt; 사용하면 현재 렌더링 컨텍스트에서 변수 값을 출력 할 수 있습니다. &lt;code&gt;log&lt;/code&gt; 는 문자열 또는 숫자와 같은 기본 유형도 허용합니다.</target>
        </trans-unit>
        <trans-unit id="a498018c1c5b0471beb6c7faa9418e3be21ed904" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;memberQp&lt;/code&gt;: &lt;code&gt;member&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;memberQp&lt;/code&gt; : &lt;code&gt;member&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="41655ff74c85e5bd48cd39c9105f25d4127f7632" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;message&lt;/code&gt; - The message received from the deprecation call.</source>
          <target state="translated">&lt;code&gt;message&lt;/code&gt; - 사용 중단 호출하여받은 메시지.</target>
        </trans-unit>
        <trans-unit id="9ccebb67733680ff51b51c95e10eaf14e685efb9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;message&lt;/code&gt; - The message received from the warn call.</source>
          <target state="translated">&lt;code&gt;message&lt;/code&gt; - 경고를 호출하여받은 메시지.</target>
        </trans-unit>
        <trans-unit id="4dfd9fc8784e2e79805dca4a0106b60dd74b2fa2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;message&lt;/code&gt; A string containing the error message from the backend</source>
          <target state="translated">&lt;code&gt;message&lt;/code&gt; 백엔드의 오류 메시지가 포함 된 문자열</target>
        </trans-unit>
        <trans-unit id="aee6e2d6618f1bf4328836256787d0da05cbe4ec" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;meta&lt;/code&gt; the meta object for the attribute property in the iteration</source>
          <target state="translated">&lt;code&gt;meta&lt;/code&gt; 반복의 속성 속성에 대한 메타 객체</target>
        </trans-unit>
        <trans-unit id="bfa81ed4bda5c8d9cbb75c0568f492bcfce23657" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;modelName&lt;/code&gt; is generated for you by Ember Data. It will be a lowercased, dasherized string. For example:</source>
          <target state="translated">&lt;code&gt;modelName&lt;/code&gt; 은 Ember Data에 의해 생성됩니다. 소문자로 된 문자열입니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="91c23b5033f55ae85b8402c8f5e3787008c72fa0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;modelNameFromPayloadType&lt;/code&gt; can be used to change the mapping for a DS model name, taken from the value in the payload.</source>
          <target state="translated">&lt;code&gt;modelNameFromPayloadType&lt;/code&gt; 은 페이로드의 값에서 가져온 DS 모델 이름의 맵핑을 변경하는 데 사용될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="41ce5f25c763f84f97b0eaae9cb197cc76865033" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;moduleForAcceptance&lt;/code&gt; deals with application setup and teardown. The last few lines, within the function &lt;code&gt;test&lt;/code&gt;, contain an example test.</source>
          <target state="translated">&lt;code&gt;moduleForAcceptance&lt;/code&gt; 는 응용 프로그램 설정 및 해제를 처리합니다. 함수 &lt;code&gt;test&lt;/code&gt; 내의 마지막 몇 줄 은 예제 테스트를 포함합니다.</target>
        </trans-unit>
        <trans-unit id="0cd00b02bd18221259b91809704a1107ba9b8231" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;name&lt;/code&gt; allows you to specify under which name the initializer is registered. This must be a unique name, as trying to register two initializers with the same name will result in an error.</source>
          <target state="translated">&lt;code&gt;name&lt;/code&gt; 을 사용하면 초기화 프로그램이 등록 된 이름을 지정할 수 있습니다. 동일한 이름으로 두 개의 이니셜 라이저를 등록하려고하면 오류가 발생하므로 고유 한 이름이어야합니다.</target>
        </trans-unit>
        <trans-unit id="8e3b4f3284ca099edf020a829bcf9b285b8faf53" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;name&lt;/code&gt; allows you to specify under which name the instanceInitializer is registered. This must be a unique name, as trying to register two instanceInitializer with the same name will result in an error.</source>
          <target state="translated">&lt;code&gt;name&lt;/code&gt; 을 사용하면 instanceInitializer가 등록 된 이름을 지정할 수 있습니다. 동일한 이름으로 두 개의 instanceInitializer를 등록하려고하면 오류가 발생하므로 고유 한 이름이어야합니다.</target>
        </trans-unit>
        <trans-unit id="c991be397832d136db83545c2f7c58faec355b6f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;name&lt;/code&gt; the name of the current property in the iteration</source>
          <target state="translated">&lt;code&gt;name&lt;/code&gt; 반복에서 현재 특성의 이름을 지정 하십시오.</target>
        </trans-unit>
        <trans-unit id="6884714262bba0bfd8cb221b64f4a4782f48a697" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;name&lt;/code&gt;: &lt;code&gt;turing&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;name&lt;/code&gt; : &lt;code&gt;turing&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="3cb17e6b91f141b964f83cf8405d74ffd593bb6a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;next&lt;/code&gt; - A function that calls into the previously registered handler.</source>
          <target state="translated">&lt;code&gt;next&lt;/code&gt; - 이전에 등록 된 핸들러를 호출하는 함수입니다.</target>
        </trans-unit>
        <trans-unit id="bfc088ed6a64f8eed255f61d151fd387d980946f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;none&lt;/code&gt; - do not store the Ember URL in the actual browser URL (mainly used for testing)</source>
          <target state="translated">&lt;code&gt;none&lt;/code&gt; - 실제 브라우저 URL에 Ember URL을 저장하지 마십시오 (주로 테스트에 사용됨)</target>
        </trans-unit>
        <trans-unit id="cbd42651c5c62e94fae9cf97aac8798dfcbb6297" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;normalize&lt;/code&gt; - &lt;code&gt;normalizeArray&lt;/code&gt; iterates and calls &lt;code&gt;normalize&lt;/code&gt; for each of its records while &lt;code&gt;normalizeSingle&lt;/code&gt; calls it once. This is the method you most likely want to subclass.</source>
          <target state="translated">&lt;code&gt;normalize&lt;/code&gt; - &lt;code&gt;normalizeArray&lt;/code&gt; 의 반복과 통화가 &lt;code&gt;normalize&lt;/code&gt; 동안의 각 레코드에 대한 &lt;code&gt;normalizeSingle&lt;/code&gt; 이 한 번 호출합니다. 이것은 서브 클래스로 만들려는 방법입니다.</target>
        </trans-unit>
        <trans-unit id="bcf8f91393d6499319b7f9899e25826157010796" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;normalize&lt;/code&gt; converts a json payload into the normalized form that &lt;a href=&quot;#method_push&quot;&gt;push&lt;/a&gt; expects.</source>
          <target state="translated">&lt;code&gt;normalize&lt;/code&gt; 는 json 페이로드를 &lt;a href=&quot;#method_push&quot;&gt;푸시가&lt;/a&gt; 예상 하는 정규화 된 형식으로 변환합니다 .</target>
        </trans-unit>
        <trans-unit id="f327c3c679e574c7a75cb84d4c863cf760ab552c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;normalizeCreateRecordResponse&lt;/code&gt; - a &lt;code&gt;normalizeResponse&lt;/code&gt; for a specific operation is called.</source>
          <target state="translated">&lt;code&gt;normalizeCreateRecordResponse&lt;/code&gt; - &lt;code&gt;normalizeResponse&lt;/code&gt; 특정 작업에 대한 호출된다.</target>
        </trans-unit>
        <trans-unit id="95d15161380b73bf2a9b2f30f5d0f4be54245f17" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;normalizeResponse&lt;/code&gt; - entry method to the serializer.</source>
          <target state="translated">&lt;code&gt;normalizeResponse&lt;/code&gt; - 직렬화기에 대한 입력 방법</target>
        </trans-unit>
        <trans-unit id="7d21e058611ff855d68fce56db09b58735e9a589" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;normalizeSingleResponse&lt;/code&gt;|&lt;code&gt;normalizeArrayResponse&lt;/code&gt; - for methods like &lt;code&gt;createRecord&lt;/code&gt; we expect a single record back, while for methods like &lt;code&gt;findAll&lt;/code&gt; we expect multiple methods back.</source>
          <target state="translated">&lt;code&gt;normalizeSingleResponse&lt;/code&gt; | &lt;code&gt;normalizeArrayResponse&lt;/code&gt; - &lt;code&gt;createRecord&lt;/code&gt; 와 같은 메소드의 경우 단일 레코드가 &lt;code&gt;findAll&lt;/code&gt; 과 같은 메소드의 경우 다중 메소드가 리턴 됩니다.</target>
        </trans-unit>
        <trans-unit id="33a710751387707d3add424402b654421fb86921" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;null&lt;/code&gt; - The feature is &lt;strong&gt;present&lt;/strong&gt; but &lt;strong&gt;disabled&lt;/strong&gt; in the build output. It must be enabled at runtime.</source>
          <target state="translated">&lt;code&gt;null&lt;/code&gt; - 기능이 &lt;strong&gt;존재&lt;/strong&gt; 하지만 빌드 출력에서 &lt;strong&gt;사용 불가능&lt;/strong&gt; 합니다. 런타임시 활성화해야합니다.</target>
        </trans-unit>
        <trans-unit id="ec2d8175b4b59835563ec3df8498e6244c736fb1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;options&lt;/code&gt; - An object passed in with the deprecation call containing additional information including:</source>
          <target state="translated">&lt;code&gt;options&lt;/code&gt; -다음과 같은 추가 정보가 포함 된 지원 중단 호출과 함께 전달 된 객체 :</target>
        </trans-unit>
        <trans-unit id="168c33bc40c301b2b82e5bc6ac439a05cdd347f2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;options&lt;/code&gt; - An object passed in with the warn call containing additional information including:</source>
          <target state="translated">&lt;code&gt;options&lt;/code&gt; -다음과 같은 추가 정보가 포함 된 경고 호출과 함께 전달 된 객체 :</target>
        </trans-unit>
        <trans-unit id="5f467038b123c789788fa5f934cef551a6409539" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;outlet&lt;/code&gt;: the name of the outlet to clear (default: 'main')</source>
          <target state="translated">&lt;code&gt;outlet&lt;/code&gt; : 지울 콘센트 이름 (기본값 : 'main')</target>
        </trans-unit>
        <trans-unit id="b1452fb3c311f1b2a011a308f36e40d7c41961a3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;parentView&lt;/code&gt;: the name of the view containing the outlet to clear (default: the view rendered by the parent route)</source>
          <target state="translated">&lt;code&gt;parentView&lt;/code&gt; : 지울 콘센트가 포함 된 뷰 이름 (기본값 : 상위 라우트에서 렌더링 된 뷰)</target>
        </trans-unit>
        <trans-unit id="5cef6a6b98a5ac93201f00902986700d2ec6b14f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;path&lt;/code&gt;: allows you to provide your own path as well as mark dynamic segments.</source>
          <target state="translated">&lt;code&gt;path&lt;/code&gt; : 동적 세그먼트를 표시하고 고유 한 경로를 제공 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="8c7fff36d2be47b6ac18cc3bfd4a4895d74091b4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;payloadTypeFromModelName&lt;/code&gt; can be used to change the mapping for the type in the payload, taken from the model name.</source>
          <target state="translated">&lt;code&gt;payloadTypeFromModelName&lt;/code&gt; 을 사용하여 모델 이름에서 가져온 페이로드의 유형에 대한 맵핑을 변경할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3d791a02005e76f1ed17b30faabcc6cfc49b7b4e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;postMessage&lt;/code&gt; and &lt;code&gt;messageChannel&lt;/code&gt; event handlers</source>
          <target state="translated">&lt;code&gt;postMessage&lt;/code&gt; 및 &lt;code&gt;messageChannel&lt;/code&gt; 이벤트 핸들러</target>
        </trans-unit>
        <trans-unit id="8a993543abdf1da61ed27a49b2ba30924cc01b1b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;previousValue&lt;/code&gt; is the value returned by the last call to the iterator.</source>
          <target state="translated">&lt;code&gt;previousValue&lt;/code&gt; 는 반복자에 대한 마지막 호출에서 반환 된 값입니다.</target>
        </trans-unit>
        <trans-unit id="327a59991379803e6b861a88104ffb1a8f096f72" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;promise&lt;/code&gt; is an object or function with a &lt;code&gt;then&lt;/code&gt; method whose behavior conforms to this specification.</source>
          <target state="translated">&lt;code&gt;promise&lt;/code&gt; 는 동작이이 사양을 따르는 &lt;code&gt;then&lt;/code&gt; 메소드를 가진 객체 또는 함수입니다 .</target>
        </trans-unit>
        <trans-unit id="57c94caf30fb6aebdc77fa5c2afb78440c74b971" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;push&lt;/code&gt; can be used to update the data in the relationship and Ember Data will treat the new data as the canonical value of this relationship on the backend.</source>
          <target state="translated">&lt;code&gt;push&lt;/code&gt; 는 관계의 데이터를 업데이트하는 데 사용될 수 있으며 Ember Data는 새 데이터를 백엔드에서이 관계의 표준 값으로 취급합니다.</target>
        </trans-unit>
        <trans-unit id="bec8f6e3444e068727ae23534742becdac00b257" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;push&lt;/code&gt; can be used to update the data in the relationship and Ember Data will treat the new data as the conanical value of this relationship on the backend.</source>
          <target state="translated">&lt;code&gt;push&lt;/code&gt; 를 사용하여 관계의 데이터를 업데이트 할 수 있으며 Ember Data는 새 데이터를 백엔드에서이 관계의 코난 값으로 처리합니다.</target>
        </trans-unit>
        <trans-unit id="4dc80aa55adb739e2a2bd95fb8e191dbbd3c0080" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;reason&lt;/code&gt; is a value that indicates why a promise was rejected.</source>
          <target state="translated">&lt;code&gt;reason&lt;/code&gt; 은 약속이 거부 된 이유를 나타내는 값입니다.</target>
        </trans-unit>
        <trans-unit id="5a00c05f84b26cc04f65b241334bbba7688209b7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;records&lt;/code&gt; is used to signal that the entire record is expected</source>
          <target state="translated">&lt;code&gt;records&lt;/code&gt; 는 전체 레코드가 예상됨을 나타내는 데 사용됩니다</target>
        </trans-unit>
        <trans-unit id="e73e70c309b3e16a9ab63b4d650c85caaea2e381" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;redirect&lt;/code&gt; and &lt;code&gt;afterModel&lt;/code&gt; behave very similarly and are called almost at the same time, but they have an important distinction in the case that, from one of these hooks, a redirect into a child route of this route occurs: redirects from &lt;code&gt;afterModel&lt;/code&gt; essentially invalidate the current attempt to enter this route, and will result in this route's &lt;code&gt;beforeModel&lt;/code&gt;, &lt;code&gt;model&lt;/code&gt;, and &lt;code&gt;afterModel&lt;/code&gt; hooks being fired again within the new, redirecting transition. Redirects that occur within the &lt;code&gt;redirect&lt;/code&gt; hook, on the other hand, will &lt;em&gt;not&lt;/em&gt; cause these hooks to be fired again the second time around; in other words, by the time the &lt;code&gt;redirect&lt;/code&gt; hook has been called, both the resolved model and attempted entry into this route are considered to be fully validated.</source>
          <target state="translated">&lt;code&gt;redirect&lt;/code&gt; 및 &lt;code&gt;afterModel&lt;/code&gt; 은 매우 유사하게 동작하며 거의 동시에 호출되지만 이러한 후크 중 하나에서이 경로의 하위 경로로의 리디렉션이 발생하는 경우 중요한 차이점이 있습니다. &lt;code&gt;afterModel&lt;/code&gt; 의 리디렉션은 본질적으로 현재를 무효화합니다. 이 라우트에 들어 가려고하면이 라우트의 &lt;code&gt;beforeModel&lt;/code&gt; , &lt;code&gt;model&lt;/code&gt; 및 &lt;code&gt;afterModel&lt;/code&gt; 훅이 새로운 리디렉션 전환 내에서 다시 시작됩니다. 반면 &lt;code&gt;redirect&lt;/code&gt; 후크 내에서 발생하는 리디렉션 은 이러한 후크가 두 번째로 다시 시작 &lt;em&gt;되지 않습니다&lt;/em&gt; . 다시 말해, 시간에 따라 &lt;code&gt;redirect&lt;/code&gt; 후크가 호출되었으며, 분석 된 모델과이 라우트에 대한 입력 시도는 모두 완전히 검증 된 것으로 간주됩니다.</target>
        </trans-unit>
        <trans-unit id="ab67c7e6e9fa0cd934f88f8dacc089652b443bd5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;registerAsyncHelper&lt;/code&gt; is used to register an async test helper that will be injected when &lt;code&gt;App.injectTestHelpers&lt;/code&gt; is called.</source>
          <target state="translated">&lt;code&gt;registerAsyncHelper&lt;/code&gt; 는 &lt;code&gt;App.injectTestHelpers&lt;/code&gt; 가 호출 될 때 주입 될 비동기 테스트 헬퍼를 등록하는 데 사용됩니다 .</target>
        </trans-unit>
        <trans-unit id="f921550b6544a51a75eef724b2c0b99fd75aff8e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;registerHelper&lt;/code&gt; is used to register a test helper that will be injected when &lt;code&gt;App.injectTestHelpers&lt;/code&gt; is called.</source>
          <target state="translated">&lt;code&gt;registerHelper&lt;/code&gt; 는 &lt;code&gt;App.injectTestHelpers&lt;/code&gt; 가 호출 될 때 주입 될 테스트 헬퍼를 등록하는 데 사용됩니다 .</target>
        </trans-unit>
        <trans-unit id="498162709d35ed1374baf798340dc71965a4228a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;relationshipKey&lt;/code&gt; key under which the value for the relationship is extracted from the resourceHash</source>
          <target state="translated">&lt;code&gt;relationshipKey&lt;/code&gt; resourceHash에서 관계 값이 추출되는 relationKey 키</target>
        </trans-unit>
        <trans-unit id="67c27395439d8092bb960a2837a845f0b1d57223" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;relationshipMeta&lt;/code&gt; meta information about the relationship</source>
          <target state="translated">&lt;code&gt;relationshipMeta&lt;/code&gt; 에 대한 메타 메타 정보</target>
        </trans-unit>
        <trans-unit id="62afc7c6b66312d7af16749c84cfa540363f9367" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;relationshipOptions&lt;/code&gt; is a hash which contains more information about the polymorphic relationship which should be extracted:</source>
          <target state="translated">&lt;code&gt;relationshipOptions&lt;/code&gt; 는 추출해야하는 다형성 관계에 대한 자세한 정보를 포함하는 해시입니다.</target>
        </trans-unit>
        <trans-unit id="29a8bdaf16a2e1c107208b1247534a49fe850c13" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;relationships&lt;/code&gt; - object which must contain any of the following properties under each relationships' respective key (example path is &lt;code&gt;relationships.achievements.data&lt;/code&gt;):</source>
          <target state="translated">&lt;code&gt;relationships&lt;/code&gt; 각 관계의 해당 키 아래에 다음 특성 중 하나를 포함해야하는 오브젝트입니다 (예 : 경로는 &lt;code&gt;relationships.achievements.data&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="db2c1389220535c02fca00de53127e33e2ae3b38" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;render&lt;/code&gt; additionally allows you to supply which &lt;code&gt;controller&lt;/code&gt; and &lt;code&gt;model&lt;/code&gt; objects should be loaded and associated with the rendered template.</source>
          <target state="translated">&lt;code&gt;render&lt;/code&gt; 또한 render를 사용하면 렌더링 된 템플릿과 함께로드 및 연관시킬 &lt;code&gt;controller&lt;/code&gt; 및 &lt;code&gt;model&lt;/code&gt; 객체를 제공 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ac3ee30d920c6221fb791b62269ce81087c80575" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;render&lt;/code&gt; is used to render a template into a region of another template (indicated by an &lt;code&gt;{{outlet}}&lt;/code&gt;). &lt;code&gt;render&lt;/code&gt; is used both during the entry phase of routing (via the &lt;code&gt;renderTemplate&lt;/code&gt; hook) and later in response to user interaction.</source>
          <target state="translated">&lt;code&gt;render&lt;/code&gt; 는 템플리트를 다른 템플리트의 영역 ( &lt;code&gt;{{outlet}}&lt;/code&gt; 으로 표시 ) 으로 렌더링하는 데 사용됩니다 . &lt;code&gt;render&lt;/code&gt; 는 렌더 입력 단계 동안 ( 렌더 &lt;code&gt;renderTemplate&lt;/code&gt; 후크 를 통해 ) 나중에 사용자 상호 작용에 응답하여 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="78ff145fb0d4742a5f565c0ad493b0a71ba23afd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;reopen()&lt;/code&gt; is used to add instance methods and properties that are shared across all instances of a class. It does not add methods and properties to a particular instance of a class as in vanilla JavaScript (without using prototype).</source>
          <target state="translated">&lt;code&gt;reopen()&lt;/code&gt; 은 클래스의 모든 인스턴스에서 공유되는 인스턴스 메소드 및 특성을 추가하는 데 사용됩니다. 프로토 타입을 사용하지 않고 바닐라 JavaScript와 같이 클래스의 특정 인스턴스에 메소드 및 특성을 추가하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="41ec5369755f6d704aa82476ab6b33cab49e9749" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;resetNamespace&lt;/code&gt;: false by default; when nesting routes, ember will combine the route names to form the fully-qualified route name, which is used with &lt;code&gt;{{link-to}}&lt;/code&gt; or manually transitioning to routes. Setting &lt;code&gt;resetNamespace: true&lt;/code&gt; will cause the route not to inherit from its parent route's names. This is handy for preventing extremely long route names. Keep in mind that the actual URL path behavior is still retained.</source>
          <target state="translated">&lt;code&gt;resetNamespace&lt;/code&gt; : 기본적으로 false입니다. 경로를 중첩 할 때 ember는 경로 이름을 결합하여 &lt;code&gt;{{link-to}}&lt;/code&gt; 와 함께 사용 하거나 경로로 수동 전환하는 정규화 된 경로 이름을 형성합니다 . &lt;code&gt;resetNamespace: true&lt;/code&gt; 설정 하면 경로가 상위 경로 이름에서 상속되지 않습니다. 경로 이름이 너무 길지 않도록하는 데 편리합니다. 실제 URL 경로 동작은 계속 유지됩니다.</target>
        </trans-unit>
        <trans-unit id="ec0ac71cba96a30d4e24fbf0dfe170be99717929" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;resourceHash&lt;/code&gt; complete hash of the resource the relationship should be extracted from</source>
          <target state="translated">&lt;code&gt;resourceHash&lt;/code&gt; 관계를 추출해야하는 자원의 완전한 해시</target>
        </trans-unit>
        <trans-unit id="d4e16d73c3e47b68ddb4beb94bed0e2104f64637" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;run.bind&lt;/code&gt; takes two main arguments, the desired context and the function to invoke in that context. Any additional arguments will be supplied as arguments to the function that is passed in.</source>
          <target state="translated">&lt;code&gt;run.bind&lt;/code&gt; 는 원하는 컨텍스트와 해당 컨텍스트에서 호출 할 함수의 두 가지 주요 인수를 사용합니다. 추가 인수는 전달 된 함수에 인수로 제공됩니다.</target>
        </trans-unit>
        <trans-unit id="19af8769269b0f9b6a38557d62d3c0ae46323949" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;serialize&lt;/code&gt; takes an optional &lt;code&gt;options&lt;/code&gt; hash with a single option:</source>
          <target state="translated">&lt;code&gt;serialize&lt;/code&gt; 는 단일 옵션 으로 &lt;code&gt;options&lt;/code&gt; 해시를 사용합니다.</target>
        </trans-unit>
        <trans-unit id="d98035c9f614486c6b59326bed1677f58e846505" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;serialize&lt;/code&gt; takes an optional hash as a parameter, currently supported options are:</source>
          <target state="translated">&lt;code&gt;serialize&lt;/code&gt; 는 선택적 해시를 매개 변수로 사용하며 현재 지원되는 옵션은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="24a46553b8edebc8c965eef3cb3931932ee467a2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;serialize&lt;/code&gt; takes an options hash with a single option: &lt;code&gt;includeId&lt;/code&gt;. If this option is &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;serialize&lt;/code&gt; will, by default include the ID in the JSON object it builds.</source>
          <target state="translated">&lt;code&gt;serialize&lt;/code&gt; 는 &lt;code&gt;includeId&lt;/code&gt; 단일 옵션으로 옵션 해시를 사용합니다 . 이 옵션이 &lt;code&gt;true&lt;/code&gt; 인 경우 &lt;code&gt;serialize&lt;/code&gt; 는 기본적으로 빌드하는 JSON 객체에 ID를 포함합니다.</target>
        </trans-unit>
        <trans-unit id="b4997d0113f9f5069529098ade06a12d00f199dd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;serializeAttribute&lt;/code&gt; can be used to customize how &lt;code&gt;DS.attr&lt;/code&gt; properties are serialized</source>
          <target state="translated">&lt;code&gt;serializeAttribute&lt;/code&gt; 를 사용하여 &lt;code&gt;DS.attr&lt;/code&gt; 속성을 직렬화 하는 방법을 사용자 지정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b751c8659b42100065ba6d060f12e8dffb99515c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;serializeBelongsTo&lt;/code&gt; can be used to customize how &lt;code&gt;DS.belongsTo&lt;/code&gt; properties are serialized.</source>
          <target state="translated">&lt;code&gt;serializeBelongsTo&lt;/code&gt; 를 사용하여 &lt;code&gt;DS.belongsTo&lt;/code&gt; 속성을 직렬화 하는 방법을 사용자 지정할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="88db8a35e89e87682eef6ac7665d99a830a26a94" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;serializeHasMany&lt;/code&gt; can be used to customize how &lt;code&gt;DS.hasMany&lt;/code&gt; properties are serialized.</source>
          <target state="translated">&lt;code&gt;serializeHasMany&lt;/code&gt; 를 사용하여 &lt;code&gt;DS.hasMany&lt;/code&gt; 속성을 직렬화 하는 방법을 사용자 지정할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="18fd9a6de45aa2fe5a874a759dd75b062ceea16b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;setOwner&lt;/code&gt; forces a new owner on a given object instance. This is primarily useful in some testing cases.</source>
          <target state="translated">&lt;code&gt;setOwner&lt;/code&gt; 는 주어진 객체 인스턴스에서 새로운 소유자를 강제합니다. 이는 일부 테스트 사례에서 주로 유용합니다.</target>
        </trans-unit>
        <trans-unit id="18dd34ab27cb04499e7ae5efd158b9103d5b2102" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;setTimeout&lt;/code&gt; and &lt;code&gt;setInterval&lt;/code&gt; callbacks</source>
          <target state="translated">&lt;code&gt;setTimeout&lt;/code&gt; 및 &lt;code&gt;setInterval&lt;/code&gt; 콜백</target>
        </trans-unit>
        <trans-unit id="06b4156ed26d29bdd56778068f69a47f63ada4ae" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;settled&lt;/code&gt; the final resting state of a promise, fulfilled or rejected.</source>
          <target state="translated">&lt;code&gt;settled&lt;/code&gt; 약속의 최종 휴식 상태를 해결 , 이행 또는 거부.</target>
        </trans-unit>
        <trans-unit id="897b3bef032015c31d70d4f7e07f0eb805c8bf07" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;store.findAll()&lt;/code&gt; returns a &lt;code&gt;DS.PromiseArray&lt;/code&gt; that fulfills to a &lt;code&gt;DS.RecordArray&lt;/code&gt; and &lt;code&gt;store.peekAll&lt;/code&gt; directly returns a &lt;code&gt;DS.RecordArray&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;store.findAll()&lt;/code&gt; 반환 &lt;code&gt;DS.PromiseArray&lt;/code&gt; A와 충족 것을 &lt;code&gt;DS.RecordArray&lt;/code&gt; 및 &lt;code&gt;store.peekAll&lt;/code&gt; 가 직접 반환 &lt;code&gt;DS.RecordArray&lt;/code&gt; 을 .</target>
        </trans-unit>
        <trans-unit id="d92b04b65b0dd56bd2b92d3e690867a35f9e5eb8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;target=someProperty&lt;/code&gt; will look to &lt;code&gt;someProperty&lt;/code&gt; instead of the current context for the &lt;code&gt;actions&lt;/code&gt; hash. This can be useful when targeting a service for actions.</source>
          <target state="translated">&lt;code&gt;target=someProperty&lt;/code&gt; 에 보일 것 &lt;code&gt;someProperty&lt;/code&gt; 의 현재 상황에 맞는 대신 &lt;code&gt;actions&lt;/code&gt; 해시. 이는 서비스를 대상으로 할 때 유용합니다.</target>
        </trans-unit>
        <trans-unit id="67589f9ab3f09a93dea5d740ae85c49a73780d1e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;thenable&lt;/code&gt; is an object or function that defines a &lt;code&gt;then&lt;/code&gt; method.</source>
          <target state="translated">&lt;code&gt;thenable&lt;/code&gt; 은 &lt;code&gt;then&lt;/code&gt; 메소드 를 정의하는 객체 또는 함수입니다 .</target>
        </trans-unit>
        <trans-unit id="2d0c9a9230e61f60df4689ff5eca0667cddc08c3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;this.get('onConfirm')&lt;/code&gt; will return the function passed from the parent as the value of &lt;code&gt;onConfirm&lt;/code&gt;, and the following &lt;code&gt;()&lt;/code&gt; will invoke the function.</source>
          <target state="translated">&lt;code&gt;this.get('onConfirm')&lt;/code&gt; 은 부모로부터 전달 된 함수를 &lt;code&gt;onConfirm&lt;/code&gt; 값으로 반환 하고 다음 &lt;code&gt;()&lt;/code&gt; 은 함수를 호출합니다.</target>
        </trans-unit>
        <trans-unit id="54453dea065f6ae27d8111091e942211b8c22025" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;this.on&lt;/code&gt; will add the provided function to the test local scope as &lt;code&gt;filterByCity&lt;/code&gt;, which we can use to provide to the component.</source>
          <target state="translated">&lt;code&gt;this.on&lt;/code&gt; 은 제공된 함수를 테스트 로컬 범위에 &lt;code&gt;filterByCity&lt;/code&gt; 로 추가하여 컴포넌트에 제공하는 데 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="4caaf1fb251c2a1418c71be2faf7d1c57638c792" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;toJSON&lt;/code&gt; takes an optional hash as a parameter, currently supported options are:</source>
          <target state="translated">&lt;code&gt;toJSON&lt;/code&gt; 은 선택적 해시를 매개 변수로 사용하며 현재 지원되는 옵션은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="25d88918b50bf17855f7674250570567bae9ac83" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; - The feature is &lt;strong&gt;present&lt;/strong&gt; and &lt;strong&gt;enabled&lt;/strong&gt;: the code behind the flag is always enabled in the generated build.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; - 기능이 &lt;strong&gt;존재&lt;/strong&gt; 하고 &lt;strong&gt;사용 가능합니다&lt;/strong&gt; . 플래그 뒤에있는 코드는 항상 생성 된 빌드에서 사용 가능합니다.</target>
        </trans-unit>
        <trans-unit id="604dcb264248ea27d4285eda3645e29a7e69d0e9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;type&lt;/code&gt; - mandatory string which matches &lt;code&gt;model&lt;/code&gt;'s dasherized name in singular form</source>
          <target state="translated">&lt;code&gt;type&lt;/code&gt; - 일치하는 필수 문자열 &lt;code&gt;model&lt;/code&gt; 단수 형태이야 'dasherized 이름을</target>
        </trans-unit>
        <trans-unit id="6514527178b751ce56280b5f995202096173514d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;type&lt;/code&gt; a string containing the name of the type of transformed applied to the attribute</source>
          <target state="translated">&lt;code&gt;type&lt;/code&gt; 의 종류 명을 포함하는 문자열은 속성 적용은 변환 된</target>
        </trans-unit>
        <trans-unit id="a85e6fe87d706ff147e0d7c2bd9f40f8e1c40910" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;unregisterWaiter&lt;/code&gt; is used to unregister a callback that was registered with &lt;code&gt;registerWaiter&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;unregisterWaiter&lt;/code&gt; 는 registerWaiter에 &lt;code&gt;registerWaiter&lt;/code&gt; 된 콜백을 등록 취소하는 데 사용됩니다 .</target>
        </trans-unit>
        <trans-unit id="3dc90b695a2b38e6412c994e86f6bbab2bc9b5f4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;until&lt;/code&gt; - The Ember version number the feature and deprecation will be removed in.</source>
          <target state="translated">&lt;code&gt;until&lt;/code&gt; -기능 및 사용 중단이 제거 될 Ember 버전 번호.</target>
        </trans-unit>
        <trans-unit id="256553a6ae2253b871cba91ba19dc6a402a37770" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;updated&lt;/code&gt; The record has been updated by the client and not yet saved to the adapter.</source>
          <target state="translated">&lt;code&gt;updated&lt;/code&gt; 클라이언트가 레코드를 업데이트했지만 아직 어댑터에 저장하지 않았습니다.</target>
        </trans-unit>
        <trans-unit id="2f53237a15da64fc29158968f073c6174337424c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;value()&lt;/code&gt; sycronously returns the current value of the has-many relationship. Unlike &lt;code&gt;record.get('relationshipName')&lt;/code&gt;, calling &lt;code&gt;value()&lt;/code&gt; on a reference does not trigger a fetch if the async relationship is not yet loaded. If the relationship is not loaded it will always return &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;value()&lt;/code&gt; 는 has-many 관계의 현재 값을 sycronously 반환합니다. &lt;code&gt;record.get('relationshipName')&lt;/code&gt; 과 달리 비동기 관계가 아직로드되지 않은 경우 참조에서 &lt;code&gt;value()&lt;/code&gt; 를 호출 하면 가져 오기가 트리거되지 않습니다. 관계가로드되지 않으면 항상 &lt;code&gt;null&lt;/code&gt; 을 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="53f59a52a9a5d9a6d3334d3de8fe2732205d2e05" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;value()&lt;/code&gt; synchronously returns the current value of the belongs-to relationship. Unlike &lt;code&gt;record.get('relationshipName')&lt;/code&gt;, calling &lt;code&gt;value()&lt;/code&gt; on a reference does not trigger a fetch if the async relationship is not yet loaded. If the relationship is not loaded it will always return &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;value()&lt;/code&gt; 는 소속 관계의 현재 값을 동 기적으로 반환합니다. &lt;code&gt;record.get('relationshipName')&lt;/code&gt; 과 달리 비동기 관계가 아직로드되지 않은 경우 참조에서 &lt;code&gt;value()&lt;/code&gt; 를 호출 하면 가져 오기가 트리거되지 않습니다. 관계가로드되지 않으면 항상 &lt;code&gt;null&lt;/code&gt; 을 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="3485c65e06f2db5295e3444678f96bc9a9a7cab2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;value&lt;/code&gt; is any legal JavaScript value (including undefined, a thenable, or a promise).</source>
          <target state="translated">&lt;code&gt;value&lt;/code&gt; 는 합법적 인 JavaScript 값입니다 (정의되지 않은, thenable 또는 promise 포함).</target>
        </trans-unit>
        <trans-unit id="efee708766b1c47ff798bdda0e3e04603d821e23" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;value=&quot;target.value&quot;&lt;/code&gt; will read the path &lt;code&gt;target.value&lt;/code&gt; off the first argument to the action when it is called and rewrite the first argument to be that value. This is useful when attaching actions to event listeners.</source>
          <target state="translated">&lt;code&gt;value=&quot;target.value&quot;&lt;/code&gt; 는 호출 될 때 조치에 대한 첫 번째 인수에서 &lt;code&gt;target.value&lt;/code&gt; 경로를 읽고 첫 번째 인수를 해당 값으로 다시 씁니다. 이벤트 리스너에 조치를 첨부 할 때 유용합니다.</target>
        </trans-unit>
        <trans-unit id="7417c48170956b3db7555d98ceb6566984758328" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{{#each}}&lt;/code&gt; can have a matching &lt;code&gt;{{else}}&lt;/code&gt;. The contents of this block will render if the collection is empty.</source>
          <target state="translated">&lt;code&gt;{{#each}}&lt;/code&gt; can have a matching &lt;code&gt;{{else}}&lt;/code&gt;. The contents of this block will render if the collection is empty.</target>
        </trans-unit>
        <trans-unit id="98eeaffa3e4259ed98846b266cc595808fa88337" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{{action}}&lt;/code&gt; Helper</source>
          <target state="translated">&lt;code&gt;{{action}}&lt;/code&gt; Helper</target>
        </trans-unit>
        <trans-unit id="a2733141d4f944abe841a01665d1460a422c0218" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{{action}}&lt;/code&gt; helpers called in element space can control event bubbling. Note that the closure style actions cannot.</source>
          <target state="translated">&lt;code&gt;{{action}}&lt;/code&gt; helpers called in element space can control event bubbling. Note that the closure style actions cannot.</target>
        </trans-unit>
        <trans-unit id="05791ad0510969290c2bf27d66e803138e3b3c84" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{{action}}&lt;/code&gt; helpers called in element space can specify an event type. By default the &lt;code&gt;{{action}}&lt;/code&gt; helper registers for DOM &lt;code&gt;click&lt;/code&gt; events. You can supply an &lt;code&gt;on&lt;/code&gt; option to the helper to specify a different DOM event name:</source>
          <target state="translated">&lt;code&gt;{{action}}&lt;/code&gt; helpers called in element space can specify an event type. By default the &lt;code&gt;{{action}}&lt;/code&gt; helper registers for DOM &lt;code&gt;click&lt;/code&gt; events. You can supply an &lt;code&gt;on&lt;/code&gt; option to the helper to specify a different DOM event name:</target>
        </trans-unit>
        <trans-unit id="378f393afeb3d3a439375c602cebb9b358a8a4cf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{{action}}&lt;/code&gt; helpers called in element space can specify modifier keys. By default the &lt;code&gt;{{action}}&lt;/code&gt; helper will ignore click events with pressed modifier keys. You can supply an &lt;code&gt;allowedKeys&lt;/code&gt; option to specify which keys should not be ignored.</source>
          <target state="translated">&lt;code&gt;{{action}}&lt;/code&gt; helpers called in element space can specify modifier keys. By default the &lt;code&gt;{{action}}&lt;/code&gt; helper will ignore click events with pressed modifier keys. You can supply an &lt;code&gt;allowedKeys&lt;/code&gt; option to specify which keys should not be ignored.</target>
        </trans-unit>
        <trans-unit id="d2dd2ced1f7d6843a68a861199c1a16339130ebf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{{else}}&lt;/code&gt; can chain helper invocation, the most common usecase for this being &lt;code&gt;{{else if}}&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;{{else}}&lt;/code&gt; can chain helper invocation, the most common usecase for this being &lt;code&gt;{{else if}}&lt;/code&gt;:</target>
        </trans-unit>
        <trans-unit id="4f9552cca283b2a9929f75f8cf57778df680e26a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{{link-to}}&lt;/code&gt; creates an instance of &lt;code&gt;Ember.LinkComponent&lt;/code&gt; for rendering. To override options for your entire application, reopen &lt;code&gt;Ember.LinkComponent&lt;/code&gt; and supply the desired values:</source>
          <target state="translated">&lt;code&gt;{{link-to}}&lt;/code&gt; creates an instance of &lt;code&gt;Ember.LinkComponent&lt;/code&gt; for rendering. To override options for your entire application, reopen &lt;code&gt;Ember.LinkComponent&lt;/code&gt; and supply the desired values:</target>
        </trans-unit>
        <trans-unit id="c0038b8bc8c19968daf10f69bf3a0ea5d6fea054" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{{link-to}}&lt;/code&gt; will apply a CSS class name of 'active' when the application's current route matches the supplied routeName. For example, if the application's current route is 'photoGallery.recent' the following use of &lt;code&gt;{{link-to}}&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;{{link-to}}&lt;/code&gt; will apply a CSS class name of 'active' when the application's current route matches the supplied routeName. For example, if the application's current route is 'photoGallery.recent' the following use of &lt;code&gt;{{link-to}}&lt;/code&gt;:</target>
        </trans-unit>
        <trans-unit id="deca444a2ebb87cfb6deb69549dd1ccb615bebb4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{{link-to}}&lt;/code&gt; will use your application's Router to fill the element's &lt;code&gt;href&lt;/code&gt; property with a url that matches the path to the supplied &lt;code&gt;routeName&lt;/code&gt; for your router's configured &lt;code&gt;Location&lt;/code&gt; scheme, which defaults to Ember.HashLocation.</source>
          <target state="translated">&lt;code&gt;{{link-to}}&lt;/code&gt; will use your application's Router to fill the element's &lt;code&gt;href&lt;/code&gt; property with a url that matches the path to the supplied &lt;code&gt;routeName&lt;/code&gt; for your router's configured &lt;code&gt;Location&lt;/code&gt; scheme, which defaults to Ember.HashLocation.</target>
        </trans-unit>
        <trans-unit id="bfa2f0585da6d8869b6bae5b167c37a53e3c6091" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{{textarea}}&lt;/code&gt; inserts a new instance of &lt;code&gt;&amp;lt;textarea&amp;gt;&lt;/code&gt; tag into the template. The attributes of &lt;code&gt;{{textarea}}&lt;/code&gt; match those of the native HTML tags as closely as possible.</source>
          <target state="translated">&lt;code&gt;{{textarea}}&lt;/code&gt; inserts a new instance of &lt;code&gt;&amp;lt;textarea&amp;gt;&lt;/code&gt; tag into the template. The attributes of &lt;code&gt;{{textarea}}&lt;/code&gt; match those of the native HTML tags as closely as possible.</target>
        </trans-unit>
        <trans-unit id="3bb23098d256a9053ad8b2bcb60471ceac85cd91" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;{{yield}}&lt;/code&gt; denotes an area of a template that will be rendered inside of another template.</source>
          <target state="translated">&lt;code&gt;{{yield}}&lt;/code&gt; denotes an area of a template that will be rendered inside of another template.</target>
        </trans-unit>
        <trans-unit id="689494e4cf34ca9e5c569a66a7ed8dda781a2043" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;&lt;strong&gt;Note:&lt;/strong&gt; Observers are often over-used by new Ember developers. Observers are used heavily within the Ember framework itself, but for most problems Ember app developers face, computed properties are the appropriate solution.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;&lt;strong&gt;참고 :&lt;/strong&gt; 새로운 Ember 개발자는 종종 관찰자를 과도하게 사용합니다. 관찰자는 Ember 프레임 워크 자체 내에서 많이 사용되지만, Ember 앱 개발자가 겪는 대부분의 문제에 대해 계산 된 속성이 적절한 솔루션입니다.&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="9e52c0e9df1f8007b8fa39ff4370f926847d3142" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Ember Data contains extensive tests around the functionality of relationships, so you probably don't need to duplicate those tests. You could look at the &lt;a href=&quot;https://github.com/emberjs/data/tree/master/tests&quot;&gt;Ember Data tests&lt;/a&gt; for examples of deeper relationship testing if you feel the need to do it.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;Ember Data에는 관계 기능에 대한 광범위한 테스트가 포함되어 있으므로 해당 테스트를 복제하지 않아도됩니다. 필요하다고 느끼면 더 깊은 관계 테스트의 예 는 &lt;a href=&quot;https://github.com/emberjs/data/tree/master/tests&quot;&gt;Ember 데이터 테스트&lt;/a&gt; 를 볼 수 있습니다.&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="2e8fee5df7db30627796f8d838f7eba72bf0022e" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Note: Running &lt;code&gt;ember help generate&lt;/code&gt; will list a number of other Ember resources you can create as well ...&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;참고 : &lt;code&gt;ember help generate&lt;/code&gt; 를 실행 하면 생성 할 수있는 여러 다른 Ember 리소스가 나열됩니다.&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="706ae6f36316e23b84b7cdc356fd0c0616c5dfd2" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Note: This is a synchronous method and does not return a promise.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;참고 :이 방법은 동기식이며 약속을 반환하지 않습니다.&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="2ed21641ed7fb74f77120527278d0d5075345661" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Note: This is the preferred way to define computed properties when writing third-party libraries that depend on or use Ember, since there is no guarantee that the user will have &lt;a href=&quot;https://emberjs.com/guides/configuring-ember/disabling-prototype-extensions/&quot;&gt;prototype Extensions&lt;/a&gt; enabled.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;참고 : Ember에 의존하거나이를 사용하는 타사 라이브러리를 작성할 때 사용자가 &lt;a href=&quot;https://emberjs.com/guides/configuring-ember/disabling-prototype-extensions/&quot;&gt;프로토 타입 확장 기능을&lt;/a&gt; 사용할 수 있다는 보장이 없으므로 계산 된 속성을 정의하는 것이 좋습니다 .&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="eac44ade16abccd7dafaca8fc3101650eac8af45" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Testing helpers follows previous patterns shown in &lt;a href=&quot;../unit-testing-basics&quot;&gt;Testing Components&lt;/a&gt;, because helpers are rendered to templates just like components.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;도우미는 구성 요소와 같은 템플릿으로 렌더링되기 때문에 &lt;a href=&quot;../unit-testing-basics&quot;&gt;테스트&lt;/a&gt; 도우미는 구성 요소 테스트에 표시된 이전 패턴을 따릅니다 .&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="82971b63a81f0faa64d4bf3a20cbdc0cf0478088" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Unit testing methods and computed properties follows previous patterns shown in &lt;a href=&quot;../unit-testing-basics&quot;&gt;Unit Testing Basics&lt;/a&gt; because DS.Model extends Ember.Object.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;DS.Model은 Ember.Object를 확장하므로 단위 테스트 방법 및 계산 된 속성은 &lt;a href=&quot;../unit-testing-basics&quot;&gt;단위 테스트 기본 사항에&lt;/a&gt; 표시된 이전 패턴을 따릅니다.&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="ae309bf6d7dbcd84ecb99cf6da4eb83cc26bd5ae" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Unit testing methods and computed properties follows previous patterns shown in &lt;a href=&quot;../unit-testing-basics&quot;&gt;Unit Testing Basics&lt;/a&gt; because Ember.Controller extends Ember.Object.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;Ember.Controller가 Ember.Object를 확장하기 때문에 단위 테스트 방법 및 계산 된 속성은 &lt;a href=&quot;../unit-testing-basics&quot;&gt;단위 테스트 기본 사항에&lt;/a&gt; 표시된 이전 패턴을 따릅니다.&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="c389359434413ae33eea0ba4a1c2121a4e6a9c52" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Unit testing methods and computed properties follows previous patterns shown in &lt;a href=&quot;../unit-testing-basics&quot;&gt;Unit Testing Basics&lt;/a&gt; because Ember.Route extends Ember.Object.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;Ember.Route는 Ember.Object를 확장하므로 단위 테스트 방법 및 계산 된 속성은 &lt;a href=&quot;../unit-testing-basics&quot;&gt;단위 테스트 기본 사항에&lt;/a&gt; 표시된 이전 패턴을 따릅니다.&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="385a696d71ee3f161d0f20db1653880ea60cb377" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;When&lt;/em&gt; the returned promise resolves depends on the reload behavior, configured via the passed &lt;code&gt;options&lt;/code&gt; hash and the result of the adapter's &lt;code&gt;shouldReloadAll&lt;/code&gt; method.</source>
          <target state="translated">&lt;em&gt;&lt;/em&gt;리턴 된 약속이 해결 &lt;em&gt;될 때&lt;/em&gt; 전달 된 &lt;code&gt;options&lt;/code&gt; 해시 및 어댑터의 &lt;code&gt;shouldReloadAll&lt;/code&gt; 메소드 의 결과를 통해 구성된 다시로드 동작에 따라 다릅니다 .</target>
        </trans-unit>
        <trans-unit id="79fa6302336be17d32266b0bbc6beac111d678fe" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;enumerable&lt;/em&gt; is the enumerable object itself.</source>
          <target state="translated">&lt;em&gt;열거 형&lt;/em&gt; 은 열거 가능한 객체 자체입니다.</target>
        </trans-unit>
        <trans-unit id="85fe9b4e4d5c8cbc9740af7a5d4190018b12b3b0" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;index&lt;/em&gt; is the current index in the iteration</source>
          <target state="translated">&lt;em&gt;index&lt;/em&gt; 는 반복의 현재 색인입니다</target>
        </trans-unit>
        <trans-unit id="49183ea4f2fe6acaae08b6b408b09f95ff3e0b34" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;item&lt;/em&gt; is the current item in the iteration.</source>
          <target state="translated">&lt;em&gt;item&lt;/em&gt; 은 반복에서 현재 항목입니다.</target>
        </trans-unit>
        <trans-unit id="0e5ccd44a41b0bb9d3cf5ae59b52fac819fb2aa9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;ES2015 modules&lt;/strong&gt; - you will better understand &lt;a href=&quot;https://ember-cli.com/&quot;&gt;Ember CLI's&lt;/a&gt; project structure and import paths if you are comfortable with &lt;a href=&quot;http://jsmodules.io/&quot;&gt;JavaScript Modules&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;ES2015 모듈&lt;/strong&gt; - 당신은 더 나은 이해 &lt;a href=&quot;https://ember-cli.com/&quot;&gt;엠버 CLI의&lt;/a&gt; 당신이 편안 경우 프로젝트 구조 및 수입 경로를 &lt;a href=&quot;http://jsmodules.io/&quot;&gt;자바 스크립트 모듈&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="9c46ecfeeea61ed97d436272e76ad26d93eeba50" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;ES2015 syntax&lt;/strong&gt; - Ember CLI comes with Babel.js by default so you can take advantage of newer language features such as arrow functions, template strings, destructuring, and more. You can check the &lt;a href=&quot;https://babeljs.io/docs/learn-es2015/&quot;&gt;Babel.js documentation&lt;/a&gt; or read &lt;a href=&quot;https://leanpub.com/understandinges6/read&quot;&gt;Understanding ECMAScript 6&lt;/a&gt; online.</source>
          <target state="translated">&lt;strong&gt;ES2015 구문-Ember&lt;/strong&gt; CLI는 기본적으로 Babel.js와 함께 제공되므로 화살표 기능, 템플릿 문자열, 구조 해제 등과 같은 최신 언어 기능을 활용할 수 있습니다. &lt;a href=&quot;https://babeljs.io/docs/learn-es2015/&quot;&gt;Babel.js 문서를&lt;/a&gt; 확인 하거나 온라인으로 &lt;a href=&quot;https://leanpub.com/understandinges6/read&quot;&gt;ECMAScript 6 이해를&lt;/a&gt; 읽을 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="6e63731329f86b9d2e6f2cc0fbbf551d8f0e1140" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;HTML, CSS, JavaScript&lt;/strong&gt; - the building blocks of web pages. You can find documentation of each of these technologies at the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web&quot;&gt;Mozilla Developer Network&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;HTML, CSS, JavaScript-&lt;/strong&gt; 웹 페이지의 빌딩 블록. 각 기술에 대한 문서는 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web&quot;&gt;Mozilla Developer Network&lt;/a&gt; 에서 찾을 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="52751513d2493dd0d64f888941864b8be8e5ce5a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Nested invocation&lt;/strong&gt; is another way to use a helper. Like inline helpers, nested helpers generate and return a single value. For example, this template only renders &lt;code&gt;&quot;zoooom&quot;&lt;/code&gt; if both &lt;code&gt;isFast&lt;/code&gt; and &lt;code&gt;isFueled&lt;/code&gt; are true:</source>
          <target state="translated">&lt;strong&gt;중첩 된 호출&lt;/strong&gt; 은 도우미를 사용하는 또 다른 방법입니다. 인라인 헬퍼와 마찬가지로 중첩 헬퍼는 단일 값을 생성하고 리턴합니다. 예를 들어,이 템플릿 은 &lt;code&gt;isFast&lt;/code&gt; 와 &lt;code&gt;isFueled&lt;/code&gt; 가 모두 true 인 경우 에만 &lt;code&gt;&quot;zoooom&quot;&lt;/code&gt; 을 렌더링 합니다.</target>
        </trans-unit>
        <trans-unit id="9c6706d4e671914b516408c09188cf03534b10db" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Promises&lt;/strong&gt; - the native way to deal with asynchrony in your JavaScript code. See the relevant &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise&quot;&gt;Mozilla Developer Network&lt;/a&gt; section.</source>
          <target state="translated">&lt;strong&gt;약속-JavaScript&lt;/strong&gt; 코드에서 비동기를 처리하는 기본 방법입니다. 관련 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise&quot;&gt;Mozilla 개발자 네트워크&lt;/a&gt; 섹션을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="e950934efea9cd4f355fb7ad4df86e0c64315506" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Required.&lt;/strong&gt; You must implement this method to apply this mixin.</source>
          <target state="translated">&lt;strong&gt;필수입니다. &lt;/strong&gt;이 믹스 인을 적용하려면이 메소드를 구현해야합니다.</target>
        </trans-unit>
        <trans-unit id="881babe651a21a62e7364b7b9cfa1794d6395225" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;When customizing a serializer it is important to grok what the customizations are. Please read the docs for the methods this mixin provides, in case you need to modify it to fit your specific needs.&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;시리얼 라이저를 커스터마이즈 할 때 커스터마이즈가 무엇인지 파악하는 것이 중요합니다. 특정 요구에 맞게 수정해야 할 경우를 대비하여이 믹스 인이 제공하는 방법에 대한 문서를 읽으십시오.&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="470600606588a32d9557241101058912ab50961d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;app&lt;/strong&gt;: This is where folders and files for models, components, routes, templates and styles are stored. The majority of your coding on an Ember project happens in this folder.</source>
          <target state="translated">&lt;strong&gt;app&lt;/strong&gt; : 모델, 구성 요소, 배관, 템플릿 및 스타일에 대한 폴더 및 파일이 저장됩니다. Ember 프로젝트에서 코딩의 대부분은이 폴더에서 발생합니다.</target>
        </trans-unit>
        <trans-unit id="8481c210d2bfd9e765791e4f4a3dd04bd9d6ec83" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;config&lt;/strong&gt;: The config directory contains the &lt;code&gt;environment.js&lt;/code&gt; where you can configure settings for your app.</source>
          <target state="translated">&lt;strong&gt;config&lt;/strong&gt; : config 디렉토리에는 앱 설정을 구성 할 수 있는 &lt;code&gt;environment.js&lt;/code&gt; 가 포함되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="3bbd1fe48c75d123d9b241aa7cf37249e8f60f3c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;ember-cli-build.js&lt;/strong&gt;: This file describes how Ember CLI should build our app.</source>
          <target state="translated">&lt;strong&gt;ember-cli-build.js&lt;/strong&gt; :이 파일은 Ember CLI가 앱을 빌드하는 방법을 설명합니다.</target>
        </trans-unit>
        <trans-unit id="14c6cdacb081a9f0a62d6e02a0564a76df9ce816" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;key&lt;/strong&gt;String the name of this relationship on the Model</source>
          <target state="translated">&lt;strong&gt;key&lt;/strong&gt; String 모델에서이 관계의 이름</target>
        </trans-unit>
        <trans-unit id="1fd7a0b34963fb6134b8ae17d1ecaed1cb1f794e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;kind&lt;/strong&gt;String &quot;hasMany&quot; or &quot;belongsTo&quot;</source>
          <target state="translated">&lt;strong&gt;종류&lt;/strong&gt; 문자열 &quot;hasMany&quot;또는 &quot;belongsTo&quot;</target>
        </trans-unit>
        <trans-unit id="df54a76dfc05f7feb93b9870ae131f74a3c72a4d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;node_modules / package.json&lt;/strong&gt;: This directory and file are from npm. npm is the package manager for Node.js. Ember is built with Node and uses a variety of Node.js modules for operation. The &lt;code&gt;package.json&lt;/code&gt; file maintains the list of current npm dependencies for the app. Any Ember CLI addons you install will also show up here. Packages listed in &lt;code&gt;package.json&lt;/code&gt; are installed in the node_modules directory.</source>
          <target state="translated">&lt;strong&gt;node_modules / package.json&lt;/strong&gt; :이 디렉토리와 파일은 npm에 있습니다. npm은 Node.js의 패키지 관리자입니다. Ember는 Node로 제작되었으며 다양한 Node.js 모듈을 사용하여 작동합니다. &lt;code&gt;package.json&lt;/code&gt; 의 파일은 응용 프로그램에 대한 현재의 고궁 박물원의 종속성 목록을 유지합니다. 설치 한 Ember CLI 애드온도 여기에 표시됩니다. &lt;code&gt;package.json&lt;/code&gt; 에 나열된 패키지 는 node_modules 디렉토리에 설치됩니다.</target>
        </trans-unit>
        <trans-unit id="efbedcbe9d2e3a12d8d8b0d88ed61054a887ebe9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;options&lt;/strong&gt;Object the original options hash passed when the relationship was declared</source>
          <target state="translated">&lt;strong&gt;options&lt;/strong&gt; 관계 선언시 전달 된 원래 옵션 해시를 거부합니다.</target>
        </trans-unit>
        <trans-unit id="6840a435ff71567b4b4a941b6847beb0ddb59330" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;parentType&lt;/strong&gt;DS.Model the type of the Model that owns this relationship</source>
          <target state="translated">&lt;strong&gt;parentType&lt;/strong&gt; DS.Model이 관계를 소유 한 모델의 유형</target>
        </trans-unit>
        <trans-unit id="7b360785b08f4c59c21ddaf3671eb93c0740f054" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;public&lt;/strong&gt;: This directory contains assets such as images and fonts.</source>
          <target state="translated">&lt;strong&gt;public&lt;/strong&gt; :이 디렉토리에는 이미지 및 글꼴과 같은 자산이 포함되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="2661328b5b44a9913111324f3cea23d911fa3e0a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;tests / testem.js&lt;/strong&gt;: Automated tests for our app go in the &lt;code&gt;tests&lt;/code&gt; folder, and Ember CLI's test runner &lt;strong&gt;testem&lt;/strong&gt; is configured in &lt;code&gt;testem.js&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;테스트 / testem.js&lt;/strong&gt; 다음에 우리의 응용 프로그램의 이동을위한 자동화 된 테스트 &lt;code&gt;tests&lt;/code&gt; 폴더, 그리고 엠버 CLI의 테스트 러너 &lt;strong&gt;testem이&lt;/strong&gt; 구성되어 &lt;code&gt;testem.js&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="fa2ab6088b7133c1145df75bf15fd8ea46566d39" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;type&lt;/strong&gt;String the type name of the related Model</source>
          <target state="translated">&lt;strong&gt;type&lt;/strong&gt; 문자열 관련 모델의 유형 이름</target>
        </trans-unit>
        <trans-unit id="4fb59e3a73663d5b9fc22e94c07aa74fe28020a1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;vendor&lt;/strong&gt;: This directory is where front-end dependencies (such as JavaScript or CSS) that are not managed by Bower go.</source>
          <target state="translated">&lt;strong&gt;vendor&lt;/strong&gt; :이 디렉토리는 Bower가 관리하지 않는 프론트 엔드 종속성 (예 : JavaScript 또는 CSS)이있는 곳입니다.</target>
        </trans-unit>
        <trans-unit id="5a104720fd47e5de4a82907b888ca895f1310a23" translate="yes" xml:space="preserve">
          <source>@each</source>
          <target state="translated">@each</target>
        </trans-unit>
        <trans-unit id="b63a5032a4f6d06544f05b54829328428a4671e6" translate="yes" xml:space="preserve">
          <source>@eachpublic</source>
          <target state="translated">@eachpublic</target>
        </trans-unit>
        <trans-unit id="6dcd4ce23d88e2ee9568ba546c007c63d9131c1b" translate="yes" xml:space="preserve">
          <source>A</source>
          <target state="translated">A</target>
        </trans-unit>
        <trans-unit id="dc93c37be1f7b5aeb90bd5062ef7ac95cab7a0d5" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;DS.AbortError&lt;/code&gt; is used by an adapter to signal that a request to the external API was aborted. For example, this can occur if the user navigates away from the current page after a request to the external API has been initiated but before a response has been received.</source>
          <target state="translated">&lt;code&gt;DS.AbortError&lt;/code&gt; 는 외부 API에 대한 요청이 중단되었다는 것을 신호로 어댑터에 의해 사용된다. 예를 들어, 외부 API에 대한 요청이 시작된 후 응답이 수신되기 전에 사용자가 현재 페이지를 벗어나 탐색하는 경우에 발생할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b480f5113d03af2cb8949938c6b4a9c2c5f36c44" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;DS.AdapterError&lt;/code&gt; is used by an adapter to signal that an error occurred during a request to an external API. It indicates a generic error, and subclasses are used to indicate specific error states. The following subclasses are provided:</source>
          <target state="translated">&lt;code&gt;DS.AdapterError&lt;/code&gt; 는 오류가 외부 API에 대한 요청시 발생했음을 알리기 위해 어댑터에 의해 사용된다. 일반적인 오류를 나타내며 하위 클래스는 특정 오류 상태를 나타내는 데 사용됩니다. 다음과 같은 서브 클래스가 제공됩니다.</target>
        </trans-unit>
        <trans-unit id="48d0b507fdfd4bea3540108d5aac765d760b6398" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;DS.ConflictError&lt;/code&gt; equates to a HTTP &lt;code&gt;409 Conflict&lt;/code&gt; response status. It is used by an adapter to indicate that the request could not be processed because of a conflict in the request. An example scenario would be when creating a record with a client generated id but that id is already known to the external API.</source>
          <target state="translated">&lt;code&gt;DS.ConflictError&lt;/code&gt; 는 HTTP를 총점 &lt;code&gt;409 Conflict&lt;/code&gt; 응답 상태. 어댑터는 요청 충돌로 인해 요청을 처리 할 수 ​​없음을 표시하기 위해 사용합니다. 클라이언트 생성 ID로 레코드를 작성하지만 해당 ID가 이미 외부 API에 알려진 경우의 시나리오가 있습니다.</target>
        </trans-unit>
        <trans-unit id="22e82437db6f702331073bf754017df1fe2a4dc3" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;DS.ForbiddenError&lt;/code&gt; equates to a HTTP &lt;code&gt;403 Forbidden&lt;/code&gt; response status. It is used by an adapter to signal that a request to the external API was valid but the server is refusing to respond to it. If authorization was provided and is valid, then the authenticated user does not have the necessary permissions for the request.</source>
          <target state="translated">&lt;code&gt;DS.ForbiddenError&lt;/code&gt; 는 HTTP를 총점 &lt;code&gt;403 Forbidden&lt;/code&gt; 응답 상태. 어댑터가 외부 API에 대한 요청이 유효하지만 서버가 이에 대한 응답을 거부하고 있음을 알리기 위해 사용합니다. 권한 부여가 제공되고 유효한 경우 인증 된 사용자에게는 요청에 필요한 권한이 없습니다.</target>
        </trans-unit>
        <trans-unit id="be67fdd797c0eb7f63b2a4e3626f22fb402351b0" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;DS.InvalidError&lt;/code&gt; is used by an adapter to signal the external API was unable to process a request because the content was not semantically correct or meaningful per the API. Usually this means a record failed some form of server side validation. When a promise from an adapter is rejected with a &lt;code&gt;DS.InvalidError&lt;/code&gt; the record will transition to the &lt;code&gt;invalid&lt;/code&gt; state and the errors will be set to the &lt;code&gt;errors&lt;/code&gt; property on the record.</source>
          <target state="translated">&lt;code&gt;DS.InvalidError&lt;/code&gt; 는 내용이 의미 론적으로 올바른 또는 API에 따라 의미가 없습니다 때문에 외부 API를 알리기 위해 어댑터가 요청을 처리 할 수 없습니다 사용됩니다. 일반적으로 이는 레코드가 서버 측 유효성 검증에 실패했음을 의미합니다. &lt;code&gt;DS.InvalidError&lt;/code&gt; 로 어댑터의 약속이 거부 되면 레코드가 &lt;code&gt;invalid&lt;/code&gt; 상태로 전환되고 오류가 레코드 의 &lt;code&gt;errors&lt;/code&gt; 특성으로 설정됩니다 .</target>
        </trans-unit>
        <trans-unit id="8cef967c37ad7234867dac1b8fc34dc617e9de59" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;DS.NotFoundError&lt;/code&gt; equates to a HTTP &lt;code&gt;404 Not Found&lt;/code&gt; response status. It is used by an adapter to signal that a request to the external API was rejected because the resource could not be found on the API.</source>
          <target state="translated">&lt;code&gt;DS.NotFoundError&lt;/code&gt; 는 HTTP를 총점 &lt;code&gt;404 Not Found&lt;/code&gt; 응답 상태. 어댑터에서 API에서 자원을 찾을 수 없어 외부 API에 대한 요청이 거부되었음을 알리는 데 사용합니다.</target>
        </trans-unit>
        <trans-unit id="9cf86b2e9084693ddc33e7078b13973eaf62d580" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;DS.ServerError&lt;/code&gt; equates to a HTTP &lt;code&gt;500 Internal Server Error&lt;/code&gt; response status. It is used by the adapter to indicate that a request has failed because of an error in the external API.</source>
          <target state="translated">&lt;code&gt;DS.ServerError&lt;/code&gt; 는 HTTP를 총점 &lt;code&gt;500 Internal Server Error&lt;/code&gt; 응답 상태. 어댑터는 외부 API의 오류로 인해 요청이 실패했음을 표시하기 위해 사용합니다.</target>
        </trans-unit>
        <trans-unit id="10dcb401dc6e95359c2a133a95b5c2c685bb25ce" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;DS.TimeoutError&lt;/code&gt; is used by an adapter to signal that a request to the external API has timed out. I.e. no response was received from the external API within an allowed time period.</source>
          <target state="translated">&lt;code&gt;DS.TimeoutError&lt;/code&gt; 는 외부 API에 대한 요구가 타임 아웃했음을 알리기 위해 어댑터에 의해 사용된다. 즉, 허용 된 시간 내에 외부 API로부터 응답을받지 못했습니다.</target>
        </trans-unit>
        <trans-unit id="7d7f67b6c2d390180b7b780e2376e0d612463234" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;DS.UnauthorizedError&lt;/code&gt; equates to a HTTP &lt;code&gt;401 Unauthorized&lt;/code&gt; response status. It is used by an adapter to signal that a request to the external API was rejected because authorization is required and has failed or has not yet been provided.</source>
          <target state="translated">&lt;code&gt;DS.UnauthorizedError&lt;/code&gt; 는 HTTP를 총점 &lt;code&gt;401 Unauthorized&lt;/code&gt; 응답 상태. 권한 부여가 필요하고 실패했거나 아직 제공되지 않아서 외부 API에 대한 요청이 거부되었음을 알리기 위해 어댑터가이를 사용합니다.</target>
        </trans-unit>
        <trans-unit id="5930d1bcd72b59f96480c5ab195a8bd1cff6b953" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;ManyArray&lt;/code&gt; is a &lt;code&gt;MutableArray&lt;/code&gt; that represents the contents of a has-many relationship.</source>
          <target state="translated">&lt;code&gt;ManyArray&lt;/code&gt; 는 A는 &lt;code&gt;MutableArray&lt;/code&gt; 갖는 다 관계의 내용을 나타낸다.</target>
        </trans-unit>
        <trans-unit id="d3e54ab3b27e58aa830c56ed18933ccea43ca083" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;PromiseArray&lt;/code&gt; is an object that acts like both an &lt;code&gt;Ember.Array&lt;/code&gt; and a promise. When the promise is resolved the resulting value will be set to the &lt;code&gt;PromiseArray&lt;/code&gt;'s &lt;code&gt;content&lt;/code&gt; property. This makes it easy to create data bindings with the &lt;code&gt;PromiseArray&lt;/code&gt; that will be updated when the promise resolves.</source>
          <target state="translated">&lt;code&gt;PromiseArray&lt;/code&gt; 는 모두 같은 역할을하는 객체입니다 &lt;code&gt;Ember.Array&lt;/code&gt; 와 약속. 약속이 해결되면 결과 값이 &lt;code&gt;PromiseArray&lt;/code&gt; 의 &lt;code&gt;content&lt;/code&gt; 속성 으로 설정됩니다 . 이를 통해 약속이 해결 될 때 업데이트 될 &lt;code&gt;PromiseArray&lt;/code&gt; 를 사용하여 데이터 바인딩을 쉽게 만들 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="0d19be6669052c929ac43d73e3cd38063b850ca8" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;PromiseObject&lt;/code&gt; is an object that acts like both an &lt;code&gt;Ember.Object&lt;/code&gt; and a promise. When the promise is resolved, then the resulting value will be set to the &lt;code&gt;PromiseObject&lt;/code&gt;'s &lt;code&gt;content&lt;/code&gt; property. This makes it easy to create data bindings with the &lt;code&gt;PromiseObject&lt;/code&gt; that will be updated when the promise resolves.</source>
          <target state="translated">&lt;code&gt;PromiseObject&lt;/code&gt; 는 모두 같은 역할을하는 객체입니다 &lt;code&gt;Ember.Object&lt;/code&gt; 와 약속. 약속이 해결되면 결과 값이 &lt;code&gt;PromiseObject&lt;/code&gt; 의 &lt;code&gt;content&lt;/code&gt; 속성 으로 설정됩니다 . 이를 통해 &lt;code&gt;PromiseObject&lt;/code&gt; 를 사용하여 약속이 해결 될 때 업데이트되는 데이터 바인딩을 쉽게 만들 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b8d7c0e2541a6f547442db488ca8e54fdd7b6a6b" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Route&lt;/code&gt; object that fetches the model used by that template.</source>
          <target state="translated">&lt;code&gt;Route&lt;/code&gt; 해당 템플릿에 의해 사용되는 모델을 가져 오는 객체입니다.</target>
        </trans-unit>
        <trans-unit id="9588efe0c39e2ffc672357010bf320a5487d6e55" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;contact&lt;/code&gt; route, with information on how to contact the company.</source>
          <target state="translated">회사에 연락하는 방법에 대한 정보가 있는 &lt;code&gt;contact&lt;/code&gt; 경로.</target>
        </trans-unit>
        <trans-unit id="a9050abb1ae594c1f1f0da538d55ea7a5103db87" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;rentals/index&lt;/code&gt; route that displays the rental page's general information, and also lists available rentals. The index nested route is shown by default when the user visits the &lt;code&gt;rentals&lt;/code&gt; URL.</source>
          <target state="translated">렌탈 페이지의 일반 정보를 표시하고 사용 가능한 렌탈을 나열 하는 &lt;code&gt;rentals/index&lt;/code&gt; 경로입니다. 사용자가 &lt;code&gt;rentals&lt;/code&gt; URL을 방문하면 인덱스 중첩 경로가 기본적으로 표시됩니다 .</target>
        </trans-unit>
        <trans-unit id="266676ab249e8dd99a7c2bba6678cb01bbffbe07" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;rentals/show&lt;/code&gt; route that still displays the rental page's general information, while also showing detailed information about a selected rental. The &lt;code&gt;show&lt;/code&gt; route will get substituted with the id of the rental being shown (for example &lt;code&gt;rentals/grand-old-mansion&lt;/code&gt;).</source>
          <target state="translated">대여 페이지의 일반 정보를 계속 표시하면서 선택한 대여에 대한 자세한 정보를 &lt;code&gt;rentals/show&lt;/code&gt; 하는 대여 / 쇼 경로. &lt;code&gt;show&lt;/code&gt; 경로 (예를 위해 도시 임대 존재의 ID로 치환 얻을 것이다 &lt;code&gt;rentals/grand-old-mansion&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="383e441262c8c5fbe48093166f54c371460609af" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;rentals&lt;/code&gt; route, where we will allow users to browse rental properties.</source>
          <target state="translated">사용자가 임대 속성을 탐색 할 수 있는 &lt;code&gt;rentals&lt;/code&gt; 경로입니다.</target>
        </trans-unit>
        <trans-unit id="67c9c63cc4aa645596774790c058c9a59c6f4f4a" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;target&lt;/code&gt; option can be provided to the helper to change which object will receive the method call. This option must be a path to an object, accessible in the current context:</source>
          <target state="translated">&lt;code&gt;target&lt;/code&gt; 옵션은 객체가 메서드 호출을 받게됩니다 변화에 도우미로 제공 될 수 있습니다. 이 옵션은 현재 컨텍스트에서 액세스 할 수있는 객체의 경로 여야합니다.</target>
        </trans-unit>
        <trans-unit id="130dc192c9096f24701a513b2a2c27a343bad925" translate="yes" xml:space="preserve">
          <source>A &lt;strong&gt;record&lt;/strong&gt; is an instance of a model that contains data loaded from a server. Your application can also create new records and save them back to the server.</source>
          <target state="translated">&lt;strong&gt;기록은&lt;/strong&gt; 서버에서로드 된 데이터가 포함 된 모델의 인스턴스입니다. 응용 프로그램은 새 레코드를 작성하여 서버에 다시 저장할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="876ccb109e961a4b09a85146113a95696e15e3a0" translate="yes" xml:space="preserve">
          <source>A BelongsToReference is a low level API that allows users and addon author to perform meta-operations on a belongs-to relationship.</source>
          <target state="translated">BelongsToReference는 사용자와 애드온 작성자가 소속 관계에서 메타 작업을 수행 할 수 있도록하는 저수준 API입니다.</target>
        </trans-unit>
        <trans-unit id="33bcbf1fa40871cef0ad8c28e7954bc4dc4fa0a8" translate="yes" xml:space="preserve">
          <source>A Contact Route</source>
          <target state="translated">연락 경로</target>
        </trans-unit>
        <trans-unit id="0a4e6fd668747ce7aeec451a94588f515bfd0824" translate="yes" xml:space="preserve">
          <source>A DOM Element, Document, or jQuery to use as context</source>
          <target state="translated">컨텍스트로 사용할 DOM 요소, 문서 또는 jQuery</target>
        </trans-unit>
        <trans-unit id="e0196e0a77e857a693a7c87aed43dc1ad6cb6d8d" translate="yes" xml:space="preserve">
          <source>A HasManyReference is a low level API that allows users and addon author to perform meta-operations on a has-many relationship.</source>
          <target state="translated">HasManyReference는 사용자와 애드온 작성자가 has-many 관계에서 메타 작업을 수행 할 수 있도록하는 저수준 API입니다.</target>
        </trans-unit>
        <trans-unit id="dc49bf05f59922fe942dc3948a9fcec444115457" translate="yes" xml:space="preserve">
          <source>A JSON representation of the object.</source>
          <target state="translated">객체의 JSON 표현.</target>
        </trans-unit>
        <trans-unit id="60fa463e99c3c03b377886df80f4e7bcb5cc5e3d" translate="yes" xml:space="preserve">
          <source>A JavaScript source file (&lt;code&gt;app/components/rental-listing.js&lt;/code&gt;) that defines how it will behave.</source>
          <target state="translated">동작 방식을 정의하는 JavaScript 소스 파일 ( &lt;code&gt;app/components/rental-listing.js&lt;/code&gt; )</target>
        </trans-unit>
        <trans-unit id="1c7bd2551c35b4d1aef2a15ba7dd5b8fa1898930" translate="yes" xml:space="preserve">
          <source>A Namespace is an object usually used to contain other objects or methods such as an application or framework. Create a namespace anytime you want to define one of these new containers.</source>
          <target state="translated">네임 스페이스는 일반적으로 응용 프로그램이나 프레임 워크와 같은 다른 개체 나 메서드를 포함하는 데 사용되는 개체입니다. 이러한 새 컨테이너 중 하나를 정의 할 때마다 네임 스페이스를 작성하십시오.</target>
        </trans-unit>
        <trans-unit id="ee5fdcd91d1afa37536b1d90788cbb67385724a5" translate="yes" xml:space="preserve">
          <source>A Note on Mobile Performance</source>
          <target state="translated">모바일 성능에 대한 참고 사항</target>
        </trans-unit>
        <trans-unit id="b1c5b38b8b094aa864efd71136414bf39accba33" translate="yes" xml:space="preserve">
          <source>A PromiseManyArray is a PromiseArray that also proxies certain method calls to the underlying manyArray. Right now we proxy:</source>
          <target state="translated">PromiseManyArray는 기본 manyArray에 대한 특정 메소드 호출을 프록시하는 PromiseArray입니다. 지금 우리는 프록시 :</target>
        </trans-unit>
        <trans-unit id="1624fc693be4f921262d9df0488c32380d02f7fa" translate="yes" xml:space="preserve">
          <source>A Rentals Route</source>
          <target state="translated">렌탈 루트</target>
        </trans-unit>
        <trans-unit id="719747ea16d59c2504369345f8ab69b7a5c5a51a" translate="yes" xml:space="preserve">
          <source>A Word on Promises...</source>
          <target state="translated">약속에 관한 말씀 ...</target>
        </trans-unit>
        <trans-unit id="fe7be7da2076011e394aa9ca0ac3951f9bcb6487" translate="yes" xml:space="preserve">
          <source>A `QueryParams` object for `{{link-to}}`</source>
          <target state="translated">`{{link-to}}`에 대한`QueryParams` 객체</target>
        </trans-unit>
        <trans-unit id="58cdbd4e4749375a003884d9f4eb272538b31a8e" translate="yes" xml:space="preserve">
          <source>A basic example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2783679ee9b5feef49fa9a1dc7330bcc282cae5f" translate="yes" xml:space="preserve">
          <source>A boolean. If falsy, the deprecation will be displayed.</source>
          <target state="translated">참이나 거짓. 거짓 인 경우 지원 중단이 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="4429b3200e4fae0b282b590256f1e6d3936cb9b1" translate="yes" xml:space="preserve">
          <source>A complete &lt;a href=&quot;https://qunitjs.com/&quot;&gt;QUnit&lt;/a&gt; test harness.</source>
          <target state="translated">완전한 &lt;a href=&quot;https://qunitjs.com/&quot;&gt;QUnit&lt;/a&gt; 테스트 하니스.</target>
        </trans-unit>
        <trans-unit id="408139e87592a3dc2244b1d85e4bacd8095b3285" translate="yes" xml:space="preserve">
          <source>A component consists of two parts:</source>
          <target state="translated">컴포넌트는 두 부분으로 구성됩니다.</target>
        </trans-unit>
        <trans-unit id="d2d3cc41142be1cc6e10ffbccff054f3ae945eb2" translate="yes" xml:space="preserve">
          <source>A component to display a map on each rental listing.</source>
          <target state="translated">각 임대 목록에지도를 표시하는 구성 요소입니다.</target>
        </trans-unit>
        <trans-unit id="add9482b9d424e511fa42bb4e768ec8fac92907d" translate="yes" xml:space="preserve">
          <source>A component will often not know what information a parent needs to process an action, and will just pass all the information it has. For example, our &lt;code&gt;user-profile&lt;/code&gt; component is going to notify its parent, &lt;code&gt;system-preferences-editor&lt;/code&gt;, that a user's account was deleted, and passes along with it the full user profile object.</source>
          <target state="translated">구성 요소는 종종 부모가 작업을 처리하는 데 필요한 정보를 알지 못하며 모든 정보를 전달합니다. 예를 들어, &lt;code&gt;user-profile&lt;/code&gt; 구성 요소는 부모 인 &lt;code&gt;system-preferences-editor&lt;/code&gt; 에게 사용자 계정이 삭제되었음을 알리고 전체 사용자 프로필 개체를 전달합니다.</target>
        </trans-unit>
        <trans-unit id="71286ede7d62eb4434708ac285eaba45858488f2" translate="yes" xml:space="preserve">
          <source>A component's &lt;a href=&quot;http://emberjs.com/api/classes/Ember.Component.html#method__&quot;&gt;&lt;code&gt;$()&lt;/code&gt;&lt;/a&gt; method allows you to access the component's DOM element by returning a JQuery element. For example, you can set an attribute using jQuery's &lt;code&gt;attr()&lt;/code&gt; method:</source>
          <target state="translated">컴포넌트의 &lt;a href=&quot;http://emberjs.com/api/classes/Ember.Component.html#method__&quot;&gt; &lt;code&gt;$()&lt;/code&gt; &lt;/a&gt; 메소드를 사용하면 JQuery 요소를 반환하여 컴포넌트의 DOM 요소에 액세스 할 수 있습니다. 예를 들어, jQuery의 &lt;code&gt;attr()&lt;/code&gt; 메소드를 사용하여 속성을 설정할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="4c763479bfbc76e7d7940ef300f676a3ddbd8a2c" translate="yes" xml:space="preserve">
          <source>A computed property that calculates the maximum value in the dependent array. This will return &lt;code&gt;-Infinity&lt;/code&gt; when the dependent array is empty.</source>
          <target state="translated">종속 배열의 최대 값을 계산하는 계산 된 속성입니다. 종속 배열이 비어 있으면 &lt;code&gt;-Infinity&lt;/code&gt; 를 리턴 합니다.</target>
        </trans-unit>
        <trans-unit id="afccd490e5f901b8a36308f4997ce0f6e3f7597b" translate="yes" xml:space="preserve">
          <source>A computed property that calculates the minimum value in the dependent array. This will return &lt;code&gt;Infinity&lt;/code&gt; when the dependent array is empty.</source>
          <target state="translated">종속 배열의 최소값을 계산하는 계산 된 속성입니다. 종속 배열이 비어 있으면 &lt;code&gt;Infinity&lt;/code&gt; 를 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="9974b4654e469b8db57a1fcbec50896d455ccac1" translate="yes" xml:space="preserve">
          <source>A computed property that converts the provided dependent property into a boolean value.</source>
          <target state="translated">제공된 종속 속성을 부울 값으로 변환하는 계산 된 속성입니다.</target>
        </trans-unit>
        <trans-unit id="fd8c6f196c803ddc9c26e77339d13d81362adfa6" translate="yes" xml:space="preserve">
          <source>A computed property that performs a logical &lt;code&gt;and&lt;/code&gt; on the original values for the provided dependent properties.</source>
          <target state="translated">제공된 종속 특성 의 논리 값 &lt;code&gt;and&lt;/code&gt; 원래 값을 수행하는 계산 된 특성입니다 .</target>
        </trans-unit>
        <trans-unit id="945b3b8ed6c6878bf7cc23d303cb20832f65993c" translate="yes" xml:space="preserve">
          <source>A computed property that returns the array of values for the provided dependent properties.</source>
          <target state="translated">제공된 종속 속성의 값 배열을 반환하는 계산 된 속성입니다.</target>
        </trans-unit>
        <trans-unit id="d0b6149975025bb8da048400ba0227d90a7df300" translate="yes" xml:space="preserve">
          <source>A computed property that returns the inverse boolean value of the original value for the dependent property.</source>
          <target state="translated">종속 속성에 대한 원래 값의 역 부울 값을 반환하는 계산 속성입니다.</target>
        </trans-unit>
        <trans-unit id="7a4c3da6b9a0ff1602bbda04536c0e6dce3f9392" translate="yes" xml:space="preserve">
          <source>A computed property that returns the sum of the values in the dependent array.</source>
          <target state="translated">종속 배열의 값 합계를 반환하는 계산 된 속성입니다.</target>
        </trans-unit>
        <trans-unit id="0259bcabf1fff133ec03f302136afb061587a1e8" translate="yes" xml:space="preserve">
          <source>A computed property that returns true if the provided dependent property is equal to the given value.</source>
          <target state="translated">제공된 종속 속성이 지정된 값과 같으면 true를 반환하는 계산 된 속성입니다.</target>
        </trans-unit>
        <trans-unit id="43791b5f383cb17dd17a48ea10639cb5fbcf38fa" translate="yes" xml:space="preserve">
          <source>A computed property that returns true if the provided dependent property is greater than or equal to the provided value.</source>
          <target state="translated">제공된 종속 속성이 제공된 값보다 크거나 같으면 true를 반환하는 계산 된 속성입니다.</target>
        </trans-unit>
        <trans-unit id="44459f27f904760e8a8a159ca0cff425ac024805" translate="yes" xml:space="preserve">
          <source>A computed property that returns true if the provided dependent property is greater than the provided value.</source>
          <target state="translated">제공된 종속 속성이 제공된 값보다 큰 경우 true를 반환하는 계산 된 속성입니다.</target>
        </trans-unit>
        <trans-unit id="833a09f6f4b8923a267d472a1a55b997f80954c1" translate="yes" xml:space="preserve">
          <source>A computed property that returns true if the provided dependent property is less than or equal to the provided value.</source>
          <target state="translated">제공된 종속 속성이 제공된 값보다 작거나 같으면 true를 반환하는 계산 된 속성입니다.</target>
        </trans-unit>
        <trans-unit id="5dbdded579e19770a07ba120d2a79f594c5bbcb1" translate="yes" xml:space="preserve">
          <source>A computed property that returns true if the provided dependent property is less than the provided value.</source>
          <target state="translated">제공된 종속 속성이 제공된 값보다 작은 경우 true를 반환하는 계산 된 속성입니다.</target>
        </trans-unit>
        <trans-unit id="2fd2d52f530113373926a1bd4c1cfc461521a921" translate="yes" xml:space="preserve">
          <source>A computed property that returns true if the value of the dependent property is NOT null, an empty string, empty array, or empty function.</source>
          <target state="translated">종속 속성 값이 NOT null, 빈 문자열, 빈 배열 또는 빈 함수 인 경우 true를 반환하는 계산 된 속성입니다.</target>
        </trans-unit>
        <trans-unit id="1809faaeee90bdd62f88903099dc08048f92510f" translate="yes" xml:space="preserve">
          <source>A computed property that returns true if the value of the dependent property is null or undefined. This avoids errors from JSLint complaining about use of ==, which can be technically confusing.</source>
          <target state="translated">종속 속성 값이 null이거나 정의되지 않은 경우 true를 반환하는 계산 속성입니다. 이것은 JSLint에서 == 사용에 대해 불평하는 오류를 피하는데, 이는 기술적으로 혼란 스러울 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="06706f50e47c13c840dc77e9fe586ddf67f4d763" translate="yes" xml:space="preserve">
          <source>A computed property that returns true if the value of the dependent property is null, an empty string, empty array, or empty function.</source>
          <target state="translated">종속 속성 값이 null, 빈 문자열, 빈 배열 또는 빈 함수 인 경우 true를 반환하는 계산 된 속성입니다.</target>
        </trans-unit>
        <trans-unit id="bfba4061445759538ca93b92b23b86ab9bc4e76a" translate="yes" xml:space="preserve">
          <source>A computed property transforms an object literal with object's accessor function(s) into a property.</source>
          <target state="translated">계산 된 속성은 객체의 접근 자 함수가있는 객체 리터럴을 속성으로 변환합니다.</target>
        </trans-unit>
        <trans-unit id="fd867b71051d6985840f7332a75c1cfaabd25b0a" translate="yes" xml:space="preserve">
          <source>A computed property which matches the original value for the dependent property against a given RegExp, returning &lt;code&gt;true&lt;/code&gt; if the value matches the RegExp and &lt;code&gt;false&lt;/code&gt; if it does not.</source>
          <target state="translated">주어진 RegExp에 대한 종속 속성의 원래 값과 일치하는 계산 된 속성으로 , 값이 RegExp와 일치하면 &lt;code&gt;true&lt;/code&gt; 를 반환하고 그렇지 않으면 &lt;code&gt;false&lt;/code&gt; 를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="34473f32afac3e5624fa4d2072d2b42e8c3a6d02" translate="yes" xml:space="preserve">
          <source>A computed property which performs a logical &lt;code&gt;or&lt;/code&gt; on the original values for the provided dependent properties.</source>
          <target state="translated">제공된 종속 속성에 대해 논리적 &lt;code&gt;or&lt;/code&gt; 원래 값을 수행하는 계산 된 속성입니다 .</target>
        </trans-unit>
        <trans-unit id="b1f7277073dcf905d770a71a52bba7d2664f93f5" translate="yes" xml:space="preserve">
          <source>A computed property which returns a new array with all the elements two or more dependent arrays have in common.</source>
          <target state="translated">두 개 이상의 종속 배열이 공통으로 갖는 모든 요소가 포함 된 새 배열을 반환하는 계산 된 속성입니다.</target>
        </trans-unit>
        <trans-unit id="04f70fc8fd22a538518b37ff920f6cc48d385c51" translate="yes" xml:space="preserve">
          <source>A computed property which returns a new array with all the properties from the first dependent array sorted based on a property or sort function.</source>
          <target state="translated">속성 또는 정렬 함수를 기준으로 정렬 된 첫 번째 종속 배열의 모든 속성이 포함 된 새 배열을 반환하는 계산 된 속성입니다.</target>
        </trans-unit>
        <trans-unit id="d514e6791f78a7ee6387baf89be943feeb58920b" translate="yes" xml:space="preserve">
          <source>A computed property which returns a new array with all the properties from the first dependent array that are not in the second dependent array.</source>
          <target state="translated">두 번째 종속 배열에없는 첫 번째 종속 배열의 모든 특성이있는 새 배열을 리턴하는 계산 된 특성입니다.</target>
        </trans-unit>
        <trans-unit id="9ae49a81f1b7b136ef1c3f3879fc002266d05133" translate="yes" xml:space="preserve">
          <source>A computed property which returns a new array with all the unique elements from an array, with uniqueness determined by specific key.</source>
          <target state="translated">특정 키에 의해 결정된 고유성을 가진 배열의 모든 고유 요소가 포함 된 새 배열을 반환하는 계산 된 속성입니다.</target>
        </trans-unit>
        <trans-unit id="a491d7db177839d7b7b347173e49e99aae9fafae" translate="yes" xml:space="preserve">
          <source>A computed property which returns a new array with all the unique elements from one or more dependent arrays.</source>
          <target state="translated">하나 이상의 종속 배열에서 모든 고유 한 요소가 포함 된 새 배열을 반환하는 계산 된 속성입니다.</target>
        </trans-unit>
        <trans-unit id="e03280469acba4765062b9db611d7f54939166e1" translate="yes" xml:space="preserve">
          <source>A conventional project layout, making existing Ember applications easy to approach.</source>
          <target state="translated">기존의 프로젝트 레이아웃으로 기존 Ember 애플리케이션에 쉽게 접근 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="131025c2bde366d3f442178cd7e3ea45867ac44b" translate="yes" xml:space="preserve">
          <source>A custom serializer will also need to define a &lt;a href=&quot;http://emberjs.com/api/data/classes/DS.Serializer.html#method_normalize&quot;&gt;normalize&lt;/a&gt; method. This method is called by &lt;code&gt;store.normalize(type, payload)&lt;/code&gt; and is often used for normalizing requests made outside of Ember Data because they do not fall into the normal CRUD flow that the adapter provides.</source>
          <target state="translated">사용자 정의 시리얼 라이저는 또한 &lt;a href=&quot;http://emberjs.com/api/data/classes/DS.Serializer.html#method_normalize&quot;&gt;정규화&lt;/a&gt; 방법 을 정의해야합니다 . 이 메소드는 &lt;code&gt;store.normalize(type, payload)&lt;/code&gt; 의해 호출되며 어댑터가 제공하는 일반 CRUD 플로우에 포함되지 않으므로 Ember Data 외부에서 작성된 요청을 정규화하는 데 자주 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="965f0eae3b6dbd1496b2dd524354b0b41151afae" translate="yes" xml:space="preserve">
          <source>A debug message to display.</source>
          <target state="translated">표시 할 디버그 메시지입니다.</target>
        </trans-unit>
        <trans-unit id="39f7b0f3c0a437ac794c87fc0c76129e28e5f4d6" translate="yes" xml:space="preserve">
          <source>A description of the assertion. This will become the text of the Error thrown if the assertion fails.</source>
          <target state="translated">주장에 대한 설명. 어설 션이 실패하면 오류 텍스트가됩니다.</target>
        </trans-unit>
        <trans-unit id="0f6dbf6476ba31036654b5f4ca962c84db32b964" translate="yes" xml:space="preserve">
          <source>A description of the deprecation.</source>
          <target state="translated">지원 중단에 대한 설명입니다.</target>
        </trans-unit>
        <trans-unit id="1837e75640fb82328a65573e9d0ce100611583e4" translate="yes" xml:space="preserve">
          <source>A development server.</source>
          <target state="translated">개발 서버.</target>
        </trans-unit>
        <trans-unit id="5a8e30bda1a4f84944f370b4cb01736e9bdb1809" translate="yes" xml:space="preserve">
          <source>A dynamic segment is a portion of a URL that starts with a &lt;code&gt;:&lt;/code&gt; and is followed by an identifier.</source>
          <target state="translated">동적 세그먼트는 &lt;code&gt;:&lt;/code&gt; 로 시작하고 뒤에 식별자가 오는 URL의 일부입니다 .</target>
        </trans-unit>
        <trans-unit id="69b27e633e9aff3b70d00dcb2578883f3a25b095" translate="yes" xml:space="preserve">
          <source>A factory can represent any part of your application, like a &lt;em&gt;route&lt;/em&gt;, &lt;em&gt;template&lt;/em&gt;, or custom class. Every factory is registered with a particular key. For example, the index template is registered with the key &lt;code&gt;template:index&lt;/code&gt;, and the application route is registered with the key &lt;code&gt;route:application&lt;/code&gt;.</source>
          <target state="translated">팩토리는 &lt;em&gt;route&lt;/em&gt; , &lt;em&gt;template&lt;/em&gt; 또는 custom 클래스 와 같이 애플리케이션의 모든 부분을 나타낼 수 있습니다 . 모든 팩토리는 특정 키로 등록됩니다. 예를 들어, 인덱스 템플릿은 key &lt;code&gt;template:index&lt;/code&gt; 에 등록되고 응용 프로그램 경로는 &lt;code&gt;route:application&lt;/code&gt; 키에 등록됩니다 .</target>
        </trans-unit>
        <trans-unit id="777a6c4f022e5b47c8f56cfb49c2647d252ae153" translate="yes" xml:space="preserve">
          <source>A feature can have one of a three flags:</source>
          <target state="translated">기능은 세 가지 플래그 중 하나를 가질 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="4395ec9193a1fb8614031a07974b0dbad33102b4" translate="yes" xml:space="preserve">
          <source>A few of things to note in this simple test:</source>
          <target state="translated">이 간단한 테스트에서 유의해야 할 사항은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="e5e53ecd6c75835250a1d932992921cd834b98ff" translate="yes" xml:space="preserve">
          <source>A filtered array.</source>
          <target state="translated">필터링 된 배열입니다.</target>
        </trans-unit>
        <trans-unit id="c09238b0f4cf63a731d526d78fb6ced46c4f1d50" translate="yes" xml:space="preserve">
          <source>A flag whether a function should only be called once</source>
          <target state="translated">함수가 한 번만 호출되어야하는지 여부에 대한 플래그</target>
        </trans-unit>
        <trans-unit id="ac5049c57055d0ded9b551e91917eb661bb1d992" translate="yes" xml:space="preserve">
          <source>A fullname attribute is computed which combines the &lt;code&gt;firstName&lt;/code&gt; and &lt;code&gt;lastName&lt;/code&gt; attributes.</source>
          <target state="translated">&lt;code&gt;firstName&lt;/code&gt; 및 &lt;code&gt;lastName&lt;/code&gt; 속성 을 결합하는 전체 이름 속성이 계산됩니다 .</target>
        </trans-unit>
        <trans-unit id="d39970261feb2edc9d7f8f08ee054bbf461369df" translate="yes" xml:space="preserve">
          <source>A function may be assigned to &lt;code&gt;Ember.onerror&lt;/code&gt; to be called when Ember internals encounter an error. This is useful for specialized error handling and reporting code.</source>
          <target state="translated">Ember 내부에 오류가 발생했을 때 호출 되도록 &lt;code&gt;Ember.onerror&lt;/code&gt; 에 함수를 할당 할 수 있습니다 . 특수 오류 처리 및보고 코드에 유용합니다.</target>
        </trans-unit>
        <trans-unit id="11ca89654a12a432d4643c385fb7f15885d79579" translate="yes" xml:space="preserve">
          <source>A function or the name of a function to be called on `target`</source>
          <target state="translated">`target`에서 호출 할 함수 또는 함수 이름</target>
        </trans-unit>
        <trans-unit id="8d3d5bdef706170c1b43cf8ceb032823792398a5" translate="yes" xml:space="preserve">
          <source>A function to handle deprecation calls.</source>
          <target state="translated">지원 중단 통화를 처리하는 기능입니다.</target>
        </trans-unit>
        <trans-unit id="fc0569c63add1c0c2e9141312a0d1a21e3605cd4" translate="yes" xml:space="preserve">
          <source>A function to handle warnings.</source>
          <target state="translated">경고를 처리하는 기능입니다.</target>
        </trans-unit>
        <trans-unit id="772e9928418182b0dcd98ed018442a809993c477" translate="yes" xml:space="preserve">
          <source>A good example is preventing navigation when a form is half-filled out:</source>
          <target state="translated">좋은 예는 양식이 반쯤 채워 졌을 때 탐색을 방지하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="f0f874a612d4e0dc43e458950caf8d91e56e8ac2" translate="yes" xml:space="preserve">
          <source>A handy shortcut for this is to use a &quot;spread operator&quot;, like &lt;code&gt;...arguments&lt;/code&gt;:</source>
          <target state="translated">이를위한 편리한 지름길은 &lt;code&gt;...arguments&lt;/code&gt; 와 같은 &quot;spread operator&quot;를 사용하는 것입니다 .</target>
        </trans-unit>
        <trans-unit id="2bc58c2ebbcac31ed3b573d8eb9a7356a8b07577" translate="yes" xml:space="preserve">
          <source>A hash containing lists of the model's relationships, grouped by the relationship kind. For example, given a model with this definition:</source>
          <target state="translated">관계 종류별로 그룹화 된 모델 관계 목록이 포함 된 해시. 예를 들어 다음과 같은 정의가있는 모델이 있습니다.</target>
        </trans-unit>
        <trans-unit id="002cbcf56bee0a507c862ecd66564cde14d0ae7d" translate="yes" xml:space="preserve">
          <source>A hook you can implement to convert the URL into the model for this route.</source>
          <target state="translated">URL을이 경로의 모델로 변환하기 위해 구현할 수있는 후크입니다.</target>
        </trans-unit>
        <trans-unit id="e523ddb9cb0077f0e7e9efea1c6ca53b0e4f74df" translate="yes" xml:space="preserve">
          <source>A hook you can implement to convert the route's model into parameters for the URL.</source>
          <target state="translated">경로 모델을 URL 매개 변수로 변환하기 위해 구현할 수있는 후크입니다.</target>
        </trans-unit>
        <trans-unit id="c79ab8868a30ae091433886b3b9b677dbdb3c517" translate="yes" xml:space="preserve">
          <source>A hook you can implement to optionally redirect to another route.</source>
          <target state="translated">선택적으로 다른 경로로 리디렉션하도록 구현할 수있는 후크.</target>
        </trans-unit>
        <trans-unit id="c821816d4745b2e732eb4a319568f5a0e3771e9e" translate="yes" xml:space="preserve">
          <source>A hook you can use to render the template for the current route.</source>
          <target state="translated">현재 경로의 템플릿을 렌더링하는 데 사용할 수있는 후크입니다.</target>
        </trans-unit>
        <trans-unit id="b7d35522f785d5d2f17eb10043e9b0e22702615b" translate="yes" xml:space="preserve">
          <source>A hook you can use to reset controller values either when the model changes or the route is exiting.</source>
          <target state="translated">모델이 변경되거나 경로가 종료 될 때 컨트롤러 값을 재설정하는 데 사용할 수있는 후크입니다.</target>
        </trans-unit>
        <trans-unit id="09ba4354b8baac4169d50a77d1cac438e656e83b" translate="yes" xml:space="preserve">
          <source>A hook you can use to setup the controller for the current route.</source>
          <target state="translated">현재 경로에 대한 컨트롤러를 설정하는 데 사용할 수있는 후크입니다.</target>
        </trans-unit>
        <trans-unit id="ee079a76318bbe3fd0ae4177e7a0fc30647a2f50" translate="yes" xml:space="preserve">
          <source>A link will be active if &lt;code&gt;current-when&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt; or the current route is the route this link would transition to.</source>
          <target state="translated">&lt;code&gt;current-when&lt;/code&gt; 이 &lt;code&gt;true&lt;/code&gt; 이거나 현재 경로가이 링크가 전환되는 경로 인 경우 링크가 활성화됩니다 .</target>
        </trans-unit>
        <trans-unit id="0e649bc595abbffa19a4461f93d3e6cdb54a49bc" translate="yes" xml:space="preserve">
          <source>A list of boot-time configuration options for customizing the behavior of an &lt;code&gt;Ember.ApplicationInstance&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Ember.ApplicationInstance&lt;/code&gt; 의 동작을 사용자 정의하기위한 부팅 시간 구성 옵션 목록 .</target>
        </trans-unit>
        <trans-unit id="b430585ba8f0f6e9d04f0dc1006753364e999c54" translate="yes" xml:space="preserve">
          <source>A list of properties of the view to apply as attributes. If the property is a string value, the value of that string will be applied as the value for an attribute of the property's name.</source>
          <target state="translated">속성으로 적용 할보기의 속성 목록입니다. 속성이 문자열 값이면 해당 문자열의 값이 속성 이름의 속성 값으로 적용됩니다.</target>
        </trans-unit>
        <trans-unit id="e52f350b6064cc52433762ffe29ca02248ba6cb9" translate="yes" xml:space="preserve">
          <source>A list of properties of the view to apply as class names. If the property is a string value, the value of that string will be applied as a class name.</source>
          <target state="translated">클래스 이름으로 적용 할 뷰의 속성 목록입니다. 속성이 문자열 값이면 해당 문자열의 값이 클래스 이름으로 적용됩니다.</target>
        </trans-unit>
        <trans-unit id="735c8c616470156006424a3f6186395cc8775efd" translate="yes" xml:space="preserve">
          <source>A low level mixin making ObjectProxy promise-aware.</source>
          <target state="translated">ObjectProxy를 약속하는 저수준의 믹스 인.</target>
        </trans-unit>
        <trans-unit id="1067f525a37aaeec1e9620550374097824a883ec" translate="yes" xml:space="preserve">
          <source>A map whose keys are the attributes of the model (properties described by DS.attr) and whose values are the meta object for the property.</source>
          <target state="translated">키가 모델의 속성 (DS.attr에 의해 설명 된 특성)이고 값이 특성의 메타 오브젝트 인 맵.</target>
        </trans-unit>
        <trans-unit id="d84b89baf6ba3181355eed803540fe64dfc2f91f" translate="yes" xml:space="preserve">
          <source>A map whose keys are the attributes of the model (properties described by DS.attr) and whose values are type of transformation applied to each attribute. This map does not include any attributes that do not have an transformation type.</source>
          <target state="translated">키가 모델의 속성이고 (DS.attr에서 설명하는 속성) 값이 각 속성에 적용되는 변환 유형 인 맵입니다. 이 맵에는 변환 유형이없는 속성이 포함되어 있지 않습니다.</target>
        </trans-unit>
        <trans-unit id="cc8aa238af5d9e1a69672acd9e86581953ac5d26" translate="yes" xml:space="preserve">
          <source>A map whose keys are the fields of the model and whose values are strings describing the kind of the field. A model's fields are the union of all of its attributes and relationships.</source>
          <target state="translated">키가 모델의 필드이고 값이 필드의 종류를 설명하는 문자열 인 맵. 모델의 필드는 모든 속성과 관계의 결합입니다.</target>
        </trans-unit>
        <trans-unit id="b84a1b3938a51ee6595167fbc1b64d1c26d0eb97" translate="yes" xml:space="preserve">
          <source>A map whose keys are the relationships of a model and whose values are relationship descriptors.</source>
          <target state="translated">키가 모델의 관계이고 값이 관계 설명자인 맵.</target>
        </trans-unit>
        <trans-unit id="5c749d8d38dbb6efe5efc0f01db27302cb7dec7f" translate="yes" xml:space="preserve">
          <source>A model also describes its relationships with other objects. For example, an &lt;code&gt;order&lt;/code&gt; may have many &lt;code&gt;line-items&lt;/code&gt;, and a &lt;code&gt;line-item&lt;/code&gt; may belong to a particular &lt;code&gt;order&lt;/code&gt;.</source>
          <target state="translated">모델은 다른 개체와의 관계도 설명합니다. 예를 들어, &lt;code&gt;order&lt;/code&gt; 에는 많은 &lt;code&gt;line-items&lt;/code&gt; &lt;code&gt;line-item&lt;/code&gt; 있을 수 있으며 라인 품목 은 특정 &lt;code&gt;order&lt;/code&gt; 속할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="f4f874113ec32c7d5b7fafdaa6e0741a1c0923cd" translate="yes" xml:space="preserve">
          <source>A model context does not include a primitive string or number, which does cause the model hook to be called.</source>
          <target state="translated">모델 컨텍스트에는 기본 문자열 또는 숫자가 포함되지 않으므로 모델 후크가 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="37871220571a57fe035f4bab6084f491f85da8be" translate="yes" xml:space="preserve">
          <source>A model is a class that defines the properties and behavior of the data that you present to the user. Anything that the user expects to see if they leave your app and come back later (or if they refresh the page) should be represented by a model.</source>
          <target state="translated">모델은 사용자에게 제공하는 데이터의 속성과 동작을 정의하는 클래스입니다. 사용자가 앱을 떠났다가 나중에 다시 방문하거나 페이지를 새로 고칠 경우 사용자가 기대하는 것은 모델로 표시해야합니다.</target>
        </trans-unit>
        <trans-unit id="c1a07c2973ef7c81f865a5219b3d0bdb813af4e8" translate="yes" xml:space="preserve">
          <source>A model typically persists information to a web server, although models can be configured to save to anywhere else, such as the browser's Local Storage.</source>
          <target state="translated">모델은 브라우저의 로컬 스토리지와 같은 다른 곳에 저장하도록 모델을 구성 할 수 있지만 일반적으로 웹 서버에 정보를 유지합니다.</target>
        </trans-unit>
        <trans-unit id="f35406968e2a350aa9010aed9c3e6268ad14047e" translate="yes" xml:space="preserve">
          <source>A nested route name includes the names of its ancestors. If you want to transition to a route (either via &lt;code&gt;transitionTo&lt;/code&gt; or &lt;code&gt;{{#link-to}}&lt;/code&gt;), make sure to use the full route name (&lt;code&gt;posts.new&lt;/code&gt;, not &lt;code&gt;new&lt;/code&gt;).</source>
          <target state="translated">중첩 된 경로 이름에는 조상의 이름이 포함됩니다. 당신이 경로로 전환하려면 (중 하나를 통해 &lt;code&gt;transitionTo&lt;/code&gt; 또는 &lt;code&gt;{{#link-to}}&lt;/code&gt; ), 전체 경로 이름 (사용할 수 있는지 확인 &lt;code&gt;posts.new&lt;/code&gt; 이 아닌 &lt;code&gt;new&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="616c4cf0d50a10888409b3e924452935f2743bdd" translate="yes" xml:space="preserve">
          <source>A nested router like this:</source>
          <target state="translated">다음과 같은 중첩 라우터 :</target>
        </trans-unit>
        <trans-unit id="690c6d22d7fe0f6b900233bca2ce30f9306667f4" translate="yes" xml:space="preserve">
          <source>A new project will be created inside your current directory. You can now go to your &lt;code&gt;super-rentals&lt;/code&gt; project directory and start working on it.</source>
          <target state="translated">현재 디렉토리 안에 새로운 프로젝트가 생성됩니다. 이제 &lt;code&gt;super-rentals&lt;/code&gt; 프로젝트 디렉토리 로 이동하여 작업을 시작할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f1b98522c77a33eec52a4f899428271445b931ef" translate="yes" xml:space="preserve">
          <source>A newly-flagged feature is only available in canary builds and can be enabled at runtime through your project's configuration file.</source>
          <target state="translated">새로 플래 깅 된 기능은 카나리아 빌드에서만 사용할 수 있으며 프로젝트 구성 파일을 통해 런타임에 활성화 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="69067fafebff49c361b07bcca3e6380a630f46ce" translate="yes" xml:space="preserve">
          <source>A one-way binding only propagates changes in one direction, using &lt;a href=&quot;http://emberjs.com/api/classes/Ember.computed.html#method_oneWay&quot;&gt;&lt;code&gt;computed.oneWay()&lt;/code&gt;&lt;/a&gt;. Often, one-way bindings are a performance optimization and you can safely use a two-way binding (which are de facto one-way bindings if you only ever change one side). Sometimes one-way bindings are useful to achieve specific behaviour such as a default that is the same as another property but can be overridden (e.g. a shipping address that starts the same as a billing address but can later be changed)</source>
          <target state="translated">단방향 바인딩은 &lt;a href=&quot;http://emberjs.com/api/classes/Ember.computed.html#method_oneWay&quot;&gt; &lt;code&gt;computed.oneWay()&lt;/code&gt; &lt;/a&gt; 사용하여 한 방향으로 만 변경 사항을 전파 합니다. 단방향 바인딩은 종종 성능 최적화이며 양방향 바인딩 (실제로 한쪽 만 변경하는 경우 실제로는 단방향 바인딩)을 안전하게 사용할 수 있습니다. 단방향 바인딩은 다른 속성과 동일하지만 재정의 될 수있는 기본값 (예 : 청구서 수신 주소와 동일하지만 나중에 변경 될 수있는 운송 주소)과 같은 특정 동작을 달성하는 데 유용합니다.</target>
        </trans-unit>
        <trans-unit id="3b0f3e16a598d49e410a51000efb66784c1b64b7" translate="yes" xml:space="preserve">
          <source>A payload with an attr configured for embedded records needs to be extracted:</source>
          <target state="translated">임베디드 레코드에 대해 구성된 속성이있는 페이로드를 추출해야합니다.</target>
        </trans-unit>
        <trans-unit id="754b7ce544d748dc371ba0357de8219729b68a15" translate="yes" xml:space="preserve">
          <source>A payload with an attribute configured for embedded records can serialize the records together under the root attribute's payload:</source>
          <target state="translated">임베드 된 레코드에 대해 속성이 구성된 페이로드는 루트 속성의 페이로드에서 레코드를 함께 직렬화 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="7e0ae96f3c9091427eb9feb731cecfd8d355b870" translate="yes" xml:space="preserve">
          <source>A promise can be in one of three states: pending, fulfilled, or rejected.</source>
          <target state="translated">약속은 보류 중, 완료 또는 거부 된 상태 중 하나 일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="24e22e61d207f240f5044b1681adf8be22829d85" translate="yes" xml:space="preserve">
          <source>A promise that resolves with the new value in this belongs-to relationship.</source>
          <target state="translated">이 소속 관계에서 새로운 가치로 해결되는 약속.</target>
        </trans-unit>
        <trans-unit id="03249110696adf7d9fce18f021bbef08ff6080e2" translate="yes" xml:space="preserve">
          <source>A promise that will never resolve</source>
          <target state="translated">결코 해결되지 않을 약속</target>
        </trans-unit>
        <trans-unit id="5a4be102aa0858e349eb66775a64bb7344eb05fe" translate="yes" xml:space="preserve">
          <source>A record array is an array that contains records of a certain modelName. The record array materializes records as needed when they are retrieved for the first time. You should not create record arrays yourself. Instead, an instance of &lt;code&gt;DS.RecordArray&lt;/code&gt; or its subclasses will be returned by your application's store in response to queries.</source>
          <target state="translated">레코드 배열은 특정 modelName의 레코드를 포함하는 배열입니다. 레코드 배열은 처음 검색 할 때 필요에 따라 레코드를 구체화합니다. 레코드 배열을 직접 만들면 안됩니다. 대신 쿼리에 대한 응답으로 &lt;code&gt;DS.RecordArray&lt;/code&gt; 인스턴스 또는 해당 서브 클래스가 응용 프로그램 저장소에서 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="bb6710d1a1b95fb46edef7d88de3b44dc9a78763" translate="yes" xml:space="preserve">
          <source>A record is uniquely identified by its model &lt;strong&gt;type&lt;/strong&gt; and &lt;strong&gt;ID&lt;/strong&gt;.</source>
          <target state="translated">레코드는 모델 &lt;strong&gt;유형&lt;/strong&gt; 및 &lt;strong&gt;ID&lt;/strong&gt; 로 고유하게 식별됩니다 .</target>
        </trans-unit>
        <trans-unit id="21b8acb556631becaba134bf80dba6137f8e76c1" translate="yes" xml:space="preserve">
          <source>A record will be in the &lt;code&gt;valid&lt;/code&gt; state when the adapter did not report any server-side validation failures.</source>
          <target state="translated">어댑터가 서버 측 유효성 검증 실패를보고하지 않으면 레코드가 &lt;code&gt;valid&lt;/code&gt; 상태가됩니다.</target>
        </trans-unit>
        <trans-unit id="7b0df2c4aaeb3477c2c604989aaf5ff0dc482665" translate="yes" xml:space="preserve">
          <source>A rejected array.</source>
          <target state="translated">거부 된 배열.</target>
        </trans-unit>
        <trans-unit id="3e51bd2682d6b7c660dde73493a3071b6d63cb7e" translate="yes" xml:space="preserve">
          <source>A resource's &lt;code&gt;attrs&lt;/code&gt; option may be set to use &lt;code&gt;ids&lt;/code&gt;, &lt;code&gt;records&lt;/code&gt; or false for the &lt;code&gt;serialize&lt;/code&gt; and &lt;code&gt;deserialize&lt;/code&gt; settings.</source>
          <target state="translated">&lt;code&gt;serialize&lt;/code&gt; 및 &lt;code&gt;deserialize&lt;/code&gt; 설정에 자원의 &lt;code&gt;attrs&lt;/code&gt; 옵션이 &lt;code&gt;ids&lt;/code&gt; , &lt;code&gt;records&lt;/code&gt; 또는 false 를 사용하도록 설정 될 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="68e5af032f9f3bca13e5f3c4b42f77a9b868af85" translate="yes" xml:space="preserve">
          <source>A response that contains multiple records may have an array in its &lt;code&gt;data&lt;/code&gt; property.</source>
          <target state="translated">여러 레코드가 포함 된 응답의 &lt;code&gt;data&lt;/code&gt; 속성에 배열이있을 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="221dbbb4bdc294822dea4e47a95dceb0c0f3504a" translate="yes" xml:space="preserve">
          <source>A route handler file, which sets up what should happen when that route is loaded &lt;em&gt;&lt;code&gt;(app/routes/about.js)&lt;/code&gt;&lt;/em&gt;</source>
          <target state="translated">경로가로드 될 때 발생하는 작업을 설정하는 경로 핸들러 파일 &lt;em&gt; &lt;code&gt;(app/routes/about.js)&lt;/code&gt; &lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="bd76f689c1b1cf2edecf43c5ef43576011182f5f" translate="yes" xml:space="preserve">
          <source>A route template, which is where we display the actual content for the page &lt;em&gt;&lt;code&gt;(app/templates/about.hbs)&lt;/code&gt;&lt;/em&gt;</source>
          <target state="translated">페이지의 실제 콘텐츠를 표시하는 경로 템플릿 &lt;em&gt; &lt;code&gt;(app/templates/about.hbs)&lt;/code&gt; &lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="f80c0f471744d70fd7d49ec2b0c3b6ae236eac6b" translate="yes" xml:space="preserve">
          <source>A sample component template could look like this:</source>
          <target state="translated">샘플 컴포넌트 템플릿은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="313eb4ae7397faa5f4909972c2ad73f65f3cff0d" translate="yes" xml:space="preserve">
          <source>A serializer has two main roles in Ember Data. First, it is responsible for taking a response from an adapter and serializing it into the normalized JSON format that Ember Data understands. Secondly, it transforms snapshots of records into a payload the adapter will send to the server when creating, updating, or deleting a record.</source>
          <target state="translated">시리얼 라이저는 Ember Data에서 두 가지 주요 역할을합니다. 먼저 어댑터의 응답을 가져와 Ember Data가 이해하는 정규화 된 JSON 형식으로 직렬화해야합니다. 둘째, 레코드의 스냅 샷을 레코드 작성, 업데이트 또는 삭제시 어댑터가 서버로 보낼 페이로드로 변환합니다.</target>
        </trans-unit>
        <trans-unit id="37af9017b42e56fbbcb87cffc4954a5d243ed7da" translate="yes" xml:space="preserve">
          <source>A serializer in Ember Data is responsible for normalizing a payload from an adapter into the format that Ember Data understands. It is also responsible for transforming a snapshot of a record into the payload that an adapter will send to the backend.</source>
          <target state="translated">Ember Data의 시리얼 라이저는 어댑터의 페이로드를 Ember Data가 이해하는 형식으로 정규화하는 역할을합니다. 또한 레코드의 스냅 샷을 어댑터가 백엔드로 보낼 페이로드로 변환해야합니다.</target>
        </trans-unit>
        <trans-unit id="7c895b90222fc81da588c9e0646d2df62e5cf424" translate="yes" xml:space="preserve">
          <source>A service to keep a cache of rendered maps to use in different places in the application.</source>
          <target state="translated">렌더링 된 맵의 캐시를 애플리케이션의 다른 위치에서 사용하기위한 서비스입니다.</target>
        </trans-unit>
        <trans-unit id="3c3d903ea99c2476f16cbf3393899fe9f15b0928" translate="yes" xml:space="preserve">
          <source>A simple example of usage:</source>
          <target state="translated">간단한 사용법 예 :</target>
        </trans-unit>
        <trans-unit id="8e839688e01ba01e9dfe145feb09335f1aa963d0" translate="yes" xml:space="preserve">
          <source>A simple example:</source>
          <target state="translated">간단한 예 :</target>
        </trans-unit>
        <trans-unit id="3a5bc1ec0036ae274060ccd389cd6f0b1ea67333" translate="yes" xml:space="preserve">
          <source>A state may implement zero or more events and flags.</source>
          <target state="translated">상태는 0 개 이상의 이벤트 및 플래그를 구현할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="32cd32f434617976faf72a74fb5d07b5c8ed826d" translate="yes" xml:space="preserve">
          <source>A string that will not be HTML escaped by Handlebars.</source>
          <target state="translated">핸들 바에 의해 HTML 이스케이프되지 않는 문자열.</target>
        </trans-unit>
        <trans-unit id="bdc38e38a317499db1d65de43d85943675b74110" translate="yes" xml:space="preserve">
          <source>A stub stands in place of the real object in your application and simulates its behavior. In the stub service, define a method that will fetch the map based on location, called &lt;code&gt;getMapElement&lt;/code&gt;.</source>
          <target state="translated">스텁은 애플리케이션에서 실제 오브젝트 대신에 서서 동작을 시뮬레이트합니다. 스텁 서비스에서 &lt;code&gt;getMapElement&lt;/code&gt; 라는 위치를 기반으로 맵을 페치하는 메소드를 정의하십시오 .</target>
        </trans-unit>
        <trans-unit id="aeef60b43ff081b31523ea1c338caf0f4d76bf9e" translate="yes" xml:space="preserve">
          <source>A subclass of the JavaScript Error object for use in Ember.</source>
          <target state="translated">Ember에서 사용할 JavaScript Error 객체의 하위 클래스입니다.</target>
        </trans-unit>
        <trans-unit id="296c7fcd6cedd62993531604b81b2ac120760f97" translate="yes" xml:space="preserve">
          <source>A target object or a function</source>
          <target state="translated">대상 객체 또는 함수</target>
        </trans-unit>
        <trans-unit id="cb536b028ba547a17fc771e9b4531254772e08f5" translate="yes" xml:space="preserve">
          <source>A template that defines how it will look (&lt;code&gt;app/templates/components/rental-listing.hbs&lt;/code&gt;)</source>
          <target state="translated">모양을 정의하는 템플릿 ( &lt;code&gt;app/templates/components/rental-listing.hbs&lt;/code&gt; )</target>
        </trans-unit>
        <trans-unit id="acfe9143c927cfb089cd2845d43a1eeff971a8a8" translate="yes" xml:space="preserve">
          <source>A template to be displayed when the user visits &lt;code&gt;/scientists&lt;/code&gt;.</source>
          <target state="translated">사용자가 &lt;code&gt;/scientists&lt;/code&gt; 를 방문 할 때 표시되는 템플리트 입니다.</target>
        </trans-unit>
        <trans-unit id="7c16b851b5bfa04503f2f1a6303edf6dc213b40e" translate="yes" xml:space="preserve">
          <source>A transform has two functions: &lt;code&gt;serialize&lt;/code&gt; and &lt;code&gt;deserialize&lt;/code&gt;. Deserialization converts a value to a format that the client expects. Serialization does the reverse and converts a value to the format expected by the persistence layer.</source>
          <target state="translated">변환에는 &lt;code&gt;serialize&lt;/code&gt; 및 &lt;code&gt;deserialize&lt;/code&gt; 의 두 가지 기능이 있습니다. 역 직렬화는 값을 클라이언트가 기대하는 형식으로 변환합니다. 직렬화는 역순으로 수행하고 값을 지속성 계층에 필요한 형식으로 변환합니다.</target>
        </trans-unit>
        <trans-unit id="e8e324271ace94d3ca83d71a5940c8b717bc62ba" translate="yes" xml:space="preserve">
          <source>A unit test for this route.</source>
          <target state="translated">이 경로에 대한 단위 테스트.</target>
        </trans-unit>
        <trans-unit id="4e4c72968c6c63750c88efcc1df92843dcdc01e1" translate="yes" xml:space="preserve">
          <source>A user is able to create a blog post.</source>
          <target state="translated">사용자는 블로그 게시물을 만들 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="14ac3739ecbc3cce41527a43c02dac69610f63a1" translate="yes" xml:space="preserve">
          <source>A user is able to log in via the login form.</source>
          <target state="translated">사용자는 로그인 양식을 통해 로그인 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="89ef66d96328015790ebfc7c576d8ad66ef363e3" translate="yes" xml:space="preserve">
          <source>A user is prevented from typing more than 50 characters into post's title field.</source>
          <target state="translated">사용자가 게시물의 제목 필드에 50 자 이상을 입력 할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="58af9c9e350819c582740d5ff4808115ce6132cb" translate="yes" xml:space="preserve">
          <source>A utility function to create a map from the Google Maps API.</source>
          <target state="translated">Google Maps API에서지도를 만드는 유틸리티 기능입니다.</target>
        </trans-unit>
        <trans-unit id="bb4771b943bff95e54d8589ba98dd97636cf52e6" translate="yes" xml:space="preserve">
          <source>A validation tool which checks for common issues in your JavaScript. You'd usually use this in your build process to enforce quality in your codebase. A great example of something to check for: &lt;em&gt;making sure you've always got your semicolons&lt;/em&gt;.</source>
          <target state="translated">JavaScript에서 일반적인 문제를 확인하는 검증 도구입니다. 일반적으로 빌드 프로세스에서이를 사용하여 코드베이스의 품질을 강화합니다. 점검 할 좋은 예 : &lt;em&gt;항상 세미콜론을 확보해야합니다&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="7229154626a7e638f8dfb8f3853f864acc34490b" translate="yes" xml:space="preserve">
          <source>A valuable attribute of the Ember framework is its use of &lt;a href=&quot;http://semver.org/&quot;&gt;Semantic Versioning&lt;/a&gt; to aid projects in keeping up with changes to the framework. Before any functionality or API is removed it first goes through a deprecation period where the functionality is still supported, but usage of it generates a warning logged to the browser console. These warnings can pile up between major releases to a point where the amount of deprecation warnings that scroll through the console becomes overwhelming.</source>
          <target state="translated">Ember 프레임 워크의 중요한 속성은 &lt;a href=&quot;http://semver.org/&quot;&gt;시맨틱 버전 관리&lt;/a&gt; 를 사용 하여 프로젝트가 프레임 워크의 변경 사항을 따라갈 수 있도록 돕는 것입니다. 기능 또는 API를 제거하기 전에 먼저 기능이 계속 지원되는 지원 중단 기간을 거치지 만이를 사용하면 브라우저 콘솔에 경고가 기록됩니다. 이러한 경고는 주요 릴리스 사이에 콘솔을 통해 스크롤되는 더 이상 사용되지 않는 경고의 양이 압도적으로 커질 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d11138bbe4d4307c7e11d7cf9bc1fbd666ddcc73" translate="yes" xml:space="preserve">
          <source>A value is blank if it is empty or a whitespace string.</source>
          <target state="translated">비어 있거나 공백 문자열 인 경우 값이 비어 있습니다.</target>
        </trans-unit>
        <trans-unit id="8d1f021a0c0f2b13574b49fae2a1d6d476e7e060" translate="yes" xml:space="preserve">
          <source>A value is present if it not &lt;code&gt;isBlank&lt;/code&gt;.</source>
          <target state="translated">값이 &lt;code&gt;isBlank&lt;/code&gt; 가 아닌 경우 존재합니다 .</target>
        </trans-unit>
        <trans-unit id="f48d0a670e99edf05724ed7e949ae0349d64236c" translate="yes" xml:space="preserve">
          <source>A visitor does not have access to the admin panel.</source>
          <target state="translated">방문자는 관리자 패널에 액세스 할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="9cefa9b15bf3ec23b34cb0c6282bcc551ba027cd" translate="yes" xml:space="preserve">
          <source>A warning to display.</source>
          <target state="translated">표시 할 경고입니다.</target>
        </trans-unit>
        <trans-unit id="778f927c7f135cd674b23e2ba49a161af1a2ded2" translate="yes" xml:space="preserve">
          <source>AEmber.NativeArraypublic</source>
          <target state="translated">AEmber.NativeArraypublic</target>
        </trans-unit>
        <trans-unit id="9879dc23cf752ded0d3c709d57d87b803f4e81e2" translate="yes" xml:space="preserve">
          <source>AJAX callbacks</source>
          <target state="translated">AJAX 콜백</target>
        </trans-unit>
        <trans-unit id="a9046dbb4daece424db4f9e1cb3852669b9ef68d" translate="yes" xml:space="preserve">
          <source>AMD JavaScript modules</source>
          <target state="translated">AMD JavaScript 모듈</target>
        </trans-unit>
        <trans-unit id="00e38421a40e481837442f1e838c95ebda36e489" translate="yes" xml:space="preserve">
          <source>API Overview</source>
          <target state="translated">API 개요</target>
        </trans-unit>
        <trans-unit id="414dc2de6205a888f5a4098c07424abb4fdb4856" translate="yes" xml:space="preserve">
          <source>API responses will be translated into instances of &lt;code&gt;DS.Errors&lt;/code&gt; differently, depending on the specific combination of adapter and serializer used. You may want to check the documentation or the source code of the libraries that you are using, to know how they expect errors to be communicated.</source>
          <target state="translated">API 응답은 &lt;code&gt;DS.Errors&lt;/code&gt; 인스턴스로 변환 됩니다. 사용 된 어댑터와 시리얼 라이저의 특정 조합에 따라 다르게 오류가 발생 합니다. 오류가 전달되는 방법을 알기 위해 사용중인 라이브러리의 문서 또는 소스 코드를 확인할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2e8d2dae567e5b401c938574cd5a980faa892739" translate="yes" xml:space="preserve">
          <source>Aborted transitions can be retried at a later time. A common use case for this is having an authenticated route redirect the user to a login page, and then redirecting them back to the authenticated route once they've logged in.</source>
          <target state="translated">중단 된 전환은 나중에 다시 시도 할 수 있습니다. 이에 대한 일반적인 사용 사례는 인증 된 경로를 통해 사용자를 로그인 페이지로 리디렉션 한 다음 로그인 한 후에 인증 된 경로로 다시 리디렉션하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="7f822f9e40f9b5173117f5f39ac274176470b8ba" translate="yes" xml:space="preserve">
          <source>Aborting Transitions Within &lt;code&gt;model&lt;/code&gt;, &lt;code&gt;beforeModel&lt;/code&gt;, &lt;code&gt;afterModel&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;model&lt;/code&gt; , &lt;code&gt;beforeModel&lt;/code&gt; , &lt;code&gt;afterModel&lt;/code&gt; 내에서 전환 중단</target>
        </trans-unit>
        <trans-unit id="ff4e81eb7658715d12bb057c6976bab2d9e1b4bb" translate="yes" xml:space="preserve">
          <source>Acceptance Testing the Rental List</source>
          <target state="translated">대여 목록 수락 테스트</target>
        </trans-unit>
        <trans-unit id="44a09c418324158dfd048b7b23925eb42035c677" translate="yes" xml:space="preserve">
          <source>Acceptance Tests</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e265262b61a3e40190ac74373b3099a1e2b2304" translate="yes" xml:space="preserve">
          <source>Acceptance tests are setup by calling the function &lt;code&gt;moduleForAcceptance&lt;/code&gt;. This function ensures that your Ember application is started and shut down between each test.</source>
          <target state="translated">승인 테스트는 &lt;code&gt;moduleForAcceptance&lt;/code&gt; 함수를 호출하여 설정됩니다 . 이 기능은 Ember 응용 프로그램이 시작되고 각 테스트 사이에 종료되도록합니다.</target>
        </trans-unit>
        <trans-unit id="27656383c861b3221a09a8e2857ac96875ead638" translate="yes" xml:space="preserve">
          <source>Acceptance tests are used to test user interaction and application flow. The tests interact with the application in the same ways that a user would, by doing things like filling out form fields and clicking buttons. Acceptance tests ensure that the features within a project are basically functional, and are valuable in ensuring the core features of a project have not regressed, and that the project's goals are being met.</source>
          <target state="translated">승인 테스트는 사용자 상호 작용 및 응용 프로그램 흐름을 테스트하는 데 사용됩니다. 테스트는 양식 필드를 채우거나 단추를 클릭하는 것과 같은 방식으로 사용자와 동일한 방식으로 응용 프로그램과 상호 작용합니다. 승인 테스트는 프로젝트 내의 기능이 기본적으로 작동하며 프로젝트의 핵심 기능이 회귀되지 않았는지 확인하고 프로젝트 목표를 달성하는 데 가치가 있는지 확인합니다.</target>
        </trans-unit>
        <trans-unit id="8a5f638cc1d0f0efc4d9a9b92ac6c43085673983" translate="yes" xml:space="preserve">
          <source>Accepting Input to a Component</source>
          <target state="translated">구성 요소에 입력 승인</target>
        </trans-unit>
        <trans-unit id="2f344ca153944c9ec54979a9301bb2d6de3bdda3" translate="yes" xml:space="preserve">
          <source>Accessing Object Properties</source>
          <target state="translated">객체 속성에 액세스</target>
        </trans-unit>
        <trans-unit id="c35e20fb739a4737e5fef9dcd31a2c6baf677b39" translate="yes" xml:space="preserve">
          <source>Accessing Services</source>
          <target state="translated">서비스 이용</target>
        </trans-unit>
        <trans-unit id="cfc5b1dde1e2c63523e0ed02ea95577bd5e3c1d2" translate="yes" xml:space="preserve">
          <source>Accessing an item's &lt;code&gt;index&lt;/code&gt;</source>
          <target state="translated">아이템의 &lt;code&gt;index&lt;/code&gt; 액세스</target>
        </trans-unit>
        <trans-unit id="ca4a305307e0ff27e9f11dedc446bb26089db652" translate="yes" xml:space="preserve">
          <source>Accessing our maps API through a &lt;a href=&quot;https://guides.emberjs.com/applications/services&quot;&gt;service&lt;/a&gt; will give us several benefits</source>
          <target state="translated">&lt;a href=&quot;https://guides.emberjs.com/applications/services&quot;&gt;서비스&lt;/a&gt; 를 통해지도 API에 액세스 하면 몇 가지 이점이 있습니다.</target>
        </trans-unit>
        <trans-unit id="9b47ccf55149807d853d44259738ef66e00d80b4" translate="yes" xml:space="preserve">
          <source>Accessing the Google Maps API with a Utility</source>
          <target state="translated">유틸리티를 사용하여 Google Maps API에 액세스</target>
        </trans-unit>
        <trans-unit id="12a3a4f498b28cbec01c44aacf0dc5e3a1b828ef" translate="yes" xml:space="preserve">
          <source>Accuracy</source>
          <target state="translated">Accuracy</target>
        </trans-unit>
        <trans-unit id="97b101eb4a96a947309ad20d6017680103e3f95d" translate="yes" xml:space="preserve">
          <source>Across the Board Normalization</source>
          <target state="translated">전반적으로 표준화</target>
        </trans-unit>
        <trans-unit id="97c89a4d6630adeb18fa12ba9976a31413fe293e" translate="yes" xml:space="preserve">
          <source>Action</source>
          <target state="translated">Action</target>
        </trans-unit>
        <trans-unit id="617f82299f3621e8f106b178792e79a9d42f9c01" translate="yes" xml:space="preserve">
          <source>Action Parameters</source>
          <target state="translated">동작 매개 변수</target>
        </trans-unit>
        <trans-unit id="9ead969fd194363deaca0f030c3df01bbaee4b1b" translate="yes" xml:space="preserve">
          <source>ActionHandler</source>
          <target state="translated">ActionHandler</target>
        </trans-unit>
        <trans-unit id="c81e8765f02fbfe34ff71f82e9a3d6c35bf7b012" translate="yes" xml:space="preserve">
          <source>ActionSupport</source>
          <target state="translated">ActionSupport</target>
        </trans-unit>
        <trans-unit id="c3cd636a585b20c40ac2df5ffb403e83cb2eef51" translate="yes" xml:space="preserve">
          <source>Actions</source>
          <target state="translated">Actions</target>
        </trans-unit>
        <trans-unit id="c38647e8052fef0032f19d5d819d8ac4390cb154" translate="yes" xml:space="preserve">
          <source>Actions are always looked up on the &lt;code&gt;actions&lt;/code&gt; property of the current context. This avoids collisions in the naming of common actions, such as &lt;code&gt;destroy&lt;/code&gt;. Two options can be passed to the &lt;code&gt;action&lt;/code&gt; helper when it is used in this way.</source>
          <target state="translated">작업은 항상 현재 컨텍스트 의 &lt;code&gt;actions&lt;/code&gt; 속성에서 조회됩니다 . 이를 통해 &lt;code&gt;destroy&lt;/code&gt; 와 같은 일반적인 조치의 이름을 지정할 때 충돌이 발생하지 않습니다 . 이러한 방식으로 &lt;code&gt;action&lt;/code&gt; 헬퍼에 두 가지 옵션을 전달할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="ef321ee173e7ba5a99a3e27aa555cb83c2a83923" translate="yes" xml:space="preserve">
          <source>Actions can also be invoked from other parts of your application via &lt;code&gt;ActionHandler#send&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;ActionHandler#send&lt;/code&gt; 를 통해 애플리케이션의 다른 부분에서 액션을 호출 할 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="ac67e5ce98c087908f39f11cea90bf623ccb17fb" translate="yes" xml:space="preserve">
          <source>Actions can be invoked on objects other than the component directly from the template. For example, in our &lt;code&gt;send-message&lt;/code&gt; component we might include a service that processes the &lt;code&gt;sendMessage&lt;/code&gt; logic.</source>
          <target state="translated">템플리트에서 직접 컴포넌트 이외의 오브젝트에 대해 조치를 호출 할 수 있습니다. 예를 들어, &lt;code&gt;send-message&lt;/code&gt; 컴포넌트에는 &lt;code&gt;sendMessage&lt;/code&gt; 로직 을 처리하는 서비스가 포함될 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="3ce8f13218eb402c2df429715fa272511ad7668d" translate="yes" xml:space="preserve">
          <source>Actions in components allow you to decouple an event happening from how it's handled, leading to modular, more reusable components.</source>
          <target state="translated">구성 요소의 작업을 통해 이벤트 처리 방식에서 발생하는 이벤트를 분리하여 더 재사용 가능한 모듈 식 구성 요소로 만들 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c612ed0140667c0e62d9f7a1d523831c7041d1d2" translate="yes" xml:space="preserve">
          <source>Actions invoked with &lt;code&gt;sendAction&lt;/code&gt; have the same currying behavior as demonstrated with &lt;code&gt;on-input&lt;/code&gt; above. For example:</source>
          <target state="translated">&lt;code&gt;sendAction&lt;/code&gt; 으로 호출 된 액션 은 위의 &lt;code&gt;on-input&lt;/code&gt; 와 동일한 카레 링 동작을 갖 습니다 . 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="965c8c2299fd94833f9b672ad404956bad4b8f47" translate="yes" xml:space="preserve">
          <source>Ad Hoc Injections</source>
          <target state="translated">특별 주사</target>
        </trans-unit>
        <trans-unit id="e6b4616c0b930c121c72c82e34550e44bce3ed0f" translate="yes" xml:space="preserve">
          <source>Adapter</source>
          <target state="translated">Adapter</target>
        </trans-unit>
        <trans-unit id="381e6f2969f7ac5cc8e8450cfd8670f3522246c0" translate="yes" xml:space="preserve">
          <source>Adapters let you completely change how your API is implemented without impacting your Ember application code.</source>
          <target state="translated">어댑터를 사용하면 Ember 애플리케이션 코드에 영향을주지 않고 API 구현 방식을 완전히 변경할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d30306e1b80780b8434ef1b39907be0a658b8dcf" translate="yes" xml:space="preserve">
          <source>Add an event listener</source>
          <target state="translated">이벤트 리스너 추가</target>
        </trans-unit>
        <trans-unit id="5b58e56f9360e98d1bf073d232c8e385133a2666" translate="yes" xml:space="preserve">
          <source>Add the following bookmark:</source>
          <target state="translated">다음 북마크를 추가하십시오.</target>
        </trans-unit>
        <trans-unit id="13be4fa81c316c889b22a98a584e5b3e01b4b1a6" translate="yes" xml:space="preserve">
          <source>Add the following code after the imports to our acceptance test:</source>
          <target state="translated">수입 후 승인 테스트에 다음 코드를 추가하십시오.</target>
        </trans-unit>
        <trans-unit id="0efe1c0250f3fc188e6a8e3737351d8dca2b0ce1" translate="yes" xml:space="preserve">
          <source>Add the objects in the passed numerable to the end of the array. Defers notifying observers of the change until all objects are added.</source>
          <target state="translated">전달 된 Numerable의 객체를 배열 끝에 추가합니다. 모든 객체가 추가 될 때까지 관찰자에게 변경 사항을 알리는 것을 연기합니다.</target>
        </trans-unit>
        <trans-unit id="29f7f9468ccd168471a49cc00c77dd9437fadf66" translate="yes" xml:space="preserve">
          <source>Adding Data Attributes</source>
          <target state="translated">데이터 속성 추가</target>
        </trans-unit>
        <trans-unit id="a46bd6a48506d37840e26e455b21f72457e13b3b" translate="yes" xml:space="preserve">
          <source>Adding Nested Routes</source>
          <target state="translated">중첩 경로 추가</target>
        </trans-unit>
        <trans-unit id="bb915848f121656d8082caf271f5e286b5d703a8" translate="yes" xml:space="preserve">
          <source>Adding Objects</source>
          <target state="translated">객체 추가</target>
        </trans-unit>
        <trans-unit id="fbf5e48b6a9cd3118543626736e3af2ed0bf0b8f" translate="yes" xml:space="preserve">
          <source>Adding Your Application Goals as Acceptance Tests</source>
          <target state="translated">승인 테스트로 응용 프로그램 목표 추가</target>
        </trans-unit>
        <trans-unit id="86b41c8a927c8c5a757118ad1ffaf3f422c6de5a" translate="yes" xml:space="preserve">
          <source>Adding a Banner with Navigation</source>
          <target state="translated">탐색 기능이있는 배너 추가</target>
        </trans-unit>
        <trans-unit id="7907b3231eba85b6e9a0d3e1a77b8c0e0b253aa8" translate="yes" xml:space="preserve">
          <source>Adding a breakpoint</source>
          <target state="translated">중단 점 추가</target>
        </trans-unit>
        <trans-unit id="5e4c7f27c3bc07ce79145dc9d90e9c65138713e1" translate="yes" xml:space="preserve">
          <source>Adding a single property that is not an array will just add it in the array:</source>
          <target state="translated">배열이 아닌 단일 속성을 추가하면 배열에 추가됩니다.</target>
        </trans-unit>
        <trans-unit id="961b1847cb50852ed3ea64456047c5d703ca8190" translate="yes" xml:space="preserve">
          <source>Adding additional attributes on a link</source>
          <target state="translated">링크에 추가 속성 추가</target>
        </trans-unit>
        <trans-unit id="e2eb56110c25a5dfc7c53bd0e0fb918c3c99c20e" translate="yes" xml:space="preserve">
          <source>Adding the Rental To Our Template</source>
          <target state="translated">템플릿에 대여 추가</target>
        </trans-unit>
        <trans-unit id="84afde926b540b2f7f426749497948e02d4b57b2" translate="yes" xml:space="preserve">
          <source>Additional resources:</source>
          <target state="translated">추가 자료 :</target>
        </trans-unit>
        <trans-unit id="fc881ca94ae041edddea26c0df1a4f655bbb2bb8" translate="yes" xml:space="preserve">
          <source>Additionally a helper can be called as a nested helper (sometimes called a subexpression). In this example, the computed value of a helper is passed to a component named &lt;code&gt;show-money&lt;/code&gt;:</source>
          <target state="translated">또한 도우미를 중첩 도우미 (때로는 하위식이라고 함)라고 할 수 있습니다. 이 예에서 도우미의 계산 된 값은 &lt;code&gt;show-money&lt;/code&gt; 구성 요소에 전달됩니다 .</target>
        </trans-unit>
        <trans-unit id="7dc2b7d3e370a211f92cf1b5d003a240af3bd462" translate="yes" xml:space="preserve">
          <source>Additionally you can &lt;code&gt;yield&lt;/code&gt; properties into the context for use by the consumer:</source>
          <target state="translated">또한 소비자가 사용할 컨텍스트에 속성을 &lt;code&gt;yield&lt;/code&gt; 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="fb1b6e0c9ed4043e184646f1976b2c49188e9088" translate="yes" xml:space="preserve">
          <source>Additionally, class helpers can call &lt;code&gt;recompute&lt;/code&gt; to force a new computation.</source>
          <target state="translated">또한 클래스 도우미는 &lt;code&gt;recompute&lt;/code&gt; 을 호출 하여 새로운 계산을 강제 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="aff8c2a0852aaa3dedd9b762f5dfaf585b559da0" translate="yes" xml:space="preserve">
          <source>Additionally, if you try to set the model of an &lt;code&gt;Ember.ArrayController&lt;/code&gt; to a plain native array, it will raise an exception since it no longer implements the &lt;code&gt;Ember.Array&lt;/code&gt; interface.</source>
          <target state="translated">또한 &lt;code&gt;Ember.ArrayController&lt;/code&gt; 의 모델을 일반 기본 배열 로 설정하려고 하면 더 이상 &lt;code&gt;Ember.Array&lt;/code&gt; 인터페이스를 구현하지 않으므로 예외가 발생합니다 .</target>
        </trans-unit>
        <trans-unit id="614b01d739cbbf475bc18a379a6da866937a8964" translate="yes" xml:space="preserve">
          <source>Additionally, since the component isn't instantiated until the block content is rendered, we can add arguments within the block. In this case we'll add a text style option which will dictate the style of the body text we want in our post. When &lt;code&gt;{{post.body}}&lt;/code&gt; is instantiated, it will have both the &lt;code&gt;editStyle&lt;/code&gt; and &lt;code&gt;postData&lt;/code&gt; given by its wrapping component, as well as the &lt;code&gt;bodyStyle&lt;/code&gt; declared in the template.</source>
          <target state="translated">또한 블록 내용이 렌더링 될 때까지 구성 요소가 인스턴스화되지 않으므로 블록 내에 인수를 추가 할 수 있습니다. 이 경우 게시물에서 원하는 본문 텍스트의 스타일을 지정하는 텍스트 스타일 옵션을 추가합니다. 때 &lt;code&gt;{{post.body}}&lt;/code&gt; 에 인스턴스화, 그것은 모두해야합니다 &lt;code&gt;editStyle&lt;/code&gt; 와 &lt;code&gt;postData&lt;/code&gt; 를가 뿐만 아니라, 자사의 포장 구성 요소에 의해 주어진 &lt;code&gt;bodyStyle&lt;/code&gt; 는 템플릿에 선언했다.</target>
        </trans-unit>
        <trans-unit id="f0bc0d6c761728ed6eb684dcbbdb607b74c8e87f" translate="yes" xml:space="preserve">
          <source>Additionally, the &lt;code&gt;mut&lt;/code&gt; helper can be combined with the &lt;code&gt;action&lt;/code&gt; helper to mutate a value. For example:</source>
          <target state="translated">또한 &lt;code&gt;mut&lt;/code&gt; helper를 &lt;code&gt;action&lt;/code&gt; helper 와 결합 하여 값을 mutate 할 수 있습니다 . 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="ff38fbaef4688ee36ebaf956ca46ea7564c61799" translate="yes" xml:space="preserve">
          <source>Additionally, to retrieve the first and last objects in an array in an observable fashion, you should use &lt;code&gt;myArray.get('firstObject')&lt;/code&gt; and &lt;code&gt;myArray.get('lastObject')&lt;/code&gt;, respectively.</source>
          <target state="translated">또한 관찰 가능한 방식으로 배열의 첫 번째 및 마지막 객체를 검색하려면 각각 &lt;code&gt;myArray.get('firstObject')&lt;/code&gt; 및 &lt;code&gt;myArray.get('lastObject')&lt;/code&gt; 을 사용해야합니다 .</target>
        </trans-unit>
        <trans-unit id="f32c2dbcf34398cc50e6a6697df547ab5ac9a6bc" translate="yes" xml:space="preserve">
          <source>Addons</source>
          <target state="translated">Addons</target>
        </trans-unit>
        <trans-unit id="838e38c65403d79db60dcc3e55c156ab7110af36" translate="yes" xml:space="preserve">
          <source>Adds an array observer to the receiving array. The array observer object normally must implement two methods:</source>
          <target state="translated">수신 배열에 배열 관찰자를 추가합니다. 배열 관찰자 객체는 일반적으로 두 가지 방법을 구현해야합니다.</target>
        </trans-unit>
        <trans-unit id="0ad9f3590163f2505aed3ffe90e450b29bdb9ba0" translate="yes" xml:space="preserve">
          <source>Adds an observer on a property.</source>
          <target state="translated">속성에 관찰자를 추가합니다.</target>
        </trans-unit>
        <trans-unit id="07b8f978e5c477465a6baeff452966da87c1e3f5" translate="yes" xml:space="preserve">
          <source>Adds each object in the passed enumerable to the receiver.</source>
          <target state="translated">전달 된 열거 가능한 각 객체를 수신자에 추가합니다.</target>
        </trans-unit>
        <trans-unit id="818f401e00e97f49fd796b6b2e9da04207c31113" translate="yes" xml:space="preserve">
          <source>Adds the named objects to the beginning of the array. Defers notifying observers until all objects have been added.</source>
          <target state="translated">명명 된 객체를 배열의 시작 부분에 추가합니다. 모든 객체가 추가 될 때까지 관찰자에게 알림을 연기합니다.</target>
        </trans-unit>
        <trans-unit id="3c5e5d99dd32a203dcc72a428b5b6629786bd068" translate="yes" xml:space="preserve">
          <source>Adds the passed target/method and any optional arguments to the named queue to be executed at the end of the RunLoop. If you have not already started a RunLoop when calling this method one will be started for you automatically.</source>
          <target state="translated">전달 된 대상 / 방법 및 선택적 인수를 명명 된 대기열에 추가하여 RunLoop의 끝에서 실행될 수 있습니다. 이 메소드를 호출 할 때 아직 RunLoop을 시작하지 않은 경우 자동으로 시작됩니다.</target>
        </trans-unit>
        <trans-unit id="66931511954ef5ba588177fe993eecfba55f8306" translate="yes" xml:space="preserve">
          <source>Advanced Example</source>
          <target state="translated">고급 예</target>
        </trans-unit>
        <trans-unit id="186b4c5c3b7976b349d51e4508670ebdde03183d" translate="yes" xml:space="preserve">
          <source>Advanced Example:</source>
          <target state="translated">고급 예 :</target>
        </trans-unit>
        <trans-unit id="aeed9b4c741b5cb4e55f198c89190812e9900514" translate="yes" xml:space="preserve">
          <source>Advanced Usage:</source>
          <target state="translated">고급 사용법 :</target>
        </trans-unit>
        <trans-unit id="a5215acd515beaa16e202387d73fa33b51b6a698" translate="yes" xml:space="preserve">
          <source>After a component successfully renders its backing HTML element into the DOM, it will trigger its &lt;a href=&quot;http://emberjs.com/api/classes/Ember.Component.html#event_didInsertElement&quot;&gt;&lt;code&gt;didInsertElement()&lt;/code&gt;&lt;/a&gt; hook.</source>
          <target state="translated">구성 요소가 지원 HTML 요소를 DOM으로 렌더링 한 후 &lt;a href=&quot;http://emberjs.com/api/classes/Ember.Component.html#event_didInsertElement&quot;&gt; &lt;code&gt;didInsertElement()&lt;/code&gt; &lt;/a&gt; 후크를 트리거합니다 .</target>
        </trans-unit>
        <trans-unit id="5202159cfac89de0f36afb291d224809df2dbeac" translate="yes" xml:space="preserve">
          <source>After a few seconds, you should see output that looks like this:</source>
          <target state="translated">몇 초 후에 다음과 같은 출력이 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="c3da6b85eaa54589f8ced34a483e30ea26758f57" translate="yes" xml:space="preserve">
          <source>After fixing a deprecation and getting your scenarios working again, you might want to leave the deprecation message in the workflow file with the throw handler enabled. This will ensure you haven't missed anything, and ensure no new deprecated calls of that type are introduced to your project. Next, it's just a matter of going down the list, updating the handler, and fixing each remaining deprecation.</source>
          <target state="translated">지원 중단을 수정하고 시나리오를 다시 작동시킨 후에는 폐기 처리기가 활성화 된 사용 중단 메시지를 워크 플로 파일에 남겨 둘 수 있습니다. 이렇게하면 빠진 것이없고 해당 유형의 더 이상 사용되지 않는 전화가 프로젝트에 도입되지 않습니다. 다음으로,리스트를 내려 가고, 핸들러를 업데이트하고, 남은 지원 중단을 수정하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="e8a563a03588b4ce19824d10483066c169e84711" translate="yes" xml:space="preserve">
          <source>After reading it, &lt;code&gt;meta.total&lt;/code&gt; can be used to calculate how many pages of posts you'll have.</source>
          <target state="translated">읽은 후 &lt;code&gt;meta.total&lt;/code&gt; 을 사용하여 게시 할 페이지 수를 계산할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="acfbbd52bbbb4ced17ca3ce859f416e93cba3255" translate="yes" xml:space="preserve">
          <source>After refreshing, Ember Data will appropriately look up the &quot;post&quot; model.</source>
          <target state="translated">새로 고친 후 Ember Data는 &quot;포스트&quot;모델을 적절히 찾습니다.</target>
        </trans-unit>
        <trans-unit id="8e61b4bb84fed97f4f7b6123711e139bd5112710" translate="yes" xml:space="preserve">
          <source>After saving a new post successfully, a user is then shown the list of prior posts.</source>
          <target state="translated">새 게시물을 성공적으로 저장하면 이전 게시물 목록이 사용자에게 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="235f56f22416c84a49c97407d786c0884e7cf673" translate="yes" xml:space="preserve">
          <source>After starting the server we should now see some end to end maps functionality show up on our front page!</source>
          <target state="translated">서버를 시작한 후에는 프론트 엔드 페이지에 일부 엔드 투 엔드 맵 기능이 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="98d297497aa50ba76e205142532b5510d9c48570" translate="yes" xml:space="preserve">
          <source>After updating our mirage configuration, we should see a simple filter on the home screen that will update the rental list as you type:</source>
          <target state="translated">신기루 구성을 업데이트 한 후 홈 화면에 입력시 대여 목록을 업데이트하는 간단한 필터가 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="19ad05f957b79b38ceb81dd6312675b3cd75ce1c" translate="yes" xml:space="preserve">
          <source>After you have defined a model class, you can start &lt;a href=&quot;../finding-records&quot;&gt;finding&lt;/a&gt; and &lt;a href=&quot;../creating-updating-and-deleting-records&quot;&gt;working with records&lt;/a&gt; of that type.</source>
          <target state="translated">모델 클래스를 정의한 후에 는 해당 유형의 &lt;a href=&quot;../creating-updating-and-deleting-records&quot;&gt;레코드 &lt;/a&gt;&lt;a href=&quot;../finding-records&quot;&gt;찾기&lt;/a&gt; 및 작업을 시작할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="f1cd78ce91ac71db82cb5bb2b15ba7b56dad3762" translate="yes" xml:space="preserve">
          <source>Afterwards we add a further initializer named &lt;code&gt;pre&lt;/code&gt;, this time specifying that it should run before the initializer named &lt;code&gt;first&lt;/code&gt;:</source>
          <target state="translated">그런 다음 &lt;code&gt;pre&lt;/code&gt; 이라는 추가 이니셜 라이저를 추가합니다. 이번에는 &lt;code&gt;first&lt;/code&gt; 이니셜 라이저보다 먼저 실행되도록 지정합니다 .</target>
        </trans-unit>
        <trans-unit id="626d0adc94dcedaf3af61d87e54f26c480c7bd5c" translate="yes" xml:space="preserve">
          <source>Aggregate Information (Every or Any)</source>
          <target state="translated">집계 정보 (모두 또는 모두)</target>
        </trans-unit>
        <trans-unit id="70de51fa75e9edd99e6b4963a49d84a2bf27b1ce" translate="yes" xml:space="preserve">
          <source>Alias for &lt;code&gt;mapBy&lt;/code&gt;</source>
          <target state="translated">에 대한 별칭 &lt;code&gt;mapBy&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="bf6896081e96ffaab61b811f72dddb265a71d05a" translate="yes" xml:space="preserve">
          <source>Alias for jQuery</source>
          <target state="translated">jQuery의 별명</target>
        </trans-unit>
        <trans-unit id="e209a5d4078b378b87ac5499ddf7812b6b95e027" translate="yes" xml:space="preserve">
          <source>All Ember Data classes, methods and functions are defined inside of this namespace.</source>
          <target state="translated">모든 Ember Data 클래스, 메소드 및 함수는이 네임 스페이스 내에 정의됩니다.</target>
        </trans-unit>
        <trans-unit id="3698aeba7ff5a69d3c6f22b01d9c336e6bef20fc" translate="yes" xml:space="preserve">
          <source>All assets located in the &lt;code&gt;public/&lt;/code&gt; folder will be copied as is to the final output directory, &lt;code&gt;dist/&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;public/&lt;/code&gt; 폴더 에있는 모든 자산 은있는 그대로 최종 출력 디렉토리 인 &lt;code&gt;dist/&lt;/code&gt; 복사됩니다 .</target>
        </trans-unit>
        <trans-unit id="fd8aae95d9b2813640907de0ca9b623b6dbcba4e" translate="yes" xml:space="preserve">
          <source>All ember models have an id property. This is an identifier managed by an external source. These are always coerced to be strings before being used internally. Note when declaring the attributes for a model it is an error to declare an id attribute.</source>
          <target state="translated">모든 불씨 모델에는 id 속성이 있습니다. 외부 소스에서 관리하는 식별자입니다. 내부적으로 사용되기 전에 항상 문자열로 강제 변환됩니다. 모델의 속성을 선언 할 때 id 속성을 선언하면 오류가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="3486d672b565e38796bbf374c641258f59a55692" translate="yes" xml:space="preserve">
          <source>All enumerables expose &lt;a href=&quot;http://emberjs.com/api/classes/Ember.Enumerable.html#property_firstObject&quot;&gt;&lt;code&gt;firstObject&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;http://emberjs.com/api/classes/Ember.Enumerable.html#property_lastObject&quot;&gt;&lt;code&gt;lastObject&lt;/code&gt;&lt;/a&gt; properties that you can bind to.</source>
          <target state="translated">모든 열거 가능 항목 은 바인딩 할 수있는 &lt;a href=&quot;http://emberjs.com/api/classes/Ember.Enumerable.html#property_firstObject&quot;&gt; &lt;code&gt;firstObject&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;http://emberjs.com/api/classes/Ember.Enumerable.html#property_lastObject&quot;&gt; &lt;code&gt;lastObject&lt;/code&gt; &lt;/a&gt; 속성을 노출 합니다.</target>
        </trans-unit>
        <trans-unit id="f7a9be30367f4a27730e81fbccce7fd0aad0bcd4" translate="yes" xml:space="preserve">
          <source>All of the Ember.js conveniences are available for modifying attributes. For example, you can use &lt;code&gt;Ember.Object&lt;/code&gt;'s &lt;a href=&quot;http://emberjs.com/api/classes/Ember.Object.html#method_incrementProperty&quot;&gt;&lt;code&gt;incrementProperty&lt;/code&gt;&lt;/a&gt; helper:</source>
          <target state="translated">속성을 수정하기 위해 모든 Ember.js 편의 기능을 사용할 수 있습니다. 예를 들어 &lt;code&gt;Ember.Object&lt;/code&gt; 의 &lt;a href=&quot;http://emberjs.com/api/classes/Ember.Object.html#method_incrementProperty&quot;&gt; &lt;code&gt;incrementProperty&lt;/code&gt; &lt;/a&gt; 헬퍼를 사용할 수 있습니다 :</target>
        </trans-unit>
        <trans-unit id="6bc42e572e5de321dbd2d066b83cbd5d2ec99a88" translate="yes" xml:space="preserve">
          <source>All of the event handling approaches described above respond to the same set of events. The names of the built-in events are listed below. (The hash of built-in events exists in &lt;code&gt;Ember.EventDispatcher&lt;/code&gt;.) Additional, custom events can be registered by using &lt;code&gt;Ember.Application.customEvents&lt;/code&gt;.</source>
          <target state="translated">위에서 설명한 모든 이벤트 처리 방식은 동일한 이벤트 집합에 응답합니다. 내장 이벤트의 이름은 다음과 같습니다. 내장 이벤트의 해시는 &lt;code&gt;Ember.EventDispatcher&lt;/code&gt; 에 있습니다. 추가 사용자 정의 이벤트는 &lt;code&gt;Ember.Application.customEvents&lt;/code&gt; 를 사용하여 등록 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="229c0c6ae7ddf3e9e24fb42c05923cbeb93f534f" translate="yes" xml:space="preserve">
          <source>All our &lt;code&gt;system-preferences-editor&lt;/code&gt; component really needs to process a user deletion is an account ID. For this case, the action helper provides the &lt;code&gt;value&lt;/code&gt; attribute to allow a parent component to dig into the passed object to pull out only what it needs.</source>
          <target state="translated">우리의 모든 &lt;code&gt;system-preferences-editor&lt;/code&gt; 구성 요소는 실제로 사용자 삭제를 처리해야합니다 계정 ID입니다. 이 경우 작업 도우미는 &lt;code&gt;value&lt;/code&gt; 구성 요소를 제공하여 부모 구성 요소가 전달 된 개체를 파서 필요한 것만 꺼내도록합니다.</target>
        </trans-unit>
        <trans-unit id="718cc7b8864472ef4e74b1ea16436f4fc7ff3d96" translate="yes" xml:space="preserve">
          <source>All style assets added this way will be concatenated and output as &lt;code&gt;/assets/vendor.css&lt;/code&gt;.</source>
          <target state="translated">이 방법으로 추가 된 모든 스타일 자산은 연결되어 &lt;code&gt;/assets/vendor.css&lt;/code&gt; 로 출력됩니다 .</target>
        </trans-unit>
        <trans-unit id="f16b71ca628fe8405ecbd9361993f54c50fc073b" translate="yes" xml:space="preserve">
          <source>All third-party assets, included either manually in &lt;code&gt;vendor/&lt;/code&gt; or via a package manager like Bower, must be added via &lt;code&gt;import()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;vendor/&lt;/code&gt; 수동으로 포함되거나 Bower와 같은 패키지 관리자를 통해 포함 된 모든 타사 자산 은 &lt;code&gt;import()&lt;/code&gt; 를 통해 추가해야합니다 .</target>
        </trans-unit>
        <trans-unit id="9bf786e288505f7c89875c65f38709ab6e7774d0" translate="yes" xml:space="preserve">
          <source>All we want to do when a user visits the root (&lt;code&gt;/&lt;/code&gt;) URL is transition to &lt;code&gt;/rentals&lt;/code&gt;. To do this we will add code to our index route handler by implementing a route lifecycle hook, called &lt;code&gt;beforeModel&lt;/code&gt;.</source>
          <target state="translated">사용자가 루트 ( &lt;code&gt;/&lt;/code&gt; ) URL을 방문 할 때하고 싶은 것은 &lt;code&gt;/rentals&lt;/code&gt; 로의 전환 입니다. 이를 위해 &lt;code&gt;beforeModel&lt;/code&gt; 이라는 경로 수명주기 후크를 구현하여 인덱스 경로 핸들러에 코드를 추가합니다 .</target>
        </trans-unit>
        <trans-unit id="9eeaa2e6065909ce6be50386af9debc71d210cc6" translate="yes" xml:space="preserve">
          <source>Allow registering options for all factories of a type.</source>
          <target state="translated">유형의 모든 팩토리에 옵션을 등록 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="fd31d681ad2597760c29143eaee7f311d122c3ee" translate="yes" xml:space="preserve">
          <source>Allowing Default Action</source>
          <target state="translated">기본 조치 허용</target>
        </trans-unit>
        <trans-unit id="6e08a097c0ce32e8ba1e1d6b95a4b1a44cc0234c" translate="yes" xml:space="preserve">
          <source>Allowing Default Browser Action</source>
          <target state="translated">기본 브라우저 동작 허용</target>
        </trans-unit>
        <trans-unit id="225e76fc1cc7d4b77c063f838f10b18b298b1023" translate="yes" xml:space="preserve">
          <source>Allowing Modifier Keys</source>
          <target state="translated">수정 자 키 허용</target>
        </trans-unit>
        <trans-unit id="6992de9a0552f0a40afb55475fda253a35b85c36" translate="yes" xml:space="preserve">
          <source>Allows for runtime registration of handler functions that override the default deprecation behavior. Deprecations are invoked by calls to &lt;a href=&quot;https://emberjs.com/api/classes/Ember.html#method_deprecate&quot;&gt;Ember.deprecate&lt;/a&gt;. The following example demonstrates its usage by registering a handler that throws an error if the message contains the word &quot;should&quot;, otherwise defers to the default handler.</source>
          <target state="translated">기본 지원 중단 동작을 무시하는 핸들러 함수의 런타임 등록을 허용합니다. 지원 중단은 &lt;a href=&quot;https://emberjs.com/api/classes/Ember.html#method_deprecate&quot;&gt;Ember.deprecate&lt;/a&gt; 호출로 호출됩니다 . 다음 예제는 메시지에 &quot;should&quot;라는 단어가 포함 된 경우 오류를 발생시키는 핸들러를 등록하여 사용법을 보여줍니다. 그렇지 않으면 기본 핸들러를 연기합니다.</target>
        </trans-unit>
        <trans-unit id="2a893a2d17b48de5fc7573df951096b2dcef5f22" translate="yes" xml:space="preserve">
          <source>Allows for runtime registration of handler functions that override the default warning behavior. Warnings are invoked by calls made to &lt;a href=&quot;https://emberjs.com/api/classes/Ember.html#method_warn&quot;&gt;Ember.warn&lt;/a&gt;. The following example demonstrates its usage by registering a handler that does nothing overriding Ember's default warning behavior.</source>
          <target state="translated">기본 경고 동작을 무시하는 핸들러 함수의 런타임 등록을 허용합니다. &lt;a href=&quot;https://emberjs.com/api/classes/Ember.html#method_warn&quot;&gt;Ember.warn&lt;/a&gt; 호출로 경고가 발생합니다 . 다음 예제는 Ember의 기본 경고 동작을 무시하는 처리기를 등록하여 사용법을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="8837c765f5879bdcfaa68e31e606df42e35fcec1" translate="yes" xml:space="preserve">
          <source>Allows you to specify which context to call the specified function in while adding the execution of that function to the Ember run loop. This ability makes this method a great way to asynchronously integrate third-party libraries into your Ember application.</source>
          <target state="translated">해당 함수의 실행을 Ember 실행 루프에 추가하는 동안 지정된 함수를 호출 할 컨텍스트를 지정할 수 있습니다. 이 기능을 통해이 방법을 타사 라이브러리를 Ember 응용 프로그램에 비동기 적으로 통합 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a1bea53958709685d1c2ec20b3089e9eb98236df" translate="yes" xml:space="preserve">
          <source>Almost every test has a pattern of visiting a route, interacting with the page (using the helpers), and checking for expected changes in the DOM.</source>
          <target state="translated">거의 모든 테스트에는 경로를 방문하고, 페이지와 상호 작용하고 (헬퍼 사용) DOM에서 예상되는 변경 사항을 확인하는 패턴이 있습니다.</target>
        </trans-unit>
        <trans-unit id="d32eb76d385644f5902d1a58a747a9b7a890957b" translate="yes" xml:space="preserve">
          <source>Along with the records returned from your store, you'll likely need to handle some kind of metadata. &lt;em&gt;Metadata&lt;/em&gt; is data that goes along with a specific &lt;em&gt;model&lt;/em&gt; or &lt;em&gt;type&lt;/em&gt; instead of a record.</source>
          <target state="translated">상점에서 반환 된 레코드와 함께 일종의 메타 데이터를 처리해야합니다. &lt;em&gt;메타 데이터&lt;/em&gt; 는 레코드 대신 특정 &lt;em&gt;모델&lt;/em&gt; 또는 &lt;em&gt;유형&lt;/em&gt; 과 함께 사용되는 데이터입니다 .</target>
        </trans-unit>
        <trans-unit id="287aa9efd6d0131e0e8c3a8ab6310d9c9f9f13ca" translate="yes" xml:space="preserve">
          <source>Also available as &lt;code&gt;Function.prototype.observes&lt;/code&gt; if prototype extensions are enabled.</source>
          <target state="translated">프로토 타입 확장이 활성화되어 있는지 &lt;code&gt;Function.prototype.observes&lt;/code&gt; 로도 제공됩니다 .</target>
        </trans-unit>
        <trans-unit id="6a71db6d5d517b8977003666223226fe7a669b73" translate="yes" xml:space="preserve">
          <source>Also note that multiple calls to &lt;code&gt;peekAll&lt;/code&gt; for a given type will always return the same &lt;code&gt;RecordArray&lt;/code&gt;.</source>
          <target state="translated">또한 주어진 유형에 대해 &lt;code&gt;peekAll&lt;/code&gt; 을 여러 번 호출 하면 항상 동일한 &lt;code&gt;RecordArray&lt;/code&gt; 가 반환됩니다 .</target>
        </trans-unit>
        <trans-unit id="d86077b483479586784301fa189115176eddf0ef" translate="yes" xml:space="preserve">
          <source>Also note that passing an anonymous function to &lt;code&gt;run.scheduleOnce&lt;/code&gt; will not prevent additional calls with an identical anonymous function from scheduling the items multiple times, e.g.:</source>
          <target state="translated">또한 익명 함수를 &lt;code&gt;run.scheduleOnce&lt;/code&gt; 에 전달해 도 동일한 익명 함수를 사용하는 추가 호출이 항목을 여러 번 예약하는 것을 막을 수는 없습니다.</target>
        </trans-unit>
        <trans-unit id="855f6f073c4f90c4033dda3d95e4edd38622472a" translate="yes" xml:space="preserve">
          <source>Also take a look at &lt;a href=&quot;#method_modelNameFromPayloadType&quot;&gt;modelNameFromPayloadType&lt;/a&gt; to customize how the model name from should be mapped from the payload.</source>
          <target state="translated">또한 &lt;a href=&quot;#method_modelNameFromPayloadType&quot;&gt;modelNameFromPayloadType&lt;/a&gt; 을 살펴보고 페이로드에서 모델 이름을 맵핑하는 방법을 사용자 정의하십시오.</target>
        </trans-unit>
        <trans-unit id="5a40e9c25fcd68dadcf28a840e0a3ba09ababcc4" translate="yes" xml:space="preserve">
          <source>Also take a look at &lt;a href=&quot;#method_payloadTypeFromModelName&quot;&gt;payloadTypeFromModelName&lt;/a&gt; to customize how the type of a record should be serialized.</source>
          <target state="translated">또한 &lt;a href=&quot;#method_payloadTypeFromModelName&quot;&gt;payloadTypeFromModelName&lt;/a&gt; 을 보고 레코드 유형을 직렬화하는 방법을 사용자 정의하십시오.</target>
        </trans-unit>
        <trans-unit id="765058281b41d2406ccda100d75aeebf9d049d08" translate="yes" xml:space="preserve">
          <source>Also, note that the second test uses a dummy object as the returned map element (defined on line 4). Our map element can be substituted with any object because we are only asserting that the cache has been accessed (see line 32).</source>
          <target state="translated">또한 두 번째 테스트는 더미 오브젝트를 리턴 된 맵 요소 (4 행에 정의 됨)로 사용합니다. 캐시에 액세스했다고 주장하기 때문에 map 요소는 모든 객체로 대체 할 수 있습니다 (32 행 참조).</target>
        </trans-unit>
        <trans-unit id="d3e4f6316a7cf691def638bdca1ad5d8ea6d9564" translate="yes" xml:space="preserve">
          <source>Also, these helpers register themselves in the order that you call them and will be run in a chain; each one is only called after the previous one finishes. You can rest assured, therefore, that the order you call them in will also be their execution order, and that the previous helper has finished before the next one starts.</source>
          <target state="translated">또한,이 헬퍼들은 당신이 그들을 부르는 순서대로 자신을 등록하며 체인에서 실행될 것입니다. 각 항목은 이전 항목이 완료된 후에 만 ​​호출됩니다. 따라서 호출하는 순서도 실행 순서이며 다음 도우미가 시작되기 전에 이전 도우미가 완료되었음을 안심할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ab11f9ebfff84692e7c7903b624652206fc57659" translate="yes" xml:space="preserve">
          <source>Alternatively (and recommended), you can also define &lt;code&gt;EmberENV.FEATURES&lt;/code&gt; if you need to enable features flagged at runtime.</source>
          <target state="translated">또는 런타임에 플래그 지정된 기능을 활성화해야하는 경우 &lt;code&gt;EmberENV.FEATURES&lt;/code&gt; 를 정의 할 수도 있습니다 (권장) .</target>
        </trans-unit>
        <trans-unit id="3b1c338c009761bfc062cee666109779d3ebafd0" translate="yes" xml:space="preserve">
          <source>Alternatively, &lt;code&gt;pushPayload&lt;/code&gt; will accept a model type which will determine which serializer will process the payload.</source>
          <target state="translated">또는 &lt;code&gt;pushPayload&lt;/code&gt; 는 페이로드를 처리 할 시리얼 라이저를 결정하는 모델 유형을 허용합니다.</target>
        </trans-unit>
        <trans-unit id="02613cd77a36c4f02b5d61f696c09cd217233003" translate="yes" xml:space="preserve">
          <source>Alternatively, if called within an existing run loop:</source>
          <target state="translated">또는 기존 실행 루프 내에서 호출 된 경우 :</target>
        </trans-unit>
        <trans-unit id="5a85d30b9c88f8fdb857d54755da58e0796aa6eb" translate="yes" xml:space="preserve">
          <source>Alternatively, we could update the &lt;code&gt;hasMany&lt;/code&gt; relationship by pushing a record into the relationship:</source>
          <target state="translated">또는 레코드를 관계로 푸시 하여 &lt;code&gt;hasMany&lt;/code&gt; 관계를 업데이트 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="efbf21138b1b23ce19aaa165231cf9248bf29028" translate="yes" xml:space="preserve">
          <source>Alternatively, you can accept an arbitrary number of parameters by setting &lt;code&gt;positionalParams&lt;/code&gt; to a string, e.g. &lt;code&gt;positionalParams: 'params'&lt;/code&gt;. This will allow you to access those params as an array like so:</source>
          <target state="translated">또는 &lt;code&gt;positionalParams&lt;/code&gt; 를 문자열 로 설정하여 임의의 수의 매개 변수를 사용할 수 있습니다 ( 예 : &lt;code&gt;positionalParams: 'params'&lt;/code&gt; . 이를 통해 다음과 같이 해당 매개 변수에 배열로 액세스 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c92bca942c96ee4ac6c5528df059e247f3940328" translate="yes" xml:space="preserve">
          <source>Alternatively, you can pass the &lt;code&gt;outlet&lt;/code&gt; name directly as a string.</source>
          <target state="translated">또는 &lt;code&gt;outlet&lt;/code&gt; 이름을 문자열로 직접 전달할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="b11c114b6aa556375b6458321ebe1447d05fce62" translate="yes" xml:space="preserve">
          <source>Alternatively, you could pass both a photo's ID and a comment to the component:</source>
          <target state="translated">또는 사진의 ID와 설명을 구성 요소에 전달할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2a9f9d2ee2674d44b3b938a426ec795bfaf36b31" translate="yes" xml:space="preserve">
          <source>Although &lt;code&gt;createRecord&lt;/code&gt; is fairly straightforward, the only thing to watch out for is that you cannot assign a promise as a relationship, currently.</source>
          <target state="translated">&lt;code&gt;createRecord&lt;/code&gt; 는 매우 간단 하지만주의 해야 할 것은 현재 약속을 관계로 지정할 수 없다는 것입니다.</target>
        </trans-unit>
        <trans-unit id="eef2a7c411f8622d7eba3b860aa0cd53b1790a3f" translate="yes" xml:space="preserve">
          <source>Although Ember Data encourages you to sideload your relationships, sometimes when working with legacy APIs you may discover you need to deal with JSON that contains relationships embedded inside other records. The &lt;code&gt;EmbeddedRecordsMixin&lt;/code&gt; is meant to help with this problem.</source>
          <target state="translated">Ember Data는 관계를 사이드로드하도록 권장하지만 때로는 레거시 API로 작업 할 때 다른 레코드에 포함 된 관계가 포함 된 JSON을 처리해야 할 수도 있습니다. &lt;code&gt;EmbeddedRecordsMixin&lt;/code&gt; 은 이 문제에 대한 도움을 의미한다.</target>
        </trans-unit>
        <trans-unit id="1c3f267874e2789ed75f6f7073e54490c6c0a9b5" translate="yes" xml:space="preserve">
          <source>Although autoruns are convenient, they are suboptimal. The current JS frame is allowed to end before the run loop is flushed, which sometimes means the browser will take the opportunity to do other things, like garbage collection. GC running in between data changing and DOM rerendering can cause visual lag and should be minimized.</source>
          <target state="translated">자동 실행은 편리하지만 차선책입니다. 실행 루프를 플러시하기 전에 현재 JS 프레임을 종료 할 수 있습니다. 이는 때때로 브라우저가 가비지 콜렉션과 같은 다른 작업을 수행 할 기회를 갖음을 의미합니다. 데이터 변경과 DOM 재 렌더링 사이에서 실행되는 GC는 시각적 지연을 유발할 수 있으므로 최소화해야합니다.</target>
        </trans-unit>
        <trans-unit id="5a8abe7c0e83297852d4f67da4842abb482c2b8a" translate="yes" xml:space="preserve">
          <source>Although these methods are efficient, they do add a layer of indirection to your application so it is a good idea to use them only when you need the flexibility of using both true JavaScript arrays and &quot;virtual&quot; arrays such as controllers and collections.</source>
          <target state="translated">이러한 방법은 효율적이지만 응용 프로그램에 간접 계층을 추가하므로 실제 JavaScript 배열과 컨트롤러 및 컬렉션과 같은 &quot;가상&quot;배열을 모두 사용할 수있는 유연성이 필요한 경우에만 사용하는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="ccfc88ef2112665ae2b825601a633790b9a7f125" translate="yes" xml:space="preserve">
          <source>Although this is the most common way to add an observer, this capability is actually built into the &lt;code&gt;Ember.Object&lt;/code&gt; class on top of two methods defined in this mixin: &lt;code&gt;addObserver&lt;/code&gt; and &lt;code&gt;removeObserver&lt;/code&gt;. You can use these two methods to add and remove observers yourself if you need to do so at runtime.</source>
          <target state="translated">이것이 옵저버를 추가하는 가장 일반적인 방법이지만이 기능은 실제로이 믹스 인에 정의 된 두 가지 메소드 인 &lt;code&gt;addObserver&lt;/code&gt; 및 &lt;code&gt;removeObserver&lt;/code&gt; 위에 &lt;code&gt;Ember.Object&lt;/code&gt; 클래스에 내장되어 있습니다. 이 두 가지 방법을 사용하여 런타임에 필요한 경우 관찰자를 직접 추가하고 제거 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="73adb7629ca2f26a20ecbd91717b58bf8e26e808" translate="yes" xml:space="preserve">
          <source>Always test on real, representative mobile devices.</source>
          <target state="translated">항상 실제 대표 모바일 장치에서 테스트하십시오.</target>
        </trans-unit>
        <trans-unit id="7e624e8c287aa2c3b7ac91a4518796513fe4bb5b" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;http://emberjs.com/api/classes/Ember.Application.html&quot;&gt;&lt;code&gt;Ember.Application&lt;/code&gt;&lt;/a&gt; serves as a &quot;registry&quot; for dependency declarations. Factories (i.e. classes) are registered with an application, as well as rules about &quot;injecting&quot; dependencies that are applied when objects are instantiated.</source>
          <target state="translated">&lt;a href=&quot;http://emberjs.com/api/classes/Ember.Application.html&quot;&gt; &lt;code&gt;Ember.Application&lt;/code&gt; 는&lt;/a&gt; 의존성 선언에 대해 &quot;레지스트리&quot;역할을한다. 팩토리 (예 : 클래스)는 객체가 인스턴스화 될 때 적용되는 &quot;주입&quot;종속성에 대한 규칙뿐만 아니라 응용 프로그램에 등록됩니다.</target>
        </trans-unit>
        <trans-unit id="de948038346f8af9fc0cb6320df6101f3e94f5dc" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;http://emberjs.com/api/classes/Ember.ApplicationInstance.html&quot;&gt;&lt;code&gt;Ember.ApplicationInstance&lt;/code&gt;&lt;/a&gt; serves as the &quot;owner&quot; for objects that are instantiated from registered factories. Application instances provide a means to &quot;look up&quot; (i.e. instantiate and / or retrieve) objects.</source>
          <target state="translated">&lt;a href=&quot;http://emberjs.com/api/classes/Ember.ApplicationInstance.html&quot;&gt; &lt;code&gt;Ember.ApplicationInstance&lt;/code&gt; 은&lt;/a&gt; 등록 된 공장에서 인스턴스화 개체에 대한 &quot;소유자&quot;역할을한다. 응용 프로그램 인스턴스는 객체를 &quot;찾아보기&quot;(즉, 인스턴스화 및 / 또는 검색)하는 수단을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="ac779e3c2cb123d5adaf74e6554e7d130c4a9eaf" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;http://emberjs.com/api/classes/Ember.Service.html&quot;&gt;&lt;code&gt;Ember.Service&lt;/code&gt;&lt;/a&gt; is an Ember object that lives for the duration of the application, and can be made available in different parts of your application.</source>
          <target state="translated">&lt;a href=&quot;http://emberjs.com/api/classes/Ember.Service.html&quot;&gt; &lt;code&gt;Ember.Service&lt;/code&gt; 은&lt;/a&gt; 응용 프로그램의 기간 동안 사는 엠버 객체이며, 응용 프로그램의 다른 부분에서 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="80570aee16848a546fc70644c93965861edf257c" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;https://guides.emberjs.com/templates/actions/&quot;&gt;actions hash&lt;/a&gt; is an object in the component that contains functions. These functions are called when the user interacts with the UI, such as clicking.</source>
          <target state="translated">&lt;a href=&quot;https://guides.emberjs.com/templates/actions/&quot;&gt;액션 해시&lt;/a&gt; 함수가 포함 된 구성 요소의 개체입니다. 이러한 기능은 사용자가 클릭과 같은 UI와 상호 작용할 때 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="7f4bee16270cf0cb6f61f70a26b58e0e0c94a92f" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;Ember.Component&lt;/code&gt; is a view that is completely isolated. Properties accessed in its templates go to the view object and actions are targeted at the view object. There is no access to the surrounding context or outer controller; all contextual information must be passed in.</source>
          <target state="translated">&lt;code&gt;Ember.Component&lt;/code&gt; 는 완전히 격리 된 도면이다. 템플릿에서 액세스 한 속성은보기 개체로 이동하고 작업은보기 개체를 대상으로합니다. 주변 컨텍스트 또는 외부 컨트롤러에 액세스 할 수 없습니다. 모든 상황에 맞는 정보를 전달해야합니다.</target>
        </trans-unit>
        <trans-unit id="1883bb873b7fcf60158adf7d837aa6b927c0e6a2" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;about&lt;/code&gt; route, that gives information on our application.</source>
          <target state="translated">&lt;code&gt;about&lt;/code&gt; 경로, 즉 우리의 응용 프로그램에 대한 정보를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="bb1448a6a4f0771288c7f687937892fa7ef13e01" translate="yes" xml:space="preserve">
          <source>An &lt;strong&gt;adapter&lt;/strong&gt; is an object that translates requests from Ember (such as &quot;find the user with an ID of 1&quot;) into requests to a server.</source>
          <target state="translated">&lt;strong&gt;어댑터가&lt;/strong&gt; 서버에 요청 (예 : &quot;(1)의 ID로 사용자를 찾을 수&quot;등) 엠버 요청을 변환하는 것을 목적으로한다.</target>
        </trans-unit>
        <trans-unit id="5902d993be6eb634955e5fd9227b9df48f126894" translate="yes" xml:space="preserve">
          <source>An About Route</source>
          <target state="translated">노선 소개</target>
        </trans-unit>
        <trans-unit id="9500428fb1d2f5abb8fba66420e17f6fcc1234b3" translate="yes" xml:space="preserve">
          <source>An ArrayProxy wraps any other object that implements &lt;code&gt;Ember.Array&lt;/code&gt; and/or &lt;code&gt;Ember.MutableArray,&lt;/code&gt; forwarding all requests. This makes it very useful for a number of binding use cases or other cases where being able to swap out the underlying array is useful.</source>
          <target state="translated">&lt;code&gt;Ember.MutableArray,&lt;/code&gt; 모든 요청을 전달 하면서 &lt;code&gt;Ember.Array&lt;/code&gt; 및 / 또는 Ember.MutableArray 를 구현하는 다른 객체를 래핑 합니다. 이것은 많은 바인딩 유스 케이스 또는 기본 배열을 스왑 아웃 할 수있는 다른 경우에 매우 유용합니다.</target>
        </trans-unit>
        <trans-unit id="9a6039258cfcdc862552cfdba43389f97b2d891a" translate="yes" xml:space="preserve">
          <source>An Ember route is built with three parts:</source>
          <target state="translated">Ember 경로는 세 부분으로 구성됩니다.</target>
        </trans-unit>
        <trans-unit id="596f4894284d1bf94fc6151d59724cd243050588" translate="yes" xml:space="preserve">
          <source>An ID is usually assigned to a record by the server when you save it for the first time, but you can also generate IDs client-side.</source>
          <target state="translated">ID는 일반적으로 처음 저장할 때 서버에서 레코드에 할당하지만 클라이언트 측에서 ID를 생성 할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="c76edccb2007be97c5102cf9e80f944ae7a8691f" translate="yes" xml:space="preserve">
          <source>An Index Route</source>
          <target state="translated">인덱스 라우트</target>
        </trans-unit>
        <trans-unit id="e5e7d7f7cc5134380d134c786308635abca89e80" translate="yes" xml:space="preserve">
          <source>An Integration Test</source>
          <target state="translated">통합 테스트</target>
        </trans-unit>
        <trans-unit id="50fad2554ce7e95a53c65017699fe62afba1cc76" translate="yes" xml:space="preserve">
          <source>An RecordReference is a low level API that allows users and addon author to perform meta-operations on a record.</source>
          <target state="translated">RecordReference는 사용자와 애드온 작성자가 레코드에서 메타 작업을 수행 할 수 있도록하는 저수준 API입니다.</target>
        </trans-unit>
        <trans-unit id="608cdc5facc35a250421503c369c58512fc16f58" translate="yes" xml:space="preserve">
          <source>An adapter can target other hosts by setting the &lt;code&gt;host&lt;/code&gt; property.</source>
          <target state="translated">어댑터는 &lt;code&gt;host&lt;/code&gt; 특성 을 설정하여 다른 호스트를 대상으로 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="9a5775bac8afbc0c3d7f8686c2d570e43392de66" translate="yes" xml:space="preserve">
          <source>An adapter is an object that receives requests from a store and translates them into the appropriate action to take against your persistence layer. The persistence layer is usually an HTTP API, but may be anything, such as the browser's local storage. Typically the adapter is not invoked directly instead its functionality is accessed through the &lt;code&gt;store&lt;/code&gt;.</source>
          <target state="translated">어댑터는 상점에서 요청을 수신하여 지속성 계층에 대해 수행 할 적절한 조치로 변환하는 오브젝트입니다. 지속성 계층은 일반적으로 HTTP API이지만 브라우저의 로컬 스토리지와 같은 것일 수 있습니다. 일반적으로 어댑터는 직접 호출되지 않고 해당 기능은 &lt;code&gt;store&lt;/code&gt; 통해 액세스됩니다 .</target>
        </trans-unit>
        <trans-unit id="6f3a86affe2d7220ce0e01e6dbfde7c83555af2d" translate="yes" xml:space="preserve">
          <source>An alias to the proxied promise's &lt;code&gt;catch&lt;/code&gt;.</source>
          <target state="translated">프록시 약속의 &lt;code&gt;catch&lt;/code&gt; 에 대한 별명 입니다.</target>
        </trans-unit>
        <trans-unit id="29c43cebb44c8dee95e990d1d5f3c186f19709c0" translate="yes" xml:space="preserve">
          <source>An alias to the proxied promise's &lt;code&gt;finally&lt;/code&gt;.</source>
          <target state="translated">프록시 약속의 별칭은 &lt;code&gt;finally&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="29d2587b6a6e14a31cba73d06ed8ee8231089637" translate="yes" xml:space="preserve">
          <source>An alias to the proxied promise's &lt;code&gt;then&lt;/code&gt;.</source>
          <target state="translated">프록시가 약속에 대한 별칭이다 &lt;code&gt;then&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="33e753b000ae156d9d8ea5bb3a387e513289c376" translate="yes" xml:space="preserve">
          <source>An array containing all of the error messages for this record. This is useful for displaying all errors to the user.</source>
          <target state="translated">이 레코드에 대한 모든 오류 메시지를 포함하는 배열입니다. 이는 모든 오류를 사용자에게 표시하는 데 유용합니다.</target>
        </trans-unit>
        <trans-unit id="81b72d7bef0000bbe49e0a833c3532585f1a79a0" translate="yes" xml:space="preserve">
          <source>An array of indexes of items to return.</source>
          <target state="translated">반환 할 항목의 인덱스 배열입니다.</target>
        </trans-unit>
        <trans-unit id="eb58ab5ebfb56d5e2bfd8b9296c584c2ccf48594" translate="yes" xml:space="preserve">
          <source>An array of strings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1120aaa0a87d2dd213ed0158edf71c2454297f52" translate="yes" xml:space="preserve">
          <source>An array of these arguments is passed to the helper function:</source>
          <target state="translated">이러한 인수의 배열은 도우미 함수로 전달됩니다.</target>
        </trans-unit>
        <trans-unit id="fda1ec9d59264d818647834489da811f90f6a33d" translate="yes" xml:space="preserve">
          <source>An array of types directly related to a model. Each type will be included once, regardless of the number of relationships it has with the model.</source>
          <target state="translated">모델과 직접 관련된 유형의 배열입니다. 각 유형은 모델과의 관계 수에 관계없이 한 번 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="aa341318cbc6694b07d1e5032577eaf030d13bdc" translate="yes" xml:space="preserve">
          <source>An array of zero or more objects that should be inserted into the array at *idx*</source>
          <target state="translated">* idx *에서 배열에 삽입해야하는 0 개 이상의 객체 배열</target>
        </trans-unit>
        <trans-unit id="1fe90876a1b798c907c82e0db130ed1fa8029f0a" translate="yes" xml:space="preserve">
          <source>An author's full name and date are properly displayed in a blog post.</source>
          <target state="translated">블로그 게시물에 저자의 전체 이름과 날짜가 올바르게 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="639f2e84401c149f296033a7bb9384842745aa11" translate="yes" xml:space="preserve">
          <source>An empty Array.</source>
          <target state="translated">빈 배열.</target>
        </trans-unit>
        <trans-unit id="62fed3b9378eaf6151f1cae0fb4e68e38624c81f" translate="yes" xml:space="preserve">
          <source>An engine instance.</source>
          <target state="translated">엔진 인스턴스.</target>
        </trans-unit>
        <trans-unit id="5c12b0fcbf2f75e8c43db741b03984a0468e7065" translate="yes" xml:space="preserve">
          <source>An entry in the Ember router (&lt;code&gt;/app/router.js&lt;/code&gt;), which maps between our route name and a specific URI</source>
          <target state="translated">경로 이름과 특정 URI 사이를 매핑 하는 Ember 라우터 ( &lt;code&gt;/app/router.js&lt;/code&gt; ) 의 항목</target>
        </trans-unit>
        <trans-unit id="9a58bf8a890e6bbec14734c7fd86bd9ac0f0c1f9" translate="yes" xml:space="preserve">
          <source>An entry in the application's router (located in &lt;code&gt;app/router.js&lt;/code&gt;).</source>
          <target state="translated">애플리케이션 라우터의 항목 ( &lt;code&gt;app/router.js&lt;/code&gt; 에 있음 )</target>
        </trans-unit>
        <trans-unit id="b90a6d1a7f3af0170568124207d8fe96a4cf9503" translate="yes" xml:space="preserve">
          <source>An example may help here: Let's say a user clicks two buttons, one after another and both load data from different servers. They take different times to respond.</source>
          <target state="translated">예를 들어 도움이 될 수 있습니다. 사용자가 두 개의 버튼을 하나씩 클릭하고 서로 다른 서버에서 데이터를로드한다고 가정 해 보겠습니다. 응답하는 데 다른 시간이 걸립니다.</target>
        </trans-unit>
        <trans-unit id="2451a04315b1c74c5afabdc5516cb2823698620f" translate="yes" xml:space="preserve">
          <source>An example of ordering initializers, we create an initializer named &lt;code&gt;first&lt;/code&gt;:</source>
          <target state="translated">이니셜 라이저를 주문하는 예제는 &lt;code&gt;first&lt;/code&gt; 라는 이니셜 라이저를 만듭니다 .</target>
        </trans-unit>
        <trans-unit id="f7fd1537334865abb1ac63354a604b5cb0c99abf" translate="yes" xml:space="preserve">
          <source>An example of providing a session object to all controllers:</source>
          <target state="translated">모든 컨트롤러에 세션 객체를 제공하는 예 :</target>
        </trans-unit>
        <trans-unit id="fa7f52aa1b03dcc4378de659015523d44d1a571b" translate="yes" xml:space="preserve">
          <source>An example of registering a controller with a non-standard name:</source>
          <target state="translated">비표준 이름으로 컨트롤러를 등록하는 예 :</target>
        </trans-unit>
        <trans-unit id="9c172c992da769bfd8273ffa63f0953f84dc83b5" translate="yes" xml:space="preserve">
          <source>An example of some of the options you can configure: &lt;a href=&quot;http://eslint.org/docs/rules/&quot;&gt;ESLint&lt;/a&gt;&lt;a href=&quot;http://jshint.com/docs/options/&quot;&gt;JSlint&lt;/a&gt;</source>
          <target state="translated">구성 할 수있는 몇 가지 옵션의 예 : &lt;a href=&quot;http://eslint.org/docs/rules/&quot;&gt;ESLint &lt;/a&gt;&lt;a href=&quot;http://jshint.com/docs/options/&quot;&gt;JSlint&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="9976c8abcf03ae85cfba8fcdc9e6e5d66a8621e3" translate="yes" xml:space="preserve">
          <source>An example of the internals</source>
          <target state="translated">내부의 예</target>
        </trans-unit>
        <trans-unit id="0b071b91906b2689dd25d0849d30729ed7b9644c" translate="yes" xml:space="preserve">
          <source>An example of this scenario in action is a profile editor component. As you are editing one user, and the user attribute is changed, you can use &lt;code&gt;didUpdateAttrs&lt;/code&gt; to clear any error state that was built up from editing the previous user.</source>
          <target state="translated">이 시나리오의 실제 예는 프로파일 편집기 구성 요소입니다. 한 명의 사용자를 편집하고 user 속성이 변경되면 &lt;code&gt;didUpdateAttrs&lt;/code&gt; 를 사용 하여 이전 사용자를 편집하여 작성된 오류 상태를 지울 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="f7fd4c1b5f79277887b9af3301a467a5a1810dd6" translate="yes" xml:space="preserve">
          <source>An example usage of this method is re-querying the server for the latest information using the same parameters as when the route was first entered.</source>
          <target state="translated">이 방법의 사용 예는 경로를 처음 입력했을 때와 동일한 매개 변수를 사용하여 최신 정보를 서버에 다시 쿼리하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="a4ea86d5180bf384ebb676f2abebaee5f42c159f" translate="yes" xml:space="preserve">
          <source>An example use case would be to detect if the user has entered a route for a specific model that does not exist. For example:</source>
          <target state="translated">사용 사례의 예는 사용자가 존재하지 않는 특정 모델에 대한 경로를 입력했는지 여부를 감지하는 것입니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="5441cf6ba6543e259ec5e71bc7109f11c26b46b9" translate="yes" xml:space="preserve">
          <source>An example use case would be to redirect the user to a log in route if a request is unauthorized:</source>
          <target state="translated">사용 사례는 요청이 승인되지 않은 경우 사용자를 로그인 경로로 리디렉션하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="f3a16fd76648c5969d4f7924c3292d90decadb74" translate="yes" xml:space="preserve">
          <source>An example use case would be to warn the user to check their internet connection if an adapter operation has timed out:</source>
          <target state="translated">사용 예는 어댑터 작업이 시간 초과 된 경우 사용자에게 인터넷 연결을 확인하도록 경고하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="053593634953b29a961890378abe6d4ebd0d43fe" translate="yes" xml:space="preserve">
          <source>An important note: &lt;code&gt;RSVP.hash&lt;/code&gt; is intended for plain JavaScript objects that are just a set of keys and values. &lt;code&gt;RSVP.hash&lt;/code&gt; will NOT preserve prototype chains.</source>
          <target state="translated">중요 사항 : &lt;code&gt;RSVP.hash&lt;/code&gt; 는 일련의 키와 값인 일반 JavaScript 객체를위한 것입니다. &lt;code&gt;RSVP.hash&lt;/code&gt; 는 프로토 타입 체인을 유지하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="9a3e26d24bc233ea862be6868f841a9990b7ffb8" translate="yes" xml:space="preserve">
          <source>An important note: &lt;code&gt;RSVP.hashSettled&lt;/code&gt; is intended for plain JavaScript objects that are just a set of keys and values. &lt;code&gt;RSVP.hashSettled&lt;/code&gt; will NOT preserve prototype chains.</source>
          <target state="translated">중요한 참고 사항 : &lt;code&gt;RSVP.hashSettled&lt;/code&gt; 는 일련의 키와 값인 일반 JavaScript 객체를위한 것입니다. &lt;code&gt;RSVP.hashSettled&lt;/code&gt; 는 프로토 타입 체인을 보존하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="89f4ef225775e32cbb05ad354ffda0cbce66f59f" translate="yes" xml:space="preserve">
          <source>An instance of &lt;code&gt;Ember.Application&lt;/code&gt; is the starting point for every Ember application. It helps to instantiate, initialize and coordinate the many objects that make up your app.</source>
          <target state="translated">&lt;code&gt;Ember.Application&lt;/code&gt; 의 인스턴스는 모든 Ember 애플리케이션의 시작점입니다. 앱을 구성하는 많은 객체를 인스턴스화, 초기화 및 조정하는 데 도움이됩니다.</target>
        </trans-unit>
        <trans-unit id="b3153e3c65cd1fb3412d51bd91b8f730d9b3fdbb" translate="yes" xml:space="preserve">
          <source>An item is added to the &lt;code&gt;todos&lt;/code&gt; array.</source>
          <target state="translated">항목이 &lt;code&gt;todos&lt;/code&gt; 배열에 추가됩니다 .</target>
        </trans-unit>
        <trans-unit id="8a385c702881a44cf0bfe43e07e259405c173c6f" translate="yes" xml:space="preserve">
          <source>An item is removed from the &lt;code&gt;todos&lt;/code&gt; array.</source>
          <target state="translated">&lt;code&gt;todos&lt;/code&gt; 배열 에서 항목이 제거됩니다 .</target>
        </trans-unit>
        <trans-unit id="e77b109133f483882d852df1ac18105151423dee" translate="yes" xml:space="preserve">
          <source>An object instance.</source>
          <target state="translated">객체 인스턴스.</target>
        </trans-unit>
        <trans-unit id="2bc5157ce7d5d52f47e0dd7999ba37bc76cad2e2" translate="yes" xml:space="preserve">
          <source>An object that can be used to pass a unique `id` for this warning. The `id` can be used by Ember debugging tools to change the behavior (raise, log, or silence) for that specific warning. The `id` should be namespaced by dots, e.g. &quot;ember-debug.feature-flag-with-features-stripped&quot;</source>
          <target state="translated">이 경고에 대해 고유 한 'id'를 전달하는 데 사용할 수있는 객체입니다. `id`는 Ember 디버깅 도구에서 특정 경고에 대한 동작 (상승, 로그 또는 무음)을 변경하는 데 사용할 수 있습니다. `id`는 점으로 네임 스페이스되어야한다. 예를 들어 &quot;ember-debug.feature-flag-with-features-stripped&quot;</target>
        </trans-unit>
        <trans-unit id="179502adbd250c5f946552b0e15aec102a262e09" translate="yes" xml:space="preserve">
          <source>An object with an owner.</source>
          <target state="translated">소유자가있는 개체입니다.</target>
        </trans-unit>
        <trans-unit id="e5d355e4a637ec26fe9ad11ba1f1279d9d68495b" translate="yes" xml:space="preserve">
          <source>An object's keys will be listed in the same order as the array returned from calling &lt;code&gt;Object.keys&lt;/code&gt; on that object. If you want a different sort order, you should use &lt;code&gt;Object.keys&lt;/code&gt; to get an array, sort that array with the built-in JavaScript tools, and use the &lt;a href=&quot;http://emberjs.com/api/classes/Ember.Templates.helpers.html#method_each-in&quot;&gt;&lt;code&gt;{{#each}}&lt;/code&gt;&lt;/a&gt; helper instead.</source>
          <target state="translated">객체의 키는 해당 객체 에서 &lt;code&gt;Object.keys&lt;/code&gt; 를 호출하여 반환 된 배열과 동일한 순서로 나열됩니다 . 다른 정렬 순서를 원하면 &lt;code&gt;Object.keys&lt;/code&gt; 를 사용 하여 배열을 얻고 내장 JavaScript 도구를 사용하여 해당 배열을 정렬 한 다음 &lt;a href=&quot;http://emberjs.com/api/classes/Ember.Templates.helpers.html#method_each-in&quot;&gt; &lt;code&gt;{{#each}}&lt;/code&gt; &lt;/a&gt; 도우미를 사용해야합니다 .</target>
        </trans-unit>
        <trans-unit id="2260b59f8a4149ec98c09e5d99e706e2a95c3711" translate="yes" xml:space="preserve">
          <source>An open standard for sound, interoperable JavaScript promises</source>
          <target state="translated">건전하고 상호 운용 가능한 JavaScript 약속에 대한 공개 표준</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
