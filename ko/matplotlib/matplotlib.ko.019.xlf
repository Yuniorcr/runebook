<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="matplotlib">
    <body>
      <group id="matplotlib">
        <trans-unit id="40764fe61e382f77211b0189d1bb99b334c4869f" translate="yes" xml:space="preserve">
          <source>The following colormaps are based on the &lt;a href=&quot;http://colorbrewer2.org&quot;&gt;ColorBrewer&lt;/a&gt; color specifications and designs developed by Cynthia Brewer:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="570e9661dff9b6f080e879f6c282948d05a59574" translate="yes" xml:space="preserve">
          <source>The following colormaps are redundant and may be removed in future versions. It's recommended to use the names in the descriptions instead, which produce identical output:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="334b6bba144618165e214581445e85a037c5230a" translate="yes" xml:space="preserve">
          <source>The following creates a path from the string &quot;ABC&quot; with Helvetica font face; and another path from the latex fraction 1/2:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24e2e2c8d67b2125dd8ac32e659053b1db46f61f" translate="yes" xml:space="preserve">
          <source>The following events are recognized</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="614537b8abca66c17a025ba452ff8670717b1058" translate="yes" xml:space="preserve">
          <source>The following kwarg properties are supported</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f7ddecaa465a825bcc41c9dfcdd288993e74d85" translate="yes" xml:space="preserve">
          <source>The following kwargs are supported for ensuring the returned axes adheres to the given projection etc., and for axes creation if the active axes does not exist:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45f9112e882edc14623d336863ceecf4b89f05ad" translate="yes" xml:space="preserve">
          <source>The following methods &lt;em&gt;should&lt;/em&gt; be implemented in the backend for optimization reasons:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02c84262b66dc3120e882623003317ace652fb16" translate="yes" xml:space="preserve">
          <source>The following methods must be implemented in the backend for full functionality (though just implementing &lt;a href=&quot;#matplotlib.backend_bases.RendererBase.draw_path&quot;&gt;&lt;code&gt;draw_path()&lt;/code&gt;&lt;/a&gt; alone would give a highly capable backend):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="054638ef1e41e25bfacd11f75deac967ec30c00f" translate="yes" xml:space="preserve">
          <source>The following note is for scale implementors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2936d5adb9e240b503a66e2c87b97599cd38ff58" translate="yes" xml:space="preserve">
          <source>The following values are supported:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e76a8254fa15a854de13de3f69603ddc69bcb637" translate="yes" xml:space="preserve">
          <source>The following will probably be useful only in the context of indexed colors (that is, when the mappable has norm=NoNorm()), or other unusual circumstances.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7eb8015976a4febda45584ad7f65c3bd3ca5d6bb" translate="yes" xml:space="preserve">
          <source>The font family name, e.g., 'Times'.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a11118c1b446b05abb150f5ebade589a012e5287" translate="yes" xml:space="preserve">
          <source>The font metrics need to be dealt with differently for accents, since they are already offset correctly from the baseline in TrueType fonts.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3cb1291328a6cf3d654f10cab355dbb1d0cea0af" translate="yes" xml:space="preserve">
          <source>The font properties are those described in the &lt;a href=&quot;http://www.w3.org/TR/1998/REC-CSS2-19980512/&quot;&gt;W3C Cascading Style Sheet, Level 1&lt;/a&gt; font specification. The six properties are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54a3a85a0dffa3fba24212d20e0225f5c0ad0033" translate="yes" xml:space="preserve">
          <source>The font properties for the text.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b32a97da07e57b246f089476d22a88a78b10fa30" translate="yes" xml:space="preserve">
          <source>The font properties of the legend. If None (default), the current &lt;a href=&quot;../matplotlib_configuration_api#matplotlib.rcParams&quot;&gt;&lt;code&gt;matplotlib.rcParams&lt;/code&gt;&lt;/a&gt; will be used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c1078b9805d57d499a911ff006f6aca43da9c2c" translate="yes" xml:space="preserve">
          <source>The font properties of the legend. If None (default), the current &lt;a href=&quot;matplotlib_configuration_api#matplotlib.rcParams&quot;&gt;&lt;code&gt;matplotlib.rcParams&lt;/code&gt;&lt;/a&gt; will be used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="523601d6896ad8cd578fb2569c949ac75a883062" translate="yes" xml:space="preserve">
          <source>The font properties to search for. This can be either a &lt;a href=&quot;#matplotlib.font_manager.FontProperties&quot;&gt;&lt;code&gt;FontProperties&lt;/code&gt;&lt;/a&gt; object or a string defining a &lt;a href=&quot;https://www.freedesktop.org/software/fontconfig/fontconfig-user.html&quot;&gt;fontconfig patterns&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3940cf81f241579f6e68b7b1e2e1f1891086347" translate="yes" xml:space="preserve">
          <source>The font properties.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d31c23da6f8254c736eebf2c88f6117882de69f" translate="yes" xml:space="preserve">
          <source>The font size in points</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e39f28a0e98a95b8e0be36fd4234f42856a982fe" translate="yes" xml:space="preserve">
          <source>The font size in points.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55a1d292e85c9ba8386b45ac61b1be006907c263" translate="yes" xml:space="preserve">
          <source>The font size of the text. See &lt;a href=&quot;../text_api#matplotlib.text.Text.set_size&quot;&gt;&lt;code&gt;Text.set_size&lt;/code&gt;&lt;/a&gt; for possible values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88f57fb7b0961f46243d8bf86bd67c752015037e" translate="yes" xml:space="preserve">
          <source>The font weight of the text. See &lt;a href=&quot;../text_api#matplotlib.text.Text.set_weight&quot;&gt;&lt;code&gt;Text.set_weight&lt;/code&gt;&lt;/a&gt; for possible values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16165253071bcd4a0b47d93ebdec2819547dd322" translate="yes" xml:space="preserve">
          <source>The fontsize in pixels. The artists being created should be scaled according to the given fontsize.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7cea144f33658b94648f9b5e776ac207cef5d377" translate="yes" xml:space="preserve">
          <source>The fontsize of the legend's title. Default is the default fontsize.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83e72ce95b2db6e1379b21b0a4c40aedd799a5ff" translate="yes" xml:space="preserve">
          <source>The format for the data points / data lines. See &lt;a href=&quot;matplotlib.axes.axes.plot#matplotlib.axes.Axes.plot&quot;&gt;&lt;code&gt;plot&lt;/code&gt;&lt;/a&gt; for details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce9b2be776da1e947f70037a06df4dff9d8a317f" translate="yes" xml:space="preserve">
          <source>The format for the data points / data lines. See &lt;a href=&quot;matplotlib.pyplot.plot#matplotlib.pyplot.plot&quot;&gt;&lt;code&gt;plot&lt;/code&gt;&lt;/a&gt; for details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e17272b0ac01022aa193eef92e670e077417cc91" translate="yes" xml:space="preserve">
          <source>The format or formatter to use for the labels. If a string must be a valid input for a &lt;a href=&quot;ticker_api#matplotlib.ticker.StrMethodFormatter&quot;&gt;&lt;code&gt;StrMethodFormatter&lt;/code&gt;&lt;/a&gt;. If None (the default), use a &lt;a href=&quot;ticker_api#matplotlib.ticker.ScalarFormatter&quot;&gt;&lt;code&gt;ScalarFormatter&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b71bc4d0fc11df5a9871aafcb67e30f9914ba79d" translate="yes" xml:space="preserve">
          <source>The format string should have a single variable format (%) in it. It will be applied to the value (not the position) of the tick.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="552ac63f06a3bad86559bdcc5651d5de8fb414a6" translate="yes" xml:space="preserve">
          <source>The format used in writing frame data, defaults to 'rgba'</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c563724432717fd1f0568d4efd3c945a99e0cc8" translate="yes" xml:space="preserve">
          <source>The forward function for the transform. This function must have an inverse and, for best behavior, be monotonic. It must have the signature:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d424fe7f3a4952e4b66910e5bb7171ad9fd77bce" translate="yes" xml:space="preserve">
          <source>The fraction of a pixel difference below which vertices will be simplified out.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42c62bcf100ca45d78052086685286b34b5c3016" translate="yes" xml:space="preserve">
          <source>The fractional whitespace inside the legend border. Measured in font-size units. Default is &lt;code&gt;None&lt;/code&gt;, which will take the value from &lt;code&gt;&lt;a href=&quot;https://matplotlib.org/3.1.1/tutorials/introductory/customizing.html#matplotlib-rcparams&quot;&gt;rcParams[&quot;legend.borderpad&quot;]&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2babd3c8da6aa4ce8b15273a32ee9a546d1c33e" translate="yes" xml:space="preserve">
          <source>The framework can be used for both affine and non-affine transformations. However, for speed, we want use the backend renderers to perform affine transformations whenever possible. Therefore, it is possible to perform just the affine or non-affine part of a transformation on a set of data. The affine is always assumed to occur after the non-affine. For any transform:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f22015bd4d6d908845107a20630c9515766abce" translate="yes" xml:space="preserve">
          <source>The frequencies corresponding to the elements in &lt;em&gt;Pxx&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d006a84203238d779929fb27f19ba2634838dd8" translate="yes" xml:space="preserve">
          <source>The frequencies corresponding to the elements in &lt;em&gt;Pxx&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c22a2cdfac0190abbc05365538c9cecaa92a1e8b" translate="yes" xml:space="preserve">
          <source>The frequencies corresponding to the elements in &lt;em&gt;Pxy&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f339cd00668b8d1d21527e3d37127e08b83ef6b7" translate="yes" xml:space="preserve">
          <source>The frequencies corresponding to the elements in &lt;em&gt;Pxy&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20e8ceb79513af8e7593afe7ed30c7a436bd4166" translate="yes" xml:space="preserve">
          <source>The frequencies corresponding to the elements in &lt;em&gt;spectrum&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cfcb1e0dda50de2e93ef3d0a8d0407055a406a00" translate="yes" xml:space="preserve">
          <source>The frequencies corresponding to the elements in &lt;em&gt;spectrum&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3cffea4da5739d3f9463bd72c33a1e3528d6389" translate="yes" xml:space="preserve">
          <source>The frequencies corresponding to the rows in &lt;em&gt;spectrum&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d702a6a58f7c4199565f403c89b7cb80bda92bf5" translate="yes" xml:space="preserve">
          <source>The frequencies for the elements in &lt;em&gt;Cxy&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="339e53c2ecbf52670d7139300ab8aa3b02918196" translate="yes" xml:space="preserve">
          <source>The function applied on the z-coordinates of the vertices in the viewer's coordinate system, to determine the z-order. &lt;em&gt;True&lt;/em&gt; is deprecated and equivalent to 'average'.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9582ecc11eee21160feafa63ebbdb908deb261e3" translate="yes" xml:space="preserve">
          <source>The function applied to each segment before fft-ing, designed to remove the mean or linear trend. Unlike in MATLAB, where the &lt;em&gt;detrend&lt;/em&gt; parameter is a vector, in Matplotlib is it a function. The &lt;a href=&quot;#module-matplotlib.mlab&quot;&gt;&lt;code&gt;mlab&lt;/code&gt;&lt;/a&gt; module defines &lt;a href=&quot;#matplotlib.mlab.detrend_none&quot;&gt;&lt;code&gt;detrend_none&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#matplotlib.mlab.detrend_mean&quot;&gt;&lt;code&gt;detrend_mean&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;#matplotlib.mlab.detrend_linear&quot;&gt;&lt;code&gt;detrend_linear&lt;/code&gt;&lt;/a&gt;, but you can use a custom function as well. You can also use a string to choose one of the functions: 'none' calls &lt;a href=&quot;#matplotlib.mlab.detrend_none&quot;&gt;&lt;code&gt;detrend_none&lt;/code&gt;&lt;/a&gt;. 'mean' calls &lt;a href=&quot;#matplotlib.mlab.detrend_mean&quot;&gt;&lt;code&gt;detrend_mean&lt;/code&gt;&lt;/a&gt;. 'linear' calls &lt;a href=&quot;#matplotlib.mlab.detrend_linear&quot;&gt;&lt;code&gt;detrend_linear&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5977c5431babff6e0d29ed0213af707ab7230517" translate="yes" xml:space="preserve">
          <source>The function applied to each segment before fft-ing, designed to remove the mean or linear trend. Unlike in MATLAB, where the &lt;em&gt;detrend&lt;/em&gt; parameter is a vector, in Matplotlib is it a function. The &lt;a href=&quot;../mlab_api#module-matplotlib.mlab&quot;&gt;&lt;code&gt;mlab&lt;/code&gt;&lt;/a&gt; module defines &lt;a href=&quot;../mlab_api#matplotlib.mlab.detrend_none&quot;&gt;&lt;code&gt;detrend_none&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../mlab_api#matplotlib.mlab.detrend_mean&quot;&gt;&lt;code&gt;detrend_mean&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;../mlab_api#matplotlib.mlab.detrend_linear&quot;&gt;&lt;code&gt;detrend_linear&lt;/code&gt;&lt;/a&gt;, but you can use a custom function as well. You can also use a string to choose one of the functions: 'none' calls &lt;a href=&quot;../mlab_api#matplotlib.mlab.detrend_none&quot;&gt;&lt;code&gt;detrend_none&lt;/code&gt;&lt;/a&gt;. 'mean' calls &lt;a href=&quot;../mlab_api#matplotlib.mlab.detrend_mean&quot;&gt;&lt;code&gt;detrend_mean&lt;/code&gt;&lt;/a&gt;. 'linear' calls &lt;a href=&quot;../mlab_api#matplotlib.mlab.detrend_linear&quot;&gt;&lt;code&gt;detrend_linear&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e9ed8e1061800f9eec835a8cfa93757cd7b6091" translate="yes" xml:space="preserve">
          <source>The function should take in two inputs (a tick value &lt;code&gt;x&lt;/code&gt; and a position &lt;code&gt;pos&lt;/code&gt;), and return a string containing the corresponding tick label.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="300acf3cc3749fedc18dc65745d4cb8b17d335bf" translate="yes" xml:space="preserve">
          <source>The function that creates the legend key artist. &lt;em&gt;patch_func&lt;/em&gt; should have the signature:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0918e4724fba6087263b43ac6437809a85bcc929" translate="yes" xml:space="preserve">
          <source>The function to call at each frame. The first argument will be the next value in &lt;em&gt;frames&lt;/em&gt;. Any additional positional arguments can be supplied via the &lt;em&gt;fargs&lt;/em&gt; parameter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8c0c143d47eb6bd085238e641bfb23705efe594" translate="yes" xml:space="preserve">
          <source>The grammar is based directly on that in TeX, though it cuts a few corners.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb3ad0830eb807e6beceaaa2106f8c5fcf2df187" translate="yes" xml:space="preserve">
          <source>The graphics context</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d85a5ae2ee88a9860b3de817214d57f85788b7b0" translate="yes" xml:space="preserve">
          <source>The graphics context.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7bdf2d0528dcdae58171f54196eb6f7892bdd1c8" translate="yes" xml:space="preserve">
          <source>The green array</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc8714a79b841d69f8536759cdfe071c52e8e16c" translate="yes" xml:space="preserve">
          <source>The grid line associated with the label position.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df7aab62a854f7c0943236bbab4c0ff51ce27c21" translate="yes" xml:space="preserve">
          <source>The grid lines to apply the changes on.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51607ca83ac624ee5e3cd51a77a7f276049353e9" translate="yes" xml:space="preserve">
          <source>The grid orientation follows the standard matrix convention: An array &lt;em&gt;C&lt;/em&gt; with shape (nrows, ncolumns) is plotted with the column number as &lt;em&gt;X&lt;/em&gt; and the row number as &lt;em&gt;Y&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d42d9d7708607f1e402db93ec94bc51950aa5ee0" translate="yes" xml:space="preserve">
          <source>The head and tail positions are fixed at the specified start and end points of the arrow, but the size and shape (in display coordinates) of the arrow does not change when the axis is moved or zoomed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4dbf740dd6941628bdac1ea374e88ca65210e6dc" translate="yes" xml:space="preserve">
          <source>The height of the bars.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94914ce1744a8026c80782986ee74c331fdcbb16" translate="yes" xml:space="preserve">
          <source>The height of the box.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90046017059889e9753c8d118e044a31eb35e4d6" translate="yes" xml:space="preserve">
          <source>The height of the canvas in logical units</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a49fd3f307934983c0d7e6af3d84aeb5f4dde9e8" translate="yes" xml:space="preserve">
          <source>The height of the rectangle will be squeezed by this value before the mutation and the mutated box will be stretched by the inverse of it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dbcfb723925101d8016959ab05f8e67c01c6f2f9" translate="yes" xml:space="preserve">
          <source>The height of the rectangle will be squeezed by this value before the mutation and the mutated box will be stretched by the inverse of it. For example, this allows different horizontal and vertical padding.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0db67cf4c53a44f3bc9b947f4c255e90c97fdeb6" translate="yes" xml:space="preserve">
          <source>The height values over which the contour is drawn.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe6e1a8a05bc3c937a9e27bed3aed7a00696942e" translate="yes" xml:space="preserve">
          <source>The height(s) of the bars.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92ec36f5d5ede2e5e4aa9cf683e8cf3f2de11d90" translate="yes" xml:space="preserve">
          <source>The heights of the bars.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0508fc8376755de9de81a9547c874c00273a5829" translate="yes" xml:space="preserve">
          <source>The histogram (hist) function with multiple data sets</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d16f59f5841444ebca9f935f1343b6ea97896f71" translate="yes" xml:space="preserve">
          <source>The horizontal / vertical coordinates of the data points. &lt;em&gt;x&lt;/em&gt; values are optional and default to &lt;code&gt;range(len(y))&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a7e7ccb21472b750fc899a081c5f35325a1e2e3" translate="yes" xml:space="preserve">
          <source>The horizontal alignment of the text relative to (&lt;em&gt;x&lt;/em&gt;, &lt;em&gt;y&lt;/em&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a347dc5d09a03036819a9864650729ff94daf9fb" translate="yes" xml:space="preserve">
          <source>The horizontal alignment of the xticklabels.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5238fcfac16791d440425f86f3c776de77ee9ffb" translate="yes" xml:space="preserve">
          <source>The image created by imshow containing the spectrogram</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e2ae5ddfce94894c732d68ca35b870069395a89" translate="yes" xml:space="preserve">
          <source>The image data. Supported array shapes are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9837a1561f7f09e5a674267ec0a2ee1b3cefbc87" translate="yes" xml:space="preserve">
          <source>The image data. The returned array has shape</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a56ab4409f56649fa58d31283e8392c97363c076" translate="yes" xml:space="preserve">
          <source>The image data. The shape can be one of MxN (luminance), MxNx3 (RGB) or MxNx4 (RGBA).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f28b58e777de1812d722bd9dfac603a070c741b5" translate="yes" xml:space="preserve">
          <source>The image data. This is an array of one of the following shapes:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b1c389b157f96819c5fdd9f682e8f876f06b77a" translate="yes" xml:space="preserve">
          <source>The image extent along the x-axis. The default sets &lt;em&gt;xmin&lt;/em&gt; to the left border of the first bin (&lt;em&gt;spectrum&lt;/em&gt; column) and &lt;em&gt;xmax&lt;/em&gt; to the right border of the last bin. Note that for &lt;em&gt;noverlap&amp;gt;0&lt;/em&gt; the width of the bins is smaller than those of the segments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e70dfa0250ab5d0ea16aa46a370e86319039a14b" translate="yes" xml:space="preserve">
          <source>The image file -- must be PNG, or Pillow-readable if you have &lt;a href=&quot;http://python-pillow.org/&quot;&gt;Pillow&lt;/a&gt; installed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5ce3b1a40bf638ac20c4d6786a6b9f53e30a22d" translate="yes" xml:space="preserve">
          <source>The image file format assumed for reading the data. If not given, the format is deduced from the filename. If nothing can be deduced, PNG is tried.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c5d8e2695cf0aafe2b6aa0b3235b45c29f15799" translate="yes" xml:space="preserve">
          <source>The image file to read. This can be a filename, a URL or a Python file-like object opened in read-binary mode.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d23fce642eab069f91ed45a1c35fb653fb861ecd" translate="yes" xml:space="preserve">
          <source>The image is attached to the lower or upper left corner depending on &lt;em&gt;origin&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11baef70e4df9298f2897f711f88afe96d05d220" translate="yes" xml:space="preserve">
          <source>The image module supports basic image loading, rescaling and display operations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d459af7078533d0a30d54e1962f6e2981ce6874" translate="yes" xml:space="preserve">
          <source>The image quality, on a scale from 1 (worst) to 100 (best). The default is &lt;code&gt;&lt;a href=&quot;https://matplotlib.org/3.1.1/tutorials/introductory/customizing.html#matplotlib-rcparams&quot;&gt;rcParams[&quot;savefig.jpeg_quality&quot;]&lt;/a&gt;&lt;/code&gt;. Values above 95 should be avoided; 100 completely disables the JPEG quantization stage.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="513f2f1267792cd2479c33a33fe7c9f2e3dad7eb" translate="yes" xml:space="preserve">
          <source>The image quality, on a scale from 1 (worst) to 95 (best). Applicable only if &lt;em&gt;format&lt;/em&gt; is jpg or jpeg, ignored otherwise. If &lt;em&gt;None&lt;/em&gt;, defaults to &lt;code&gt;&lt;a href=&quot;https://matplotlib.org/3.1.1/tutorials/introductory/customizing.html#matplotlib-rcparams&quot;&gt;rcParams[&quot;savefig.jpeg_quality&quot;]&lt;/a&gt;&lt;/code&gt; (95 by default). Values above 95 should be avoided; 100 completely disables the JPEG quantization stage.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93bebac55b55413de9eafca3114d435975faa1be" translate="yes" xml:space="preserve">
          <source>The image to place in the button, if not &lt;em&gt;None&lt;/em&gt;. Can be any legal arg to imshow (numpy array, matplotlib Image instance, or Pillow Image).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae2d8bc222a36f3289e5feb3a9f264c3d93ca09d" translate="yes" xml:space="preserve">
          <source>The index of the initially selected button.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79c1d24b9a8fa9fd2883c094cf87a748f37fd6f4" translate="yes" xml:space="preserve">
          <source>The index starts from 0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9325ef4570f9f1589096b69f3e649ca5b8f3348" translate="yes" xml:space="preserve">
          <source>The indices &lt;em&gt;start&lt;/em&gt; and &lt;em&gt;stop&lt;/em&gt; define the range of the subplot within the &lt;a href=&quot;matplotlib.gridspec.gridspec#matplotlib.gridspec.GridSpec&quot;&gt;&lt;code&gt;GridSpec&lt;/code&gt;&lt;/a&gt;. &lt;em&gt;stop&lt;/em&gt; is inclusive (i.e. for a single cell &lt;code&gt;start == stop&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="248f7b90a1ca57daafba4af370ce3669f3ac0f04" translate="yes" xml:space="preserve">
          <source>The indices of the columns to auto-scale.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10f6a309362255e026e8a948fee94d7d7cedf97b" translate="yes" xml:space="preserve">
          <source>The initial check states of the buttons. The list must have the same length as &lt;em&gt;labels&lt;/em&gt;. If not given, all buttons are unchecked.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77d18377b795d9b019be29a41ccaa856c486dc5e" translate="yes" xml:space="preserve">
          <source>The initial endpoints.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2700a0e728c2dc6813d944b116c06794600e245" translate="yes" xml:space="preserve">
          <source>The inner radial limit.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd3d1da9b59a7c409527a498ee35aa20ed7a09e5" translate="yes" xml:space="preserve">
          <source>The inner workings of &lt;a href=&quot;_as_gen/matplotlib.animation.funcanimation#matplotlib.animation.FuncAnimation&quot;&gt;&lt;code&gt;FuncAnimation&lt;/code&gt;&lt;/a&gt; is more-or-less:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b941f334dfce6c774093743936f754bf8137c6b" translate="yes" xml:space="preserve">
          <source>The input data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90f8c95ab1ff57fb6dd39a94e4f1616b7b7b70c2" translate="yes" xml:space="preserve">
          <source>The inset axes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e74613b4c1dd60ebec3fc89dbf9b3839122ceb1" translate="yes" xml:space="preserve">
          <source>The interactive backends also provide the ability to rotate and zoom the 3D scene. One can rotate the 3D scene by simply clicking-and-dragging the scene. Zooming is done by right-clicking the scene and dragging the mouse up and down. Note that one does not use the zoom button like one would use for regular 2D plots.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="680d8b286a20ec2a215d22c7a93f5389214e8214" translate="yes" xml:space="preserve">
          <source>The interpolation is based on a Clough-Tocher subdivision scheme of the &lt;em&gt;triangulation&lt;/em&gt; mesh (to make it clearer, each triangle of the grid will be divided in 3 child-triangles, and on each child triangle the interpolated function is a cubic polynomial of the 2 coordinates). This technique originates from FEM (Finite Element Method) analysis; the element used is a reduced Hsieh-Clough-Tocher (HCT) element. Its shape functions are described in &lt;a href=&quot;#r0be0c58fd53f-1&quot; id=&quot;id1&quot;&gt;[R0be0c58fd53f-1]&lt;/a&gt;. The assembled function is guaranteed to be C1-smooth, i.e. it is continuous and its first derivatives are also continuous (this is easy to show inside the triangles but is also true when crossing the edges).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fce1dc751743715ff837a083d703ada46a3bcb58" translate="yes" xml:space="preserve">
          <source>The interpolation method used. If &lt;em&gt;None&lt;/em&gt;&lt;code&gt;&lt;a href=&quot;https://matplotlib.org/3.1.1/tutorials/introductory/customizing.html#matplotlib-rcparams&quot;&gt;rcParams[&quot;image.interpolation&quot;]&lt;/a&gt;&lt;/code&gt; is used, which defaults to 'nearest'.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="947f207f9b81b63b2973eb3422a8c326df19c2de" translate="yes" xml:space="preserve">
          <source>The interpolation scheme used in the resampling. See the &lt;em&gt;interpolation&lt;/em&gt; parameter of &lt;a href=&quot;_as_gen/matplotlib.axes.axes.imshow#matplotlib.axes.Axes.imshow&quot;&gt;&lt;code&gt;imshow&lt;/code&gt;&lt;/a&gt; for possible values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0806a9ec7d7528ec5d356fd16a5b5077cdcfb0c2" translate="yes" xml:space="preserve">
          <source>The interval is used to specify multiples that are appropriate for the frequency of ticking. For instance, every 7 days is sensible for daily ticks, but for minutes/seconds, 15 or 30 make sense. You can customize this dictionary by doing:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bccdea806a30ff1b58da9b66c8d5ed283cf60882" translate="yes" xml:space="preserve">
          <source>The inverse of &lt;code&gt;covariance&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa80e219f810225fe1df5cffe4cccc411608293a" translate="yes" xml:space="preserve">
          <source>The inverse of the forward function. Signature as &lt;code&gt;forward&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="accbe1f7c02eb09bbc0d0184f4d89ce9ca61d7a0" translate="yes" xml:space="preserve">
          <source>The inverse of the polar transform, mapping Cartesian coordinate space &lt;em&gt;x&lt;/em&gt; and &lt;em&gt;y&lt;/em&gt; back to &lt;em&gt;theta&lt;/em&gt; and &lt;em&gt;r&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98b9631061e73a154f040bb65dda8ba348220db1" translate="yes" xml:space="preserve">
          <source>The joinstyle</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ccdbf152432002c32f405028ba2795e7947dfcdc" translate="yes" xml:space="preserve">
          <source>The key pressed when the mouse event triggered, e.g. 'shift'. See &lt;a href=&quot;#matplotlib.backend_bases.KeyEvent&quot;&gt;&lt;code&gt;KeyEvent&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89290b53bd1bbbb24c4af59642899057c73ca995" translate="yes" xml:space="preserve">
          <source>The keyboard can also be used to select points in case your mouse does not have one or more of the buttons. The delete and backspace keys act like right clicking (i.e., remove last point), the enter key terminates input and any other key (not already used by the window manager) selects a point.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09f54ec7a640520918eaed5ce3fa4f632d528e3e" translate="yes" xml:space="preserve">
          <source>The kwargs are &lt;a href=&quot;#matplotlib.lines.Line2D&quot;&gt;&lt;code&gt;Line2D&lt;/code&gt;&lt;/a&gt; properties:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e37645130d7d17fde6018c4cac9dfdb217a348d9" translate="yes" xml:space="preserve">
          <source>The label colors:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="556ddbaf87b43ac3b91086ba448cb193dbc71891" translate="yes" xml:space="preserve">
          <source>The label mode:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13cc53039db43939eadc2fdf8341ba4e90b62209" translate="yes" xml:space="preserve">
          <source>The label text of the currently selected button.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="035ea476b912542922b9ed7c7d991eb115a2373a" translate="yes" xml:space="preserve">
          <source>The label text.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75d6749e737128604290d028dc16370a9d973b24" translate="yes" xml:space="preserve">
          <source>The label to use for the stems in legends.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a88acdbff65faa6fb77cdd367dbed867fff7593" translate="yes" xml:space="preserve">
          <source>The labels have the form &quot;0 &amp;lt; x &amp;lt;= 1&quot; stating the data ranges which the artists represent.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92b04ecf024f050f9cda1ab351fb83baca2a1706" translate="yes" xml:space="preserve">
          <source>The labels of the check buttons.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="304500a46d157affa54546dd348b66f64931fa71" translate="yes" xml:space="preserve">
          <source>The labels to use at each radial gridline. The &lt;a href=&quot;../projections_api#matplotlib.projections.polar.ThetaFormatter&quot;&gt;&lt;code&gt;projections.polar.ThetaFormatter&lt;/code&gt;&lt;/a&gt; will be used if None.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac1dbe6c27a1bc3431f1974ee223174b1d2be199" translate="yes" xml:space="preserve">
          <source>The labels to use at each radial gridline. The &lt;a href=&quot;../ticker_api#matplotlib.ticker.ScalarFormatter&quot;&gt;&lt;code&gt;matplotlib.ticker.ScalarFormatter&lt;/code&gt;&lt;/a&gt; will be used if None.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5030f013b049e03daa6026cc13e2cb9a9379f1ec" translate="yes" xml:space="preserve">
          <source>The labels to use at each radial gridline. The &lt;a href=&quot;ticker_api#matplotlib.ticker.ScalarFormatter&quot;&gt;&lt;code&gt;matplotlib.ticker.ScalarFormatter&lt;/code&gt;&lt;/a&gt; will be used if None.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="763ca316f24ac5e1f967d909411d2474790577a0" translate="yes" xml:space="preserve">
          <source>The labels to use at each theta gridline. The &lt;a href=&quot;#matplotlib.projections.polar.ThetaFormatter&quot;&gt;&lt;code&gt;projections.polar.ThetaFormatter&lt;/code&gt;&lt;/a&gt; will be used if None.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b238a335f73b04ce72fed38ba98d438db14f597" translate="yes" xml:space="preserve">
          <source>The lag vector.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5cc2696ab7d449107e1ac6c434b9396123b14562" translate="yes" xml:space="preserve">
          <source>The largest increment is given by a triangle (or &quot;flag&quot;). After those come full lines (barbs). The smallest increment is a half line. There is only, of course, ever at most 1 half line. If the magnitude is small and only needs a single half-line and no full lines or triangles, the half-line is offset from the end of the barb so that it can be easily distinguished from barbs with a single full line. The magnitude for the barb shown above would nominally be 65, using the standard increments of 50, 10, and 5.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57451ced2aa237543bbc58b7670bc82298ad04d6" translate="yes" xml:space="preserve">
          <source>The last colorbar associated with this ScalarMappable. May be None.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34751866f51304257f4f3d70e8aa398346322ff4" translate="yes" xml:space="preserve">
          <source>The left and right xlims may be passed as the tuple (&lt;em&gt;left&lt;/em&gt;, &lt;em&gt;right&lt;/em&gt;) as the first positional argument (or as the &lt;em&gt;left&lt;/em&gt; keyword argument).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7cbf9492f9985b14403cc20bee7e2a869dfb8b7" translate="yes" xml:space="preserve">
          <source>The left edge of the bounding box.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d371fe90d2a5eaf2c635bcf1b601d5f066cf75de" translate="yes" xml:space="preserve">
          <source>The left edge, bottom edge, width, and height of the inset axes, in units of the normalized coordinate of the &lt;em&gt;parent&lt;/em&gt; axes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0399b6aba6998a5807592c511baaacb04bd3a1b9" translate="yes" xml:space="preserve">
          <source>The left side of the subplots of the figure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c577446fc46c9fc175a34374ca1d32a30c9ffbb" translate="yes" xml:space="preserve">
          <source>The left xlim in data coordinates. Passing &lt;em&gt;None&lt;/em&gt; leaves the limit unchanged.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d890e6d8a60ca1dcd09b4f1146a60caff763a98" translate="yes" xml:space="preserve">
          <source>The left/bottom tick label.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="afe9dbbe1cdd7aaadc8a42482bbeeff2ad20db80" translate="yes" xml:space="preserve">
          <source>The left/bottom tick marker.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14820d8ed3b15c2db2d6bdaed767077f2688b71e" translate="yes" xml:space="preserve">
          <source>The leftmost and rightmost edges of the bins along each dimension (if not specified explicitly in the bins parameters): &lt;code&gt;[[xmin,
xmax], [ymin, ymax]]&lt;/code&gt;. All values outside of this range will be considered outliers and not tallied in the histogram.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7653ecad4beb294ea27e72b70baf9f5301e7e6e4" translate="yes" xml:space="preserve">
          <source>The legend for which these legend artists are being created.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc08601996f253415135b0a46d68e39fd9e96399" translate="yes" xml:space="preserve">
          <source>The legend location can be specified by setting &lt;em&gt;loc&lt;/em&gt; with a tuple of 2 floats, which is interpreted as the lower-left corner of the legend in the normalized axes coordinate.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f9ff8592c4d416387a28170bd3d06c9d0da875d" translate="yes" xml:space="preserve">
          <source>The legend module defines the Legend class, which is responsible for drawing legends associated with axes and/or figures.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17da91a94fb9173e334fdba793aebf2c6b9b4c9c" translate="yes" xml:space="preserve">
          <source>The legend parameter to be changed when dragged:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a79a28ecdb42815302f9c45cd3b502790153641" translate="yes" xml:space="preserve">
          <source>The legend's title. Default is no title (&lt;code&gt;None&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="780a9ece4a83485b29c2636258a27bdc4f20f1d1" translate="yes" xml:space="preserve">
          <source>The length of each quiver, default to 1.0, the unit is the same with the axes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="471847473beb1ec5816dbae956e1bcaf4217e13e" translate="yes" xml:space="preserve">
          <source>The length of handles and labels should be the same in this case. If they are not, they are truncated to the smaller length.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af10df70a853736cb7d65798414a78e5dc9e5ea5" translate="yes" xml:space="preserve">
          <source>The length of the arrow along x and y direction.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="921f15c334577b1adda22814b894a9feda2caa3a" translate="yes" xml:space="preserve">
          <source>The length of the arrow head in points</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6cfa9057149ddf8084f36ca8c0825ac6fe883ea" translate="yes" xml:space="preserve">
          <source>The length of the error bar caps in points. Default: None, which will take the value from &lt;code&gt;&lt;a href=&quot;https://matplotlib.org/3.1.1/tutorials/introductory/customizing.html#matplotlib-rcparams&quot;&gt;rcParams[&quot;errorbar.capsize&quot;]&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82b848841e68f6eac43383b23cd9aaa53f730cac" translate="yes" xml:space="preserve">
          <source>The length of the error bar caps in points. If None, it will take the value from &lt;code&gt;&lt;a href=&quot;https://matplotlib.org/3.1.1/tutorials/introductory/customizing.html#matplotlib-rcparams&quot;&gt;rcParams[&quot;errorbar.capsize&quot;]&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa1173b2b620bd88d9a3ae34d81e321307e2b2a1" translate="yes" xml:space="preserve">
          <source>The length of the horizontal axis.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc88cbbd7efb0d834a0bf8751a19a9c579d142b6" translate="yes" xml:space="preserve">
          <source>The length of the key</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70b6506deee4c5340ab457c78da8db7aac6b6eb7" translate="yes" xml:space="preserve">
          <source>The length of the legend handles. Measured in font-size units. Default is &lt;code&gt;None&lt;/code&gt;, which will take the value from &lt;code&gt;&lt;a href=&quot;https://matplotlib.org/3.1.1/tutorials/introductory/customizing.html#matplotlib-rcparams&quot;&gt;rcParams[&quot;legend.handlelength&quot;]&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d09889962116efec78b1d4986529950fbd60e785" translate="yes" xml:space="preserve">
          <source>The length of the vertical axis.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38913b9a809836618c26d6aebaa2334bc6322434" translate="yes" xml:space="preserve">
          <source>The length of the wiggle along the line, in pixels (default 128).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2c2f021ff372d36efb0b139cac438d15988c6ef" translate="yes" xml:space="preserve">
          <source>The length of the wiggle along the line, in pixels (default 128.0)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a4f8a3d05c71883346d17675b26f29737943d8e" translate="yes" xml:space="preserve">
          <source>The length of the wiggle along the line.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9bdd0e76132492088abe5c92af37e682cec17d7b" translate="yes" xml:space="preserve">
          <source>The lengths of second axes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aadeab64372964cb1f9189c88f1cf2c5dd429c2b" translate="yes" xml:space="preserve">
          <source>The lengths of the first axes (e.g., major axis lengths).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fef68c34eacdf4c199a67da4a903260845ac0a30" translate="yes" xml:space="preserve">
          <source>The lightsource to use when &lt;code&gt;shade&lt;/code&gt; is True.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cdb7ff1ebe9f818820adeaedcdc695eec8eea0ba" translate="yes" xml:space="preserve">
          <source>The lightsource to use when &lt;em&gt;shade&lt;/em&gt; is True.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99afdffa824d234c085ce2b6c37b1c58de0ed559" translate="yes" xml:space="preserve">
          <source>The limits of the bins. The default assigns the limits based on &lt;em&gt;gridsize&lt;/em&gt;, &lt;em&gt;x&lt;/em&gt;, &lt;em&gt;y&lt;/em&gt;, &lt;em&gt;xscale&lt;/em&gt; and &lt;em&gt;yscale&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31fcdbfa05532ddf9fabeb406b02dd27057760a1" translate="yes" xml:space="preserve">
          <source>The line color of the errorbars.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e95c2da0a3d222ea3028b98b9275c70d72653f25" translate="yes" xml:space="preserve">
          <source>The line created by this function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00ba921d2dd031e7789fdf2b22e1b1f188152a12" translate="yes" xml:space="preserve">
          <source>The line created by this function. Only returned if &lt;em&gt;return_line&lt;/em&gt; is True.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aee93b45984b048677e3741008504fabeeca3ebd" translate="yes" xml:space="preserve">
          <source>The line for the sides of the polygon is drawn with the properties given by &lt;code&gt;lineprops&lt;/code&gt;. The default is &lt;code&gt;dict(color='k', linestyle='-',
linewidth=2, alpha=0.5)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dcaaab7dd071f828415247555a703e972562fb25" translate="yes" xml:space="preserve">
          <source>The line is drawn with &lt;em&gt;lineprops&lt;/em&gt;; default:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d549a39a227d6813c2c74d6ca1fb5277531e7452" translate="yes" xml:space="preserve">
          <source>The line style.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e968b2f7bfed7efe6625692ca5e341293963d6a" translate="yes" xml:space="preserve">
          <source>The line width of the contour lines.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7d88679233c6b8fb7cd2d08f6a76cd5f5566ec3" translate="yes" xml:space="preserve">
          <source>The line width(s) of the event lines, in points. If it is None, defaults to its rcParams setting.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37091e491f1bf06d751bc5610eee19d0fd69c17b" translate="yes" xml:space="preserve">
          <source>The linestyle for plotting the data points. Only used if &lt;em&gt;usevlines&lt;/em&gt; is &lt;code&gt;False&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95db31b0e1243fa0977cf584188005a996bf9be3" translate="yes" xml:space="preserve">
          <source>The linewidth of the errorbar lines. If None, the linewidth of the current style is used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8899caed378b4da86d8b083cee8f40332aec925a" translate="yes" xml:space="preserve">
          <source>The linewidth of the frame (i.e. the edge linewidth of the figure patch).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee1a2cfab6285d9975e06380805615acf3e4eda3" translate="yes" xml:space="preserve">
          <source>The linewidth of the marker edges. Note: The default &lt;em&gt;edgecolors&lt;/em&gt; is 'face'. You may want to change this as well. If &lt;em&gt;None&lt;/em&gt;, defaults to rcParams &lt;code&gt;lines.linewidth&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0bd6cac90776aa7e5e1cc749a25b582ba8cc1e58" translate="yes" xml:space="preserve">
          <source>The list of codes in the &lt;a href=&quot;#matplotlib.path.Path&quot;&gt;&lt;code&gt;Path&lt;/code&gt;&lt;/a&gt; as a 1-D numpy array. Each code is one of &lt;a href=&quot;#matplotlib.path.Path.STOP&quot;&gt;&lt;code&gt;STOP&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#matplotlib.path.Path.MOVETO&quot;&gt;&lt;code&gt;MOVETO&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#matplotlib.path.Path.LINETO&quot;&gt;&lt;code&gt;LINETO&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#matplotlib.path.Path.CURVE3&quot;&gt;&lt;code&gt;CURVE3&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#matplotlib.path.Path.CURVE4&quot;&gt;&lt;code&gt;CURVE4&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#matplotlib.path.Path.CLOSEPOLY&quot;&gt;&lt;code&gt;CLOSEPOLY&lt;/code&gt;&lt;/a&gt;. For codes that correspond to more than one vertex (&lt;a href=&quot;#matplotlib.path.Path.CURVE3&quot;&gt;&lt;code&gt;CURVE3&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#matplotlib.path.Path.CURVE4&quot;&gt;&lt;code&gt;CURVE4&lt;/code&gt;&lt;/a&gt;), that code will be repeated so that the length of &lt;code&gt;self.vertices&lt;/code&gt; and &lt;code&gt;self.codes&lt;/code&gt; is always the same.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7df7dcd4342fc6627dd4d9cf64ca88aceba54a21" translate="yes" xml:space="preserve">
          <source>The list of extensions to test, e.g. &lt;code&gt;['png', 'pdf']&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a57406f6cafe84be1a3bf39d10d2b949ade5bc8" translate="yes" xml:space="preserve">
          <source>The list of vertices in the &lt;a href=&quot;#matplotlib.path.Path&quot;&gt;&lt;code&gt;Path&lt;/code&gt;&lt;/a&gt; as an Nx2 numpy array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4c68044497324f71f1e719f2f5b42c1bf109c15" translate="yes" xml:space="preserve">
          <source>The local variable (highest priority)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6490d72263f8bd77dabc193ecc8956bd2bbca80b" translate="yes" xml:space="preserve">
          <source>The location can also be a 2-tuple giving the coordinates of the lower-left corner of the legend in axes coordinates (in which case &lt;em&gt;bbox_to_anchor&lt;/em&gt; will be ignored).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea5335be0863a4952e3d5238af7a8337844e3b78" translate="yes" xml:space="preserve">
          <source>The location of grid is determined by similar way as the SubplotParams.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc7c2128abbc4b50d1c4aeb3b98f249544347bf9" translate="yes" xml:space="preserve">
          <source>The location of the key; additional explanation follows.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2ee75a4e9cd13811d93bd03308a5b4d9aebb593" translate="yes" xml:space="preserve">
          <source>The location of the legend.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99d1b790089df9cfdfb771566f073d5ab2d16563" translate="yes" xml:space="preserve">
          <source>The location of the minor x/y ticks. If &lt;em&gt;None&lt;/em&gt;, reasonable locations are automatically chosen depending on the number of decades in the plot. See &lt;a href=&quot;matplotlib.axes.axes.set_xscale#matplotlib.axes.Axes.set_xscale&quot;&gt;&lt;code&gt;Axes.set_xscale&lt;/code&gt;&lt;/a&gt; / &lt;a href=&quot;matplotlib.axes.axes.set_yscale#matplotlib.axes.Axes.set_yscale&quot;&gt;&lt;code&gt;Axes.set_yscale&lt;/code&gt;&lt;/a&gt; for details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7d55fd5dbd6f87276ddd8ba1d456a73c3f8bb6c" translate="yes" xml:space="preserve">
          <source>The location of the minor xticks. If &lt;em&gt;None&lt;/em&gt;, reasonable locations are automatically chosen depending on the number of decades in the plot. See &lt;a href=&quot;matplotlib.axes.axes.set_xscale#matplotlib.axes.Axes.set_xscale&quot;&gt;&lt;code&gt;Axes.set_xscale&lt;/code&gt;&lt;/a&gt; for details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49f64a563b5820e7be3b6002cabd4f46dc7c8319" translate="yes" xml:space="preserve">
          <source>The location of the minor yticks. If &lt;em&gt;None&lt;/em&gt;, reasonable locations are automatically chosen depending on the number of decades in the plot. See &lt;a href=&quot;matplotlib.axes.axes.set_yscale#matplotlib.axes.Axes.set_yscale&quot;&gt;&lt;code&gt;Axes.set_yscale&lt;/code&gt;&lt;/a&gt; for details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7c0249a8abbde7e21a53b190d414f780b1718e9" translate="yes" xml:space="preserve">
          <source>The location or locations to place the patches in the collection along the &lt;em&gt;zdir&lt;/em&gt; axis. Default: 0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd00800cd842f3cd52070d48a084ebb8f6a608ba" translate="yes" xml:space="preserve">
          <source>The locator is used to determine the contour levels if they are not given explicitly via &lt;em&gt;levels&lt;/em&gt;. Defaults to &lt;a href=&quot;../ticker_api#matplotlib.ticker.MaxNLocator&quot;&gt;&lt;code&gt;MaxNLocator&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4f12ad73d6eda2f4400bf55cc83fcec3fbf353e" translate="yes" xml:space="preserve">
          <source>The locked value for x0, or None to leave unlocked.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14ba645b816c8374a0848759254eb4fb86834d86" translate="yes" xml:space="preserve">
          <source>The locked value for x1, or None to leave unlocked.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1bc8547abe4efec5c48b9b65e7475aa8c471b4cd" translate="yes" xml:space="preserve">
          <source>The locked value for y0, or None to leave unlocked.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2439c549e9c5c32b892a2f083fb1da62371dfc15" translate="yes" xml:space="preserve">
          <source>The locked value for y1, or None to leave unlocked.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90834fd464d3cf6c95bc3c09145a4accc3a0af28" translate="yes" xml:space="preserve">
          <source>The log level of the handler.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b2e7ab364b14c7e65499f46e52d5bdcab1d31e8" translate="yes" xml:space="preserve">
          <source>The lookup table is generated using linear interpolation for each primary color, with the 0-1 domain divided into any number of segments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8da9473e9bbafda3a94ceefea061b64900ccb7f" translate="yes" xml:space="preserve">
          <source>The lookup table where &lt;code&gt;lut[x * (N-1)]&lt;/code&gt; gives the closest value for values of x between 0 and 1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b690133ebd57ff594d3242692fe1a14982be381" translate="yes" xml:space="preserve">
          <source>The lower and upper bounds. If &lt;em&gt;None&lt;/em&gt;, the respective axis bound is not modified.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01b003e1f9df70c42c1192ee226ac35baa4e2b3e" translate="yes" xml:space="preserve">
          <source>The lower and upper range of the bins. Lower and upper outliers are ignored. If not provided, &lt;em&gt;range&lt;/em&gt; is &lt;code&gt;(x.min(), x.max())&lt;/code&gt;. Range has no effect if &lt;em&gt;bins&lt;/em&gt; is a sequence.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c72d9abec62c7b3b59a3c287c529dbfbe80bb3e3" translate="yes" xml:space="preserve">
          <source>The lower left corner of the box.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a96de71306ea147dcc72fcea22ffbbad8f45ccea" translate="yes" xml:space="preserve">
          <source>The main artist classes are &lt;a href=&quot;mpl_toolkits.axisartist.axis_artist.axisartist#mpl_toolkits.axisartist.axis_artist.AxisArtist&quot;&gt;&lt;code&gt;AxisArtist&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;mpl_toolkits.axisartist.axis_artist.gridlinescollection#mpl_toolkits.axisartist.axis_artist.GridlinesCollection&quot;&gt;&lt;code&gt;GridlinesCollection&lt;/code&gt;&lt;/a&gt;. While &lt;a href=&quot;mpl_toolkits.axisartist.axis_artist.gridlinescollection#mpl_toolkits.axisartist.axis_artist.GridlinesCollection&quot;&gt;&lt;code&gt;GridlinesCollection&lt;/code&gt;&lt;/a&gt; is responsible for drawing grid lines, &lt;a href=&quot;mpl_toolkits.axisartist.axis_artist.axisartist#mpl_toolkits.axisartist.axis_artist.AxisArtist&quot;&gt;&lt;code&gt;AxisArtist&lt;/code&gt;&lt;/a&gt; is responsible for all other artists. &lt;a href=&quot;mpl_toolkits.axisartist.axis_artist.axisartist#mpl_toolkits.axisartist.axis_artist.AxisArtist&quot;&gt;&lt;code&gt;AxisArtist&lt;/code&gt;&lt;/a&gt; has attributes that are associated with each type of artists:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3bafaad2bf5dd9375703d02e51b05858d355da81" translate="yes" xml:space="preserve">
          <source>The main axis shows frequency, and the secondary axis shows period.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b047e5e87a5e1d54946631523b453ad99a70fe5e" translate="yes" xml:space="preserve">
          <source>The main difference lies in the created object and internal data handling: While &lt;a href=&quot;matplotlib.axes.axes.pcolor#matplotlib.axes.Axes.pcolor&quot;&gt;&lt;code&gt;pcolor&lt;/code&gt;&lt;/a&gt; returns a &lt;a href=&quot;../collections_api#matplotlib.collections.PolyCollection&quot;&gt;&lt;code&gt;PolyCollection&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#matplotlib.axes.Axes.pcolormesh&quot;&gt;&lt;code&gt;pcolormesh&lt;/code&gt;&lt;/a&gt; returns a &lt;a href=&quot;../collections_api#matplotlib.collections.QuadMesh&quot;&gt;&lt;code&gt;QuadMesh&lt;/code&gt;&lt;/a&gt;. The latter is more specialized for the given purpose and thus is faster. It should almost always be preferred.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70e9dde9ef801832d7842321f6dcc0dbf6aaf9fc" translate="yes" xml:space="preserve">
          <source>The main difference lies in the created object and internal data handling: While &lt;a href=&quot;matplotlib.axes.axes.pcolor#matplotlib.axes.Axes.pcolor&quot;&gt;&lt;code&gt;pcolor&lt;/code&gt;&lt;/a&gt; returns a &lt;a href=&quot;../collections_api#matplotlib.collections.PolyCollection&quot;&gt;&lt;code&gt;PolyCollection&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;matplotlib.axes.axes.pcolormesh#matplotlib.axes.Axes.pcolormesh&quot;&gt;&lt;code&gt;pcolormesh&lt;/code&gt;&lt;/a&gt; returns a &lt;a href=&quot;../collections_api#matplotlib.collections.QuadMesh&quot;&gt;&lt;code&gt;QuadMesh&lt;/code&gt;&lt;/a&gt;. The latter is more specialized for the given purpose and thus is faster. It should almost always be preferred.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d1295bbe0bafb55dc38877bc45d855f3c745a16" translate="yes" xml:space="preserve">
          <source>The main duty of &lt;a href=&quot;#matplotlib.mathtext.Hlist.hpack&quot;&gt;&lt;code&gt;hpack()&lt;/code&gt;&lt;/a&gt; is to compute the dimensions of the resulting boxes, and to adjust the glue if one of those dimensions is pre-specified. The computed sizes normally enclose all of the material inside the new box; but some items may stick out if negative glue is used, if the box is overfull, or if a &lt;code&gt;\vbox&lt;/code&gt; includes other boxes that have been shifted left.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="071a505351de9135068c57f149d15dba4a4c5fd8" translate="yes" xml:space="preserve">
          <source>The main duty of &lt;a href=&quot;#matplotlib.mathtext.Vlist.vpack&quot;&gt;&lt;code&gt;vpack()&lt;/code&gt;&lt;/a&gt; is to compute the dimensions of the resulting boxes, and to adjust the glue if one of those dimensions is pre-specified.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c2380662b7f6de1649b360e6ff31a849abe7b20" translate="yes" xml:space="preserve">
          <source>The major ticks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47d2060ad6a8abece885e1bb8bb7bfff2105ee2b" translate="yes" xml:space="preserve">
          <source>The marker can also be a tuple &lt;code&gt;(numsides, style, angle)&lt;/code&gt;, which will create a custom, regular symbol.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f83c86320a4e70223d05d4c31c75f60fa2a3b36d" translate="yes" xml:space="preserve">
          <source>The marker color. Possible values:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f3fe8f50ea0b734a4ee43f210ed041a98c8386f" translate="yes" xml:space="preserve">
          <source>The marker for plotting the data points. Only used if &lt;em&gt;usevlines&lt;/em&gt; is &lt;code&gt;False&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="765b538ab5e913d098cb6965dfdf040dd5cb1651" translate="yes" xml:space="preserve">
          <source>The marker size in points**2. Default is &lt;code&gt;rcParams['lines.markersize'] ** 2&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f32296f165dca082491343b42f832c761ca676a" translate="yes" xml:space="preserve">
          <source>The marker size in points**2. Either an array of the same length as &lt;em&gt;xs&lt;/em&gt; and &lt;em&gt;ys&lt;/em&gt; or a single value to make all markers the same size.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1a9cac5e23aed7494dde79bc0c71fb38761f09c" translate="yes" xml:space="preserve">
          <source>The marker style. &lt;em&gt;marker&lt;/em&gt; can be either an instance of the class or the text shorthand for a particular marker. Defaults to &lt;code&gt;None&lt;/code&gt;, in which case it takes the value of &lt;code&gt;&lt;a href=&quot;https://matplotlib.org/3.1.1/tutorials/introductory/customizing.html#matplotlib-rcparams&quot;&gt;rcParams[&quot;scatter.marker&quot;]&lt;/a&gt;&lt;/code&gt; = 'o'. See &lt;a href=&quot;../markers_api#module-matplotlib.markers&quot;&gt;&lt;code&gt;markers&lt;/code&gt;&lt;/a&gt; for more information about marker styles.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20f25b34aefea11c1ba8d50a3f6097423222fba1" translate="yes" xml:space="preserve">
          <source>The markers for the vertices of the polygon are drawn with the properties given by &lt;code&gt;markerprops&lt;/code&gt;. The default is &lt;code&gt;dict(marker='o',
markersize=7, mec='k', mfc='k', alpha=0.5)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="064b48b12675e27602098be85c2c0ea7452d86b3" translate="yes" xml:space="preserve">
          <source>The matplotlib &lt;code&gt;mpl_toolkits.axes_grid1&lt;/code&gt; toolkit is a collection of helper classes to ease displaying multiple images in matplotlib. While the aspect parameter in matplotlib adjust the position of the single axes, axes_grid1 toolkit provides a framework to adjust the position of multiple axes according to their aspects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4590fe604ab6394fce04b4e52984222bf6d54206" translate="yes" xml:space="preserve">
          <source>The matplotlib text instance representing the title</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="644f29bee660da814a6a5cdbfe2176e82ee866fb" translate="yes" xml:space="preserve">
          <source>The matrix to be displayed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fcb5ab7ab802498330e3deb35a42c364856cb7d6" translate="yes" xml:space="preserve">
          <source>The matrix will be shown the way it would be printed, with the first row at the top. Row and column numbering is zero-based.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f0528cf7df92f92c169aaed61f63b86b1827f36" translate="yes" xml:space="preserve">
          <source>The maximum saturation value that the &lt;em&gt;intensity&lt;/em&gt; map can shift the output image to. Defaults to 1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0694665eea335f8ed88ee84e16445d1b44a6529e" translate="yes" xml:space="preserve">
          <source>The maximum value (&quot;v&quot; in &quot;hsv&quot;) that the &lt;em&gt;intensity&lt;/em&gt; map can shift the output image to. Defaults to 1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e68abf6b832471eca7594c17225f2a1210764798" translate="yes" xml:space="preserve">
          <source>The maximum value of the slider.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ba69c00d6081d7686ed8fcb336637dc806860f1" translate="yes" xml:space="preserve">
          <source>The maximum value used in colormapping &lt;em&gt;data&lt;/em&gt;. If &lt;em&gt;None&lt;/em&gt; the maximum value in &lt;em&gt;data&lt;/em&gt; is used. If &lt;em&gt;norm&lt;/em&gt; is specified, then this argument will be ignored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9463a42c14b4ea1bc35deabeeca96cdbed11c90f" translate="yes" xml:space="preserve">
          <source>The meaning of &lt;em&gt;bbox_to_anchor&lt;/em&gt; and &lt;em&gt;bbox_to_transform&lt;/em&gt; is interpreted differently from that of legend. The value of bbox_to_anchor (or the return value of its get_points method; the default is &lt;em&gt;parent_axes.bbox&lt;/em&gt;) is transformed by the bbox_transform (the default is Identity transform) and then interpreted as points in the pixel coordinate (which is dpi dependent).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="468e53882c9d31ed6119598abcfdd9c7c7dd73cc" translate="yes" xml:space="preserve">
          <source>The method used here involves calculating the path length along the contour in pixel coordinates and then looking approximately label width / 2 away from central point to determine rotation and then to break contour if desired.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eaa229733ac7c89a493b1a9f275f3334a857b6f4" translate="yes" xml:space="preserve">
          <source>The method used to calculate the estimator bandwidth. This can be 'scott', 'silverman', a scalar constant or a callable. If a scalar, this will be used directly as &lt;code&gt;kde.factor&lt;/code&gt;. If a callable, it should take a &lt;a href=&quot;#matplotlib.mlab.GaussianKDE&quot;&gt;&lt;code&gt;GaussianKDE&lt;/code&gt;&lt;/a&gt; instance as only parameter and return a scalar. If None (default), 'scott' is used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe18554bd084f73df96640e5f3b54731ef08ff0f" translate="yes" xml:space="preserve">
          <source>The method used to calculate the estimator bandwidth. This can be 'scott', 'silverman', a scalar constant or a callable. If a scalar, this will be used directly as &lt;code&gt;kde.factor&lt;/code&gt;. If a callable, it should take a &lt;code&gt;GaussianKDE&lt;/code&gt; instance as its only parameter and return a scalar. If None (default), 'scott' is used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cdafa42760bbb75a87a231d04ceccf6deea6f9c4" translate="yes" xml:space="preserve">
          <source>The method used to calculate the kernel density estimate for each column of data. When called via &lt;code&gt;method(v, coords)&lt;/code&gt;, it should return a vector of the values of the KDE evaluated at the values specified in coords.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76cafb5a922cd2ba7599cff2128a0e4a14c30ff0" translate="yes" xml:space="preserve">
          <source>The minimal interface for a converter to take custom data types (or sequences) and convert them to values Matplotlib can use.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52e2ee507fa53ea323be851ce5316cc3d0a8e8a5" translate="yes" xml:space="preserve">
          <source>The minimum saturation value that the &lt;em&gt;intensity&lt;/em&gt; map can shift the output image to. Defaults to 0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08a806bccbd16ba77579712e4e82dd43c5945a66" translate="yes" xml:space="preserve">
          <source>The minimum value (&quot;v&quot; in &quot;hsv&quot;) that the &lt;em&gt;intensity&lt;/em&gt; map can shift the output image to. Defaults to 0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="660f72476ddfc65ac5c3d43f7033f0a3776eb598" translate="yes" xml:space="preserve">
          <source>The minimum value of the slider.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a230a56f7fa5ec73e5dcfc61aa58c523cb8e30c4" translate="yes" xml:space="preserve">
          <source>The minimum value used in colormapping &lt;em&gt;data&lt;/em&gt;. If &lt;em&gt;None&lt;/em&gt; the minimum value in &lt;em&gt;data&lt;/em&gt; is used. If &lt;em&gt;norm&lt;/em&gt; is specified, then this argument will be ignored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f94a7e54fd2f0a4659bf3accb2f8c1cf2759eafd" translate="yes" xml:space="preserve">
          <source>The minor ticks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a63c26daa20097859608deac67cb8b048480f6f8" translate="yes" xml:space="preserve">
          <source>The module also provides functions for checking whether an object can be interpreted as a color (&lt;a href=&quot;_as_gen/matplotlib.colors.is_color_like#matplotlib.colors.is_color_like&quot;&gt;&lt;code&gt;is_color_like()&lt;/code&gt;&lt;/a&gt;), for converting such an object to an RGBA tuple (&lt;a href=&quot;_as_gen/matplotlib.colors.to_rgba#matplotlib.colors.to_rgba&quot;&gt;&lt;code&gt;to_rgba()&lt;/code&gt;&lt;/a&gt;) or to an HTML-like hex string in the &lt;code&gt;#rrggbb&lt;/code&gt; format (&lt;a href=&quot;_as_gen/matplotlib.colors.to_hex#matplotlib.colors.to_hex&quot;&gt;&lt;code&gt;to_hex()&lt;/code&gt;&lt;/a&gt;), and a sequence of colors to an &lt;code&gt;(n, 4)&lt;/code&gt; RGBA array (&lt;a href=&quot;_as_gen/matplotlib.colors.to_rgba_array#matplotlib.colors.to_rgba_array&quot;&gt;&lt;code&gt;to_rgba_array()&lt;/code&gt;&lt;/a&gt;). Caching is used for efficiency.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d1db98854d54433518344d9c0099f35124389aa" translate="yes" xml:space="preserve">
          <source>The module uses &lt;a href=&quot;http://pyparsing.wikispaces.com/&quot;&gt;pyparsing&lt;/a&gt; to parse the TeX expression.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2239fceb641560450c97568f84c9e092e6a0c147" translate="yes" xml:space="preserve">
          <source>The module uses Matplotlib's &lt;a href=&quot;units_api#module-matplotlib.units&quot;&gt;&lt;code&gt;matplotlib.units&lt;/code&gt;&lt;/a&gt; mechanism to convert from strings to integers, provides a tick locator and formatter, and the class:&lt;a href=&quot;#matplotlib.category.UnitData&quot;&gt;&lt;code&gt;UnitData&lt;/code&gt;&lt;/a&gt; that creates and stores the string-to-integer mapping.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8a6aa26834f93a67fa54dbae1e48ab63fec168d" translate="yes" xml:space="preserve">
          <source>The most straight forward way is just to call &lt;a href=&quot;#matplotlib.axes.Axes.plot&quot;&gt;&lt;code&gt;plot&lt;/code&gt;&lt;/a&gt; multiple times. Example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a346306776f30f97330189b2acccf1c23183257d" translate="yes" xml:space="preserve">
          <source>The most straight forward way is just to call &lt;a href=&quot;#matplotlib.pyplot.plot&quot;&gt;&lt;code&gt;plot&lt;/code&gt;&lt;/a&gt; multiple times. Example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="473130069392b9808fa003086371f8db4e8cbb69" translate="yes" xml:space="preserve">
          <source>The mouse button or buttons to use for 3D rotation of the axes; defaults to 1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e5120ffad12cafcf9c003733878c9d8624add42" translate="yes" xml:space="preserve">
          <source>The mouse button or buttons to use to zoom the 3D axes; defaults to 3.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95f0301309bdd27d90979e5e1ea1e8680d572895" translate="yes" xml:space="preserve">
          <source>The mplot3d Toolkit</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="429de565e5445e6af610acdbb8f782d4579ba748" translate="yes" xml:space="preserve">
          <source>The mplot3d toolkit adds simple 3D plotting capabilities to matplotlib by supplying an axes object that can create a 2D projection of a 3D scene. The resulting graph will have the same look and feel as regular 2D plots.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4448b0f31dd9126f90ec650a2bc3363f6896ae42" translate="yes" xml:space="preserve">
          <source>The name for the reversed colormap. If it's None the name will be the name of the parent colormap + &quot;_r&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b4e4862be1ebb547baad5ee8c47f5c74a49b485" translate="yes" xml:space="preserve">
          <source>The name of a style or a path/URL to a style file. For a list of available style names, see &lt;code&gt;style.available&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51fcd62e9006e6ec0e2f591eab54d2c13ce632b9" translate="yes" xml:space="preserve">
          <source>The name of the backend to use.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d2f1a8bf499c42fe5b692f4800520ca7d3c0400" translate="yes" xml:space="preserve">
          <source>The name of the colormap.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fdd07db8f4d63af181a92308464292f08f1b8230" translate="yes" xml:space="preserve">
          <source>The name of the group to add this tool to.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71d374af77b28253b16dd23f376ea6574a679464" translate="yes" xml:space="preserve">
          <source>The name of the style to apply.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="725589345ba3219f088cdd8b7a5766de4cd51ee6" translate="yes" xml:space="preserve">
          <source>The new &lt;a href=&quot;#matplotlib.axes.Axes&quot;&gt;&lt;code&gt;Axes&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ddc53815bce3593dc0303be9ac29adcb84be8c59" translate="yes" xml:space="preserve">
          <source>The new &lt;a href=&quot;../axes_api#matplotlib.axes.Axes&quot;&gt;&lt;code&gt;Axes&lt;/code&gt;&lt;/a&gt; box state. If &lt;code&gt;None&lt;/code&gt;, toggle the state.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d33baf6f01b97cc44b79a1a6fa4167e5de82fcb" translate="yes" xml:space="preserve">
          <source>The new &lt;a href=&quot;../axes_api#matplotlib.axes.Axes&quot;&gt;&lt;code&gt;Axes&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9cfe5db531be23f115bb3e19baa6a379779cea74" translate="yes" xml:space="preserve">
          <source>The new child must have the same number of input and output dimensions as the current child.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2f8cefb1fbf70bad39d70ba65e019eefd8b4382" translate="yes" xml:space="preserve">
          <source>The new position of the in &lt;a href=&quot;matplotlib.figure.figure#matplotlib.figure.Figure&quot;&gt;&lt;code&gt;Figure&lt;/code&gt;&lt;/a&gt; coordinates.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4bc8530158c63ebeae2c6a932e81eaa91c5b9d1d" translate="yes" xml:space="preserve">
          <source>The new x-axis limits in data coordinates.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d2aad8d9c1e6c5c5234c6007d7d3b29c0638672" translate="yes" xml:space="preserve">
          <source>The new y-axis limits in data coordinates.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b3bc8f73194d89f5caa1bbce72e53d2522e0f75" translate="yes" xml:space="preserve">
          <source>The newly created Axes instance</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c98ad131284c9c64098493f05bb8ce8a37132137" translate="yes" xml:space="preserve">
          <source>The next argument must be &lt;em&gt;C&lt;/em&gt;, the array of color values, either one per point in the triangulation if color values are defined at points, or one per triangle in the triangulation if color values are defined at triangles. If there are the same number of points and triangles in the triangulation it is assumed that color values are defined at points; to force the use of color values at triangles use the kwarg &lt;code&gt;facecolors=C&lt;/code&gt; instead of just &lt;code&gt;C&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cdd7bab9f08914a37ea5004295409a2696d4f271" translate="yes" xml:space="preserve">
          <source>The normalization used to scale values before colormapping. If None, the input will be linearly scaled between its min and max.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2586cd7a736ae94c9c7bb62c2a81236326e4aa7e" translate="yes" xml:space="preserve">
          <source>The normalizing object which scales data, typically into the interval &lt;code&gt;[0, 1]&lt;/code&gt;. If &lt;em&gt;None&lt;/em&gt;, &lt;em&gt;norm&lt;/em&gt; defaults to a &lt;em&gt;colors.Normalize&lt;/em&gt; object which initializes its scaling based on the first data processed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d13fd49c273e1ab0f666887ba4a434d1de655c8" translate="yes" xml:space="preserve">
          <source>The number of columns that the legend has. Default is 1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8bdfb41dd0a54c2c2838faff03a3f86f35d95da2" translate="yes" xml:space="preserve">
          <source>The number of data points in each window.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2fbb725cf47eb6ec1c5c26c201369e86dccffa3" translate="yes" xml:space="preserve">
          <source>The number of data points used in each block for the FFT. A power 2 is most efficient. The default value is 256. This should &lt;em&gt;NOT&lt;/em&gt; be used to get zero padding, or the scaling of the result will be incorrect. Use &lt;em&gt;pad_to&lt;/em&gt; for this instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9fa6ce0b372753419479525b8c3708f73830fae9" translate="yes" xml:space="preserve">
          <source>The number of decimal places to place after the point. If &lt;em&gt;None&lt;/em&gt; (the default), the number will be computed automatically.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff712b316313c157c40f4146f50491f4e7a1cb71" translate="yes" xml:space="preserve">
          <source>The number of elements of the created lookup table. This must be N &amp;gt;= 1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="259bce8ccb63158fbda2cd2405b213e61336537f" translate="yes" xml:space="preserve">
          <source>The number of hexagons in the &lt;em&gt;x&lt;/em&gt;-direction, default is 100. The corresponding number of hexagons in the &lt;em&gt;y&lt;/em&gt;-direction is chosen such that the hexagons are approximately regular. Alternatively, gridsize can be a tuple with two elements specifying the number of hexagons in the &lt;em&gt;x&lt;/em&gt;-direction and the &lt;em&gt;y&lt;/em&gt;-direction.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9204da2ab7b07bffebe8cc63ac22dfd8e12c9091" translate="yes" xml:space="preserve">
          <source>The number of input dimensions of this transform. Must be overridden (with integers) in the subclass.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c21fe25052012c1ab94f4e1d88db33f8244d8e2" translate="yes" xml:space="preserve">
          <source>The number of marker points in the legend when creating a legend entry for a &lt;a href=&quot;../collections_api#matplotlib.collections.PathCollection&quot;&gt;&lt;code&gt;PathCollection&lt;/code&gt;&lt;/a&gt; (scatter plot). Default is &lt;code&gt;None&lt;/code&gt;, which will take the value from &lt;code&gt;&lt;a href=&quot;https://matplotlib.org/3.1.1/tutorials/introductory/customizing.html#matplotlib-rcparams&quot;&gt;rcParams[&quot;legend.scatterpoints&quot;]&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c98430352bcdc875d1def27939912e98474612e" translate="yes" xml:space="preserve">
          <source>The number of marker points in the legend when creating a legend entry for a &lt;a href=&quot;_as_gen/matplotlib.lines.line2d#matplotlib.lines.Line2D&quot;&gt;&lt;code&gt;Line2D&lt;/code&gt;&lt;/a&gt; (line). Default is &lt;code&gt;None&lt;/code&gt;, which will take the value from &lt;code&gt;&lt;a href=&quot;https://matplotlib.org/3.1.1/tutorials/introductory/customizing.html#matplotlib-rcparams&quot;&gt;rcParams[&quot;legend.numpoints&quot;]&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5549ccb37627296a414b7cdca54709a28958bd3e" translate="yes" xml:space="preserve">
          <source>The number of marker points in the legend when creating a legend entry for a &lt;a href=&quot;collections_api#matplotlib.collections.PathCollection&quot;&gt;&lt;code&gt;PathCollection&lt;/code&gt;&lt;/a&gt; (scatter plot). Default is &lt;code&gt;None&lt;/code&gt;, which will take the value from &lt;code&gt;&lt;a href=&quot;https://matplotlib.org/3.1.1/tutorials/introductory/customizing.html#matplotlib-rcparams&quot;&gt;rcParams[&quot;legend.scatterpoints&quot;]&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="059e33401a78a9d3d2fd0e96e132616c10a8f5f0" translate="yes" xml:space="preserve">
          <source>The number of marker points in the legend when creating a legend entry for a &lt;a href=&quot;matplotlib.lines.line2d#matplotlib.lines.Line2D&quot;&gt;&lt;code&gt;Line2D&lt;/code&gt;&lt;/a&gt; (line). Default is &lt;code&gt;None&lt;/code&gt;, which will take the value from &lt;code&gt;&lt;a href=&quot;https://matplotlib.org/3.1.1/tutorials/introductory/customizing.html#matplotlib-rcparams&quot;&gt;rcParams[&quot;legend.numpoints&quot;]&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d256f6f080d160615f72fd70cb812dbd79b0608b" translate="yes" xml:space="preserve">
          <source>The number of output dimensions of this transform. Must be overridden (with integers) in the subclass.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ce57786ce1b6d8578c3bc2d4a760dfc340deb4c" translate="yes" xml:space="preserve">
          <source>The number of points of overlap between blocks. The default value is 0 (no overlap).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b60f85e33aa1982aaac5426d5ceb7d3a0cce9dd" translate="yes" xml:space="preserve">
          <source>The number of points of overlap between blocks. The default value is 128.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6999599ff8fd42c401c055317c9ef08f436a3fcd" translate="yes" xml:space="preserve">
          <source>The number of points of overlap between segments. The default value is 0 (no overlap).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5127dadc1bb767eca066028187461aca44dbb1c5" translate="yes" xml:space="preserve">
          <source>The number of points to which the data segment is padded when performing the FFT. This can be different from &lt;em&gt;NFFT&lt;/em&gt;, which specifies the number of data points used. While not increasing the actual resolution of the spectrum (the minimum distance between resolvable peaks), this can give more points in the plot, allowing for more detail. This corresponds to the &lt;em&gt;n&lt;/em&gt; parameter in the call to fft(). The default is None, which sets &lt;em&gt;pad_to&lt;/em&gt; equal to &lt;em&gt;NFFT&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9394cb255482fd218d903e90554bcc0ca2f7422e" translate="yes" xml:space="preserve">
          <source>The number of points to which the data segment is padded when performing the FFT. While not increasing the actual resolution of the spectrum (the minimum distance between resolvable peaks), this can give more points in the plot, allowing for more detail. This corresponds to the &lt;em&gt;n&lt;/em&gt; parameter in the call to fft(). The default is None, which sets &lt;em&gt;pad_to&lt;/em&gt; equal to the length of the input signal (i.e. no padding).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ec023a264c50d8f8bd7d590a94204a56d5d5079" translate="yes" xml:space="preserve">
          <source>The number of rgb quantization levels.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bafa86e5b40eca46e328a6b73aee5d84c3b294ca" translate="yes" xml:space="preserve">
          <source>The number of rows and number of columns of the grid need to be set. An instance of SubplotSpec is also needed to be set from which the layout parameters will be inherited. The wspace and hspace of the layout can be optionally specified or the default values (from the figure or rcParams) will be used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="452bdb163db326e8a8dca96e2931e2e8bd95baf9" translate="yes" xml:space="preserve">
          <source>The number of rows and number of columns of the grid need to be set. Optionally, the ratio of heights and widths of rows and columns can be specified.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b16762a77359c853afb4ea5d861ce634fe00fe66" translate="yes" xml:space="preserve">
          <source>The number of rows and number of columns of the grid need to be set. Optionally, the subplot layout parameters (e.g., left, right, etc.) can be tuned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="897e396b03b0e7c9c9b4f28bed7697ec053e7534" translate="yes" xml:space="preserve">
          <source>The number of scroll steps (positive for 'up', negative for 'down'). This applies only to 'scroll_event' and defaults to 0 otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0c217fdd7221fe0e5c4eac6be87e55b33a30e2c" translate="yes" xml:space="preserve">
          <source>The number of sections to divide the legend area into. If None, use the length of the input tuple. Default is 1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13fd8cf6bc8cd091a2924813312d93848b737bc8" translate="yes" xml:space="preserve">
          <source>The number of time to repeat the array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7bd6fed097f68c697724ebd6821d43946f9ab141" translate="yes" xml:space="preserve">
          <source>The number of values from &lt;em&gt;frames&lt;/em&gt; to cache.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7cf9678d96c13824a9bcd9eeca53a79a3ff832a" translate="yes" xml:space="preserve">
          <source>The object for which these legend artists are being created.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5fcd858aaa052cd590bc7b27b875de53d7616a0a" translate="yes" xml:space="preserve">
          <source>The object to compute the offset from.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd7ac2dfa7768017aa745b9041df293a68110564" translate="yes" xml:space="preserve">
          <source>The object-oriented API</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a84073dca96d770fc0c649745c7716302882604" translate="yes" xml:space="preserve">
          <source>The object-oriented API is recommended for more complex plots.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7eaeadf86de1c088134299fbe4c3a2643cced032" translate="yes" xml:space="preserve">
          <source>The objects being joined must be hashable and weak-referenceable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4cf0e1b8852b930483e8e87c0061e8b9cd7e9b9" translate="yes" xml:space="preserve">
          <source>The observer id associated with the callback. This id can be used for removing the callback with &lt;a href=&quot;#matplotlib.collections.AsteriskPolygonCollection.remove_callback&quot;&gt;&lt;code&gt;remove_callback&lt;/code&gt;&lt;/a&gt; later.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="816ae6d06ba65b58f8545dee7b191c9052dcafe5" translate="yes" xml:space="preserve">
          <source>The observer id associated with the callback. This id can be used for removing the callback with &lt;a href=&quot;#matplotlib.collections.BrokenBarHCollection.remove_callback&quot;&gt;&lt;code&gt;remove_callback&lt;/code&gt;&lt;/a&gt; later.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24c123ff494050bf746bed55489e00180f7867a9" translate="yes" xml:space="preserve">
          <source>The observer id associated with the callback. This id can be used for removing the callback with &lt;a href=&quot;#matplotlib.collections.CircleCollection.remove_callback&quot;&gt;&lt;code&gt;remove_callback&lt;/code&gt;&lt;/a&gt; later.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8bbcfa6d0f91fea55dc08c5b4f2701465ae8498" translate="yes" xml:space="preserve">
          <source>The observer id associated with the callback. This id can be used for removing the callback with &lt;a href=&quot;#matplotlib.collections.Collection.remove_callback&quot;&gt;&lt;code&gt;remove_callback&lt;/code&gt;&lt;/a&gt; later.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a7c0ed816ee259a64c5235dcc325399dee1f7eb" translate="yes" xml:space="preserve">
          <source>The observer id associated with the callback. This id can be used for removing the callback with &lt;a href=&quot;#matplotlib.collections.EllipseCollection.remove_callback&quot;&gt;&lt;code&gt;remove_callback&lt;/code&gt;&lt;/a&gt; later.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3005ca9ef3336ed0590b1d184ae1eb7d6ff21466" translate="yes" xml:space="preserve">
          <source>The observer id associated with the callback. This id can be used for removing the callback with &lt;a href=&quot;#matplotlib.collections.EventCollection.remove_callback&quot;&gt;&lt;code&gt;remove_callback&lt;/code&gt;&lt;/a&gt; later.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3735d0c6b57b5d78c33c830a4b4aea15a576cbb0" translate="yes" xml:space="preserve">
          <source>The observer id associated with the callback. This id can be used for removing the callback with &lt;a href=&quot;#matplotlib.collections.LineCollection.remove_callback&quot;&gt;&lt;code&gt;remove_callback&lt;/code&gt;&lt;/a&gt; later.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51f9dcd7a900b165fa321936cce99327e13c4735" translate="yes" xml:space="preserve">
          <source>The observer id associated with the callback. This id can be used for removing the callback with &lt;a href=&quot;#matplotlib.collections.PatchCollection.remove_callback&quot;&gt;&lt;code&gt;remove_callback&lt;/code&gt;&lt;/a&gt; later.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c5802238c103390b708949be60d93495b6038ee" translate="yes" xml:space="preserve">
          <source>The observer id associated with the callback. This id can be used for removing the callback with &lt;a href=&quot;#matplotlib.collections.PathCollection.remove_callback&quot;&gt;&lt;code&gt;remove_callback&lt;/code&gt;&lt;/a&gt; later.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cff801fd6b7b96b054e52f587aae957478a00626" translate="yes" xml:space="preserve">
          <source>The observer id associated with the callback. This id can be used for removing the callback with &lt;a href=&quot;#matplotlib.collections.PolyCollection.remove_callback&quot;&gt;&lt;code&gt;remove_callback&lt;/code&gt;&lt;/a&gt; later.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57438510a1c2283318ecc87306ee95ca45773523" translate="yes" xml:space="preserve">
          <source>The observer id associated with the callback. This id can be used for removing the callback with &lt;a href=&quot;#matplotlib.collections.QuadMesh.remove_callback&quot;&gt;&lt;code&gt;remove_callback&lt;/code&gt;&lt;/a&gt; later.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9cdc8f24e87ea0f634ba4ad9a909159b1877159" translate="yes" xml:space="preserve">
          <source>The observer id associated with the callback. This id can be used for removing the callback with &lt;a href=&quot;#matplotlib.collections.RegularPolyCollection.remove_callback&quot;&gt;&lt;code&gt;remove_callback&lt;/code&gt;&lt;/a&gt; later.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3d75cfe1e186a7a5e960445a680ea54bf6421de" translate="yes" xml:space="preserve">
          <source>The observer id associated with the callback. This id can be used for removing the callback with &lt;a href=&quot;#matplotlib.collections.StarPolygonCollection.remove_callback&quot;&gt;&lt;code&gt;remove_callback&lt;/code&gt;&lt;/a&gt; later.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ba03b3464125fb6c50cd11f5c55e4806e888542" translate="yes" xml:space="preserve">
          <source>The observer id associated with the callback. This id can be used for removing the callback with &lt;a href=&quot;#matplotlib.collections.TriMesh.remove_callback&quot;&gt;&lt;code&gt;remove_callback&lt;/code&gt;&lt;/a&gt; later.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e11d7ed023b054c9c2400f632c1ca563b3d605c0" translate="yes" xml:space="preserve">
          <source>The observer id associated with the callback. This id can be used for removing the callback with &lt;a href=&quot;matplotlib.artist.artist.remove_callback#matplotlib.artist.Artist.remove_callback&quot;&gt;&lt;code&gt;remove_callback&lt;/code&gt;&lt;/a&gt; later.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb0eeba3cec6ccd9588b45d4dd72bf5be9c0ba1b" translate="yes" xml:space="preserve">
          <source>The observer id associated with the callback. This id can be used for removing the callback with &lt;a href=&quot;matplotlib.axes.axes.remove_callback#matplotlib.axes.Axes.remove_callback&quot;&gt;&lt;code&gt;remove_callback&lt;/code&gt;&lt;/a&gt; later.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f0be706ab51f217b96cf57c0cce7ce019552b9e" translate="yes" xml:space="preserve">
          <source>The observer id associated with the callback. This id can be used for removing the callback with &lt;a href=&quot;matplotlib.axis.axis.remove_callback#matplotlib.axis.Axis.remove_callback&quot;&gt;&lt;code&gt;remove_callback&lt;/code&gt;&lt;/a&gt; later.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a9c76347e200d2811fc6cbe576005e065d68776" translate="yes" xml:space="preserve">
          <source>The observer id associated with the callback. This id can be used for removing the callback with &lt;a href=&quot;matplotlib.axis.tick.remove_callback#matplotlib.axis.Tick.remove_callback&quot;&gt;&lt;code&gt;remove_callback&lt;/code&gt;&lt;/a&gt; later.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5dbff24081c964738364d0e0c21c65a0d35ad71" translate="yes" xml:space="preserve">
          <source>The observer id associated with the callback. This id can be used for removing the callback with &lt;a href=&quot;matplotlib.axis.xaxis.remove_callback#matplotlib.axis.XAxis.remove_callback&quot;&gt;&lt;code&gt;remove_callback&lt;/code&gt;&lt;/a&gt; later.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f57052183cceb7e5e4f058d61c9e8b5f12f1125c" translate="yes" xml:space="preserve">
          <source>The observer id associated with the callback. This id can be used for removing the callback with &lt;a href=&quot;matplotlib.axis.xtick.remove_callback#matplotlib.axis.XTick.remove_callback&quot;&gt;&lt;code&gt;remove_callback&lt;/code&gt;&lt;/a&gt; later.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ce98a1849baece93f9c5027b8eefeed5cde2632" translate="yes" xml:space="preserve">
          <source>The observer id associated with the callback. This id can be used for removing the callback with &lt;a href=&quot;matplotlib.axis.yaxis.remove_callback#matplotlib.axis.YAxis.remove_callback&quot;&gt;&lt;code&gt;remove_callback&lt;/code&gt;&lt;/a&gt; later.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0dfe526017262fb2d670f5e5325df41429be720" translate="yes" xml:space="preserve">
          <source>The observer id associated with the callback. This id can be used for removing the callback with &lt;a href=&quot;matplotlib.axis.ytick.remove_callback#matplotlib.axis.YTick.remove_callback&quot;&gt;&lt;code&gt;remove_callback&lt;/code&gt;&lt;/a&gt; later.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5184a8d21b7120714e899dfb892d57e36fe54ad0" translate="yes" xml:space="preserve">
          <source>The offset of the center of the lines from the origin, in the direction orthogonal to &lt;em&gt;orientation&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3991d1cad6c6f47234f4af908ddd96a13b52177" translate="yes" xml:space="preserve">
          <source>The offset of the center of the markers from the origin, in the direction orthogonal to &lt;em&gt;orientation&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85ec79bd00f24fb615987124605683e77ce44f8d" translate="yes" xml:space="preserve">
          <source>The offset of the shadow in points.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="979b3b96d46c3c554a2f02b799dea176847226ca" translate="yes" xml:space="preserve">
          <source>The offset of the title from the top of the axes, in points. Default is &lt;code&gt;None&lt;/code&gt; to use rcParams['axes.titlepad'].</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2495eab674ba7312d33d47936868c63377e469c0" translate="yes" xml:space="preserve">
          <source>The offset to apply to the path, in points.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ace9ac827cbb82d69d4dd1f53e42ab818804c0c4" translate="yes" xml:space="preserve">
          <source>The offset to apply to the path, measured in points.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="038099f5ec0f29f79d69ec69201c0f91898b73a1" translate="yes" xml:space="preserve">
          <source>The only current use case is displaying the z-value of an &lt;a href=&quot;../image_api#matplotlib.image.AxesImage&quot;&gt;&lt;code&gt;AxesImage&lt;/code&gt;&lt;/a&gt; in the status bar of a plot window, while moving the mouse.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="031e28029c3de872f4df310818ed9cbf3b058e50" translate="yes" xml:space="preserve">
          <source>The only current use case is displaying the z-value of an &lt;a href=&quot;image_api#matplotlib.image.AxesImage&quot;&gt;&lt;code&gt;AxesImage&lt;/code&gt;&lt;/a&gt; in the status bar of a plot window, while moving the mouse.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47266c72cd61d7e7d6d0592feaf921db1c19a87b" translate="yes" xml:space="preserve">
          <source>The only difference is that setting &lt;em&gt;axis&lt;/em&gt; to 'both' will mean that the settings are applied to all three axes. Also, the &lt;em&gt;axis&lt;/em&gt; parameter also accepts a value of 'z', which would mean to apply to only the z-axis.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d5f7667dad07560f8936dc1539fa577c42742b4" translate="yes" xml:space="preserve">
          <source>The optional arguments &lt;em&gt;color&lt;/em&gt;, &lt;em&gt;edgecolor&lt;/em&gt;, &lt;em&gt;linewidth&lt;/em&gt;, &lt;em&gt;xerr&lt;/em&gt;, and &lt;em&gt;yerr&lt;/em&gt; can be either scalars or sequences of length equal to the number of bars. This enables you to use bar as the basis for stacked bar charts, or candlestick plots. Detail: &lt;em&gt;xerr&lt;/em&gt; and &lt;em&gt;yerr&lt;/em&gt; are passed directly to &lt;a href=&quot;matplotlib.axes.axes.errorbar#matplotlib.axes.Axes.errorbar&quot;&gt;&lt;code&gt;errorbar()&lt;/code&gt;&lt;/a&gt;, so they can also have shape 2xN for independent specification of lower and upper errors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7a72926094dbacb6325eeba529f3f73646b0904" translate="yes" xml:space="preserve">
          <source>The optional arguments &lt;em&gt;color&lt;/em&gt;, &lt;em&gt;edgecolor&lt;/em&gt;, &lt;em&gt;linewidth&lt;/em&gt;, &lt;em&gt;xerr&lt;/em&gt;, and &lt;em&gt;yerr&lt;/em&gt; can be either scalars or sequences of length equal to the number of bars. This enables you to use bar as the basis for stacked bar charts, or candlestick plots. Detail: &lt;em&gt;xerr&lt;/em&gt; and &lt;em&gt;yerr&lt;/em&gt; are passed directly to &lt;a href=&quot;matplotlib.pyplot.errorbar#matplotlib.pyplot.errorbar&quot;&gt;&lt;code&gt;errorbar()&lt;/code&gt;&lt;/a&gt;, so they can also have shape 2xN for independent specification of lower and upper errors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc6caf69a6233fc15811cc1d2dacc746295d5efe" translate="yes" xml:space="preserve">
          <source>The optional arguments listed above are applied to all subdiagrams so that there is consistent alignment and formatting.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1aff4df804798e1419469b092e2726c640398f68" translate="yes" xml:space="preserve">
          <source>The optional parameter &lt;em&gt;fmt&lt;/em&gt; is a convenient way for defining basic formatting like color, marker and linestyle. It's a shortcut string notation described in the &lt;em&gt;Notes&lt;/em&gt; section below.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fbd37247d8cbc0946d305d8a96a2f397c53c6a3e" translate="yes" xml:space="preserve">
          <source>The order of attributes considered when this relativedelta is added to a datetime is:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="adb00b1254e36a0996bc26674db59c4826189291" translate="yes" xml:space="preserve">
          <source>The order they are resolved are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77d0001b44093635866cc140b5da3482837b93fd" translate="yes" xml:space="preserve">
          <source>The orientation of the &lt;strong&gt;collection&lt;/strong&gt; (the event bars are along the orthogonal direction). Defaults to 'horizontal' if not specified or None.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb022776119205f9b35d26a335db7d635fe2636e" translate="yes" xml:space="preserve">
          <source>The orientation of the colorbar. Typically, this keyword shouldn't be used, as it can be derived from the &lt;code&gt;location&lt;/code&gt; keyword.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40b7b1c154b95975147317871046faeceb6c246a" translate="yes" xml:space="preserve">
          <source>The orientation of the slider.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4824760c196646f1e3de2e42e73d7eaa6a49f6d" translate="yes" xml:space="preserve">
          <source>The origin is set at the upper left hand corner and rows (first dimension of the array) are displayed horizontally. The aspect ratio of the figure window is that of the array, unless this would make an excessively short or narrow figure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="188ed2e087c81f04dca4185e4006a79cdc738894" translate="yes" xml:space="preserve">
          <source>The original function for creating unvalidated cyclers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65fce6bd7a7b985e38b8a2640b95b24814fa7a19" translate="yes" xml:space="preserve">
          <source>The original text object to be rendered.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="457571e367142d0f240bc4e5941c6b55b15f1772" translate="yes" xml:space="preserve">
          <source>The output filename, e.g., &lt;code&gt;mymovie.mp4&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9bbfe387f917f6b7f21139b0ecf2003218fb910b" translate="yes" xml:space="preserve">
          <source>The output format, e.g., 'svg', 'pdf', 'ps' or 'png'. If not provided, will be deduced from the filename.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26b9d219f89bcb704cd8423b1572cc7909878d04" translate="yes" xml:space="preserve">
          <source>The output formats available depend on the backend being used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4d82dcddbfd6223fb2f39f24623c9c7b7373d58" translate="yes" xml:space="preserve">
          <source>The overlap between adjacent windows. Default is 0 (no overlap)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86c8a37d2121e76870758c2f8d34ab76dcf676ee" translate="yes" xml:space="preserve">
          <source>The overridden method needs to create artists of the given transform that fits in the given dimension (xdescent, ydescent, width, height) that are scaled by fontsize if necessary.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce66c90e977efc489c39bd6b2ce531ab8b112dd3" translate="yes" xml:space="preserve">
          <source>The pad between the axes and legend border. Measured in font-size units. Default is &lt;code&gt;None&lt;/code&gt;, which will take the value from &lt;code&gt;&lt;a href=&quot;https://matplotlib.org/3.1.1/tutorials/introductory/customizing.html#matplotlib-rcparams&quot;&gt;rcParams[&quot;legend.borderaxespad&quot;]&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8bed5802c1eb48801ed0ea6a81839e3378ff1cf" translate="yes" xml:space="preserve">
          <source>The pad between the legend handle and text. Measured in font-size units. Default is &lt;code&gt;None&lt;/code&gt;, which will take the value from &lt;code&gt;&lt;a href=&quot;https://matplotlib.org/3.1.1/tutorials/introductory/customizing.html#matplotlib-rcparams&quot;&gt;rcParams[&quot;legend.handletextpad&quot;]&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f65d98bd4b3511d2740100aea4aa23b95b1718c8" translate="yes" xml:space="preserve">
          <source>The padding (horizontal pad, vertical pad) in inches.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa744c28f811e6f70ca13dd10d4e1babc24067e3" translate="yes" xml:space="preserve">
          <source>The padding added to each limit of the axes is the &lt;em&gt;margin&lt;/em&gt; times the data interval. All input parameters must be floats within the range [0, 1]. Passing both positional and keyword arguments is invalid and will raise a TypeError. If no arguments (positional or otherwise) are provided, the current margins will remain in place and simply be returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78eda92eec17ee18039ea1cd425f2d770a23132b" translate="yes" xml:space="preserve">
          <source>The pair of &lt;em&gt;x&lt;/em&gt; coordinates that define the bounding box.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a699abf07408a04ee9d2e934072ca09d66853ab6" translate="yes" xml:space="preserve">
          <source>The pair of &lt;em&gt;y&lt;/em&gt; coordinates that define the bounding box.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32424fbf250f24f5126275aa350cb05fbb867a0c" translate="yes" xml:space="preserve">
          <source>The parameter meanings (and suggested defaults) are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1b934f626280235f531d083731470d515bc326e" translate="yes" xml:space="preserve">
          <source>The parameters &lt;em&gt;detrend&lt;/em&gt; and &lt;em&gt;scale_by_freq&lt;/em&gt; do only apply when &lt;em&gt;mode&lt;/em&gt; is set to 'psd'.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4435dd67f5d2ca84d1d87f9c178c9e65667d4dda" translate="yes" xml:space="preserve">
          <source>The parent axes for the widget</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc92483b292e52638c1e89f88dc7cffc82cc9b41" translate="yes" xml:space="preserve">
          <source>The parent axes for the widget.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9982d13986407f462e3fc17b543c9b4b258c8667" translate="yes" xml:space="preserve">
          <source>The parent figure canvas for the widget.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f49d832e849d03e05501e8997111b2aecd73754f" translate="yes" xml:space="preserve">
          <source>The parent figure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa920825065ccbaccae4d502bbd235afce959dce" translate="yes" xml:space="preserve">
          <source>The part of the arrow that is anchored to the &lt;em&gt;X&lt;/em&gt;, &lt;em&gt;Y&lt;/em&gt; grid. The arrow rotates about this point.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62737e48bb360d63b8a837965690b285fd118615" translate="yes" xml:space="preserve">
          <source>The part of the arrow that is anchored to the &lt;em&gt;X&lt;/em&gt;, &lt;em&gt;Y&lt;/em&gt; grid. The barb rotates about this point. This can also be a number, which shifts the start of the barb that many points away from grid point.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9d5a29e174a182d713bcdab06f565202707a5f8" translate="yes" xml:space="preserve">
          <source>The part of the arrow that is at the grid point; the arrow rotates about this point, hence the name &lt;em&gt;pivot&lt;/em&gt;. Default is 'tail'</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4740558c9445f4d48a62e947a9c03d6524fd6ae" translate="yes" xml:space="preserve">
          <source>The patch drawn to represent the area of the inset axes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3cd14c92be50406e7bacf6a6f2fe30069b9b7ad" translate="yes" xml:space="preserve">
          <source>The patches connecting two corners of the inset axes and its area.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f220cc707c633665b5e85ab2ebc1114791805481" translate="yes" xml:space="preserve">
          <source>The path effects which this renderer represents.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17ec25bad5859772b09b4e089ef1c119723bf807" translate="yes" xml:space="preserve">
          <source>The path must be made up of one or more closed polygons. This algorithm will not behave correctly for unclosed paths.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5cf48f200724347a2a10031bf2407f2d1c7b8fa" translate="yes" xml:space="preserve">
          <source>The path will be stroked with its gc updated with the given keyword arguments, i.e., the keyword arguments should be valid gc parameter values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4702ea100c332edc39913376ecabc30962ffba2a" translate="yes" xml:space="preserve">
          <source>The pie chart will probably look best if the figure and axes are square, or the Axes aspect is equal. This method sets the aspect ratio of the axis to &quot;equal&quot;. The axes aspect ratio can be controlled with &lt;a href=&quot;matplotlib.axes.axes.set_aspect#matplotlib.axes.Axes.set_aspect&quot;&gt;&lt;code&gt;Axes.set_aspect&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a97f6a92a4437876a493700168415ef6be9d8c92" translate="yes" xml:space="preserve">
          <source>The pie chart will probably look best if the figure and axes are square, or the Axes aspect is equal. This method sets the aspect ratio of the axis to &quot;equal&quot;. The axes aspect ratio can be controlled with &lt;code&gt;Axes.set_aspect&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4079f7c692811850a666a99fddf97afc7431dc25" translate="yes" xml:space="preserve">
          <source>The pipe-based writers stream the captured frames over a pipe to an external process. The pipe-based variants tend to be more performant, but may not work on all systems.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="510e3031e4e519ca1f859511fa2eb738b4a2547d" translate="yes" xml:space="preserve">
          <source>The plot format string. For details, see the corresponding parameter in &lt;a href=&quot;matplotlib.axes.axes.plot#matplotlib.axes.Axes.plot&quot;&gt;&lt;code&gt;plot&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa66ac2f5f0ddd9601a37a10cd37d14d9f46af64" translate="yes" xml:space="preserve">
          <source>The plot format string. For details, see the corresponding parameter in &lt;a href=&quot;matplotlib.pyplot.plot#matplotlib.pyplot.plot&quot;&gt;&lt;code&gt;plot&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e738e2fa9b64dfc6b90edf2c407e0b477525e9c0" translate="yes" xml:space="preserve">
          <source>The point &lt;em&gt;(x,y)&lt;/em&gt; to annotate.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c40551e45a13cd550c66afbde28916535680738b" translate="yes" xml:space="preserve">
          <source>The point is given as a sequence of length &lt;a href=&quot;#matplotlib.transforms.Affine2DBase.input_dims&quot;&gt;&lt;code&gt;input_dims&lt;/code&gt;&lt;/a&gt;. The transformed point is returned as a sequence of length &lt;a href=&quot;#matplotlib.transforms.Affine2DBase.output_dims&quot;&gt;&lt;code&gt;output_dims&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b627e409be7a3a07dadb042eb09e51084367e78" translate="yes" xml:space="preserve">
          <source>The point is given as a sequence of length &lt;a href=&quot;#matplotlib.transforms.Transform.input_dims&quot;&gt;&lt;code&gt;input_dims&lt;/code&gt;&lt;/a&gt;. The transformed point is returned as a sequence of length &lt;a href=&quot;#matplotlib.transforms.Transform.output_dims&quot;&gt;&lt;code&gt;output_dims&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23606b92cbceecfe972aee6ebbb61ec1ba5b6cde" translate="yes" xml:space="preserve">
          <source>The points to include in the data limits BBox. This can be either a list of (x, y) tuples or a Nx2 array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a6b8ce318960133f776539f997068ac75ffb520" translate="yes" xml:space="preserve">
          <source>The points where the angles are anchored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57057225579bb1b532ca2b70724593bf4a8d2b1a" translate="yes" xml:space="preserve">
          <source>The points where the ellipse intersects the axes bounding box are located. (This is done be performing an inverse transformation on the axes bbox such that it is relative to the unit circle -- this makes the intersection calculation much easier than doing rotated ellipse intersection directly).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9ee96a1dceed40966ebe3fe1bcbe05856bdc609" translate="yes" xml:space="preserve">
          <source>The position &lt;em&gt;(x,y)&lt;/em&gt; to place the text at. If &lt;em&gt;None&lt;/em&gt;, defaults to &lt;em&gt;xy&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8a0faab62e63f032ba9a245e9de13724a200a17" translate="yes" xml:space="preserve">
          <source>The position of the bottom left corner of the cell.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="687580301ec609b87fbf182a48d4335c0fa6c480" translate="yes" xml:space="preserve">
          <source>The position of the cell with respect to &lt;em&gt;ax&lt;/em&gt;. This must be one of the &lt;a href=&quot;#matplotlib.table.Table.codes&quot;&gt;&lt;code&gt;codes&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="571de42e06f4ce13ede889440e9c6dc8fb190de1" translate="yes" xml:space="preserve">
          <source>The position of the cell with respect to &lt;em&gt;ax&lt;/em&gt;. This must be one of the &lt;a href=&quot;../table_api#matplotlib.table.Table.codes&quot;&gt;&lt;code&gt;codes&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24f2cfd22d8c2cafa68be86d85640d4d6d0d62cb" translate="yes" xml:space="preserve">
          <source>The position of the text.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41462531b9eb8a12c4cd980c04e0d02dddbd29ef" translate="yes" xml:space="preserve">
          <source>The position to place the text. By default, this is in data coordinates. The coordinate system can be changed using the &lt;em&gt;transform&lt;/em&gt; parameter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68314270b5da4b0f6a9dc5dd9e8586c3f1536322" translate="yes" xml:space="preserve">
          <source>The position to place the text. By default, this is in figure coordinates, floats in [0, 1]. The coordinate system can be changed using the &lt;em&gt;transform&lt;/em&gt; keyword.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26a793fd92bd5db8675e044fb07242b772925c73" translate="yes" xml:space="preserve">
          <source>The position to put the secondary axis. Strings can be 'top' or 'bottom', for x-oriented axises or 'left' or 'right' for y-oriented axises or a scalar can be a float indicating the relative position on the axes to put the new axes (0 being the bottom (left), and 1.0 being the top (right).)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cddff6175dab748f23767a0e8a9e5a6373f6e891" translate="yes" xml:space="preserve">
          <source>The position within the group to place this tool. Defaults to end.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="924571c20eb585f6ec754dd32883150fa441cad8" translate="yes" xml:space="preserve">
          <source>The position, relative to &lt;strong&gt;parents&lt;/strong&gt;, where the colorbar axes should be created. If None, the value will either come from the given &lt;code&gt;orientation&lt;/code&gt;, else it will default to 'right'.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6f0d53957fdd300633f8ef6ea61fffe15d5dd06" translate="yes" xml:space="preserve">
          <source>The positioning of the key depends on &lt;em&gt;X&lt;/em&gt;, &lt;em&gt;Y&lt;/em&gt;, &lt;em&gt;coordinates&lt;/em&gt;, and &lt;em&gt;labelpos&lt;/em&gt;. If &lt;em&gt;labelpos&lt;/em&gt; is 'N' or 'S', &lt;em&gt;X&lt;/em&gt;, &lt;em&gt;Y&lt;/em&gt; give the position of the middle of the key arrow. If &lt;em&gt;labelpos&lt;/em&gt; is 'E', &lt;em&gt;X&lt;/em&gt;, &lt;em&gt;Y&lt;/em&gt; positions the head, and if &lt;em&gt;labelpos&lt;/em&gt; is 'W', &lt;em&gt;X&lt;/em&gt;, &lt;em&gt;Y&lt;/em&gt; positions the tail; in either of these two cases, &lt;em&gt;X&lt;/em&gt;, &lt;em&gt;Y&lt;/em&gt; is somewhere in the middle of the arrow+label key object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34cc1110e45229832374a176e0393a7b13802d1e" translate="yes" xml:space="preserve">
          <source>The possible values are described in &lt;a href=&quot;#matplotlib.collections.AsteriskPolygonCollection.set_picker&quot;&gt;&lt;code&gt;set_picker&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70223df7a3b178d8ba00236a038845066a7da88e" translate="yes" xml:space="preserve">
          <source>The possible values are described in &lt;a href=&quot;#matplotlib.collections.BrokenBarHCollection.set_picker&quot;&gt;&lt;code&gt;set_picker&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec0100bb33c65be6dd306bcf255d04ca376b555e" translate="yes" xml:space="preserve">
          <source>The possible values are described in &lt;a href=&quot;#matplotlib.collections.CircleCollection.set_picker&quot;&gt;&lt;code&gt;set_picker&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b5f2473fa126dc3b03edb8837870bc499396dfc" translate="yes" xml:space="preserve">
          <source>The possible values are described in &lt;a href=&quot;#matplotlib.collections.Collection.set_picker&quot;&gt;&lt;code&gt;set_picker&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1cb8dcc3d3eadf2d693e4e326f21262f80b8265f" translate="yes" xml:space="preserve">
          <source>The possible values are described in &lt;a href=&quot;#matplotlib.collections.EllipseCollection.set_picker&quot;&gt;&lt;code&gt;set_picker&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a274dec76e3bc82f032b38b75d985a04526a432" translate="yes" xml:space="preserve">
          <source>The possible values are described in &lt;a href=&quot;#matplotlib.collections.EventCollection.set_picker&quot;&gt;&lt;code&gt;set_picker&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95dc6358586632fb19faf0a52a4b0a9ff14c0a89" translate="yes" xml:space="preserve">
          <source>The possible values are described in &lt;a href=&quot;#matplotlib.collections.LineCollection.set_picker&quot;&gt;&lt;code&gt;set_picker&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f37b28c9d78bf3012485063938dd80950a5d5234" translate="yes" xml:space="preserve">
          <source>The possible values are described in &lt;a href=&quot;#matplotlib.collections.PatchCollection.set_picker&quot;&gt;&lt;code&gt;set_picker&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be61ceb603fb03afc9b34de2bcdbc519c27f7fc1" translate="yes" xml:space="preserve">
          <source>The possible values are described in &lt;a href=&quot;#matplotlib.collections.PathCollection.set_picker&quot;&gt;&lt;code&gt;set_picker&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61f1d4b2e4cf5ae64857a57eaa7f469cb13d77a6" translate="yes" xml:space="preserve">
          <source>The possible values are described in &lt;a href=&quot;#matplotlib.collections.PolyCollection.set_picker&quot;&gt;&lt;code&gt;set_picker&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f2da824c2bc428e9f3bb889c30cba5bea642ca9" translate="yes" xml:space="preserve">
          <source>The possible values are described in &lt;a href=&quot;#matplotlib.collections.QuadMesh.set_picker&quot;&gt;&lt;code&gt;set_picker&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a2dd1f8f006510645e677535ae053d2b646b5e6" translate="yes" xml:space="preserve">
          <source>The possible values are described in &lt;a href=&quot;#matplotlib.collections.RegularPolyCollection.set_picker&quot;&gt;&lt;code&gt;set_picker&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9635cc2133adda251308409af5fbe4a9fec3630" translate="yes" xml:space="preserve">
          <source>The possible values are described in &lt;a href=&quot;#matplotlib.collections.StarPolygonCollection.set_picker&quot;&gt;&lt;code&gt;set_picker&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="795d0711561bc0262b90c0afbf2e2be4b5055191" translate="yes" xml:space="preserve">
          <source>The possible values are described in &lt;a href=&quot;#matplotlib.collections.TriMesh.set_picker&quot;&gt;&lt;code&gt;set_picker&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d707ea141465fc868e2e02943eb013c8c1b57853" translate="yes" xml:space="preserve">
          <source>The possible values are described in &lt;a href=&quot;matplotlib.artist.artist.set_picker#matplotlib.artist.Artist.set_picker&quot;&gt;&lt;code&gt;set_picker&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed091653c7729bb728ce9acbefe4ef387236804c" translate="yes" xml:space="preserve">
          <source>The possible values are described in &lt;a href=&quot;matplotlib.axes.axes.set_picker#matplotlib.axes.Axes.set_picker&quot;&gt;&lt;code&gt;set_picker&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ffdcc438a20a0d975dbc574593d9cf87f9778f2" translate="yes" xml:space="preserve">
          <source>The possible values are described in &lt;a href=&quot;matplotlib.axis.axis.set_picker#matplotlib.axis.Axis.set_picker&quot;&gt;&lt;code&gt;set_picker&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1927faf7f5ee24cda94c597a950203f414116d06" translate="yes" xml:space="preserve">
          <source>The possible values are described in &lt;a href=&quot;matplotlib.axis.tick.set_picker#matplotlib.axis.Tick.set_picker&quot;&gt;&lt;code&gt;set_picker&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="583e8b287b334edff4fee6abc34971fa74430070" translate="yes" xml:space="preserve">
          <source>The possible values are described in &lt;a href=&quot;matplotlib.axis.xaxis.set_picker#matplotlib.axis.XAxis.set_picker&quot;&gt;&lt;code&gt;set_picker&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9ccadae66c620a31de003ee05f61b537b4e2733" translate="yes" xml:space="preserve">
          <source>The possible values are described in &lt;a href=&quot;matplotlib.axis.xtick.set_picker#matplotlib.axis.XTick.set_picker&quot;&gt;&lt;code&gt;set_picker&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f23cda20ab79d45b5d2e3481abda6eba2141a6d2" translate="yes" xml:space="preserve">
          <source>The possible values are described in &lt;a href=&quot;matplotlib.axis.yaxis.set_picker#matplotlib.axis.YAxis.set_picker&quot;&gt;&lt;code&gt;set_picker&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="abfbd6bec8421c823a7eeea31f49c5bb18bc1f24" translate="yes" xml:space="preserve">
          <source>The possible values are described in &lt;a href=&quot;matplotlib.axis.ytick.set_picker#matplotlib.axis.YTick.set_picker&quot;&gt;&lt;code&gt;set_picker&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5368051f388fed4dba71feaabe5c2ddb0588612b" translate="yes" xml:space="preserve">
          <source>The power spectral density \(P_{xx}\) by Welch's average periodogram method. The vector &lt;em&gt;x&lt;/em&gt; is divided into &lt;em&gt;NFFT&lt;/em&gt; length segments. Each segment is detrended by function &lt;em&gt;detrend&lt;/em&gt; and windowed by function &lt;em&gt;window&lt;/em&gt;. &lt;em&gt;noverlap&lt;/em&gt; gives the length of the overlap between segments. The \(|\mathrm{fft}(i)|^2\) of each segment \(i\) are averaged to compute \(P_{xx}\), with a scaling to correct for power loss due to windowing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="010b84cf901b6d8a1aa8a114f1d92e26bfc6b511" translate="yes" xml:space="preserve">
          <source>The power spectral density \(P_{xx}\) by Welch's average periodogram method. The vector &lt;em&gt;x&lt;/em&gt; is divided into &lt;em&gt;NFFT&lt;/em&gt; length segments. Each segment is detrended by function &lt;em&gt;detrend&lt;/em&gt; and windowed by function &lt;em&gt;window&lt;/em&gt;. &lt;em&gt;noverlap&lt;/em&gt; gives the length of the overlap between segments. The \(|\mathrm{fft}(i)|^2\) of each segment \(i\) are averaged to compute \(P_{xx}\).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30d318da09396b91235371b047699ccac8deda79" translate="yes" xml:space="preserve">
          <source>The preferred usage of font sizes is to use the relative values, e.g., 'large', instead of absolute font sizes, e.g., 12. This approach allows all text sizes to be made larger or smaller based on the font manager's default font size.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5346800966109e22d712d39ee1f750d41ad2e72b" translate="yes" xml:space="preserve">
          <source>The primary class for polyline handling in Matplotlib is &lt;a href=&quot;#matplotlib.path.Path&quot;&gt;&lt;code&gt;Path&lt;/code&gt;&lt;/a&gt;. Almost all vector drawing makes use of &lt;a href=&quot;#matplotlib.path.Path&quot;&gt;&lt;code&gt;Path&lt;/code&gt;&lt;/a&gt;s somewhere in the drawing pipeline.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45fc62bb1002133258a0e0a655806afa3c8da44e" translate="yes" xml:space="preserve">
          <source>The problem occurs due to the reduction of 3D data down to 2D + z-order scalar. A single value represents the 3rd dimension for all parts of 3D objects in a collection. Therefore, when the bounding boxes of two collections intersect, it becomes possible for this artifact to occur. Furthermore, the intersection of two 3D objects (such as polygons or patches) can not be rendered properly in matplotlib's 2D rendering engine.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab499eaf3dab83866788ddce728f2a07f3a94f2d" translate="yes" xml:space="preserve">
          <source>The projection type of the &lt;a href=&quot;../axes_api#matplotlib.axes.Axes&quot;&gt;&lt;code&gt;Axes&lt;/code&gt;&lt;/a&gt;. &lt;em&gt;str&lt;/em&gt; is the name of a costum projection, see &lt;a href=&quot;../projections_api#module-matplotlib.projections&quot;&gt;&lt;code&gt;projections&lt;/code&gt;&lt;/a&gt;. The default None results in a 'rectilinear' projection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6807ab81bef8fd62de97320ada5ccf27b37fc996" translate="yes" xml:space="preserve">
          <source>The projection type of the &lt;a href=&quot;../axes_api#matplotlib.axes.Axes&quot;&gt;&lt;code&gt;Axes&lt;/code&gt;&lt;/a&gt;. &lt;em&gt;str&lt;/em&gt; is the name of a custom projection, see &lt;a href=&quot;../projections_api#module-matplotlib.projections&quot;&gt;&lt;code&gt;projections&lt;/code&gt;&lt;/a&gt;. The default None results in a 'rectilinear' projection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71d7daf9364a2dd7342836b9f0063deeab7bbb00" translate="yes" xml:space="preserve">
          <source>The projection type of the subplot (&lt;a href=&quot;../axes_api#matplotlib.axes.Axes&quot;&gt;&lt;code&gt;Axes&lt;/code&gt;&lt;/a&gt;). &lt;em&gt;str&lt;/em&gt; is the name of a costum projection, see &lt;a href=&quot;../projections_api#module-matplotlib.projections&quot;&gt;&lt;code&gt;projections&lt;/code&gt;&lt;/a&gt;. The default None results in a 'rectilinear' projection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da663f3d5de20fe1663e10f38e81a80a95945e07" translate="yes" xml:space="preserve">
          <source>The projection type of the subplot (&lt;a href=&quot;../axes_api#matplotlib.axes.Axes&quot;&gt;&lt;code&gt;Axes&lt;/code&gt;&lt;/a&gt;). &lt;em&gt;str&lt;/em&gt; is the name of a custom projection, see &lt;a href=&quot;../projections_api#module-matplotlib.projections&quot;&gt;&lt;code&gt;projections&lt;/code&gt;&lt;/a&gt;. The default None results in a 'rectilinear' projection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3431fda97b68dce820f01edf022c7e414c34416a" translate="yes" xml:space="preserve">
          <source>The projection type, default 'persp'.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f04bc0195cf888b4fd9a1a24ef6b21682a30dc2" translate="yes" xml:space="preserve">
          <source>The properties used to draw a &lt;a href=&quot;_as_gen/matplotlib.patches.fancyarrowpatch#matplotlib.patches.FancyArrowPatch&quot;&gt;&lt;code&gt;FancyArrowPatch&lt;/code&gt;&lt;/a&gt; arrow between the positions &lt;em&gt;xy&lt;/em&gt; and &lt;em&gt;xytext&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="579299513d8651dc43bb31444d51db8adbce3968" translate="yes" xml:space="preserve">
          <source>The properties used to draw a &lt;a href=&quot;matplotlib.patches.fancyarrowpatch#matplotlib.patches.FancyArrowPatch&quot;&gt;&lt;code&gt;FancyArrowPatch&lt;/code&gt;&lt;/a&gt; arrow between the positions &lt;em&gt;xy&lt;/em&gt; and &lt;em&gt;xytext&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3fcdd532521a6b0467f61f2161d4e5bf35350489" translate="yes" xml:space="preserve">
          <source>The property cycle controls the style properties such as color, marker and linestyle of future plot commands. The style properties of data already added to the Axes are not modified.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6754ed2a8dfd3d48e3d9b5905563ed97d92d06df" translate="yes" xml:space="preserve">
          <source>The property key. Must be a valid &lt;a href=&quot;../artist_api#matplotlib.artist.Artist&quot;&gt;&lt;code&gt;Artist&lt;/code&gt;&lt;/a&gt; property. For example, 'color' or 'linestyle'. Aliases are allowed, such as 'c' for 'color' and 'lw' for 'linewidth'.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e8a095494546ed6e789a7e8316a9cd6d911cc95" translate="yes" xml:space="preserve">
          <source>The property key. Must be a valid &lt;a href=&quot;artist_api#matplotlib.artist.Artist&quot;&gt;&lt;code&gt;Artist&lt;/code&gt;&lt;/a&gt; property. For example, 'color' or 'linestyle'. Aliases are allowed, such as 'c' for 'color' and 'lw' for 'linewidth'.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7fb0007374ba2908c64d5ca0cf7ce7742fca449" translate="yes" xml:space="preserve">
          <source>The proposed y-value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ee1d82b408a7feb5a2b06de48572d6959483733" translate="yes" xml:space="preserve">
          <source>The provided callable replaces the default &lt;a href=&quot;#matplotlib.collections.AsteriskPolygonCollection.contains&quot;&gt;&lt;code&gt;contains&lt;/code&gt;&lt;/a&gt; method of the artist.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b07a35bf158689b955507b3ef68f74b822ae0d35" translate="yes" xml:space="preserve">
          <source>The provided callable replaces the default &lt;a href=&quot;#matplotlib.collections.BrokenBarHCollection.contains&quot;&gt;&lt;code&gt;contains&lt;/code&gt;&lt;/a&gt; method of the artist.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78e9d2577a3d3b32ed6b8e803c2f5db3ac4a256e" translate="yes" xml:space="preserve">
          <source>The provided callable replaces the default &lt;a href=&quot;#matplotlib.collections.CircleCollection.contains&quot;&gt;&lt;code&gt;contains&lt;/code&gt;&lt;/a&gt; method of the artist.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c9c0ecf3fbaf382e303b291d4edc326c898a768" translate="yes" xml:space="preserve">
          <source>The provided callable replaces the default &lt;a href=&quot;#matplotlib.collections.Collection.contains&quot;&gt;&lt;code&gt;contains&lt;/code&gt;&lt;/a&gt; method of the artist.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="257a2ba98dc4e3561c8ad729f593f38e19377d9a" translate="yes" xml:space="preserve">
          <source>The provided callable replaces the default &lt;a href=&quot;#matplotlib.collections.EllipseCollection.contains&quot;&gt;&lt;code&gt;contains&lt;/code&gt;&lt;/a&gt; method of the artist.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="046fc0a217f4d4bc926483880653ae661032d7e0" translate="yes" xml:space="preserve">
          <source>The provided callable replaces the default &lt;a href=&quot;#matplotlib.collections.EventCollection.contains&quot;&gt;&lt;code&gt;contains&lt;/code&gt;&lt;/a&gt; method of the artist.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34276e659c48c857d828b16150adc14c8d278a95" translate="yes" xml:space="preserve">
          <source>The provided callable replaces the default &lt;a href=&quot;#matplotlib.collections.LineCollection.contains&quot;&gt;&lt;code&gt;contains&lt;/code&gt;&lt;/a&gt; method of the artist.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3cbbbaf7c4f4854cf684fe61f876979298f09d92" translate="yes" xml:space="preserve">
          <source>The provided callable replaces the default &lt;a href=&quot;#matplotlib.collections.PatchCollection.contains&quot;&gt;&lt;code&gt;contains&lt;/code&gt;&lt;/a&gt; method of the artist.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18b7d5e991bbbc295f2407373975f901b084d42c" translate="yes" xml:space="preserve">
          <source>The provided callable replaces the default &lt;a href=&quot;#matplotlib.collections.PathCollection.contains&quot;&gt;&lt;code&gt;contains&lt;/code&gt;&lt;/a&gt; method of the artist.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34bfb9b5e6e2d7f2ef546ae81f0e7fc07e276d59" translate="yes" xml:space="preserve">
          <source>The provided callable replaces the default &lt;a href=&quot;#matplotlib.collections.PolyCollection.contains&quot;&gt;&lt;code&gt;contains&lt;/code&gt;&lt;/a&gt; method of the artist.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b3ebf0499a230f2028030016fd8ed7983608a75" translate="yes" xml:space="preserve">
          <source>The provided callable replaces the default &lt;a href=&quot;#matplotlib.collections.QuadMesh.contains&quot;&gt;&lt;code&gt;contains&lt;/code&gt;&lt;/a&gt; method of the artist.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a41950e74a6a4333a4fe9c756cbee32c2256cb6b" translate="yes" xml:space="preserve">
          <source>The provided callable replaces the default &lt;a href=&quot;#matplotlib.collections.RegularPolyCollection.contains&quot;&gt;&lt;code&gt;contains&lt;/code&gt;&lt;/a&gt; method of the artist.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b66ee39c11def0d98e6759bc2ca1c479358b21d" translate="yes" xml:space="preserve">
          <source>The provided callable replaces the default &lt;a href=&quot;#matplotlib.collections.StarPolygonCollection.contains&quot;&gt;&lt;code&gt;contains&lt;/code&gt;&lt;/a&gt; method of the artist.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33c74e44e57277dad3d093de25ec65be4371b115" translate="yes" xml:space="preserve">
          <source>The provided callable replaces the default &lt;a href=&quot;#matplotlib.collections.TriMesh.contains&quot;&gt;&lt;code&gt;contains&lt;/code&gt;&lt;/a&gt; method of the artist.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01d0f5676c81cd200d64b69495ed06b1a220694f" translate="yes" xml:space="preserve">
          <source>The provided callable replaces the default &lt;a href=&quot;matplotlib.artist.artist.contains#matplotlib.artist.Artist.contains&quot;&gt;&lt;code&gt;contains&lt;/code&gt;&lt;/a&gt; method of the artist.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9562cf59192f6adae8fb99937a6a7f51097e908b" translate="yes" xml:space="preserve">
          <source>The provided callable replaces the default &lt;a href=&quot;matplotlib.axes.axes.contains#matplotlib.axes.Axes.contains&quot;&gt;&lt;code&gt;contains&lt;/code&gt;&lt;/a&gt; method of the artist.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6406a5a6260324b3cca818473ef238640711e7b9" translate="yes" xml:space="preserve">
          <source>The provided callable replaces the default &lt;a href=&quot;matplotlib.axis.axis.contains#matplotlib.axis.Axis.contains&quot;&gt;&lt;code&gt;contains&lt;/code&gt;&lt;/a&gt; method of the artist.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11420f306748ccb0f860d3142145408ba1523fba" translate="yes" xml:space="preserve">
          <source>The provided callable replaces the default &lt;a href=&quot;matplotlib.axis.tick.contains#matplotlib.axis.Tick.contains&quot;&gt;&lt;code&gt;contains&lt;/code&gt;&lt;/a&gt; method of the artist.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3938219b565c3d27de8a31832b1dcfaca749c098" translate="yes" xml:space="preserve">
          <source>The provided callable replaces the default &lt;a href=&quot;matplotlib.axis.xaxis.contains#matplotlib.axis.XAxis.contains&quot;&gt;&lt;code&gt;contains&lt;/code&gt;&lt;/a&gt; method of the artist.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4b23984420ba895495922d9b5656b927c50304b" translate="yes" xml:space="preserve">
          <source>The provided callable replaces the default &lt;a href=&quot;matplotlib.axis.xtick.contains#matplotlib.axis.XTick.contains&quot;&gt;&lt;code&gt;contains&lt;/code&gt;&lt;/a&gt; method of the artist.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83f2e5566cad9376fca1dc92f537e1050cde1c6f" translate="yes" xml:space="preserve">
          <source>The provided callable replaces the default &lt;a href=&quot;matplotlib.axis.yaxis.contains#matplotlib.axis.YAxis.contains&quot;&gt;&lt;code&gt;contains&lt;/code&gt;&lt;/a&gt; method of the artist.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="893cd77899c9ceeae25f0cbe9501dc0598791445" translate="yes" xml:space="preserve">
          <source>The provided callable replaces the default &lt;a href=&quot;matplotlib.axis.ytick.contains#matplotlib.axis.YTick.contains&quot;&gt;&lt;code&gt;contains&lt;/code&gt;&lt;/a&gt; method of the artist.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f3672bc7bfbb1d0d94faecb4617187358153ca6" translate="yes" xml:space="preserve">
          <source>The provided writers fall into a few broad categories.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3fa72882d9456ba97cd4bdf10694e513736e2ae" translate="yes" xml:space="preserve">
          <source>The pylab API (disapproved)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47e445dc6bd5c87b60cdafc66c0e1655fcc8566d" translate="yes" xml:space="preserve">
          <source>The pyplot API</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2d2369f6b755307c185e667d1786af93fe7b2ed" translate="yes" xml:space="preserve">
          <source>The quadrilateral is specified by two lines that start and end at corners of the bboxes. The four sides of the quadrilateral are defined by the two lines given, the line between the two corners specified in &lt;em&gt;bbox1&lt;/em&gt; and the line between the two corners specified in &lt;em&gt;bbox2&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64a1a75bdf172bd2a7af190f6fb6af24f4f6b86e" translate="yes" xml:space="preserve">
          <source>The quantization levels used to construct the &lt;a href=&quot;matplotlib.colors.boundarynorm#matplotlib.colors.BoundaryNorm&quot;&gt;&lt;code&gt;BoundaryNorm&lt;/code&gt;&lt;/a&gt;. Value &lt;code&gt;v&lt;/code&gt; is quantized to level &lt;code&gt;i&lt;/code&gt; if &lt;code&gt;lev[i] &amp;lt;= v &amp;lt; lev[i+1]&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dba726ad2b9ec1e1c101c95a5ec1027b4810a79f" translate="yes" xml:space="preserve">
          <source>The radial distance at which the pie labels are drawn. If set to &lt;code&gt;None&lt;/code&gt;, label are not drawn, but are stored for use in &lt;code&gt;legend()&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af2abe276698df7b0254dd1ca25f4b4289011050" translate="yes" xml:space="preserve">
          <source>The radii for the radial gridlines</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf55f236c8ffe99ccbfd387390be7150c4047a2d" translate="yes" xml:space="preserve">
          <source>The radius of the circle. Default is 1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c05ef8cddb543b015bf23296ecfb94475ae8042" translate="yes" xml:space="preserve">
          <source>The radius of the pie, if &lt;em&gt;radius&lt;/em&gt; is &lt;em&gt;None&lt;/em&gt; it will be set to 1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e18eca49d21f1e83315803108cd4514035c98697" translate="yes" xml:space="preserve">
          <source>The ratio between the center of each pie slice and the start of the text generated by &lt;em&gt;autopct&lt;/em&gt;. Ignored if &lt;em&gt;autopct&lt;/em&gt; is &lt;em&gt;None&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7cce4c7587393f2328fd70c07dae5562471dbab0" translate="yes" xml:space="preserve">
          <source>The ratio of the arrow head with respect to the quiver, default to 0.3</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="198c9089e01d7fd1cbf82c43bca2d48dabc93f61" translate="yes" xml:space="preserve">
          <source>The ratio of the incircle radius over the circumcircle radius is a widely used indicator of a triangle flatness. It is always &lt;code&gt;&amp;lt;= 0.5&lt;/code&gt; and &lt;code&gt;== 0.5&lt;/code&gt; only for equilateral triangles. Circle ratios below 0.01 denote very flat triangles.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d36a8549143b4cfc62128e62409e5f2bb84b0197" translate="yes" xml:space="preserve">
          <source>The ratio of the length of arrow_x and arrow_y. Negative numbers can be used to change the direction. Defaults to 1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bccdcda88e6e9d37aba8e6fd1fb8d90e7c40c0be" translate="yes" xml:space="preserve">
          <source>The rationale behind this function is that a Delaunay triangulation - of an unstructured set of points - sometimes contains almost flat triangles at its border, leading to artifacts in plots (especially for high-resolution contouring). Masked with computed &lt;em&gt;new_mask&lt;/em&gt;, the encapsulated triangulation would contain no more unmasked border triangles with a circle ratio below &lt;em&gt;min_circle_ratio&lt;/em&gt;, thus improving the mesh quality for subsequent plots or interpolation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5708ef2fe3d1563d28aa2f36cdec193fb53c877" translate="yes" xml:space="preserve">
          <source>The rcsetup module contains the default values and the validation code for customization using matplotlib's rc settings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60bcde9f4f2ba0b543d6527c7112a7f4d3eb8fe4" translate="yes" xml:space="preserve">
          <source>The rectangle is drawn with &lt;em&gt;rectprops&lt;/em&gt;; default:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d92b1e2c7e41ab5b13365f194cbac2a62bf9a2e" translate="yes" xml:space="preserve">
          <source>The red array</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2988dd2554dd983a50bcd8330a68ccdd6e42df1" translate="yes" xml:space="preserve">
          <source>The relative size of legend markers compared with the originally drawn ones. Default is &lt;code&gt;None&lt;/code&gt;, which will take the value from &lt;code&gt;&lt;a href=&quot;https://matplotlib.org/3.1.1/tutorials/introductory/customizing.html#matplotlib-rcparams&quot;&gt;rcParams[&quot;legend.markerscale&quot;]&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8b1aaee64815cd120a0f804f717069c71fcf4c1" translate="yes" xml:space="preserve">
          <source>The relative width of the bars as a fraction of the bin width. If &lt;code&gt;None&lt;/code&gt;, automatically compute the width.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca293479b31cb0bfe60394407a598b99ed147f3c" translate="yes" xml:space="preserve">
          <source>The relativedelta type is designed to be applied to an existing datetime and can replace specific components of that datetime, or represents an interval of time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e02a49dc3096cf63c5fce3b38a44b4ef9bae2e5" translate="yes" xml:space="preserve">
          <source>The remaining args and kwargs are the same as for &lt;a href=&quot;matplotlib.axes.axes.plot#matplotlib.axes.Axes.plot&quot;&gt;&lt;code&gt;plot()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54a121804c8d363802cda338d1c2e5d1dbe8c8a1" translate="yes" xml:space="preserve">
          <source>The remaining arguments are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e75803a1c57ed5df22b26ea9e0fb673cdbe7a881" translate="yes" xml:space="preserve">
          <source>The remaining arguments may be:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f57946af85c045cd0d8c2776e54b5516149f915" translate="yes" xml:space="preserve">
          <source>The remaining kwargs are the same as for &lt;a href=&quot;matplotlib.axes.axes.pcolor#matplotlib.axes.Axes.pcolor&quot;&gt;&lt;code&gt;pcolor()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f420011e7ec01dc6ccffc38630de9e1ecdb9196" translate="yes" xml:space="preserve">
          <source>The renderer class to use for the raster drawing. If not provided, this will use the Agg backend (which is currently the only viable option anyway.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c831ad7cfff6f8bb554328d76c0ae3bc967ab3f" translate="yes" xml:space="preserve">
          <source>The renderer handles all the drawing primitives using a graphics context instance that controls the colors/styles</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ee85fbe5e913371e895f885233d5e7c8b15aeaa" translate="yes" xml:space="preserve">
          <source>The renderer handles all the drawing primitives using a graphics context instance that controls the colors/styles.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61eb1abdb301000df5b1aba51149e9a640a22a54" translate="yes" xml:space="preserve">
          <source>The required signature is:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="abf1ba745b676fb2cad30b6305a1d9a6af7ab20f" translate="yes" xml:space="preserve">
          <source>The resolution in dots per inch.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9dff91dd881db10a37ab93a4ac0b667fdecc5c10" translate="yes" xml:space="preserve">
          <source>The resolution in dots per inch. If &lt;em&gt;None&lt;/em&gt;, defaults to &lt;code&gt;&lt;a href=&quot;https://matplotlib.org/3.1.1/tutorials/introductory/customizing.html#matplotlib-rcparams&quot;&gt;rcParams[&quot;savefig.dpi&quot;]&lt;/a&gt;&lt;/code&gt;. If 'figure', uses the figure's dpi value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1af380576b4d763be41cc569bd1a244deb3976b6" translate="yes" xml:space="preserve">
          <source>The result is 0.0 if both weight1 and weight 2 are given as strings and have the same value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ae916d55be7d5a054ca620f262650b173bc9c2d" translate="yes" xml:space="preserve">
          <source>The result is cached, so subsequent lookups don't have to perform the O(n) nearest neighbor search.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ef0f03d01a765f79e65e1f16c1d7429954ed4ae" translate="yes" xml:space="preserve">
          <source>The result is the absolute value of the difference between the CSS numeric values of &lt;em&gt;stretch1&lt;/em&gt; and &lt;em&gt;stretch2&lt;/em&gt;, normalized between 0.0 and 1.0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d4bd8fd03f4ec5a592088537dd1995311fea7d9" translate="yes" xml:space="preserve">
          <source>The result of the function is interpreted like the &lt;a href=&quot;../artist_api#matplotlib.artist.Artist&quot;&gt;&lt;code&gt;Artist&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../transformations#matplotlib.transforms.Transform&quot;&gt;&lt;code&gt;Transform&lt;/code&gt;&lt;/a&gt; cases above.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb701093194f95ac7a79fec80f48237ce0a34207" translate="yes" xml:space="preserve">
          <source>The result of the function is interpreted like the &lt;a href=&quot;artist_api#matplotlib.artist.Artist&quot;&gt;&lt;code&gt;Artist&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;transformations#matplotlib.transforms.Transform&quot;&gt;&lt;code&gt;Transform&lt;/code&gt;&lt;/a&gt; cases above.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5bc660dcfd75084f1fe2a04ac51e1314c9c043d0" translate="yes" xml:space="preserve">
          <source>The resulting arrow is affected by the axes aspect ratio and limits. This may produce an arrow whose head is not square with its stem. To create an arrow whose head is square with its stem, use &lt;a href=&quot;matplotlib.axes.axes.annotate#matplotlib.axes.Axes.annotate&quot;&gt;&lt;code&gt;annotate()&lt;/code&gt;&lt;/a&gt; for example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3f30eebd487a5e6ce613b1c094f2676e4637530" translate="yes" xml:space="preserve">
          <source>The resulting arrow is affected by the axes aspect ratio and limits. This may produce an arrow whose head is not square with its stem. To create an arrow whose head is square with its stem, use &lt;a href=&quot;matplotlib.pyplot.annotate#matplotlib.pyplot.annotate&quot;&gt;&lt;code&gt;annotate()&lt;/code&gt;&lt;/a&gt; for example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec89122a2f46dfc7bb5487564d9af9edb892c063" translate="yes" xml:space="preserve">
          <source>The results are cached, so multiple calls to &lt;a href=&quot;#matplotlib.mathtext.MathTextParser.parse&quot;&gt;&lt;code&gt;parse()&lt;/code&gt;&lt;/a&gt; with the same expression should be fast.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e270fe38e24087ed1e9c97fcaf44937792d0275" translate="yes" xml:space="preserve">
          <source>The return type depends on the plotting style (see above).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf61c391b2aa0f6bf7254603069bb70b83caaefe" translate="yes" xml:space="preserve">
          <source>The return type depends on the type of grid:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73548a92dcc5612777fef9e29c02b5bced1b3654" translate="yes" xml:space="preserve">
          <source>The return value is the tuple (&lt;em&gt;Cxy&lt;/em&gt;, &lt;em&gt;f&lt;/em&gt;), where &lt;em&gt;f&lt;/em&gt; are the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7c7347651a2ea4fe521f0142ad04250c18bbcd5" translate="yes" xml:space="preserve">
          <source>The return value of this method should be treated as temporary. An update to &lt;em&gt;self&lt;/em&gt; does not cause a corresponding update to its inverted copy.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="261a2687034459ef039c9434e394c1a4f2fce980" translate="yes" xml:space="preserve">
          <source>The returned axes class depends on the projection used. It is &lt;a href=&quot;../axes_api#matplotlib.axes.Axes&quot;&gt;&lt;code&gt;Axes&lt;/code&gt;&lt;/a&gt; if rectilinear projection are used and &lt;a href=&quot;../projections_api#matplotlib.projections.polar.PolarAxes&quot;&gt;&lt;code&gt;projections.polar.PolarAxes&lt;/code&gt;&lt;/a&gt; if polar projection are used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a285f0fce004c9ab22e7c20da1de6225238cb1d2" translate="yes" xml:space="preserve">
          <source>The returned interpolated field (at &lt;em&gt;refi_tri&lt;/em&gt; nodes)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ebdc13b3900ed6fa4f92305ce1f14e8a11088ff" translate="yes" xml:space="preserve">
          <source>The returned refined triangulation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ba2cd614374bd318eb25119f3ad6229e294fa7d" translate="yes" xml:space="preserve">
          <source>The reversed colormap.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="793ad2238108ea8bec18e14ec7d46ad6cf158034" translate="yes" xml:space="preserve">
          <source>The right edge of the bounding box.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2ee8647cf25613662c9553efc9acc38496f1e6d" translate="yes" xml:space="preserve">
          <source>The right side of the subplots of the figure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e47ccd479574fdfae0714e90516574c494aba065" translate="yes" xml:space="preserve">
          <source>The right xlim in data coordinates. Passing &lt;em&gt;None&lt;/em&gt; leaves the limit unchanged.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2c8ae29c3b700d171067e8123776c7317eaf328" translate="yes" xml:space="preserve">
          <source>The right/top tick label.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b23e7db31880fe367dab4595820903c204181a9" translate="yes" xml:space="preserve">
          <source>The right/top tick marker.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="698e8fc5c6450c29731e31e3a7979dbfee01eb71" translate="yes" xml:space="preserve">
          <source>The rotation angle in degrees.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ae6906089c2f6ef2ac6750b213424d61f31edf8" translate="yes" xml:space="preserve">
          <source>The rotation of the xtick labels.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89a6eb76248d57faf1bdd7e2c886579d165a70c9" translate="yes" xml:space="preserve">
          <source>The rrule locator allows completely general date ticking:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1ca149a2101117730e254da1d1febadf1c3a511" translate="yes" xml:space="preserve">
          <source>The sampling frequency (samples per time unit). It is used to calculate the Fourier frequencies, freqs, in cycles per time unit. The default value is 2.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5fbe490b4906451310360c416b2aec972c2f503" translate="yes" xml:space="preserve">
          <source>The saved renderer is restored and the returned image from post_processing is plotted (using draw_image) on it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35e0e57c2943e695124a495abcb2d78ed11f9bf7" translate="yes" xml:space="preserve">
          <source>The scale factor by which the length is shrunken or expanded (default 16).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23c5b61bd6576534a2a2164a45fc131f627dd2ab" translate="yes" xml:space="preserve">
          <source>The scale factor by which the length is shrunken or expanded (default 16.0)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="971cf971df02a7e8ac44904bdbb57415f0dbfa01" translate="yes" xml:space="preserve">
          <source>The scale factor by which the length is shrunken or expanded.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2b22b396ca1d5af97e8720aa8031ba8c087fd65" translate="yes" xml:space="preserve">
          <source>The scale factor for the thumbnail.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="487224a330f86599aa895612231e447b4f1a9d45" translate="yes" xml:space="preserve">
          <source>The scaling of the values in the &lt;em&gt;spec&lt;/em&gt;. 'linear' is no scaling. 'dB' returns the values in dB scale, i.e., the dB amplitude (20 * log10). 'default' is 'linear'.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="babf90cef9bf66efca960cd648e48d96acc9dde8" translate="yes" xml:space="preserve">
          <source>The scaling of the values in the &lt;em&gt;spec&lt;/em&gt;. 'linear' is no scaling. 'dB' returns the values in dB scale. When &lt;em&gt;mode&lt;/em&gt; is 'psd', this is dB power (10 * log10). Otherwise this is dB amplitude (20 * log10). 'default' is 'dB' if &lt;em&gt;mode&lt;/em&gt; is 'psd' or 'magnitude' and 'linear' otherwise. This must be 'linear' if &lt;em&gt;mode&lt;/em&gt; is 'angle' or 'phase'.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d4ebddccee8626fbcb4c09f53d684033dc91caf" translate="yes" xml:space="preserve">
          <source>The screen units to use (pixels or points) for the offset input.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f3920979400efa50df86b46961af27d40a9a510" translate="yes" xml:space="preserve">
          <source>The second method is to use &lt;a href=&quot;https://docs.python.org/3/library/functools.html#functools.partial&quot;&gt;&lt;code&gt;functools.partial&lt;/code&gt;&lt;/a&gt; to 'bind' artists to function. A third method is to use closures to build up the required artists and functions. A fourth method is to create a class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89d408e432ad467c48b49874f8c5218fc1b8cc4e" translate="yes" xml:space="preserve">
          <source>The second of the pair of &lt;em&gt;x&lt;/em&gt; coordinates that define the bounding box.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="497c77c642223744c024fa8edc2192603562daf5" translate="yes" xml:space="preserve">
          <source>The second of the pair of &lt;em&gt;y&lt;/em&gt; coordinates that define the bounding box.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49c41fcc67221facba0b59a317a19d05413aaa56" translate="yes" xml:space="preserve">
          <source>The second one is passing it any number of the following keyword arguments:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48975fc8ce9ffa4769a9d1b2471a442f1b31a5a1" translate="yes" xml:space="preserve">
          <source>The second pair of (&lt;em&gt;x&lt;/em&gt;, &lt;em&gt;y&lt;/em&gt;) coordinates that define the bounding box.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95f1a93e56df3df4c8009ec5307048c271ce1390" translate="yes" xml:space="preserve">
          <source>The selected path can be used in conjunction with &lt;a href=&quot;path_api#matplotlib.path.Path.contains_point&quot;&gt;&lt;code&gt;contains_point()&lt;/code&gt;&lt;/a&gt; to select data points from an image.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="116df9ed32e616a471f42929ea7aba069443f89f" translate="yes" xml:space="preserve">
          <source>The selected path can be used in conjunction with &lt;a href=&quot;path_api#matplotlib.path.Path.contains_point&quot;&gt;&lt;code&gt;contains_point&lt;/code&gt;&lt;/a&gt; to select data points from an image.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b24c5126a3512f4a0a13f5d4a2adeeb946614dfd" translate="yes" xml:space="preserve">
          <source>The sequence is cycled for the levels in ascending order. If the sequence is shorter than the number of levels, it's repeated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a1eac235c4ae0be575e1ebacfcf702336efa715" translate="yes" xml:space="preserve">
          <source>The settable properties of &lt;em&gt;artist&lt;/em&gt;, as plain text if &lt;code&gt;&lt;a href=&quot;https://matplotlib.org/3.1.1/tutorials/introductory/customizing.html#matplotlib-rcparams&quot;&gt;rcParams[&quot;docstring.hardcopy&quot;]&lt;/a&gt;&lt;/code&gt; is False and as a rst table (intended for use in Sphinx) if it is True.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9725510ce32cd3ccc4e2a7f9defde582350c0ec" translate="yes" xml:space="preserve">
          <source>The shadow color.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da753c6cec94cf8513b457bd85f1ab7fa6c293c3" translate="yes" xml:space="preserve">
          <source>The shadow color. Default is black. A value of &lt;code&gt;None&lt;/code&gt; takes the original artist's color with a scale factor of &lt;code&gt;rho&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8851784515ecbe84fd4d291506cf06993d772031" translate="yes" xml:space="preserve">
          <source>The singular form &lt;em&gt;edgecolor&lt;/em&gt; works as an alias.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="216ea6b41a55acb6dcaa6e698db82a54ff20be28" translate="yes" xml:space="preserve">
          <source>The size (width, height) of the figure in inches.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="952992600c4266495101b7f4e397d1fe4811e498" translate="yes" xml:space="preserve">
          <source>The size is in Adobe points (converted from TeX points).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2dc0024c13248e572689b861bd11ed38c5748893" translate="yes" xml:space="preserve">
          <source>The size to set for each element of the collection. The value is the 'area' of the element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e03c3f283e023fc7e62738761ef40aff95430253" translate="yes" xml:space="preserve">
          <source>The slider initial position.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83c59d55f3080f0820a9ad0368d70d7c21735ccf" translate="yes" xml:space="preserve">
          <source>The spacing between columns. Measured in font-size units. Default is &lt;code&gt;None&lt;/code&gt;, which will take the value from &lt;code&gt;&lt;a href=&quot;https://matplotlib.org/3.1.1/tutorials/introductory/customizing.html#matplotlib-rcparams&quot;&gt;rcParams[&quot;legend.columnspacing&quot;]&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a329e357aad2fdf1d963e7ece6a0e545bbde3517" translate="yes" xml:space="preserve">
          <source>The speed is intermediate. Note: The grid is checked, and if found to be uniform the fast version is used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6163ee0d05a58f0c834563aa57a21fd1bc779b39" translate="yes" xml:space="preserve">
          <source>The standard descriptions of all the &lt;a href=&quot;../collections_api#matplotlib.collections.Collection&quot;&gt;&lt;code&gt;Collection&lt;/code&gt;&lt;/a&gt; parameters:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4aaa5bed12f84ab171eaa2b90fd7e9a5b96e3a87" translate="yes" xml:space="preserve">
          <source>The standard keys are &lt;code&gt;'Title'&lt;/code&gt;, &lt;code&gt;'Author'&lt;/code&gt;, &lt;code&gt;'Subject'&lt;/code&gt;, &lt;code&gt;'Keywords'&lt;/code&gt;, &lt;code&gt;'Creator'&lt;/code&gt;, &lt;code&gt;'Producer'&lt;/code&gt;, &lt;code&gt;'CreationDate'&lt;/code&gt;, &lt;code&gt;'ModDate'&lt;/code&gt;, and &lt;code&gt;'Trapped'&lt;/code&gt;. Values have been predefined for &lt;code&gt;'Creator'&lt;/code&gt;, &lt;code&gt;'Producer'&lt;/code&gt; and &lt;code&gt;'CreationDate'&lt;/code&gt;. They can be removed by setting them to &lt;a href=&quot;https://docs.python.org/3/library/constants.html#None&quot;&gt;&lt;code&gt;None&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d522072b6ceeba5b77646a50a7d24b9ab9a41e9b" translate="yes" xml:space="preserve">
          <source>The standard keys are &lt;code&gt;'Title'&lt;/code&gt;, &lt;code&gt;'Author'&lt;/code&gt;, &lt;code&gt;'Subject'&lt;/code&gt;, &lt;code&gt;'Keywords'&lt;/code&gt;, &lt;code&gt;'Producer'&lt;/code&gt;, &lt;code&gt;'Creator'&lt;/code&gt; and &lt;code&gt;'Trapped'&lt;/code&gt;. Values have been predefined for &lt;code&gt;'Creator'&lt;/code&gt; and &lt;code&gt;'Producer'&lt;/code&gt;. They can be removed by setting them to the empty string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0de41e629f9739b281dbe19cd677d20e04c910f3" translate="yes" xml:space="preserve">
          <source>The steps variants connect the points with step-like lines, i.e. horizontal lines with vertical steps. They differ in the location of the step:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6117b3ace58a8625ee0106fd779d478ad0264e8d" translate="yes" xml:space="preserve">
          <source>The stream for output.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd705da15eab20a7fdbc93c4528389492205e0bb" translate="yes" xml:space="preserve">
          <source>The streamline color. If given an array, its values are converted to colors using &lt;em&gt;cmap&lt;/em&gt; and &lt;em&gt;norm&lt;/em&gt;. The array must have the same shape as &lt;em&gt;u&lt;/em&gt; and &lt;em&gt;v&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6882ba2305169c5cb7ca770e2c503c282d62470f" translate="yes" xml:space="preserve">
          <source>The string &lt;code&gt;'best'&lt;/code&gt; places the legend at the location, among the nine locations defined so far, with the minimum overlap with other drawn artists. This option can be quite slow for plots with large amounts of data; your plotting speed may benefit from providing a specific location.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25e76d4c306b08cced92bdf2410de1717ef14ae3" translate="yes" xml:space="preserve">
          <source>The string &lt;code&gt;'center'&lt;/code&gt; places the legend at the center of the axes/figure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1df60af0c60bf92988d74349172bae44be8d271" translate="yes" xml:space="preserve">
          <source>The string used inside the inequality used on the labels.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8dc20ae8708c5043718d329f52bb28f1cbef3776" translate="yes" xml:space="preserve">
          <source>The strings &lt;code&gt;'upper center', 'lower center', 'center left', 'center right'&lt;/code&gt; place the legend at the center of the corresponding edge of the axes/figure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="106bafc2f864c5bf8279a996f9fc98889db88576" translate="yes" xml:space="preserve">
          <source>The strings &lt;code&gt;'upper left', 'upper right', 'lower left', 'lower right'&lt;/code&gt; place the legend at the corresponding corner of the axes/figure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa38aaee5ea43eec31d91583bb0f20563f1cd20e" translate="yes" xml:space="preserve">
          <source>The style name of 'default' is reserved for reverting back to the default style settings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8bc30e7346ec8ba57494a297359e343c5c951e4a" translate="yes" xml:space="preserve">
          <source>The style of the fancy box. This can either be a &lt;a href=&quot;matplotlib.patches.boxstyle#matplotlib.patches.BoxStyle&quot;&gt;&lt;code&gt;BoxStyle&lt;/code&gt;&lt;/a&gt; instance or a string of the style name and optionally comma seprarated attributes (e.g. &quot;Round, pad=0.2&quot;). This string is passed to &lt;a href=&quot;matplotlib.patches.boxstyle#matplotlib.patches.BoxStyle&quot;&gt;&lt;code&gt;BoxStyle&lt;/code&gt;&lt;/a&gt; to construct a &lt;a href=&quot;matplotlib.patches.boxstyle#matplotlib.patches.BoxStyle&quot;&gt;&lt;code&gt;BoxStyle&lt;/code&gt;&lt;/a&gt; object. See there for a full documentation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8b80e0a1f1bc7b9cc473495f0bbe9c103e92bd8" translate="yes" xml:space="preserve">
          <source>The subplot will occupy the num1-th cell of the given gridspec. If num2 is provided, the subplot will span between num1-th cell and num2-th cell.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56399d2b02b8772a532cd5de2b8bff12fabf40da" translate="yes" xml:space="preserve">
          <source>The subplotspecs of each axes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f30860959d6a8ab52a5a9ac69ca910d345223bd0" translate="yes" xml:space="preserve">
          <source>The supported additional parameters depend on the plotting style.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71bae98f2da27482efa1ceadfe4ed64b9364c76c" translate="yes" xml:space="preserve">
          <source>The supported color abbreviations are the single letter codes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c606d21b9bea47913b57dadab9a210add1ac7c9d" translate="yes" xml:space="preserve">
          <source>The symmetrical logarithmic scale is logarithmic in both the positive and negative directions from the origin.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d68dae07fc2d19bd8d035c63a92e5deabb2d078" translate="yes" xml:space="preserve">
          <source>The table can optionally have row and column headers, which are configured using &lt;em&gt;rowLabels&lt;/em&gt;, &lt;em&gt;rowColours&lt;/em&gt;, &lt;em&gt;rowLoc&lt;/em&gt; and &lt;em&gt;colLabels&lt;/em&gt;, &lt;em&gt;colColours&lt;/em&gt;, &lt;em&gt;colLoc&lt;/em&gt; respectively.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42fe90d8e7abb995694bc9c565b4251d7b4d56a5" translate="yes" xml:space="preserve">
          <source>The table consists of a grid of cells, which are indexed by (row, column).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5269007489749edadcf991fb78e1bc2b450dd6ac" translate="yes" xml:space="preserve">
          <source>The table consists of a grid of cells, which are indexed by (row, column). The cell (0, 0) is positioned at the top left.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="053df5a9c0487a9470a4e186f5674bbaad17fa89" translate="yes" xml:space="preserve">
          <source>The text alignment of the column header cells.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b1553bae9f45ccb382288f2c68e29b11f688d2c" translate="yes" xml:space="preserve">
          <source>The text alignment of the row header cells.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cdeb6c81233ffb292c334c5f4a231e465b4bda10" translate="yes" xml:space="preserve">
          <source>The text angles are actually relative to (90 + angle of the direction to the ticklabel), which gives 0 for bottom axis.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0dcf1e7a50f8f0a336202dc6e347d8600fe5c692" translate="yes" xml:space="preserve">
          <source>The text color.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8acd87f0b0176832cf50e4934c3885da65d2d909" translate="yes" xml:space="preserve">
          <source>The text horizontal alignment.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0551919cff05d4c3559dc8928323dac8f508564" translate="yes" xml:space="preserve">
          <source>The text of the annotation. &lt;em&gt;s&lt;/em&gt; is a deprecated synonym for this parameter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="281c4c911ecb6ddcc19ec2e927a0327cad829347" translate="yes" xml:space="preserve">
          <source>The text of the column header cells.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72f8bd6403ab83cfc5e367e813aa3e25a14a6d05" translate="yes" xml:space="preserve">
          <source>The text of the row header cells.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d2c9dfbf258d527a7e2c6f6251a290bf9cfd6cd" translate="yes" xml:space="preserve">
          <source>The text string to display.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7001ead9ab548d59ed3b0b0d47f9fc2feadd5c3b" translate="yes" xml:space="preserve">
          <source>The text string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8769cff4101d5a305cf1bf43ab1d447884e52d4d" translate="yes" xml:space="preserve">
          <source>The text to be converted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03f1b9870a58f3582c60fc9833f39d053c1ee279" translate="yes" xml:space="preserve">
          <source>The text to convert to a path.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c2dfc68858055a2ec928ebcf232c9537fbf299c" translate="yes" xml:space="preserve">
          <source>The text vertical alignment.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef359eb63a3e4e2e83b93c0386e4232cb9ad999c" translate="yes" xml:space="preserve">
          <source>The text.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35b1932fb6b830990820a3e51d7dff0bd19d829e" translate="yes" xml:space="preserve">
          <source>The texts to place into the table cells.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52fb735c548e7032dcb852f7f400ccaef51f202d" translate="yes" xml:space="preserve">
          <source>The the text position.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07c23024300ebd23e5925e0ef12383bc9c95b7cd" translate="yes" xml:space="preserve">
          <source>The theta position of the radius labels in degrees.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="141172ed9d85082d994ae7314a50f2f0c0de56e2" translate="yes" xml:space="preserve">
          <source>The third way is to specify multiple sets of &lt;em&gt;[x]&lt;/em&gt;, &lt;em&gt;y&lt;/em&gt;, &lt;em&gt;[fmt]&lt;/em&gt; groups:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f657ddf4283882a5ee1b3c1c85bab47a2bda266" translate="yes" xml:space="preserve">
          <source>The thumbnail filename.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ac0282ab4610a58e72cc3ffd987a5c68b67edef" translate="yes" xml:space="preserve">
          <source>The tick labels of the bars. Default: None (Use default numeric labels.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ccb1a3f71f0f7c8460418836989cc3a2bd51fcc1" translate="yes" xml:space="preserve">
          <source>The time between timer events in milliseconds. Default is 1000 ms.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb6553e904cf92bd3c56e94023568661ee4b3858" translate="yes" xml:space="preserve">
          <source>The time zone to use in labeling dates. If &lt;em&gt;None&lt;/em&gt;, defaults to rcParam &lt;code&gt;timezone&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4c092972dadc41270915c63b95cff7d68ff1e07" translate="yes" xml:space="preserve">
          <source>The times corresponding to midpoints of segments (i.e., the columns in &lt;em&gt;spectrum&lt;/em&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2a0a4462daae00c157f48768287dbc269d84d20" translate="yes" xml:space="preserve">
          <source>The timezone used to create date labels.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6028c48a4e05d07df3c12eff56668b2cfc9025c" translate="yes" xml:space="preserve">
          <source>The title text string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aca4f1680a28bb146b1967c6dab1e25f8eca2655" translate="yes" xml:space="preserve">
          <source>The title text.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97ab52232a1dc642656a5c3f3450a4aac3555ab5" translate="yes" xml:space="preserve">
          <source>The tolerance (a color value difference, where 255 is the maximal difference). The test fails if the average pixel difference is greater than this value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e639707ade3f9cb6d969fc4f2b3480b6d72ed570" translate="yes" xml:space="preserve">
          <source>The tolerance in points for mouse clicks picking a line. Default is 5 pt.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd257dada779a11bf571e9b110695d9679e741f9" translate="yes" xml:space="preserve">
          <source>The tool to add, see &lt;code&gt;ToolManager.get_tool&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e24f51ba6fa44bf5ac1dc9ad21cbfa7fc3512e9b" translate="yes" xml:space="preserve">
          <source>The tools to add in a {name: tool} dict, see &lt;code&gt;add_tool&lt;/code&gt; for more info.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd0b9ef6dd4868e14fc94d9ed5d08ea8b5d04305" translate="yes" xml:space="preserve">
          <source>The tools with which this &lt;code&gt;ToolContainer&lt;/code&gt; wants to communicate.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee714f9856954c40c88dba56e43ab54c681bb3ac" translate="yes" xml:space="preserve">
          <source>The top edge of the bounding box.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25ff5b6a43ec14d2c38a9904d2c4881f433f27a0" translate="yes" xml:space="preserve">
          <source>The top level container for all the plot elements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65dbf0e1f0ecd58891c7bff91fb4fbfd9f393af3" translate="yes" xml:space="preserve">
          <source>The top limit (default: None, which leaves the top limit unchanged).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a51a28de05963c1bd5430f5ef97b3a61de3c38c7" translate="yes" xml:space="preserve">
          <source>The top of the subplots of the figure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d1923caa1b17b4a7d726ce4e08b27f11079b815" translate="yes" xml:space="preserve">
          <source>The top ylim in data coordinates. Passing &lt;em&gt;None&lt;/em&gt; leaves the limit unchanged.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e8d3a069b173c4dcc93967874fe1fcdcf927f15" translate="yes" xml:space="preserve">
          <source>The top-right corner of the bounding box.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="662cdbabf3bf0d457f42e675328f21196c30ee4a" translate="yes" xml:space="preserve">
          <source>The total height of the lines (i.e. the lines stretches from &lt;code&gt;lineoffset - linelength/2&lt;/code&gt; to &lt;code&gt;lineoffset + linelength/2&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fea4b3910e06af105f6116691e312550e8a9d3ac" translate="yes" xml:space="preserve">
          <source>The total height of the marker (i.e. the marker stretches from &lt;code&gt;lineoffset - linelength/2&lt;/code&gt; to &lt;code&gt;lineoffset + linelength/2&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01a3734486dbbba8ba94e2c69fa57518fc9d435d" translate="yes" xml:space="preserve">
          <source>The transData of the &lt;em&gt;cax&lt;/em&gt; is adjusted so that the limits in the longest axis actually corresponds to the limits in colorbar range. On the other hand, the shortest axis has a data limits of [1,2], whose unconventional value is to prevent underflow when log scale is used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="691d5107da7ca4ad83277fd3f0ebc0939ffeee10" translate="yes" xml:space="preserve">
          <source>The transform for arbitrary scaling</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74545a05d3d1adc185fb1abd6cb749a477d0ebf2" translate="yes" xml:space="preserve">
          <source>The transform for linear scaling is just the &lt;a href=&quot;transformations#matplotlib.transforms.IdentityTransform&quot;&gt;&lt;code&gt;IdentityTransform&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64ac4a8a3e51b81b81331be7d3a1f7689d573974" translate="yes" xml:space="preserve">
          <source>The transform for the bounding box (&lt;code&gt;bbox_to_anchor&lt;/code&gt;). For a value of &lt;code&gt;None&lt;/code&gt; (default) the Axes' &lt;code&gt;transAxes&lt;/code&gt; transform will be used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="090b37d4eac7840caec679b4aa1ef348551524ed" translate="yes" xml:space="preserve">
          <source>The transform used for drawing secondart y-axis labels, which will add &lt;em&gt;pad_points&lt;/em&gt; of padding (in points) between the axes and the label. The x-direction is in axis coordinates and the y-direction is in data corrdinates</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e6583bc11bc8c126ef62cf543ca2a53879f5ee5" translate="yes" xml:space="preserve">
          <source>The transform used for drawing secondary x-axis labels, which will add &lt;em&gt;pad_points&lt;/em&gt; of padding (in points) between the axes and the label. The x-direction is in data coordinates and the y-direction is in axis corrdinates</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="806d699f2fce78b4e3e34a705ae3eb4a84914cf0" translate="yes" xml:space="preserve">
          <source>The transform used for drawing x-axis labels, which will add &lt;em&gt;pad_points&lt;/em&gt; of padding (in points) between the axes and the label. The x-direction is in data coordinates and the y-direction is in axis corrdinates</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd9aedc1724ca0296fe3bfc2a51b3f3ad6a31a1e" translate="yes" xml:space="preserve">
          <source>The transform used for drawing y-axis labels, which will add &lt;em&gt;pad_points&lt;/em&gt; of padding (in points) between the axes and the label. The x-direction is in axis coordinates and the y-direction is in data corrdinates</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="101d440df6af7aa600a197b1e3e669459fe22228" translate="yes" xml:space="preserve">
          <source>The transformation object for the coordinate system in use, i.e., &lt;code&gt;matplotlib.axes.Axes.transAxes&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da675f5f1b78e727341a73cec5c9942f357fcfbe" translate="yes" xml:space="preserve">
          <source>The transformation object for the coordinate system in use, i.e., &lt;code&gt;matplotlib.axes.Axes.transData&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49a593a1de3a206b0ebd9c86bddbf5f93e4b21ab" translate="yes" xml:space="preserve">
          <source>The transmute method is a very core of the &lt;code&gt;BboxTransmuter&lt;/code&gt; class and must be overridden in the subclasses. It receives the location and size of the rectangle, and the mutation_size, with which the amount of padding and etc. will be scaled. It returns a &lt;a href=&quot;../path_api#matplotlib.path.Path&quot;&gt;&lt;code&gt;Path&lt;/code&gt;&lt;/a&gt; instance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb5e2a9bd8f7889dfdf5e5ad16e7470f9988d24b" translate="yes" xml:space="preserve">
          <source>The transmute method is the very core of the ArrowStyle class and must be overridden in the subclasses. It receives the path object along which the arrow will be drawn, and the mutation_size, with which the arrow head etc. will be scaled. The linewidth may be used to adjust the path so that it does not pass beyond the given points. It returns a tuple of a Path instance and a boolean. The boolean value indicate whether the path can be filled or not. The return value can also be a list of paths and list of booleans of a same length.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea4930c12ecb82f2eee41507e15eea255e2c9a12" translate="yes" xml:space="preserve">
          <source>The triangulation can be specified in one of two ways; either</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc8e4c3ded52b51f5ddd956a30589de332beb6e3" translate="yes" xml:space="preserve">
          <source>The triangulation can be specified in one of two ways; either:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf680d6bf332f768421560c61bba5188fc34b2ef" translate="yes" xml:space="preserve">
          <source>The triangulation must be valid, i.e. it must not have duplicate points, triangles formed from colinear points, or overlapping triangles. The algorithm has some tolerance to triangles formed from colinear points, but this should not be relied upon.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c58ae46dbc49ffc444d1faabd6016627cdc954f7" translate="yes" xml:space="preserve">
          <source>The triangulation to interpolate over.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="329566cb0c3323983a78ebefb3e663da4af571f7" translate="yes" xml:space="preserve">
          <source>The triangulation to plot can be specified in one of two ways; either:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc90d1fb8332a6b3508d38f9748922f8b25c9979" translate="yes" xml:space="preserve">
          <source>The tuples define the outer edges of the grid. All individual quadrilaterals will be of the same size. This is the fastest version.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65d5f6e98b9a62b3d7b746eae3dee7f55a447603" translate="yes" xml:space="preserve">
          <source>The two given filenames may point to files which are convertible to PNG via the &lt;code&gt;converter&lt;/code&gt; dictionary. The underlying RMS is calculated with the &lt;code&gt;calculate_rms&lt;/code&gt; function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f28b2741100bd1371aed6e3c1e1bdd35d9a1721" translate="yes" xml:space="preserve">
          <source>The two values of y are to allow for discontinuous mapping functions. E.g. a sawtooth with a period of 0.2 and an amplitude of 1 would be:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49a1b8bdfe5e9d88f2623db3bc056fb1f17dffba" translate="yes" xml:space="preserve">
          <source>The type of blending used to combine the colormapped data values with the illumination intensity. Default is &quot;overlay&quot;. Note that for most topographic surfaces, &quot;overlay&quot; or &quot;soft&quot; appear more visually realistic. If a user-defined function is supplied, it is expected to combine an MxNx3 RGB array of floats (ranging 0 to 1) with an MxNx1 hillshade array (also 0 to 1). (Call signature &lt;code&gt;func(rgb, illum, **kwargs)&lt;/code&gt;) Additional kwargs supplied to this function will be passed on to the &lt;em&gt;blend_mode&lt;/em&gt; function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f40d40abf6baea35673f477f5d760e5e0697140f" translate="yes" xml:space="preserve">
          <source>The type of blending used to combine the colormapped data values with the illumination intensity. For backwards compatibility, this defaults to &quot;hsv&quot;. Note that for most topographic surfaces, &quot;overlay&quot; or &quot;soft&quot; appear more visually realistic. If a user-defined function is supplied, it is expected to combine an MxNx3 RGB array of floats (ranging 0 to 1) with an MxNx1 hillshade array (also 0 to 1). (Call signature &lt;code&gt;func(rgb, illum, **kwargs)&lt;/code&gt;) Additional kwargs supplied to this function will be passed on to the &lt;em&gt;blend_mode&lt;/em&gt; function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3d0394f4f2e80b65c73989653612747b8bf9c23" translate="yes" xml:space="preserve">
          <source>The type of histogram to draw.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6794ffbc9947a5247f457219b8c3180336550380" translate="yes" xml:space="preserve">
          <source>The underlying storage is made up of two parallel numpy arrays:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09f994f95e6dae5350ad377766d1d2f0e9abc3e9" translate="yes" xml:space="preserve">
          <source>The unit for input to the transform used by &lt;code&gt;__call__&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="323c48ef924ba11a7328585407a20534ff55f335" translate="yes" xml:space="preserve">
          <source>The unit vector direction towards the light source.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08c89fc2902588dd3a27b0f68d52898169afe862" translate="yes" xml:space="preserve">
          <source>The units in which majors and minors are given; 'width' and 'height' refer to the dimensions of the axes, while 'x' and 'y' refer to the &lt;em&gt;offsets&lt;/em&gt; data units. 'xy' differs from all others in that the angle as plotted varies with the aspect ratio, and equals the specified angle only when the aspect ratio is unity. Hence it behaves the same as the &lt;a href=&quot;_as_gen/matplotlib.patches.ellipse#matplotlib.patches.Ellipse&quot;&gt;&lt;code&gt;Ellipse&lt;/code&gt;&lt;/a&gt; with &lt;code&gt;axes.transData&lt;/code&gt; as its transform.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9114d7a1735c2ed7d6c3367f7f20fe5e21199817" translate="yes" xml:space="preserve">
          <source>The upper left corner where the image should be drawn, in pixel space.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17abc385d3427cf8e03e7aaca6e956dfebfe319c" translate="yes" xml:space="preserve">
          <source>The use of &lt;a href=&quot;../cm_api#matplotlib.cm.ScalarMappable&quot;&gt;&lt;code&gt;ScalarMappable&lt;/code&gt;&lt;/a&gt; is optional. If the &lt;a href=&quot;../cm_api#matplotlib.cm.ScalarMappable&quot;&gt;&lt;code&gt;ScalarMappable&lt;/code&gt;&lt;/a&gt; array &lt;code&gt;_A&lt;/code&gt; is not None (i.e., a call to &lt;a href=&quot;../cm_api#matplotlib.cm.ScalarMappable.set_array&quot;&gt;&lt;code&gt;set_array()&lt;/code&gt;&lt;/a&gt; has been made), at draw time a call to scalar mappable will be made to set the colors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="069ddd082b4d9686a142986aa3ce70d894707ccc" translate="yes" xml:space="preserve">
          <source>The use of &lt;a href=&quot;cm_api#matplotlib.cm.ScalarMappable&quot;&gt;&lt;code&gt;ScalarMappable&lt;/code&gt;&lt;/a&gt; is optional. If the &lt;a href=&quot;cm_api#matplotlib.cm.ScalarMappable&quot;&gt;&lt;code&gt;ScalarMappable&lt;/code&gt;&lt;/a&gt; array &lt;code&gt;_A&lt;/code&gt; is not None (i.e., a call to &lt;a href=&quot;cm_api#matplotlib.cm.ScalarMappable.set_array&quot;&gt;&lt;code&gt;set_array()&lt;/code&gt;&lt;/a&gt; has been made), at draw time a call to scalar mappable will be made to set the colors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6b0bf6ca6948b195585d02abfe4c08f767dedfb" translate="yes" xml:space="preserve">
          <source>The use of &lt;a href=&quot;cm_api#matplotlib.cm.ScalarMappable&quot;&gt;&lt;code&gt;ScalarMappable&lt;/code&gt;&lt;/a&gt; is optional. If the &lt;a href=&quot;cm_api#matplotlib.cm.ScalarMappable&quot;&gt;&lt;code&gt;ScalarMappable&lt;/code&gt;&lt;/a&gt; matrix _A is not None (i.e., a call to set_array has been made), at draw time a call to scalar mappable will be made to set the face colors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="267ca9f526716cbb923a9f9fecea199b1d41d95c" translate="yes" xml:space="preserve">
          <source>The use of an &lt;a href=&quot;../axes_api#matplotlib.axes.Axes&quot;&gt;&lt;code&gt;axes.Axes&lt;/code&gt;&lt;/a&gt; as an argument is deprecated and will be removed in v3.0. Please use &lt;a href=&quot;matplotlib.pyplot.sca#matplotlib.pyplot.sca&quot;&gt;&lt;code&gt;pyplot.sca&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf03213f16ed909fa68de676945c650e8bdef774" translate="yes" xml:space="preserve">
          <source>The use of the context manager ensures that setup() and finish() are performed as necessary.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1fa7cde6e63e0332974193e9d5aaa5f618186796" translate="yes" xml:space="preserve">
          <source>The user can also directly supply a subclass of &lt;a href=&quot;../transformations#matplotlib.transforms.Transform&quot;&gt;&lt;code&gt;transforms.Transform&lt;/code&gt;&lt;/a&gt; so long as it has an inverse.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aac02ada97af953e524b58558c8ac2f0d9789f36" translate="yes" xml:space="preserve">
          <source>The values at each point.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95c8661f60018b389a91156d14809f915319777b" translate="yes" xml:space="preserve">
          <source>The values for the angle spectrum in radians (real valued)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc374b2ecebc8f9fb1baad0b356693dde224c442" translate="yes" xml:space="preserve">
          <source>The values for the angle spectrum in radians (real valued).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2fec58f5be1f6c16434f01659bff6dfe834ea378" translate="yes" xml:space="preserve">
          <source>The values for the complex spectrum (complex valued)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="570deece09fc7ab6bf39f2ea59c6232466fb1e42" translate="yes" xml:space="preserve">
          <source>The values for the cross spectrum &lt;code&gt;P_{xy}&lt;/code&gt; before scaling (complex valued).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4cd29174acb0061f75576e0201af96426bc43d8" translate="yes" xml:space="preserve">
          <source>The values for the cross spectrum &lt;code&gt;P_{xy}&lt;/code&gt; before scaling (real valued)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e54e52be7da79edd9e52d2a8a7b489329f60103d" translate="yes" xml:space="preserve">
          <source>The values for the magnitude spectrum (real valued)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67547860fee57dbf4b5e86301489ed00eab27aae" translate="yes" xml:space="preserve">
          <source>The values for the magnitude spectrum before scaling (real valued).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57c5883c813c9127bbc99cb69222ccc4e355d873" translate="yes" xml:space="preserve">
          <source>The values for the phase spectrum in radians (real valued)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ec6d10d780f779e9d742143b4b5ea0275283f5c" translate="yes" xml:space="preserve">
          <source>The values for the phase spectrum in radians (real valued).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6784381865e5b71097e3f9fbe912a29e159b45eb" translate="yes" xml:space="preserve">
          <source>The values for the power spectrum &lt;code&gt;P_{xx}&lt;/code&gt; (real valued)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a63d2a5a5830cdfb755f3a8badf277bfa7c706b3" translate="yes" xml:space="preserve">
          <source>The values for the power spectrum &lt;code&gt;P_{xx}&lt;/code&gt; before scaling (real valued).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41d39a1ccd7555e22e1686a66415d01f96c51594" translate="yes" xml:space="preserve">
          <source>The values of the histogram bins. See &lt;em&gt;density&lt;/em&gt; and &lt;em&gt;weights&lt;/em&gt; for a description of the possible semantics. If input &lt;em&gt;x&lt;/em&gt; is an array, then this is an array of length &lt;em&gt;nbins&lt;/em&gt;. If input is a sequence of arrays &lt;code&gt;[data1, data2,..]&lt;/code&gt;, then this is a list of arrays with the values of the histograms for each of the arrays in the same order. The dtype of the array &lt;em&gt;n&lt;/em&gt; (or of its element arrays) will always be float even if no weighting or normalization is used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5197496e150988a76db77dd6970dc6ef5606ca8" translate="yes" xml:space="preserve">
          <source>The vertical alignment of the text relative to (&lt;em&gt;x&lt;/em&gt;, &lt;em&gt;y&lt;/em&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23114804ede49d2e3dfd2b6516bd3c69fdfbdc9e" translate="yes" xml:space="preserve">
          <source>The vertical offset (relative to the font size) for the markers created for a scatter plot legend entry. 0.0 is at the base the legend text, and 1.0 is at the top. To draw all markers at the same height, set to &lt;code&gt;[0.5]&lt;/code&gt;. Default is &lt;code&gt;[0.375, 0.5, 0.3125]&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7824049e7ec1e1a9741ae0740dafa61ae72d0bbb" translate="yes" xml:space="preserve">
          <source>The vertical space between the legend entries. Measured in font-size units. Default is &lt;code&gt;None&lt;/code&gt;, which will take the value from &lt;code&gt;&lt;a href=&quot;https://matplotlib.org/3.1.1/tutorials/introductory/customizing.html#matplotlib-rcparams&quot;&gt;rcParams[&quot;legend.labelspacing&quot;]&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5b0111b28fd228de64d8d83b095d4dab883cc77" translate="yes" xml:space="preserve">
          <source>The vertices and codes arrays should be treated as immutable -- there are a number of optimizations and assumptions made up front in the constructor that will not change when the data changes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e53a7c10e6bd18e492a4482928e11924b699786" translate="yes" xml:space="preserve">
          <source>The vertices of the path as (N, 2) numpy array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1edc00d06d7fdb23fd073c0f3c56087cb13e2819" translate="yes" xml:space="preserve">
          <source>The video codec to be used. Not all codecs are supported by a given &lt;a href=&quot;matplotlib.animation.moviewriter#matplotlib.animation.MovieWriter&quot;&gt;&lt;code&gt;MovieWriter&lt;/code&gt;&lt;/a&gt;. If &lt;code&gt;None&lt;/code&gt;, default to &lt;code&gt;&lt;a href=&quot;https://matplotlib.org/3.1.1/tutorials/introductory/customizing.html#matplotlib-rcparams&quot;&gt;rcParams[&quot;animation.codec&quot;]&lt;/a&gt;&lt;/code&gt; = 'h264'.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce560c9ba5f006cee4d62fa57f34ea80f5c1220b" translate="yes" xml:space="preserve">
          <source>The view limits in data coordinates.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a711f28d7f022f95d4680bd7ffacd222818ed28f" translate="yes" xml:space="preserve">
          <source>The virtual font format is a derivative of dvi: &lt;a href=&quot;http://mirrors.ctan.org/info/knuth/virtual-fonts&quot;&gt;http://mirrors.ctan.org/info/knuth/virtual-fonts&lt;/a&gt; This class reuses some of the machinery of &lt;a href=&quot;#matplotlib.dviread.Dvi&quot;&gt;&lt;code&gt;Dvi&lt;/code&gt;&lt;/a&gt; but replaces the &lt;code&gt;_read&lt;/code&gt; loop and dispatch mechanism.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f552289e42ad339fa5da5c0a4b27ef431dc817d3" translate="yes" xml:space="preserve">
          <source>The way that &lt;em&gt;paths&lt;/em&gt;, &lt;em&gt;transforms&lt;/em&gt; and &lt;em&gt;offsets&lt;/em&gt; are combined follows the same method as for collections: Each is iterated over independently, so if you have 3 paths, 2 transforms and 1 offset, their combinations are as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a16ec1f9d3e63d3bacda5ea6f88ec729ca18e3e5" translate="yes" xml:space="preserve">
          <source>The wedge sizes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2852cffc15599c8d4d74643b192ee937e3e8c67" translate="yes" xml:space="preserve">
          <source>The wedges are plotted counterclockwise, by default starting from the x-axis.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cdcadac87e20e43fbb1d1a93fd968aa5c9f47dc2" translate="yes" xml:space="preserve">
          <source>The width of the arrow in points</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6b70c9dc7912a3f71e14f2cc65fa421b11e7a54" translate="yes" xml:space="preserve">
          <source>The width of the base of the arrow head in points</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30948b3bc3e127104133bdd5b1e9f9b8e994bc9d" translate="yes" xml:space="preserve">
          <source>The width of the box.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4de134fdd20ea8165e44f74bd8235815ca0c9273" translate="yes" xml:space="preserve">
          <source>The width of the canvas in logical units</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b65c18327a515241e5497b1e5578b2a85e3dd42" translate="yes" xml:space="preserve">
          <source>The width of the stream lines. With a 2D array the line width can be varied across the grid. The array must have the same shape as &lt;em&gt;u&lt;/em&gt; and &lt;em&gt;v&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c6f0511eccaacd3918ff5a79c849b1a8894d0bc" translate="yes" xml:space="preserve">
          <source>The width of the stroke being drawn (used for path snapping).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e853ddbb096fed417707e08a8b9ba8f6d8ef7fe" translate="yes" xml:space="preserve">
          <source>The width(s) of the bars (default: 0.8).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="204b9128168ee4cbe3a7f9d20de9d4aec15a1483" translate="yes" xml:space="preserve">
          <source>The width(s) of the bars.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5751678348d990167aef8d804b70f17b05151053" translate="yes" xml:space="preserve">
          <source>The width, depth, and height of the bars, respectively.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ddcbc9dd464b63b0daba83392deb4481881ab030" translate="yes" xml:space="preserve">
          <source>The width/height of the rectangle.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21737151e3d3d0d57061659f446efe26d34081f4" translate="yes" xml:space="preserve">
          <source>The x and y components of the barb shaft.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fce5ceea0824b95fbf309a970c72d383e3dce3af" translate="yes" xml:space="preserve">
          <source>The x and y coordinates of the arrow base.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1cf379b9205aa1290130aeeccf86da6130cbc02c" translate="yes" xml:space="preserve">
          <source>The x and y coordinates of the arrow locations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06e2bf9c8bc0d6ec5312dbf64322b1db8a19b3e2" translate="yes" xml:space="preserve">
          <source>The x and y coordinates of the barb locations. See &lt;em&gt;pivot&lt;/em&gt; for how the barbs are drawn to the x, y positions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c1a453a141194f52323c0ace6fd98abc6e94520" translate="yes" xml:space="preserve">
          <source>The x and y direction components of the arrow vectors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8e1c3284d1b0804dcd9d8932cd855dd4dbf7038" translate="yes" xml:space="preserve">
          <source>The x and y values converted to steps in the same order as the input; can be unpacked as &lt;code&gt;x_out, y1_out, ..., yp_out&lt;/code&gt;. If the input is length &lt;code&gt;N&lt;/code&gt;, each of these arrays will be length &lt;code&gt;2N + 1&lt;/code&gt;. For &lt;code&gt;N=0&lt;/code&gt;, the length will be 0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f4f7443867090db14ee26d2da28565b55bbf7f3" translate="yes" xml:space="preserve">
          <source>The x and y values converted to steps in the same order as the input; can be unpacked as &lt;code&gt;x_out, y1_out, ..., yp_out&lt;/code&gt;. If the input is length &lt;code&gt;N&lt;/code&gt;, each of these arrays will be length &lt;code&gt;2N&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3a819bab058a51c546dd51610e9307ea92ed32d" translate="yes" xml:space="preserve">
          <source>The x and y values to plot.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23b3a6d9ea33a2eaa9d7f9174e0213d53ee60176" translate="yes" xml:space="preserve">
          <source>The x coordinates of the bars. See also &lt;em&gt;align&lt;/em&gt; for the alignment of the bars to the coordinates.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="685ceeac579a6e751944016586e8564a17c00d5b" translate="yes" xml:space="preserve">
          <source>The x coordinates of the left sides of the bars (default: 0).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5009c9f6c65235fc0d2d5a261f19f42a5d7bda60" translate="yes" xml:space="preserve">
          <source>The x coordinates of the left sides of the bars.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="feb1ce1ee963121ddc40bfbc02428ee708fc4b63" translate="yes" xml:space="preserve">
          <source>The x coordinates of the nodes defining the curves.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41ae7612476ab30dffe74ecee3af78dad69704a2" translate="yes" xml:space="preserve">
          <source>The x coordinates of the nodes defining the first curve.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06b88c68dd74328d8edd0ea2c62a6660d1352d2d" translate="yes" xml:space="preserve">
          <source>The x coordinates of the nodes defining the second curve.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae21bf4189f31a83bd92dcfaf6a514a152b11244" translate="yes" xml:space="preserve">
          <source>The x location of the steps. May be empty.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b48054adcf5141722b9b24838967db43b3c8deef" translate="yes" xml:space="preserve">
          <source>The x location of the text in display coords.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7275da8ebcd1f61f7adc3cb2d3193ab60a58ffe1" translate="yes" xml:space="preserve">
          <source>The x location of the text in figure coordinates.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="684fbf97171796cd0b1f1ab39c11b57d9d6743d2" translate="yes" xml:space="preserve">
          <source>The x or y &lt;a href=&quot;../axis_api#module-matplotlib.axis&quot;&gt;&lt;code&gt;axis&lt;/code&gt;&lt;/a&gt; is shared with the x or y axis in the input &lt;a href=&quot;../axes_api#matplotlib.axes.Axes&quot;&gt;&lt;code&gt;Axes&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9869ea21e44ccaf3b128a41b60cae91685eb21cd" translate="yes" xml:space="preserve">
          <source>The x or y &lt;a href=&quot;axis_api#module-matplotlib.axis&quot;&gt;&lt;code&gt;axis&lt;/code&gt;&lt;/a&gt; is shared with the x or y axis in the input &lt;a href=&quot;#matplotlib.axes.Axes&quot;&gt;&lt;code&gt;Axes&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7879d76d4276581ebd93d1b6e8e7f5aadb431ba4" translate="yes" xml:space="preserve">
          <source>The x, y and z components of the arrow vectors</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38d34d1f5fe3aa3204f06d6c2cfb5a9c5687f500" translate="yes" xml:space="preserve">
          <source>The x, y and z coordinates of the arrow locations (default is tail of arrow; see &lt;em&gt;pivot&lt;/em&gt; kwarg)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60c73d362ad20e8e6ded234985c65a05907b42c7" translate="yes" xml:space="preserve">
          <source>The x-axis may be inverted, in which case the &lt;em&gt;left&lt;/em&gt; value will be greater than the &lt;em&gt;right&lt;/em&gt; value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0dba19108b2f62e17901f8a27c74e3b5a2a97155" translate="yes" xml:space="preserve">
          <source>The x-axis of self will have ticks on the bottom and the returned axes will have ticks on the top.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa7fae36fa3317a4c043e4fbdb466496be7e2f75" translate="yes" xml:space="preserve">
          <source>The x-data to be plotted</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d08a42bc8c7f7d25a4dda9bde599870a87fed0eb" translate="yes" xml:space="preserve">
          <source>The x-positions and extends of the rectangles. For each tuple (&lt;em&gt;xmin&lt;/em&gt;, &lt;em&gt;xwidth&lt;/em&gt;) a rectangle is drawn from &lt;em&gt;xmin&lt;/em&gt; to &lt;em&gt;xmin&lt;/em&gt; + &lt;em&gt;xwidth&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ec4df30122f45aa45e4d14a84cfbf2f05810bed" translate="yes" xml:space="preserve">
          <source>The x-positions are optional. The formats may be provided either as positional or as keyword-arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="862893379d8f9df548033722e1ff95576d3ae4dc" translate="yes" xml:space="preserve">
          <source>The x-positions of the stems. Default: (0, 1, ..., len(y) - 1).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4b61c6d84797965a8b53eca3adea69434093f4e" translate="yes" xml:space="preserve">
          <source>The x-spacing (columns) of the input &lt;em&gt;elevation&lt;/em&gt; grid.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f7c6da5a19ec299e421f1328cd5d4f8b99ac4b9" translate="yes" xml:space="preserve">
          <source>The y coordinate(s) of the bars bases (default: 0).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29e55e05399071c29c9b0fb5986371b17ff59413" translate="yes" xml:space="preserve">
          <source>The y coordinates of the bars. See also &lt;em&gt;align&lt;/em&gt; for the alignment of the bars to the coordinates.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e3fa6980993cfd226adfeb4ae190dc4cf022ffd" translate="yes" xml:space="preserve">
          <source>The y coordinates of the nodes defining the curves.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7dc954347af0460285e0149b61df5fbd5b33cfd" translate="yes" xml:space="preserve">
          <source>The y coordinates of the nodes defining the first curve.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42431bddcfdc248d82ba9816592c715bb592efba" translate="yes" xml:space="preserve">
          <source>The y coordinates of the nodes defining the second curve.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aace01acbd8bef597e15f0c7238b007e63487e9e" translate="yes" xml:space="preserve">
          <source>The y location of the text baseline in display coords.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e6d7c1a93e8c5dbf7e93988a14d9afb555febf0" translate="yes" xml:space="preserve">
          <source>The y location of the text in figure coordinates.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a4ba7a9f09bde3d66d6a4816e71dcaef5f3f35a" translate="yes" xml:space="preserve">
          <source>The y-axis may be inverted, in which case the &lt;em&gt;bottom&lt;/em&gt; value will be greater than the &lt;em&gt;top&lt;/em&gt; value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8114076006e78cb0aa1c2e6b049a9c7dbb0dd14b" translate="yes" xml:space="preserve">
          <source>The y-axis of self will have ticks on the left and the returned axes will have ticks on the right.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc394b07417f580a20dea1f7cd5a59e34b53ad93" translate="yes" xml:space="preserve">
          <source>The y-data to be plotted</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c188c2bea9edbe8209fc7b72a9b3a899e9dcdb7" translate="yes" xml:space="preserve">
          <source>The y-position and extend for all the rectangles.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e181ce2c144f96be8737568c09cbc8dacc93c1db" translate="yes" xml:space="preserve">
          <source>The y-position of the baseline.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4865318d782313db438a1518017acf02e8bdc5c3" translate="yes" xml:space="preserve">
          <source>The y-spacing (rows) of the input &lt;em&gt;elevation&lt;/em&gt; grid.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="edc0c2062bbbe3701edc7081088ebbac391d9434" translate="yes" xml:space="preserve">
          <source>The y-values of the stem heads.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c517a6f02f9c0bd315527f70e2e02eb24620460c" translate="yes" xml:space="preserve">
          <source>The z scale. Note that currently, only a linear scale is supported.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c64f6dd908052b0b928626eed9a456cc999f7f29" translate="yes" xml:space="preserve">
          <source>The z-axis sorting scheme passed onto &lt;a href=&quot;mpl_toolkits.mplot3d.art3d.poly3dcollection#mpl_toolkits.mplot3d.art3d.Poly3DCollection&quot;&gt;&lt;code&gt;Poly3DCollection&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a2fd5067def293159fed7ecc45b1b8cec9dceb1" translate="yes" xml:space="preserve">
          <source>The z-data to be plotted</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="063bdc3fe3a4aa6d4c0aefdfa8125fa1ce111312" translate="yes" xml:space="preserve">
          <source>The z-positions. Either an array of the same length as &lt;em&gt;xs&lt;/em&gt; and &lt;em&gt;ys&lt;/em&gt; or a single value to place all points in the same plane.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0213ce848d9d4fca622d082c8c2c98cbc4cd8c31" translate="yes" xml:space="preserve">
          <source>The zorder of the resulting boxplot.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4916adafaf92d62fb7dbe8ead484a09e75218c25" translate="yes" xml:space="preserve">
          <source>The zorder of the stream lines and arrows. Artists with lower zorder values are drawn first.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb5b06b421f5c9755386b66e8152919ed304089c" translate="yes" xml:space="preserve">
          <source>Then add simple Sankey sub-diagrams:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ae635189f4d9635266dd5d478cd486e981ad92d" translate="yes" xml:space="preserve">
          <source>There are a number of helper functions to convert between &lt;a href=&quot;https://docs.python.org/3/library/datetime.html#module-datetime&quot;&gt;&lt;code&gt;datetime&lt;/code&gt;&lt;/a&gt; objects and Matplotlib dates:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50cf6cf5994bb6eb6962d6d7daa5b4b3d90c3d6b" translate="yes" xml:space="preserve">
          <source>There are a number of locators specialized for date locations - see the &lt;code&gt;dates&lt;/code&gt; module.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12506ac8ee516dcb4f5f0da09541d6d298041220" translate="yes" xml:space="preserve">
          <source>There are many colormaps you can use to map data onto color values. Below we list several ways in which color can be utilized in Matplotlib.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20013067dc1e49573efb9f3e4d21a21d056888dd" translate="yes" xml:space="preserve">
          <source>There are relative and absolute forms of the keyword arguments. The plural is relative, and the singular is absolute. For each argument in the order below, the absolute form is applied first (by setting each attribute to that value) and then the relative form (by adding the value to the attribute).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef991c609d3385d98b62fd20893ee4fc4ade5ae9" translate="yes" xml:space="preserve">
          <source>There are several common color schemes used in visualization:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07f109c4c91aaa81c86fe566fd330cca9f9067d6" translate="yes" xml:space="preserve">
          <source>There are three possible interactions:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="783aedcd80985c452fdcfa00a82cba9935c7e5e4" translate="yes" xml:space="preserve">
          <source>There are two alternatives: either the first argument is a Triangulation object, in which case it is returned, or the args and kwargs are sufficient to create a new Triangulation to return. In the latter case, see Triangulation.__init__ for the possible args and kwargs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b8b488b15b67cc12565ac5d06ebcc44846891aa" translate="yes" xml:space="preserve">
          <source>There are two common representations for RGB images with an alpha channel:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95787a7c1a5fb0a15ca94c123dac555db726cf6d" translate="yes" xml:space="preserve">
          <source>There are two different ways to build a relativedelta instance. The first one is passing it two date/datetime classes:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d12e0c5efd0ae165b4e45515f088affa436f665a" translate="yes" xml:space="preserve">
          <source>There are various ways to plot multiple sets of data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3179054bb43d7e112df1c786805f09d420891a63" translate="yes" xml:space="preserve">
          <source>There is a use case where very large ellipses must be drawn with very high accuracy, and it is too expensive to render the entire ellipse with enough segments (either splines or line segments). Therefore, in the case where either radius of the ellipse is large enough that the error of the spline approximation will be visible (greater than one pixel offset from the ideal), a different technique is used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a64d2256e2a90bdeddd7b6ef9ee688c62529f90" translate="yes" xml:space="preserve">
          <source>There is also a slight difference in the handling of masked arrays. Both &lt;a href=&quot;matplotlib.axes.axes.pcolor#matplotlib.axes.Axes.pcolor&quot;&gt;&lt;code&gt;pcolor&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#matplotlib.axes.Axes.pcolormesh&quot;&gt;&lt;code&gt;pcolormesh&lt;/code&gt;&lt;/a&gt; support masked arrays for &lt;em&gt;C&lt;/em&gt;. However, only &lt;a href=&quot;matplotlib.axes.axes.pcolor#matplotlib.axes.Axes.pcolor&quot;&gt;&lt;code&gt;pcolor&lt;/code&gt;&lt;/a&gt; supports masked arrays for &lt;em&gt;X&lt;/em&gt; and &lt;em&gt;Y&lt;/em&gt;. The reason lies in the internal handling of the masked values. &lt;a href=&quot;matplotlib.axes.axes.pcolor#matplotlib.axes.Axes.pcolor&quot;&gt;&lt;code&gt;pcolor&lt;/code&gt;&lt;/a&gt; leaves out the respective polygons from the PolyCollection. &lt;a href=&quot;#matplotlib.axes.Axes.pcolormesh&quot;&gt;&lt;code&gt;pcolormesh&lt;/code&gt;&lt;/a&gt; sets the facecolor of the masked elements to transparent. You can see the difference when using edgecolors. While all edges are drawn irrespective of masking in a QuadMesh, the edge between two adjacent masked quadrilaterals in &lt;a href=&quot;matplotlib.axes.axes.pcolor#matplotlib.axes.Axes.pcolor&quot;&gt;&lt;code&gt;pcolor&lt;/code&gt;&lt;/a&gt; is not drawn as the corresponding polygons do not exist in the PolyCollection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="383b325f8b29ec18769928bbe30b3b19c671ae5e" translate="yes" xml:space="preserve">
          <source>There is also a slight difference in the handling of masked arrays. Both &lt;a href=&quot;matplotlib.axes.axes.pcolor#matplotlib.axes.Axes.pcolor&quot;&gt;&lt;code&gt;pcolor&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;matplotlib.axes.axes.pcolormesh#matplotlib.axes.Axes.pcolormesh&quot;&gt;&lt;code&gt;pcolormesh&lt;/code&gt;&lt;/a&gt; support masked arrays for &lt;em&gt;C&lt;/em&gt;. However, only &lt;a href=&quot;matplotlib.axes.axes.pcolor#matplotlib.axes.Axes.pcolor&quot;&gt;&lt;code&gt;pcolor&lt;/code&gt;&lt;/a&gt; supports masked arrays for &lt;em&gt;X&lt;/em&gt; and &lt;em&gt;Y&lt;/em&gt;. The reason lies in the internal handling of the masked values. &lt;a href=&quot;matplotlib.axes.axes.pcolor#matplotlib.axes.Axes.pcolor&quot;&gt;&lt;code&gt;pcolor&lt;/code&gt;&lt;/a&gt; leaves out the respective polygons from the PolyCollection. &lt;a href=&quot;matplotlib.axes.axes.pcolormesh#matplotlib.axes.Axes.pcolormesh&quot;&gt;&lt;code&gt;pcolormesh&lt;/code&gt;&lt;/a&gt; sets the facecolor of the masked elements to transparent. You can see the difference when using edgecolors. While all edges are drawn irrespective of masking in a QuadMesh, the edge between two adjacent masked quadrilaterals in &lt;a href=&quot;matplotlib.axes.axes.pcolor#matplotlib.axes.Axes.pcolor&quot;&gt;&lt;code&gt;pcolor&lt;/code&gt;&lt;/a&gt; is not drawn as the corresponding polygons do not exist in the PolyCollection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1a94a989d29edbb6b3097c716e9527ffd56a2fe" translate="yes" xml:space="preserve">
          <source>There is one special case, for handling images that are already rgb or rgba, such as might have been read from an image file. If &lt;em&gt;x&lt;/em&gt; is an ndarray with 3 dimensions, and the last dimension is either 3 or 4, then it will be treated as an rgb or rgba array, and no mapping will be done. The array can be uint8, or it can be floating point with values in the 0-1 range; otherwise a ValueError will be raised. If it is a masked array, the mask will be ignored. If the last dimension is 3, the &lt;em&gt;alpha&lt;/em&gt; kwarg (defaulting to 1) will be used to fill in the transparency. If the last dimension is 4, the &lt;em&gt;alpha&lt;/em&gt; kwarg is ignored; it does not replace the pre-existing alpha. A ValueError will be raised if the third dimension is other than 3 or 4.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="899751cf702e0fcd46c4d45aeec904b2ad737b3c" translate="yes" xml:space="preserve">
          <source>There's a convenient way for plotting objects with labelled data (i.e. data that can be accessed by index &lt;code&gt;obj['y']&lt;/code&gt;). Instead of giving the data in &lt;em&gt;x&lt;/em&gt; and &lt;em&gt;y&lt;/em&gt;, you can provide the object in the &lt;em&gt;data&lt;/em&gt; parameter and just give the labels for &lt;em&gt;x&lt;/em&gt; and &lt;em&gt;y&lt;/em&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="125f8a02f9c5ad878e56d51d1ed1b67bb78004ca" translate="yes" xml:space="preserve">
          <source>These are classes to support contour plotting and labelling for the Axes class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96c218f303e9ace2bb7c7c388cf1b318f5dcb1db" translate="yes" xml:space="preserve">
          <source>These arguments are deprecated and will be removed in a future version. They are equivalent to &lt;em&gt;bottom&lt;/em&gt; and &lt;em&gt;top&lt;/em&gt; respectively, and it is an error to pass both &lt;em&gt;ymin&lt;/em&gt; and &lt;em&gt;bottom&lt;/em&gt; or &lt;em&gt;ymax&lt;/em&gt; and &lt;em&gt;top&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b38bdba7c2711222d52264244a6d3ef1204013d3" translate="yes" xml:space="preserve">
          <source>These arguments can be used to indicate that a value gives only upper/lower limits. In that case a caret symbol is used to indicate this. &lt;em&gt;lims&lt;/em&gt;-arguments may be of the same type as &lt;em&gt;xerr&lt;/em&gt; and &lt;em&gt;yerr&lt;/em&gt;. To use limits with inverted axes, &lt;a href=&quot;matplotlib.axes.axes.set_xlim#matplotlib.axes.Axes.set_xlim&quot;&gt;&lt;code&gt;set_xlim()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;matplotlib.axes.axes.set_ylim#matplotlib.axes.Axes.set_ylim&quot;&gt;&lt;code&gt;set_ylim()&lt;/code&gt;&lt;/a&gt; must be called before &lt;a href=&quot;#matplotlib.axes.Axes.errorbar&quot;&gt;&lt;code&gt;errorbar()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0b6b1a4da8da3618120a54d1c06d0f645f47255" translate="yes" xml:space="preserve">
          <source>These arguments can be used to indicate that a value gives only upper/lower limits. In that case a caret symbol is used to indicate this. &lt;em&gt;lims&lt;/em&gt;-arguments may be of the same type as &lt;em&gt;xerr&lt;/em&gt; and &lt;em&gt;yerr&lt;/em&gt;. To use limits with inverted axes, &lt;code&gt;set_xlim()&lt;/code&gt; or &lt;code&gt;set_ylim()&lt;/code&gt; must be called before &lt;a href=&quot;#matplotlib.pyplot.errorbar&quot;&gt;&lt;code&gt;errorbar()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="039262cdaa3a12d94a7e36e182dbc11943a162da" translate="yes" xml:space="preserve">
          <source>These arguments can only be passed positionally.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1cffab92932d80d898b4b790cbed1017f53cd19e" translate="yes" xml:space="preserve">
          <source>These arguments cannot be passed as keywords.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06064ee6626fe5be99258dc0aff16a40af75e4da" translate="yes" xml:space="preserve">
          <source>These can also be specified by keyword:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e30765fd493ce5315c6dde0ce39ee308ff2a3ad0" translate="yes" xml:space="preserve">
          <source>These default values should be consistent with the default matplotlibrc file that actually reflects the values given here. Any additions or deletions to the parameter set listed here should also be visited to the &lt;code&gt;matplotlibrc.template&lt;/code&gt; in matplotlib's root source directory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95480357d8a35dd1acf0cb8c6207fd6c8f222492" translate="yes" xml:space="preserve">
          <source>These methods implicitly use &lt;a href=&quot;ticker_api#matplotlib.ticker.FixedLocator&quot;&gt;&lt;code&gt;FixedLocator&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;ticker_api#matplotlib.ticker.FixedFormatter&quot;&gt;&lt;code&gt;FixedFormatter&lt;/code&gt;&lt;/a&gt;. They can be convenient, but if not used together may de-couple your tick labels from your data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ba837ea616cc399f2008362e6d941f30d3b87d1" translate="yes" xml:space="preserve">
          <source>These parameters are passed on to the constructor of the &lt;a href=&quot;../image_api#matplotlib.image.AxesImage&quot;&gt;&lt;code&gt;AxesImage&lt;/code&gt;&lt;/a&gt; artist.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77413920e29c9e78c9994d9d1aef1cf7790f827a" translate="yes" xml:space="preserve">
          <source>These parameters determined if the view limits are adapted to the data limits. The values are passed on to &lt;a href=&quot;matplotlib.axes.axes.autoscale_view#matplotlib.axes.Axes.autoscale_view&quot;&gt;&lt;code&gt;autoscale_view&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f91b6eeb309a000dcec081116402648144f74bfc" translate="yes" xml:space="preserve">
          <source>These parameters determined if the view limits are adapted to the data limits. The values are passed on to &lt;code&gt;autoscale_view&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b57b9fc83d5d06ed1bb86ace7e9b50dbe70e3635" translate="yes" xml:space="preserve">
          <source>These two arrays always have the same length in the first dimension. For example, to represent a cubic curve, you must provide three vertices as well as three codes &lt;code&gt;CURVE3&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f418cf3098ccebe6f3d639b3b92efc093af331a" translate="yes" xml:space="preserve">
          <source>Theta increases in the clockwise direction</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="190f8f304260d4a5cfceedb8c1b82d3934666c97" translate="yes" xml:space="preserve">
          <source>Theta increases in the counterclockwise direction</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81b5f17b9a1333e2f02b8beadcba336eead8c785" translate="yes" xml:space="preserve">
          <source>Theta starts pointing east and goes anti-clockwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f2235f3b1ee7567e43dac373fa9ca17841f62e9" translate="yes" xml:space="preserve">
          <source>They are equivalent to bottom and top respectively, and it is an error to pass both &lt;em&gt;ymin&lt;/em&gt; and &lt;em&gt;bottom&lt;/em&gt; or &lt;em&gt;ymax&lt;/em&gt; and &lt;em&gt;top&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5366f346c9de79db1bcd4a4f237be4dd4df0edd1" translate="yes" xml:space="preserve">
          <source>They are equivalent to left and right respectively, and it is an error to pass both &lt;em&gt;xmin&lt;/em&gt; and &lt;em&gt;left&lt;/em&gt; or &lt;em&gt;xmax&lt;/em&gt; and &lt;em&gt;right&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5eee39d748243ad3131d1edb1a25888e55866e7" translate="yes" xml:space="preserve">
          <source>They can also be scalars, or two-dimensional (in that case, the columns represent separate data sets).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="988e6d6059774d58d2a3b4a63b3ef509206739f4" translate="yes" xml:space="preserve">
          <source>They must also define</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c526849f7acb658c176a7c914bb0a5fcebad0205" translate="yes" xml:space="preserve">
          <source>This &quot;generic&quot; version can handle any given child transform in the &lt;em&gt;x&lt;/em&gt;- and &lt;em&gt;y&lt;/em&gt;-directions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c36a2a4d5cae4098188db2eb3bc8c67a29192b37" translate="yes" xml:space="preserve">
          <source>This &quot;generic&quot; version can handle any two arbitrary transformations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4bae32e29152ed4b55ee06ef3ed7dd994a7577f7" translate="yes" xml:space="preserve">
          <source>This affects the axis lines, ticks, ticklabels, grid and axis labels.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d5dfbbefaa110140f88ca639784a9e43303ecd7" translate="yes" xml:space="preserve">
          <source>This allows one to delay initialization of the vertices.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e01e1220d8d93a781772d5ae0d1eeb48357a640" translate="yes" xml:space="preserve">
          <source>This allows one to do:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64d2d1cacea9f987f5351aa1e7db93b848c2a028" translate="yes" xml:space="preserve">
          <source>This allows one to initialize vertices with path codes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c61c1e7e828efc725a26e3b7d7991fe43dd4cf6" translate="yes" xml:space="preserve">
          <source>This allows the linear range &lt;code&gt;(-linthresh, linthresh)&lt;/code&gt; to be stretched relative to the logarithmic range. Its value is the number of decades to use for each half of the linear range. For example, when &lt;em&gt;linscale&lt;/em&gt; == 1.0 (the default), the space used for the positive and negative halves of the linear range will be equal to one decade in the logarithmic range.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c83eceebd829a96d4ea36c3f8ee259fc2334f623" translate="yes" xml:space="preserve">
          <source>This also may improve plotting speed, since PatchCollection will draw faster than a large number of patches.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f6d84fa2210241f225105d47b1fb646d37d7f0d" translate="yes" xml:space="preserve">
          <source>This argument cannot be passed as keyword.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f430394e939bcf9d6daa4b549d53d378725f6c74" translate="yes" xml:space="preserve">
          <source>This argument is ignored if &lt;em&gt;X&lt;/em&gt; and &lt;em&gt;Y&lt;/em&gt; are specified in the call to contour.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e20b1c9c5a7abe9039019a168b9056570ef59217" translate="yes" xml:space="preserve">
          <source>This assumes a mapping \(f : [0, 1] \rightarrow [0, 1]\). The returned data is an array of N values \(y = f(x)\) where x is sampled from [0, 1].</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d43016cb16602ed4f8ccd9b7e5c22bcdc03e633f" translate="yes" xml:space="preserve">
          <source>This assumes that &lt;code&gt;axs&lt;/code&gt; are from the same &lt;a href=&quot;matplotlib.gridspec.gridspec#matplotlib.gridspec.GridSpec&quot;&gt;&lt;code&gt;GridSpec&lt;/code&gt;&lt;/a&gt;, so that their &lt;a href=&quot;matplotlib.gridspec.subplotspec#matplotlib.gridspec.SubplotSpec&quot;&gt;&lt;code&gt;SubplotSpec&lt;/code&gt;&lt;/a&gt; positions correspond to figure positions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6d7f7cf923ac54e22abcf29dbc9920b8125cabc" translate="yes" xml:space="preserve">
          <source>This attribute cannot be assigned to; however, the &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; lists can be modified in place as needed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98b12df2c7ae9b92af6030eecdd100009b84d776" translate="yes" xml:space="preserve">
          <source>This backend depends on cairocffi or pycairo.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5ed120bdf2dcb767f6a190e822a06bc6dbb56cf" translate="yes" xml:space="preserve">
          <source>This bounding box does not include the spines, ticks, ticklables, or other labels. For a bounding box including these elements use &lt;a href=&quot;matplotlib.axes.axes.get_tightbbox#matplotlib.axes.Axes.get_tightbbox&quot;&gt;&lt;code&gt;get_tightbbox&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be09ddf1704fc73461105af494cacdf695fc3b56" translate="yes" xml:space="preserve">
          <source>This can be one of the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8fcabbd38a52cbcd5a244beadbbb69000571d91c" translate="yes" xml:space="preserve">
          <source>This can be used for crude animation. For more complex animation, see &lt;a href=&quot;../animation_api#module-matplotlib.animation&quot;&gt;&lt;code&gt;matplotlib.animation&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8989041803f9a92cd46ca0bb81249ac9d067eaa" translate="yes" xml:space="preserve">
          <source>This can be used to rotate the axes programmatically.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd00ac4457bc71123ee27692531b7be4e78be308" translate="yes" xml:space="preserve">
          <source>This can happen in different circumstances</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4148555086a342439b96d8d67aae9a9bd827698b" translate="yes" xml:space="preserve">
          <source>This can lead to possibly surprising behavior when, for example, the start date occurs at the end of the month:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa443ad2505c6e21a4c3afa481a05d37121ff082" translate="yes" xml:space="preserve">
          <source>This changes the default colormap as well as the colormap of the current image if there is one. See &lt;code&gt;help(colormaps)&lt;/code&gt; for more information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7b1649da65c38e8f75419ca7efe1684f69e8508" translate="yes" xml:space="preserve">
          <source>This class attempts to figure out the best format to use for the date, and to make it as compact as possible, but still be complete. This is most useful when used with the &lt;a href=&quot;#matplotlib.dates.AutoDateLocator&quot;&gt;&lt;code&gt;AutoDateLocator&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="929f15c31c475b739027573e44e53ca0826d2c66" translate="yes" xml:space="preserve">
          <source>This class attempts to figure out the best format to use. This is most useful when used with the &lt;a href=&quot;#matplotlib.dates.AutoDateLocator&quot;&gt;&lt;code&gt;AutoDateLocator&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e77301f5f29c99be9af8398aaf0cf9cdb300822" translate="yes" xml:space="preserve">
          <source>This class calculates the axes position.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53acfa6ae0d0d564554e5c4cc4adc4b7ef803191" translate="yes" xml:space="preserve">
          <source>This class calculates the axes position. It divides the given rectangular area into several sub-rectangles. You initialize the divider by setting the horizontal and vertical lists of sizes (&lt;code&gt;mpl_toolkits.axes_grid.axes_size&lt;/code&gt;) that the division will be based on. You then use the new_locator method to create a callable object that can be used as the axes_locator of the axes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57841161dcedc21224d9658af70666ab7d07e1ad" translate="yes" xml:space="preserve">
          <source>This class can be used as a context manager to close the underlying file upon exit. Pages can be read via iteration. Here is an overly simple way to extract text without trying to detect whitespace:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ac63686d401448e4d3f85a9415ba2fb0b40a46c" translate="yes" xml:space="preserve">
          <source>This class connects a &lt;a href=&quot;#matplotlib.colorbar.ColorbarBase&quot;&gt;&lt;code&gt;ColorbarBase&lt;/code&gt;&lt;/a&gt; to a &lt;a href=&quot;cm_api#matplotlib.cm.ScalarMappable&quot;&gt;&lt;code&gt;ScalarMappable&lt;/code&gt;&lt;/a&gt; such as a &lt;a href=&quot;image_api#matplotlib.image.AxesImage&quot;&gt;&lt;code&gt;AxesImage&lt;/code&gt;&lt;/a&gt; generated via &lt;a href=&quot;_as_gen/matplotlib.axes.axes.imshow#matplotlib.axes.Axes.imshow&quot;&gt;&lt;code&gt;imshow()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c3e9f5045a53698badea4151b5dfdfd1cb3aaec" translate="yes" xml:space="preserve">
          <source>This class generates tests for a nose-based testing framework. Ideally, this class would not be public, and the only publicly visible API would be the &lt;a href=&quot;#matplotlib.testing.decorators.image_comparison&quot;&gt;&lt;code&gt;image_comparison()&lt;/code&gt;&lt;/a&gt; decorator. Unfortunately, there are existing downstream users of this class (e.g., pytest-mpl) so it cannot yet be removed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41c975ae1320b7b1f813fbdfa571da8c4024e9ad" translate="yes" xml:space="preserve">
          <source>This class holds a font's texname and size, supports comparison, and knows the widths of glyphs in the same units as the AFM file. There are also internal attributes (for use by dviread.py) that are &lt;em&gt;not&lt;/em&gt; used for comparison.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83a8f4e835a3a8dc0a965fe80e7938729a3fbaa5" translate="yes" xml:space="preserve">
          <source>This class is not typically used directly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ed86544d49d9c833360ec767d9e56f22028edc1" translate="yes" xml:space="preserve">
          <source>This class is set up to provide for writing movie frame data to a pipe. saving() is provided as a context manager to facilitate this process as:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98f821a882959fa4ece60e63a4935d4ab3ff1890" translate="yes" xml:space="preserve">
          <source>This class is subclassed by other Locators and is not meant to be used on its own.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9076b2c83df9c1a7ea724ec7d4e0c192ec5f2113" translate="yes" xml:space="preserve">
          <source>This class provides a lightweight way to group arbitrary objects together into disjoint sets when a full-blown graph data structure would be overkill.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f7fb7cb7446de7d202896de514f0ddd84f18358" translate="yes" xml:space="preserve">
          <source>This class provides the read-only interface. For a mutable 2D affine transformation, use &lt;a href=&quot;#matplotlib.transforms.Affine2D&quot;&gt;&lt;code&gt;Affine2D&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db35d74d908ff3cb8ef34d0d5e27e53646112a35" translate="yes" xml:space="preserve">
          <source>This class will &quot;fallback&quot; on the Bakoma fonts when a required symbol can not be found in the font.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09d1c46d7e550348f032c7190749a7173ecfafb8" translate="yes" xml:space="preserve">
          <source>This class will also accept a &lt;a href=&quot;https://www.freedesktop.org/wiki/Software/fontconfig/&quot;&gt;fontconfig&lt;/a&gt;&lt;a href=&quot;https://www.freedesktop.org/software/fontconfig/fontconfig-user.html&quot;&gt;pattern&lt;/a&gt;, if it is the only argument provided. This support does not require fontconfig to be installed. We are merely borrowing its pattern syntax for use here.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8a13aefaa8652b71f54d0a62b480913fd524f4a" translate="yes" xml:space="preserve">
          <source>This class will also retrieve keypresses and map them to mouse clicks: delete and backspace are like mouse button 3, enter is like mouse button 2 and all others are like mouse button 1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea34e262d0c5c8c34601b4af50dfefcbe40f6f15" translate="yes" xml:space="preserve">
          <source>This class wraps the creation of an animation using matplotlib.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d43abc932f710fc14b7e99746c4fd0cb9a597e78" translate="yes" xml:space="preserve">
          <source>This computes the normal vectors for the surface, and then passes them on to &lt;a href=&quot;#matplotlib.colors.LightSource.shade_normals&quot;&gt;&lt;code&gt;shade_normals&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3fa4a4e0ec97fb6d2d544df1c3a8b29a3e9f1529" translate="yes" xml:space="preserve">
          <source>This container will probably change in the future to allow changes to the colormap, alpha, etc. for both lines and arrows, but these changes should be backward compatible.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c581f36dc304a90757f755007f532209bbd19ad" translate="yes" xml:space="preserve">
          <source>This controls the zorder of the ticks and gridlines. For more information on the zorder see &lt;a href=&quot;https://matplotlib.org/3.1.1/gallery/misc/zorder_demo.html&quot;&gt;Zorder Demo&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8bcdc92df94481763728aaf9120950954271b442" translate="yes" xml:space="preserve">
          <source>This decorator should be preferred over &lt;a href=&quot;#matplotlib.testing.decorators.image_comparison&quot;&gt;&lt;code&gt;image_comparison&lt;/code&gt;&lt;/a&gt; when possible in order to keep the size of the test suite from ballooning.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0a8d8544cb1902ba6b36061ed364828a1b3f750" translate="yes" xml:space="preserve">
          <source>This does not manage an GUI event loop. Consequently, the figure may only be shown briefly or not shown at all if you or your environment are not managing an event loop.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91a78a40462b9e16ac518e6a8aeed72764fc8da3" translate="yes" xml:space="preserve">
          <source>This does not remove other, more deliberate, text, such as legends and annotations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a518cadc6aa4c8f5d28b89951cd309429459dd87" translate="yes" xml:space="preserve">
          <source>This does not support explicit colors. If you want to set colors directly, use &lt;em&gt;barbcolor&lt;/em&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f3185f6eca6933245a74b2a27b2fb2d523b78f3" translate="yes" xml:space="preserve">
          <source>This does not support explicit colors. If you want to set colors directly, use &lt;em&gt;color&lt;/em&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03ae2affe55d60d43c09062eaf1dcb1ffe0f13a4" translate="yes" xml:space="preserve">
          <source>This draws an arrow from &lt;code&gt;(x, y)&lt;/code&gt; to &lt;code&gt;(x+dx, y+dy)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71ffe6070c0a5f5d98e9a9f7f369cd44b5cab3e6" translate="yes" xml:space="preserve">
          <source>This enables you to easily switch between several configurations. Use &lt;code&gt;matplotlib.style.use('default')&lt;/code&gt; or &lt;a href=&quot;#matplotlib.rcdefaults&quot;&gt;&lt;code&gt;rcdefaults()&lt;/code&gt;&lt;/a&gt; to restore the default rc params after changes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a22c1162aaf0ba304cc71e2c0871526c57523bb" translate="yes" xml:space="preserve">
          <source>This enables you to easily switch between several configurations. Use &lt;code&gt;matplotlib.style.use('default')&lt;/code&gt; or &lt;a href=&quot;../matplotlib_configuration_api#matplotlib.rcdefaults&quot;&gt;&lt;code&gt;rcdefaults()&lt;/code&gt;&lt;/a&gt; to restore the default rc params after changes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="faa015fa0564341ad64d3a81d0b01e7c5fb0feeb" translate="yes" xml:space="preserve">
          <source>This example makes two inset axes, the first is in axes-relative coordinates, and the second in data-coordinates:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="005c377cde1c85815722052525e629452c7af311" translate="yes" xml:space="preserve">
          <source>This function always returns false. It is more useful to test if the axis as a whole contains the mouse rather than the set of tick marks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3108644758f85c3749a714e5fc90947d5675f8d5" translate="yes" xml:space="preserve">
          <source>This function calculates the appropriate label rotation given the linecontour coordinates in screen units, the index of the label location and the label width.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4dde18c760499960a46e691990257a70d4ae1f57" translate="yes" xml:space="preserve">
          <source>This function draws a box in &lt;em&gt;parent_axes&lt;/em&gt; at the bounding box of &lt;em&gt;inset_axes&lt;/em&gt;, and shows a connection with the inset axes by drawing lines at the corners, giving a &quot;zoomed in&quot; effect.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f199af9672964d7af7853faf6e39b6a7cd36c83" translate="yes" xml:space="preserve">
          <source>This function is currently not implemented for 3D axes. Returns &lt;em&gt;None&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7cb722c47ef0bea5073d95c83ce51cfe519e710c" translate="yes" xml:space="preserve">
          <source>This function is experimental; its behavior may be changed or extended in a future release.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4887c07fd25426ca166f0dfb914633458483c457" translate="yes" xml:space="preserve">
          <source>This function is internally used for &lt;code&gt;LinearSegmentedColormaps&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e7ce911ab77c823e265338cf120124a0218f4b6" translate="yes" xml:space="preserve">
          <source>This function is merely provided for completeness. Axes3D objects do not officially support dates for ticks, and so this may or may not work as expected.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a509b407f0e6aafa61673655afe0da320fdaa3dd" translate="yes" xml:space="preserve">
          <source>This function is primarily of use to implementers of backends that do not directly support meshes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b17868f1026012a1f07eb69675163b88aef5068" translate="yes" xml:space="preserve">
          <source>This function is primarily of use to implementers of backends that do not directly support quadmeshes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2164f737c624d4d63d3fbd1f2ac658658f0ff15b" translate="yes" xml:space="preserve">
          <source>This function is triggered internally when a property is changed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b0570953e2c2884de4738f6688f54cfce4a99d7" translate="yes" xml:space="preserve">
          <source>This function refines the encapsulated triangulation by splitting each father triangle into 4 child sub-triangles built on the edges midside nodes, recursively (level of recursion &lt;em&gt;subdiv&lt;/em&gt;). In the end, each triangle is hence divided into &lt;code&gt;4**subdiv&lt;/code&gt; child triangles. The default value for &lt;em&gt;subdiv&lt;/em&gt; is 3 resulting in 64 refined subtriangles for each triangle of the initial triangulation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7666a23252f123adf92ecbb5fd3b070801019d8" translate="yes" xml:space="preserve">
          <source>This function returns &lt;em&gt;func&lt;/em&gt;, which makes it possible to use it as a decorator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbf238d3d1d2dcdf2b2c9f61782177a3a3a6cd34" translate="yes" xml:space="preserve">
          <source>This function returns the absolute value of &lt;a href=&quot;#matplotlib.mlab.complex_spectrum&quot;&gt;&lt;code&gt;complex_spectrum&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2108bb287bdb4942b62c19dd1d0e0f9d3fc7a84" translate="yes" xml:space="preserve">
          <source>This function returns the angle value of &lt;a href=&quot;#matplotlib.mlab.complex_spectrum&quot;&gt;&lt;code&gt;complex_spectrum&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ab509905f81e85267228a2d4ee273d3e1ca0588" translate="yes" xml:space="preserve">
          <source>This function returns the phase value of &lt;a href=&quot;#matplotlib.mlab.complex_spectrum&quot;&gt;&lt;code&gt;complex_spectrum&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f6f7dd2583eb7acbe896c529fa4a08c37bff4be" translate="yes" xml:space="preserve">
          <source>This function will use the &lt;code&gt;fmt_xdata&lt;/code&gt; attribute if it is not None, else will fall back on the xaxis major formatter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4a15c066abb3417746e54777dd4f65bec0bf37d" translate="yes" xml:space="preserve">
          <source>This function will use the &lt;code&gt;fmt_ydata&lt;/code&gt; attribute if it is not None, else will fall back on the yaxis major formatter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44ebffd4722394c9f5d113045791ad86eeea516a" translate="yes" xml:space="preserve">
          <source>This function works by a number of rcParams, so it will probably override others you have set before.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a19f487c2118e4ab7359bc5e4ab70c46e69720bf" translate="yes" xml:space="preserve">
          <source>This has no effect for non-GUI (e.g., PS) backends.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97b339a3ed4798f8ff1b016c2e1a0176bf3eeafc" translate="yes" xml:space="preserve">
          <source>This has no pdfRepr method. Instead, call begin(), then output the contents of the stream by calling write(), and finally call end().</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33800c3c41b7f5764e0f9fc0806c802569fea49e" translate="yes" xml:space="preserve">
          <source>This image will be the target of colormap functions like &lt;a href=&quot;matplotlib.pyplot.viridis#matplotlib.pyplot.viridis&quot;&gt;&lt;code&gt;viridis&lt;/code&gt;&lt;/a&gt;, and other functions such as &lt;a href=&quot;matplotlib.pyplot.clim#matplotlib.pyplot.clim&quot;&gt;&lt;code&gt;clim&lt;/code&gt;&lt;/a&gt;. The current image is an attribute of the current axes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae14416ddf321e49aa119bee5d443cca6c6a0e02" translate="yes" xml:space="preserve">
          <source>This implementation covers only the bare minimum needed by the Dvi class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31df09e6980cbd4ab2f604006a2d1bdf35795fc1" translate="yes" xml:space="preserve">
          <source>This is &lt;em&gt;True&lt;/em&gt; after &lt;a href=&quot;#matplotlib.collections.AsteriskPolygonCollection.set_transform&quot;&gt;&lt;code&gt;set_transform&lt;/code&gt;&lt;/a&gt; has been called.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7649075a42a81831b1f296ffd4cdd56addcf4b5f" translate="yes" xml:space="preserve">
          <source>This is &lt;em&gt;True&lt;/em&gt; after &lt;a href=&quot;#matplotlib.collections.BrokenBarHCollection.set_transform&quot;&gt;&lt;code&gt;set_transform&lt;/code&gt;&lt;/a&gt; has been called.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3da107f75635582b4d46331753c0f44a363709a" translate="yes" xml:space="preserve">
          <source>This is &lt;em&gt;True&lt;/em&gt; after &lt;a href=&quot;#matplotlib.collections.CircleCollection.set_transform&quot;&gt;&lt;code&gt;set_transform&lt;/code&gt;&lt;/a&gt; has been called.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d942375542bcbccb920733f2d1d9cf074ff31693" translate="yes" xml:space="preserve">
          <source>This is &lt;em&gt;True&lt;/em&gt; after &lt;a href=&quot;#matplotlib.collections.Collection.set_transform&quot;&gt;&lt;code&gt;set_transform&lt;/code&gt;&lt;/a&gt; has been called.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b53533508630e21c72f7368d72e6bb92c0d96a96" translate="yes" xml:space="preserve">
          <source>This is &lt;em&gt;True&lt;/em&gt; after &lt;a href=&quot;#matplotlib.collections.EllipseCollection.set_transform&quot;&gt;&lt;code&gt;set_transform&lt;/code&gt;&lt;/a&gt; has been called.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="808f94661464199dd53222132fc1d8c3b08e77d5" translate="yes" xml:space="preserve">
          <source>This is &lt;em&gt;True&lt;/em&gt; after &lt;a href=&quot;#matplotlib.collections.EventCollection.set_transform&quot;&gt;&lt;code&gt;set_transform&lt;/code&gt;&lt;/a&gt; has been called.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5416cb1291227c20b28cba0cd090a0abc29ccfcf" translate="yes" xml:space="preserve">
          <source>This is &lt;em&gt;True&lt;/em&gt; after &lt;a href=&quot;#matplotlib.collections.LineCollection.set_transform&quot;&gt;&lt;code&gt;set_transform&lt;/code&gt;&lt;/a&gt; has been called.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75036828a07fece81706044c16db6e2391860d9d" translate="yes" xml:space="preserve">
          <source>This is &lt;em&gt;True&lt;/em&gt; after &lt;a href=&quot;#matplotlib.collections.PatchCollection.set_transform&quot;&gt;&lt;code&gt;set_transform&lt;/code&gt;&lt;/a&gt; has been called.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca1fab90d4810490664d5708fddd4cd80d5a0367" translate="yes" xml:space="preserve">
          <source>This is &lt;em&gt;True&lt;/em&gt; after &lt;a href=&quot;#matplotlib.collections.PathCollection.set_transform&quot;&gt;&lt;code&gt;set_transform&lt;/code&gt;&lt;/a&gt; has been called.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2709b4409c8e6a59e54bdc1e8e2da72572a73925" translate="yes" xml:space="preserve">
          <source>This is &lt;em&gt;True&lt;/em&gt; after &lt;a href=&quot;#matplotlib.collections.PolyCollection.set_transform&quot;&gt;&lt;code&gt;set_transform&lt;/code&gt;&lt;/a&gt; has been called.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="331240761b703a643dc775a8c9217c5833380d27" translate="yes" xml:space="preserve">
          <source>This is &lt;em&gt;True&lt;/em&gt; after &lt;a href=&quot;#matplotlib.collections.QuadMesh.set_transform&quot;&gt;&lt;code&gt;set_transform&lt;/code&gt;&lt;/a&gt; has been called.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="757653bc1597c68bd313119ae3104a7828f720cd" translate="yes" xml:space="preserve">
          <source>This is &lt;em&gt;True&lt;/em&gt; after &lt;a href=&quot;#matplotlib.collections.RegularPolyCollection.set_transform&quot;&gt;&lt;code&gt;set_transform&lt;/code&gt;&lt;/a&gt; has been called.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65928074a9e67cbc2d3dfb778b41f0cb0c22c313" translate="yes" xml:space="preserve">
          <source>This is &lt;em&gt;True&lt;/em&gt; after &lt;a href=&quot;#matplotlib.collections.StarPolygonCollection.set_transform&quot;&gt;&lt;code&gt;set_transform&lt;/code&gt;&lt;/a&gt; has been called.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e96eb7bcdbddc2a235b829f2d019bc3629d136b" translate="yes" xml:space="preserve">
          <source>This is &lt;em&gt;True&lt;/em&gt; after &lt;a href=&quot;#matplotlib.collections.TriMesh.set_transform&quot;&gt;&lt;code&gt;set_transform&lt;/code&gt;&lt;/a&gt; has been called.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb64cf2681ccbb5f2b2c56f74fdc13a9052dbe86" translate="yes" xml:space="preserve">
          <source>This is &lt;em&gt;True&lt;/em&gt; after &lt;a href=&quot;matplotlib.artist.artist.set_transform#matplotlib.artist.Artist.set_transform&quot;&gt;&lt;code&gt;set_transform&lt;/code&gt;&lt;/a&gt; has been called.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61ac8a274ca520ec240869c9aa9a90aa84428a8e" translate="yes" xml:space="preserve">
          <source>This is &lt;em&gt;True&lt;/em&gt; after &lt;a href=&quot;matplotlib.axes.axes.set_transform#matplotlib.axes.Axes.set_transform&quot;&gt;&lt;code&gt;set_transform&lt;/code&gt;&lt;/a&gt; has been called.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f76c6359457ff42afe5f757f77bd13dd9bf7bc7d" translate="yes" xml:space="preserve">
          <source>This is &lt;em&gt;True&lt;/em&gt; after &lt;a href=&quot;matplotlib.axis.axis.set_transform#matplotlib.axis.Axis.set_transform&quot;&gt;&lt;code&gt;set_transform&lt;/code&gt;&lt;/a&gt; has been called.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eea9f5564a31a4d190396eec4977a7cb80a120fb" translate="yes" xml:space="preserve">
          <source>This is &lt;em&gt;True&lt;/em&gt; after &lt;a href=&quot;matplotlib.axis.tick.set_transform#matplotlib.axis.Tick.set_transform&quot;&gt;&lt;code&gt;set_transform&lt;/code&gt;&lt;/a&gt; has been called.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="252bda58f4419c8d3c10f4df8c9de95f82909702" translate="yes" xml:space="preserve">
          <source>This is &lt;em&gt;True&lt;/em&gt; after &lt;a href=&quot;matplotlib.axis.xaxis.set_transform#matplotlib.axis.XAxis.set_transform&quot;&gt;&lt;code&gt;set_transform&lt;/code&gt;&lt;/a&gt; has been called.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90611a21e9517844f5650e2740678dc753b935da" translate="yes" xml:space="preserve">
          <source>This is &lt;em&gt;True&lt;/em&gt; after &lt;a href=&quot;matplotlib.axis.xtick.set_transform#matplotlib.axis.XTick.set_transform&quot;&gt;&lt;code&gt;set_transform&lt;/code&gt;&lt;/a&gt; has been called.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="651c7d09247d0bc3a9eb75ba09cde8210c664c4c" translate="yes" xml:space="preserve">
          <source>This is &lt;em&gt;True&lt;/em&gt; after &lt;a href=&quot;matplotlib.axis.yaxis.set_transform#matplotlib.axis.YAxis.set_transform&quot;&gt;&lt;code&gt;set_transform&lt;/code&gt;&lt;/a&gt; has been called.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ada1f91057929a8829832741983697483b04d7d0" translate="yes" xml:space="preserve">
          <source>This is &lt;em&gt;True&lt;/em&gt; after &lt;a href=&quot;matplotlib.axis.ytick.set_transform#matplotlib.axis.YTick.set_transform&quot;&gt;&lt;code&gt;set_transform&lt;/code&gt;&lt;/a&gt; has been called.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9156eea7f7d9d7a0dce237389714d3e86ee09673" translate="yes" xml:space="preserve">
          <source>This is a base class for MovieWriter subclasses that write a movie frame data to a pipe. You cannot instantiate this class directly. See examples for how to use its subclasses.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5467c7787e7fea2cedd5d8e893e84b68aecddf67" translate="yes" xml:space="preserve">
          <source>This is a base class for the &lt;a href=&quot;#matplotlib.colorbar.Colorbar&quot;&gt;&lt;code&gt;Colorbar&lt;/code&gt;&lt;/a&gt; class, which is the basis for the &lt;a href=&quot;_as_gen/matplotlib.pyplot.colorbar#matplotlib.pyplot.colorbar&quot;&gt;&lt;code&gt;colorbar()&lt;/code&gt;&lt;/a&gt; function and the &lt;a href=&quot;_as_gen/matplotlib.figure.figure#matplotlib.figure.Figure.colorbar&quot;&gt;&lt;code&gt;colorbar()&lt;/code&gt;&lt;/a&gt; method, which are the usual ways of creating a colorbar.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87a1d811c7530769b618a731760e103c5b850153" translate="yes" xml:space="preserve">
          <source>This is a base class for the &lt;a href=&quot;#mpl_toolkits.axes_grid1.colorbar.Colorbar&quot;&gt;&lt;code&gt;Colorbar&lt;/code&gt;&lt;/a&gt; class, which is the basis for the &lt;a href=&quot;matplotlib.pyplot.colorbar#matplotlib.pyplot.colorbar&quot;&gt;&lt;code&gt;colorbar()&lt;/code&gt;&lt;/a&gt; method and pyplot function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0d03597c5147d2f69fb1c8bd6828680260278f3" translate="yes" xml:space="preserve">
          <source>This is a convenience function for instantiating a &lt;a href=&quot;../collections_api#matplotlib.collections.BrokenBarHCollection&quot;&gt;&lt;code&gt;BrokenBarHCollection&lt;/code&gt;&lt;/a&gt;, adding it to the axes and autoscaling the view.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f4e648e030aa05181292547e8eaf7d12186469c" translate="yes" xml:space="preserve">
          <source>This is a debug function to draw a rectangle around the bounding box returned by &lt;a href=&quot;_as_gen/matplotlib.artist.artist.get_window_extent#matplotlib.artist.Artist.get_window_extent&quot;&gt;&lt;code&gt;get_window_extent()&lt;/code&gt;&lt;/a&gt; of an artist, to test whether the artist is returning the correct bbox.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3aaef6d7d61e866f1ff59146449ff847b461d6a7" translate="yes" xml:space="preserve">
          <source>This is a debug function to draw a rectangle around the bounding box returned by &lt;a href=&quot;matplotlib.artist.artist.get_window_extent#matplotlib.artist.Artist.get_window_extent&quot;&gt;&lt;code&gt;get_window_extent()&lt;/code&gt;&lt;/a&gt; of an artist, to test whether the artist is returning the correct bbox.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6abdf2644187c8325f647e80f10d3fca37d19828" translate="yes" xml:space="preserve">
          <source>This is a mixin class to support scalar data to RGBA mapping. The ScalarMappable makes use of data normalization before returning RGBA colors from the given colormap.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b646f589120578c5dfb5cb7828bfb7179650ec7e" translate="yes" xml:space="preserve">
          <source>This is a python interface to Adobe Font Metrics Files. Although a number of other python implementations exist, and may be more complete than this, it was decided not to go with them because they were either:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ad350ddf27b295d41b09b102500e4ffbf145862" translate="yes" xml:space="preserve">
          <source>This is a synonym for the &lt;a href=&quot;../collections_api#matplotlib.collections.PolyCollection&quot;&gt;&lt;code&gt;PolyCollection&lt;/code&gt;&lt;/a&gt;&lt;em&gt;facecolor&lt;/em&gt; parameter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="054e485b1d188b63d7bc83680bab7b20f42f03d9" translate="yes" xml:space="preserve">
          <source>This is an arrow that is defined in display space and has a tip at &lt;em&gt;x1&lt;/em&gt;, &lt;em&gt;y1&lt;/em&gt; and a base at &lt;em&gt;x2&lt;/em&gt;, &lt;em&gt;y2&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0125477afbe8b5fa382c19d92f0b56fa0a3b584b" translate="yes" xml:space="preserve">
          <source>This is called automatically when each Axes is drawn. You may need to call it yourself if you need to update the Axes position and/or view limits before the Figure is drawn.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b7fd675f32cdee5c942110a2a736a098dd2dc90" translate="yes" xml:space="preserve">
          <source>This is created by specifying the normalized coordinates in the axes, instead of the figure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fec1aa64756fbbe63caec5a208a747424da27988" translate="yes" xml:space="preserve">
          <source>This is done by querying the docstring of the setter for a line that begins with &quot;ACCEPTS:&quot; or &quot;.. ACCEPTS:&quot;, and then by looking for a numpydoc-style documentation for the setter's first argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8591e74dfd0baafc2de463921b732a15261da88e" translate="yes" xml:space="preserve">
          <source>This is intended as a diagnostic tool, and not for general use.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2806592fc90faac6bf84f213e470fd146037524a" translate="yes" xml:space="preserve">
          <source>This is just a convenience function wrapping &lt;a href=&quot;matplotlib.axes.axes.imshow#matplotlib.axes.Axes.imshow&quot;&gt;&lt;code&gt;imshow&lt;/code&gt;&lt;/a&gt; to set useful defaults for a displaying a matrix. In particular:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1f0b35fd7524f5790626ff4593621544a381973" translate="yes" xml:space="preserve">
          <source>This is just a thin wrapper around &lt;a href=&quot;matplotlib.axes.axes.plot#matplotlib.axes.Axes.plot&quot;&gt;&lt;code&gt;plot&lt;/code&gt;&lt;/a&gt; which additionally changes both the x-axis and the y-axis to log scaling. All of the concepts and parameters of plot can be used here as well.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="030cdd25604c071f5e612d25df2e829bed41cac6" translate="yes" xml:space="preserve">
          <source>This is just a thin wrapper around &lt;a href=&quot;matplotlib.axes.axes.plot#matplotlib.axes.Axes.plot&quot;&gt;&lt;code&gt;plot&lt;/code&gt;&lt;/a&gt; which additionally changes the x-axis to log scaling. All of the concepts and parameters of plot can be used here as well.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2e4fd9b0d854f89f0419b2d223a00dfea24bb65" translate="yes" xml:space="preserve">
          <source>This is just a thin wrapper around &lt;a href=&quot;matplotlib.axes.axes.plot#matplotlib.axes.Axes.plot&quot;&gt;&lt;code&gt;plot&lt;/code&gt;&lt;/a&gt; which additionally changes the y-axis to log scaling. All of the concepts and parameters of plot can be used here as well.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6693de26ddeeb5d1e49df50787b213db8dad70b1" translate="yes" xml:space="preserve">
          <source>This is just a thin wrapper around &lt;a href=&quot;matplotlib.axes.axes.plot#matplotlib.axes.Axes.plot&quot;&gt;&lt;code&gt;plot&lt;/code&gt;&lt;/a&gt; which changes some formatting options. Most of the concepts and parameters of plot can be used here as well.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45a9296a7c7a46ed07dd2bfa68ab6dae7180d67d" translate="yes" xml:space="preserve">
          <source>This is just a thin wrapper around &lt;a href=&quot;matplotlib.pyplot.plot#matplotlib.pyplot.plot&quot;&gt;&lt;code&gt;plot&lt;/code&gt;&lt;/a&gt; which additionally changes both the x-axis and the y-axis to log scaling. All of the concepts and parameters of plot can be used here as well.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69852ed628c5dcac51665eb062b6962fe4a1be80" translate="yes" xml:space="preserve">
          <source>This is just a thin wrapper around &lt;a href=&quot;matplotlib.pyplot.plot#matplotlib.pyplot.plot&quot;&gt;&lt;code&gt;plot&lt;/code&gt;&lt;/a&gt; which additionally changes the x-axis to log scaling. All of the concepts and parameters of plot can be used here as well.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0813865d49d007a9322d6326fc43c637a38160cf" translate="yes" xml:space="preserve">
          <source>This is just a thin wrapper around &lt;a href=&quot;matplotlib.pyplot.plot#matplotlib.pyplot.plot&quot;&gt;&lt;code&gt;plot&lt;/code&gt;&lt;/a&gt; which additionally changes the y-axis to log scaling. All of the concepts and parameters of plot can be used here as well.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b48cdf62b3f1fed9cf93b7bf30e10c521ba4a208" translate="yes" xml:space="preserve">
          <source>This is just a thin wrapper around &lt;a href=&quot;matplotlib.pyplot.plot#matplotlib.pyplot.plot&quot;&gt;&lt;code&gt;plot&lt;/code&gt;&lt;/a&gt; which changes some formatting options. Most of the concepts and parameters of plot can be used here as well.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b14e493aabdd90212ab08d3a828a3508cadf618" translate="yes" xml:space="preserve">
          <source>This is necessary because the callback registry maintains only weak-refs to the functions, which are member functions of the widget. If there are no references to the widget object it may be garbage collected which will disconnect the callbacks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f8780a9da8a6eae57742de12b3a8c482d8d3ad0" translate="yes" xml:space="preserve">
          <source>This is not guaranteed to be greater than &lt;a href=&quot;#matplotlib.transforms.Bbox.x0&quot;&gt;&lt;code&gt;x0&lt;/code&gt;&lt;/a&gt; (for that, use &lt;code&gt;xmax&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="114ea838576da4a2a387e337a1bcad1b3ae4bda5" translate="yes" xml:space="preserve">
          <source>This is not guaranteed to be greater than &lt;a href=&quot;#matplotlib.transforms.Bbox.y0&quot;&gt;&lt;code&gt;y0&lt;/code&gt;&lt;/a&gt; (for that, use &lt;code&gt;ymax&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa9a1cb5a3092f8d47ef050a717e9d59d0ee657a" translate="yes" xml:space="preserve">
          <source>This is not guaranteed to be greater than &lt;a href=&quot;#matplotlib.transforms.BboxBase.x0&quot;&gt;&lt;code&gt;x0&lt;/code&gt;&lt;/a&gt; (for that, use &lt;a href=&quot;#matplotlib.transforms.BboxBase.xmax&quot;&gt;&lt;code&gt;xmax&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3683c47be0d049267ab688a5a4a2301216a057a0" translate="yes" xml:space="preserve">
          <source>This is not guaranteed to be greater than &lt;a href=&quot;#matplotlib.transforms.BboxBase.y0&quot;&gt;&lt;code&gt;y0&lt;/code&gt;&lt;/a&gt; (for that, use &lt;a href=&quot;#matplotlib.transforms.BboxBase.ymax&quot;&gt;&lt;code&gt;ymax&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eba049e7d2a638d1d0c7491573c465f154b5123f" translate="yes" xml:space="preserve">
          <source>This is not guaranteed to be less than &lt;a href=&quot;#matplotlib.transforms.Bbox.x1&quot;&gt;&lt;code&gt;x1&lt;/code&gt;&lt;/a&gt; (for that, use &lt;code&gt;xmin&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2244268cd0630a93e5c6b610509006ce466b9d46" translate="yes" xml:space="preserve">
          <source>This is not guaranteed to be less than &lt;a href=&quot;#matplotlib.transforms.Bbox.y1&quot;&gt;&lt;code&gt;y1&lt;/code&gt;&lt;/a&gt; (for that, use &lt;code&gt;ymin&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad7743309894b6c0ede6cda903ab41da1bbb9622" translate="yes" xml:space="preserve">
          <source>This is not guaranteed to be less than &lt;a href=&quot;#matplotlib.transforms.BboxBase.x1&quot;&gt;&lt;code&gt;x1&lt;/code&gt;&lt;/a&gt; (for that, use &lt;a href=&quot;#matplotlib.transforms.BboxBase.xmin&quot;&gt;&lt;code&gt;xmin&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85e06d1cca515aad0cb87cea941d663289e5498a" translate="yes" xml:space="preserve">
          <source>This is not guaranteed to be less than &lt;a href=&quot;#matplotlib.transforms.BboxBase.y1&quot;&gt;&lt;code&gt;y1&lt;/code&gt;&lt;/a&gt; (for that, use &lt;a href=&quot;#matplotlib.transforms.BboxBase.ymin&quot;&gt;&lt;code&gt;ymin&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d940e88ea9d49097502ed4b3d34cb4760703da3" translate="yes" xml:space="preserve">
          <source>This is not guaranteed to be sorted from bottom to top.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66102c06399cb91b4a68565566f7c23cf7399e59" translate="yes" xml:space="preserve">
          <source>This is not guaranteed to be sorted from left to right.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a5db7fa551c15134fd46e8b872465309620b26a" translate="yes" xml:space="preserve">
          <source>This is not guaranteed to be the bottom-left corner (for that, use &lt;a href=&quot;#matplotlib.transforms.BboxBase.min&quot;&gt;&lt;code&gt;min&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbe4c9758eb461f4ff01a76d21a00be7e1765d48" translate="yes" xml:space="preserve">
          <source>This is not guaranteed to be the bottom-left corner (for that, use &lt;code&gt;min&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d3bc4be5a136db79dc0334580890d767de4be5e" translate="yes" xml:space="preserve">
          <source>This is not guaranteed to be the top-right corner (for that, use &lt;a href=&quot;#matplotlib.transforms.BboxBase.max&quot;&gt;&lt;code&gt;max&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="986d65dbdd5f3e1fafad613803ba1573cf8a6ea3" translate="yes" xml:space="preserve">
          <source>This is not guaranteed to be the top-right corner (for that, use &lt;code&gt;max&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f1811a3563c113b1e8848e8def17f01e0fb6276" translate="yes" xml:space="preserve">
          <source>This is of course leaving out many details (such as updating the background when the figure is resized or fully re-drawn). However, this hopefully minimalist example gives a sense of how &lt;code&gt;init_func&lt;/code&gt; and &lt;code&gt;func&lt;/code&gt; are used inside of &lt;a href=&quot;_as_gen/matplotlib.animation.funcanimation#matplotlib.animation.FuncAnimation&quot;&gt;&lt;code&gt;FuncAnimation&lt;/code&gt;&lt;/a&gt; and the theory of how 'blitting' works.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee49bef46b4bf81367b6b777f450b091701d635d" translate="yes" xml:space="preserve">
          <source>This is probably the most commonly reported issue with mplot3d. The problem is that -- from some viewing angles -- a 3D object would appear in front of another object, even though it is physically behind it. This can result in plots that do not look &quot;physically correct.&quot;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="067d451859695f633aacb50c0e6a17b0c49789df" translate="yes" xml:space="preserve">
          <source>This is the base class of all bounding boxes, and provides read-only access to its data. A mutable bounding box is provided by the &lt;a href=&quot;#matplotlib.transforms.Bbox&quot;&gt;&lt;code&gt;Bbox&lt;/code&gt;&lt;/a&gt; class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db66db40139f0ed6b5087145063e55964691f8f9" translate="yes" xml:space="preserve">
          <source>This is the lowlevel version. See &lt;a href=&quot;matplotlib.axes.axes.inset_axes#matplotlib.axes.Axes.inset_axes&quot;&gt;&lt;code&gt;axes.Axes.inset_axes&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22c8dfee1e330855af86551372c1b51824cc12c4" translate="yes" xml:space="preserve">
          <source>This is the most basic &lt;a href=&quot;#matplotlib.collections.Collection&quot;&gt;&lt;code&gt;Collection&lt;/code&gt;&lt;/a&gt; subclass. A &lt;a href=&quot;#matplotlib.collections.PathCollection&quot;&gt;&lt;code&gt;PathCollection&lt;/code&gt;&lt;/a&gt; is e.g. created by a &lt;a href=&quot;_as_gen/matplotlib.axes.axes.scatter#matplotlib.axes.Axes.scatter&quot;&gt;&lt;code&gt;scatter()&lt;/code&gt;&lt;/a&gt; plot.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21fc5700492f5c74bca0f46e1ca3ccfc9d6b0c2e" translate="yes" xml:space="preserve">
          <source>This is the most general, but the slowest to render. It may produce faster and more compact output using ps, pdf, and svg backends, however.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9ad4ee8d67be64462efd3589f8de9567fcfaf83" translate="yes" xml:space="preserve">
          <source>This is the pyparsing-based parser for math expressions. It actually parses full strings &lt;em&gt;containing&lt;/em&gt; math expressions, in that raw text may also appear outside of pairs of &lt;code&gt;$&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ea614c84406659e1425524b64e6d5b9ab1d6bfb" translate="yes" xml:space="preserve">
          <source>This is used by log scales to determine a minimum value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55ad078e05e528c0135d9d45628e2abfbba75fde" translate="yes" xml:space="preserve">
          <source>This is used for backend switching, e.g., to instantiate a FigureCanvasPS from a FigureCanvasGTK. Note, deep copying is not done, so any changes to one of the instances (e.g., setting figure size or line props), will be reflected in the other</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd7d34e527af1e72e162104cac5b7c62a0ba0dcc" translate="yes" xml:space="preserve">
          <source>This is used to update a figure that has been altered, but not automatically re-drawn. If interactive mode is on (&lt;a href=&quot;matplotlib.pyplot.ion#matplotlib.pyplot.ion&quot;&gt;&lt;code&gt;ion()&lt;/code&gt;&lt;/a&gt;), this should be only rarely needed, but there may be ways to modify the state of a figure without marking it as &lt;code&gt;stale&lt;/code&gt;. Please report these cases as bugs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad568c67d14f7d6a4998cc95fbfb8fd0a74a017b" translate="yes" xml:space="preserve">
          <source>This is useful for determining if a spine is the edge of an old style MPL plot. If so, this function will return True.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="869f3b4a0d681ad53c617f521f194c30e5c65044" translate="yes" xml:space="preserve">
          <source>This is useful if a node of the transform tree must be replaced at run time with a transform of a different type. This class allows that replacement to correctly trigger invalidation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f3901026dc36a40ea325d5e6a6afdc66a5aad2c" translate="yes" xml:space="preserve">
          <source>This keyword is not active if &lt;em&gt;X&lt;/em&gt; and &lt;em&gt;Y&lt;/em&gt; are specified in the call to contour.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6dca52da695457a0970ec84e1ad8b57a997ce1bc" translate="yes" xml:space="preserve">
          <source>This makes a new class that inherits from &lt;a href=&quot;_as_gen/matplotlib.axes.subplotbase#matplotlib.axes.SubplotBase&quot;&gt;&lt;code&gt;SubplotBase&lt;/code&gt;&lt;/a&gt; and the given axes_class (which is assumed to be a subclass of &lt;a href=&quot;#matplotlib.axes.Axes&quot;&gt;&lt;code&gt;axes.Axes&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4fe2e38da1dc257db044641394bbde72d0d5b2b" translate="yes" xml:space="preserve">
          <source>This makes a new class that inherits from &lt;a href=&quot;matplotlib.axes.subplotbase#matplotlib.axes.SubplotBase&quot;&gt;&lt;code&gt;SubplotBase&lt;/code&gt;&lt;/a&gt; and the given axes_class (which is assumed to be a subclass of &lt;a href=&quot;../axes_api#matplotlib.axes.Axes&quot;&gt;&lt;code&gt;axes.Axes&lt;/code&gt;&lt;/a&gt;). This is perhaps a little bit roundabout to make a new class on the fly like this, but it means that a new Subplot class does not have to be created for every type of Axes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d70e21df3c44175d4d874e43c8ce31506c43fd4c" translate="yes" xml:space="preserve">
          <source>This makes it easier to assign a color map to a heterogeneous collection of patches.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80bda4ef5e957c81530343470fff1b0f2997e8db" translate="yes" xml:space="preserve">
          <source>This maps data value -4000 to 0., 0 to 0.5, and +10000 to 1.0; data between is linearly interpolated:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5be9ec777484625b6ba31c4c0a4b492d4a950f5" translate="yes" xml:space="preserve">
          <source>This may be most useful when indexing directly into a colormap, but it can also be used to generate special colormaps for ordinary mapping.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="133250703e6a99b37e63a67aca8b4839a166c46a" translate="yes" xml:space="preserve">
          <source>This method (or a version of it) should be called at the beginning of any event callback.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6270c1327fdc011962f7c25b39e47acb4904b364" translate="yes" xml:space="preserve">
          <source>This method also takes the keyword arguments for the returned axes base class. The keyword arguments for the rectilinear base class &lt;a href=&quot;../axes_api#matplotlib.axes.Axes&quot;&gt;&lt;code&gt;Axes&lt;/code&gt;&lt;/a&gt; can be found in the following table but there might also be other keyword arguments if another projection is used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="afdeafe2ab7ee8f334b44b2de7a4221e899e5070" translate="yes" xml:space="preserve">
          <source>This method also takes the keyword arguments for the returned axes class. The keyword arguments for the rectilinear axes class &lt;a href=&quot;../axes_api#matplotlib.axes.Axes&quot;&gt;&lt;code&gt;Axes&lt;/code&gt;&lt;/a&gt; can be found in the following table but there might also be other keyword arguments if another projection is used, see the actual axes class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e13390903269de8dea611f7c22900834f665175" translate="yes" xml:space="preserve">
          <source>This method can only be used after an initial draw which caches the renderer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6637635ea7110b8d0ff4fe05759814c6a2695e4f" translate="yes" xml:space="preserve">
          <source>This method can only be used after an initial draw which caches the renderer. It is used to efficiently update Axes data (axis ticks, labels, etc are not updated)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="544c283bea637bb47900083ac7825ad0a1bd2576" translate="yes" xml:space="preserve">
          <source>This method creates three dimensional barplot where the width, depth, height, and color of the bars can all be uniquely set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2afbc85b2a5d277e2dd218b150b72b25150b4bc4" translate="yes" xml:space="preserve">
          <source>This method currently produces incorrect output due to a longstanding bug in 3D PolyCollection rendering.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6500d81c3ef8000e829a8b8e28a8cdd9727aceaa" translate="yes" xml:space="preserve">
          <source>This method does not modify the facecolor (which defaults to &quot;none&quot;), unlike the &lt;code&gt;Patch.set_color&lt;/code&gt; method defined in the parent class. Use &lt;code&gt;Patch.set_facecolor&lt;/code&gt; to set the facecolor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f33c5a4ad8f02a624a0c81d8966b326252f516f0" translate="yes" xml:space="preserve">
          <source>This method has to be implemented per backend</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b61bcbabc31a4b6bacf043eedc6776312fa89599" translate="yes" xml:space="preserve">
          <source>This method is called by &lt;a href=&quot;backend_managers_api#matplotlib.backend_managers.ToolManager.trigger_tool&quot;&gt;&lt;code&gt;matplotlib.backend_managers.ToolManager.trigger_tool&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb8bf319d70a24171dca1af9b072326dfd3d20a2" translate="yes" xml:space="preserve">
          <source>This method is called when the tool is removed by &lt;a href=&quot;backend_managers_api#matplotlib.backend_managers.ToolManager.remove_tool&quot;&gt;&lt;code&gt;matplotlib.backend_managers.ToolManager.remove_tool&lt;/code&gt;&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b2096bd5f4370c8fba1ee37f3e325a5b244c126" translate="yes" xml:space="preserve">
          <source>This method is experimental as of 3.0, and the API may change.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1bae55760965e7a3fe3b324671bccfef3dd98b5" translate="yes" xml:space="preserve">
          <source>This method is experimental as of 3.1, and the API may change.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c10131434efd43db630c92d5e8432ba72b6b7b85" translate="yes" xml:space="preserve">
          <source>This method is experimental. Compared to &lt;a href=&quot;matplotlib.axes.axes.pcolor#matplotlib.axes.Axes.pcolor&quot;&gt;&lt;code&gt;pcolor&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;matplotlib.axes.axes.pcolormesh#matplotlib.axes.Axes.pcolormesh&quot;&gt;&lt;code&gt;pcolormesh&lt;/code&gt;&lt;/a&gt; it has some limitations:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc55b49651badf9814e0430724b4f227215cb7e3" translate="yes" xml:space="preserve">
          <source>This method is intended to be overridden by artist subclasses. As an end-user of Matplotlib you will most likely not call this method yourself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="088e1c5f04b2190c9b82af16dc7201d5de2c3f68" translate="yes" xml:space="preserve">
          <source>This method is intended to be overridden by new projection types.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="522ff51cefc2768427054cd23ea14eaa161f1dec" translate="yes" xml:space="preserve">
          <source>This method is similar to ~.Axes.pcolor` and &lt;a href=&quot;matplotlib.axes.axes.pcolormesh#matplotlib.axes.Axes.pcolormesh&quot;&gt;&lt;code&gt;pcolormesh&lt;/code&gt;&lt;/a&gt;. It's designed to provide the fastest pcolor-type plotting with the Agg backend. To achieve this, it uses different algorithms internally depending on the complexity of the input grid (regular rectangular, non-regular rectangular or arbitrary quadrilateral).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1596a46cc9f5ac3c3994a4564eef80001dc95049" translate="yes" xml:space="preserve">
          <source>This method must get implemented per backend</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89bf0934c0817b6aca1405ea28892c0415bbcef5" translate="yes" xml:space="preserve">
          <source>This method should be used when the position and size of the bbox needs to be updated before actually drawing the bbox.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be22ab98dd913459051f353df839f4877217727f" translate="yes" xml:space="preserve">
          <source>This method should get implemented per backend</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="385b6cbcfee1278d35b17cb2b6d696693e71296e" translate="yes" xml:space="preserve">
          <source>This method will be call all functions connected to the 'button_press_event' with a &lt;a href=&quot;#matplotlib.backend_bases.MouseEvent&quot;&gt;&lt;code&gt;MouseEvent&lt;/code&gt;&lt;/a&gt; instance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a197502ba608f04a404d719287cdde2f03c94e02" translate="yes" xml:space="preserve">
          <source>This method will be call all functions connected to the 'scroll_event' with a &lt;a href=&quot;#matplotlib.backend_bases.MouseEvent&quot;&gt;&lt;code&gt;MouseEvent&lt;/code&gt;&lt;/a&gt; instance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa1aa2c5be0d1fe1732b53db40b1c3713fc0a7d6" translate="yes" xml:space="preserve">
          <source>This method will be called by artists who are picked and will fire off &lt;a href=&quot;#matplotlib.backend_bases.PickEvent&quot;&gt;&lt;code&gt;PickEvent&lt;/code&gt;&lt;/a&gt; callbacks registered listeners</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e084421197f126fb62f47506ecea594fd7aa4118" translate="yes" xml:space="preserve">
          <source>This method will be overridden in the Artist subclasses. Typically, it is implemented to not have any effect if the Artist is not visible (&lt;a href=&quot;_as_gen/matplotlib.artist.artist.get_visible#matplotlib.artist.Artist.get_visible&quot;&gt;&lt;code&gt;Artist.get_visible&lt;/code&gt;&lt;/a&gt; is &lt;em&gt;False&lt;/em&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="222c4dcecaec3f0a4672dc141f9b30af8fde9243" translate="yes" xml:space="preserve">
          <source>This method will be overridden in the Artist subclasses. Typically, it is implemented to not have any effect if the Artist is not visible (&lt;a href=&quot;matplotlib.artist.artist.get_visible#matplotlib.artist.Artist.get_visible&quot;&gt;&lt;code&gt;Artist.get_visible&lt;/code&gt;&lt;/a&gt; is &lt;em&gt;False&lt;/em&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82e3a5f16a608f35ec2c10e30479632dfec676e3" translate="yes" xml:space="preserve">
          <source>This method will call all functions connected to the 'button_release_event' with a &lt;a href=&quot;#matplotlib.backend_bases.MouseEvent&quot;&gt;&lt;code&gt;MouseEvent&lt;/code&gt;&lt;/a&gt; instance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8291f10928ddeeebed14a11a6b9a0f613b931ec8" translate="yes" xml:space="preserve">
          <source>This method will call all functions connected to the 'motion_notify_event' with a &lt;a href=&quot;#matplotlib.backend_bases.MouseEvent&quot;&gt;&lt;code&gt;MouseEvent&lt;/code&gt;&lt;/a&gt; instance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6a4104fe9941bdf7706018429789387b67e54a5" translate="yes" xml:space="preserve">
          <source>This method will honor axes inversion regardless of parameter order. It will not change the autoscaling setting (&lt;code&gt;Axes._autoscaleXon&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90cb764ba7752fe0a3fa8092549f2cbb36830eed" translate="yes" xml:space="preserve">
          <source>This method will honor axes inversion regardless of parameter order. It will not change the autoscaling setting (&lt;code&gt;Axes._autoscaleYon&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61e8b71b5c9aa956f37315881139beeca2ee2649" translate="yes" xml:space="preserve">
          <source>This method will not be very good for tiny axis ranges or extremely large ones. It assumes that the values on the chart are percentages displayed on a reasonable scale.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3141f7b4d5d804627dc0e7fdb1f7457336dbd924" translate="yes" xml:space="preserve">
          <source>This module contains a class representing a Type 1 font.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1046bdd768e21252c25ff525f5a16636396049cb" translate="yes" xml:space="preserve">
          <source>This module contains all the 2D line class which can draw with a variety of line styles, markers and colors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd0ea3dc059c0d7ec64c20380f594bc227cf67c3" translate="yes" xml:space="preserve">
          <source>This module contains classes to support completely configurable tick locating and formatting. Although the locators know nothing about major or minor ticks, they are used by the Axis class to support major and minor tick locating and formatting. Generic tick locators and formatters are provided, as well as domain specific custom ones.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7babb7404a0b20306924208f0632146c7f7abe3" translate="yes" xml:space="preserve">
          <source>This module contains functions to handle markers. Used by both the marker functionality of &lt;a href=&quot;_as_gen/matplotlib.axes.axes.plot#matplotlib.axes.Axes.plot&quot;&gt;&lt;code&gt;plot&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;_as_gen/matplotlib.axes.axes.scatter#matplotlib.axes.Axes.scatter&quot;&gt;&lt;code&gt;scatter&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe315e6c1781c33bbcb11b5f58537c95a191f322" translate="yes" xml:space="preserve">
          <source>This module defines default legend handlers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="066995f90c7765e6608cab02b7e583601e66f847" translate="yes" xml:space="preserve">
          <source>This module includes definition of several legend handler classes derived from the base class (HandlerBase) with the following method:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dca3bd2bc807a46674f30c2590f2f6f69319bd6f" translate="yes" xml:space="preserve">
          <source>This module includes functions and classes for color specification conversions, and for mapping numbers to colors in a 1-D array of colors called a colormap.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01b76af77d92685b1e621204dba071f2b3e1d4ea" translate="yes" xml:space="preserve">
          <source>This module is safe to import from anywhere within matplotlib; it imports matplotlib only at runtime.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb7d1a8216790e504e5c07f8398eb67e00c9f295" translate="yes" xml:space="preserve">
          <source>This module provides a single &lt;a href=&quot;#matplotlib.font_manager.FontManager&quot;&gt;&lt;code&gt;FontManager&lt;/code&gt;&lt;/a&gt; instance that can be shared across backends and platforms. The &lt;code&gt;findfont()&lt;/code&gt; function returns the best TrueType (TTF) font file in the local or system font path that matches the specified &lt;a href=&quot;#matplotlib.font_manager.FontProperties&quot;&gt;&lt;code&gt;FontProperties&lt;/code&gt;&lt;/a&gt; instance. The &lt;a href=&quot;#matplotlib.font_manager.FontManager&quot;&gt;&lt;code&gt;FontManager&lt;/code&gt;&lt;/a&gt; also handles Adobe Font Metrics (AFM) font files for use by the PostScript backend.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b750922c36b9c69bb35a009a72b7501cd4c4856" translate="yes" xml:space="preserve">
          <source>This module provides functionality to add a table to a plot.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c975b81a2ae4f72d79e50e404541686c089293a0" translate="yes" xml:space="preserve">
          <source>This module provides routines to adjust subplot params so that subplots are nicely fit in the figure. In doing so, only axis labels, tick labels, axes titles and offsetboxes that are anchored to axes are currently considered.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0be4b2a6ac3962434b3920051b25f417850babda" translate="yes" xml:space="preserve">
          <source>This must be sub-classed to be useful.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b09ceaaae65b32dd739a33c0d6ac6405c8f505ff" translate="yes" xml:space="preserve">
          <source>This note is a bit technical and details the way a &lt;a href=&quot;#matplotlib.tri.CubicTriInterpolator&quot;&gt;&lt;code&gt;CubicTriInterpolator&lt;/code&gt;&lt;/a&gt; computes a cubic interpolation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac97c5c1c3081ac5a64aab7611db728371a0aca4" translate="yes" xml:space="preserve">
          <source>This option is only relevant if &lt;em&gt;where&lt;/em&gt; is used and the two curves are crossing each other.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a71f369eaeb69b1eb990e85b7351dcf0404e5707" translate="yes" xml:space="preserve">
          <source>This order means that only the canonical names need appear in &lt;code&gt;allowed&lt;/code&gt;, &lt;code&gt;forbidden&lt;/code&gt;, &lt;code&gt;required&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff55e0229d8f41611725fcd5d81984aace45c6a6" translate="yes" xml:space="preserve">
          <source>This overrides certain properties of a &lt;code&gt;YAxis&lt;/code&gt; to provide special-casing for a radial axis.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="704acb7b3feea370825bd61651248325ff61d89d" translate="yes" xml:space="preserve">
          <source>This overrides certain properties of an &lt;code&gt;XAxis&lt;/code&gt; to provide special-casing for an angular axis.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21515b1f96ef70a254d422fdce4600266ac757b3" translate="yes" xml:space="preserve">
          <source>This parameter can be used to draw a histogram of data that has already been binned, e.g. using &lt;code&gt;np.histogram&lt;/code&gt; (by treating each bin as a single point with a weight equal to its count)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92d973abb9fef553f686b8c098b2bbd6336b27d8" translate="yes" xml:space="preserve">
          <source>This parameter is a shortcut for explicitly calling &lt;a href=&quot;matplotlib.axes.axes.set_aspect#matplotlib.axes.Axes.set_aspect&quot;&gt;&lt;code&gt;Axes.set_aspect&lt;/code&gt;&lt;/a&gt;. See there for further details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d496570a395ff00b734d3e14199825f987efcb3" translate="yes" xml:space="preserve">
          <source>This parameter is ignored. It is included for compatibility with detrend_mean</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0d7bfe666fe681e4201419ef310a0cb820b70b9" translate="yes" xml:space="preserve">
          <source>This performs a nearest neighbor search. Each font is given a similarity score to the target font properties. The first font with the highest score is returned. If no matches below a certain threshold are found, the default font (usually DejaVu Sans) is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="410cbcf904aa3823fdc8065aeb9d5a56e4822b98" translate="yes" xml:space="preserve">
          <source>This problem will likely not be solved until OpenGL support is added to all of the backends (patches are greatly welcomed). Until then, if you need complex 3D scenes, we recommend using &lt;a href=&quot;http://code.enthought.com/projects/mayavi/documentation.php&quot;&gt;MayaVi&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a80bf1091305361b5a0478c685842b7d5cab239" translate="yes" xml:space="preserve">
          <source>This provides a fallback implementation of &lt;a href=&quot;#matplotlib.backend_bases.RendererBase.draw_path_collection&quot;&gt;&lt;code&gt;draw_path_collection()&lt;/code&gt;&lt;/a&gt; that makes multiple calls to &lt;a href=&quot;#matplotlib.backend_bases.RendererBase.draw_path&quot;&gt;&lt;code&gt;draw_path()&lt;/code&gt;&lt;/a&gt;. Some backends may want to override this in order to render each set of path data only once, and then reference that path multiple times with the different offsets, colors, styles etc. The generator methods &lt;code&gt;_iter_collection_raw_paths()&lt;/code&gt; and &lt;code&gt;_iter_collection()&lt;/code&gt; are provided to help with (and standardize) the implementation across backends. It is highly recommended to use those generators, so that changes to the behavior of &lt;a href=&quot;#matplotlib.backend_bases.RendererBase.draw_path_collection&quot;&gt;&lt;code&gt;draw_path_collection()&lt;/code&gt;&lt;/a&gt; can be made globally.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0de915e123c296c139a0fbf6e0c9b1292220b48" translate="yes" xml:space="preserve">
          <source>This provides a fallback implementation of &lt;a href=&quot;#matplotlib.backend_bases.RendererBase.draw_quad_mesh&quot;&gt;&lt;code&gt;draw_quad_mesh()&lt;/code&gt;&lt;/a&gt; that generates paths and then calls &lt;a href=&quot;#matplotlib.backend_bases.RendererBase.draw_path_collection&quot;&gt;&lt;code&gt;draw_path_collection()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d5d254050caa42785e5b4525ad6027d06d27e7d" translate="yes" xml:space="preserve">
          <source>This provides a fallback implementation of &lt;a href=&quot;#matplotlib.backends.backend_pdf.RendererPdf.draw_path_collection&quot;&gt;&lt;code&gt;draw_path_collection()&lt;/code&gt;&lt;/a&gt; that makes multiple calls to &lt;a href=&quot;#matplotlib.backends.backend_pdf.RendererPdf.draw_path&quot;&gt;&lt;code&gt;draw_path()&lt;/code&gt;&lt;/a&gt;. Some backends may want to override this in order to render each set of path data only once, and then reference that path multiple times with the different offsets, colors, styles etc. The generator methods &lt;code&gt;_iter_collection_raw_paths()&lt;/code&gt; and &lt;code&gt;_iter_collection()&lt;/code&gt; are provided to help with (and standardize) the implementation across backends. It is highly recommended to use those generators, so that changes to the behavior of &lt;a href=&quot;#matplotlib.backends.backend_pdf.RendererPdf.draw_path_collection&quot;&gt;&lt;code&gt;draw_path_collection()&lt;/code&gt;&lt;/a&gt; can be made globally.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6dfb5ff44fe7be040c04fba55d2d894f0632ab2d" translate="yes" xml:space="preserve">
          <source>This provides a fallback implementation of &lt;a href=&quot;#matplotlib.backends.backend_ps.RendererPS.draw_path_collection&quot;&gt;&lt;code&gt;draw_path_collection()&lt;/code&gt;&lt;/a&gt; that makes multiple calls to &lt;a href=&quot;#matplotlib.backends.backend_ps.RendererPS.draw_path&quot;&gt;&lt;code&gt;draw_path()&lt;/code&gt;&lt;/a&gt;. Some backends may want to override this in order to render each set of path data only once, and then reference that path multiple times with the different offsets, colors, styles etc. The generator methods &lt;code&gt;_iter_collection_raw_paths()&lt;/code&gt; and &lt;code&gt;_iter_collection()&lt;/code&gt; are provided to help with (and standardize) the implementation across backends. It is highly recommended to use those generators, so that changes to the behavior of &lt;a href=&quot;#matplotlib.backends.backend_ps.RendererPS.draw_path_collection&quot;&gt;&lt;code&gt;draw_path_collection()&lt;/code&gt;&lt;/a&gt; can be made globally.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ddd6c2631b38c299d8fcd6b3318fabca786f3ab9" translate="yes" xml:space="preserve">
          <source>This provides a fallback implementation of &lt;a href=&quot;#matplotlib.backends.backend_svg.RendererSVG.draw_path_collection&quot;&gt;&lt;code&gt;draw_path_collection()&lt;/code&gt;&lt;/a&gt; that makes multiple calls to &lt;a href=&quot;#matplotlib.backends.backend_svg.RendererSVG.draw_path&quot;&gt;&lt;code&gt;draw_path()&lt;/code&gt;&lt;/a&gt;. Some backends may want to override this in order to render each set of path data only once, and then reference that path multiple times with the different offsets, colors, styles etc. The generator methods &lt;code&gt;_iter_collection_raw_paths()&lt;/code&gt; and &lt;code&gt;_iter_collection()&lt;/code&gt; are provided to help with (and standardize) the implementation across backends. It is highly recommended to use those generators, so that changes to the behavior of &lt;a href=&quot;#matplotlib.backends.backend_svg.RendererSVG.draw_path_collection&quot;&gt;&lt;code&gt;draw_path_collection()&lt;/code&gt;&lt;/a&gt; can be made globally.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2553a5f6d0857c00c8c51ff976d701670cde3cf" translate="yes" xml:space="preserve">
          <source>This provides a fallback implementation of &lt;a href=&quot;#matplotlib.patheffects.PathEffectRenderer.draw_path_collection&quot;&gt;&lt;code&gt;draw_path_collection()&lt;/code&gt;&lt;/a&gt; that makes multiple calls to &lt;a href=&quot;#matplotlib.patheffects.PathEffectRenderer.draw_path&quot;&gt;&lt;code&gt;draw_path()&lt;/code&gt;&lt;/a&gt;. Some backends may want to override this in order to render each set of path data only once, and then reference that path multiple times with the different offsets, colors, styles etc. The generator methods &lt;code&gt;_iter_collection_raw_paths()&lt;/code&gt; and &lt;code&gt;_iter_collection()&lt;/code&gt; are provided to help with (and standardize) the implementation across backends. It is highly recommended to use those generators, so that changes to the behavior of &lt;a href=&quot;#matplotlib.patheffects.PathEffectRenderer.draw_path_collection&quot;&gt;&lt;code&gt;draw_path_collection()&lt;/code&gt;&lt;/a&gt; can be made globally.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="925fc3fca245f8ae41e06aa94529d63b3eea426c" translate="yes" xml:space="preserve">
          <source>This provides a fallback implementation of draw_markers that makes multiple calls to &lt;a href=&quot;#matplotlib.backend_bases.RendererBase.draw_path&quot;&gt;&lt;code&gt;draw_path()&lt;/code&gt;&lt;/a&gt;. Some backends may want to override this method in order to draw the marker only once and reuse it multiple times.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2882b9ae4dc11c52bae954d97553abc095bae019" translate="yes" xml:space="preserve">
          <source>This provides a fallback implementation of draw_markers that makes multiple calls to &lt;a href=&quot;#matplotlib.backends.backend_cairo.RendererCairo.draw_path&quot;&gt;&lt;code&gt;draw_path()&lt;/code&gt;&lt;/a&gt;. Some backends may want to override this method in order to draw the marker only once and reuse it multiple times.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fea174a358f31e19d7d9061842e151268bc90139" translate="yes" xml:space="preserve">
          <source>This provides a fallback implementation of draw_markers that makes multiple calls to &lt;a href=&quot;#matplotlib.backends.backend_pdf.RendererPdf.draw_path&quot;&gt;&lt;code&gt;draw_path()&lt;/code&gt;&lt;/a&gt;. Some backends may want to override this method in order to draw the marker only once and reuse it multiple times.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5295ca3b3f030609330fc0a53f0bf83b33ffe87" translate="yes" xml:space="preserve">
          <source>This provides a fallback implementation of draw_markers that makes multiple calls to &lt;a href=&quot;#matplotlib.backends.backend_pgf.RendererPgf.draw_path&quot;&gt;&lt;code&gt;draw_path()&lt;/code&gt;&lt;/a&gt;. Some backends may want to override this method in order to draw the marker only once and reuse it multiple times.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a0bae7076f637b13bad0a9163e0a1289b5bd45d" translate="yes" xml:space="preserve">
          <source>This provides a fallback implementation of draw_markers that makes multiple calls to &lt;a href=&quot;#matplotlib.backends.backend_ps.RendererPS.draw_path&quot;&gt;&lt;code&gt;draw_path()&lt;/code&gt;&lt;/a&gt;. Some backends may want to override this method in order to draw the marker only once and reuse it multiple times.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6cb5b0a3b0dc928ffccea6e9c0616d669a941ab3" translate="yes" xml:space="preserve">
          <source>This provides a fallback implementation of draw_markers that makes multiple calls to &lt;a href=&quot;#matplotlib.backends.backend_svg.RendererSVG.draw_path&quot;&gt;&lt;code&gt;draw_path()&lt;/code&gt;&lt;/a&gt;. Some backends may want to override this method in order to draw the marker only once and reuse it multiple times.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ffa91b2f3f0450d48236b6126d13ae2555b54d5" translate="yes" xml:space="preserve">
          <source>This provides a fallback implementation of draw_markers that makes multiple calls to &lt;a href=&quot;#matplotlib.patheffects.PathEffectRenderer.draw_path&quot;&gt;&lt;code&gt;draw_path()&lt;/code&gt;&lt;/a&gt;. Some backends may want to override this method in order to draw the marker only once and reuse it multiple times.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9414a66b3339c169524c33b999c50d2c6159f66" translate="yes" xml:space="preserve">
          <source>This provides several classes used for blocking interaction with figure windows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55154d2799b86677f76e507a1c6f46279f2f17f4" translate="yes" xml:space="preserve">
          <source>This proxy then intercepts draw calls, calling the appropriate &lt;a href=&quot;#matplotlib.patheffects.AbstractPathEffect&quot;&gt;&lt;code&gt;AbstractPathEffect&lt;/code&gt;&lt;/a&gt; draw method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36ba172e575412dbe52170672e6cd6a87a1eb4b4" translate="yes" xml:space="preserve">
          <source>This resets the a possible position change due to aspect constraints. For an explanation of the positions see &lt;a href=&quot;matplotlib.axes.axes.set_position#matplotlib.axes.Axes.set_position&quot;&gt;&lt;code&gt;set_position&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af2eeaa9341d89a01ec32dd146a16b2900fe4cc1" translate="yes" xml:space="preserve">
          <source>This routine uses transform equality to identify sub-trees, therefore in many situations it is object id which will be used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26541f9fe2e45c86ff285327e5a935294046e530" translate="yes" xml:space="preserve">
          <source>This saves the animation as an h264 video, encoded in base64 directly into the HTML5 video tag. This respects the rc parameters for the writer as well as the bitrate. This also makes use of the &lt;code&gt;interval&lt;/code&gt; to control the speed, and uses the &lt;code&gt;repeat&lt;/code&gt; parameter to decide whether to loop.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e22002142d77a80cecf3c8ce58df4ed44410f55" translate="yes" xml:space="preserve">
          <source>This scale is similar to a log scale close to zero and to one, and almost linear around 0.5. It maps the interval ]0, 1[ onto ]-infty, +infty[.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69fb9cf366ce2669a9d2d9474dfda26343eb8acb" translate="yes" xml:space="preserve">
          <source>This setting does currently only affect newly created cells using &lt;a href=&quot;#matplotlib.table.Table.add_cell&quot;&gt;&lt;code&gt;add_cell&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="debf1cba91dae501beae953b5059fa7c6b420033" translate="yes" xml:space="preserve">
          <source>This should be used in lieu of &lt;code&gt;figure.canvas.mpl_connect&lt;/code&gt; since this function stores callback ids for later clean up.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3983eef5755215ff285d7342c6a3b066b9af2f74" translate="yes" xml:space="preserve">
          <source>This should not be used to determine whether the &lt;em&gt;dataLim&lt;/em&gt; need to be updated, and may not actually be useful for anything.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="631d52880d75106523f9217e10003bff4ee93a10" translate="yes" xml:space="preserve">
          <source>This spacing will be exact for labels at locations where the contour is straight, less so for labels on curved contours.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="186d2a7157b9b30ea958860947556ef85229d4a6" translate="yes" xml:space="preserve">
          <source>This subclass of &lt;code&gt;XTick&lt;/code&gt; provides angular ticks with some small modification to their re-positioning such that ticks are rotated based on tick location. This results in ticks that are correctly perpendicular to the arc spine.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0980952b57b136c2caccee90edbe2fd3eadbcf5a" translate="yes" xml:space="preserve">
          <source>This subclass of &lt;code&gt;YTick&lt;/code&gt; provides radial ticks with some small modification to their re-positioning such that ticks are rotated based on axes limits. This results in ticks that are correctly perpendicular to the spine. Labels are also rotated to be perpendicular to the spine, when 'auto' rotation is enabled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="663ad33b61f112668f4abba5054992de87ec024b" translate="yes" xml:space="preserve">
          <source>This support does not require fontconfig to be installed or support for it to be enabled. We are merely borrowing its pattern syntax for use here.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86bc8e0f9d8c392ce3a6c0e0d8b8f12fe3fd6eed" translate="yes" xml:space="preserve">
          <source>This tool runs in the background reporting the position of the cursor</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b634969a944d70bcb33c8c6074249d802c40abc" translate="yes" xml:space="preserve">
          <source>This tool, keeps track of all &lt;a href=&quot;#matplotlib.backend_tools.ToolToggleBase&quot;&gt;&lt;code&gt;ToolToggleBase&lt;/code&gt;&lt;/a&gt; derived tools, and calls set_cursor when a tool gets triggered</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3213420c238bed123eb0bf14579f5a9d5d3427bf" translate="yes" xml:space="preserve">
          <source>This transformation is primarily used by the &lt;a href=&quot;../axis_api#matplotlib.axis.Axis&quot;&gt;&lt;code&gt;Axis&lt;/code&gt;&lt;/a&gt; class, and is meant to be overridden by new kinds of projections that may need to place axis elements in different locations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9846adac4f77b57e72b5258b7d4f50d1f28b2bb0" translate="yes" xml:space="preserve">
          <source>This transformation is primarily used by the &lt;a href=&quot;axis_api#matplotlib.axis.Axis&quot;&gt;&lt;code&gt;Axis&lt;/code&gt;&lt;/a&gt; class, and is meant to be overridden by new kinds of projections that may need to place axis elements in different locations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="abf78983051daa8f21b3d276e685c6d42c65e036" translate="yes" xml:space="preserve">
          <source>This type of plot is commonly used in neuroscience for representing neural events, where it is usually called a spike raster, dot raster, or raster plot.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09c01eb2bf180ca7608325dc404ce659ee8af270" translate="yes" xml:space="preserve">
          <source>This updates ax.dataLim, and, if autoscaling, sets viewLim to tightly fit the image, regardless of dataLim. Autoscaling state is not changed, so following this with ax.autoscale_view will redo the autoscaling in accord with dataLim.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e145d7b99308b1fdf105bee4f36b59b3b32ea0fe" translate="yes" xml:space="preserve">
          <source>This uses a variation of the original irregular image code, and it is used by pcolorfast for the corresponding grid type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3fd48e8720c5cf0066212d2b7e3a2ee110757373" translate="yes" xml:space="preserve">
          <source>This uses the &quot;line intersecting a circle&quot; algorithm from:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1942c35342e1ed15190422c2fb85b42db7d36a3a" translate="yes" xml:space="preserve">
          <source>This utility wrapper makes it convenient to create common layouts of subplots in a single call.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f11acbf64dc0b24a11b2d8d950442074f7a0845" translate="yes" xml:space="preserve">
          <source>This utility wrapper makes it convenient to create common layouts of subplots, including the enclosing figure object, in a single call.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47a47c2a95505f63c023348eab04c709c79cf79b" translate="yes" xml:space="preserve">
          <source>This version is an optimization for the case where both child transforms are of type &lt;a href=&quot;#matplotlib.transforms.Affine2DBase&quot;&gt;&lt;code&gt;Affine2DBase&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="180b3348f84451824e48aa23a68056df93b5aa3f" translate="yes" xml:space="preserve">
          <source>This version is an optimization that handles the case where both &lt;em&gt;a&lt;/em&gt; and &lt;em&gt;b&lt;/em&gt; are 2D affines.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3109cee127df3b5c216de17ea09ae19a23ec702" translate="yes" xml:space="preserve">
          <source>This version reads pfa and pfb files and splits them for embedding in pdf files. It also supports SlantFont and ExtendFont transformations, similarly to pdfTeX and friends. There is no support yet for subsetting.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c74683af2c5bdaa7166e44ce3256c24ffe096642" translate="yes" xml:space="preserve">
          <source>This visualizes the non-zero values of the array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9e9ec751db9d342e986aeb2c05e79a68d72ca43" translate="yes" xml:space="preserve">
          <source>This will be extended in the future to deal with more types of labeled data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1a5238f39d1bd49cf90efcedaf6bff174137a5d" translate="yes" xml:space="preserve">
          <source>This will make all major ticks be red, pointing out of the box, and with dimensions 6 points by 2 points. Tick labels will also be red. Gridlines will be red and translucent.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96e12dfc66569cf1cc013506f72555514f50f7d2" translate="yes" xml:space="preserve">
          <source>This will return True is a key was pressed, False if a mouse button was pressed and None if &lt;em&gt;timeout&lt;/em&gt; was reached without either being pressed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ddf5b5579dde607bfe1e163bbcaa4dd7a25fe56b" translate="yes" xml:space="preserve">
          <source>This will work the same as the base locator except in the case that the view spans the entire circle. In such cases, the previously used default locations of every 45 degrees are returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26803a4f2ce24ed40cba473b12a262e7bcda5073" translate="yes" xml:space="preserve">
          <source>This works both with IPython and with vanilla python shells.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="390e367607be66caf7e76b28483de5d25587a5f0" translate="yes" xml:space="preserve">
          <source>Threshold for the ratio of the interval to the maximum absolute value of its endpoints. If the interval is smaller than this, it will be expanded. This value should be around 1e-15 or larger; otherwise the interval will be approaching the double precision resolution limit.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69c6a408b61fc278a18edf45c55b56ab63ded7e0" translate="yes" xml:space="preserve">
          <source>Thus you could abbreviate the above rc command as:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac05795a26d45a09a57d2724eb0dbcac3cd94e00" translate="yes" xml:space="preserve">
          <source>Thus, &lt;code&gt;hpack(w, 'exactly')&lt;/code&gt; produces a box whose width is exactly &lt;em&gt;w&lt;/em&gt;, while &lt;code&gt;hpack(w, 'additional')&lt;/code&gt; yields a box whose width is the natural width plus &lt;em&gt;w&lt;/em&gt;. The default values produce a box with the natural width.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="990466a16d1855e18b42e7258391705b61407fac" translate="yes" xml:space="preserve">
          <source>Thus, &lt;code&gt;vpack(h, 'exactly')&lt;/code&gt; produces a box whose height is exactly &lt;em&gt;h&lt;/em&gt;, while &lt;code&gt;vpack(h, 'additional')&lt;/code&gt; yields a box whose height is the natural height plus &lt;em&gt;h&lt;/em&gt;. The default values produce a box with the natural width.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe6207c52983508becf37561b174a960b8f9ea7e" translate="yes" xml:space="preserve">
          <source>Thus, following three calls are identical and creates an inset axes with respect to the &lt;em&gt;parent_axes&lt;/em&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="646ee06069730dbf28f152e5f921060b02fb1ab8" translate="yes" xml:space="preserve">
          <source>Tick Labels.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb705edea1763d8502e9ebf9d749bef5185affd1" translate="yes" xml:space="preserve">
          <source>Tick Labels. While derived from Text, this single artist draws all ticklabels. As in AxisLabel, the position of the text is updated in the fly, so changing text position has no effect. Otherwise, the properties can be changed as a normal Text. Unlike the ticklabels of the mainline matplotlib, properties of single ticklabel alone cannot modified.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f8eff925670777c20301ca95d68d4b963da5ab0" translate="yes" xml:space="preserve">
          <source>Tick and label zorder.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2c84ae4d5da9a532e841d729fe43fc294e88b73" translate="yes" xml:space="preserve">
          <source>Tick color; accepts any mpl color spec.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e0d8d224778769ca5ce3403bd36967d2aa0b3d5" translate="yes" xml:space="preserve">
          <source>Tick formatters</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9897cc3d03c312d907236d54bfd53e6ef79ebcd6" translate="yes" xml:space="preserve">
          <source>Tick formatters for the major and minor ticks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2473a7b4b73ea8c57417cbd9b97a029b49c7efa6" translate="yes" xml:space="preserve">
          <source>Tick formatting</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c3b43c666984fe41db25d178f21715c8b739072" translate="yes" xml:space="preserve">
          <source>Tick formatting is controlled by classes derived from Formatter. The formatter operates on a single tick value and returns a string to the axis.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ceb4388d08f1952269701b9b71980a223b26079e" translate="yes" xml:space="preserve">
          <source>Tick formatting using the ScalarFormatter</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8893f3d304f30b289275b63997d662278c643e17" translate="yes" xml:space="preserve">
          <source>Tick label color; mpl color spec.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23b6e2234a5eb15c2a646cbff65be6e113056d46" translate="yes" xml:space="preserve">
          <source>Tick label font size in points or as a string (e.g., 'large').</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f758721094c8dc6bf21bf31c78fb91f167be56c1" translate="yes" xml:space="preserve">
          <source>Tick label rotation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f78f4d0940105b9ca48999d2806309289fcf5a1e" translate="yes" xml:space="preserve">
          <source>Tick labels are updated immediately unless &lt;em&gt;update_ticks&lt;/em&gt; is &lt;em&gt;False&lt;/em&gt;, in which case one should call &lt;a href=&quot;#matplotlib.colorbar.ColorbarBase.update_ticks&quot;&gt;&lt;code&gt;update_ticks&lt;/code&gt;&lt;/a&gt; explicitly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4cb093849974928e17ea7a065cd68bb0ee3181ab" translate="yes" xml:space="preserve">
          <source>Tick labels for the xaxis are placed on top.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90b7413b944e41cc9443ef2d6c8b844aec10ebd6" translate="yes" xml:space="preserve">
          <source>Tick length in points.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dad0f043818eab9f932d78a92836d6c2aa217fa8" translate="yes" xml:space="preserve">
          <source>Tick locating</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64ee026b41663264dcfaf8f547617c98fc5e2a10" translate="yes" xml:space="preserve">
          <source>Tick locating and formatting</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6829c09344a7e8f27da8c3785c2ca067f6682edc" translate="yes" xml:space="preserve">
          <source>Tick locations are fixed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11772e6fccfb745b4ba11cdd2b8dfa5fea48335d" translate="yes" xml:space="preserve">
          <source>Tick locations are fixed. If nbins is not None, the array of possible positions will be subsampled to keep the number of ticks &amp;lt;= nbins +1. The subsampling will be done so as to include the smallest absolute value; for example, if zero is included in the array of possibilities, then it is guaranteed to be one of the chosen ticks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a94dfaadc9f05dc131334def46e47b4213478584" translate="yes" xml:space="preserve">
          <source>Tick locators</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0802494c9862e19d68b83126cafb2c89393dd08c" translate="yes" xml:space="preserve">
          <source>Tick locators for the major and minor ticks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52e1bb82ab666b8a1af5349b040a0cbeec9ea672" translate="yes" xml:space="preserve">
          <source>Tick value is interpreted as a plain old number. If &lt;code&gt;useOffset==True&lt;/code&gt; and the data range is much smaller than the data average, then an offset will be determined such that the tick labels are meaningful. Scientific notation is used for &lt;code&gt;data &amp;lt; 10^-n&lt;/code&gt; or &lt;code&gt;data &amp;gt;= 10^m&lt;/code&gt;, where &lt;code&gt;n&lt;/code&gt; and &lt;code&gt;m&lt;/code&gt; are the power limits set using &lt;code&gt;set_powerlimits((n,m))&lt;/code&gt;. The defaults for these are controlled by the &lt;code&gt;axes.formatter.limits&lt;/code&gt; rc parameter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91e04b11a068cd332deed2944aabb2df4efc1780" translate="yes" xml:space="preserve">
          <source>Tick width in points.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53adebdc2b1cbbedb56395b19a73fe47b87cc554" translate="yes" xml:space="preserve">
          <source>Ticks</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f9ba5018369780b1fecc967e68e59ea662762aa" translate="yes" xml:space="preserve">
          <source>Ticks and range are a multiple of base; either integer or float.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="010d3eaec0353674903f5a47f5bf40138d570391" translate="yes" xml:space="preserve">
          <source>Ticks and tick labels</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="849fd7b9d530b1aec51424158f32d49f574792e4" translate="yes" xml:space="preserve">
          <source>Ticks are by default direct opposite side of the ticklabels. To make ticks to the same side of the ticklabels,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8368a5f7fb96703a0087b7d2c3ef5d890ae1f25a" translate="yes" xml:space="preserve">
          <source>Ticks are derived from Line2D, and note that ticks themselves are markers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10559ae5d9d99d02a32811e2312b8fc5166303fc" translate="yes" xml:space="preserve">
          <source>Ticks are derived from Line2D, and note that ticks themselves are markers. Thus, you should use set_mec, set_mew, etc.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ac6b7c60849f4a9190d1c6bcd597d86afe3cae6" translate="yes" xml:space="preserve">
          <source>Ticks are formatted to show integer indices.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17ee734ae320859539502d4a8ad5c625010fa493" translate="yes" xml:space="preserve">
          <source>Ticks are placed to the left and above.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54e1f90e7e9adb32e3cfffbaf0b19be38e86d749" translate="yes" xml:space="preserve">
          <source>Ticks mark a position on an Axis. They contain two lines as markers and two labels; one each for the bottom and top positions (in case of an &lt;a href=&quot;#matplotlib.axis.XAxis&quot;&gt;&lt;code&gt;XAxis&lt;/code&gt;&lt;/a&gt;) or for the left and right positions (in case of a &lt;a href=&quot;#matplotlib.axis.YAxis&quot;&gt;&lt;code&gt;YAxis&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
