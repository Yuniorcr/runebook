<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="go">
    <body>
      <group id="go">
        <trans-unit id="263318bcaf840ab395175e373b1ab05080a86fda" translate="yes" xml:space="preserve">
          <source>TypeOf</source>
          <target state="translated">TypeOf</target>
        </trans-unit>
        <trans-unit id="94969a4aec167529cd20467de358b3733a4d1890" translate="yes" xml:space="preserve">
          <source>TypeOf returns the reflection Type that represents the dynamic type of i. If i is a nil interface value, TypeOf returns nil.</source>
          <target state="translated">TypeOf는 i의 동적 유형을 나타내는 반사 유형을 반환합니다. i가 nil 인터페이스 값인 경우 TypeOf는 nil을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="610b14205855f95702d99da6e19e5297b1301163" translate="yes" xml:space="preserve">
          <source>TypeOf returns the type of expression e, or nil if not found. Precondition: the Types, Uses and Defs maps are populated.</source>
          <target state="translated">TypeOf는 식 e의 유형을 반환하거나 찾지 못하면 nil을 반환합니다. 전제 조건 : 유형, 용도 및 정의 맵이 채워집니다.</target>
        </trans-unit>
        <trans-unit id="af91dac9977c975dbcb45d1e0c495727ba389f89" translate="yes" xml:space="preserve">
          <source>TypeString returns the string representation of typ. The Qualifier controls the printing of package-level objects, and may be nil.</source>
          <target state="translated">TypeString은 typ의 문자열 표현을 반환합니다. 한정자는 패키지 수준 개체의 인쇄를 제어하며 nil 일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="70c0f61c1717bc58a510efe98bd7a3251bcbbcc7" translate="yes" xml:space="preserve">
          <source>Typed Strings</source>
          <target state="translated">입력 된 문자열</target>
        </trans-unit>
        <trans-unit id="802976d08e8f16b7d83d8d12b5129fe9e25c37e3" translate="yes" xml:space="preserve">
          <source>Types HTML, JS, URL, and others from content.go can carry safe content that is exempted from escaping.</source>
          <target state="translated">content.go의 HTML, JS, URL 및 기타 유형은 탈출이 면제 된 안전한 콘텐츠를 전달할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="cea554202fc0c5ff6482d3e61417b6640fc17af4" translate="yes" xml:space="preserve">
          <source>Types and Values</source>
          <target state="translated">유형과 값</target>
        </trans-unit>
        <trans-unit id="4a237767760223207248b2b72e8a0eb1c03dbe30" translate="yes" xml:space="preserve">
          <source>Types implementing Valuer interface are able to convert themselves to a driver Value.</source>
          <target state="translated">Valuer 인터페이스를 구현하는 유형은 자신을 드라이버 Value로 변환 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="738f4e11bb80f11f67d45a4481cf366179186823" translate="yes" xml:space="preserve">
          <source>Types of signals</source>
          <target state="translated">신호의 종류</target>
        </trans-unit>
        <trans-unit id="b842957498ea8405dcbf49648de63b65b478d2cb" translate="yes" xml:space="preserve">
          <source>UDPAddr represents the address of a UDP end point.</source>
          <target state="translated">UDPAddr은 UDP 엔드 포인트의 주소를 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="b3b4fc6834e1c9d716c787f9ac0d161736c5f604" translate="yes" xml:space="preserve">
          <source>UDPConn is the implementation of the Conn and PacketConn interfaces for UDP network connections.</source>
          <target state="translated">UDPConn은 UDP 네트워크 연결을위한 Conn 및 PacketConn 인터페이스의 구현입니다.</target>
        </trans-unit>
        <trans-unit id="b499255e82796e4d28d962954395ad3d893bac9c" translate="yes" xml:space="preserve">
          <source>UDPConn.WriteTo</source>
          <target state="translated">UDPConn.WriteTo</target>
        </trans-unit>
        <trans-unit id="0e2d9b0777a485c1276de0803c12a7d76fbc5c39" translate="yes" xml:space="preserve">
          <source>URL</source>
          <target state="translated">URL</target>
        </trans-unit>
        <trans-unit id="2113a36dc330dedde4db70e90a71dcb67bd4a9a2" translate="yes" xml:space="preserve">
          <source>URL (Roundtrip)</source>
          <target state="translated">URL (왕복)</target>
        </trans-unit>
        <trans-unit id="a727ea70072d81d7b63c816962c8a756b508329a" translate="yes" xml:space="preserve">
          <source>URL encapsulates a known safe URL or URL substring (see RFC 3986). A URL like `javascript:checkThatFormNotEditedBeforeLeavingPage()` from a trusted source should go in the page, but by default dynamic `javascript:` URLs are filtered out since they are a frequently exploited injection vector.</source>
          <target state="translated">URL은 알려진 안전한 URL 또는 URL 하위 문자열을 캡슐화합니다 (RFC 3986 참조). 신뢰할 수있는 소스의`javascript : checkThatFormNotEditedBeforeLeavingPage ()`와 같은 URL이 페이지에 들어가야하지만 기본적으로 동적`javascript :`URL은 자주 악용되는 주입 벡터이므로 필터링됩니다.</target>
        </trans-unit>
        <trans-unit id="9f6702283d55dba63f2c15c6981885271e829853" translate="yes" xml:space="preserve">
          <source>URL's String method uses the EscapedPath method to obtain the path. See the EscapedPath method for more details.</source>
          <target state="translated">URL의 String 메소드는 EscapedPath 메소드를 사용하여 경로를 얻습니다. 자세한 내용은 EscapedPath 메서드를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="fb15045a2812519f4e1083e5cb90b2d16bf5e0e2" translate="yes" xml:space="preserve">
          <source>URL.EscapedPath</source>
          <target state="translated">URL.EscapedPath</target>
        </trans-unit>
        <trans-unit id="4966fe66780da2ec3d10c8599e72fff7ab08a49a" translate="yes" xml:space="preserve">
          <source>URL.Hostname</source>
          <target state="translated">URL.Hostname</target>
        </trans-unit>
        <trans-unit id="93c3fa248c55505922464e5ed8d1899f54880821" translate="yes" xml:space="preserve">
          <source>URL.IsAbs</source>
          <target state="translated">URL.IsAbs</target>
        </trans-unit>
        <trans-unit id="c5ff099f399baf8e187d09b758e991f007d9fdbb" translate="yes" xml:space="preserve">
          <source>URL.MarshalBinary</source>
          <target state="translated">URL.MarshalBinary</target>
        </trans-unit>
        <trans-unit id="1f5b4a1bd876c3d2e848fa8ad0b5bcdecf59f3eb" translate="yes" xml:space="preserve">
          <source>URL.Parse</source>
          <target state="translated">URL.Parse</target>
        </trans-unit>
        <trans-unit id="df308e5c8e7a40f3e06e1c8f29546df6edd0815c" translate="yes" xml:space="preserve">
          <source>URL.Port</source>
          <target state="translated">URL.Port</target>
        </trans-unit>
        <trans-unit id="1f4af3bd8a928ef1166e58b54f440e84607bbe48" translate="yes" xml:space="preserve">
          <source>URL.Query</source>
          <target state="translated">URL.Query</target>
        </trans-unit>
        <trans-unit id="2f6fe106a87daa55540bf1b3e2faa597e4637d72" translate="yes" xml:space="preserve">
          <source>URL.RequestURI</source>
          <target state="translated">URL.RequestURI</target>
        </trans-unit>
        <trans-unit id="5ef9cfae68b8e79167af493274ea7b99357dad6d" translate="yes" xml:space="preserve">
          <source>URL.ResolveReference</source>
          <target state="translated">URL.ResolveReference</target>
        </trans-unit>
        <trans-unit id="aae15178969446ff357ff699287cc769e108c1ee" translate="yes" xml:space="preserve">
          <source>URL.String</source>
          <target state="translated">URL.String</target>
        </trans-unit>
        <trans-unit id="ce84e8c5399c507871045bd05a22f805d2c4f2bd" translate="yes" xml:space="preserve">
          <source>URL.UnmarshalBinary</source>
          <target state="translated">URL.UnmarshalBinary</target>
        </trans-unit>
        <trans-unit id="ac64d1ff5ad8c8e979a983967383931627c1db93" translate="yes" xml:space="preserve">
          <source>URLEncoding is the alternate base64 encoding defined in RFC 4648. It is typically used in URLs and file names.</source>
          <target state="translated">URLEncoding은 RFC 4648에 정의 된 대체 base64 인코딩입니다. 일반적으로 URL 및 파일 이름에 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="c9df7bde57a8aa1d95e4f472d843c333da35563f" translate="yes" xml:space="preserve">
          <source>URLQueryEscaper returns the escaped value of the textual representation of its arguments in a form suitable for embedding in a URL query.</source>
          <target state="translated">URLQueryEscaper는 인수의 텍스트 표현에서 이스케이프 된 값을 URL 쿼리에 포함하기에 적합한 형식으로 반환합니다.</target>
        </trans-unit>
        <trans-unit id="f75c8002cbe8f09b52b12100920f39a5c64e72ab" translate="yes" xml:space="preserve">
          <source>URLs in the comment text are converted into links; if the URL also appears in the words map, the link is taken from the map (if the corresponding map value is the empty string, the URL is not converted into a link).</source>
          <target state="translated">주석 텍스트의 URL은 링크로 변환됩니다. URL이 단어 map에도 나타나는 경우 맵에서 링크를 가져옵니다 (해당 맵 값이 빈 문자열 인 경우 URL은 링크로 변환되지 않음).</target>
        </trans-unit>
        <trans-unit id="66e91d3bfc1c62180f622950dd4b88caee7fb5f3" translate="yes" xml:space="preserve">
          <source>URLs that do not start with a slash after the scheme are interpreted as:</source>
          <target state="translated">구성표 이후에 슬래시로 시작하지 않는 URL은 다음과 같이 해석됩니다.</target>
        </trans-unit>
        <trans-unit id="0809917b6f7b4556e78a9d2c239213f16de1592f" translate="yes" xml:space="preserve">
          <source>UTC represents Universal Coordinated Time (UTC).</source>
          <target state="translated">UTC는 협정 세계시 (UTC)를 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="2910e9336b266393bd7b3bb04c8ff09ab1ad423c" translate="yes" xml:space="preserve">
          <source>UTC returns t with the location set to UTC.</source>
          <target state="translated">UTC는 위치를 UTC로 설정하여 t를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="bd4707cd474a6d0f83da094caeed9e471bb79e5c" translate="yes" xml:space="preserve">
          <source>Uint defines a uint flag with specified name, default value, and usage string. The return value is the address of a uint variable that stores the value of the flag.</source>
          <target state="translated">Uint는 지정된 이름, 기본값 및 사용 문자열로 uint 플래그를 정의합니다. 리턴 값은 플래그 값을 저장하는 uint 변수의 주소입니다.</target>
        </trans-unit>
        <trans-unit id="c10a1c74871016b345bc36d5bdb30897f19968dc" translate="yes" xml:space="preserve">
          <source>Uint returns v's underlying value, as a uint64. It panics if v's Kind is not Uint, Uintptr, Uint8, Uint16, Uint32, or Uint64.</source>
          <target state="translated">Uint는 v의 기본 값을 uint64로 반환합니다. v의 종류가 Uint, Uintptr, Uint8, Uint16, Uint32 또는 Uint64가 아닌 경우 패닉이 발생합니다.</target>
        </trans-unit>
        <trans-unit id="8c727e75a1c262fee3ed280d320bad7f8659ca56" translate="yes" xml:space="preserve">
          <source>Uint32 returns a pseudo-random 32-bit value as a uint32 from the default Source.</source>
          <target state="translated">Uint32는 의사 난수 32 비트 값을 기본 소스에서 uint32로 반환합니다.</target>
        </trans-unit>
        <trans-unit id="e19c9ecfe9082dbf421a298c1c766023a8f7f823" translate="yes" xml:space="preserve">
          <source>Uint32 returns a pseudo-random 32-bit value as a uint32.</source>
          <target state="translated">Uint32는 의사 난수 32 비트 값을 uint32로 반환합니다.</target>
        </trans-unit>
        <trans-unit id="030a2cb864d68ff2aba5fa883929c569cc36b65c" translate="yes" xml:space="preserve">
          <source>Uint64 defines a uint64 flag with specified name, default value, and usage string. The return value is the address of a uint64 variable that stores the value of the flag.</source>
          <target state="translated">Uint64는 지정된 이름, 기본값 및 사용 문자열로 uint64 플래그를 정의합니다. 리턴 값은 플래그 값을 저장하는 uint64 변수의 주소입니다.</target>
        </trans-unit>
        <trans-unit id="6d3dffebe2bfc2c33c20643972b94062f6925708" translate="yes" xml:space="preserve">
          <source>Uint64 returns a pseudo-random 64-bit value as a uint64 from the default Source.</source>
          <target state="translated">Uint64는 의사 난수 64 비트 값을 기본 소스에서 uint64로 반환합니다.</target>
        </trans-unit>
        <trans-unit id="4324e0d2d9e747146788fb1da362fb5053ac15fe" translate="yes" xml:space="preserve">
          <source>Uint64 returns a pseudo-random 64-bit value as a uint64.</source>
          <target state="translated">Uint64는 의사 난수 64 비트 값을 uint64로 반환합니다.</target>
        </trans-unit>
        <trans-unit id="8f4f108ba23391540c5f57a2d283a1654c92a932" translate="yes" xml:space="preserve">
          <source>Uint64 returns a value drawn from the Zipf distribution described by the Zipf object.</source>
          <target state="translated">Uint64는 Zipf 객체가 설명하는 Zipf 분포에서 가져온 값을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="0e960db65d7bc2609ac63eaaddb18d0ce30fd34e" translate="yes" xml:space="preserve">
          <source>Uint64 returns the uint64 representation of x. If x cannot be represented in a uint64, the result is undefined.</source>
          <target state="translated">Uint64는 x의 uint64 표현을 반환합니다. x를 uint64로 표현할 수 없으면 결과는 정의되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="4059a3fbb04daacbe98a3ac34acbb5b4f0511d79" translate="yes" xml:space="preserve">
          <source>Uint64 returns the unsigned integer resulting from truncating x towards zero. If 0 &amp;lt;= x &amp;lt;= math.MaxUint64, the result is Exact if x is an integer and Below otherwise. The result is (0, Above) for x &amp;lt; 0, and (math.MaxUint64, Below) for x &amp;gt; math.MaxUint64.</source>
          <target state="translated">Uint64는 x를 0으로 자른 결과 부호없는 정수를 반환합니다. 0 &amp;lt;= x &amp;lt;= math.MaxUint64 인 경우 x가 정수이면 결과는 정확하고 그렇지 않으면 아래입니다. 결과는 x &amp;lt;0의 경우 (0, Above)이고 x&amp;gt; math.MaxUint64의 경우 (math.MaxUint64, Below)입니다.</target>
        </trans-unit>
        <trans-unit id="eee8610c675fa51e59aceef9ba15ad48fc3f7656" translate="yes" xml:space="preserve">
          <source>Uint64Val returns the Go uint64 value of x and whether the result is exact; x must be an Int or an Unknown. If the result is not exact, its value is undefined. If x is Unknown, the result is (0, false).</source>
          <target state="translated">Uint64Val은 x의 Go uint64 값과 결과가 정확한지 여부를 반환합니다. x는 Int 또는 Unknown이어야합니다. 결과가 정확하지 않으면 값이 정의되지 않습니다. x가 알 수없는 경우 결과는 (0, false)입니다.</target>
        </trans-unit>
        <trans-unit id="f8a9446572ec072b0dca42654febb328f4183bda" translate="yes" xml:space="preserve">
          <source>Uint64Var defines a uint64 flag with specified name, default value, and usage string. The argument p points to a uint64 variable in which to store the value of the flag.</source>
          <target state="translated">Uint64Var는 지정된 이름, 기본값 및 사용 문자열로 uint64 플래그를 정의합니다. 인수 p는 플래그 값을 저장할 uint64 변수를 가리 킵니다.</target>
        </trans-unit>
        <trans-unit id="496dd0effb0126ef9e845598a59198590bcd043e" translate="yes" xml:space="preserve">
          <source>UintSize is the size of a uint in bits.</source>
          <target state="translated">UintSize는 비트 단위의 uint 크기입니다.</target>
        </trans-unit>
        <trans-unit id="dbe3f8f6ae38a6c86be38b30cc7b136b0e0c8b33" translate="yes" xml:space="preserve">
          <source>UintVar defines a uint flag with specified name, default value, and usage string. The argument p points to a uint variable in which to store the value of the flag.</source>
          <target state="translated">UintVar는 지정된 이름, 기본값 및 사용 문자열로 uint 플래그를 정의합니다. 인수 p는 플래그 값을 저장할 uint 변수를 가리 킵니다.</target>
        </trans-unit>
        <trans-unit id="70e0b7ef4850aca01e0f7f10e5400e6c9147df8c" translate="yes" xml:space="preserve">
          <source>UnaryOp</source>
          <target state="translated">UnaryOp</target>
        </trans-unit>
        <trans-unit id="07e07a445fa30cc6121d05f031b487faccb7d573" translate="yes" xml:space="preserve">
          <source>UnaryOp returns the result of the unary expression op y. The operation must be defined for the operand. If prec &amp;gt; 0 it specifies the ^ (xor) result size in bits. If y is Unknown, the result is Unknown.</source>
          <target state="translated">UnaryOp는 단항 표현식 op y의 결과를 반환합니다. 피연산자에 대한 작업을 정의해야합니다. prec&amp;gt; 0이면 ^ (xor) 결과 크기를 비트 단위로 지정합니다. y가 알 수없는 경우 결과는 알 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="65ac12608f350c5da84519394457136c59d339ec" translate="yes" xml:space="preserve">
          <source>Undefined returns the JavaScript value &quot;undefined&quot;.</source>
          <target state="translated">Undefined는 JavaScript 값 &quot;undefined&quot;를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="9933a40ae911d6dfb846e287c51e34fc4040de25" translate="yes" xml:space="preserve">
          <source>UnescapeString</source>
          <target state="translated">UnescapeString</target>
        </trans-unit>
        <trans-unit id="d8d400b63495a426dfadc8a4f1e5fdcfa4a8e536" translate="yes" xml:space="preserve">
          <source>UnescapeString unescapes entities like &quot;&amp;amp;lt;&quot; to become &quot;&amp;lt;&quot;. It unescapes a larger range of entities than EscapeString escapes. For example, &quot;&amp;amp;aacute;&quot; unescapes to &quot;&amp;aacute;&quot;, as does &quot;&amp;amp;#225;&quot; and &quot;&amp;amp;#xE1;&quot;. UnescapeString(EscapeString(s)) == s always holds, but the converse isn't always true.</source>
          <target state="translated">UnescapeString은 &quot;&amp;amp; lt;&quot;와 같은 엔티티를 이스케이프 해제합니다. &quot;&amp;lt;&quot;가됩니다. EscapeString 이스케이프보다 더 큰 범위의 엔티티를 이스케이프하지 않습니다. 예를 들어 &quot;&amp;amp; aacute;&quot; &quot;&amp;amp; # 225;&quot;와 마찬가지로 &quot;&amp;aacute;&quot;로 이스케이프되지 않습니다. 및 &quot;&amp;amp; # xE1;&quot;. UnescapeString (EscapeString (s)) == s는 항상 유지되지만 대화가 항상 참인 것은 아닙니다.</target>
        </trans-unit>
        <trans-unit id="c698e3c309a2ed8c52f6f41c34c41e2935c68bed" translate="yes" xml:space="preserve">
          <source>Uniform is an infinite-sized Image of uniform color. It implements the color.Color, color.Model, and Image interfaces.</source>
          <target state="translated">균일은 균일 한 색상의 무한 크기 이미지입니다. color.Color, color.Model 및 Image 인터페이스를 구현합니다.</target>
        </trans-unit>
        <trans-unit id="c9b92cda61a2bd5ee7e67c31c67ae298972c3694" translate="yes" xml:space="preserve">
          <source>Union returns the smallest rectangle that contains both r and s.</source>
          <target state="translated">Union은 r과 s를 모두 포함하는 가장 작은 사각형을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="c30c209545f6cf55ee27d591debf698152bcbfd9" translate="yes" xml:space="preserve">
          <source>Unix returns t as a Unix time, the number of seconds elapsed since January 1, 1970 UTC. The result does not depend on the location associated with t.</source>
          <target state="translated">유닉스는 UTC를 1970 년 1 월 1 일 이후 경과 한 초 수인 유닉스 시간으로 t를 반환합니다. 결과는 t와 관련된 위치에 의존하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="8c849502e5926e7f6de51dcd5dae32180a6c8fc5" translate="yes" xml:space="preserve">
          <source>Unix returns the local Time corresponding to the given Unix time, sec seconds and nsec nanoseconds since January 1, 1970 UTC. It is valid to pass nsec outside the range [0, 999999999]. Not all sec values have a corresponding time value. One such value is 1&amp;lt;&amp;lt;63-1 (the largest int64 value).</source>
          <target state="translated">유닉스는 1970 년 1 월 1 일 UTC 이후 지정된 유닉스 시간, 초 및 nsec 나노초에 해당하는 로컬 시간을 반환합니다. nsec를 [0, 999999999] 범위를 벗어나는 것이 유효합니다. 모든 초 값에 해당하는 시간 값이있는 것은 아닙니다. 그러한 값 중 하나는 1 &amp;lt;&amp;lt; 63-1 (가장 큰 int64 값)입니다.</target>
        </trans-unit>
        <trans-unit id="7f49edfe928a8998235ec038d3202681fe6091b3" translate="yes" xml:space="preserve">
          <source>Unix returns ts as the number of seconds and nanoseconds elapsed since the Unix epoch.</source>
          <target state="translated">유닉스는 유닉스 시대 이후 초와 나노초 수로 ts를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="36e051fac71bd9f38c8bee21a4fbf639eb952b84" translate="yes" xml:space="preserve">
          <source>Unix returns tv as the number of seconds and nanoseconds elapsed since the Unix epoch.</source>
          <target state="translated">유닉스는 유닉스 시대 이후 초와 나노초의 수로 tv를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="4d2a03437e4146025835f0a7a6ccd0e75af8c754" translate="yes" xml:space="preserve">
          <source>UnixAddr represents the address of a Unix domain socket end point.</source>
          <target state="translated">UnixAddr은 Unix 도메인 소켓 끝점의 주소를 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="04cdae900c7738c2f31e4e0db5e46a21f1971317" translate="yes" xml:space="preserve">
          <source>UnixConn is an implementation of the Conn interface for connections to Unix domain sockets.</source>
          <target state="translated">UnixConn은 Unix 도메인 소켓에 연결하기위한 Conn 인터페이스의 구현입니다.</target>
        </trans-unit>
        <trans-unit id="fd1ae11b5100fed8de8a53db38bf7aed0bddf628" translate="yes" xml:space="preserve">
          <source>UnixCredentials encodes credentials into a socket control message for sending to another process. This can be used for authentication.</source>
          <target state="translated">UnixCredentials는 다른 프로세스로 전송하기 위해 자격 증명을 소켓 제어 메시지로 인코딩합니다. 인증에 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="aea7fd85f724d84dccda1e26d2c29b04dd2edf2d" translate="yes" xml:space="preserve">
          <source>UnixListener is a Unix domain socket listener. Clients should typically use variables of type Listener instead of assuming Unix domain sockets.</source>
          <target state="translated">UnixListener는 Unix 도메인 소켓 리스너입니다. 클라이언트는 일반적으로 Unix 도메인 소켓을 가정하는 대신 리스너 유형의 변수를 사용해야합니다.</target>
        </trans-unit>
        <trans-unit id="2a27b45fc326b4542c26186dc68da8cc5a7e5d10" translate="yes" xml:space="preserve">
          <source>UnixNano returns t as a Unix time, the number of nanoseconds elapsed since January 1, 1970 UTC. The result is undefined if the Unix time in nanoseconds cannot be represented by an int64 (a date before the year 1678 or after 2262). Note that this means the result of calling UnixNano on the zero Time is undefined. The result does not depend on the location associated with t.</source>
          <target state="translated">UnixNano는 t를 1970 년 1 월 1 일 UTC 이후 경과 된 나노초 수인 유닉스 시간으로 반환합니다. 나노초 단위의 유닉스 시간을 int64 (1678 년 이전 또는 2262 이후)로 표시 할 수없는 경우 결과가 정의되지 않습니다. 이는 제로 시간에 UnixNano를 호출 한 결과가 정의되지 않았 음을 의미합니다. 결과는 t와 관련된 위치에 의존하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="b17a6e6eff6f04c581ee8cd1e56b3e493458a9f8" translate="yes" xml:space="preserve">
          <source>UnixRights encodes a set of open file descriptors into a socket control message for sending to another process.</source>
          <target state="translated">UnixRights는 열려있는 파일 디스크립터 세트를 다른 프로세스로 보내기 위해 소켓 제어 메시지로 인코딩합니다.</target>
        </trans-unit>
        <trans-unit id="dbe53cfcde936dfcaf7c8175938f51e315034103" translate="yes" xml:space="preserve">
          <source>UnknownAuthorityError results when the certificate issuer is unknown</source>
          <target state="translated">인증서 발급자를 알 수없는 경우 UnknownAuthorityError가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="81414e166f7a74fc8a4df3127afc6add584dadf1" translate="yes" xml:space="preserve">
          <source>UnknownFileError represents a failure to find the specific file in the symbol table.</source>
          <target state="translated">UnknownFileError는 기호 테이블에서 특정 파일을 찾지 못했음을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="71d6e61364d65cc6b10f85900b022e3a712387e7" translate="yes" xml:space="preserve">
          <source>UnknownGroupError is returned by LookupGroup when a group cannot be found.</source>
          <target state="translated">그룹을 찾을 수없는 경우 LookupGroup에서 UnknownGroupError가 리턴됩니다.</target>
        </trans-unit>
        <trans-unit id="8395a289704405eac7a12dd0a91f81ec7b638b6b" translate="yes" xml:space="preserve">
          <source>UnknownGroupIdError is returned by LookupGroupId when a group cannot be found.</source>
          <target state="translated">UnknownGroupIdError는 그룹을 찾을 수 없을 때 LookupGroupId에 의해 리턴됩니다.</target>
        </trans-unit>
        <trans-unit id="ea06d94bc0ee6404fba69dbd6d9433ca16ab32bf" translate="yes" xml:space="preserve">
          <source>UnknownLineError represents a failure to map a line to a program counter, either because the line is beyond the bounds of the file or because there is no code on the given line.</source>
          <target state="translated">UnknownLineError는 행이 파일 범위를 벗어나거나 지정된 행에 코드가 없기 때문에 행을 프로그램 카운터에 매핑하지 못했음을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="161a93107711086546bec71b893d5cad7e7be15e" translate="yes" xml:space="preserve">
          <source>UnknownUserError is returned by Lookup when a user cannot be found.</source>
          <target state="translated">UnknownUserError는 사용자를 찾을 수 없을 때 조회에서 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="6017e893f322aa54de196845bc71d4f23b1edfcb" translate="yes" xml:space="preserve">
          <source>UnknownUserIdError is returned by LookupId when a user cannot be found.</source>
          <target state="translated">UnknownUserIdError는 사용자를 찾을 수 없을 때 LookupId에 의해 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="47025f2669ef0e585c9e4472fd182fc3f82a586e" translate="yes" xml:space="preserve">
          <source>Unless an explicit codec is set up, package encoding/gob is used to transport the data.</source>
          <target state="translated">명시 적 코덱이 설정되어 있지 않으면 패키지 인코딩 / gob가 데이터 전송에 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="e7e8c7e799f9b4c265f8eb16ca2467638931db85" translate="yes" xml:space="preserve">
          <source>Unless otherwise noted, these are defined in RFC 7231 section 4.3.</source>
          <target state="translated">달리 명시되지 않는 한, 이들은 RFC 7231 섹션 4.3에 정의되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="ad0d769d8f434903817312e6a1ab62dd81dfa28b" translate="yes" xml:space="preserve">
          <source>Unless specified otherwise, all operations (including setters) that specify a *Float variable for the result (usually via the receiver with the exception of MantExp), round the numeric result according to the precision and rounding mode of the result variable.</source>
          <target state="translated">달리 지정하지 않는 한, 결과에 대해 * Float 변수를 지정하는 모든 조작 (세터 포함) (일반적으로 MantExp를 제외하고 수신자를 통해)은 결과 변수의 정밀도 및 반올림 모드에 따라 숫자 결과를 반올림합니다.</target>
        </trans-unit>
        <trans-unit id="ce1ab5c402bafab7c2f436e8311567b966b147df" translate="yes" xml:space="preserve">
          <source>Unlike in C, it is not valid to advance a pointer just beyond the end of its original allocation:</source>
          <target state="translated">C와는 달리, 원래 할당의 끝을 넘어서 포인터를 진행시키는 것은 유효하지 않습니다 :</target>
        </trans-unit>
        <trans-unit id="522a3a646a834223c2e98bb2c21ff8e76c01dd11" translate="yes" xml:space="preserve">
          <source>Unlike runtime.Callers, the PC values returned should, when passed to the symbolizer function, return the file/line of the call instruction. No additional subtraction is required or appropriate.</source>
          <target state="translated">runtime.Callers와 달리 리턴 된 PC 값은 symbolizer 함수에 전달 될 때 호출 명령의 파일 / 라인을 리턴해야합니다. 추가 뺄셈이 필요하지 않거나 적절하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="406ad3e57d6ca887a28b68d7deb07d96e9cd7dc1" translate="yes" xml:space="preserve">
          <source>Unlike the &quot;system&quot; library call from C and other languages, the os/exec package intentionally does not invoke the system shell and does not expand any glob patterns or handle other expansions, pipelines, or redirections typically done by shells. The package behaves more like C's &quot;exec&quot; family of functions. To expand glob patterns, either call the shell directly, taking care to escape any dangerous input, or use the path/filepath package's Glob function. To expand environment variables, use package os's ExpandEnv.</source>
          <target state="translated">C 및 다른 언어의 &quot;시스템&quot;라이브러리 호출과 달리 os / exec 패키지는 의도적으로 시스템 셸을 호출하지 않으며 글로브 패턴을 확장하거나 일반적으로 셸에서 수행되는 다른 확장, 파이프 라인 또는 리디렉션을 처리하지 않습니다. 패키지는 C의 &quot;exec&quot;기능 군과 유사하게 동작합니다. glob 패턴을 확장하려면 위험한 입력을 피하기 위해 쉘을 직접 호출하거나 path / filepath 패키지의 Glob 함수를 사용하십시오. 환경 변수를 확장하려면 package os의 ExpandEnv를 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="abe91b52586dc5bbb2e6b3566c5e2c39387cbbd6" translate="yes" xml:space="preserve">
          <source>Unlink removes n % r.Len() elements from the ring r, starting at r.Next(). If n % r.Len() == 0, r remains unchanged. The result is the removed subring. r must not be empty.</source>
          <target state="translated">링크 해제는 r.Next ()에서 시작하여 링 r에서 n % r.Len () 요소를 제거합니다. n % r.Len () == 0이면 r은 변경되지 않습니다. 결과는 제거 된 서브 링입니다. r은 비워 둘 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="f1750196ed6e86ab6e565436971490e6b17346e5" translate="yes" xml:space="preserve">
          <source>Unlock unlocks m. It is a run-time error if m is not locked on entry to Unlock.</source>
          <target state="translated">잠금 해제 잠금 해제 m. 잠금 해제 항목에 m이 잠겨 있지 않으면 런타임 오류입니다.</target>
        </trans-unit>
        <trans-unit id="1031b448939f378b7eec7282357fd0c8f02e0dd3" translate="yes" xml:space="preserve">
          <source>Unlock unlocks rw for writing. It is a run-time error if rw is not locked for writing on entry to Unlock.</source>
          <target state="translated">잠금 해제는 쓰기를 위해 rw를 잠금 해제합니다. 잠금 해제 항목에 쓰기 위해 rw가 잠기지 않은 경우 런타임 오류입니다.</target>
        </trans-unit>
        <trans-unit id="2769f111e84de5efeaaffb059d166476e34adffc" translate="yes" xml:space="preserve">
          <source>UnlockOSThread undoes an earlier call to LockOSThread. If this drops the number of active LockOSThread calls on the calling goroutine to zero, it unwires the calling goroutine from its fixed operating system thread. If there are no active LockOSThread calls, this is a no-op.</source>
          <target state="translated">UnlockOSThread는 LockOSThread에 대한 이전 호출을 취소합니다. 이렇게하면 호출 고 루틴의 활성 LockOSThread 호출 수가 0으로 떨어지면 고정 운영 체제 스레드에서 호출 고 루틴의 연결이 해제됩니다. 활성화 된 LockOSThread 호출이없는 경우 이는 작동하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="c0c55cc87781bbcbbe014b61cd39f339918efe82" translate="yes" xml:space="preserve">
          <source>Unmarshal</source>
          <target state="translated">Unmarshal</target>
        </trans-unit>
        <trans-unit id="b902b427877022323b14bf2942e7b4318af381ef" translate="yes" xml:space="preserve">
          <source>Unmarshal converts a point, serialized by Marshal, into an x, y pair. It is an error if the point is not in uncompressed form or is not on the curve. On error, x = nil.</source>
          <target state="translated">비 정렬 화는 마셜이 직렬화 한 점을 x, y 쌍으로 변환합니다. 점이 압축되지 않은 형태가 아니거나 곡선 위에 있지 않으면 오류입니다. 오류가 발생하면 x = nil입니다.</target>
        </trans-unit>
        <trans-unit id="05d9d3d65b2b20105c2330ab2953dfbf47f42b20" translate="yes" xml:space="preserve">
          <source>Unmarshal maps an XML element or attribute value to a bool by setting it to the boolean value represented by the string. Whitespace is trimmed and ignored.</source>
          <target state="translated">비 정렬 화는 XML 요소 또는 속성 값을 문자열이 나타내는 부울 값으로 설정하여 부울에 맵핑합니다. 공백이 잘리고 무시됩니다.</target>
        </trans-unit>
        <trans-unit id="a20ffd00f170a26037fda94503e504e8f14a2140" translate="yes" xml:space="preserve">
          <source>Unmarshal maps an XML element or attribute value to a slice by extending the length of the slice and mapping the element or attribute to the newly created value.</source>
          <target state="translated">비 정렬 화는 슬라이스의 길이를 확장하고 요소 또는 속성을 새로 작성된 값에 맵핑하여 XML 요소 또는 속성 값을 슬라이스에 맵핑합니다.</target>
        </trans-unit>
        <trans-unit id="f49e594c7cd50f427b1321468c3f00b6805b3bc7" translate="yes" xml:space="preserve">
          <source>Unmarshal maps an XML element or attribute value to an integer or floating-point field by setting the field to the result of interpreting the string value in decimal. There is no check for overflow. Whitespace is trimmed and ignored.</source>
          <target state="translated">비 정렬 화는 필드를 문자열 값을 10 진수로 해석 한 결과로 설정하여 XML 요소 또는 속성 값을 정수 또는 부동 소수점 필드에 맵핑합니다. 오버 플로우 확인이 없습니다. 공백이 잘리고 무시됩니다.</target>
        </trans-unit>
        <trans-unit id="e3d47c5ca4b3a002e5a1a94281405e13a887e601" translate="yes" xml:space="preserve">
          <source>Unmarshal maps an XML element to a Name by recording the element name.</source>
          <target state="translated">비 정렬 화는 요소 이름을 기록하여 XML 요소를 이름에 맵핑합니다.</target>
        </trans-unit>
        <trans-unit id="96b027c2d930b698a1ed10b0bb721de215ae272f" translate="yes" xml:space="preserve">
          <source>Unmarshal maps an XML element to a pointer by setting the pointer to a freshly allocated value and then mapping the element to that value.</source>
          <target state="translated">비 정렬 화는 포인터를 새로 할당 된 값으로 설정 한 다음 요소를 해당 값에 매핑하여 XML 요소를 포인터에 매핑합니다.</target>
        </trans-unit>
        <trans-unit id="6674f1401888e867e969567800411704118b6e15" translate="yes" xml:space="preserve">
          <source>Unmarshal maps an XML element to a string or []byte by saving the concatenation of that element's character data in the string or []byte. The saved []byte is never nil.</source>
          <target state="translated">비 정렬 화는 해당 요소의 문자 데이터 연결을 문자열 또는 [] 바이트에 저장하여 XML 요소를 문자열 또는 [] 바이트에 맵핑합니다. 저장된 [] 바이트는 절대로 0이 아닙니다.</target>
        </trans-unit>
        <trans-unit id="a09403355ff68d791492810d3a6fdc52e5bc5f23" translate="yes" xml:space="preserve">
          <source>Unmarshal maps an XML element to a struct using the following rules. In the rules, the tag of a field refers to the value associated with the key 'xml' in the struct field's tag (see the example above).</source>
          <target state="translated">비 정렬 화는 다음 규칙을 사용하여 XML 요소를 구조체에 매핑합니다. 규칙에서 필드의 태그는 struct 필드의 태그에서 'xml'키와 연관된 값을 나타냅니다 (위 예 참조).</target>
        </trans-unit>
        <trans-unit id="252b3357e8880736b5df5514f3757c07707118ae" translate="yes" xml:space="preserve">
          <source>Unmarshal maps an attribute value to a string or []byte by saving the value in the string or slice.</source>
          <target state="translated">비 정렬 화는 문자열 또는 슬라이스에 값을 저장하여 속성 값을 문자열 또는 [] 바이트에 맵핑합니다.</target>
        </trans-unit>
        <trans-unit id="bb18922b79397b807a3d5909559848bfe9436488" translate="yes" xml:space="preserve">
          <source>Unmarshal maps an attribute value to an Attr by saving the attribute, including its name, in the Attr.</source>
          <target state="translated">비 정렬 화는 속성을 포함하여 속성을 속성 값에 저장하여 속성 값을 속성 값에 맵핑합니다.</target>
        </trans-unit>
        <trans-unit id="daa56a09ffbf4f0b35b7c340fa9c8ae81aa1dac5" translate="yes" xml:space="preserve">
          <source>Unmarshal parses the DER-encoded ASN.1 data structure b and uses the reflect package to fill in an arbitrary value pointed at by val. Because Unmarshal uses the reflect package, the structs being written to must use upper case field names.</source>
          <target state="translated">비 정렬 화는 DER 인코딩 된 ASN.1 데이터 구조 b를 구문 분석하고 val이 가리키는 임의의 값을 채우기 위해 리플렉션 패키지를 사용합니다. Unmarshal은 reflect 패키지를 사용하므로 작성되는 구조체는 대문자 필드 이름을 사용해야합니다.</target>
        </trans-unit>
        <trans-unit id="6a9e198e98aaf9144ec031242893dd0ad5675a2b" translate="yes" xml:space="preserve">
          <source>Unmarshal parses the JSON-encoded data and stores the result in the value pointed to by v. If v is nil or not a pointer, Unmarshal returns an InvalidUnmarshalError.</source>
          <target state="translated">비 정렬은 JSON으로 인코딩 된 데이터를 구문 분석하고 결과를 v가 가리키는 값으로 저장합니다. v가 nil이거나 포인터가 아닌 경우 Unmarshal은 InvalidUnmarshalError를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="ed1d87c314d03ac8a80eec05352fd3a2e828f6fd" translate="yes" xml:space="preserve">
          <source>Unmarshal parses the XML-encoded data and stores the result in the value pointed to by v, which must be an arbitrary struct, slice, or string. Well-formed data that does not fit into v is discarded.</source>
          <target state="translated">비 정렬 화는 XML로 인코딩 된 데이터를 구문 분석하고 그 결과를 v가 가리키는 값으로 저장합니다.이 값은 임의의 구조체, 슬라이스 또는 문자열이어야합니다. v에 맞지 않는 올바른 형식의 데이터는 삭제됩니다.</target>
        </trans-unit>
        <trans-unit id="40f5f3bf6806f78bc75f412c5c5def4697b027f5" translate="yes" xml:space="preserve">
          <source>Unmarshal uses the inverse of the encodings that Marshal uses, allocating maps, slices, and pointers as necessary, with the following additional rules:</source>
          <target state="translated">Unmarshal은 다음 추가 규칙과 함께 필요에 따라 Marshal이 사용하는 인코딩의 역수를 사용하여 맵, 슬라이스 및 포인터를 할당합니다.</target>
        </trans-unit>
        <trans-unit id="8a48a17f3248cfe923e11a8bf58b4b7fb9c77d34" translate="yes" xml:space="preserve">
          <source>UnmarshalBinary implements the encoding.BinaryUnmarshaler interface.</source>
          <target state="translated">UnmarshalBinary는 encoding.BinaryUnmarshaler 인터페이스를 구현합니다.</target>
        </trans-unit>
        <trans-unit id="3e8a767165b3da81fab334a0479c29a17b19b26e" translate="yes" xml:space="preserve">
          <source>UnmarshalBinary must be able to decode the form generated by MarshalBinary. UnmarshalBinary must copy the data if it wishes to retain the data after returning.</source>
          <target state="translated">UnmarshalBinary는 MarshalBinary에 의해 생성 된 형식을 해독 할 수 있어야합니다. UnmarshalBinary는 반환 후 데이터를 유지하려면 데이터를 복사해야합니다.</target>
        </trans-unit>
        <trans-unit id="a1f2034d1f5318f262d82d2c3d3d1a1f573ff376" translate="yes" xml:space="preserve">
          <source>UnmarshalJSON implements the json.Unmarshaler interface.</source>
          <target state="translated">UnmarshalJSON은 json.Unmarshaler 인터페이스를 구현합니다.</target>
        </trans-unit>
        <trans-unit id="ac481b848955fbdb07ec4ed8b1f2094acec90508" translate="yes" xml:space="preserve">
          <source>UnmarshalJSON implements the json.Unmarshaler interface. The time is expected to be a quoted string in RFC 3339 format.</source>
          <target state="translated">UnmarshalJSON은 json.Unmarshaler 인터페이스를 구현합니다. 시간은 RFC 3339 형식의 인용 문자열이어야합니다.</target>
        </trans-unit>
        <trans-unit id="501d2e87e0671202c95a53d1a0ea534ac74ed463" translate="yes" xml:space="preserve">
          <source>UnmarshalJSON sets *m to a copy of data.</source>
          <target state="translated">UnmarshalJSON은 * m을 데이터 사본으로 설정합니다.</target>
        </trans-unit>
        <trans-unit id="766c1d65184cba1147b7a3545fa3391dee2740d7" translate="yes" xml:space="preserve">
          <source>UnmarshalText implements the encoding.TextUnmarshaler interface.</source>
          <target state="translated">UnmarshalText는 encoding.TextUnmarshaler 인터페이스를 구현합니다.</target>
        </trans-unit>
        <trans-unit id="85ec5d5725d7fc8b15d01b424436803971c310f0" translate="yes" xml:space="preserve">
          <source>UnmarshalText implements the encoding.TextUnmarshaler interface. The IP address is expected in a form accepted by ParseIP.</source>
          <target state="translated">UnmarshalText는 encoding.TextUnmarshaler 인터페이스를 구현합니다. IP 주소는 ParseIP가 승인 한 형식으로되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="131593f7a0c50a040c83c26b3def1697240de177" translate="yes" xml:space="preserve">
          <source>UnmarshalText implements the encoding.TextUnmarshaler interface. The result is rounded per the precision and rounding mode of z. If z's precision is 0, it is changed to 64 before rounding takes effect.</source>
          <target state="translated">UnmarshalText는 encoding.TextUnmarshaler 인터페이스를 구현합니다. 결과는 z의 정밀도 및 반올림 모드에 따라 반올림됩니다. z의 정밀도가 0이면 반올림이 적용되기 전에 64로 변경됩니다.</target>
        </trans-unit>
        <trans-unit id="7b15f389f52fa3ed23e4bbf98f836b42c06e5eba" translate="yes" xml:space="preserve">
          <source>UnmarshalText implements the encoding.TextUnmarshaler interface. The time is expected to be in RFC 3339 format.</source>
          <target state="translated">UnmarshalText는 encoding.TextUnmarshaler 인터페이스를 구현합니다. 시간은 RFC 3339 형식이어야합니다.</target>
        </trans-unit>
        <trans-unit id="6b7f1ab4fc569112930c20562985da8185544c87" translate="yes" xml:space="preserve">
          <source>UnmarshalText must be able to decode the form generated by MarshalText. UnmarshalText must copy the text if it wishes to retain the text after returning.</source>
          <target state="translated">UnmarshalText는 MarshalText에 의해 생성 된 양식을 디코딩 할 수 있어야합니다. UnmarshalText는 반환 후 텍스트를 유지하려면 텍스트를 복사해야합니다.</target>
        </trans-unit>
        <trans-unit id="bd65d49d42bce927940aedf915c377e4dd09e40d" translate="yes" xml:space="preserve">
          <source>UnmarshalWithParams allows field parameters to be specified for the top-level element. The form of the params is the same as the field tags.</source>
          <target state="translated">UnmarshalWithParams를 사용하면 최상위 요소에 필드 매개 변수를 지정할 수 있습니다. 매개 변수의 형식은 필드 태그와 동일합니다.</target>
        </trans-unit>
        <trans-unit id="b3bf6c68384d3fb37cb6c7555cff99e7fce3bb41" translate="yes" xml:space="preserve">
          <source>UnmarshalXML decodes a single XML element beginning with the given start element. If it returns an error, the outer call to Unmarshal stops and returns that error. UnmarshalXML must consume exactly one XML element. One common implementation strategy is to unmarshal into a separate value with a layout matching the expected XML using d.DecodeElement, and then to copy the data from that value into the receiver. Another common strategy is to use d.Token to process the XML object one token at a time. UnmarshalXML may not use d.RawToken.</source>
          <target state="translated">UnmarshalXML은 주어진 시작 요소로 시작하는 단일 XML 요소를 디코딩합니다. 오류가 반환되면 Unmarshal에 대한 외부 호출이 중지되고 해당 오류가 반환됩니다. UnmarshalXML은 정확히 하나의 XML 요소를 사용해야합니다. 일반적인 구현 전략 중 하나는 d.DecodeElement를 사용하여 예상되는 XML과 일치하는 레이아웃으로 별도의 값으로 마샬링 해제 한 다음 해당 값의 데이터를 수신자로 복사하는 것입니다. 또 다른 일반적인 전략은 d.Token을 사용하여 한 번에 하나의 토큰으로 XML 객체를 처리하는 것입니다. UnmarshalXML은 d.RawToken을 사용할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="acecbda4c97cb520576b3b10bc8d83fa35017c1a" translate="yes" xml:space="preserve">
          <source>UnmarshalXMLAttr decodes a single XML attribute. If it returns an error, the outer call to Unmarshal stops and returns that error. UnmarshalXMLAttr is used only for struct fields with the &quot;attr&quot; option in the field tag.</source>
          <target state="translated">UnmarshalXMLAttr은 단일 XML 속성을 디코딩합니다. 오류가 반환되면 Unmarshal에 대한 외부 호출이 중지되고 해당 오류가 반환됩니다. UnmarshalXMLAttr은 필드 태그에 &quot;attr&quot;옵션이있는 구조체 필드에만 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="74aa3bc85e3cd4c389b5c2ee32e0f9e728ff011a" translate="yes" xml:space="preserve">
          <source>Unmarshaler is the interface implemented by objects that can unmarshal an XML element description of themselves.</source>
          <target state="translated">Unmarshaler는 XML 요소 설명을 언 마샬링 할 수있는 객체로 구현 된 인터페이스입니다.</target>
        </trans-unit>
        <trans-unit id="da8c67afda9119d4c5ae65e92c29582ea2cf5d56" translate="yes" xml:space="preserve">
          <source>Unmarshaler is the interface implemented by types that can unmarshal a JSON description of themselves. The input can be assumed to be a valid encoding of a JSON value. UnmarshalJSON must copy the JSON data if it wishes to retain the data after returning.</source>
          <target state="translated">Unmarshaler는 JSON 설명을 언 마샬링 할 수있는 유형으로 구현 된 인터페이스입니다. 입력은 JSON 값의 유효한 인코딩으로 가정 할 수 있습니다. UnmarshalJSON은 반환 후 데이터를 유지하려면 JSON 데이터를 복사해야합니다.</target>
        </trans-unit>
        <trans-unit id="53e6478e1491aec13688a3a1ab544532e2362899" translate="yes" xml:space="preserve">
          <source>UnmarshalerAttr is the interface implemented by objects that can unmarshal an XML attribute description of themselves.</source>
          <target state="translated">UnmarshalerAttr은 자신에 대한 XML 속성 설명을 언 마샬링 할 수있는 객체로 구현 된 인터페이스입니다.</target>
        </trans-unit>
        <trans-unit id="3db9a5e29909b34e2551d8477bb97dce0e5cc013" translate="yes" xml:space="preserve">
          <source>Unquote</source>
          <target state="translated">Unquote</target>
        </trans-unit>
        <trans-unit id="d3b6eaa5a8adda6c17843b82fa332f2940b5c172" translate="yes" xml:space="preserve">
          <source>Unquote and UnquoteChar unquote Go string and rune literals.</source>
          <target state="translated">Unquote 및 UnquoteChar는 Go 문자열 및 룬 리터럴을 인용 해제합니다.</target>
        </trans-unit>
        <trans-unit id="eb183728a78695573a325619f75443a862dbd0b9" translate="yes" xml:space="preserve">
          <source>Unquote interprets s as a single-quoted, double-quoted, or backquoted Go string literal, returning the string value that s quotes. (If s is single-quoted, it would be a Go character literal; Unquote returns the corresponding one-character string.)</source>
          <target state="translated">Unquote는 s를 작은 따옴표, 큰 따옴표 또는 backquoted Go 문자열 리터럴로 해석하여 따옴표로 묶은 문자열 값을 반환합니다. s가 작은 따옴표로 묶인 경우 Go 문자 리터럴이되고 Unquote는 해당하는 한 문자 문자열을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="944cb633773df2e1ec790dd961a8146fba14fec2" translate="yes" xml:space="preserve">
          <source>UnquoteChar</source>
          <target state="translated">UnquoteChar</target>
        </trans-unit>
        <trans-unit id="29375f10dc5a5623870f8be238ab4c2e02bc8067" translate="yes" xml:space="preserve">
          <source>UnquoteChar decodes the first character or byte in the escaped string or character literal represented by the string s. It returns four values:</source>
          <target state="translated">UnquoteChar는 이스케이프 된 문자열 또는 문자열 s로 표시되는 문자 리터럴의 첫 번째 문자 또는 바이트를 디코딩합니다. 네 가지 값을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="b53dd6b78670edea47b93cdb0a942d08f61ad422" translate="yes" xml:space="preserve">
          <source>UnquoteUsage extracts a back-quoted name from the usage string for a flag and returns it and the un-quoted usage. Given &quot;a `name` to show&quot; it returns (&quot;name&quot;, &quot;a name to show&quot;). If there are no back quotes, the name is an educated guess of the type of the flag's value, or the empty string if the flag is boolean.</source>
          <target state="translated">UnquoteUsage는 플래그의 사용법 문자열에서 역 인용 된 이름을 추출하여 인용되지 않은 사용법을 리턴합니다. &quot;표시 할 이름&quot;이 주어지면 ( &quot;이름&quot;, &quot;표시 할 이름&quot;)을 반환합니다. 역 따옴표가 없으면 이름은 플래그 값의 유형에 대한 교육 된 추측이거나 플래그가 부울 인 경우 빈 문자열입니다.</target>
        </trans-unit>
        <trans-unit id="31604e0bbb76d839a9e20bc3ad471c203d67835a" translate="yes" xml:space="preserve">
          <source>UnreadByte causes the next call to ReadByte to return the same byte as the previous call to ReadByte. It may be an error to call UnreadByte twice without an intervening call to ReadByte.</source>
          <target state="translated">UnreadByte는 다음 ReadByte 호출이 이전 ReadRead 호출과 동일한 바이트를 반환하게합니다. ReadByte에 대한 중간 호출없이 UnreadByte를 두 번 호출하면 오류가 발생할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f50817f3bd6d2c35e72fde2b0a932fd55a8206aa" translate="yes" xml:space="preserve">
          <source>UnreadByte complements ReadByte in implementing the io.ByteScanner interface.</source>
          <target state="translated">UnreadByte는 io.ByteScanner 인터페이스 구현에서 ReadByte를 보완합니다.</target>
        </trans-unit>
        <trans-unit id="77c7dde06491fe4b9339041eb3796382445874b6" translate="yes" xml:space="preserve">
          <source>UnreadByte returns an error if the most recent method called on the Reader was not a read operation. Notably, Peek is not considered a read operation.</source>
          <target state="translated">Reader에서 가장 최근에 호출 된 메서드가 읽기 작업이 아닌 경우 UnreadByte는 오류를 반환합니다. 특히 Peek는 읽기 작업으로 간주되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="85bb36da753f37d1b461fc793f6153ef59c80214" translate="yes" xml:space="preserve">
          <source>UnreadByte unreads the last byte returned by the most recent successful read operation that read at least one byte. If a write has happened since the last read, if the last read returned an error, or if the read read zero bytes, UnreadByte returns an error.</source>
          <target state="translated">UnreadByte는 적어도 하나의 바이트를 읽는 가장 최근의 성공적인 읽기 작업에서 반환 된 마지막 바이트를 읽습니다. 마지막 읽기 이후에 쓰기가 발생한 경우, 마지막 읽기가 오류를 반환 한 경우 또는 읽기 읽기가 0 바이트 인 경우 UnreadByte는 오류를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="965a6610c5d757c591de2c22877d96263eb8aa9d" translate="yes" xml:space="preserve">
          <source>UnreadByte unreads the last byte. Only the most recently read byte can be unread.</source>
          <target state="translated">UnreadByte는 마지막 바이트를 읽습니다. 가장 최근에 읽은 바이트 만 읽을 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="4b29ee18a300641e642a50770d2b768bae903a75" translate="yes" xml:space="preserve">
          <source>UnreadRune causes the next call to ReadRune to return the same rune as the previous call to ReadRune. It may be an error to call UnreadRune twice without an intervening call to ReadRune.</source>
          <target state="translated">UnreadRune은 ReadRune에 대한 다음 호출이 이전에 ReadRune에 대한 호출과 동일한 룬을 리턴하게합니다. ReadRune에 대한 중간 호출없이 UnreadRune을 두 번 호출하면 오류가 발생할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="53822d24e97f8bde421daa61dcb508cacfde9d9a" translate="yes" xml:space="preserve">
          <source>UnreadRune complements ReadRune in implementing the io.RuneScanner interface.</source>
          <target state="translated">UnreadRune은 io.RuneScanner 인터페이스 구현에서 ReadRune을 보완합니다.</target>
        </trans-unit>
        <trans-unit id="a4e42f86f3f39d57a5422eae590b939a777bcf43" translate="yes" xml:space="preserve">
          <source>UnreadRune unreads the last rune returned by ReadRune. If the most recent read or write operation on the buffer was not a successful ReadRune, UnreadRune returns an error. (In this regard it is stricter than UnreadByte, which will unread the last byte from any read operation.)</source>
          <target state="translated">UnreadRune은 ReadRune에서 반환 한 마지막 룬을 읽습니다. 버퍼에서 가장 최근의 읽기 또는 쓰기 작업이 성공적인 ReadRune이 아닌 경우 UnreadRune은 오류를 반환합니다. (이 점에서 UnreadByte보다 엄격하여 모든 읽기 작업에서 마지막 바이트를 읽지 않습니다.)</target>
        </trans-unit>
        <trans-unit id="19847ace49c568ee229c8734fba08cf124cc864f" translate="yes" xml:space="preserve">
          <source>UnreadRune unreads the last rune. If the most recent method called on the Reader was not a ReadRune, UnreadRune returns an error. (In this regard it is stricter than UnreadByte, which will unread the last byte from any read operation.)</source>
          <target state="translated">UnreadRune은 마지막 룬을 읽습니다. Reader에서 가장 최근에 호출 된 메소드가 ReadRune이 아닌 경우 UnreadRune은 오류를 리턴합니다. (이 점에서 UnreadByte보다 엄격하여 모든 읽기 작업에서 마지막 바이트를 읽지 않습니다.)</target>
        </trans-unit>
        <trans-unit id="50c3f847c58ba55e1737c9ae778e9a6278576b57" translate="yes" xml:space="preserve">
          <source>UnsafeAddr returns a pointer to v's data. It is for advanced clients that also import the &quot;unsafe&quot; package. It panics if v is not addressable.</source>
          <target state="translated">UnsafeAddr는 v의 데이터에 대한 포인터를 반환합니다. &quot;안전하지 않은&quot;패키지를 가져 오는 것은 고급 클라이언트를위한 것입니다. v를 처리 할 수없는 경우 패닉 상태가됩니다.</target>
        </trans-unit>
        <trans-unit id="504ce26fbf37c2ede64fba6d4661638e260a1239" translate="yes" xml:space="preserve">
          <source>Unsetenv</source>
          <target state="translated">Unsetenv</target>
        </trans-unit>
        <trans-unit id="182ea105f6e57aa2c2130dff922916a82bfc3855" translate="yes" xml:space="preserve">
          <source>Unsetenv unsets a single environment variable.</source>
          <target state="translated">Unsetenv는 단일 환경 변수를 설정 해제합니다.</target>
        </trans-unit>
        <trans-unit id="5d092e34b5869cce62568374e8b69ed2285d4b5a" translate="yes" xml:space="preserve">
          <source>UnsupportedTypeError is returned when Marshal encounters a type that cannot be converted into XML.</source>
          <target state="translated">Marshal에서 XML로 변환 할 수없는 형식이 발견되면 UnsupportedTypeError가 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="e92f4283009858bf9a4050cedd8fe684e6e6d055" translate="yes" xml:space="preserve">
          <source>Until returns the duration until t. It is shorthand for t.Sub(time.Now()).</source>
          <target state="translated">까지 t까지 지속 시간을 반환합니다. t.Sub (time.Now ())의 약어입니다.</target>
        </trans-unit>
        <trans-unit id="90df4c2aff351c99774ec32df813be4f64cfabcd" translate="yes" xml:space="preserve">
          <source>Unwrap returns the result of calling the Unwrap method on err, if err's type contains an Unwrap method returning error. Otherwise, Unwrap returns nil.</source>
          <target state="translated">err의 유형에 오류를 리턴하는 Unwrap 메소드가 포함 된 경우 Unwrap은 err에서 Unwrap 메소드를 호출 한 결과를 리턴합니다. 그렇지 않으면 Unwrap은 nil을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="2facf8e427018a05d97ad6fa738413f526dc52de" translate="yes" xml:space="preserve">
          <source>Unwrap unpacks wrapped errors. If its argument's type has an Unwrap method, it calls the method once. Otherwise, it returns nil.</source>
          <target state="translated">랩 해제는 랩핑 된 오류를 언팩합니다. 인수 유형에 Unwrap 메소드가 있으면 메소드를 한 번 호출합니다. 그렇지 않으면 nil을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="2a313ddb07d29b1265d5875102d8b2f23477d34a" translate="yes" xml:space="preserve">
          <source>Update replaces an old node in the comment map with the new node and returns the new node. Comments that were associated with the old node are associated with the new node.</source>
          <target state="translated">업데이트는 주석 맵의 이전 노드를 새 노드로 바꾸고 새 노드를 반환합니다. 이전 노드와 연관된 주석은 새 노드와 연관됩니다.</target>
        </trans-unit>
        <trans-unit id="edb9e0c28d17431f4e5d015de98ef6d3ddc2e66d" translate="yes" xml:space="preserve">
          <source>Update returns the result of adding the bytes in p to the crc.</source>
          <target state="translated">Update는 p의 바이트를 crc에 추가 한 결과를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="0bb18642b70b9f8a9c12ccf39487328f306b8e19" translate="yes" xml:space="preserve">
          <source>Usage</source>
          <target state="translated">Usage</target>
        </trans-unit>
        <trans-unit id="cec856deaea9fb4090c73c99e87c26b997d6e715" translate="yes" xml:space="preserve">
          <source>Usage prints a usage message documenting all defined command-line flags to CommandLine's output, which by default is os.Stderr. It is called when an error occurs while parsing flags. The function is a variable that may be changed to point to a custom function. By default it prints a simple header and calls PrintDefaults; for details about the format of the output and how to control it, see the documentation for PrintDefaults. Custom usage functions may choose to exit the program; by default exiting happens anyway as the command line's error handling strategy is set to ExitOnError.</source>
          <target state="translated">Usage는 정의 된 모든 명령 줄 플래그를 CommandLine의 출력 (기본적으로 os.Stderr)에 기록하는 사용 메시지를 인쇄합니다. 플래그를 구문 분석하는 동안 오류가 발생하면 호출됩니다. 함수는 사용자 정의 함수를 가리 키도록 변경 될 수있는 변수입니다. 기본적으로 간단한 헤더를 인쇄하고 PrintDefaults를 호출합니다. 출력 형식 및 제어 방법에 대한 자세한 내용은 PrintDefaults 설명서를 참조하십시오. 사용자 정의 사용 기능은 프로그램을 종료하도록 선택할 수 있습니다. 명령 행의 오류 처리 전략이 ExitOnError로 설정되어 있으면 기본적으로 종료가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="08b2986bb9311484289ed77e8cb011bc1a1a4415" translate="yes" xml:space="preserve">
          <source>Use GoTokens to configure the Scanner such that it accepts all Go literal tokens including Go identifiers. Comments will be skipped.</source>
          <target state="translated">Go 식별자를 포함하여 모든 Go 리터럴 토큰을 허용하도록 GoTokens를 사용하여 검사기를 구성하십시오. 댓글을 건너 뜁니다.</target>
        </trans-unit>
        <trans-unit id="e7059998d0ef4d38492eb586594b1a7f2fda5597" translate="yes" xml:space="preserve">
          <source>Use a Scanner to implement a simple word-count utility by scanning the input as a sequence of space-delimited tokens.</source>
          <target state="translated">스캐너를 사용하여 공백으로 구분 된 일련의 토큰으로 입력을 스캔하여 간단한 단어 수 유틸리티를 구현하십시오.</target>
        </trans-unit>
        <trans-unit id="c7ed138fa83b46f7078f3eba45cc612903e73703" translate="yes" xml:space="preserve">
          <source>Use a Scanner with a custom split function (built by wrapping ScanWords) to validate 32-bit decimal input.</source>
          <target state="translated">32 비트 10 진수 입력의 유효성을 검사하려면 사용자 지정 분할 기능 (ScanWord를 래핑하여 구축)이있는 스캐너를 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="a131c39c2cc3965eeb7903a72d441b0e6edc8b39" translate="yes" xml:space="preserve">
          <source>Use a Scanner with a custom split function to parse a comma-separated list with an empty final value.</source>
          <target state="translated">사용자 정의 분할 기능이있는 스캐너를 사용하여 쉼표로 구분 된 목록을 빈 최종 값으로 구문 분석하십시오.</target>
        </trans-unit>
        <trans-unit id="3fe5cc9def42296a11d7d9a0af9fc8ea7342706f" translate="yes" xml:space="preserve">
          <source>Use context Values only for request-scoped data that transits processes and APIs, not for passing optional parameters to functions.</source>
          <target state="translated">선택적 매개 변수를 함수에 전달하는 것이 아니라 프로세스 및 API를 전송하는 요청 범위 데이터에만 컨텍스트 값을 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="b7726ad2d6a51eae4064f8abdd4f91a30451b9da" translate="yes" xml:space="preserve">
          <source>Use of this type presents a security risk: the encapsulated content should come from a trusted source, as it will be included verbatim in the template output.</source>
          <target state="translated">이 유형을 사용하면 보안 위험이 발생합니다. 캡슐화 된 콘텐츠는 템플릿 출력에 그대로 포함되므로 신뢰할 수있는 소스에서 가져와야합니다.</target>
        </trans-unit>
        <trans-unit id="34a9c66123dc40ac60f0472d60867161abcd1901" translate="yes" xml:space="preserve">
          <source>UseNumber causes the Decoder to unmarshal a number into an interface{} as a Number instead of as a float64.</source>
          <target state="translated">UseNumber는 디코더가 float64 대신 Number로 인터페이스 {}에서 숫자를 비 정렬 화합니다.</target>
        </trans-unit>
        <trans-unit id="b20930a62f52b49ee0781be625003d945b67da4b" translate="yes" xml:space="preserve">
          <source>User annotation</source>
          <target state="translated">사용자 주석</target>
        </trans-unit>
        <trans-unit id="fc3da515c7dc35d47639ea550f79310b8bc9a78e" translate="yes" xml:space="preserve">
          <source>User represents a user account.</source>
          <target state="translated">사용자는 사용자 계정을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="d2b201b196f2c09ea10aa903c6f2d9d3642adbdc" translate="yes" xml:space="preserve">
          <source>User returns a Userinfo containing the provided username and no password set.</source>
          <target state="translated">사용자는 제공된 사용자 이름을 포함하고 암호를 설정하지 않은 Userinfo를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="68b7ed6f3fe5a5fff91e1492620a3db521e39f64" translate="yes" xml:space="preserve">
          <source>UserAgent returns the client's User-Agent, if sent in the request.</source>
          <target state="translated">UserAgent는 요청에서 전송 된 경우 클라이언트의 User-Agent를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="4ea06ed977eda51c2aa11c6b438af4cabec784b4" translate="yes" xml:space="preserve">
          <source>UserCacheDir returns the default root directory to use for user-specific cached data. Users should create their own application-specific subdirectory within this one and use that.</source>
          <target state="translated">UserCacheDir은 사용자 별 캐시 데이터에 사용할 기본 루트 디렉토리를 반환합니다. 사용자는이 디렉토리 내에 고유 한 응용 프로그램 특정 서브 디렉토리를 작성하여 사용해야합니다.</target>
        </trans-unit>
        <trans-unit id="a2ed520c964d93e9ec6ba0898145eda2b4839b40" translate="yes" xml:space="preserve">
          <source>UserConfigDir returns the default root directory to use for user-specific configuration data. Users should create their own application-specific subdirectory within this one and use that.</source>
          <target state="translated">UserConfigDir은 사용자 별 구성 데이터에 사용할 기본 루트 디렉토리를 반환합니다. 사용자는이 디렉토리 내에 고유 한 응용 프로그램 특정 서브 디렉토리를 작성하여 사용해야합니다.</target>
        </trans-unit>
        <trans-unit id="28c75db53e54c3bd7c5a9e9bf84aa07645cd4dd7" translate="yes" xml:space="preserve">
          <source>UserHomeDir returns the current user's home directory.</source>
          <target state="translated">UserHomeDir은 현재 사용자의 홈 디렉토리를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="e4af3b1e17fb9be937bdb3790d770684874f4388" translate="yes" xml:space="preserve">
          <source>UserPassword returns a Userinfo containing the provided username and password.</source>
          <target state="translated">UserPassword는 제공된 사용자 이름과 비밀번호가 포함 된 Userinfo를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="02f3110477b79296b9a835ccdda4c40254dba20b" translate="yes" xml:space="preserve">
          <source>UserTime returns the user CPU time of the exited process and its children.</source>
          <target state="translated">UserTime은 종료 된 프로세스 및 해당 자식의 사용자 CPU 시간을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="596b2947d671a1bd54b3952e3987a478fe9edb86" translate="yes" xml:space="preserve">
          <source>Username returns the username.</source>
          <target state="translated">사용자 이름은 사용자 이름을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="dc8f2880e32de7bce1932889e7d7d51c71d3c62a" translate="yes" xml:space="preserve">
          <source>Using GOOS=android matches build tags and files as for GOOS=linux in addition to android tags and files.</source>
          <target state="translated">GOOS = android를 사용하면 Android 태그 및 파일 외에 GOOS = linux와 마찬가지로 빌드 태그 및 파일과 일치합니다.</target>
        </trans-unit>
        <trans-unit id="9ef58be31d291026b75b8271910eb178dd6cbe45" translate="yes" xml:space="preserve">
          <source>Using GOOS=illumos matches build tags and files as for GOOS=solaris in addition to illumos tags and files.</source>
          <target state="translated">GOOS = illumos를 사용하면 illumos 태그 및 파일 외에 GOOS = solaris와 마찬가지로 빌드 태그 및 파일을 일치시킵니다.</target>
        </trans-unit>
        <trans-unit id="c3fe6f0d858556f91b252b308d506eedd3cb2ddd" translate="yes" xml:space="preserve">
          <source>Using JS to include valid but untrusted JSON is not safe. A safe alternative is to parse the JSON with json.Unmarshal and then pass the resultant object into the template, where it will be converted to sanitized JSON when presented in a JavaScript context.</source>
          <target state="translated">JS를 사용하여 유효하지만 신뢰할 수없는 JSON을 포함하는 것은 안전하지 않습니다. 안전한 대안은 JSON을 json.Unmarshal로 구문 분석 한 다음 결과 객체를 템플릿으로 전달하면 JavaScript 컨텍스트에서 제시 될 때 위생 화 된 JSON으로 변환됩니다.</target>
        </trans-unit>
        <trans-unit id="9d9125a7eed89278993fd187aca47dc4a1d76ad9" translate="yes" xml:space="preserve">
          <source>Using a nil Qualifier is equivalent to using (*Package).Path: the object is qualified by the import path, e.g., &quot;encoding/json.Marshal&quot;.</source>
          <target state="translated">nil 한정자를 사용하는 것은 (* Package) .Path를 사용하는 것과 같습니다. 경로 : 객체는 &quot;encoding / json.Marshal&quot;과 같은 가져 오기 경로로 한정됩니다.</target>
        </trans-unit>
        <trans-unit id="2513c3904b3d8adc521d8c82ea1568602dc6d76b" translate="yes" xml:space="preserve">
          <source>Uvarint</source>
          <target state="translated">Uvarint</target>
        </trans-unit>
        <trans-unit id="cd0cf1cee138a1f47260e7774925bd884f2375a8" translate="yes" xml:space="preserve">
          <source>Uvarint decodes a uint64 from buf and returns that value and the number of bytes read (&amp;gt; 0). If an error occurred, the value is 0 and the number of bytes n is &amp;lt;= 0 meaning:</source>
          <target state="translated">Uvarint는 buf에서 uint64를 디코딩하고 해당 값과 읽은 바이트 수 (&amp;gt; 0)를 반환합니다. 오류가 발생하면 값은 0이고 바이트 수 n은 &amp;lt;= 0을 의미합니다.</target>
        </trans-unit>
        <trans-unit id="66771bf9a86898929e11d8280264a532271f941a" translate="yes" xml:space="preserve">
          <source>Val</source>
          <target state="translated">Val</target>
        </trans-unit>
        <trans-unit id="2bc81c70eb02eae4099191aef1e57849a8e8f03d" translate="yes" xml:space="preserve">
          <source>Val returns the constant's value.</source>
          <target state="translated">Val은 상수 값을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="b0f7ad9f186c50db1236f5511239fa9e5948970e" translate="yes" xml:space="preserve">
          <source>Val returns the underlying value for a given constant. Since it returns an interface, it is up to the caller to type assert the result to the expected type. The possible dynamic return types are:</source>
          <target state="translated">Val은 주어진 상수의 기본 값을 반환합니다. 인터페이스를 반환하기 때문에 결과를 예상되는 유형으로 지정하는 것은 호출자에게 달려 있습니다. 가능한 동적 리턴 유형은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="2559cc6528d308a907426a71ef2ddf45113dcc96" translate="yes" xml:space="preserve">
          <source>Val returns the value associated with attribute Attr in Entry, or nil if there is no such attribute.</source>
          <target state="translated">Val은 항목의 속성 Attr과 관련된 값을 반환하거나 해당 속성이 없으면 nil을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="a4aefa35c3b5ad26cd56f18c500001b89f66a9ce" translate="yes" xml:space="preserve">
          <source>Valid</source>
          <target state="translated">Valid</target>
        </trans-unit>
        <trans-unit id="46c122fc5457cc399b8b858419e492a06b376755" translate="yes" xml:space="preserve">
          <source>Valid reports whether data is a valid JSON encoding.</source>
          <target state="translated">유효한 데이터가 유효한 JSON 인코딩인지 여부를보고합니다.</target>
        </trans-unit>
        <trans-unit id="806cc965cf7a7b71a612856c03f868243e886f5c" translate="yes" xml:space="preserve">
          <source>Valid reports whether p consists entirely of valid UTF-8-encoded runes.</source>
          <target state="translated">유효한 p가 유효한 UTF-8로 인코딩 된 룬으로 구성되어 있는지 여부를보고합니다.</target>
        </trans-unit>
        <trans-unit id="2c3cda690d8c1884d7b10ef8e13e38f05dfb3167" translate="yes" xml:space="preserve">
          <source>ValidRune</source>
          <target state="translated">ValidRune</target>
        </trans-unit>
        <trans-unit id="3e8899c82439ff69d29e69515b50bcac879155d8" translate="yes" xml:space="preserve">
          <source>ValidRune reports whether r can be legally encoded as UTF-8. Code points that are out of range or a surrogate half are illegal.</source>
          <target state="translated">ValidRune은 r을 UTF-8로 합법적으로 인코딩 할 수 있는지 여부를보고합니다. 범위를 벗어나거나 대리 절반이 아닌 코드 포인트는 불법입니다.</target>
        </trans-unit>
        <trans-unit id="a9473e977cedeea3732bd1f0e634158b2fc8bc9c" translate="yes" xml:space="preserve">
          <source>ValidString</source>
          <target state="translated">ValidString</target>
        </trans-unit>
        <trans-unit id="1965e2764de3dba462118d2aa14e90df90d22255" translate="yes" xml:space="preserve">
          <source>ValidString reports whether s consists entirely of valid UTF-8-encoded runes.</source>
          <target state="translated">ValidString은 s가 유효한 UTF-8로 인코딩 된 룬으로 구성되어 있는지 여부를보고합니다.</target>
        </trans-unit>
        <trans-unit id="c0a9babdac4db73aebddcf7c19ed25ebb45d7a5b" translate="yes" xml:space="preserve">
          <source>Validate performs basic sanity checks on the key. It returns nil if the key is valid, or else an error describing a problem.</source>
          <target state="translated">유효성 검사는 키에서 기본 상태 검사를 수행합니다. 키가 유효하면 nil을 반환하거나 문제를 설명하는 오류를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="8dce170de238b1feda2ecd9674ea3ca0d068fbcb" translate="yes" xml:space="preserve">
          <source>Value</source>
          <target state="translated">Value</target>
        </trans-unit>
        <trans-unit id="f3016ae4e1764c831e22db266c9f3792b104f577" translate="yes" xml:space="preserve">
          <source>Value (Config)</source>
          <target state="translated">값 (구성)</target>
        </trans-unit>
        <trans-unit id="3b939f106840debe33fe7912aa5a94c4386c469d" translate="yes" xml:space="preserve">
          <source>Value (ReadMostly)</source>
          <target state="translated">가치 (대부분 읽기)</target>
        </trans-unit>
        <trans-unit id="2a2d06d73feadc3e81a5b950d3c3a1578785b1f4" translate="yes" xml:space="preserve">
          <source>Value implements the driver Valuer interface.</source>
          <target state="translated">Value는 드라이버 Valuer 인터페이스를 구현합니다.</target>
        </trans-unit>
        <trans-unit id="dd218fab688fcead8af77b81093aadd12637b021" translate="yes" xml:space="preserve">
          <source>Value is a value that drivers must be able to handle. It is either nil, a type handled by a database driver's NamedValueChecker interface, or an instance of one of these types:</source>
          <target state="translated">값은 드라이버가 처리 할 수있는 값입니다. nil, 데이터베이스 드라이버의 NamedValueChecker 인터페이스에 의해 처리되는 유형 또는 다음 유형 중 하나의 인스턴스입니다.</target>
        </trans-unit>
        <trans-unit id="9752a7f3e66998d9403b579aaf11f5b93a26f7c0" translate="yes" xml:space="preserve">
          <source>Value is the documentation for a (possibly grouped) var or const declaration.</source>
          <target state="translated">값은 (그룹화 된) var 또는 const 선언에 대한 문서입니다.</target>
        </trans-unit>
        <trans-unit id="fc8bc38b52edf0162032e19caad204a132e1edc6" translate="yes" xml:space="preserve">
          <source>Value is the interface to the dynamic value stored in a flag. (The default value is represented as a string.)</source>
          <target state="translated">Value는 플래그에 저장된 동적 값에 대한 인터페이스입니다. (기본값은 문자열로 표시됩니다.)</target>
        </trans-unit>
        <trans-unit id="2c289f13fb553c52397f1f031c283edf2f75ba5d" translate="yes" xml:space="preserve">
          <source>Value is the reflection interface to a Go value.</source>
          <target state="translated">Value는 Go 값에 대한 리플렉션 인터페이스입니다.</target>
        </trans-unit>
        <trans-unit id="f874cfa2eae8a5288d6bb67626a8a5b202b1f1d3" translate="yes" xml:space="preserve">
          <source>Value represents a JavaScript value. The zero value is the JavaScript value &quot;undefined&quot;.</source>
          <target state="translated">값은 JavaScript 값을 나타냅니다. 0 값은 JavaScript 값 &quot;undefined&quot;입니다.</target>
        </trans-unit>
        <trans-unit id="bea9dc918e0d02a53c6ed34890033d051d6e5b45" translate="yes" xml:space="preserve">
          <source>Value returns an arbitrary value of the given type. If the type implements the Generator interface, that will be used. Note: To create arbitrary values for structs, all the fields must be exported.</source>
          <target state="translated">값은 주어진 유형의 임의의 값을 반환합니다. 유형이 Generator 인터페이스를 구현하는 경우 해당 유형이 사용됩니다. 참고 : 구조체에 임의의 값을 만들려면 모든 필드를 내 보내야합니다.</target>
        </trans-unit>
        <trans-unit id="010d442068b6dc0c175fb3be2478e451331b7772" translate="yes" xml:space="preserve">
          <source>Value returns the value of the iterator's current map entry.</source>
          <target state="translated">값은 반복자의 현재 맵 항목 값을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="4814e1e8c0abd0c5b67abd9fa764cdfa19868250" translate="yes" xml:space="preserve">
          <source>ValueConverter is the interface providing the ConvertValue method.</source>
          <target state="translated">ValueConverter는 ConvertValue 메서드를 제공하는 인터페이스입니다.</target>
        </trans-unit>
        <trans-unit id="4ee806fbc08f89d25017504477016f81d87178b9" translate="yes" xml:space="preserve">
          <source>ValueOf returns a new Value initialized to the concrete value stored in the interface i. ValueOf(nil) returns the zero Value.</source>
          <target state="translated">ValueOf는 인터페이스 i에 저장된 구체적인 값으로 초기화 된 새 값을 반환합니다. ValueOf (nil)은 0 값을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="73fa7582a50fd6ffa7153d229b6170f753731b5a" translate="yes" xml:space="preserve">
          <source>ValueOf returns x as a JavaScript value:</source>
          <target state="translated">ValueOf는 x를 JavaScript 값으로 반환합니다.</target>
        </trans-unit>
        <trans-unit id="f18975e8d6052ff98ae55792b39100c67475c7da" translate="yes" xml:space="preserve">
          <source>Valuer is the interface providing the Value method.</source>
          <target state="translated">Valuer는 Value 메소드를 제공하는 인터페이스입니다.</target>
        </trans-unit>
        <trans-unit id="b1564f6b1512cbfa3cfcebc9a5badb6b239954f1" translate="yes" xml:space="preserve">
          <source>Values</source>
          <target state="translated">Values</target>
        </trans-unit>
        <trans-unit id="4c4b32df8b9b0ab6cff257dc64ed3eb643572b49" translate="yes" xml:space="preserve">
          <source>Values containing the types defined in this package should not be copied.</source>
          <target state="translated">이 패키지에 정의 된 유형을 포함하는 값은 복사하지 않아야합니다.</target>
        </trans-unit>
        <trans-unit id="db0f016ee293f8c7fb961ef81d6b041a8271fcde" translate="yes" xml:space="preserve">
          <source>Values maps a string key to a list of values. It is typically used for query parameters and form values. Unlike in the http.Header map, the keys in a Values map are case-sensitive.</source>
          <target state="translated">값은 문자열 키를 값 목록에 매핑합니다. 일반적으로 쿼리 매개 변수 및 양식 값에 사용됩니다. http.Header 맵과 달리 Values ​​맵의 키는 대소 문자를 구분합니다.</target>
        </trans-unit>
        <trans-unit id="e1b6d5f206af70bb39bd5fc526ef574743992a54" translate="yes" xml:space="preserve">
          <source>Values of the Image interface are created either by calling functions such as NewRGBA and NewPaletted, or by calling Decode on an io.Reader containing image data in a format such as GIF, JPEG or PNG. Decoding any particular image format requires the prior registration of a decoder function. Registration is typically automatic as a side effect of initializing that format's package so that, to decode a PNG image, it suffices to have</source>
          <target state="translated">이미지 인터페이스의 값은 NewRGBA 및 NewPaletted와 같은 함수를 호출하거나 GIF, JPEG 또는 PNG와 같은 형식으로 이미지 데이터가 포함 된 io.Reader에서 Decode를 호출하여 생성됩니다. 특정 이미지 형식을 디코딩하려면 디코더 기능을 사전에 등록해야합니다. PNG 이미지를 디코딩하기 위해서는 해당 형식의 패키지를 초기화하는 부작용으로 일반적으로 등록이 자동으로 수행됩니다.</target>
        </trans-unit>
        <trans-unit id="556542fae1b8220ad354f73db7960fdf03643304" translate="yes" xml:space="preserve">
          <source>Values that are shared by both R_PPC and R_PPC64 are prefixed with R_POWERPC_ in the ELF standard. For the R_PPC type, the relevant shared relocations have been renamed with the prefix R_PPC_. The original name follows the value in a comment.</source>
          <target state="translated">R_PPC 및 R_PPC64가 공유하는 값은 ELF 표준에서 R_POWERPC_로 시작됩니다. R_PPC 유형의 경우 관련 공유 재배치의 이름이 접두사 R_PPC_로 바뀌 었습니다. 원래 이름은 주석의 값 뒤에옵니다.</target>
        </trans-unit>
        <trans-unit id="35513df4822daf6991ea9831d940cbcb44ab9510" translate="yes" xml:space="preserve">
          <source>Values that are shared by both R_PPC and R_PPC64 are prefixed with R_POWERPC_ in the ELF standard. For the R_PPC64 type, the relevant shared relocations have been renamed with the prefix R_PPC64_. The original name follows the value in a comment.</source>
          <target state="translated">R_PPC 및 R_PPC64가 공유하는 값은 ELF 표준에서 R_POWERPC_로 시작됩니다. R_PPC64 유형의 경우 관련 공유 재배치의 이름이 접두사 R_PPC64_로 바뀌 었습니다. 원래 이름은 주석의 값 뒤에옵니다.</target>
        </trans-unit>
        <trans-unit id="5491dd2526a7b6a12fe2eb7a45fdc97e08387c1a" translate="yes" xml:space="preserve">
          <source>Var defines a flag with the specified name and usage string. The type and value of the flag are represented by the first argument, of type Value, which typically holds a user-defined implementation of Value. For instance, the caller could create a flag that turns a comma-separated string into a slice of strings by giving the slice the methods of Value; in particular, Set would decompose the comma-separated string into the slice.</source>
          <target state="translated">Var는 지정된 이름과 사용 문자열로 플래그를 정의합니다. 플래그의 유형과 값은 일반적으로 사용자 정의 Value 구현을 보유하는 Value 유형의 첫 번째 인수로 표시됩니다. 예를 들어, 호출자는 슬라이스에 Value 메서드를 제공하여 쉼표로 구분 된 문자열을 문자열 조각으로 바꾸는 플래그를 만들 수 있습니다. 특히 Set은 쉼표로 구분 된 문자열을 슬라이스로 분해합니다.</target>
        </trans-unit>
        <trans-unit id="ce2b2698fd744904596b638fadb24e9ac560ff55" translate="yes" xml:space="preserve">
          <source>Var is an abstract type for all exported variables.</source>
          <target state="translated">Var은 내 보낸 모든 변수에 대한 추상 유형입니다.</target>
        </trans-unit>
        <trans-unit id="ac018db1f7b00972061adff843d37497d8ee153c" translate="yes" xml:space="preserve">
          <source>Variables</source>
          <target state="translated">Variables</target>
        </trans-unit>
        <trans-unit id="f9c863db27e83db40f4468fc4bc690e601042fdf" translate="yes" xml:space="preserve">
          <source>Variables previously declared can also be assigned, using the syntax</source>
          <target state="translated">구문을 사용하여 이전에 선언 된 변수를 할당 할 수도 있습니다</target>
        </trans-unit>
        <trans-unit id="ca11a0cc5def9c210a74faf8ede1798e07fe2571" translate="yes" xml:space="preserve">
          <source>Variadic reports whether the signature s is variadic.</source>
          <target state="translated">Variadic는 서명이 가변적인지 여부를보고합니다.</target>
        </trans-unit>
        <trans-unit id="41d79747265706c0afa494f13a1d7304f4478119" translate="yes" xml:space="preserve">
          <source>Varint</source>
          <target state="translated">Varint</target>
        </trans-unit>
        <trans-unit id="f5ebfb0ae8769b5ca2188331b009d7eba5a85341" translate="yes" xml:space="preserve">
          <source>Varint decodes an int64 from buf and returns that value and the number of bytes read (&amp;gt; 0). If an error occurred, the value is 0 and the number of bytes n is &amp;lt;= 0 with the following meaning:</source>
          <target state="translated">Varint는 buf에서 int64를 해독하고 그 값과 읽은 바이트 수 (&amp;gt; 0)를 반환합니다. 오류가 발생하면 값은 0이고 바이트 수 n은 &amp;lt;= 0이며 다음과 같은 의미입니다.</target>
        </trans-unit>
        <trans-unit id="d24fa62b1d834d7cd3cd0e8882051f85d094eda3" translate="yes" xml:space="preserve">
          <source>Various errors contained in OpError.</source>
          <target state="translated">OpError에 포함 된 다양한 오류.</target>
        </trans-unit>
        <trans-unit id="1a2978dcc531a211271eca6e53e9367381806a65" translate="yes" xml:space="preserve">
          <source>Various implementations of ValueConverter are provided by the driver package to provide consistent implementations of conversions between drivers. The ValueConverters have several uses:</source>
          <target state="translated">드라이버 간 변환의 일관된 구현을 제공하기 위해 드라이버 패키지에서 ValueConverter의 다양한 구현을 제공합니다. ValueConverters는 여러 용도로 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="677405d5dfca724a737bda64c6dc1ddb03f2bb84" translate="yes" xml:space="preserve">
          <source>Various isolation levels that drivers may support in BeginTx. If a driver does not support a given isolation level an error may be returned.</source>
          <target state="translated">드라이버가 BeginTx에서 지원할 수있는 다양한 격리 수준. 드라이버가 지정된 격리 수준을 지원하지 않으면 오류가 반환 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="cc21bbee9a9b0425c95545ecf2f53bc29369d55b" translate="yes" xml:space="preserve">
          <source>Various methods support conversions between strings and corresponding numeric values, and vice versa: *Int, *Rat, and *Float values implement the Stringer interface for a (default) string representation of the value, but also provide SetString methods to initialize a value from a string in a variety of supported formats (see the respective SetString documentation).</source>
          <target state="translated">* Int, * Rat 및 * Float 값은 값의 (기본) 문자열 표현을위한 Stringer 인터페이스를 구현하지만 SetString 메소드를 제공하여 값을 초기화합니다. 지원되는 다양한 형식의 문자열 (각 SetString 설명서 참조)</target>
        </trans-unit>
        <trans-unit id="fe5502979be4e45317e06e3f4bc8dea3c27b9d68" translate="yes" xml:space="preserve">
          <source>Verbose reports whether the -test.v flag is set.</source>
          <target state="translated">상세는 -test.v 플래그 설정 여부를보고합니다.</target>
        </trans-unit>
        <trans-unit id="155a05e64e4d5e6d0dbf5afad455ef4b2c7d215e" translate="yes" xml:space="preserve">
          <source>Verify attempts to verify c by building one or more chains from c to a certificate in opts.Roots, using certificates in opts.Intermediates if needed. If successful, it returns one or more chains where the first element of the chain is c and the last element is from opts.Roots.</source>
          <target state="translated">필요한 경우 opts.Intermediates의 인증서를 사용하여 c에서 opts.Roots의 인증서로 하나 이상의 체인을 빌드하여 c를 확인하려는 시도를 확인하십시오. 성공하면 체인의 첫 번째 요소가 c이고 마지막 요소가 opts.Roots 인 하나 이상의 체인을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="8f646662ac01cb1ef7a3f3dbe169c861f558bcfa" translate="yes" xml:space="preserve">
          <source>Verify checks the validity of an email address on the server. If Verify returns nil, the address is valid. A non-nil return does not necessarily indicate an invalid address. Many servers will not verify addresses for security reasons.</source>
          <target state="translated">확인은 서버에서 이메일 주소의 유효성을 확인합니다. Verify가 nil을 반환하면 주소가 유효합니다. 0이 아닌 리턴이 반드시 유효하지 않은 주소를 나타내는 것은 아닙니다. 많은 서버가 보안상의 이유로 주소를 확인하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="5f78fb77229812b310f6d30ba2f8eeb1a758e0db" translate="yes" xml:space="preserve">
          <source>Verify reports whether sig is a valid signature of message by publicKey. It will panic if len(publicKey) is not PublicKeySize.</source>
          <target state="translated">확인은 sig가 publicKey에 의해 유효한 메시지 서명인지보고합니다. len (publicKey)이 PublicKeySize가 아닌 경우 패닉 상태가됩니다.</target>
        </trans-unit>
        <trans-unit id="afa19e9e5042f2e1366a51a651d0d42c62c9a9dc" translate="yes" xml:space="preserve">
          <source>Verify verifies the signature in r, s of hash using the public key, pub. It reports whether the signature is valid.</source>
          <target state="translated">공개 키 pub를 사용하여 해시의 r, s로 서명을 확인하십시오. 서명이 유효한지 여부를보고합니다.</target>
        </trans-unit>
        <trans-unit id="29e311050b6e4da19e97375079ff2944ac6c7fb5" translate="yes" xml:space="preserve">
          <source>Verify verifies the signature in r, s of hash using the public key, pub. Its return value records whether the signature is valid.</source>
          <target state="translated">공개 키 pub를 사용하여 해시의 r, s로 서명을 확인하십시오. 리턴 값은 서명이 유효한지 여부를 기록합니다.</target>
        </trans-unit>
        <trans-unit id="c77ce67480dc146ec9f71541bb8eac40755f84ee" translate="yes" xml:space="preserve">
          <source>VerifyHostname checks that the peer certificate chain is valid for connecting to host. If so, it returns nil; if not, it returns an error describing the problem.</source>
          <target state="translated">VerifyHostname은 피어 인증서 체인이 호스트에 연결하기에 유효한지 확인합니다. 그렇다면 nil을 반환합니다. 그렇지 않으면 문제를 설명하는 오류를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="4d87443c0e8c5a2665736c35fe304b37073dc32e" translate="yes" xml:space="preserve">
          <source>VerifyHostname returns nil if c is a valid certificate for the named host. Otherwise it returns an error describing the mismatch.</source>
          <target state="translated">c가 명명 된 호스트에 유효한 인증서 인 경우 VerifyHostname은 nil을 반환합니다. 그렇지 않으면 불일치를 설명하는 오류를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="3cca137a6af7f592d32076ad3b96f2dd532d13e4" translate="yes" xml:space="preserve">
          <source>VerifyOptions contains parameters for Certificate.Verify. It's a structure because other PKIX verification APIs have ended up needing many options.</source>
          <target state="translated">VerifyOptions에는 Certificate.Verify에 대한 매개 변수가 포함되어 있습니다. 다른 PKIX 검증 API에는 많은 옵션이 필요하기 때문에 구조입니다.</target>
        </trans-unit>
        <trans-unit id="904631d00687a7288866da49169708056e59b147" translate="yes" xml:space="preserve">
          <source>VerifyPKCS1v15</source>
          <target state="translated">VerifyPKCS1v15</target>
        </trans-unit>
        <trans-unit id="7fac2ac8cef2b4f2fce0053008362560cd0a7f6f" translate="yes" xml:space="preserve">
          <source>VerifyPKCS1v15 verifies an RSA PKCS#1 v1.5 signature. hashed is the result of hashing the input message using the given hash function and sig is the signature. A valid signature is indicated by returning a nil error. If hash is zero then hashed is used directly. This isn't advisable except for interoperability.</source>
          <target state="translated">VerifyPKCS1v15는 RSA PKCS # 1 v1.5 서명을 확인합니다. 해시는 주어진 해시 함수를 사용하여 입력 메시지를 해시 한 결과이고 sig는 서명입니다. 유효한 서명은 nil 오류를 반환하여 표시됩니다. 해시가 0이면 해시가 직접 사용됩니다. 상호 운용성을 제외하고는 권장되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="a12022e4f1f957db46b6ad31ae0c6d8b5b335f06" translate="yes" xml:space="preserve">
          <source>VerifyPSS verifies a PSS signature. hashed is the result of hashing the input message using the given hash function and sig is the signature. A valid signature is indicated by returning a nil error. The opts argument may be nil, in which case sensible defaults are used.</source>
          <target state="translated">VerifyPSS는 PSS 서명을 확인합니다. 해시는 주어진 해시 함수를 사용하여 입력 메시지를 해시 한 결과이고 sig는 서명입니다. 유효한 서명은 nil 오류를 반환하여 표시됩니다. opts 인수는 nil 일 수 있으며이 경우 적절한 기본값이 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="fc50bdb16e95dd81d5ab93336a4873d743e71e10" translate="yes" xml:space="preserve">
          <source>Version is found in Header.Ident[EI_VERSION] and Header.Version.</source>
          <target state="translated">버전은 Header.Ident [EI_VERSION] 및 Header.Version에 있습니다.</target>
        </trans-unit>
        <trans-unit id="4d5c372788d86ffb1bb307fe18c33d0d35dfaf32" translate="yes" xml:space="preserve">
          <source>Version is the Unicode edition from which the tables are derived.</source>
          <target state="translated">버전은 테이블이 파생 된 유니 코드 버전입니다.</target>
        </trans-unit>
        <trans-unit id="50de89df378f68937423c4c0b0df29cc9d671898" translate="yes" xml:space="preserve">
          <source>Version returns the Go tree's version string. It is either the commit hash and date at the time of the build or, when possible, a release tag like &quot;go1.3&quot;.</source>
          <target state="translated">Version은 Go Tree의 버전 문자열을 반환합니다. 빌드 시점의 커밋 해시 및 날짜이거나 가능한 경우 &quot;go1.3&quot;과 같은 릴리스 태그입니다.</target>
        </trans-unit>
        <trans-unit id="a9f8b9e002c84b093e85fe6340e9e2446c0f01f6" translate="yes" xml:space="preserve">
          <source>Very large values overflow to -1 or +Inf.</source>
          <target state="translated">매우 큰 값은 -1 또는 + Inf로 오버플로됩니다.</target>
        </trans-unit>
        <trans-unit id="62ec9d14e878063c7140d04d700991af277e0332" translate="yes" xml:space="preserve">
          <source>Very large values overflow to 0 or +Inf. Very small values underflow to 1.</source>
          <target state="translated">매우 큰 값은 0 또는 + Inf로 오버플로됩니다. 매우 작은 값은 1로 유입됩니다.</target>
        </trans-unit>
        <trans-unit id="548f7438120baf452d57249c7ed1e4259eddd666" translate="yes" xml:space="preserve">
          <source>Visit visits the command-line flags in lexicographical order, calling fn for each. It visits only those flags that have been set.</source>
          <target state="translated">방문은 명령 행 플래그를 사전 순서대로 방문하고 각각에 대해 fn을 호출합니다. 설정된 플래그 만 방문합니다.</target>
        </trans-unit>
        <trans-unit id="3d71d97888658f2741fa47ca0e6dafd3ee5bd8d5" translate="yes" xml:space="preserve">
          <source>Visit visits the flags in lexicographical order, calling fn for each. It visits only those flags that have been set.</source>
          <target state="translated">방문은 사전에 순서대로 플래그를 방문하고 각각에 대해 fn을 호출합니다. 설정된 플래그 만 방문합니다.</target>
        </trans-unit>
        <trans-unit id="fe139ba7798500e37c921c3f2eca473d92def875" translate="yes" xml:space="preserve">
          <source>VisitAll visits the command-line flags in lexicographical order, calling fn for each. It visits all flags, even those not set.</source>
          <target state="translated">VisitAll은 명령 행 플래그를 사전 식 순서대로 방문하고 각각에 대해 fn을 호출합니다. 설정되지 않은 플래그까지 모든 플래그를 방문합니다.</target>
        </trans-unit>
        <trans-unit id="91926cb218ad9a9f08c7f40210f9b3b594b76515" translate="yes" xml:space="preserve">
          <source>VisitAll visits the flags in lexicographical order, calling fn for each. It visits all flags, even those not set.</source>
          <target state="translated">VisitAll은 각각 fn을 호출하여 사전 순으로 플래그를 방문합니다. 설정되지 않은 플래그까지 모든 플래그를 방문합니다.</target>
        </trans-unit>
        <trans-unit id="82b27aedf84d8e8a368898854887f1a9db2938b6" translate="yes" xml:space="preserve">
          <source>VolumeName returns leading volume name. Given &quot;C:\foo\bar&quot; it returns &quot;C:&quot; on Windows. Given &quot;\\host\share\foo&quot; it returns &quot;\\host\share&quot;. On other platforms it returns &quot;&quot;.</source>
          <target state="translated">VolumeName은 선행 볼륨 이름을 반환합니다. &quot;C : \ foo \ bar&quot;가 주어지면 Windows에서 &quot;C :&quot;를 반환합니다. &quot;\\ host \ share \ foo&quot;가 주어지면 &quot;\\ host \ share&quot;를 반환합니다. 다른 플랫폼에서는 &quot;&quot;를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="116af4a220931a113874c3a9a8fb8b67e737c229" translate="yes" xml:space="preserve">
          <source>WARNING: this function doesn't do any revocation checking.</source>
          <target state="translated">경고 :이 기능은 해지 확인을 수행하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="ac3ed0238ed01e1e125ce49b809e2689db256bfa" translate="yes" xml:space="preserve">
          <source>WARNING: use of this function to encrypt plaintexts other than session keys is dangerous. Use RSA OAEP in new protocols.</source>
          <target state="translated">경고 :이 기능을 사용하여 세션 키 이외의 일반 텍스트를 암호화하는 것은 위험합니다. 새로운 프로토콜에 RSA OAEP를 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="d791440e471e57ef06317ea366a55351a6722e8d" translate="yes" xml:space="preserve">
          <source>Wait atomically unlocks c.L and suspends execution of the calling goroutine. After later resuming execution, Wait locks c.L before returning. Unlike in other systems, Wait cannot return unless awoken by Broadcast or Signal.</source>
          <target state="translated">대기는 원자 적으로 cL을 잠금 해제하고 호출 고 루틴의 실행을 일시 중단합니다. 나중에 실행을 다시 시작한 후 대기는 반환하기 전에 cL을 잠급니다. 다른 시스템과 달리 방송 또는 신호에 의해 깨어나지 않으면 대기는 되돌릴 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="c1e4ec07809f552042a2744ebd76a1ff9cdfd927" translate="yes" xml:space="preserve">
          <source>Wait blocks until the WaitGroup counter is zero.</source>
          <target state="translated">WaitGroup 카운터가 0이 될 때까지 대기합니다.</target>
        </trans-unit>
        <trans-unit id="a2b93a450c159447eb449f1d44b9509d23d1eff8" translate="yes" xml:space="preserve">
          <source>Wait releases any resources associated with the Cmd.</source>
          <target state="translated">대기는 Cmd와 관련된 모든 리소스를 해제합니다.</target>
        </trans-unit>
        <trans-unit id="cecb6db143b18629c77edfdcfa6e40a828bd3ecd" translate="yes" xml:space="preserve">
          <source>Wait waits for the Process to exit, and then returns a ProcessState describing its status and an error, if any. Wait releases any resources associated with the Process. On most operating systems, the Process must be a child of the current process or an error will be returned.</source>
          <target state="translated">Wait는 프로세스가 종료 될 때까지 기다린 다음 해당 상태 및 오류 (있는 경우)를 설명하는 ProcessState를 반환합니다. 대기는 프로세스와 관련된 모든 자원을 해제합니다. 대부분의 운영 체제에서 프로세스는 현재 프로세스의 자식이어야합니다. 그렇지 않으면 오류가 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="ef4d163f70a5558cd92581c6468ca54f951f10cb" translate="yes" xml:space="preserve">
          <source>Wait waits for the command to exit and waits for any copying to stdin or copying from stdout or stderr to complete.</source>
          <target state="translated">대기 명령이 종료 될 때까지 대기하고 stdin으로의 복사 또는 stdout 또는 stderr에서 복사가 완료 될 때까지 대기합니다.</target>
        </trans-unit>
        <trans-unit id="e61dcf7176445918332c5c75e515641021cd367b" translate="yes" xml:space="preserve">
          <source>Wait will close the pipe after seeing the command exit, so most callers need not close the pipe themselves; however, an implication is that it is incorrect to call Wait before all reads from the pipe have completed. For the same reason, it is incorrect to call Run when using StdoutPipe. See the example for idiomatic usage.</source>
          <target state="translated">대기는 명령 종료를 본 후 파이프를 닫을 것이므로 대부분의 호출자는 파이프 자체를 닫을 필요가 없습니다. 그러나 파이프에서 모든 읽기가 완료되기 전에 대기를 호출하는 것은 올바르지 않습니다. 같은 이유로 StdoutPipe를 사용할 때 Run을 호출하는 것은 올바르지 않습니다. 관용적 사용 예를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="6e2d628a299984437542474f102b1e387913aa4f" translate="yes" xml:space="preserve">
          <source>Wait will close the pipe after seeing the command exit, so most callers need not close the pipe themselves; however, an implication is that it is incorrect to call Wait before all reads from the pipe have completed. For the same reason, it is incorrect to use Run when using StderrPipe. See the StdoutPipe example for idiomatic usage.</source>
          <target state="translated">대기는 명령 종료를 본 후 파이프를 닫을 것이므로 대부분의 호출자는 파이프 자체를 닫을 필요가 없습니다. 그러나 파이프에서 모든 읽기가 완료되기 전에 대기를 호출하는 것은 올바르지 않습니다. 같은 이유로 StderrPipe를 사용할 때 Run을 사용하는 것은 올바르지 않습니다. 관용적 사용법은 StdoutPipe 예제를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="66edd56a29d8f65f00197517346652171bdf474e" translate="yes" xml:space="preserve">
          <source>WaitGroup</source>
          <target state="translated">WaitGroup</target>
        </trans-unit>
        <trans-unit id="e0c705d18e3fae4506d7273bda6435690cdbde08" translate="yes" xml:space="preserve">
          <source>Walk</source>
          <target state="translated">Walk</target>
        </trans-unit>
        <trans-unit id="9272862a0570cd3c8a576242d0e65b3cfcf9dde3" translate="yes" xml:space="preserve">
          <source>Walk traverses an AST in depth-first order: It starts by calling v.Visit(node); node must not be nil. If the visitor w returned by v.Visit(node) is not nil, Walk is invoked recursively with visitor w for each of the non-nil children of node, followed by a call of w.Visit(nil).</source>
          <target state="translated">Walk는 AST를 깊이 우선 순서로 트래버스합니다. v.Visit (node); 노드는 0이 아니어야합니다. v.Visit (node)에 의해 리턴 된 방문자 w가 nil이 아닌 경우, nil이 아닌 노드의 각 하위 노드에 대해 방문자 w를 재귀 적으로 호출 한 다음 w.Visit (nil)를 호출합니다.</target>
        </trans-unit>
        <trans-unit id="844997b7d380cfffe958c2b4b63e117129683358" translate="yes" xml:space="preserve">
          <source>Walk walks the file tree rooted at root, calling walkFn for each file or directory in the tree, including root. All errors that arise visiting files and directories are filtered by walkFn. The files are walked in lexical order, which makes the output deterministic but means that for very large directories Walk can be inefficient. Walk does not follow symbolic links.</source>
          <target state="translated">Walk는 루트를 기반으로하는 파일 트리를 걷고 루트를 포함하여 트리의 각 파일 또는 디렉토리에 대해 walkFn을 호출합니다. 파일 및 디렉토리 방문시 발생하는 모든 오류는 walkFn으로 필터링됩니다. 파일은 어휘 순서대로 표시되므로 출력이 결정적이지만 매우 큰 디렉토리의 경우 Walk가 비효율적 일 수 있습니다. 도보는 기호 링크를 따르지 않습니다.</target>
        </trans-unit>
        <trans-unit id="ea8fd18744a5b8a94a61df0e6be7f9d622440bee" translate="yes" xml:space="preserve">
          <source>WalkFunc is the type of the function called for each file or directory visited by Walk. The path argument contains the argument to Walk as a prefix; that is, if Walk is called with &quot;dir&quot;, which is a directory containing the file &quot;a&quot;, the walk function will be called with argument &quot;dir/a&quot;. The info argument is the os.FileInfo for the named path.</source>
          <target state="translated">WalkFunc는 Walk가 방문한 각 파일 또는 디렉토리에 대해 호출되는 함수 유형입니다. path 인수에는 Walk를 접두사로 사용하는 인수가 포함됩니다. 즉, &quot;a&quot;파일을 포함하는 디렉토리 인 &quot;dir&quot;을 사용하여 Walk를 호출하면 &quot;dir / a&quot;인수를 사용하여 walk 함수가 호출됩니다. info 인수는 명명 된 경로의 os.FileInfo입니다.</target>
        </trans-unit>
        <trans-unit id="2918ed6d5c509e3ed1b93a9bceda4782bc8dd955" translate="yes" xml:space="preserve">
          <source>Warning logs a message with severity LOG_WARNING, ignoring the severity passed to New.</source>
          <target state="translated">경고는 심각도가 LOG_WARNING 인 메시지를 기록하며 심각도는 New로 전달됩니다.</target>
        </trans-unit>
        <trans-unit id="6dda0897da5609f90207d91adc268a59c4a1ed0a" translate="yes" xml:space="preserve">
          <source>We define codes for each error that manifests while escaping templates, but escaped templates may also fail at runtime.</source>
          <target state="translated">템플릿을 이스케이프하는 동안 나타나는 각 오류에 대한 코드를 정의하지만 이스케이프 된 템플릿도 런타임에 실패 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="4c1d860c4500491f651fd6c28babc0fc5252a9c1" translate="yes" xml:space="preserve">
          <source>WebSafe is a 216-color palette that was popularized by early versions of Netscape Navigator. It is also known as the Netscape Color Cube.</source>
          <target state="translated">WebSafe는 초기 버전의 Netscape Navigator에서 대중화 된 216 색 팔레트입니다. Netscape Color Cube라고도합니다.</target>
        </trans-unit>
        <trans-unit id="9b612a9be3daa519fe810c831ee09c50cb694cd9" translate="yes" xml:space="preserve">
          <source>Weekday returns the day of the week specified by t.</source>
          <target state="translated">Weekday는 t로 지정된 요일을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="f665bbd01fb3804e446b49c63f8771aa2a58f0dc" translate="yes" xml:space="preserve">
          <source>Well-known IPv4 addresses</source>
          <target state="translated">잘 알려진 IPv4 주소</target>
        </trans-unit>
        <trans-unit id="d1c37cf7857b91d487793e2b066aa7768c44b584" translate="yes" xml:space="preserve">
          <source>Well-known IPv6 addresses</source>
          <target state="translated">잘 알려진 IPv6 주소</target>
        </trans-unit>
        <trans-unit id="423b2ce203c11b513c12b2cf5a302bece806d9e9" translate="yes" xml:space="preserve">
          <source>When Go code is built with options like -buildmode=c-shared, it will be run as part of an existing non-Go program. The non-Go code may have already installed signal handlers when the Go code starts (that may also happen in unusual cases when using cgo or SWIG; in that case, the discussion here applies). For -buildmode=c-archive the Go runtime will initialize signals at global constructor time. For -buildmode=c-shared the Go runtime will initialize signals when the shared library is loaded.</source>
          <target state="translated">Go 코드가 -buildmode = c-shared와 같은 옵션으로 빌드되면 기존 비 Go 프로그램의 일부로 실행됩니다. Go 코드가 시작될 때 비 Go 코드에 이미 신호 처리기가 설치되어있을 수 있습니다 (cgo 또는 SWIG를 사용할 때 비정상적인 경우에도 발생할 수 있습니다.이 경우 여기에 설명이 적용됨). -buildmode = c-archive의 경우 Go 런타임은 전역 생성자 시간에 신호를 초기화합니다. -buildmode = c-shared의 경우 Go 런타임은 공유 라이브러리가로드 될 때 신호를 초기화합니다.</target>
        </trans-unit>
        <trans-unit id="157b3f39795f3c1bb26d85adf87f02f3367ef226" translate="yes" xml:space="preserve">
          <source>When Read encounters an error or end-of-file condition after successfully reading n &amp;gt; 0 bytes, it returns the number of bytes read. It may return the (non-nil) error from the same call or return the error (and n == 0) from a subsequent call. An instance of this general case is that a Reader returning a non-zero number of bytes at the end of the input stream may return either err == EOF or err == nil. The next Read should return 0, EOF.</source>
          <target state="translated">읽기&amp;gt; n&amp;gt; 0 바이트를 읽은 후 오류 또는 파일 끝 조건이 발생하면 읽은 바이트 수를 반환합니다. 동일한 호출에서 (0이 아닌) 오류를 반환하거나 후속 호출에서 오류 (및 n == 0)를 반환 할 수 있습니다. 이 일반적인 경우의 예는 입력 스트림의 끝에서 0이 아닌 바이트 수를 리턴하는 Reader가 err == EOF 또는 err == nil을 리턴 할 수 있다는 것입니다. 다음 읽기는 0, EOF를 반환해야합니다.</target>
        </trans-unit>
        <trans-unit id="d6278f9f812d1e00a798b88f0d43a4c07f1b736e" translate="yes" xml:space="preserve">
          <source>When ReadAt returns n &amp;lt; len(p), it returns a non-nil error explaining why more bytes were not returned. In this respect, ReadAt is stricter than Read.</source>
          <target state="translated">ReadAt가 n &amp;lt;len (p)를 반환하면 더 많은 바이트가 반환되지 않은 이유를 설명하는 넌이 아닌 오류를 반환합니다. 이와 관련하여 ReadAt는 Read보다 엄격합니다.</target>
        </trans-unit>
        <trans-unit id="e42e8857e0f2dbf41e5d11d0b713339895c2d306" translate="yes" xml:space="preserve">
          <source>When Shutdown is called, Serve, ListenAndServe, and ListenAndServeTLS immediately return ErrServerClosed. Make sure the program doesn't exit and waits instead for Shutdown to return.</source>
          <target state="translated">Shutdown이 호출되면 Serve, ListenAndServe 및 ListenAndServeTLS는 즉시 ErrServerClosed를 반환합니다. 프로그램이 종료되지 않고 종료가 다시 나타날 때까지 기다리십시오.</target>
        </trans-unit>
        <trans-unit id="52cedf2625524a5c08d35a591f2ee66394bc79d6" translate="yes" xml:space="preserve">
          <source>When Token encounters an error or end-of-file condition after successfully reading a token, it returns the token. It may return the (non-nil) error from the same call or return the error (and a nil token) from a subsequent call. An instance of this general case is that a TokenReader returning a non-nil token at the end of the token stream may return either io.EOF or a nil error. The next Read should return nil, io.EOF.</source>
          <target state="translated">토큰을 읽은 후 토큰에 오류 또는 파일 끝 조건이 발생하면 토큰을 리턴합니다. 동일한 호출에서 (없음이 아닌) 오류를 반환하거나 후속 호출에서 오류 (및 없음 토큰)를 반환 할 수 있습니다. 이 일반적인 경우의 예는 토큰 스트림의 끝에서 넌이 아닌 토큰을 반환하는 TokenReader가 io.EOF 또는 nil 오류를 반환 할 수 있다는 것입니다. 다음 읽기는 nil, io.EOF를 반환해야합니다.</target>
        </trans-unit>
        <trans-unit id="3250a941e5738a81aa69e5097500ef947e64f456" translate="yes" xml:space="preserve">
          <source>When a Go program writes to a broken pipe, the kernel will raise a SIGPIPE signal.</source>
          <target state="translated">Go 프로그램이 깨진 파이프에 쓰면 커널은 SIGPIPE 신호를 발생시킵니다.</target>
        </trans-unit>
        <trans-unit id="ed858d1cf0b08d8b30624984289eaf84deee9351" translate="yes" xml:space="preserve">
          <source>When a data value is not plain text, you can make sure it is not over-escaped by marking it with its type.</source>
          <target state="translated">데이터 값이 일반 텍스트가 아닌 경우 해당 유형으로 표시하여 과도하게 이스케이프되지 않도록 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="dcc36ea4f1110a5d9628600e555148a98813c271" translate="yes" xml:space="preserve">
          <source>When a plugin is first opened, the init functions of all packages not already part of the program are called. The main function is not run. A plugin is only initialized once, and cannot be closed.</source>
          <target state="translated">플러그인을 처음 열면 프로그램의 일부가 아닌 모든 패키지의 init 함수가 호출됩니다. 주 기능이 실행되지 않습니다. 플러그인은 한 번만 초기화되며 닫을 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="82668902c85167e64c6f0f47b4424c5d8da33aca" translate="yes" xml:space="preserve">
          <source>When calling SetCgoTraceback, the version argument is the version number of the structs that the functions expect to receive. Currently this must be zero.</source>
          <target state="translated">SetCgoTraceback을 호출 할 때 version 인수는 함수가받을 것으로 예상되는 구조체의 버전 번호입니다. 현재 이것은 0이어야합니다.</target>
        </trans-unit>
        <trans-unit id="bb4ae77735024f9be2c837577d3897cb72653910" translate="yes" xml:space="preserve">
          <source>When cgo is available, cgo-based (libc-backed) code is used by default. This can be overridden by using osusergo build tag, which enforces the pure Go implementation.</source>
          <target state="translated">cgo를 사용할 수있는 경우 cgo 기반 (libc 지원) 코드가 기본적으로 사용됩니다. osusergo 빌드 태그를 사용하여이를 대체 할 수 있으며 이는 순수한 Go 구현을 강제합니다.</target>
        </trans-unit>
        <trans-unit id="752b47af0ec8b502ec7dd916b2f8679be6d9d28e" translate="yes" xml:space="preserve">
          <source>When err is nil, resp always contains a non-nil resp.Body. Caller should close resp.Body when done reading from it.</source>
          <target state="translated">err이 nil이면 resp는 항상 non-nil resp.Body를 포함합니다. 호출자는 읽은 후 resp.Body를 닫아야합니다.</target>
        </trans-unit>
        <trans-unit id="01d9fbd4a2ba2cf83a0b45d054350614384bbdc9" translate="yes" xml:space="preserve">
          <source>When execution begins, $ is set to the data argument passed to Execute, that is, to the starting value of dot.</source>
          <target state="translated">실행이 시작되면 $는 Execute에 전달 된 데이터 인수, 즉 dot의 시작 값으로 설정됩니다.</target>
        </trans-unit>
        <trans-unit id="8919d4f071112552ffa9917647b1e1053256e035" translate="yes" xml:space="preserve">
          <source>When following redirects, the Client will forward all headers set on the initial Request except:</source>
          <target state="translated">리디렉션을 수행하면 클라이언트는 다음을 제외하고 초기 요청에 설정된 모든 헤더를 전달합니다.</target>
        </trans-unit>
        <trans-unit id="9524b6877cae25b318411b88de97b53bfbb0506c" translate="yes" xml:space="preserve">
          <source>When matching against text, the regexp returns a match that begins as early as possible in the input (leftmost), and among those it chooses the one that a backtracking search would have found first. This so-called leftmost-first matching is the same semantics that Perl, Python, and other implementations use, although this package implements it without the expense of backtracking. For POSIX leftmost-longest matching, see CompilePOSIX.</source>
          <target state="translated">텍스트와 일치하는 경우 정규 표현식은 입력 (가장 왼쪽)에서 가능한 한 빨리 시작되는 일치 항목을 반환하며 그 중에서 역 추적 검색에서 가장 먼저 찾은 항목을 선택합니다. 이 패키지는 백 트래킹 비용을 들이지 않고 구현하지만 Perl, Python 및 기타 구현에서 사용하는 것과 동일한 시맨틱입니다. POSIX 가장 왼쪽 일치는 CompilePOSIX를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="c6e22a9991087594c0b8cf7617afd5eef2db8623" translate="yes" xml:space="preserve">
          <source>When parsing a template, another template may be defined and associated with the template being parsed. Template definitions must appear at the top level of the template, much like global variables in a Go program.</source>
          <target state="translated">템플릿을 구문 분석 할 때 다른 템플릿이 정의되어 구문 분석중인 템플릿과 연관 될 수 있습니다. 템플릿 정의는 Go 프로그램의 전역 변수와 마찬가지로 템플릿의 최상위 수준에 나타나야합니다.</target>
        </trans-unit>
        <trans-unit id="017afe59414197ba093e7c01bd629debe47b73b4" translate="yes" xml:space="preserve">
          <source>When parsing a time with a zone abbreviation like MST, if the zone abbreviation has a defined offset in the current location, then that offset is used. The zone abbreviation &quot;UTC&quot; is recognized as UTC regardless of location. If the zone abbreviation is unknown, Parse records the time as being in a fabricated location with the given zone abbreviation and a zero offset. This choice means that such a time can be parsed and reformatted with the same layout losslessly, but the exact instant used in the representation will differ by the actual zone offset. To avoid such problems, prefer time layouts that use a numeric zone offset, or use ParseInLocation.</source>
          <target state="translated">MST와 같은 영역 약어로 시간을 구문 분석 할 때 영역 약어에 현재 위치에 정의 된 오프셋이 있으면 해당 오프셋이 사용됩니다. 영역 약어 &quot;UTC&quot;는 위치에 관계없이 UTC로 인식됩니다. 구역 약어를 알 수없는 경우 구문 분석은 주어진 구역 약어와 0 오프셋을 사용하여 제작 된 위치에있는 시간을 기록합니다. 이 선택은 이러한 시간을 무손실로 동일한 레이아웃으로 구문 분석하고 다시 포맷 할 수 있지만 표현에 사용 된 정확한 순간은 실제 영역 오프셋에 따라 다릅니다. 이러한 문제를 피하려면 숫자 영역 오프셋을 사용하거나 ParseInLocation을 사용하는 시간 레이아웃을 선호하십시오.</target>
        </trans-unit>
        <trans-unit id="6cdce46cbdd242d854181ed07c3441caefe581b7" translate="yes" xml:space="preserve">
          <source>When parsing a time with a zone offset like -0700, if the offset corresponds to a time zone used by the current location (Local), then Parse uses that location and zone in the returned time. Otherwise it records the time as being in a fabricated location with time fixed at the given zone offset.</source>
          <target state="translated">-0700과 같은 영역 오프셋을 사용하여 시간을 구문 분석 할 때 오프셋이 현재 위치 (Local)에서 사용하는 시간대에 해당하는 경우 Parse는 해당 위치와 영역을 반환 된 시간에 사용합니다. 그렇지 않으면 주어진 구역 오프셋에 고정 된 시간으로 제작 된 위치에있는 시간을 기록합니다.</target>
        </trans-unit>
        <trans-unit id="67cd941accf04bdb338f577638abdd5419252ad9" translate="yes" xml:space="preserve">
          <source>When parsing multiple files with the same name in different directories, the last one mentioned will be the one that results.</source>
          <target state="translated">다른 디렉토리에서 동일한 이름을 가진 여러 파일을 구문 분석 할 때 마지막으로 언급 된 파일이 생성됩니다.</target>
        </trans-unit>
        <trans-unit id="ddcdf8b97f4b2868ce974b91b64fece54bf4c923" translate="yes" xml:space="preserve">
          <source>When parsing multiple files with the same name in different directories, the last one mentioned will be the one that results. For instance, ParseFiles(&quot;a/foo&quot;, &quot;b/foo&quot;) stores &quot;b/foo&quot; as the template named &quot;foo&quot;, while &quot;a/foo&quot; is unavailable.</source>
          <target state="translated">다른 디렉토리에서 동일한 이름을 가진 여러 파일을 구문 분석 할 때 마지막으로 언급 된 파일이 생성됩니다. 예를 들어 ParseFiles ( &quot;a / foo&quot;, &quot;b / foo&quot;)는 &quot;b / foo&quot;를 &quot;foo&quot;라는 템플릿으로 저장하지만 &quot;a / foo&quot;는 사용할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="34e29899665d5e8ad85e485fb7f40717928c9cd2" translate="yes" xml:space="preserve">
          <source>When printing a struct, fmt cannot and therefore does not invoke formatting methods such as Error or String on unexported fields.</source>
          <target state="translated">구조체를 인쇄 할 때 fmt는 내 보내지 않은 필드에서 오류 또는 문자열과 같은 형식화 방법을 호출 할 수 없으므로 호출하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="328b930d804aecf09f06d9e00e3215a83c9fe31a" translate="yes" xml:space="preserve">
          <source>When running a large set of sequential test cases, checking Coverage after each one can be useful for identifying which test cases exercise new code paths. It is not a replacement for the reports generated by 'go test -cover' and 'go tool cover'.</source>
          <target state="translated">대량의 순차적 테스트 사례를 실행할 때 각 사례마다 적용 범위를 확인하면 새 코드 경로를 사용하는 테스트 사례를 식별하는 데 유용 할 수 있습니다. 'go test -cover'및 'go tool cover'로 생성 된 보고서를 대체하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="909e63ef88f23df70a053ead84b3a43d68a17641" translate="yes" xml:space="preserve">
          <source>When template execution invokes a function with an argument list, that list must be assignable to the function's parameter types. Functions meant to apply to arguments of arbitrary type can use parameters of type interface{} or of type reflect.Value. Similarly, functions meant to return a result of arbitrary type can return interface{} or reflect.Value.</source>
          <target state="translated">템플릿 실행이 인수 목록이있는 함수를 호출 할 때 해당 목록은 함수의 매개 변수 유형에 지정 가능해야합니다. 임의 유형의 인수에 적용되는 함수는 interface {} 유형 또는 reflect.Value 유형의 매개 변수를 사용할 수 있습니다. 마찬가지로 임의 유형의 결과를 리턴하는 함수는 interface {}를 리턴하거나 리플렉션 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="05dd6446129205c413b187abb37a98c5e685666d" translate="yes" xml:space="preserve">
          <source>When unmarshaling quoted strings, invalid UTF-8 or invalid UTF-16 surrogate pairs are not treated as an error. Instead, they are replaced by the Unicode replacement character U+FFFD.</source>
          <target state="translated">인용 된 문자열을 비 정렬화할 때 유효하지 않은 UTF-8 또는 유효하지 않은 UTF-16 서로 게이트 쌍은 오류로 처리되지 않습니다. 대신 유니 코드 대체 문자 U + FFFD로 대체됩니다.</target>
        </trans-unit>
        <trans-unit id="33fa3fdb7bbbbb81e834f8787f2ce9d1e3b0b605" translate="yes" xml:space="preserve">
          <source>When using TCP, and the host in the address parameter resolves to multiple network addresses, any dial timeout (from d.Timeout or ctx) is spread over each consecutive dial, such that each is given an appropriate fraction of the time to connect. For example, if a host has 4 IP addresses and the timeout is 1 minute, the connect to each single address will be given 15 seconds to complete before trying the next one.</source>
          <target state="translated">TCP를 사용하고 address 매개 변수의 호스트가 여러 네트워크 주소로 확인되면 모든 다이얼 시간 초과 (d.Timeout 또는 ctx에서)가 각 연속 다이얼에 분산되어 각 연결 시간에 적절한 비율이 제공됩니다. 예를 들어 호스트에 4 개의 IP 주소가 있고 시간 초과가 1 분인 경우 다음 주소를 시도하기 전에 각 단일 주소에 대한 연결이 완료되는 데 15 초가 걸립니다.</target>
        </trans-unit>
        <trans-unit id="81ad3fb58a9738071410987f567b6f63ba760aad" translate="yes" xml:space="preserve">
          <source>When using the host C library resolver, at most one result will be returned. To bypass the host resolver, use a custom Resolver.</source>
          <target state="translated">호스트 C 라이브러리 리졸버를 사용하면 최대 하나의 결과가 리턴됩니다. 호스트 확인자를 무시하려면 사용자 지정 확인자를 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="b6af75ad725ff03ac3899006f586c6815dee0ab6" translate="yes" xml:space="preserve">
          <source>Whether and how a comment is associated with a node depends on the interpretation of the syntax tree by the manipulating program: Except for Doc and Comment comments directly associated with nodes, the remaining comments are &quot;free-floating&quot; (see also issues #18593, #20744).</source>
          <target state="translated">주석이 노드와 연관되는지 여부와 방법은 조작 프로그램에 의한 구문 트리의 해석에 따라 다릅니다. 노드와 직접 연관된 Doc 및 주석 주석을 제외하고 나머지 주석은 &quot;자유 부동&quot;입니다 (문제 # 18593, # 20744).</target>
        </trans-unit>
        <trans-unit id="1761aeba17f1966adf699cab82838ede9543b2ce" translate="yes" xml:space="preserve">
          <source>While it would be correct for the context function to record a complete a stack trace whenever it is called, and simply copy that out in the traceback function, in a typical program the context function will be called many times without ever recording a traceback for that context. Recording a complete stack trace in a call to the context function is likely to be inefficient.</source>
          <target state="translated">컨텍스트 함수가 호출 될 때마다 완전한 스택 추적을 기록하고 단순히 트레이스 백 함수에서이를 복사하는 것이 올바른 반면, 일반적인 프로그램에서는 컨텍스트 함수가 트레이스 백을 기록하지 않고 여러 번 호출됩니다. 문맥. 컨텍스트 함수에 대한 호출에서 완전한 스택 추적을 기록하는 것은 비효율적 일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="97ac8575a01bb9731d0aacbb0c00a32106d3caac" translate="yes" xml:space="preserve">
          <source>While the FileSystem.Open method takes '/'-separated paths, a Dir's string value is a filename on the native file system, not a URL, so it is separated by filepath.Separator, which isn't necessarily '/'.</source>
          <target state="translated">FileSystem.Open 메서드는 '/'으로 구분 된 경로를 사용하지만 Dir의 문자열 값은 URL이 아닌 기본 파일 시스템의 파일 이름이므로 filepath.Separator로 구분되며 반드시 '/'일 필요는 없습니다.</target>
        </trans-unit>
        <trans-unit id="7d448d6e99b8642847a099da6f3145e12a69b2bf" translate="yes" xml:space="preserve">
          <source>White space is considered part of a field.</source>
          <target state="translated">공백은 필드의 일부로 간주됩니다.</target>
        </trans-unit>
        <trans-unit id="3462ed046f134fdadd9007f0e6ba397654359adc" translate="yes" xml:space="preserve">
          <source>Width and precision are measured in units of Unicode code points, that is, runes. (This differs from C's printf where the units are always measured in bytes.) Either or both of the flags may be replaced with the character '*', causing their values to be obtained from the next operand (preceding the one to format), which must be of type int.</source>
          <target state="translated">너비와 정밀도는 유니 코드 코드 포인트, 즉 룬 단위로 측정됩니다. (이것은 단위가 항상 바이트 단위로 측정되는 C의 printf와 다릅니다.) 플래그 중 하나 또는 둘 다 문자 '*'로 대체되어 다음 피연산자에서 값을 얻을 수 있습니다 (앞서 포맷해야 함). int 형식이어야합니다.</target>
        </trans-unit>
        <trans-unit id="285e52d2a4d90abe10ddf2c19e952396f894982a" translate="yes" xml:space="preserve">
          <source>Width is interpreted in the input text but there is no syntax for scanning with a precision (no %5.2f, just %5f). If width is provided, it applies after leading spaces are trimmed and specifies the maximum number of runes to read to satisfy the verb. For example,</source>
          <target state="translated">너비는 입력 텍스트에서 해석되지만 정밀하게 스캔하기위한 구문은 없습니다 (% 5.2f 없음, % 5f 만). 너비가 제공되면 선행 공백이 트리밍 된 후 적용되며 동사를 충족시키기 위해 읽을 최대 룬 수를 지정합니다. 예를 들어</target>
        </trans-unit>
        <trans-unit id="798e2836ace5e24780c7dc5d76140278c0905170" translate="yes" xml:space="preserve">
          <source>Width is specified by an optional decimal number immediately preceding the verb. If absent, the width is whatever is necessary to represent the value. Precision is specified after the (optional) width by a period followed by a decimal number. If no period is present, a default precision is used. A period with no following number specifies a precision of zero. Examples:</source>
          <target state="translated">너비는 동사 바로 앞의 선택적 10 진수로 지정됩니다. 없는 경우 너비는 값을 나타내는 데 필요한 것입니다. 정밀도는 (선택적) 너비 뒤에 마침표와 10 진수로 지정됩니다. 마침표가 없으면 기본 정밀도가 사용됩니다. 다음 숫자가없는 기간은 정밀도 0을 지정합니다. 예 :</target>
        </trans-unit>
        <trans-unit id="26d9c28d789c254f71ea99a3463b99a7ccc2f4fa" translate="yes" xml:space="preserve">
          <source>Windows</source>
          <target state="translated">Windows</target>
        </trans-unit>
        <trans-unit id="90527ca0c17e71be4b659b364a4632417bd48fd0" translate="yes" xml:space="preserve">
          <source>With HTTP Basic Authentication the provided username and password are not encrypted.</source>
          <target state="translated">HTTP 기본 인증을 사용하면 제공된 사용자 이름과 비밀번호가 암호화되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="9c7242429a52b5edef337779ea090fbcc2bb6019" translate="yes" xml:space="preserve">
          <source>With the exceptions of comments, which are skipped if SkipComments is set, unrecognized tokens are not ignored. Instead, the scanner simply returns the respective individual characters (or possibly sub-tokens). For instance, if the mode is ScanIdents (not ScanStrings), the string &quot;foo&quot; is scanned as the token sequence '&quot;' Ident '&quot;'.</source>
          <target state="translated">SkipComments가 설정되어 있으면 건너 뛰는 주석을 제외하고 인식 할 수없는 토큰은 무시되지 않습니다. 대신 스캐너는 단순히 개별 문자 (또는 하위 토큰)를 반환합니다. 예를 들어, 모드가 ScanIdents (ScanStrings 아님) 인 경우 문자열 &quot;foo&quot;는 토큰 시퀀스 ' &quot;'Ident '&quot;'로 검색됩니다.</target>
        </trans-unit>
        <trans-unit id="cfa2b7a12432ca7dde89800a43beb434b01e3ea5" translate="yes" xml:space="preserve">
          <source>WithCancel</source>
          <target state="translated">WithCancel</target>
        </trans-unit>
        <trans-unit id="10592d7ad2855a7180469ae213405203a2d50e89" translate="yes" xml:space="preserve">
          <source>WithCancel returns a copy of parent with a new Done channel. The returned context's Done channel is closed when the returned cancel function is called or when the parent context's Done channel is closed, whichever happens first.</source>
          <target state="translated">WithCancel은 새 완료 채널이있는 상위 사본을 리턴합니다. 리턴 된 취소 기능이 호출되거나 상위 컨텍스트의 완료 채널이 닫히면 리턴 된 컨텍스트의 완료 채널이 닫힙니다.</target>
        </trans-unit>
        <trans-unit id="2261f632aeaf0a3059b969971069ca975c9ce32e" translate="yes" xml:space="preserve">
          <source>WithClientTrace returns a new context based on the provided parent ctx. HTTP client requests made with the returned context will use the provided trace hooks, in addition to any previous hooks registered with ctx. Any hooks defined in the provided trace will be called first.</source>
          <target state="translated">WithClientTrace는 제공된 상위 ctx를 기반으로 새 컨텍스트를 리턴합니다. 리턴 된 컨텍스트로 작성된 HTTP 클라이언트 요청은 ctx에 등록 된 이전 후크 외에 제공된 추적 후크를 사용합니다. 제공된 추적에 정의 된 모든 후크가 먼저 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="f1cd36566b14c3bbf36e47b0c1cd6c5053972eb6" translate="yes" xml:space="preserve">
          <source>WithContext returns a shallow copy of r with its context changed to ctx. The provided ctx must be non-nil.</source>
          <target state="translated">WithContext는 컨텍스트가 ctx로 변경된 r의 얕은 사본을 리턴합니다. 제공된 ctx는 0이 아니어야합니다.</target>
        </trans-unit>
        <trans-unit id="c81570667b5d5149acbef6b90b5b11ce74038f5e" translate="yes" xml:space="preserve">
          <source>WithDeadline</source>
          <target state="translated">WithDeadline</target>
        </trans-unit>
        <trans-unit id="4330da7d2b110737e8fe5953a232fb49e41e1165" translate="yes" xml:space="preserve">
          <source>WithDeadline returns a copy of the parent context with the deadline adjusted to be no later than d. If the parent's deadline is already earlier than d, WithDeadline(parent, d) is semantically equivalent to parent. The returned context's Done channel is closed when the deadline expires, when the returned cancel function is called, or when the parent context's Done channel is closed, whichever happens first.</source>
          <target state="translated">WithDeadline은 최종 기한이 d 이하로 조정 된 상위 컨텍스트의 사본을 리턴합니다. 부모의 최종 기한이 이미 d보다 빠르면 WithDeadline (parent, d)는 의미 적으로 부모와 같습니다. 반환 된 컨텍스트의 완료 채널은 최종 기한이 만료되거나 반환 된 취소 함수가 호출되거나 상위 컨텍스트의 완료 채널이 닫힐 때 가장 먼저 발생하는 경우 닫힙니다.</target>
        </trans-unit>
        <trans-unit id="7a280665a50cba23581e10e39947347ff060fae9" translate="yes" xml:space="preserve">
          <source>WithLabels returns a new context.Context with the given labels added. A label overwrites a prior label with the same key.</source>
          <target state="translated">WithLabels는 주어진 레이블이 추가 된 새로운 컨텍스트를 반환합니다. 레이블은 동일한 키로 이전 레이블을 덮어 씁니다.</target>
        </trans-unit>
        <trans-unit id="236c68ad351c473bc67a76a1e7d06f3261fc4a99" translate="yes" xml:space="preserve">
          <source>WithNode represents a {{with}} action and its commands.</source>
          <target state="translated">WithNode는 {{with}} 작업 및 해당 명령을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="85e6eeaf95e5aa7f5b566d2c8422da42f9a49e6b" translate="yes" xml:space="preserve">
          <source>WithPadding creates a new encoding identical to enc except with a specified padding character, or NoPadding to disable padding. The padding character must not be '\r' or '\n', must not be contained in the encoding's alphabet and must be a rune equal or below '\xff'.</source>
          <target state="translated">WithPadding은 지정된 패딩 문자를 제외하고 enc와 동일한 새 인코딩을 작성하거나 패딩을 비활성화하려면 NoPadding을 작성합니다. 패딩 문자는 '\ r'또는 '\ n'이 아니어야하며 인코딩의 알파벳에 포함되어서는 안되며 '\ xff'이하의 룬이어야합니다.</target>
        </trans-unit>
        <trans-unit id="5778ff939e404ecb571d1f18f70396417807a915" translate="yes" xml:space="preserve">
          <source>WithRegion starts a region associated with its calling goroutine, runs fn, and then ends the region. If the context carries a task, the region is associated with the task. Otherwise, the region is attached to the background task.</source>
          <target state="translated">WithRegion은 호출 고 루틴과 연관된 영역을 시작하고 fn을 실행 한 다음 영역을 종료합니다. 컨텍스트가 작업을 수행하면 영역이 작업과 연결됩니다. 그렇지 않으면 영역이 백그라운드 작업에 연결됩니다.</target>
        </trans-unit>
        <trans-unit id="62be5942fce8ef05c30b8e260f8696b13a223891" translate="yes" xml:space="preserve">
          <source>WithTimeout</source>
          <target state="translated">WithTimeout</target>
        </trans-unit>
        <trans-unit id="a33c8495b67fd90d2c81864d1a61ba4ce0d40352" translate="yes" xml:space="preserve">
          <source>WithTimeout returns WithDeadline(parent, time.Now().Add(timeout)).</source>
          <target state="translated">WithTimeout은 WithDeadline (parent, time.Now (). Add (timeout))을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="279940ad9c32263d7660d6c51743f4751457b645" translate="yes" xml:space="preserve">
          <source>WithValue</source>
          <target state="translated">WithValue</target>
        </trans-unit>
        <trans-unit id="2898c9db2caddba545b8a166da25b81ca353383a" translate="yes" xml:space="preserve">
          <source>WithValue returns a copy of parent in which the value associated with key is val.</source>
          <target state="translated">WithValue는 key와 연관된 값이 val 인 parent의 사본을 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="dfe12e37662d514bcaf6fcc843d9df3dde82c783" translate="yes" xml:space="preserve">
          <source>Within a quoted-field a quote character followed by a second quote character is considered a single quote.</source>
          <target state="translated">따옴표로 묶은 필드 내에서 따옴표 문자와 두 번째 따옴표 문자는 작은 따옴표로 간주됩니다.</target>
        </trans-unit>
        <trans-unit id="901066df97460a79742d81059c2788736730f5c0" translate="yes" xml:space="preserve">
          <source>Within the format string, an underscore _ represents a space that may be replaced by a digit if the following number (a day) has two digits; for compatibility with fixed-width Unix time formats.</source>
          <target state="translated">형식 문자열 내에서 밑줄 _은 다음 숫자 (하루)에 두 자리 숫자가 있으면 숫자로 대체 될 수있는 공백을 나타냅니다. 고정 폭 Unix 시간 형식과의 호환성.</target>
        </trans-unit>
        <trans-unit id="1c2c5d43029917c507b88694188d3a95ec1f427e" translate="yes" xml:space="preserve">
          <source>Within these functions, use the Error, Fail or related methods to signal failure.</source>
          <target state="translated">이러한 기능 내에서 오류, 실패 또는 관련 방법을 사용하여 오류를 알립니다.</target>
        </trans-unit>
        <trans-unit id="4fb5cfd12779f801d815c760deefde65ff5bc667" translate="yes" xml:space="preserve">
          <source>Without the KeepAlive call, the finalizer could run at the start of syscall.Read, closing the file descriptor before syscall.Read makes the actual system call.</source>
          <target state="translated">KeepAlive 호출이 없으면 종료자는 syscall.Read 시작시 실행되어 syscall.Read가 실제 시스템 호출을 수행하기 전에 파일 디스크립터를 닫을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="428a7b20bf173784e9461082a1c6c2949a2b1583" translate="yes" xml:space="preserve">
          <source>WordDecoder.Decode</source>
          <target state="translated">WordDecoder.Decode</target>
        </trans-unit>
        <trans-unit id="122969737c394ec9bcddf4fffdb9da8fe8488ec1" translate="yes" xml:space="preserve">
          <source>WordDecoder.DecodeHeader</source>
          <target state="translated">WordDecoder.DecodeHeader</target>
        </trans-unit>
        <trans-unit id="ca26286ada26b2f279a44ca503bd79bc511af845" translate="yes" xml:space="preserve">
          <source>WordEncoder.Encode</source>
          <target state="translated">WordEncoder.Encode</target>
        </trans-unit>
        <trans-unit id="9edf039575eecbdc47593f3a3127b9885c19c419" translate="yes" xml:space="preserve">
          <source>Wrapper is implemented by types that are backed by a JavaScript value.</source>
          <target state="translated">랩퍼는 JavaScript 값이 지원하는 유형으로 구현됩니다.</target>
        </trans-unit>
        <trans-unit id="4a48932789d199bbed709777e2d743ca2bafdc6c" translate="yes" xml:space="preserve">
          <source>Write</source>
          <target state="translated">Write</target>
        </trans-unit>
        <trans-unit id="44c42e5743dc2d87774645171aeb25d381fb4f87" translate="yes" xml:space="preserve">
          <source>Write (Multi)</source>
          <target state="translated">쓰기 (멀티)</target>
        </trans-unit>
        <trans-unit id="5eb828845650151ac0990caac081e2cd286fb917" translate="yes" xml:space="preserve">
          <source>Write appends the contents of p to b's buffer. Write always returns len(p), nil.</source>
          <target state="translated">Write는 p의 내용을 b의 버퍼에 추가합니다. 쓰기는 항상 len (p), nil을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="b973088870c119f57839cb1ba17bfc298f02ce66" translate="yes" xml:space="preserve">
          <source>Write appends the contents of p to the buffer, growing the buffer as needed. The return value n is the length of p; err is always nil. If the buffer becomes too large, Write will panic with ErrTooLarge.</source>
          <target state="translated">Write는 p의 내용을 버퍼에 추가하여 필요에 따라 버퍼를 증가시킵니다. 리턴 값 n은 p의 길이입니다. err는 항상 nil입니다. 버퍼가 너무 커지면 Write는 ErrTooLarge에 패닉 상태가됩니다.</target>
        </trans-unit>
        <trans-unit id="60ad0a48218711b95918ac117d9d0d440fb89fc0" translate="yes" xml:space="preserve">
          <source>Write calls encode to serialize the file set s.</source>
          <target state="translated">쓰기 호출은 파일 세트를 직렬화하기 위해 인코딩합니다.</target>
        </trans-unit>
        <trans-unit id="4d381bda5cffa89f8c78e5e9e48f6d22b0c0fe8a" translate="yes" xml:space="preserve">
          <source>Write encodes p using quoted-printable encoding and writes it to the underlying io.Writer. It limits line length to 76 characters. The encoded bytes are not necessarily flushed until the Writer is closed.</source>
          <target state="translated">쓰기는 인용 인쇄 가능한 인코딩을 사용하여 p를 인코딩하고 기본 io.Writer에 씁니다. 줄 길이를 76 자로 제한합니다. 기록기가 닫힐 때까지 인코딩 된 바이트가 반드시 플러시되지는 않습니다.</target>
        </trans-unit>
        <trans-unit id="abed405f7389701bb0c85514b2f8df63eaba5491" translate="yes" xml:space="preserve">
          <source>Write implements http.ResponseWriter. The data in buf is written to rw.Body, if not nil.</source>
          <target state="translated">쓰기는 http.ResponseWriter를 구현합니다. buf의 데이터는 0이 아닌 경우 rw.Body에 기록됩니다.</target>
        </trans-unit>
        <trans-unit id="0dd6308ff3bf6bfd3bf539e49da279261acb0c3a" translate="yes" xml:space="preserve">
          <source>Write implements the Conn Write method.</source>
          <target state="translated">Write는 Conn Write 메소드를 구현합니다.</target>
        </trans-unit>
        <trans-unit id="40ae3050f43a58bc383d76e5c6844f88fe681399" translate="yes" xml:space="preserve">
          <source>Write implements the standard Write interface: it writes data to the pipe, blocking until one or more readers have consumed all the data or the read end is closed. If the read end is closed with an error, that err is returned as err; otherwise err is ErrClosedPipe.</source>
          <target state="translated">Write는 표준 Write 인터페이스를 구현합니다. 파이프에 데이터를 기록하여 하나 이상의 리더가 모든 데이터를 사용하거나 읽기 끝이 닫힐 때까지 차단합니다. 읽기 종료가 오류와 함께 닫히면 해당 err이 err로 리턴됩니다. 그렇지 않으면 err은 ErrClosedPipe입니다.</target>
        </trans-unit>
        <trans-unit id="9b4e831d3734f201df9676e633bc0a291038b26a" translate="yes" xml:space="preserve">
          <source>Write sends a log message to the syslog daemon.</source>
          <target state="translated">Write는 로그 메시지를 syslog 데몬으로 보냅니다.</target>
        </trans-unit>
        <trans-unit id="fcbd0cbe7dbf34b528b9d5e4c3ddbc95f5c5bc1c" translate="yes" xml:space="preserve">
          <source>Write writes a compressed form of p to the underlying io.Writer. The compressed bytes are not necessarily flushed until the Writer is closed or explicitly flushed.</source>
          <target state="translated">Write는 압축 된 형태의 p를 기본 io.Writer에 씁니다. Writer가 닫히거나 명시 적으로 플러시 될 때까지 압축 된 바이트가 반드시 플러시되지는 않습니다.</target>
        </trans-unit>
        <trans-unit id="df6d5ec5f9e15cdd83d68aca607ef7b43da4dca2" translate="yes" xml:space="preserve">
          <source>Write writes a compressed form of p to the underlying io.Writer. The compressed bytes are not necessarily flushed until the Writer is closed.</source>
          <target state="translated">Write는 압축 된 형태의 p를 기본 io.Writer에 씁니다. 기록기가 닫힐 때까지 압축 된 바이트가 반드시 플러시되지는 않습니다.</target>
        </trans-unit>
        <trans-unit id="f5afb6da9a73d93fa35e1f17efdeec955deb05f0" translate="yes" xml:space="preserve">
          <source>Write writes a header in wire format.</source>
          <target state="translated">쓰기는 헤더를 유선 형식으로 씁니다.</target>
        </trans-unit>
        <trans-unit id="1dd8b6e982bed7434f946dd63ac00a5595f87b17" translate="yes" xml:space="preserve">
          <source>Write writes a request. An ErrPersistEOF error is returned if the connection has been closed in an HTTP keep-alive sense. If req.Close equals true, the keep-alive connection is logically closed after this request and the opposing server is informed. An ErrUnexpectedEOF indicates the remote closed the underlying TCP connection, which is usually considered as graceful close.</source>
          <target state="translated">쓰기 요청을 씁니다. 연결이 HTTP 연결 유지 의미로 닫힌 경우 ErrPersistEOF 오류가 리턴됩니다. req.Close가 true이면이 요청 후에 연결 유지 연결이 논리적으로 닫히고 상대 서버에 알립니다. ErrUnexpectedEOF는 원격이 기본 TCP 연결을 닫았 음을 나타내며 일반적으로 정상 종료로 간주됩니다.</target>
        </trans-unit>
        <trans-unit id="c84078d3fc4fa89a2b25f7737991bb090acc5be4" translate="yes" xml:space="preserve">
          <source>Write writes a single CSV record to w along with any necessary quoting. A record is a slice of strings with each string being one field. Writes are buffered, so Flush must eventually be called to ensure that the record is written to the underlying io.Writer.</source>
          <target state="translated">쓰기는 필요한 인용 부호와 함께 단일 CSV 레코드를 w에 씁니다. 레코드는 각 문자열이 하나의 필드 인 문자열 조각입니다. 쓰기는 버퍼링되므로 레코드가 기본 io.Writer에 쓰여지도록 Flush를 호출해야합니다.</target>
        </trans-unit>
        <trans-unit id="1b1f8c7998d40b420b2a6a020d42520c0cfdb552" translate="yes" xml:space="preserve">
          <source>Write writes an HTTP/1.1 request, which is the header and body, in wire format. This method consults the following fields of the request:</source>
          <target state="translated">쓰기는 헤더 및 본문 인 HTTP / 1.1 요청을 유선 형식으로 작성합니다. 이 방법은 요청의 다음 필드를 참조합니다.</target>
        </trans-unit>
        <trans-unit id="0668c9219aeba7077b51b78a1b8f39636f232281" translate="yes" xml:space="preserve">
          <source>Write writes buf to the writer b. The only errors returned are ones encountered while writing to the underlying output stream.</source>
          <target state="translated">작가에게 buf를 쓴다. b. 반환되는 유일한 오류는 기본 출력 스트림에 쓰는 동안 발생한 오류입니다.</target>
        </trans-unit>
        <trans-unit id="82a04e0fc25183cb5f9b91509c74fe012f744729" translate="yes" xml:space="preserve">
          <source>Write writes data to the connection.</source>
          <target state="translated">쓰기는 연결에 데이터를 씁니다.</target>
        </trans-unit>
        <trans-unit id="ec334dcff7799f1d647716dee3ecbc314693f181" translate="yes" xml:space="preserve">
          <source>Write writes data to w, which will eventually write the compressed form of data to its underlying writer.</source>
          <target state="translated">쓰기는 데이터를 w에 씁니다. 결국 압축 된 데이터 형식을 기본 작성기에 기록합니다.</target>
        </trans-unit>
        <trans-unit id="b3b5ffbd7094344c5c64fdfaaee4e1ac8b0d0d73" translate="yes" xml:space="preserve">
          <source>Write writes len(b) bytes to the File. It returns the number of bytes written and an error, if any. Write returns a non-nil error when n != len(b).</source>
          <target state="translated">쓰기는 len (b) 바이트를 파일에 씁니다. 작성된 바이트 수와 오류가있는 경우이를 리턴합니다. n! = len (b) 인 경우 Write는 비 -nil 오류를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="bc6f468fb42c60c9aa3d3403f67792ca68e56337" translate="yes" xml:space="preserve">
          <source>Write writes len(p) bytes from p to the underlying data stream. It returns the number of bytes written from p (0 &amp;lt;= n &amp;lt;= len(p)) and any error encountered that caused the write to stop early. Write must return a non-nil error if it returns n &amp;lt; len(p). Write must not modify the slice data, even temporarily.</source>
          <target state="translated">Write는 len (p) 바이트를 p에서 기본 데이터 스트림으로 씁니다. p (0 &amp;lt;= n &amp;lt;= len (p))에서 쓴 바이트 수와 쓰기가 일찍 중지되게하는 오류가 발생했습니다. 쓰기는 n &amp;lt;len (p)를 반환하면 non-nil 오류를 반환해야합니다. 쓰기는 슬라이스 데이터를 일시적으로 수정하지 않아야합니다.</target>
        </trans-unit>
        <trans-unit id="8d63636955bd89c2cf8a7af170c604cdce197b80" translate="yes" xml:space="preserve">
          <source>Write writes r to w in the HTTP/1.x server response format, including the status line, headers, body, and optional trailer.</source>
          <target state="translated">쓰기는 상태 표시 줄, 헤더, 본문 및 선택적 트레일러를 포함하여 HTTP / 1.x 서버 응답 형식으로 r에 w를 씁니다.</target>
        </trans-unit>
        <trans-unit id="540dcdd5a6a217068d019b75b00fcd61e7a04d31" translate="yes" xml:space="preserve">
          <source>Write writes resp in response to req. To close the connection gracefully, set the Response.Close field to true. Write should be considered operational until it returns an error, regardless of any errors returned on the Read side.</source>
          <target state="translated">요청은 req에 대한 응답으로 resp를 씁니다. 연결을 정상적으로 닫으려면 Response.Close 필드를 true로 설정하십시오. 읽기 쪽에서 반환 된 오류에 관계없이 오류가 반환 될 때까지 쓰기가 작동 가능한 것으로 간주되어야합니다.</target>
        </trans-unit>
        <trans-unit id="67e15dd48b8a4dfa3a0d9587fc9c9c38dda0a150" translate="yes" xml:space="preserve">
          <source>Write writes the binary representation of data into w. Data must be a fixed-size value or a slice of fixed-size values, or a pointer to such data. Boolean values encode as one byte: 1 for true, and 0 for false. Bytes written to w are encoded using the specified byte order and read from successive fields of the data. When writing structs, zero values are written for fields with blank (_) field names.</source>
          <target state="translated">쓰기는 데이터의 이진 표현을 w에 씁니다. 데이터는 고정 크기 값 또는 고정 크기 값 조각이거나 이러한 데이터에 대한 포인터 여야합니다. 부울 값은 1 바이트로 인코딩됩니다. 1은 true, 0은 false입니다. w에 기록 된 바이트는 지정된 바이트 순서를 사용하여 인코딩되고 데이터의 연속 필드에서 읽습니다. 구조체를 쓸 때 공백 (_) 필드 이름을 가진 필드에 대해 0 값이 기록됩니다.</target>
        </trans-unit>
        <trans-unit id="1aedca15daa2824cc7a6db34a6e59e022ccdde6b" translate="yes" xml:space="preserve">
          <source>Write writes the contents of p into the buffer. It returns the number of bytes written. If nn &amp;lt; len(p), it also returns an error explaining why the write is short.</source>
          <target state="translated">Write는 p의 내용을 버퍼에 씁니다. 쓴 바이트 수를 반환합니다. nn &amp;lt;len (p) 인 경우 쓰기가 짧은 이유를 설명하는 오류도 반환합니다.</target>
        </trans-unit>
        <trans-unit id="979c6b0be612eaeecc0a5795d58b592f39b6a7cc" translate="yes" xml:space="preserve">
          <source>Write writes the index x to w.</source>
          <target state="translated">쓰기는 인덱스 x를 w에 씁니다.</target>
        </trans-unit>
        <trans-unit id="4bb1c277541d19952bb3d44e887bd82c7760bdb9" translate="yes" xml:space="preserve">
          <source>Write writes to the current file in the tar archive. Write returns the error ErrWriteTooLong if more than Header.Size bytes are written after WriteHeader.</source>
          <target state="translated">쓰기 tar 아카이브의 현재 파일에 씁니다. WriteHeader 이후에 Header.Size 바이트보다 많은 바이트가 기록되면 Write 오류 ErrWriteTooLong을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="0224fd253898a9aef4ac0177d7201684f5813e08" translate="yes" xml:space="preserve">
          <source>WriteAll writes multiple CSV records to w using Write and then calls Flush, returning any error from the Flush.</source>
          <target state="translated">WriteAll은 Write를 사용하여 여러 CSV 레코드를 w에 쓴 다음 Flush를 호출하여 Flush에서 오류를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="577d19fec1f13e0c1b297c086a7a9e7aaffc9552" translate="yes" xml:space="preserve">
          <source>WriteAt writes len(b) bytes to the File starting at byte offset off. It returns the number of bytes written and an error, if any. WriteAt returns a non-nil error when n != len(b).</source>
          <target state="translated">WriteAt은 len (b) 바이트를 바이트 오프셋 오프에서 시작하여 파일에 씁니다. 작성된 바이트 수와 오류가있는 경우이를 리턴합니다. WriteAt는 n! = len (b) 인 경우 비 -nil 오류를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="913c43952e7ba95faf4dd01c5c3386903926e88f" translate="yes" xml:space="preserve">
          <source>WriteAt writes len(p) bytes from p to the underlying data stream at offset off. It returns the number of bytes written from p (0 &amp;lt;= n &amp;lt;= len(p)) and any error encountered that caused the write to stop early. WriteAt must return a non-nil error if it returns n &amp;lt; len(p).</source>
          <target state="translated">WriteAt은 오프셋 off에서 len (p) 바이트를 p에서 기본 데이터 스트림으로 씁니다. p (0 &amp;lt;= n &amp;lt;= len (p))에서 쓴 바이트 수와 쓰기가 일찍 중지되게하는 오류가 발생했습니다. WriteAt은 n &amp;lt;len (p)를 반환하면 넌이 아닌 오류를 반환해야합니다.</target>
        </trans-unit>
        <trans-unit id="299aad410b1c59608b367a7d4cb870a456df8096" translate="yes" xml:space="preserve">
          <source>WriteByte appends the byte c to b's buffer. The returned error is always nil.</source>
          <target state="translated">WriteByte는 바이트 c를 b의 버퍼에 추가합니다. 반환 된 오류는 항상 nil입니다.</target>
        </trans-unit>
        <trans-unit id="f1124aa2cccac4bc8c094488b7bc39b62c0cdd5a" translate="yes" xml:space="preserve">
          <source>WriteByte appends the byte c to the buffer, growing the buffer as needed. The returned error is always nil, but is included to match bufio.Writer's WriteByte. If the buffer becomes too large, WriteByte will panic with ErrTooLarge.</source>
          <target state="translated">WriteByte는 바이트 c를 버퍼에 추가하여 필요에 따라 버퍼를 증가시킵니다. 반환 된 오류는 항상 0이지만 bufio.Writer의 WriteByte와 일치하도록 포함됩니다. 버퍼가 너무 커지면 WriteByte가 ErrTooLarge와 함께 패닉 상태가됩니다.</target>
        </trans-unit>
        <trans-unit id="709e9a78ca951be47b51eaa8c43161a4a68b13de" translate="yes" xml:space="preserve">
          <source>WriteByte writes a single byte.</source>
          <target state="translated">WriteByte는 단일 바이트를 씁니다.</target>
        </trans-unit>
        <trans-unit id="b0fa0c9c90b10c53cd3030a178df8c5bc4b748e3" translate="yes" xml:space="preserve">
          <source>WriteCloser is the interface that groups the basic Write and Close methods.</source>
          <target state="translated">WriteCloser는 기본 Write 및 Close 메서드를 그룹화하는 인터페이스입니다.</target>
        </trans-unit>
        <trans-unit id="a5b4dc8d0bfd74b6d0a363e79ed44899e4d10a7a" translate="yes" xml:space="preserve">
          <source>WriteExpr writes the (possibly shortened) string representation for x to buf. Shortened representations are suitable for user interfaces but may not necessarily follow Go syntax.</source>
          <target state="translated">WriteExpr은 x에 대한 (짧게 단축 된) 문자열 표현을 buf에 씁니다. 단축 표현은 사용자 인터페이스에 적합하지만 반드시 Go 구문을 따르지는 않을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a2fc53b6ae37f84446440bfa3e46d55b1daae44f" translate="yes" xml:space="preserve">
          <source>WriteField calls CreateFormField and then writes the given value.</source>
          <target state="translated">WriteField는 CreateFormField를 호출 한 다음 주어진 값을 씁니다.</target>
        </trans-unit>
        <trans-unit id="94dee2fafe1d10d5ce6db659eb0c0fcb3d5842be" translate="yes" xml:space="preserve">
          <source>WriteFile</source>
          <target state="translated">WriteFile</target>
        </trans-unit>
        <trans-unit id="ef73f34a1517d5e481c55ca7ffbc2a25494b2019" translate="yes" xml:space="preserve">
          <source>WriteFile writes data to a file named by filename. If the file does not exist, WriteFile creates it with permissions perm; otherwise WriteFile truncates it before writing.</source>
          <target state="translated">WriteFile은 filename이라는 이름의 파일에 데이터를 씁니다. 파일이 존재하지 않으면 WriteFile은 perm 권한으로 파일을 작성합니다. 그렇지 않으면 WriteFile은 쓰기 전에 파일을 자릅니다.</target>
        </trans-unit>
        <trans-unit id="966a2c28275a12b7d85d4ef9e4fb4bdd7daf03b9" translate="yes" xml:space="preserve">
          <source>WriteHeader implements http.ResponseWriter.</source>
          <target state="translated">WriteHeader는 http.ResponseWriter를 구현합니다.</target>
        </trans-unit>
        <trans-unit id="5278a175f457ff599653e584e10d0da21d75e04a" translate="yes" xml:space="preserve">
          <source>WriteHeader writes hdr and prepares to accept the file's contents. The Header.Size determines how many bytes can be written for the next file. If the current file is not fully written, then this returns an error. This implicitly flushes any padding necessary before writing the header.</source>
          <target state="translated">WriteHeader는 hdr을 작성하고 파일 내용을 받아 들일 준비를합니다. Header.Size는 다음 파일에 쓸 수있는 바이트 수를 결정합니다. 현재 파일이 완전히 작성되지 않은 경우 오류가 반환됩니다. 헤더를 작성하기 전에 필요한 패딩을 암시 적으로 플러시합니다.</target>
        </trans-unit>
        <trans-unit id="3ca8ba0518cad3338405c38e79e75e9c13b24b43" translate="yes" xml:space="preserve">
          <source>WriteHeapDump suspends the execution of all goroutines until the heap dump is completely written. Thus, the file descriptor must not be connected to a pipe or socket whose other end is in the same Go process; instead, use a temporary file or network socket.</source>
          <target state="translated">WriteHeapDump는 힙 덤프가 완전히 작성 될 때까지 모든 고 루틴 실행을 일시 중단합니다. 따라서 파일 디스크립터는 다른 쪽 끝이 동일한 Go 프로세스에있는 파이프 또는 소켓에 연결되어서는 안됩니다. 대신 임시 파일이나 네트워크 소켓을 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="6a06afdd85eafc1200fe0ffc3dbde0309767d7ac" translate="yes" xml:space="preserve">
          <source>WriteHeapDump writes a description of the heap and the objects in it to the given file descriptor.</source>
          <target state="translated">WriteHeapDump는 힙 및 그 안의 오브젝트에 대한 설명을 지정된 파일 설명자에 씁니다.</target>
        </trans-unit>
        <trans-unit id="e3abbd24fb479c9ecfc16a57b4a2dfe1f2c03f20" translate="yes" xml:space="preserve">
          <source>WriteHeapProfile is shorthand for Lookup(&quot;heap&quot;).WriteTo(w, 0). It is preserved for backwards compatibility.</source>
          <target state="translated">WriteHeapProfile은 Lookup ( &quot;heap&quot;). WriteTo (w, 0)의 줄임말입니다. 이전 버전과의 호환성을 위해 보존됩니다.</target>
        </trans-unit>
        <trans-unit id="60029a6d43efd94d3594516e2528881eb15af008" translate="yes" xml:space="preserve">
          <source>WriteMsgIP writes a message to addr via c, copying the payload from b and the associated out-of-band data from oob. It returns the number of payload and out-of-band bytes written.</source>
          <target state="translated">WriteMsgIP는 c를 통해 addr에 메시지를 작성하고 b의 페이로드와 oob의 관련 대역 외 데이터를 복사합니다. 쓰여진 페이로드 및 대역 외 바이트 수를 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="97f4683eac3d5fc32a65061e292f2190af0bf38c" translate="yes" xml:space="preserve">
          <source>WriteMsgUDP writes a message to addr via c if c isn't connected, or to c's remote address if c is connected (in which case addr must be nil). The payload is copied from b and the associated out-of-band data is copied from oob. It returns the number of payload and out-of-band bytes written.</source>
          <target state="translated">WriteMsgUDP는 c가 연결되어 있지 않으면 c를 통해 addr에, c가 연결되어 있으면 c의 원격 주소에 메시지를 씁니다 (이 경우 addr는 nil이어야 함). 페이로드는 b에서 복사되고 연관된 대역 외 데이터는 oob에서 복사됩니다. 쓰여진 페이로드 및 대역 외 바이트 수를 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="8193c21ac5c2ea950e2bde14d77250380df04e5a" translate="yes" xml:space="preserve">
          <source>WriteMsgUnix writes a message to addr via c, copying the payload from b and the associated out-of-band data from oob. It returns the number of payload and out-of-band bytes written.</source>
          <target state="translated">WriteMsgUnix는 c를 통해 addr에 메시지를 작성하고 b의 페이로드와 oob의 관련 대역 외 데이터를 복사합니다. 쓰여진 페이로드 및 대역 외 바이트 수를 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="05a4cbe90da51b5a60d7ce652f38c76395d34c38" translate="yes" xml:space="preserve">
          <source>WriteProxy is like Write but writes the request in the form expected by an HTTP proxy. In particular, WriteProxy writes the initial Request-URI line of the request with an absolute URI, per section 5.3 of RFC 7230, including the scheme and host. In either case, WriteProxy also writes a Host header, using either r.Host or r.URL.Host.</source>
          <target state="translated">WriteProxy는 Write와 비슷하지만 요청을 HTTP 프록시가 예상하는 형식으로 씁니다. 특히, WriteProxy는 스킴과 호스트를 포함하여 RFC 7230의 섹션 5.3에 따라 절대 URI로 요청의 초기 Request-URI 라인을 작성합니다. 두 경우 모두 WriteProxy는 r.Host 또는 r.URL.Host를 사용하여 호스트 헤더를 작성합니다.</target>
        </trans-unit>
        <trans-unit id="c69fd535ec2a61d9f0cd55c49694d03e060751bc" translate="yes" xml:space="preserve">
          <source>WriteRune appends the UTF-8 encoding of Unicode code point r to b's buffer. It returns the length of r and a nil error.</source>
          <target state="translated">WriteRune은 유니 코드 코드 포인트 r의 UTF-8 인코딩을 b의 버퍼에 추가합니다. r의 길이와 nil 오류를 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="50419d360e1454c08d1e726980bb9af5c883fdf2" translate="yes" xml:space="preserve">
          <source>WriteRune appends the UTF-8 encoding of Unicode code point r to the buffer, returning its length and an error, which is always nil but is included to match bufio.Writer's WriteRune. The buffer is grown as needed; if it becomes too large, WriteRune will panic with ErrTooLarge.</source>
          <target state="translated">WriteRune은 유니 코드 코드 포인트 r의 UTF-8 인코딩을 버퍼에 추가하여 길이와 오류를 반환합니다.이 길이는 항상 0이지만 bufio.Writer의 WriteRune과 일치하도록 포함되어 있습니다. 버퍼는 필요에 따라 성장합니다. 너무 커지면 WriteRune이 ErrTooLarge로 패닉 상태가됩니다.</target>
        </trans-unit>
        <trans-unit id="8539205ffda07e4fc93063bbff49ea5a24bdfb57" translate="yes" xml:space="preserve">
          <source>WriteRune writes a single Unicode code point, returning the number of bytes written and any error.</source>
          <target state="translated">WriteRune은 하나의 유니 코드 코드 포인트를 작성하여 쓴 바이트 수와 오류를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="c4cdb9aa52cc1444def4915c41a6238a5b9dce01" translate="yes" xml:space="preserve">
          <source>WriteSeeker is the interface that groups the basic Write and Seek methods.</source>
          <target state="translated">WriteSeeker는 기본 Write 및 Seek 메서드를 그룹화하는 인터페이스입니다.</target>
        </trans-unit>
        <trans-unit id="4c4e530f7fc3720d0a0b9dd1699773a51975bcd0" translate="yes" xml:space="preserve">
          <source>WriteSignature writes the representation of the signature sig to buf, without a leading &quot;func&quot; keyword. The Qualifier controls the printing of package-level objects, and may be nil.</source>
          <target state="translated">WriteSignature는 주요 &quot;func&quot;키워드없이 서명 sig의 표현을 buf에 씁니다. 한정자는 패키지 수준 개체의 인쇄를 제어하며 nil 일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2fafa28d75b28a484b0d11704a5f73dc2a397a9b" translate="yes" xml:space="preserve">
          <source>WriteString</source>
          <target state="translated">WriteString</target>
        </trans-unit>
        <trans-unit id="dcea71a3d2530b8c16e73859a42e5c1339cc7b3a" translate="yes" xml:space="preserve">
          <source>WriteString appends the contents of s to b's buffer. It returns the length of s and a nil error.</source>
          <target state="translated">WriteString은 s의 내용을 b의 버퍼에 추가합니다. s의 길이와 nil 오류를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="f0863225004b8002965c5f1f30cabf45ec0ce003" translate="yes" xml:space="preserve">
          <source>WriteString appends the contents of s to the buffer, growing the buffer as needed. The return value n is the length of s; err is always nil. If the buffer becomes too large, WriteString will panic with ErrTooLarge.</source>
          <target state="translated">WriteString은 s의 내용을 버퍼에 추가하여 필요에 따라 버퍼를 증가시킵니다. 리턴 값 n은 s의 길이입니다. err는 항상 nil입니다. 버퍼가 너무 커지면 WriteString은 ErrTooLarge와 함께 패닉 상태가됩니다.</target>
        </trans-unit>
        <trans-unit id="5906492d4ad1f77da2e42a5903d5b14910e74bdc" translate="yes" xml:space="preserve">
          <source>WriteString implements io.StringWriter. The data in str is written to rw.Body, if not nil.</source>
          <target state="translated">WriteString은 io.StringWriter를 구현합니다. str의 데이터는 0이 아닌 경우 rw.Body에 기록됩니다.</target>
        </trans-unit>
        <trans-unit id="2881565b760b26a4f8a2f57e00f09267df1fc3c7" translate="yes" xml:space="preserve">
          <source>WriteString is like Write, but writes the contents of string s rather than a slice of bytes.</source>
          <target state="translated">WriteString은 Write와 비슷하지만 바이트 조각이 아닌 string s의 내용을 씁니다.</target>
        </trans-unit>
        <trans-unit id="5e86374df4dcf5990aedc6d23a06ec17779ecb41" translate="yes" xml:space="preserve">
          <source>WriteString writes a string. It returns the number of bytes written. If the count is less than len(s), it also returns an error explaining why the write is short.</source>
          <target state="translated">WriteString은 문자열을 씁니다. 쓴 바이트 수를 반환합니다. 카운트가 len (s)보다 작 으면 쓰기가 왜 짧은지를 설명하는 오류도 반환합니다.</target>
        </trans-unit>
        <trans-unit id="b06770a08018ebad1f55b3701993d6f12040309c" translate="yes" xml:space="preserve">
          <source>WriteString writes s to w with all replacements performed.</source>
          <target state="translated">WriteString은 모든 교체가 수행 된 상태에서 s를 w에 기록합니다.</target>
        </trans-unit>
        <trans-unit id="269915f1206072ee8dbb37610e3b9dfdc6260f9a" translate="yes" xml:space="preserve">
          <source>WriteString writes the contents of the string s to w, which accepts a slice of bytes. If w implements StringWriter, its WriteString method is invoked directly. Otherwise, w.Write is called exactly once.</source>
          <target state="translated">WriteString은 문자열 s의 내용을 w에 씁니다. 이는 바이트 슬라이스를 허용합니다. w가 StringWriter를 구현하면 해당 WriteString 메소드가 직접 호출됩니다. 그렇지 않으면 w.Write가 정확히 한 번 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="14e283952e32e7284849c90772991995a0d08383" translate="yes" xml:space="preserve">
          <source>WriteSubset writes a header in wire format. If exclude is not nil, keys where exclude[key] == true are not written.</source>
          <target state="translated">WriteSubset은 헤더를 유선 형식으로 씁니다. exclude가 nil이 아닌 경우 exclude [key] == true 인 키는 기록되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="049d63dec358580d0ec0653e5b3c153d3b077135" translate="yes" xml:space="preserve">
          <source>WriteTo implements io.WriterTo. This may make multiple calls to the Read method of the underlying Reader. If the underlying reader supports the WriteTo method, this calls the underlying WriteTo without buffering.</source>
          <target state="translated">WriteTo는 io.WriterTo를 구현합니다. 기본 Reader의 Read 메서드를 여러 번 호출 할 수 있습니다. 기본 리더가 WriteTo 메서드를 지원하면 버퍼링없이 기본 WriteTo를 호출합니다.</target>
        </trans-unit>
        <trans-unit id="8139263f4318d7564d44a96fc8dbff5e63bb96fd" translate="yes" xml:space="preserve">
          <source>WriteTo implements the PacketConn WriteTo method.</source>
          <target state="translated">WriteTo는 PacketConn WriteTo 메서드를 구현합니다.</target>
        </trans-unit>
        <trans-unit id="1dd6cb0fb603b3372044d7453914baf64dbeabc3" translate="yes" xml:space="preserve">
          <source>WriteTo implements the io.WriterTo interface.</source>
          <target state="translated">WriteTo는 io.WriterTo 인터페이스를 구현합니다.</target>
        </trans-unit>
        <trans-unit id="8c7bb5378a7a840f064c83d707986b7492eb31e2" translate="yes" xml:space="preserve">
          <source>WriteTo writes a pprof-formatted snapshot of the profile to w. If a write to w returns an error, WriteTo returns that error. Otherwise, WriteTo returns nil.</source>
          <target state="translated">WriteTo는 pprof 형식의 프로파일 스냅 샷을 w에 씁니다. w에 쓰기가 오류를 리턴하면 WriteTo는 해당 오류를 리턴합니다. 그렇지 않으면 WriteTo는 nil을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="489e07f5de5485be9543961aadd05292560f9aca" translate="yes" xml:space="preserve">
          <source>WriteTo writes a string representation of the scope to w, with the scope elements sorted by name. The level of indentation is controlled by n &amp;gt;= 0, with n == 0 for no indentation. If recurse is set, it also writes nested (children) scopes.</source>
          <target state="translated">WriteTo는 범위 요소를 이름별로 정렬하여 범위의 문자열 표현을 w에 씁니다. 들여 쓰기 수준은 들여 쓰기가 없으면 n&amp;gt; = 0으로 n&amp;gt; = 0으로 제어됩니다. 재귀가 설정되면 중첩 (자식) 범위도 씁니다.</target>
        </trans-unit>
        <trans-unit id="d1e7dcb553ab192fce6fd288394665a1afcd3f5c" translate="yes" xml:space="preserve">
          <source>WriteTo writes data to w until the buffer is drained or an error occurs. The return value n is the number of bytes written; it always fits into an int, but it is int64 to match the io.WriterTo interface. Any error encountered during the write is also returned.</source>
          <target state="translated">WriteTo는 버퍼가 비워 지거나 오류가 발생할 때까지 데이터를 w에 기록합니다. 리턴 값 n은 쓴 바이트 수입니다. 항상 int에 맞지만 io.WriterTo 인터페이스와 일치하는 것은 int64입니다. 쓰기 중에 발생한 모든 오류도 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="675b06c215e20183689acb9dd6a02dde0ececcfe" translate="yes" xml:space="preserve">
          <source>WriteTo writes data to w until there's no more data to write or when an error occurs. The return value n is the number of bytes written. Any error encountered during the write is also returned.</source>
          <target state="translated">WriteTo는 쓸 데이터가 더 이상 없거나 오류가 발생할 때까지 w에 데이터를 씁니다. 리턴 값 n은 쓴 바이트 수입니다. 쓰기 중에 발생한 모든 오류도 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="16524feb66448f891798c4e2c2b003dede383877" translate="yes" xml:space="preserve">
          <source>WriteToIP acts like WriteTo but takes an IPAddr.</source>
          <target state="translated">WriteToIP는 WriteTo처럼 작동하지만 IPAddr을 사용합니다.</target>
        </trans-unit>
        <trans-unit id="5439ba90be07d98d78a0acbb16e701c88430c920" translate="yes" xml:space="preserve">
          <source>WriteToUDP acts like WriteTo but takes a UDPAddr.</source>
          <target state="translated">WriteToUDP는 WriteTo처럼 작동하지만 UDPAddr을 사용합니다.</target>
        </trans-unit>
        <trans-unit id="70bfc7011539dc3fcd8cb976e79375745c81efb6" translate="yes" xml:space="preserve">
          <source>WriteToUnix acts like WriteTo but takes a UnixAddr.</source>
          <target state="translated">WriteToUnix는 WriteTo처럼 작동하지만 UnixAddr을 사용합니다.</target>
        </trans-unit>
        <trans-unit id="bf93ade9d0116866c9989c0d6db8fe0a1790197b" translate="yes" xml:space="preserve">
          <source>WriteType writes the string representation of typ to buf. The Qualifier controls the printing of package-level objects, and may be nil.</source>
          <target state="translated">WriteType은 typ의 문자열 표현을 buf에 기록합니다. 한정자는 패키지 수준 개체의 인쇄를 제어하며 nil 일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5f435830a7c07f19c4072a88821b38028c3f69e6" translate="yes" xml:space="preserve">
          <source>Writer</source>
          <target state="translated">Writer</target>
        </trans-unit>
        <trans-unit id="27739d4166f1a372ecad9e26dae552acbbf96378" translate="yes" xml:space="preserve">
          <source>Writer implements a zip file writer.</source>
          <target state="translated">기록기는 zip 파일 기록기를 구현합니다.</target>
        </trans-unit>
        <trans-unit id="0a56b3c1ebc71cca6811d5ea42cfcd61b9d39529" translate="yes" xml:space="preserve">
          <source>Writer implements buffering for an io.Writer object. If an error occurs writing to a Writer, no more data will be accepted and all subsequent writes, and Flush, will return the error. After all data has been written, the client should call the Flush method to guarantee all data has been forwarded to the underlying io.Writer.</source>
          <target state="translated">Writer는 io.Writer 객체에 대한 버퍼링을 구현합니다. Writer에 쓰는 동안 오류가 발생하면 더 이상 데이터가 허용되지 않으며 이후의 모든 쓰기 및 Flush는 오류를 반환합니다. 모든 데이터가 작성된 후 클라이언트는 Flush 메소드를 호출하여 모든 데이터가 기본 io.Writer로 전달되도록해야합니다.</target>
        </trans-unit>
        <trans-unit id="ef9d03832983cf4b271bb5441f954111b4dc0e1e" translate="yes" xml:space="preserve">
          <source>Writer is the interface that wraps the basic Write method.</source>
          <target state="translated">Writer는 기본 Write 메서드를 래핑하는 인터페이스입니다.</target>
        </trans-unit>
        <trans-unit id="427cfe70a00ca8d321faf6329909145b93655f1d" translate="yes" xml:space="preserve">
          <source>Writer provides sequential writing of a tar archive. Write.WriteHeader begins a new file with the provided Header, and then Writer can be treated as an io.Writer to supply that file's data.</source>
          <target state="translated">기록기는 tar 아카이브의 순차적 기록을 제공합니다. Write.WriteHeader는 제공된 헤더로 새 파일을 시작한 다음 Writer를 io.Writer로 처리하여 해당 파일의 데이터를 제공 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="7acd853acb07fa87c4b8bfe4031a755b61ba3bf3" translate="yes" xml:space="preserve">
          <source>Writer returns the output destination for the logger.</source>
          <target state="translated">기록기는 로거의 출력 대상을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="3d5fe142bef0cbbd3b816be820156528e0933482" translate="yes" xml:space="preserve">
          <source>Writer returns the output destination for the standard logger.</source>
          <target state="translated">Writer는 표준 로거의 출력 대상을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="cc5f6bbc6d4441180bb267f283d2d032dc1c0a51" translate="yes" xml:space="preserve">
          <source>Writer, to write dot-encoded text blocks.</source>
          <target state="translated">Writer, 도트로 인코딩 된 텍스트 블록을 작성합니다.</target>
        </trans-unit>
        <trans-unit id="18f7957bfe6eb1c4e6c6911f16343b2aefa987f8" translate="yes" xml:space="preserve">
          <source>Writer.Init</source>
          <target state="translated">Writer.Init</target>
        </trans-unit>
        <trans-unit id="c077ca30988f9da9fa06bdada12777468be255fd" translate="yes" xml:space="preserve">
          <source>Writer.RegisterCompressor</source>
          <target state="translated">Writer.RegisterCompressor</target>
        </trans-unit>
        <trans-unit id="52b3549fe3dc7eeb9e682e0957e12c6a11a932c4" translate="yes" xml:space="preserve">
          <source>Writer.WriteAll</source>
          <target state="translated">Writer.WriteAll</target>
        </trans-unit>
        <trans-unit id="aeee2e0685aa932cc2aaeffa26f77224718c1152" translate="yes" xml:space="preserve">
          <source>WriterAt is the interface that wraps the basic WriteAt method.</source>
          <target state="translated">WriterAt는 기본 WriteAt 메서드를 래핑하는 인터페이스입니다.</target>
        </trans-unit>
        <trans-unit id="8ab71dde8a6f8d04cee549ea8541c77aaebdcab8" translate="yes" xml:space="preserve">
          <source>WriterTo is the interface that wraps the WriteTo method.</source>
          <target state="translated">WriterTo는 WriteTo 메서드를 래핑하는 인터페이스입니다.</target>
        </trans-unit>
        <trans-unit id="1b39f0e4afe7201d767e5fbbce52d4c2e5b87a3a" translate="yes" xml:space="preserve">
          <source>WroteRequestInfo contains information provided to the WroteRequest hook.</source>
          <target state="translated">WroteRequestInfo에는 WroteRequest 후크에 제공된 정보가 포함되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="127aef9b4a6638a4da9d60eee45faca81817967a" translate="yes" xml:space="preserve">
          <source>X509KeyPair</source>
          <target state="translated">X509KeyPair</target>
        </trans-unit>
        <trans-unit id="512f6338fce5f83658ade589125789680e0a180a" translate="yes" xml:space="preserve">
          <source>X509KeyPair (HttpServer)</source>
          <target state="translated">X509KeyPair (HttpServer)</target>
        </trans-unit>
        <trans-unit id="eb6cfabefa86cc7130f0ceaa6c99558292a8fb32" translate="yes" xml:space="preserve">
          <source>X509KeyPair parses a public/private key pair from a pair of PEM encoded data. On successful return, Certificate.Leaf will be nil because the parsed form of the certificate is not retained.</source>
          <target state="translated">X509KeyPair는 PEM으로 인코딩 된 데이터 쌍에서 공개 / 개인 키 쌍을 구문 분석합니다. 성공적으로 반환되면 구문 분석 된 인증서 형식이 유지되지 않으므로 Certificate.Leaf는 0이 아닙니다.</target>
        </trans-unit>
        <trans-unit id="db992a4f131e511a8d9ce5936d82355a68509183" translate="yes" xml:space="preserve">
          <source>XORKeyStream sets dst to the result of XORing src with the key stream. Dst and src must overlap entirely or not at all.</source>
          <target state="translated">XORKeyStream은 dst를 키 스트림과 함께 XORing src의 결과로 설정합니다. Dst와 src는 완전히 겹치거나 겹치지 않아야합니다.</target>
        </trans-unit>
        <trans-unit id="63c6c5be8d1c945e475df745ac44a459209b8818" translate="yes" xml:space="preserve">
          <source>Xor sets z = x ^ y and returns z.</source>
          <target state="translated">Xor는 z = x ^ y를 설정하고 z를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="b579a9d9b11366f490071fb238c298157a4151d9" translate="yes" xml:space="preserve">
          <source>Y0 returns the order-zero Bessel function of the second kind.</source>
          <target state="translated">Y0은 두 번째 종류의 0 차 베셀 함수를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="e0b0a19d715ece09aeb410f412b0c7d445934330" translate="yes" xml:space="preserve">
          <source>Y1 returns the order-one Bessel function of the second kind.</source>
          <target state="translated">Y1은 두 번째 종류의 1 차 베셀 함수를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="993c29f2dccf3899bcb16c0c3c3e58cbb4ff26a3" translate="yes" xml:space="preserve">
          <source>YCbCr is an in-memory image of Y'CbCr colors. There is one Y sample per pixel, but each Cb and Cr sample can span one or more pixels. YStride is the Y slice index delta between vertically adjacent pixels. CStride is the Cb and Cr slice index delta between vertically adjacent pixels that map to separate chroma samples. It is not an absolute requirement, but YStride and len(Y) are typically multiples of 8, and:</source>
          <target state="translated">YCbCr은 Y'CbCr 색상의 메모리 내 이미지입니다. 픽셀 당 하나의 Y 샘플이 있지만 각 Cb 및 Cr 샘플은 하나 이상의 픽셀에 걸쳐있을 수 있습니다. YStride는 세로로 인접한 픽셀 사이의 Y 슬라이스 인덱스 델타입니다. CStride는 별도의 크로마 샘플에 매핑되는 수직으로 인접한 픽셀 사이의 Cb 및 Cr 슬라이스 인덱스 델타입니다. 절대 요구 사항은 아니지만 YStride 및 len (Y)는 일반적으로 8의 배수이며 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="04b6d1d571fb2541a796ccff17941677d6e94116" translate="yes" xml:space="preserve">
          <source>YCbCr represents a fully opaque 24-bit Y'CbCr color, having 8 bits each for one luma and two chroma components.</source>
          <target state="translated">YCbCr은 완전히 불투명 한 24 비트 Y'CbCr 색상을 나타내며, 루마 1 개와 크로마 성분 2 개에 대해 각각 8 비트를 갖습니다.</target>
        </trans-unit>
        <trans-unit id="569302883a982b6ecca1dff87d53f57a317c9e3e" translate="yes" xml:space="preserve">
          <source>YCbCrModel is the Model for Y'CbCr colors.</source>
          <target state="translated">YCbCrModel은 Y'CbCr 색상에 대한 모델입니다.</target>
        </trans-unit>
        <trans-unit id="c3eb9b9a99d34d53e98e4c42a8f496bcc27b2dd4" translate="yes" xml:space="preserve">
          <source>YCbCrSubsampleRatio is the chroma subsample ratio used in a YCbCr image.</source>
          <target state="translated">YCbCrSubsampleRatio는 YCbCr 이미지에 사용되는 크로마 서브 샘플 비율입니다.</target>
        </trans-unit>
        <trans-unit id="7c2a18a269291c4a568eeda22c7b8012ba05d3cc" translate="yes" xml:space="preserve">
          <source>YCbCrToRGB converts a Y'CbCr triple to an RGB triple.</source>
          <target state="translated">YCbCrToRGB는 Y'CbCr 트리플을 RGB 트리플로 변환합니다.</target>
        </trans-unit>
        <trans-unit id="2cc85e17988c35ca87fe9396bebb3408abc4139c" translate="yes" xml:space="preserve">
          <source>YOffset returns the index of the first element of Y that corresponds to the pixel at (x, y).</source>
          <target state="translated">YOffset은 (x, y)의 픽셀에 해당하는 Y의 첫 번째 요소의 인덱스를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="0ae67455f11e2f617f0f533036db82246ea0f1ba" translate="yes" xml:space="preserve">
          <source>Year returns the year in which t occurs.</source>
          <target state="translated">Year는 t가 발생한 연도를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="a0e093613a2a058d01beb5d9e83df474d4a7948e" translate="yes" xml:space="preserve">
          <source>YearDay returns the day of the year specified by t, in the range [1,365] for non-leap years, and [1,366] in leap years.</source>
          <target state="translated">YearDay는 비 윤년의 경우 [1,365], 윤년의 [1,366] 범위에서 t로 지정된 연도의 일을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="fbc86f73dd0143c109fc555dff3f9f4721e59b11" translate="yes" xml:space="preserve">
          <source>Yn returns the order-n Bessel function of the second kind.</source>
          <target state="translated">Yn은 두 번째 종류의 order-n Bessel 함수를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="1e7f3945f480c58bbf5b45878f32cae6f3cbe3e1" translate="yes" xml:space="preserve">
          <source>ZP is the zero Point.</source>
          <target state="translated">ZP는 영점입니다.</target>
        </trans-unit>
        <trans-unit id="4bedd2eb81ef394e3788fa98b69d1ca4f77655ed" translate="yes" xml:space="preserve">
          <source>ZR is the zero Rectangle.</source>
          <target state="translated">ZR은 제로 사각형입니다.</target>
        </trans-unit>
        <trans-unit id="1c6d3d57e5f186ce1aa4706dba2af53b9ebdfe54" translate="yes" xml:space="preserve">
          <source>Zero returns a Value representing the zero value for the specified type. The result is different from the zero value of the Value struct, which represents no value at all. For example, Zero(TypeOf(42)) returns a Value with Kind Int and value 0. The returned value is neither addressable nor settable.</source>
          <target state="translated">0은 지정된 유형의 0 값을 나타내는 값을 반환합니다. 결과는 전혀 값을 나타내지 않는 Value 구조체의 0 값과 다릅니다. 예를 들어, Zero (TypeOf (42))는 Kind Int 및 값이 0 인 값을 반환합니다. 반환 된 값은 주소 지정 가능하거나 설정할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="5ec7a8085e409e2fdcc504c5c24961579ad364d7" translate="yes" xml:space="preserve">
          <source>Zone computes the time zone in effect at time t, returning the abbreviated name of the zone (such as &quot;CET&quot;) and its offset in seconds east of UTC.</source>
          <target state="translated">Zone은 시간 t에서 적용되는 시간대를 계산하여 해당 약어 (예 : &quot;CET&quot;)의 약어 이름과 UTC 동쪽의 초 단위 오프셋을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="d95a582393c950008420678e089bcb6fb6005a66" translate="yes" xml:space="preserve">
          <source>[1] US patent 4405829 (1972, expired) [2] &lt;a href=&quot;http://www.cacr.math.uwaterloo.ca/techreports/2006/cacr2006-16.pdf&quot;&gt;http://www.cacr.math.uwaterloo.ca/techreports/2006/cacr2006-16.pdf&lt;/a&gt;</source>
          <target state="translated">[1] US patent 4405829 (1972, expired) [2] &lt;a href=&quot;http://www.cacr.math.uwaterloo.ca/techreports/2006/cacr2006-16.pdf&quot;&gt;http://www.cacr.math.uwaterloo.ca/techreports/2006/cacr2006-16.pdf&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="c868a399ecee19d2ae9d23c5ac270d4627ec37c2" translate="yes" xml:space="preserve">
          <source>adler32</source>
          <target state="translated">adler32</target>
        </trans-unit>
        <trans-unit id="3bc4dea27b862dd8aa4e815187d2cdd3be2a75c7" translate="yes" xml:space="preserve">
          <source>adler32.Checksum()</source>
          <target state="translated">adler32.Checksum()</target>
        </trans-unit>
        <trans-unit id="fdae41220d5cd5d881fd4909d397ab172b7b713d" translate="yes" xml:space="preserve">
          <source>adler32.New()</source>
          <target state="translated">adler32.New()</target>
        </trans-unit>
        <trans-unit id="b9e516580969fb81fe1efdac7be863ede058820d" translate="yes" xml:space="preserve">
          <source>adler32.go</source>
          <target state="translated">adler32.go</target>
        </trans-unit>
        <trans-unit id="9b214a0fbc91794f9b2f7c03b2ffdadc705bb106" translate="yes" xml:space="preserve">
          <source>aes</source>
          <target state="translated">aes</target>
        </trans-unit>
        <trans-unit id="4a6e483e4c655c235bfae76e4cff3a9491b844fe" translate="yes" xml:space="preserve">
          <source>aes.KeySizeError</source>
          <target state="translated">aes.KeySizeError</target>
        </trans-unit>
        <trans-unit id="eaae49997213c0be97b3d20ac0b21bf6b5ea2211" translate="yes" xml:space="preserve">
          <source>aes.KeySizeError.Error()</source>
          <target state="translated">aes.KeySizeError.Error()</target>
        </trans-unit>
        <trans-unit id="39b985982e7b3543046a3bf2ac7d7a7b8ce71274" translate="yes" xml:space="preserve">
          <source>aes.NewCipher()</source>
          <target state="translated">aes.NewCipher()</target>
        </trans-unit>
        <trans-unit id="0fb27eee12ade1a38a95e36453c1e554b462484b" translate="yes" xml:space="preserve">
          <source>and to read that data back:</source>
          <target state="translated">그 데이터를 다시 읽으려면 :</target>
        </trans-unit>
        <trans-unit id="ebfb55f4432b592119a10592e4f26272cc72359e" translate="yes" xml:space="preserve">
          <source>archive</source>
          <target state="translated">archive</target>
        </trans-unit>
        <trans-unit id="599b006359811c99dc41f2f30a3e4da1a269aab7" translate="yes" xml:space="preserve">
          <source>archive/tar</source>
          <target state="translated">archive/tar</target>
        </trans-unit>
        <trans-unit id="36627ccd71d39d88b5319bafd6f742e95ad7efbb" translate="yes" xml:space="preserve">
          <source>archive/zip</source>
          <target state="translated">archive/zip</target>
        </trans-unit>
        <trans-unit id="5711ec9a54403a9271f1ec98d0532f337d096f48" translate="yes" xml:space="preserve">
          <source>are considered benchmarks, and are executed by the &quot;go test&quot; command when its -bench flag is provided. Benchmarks are run sequentially.</source>
          <target state="translated">벤치 마크로 간주되며 -bench 플래그가 제공 될 때 &quot;go test&quot;명령으로 실행됩니다. 벤치 마크는 순차적으로 실행됩니다.</target>
        </trans-unit>
        <trans-unit id="2f4d46fbed13b2d5ff12c543a95ead3c2d7d0b4e" translate="yes" xml:space="preserve">
          <source>ascii85</source>
          <target state="translated">ascii85</target>
        </trans-unit>
        <trans-unit id="c709c878860d1c843277aa3c7fafe85ebe2fdbbf" translate="yes" xml:space="preserve">
          <source>ascii85.CorruptInputError</source>
          <target state="translated">ascii85.CorruptInputError</target>
        </trans-unit>
        <trans-unit id="58459a79830f2fbd0ecae6834d288cc61d744b76" translate="yes" xml:space="preserve">
          <source>ascii85.CorruptInputError.Error()</source>
          <target state="translated">ascii85.CorruptInputError.Error()</target>
        </trans-unit>
        <trans-unit id="59d4f41c4d68ec4771eaba0f7e123bfcd8825ea8" translate="yes" xml:space="preserve">
          <source>ascii85.Decode()</source>
          <target state="translated">ascii85.Decode()</target>
        </trans-unit>
        <trans-unit id="8d4003545eb5e35693ca34599af4f472b3ea1e75" translate="yes" xml:space="preserve">
          <source>ascii85.Encode()</source>
          <target state="translated">ascii85.Encode()</target>
        </trans-unit>
        <trans-unit id="bf3560ccbab3bd109332df53c1a3532db455ea63" translate="yes" xml:space="preserve">
          <source>ascii85.MaxEncodedLen()</source>
          <target state="translated">ascii85.MaxEncodedLen()</target>
        </trans-unit>
        <trans-unit id="70cbc7b778e1d7ce35bd8d42cc75b6c69fc1ac8a" translate="yes" xml:space="preserve">
          <source>ascii85.NewDecoder()</source>
          <target state="translated">ascii85.NewDecoder()</target>
        </trans-unit>
        <trans-unit id="5a619b434aa961150c63a00555d9caa30389e0a7" translate="yes" xml:space="preserve">
          <source>ascii85.NewEncoder()</source>
          <target state="translated">ascii85.NewEncoder()</target>
        </trans-unit>
        <trans-unit id="5d4c0e749c8b30f76f313c377c2c53071120924c" translate="yes" xml:space="preserve">
          <source>ascii85.go</source>
          <target state="translated">ascii85.go</target>
        </trans-unit>
        <trans-unit id="9edf4240018976bf964cf31c1a24d34fde8d517d" translate="yes" xml:space="preserve">
          <source>asn1</source>
          <target state="translated">asn1</target>
        </trans-unit>
        <trans-unit id="3b25fcd0e7aac867ba1b902a9bad74c32fd06f7a" translate="yes" xml:space="preserve">
          <source>asn1.BitString</source>
          <target state="translated">asn1.BitString</target>
        </trans-unit>
        <trans-unit id="b6f72489fb5ca7587375a5bdd653f7f1df476dc4" translate="yes" xml:space="preserve">
          <source>asn1.BitString.At()</source>
          <target state="translated">asn1.BitString.At()</target>
        </trans-unit>
        <trans-unit id="4c41e6f4e9eb61025667c2d062c9558e1f1e6497" translate="yes" xml:space="preserve">
          <source>asn1.BitString.RightAlign()</source>
          <target state="translated">asn1.BitString.RightAlign()</target>
        </trans-unit>
        <trans-unit id="8cdba2268b9ac8546eddd752887146141a709a59" translate="yes" xml:space="preserve">
          <source>asn1.Enumerated</source>
          <target state="translated">asn1.Enumerated</target>
        </trans-unit>
        <trans-unit id="0bda2d2df59ae7e05b1eec034907a553d7c7a42b" translate="yes" xml:space="preserve">
          <source>asn1.Flag</source>
          <target state="translated">asn1.Flag</target>
        </trans-unit>
        <trans-unit id="b6fd1eca6f1af508581a7ec1afa96ca5c77fdcef" translate="yes" xml:space="preserve">
          <source>asn1.Marshal()</source>
          <target state="translated">asn1.Marshal()</target>
        </trans-unit>
        <trans-unit id="1dd69ab12f931e65b184412035dbdf691ef75671" translate="yes" xml:space="preserve">
          <source>asn1.MarshalWithParams()</source>
          <target state="translated">asn1.MarshalWithParams()</target>
        </trans-unit>
        <trans-unit id="967f6161afbc84e65192ed4145c8fb2886ef1b34" translate="yes" xml:space="preserve">
          <source>asn1.ObjectIdentifier</source>
          <target state="translated">asn1.ObjectIdentifier</target>
        </trans-unit>
        <trans-unit id="eb5273c3d4afff6a018248c1d3b92ecf13f1b251" translate="yes" xml:space="preserve">
          <source>asn1.ObjectIdentifier.Equal()</source>
          <target state="translated">asn1.ObjectIdentifier.Equal()</target>
        </trans-unit>
        <trans-unit id="9104208a312cff3364923b64231855dcb6182420" translate="yes" xml:space="preserve">
          <source>asn1.ObjectIdentifier.String()</source>
          <target state="translated">asn1.ObjectIdentifier.String()</target>
        </trans-unit>
        <trans-unit id="fa1326ed75bd447347a012e931b2cb50f6277993" translate="yes" xml:space="preserve">
          <source>asn1.RawContent</source>
          <target state="translated">asn1.RawContent</target>
        </trans-unit>
        <trans-unit id="11afa151ffea7be0e51569d7278af02c01d14648" translate="yes" xml:space="preserve">
          <source>asn1.RawValue</source>
          <target state="translated">asn1.RawValue</target>
        </trans-unit>
        <trans-unit id="c7e196c13ac871177aa305816ccdd2f214844f1f" translate="yes" xml:space="preserve">
          <source>asn1.StructuralError</source>
          <target state="translated">asn1.StructuralError</target>
        </trans-unit>
        <trans-unit id="ede541b4e84339ed235682099c483b8d0ea9d195" translate="yes" xml:space="preserve">
          <source>asn1.StructuralError.Error()</source>
          <target state="translated">asn1.StructuralError.Error()</target>
        </trans-unit>
        <trans-unit id="6f92f6f304a340128dbbc8d8d5d1d24bb934dd1c" translate="yes" xml:space="preserve">
          <source>asn1.SyntaxError</source>
          <target state="translated">asn1.SyntaxError</target>
        </trans-unit>
        <trans-unit id="2cc0c7c5b17f8fbf4c99fe144d21fdcb86a4e4d5" translate="yes" xml:space="preserve">
          <source>asn1.SyntaxError.Error()</source>
          <target state="translated">asn1.SyntaxError.Error()</target>
        </trans-unit>
        <trans-unit id="b4620fdf4cc070561d9028cca9eebe3527fab3bb" translate="yes" xml:space="preserve">
          <source>asn1.Unmarshal()</source>
          <target state="translated">asn1.Unmarshal()</target>
        </trans-unit>
        <trans-unit id="db2421d96b2365ce2873e4bdc3dd1b1884fb7a9e" translate="yes" xml:space="preserve">
          <source>asn1.UnmarshalWithParams()</source>
          <target state="translated">asn1.UnmarshalWithParams()</target>
        </trans-unit>
        <trans-unit id="c24c0248770ae98831f8a654310d4c2e07514c61" translate="yes" xml:space="preserve">
          <source>ast</source>
          <target state="translated">ast</target>
        </trans-unit>
        <trans-unit id="befa22645af2b2c57ff1d061bee4609e465ce151" translate="yes" xml:space="preserve">
          <source>ast.ArrayType</source>
          <target state="translated">ast.ArrayType</target>
        </trans-unit>
        <trans-unit id="3aaa1f08029690a9ad3162fe7f0aeb4221534ddc" translate="yes" xml:space="preserve">
          <source>ast.ArrayType.End()</source>
          <target state="translated">ast.ArrayType.End()</target>
        </trans-unit>
        <trans-unit id="7400ff1c7cb92a2976bfa3daf41ae2f354273958" translate="yes" xml:space="preserve">
          <source>ast.ArrayType.Pos()</source>
          <target state="translated">ast.ArrayType.Pos()</target>
        </trans-unit>
        <trans-unit id="8f7ff0499c577334d405d39760346407f6352d95" translate="yes" xml:space="preserve">
          <source>ast.AssignStmt</source>
          <target state="translated">ast.AssignStmt</target>
        </trans-unit>
        <trans-unit id="a4eadbf257f6ac901889cf9a6bb1024e24a65284" translate="yes" xml:space="preserve">
          <source>ast.AssignStmt.End()</source>
          <target state="translated">ast.AssignStmt.End()</target>
        </trans-unit>
        <trans-unit id="2d16762ab296b2e910461becfd95d333facceb3a" translate="yes" xml:space="preserve">
          <source>ast.AssignStmt.Pos()</source>
          <target state="translated">ast.AssignStmt.Pos()</target>
        </trans-unit>
        <trans-unit id="ea70196c82482d305608466884903c9a043e9178" translate="yes" xml:space="preserve">
          <source>ast.BadDecl</source>
          <target state="translated">ast.BadDecl</target>
        </trans-unit>
        <trans-unit id="8b1817d76ef00b508173afe2cfbf9777b5fb2077" translate="yes" xml:space="preserve">
          <source>ast.BadDecl.End()</source>
          <target state="translated">ast.BadDecl.End()</target>
        </trans-unit>
        <trans-unit id="4deb107b4c3af556a6324d9162f029f4f4e1ab9d" translate="yes" xml:space="preserve">
          <source>ast.BadDecl.Pos()</source>
          <target state="translated">ast.BadDecl.Pos()</target>
        </trans-unit>
        <trans-unit id="fd50cb7d9bdbcdf5cbc147580c9a8b40d97b0d06" translate="yes" xml:space="preserve">
          <source>ast.BadExpr</source>
          <target state="translated">ast.BadExpr</target>
        </trans-unit>
        <trans-unit id="d2fa322f959652eda770c38075241e33463480a5" translate="yes" xml:space="preserve">
          <source>ast.BadExpr.End()</source>
          <target state="translated">ast.BadExpr.End()</target>
        </trans-unit>
        <trans-unit id="9b83d6d18f65ed71ddfbc157d967fa64ca7fe3cc" translate="yes" xml:space="preserve">
          <source>ast.BadExpr.Pos()</source>
          <target state="translated">ast.BadExpr.Pos()</target>
        </trans-unit>
        <trans-unit id="aa7a3ebb9ae1f1a5f3082d8520b04a78ac2064d7" translate="yes" xml:space="preserve">
          <source>ast.BadStmt</source>
          <target state="translated">ast.BadStmt</target>
        </trans-unit>
        <trans-unit id="7985d77e4e120c475b0777e4460cfbd66c182a3f" translate="yes" xml:space="preserve">
          <source>ast.BadStmt.End()</source>
          <target state="translated">ast.BadStmt.End()</target>
        </trans-unit>
        <trans-unit id="611c00a04c5ad6fc35d6b2b0553c31ad6c2c9afd" translate="yes" xml:space="preserve">
          <source>ast.BadStmt.Pos()</source>
          <target state="translated">ast.BadStmt.Pos()</target>
        </trans-unit>
        <trans-unit id="a332f7650fd36f4dd02d99d3b8ec6e1a8507c809" translate="yes" xml:space="preserve">
          <source>ast.BasicLit</source>
          <target state="translated">ast.BasicLit</target>
        </trans-unit>
        <trans-unit id="a98f149f6185847f9599a498ffe20bdbe234ca79" translate="yes" xml:space="preserve">
          <source>ast.BasicLit.End()</source>
          <target state="translated">ast.BasicLit.End()</target>
        </trans-unit>
        <trans-unit id="0e3e9e0fe19152d6958f147d0962725dbce04684" translate="yes" xml:space="preserve">
          <source>ast.BasicLit.Pos()</source>
          <target state="translated">ast.BasicLit.Pos()</target>
        </trans-unit>
        <trans-unit id="9ec47fda282a56476d3ee59b3f89d74ad43722db" translate="yes" xml:space="preserve">
          <source>ast.BinaryExpr</source>
          <target state="translated">ast.BinaryExpr</target>
        </trans-unit>
        <trans-unit id="d9ca2bfa7b901986b5e133efaf148e7bfa73fda0" translate="yes" xml:space="preserve">
          <source>ast.BinaryExpr.End()</source>
          <target state="translated">ast.BinaryExpr.End()</target>
        </trans-unit>
        <trans-unit id="b540b3db7c164e96ddb28ee245b6fef0191d37eb" translate="yes" xml:space="preserve">
          <source>ast.BinaryExpr.Pos()</source>
          <target state="translated">ast.BinaryExpr.Pos()</target>
        </trans-unit>
        <trans-unit id="53ad55929540909d0e0c0c6d1a14db54405be438" translate="yes" xml:space="preserve">
          <source>ast.BlockStmt</source>
          <target state="translated">ast.BlockStmt</target>
        </trans-unit>
        <trans-unit id="2a8369a80640f3347a935c1c0c735ec709358dd1" translate="yes" xml:space="preserve">
          <source>ast.BlockStmt.End()</source>
          <target state="translated">ast.BlockStmt.End()</target>
        </trans-unit>
        <trans-unit id="851c7137cbb678223bbeb3430399d5059b29e277" translate="yes" xml:space="preserve">
          <source>ast.BlockStmt.Pos()</source>
          <target state="translated">ast.BlockStmt.Pos()</target>
        </trans-unit>
        <trans-unit id="53d494d40d484db0e354b674a369eaa485186d69" translate="yes" xml:space="preserve">
          <source>ast.BranchStmt</source>
          <target state="translated">ast.BranchStmt</target>
        </trans-unit>
        <trans-unit id="006cb666be74c0e0ee36d0e1ed3b722a9839add9" translate="yes" xml:space="preserve">
          <source>ast.BranchStmt.End()</source>
          <target state="translated">ast.BranchStmt.End()</target>
        </trans-unit>
        <trans-unit id="e624885b40ec9930e0e4fd5546fea07c4309f64a" translate="yes" xml:space="preserve">
          <source>ast.BranchStmt.Pos()</source>
          <target state="translated">ast.BranchStmt.Pos()</target>
        </trans-unit>
        <trans-unit id="d6ff240d9cd77565e3fdf528d15c0d3e77aae78a" translate="yes" xml:space="preserve">
          <source>ast.CallExpr</source>
          <target state="translated">ast.CallExpr</target>
        </trans-unit>
        <trans-unit id="8a4191ffec5d62d08911cd982b546ba76a9e5277" translate="yes" xml:space="preserve">
          <source>ast.CallExpr.End()</source>
          <target state="translated">ast.CallExpr.End()</target>
        </trans-unit>
        <trans-unit id="34bacfb498513ccfab3294638b6955e96b607eff" translate="yes" xml:space="preserve">
          <source>ast.CallExpr.Pos()</source>
          <target state="translated">ast.CallExpr.Pos()</target>
        </trans-unit>
        <trans-unit id="908cabf810e388d4f96ee3b484f6fcc63f3a633e" translate="yes" xml:space="preserve">
          <source>ast.CaseClause</source>
          <target state="translated">ast.CaseClause</target>
        </trans-unit>
        <trans-unit id="9bf625cb99111aa416d920ee5d6aa42ad53c2a20" translate="yes" xml:space="preserve">
          <source>ast.CaseClause.End()</source>
          <target state="translated">ast.CaseClause.End()</target>
        </trans-unit>
        <trans-unit id="5a4f8b1a228bb80bdb4bf93e1ba2e0372f5f4436" translate="yes" xml:space="preserve">
          <source>ast.CaseClause.Pos()</source>
          <target state="translated">ast.CaseClause.Pos()</target>
        </trans-unit>
        <trans-unit id="df184106f71e2042d31c9c581eea0f2a15d7e71a" translate="yes" xml:space="preserve">
          <source>ast.ChanDir</source>
          <target state="translated">ast.ChanDir</target>
        </trans-unit>
        <trans-unit id="d9894c3ef3fe79412fc727115570d01ffbfbe371" translate="yes" xml:space="preserve">
          <source>ast.ChanType</source>
          <target state="translated">ast.ChanType</target>
        </trans-unit>
        <trans-unit id="a2d3c384b591665fddb01c653b8cba6f42964707" translate="yes" xml:space="preserve">
          <source>ast.ChanType.End()</source>
          <target state="translated">ast.ChanType.End()</target>
        </trans-unit>
        <trans-unit id="b0d99e4fe9e408caf8079a70db85f1516d3ca640" translate="yes" xml:space="preserve">
          <source>ast.ChanType.Pos()</source>
          <target state="translated">ast.ChanType.Pos()</target>
        </trans-unit>
        <trans-unit id="afe2fe744c7228a28664b3f99a19fbe01eaab7ae" translate="yes" xml:space="preserve">
          <source>ast.CommClause</source>
          <target state="translated">ast.CommClause</target>
        </trans-unit>
        <trans-unit id="748b6c2557f1f18e86e976cbd1e96523b3b6d20f" translate="yes" xml:space="preserve">
          <source>ast.CommClause.End()</source>
          <target state="translated">ast.CommClause.End()</target>
        </trans-unit>
        <trans-unit id="76469ceeb1ed92aaa0251ce9a2f5a4d18c58e648" translate="yes" xml:space="preserve">
          <source>ast.CommClause.Pos()</source>
          <target state="translated">ast.CommClause.Pos()</target>
        </trans-unit>
        <trans-unit id="eb410c5b03c33912d6440a324168677d85ea4084" translate="yes" xml:space="preserve">
          <source>ast.Comment</source>
          <target state="translated">ast.Comment</target>
        </trans-unit>
        <trans-unit id="2f74f8850964cdea428b72cbb0bd8306188b40cc" translate="yes" xml:space="preserve">
          <source>ast.Comment.End()</source>
          <target state="translated">ast.Comment.End()</target>
        </trans-unit>
        <trans-unit id="8da5aaee99b97985300a17a57207881036cfc8a5" translate="yes" xml:space="preserve">
          <source>ast.Comment.Pos()</source>
          <target state="translated">ast.Comment.Pos()</target>
        </trans-unit>
        <trans-unit id="d482672bd74456c8614c239b9de80f42d9daf6ac" translate="yes" xml:space="preserve">
          <source>ast.CommentGroup</source>
          <target state="translated">ast.CommentGroup</target>
        </trans-unit>
        <trans-unit id="291fb0d01c213b675214864708e38aac78c965df" translate="yes" xml:space="preserve">
          <source>ast.CommentGroup.End()</source>
          <target state="translated">ast.CommentGroup.End()</target>
        </trans-unit>
        <trans-unit id="7ec5ba7e20d2f8b73cfdda6dd5a5bafef1a471ad" translate="yes" xml:space="preserve">
          <source>ast.CommentGroup.Pos()</source>
          <target state="translated">ast.CommentGroup.Pos()</target>
        </trans-unit>
        <trans-unit id="db0b452520c4081b875986a5b08603bfa7cf27db" translate="yes" xml:space="preserve">
          <source>ast.CommentGroup.Text()</source>
          <target state="translated">ast.CommentGroup.Text()</target>
        </trans-unit>
        <trans-unit id="49b8300f7bfddf0b6f0c42c6dedb29841231a049" translate="yes" xml:space="preserve">
          <source>ast.CommentMap</source>
          <target state="translated">ast.CommentMap</target>
        </trans-unit>
        <trans-unit id="138e15e3c47ac21027b750aa86d1b4d8df53eec7" translate="yes" xml:space="preserve">
          <source>ast.CommentMap.Comments()</source>
          <target state="translated">ast.CommentMap.Comments()</target>
        </trans-unit>
        <trans-unit id="2a275924c14d2d5bda8b6efa1638b2ec1b5a618b" translate="yes" xml:space="preserve">
          <source>ast.CommentMap.Filter()</source>
          <target state="translated">ast.CommentMap.Filter()</target>
        </trans-unit>
        <trans-unit id="df6eab6e6f03363da7369f68bcb68c05efd35841" translate="yes" xml:space="preserve">
          <source>ast.CommentMap.String()</source>
          <target state="translated">ast.CommentMap.String()</target>
        </trans-unit>
        <trans-unit id="0f2fc4844e739382be4a668668f79c30a8928df8" translate="yes" xml:space="preserve">
          <source>ast.CommentMap.Update()</source>
          <target state="translated">ast.CommentMap.Update()</target>
        </trans-unit>
        <trans-unit id="3a34308cd756c0e7977abc07b327473d4c5e13c9" translate="yes" xml:space="preserve">
          <source>ast.CompositeLit</source>
          <target state="translated">ast.CompositeLit</target>
        </trans-unit>
        <trans-unit id="9bb0da22db2db807a80446404d4b271a65e7aab7" translate="yes" xml:space="preserve">
          <source>ast.CompositeLit.End()</source>
          <target state="translated">ast.CompositeLit.End()</target>
        </trans-unit>
        <trans-unit id="a52feba5850623b44256bed6165f0d82ada4137b" translate="yes" xml:space="preserve">
          <source>ast.CompositeLit.Pos()</source>
          <target state="translated">ast.CompositeLit.Pos()</target>
        </trans-unit>
        <trans-unit id="9b37ee9927929c783d31dbe64e672109b3492683" translate="yes" xml:space="preserve">
          <source>ast.Decl</source>
          <target state="translated">ast.Decl</target>
        </trans-unit>
        <trans-unit id="98b759c2b999b973be88a5d07cfbab3927683195" translate="yes" xml:space="preserve">
          <source>ast.DeclStmt</source>
          <target state="translated">ast.DeclStmt</target>
        </trans-unit>
        <trans-unit id="d9c77d027698da2fc0d108e953b1083d16e69416" translate="yes" xml:space="preserve">
          <source>ast.DeclStmt.End()</source>
          <target state="translated">ast.DeclStmt.End()</target>
        </trans-unit>
        <trans-unit id="78a21564f0f1d72a43aaeb48f47154c52db3176a" translate="yes" xml:space="preserve">
          <source>ast.DeclStmt.Pos()</source>
          <target state="translated">ast.DeclStmt.Pos()</target>
        </trans-unit>
        <trans-unit id="a88c75402a7cf7a0dc33b87900e61ca2f2cb224d" translate="yes" xml:space="preserve">
          <source>ast.DeferStmt</source>
          <target state="translated">ast.DeferStmt</target>
        </trans-unit>
        <trans-unit id="56a6d8b85ed2f1106d5011cc30be75871a6f333e" translate="yes" xml:space="preserve">
          <source>ast.DeferStmt.End()</source>
          <target state="translated">ast.DeferStmt.End()</target>
        </trans-unit>
        <trans-unit id="00435a1620cdf12444d2655e5741d7351bc9d952" translate="yes" xml:space="preserve">
          <source>ast.DeferStmt.Pos()</source>
          <target state="translated">ast.DeferStmt.Pos()</target>
        </trans-unit>
        <trans-unit id="d85c5eae8637be960ca473b6d19e86f92dadc2b1" translate="yes" xml:space="preserve">
          <source>ast.Ellipsis</source>
          <target state="translated">ast.Ellipsis</target>
        </trans-unit>
        <trans-unit id="6e8302a49c68476d2a9804dff9dc78d3fa9453ff" translate="yes" xml:space="preserve">
          <source>ast.Ellipsis.End()</source>
          <target state="translated">ast.Ellipsis.End()</target>
        </trans-unit>
        <trans-unit id="aa13456258be7dfca118f86ab0d7cd8681f91663" translate="yes" xml:space="preserve">
          <source>ast.Ellipsis.Pos()</source>
          <target state="translated">ast.Ellipsis.Pos()</target>
        </trans-unit>
        <trans-unit id="83ec929cb12fbac363e83149d20e153666193591" translate="yes" xml:space="preserve">
          <source>ast.EmptyStmt</source>
          <target state="translated">ast.EmptyStmt</target>
        </trans-unit>
        <trans-unit id="1dcc01433f78cd9d1b21499a51d59136b3e66135" translate="yes" xml:space="preserve">
          <source>ast.EmptyStmt.End()</source>
          <target state="translated">ast.EmptyStmt.End()</target>
        </trans-unit>
        <trans-unit id="d15ee08589510f58fcd6aeeadb8b06acc40aae8f" translate="yes" xml:space="preserve">
          <source>ast.EmptyStmt.Pos()</source>
          <target state="translated">ast.EmptyStmt.Pos()</target>
        </trans-unit>
        <trans-unit id="429b94c0e48e600788d6c40b157d869b51271dfd" translate="yes" xml:space="preserve">
          <source>ast.Expr</source>
          <target state="translated">ast.Expr</target>
        </trans-unit>
        <trans-unit id="ddb6850692bf98131494cb5b4ea6a8c1a5257388" translate="yes" xml:space="preserve">
          <source>ast.ExprStmt</source>
          <target state="translated">ast.ExprStmt</target>
        </trans-unit>
        <trans-unit id="fd6a374b8d32132e7eb765f925013baf3fb247f0" translate="yes" xml:space="preserve">
          <source>ast.ExprStmt.End()</source>
          <target state="translated">ast.ExprStmt.End()</target>
        </trans-unit>
        <trans-unit id="3bbdc36acdb6e801295d7762e2d71d186f8ec5dc" translate="yes" xml:space="preserve">
          <source>ast.ExprStmt.Pos()</source>
          <target state="translated">ast.ExprStmt.Pos()</target>
        </trans-unit>
        <trans-unit id="fe35306cfa6c33d1e08c38078ed6418b57cc5c44" translate="yes" xml:space="preserve">
          <source>ast.Field</source>
          <target state="translated">ast.Field</target>
        </trans-unit>
        <trans-unit id="b8ce598b99eab4821c1f05610e4e7c5da11843e3" translate="yes" xml:space="preserve">
          <source>ast.Field.End()</source>
          <target state="translated">ast.Field.End()</target>
        </trans-unit>
        <trans-unit id="31f3f6875ba87eb89fd1c8f4ff6e5652a7d06d46" translate="yes" xml:space="preserve">
          <source>ast.Field.Pos()</source>
          <target state="translated">ast.Field.Pos()</target>
        </trans-unit>
        <trans-unit id="35a61eacd2d4a8d7a2086110a29c7cae70367172" translate="yes" xml:space="preserve">
          <source>ast.FieldFilter</source>
          <target state="translated">ast.FieldFilter</target>
        </trans-unit>
        <trans-unit id="a5cbb8ee53c7545ba520cd4ef0b543279f93ac51" translate="yes" xml:space="preserve">
          <source>ast.FieldList</source>
          <target state="translated">ast.FieldList</target>
        </trans-unit>
        <trans-unit id="079acca70ea605f868cb5458fcd3113961f82bf9" translate="yes" xml:space="preserve">
          <source>ast.FieldList.End()</source>
          <target state="translated">ast.FieldList.End()</target>
        </trans-unit>
        <trans-unit id="0959206159b04b0f7ba0463fe7822ba39164edbe" translate="yes" xml:space="preserve">
          <source>ast.FieldList.NumFields()</source>
          <target state="translated">ast.FieldList.NumFields()</target>
        </trans-unit>
        <trans-unit id="54e713cf18d22bb14498eefdbee876cd84643301" translate="yes" xml:space="preserve">
          <source>ast.FieldList.Pos()</source>
          <target state="translated">ast.FieldList.Pos()</target>
        </trans-unit>
        <trans-unit id="824559735927a3878ee55aa114ff909a4a761fd5" translate="yes" xml:space="preserve">
          <source>ast.File</source>
          <target state="translated">ast.File</target>
        </trans-unit>
        <trans-unit id="9c13ff5d91937bd63b024c5111fe98c16f08d0e1" translate="yes" xml:space="preserve">
          <source>ast.File.End()</source>
          <target state="translated">ast.File.End()</target>
        </trans-unit>
        <trans-unit id="908fdb94b0f7d7928c2e598e507365591a215184" translate="yes" xml:space="preserve">
          <source>ast.File.Pos()</source>
          <target state="translated">ast.File.Pos()</target>
        </trans-unit>
        <trans-unit id="6fc04c6e8365c1e2a348b8d85aea6af30f73a3e7" translate="yes" xml:space="preserve">
          <source>ast.FileExports()</source>
          <target state="translated">ast.FileExports()</target>
        </trans-unit>
        <trans-unit id="515afaadbe65dbb56510d1001b0cea4fb212985a" translate="yes" xml:space="preserve">
          <source>ast.Filter</source>
          <target state="translated">ast.Filter</target>
        </trans-unit>
        <trans-unit id="725c1315b64f2159e1d535cc17c67990c3eb9407" translate="yes" xml:space="preserve">
          <source>ast.FilterDecl()</source>
          <target state="translated">ast.FilterDecl()</target>
        </trans-unit>
        <trans-unit id="9b23fe99e5e78579edea9b2685c0beef40fc5bdf" translate="yes" xml:space="preserve">
          <source>ast.FilterFile()</source>
          <target state="translated">ast.FilterFile()</target>
        </trans-unit>
        <trans-unit id="d0077c13020f893bea04504e4f7edbf31c696173" translate="yes" xml:space="preserve">
          <source>ast.FilterPackage()</source>
          <target state="translated">ast.FilterPackage()</target>
        </trans-unit>
        <trans-unit id="010df2eadbc0b289bbb3ed3dfe1f015c9eaf7589" translate="yes" xml:space="preserve">
          <source>ast.ForStmt</source>
          <target state="translated">ast.ForStmt</target>
        </trans-unit>
        <trans-unit id="7bec230190c220ed154122611c547a4ee061a0d9" translate="yes" xml:space="preserve">
          <source>ast.ForStmt.End()</source>
          <target state="translated">ast.ForStmt.End()</target>
        </trans-unit>
        <trans-unit id="ce1b26151d92491e06fabf1a68f974b70dd064b2" translate="yes" xml:space="preserve">
          <source>ast.ForStmt.Pos()</source>
          <target state="translated">ast.ForStmt.Pos()</target>
        </trans-unit>
        <trans-unit id="9e23cc076f7fa7c25511d66eeb511d7de3fa35f8" translate="yes" xml:space="preserve">
          <source>ast.Fprint()</source>
          <target state="translated">ast.Fprint()</target>
        </trans-unit>
        <trans-unit id="bff7cf7e949bd5b1d09817c599f73bf69122daad" translate="yes" xml:space="preserve">
          <source>ast.FuncDecl</source>
          <target state="translated">ast.FuncDecl</target>
        </trans-unit>
        <trans-unit id="62fa27f1159e359248a085d818004bac79095e10" translate="yes" xml:space="preserve">
          <source>ast.FuncDecl.End()</source>
          <target state="translated">ast.FuncDecl.End()</target>
        </trans-unit>
        <trans-unit id="ca288db889162827b386d6cf407850d0256d0306" translate="yes" xml:space="preserve">
          <source>ast.FuncDecl.Pos()</source>
          <target state="translated">ast.FuncDecl.Pos()</target>
        </trans-unit>
        <trans-unit id="eaa722591c8d3bb5ec7c07884ae4d044acd81acd" translate="yes" xml:space="preserve">
          <source>ast.FuncLit</source>
          <target state="translated">ast.FuncLit</target>
        </trans-unit>
        <trans-unit id="76e1942fbc8f515400fb974985257f1f150278b2" translate="yes" xml:space="preserve">
          <source>ast.FuncLit.End()</source>
          <target state="translated">ast.FuncLit.End()</target>
        </trans-unit>
        <trans-unit id="cf7a4f37978363b411c184f235404cf42419323e" translate="yes" xml:space="preserve">
          <source>ast.FuncLit.Pos()</source>
          <target state="translated">ast.FuncLit.Pos()</target>
        </trans-unit>
        <trans-unit id="77ef0acfcbf1e91989489e4b465f7749a502cee2" translate="yes" xml:space="preserve">
          <source>ast.FuncType</source>
          <target state="translated">ast.FuncType</target>
        </trans-unit>
        <trans-unit id="8bef62cd074cbb9b8bb549f7f37fdd4c9556cec9" translate="yes" xml:space="preserve">
          <source>ast.FuncType.End()</source>
          <target state="translated">ast.FuncType.End()</target>
        </trans-unit>
        <trans-unit id="4f06513dc949b59ca3fe6fb82cf436d570af99bc" translate="yes" xml:space="preserve">
          <source>ast.FuncType.Pos()</source>
          <target state="translated">ast.FuncType.Pos()</target>
        </trans-unit>
        <trans-unit id="49e3462052836776f7475e211320d9c2f0839757" translate="yes" xml:space="preserve">
          <source>ast.GenDecl</source>
          <target state="translated">ast.GenDecl</target>
        </trans-unit>
        <trans-unit id="df8f73ecfd0e7618f102077a8d04eadb08d8aae2" translate="yes" xml:space="preserve">
          <source>ast.GenDecl.End()</source>
          <target state="translated">ast.GenDecl.End()</target>
        </trans-unit>
        <trans-unit id="ec91647151e8a76006d16cb06b8e4e4fa790d995" translate="yes" xml:space="preserve">
          <source>ast.GenDecl.Pos()</source>
          <target state="translated">ast.GenDecl.Pos()</target>
        </trans-unit>
        <trans-unit id="7c40561ab6c64f38a088066a7a0d84b95a7ca19b" translate="yes" xml:space="preserve">
          <source>ast.GoStmt</source>
          <target state="translated">ast.GoStmt</target>
        </trans-unit>
        <trans-unit id="c367671365811674fb44775dd6b4f6d17871b617" translate="yes" xml:space="preserve">
          <source>ast.GoStmt.End()</source>
          <target state="translated">ast.GoStmt.End()</target>
        </trans-unit>
        <trans-unit id="75c800281efd0cbeb0f676a13fbb76dc6b040afc" translate="yes" xml:space="preserve">
          <source>ast.GoStmt.Pos()</source>
          <target state="translated">ast.GoStmt.Pos()</target>
        </trans-unit>
        <trans-unit id="b593a228205ecc5da27ea376c37c8b0feb887b3c" translate="yes" xml:space="preserve">
          <source>ast.Ident</source>
          <target state="translated">ast.Ident</target>
        </trans-unit>
        <trans-unit id="90b434e4582522ff9fdc5e749f4a807e629845d4" translate="yes" xml:space="preserve">
          <source>ast.Ident.End()</source>
          <target state="translated">ast.Ident.End()</target>
        </trans-unit>
        <trans-unit id="330869bf46f759ab5b34542ae5e64e2a8e6d7acb" translate="yes" xml:space="preserve">
          <source>ast.Ident.IsExported()</source>
          <target state="translated">ast.Ident.IsExported()</target>
        </trans-unit>
        <trans-unit id="5880d5cb49703e46da66c8a8df06d571ca83c5a1" translate="yes" xml:space="preserve">
          <source>ast.Ident.Pos()</source>
          <target state="translated">ast.Ident.Pos()</target>
        </trans-unit>
        <trans-unit id="379a5baec0aec6967ea9fdc9a921d6518c56bfab" translate="yes" xml:space="preserve">
          <source>ast.Ident.String()</source>
          <target state="translated">ast.Ident.String()</target>
        </trans-unit>
        <trans-unit id="e8b32504ea1616bed57b72a615485e6c5bcf3eb4" translate="yes" xml:space="preserve">
          <source>ast.IfStmt</source>
          <target state="translated">ast.IfStmt</target>
        </trans-unit>
        <trans-unit id="178670415eb055924ac40df950534ad2e2cfb177" translate="yes" xml:space="preserve">
          <source>ast.IfStmt.End()</source>
          <target state="translated">ast.IfStmt.End()</target>
        </trans-unit>
        <trans-unit id="3168e394231032c60de9860d2f24dcdcf6b63f8e" translate="yes" xml:space="preserve">
          <source>ast.IfStmt.Pos()</source>
          <target state="translated">ast.IfStmt.Pos()</target>
        </trans-unit>
        <trans-unit id="bfcf544bdc28ccecfe31d3153402dfc7ba3c84e8" translate="yes" xml:space="preserve">
          <source>ast.ImportSpec</source>
          <target state="translated">ast.ImportSpec</target>
        </trans-unit>
        <trans-unit id="6520064d174144509bdcbce66766ec930bfa8221" translate="yes" xml:space="preserve">
          <source>ast.ImportSpec.End()</source>
          <target state="translated">ast.ImportSpec.End()</target>
        </trans-unit>
        <trans-unit id="1685b88851dbb057469baaa190bd21d978cbe0bc" translate="yes" xml:space="preserve">
          <source>ast.ImportSpec.Pos()</source>
          <target state="translated">ast.ImportSpec.Pos()</target>
        </trans-unit>
        <trans-unit id="9550a9427b344b71e40dd82d19c601c869a4d9cf" translate="yes" xml:space="preserve">
          <source>ast.Importer</source>
          <target state="translated">ast.Importer</target>
        </trans-unit>
        <trans-unit id="e2409ba06fc76d3584c545f92f449b798355f6f0" translate="yes" xml:space="preserve">
          <source>ast.IncDecStmt</source>
          <target state="translated">ast.IncDecStmt</target>
        </trans-unit>
        <trans-unit id="c525b2e381256702c099bdbe34dc9ce4f6ac65c9" translate="yes" xml:space="preserve">
          <source>ast.IncDecStmt.End()</source>
          <target state="translated">ast.IncDecStmt.End()</target>
        </trans-unit>
        <trans-unit id="035fb511709238ab8b28e76ac438ffe702de2d43" translate="yes" xml:space="preserve">
          <source>ast.IncDecStmt.Pos()</source>
          <target state="translated">ast.IncDecStmt.Pos()</target>
        </trans-unit>
        <trans-unit id="b0307e9b16d106daf0b035e58376cabbc9e6926c" translate="yes" xml:space="preserve">
          <source>ast.IndexExpr</source>
          <target state="translated">ast.IndexExpr</target>
        </trans-unit>
        <trans-unit id="ba7fa4f2659716219910cf4d2905f1a1b287fc30" translate="yes" xml:space="preserve">
          <source>ast.IndexExpr.End()</source>
          <target state="translated">ast.IndexExpr.End()</target>
        </trans-unit>
        <trans-unit id="2bd354950c6821edaad7739a8fcba724b547e4fa" translate="yes" xml:space="preserve">
          <source>ast.IndexExpr.Pos()</source>
          <target state="translated">ast.IndexExpr.Pos()</target>
        </trans-unit>
        <trans-unit id="369af34cd5ed40ef9cb2e2c7caefd90a2a428e6c" translate="yes" xml:space="preserve">
          <source>ast.Inspect()</source>
          <target state="translated">ast.Inspect()</target>
        </trans-unit>
        <trans-unit id="25ee0d24e4bdefca08baba42c5b499bef2631939" translate="yes" xml:space="preserve">
          <source>ast.InterfaceType</source>
          <target state="translated">ast.InterfaceType</target>
        </trans-unit>
        <trans-unit id="e7f5beaab84d5a400eb7088597b485d9c2b81693" translate="yes" xml:space="preserve">
          <source>ast.InterfaceType.End()</source>
          <target state="translated">ast.InterfaceType.End()</target>
        </trans-unit>
        <trans-unit id="9d487418673ccb980bc30730b740aa18ffd002e0" translate="yes" xml:space="preserve">
          <source>ast.InterfaceType.Pos()</source>
          <target state="translated">ast.InterfaceType.Pos()</target>
        </trans-unit>
        <trans-unit id="faf203ccf1d8661b112ef0afb394d238113f79de" translate="yes" xml:space="preserve">
          <source>ast.IsExported()</source>
          <target state="translated">ast.IsExported()</target>
        </trans-unit>
        <trans-unit id="f6e29963cd47848646766055861fb753020b2381" translate="yes" xml:space="preserve">
          <source>ast.KeyValueExpr</source>
          <target state="translated">ast.KeyValueExpr</target>
        </trans-unit>
        <trans-unit id="676038a7674ff4180b98b9c95d7f00e44e5ff675" translate="yes" xml:space="preserve">
          <source>ast.KeyValueExpr.End()</source>
          <target state="translated">ast.KeyValueExpr.End()</target>
        </trans-unit>
        <trans-unit id="a7f2488b03dc9603b5fb5ade012894c27963a348" translate="yes" xml:space="preserve">
          <source>ast.KeyValueExpr.Pos()</source>
          <target state="translated">ast.KeyValueExpr.Pos()</target>
        </trans-unit>
        <trans-unit id="d578e8b479cd8e3a67f7d13b952dbdca8d433665" translate="yes" xml:space="preserve">
          <source>ast.LabeledStmt</source>
          <target state="translated">ast.LabeledStmt</target>
        </trans-unit>
        <trans-unit id="f9fd73232548487ac9de1e96e0d63c270ef3ed95" translate="yes" xml:space="preserve">
          <source>ast.LabeledStmt.End()</source>
          <target state="translated">ast.LabeledStmt.End()</target>
        </trans-unit>
        <trans-unit id="b995ca7a0e7388a2d44edaed5a861f6522bc498f" translate="yes" xml:space="preserve">
          <source>ast.LabeledStmt.Pos()</source>
          <target state="translated">ast.LabeledStmt.Pos()</target>
        </trans-unit>
        <trans-unit id="df9495e93abd4f028fe83b85ec5d23acf6607070" translate="yes" xml:space="preserve">
          <source>ast.MapType</source>
          <target state="translated">ast.MapType</target>
        </trans-unit>
        <trans-unit id="7dcd2d302ff7af724275f98b21395263c7226284" translate="yes" xml:space="preserve">
          <source>ast.MapType.End()</source>
          <target state="translated">ast.MapType.End()</target>
        </trans-unit>
        <trans-unit id="b276b6e6eb9e5e3cc5b5890b552ee1d81c6c3143" translate="yes" xml:space="preserve">
          <source>ast.MapType.Pos()</source>
          <target state="translated">ast.MapType.Pos()</target>
        </trans-unit>
        <trans-unit id="ed54ab4ffb1b7117db7ec8c11c2036e13aa354f4" translate="yes" xml:space="preserve">
          <source>ast.MergeMode</source>
          <target state="translated">ast.MergeMode</target>
        </trans-unit>
        <trans-unit id="8a4a1c271018958b6131692bf9772b17140ab60d" translate="yes" xml:space="preserve">
          <source>ast.MergePackageFiles()</source>
          <target state="translated">ast.MergePackageFiles()</target>
        </trans-unit>
        <trans-unit id="d69af0e77986430aeba3a0af081860fe115b6cb4" translate="yes" xml:space="preserve">
          <source>ast.NewCommentMap()</source>
          <target state="translated">ast.NewCommentMap()</target>
        </trans-unit>
        <trans-unit id="5129de288f81e4c27120a9f4a90516ac8d4b5f34" translate="yes" xml:space="preserve">
          <source>ast.NewIdent()</source>
          <target state="translated">ast.NewIdent()</target>
        </trans-unit>
        <trans-unit id="c06ec5f816ad3b7780a18100eac31a6eaf527921" translate="yes" xml:space="preserve">
          <source>ast.NewObj()</source>
          <target state="translated">ast.NewObj()</target>
        </trans-unit>
        <trans-unit id="2b4163acf274523447a3956d93acc0e5781621e5" translate="yes" xml:space="preserve">
          <source>ast.NewPackage()</source>
          <target state="translated">ast.NewPackage()</target>
        </trans-unit>
        <trans-unit id="3b2efbff7f108d5a3dd7383a2f0e3a22b96a0b95" translate="yes" xml:space="preserve">
          <source>ast.NewScope()</source>
          <target state="translated">ast.NewScope()</target>
        </trans-unit>
        <trans-unit id="0adb216e4d94a3ee5529c0e5a9c370f04452e1a6" translate="yes" xml:space="preserve">
          <source>ast.Node</source>
          <target state="translated">ast.Node</target>
        </trans-unit>
        <trans-unit id="623b088bf971f65916f212c72e905cba2b1e8069" translate="yes" xml:space="preserve">
          <source>ast.NotNilFilter()</source>
          <target state="translated">ast.NotNilFilter()</target>
        </trans-unit>
        <trans-unit id="c8b5e6f4a48dae1e13b59cf334752c12dc83b6cf" translate="yes" xml:space="preserve">
          <source>ast.ObjKind</source>
          <target state="translated">ast.ObjKind</target>
        </trans-unit>
        <trans-unit id="f5c5c8806d07aa2e15518741ee67e202bf7dc08f" translate="yes" xml:space="preserve">
          <source>ast.ObjKind.String()</source>
          <target state="translated">ast.ObjKind.String()</target>
        </trans-unit>
        <trans-unit id="bae83b15a576524838f52dbcd6b8b9af033fbbc3" translate="yes" xml:space="preserve">
          <source>ast.Object</source>
          <target state="translated">ast.Object</target>
        </trans-unit>
        <trans-unit id="f9e118af1e4c93586afaf493c284454a19e8b2c2" translate="yes" xml:space="preserve">
          <source>ast.Object.Pos()</source>
          <target state="translated">ast.Object.Pos()</target>
        </trans-unit>
        <trans-unit id="567486dd6cb64bbe9c3106e27aeb037e6d45db3a" translate="yes" xml:space="preserve">
          <source>ast.Package</source>
          <target state="translated">ast.Package</target>
        </trans-unit>
        <trans-unit id="6e7c36460bfe0ea5135ce8fd31205777d5d60c12" translate="yes" xml:space="preserve">
          <source>ast.Package.End()</source>
          <target state="translated">ast.Package.End()</target>
        </trans-unit>
        <trans-unit id="ee7f2c2f5781253733dea51da1d4e081a9748e4c" translate="yes" xml:space="preserve">
          <source>ast.Package.Pos()</source>
          <target state="translated">ast.Package.Pos()</target>
        </trans-unit>
        <trans-unit id="9de5513df1193074b34ab02d7da8cb4e741796b1" translate="yes" xml:space="preserve">
          <source>ast.PackageExports()</source>
          <target state="translated">ast.PackageExports()</target>
        </trans-unit>
        <trans-unit id="139f231cb638880028d85320734757527c82ac60" translate="yes" xml:space="preserve">
          <source>ast.ParenExpr</source>
          <target state="translated">ast.ParenExpr</target>
        </trans-unit>
        <trans-unit id="d126b416ff09631be4e4c4f6c8d43bf9f7f3839b" translate="yes" xml:space="preserve">
          <source>ast.ParenExpr.End()</source>
          <target state="translated">ast.ParenExpr.End()</target>
        </trans-unit>
        <trans-unit id="04e88d4d23aafe693674ecc9cfe48d7a6c2cd129" translate="yes" xml:space="preserve">
          <source>ast.ParenExpr.Pos()</source>
          <target state="translated">ast.ParenExpr.Pos()</target>
        </trans-unit>
        <trans-unit id="fed56f5a529bbbdad3be7095347db89f91335f9e" translate="yes" xml:space="preserve">
          <source>ast.Print()</source>
          <target state="translated">ast.Print()</target>
        </trans-unit>
        <trans-unit id="ca1f91b57c98735d5e2724adaa27b0d01a506579" translate="yes" xml:space="preserve">
          <source>ast.RangeStmt</source>
          <target state="translated">ast.RangeStmt</target>
        </trans-unit>
        <trans-unit id="2b3df827347af65c5220ad0699cabf973a66c936" translate="yes" xml:space="preserve">
          <source>ast.RangeStmt.End()</source>
          <target state="translated">ast.RangeStmt.End()</target>
        </trans-unit>
        <trans-unit id="405f7515494c4809d791b345db37d8cd690219d6" translate="yes" xml:space="preserve">
          <source>ast.RangeStmt.Pos()</source>
          <target state="translated">ast.RangeStmt.Pos()</target>
        </trans-unit>
        <trans-unit id="5fc9b43eecceb9d8865e778bc56693be1bd04af5" translate="yes" xml:space="preserve">
          <source>ast.ReturnStmt</source>
          <target state="translated">ast.ReturnStmt</target>
        </trans-unit>
        <trans-unit id="3acfc24d47f39c0c780bdb543aee8a14e2f6b398" translate="yes" xml:space="preserve">
          <source>ast.ReturnStmt.End()</source>
          <target state="translated">ast.ReturnStmt.End()</target>
        </trans-unit>
        <trans-unit id="b25c08db40485d577c3cf52a7df5652307cfd082" translate="yes" xml:space="preserve">
          <source>ast.ReturnStmt.Pos()</source>
          <target state="translated">ast.ReturnStmt.Pos()</target>
        </trans-unit>
        <trans-unit id="3c4f3fcf698e11ad4ef0d1d860bc42d79c1d6335" translate="yes" xml:space="preserve">
          <source>ast.Scope</source>
          <target state="translated">ast.Scope</target>
        </trans-unit>
        <trans-unit id="a7f2353ab10d058df49025107d7f80776e4b06c2" translate="yes" xml:space="preserve">
          <source>ast.Scope.Insert()</source>
          <target state="translated">ast.Scope.Insert()</target>
        </trans-unit>
        <trans-unit id="f14b79f9fc6e1ae02e48c6c9b700065f052bd6ff" translate="yes" xml:space="preserve">
          <source>ast.Scope.Lookup()</source>
          <target state="translated">ast.Scope.Lookup()</target>
        </trans-unit>
        <trans-unit id="5b95cd8378b36dac9f7e271f67bf4ced58ac82b6" translate="yes" xml:space="preserve">
          <source>ast.Scope.String()</source>
          <target state="translated">ast.Scope.String()</target>
        </trans-unit>
        <trans-unit id="6ffc6174e0346c5eb0bd447799e285ceb2b67a7a" translate="yes" xml:space="preserve">
          <source>ast.SelectStmt</source>
          <target state="translated">ast.SelectStmt</target>
        </trans-unit>
        <trans-unit id="94ada0a282cd66c315cedca378236abe2b55e42b" translate="yes" xml:space="preserve">
          <source>ast.SelectStmt.End()</source>
          <target state="translated">ast.SelectStmt.End()</target>
        </trans-unit>
        <trans-unit id="60ab7074daf140138b422f554ad2e121cb70a88e" translate="yes" xml:space="preserve">
          <source>ast.SelectStmt.Pos()</source>
          <target state="translated">ast.SelectStmt.Pos()</target>
        </trans-unit>
        <trans-unit id="9fd58c075f3747285b6e7d6b057656caea4dfb15" translate="yes" xml:space="preserve">
          <source>ast.SelectorExpr</source>
          <target state="translated">ast.SelectorExpr</target>
        </trans-unit>
        <trans-unit id="aab656a4e3befeb695f9c09da789411215f9e81c" translate="yes" xml:space="preserve">
          <source>ast.SelectorExpr.End()</source>
          <target state="translated">ast.SelectorExpr.End()</target>
        </trans-unit>
        <trans-unit id="e24ee60e56bdb1d72f60635d1abb6a7fe6b3489c" translate="yes" xml:space="preserve">
          <source>ast.SelectorExpr.Pos()</source>
          <target state="translated">ast.SelectorExpr.Pos()</target>
        </trans-unit>
        <trans-unit id="e09be7cece8df7fea15336136ca6cd2b20b01ea0" translate="yes" xml:space="preserve">
          <source>ast.SendStmt</source>
          <target state="translated">ast.SendStmt</target>
        </trans-unit>
        <trans-unit id="8d8cfca6d27eb8024cf957aa9aab02ceb80f2a96" translate="yes" xml:space="preserve">
          <source>ast.SendStmt.End()</source>
          <target state="translated">ast.SendStmt.End()</target>
        </trans-unit>
        <trans-unit id="3cd30925ad3333b551bee09d78fdd41c6a5ce183" translate="yes" xml:space="preserve">
          <source>ast.SendStmt.Pos()</source>
          <target state="translated">ast.SendStmt.Pos()</target>
        </trans-unit>
        <trans-unit id="939932c50298b92117488c46251f13b11e7b47b9" translate="yes" xml:space="preserve">
          <source>ast.SliceExpr</source>
          <target state="translated">ast.SliceExpr</target>
        </trans-unit>
        <trans-unit id="f849fa118f03aa5fc3b7c517d60e19956c2dc69a" translate="yes" xml:space="preserve">
          <source>ast.SliceExpr.End()</source>
          <target state="translated">ast.SliceExpr.End()</target>
        </trans-unit>
        <trans-unit id="66822f43b70f862fe3d114dea48400685c5ea7be" translate="yes" xml:space="preserve">
          <source>ast.SliceExpr.Pos()</source>
          <target state="translated">ast.SliceExpr.Pos()</target>
        </trans-unit>
        <trans-unit id="4c2d369f7096af0d255334de26cf26af744bd73e" translate="yes" xml:space="preserve">
          <source>ast.SortImports()</source>
          <target state="translated">ast.SortImports()</target>
        </trans-unit>
        <trans-unit id="b05c11f1a97da11082ad9d609677eabadfeb85a6" translate="yes" xml:space="preserve">
          <source>ast.Spec</source>
          <target state="translated">ast.Spec</target>
        </trans-unit>
        <trans-unit id="647bd402923d8756230898c1ba5e288311b035c1" translate="yes" xml:space="preserve">
          <source>ast.StarExpr</source>
          <target state="translated">ast.StarExpr</target>
        </trans-unit>
        <trans-unit id="1964d6b8d522047a124104e27818c8e2359c3692" translate="yes" xml:space="preserve">
          <source>ast.StarExpr.End()</source>
          <target state="translated">ast.StarExpr.End()</target>
        </trans-unit>
        <trans-unit id="50986ca8f36ea9c3fa33e8b919d7f85757eac03f" translate="yes" xml:space="preserve">
          <source>ast.StarExpr.Pos()</source>
          <target state="translated">ast.StarExpr.Pos()</target>
        </trans-unit>
        <trans-unit id="86f0f7a23d86131b9800aa9a989271077f20efab" translate="yes" xml:space="preserve">
          <source>ast.Stmt</source>
          <target state="translated">ast.Stmt</target>
        </trans-unit>
        <trans-unit id="b0dd6f652568d7067080d2ca2b56d2c88a8de03e" translate="yes" xml:space="preserve">
          <source>ast.StructType</source>
          <target state="translated">ast.StructType</target>
        </trans-unit>
        <trans-unit id="1e930ddc8c4a5774d8053572f446cfe1f98baf5e" translate="yes" xml:space="preserve">
          <source>ast.StructType.End()</source>
          <target state="translated">ast.StructType.End()</target>
        </trans-unit>
        <trans-unit id="974d34f27a1b29932a04081b3b62b729e35d50ad" translate="yes" xml:space="preserve">
          <source>ast.StructType.Pos()</source>
          <target state="translated">ast.StructType.Pos()</target>
        </trans-unit>
        <trans-unit id="3bfefae46bec9a84aa0dcdec1fdb96fe9e8dc5e9" translate="yes" xml:space="preserve">
          <source>ast.SwitchStmt</source>
          <target state="translated">ast.SwitchStmt</target>
        </trans-unit>
        <trans-unit id="eae19bd67a966c515510234ab4d4140be3a1c6d6" translate="yes" xml:space="preserve">
          <source>ast.SwitchStmt.End()</source>
          <target state="translated">ast.SwitchStmt.End()</target>
        </trans-unit>
        <trans-unit id="ddfc8fd4891972076b06b640aeae5b3196a39af7" translate="yes" xml:space="preserve">
          <source>ast.SwitchStmt.Pos()</source>
          <target state="translated">ast.SwitchStmt.Pos()</target>
        </trans-unit>
        <trans-unit id="511994a681d16005b7af95e7a5da6dd4db5399f9" translate="yes" xml:space="preserve">
          <source>ast.TypeAssertExpr</source>
          <target state="translated">ast.TypeAssertExpr</target>
        </trans-unit>
        <trans-unit id="2efaf8edb739c186bc42069addf3e17bc2aeca99" translate="yes" xml:space="preserve">
          <source>ast.TypeAssertExpr.End()</source>
          <target state="translated">ast.TypeAssertExpr.End()</target>
        </trans-unit>
        <trans-unit id="8803169dfef47ec439bf00dae20f5da392b20942" translate="yes" xml:space="preserve">
          <source>ast.TypeAssertExpr.Pos()</source>
          <target state="translated">ast.TypeAssertExpr.Pos()</target>
        </trans-unit>
        <trans-unit id="6c3cc9d7c5a942e2999d2bc9b6e4b01230adf2c0" translate="yes" xml:space="preserve">
          <source>ast.TypeSpec</source>
          <target state="translated">ast.TypeSpec</target>
        </trans-unit>
        <trans-unit id="a39ec8493eb41ac22fa974ffe4695d43bb92f6f6" translate="yes" xml:space="preserve">
          <source>ast.TypeSpec.End()</source>
          <target state="translated">ast.TypeSpec.End()</target>
        </trans-unit>
        <trans-unit id="c305837a55118c67071516291a2cff9f03376afe" translate="yes" xml:space="preserve">
          <source>ast.TypeSpec.Pos()</source>
          <target state="translated">ast.TypeSpec.Pos()</target>
        </trans-unit>
        <trans-unit id="d7973974759919e56b74a7d89bec96b76332845c" translate="yes" xml:space="preserve">
          <source>ast.TypeSwitchStmt</source>
          <target state="translated">ast.TypeSwitchStmt</target>
        </trans-unit>
        <trans-unit id="ddb9d9440fa0357f48a896623aef5564c63e0240" translate="yes" xml:space="preserve">
          <source>ast.TypeSwitchStmt.End()</source>
          <target state="translated">ast.TypeSwitchStmt.End()</target>
        </trans-unit>
        <trans-unit id="278eaa39a3edf9aaed3ac5d0bcc44d950af6cf7f" translate="yes" xml:space="preserve">
          <source>ast.TypeSwitchStmt.Pos()</source>
          <target state="translated">ast.TypeSwitchStmt.Pos()</target>
        </trans-unit>
        <trans-unit id="d0eeb36951a1023fd284574c69fe94476ba07ebb" translate="yes" xml:space="preserve">
          <source>ast.UnaryExpr</source>
          <target state="translated">ast.UnaryExpr</target>
        </trans-unit>
        <trans-unit id="23e5d7c464ae281c5c1290aa3dae6c78832b82e6" translate="yes" xml:space="preserve">
          <source>ast.UnaryExpr.End()</source>
          <target state="translated">ast.UnaryExpr.End()</target>
        </trans-unit>
        <trans-unit id="d08e83e8c53fba6474ce544a2fccdb0c1ff7e88b" translate="yes" xml:space="preserve">
          <source>ast.UnaryExpr.Pos()</source>
          <target state="translated">ast.UnaryExpr.Pos()</target>
        </trans-unit>
        <trans-unit id="afd7ff77af41bb8b120755022913b51df1d30dd3" translate="yes" xml:space="preserve">
          <source>ast.ValueSpec</source>
          <target state="translated">ast.ValueSpec</target>
        </trans-unit>
        <trans-unit id="8ec8a786e46f9bd9078336a5ef5d59aaf5639f9d" translate="yes" xml:space="preserve">
          <source>ast.ValueSpec.End()</source>
          <target state="translated">ast.ValueSpec.End()</target>
        </trans-unit>
        <trans-unit id="189d5e6afc8da68e63fc9a6e21cb8eb6db672909" translate="yes" xml:space="preserve">
          <source>ast.ValueSpec.Pos()</source>
          <target state="translated">ast.ValueSpec.Pos()</target>
        </trans-unit>
        <trans-unit id="5c72ca674fd86a034097a9ab40092742e61ca00e" translate="yes" xml:space="preserve">
          <source>ast.Visitor</source>
          <target state="translated">ast.Visitor</target>
        </trans-unit>
        <trans-unit id="f7af9ab36522159da08d389fe0d3008f3cbdf87a" translate="yes" xml:space="preserve">
          <source>ast.Walk()</source>
          <target state="translated">ast.Walk()</target>
        </trans-unit>
        <trans-unit id="4e91475d3fae49d1a8a60862b1dbc2d921e7d999" translate="yes" xml:space="preserve">
          <source>atomic</source>
          <target state="translated">atomic</target>
        </trans-unit>
        <trans-unit id="58aa59321f19412f2ac770a251bd5271312090a0" translate="yes" xml:space="preserve">
          <source>atomic.AddInt32()</source>
          <target state="translated">atomic.AddInt32()</target>
        </trans-unit>
        <trans-unit id="684df8220b2683d931ea4b2bcc75014fc2b27f95" translate="yes" xml:space="preserve">
          <source>atomic.AddInt64()</source>
          <target state="translated">atomic.AddInt64()</target>
        </trans-unit>
        <trans-unit id="204850a57d68184500b8a57bdac3bed7e69d3d3e" translate="yes" xml:space="preserve">
          <source>atomic.AddUint32()</source>
          <target state="translated">atomic.AddUint32()</target>
        </trans-unit>
        <trans-unit id="9b04e2543a812b9f31f1de70b5f183c0d8eaa30b" translate="yes" xml:space="preserve">
          <source>atomic.AddUint64()</source>
          <target state="translated">atomic.AddUint64()</target>
        </trans-unit>
        <trans-unit id="52233317dc1b402437ef10ca4019c2a2a7a30d46" translate="yes" xml:space="preserve">
          <source>atomic.AddUintptr()</source>
          <target state="translated">atomic.AddUintptr()</target>
        </trans-unit>
        <trans-unit id="f253efe7756edca30a38f68e7d8a81d9734497ba" translate="yes" xml:space="preserve">
          <source>atomic.CompareAndSwapInt32()</source>
          <target state="translated">atomic.CompareAndSwapInt32()</target>
        </trans-unit>
        <trans-unit id="aa2c4348891daf41fee1d7e35fd9b793994efa57" translate="yes" xml:space="preserve">
          <source>atomic.CompareAndSwapInt64()</source>
          <target state="translated">atomic.CompareAndSwapInt64()</target>
        </trans-unit>
        <trans-unit id="2ac8d7c35bcd74ff1d77f7abb22bedcdbfaea746" translate="yes" xml:space="preserve">
          <source>atomic.CompareAndSwapPointer()</source>
          <target state="translated">atomic.CompareAndSwapPointer()</target>
        </trans-unit>
        <trans-unit id="835abad7e209b7499a584febc57dd3a7edcd5e8b" translate="yes" xml:space="preserve">
          <source>atomic.CompareAndSwapUint32()</source>
          <target state="translated">atomic.CompareAndSwapUint32()</target>
        </trans-unit>
        <trans-unit id="025d2c0c515f0de63affd68165ccb1a1582fcba7" translate="yes" xml:space="preserve">
          <source>atomic.CompareAndSwapUint64()</source>
          <target state="translated">atomic.CompareAndSwapUint64()</target>
        </trans-unit>
        <trans-unit id="b70891f7438156179c383ec6017c1980b7e144a4" translate="yes" xml:space="preserve">
          <source>atomic.CompareAndSwapUintptr()</source>
          <target state="translated">atomic.CompareAndSwapUintptr()</target>
        </trans-unit>
        <trans-unit id="757fb093cd27bffce85ad454e3abbf62c0096668" translate="yes" xml:space="preserve">
          <source>atomic.LoadInt32()</source>
          <target state="translated">atomic.LoadInt32()</target>
        </trans-unit>
        <trans-unit id="a58ce654523f10280e302070c6a07a2183b635e5" translate="yes" xml:space="preserve">
          <source>atomic.LoadInt64()</source>
          <target state="translated">atomic.LoadInt64()</target>
        </trans-unit>
        <trans-unit id="42041b25d101bbf89ee602d7f9bc488af2efaa8a" translate="yes" xml:space="preserve">
          <source>atomic.LoadPointer()</source>
          <target state="translated">atomic.LoadPointer()</target>
        </trans-unit>
        <trans-unit id="4bbe7e0ac8ec81ec5f6b90f7813b255620283517" translate="yes" xml:space="preserve">
          <source>atomic.LoadUint32()</source>
          <target state="translated">atomic.LoadUint32()</target>
        </trans-unit>
        <trans-unit id="207dfdbdc80faacdd7822393f9318e689ec6b433" translate="yes" xml:space="preserve">
          <source>atomic.LoadUint64()</source>
          <target state="translated">atomic.LoadUint64()</target>
        </trans-unit>
        <trans-unit id="ca928bd8d0fdbf49c72d86d935a13053a89d1b63" translate="yes" xml:space="preserve">
          <source>atomic.LoadUintptr()</source>
          <target state="translated">atomic.LoadUintptr()</target>
        </trans-unit>
        <trans-unit id="0aa6400788668f62be0e33de0d41f9832aac0f7e" translate="yes" xml:space="preserve">
          <source>atomic.StoreInt32()</source>
          <target state="translated">atomic.StoreInt32()</target>
        </trans-unit>
        <trans-unit id="c9b15a2d35f814e7eef1dff10e7a81a356a311eb" translate="yes" xml:space="preserve">
          <source>atomic.StoreInt64()</source>
          <target state="translated">atomic.StoreInt64()</target>
        </trans-unit>
        <trans-unit id="f6e874c8394be5b7f8912e19b7e11623a70ff452" translate="yes" xml:space="preserve">
          <source>atomic.StorePointer()</source>
          <target state="translated">atomic.StorePointer()</target>
        </trans-unit>
        <trans-unit id="2be2272907b1c798f065a4b68ded18cd79db8d31" translate="yes" xml:space="preserve">
          <source>atomic.StoreUint32()</source>
          <target state="translated">atomic.StoreUint32()</target>
        </trans-unit>
        <trans-unit id="e76cee43be4e4d710a29e7b27bfe7b7dcf36f9ed" translate="yes" xml:space="preserve">
          <source>atomic.StoreUint64()</source>
          <target state="translated">atomic.StoreUint64()</target>
        </trans-unit>
        <trans-unit id="7ad3e09913b7216935ed591e5c1e34f3f883c02f" translate="yes" xml:space="preserve">
          <source>atomic.StoreUintptr()</source>
          <target state="translated">atomic.StoreUintptr()</target>
        </trans-unit>
        <trans-unit id="f1fd798f6bc95d762aa4d6fbe4ee05f76b6de792" translate="yes" xml:space="preserve">
          <source>atomic.SwapInt32()</source>
          <target state="translated">atomic.SwapInt32()</target>
        </trans-unit>
        <trans-unit id="531b7d01d89c3745e41b6fb820964f82213bab5e" translate="yes" xml:space="preserve">
          <source>atomic.SwapInt64()</source>
          <target state="translated">atomic.SwapInt64()</target>
        </trans-unit>
        <trans-unit id="4ff0c430f911a6b9ea7c8d22cbc55672cbc933ad" translate="yes" xml:space="preserve">
          <source>atomic.SwapPointer()</source>
          <target state="translated">atomic.SwapPointer()</target>
        </trans-unit>
        <trans-unit id="709eed82f47f519237ba1b4c6eedd5dcb2d2a16d" translate="yes" xml:space="preserve">
          <source>atomic.SwapUint32()</source>
          <target state="translated">atomic.SwapUint32()</target>
        </trans-unit>
        <trans-unit id="81d98a3a7ec6b71da9f682a21f2d4b690dab3dcd" translate="yes" xml:space="preserve">
          <source>atomic.SwapUint64()</source>
          <target state="translated">atomic.SwapUint64()</target>
        </trans-unit>
        <trans-unit id="781494f233b5d5b9a471afe38b972c24b93c8b78" translate="yes" xml:space="preserve">
          <source>atomic.SwapUintptr()</source>
          <target state="translated">atomic.SwapUintptr()</target>
        </trans-unit>
        <trans-unit id="dbe8b2edf2e00a7cb6d07f026d419ca01749fc2a" translate="yes" xml:space="preserve">
          <source>atomic.Value</source>
          <target state="translated">atomic.Value</target>
        </trans-unit>
        <trans-unit id="2df2af007913bbc38b52801b6b8c19d05f819b1c" translate="yes" xml:space="preserve">
          <source>atomic.Value.Load()</source>
          <target state="translated">atomic.Value.Load()</target>
        </trans-unit>
        <trans-unit id="87f3589fedee82afe858cb6d224de9d10c72de46" translate="yes" xml:space="preserve">
          <source>atomic.Value.Store()</source>
          <target state="translated">atomic.Value.Store()</target>
        </trans-unit>
        <trans-unit id="b10d9c983b31c0755f0a1eca5511659f8c3e47ac" translate="yes" xml:space="preserve">
          <source>base32</source>
          <target state="translated">base32</target>
        </trans-unit>
        <trans-unit id="609a64f26abd7f79b9f515ef8258247840270b06" translate="yes" xml:space="preserve">
          <source>base32.CorruptInputError</source>
          <target state="translated">base32.CorruptInputError</target>
        </trans-unit>
        <trans-unit id="557ced65b57719c249b3ba13ce045862d29051be" translate="yes" xml:space="preserve">
          <source>base32.CorruptInputError.Error()</source>
          <target state="translated">base32.CorruptInputError.Error()</target>
        </trans-unit>
        <trans-unit id="34d7b0dfddafbcec9ec192b9ace3a318f3b4042e" translate="yes" xml:space="preserve">
          <source>base32.Encoding</source>
          <target state="translated">base32.Encoding</target>
        </trans-unit>
        <trans-unit id="e6c1dda2ec378fe6b8959c39fac4740199ff42e0" translate="yes" xml:space="preserve">
          <source>base32.Encoding.Decode()</source>
          <target state="translated">base32.Encoding.Decode()</target>
        </trans-unit>
        <trans-unit id="80fed6290c9fd2bab25e879757c4cbc038b44631" translate="yes" xml:space="preserve">
          <source>base32.Encoding.DecodeString()</source>
          <target state="translated">base32.Encoding.DecodeString()</target>
        </trans-unit>
        <trans-unit id="51150a8fc33462d01e5bbf434b2323c1d23a60c2" translate="yes" xml:space="preserve">
          <source>base32.Encoding.DecodedLen()</source>
          <target state="translated">base32.Encoding.DecodedLen()</target>
        </trans-unit>
        <trans-unit id="e898b89479a8a90c35d6dab173f30c1f29d3b910" translate="yes" xml:space="preserve">
          <source>base32.Encoding.Encode()</source>
          <target state="translated">base32.Encoding.Encode()</target>
        </trans-unit>
        <trans-unit id="9977ca4f1a05aa0bb1c9781a78a6495cffc3325b" translate="yes" xml:space="preserve">
          <source>base32.Encoding.EncodeToString()</source>
          <target state="translated">base32.Encoding.EncodeToString()</target>
        </trans-unit>
        <trans-unit id="10eaa0fece3a9d5b73dec810f748346f4bddd3d4" translate="yes" xml:space="preserve">
          <source>base32.Encoding.EncodedLen()</source>
          <target state="translated">base32.Encoding.EncodedLen()</target>
        </trans-unit>
        <trans-unit id="4a1bbd24e21e69f7283f0707dc7bb0d3b2d6658b" translate="yes" xml:space="preserve">
          <source>base32.Encoding.WithPadding()</source>
          <target state="translated">base32.Encoding.WithPadding()</target>
        </trans-unit>
        <trans-unit id="64b8e6b3c56f44e6d41137df882ce5312dde05bd" translate="yes" xml:space="preserve">
          <source>base32.NewDecoder()</source>
          <target state="translated">base32.NewDecoder()</target>
        </trans-unit>
        <trans-unit id="8d320f0aa146b48acb4f04c5fa57fdd58277c3db" translate="yes" xml:space="preserve">
          <source>base32.NewEncoder()</source>
          <target state="translated">base32.NewEncoder()</target>
        </trans-unit>
        <trans-unit id="c1cbfa343def29a77eb4b5bc5180f928102c64ab" translate="yes" xml:space="preserve">
          <source>base32.NewEncoding()</source>
          <target state="translated">base32.NewEncoding()</target>
        </trans-unit>
        <trans-unit id="f34278aa6a495b0a135bb0212aec087332f393f0" translate="yes" xml:space="preserve">
          <source>base32.go</source>
          <target state="translated">base32.go</target>
        </trans-unit>
        <trans-unit id="8095e159699116466e36cbafd09e1d845f29f2b9" translate="yes" xml:space="preserve">
          <source>base64</source>
          <target state="translated">base64</target>
        </trans-unit>
        <trans-unit id="b38470886bd8bd7777a3f5f61ed40e7a752fb5f2" translate="yes" xml:space="preserve">
          <source>base64.CorruptInputError</source>
          <target state="translated">base64.CorruptInputError</target>
        </trans-unit>
        <trans-unit id="0edde3e496f38aa1a268083ce728bc302623ea13" translate="yes" xml:space="preserve">
          <source>base64.CorruptInputError.Error()</source>
          <target state="translated">base64.CorruptInputError.Error()</target>
        </trans-unit>
        <trans-unit id="546ed5ee496989148f9999261b2d22195a964b7a" translate="yes" xml:space="preserve">
          <source>base64.Encoding</source>
          <target state="translated">base64.Encoding</target>
        </trans-unit>
        <trans-unit id="ffff58d2908dbc1db9a2b840e6ed973279518531" translate="yes" xml:space="preserve">
          <source>base64.Encoding.Decode()</source>
          <target state="translated">base64.Encoding.Decode()</target>
        </trans-unit>
        <trans-unit id="322c09e2b0977199a663929b1b15c6c35858f535" translate="yes" xml:space="preserve">
          <source>base64.Encoding.DecodeString()</source>
          <target state="translated">base64.Encoding.DecodeString()</target>
        </trans-unit>
        <trans-unit id="ec7afc0a3a54fe361efddffaba5109ab82e891fa" translate="yes" xml:space="preserve">
          <source>base64.Encoding.DecodedLen()</source>
          <target state="translated">base64.Encoding.DecodedLen()</target>
        </trans-unit>
        <trans-unit id="e986bc3faabcbe48f5f8715b47026c0084ba028c" translate="yes" xml:space="preserve">
          <source>base64.Encoding.Encode()</source>
          <target state="translated">base64.Encoding.Encode()</target>
        </trans-unit>
        <trans-unit id="499081e69ef0aff1f8c9523bca083cfcc4e62648" translate="yes" xml:space="preserve">
          <source>base64.Encoding.EncodeToString()</source>
          <target state="translated">base64.Encoding.EncodeToString()</target>
        </trans-unit>
        <trans-unit id="2ecb94b568285a7e5401123a07693428567e9dc5" translate="yes" xml:space="preserve">
          <source>base64.Encoding.EncodedLen()</source>
          <target state="translated">base64.Encoding.EncodedLen()</target>
        </trans-unit>
        <trans-unit id="88a1cdbf82b0df6a2ef8f99437387f0d10f49d8e" translate="yes" xml:space="preserve">
          <source>base64.Encoding.Strict()</source>
          <target state="translated">base64.Encoding.Strict()</target>
        </trans-unit>
        <trans-unit id="8de136deec5d12b0cbe338b060edf766ce4ccfcc" translate="yes" xml:space="preserve">
          <source>base64.Encoding.WithPadding()</source>
          <target state="translated">base64.Encoding.WithPadding()</target>
        </trans-unit>
        <trans-unit id="f238d23bb77e70bd58dc63ba2233791a153d160f" translate="yes" xml:space="preserve">
          <source>base64.NewDecoder()</source>
          <target state="translated">base64.NewDecoder()</target>
        </trans-unit>
        <trans-unit id="297c32b69eceb47f7c88a8e0522776b43298f7eb" translate="yes" xml:space="preserve">
          <source>base64.NewEncoder()</source>
          <target state="translated">base64.NewEncoder()</target>
        </trans-unit>
        <trans-unit id="5f28c53d820ecae146289e7c1b42f685c51e23e9" translate="yes" xml:space="preserve">
          <source>base64.NewEncoding()</source>
          <target state="translated">base64.NewEncoding()</target>
        </trans-unit>
        <trans-unit id="88d42348cdeabc477080b0b95ddc4938da9323a3" translate="yes" xml:space="preserve">
          <source>base64.go</source>
          <target state="translated">base64.go</target>
        </trans-unit>
        <trans-unit id="93e8555827c5694d236d9db1496a0594e7a9ad3f" translate="yes" xml:space="preserve">
          <source>because the former will succeed if err wraps an *os.PathError.</source>
          <target state="translated">err이 * os.PathError를 랩핑하면 전자가 성공하기 때문입니다.</target>
        </trans-unit>
        <trans-unit id="da69164b9396d1db28681cb97d72f65cc1a63754" translate="yes" xml:space="preserve">
          <source>because the former will succeed if err wraps os.ErrExist.</source>
          <target state="translated">err이 os.ErrExist를 감싸면 전자가 성공하기 때문입니다.</target>
        </trans-unit>
        <trans-unit id="95c4bea12e4edcf8aad730a222793324dc42c29d" translate="yes" xml:space="preserve">
          <source>big</source>
          <target state="translated">big</target>
        </trans-unit>
        <trans-unit id="48c65ee41676068d2a21e71b4e992068c12b7174" translate="yes" xml:space="preserve">
          <source>big.Accuracy</source>
          <target state="translated">big.Accuracy</target>
        </trans-unit>
        <trans-unit id="a7bbd4601057f5a3ca2d4f8734bfe5fa3d8b3718" translate="yes" xml:space="preserve">
          <source>big.Accuracy.String()</source>
          <target state="translated">big.Accuracy.String()</target>
        </trans-unit>
        <trans-unit id="b041ece7524249790ccfd6b27bbe21196a7ab2d2" translate="yes" xml:space="preserve">
          <source>big.ErrNaN</source>
          <target state="translated">big.ErrNaN</target>
        </trans-unit>
        <trans-unit id="2ed3d01e1882eaa614d2cbb86fc0b4e61426e534" translate="yes" xml:space="preserve">
          <source>big.ErrNaN.Error()</source>
          <target state="translated">big.ErrNaN.Error()</target>
        </trans-unit>
        <trans-unit id="65649c28b38824082e1d05263a2f94f35a9f9c96" translate="yes" xml:space="preserve">
          <source>big.Float</source>
          <target state="translated">big.Float</target>
        </trans-unit>
        <trans-unit id="99194767f09e43d05c78c7903ee896be17d85d41" translate="yes" xml:space="preserve">
          <source>big.Float.Abs()</source>
          <target state="translated">big.Float.Abs()</target>
        </trans-unit>
        <trans-unit id="323429575b559ad14122579ccb691aef3e537dad" translate="yes" xml:space="preserve">
          <source>big.Float.Acc()</source>
          <target state="translated">big.Float.Acc()</target>
        </trans-unit>
        <trans-unit id="06137924596fa6cfa38e38c17cc9a468ddc0a7ce" translate="yes" xml:space="preserve">
          <source>big.Float.Add()</source>
          <target state="translated">big.Float.Add()</target>
        </trans-unit>
        <trans-unit id="e1a41afc0679c01be6a11555766a3e5b96f00ff4" translate="yes" xml:space="preserve">
          <source>big.Float.Append()</source>
          <target state="translated">big.Float.Append()</target>
        </trans-unit>
        <trans-unit id="12786c13aaf629f8f3b9bdc7839ae750a70cdb8c" translate="yes" xml:space="preserve">
          <source>big.Float.Cmp()</source>
          <target state="translated">big.Float.Cmp()</target>
        </trans-unit>
        <trans-unit id="43410bfab451fb22ff6985360471d4e6caa9ef73" translate="yes" xml:space="preserve">
          <source>big.Float.Copy()</source>
          <target state="translated">big.Float.Copy()</target>
        </trans-unit>
        <trans-unit id="27bbf5e39d14bf8bde28ca9706e4e7320f949556" translate="yes" xml:space="preserve">
          <source>big.Float.Float32()</source>
          <target state="translated">big.Float.Float32()</target>
        </trans-unit>
        <trans-unit id="7399a587fb7af08e1047a6214174bdfbb7247343" translate="yes" xml:space="preserve">
          <source>big.Float.Float64()</source>
          <target state="translated">big.Float.Float64()</target>
        </trans-unit>
        <trans-unit id="602b5de0af57a23ba03eee8d1be9265d9d0ce90f" translate="yes" xml:space="preserve">
          <source>big.Float.Format()</source>
          <target state="translated">big.Float.Format()</target>
        </trans-unit>
        <trans-unit id="9ff56d2f4190584dd77b17febe7e079ede8e4ce7" translate="yes" xml:space="preserve">
          <source>big.Float.GobDecode()</source>
          <target state="translated">big.Float.GobDecode()</target>
        </trans-unit>
        <trans-unit id="c85b9b44b7058c866f9ee52b20d8b0a1b2f240b3" translate="yes" xml:space="preserve">
          <source>big.Float.GobEncode()</source>
          <target state="translated">big.Float.GobEncode()</target>
        </trans-unit>
        <trans-unit id="1f98765ec6be87f7678a9cab1ffd7fa8fc3b3b80" translate="yes" xml:space="preserve">
          <source>big.Float.Int()</source>
          <target state="translated">big.Float.Int()</target>
        </trans-unit>
        <trans-unit id="c37bd8c65ba9cf9f56324d2453ee55dce6d43006" translate="yes" xml:space="preserve">
          <source>big.Float.Int64()</source>
          <target state="translated">big.Float.Int64()</target>
        </trans-unit>
        <trans-unit id="e33cf30228d1e33d086fb7adf6d1de3b59d8e56e" translate="yes" xml:space="preserve">
          <source>big.Float.IsInf()</source>
          <target state="translated">big.Float.IsInf()</target>
        </trans-unit>
        <trans-unit id="abff97ea11b5dd186b7fbdaba7614cbf60ee0fd7" translate="yes" xml:space="preserve">
          <source>big.Float.IsInt()</source>
          <target state="translated">big.Float.IsInt()</target>
        </trans-unit>
        <trans-unit id="88870172e7738d5d66e9b2c71d502bb7f0e35ee5" translate="yes" xml:space="preserve">
          <source>big.Float.MantExp()</source>
          <target state="translated">big.Float.MantExp()</target>
        </trans-unit>
        <trans-unit id="48a4cddcbbe770503183a22375eee33cea9c4781" translate="yes" xml:space="preserve">
          <source>big.Float.MarshalText()</source>
          <target state="translated">big.Float.MarshalText()</target>
        </trans-unit>
        <trans-unit id="3481995a0646573a765e889e9cc60291f3cc302f" translate="yes" xml:space="preserve">
          <source>big.Float.MinPrec()</source>
          <target state="translated">big.Float.MinPrec()</target>
        </trans-unit>
        <trans-unit id="5166f4d182e1fedc41c0be44e26a88d0131256d2" translate="yes" xml:space="preserve">
          <source>big.Float.Mode()</source>
          <target state="translated">big.Float.Mode()</target>
        </trans-unit>
        <trans-unit id="96428fbcf7b8a46a7fb44227da67021f3711c1a7" translate="yes" xml:space="preserve">
          <source>big.Float.Mul()</source>
          <target state="translated">big.Float.Mul()</target>
        </trans-unit>
        <trans-unit id="c39c51ebfd34a7be501ad97e59922f9109e8e430" translate="yes" xml:space="preserve">
          <source>big.Float.Neg()</source>
          <target state="translated">big.Float.Neg()</target>
        </trans-unit>
        <trans-unit id="aa26a0239b02f7c5e2e9141cdae21941a7cd786a" translate="yes" xml:space="preserve">
          <source>big.Float.Parse()</source>
          <target state="translated">big.Float.Parse()</target>
        </trans-unit>
        <trans-unit id="897829c231035257e77d78ae222eaea4ab714f5e" translate="yes" xml:space="preserve">
          <source>big.Float.Prec()</source>
          <target state="translated">big.Float.Prec()</target>
        </trans-unit>
        <trans-unit id="5899e75950b134c08a6d4ab6134f31c900366276" translate="yes" xml:space="preserve">
          <source>big.Float.Quo()</source>
          <target state="translated">big.Float.Quo()</target>
        </trans-unit>
        <trans-unit id="35e4a112d0dc010b485b8398410cadc66554a25b" translate="yes" xml:space="preserve">
          <source>big.Float.Rat()</source>
          <target state="translated">big.Float.Rat()</target>
        </trans-unit>
        <trans-unit id="9f15181ea1821f144cd2c2c988188f081510cdeb" translate="yes" xml:space="preserve">
          <source>big.Float.Scan()</source>
          <target state="translated">big.Float.Scan()</target>
        </trans-unit>
        <trans-unit id="85ceebb1d3f28da594fd7f81e516904bd92356fe" translate="yes" xml:space="preserve">
          <source>big.Float.Set()</source>
          <target state="translated">big.Float.Set()</target>
        </trans-unit>
        <trans-unit id="7cba3c9be7c5088091c8e2adc58abf480677cddc" translate="yes" xml:space="preserve">
          <source>big.Float.SetFloat64()</source>
          <target state="translated">big.Float.SetFloat64()</target>
        </trans-unit>
        <trans-unit id="1fe6ba475c4ec3d52abd10298a4111cf61283589" translate="yes" xml:space="preserve">
          <source>big.Float.SetInf()</source>
          <target state="translated">big.Float.SetInf()</target>
        </trans-unit>
        <trans-unit id="69e7b3b34e4e14ea06efde6987171d1c17f697de" translate="yes" xml:space="preserve">
          <source>big.Float.SetInt()</source>
          <target state="translated">big.Float.SetInt()</target>
        </trans-unit>
        <trans-unit id="177b732c0981cb3dc994d7bd148b16e34e2e8bd4" translate="yes" xml:space="preserve">
          <source>big.Float.SetInt64()</source>
          <target state="translated">big.Float.SetInt64()</target>
        </trans-unit>
        <trans-unit id="a1a67c15eb20029fac796d9dd5c5bfce600caf47" translate="yes" xml:space="preserve">
          <source>big.Float.SetMantExp()</source>
          <target state="translated">big.Float.SetMantExp()</target>
        </trans-unit>
        <trans-unit id="207d4a4abbeeaa698e854bed6443bbc4dc125410" translate="yes" xml:space="preserve">
          <source>big.Float.SetMode()</source>
          <target state="translated">big.Float.SetMode()</target>
        </trans-unit>
        <trans-unit id="d1a793af1849939cfa1c4f3a6b9f6fb82f136071" translate="yes" xml:space="preserve">
          <source>big.Float.SetPrec()</source>
          <target state="translated">big.Float.SetPrec()</target>
        </trans-unit>
        <trans-unit id="9c55c4646a888e7cd2512c52274919d021188fdd" translate="yes" xml:space="preserve">
          <source>big.Float.SetRat()</source>
          <target state="translated">big.Float.SetRat()</target>
        </trans-unit>
        <trans-unit id="2213857b0fc26ad211198edc23ba9355f97c930b" translate="yes" xml:space="preserve">
          <source>big.Float.SetString()</source>
          <target state="translated">big.Float.SetString()</target>
        </trans-unit>
        <trans-unit id="7e588cc90c5d5e7de330c2a7b2f3e60c24af803c" translate="yes" xml:space="preserve">
          <source>big.Float.SetUint64()</source>
          <target state="translated">big.Float.SetUint64()</target>
        </trans-unit>
        <trans-unit id="316b65d57d62bbfc1f9796f7b1dd0c6f86fda85e" translate="yes" xml:space="preserve">
          <source>big.Float.Sign()</source>
          <target state="translated">big.Float.Sign()</target>
        </trans-unit>
        <trans-unit id="3fbbe58fa4653058aca1fa6a7d314dc354958356" translate="yes" xml:space="preserve">
          <source>big.Float.Signbit()</source>
          <target state="translated">big.Float.Signbit()</target>
        </trans-unit>
        <trans-unit id="3455c2b52976baa69e498afab2d8891544a6e07c" translate="yes" xml:space="preserve">
          <source>big.Float.Sqrt()</source>
          <target state="translated">big.Float.Sqrt()</target>
        </trans-unit>
        <trans-unit id="191cdac97a3f91ed1f625cc4e18b80e7cb7ac912" translate="yes" xml:space="preserve">
          <source>big.Float.String()</source>
          <target state="translated">big.Float.String()</target>
        </trans-unit>
        <trans-unit id="d8275b007b28b5b068fb22f325ed248576245986" translate="yes" xml:space="preserve">
          <source>big.Float.Sub()</source>
          <target state="translated">big.Float.Sub()</target>
        </trans-unit>
        <trans-unit id="3bf327f090211c6acc5e74d0fa173f90619f0649" translate="yes" xml:space="preserve">
          <source>big.Float.Text()</source>
          <target state="translated">big.Float.Text()</target>
        </trans-unit>
        <trans-unit id="c0fa9f647a5cba014685ed0de44272acbd3d25f7" translate="yes" xml:space="preserve">
          <source>big.Float.Uint64()</source>
          <target state="translated">big.Float.Uint64()</target>
        </trans-unit>
        <trans-unit id="b8d5ded6a1cc28c7193423dbb1b19efa616dc198" translate="yes" xml:space="preserve">
          <source>big.Float.UnmarshalText()</source>
          <target state="translated">big.Float.UnmarshalText()</target>
        </trans-unit>
        <trans-unit id="c3469745969f00f8d026160668d64fac971abfa4" translate="yes" xml:space="preserve">
          <source>big.Int</source>
          <target state="translated">big.Int</target>
        </trans-unit>
        <trans-unit id="606804e634eb814f042c3ee36b8bfc798df053a7" translate="yes" xml:space="preserve">
          <source>big.Int.Abs()</source>
          <target state="translated">big.Int.Abs()</target>
        </trans-unit>
        <trans-unit id="d25aa0a8904efdd3b238ffbed0d418883433e0f8" translate="yes" xml:space="preserve">
          <source>big.Int.Add()</source>
          <target state="translated">big.Int.Add()</target>
        </trans-unit>
        <trans-unit id="e8897b188dcbc298470e0f8b1bb7873c98ebcf4a" translate="yes" xml:space="preserve">
          <source>big.Int.And()</source>
          <target state="translated">big.Int.And()</target>
        </trans-unit>
        <trans-unit id="18f5ce7972d078642f11dc96f5644e4b32e8e5eb" translate="yes" xml:space="preserve">
          <source>big.Int.AndNot()</source>
          <target state="translated">big.Int.AndNot()</target>
        </trans-unit>
        <trans-unit id="9ae134fde46ebb26b198bb890fd0b14bc206ace2" translate="yes" xml:space="preserve">
          <source>big.Int.Append()</source>
          <target state="translated">big.Int.Append()</target>
        </trans-unit>
        <trans-unit id="10667c3bb5acd397e374d7606acb4190b0e010de" translate="yes" xml:space="preserve">
          <source>big.Int.Binomial()</source>
          <target state="translated">big.Int.Binomial()</target>
        </trans-unit>
        <trans-unit id="c0e92c472cfd7125cad73eeaac3f2d7877806e79" translate="yes" xml:space="preserve">
          <source>big.Int.Bit()</source>
          <target state="translated">big.Int.Bit()</target>
        </trans-unit>
        <trans-unit id="ee2c56d58249f893ac39fee9306c12ab12064a60" translate="yes" xml:space="preserve">
          <source>big.Int.BitLen()</source>
          <target state="translated">big.Int.BitLen()</target>
        </trans-unit>
        <trans-unit id="9364e6cb7201cb54fd9f04dc1df1cb9d98c710c2" translate="yes" xml:space="preserve">
          <source>big.Int.Bits()</source>
          <target state="translated">big.Int.Bits()</target>
        </trans-unit>
        <trans-unit id="8525f786d0c70eb397f6d366bac09cbdf57eeb86" translate="yes" xml:space="preserve">
          <source>big.Int.Bytes()</source>
          <target state="translated">big.Int.Bytes()</target>
        </trans-unit>
        <trans-unit id="a0ad806023f689ccdb32e7046360f96902cb8e68" translate="yes" xml:space="preserve">
          <source>big.Int.Cmp()</source>
          <target state="translated">big.Int.Cmp()</target>
        </trans-unit>
        <trans-unit id="7670a84e66c1686bca9edcabc0425515bd2be5ce" translate="yes" xml:space="preserve">
          <source>big.Int.CmpAbs()</source>
          <target state="translated">big.Int.CmpAbs()</target>
        </trans-unit>
        <trans-unit id="ceb4526286ccccb4e376c5ab9fdd463081ea16e8" translate="yes" xml:space="preserve">
          <source>big.Int.Div()</source>
          <target state="translated">big.Int.Div()</target>
        </trans-unit>
        <trans-unit id="03e17f44df27859e79bf90b865530fb1231bc5f0" translate="yes" xml:space="preserve">
          <source>big.Int.DivMod()</source>
          <target state="translated">big.Int.DivMod()</target>
        </trans-unit>
        <trans-unit id="2dec102959f8b5f9f23966fdadd8567d2c62ef20" translate="yes" xml:space="preserve">
          <source>big.Int.Exp()</source>
          <target state="translated">big.Int.Exp()</target>
        </trans-unit>
        <trans-unit id="407c2d22c4081e710a4c0bd59046bc5116a53b83" translate="yes" xml:space="preserve">
          <source>big.Int.Format()</source>
          <target state="translated">big.Int.Format()</target>
        </trans-unit>
        <trans-unit id="47c34a10f65ef782e77b80c5c1d9d71f1984d761" translate="yes" xml:space="preserve">
          <source>big.Int.GCD()</source>
          <target state="translated">big.Int.GCD()</target>
        </trans-unit>
        <trans-unit id="ae6852678518756b9ddf9f76c73d527c76e8e7be" translate="yes" xml:space="preserve">
          <source>big.Int.GobDecode()</source>
          <target state="translated">big.Int.GobDecode()</target>
        </trans-unit>
        <trans-unit id="d90339a97bace0ab9c22658b7db23fb4fb4c6e8e" translate="yes" xml:space="preserve">
          <source>big.Int.GobEncode()</source>
          <target state="translated">big.Int.GobEncode()</target>
        </trans-unit>
        <trans-unit id="7ee62963c9ce835b028b60ad432957a8d33e9cc9" translate="yes" xml:space="preserve">
          <source>big.Int.Int64()</source>
          <target state="translated">big.Int.Int64()</target>
        </trans-unit>
        <trans-unit id="09fe2644009fd0bca6d8d91e8db688ecd7de2def" translate="yes" xml:space="preserve">
          <source>big.Int.IsInt64()</source>
          <target state="translated">big.Int.IsInt64()</target>
        </trans-unit>
        <trans-unit id="8937233ed98400b4a71a906e3b5833bea133ddc2" translate="yes" xml:space="preserve">
          <source>big.Int.IsUint64()</source>
          <target state="translated">big.Int.IsUint64()</target>
        </trans-unit>
        <trans-unit id="e7a9c7c76e01de75ab568feadd1acd142160ac6e" translate="yes" xml:space="preserve">
          <source>big.Int.Lsh()</source>
          <target state="translated">big.Int.Lsh()</target>
        </trans-unit>
        <trans-unit id="e818d7e76a3499927e3b71e512c0792c44104b7b" translate="yes" xml:space="preserve">
          <source>big.Int.MarshalJSON()</source>
          <target state="translated">big.Int.MarshalJSON()</target>
        </trans-unit>
        <trans-unit id="b2a566b818cdfe9970deb8901e2c8b91decde326" translate="yes" xml:space="preserve">
          <source>big.Int.MarshalText()</source>
          <target state="translated">big.Int.MarshalText()</target>
        </trans-unit>
        <trans-unit id="c72a4b193ddc34a2342a9d8d845fa4b51cc65c94" translate="yes" xml:space="preserve">
          <source>big.Int.Mod()</source>
          <target state="translated">big.Int.Mod()</target>
        </trans-unit>
        <trans-unit id="0ba8c94d4e1d55abd8fb8bfc6afe5da3c84d7b9e" translate="yes" xml:space="preserve">
          <source>big.Int.ModInverse()</source>
          <target state="translated">big.Int.ModInverse()</target>
        </trans-unit>
        <trans-unit id="0ea333f229802a4b10e50332438cf510793d0818" translate="yes" xml:space="preserve">
          <source>big.Int.ModSqrt()</source>
          <target state="translated">big.Int.ModSqrt()</target>
        </trans-unit>
        <trans-unit id="936ece4bbd03a2def15f07400d8fdbf3f36c238f" translate="yes" xml:space="preserve">
          <source>big.Int.Mul()</source>
          <target state="translated">big.Int.Mul()</target>
        </trans-unit>
        <trans-unit id="90051d142c59ca9f2f010f984620162883d46623" translate="yes" xml:space="preserve">
          <source>big.Int.MulRange()</source>
          <target state="translated">big.Int.MulRange()</target>
        </trans-unit>
        <trans-unit id="300d7a8bf5ce5eacf4b2a5e479520caa7a989639" translate="yes" xml:space="preserve">
          <source>big.Int.Neg()</source>
          <target state="translated">big.Int.Neg()</target>
        </trans-unit>
        <trans-unit id="57b7e97049b0cf15b553a089fa849cb0c42a8be1" translate="yes" xml:space="preserve">
          <source>big.Int.Not()</source>
          <target state="translated">big.Int.Not()</target>
        </trans-unit>
        <trans-unit id="32ceb90f8039642eaa1557207e0b36f23adea607" translate="yes" xml:space="preserve">
          <source>big.Int.Or()</source>
          <target state="translated">big.Int.Or()</target>
        </trans-unit>
        <trans-unit id="edc7c9a50e909fead486a90120fd75632b61dd7d" translate="yes" xml:space="preserve">
          <source>big.Int.ProbablyPrime()</source>
          <target state="translated">big.Int.ProbablyPrime()</target>
        </trans-unit>
        <trans-unit id="5c4e6638f1a72e8ec735bd8408247f6c055b9f0e" translate="yes" xml:space="preserve">
          <source>big.Int.Quo()</source>
          <target state="translated">big.Int.Quo()</target>
        </trans-unit>
        <trans-unit id="ac9580bef49f69f9c9b579a35ce59fa8a004f9bb" translate="yes" xml:space="preserve">
          <source>big.Int.QuoRem()</source>
          <target state="translated">big.Int.QuoRem()</target>
        </trans-unit>
        <trans-unit id="952ebd81ceb452b379eb755b1ec6c51a33c82a1f" translate="yes" xml:space="preserve">
          <source>big.Int.Rand()</source>
          <target state="translated">big.Int.Rand()</target>
        </trans-unit>
        <trans-unit id="85baa47fd60ddaade3fdc47f5dc1537a3cb430a5" translate="yes" xml:space="preserve">
          <source>big.Int.Rem()</source>
          <target state="translated">big.Int.Rem()</target>
        </trans-unit>
        <trans-unit id="be0765c5e7701910f725d5833599f963827811ec" translate="yes" xml:space="preserve">
          <source>big.Int.Rsh()</source>
          <target state="translated">big.Int.Rsh()</target>
        </trans-unit>
        <trans-unit id="c00c8ea559091011af44873454480dc464291280" translate="yes" xml:space="preserve">
          <source>big.Int.Scan()</source>
          <target state="translated">big.Int.Scan()</target>
        </trans-unit>
        <trans-unit id="57572ac258267c4fefd4a4df410d267e5f27a373" translate="yes" xml:space="preserve">
          <source>big.Int.Set()</source>
          <target state="translated">big.Int.Set()</target>
        </trans-unit>
        <trans-unit id="6ab1aa3a7ca8fb3a40554b98780e660cfaa6e621" translate="yes" xml:space="preserve">
          <source>big.Int.SetBit()</source>
          <target state="translated">big.Int.SetBit()</target>
        </trans-unit>
        <trans-unit id="4c5ee1700c0a1c2776d61073d9f81b8b318c2761" translate="yes" xml:space="preserve">
          <source>big.Int.SetBits()</source>
          <target state="translated">big.Int.SetBits()</target>
        </trans-unit>
        <trans-unit id="a9ed568fcc0e4453cf1fb3d6cef5ce9330b326e5" translate="yes" xml:space="preserve">
          <source>big.Int.SetBytes()</source>
          <target state="translated">big.Int.SetBytes()</target>
        </trans-unit>
        <trans-unit id="8d0187aa2a7e6b875b739b2b537c1e6253fab231" translate="yes" xml:space="preserve">
          <source>big.Int.SetInt64()</source>
          <target state="translated">big.Int.SetInt64()</target>
        </trans-unit>
        <trans-unit id="649f48ed487124a8f4a0cbb3056c9a8a8ed73042" translate="yes" xml:space="preserve">
          <source>big.Int.SetString()</source>
          <target state="translated">big.Int.SetString()</target>
        </trans-unit>
        <trans-unit id="8b400d1ca37c7a217c3accc5ce510f3207220c64" translate="yes" xml:space="preserve">
          <source>big.Int.SetUint64()</source>
          <target state="translated">big.Int.SetUint64()</target>
        </trans-unit>
        <trans-unit id="625af90eb0aaddd5b44f7751321406fedb926a92" translate="yes" xml:space="preserve">
          <source>big.Int.Sign()</source>
          <target state="translated">big.Int.Sign()</target>
        </trans-unit>
        <trans-unit id="b0eabc678667fede7836d6559aa6ae6e73c2c0f2" translate="yes" xml:space="preserve">
          <source>big.Int.Sqrt()</source>
          <target state="translated">big.Int.Sqrt()</target>
        </trans-unit>
        <trans-unit id="b97f81274e254ef45c8044b69e7d92d4ed9fe405" translate="yes" xml:space="preserve">
          <source>big.Int.String()</source>
          <target state="translated">big.Int.String()</target>
        </trans-unit>
        <trans-unit id="048e2b981e09244d37ef0e6ab638e18f59fa45b8" translate="yes" xml:space="preserve">
          <source>big.Int.Sub()</source>
          <target state="translated">big.Int.Sub()</target>
        </trans-unit>
        <trans-unit id="fc9771ad15ecf7ad4c0c1931fc0fed2447a12f7a" translate="yes" xml:space="preserve">
          <source>big.Int.Text()</source>
          <target state="translated">big.Int.Text()</target>
        </trans-unit>
        <trans-unit id="22ead75a2768e7d0857b0248013b6a65e6647bf1" translate="yes" xml:space="preserve">
          <source>big.Int.TrailingZeroBits()</source>
          <target state="translated">big.Int.TrailingZeroBits()</target>
        </trans-unit>
        <trans-unit id="bc65406b653893c6882da537944efcc638c94e6f" translate="yes" xml:space="preserve">
          <source>big.Int.Uint64()</source>
          <target state="translated">big.Int.Uint64()</target>
        </trans-unit>
        <trans-unit id="0c49370fe46fb3a21d4276dd3c5d64aa4279916a" translate="yes" xml:space="preserve">
          <source>big.Int.UnmarshalJSON()</source>
          <target state="translated">big.Int.UnmarshalJSON()</target>
        </trans-unit>
        <trans-unit id="869a43bd638823fc51f0d45d81e9c75c473661c7" translate="yes" xml:space="preserve">
          <source>big.Int.UnmarshalText()</source>
          <target state="translated">big.Int.UnmarshalText()</target>
        </trans-unit>
        <trans-unit id="6a08d63e7bf0f1d0c460b67f3de2de42f8e34a26" translate="yes" xml:space="preserve">
          <source>big.Int.Xor()</source>
          <target state="translated">big.Int.Xor()</target>
        </trans-unit>
        <trans-unit id="2e1fe3bed00dc8fe0ebf95067c3d418abf26244b" translate="yes" xml:space="preserve">
          <source>big.Jacobi()</source>
          <target state="translated">big.Jacobi()</target>
        </trans-unit>
        <trans-unit id="e32bd50f9b8dce914a7e0037159d2faff9bbe35c" translate="yes" xml:space="preserve">
          <source>big.NewFloat()</source>
          <target state="translated">big.NewFloat()</target>
        </trans-unit>
        <trans-unit id="f8aead824e47faf3f22da11bcf9ecfe658c35d72" translate="yes" xml:space="preserve">
          <source>big.NewInt()</source>
          <target state="translated">big.NewInt()</target>
        </trans-unit>
        <trans-unit id="d697a8fade0a6977b7cdc5a3dfe0064d23f96542" translate="yes" xml:space="preserve">
          <source>big.NewRat()</source>
          <target state="translated">big.NewRat()</target>
        </trans-unit>
        <trans-unit id="463662523879595daec4821bc9c3fd9d616f01ad" translate="yes" xml:space="preserve">
          <source>big.ParseFloat()</source>
          <target state="translated">big.ParseFloat()</target>
        </trans-unit>
        <trans-unit id="52b0ba8946c0ea9c934ea4ab1032249ec60d3fb0" translate="yes" xml:space="preserve">
          <source>big.Rat</source>
          <target state="translated">big.Rat</target>
        </trans-unit>
        <trans-unit id="386b3ffbcb42eb363186fb803721adc55794ad13" translate="yes" xml:space="preserve">
          <source>big.Rat.Abs()</source>
          <target state="translated">big.Rat.Abs()</target>
        </trans-unit>
        <trans-unit id="4ed2a0b3aa2b40a8c1253db4d5fd26db8f166828" translate="yes" xml:space="preserve">
          <source>big.Rat.Add()</source>
          <target state="translated">big.Rat.Add()</target>
        </trans-unit>
        <trans-unit id="5a4c13776e4bac0b0f7ed738a6e597b4d8c3d729" translate="yes" xml:space="preserve">
          <source>big.Rat.Cmp()</source>
          <target state="translated">big.Rat.Cmp()</target>
        </trans-unit>
        <trans-unit id="3aed3969c2a002b645e04b63299588898d2d38c7" translate="yes" xml:space="preserve">
          <source>big.Rat.Denom()</source>
          <target state="translated">big.Rat.Denom()</target>
        </trans-unit>
        <trans-unit id="177a47cbbe4cc5d09f7d2eb810f0c00fe89d0106" translate="yes" xml:space="preserve">
          <source>big.Rat.Float32()</source>
          <target state="translated">big.Rat.Float32()</target>
        </trans-unit>
        <trans-unit id="8e15a34f78d739607015bbb497777312c5c183d2" translate="yes" xml:space="preserve">
          <source>big.Rat.Float64()</source>
          <target state="translated">big.Rat.Float64()</target>
        </trans-unit>
        <trans-unit id="d1180cea155791ae9a4402e943b94ea752d0e734" translate="yes" xml:space="preserve">
          <source>big.Rat.FloatString()</source>
          <target state="translated">big.Rat.FloatString()</target>
        </trans-unit>
        <trans-unit id="a33d5cf1ad57614fa9773a508ddb7edc7297fbe4" translate="yes" xml:space="preserve">
          <source>big.Rat.GobDecode()</source>
          <target state="translated">big.Rat.GobDecode()</target>
        </trans-unit>
        <trans-unit id="b3da2d532d4beced5631e916a5b55de2a6aadd74" translate="yes" xml:space="preserve">
          <source>big.Rat.GobEncode()</source>
          <target state="translated">big.Rat.GobEncode()</target>
        </trans-unit>
        <trans-unit id="75e3d2c74d873c1ab25507bf1bf1ad2a774413c4" translate="yes" xml:space="preserve">
          <source>big.Rat.Inv()</source>
          <target state="translated">big.Rat.Inv()</target>
        </trans-unit>
        <trans-unit id="61a196b0dc2f361263aa5cc41c01f68493d33cdc" translate="yes" xml:space="preserve">
          <source>big.Rat.IsInt()</source>
          <target state="translated">big.Rat.IsInt()</target>
        </trans-unit>
        <trans-unit id="20917ecbe002b84f192dca77c9a6da1c1c10671d" translate="yes" xml:space="preserve">
          <source>big.Rat.MarshalText()</source>
          <target state="translated">big.Rat.MarshalText()</target>
        </trans-unit>
        <trans-unit id="8c50b41ee175d9a120dfc10cc31131a554de613e" translate="yes" xml:space="preserve">
          <source>big.Rat.Mul()</source>
          <target state="translated">big.Rat.Mul()</target>
        </trans-unit>
        <trans-unit id="4cfd93421fad051741c8ed2000d260c8150f3edb" translate="yes" xml:space="preserve">
          <source>big.Rat.Neg()</source>
          <target state="translated">big.Rat.Neg()</target>
        </trans-unit>
        <trans-unit id="7febec626e0e9cc69d6617184085a43c3b6f1ec1" translate="yes" xml:space="preserve">
          <source>big.Rat.Num()</source>
          <target state="translated">big.Rat.Num()</target>
        </trans-unit>
        <trans-unit id="db81d70f1a924f5f4d2ea36b4d0c97a62a2bf511" translate="yes" xml:space="preserve">
          <source>big.Rat.Quo()</source>
          <target state="translated">big.Rat.Quo()</target>
        </trans-unit>
        <trans-unit id="1e91f9d75969211339fe75edc64c96ada0ec4a60" translate="yes" xml:space="preserve">
          <source>big.Rat.RatString()</source>
          <target state="translated">big.Rat.RatString()</target>
        </trans-unit>
        <trans-unit id="8ed777f3f3c535b98c850aa18e9408e635b0a872" translate="yes" xml:space="preserve">
          <source>big.Rat.Scan()</source>
          <target state="translated">big.Rat.Scan()</target>
        </trans-unit>
        <trans-unit id="2d6bc9b5fed2baeec96ce24cc39a54dd2940eef5" translate="yes" xml:space="preserve">
          <source>big.Rat.Set()</source>
          <target state="translated">big.Rat.Set()</target>
        </trans-unit>
        <trans-unit id="e38e7512980ca994e4721cdef1d2d1768aad2d09" translate="yes" xml:space="preserve">
          <source>big.Rat.SetFloat64()</source>
          <target state="translated">big.Rat.SetFloat64()</target>
        </trans-unit>
        <trans-unit id="15afa169780021edb905afbcab5c0d0273cb2968" translate="yes" xml:space="preserve">
          <source>big.Rat.SetFrac()</source>
          <target state="translated">big.Rat.SetFrac()</target>
        </trans-unit>
        <trans-unit id="270c30a69a81300d22e5aef66e1b54eaf452b4e7" translate="yes" xml:space="preserve">
          <source>big.Rat.SetFrac64()</source>
          <target state="translated">big.Rat.SetFrac64()</target>
        </trans-unit>
        <trans-unit id="0550fda75a82659f978b84670f7c1738c669ad5c" translate="yes" xml:space="preserve">
          <source>big.Rat.SetInt()</source>
          <target state="translated">big.Rat.SetInt()</target>
        </trans-unit>
        <trans-unit id="ff51af6d74ae80f4d39cf4fd4e1329b78dd15314" translate="yes" xml:space="preserve">
          <source>big.Rat.SetInt64()</source>
          <target state="translated">big.Rat.SetInt64()</target>
        </trans-unit>
        <trans-unit id="a0e2f5bd74fe0d260bcbe63e778bdffdba84a2d2" translate="yes" xml:space="preserve">
          <source>big.Rat.SetString()</source>
          <target state="translated">big.Rat.SetString()</target>
        </trans-unit>
        <trans-unit id="76570fc3794bfbd8d477b42fae07a0982cec5bb2" translate="yes" xml:space="preserve">
          <source>big.Rat.SetUint64()</source>
          <target state="translated">big.Rat.SetUint64()</target>
        </trans-unit>
        <trans-unit id="77f8c117676f87b9a2763a8061f1c21914448585" translate="yes" xml:space="preserve">
          <source>big.Rat.Sign()</source>
          <target state="translated">big.Rat.Sign()</target>
        </trans-unit>
        <trans-unit id="2d736e50575896b850ebe631138ab25cbaad438d" translate="yes" xml:space="preserve">
          <source>big.Rat.String()</source>
          <target state="translated">big.Rat.String()</target>
        </trans-unit>
        <trans-unit id="d645eefe57ad5ac499d8e0ea63839fbb8322f232" translate="yes" xml:space="preserve">
          <source>big.Rat.Sub()</source>
          <target state="translated">big.Rat.Sub()</target>
        </trans-unit>
        <trans-unit id="dda37a20bbfa8f3205f9233e4dc4593ad2da6927" translate="yes" xml:space="preserve">
          <source>big.Rat.UnmarshalText()</source>
          <target state="translated">big.Rat.UnmarshalText()</target>
        </trans-unit>
        <trans-unit id="38b998958018212dd4a8fbcc29b568f7b13897d6" translate="yes" xml:space="preserve">
          <source>big.RoundingMode</source>
          <target state="translated">big.RoundingMode</target>
        </trans-unit>
        <trans-unit id="bbd2cc84e57828d691348f8bf61d09a0041209d0" translate="yes" xml:space="preserve">
          <source>big.RoundingMode.String()</source>
          <target state="translated">big.RoundingMode.String()</target>
        </trans-unit>
        <trans-unit id="80d51545a8b15673b35b473486769be27d9aa100" translate="yes" xml:space="preserve">
          <source>big.Word</source>
          <target state="translated">big.Word</target>
        </trans-unit>
        <trans-unit id="7e57cfe843145135aee1f4d0d63ceb7842093712" translate="yes" xml:space="preserve">
          <source>binary</source>
          <target state="translated">binary</target>
        </trans-unit>
        <trans-unit id="242d0d927215965d6553987f043f62f73643d253" translate="yes" xml:space="preserve">
          <source>binary.ByteOrder</source>
          <target state="translated">binary.ByteOrder</target>
        </trans-unit>
        <trans-unit id="bf49208d605da54e57eaa25e6497cab7ff5aa40a" translate="yes" xml:space="preserve">
          <source>binary.PutUvarint()</source>
          <target state="translated">binary.PutUvarint()</target>
        </trans-unit>
        <trans-unit id="ae79c148351b91a84fce5deb0f2320bf93baad17" translate="yes" xml:space="preserve">
          <source>binary.PutVarint()</source>
          <target state="translated">binary.PutVarint()</target>
        </trans-unit>
        <trans-unit id="c44b92f7e8550abc097edd54fddfdffc0845f796" translate="yes" xml:space="preserve">
          <source>binary.Read()</source>
          <target state="translated">binary.Read()</target>
        </trans-unit>
        <trans-unit id="20eaa3fe120c3f9acc5bb8a33f9571ce99464a9b" translate="yes" xml:space="preserve">
          <source>binary.ReadUvarint()</source>
          <target state="translated">binary.ReadUvarint()</target>
        </trans-unit>
        <trans-unit id="2fb8530e4332882f93fb515d283509c3f84833ff" translate="yes" xml:space="preserve">
          <source>binary.ReadVarint()</source>
          <target state="translated">binary.ReadVarint()</target>
        </trans-unit>
        <trans-unit id="ff02c5eb58d6a5280bb6acd94b06eb7c7be1a8cb" translate="yes" xml:space="preserve">
          <source>binary.Size()</source>
          <target state="translated">binary.Size()</target>
        </trans-unit>
        <trans-unit id="8dfbdab7dd65d1145c9d325df5a82a411501d05b" translate="yes" xml:space="preserve">
          <source>binary.Uvarint()</source>
          <target state="translated">binary.Uvarint()</target>
        </trans-unit>
        <trans-unit id="bad200d0b5e995489331c41a0dbc18d25f1042e8" translate="yes" xml:space="preserve">
          <source>binary.Varint()</source>
          <target state="translated">binary.Varint()</target>
        </trans-unit>
        <trans-unit id="73f1fd71aeb5eaec3a76d86e95b57a8991cbac06" translate="yes" xml:space="preserve">
          <source>binary.Write()</source>
          <target state="translated">binary.Write()</target>
        </trans-unit>
        <trans-unit id="0569ae912e387dbc988dee842bf17cdd4e437f63" translate="yes" xml:space="preserve">
          <source>bits</source>
          <target state="translated">bits</target>
        </trans-unit>
        <trans-unit id="f6819fac604223282e5fcdadfe66289d738e3f06" translate="yes" xml:space="preserve">
          <source>bits.Add()</source>
          <target state="translated">bits.Add()</target>
        </trans-unit>
        <trans-unit id="1841d8b76cec501a70b84db1da07fe0e72a268ec" translate="yes" xml:space="preserve">
          <source>bits.Add32()</source>
          <target state="translated">bits.Add32()</target>
        </trans-unit>
        <trans-unit id="bb9af74595a15890dc69fc70b46fdf9a48aff132" translate="yes" xml:space="preserve">
          <source>bits.Add64()</source>
          <target state="translated">bits.Add64()</target>
        </trans-unit>
        <trans-unit id="d6ca24d505733032a508612632b6273b4f46efa0" translate="yes" xml:space="preserve">
          <source>bits.Div()</source>
          <target state="translated">bits.Div()</target>
        </trans-unit>
        <trans-unit id="55146479ac957d3fa2a182be1b5f454e246cae8f" translate="yes" xml:space="preserve">
          <source>bits.Div32()</source>
          <target state="translated">bits.Div32()</target>
        </trans-unit>
        <trans-unit id="c7b0e2a6d0ffd1dd9389c18fb7405ac362f14940" translate="yes" xml:space="preserve">
          <source>bits.Div64()</source>
          <target state="translated">bits.Div64()</target>
        </trans-unit>
        <trans-unit id="366849aad1abc41b4b46e853f027837b4ed29090" translate="yes" xml:space="preserve">
          <source>bits.LeadingZeros()</source>
          <target state="translated">bits.LeadingZeros()</target>
        </trans-unit>
        <trans-unit id="476510df2a1a8860b92142e2222339bae9bcc785" translate="yes" xml:space="preserve">
          <source>bits.LeadingZeros16()</source>
          <target state="translated">bits.LeadingZeros16()</target>
        </trans-unit>
        <trans-unit id="9756e5403cef15c1e39efac0e3d2365af14a14e2" translate="yes" xml:space="preserve">
          <source>bits.LeadingZeros32()</source>
          <target state="translated">bits.LeadingZeros32()</target>
        </trans-unit>
        <trans-unit id="a64a2dce6dc7707f96992100e9cf4b257604a4c1" translate="yes" xml:space="preserve">
          <source>bits.LeadingZeros64()</source>
          <target state="translated">bits.LeadingZeros64()</target>
        </trans-unit>
        <trans-unit id="ab2bfe9f684aaf77f439d53767215f9a5e3b0db0" translate="yes" xml:space="preserve">
          <source>bits.LeadingZeros8()</source>
          <target state="translated">bits.LeadingZeros8()</target>
        </trans-unit>
        <trans-unit id="0581deaaed82b7525e052564ce335d6e48d4dbae" translate="yes" xml:space="preserve">
          <source>bits.Len()</source>
          <target state="translated">bits.Len()</target>
        </trans-unit>
        <trans-unit id="300924961a551039853613eed2706ae2b0ebe799" translate="yes" xml:space="preserve">
          <source>bits.Len16()</source>
          <target state="translated">bits.Len16()</target>
        </trans-unit>
        <trans-unit id="cace19a7983539cd07d8fac9bb2cef6c69f60020" translate="yes" xml:space="preserve">
          <source>bits.Len32()</source>
          <target state="translated">bits.Len32()</target>
        </trans-unit>
        <trans-unit id="80bc50f058317a25097bb338cc08bfac3c91912e" translate="yes" xml:space="preserve">
          <source>bits.Len64()</source>
          <target state="translated">bits.Len64()</target>
        </trans-unit>
        <trans-unit id="29e38cb564f56dcfeaa1f3c01de5857fd42245bc" translate="yes" xml:space="preserve">
          <source>bits.Len8()</source>
          <target state="translated">bits.Len8()</target>
        </trans-unit>
        <trans-unit id="0216a0bac69a337a24463e6e6d3670197a659958" translate="yes" xml:space="preserve">
          <source>bits.Mul()</source>
          <target state="translated">bits.Mul()</target>
        </trans-unit>
        <trans-unit id="53a6918b75e8af2feb21943f1eca93ee97e6086f" translate="yes" xml:space="preserve">
          <source>bits.Mul32()</source>
          <target state="translated">bits.Mul32()</target>
        </trans-unit>
        <trans-unit id="e1d89cb0527261f1cfd7f42c89e95f7773817dd6" translate="yes" xml:space="preserve">
          <source>bits.Mul64()</source>
          <target state="translated">bits.Mul64()</target>
        </trans-unit>
        <trans-unit id="c1445ef9ed0cf95e58c1f28b3a618b5e73cf2372" translate="yes" xml:space="preserve">
          <source>bits.OnesCount()</source>
          <target state="translated">bits.OnesCount()</target>
        </trans-unit>
        <trans-unit id="3804ba8a0619f5f3861a325f7f6bbbcabab7114c" translate="yes" xml:space="preserve">
          <source>bits.OnesCount16()</source>
          <target state="translated">bits.OnesCount16()</target>
        </trans-unit>
        <trans-unit id="c9b54d90f689ffdd3b5538b6625c17848abebcf0" translate="yes" xml:space="preserve">
          <source>bits.OnesCount32()</source>
          <target state="translated">bits.OnesCount32()</target>
        </trans-unit>
        <trans-unit id="decfdc84989928cef4f12d0d248b3327db958405" translate="yes" xml:space="preserve">
          <source>bits.OnesCount64()</source>
          <target state="translated">bits.OnesCount64()</target>
        </trans-unit>
        <trans-unit id="ac2d33d1d28da2bf6f58e972fd7a98370f87eaaf" translate="yes" xml:space="preserve">
          <source>bits.OnesCount8()</source>
          <target state="translated">bits.OnesCount8()</target>
        </trans-unit>
        <trans-unit id="a09d702d9bc800f2b497552a601821c8522f55f3" translate="yes" xml:space="preserve">
          <source>bits.Reverse()</source>
          <target state="translated">bits.Reverse()</target>
        </trans-unit>
        <trans-unit id="1d31ad5273e772137bdf0a76901ae22113d4f310" translate="yes" xml:space="preserve">
          <source>bits.Reverse16()</source>
          <target state="translated">bits.Reverse16()</target>
        </trans-unit>
        <trans-unit id="92db02c179d6beb71c478ad7fe4d220b0c1b4ad1" translate="yes" xml:space="preserve">
          <source>bits.Reverse32()</source>
          <target state="translated">bits.Reverse32()</target>
        </trans-unit>
        <trans-unit id="3254f7a71b4b52f13e7edbf0bcb0bf378e75b018" translate="yes" xml:space="preserve">
          <source>bits.Reverse64()</source>
          <target state="translated">bits.Reverse64()</target>
        </trans-unit>
        <trans-unit id="af8886633b8b0f483c0e08ce5138b70e459d53b0" translate="yes" xml:space="preserve">
          <source>bits.Reverse8()</source>
          <target state="translated">bits.Reverse8()</target>
        </trans-unit>
        <trans-unit id="e504017a4c147b0eb6cb257a4301f3a435c6ea6e" translate="yes" xml:space="preserve">
          <source>bits.ReverseBytes()</source>
          <target state="translated">bits.ReverseBytes()</target>
        </trans-unit>
        <trans-unit id="3bf613320e667a095d8dc71edd5a7e717b3eb50d" translate="yes" xml:space="preserve">
          <source>bits.ReverseBytes16()</source>
          <target state="translated">bits.ReverseBytes16()</target>
        </trans-unit>
        <trans-unit id="c946590a4f5f68dc0d59e1a3e2c097abf8a759c2" translate="yes" xml:space="preserve">
          <source>bits.ReverseBytes32()</source>
          <target state="translated">bits.ReverseBytes32()</target>
        </trans-unit>
        <trans-unit id="69540a7edc52a40c1db083a29e7f42f1c0887292" translate="yes" xml:space="preserve">
          <source>bits.ReverseBytes64()</source>
          <target state="translated">bits.ReverseBytes64()</target>
        </trans-unit>
        <trans-unit id="23023bdd8ed9b5b6f78e35fc01554043667268d9" translate="yes" xml:space="preserve">
          <source>bits.RotateLeft()</source>
          <target state="translated">bits.RotateLeft()</target>
        </trans-unit>
        <trans-unit id="a58584e1b0be15bec20b112b7848a967b0a6bed7" translate="yes" xml:space="preserve">
          <source>bits.RotateLeft16()</source>
          <target state="translated">bits.RotateLeft16()</target>
        </trans-unit>
        <trans-unit id="f6c116fa580e22e6ee46108c778241de8127cf51" translate="yes" xml:space="preserve">
          <source>bits.RotateLeft32()</source>
          <target state="translated">bits.RotateLeft32()</target>
        </trans-unit>
        <trans-unit id="4008f73868c9db298dc3346fa50993ab49a0c9f7" translate="yes" xml:space="preserve">
          <source>bits.RotateLeft64()</source>
          <target state="translated">bits.RotateLeft64()</target>
        </trans-unit>
        <trans-unit id="e9e9dd44e9bb4b40d2dde996f4e78f7a48f13bc4" translate="yes" xml:space="preserve">
          <source>bits.RotateLeft8()</source>
          <target state="translated">bits.RotateLeft8()</target>
        </trans-unit>
        <trans-unit id="6f2c73905478827944e6e8e627b25c05dabf6b07" translate="yes" xml:space="preserve">
          <source>bits.Sub()</source>
          <target state="translated">bits.Sub()</target>
        </trans-unit>
        <trans-unit id="a015df0951284696cc30c67202c6929b94aa4acd" translate="yes" xml:space="preserve">
          <source>bits.Sub32()</source>
          <target state="translated">bits.Sub32()</target>
        </trans-unit>
        <trans-unit id="422c08ad3a0d571383652e1aa3697ef59ba00837" translate="yes" xml:space="preserve">
          <source>bits.Sub64()</source>
          <target state="translated">bits.Sub64()</target>
        </trans-unit>
        <trans-unit id="d32e47f589344b7bf74eccf5ba542f4c30ab5252" translate="yes" xml:space="preserve">
          <source>bits.TrailingZeros()</source>
          <target state="translated">bits.TrailingZeros()</target>
        </trans-unit>
        <trans-unit id="797a8a28a9b32ae7d923598423fd97426a31449d" translate="yes" xml:space="preserve">
          <source>bits.TrailingZeros16()</source>
          <target state="translated">bits.TrailingZeros16()</target>
        </trans-unit>
        <trans-unit id="bb49a84cb7cc0c412674d611f557d7e9655d1a0f" translate="yes" xml:space="preserve">
          <source>bits.TrailingZeros32()</source>
          <target state="translated">bits.TrailingZeros32()</target>
        </trans-unit>
        <trans-unit id="66aa464167f4ca85e749751bb430a232f0f62f7f" translate="yes" xml:space="preserve">
          <source>bits.TrailingZeros64()</source>
          <target state="translated">bits.TrailingZeros64()</target>
        </trans-unit>
        <trans-unit id="7d4fb5e08fb8bcc0da4c0dcb3cb8b6f855e8c5c8" translate="yes" xml:space="preserve">
          <source>bits.TrailingZeros8()</source>
          <target state="translated">bits.TrailingZeros8()</target>
        </trans-unit>
        <trans-unit id="aa7b0ff4129ae462cc7ebb3c77fe79acf270ffed" translate="yes" xml:space="preserve">
          <source>bool is the set of boolean values, true and false.</source>
          <target state="translated">bool은 부울 값 세트이며 true 및 false입니다.</target>
        </trans-unit>
        <trans-unit id="623ea9e888859072930f4649ea340b2e1e6b6d6e" translate="yes" xml:space="preserve">
          <source>bufio</source>
          <target state="translated">bufio</target>
        </trans-unit>
        <trans-unit id="80754af91bfb6d1073585b046fe0a474ce868509" translate="yes" xml:space="preserve">
          <source>build</source>
          <target state="translated">build</target>
        </trans-unit>
        <trans-unit id="cbbb7834161967f8e57d9102e7dc1aef0917ad13" translate="yes" xml:space="preserve">
          <source>build.ArchChar()</source>
          <target state="translated">build.ArchChar()</target>
        </trans-unit>
        <trans-unit id="4cf92c2f3b3b09c5e2a7ee27925e7edae0aeaf79" translate="yes" xml:space="preserve">
          <source>build.Context</source>
          <target state="translated">build.Context</target>
        </trans-unit>
        <trans-unit id="8a0fd4339fbb4f5e7cf392c456ba68e4fc660e6e" translate="yes" xml:space="preserve">
          <source>build.Context.Import()</source>
          <target state="translated">build.Context.Import()</target>
        </trans-unit>
        <trans-unit id="94f54cef45f68ceffb1af36236b7d579e8db3395" translate="yes" xml:space="preserve">
          <source>build.Context.ImportDir()</source>
          <target state="translated">build.Context.ImportDir()</target>
        </trans-unit>
        <trans-unit id="84a3b738a9e6f3303d6dabe4ba0dedfb34007061" translate="yes" xml:space="preserve">
          <source>build.Context.MatchFile()</source>
          <target state="translated">build.Context.MatchFile()</target>
        </trans-unit>
        <trans-unit id="c3ffa50a7c82f81fa93661b8e1e3317613ec253f" translate="yes" xml:space="preserve">
          <source>build.Context.SrcDirs()</source>
          <target state="translated">build.Context.SrcDirs()</target>
        </trans-unit>
        <trans-unit id="d7c162adf7858fd310729750d71c660f1dd93b14" translate="yes" xml:space="preserve">
          <source>build.Import()</source>
          <target state="translated">build.Import()</target>
        </trans-unit>
        <trans-unit id="88779437896f188ceadb600dd1c34854bfad3246" translate="yes" xml:space="preserve">
          <source>build.ImportDir()</source>
          <target state="translated">build.ImportDir()</target>
        </trans-unit>
        <trans-unit id="d21f1eb1e666aa609c2f58db5ecde82eb7edfa69" translate="yes" xml:space="preserve">
          <source>build.ImportMode</source>
          <target state="translated">build.ImportMode</target>
        </trans-unit>
        <trans-unit id="640304a44258c19583b7256a810075ac767fff34" translate="yes" xml:space="preserve">
          <source>build.IsLocalImport()</source>
          <target state="translated">build.IsLocalImport()</target>
        </trans-unit>
        <trans-unit id="2b47d3cc9fffef5f88ac89e02f4037694e966acc" translate="yes" xml:space="preserve">
          <source>build.MultiplePackageError</source>
          <target state="translated">build.MultiplePackageError</target>
        </trans-unit>
        <trans-unit id="1efc33c63caa4e37bdc3b94fdb1ece849f03c0a9" translate="yes" xml:space="preserve">
          <source>build.MultiplePackageError.Error()</source>
          <target state="translated">build.MultiplePackageError.Error()</target>
        </trans-unit>
        <trans-unit id="7ba53833bcee64bd02ad8ca6360349a01cd11a17" translate="yes" xml:space="preserve">
          <source>build.NoGoError</source>
          <target state="translated">build.NoGoError</target>
        </trans-unit>
        <trans-unit id="9a039dc68a77535c961b6daf65e380dd7aff7f1f" translate="yes" xml:space="preserve">
          <source>build.NoGoError.Error()</source>
          <target state="translated">build.NoGoError.Error()</target>
        </trans-unit>
        <trans-unit id="3314bde7cf459f0befed9da78c93e506e4f28adf" translate="yes" xml:space="preserve">
          <source>build.Package</source>
          <target state="translated">build.Package</target>
        </trans-unit>
        <trans-unit id="15e60ab6a6a05e5442916e1a406832a78c363d0d" translate="yes" xml:space="preserve">
          <source>build.Package.IsCommand()</source>
          <target state="translated">build.Package.IsCommand()</target>
        </trans-unit>
        <trans-unit id="748a336cc88c03ccb07ed5f5073d18624731b8b5" translate="yes" xml:space="preserve">
          <source>builtin</source>
          <target state="translated">builtin</target>
        </trans-unit>
        <trans-unit id="f994b149493edf2b0ac503c1438cd755ab2c552c" translate="yes" xml:space="preserve">
          <source>builtin.Type</source>
          <target state="translated">builtin.Type</target>
        </trans-unit>
        <trans-unit id="c2d80b8d2d44c4de18756d516e6eaa6cc2a3d8a0" translate="yes" xml:space="preserve">
          <source>builtin.bool</source>
          <target state="translated">builtin.bool</target>
        </trans-unit>
        <trans-unit id="6048794df5e49cc2480975819e169023f1f67e89" translate="yes" xml:space="preserve">
          <source>builtin.byte</source>
          <target state="translated">builtin.byte</target>
        </trans-unit>
        <trans-unit id="d7e5f74f0beaf9c2c44656baa5784c064ce68022" translate="yes" xml:space="preserve">
          <source>builtin.go</source>
          <target state="translated">builtin.go</target>
        </trans-unit>
        <trans-unit id="236946d655a0088e6b659371deb1ba062dcc96e9" translate="yes" xml:space="preserve">
          <source>builtin.int</source>
          <target state="translated">builtin.int</target>
        </trans-unit>
        <trans-unit id="6c3f310439dc2fdbe3fb76dda9af2ae95aa0c59d" translate="yes" xml:space="preserve">
          <source>builtin.int8</source>
          <target state="translated">builtin.int8</target>
        </trans-unit>
        <trans-unit id="c5b9a6ebf69973d7a7484087f1f3704f641e167c" translate="yes" xml:space="preserve">
          <source>builtin.rune</source>
          <target state="translated">builtin.rune</target>
        </trans-unit>
        <trans-unit id="bb0e390b73d09bf07a9c4148317649d4050799a6" translate="yes" xml:space="preserve">
          <source>builtin.uint</source>
          <target state="translated">builtin.uint</target>
        </trans-unit>
        <trans-unit id="586e5b49a34c64bb7c74e8c6403dbbb7a18e56fe" translate="yes" xml:space="preserve">
          <source>but the contextual autoescaping in html/template</source>
          <target state="translated">그러나 HTML / 템플릿의 문맥 자동 이스케이프</target>
        </trans-unit>
        <trans-unit id="a28d62ed6665b1c3b4c32461857f9640287204f1" translate="yes" xml:space="preserve">
          <source>byte is an alias for uint8 and is equivalent to uint8 in all ways. It is used, by convention, to distinguish byte values from 8-bit unsigned integer values.</source>
          <target state="translated">바이트는 uint8의 별명이며 모든면에서 uint8과 같습니다. 일반적으로 바이트 값을 8 비트 부호없는 정수 값과 구별하기 위해 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="daf529a73101c2be626b99fc6938163e7a27620b" translate="yes" xml:space="preserve">
          <source>bytes</source>
          <target state="translated">bytes</target>
        </trans-unit>
        <trans-unit id="18966dcea477ed087e87037c4255cd180be7d19e" translate="yes" xml:space="preserve">
          <source>bzip2</source>
          <target state="translated">bzip2</target>
        </trans-unit>
        <trans-unit id="7e36e70ab101e38db9778b845f6e5e4d915321ca" translate="yes" xml:space="preserve">
          <source>bzip2.NewReader()</source>
          <target state="translated">bzip2.NewReader()</target>
        </trans-unit>
        <trans-unit id="a28840497d63c27dddd99bbdb59d1ac59f634ab3" translate="yes" xml:space="preserve">
          <source>bzip2.StructuralError</source>
          <target state="translated">bzip2.StructuralError</target>
        </trans-unit>
        <trans-unit id="623274b71dcb6f11f1351e41d285874ff15944cd" translate="yes" xml:space="preserve">
          <source>bzip2.StructuralError.Error()</source>
          <target state="translated">bzip2.StructuralError.Error()</target>
        </trans-unit>
        <trans-unit id="35fb5884d07018ded3595f1a4194fa8ada482429" translate="yes" xml:space="preserve">
          <source>can be invoked with</source>
          <target state="translated">로 호출 할 수 있습니다</target>
        </trans-unit>
        <trans-unit id="dc7c70c70cfc81d31d77efc38b02e281edd23b66" translate="yes" xml:space="preserve">
          <source>can be sent from or received into any of these Go types:</source>
          <target state="translated">다음 Go 유형 중 하나에서 보내거나받을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="27b4d0f8ee1e61a07904f1afd558aa878973f2d1" translate="yes" xml:space="preserve">
          <source>cgi</source>
          <target state="translated">cgi</target>
        </trans-unit>
        <trans-unit id="afc764d4f3905e1e10a555e2d943f71b778787ac" translate="yes" xml:space="preserve">
          <source>cgi.Handler</source>
          <target state="translated">cgi.Handler</target>
        </trans-unit>
        <trans-unit id="345f5555161daad3c08846dce1debd71aab8f029" translate="yes" xml:space="preserve">
          <source>cgi.Handler.ServeHTTP()</source>
          <target state="translated">cgi.Handler.ServeHTTP()</target>
        </trans-unit>
        <trans-unit id="0cb64c13ddfb69c52b4a7a60c57c3dd197ce6ac2" translate="yes" xml:space="preserve">
          <source>cgi.Request()</source>
          <target state="translated">cgi.Request()</target>
        </trans-unit>
        <trans-unit id="9ed756761bf08db29ee12cc8a39f1c54ac72fb20" translate="yes" xml:space="preserve">
          <source>cgi.RequestFromMap()</source>
          <target state="translated">cgi.RequestFromMap()</target>
        </trans-unit>
        <trans-unit id="95e10b72dd720723cd2fd259c32dbc38d8d708c5" translate="yes" xml:space="preserve">
          <source>cgi.Serve()</source>
          <target state="translated">cgi.Serve()</target>
        </trans-unit>
        <trans-unit id="5353307445994970cbf0c9ac590dff82185bec89" translate="yes" xml:space="preserve">
          <source>cgo</source>
          <target state="translated">cgo</target>
        </trans-unit>
        <trans-unit id="ef062bd7027997a754c3f8c24378ec82c8b049ef" translate="yes" xml:space="preserve">
          <source>cipher</source>
          <target state="translated">cipher</target>
        </trans-unit>
        <trans-unit id="48f6657689b81929628868b6ffa37ed14fc59b8c" translate="yes" xml:space="preserve">
          <source>cipher.AEAD</source>
          <target state="translated">cipher.AEAD</target>
        </trans-unit>
        <trans-unit id="943ff37f748ca9fba298c7fbd4e77ac75098c177" translate="yes" xml:space="preserve">
          <source>cipher.Block</source>
          <target state="translated">cipher.Block</target>
        </trans-unit>
        <trans-unit id="565f132b0381a8671d155f8ae0a0d943a94afc81" translate="yes" xml:space="preserve">
          <source>cipher.BlockMode</source>
          <target state="translated">cipher.BlockMode</target>
        </trans-unit>
        <trans-unit id="5c1fcaa6ed9a1e71615a737bb0d113745d659b4e" translate="yes" xml:space="preserve">
          <source>cipher.NewCBCDecrypter()</source>
          <target state="translated">cipher.NewCBCDecrypter()</target>
        </trans-unit>
        <trans-unit id="5e90e33d8418e223e0e73eaa0ed9a964b63dfd3f" translate="yes" xml:space="preserve">
          <source>cipher.NewCBCEncrypter()</source>
          <target state="translated">cipher.NewCBCEncrypter()</target>
        </trans-unit>
        <trans-unit id="87c80f80ec144465d8f6527fbe3b87c13932dcb0" translate="yes" xml:space="preserve">
          <source>cipher.NewCFBDecrypter()</source>
          <target state="translated">cipher.NewCFBDecrypter()</target>
        </trans-unit>
        <trans-unit id="d0ba235edd924c4ff80ec461b47c9dd1ac6a4b92" translate="yes" xml:space="preserve">
          <source>cipher.NewCFBEncrypter()</source>
          <target state="translated">cipher.NewCFBEncrypter()</target>
        </trans-unit>
        <trans-unit id="ed3b66a141815726468d364f4de2401c8f33fb6c" translate="yes" xml:space="preserve">
          <source>cipher.NewCTR()</source>
          <target state="translated">cipher.NewCTR()</target>
        </trans-unit>
        <trans-unit id="d34e075219b94e3cafd87a34944d0f0a6802d59c" translate="yes" xml:space="preserve">
          <source>cipher.NewGCM()</source>
          <target state="translated">cipher.NewGCM()</target>
        </trans-unit>
        <trans-unit id="ea320254a5b4da363a83e374c0228dd005ca3001" translate="yes" xml:space="preserve">
          <source>cipher.NewGCMWithNonceSize()</source>
          <target state="translated">cipher.NewGCMWithNonceSize()</target>
        </trans-unit>
        <trans-unit id="639eddd95fd2e125b8fadcca0c429025ca5a3b0b" translate="yes" xml:space="preserve">
          <source>cipher.NewGCMWithTagSize()</source>
          <target state="translated">cipher.NewGCMWithTagSize()</target>
        </trans-unit>
        <trans-unit id="91e3939fcf5cc4bddf0e4fdb8736245450e0e9f2" translate="yes" xml:space="preserve">
          <source>cipher.NewOFB()</source>
          <target state="translated">cipher.NewOFB()</target>
        </trans-unit>
        <trans-unit id="aab0cdc9fdaa8bafcf8686a7aaa19ca0956319d6" translate="yes" xml:space="preserve">
          <source>cipher.Stream</source>
          <target state="translated">cipher.Stream</target>
        </trans-unit>
        <trans-unit id="4bbb80c119e3103e1356f52c22197ccd028ec471" translate="yes" xml:space="preserve">
          <source>cipher.StreamReader</source>
          <target state="translated">cipher.StreamReader</target>
        </trans-unit>
        <trans-unit id="60820182a847408a3933829cdc5c8e95da47b043" translate="yes" xml:space="preserve">
          <source>cipher.StreamReader.Read()</source>
          <target state="translated">cipher.StreamReader.Read()</target>
        </trans-unit>
        <trans-unit id="00d25adc5d45be402bc148f6a6eebd3a70f0a4cc" translate="yes" xml:space="preserve">
          <source>cipher.StreamWriter</source>
          <target state="translated">cipher.StreamWriter</target>
        </trans-unit>
        <trans-unit id="283b9684c42e8a10a4d25c34d89b41d7e3b1d417" translate="yes" xml:space="preserve">
          <source>cipher.StreamWriter.Close()</source>
          <target state="translated">cipher.StreamWriter.Close()</target>
        </trans-unit>
        <trans-unit id="6f867ab120cb8a2e31c5aa5703bcb3bb3abbb036" translate="yes" xml:space="preserve">
          <source>cipher.StreamWriter.Write()</source>
          <target state="translated">cipher.StreamWriter.Write()</target>
        </trans-unit>
        <trans-unit id="8aa25118cc4870eceb8e23bdeb08885b1bbf1f25" translate="yes" xml:space="preserve">
          <source>cmplx</source>
          <target state="translated">cmplx</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
