<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="go">
    <body>
      <group id="go">
        <trans-unit id="bfd728c1d0c504dbec492943ca8e74e081796110" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://rawgit.com/mikesamuel/sanitized-jquery-templates/trunk/safetemplate.html#problem_definition&quot;&gt;https://rawgit.com/mikesamuel/sanitized-jquery-templates/trunk/safetemplate.html#problem_definition&lt;/a&gt; defines &quot;safe&quot; as used by this package.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c919ab787e33855057ab4da89511287a977f3f0b" translate="yes" xml:space="preserve">
          <source>A &quot;p&quot; or &quot;P&quot; exponent indicates a base 2 (rather then base 10) exponent; for instance, &quot;0x1.fffffffffffffp1023&quot; (using base 0) represents the maximum float64 value. For hexadecimal mantissae, the exponent character must be one of 'p' or 'P', if present (an &quot;e&quot; or &quot;E&quot; exponent indicator cannot be distinguished from a mantissa digit).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1123f6aad96443b92187d542899cc95b9bb2fe32" translate="yes" xml:space="preserve">
          <source>A BadDecl node is a placeholder for declarations containing syntax errors for which no correct declaration nodes can be created.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dcfeb402a68dc1a9b5372f3908c42874cd09a220" translate="yes" xml:space="preserve">
          <source>A BadExpr node is a placeholder for expressions containing syntax errors for which no correct expression nodes can be created.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7eb045abea7688d577a2f4aa68d42b63d688f628" translate="yes" xml:space="preserve">
          <source>A BadStmt node is a placeholder for statements containing syntax errors for which no correct statement nodes can be created.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a09691e16560521f59b5e41dfa68af0b91ddf921" translate="yes" xml:space="preserve">
          <source>A Basic represents a basic type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e96e9fa6016f0735848cb5e83d084a95898493d" translate="yes" xml:space="preserve">
          <source>A BasicLit node represents a literal of basic type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0d28c34a4273c4c205bdbd169e7a24e79d3af70" translate="yes" xml:space="preserve">
          <source>A BasicType holds fields common to all basic types.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4aaf562bb9c344cab2878d8a67694cab58f267fe" translate="yes" xml:space="preserve">
          <source>A BinaryExpr node represents a binary expression.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c75800e242cb7940cab3ce54f7f2ee89e873c3a1" translate="yes" xml:space="preserve">
          <source>A Block represents a PEM encoded structure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6eb1e62ee558fbb06e309b0a1474fe5590194eb9" translate="yes" xml:space="preserve">
          <source>A Block represents an implementation of block cipher using a given key. It provides the capability to encrypt or decrypt individual blocks. The mode implementations extend that capability to streams of blocks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b09c35891b54fa0138a8d1707cf64366451f1193" translate="yes" xml:space="preserve">
          <source>A BlockMode represents a block cipher running in a block-based mode (CBC, ECB etc).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8dfe588d503302439640a67e38197d5d027bab2f" translate="yes" xml:space="preserve">
          <source>A BlockStmt node represents a braced statement list.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6596c287920a60f833a744c8df6d962e72ea7d5" translate="yes" xml:space="preserve">
          <source>A BoolType represents a boolean type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f359d441ebb4d88e77ab94131c369de596c1ee19" translate="yes" xml:space="preserve">
          <source>A BranchStmt node represents a break, continue, goto, or fallthrough statement.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3fb505f6912b6b4ddfb95346dfcc6a9c7667dc18" translate="yes" xml:space="preserve">
          <source>A Buffer is a variable-sized buffer of bytes with Read and Write methods. The zero value for Buffer is an empty buffer ready to use.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1461605a0709414441624bd277a7be479b6f6011" translate="yes" xml:space="preserve">
          <source>A BufferPool is an interface for getting and returning temporary byte slices for use by io.CopyBuffer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6d17c51ac02141341d0a91f23ea17ed19e01909" translate="yes" xml:space="preserve">
          <source>A Builder is used to efficiently build a string using Write methods. It minimizes memory copying. The zero value is ready to use. Do not copy a non-zero Builder.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="037cb25e954c2c0cb7d3dbedf060bc007d0e89cd" translate="yes" xml:space="preserve">
          <source>A Builtin represents a built-in function. Builtins don't have a valid type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="892968a868a7e4a907bd63b74cc7f80a6a88354c" translate="yes" xml:space="preserve">
          <source>A ByteOrder specifies how to convert byte sequences into 16-, 32-, or 64-bit unsigned integers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e655396894e089ec7bd8b95669d2a7e9ddcfcd0" translate="yes" xml:space="preserve">
          <source>A CallExpr node represents an expression followed by an argument list.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64a8f488b495e864ba78bb0d182f77c49a17af80" translate="yes" xml:space="preserve">
          <source>A CancelFunc tells an operation to abandon its work. A CancelFunc does not wait for the work to stop. A CancelFunc may be called by multiple goroutines simultaneously. After the first call, subsequent calls to a CancelFunc do nothing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b10cf9ceb81b6bc3b8dcabe10017a6a967fe252" translate="yes" xml:space="preserve">
          <source>A CaseClause represents a case of an expression or type switch statement.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3df0336a740616143abfbd052730d859e0747a00" translate="yes" xml:space="preserve">
          <source>A Certificate is a chain of one or more certificates, leaf first.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ce79efd48b66ecd681a102ece34c5f01f30b6bb" translate="yes" xml:space="preserve">
          <source>A Certificate represents an X.509 certificate.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dacc044ff83252e8da8b7c83ac652df96b4a7263" translate="yes" xml:space="preserve">
          <source>A Chan represents a channel type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="489cc0d6b95ec8b9ebbf24e11966fa69854f5cb9" translate="yes" xml:space="preserve">
          <source>A ChanDir value indicates a channel direction.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="070a85a0a8fd173d8b11a96f53495cdee7edbae6" translate="yes" xml:space="preserve">
          <source>A ChanType node represents a channel type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2aad134ce320508a2ed662401c3a35abf0301e47" translate="yes" xml:space="preserve">
          <source>A CharData represents XML character data (raw text), in which XML escape sequences have been replaced by the characters they represent.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc58af40e127ae636ebfd4b1dab058b1f5ba3059" translate="yes" xml:space="preserve">
          <source>A CharType represents a signed character type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7571ca3899875977a8c2e856f154d99ef71130b0" translate="yes" xml:space="preserve">
          <source>A CheckEqualError is the result CheckEqual finding an error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5e6d49e7769874182960864050ac2745252cf02" translate="yes" xml:space="preserve">
          <source>A CheckError is the result of Check finding an error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e40b1d8be51a7ea43b64ef548b13353308a4f9f7" translate="yes" xml:space="preserve">
          <source>A Checker maintains the state of the type checker. It must be created with NewChecker.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f430ceb71dc6fb2459e64f75abc35fb2c2dcc962" translate="yes" xml:space="preserve">
          <source>A Cipher is an instance of RC4 using a particular key.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cebfde1712e5a042e0276018aed63bffa5b48954" translate="yes" xml:space="preserve">
          <source>A Class is the DWARF 4 class of an attribute value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe94b934cba52a3f0f37c36e65520044cdec12c3" translate="yes" xml:space="preserve">
          <source>A Client is an HTTP client. Its zero value (DefaultClient) is a usable client that uses DefaultTransport.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dff10f0c9a02b3533a2c5ff6f1aa4ea18efc93c0" translate="yes" xml:space="preserve">
          <source>A Client is higher-level than a RoundTripper (such as Transport) and additionally handles HTTP details such as cookies and redirects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7476021d61e8a0df9fbc63c7ca0b91cd642f328e" translate="yes" xml:space="preserve">
          <source>A Client represents a client connection to an SMTP server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b71630fa521f0999628fd58f1a5f36c35682c154" translate="yes" xml:space="preserve">
          <source>A ClientCodec implements writing of RPC requests and reading of RPC responses for the client side of an RPC session. The client calls WriteRequest to write a request to the connection and calls ReadResponseHeader and ReadResponseBody in pairs to read responses. The client calls Close when finished with the connection. ReadResponseBody may be called with a nil argument to force the body of the response to be read and then discarded. See NewClient's comment for information about concurrent access.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="360c604b631953905f3f4216c2aa9c0493f9a5c4" translate="yes" xml:space="preserve">
          <source>A Cmd cannot be reused after calling its Run, Output or CombinedOutput methods.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f9b0eb470afbfa84ac3e6bd695f6f7547e25e63" translate="yes" xml:space="preserve">
          <source>A CommClause node represents a case of a select statement.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="126d1d49a2d0aecea067ab9d4f53c05821460337" translate="yes" xml:space="preserve">
          <source>A Comment node represents a single //-style or /*-style comment.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="102b0aae1b692037597357ab6c34e305a5d50abf" translate="yes" xml:space="preserve">
          <source>A Comment represents an XML comment of the form &amp;lt;!--comment--&amp;gt;. The bytes do not include the &amp;lt;!-- and --&amp;gt; comment markers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f01ed0a912eea13962aa863979815ef144c0e12e" translate="yes" xml:space="preserve">
          <source>A CommentGroup represents a sequence of comments with no other tokens and no empty lines between.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6618446c717172eb2ba87e09ce048aad816582b5" translate="yes" xml:space="preserve">
          <source>A CommentMap maps an AST node to a list of comment groups associated with it. See NewCommentMap for a description of the association.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4541544833c16b1a72e733c00fdf848bd8e1ec5a" translate="yes" xml:space="preserve">
          <source>A CommentedNode bundles an AST node and corresponding comments. It may be provided as argument to any of the Fprint functions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b25bec4a4f00e250f1372003588c09e5587d686b" translate="yes" xml:space="preserve">
          <source>A CommonType holds fields common to multiple types. If a field is not known or not applicable for a given type, the zero value is used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aff877fa9d1c634f1772007c128f36f1bc62e322" translate="yes" xml:space="preserve">
          <source>A ComplexType represents a complex floating point type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1232fe7484bfb4ee0095518475648ab13064a76" translate="yes" xml:space="preserve">
          <source>A CompositeLit node represents a composite literal.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f70c579d931c29aa9cde9de4f1cce6833035c9f" translate="yes" xml:space="preserve">
          <source>A Compressor returns a new compressing writer, writing to w. The WriteCloser's Close method must be used to flush pending data to w. The Compressor itself must be safe to invoke from multiple goroutines simultaneously, but each returned writer will be used only by one goroutine at a time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d87124c080041826540d92b145f7667559b16d7f" translate="yes" xml:space="preserve">
          <source>A Cond must not be copied after first use.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74cea2d83b96c716a3176b36089838f2190c82b3" translate="yes" xml:space="preserve">
          <source>A Config node controls the output of Fprint.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c229591d56e4195e752fc2d9b259e9760a5c33b" translate="yes" xml:space="preserve">
          <source>A Config specifies the configuration for type checking. The zero value for Config is a ready-to-use default configuration.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0f1b53b3d403749973328df58e12a575ec9a7b0" translate="yes" xml:space="preserve">
          <source>A Config structure contains options for running a test.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c121cae17514d3fa4cae135216ea38cbdf6bbce1" translate="yes" xml:space="preserve">
          <source>A Config structure is used to configure a TLS client or server. After one has been passed to a TLS function it must not be modified. A Config may be reused; the tls package will also not modify it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3a452893d512c39ccf07d91afb2d3c4d36420f8" translate="yes" xml:space="preserve">
          <source>A Conn must call Close to return the connection to the database pool and may do so concurrently with a running query.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7232532e891cd146be604b1b6ed41fa6024cd94" translate="yes" xml:space="preserve">
          <source>A Conn represents a secured connection. It implements the net.Conn interface.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a98021e4777c07cc886aaaaaab3e86d5dd758f8" translate="yes" xml:space="preserve">
          <source>A Conn represents a textual network protocol connection. It consists of a Reader and Writer to manage I/O and a Pipeline to sequence concurrent requests on the connection. These embedded types carry methods with them; see the documentation of those types for details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4b224256a6ca255a6fb91fd1197343ba6039ae2" translate="yes" xml:space="preserve">
          <source>A ConnState represents the state of a client connection to a server. It's used by the optional Server.ConnState hook.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e31df198984a84556e29056f951a830f56b070b2" translate="yes" xml:space="preserve">
          <source>A Connector can be passed to sql.OpenDB, to allow drivers to implement their own sql.DB constructors, or returned by DriverContext's OpenConnector method, to allow drivers access to context and to avoid repeated parsing of driver configuration.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="044be90e3e3147d4e037da6309a7d2e940ba3c36" translate="yes" xml:space="preserve">
          <source>A Connector represents a driver in a fixed configuration and can create any number of equivalent Conns for use by multiple goroutines.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da4a343554925a1ddbea469e235e1555605d99a5" translate="yes" xml:space="preserve">
          <source>A Const represents a declared constant.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4500800489d0c022304032a2e4a5cc3ccd1e4757" translate="yes" xml:space="preserve">
          <source>A Context carries a deadline, a cancellation signal, and other values across API boundaries.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad739093c7c2952b6f8d06103b8320cc9d3d6ee6" translate="yes" xml:space="preserve">
          <source>A Context specifies the supporting context for a build.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="345b60f4218aab4a9e89ba61ffe19ba47293618c" translate="yes" xml:space="preserve">
          <source>A Cookie represents an HTTP cookie as sent in the Set-Cookie header of an HTTP response or the Cookie header of an HTTP request.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="439511987886b735bcc48bb82e45d11fb45c8e80" translate="yes" xml:space="preserve">
          <source>A CookieJar manages storage and use of cookies in HTTP requests.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9dbc27b974673707e8a2f913fec96abcb0bae1ca" translate="yes" xml:space="preserve">
          <source>A CorruptInputError reports the presence of corrupt input at a given offset.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a774110c2f1a711b8627926a4c791b50d477e36" translate="yes" xml:space="preserve">
          <source>A Cpu is a Mach-O cpu type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf8833559ac0ea08bb6631d4af289d3312b520f0" translate="yes" xml:space="preserve">
          <source>A Curve represents a short-form Weierstrass curve with a=-3. See &lt;a href=&quot;https://www.hyperelliptic.org/EFD/g1p/auto-shortw.html&quot;&gt;https://www.hyperelliptic.org/EFD/g1p/auto-shortw.html&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d334a921cf08b96ed08ebbd1348bd4502b8cbff" translate="yes" xml:space="preserve">
          <source>A DeclStmt node represents a declaration in a statement list.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7fc0e178afca45507a82048502fc3190729e7a51" translate="yes" xml:space="preserve">
          <source>A Decoder manages the receipt of type and data information read from the remote side of a connection. It is safe for concurrent use by multiple goroutines.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aaa935f1cb5a55ee24b563854564808c1c7b94ab" translate="yes" xml:space="preserve">
          <source>A Decoder reads and decodes JSON values from an input stream.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a0ff998ca32c8d66166ff01613dc1c8be7bbffd" translate="yes" xml:space="preserve">
          <source>A Decoder represents an XML parser reading a particular input stream. The parser assumes that its input is encoded in UTF-8.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa6eac4594c2e9110158777fdd5ccd573d3725c4" translate="yes" xml:space="preserve">
          <source>A Decompressor returns a new decompressing reader, reading from r. The ReadCloser's Close method must be used to release associated resources. The Decompressor itself must be safe to invoke from multiple goroutines simultaneously, but each returned reader will be used only by one goroutine at a time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3177b45a687e697befcd3f3f2594b30a3ecf0c86" translate="yes" xml:space="preserve">
          <source>A DeferStmt node represents a defer statement.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b67d05f625ac987a07f0eb01489bee222c70495e" translate="yes" xml:space="preserve">
          <source>A Delim is a JSON array or object delimiter, one of [ ] { or }.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3528f7cabfe02dad4395c36da0f26da2899865f1" translate="yes" xml:space="preserve">
          <source>A Dialer contains options for connecting to an address.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6408d9ab2f66c0a4e6e86f5a54d85c61373257b3" translate="yes" xml:space="preserve">
          <source>A Dir implements FileSystem using the native file system restricted to a specific directory tree.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f86e22f5699c7e88fdb174b30fabf27d65d245e3" translate="yes" xml:space="preserve">
          <source>A Directive represents an XML directive of the form &amp;lt;!text&amp;gt;. The bytes do not include the &amp;lt;! and &amp;gt; markers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0be171834370163d199abe38b806da6288a68ad" translate="yes" xml:space="preserve">
          <source>A DotDotDotType represents the variadic ... function parameter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6384d5f5a370c8e493c8712f20d49ae8b99cc150" translate="yes" xml:space="preserve">
          <source>A Duration represents the elapsed time between two instants as an int64 nanosecond count. The representation limits the largest representable duration to approximately 290 years.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ecdfd7bc84be9f2d17a162b33d49b58be95285e" translate="yes" xml:space="preserve">
          <source>A Dylib represents a Mach-O load dynamic library command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0acd35cd81a153e22929826effaf5c42378d0fea" translate="yes" xml:space="preserve">
          <source>A DylibCmd is a Mach-O load dynamic library command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2bb7617e0174a9893ba90aa3aabb8948c586903b" translate="yes" xml:space="preserve">
          <source>A Dysymtab represents a Mach-O dynamic symbol table command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3d7d413601467bbc9c94994480cf4597efe0894" translate="yes" xml:space="preserve">
          <source>A DysymtabCmd is a Mach-O dynamic symbol table command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0df08f2b1aaf090c6e60a692d9f1a3e5e77aad17" translate="yes" xml:space="preserve">
          <source>A FatArch is a Mach-O File inside a FatFile.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="feab8100790b52cb094e5b75b69875ccd9ff711e" translate="yes" xml:space="preserve">
          <source>A FatArchHeader represents a fat header for a specific image architecture.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b79b4d3682257c685c1bf7a92b274c21d4a76b36" translate="yes" xml:space="preserve">
          <source>A FatFile is a Mach-O universal binary that contains at least one architecture.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39a6737a2fd79f471ed1f017391abd2beae09609" translate="yes" xml:space="preserve">
          <source>A Field is a single attribute/value pair in an Entry.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45548081441583b2b52c076e664e8a1b9b5bfb95" translate="yes" xml:space="preserve">
          <source>A Field represents a Field declaration list in a struct type, a method list in an interface type, or a parameter/result declaration in a signature. Field.Names is nil for unnamed parameters (parameter lists which only contain types) and embedded struct fields. In the latter case, the field name is the type name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6dd0ed32ad3016ad5f04a116fae45f9934e70025" translate="yes" xml:space="preserve">
          <source>A FieldFilter may be provided to Fprint to control the output.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1c9353c6215676d705e43fd5de613dde8e8e192" translate="yes" xml:space="preserve">
          <source>A FieldList represents a list of Fields, enclosed by parentheses or braces.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c37cc883e1e912226df4c951571e7fa7ce2829b4" translate="yes" xml:space="preserve">
          <source>A File is a handle for a file belonging to a FileSet. A File has a name, size, and line offset table.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="724a9870762bd470aa21565f1e367e985eaadbc5" translate="yes" xml:space="preserve">
          <source>A File is returned by a FileSystem's Open method and can be served by the FileServer implementation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="933657418db475690f900fc0cb038c8ec20fa23f" translate="yes" xml:space="preserve">
          <source>A File node represents a Go source file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88092327b3f39b704b7d9dafd634ca25e188e4c7" translate="yes" xml:space="preserve">
          <source>A File represents an open ELF file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65e617a52a2a3202382d475d890e7de2c4e15f40" translate="yes" xml:space="preserve">
          <source>A File represents an open Mach-O file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="705c0d822b227bbdfb608bdb5b0dd5b1341bcaf4" translate="yes" xml:space="preserve">
          <source>A File represents an open PE file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8041758a835e2e671f1edd9a36a5c0717c227b6" translate="yes" xml:space="preserve">
          <source>A File represents an open Plan 9 a.out file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b02261788cea23a7e13cd4df1998baba9a3f063" translate="yes" xml:space="preserve">
          <source>A FileHeader describes a file part of a multipart request.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e9ebbcbf6bf5d2e7a5168723d1cd92457a28d9c" translate="yes" xml:space="preserve">
          <source>A FileHeader represents a Mach-O file header.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c464dfa1166cb87240fc924ea37de926c8387ff0" translate="yes" xml:space="preserve">
          <source>A FileHeader represents a Plan 9 a.out file header.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44f8b75b12734f33f611a1d8eac4363a03be63e4" translate="yes" xml:space="preserve">
          <source>A FileHeader represents an ELF file header.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de6784d1f1cbed04559df2db8caf5220c3d40a51" translate="yes" xml:space="preserve">
          <source>A FileInfo describes a file and is returned by Stat and Lstat.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="256e3c3b330f9698a158d9ebc412d515e72f62ef" translate="yes" xml:space="preserve">
          <source>A FileMode represents a file's mode and permission bits. The bits have the same definition on all systems, so that information about files can be moved from one system to another portably. Not all bits apply to all systems. The only required bit is ModeDir for directories.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="071474a5e59c2cbe4022eddafca1945a74b7de9b" translate="yes" xml:space="preserve">
          <source>A FileSet represents a set of source files. Methods of file sets are synchronized; multiple goroutines may invoke them concurrently.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b2dd840727f49f9eba8be4237966f01f435fad4" translate="yes" xml:space="preserve">
          <source>A FileSystem implements access to a collection of named files. The elements in a file path are separated by slash ('/', U+002F) characters, regardless of host operating system convention.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78a9e5c4832223d5a011e8dddc53aa5d75c7f4d4" translate="yes" xml:space="preserve">
          <source>A Flag accepts any data and is set to true if present.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9fa93680f639a304c47bdf98c8a62274d8186d35" translate="yes" xml:space="preserve">
          <source>A Flag represents the state of a flag.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="234f76bb20d5f9eec0d53dcc77b2a13d82eadf61" translate="yes" xml:space="preserve">
          <source>A FlagSet represents a set of defined flags. The zero value of a FlagSet has no name and has ContinueOnError error handling.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5288f46811dffeaa7ea61e19365d12c9632b9778" translate="yes" xml:space="preserve">
          <source>A FloatType represents a floating point type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b1e4bc4cb382e2c275611b3238464917e62a22d" translate="yes" xml:space="preserve">
          <source>A ForStmt represents a for statement.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c2fc1a03e93ae8b537c5962f0b0b7762e61aaf4" translate="yes" xml:space="preserve">
          <source>A FormatError reports that the input is not a valid JPEG.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6fad07f1b5a1dbeefd78d7d2f7d158225dd26546" translate="yes" xml:space="preserve">
          <source>A FormatError reports that the input is not a valid PNG.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc9cb9f874380cdd581f85bc7cca4178b91bf7ca" translate="yes" xml:space="preserve">
          <source>A Func collects information about a single function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49cb9decf874b456f0efef0977636083343d1115" translate="yes" xml:space="preserve">
          <source>A Func represents a Go function in the running binary.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11647ec5e44e1c0de00d02c89c294903e5e1dff5" translate="yes" xml:space="preserve">
          <source>A Func represents a declared function, concrete method, or abstract (interface) method. Its Type() is always a *Signature. An abstract method may belong to many interfaces due to embedding.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e94aa8231cb387fe4a10412ff3ac134dd8f4c188" translate="yes" xml:space="preserve">
          <source>A FuncDecl node represents a function declaration.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94e066c3ac487a79d47768c2220a49644d0bf184" translate="yes" xml:space="preserve">
          <source>A FuncLit node represents a function literal.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09e2235228768330e677d304af97960b02fdd8c5" translate="yes" xml:space="preserve">
          <source>A FuncType node represents a function type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dec14bd2e595d84c173c9bf0c1df71b1223eddb0" translate="yes" xml:space="preserve">
          <source>A FuncType represents a function type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="987651ff41c347596f94cc565b5f05d25059c2c5" translate="yes" xml:space="preserve">
          <source>A GenDecl node (generic declaration node) represents an import, constant, type or variable declaration. A valid Lparen position (Lparen.IsValid()) indicates a parenthesized declaration.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ebbcb57a5319bb37519fc330de793ad98efdcc2" translate="yes" xml:space="preserve">
          <source>A Generator can generate random values of its own type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b5be6dbdc273931973aa00fee70bb05d983c538" translate="yes" xml:space="preserve">
          <source>A GoStmt node represents a go statement.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ead9a9b0d839e98932b0f6df6d7a5bcac06a117e" translate="yes" xml:space="preserve">
          <source>A Handler responds to an HTTP request.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1137ce84e7b2173907b2beb75a048008a6d1a1fd" translate="yes" xml:space="preserve">
          <source>A HardwareAddr represents a physical hardware address.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66aa09d50694e8606590bbd853e20a5cf82fa277" translate="yes" xml:space="preserve">
          <source>A Header represents a single header in a tar archive. Some fields may not be populated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a628db49b644e43a3caa5d22dfaed6a4347d3671" translate="yes" xml:space="preserve">
          <source>A Header represents the key-value pairs in a mail message header.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80136957adb9f160575a77527ac0cff8fd0f4621" translate="yes" xml:space="preserve">
          <source>A Header represents the key-value pairs in an HTTP header.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c29d59b81052100c179f70c4a67ff5067616d1b" translate="yes" xml:space="preserve">
          <source>A KeyValueExpr node represents (key : value) pairs in composite literals.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8df5878bb0e127b0ade93df9aeeb99a31d76beb" translate="yes" xml:space="preserve">
          <source>A Kind represents the specific kind of type that a Type represents. The zero Kind is not a valid kind.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17ad9a62d94b60c7b9f57fee9752262c3aabb885" translate="yes" xml:space="preserve">
          <source>A Label represents a declared label. Labels don't have a type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c46c66dc93e06bd07a9972be686c8a8ccb6cbaf" translate="yes" xml:space="preserve">
          <source>A LabeledStmt node represents a labeled statement.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd993e336f0b681922292ae796d58612702dde0c" translate="yes" xml:space="preserve">
          <source>A LimitedReader reads from R but limits the amount of data returned to just N bytes. Each call to Read updates N to reflect the new amount remaining. Read returns EOF when N &amp;lt;= 0 or when the underlying R returns EOF.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae901c0f03f89889b69882a9a6cb3cf314dfa370" translate="yes" xml:space="preserve">
          <source>A LineEntry is a row in a DWARF line table.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b5b21c9cee22599568846d4db957ad7b4308aac" translate="yes" xml:space="preserve">
          <source>A LineFile is a source file referenced by a DWARF line table entry.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67c775091aa03ac7f074c1f43b66b9020494df47" translate="yes" xml:space="preserve">
          <source>A LineReader reads a sequence of LineEntry structures from a DWARF &quot;line&quot; section for a single compilation unit. LineEntries occur in order of increasing PC and each LineEntry gives metadata for the instructions from that LineEntry's PC to just before the next LineEntry's PC. The last entry will have its EndSequence field set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="732f9020aab568e65bf527050a453f3db3f95343" translate="yes" xml:space="preserve">
          <source>A LineReaderPos represents a position in a line table.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c1eec29b34e8edeb556d192a830487d8f9953c5" translate="yes" xml:space="preserve">
          <source>A LineTable is a data structure mapping program counters to line numbers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="660bb86f96243fdd09f53c12cec51a542f1df102" translate="yes" xml:space="preserve">
          <source>A Listener is a generic network listener for stream-oriented protocols.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4249368f5406670bcb59c0da03a6cead7099cb8f" translate="yes" xml:space="preserve">
          <source>A Load represents any Mach-O load command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a677c9d8c8b2e116341c7310869a6eddad18fb38" translate="yes" xml:space="preserve">
          <source>A LoadBytes is the uninterpreted bytes of a Mach-O load command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4e8327c6dd261427fb252f08dc735a316819bd2" translate="yes" xml:space="preserve">
          <source>A LoadCmd is a Mach-O load command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de22bbb1e6bed3a2831a2b27a98bb521911db92a" translate="yes" xml:space="preserve">
          <source>A Location maps time instants to the zone in use at that time. Typically, the Location represents the collection of time offsets in use in a geographical area, such as CEST and CET for central Europe.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e29abdad9487b902fd4f90738f02f8576cb3d7e" translate="yes" xml:space="preserve">
          <source>A Locker represents an object that can be locked and unlocked.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9dcd5e9754f765ea5f5fe27dc49c6d83fe4fae5b" translate="yes" xml:space="preserve">
          <source>A Logger represents an active logging object that generates lines of output to an io.Writer. Each logging operation makes a single call to the Writer's Write method. A Logger can be used simultaneously from multiple goroutines; it guarantees to serialize access to the Writer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="487666de9e9a85c5d9356cc5cf81a3f898319e56" translate="yes" xml:space="preserve">
          <source>A Lookup function returns a reader to access package data for a given import path, or an error if no matching package is found.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0c2fe60534ab38b9f6eff1d8a7f8316ae318de2" translate="yes" xml:space="preserve">
          <source>A MIMEHeader represents a MIME-style header mapping keys to sets of values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="622676ae57a63cdd4f63cf5d044541da87280d44" translate="yes" xml:space="preserve">
          <source>A Map represents a map type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7049fcfd9e1c276e6fb9a68c8637a2f14ff913c1" translate="yes" xml:space="preserve">
          <source>A MapIter is an iterator for ranging over a map. See Value.MapRange.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3993e367e0709848b06c8418048cd1fd43363eb0" translate="yes" xml:space="preserve">
          <source>A MapType node represents a map type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79cb9a3cdf800543257c71ff431c6c3132c71d91" translate="yes" xml:space="preserve">
          <source>A MarshalerError represents an error from calling a MarshalJSON or MarshalText method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50fe2f21d711b0be55d76651cc008c7c5ed77cab" translate="yes" xml:space="preserve">
          <source>A MemProfileRecord describes the live objects allocated by a particular call sequence (stack trace).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38f79d159c830caf08bfe0d93506b8d5225e9aeb" translate="yes" xml:space="preserve">
          <source>A MemStats records statistics about the memory allocator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5a8857d4132dff66ceaae33ce8008ebbeba4c4f" translate="yes" xml:space="preserve">
          <source>A Message represents a parsed mail message.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b2aa75f290a4b618dbec620b1977caee89888e1" translate="yes" xml:space="preserve">
          <source>A MethodSet is an ordered set of concrete or abstract (interface) methods; a method is a MethodVal selection, and they are ordered by ascending m.Obj().Id(). The zero value for a MethodSet is a ready-to-use empty method set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e93d6d78eddbae4e7fad7a6a0ca260a0ccf86c67" translate="yes" xml:space="preserve">
          <source>A Mode value is a set of flags (or 0). They control printing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="909b6ff9f9762f14bdb401dcb300258f57bf1c0e" translate="yes" xml:space="preserve">
          <source>A Mode value is a set of flags (or 0). They control the amount of source code parsed and other optional parser functionality.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="acbe3072fb44246dc2f2f9161a57bc0fa3f9ebfd" translate="yes" xml:space="preserve">
          <source>A Month specifies a month of the year (January = 1, ...).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d2089df68698ac7feab420a1c41c5fc327b3dac" translate="yes" xml:space="preserve">
          <source>A Mutex is a mutual exclusion lock. The zero value for a Mutex is an unlocked mutex.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ea74f6825074782367f3065384e5f974abea778" translate="yes" xml:space="preserve">
          <source>A Mutex must not be copied after first use.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d293e79fd0c88cc0ff4965a2c2b6a9bcc2c6ddd" translate="yes" xml:space="preserve">
          <source>A Name represents an XML name (Local) annotated with a name space identifier (Space). In tokens returned by Decoder.Token, the Space identifier is given as a canonical URL, not the short prefix used in the document being parsed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2a35c8ef18f02eb6678ba34eacf3ba11a633953" translate="yes" xml:space="preserve">
          <source>A Named represents a named type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bad92076aa525c820eebcc24b8c3805b37fbfbe9" translate="yes" xml:space="preserve">
          <source>A NamedArg is a named argument. NamedArg values may be used as arguments to Query or Exec and bind to the corresponding named parameter in the SQL statement.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b11131cc805ed1ab6e3f58bee92b0fe2c5fa87f5" translate="yes" xml:space="preserve">
          <source>A Node is an element in the parse tree. The interface is trivial. The interface contains an unexported method so that only types local to this package can satisfy it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37a72472f993ff8c5c76aed9654461ad595b3054" translate="yes" xml:space="preserve">
          <source>A Note represents a marked comment starting with &quot;MARKER(uid): note body&quot;. Any note with a marker of 2 or more upper case [A-Z] letters and a uid of at least one character is recognized. The &quot;:&quot; following the uid is optional. Notes are collected in the Package.Notes map indexed by the notes marker.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b87cef5499b5faeaad54c5a5f5e0e7973e06869e" translate="yes" xml:space="preserve">
          <source>A NumError records a failed conversion.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11a76b8e336e5f32dd052064b8407eb081806fc1" translate="yes" xml:space="preserve">
          <source>A Number represents a JSON number literal.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6df70dd442167e536bbc2f2719a1ff6771d9746a" translate="yes" xml:space="preserve">
          <source>A PB is used by RunParallel for running parallel benchmarks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28cce0d7447d20a26f79cc7de8f2ffb5f6cea243" translate="yes" xml:space="preserve">
          <source>A Package describes a Go package.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02c5b186c0d9829ef0b314c7d197a99b06cc08aa" translate="yes" xml:space="preserve">
          <source>A Package describes the Go package found in a directory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7c6a2c88c2a925b1bb13b3770480bc4b1e2f8ba" translate="yes" xml:space="preserve">
          <source>A Package node represents a set of source files collectively building a Go package.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b80c490a82963253ea198d8237d2b88bfeb3fb8f" translate="yes" xml:space="preserve">
          <source>A ParenExpr node represents a parenthesized expression.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32dd285c0ed7aac470e40a0806903efe3cbc3142" translate="yes" xml:space="preserve">
          <source>A ParseError is returned for parsing errors. Line numbers are 1-indexed and columns are 0-indexed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48c4f65b46772ce507deaf319632461e9a6e8fdd" translate="yes" xml:space="preserve">
          <source>A ParseError is the error type of literal network address parsers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d6824c6cf712cde9f9af9dccccc1da24901cb92" translate="yes" xml:space="preserve">
          <source>A Part represents a single part in a multipart body.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dfbcc0e114727389cb8279668c19d2287bd264b1" translate="yes" xml:space="preserve">
          <source>A PipeReader is the read half of a pipe.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a19697f20ff89cf7a057258dbab42f40577989a" translate="yes" xml:space="preserve">
          <source>A PipeWriter is the write half of a pipe.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="acf94f04062b96beb777e42fe455475a158fb691" translate="yes" xml:space="preserve">
          <source>A Pipeline manages a pipelined in-order request/response sequence.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6f05dedc14eb801e2b7f04687804ef382acb51d" translate="yes" xml:space="preserve">
          <source>A PkgName represents an imported Go package. PkgNames don't have a type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="607046c718991e5cb3d6ed4816dc42aea8d71afc" translate="yes" xml:space="preserve">
          <source>A Point is an X, Y coordinate pair. The axes increase right and down.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="768a88aa5e8bc4257378b5f3eb8e284db1c2866f" translate="yes" xml:space="preserve">
          <source>A Pointer represents a pointer type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ed4f38838cc5e5bef3db6e4277a894844db4ea3" translate="yes" xml:space="preserve">
          <source>A Pool is a set of temporary objects that may be individually saved and retrieved.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9590c606b3343da60b471a73764edc1f4d765202" translate="yes" xml:space="preserve">
          <source>A Pool is safe for use by multiple goroutines simultaneously.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b2599ed95be6202d4666b2852d55218a76b0d8a" translate="yes" xml:space="preserve">
          <source>A Pool must not be copied after first use.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8fd9c4a12bc6fc10b6879d22ea87ecc71842c25" translate="yes" xml:space="preserve">
          <source>A PrivateKey represents an RSA key</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f7e88b0c38cbd0d62f840c3829e6e5bc2b140c6" translate="yes" xml:space="preserve">
          <source>A ProcInst represents an XML processing instruction of the form &amp;lt;?target inst?&amp;gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="edd41d0f8525a0b5ab2821d1add949d3f2b61e7c" translate="yes" xml:space="preserve">
          <source>A Profile is a collection of stack traces showing the call sequences that led to instances of a particular event, such as allocation. Packages can create and maintain their own profiles; the most common use is for tracking resources that must be explicitly closed, such as files or network connections.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7ad9992477be411f2a70474056f365c9cf6755d" translate="yes" xml:space="preserve">
          <source>A Profile's methods can be called from multiple goroutines simultaneously.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36aae9f1173dd65c1ae807cca4a4b207b2c93026" translate="yes" xml:space="preserve">
          <source>A Prog is a compiled regular expression program.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77c6b957fd156c74c873357c407dbfd5609bc6a5" translate="yes" xml:space="preserve">
          <source>A Prog represents a single ELF program header in an ELF binary.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3afa7d31fec2d457dace7f415ebe339b6173396" translate="yes" xml:space="preserve">
          <source>A ProgHeader represents a single ELF program header.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a668757fb0cd173dc1eca56fe18304f67be91ed0" translate="yes" xml:space="preserve">
          <source>A ProtocolError describes a protocol violation such as an invalid response or a hung-up connection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6b39dc81130cc794cc964502f8f09dded02f3b0" translate="yes" xml:space="preserve">
          <source>A PtrType represents a pointer type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dcb21686aafe13c9342b5eb4d71053646debb6a6" translate="yes" xml:space="preserve">
          <source>A PublicKey represents the public part of an RSA key.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f4e8d1859ff0d3e7c1427e6e64066e900cad3cb" translate="yes" xml:space="preserve">
          <source>A QualType represents a type that has the C/C++ &quot;const&quot;, &quot;restrict&quot;, or &quot;volatile&quot; qualifier.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ebdeaadb141050dca0205834e1f70052f8794133" translate="yes" xml:space="preserve">
          <source>A Qualifier controls how named package-level objects are printed in calls to TypeString, ObjectString, and SelectionString.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9938b28874a070149d52e6d6227a0422577f7a32" translate="yes" xml:space="preserve">
          <source>A RWMutex is a reader/writer mutual exclusion lock. The lock can be held by an arbitrary number of readers or a single writer. The zero value for a RWMutex is an unlocked mutex.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="293a28f976ca91641319ee6ab2cb3a59843417d8" translate="yes" xml:space="preserve">
          <source>A RWMutex must not be copied after first use.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a44a812184753ee800df2d3024080a1d07ae0b6" translate="yes" xml:space="preserve">
          <source>A Rand is a source of random numbers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6beab053e966a50e6a7d98a758b86f986af4670" translate="yes" xml:space="preserve">
          <source>A RangeStmt represents a for statement with a range clause.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5fca0333648aed85f5f684d09865e5a2e91742f5" translate="yes" xml:space="preserve">
          <source>A Rat represents a quotient a/b of arbitrary precision. The zero value for a Rat represents the value 0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="315d29aa160f5e0113bda9fb7a05adf019e99e29" translate="yes" xml:space="preserve">
          <source>A RawConn is a raw network connection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1eecc4b388581b7f5af4d0ab92eb3236267e13d7" translate="yes" xml:space="preserve">
          <source>A RawValue represents an undecoded ASN.1 object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1fe251d5b99328d7ccb132b5e39275c6ea7e2859" translate="yes" xml:space="preserve">
          <source>A ReadError reports an error encountered while reading input.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce0546f89447c6257999da2fc59e1b4d0147b988" translate="yes" xml:space="preserve">
          <source>A Reader allows reading Entry structures from a DWARF &amp;ldquo;info&amp;rdquo; section. The Entry structures are arranged in a tree. The Reader's Next function return successive entries from a pre-order traversal of the tree. If an entry has children, its Children field will be true, and the children follow, terminated by an Entry with Tag 0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e809231f8a76ae01fe2ed56c6d3370831ff40ccc" translate="yes" xml:space="preserve">
          <source>A Reader implements convenience methods for reading requests or responses from a text protocol network connection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a71eb177c7cde85aefa079833b1150b094f2eaa" translate="yes" xml:space="preserve">
          <source>A Reader implements the io.Reader, io.ReaderAt, io.Seeker, io.WriterTo, io.ByteScanner, and io.RuneScanner interfaces by reading from a string. The zero value for Reader operates like a Reader of an empty string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b153ea88d2a4e327aa4d80158226897a894e3c2a" translate="yes" xml:space="preserve">
          <source>A Reader implements the io.Reader, io.ReaderAt, io.WriterTo, io.Seeker, io.ByteScanner, and io.RuneScanner interfaces by reading from a byte slice. Unlike a Buffer, a Reader is read-only and supports seeking. The zero value for Reader operates like a Reader of an empty slice.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b70395118bec2588dcb78aa1e8af11b79076bd1c" translate="yes" xml:space="preserve">
          <source>A Reader is an io.Reader that can be read to retrieve uncompressed data from a gzip-format compressed file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6574274b38b0f064ff925e7d46ed95bf437111cb" translate="yes" xml:space="preserve">
          <source>A Reader reads records from a CSV-encoded file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08a6e31825ec2c6300d4782fb0ecf058c691b2e5" translate="yes" xml:space="preserve">
          <source>A Rectangle contains the points with Min.X &amp;lt;= X &amp;lt; Max.X, Min.Y &amp;lt;= Y &amp;lt; Max.Y. It is well-formed if Min.X &amp;lt;= Max.X and likewise for Y. Points are always well-formed. A rectangle's methods always return well-formed outputs for well-formed inputs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="962040a6acd2d013b3cda593f3034f3a6e474cf7" translate="yes" xml:space="preserve">
          <source>A Rectangle is also an Image whose bounds are the rectangle itself. At returns color.Opaque for points in the rectangle and color.Transparent otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b5c4eab8e85410a86bdda5dd0182e066f957435" translate="yes" xml:space="preserve">
          <source>A Regexp is a node in a regular expression syntax tree.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ab3983fd4df5bd9eb6fbef83870bc471fcc712a" translate="yes" xml:space="preserve">
          <source>A Reloc represents a Mach-O relocation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="067dded24908e2b71937b6360c614e63e5a89809" translate="yes" xml:space="preserve">
          <source>A Request represents an HTTP request received by a server or to be sent by a client.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e19cc3384dc7e2b431205075ec657c82d42a386" translate="yes" xml:space="preserve">
          <source>A Resolver looks up names and numbers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7410206ba9c0a6090136ffb7158eee5593d03484" translate="yes" xml:space="preserve">
          <source>A ResponseWriter interface is used by an HTTP handler to construct an HTTP response.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ace923e0c585e748ba7f88a0368066757a465f2f" translate="yes" xml:space="preserve">
          <source>A ResponseWriter may not be used after the Handler.ServeHTTP method has returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ac628cf85fa1a2f24b07d813066e77d55459bb7" translate="yes" xml:space="preserve">
          <source>A Result summarizes an executed SQL command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7bc644e767da0cf2307a7193ba0f77e968aacb8" translate="yes" xml:space="preserve">
          <source>A ReturnStmt node represents a return statement.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae584cddb6e2177562bbac06546bb6633cf3019c" translate="yes" xml:space="preserve">
          <source>A Ring is an element of a circular list, or ring. Rings do not have a beginning or end; a pointer to any ring element serves as reference to the entire ring. Empty rings are represented as nil Ring pointers. The zero value for a Ring is a one-element ring with a nil Value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6d02af23b0348ce707674db889668b02af5f81f" translate="yes" xml:space="preserve">
          <source>A RoundTripper must be safe for concurrent use by multiple goroutines.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45bdd1ec7ab84bc9a9dd66a47c77c47f5715b87c" translate="yes" xml:space="preserve">
          <source>A Rpath represents a Mach-O rpath command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15e64f8a4c2bf9029f12ea9d5e18a15877b7259c" translate="yes" xml:space="preserve">
          <source>A RpathCmd is a Mach-O rpath command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="595b91253eb5007d2507eef2c21f6da710950881" translate="yes" xml:space="preserve">
          <source>A Scanner holds the scanner's internal state while processing a given text. It can be allocated as part of another data structure but must be initialized via Init before use.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c32b624023b90bc977bdef0e2337de1ae290d39" translate="yes" xml:space="preserve">
          <source>A Scanner implements reading of Unicode characters and tokens from an io.Reader.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c61b7eab5a0a8103327245dad118019da84e7373" translate="yes" xml:space="preserve">
          <source>A Scope maintains a set of objects and links to its containing (parent) and contained (children) scopes. Objects may be inserted and looked up by name. The zero value for Scope is a ready-to-use empty scope.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5dea048da594f1517d32f220dcf473582500285f" translate="yes" xml:space="preserve">
          <source>A Scope maintains the set of named language entities declared in the scope and a link to the immediately surrounding (outer) scope.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="183af69f58c3ed305371155a329e5a16e682146d" translate="yes" xml:space="preserve">
          <source>A Section represents a single section in a Plan 9 a.out file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48d020e310b3bb2149d4b253ff0bb1536d07bfa4" translate="yes" xml:space="preserve">
          <source>A Section represents a single section in an ELF file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3fa1bd710855f38346943cd85be2ea9687a123fb" translate="yes" xml:space="preserve">
          <source>A Section32 is a 32-bit Mach-O section header.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="471e980a91ca2daa3de25530d4f089577d149d78" translate="yes" xml:space="preserve">
          <source>A Section64 is a 64-bit Mach-O section header.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="781b43f0370a047bcf6b158f7205d75f7f66770a" translate="yes" xml:space="preserve">
          <source>A SectionHeader represents a single ELF section header.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07693bb5a841d984aad8deaaf713cc85716d2183" translate="yes" xml:space="preserve">
          <source>A SectionHeader represents a single Plan 9 a.out section header. This structure doesn't exist on-disk, but eases navigation through the object file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd1c503cb0621b37172392fa6c3e6e663892bdb9" translate="yes" xml:space="preserve">
          <source>A Segment represents a Mach-O 32-bit or 64-bit load segment command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18f470aa3a2494edbc8228ed690b8ca00e2cd060" translate="yes" xml:space="preserve">
          <source>A Segment32 is a 32-bit Mach-O segment load command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b49f656e7f0d6c4de103c56d20f5a3e5d46474b4" translate="yes" xml:space="preserve">
          <source>A Segment64 is a 64-bit Mach-O segment load command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c1bca7547e5328a2c0e7d510860150c5b02204d" translate="yes" xml:space="preserve">
          <source>A SegmentHeader is the header for a Mach-O 32-bit or 64-bit load segment command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d907e1938e53c3566dbf156d7cc0eaeb9f4968d" translate="yes" xml:space="preserve">
          <source>A SelectCase describes a single case in a select operation. The kind of case depends on Dir, the communication direction.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5415c574177ffe2984e71be71022c8ec6f1d638" translate="yes" xml:space="preserve">
          <source>A SelectDir describes the communication direction of a select case.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7cbf8ec346b8e7b76dd78b3b87697c7317615faf" translate="yes" xml:space="preserve">
          <source>A Selection describes a selector expression x.f. For the declarations:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35b647fb865db0783355629fb40dee0621ff1bfa" translate="yes" xml:space="preserve">
          <source>A SelectorExpr node represents an expression followed by a selector.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="639e64492ddcf47a6e3a3dbf49f424478ccc6fd1" translate="yes" xml:space="preserve">
          <source>A SendStmt node represents a send statement.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a812544b1079cbac724176753c97cbdce588634" translate="yes" xml:space="preserve">
          <source>A Server defines parameters for running an HTTP server. The zero value for Server is a valid configuration.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8bbd12c651b1aff76a953db8334d88ca84465ea1" translate="yes" xml:space="preserve">
          <source>A Server is an HTTP server listening on a system-chosen port on the local loopback interface, for use in end-to-end HTTP tests.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aaf263fed591626847e1114341fce50da6dde5fb" translate="yes" xml:space="preserve">
          <source>A ServerCodec implements reading of RPC requests and writing of RPC responses for the server side of an RPC session. The server calls ReadRequestHeader and ReadRequestBody in pairs to read requests from the connection, and it calls WriteResponse to write a response back. The server calls Close when finished with the connection. ReadRequestBody may be called with a nil argument to force the body of the request to be read and discarded. See NewClient's comment for information about concurrent access.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38c132ba907f3f5c1ee1b2d34f64a031db7fb85b" translate="yes" xml:space="preserve">
          <source>A SetupError is the result of an error in the way that check is being used, independent of the functions being tested.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0aaa1aa571361e67fd65645ce946b3e93ab82465" translate="yes" xml:space="preserve">
          <source>A Signal is a number describing a process signal. It implements the os.Signal interface.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04aa060d55406e6823576f5f8a2fed5ce02d26bc" translate="yes" xml:space="preserve">
          <source>A Signal represents an operating system signal. The usual underlying implementation is operating system-dependent: on Unix it is syscall.Signal.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e443d13756dc18de92ff330dd034a22130131309" translate="yes" xml:space="preserve">
          <source>A Signature represents a (non-builtin) function or method type. The receiver is ignored when comparing signatures for identity.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4dded7ba2e7f9fa90c63253a6511fa6ac894ca85" translate="yes" xml:space="preserve">
          <source>A Slice represents a slice type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c662a701f4e4fc76cf429b1959cb955efb9d925" translate="yes" xml:space="preserve">
          <source>A Source represents a source of uniformly-distributed pseudo-random int64 values in the range [0, 1&amp;lt;&amp;lt;63).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf9e74a9757b6a7e7e07d6bcbab6c27faa8392c2" translate="yes" xml:space="preserve">
          <source>A Source64 is a Source that can also generate uniformly-distributed pseudo-random uint64 values in the range [0, 1&amp;lt;&amp;lt;64) directly. If a Rand r's underlying Source s implements Source64, then r.Uint64 returns the result of one call to s.Uint64 instead of making two calls to s.Int63.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd32d7d89b2a30a05c1bb5eebdbd13fc02c7ae72" translate="yes" xml:space="preserve">
          <source>A StackRecord describes a single execution stack.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0008c9536d181c46b815624f062ebf9594778bc" translate="yes" xml:space="preserve">
          <source>A StarExpr node represents an expression of the form &quot;*&quot; Expression. Semantically it could be a unary &quot;*&quot; expression, or a pointer type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c32c7cbdc0d7be886e97676c71afe750a62dcc10" translate="yes" xml:space="preserve">
          <source>A StartElement represents an XML start element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea14341705e92c45b1e240d763674f51e6d52411" translate="yes" xml:space="preserve">
          <source>A Stream represents a stream cipher.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b669677d01d549cc1c73f158a189264271f5702" translate="yes" xml:space="preserve">
          <source>A Struct represents a struct type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28e97007759f43396752d2c0cba6cdef18c34c87" translate="yes" xml:space="preserve">
          <source>A StructField describes a single field in a struct.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ead7ec43f94a3a8ab253c977717cf4787ddce82" translate="yes" xml:space="preserve">
          <source>A StructField represents a field in a struct, union, or C++ class type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e939c47706fd4781a8efbe363efe9716fe2daf90" translate="yes" xml:space="preserve">
          <source>A StructTag is the tag string in a struct field.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8da8d40653f50508ed698ba3d6f35b64ae2e53e8" translate="yes" xml:space="preserve">
          <source>A StructType node represents a struct type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fea2245244b33d39ec55d7990a22c73eb242ee3a" translate="yes" xml:space="preserve">
          <source>A StructType represents a struct, union, or C++ class type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29e34b1f6b5269b0f812703eca0e45a915de37c5" translate="yes" xml:space="preserve">
          <source>A StructuralError is returned when the bzip2 data is found to be syntactically invalid.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67e45ed1c74af0e85d151af6cd24db62c07cd291" translate="yes" xml:space="preserve">
          <source>A StructuralError suggests that the ASN.1 data is valid, but the Go type which is receiving it doesn't match.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3db304c4567f1e28ed11e586a2eabe4ea9391a66" translate="yes" xml:space="preserve">
          <source>A SwitchStmt node represents an expression switch statement.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1015b6c5506bb94ff4d458f55084fdca10ca635b" translate="yes" xml:space="preserve">
          <source>A Sym represents a single symbol table entry.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98cd40470d9a8f6a0f6bdd00fde0756e94d9ebd2" translate="yes" xml:space="preserve">
          <source>A Symbol is a Mach-O 32-bit or 64-bit symbol table entry.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a671a2dbcf33c7f008c2e71b0630c5384653e90b" translate="yes" xml:space="preserve">
          <source>A Symbol is a pointer to a variable or function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="789708f9c12833d6c1014d903e31cb12724b33b8" translate="yes" xml:space="preserve">
          <source>A Symbol represents an entry in a Plan 9 a.out symbol table section.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95c21f4091681c4ef2bad327d6377640dd105e88" translate="yes" xml:space="preserve">
          <source>A Symbol represents an entry in an ELF symbol table section.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd868f6dc8223d50a3f572a145afcdd64d4e3ae6" translate="yes" xml:space="preserve">
          <source>A Symtab represents a Mach-O symbol table command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0fd4f1bb011d721fb420bad06209aa869812c00d" translate="yes" xml:space="preserve">
          <source>A SymtabCmd is a Mach-O symbol table command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef2a77a6f406a105103b5a2c79bd38d08956b562" translate="yes" xml:space="preserve">
          <source>A SyntaxError is a description of a JSON syntax error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ce23a19325afbda7b493c3ee485c5402ddf0cba" translate="yes" xml:space="preserve">
          <source>A SyntaxError represents a syntax error in the XML input stream.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6563aa54653e994476c1c43bdfb9b8d0eb52cc1" translate="yes" xml:space="preserve">
          <source>A SyntaxError suggests that the ASN.1 data is invalid.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94dc0c91ffcffa6687bf49f7b86aa6e830c1c493" translate="yes" xml:space="preserve">
          <source>A Tag is the classification (the type) of an Entry.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef54809c1f809bbc81d739791141ba6bfe3195c9" translate="yes" xml:space="preserve">
          <source>A TagPathError represents an error in the unmarshaling process caused by the use of field tags with conflicting paths.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cfb867f01ef9d999c5c50506e719de9fc48804c0" translate="yes" xml:space="preserve">
          <source>A Thread is a Mach-O thread state command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3dbde58d5e793d50fa510fe7375c9fb3e32dfb16" translate="yes" xml:space="preserve">
          <source>A Ticker holds a channel that delivers `ticks' of a clock at intervals.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f209a91b1ce9aba11e7fca4188986d7bf919dd4" translate="yes" xml:space="preserve">
          <source>A Time represents an instant in time with nanosecond precision.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b9cb2430925b635deca781b19b6624315647aa5" translate="yes" xml:space="preserve">
          <source>A Time value can be used by multiple goroutines simultaneously except that the methods GobDecode, UnmarshalBinary, UnmarshalJSON and UnmarshalText are not concurrency-safe.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cdc605aba7b8cec3ee2c08a379778b18a8f897da" translate="yes" xml:space="preserve">
          <source>A Token holds a value of one of these types:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2538ba1b9edad5eed06dfc85f6e5a8fed234c97" translate="yes" xml:space="preserve">
          <source>A Token is an interface holding one of the token types: StartElement, EndElement, CharData, Comment, ProcInst, or Directive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75ea4973f3f3069985d057a27a7af063dfd40223" translate="yes" xml:space="preserve">
          <source>A TokenReader is anything that can decode a stream of XML tokens, including a Decoder.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef695f4304becb34a738bb8be42552a70be630fa" translate="yes" xml:space="preserve">
          <source>A Transport is a low-level primitive for making HTTP and HTTPS requests. For high-level functionality, such as cookies and redirects, see Client.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="205d177ec942d6309a89adfffdf8a8e4074a7f7b" translate="yes" xml:space="preserve">
          <source>A Tuple represents an ordered list of variables; a nil *Tuple is a valid (empty) tuple. Tuples are used as components of signatures and to represent the type of multiple assignments; they are not first class types of Go.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14a29b6908dc38e24f0ef8e838d5a62da69e0160" translate="yes" xml:space="preserve">
          <source>A Type conventionally represents a pointer to any of the specific Type structures (CharType, StructType, etc.).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd759fa17460fa844a3ecf99a0899b837ea8810c" translate="yes" xml:space="preserve">
          <source>A Type is the Mach-O file type, e.g. an object file, executable, or dynamic library.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7532bdeeed1f2b0e0e0f4a6bd401f739887f16a6" translate="yes" xml:space="preserve">
          <source>A Type represents a type of Go. All types implement the Type interface.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7719074f08defb90cf90e8a5c8093d6476b4e065" translate="yes" xml:space="preserve">
          <source>A TypeAssertExpr node represents an expression followed by a type assertion.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7ee401043d765de08c455c9883bfd1233d24461" translate="yes" xml:space="preserve">
          <source>A TypeAssertionError explains a failed type assertion.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bae8ad7f1e3b4dc01bc94d3eb7567f3b017542b9" translate="yes" xml:space="preserve">
          <source>A TypeName represents a name for a (defined or alias) type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d9b19b626ba29ca522df11faf9d4d8dfae59037" translate="yes" xml:space="preserve">
          <source>A TypeSpec node represents a type declaration (TypeSpec production).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d788b79782d20ca5644b516cf51099212dd89634" translate="yes" xml:space="preserve">
          <source>A TypedefType represents a named type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a7264b7221a5f1d236f683a66cc15a2dd787040" translate="yes" xml:space="preserve">
          <source>A URL represents a parsed URL (technically, a URI reference).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad174328a1ff4a8b79959dd713d7b3d469c42e43" translate="yes" xml:space="preserve">
          <source>A UcharType represents an unsigned character type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e89dd3d467f282d2875f2c6ed05833cce1e25ec" translate="yes" xml:space="preserve">
          <source>A UintType represents an unsigned integer type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1738f8b111b46e92286205e5eb8213ffeca4422" translate="yes" xml:space="preserve">
          <source>A UnaryExpr node represents a unary expression. Unary &quot;*&quot; expressions are represented via StarExpr nodes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3bbaa096ad1d0fa36610df8d2e4300b924364ad4" translate="yes" xml:space="preserve">
          <source>A Value can be used concurrently by multiple goroutines provided that the underlying Go value can be used concurrently for the equivalent direct operations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c45c278af71e2d7167507a12e5fa02bf92962a49" translate="yes" xml:space="preserve">
          <source>A Value must not be copied after first use.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="518c031b906d8366c9070eedabcd5d99e9858715" translate="yes" xml:space="preserve">
          <source>A Value provides an atomic load and store of a consistently typed value. The zero value for a Value returns nil from Load. Once Store has been called, a Value must not be copied.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="704872c27dd11d1ea76e6e4ee6bb7625a22ead66" translate="yes" xml:space="preserve">
          <source>A Value represents the value of a Go constant.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35a6c26e4d0d39784db5b414382430945210b01d" translate="yes" xml:space="preserve">
          <source>A ValueError occurs when a Value method is invoked on a Value that does not support it. Such cases are documented in the description of each method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="211fb5033eea94f990c18370408afc6e4744bebf" translate="yes" xml:space="preserve">
          <source>A ValueSpec node represents a constant or variable declaration (ConstSpec or VarSpec production).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f61d7e37b3871edd50ca3a74b20b5673f75481c" translate="yes" xml:space="preserve">
          <source>A Variable represents a declared variable (including function parameters and results, and struct fields).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc9292dda86c62967d8590b7f8274a4d6182bbac" translate="yes" xml:space="preserve">
          <source>A Visitor's Visit method is invoked for each node encountered by Walk. If the result visitor w is not nil, Walk visits each of the children of node with the visitor w, followed by a call of w.Visit(nil).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="076ae0767034cf704db98525420b8ce59d22a34b" translate="yes" xml:space="preserve">
          <source>A VoidType represents the C void type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85b56369886ad646746df4d1fecb50f680892b5f" translate="yes" xml:space="preserve">
          <source>A WaitGroup must not be copied after first use.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a86443f6e4c40a98aca5444ee468b15ace4abb9" translate="yes" xml:space="preserve">
          <source>A WaitGroup waits for a collection of goroutines to finish. The main goroutine calls Add to set the number of goroutines to wait for. Then each of the goroutines runs and calls Done when finished. At the same time, Wait can be used to block until all goroutines have finished.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ca4582ad63d50714d5b43b34c6ab0dd13e67819" translate="yes" xml:space="preserve">
          <source>A Weekday specifies a day of the week (Sunday = 0, ...).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d03ea25e0944467c9c41cc98d93b797a4d51dd5d" translate="yes" xml:space="preserve">
          <source>A Word represents a single digit of a multi-precision unsigned integer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62446931282b9ac19aa0593be90e15a541acfc8a" translate="yes" xml:space="preserve">
          <source>A WordDecoder decodes MIME headers containing RFC 2047 encoded-words.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3473f163231f1c313bb3aa97735626a5a618dbb5" translate="yes" xml:space="preserve">
          <source>A WordEncoder is an RFC 2047 encoded-word encoder.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe9276a229c981418c6948f78d1275b1c9fd2413" translate="yes" xml:space="preserve">
          <source>A WriteError reports an error encountered while writing output.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="921437c78574f3763c875d8ad66a7a5155e90433" translate="yes" xml:space="preserve">
          <source>A Writer generates multipart messages.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b5e497607507a45b86dfd8d4d2fb980d92c3ad6" translate="yes" xml:space="preserve">
          <source>A Writer implements convenience methods for writing requests or responses to a text protocol network connection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dee10f306a0eaf4b16b88e2100cc5d77b7c0bc69" translate="yes" xml:space="preserve">
          <source>A Writer is a connection to a syslog server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4363ba1b66a07da1208c09d9517f251ba73b90f3" translate="yes" xml:space="preserve">
          <source>A Writer is a filter that inserts padding around tab-delimited columns in its input to align them in the output.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16a9d12a37b527fe37685b62e1a1f5da51add8c1" translate="yes" xml:space="preserve">
          <source>A Writer is a quoted-printable writer that implements io.WriteCloser.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b5fc9bd20310af4833aa25ebe029221c38240f6" translate="yes" xml:space="preserve">
          <source>A Writer is an io.WriteCloser. Writes to a Writer are compressed and written to w.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03cec7474cfa008a6959e6f93e904ad74a1674d1" translate="yes" xml:space="preserve">
          <source>A Writer must be initialized with a call to Init. The first parameter (output) specifies the filter output. The remaining parameters control the formatting:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5465ae3ddfd70d1be5f5967ba8de154a01cefd5b" translate="yes" xml:space="preserve">
          <source>A Writer takes data written to it and writes the compressed form of that data to an underlying writer (see NewWriter).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="410a82fcce98e6fc886559574359b0fbe2e5eb6f" translate="yes" xml:space="preserve">
          <source>A Writer writes records using CSV encoding.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48e7df2a646f4525d607dc7a30a82a5f83098c9f" translate="yes" xml:space="preserve">
          <source>A Zipf generates Zipf distributed variates.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0760dc9daa80e90d6d4229331a1af0e6683b9072" translate="yes" xml:space="preserve">
          <source>A benchmark ends when its Benchmark function returns or calls any of the methods FailNow, Fatal, Fatalf, SkipNow, Skip, or Skipf. Those methods must be called only from the goroutine running the Benchmark function. The other reporting methods, such as the variations of Log and Error, may be called simultaneously from multiple goroutines.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3eb7ac8d55d19c14bff60fcd03e9b73b76f2c42e" translate="yes" xml:space="preserve">
          <source>A boolean is encoded within an unsigned integer: 0 for false, 1 for true.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f01fce8b92a9885648984ba16014b68a79d5e744" translate="yes" xml:space="preserve">
          <source>A build constraint is evaluated as the OR of space-separated options. Each option evaluates as the AND of its comma-separated terms. Each term consists of letters, digits, underscores, and dots. A term may be negated with a preceding !. For example, the build constraint:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65b5e15b8c1208e1ebae02236d460f4be7aeb5f2" translate="yes" xml:space="preserve">
          <source>A build constraint, also known as a build tag, is a line comment that begins</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9e79cabff6c03ded7ab173d941b59e4c2fcc202" translate="yes" xml:space="preserve">
          <source>A call to ValueOf returns a Value representing the run-time data. Zero takes a Type and returns a Value representing a zero value for that type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36fdba5c705a01b336f31fab629a866bbfaa8f78" translate="yes" xml:space="preserve">
          <source>A canonical name is the final name after following zero or more CNAME records. LookupCNAME does not return an error if host does not contain DNS &quot;CNAME&quot; records, as long as host resolves to address records.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7fc23252b8a8444204611f4f0f8eaee345d5cd3" translate="yes" xml:space="preserve">
          <source>A client wishing to use the service establishes a connection and then invokes NewClient on the connection. The convenience function Dial (DialHTTP) performs both steps for a raw network connection (an HTTP connection). The resulting Client object has two methods, Call and Go, that specify the service and method to call, a pointer containing the arguments, and a pointer to receive the result parameters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="260ac7a6348d4616a04fa117e8bbf40248a2aac8" translate="yes" xml:space="preserve">
          <source>A comment group g is associated with a node n if:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6201e2e8d36ed27d9f67af4f5dbcdce26a23ab67" translate="yes" xml:space="preserve">
          <source>A common idiom is to merge the check for nil return with the check that the value has the expected dynamic type, as in:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba5d21f25f75193bb1322654b338552fadea1382" translate="yes" xml:space="preserve">
          <source>A common use of Search is to find the index i for a value x in a sorted, indexable data structure such as an array or slice. In this case, the argument f, typically a closure, captures the value to be searched for, and how the data structure is indexed and ordered.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33d3c617a7ed73a514301da6251e17e5ab959ed1" translate="yes" xml:space="preserve">
          <source>A csv file contains zero or more records of one or more fields per record. Each record is separated by the newline character. The final record may optionally be followed by a newline character.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7caa085f191233dadd6ec8fb642202edd158870" translate="yes" xml:space="preserve">
          <source>A daylight savings time transition skips or repeats times. For example, in the United States, March 13, 2011 2:15am never occurred, while November 6, 2011 1:15am occurred twice. In such cases, the choice of time zone, and therefore the time, is not well-defined. Date returns a time that is correct in one of the two zones involved in the transition, but it does not guarantee which.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57af6fb36a3adf8a96b4592de464282206245987" translate="yes" xml:space="preserve">
          <source>A deadline is an absolute time after which I/O operations fail with an error instead of blocking. The deadline applies to all future and pending I/O, not just the immediately following call to Read or Write. After a deadline has been exceeded, the connection can be refreshed by setting a deadline in the future.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b53aa31dad4e2a94a06aac6f9f3bda2dcb94ebf7" translate="yes" xml:space="preserve">
          <source>A decimal point followed by one or more zeros represents a fractional second, printed to the given number of decimal places. A decimal point followed by one or more nines represents a fractional second, printed to the given number of decimal places, with trailing zeros removed. When parsing (only), the input may contain a fractional second field immediately after the seconds field, even if the layout does not signify its presence. In that case a decimal point followed by a maximal series of digits is parsed as a fractional second.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4eb1aaf5c04383e503526b587e3b53b0e3115f2d" translate="yes" xml:space="preserve">
          <source>A different subset of the mode bits are used, depending on the operating system.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8aee15dc1cb6f51da0900bf8773758523f3cab92" translate="yes" xml:space="preserve">
          <source>A file may have multiple build constraints. The overall constraint is the AND of the individual constraints. That is, the build constraints:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5aebd71375f9513b2e98191249a7900f2298da7" translate="yes" xml:space="preserve">
          <source>A finalizer may run as soon as an object becomes unreachable. In order to use finalizers correctly, the program must ensure that the object is reachable until it is no longer required. Objects stored in global variables, or that can be found by tracing pointers from a global variable, are reachable. For other objects, pass the object to a call of the KeepAlive function to mark the last point in the function where the object must be reachable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da1a6a99a449a5ea3376991cc3b251fd40ae595a" translate="yes" xml:space="preserve">
          <source>A fractional second is represented by adding a period and zeros to the end of the seconds section of layout string, as in &quot;15:04:05.000&quot; to format a time stamp with millisecond precision.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e965d0f5f3f1435750b42e46c8ff14170f8ed15c" translate="yes" xml:space="preserve">
          <source>A fuller picture</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2437bd04b669e4858c568d7a7b556cfc526d919f" translate="yes" xml:space="preserve">
          <source>A goroutine should call LockOSThread before calling OS services or non-Go library functions that depend on per-thread state.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4dcdf2a31c8cc2a191ea807a386fd6fa6b19641b" translate="yes" xml:space="preserve">
          <source>A heap is a common way to implement a priority queue. To build a priority queue, implement the Heap interface with the (negative) priority as the ordering for the Less method, so Push adds items while Pop removes the highest-priority item from the queue. The Examples include such an implementation; the file example_pq_test.go has the complete source.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d16ad196fde70693ff0f37d80fffc0b333fedfdf" translate="yes" xml:space="preserve">
          <source>A line consisting of only white space is never continued.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="afc9f8d3242f5eaf04e2e9b3c363b4deec607569" translate="yes" xml:space="preserve">
          <source>A list of cipher suite IDs that are, or have been, implemented by this package.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd3ef60e1f91534e9d091bd4d798b2f024b79ceb" translate="yes" xml:space="preserve">
          <source>A literal IPv6 address in hostport must be enclosed in square brackets, as in &quot;[::1]:80&quot;, &quot;[::1%lo0]:80&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5dc7cfeeb708df0f962816ce176c0c581f7f3bc1" translate="yes" xml:space="preserve">
          <source>A locked Mutex is not associated with a particular goroutine. It is allowed for one goroutine to lock a Mutex and then arrange for another goroutine to unlock it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac3d8ec28edd54aa88cf818d84291bb78f42ac35" translate="yes" xml:space="preserve">
          <source>A lookup function must be provided for correct module-aware operation. Deprecated: If lookup is nil, for backwards-compatibility, the importer will attempt to resolve imports in the $GOPATH workspace.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4af7a8e5ef9812183582f7353a58a98b1bf43580" translate="yes" xml:space="preserve">
          <source>A missing element or empty attribute value will be unmarshaled as a zero value. If the field is a slice, a zero value will be appended to the field. Otherwise, the field will be set to its zero value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="facf040ac7eba8fb44518815fa41c78439754caa" translate="yes" xml:space="preserve">
          <source>A mode value is a set of flags (or 0). They control scanner behavior.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25cf3a2ce55598fd47c06f8dc8fba0d37cd2cc75" translate="yes" xml:space="preserve">
          <source>A nil *Resolver is equivalent to a zero Resolver.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9f2c7f03c9badde39c7a80393c1376e7c03c61a" translate="yes" xml:space="preserve">
          <source>A nil URL and nil error are returned if no proxy is defined in the environment, or a proxy should not be used for the given request, as defined by NO_PROXY.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eab5d59cf31afe135bcedd98e1fb7a9d4aa7fe2b" translate="yes" xml:space="preserve">
          <source>A non-nil FieldFilter f may be provided to control the output: struct fields for which f(fieldname, fieldvalue) is true are printed; all others are filtered from the output. Unexported struct fields are never printed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dad360f25cca4579e42ac746bdde335602ae158f" translate="yes" xml:space="preserve">
          <source>A nonzero finite Float represents a multi-precision floating point number</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67f20c1e684209c8ed072b03f5dbc6b88dfcdb75" translate="yes" xml:space="preserve">
          <source>A note about ZIP64:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="567bb53b185e88e525e4138c042b8ddb8af9e0fd" translate="yes" xml:space="preserve">
          <source>A numeric netdns setting, as in GODEBUG=netdns=1, causes the resolver to print debugging information about its decisions. To force a particular resolver while also printing debugging information, join the two settings by a plus sign, as in GODEBUG=netdns=go+1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1e9d7b7caa6b6f7b48c88742eade61d0fb9b1a3" translate="yes" xml:space="preserve">
          <source>A package is complete if its scope contains (at least) all exported objects; otherwise it is incomplete.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2eb8ed0def3b86fafe13f7d6fcbec9f7035334a" translate="yes" xml:space="preserve">
          <source>A pipeline inside an action may initialize a variable to capture the result. The initialization has syntax</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="159568cd8af281aa06ef8c37825fa46265e15546" translate="yes" xml:space="preserve">
          <source>A pipeline is a possibly chained sequence of &quot;commands&quot;. A command is a simple value (argument) or a function or method call, possibly with multiple arguments:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37a982db72ea1fb9ba66b22f1af9be32523e2a43" translate="yes" xml:space="preserve">
          <source>A pipeline may be &quot;chained&quot; by separating a sequence of commands with pipeline characters '|'. In a chained pipeline, the result of each command is passed as the last argument of the following command. The output of the final command in the pipeline is the value of the pipeline.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e435d830501b57692560d08004b34491160b2337" translate="yes" xml:space="preserve">
          <source>A pipelined server can use the same calls to ensure that responses computed in parallel are written in the correct order.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c49361545d95418f04cbcdcf2b2ab41b7a40c811" translate="yes" xml:space="preserve">
          <source>A plugin is a Go main package with exported functions and variables that has been built with:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81f9a7dada15598723e182d4050df9eb32499489" translate="yes" xml:space="preserve">
          <source>A preset dictionary can be used to improve the compression ratio. The downside to using a dictionary is that the compressor and decompressor must agree in advance what dictionary to use.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="947f86e05fc12ea1145d41f40f9588a79a2d1df5" translate="yes" xml:space="preserve">
          <source>A public suffix list implementation is in the package golang.org/x/net/publicsuffix.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5a4f3b805b19490b13c81014b70583343cfccf0" translate="yes" xml:space="preserve">
          <source>A region is for logging a time interval during a goroutine's execution. By definition, a region starts and ends in the same goroutine. Regions can be nested to represent subintervals. For example, the following code records four regions in the execution trace to trace the durations of sequential steps in a cappuccino making operation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19e9496f5feeba3316d5f9c892e638126465f862" translate="yes" xml:space="preserve">
          <source>A sample benchmark function looks like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64d7f2b7d8c639b9703cb9c512522716406ca71c" translate="yes" xml:space="preserve">
          <source>A segment of text may be escaped by bracketing it with Escape characters. The tabwriter passes escaped text segments through unchanged. In particular, it does not interpret any tabs or line breaks within the segment. If the StripEscape flag is set, the Escape characters are stripped from the output; otherwise they are passed through as well. For the purpose of formatting, the width of the escaped text is always computed excluding the Escape characters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cbf67455e625a319934ff3db6f4e7765c384f850" translate="yes" xml:space="preserve">
          <source>A server implementation will often provide a simple, type-safe wrapper for the client.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5fe1bd315f5a675d22edfe1287dcef7a18f2ebf5" translate="yes" xml:space="preserve">
          <source>A set of constants for precedence-based expression parsing. Non-operators have lowest precedence, followed by operators starting with precedence 1 up to unary operators. The highest precedence serves as &quot;catch-all&quot; precedence for selector, indexing, and other operator and delimiter tokens.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3f475688772a3727780325202b67ed9bcfba627" translate="yes" xml:space="preserve">
          <source>A signed integer, i, is encoded within an unsigned integer, u. Within u, bits 1 upward contain the value; bit 0 says whether they should be complemented upon receipt. The encode algorithm looks like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c6185e40ebf683daf5fbd59be060f229f28d552" translate="yes" xml:space="preserve">
          <source>A simple implementation of TestMain is:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="afdf12aec718dd4999cbe7ecda6d1bb5b3e50e14" translate="yes" xml:space="preserve">
          <source>A simple test function looks like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92ea7ad194070845bcee235ee4cd7d7c3a7afe32" translate="yes" xml:space="preserve">
          <source>A simple way to create wrapped errors is to call fmt.Errorf and apply the %w verb to the error argument:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69d7e4afbc359dbfa554c3437471beab838e64ea" translate="yes" xml:space="preserve">
          <source>A single goroutine runs all finalizers for a program, sequentially. If a finalizer must run for a long time, it should do so by starting a new goroutine.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="998765c2e36e31f6015a02a4149186686a19882c" translate="yes" xml:space="preserve">
          <source>A source position is represented by a Position value. A position is valid if Line &amp;gt; 0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf46d56633e189cdf4290bc8e9e419edaafcd303" translate="yes" xml:space="preserve">
          <source>A span of indented lines is converted into a &amp;lt;pre&amp;gt; block, with the common indent prefix removed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23ed42dff836502e8a3c882497b88d19de475752" translate="yes" xml:space="preserve">
          <source>A special Unknown value may be used when a value is unknown due to an error. Operations on unknown values produce unknown values unless specified otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39c3619132ff27692be31f7370bad818ba2f7ae2" translate="yes" xml:space="preserve">
          <source>A stream of gobs is self-describing. Each data item in the stream is preceded by a specification of its type, expressed in terms of a small set of predefined types. Pointers are not transmitted, but the things they point to are transmitted; that is, the values are flattened. Nil pointers are not permitted, as they have no value. Recursive types work fine, but recursive values (data with cycles) are problematic. This may change.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71de669748bcf101bd8bd68f5e95383f0e17c03d" translate="yes" xml:space="preserve">
          <source>A subbenchmark is like any other benchmark. A benchmark that calls Run at least once will not be measured itself and will be called once with N=1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7c8c5a16c89f340d07d186a6221473d049ea1a6" translate="yes" xml:space="preserve">
          <source>A successful Copy returns err == nil, not err == EOF. Because Copy is defined to read from src until EOF, it does not treat an EOF from Read as an error to be reported.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b2067ff10a529e4ca642d4b746a82a3c56ab2f4" translate="yes" xml:space="preserve">
          <source>A task is a higher-level component that aids tracing of logical operations such as an RPC request, an HTTP request, or an interesting local operation which may require multiple goroutines working together. Since tasks can involve multiple goroutines, they are tracked via a context.Context object. NewTask creates a new task and embeds it in the returned context.Context object. Log messages and regions are attached to the task, if any, in the Context passed to Log and WithRegion.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ee23ed297d8a4efee537f23283818e2de1f476f" translate="yes" xml:space="preserve">
          <source>A template may be executed directly or through ExecuteTemplate, which executes an associated template identified by name. To invoke our example above, we might write,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ee08d9d80bebe4fc53065d91023da1f3f13f8ce" translate="yes" xml:space="preserve">
          <source>A template may use a template invocation to instantiate another associated template; see the explanation of the &quot;template&quot; action above. The name must be that of a template associated with the template that contains the invocation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="efdc8c7bbd155802920fdf599596729921196f95" translate="yes" xml:space="preserve">
          <source>A test ends when its Test function returns or calls any of the methods FailNow, Fatal, Fatalf, SkipNow, Skip, or Skipf. Those methods, as well as the Parallel method, must be called only from the goroutine running the Test function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8d282a7f8e7544e2aa2bcaa602cc973c7e5c659" translate="yes" xml:space="preserve">
          <source>A transaction must end with a call to Commit or Rollback.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3320956e1450f29dc681f22efeb9962f889d2fa1" translate="yes" xml:space="preserve">
          <source>A type, typically a collection, that satisfies sort.Interface can be sorted by the routines in this package. The methods require that the elements of the collection be enumerated by an integer index.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a26264b4c327dfcbc3830f08e7c5eca9935077d1" translate="yes" xml:space="preserve">
          <source>A uintptr is an integer, not a reference. Converting a Pointer to a uintptr creates an integer value with no pointer semantics. Even if a uintptr holds the address of some object, the garbage collector will not update that uintptr's value if the object moves, nor will that uintptr keep the object from being reclaimed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6357f4b1d95e0ce37eebd11835deedd5ee68808" translate="yes" xml:space="preserve">
          <source>A value can be one of several &quot;attribute classes&quot; defined by DWARF. The Go types corresponding to each class are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ca0e97732ee145c6b13c705a240bbab4a01b83c" translate="yes" xml:space="preserve">
          <source>A variable's scope extends to the &quot;end&quot; action of the control structure (&quot;if&quot;, &quot;with&quot;, or &quot;range&quot;) in which it is declared, or to the end of the template if there is no such control structure. A template invocation does not inherit variables from the point of its invocation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="277f2ef6de143a1e0bb8964486b9103bd5a3dfcf" translate="yes" xml:space="preserve">
          <source>A very simplified example showing where KeepAlive is required:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eebb7aaedcbbc7945cea32525b4cdf890bdf1fc6" translate="yes" xml:space="preserve">
          <source>A wrapped function triggered during a call from Go to JavaScript gets executed on the same goroutine. A wrapped function triggered by JavaScript's event loop gets executed on an extra goroutine. Blocking operations in the wrapped function will block the event loop. As a consequence, if one wrapped function blocks, other wrapped funcs will not be processed. A blocking function should therefore explicitly start a new goroutine.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e11b9a7861656f839cf023235f454d8751a6b44" translate="yes" xml:space="preserve">
          <source>A zero value for t means I/O operations will not time out.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49015c1a0e4eec28a8e64a69c22aab5605a9ed24" translate="yes" xml:space="preserve">
          <source>AEAD is a cipher mode providing authenticated encryption with associated data. For a description of the methodology, see</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6386009a221e1f55418b7cdc3ea6e0081e79ebfc" translate="yes" xml:space="preserve">
          <source>AIX requires a larger stack for syscalls.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a103500548f73a0f49e73232e6ab381788940bd2" translate="yes" xml:space="preserve">
          <source>AOffset returns the index of the first element of A that corresponds to the pixel at (x, y).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3a55e32c78ce3caeb7ecef53c05aa71e685921c" translate="yes" xml:space="preserve">
          <source>ASCII character classes:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dfa0d565701c5ffd212df5f6c41e07c13104217e" translate="yes" xml:space="preserve">
          <source>ASN.1 class types represent the namespace of the tag.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="94a132b5e73edb52effd7e957ed89df7719d6948" translate="yes" xml:space="preserve">
          <source>ASN.1 tags represent the type of the following object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fafb344d4664552bfbe22ad591e49b7c95b5c8a5" translate="yes" xml:space="preserve">
          <source>Abs</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19946b96a18fb5a61fbdcba6ee58a2bae2a9f4fd" translate="yes" xml:space="preserve">
          <source>Abs returns an absolute representation of path. If the path is not absolute it will be joined with the current working directory to turn it into an absolute path. The absolute path name for a given file is not guaranteed to be unique. Abs calls Clean on the result.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98c1dba71e48002668b64c9af03e2c7ed77c3775" translate="yes" xml:space="preserve">
          <source>Abs returns the absolute value (also called the modulus) of x.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea6f0b4dac884978efb8a2a3ce802681b993d2d8" translate="yes" xml:space="preserve">
          <source>Abs returns the absolute value of x.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="852b904fc647c005799087d9e0034bfb32f26290" translate="yes" xml:space="preserve">
          <source>Abs sets z to the (possibly rounded) value |x| (the absolute value of x) and returns z.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3ca403f8d39ff7d494165748328771f2b7bbdb5" translate="yes" xml:space="preserve">
          <source>Abs sets z to |x| (the absolute value of x) and returns z.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae77eeba4d31564d88f515ff5369514989cb2f2d" translate="yes" xml:space="preserve">
          <source>Acc returns the accuracy of x produced by the most recent operation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0362299cc7e336214cb347eec2f94f2bdb92e7da" translate="yes" xml:space="preserve">
          <source>Accept accepts connections on the listener and serves requests for each incoming connection. Accept blocks until the listener returns a non-nil error. The caller typically invokes Accept in a go statement.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57eaa16ddc7c7646a44dc64075488d9952239919" translate="yes" xml:space="preserve">
          <source>Accept accepts connections on the listener and serves requests to DefaultServer for each incoming connection. Accept blocks; the caller typically invokes it in a go statement.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="423f068caff20db5aabcaa680f972ba550429b79" translate="yes" xml:space="preserve">
          <source>Accept implements the Accept method in the Listener interface. Returned connections will be of type *UnixConn.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e027066959a798df007c741aaa3722942174acb" translate="yes" xml:space="preserve">
          <source>Accept implements the Accept method in the Listener interface; it waits for the next call and returns a generic Conn.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f0dc51c4dcc23b2474ab41ecb5ead25a053962d" translate="yes" xml:space="preserve">
          <source>AcceptTCP accepts the next incoming call and returns the new connection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="afbe83d1557a2732b88156a14bcd7fec9705a897" translate="yes" xml:space="preserve">
          <source>AcceptUnix accepts the next incoming call and returns the new connection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1204f16b1e7a74c87931ad0f07bf33ea0b083d5" translate="yes" xml:space="preserve">
          <source>Accuracy describes the rounding error produced by the most recent operation that generated a Float value, relative to the exact value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3a86c10c26f951f6f2f070ab18bc1cb2a65e440" translate="yes" xml:space="preserve">
          <source>Acos</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ec162a3f0eb0d539229eaef831d34b303a9dc5e" translate="yes" xml:space="preserve">
          <source>Acos returns the arccosine, in radians, of x.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a975a4c783d13717e86d77c53ecde8ac7934025" translate="yes" xml:space="preserve">
          <source>Acos returns the inverse cosine of x.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf25bedca9a3b72e65c01ff90e81f6a09baa5d69" translate="yes" xml:space="preserve">
          <source>Acosh</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="473dc4a14e53c4e4b4da1925bd0307c4f77ea728" translate="yes" xml:space="preserve">
          <source>Acosh returns the inverse hyperbolic cosine of x.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34ab3eeafa84c841f51a4ab029c76137c950219d" translate="yes" xml:space="preserve">
          <source>ActionNode holds an action (something bounded by delimiters). Control actions have their own nodes; ActionNode represents simple ones such as field evaluations and parenthesized pipelines.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3cd636a585b20c40ac2df5ffb403e83cb2eef51" translate="yes" xml:space="preserve">
          <source>Actions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e10171b115b80f0812f3bc6096a1b7a8d483bee0" translate="yes" xml:space="preserve">
          <source>Add adds an Error with given position and error message to an ErrorList.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc94957ebb8a3766a3ddd6d8708dd83346338038" translate="yes" xml:space="preserve">
          <source>Add adds delta to the *Int value stored under the given map key.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15b0f7deabf48f6522decffbdc31da06a1ce200f" translate="yes" xml:space="preserve">
          <source>Add adds delta to v.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00d98d0fbeab0413ea8bf940cbb8eed92cb4cf17" translate="yes" xml:space="preserve">
          <source>Add adds delta, which may be negative, to the WaitGroup counter. If the counter becomes zero, all goroutines blocked on Wait are released. If the counter goes negative, Add panics.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06d67ceb15cbe764f4e2559821764917fc9be46e" translate="yes" xml:space="preserve">
          <source>Add adds the current execution stack to the profile, associated with value. Add stores value in an internal map, so value must be suitable for use as a map key and will not be garbage collected until the corresponding call to Remove. Add panics if the profile already contains a stack for value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7fe05fac6821303f4013d3a0551fa7da8da7b91" translate="yes" xml:space="preserve">
          <source>Add adds the key, value pair to the header. It appends to any existing values associated with key.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f1b2275acb843bf0e477760c4f63abe02e338d9" translate="yes" xml:space="preserve">
          <source>Add adds the key, value pair to the header. It appends to any existing values associated with key. The key is case insensitive; it is canonicalized by CanonicalHeaderKey.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0faf3a11d8aff451702ae67094983396accac447" translate="yes" xml:space="preserve">
          <source>Add adds the named field (which should start with a period) to the end of the chain.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="278b0456faaade1119bfe47b6df98c28eccf61ea" translate="yes" xml:space="preserve">
          <source>Add adds the value to key. It appends to any existing values associated with key.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6f60549ee0cfc5f32434c271b42c44b06989961" translate="yes" xml:space="preserve">
          <source>Add returns the rectangle r translated by p.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="585629a6740dccaf70f625ce04affb8226c66b7f" translate="yes" xml:space="preserve">
          <source>Add returns the sum with carry of x, y and carry: sum = x + y + carry. The carry input must be 0 or 1; otherwise the behavior is undefined. The carryOut output is guaranteed to be 0 or 1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0afa824f30d215458f4a419b67e46124f7493469" translate="yes" xml:space="preserve">
          <source>Add returns the time t+d.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c95f0248051392a11a12a05cf81cce547a8b8244" translate="yes" xml:space="preserve">
          <source>Add returns the vector p+q.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba245a71af4ccdd1f591263ac6536305db2bed13" translate="yes" xml:space="preserve">
          <source>Add sets z to the rounded sum x+y and returns z. If z's precision is 0, it is changed to the larger of x's or y's precision before the operation. Rounding is performed according to z's precision and rounding mode; and z's accuracy reports the result error relative to the exact (not rounded) result. Add panics with ErrNaN if x and y are infinities with opposite signs. The value of z is undefined in that case.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00590074ebcc2f548e280599ea5c32c80f81328b" translate="yes" xml:space="preserve">
          <source>Add sets z to the sum x+y and returns z.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19b629dca8e7cec87881e6e14e8d485f3a76d996" translate="yes" xml:space="preserve">
          <source>Add32 returns the sum with carry of x, y and carry: sum = x + y + carry. The carry input must be 0 or 1; otherwise the behavior is undefined. The carryOut output is guaranteed to be 0 or 1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e4e45028b02f584b4a95d4b8950f85261cbe854" translate="yes" xml:space="preserve">
          <source>Add64 returns the sum with carry of x, y and carry: sum = x + y + carry. The carry input must be 0 or 1; otherwise the behavior is undefined. The carryOut output is guaranteed to be 0 or 1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c9c92bcc797de932d07b084cf008348cb858dd9" translate="yes" xml:space="preserve">
          <source>AddCert adds a certificate to a pool.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a9b8624a8f1758a2161fd22c09c59c0e306d4b0" translate="yes" xml:space="preserve">
          <source>AddCookie adds a cookie to the request. Per RFC 6265 section 5.4, AddCookie does not attach more than one Cookie header field. That means all cookies, if any, are written into the same line, separated by semicolon.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e189525dfaea0418dd309a6cb7ebfcae4199a62e" translate="yes" xml:space="preserve">
          <source>AddDate normalizes its result in the same way that Date does, so, for example, adding one month to October 31 yields December 1, the normalized form for November 31.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea940d1bbc1f192f224ace60353e0b1750927e23" translate="yes" xml:space="preserve">
          <source>AddDate returns the time corresponding to adding the given number of years, months, and days to t. For example, AddDate(-1, 2, 3) applied to January 1, 2011 returns March 4, 2010.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de1dbc1a1a38094582ff758395d64a9379927734" translate="yes" xml:space="preserve">
          <source>AddExtensionType sets the MIME type associated with the extension ext to typ. The extension should begin with a leading dot, as in &quot;.html&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f552f87900c0ec0fe5963b96881b2772f3c33e1f" translate="yes" xml:space="preserve">
          <source>AddFile adds a new file with a given filename, base offset, and file size to the file set s and returns the file. Multiple files may have the same name. The base offset must not be smaller than the FileSet's Base(), and size must not be negative. As a special case, if a negative base is provided, the current value of the FileSet's Base() is used instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1fedd35de06c52dffbb471fbdba27aee8feba58b" translate="yes" xml:space="preserve">
          <source>AddFloat adds delta to the *Float value stored under the given map key.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5858ca5305a5b0fe80c5593ab2bd856981293e79" translate="yes" xml:space="preserve">
          <source>AddInt32 atomically adds delta to *addr and returns the new value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c4f53ee7feeae5d257b849acc7471b425441121" translate="yes" xml:space="preserve">
          <source>AddInt64 atomically adds delta to *addr and returns the new value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36840a2c5d6044dbaa823fcba841f49af7e9d928" translate="yes" xml:space="preserve">
          <source>AddLine adds the line offset for a new line. The line offset must be larger than the offset for the previous line and smaller than the file size; otherwise the line offset is ignored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0567d75e1a38f2b988111fee478d46f4c2f3ebb" translate="yes" xml:space="preserve">
          <source>AddLineColumnInfo adds alternative file, line, and column number information for a given file offset. The offset must be larger than the offset for the previously added alternative line info and smaller than the file size; otherwise the information is ignored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac4fdb78ce37a0820e1c7d77936fa4f818920bc5" translate="yes" xml:space="preserve">
          <source>AddLineColumnInfo is typically used to register alternative position information for line directives such as //line filename:line:column.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ffb7d16d246eb3ce399562af53b609c59c5c46e3" translate="yes" xml:space="preserve">
          <source>AddLineInfo is like AddLineColumnInfo with a column = 1 argument. It is here for backward-compatibility for code prior to Go 1.11.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab9c2ef1f35d0ef6c0161dd82448b4d74b1c9558" translate="yes" xml:space="preserve">
          <source>AddMethod adds method m unless it is already in the method list.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44f221eb4e24f17d42e5bea8d5c27e1378d7d1cc" translate="yes" xml:space="preserve">
          <source>AddParseTree adds parse tree for template with given name and associates it with t. If the template does not already exist, it will create a new one. If the template does exist, it will be replaced.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2afd490c78d79c03722b8ea7f5bce321e908078" translate="yes" xml:space="preserve">
          <source>AddParseTree creates a new template with the name and parse tree and associates it with t.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7233a75408cb93190ed8d7f01c6ae4749187bad2" translate="yes" xml:space="preserve">
          <source>AddTypes will add one .debug_types section to the DWARF data. A typical object with DWARF version 4 debug info will have multiple .debug_types sections. The name is used for error reporting only, and serves to distinguish one .debug_types section from another.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7731b23781c2390384d6e6975bfd5e70c3626d3b" translate="yes" xml:space="preserve">
          <source>AddUint32 atomically adds delta to *addr and returns the new value. To subtract a signed positive constant value c from x, do AddUint32(&amp;amp;x, ^uint32(c-1)). In particular, to decrement x, do AddUint32(&amp;amp;x, ^uint32(0)).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d25bd4fd8252711152a39b3307b6d0eea26273a5" translate="yes" xml:space="preserve">
          <source>AddUint64 atomically adds delta to *addr and returns the new value. To subtract a signed positive constant value c from x, do AddUint64(&amp;amp;x, ^uint64(c-1)). In particular, to decrement x, do AddUint64(&amp;amp;x, ^uint64(0)).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="190af1abbf968aed5f57b4bc0b0e928d872bce0e" translate="yes" xml:space="preserve">
          <source>AddUintptr atomically adds delta to *addr and returns the new value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0e76ffa9ef9504f9f128ec85ee5c8a4cf06c03b" translate="yes" xml:space="preserve">
          <source>Adding the file will set the file set's Base() value to base + size + 1 as the minimum base value for the next file. The following relationship exists between a Pos value p for a given file offset offs:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df900036bb7195309dce533c4d0b19c0a6bb6aa8" translate="yes" xml:space="preserve">
          <source>Additional extensions may be handled by clients.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="286cb9fdf0d392fc50790805d404a305f0ef765d" translate="yes" xml:space="preserve">
          <source>Additionally, files containing a certificate and matching private key for the server must be provided. If the certificate is signed by a certificate authority, the certFile should be the concatenation of the server's certificate, any intermediates, and the CA's certificate.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="239d133a84587b1f7b4e745e2f11b398b53b3f15" translate="yes" xml:space="preserve">
          <source>Addr represents a network end point address.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="607466f9e7067a542b3e6feb6ba15f2a6069324c" translate="yes" xml:space="preserve">
          <source>Addr returns a pointer value representing the address of v. It panics if CanAddr() returns false. Addr is typically used to obtain a pointer to a struct field or slice element in order to call a method that requires a pointer receiver.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8172f3ce94b65e80356707d217486354f76500a8" translate="yes" xml:space="preserve">
          <source>Addr returns the listener's network address, a *TCPAddr. The Addr returned is shared by all invocations of Addr, so do not modify it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5668cd5de55531b485b11a427f6aafc99df086b" translate="yes" xml:space="preserve">
          <source>Addr returns the listener's network address. The Addr returned is shared by all invocations of Addr, so do not modify it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd1232cd9a9fc08fd91a563f464ef4974a2c19c0" translate="yes" xml:space="preserve">
          <source>Address represents a single mail address. An address such as &quot;Barry Gibbs &amp;lt;bg@example.com&amp;gt;&quot; is represented as Address{Name: &quot;Barry Gibbs&quot;, Address: &quot;bg@example.com&quot;}.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31092091ef6169e771115e3f9fb45fb917a09f6a" translate="yes" xml:space="preserve">
          <source>AddressList parses the named header field as a list of addresses.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1428b03f1babcfa0815c042e31c28898d265ee15" translate="yes" xml:space="preserve">
          <source>AddressSize returns the size in bytes of addresses in the current compilation unit.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f60869ac80093a039f471c4424eaf534fefaa9db" translate="yes" xml:space="preserve">
          <source>Addressable reports whether the corresponding expression is addressable (&lt;a href=&quot;https://golang.org/ref/spec#Address_operators&quot;&gt;https://golang.org/ref/spec#Address_operators&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2390852967aa96229ea563fa30b9c73a89cdae59" translate="yes" xml:space="preserve">
          <source>Addrs returns a list of unicast interface addresses for a specific interface.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79ba5e1b3f99abfd54ef8d839ba12bd2ac4d79cb" translate="yes" xml:space="preserve">
          <source>After</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51266c52e2ef76298b0634e50f0e5ca518d1596f" translate="yes" xml:space="preserve">
          <source>After a call to Close, all operations on the connection fail with ErrConnDone.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e242d525b986cfee6163e2d5e94dae6540d54c0" translate="yes" xml:space="preserve">
          <source>After a call to Commit or Rollback, all operations on the transaction fail with ErrTxDone.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b7cc0b202b5a6cf175ea12cda51cc3b5c865a50" translate="yes" xml:space="preserve">
          <source>After all flags are defined, call</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b11552cc3a06865b41f4c91326ff7e31f9e7baf0" translate="yes" xml:space="preserve">
          <source>After calling NextResultSet, the Next method should always be called before scanning. If there are further result sets they may not have rows in the result set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc109254d6837e645dfea4e00b401bd7b8f10009" translate="yes" xml:space="preserve">
          <source>After changing its configuration, the caller should call Start or StartTLS.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="902382debcdaed0b05dacf789c63d2774e1d7805" translate="yes" xml:space="preserve">
          <source>After parsing, the arguments following the flags are available as the slice flag.Args() or individually as flag.Arg(i). The arguments are indexed from 0 through flag.NArg()-1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f1b011e660c77ea973c7163c2f73dcca65df333" translate="yes" xml:space="preserve">
          <source>After reports whether the time instant t is after u.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e172e56ebdd816679ce623111d437357fa222a7" translate="yes" xml:space="preserve">
          <source>After waits for the duration to elapse and then sends the current time on the returned channel. It is equivalent to NewTimer(d).C. The underlying Timer is not recovered by the garbage collector until the timer fires. If efficiency is a concern, use NewTimer instead and call Timer.Stop if the timer is no longer needed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4c3a4e3ecbfcb3d8ebe9bb146b442a17039a6e4" translate="yes" xml:space="preserve">
          <source>AfterFunc waits for the duration to elapse and then calls f in its own goroutine. It returns a Timer that can be used to cancel the call using its Stop method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52203fa166bcb814e34b7bfd717ce5e34da01f93" translate="yes" xml:space="preserve">
          <source>Alert logs a message with severity LOG_ALERT, ignoring the severity passed to New.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf50c6d0c4f08187d0f0ca8d3062d2660efd4a9b" translate="yes" xml:space="preserve">
          <source>AlgorithmIdentifier represents the ASN.1 structure of the same name. See RFC 5280, section 4.1.1.2.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a2ca48b60bd6b1a14d6a2ac1a6041efe4ba7a9d" translate="yes" xml:space="preserve">
          <source>Alignof takes an expression x of any type and returns the required alignment of a hypothetical variable v as if v was declared via var v = x. It is the largest value m such that the address of v is always zero mod m. It is the same as the value returned by reflect.TypeOf(x).Align(). As a special case, if a variable s is of struct type and f is a field within that struct, then Alignof(s.f) will return the required alignment of a field of that type within a struct. This case is the same as the value returned by reflect.TypeOf(s.f).FieldAlign(). The return value of Alignof is a Go constant.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2b76a535f3a824bc0e7af6e39f77b353583e557" translate="yes" xml:space="preserve">
          <source>All arguments to be scanned must be either pointers to basic types or implementations of the Scanner interface.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3efe4c6fa30457a9aff5de61e746ace1b26467a8" translate="yes" xml:space="preserve">
          <source>All characters are UTF-8-encoded code points.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2314ab5383e8c5b7223fc5076bd94c65406b693b" translate="yes" xml:space="preserve">
          <source>All declaration nodes implement the Decl interface.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f71fdc2653fada1accdfeb2fa2bec4f375c3fa23" translate="yes" xml:space="preserve">
          <source>All errors begin with the string &quot;%!&quot; followed sometimes by a single character (the verb) and end with a parenthesized description.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dea399ca9139a5569fa2c17121e21527d0f13e27" translate="yes" xml:space="preserve">
          <source>All expression nodes implement the Expr interface.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="439bb2dad8a28e5fb2b434cb4e6612e2a16c7b96" translate="yes" xml:space="preserve">
          <source>All init functions are run on the startup thread. Calling LockOSThread from an init function will cause the main function to be invoked on that thread.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97c6b4dd788d20932f24c2193fdad47d4daae398" translate="yes" xml:space="preserve">
          <source>All node types implement the Node interface.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f0c09894c725d3c9e77a6a63f1453b76eef2346" translate="yes" xml:space="preserve">
          <source>All other slices and arrays are sent as an unsigned count followed by that many elements using the standard gob encoding for their type, recursively.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9146cc320b30397d729a875d3b4f8e2bc63e8c3" translate="yes" xml:space="preserve">
          <source>All statement nodes implement the Stmt interface.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65ae9abe1fa8712f97e1beed2b48172fff49a778" translate="yes" xml:space="preserve">
          <source>All the hash.Hash implementations returned by this package also implement encoding.BinaryMarshaler and encoding.BinaryUnmarshaler to marshal and unmarshal the internal state of the hash.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee4b09053ce6dc1a057246d17d4fec0360be7d1c" translate="yes" xml:space="preserve">
          <source>AllocedBytesPerOp returns the &quot;B/op&quot; metric, which is calculated as r.MemBytes / r.N.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12b2fa12ce7cf5b9e4f9ed48969a1983e0d1d5d2" translate="yes" xml:space="preserve">
          <source>AllocsPerOp returns the &quot;allocs/op&quot; metric, which is calculated as r.MemAllocs / r.N.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="badcac1ab432ee1a8a56581e11ba0e5ab9790707" translate="yes" xml:space="preserve">
          <source>AllocsPerRun returns the average number of allocations during calls to f. Although the return value has type float64, it will always be an integral value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69f8869e42decf1676089266f7f518cee77fd0af" translate="yes" xml:space="preserve">
          <source>AllocsPerRun sets GOMAXPROCS to 1 during its measurement and will restore it before returning.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b842b60e3487e1d9cdc7af135ff6ba6435574c8" translate="yes" xml:space="preserve">
          <source>Alpha is an in-memory image whose At method returns color.Alpha values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d6556da37edadf737283b435a625d47b77b00a4" translate="yes" xml:space="preserve">
          <source>Alpha represents an 8-bit alpha color.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb7ce30976aff039c4b314b9299fbf3b51bf4b5f" translate="yes" xml:space="preserve">
          <source>Alpha16 is an in-memory image whose At method returns color.Alpha16 values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17f51a9d20c648e3a8adb401d7734bd7422b79ee" translate="yes" xml:space="preserve">
          <source>Alpha16 represents a 16-bit alpha color.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb30b27f413d64a9fb0cbb842f0d9c65ea0f6942" translate="yes" xml:space="preserve">
          <source>Alternatively, new values can be allocated and initialized with factory functions of the form:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e05fd011282817682b1c22d0d70a09154585c4c3" translate="yes" xml:space="preserve">
          <source>Although the package provides access to low-level networking primitives, most clients will need only the basic interface provided by the Dial, Listen, and Accept functions and the associated Conn and Listener interfaces. The crypto/tls package uses the same interfaces and similar Dial and Listen functions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4aa6f271ecce01c74386f5cab4917b581ae9b6f4" translate="yes" xml:space="preserve">
          <source>An ASN.1 BIT STRING can be written to a BitString.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b05462a8e3ed73d565469132de236aba1a72def" translate="yes" xml:space="preserve">
          <source>An ASN.1 ENUMERATED can be written to an Enumerated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="260b18862b10ae0e74a033b94545c3cf7cd4c55e" translate="yes" xml:space="preserve">
          <source>An ASN.1 INTEGER can be written to an int, int32, int64, or *big.Int (from the math/big package). If the encoded value does not fit in the Go type, Unmarshal returns a parse error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="869b61cb05b1b3e5bee725f577f97c0c1cafb3d4" translate="yes" xml:space="preserve">
          <source>An ASN.1 OBJECT IDENTIFIER can be written to an ObjectIdentifier.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8230571aad1a64236469fadfb2ef0cabb863fbcb" translate="yes" xml:space="preserve">
          <source>An ASN.1 OCTET STRING can be written to a []byte.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf2bca6ff0b4d0bb1c60638a2ca6cf2e275df6be" translate="yes" xml:space="preserve">
          <source>An ASN.1 PrintableString, IA5String, or NumericString can be written to a string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e49fd50438627ac23f6a9e8691fbef9762a320b" translate="yes" xml:space="preserve">
          <source>An ASN.1 SEQUENCE OF x or SET OF x can be written to a slice if an x can be written to the slice's element type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="faa0a794464c52980812f881a6f05ec60e65cbab" translate="yes" xml:space="preserve">
          <source>An ASN.1 SEQUENCE or SET can be written to a struct if each of the elements in the sequence can be written to the corresponding element in the struct.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad20aa7b03987bad2cf797451b15b47646f20ae5" translate="yes" xml:space="preserve">
          <source>An ASN.1 UTCTIME or GENERALIZEDTIME can be written to a time.Time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36aadf8f5498a5d6a7f99a8402775cb348c8f6b5" translate="yes" xml:space="preserve">
          <source>An AddrType represents a machine address type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d75f2635e147e42345dfd716713a80c0faf359b" translate="yes" xml:space="preserve">
          <source>An AddressParser is an RFC 5322 address parser.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="751b64ea00145591b831c86aeec73c9cd6e3f193" translate="yes" xml:space="preserve">
          <source>An Array represents an array type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e83f825cc4b7a3b11c3d536847a9172d88cd97a4" translate="yes" xml:space="preserve">
          <source>An ArrayType node represents an array or slice type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ac61edaef43e2f85c83e7b3205dbe82f5419012" translate="yes" xml:space="preserve">
          <source>An ArrayType represents a fixed size array type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="857c276d40ff85b22398af4e95f15e17dfc3761e" translate="yes" xml:space="preserve">
          <source>An AssignStmt node represents an assignment or a short variable declaration.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8de9651bc85b5cadec1c2186fcfc45df4325dc7" translate="yes" xml:space="preserve">
          <source>An Attr identifies the attribute type in a DWARF Entry's Field.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a039b716fe768e4a98f3c47ea1a43617424d2cb0" translate="yes" xml:space="preserve">
          <source>An Attr represents an attribute in an XML element (Name=Value).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b862e215532b08f8993adb353e29f24b113d0d2" translate="yes" xml:space="preserve">
          <source>An Ellipsis node stands for the &quot;...&quot; type in a parameter list or the &quot;...&quot; length in an array type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="206e1d6d2930e4b55272a8c2ace302d5bebb4d6b" translate="yes" xml:space="preserve">
          <source>An EmptyOp specifies a kind or mixture of zero-width assertions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79b1e78fcc680965fe6e575d14194a8c78459d1e" translate="yes" xml:space="preserve">
          <source>An EmptyStmt node represents an empty statement. The &quot;position&quot; of the empty statement is the position of the immediately following (explicit or implicit) semicolon.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc21548a00526537378e03c232e946ddafc77006" translate="yes" xml:space="preserve">
          <source>An Encoder manages the transmission of type and data information to the other side of a connection. It is safe for concurrent use by multiple goroutines.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ec5724a97180ce1fa9f610646dede20f58de73b" translate="yes" xml:space="preserve">
          <source>An Encoder writes JSON values to an output stream.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44a80ad51642ec26186393b48e82a0a974e794a4" translate="yes" xml:space="preserve">
          <source>An Encoder writes XML data to an output stream.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd93c235f0bd9a74ea8b32e43f217fd3a3bd805a" translate="yes" xml:space="preserve">
          <source>An Encoding is a radix 32 encoding/decoding scheme, defined by a 32-character alphabet. The most common is the &quot;base32&quot; encoding introduced for SASL GSSAPI and standardized in RFC 4648. The alternate &quot;base32hex&quot; encoding is used in DNSSEC.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c6f72e4757281a321975587e037d0edc0910a0b" translate="yes" xml:space="preserve">
          <source>An Encoding is a radix 64 encoding/decoding scheme, defined by a 64-character alphabet. The most common encoding is the &quot;base64&quot; encoding defined in RFC 4648 and used in MIME (RFC 2045) and PEM (RFC 1421). RFC 4648 also defines an alternate encoding, which is the standard encoding with - and _ substituted for + and /.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9fc159c5bbba125ca80971575038639e4c30e15" translate="yes" xml:space="preserve">
          <source>An EndElement represents an XML end element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2933f1f28cbba0bc7344ba80287c65dff0bc30f" translate="yes" xml:space="preserve">
          <source>An EnumType represents an enumerated type. The only indication of its native integer type is its ByteSize (inside CommonType).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b79e9324c93170d0ebbe1508dc6c4fcc8e187b01" translate="yes" xml:space="preserve">
          <source>An EnumValue represents a single enumeration value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ec3768c8ebcfbb9ce9b3c7a117577939cc3fb5a" translate="yes" xml:space="preserve">
          <source>An Enumerated is represented as a plain int.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f06294438639908dac8d5e188fdee9a4acee8b91" translate="yes" xml:space="preserve">
          <source>An ErrNaN panic is raised by a Float operation that would lead to a NaN under IEEE-754 rules. An ErrNaN implements the error interface.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f54d7aa37ca74152ff50d53a4a9eb371bd8fc6f6" translate="yes" xml:space="preserve">
          <source>An Errno is an unsigned number describing an error condition. It implements the error interface. The zero Errno is by convention a non-error, so code to convert from Errno to error should use:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="512d38ad90ecdbb223905a3c98396bc761092f77" translate="yes" xml:space="preserve">
          <source>An Error describes a failure to parse a regular expression and gives the offending expression.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c853d687301eacbdc70fc7b2069d367a181575f" translate="yes" xml:space="preserve">
          <source>An Error describes a type-checking error; it implements the error interface. A &quot;soft&quot; error is an error that still permits a valid interpretation of a package (such as &quot;unused variable&quot;); &quot;hard&quot; errors may lead to unpredictable behavior if ignored.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d28234f48490b0ef3b8db38b651b8397ba38df3" translate="yes" xml:space="preserve">
          <source>An Error represents a network error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f652324f5503064eba1ee715c7833fbf6d566dc0" translate="yes" xml:space="preserve">
          <source>An Error represents a numeric error response from a server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3769e7ac9e5605d81e8490caf08cd40057870dac" translate="yes" xml:space="preserve">
          <source>An ErrorCode describes a failure to parse a regular expression.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54a91464923f2af9618f528d284b1f1da0c9208c" translate="yes" xml:space="preserve">
          <source>An ErrorHandler may be provided to Scanner.Init. If a syntax error is encountered and a handler was installed, the handler is called with a position and an error message. The position points to the beginning of the offending token.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24a7817e69ae447e63261c2dd340c4bdb534b1ae" translate="yes" xml:space="preserve">
          <source>An ErrorList implements the error interface.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8386dd5696de787382b0b9b9bedbc5b15351fb0b" translate="yes" xml:space="preserve">
          <source>An Example represents an example function found in a source files.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="215350db86b77b9a2e2e1f96152b7e43551b80ea" translate="yes" xml:space="preserve">
          <source>An ExitError reports an unsuccessful exit by a command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05bc8f57d6f82bf73794821b6ff5dd43d87bda94" translate="yes" xml:space="preserve">
          <source>An ExprStmt node represents a (stand-alone) expression in a statement list.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b1088189e4db6e193143ddf5d3de9c7c46bc88d" translate="yes" xml:space="preserve">
          <source>An IP is a single IP address, a slice of bytes. Functions in this package accept either 4-byte (IPv4) or 16-byte (IPv6) slices as input.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ee413fb49e920eaeb667d475d84bffedb2967a4" translate="yes" xml:space="preserve">
          <source>An IP mask is an IP address.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f236b320eae23c3c4580d036703570dfc8db5aef" translate="yes" xml:space="preserve">
          <source>An IPNet represents an IP network.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07af42d11561f0b970bb0742d7b092bd5695998a" translate="yes" xml:space="preserve">
          <source>An Ident node represents an identifier.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2482695edf6a726d25800b1f5cb476bfe9e0a58" translate="yes" xml:space="preserve">
          <source>An IfStmt node represents an if statement.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7d5dd87613417535deb3ae897d0824e60e9bcea" translate="yes" xml:space="preserve">
          <source>An ImportMode controls the behavior of the Import method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4e20307642879f4fdb91b301c0d6f19a4723e93" translate="yes" xml:space="preserve">
          <source>An ImportSpec node represents a single package import.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ccedf83855a15222c8ed0224e1f53221340331a4" translate="yes" xml:space="preserve">
          <source>An Importer resolves import paths to Packages.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2a2d275c65b3d0e5e8ceb4d48a4fa4fe4798662" translate="yes" xml:space="preserve">
          <source>An Importer resolves import paths to package Objects. The imports map records the packages already imported, indexed by package id (canonical import path). An Importer must determine the canonical import path and check the map to see if it is already present in the imports map. If so, the Importer can return the map entry. Otherwise, the Importer should load the package data for the given path into a new *Object (pkg), record pkg in the imports map, and then return pkg.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb537684eda993b55ae12814f6e808e9b7a235b7" translate="yes" xml:space="preserve">
          <source>An ImporterFrom resolves import paths to packages; it supports vendoring per &lt;a href=&quot;https://golang.org/s/go15vendor&quot;&gt;https://golang.org/s/go15vendor&lt;/a&gt;. Use go/importer to obtain an ImporterFrom implementation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="931853ab43b1b36b6477762f5b19f92fa830addc" translate="yes" xml:space="preserve">
          <source>An IncDecStmt node represents an increment or decrement statement.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35521006ace24c0ca8c1e6cad86fda47cb06ccbf" translate="yes" xml:space="preserve">
          <source>An IndexExpr node represents an expression followed by an index.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57b3f9d24fd3aa52a3788875d37b03e4f951d8ca" translate="yes" xml:space="preserve">
          <source>An Initializer describes a package-level variable, or a list of variables in case of a multi-valued initialization expression, and the corresponding initialization expression.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2a741c70d22c89f47e118e4368257a7e0a43877" translate="yes" xml:space="preserve">
          <source>An InsecureAlgorithmError</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="027885a33bbe913fc2ba3f477aabca3489b887a5" translate="yes" xml:space="preserve">
          <source>An Inst is a single instruction in a regular expression program.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fbb1591cae4924ecbe2d034ef239f8d53abbc342" translate="yes" xml:space="preserve">
          <source>An InstOp is an instruction opcode.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c1f11a6f7984a33db3a30b990c76a548954c071" translate="yes" xml:space="preserve">
          <source>An Int represents a signed multi-precision integer. The zero value for an Int represents the value 0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e81c158b5c560f087dc1cc6acd0467ac2c1656b5" translate="yes" xml:space="preserve">
          <source>An IntType represents a signed integer type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a7d36f9197d92f53c3f8f9081d074e38f25eb00" translate="yes" xml:space="preserve">
          <source>An Interface represents an interface type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eec19b90e5f6546bd2083657d09b42c2c1c31024" translate="yes" xml:space="preserve">
          <source>An InterfaceType node represents an interface type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="576712f6b5e2f51d02da2f20787f20734e4aa8fb" translate="yes" xml:space="preserve">
          <source>An InternalError reports an error in the flate code itself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d632bf503e0a72f63034068d3a35848739d860dd" translate="yes" xml:space="preserve">
          <source>An InvalidUnmarshalError describes an invalid argument passed to Unmarshal. (The argument to Unmarshal must be a non-nil pointer.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="355520c16460a4d672b0833e1be85108ccb16b48" translate="yes" xml:space="preserve">
          <source>An MX represents a single DNS MX record.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7737461dc6a0486b2bcc5cd7ba812b4baec53c6" translate="yes" xml:space="preserve">
          <source>An NS represents a single DNS NS record.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc31b1339a10ac6c5590f7699997d397c8058593" translate="yes" xml:space="preserve">
          <source>An Nlist32 is a Mach-O 32-bit symbol table entry.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ddae24f43b24e969e52011bccfbf41b821e176a8" translate="yes" xml:space="preserve">
          <source>An Nlist64 is a Mach-O 64-bit symbol table entry.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c07e8659a0b25b73eae3edf1d2bd807dad03f31" translate="yes" xml:space="preserve">
          <source>An Obj represents a collection of functions in a symbol table.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1805e3ce80f418cf89c636249f4d5a84033d5060" translate="yes" xml:space="preserve">
          <source>An Object describes a named language entity such as a package, constant, type, variable, function (incl. methods), or label.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ebcf6a2cb490f823e627d6f4f840a47671387779" translate="yes" xml:space="preserve">
          <source>An Object describes a named language entity such as a package, constant, type, variable, function (incl. methods), or label. All objects implement the Object interface.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2a6feda5d42e0f3ed1aa8a3be809a70c3599d2b" translate="yes" xml:space="preserve">
          <source>An ObjectIdentifier represents an ASN.1 OBJECT IDENTIFIER.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25a8b4525236ef00b360d07cb19827944df7a067" translate="yes" xml:space="preserve">
          <source>An Offset represents the location of an Entry within the DWARF info. (See Reader.Seek.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac3f6fd5c5f4020fe745e9df601334d103e434f6" translate="yes" xml:space="preserve">
          <source>An Op is a single regular expression operator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0314a12979f35374da5a5f6df2c7d8b530e55186" translate="yes" xml:space="preserve">
          <source>An SRV represents a single DNS SRV record.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2409c4611787fa12fc74e051bb517f08b144ce6f" translate="yes" xml:space="preserve">
          <source>An SelectStmt node represents a select statement.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41596e8b76edc639db644d1e3dc2c1dd81459d07" translate="yes" xml:space="preserve">
          <source>An SliceExpr node represents an expression followed by slice indices.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed46c8e20af1ec33b3449cc621457b646d93171d" translate="yes" xml:space="preserve">
          <source>An TypeSwitchStmt node represents a type switch statement.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e3ece4dfd5d5307131c8573c8e34ed46191a7bf" translate="yes" xml:space="preserve">
          <source>An UnmarshalError represents an error in the unmarshaling process.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="868232dcab51d8cfeb408a9b9149e92c12b71d90" translate="yes" xml:space="preserve">
          <source>An UnmarshalFieldError describes a JSON object key that led to an unexported (and therefore unwritable) struct field.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="737b56eeaf44e2dc73cc5f508d01fd01025fa4b2" translate="yes" xml:space="preserve">
          <source>An UnmarshalTypeError describes a JSON value that was not appropriate for a value of a specific Go type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dbb12df0d8594699910ded263bdda73074faccc3" translate="yes" xml:space="preserve">
          <source>An UnspecifiedType represents an implicit, unknown, ambiguous or nonexistent type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="127495d0dcb94690f6b42f4443962cedbb7bc317" translate="yes" xml:space="preserve">
          <source>An UnsupportedError reports that the input uses a valid but unimplemented JPEG feature.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6cface443329dd52d1ffaa72664f6e7fd32f48b" translate="yes" xml:space="preserve">
          <source>An UnsupportedError reports that the input uses a valid but unimplemented PNG feature.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50c033636c681ef23f5703353e7b6b548ee31e57" translate="yes" xml:space="preserve">
          <source>An UnsupportedType is a placeholder returned in situations where we encounter a type that isn't supported.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f010dd73bd76eac970f2fad6de4d1d072e049eb" translate="yes" xml:space="preserve">
          <source>An UnsupportedTypeError is returned by Marshal when attempting to encode an unsupported value type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55cf6dbd651aa1fc24dab4ed83f94d2cc501a8bb" translate="yes" xml:space="preserve">
          <source>An alpha-premultiplied color component C has been scaled by alpha (A), so has valid values 0 &amp;lt;= C &amp;lt;= A.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96f36f26c07cd97ba2148d75c909d9ff85455a78" translate="yes" xml:space="preserve">
          <source>An analogous set of functions scans formatted text to yield values. Scan, Scanf and Scanln read from os.Stdin; Fscan, Fscanf and Fscanln read from a specified io.Reader; Sscan, Sscanf and Sscanln read from an argument string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd590ec64bdbd07328cd1648202f3c4d0652fcaa" translate="yes" xml:space="preserve">
          <source>An appropriate use of a Pool is to manage a group of temporary items silently shared among and potentially reused by concurrent independent clients of a package. Pool provides a way to amortize allocation overhead across many clients.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7a6c66066c63a7b13fb3633463450779dc83697" translate="yes" xml:space="preserve">
          <source>An argument is a simple value, denoted by one of the following.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9834be44e753f9b0833b74dd8442f2593d02903" translate="yes" xml:space="preserve">
          <source>An empty Dir is treated as &quot;.&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c1d4dbd141f152659ded0ed62d6fc32f149bd0b" translate="yes" xml:space="preserve">
          <source>An empty method means &quot;GET&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd4d28837904807a903cbe5476bdc10de0744eb7" translate="yes" xml:space="preserve">
          <source>An encoding is invalid if it is incorrect UTF-8, encodes a rune that is out of range, or is not the shortest possible UTF-8 encoding for the value. No other validation is performed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97559fea881eb99df8b5b805bce6db58884baa12" translate="yes" xml:space="preserve">
          <source>An entry is a sequence of attribute/value pairs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70ec8bed891e692083a35e67a8a08047708ac061" translate="yes" xml:space="preserve">
          <source>An error is considered to match a target if it is equal to that target or if it implements a method Is(error) bool such that Is(target) returns true.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1a208abffd28eb07ba78aa217f3028c63ddac28" translate="yes" xml:space="preserve">
          <source>An error is returned if caused by client policy (such as CheckRedirect), or failure to speak HTTP (such as a network connectivity problem). A non-2xx status code doesn't cause an error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="486bd0cc019a78e61c1e7988575a296022dde327" translate="yes" xml:space="preserve">
          <source>An error is returned if pos is not within the package or if the node cannot be type-checked.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33f2fbaf6070ae69f9aa39421d7912bcc2d2cb21" translate="yes" xml:space="preserve">
          <source>An error is returned if the Client's CheckRedirect function fails or if there was an HTTP protocol error. A non-2xx response doesn't cause an error. Any returned error will be of type *url.Error. The url.Error value's Timeout method will report true if request timed out or was canceled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29559e83fd57f697a87f8f6c23a1408199321367" translate="yes" xml:space="preserve">
          <source>An error is returned if there were too many redirects or if there was an HTTP protocol error. A non-2xx response doesn't cause an error. Any returned error will be of type *url.Error. The url.Error value's Timeout method will report true if request timed out or was canceled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca4e973640c5414c2d9178d60dc8605a5b8a5d60" translate="yes" xml:space="preserve">
          <source>An error matches target if the error's concrete value is assignable to the value pointed to by target, or if the error has a method As(interface{}) bool such that As(target) returns true. In the latter case, the As method is responsible for setting target.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ec1daa84976e0d0488f1ebd412c66b0f689386a" translate="yes" xml:space="preserve">
          <source>An error returned after a timeout fails will implement the Timeout method, and calling the Timeout method will return true. The PathError and SyscallError types implement the Timeout method. In general, call IsTimeout to test whether an error indicates a timeout.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8b785d2e40c6b05c4a7dedaf9a7985d62dd9c0c" translate="yes" xml:space="preserve">
          <source>An example of good use of a Pool is in the fmt package, which maintains a dynamically-sized store of temporary output buffers. The store scales under load (when many goroutines are actively printing) and shrinks when quiescent.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d1ac1bff5d82335919eca7792226149f6974601" translate="yes" xml:space="preserve">
          <source>An expectCode &amp;lt;= 0 disables the check of the status code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b885b02299d18da02728c260e15d739888aa2a45" translate="yes" xml:space="preserve">
          <source>An idle timeout can be implemented by repeatedly extending the deadline after successful Read or Write calls.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c30b3b786ad798c3290738b4c4b125b52d06a251" translate="yes" xml:space="preserve">
          <source>An implementation that always returns &quot;&quot; is valid and may be useful for testing but it is not secure: it means that the HTTP server for foo.com can set a cookie for bar.com.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47c9f3a025dffe9123fd4bfd7373fe411e63cc3f" translate="yes" xml:space="preserve">
          <source>An internal function but exported because it is cross-package; part of the implementation of the &quot;go test&quot; command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="036afd05688102f6ee86356229e3c79c56ec575a" translate="yes" xml:space="preserve">
          <source>An internal type but exported because it is cross-package; part of the implementation of the &quot;go test&quot; command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="442649c59c72ffcf9dd32a6c63fcf97e0bbbf3e5" translate="yes" xml:space="preserve">
          <source>An unsigned integer is sent one of two ways. If it is less than 128, it is sent as a byte with that value. Otherwise it is sent as a minimal-length big-endian (high byte first) byte stream holding the value, preceded by one byte holding the byte count, negated. Thus 0 is transmitted as (00), 7 is transmitted as (07) and 256 is transmitted as (FE 01 00).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a76817319296468bf39d1d78d770edaaa1f1d0b" translate="yes" xml:space="preserve">
          <source>And sets z = x &amp;amp; y and returns z.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4fe7a64501f902a2a15dc8d7ef88b7a3c8758b53" translate="yes" xml:space="preserve">
          <source>AndNot sets z = x &amp;amp;^ y and returns z.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="104eadd84d40efc537cbdaed98695f14d3c410ae" translate="yes" xml:space="preserve">
          <source>Anonymous reports whether the variable is an embedded field. Same as Embedded; only present for backward-compatibility.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b34123eb0681a84b4e38ef46e880e0d9d4e93ff2" translate="yes" xml:space="preserve">
          <source>Anonymous struct fields are usually marshaled as if their inner exported fields were fields in the outer struct, subject to the usual Go visibility rules amended as described in the next paragraph. An anonymous struct field with a name given in its JSON tag is treated as having that name, rather than being anonymous. An anonymous struct field of interface type is treated the same as having that type as its name, rather than being anonymous.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="afb9e365ac6bc69254b413683db8417c15044c6f" translate="yes" xml:space="preserve">
          <source>Any item stored in the Pool may be removed automatically at any time without notification. If the Pool holds the only reference when this happens, the item might be deallocated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6b643cc8e0850db50e55740276d22f185017d81" translate="yes" xml:space="preserve">
          <source>Any mutations to the returned pool are not written to disk and do not affect any other pool returned by SystemCertPool.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="224f9d3dc95f39b31b4695465f7bb92d23f66b43" translate="yes" xml:space="preserve">
          <source>Any of the above ASN.1 values can be written to an interface{}. The value stored in the interface has the corresponding Go type. For integers, that type is int64.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="791f38485d078e4250fe65d69d579ce6058e5ed8" translate="yes" xml:space="preserve">
          <source>Any returned error will be of type *url.Error. The url.Error value's Timeout method will report true if request timed out or was canceled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12810041e8799641fa0564b3d08f00a640e526e5" translate="yes" xml:space="preserve">
          <source>Append appends the string representation of x, as generated by x.Text(base), to buf and returns the extended buffer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="991b56073f752ea70afd5d3245c19ae4ca5aea47" translate="yes" xml:space="preserve">
          <source>Append appends the values x to a slice s and returns the resulting slice. As in Go, each x's value must be assignable to the slice's element type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a6738f1f149fb1b688951727ba8a4eb62d6e849" translate="yes" xml:space="preserve">
          <source>Append appends to buf the string form of the floating-point number x, as generated by x.Text, and returns the extended buffer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc7406a7e262f6f8144c95e8a9ab9e772e4587d4" translate="yes" xml:space="preserve">
          <source>AppendBool</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e6c1bde028847a8f50865559cf63e4d8dcb8db9" translate="yes" xml:space="preserve">
          <source>AppendBool appends &quot;true&quot; or &quot;false&quot;, according to the value of b, to dst and returns the extended buffer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="014e6c46b60f6356c8ae4eb44946bcc39c683ed5" translate="yes" xml:space="preserve">
          <source>AppendBool, AppendFloat, AppendInt, and AppendUint are similar but append the formatted value to a destination slice.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cbf71c71617cb5b06bbe72a027a40a50e99d7ac7" translate="yes" xml:space="preserve">
          <source>AppendCertsFromPEM attempts to parse a series of PEM encoded certificates. It appends any certificates found to s and reports whether any certificates were successfully parsed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef209b42fc5cf6c80a711f0e8fdac2c151f89421" translate="yes" xml:space="preserve">
          <source>AppendFloat</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e82a7a839e480035dfa637aa1bc5055d24e100b" translate="yes" xml:space="preserve">
          <source>AppendFloat appends the string form of the floating-point number f, as generated by FormatFloat, to dst and returns the extended buffer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b06ef363cdc72d800a1b0e2f4d789a51ed28e9cc" translate="yes" xml:space="preserve">
          <source>AppendFormat is like Format but appends the textual representation to b and returns the extended buffer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa7c3675c344d224694cdd3e00f46904a1a198c2" translate="yes" xml:space="preserve">
          <source>AppendInt</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2b187db6c308fc1702924e2f1e633509db15a41" translate="yes" xml:space="preserve">
          <source>AppendInt appends the string form of the integer i, as generated by FormatInt, to dst and returns the extended buffer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ec9b89a50366169935f696b1a52bab9ad93ce11" translate="yes" xml:space="preserve">
          <source>AppendQuote</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf8e7dfc01c8eb2ae61af0decdd8abe4db2493e3" translate="yes" xml:space="preserve">
          <source>AppendQuote appends a double-quoted Go string literal representing s, as generated by Quote, to dst and returns the extended buffer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aac9680f9b8d54a2e691b9fc4814576b43aa1597" translate="yes" xml:space="preserve">
          <source>AppendQuoteRune</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4affe2726aa0af79866bcac727b0aa02165283e7" translate="yes" xml:space="preserve">
          <source>AppendQuoteRune appends a single-quoted Go character literal representing the rune, as generated by QuoteRune, to dst and returns the extended buffer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5cc72aa0b6d1a3e6331f053030965add24d59d99" translate="yes" xml:space="preserve">
          <source>AppendQuoteRuneToASCII</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3afb68811f96e790a1e9d00f7edaa6a56c7ecf3" translate="yes" xml:space="preserve">
          <source>AppendQuoteRuneToASCII appends a single-quoted Go character literal representing the rune, as generated by QuoteRuneToASCII, to dst and returns the extended buffer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63575dcb5767538ce900b5ecffc6e375340ae2db" translate="yes" xml:space="preserve">
          <source>AppendQuoteRuneToGraphic appends a single-quoted Go character literal representing the rune, as generated by QuoteRuneToGraphic, to dst and returns the extended buffer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4edf5c0ada10bc45e0e1cd667a7f4ca233f2d8a" translate="yes" xml:space="preserve">
          <source>AppendQuoteToASCII</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4af83e8c6f92cae36f17c055e1dad65cafe24a88" translate="yes" xml:space="preserve">
          <source>AppendQuoteToASCII appends a double-quoted Go string literal representing s, as generated by QuoteToASCII, to dst and returns the extended buffer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0614344e66308abc1fa3774e3b165f0a5a6ba86e" translate="yes" xml:space="preserve">
          <source>AppendQuoteToGraphic appends a double-quoted Go string literal representing s, as generated by QuoteToGraphic, to dst and returns the extended buffer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4293b6e547f1114c134ce72872c3d683ab6de3b4" translate="yes" xml:space="preserve">
          <source>AppendSlice appends a slice t to a slice s and returns the resulting slice. The slices s and t must have the same element type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b94bccf4bd646055e30b89dcc1a6bb69c63264a1" translate="yes" xml:space="preserve">
          <source>AppendUint</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a848ce1ccb2943fb03b2a97a183e1e001204d7f" translate="yes" xml:space="preserve">
          <source>AppendUint appends the string form of the unsigned integer i, as generated by FormatUint, to dst and returns the extended buffer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ceb03c6f5e7370ed7befcfaa3e743fb64b5ef4c" translate="yes" xml:space="preserve">
          <source>ArbitraryType is here for the purposes of documentation only and is not actually part of the unsafe package. It represents the type of an arbitrary Go expression.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f584feba6cf3361b02c7c81dcebd1e32a75415e" translate="yes" xml:space="preserve">
          <source>ArchChar returns &quot;?&quot; and an error. In earlier versions of Go, the returned string was used to derive the compiler and linker tool names, the default object file suffix, and the default linker output name. As of Go 1.5, those strings no longer vary by architecture; they are compile, link, .o, and a.out, respectively.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7fd33dbad703e2baacd65220f1dee6594a39c3e1" translate="yes" xml:space="preserve">
          <source>Arg returns the i'th argument. Arg(0) is the first remaining argument after flags have been processed. Arg returns an empty string if the requested element does not exist.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e87e53727801bfc878272fae45c5972e2148db1" translate="yes" xml:space="preserve">
          <source>Arg returns the i'th command-line argument. Arg(0) is the first remaining argument after flags have been processed. Arg returns an empty string if the requested element does not exist.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f057c07f8a3d2900b501ed0ba97a2c798c10c131" translate="yes" xml:space="preserve">
          <source>Args hold the command-line arguments, starting with the program name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d6577266006e170c0a00f0095a742e5ff6a8b83" translate="yes" xml:space="preserve">
          <source>Args returns the non-flag arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d50601b6e19d9bb6ca5607eb536c9755a196001" translate="yes" xml:space="preserve">
          <source>Args returns the non-flag command-line arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cbb9fa252e60809efa55a7ad83aea5438ef56753" translate="yes" xml:space="preserve">
          <source>Arguments</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dcac9467b61958dfc8fb2a284d9809101d3387e5" translate="yes" xml:space="preserve">
          <source>Arguments may evaluate to any type; if they are pointers the implementation automatically indirects to the base type when required. If an evaluation yields a function value, such as a function-valued field of a struct, the function is not invoked automatically, but it can be used as a truth value for an if action and the like. To invoke it, use the call function, defined below.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03cb1ef1a4caa26d25a6105558ad623367ea6a38" translate="yes" xml:space="preserve">
          <source>Arithmetic expressions are typically written as a sequence of individual method calls, with each call corresponding to an operation. The receiver denotes the result and the method arguments are the operation's operands. For instance, given three *Int values a, b and c, the invocation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="918a4da47d7ebb48a08cab34e3e485f64e61c032" translate="yes" xml:space="preserve">
          <source>Array and slice values encode as JSON arrays, except that []byte encodes as a base64-encoded string, and a nil slice encodes as the null JSON value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a680524eecee442cefa352a7c38f566b7e119c31" translate="yes" xml:space="preserve">
          <source>Array values are deeply equal when their corresponding elements are deeply equal.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66b6d7c835c7970d9fefaada6f3b7756c4c96afd" translate="yes" xml:space="preserve">
          <source>ArrayOf returns the array type with the given count and element type. For example, if t represents int, ArrayOf(5, t) represents [5]int.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d31985fda87b26d6554bcfbfe7dbc398b51917e" translate="yes" xml:space="preserve">
          <source>As</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77b9a4ab5fb6f3aa2a4543e5c9523108a1e28b09" translate="yes" xml:space="preserve">
          <source>As DeepEqual traverses the data values it may find a cycle. The second and subsequent times that DeepEqual compares two pointer values that have been compared before, it treats the values as equal rather than examining the values to which they point. This ensures that DeepEqual terminates.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b56f8d462bf82502c735c3c1eade6e22b30a7c4" translate="yes" xml:space="preserve">
          <source>As a more whimsical example, this program guesses your number:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bff88475604e0dd205ad66a54a59842b94885110" translate="yes" xml:space="preserve">
          <source>As a precaution, ServeFile will reject requests where r.URL.Path contains a &quot;..&quot; path element; this protects against callers who might unsafely use filepath.Join on r.URL.Path without sanitizing it and then use that filepath.Join result as the name argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f39e7711059649948e083fed172dc43cfc73eaaf" translate="yes" xml:space="preserve">
          <source>As a special case, if req.URL.Host is &quot;localhost&quot; (with or without a port number), then a nil URL and nil error will be returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae690189964440e45359a1c6c51db6559b11980b" translate="yes" xml:space="preserve">
          <source>As a special case, if the field tag is &quot;-&quot;, the field is always omitted. Note that a field with name &quot;-&quot; can still be generated using the tag &quot;-,&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e60c59152c193360fae3f60276c9948866292a43" translate="yes" xml:space="preserve">
          <source>As a special case, it is legal to append a string to a byte slice, like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="564379e4b2f47f0c0856088856fe399c4a7ce7d9" translate="yes" xml:space="preserve">
          <source>As a special case, src can have kind String if the element type of dst is kind Uint8.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8c66ee4ab43b3719db19be5d1e8b263afc3c332" translate="yes" xml:space="preserve">
          <source>As a special case, the returned file server redirects any request ending in &quot;/index.html&quot; to the same path, without the final &quot;index.html&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69cd9de94cfb605c56ea7c7a305ef94aa8e800ad" translate="yes" xml:space="preserve">
          <source>As another special case, ServeFile redirects any request where r.URL.Path ends in &quot;/index.html&quot; to the same path, without the final &quot;index.html&quot;. To avoid such redirects either modify the path or use ServeContent.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c22915584feea30271ccd5462bc99d8717677963" translate="yes" xml:space="preserve">
          <source>As finds the first error in err's chain that matches target, and if so, sets target to that error value and returns true.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4dc527904b5762369a3f475f72b0dc996cabb70c" translate="yes" xml:space="preserve">
          <source>As in the cases above, it is invalid to store the result before the conversion:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aaf43f02c8be260818b1d2cfc8d762dc44ca7c4c" translate="yes" xml:space="preserve">
          <source>As in the previous case, the reflect data structures SliceHeader and StringHeader declare the field Data as a uintptr to keep callers from changing the result to an arbitrary type without first importing &quot;unsafe&quot;. However, this means that SliceHeader and StringHeader are only valid when interpreting the content of an actual slice or string value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c27858b3442fc0bee7882f1bb69b22f67a266cb" translate="yes" xml:space="preserve">
          <source>As of Go 1.8, ProbablyPrime(0) is allowed and applies only a Baillie-PSW test. Before Go 1.8, ProbablyPrime applied only the Miller-Rabin tests, and ProbablyPrime(0) panicked.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2dd4351c985c8d810139dead9123e042560e4b66" translate="yes" xml:space="preserve">
          <source>As returned by NewReader, a Reader expects input conforming to RFC 4180. The exported fields can be changed to customize the details before the first call to Read or ReadAll.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e146a063bece1e3d2e6bbe0b5fda136eb3a8802" translate="yes" xml:space="preserve">
          <source>As returned by NewWriter, a Writer writes records terminated by a newline and uses ',' as the field delimiter. The exported fields can be changed to customize the details before the first call to Write or WriteAll.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7df27550c12511e83c255cdee5cd115de36801a" translate="yes" xml:space="preserve">
          <source>As this uses the math/rand package, it must not be used for security-sensitive work. Use crypto/rand.Int instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2cd259da2c4b6fea04004fe9f9885ac522790abc" translate="yes" xml:space="preserve">
          <source>As unwraps its first argument sequentially looking for an error that can be assigned to its second argument, which must be a pointer. If it succeeds, it performs the assignment and returns true. Otherwise, it returns false. The form</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8374f63c4cc91790e10a17540248859e2c43749e" translate="yes" xml:space="preserve">
          <source>As will panic if target is not a non-nil pointer to either a type that implements error, or to any interface type. As returns false if err is nil.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e12a672c4a03c1f366a655654dd82547f4c192b6" translate="yes" xml:space="preserve">
          <source>As with Mutexes, a locked RWMutex is not associated with a particular goroutine. One goroutine may RLock (Lock) a RWMutex and then arrange for another goroutine to RUnlock (Unlock) it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f21579b78a9211097bade1507cf7d1061aef2af" translate="yes" xml:space="preserve">
          <source>Asin</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5bad1e47810824babb31078e94077c5944ed414b" translate="yes" xml:space="preserve">
          <source>Asin returns the arcsine, in radians, of x.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42f92a72e30529e672dc5d2bdb4e52a1e80b51ed" translate="yes" xml:space="preserve">
          <source>Asin returns the inverse sine of x.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad5ced2b521e057f06b0f8b74356c5357ee0c1b5" translate="yes" xml:space="preserve">
          <source>Asinh</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b958528f6028414e36bacd2591d4b6be481f7b4" translate="yes" xml:space="preserve">
          <source>Asinh returns the inverse hyperbolic sine of x.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88ff212e4044fa4ecfe39d2c2662e15ee5065576" translate="yes" xml:space="preserve">
          <source>AssertableTo reports whether a value of type V can be asserted to have type T.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7e50e603d8ca37cb77d5d576d4a7b54854bdbbc" translate="yes" xml:space="preserve">
          <source>AssignNode holds a list of variable names, possibly with chained field accesses. The dollar sign is part of the (first) name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec3e8c371a10dbed4fea0329ff6a11ce3cbd6f29" translate="yes" xml:space="preserve">
          <source>Assignable reports whether the corresponding expression is assignable to (provided a value of the right type).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd5a07eeed4108b05189ea3b918384a565a62707" translate="yes" xml:space="preserve">
          <source>AssignableTo reports whether a value of type V is assignable to a variable of type T.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="073f06f859d560b94308665c74b394553a4cb550" translate="yes" xml:space="preserve">
          <source>Associated templates</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="121e4049fd559093314fa7baa93a29ee9ee41472" translate="yes" xml:space="preserve">
          <source>Assuming {{.}} is `O'Reilly: How are &amp;lt;i&amp;gt;you&amp;lt;/i&amp;gt;?`, the table below shows how {{.}} appears when used in the context to the left.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="746de06dfc27875c233a16bc538c38c9e6d17830" translate="yes" xml:space="preserve">
          <source>At implements the Image interface.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a60dd7bc9b32af28f00b9d0d9bb8fa49524604ad" translate="yes" xml:space="preserve">
          <source>At parse time each {{.}} is overwritten to add escaping functions as necessary. In this case it becomes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a0afca5b2f066f8034ea0fbbfa4603da7e5cc29" translate="yes" xml:space="preserve">
          <source>At returns the bit at the given index. If the index is out of range it returns false.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42341bc94e9e432ac7ed1df54f5e5cefe525e01c" translate="yes" xml:space="preserve">
          <source>At returns the i'th method in s for 0 &amp;lt;= i &amp;lt; s.Len().</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77c9122bd7d1bb2ad8f2ac38d7b8b3292183a2ac" translate="yes" xml:space="preserve">
          <source>At returns the i'th variable of tuple t.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b17e31210b8e43c3d1e1c222717ddf79de31d1e" translate="yes" xml:space="preserve">
          <source>At this point, clients can see a service &quot;Arith&quot; with methods &quot;Arith.Multiply&quot; and &quot;Arith.Divide&quot;. To invoke one, a client first dials the server:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="629848d109abb16cacec52ea5ca0dc3eddfe0f61" translate="yes" xml:space="preserve">
          <source>Atan</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c50e85584d7681c5aba445dde84464172eb36a4c" translate="yes" xml:space="preserve">
          <source>Atan returns the arctangent, in radians, of x.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c11076c24ca507422c2e7e78169bc402e507472" translate="yes" xml:space="preserve">
          <source>Atan returns the inverse tangent of x.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90c852f25296e9373d22d6d648bd28708c31cbec" translate="yes" xml:space="preserve">
          <source>Atan2</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63a222caf5c6142da57e1b301f3487b179288ab4" translate="yes" xml:space="preserve">
          <source>Atan2 returns the arc tangent of y/x, using the signs of the two to determine the quadrant of the return value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ce5901b2d008f90c0bf7e89db8b95255eacee6a" translate="yes" xml:space="preserve">
          <source>Atanh</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f20e96a43909d1a86e1589070972405040e354c" translate="yes" xml:space="preserve">
          <source>Atanh returns the inverse hyperbolic tangent of x.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c51e7a1c54b1f53de6e7c0fd3b84cdb88ba42e1" translate="yes" xml:space="preserve">
          <source>Atoi</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a117e4e38bf32f2974a89f461d6056635052cfb0" translate="yes" xml:space="preserve">
          <source>Atoi is equivalent to ParseInt(s, 10, 0), converted to type int.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9126f09b1713910b4d3a69d102dd9587b4610486" translate="yes" xml:space="preserve">
          <source>Attempting to receive into these types will draw a decode error:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5152403a7269d216ae8f4ea3b4b7a658797c9d36" translate="yes" xml:space="preserve">
          <source>AttrField returns the Field associated with attribute Attr in Entry, or nil if there is no such attribute.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ae0f439833163a3ddeedb35a68c62f7f5934a05" translate="yes" xml:space="preserve">
          <source>AttributeTypeAndValue mirrors the ASN.1 structure of the same name in RFC 5280, Section 4.1.2.4.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ec0ad7b2c80ec04692a3797f2bbc0ec3042876b" translate="yes" xml:space="preserve">
          <source>AttributeTypeAndValueSET represents a set of ASN.1 sequences of AttributeTypeAndValue sequences from RFC 2986 (PKCS #10).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7dace1e8c248d4f2663a3146820d6fa8f0645716" translate="yes" xml:space="preserve">
          <source>Auth authenticates a client using the provided authentication mechanism. A failed authentication closes the connection. Only servers that advertise the AUTH extension support this function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76ecb9e901daf9a93bba425a3a690af96a11bc07" translate="yes" xml:space="preserve">
          <source>Auth is implemented by an SMTP authentication mechanism.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf0ed01eae13fda7bf984cbae649794a647f7d90" translate="yes" xml:space="preserve">
          <source>Available reports whether the given hash function is linked into the binary.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a9ecdcb8faf4f6fafd06e9771061d704142a340" translate="yes" xml:space="preserve">
          <source>Available returns how many bytes are unused in the buffer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee148636f87031dd785d5275b1cbdf15a231b5a3" translate="yes" xml:space="preserve">
          <source>B is a type passed to Benchmark functions to manage benchmark timing and to specify the number of iterations to run.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="281039689fe09086452a06fde13b577021f53925" translate="yes" xml:space="preserve">
          <source>B.ReportMetric</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9735fb9f071a76bf96e03bb1c83afc5962a297bd" translate="yes" xml:space="preserve">
          <source>B.RunParallel</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b352c33a80325aa5fb2ae226450e350d636f2327" translate="yes" xml:space="preserve">
          <source>BUG(rsc): The rule Title uses for word boundaries does not handle Unicode punctuation properly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4b82c251d3f9879cefc981c46207be3e496ae01" translate="yes" xml:space="preserve">
          <source>Back returns the last element of list l or nil if the list is empty.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db678d849360d59ad5f56340bc8559ccb08f51dd" translate="yes" xml:space="preserve">
          <source>Background returns a non-nil, empty Context. It is never canceled, has no values, and has no deadline. It is typically used by the main function, initialization, and tests, and as the top-level Context for incoming requests.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="077fe9c54ed5ed26fa547f4ded3ef9a9bb066d65" translate="yes" xml:space="preserve">
          <source>Base</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0885011e0986be0085d2d4d1e06d03585dc94622" translate="yes" xml:space="preserve">
          <source>Base returns the base offset of file f as registered with AddFile.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72eb5d9f9166fd131965cf967a0725b84747d8a2" translate="yes" xml:space="preserve">
          <source>Base returns the last element of path. Trailing path separators are removed before extracting the last element. If the path is empty, Base returns &quot;.&quot;. If the path consists entirely of separators, Base returns a single separator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="730ef2dc0cbbd72e56b0f126a32b827069f4b3d9" translate="yes" xml:space="preserve">
          <source>Base returns the last element of path. Trailing slashes are removed before extracting the last element. If the path is empty, Base returns &quot;.&quot;. If the path consists entirely of slashes, Base returns &quot;/&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6e297784364859b17a6c3c7c606bb16913b7cdc" translate="yes" xml:space="preserve">
          <source>Base returns the minimum base offset that must be provided to AddFile when adding the next file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99eb4008013599132cd3e27c5fb83407d85919a5" translate="yes" xml:space="preserve">
          <source>BaseName returns the symbol name without the package or receiver name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e43eaab116942fbe79dd46a07719c75b728c8d47" translate="yes" xml:space="preserve">
          <source>BasicAuth returns the username and password provided in the request's Authorization header, if the request uses HTTP Basic Authentication. See RFC 2617, Section 2.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="366b21a60efe866654ff1d4abe0a6348b62eb4bd" translate="yes" xml:space="preserve">
          <source>BasicInfo is a set of flags describing properties of a basic type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de3ed59db1b7a02aa019b4d63cd7924f0ff03037" translate="yes" xml:space="preserve">
          <source>BasicKind describes the kind of basic type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5fcebeefad3cdbbf8733aa928160dec7dc90c1a1" translate="yes" xml:space="preserve">
          <source>Basics</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a559837e1ca8160c6adbcc9d6e61ffb4253f8979" translate="yes" xml:space="preserve">
          <source>Be aware that calling Sign with an attacker-controlled PrivateKey may require an arbitrary amount of CPU.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a579e80e86d1e7d0159d880e6b8fbe6e97090888" translate="yes" xml:space="preserve">
          <source>Because Unmarshal uses the reflect package, it can only assign to exported (upper case) fields. Unmarshal uses a case-sensitive comparison to match XML element names to tag values and struct field names.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="523d61a0fa00dd823c410985160019d3fd2694f7" translate="yes" xml:space="preserve">
          <source>Because associated templates share underlying data, template construction cannot be done safely in parallel. Once the templates are constructed, they can be executed in parallel.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c48bfaadf8cd2cdc8bb489f610161c315416f443" translate="yes" xml:space="preserve">
          <source>Because c.L is not locked when Wait first resumes, the caller typically cannot assume that the condition is true when Wait returns. Instead, the caller should Wait in a loop:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c54914271c00fc66938747e3c3b7008bdc4689f3" translate="yes" xml:space="preserve">
          <source>Because compilation units can describe multiple regions of the executable, in the worst case SeekPC must search through all the ranges in all the compilation units. Each call to SeekPC starts the search at the compilation unit of the last call, so in general looking up a series of PCs will be faster if they are sorted. If the caller wishes to do repeated fast PC lookups, it should build an appropriate index using the Ranges method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f624f6937df7b930caaacba36f0e003303314362" translate="yes" xml:space="preserve">
          <source>Because no call to Do returns until the one call to f returns, if f causes Do to be called, it will deadlock.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10e6b41f775d08ce6bc91138d6c2ffbef503d1d6" translate="yes" xml:space="preserve">
          <source>Because the monotonic clock reading has no meaning outside the current process, the serialized forms generated by t.GobEncode, t.MarshalBinary, t.MarshalJSON, and t.MarshalText omit the monotonic clock reading, and t.Format provides no format for it. Similarly, the constructors time.Date, time.Parse, time.ParseInLocation, and time.Unix, as well as the unmarshalers t.GobDecode, t.UnmarshalBinary. t.UnmarshalJSON, and t.UnmarshalText always create times with no monotonic clock reading.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2931b27564afddbb3dd2ae5bab9920e7ef6ed41b" translate="yes" xml:space="preserve">
          <source>Because these interfaces and primitives wrap lower-level operations with various implementations, unless otherwise informed clients should not assume they are safe for parallel execution.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35fcba4a31cbe45a039eaa4f4cccf00b01bffed2" translate="yes" xml:space="preserve">
          <source>Before Go 1.2, an InvalidUTF8Error was returned by Marshal when attempting to encode a string value with invalid UTF-8 sequences. As of Go 1.2, Marshal instead coerces the string to valid UTF-8 by replacing invalid bytes with the Unicode replacement rune U+FFFD.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c73598333463e9f5f45d82a86c218e8031e1759c" translate="yes" xml:space="preserve">
          <source>Before calling UnlockOSThread, the caller must ensure that the OS thread is suitable for running other goroutines. If the caller made any permanent changes to the state of the thread that would affect other goroutines, it should not call this function and thus leave the goroutine locked to the OS thread until the goroutine (and hence the thread) exits.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8e6ffc3c30540fb4fc792e9d4357fe97560a188" translate="yes" xml:space="preserve">
          <source>Before reports whether the time instant t is before u.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="606149b36fd31d7cdbc22b8147b6e250b63644a8" translate="yes" xml:space="preserve">
          <source>Begin starts a transaction. The default isolation level is dependent on the driver.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7cd63441add5782709d8f334b556a5c9fa7bdc37" translate="yes" xml:space="preserve">
          <source>BeginTx starts a transaction.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3207514bf6d3821c848dd10bdfa8d78bb40dcea3" translate="yes" xml:space="preserve">
          <source>Benchmark benchmarks a single function. It is useful for creating custom benchmarks that do not use the &quot;go test&quot; command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f46ac72b3634f96c6860b1ed26d9d4cd71d21aa" translate="yes" xml:space="preserve">
          <source>Benchmarks</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="595a85b5dfe37bb8ea10dd65bbf5df54240ef01f" translate="yes" xml:space="preserve">
          <source>BigEndian is the big-endian implementation of ByteOrder.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a8e46c0c273a4b21db3dc88b0bc1fa8455576e3" translate="yes" xml:space="preserve">
          <source>Binary-Only Packages</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb0f451964a92b1951caeba948c48201789ad9ee" translate="yes" xml:space="preserve">
          <source>BinaryMarshaler is the interface implemented by an object that can marshal itself into a binary form.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d76f4817cb16f671ca5aee534556905d021cc99" translate="yes" xml:space="preserve">
          <source>BinaryOp</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="921645dac207c4f83f06bce30493a71396088bbe" translate="yes" xml:space="preserve">
          <source>BinaryOp returns the result of the binary expression x op y. The operation must be defined for the operands. If one of the operands is Unknown, the result is Unknown. BinaryOp doesn't handle comparisons or shifts; use Compare or Shift instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aadd7b0b0b5fb55d09fc3d06572f282dff2441a6" translate="yes" xml:space="preserve">
          <source>BinaryUnmarshaler is the interface implemented by an object that can unmarshal a binary representation of itself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbc8be299a236737ac4bcd6e0b8a8942dcf2d6e6" translate="yes" xml:space="preserve">
          <source>BindToDevice binds the socket associated with fd to device.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16d18c58d40584999fc8105b9b042e87422089ab" translate="yes" xml:space="preserve">
          <source>Binomial sets z to the binomial coefficient of (n, k) and returns z.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ddd24fa4c794f9b329dfacec18d2187e2964355" translate="yes" xml:space="preserve">
          <source>Bit returns the value of the i'th bit of x. That is, it returns (x&amp;gt;&amp;gt;i)&amp;amp;1. The bit index i must be &amp;gt;= 0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6bc8c103293d835982059015b02530a9dce7c7fe" translate="yes" xml:space="preserve">
          <source>BitLen returns the length of the absolute value of x in bits. The bit length of 0 is 0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="249f28fd5304db8d7893c5941b0e5c6d36dcae80" translate="yes" xml:space="preserve">
          <source>BitLen returns the number of bits required to represent the absolute value x in binary representation; x must be an Int or an Unknown. If x is Unknown, the result is 0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ecd1fdf628a58ae78c5a7dd496f33ee72ff11255" translate="yes" xml:space="preserve">
          <source>BitString is the structure to use when you want an ASN.1 BIT STRING type. A bit string is padded up to the nearest byte in memory and the number of valid bits is recorded. Padding bits will be zero.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b86ce6cb2c2b41799ca1c79001b25b6a71ae1d0" translate="yes" xml:space="preserve">
          <source>Bits provides raw (unchecked but fast) access to x by returning its absolute value as a little-endian Word slice. The result and x share the same underlying array. Bits is intended to support implementation of missing low-level Int functionality outside this package; it should be avoided otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8785e8d0d70df9ef411a1a99b4e2008220100ed8" translate="yes" xml:space="preserve">
          <source>Blank lines are ignored. A line with only whitespace characters (excluding the ending newline character) is not considered a blank line.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab40b9553b86d8db879c49ff4725f0be1d518336" translate="yes" xml:space="preserve">
          <source>BlockProfile returns n, the number of records in the current blocking profile. If len(p) &amp;gt;= n, BlockProfile copies the profile into p and returns n, true. If len(p) &amp;lt; n, BlockProfile does not change p and returns n, false.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ae50f5c12fe5e00104f9ffadf5daeabfcf4ed33" translate="yes" xml:space="preserve">
          <source>BlockProfileRecord describes blocking events originated at a particular call sequence (stack trace).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85ef7e3c2654f8573a1d7a67091280baf14e7241" translate="yes" xml:space="preserve">
          <source>Bool defines a bool flag with specified name, default value, and usage string. The return value is the address of a bool variable that stores the value of the flag.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e6896885d6315609679d245d2070ffe8fed4e1b" translate="yes" xml:space="preserve">
          <source>Bool is a ValueConverter that converts input values to bools.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0fb9432e73dd047df304b2009b6c3b825667d954" translate="yes" xml:space="preserve">
          <source>Bool returns the value v as a bool. It panics if v is not a JavaScript boolean.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10b302964452c62c167d20c7d6a6eb54f65b9ba5" translate="yes" xml:space="preserve">
          <source>Bool returns v's underlying value. It panics if v's kind is not Bool.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b37fb77c4eb8b7e67beea7dd6aa3c0cab362ce86" translate="yes" xml:space="preserve">
          <source>BoolNode holds a boolean constant.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8e8a6bce6cf09d8bab71de479256430c4f50e55" translate="yes" xml:space="preserve">
          <source>BoolVal returns the Go boolean value of x, which must be a Bool or an Unknown. If x is Unknown, the result is false.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="499f2e8136043fcef09799424f98d1389a945e55" translate="yes" xml:space="preserve">
          <source>BoolVar defines a bool flag with specified name, default value, and usage string. The argument p points to a bool variable in which to store the value of the flag.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b0e763b67dea569e511a23d06447d965f06236f" translate="yes" xml:space="preserve">
          <source>Boolean values encode as JSON booleans.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f9fa2ad669da3999136da1456c5f3ffdf720ead" translate="yes" xml:space="preserve">
          <source>Boolean:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad90391bd80e58d8341d23f6811679989eed45ac" translate="yes" xml:space="preserve">
          <source>Boundary returns the Writer's boundary.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5dc9bacd4c58f9399b9dc87bc63dfb5fb7a6e59e" translate="yes" xml:space="preserve">
          <source>Bounds implements the Image interface.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="069d396f187de1e68cab3317f5cd2814eb7568af" translate="yes" xml:space="preserve">
          <source>BranchNode is the common representation of if, range, and with.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="615bed871d5779af80e4a6136fa4239d3c7ccc9b" translate="yes" xml:space="preserve">
          <source>Breakpoint executes a breakpoint trap.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37081c9403a25124ca889860df85a0ae7029759e" translate="yes" xml:space="preserve">
          <source>Broadcast wakes all goroutines waiting on c.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0abe955e9259954b391f714f51cf3c32c1931de6" translate="yes" xml:space="preserve">
          <source>Bswap32 returns its input with byte order reversed 0x01020304 -&amp;gt; 0x04030201</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71a400796b8b7bbe45d37b744a62ead19991004e" translate="yes" xml:space="preserve">
          <source>Bswap64 returns its input with byte order reversed 0x0102030405060708 -&amp;gt; 0x0807060504030201</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9309adffb005748ce6e64dc6b8674515cf4efae" translate="yes" xml:space="preserve">
          <source>Buf is where the traceback information should be stored. It should be PC values, such that Buf[0] is the PC of the caller, Buf[1] is the PC of that function's caller, and so on. Max is the maximum number of entries to store. The function should store a zero to indicate the top of the stack, or that the caller is on a different stack, presumably a Go stack.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2be5f64b36230104ef9c6e230215846a83d18df6" translate="yes" xml:space="preserve">
          <source>Buffer</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="448f56ed42119d7161dde9d81e02ab567a38fe41" translate="yes" xml:space="preserve">
          <source>Buffer (Reader)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd5168b55c7b32a8963df048d61974c2aede7b92" translate="yes" xml:space="preserve">
          <source>Buffer panics if it is called after scanning has started.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="551e1ba8b3e746ffe206860acb967584c81dae61" translate="yes" xml:space="preserve">
          <source>Buffer sets the initial buffer to use when scanning and the maximum size of buffer that may be allocated during scanning. The maximum token size is the larger of max and cap(buf). If max &amp;lt;= cap(buf), Scan will use this buffer only and do no allocation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7fbc5efb24a4bec1ee1e0286f6eb89f2f88ad86" translate="yes" xml:space="preserve">
          <source>Buffer.Grow</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13e05f0025f22f2c210feebd6f6764eb9ab9107a" translate="yes" xml:space="preserve">
          <source>Buffer.Len</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d131002dacad1f34909e2d34d9e19d16cc5e060" translate="yes" xml:space="preserve">
          <source>Buffered returns a reader of the data remaining in the Decoder's buffer. The reader is valid until the next call to Decode.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0067b3c63a56af4074505acb91d2a3cc9575fef4" translate="yes" xml:space="preserve">
          <source>Buffered returns the number of bytes that can be read from the current buffer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f08b0ea50ae1356e6e8d51780445d990cb02038" translate="yes" xml:space="preserve">
          <source>Buffered returns the number of bytes that have been written into the current buffer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f85a434187712878deb28e6a10ca19a4cff6a753" translate="yes" xml:space="preserve">
          <source>Buffers contains zero or more runs of bytes to write.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8eea1b80ba437eb2c7d9d8e4a7a1c0c36ddce4e" translate="yes" xml:space="preserve">
          <source>Bugs</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="921fab9f51565e1aa75ad1caac472a9aa9f26a82" translate="yes" xml:space="preserve">
          <source>Build Constraints</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29b9ebcad59c3ff5523927bf009e975e46078fb3" translate="yes" xml:space="preserve">
          <source>BuildInfo represents the build information read from the running binary.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5041b9275852b56eabc2a8bc89d216f576ca59f5" translate="yes" xml:space="preserve">
          <source>BuildNameToCertificate parses c.Certificates and builds c.NameToCertificate from the CommonName and SubjectAlternateName fields of each of the leaf certificates.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4759bf14d7a511508e86c343c934894b6e8db533" translate="yes" xml:space="preserve">
          <source>Builder</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d8e35a2ed18813e75b6cfe5be6d3b153d2c5046" translate="yes" xml:space="preserve">
          <source>By construction, a template may reside in only one association. If it's necessary to have a template addressable from multiple associations, the template definition must be parsed multiple times to create distinct *Template values, or must be copied with the Clone or AddParseTree method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="480c13549e7a8a185af82bf79efe8d7146c55441" translate="yes" xml:space="preserve">
          <source>By convention, tag strings are a concatenation of optionally space-separated key:&quot;value&quot; pairs. Each key is a non-empty string consisting of non-control characters other than space (U+0020 ' '), quote (U+0022 '&quot;'), and colon (U+003A ':'). Each value is quoted using U+0022 '&quot;' characters and Go string literal syntax.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b96101ed175ff51ef271a9ec4e297e0ae19c127" translate="yes" xml:space="preserve">
          <source>By convention, to approximate the behavior of Unmarshal itself, Unmarshalers implement UnmarshalJSON([]byte(&quot;null&quot;)) as a no-op.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d97f2e29718cda70f3fb7a0b844b75e9e2a001df" translate="yes" xml:space="preserve">
          <source>By default the pure Go resolver is used, because a blocked DNS request consumes only a goroutine, while a blocked C call consumes an operating system thread. When cgo is available, the cgo-based resolver is used instead under a variety of conditions: on systems that do not let programs make direct DNS requests (OS X), when the LOCALDOMAIN environment variable is present (even if empty), when the RES_OPTIONS or HOSTALIASES environment variable is non-empty, when the ASR_CONFIG environment variable is non-empty (OpenBSD only), when /etc/resolv.conf or /etc/nsswitch.conf specify the use of features that the Go resolver does not implement, and when the name being looked up ends in .local or is an mDNS name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d31c346123b01cd36d6f923e13afdff5da97023" translate="yes" xml:space="preserve">
          <source>By default, Scan uses an internal buffer and sets the maximum token size to MaxScanTokenSize.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1bb42d4b5aeee71b81262969484c8ff70b4517be" translate="yes" xml:space="preserve">
          <source>By default, Transport caches connections for future re-use. This may leave many open connections when accessing many hosts. This behavior can be managed using Transport's CloseIdleConnections method and the MaxIdleConnsPerHost and DisableKeepAlives fields.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e73ecd4c55ac4f2532efca2acf286d276bfcb67b" translate="yes" xml:space="preserve">
          <source>By default, a Scanner skips white space and Go comments and recognizes all literals as defined by the Go language specification. It may be customized to recognize only a subset of those literals and to recognize different identifier and white space characters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38c26436cbce7bb3819d63370d7d78fcf207cd25" translate="yes" xml:space="preserve">
          <source>By default, a synchronous signal is converted into a run-time panic. A SIGHUP, SIGINT, or SIGTERM signal causes the program to exit. A SIGQUIT, SIGILL, SIGTRAP, SIGABRT, SIGSTKFLT, SIGEMT, or SIGSYS signal causes the program to exit with a stack dump. A SIGTSTP, SIGTTIN, or SIGTTOU signal gets the system default behavior (these signals are used by the shell for job control). The SIGPROF signal is handled directly by the Go runtime to implement runtime.CPUProfile. Other signals will be caught but no action will be taken.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3d4b30d09f1fdb49352c0d58298888cf0ca8985" translate="yes" xml:space="preserve">
          <source>By default, all text between actions is copied verbatim when the template is executed. For example, the string &quot; items are made of &quot; in the example above appears on standard output when the program is run.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="350622d95bd495e5b9d5b12d5be7f36acd283530" translate="yes" xml:space="preserve">
          <source>By default, this package assumes that all pipelines produce a plain text string. It adds escaping pipeline stages necessary to correctly and safely embed that plain text string in the appropriate context.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac30c5fd81481adcf5dfadb9cc0286bdab9dd4d8" translate="yes" xml:space="preserve">
          <source>By setting the desired precision to 24 or 53 and using matching rounding mode (typically ToNearestEven), Float operations produce the same results as the corresponding float32 or float64 IEEE-754 arithmetic for operands that correspond to normal (i.e., not denormal) float32 or float64 numbers. Exponent underflow and overflow lead to a 0 or an Infinity for different values than IEEE-754 because Float exponents have a much larger range.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cae68a7a4d62320e833f932a1adb88cc3fca0834" translate="yes" xml:space="preserve">
          <source>ByteOrder (Get)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14c268801cac113cc21be5f1d8e9a681909d9ffd" translate="yes" xml:space="preserve">
          <source>ByteOrder (Put)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47172c77b57631e39af011e8368ac1a798bc3c15" translate="yes" xml:space="preserve">
          <source>BytePtrFromString returns a pointer to a NUL-terminated array of bytes containing the text of s. If s contains a NUL byte at any location, it returns (nil, EINVAL).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b67766bbc487c36c668f7c4b2ebbdd282b5f29af" translate="yes" xml:space="preserve">
          <source>ByteReader is the interface that wraps the ReadByte method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc79f8a24d7eacc319e8472097e4835f03446874" translate="yes" xml:space="preserve">
          <source>ByteScanner is the interface that adds the UnreadByte method to the basic ReadByte method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd18721ac61a79ca35c5cda1743e288f9c274dde" translate="yes" xml:space="preserve">
          <source>ByteSliceFromString returns a NUL-terminated slice of bytes containing the text of s. If s contains a NUL byte at any location, it returns (nil, EINVAL).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bff819ab0f5b5e1aa7cf8d780e4bca25b8ab6fb3" translate="yes" xml:space="preserve">
          <source>ByteWriter is the interface that wraps the WriteByte method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a463d6abf5a87eee5bdfdbd6797570bddff6553" translate="yes" xml:space="preserve">
          <source>Bytes returns a slice of length b.Len() holding the unread portion of the buffer. The slice is valid for use only until the next buffer modification (that is, only until the next call to a method like Read, Write, Reset, or Truncate). The slice aliases the buffer content at least until the next buffer modification, so immediate changes to the slice will affect the result of future reads.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e50dca4afc19f02f1781881fca1454838a8fe54" translate="yes" xml:space="preserve">
          <source>Bytes returns the absolute value of x as a big-endian byte slice.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd81aa008eaca297f56d5d20be64044f3fd3dd37" translate="yes" xml:space="preserve">
          <source>Bytes returns the bytes for the absolute value of x in little- endian binary representation; x must be an Int.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4b934536111abb43c8416065329859723d67ab4" translate="yes" xml:space="preserve">
          <source>Bytes returns the data over which the index was created. It must not be modified.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e205da73fdd6063e2f53de480b8d595a155bfc5" translate="yes" xml:space="preserve">
          <source>Bytes returns the most recent token generated by a call to Scan. The underlying array may point to data that will be overwritten by a subsequent call to Scan. It does no allocation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f37978f623b402dc557529380e27a17d5aab9e0" translate="yes" xml:space="preserve">
          <source>Bytes returns v's underlying value. It panics if v's underlying value is not a slice of bytes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf3cdb80980c06d234ad15ac8d6c7d4b17eb1c21" translate="yes" xml:space="preserve">
          <source>CAUTION: This interface does not support the import of locally vendored packages. See &lt;a href=&quot;https://golang.org/s/go15vendor&quot;&gt;https://golang.org/s/go15vendor&lt;/a&gt;. If possible, external implementations should implement ImporterFrom.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab235f8b07aea6e23756b09920385103a680e3aa" translate="yes" xml:space="preserve">
          <source>CIDRMask</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="610fd2d199248e3ae5def13e3d6ea752b04347c3" translate="yes" xml:space="preserve">
          <source>CIDRMask returns an IPMask consisting of `ones' 1 bits followed by 0s up to a total length of `bits' bits. For a mask of this form, CIDRMask is the inverse of IPMask.Size.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="977330e1b93f52c949bfe749d1c4a8ac402ce621" translate="yes" xml:space="preserve">
          <source>CMYK is an in-memory image whose At method returns color.CMYK values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5577b77166da8b8f97d578666c387cbb318d2199" translate="yes" xml:space="preserve">
          <source>CMYK represents a fully opaque CMYK color, having 8 bits for each of cyan, magenta, yellow and black.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f107458edf70d5d8784cc485af494c3ddf26bca" translate="yes" xml:space="preserve">
          <source>CMYKModel is the Model for CMYK colors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1dcfe8b3871bde23c33a86fd34caf4ceb3d81b9c" translate="yes" xml:space="preserve">
          <source>CMYKToRGB converts a CMYK quadruple to an RGB triple.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb4b09ded8668017a3d6bbb16fc8b707e98152f5" translate="yes" xml:space="preserve">
          <source>COFFSymbol represents single COFF symbol table record.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3148d8e04fc6cddb8324aab7b41baaecb660939b" translate="yes" xml:space="preserve">
          <source>COffset returns the index of the first element of Cb or Cr that corresponds to the pixel at (x, y).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c27dd514d68b447ad3ae459b747e2fe4297abc0" translate="yes" xml:space="preserve">
          <source>CPUProfile panics. It formerly provided raw access to chunks of a pprof-format profile generated by the runtime. The details of generating that format have changed, so this functionality has been removed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d070e9c40d008404324ad69f68a104813b438177" translate="yes" xml:space="preserve">
          <source>CRAMMD5Auth returns an Auth that implements the CRAM-MD5 authentication mechanism as defined in RFC 2195. The returned Auth uses the given username and secret to authenticate to the server using the challenge-response mechanism.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="745027bc41472d45980cddb096773a4f84ccc98d" translate="yes" xml:space="preserve">
          <source>CRTValue contains the precomputed Chinese remainder theorem values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1fb1514db7c9527b7daa27065c1ccc1f41d7c4b" translate="yes" xml:space="preserve">
          <source>CSS encapsulates known safe content that matches any of:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f92f25bf90673d8d059ee8d957be5d5aaa212a63" translate="yes" xml:space="preserve">
          <source>Call Next to advance the iterator, and Key/Value to access each entry. Next returns false when the iterator is exhausted. MapRange follows the same iteration semantics as a range statement.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="118156dfe47c64304a43b6fe1ecd5f7d303a7bb3" translate="yes" xml:space="preserve">
          <source>Call calls the function v with the input arguments in. For example, if len(in) == 3, v.Call(in) represents the Go call v(in[0], in[1], in[2]). Call panics if v's Kind is not Func. It returns the output results as Values. As in Go, each input argument must be assignable to the type of the function's corresponding input parameter. If v is a variadic function, Call creates the variadic slice parameter itself, copying in the corresponding values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6710d59342e8f6e8d403ac622a838f3bc147d96d" translate="yes" xml:space="preserve">
          <source>Call does a JavaScript call to the method m of value v with the given arguments. It panics if v has no method m. The arguments get mapped to JavaScript values according to the ValueOf function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="565e55a0c32cf7eff3af3e89a785aa6c9178e700" translate="yes" xml:space="preserve">
          <source>Call invokes the named function, waits for it to complete, and returns its error status.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53b636c9f40f5a663ef2162f73a7b02c6ae8df7a" translate="yes" xml:space="preserve">
          <source>Call represents an active RPC.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42512af352e3a9143ab5a1551cc60bc2ee819eb1" translate="yes" xml:space="preserve">
          <source>CallSlice calls the variadic function v with the input arguments in, assigning the slice in[len(in)-1] to v's final variadic argument. For example, if len(in) == 3, v.CallSlice(in) represents the Go call v(in[0], in[1], in[2]...). CallSlice panics if v's Kind is not Func or if v is not variadic. It returns the output results as Values. As in Go, each input argument must be assignable to the type of the function's corresponding input parameter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ccfaaae6e5365f5a9c5349e604bae17caa0cd30" translate="yes" xml:space="preserve">
          <source>Caller reports file and line number information about function invocations on the calling goroutine's stack. The argument skip is the number of stack frames to ascend, with 0 identifying the caller of Caller. (For historical reasons the meaning of skip differs between Caller and Callers.) The return values report the program counter, file name, and line number within the file of the corresponding call. The boolean ok is false if it was not possible to recover the information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02ae9a5027491acdc64509b68ea3793e2a002174" translate="yes" xml:space="preserve">
          <source>Caller should close resp.Body when done reading from it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03be0dfee4d9e39d0d117a1225a797fe3d2aa3a2" translate="yes" xml:space="preserve">
          <source>Callers fills the slice pc with the return program counters of function invocations on the calling goroutine's stack. The argument skip is the number of stack frames to skip before recording in pc, with 0 identifying the frame for Callers itself and 1 identifying the caller of Callers. It returns the number of entries written to pc.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a4b4218d3232d882f79940537de8c89b5fd061d" translate="yes" xml:space="preserve">
          <source>Callers should always process the n &amp;gt; 0 bytes returned before considering the error err. Doing so correctly handles I/O errors that happen after reading some bytes and also both of the allowed EOF behaviors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5500489165f32b46a8cb2a14a955f9a8a8615079" translate="yes" xml:space="preserve">
          <source>Callers that wish to set the fields in Writer.Header must do so before the first call to Write, Flush, or Close.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b857a35e7ef780b3bca39a750115fc4863a61aa5" translate="yes" xml:space="preserve">
          <source>CallersFrames takes a slice of PC values returned by Callers and prepares to return function/file/line information. Do not change the slice until you are done with the Frames.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a84e46e9c20e9e9bc4eb917cab523be97fdefd53" translate="yes" xml:space="preserve">
          <source>Calling Goexit from the main goroutine terminates that goroutine without func main returning. Since func main has not returned, the program continues execution of other goroutines. If all other goroutines exit, the program crashes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc5490ba97b9e986ad10d279577e4999816c63b0" translate="yes" xml:space="preserve">
          <source>Calling Multistream(false) disables this behavior; disabling the behavior can be useful when reading file formats that distinguish individual gzip data streams or mix gzip data streams with other data streams. In this mode, when the Reader reaches the end of the data stream, Read returns io.EOF. The underlying reader must implement io.ByteReader in order to be left positioned just after the gzip stream. To start the next stream, call z.Reset(r) followed by z.Multistream(false). If there is no next stream, z.Reset(r) will return io.EOF.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4710fe1acfac37179ab4f289d05ef3abb75eaede" translate="yes" xml:space="preserve">
          <source>Calling Peek prevents a UnreadByte or UnreadRune call from succeeding until the next read operation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fdec16c5797808f1fc79d6af2ca8ac766041238a" translate="yes" xml:space="preserve">
          <source>Calling Read on special types like TypeLink, TypeSymlink, TypeChar, TypeBlock, TypeDir, and TypeFifo returns (0, io.EOF) regardless of what the Header.Size claims.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b56745d4818c01d2eb9c7bc08a036418118904a0" translate="yes" xml:space="preserve">
          <source>Calling Write on special types like TypeLink, TypeSymlink, TypeChar, TypeBlock, TypeDir, and TypeFifo returns (0, ErrWriteTooLong) regardless of what the Header.Size claims.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f4fdb7a85ec6970a8fd4027def05274bf398ff4" translate="yes" xml:space="preserve">
          <source>Calls to Scan will invoke the error handler err if they encounter a syntax error and err is not nil. Also, for each error encountered, the Scanner field ErrorCount is incremented by one. The mode parameter determines how comments are handled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9520d1b14d042e07c9d98804cc798cd3d2a5e80a" translate="yes" xml:space="preserve">
          <source>CanAddr reports whether the value's address can be obtained with Addr. Such values are called addressable. A value is addressable if it is an element of a slice, an element of an addressable array, a field of an addressable struct, or the result of dereferencing a pointer. If CanAddr returns false, calling Addr will panic.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9e93f69f0267b95bffc55cf6d2bce8ffc82c90c" translate="yes" xml:space="preserve">
          <source>CanBackquote</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e3695d8bbea64e7cfee0c2febc4baffda231b85" translate="yes" xml:space="preserve">
          <source>CanBackquote reports whether the string s can be represented unchanged as a single-line backquoted string without control characters other than tab.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78221e784584f0078bc92b5760d985ffb9359714" translate="yes" xml:space="preserve">
          <source>CanInterface reports whether Interface can be used without panicking.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4cf39f0aa0cf531b70a8777365e8930d66ae49b" translate="yes" xml:space="preserve">
          <source>CanSet reports whether the value of v can be changed. A Value can be changed only if it is addressable and was not obtained by the use of unexported struct fields. If CanSet returns false, calling Set or any type-specific setter (e.g., SetBool, SetInt) will panic.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24a49319ca493616d5fa4fa87e1716f05207717f" translate="yes" xml:space="preserve">
          <source>CancelRequest cancels an in-flight request by closing its connection. CancelRequest should only be called after RoundTrip has returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d04bdcea13bcd3bdd6348c2940648b9b6511c540" translate="yes" xml:space="preserve">
          <source>Canceled is the error returned by Context.Err when the context is canceled.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e7f338b3f2968bf411cdc0aae8bcbdbfc36af1f" translate="yes" xml:space="preserve">
          <source>Canceling this context releases resources associated with it, so code should call cancel as soon as the operations running in this Context complete.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2af769757a430f4dad8d1af9ff5c57b16b4ebdd" translate="yes" xml:space="preserve">
          <source>Canceling this context releases resources associated with it, so code should call cancel as soon as the operations running in this Context complete:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="076b17958a05cb472fa64e406ea55e8b9d2a4270" translate="yes" xml:space="preserve">
          <source>Canon returns the canonical version of r. The returned rectangle has minimum and maximum coordinates swapped if necessary so that it is well-formed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="955b396a548b98a7408f3e25b749827717df449d" translate="yes" xml:space="preserve">
          <source>CanonicalHeaderKey returns the canonical format of the header key s. The canonicalization converts the first letter and any letter following a hyphen to upper case; the rest are converted to lowercase. For example, the canonical key for &quot;accept-encoding&quot; is &quot;Accept-Encoding&quot;. If s contains a space or invalid header field bytes, it is returned without modifications.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b23fb17a1a69fd7b73a76bb40a7097d29243e47" translate="yes" xml:space="preserve">
          <source>CanonicalMIMEHeaderKey returns the canonical format of the MIME header key s. The canonicalization converts the first letter and any letter following a hyphen to upper case; the rest are converted to lowercase. For example, the canonical key for &quot;accept-encoding&quot; is &quot;Accept-Encoding&quot;. MIME header keys are assumed to be ASCII only. If s contains a space or invalid header field bytes, it is returned without modifications.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed0ee546d9c8e677c59e62830ae730eb46232fdc" translate="yes" xml:space="preserve">
          <source>Cap returns the capacity of the buffer's underlying byte slice, that is, the total space allocated for the buffer's data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbc6d32f023dd61bfc5cebe3046b61c0f76810e0" translate="yes" xml:space="preserve">
          <source>Cap returns the capacity of the builder's underlying byte slice. It is the total space allocated for the string being built and includes any bytes already written.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee5354b348838f7a1d94dcdaae1e7a7ecd556f4c" translate="yes" xml:space="preserve">
          <source>Cap returns v's capacity. It panics if v's Kind is not Array, Chan, or Slice.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6a561977254ff2870059baae45cac89214e315f" translate="yes" xml:space="preserve">
          <source>CapNames walks the regexp to find the names of capturing groups.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f9517c836ce60929e990358e7eb6e0b2e9fdc68" translate="yes" xml:space="preserve">
          <source>Carriage returns before newline characters are silently removed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be2bf5b72a47b7c7e2283e70ea0cf31afd8bde9b" translate="yes" xml:space="preserve">
          <source>CaseRange represents a range of Unicode code points for simple (one code point to one code point) case conversion. The range runs from Lo to Hi inclusive, with a fixed stride of 1. Deltas are the number to add to the code point to reach the code point for a different case for that character. They may be negative. If zero, it means the character is in the corresponding case. There is a special case representing sequences of alternating corresponding Upper and Lower pairs. It appears with a fixed Delta of</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0242bb8f76d24fc855f5fd331326f647ebd09abb" translate="yes" xml:space="preserve">
          <source>CaseRanges is the table describing case mappings for all letters with non-self mappings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b206a07c1e9d49addcc7990e688904da778cacb" translate="yes" xml:space="preserve">
          <source>Categories is the set of Unicode category tables.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e587577dc59bfafa8f316d5453515821dcbce5ea" translate="yes" xml:space="preserve">
          <source>Cbrt returns the cube root of x.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2432d530c0145aab3bfa5662975e8d421e122d9e" translate="yes" xml:space="preserve">
          <source>Ceil</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46536626864b36557258c2a5e53e6d4465979040" translate="yes" xml:space="preserve">
          <source>Ceil returns the least integer value greater than or equal to x.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67d301941e6984f09b404c3b5e5d0192a1b67ac6" translate="yes" xml:space="preserve">
          <source>CertPool is a set of certificates.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ede2f55f16b28db355480b3a24e5f428305766b" translate="yes" xml:space="preserve">
          <source>Certificate returns the certificate used by the server, or nil if the server doesn't use TLS.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed0353f9bd9f8fff93bbda397f0df68cf8c98c19" translate="yes" xml:space="preserve">
          <source>Certificate.Verify</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b24b78d8382125c2a275a4ff2231b6b38a8636ed" translate="yes" xml:space="preserve">
          <source>CertificateInvalidError results when an odd error occurs. Users of this library probably want to handle all these errors uniformly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4be4f43abf6e2f39e81e91b60f959656ba9b756e" translate="yes" xml:space="preserve">
          <source>CertificateList represents the ASN.1 structure of the same name. See RFC 5280, section 5.1. Use Certificate.CheckCRLSignature to verify the signature.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a288f637c3c9d1d271c3c19c56590c8c85a0eb17" translate="yes" xml:space="preserve">
          <source>CertificateRequest represents a PKCS #10, certificate signature request.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2950fae6302110dd8a52ed33e4c5f6542549cb2f" translate="yes" xml:space="preserve">
          <source>CertificateRequestInfo contains information from a server's CertificateRequest message, which is used to demand a certificate and proof of control from a client.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec50387142af3be963c7121f78293d51ce51206a" translate="yes" xml:space="preserve">
          <source>ChainNode holds a term followed by a chain of field accesses (identifier starting with '.'). The names may be chained ('.x.y'). The periods are dropped from each ident.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41142232bdd3270941be56093eead521d6e00ed0" translate="yes" xml:space="preserve">
          <source>ChanDir represents a channel type's direction.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d71e228872d9403c9b6594fd69625436645be6ba" translate="yes" xml:space="preserve">
          <source>ChanOf returns the channel type with the given direction and element type. For example, if t represents int, ChanOf(RecvDir, t) represents &amp;lt;-chan int.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b34ef43c1dc118fd5f3dd2ddc7f7e9e87461df60" translate="yes" xml:space="preserve">
          <source>Changing the behavior of signals in Go programs</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5d17f750ce0c90b1d8f2246a376b4e9bb0451a7" translate="yes" xml:space="preserve">
          <source>Channel, complex, and function values cannot be encoded in JSON. Attempting to encode such a value causes Marshal to return an UnsupportedTypeError.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d81d4ef28354031a16bbd07dbbe84ad7e58f4aef" translate="yes" xml:space="preserve">
          <source>Character class elements:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9253fc85685075e92fb2c2cb576e68b41cb8633e" translate="yes" xml:space="preserve">
          <source>Chdir changes the current working directory to the file, which must be a directory. If there is an error, it will be of type *PathError.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9f7b1c8f8ac2861de3e2acab3384aee64fee3f5" translate="yes" xml:space="preserve">
          <source>Chdir changes the current working directory to the named directory. If there is an error, it will be of type *PathError.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dcb27e63c2fbdba64841ab2910051fa4a2c3f8f9" translate="yes" xml:space="preserve">
          <source>Check looks for an input to f, any function that returns bool, such that f returns false. It calls f repeatedly, with arbitrary values for each argument. If f returns false on a given input, Check returns that input as a *CheckError. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a85aadfcc5e9ea6b8907d6a9f8e98f8accc3fc5" translate="yes" xml:space="preserve">
          <source>Check type-checks a package and returns the resulting package object and the first error if any. Additionally, if info != nil, Check populates each of the non-nil maps in the Info struct.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d67e1187d47640f702b28a10cc6f53a307ae234" translate="yes" xml:space="preserve">
          <source>CheckCRLSignature checks that the signature in crl is from c.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f93ce303d817100b6d50ba51e9c0c4c774a0a092" translate="yes" xml:space="preserve">
          <source>CheckEqual looks for an input on which f and g return different results. It calls f and g repeatedly with arbitrary values for each argument. If f and g return different answers, CheckEqual returns a *CheckEqualError describing the input and the outputs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56c96020e004e0f968e6f808827a8f0ef9a0f959" translate="yes" xml:space="preserve">
          <source>CheckExpr type checks the expression expr as if it had appeared at position pos of package pkg. Type information about the expression is recorded in info.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3afa858fd88c383b05b45b059da6d700c31f62d0" translate="yes" xml:space="preserve">
          <source>CheckSignature reports whether the signature on c is valid.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b028d2f26cf8934255900c683e9051aaedadc107" translate="yes" xml:space="preserve">
          <source>CheckSignature verifies that signature is a valid signature over signed from c's public key.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f1469e6f7aeb717fe6fd2a8ee3f4b0eb8bea924" translate="yes" xml:space="preserve">
          <source>CheckSignatureFrom verifies that the signature on c is a valid signature from parent.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf0a25d9a79670b543c8f6d54e561382ee2327c8" translate="yes" xml:space="preserve">
          <source>Checksum returns the Adler-32 checksum of data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77add3d3bab3db380a97be8fd992a744496e9205" translate="yes" xml:space="preserve">
          <source>Checksum returns the CRC-32 checksum of data using the polynomial represented by the Table.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35a88a5d5ae4a4db8d25e096b438fe712928f70b" translate="yes" xml:space="preserve">
          <source>Checksum returns the CRC-64 checksum of data using the polynomial represented by the Table.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cefd992ce8689aa4a5e8a938343def9a5adb2161" translate="yes" xml:space="preserve">
          <source>ChecksumIEEE returns the CRC-32 checksum of data using the IEEE polynomial.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2274ec5f679712a687a101a1f53de838aacd04a3" translate="yes" xml:space="preserve">
          <source>Child returns the i'th child scope for 0 &amp;lt;= i &amp;lt; NumChildren().</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72a2cf7fd19dd78efb6d310d1146546965c630cd" translate="yes" xml:space="preserve">
          <source>Chmod</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54381b37df415f17ee19fa61fb2c262ae4bffd97" translate="yes" xml:space="preserve">
          <source>Chmod changes the mode of the file to mode. If there is an error, it will be of type *PathError.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae20e5d14b6f7b19f0570009a48263e1096ec5dd" translate="yes" xml:space="preserve">
          <source>Chmod changes the mode of the named file to mode. If the file is a symbolic link, it changes the mode of the link's target. If there is an error, it will be of type *PathError.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c345fc1bf8f6407d62f187432fbbc92a5cd52616" translate="yes" xml:space="preserve">
          <source>Chown changes the numeric uid and gid of the named file. If the file is a symbolic link, it changes the uid and gid of the link's target. A uid or gid of -1 means to not change that value. If there is an error, it will be of type *PathError.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d15192f283b6552c623863f471ea76b78149f1dd" translate="yes" xml:space="preserve">
          <source>Chown changes the numeric uid and gid of the named file. If there is an error, it will be of type *PathError.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3501f50820f444e076a0c8ebd0137aa20f349607" translate="yes" xml:space="preserve">
          <source>Chtimes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74fad201512b306ebb341d1f65416d99588ec73b" translate="yes" xml:space="preserve">
          <source>Chtimes changes the access and modification times of the named file, similar to the Unix utime() or utimes() functions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1b2218514bfbf9d096fe76cc6d68997cdfcde1d" translate="yes" xml:space="preserve">
          <source>Class is found in Header.Ident[EI_CLASS] and Header.Class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa893d87e1fa0a69c7942dd1e65f3bd1932e53d1" translate="yes" xml:space="preserve">
          <source>Clean</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c505b06ae1e4508892a4d23e86b20501c6b00af4" translate="yes" xml:space="preserve">
          <source>Clean returns the shortest path name equivalent to path by purely lexical processing. It applies the following rules iteratively until no further processing can be done:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15d1092fa425ad399701105f3ee2808a7d89faf5" translate="yes" xml:space="preserve">
          <source>Clearenv deletes all environment variables.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b3b0b991a98add944cc0471a5856e4b7e7dfe62" translate="yes" xml:space="preserve">
          <source>Client represents an RPC Client. There may be multiple outstanding Calls associated with a single Client, and a Client may be used by multiple goroutines simultaneously.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50cd2d3f91314c6d5d9767c58d2189bde9c3a214" translate="yes" xml:space="preserve">
          <source>Client returns a new TLS client side connection using conn as the underlying transport. The config cannot be nil: users must set either ServerName or InsecureSkipVerify in the config.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1829d60c1d2d2fa9fd020c834b748c41d1074494" translate="yes" xml:space="preserve">
          <source>Client returns an HTTP client configured for making requests to the server. It is configured to trust the server's TLS test certificate and will close its idle connections on Server.Close.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4498f52d7e616076230ca8a01a4098528505216" translate="yes" xml:space="preserve">
          <source>ClientAuthType declares the policy the server will follow for TLS Client Authentication.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3619c3780ec5f3cb596f3b3c80136fe6cc01cadb" translate="yes" xml:space="preserve">
          <source>ClientConn is an artifact of Go's early HTTP implementation. It is low-level, old, and unused by Go's current HTTP stack. We should have deleted it before Go 1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20d2d94a50bd23a9f13836749a81ece303a954e6" translate="yes" xml:space="preserve">
          <source>ClientHelloInfo contains information from a ClientHello message in order to guide certificate selection in the GetCertificate callback.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd79b5b7a4be54c9b22aebd238e09a232cbd8025" translate="yes" xml:space="preserve">
          <source>ClientSessionCache is a cache of ClientSessionState objects that can be used by a client to resume a TLS session with a given server. ClientSessionCache implementations should expect to be called concurrently from different goroutines. Up to TLS 1.2, only ticket-based resumption is supported, not SessionID-based resumption. In TLS 1.3 they were merged into PSK modes, which are supported via this interface.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4261cd72e26b8a6f4e1ee1c0b615bda2af7c152e" translate="yes" xml:space="preserve">
          <source>ClientSessionState contains the state needed by clients to resume TLS sessions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b8568bd00779243f275b569a827fb1a4ee4d798" translate="yes" xml:space="preserve">
          <source>ClientTrace currently traces a single HTTP request &amp;amp; response during a single round trip and has no hooks that span a series of redirected requests.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2c0d131f45dce2b6840cda576beab00d7f77dc6" translate="yes" xml:space="preserve">
          <source>ClientTrace is a set of hooks to run at various stages of an outgoing HTTP request. Any particular hook may be nil. Functions may be called concurrently from different goroutines and some may be called after the request has completed or failed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f78c7958600ab8163b169a5392c03ab112bc9818" translate="yes" xml:space="preserve">
          <source>Clients and Transports are safe for concurrent use by multiple goroutines and for efficiency should only be created once and re-used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6cf2cc8bbf640eaf7f640276f5d3bedeec8ec3e6" translate="yes" xml:space="preserve">
          <source>Clients of ReadAt can execute parallel ReadAt calls on the same input source.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a400bb26da184d79eb5b2958194d8a32b13bc955" translate="yes" xml:space="preserve">
          <source>Clients of WriteAt can execute parallel WriteAt calls on the same destination if the ranges do not overlap.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fec7b0e20e9b1f7f723676dab3a1767767a84b57" translate="yes" xml:space="preserve">
          <source>Clock returns the hour, minute, and second within the day specified by t.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a51aa154240abaf7f49170efa4282e63e6b0af7c" translate="yes" xml:space="preserve">
          <source>Clone returns a copy of h or nil if h is nil.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d0c309a73cbbbf8259510e09413f8159d0e1432" translate="yes" xml:space="preserve">
          <source>Clone returns a deep copy of r with its context changed to ctx. The provided ctx must be non-nil.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d40a70840ac8a8b0e1068c9c26e4552921cb6234" translate="yes" xml:space="preserve">
          <source>Clone returns a deep copy of t's exported fields.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7d21868e4f3fbff70ffe77108b1ebd0c6e3dad8" translate="yes" xml:space="preserve">
          <source>Clone returns a duplicate of the template, including all associated templates. The actual representation is not copied, but the name space of associated templates is, so further calls to Parse in the copy will add templates to the copy but not to the original. Clone can be used to prepare common templates and use them with variant definitions for other templates by adding the variants after the clone is made.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00f9f61d9b08e615a156dcfb06e61048e8e52ecb" translate="yes" xml:space="preserve">
          <source>Clone returns a shallow clone of c. It is safe to clone a Config that is being used concurrently by a TLS client or server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8453ed0e61fef3b985c7beb9516a6f372a19b47a" translate="yes" xml:space="preserve">
          <source>Close calls Hijack and then also closes the underlying connection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52273c6bb0b067f25179883936e89e4ec6820203" translate="yes" xml:space="preserve">
          <source>Close calls the underlying codec's Close method. If the connection is already shutting down, ErrShutdown is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c13ba2fc343eab1245b8fef1e7cc062cd2a1602" translate="yes" xml:space="preserve">
          <source>Close closes a connection to the syslog daemon.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eeb4b4090ffa478f7d84bcfa0c7d691724864926" translate="yes" xml:space="preserve">
          <source>Close closes the File, rendering it unusable for I/O. On files that support SetDeadline, any pending I/O operations will be canceled and return immediately with an error. Close will return an error if it has already been called.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d45ca0df5edf4ea7611729ef661a62fd651286e3" translate="yes" xml:space="preserve">
          <source>Close closes the File. If the File was created using NewFile directly instead of Open, Close has no effect.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88e02dffb069cff4304f88a87d5f3eebaaf4bd7a" translate="yes" xml:space="preserve">
          <source>Close closes the Reader. It does not close the underlying io.Reader. In order for the GZIP checksum to be verified, the reader must be fully consumed until the io.EOF.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0001566c562646043d2cfebeb74f3e43dd5b2e61" translate="yes" xml:space="preserve">
          <source>Close closes the Rows, preventing further enumeration. If Next is called and returns false and there are no further result sets, the Rows are closed automatically and it will suffice to check the result of Err. Close is idempotent and does not affect the result of Err.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3d80a35eb8198958ef52ff7593c60df2ce5c5fe" translate="yes" xml:space="preserve">
          <source>Close closes the Writer by flushing any unwritten data to the underlying io.Writer and writing the GZIP footer. It does not close the underlying io.Writer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ffc4ad566ba30635a22eb5157801170e5d89ec5c" translate="yes" xml:space="preserve">
          <source>Close closes the Writer, flushing any unwritten data to the underlying io.Writer, but does not close the underlying io.Writer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dcb888cd0e9b17f68ae4a9ca892eb5a899c7a8d9" translate="yes" xml:space="preserve">
          <source>Close closes the Zip file, rendering it unusable for I/O.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="170e39e4cfe5f423996aef0511a13fa738d82767" translate="yes" xml:space="preserve">
          <source>Close closes the channel v. It panics if v's Kind is not Chan.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e72aa781c9fdcf98527fd4aefce87b04e14f2dd" translate="yes" xml:space="preserve">
          <source>Close closes the connection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0afd5857186a670ed9831e4c77eff40bb3fcd33" translate="yes" xml:space="preserve">
          <source>Close closes the database and prevents new queries from starting. Close then waits for all queries that have started processing on the server to finish.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7394665dc5b3d21e6abc1566eec56cbff266f10" translate="yes" xml:space="preserve">
          <source>Close closes the reader; subsequent writes to the write half of the pipe will return the error ErrClosedPipe.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4bdc20107bf4231f79596e877811964979986697" translate="yes" xml:space="preserve">
          <source>Close closes the statement.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="106e9814bb640efe24e830aa126c2c54c6dc95c2" translate="yes" xml:space="preserve">
          <source>Close closes the tar archive by flushing the padding, and writing the footer. If the current file (from a prior call to WriteHeader) is not fully written, then this returns an error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="352516c54e1182715d16a990d5c36e2341135718" translate="yes" xml:space="preserve">
          <source>Close closes the underlying Writer and returns its Close return value, if the Writer is also an io.Closer. Otherwise it returns nil.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52ed6590b2322e36c0e5bf1047b994dc45204fd3" translate="yes" xml:space="preserve">
          <source>Close closes the writer; subsequent reads from the read half of the pipe will return no bytes and EOF.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="200b8523cd103f0c8cfd18d1f36d3268f60a35d8" translate="yes" xml:space="preserve">
          <source>Close does not attempt to close (and does not even know about) any hijacked connections, such as WebSockets.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c8f276efb10d5e03a4e7e0b4c3a39470cd47092" translate="yes" xml:space="preserve">
          <source>Close finishes the multipart message and writes the trailing boundary end line to the output.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4729b3f8428d27fe7962c988912499dee821e961" translate="yes" xml:space="preserve">
          <source>Close finishes writing the zip file by writing the central directory. It does not close the underlying writer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8c5f7e41ae46e45fdb752f5060f8f1c692afd60" translate="yes" xml:space="preserve">
          <source>Close flushes and closes the writer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a176e6e0b76092540fa57054871f1d181440c357" translate="yes" xml:space="preserve">
          <source>Close immediately closes all active net.Listeners and any connections in state StateNew, StateActive, or StateIdle. For a graceful shutdown, use Shutdown.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe447e0ee4298c5937baf1a06d93345aa464fbd5" translate="yes" xml:space="preserve">
          <source>Close returns any error returned from closing the Server's underlying Listener(s).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ebef25a1a35880c50df3b65075b191c54c634f29" translate="yes" xml:space="preserve">
          <source>Close returns the connection to the connection pool. All operations after a Close will return with ErrConnDone. Close is safe to call concurrently with other operations and will block until all other operations finish. It may be useful to first cancel any used context and then call close directly after.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37eb62a0940cfdcee1af7061b837f9799f402796" translate="yes" xml:space="preserve">
          <source>Close shuts down the server and blocks until all outstanding requests on this server have completed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8fbcf4b32e3ff8e88655f1d0a5b7d15a237aeb7" translate="yes" xml:space="preserve">
          <source>Close stops listening on the TCP address. Already Accepted connections are not closed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d08ec13311a2751b4b2525f7b1f553c0ef38c594" translate="yes" xml:space="preserve">
          <source>Close stops listening on the Unix address. Already accepted connections are not closed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="389d20cf359b73e0e7980ec6fac9aa975d57569a" translate="yes" xml:space="preserve">
          <source>CloseClientConnections closes any open HTTP connections to the test Server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="261f4fda459d0516a122cc5d4396c6dc486f9e9c" translate="yes" xml:space="preserve">
          <source>CloseIdleConnections closes any connections on its Transport which were previously connected from previous requests but are now sitting idle in a &quot;keep-alive&quot; state. It does not interrupt any connections currently in use.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98cdec9e3ed766ae575089db46108dde804402bf" translate="yes" xml:space="preserve">
          <source>CloseIdleConnections closes any connections which were previously connected from previous requests but are now sitting idle in a &quot;keep-alive&quot; state. It does not interrupt any connections currently in use.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd124a0e692a348dba461a3358554e58e81ecbd1" translate="yes" xml:space="preserve">
          <source>CloseRead shuts down the reading side of the TCP connection. Most callers should just use Close.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44bd7cea9ee27035c3ae1c56d08cfc3f4f5d4af4" translate="yes" xml:space="preserve">
          <source>CloseRead shuts down the reading side of the Unix domain connection. Most callers should just use Close.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c99ee46f4965c6ae12155ff0c3acac929ea2d2ba" translate="yes" xml:space="preserve">
          <source>CloseWithError always returns nil.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7cb57262be19b34a83137a915ff126b817e8cd84" translate="yes" xml:space="preserve">
          <source>CloseWithError closes the reader; subsequent writes to the write half of the pipe will return the error err.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="323f38f99d402fc8898abc494103623650f844e1" translate="yes" xml:space="preserve">
          <source>CloseWithError closes the writer; subsequent reads from the read half of the pipe will return no bytes and the error err, or EOF if err is nil.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62cb9bc4e7dc627b7e88dd6fc70819d95287b7de" translate="yes" xml:space="preserve">
          <source>CloseWrite shuts down the writing side of the TCP connection. Most callers should just use Close.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b5fa14df50780ec1f98f4b1599b904896412a44" translate="yes" xml:space="preserve">
          <source>CloseWrite shuts down the writing side of the Unix domain connection. Most callers should just use Close.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12c02b4b8ced685856a49bdd3fa95819cddecdb4" translate="yes" xml:space="preserve">
          <source>CloseWrite shuts down the writing side of the connection. It should only be called once the handshake has completed and does not call CloseWrite on the underlying connection. Most callers should just use Close.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="025c9e3cff2e6d4f799242ed81fe111ea5df8d42" translate="yes" xml:space="preserve">
          <source>Closer is the interface that wraps the basic Close method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf86a4428400033e41e83adaf8fcd42c758c9a66" translate="yes" xml:space="preserve">
          <source>Cmd is a convenience method that sends a command after waiting its turn in the pipeline. The command text is the result of formatting format with args and appending \r\n. Cmd returns the id of the command, for use with StartResponse and EndResponse.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4df69b916cd12f7de468263676e94c5c75d74be" translate="yes" xml:space="preserve">
          <source>Cmd represents an external command being prepared or run.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8341f2d7cc5348428398c452871f044231d072b1" translate="yes" xml:space="preserve">
          <source>Cmd.CombinedOutput</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b49f432e04db8bb6f0ff26554d0c04cd2474b188" translate="yes" xml:space="preserve">
          <source>Cmd.Output</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d9082730686869c07fbf083f9d88bceb2781e29" translate="yes" xml:space="preserve">
          <source>Cmd.Run</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58d8e5abab254c9f803a0fbf81ec5a80f295d3f6" translate="yes" xml:space="preserve">
          <source>Cmd.Start</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d1c537c3fedeb55a89bcf9247fbaee7db539a47" translate="yes" xml:space="preserve">
          <source>Cmd.StderrPipe</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1e9157b17d06c02c7b6351858c7dc306f264ffa" translate="yes" xml:space="preserve">
          <source>Cmd.StdinPipe</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="426cc9ae5b0f1bc8c33ffa706427366531644c95" translate="yes" xml:space="preserve">
          <source>Cmd.StdoutPipe</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7da7ae25e3ce7a764681c94e7a21a14faa2a048f" translate="yes" xml:space="preserve">
          <source>Cmdline responds with the running program's command line, with arguments separated by NUL bytes. The package initialization registers it as /debug/pprof/cmdline.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e499091b6f0f3957334468fbd916d761cc79bbf6" translate="yes" xml:space="preserve">
          <source>Cmp compares x and y and returns:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8bfa3d3867edbba78ae419fddd813026c9ccc33" translate="yes" xml:space="preserve">
          <source>CmpAbs compares the absolute values of x and y and returns:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57049c5e8c996230fc39d709b36268d07f37c357" translate="yes" xml:space="preserve">
          <source>CmsgLen returns the value to store in the Len field of the Cmsghdr structure, taking into account any necessary alignment.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ab8b85fb5b07863e8d88db990fae36dc884bec8" translate="yes" xml:space="preserve">
          <source>CmsgSpace returns the number of bytes an ancillary element with payload of the passed data length occupies.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48325d7b0e0596e2c4e51ec147f486ed8c008263" translate="yes" xml:space="preserve">
          <source>Code Effect Property: &quot;... only code specified by the template author should run as a result of injecting the template output into a page and all code specified by the template author should run as a result of the same.&quot;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca567dda33cdf7058994a40bb9ef4db135c7d283" translate="yes" xml:space="preserve">
          <source>Code:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b14d7cd0be2bfa55cd088eb8efaed3cb2199731" translate="yes" xml:space="preserve">
          <source>Color can convert itself to alpha-premultiplied 16-bits per channel RGBA. The conversion may be lossy.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9fd162f1f3146515349a168ad0c0bee532290150" translate="yes" xml:space="preserve">
          <source>ColorModel implements the Image interface.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98107aade8283409c4e0728cc2278d75e786fabe" translate="yes" xml:space="preserve">
          <source>ColumnConverter may be optionally implemented by Stmt if the statement is aware of its own columns' types and can convert from any type to a driver Value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5c3da66a9ea9f5f89916fe885dde7b78b155333" translate="yes" xml:space="preserve">
          <source>ColumnType contains the name and type of a column.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1efdea11843f07d3a2895f7ecdd3254afb2b05f" translate="yes" xml:space="preserve">
          <source>ColumnTypes returns column information such as column type, length, and nullable. Some information may not be available from some drivers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7b0a72c46f57d4aaacd8fb638f17124f271db49" translate="yes" xml:space="preserve">
          <source>Columns returns the column names. Columns returns an error if the rows are closed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef0c9247ce98d2d969ab4480bf85645f18a4849a" translate="yes" xml:space="preserve">
          <source>Combination of fork and exec, careful to be thread safe.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7490336ab129f1a9b38c44a15f2efc1193a790bb" translate="yes" xml:space="preserve">
          <source>CombinedOutput runs the command and returns its combined standard output and standard error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba546d35dfd34c127cd8bc57f35ce0b69f3c2efb" translate="yes" xml:space="preserve">
          <source>Comma is the field delimiter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8901895fb1b1d4c4ea2fec368c25176bf73e2f7e" translate="yes" xml:space="preserve">
          <source>Command</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9331e1a8ab2aef9b980540768d06019630abf1c7" translate="yes" xml:space="preserve">
          <source>Command (Environment)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2efc4b10527a5dc4a84c585a3102ee37add55b4" translate="yes" xml:space="preserve">
          <source>Command line flag syntax</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63fa526b0ed74d3db6d8290c146d52ec2eac85fb" translate="yes" xml:space="preserve">
          <source>Command returns the Cmd struct to execute the named program with the given arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3abae9e919fccff46e1815da877737ecf731b82f" translate="yes" xml:space="preserve">
          <source>CommandContext</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0905d26f91536a32a803b5ba92c26b9a1cc54f0" translate="yes" xml:space="preserve">
          <source>CommandContext is like Command but includes a context.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4fe0d3f2a541495d49598b4c3afabfa5ee1e04f4" translate="yes" xml:space="preserve">
          <source>CommandLine is the default set of command-line flags, parsed from os.Args. The top-level functions such as BoolVar, Arg, and so on are wrappers for the methods of CommandLine.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b87781df7cecba61ce8de025314ef45104db43ee" translate="yes" xml:space="preserve">
          <source>CommandNode holds a command (a pipeline inside an evaluating action).</source>
          <target state="new"/>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
