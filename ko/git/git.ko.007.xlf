<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="git">
    <body>
      <group id="git">
        <trans-unit id="6da92828bff93237c525d505f61963005fa8aa9b" translate="yes" xml:space="preserve">
          <source>Merges can be also made simpler by using smaller branches or by using many topic branches instead of only long version related branches.</source>
          <target state="translated">더 작은 브랜치를 사용하거나 긴 버전 관련 브랜치 대신 많은 토픽 브랜치를 사용하여 병합을 더 단순하게 만들 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="18462046f484e3565df5821cdce8eadab95f1224" translate="yes" xml:space="preserve">
          <source>Merges have many advantages, so we try to solve as many problems as possible with merges alone. Cherry-picking is still occasionally useful; see &quot;Merging upwards&quot; below for an example.</source>
          <target state="translated">병합에는 많은 장점이 있으므로 병합만으로 가능한 많은 문제를 해결하려고합니다. 체리 따기는 여전히 유용합니다. 예는 아래의 &quot;위로 병합&quot;을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="40de0d4de887a374168bf79e72c7aa0fa4594d6e" translate="yes" xml:space="preserve">
          <source>Merging</source>
          <target state="translated">Merging</target>
        </trans-unit>
        <trans-unit id="f2204607f23628214b6d42add29d21c7f2e29b95" translate="yes" xml:space="preserve">
          <source>Merging branches with differing checkin/checkout attributes</source>
          <target state="translated">체크인 / 체크 아웃 속성이 다른 브랜치 병합</target>
        </trans-unit>
        <trans-unit id="c535f2db054f922c7b696495f8b89a913e2a11c4" translate="yes" xml:space="preserve">
          <source>Merging external work</source>
          <target state="translated">외부 작업 병합</target>
        </trans-unit>
        <trans-unit id="603157d894d36cb77fbe21d75b0d20a12dc01779" translate="yes" xml:space="preserve">
          <source>Merging inside a &lt;a href=&quot;#def_shallow_clone&quot;&gt;shallow clone&lt;/a&gt; will work as long as a merge base is in the recent history. Otherwise, it will be like merging unrelated histories and may have to result in huge conflicts. This limitation may make such a repository unsuitable to be used in merge based workflows.</source>
          <target state="translated">&lt;a href=&quot;#def_shallow_clone&quot;&gt;얕은 복제본&lt;/a&gt; 내부의 병합 은 병합 기록이 최근 기록에있는 한 작동합니다. 그렇지 않으면 관련이없는 기록을 병합하는 것과 같으며 큰 충돌이 발생할 수 있습니다. 이러한 제한으로 인해 이러한 리포지토리가 병합 기반 워크 플로에 사용하기에 적합하지 않을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ab26fbd41a8ed9c39ebd7d129433578a03343e81" translate="yes" xml:space="preserve">
          <source>Merging multiple trees</source>
          <target state="translated">여러 트리 병합</target>
        </trans-unit>
        <trans-unit id="f73ac93115d3cdadc50aebe7fa9b08f89899740b" translate="yes" xml:space="preserve">
          <source>Merging multiple trees, continued</source>
          <target state="translated">여러 개의 나무를 병합하여 계속</target>
        </trans-unit>
        <trans-unit id="98b404243306169adb88696dc4ad2165a137c1ac" translate="yes" xml:space="preserve">
          <source>Merging tag</source>
          <target state="translated">태그 병합</target>
        </trans-unit>
        <trans-unit id="1af53d3a2af732fec14191525698059a5e40b8d4" translate="yes" xml:space="preserve">
          <source>Merging two branches</source>
          <target state="translated">두 가지 병합</target>
        </trans-unit>
        <trans-unit id="6153c9c2afc2b444427af54ff710f1f84e9dda45" translate="yes" xml:space="preserve">
          <source>Merging upwards</source>
          <target state="translated">위쪽으로 병합</target>
        </trans-unit>
        <trans-unit id="5f2cbd107037ed23248e5058a7a64cd6bae05468" translate="yes" xml:space="preserve">
          <source>Miscellaneous</source>
          <target state="translated">Miscellaneous</target>
        </trans-unit>
        <trans-unit id="ede02150d3611f561b342e50cd978f7d1c7b1d2a" translate="yes" xml:space="preserve">
          <source>Miscellaneous capabilities</source>
          <target state="translated">기타 기능</target>
        </trans-unit>
        <trans-unit id="68e2e957e53389b060cb16e85d086c46b6c88151" translate="yes" xml:space="preserve">
          <source>Missing From or In-Reply-To headers will be prompted for.</source>
          <target state="translated">From 또는 In-Reply-To 헤더가 프롬프트됩니다.</target>
        </trans-unit>
        <trans-unit id="00b61542d0211972bc61982931e3e8c50577c383" translate="yes" xml:space="preserve">
          <source>Modified content is represented by &quot;-&quot; lines (removing the old content) followed by &quot;+&quot; lines (adding the replacement content). You can prevent staging the modification by converting &quot;-&quot; lines to &quot; &quot;, and removing &quot;+&quot; lines. Beware that modifying only half of the pair is likely to introduce confusing changes to the index.</source>
          <target state="translated">수정 된 내용은 &quot;-&quot;줄 (이전 내용 제거)과 &quot;+&quot;줄 (대체 내용 추가)로 표시됩니다. &quot;-&quot;행을 &quot;&quot;로 변환하고 &quot;+&quot;행을 제거하면 수정 사항이 스테이징되지 않도록 할 수 있습니다. 쌍의 절반 만 수정하면 색인이 혼동 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="6e5a153f7d9724480c99f8d43544411a606a03ba" translate="yes" xml:space="preserve">
          <source>Modifies the index or directory cache. Each file mentioned is updated into the index and any &lt;code&gt;unmerged&lt;/code&gt; or &lt;code&gt;needs updating&lt;/code&gt; state is cleared.</source>
          <target state="translated">색인 또는 디렉토리 캐시를 수정합니다. 언급 된 각 파일은 색인으로 업데이트되며 &lt;code&gt;unmerged&lt;/code&gt; 또는 &lt;code&gt;needs updating&lt;/code&gt; 가 필요한 상태는 지워집니다.</target>
        </trans-unit>
        <trans-unit id="f87d4010c94238df04ebfd441b3a0111f33d7a25" translate="yes" xml:space="preserve">
          <source>Modify behavior of the next command naming a &amp;lt;ref&amp;gt;. The only valid option is &lt;code&gt;no-deref&lt;/code&gt; to avoid dereferencing a symbolic ref.</source>
          <target state="translated">&amp;lt;ref&amp;gt;를 명명하는 다음 명령의 동작을 수정하십시오. 유일하게 유효한 옵션은 상징적 참조를 역 참조하는 것을 피하기 위해 &lt;code&gt;no-deref&lt;/code&gt; 하다.</target>
        </trans-unit>
        <trans-unit id="eeb79095663bd56bf370bd2096cd4a5ecc99b3a1" translate="yes" xml:space="preserve">
          <source>Modify some files, then add their updated contents to the index:</source>
          <target state="translated">일부 파일을 수정 한 다음 업데이트 된 내용을 색인에 추가하십시오.</target>
        </trans-unit>
        <trans-unit id="19db1a3cc38a1c275e20ba3eb14f5761050f2bac" translate="yes" xml:space="preserve">
          <source>Modifying the index is easy:</source>
          <target state="translated">색인을 수정하는 것은 쉽습니다.</target>
        </trans-unit>
        <trans-unit id="3d6095a82dcd262f6e6b119640e8d9b20bcf7da2" translate="yes" xml:space="preserve">
          <source>More detail on the following is available from the &lt;a href=&quot;user-manual#git-concepts&quot;&gt;Git concepts chapter of the user-manual&lt;/a&gt; and &lt;a href=&quot;gitcore-tutorial&quot;&gt;gitcore-tutorial[7]&lt;/a&gt;.</source>
          <target state="translated">다음에 대한 자세한 내용 &lt;a href=&quot;user-manual#git-concepts&quot;&gt;은 사용자 매뉴얼&lt;/a&gt; 및 &lt;a href=&quot;gitcore-tutorial&quot;&gt;gitcore-tutorial [7]&lt;/a&gt; 의 Git 개념 장 에서 확인할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="06099ebf3c1fb2d228710b5b862871e1eab3c063" translate="yes" xml:space="preserve">
          <source>More generally, a branch that is created from a remote-tracking branch will pull by default from that branch. See the descriptions of the &lt;code&gt;branch.&amp;lt;name&amp;gt;.remote&lt;/code&gt; and &lt;code&gt;branch.&amp;lt;name&amp;gt;.merge&lt;/code&gt; options in &lt;a href=&quot;git-config&quot;&gt;git-config[1]&lt;/a&gt;, and the discussion of the &lt;code&gt;--track&lt;/code&gt; option in &lt;a href=&quot;git-checkout&quot;&gt;git-checkout[1]&lt;/a&gt;, to learn how to control these defaults.</source>
          <target state="translated">더 일반적으로, 원격 추적 분기에서 작성된 분기는 기본적으로 해당 분기에서 가져옵니다. &lt;a href=&quot;git-config&quot;&gt;git-config [1]&lt;/a&gt; 의 &lt;code&gt;branch.&amp;lt;name&amp;gt;.remote&lt;/code&gt; 및 &lt;code&gt;branch.&amp;lt;name&amp;gt;.merge&lt;/code&gt; 옵션에 대한 설명과 &lt;a href=&quot;git-checkout&quot;&gt;git-checkout [1]&lt;/a&gt; 의 &lt;code&gt;--track&lt;/code&gt; 옵션에 대한 설명을 참조하십시오. 이 기본값을 제어하십시오.</target>
        </trans-unit>
        <trans-unit id="415ceff2cb011b2c5375c0d469dab2cba200eaed" translate="yes" xml:space="preserve">
          <source>More generally, among the two commits to compute the merge base from, one is specified by the first commit argument on the command line; the other commit is a (possibly hypothetical) commit that is a merge across all the remaining commits on the command line.</source>
          <target state="translated">보다 일반적으로, 병합 기반을 계산하는 두 커밋 중 하나는 명령 행의 첫 번째 커밋 인수에 의해 지정됩니다. 다른 커밋은 명령 줄의 나머지 모든 커밋에 대한 병합 인 (아마도 가상적인) 커밋입니다.</target>
        </trans-unit>
        <trans-unit id="816cda5b46035bd1542e1775969151ec4a09cada" translate="yes" xml:space="preserve">
          <source>More importantly, it allows the update of a ref file to follow these symbolic pointers, whether they are symlinks or these &quot;regular file symbolic refs&quot;. It follows &lt;strong&gt;real&lt;/strong&gt; symlinks only if they start with &quot;refs/&quot;: otherwise it will just try to read them and update them as a regular file (i.e. it will allow the filesystem to follow them, but will overwrite such a symlink to somewhere else with a regular filename).</source>
          <target state="translated">더 중요한 것은 심볼 파일이 심볼릭 링크이든 &quot;일반 파일 심볼 레퍼런스&quot;이든 관계없이 ref 파일의 업데이트가 이러한 심볼릭 포인터를 따를 수 있다는 것입니다. &quot;refs /&quot;로 시작하는 경우에만 &lt;strong&gt;실제&lt;/strong&gt; 심볼릭 링크를 따릅니다 . 그렇지 않으면 파일을 읽고 일반 파일로 업데이트합니다 (예 : 파일 시스템이 파일 시스템을 따를 수 있도록 허용하지만 이러한 심볼릭 링크를 다른 곳으로 덮어 쓰기) 일반 파일 이름).</target>
        </trans-unit>
        <trans-unit id="2be26ffe68463b96abc5601cef9bdbafbf2f631d" translate="yes" xml:space="preserve">
          <source>More interestingly, you can also give &lt;code&gt;git diff-tree&lt;/code&gt; the &lt;code&gt;--pretty&lt;/code&gt; flag, which tells it to also show the commit message and author and date of the commit, and you can tell it to show a whole series of diffs. Alternatively, you can tell it to be &quot;silent&quot;, and not show the diffs at all, but just show the actual commit message.</source>
          <target state="translated">더 흥미롭게도, &lt;code&gt;git diff-tree&lt;/code&gt; 에 &lt;code&gt;--pretty&lt;/code&gt; 플래그를 지정하면 커밋 메시지와 커밋의 작성자 및 날짜를 ​​표시하고 전체 diff를 표시하도록 지시 할 수 있습니다. 또는 &quot;자동&quot;이라고 말하고 diff를 전혀 표시하지 않고 실제 커밋 메시지 만 표시하면됩니다.</target>
        </trans-unit>
        <trans-unit id="854ef0fd2eba012b7c2e6ecb33388db153e60f9a" translate="yes" xml:space="preserve">
          <source>More on recovery from repository corruption. See: &lt;a href=&quot;https://lore.kernel.org/git/Pine.LNX.4.64.0702272039540.12485@woody.linux-foundation.org/&quot;&gt;https://lore.kernel.org/git/Pine.LNX.4.64.0702272039540.12485@woody.linux-foundation.org/&lt;/a&gt;&lt;a href=&quot;https://lore.kernel.org/git/Pine.LNX.4.64.0702141033400.3604@woody.linux-foundation.org/&quot;&gt;https://lore.kernel.org/git/Pine.LNX.4.64.0702141033400.3604@woody.linux-foundation.org/&lt;/a&gt;</source>
          <target state="translated">저장소 손상 복구에 대한 추가 정보. 참조 : &lt;a href=&quot;https://lore.kernel.org/git/Pine.LNX.4.64.0702272039540.12485@woody.linux-foundation.org/&quot;&gt;https://lore.kernel.org/git/Pine.LNX.4.64.0702272039540.12485@woody.linux-foundation.org/ &lt;/a&gt;&lt;a href=&quot;https://lore.kernel.org/git/Pine.LNX.4.64.0702141033400.3604@woody.linux-foundation.org/&quot;&gt;https://lore.kernel.org/git/Pine.LNX.4.64.0702141033400.3604@ woody.linux-foundation.org/&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="e1784c94f3b7a373b03c0ae45229574de43eee20" translate="yes" xml:space="preserve">
          <source>More precisely, &lt;code&gt;git pull&lt;/code&gt; runs &lt;code&gt;git fetch&lt;/code&gt; with the given parameters and calls &lt;code&gt;git merge&lt;/code&gt; to merge the retrieved branch heads into the current branch. With &lt;code&gt;--rebase&lt;/code&gt;, it runs &lt;code&gt;git rebase&lt;/code&gt; instead of &lt;code&gt;git merge&lt;/code&gt;.</source>
          <target state="translated">보다 정확하게는 &lt;code&gt;git pull&lt;/code&gt; 은 주어진 매개 변수로 &lt;code&gt;git fetch&lt;/code&gt; 를 실행 하고 &lt;code&gt;git merge&lt;/code&gt; 를 호출 하여 검색 된 분기 헤드를 현재 분기로 병합합니다. &lt;code&gt;--rebase&lt;/code&gt; 를 사용하면 &lt;code&gt;git merge&lt;/code&gt; 대신 &lt;code&gt;git rebase&lt;/code&gt; 를 실행 합니다.</target>
        </trans-unit>
        <trans-unit id="17f51f170751975b2cc4764665c6e712fb67447f" translate="yes" xml:space="preserve">
          <source>Most CVS command arguments that read CVS tags or revision numbers (typically -r) work, and also support any git refspec (tag, branch, commit ID, etc). However, CVS revision numbers for non-default branches are not well emulated, and cvs log does not show tags or branches at all. (Non-main-branch CVS revision numbers superficially resemble CVS revision numbers, but they actually encode a git commit ID directly, rather than represent the number of revisions since the branch point.)</source>
          <target state="translated">CVS 태그 또는 개정 번호 (일반적으로 -r)를 읽는 대부분의 CVS 명령 인수는 작동하며 모든 git refspec (태그, 분기, 커밋 ID 등)도 지원합니다. 그러나 기본이 아닌 분기에 대한 CVS 개정 번호는 제대로 에뮬레이션되지 않으며 cvs 로그에는 태그 또는 분기가 전혀 표시되지 않습니다. (메인 브랜치가 아닌 CVS 개정 번호는 피상적으로 CVS 개정 번호와 비슷하지만 실제로 지점 지점 이후의 개정 수를 나타 내기보다는 git commit ID를 직접 인코딩합니다.)</target>
        </trans-unit>
        <trans-unit id="880f481ef12ec663b5ff4186eb50766022add75f" translate="yes" xml:space="preserve">
          <source>Most bottlenecks appear to be in foreign source data access (the source just cannot extract revisions fast enough) or disk IO (fast-import writes as fast as the disk will take the data). Imports will run faster if the source data is stored on a different drive than the destination Git repository (due to less IO contention).</source>
          <target state="translated">대부분의 병목 현상은 외부 소스 데이터 액세스 (소스는 수정본을 충분히 빨리 추출 할 수 없음) 또는 디스크 IO (디스크가 데이터를 가져 오는만큼 빠른 가져 오기 쓰기)에있는 것으로 보입니다. 소스 데이터가 대상 Git 저장소와 다른 드라이브에 저장된 경우 (IO 경합이 적기 때문에) 가져 오기가 더 빠르게 실행됩니다.</target>
        </trans-unit>
        <trans-unit id="b1a743b45e6efbd5b49b8c3c8d73ad9b477276e1" translate="yes" xml:space="preserve">
          <source>Most commits have only one parent, but it is also common for a commit to have multiple parents. In that case the commit represents a merge, with the parent references pointing to the heads of the merged branches.</source>
          <target state="translated">대부분의 커밋에는 부모가 하나 뿐이지 만 커밋이 여러 부모를 갖는 것도 일반적입니다. 이 경우 커밋은 병합을 나타내며 부모 참조는 병합 된 분기의 머리를 가리 킵니다.</target>
        </trans-unit>
        <trans-unit id="4d50eced4caaa6d0cca3ee6a1e2e2e07d0d5849b" translate="yes" xml:space="preserve">
          <source>Most importantly, merging works at the branch level, while cherry-picking works at the commit level. This means that a merge can carry over the changes from 1, 10, or 1000 commits with equal ease, which in turn means the workflow scales much better to a large number of contributors (and contributions). Merges are also easier to understand because a merge commit is a &quot;promise&quot; that all changes from all its parents are now included.</source>
          <target state="translated">가장 중요한 것은 병합은 지점 수준에서 작동하지만 체리 피킹은 커밋 수준에서 작동합니다. 이는 병합이 1, 10 또는 1000 커밋의 변경 사항을 똑같이 쉽게 처리 할 수 ​​있음을 의미하며, 이는 워크 플로가 많은 기여자 (및 기여)로 훨씬 더 잘 확장됨을 의미합니다. 병합 커밋은 이제 모든 부모의 모든 변경 사항이 포함 된 &quot;약속&quot;이므로 병합도 이해하기 쉽습니다.</target>
        </trans-unit>
        <trans-unit id="2e130c2e2dd2a16594642aa625e1fc3c4df26608" translate="yes" xml:space="preserve">
          <source>Most of features are configured via &lt;code&gt;%feature&lt;/code&gt; hash; however some of extra gitweb features can be turned on and configured using variables described below. This list beside configuration variables that control how gitweb looks does contain variables configuring administrative side of gitweb (e.g. cross-site scripting prevention; admittedly this as side effect affects how &quot;summary&quot; pages look like, or load limiting).</source>
          <target state="translated">대부분의 기능은 &lt;code&gt;%feature&lt;/code&gt; 해시 를 통해 구성됩니다 . 그러나 추가 gitweb 기능 중 일부는 아래 설명 된 변수를 사용하여 설정하고 구성 할 수 있습니다. gitweb의 모양을 제어하는 ​​구성 변수 옆의이 목록에는 gitweb의 관리 측면을 구성하는 변수가 포함되어 있습니다 (예 : 사이트 간 스크립팅 방지, 부작용으로 &quot;요약&quot;페이지의 모양 또는로드 제한에 영향을 미침).</target>
        </trans-unit>
        <trans-unit id="12c479c9b5f1b05779ca1427f8469c4d0c8e41b4" translate="yes" xml:space="preserve">
          <source>Most of what &lt;code&gt;git rev-list&lt;/code&gt; did is contained in &lt;code&gt;revision.c&lt;/code&gt; and &lt;code&gt;revision.h&lt;/code&gt;. It wraps the options in a struct named &lt;code&gt;rev_info&lt;/code&gt;, which controls how and what revisions are walked, and more.</source>
          <target state="translated">무엇 대부분의 &lt;code&gt;git rev-list&lt;/code&gt; 에 포함 않았다 &lt;code&gt;revision.c&lt;/code&gt; 및 &lt;code&gt;revision.h&lt;/code&gt; . &lt;code&gt;rev_info&lt;/code&gt; 라는 구조체의 옵션을 래핑하여 걷는 방법과 수정 방법 등을 제어합니다.</target>
        </trans-unit>
        <trans-unit id="9ceb817bd0e340cfd6e3a665612ec974c7873cd6" translate="yes" xml:space="preserve">
          <source>Most operations that add an object to the database update the modification time of the object if it is already present so that #1 applies.</source>
          <target state="translated">데이터베이스에 객체를 추가하는 대부분의 작업은 객체가 이미 존재하는 경우 # 1이 적용되도록 객체의 수정 시간을 업데이트합니다.</target>
        </trans-unit>
        <trans-unit id="ed4a3f36c4746567049b5d83d49f91438e7cd1fa" translate="yes" xml:space="preserve">
          <source>Most projects also use &lt;a href=&quot;#def_tag&quot;&gt;tags&lt;/a&gt;. Tags, like heads, are references into the project&amp;rsquo;s history, and can be listed using the &lt;a href=&quot;git-tag&quot;&gt;git-tag[1]&lt;/a&gt; command:</source>
          <target state="translated">대부분의 프로젝트는 &lt;a href=&quot;#def_tag&quot;&gt;태그&lt;/a&gt; 도 사용 합니다 . 헤드와 같이 태그는 프로젝트 히스토리에 대한 참조이며 &lt;a href=&quot;git-tag&quot;&gt;git-tag [1]&lt;/a&gt; 명령을 사용하여 나열 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="6e9a1bc6364ad2c889e7f09c69628c8251c67662" translate="yes" xml:space="preserve">
          <source>Most projects with multiple contributors (such as the Linux kernel, or Git itself) have frequent merges, and &lt;code&gt;gitk&lt;/code&gt; does a better job of visualizing their history. For example,</source>
          <target state="translated">Linux 커널 또는 Git 자체와 같이 여러 제공자가있는 대부분의 프로젝트는 자주 병합되며 &lt;code&gt;gitk&lt;/code&gt; 는 히스토리를 더 잘 시각화합니다. 예를 들어</target>
        </trans-unit>
        <trans-unit id="b110af03cd46bd74e1684a2cb53fb12fe52de561" translate="yes" xml:space="preserve">
          <source>Mostly a synonym to &lt;a href=&quot;#def_shallow_repository&quot;&gt;shallow repository&lt;/a&gt; but the phrase makes it more explicit that it was created by running &lt;code&gt;git clone --depth=&amp;hellip;​&lt;/code&gt; command.</source>
          <target state="translated">대부분에 동의어 &lt;a href=&quot;#def_shallow_repository&quot;&gt;얕은 저장소&lt;/a&gt; 하지만 구문이 실행에 의해 만들어진 좀 더 명시적인 것을 만들어 &lt;code&gt;git clone --depth=&amp;hellip;​&lt;/code&gt; 명령을 사용합니다.</target>
        </trans-unit>
        <trans-unit id="0a0252ca3dca0dd6561eccb6a1ba0495bf433801" translate="yes" xml:space="preserve">
          <source>Mostly a synonym to &lt;a href=&quot;#def_shallow_repository&quot;&gt;shallow repository&lt;/a&gt; but the phrase makes it more explicit that it was created by running &lt;code&gt;git clone --depth=...&lt;/code&gt; command.</source>
          <target state="translated">일반적으로 &lt;a href=&quot;#def_shallow_repository&quot;&gt;얕은 저장소&lt;/a&gt; 와 동의어 이지만 문구는 &lt;code&gt;git clone --depth=...&lt;/code&gt; 명령 을 실행하여 생성되었다는 것을 더 명확하게 만듭니다 .</target>
        </trans-unit>
        <trans-unit id="437db9b7f03fcf9c59c19e8599b81a4181786550" translate="yes" xml:space="preserve">
          <source>Move a working tree to a new location. Note that the main working tree or linked working trees containing submodules cannot be moved.</source>
          <target state="translated">작업 트리를 새 위치로 이동하십시오. 하위 작업 모듈을 포함하는 기본 작업 트리 또는 연결된 작업 트리는 이동할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="00451deb449902283a1a1b09ee616f563047050b" translate="yes" xml:space="preserve">
          <source>Move objects and refs by archive</source>
          <target state="translated">아카이브별로 객체 및 참조 이동</target>
        </trans-unit>
        <trans-unit id="0a2aa584391bc2ed097c1ace071233493faa0978" translate="yes" xml:space="preserve">
          <source>Move or rename a file, a directory, or a symlink</source>
          <target state="translated">파일, 디렉토리 또는 심볼릭 링크 이동 또는 이름 바꾸기</target>
        </trans-unit>
        <trans-unit id="4bc0abe3ae87a3007e76abb67d150957939b61b8" translate="yes" xml:space="preserve">
          <source>Move or rename a file, directory or symlink.</source>
          <target state="translated">파일, 디렉토리 또는 심볼릭 링크를 이동하거나 이름을 바꿉니다.</target>
        </trans-unit>
        <trans-unit id="24cb8f062e449dc4167b50460e2e7341fe4e0aa6" translate="yes" xml:space="preserve">
          <source>Move/rename a branch and the corresponding reflog.</source>
          <target state="translated">분기 및 해당 참조 로그를 이동 / 이름 바꾸기하십시오.</target>
        </trans-unit>
        <trans-unit id="86a2fcc8fa8d4ad8c3c46b9d3e5182feb14f1b60" translate="yes" xml:space="preserve">
          <source>Moved lines are not highlighted.</source>
          <target state="translated">이동 한 줄은 강조 표시되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="e5cbd47a10df638d21a9258d79ed6bd371f01027" translate="yes" xml:space="preserve">
          <source>Moved lines of code are colored differently. It can be changed by the &lt;code&gt;diff.colorMoved&lt;/code&gt; configuration setting. The &amp;lt;mode&amp;gt; defaults to &lt;code&gt;no&lt;/code&gt; if the option is not given and to &lt;code&gt;zebra&lt;/code&gt; if the option with no mode is given. The mode must be one of:</source>
          <target state="translated">이동 한 코드 줄은 다르게 색상이 지정됩니다. &lt;code&gt;diff.colorMoved&lt;/code&gt; 구성 설정 으로 변경할 수 있습니다 . 옵션이 제공되지 않으면 &amp;lt;mode&amp;gt;는 기본적으로 &lt;code&gt;no&lt;/code&gt; 로 설정되고 모드 가없는 옵션이 제공 되면 &lt;code&gt;zebra&lt;/code&gt; 로 설정 됩니다. 모드는 다음 중 하나 여야합니다.</target>
        </trans-unit>
        <trans-unit id="b99084289befcccb3b6f25bb5a902159aaa2283b" translate="yes" xml:space="preserve">
          <source>Moved lines of code are colored differently. The &amp;lt;mode&amp;gt; defaults to &lt;code&gt;no&lt;/code&gt; if the option is not given and to &lt;code&gt;zebra&lt;/code&gt; if the option with no mode is given. The mode must be one of:</source>
          <target state="translated">이동 한 코드 줄은 다르게 색상이 지정됩니다. 옵션이 제공되지 않으면 &amp;lt;mode&amp;gt;는 기본적으로 &lt;code&gt;no&lt;/code&gt; 로 설정되고 모드 가없는 옵션이 제공 되면 &lt;code&gt;zebra&lt;/code&gt; 로 설정 됩니다. 모드는 다음 중 하나 여야합니다.</target>
        </trans-unit>
        <trans-unit id="b9c1e9c13eb039f68657e5a15bbd12085ba143c2" translate="yes" xml:space="preserve">
          <source>Moving a submodule using a gitfile (which means they were cloned with a Git version 1.7.8 or newer) will update the gitfile and core.worktree setting to make the submodule work in the new location. It also will attempt to update the submodule.&amp;lt;name&amp;gt;.path setting in the &lt;a href=&quot;gitmodules&quot;&gt;gitmodules[5]&lt;/a&gt; file and stage that file (unless -n is used).</source>
          <target state="translated">gitfile을 사용하여 하위 모듈을 이동하면 (즉, Git 버전 1.7.8 이상으로 복제되었음을 의미) 하위 모듈이 새 위치에서 작동하도록 gitfile 및 core.worktree 설정이 업데이트됩니다. 또한 &lt;a href=&quot;gitmodules&quot;&gt;gitmodules [5]&lt;/a&gt; 파일 에서 submodule. &amp;lt;name&amp;gt; .path 설정을 업데이트하고 해당 파일을 스테이징합니다 (-n을 사용하지 않는 경우).</target>
        </trans-unit>
        <trans-unit id="64f4589d8b3cd6346365a117e7caa3c7d877c770" translate="yes" xml:space="preserve">
          <source>Mua-specific hints</source>
          <target state="translated">Mua 관련 힌트</target>
        </trans-unit>
        <trans-unit id="c811c6583f834ffbc46d39586b81b1cb3e49b3e5" translate="yes" xml:space="preserve">
          <source>Multi-pack-index (midx) files have the following format:</source>
          <target state="translated">멀티 팩 인덱스 (midx) 파일의 형식은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="53148ea4bd03c54715064a8f67e0cc8cc140f85c" translate="yes" xml:space="preserve">
          <source>Multiple --notes options can be combined to control which notes are being displayed. Examples: &quot;--notes=foo&quot; will show only notes from &quot;refs/notes/foo&quot;; &quot;--notes=foo --notes&quot; will show both notes from &quot;refs/notes/foo&quot; and from the default notes ref(s).</source>
          <target state="translated">여러 노트 옵션을 결합하여 표시되는 노트를 제어 할 수 있습니다. 예 : &quot;--notes = foo&quot;는 &quot;refs / notes / foo&quot;의 노트 만 표시합니다. &quot;--notes = foo --notes&quot;는 &quot;refs / notes / foo&quot;및 기본 메모 ref (s)의 메모를 모두 표시합니다.</target>
        </trans-unit>
        <trans-unit id="63667e9cd419f9751274dd2f16bda1512b373262" translate="yes" xml:space="preserve">
          <source>Multiple &lt;code&gt;--filter=&lt;/code&gt; flags can be specified to combine filters. Only objects which are accepted by every filter are included.</source>
          <target state="translated">필터를 결합하기 위해 여러 &lt;code&gt;--filter=&lt;/code&gt; 플래그를 지정할 수 있습니다. 모든 필터에서 허용되는 객체 만 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="dc96f8ef1ccc109ff4dae28503fa1d96c62fb1de" translate="yes" xml:space="preserve">
          <source>Multiple checkout in general is still experimental, and the support for submodules is incomplete. It is NOT recommended to make multiple checkouts of a superproject.</source>
          <target state="translated">일반적으로 다중 체크 아웃은 아직 실험 중이며 하위 모듈에 대한 지원이 불완전합니다. 수퍼 프로젝트를 여러 번 체크 아웃하지 않는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="5a07b93df04fb253e2e899a192e36f3454a882cd" translate="yes" xml:space="preserve">
          <source>Multiple fetch, branches, and tags keys are supported:</source>
          <target state="translated">여러 페치, 분기 및 태그 키가 지원됩니다.</target>
        </trans-unit>
        <trans-unit id="b46275ca6ba0af124488d22d1e877279bfe2e6c0" translate="yes" xml:space="preserve">
          <source>Multiple lines can be added to an option by using the &lt;code&gt;--add&lt;/code&gt; option. If you want to update or unset an option which can occur on multiple lines, a POSIX regexp &lt;code&gt;value_regex&lt;/code&gt; needs to be given. Only the existing values that match the regexp are updated or unset. If you want to handle the lines that do &lt;strong&gt;not&lt;/strong&gt; match the regex, just prepend a single exclamation mark in front (see also &lt;a href=&quot;#EXAMPLES&quot;&gt;EXAMPLES&lt;/a&gt;).</source>
          <target state="translated">&lt;code&gt;--add&lt;/code&gt; 옵션 을 사용하여 옵션에 여러 줄을 추가 할 수 있습니다 . 여러 줄에서 발생할 수있는 옵션을 업데이트하거나 설정 해제하려면 POSIX regexp &lt;code&gt;value_regex&lt;/code&gt; 를 지정 해야합니다. 정규 표현식과 일치하는 기존 값만 업데이트되거나 설정 해제됩니다. 정규식과 일치 하지 &lt;strong&gt;않는&lt;/strong&gt; 행을 처리하려면 앞에 느낌표를 하나 추가하십시오 ( &lt;a href=&quot;#EXAMPLES&quot;&gt;예제&lt;/a&gt; 참조 ).</target>
        </trans-unit>
        <trans-unit id="77c43675935243a813626f8da7cb046544167112" translate="yes" xml:space="preserve">
          <source>Multiple tags on the same revision are not imported.</source>
          <target state="translated">동일한 개정판의 여러 태그를 가져 오지 않습니다.</target>
        </trans-unit>
        <trans-unit id="f2beb5df6d3d8f2a372e3411ba76c2a81700ed4b" translate="yes" xml:space="preserve">
          <source>Multiple values may be given to the &lt;code&gt;man.viewer&lt;/code&gt; configuration variable. Their corresponding programs will be tried in the order listed in the configuration file.</source>
          <target state="translated">&lt;code&gt;man.viewer&lt;/code&gt; 구성 변수 에는 여러 값이 제공 될 수 있습니다 . 해당 프로그램은 구성 파일에 나열된 순서대로 시도됩니다.</target>
        </trans-unit>
        <trans-unit id="ee6ae3f9558f190018d900b972ec0dd86c3ef0ee" translate="yes" xml:space="preserve">
          <source>Munging the diff output</source>
          <target state="translated">diff 출력 조정</target>
        </trans-unit>
        <trans-unit id="31284f7dc1d9489b6ba33462518d05bce29455ee" translate="yes" xml:space="preserve">
          <source>Must be a blob id</source>
          <target state="translated">BLOB ID 여야합니다</target>
        </trans-unit>
        <trans-unit id="bab4c6d734b3b13c2268e7fc81c79c9b99eef1dd" translate="yes" xml:space="preserve">
          <source>NORMAL Format</source>
          <target state="translated">일반 형식</target>
        </trans-unit>
        <trans-unit id="4b5d099fcd6efcc01a4251de7ab2ddb7c47dd96b" translate="yes" xml:space="preserve">
          <source>NOTE! &lt;code&gt;git checkout-index&lt;/code&gt; normally refuses to overwrite old files, so if you have an old version of the tree already checked out, you will need to use the &lt;code&gt;-f&lt;/code&gt; flag ('before' the &lt;code&gt;-a&lt;/code&gt; flag or the filename) to 'force' the checkout.</source>
          <target state="translated">노트! &lt;code&gt;git checkout-index&lt;/code&gt; 는 일반적으로 오래된 파일을 덮어 쓰지 않기 때문에 이미 체크 아웃 된 트리 버전이있는 경우 &lt;code&gt;-f&lt;/code&gt; 플래그 ( ' &lt;code&gt;-a&lt;/code&gt; 플래그 또는 파일 이름 앞' )를 'force' 로 사용해야합니다. 결제.</target>
        </trans-unit>
        <trans-unit id="1264e842b1d5e884b1bcd9c56e546555c80966fe" translate="yes" xml:space="preserve">
          <source>NOTE! A &lt;code&gt;--remove&lt;/code&gt; flag does 'not' mean that subsequent filenames will necessarily be removed: if the files still exist in your directory structure, the index will be updated with their new status, not removed. The only thing &lt;code&gt;--remove&lt;/code&gt; means is that update-index will be considering a removed file to be a valid thing, and if the file really does not exist any more, it will update the index accordingly.</source>
          <target state="translated">노트! &lt;code&gt;--remove&lt;/code&gt; 플래그는 '하지'않는 이후의 파일 이름은 반드시 제거 될 것을 의미 : 파일이 여전히 디렉토리 구조에 존재하는 경우, 인덱스가되지 제거 그들의 새로운 상태로 업데이트됩니다. 유일한 &lt;code&gt;--remove&lt;/code&gt; 는 update-index가 제거 된 파일을 유효한 것으로 간주하고 파일이 더 이상 존재하지 않으면 그에 따라 인덱스를 업데이트한다는 것입니다.</target>
        </trans-unit>
        <trans-unit id="709a23220f2c3d64d1e1d6d18c4d5280f8d82fca" translate="yes" xml:space="preserve">
          <source>Name</source>
          <target state="translated">Name</target>
        </trans-unit>
        <trans-unit id="cab1b18ac6c645752b07db74b58a821d43db7033" translate="yes" xml:space="preserve">
          <source>Name for the new branch.</source>
          <target state="translated">새 지점의 이름입니다.</target>
        </trans-unit>
        <trans-unit id="ae3aefe579fe0e7749a842bc31610ab7a07dfe4c" translate="yes" xml:space="preserve">
          <source>Name of a HTML file which, if it exists, is included on the gitweb projects overview page (&quot;projects_list&quot; view). Relative to the directory containing the gitweb.cgi script. Default value can be adjusted during build time using &lt;code&gt;GITWEB_HOMETEXT&lt;/code&gt; variable. By default set to &lt;code&gt;indextext.html&lt;/code&gt;.</source>
          <target state="translated">존재하는 경우 gitweb 프로젝트 개요 페이지 ( &quot;projects_list&quot;보기)에 포함 된 HTML 파일의 이름입니다. gitweb.cgi 스크립트가 포함 된 디렉토리와 관련이 있습니다. 빌드 시간 동안 &lt;code&gt;GITWEB_HOMETEXT&lt;/code&gt; 변수를 사용하여 기본값을 조정할 수 있습니다 . 기본적으로 &lt;code&gt;indextext.html&lt;/code&gt; 로 설정됩니다 .</target>
        </trans-unit>
        <trans-unit id="b26ce2bab88403572eb261078ddb7db93d3d704e" translate="yes" xml:space="preserve">
          <source>Name of a file with HTML to be included at the bottom of each page. Relative to the directory containing the &lt;code&gt;gitweb.cgi&lt;/code&gt; script. Can be set using &lt;code&gt;GITWEB_SITE_FOOTER&lt;/code&gt; at build time. No default value.</source>
          <target state="translated">각 페이지 하단에 HTML이 포함 된 파일 이름입니다. &lt;code&gt;gitweb.cgi&lt;/code&gt; 스크립트가 포함 된 디렉토리와 관련이 있습니다. 빌드시 &lt;code&gt;GITWEB_SITE_FOOTER&lt;/code&gt; 를 사용하여 설정할 수 있습니다 . 기본값이 없습니다.</target>
        </trans-unit>
        <trans-unit id="cb37057e9d095a173db9c241ef8419b86a202d02" translate="yes" xml:space="preserve">
          <source>Name of a file with HTML to be included at the top of each page. Relative to the directory containing the &lt;code&gt;gitweb.cgi&lt;/code&gt; script. Can be set using &lt;code&gt;GITWEB_SITE_HEADER&lt;/code&gt; at build time. No default value.</source>
          <target state="translated">각 페이지 상단에 HTML이 포함 된 파일의 이름입니다. &lt;code&gt;gitweb.cgi&lt;/code&gt; 스크립트가 포함 된 디렉토리와 관련이 있습니다. 빌드시 &lt;code&gt;GITWEB_SITE_HEADER&lt;/code&gt; 를 사용하여 설정할 수 있습니다 . 기본값이 없습니다.</target>
        </trans-unit>
        <trans-unit id="389075bf1328d95e30f257d38d278dd3a0c94121" translate="yes" xml:space="preserve">
          <source>Name of a plain text file listing projects, or a name of directory to be scanned for projects.</source>
          <target state="translated">프로젝트를 나열하는 일반 텍스트 파일 이름 또는 프로젝트를 스캔 할 디렉토리 이름입니다.</target>
        </trans-unit>
        <trans-unit id="c0afa4635407444ed041e335278cc30cd2a11b14" translate="yes" xml:space="preserve">
          <source>Name of the SSL backend to use (e.g. &quot;openssl&quot; or &quot;schannel&quot;). This option is ignored if cURL lacks support for choosing the SSL backend at runtime.</source>
          <target state="translated">사용할 SSL 백엔드의 이름 (예 : &quot;openssl&quot;또는 &quot;schannel&quot;) cURL에 런타임시 SSL 백엔드 선택에 대한 지원이없는 경우이 옵션은 무시됩니다.</target>
        </trans-unit>
        <trans-unit id="4d338fcbbcef71a5bde9a77e37abcbca835f1d4a" translate="yes" xml:space="preserve">
          <source>Name of the user running &lt;code&gt;git-cvsserver&lt;/code&gt;. If no name can be determined, the numeric uid is used.</source>
          <target state="translated">&lt;code&gt;git-cvsserver&lt;/code&gt; 를 실행하는 사용자의 이름입니다 . 이름을 확인할 수 없으면 숫자 uid가 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="33a3a9f4baab999f10555d77c61fc17ad7a2e690" translate="yes" xml:space="preserve">
          <source>Name of your site or organization, to appear in page titles. Set it to something descriptive for clearer bookmarks etc. If this variable is not set or is, then gitweb uses the value of the &lt;code&gt;SERVER_NAME&lt;/code&gt;&lt;code&gt;CGI&lt;/code&gt; environment variable, setting site name to &quot;$SERVER_NAME Git&quot;, or &quot;Untitled Git&quot; if this variable is not set (e.g. if running gitweb as standalone script).</source>
          <target state="translated">페이지 제목에 표시 할 사이트 또는 조직의 이름입니다. 이 변수를 설정하지 않았거나 설정하지 않은 경우 gitweb은 &lt;code&gt;SERVER_NAME&lt;/code&gt; &lt;code&gt;CGI&lt;/code&gt; 환경 변수 의 값을 사용하여 사이트 이름을 &quot;$ SERVER_NAME Git&quot;또는이 변수가 &quot;Untitled Git&quot;인 경우 &quot;Untitled Git&quot;으로 설정합니다 설정되지 않음 (예 : gitweb을 독립형 스크립트로 실행하는 경우).</target>
        </trans-unit>
        <trans-unit id="ac84f0f88b7824faf06c4b53397972bcd09b01be" translate="yes" xml:space="preserve">
          <source>Name output in &lt;code&gt;[PATCH n/m]&lt;/code&gt; format, even with a single patch.</source>
          <target state="translated">단일 패치로도 &lt;code&gt;[PATCH n/m]&lt;/code&gt; 형식으로 이름 출력 .</target>
        </trans-unit>
        <trans-unit id="ffd008dca3705155e76303827e2a4d3059068c9a" translate="yes" xml:space="preserve">
          <source>Name output in &lt;code&gt;[PATCH]&lt;/code&gt; format.</source>
          <target state="translated">이름은 &lt;code&gt;[PATCH]&lt;/code&gt; 형식으로 출력 됩니다.</target>
        </trans-unit>
        <trans-unit id="fe45d9f50e3991235a5aaf79d20ba4e50638c193" translate="yes" xml:space="preserve">
          <source>Named file in &lt;code&gt;$GIT_DIR/branches&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;$GIT_DIR/branches&lt;/code&gt; 에 이름이 지정된 파일</target>
        </trans-unit>
        <trans-unit id="e694d096f60594b306ed977a1cb3bf7e40731642" translate="yes" xml:space="preserve">
          <source>Named file in &lt;code&gt;$GIT_DIR/remotes&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;$GIT_DIR/remotes&lt;/code&gt; 이름이 지정된 파일</target>
        </trans-unit>
        <trans-unit id="4d0059ee6bf7ca65460797daae6395c800b562c5" translate="yes" xml:space="preserve">
          <source>Named pointers called refs mark interesting points in history. A ref may contain the SHA-1 name of an object or the name of another ref. Refs with names beginning &lt;code&gt;ref/head/&lt;/code&gt; contain the SHA-1 name of the most recent commit (or &quot;head&quot;) of a branch under development. SHA-1 names of tags of interest are stored under &lt;code&gt;ref/tags/&lt;/code&gt;. A special ref named &lt;code&gt;HEAD&lt;/code&gt; contains the name of the currently checked-out branch.</source>
          <target state="translated">refs라는 이름의 포인터는 역사에서 흥미로운 점을 표시합니다. 심판은 개체의 SHA-1 이름이나 다른 심판의 이름을 포함 할 수 있습니다. 이름이 &lt;code&gt;ref/head/&lt;/code&gt; 시작하는 Ref 는 개발중인 브랜치의 가장 최근 커밋 (또는 &quot;head&quot;)의 SHA-1 이름을 포함합니다. 관심있는 태그의 SHA-1 이름은 &lt;code&gt;ref/tags/&lt;/code&gt; 저장됩니다 . &lt;code&gt;HEAD&lt;/code&gt; 라는 특수 참조 에는 현재 체크 아웃 된 분기의 이름이 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="afc8b12ea961269025f67734b3112ac3163fa044" translate="yes" xml:space="preserve">
          <source>Named remote in configuration file</source>
          <target state="translated">구성 파일에서 명명 된 원격</target>
        </trans-unit>
        <trans-unit id="60da66dd4d339a94ae12e8c7a620ab333cdfa554" translate="yes" xml:space="preserve">
          <source>Names a low-level merge driver to be used when performing an internal merge between common ancestors. See &lt;a href=&quot;gitattributes&quot;&gt;gitattributes[5]&lt;/a&gt; for details.</source>
          <target state="translated">공통 조상간에 내부 병합을 수행 할 때 사용할 하위 수준 병합 드라이버의 이름을 지정합니다. 자세한 내용은 &lt;a href=&quot;gitattributes&quot;&gt;gitattributes [5]&lt;/a&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="7238264e2238da432cea4cee3e4e4ec456281760" translate="yes" xml:space="preserve">
          <source>Naming branches, tags, and other references</source>
          <target state="translated">이름 지정 분기, 태그 및 기타 참조</target>
        </trans-unit>
        <trans-unit id="a8a795a40591e9038f52c089f34245ee06ab71bc" translate="yes" xml:space="preserve">
          <source>Naming commits</source>
          <target state="translated">명명 커밋</target>
        </trans-unit>
        <trans-unit id="7b635b48de06412b114cd8e91f1912aac5470b03" translate="yes" xml:space="preserve">
          <source>Nearly proper rewriting of tag objects is supported. If the tag has a message attached, a new tag object will be created with the same message, author, and timestamp. If the tag has a signature attached, the signature will be stripped. It is by definition impossible to preserve signatures. The reason this is &quot;nearly&quot; proper, is because ideally if the tag did not change (points to the same object, has the same name, etc.) it should retain any signature. That is not the case, signatures will always be removed, buyer beware. There is also no support for changing the author or timestamp (or the tag message for that matter). Tags which point to other tags will be rewritten to point to the underlying commit.</source>
          <target state="translated">태그 객체의 거의 적절한 재 작성이 지원됩니다. 태그에 메시지가 첨부되어 있으면 동일한 메시지, 작성자 및 타임 스탬프를 사용하여 새 태그 객체가 생성됩니다. 태그에 서명이 첨부되어 있으면 서명이 제거됩니다. 서명을 보존하는 것은 정의상 불가능합니다. 이것이 &quot;거의&quot;적절한 이유는 태그가 변경되지 않은 경우 (같은 객체를 가리 키거나 동일한 이름을 갖는 등) 이상적으로 서명을 유지해야하기 때문입니다. 사실은 아닙니다. 서명은 항상 제거되며 구매자는주의해야합니다. 또한 작성자 나 타임 스탬프 (또는 해당 문제에 대한 태그 메시지)를 변경할 수 없습니다. 다른 태그를 가리키는 태그는 기본 커밋을 가리 키도록 다시 작성됩니다.</target>
        </trans-unit>
        <trans-unit id="ec8ce921b28e9d3cf6cf20eaf08287c17f378d35" translate="yes" xml:space="preserve">
          <source>Negating options</source>
          <target state="translated">부정 옵션</target>
        </trans-unit>
        <trans-unit id="781db1e57c260d141571a81cbcc3db723749ad7f" translate="yes" xml:space="preserve">
          <source>Nevertheless, the code at C is broken, because the callers added on the lower line of development have not been converted to the new semantics introduced on the upper line of development. So if all you know is that D is bad, that Z is good, and that &lt;a href=&quot;git-bisect&quot;&gt;git-bisect[1]&lt;/a&gt; identifies C as the culprit, how will you figure out that the problem is due to this change in semantics?</source>
          <target state="translated">그럼에도 불구하고, 개발 라인에 추가 된 호출자가 개발 라인에 도입 된 새로운 시맨틱으로 변환되지 않았기 때문에 C의 코드가 손상되었습니다. 따라서 D가 나쁘고 Z가 좋고 &lt;a href=&quot;git-bisect&quot;&gt;git-bisect [1]가&lt;/a&gt; C를 범인으로 식별 한다는 사실 만 아는 경우, 이러한 의미의 변화로 인해 문제가 발생한다는 것을 어떻게 알 수 있습니까?</target>
        </trans-unit>
        <trans-unit id="a6160e254f396c410b853d5ee2bc722e35ccb61c" translate="yes" xml:space="preserve">
          <source>Nevertheless, this is a common practice for people that need a simple way to publish a work-in-progress patch series, and it is an acceptable compromise as long as you warn other developers that this is how you intend to manage the branch.</source>
          <target state="translated">그럼에도 불구하고, 이는 진행중인 작업 패치 시리즈를 게시하는 간단한 방법이 필요한 사람들에게 일반적인 관행이며, 다른 개발자에게 이것이 지점 관리 방법이라고 경고하는 한 수용 가능한 타협입니다.</target>
        </trans-unit>
        <trans-unit id="208a508aabbf19798034826f77ed481ec28e90cc" translate="yes" xml:space="preserve">
          <source>New features:</source>
          <target state="translated">새로운 기능 :</target>
        </trans-unit>
        <trans-unit id="c191eda851b2a021b1ece3943d51bb10c7c6e4eb" translate="yes" xml:space="preserve">
          <source>New marks are created automatically. Existing marks can be moved to another object simply by reusing the same &lt;code&gt;&amp;lt;idnum&amp;gt;&lt;/code&gt; in another &lt;code&gt;mark&lt;/code&gt; command.</source>
          <target state="translated">새로운 마크가 자동으로 생성됩니다. 다른 &lt;code&gt;mark&lt;/code&gt; 명령 에서 동일한 &lt;code&gt;&amp;lt;idnum&amp;gt;&lt;/code&gt; 을 재사용하여 기존 마크를 다른 객체로 옮길 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="34f293962e034aa3adab30d6ce7bb006c129576e" translate="yes" xml:space="preserve">
          <source>New objects written by fast-import are not available immediately. Most fast-import commands have no visible effect until the next checkpoint (or completion). The frontend can send commands to fill fast-import&amp;rsquo;s input pipe without worrying about how quickly they will take effect, which improves performance by simplifying scheduling.</source>
          <target state="translated">빠른 가져 오기로 작성된 새 개체는 즉시 사용할 수 없습니다. 대부분의 빠른 가져 오기 명령은 다음 검사 점 (또는 완료)까지 눈에 띄는 효과가 없습니다. 프론트 엔드는 명령이 전송되는 데 걸리는 시간에 대한 걱정없이 빠른 가져 오기의 입력 파이프를 채우도록 명령을 보낼 수 있으며, 이는 스케줄링을 단순화하여 성능을 향상시킵니다.</target>
        </trans-unit>
        <trans-unit id="bd5d84635e8045ac3e97cdc31b8e7c57fb2006ba" translate="yes" xml:space="preserve">
          <source>New remote-tracking branches will be stored under the shorthand name that you gave &lt;code&gt;git remote add&lt;/code&gt;, in this case &lt;code&gt;staging&lt;/code&gt;:</source>
          <target state="translated">새로운 원격 추적 브랜치는 &lt;code&gt;git remote add&lt;/code&gt; 으로 지정한 축약 이름으로 저장됩니다 ( 이 경우 &lt;code&gt;staging&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="408210d4e2e7bc9a95a98e6b1bf8a3bd1ff14459" translate="yes" xml:space="preserve">
          <source>New users are encouraged to use &lt;a href=&quot;git-log&quot;&gt;git-log[1]&lt;/a&gt; instead. The &lt;code&gt;whatchanged&lt;/code&gt; command is essentially the same as &lt;a href=&quot;git-log&quot;&gt;git-log[1]&lt;/a&gt; but defaults to show the raw format diff output and to skip merges.</source>
          <target state="translated">새로운 사용자는 대신 &lt;a href=&quot;git-log&quot;&gt;git-log [1]를&lt;/a&gt; 사용하는 것이 좋습니다. &lt;code&gt;whatchanged&lt;/code&gt; 명령은 본질적으로 동일하다 &lt;a href=&quot;git-log&quot;&gt;자식 로그 [1]&lt;/a&gt; RAW 형식 DIFF 출력을 표시하고 병합 건너하지만 기본적.</target>
        </trans-unit>
        <trans-unit id="04e09d741912def77b41c31c7fd7bada0af8f8f2" translate="yes" xml:space="preserve">
          <source>Newer &lt;code&gt;git diff&lt;/code&gt; output has embedded &lt;code&gt;index information&lt;/code&gt; for each blob to help identify the original version that the patch applies to. When this flag is given, and if the original versions of the blobs are available locally, builds a temporary index containing those blobs.</source>
          <target state="translated">최신 &lt;code&gt;git diff&lt;/code&gt; 출력에는 패치가 적용되는 원래 버전을 식별하는 데 도움이되도록 각 Blob에 대한 &lt;code&gt;index information&lt;/code&gt; 가 포함 되어 있습니다. 이 플래그가 제공되고 원래 버전의 Blob을 로컬에서 사용할 수있는 경우 해당 Blob을 포함하는 임시 인덱스를 작성합니다.</target>
        </trans-unit>
        <trans-unit id="7f94af506f4cd517718453425d685ea35e84d4c7" translate="yes" xml:space="preserve">
          <source>Newly created objects are initially created in a file named after the object&amp;rsquo;s SHA-1 hash (stored in &lt;code&gt;.git/objects&lt;/code&gt;).</source>
          <target state="translated">새로 작성된 오브젝트는 처음에 오브젝트의 SHA-1 해시 ( &lt;code&gt;.git/objects&lt;/code&gt; 에 저장 됨)의 이름을 가진 파일로 작성됩니다 .</target>
        </trans-unit>
        <trans-unit id="5efdf7f0d1fca004c74269609acfa25723d86160" translate="yes" xml:space="preserve">
          <source>Next step: get familiar with the object naming. Read &lt;a href=&quot;#naming-commits&quot;&gt;Naming commits&lt;/a&gt;. There are quite a few ways to name an object (and not only revisions!). All of these are handled in &lt;code&gt;sha1_name.c&lt;/code&gt;. Just have a quick look at the function &lt;code&gt;get_sha1()&lt;/code&gt;. A lot of the special handling is done by functions like &lt;code&gt;get_sha1_basic()&lt;/code&gt; or the likes.</source>
          <target state="translated">다음 단계 : 객체 이름 지정에 익숙해 지십시오. &lt;a href=&quot;#naming-commits&quot;&gt;명명 커밋을&lt;/a&gt; 읽습니다 . 객체의 이름을 지정하는 방법에는 여러 가지가 있습니다 (개정뿐만 아니라!). 이 모든 것은 &lt;code&gt;sha1_name.c&lt;/code&gt; 에서 처리됩니다 . &lt;code&gt;get_sha1()&lt;/code&gt; 함수를 간단히 살펴보십시오 . &lt;code&gt;get_sha1_basic()&lt;/code&gt; 또는 이와 유사한 기능으로 많은 특수 처리가 수행됩니다 .</target>
        </trans-unit>
        <trans-unit id="11fc14203dd0f4441645a9c34d5dd022905f56e4" translate="yes" xml:space="preserve">
          <source>Next steps</source>
          <target state="translated">다음 단계</target>
        </trans-unit>
        <trans-unit id="817a91571b93a177740989ad9e63a1941cffb303" translate="yes" xml:space="preserve">
          <source>Next time, after seeing the same conflicted automerge, running &lt;code&gt;git rerere&lt;/code&gt; will perform a three-way merge between the earlier conflicted automerge, the earlier manual resolution, and the current conflicted automerge. If this three-way merge resolves cleanly, the result is written out to your working tree file, so you do not have to manually resolve it. Note that &lt;code&gt;git rerere&lt;/code&gt; leaves the index file alone, so you still need to do the final sanity checks with &lt;code&gt;git diff&lt;/code&gt; (or &lt;code&gt;git diff -c&lt;/code&gt;) and &lt;code&gt;git add&lt;/code&gt; when you are satisfied.</source>
          <target state="translated">다음에 동일한 충돌 자동 병합 을 확인한 후 &lt;code&gt;git rerere&lt;/code&gt; 를 실행하면 이전 충돌 자동 병합, 이전 수동 해결 방법 및 현재 충돌 자동 병합간에 3 방향 병합이 수행됩니다. 이 3 방향 병합이 제대로 해결되면 작업 트리 파일에 결과가 기록되므로 수동으로 해결할 필요가 없습니다. 참고 &lt;code&gt;git rerere&lt;/code&gt; 당신은 여전히 함께 최종 정신 검사를 할 필요가 잎 혼자 인덱스 파일, 그래서 &lt;code&gt;git diff&lt;/code&gt; (또는 &lt;code&gt;git diff -c&lt;/code&gt; )과 &lt;code&gt;git add&lt;/code&gt; 당신이 만족하고 있습니다.</target>
        </trans-unit>
        <trans-unit id="74ccc5b41472ca3ff8486dd211ddfe0cae9246c3" translate="yes" xml:space="preserve">
          <source>Next, commit the changes stored in the index. The &lt;code&gt;-c&lt;/code&gt; option specifies to pre-populate the commit message from the original message that you started with in the first commit. This is helpful to avoid retyping it. The &lt;code&gt;HEAD@{1}&lt;/code&gt; is a special notation for the commit that &lt;code&gt;HEAD&lt;/code&gt; used to be at prior to the original reset commit (1 change ago). See &lt;a href=&quot;git-reflog&quot;&gt;git-reflog[1]&lt;/a&gt; for more details. You may also use any other valid commit reference.</source>
          <target state="translated">다음으로, 색인에 저장된 변경 사항을 커미트하십시오. &lt;code&gt;-c&lt;/code&gt; 옵션 지정은 당신이 먼저 커밋에서 시작하는 원본 메시지에서 커밋 메시지를 미리 채울 수 있습니다. 이것은 다시 입력하지 않도록하는 데 도움이됩니다. &lt;code&gt;HEAD@{1}&lt;/code&gt; (가) 커밋위한 특별한 표기법 &lt;code&gt;HEAD&lt;/code&gt; 는 원래 리셋 이전에 (1 변경 전) 커밋에 사용. 자세한 내용은 &lt;a href=&quot;git-reflog&quot;&gt;git-reflog [1]&lt;/a&gt; 를 참조하십시오. 다른 유효한 커밋 참조를 사용할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="d481150e66b12915d203137377672c89781fe045" translate="yes" xml:space="preserve">
          <source>Next, copy &lt;code&gt;proj.git&lt;/code&gt; to the server where you plan to host the public repository. You can use scp, rsync, or whatever is most convenient.</source>
          <target state="translated">다음으로 공개 저장소를 호스트 할 서버에 &lt;code&gt;proj.git&lt;/code&gt; 을 복사 하십시오 . scp, rsync 또는 가장 편리한 것을 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="04e0b9feb1c4a494995ed09ad261d2d4e9ce11c5" translate="yes" xml:space="preserve">
          <source>Next, give every team member read/write access to this repository. One easy way to do this is to give all the team members ssh access to the machine where the repository is hosted. If you don&amp;rsquo;t want to give them a full shell on the machine, there is a restricted shell which only allows users to do Git pushes and pulls; see &lt;a href=&quot;git-shell&quot;&gt;git-shell[1]&lt;/a&gt;.</source>
          <target state="translated">그런 다음 모든 팀 구성원에게이 저장소에 대한 읽기 / 쓰기 액세스 권한을 부여하십시오. 이를 수행하는 한 가지 쉬운 방법은 모든 팀 구성원에게 저장소가 호스팅되는 머신에 대한 ssh 액세스 권한을 부여하는 것입니다. 머신에 전체 쉘을 제공하지 않으려면 사용자가 Git 밀고 당기는 것만 허용하는 제한된 쉘이 있습니다. 참조 &lt;a href=&quot;git-shell&quot;&gt;자식 쉘 [1]가&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="28d55d870524553fca2220c18e5b9bb0de3dcbdb" translate="yes" xml:space="preserve">
          <source>Next, tell Git to take a snapshot of the contents of all files under the current directory (note the &lt;code&gt;.&lt;/code&gt;), with &lt;code&gt;git add&lt;/code&gt;:</source>
          <target state="translated">다음으로,합니다 (참고 현재 디렉토리 아래있는 모든 파일 내용의 스냅 샷을 망할 놈의 말 &lt;code&gt;.&lt;/code&gt; 로) &lt;code&gt;git add&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="596419ac8ea3393898cb55dbbde5c3613a819bd1" translate="yes" xml:space="preserve">
          <source>Next, we interactively select diff hunks to add using the &lt;code&gt;git add -p&lt;/code&gt; facility. This will ask you about each diff hunk in sequence and you can use simple commands such as &quot;yes, include this&quot;, &quot;No don&amp;rsquo;t include this&quot; or even the very powerful &quot;edit&quot; facility.</source>
          <target state="translated">다음으로, &lt;code&gt;git add -p&lt;/code&gt; 기능을 사용하여 추가 할 diff hunk를 대화식으로 선택 합니다. 이렇게하면 각 diff hunk에 대해 순서대로 물어볼 수 있으며 &quot;yes, include include&quot;, &quot;No not include this&quot;또는 매우 강력한 &quot;edit&quot;기능과 같은 간단한 명령을 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="8951da293ad0f99492d7f4956f721a58ac3b7ff1" translate="yes" xml:space="preserve">
          <source>No checkout of HEAD is performed after the clone is complete.</source>
          <target state="translated">복제가 완료된 후 HEAD 체크 아웃이 수행되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="cfeba19b6e040607769791cbfbefd83c894b180c" translate="yes" xml:space="preserve">
          <source>No modifications to submodules are ignored, all of committed differences, and modifications to tracked and untracked files are shown. This is the default option.</source>
          <target state="translated">서브 모듈에 대한 수정은 무시되지 않고 커밋 된 모든 차이점과 추적 및 추적되지 않은 파일에 대한 수정이 표시됩니다. 이것이 기본 옵션입니다.</target>
        </trans-unit>
        <trans-unit id="e2a67085604f2eb59fb72fa11fe30ca6d6e00a34" translate="yes" xml:space="preserve">
          <source>No other changes are made. In particular, the local modifications you had before you started merge will stay the same and the index entries for them stay as they were, i.e. matching &lt;code&gt;HEAD&lt;/code&gt;.</source>
          <target state="translated">다른 변경 사항은 없습니다. 특히, 병합을 시작하기 전에 수행 한 로컬 수정 사항은 동일하게 유지되고 해당 항목의 색인 항목은 그대로 유지됩니다 (예 : &lt;code&gt;HEAD&lt;/code&gt; 일치) .</target>
        </trans-unit>
        <trans-unit id="c967d0b967e1e36091e8958a5454d9ea9951dded" translate="yes" xml:space="preserve">
          <source>No other modifications are made.</source>
          <target state="translated">다른 수정은 없습니다.</target>
        </trans-unit>
        <trans-unit id="57658df76cf3f4fecaffea0a60cae0068e21e278" translate="yes" xml:space="preserve">
          <source>No patch introduces a regression: after applying any initial part of the series, the resulting project still compiles and works, and has no bugs that it didn&amp;rsquo;t have before.</source>
          <target state="translated">어떤 패치도 회귀를 소개하지 않습니다. 시리즈의 초기 부분을 적용한 후에도 결과 프로젝트는 여전히 컴파일되고 작동하며 이전에는 없었던 버그가 없습니다.</target>
        </trans-unit>
        <trans-unit id="0d39633312554b0ea8cb734d680c4698c57a7afd" translate="yes" xml:space="preserve">
          <source>No pattern matches the path, and nothing says if the path has or does not have the attribute, the attribute for the path is said to be Unspecified.</source>
          <target state="translated">경로와 일치하는 패턴이 없으며 경로에 속성이 있거나없는 경우 경로에 대한 속성이 지정되지 않은 것으로 표시되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="c90ed1cbdf989952fffa921b682ee1beb354558a" translate="yes" xml:space="preserve">
          <source>No special setup is needed for SSH access, other than having Git tools in the PATH. If you have clients that do not accept the CVS_SERVER environment variable, you can rename &lt;code&gt;git-cvsserver&lt;/code&gt; to &lt;code&gt;cvs&lt;/code&gt;.</source>
          <target state="translated">PATH에 Git 도구를 사용하는 것 외에 SSH 액세스에는 특별한 설정이 필요하지 않습니다. CVS_SERVER 환경 변수를 허용하지 않는 클라이언트가있는 경우 &lt;code&gt;git-cvsserver&lt;/code&gt; 의 이름 을 &lt;code&gt;cvs&lt;/code&gt; 로 바꿀 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="a5febeaff9fb6579d7fb9744e50b3994bde6d8e3" translate="yes" xml:space="preserve">
          <source>Non-ascii filenames can be silently removed despite being in a desired directory. Keeping only wanted paths is often done using pipelines like &lt;code&gt;git ls-files | grep -v ^WANTED_DIR/ | xargs git rm&lt;/code&gt;. ls-files will only quote filenames if needed, so folks may not notice that one of the files didn&amp;rsquo;t match the regex (at least not until it&amp;rsquo;s much too late). Yes, someone who knows about core.quotePath can avoid this (unless they have other special characters like \t, \n, or &quot;), and people who use ls-files -z with something other than grep can avoid this, but that doesn&amp;rsquo;t mean they will.</source>
          <target state="translated">ASCII가 아닌 파일 이름은 원하는 디렉토리에 있더라도 자동으로 제거 할 수 있습니다. 원하는 경로 만 유지하는 것은 종종 &lt;code&gt;git ls-files | grep -v ^WANTED_DIR/ | xargs git rm&lt;/code&gt; . ls-files는 필요한 경우 파일 이름 만 인용하므로 사람들은 파일 중 하나가 정규식과 일치하지 않는다는 것을 눈치 채지 못할 수 있습니다 (적어도 너무 늦을 때까지는 아님). 예. core.quotePath에 대해 알고있는 사람은 이것을 피할 수 있습니다 (\ t, \ n 또는 &quot;와 같은 다른 특수 문자가없는 한), grep 이외의 다른 것과 함께 ls-files -z를 사용하는 사람들은 이것을 피할 수 있지만 그렇다는 뜻은 아닙니다.</target>
        </trans-unit>
        <trans-unit id="e2858812ab58a3c85b7437528709a46037dcfba6" translate="yes" xml:space="preserve">
          <source>Non-cached mode</source>
          <target state="translated">캐시되지 않은 모드</target>
        </trans-unit>
        <trans-unit id="28592521357265f4a182551c4308e7cea911b93e" translate="yes" xml:space="preserve">
          <source>Non-empty context lines that have one extra whitespace at the beginning.</source>
          <target state="translated">처음에 하나의 추가 공백이있는 비어 있지 않은 컨텍스트 라인.</target>
        </trans-unit>
        <trans-unit id="54b4652d3bd254c89ec712af1b81619180dc7f11" translate="yes" xml:space="preserve">
          <source>None of the provided paths are ignored.</source>
          <target state="translated">제공된 경로는 무시되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="53d641d85a09ede95cefeac02aadaca1a7fcd396" translate="yes" xml:space="preserve">
          <source>Normalize &lt;code&gt;refname&lt;/code&gt; by removing any leading slash (&lt;code&gt;/&lt;/code&gt;) characters and collapsing runs of adjacent slashes between name components into a single slash. If the normalized refname is valid then print it to standard output and exit with a status of 0, otherwise exit with a non-zero status. (&lt;code&gt;--print&lt;/code&gt; is a deprecated way to spell &lt;code&gt;--normalize&lt;/code&gt;.)</source>
          <target state="translated">표준화 &lt;code&gt;refname&lt;/code&gt; 선행 슬래시 (제거하여 &lt;code&gt;/&lt;/code&gt; ) 문자를 단일 슬래시로 이름 구성 요소 사이의 인접 슬래시의 실행을 무너. 정규화 된 참조 이름이 유효한 경우 표준 출력으로 인쇄하고 상태 0으로 종료하고, 그렇지 않으면 0이 아닌 상태로 종료하십시오. ( &lt;code&gt;--print&lt;/code&gt; 는 &lt;code&gt;--normalize&lt;/code&gt; 철자를 사용하는 더 이상 사용되지 않는 방법 입니다.)</target>
        </trans-unit>
        <trans-unit id="cd7a46a34b030b4fa7a1f4c298bb470454f5bdc6" translate="yes" xml:space="preserve">
          <source>Normally &lt;code&gt;git write-tree&lt;/code&gt; ensures that the objects referenced by the directory exist in the object database. This option disables this check.</source>
          <target state="translated">일반적으로 &lt;code&gt;git write-tree&lt;/code&gt; 는 디렉토리가 참조하는 객체가 객체 데이터베이스에 존재하도록합니다. 이 옵션은이 검사를 비활성화합니다.</target>
        </trans-unit>
        <trans-unit id="88fcf17b3fc3a47614adb1a8f9a3b0161d3a2185" translate="yes" xml:space="preserve">
          <source>Normally a &quot;commit&quot; has one parent: the previous state of the tree before a certain change was made. However, sometimes it can have two or more parent commits, in which case we call it a &quot;merge&quot;, due to the fact that such a commit brings together (&quot;merges&quot;) two or more previous states represented by other commits.</source>
          <target state="translated">일반적으로 &quot;커밋&quot;에는 하나의 부모가 있습니다 : 특정 변경 이전의 트리 상태. 그러나 때로는 두 개 이상의 부모 커밋이있을 수 있습니다. 이러한 커밋은 다른 커밋으로 표시된 두 개 이상의 이전 상태를 하나로 묶기 때문에 &quot;병합&quot;이라고합니다.</target>
        </trans-unit>
        <trans-unit id="a69474e938cf33a616aeca615fe9997480c7c945" translate="yes" xml:space="preserve">
          <source>Normally a commit would identify a new &quot;HEAD&quot; state, and while Git doesn&amp;rsquo;t care where you save the note about that state, in practice we tend to just write the result to the file that is pointed at by &lt;code&gt;.git/HEAD&lt;/code&gt;, so that we can always see what the last committed state was.</source>
          <target state="translated">일반적으로 커밋은 새로운 &quot;HEAD&quot;상태를 식별하고 Git은 해당 상태에 대한 메모를 저장하는 위치를 신경 쓰지 않지만 실제로는 결과를 &lt;code&gt;.git/HEAD&lt;/code&gt; 가 가리키는 파일에 쓰는 경향이 있습니다 . 우리는 항상 마지막 커밋 된 상태를 볼 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="de60fcb388acbd1518bd224ad2216b3a990124fa" translate="yes" xml:space="preserve">
          <source>Normally batch output is flushed after each object is output, so that a process can interactively read and write from &lt;code&gt;cat-file&lt;/code&gt;. With this option, the output uses normal stdio buffering; this is much more efficient when invoking &lt;code&gt;--batch-check&lt;/code&gt; on a large number of objects.</source>
          <target state="translated">일반적으로 배치 출력은 각 객체가 출력 된 후 플러시되므로 프로세스가 대화식으로 &lt;code&gt;cat-file&lt;/code&gt; 에서 읽고 쓸 수 있습니다 . 이 옵션을 사용하면 출력에 일반 stdio 버퍼링이 사용됩니다. 이것은 많은 수의 객체 를 &lt;code&gt;--batch-check&lt;/code&gt; 할 때 훨씬 효율적 입니다.</target>
        </trans-unit>
        <trans-unit id="38e091b35be2fc0762233a3d599b506f3b643fb1" translate="yes" xml:space="preserve">
          <source>Normally commits are only added to a project, never taken away or replaced. Git is designed with this assumption, and violating it will cause Git&amp;rsquo;s merge machinery (for example) to do the wrong thing.</source>
          <target state="translated">일반적으로 커밋은 프로젝트에만 추가되며 절대 제거되거나 교체되지 않습니다. Git은 이러한 가정으로 설계되었으며이를 위반하면 Git의 병합 기계 (예 : 잘못된 기계)가 작동하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="9122c3565585fe79768943dc25f1cf167ffbd58d" translate="yes" xml:space="preserve">
          <source>Normally the &lt;a href=&quot;#def_HEAD&quot;&gt;HEAD&lt;/a&gt; stores the name of a &lt;a href=&quot;#def_branch&quot;&gt;branch&lt;/a&gt;, and commands that operate on the history HEAD represents operate on the history leading to the tip of the branch the HEAD points at. However, Git also allows you to &lt;a href=&quot;#def_checkout&quot;&gt;check out&lt;/a&gt; an arbitrary &lt;a href=&quot;#def_commit&quot;&gt;commit&lt;/a&gt; that isn&amp;rsquo;t necessarily the tip of any particular branch. The HEAD in such a state is called &quot;detached&quot;.</source>
          <target state="translated">일반적으로 &lt;a href=&quot;#def_HEAD&quot;&gt;HEAD&lt;/a&gt; 는 &lt;a href=&quot;#def_branch&quot;&gt;분기&lt;/a&gt; 의 이름을 저장하고 히스토리에서 작동하는 명령 HEAD는 HEAD가 가리키는 분기의 끝으로 이어지는 히스토리에서 작동합니다. 그러나 Git을 사용하면 특정 분기의 팁이 아닌 임의의 &lt;a href=&quot;#def_commit&quot;&gt;커밋&lt;/a&gt; 을 &lt;a href=&quot;#def_checkout&quot;&gt;확인할&lt;/a&gt; 수도 있습니다 . 이러한 상태의 HEAD를 &quot;분리&quot;라고합니다.</target>
        </trans-unit>
        <trans-unit id="cc5f74671cf296af564ff0627cbd1c153eed7819" translate="yes" xml:space="preserve">
          <source>Normally the branch merged in is the HEAD of the remote repository, but the choice is determined by the branch.&amp;lt;name&amp;gt;.remote and branch.&amp;lt;name&amp;gt;.merge options; see &lt;a href=&quot;git-config&quot;&gt;git-config[1]&lt;/a&gt; for details.</source>
          <target state="translated">일반적으로 병합 된 분기는 원격 저장소의 HEAD이지만 선택은 branch. &amp;lt;name&amp;gt; .remote 및 branch. &amp;lt;name&amp;gt; .merge 옵션에 의해 결정됩니다. 자세한 내용은 &lt;a href=&quot;git-config&quot;&gt;git-config [1]&lt;/a&gt; 을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="f22467859cfedb6f904df5424dcd9afb82c226b1" translate="yes" xml:space="preserve">
          <source>Normally whenever a branch head in a public repository is modified, it is modified to point to a descendant of the commit that it pointed to before. By forcing a push in this situation, you break that convention. (See &lt;a href=&quot;#problems-With-rewriting-history&quot;&gt;Problems with rewriting history&lt;/a&gt;.)</source>
          <target state="translated">일반적으로 공용 저장소의 분기 헤드가 수정 될 때마다 이전에 지정한 커밋의 하위 항목을 가리 키도록 수정됩니다. 이 상황을 강요하면 해당 규칙을 위반하게됩니다. &lt;a href=&quot;#problems-With-rewriting-history&quot;&gt;히스토리 재 작성 문제점을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="43244e83cbae6a59cf653d315de1a56015589247" translate="yes" xml:space="preserve">
          <source>Normally, &lt;code&gt;git rerere&lt;/code&gt; is run without arguments or user-intervention. However, it has several commands that allow it to interact with its working state.</source>
          <target state="translated">일반적으로 &lt;code&gt;git rerere&lt;/code&gt; 는 인수 나 사용자 개입없이 실행됩니다. 그러나 작업 상태와 상호 작용할 수있는 몇 가지 명령이 있습니다.</target>
        </trans-unit>
        <trans-unit id="d7d70adae9e248dcbf5927b7eeba22fdf79a73fb" translate="yes" xml:space="preserve">
          <source>Normally, only files unknown to Git are removed, but if the &lt;code&gt;-x&lt;/code&gt; option is specified, ignored files are also removed. This can, for example, be useful to remove all build products.</source>
          <target state="translated">일반적으로 Git에 알려지지 않은 파일 만 제거되지만 &lt;code&gt;-x&lt;/code&gt; 옵션을 지정하면 무시 된 파일도 제거됩니다. 예를 들어 모든 빌드 제품을 제거하는 데 유용 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ea1a90319260338e8b5ddefd985427f3690ce910" translate="yes" xml:space="preserve">
          <source>Normally, the &quot;git svn clone&quot; and &quot;git svn rebase&quot; commands attempt to recreate empty directories that are in the Subversion repository. If this option is set to &quot;false&quot;, then empty directories will only be created if the &quot;git svn mkdirs&quot; command is run explicitly. If unset, &lt;code&gt;git svn&lt;/code&gt; assumes this option to be &quot;true&quot;.</source>
          <target state="translated">일반적으로 &quot;git svn clone&quot;및 &quot;git svn rebase&quot;명령은 Subversion 저장소에있는 빈 디렉토리를 다시 작성하려고 시도합니다. 이 옵션을 &quot;false&quot;로 설정하면 &quot;git svn mkdirs&quot;명령이 명시 적으로 실행되는 경우에만 빈 디렉토리가 작성됩니다. 설정하지 않으면 &lt;code&gt;git svn&lt;/code&gt; 은이 옵션을 &quot;true&quot;로 가정합니다.</target>
        </trans-unit>
        <trans-unit id="cbab35b86acdc7c387af4e06856d3dc90a27828f" translate="yes" xml:space="preserve">
          <source>Normally, the &quot;name&quot; field contains the canonical name of the command. When a canonical name is not available, one of these special values are used:</source>
          <target state="translated">일반적으로 &quot;이름&quot;필드에는 명령의 정식 이름이 포함됩니다. 정식 이름을 사용할 수없는 경우 다음 특수 값 중 하나가 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="a72159c3df537e6c1eeaac201666cb67a55dea2c" translate="yes" xml:space="preserve">
          <source>Normally, the first commit in an SVN branch consists of a copy operation. &lt;code&gt;git svn&lt;/code&gt; will read this commit to get the SVN revision the branch was created from. It will then try to find the Git commit that corresponds to this SVN revision, and use that as the parent of the branch. However, it is possible that there is no suitable Git commit to serve as parent. This will happen, among other reasons, if the SVN branch is a copy of a revision that was not fetched by &lt;code&gt;git svn&lt;/code&gt; (e.g. because it is an old revision that was skipped with &lt;code&gt;--revision&lt;/code&gt;), or if in SVN a directory was copied that is not tracked by &lt;code&gt;git svn&lt;/code&gt; (such as a branch that is not tracked at all, or a subdirectory of a tracked branch). In these cases, &lt;code&gt;git svn&lt;/code&gt; will still create a Git branch, but instead of using an existing Git commit as the parent of the branch, it will read the SVN history of the directory the branch was copied from and create appropriate Git commits. This is indicated by the message &quot;Initializing parent: &amp;lt;branchname&amp;gt;&quot;.</source>
          <target state="translated">일반적으로 SVN 분기의 첫 번째 커밋은 복사 작업으로 구성됩니다. &lt;code&gt;git svn&lt;/code&gt; 은이 커밋을 읽어 분기가 작성된 SVN 개정을 가져옵니다. 그런 다음이 SVN 개정에 해당하는 Git 커밋을 찾아이를 브랜치의 부모로 사용합니다. 그러나 부모 역할을 수행하기에 적합한 Git 커밋이 없을 수 있습니다. SVN 브랜치가 &lt;code&gt;git svn&lt;/code&gt; 에 의해 페치되지 않은 리비전의 사본 인 경우 (예 : &lt;code&gt;--revision&lt;/code&gt; 으로 건너 뛴 이전 리비전이기 때문에 ) SVN에서 디렉토리가 복사 된 경우 이러한 상황이 발생합니다. 그것은 &lt;code&gt;git svn&lt;/code&gt; 에 의해 추적되지 않습니다 (예 : 전혀 추적되지 않는 분기 또는 추적 된 분기의 하위 디렉토리). 이 경우 &lt;code&gt;git svn&lt;/code&gt; 여전히 Git 브랜치를 생성하지만 기존 Git 커밋을 브랜치의 부모로 사용하는 대신 브랜치가 복사 된 디렉토리의 SVN 히스토리를 읽고 적절한 Git 커밋을 생성합니다. &quot;초기화 부모 : &amp;lt;branchname&amp;gt;&quot;메시지로 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="4d54b3aadfbad6c493d83bcb2428d0cb9e46992e" translate="yes" xml:space="preserve">
          <source>Normally, when no &amp;lt;path&amp;gt; is specified, git clean will not recurse into untracked directories to avoid removing too much. Specify -d to have it recurse into such directories as well. If any paths are specified, -d is irrelevant; all untracked files matching the specified paths (with exceptions for nested git directories mentioned under &lt;code&gt;--force&lt;/code&gt;) will be removed.</source>
          <target state="translated">일반적으로 &amp;lt;path&amp;gt;를 지정하지 않으면 git clean은 너무 많은 제거를 피하기 위해 추적되지 않은 디렉토리로 재귀하지 않습니다. 그러한 디렉토리로도 재귀 시키려면 -d를 지정하십시오. 경로가 지정되면 -d는 관련이 없습니다. 지정된 경로와 일치하는 추적되지 않은 모든 파일 ( &lt;code&gt;--force&lt;/code&gt; 에 언급 된 중첩 된 git 디렉토리 제외 )이 제거됩니다.</target>
        </trans-unit>
        <trans-unit id="429c7c6d611a6b06377c7694b2f456c87ba75047" translate="yes" xml:space="preserve">
          <source>Not all pattern types support patterns containing \0. Git will error out if a given pattern type can&amp;rsquo;t support such a pattern. The &lt;code&gt;--perl-regexp&lt;/code&gt; pattern type when compiled against the PCRE v2 backend has the widest support for these types of patterns.</source>
          <target state="translated">모든 패턴 유형이 \ 0을 포함하는 패턴을 지원하지는 않습니다. 주어진 패턴 유형이 그러한 패턴을 지원할 수 없으면 Git은 오류가 발생합니다. &lt;code&gt;--perl-regexp&lt;/code&gt; PCRE v2를 백엔드에 대해 컴파일 된 패턴 유형 패턴의 이러한 유형에 대한 폭 넓은 지원을하고있다.</target>
        </trans-unit>
        <trans-unit id="fc85aa9ed9f2a57ce72e656178cf6fe66c794d02" translate="yes" xml:space="preserve">
          <source>Not all values are equally unambiguous:</source>
          <target state="translated">모든 값이 동일하게 모호한 것은 아닙니다.</target>
        </trans-unit>
        <trans-unit id="8394b0fb9c23c1116919b0832addc200fe1387df" translate="yes" xml:space="preserve">
          <source>Not to worry. It left the (trivial) conflict in &lt;code&gt;hello&lt;/code&gt; in the same form you should already be well used to if you&amp;rsquo;ve ever used CVS, so let&amp;rsquo;s just open &lt;code&gt;hello&lt;/code&gt; in our editor (whatever that may be), and fix it up somehow. I&amp;rsquo;d suggest just making it so that &lt;code&gt;hello&lt;/code&gt; contains all four lines:</source>
          <target state="translated">걱정할 필요 없어요. CVS를 사용한 적이 있다면 이미 익숙해 져야 할 것과 같은 형태 로 &lt;code&gt;hello&lt;/code&gt; 의 (사소한) 충돌을 남겼 으므로 에디터에서 &lt;code&gt;hello&lt;/code&gt; 를 열어서 어떻게 든 수정하십시오. &lt;code&gt;hello&lt;/code&gt; 에 네 줄이 모두 포함 되도록 만드는 것이 좋습니다 .</target>
        </trans-unit>
        <trans-unit id="2c924e3088204ee77ba681f72be3444357932fca" translate="yes" xml:space="preserve">
          <source>Note</source>
          <target state="translated">Note</target>
        </trans-unit>
        <trans-unit id="b7ed8e5f5bf09b0c843d3af582307ddfb588c4c6" translate="yes" xml:space="preserve">
          <source>Note about fast-forwards</source>
          <target state="translated">빨리 감기에 대한 참고 사항</target>
        </trans-unit>
        <trans-unit id="318ccd302e94c5b26153ff4314826ba81af60a67" translate="yes" xml:space="preserve">
          <source>Note about git config --global</source>
          <target state="translated">git config --global에 대한 참고 사항</target>
        </trans-unit>
        <trans-unit id="a858b9b8c7722185661603839f0881f8c7f88318" translate="yes" xml:space="preserve">
          <source>Note about konqueror</source>
          <target state="translated">Konqueror에 대한 참고 사항</target>
        </trans-unit>
        <trans-unit id="01b5dd07775875ee6aa9a8a3da76365c637f9b1a" translate="yes" xml:space="preserve">
          <source>Note also that multiple copies of an object may be present in the object database; in this case, it is undefined which copy&amp;rsquo;s size or delta base will be reported.</source>
          <target state="translated">또한 개체 데이터베이스에 개체의 여러 복사본이있을 수 있습니다. 이 경우 어떤 사본의 크기 또는 델타베이스가보고 될지는 정의되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="e92cbc9ca374ec932eab116752367c5739918c53" translate="yes" xml:space="preserve">
          <source>Note for Git users, that it is equivalent as keeping only the commit given by:</source>
          <target state="translated">Git 사용자에게는 다음과 같은 커밋 만 유지하는 것과 같습니다.</target>
        </trans-unit>
        <trans-unit id="9cd066f98a94620416bd40171030f2cd3deb4780" translate="yes" xml:space="preserve">
          <source>Note how the rule to only follow the TREESAME parent, if one is available, removed &lt;code&gt;B&lt;/code&gt; from consideration entirely. &lt;code&gt;C&lt;/code&gt; was considered via &lt;code&gt;N&lt;/code&gt;, but is TREESAME. Root commits are compared to an empty tree, so &lt;code&gt;I&lt;/code&gt; is !TREESAME.</source>
          <target state="translated">사용 가능한 경우 TREESAME 상위 만 따르는 규칙이 &lt;code&gt;B&lt;/code&gt; 를 완전히 고려 하지 않은 방법에 유의하십시오 . &lt;code&gt;C&lt;/code&gt; 는 &lt;code&gt;N&lt;/code&gt; 을 통해 고려 되었지만 TREESAME입니다. 그래서 루트 커밋은 빈 나무에 비교 &lt;code&gt;I&lt;/code&gt; ! TREESAME입니다.</target>
        </trans-unit>
        <trans-unit id="8bfd2da46a110f046c6975fde1a8b82933cacdc7" translate="yes" xml:space="preserve">
          <source>Note how there is no need for an entry for &lt;code&gt;&amp;lt;jane@laptop.(none)&amp;gt;&lt;/code&gt;, because the real name of that author is already correct.</source>
          <target state="translated">해당 저자의 실제 이름이 이미 정확하기 때문에 &lt;code&gt;&amp;lt;jane@laptop.(none)&amp;gt;&lt;/code&gt; 에 대한 항목이 필요하지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="a357a7dbcbc2a41b2d3445e7cfb8ae38a48bfe09" translate="yes" xml:space="preserve">
          <source>Note in the example that we set up a triangular workflow, where we pull from one location and push to another. In a non-triangular workflow, &lt;code&gt;@{push}&lt;/code&gt; is the same as &lt;code&gt;@{upstream}&lt;/code&gt;, and there is no need for it.</source>
          <target state="translated">이 예에서는 삼각형 워크 플로를 설정하여 한 위치에서 다른 위치로 밀고갑니다. 비 삼각형 워크 플로에서 &lt;code&gt;@{push}&lt;/code&gt; 는 &lt;code&gt;@{upstream}&lt;/code&gt; 과 동일하므로 필요하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="01660f89f7c458ce6428d6e0df0b322692b74596" translate="yes" xml:space="preserve">
          <source>Note that &quot;%f&quot; is the name of the path that is being worked on. Depending on the version that is being filtered, the corresponding file on disk may not exist, or may have different contents. So, smudge and clean commands should not try to access the file on disk, but only act as filters on the content provided to them on standard input.</source>
          <target state="translated">&quot;% f&quot;는 작업중인 경로의 이름입니다. 필터링되는 버전에 따라 디스크에 해당 파일이 없거나 내용이 다를 수 있습니다. 따라서 얼룩 및 정리 명령은 디스크의 파일에 액세스하려고 시도하지 말고 표준 입력에서 제공된 컨텐츠에 대한 필터 역할 만합니다.</target>
        </trans-unit>
        <trans-unit id="014f6a8d43d7b297d024fa501c939621bed28154" translate="yes" xml:space="preserve">
          <source>Note that &quot;../&quot; is not special and will match literally, which is unlikely what you want.</source>
          <target state="translated">&quot;../&quot;는 특별하지 않으며 문자 그대로 일치하므로 원하는 것은 아닙니다.</target>
        </trans-unit>
        <trans-unit id="8b91ded5c4fad4671b25fb8bfeab09bc89a0acef" translate="yes" xml:space="preserve">
          <source>Note that (3) is a historical artefact and will be ignored if the (1) and (2) specify that the submodule is not active. In other words, if we have a &lt;code&gt;submodule.&amp;lt;name&amp;gt;.active&lt;/code&gt; set to &lt;code&gt;false&lt;/code&gt; or if the submodule&amp;rsquo;s path is excluded in the pathspec in &lt;code&gt;submodule.active&lt;/code&gt;, the url doesn&amp;rsquo;t matter whether it is present or not. This is illustrated in the example that follows.</source>
          <target state="translated">(3)은 역사적인 아티팩트이며 (1)과 (2)가 서브 모듈이 활성화되지 않았다고 지정하면 무시됩니다. 즉, &lt;code&gt;submodule.&amp;lt;name&amp;gt;.active&lt;/code&gt; 가 &lt;code&gt;false&lt;/code&gt; 로 설정되어 있거나 submodule.active의 경로 스펙에서 &lt;code&gt;submodule.active&lt;/code&gt; 모듈의 경로가 제외 된 경우 URL의 존재 여부에 관계없이 URL이 중요하지 않습니다. 다음에 나오는 예에 설명되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="6fec9940a0e0728d1bf92151624eb87584d6019f" translate="yes" xml:space="preserve">
          <source>Note that --more, --list, --independent and --merge-base options are mutually exclusive.</source>
          <target state="translated">--more, --list, --independent 및 --merge-base 옵션은 상호 배타적입니다.</target>
        </trans-unit>
        <trans-unit id="9b9a74f48dd77c7cda36904d8ae57495c22af6f7" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;--force&lt;/code&gt; applies to all the refs that are pushed, hence using it with &lt;code&gt;push.default&lt;/code&gt; set to &lt;code&gt;matching&lt;/code&gt; or with multiple push destinations configured with &lt;code&gt;remote.*.push&lt;/code&gt; may overwrite refs other than the current branch (including local refs that are strictly behind their remote counterpart). To force a push to only one branch, use a &lt;code&gt;+&lt;/code&gt; in front of the refspec to push (e.g &lt;code&gt;git push
origin +master&lt;/code&gt; to force a push to the &lt;code&gt;master&lt;/code&gt; branch). See the &lt;code&gt;&amp;lt;refspec&amp;gt;...&lt;/code&gt; section above for details.</source>
          <target state="translated">&lt;code&gt;--force&lt;/code&gt; 는 푸시 된 모든 참조에 적용되므로 &lt;code&gt;push.default&lt;/code&gt; 를 &lt;code&gt;matching&lt;/code&gt; 설정 하거나 &lt;code&gt;remote.*.push&lt;/code&gt; 구성된 여러 푸시 대상과 함께 사용하면 * .push 는 현재 분기 (예 : 로컬 참조 포함) 이외의 참조를 덮어 쓸 수 있습니다 . 그들의 원격 상대방 뒤에 엄격히). 하나의 브랜치로만 푸시하려면 참조 스펙 앞의 &lt;code&gt;+&lt;/code&gt; 를 사용 하여 푸시합니다 (예 : &lt;code&gt;git push origin +master&lt;/code&gt; 는 &lt;code&gt;master&lt;/code&gt; 브랜치 를 강제로 푸시합니다 ). 자세한 내용은 위 의 &lt;code&gt;&amp;lt;refspec&amp;gt;...&lt;/code&gt; 섹션을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="f71426a1d6dfa55d8e5b4bb3bb7ddab1eba41559" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;--patch&lt;/code&gt; can accept no pathspec and will prompt to restore all modified paths.</source>
          <target state="translated">참고 &lt;code&gt;--patch&lt;/code&gt; 가 더 pathspec을 받아 들일 수 없으며 수정 된 모든 경로를 복원하라는 메시지가 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="788dab85e40bdd496cc4b3d8bdc2f5695fd79580" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;combined diff&lt;/code&gt; lists only files which were modified from all parents.</source>
          <target state="translated">참고 그 &lt;code&gt;combined diff&lt;/code&gt; 모든 부모로부터 수정 된 목록 파일 만.</target>
        </trans-unit>
        <trans-unit id="e64bae554ef50a53010f144d204d2601ed2388af" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;git --help ...&lt;/code&gt; is identical to &lt;code&gt;git help ...&lt;/code&gt; because the former is internally converted into the latter.</source>
          <target state="translated">참고 것을 &lt;code&gt;git --help ...&lt;/code&gt; 동일하다 &lt;code&gt;git help ...&lt;/code&gt; 전자는 내부적으로 후자로 변환되기 때문이다.</target>
        </trans-unit>
        <trans-unit id="0f050e4f28b585b64021f162ba65306d71b16a1c" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;git add&lt;/code&gt; always adds just the current contents of a file to the index; further changes to the same file will be ignored unless you run &lt;code&gt;git add&lt;/code&gt; on the file again.</source>
          <target state="translated">참고 &lt;code&gt;git add&lt;/code&gt; 항상 인덱스에 파일의 바로 현재 내용을 추가합니다; 파일에서 &lt;code&gt;git add&lt;/code&gt; 를 다시 실행하지 않으면 동일한 파일에 대한 추가 변경 사항은 무시 됩니다.</target>
        </trans-unit>
        <trans-unit id="a75d3b6c972faf4b238fb20e64f0ae5ba4c5e6f0" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;git diff-tree&lt;/code&gt; can use the tree encapsulated in a commit object.</source>
          <target state="translated">참고 &lt;code&gt;git diff-tree&lt;/code&gt; 커밋 객체에 캡슐화 트리를 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c22023840a6edf8cbd10c5905bf1fe0b2598253c" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;trailers&lt;/code&gt; do not follow and are not intended to follow many rules for RFC 822 headers. For example they do not follow the encoding rules and probably many other rules.</source>
          <target state="translated">참고 &lt;code&gt;trailers&lt;/code&gt; 따르지 않는 및 RFC 822 헤더에 대한 많은 규칙을 따라야하는 것은 아니다. 예를 들어 인코딩 규칙과 다른 많은 규칙을 따르지 않습니다.</target>
        </trans-unit>
        <trans-unit id="99d4b644b5be625d6423f4cb1035eccb3ada0dfe" translate="yes" xml:space="preserve">
          <source>Note that Git at the core level treats path names simply as sequences of non-NUL bytes, there are no path name encoding conversions (except on Mac and Windows). Therefore, using non-ASCII path names will mostly work even on platforms and file systems that use legacy extended ASCII encodings. However, repositories created on such systems will not work properly on UTF-8-based systems (e.g. Linux, Mac, Windows) and vice versa. Additionally, many Git-based tools simply assume path names to be UTF-8 and will fail to display other encodings correctly.</source>
          <target state="translated">코어 수준의 Git은 경로 이름을 NUL이 아닌 바이트 시퀀스로 취급하므로 경로 이름 인코딩 변환은 없습니다 (Mac 및 Windows 제외). 따라서 비 ASCII 경로 이름을 사용하면 레거시 확장 ASCII 인코딩을 사용하는 플랫폼 및 파일 시스템에서도 대부분 작동합니다. 그러나 이러한 시스템에서 작성된 저장소는 UTF-8 기반 시스템 (예 : Linux, Mac, Windows)에서 제대로 작동하지 않으며 그 반대도 마찬가지입니다. 또한 많은 Git 기반 도구는 단순히 경로 이름을 UTF-8로 가정하고 다른 인코딩을 올바르게 표시하지 못합니다.</target>
        </trans-unit>
        <trans-unit id="9883f1d7503e774a80aca1b5641976f5b274bd93" translate="yes" xml:space="preserve">
          <source>Note that a &lt;code&gt;filerename&lt;/code&gt; is the same as a &lt;code&gt;filecopy&lt;/code&gt; followed by a &lt;code&gt;filedelete&lt;/code&gt; of the source location. There is a slight performance advantage to using &lt;code&gt;filerename&lt;/code&gt;, but the advantage is so small that it is never worth trying to convert a delete/add pair in source material into a rename for fast-import. This &lt;code&gt;filerename&lt;/code&gt; command is provided just to simplify frontends that already have rename information and don&amp;rsquo;t want bother with decomposing it into a &lt;code&gt;filecopy&lt;/code&gt; followed by a &lt;code&gt;filedelete&lt;/code&gt;.</source>
          <target state="translated">유의 &lt;code&gt;filerename&lt;/code&gt; 는 A와 동일 &lt;code&gt;filecopy&lt;/code&gt; 가 a로 하였다 &lt;code&gt;filedelete&lt;/code&gt; 소스 위치. &lt;code&gt;filerename&lt;/code&gt; 을 사용하면 약간의 성능 이점이 있지만 이점은 너무 작아서 소스 자료의 삭제 / 추가 쌍을 빠른 가져 오기를 위해 이름 바꾸기로 변환하려고 시도 할 가치가 없습니다. 이 &lt;code&gt;filerename&lt;/code&gt; 명령은 이미 이름 변경 정보가 있고이를 &lt;code&gt;filecopy&lt;/code&gt; 로 분해 한 다음 &lt;code&gt;filedelete&lt;/code&gt; 로 방해하지 않는 프런트 엔드를 단순화하기 위해 제공됩니다 .</target>
        </trans-unit>
        <trans-unit id="0f7296e0d288c1c6e4ca2a5e972f6c90872dfac0" translate="yes" xml:space="preserve">
          <source>Note that a commit does not itself contain any information about what actually changed; all changes are calculated by comparing the contents of the tree referred to by this commit with the trees associated with its parents. In particular, Git does not attempt to record file renames explicitly, though it can identify cases where the existence of the same file data at changing paths suggests a rename. (See, for example, the &lt;code&gt;-M&lt;/code&gt; option to &lt;a href=&quot;git-diff&quot;&gt;git-diff[1]&lt;/a&gt;).</source>
          <target state="translated">커밋 자체에는 실제로 변경된 사항에 대한 정보가 포함되어 있지 않습니다. 모든 커밋은이 커밋이 참조하는 트리의 내용을 부모와 관련된 트리와 비교하여 계산됩니다. 특히, Git은 파일 이름 변경을 명시 적으로 기록하려고 시도하지 않지만 경로 변경시 동일한 파일 데이터가 존재하여 이름이 변경되는 경우를 식별 할 수 있습니다. 예를 들어, &lt;a href=&quot;git-diff&quot;&gt;git-diff [1]에&lt;/a&gt; 대한 &lt;code&gt;-M&lt;/code&gt; 옵션을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="54977b94f7c8617e07e8f365a31b9faa2fc062c5" translate="yes" xml:space="preserve">
          <source>Note that a more compact instruction does not change offset and size encoding. For example, if only offset2 is omitted like below, offset3 still contains bits 16-23. It does not become offset2 and contains bits 8-15 even if it&amp;rsquo;s right next to offset1.</source>
          <target state="translated">보다 간결한 명령어는 오프셋 및 크기 인코딩을 변경하지 않습니다. 예를 들어, 아래와 같이 offset2 만 생략해도 offset3에는 여전히 16-23 비트가 포함됩니다. offset1 바로 옆에 있어도 offset2가되지 않고 비트 8-15를 포함합니다.</target>
        </trans-unit>
        <trans-unit id="2599b1548726c0979f146506e9008608bae9db4a" translate="yes" xml:space="preserve">
          <source>Note that a rebase merge works by replaying each commit from the working branch on top of the &amp;lt;upstream&amp;gt; branch. Because of this, when a merge conflict happens, the side reported as &lt;code&gt;ours&lt;/code&gt; is the so-far rebased series, starting with &amp;lt;upstream&amp;gt;, and &lt;code&gt;theirs&lt;/code&gt; is the working branch. In other words, the sides are swapped.</source>
          <target state="translated">리베이스 병합은 &amp;lt;upstream&amp;gt; 분기의 맨 위에있는 작업 분기에서 각 커밋을 재생하여 작동합니다. 병합 충돌이 발생하는 경우와 같이이 때문에, 측면은보고 &lt;code&gt;ours&lt;/code&gt; &amp;lt;업스트림&amp;gt;을 시작으로 이제까지의 리베이스 시리즈, 그리고 &lt;code&gt;theirs&lt;/code&gt; 작업 지점입니다. 다시 말해, 측면이 서로 바뀝니다.</target>
        </trans-unit>
        <trans-unit id="8523c23f527cd324df8d4075c34f666be6f6f3b7" translate="yes" xml:space="preserve">
          <source>Note that all forms other than &lt;code&gt;--force-with-lease=&amp;lt;refname&amp;gt;:&amp;lt;expect&amp;gt;&lt;/code&gt; that specifies the expected current value of the ref explicitly are still experimental and their semantics may change as we gain experience with this feature.</source>
          <target state="translated">참조 의 예상 현재 값을 명시 적으로 지정하는 &lt;code&gt;--force-with-lease=&amp;lt;refname&amp;gt;:&amp;lt;expect&amp;gt;&lt;/code&gt; 이외의 모든 형식 은 여전히 ​​실험적이며이 기능에 대한 경험을 쌓으면 의미가 변경 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="4c01852cae3ff7462ff1404dd165465e299075b3" translate="yes" xml:space="preserve">
          <source>Note that all these configuration variables should probably be set using the &lt;code&gt;--global&lt;/code&gt; flag, for example like this:</source>
          <target state="translated">이러한 모든 구성 변수는 &lt;code&gt;--global&lt;/code&gt; 플래그를 사용하여 설정해야 합니다 (예 : 다음과 같이).</target>
        </trans-unit>
        <trans-unit id="11bfa085b8a4e40f2da0245c59f1751f600a1ada" translate="yes" xml:space="preserve">
          <source>Note that any of the &lt;code&gt;refs/*&lt;/code&gt; cases above may come either from the &lt;code&gt;$GIT_DIR/refs&lt;/code&gt; directory or from the &lt;code&gt;$GIT_DIR/packed-refs&lt;/code&gt; file. While the ref name encoding is unspecified, UTF-8 is preferred as some output processing may assume ref names in UTF-8.</source>
          <target state="translated">위 의 &lt;code&gt;refs/*&lt;/code&gt; 사례는 &lt;code&gt;$GIT_DIR/refs&lt;/code&gt; 디렉토리 또는 &lt;code&gt;$GIT_DIR/packed-refs&lt;/code&gt; 파일에서 올 수 있습니다. 참조 이름 인코딩은 지정되지 않지만 일부 출력 처리는 참조 이름을 UTF-8로 가정 할 수 있으므로 UTF-8이 선호됩니다.</target>
        </trans-unit>
        <trans-unit id="508d8a380e829238fc278b6ce7f900eddc6afba3" translate="yes" xml:space="preserve">
          <source>Note that any protocol restrictions will be applied to the rewritten URL. If the rewrite changes the URL to use a custom protocol or remote helper, you may need to adjust the &lt;code&gt;protocol.*.allow&lt;/code&gt; config to permit the request. In particular, protocols you expect to use for submodules must be set to &lt;code&gt;always&lt;/code&gt; rather than the default of &lt;code&gt;user&lt;/code&gt;. See the description of &lt;code&gt;protocol.allow&lt;/code&gt; above.</source>
          <target state="translated">다시 작성된 URL에는 모든 프로토콜 제한 사항이 적용됩니다. 다시 쓰기가 사용자 지정 프로토콜 또는 원격 도우미를 사용하도록 URL을 변경하는 경우 요청을 허용 &lt;code&gt;protocol.*.allow&lt;/code&gt; 을 조정해야 합니다. *. allow 구성. 특히, 서브 모듈에 사용할 프로토콜 은 기본값 &lt;code&gt;user&lt;/code&gt; 가 아닌 &lt;code&gt;always&lt;/code&gt; 설정해야합니다 . 위 의 &lt;code&gt;protocol.allow&lt;/code&gt; 에 대한 설명을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="85755e8e95f86917d98f865efeaea006efa16988" translate="yes" xml:space="preserve">
          <source>Note that any tree or blob object can be examined using &lt;a href=&quot;git-show&quot;&gt;git-show[1]&lt;/a&gt; with the &amp;lt;revision&amp;gt;:&amp;lt;path&amp;gt; syntax. This can sometimes be useful for browsing the contents of a tree that is not currently checked out.</source>
          <target state="translated">&amp;lt;revision&amp;gt; : &amp;lt;path&amp;gt; 구문과 함께 &lt;a href=&quot;git-show&quot;&gt;git-show [1]&lt;/a&gt; 을 사용하여 모든 트리 또는 BLOB 객체를 검사 할 수 있습니다 . 이것은 현재 체크 아웃되지 않은 트리의 내용을 탐색 할 때 유용 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="fbb379f0a0fd79434d80db46f9a2b53054c72c7c" translate="yes" xml:space="preserve">
          <source>Note that attributes are by default taken from the &lt;code&gt;.gitattributes&lt;/code&gt; files in the tree that is being archived. If you want to tweak the way the output is generated after the fact (e.g. you committed without adding an appropriate export-ignore in its &lt;code&gt;.gitattributes&lt;/code&gt;), adjust the checked out &lt;code&gt;.gitattributes&lt;/code&gt; file as necessary and use &lt;code&gt;--worktree-attributes&lt;/code&gt; option. Alternatively you can keep necessary attributes that should apply while archiving any tree in your &lt;code&gt;$GIT_DIR/info/attributes&lt;/code&gt; file.</source>
          <target state="translated">속성은 기본적 으로 아카이브중인 트리 의 &lt;code&gt;.gitattributes&lt;/code&gt; 파일에서 가져옵니다 . 사실 이후에 출력이 생성되는 방식을 조정하려면 (예 : &lt;code&gt;.gitattributes&lt;/code&gt; 에 적절한 내보내기 무시를 추가하지 않고 커밋 한 경우 ) 필요에 따라 체크 아웃 된 &lt;code&gt;.gitattributes&lt;/code&gt; 파일을 조정하고 &lt;code&gt;--worktree-attributes&lt;/code&gt; 옵션을 사용하십시오. 또는 &lt;code&gt;$GIT_DIR/info/attributes&lt;/code&gt; 파일 에서 트리를 아카이브하는 동안 적용해야하는 필요한 속성을 유지할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="cff58353f0553493321de729107a5ed939f5819e" translate="yes" xml:space="preserve">
          <source>Note that changing the compression level will not automatically recompress all existing objects. You can force recompression by passing the -F option to &lt;a href=&quot;git-repack&quot;&gt;git-repack[1]&lt;/a&gt;.</source>
          <target state="translated">압축 수준을 변경해도 기존의 모든 객체가 자동으로 다시 압축되는 것은 아닙니다. -F 옵션을 &lt;a href=&quot;git-repack&quot;&gt;git-repack [1]&lt;/a&gt; 에 전달하여 강제로 다시 압축 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="64e3311b0fc4c31b0c8a5b69594b7b0fffce6672" translate="yes" xml:space="preserve">
          <source>Note that commands that operate on the history of the current branch (e.g. &lt;code&gt;git commit&lt;/code&gt; to build a new history on top of it) still work while the HEAD is detached. They update the HEAD to point at the tip of the updated history without affecting any branch. Commands that update or inquire information &lt;code&gt;about&lt;/code&gt; the current branch (e.g. &lt;code&gt;git
branch --set-upstream-to&lt;/code&gt; that sets what remote-tracking branch the current branch integrates with) obviously do not work, as there is no (real) current branch to ask about in this state.</source>
          <target state="translated">HEAD가 분리되어있는 동안 현재 분기의 히스토리 (예 : 새 히스토리를 빌드하기위한 &lt;code&gt;git commit&lt;/code&gt; )에서 작동하는 명령은 계속 작동합니다. 그들은 분기에 영향을 미치지 않고 업데이트 된 히스토리의 끝을 가리 키도록 HEAD를 업데이트합니다. 요청할 현재 지점이 없으므로 현재 지점 &lt;code&gt;about&lt;/code&gt; 정보를 업데이트하거나 조회하는 명령 (예 : 현재 지점과 통합 된 원격 추적 지점을 설정하는 &lt;code&gt;git branch --set-upstream-to&lt;/code&gt; )은 작동하지 않습니다. 이 상태에서.</target>
        </trans-unit>
        <trans-unit id="c16e502657efa32285522830eee76fe68f8a2daa" translate="yes" xml:space="preserve">
          <source>Note that despite the name of the first mode, color is used to highlight the changed parts in all modes if enabled.</source>
          <target state="translated">첫 번째 모드의 이름에도 불구하고 색상은 활성화 된 경우 모든 모드에서 변경된 부분을 강조 표시하는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="53b666711e62d15ce074196074eb30f8dac41460" translate="yes" xml:space="preserve">
          <source>Note that diff options passed to the command affect how the primary product of &lt;code&gt;format-patch&lt;/code&gt; is generated, and they are not passed to the underlying &lt;code&gt;range-diff&lt;/code&gt; machinery used to generate the cover-letter material (this may change in the future).</source>
          <target state="translated">명령에 전달 된 diff 옵션은 &lt;code&gt;format-patch&lt;/code&gt; 의 1 차 제품 이 생성되는 방법에 영향을 미치며 , 커버 레터 자료를 생성하는 데 사용 되는 기본 &lt;code&gt;range-diff&lt;/code&gt; 기계로 전달되지 않습니다 (향후 변경 될 수 있음).</target>
        </trans-unit>
        <trans-unit id="e0e05126bbcc50063c2790c39405469ee70a21a8" translate="yes" xml:space="preserve">
          <source>Note that during &lt;code&gt;git rebase&lt;/code&gt; and &lt;code&gt;git pull --rebase&lt;/code&gt;, &lt;code&gt;ours&lt;/code&gt; and &lt;code&gt;theirs&lt;/code&gt; may appear swapped. See the explanation of the same options in &lt;a href=&quot;git-checkout&quot;&gt;git-checkout[1]&lt;/a&gt; for details.</source>
          <target state="translated">시 유의 &lt;code&gt;git rebase&lt;/code&gt; 와 &lt;code&gt;git pull --rebase&lt;/code&gt; , &lt;code&gt;ours&lt;/code&gt; 하고 &lt;code&gt;theirs&lt;/code&gt; 교환 나타날 수 있습니다. 자세한 내용은 &lt;a href=&quot;git-checkout&quot;&gt;git-checkout [1]&lt;/a&gt; 에서 동일한 옵션에 대한 설명을 참조 하십시오.</target>
        </trans-unit>
        <trans-unit id="1af7aa20d72debc79fb9171e27e72669f87bd742" translate="yes" xml:space="preserve">
          <source>Note that during &lt;code&gt;git rebase&lt;/code&gt; and &lt;code&gt;git pull --rebase&lt;/code&gt;, &lt;code&gt;ours&lt;/code&gt; and &lt;code&gt;theirs&lt;/code&gt; may appear swapped; &lt;code&gt;--ours&lt;/code&gt; gives the version from the branch the changes are rebased onto, while &lt;code&gt;--theirs&lt;/code&gt; gives the version from the branch that holds your work that is being rebased.</source>
          <target state="translated">참고 그 동안 &lt;code&gt;git rebase&lt;/code&gt; 와 &lt;code&gt;git pull --rebase&lt;/code&gt; , &lt;code&gt;ours&lt;/code&gt; 와 &lt;code&gt;theirs&lt;/code&gt; 교환 나타날 수 있습니다; &lt;code&gt;--ours&lt;/code&gt; 는 변경 사항이 기반으로 하는 지점의 버전을 제공하는 반면, &lt;code&gt;--theirs&lt;/code&gt; 는 기반이되는 작업을 보유한 지점의 버전을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="c0c3e4b221eecb8ab2fd8007bde41fbeccbc289b" translate="yes" xml:space="preserve">
          <source>Note that earlier implementation left a broken pair as a separate creation and deletion patches. This was an unnecessary hack and the latest implementation always merges all the broken pairs back into modifications, but the resulting patch output is formatted differently for easier review in case of such a complete rewrite by showing the entire contents of old version prefixed with &lt;code&gt;-&lt;/code&gt;, followed by the entire contents of new version prefixed with &lt;code&gt;+&lt;/code&gt;.</source>
          <target state="translated">이전 구현에서는 깨진 쌍이 별도의 작성 및 삭제 패치로 남았습니다. 이것은 불필요한 해킹했다 최신 구현은 항상 모든 깨진 쌍 수정에 다시 병합 있지만 결과 패치 출력이 접두사 이전 버전의 전체 내용을 보여줌으로써 이러한 완전히 재 작성의 경우 쉽게 검토를 위해 다른 포맷 &lt;code&gt;-&lt;/code&gt; , 다음을 접두사 새 버전의 전체 내용에 의해 &lt;code&gt;+&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="1e94eb3093be7f837a0c2027288d60b6c3b52e2c" translate="yes" xml:space="preserve">
          <source>Note that earlier versions of this command did not complain and produced incorrect results if you gave these options.</source>
          <target state="translated">이 명령의 이전 버전은 이러한 옵션을 제공 한 경우 불평하지 않고 잘못된 결과를 생성했습니다.</target>
        </trans-unit>
        <trans-unit id="5d58dd5b84f29e01b510ca03eab20796ad3c7cbe" translate="yes" xml:space="preserve">
          <source>Note that extra commits can be shown to give a meaningful history.</source>
          <target state="translated">의미있는 기록을 제공하기 위해 추가 커밋이 표시 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5d8bcfac8a1a61a9e4be4013c3b0af7c68e4f7e1" translate="yes" xml:space="preserve">
          <source>Note that fast-forward updates do not create a merge commit and therefore there is no way to stop those merges with --no-commit. Thus, if you want to ensure your branch is not changed or updated by the merge command, use --no-ff with --no-commit.</source>
          <target state="translated">빨리 감기 업데이트는 병합 커밋을 만들지 않으므로 --no-commit으로 병합을 중지 할 수있는 방법이 없습니다. 따라서 merge 명령으로 분기를 변경하거나 업데이트하지 않으려면 --no-ff를 --no-commit과 함께 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="f0d1c52e1eb6b4521a19e733ce553d5995206cf5" translate="yes" xml:space="preserve">
          <source>Note that fast-import automatically switches packfiles when the current packfile reaches --max-pack-size, or 4 GiB, whichever limit is smaller. During an automatic packfile switch fast-import does not update the branch refs, tags or marks.</source>
          <target state="translated">현재 팩 파일이 --max-pack-size 또는 4GiB (둘 중 더 작은 값)에 도달하면 빠른 가져 오기에서 팩 파일을 자동으로 전환합니다. 자동 팩 파일 전환 중에 빠른 가져 오기는 분기 참조, 태그 또는 마크를 업데이트하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="6615d1d4a8cbe8f9f5da36594407e26f3b365d70" translate="yes" xml:space="preserve">
          <source>Note that git log starts with the most recent commit and works backwards through the parents; however, since Git history can contain multiple independent lines of development, the particular order that commits are listed in may be somewhat arbitrary.</source>
          <target state="translated">자식 로그는 가장 최근의 커밋으로 시작하여 부모를 통해 거꾸로 작동합니다. 그러나 Git 히스토리에는 여러 개의 독립적 인 개발 라인이 포함될 수 있으므로 커밋이 나열되는 특정 순서는 다소 임의적 일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b6e44338fe1bf08aabf78cd81639eb77b1309fea" translate="yes" xml:space="preserve">
          <source>Note that git pull always merges into the current branch, regardless of what else is given on the command line.</source>
          <target state="translated">git pull은 명령 줄에 무엇이 다른지에 관계없이 항상 현재 분기로 병합됩니다.</target>
        </trans-unit>
        <trans-unit id="bcdb8efaa60d12b40472e9e7be3ed7ef20fcfd01" translate="yes" xml:space="preserve">
          <source>Note that git-svn keeps track of the highest revision in which a branch or tag has appeared. If the subset of branches or tags is changed after fetching, then $GIT_DIR/svn/.metadata must be manually edited to remove (or reset) branches-maxRev and/or tags-maxRev as appropriate.</source>
          <target state="translated">git-svn은 브랜치 또는 태그가 나타난 가장 높은 버전을 추적합니다. 페치 후 브랜치 또는 태그의 서브 세트가 변경되면, 적절하게 branch-maxRev 및 / 또는 tags-maxRev를 제거 (또는 재설정)하기 위해 $ GIT_DIR / svn / .metadata를 수동으로 편집해야합니다.</target>
        </trans-unit>
        <trans-unit id="9d6b14c8954c11ebf9dc491ca128004d883ac7cd" translate="yes" xml:space="preserve">
          <source>Note that he doesn&amp;rsquo;t need to give the path to Alice&amp;rsquo;s repository; when Bob cloned Alice&amp;rsquo;s repository, Git stored the location of her repository in the repository configuration, and that location is used for pulls:</source>
          <target state="translated">Alice의 저장소에 경로를 제공 할 필요는 없습니다. Bob이 Alice의 리포지토리를 복제 할 때 Git은 리포지토리 구성에 리포지토리의 위치를 ​​저장했으며 해당 위치는 풀에 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="d033887586c63461935e98a544790f02b6895719" translate="yes" xml:space="preserve">
          <source>Note that if no extensions are specified in the config file, then &lt;code&gt;core.repositoryformatversion&lt;/code&gt; SHOULD be set to &lt;code&gt;0&lt;/code&gt; (setting it to &lt;code&gt;1&lt;/code&gt; provides no benefit, and makes the repository incompatible with older implementations of git).</source>
          <target state="translated">구성 파일에 확장명이 지정되어 있지 않으면 &lt;code&gt;core.repositoryformatversion&lt;/code&gt; 을 &lt;code&gt;0&lt;/code&gt; 으로 설정해야합니다 ( &lt;code&gt;1&lt;/code&gt; 로 설정하면 아무런 이점이 없으며 리포지토리가 이전의 git 구현과 호환되지 않음).</target>
        </trans-unit>
        <trans-unit id="855e515073658cd86a49dd1065464c65266acbcf" translate="yes" xml:space="preserve">
          <source>Note that if the &lt;code&gt;bidi-import&lt;/code&gt; capability is used the complete batch sequence has to be buffered before starting to send data to fast-import to prevent mixing of commands and fast-import responses on the helper&amp;rsquo;s stdin.</source>
          <target state="translated">경우주의 &lt;code&gt;bidi-import&lt;/code&gt; 기능을 사용하는 전체 배치 순서가있다는 도우미의 표준 입력에서 명령과 빠른 가져 오기 응답의 혼합을 방지하기 위해 빠른 가져 오기에 데이터를 전송을 시작하기 전에 버퍼링합니다.</target>
        </trans-unit>
        <trans-unit id="b689c65aa31e82a2dbc37c89c0ac3187b41716e6" translate="yes" xml:space="preserve">
          <source>Note that if the current branch head was your only reference to a particular point in history, then resetting that branch may leave you with no way to find the history it used to point to; so use this command carefully.</source>
          <target state="translated">현재 지사 헤드가 내역의 특정 지점에 대한 유일한 참조 인 경우 해당 지사를 재설정하면 이전에 지정한 내역을 찾을 수있는 방법이 없을 수 있습니다. 이 명령을주의해서 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="e6c226fbc041b7aed3f8d988d110ae660c99fecc" translate="yes" xml:space="preserve">
          <source>Note that if the number of kept packs is more than gc.autoPackLimit, this configuration variable is ignored, all packs except the base pack will be repacked. After this the number of packs should go below gc.autoPackLimit and gc.bigPackThreshold should be respected again.</source>
          <target state="translated">유지 된 팩 수가 gc.autoPackLimit보다 많은 경우이 구성 변수는 무시되고 기본 팩을 제외한 모든 팩이 다시 포장됩니다. 그런 다음 팩 수가 gc.autoPackLimit 아래로 내려 가고 gc.bigPackThreshold를 다시 존중해야합니다.</target>
        </trans-unit>
        <trans-unit id="876a2eaaf30082c69c38a89b274fd268226ca0ba" translate="yes" xml:space="preserve">
          <source>Note that if you also want to skip the first commit of the range you would issue the command:</source>
          <target state="translated">범위의 첫 번째 커밋을 건너 뛰려면 다음 명령을 실행하십시오.</target>
        </trans-unit>
        <trans-unit id="102fd7adeeb68915f128c7eebf4ae04f1c363d22" translate="yes" xml:space="preserve">
          <source>Note that in general, Alice would want her local changes committed before initiating this &quot;pull&quot;. If Bob&amp;rsquo;s work conflicts with what Alice did since their histories forked, Alice will use her working tree and the index to resolve conflicts, and existing local changes will interfere with the conflict resolution process (Git will still perform the fetch but will refuse to merge --- Alice will have to get rid of her local changes in some way and pull again when this happens).</source>
          <target state="translated">일반적으로 Alice는이 &quot;풀 (pull)&quot;을 시작하기 전에 로컬 변경 사항을 커밋하려고합니다. Bob의 작업이 내역을 포크 한 이후 Alice가 수행 한 작업과 충돌하는 경우 Alice는 작업 트리와 색인을 사용하여 충돌을 해결하며 기존의 로컬 변경 사항이 충돌 해결 프로세스를 방해합니다 (Git은 여전히 ​​페치를 수행하지만 병합을 거부 함- -Alice는 어떤 방식 으로든 로컬 변경 사항을 제거하고 이러한 상황이 발생하면 다시 당겨야합니다.</target>
        </trans-unit>
        <trans-unit id="51fccf4fe2d201a349cf25a2b82190079f387e94" translate="yes" xml:space="preserve">
          <source>Note that in older documentation you may see the index called the &quot;current directory cache&quot; or just the &quot;cache&quot;. It has three important properties:</source>
          <target state="translated">이전 문서에는 &quot;현재 디렉토리 캐시&quot;또는 &quot;캐시&quot;라는 색인이 표시 될 수 있습니다. 세 가지 중요한 속성이 있습니다.</target>
        </trans-unit>
        <trans-unit id="33bb6a06b88e89af07ea98fc22445ba64a91b75d" translate="yes" xml:space="preserve">
          <source>Note that in this file, the exception for &lt;code&gt;core.bare&lt;/code&gt; and &lt;code&gt;core.worktree&lt;/code&gt; is gone. If you have them in $GIT_DIR/config before, you must move them to the &lt;code&gt;config.worktree&lt;/code&gt; of the main working tree. You may also take this opportunity to review and move other configuration that you do not want to share to all working trees:</source>
          <target state="translated">이 파일에서 &lt;code&gt;core.bare&lt;/code&gt; 및 &lt;code&gt;core.worktree&lt;/code&gt; 에 대한 예외 는 사라졌습니다. 이전에 $ GIT_DIR / config 에있는 경우 기본 작업 트리 의 &lt;code&gt;config.worktree&lt;/code&gt; 로 이동해야합니다 . 이 기회를 이용하여 모든 작업 트리에 공유하고 싶지 않은 다른 구성을 검토하고 이동할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="f62684e2b0c86eaa1fac93a58127ba986d09144a" translate="yes" xml:space="preserve">
          <source>Note that it is currently &lt;strong&gt;always&lt;/strong&gt; an array reference, even if feature doesn&amp;rsquo;t accept any configuration parameters, and 'default' is used only to turn it on or off. In such case you turn feature on by setting this element to &lt;code&gt;[1]&lt;/code&gt;, and torn it off by setting it to &lt;code&gt;[0]&lt;/code&gt;. See also the passage about the &quot;blame&quot; feature in the &quot;Examples&quot; section.</source>
          <target state="translated">기능이 구성 매개 변수를 허용하지 않더라도 현재 &lt;strong&gt;항상&lt;/strong&gt; 배열 참조이며 'default'는 켜거나 끄는 데만 사용됩니다. 이 경우이 요소를 &lt;code&gt;[1]&lt;/code&gt; 로 설정하여 기능을 설정하고 &lt;code&gt;[0]&lt;/code&gt; 으로 설정하여 해제하십시오 . &quot;예제&quot;섹션의 &quot;비난&quot;기능에 대한 구절도 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="c6d71837c5b2acf93d8b7a746fdb13a8f313316a" translate="yes" xml:space="preserve">
          <source>Note that it is possible for refname to not have sha1-new when this hook runs. This can easily occur if another user modifies the ref after it was updated by &lt;code&gt;git-receive-pack&lt;/code&gt;, but before the hook was able to evaluate it. It is recommended that hooks rely on sha1-new rather than the current value of refname.</source>
          <target state="translated">이 후크가 실행될 때 참조 이름에 sha1-new가 없을 수 있습니다. 다른 사용자가 &lt;code&gt;git-receive-pack&lt;/code&gt; 에 의해 업데이트 된 후 , 후크가 평가하기 전에 참조를 수정하면 쉽게 발생할 수 있습니다 . 후크는 현재 refname 값이 아닌 sha1-new를 사용하는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="288f25c901caafda3b52f9e96d7bc31178f41bbc" translate="yes" xml:space="preserve">
          <source>Note that merge commits may have more than one parent:</source>
          <target state="translated">병합 커밋에는 둘 이상의 부모가있을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b4bd4c01bcc139c9e086b4c697c46e8ed5645dbb" translate="yes" xml:space="preserve">
          <source>Note that namespaces which include a &lt;code&gt;/&lt;/code&gt; will expand to a hierarchy of namespaces; for example, &lt;code&gt;GIT_NAMESPACE=foo/bar&lt;/code&gt; will store refs under &lt;code&gt;refs/namespaces/foo/refs/namespaces/bar/&lt;/code&gt;. This makes paths in &lt;code&gt;GIT_NAMESPACE&lt;/code&gt; behave hierarchically, so that cloning with &lt;code&gt;GIT_NAMESPACE=foo/bar&lt;/code&gt; produces the same result as cloning with &lt;code&gt;GIT_NAMESPACE=foo&lt;/code&gt; and cloning from that repo with &lt;code&gt;GIT_NAMESPACE=bar&lt;/code&gt;. It also avoids ambiguity with strange namespace paths such as &lt;code&gt;foo/refs/heads/&lt;/code&gt;, which could otherwise generate directory/file conflicts within the &lt;code&gt;refs&lt;/code&gt; directory.</source>
          <target state="translated">&lt;code&gt;/&lt;/code&gt; 를 포함하는 네임 스페이스는 네임 스페이스의 계층 구조로 확장됩니다. 예를 들어, &lt;code&gt;GIT_NAMESPACE=foo/bar&lt;/code&gt; 는 &lt;code&gt;refs/namespaces/foo/refs/namespaces/bar/&lt;/code&gt; 아래에 ref 를 저장 합니다. 이렇게하면 &lt;code&gt;GIT_NAMESPACE&lt;/code&gt; 의 경로가 계층 적으로 작동하므로 &lt;code&gt;GIT_NAMESPACE=foo/bar&lt;/code&gt; 를 사용한 복제는 &lt;code&gt;GIT_NAMESPACE=foo&lt;/code&gt; 를 사용한 복제 및 &lt;code&gt;GIT_NAMESPACE=bar&lt;/code&gt; 를 사용 하여 해당 리포지토리 에서 복제하는 것과 동일한 결과를 생성합니다 . 또한 &lt;code&gt;foo/refs/heads/&lt;/code&gt; 와 같은 이상한 네임 스페이스 경로에 대한 모호함을 피합니다. 그렇지 않으면 &lt;code&gt;refs&lt;/code&gt; 디렉토리 내에서 디렉토리 / 파일 충돌이 발생할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="5960cd2f6a18c56540790aa3e8525ad5bfd7623b" translate="yes" xml:space="preserve">
          <source>Note that no attempts whatsoever are made to validate the encoding.</source>
          <target state="translated">인코딩의 유효성을 검사하려는 시도는 없습니다.</target>
        </trans-unit>
        <trans-unit id="a90bb6c9021795be1cb1c05d155b4badc4462ac4" translate="yes" xml:space="preserve">
          <source>Note that not all diffs can feature all types. For instance, diffs from the index to the working tree can never have Added entries (because the set of paths included in the diff is limited by what is in the index). Similarly, copied and renamed entries cannot appear if detection for those types is disabled.</source>
          <target state="translated">모든 diff가 모든 유형을 특징으로하는 것은 아닙니다. 예를 들어, 인덱스에서 작업 트리로의 diff는 추가 된 항목을 가질 수 없습니다 (diff에 포함 된 경로 세트가 인덱스에있는 경로에 의해 제한되기 때문에). 마찬가지로 해당 유형에 대한 검색이 비활성화 된 경우 복사 및 이름이 바뀐 항목을 표시 할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="b214bd38041e6a3ecd59f0a8d74547fecd3e66a2" translate="yes" xml:space="preserve">
          <source>Note that omitting the &lt;code&gt;=&lt;/code&gt; in &lt;code&gt;git -c foo.bar ...&lt;/code&gt; is allowed and sets &lt;code&gt;foo.bar&lt;/code&gt; to the boolean true value (just like &lt;code&gt;[foo]bar&lt;/code&gt; would in a config file). Including the equals but with an empty value (like &lt;code&gt;git -c
foo.bar= ...&lt;/code&gt;) sets &lt;code&gt;foo.bar&lt;/code&gt; to the empty string which &lt;code&gt;git config
--type=bool&lt;/code&gt; will convert to &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">생략 유의 &lt;code&gt;=&lt;/code&gt; 에서 &lt;code&gt;git -c foo.bar ...&lt;/code&gt; 허용 세트된다 &lt;code&gt;foo.bar&lt;/code&gt; 에 부울 참 값 (단지 추천 &lt;code&gt;[foo]bar&lt;/code&gt; 설정 파일에서와). equals를 포함하지만 빈 값 ( &lt;code&gt;git -c foo.bar= ...&lt;/code&gt; ) 을 포함하면 &lt;code&gt;foo.bar&lt;/code&gt; 를 빈 문자열로 &lt;code&gt;git config --type=bool&lt;/code&gt; 합니다. git config --type = bool 은 &lt;code&gt;false&lt;/code&gt; 로 변환합니다 .</target>
        </trans-unit>
        <trans-unit id="2d893e89ed900e1f0840df95a39350717d32e84c" translate="yes" xml:space="preserve">
          <source>Note that per repository configuration can be set in &lt;code&gt;$GIT_DIR/cloneurl&lt;/code&gt; file, or as values of multi-value &lt;code&gt;gitweb.url&lt;/code&gt; configuration variable in project config. Per-repository configuration takes precedence over value composed from &lt;code&gt;@git_base_url_list&lt;/code&gt; elements and project name.</source>
          <target state="translated">저장소 당 구성은 &lt;code&gt;$GIT_DIR/cloneurl&lt;/code&gt; 파일에서 설정하거나 프로젝트 구성에서 다중 값 &lt;code&gt;gitweb.url&lt;/code&gt; 구성 변수의 값으로 설정할 수 있습니다. 저장소 별 구성은 &lt;code&gt;@git_base_url_list&lt;/code&gt; 요소 및 프로젝트 이름 으로 구성된 값보다 우선 합니다.</target>
        </trans-unit>
        <trans-unit id="fccadef8ff02c3c7b5e8091c077ff771f4d090ed" translate="yes" xml:space="preserve">
          <source>Note that rule 3 disallows many cases that do not have any privacy implications. These rules are subject to change in future versions of git, and the server accessed by &lt;code&gt;git archive --remote&lt;/code&gt; may or may not follow these exact rules.</source>
          <target state="translated">규칙 3은 개인 정보 보호에 영향을 미치지 않는 많은 경우를 허용하지 않습니다. 이 규칙은 향후 버전의 git에서 변경 될 수 있으며 &lt;code&gt;git archive --remote&lt;/code&gt; 로 액세스하는 서버 는 이러한 정확한 규칙을 따르거나 따르지 않을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="6b2cd45b5672bcfb50850c37a2d3873eae0b00dc" translate="yes" xml:space="preserve">
          <source>Note that running &lt;code&gt;git repack&lt;/code&gt; without the &lt;code&gt;--local&lt;/code&gt; option in a repository cloned with &lt;code&gt;--shared&lt;/code&gt; will copy objects from the source repository into a pack in the cloned repository, removing the disk space savings of &lt;code&gt;clone --shared&lt;/code&gt;. It is safe, however, to run &lt;code&gt;git gc&lt;/code&gt;, which uses the &lt;code&gt;--local&lt;/code&gt; option by default.</source>
          <target state="translated">&lt;code&gt;--shared&lt;/code&gt; 로 복제 된 저장소에서 &lt;code&gt;--local&lt;/code&gt; 옵션 없이 &lt;code&gt;git repack&lt;/code&gt; 을 실행 하면 소스 저장소의 오브젝트가 복제 된 저장소의 팩으로 복사되어 &lt;code&gt;clone --shared&lt;/code&gt; 의 디스크 공간 절약이 제거 됩니다. 그러나 기본적으로 &lt;code&gt;--local&lt;/code&gt; 옵션 을 사용하는 &lt;code&gt;git gc&lt;/code&gt; 를 실행하는 것이 안전 합니다.</target>
        </trans-unit>
        <trans-unit id="140dadc93eb0ab3b9abb37d56f2b3ec8284a753b" translate="yes" xml:space="preserve">
          <source>Note that since this operation is very I/O expensive, it might be a good idea to redirect the temporary directory off-disk with the &lt;code&gt;-d&lt;/code&gt; option, e.g. on tmpfs. Reportedly the speedup is very noticeable.</source>
          <target state="translated">이 작업은 I / O 비용이 많이 들기 때문에 &lt;code&gt;-d&lt;/code&gt; 옵션을 사용하여 임시 디렉토리를 디스크 외부로 리디렉션하는 것이 좋습니다 ( 예 : tmpfs). 보도에 따르면 속도가 매우 눈에.니다.</target>
        </trans-unit>
        <trans-unit id="406b2d499d377ca290ed5b4924c72cd2cd51a43f" translate="yes" xml:space="preserve">
          <source>Note that some configuration can be controlled on per-repository rather than gitweb-wide basis: see &quot;Per-repository gitweb configuration&quot; subsection on &lt;a href=&quot;gitweb&quot;&gt;gitweb[1]&lt;/a&gt; manpage.</source>
          <target state="translated">일부 구성은 gitweb 전체가 아닌 저장소별로 제어 할 수 있습니다. &lt;a href=&quot;gitweb&quot;&gt;gitweb [1]&lt;/a&gt; 맨 페이지의 &quot;리포지토리 당 gitweb 구성&quot;하위 섹션을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="0d8f5c59efaf04f91fb17771a5f9956f75377d81" translate="yes" xml:space="preserve">
          <source>Note that terminology has changed since that revision. For example, the README in that revision uses the word &quot;changeset&quot; to describe what we now call a &lt;a href=&quot;#def_commit_object&quot;&gt;commit&lt;/a&gt;.</source>
          <target state="translated">해당 개정 이후로 용어가 변경되었습니다. 예를 들어,이 개정판의 README는 &quot;changeset&quot;이라는 단어를 사용하여 현재 &lt;a href=&quot;#def_commit_object&quot;&gt;commit&lt;/a&gt; 이라고하는 것을 설명 합니다.</target>
        </trans-unit>
        <trans-unit id="1162a2144d0b881d5670bbd9b0805334b2b73beb" translate="yes" xml:space="preserve">
          <source>Note that the &lt;code&gt;t_rel&lt;/code&gt; field contains the observed run time in seconds for the child process (starting before the fork/exec/spawn and stopping after the waitpid() and includes OS process creation overhead). So this time will be slightly larger than the atexit time reported by the child process itself.</source>
          <target state="translated">점을 유의 &lt;code&gt;t_rel&lt;/code&gt; 의 필드는 자식 프로세스 초 관찰 런타임 포함 (포크 / 간부 / 산란되기 전에 시작 및 정지를 waitpid를 후 () 및 OS 프로세스 생성 오버 헤드를 포함한다). 따라서이 시간은 자식 프로세스 자체에서보고 한 수렴 시간보다 약간 더 큽니다.</target>
        </trans-unit>
        <trans-unit id="b7757b33b688da6e41f6e15271bd961d7647767a" translate="yes" xml:space="preserve">
          <source>Note that the SVN URL of the commiturl config key includes the SVN branch. If you rather want to set the commit URL for an entire SVN repository use svn-remote.&amp;lt;name&amp;gt;.pushurl instead.</source>
          <target state="translated">commiturl 구성 키의 SVN URL에는 SVN 분기가 포함됩니다. 전체 SVN 저장소에 커밋 URL을 설정하려면 대신 svn-remote. &amp;lt;name&amp;gt; .pushurl을 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="cb5d63c2ce1d70a7eb8e0b6357957166a5a229f7" translate="yes" xml:space="preserve">
          <source>Note that the asterisk &lt;code&gt;*&lt;/code&gt; is quoted from the shell in this example; this lets Git, and not the shell, expand the pathnames of files and subdirectories under the &lt;code&gt;Documentation/&lt;/code&gt; directory.</source>
          <target state="translated">이 예에서 별표 &lt;code&gt;*&lt;/code&gt; 는 셸에서 인용됩니다. 이를 통해 쉘이 아닌 Git이 &lt;code&gt;Documentation/&lt;/code&gt; 디렉토리 아래에있는 파일 및 하위 디렉토리의 경로 이름을 확장 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="ce32bdb056375627c69f9422ed26926b9107752d" translate="yes" xml:space="preserve">
          <source>Note that the asterisk &lt;code&gt;*&lt;/code&gt; is quoted from the shell in this example; this lets the command include the files from subdirectories of &lt;code&gt;Documentation/&lt;/code&gt; directory.</source>
          <target state="translated">이 예에서 별표 &lt;code&gt;*&lt;/code&gt; 는 셸에서 인용됩니다. 그러면 명령에 &lt;code&gt;Documentation/&lt;/code&gt; 디렉토리의 하위 디렉토리에있는 파일이 포함됩니다 .</target>
        </trans-unit>
        <trans-unit id="8938c6c44864ae040ef79f140140b8a3da4caab5" translate="yes" xml:space="preserve">
          <source>Note that the commit message will already be filled in for you with some information about the merge. Normally you can just use this default message unchanged, but you may add additional commentary of your own if desired.</source>
          <target state="translated">커밋 메시지는 병합에 대한 정보로 이미 채워져 있습니다. 일반적으로이 기본 메시지를 변경하지 않고 사용할 수 있지만 원하는 경우 자신 만의 주석을 추가 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="131272668a67eaa5ac9294087a9ff4488c82c210" translate="yes" xml:space="preserve">
          <source>Note that the example that we will use is really a toy example, we will be looking for the first commit that has a version like &quot;2.6.26-something&quot;, that is the commit that has a &quot;SUBLEVEL = 26&quot; line in the top level Makefile. This is a toy example because there are better ways to find this commit with Git than using &quot;git bisect&quot; (for example &quot;git blame&quot; or &quot;git log -S&amp;lt;string&amp;gt;&quot;).</source>
          <target state="translated">우리가 사용할 예제는 실제로 장난감 예제이며, &quot;2.6.26-something&quot;과 같은 버전을 가진 첫 번째 커밋, 즉 &quot;SUBLEVEL = 26&quot;줄이있는 커밋을 찾을 것입니다. 최상위 Makefile. &quot;git bisect&quot;(예 : &quot;git blame&quot;또는 &quot;git log -S &amp;lt;string&amp;gt;&quot;)를 사용하는 것보다 Git으로이 커밋을 찾는 더 좋은 방법이 있기 때문에 장난감 예제입니다.</target>
        </trans-unit>
        <trans-unit id="5e386156a3e0996458a30d74f4a22474e7420343" translate="yes" xml:space="preserve">
          <source>Note that the files all have mode 644 or 755: Git actually only pays attention to the executable bit.</source>
          <target state="translated">파일은 모두 모드 644 또는 755를 갖습니다. Git은 실제로 실행 비트에만주의를 기울입니다.</target>
        </trans-unit>
        <trans-unit id="d2e57a867612d1ae307185458bab810ae89e20a5" translate="yes" xml:space="preserve">
          <source>Note that the first word of an alias does not necessarily have to be a command. It can be a command-line option that will be passed into the invocation of &lt;code&gt;git&lt;/code&gt;. In particular, this is useful when used with &lt;code&gt;-c&lt;/code&gt; to pass in one-time configurations or &lt;code&gt;-p&lt;/code&gt; to force pagination. For example, &lt;code&gt;loud-rebase = -c commit.verbose=true rebase&lt;/code&gt; can be defined such that running &lt;code&gt;git loud-rebase&lt;/code&gt; would be equivalent to &lt;code&gt;git -c commit.verbose=true rebase&lt;/code&gt;. Also, &lt;code&gt;ps = -p status&lt;/code&gt; would be a helpful alias since &lt;code&gt;git ps&lt;/code&gt; would paginate the output of &lt;code&gt;git status&lt;/code&gt; where the original command does not.</source>
          <target state="translated">별칭의 첫 단어가 반드시 명령 일 필요는 없습니다. &lt;code&gt;git&lt;/code&gt; 호출로 전달되는 명령 행 옵션 일 수 있습니다 . 특히 &lt;code&gt;-c&lt;/code&gt; 와 함께 사용하여 일회성 구성을 전달하거나 &lt;code&gt;-p&lt;/code&gt; 를 사용하여 페이지 매김을 강제 할 때 유용합니다 . 예를 들어, &lt;code&gt;loud-rebase = -c commit.verbose=true rebase&lt;/code&gt; 는 &lt;code&gt;git loud-rebase&lt;/code&gt; 실행 이 &lt;code&gt;git -c commit.verbose=true rebase&lt;/code&gt; 와 같도록 정의 될 수 있습니다 . 또한 &lt;code&gt;ps = -p status&lt;/code&gt; 는 &lt;code&gt;git ps&lt;/code&gt; 가 원래 명령이 아닌 &lt;code&gt;git status&lt;/code&gt; 의 출력을 페이지 매김하기 때문에 유용한 별칭 입니다.</target>
        </trans-unit>
        <trans-unit id="650b87912cfe39dc5747fbba67473a3822f86ab9" translate="yes" xml:space="preserve">
          <source>Note that the form &lt;code&gt;--filter=sparse:path=&amp;lt;path&amp;gt;&lt;/code&gt; that wants to read from an arbitrary path on the filesystem has been dropped for security reasons.</source>
          <target state="translated">형태주의 &lt;code&gt;--filter=sparse:path=&amp;lt;path&amp;gt;&lt;/code&gt; 파일 시스템에 임의의 경로에서 읽고 싶은 보안상의 이유로 삭제되었습니다.</target>
        </trans-unit>
        <trans-unit id="d8075e043d9a3ca9826ff1989c66c1905d9648ca" translate="yes" xml:space="preserve">
          <source>Note that the grafts mechanism is outdated and can lead to problems transferring objects between repositories; see &lt;a href=&quot;git-replace&quot;&gt;git-replace[1]&lt;/a&gt; for a more flexible and robust system to do the same thing.</source>
          <target state="translated">이식 메커니즘은 구식이며 리포지토리간에 개체를 전송하는 데 문제가 발생할 수 있습니다. 보다 유연하고 강력한 시스템으로 동일한 작업을 수행하려면 &lt;a href=&quot;git-replace&quot;&gt;git-replace [1]&lt;/a&gt; 을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="0b0bdd8828d416a94597b15ce8aefc2c0b976fde" translate="yes" xml:space="preserve">
          <source>Note that the last point clashes with the other two: a topic that has been merged elsewhere should not be rebased. See the section on RECOVERING FROM UPSTREAM REBASE in &lt;a href=&quot;git-rebase&quot;&gt;git-rebase[1]&lt;/a&gt;.</source>
          <target state="translated">마지막 지점은 다른 두 지점과 충돌합니다. 다른 곳에서 병합 된 주제는 리베이스하지 않아야합니다. &lt;a href=&quot;git-rebase&quot;&gt;git-rebase [1]의&lt;/a&gt; UPSTREAM REBASE 복구 섹션을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="bd4901c4d1f08f37f3106399dbc26a76568f48fe" translate="yes" xml:space="preserve">
          <source>Note that the leading character does not have to be a dot; for example, you can use &lt;code&gt;--suffix=-patch&lt;/code&gt; to get &lt;code&gt;0001-description-of-my-change-patch&lt;/code&gt;.</source>
          <target state="translated">선행 문자는 점일 필요는 없습니다. 예를 들어 &lt;code&gt;--suffix=-patch&lt;/code&gt; 를 사용하면 &lt;code&gt;0001-description-of-my-change-patch&lt;/code&gt; 를 얻을 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="833f1e85ef857dfcde43c87fdacaaa1075b0d6b3" translate="yes" xml:space="preserve">
          <source>Note that the maintainer(s) may impose restrictions, such as &quot;Signed-off-by&quot; requirements, that all commits/patches submitted for inclusion must adhere to. Consult your project&amp;rsquo;s documentation for more information.</source>
          <target state="translated">관리자는 &quot;서명&quot;요구 사항과 같이 제한을 위해 제출 된 모든 커밋 / 패치가 준수되어야한다는 제한을 부과 할 수 있습니다. 자세한 내용은 프로젝트 설명서를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="50f092ab1e91fa0de2c9ed05785c4a967888dc6a" translate="yes" xml:space="preserve">
          <source>Note that the name &quot;origin&quot; is just the name that Git uses by default to refer to the repository that you cloned from.</source>
          <target state="translated">&quot;origin&quot;이라는 이름은 Git이 기본적으로 복제 한 리포지토리를 나타내는 데 사용하는 이름입니다.</target>
        </trans-unit>
        <trans-unit id="22728656f144a546aef50a70cd21a26fce3a8c1d" translate="yes" xml:space="preserve">
          <source>Note that the patch is always used as-is without charset conversion, even with this flag.</source>
          <target state="translated">이 플래그를 사용하더라도 패치는 항상 문자 세트 변환없이있는 그대로 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="9bea9d7e3f1393135579965b1439ff9a7baaf238" translate="yes" xml:space="preserve">
          <source>Note that the push URL and the fetch URL, even though they can be set differently, must still refer to the same place. What you pushed to the push URL should be what you would see if you immediately fetched from the fetch URL. If you are trying to fetch from one place (e.g. your upstream) and push to another (e.g. your publishing repository), use two separate remotes.</source>
          <target state="translated">푸시 URL과 페치 URL은 다르게 설정할 수 있지만 여전히 동일한 위치를 참조해야합니다. 푸시 URL로 푸시 한 것은 가져 오기 URL에서 즉시 가져 왔을 때 표시되는 것이어야합니다. 한 곳 (예 : 업스트림)에서 가져오고 다른 곳 (예 : 게시 저장소)으로 가져 오려면 별도의 리모콘 두 개를 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="f8efe69c6940942131795b6ce6c48d7e64d9560b" translate="yes" xml:space="preserve">
          <source>Note that the reflog history is very different from normal Git history. While normal history is shared by every repository that works on the same project, the reflog history is not shared: it tells you only about how the branches in your local repository have changed over time.</source>
          <target state="translated">reflog 기록은 일반 Git 기록과 매우 다릅니다. 일반 히스토리는 동일한 프로젝트에서 작동하는 모든 저장소에서 공유되지만 reflog 히스토리는 공유되지 않습니다. 로컬 저장소의 브랜치가 시간이 지남에 따라 어떻게 변경되었는지에 대해서만 알려줍니다.</target>
        </trans-unit>
        <trans-unit id="9a9c3b4049e20efd5a28033d7014008a8c2ac264" translate="yes" xml:space="preserve">
          <source>Note that the script (&lt;code&gt;my_script&lt;/code&gt; in the above example) should exit with code 0 if the current source code is good/old, and exit with a code between 1 and 127 (inclusive), except 125, if the current source code is bad/new.</source>
          <target state="translated">현재 소스 코드가 양호 / 이전 인 경우 스크립트 ( 위의 예에서 &lt;code&gt;my_script&lt;/code&gt; )는 코드 0으로 종료하고 현재 소스 코드가 불량 / 새로운.</target>
        </trans-unit>
        <trans-unit id="5586aefc0f8bd69c9dcf3cf3294d72d0db17f0fc" translate="yes" xml:space="preserve">
          <source>Note that the second point is true even across machines. You can duplicate a remote Git repository with &lt;strong&gt;any&lt;/strong&gt; regular copy mechanism, be it &lt;code&gt;scp&lt;/code&gt;, &lt;code&gt;rsync&lt;/code&gt; or &lt;code&gt;wget&lt;/code&gt;.</source>
          <target state="translated">두 번째 요점은 여러 시스템에서도 마찬가지입니다. &lt;code&gt;scp&lt;/code&gt; , &lt;code&gt;rsync&lt;/code&gt; 또는 &lt;code&gt;wget&lt;/code&gt; 과 &lt;strong&gt;같은&lt;/strong&gt; 일반적인 복사 메커니즘을 사용하여 원격 Git 저장소를 복제 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="e9e6bb5468c99a3a334f80fab3dbb52fc16223c6" translate="yes" xml:space="preserve">
          <source>Note that the session-id of the child process is not available to the current/spawning process, so the child&amp;rsquo;s PID is reported here as a hint for post-processing. (But it is only a hint because the child process may be a shell script which doesn&amp;rsquo;t have a session-id.)</source>
          <target state="translated">자식 프로세스의 session-id는 현재 / 스폰 닝 프로세스에서 사용할 수 없으므로 여기에서 자식 PID가 후 처리를위한 힌트로보고됩니다. (그러나 자식 프로세스는 session-id가없는 쉘 스크립트 일 수 있기 때문에 힌트 일뿐입니다.)</target>
        </trans-unit>
        <trans-unit id="e98f559f39ce7645bbbb14c50cc4f9c4dc239749" translate="yes" xml:space="preserve">
          <source>Note that the sizes of objects on disk are reported accurately, but care should be taken in drawing conclusions about which refs or objects are responsible for disk usage. The size of a packed non-delta object may be much larger than the size of objects which delta against it, but the choice of which object is the base and which is the delta is arbitrary and is subject to change during a repack.</source>
          <target state="translated">디스크의 객체 크기는 정확하게보고되지만 디스크 사용을 담당하는 참조 또는 객체에 대한 결론을 도출 할 때는주의를 기울여야합니다. 패킹 된 비 델타 객체의 크기는 델타에 대해 델타 인 객체의 크기보다 훨씬 클 수 있지만, 어느 객체가 기본이고 델타인지에 대한 선택은 임의적이며 재 포장 중에 변경 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="47fc7cad6a527b522ab5e266e3e278a07a579735" translate="yes" xml:space="preserve">
          <source>Note that the suffix you get if you type these commands today may be longer than what Linus saw above when he ran these commands, as your Git repository may have new commits whose object names begin with 975b that did not exist back then, and &quot;-g975b&quot; suffix alone may not be sufficient to disambiguate these commits.</source>
          <target state="translated">Git 리포지토리에 개체 이름이 975b로 시작하는 새 커밋이있을 수 있으므로 &quot;-이 명령을 입력하면 오늘이 명령을 입력 할 때 접미사가 길어질 수 있습니다. g975b &quot;접미사만으로는 이러한 커밋을 명확히하기에 충분하지 않을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="7eeba5803dc504042af48f9504a175baa6f39016" translate="yes" xml:space="preserve">
          <source>Note that the target of a &lt;code&gt;push&lt;/code&gt; is normally a &lt;a href=&quot;#def_bare_repository&quot;&gt;bare&lt;/a&gt; repository. You can also push to a repository that has a checked-out working tree, but a push to update the currently checked-out branch is denied by default to prevent confusion. See the description of the receive.denyCurrentBranch option in &lt;a href=&quot;git-config&quot;&gt;git-config[1]&lt;/a&gt; for details.</source>
          <target state="translated">&lt;code&gt;push&lt;/code&gt; 대상 은 일반적으로 &lt;a href=&quot;#def_bare_repository&quot;&gt;베어&lt;/a&gt; 리포지토리입니다. 체크 아웃 된 작업 트리가있는 저장소로 푸시 할 수도 있지만 혼란을 방지하기 위해 현재 체크 아웃 된 분기를 업데이트하기위한 푸시는 기본적으로 거부됩니다. 자세한 내용은 &lt;a href=&quot;git-config&quot;&gt;git-config [1]&lt;/a&gt; 의 receive.denyCurrentBranch 옵션에 대한 설명을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="110e365a18d2e41e53b11ff50c7bbd9d01eae2f0" translate="yes" xml:space="preserve">
          <source>Note that the two techniques outlined above (exporting via &lt;a href=&quot;#exporting-via-http&quot;&gt;http&lt;/a&gt; or &lt;a href=&quot;#exporting-via-git&quot;&gt;git&lt;/a&gt;) allow other maintainers to fetch your latest changes, but they do not allow write access, which you will need to update the public repository with the latest changes created in your private repository.</source>
          <target state="translated">위에서 설명한 두 가지 기술 ( &lt;a href=&quot;#exporting-via-http&quot;&gt;http&lt;/a&gt; 또는 &lt;a href=&quot;#exporting-via-git&quot;&gt;git을&lt;/a&gt; 통해 내보내기 )을 사용하면 다른 관리자가 최신 변경 사항을 가져올 수 있지만 쓰기 액세스는 허용하지 않으므로 개인 저장소에서 작성된 최신 변경 사항으로 공용 저장소를 업데이트해야합니다.</target>
        </trans-unit>
        <trans-unit id="ae8ea7d3546a16ede3faa6039563fb0d737e4467" translate="yes" xml:space="preserve">
          <source>Note that the version which &lt;code&gt;git bisect&lt;/code&gt; checks out for you at each point is just a suggestion, and you&amp;rsquo;re free to try a different version if you think it would be a good idea. For example, occasionally you may land on a commit that broke something unrelated; run</source>
          <target state="translated">&lt;code&gt;git bisect&lt;/code&gt; 가 각 시점에서 당신을 위해 체크 아웃 하는 버전 은 단지 제안 일 뿐이며, 좋은 생각이라고 생각되면 다른 버전을 자유롭게 시도 할 수 있습니다. 예를 들어, 때로는 관련이없는 것을 저지른 커밋에 착륙 할 수 있습니다. 운영</target>
        </trans-unit>
        <trans-unit id="1000c60b0f402f5d9e4c69088fd79818a06e5e98" translate="yes" xml:space="preserve">
          <source>Note that there are two ways to checkout a particular branch. As described elsewhere on this page, the &quot;module&quot; parameter of cvs checkout is interpreted as a branch name, and it becomes the main branch. It remains the main branch for a given sandbox even if you temporarily make another branch sticky with cvs update -r. Alternatively, the -r argument can indicate some other branch to actually checkout, even though the module is still the &quot;main&quot; branch. Tradeoffs (as currently implemented): Each new &quot;module&quot; creates a new database on disk with a history for the given module, and after the database is created, operations against that main branch are fast. Or alternatively, -r doesn&amp;rsquo;t take any extra disk space, but may be significantly slower for many operations, like cvs update.</source>
          <target state="translated">특정 지점을 체크 아웃하는 방법에는 두 가지가 있습니다. 이 페이지의 다른 곳에서 설명한 것처럼 cvs checkout의 &quot;module&quot;매개 변수는 분기 이름으로 해석되어 기본 분기가됩니다. cvs update -r로 다른 브랜치를 일시적으로 고정하더라도 주어진 샌드 박스의 기본 브랜치로 유지됩니다. 또는 -r 인수는 모듈이 여전히 &quot;기본&quot;분기 인 경우에도 실제로 체크 아웃 할 다른 분기를 나타낼 수 있습니다. 절충 (현재 구현 된대로) : 각각의 새 &quot;모듈&quot;은 주어진 모듈에 대한 기록을 사용하여 디스크에 새 데이터베이스를 작성하고 데이터베이스가 작성된 후 해당 주요 지점에 대한 조작이 빠릅니다. 또는 -r은 추가 디스크 공간을 차지하지 않지만 cvs 업데이트와 같은 많은 작업에서 상당히 느려질 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="4fe39a3f8a6c98b987fad41f0865478fee4d146d" translate="yes" xml:space="preserve">
          <source>Note that these are applied before commit ordering and formatting options, such as &lt;code&gt;--reverse&lt;/code&gt;.</source>
          <target state="translated">이 명령은 &lt;code&gt;--reverse&lt;/code&gt; 와 같은 커밋 순서 및 형식 지정 옵션 전에 적용됩니다 .</target>
        </trans-unit>
        <trans-unit id="ccb8cdc33c08512e4436bbf3b8db5bc9921ae58d" translate="yes" xml:space="preserve">
          <source>Note that this affects all diff-based output types, e.g. those produced by &lt;code&gt;--stat&lt;/code&gt;, etc.</source>
          <target state="translated">이는 &lt;code&gt;--stat&lt;/code&gt; 등에서 생성 된 것과 같은 모든 diff 기반 출력 유형에 영향을 미칩니다 .</target>
        </trans-unit>
        <trans-unit id="0691624d8498eccd40578875388b7f8bab2a7b6c" translate="yes" xml:space="preserve">
          <source>Note that this applies only to accessing the repository&amp;rsquo;s disk contents directly. An older client which understands only format &lt;code&gt;0&lt;/code&gt; may still connect via &lt;code&gt;git://&lt;/code&gt; to a repository using format &lt;code&gt;1&lt;/code&gt;, as long as the server process understands format &lt;code&gt;1&lt;/code&gt;.</source>
          <target state="translated">이는 리포지토리의 디스크 내용에 직접 액세스하는 경우에만 적용됩니다. 서버 프로세스가 형식 &lt;code&gt;1&lt;/code&gt; 을 이해하는 한 형식 &lt;code&gt;0&lt;/code&gt; 만 이해하는 이전 클라이언트 는 여전히 형식 &lt;code&gt;1&lt;/code&gt; 을 사용하여 &lt;code&gt;git://&lt;/code&gt; 를 통해 저장소에 연결할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="c3528bf60e5e55bcec2b34b4efbb66a2e2ad0ca9" translate="yes" xml:space="preserve">
          <source>Note that this assumes that none of the blobs and commit messages referenced by that revision range contains the string &lt;code&gt;refs/heads/master&lt;/code&gt;.</source>
          <target state="translated">이는 해당 개정 범위에서 참조하는 Blob 및 커밋 메시지에 문자열 &lt;code&gt;refs/heads/master&lt;/code&gt; 가 포함되지 않는다고 가정합니다 .</target>
        </trans-unit>
        <trans-unit id="b2c1b09dd03782a35574f4220ce1860b1a59abed" translate="yes" xml:space="preserve">
          <source>Note that this configuration variable is ignored if it is seen in the repository-level config (this is a safety measure against fetching from untrusted repositories).</source>
          <target state="translated">이 구성 변수는 리포지토리 수준 구성에서 볼 경우 무시됩니다 (신뢰할 수없는 리포지토리에서 가져 오는 것에 대한 안전 측정).</target>
        </trans-unit>
        <trans-unit id="8243e24ce26ee48638bea5b267bba5916eee07a8" translate="yes" xml:space="preserve">
          <source>Note that this is currently only implemented for the client side of clones and fetches.</source>
          <target state="translated">이것은 현재 클론 및 페치의 클라이언트 측에 대해서만 구현됩니다.</target>
        </trans-unit>
        <trans-unit id="7278e2ca069b871494710e49f702957a299741e8" translate="yes" xml:space="preserve">
          <source>Note that this is the old file data; so the object that Git named in its response to the initial tree was a tree with a snapshot of the directory state that was recorded by the first commit.</source>
          <target state="translated">이것은 이전 파일 데이터입니다. 따라서 Git이 초기 트리에 대한 응답으로 명명 한 객체는 첫 번째 커밋에 의해 기록 된 디렉토리 상태의 스냅 샷이있는 트리였습니다.</target>
        </trans-unit>
        <trans-unit id="8524e2a4579b70a19e36821a3f8f1b43bac12c4a" translate="yes" xml:space="preserve">
          <source>Note that this list is non-comprehensive and not necessarily complete. For command-specific variables, you will find a more detailed description in the appropriate manual page.</source>
          <target state="translated">이 목록은 포괄적이지 않으며 반드시 완전하지는 않습니다. 명령 별 변수에 대해서는 해당 매뉴얼 페이지에서 자세한 설명을 볼 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a06dd344c0e0f4252ac8d0d18c1815e7f413d617" translate="yes" xml:space="preserve">
          <source>Note that this may contain embedded LF or CRLF characters that are not escaped, so the event may spill across multiple lines.</source>
          <target state="translated">이스케이프 처리되지 않은 LF 또는 CRLF 문자가 포함되어있을 수 있으므로 이벤트가 여러 줄에 걸쳐 유출 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="954610f540e4dda45ac67b28e742adb370b9dd1c" translate="yes" xml:space="preserve">
          <source>Note that this may mean that multiple Git commits are created for a single SVN revision.</source>
          <target state="translated">이는 단일 SVN 개정에 대해 여러 개의 Git 커밋이 생성되었음을 의미합니다.</target>
        </trans-unit>
        <trans-unit id="69a24fcf6b082a94d6b3e16af2197fed496268e4" translate="yes" xml:space="preserve">
          <source>Note that this option is only useful if you are actually sending the emails and want to identify yourself as the sender, but retain the original author (and &lt;code&gt;git am&lt;/code&gt; will correctly pick up the in-body header). Note also that &lt;code&gt;git send-email&lt;/code&gt; already handles this transformation for you, and this option should not be used if you are feeding the result to &lt;code&gt;git send-email&lt;/code&gt;.</source>
          <target state="translated">이 옵션은 실제로 전자 메일을 전송하고 자신을 보낸 사람으로 식별하려고하지만 원래 작성자를 유지하려는 경우에만 유용합니다 ( &lt;code&gt;git am&lt;/code&gt; 은 본문 내 헤더를 올바르게 선택합니다). 또한 &lt;code&gt;git send-email&lt;/code&gt; 은 이미이 변환을 처리 &lt;code&gt;git send-email&lt;/code&gt; 결과를 git send-email에 제공하는 경우이 옵션을 사용하지 않아야합니다 .</target>
        </trans-unit>
        <trans-unit id="d0a34c500aa8e9fdf22f16d59ae03a1a8711ff64" translate="yes" xml:space="preserve">
          <source>Note that this option uses the no overlay mode by default (see also &lt;code&gt;--overlay&lt;/code&gt;), and currently doesn&amp;rsquo;t support overlay mode.</source>
          <target state="translated">이 옵션은 기본적으로 오버레이 없음 모드를 사용하고 ( &lt;code&gt;--overlay&lt;/code&gt; 참조 ) 현재 오버레이 모드를 지원하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="e3aa2cd05420cf442d246cf6450d49e1768c842c" translate="yes" xml:space="preserve">
          <source>Note that this variable is honored even when set in a configuration file in a &quot;.git&quot; subdirectory of a directory and its value differs from the latter directory (e.g. &quot;/path/to/.git/config&quot; has core.worktree set to &quot;/different/path&quot;), which is most likely a misconfiguration. Running Git commands in the &quot;/path/to&quot; directory will still use &quot;/different/path&quot; as the root of the work tree and can cause confusion unless you know what you are doing (e.g. you are creating a read-only snapshot of the same index to a location different from the repository&amp;rsquo;s usual working tree).</source>
          <target state="translated">이 변수는 디렉토리의 &quot;.git&quot;하위 디렉토리에있는 구성 파일에 설정되어 있고 그 값이 후자의 디렉토리와 다른 경우에도 적용됩니다 (예 : &quot;/path/to/.git/config&quot;는 core.worktree가 &quot;/ different / path&quot;)로 잘못 구성되었을 가능성이 큽니다. &quot;/ path / to&quot;디렉토리에서 Git 명령을 실행하면 여전히 &quot;/ different / path&quot;가 작업 트리의 루트로 사용되며 수행중인 작업을 알지 못하는 경우 (예 : 읽기 전용 스냅 샷을 작성하는 경우) 혼란이 발생할 수 있습니다. 저장소의 일반적인 작업 트리와 다른 위치에 대한 동일한 색인).</target>
        </trans-unit>
        <trans-unit id="f66853802a66e4aff14a38d5843516f4164ff5ba" translate="yes" xml:space="preserve">
          <source>Note that this will create the new branch, but it will not switch the working tree to it; use &quot;git switch &amp;lt;newbranch&amp;gt;&quot; to switch to the new branch.</source>
          <target state="translated">이렇게하면 새 분기가 만들어 지지만 작업 트리는 전환되지 않습니다. &quot;git switch &amp;lt;newbranch&amp;gt;&quot;를 사용하여 새 분기로 전환하십시오.</target>
        </trans-unit>
        <trans-unit id="48c8adea213e6ac01f80c59a6b72ca8bc5d0c4be" translate="yes" xml:space="preserve">
          <source>Note that unreachable, packed objects will remain. If this is not desired, see &lt;a href=&quot;git-repack&quot;&gt;git-repack[1]&lt;/a&gt;.</source>
          <target state="translated">도달 할 수없는 포장 된 개체는 그대로 유지됩니다. 이것이 바람직하지 않은 경우 &lt;a href=&quot;git-repack&quot;&gt;git-repack [1]을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="f9c873a19166627d45cbe06c1e92f0fc64675a0f" translate="yes" xml:space="preserve">
          <source>Note that users fetching over dumb protocols will have to fetch the whole new pack in order to get any contained object, no matter how many other objects in that pack they already have locally.</source>
          <target state="translated">벙어리 프로토콜을 통해 가져 오는 사용자는 이미 로컬에있는 팩의 다른 개체 수에 관계없이 포함 된 개체를 가져 오기 위해 완전히 새로운 팩을 가져와야합니다.</target>
        </trans-unit>
        <trans-unit id="511b177ad0f4f309a1f22f8d5a0729bb57a27072" translate="yes" xml:space="preserve">
          <source>Note that we deliberately chose not to re-code the commit log message when a commit is made to force UTF-8 at the commit object level, because re-coding to UTF-8 is not necessarily a reversible operation.</source>
          <target state="translated">UTF-8 로의 재 코딩이 반드시 가역적 인 조작은 아니기 때문에, 확약이 커밋이 커밋 객체 레벨에서 UTF-8을 강제로 수행 할 때 커밋 로그 메시지를 다시 코딩하지 않기로 선택했다는 점에 유의하십시오.</target>
        </trans-unit>
        <trans-unit id="352feed71993cca2768c0de80ab4efdfef627645" translate="yes" xml:space="preserve">
          <source>Note that we pick a single island for each regex to go into, using &quot;last one wins&quot; ordering (which allows repo-specific config to take precedence over user-wide config, and so forth).</source>
          <target state="translated">&quot;마지막 승리&quot;순서를 사용하여 각 정규식에 대해 단일 아일랜드를 선택합니다 (이 경우 특정 리포지토리 구성이 사용자 전체 구성보다 우선합니다).</target>
        </trans-unit>
        <trans-unit id="0f413678af329d8b352f68927252d8a326f2b212" translate="yes" xml:space="preserve">
          <source>Note that when matching against a tree object, attributes are still obtained from working tree, not from the given tree object.</source>
          <target state="translated">트리 객체와 일치하는 경우 속성은 주어진 트리 객체가 아닌 작업 트리에서 여전히 얻습니다.</target>
        </trans-unit>
        <trans-unit id="6f16ff14e66ecdeaed0888755a04ec80e3903de7" translate="yes" xml:space="preserve">
          <source>Note that when providing a &lt;code&gt;&amp;lt;pattern&amp;gt;&lt;/code&gt;, you must use &lt;code&gt;--list&lt;/code&gt;; otherwise the command may be interpreted as branch creation.</source>
          <target state="translated">&lt;code&gt;&amp;lt;pattern&amp;gt;&lt;/code&gt; 을 제공 할 때는 &lt;code&gt;--list&lt;/code&gt; 를 사용해야합니다 . 그렇지 않으면 명령이 분기 작성으로 해석 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2e31fbecbd095ab339f753f545ee8ad3cdcfd7be" translate="yes" xml:space="preserve">
          <source>Note that when you&amp;rsquo;ve moved or copied a Git repository, your Git index file (which caches various information, notably some of the &quot;stat&quot; information for the files involved) will likely need to be refreshed. So after you do a &lt;code&gt;cp -a&lt;/code&gt; to create a new copy, you&amp;rsquo;ll want to do</source>
          <target state="translated">Git 리포지토리를 이동하거나 복사하면 Git 인덱스 파일 (여러 파일, 특히 관련된 파일에 대한 &quot;stat&quot;정보 중 일부를 캐시 함)을 새로 고쳐야 할 수도 있습니다. 따라서 &lt;code&gt;cp -a&lt;/code&gt; 를 수행하여 새 복사본을 만든 후에는</target>
        </trans-unit>
        <trans-unit id="b6e7add23d70ae9c79a92003e95b0646493f7240" translate="yes" xml:space="preserve">
          <source>Note that without &lt;code&gt;--full-history&lt;/code&gt;, this still simplifies merges: if one of the parents is TREESAME, we follow only that one, so the other sides of the merge are never walked.</source>
          <target state="translated">&lt;code&gt;--full-history&lt;/code&gt; 가 없으면 여전히 병합을 단순화합니다. 부모 중 하나가 TREESAME 인 경우 그 중 하나만 따르므로 병합의 다른 쪽은 걸어 가지 않습니다.</target>
        </trans-unit>
        <trans-unit id="26c6b6e45f05961054f9762544f517daa6e3a44f" translate="yes" xml:space="preserve">
          <source>Note that without parent rewriting, it is not really possible to talk about the parent/child relationships between the commits, so we show them disconnected.</source>
          <target state="translated">부모가 다시 작성하지 않으면 커밋 사이의 부모 / 자식 관계에 대해 이야기 할 수 없으므로 연결이 끊어진 것으로 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="40996350a13d178ee15ae3215e9ae292d6702c1c" translate="yes" xml:space="preserve">
          <source>Note that you can get more information on a packfile by calling &lt;a href=&quot;git-verify-pack&quot;&gt;git-verify-pack[1]&lt;/a&gt;. However, as this command considers only the index file itself, it&amp;rsquo;s both faster and more flexible.</source>
          <target state="translated">&lt;a href=&quot;git-verify-pack&quot;&gt;git-verify-pack [1]&lt;/a&gt; 을 호출하여 팩 파일에 대한 자세한 정보를 얻을 수 있습니다 . 그러나이 명령은 인덱스 파일 자체 만 고려하므로 더 빠르고 유연합니다.</target>
        </trans-unit>
        <trans-unit id="191247c1388c3f45dfe82bf6b2f0384fea86edc8" translate="yes" xml:space="preserve">
          <source>Note that you cannot generally put &lt;code&gt;git for-each-ref&lt;/code&gt; directly into the config value, as it does not take a repository path as an argument (but you can wrap the command above in a shell script).</source>
          <target state="translated">저장소 경로를 인수로 사용하지 않기 때문에 일반적으로 &lt;code&gt;git for-each-ref&lt;/code&gt; 를 구성 값에 직접 넣을 수는 없습니다 (그러나 쉘 스크립트에서 위 명령을 래핑 할 수 있음).</target>
        </trans-unit>
        <trans-unit id="0fb44a035d4df6f6306133b267ae1546e220d2ba" translate="yes" xml:space="preserve">
          <source>Note that you should not do Octopus just because you can. An octopus is a valid thing to do and often makes it easier to view the commit history if you are merging more than two independent changes at the same time. However, if you have merge conflicts with any of the branches you are merging in and need to hand resolve, that is an indication that the development happened in those branches were not independent after all, and you should merge two at a time, documenting how you resolved the conflicts, and the reason why you preferred changes made in one side over the other. Otherwise it would make the project history harder to follow, not easier.</source>
          <target state="translated">당신이 할 수 있기 때문에 문어를해서는 안됩니다. 문어는 유효한 일이며 동시에 두 개 이상의 독립적 인 변경 사항을 병합하는 경우 커밋 기록을보다 쉽게 ​​볼 수 있습니다. 그러나 병합하려는 지점 중 하나와 병합 충돌이 발생하여 직접 해결해야하는 경우 이는 해당 지점에서 개발이 전혀 독립적이지 않았 음을 나타내며, 한 번에 두 개씩 병합해야합니다. 갈등을 해결하고 한 쪽에서 다른 쪽보다 변경을 선호하는 이유. 그렇지 않으면 프로젝트 히스토리를 따르기가 더 어려워지고 쉽지 않습니다.</target>
        </trans-unit>
        <trans-unit id="482be6a864fbdcc5f9a936e9708b6d9c3eb14ff5" translate="yes" xml:space="preserve">
          <source>Note the addition of the &lt;code&gt;+&lt;/code&gt; sign. Alternatively, you can use the &lt;code&gt;-f&lt;/code&gt; flag to force the remote update, as in:</source>
          <target state="translated">&lt;code&gt;+&lt;/code&gt; 부호 가 추가되었습니다 . 또는 다음과 같이 &lt;code&gt;-f&lt;/code&gt; 플래그를 사용 하여 원격 업데이트를 강제 실행할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="c14d9654c43dfc38c5ce0e390578cf211f8eb175" translate="yes" xml:space="preserve">
          <source>Note the addition of the &lt;code&gt;+&lt;/code&gt; sign. Alternatively, you can use the &lt;code&gt;-f&lt;/code&gt; flag to force updates of all the fetched branches, as in:</source>
          <target state="translated">&lt;code&gt;+&lt;/code&gt; 부호 가 추가되었습니다 . 또는 &lt;code&gt;-f&lt;/code&gt; 플래그를 사용하여 다음 과 같이 페치 된 모든 분기를 강제로 업데이트 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="2261964ad436001973909975a060cb501a98c780" translate="yes" xml:space="preserve">
          <source>Note the last point. Do &lt;code&gt;not&lt;/code&gt; use &lt;code&gt;git pull&lt;/code&gt; unless you actually want to merge the remote branch.</source>
          <target state="translated">마지막 사항에 유의하십시오. 실제로 원격 브랜치를 병합 하지 &lt;code&gt;not&lt;/code&gt; 려면 &lt;code&gt;git pull&lt;/code&gt; 을 사용 하지 마십시오 .</target>
        </trans-unit>
        <trans-unit id="b5d534f9876445dbbed162e13c3b9e1bade912b4" translate="yes" xml:space="preserve">
          <source>Note the major differences in &lt;code&gt;N&lt;/code&gt;, &lt;code&gt;P&lt;/code&gt;, and &lt;code&gt;Q&lt;/code&gt; over &lt;code&gt;--full-history&lt;/code&gt;:</source>
          <target state="translated">주요 차이점 참고 &lt;code&gt;N&lt;/code&gt; , &lt;code&gt;P&lt;/code&gt; 및 &lt;code&gt;Q&lt;/code&gt; 위에 &lt;code&gt;--full-history&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="592ed4ba86d62c504859114fd8d03df0827a06fa" translate="yes" xml:space="preserve">
          <source>Note the quotes around &lt;code&gt;*.c&lt;/code&gt;. The file &lt;code&gt;hello.c&lt;/code&gt; will also be checked out, even though it is no longer in the working tree, because the file globbing is used to match entries in the index (not in the working tree by the shell).</source>
          <target state="translated">&lt;code&gt;*.c&lt;/code&gt; 주위의 따옴표를 참고하십시오 . &lt;code&gt;hello.c&lt;/code&gt; 파일 은 더 이상 작업 트리에 없지만 파일 글 로빙이 색인의 항목 (쉘의 작업 트리가 아님)과 일치하는 데 사용되므로 체크 아웃됩니다.</target>
        </trans-unit>
        <trans-unit id="d840183324e7e2c4b1d9b149ae89bf837a67da9c" translate="yes" xml:space="preserve">
          <source>Note the quotes around &lt;code&gt;*.c&lt;/code&gt;. The file &lt;code&gt;hello.c&lt;/code&gt; will also be restored, even though it is no longer in the working tree, because the file globbing is used to match entries in the index (not in the working tree by the shell).</source>
          <target state="translated">&lt;code&gt;*.c&lt;/code&gt; 주위의 따옴표를 참고하십시오 . &lt;code&gt;hello.c&lt;/code&gt; 파일 은 더 이상 작업 트리에 있지 않더라도 복원됩니다 (파일 글 로빙은 색인의 항목 (쉘의 작업 트리가 아님)와 일치하는 데 사용되기 때문에).</target>
        </trans-unit>
        <trans-unit id="86811ec658abf1645177c2f89c78cd1610e7ea04" translate="yes" xml:space="preserve">
          <source>Note what happens to the different &lt;code&gt;git diff-*&lt;/code&gt; versions here. After we&amp;rsquo;ve updated &lt;code&gt;hello&lt;/code&gt; in the index, &lt;code&gt;git diff-files -p&lt;/code&gt; now shows no differences, but &lt;code&gt;git diff-index -p HEAD&lt;/code&gt; still &lt;strong&gt;does&lt;/strong&gt; show that the current state is different from the state we committed. In fact, now &lt;code&gt;git diff-index&lt;/code&gt; shows the same difference whether we use the &lt;code&gt;--cached&lt;/code&gt; flag or not, since now the index is coherent with the working tree.</source>
          <target state="translated">여기 에서 다른 &lt;code&gt;git diff-*&lt;/code&gt; 버전에 어떤 영향이 있는지 확인 하십시오. 우리가 업데이트 한 후 &lt;code&gt;hello&lt;/code&gt; 인덱스에, &lt;code&gt;git diff-files -p&lt;/code&gt; 지금은 차이를 보여줍니다 만, &lt;code&gt;git diff-index -p HEAD&lt;/code&gt; 여전히 &lt;strong&gt;않는&lt;/strong&gt; 현재 상태는 우리가 최선을 다하고 상태에서 다른 것을 보여. 사실, &lt;code&gt;git diff-index&lt;/code&gt; 는 &lt;code&gt;--cached&lt;/code&gt; 플래그를 사용하든 그렇지 않든 동일한 차이를 보여줍니다. 이제 색인은 작업 트리와 일관성이 있기 때문입니다.</target>
        </trans-unit>
        <trans-unit id="c96f5bf9205aae211cb148d5f8bcf4fb9ebed15b" translate="yes" xml:space="preserve">
          <source>Note, by the way, that lots of commands take a tree as an argument. But as we can see above, a tree can be referred to in many different ways&amp;mdash;​by the SHA-1 name for that tree, by the name of a commit that refers to the tree, by the name of a branch whose head refers to that tree, etc.--and most such commands can accept any of these names.</source>
          <target state="translated">그런데 많은 명령이 트리를 인수로 사용합니다. 그러나 위에서 볼 수 있듯이, 트리는 여러 가지 방식으로, 그 트리의 SHA-1 이름, 트리를 나타내는 커밋 이름, 머리가 참조하는 브랜치 이름으로 나타낼 수 있습니다. 그 트리 등을 비롯한 대부분의 명령은 이러한 이름을 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ba28d9bd22f696c9f9b774765c5cbeba6fcd1342" translate="yes" xml:space="preserve">
          <source>Note, for the reasons stated above usage of context-free patches is discouraged.</source>
          <target state="translated">위에서 언급 한 이유로 컨텍스트가없는 패치는 사용하지 않는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="22eddd855ac86c24360d06b5276ff8c7e192d879" translate="yes" xml:space="preserve">
          <source>Note, this safety check does not mean that a checkout will generate a file identical to the original file for a different setting of &lt;code&gt;core.eol&lt;/code&gt; and &lt;code&gt;core.autocrlf&lt;/code&gt;, but only for the current one. For example, a text file with &lt;code&gt;LF&lt;/code&gt; would be accepted with &lt;code&gt;core.eol=lf&lt;/code&gt; and could later be checked out with &lt;code&gt;core.eol=crlf&lt;/code&gt;, in which case the resulting file would contain &lt;code&gt;CRLF&lt;/code&gt;, although the original file contained &lt;code&gt;LF&lt;/code&gt;. However, in both work trees the line endings would be consistent, that is either all &lt;code&gt;LF&lt;/code&gt; or all &lt;code&gt;CRLF&lt;/code&gt;, but never mixed. A file with mixed line endings would be reported by the &lt;code&gt;core.safecrlf&lt;/code&gt; mechanism.</source>
          <target state="translated">이 안전 점검은 체크 아웃이 다른 설정의 &lt;code&gt;core.eol&lt;/code&gt; 및 &lt;code&gt;core.autocrlf&lt;/code&gt; 에 대해 원본 파일과 동일한 파일을 생성 하지만 현재 파일에 대해서만 생성한다는 것을 의미하지는 않습니다 . 예를 들어, &lt;code&gt;LF&lt;/code&gt; 가 있는 텍스트 파일은 &lt;code&gt;core.eol=lf&lt;/code&gt; 로 승인되고 나중에 &lt;code&gt;core.eol=crlf&lt;/code&gt; 로 체크 아웃 될 수 있습니다 .이 경우 결과 파일에는 &lt;code&gt;CRLF&lt;/code&gt; 가 포함 되지만 원본 파일에는 &lt;code&gt;LF&lt;/code&gt; 가 포함 됩니다. 그러나 두 작업 트리에서 줄 끝은 모두 일치합니다. 즉, 모든 &lt;code&gt;LF&lt;/code&gt; 또는 모든 &lt;code&gt;CRLF&lt;/code&gt; 이지만 혼합되지는 않습니다. 줄 끝이 혼합 된 파일은 &lt;code&gt;core.safecrlf&lt;/code&gt; 에서 보고합니다. 기구.</target>
        </trans-unit>
        <trans-unit id="955b317bd13857ee21eddce08c9664927a950a2e" translate="yes" xml:space="preserve">
          <source>Note. A single level of backslashes are eaten by the configuration file parser, so you would need to double the backslashes; the pattern above picks a line that begins with a backslash, and zero or more occurrences of &lt;code&gt;sub&lt;/code&gt; followed by &lt;code&gt;section&lt;/code&gt; followed by open brace, to the end of line.</source>
          <target state="translated">노트. 구성 파일 구문 분석기는 단일 레벨의 백 슬래시를 사용하므로 백 슬래시를 두 배로 늘려야합니다. 위의 패턴은 백 슬래시로 시작하는 라인을 선택하고, 줄 의 끝까지 0 개 이상의 &lt;code&gt;sub&lt;/code&gt; 와 그 뒤에 &lt;code&gt;section&lt;/code&gt; , open brace를 차례로 선택합니다.</target>
        </trans-unit>
        <trans-unit id="c3a8d5b6840faaf677f5d3f6a79125e45b041b0b" translate="yes" xml:space="preserve">
          <source>Note. When the &quot;-C&quot; option is used with &lt;code&gt;--find-copies-harder&lt;/code&gt; option, &lt;code&gt;git diff-*&lt;/code&gt; commands feed unmodified filepairs to diffcore mechanism as well as modified ones. This lets the copy detector consider unmodified files as copy source candidates at the expense of making it slower. Without &lt;code&gt;--find-copies-harder&lt;/code&gt;, &lt;code&gt;git diff-*&lt;/code&gt; commands can detect copies only if the file that was copied happened to have been modified in the same changeset.</source>
          <target state="translated">노트. &quot;-C&quot;옵션을 &lt;code&gt;--find-copies-harder&lt;/code&gt; 옵션 과 함께 사용 하면 &lt;code&gt;git diff-*&lt;/code&gt; diff- * 명령은 수정되지 않은 파일 쌍을 수정 된 파일 쌍뿐만 아니라 diffcore 메커니즘에 공급합니다. 이를 통해 복사 검출기는 수정되지 않은 파일을 복사 소스 후보로 간주하여 속도를 늦출 수 있습니다. 없이 &lt;code&gt;--find-copies-harder&lt;/code&gt; , &lt;code&gt;git diff-*&lt;/code&gt; 명령 사본을 감지 할 수있는 복사 된 파일이 같은 변경 집합에서 수정 된 일어난 경우에만 가능합니다.</target>
        </trans-unit>
        <trans-unit id="9ed1ac27dff5378ed96f590f4322050a04cabf6d" translate="yes" xml:space="preserve">
          <source>Note: &lt;code&gt;git revert&lt;/code&gt; is used to record some new commits to reverse the effect of some earlier commits (often only a faulty one). If you want to throw away all uncommitted changes in your working directory, you should see &lt;a href=&quot;git-reset&quot;&gt;git-reset[1]&lt;/a&gt;, particularly the &lt;code&gt;--hard&lt;/code&gt; option. If you want to extract specific files as they were in another commit, you should see &lt;a href=&quot;git-restore&quot;&gt;git-restore[1]&lt;/a&gt;, specifically the &lt;code&gt;--source&lt;/code&gt; option. Take care with these alternatives as both will discard uncommitted changes in your working directory.</source>
          <target state="translated">참고 : &lt;code&gt;git revert&lt;/code&gt; 는 일부 새로운 커밋을 기록하여 이전 커밋의 효과를 되 돌리는 데 사용됩니다 (종종 결함이있는 것). 작업 디렉토리에서 커밋되지 않은 모든 변경 사항을 제거하려면 &lt;a href=&quot;git-reset&quot;&gt;git-reset [1]&lt;/a&gt; , 특히 &lt;code&gt;--hard&lt;/code&gt; 옵션이 표시되어야합니다. 다른 커밋에서 특정 파일을 추출하려면 &lt;a href=&quot;git-restore&quot;&gt;git-restore [1]&lt;/a&gt; , 특히 &lt;code&gt;--source&lt;/code&gt; 옵션이 표시되어야합니다. 둘 다 작업 디렉토리에서 커밋되지 않은 변경 사항을 삭제하므로 이러한 대안을주의하십시오.</target>
        </trans-unit>
        <trans-unit id="6007883f602581f1393822506c41cbfbfd02c805" translate="yes" xml:space="preserve">
          <source>Note: A thin pack violates the packed archive format by omitting required objects and is thus unusable by Git without making it self-contained. Use &lt;code&gt;git index-pack --fix-thin&lt;/code&gt; (see &lt;a href=&quot;git-index-pack&quot;&gt;git-index-pack[1]&lt;/a&gt;) to restore the self-contained property.</source>
          <target state="translated">참고 : 씬 팩은 필요한 객체를 생략하여 압축 된 아카이브 형식을 위반하므로 Git에서 자체 포함하지 않고 사용할 수 없습니다. 사용 &lt;code&gt;git index-pack --fix-thin&lt;/code&gt; (참조 &lt;a href=&quot;git-index-pack&quot;&gt;자식 인덱스 팩 [1]&lt;/a&gt; )을 자체 포함 된 속성을 복원합니다.</target>
        </trans-unit>
        <trans-unit id="1f8f5701942fbb7ebefa9dee3f4f37f4528c7cfd" translate="yes" xml:space="preserve">
          <source>Note: Make sure you quote the result when passing it to &lt;code&gt;eval&lt;/code&gt;. See below for an example.</source>
          <target state="translated">참고 : 결과를 &lt;code&gt;eval&lt;/code&gt; 로 전달할 때 인용하십시오 . 예는 아래를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="b0f0e4e61a2bb004cf3ec68d5169e8ba972a47ee" translate="yes" xml:space="preserve">
          <source>Note: Newer CVS versions (&amp;gt;= 1.12.11) also support specifying CVS_SERVER directly in CVSROOT like</source>
          <target state="translated">참고 : 최신 CVS 버전 (&amp;gt; = 1.12.11)은 CVSROOT에서 직접 CVS_SERVER 지정을 지원합니다.</target>
        </trans-unit>
        <trans-unit id="b833243d544e1089f2767ea8843cab2eed5526b2" translate="yes" xml:space="preserve">
          <source>Note: Porcelain commands such as &lt;code&gt;git gc&lt;/code&gt; (see &lt;a href=&quot;git-gc&quot;&gt;git-gc[1]&lt;/a&gt;), &lt;code&gt;git repack&lt;/code&gt; (see &lt;a href=&quot;git-repack&quot;&gt;git-repack[1]&lt;/a&gt;) pass this option by default in modern Git when they put objects in your repository into pack files. So does &lt;code&gt;git bundle&lt;/code&gt; (see &lt;a href=&quot;git-bundle&quot;&gt;git-bundle[1]&lt;/a&gt;) when it creates a bundle.</source>
          <target state="translated">참고 : &lt;code&gt;git gc&lt;/code&gt; ( &lt;a href=&quot;git-gc&quot;&gt;git-gc [1] 참조&lt;/a&gt; ), &lt;code&gt;git repack&lt;/code&gt; ( &lt;a href=&quot;git-repack&quot;&gt;git-repack [1]&lt;/a&gt; 참조 ) 과 같은 도자기 명령 은 저장소의 객체를 팩 파일에 넣을 때 현대 Git에서 기본적 으로이 옵션을 전달합니다. &lt;code&gt;git bundle&lt;/code&gt; ( &lt;a href=&quot;git-bundle&quot;&gt;git-bundle [1]&lt;/a&gt; 참조)도 마찬가지 입니다.</target>
        </trans-unit>
        <trans-unit id="7a04bc9af081bc88d648e6675a2308737bd31c23" translate="yes" xml:space="preserve">
          <source>Note: Some inetd servers let you specify the name of the executable independently of the value of argv[0] (i.e. the name the program assumes it was executed with). In this case the correct line in /etc/inetd.conf looks like</source>
          <target state="translated">참고 : 일부 inetd 서버에서는 argv [0]의 값과 독립적으로 실행 파일 이름을 지정할 수 있습니다 (예 : 프로그램에서 실행 된 이름). 이 경우 /etc/inetd.conf의 올바른 줄은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="722ccad077353010f3a3bf5b634c417679782a2c" translate="yes" xml:space="preserve">
          <source>Note: Whenever the clean filter is changed, the repo should be renormalized: $ git add --renormalize .</source>
          <target state="translated">참고 : 클린 필터가 변경 될 때마다 리포지토리를 다시 정규화해야합니다 : $ git add --renormalize.</target>
        </trans-unit>
        <trans-unit id="e979029bca285fbda95b190d7e0a6ad42b034f7b" translate="yes" xml:space="preserve">
          <source>Note: the first command (&lt;code&gt;label onto&lt;/code&gt;) labels the revision onto which the commits are rebased; The name &lt;code&gt;onto&lt;/code&gt; is just a convention, as a nod to the &lt;code&gt;--onto&lt;/code&gt; option.</source>
          <target state="translated">참고 : 첫 번째 명령 ( &lt;code&gt;label onto&lt;/code&gt; on)은 커밋이 기반으로하는 개정판에 레이블을 지정합니다. 이름 &lt;code&gt;onto&lt;/code&gt; 받는 고개를 끄덕로, 단지 관례 &lt;code&gt;--onto&lt;/code&gt; 옵션을 선택합니다.</target>
        </trans-unit>
        <trans-unit id="c1bc321618eb470344ec0a0359d287ae90474ae5" translate="yes" xml:space="preserve">
          <source>Note: the following core Perl modules that may be installed with your distribution of Perl are required: MIME::Base64, MIME::QuotedPrint, Net::Domain and Net::SMTP. These additional Perl modules are also required: Authen::SASL and Mail::Address.</source>
          <target state="translated">참고 : Perl 배포와 함께 설치할 수있는 핵심 Perl 모듈 인 MIME :: Base64, MIME :: QuotedPrint, Net :: Domain 및 Net :: SMTP가 필요합니다. 이 추가 Perl 모듈도 필요합니다 : Authen :: SASL 및 Mail :: Address.</target>
        </trans-unit>
        <trans-unit id="9ca0395056bb808a73d2de7297fac7a555e73c25" translate="yes" xml:space="preserve">
          <source>Note: you can specify the default pretty format in the repository configuration (see &lt;a href=&quot;git-config&quot;&gt;git-config[1]&lt;/a&gt;).</source>
          <target state="translated">참고 : 저장소 구성에서 기본 pretty 형식을 지정할 수 있습니다 ( &lt;a href=&quot;git-config&quot;&gt;git-config [1] 참조&lt;/a&gt; ).</target>
        </trans-unit>
        <trans-unit id="399df4ce8f932f9b96c0fdefbfc88e37bceafef0" translate="yes" xml:space="preserve">
          <source>Note: you need to ensure each user that is going to invoke &lt;code&gt;git-cvsserver&lt;/code&gt; has write access to the log file and to the database (see &lt;a href=&quot;#dbbackend&quot;&gt;Database Backend&lt;/a&gt;. If you want to offer write access over SSH, the users of course also need write access to the Git repository itself.</source>
          <target state="translated">참고 : &lt;code&gt;git-cvsserver&lt;/code&gt; 를 호출하려는 각 사용자가 로그 파일 및 데이터베이스에 대한 쓰기 액세스 권한을 가지고 있는지 확인해야 합니다 ( &lt;a href=&quot;#dbbackend&quot;&gt;데이터베이스 백엔드&lt;/a&gt; 참조) . SSH를 통한 쓰기 액세스를 제공하려면 물론 사용자도 쓰기 액세스 권한이 필요합니다. Git 저장소 자체에.</target>
        </trans-unit>
        <trans-unit id="70440046a3dc2e079f23ee1c57dfa76669b732aa" translate="yes" xml:space="preserve">
          <source>Notes</source>
          <target state="translated">Notes</target>
        </trans-unit>
        <trans-unit id="803fb7d2ab5d83b44291b7856ec7ac09a4ad4990" translate="yes" xml:space="preserve">
          <source>Notes can also be added to patches prepared with &lt;code&gt;git format-patch&lt;/code&gt; by using the &lt;code&gt;--notes&lt;/code&gt; option. Such notes are added as a patch commentary after a three dash separator line.</source>
          <target state="translated">&lt;code&gt;--notes&lt;/code&gt; 옵션 을 사용하여 &lt;code&gt;git format-patch&lt;/code&gt; 로 준비된 패치에 메모를 추가 할 수도 있습니다 . 이러한 노트는 3 개의 대시 구분선 뒤에 패치 주석으로 추가됩니다.</target>
        </trans-unit>
        <trans-unit id="680f18d9848c14869bd7dca451d5f596480f4677" translate="yes" xml:space="preserve">
          <source>Notes merge strategies</source>
          <target state="translated">메모 병합 전략</target>
        </trans-unit>
        <trans-unit id="abd4e292c73314f22de94f0e2806350a1ebe4452" translate="yes" xml:space="preserve">
          <source>Notes on frequently confused options</source>
          <target state="translated">자주 혼동되는 옵션에 대한 참고 사항</target>
        </trans-unit>
        <trans-unit id="f5aa58376045f00b2abde3758c9ee9232861fade" translate="yes" xml:space="preserve">
          <source>Notes ref to read and manipulate instead of &lt;code&gt;refs/notes/commits&lt;/code&gt;. Must be an unabbreviated ref name. This setting can be overridden through the environment and command line.</source>
          <target state="translated">메모는 &lt;code&gt;refs/notes/commits&lt;/code&gt; 대신 읽고 조작하는 것을 말합니다 . 축약되지 않은 참조 이름이어야합니다. 이 설정은 환경과 명령 줄을 통해 무시할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="27c7345a105341e9d7ed2a9f6b06c674d31c0796" translate="yes" xml:space="preserve">
          <source>Notice all types of potential whitespace errors known to Git. The tab width is taken from the value of the &lt;code&gt;core.whitespace&lt;/code&gt; configuration variable.</source>
          <target state="translated">Git에 알려진 모든 유형의 잠재적 공백 오류를 확인하십시오. 탭 너비는 &lt;code&gt;core.whitespace&lt;/code&gt; 구성 변수 의 값에서 가져옵니다 .</target>
        </trans-unit>
        <trans-unit id="b1fa74b0ca5d38d82ab602be416ab241bc186864" translate="yes" xml:space="preserve">
          <source>Notice that regardless of which checkout command we use, &lt;code&gt;HEAD&lt;/code&gt; now refers directly to commit &lt;code&gt;b&lt;/code&gt;. This is known as being in detached &lt;code&gt;HEAD&lt;/code&gt; state. It means simply that &lt;code&gt;HEAD&lt;/code&gt; refers to a specific commit, as opposed to referring to a named branch. Let&amp;rsquo;s see what happens when we create a commit:</source>
          <target state="translated">어떤 체크 아웃 명령을 사용하든 &lt;code&gt;HEAD&lt;/code&gt; 는 이제 commit &lt;code&gt;b&lt;/code&gt; 를 직접 참조합니다 . &lt;code&gt;HEAD&lt;/code&gt; 상태 가 분리 된 것으로 알려져 있습니다. 단순히 &lt;code&gt;HEAD&lt;/code&gt; 가 명명 된 브랜치를 참조하는 것과 달리 특정 커밋을 참조한다는 것을 의미합니다. 커밋을 만들 때 어떤 일이 발생하는지 봅시다 :</target>
        </trans-unit>
        <trans-unit id="223ae08c12689ce4cda40425ac912a2b7bc15955" translate="yes" xml:space="preserve">
          <source>Notify the helper this is a clone request (i.e. the current repository is guaranteed empty).</source>
          <target state="translated">헬퍼에게 이것이 복제 요청임을 알립니다 (즉, 현재 저장소는 비어 있음).</target>
        </trans-unit>
        <trans-unit id="4abfc187ad76ac88063d3dc9dd98a5854ac68fcf" translate="yes" xml:space="preserve">
          <source>Now add the changes to the index that you want to have in the first commit. You can use &lt;code&gt;git add&lt;/code&gt; (possibly interactively) or &lt;code&gt;git gui&lt;/code&gt; (or both) to do that.</source>
          <target state="translated">이제 첫 번째 커밋에서 갖고 싶은 인덱스에 변경 사항을 추가하십시오. 당신이 사용할 수있는 &lt;code&gt;git add&lt;/code&gt; (아마도 대화 형) 또는 &lt;code&gt;git gui&lt;/code&gt; 그렇게 (모두 이상).</target>
        </trans-unit>
        <trans-unit id="f89d262ba51a934099d56714cbb679d531203dd2" translate="yes" xml:space="preserve">
          <source>Now clone the superproject:</source>
          <target state="translated">이제 superproject를 복제하십시오.</target>
        </trans-unit>
        <trans-unit id="ba793c9ae00cb4d237b36de220bcaff0d64b7a28" translate="yes" xml:space="preserve">
          <source>Now create the branches in which you are going to work; these start out at the current tip of origin/master branch, and should be set up (using the &lt;code&gt;--track&lt;/code&gt; option to &lt;a href=&quot;git-branch&quot;&gt;git-branch[1]&lt;/a&gt;) to merge changes in from Linus by default.</source>
          <target state="translated">이제 작업 할 브랜치를 작성하십시오. 이것들은 현재 원점 / 마스터 브랜치의 끝에서 시작 하며 기본적으로 Linus에서 변경 사항을 병합 하도록 설정해야합니다 ( &lt;code&gt;--track&lt;/code&gt; 옵션을 &lt;a href=&quot;git-branch&quot;&gt;git-branch [1]&lt;/a&gt; 으로 설정).</target>
        </trans-unit>
        <trans-unit id="b3aa6a5493fd6ad1a98101f846b1686abf42b2c1" translate="yes" xml:space="preserve">
          <source>Now create the superproject and add all the submodules:</source>
          <target state="translated">이제 superproject를 만들고 모든 서브 모듈을 추가하십시오 :</target>
        </trans-unit>
        <trans-unit id="aec2ee2ebf7f0a1017c29bcb872a25ae6bf7b23d" translate="yes" xml:space="preserve">
          <source>Now is a good point to take a break to let this information sink in.</source>
          <target state="translated">이제이 정보가 침투 할 수 있도록 휴식을 취하는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="8125d3bd8f5c390de8746d2ef58ce50b7de72c0b" translate="yes" xml:space="preserve">
          <source>Now let&amp;rsquo;s suppose that commit J is bad and commit G is good and that we apply the bisection algorithm like it has been previously described.</source>
          <target state="translated">커밋 J가 나쁘고 커밋 G가 좋으며 이전에 설명한 것처럼 이분법 알고리즘을 적용한다고 가정 해 봅시다.</target>
        </trans-unit>
        <trans-unit id="880aeec71bcb81a6f397f1be442543fc2e21cab4" translate="yes" xml:space="preserve">
          <source>Now suppose that Joe wants his middle name initial used, and Jane prefers her family name fully spelled out. A proper &lt;code&gt;.mailmap&lt;/code&gt; file would look like:</source>
          <target state="translated">이제 Joe가 중간 이름을 처음 사용하기를 원하고 Jane이 가족 이름을 완전히 입력 한 것을 선호한다고 가정합니다. 적절한 &lt;code&gt;.mailmap&lt;/code&gt; 파일은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="3e7c06961fbf7a9468c5f87e472b9bdf95e1fa5a" translate="yes" xml:space="preserve">
          <source>Now to apply some patches from the community. Think of a short snappy name for a branch to hold this patch (or related group of patches), and create a new branch from a recent stable tag of Linus&amp;rsquo;s branch. Picking a stable base for your branch will: 1) help you: by avoiding inclusion of unrelated and perhaps lightly tested changes 2) help future bug hunters that use &lt;code&gt;git bisect&lt;/code&gt; to find problems</source>
          <target state="translated">이제 커뮤니티의 패치를 적용하겠습니다. 이 패치 (또는 관련 패치 그룹)를 보유 할 지점의 짧은 이름을 생각하고 최근 Linus 지점의 안정적인 태그에서 새 지점을 만듭니다. 지사에 안정적인 기반을 고르면 1) 도움이 될 것 : 관련이없고 약간 테스트 된 변경 사항을 포함하지 않음 2) &lt;code&gt;git bisect&lt;/code&gt; 를 사용 하여 문제를 찾는 미래의 버그 사냥꾼을 도울 것</target>
        </trans-unit>
        <trans-unit id="31a13e21421ef92e8ef4a0a89bea77231f7d36fb" translate="yes" xml:space="preserve">
          <source>Now use &lt;code&gt;git submodule update&lt;/code&gt; to clone the repositories and check out the commits specified in the superproject:</source>
          <target state="translated">이제 &lt;code&gt;git submodule update&lt;/code&gt; 를 사용 하여 저장소를 복제하고 수퍼 프로젝트에 지정된 커밋을 확인하십시오.</target>
        </trans-unit>
        <trans-unit id="93f7a0302cd464e3e88673ccf5b8a8b034507a50" translate="yes" xml:space="preserve">
          <source>Now we are ready to experiment with the merge by hand.</source>
          <target state="translated">이제 손으로 병합을 실험 할 준비가되었습니다.</target>
        </trans-unit>
        <trans-unit id="0479e792f6adb8abb7cacffe33ca0f7a5b48ab2f" translate="yes" xml:space="preserve">
          <source>Now we will suppose that there is only one &quot;first bad commit&quot;. This means that all its descendants are &quot;bad&quot; and all the other commits are &quot;good&quot;. And we will suppose that all commits have an equal probability of being good or bad, or of being the first bad commit, so knowing the state of c commits gives always the same amount of information wherever these c commits are on the graph and whatever c is. (So we suppose that these commits being for example on a branch or near a good or a bad commit does not give more or less information).</source>
          <target state="translated">이제 &quot;첫 번째 나쁜 커밋&quot;이 하나만 있다고 가정하겠습니다. 이것은 모든 자손이 &quot;나쁜&quot;것이고 다른 모든 커밋은 &quot;좋은&quot;것을 의미합니다. 그리고 우리는 모든 커밋이 좋거나 나쁘거나 첫 번째 커밋이 될 확률이 같다고 가정합니다. 따라서 c 커밋 상태를 알면 이러한 c 커밋이 그래프의 어디에 있든지 c 입니다. 따라서 우리는 이러한 커밋이 예를 들어 지점에서 또는 양호 또는 불량 커밋 근처에서 정보를 제공하지 않는다고 가정합니다.</target>
        </trans-unit>
        <trans-unit id="16cb16561e679da512d88420e76326b5c722ec8f" translate="yes" xml:space="preserve">
          <source>Now when the background process runs &lt;code&gt;git fetch origin&lt;/code&gt; the references on &lt;code&gt;origin-push&lt;/code&gt; won&amp;rsquo;t be updated, and thus commands like:</source>
          <target state="translated">이제 백그라운드 프로세스가 &lt;code&gt;git fetch origin&lt;/code&gt; 을 실행 하면 &lt;code&gt;origin-push&lt;/code&gt; 의 참조 가 업데이트되지 않으므로 다음과 같은 명령이 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="3ecf9739a1d0abf420c43be7ddca1b7fc46c48f7" translate="yes" xml:space="preserve">
          <source>Now you apply the patch(es), run some tests, and commit the change(s). If the patch is a multi-part series, then you should apply each as a separate commit to this branch.</source>
          <target state="translated">이제 패치를 적용하고 테스트를 실행 한 후 변경 사항을 커밋합니다. 패치가 여러 부분으로 구성된 시리즈 인 경우이 분기에 각각 별도의 커밋으로 적용해야합니다.</target>
        </trans-unit>
        <trans-unit id="ac8b110d69f8df7d9503ad0a18549a8731f4daf9" translate="yes" xml:space="preserve">
          <source>Now you are wiser, because you know that it happened 940 revisions before v0.99.</source>
          <target state="translated">v0.99 이전의 940 개정판이 발생 했으므로 더 현명합니다.</target>
        </trans-unit>
        <trans-unit id="54796c29834d872153c55921bf00540d7c6165a5" translate="yes" xml:space="preserve">
          <source>Now you can proceed with the creation of the feature release. Apply a tag to the tip of &lt;code&gt;master&lt;/code&gt; indicating the release version:</source>
          <target state="translated">이제 기능 릴리스 작성을 진행할 수 있습니다. 릴리스 버전을 나타내는 태그를 &lt;code&gt;master&lt;/code&gt; 팁에 적용하십시오 .</target>
        </trans-unit>
        <trans-unit id="d60447094204d4dec9840c772eacade572f28205" translate="yes" xml:space="preserve">
          <source>Now you know that blob 4b9458b3 is missing, and that the tree 2d9263c6 points to it. If you could find just one copy of that missing blob object, possibly in some other repository, you could move it into &lt;code&gt;.git/objects/4b/9458b3&amp;hellip;​&lt;/code&gt; and be done. Suppose you can&amp;rsquo;t. You can still examine the tree that pointed to it with &lt;a href=&quot;git-ls-tree&quot;&gt;git-ls-tree[1]&lt;/a&gt;, which might output something like:</source>
          <target state="translated">이제 blob 4b9458b3이 누락되었으며 2d9263c6 트리가이를 가리 킵니다. 당신이없는 Blob 오브젝트의 한 복사본을 찾을 수 있다면, 아마도 다른 저장소에서, 당신이로 이동할 수있는 &lt;code&gt;.git/objects/4b/9458b3&amp;hellip;​&lt;/code&gt; 그리고는 할 수. 할 수 없다고 가정하십시오. &lt;a href=&quot;git-ls-tree&quot;&gt;git-ls-tree [1] 사용&lt;/a&gt; 하여 트리를 가리키는 트리를 여전히 검사 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="c93b9bdc902ddf8466cfefc51dc1f28429545152" translate="yes" xml:space="preserve">
          <source>Now you&amp;rsquo;ve split out many of the changes into their own commits, and might no longer use the patch mode of &lt;code&gt;git add&lt;/code&gt;, in order to select all remaining uncommitted changes.</source>
          <target state="translated">이제 많은 변경 사항을 자체 커밋으로 나누었으며 커밋 되지 않은 나머지 변경 사항을 모두 선택하기 위해 더 이상 &lt;code&gt;git add&lt;/code&gt; 패치 모드를 사용하지 않을 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="69b6ae43249b3d4c8e61d7b20084413cd49e5e3e" translate="yes" xml:space="preserve">
          <source>Now, for the meat:</source>
          <target state="translated">이제 고기를 위해 :</target>
        </trans-unit>
        <trans-unit id="4449e60d3fdd6703a4970ef116187e4c17d80dc4" translate="yes" xml:space="preserve">
          <source>Now, in this case we&amp;rsquo;ve intentionally created a situation where the merge will need to be fixed up by hand, though, so Git will do as much of it as it can automatically (which in this case is just merge the &lt;code&gt;example&lt;/code&gt; file, which had no differences in the &lt;code&gt;mybranch&lt;/code&gt; branch), and say:</source>
          <target state="translated">이제이 경우 의도적으로 병합을 수동으로 수정해야하는 상황을 만들었으므로 Git은 자동으로 최대한 많은 작업을 수행합니다 (이 경우 &lt;code&gt;example&lt;/code&gt; 파일을 병합하기 만하면 됩니다). &lt;code&gt;mybranch&lt;/code&gt; 브랜치 에는 아무런 차이가 없었습니다 ).</target>
        </trans-unit>
        <trans-unit id="93036e7630aadf8fab80b9b1079ffb3d1ea1e18f" translate="yes" xml:space="preserve">
          <source>Now, let&amp;rsquo;s pretend you are the one who did all the work in &lt;code&gt;mybranch&lt;/code&gt;, and the fruit of your hard work has finally been merged to the &lt;code&gt;master&lt;/code&gt; branch. Let&amp;rsquo;s go back to &lt;code&gt;mybranch&lt;/code&gt;, and run &lt;code&gt;git merge&lt;/code&gt; to get the &quot;upstream changes&quot; back to your branch.</source>
          <target state="translated">이제, 당신이 &lt;code&gt;mybranch&lt;/code&gt; 에서 모든 일을 한 사람이라고 가정 해 봅시다 . 그리고 당신의 노력의 결과가 마침내 &lt;code&gt;master&lt;/code&gt; 지부에 합병되었습니다 . &lt;code&gt;mybranch&lt;/code&gt; 로 돌아가서 &lt;code&gt;git merge&lt;/code&gt; 를 실행 하여 &quot;업스트림 변경 사항&quot;을 브랜치로 다시 가져 오십시오.</target>
        </trans-unit>
        <trans-unit id="7c23965b9cba90dec960d959f0eea85b60ea2b28" translate="yes" xml:space="preserve">
          <source>Now, since we&amp;rsquo;ve updated &lt;code&gt;hello&lt;/code&gt; in the index, we can commit the new version. We could do it by writing the tree by hand again, and committing the tree (this time we&amp;rsquo;d have to use the &lt;code&gt;-p HEAD&lt;/code&gt; flag to tell commit that the HEAD was the &lt;strong&gt;parent&lt;/strong&gt; of the new commit, and that this wasn&amp;rsquo;t an initial commit any more), but you&amp;rsquo;ve done that once already, so let&amp;rsquo;s just use the helpful script this time:</source>
          <target state="translated">이제 색인에서 &lt;code&gt;hello&lt;/code&gt; 를 업데이트 했으므로 새 버전을 커밋 할 수 있습니다. 우리는 트리를 손으로 다시 작성하고 트리를 커밋함으로써 할 수 있습니다. (이번에 는 HEAD가 새로운 커밋 의 &lt;strong&gt;부모&lt;/strong&gt; 임을 알리기 위해 &lt;code&gt;-p HEAD&lt;/code&gt; 플래그를 사용해야합니다. 더 이상 초기 커밋)하지만 ​​이미 한 번 완료 했으므로 이번에는 유용한 스크립트를 사용하십시오.&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="dfab069f398c1bff7a8b8aa3dadd95d2ce84088a" translate="yes" xml:space="preserve">
          <source>Now, to make it a bit more interesting, let&amp;rsquo;s assume that somebody else does some work in the original branch, and simulate that by going back to the master branch, and editing the same file differently there:</source>
          <target state="translated">이제 좀 더 흥미롭게하기 위해 다른 누군가가 원래 분기에서 일부 작업을 수행한다고 가정하고 마스터 분기로 돌아가서 동일한 파일을 다르게 편집하여이를 시뮬레이션합니다.</target>
        </trans-unit>
        <trans-unit id="83bf1df5f5028baeb9804ff8b012e2bfb43363e7" translate="yes" xml:space="preserve">
          <source>Now, we want to go to the next stage in Git, which is to take the files that Git knows about in the index, and commit them as a real tree. We do that in two phases: creating a &lt;code&gt;tree&lt;/code&gt; object, and committing that &lt;code&gt;tree&lt;/code&gt; object as a &lt;code&gt;commit&lt;/code&gt; object together with an explanation of what the tree was all about, along with information of how we came to that state.</source>
          <target state="translated">이제 Git의 다음 단계로 가려고합니다. Git이 인덱스에서 알고있는 파일을 가져 와서 실제 트리로 커밋하는 것입니다. 우리는 두 단계로 &lt;code&gt;tree&lt;/code&gt; 객체를 생성 하고 그 &lt;code&gt;tree&lt;/code&gt; 객체를 &lt;code&gt;commit&lt;/code&gt; 객체 로 커밋 하고 트리가 무엇인지에 대한 설명과 그 상태에 도달 한 방법에 대한 정보를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="4b50314ab323fb71cb3292dbd2b0326c17673414" translate="yes" xml:space="preserve">
          <source>Now, you will get the rewritten history saved in HEAD.</source>
          <target state="translated">이제 다시 작성된 이력을 HEAD에 저장하게됩니다.</target>
        </trans-unit>
        <trans-unit id="575836ebc8e262c11aa86a9dd4e0c52f7d072bcd" translate="yes" xml:space="preserve">
          <source>Now, you&amp;rsquo;ve got two branches, and you decide that you want to merge the work done. Before we do that, let&amp;rsquo;s introduce a cool graphical tool that helps you view what&amp;rsquo;s going on:</source>
          <target state="translated">이제 두 개의 브랜치가 있고 작업을 병합하기로 결정했습니다. 그렇게하기 전에 진행 상황을 확인하는 데 도움이되는 멋진 그래픽 도구를 소개하겠습니다.</target>
        </trans-unit>
        <trans-unit id="910f1e558e60364937a941e26d7def6b701f836e" translate="yes" xml:space="preserve">
          <source>Nowadays though gitweb should create HTML base tag when needed (to set base URI for relative links), so it should work automatically.</source>
          <target state="translated">요즘 gitweb은 필요할 때 HTML 기본 태그를 만들어야하지만 (상대 링크의 기본 URI를 설정하기 위해) 자동으로 작동해야합니다.</target>
        </trans-unit>
        <trans-unit id="9a11d4479b92e7b2c9a9fc979b41f6f7eb2a1edf" translate="yes" xml:space="preserve">
          <source>Nowadays, &lt;code&gt;git log&lt;/code&gt; is a builtin, which means that it is &lt;code&gt;contained&lt;/code&gt; in the command &lt;code&gt;git&lt;/code&gt;. The source side of a builtin is</source>
          <target state="translated">요즘 &lt;code&gt;git log&lt;/code&gt; 는 빌트인이므로 &lt;code&gt;git&lt;/code&gt; 명령에 &lt;code&gt;contained&lt;/code&gt; 되어 있습니다. 내장의 소스 측은</target>
        </trans-unit>
        <trans-unit id="33e31083ab9551e7141ee8a3ee7a0a4d045c20a2" translate="yes" xml:space="preserve">
          <source>Number of bytes of a pack file to map into memory in a single mapping operation. Larger window sizes may allow your system to process a smaller number of large pack files more quickly. Smaller window sizes will negatively affect performance due to increased calls to the operating system&amp;rsquo;s memory manager, but may improve performance when accessing a large number of large pack files.</source>
          <target state="translated">단일 맵핑 조작에서 메모리에 맵핑 할 팩 파일의 바이트 수입니다. 창 크기가 클수록 시스템에서 더 적은 수의 큰 팩 파일을 더 빠르게 처리 할 수 ​​있습니다. 창 크기가 작 으면 운영 체제의 메모리 관리자에 대한 호출 증가로 인해 성능에 부정적인 영향을 주지만 많은 수의 큰 팩 파일에 액세스 할 때 성능이 향상 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="782270330831f0728fbf1b39424dcd7ac04c3bcf" translate="yes" xml:space="preserve">
          <source>Number of grep worker threads to use. If unset (or set to 0), 8 threads are used by default (for now).</source>
          <target state="translated">사용할 grep worker 스레드 수 설정 해제 (또는 0으로 설정)하면 기본적으로 8 개의 스레드가 사용됩니다 (현재).</target>
        </trans-unit>
        <trans-unit id="b3f7cd4c72eff1cd06e6ea960c75592f7883408d" translate="yes" xml:space="preserve">
          <source>Number of grep worker threads to use. See &lt;code&gt;grep.threads&lt;/code&gt; in &lt;a href=&quot;git-grep&quot;&gt;git-grep[1]&lt;/a&gt; for more information.</source>
          <target state="translated">사용할 grep worker 스레드 수 자세한 내용 은 &lt;a href=&quot;git-grep&quot;&gt;git-grep [1]의 &lt;/a&gt; &lt;code&gt;grep.threads&lt;/code&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="340883bf973e4a0a0a15928c3b44200ef6d0edac" translate="yes" xml:space="preserve">
          <source>Number of grep worker threads to use. See &lt;code&gt;grep.threads&lt;/code&gt; in &lt;code&gt;CONFIGURATION&lt;/code&gt; for more information.</source>
          <target state="translated">사용할 grep worker 스레드 수 자세한 내용 은 &lt;code&gt;CONFIGURATION&lt;/code&gt; 의 &lt;code&gt;grep.threads&lt;/code&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="4a06461d5cac364fcad71d6e428b30d7321d874b" translate="yes" xml:space="preserve">
          <source>Number of messages to be sent per connection, after that a relogin will happen. If the value is 0 or undefined, send all messages in one connection. See also the &lt;code&gt;--batch-size&lt;/code&gt; option of &lt;a href=&quot;git-send-email&quot;&gt;git-send-email[1]&lt;/a&gt;.</source>
          <target state="translated">재 로그인이 발생한 후 연결 당 전송 될 메시지 수입니다. 값이 0이거나 정의되지 않은 경우 한 번의 연결로 모든 메시지를 보내십시오. &lt;a href=&quot;git-send-email&quot;&gt;git-send-email [1]&lt;/a&gt; 의 &lt;code&gt;--batch-size&lt;/code&gt; 옵션 도 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="263d5a12c4d7938e6b1945ed2d424a531e8ffd37" translate="yes" xml:space="preserve">
          <source>Number of parallel children to be used for all forms of fetching.</source>
          <target state="translated">모든 형태의 페칭에 사용될 병렬 자식 수입니다.</target>
        </trans-unit>
        <trans-unit id="5f124a70076360d6cdb202a3452dac6608d9c87a" translate="yes" xml:space="preserve">
          <source>Number of seconds to cache credentials (default: 900).</source>
          <target state="translated">자격 증명을 캐시하는 시간 (초)입니다 (기본값 : 900).</target>
        </trans-unit>
        <trans-unit id="0600a433ee142590b5ed0795ec15517899403cc1" translate="yes" xml:space="preserve">
          <source>OBJ_BLOB (3)</source>
          <target state="translated">OBJ_BLOB (3)</target>
        </trans-unit>
        <trans-unit id="20a9deedd57091e656a9ceb8afe723fea4c8ae28" translate="yes" xml:space="preserve">
          <source>OBJ_COMMIT (1)</source>
          <target state="translated">OBJ_COMMIT (1)</target>
        </trans-unit>
        <trans-unit id="33b36795cfe9033fd325f2c4f57ccf4bbcdb1c8c" translate="yes" xml:space="preserve">
          <source>OBJ_OFS_DELTA (6)</source>
          <target state="translated">OBJ_OFS_DELTA (6)</target>
        </trans-unit>
        <trans-unit id="ad63d6a2f7a5f774df4b60dc52ffc40dc66ab330" translate="yes" xml:space="preserve">
          <source>OBJ_REF_DELTA (7)</source>
          <target state="translated">OBJ_REF_DELTA (7)</target>
        </trans-unit>
        <trans-unit id="bf0dce0da3b6ff387e755df6e790a1cac5898dd7" translate="yes" xml:space="preserve">
          <source>OBJ_TAG (4)</source>
          <target state="translated">OBJ_TAG (4)</target>
        </trans-unit>
        <trans-unit id="2f77abc6705f39815a181a261b98c26e748660a6" translate="yes" xml:space="preserve">
          <source>OBJ_TREE (2)</source>
          <target state="translated">OBJ_TREE (2)</target>
        </trans-unit>
        <trans-unit id="bcb75e6bd3e418ec921606a22f47e84ce889c09d" translate="yes" xml:space="preserve">
          <source>OK, still with me? To give us an example to look at, let&amp;rsquo;s go back to the earlier repository with &quot;hello&quot; and &quot;example&quot; file, and bring ourselves back to the pre-merge state:</source>
          <target state="translated">그래, 아직도 나와? 살펴볼 예제를 제공하기 위해 &quot;hello&quot;및 &quot;example&quot;파일을 사용하여 이전 저장소로 돌아가서 병합 전 상태로 돌아가 보겠습니다.</target>
        </trans-unit>
        <trans-unit id="6477da6d91ea639e6e30c40f69d7500177d55603" translate="yes" xml:space="preserve">
          <source>OK, this all sounds like a collection of totally nonsensical rules, but it&amp;rsquo;s actually exactly what you want in order to do a fast merge. The different stages represent the &quot;result tree&quot; (stage 0, aka &quot;merged&quot;), the original tree (stage 1, aka &quot;orig&quot;), and the two trees you are trying to merge (stage 2 and 3 respectively).</source>
          <target state="translated">자, 이것은 모두 무의미한 규칙 모음처럼 들리지만 실제로 빠른 병합을 수행하기 위해 실제로 원하는 것입니다. 서로 다른 단계는 &quot;결과 트리&quot;(단계 0, 일명 &quot;병합&quot;), 원래 트리 (단계 1, 일명 &quot;원래&quot;) 및 병합하려는 두 나무 (각각 2 단계 및 3 단계)를 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="30c34ea4528b5e99d721b2ada273c08402f70a1d" translate="yes" xml:space="preserve">
          <source>Object Traversal</source>
          <target state="translated">객체 순회</target>
        </trans-unit>
        <trans-unit id="e07348665c9e3f452362a58c36e1f55665279269" translate="yes" xml:space="preserve">
          <source>Object access and manipulation</source>
          <target state="translated">객체 접근 및 조작</target>
        </trans-unit>
        <trans-unit id="d963c54afefdbe29bbc1f0380d42869afd8a753b" translate="yes" xml:space="preserve">
          <source>Object size identified by &amp;lt;object&amp;gt; is given in bytes, and right-justified with minimum width of 7 characters. Object size is given only for blobs (file) entries; for other entries &lt;code&gt;-&lt;/code&gt; character is used in place of size.</source>
          <target state="translated">&amp;lt;object&amp;gt;로 식별 된 객체 크기는 바이트 단위로 제공되며 최소 너비는 7 자입니다. 오브젝트 크기는 Blob (파일) 항목에 대해서만 제공됩니다. 다른 항목에 대해 &lt;code&gt;-&lt;/code&gt; 문자 크기 대신에 사용된다.</target>
        </trans-unit>
        <trans-unit id="5a755e02f9fddc8d9863cff303858fc5c0963f4b" translate="yes" xml:space="preserve">
          <source>Object storage format</source>
          <target state="translated">객체 저장 형식</target>
        </trans-unit>
        <trans-unit id="4410a56144704dcadb0adeabc1f66b086332a778" translate="yes" xml:space="preserve">
          <source>Object store associated with this repository. Usually an object store is self sufficient (i.e. all the objects that are referred to by an object found in it are also found in it), but there are a few ways to violate it.</source>
          <target state="translated">이 저장소와 연관된 오브젝트 저장소 일반적으로 오브젝트 저장소는 충분하지만 (즉, 오브젝트에있는 오브젝트가 참조하는 모든 오브젝트도 해당 오브젝트에 있습니다),이를 위반하는 몇 가지 방법이 있습니다.</target>
        </trans-unit>
        <trans-unit id="66c888d10ab6a46198fcec7325df97ad7688050e" translate="yes" xml:space="preserve">
          <source>Object types</source>
          <target state="translated">객체 유형</target>
        </trans-unit>
        <trans-unit id="397880af9235fafbc028a684c78f613458679a72" translate="yes" xml:space="preserve">
          <source>Objects that already exist in the repository will &lt;strong&gt;not&lt;/strong&gt; be unpacked from the packfile. Therefore, nothing will be unpacked if you use this command on a packfile that exists within the target repository.</source>
          <target state="translated">저장소에 이미 존재하는 오브젝트 는 팩 파일에서 압축 해제 &lt;strong&gt;되지 않습니다&lt;/strong&gt; . 따라서 대상 리포지토리 내에있는 팩 파일에서이 명령을 사용하면 압축이 풀리지 않습니다.</target>
        </trans-unit>
        <trans-unit id="f90e1faea66f4ee07afc15b9cfbe6b37aebe1076" translate="yes" xml:space="preserve">
          <source>Objects unreachable from the refs in packs named with --unpacked= option are added to the resulting pack, in addition to the reachable objects that are not in packs marked with *.keep files. This implies &lt;code&gt;--revs&lt;/code&gt;.</source>
          <target state="translated">--unpacked = 옵션으로 이름이 지정된 팩의 참조에서 도달 할 수없는 객체는 * .keep 파일로 표시된 팩에없는 도달 가능한 객체 외에 결과 팩에 추가됩니다. 이것은 &lt;code&gt;--revs&lt;/code&gt; 를 의미 합니다 .</target>
        </trans-unit>
        <trans-unit id="c4b47085e458e48bb4b0605ca6d2f6a3cc7755c2" translate="yes" xml:space="preserve">
          <source>Obsolete for: &lt;a href=&quot;#def_index&quot;&gt;index&lt;/a&gt;.</source>
          <target state="translated">사용되지 않습니다 : &lt;a href=&quot;#def_index&quot;&gt;index&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="d42a49317326d6b79f20beebf76935d065ccac7f" translate="yes" xml:space="preserve">
          <source>Obviously, endless variations are possible; for example, to see all commits reachable from some head but not from any tag in the repository:</source>
          <target state="translated">분명히 끝없는 변형이 가능합니다. 예를 들어 리포지토리의 태그가 아닌 일부 헤드에서 도달 가능한 모든 커밋을 보려면</target>
        </trans-unit>
        <trans-unit id="80e98962116f1f595b28a3f430e4b1f9c4dbde82" translate="yes" xml:space="preserve">
          <source>Occasionally, the maintainer may get merge conflicts when they try to pull changes from downstream. In this case, they can ask downstream to do the merge and resolve the conflicts themselves (perhaps they will know better how to resolve them). It is one of the rare cases where downstream &lt;code&gt;should&lt;/code&gt; merge from upstream.</source>
          <target state="translated">때때로, 관리자는 다운 스트림에서 변경 사항을 가져 오려고 할 때 병합 충돌이 발생할 수 있습니다. 이 경우 다운 스트림에서 병합을 수행하고 충돌 자체를 해결하도록 요청할 수 있습니다 (아마도 충돌 해결 방법을 더 잘 알고있을 것입니다). 다운 스트림 &lt;code&gt;should&lt;/code&gt; 업스트림에서 병합 되어야 하는 드문 경우 중 하나입니다 .</target>
        </trans-unit>
        <trans-unit id="7c4df738049a7589e8637595f08e890f6ad9d98e" translate="yes" xml:space="preserve">
          <source>Of course some kind of software is developed, then used during some time without being improved on much, and then finally thrown away. In this case, of course, regressions may not be a big problem. But on the other hand, there is a lot of big software that is continually developed and maintained during years or even tens of years by a lot of people. And as there are often many people who depend (sometimes critically) on such software, regressions are a really big problem.</source>
          <target state="translated">물론 어떤 종류의 소프트웨어가 개발되어 일정 기간 동안 많이 개선되지 않고 사용 된 다음 마침내 버려집니다. 물론이 경우에는 회귀가 큰 문제가되지 않을 수 있습니다. 그러나 다른 한편으로, 많은 사람들에 의해 수십 년 또는 수십 년 동안 지속적으로 개발되고 유지되는 많은 큰 소프트웨어가 있습니다. 이러한 소프트웨어에 의존하는 사람들이 종종 있기 때문에 회귀는 정말 큰 문제입니다.</target>
        </trans-unit>
        <trans-unit id="19fce424b8331b64c65b8a6acafb03304b015bfc" translate="yes" xml:space="preserve">
          <source>Of course the &quot;bad&quot; commit cannot be an ancestor of a &quot;good&quot; commit, because the ancestors of the good commits are supposed to be &quot;good&quot;. And all the &quot;good&quot; commits must be related to the bad commit. They cannot be on a branch that has no link with the branch of the &quot;bad&quot; commit. But it is possible for a good commit to be related to a bad commit and yet not be neither one of its ancestor nor one of its descendants.</source>
          <target state="translated">물론 &quot;나쁜&quot;커밋은 &quot;좋은&quot;커밋의 조상이 될 수 없습니다. 좋은 커밋의 조상은 &quot;좋은&quot;것으로 간주되기 때문입니다. 그리고 모든 &quot;좋은&quot;커밋은 나쁜 커밋과 관련이 있어야합니다. &quot;나쁜&quot;커밋의 분기와 연결되지 않은 분기에는있을 수 없습니다. 그러나 좋은 커밋은 나쁜 커밋과 관련이있을 수 있지만 아직 그 조상이나 후손이 아닙니다.</target>
        </trans-unit>
        <trans-unit id="7c78c10d5c75907a546f96553e9802bb23f4c982" translate="yes" xml:space="preserve">
          <source>Of course, there may be more than one answer&amp;mdash;​if the history branched after commit e05db0fd, then there could be multiple &quot;earliest&quot; tagged releases.</source>
          <target state="translated">물론 커밋 e05db0fd 이후 히스토리가 분기 된 경우 여러 개의 &quot;초기&quot;태그가 지정된 릴리스가있을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="bc73231ef0df798acd7604c5e90f5ea460992bab" translate="yes" xml:space="preserve">
          <source>Often people use &lt;code&gt;git pull&lt;/code&gt; without giving any parameter. Traditionally, this has been equivalent to saying &lt;code&gt;git pull
origin&lt;/code&gt;. However, when configuration &lt;code&gt;branch.&amp;lt;name&amp;gt;.remote&lt;/code&gt; is present while on branch &lt;code&gt;&amp;lt;name&amp;gt;&lt;/code&gt;, that value is used instead of &lt;code&gt;origin&lt;/code&gt;.</source>
          <target state="translated">종종 사람들은 매개 변수를 지정하지 않고 &lt;code&gt;git pull&lt;/code&gt; 을 사용 합니다. 전통적으로 이것은 &lt;code&gt;git pull origin&lt;/code&gt; 을 말하는 것과 같습니다 . 구성 그러나 &lt;code&gt;branch.&amp;lt;name&amp;gt;.remote&lt;/code&gt; 지점에 존재하는 동안에 인 &lt;code&gt;&amp;lt;name&amp;gt;&lt;/code&gt; , 그 값이 대신 사용된다 &lt;code&gt;origin&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="813c6a487fc92be3bf23c6677bbfade25d37be89" translate="yes" xml:space="preserve">
          <source>Often the current branch head is an ancestor of the named commit. This is the most common case especially when invoked from &lt;code&gt;git pull&lt;/code&gt;: you are tracking an upstream repository, you have committed no local changes, and now you want to update to a newer upstream revision. In this case, a new commit is not needed to store the combined history; instead, the &lt;code&gt;HEAD&lt;/code&gt; (along with the index) is updated to point at the named commit, without creating an extra merge commit.</source>
          <target state="translated">종종 현재 브랜치 헤드는 명명 된 커밋의 조상입니다. 이것은 특히 &lt;code&gt;git pull&lt;/code&gt; 에서 호출 될 때 가장 일반적인 경우입니다 . 업스트림 리포지토리를 추적하고 로컬 변경 사항을 커밋하지 않았으므로 이제 새로운 업스트림 버전으로 업데이트하려고합니다. 이 경우 결합 된 히스토리를 저장하기 위해 새로운 커밋이 필요하지 않습니다. 대신 &lt;code&gt;HEAD&lt;/code&gt; (인덱스와 함께)는 추가 병합 커밋을 만들지 않고 명명 된 커밋을 가리 키도록 업데이트됩니다.</target>
        </trans-unit>
        <trans-unit id="bc22c639538c04ca7d5608268e4dc9b34f324581" translate="yes" xml:space="preserve">
          <source>Often the overview of the change is useful to get a feel of each step</source>
          <target state="translated">종종 변화의 개요는 각 단계의 느낌을 얻는 데 유용합니다</target>
        </trans-unit>
        <trans-unit id="a0ef5be0d5f74372c2549cc7906cdb110a910654" translate="yes" xml:space="preserve">
          <source>Often, &quot;please pull&quot; messages on the mailing list just provide two pieces of information: a repo URL and a branch name; this is designed to be easily cut&amp;amp;pasted at the end of a &lt;code&gt;git fetch&lt;/code&gt; command line:</source>
          <target state="translated">종종 메일 링리스트에있는 &quot;Please pull&quot;메시지는 repo URL과 branch name; 이것은 &lt;code&gt;git fetch&lt;/code&gt; 명령 줄 의 끝에서 쉽게 잘라내어 붙여 넣을 수 있도록 설계되었습니다 .</target>
        </trans-unit>
        <trans-unit id="b90f5f996d698883902ffd1dba32d6eea369ef9a" translate="yes" xml:space="preserve">
          <source>Older documentation written before the packed-refs mechanism was introduced may still say things like &quot;.git/refs/heads/&amp;lt;branch&amp;gt; file exists&quot; when it means &quot;branch &amp;lt;branch&amp;gt; exists&quot;.</source>
          <target state="translated">압축 참조 메커니즘이 도입되기 전에 작성된 이전 문서는 &quot;branch &amp;lt;branch&amp;gt; 존재&quot;를 의미 할 때 &quot;.git / refs / heads / &amp;lt;branch&amp;gt; 파일이 있음&quot;과 같은 내용을 계속 표시 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a148aab8f38b980de65dd5f412fc336ae5d855f6" translate="yes" xml:space="preserve">
          <source>Older scripts may depend on the historical behaviour of not allowing the user to edit the merge log message. They will see an editor opened when they run &lt;code&gt;git merge&lt;/code&gt;. To make it easier to adjust such scripts to the updated behaviour, the environment variable &lt;code&gt;GIT_MERGE_AUTOEDIT&lt;/code&gt; can be set to &lt;code&gt;no&lt;/code&gt; at the beginning of them.</source>
          <target state="translated">이전 스크립트는 사용자가 병합 로그 메시지를 편집 할 수 없도록하는 이전 동작에 따라 달라질 수 있습니다. &lt;code&gt;git merge&lt;/code&gt; 를 실행할 때 편집기가 열린 것을 볼 수 있습니다 . 이러한 스크립트를 업데이트 된 동작에보다 쉽게 ​​조정하기 위해 시작시 환경 변수 &lt;code&gt;GIT_MERGE_AUTOEDIT&lt;/code&gt; 를 &lt;code&gt;no&lt;/code&gt; 로 설정할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="3a027c8ab6aede7960dbe3d141d016ee3e6589ef" translate="yes" xml:space="preserve">
          <source>Older versions of &lt;code&gt;meld&lt;/code&gt; do not support the &lt;code&gt;--output&lt;/code&gt; option. Git will attempt to detect whether &lt;code&gt;meld&lt;/code&gt; supports &lt;code&gt;--output&lt;/code&gt; by inspecting the output of &lt;code&gt;meld --help&lt;/code&gt;. Configuring &lt;code&gt;mergetool.meld.hasOutput&lt;/code&gt; will make Git skip these checks and use the configured value instead. Setting &lt;code&gt;mergetool.meld.hasOutput&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; tells Git to unconditionally use the &lt;code&gt;--output&lt;/code&gt; option, and &lt;code&gt;false&lt;/code&gt; avoids using &lt;code&gt;--output&lt;/code&gt;.</source>
          <target state="translated">이전 버전의 &lt;code&gt;meld&lt;/code&gt; 는 &lt;code&gt;--output&lt;/code&gt; 옵션을 지원하지 않습니다 . Git은 &lt;code&gt;meld --help&lt;/code&gt; 의 출력을 검사하여 &lt;code&gt;meld&lt;/code&gt; 가 &lt;code&gt;--output&lt;/code&gt; 을 지원 하는지 여부를 감지하려고 시도합니다 . &lt;code&gt;mergetool.meld.hasOutput&lt;/code&gt; 을 구성 하면 Git이 이러한 검사를 건너 뛰고 구성된 값을 대신 사용합니다. &lt;code&gt;mergetool.meld.hasOutput&lt;/code&gt; 을 &lt;code&gt;true&lt;/code&gt; 로 설정하면 Git에 무조건 &lt;code&gt;--output&lt;/code&gt; 옵션을 사용 하고 &lt;code&gt;false&lt;/code&gt; 는 &lt;code&gt;--output&lt;/code&gt; 사용을 피 합니다.</target>
        </trans-unit>
        <trans-unit id="8511fe9d48b84ff3883d162d35ccd3dcba224454" translate="yes" xml:space="preserve">
          <source>Older versions of Git (before 2.20) documented that the object names list should be sorted. This was never a requirement, the object names could appear in any order, but when reading the list we tracked whether the list was sorted for the purposes of an internal binary search implementation, which could save itself some work with an already sorted list. Unless you had a humongous list there was no reason to go out of your way to pre-sort the list. After Git version 2.20 a hash implementation is used instead, so there&amp;rsquo;s now no reason to pre-sort the list.</source>
          <target state="translated">이전 버전의 Git (2.20 이전)에서는 객체 이름 목록을 정렬해야한다고 설명했습니다. 이것은 요구 사항이 아니며 객체 이름이 어떤 순서로나 나타날 수 있지만 목록을 읽을 때 내부 이진 검색 구현을 위해 목록이 정렬되었는지 추적하여 이미 정렬 된 목록으로 일부 작업을 저장할 수 있습니다. 당신이 엄청난 목록을 가지고 있지 않은 한, 목록을 미리 정렬하는 길을 벗어날 이유가 없었습니다. Git 버전 2.20 이후에는 해시 구현이 대신 사용되므로 이제 목록을 사전 정렬 할 이유가 없습니다.</target>
        </trans-unit>
        <trans-unit id="c51aaa3680fede028efcceee261b4919c277f552" translate="yes" xml:space="preserve">
          <source>Omit any commit that introduces the same change as another commit on the &amp;ldquo;other side&amp;rdquo; when the set of commits are limited with symmetric difference.</source>
          <target state="translated">일련의 커밋이 대칭 적 차이로 제한 될 때&amp;ldquo;다른 쪽&amp;rdquo;의 다른 커밋과 동일한 변경을 일으키는 커밋은 생략하십시오.</target>
        </trans-unit>
        <trans-unit id="e35d3ce0c9ea9ff6d661fcb1cbc8e08ffef97df6" translate="yes" xml:space="preserve">
          <source>Omit diff output for unmerged entries and just show &quot;Unmerged&quot;. Can be used only when comparing the working tree with the index.</source>
          <target state="translated">병합되지 않은 항목에 대해서는 diff 출력을 생략하고 &quot;Unmerged&quot;만 표시하십시오. 작업 트리를 인덱스와 비교할 때만 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3138b0b10501de06a44e08d0de4b10a83646644b" translate="yes" xml:space="preserve">
          <source>Omit objects that are known to be in the promisor remote. (This option has the purpose of operating only on locally created objects, so that when we repack, we still maintain a distinction between locally created objects [without .promisor] and objects from the promisor remote [with .promisor].) This is used with partial clone.</source>
          <target state="translated">Promisor Remote에있는 것으로 알려진 개체는 생략하십시오. (이 옵션은 로컬로 생성 된 객체에서만 작동하는 목적을 가지고 있으므로 리 패킹 할 때 로컬로 생성 된 객체 (.promisor없이)와 Promisor Remote의 객체 (.promisor)로 구별을 유지합니다.) 부분 복제.</target>
        </trans-unit>
        <trans-unit id="fcfe3e3e988e33991f3ebb33b70ee9c58a79e5d0" translate="yes" xml:space="preserve">
          <source>Omit the preimage for deletes, i.e. print only the header but not the diff between the preimage and &lt;code&gt;/dev/null&lt;/code&gt;. The resulting patch is not meant to be applied with &lt;code&gt;patch&lt;/code&gt; or &lt;code&gt;git apply&lt;/code&gt;; this is solely for people who want to just concentrate on reviewing the text after the change. In addition, the output obviously lacks enough information to apply such a patch in reverse, even manually, hence the name of the option.</source>
          <target state="translated">삭제를 위해 사전 이미지를 생략하십시오. 즉, 사전 이미지와 &lt;code&gt;/dev/null&lt;/code&gt; 사이의 diff는 제외하고 헤더 만 인쇄하십시오 . 결과 패치는 &lt;code&gt;patch&lt;/code&gt; 또는 &lt;code&gt;git apply&lt;/code&gt; 와 함께 적용되지 않습니다 . 이것은 변경 후 텍스트를 검토하는 데 집중하려는 사람들에게만 해당됩니다. 또한 출력에는 이러한 패치를 수동으로도 적용 할 수있는 충분한 정보가 없으므로 옵션 이름이 분명합니다.</target>
        </trans-unit>
        <trans-unit id="2c239b325c52048ed0e0df682e63161da794c522" translate="yes" xml:space="preserve">
          <source>Omitting &lt;code&gt;&amp;lt;branch&amp;gt;&lt;/code&gt; detaches &lt;code&gt;HEAD&lt;/code&gt; at the tip of the current branch.</source>
          <target state="translated">&lt;code&gt;&amp;lt;branch&amp;gt;&lt;/code&gt; 를 생략 하면 현재 분기의 끝에서 &lt;code&gt;HEAD&lt;/code&gt; 가 분리 됩니다.</target>
        </trans-unit>
        <trans-unit id="6f08ea1a85b441d7cdb4b9da4840e51d4a63074c" translate="yes" xml:space="preserve">
          <source>Omitting the &lt;code&gt;from&lt;/code&gt; command in the first commit of a new branch will cause fast-import to create that commit with no ancestor. This tends to be desired only for the initial commit of a project. If the frontend creates all files from scratch when making a new branch, a &lt;code&gt;merge&lt;/code&gt; command may be used instead of &lt;code&gt;from&lt;/code&gt; to start the commit with an empty tree. Omitting the &lt;code&gt;from&lt;/code&gt; command on existing branches is usually desired, as the current commit on that branch is automatically assumed to be the first ancestor of the new commit.</source>
          <target state="translated">새 브랜치를 처음 커밋 할 때 &lt;code&gt;from&lt;/code&gt; 명령을 생략하면 조상없이 해당 커밋을 빠르게 가져올 수 있습니다. 이것은 프로젝트의 초기 커밋에만 요구되는 경향이 있습니다. 새로운 지점을 만들 때 프론트 엔드 처음부터 모든 파일을 생성한다면, &lt;code&gt;merge&lt;/code&gt; 명령을 대신 사용할 수 있습니다 &lt;code&gt;from&lt;/code&gt; (가) 빈 트리 커밋 시작합니다. 해당 분기의 현재 커밋이 자동으로 새 커밋의 첫 번째 조상으로 간주되므로 기존 분기 &lt;code&gt;from&lt;/code&gt; 명령을 생략하는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="2e6ae0a1101e66bbdd1aff8c2583b81c23208b83" translate="yes" xml:space="preserve">
          <source>On Automatic following</source>
          <target state="translated">자동 팔로 잉</target>
        </trans-unit>
        <trans-unit id="82b4aa90bf6690a7ed8e3558248667b070567fb7" translate="yes" xml:space="preserve">
          <source>On Backdating Tags</source>
          <target state="translated">태그 업데이트 중</target>
        </trans-unit>
        <trans-unit id="52c1ff7f8dbe6e1f6639547a437fb78c51994ab9" translate="yes" xml:space="preserve">
          <source>On Re-tagging</source>
          <target state="translated">태그 추가시</target>
        </trans-unit>
        <trans-unit id="a3e5a575b7ca5dced5a48ec2289cb57e77edaa64" translate="yes" xml:space="preserve">
          <source>On an inefficient filesystem with &lt;code&gt;core.ignorestat&lt;/code&gt; set</source>
          <target state="translated">&lt;code&gt;core.ignorestat&lt;/code&gt; 가 설정된 비효율적 인 파일 시스템에서</target>
        </trans-unit>
        <trans-unit id="ccf984a0700972bcd62e51c87e569c1158e56007" translate="yes" xml:space="preserve">
          <source>On large repositories, Git depends on compression to keep the history information from taking up too much space on disk or in memory. Some Git commands may automatically run &lt;a href=&quot;git-gc&quot;&gt;git-gc[1]&lt;/a&gt;, so you don&amp;rsquo;t have to worry about running it manually. However, compressing a large repository may take a while, so you may want to call &lt;code&gt;gc&lt;/code&gt; explicitly to avoid automatic compression kicking in when it is not convenient.</source>
          <target state="translated">큰 리포지토리에서 Git은 기록 정보가 디스크 나 메모리에서 너무 많은 공간을 차지하지 않도록 압축에 의존합니다. 일부 Git 명령은 자동으로 &lt;a href=&quot;git-gc&quot;&gt;git-gc [1]을&lt;/a&gt; 실행할 수 있으므로 수동으로 실행할 필요가 없습니다. 그러나 큰 저장소를 압축하는 데 시간이 오래 걸릴 수 있으므로 편리하지 않을 때 자동 압축이 시작되지 않도록 &lt;code&gt;gc&lt;/code&gt; 를 명시 적으로 호출 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="d4d8aed3bf55796608219c0adac254008695a3f9" translate="yes" xml:space="preserve">
          <source>On some file system/operating system combinations, this is unreliable. Set this config setting to &lt;code&gt;rename&lt;/code&gt; there; However, This will remove the check that makes sure that existing object files will not get overwritten.</source>
          <target state="translated">일부 파일 시스템 / 운영 체제 조합에서는 신뢰할 수 없습니다. 이 구성 설정을 &lt;code&gt;rename&lt;/code&gt; 하여 이름 을 바꿉니다 . 그러나 이렇게하면 기존 개체 파일을 덮어 쓰지 않는 확인이 제거됩니다.</target>
        </trans-unit>
        <trans-unit id="5895edccc183158d9e3740d2cebb6ada4fc33444" translate="yes" xml:space="preserve">
          <source>On submit, re-author changes to reflect the Git author, regardless of who invokes &lt;code&gt;git p4 submit&lt;/code&gt;.</source>
          <target state="translated">제출시 &lt;code&gt;git p4 submit&lt;/code&gt; 를 호출 한 사람에 관계없이 Git 작성자를 반영하도록 변경 사항을 다시 작성하십시오 .</target>
        </trans-unit>
        <trans-unit id="625dc8e72565a5aa6c893e4054fd5a7bd4cd4c77" translate="yes" xml:space="preserve">
          <source>On success, the command returns the exit code 0.</source>
          <target state="translated">성공하면 명령이 종료 코드 0을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="990e4d4ec388fa2b56426ae37da6b01c179599b8" translate="yes" xml:space="preserve">
          <source>On success, the exit status is &lt;code&gt;0&lt;/code&gt;. If the filter can&amp;rsquo;t find any commits to rewrite, the exit status is &lt;code&gt;2&lt;/code&gt;. On any other error, the exit status may be any other non-zero value.</source>
          <target state="translated">성공하면 종료 상태는 &lt;code&gt;0&lt;/code&gt; 입니다. 필터가 다시 쓰기 커밋을 찾을 수 없으면 종료 상태는 &lt;code&gt;2&lt;/code&gt; 입니다. 다른 오류에서 종료 상태는 0이 아닌 다른 값일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="9b26f7834b511fe2fcda898a4f6a6ea24bf02deb" translate="yes" xml:space="preserve">
          <source>On the filesystem, a submodule usually (but not always - see FORMS below) consists of (i) a Git directory located under the &lt;code&gt;$GIT_DIR/modules/&lt;/code&gt; directory of its superproject, (ii) a working directory inside the superproject&amp;rsquo;s working directory, and a &lt;code&gt;.git&lt;/code&gt; file at the root of the submodule&amp;rsquo;s working directory pointing to (i).</source>
          <target state="translated">파일 시스템에서 하위 모듈은 일반적으로 (항상 그런 것은 아니지만 아래의 FORMS 참조) (i) 수퍼 프로젝트 의 &lt;code&gt;$GIT_DIR/modules/&lt;/code&gt; 디렉토리 아래에있는 Git 디렉토리 , (ii) 수퍼 프로젝트의 작업 디렉토리 내부의 작업 디렉토리 및 (i)를 가리키는 서브 모듈 작업 디렉토리의 루트에 있는 &lt;code&gt;.git&lt;/code&gt; 파일</target>
        </trans-unit>
        <trans-unit id="4db9025909f7f5bf5e13acbeaf805aa54cd01729" translate="yes" xml:space="preserve">
          <source>On the other hand if you do this often, then it can be worth having scripts to avoid too much typing.</source>
          <target state="translated">반면에 자주이 작업을 수행하면 너무 많은 입력을 피하기 위해 스크립트를 작성하는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="683649c177c2041eda8a2d9bcca87e40a04a531c" translate="yes" xml:space="preserve">
          <source>On the other hand, if instead of merging at C you had rebased the history between Z to B on top of A, you would have gotten this linear history:</source>
          <target state="translated">반면에 C에서 병합하는 대신 A의 상단에서 Z 사이의 기록을 다시 기반으로 한 경우 다음 선형 기록을 얻었을 것입니다.</target>
        </trans-unit>
        <trans-unit id="0322f18dd0193743bffa03c418d12c6fe0b24261" translate="yes" xml:space="preserve">
          <source>On the other hand, if you are fetching because you would want a one-shot merge from somebody else, you typically do not want to get tags from there. This happens more often for people near the toplevel but not limited to them. Mere mortals when pulling from each other do not necessarily want to automatically get private anchor point tags from the other person.</source>
          <target state="translated">반면에 다른 사람으로부터 원샷 병합을 원하기 때문에 가져 오는 경우 일반적으로 거기에서 태그를 가져오고 싶지 않습니다. 이것은 최상위에 가까운 사람들에게 더 자주 발생하지만 그들에 국한되지는 않습니다. 서로를 끌어낼 때 단순한 필사자가 반드시 다른 사람으로부터 개인 앵커 포인트 태그를 자동으로 얻고 싶지는 않습니다.</target>
        </trans-unit>
        <trans-unit id="ff26b6c1b15a595913b474bb862db9261a722064" translate="yes" xml:space="preserve">
          <source>On the other hand, when &lt;code&gt;git gc&lt;/code&gt; runs concurrently with another process, there is a risk of it deleting an object that the other process is using but hasn&amp;rsquo;t created a reference to. This may just cause the other process to fail or may corrupt the repository if the other process later adds a reference to the deleted object. Git has two features that significantly mitigate this problem:</source>
          <target state="translated">반면에 &lt;code&gt;git gc&lt;/code&gt; 가 다른 프로세스와 동시에 실행될 때 다른 프로세스가 사용하고 있지만 참조를 만들지 않은 객체를 삭제할 위험이 있습니다. 다른 프로세스가 나중에 삭제 된 개체에 대한 참조를 추가하면 다른 프로세스가 실패하거나 리포지토리가 손상 될 수 있습니다. Git에는이 문제를 크게 완화시키는 두 가지 기능이 있습니다.</target>
        </trans-unit>
        <trans-unit id="9cc6a0108c9ca30d35fc16f0e158699698e2687d" translate="yes" xml:space="preserve">
          <source>On the plus side, distributed revision control systems can much better integrate with external sources. In a centralized model, a single arbitrary snapshot of the external project is exported from its own revision control and then imported into the local revision control on a vendor branch. All the history is hidden. With distributed revision control you can clone the entire external history and much more easily follow development and re-merge local changes.</source>
          <target state="translated">또한, 분산 개정 제어 시스템은 외부 소스와 훨씬 잘 통합 될 수 있습니다. 중앙 집중식 모델에서 외부 프로젝트의 임의의 단일 스냅 샷은 자체 개정 제어에서 내 보낸 다음 공급 업체 지점의 로컬 개정 제어로 가져옵니다. 모든 역사는 숨겨져 있습니다. 분산 개정 제어를 사용하면 전체 외부 히스토리를 복제하고 개발을 훨씬 쉽게 따르고 로컬 변경 사항을 다시 병합 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="90597c320571938c2a30a9ec587f181632e3da9c" translate="yes" xml:space="preserve">
          <source>On the receiving side, failing fsckObjects will make those objects unreachable, see &quot;QUARANTINE ENVIRONMENT&quot; in &lt;a href=&quot;git-receive-pack&quot;&gt;git-receive-pack[1]&lt;/a&gt;. On the fetch side, malformed objects will instead be left unreferenced in the repository.</source>
          <target state="translated">수신 측에서 fsckObjects가 실패하면 해당 오브젝트에 도달 할 수 없게됩니다. &lt;a href=&quot;git-receive-pack&quot;&gt;git-receive-pack [1]의&lt;/a&gt; &quot;QUARANTINE ENVIRONMENT&quot;를 참조하십시오 . 반입 측에서는 잘못된 형식의 객체가 리포지토리에서 참조되지 않은 상태로 유지됩니다.</target>
        </trans-unit>
        <trans-unit id="0cb32cbc06583a961d1463cba3f54ceac091ac9b" translate="yes" xml:space="preserve">
          <source>Once a patch completes the great cycle (moving from test to release, then pulled by Linus, and finally coming back into your local &lt;code&gt;origin/master&lt;/code&gt; branch), the branch for this change is no longer needed. You detect this when the output from:</source>
          <target state="translated">패치가 큰주기를 완료하면 (테스트에서 릴리스로 이동 한 다음 Linus가 가져 와서 최종적으로 로컬 &lt;code&gt;origin/master&lt;/code&gt; 브랜치로 돌아옴)이 변경에 대한 브랜치는 더 이상 필요하지 않습니다. 다음에서 출력 할 때이를 감지합니다.</target>
        </trans-unit>
        <trans-unit id="b9ebb68ceda33b5f55394a76815abe93f554d5a0" translate="yes" xml:space="preserve">
          <source>Once again, check to verify that you&amp;rsquo;ve included what you want to. You may also wish to verify that git diff doesn&amp;rsquo;t show any remaining changes to be committed later.</source>
          <target state="translated">다시 한 번, 원하는 것을 포함했는지 확인하십시오. git diff가 나중에 커밋 할 나머지 변경 사항을 표시하지 않는지 확인할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="90e05562a65001025b0b72d96c6a4e4b947387b5" translate="yes" xml:space="preserve">
          <source>Once housekeeping is triggered by exceeding the limits of configuration options such as &lt;code&gt;gc.auto&lt;/code&gt; and &lt;code&gt;gc.autoPackLimit&lt;/code&gt;, all other housekeeping tasks (e.g. rerere, working trees, reflog&amp;hellip;​) will be performed as well.</source>
          <target state="translated">&lt;code&gt;gc.auto&lt;/code&gt; 및 &lt;code&gt;gc.autoPackLimit&lt;/code&gt; 와 같은 구성 옵션의 한계를 초과하여 하우스 키핑이 시작되면 다른 모든 하우스 키핑 작업 (예 : rerere, working tree, reflog&amp;hellip;)도 수행됩니다.</target>
        </trans-unit>
        <trans-unit id="e4fac50f608beca9583acae6e66b5b839bc7af82" translate="yes" xml:space="preserve">
          <source>Once satisfied with the hunks you want to include, you should verify what has been prepared for the first commit by using &lt;code&gt;git diff --cached&lt;/code&gt;. This shows all the changes that have been moved into the index and are about to be committed.</source>
          <target state="translated">포함하려는 덩어리에 만족하면 &lt;code&gt;git diff --cached&lt;/code&gt; 를 사용하여 첫 번째 커밋을 위해 준비된 내용을 확인해야합니다 . 인덱스로 이동되어 커밋 될 모든 변경 사항이 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="3dd9fb6970c316fd22de16c64bf93a0699f63f8d" translate="yes" xml:space="preserve">
          <source>Once the commits are ready to be sent, run the following command:</source>
          <target state="translated">커밋을 전송할 준비가되면 다음 명령을 실행하십시오.</target>
        </trans-unit>
        <trans-unit id="bc0e79bf062114aed97a847d2dbf78bde74bcedc" translate="yes" xml:space="preserve">
          <source>Once the index has been created, the list of object names is sorted and the SHA-1 hash of that list is printed to stdout. If --stdin was also used then this is prefixed by either &quot;pack\t&quot;, or &quot;keep\t&quot; if a new .keep file was successfully created. This is useful to remove a .keep file used as a lock to prevent the race with &lt;code&gt;git repack&lt;/code&gt; mentioned above.</source>
          <target state="translated">색인이 작성되면 오브젝트 이름 목록이 정렬되고 해당 목록의 SHA-1 해시가 stdout에 인쇄됩니다. --stdin도 사용 된 경우 새 .keep 파일이 성공적으로 작성된 경우 접두어는 &quot;pack \ t&quot;또는 &quot;keep \ t&quot;입니다. 이것은 위에서 언급 한 &lt;code&gt;git repack&lt;/code&gt; 과의 경쟁을 막기 위해 잠금 장치로 사용되는 .keep 파일을 제거하는 데 유용합니다 .</target>
        </trans-unit>
        <trans-unit id="267c8839170c35911e5505454167dce43ef8461e" translate="yes" xml:space="preserve">
          <source>Once the index is updated with the results of the conflict resolution, instead of creating a new commit, just run</source>
          <target state="translated">충돌을 해결 한 결과로 인덱스가 업데이트되면 새로운 커밋을 생성하는 대신 다음을 실행하십시오.</target>
        </trans-unit>
        <trans-unit id="dce83a819a58902526be63ab88beb478ade1a830" translate="yes" xml:space="preserve">
          <source>Once tracking a Subversion repository (with any of the above methods), the Git repository can be updated from Subversion by the &lt;code&gt;fetch&lt;/code&gt; command and Subversion updated from Git by the &lt;code&gt;dcommit&lt;/code&gt; command.</source>
          <target state="translated">Subversion 저장소 (위의 방법 중 하나를 사용하여)를 추적하면 &lt;code&gt;fetch&lt;/code&gt; 명령으로 Git 저장소를 Subversion에서 업데이트하고 &lt;code&gt;dcommit&lt;/code&gt; 명령으로 Git 에서 Subversion을 업데이트 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="f7c323cf6aca82334469eb4ac31bb75f493bfcb2" translate="yes" xml:space="preserve">
          <source>Once you fetch from the remote repository, you &lt;code&gt;merge&lt;/code&gt; that with your current branch.</source>
          <target state="translated">원격 저장소에서 가져 오면이를 현재 브랜치와 &lt;code&gt;merge&lt;/code&gt; 합니다.</target>
        </trans-unit>
        <trans-unit id="196d7a30344d61fce15a29277d1febbefab63366" translate="yes" xml:space="preserve">
          <source>Once you have packed objects, you do not need to leave the unpacked objects that are contained in the pack file anymore.</source>
          <target state="translated">팩형 오브젝트를 포장 한 후에는 팩 파일에 포함 된 언 팩형 오브젝트를 더 이상 그대로 둘 필요가 없습니다.</target>
        </trans-unit>
        <trans-unit id="19419c3fb2ffef21b9b034f5ca5d579751e9cffb" translate="yes" xml:space="preserve">
          <source>Once you have specified at least one bad and one good commit, &lt;code&gt;git
bisect&lt;/code&gt; selects a commit in the middle of that range of history, checks it out, and outputs something similar to the following:</source>
          <target state="translated">하나 이상의 잘못된 커밋과 하나의 좋은 커밋을 지정하면 &lt;code&gt;git bisect&lt;/code&gt; 는 해당 히스토리 범위의 중간에서 커밋을 선택하고 체크 아웃하고 다음과 유사한 것을 출력합니다.</target>
        </trans-unit>
        <trans-unit id="a222e7e00ea22df97bc019f6fbda7d4a739d08f0" translate="yes" xml:space="preserve">
          <source>Once you know the three trees you are going to merge (the one &quot;original&quot; tree, aka the common tree, and the two &quot;result&quot; trees, aka the branches you want to merge), you do a &quot;merge&quot; read into the index. This will complain if it has to throw away your old index contents, so you should make sure that you&amp;rsquo;ve committed those&amp;mdash;​in fact you would normally always do a merge against your last commit (which should thus match what you have in your current index anyway).</source>
          <target state="translated">병합 할 3 개의 나무 (하나의 &quot;원래&quot;나무, 일명 공통 트리 및 2 개의 &quot;결과&quot;나무, 병합하려는 가지)를 알고 나면 &quot;병합&quot;을 읽습니다. 인덱스. 이렇게하면 오래된 인덱스 내용을 버려야 할 경우 불만을 제기 할 수 있으므로 커밋했는지 확인해야합니다. 사실 일반적으로 항상 마지막 커밋에 대해 병합을 수행해야합니다. 어쨌든 현재 색인).</target>
        </trans-unit>
        <trans-unit id="2f6bdbc854c9f4a06850e81f40a40893a853f873" translate="yes" xml:space="preserve">
          <source>Once your commits are ready to be sent to the mailing list, run the following commands:</source>
          <target state="translated">커밋을 메일 링리스트로 보낼 준비가되면 다음 명령을 실행하십시오.</target>
        </trans-unit>
        <trans-unit id="1e3411b288c5ece442ec5affcc9ccff7867288ff" translate="yes" xml:space="preserve">
          <source>One can also modify context lines by staging them for removal (by converting &quot; &quot; to &quot;-&quot;) and adding a &quot;+&quot; line with the new content. Similarly, one can modify &quot;+&quot; lines for existing additions or modifications. In all cases, the new modification will appear reverted in the working tree.</source>
          <target state="translated">또한 &quot;&quot;를 &quot;-&quot;로 변환하여 제거 할 컨텍스트 줄을 준비하고 새 내용에 &quot;+&quot;줄을 추가하여 컨텍스트 줄을 수정할 수도 있습니다. 마찬가지로 기존 추가 또는 수정을 위해 &quot;+&quot;줄을 수정할 수 있습니다. 모든 경우에 새 수정 사항이 작업 트리에서 되돌려 나타납니다.</target>
        </trans-unit>
        <trans-unit id="cefda8701820e17ff3e5c1f9d74674c9ba3ca4b0" translate="yes" xml:space="preserve">
          <source>One feature worth pointing out is the three-way merge, which can help if you get conflicts: &lt;code&gt;git am -3&lt;/code&gt; will use index information contained in patches to figure out the merge base. See &lt;a href=&quot;git-am&quot;&gt;git-am[1]&lt;/a&gt; for other options.</source>
          <target state="translated">지적해야 할 기능 중 하나는 3 방향 병합인데, 충돌이 발생할 경우 도움이됩니다. &lt;code&gt;git am -3&lt;/code&gt; 은 패치에 포함 된 색인 정보를 사용하여 병합 기반을 파악합니다. 다른 옵션 은 &lt;a href=&quot;git-am&quot;&gt;git-am [1]&lt;/a&gt; 을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="91b115a828fd51fba09fc11d7213ae15c1c47544" translate="yes" xml:space="preserve">
          <source>One important aspect of Git is its distributed nature, which largely means there is no inherent &quot;upstream&quot; or &quot;downstream&quot; in the system. On the face of it, the above example might seem to indicate that the tag namespace is owned by the upper echelon of people and that tags only flow downwards, but that is not the case. It only shows that the usage pattern determines who are interested in whose tags.</source>
          <target state="translated">Git의 중요한 특징 중 하나는 분산 특성으로, 시스템에 고유 한 &quot;업스트림&quot;또는 &quot;다운 스트림&quot;이 없음을 의미합니다. 위의 예에서, 태그 네임 스페이스는 사람들의 상위 계층이 소유하고 태그는 아래쪽으로 만 흐르지 만 그렇지는 않다는 것을 나타낼 수 있습니다. 사용 패턴에 따라 태그에 관심이있는 사람이 결정된다는 것만 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="04ced8b13491984476dfed877ea62bd96c9df7a6" translate="yes" xml:space="preserve">
          <source>One major difference between &lt;code&gt;git submodule update&lt;/code&gt; and &lt;code&gt;git submodule add&lt;/code&gt; is that &lt;code&gt;git submodule update&lt;/code&gt; checks out a specific commit, rather than the tip of a branch. It&amp;rsquo;s like checking out a tag: the head is detached, so you&amp;rsquo;re not working on a branch.</source>
          <target state="translated">커다란 차이 중 하나 &lt;code&gt;git submodule update&lt;/code&gt; 와 &lt;code&gt;git submodule add&lt;/code&gt; 있다는 것입니다 &lt;code&gt;git submodule update&lt;/code&gt; 특정 밖으로 검사 오히려 나뭇 가지의 끝보다 커밋합니다. 태그를 확인하는 것과 같습니다. 헤드가 분리되어 분기에서 작업하고 있지 않습니다.</target>
        </trans-unit>
        <trans-unit id="8d6438f7bb62b577ed24501432d3010343f7c06f" translate="yes" xml:space="preserve">
          <source>One nice about &quot;git bisect&quot; is that it is not only a developer tool. It can effectively be used by QA people or even end users (if they have access to the source code or if they can get access to all the builds).</source>
          <target state="translated">&quot;git bisect&quot;의 장점 중 하나는 개발자 도구가 아니라는 것입니다. QA 직원이나 최종 사용자가 소스 코드에 액세스 할 수 있거나 모든 빌드에 액세스 할 수있는 경우 효과적으로 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="142f19dfe765b1c5ce574050578fa3bc8f7c4c07" translate="yes" xml:space="preserve">
          <source>One note: the special &lt;code&gt;master&lt;/code&gt; head is the default branch, which is why the &lt;code&gt;.git/HEAD&lt;/code&gt; file was created points to it even if it doesn&amp;rsquo;t yet exist. Basically, the &lt;code&gt;HEAD&lt;/code&gt; link is supposed to always point to the branch you are working on right now, and you always start out expecting to work on the &lt;code&gt;master&lt;/code&gt; branch.</source>
          <target state="translated">한 가지 참고 사항 : 특수 &lt;code&gt;master&lt;/code&gt; 헤드가 기본 분기이므로 &lt;code&gt;.git/HEAD&lt;/code&gt; 파일이 아직 생성되지 않은 경우에도 .git / HEAD 파일이 만들어졌습니다. 기본적으로 &lt;code&gt;HEAD&lt;/code&gt; 링크는 항상 현재 작업중인 지점을 가리키고 있으며 항상 &lt;code&gt;master&lt;/code&gt; 지점 에서 작업하기를 기대합니다 .</target>
        </trans-unit>
        <trans-unit id="29a0c8f350324f991b248dd3aa593e11f5862130" translate="yes" xml:space="preserve">
          <source>One obvious improvement to this algorithm would be to look for a commit that has an associated value near the one of the best bisection commit, and that is on another branch, before using the PRNG. Because if such a commit exists, then it is not very likely to be untestable too, so it will probably give more information than a nearly randomly chosen one.</source>
          <target state="translated">이 알고리즘의 명백한 개선점 중 하나는 PRNG를 사용하기 전에 가장 좋은 2 분할 커밋 중 하나에 관련 값이 있고 다른 분기에있는 커밋을 찾는 것입니다. 그러한 커밋이 존재하면 테스트 할 수 없을 가능성이 높기 때문에 거의 임의로 선택된 것보다 더 많은 정보를 제공 할 것입니다.</target>
        </trans-unit>
        <trans-unit id="e1159b72c8727d654a00df87bb5a62e68448d486" translate="yes" xml:space="preserve">
          <source>One of the following transports can be used to name the repository to download from:</source>
          <target state="translated">다음 전송 중 하나를 사용하여 다운로드 할 저장소의 이름을 지정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f2e9320213d36179f9f718d529b707eca70ac72d" translate="yes" xml:space="preserve">
          <source>One of the ideas of having a branch is that you do some (possibly experimental) work in it, and eventually merge it back to the main branch. So assuming you created the above &lt;code&gt;mybranch&lt;/code&gt; that started out being the same as the original &lt;code&gt;master&lt;/code&gt; branch, let&amp;rsquo;s make sure we&amp;rsquo;re in that branch, and do some work there.</source>
          <target state="translated">브랜치를 갖는 아이디어 중 하나는 (아마도 실험적인) 작업을 수행하고 결국 메인 브랜치로 다시 병합한다는 것입니다. 원래 &lt;code&gt;master&lt;/code&gt; 브랜치 와 동일한 것으로 시작 하는 위의 &lt;code&gt;mybranch&lt;/code&gt; 를 만들었다 고 가정하면 해당 브랜치에 있는지 확인하고 거기서 작업하십시오.</target>
        </trans-unit>
        <trans-unit id="07b5c446feb269c31391e3ec2cd0376191f84e84" translate="yes" xml:space="preserve">
          <source>One of the identifiers &quot;&lt;a href=&quot;#def_commit_object&quot;&gt;commit&lt;/a&gt;&quot;, &quot;&lt;a href=&quot;#def_tree_object&quot;&gt;tree&lt;/a&gt;&quot;, &quot;&lt;a href=&quot;#def_tag_object&quot;&gt;tag&lt;/a&gt;&quot; or &quot;&lt;a href=&quot;#def_blob_object&quot;&gt;blob&lt;/a&gt;&quot; describing the type of an &lt;a href=&quot;#def_object&quot;&gt;object&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#def_object&quot;&gt;개체&lt;/a&gt; 유형을 나타내는 식별자 &quot; &lt;a href=&quot;#def_commit_object&quot;&gt;commit&lt;/a&gt; &quot;, &quot; &lt;a href=&quot;#def_tree_object&quot;&gt;tree&lt;/a&gt; &quot;, &quot; &lt;a href=&quot;#def_tag_object&quot;&gt;tag&lt;/a&gt; &quot;또는 &quot; &lt;a href=&quot;#def_blob_object&quot;&gt;blob&lt;/a&gt; &quot;중 하나 입니다.</target>
        </trans-unit>
        <trans-unit id="4cfd499f1faa2bf47281b08252a27709dbf65c31" translate="yes" xml:space="preserve">
          <source>One or more of the options below may be used to determine the files shown:</source>
          <target state="translated">아래의 옵션 중 하나 이상을 사용하여 표시된 파일을 결정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5fdc57e5472e4e105b70357796e6b6c7c9687799" translate="yes" xml:space="preserve">
          <source>One or more of the provided paths is ignored.</source>
          <target state="translated">제공된 경로 중 하나 이상이 무시됩니다.</target>
        </trans-unit>
        <trans-unit id="fa8d672b6bbfcb201a67403df350a9a5a712d006" translate="yes" xml:space="preserve">
          <source>One phase in branch detection involves looking at p4 branches to find new ones to import. By default, all branches are inspected. This option limits the search to just those owned by the single user named in the variable.</source>
          <target state="translated">분기 감지의 한 단계는 p4 분기를보고 가져올 새 분기를 찾는 것입니다. 기본적으로 모든 분기가 검사됩니다. 이 옵션은 변수에 이름이 지정된 단일 사용자가 소유 한 것으로 만 검색을 제한합니다.</target>
        </trans-unit>
        <trans-unit id="11468bd4c23009003db390c522332f7c3d2a8eae" translate="yes" xml:space="preserve">
          <source>One problem with &quot;git replace&quot; is that currently it stores all the replacements refs in &quot;refs/replace/&quot;, but it would be perhaps better if the replacement refs that are useful only for bisecting would be in &quot;refs/replace/bisect/&quot;. This way the replacement refs could be used only for bisecting, while other refs directly in &quot;refs/replace/&quot; would be used nearly all the time.</source>
          <target state="translated">&quot;git replace&quot;의 한 가지 문제점은 현재 모든 대체 참조를 &quot;refs / replace /&quot;에 저장하지만 bisecting에만 유용한 교체 참조가 &quot;refs / replace / bisect / &quot;. 이 방법으로 교체 심판은 이등분에만 사용될 수 있지만 &quot;refs / replace /&quot;에 직접있는 다른 심판은 거의 항상 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="d1e2a86cedb580a377c28acdbf81410bf88bf79b" translate="yes" xml:space="preserve">
          <source>One record (for project / repository) per line; does not support line continuation (newline escaping).</source>
          <target state="translated">라인 당 하나의 레코드 (프로젝트 / 저장소); 줄 연속 (줄 바꿈 이스케이프)을 지원하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="8e018f50410d5f4a4feb43d8b0ec18d17af4444c" translate="yes" xml:space="preserve">
          <source>One such software is the Linux kernel. And if we look at the Linux kernel, we can see that a lot of time and effort is spent to fight regressions. The release cycle start with a 2 weeks long merge window. Then the first release candidate (rc) version is tagged. And after that about 7 or 8 more rc versions will appear with around one week between each of them, before the final release.</source>
          <target state="translated">그러한 소프트웨어 중 하나는 Linux 커널입니다. 그리고 리눅스 커널을 살펴보면 회귀와 싸우는 데 많은 시간과 노력이 소비되고 있음을 알 수 있습니다. 릴리스주기는 2 주 길이의 병합 창으로 시작됩니다. 그런 다음 첫 번째 릴리스 후보 (rc) 버전이 태그됩니다. 그리고 그 이후에는 최종 릴리스 이전에 약 7 주에서 8 주 정도 더 많은 rc 버전이 각각 1 주일 정도 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="bdac2081c61d66c365f2d2f97739c2e3f666a74e" translate="yes" xml:space="preserve">
          <source>One usage scenario is to run unit tests in the hook.</source>
          <target state="translated">하나의 사용 시나리오는 후크에서 단위 테스트를 실행하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="f9e9013eccf2a70e5a5f30b1ea62b3495fc5c835" translate="yes" xml:space="preserve">
          <source>One use of the content filtering is to massage the content into a shape that is more convenient for the platform, filesystem, and the user to use. For this mode of operation, the key phrase here is &quot;more convenient&quot; and not &quot;turning something unusable into usable&quot;. In other words, the intent is that if someone unsets the filter driver definition, or does not have the appropriate filter program, the project should still be usable.</source>
          <target state="translated">컨텐츠 필터링의 한 가지 용도는 컨텐츠를 플랫폼, 파일 시스템 및 사용자가 사용하기에 더 편리한 형태로 마사지하는 것입니다. 이 작동 모드에서 여기서 핵심 문구는 &quot;더 편리&quot;하며 &quot;사용할 수없는 것을 사용할 수 없게 만드는&quot;것이 아닙니다. 다시 말해, 누군가 필터 드라이버 정의를 설정 해제하거나 적절한 필터 프로그램이없는 경우에도 프로젝트를 계속 사용할 수 있어야합니다.</target>
        </trans-unit>
        <trans-unit id="bf346c4d1c8b72f5f128424640398ae0ca4f5b99" translate="yes" xml:space="preserve">
          <source>One way to test if your MUA is set up correctly is:</source>
          <target state="translated">MUA가 올바르게 설정되었는지 테스트하는 한 가지 방법은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="b7da7d48889d5c708679796bf76623241882d879" translate="yes" xml:space="preserve">
          <source>Only allow viewing of repositories also shown on the overview page. This for example makes &lt;code&gt;$export_ok&lt;/code&gt; file decide if repository is available and not only if it is shown. If &lt;code&gt;$projects_list&lt;/code&gt; points to file with list of project, only those repositories listed would be available for gitweb. Can be set during building gitweb via &lt;code&gt;GITWEB_STRICT_EXPORT&lt;/code&gt;. By default this variable is not set, which means that you can directly access those repositories that are hidden from projects list page (e.g. the are not listed in the $projects_list file).</source>
          <target state="translated">개요 페이지에도 표시된 리포지토리 만 볼 수 있습니다. 예를 들어 &lt;code&gt;$export_ok&lt;/code&gt; 파일은 리포지토리가 사용 가능한지 여부를 결정합니다. &lt;code&gt;$projects_list&lt;/code&gt; 가 프로젝트 목록이있는 파일을 가리키는 경우 , 나열된 리포지토리 만 gitweb에 사용할 수 있습니다. &lt;code&gt;GITWEB_STRICT_EXPORT&lt;/code&gt; 를 통해 gitweb을 빌드하는 동안 설정할 수 있습니다 . 기본적으로이 변수는 설정되어 있지 않습니다. 즉, 프로젝트 목록 페이지에서 숨겨진 저장소 (예 : $ projects_list 파일에 나열되지 않은 저장소)에 직접 액세스 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a9db6957ecdccb26c443588b379fe63817da234e" translate="yes" xml:space="preserve">
          <source>Only anonymous access is provided by pserve by default. To commit you will have to create pserver accounts, simply add a gitcvs.authdb setting in the config file of the repositories you want the cvsserver to allow writes to, for example:</source>
          <target state="translated">pserve는 기본적으로 익명 액세스 만 제공합니다. 커밋하려면 pserver 계정을 만들어야하는데, cvsserver가 쓰기를 허용 할 리포지토리의 구성 파일에 gitcvs.authdb 설정을 추가하면됩니다.</target>
        </trans-unit>
        <trans-unit id="f8de1f9ddde9f99ee756c31ae048d708dda7832c" translate="yes" xml:space="preserve">
          <source>Only bind the web server to the local IP (127.0.0.1).</source>
          <target state="translated">웹 서버를 로컬 IP (127.0.0.1)에만 바인딩하십시오.</target>
        </trans-unit>
        <trans-unit id="914060d4007bba68d0e5b57a08eb8520cbc0281b" translate="yes" xml:space="preserve">
          <source>Only consider tags matching the given &lt;code&gt;glob(7)&lt;/code&gt; pattern, excluding the &quot;refs/tags/&quot; prefix. If used with &lt;code&gt;--all&lt;/code&gt;, it also considers local branches and remote-tracking references matching the pattern, excluding respectively &quot;refs/heads/&quot; and &quot;refs/remotes/&quot; prefix; references of other types are never considered. If given multiple times, a list of patterns will be accumulated, and tags matching any of the patterns will be considered. Use &lt;code&gt;--no-match&lt;/code&gt; to clear and reset the list of patterns.</source>
          <target state="translated">&quot;refs / tags /&quot;접두사를 제외 하고 주어진 &lt;code&gt;glob(7)&lt;/code&gt; 패턴과 일치하는 태그 만 고려하십시오 . &lt;code&gt;--all&lt;/code&gt; 과 함께 사용하는 경우 각각 &quot;refs / heads /&quot;및 &quot;refs / remotes /&quot;접두사를 제외하고 패턴과 일치하는 로컬 분기 및 원격 추적 참조도 고려합니다. 다른 유형의 참조는 고려되지 않습니다. 여러 번 주어진 경우 패턴 목록이 누적되고 패턴과 일치하는 태그가 고려됩니다. 패턴 목록을 지우고 재설정 하려면 &lt;code&gt;--no-match&lt;/code&gt; 를 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="941066ff4f5ea2a1056ac361a36573c125ff04f2" translate="yes" xml:space="preserve">
          <source>Only create a packed archive if it would contain at least one object.</source>
          <target state="translated">압축 된 아카이브에 하나 이상의 오브젝트가 포함 된 경우에만 압축 아카이브를 작성하십시오.</target>
        </trans-unit>
        <trans-unit id="83ca14f8cd2c9566aaa74ad9a438e0a15bc783b9" translate="yes" xml:space="preserve">
          <source>Only expire loose objects older than &amp;lt;time&amp;gt;.</source>
          <target state="translated">&amp;lt;time&amp;gt;보다 오래된 느슨한 객체 만 만료합니다.</target>
        </trans-unit>
        <trans-unit id="d50becec82fb156672fd24c1ecb55cefe6d9b0c0" translate="yes" xml:space="preserve">
          <source>Only list branches of the given object.</source>
          <target state="translated">주어진 객체의 가지만 나열합니다.</target>
        </trans-unit>
        <trans-unit id="ae8314faed018be3007d334a54cd4f7b3bde067a" translate="yes" xml:space="preserve">
          <source>Only list branches which contain the specified commit (HEAD if not specified). Implies &lt;code&gt;--list&lt;/code&gt;.</source>
          <target state="translated">지정된 커밋이 포함 된 분기 만 나열합니다 (지정하지 않은 경우 HEAD). &lt;code&gt;--list&lt;/code&gt; 를 의미 합니다.</target>
        </trans-unit>
        <trans-unit id="b39fcb7ccfd206d2a11b5cac77f876ebbcdc59a6" translate="yes" xml:space="preserve">
          <source>Only list branches which don&amp;rsquo;t contain the specified commit (HEAD if not specified). Implies &lt;code&gt;--list&lt;/code&gt;.</source>
          <target state="translated">지정된 커밋을 포함하지 않는 분기 만 나열합니다 (지정하지 않은 경우 HEAD). &lt;code&gt;--list&lt;/code&gt; 를 의미 합니다.</target>
        </trans-unit>
        <trans-unit id="5d91bc93b24e96b92cd74b3016507c8892f02d8e" translate="yes" xml:space="preserve">
          <source>Only list branches whose tips are not reachable from the specified commit (HEAD if not specified). Implies &lt;code&gt;--list&lt;/code&gt;, incompatible with &lt;code&gt;--merged&lt;/code&gt;.</source>
          <target state="translated">지정된 커밋에서 팁에 도달 할 수없는 분기 만 나열합니다 (지정하지 않은 경우 HEAD). &lt;code&gt;--merged&lt;/code&gt; 와 호환되지 않는 &lt;code&gt;--list&lt;/code&gt; 를 의미합니다 .</target>
        </trans-unit>
        <trans-unit id="368e1f5311ab357c6579dd2598d3554e5f69ab7b" translate="yes" xml:space="preserve">
          <source>Only list branches whose tips are reachable from the specified commit (HEAD if not specified). Implies &lt;code&gt;--list&lt;/code&gt;, incompatible with &lt;code&gt;--no-merged&lt;/code&gt;.</source>
          <target state="translated">지정된 커밋에서 팁에 도달 할 수있는 분기 만 나열합니다 (지정하지 않은 경우 HEAD). &lt;code&gt;--no-merged&lt;/code&gt; 와 호환되지 않는 &lt;code&gt;--list&lt;/code&gt; 를 의미합니다 .</target>
        </trans-unit>
        <trans-unit id="dc004fe98c7c853edcd721c4a4743bbe17dc0ceb" translate="yes" xml:space="preserve">
          <source>Only list refs which contain the specified commit (HEAD if not specified).</source>
          <target state="translated">지정된 커밋을 포함하는 참조 만 나열합니다 (지정하지 않은 경우 HEAD).</target>
        </trans-unit>
        <trans-unit id="53301ab6d13e8c23069a84dba2acf3daf5a67784" translate="yes" xml:space="preserve">
          <source>Only list refs which don&amp;rsquo;t contain the specified commit (HEAD if not specified).</source>
          <target state="translated">지정된 커밋을 포함하지 않는 참조 만 나열합니다 (지정하지 않은 경우 HEAD).</target>
        </trans-unit>
        <trans-unit id="13917fddfb76486aac0b6b32382a8222d7ef7129" translate="yes" xml:space="preserve">
          <source>Only list refs which points at the given object.</source>
          <target state="translated">주어진 객체를 가리키는 참조 만 나열합니다.</target>
        </trans-unit>
        <trans-unit id="d63446ed3ed439dd64fa48118858d7dc8f885568" translate="yes" xml:space="preserve">
          <source>Only list refs whose tips are not reachable from the specified commit (HEAD if not specified), incompatible with &lt;code&gt;--merged&lt;/code&gt;.</source>
          <target state="translated">지정된 커밋 (팁이 지정되지 않은 경우 HEAD)에서 팁에 도달 할 수없고 &lt;code&gt;--merged&lt;/code&gt; 와 호환되지 않는 참조 만 나열하십시오 .</target>
        </trans-unit>
        <trans-unit id="b4d24af2a09941026de883e7412997a62ab6d500" translate="yes" xml:space="preserve">
          <source>Only list refs whose tips are reachable from the specified commit (HEAD if not specified), incompatible with &lt;code&gt;--no-merged&lt;/code&gt;.</source>
          <target state="translated">지정된 커밋 (팁이 지정되지 않은 경우 HEAD)에서 팁에 도달 할 수 있고 &lt;code&gt;--no-merged&lt;/code&gt; 와 호환되지 않는 참조 만 나열합니다 .</target>
        </trans-unit>
        <trans-unit id="817a4e30ee524e4266621c0a4648ab3909ffeed4" translate="yes" xml:space="preserve">
          <source>Only list tags of the given object (HEAD if not specified). Implies &lt;code&gt;--list&lt;/code&gt;.</source>
          <target state="translated">지정된 객체의 태그 만 나열합니다 (지정하지 않은 경우 HEAD). &lt;code&gt;--list&lt;/code&gt; 를 의미 합니다.</target>
        </trans-unit>
        <trans-unit id="83f1d08e3476b4b0f43eedc9885a23e56ff396f3" translate="yes" xml:space="preserve">
          <source>Only list tags which contain the specified commit (HEAD if not specified). Implies &lt;code&gt;--list&lt;/code&gt;.</source>
          <target state="translated">지정된 커밋이 포함 된 태그 만 나열합니다 (지정하지 않은 경우 HEAD). &lt;code&gt;--list&lt;/code&gt; 를 의미 합니다.</target>
        </trans-unit>
        <trans-unit id="4bae480f98a8915919a61381cb993558ff75823a" translate="yes" xml:space="preserve">
          <source>Only list tags which don&amp;rsquo;t contain the specified commit (HEAD if not specified). Implies &lt;code&gt;--list&lt;/code&gt;.</source>
          <target state="translated">지정된 커밋을 포함하지 않는 태그 만 나열합니다 (지정하지 않은 경우 HEAD). &lt;code&gt;--list&lt;/code&gt; 를 의미 합니다.</target>
        </trans-unit>
        <trans-unit id="db9714bdab86b2c5263129a27ca40bb06f5dcdf2" translate="yes" xml:space="preserve">
          <source>Only list tags whose commits are not reachable from the specified commit (&lt;code&gt;HEAD&lt;/code&gt; if not specified), incompatible with &lt;code&gt;--merged&lt;/code&gt;.</source>
          <target state="translated">지정된 커밋 (커밋 되지 않은 경우 &lt;code&gt;HEAD&lt;/code&gt; ) 에서 커밋에 도달 할 수 없고 &lt;code&gt;--merged&lt;/code&gt; 와 호환되지 않는 태그 만 나열합니다 .</target>
        </trans-unit>
        <trans-unit id="1c62aa2054943bc2c5749c5693c2757ab8e53449" translate="yes" xml:space="preserve">
          <source>Only list tags whose commits are reachable from the specified commit (&lt;code&gt;HEAD&lt;/code&gt; if not specified), incompatible with &lt;code&gt;--no-merged&lt;/code&gt;.</source>
          <target state="translated">지정된 커밋 (커밋 되지 않은 경우 &lt;code&gt;HEAD&lt;/code&gt; ) 에서 커밋에 도달 할 수 있고 &lt;code&gt;--no-merged&lt;/code&gt; 와 호환되지 않는 태그 만 나열합니다 .</target>
        </trans-unit>
        <trans-unit id="b0cdb0cde0c40de0beaaced5d658f2a7018630fe" translate="yes" xml:space="preserve">
          <source>Only look at the history which touches the given subdirectory. The result will contain that directory (and only that) as its project root. Implies &lt;a href=&quot;#Remap_to_ancestor&quot;&gt;Remap to ancestor&lt;/a&gt;.</source>
          <target state="translated">주어진 서브 디렉토리를 터치하는 히스토리 만보십시오. 결과는 해당 디렉토리 (그리고 그 디렉토리 만)를 프로젝트 루트로 포함합니다. &lt;a href=&quot;#Remap_to_ancestor&quot;&gt;조상에 다시 매핑을&lt;/a&gt; 의미합니다 .</target>
        </trans-unit>
        <trans-unit id="2bbdf47a64eee45ee95696813788d11863c01152" translate="yes" xml:space="preserve">
          <source>Only meaningful in &lt;code&gt;--parseopt&lt;/code&gt; mode. Lets the option parser stop at the first non-option argument. This can be used to parse sub-commands that take options themselves.</source>
          <target state="translated">&lt;code&gt;--parseopt&lt;/code&gt; 모드 에서만 의미가 있습니다. 옵션 파서가 옵션이 아닌 첫 번째 인수에서 중지되도록합니다. 옵션 자체를 취하는 하위 명령을 구문 분석하는 데 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d8057f98f6fd66c86adb34f091c531e316f7ca42" translate="yes" xml:space="preserve">
          <source>Only meaningful in &lt;code&gt;--parseopt&lt;/code&gt; mode. Output the options in their long form if available, and with their arguments stuck.</source>
          <target state="translated">&lt;code&gt;--parseopt&lt;/code&gt; 모드 에서만 의미가 있습니다. 가능한 경우 옵션을 긴 형식으로 출력하고 인수가 멈춘 상태로 출력하십시오.</target>
        </trans-unit>
        <trans-unit id="6000fe90599266e72e627572d6cdbc969916ee02" translate="yes" xml:space="preserve">
          <source>Only meaningful in &lt;code&gt;--parseopt&lt;/code&gt; mode. Tells the option parser to echo out the first &lt;code&gt;--&lt;/code&gt; met instead of skipping it.</source>
          <target state="translated">&lt;code&gt;--parseopt&lt;/code&gt; 모드 에서만 의미가 있습니다. 첫 번째 밖으로 에코 옵션 파서를 알려줍니다 &lt;code&gt;--&lt;/code&gt; 대신을 건너 뛰는의 만족을.</target>
        </trans-unit>
        <trans-unit id="fd3f5d99fba63ca8e5d281298074650f7e9548b0" translate="yes" xml:space="preserve">
          <source>Only meaningful in &lt;code&gt;--verify&lt;/code&gt; mode. Do not output an error message if the first argument is not a valid object name; instead exit with non-zero status silently. SHA-1s for valid object names are printed to stdout on success.</source>
          <target state="translated">&lt;code&gt;--verify&lt;/code&gt; 모드 에서만 의미가 있습니다. 첫 번째 인수가 유효한 오브젝트 이름이 아닌 경우 오류 메시지를 출력하지 마십시오. 대신 0이 아닌 상태로 자동 종료하십시오. 유효한 오브젝트 이름에 대한 SHA-1은 성공시 stdout으로 인쇄됩니다.</target>
        </trans-unit>
        <trans-unit id="94590902338d0f64df58223a7c9238b6579f4aae" translate="yes" xml:space="preserve">
          <source>Only meaningful with &lt;code&gt;--pathspec-from-file&lt;/code&gt;. Pathspec elements are separated with NUL character and all other characters are taken literally (including newlines and quotes).</source>
          <target state="translated">&lt;code&gt;--pathspec-from-file&lt;/code&gt; 에서만 의미가 있습니다 . Pathspec 요소는 NUL 문자로 구분되며 다른 모든 문자는 문자 그대로 사용됩니다 (줄 바꾸기 및 따옴표 포함).</target>
        </trans-unit>
        <trans-unit id="0ecebefb0a1162c42954005e600970eacea40ab1" translate="yes" xml:space="preserve">
          <source>Only meaningful with &lt;code&gt;--stdin&lt;/code&gt; or &lt;code&gt;--index-info&lt;/code&gt;; paths are separated with NUL character instead of LF.</source>
          <target state="translated">&lt;code&gt;--stdin&lt;/code&gt; 또는 &lt;code&gt;--index-info&lt;/code&gt; 에서만 의미가 있습니다 . 경로는 LF 대신 NUL 문자로 구분됩니다.</target>
        </trans-unit>
        <trans-unit id="6ad4315a7f6c11660aa6c643c4b95eaab7a8d728" translate="yes" xml:space="preserve">
          <source>Only meaningful with &lt;code&gt;--stdin&lt;/code&gt;; paths are separated with NUL character instead of LF.</source>
          <target state="translated">&lt;code&gt;--stdin&lt;/code&gt; 에서만 의미가 있습니다 . 경로는 LF 대신 NUL 문자로 구분됩니다.</target>
        </trans-unit>
        <trans-unit id="2ebb91d27792ee23446f1d49f12e2e8cf850fef7" translate="yes" xml:space="preserve">
          <source>Only necessary if --compose is also set. If --compose is not set, this will be prompted for.</source>
          <target state="translated">--compose도 설정 한 경우에만 필요합니다. --compose가 설정되어 있지 않으면 프롬프트가 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="3a2cfa8e4dfa7576e427c217c4a335798a141827" translate="yes" xml:space="preserve">
          <source>Only one parameter should be set to &quot;1&quot; when the hook runs. The hook running passing &quot;1&quot;, &quot;1&quot; should not be possible.</source>
          <target state="translated">후크가 실행될 때 하나의 매개 변수 만 &quot;1&quot;로 설정해야합니다. &quot;1&quot;, &quot;1&quot;을 (를) 통과하는 후크가 작동하지 않아야합니다.</target>
        </trans-unit>
        <trans-unit id="bf7e12b67481a70907ee19a1cd34bdb9c2cfbcbb" translate="yes" xml:space="preserve">
          <source>Only output exact matches (a tag directly references the supplied commit). This is a synonym for --candidates=0.</source>
          <target state="translated">출력 정확히 일치 만 제공합니다 (태그는 제공된 커밋을 직접 참조합니다). 이것은 --candidates = 0의 동의어입니다.</target>
        </trans-unit>
        <trans-unit id="16dbfb260245eaec3998212f13b1a52e2d286e0a" translate="yes" xml:space="preserve">
          <source>Only p4 labels matching this regular expression will be exported. The default value is &lt;code&gt;[a-zA-Z0-9_\-.]+$&lt;/code&gt;.</source>
          <target state="translated">이 정규식과 일치하는 p4 레이블 만 내보내집니다. 기본값은 &lt;code&gt;[a-zA-Z0-9_\-.]+$&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="eeb8bb30ea7ba21536e78e1ff49007a02268174b" translate="yes" xml:space="preserve">
          <source>Only p4 labels matching this regular expression will be imported. The default value is &lt;code&gt;[a-zA-Z0-9_\-.]+$&lt;/code&gt;.</source>
          <target state="translated">이 정규식과 일치하는 p4 레이블 만 가져옵니다. 기본값은 &lt;code&gt;[a-zA-Z0-9_\-.]+$&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="e2fdb861f4cc24f6e2448e8ab0d3c248ec24997f" translate="yes" xml:space="preserve">
          <source>Only perform tests on the working directory to make sure untracked cache can be used. You have to manually enable untracked cache using &lt;code&gt;--untracked-cache&lt;/code&gt; or &lt;code&gt;--force-untracked-cache&lt;/code&gt; or the &lt;code&gt;core.untrackedCache&lt;/code&gt; configuration variable afterwards if you really want to use it. If a test fails the exit code is 1 and a message explains what is not working as needed, otherwise the exit code is 0 and OK is printed.</source>
          <target state="translated">추적되지 않은 캐시를 사용할 수 있도록 작업 디렉토리에서만 테스트를 수행하십시오. 수동으로 사용하여 추적 된 캐시를 활성화해야 &lt;code&gt;--untracked-cache&lt;/code&gt; 또는 &lt;code&gt;--force-untracked-cache&lt;/code&gt; 또는 &lt;code&gt;core.untrackedCache&lt;/code&gt; 의 당신이 정말로 그것을 사용하려는 경우 나중에 구성 변수를. 테스트가 실패하면 종료 코드는 1이고 필요에 따라 작동하지 않는 것을 설명하는 메시지가 표시되고, 그렇지 않으면 종료 코드는 0이고 확인이 인쇄됩니다.</target>
        </trans-unit>
        <trans-unit id="9b88e48a96d98ad3b76de8b5d274db692fc6b29c" translate="yes" xml:space="preserve">
          <source>Only print error and warning messages; all other output will be suppressed.</source>
          <target state="translated">오류 및 경고 메시지 만 인쇄하십시오. 다른 모든 출력은 억제됩니다.</target>
        </trans-unit>
        <trans-unit id="3791d8648f923430d0795b4e9f5031ac211bf7f1" translate="yes" xml:space="preserve">
          <source>Only print error messages.</source>
          <target state="translated">오류 메시지 만 인쇄하십시오.</target>
        </trans-unit>
        <trans-unit id="affbeb73b1dd267a08167d9ea74afe477ad3529f" translate="yes" xml:space="preserve">
          <source>Only show the SHA-1 hash, not the reference name. When combined with --dereference the dereferenced tag will still be shown after the SHA-1.</source>
          <target state="translated">참조 이름이 아닌 SHA-1 해시 만 표시하십시오. --dereference와 함께 사용하면 역 참조 된 태그는 여전히 SHA-1 뒤에 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="74a12c610ac9d71beb7074574ccb847224f9f712" translate="yes" xml:space="preserve">
          <source>Only show the given commits, but do not traverse their ancestors. This has no effect if a range is specified. If the argument &lt;code&gt;unsorted&lt;/code&gt; is given, the commits are shown in the order they were given on the command line. Otherwise (if &lt;code&gt;sorted&lt;/code&gt; or no argument was given), the commits are shown in reverse chronological order by commit time. Cannot be combined with &lt;code&gt;--graph&lt;/code&gt;.</source>
          <target state="translated">주어진 커밋 만 보여 주지만 조상을 가로 지르지 마십시오. 범위가 지정된 경우에는 효과가 없습니다. &lt;code&gt;unsorted&lt;/code&gt; 인수 가 제공되면, 커미트는 명령 행에 제공된 순서대로 표시됩니다. 그렇지 않으면 ( &lt;code&gt;sorted&lt;/code&gt; 되거나 인수가 제공되지 않은 경우 ) 커밋은 커밋 시간에 따라 역순으로 표시됩니다. &lt;code&gt;--graph&lt;/code&gt; 와 함께 사용할 수 없습니다 .</target>
        </trans-unit>
        <trans-unit id="6ed956e65db38a49fac1dac50248e7edb1c43fb7" translate="yes" xml:space="preserve">
          <source>Only submodules using a gitfile (which means they were cloned with a Git version 1.7.8 or newer) will be removed from the work tree, as their repository lives inside the .git directory of the superproject. If a submodule (or one of those nested inside it) still uses a .git directory, &lt;code&gt;git rm&lt;/code&gt; will move the submodules git directory into the superprojects git directory to protect the submodule&amp;rsquo;s history. If it exists the submodule.&amp;lt;name&amp;gt; section in the &lt;a href=&quot;gitmodules&quot;&gt;gitmodules[5]&lt;/a&gt; file will also be removed and that file will be staged (unless --cached or -n are used).</source>
          <target state="translated">gitfile을 사용하는 하위 모듈 (Git 버전 1.7.8 이상으로 복제 된 것을 의미) 만 리포지토리가 수퍼 프로젝트의 .git 디렉토리에 있으므로 작업 트리에서 제거됩니다. 서브 모듈 (또는 그 안에 중첩 된 서브 모듈 중 하나)이 여전히 .git 디렉토리를 사용하는 경우, &lt;code&gt;git rm&lt;/code&gt; 은 서브 모듈 git 디렉토리를 수퍼 프로젝트 git 디렉토리로 이동시켜 서브 모듈의 히스토리를 보호합니다. 그것이 존재한다면 &lt;a href=&quot;gitmodules&quot;&gt;gitmodules [5]&lt;/a&gt; 파일 의 submodule. &amp;lt;name&amp;gt; 섹션 도 제거되고 해당 파일이 준비됩니다 (--cached 또는 -n을 사용하지 않는 한).</target>
        </trans-unit>
        <trans-unit id="f3b6918bb732fd2722633a305233dd0ec34bff15" translate="yes" xml:space="preserve">
          <source>Only takes effect for dates shown in human-readable format, such as when using &lt;code&gt;--pretty&lt;/code&gt;. &lt;code&gt;log.date&lt;/code&gt; config variable sets a default value for the log command&amp;rsquo;s &lt;code&gt;--date&lt;/code&gt; option. By default, dates are shown in the original time zone (either committer&amp;rsquo;s or author&amp;rsquo;s). If &lt;code&gt;-local&lt;/code&gt; is appended to the format (e.g., &lt;code&gt;iso-local&lt;/code&gt;), the user&amp;rsquo;s local time zone is used instead.</source>
          <target state="translated">&lt;code&gt;--pretty&lt;/code&gt; 를 사용할 때와 같이 사람이 읽을 수있는 형식으로 표시된 날짜에만 적용됩니다 . &lt;code&gt;log.date&lt;/code&gt; 구성 변수는 log 명령의 &lt;code&gt;--date&lt;/code&gt; 옵션에 대한 기본값을 설정합니다 . 기본적으로 날짜는 원래 시간대 (커미터 또는 작성자)에 표시됩니다. &lt;code&gt;-local&lt;/code&gt; 이 형식에 추가 되면 (예 : &lt;code&gt;iso-local&lt;/code&gt; ) 사용자의 현지 시간대가 대신 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="28227446e42814d459bad1017137f194a3d411bf" translate="yes" xml:space="preserve">
          <source>Only the initial ref advertisement is output, and the program exits immediately. This fits with the HTTP GET request model, where no request content is received but a response must be produced.</source>
          <target state="translated">초기 심판 광고 만 출력되고 프로그램이 즉시 종료됩니다. 이는 요청 컨텐츠가 수신되지 않지만 응답을 생성해야하는 HTTP GET 요청 모델에 적합합니다.</target>
        </trans-unit>
        <trans-unit id="d70e32ee66c9f176a2ec41ee4464e248b98de054" translate="yes" xml:space="preserve">
          <source>Only the rev_map and refs/remotes/git-svn are changed (see &lt;code&gt;$GIT_DIR/svn/**/.rev_map.*&lt;/code&gt; in the FILES section below for details). Follow &lt;code&gt;reset&lt;/code&gt; with a &lt;code&gt;fetch&lt;/code&gt; and then &lt;code&gt;git reset&lt;/code&gt; or &lt;code&gt;git rebase&lt;/code&gt; to move local branches onto the new tree.</source>
          <target state="translated">rev_map 및 refs / remotes / git-svn 만 변경됩니다 (자세한 내용은 아래 FILES 섹션에서 &lt;code&gt;$GIT_DIR/svn/**/.rev_map.*&lt;/code&gt; 참조). 에 따라 &lt;code&gt;reset&lt;/code&gt; A를 &lt;code&gt;fetch&lt;/code&gt; 다음 &lt;code&gt;git reset&lt;/code&gt; 또는 &lt;code&gt;git rebase&lt;/code&gt; 새로운 트리로 이동하는 현지 지점.</target>
        </trans-unit>
        <trans-unit id="32e7b8a674c1b57420afbf6e783864cc587eae94" translate="yes" xml:space="preserve">
          <source>Only the selected commits are shown, plus some to have a meaningful history.</source>
          <target state="translated">선택한 커밋 만 표시되고 일부는 의미있는 기록을 갖습니다.</target>
        </trans-unit>
        <trans-unit id="5988bcb17bfff8bdefbf4f11c653c30a84ac354c" translate="yes" xml:space="preserve">
          <source>Only untracked files in submodules will be ignored. Committed differences and modifications to tracked files will show up.</source>
          <target state="translated">하위 모듈에서 추적되지 않은 파일 만 무시됩니다. 추적 된 파일에 대한 확약 된 차이점 및 수정 사항이 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="a35d5f8b7ffccc1327ae3b4b170fadaf17be62a8" translate="yes" xml:space="preserve">
          <source>Only update and add files to the working directory, but don&amp;rsquo;t delete them, similar to how 'cp -R' would update the contents in the destination directory. This is the default mode in a &lt;a href=&quot;#def_checkout&quot;&gt;checkout&lt;/a&gt; when checking out files from the &lt;a href=&quot;#def_index&quot;&gt;index&lt;/a&gt; or a &lt;a href=&quot;#def_tree-ish&quot;&gt;tree-ish&lt;/a&gt;. In contrast, no-overlay mode also deletes tracked files not present in the source, similar to 'rsync --delete'.</source>
          <target state="translated">'cp -R'이 대상 디렉토리의 내용을 업데이트하는 방법과 유사하게 작업 디렉토리에만 파일을 업데이트하고 추가하지만 삭제하지 마십시오. &lt;a href=&quot;#def_index&quot;&gt;인덱스&lt;/a&gt; 또는 &lt;a href=&quot;#def_tree-ish&quot;&gt;tree-ish&lt;/a&gt; 에서 파일을 &lt;a href=&quot;#def_checkout&quot;&gt;체크 아웃&lt;/a&gt; 할 때 체크 아웃 의 기본 모드입니다 . 반대로 오버레이 없음 모드는 'rsync --delete'와 마찬가지로 소스에없는 추적 된 파일도 삭제합니다.</target>
        </trans-unit>
        <trans-unit id="a09a6feef23c1bf8bf8489c07fa754b0e3467e64" translate="yes" xml:space="preserve">
          <source>Only update and add files to the working directory, but don&amp;rsquo;t delete them, similar to how &lt;code&gt;cp -R&lt;/code&gt; would update the contents in the destination directory. This is the default mode in a &lt;a href=&quot;#def_checkout&quot;&gt;checkout&lt;/a&gt; when checking out files from the &lt;a href=&quot;#def_index&quot;&gt;index&lt;/a&gt; or a &lt;a href=&quot;#def_tree-ish&quot;&gt;tree-ish&lt;/a&gt;. In contrast, no-overlay mode also deletes tracked files not present in the source, similar to &lt;code&gt;rsync --delete&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;cp -R&lt;/code&gt; 이 대상 디렉토리의 내용을 업데이트하는 방법과 유사하게 작업 디렉토리에만 파일을 업데이트하고 추가하지만 삭제하지 마십시오 . &lt;a href=&quot;#def_index&quot;&gt;인덱스&lt;/a&gt; 또는 &lt;a href=&quot;#def_tree-ish&quot;&gt;tree-ish&lt;/a&gt; 에서 파일을 &lt;a href=&quot;#def_checkout&quot;&gt;체크 아웃&lt;/a&gt; 할 때 체크 아웃 의 기본 모드입니다 . 반대로 오버레이 없음 모드는 &lt;code&gt;rsync --delete&lt;/code&gt; 와 유사하게 소스에없는 추적 된 파일도 삭제합니다 .</target>
        </trans-unit>
        <trans-unit id="cd6ac5160ec46e3d1df2371d183d50a5e06ffdbe" translate="yes" xml:space="preserve">
          <source>Only use refs whose names match a given shell pattern. The pattern can be one of branch name, tag name or fully qualified ref name. If given multiple times, use refs whose names match any of the given shell patterns. Use &lt;code&gt;--no-refs&lt;/code&gt; to clear any previous ref patterns given.</source>
          <target state="translated">주어진 쉘 패턴과 이름이 일치하는 심판 만 사용하십시오. 패턴은 브랜치 이름, 태그 이름 또는 정규화 된 참조 이름 중 하나 일 수 있습니다. 여러 번 주어진 경우, 주어진 쉘 패턴과 이름이 일치하는 심판을 사용하십시오. 주어진 이전 참조 패턴을 지우려면 &lt;code&gt;--no-refs&lt;/code&gt; 를 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="2d533153e7612cafa4bc7b83b50dd3abb697af0e" translate="yes" xml:space="preserve">
          <source>Only used with the &lt;code&gt;dcommit&lt;/code&gt;, &lt;code&gt;set-tree&lt;/code&gt; and &lt;code&gt;commit-diff&lt;/code&gt; commands.</source>
          <target state="translated">&lt;code&gt;dcommit&lt;/code&gt; , &lt;code&gt;set-tree&lt;/code&gt; 및 &lt;code&gt;commit-diff&lt;/code&gt; 명령 에만 사용됩니다 .</target>
        </trans-unit>
        <trans-unit id="901e1e4a237282bb48e582bb5bf0599881cd0084" translate="yes" xml:space="preserve">
          <source>Only used with the &lt;code&gt;init&lt;/code&gt; command. These are passed directly to &lt;code&gt;git init&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;init&lt;/code&gt; 명령 에서만 사용됩니다 . 이것들은 &lt;code&gt;git init&lt;/code&gt; 에 직접 전달됩니다 .</target>
        </trans-unit>
        <trans-unit id="f5e61001de0ada8f2eb5dc9bbc0a16644112482b" translate="yes" xml:space="preserve">
          <source>Only used with the &lt;code&gt;set-tree&lt;/code&gt; command.</source>
          <target state="translated">&lt;code&gt;set-tree&lt;/code&gt; 명령 에만 사용됩니다 .</target>
        </trans-unit>
        <trans-unit id="e227b5617ca7c2b377054ab1d12644a8cc591504" translate="yes" xml:space="preserve">
          <source>Only useful with &lt;code&gt;--filter=&lt;/code&gt;; prints a list of the objects omitted by the filter. Object IDs are prefixed with a &amp;ldquo;~&amp;rdquo; character.</source>
          <target state="translated">&lt;code&gt;--filter=&lt;/code&gt; 에서만 유용합니다 . 필터에서 생략 된 개체 목록을 인쇄합니다. 개체 ID 앞에는 &quot;~&quot;문자가 붙습니다.</target>
        </trans-unit>
        <trans-unit id="c898c5ecedbff05a6572c10f50d4d5872a590271" translate="yes" xml:space="preserve">
          <source>Only useful with &lt;code&gt;--objects&lt;/code&gt;; does not print the names of the object IDs that are found. This inverts &lt;code&gt;--object-names&lt;/code&gt;. This flag allows the output to be more easily parsed by commands such as &lt;a href=&quot;git-cat-file&quot;&gt;git-cat-file[1]&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;--objects&lt;/code&gt; 에만 유용합니다 . 발견 된 오브젝트 ID의 이름을 인쇄하지 않습니다. 이것은 &lt;code&gt;--object-names&lt;/code&gt; 를 뒤집습니다 . 이 플래그를 사용하면 &lt;a href=&quot;git-cat-file&quot;&gt;git-cat-file [1]&lt;/a&gt; 과 같은 명령으로 출력을보다 쉽게 ​​구문 분석 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="cbbf115261d96b04c5005e948b7d150b4779f83e" translate="yes" xml:space="preserve">
          <source>Only useful with &lt;code&gt;--objects&lt;/code&gt;; print the names of the object IDs that are found. This is the default behavior.</source>
          <target state="translated">&lt;code&gt;--objects&lt;/code&gt; 에만 유용합니다 . 발견 된 오브젝트 ID의 이름을 인쇄하십시오. 이것이 기본 동작입니다.</target>
        </trans-unit>
        <trans-unit id="96aa4c0ed29b4ff25b67f82110d672c478c9f0a4" translate="yes" xml:space="preserve">
          <source>Only useful with &lt;code&gt;--objects&lt;/code&gt;; print the object IDs that are not in packs.</source>
          <target state="translated">&lt;code&gt;--objects&lt;/code&gt; 에만 유용합니다 . 팩에없는 오브젝트 ID를 인쇄하십시오.</target>
        </trans-unit>
        <trans-unit id="395c9938b3e2e6eaf4d1417f6499451782d5fa84" translate="yes" xml:space="preserve">
          <source>Only useful with one of the &lt;code&gt;--objects*&lt;/code&gt;; omits objects (usually blobs) from the list of printed objects. The &lt;code&gt;&amp;lt;filter-spec&amp;gt;&lt;/code&gt; may be one of the following:</source>
          <target state="translated">&lt;code&gt;--objects*&lt;/code&gt; 중 하나에서만 유용합니다 . 인쇄 된 객체 목록에서 객체 (일반적으로 얼룩)를 생략합니다. &lt;code&gt;&amp;lt;filter-spec&amp;gt;&lt;/code&gt; 다음 중 하나 일 수있다 :</target>
        </trans-unit>
        <trans-unit id="c55263ee2e693cf4a68e8c688a3aeedef8c016f1" translate="yes" xml:space="preserve">
          <source>Only valid setting is &quot;--unified=??&quot; or &quot;-u??&quot; to set the number of context lines shown when a unified diff is created. This takes precedence over any &quot;-U&quot; or &quot;--unified&quot; option value passed on the Git diff command line.</source>
          <target state="translated">유효한 설정 만 &quot;--unified = ??&quot;입니다. 또는 &quot;-u ??&quot; 통합 diff가 생성 될 때 표시되는 컨텍스트 라인 수를 설정합니다. 이것은 Git diff 명령 행에 전달 된 &quot;-U&quot;또는 &quot;--unified&quot;옵션 값보다 우선합니다.</target>
        </trans-unit>
        <trans-unit id="77fb8a535dafe4973135cbd89eaf06e8f07b4529" translate="yes" xml:space="preserve">
          <source>Only works if the changes (patch IDs based on the diff contents) on &lt;code&gt;subsystem&lt;/code&gt; are literally the same before and after the rebase &lt;code&gt;subsystem&lt;/code&gt; did.</source>
          <target state="translated">&lt;code&gt;subsystem&lt;/code&gt; 의 변경 사항 (diff 내용을 기반으로 한 패치 ID) 이 rebase &lt;code&gt;subsystem&lt;/code&gt; 이전과 이후에 문자 그대로 동일한 경우에만 작동합니다 .</target>
        </trans-unit>
        <trans-unit id="5a64b44f8d7042d0b4832141c36a7e5d8d6c4434" translate="yes" xml:space="preserve">
          <source>Oops. That wasn&amp;rsquo;t very readable. It just spit out its own internal version of a &lt;code&gt;diff&lt;/code&gt;, but that internal version really just tells you that it has noticed that &quot;hello&quot; has been modified, and that the old object contents it had have been replaced with something else.</source>
          <target state="translated">죄송합니다. 읽기 쉽지 않았습니다. 그것은 단지 &lt;code&gt;diff&lt;/code&gt; 의 내부 버전을 내뱉었 지 만 , 그 내부 버전은 실제로 &quot;hello&quot;가 수정되었으며 이전 객체 내용이 다른 것으로 대체되었음을 알 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="0e55d62611877e337f8aa065fb0b3d20e9fe0e5a" translate="yes" xml:space="preserve">
          <source>Open a compose window and click the external editor icon.</source>
          <target state="translated">작성 창을 열고 외부 편집기 아이콘을 클릭하십시오.</target>
        </trans-unit>
        <trans-unit id="db4ff8c108e7b94773be0de613a7b629cb1df8fa" translate="yes" xml:space="preserve">
          <source>Open an editor and edit the text to explain what the branch is for, to be used by various other commands (e.g. &lt;code&gt;format-patch&lt;/code&gt;, &lt;code&gt;request-pull&lt;/code&gt;, and &lt;code&gt;merge&lt;/code&gt; (if enabled)). Multi-line explanations may be used.</source>
          <target state="translated">편집기를 열고 텍스트를 편집하여 분기가 무엇인지 설명하고 다양한 다른 명령 (예 : &lt;code&gt;format-patch&lt;/code&gt; , &lt;code&gt;request-pull&lt;/code&gt; 및 &lt;code&gt;merge&lt;/code&gt; (활성화 된 경우))에 사용됩니다. 여러 줄 설명이 사용될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="577c09c011d74bfddaa145d1c3817d3d9900cb19" translate="yes" xml:space="preserve">
          <source>Open the diff vs. the index in an editor and let the user edit it. After the editor was closed, adjust the hunk headers and apply the patch to the index.</source>
          <target state="translated">편집기에서 diff vs. index를 열고 사용자가 편집 할 수있게하십시오. 에디터가 닫힌 후, 헝크 헤더를 조정하고 패치를 인덱스에 적용하십시오.</target>
        </trans-unit>
        <trans-unit id="1e40bc8b6fc685aae183dd5f07e4256cd3e46abe" translate="yes" xml:space="preserve">
          <source>Open the matching files in the pager (not the output of &lt;code&gt;grep&lt;/code&gt;). If the pager happens to be &quot;less&quot; or &quot;vi&quot;, and the user specified only one pattern, the first file is positioned at the first match automatically. The &lt;code&gt;pager&lt;/code&gt; argument is optional; if specified, it must be stuck to the option without a space. If &lt;code&gt;pager&lt;/code&gt; is unspecified, the default pager will be used (see &lt;code&gt;core.pager&lt;/code&gt; in &lt;a href=&quot;git-config&quot;&gt;git-config[1]&lt;/a&gt;).</source>
          <target state="translated">호출기에서 일치하는 파일을여십시오 ( &lt;code&gt;grep&lt;/code&gt; 의 출력이 아님). 호출기가 &quot;less&quot;또는 &quot;vi&quot;인 경우 사용자가 하나의 패턴 만 지정한 경우 첫 번째 파일은 첫 번째 일치 항목에 자동으로 배치됩니다. &lt;code&gt;pager&lt;/code&gt; 인수는 선택 사항입니다; 지정된 경우 공백없이 옵션을 사용해야합니다. 경우 &lt;code&gt;pager&lt;/code&gt; 지정되어 있지 않은 기본 호출기 (참고 사용될 &lt;code&gt;core.pager&lt;/code&gt; 을 에 &lt;a href=&quot;git-config&quot;&gt;자식-구성 [1]&lt;/a&gt; ).</target>
        </trans-unit>
        <trans-unit id="8ab75f225f79420c5b860ca24bd40f7491c784f1" translate="yes" xml:space="preserve">
          <source>Opens an editor to modify the specified config file; either &lt;code&gt;--system&lt;/code&gt;, &lt;code&gt;--global&lt;/code&gt;, or repository (default).</source>
          <target state="translated">지정된 구성 파일을 수정하기 위해 편집기를 엽니 다. 하나 &lt;code&gt;--system&lt;/code&gt; , &lt;code&gt;--global&lt;/code&gt; , 또는 저장소 (기본값).</target>
        </trans-unit>
        <trans-unit id="869e0439c9b6be4fa4547f64fcc46a677445443d" translate="yes" xml:space="preserve">
          <source>Operate quietly. Implies --no-progress.</source>
          <target state="translated">조용히 작동하십시오. --no-progress를 의미합니다.</target>
        </trans-unit>
        <trans-unit id="976297b1ff380abe9b067b3a1569ff64fe97ece7" translate="yes" xml:space="preserve">
          <source>Operate quietly. Progress is not reported to the standard error stream.</source>
          <target state="translated">조용히 작동하십시오. 진행률은 표준 오류 스트림에보고되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="09f22e6b29a644f35840ab8527beed58937c2452" translate="yes" xml:space="preserve">
          <source>Operating modes</source>
          <target state="translated">작동 모드</target>
        </trans-unit>
        <trans-unit id="b5ddf3c63568d76ebc23d453be7fdb731eb8db1b" translate="yes" xml:space="preserve">
          <source>Operation Modes</source>
          <target state="translated">작동 모드</target>
        </trans-unit>
        <trans-unit id="7196d0b4f156df0cb7286af7737967727f46300d" translate="yes" xml:space="preserve">
          <source>Operation modes</source>
          <target state="translated">작동 모드</target>
        </trans-unit>
        <trans-unit id="1bc69d57cbb59ff5bdbc63f455c23bce178e5e54" translate="yes" xml:space="preserve">
          <source>Operations supported</source>
          <target state="translated">지원되는 작업</target>
        </trans-unit>
        <trans-unit id="573db325843d7fd90adea414c1ffec090ab48249" translate="yes" xml:space="preserve">
          <source>Optimize a pack that will be provided to a client with a shallow repository. This option, combined with --thin, can result in a smaller pack at the cost of speed.</source>
          <target state="translated">얕은 저장소가있는 클라이언트에 제공 될 팩을 최적화하십시오. 이 옵션을 --thin과 함께 사용하면 속도를 낮추면서 더 작은 팩을 만들 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="4679da9817f2d593d1926870257534b31ee86cfa" translate="yes" xml:space="preserve">
          <source>Option commands must be the first commands on the input (not counting feature commands), to give an option command after any non-option command is an error.</source>
          <target state="translated">옵션 명령이 아닌 오류가 발생한 후 옵션 명령을 제공하려면 옵션 명령이 입력의 첫 번째 명령 (기능 명령을 세지 않음)이어야합니다.</target>
        </trans-unit>
        <trans-unit id="da44303dd559700c5ce39d2667eb27c2885407ef" translate="yes" xml:space="preserve">
          <source>Optional &amp;lt;path&amp;gt; arguments limit which submodules will be initialized. If no path is specified and submodule.active has been configured, submodules configured to be active will be initialized, otherwise all submodules are initialized.</source>
          <target state="translated">선택적 &amp;lt;path&amp;gt; 인수는 초기화 할 서브 모듈을 제한합니다. 경로를 지정하지 않고 submodule.active를 구성한 경우 활성화되도록 구성된 하위 모듈이 초기화되고 그렇지 않으면 모든 하위 모듈이 초기화됩니다.</target>
        </trans-unit>
        <trans-unit id="be215efb6b35fec1e17ea79655a45bba1595ca40" translate="yes" xml:space="preserve">
          <source>Optionally a new branch could be created with either &lt;code&gt;-c&lt;/code&gt;, &lt;code&gt;-C&lt;/code&gt;, automatically from a remote branch of same name (see &lt;code&gt;--guess&lt;/code&gt;), or detach the working tree from any branch with &lt;code&gt;--detach&lt;/code&gt;, along with switching.</source>
          <target state="translated">선택적으로, 새로운 지점이 어느로 생성 될 수 &lt;code&gt;-c&lt;/code&gt; , &lt;code&gt;-C&lt;/code&gt; 자동 동일한 이름의 원격 지점에서 (참조 &lt;code&gt;--guess&lt;/code&gt; ) 또는 어떤 지점에서 작업 트리 분리 &lt;code&gt;--detach&lt;/code&gt; 스위칭과 함께.</target>
        </trans-unit>
        <trans-unit id="d773dc6382eb3328de30b1c7224e0be840082992" translate="yes" xml:space="preserve">
          <source>Optionally may output a &lt;code&gt;lock &amp;lt;file&amp;gt;&lt;/code&gt; line indicating the full path of a file under &lt;code&gt;$GIT_DIR/objects/pack&lt;/code&gt; which is keeping a pack until refs can be suitably updated. The path must end with &lt;code&gt;.keep&lt;/code&gt;. This is a mechanism to name a &amp;lt;pack,idx,keep&amp;gt; tuple by giving only the keep component. The kept pack will not be deleted by a concurrent repack, even though its objects may not be referenced until the fetch completes. The &lt;code&gt;.keep&lt;/code&gt; file will be deleted at the conclusion of the fetch.</source>
          <target state="translated">선택적 으로 &lt;code&gt;$GIT_DIR/objects/pack&lt;/code&gt; 아래에있는 파일의 전체 경로를 나타내는 &lt;code&gt;lock &amp;lt;file&amp;gt;&lt;/code&gt; 행을 출력 할 수 있으며, 참조를 적절히 업데이트 할 수있을 때까지 팩 을 유지합니다. 경로는 &lt;code&gt;.keep&lt;/code&gt; 으로 끝나야 합니다. 이것은 유지 구성 요소 만 제공하여 &amp;lt;pack, idx, keep&amp;gt; 튜플의 이름을 지정하는 메커니즘입니다. 페치가 완료 될 때까지 오브젝트를 참조 할 수없는 경우에도 보존 된 팩은 동시 리팩에 의해 삭제되지 않습니다. &lt;code&gt;.keep&lt;/code&gt; 의 파일은 가져 오기의 결론에서 삭제됩니다.</target>
        </trans-unit>
        <trans-unit id="66770b44a484bf62b3beb74f057263164da82747" translate="yes" xml:space="preserve">
          <source>Optionally with -m:</source>
          <target state="translated">선택적으로 -m과 함께 :</target>
        </trans-unit>
        <trans-unit id="3e5a4f0fcbf7c88862ec022584d8faedebb202bf" translate="yes" xml:space="preserve">
          <source>Optionally, a &amp;lt;ref&amp;gt; parameter can be prefixed with a plus &lt;code&gt;+&lt;/code&gt; sign to disable the fast-forward check only on that ref.</source>
          <target state="translated">선택적으로 &amp;lt;ref&amp;gt; 매개 변수 앞에 더하기 &lt;code&gt;+&lt;/code&gt; 부호를 붙여 해당 참조에서만 빨리 감기 검사를 비활성화 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="5ad18880dec3737f40f1be35d71296de89bc6175" translate="yes" xml:space="preserve">
          <source>Optionally, it can merge a tree into the index, perform a fast-forward (i.e. 2-way) merge, or a 3-way merge, with the &lt;code&gt;-m&lt;/code&gt; flag. When used with &lt;code&gt;-m&lt;/code&gt;, the &lt;code&gt;-u&lt;/code&gt; flag causes it to also update the files in the work tree with the result of the merge.</source>
          <target state="translated">선택적으로, 트리를 인덱스로 병합하고, &lt;code&gt;-m&lt;/code&gt; 플래그를 사용하여 빨리 감기 (즉, 2 방향) 병합 또는 3 방향 병합을 수행 할 수 있습니다. &lt;code&gt;-m&lt;/code&gt; 과 함께 사용 하면 &lt;code&gt;-u&lt;/code&gt; 플래그는 병합 결과로 작업 트리의 파일도 업데이트합니다.</target>
        </trans-unit>
        <trans-unit id="6bf5da9c080bee3a8142586c412aa39971137eee" translate="yes" xml:space="preserve">
          <source>Options</source>
          <target state="translated">Options</target>
        </trans-unit>
        <trans-unit id="c844411e7897e1475e2bbc7e1cd47d6ca3b70b75" translate="yes" xml:space="preserve">
          <source>Options for --parseopt</source>
          <target state="translated">--parseopt 옵션</target>
        </trans-unit>
        <trans-unit id="9c25d7f1531501faea711b1933ac2734dd8f1324" translate="yes" xml:space="preserve">
          <source>Options for &lt;code&gt;delete&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;delete&lt;/code&gt; 옵션</target>
        </trans-unit>
        <trans-unit id="7eec6c07b2d8ff28d282e8d3918c0430dfd638ff" translate="yes" xml:space="preserve">
          <source>Options for &lt;code&gt;expire&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;expire&lt;/code&gt; 옵션</target>
        </trans-unit>
        <trans-unit id="e73b9df34672d383e318c543fe1ed5467baa2316" translate="yes" xml:space="preserve">
          <source>Options for &lt;code&gt;show&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;show&lt;/code&gt; 옵션</target>
        </trans-unit>
        <trans-unit id="fcc02e852676cd8c1162b2b42e5759f86fcae990" translate="yes" xml:space="preserve">
          <source>Options for Files</source>
          <target state="translated">파일 옵션</target>
        </trans-unit>
        <trans-unit id="fd6ce8b428a235dff74127968e45c8e950a3e68b" translate="yes" xml:space="preserve">
          <source>Options for Filtering</source>
          <target state="translated">필터링 옵션</target>
        </trans-unit>
        <trans-unit id="f0e43560a9524e814096613f5d3adbb780ab9547" translate="yes" xml:space="preserve">
          <source>Options for Frontends</source>
          <target state="translated">프론트 엔드 옵션</target>
        </trans-unit>
        <trans-unit id="6de07b5e7d3355f1ee784587e4e9b9310ce89167" translate="yes" xml:space="preserve">
          <source>Options for Objects</source>
          <target state="translated">객체 옵션</target>
        </trans-unit>
        <trans-unit id="7bba8ce1354b61b02f672f2468b0b0f0c600077c" translate="yes" xml:space="preserve">
          <source>Options for Output</source>
          <target state="translated">출력 옵션</target>
        </trans-unit>
        <trans-unit id="b8bceb2d83c081f4f5d71559b2d0f07edc9ee034" translate="yes" xml:space="preserve">
          <source>Options for a credential context can be configured either in &lt;code&gt;credential.*&lt;/code&gt; (which applies to all credentials), or &lt;code&gt;credential.&amp;lt;url&amp;gt;.*&lt;/code&gt;, where &amp;lt;url&amp;gt; matches the context as described above.</source>
          <target state="translated">자격 증명 컨텍스트에 대한 옵션은 &lt;code&gt;credential.*&lt;/code&gt; (모든 자격 증명에 적용됨) 또는 &lt;code&gt;credential.&amp;lt;url&amp;gt;.*&lt;/code&gt; 에서 구성 할 수 있습니다 . 여기서 &amp;lt;url&amp;gt;은 위에서 설명한 컨텍스트와 일치합니다.</target>
        </trans-unit>
        <trans-unit id="99e5139a65bfab6cb84777a431cb5c7403976793" translate="yes" xml:space="preserve">
          <source>Options related to fetching</source>
          <target state="translated">가져 오기 관련 옵션</target>
        </trans-unit>
        <trans-unit id="d96532d12a36cc4bb8cc0dcd0b87def47cb21823" translate="yes" xml:space="preserve">
          <source>Options related to merging</source>
          <target state="translated">병합 관련 옵션</target>
        </trans-unit>
        <trans-unit id="d2ce95980d5d4dcb8790725834688357cc504679" translate="yes" xml:space="preserve">
          <source>Options with long option names can be negated by prefixing &lt;code&gt;--no-&lt;/code&gt;. For example, &lt;code&gt;git branch&lt;/code&gt; has the option &lt;code&gt;--track&lt;/code&gt; which is &lt;code&gt;on&lt;/code&gt; by default. You can use &lt;code&gt;--no-track&lt;/code&gt; to override that behaviour. The same goes for &lt;code&gt;--color&lt;/code&gt; and &lt;code&gt;--no-color&lt;/code&gt;.</source>
          <target state="translated">접두어 &lt;code&gt;--no-&lt;/code&gt; 를 사용하여 옵션 이름이 긴 옵션은 무시할 수 있습니다 . 예를 들어, &lt;code&gt;git branch&lt;/code&gt; 에는 &lt;code&gt;--track&lt;/code&gt; 옵션 이 &lt;code&gt;on&lt;/code&gt; 기본적으로 켜져 있습니다. &lt;code&gt;--no-track&lt;/code&gt; 을 사용 하여 해당 동작을 재정의 할 수 있습니다. &lt;code&gt;--color&lt;/code&gt; 및 &lt;code&gt;--no-color&lt;/code&gt; 도 마찬가지 입니다.</target>
        </trans-unit>
        <trans-unit id="28e5f716aa8e690cf7323a0d5515626aac785807" translate="yes" xml:space="preserve">
          <source>Or if you are looking for the commit that fixed a bug, you might use</source>
          <target state="translated">또는 버그를 수정 한 커밋을 찾고 있다면</target>
        </trans-unit>
        <trans-unit id="9bcee5b07c3eb51996fe06466cb572259d48e74e" translate="yes" xml:space="preserve">
          <source>Or if you want more control, you can inspect the current state using for example &quot;git bisect visualize&quot;. It will launch gitk (or &quot;git log&quot; if the &lt;code&gt;DISPLAY&lt;/code&gt; environment variable is not set) to help you find a better bisection point.</source>
          <target state="translated">또는 더 많은 제어를 원하면 &quot;git bisect visualize&quot;를 사용하여 현재 상태를 검사 할 수 있습니다. 더 나은이 분점을 찾는 데 도움이되도록 gitk (또는 &lt;code&gt;DISPLAY&lt;/code&gt; 환경 변수가 설정되지 않은 경우 &quot;git log&quot; )를 시작합니다.</target>
        </trans-unit>
        <trans-unit id="ee046ba1657a42f0c8096ff30555d679415a486a" translate="yes" xml:space="preserve">
          <source>Or you could recall that the &lt;code&gt;&amp;hellip;​&lt;/code&gt; operator selects all commits reachable from either one reference or the other but not both; so</source>
          <target state="translated">아니면 리콜 할 수 &lt;code&gt;&amp;hellip;​&lt;/code&gt; 모든 커밋이 중 하나의 참조 또는 다른 있지만 둘 모두에서 접근 운영자가 선택; 그래서</target>
        </trans-unit>
        <trans-unit id="d85642c3d553b535f4731e23589126805881407c" translate="yes" xml:space="preserve">
          <source>Or, if you&amp;rsquo;ve already committed the merge that you want to throw away,</source>
          <target state="translated">또는 버리고 싶은 병합을 이미 커밋 한 경우</target>
        </trans-unit>
        <trans-unit id="7ec7c556c34b1673fc7046a255bf7eb40c6a1622" translate="yes" xml:space="preserve">
          <source>Or, prepare and create the commit in one step:</source>
          <target state="translated">또는 한 단계로 커밋을 준비하고 만듭니다.</target>
        </trans-unit>
        <trans-unit id="6d9770079506b18bb9154a95e976f54ab47a2b44" translate="yes" xml:space="preserve">
          <source>Ordinary changed entries have the following format:</source>
          <target state="translated">일반적으로 변경된 항목의 형식은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="789d55cf79d409acbcc0305ff19dbfa36d82a93d" translate="yes" xml:space="preserve">
          <source>Ordinary commits are only included if they are !TREESAME (though this can be changed, see &lt;code&gt;--sparse&lt;/code&gt; below).</source>
          <target state="translated">일반 커밋은! TREESAME 인 경우에만 포함됩니다 (이는 변경할 수 있지만 아래의 &lt;code&gt;--sparse&lt;/code&gt; 참조).</target>
        </trans-unit>
        <trans-unit id="3b945495727bab8a02c63542fdf26a485a2839f4" translate="yes" xml:space="preserve">
          <source>Original (version 1) pack-*.idx files have the following format:</source>
          <target state="translated">원본 (버전 1) pack-*. idx 파일의 형식은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="cd07568ac3f8fe8b9f1ca323e6aea33ce69f4d0c" translate="yes" xml:space="preserve">
          <source>Originally, &lt;code&gt;git svn&lt;/code&gt; recommended that developers pulled or merged from the &lt;code&gt;git svn&lt;/code&gt; branch. This was because the author favored &lt;code&gt;git svn set-tree B&lt;/code&gt; to commit a single head rather than the &lt;code&gt;git svn set-tree A..B&lt;/code&gt; notation to commit multiple commits. Use of &lt;code&gt;git pull&lt;/code&gt; or &lt;code&gt;git merge&lt;/code&gt; with &lt;code&gt;git svn set-tree A..B&lt;/code&gt; will cause non-linear history to be flattened when committing into SVN and this can lead to merge commits unexpectedly reversing previous commits in SVN.</source>
          <target state="translated">원래 &lt;code&gt;git svn&lt;/code&gt; 은 개발자가 &lt;code&gt;git svn&lt;/code&gt; 브랜치를 가져 오거나 병합 할 것을 권장했습니다 . 저자 가 여러 커밋을 커밋하기 위해 &lt;code&gt;git svn set-tree B&lt;/code&gt; 대신 &lt;code&gt;git svn set-tree A..B&lt;/code&gt; 표기법 대신 단일 헤드를 커밋하는 것을 선호했기 때문 입니다. 이용 &lt;code&gt;git pull&lt;/code&gt; 또는 &lt;code&gt;git merge&lt;/code&gt; 와 &lt;code&gt;git svn set-tree A..B&lt;/code&gt; SVN에 커밋 할 때 비선형 역사는 평평하게되도록하고이 병합 커밋이 예기치 않게 SVN에서 이전 커밋을 반전으로 이어질 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="6e6a6f2086bb5fe5dbfd17d8d5f502d48759834b" translate="yes" xml:space="preserve">
          <source>Other</source>
          <target state="translated">Other</target>
        </trans-unit>
        <trans-unit id="14bc34cb5d8d9f5a1986c4b4ced74a089ed31e83" translate="yes" xml:space="preserve">
          <source>Other &amp;lt;rev&amp;gt;^ Parent Shorthand Notations</source>
          <target state="translated">다른 &amp;lt;rev&amp;gt; ^ 부모 속기 표기법</target>
        </trans-unit>
        <trans-unit id="a3c040aeed88ddd482d5dec178bd5bb0b940738f" translate="yes" xml:space="preserve">
          <source>Other Items</source>
          <target state="translated">다른 물건들</target>
        </trans-unit>
        <trans-unit id="9cb6f2fb01dfa81e12bc1e11f0e7b676e54669fd" translate="yes" xml:space="preserve">
          <source>Other Options</source>
          <target state="translated">다른 옵션</target>
        </trans-unit>
        <trans-unit id="b66b145fc26fc91268f852efc133debcedca1335" translate="yes" xml:space="preserve">
          <source>Other ambiguity resolutions might be added in the future, but for now any other cases will error out with an error indicating what we tried, and depending on the &lt;code&gt;advice.pushUnqualifiedRefname&lt;/code&gt; configuration (see &lt;a href=&quot;git-config&quot;&gt;git-config[1]&lt;/a&gt;) suggest what refs/ namespace you may have wanted to push to.</source>
          <target state="translated">나중에 다른 모호한 해결 방법이 추가 될 수 있지만 지금은 다른 시도가 시도한 내용을 나타내는 오류와 함께 &lt;code&gt;advice.pushUnqualifiedRefname&lt;/code&gt; 을 제공합니다 .pushUnqualifiedRefname 구성 ( &lt;a href=&quot;git-config&quot;&gt;git-config [1] 참조&lt;/a&gt; ) 제안 / 네임 스페이스 제안 추진하고 싶었을 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="0d7c9916d5a97cfdd8b058afc3d1bac1c0a81b1f" translate="yes" xml:space="preserve">
          <source>Other arbitrary characters can also be encoded. For instance, &lt;code&gt;combine:tree:3+blob:none&lt;/code&gt; and &lt;code&gt;combine:tree%3A3+blob%3Anone&lt;/code&gt; are equivalent.</source>
          <target state="translated">다른 임의의 문자도 인코딩 할 수 있습니다. 예를 들어, &lt;code&gt;combine:tree:3+blob:none&lt;/code&gt; 과 &lt;code&gt;combine:tree%3A3+blob%3Anone&lt;/code&gt; 은 동일합니다.</target>
        </trans-unit>
        <trans-unit id="fca088ce123c6c3692799642c2a4b46b5050ca1e" translate="yes" xml:space="preserve">
          <source>Other consecutive asterisks are considered invalid.</source>
          <target state="translated">다른 연속적인 별표는 유효하지 않은 것으로 간주됩니다.</target>
        </trans-unit>
        <trans-unit id="060f4f2bc2ee9b99f69af6360a0055db64443a39" translate="yes" xml:space="preserve">
          <source>Other consecutive asterisks are considered regular asterisks and will match according to the previous rules.</source>
          <target state="translated">다른 별표는 일반 별표로 간주되며 이전 규칙에 따라 일치합니다.</target>
        </trans-unit>
        <trans-unit id="3c7b99f717eee9f16429ca9a79551f060c8f8236" translate="yes" xml:space="preserve">
          <source>Other diff formats</source>
          <target state="translated">다른 diff 형식</target>
        </trans-unit>
        <trans-unit id="81458045196e38ce4846b13cecf95d14abe58433" translate="yes" xml:space="preserve">
          <source>Other git-related tools may and do use their own variables. When inventing new variables for use in your own tool, make sure their names do not conflict with those that are used by Git itself and other popular tools, and describe them in your documentation.</source>
          <target state="translated">다른 자식 관련 도구는 자체 변수를 사용할 수 있습니다. 자체 도구에서 사용할 새 변수를 발명 할 때 해당 변수 이름이 Git 자체 및 기타 널리 사용되는 도구에서 사용되는 변수와 충돌하지 않도록하고 설명서에 설명하십시오.</target>
        </trans-unit>
        <trans-unit id="97855915001e4fe7ef5deb1c023c4697931e633c" translate="yes" xml:space="preserve">
          <source>Other options are available to control how the manual page is displayed. See &lt;a href=&quot;git-help&quot;&gt;git-help[1]&lt;/a&gt; for more information, because &lt;code&gt;git --help ...&lt;/code&gt; is converted internally into &lt;code&gt;git
help ...&lt;/code&gt;.</source>
          <target state="translated">매뉴얼 페이지가 표시되는 방법을 제어하기 위해 다른 옵션을 사용할 수 있습니다. &lt;code&gt;git --help ...&lt;/code&gt; 는 내부적으로 &lt;code&gt;git help ...&lt;/code&gt; 로 변환 되므로 자세한 내용 은 &lt;a href=&quot;git-help&quot;&gt;git-help [1]&lt;/a&gt; 을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="e9c8373137a028157f66c53c01b431d29c570146" translate="yes" xml:space="preserve">
          <source>Other tools</source>
          <target state="translated">다른 도구들</target>
        </trans-unit>
        <trans-unit id="89cbbb5c1b80969d7050a561dcd36c87c0241792" translate="yes" xml:space="preserve">
          <source>Other tools to fight regressions</source>
          <target state="translated">회귀와 싸우는 다른 도구</target>
        </trans-unit>
        <trans-unit id="15219db000aadb43433107a930098d54a12a2bf5" translate="yes" xml:space="preserve">
          <source>Other types of dangling objects (blobs and trees) are also possible, and dangling objects can arise in other situations.</source>
          <target state="translated">다른 유형의 매달린 물체 (블롭과 나무)도 가능하며 매달린 물체는 다른 상황에서 발생할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a8ad1c87f168347a129392343ff35eecf4e32d0a" translate="yes" xml:space="preserve">
          <source>Other variables</source>
          <target state="translated">다른 변수들</target>
        </trans-unit>
        <trans-unit id="dd705eff4c453915d022538452adca45ea549424" translate="yes" xml:space="preserve">
          <source>Other ways</source>
          <target state="translated">다른 방법들</target>
        </trans-unit>
        <trans-unit id="cf96d288cbee7ebb53d0ff80a9f63e5beaf8b0b4" translate="yes" xml:space="preserve">
          <source>Otherwise the remote branch of the first refspec is merged.</source>
          <target state="translated">그렇지 않으면 첫 번째 참조 사양의 원격 분기가 병합됩니다.</target>
        </trans-unit>
        <trans-unit id="32a9647b920b895ad400011726c72473bb775600" translate="yes" xml:space="preserve">
          <source>Otherwise, a tag reference that points directly at the given object (i.e., a lightweight tag) is created.</source>
          <target state="translated">그렇지 않으면 주어진 객체를 직접 가리키는 태그 참조 (즉, 가벼운 태그)가 생성됩니다.</target>
        </trans-unit>
        <trans-unit id="4b4eb603a71c26301f006805965a2bb224fe1a8d" translate="yes" xml:space="preserve">
          <source>Otherwise, all you need to do is start &lt;a href=&quot;git-daemon&quot;&gt;git-daemon[1]&lt;/a&gt;; it will listen on port 9418. By default, it will allow access to any directory that looks like a Git directory and contains the magic file git-daemon-export-ok. Passing some directory paths as &lt;code&gt;git daemon&lt;/code&gt; arguments will further restrict the exports to those paths.</source>
          <target state="translated">그렇지 않으면 시작해야 할 것은 start &lt;a href=&quot;git-daemon&quot;&gt;git-daemon [1]&lt;/a&gt; ; 포트 9418에서 수신 대기합니다. 기본적으로 Git 디렉토리처럼 보이고 매직 파일 git-daemon-export-ok가 포함 된 모든 디렉토리에 액세스 할 수 있습니다. 일부 디렉토리 경로를 &lt;code&gt;git daemon&lt;/code&gt; 인수 로 전달 하면 내보내기가 해당 경로로 제한됩니다.</target>
        </trans-unit>
        <trans-unit id="83933e66c19657c277855328b7212d55be330b69" translate="yes" xml:space="preserve">
          <source>Otherwise, if the &lt;code&gt;SSH_ASKPASS&lt;/code&gt; environment variable is set, its value is used as above.</source>
          <target state="translated">그렇지 않으면 &lt;code&gt;SSH_ASKPASS&lt;/code&gt; 환경 변수가 설정되면 해당 값이 위와 같이 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="06aca3f538987dd4baec5bd30c2c8ddce8b7736e" translate="yes" xml:space="preserve">
          <source>Otherwise, if the &lt;code&gt;core.askPass&lt;/code&gt; configuration variable is set, its value is used as above.</source>
          <target state="translated">그렇지 않으면 &lt;code&gt;core.askPass&lt;/code&gt; 구성 변수가 설정되면 해당 값이 위와 같이 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="4215362e197715214628992e14b639b7a98dbd7a" translate="yes" xml:space="preserve">
          <source>Otherwise, show the index format.</source>
          <target state="translated">그렇지 않으면 색인 형식을 표시하십시오.</target>
        </trans-unit>
        <trans-unit id="1bddd3a0b4a752779f115c3518d3c2b277475b51" translate="yes" xml:space="preserve">
          <source>Otherwise, success is indicated the Unix way, i.e. by simply exiting with a zero exit status.</source>
          <target state="translated">그렇지 않으면 성공은 유닉스 방식으로 표시됩니다. 즉, 단순히 종료 상태 0으로 종료합니다.</target>
        </trans-unit>
        <trans-unit id="adf9fb3bc458cf17571d90a6a9fffeaa1b715a6a" translate="yes" xml:space="preserve">
          <source>Otherwise, the merge proceeds in the usual way.</source>
          <target state="translated">그렇지 않으면 일반적인 방법으로 병합이 진행됩니다.</target>
        </trans-unit>
        <trans-unit id="0d438a86f2545e54eff98d96612fdf5bccb833ed" translate="yes" xml:space="preserve">
          <source>Otherwise, the topic that was merged to suddenly contains more than a single (well-separated) change. The many resulting small merges will greatly clutter up history. Anyone who later investigates the history of a file will have to find out whether that merge affected the topic in development. An upstream might even inadvertently be merged into a &quot;more stable&quot; branch. And so on.</source>
          <target state="translated">그렇지 않으면 병합 된 주제에 갑자기 단일 (잘 분리 된) 변경 사항이 포함됩니다. 결과로 발생하는 많은 소규모 합병은 역사를 크게 어지럽 힙니다. 나중에 파일 히스토리를 조사하는 사람은 병합이 개발 주제에 영향을 주는지 여부를 찾아야합니다. 업스트림은 실수로 &quot;보다 안정적인&quot;브랜치로 병합 될 수도 있습니다. 등등.</target>
        </trans-unit>
        <trans-unit id="9aea25a9a0905a830a51359c1723b329df787dff" translate="yes" xml:space="preserve">
          <source>Otherwise, the user is prompted on the terminal.</source>
          <target state="translated">그렇지 않으면 터미널에 사용자에게 프롬프트가 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="38c6fc8779b3b84c1e5bc6184edd3674dd536e89" translate="yes" xml:space="preserve">
          <source>Otherwise, this command applies the arguments passed using the &lt;code&gt;--trailer&lt;/code&gt; option, if any, to the commit message part of each input file. The result is emitted on the standard output.</source>
          <target state="translated">그렇지 않으면이 명령은 &lt;code&gt;--trailer&lt;/code&gt; 옵션을 사용하여 전달 된 인수 를 각 입력 파일의 커밋 메시지 부분에 적용합니다. 결과는 표준 출력에서 ​​방출됩니다.</target>
        </trans-unit>
        <trans-unit id="7befa93bf7555efa6c53836dd2ebb58604474c19" translate="yes" xml:space="preserve">
          <source>Otherwise, you need more information. How do you tell which version of the file has been lost?</source>
          <target state="translated">그렇지 않으면 추가 정보가 필요합니다. 어떤 버전의 파일이 손실되었는지 어떻게 알 수 있습니까?</target>
        </trans-unit>
        <trans-unit id="4bed336194a9a5c86b6a734f03b3570d2aae1a68" translate="yes" xml:space="preserve">
          <source>Output</source>
          <target state="translated">Output</target>
        </trans-unit>
        <trans-unit id="bfba9983f4010a4e13ddf1f4da6c4d9462a74630" translate="yes" xml:space="preserve">
          <source>Output &quot;connectivity-ok&quot; if the received pack is self-contained and connected.</source>
          <target state="translated">수신 된 팩이 자체 포함되어 있고 연결된 경우 &quot;connectivity-ok&quot;를 출력합니다.</target>
        </trans-unit>
        <trans-unit id="14d787baf83270b720015688dc1b0d825f139765" translate="yes" xml:space="preserve">
          <source>Output \0 instead of the character that normally follows a file name.</source>
          <target state="translated">일반적으로 파일 이름 뒤에 오는 문자 대신 \ 0을 출력합니다.</target>
        </trans-unit>
        <trans-unit id="02b83bf95635a4c88bd0634054e0b05541ae55d4" translate="yes" xml:space="preserve">
          <source>Output a condensed summary of extended header information such as creations, renames and mode changes.</source>
          <target state="translated">생성, 이름 변경 및 모드 변경과 같은 확장 된 헤더 정보의 요약 요약을 출력합니다.</target>
        </trans-unit>
        <trans-unit id="6dbea2796f7c2da05dc872fbc20cb3b286f106fd" translate="yes" xml:space="preserve">
          <source>Output a condensed summary of extended header information such as file creations or deletions (&quot;new&quot; or &quot;gone&quot;, optionally &quot;+l&quot; if it&amp;rsquo;s a symlink) and mode changes (&quot;+x&quot; or &quot;-x&quot; for adding or removing executable bit respectively) in diffstat. The information is put between the filename part and the graph part. Implies &lt;code&gt;--stat&lt;/code&gt;.</source>
          <target state="translated">파일 생성 또는 삭제 ( &quot;new&quot;또는 &quot;gone&quot;, 선택적으로 symlink 인 경우 &quot;+ l&quot;) 및 추가 또는 제거를위한 모드 변경 ( &quot;+ x&quot;또는 &quot;-x&quot;)과 같은 확장 된 헤더 정보 요약 요약 출력 diffstat에서 각각 실행 비트). 정보는 파일 이름 부분과 그래프 부분 사이에 있습니다. &lt;code&gt;--stat&lt;/code&gt; 를 의미 합니다.</target>
        </trans-unit>
        <trans-unit id="86b8e4f6e5044ecf1fc221aacfd89b826aa45a4b" translate="yes" xml:space="preserve">
          <source>Output all merge bases for the commits, instead of just one.</source>
          <target state="translated">커밋에 대한 모든 병합 기반을 하나 대신 출력하십시오.</target>
        </trans-unit>
        <trans-unit id="c4fd496863f1ea4adcfb9e1e5209189d8bcbae5b" translate="yes" xml:space="preserve">
          <source>Output an all-zero hash in each patch&amp;rsquo;s From header instead of the hash of the commit.</source>
          <target state="translated">커밋의 해시 대신 각 패치의 From 헤더에 모두 0의 해시를 출력합니다.</target>
        </trans-unit>
        <trans-unit id="646a42919af7ad3c76023f798af12df793449561" translate="yes" xml:space="preserve">
          <source>Output diff in reverse.</source>
          <target state="translated">반대로 diff를 출력하십시오.</target>
        </trans-unit>
        <trans-unit id="973b33dc2cc053fd8a3739d3b278f90232b34e64" translate="yes" xml:space="preserve">
          <source>Output excluded boundary commits. Boundary commits are prefixed with &lt;code&gt;-&lt;/code&gt;.</source>
          <target state="translated">제외 된 경계 커밋 출력. 경계 커밋 앞에 &lt;code&gt;-&lt;/code&gt; 가 붙습니다 .</target>
        </trans-unit>
        <trans-unit id="c3872ebaf63738dccf26222059fb06a34ea9a53d" translate="yes" xml:space="preserve">
          <source>Output file names will be a simple number sequence without the default first line of the commit appended.</source>
          <target state="translated">출력 파일 이름은 커밋의 기본 첫 줄이 추가되지 않은 간단한 숫자 시퀀스입니다.</target>
        </trans-unit>
        <trans-unit id="c03f08a8f205e4568e916e3cfaa50c6a48749706" translate="yes" xml:space="preserve">
          <source>Output format</source>
          <target state="translated">출력 형식</target>
        </trans-unit>
        <trans-unit id="d018168db6adc860beb206930bf9272bcf4432cb" translate="yes" xml:space="preserve">
          <source>Output from &lt;code&gt;git describe&lt;/code&gt;; i.e. a closest tag, optionally followed by a dash and a number of commits, followed by a dash, a &lt;code&gt;g&lt;/code&gt;, and an abbreviated object name.</source>
          <target state="translated">&lt;code&gt;git describe&lt;/code&gt; 출력 설명 ; 즉, 가장 가까운 태그, 선택적으로 대시와 여러 커밋, 대시, &lt;code&gt;g&lt;/code&gt; 및 축약 된 객체 이름이 뒤 따릅니다 .</target>
        </trans-unit>
        <trans-unit id="57be6fd315ed7958a6a11b416634cb9af54c1202" translate="yes" xml:space="preserve">
          <source>Output information on each ref</source>
          <target state="translated">각 심판에 대한 출력 정보</target>
        </trans-unit>
        <trans-unit id="a471d58e2fcbf4f373e5dd800df97d7ecddc4b2a" translate="yes" xml:space="preserve">
          <source>Output only the last line of the &lt;code&gt;--stat&lt;/code&gt; format containing total number of modified files, as well as number of added and deleted lines.</source>
          <target state="translated">총 수정 된 파일 수와 추가 및 삭제 된 행 수를 포함 하는 &lt;code&gt;--stat&lt;/code&gt; 형식 의 마지막 행만 출력합니다 .</target>
        </trans-unit>
        <trans-unit id="09afa8b7712ce7db5d67e850045b13df59d4e1ae" translate="yes" xml:space="preserve">
          <source>Output only the names of config variables for &lt;code&gt;--list&lt;/code&gt; or &lt;code&gt;--get-regexp&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;--list&lt;/code&gt; 또는 &lt;code&gt;--get-regexp&lt;/code&gt; 에 대한 구성 변수 이름 만 출력하십시오 .</target>
        </trans-unit>
        <trans-unit id="86aa1f4dbf3c69df52c4dcdcb3513ddaac888349" translate="yes" xml:space="preserve">
          <source>Output only the trailers, not any other parts of the input.</source>
          <target state="translated">입력의 다른 부분이 아닌 트레일러 만 출력하십시오.</target>
        </trans-unit>
        <trans-unit id="db37f07e7f23e51cc792b3b6ff625f7fbb6a099c" translate="yes" xml:space="preserve">
          <source>Output only trailers that exist in the input; do not add any from the command-line or by following configured &lt;code&gt;trailer.*&lt;/code&gt; rules.</source>
          <target state="translated">입력에 존재하는 트레일러 만 출력합니다. 명령 줄이나 구성한 &lt;code&gt;trailer.*&lt;/code&gt; 규칙 에 따라 추가하지 마십시오 .</target>
        </trans-unit>
        <trans-unit id="9f94a54620a30e7ce03e12a657369e604dddd0ea" translate="yes" xml:space="preserve">
          <source>Output stability</source>
          <target state="translated">출력 안정성</target>
        </trans-unit>
        <trans-unit id="eec068e91917644b4f85137aa6730536687188c8" translate="yes" xml:space="preserve">
          <source>Output the commits chosen to be shown (see Commit Limiting section above) in reverse order. Cannot be combined with &lt;code&gt;--walk-reflogs&lt;/code&gt;.</source>
          <target state="translated">표시되도록 선택된 커밋을 역순으로 출력합니다 (위의 커밋 제한 섹션 참조). &lt;code&gt;--walk-reflogs&lt;/code&gt; 와 함께 사용할 수 없습니다 .</target>
        </trans-unit>
        <trans-unit id="b5f16fa854dad4b03b2649c62b3407ce506ca41f" translate="yes" xml:space="preserve">
          <source>Output the distribution of relative amount of changes for each sub-directory. The behavior of &lt;code&gt;--dirstat&lt;/code&gt; can be customized by passing it a comma separated list of parameters. The defaults are controlled by the &lt;code&gt;diff.dirstat&lt;/code&gt; configuration variable (see &lt;a href=&quot;git-config&quot;&gt;git-config[1]&lt;/a&gt;). The following parameters are available:</source>
          <target state="translated">각 하위 디렉토리에 대한 상대적 변경 량의 분포를 출력합니다. &lt;code&gt;--dirstat&lt;/code&gt; 의 동작은 쉼표로 구분 된 매개 변수 목록을 전달하여 사용자 정의 할 수 있습니다. 기본값은 &lt;code&gt;diff.dirstat&lt;/code&gt; 구성 변수에 의해 제어됩니다 ( &lt;a href=&quot;git-config&quot;&gt;git-config [1] 참조&lt;/a&gt; ). 다음과 같은 파라미터를 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f44ba9d91e7de35dadf965ce7b9f83b740777703" translate="yes" xml:space="preserve">
          <source>Output to a specific file instead of stdout.</source>
          <target state="translated">stdout 대신 특정 파일로 출력합니다.</target>
        </trans-unit>
        <trans-unit id="1374322e99ee5a882a272ee284ec9ea86e209683" translate="yes" xml:space="preserve">
          <source>Output uses the same format as &lt;code&gt;git cat-file --batch&lt;/code&gt;:</source>
          <target state="translated">출력은 &lt;code&gt;git cat-file --batch&lt;/code&gt; 와 동일한 형식을 사용합니다 .</target>
        </trans-unit>
        <trans-unit id="50880c18d623e2367f83a87791b3da910b72fa81" translate="yes" xml:space="preserve">
          <source>Output uses the same format as &lt;code&gt;git ls-tree &amp;lt;tree&amp;gt; -- &amp;lt;path&amp;gt;&lt;/code&gt;:</source>
          <target state="translated">출력은 &lt;code&gt;git ls-tree &amp;lt;tree&amp;gt; -- &amp;lt;path&amp;gt;&lt;/code&gt; 와 동일한 형식을 사용합니다 .</target>
        </trans-unit>
        <trans-unit id="12aec147318e848c7d54969418eb1ab7603e65c0" translate="yes" xml:space="preserve">
          <source>Outputs some statistics to stderr. Has a small performance penalty.</source>
          <target state="translated">일부 통계를 stderr에 출력합니다. 성능 저하가 적습니다.</target>
        </trans-unit>
        <trans-unit id="bb044abda9deb6fdc3e0634ed0f85ce258bcc5dc" translate="yes" xml:space="preserve">
          <source>Outputs the SHA1 of every commit in &lt;code&gt;&amp;lt;limit&amp;gt;..&amp;lt;head&amp;gt;&lt;/code&gt;, prefixed with &lt;code&gt;-&lt;/code&gt; for commits that have an equivalent in &amp;lt;upstream&amp;gt;, and &lt;code&gt;+&lt;/code&gt; for commits that do not.</source>
          <target state="translated">모든의 SHA1이 커밋 출력 &lt;code&gt;&amp;lt;limit&amp;gt;..&amp;lt;head&amp;gt;&lt;/code&gt; , 접두사 &lt;code&gt;-&lt;/code&gt; &amp;lt;업스트림&amp;gt;에 해당하는이 커밋을 위해, 그리고 &lt;code&gt;+&lt;/code&gt; 하지 커밋합니다.</target>
        </trans-unit>
        <trans-unit id="27115802f1c296a1dfb4ce768084e3e086e70c8c" translate="yes" xml:space="preserve">
          <source>Override &lt;code&gt;tag.gpgSign&lt;/code&gt; configuration variable that is set to force each and every tag to be signed.</source>
          <target state="translated">각각의 모든 태그에 서명하도록 설정된 &lt;code&gt;tag.gpgSign&lt;/code&gt; 구성 변수를 재정의 하십시오 .</target>
        </trans-unit>
        <trans-unit id="f98c38feba04de33a87daf02cddb4bc0af45f925" translate="yes" xml:space="preserve">
          <source>Override earlier --rebase.</source>
          <target state="translated">이전 --rebase를 재정의하십시오.</target>
        </trans-unit>
        <trans-unit id="bf7cdfd38925dba890e8c6c44d76b710ca912a26" translate="yes" xml:space="preserve">
          <source>Override the HTTP proxy, normally configured using the &lt;code&gt;http_proxy&lt;/code&gt;, &lt;code&gt;https_proxy&lt;/code&gt;, and &lt;code&gt;all_proxy&lt;/code&gt; environment variables (see &lt;code&gt;curl(1)&lt;/code&gt;). In addition to the syntax understood by curl, it is possible to specify a proxy string with a user name but no password, in which case git will attempt to acquire one in the same way it does for other credentials. See &lt;a href=&quot;gitcredentials&quot;&gt;gitcredentials[7]&lt;/a&gt; for more information. The syntax thus is &lt;code&gt;[protocol://][user[:password]@]proxyhost[:port]&lt;/code&gt;. This can be overridden on a per-remote basis; see remote.&amp;lt;name&amp;gt;.proxy</source>
          <target state="translated">일반적으로 &lt;code&gt;http_proxy&lt;/code&gt; , &lt;code&gt;https_proxy&lt;/code&gt; 및 &lt;code&gt;all_proxy&lt;/code&gt; 환경 변수를 사용하여 구성된 HTTP 프록시를 대체 하십시오 ( &lt;code&gt;curl(1)&lt;/code&gt; 참조 ). curl이 이해하는 구문 외에도 사용자 이름은 있지만 암호는없는 프록시 문자열을 지정할 수 있습니다.이 경우 git은 다른 자격 증명과 동일한 방식으로 문자열을 획득하려고 시도합니다. 자세한 내용은 &lt;a href=&quot;gitcredentials&quot;&gt;gitcredentials [7]&lt;/a&gt; 를 참조하십시오. 따라서 구문은 &lt;code&gt;[protocol://][user[:password]@]proxyhost[:port]&lt;/code&gt; 입니다. 원격으로이를 무시할 수 있습니다. remote. &amp;lt;name&amp;gt; .proxy를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="ca2a7d0ade908f47d0a242141742817435033d82" translate="yes" xml:space="preserve">
          <source>Override the author date used in the commit.</source>
          <target state="translated">커밋에 사용 된 작성자 날짜를 재정의합니다.</target>
        </trans-unit>
        <trans-unit id="afbb46ef37a88110fa3c814b4440b9bab3c588ca" translate="yes" xml:space="preserve">
          <source>Override the commit author. Specify an explicit author using the standard &lt;code&gt;A U Thor &amp;lt;author@example.com&amp;gt;&lt;/code&gt; format. Otherwise &amp;lt;author&amp;gt; is assumed to be a pattern and is used to search for an existing commit by that author (i.e. rev-list --all -i --author=&amp;lt;author&amp;gt;); the commit author is then copied from the first such commit found.</source>
          <target state="translated">커밋 작성자를 재정의합니다. 표준 &lt;code&gt;A U Thor &amp;lt;author@example.com&amp;gt;&lt;/code&gt; 형식을 사용하여 명시 적 작성자를 지정하십시오 . 그렇지 않으면 &amp;lt;author&amp;gt;는 패턴으로 간주되며 해당 작성자가 기존 커밋을 검색하는 데 사용됩니다 (예 : rev-list --all -i --author = &amp;lt;author&amp;gt;). 그런 다음 커밋 작성자는 처음 발견 된 커밋에서 복사됩니다.</target>
        </trans-unit>
        <trans-unit id="e3aa6564c96bc2c1fa2d64bc52314ce125c2e1b2" translate="yes" xml:space="preserve">
          <source>Override the default help format used by &lt;a href=&quot;git-help&quot;&gt;git-help[1]&lt;/a&gt;. Values &lt;code&gt;man&lt;/code&gt;, &lt;code&gt;info&lt;/code&gt;, &lt;code&gt;web&lt;/code&gt; and &lt;code&gt;html&lt;/code&gt; are supported. &lt;code&gt;man&lt;/code&gt; is the default. &lt;code&gt;web&lt;/code&gt; and &lt;code&gt;html&lt;/code&gt; are the same.</source>
          <target state="translated">&lt;a href=&quot;git-help&quot;&gt;git-help [1]에서&lt;/a&gt; 사용하는 기본 도움말 형식을 재정의하십시오 . 값 &lt;code&gt;man&lt;/code&gt; , &lt;code&gt;info&lt;/code&gt; , &lt;code&gt;web&lt;/code&gt; 및 &lt;code&gt;html&lt;/code&gt; 지원됩니다. &lt;code&gt;man&lt;/code&gt; 이 기본값입니다. &lt;code&gt;web&lt;/code&gt; 과 &lt;code&gt;html&lt;/code&gt; 은 동일합니다.</target>
        </trans-unit>
        <trans-unit id="90af133b98db5fc195076e23392ec3cd67c3e89c" translate="yes" xml:space="preserve">
          <source>Override the default tempdir.</source>
          <target state="translated">기본 tempdir을 대체하십시오.</target>
        </trans-unit>
        <trans-unit id="5b51681506c224a8c47f1343a9ecd64433151e38" translate="yes" xml:space="preserve">
          <source>Override the executable bit of the added files. The executable bit is only changed in the index, the files on disk are left unchanged.</source>
          <target state="translated">추가 된 파일의 실행 비트를 무시하십시오. 실행 비트는 인덱스에서만 변경되고 디스크의 파일은 변경되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="2478241e90c06d40d8344e2c734cc9e34ffd0d73" translate="yes" xml:space="preserve">
          <source>Override the path for the given tool that may be used to browse HTML help (see &lt;code&gt;-w&lt;/code&gt; option in &lt;a href=&quot;git-help&quot;&gt;git-help[1]&lt;/a&gt;) or a working repository in gitweb (see &lt;a href=&quot;git-instaweb&quot;&gt;git-instaweb[1]&lt;/a&gt;).</source>
          <target state="translated">HTML 도움말 ( &lt;a href=&quot;git-help&quot;&gt;git-help [1]의 &lt;/a&gt; &lt;code&gt;-w&lt;/code&gt; 옵션 참조 ) 또는 gitweb의 작업 저장소 ( &lt;a href=&quot;git-instaweb&quot;&gt;git-instaweb [1]&lt;/a&gt; 참조) 를 탐색하는 데 사용할 수있는 지정된 도구의 경로를 대체하십시오 .</target>
        </trans-unit>
        <trans-unit id="eeb1b59c781a411c8a2ade9041a0a224d6888a83" translate="yes" xml:space="preserve">
          <source>Override the path for the given tool that may be used to display help in the &lt;code&gt;man&lt;/code&gt; format. See &lt;a href=&quot;git-help&quot;&gt;git-help[1]&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;man&lt;/code&gt; 형식으로 도움말을 표시하는 데 사용될 수있는 주어진 도구의 경로를 대체하십시오 . &lt;a href=&quot;git-help&quot;&gt;git-help [1]를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="adf75a51b2ad5d1ae80303fa7c85676af23cae71" translate="yes" xml:space="preserve">
          <source>Override the path for the given tool. This is useful in case your tool is not in the PATH.</source>
          <target state="translated">주어진 도구의 경로를 무시하십시오. 도구가 PATH에없는 경우에 유용합니다.</target>
        </trans-unit>
        <trans-unit id="d7b3947bcc6a75423b4dad1a16da833c821be77f" translate="yes" xml:space="preserve">
          <source>Override the up-to-date check.</source>
          <target state="translated">최신 확인을 무시하십시오.</target>
        </trans-unit>
        <trans-unit id="4f22a960f4dfa712696d5fbbb0afb1a8a1360ea3" translate="yes" xml:space="preserve">
          <source>Overrides a previous &lt;code&gt;--no-walk&lt;/code&gt;.</source>
          <target state="translated">이전 &lt;code&gt;--no-walk&lt;/code&gt; 를 재정의합니다 .</target>
        </trans-unit>
        <trans-unit id="dcd0bd07179d4dab7adf6735a6d8e2d1ef6bb9e3" translate="yes" xml:space="preserve">
          <source>Overwrite the contents of the files that match the pathspec. When the &lt;code&gt;&amp;lt;tree-ish&amp;gt;&lt;/code&gt; (most often a commit) is not given, overwrite working tree with the contents in the index. When the &lt;code&gt;&amp;lt;tree-ish&amp;gt;&lt;/code&gt; is given, overwrite both the index and the working tree with the contents at the &lt;code&gt;&amp;lt;tree-ish&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">pathspec과 일치하는 파일의 내용을 덮어 씁니다. 때 &lt;code&gt;&amp;lt;tree-ish&amp;gt;&lt;/code&gt; (가장 자주 커밋) 인덱스의 내용으로, 덮어 쓰기 작업 트리를 부여하지 않습니다. 때 &lt;code&gt;&amp;lt;tree-ish&amp;gt;&lt;/code&gt; 주어진다, 인덱스 및 상기 내용으로 작업 트리를 모두 덮어 &lt;code&gt;&amp;lt;tree-ish&amp;gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="bdd66a641be22e4e3d7b30653f72f1e5443e834b" translate="yes" xml:space="preserve">
          <source>P4 does not have the same concept of a branch as Git. Instead, p4 organizes its content as a directory tree, where by convention different logical branches are in different locations in the tree. The &lt;code&gt;p4 branch&lt;/code&gt; command is used to maintain mappings between different areas in the tree, and indicate related content. &lt;code&gt;git p4&lt;/code&gt; can use these mappings to determine branch relationships.</source>
          <target state="translated">P4는 Git과 같은 브랜치 개념이 없습니다. 대신 p4는 내용을 디렉토리 트리로 구성합니다. 여기서 규칙에 따라 다른 논리적 분기가 트리의 다른 위치에 있습니다. &lt;code&gt;p4 branch&lt;/code&gt; 명령은 트리에서 서로 다른 영역 간의 매핑을 유지하는 데 사용하고, 관련 콘텐츠를 표시합니다. &lt;code&gt;git p4&lt;/code&gt; 는 이러한 매핑을 사용하여 분기 관계를 결정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c377e9687b993a1d0b2786f798f75e99668d5825" translate="yes" xml:space="preserve">
          <source>P4 repositories can be added to an existing Git repository using &lt;code&gt;git p4 sync&lt;/code&gt; too:</source>
          <target state="translated">&lt;code&gt;git p4 sync&lt;/code&gt; 를 사용하여 P4 리포지토리를 기존 Git 리포지토리에 추가 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="899e81641132daf9598824927775cf00c10d02f7" translate="yes" xml:space="preserve">
          <source>PATH_INFO (if GIT_PROJECT_ROOT is set, otherwise PATH_TRANSLATED)</source>
          <target state="translated">PATH_INFO (GIT_PROJECT_ROOT가 설정된 경우, 그렇지 않은 경우 PATH_TRANSLATED)</target>
        </trans-unit>
        <trans-unit id="6decffd0412eaf2f154545c6af90e7d695d8d0f2" translate="yes" xml:space="preserve">
          <source>PATH_INFO usage</source>
          <target state="translated">PATH_INFO 사용법</target>
        </trans-unit>
        <trans-unit id="4a9500dfda14165da62b0d759d4f7a0a1828ddac" translate="yes" xml:space="preserve">
          <source>PERF Format</source>
          <target state="translated">PERF 형식</target>
        </trans-unit>
        <trans-unit id="ac3820bb690c0e4f8afb899d021a87e2215d9f6c" translate="yes" xml:space="preserve">
          <source>Pack Idx file:</source>
          <target state="translated">팩 Idx 파일 :</target>
        </trans-unit>
        <trans-unit id="8e5bd2c516c0b64c7a093133ad05311d5aa715dd" translate="yes" xml:space="preserve">
          <source>Pack heads and tags for efficient repository access</source>
          <target state="translated">효율적인 저장소 액세스를위한 팩 헤드 및 태그</target>
        </trans-unit>
        <trans-unit id="916c15851c2e9c9482b6f7ae827a2ef3628cc3b5" translate="yes" xml:space="preserve">
          <source>Pack unpacked objects in a repository</source>
          <target state="translated">압축 해제 된 오브젝트를 저장소에 포장</target>
        </trans-unit>
        <trans-unit id="fd708a7f9f7d413af09614d69248d6ad385118ff" translate="yes" xml:space="preserve">
          <source>Pack unreachable loose objects (and their loose counterparts removed). This implies &lt;code&gt;--revs&lt;/code&gt;.</source>
          <target state="translated">손이 닿지 않는 느슨한 물체를 포장하십시오 (느슨한 물체는 제거하십시오). 이것은 &lt;code&gt;--revs&lt;/code&gt; 를 의미 합니다 .</target>
        </trans-unit>
        <trans-unit id="eee993c07c74282866f868d204d9cb338384817b" translate="yes" xml:space="preserve">
          <source>Pack-*.pack files have the following format:</source>
          <target state="translated">Pack-*. pack 파일의 형식은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="f066589e1e591fe2ae534900eb4066417a728dbe" translate="yes" xml:space="preserve">
          <source>Packet-line framing</source>
          <target state="translated">패킷 라인 프레임</target>
        </trans-unit>
        <trans-unit id="df55d31d287518a9be7d4b1795862cdf2fc41470" translate="yes" xml:space="preserve">
          <source>Packfile optimization</source>
          <target state="translated">팩 파일 최적화</target>
        </trans-unit>
        <trans-unit id="64fd302d4a38d46210fcac733698d9d782d1ce2e" translate="yes" xml:space="preserve">
          <source>Packfiles can be marked as &quot;special&quot; using empty files that share the initial name but replace &quot;.pack&quot; with &quot;.keep&quot; or &quot;.promisor&quot;. We can add an optional chunk of data to the multi-pack-index that records flags of information about the packfiles. This allows new states, such as &lt;code&gt;repacked&lt;/code&gt; or &lt;code&gt;redeltified&lt;/code&gt;, that can help with pack maintenance in a multi-pack environment. It may also be helpful to organize packfiles by object type (commit, tree, blob, etc.) and use this metadata to help that maintenance.</source>
          <target state="translated">팩 파일은 초기 이름을 공유하지만 &quot;.pack&quot;을 &quot;.keep&quot;또는 &quot;.promisor&quot;로 바꾸는 빈 파일을 사용하여 &quot;special&quot;으로 표시 할 수 있습니다. 팩 파일에 대한 정보 플래그를 기록하는 선택적인 데이터 청크를 다중 팩 인덱스에 추가 할 수 있습니다. 이렇게하면 다중 포장 환경에서 포장 유지 관리에 도움 이되는 새로운 &lt;code&gt;repacked&lt;/code&gt; 상태 (예 : 재 포장 또는 재 &lt;code&gt;redeltified&lt;/code&gt; )가 가능합니다. 개체 유형 (커밋, 트리, 얼룩 등)별로 팩 파일을 구성하고이 메타 데이터를 사용하여 유지 관리에 도움이 될 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="31a1b2f09e14954b347560b78870b7472ffa3669" translate="yes" xml:space="preserve">
          <source>Packing objects</source>
          <target state="translated">포장물</target>
        </trans-unit>
        <trans-unit id="128ae9baa6dfe921179664d6c2722a23816ef24b" translate="yes" xml:space="preserve">
          <source>Packing your repository</source>
          <target state="translated">저장소 포장</target>
        </trans-unit>
        <trans-unit id="1b3cc3c53ffc64e43edbae102e2fbe605f6c35c2" translate="yes" xml:space="preserve">
          <source>Packs (files that store many objects in compressed form, along with index files to allow them to be randomly accessed) are found in this directory.</source>
          <target state="translated">팩 (이 파일은 무작위로 액세스 할 수 있도록 색인 파일과 함께 압축 된 형태로 많은 오브젝트를 저장하는 파일)을이 디렉토리에 있습니다.</target>
        </trans-unit>
        <trans-unit id="5e77e9eb9a9ac23524177c29c90fcfbb2bbc9d8d" translate="yes" xml:space="preserve">
          <source>Packs are used to reduce the load on mirror systems, backup engines, disk storage, etc.</source>
          <target state="translated">팩은 미러 시스템, 백업 엔진, 디스크 스토리지 등의로드를 줄이는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="62f32a40a6ada609c72de752933f4d26ac1e6bb8" translate="yes" xml:space="preserve">
          <source>Parallel operation</source>
          <target state="translated">병렬 작업</target>
        </trans-unit>
        <trans-unit id="669184806db1339e6c6beee1ab38494c4529dab6" translate="yes" xml:space="preserve">
          <source>Parent/child relations are only visible with &lt;code&gt;--parents&lt;/code&gt;, but that does not affect the commits selected in default mode, so we have shown the parent lines.</source>
          <target state="translated">부모 / 자식 관계는 &lt;code&gt;--parents&lt;/code&gt; 에만 표시 되지만 기본 모드에서 선택한 커밋에는 영향을 미치지 않으므로 부모 행을 표시했습니다.</target>
        </trans-unit>
        <trans-unit id="2efa637ebfd57586deb686233e5bd089abfab182" translate="yes" xml:space="preserve">
          <source>Parse the date string, and output the corresponding --max-age= parameter for &lt;code&gt;git rev-list&lt;/code&gt;.</source>
          <target state="translated">날짜 문자열을 구문 분석하고 &lt;code&gt;git rev-list&lt;/code&gt; 에 해당하는 --max-age = 매개 변수를 출력하십시오 .</target>
        </trans-unit>
        <trans-unit id="26f771d12548577279103a59da15ea4fd6835ad3" translate="yes" xml:space="preserve">
          <source>Parse the date string, and output the corresponding --min-age= parameter for &lt;code&gt;git rev-list&lt;/code&gt;.</source>
          <target state="translated">날짜 문자열을 구문 분석하고 &lt;code&gt;git rev-list&lt;/code&gt; 에 해당하는 --min-age = 매개 변수를 출력하십시오 .</target>
        </trans-unit>
        <trans-unit id="868df803566ac09bf6f4d16dac1cc6f9e22a2eb9" translate="yes" xml:space="preserve">
          <source>Parseopt</source>
          <target state="translated">Parseopt</target>
        </trans-unit>
        <trans-unit id="2f58caf00da93e9d39ff1263d9c88686c41f1f30" translate="yes" xml:space="preserve">
          <source>Part two of this tutorial explains the object database, the index file, and a few other odds and ends that you&amp;rsquo;ll need to make the most of Git. You can find it at &lt;a href=&quot;gittutorial-2&quot;&gt;gittutorial-2[7]&lt;/a&gt;.</source>
          <target state="translated">이 튜토리얼의 2 부에서는 개체 데이터베이스, 인덱스 파일 및 Git을 최대한 활용하는 데 필요한 몇 가지 확률과 끝을 설명합니다. &lt;a href=&quot;gittutorial-2&quot;&gt;gittutorial-2 [7]&lt;/a&gt; 에서 찾을 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="8fc0213ea3567cb4b4477ecb78349de8a29f1b86" translate="yes" xml:space="preserve">
          <source>Partly for this reason, many experienced Git users, even when working on an otherwise merge-heavy project, keep the history linear by rebasing against the latest upstream version before publishing.</source>
          <target state="translated">이러한 이유로 인해 경험 많은 Git 사용자는 병합이 많은 프로젝트에서 작업하는 경우에도 게시하기 전에 최신 업스트림 버전을 기반으로 기록을 선형으로 유지합니다.</target>
        </trans-unit>
        <trans-unit id="18fd2ef3833f23df7a3b9f0464ed57cacda16deb" translate="yes" xml:space="preserve">
          <source>Pass --quiet to git-fetch-pack and silence any other internally used git commands. Progress is not reported to the standard error stream.</source>
          <target state="translated">--quiet을 git-fetch-pack에 전달하고 내부적으로 사용되는 다른 git 명령을 모두 침묵시킵니다. 진행률은 표준 오류 스트림에보고되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="c1e733f5e8ef91bfe63a917a4d6fc9ec48d03354" translate="yes" xml:space="preserve">
          <source>Pass --verbose to git-fetch and git-merge.</source>
          <target state="translated">git-fetch 및 git-merge에 --verbose를 전달하십시오.</target>
        </trans-unit>
        <trans-unit id="5a8b2c7c1f37cd374533e299d8006c239b39cc94" translate="yes" xml:space="preserve">
          <source>Pass &lt;code&gt;-b&lt;/code&gt; flag to &lt;code&gt;git mailinfo&lt;/code&gt; (see &lt;a href=&quot;git-mailinfo&quot;&gt;git-mailinfo[1]&lt;/a&gt;).</source>
          <target state="translated">합격 &lt;code&gt;-b&lt;/code&gt; 에 깃발 &lt;code&gt;git mailinfo&lt;/code&gt; (참조 &lt;a href=&quot;git-mailinfo&quot;&gt;자식-MAILINFO [1]&lt;/a&gt; ).</target>
        </trans-unit>
        <trans-unit id="6ad058b096d5d940b830a4807c658be882c3c4ae" translate="yes" xml:space="preserve">
          <source>Pass &lt;code&gt;-k&lt;/code&gt; flag to &lt;code&gt;git mailinfo&lt;/code&gt; (see &lt;a href=&quot;git-mailinfo&quot;&gt;git-mailinfo[1]&lt;/a&gt;).</source>
          <target state="translated">합격 &lt;code&gt;-k&lt;/code&gt; 에 플래그 &lt;code&gt;git mailinfo&lt;/code&gt; (참조 &lt;a href=&quot;git-mailinfo&quot;&gt;자식-MAILINFO [1]&lt;/a&gt; ).</target>
        </trans-unit>
        <trans-unit id="08d9a4e291a48ec7e7744c9392f211c7729e475b" translate="yes" xml:space="preserve">
          <source>Pass &lt;code&gt;-n&lt;/code&gt; flag to &lt;code&gt;git mailinfo&lt;/code&gt; (see &lt;a href=&quot;git-mailinfo&quot;&gt;git-mailinfo[1]&lt;/a&gt;).</source>
          <target state="translated">합격 &lt;code&gt;-n&lt;/code&gt; 에 플래그 &lt;code&gt;git mailinfo&lt;/code&gt; (참조 &lt;a href=&quot;git-mailinfo&quot;&gt;자식-MAILINFO [1]&lt;/a&gt; ).</target>
        </trans-unit>
        <trans-unit id="c6c9ef8d9eb1e67c7d3dd624c5619505c72d0bcb" translate="yes" xml:space="preserve">
          <source>Pass &lt;code&gt;-q&lt;/code&gt; flag to &lt;code&gt;git unpack-objects&lt;/code&gt;; this makes the cloning process less verbose.</source>
          <target state="translated">패스 &lt;code&gt;-q&lt;/code&gt; 에 플래그 &lt;code&gt;git unpack-objects&lt;/code&gt; ; 이것은 복제 과정을 덜 장황하게 만듭니다.</target>
        </trans-unit>
        <trans-unit id="844d7ccb03cd6ed89f98fadab62d2737a8e85be6" translate="yes" xml:space="preserve">
          <source>Pass &lt;code&gt;-u&lt;/code&gt; flag to &lt;code&gt;git mailinfo&lt;/code&gt; (see &lt;a href=&quot;git-mailinfo&quot;&gt;git-mailinfo[1]&lt;/a&gt;). The proposed commit log message taken from the e-mail is re-coded into UTF-8 encoding (configuration variable &lt;code&gt;i18n.commitencoding&lt;/code&gt; can be used to specify project&amp;rsquo;s preferred encoding if it is not UTF-8).</source>
          <target state="translated">합격 &lt;code&gt;-u&lt;/code&gt; 에 플래그 &lt;code&gt;git mailinfo&lt;/code&gt; (참조 &lt;a href=&quot;git-mailinfo&quot;&gt;자식-MAILINFO [1]&lt;/a&gt; ). 전자 우편에서 가져온 제안 된 커밋 로그 메시지는 UTF-8 인코딩으로 다시 코딩됩니다 (구성 변수 &lt;code&gt;i18n.commitencoding&lt;/code&gt; 은 UTF-8이 아닌 경우 프로젝트의 기본 인코딩을 지정하는 데 사용할 수 있음).</target>
        </trans-unit>
        <trans-unit id="2bc55f5c25108364f3a39ef8fcf3a15e05538a97" translate="yes" xml:space="preserve">
          <source>Pass a configuration parameter to the command. The value given will override values from configuration files. The &amp;lt;name&amp;gt; is expected in the same format as listed by &lt;code&gt;git config&lt;/code&gt; (subkeys separated by dots).</source>
          <target state="translated">구성 매개 변수를 명령에 전달하십시오. 주어진 값은 구성 파일의 값보다 우선합니다. &amp;lt;name&amp;gt;은 &lt;code&gt;git config&lt;/code&gt; (서브 키는 점으로 구분) 와 동일한 형식으로되어 있습니다 .</target>
        </trans-unit>
        <trans-unit id="53c6f0ea05fb13c74273eb0b4d13e04b5e8a0db8" translate="yes" xml:space="preserve">
          <source>Pass an additional HTTP header when communicating with a server. If more than one such entry exists, all of them are added as extra headers. To allow overriding the settings inherited from the system config, an empty value will reset the extra headers to the empty list.</source>
          <target state="translated">서버와 통신 할 때 추가 HTTP 헤더를 전달하십시오. 이러한 항목이 둘 이상 존재하면 모든 항목이 추가 헤더로 추가됩니다. 시스템 구성에서 상속 된 설정을 무시할 수 있도록 비어있는 값은 추가 헤더를 비어있는 목록으로 재설정합니다.</target>
        </trans-unit>
        <trans-unit id="88461608ee691de1cd814b8c5a12a7fe39a53808" translate="yes" xml:space="preserve">
          <source>Pass merge strategy specific option through to the merge strategy.</source>
          <target state="translated">병합 전략 특정 옵션을 병합 전략으로 전달하십시오.</target>
        </trans-unit>
        <trans-unit id="6972c66b8402bd099c21ba9d94ae803550d21e77" translate="yes" xml:space="preserve">
          <source>Pass the &amp;lt;strategy-option&amp;gt; through to the merge strategy. This implies &lt;code&gt;--merge&lt;/code&gt; and, if no strategy has been specified, &lt;code&gt;-s recursive&lt;/code&gt;. Note the reversal of &lt;code&gt;ours&lt;/code&gt; and &lt;code&gt;theirs&lt;/code&gt; as noted above for the &lt;code&gt;-m&lt;/code&gt; option.</source>
          <target state="translated">&amp;lt;strategy-option&amp;gt;을 병합 전략으로 전달하십시오. 이는 &lt;code&gt;--merge&lt;/code&gt; 및 전략이 지정되지 않은 경우 &lt;code&gt;-s recursive&lt;/code&gt; 를 의미 합니다. &lt;code&gt;-m&lt;/code&gt; 옵션에 대해 위에서 언급 한 바와 같이 &lt;code&gt;ours&lt;/code&gt; 와 &lt;code&gt;theirs&lt;/code&gt; 의 반전에 주목하십시오 .</target>
        </trans-unit>
        <trans-unit id="471cf94bd65fc727b56b2f8e18afb269faa46e42" translate="yes" xml:space="preserve">
          <source>Pass the &lt;code&gt;--delta-islands&lt;/code&gt; option to &lt;code&gt;git-pack-objects&lt;/code&gt;, see &lt;a href=&quot;git-pack-objects&quot;&gt;git-pack-objects[1]&lt;/a&gt;.</source>
          <target state="translated">패스 &lt;code&gt;--delta-islands&lt;/code&gt; 에 옵션 &lt;code&gt;git-pack-objects&lt;/code&gt; 참조 &lt;a href=&quot;git-pack-objects&quot;&gt;자식 팩 - 객체 [1]&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="6a1683fce9ff86fab10219f3cc0bfdfabc8f2cdd" translate="yes" xml:space="preserve">
          <source>Pass the &lt;code&gt;--local&lt;/code&gt; option to &lt;code&gt;git pack-objects&lt;/code&gt;. See &lt;a href=&quot;git-pack-objects&quot;&gt;git-pack-objects[1]&lt;/a&gt;.</source>
          <target state="translated">패스 &lt;code&gt;--local&lt;/code&gt; 에 옵션 &lt;code&gt;git pack-objects&lt;/code&gt; . &lt;a href=&quot;git-pack-objects&quot;&gt;git-pack-objects [1]를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="a642deef0312e0c6bd0a5561d0fd768ee8a59b73" translate="yes" xml:space="preserve">
          <source>Pass the &lt;code&gt;--no-reuse-delta&lt;/code&gt; option to &lt;code&gt;git-pack-objects&lt;/code&gt;, see &lt;a href=&quot;git-pack-objects&quot;&gt;git-pack-objects[1]&lt;/a&gt;.</source>
          <target state="translated">패스 &lt;code&gt;--no-reuse-delta&lt;/code&gt; 로 옵션 &lt;code&gt;git-pack-objects&lt;/code&gt; 참조 &lt;a href=&quot;git-pack-objects&quot;&gt;자식 팩 - 오브젝트 [1]&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="d901d31c7644af40691b80c7d63e45696f17b53b" translate="yes" xml:space="preserve">
          <source>Pass the &lt;code&gt;--no-reuse-object&lt;/code&gt; option to &lt;code&gt;git-pack-objects&lt;/code&gt;, see &lt;a href=&quot;git-pack-objects&quot;&gt;git-pack-objects[1]&lt;/a&gt;.</source>
          <target state="translated">패스 &lt;code&gt;--no-reuse-object&lt;/code&gt; 에 옵션 &lt;code&gt;git-pack-objects&lt;/code&gt; 참조 &lt;a href=&quot;git-pack-objects&quot;&gt;자식 팩 - 오브젝트 [1]&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="3ee5cba414a5270880e2aa4a80f865762fee87e9" translate="yes" xml:space="preserve">
          <source>Pass the &lt;code&gt;-m&lt;/code&gt; flag to &lt;code&gt;git mailinfo&lt;/code&gt; (see &lt;a href=&quot;git-mailinfo&quot;&gt;git-mailinfo[1]&lt;/a&gt;), so that the Message-ID header is added to the commit message. The &lt;code&gt;am.messageid&lt;/code&gt; configuration variable can be used to specify the default behaviour.</source>
          <target state="translated">패스 &lt;code&gt;-m&lt;/code&gt; 에 플래그 &lt;code&gt;git mailinfo&lt;/code&gt; (참조 &lt;a href=&quot;git-mailinfo&quot;&gt;자식-MAILINFO을 [1]&lt;/a&gt; )은 Message-ID 헤더에 추가되어, 그 메시지를 저지. &lt;code&gt;am.messageid&lt;/code&gt; 의 구성 변수는 기본 동작을 지정하는 데 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e26add554b4352375b32406b09e1002baf88696f" translate="yes" xml:space="preserve">
          <source>Pass the &lt;code&gt;-q&lt;/code&gt; option to &lt;code&gt;git pack-objects&lt;/code&gt;. See &lt;a href=&quot;git-pack-objects&quot;&gt;git-pack-objects[1]&lt;/a&gt;.</source>
          <target state="translated">패스 &lt;code&gt;-q&lt;/code&gt; 에 옵션 &lt;code&gt;git pack-objects&lt;/code&gt; . &lt;a href=&quot;git-pack-objects&quot;&gt;git-pack-objects [1]를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="d89c69fc0d489e2189a0abb8c756572cba9d279c" translate="yes" xml:space="preserve">
          <source>Pass the merge strategy-specific option through to the merge strategy. See &lt;a href=&quot;git-merge&quot;&gt;git-merge[1]&lt;/a&gt; for details.</source>
          <target state="translated">병합 전략 별 옵션을 병합 전략으로 전달하십시오. 자세한 내용은 &lt;a href=&quot;git-merge&quot;&gt;git-merge [1]&lt;/a&gt; 을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="aae9caba3efe1e125b04992ec6689cc466bc71b8" translate="yes" xml:space="preserve">
          <source>Pass the specified string as a push option for consumption by hooks on the server side. If the server doesn&amp;rsquo;t support push options, error out. See &lt;a href=&quot;git-push&quot;&gt;git-push[1]&lt;/a&gt; and &lt;a href=&quot;githooks&quot;&gt;githooks[5]&lt;/a&gt; for details.</source>
          <target state="translated">서버 측의 후크에서 사용하기 위해 지정된 문자열을 푸시 옵션으로 전달하십시오. 서버가 푸시 옵션을 지원하지 않으면 오류가 발생합니다. 자세한 내용은 &lt;a href=&quot;git-push&quot;&gt;git-push [1]&lt;/a&gt; 및 &lt;a href=&quot;githooks&quot;&gt;githooks [5]&lt;/a&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="3802841770affa53645333dabda9772d509a4944" translate="yes" xml:space="preserve">
          <source>Pass the timestamp fuzz factor to cvsps, in seconds. If unset, cvsps defaults to 300s.</source>
          <target state="translated">타임 스탬프 퍼즈 팩터를 초 단위로 cvsp에 전달하십시오. 설정하지 않으면 cvsps의 기본값은 300 초입니다.</target>
        </trans-unit>
        <trans-unit id="b62f7fb7ee127d211118f2c56411ed681d4dc9a8" translate="yes" xml:space="preserve">
          <source>Passed directly to &lt;code&gt;git rebase&lt;/code&gt; when using &lt;code&gt;dcommit&lt;/code&gt; if a &lt;code&gt;git reset&lt;/code&gt; cannot be used (see &lt;code&gt;dcommit&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;git reset&lt;/code&gt; 을 사용할 수없는 경우 &lt;code&gt;dcommit&lt;/code&gt; 을 사용할 때 &lt;code&gt;git rebase&lt;/code&gt; 에 직접 전달 됩니다 ( &lt;code&gt;dcommit&lt;/code&gt; 참조 ).</target>
        </trans-unit>
        <trans-unit id="e0a119c584f6be9edb9c41e31b2e495e1678cbc8" translate="yes" xml:space="preserve">
          <source>Passes the objects in the bundle to &lt;code&gt;git index-pack&lt;/code&gt; for storage in the repository, then prints the names of all defined references. If a list of references is given, only references matching those in the list are printed. This command is really plumbing, intended to be called only by &lt;code&gt;git fetch&lt;/code&gt;.</source>
          <target state="translated">번들의 오브젝트 를 저장소에 저장 하기 위해 &lt;code&gt;git index-pack&lt;/code&gt; 으로 전달한 다음 정의 된 모든 참조의 이름을 인쇄합니다. 참조 목록이 제공되면 목록의 참조와 일치하는 참조 만 인쇄됩니다. 이 명령은 실제로 배관 작업이므로 &lt;code&gt;git fetch&lt;/code&gt; 만 호출합니다 .</target>
        </trans-unit>
        <trans-unit id="76a10ff11a1c062361e6cf9a600e31448471fa51" translate="yes" xml:space="preserve">
          <source>Passing sh -c &quot;some commands&quot; to &quot;git bisect run&quot;</source>
          <target state="translated">sh -c &quot;일부 명령&quot;을 &quot;git bisect run&quot;으로 전달</target>
        </trans-unit>
        <trans-unit id="5323220d01673f917e0cf25de9b3b16456b54e2a" translate="yes" xml:space="preserve">
          <source>Passing the pattern via &amp;lt;file&amp;gt; allows for providing a search pattern containing a \0.</source>
          <target state="translated">&amp;lt;file&amp;gt;을 통해 패턴을 전달하면 \ 0을 포함하는 검색 패턴을 제공 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="dc25b509070cc72f2f466576d5f86386a7b13eca" translate="yes" xml:space="preserve">
          <source>Password for SMTP-AUTH. The argument is optional: If no argument is specified, then the empty string is used as the password. Default is the value of &lt;code&gt;sendemail.smtpPass&lt;/code&gt;, however &lt;code&gt;--smtp-pass&lt;/code&gt; always overrides this value.</source>
          <target state="translated">SMTP-AUTH의 비밀번호입니다. 인수는 선택 사항입니다. 인수를 지정하지 않으면 빈 문자열이 비밀번호로 사용됩니다. &lt;code&gt;sendemail.smtpPass&lt;/code&gt; 의 기본값은 기본값 이지만 &lt;code&gt;--smtp-pass&lt;/code&gt; 는 항상이 값을 재정의합니다.</target>
        </trans-unit>
        <trans-unit id="bdca924d25420c3b18edd188df0ec914b14515eb" translate="yes" xml:space="preserve">
          <source>Password specified as an option to all p4 commands, with &lt;code&gt;-P &amp;lt;password&amp;gt;&lt;/code&gt;. The environment variable &lt;code&gt;P4PASS&lt;/code&gt; can be used instead.</source>
          <target state="translated">&lt;code&gt;-P &amp;lt;password&amp;gt;&lt;/code&gt; 와 함께 모든 p4 명령에 대한 옵션으로 지정된 비밀번호 . 환경 변수 &lt;code&gt;P4PASS&lt;/code&gt; 를 대신 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d3420ceeebad33fa39495a8a02933956bb0a3a55" translate="yes" xml:space="preserve">
          <source>Patch merge data from Arch is used to mark merges in Git as well. Git does not care much about tracking patches, and only considers a merge when a branch incorporates all the commits since the point they forked. The end result is that Git will have a good idea of how far branches have diverged. So the import process does lose some patch-trading metadata.</source>
          <target state="translated">Arch의 패치 병합 데이터는 Git에서 병합을 표시하는 데에도 사용됩니다. Git은 패치 추적에 신경 쓰지 않으며 분기가 분기 이후 모든 커밋을 통합 할 때만 병합을 고려합니다. 결과적으로 Git은 가지가 얼마나 멀리 퍼 졌는지 잘 알 수 있습니다. 따라서 가져 오기 프로세스에서 일부 패치 거래 메타 데이터가 손실됩니다.</target>
        </trans-unit>
        <trans-unit id="31c42bf1738e25a658115f73ad50091aa9060241" translate="yes" xml:space="preserve">
          <source>Patch workflow</source>
          <target state="translated">패치 워크 플로우</target>
        </trans-unit>
        <trans-unit id="b1f5662dd2e222629919ebbe45b58d0f89867f94" translate="yes" xml:space="preserve">
          <source>Patch workflows</source>
          <target state="translated">패치 워크 플로우</target>
        </trans-unit>
        <trans-unit id="27352b2b463b7c072417a02bbdfc4fc80c3a786d" translate="yes" xml:space="preserve">
          <source>Patching</source>
          <target state="translated">Patching</target>
        </trans-unit>
        <trans-unit id="b560ead99e5ad114e3f8a677bf699dbd3c20bb23" translate="yes" xml:space="preserve">
          <source>Path (e.g., &lt;code&gt;repo.git&lt;/code&gt; in &lt;code&gt;https://example.com/repo.git&lt;/code&gt;). The path field of the config key must match the path field of the URL either exactly or as a prefix of slash-delimited path elements. This means a config key with path &lt;code&gt;foo/&lt;/code&gt; matches URL path &lt;code&gt;foo/bar&lt;/code&gt;. A prefix can only match on a slash (&lt;code&gt;/&lt;/code&gt;) boundary. Longer matches take precedence (so a config key with path &lt;code&gt;foo/bar&lt;/code&gt; is a better match to URL path &lt;code&gt;foo/bar&lt;/code&gt; than a config key with just path &lt;code&gt;foo/&lt;/code&gt;).</source>
          <target state="translated">경로 (예를 들어, &lt;code&gt;repo.git&lt;/code&gt; 에서 &lt;code&gt;https://example.com/repo.git&lt;/code&gt; ). 구성 키의 경로 필드는 URL의 경로 필드와 정확하게 또는 슬래시로 구분 된 경로 요소의 접두사로 일치해야합니다. 이는 경로가 &lt;code&gt;foo/&lt;/code&gt; 인 구성 키가 URL 경로가 &lt;code&gt;foo/bar&lt;/code&gt; 와 일치 함을 의미 합니다 . 접두사는 슬래시 ( &lt;code&gt;/&lt;/code&gt; ) 경계 에서만 일치 할 수 있습니다 . 긴 일치가 우선합니다 (경로와 설정 키 때문에 &lt;code&gt;foo/bar&lt;/code&gt; URL 경로에 더 적합하다 &lt;code&gt;foo/bar&lt;/code&gt; 단지 경로와 설정 키에 비해 &lt;code&gt;foo/&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="21d3e318bf1a1b4158750af5acdb00744a4b43b1" translate="yes" xml:space="preserve">
          <source>Path containing files with the CA certificates to verify the peer with when fetching or pushing over HTTPS. Can be overridden by the &lt;code&gt;GIT_SSL_CAPATH&lt;/code&gt; environment variable.</source>
          <target state="translated">HTTPS를 가져 오거나 푸시 할 때 피어를 확인할 CA 인증서가있는 파일이 포함 된 경로입니다. &lt;code&gt;GIT_SSL_CAPATH&lt;/code&gt; 환경 변수 로 대체 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="fa0b12f866af9cc606a1a97e00f59d3f70f76032" translate="yes" xml:space="preserve">
          <source>Path names are encoded in UTF-8 normalization form C. This applies to tree objects, the index file, ref names, as well as path names in command line arguments, environment variables and config files (&lt;code&gt;.git/config&lt;/code&gt; (see &lt;a href=&quot;git-config&quot;&gt;git-config[1]&lt;/a&gt;), &lt;a href=&quot;gitignore&quot;&gt;gitignore[5]&lt;/a&gt;, &lt;a href=&quot;gitattributes&quot;&gt;gitattributes[5]&lt;/a&gt; and &lt;a href=&quot;gitmodules&quot;&gt;gitmodules[5]&lt;/a&gt;).</source>
          <target state="translated">경로 이름은 UTF-8 정규화 형식 C로 인코딩됩니다. 이는 트리 개체, 인덱스 파일, 참조 이름 및 명령 줄 인수, 환경 변수 및 구성 파일의 경로 이름 ( &lt;code&gt;.git/config&lt;/code&gt; ( &lt;a href=&quot;git-config&quot;&gt;git-config&lt;/a&gt; 참조)에 적용됩니다. [1] , &lt;a href=&quot;gitignore&quot;&gt;gitignore [5]&lt;/a&gt; , &lt;a href=&quot;gitattributes&quot;&gt;gitattributes [5]&lt;/a&gt; 및 &lt;a href=&quot;gitmodules&quot;&gt;gitmodules [5]&lt;/a&gt; ).</target>
        </trans-unit>
        <trans-unit id="9dbaaebd4a9c17d56a6b23f6ab97e6dcfee1c1d1" translate="yes" xml:space="preserve">
          <source>Path names in extended headers do not include the &lt;code&gt;a/&lt;/code&gt; and &lt;code&gt;b/&lt;/code&gt; prefixes.</source>
          <target state="translated">확장 헤더의 경로 이름에는 &lt;code&gt;a/&lt;/code&gt; 및 &lt;code&gt;b/&lt;/code&gt; 접두사가 포함되지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="398482aa4d5dc2ffcdb7a8eb1faf09763e2f1990" translate="yes" xml:space="preserve">
          <source>Path resolution via &lt;code&gt;git rev-parse --git-path&lt;/code&gt; uses either $GIT_DIR or $GIT_COMMON_DIR depending on the path. For example, in the linked working tree &lt;code&gt;git rev-parse --git-path HEAD&lt;/code&gt; returns &lt;code&gt;/path/main/.git/worktrees/test-next/HEAD&lt;/code&gt; (not &lt;code&gt;/path/other/test-next/.git/HEAD&lt;/code&gt; or &lt;code&gt;/path/main/.git/HEAD&lt;/code&gt;) while &lt;code&gt;git
rev-parse --git-path refs/heads/master&lt;/code&gt; uses $GIT_COMMON_DIR and returns &lt;code&gt;/path/main/.git/refs/heads/master&lt;/code&gt;, since refs are shared across all working trees, except refs/bisect and refs/worktree.</source>
          <target state="translated">&lt;code&gt;git rev-parse --git-path&lt;/code&gt; 를 통한 경로 확인 --git-path 는 경로 에 따라 $ GIT_DIR 또는 $ GIT_COMMON_DIR을 사용합니다. 예를 들어, 연결된 작업 트리에서 &lt;code&gt;git rev-parse --git-path HEAD&lt;/code&gt; 는 &lt;code&gt;/path/main/.git/worktrees/test-next/HEAD&lt;/code&gt; 를 반환합니다 ( &lt;code&gt;/path/other/test-next/.git/HEAD&lt;/code&gt; 또는 &lt;code&gt;/path/main/.git/HEAD&lt;/code&gt; ) 동안 &lt;code&gt;git rev-parse --git-path refs/heads/master&lt;/code&gt; 사용 $ GIT_COMMON_DIR 반환 &lt;code&gt;/path/main/.git/refs/heads/master&lt;/code&gt; 심판 모두에서 공유되기 때문에, refs / bisect 및 refs / worktree를 제외한 워킹 트리.</target>
        </trans-unit>
        <trans-unit id="27ac1ba438abc8442b44c3b65ed4fee5e1af6eae" translate="yes" xml:space="preserve">
          <source>Path to a log file where the CVS server interface well&amp;hellip;​ logs various stuff. See &lt;a href=&quot;git-cvsserver&quot;&gt;git-cvsserver[1]&lt;/a&gt;.</source>
          <target state="translated">CVS 서버 인터페이스가 다양한 것을 기록하는 로그 파일의 경로입니다. &lt;a href=&quot;git-cvsserver&quot;&gt;git-cvsserver [1]을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="ad9a8cd142a486ee9476680d4a1bf638f8db23fe" translate="yes" xml:space="preserve">
          <source>Path to a store of trusted CA certificates for SMTP SSL/TLS certificate validation (either a directory that has been processed by &lt;code&gt;c_rehash&lt;/code&gt;, or a single file containing one or more PEM format certificates concatenated together: see verify(1) -CAfile and -CApath for more information on these). Set it to an empty string to disable certificate verification. Defaults to the value of the &lt;code&gt;sendemail.smtpsslcertpath&lt;/code&gt; configuration variable, if set, or the backing SSL library&amp;rsquo;s compiled-in default otherwise (which should be the best choice on most platforms).</source>
          <target state="translated">SMTP SSL / TLS 인증서 유효성 검증을위한 신뢰할 수있는 CA 인증서 저장소의 경로 ( &lt;code&gt;c_rehash&lt;/code&gt; 로 처리 된 디렉토리 또는 하나 이상의 PEM 형식 인증서가 함께 연결된 단일 파일 : verify (1) -CAfile 및 -CApath 참조) 이에 대한 자세한 내용은). 인증서 확인을 사용하지 않으려면 빈 문자열로 설정하십시오. &lt;code&gt;sendemail.smtpsslcertpath&lt;/code&gt; 구성 변수 의 값 ( 설정된 경우) 또는 지원되는 SSL 라이브러리의 컴파일 된 기본값 (기본값 인 경우)으로 기본값이 설정됩니다 (대부분의 플랫폼에서 최상의 선택 임).</target>
        </trans-unit>
        <trans-unit id="b2ea00581c7262d0f351e52900685cd26b5cdc9c" translate="yes" xml:space="preserve">
          <source>Path to ca-certificates (either a directory or a single file). Set it to an empty string to disable certificate verification.</source>
          <target state="translated">ca 인증서의 경로 (디렉토리 또는 단일 파일). 인증서 확인을 사용하지 않으려면 빈 문자열로 설정하십시오.</target>
        </trans-unit>
        <trans-unit id="59a42b0b47a7f9a3da70b7db0b79cb16c677b919" translate="yes" xml:space="preserve">
          <source>Path to the &lt;code&gt;git-receive-pack&lt;/code&gt; program on the remote end. Sometimes useful when pushing to a remote repository over ssh, and you do not have the program in a directory on the default $PATH.</source>
          <target state="translated">리모트 엔드 의 &lt;code&gt;git-receive-pack&lt;/code&gt; 프로그램 경로 . ssh를 통해 원격 저장소로 푸시 할 때 유용하며 기본 $ PATH의 디렉토리에 프로그램이 없습니다.</target>
        </trans-unit>
        <trans-unit id="3b50759eb40ac2cfa3120816f612ac8999c3b60c" translate="yes" xml:space="preserve">
          <source>Path to the highlight executable to use (it must be the one from &lt;a href=&quot;http://www.andre-simon.de&quot;&gt;http://www.andre-simon.de&lt;/a&gt; due to assumptions about parameters and output). By default set to &lt;code&gt;highlight&lt;/code&gt;; set it to full path to highlight executable if it is not installed on your web server&amp;rsquo;s PATH. Note that &lt;code&gt;highlight&lt;/code&gt; feature must be set for gitweb to actually use syntax highlighting.</source>
          <target state="translated">사용할 하이라이트 실행 파일의 경로입니다 ( 매개 변수 및 출력에 대한 가정으로 인해 &lt;a href=&quot;http://www.andre-simon.de&quot;&gt;http://www.andre-simon.de의&lt;/a&gt; 경로 여야 함 ). 기본적으로 &lt;code&gt;highlight&lt;/code&gt; ; 웹 서버의 PATH에 실행 파일이 설치되어 있지 않은 경우 실행 파일을 강조 표시하려면 전체 경로로 설정하십시오. 참고 &lt;code&gt;highlight&lt;/code&gt; 기능이 실제로 구문 강조를 사용하려면 gitweb 설정해야합니다.</target>
        </trans-unit>
        <trans-unit id="11df29eff55bbaa504f93c347ee5438c05683eb4" translate="yes" xml:space="preserve">
          <source>Path to wherever your core Git programs are installed. This can also be controlled by setting the GIT_EXEC_PATH environment variable. If no path is given, &lt;code&gt;git&lt;/code&gt; will print the current setting and then exit.</source>
          <target state="translated">핵심 Git 프로그램이 설치된 곳의 경로. GIT_EXEC_PATH 환경 변수를 설정하여 제어 할 수도 있습니다. 경로를 지정하지 않으면 &lt;code&gt;git&lt;/code&gt; 은 현재 설정을 인쇄 한 다음 종료합니다.</target>
        </trans-unit>
        <trans-unit id="8bee226624e5e35cc1c649560301ce6a88341f60" translate="yes" xml:space="preserve">
          <source>Pathname Format Notes and -z</source>
          <target state="translated">경로 이름 형식 메모 및 -z</target>
        </trans-unit>
        <trans-unit id="baad7e07c2b2e1eb7a0f4231584855cba490b25b" translate="yes" xml:space="preserve">
          <source>Pathnames with &quot;unusual&quot; characters are quoted as explained for the configuration variable &lt;code&gt;core.quotePath&lt;/code&gt; (see &lt;a href=&quot;git-config&quot;&gt;git-config[1]&lt;/a&gt;).</source>
          <target state="translated">&quot;비정상적인&quot;문자를 가진 경로 이름은 구성 변수 &lt;code&gt;core.quotePath&lt;/code&gt; 에 설명 된대로 인용됩니다 ( &lt;a href=&quot;git-config&quot;&gt;git-config [1] 참조&lt;/a&gt; ).</target>
        </trans-unit>
        <trans-unit id="faafd85683bf6f5bc5b49f23461483144ba14fdc" translate="yes" xml:space="preserve">
          <source>Paths in which the change applied cleanly are updated both in the index file and in your working tree.</source>
          <target state="translated">변경 사항이 완전히 적용된 경로는 인덱스 파일과 작업 트리에서 모두 업데이트됩니다.</target>
        </trans-unit>
        <trans-unit id="02f71c6b4a6bff00e221f1c59f788c05e9bf57ff" translate="yes" xml:space="preserve">
          <source>Paths may need to be prefixed with &lt;code&gt;--&lt;/code&gt; to separate them from options or the revision range, when confusion arises.</source>
          <target state="translated">경로로 시작해야 할 수도 있습니다 &lt;code&gt;--&lt;/code&gt; 혼란이 발생하는 경우, 옵션이나 개정 범위에서 그들을 분리 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="72d92e139b6d6167634cfbe91ec0c2ba1cace91a" translate="yes" xml:space="preserve">
          <source>Paths that merged cleanly are updated both in the index file and in your working tree.</source>
          <target state="translated">깔끔하게 병합 된 경로는 인덱스 파일과 작업 트리에서 모두 업데이트됩니다.</target>
        </trans-unit>
        <trans-unit id="4d8223b3c254f584e9779f7d614adb9369021888" translate="yes" xml:space="preserve">
          <source>Paths to submodule(s). When specified this will restrict the command to only operate on the submodules found at the specified paths. (This argument is required with add).</source>
          <target state="translated">서브 모듈로의 경로. 지정된 경우 지정된 경로에서 찾은 서브 모듈에서만 명령이 작동하도록 제한합니다. 이 인수는 add와 함께 필요합니다.</target>
        </trans-unit>
        <trans-unit id="d837befa2a08a2d2c5de9a52f9ba8092713b988b" translate="yes" xml:space="preserve">
          <source>Pathspec is passed in &lt;code&gt;&amp;lt;file&amp;gt;&lt;/code&gt; instead of commandline args. If &lt;code&gt;&amp;lt;file&amp;gt;&lt;/code&gt; is exactly &lt;code&gt;-&lt;/code&gt; then standard input is used. Pathspec elements are separated by LF or CR/LF. Pathspec elements can be quoted as explained for the configuration variable &lt;code&gt;core.quotePath&lt;/code&gt; (see &lt;a href=&quot;git-config&quot;&gt;git-config[1]&lt;/a&gt;). See also &lt;code&gt;--pathspec-file-nul&lt;/code&gt; and global &lt;code&gt;--literal-pathspecs&lt;/code&gt;.</source>
          <target state="translated">Pathspec은 명령 줄 인수 대신 &lt;code&gt;&amp;lt;file&amp;gt;&lt;/code&gt; 에 전달됩니다 . 경우 &lt;code&gt;&amp;lt;file&amp;gt;&lt;/code&gt; 정확히 &lt;code&gt;-&lt;/code&gt; 다음 표준 입력이 사용됩니다. Pathspec 요소는 LF 또는 CR / LF로 구분됩니다. 구성 변수 &lt;code&gt;core.quotePath&lt;/code&gt; 에 설명 된대로 Pathspec 요소를 인용 할 수 있습니다 ( &lt;a href=&quot;git-config&quot;&gt;git-config [1] 참조&lt;/a&gt; ). 참조 &lt;code&gt;--pathspec-file-nul&lt;/code&gt; 및 글로벌 &lt;code&gt;--literal-pathspecs&lt;/code&gt; 을 .</target>
        </trans-unit>
        <trans-unit id="3c3fe95fefb92e7001401ae2dddbe0254cb07692" translate="yes" xml:space="preserve">
          <source>Pathspecs are used on the command line of &quot;git ls-files&quot;, &quot;git ls-tree&quot;, &quot;git add&quot;, &quot;git grep&quot;, &quot;git diff&quot;, &quot;git checkout&quot;, and many other commands to limit the scope of operations to some subset of the tree or worktree. See the documentation of each command for whether paths are relative to the current directory or toplevel. The pathspec syntax is as follows:</source>
          <target state="translated">경로 스펙은 &quot;git ls-files&quot;, &quot;git ls-tree&quot;, &quot;git add&quot;, &quot;git grep&quot;, &quot;git diff&quot;, &quot;git checkout&quot;및 기타 많은 명령의 명령 행에서 범위를 제한하는 데 사용됩니다. 트리 또는 작업 트리의 일부 하위 집합에 대한 작업 경로가 현재 디렉토리에 상대적인지 또는 최상위 디렉토리인지에 대해서는 각 명령의 문서를 참조하십시오. pathspec 구문은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="3edd060b9dbe00aa0b104e48e6298fa38d5e841a" translate="yes" xml:space="preserve">
          <source>Pattern format</source>
          <target state="translated">패턴 형식</target>
        </trans-unit>
        <trans-unit id="fcba9b37f153a6df141f56c87f41e26ebdda34ce" translate="yes" xml:space="preserve">
          <source>Pattern used to limit paths in Git commands.</source>
          <target state="translated">Git 명령에서 경로를 제한하는 데 사용되는 패턴.</target>
        </trans-unit>
        <trans-unit id="eb7b848d74da9a813e33fe644876b71e9e6bcaa4" translate="yes" xml:space="preserve">
          <source>Patterns have the same syntax and semantics as patterns used for fnmatch(3) without the FNM_PATHNAME flag, except a pathname also matches a pattern if removing any number of the final pathname components matches the pattern. For example, the pattern &quot;&lt;code&gt;foo*bar&lt;/code&gt;&quot; matches &quot;&lt;code&gt;fooasdfbar&lt;/code&gt;&quot; and &quot;&lt;code&gt;foo/bar/baz/asdf&lt;/code&gt;&quot; but not &quot;&lt;code&gt;foobarx&lt;/code&gt;&quot;.</source>
          <target state="translated">패턴은 FNM_PATHNAME 플래그없이 fnmatch (3)에 사용 된 패턴과 구문과 의미가 동일합니다. 단, 최종 경로 이름 구성 요소를 여러 개 제거해도 패턴과 일치하는 경우 경로 이름도 패턴과 일치합니다. 예를 들어, 패턴 &quot; &lt;code&gt;foo*bar&lt;/code&gt; &quot;일치 &quot; &lt;code&gt;fooasdfbar&lt;/code&gt; &quot;와 &quot; &lt;code&gt;foo/bar/baz/asdf&lt;/code&gt; 있지만&quot; &quot; &lt;code&gt;foobarx&lt;/code&gt; &quot;.</target>
        </trans-unit>
        <trans-unit id="fb013761be8ab363fba21719f323aaadcbd3ba0f" translate="yes" xml:space="preserve">
          <source>Patterns read from &lt;code&gt;$GIT_DIR/info/exclude&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;$GIT_DIR/info/exclude&lt;/code&gt; 에서 패턴을 읽습니다 .</target>
        </trans-unit>
        <trans-unit id="6698f9ee7644a05337be6a499b35a3dc93d5c62b" translate="yes" xml:space="preserve">
          <source>Patterns read from a &lt;code&gt;.gitignore&lt;/code&gt; file in the same directory as the path, or in any parent directory, with patterns in the higher level files (up to the toplevel of the work tree) being overridden by those in lower level files down to the directory containing the file. These patterns match relative to the location of the &lt;code&gt;.gitignore&lt;/code&gt; file. A project normally includes such &lt;code&gt;.gitignore&lt;/code&gt; files in its repository, containing patterns for files generated as part of the project build.</source>
          <target state="translated">경로와 동일한 디렉토리 또는 상위 디렉토리 의 &lt;code&gt;.gitignore&lt;/code&gt; 파일에서 읽은 패턴은 상위 레벨 파일 (작업 트리의 최상위 레벨까지)의 패턴이 디렉토리까지 하위 레벨 파일의 패턴으로 대체됩니다. 파일을 포함합니다. 이 패턴은 &lt;code&gt;.gitignore&lt;/code&gt; 파일 의 위치를 ​​기준으로 일치 합니다. 프로젝트는 일반적으로 프로젝트 빌드의 일부로 생성 된 파일의 패턴을 포함하는 저장소에 이러한 &lt;code&gt;.gitignore&lt;/code&gt; 파일을 포함합니다.</target>
        </trans-unit>
        <trans-unit id="36ee091d7bc3859a1b36e4f946f23e3881e4ee18" translate="yes" xml:space="preserve">
          <source>Patterns read from the command line for those commands that support them.</source>
          <target state="translated">패턴을 지원하는 명령에 대해서는 명령 행에서 패턴을 읽습니다.</target>
        </trans-unit>
        <trans-unit id="eafc03d17e54d88cb802971c79de6de883bd2e33" translate="yes" xml:space="preserve">
          <source>Patterns read from the file specified by the configuration variable &lt;code&gt;core.excludesFile&lt;/code&gt;.</source>
          <target state="translated">패턴 구성 변수에 의해 지정된 파일에서 읽을 &lt;code&gt;core.excludesFile&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="3d5b457ce32a5c844bdd2578141f772cb2dfe28f" translate="yes" xml:space="preserve">
          <source>Patterns which a user wants Git to ignore in all situations (e.g., backup or temporary files generated by the user&amp;rsquo;s editor of choice) generally go into a file specified by &lt;code&gt;core.excludesFile&lt;/code&gt; in the user&amp;rsquo;s &lt;code&gt;~/.gitconfig&lt;/code&gt;. Its default value is $XDG_CONFIG_HOME/git/ignore. If $XDG_CONFIG_HOME is either not set or empty, $HOME/.config/git/ignore is used instead.</source>
          <target state="translated">사용자가 모든 상황에서 Git이 무시하도록하려는 패턴 (예 : 사용자가 선택한 편집기에서 생성 한 백업 또는 임시 파일)은 일반적으로 사용자의 &lt;code&gt;~/.gitconfig&lt;/code&gt; 에서 &lt;code&gt;core.excludesFile&lt;/code&gt; 에 지정된 파일로 이동합니다 . 기본값은 $ XDG_CONFIG_HOME / git / ignore입니다. $ XDG_CONFIG_HOME이 설정되거나 비어 있지 않으면 $ HOME / .config / git / ignore가 대신 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="5587255035843df5d5295452dbedab67822586cc" translate="yes" xml:space="preserve">
          <source>Patterns which are specific to a particular repository but which do not need to be shared with other related repositories (e.g., auxiliary files that live inside the repository but are specific to one user&amp;rsquo;s workflow) should go into the &lt;code&gt;$GIT_DIR/info/exclude&lt;/code&gt; file.</source>
          <target state="translated">특정 리포지토리에 고유하지만 다른 관련 리포지토리와 공유 할 필요가없는 패턴 (예 : 리포지토리 내에 존재하지만 한 사용자의 워크 플로에 고유 한 보조 파일)은 &lt;code&gt;$GIT_DIR/info/exclude&lt;/code&gt; 파일 로 이동해야 합니다.</target>
        </trans-unit>
        <trans-unit id="97235836632b1fb86b67505c96cba9f6f391329a" translate="yes" xml:space="preserve">
          <source>Patterns which should be version-controlled and distributed to other repositories via clone (i.e., files that all developers will want to ignore) should go into a &lt;code&gt;.gitignore&lt;/code&gt; file.</source>
          <target state="translated">버전 제어되고 클론을 통해 다른 리포지토리에 배포해야하는 패턴 (예 : 모든 개발자가 무시할 파일 )은 &lt;code&gt;.gitignore&lt;/code&gt; 파일 로 이동해야 합니다.</target>
        </trans-unit>
        <trans-unit id="74e957861d59dc180f4938a7e5cbcccc25f5a3ea" translate="yes" xml:space="preserve">
          <source>Patterns will normally need quoting.</source>
          <target state="translated">패턴은 일반적으로 인용이 필요합니다.</target>
        </trans-unit>
        <trans-unit id="df5e4a7c782200671a0c551a8ae8bde4cbfd4554" translate="yes" xml:space="preserve">
          <source>Peek at a remote&amp;rsquo;s branch, without configuring the remote in your local repository:</source>
          <target state="translated">로컬 저장소에서 원격을 구성하지 않고 원격 지점을 들여다보십시오.</target>
        </trans-unit>
        <trans-unit id="2eee9784312fca59a15483a1887af3e9d7aeb47b" translate="yes" xml:space="preserve">
          <source>People needing to do actual development will also want to read &lt;a href=&quot;#Developing-With-git&quot;&gt;Developing with Git&lt;/a&gt; and &lt;a href=&quot;#sharing-development&quot;&gt;Sharing development with others&lt;/a&gt;.</source>
          <target state="translated">실제 개발을해야하는 사람들 &lt;a href=&quot;#Developing-With-git&quot;&gt;은 Git으로 개발하기&lt;/a&gt; 및 &lt;a href=&quot;#sharing-development&quot;&gt;다른 사람들&lt;/a&gt; 과 개발 공유 하기 를 읽을 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="d16acfd9d0006fc21d168918fe3efc81d8650072" translate="yes" xml:space="preserve">
          <source>People who play the &lt;a href=&quot;#INTEGRATOR&quot;&gt;Integrator&lt;/a&gt; role need to learn some more commands in addition to the above.</source>
          <target state="translated">플레이 사람들은 &lt;a href=&quot;#INTEGRATOR&quot;&gt;통합의&lt;/a&gt; 위뿐만 아니라 좀 더 명령을 배울 수있는 역할이 필요합니다.</target>
        </trans-unit>
        <trans-unit id="48b4677fc2e9a16153ae455818d81437374385ab" translate="yes" xml:space="preserve">
          <source>Per-repository gitweb configuration</source>
          <target state="translated">리포지토리 당 gitweb 구성</target>
        </trans-unit>
        <trans-unit id="a457d6f200ccaae5acadefc147a0317025017a2f" translate="yes" xml:space="preserve">
          <source>Perforce keeps the encoding of a path as given by the originating OS. Git expects paths encoded as UTF-8. Use this config to tell git-p4 what encoding Perforce had used for the paths. This encoding is used to transcode the paths to UTF-8. As an example, Perforce on Windows often uses &quot;cp1252&quot; to encode path names.</source>
          <target state="translated">Perforce는 원래 OS에서 제공 한대로 경로 인코딩을 유지합니다. Git은 UTF-8로 인코딩 된 경로를 예상합니다. 이 설정을 사용하여 git-p4에게 Perforce가 경로에 사용한 인코딩을 알려줍니다. 이 인코딩은 경로를 UTF-8로 코드 변환하는 데 사용됩니다. 예를 들어, Windows의 Perforce는 종종 &quot;cp1252&quot;를 사용하여 경로 이름을 인코딩합니다.</target>
        </trans-unit>
        <trans-unit id="03b8553af827c912cedc4f1a54e56b3f62407825" translate="yes" xml:space="preserve">
          <source>Perform a bare clone. See &lt;a href=&quot;git-clone&quot;&gt;git-clone[1]&lt;/a&gt;.</source>
          <target state="translated">베어 클론을 수행하십시오. &lt;a href=&quot;git-clone&quot;&gt;git-clone [1]을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="4d72b7a492b7bd341e81ed1aa91cf43a8cb1b23e" translate="yes" xml:space="preserve">
          <source>Perform a merge, not just a read. The command will refuse to run if your index file has unmerged entries, indicating that you have not finished previous merge you started.</source>
          <target state="translated">읽기만이 아니라 병합을 수행하십시오. 인덱스 파일에 병합되지 않은 항목이 있으면 명령은 실행을 거부하여 시작한 이전 병합을 완료하지 않았 음을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="eccacfa088a41a325854fbfce829a88ff14b78ec" translate="yes" xml:space="preserve">
          <source>Perform a tab expansion (replace each tab with enough spaces to fill to the next display column that is multiple of &lt;code&gt;&amp;lt;n&amp;gt;&lt;/code&gt;) in the log message before showing it in the output. &lt;code&gt;--expand-tabs&lt;/code&gt; is a short-hand for &lt;code&gt;--expand-tabs=8&lt;/code&gt;, and &lt;code&gt;--no-expand-tabs&lt;/code&gt; is a short-hand for &lt;code&gt;--expand-tabs=0&lt;/code&gt;, which disables tab expansion.</source>
          <target state="translated">출력에 표시하기 전에 로그 메시지에서 탭 확장을 수행하십시오 (각 탭을 &lt;code&gt;&amp;lt;n&amp;gt;&lt;/code&gt; 의 배수 인 다음 표시 열에 채울 수있는 충분한 공간으로 교체하십시오 ). &lt;code&gt;--expand-tabs&lt;/code&gt; 는 &lt;code&gt;--expand-tabs=8&lt;/code&gt; 의 약자 이며 &lt;code&gt;--no-expand-tabs&lt;/code&gt; 는 &lt;code&gt;--expand-tabs=0&lt;/code&gt; 의 약자이며 탭 확장을 비활성화합니다.</target>
        </trans-unit>
        <trans-unit id="6fe3dd23120fae0b6c8f1955f52c35dc123f3355" translate="yes" xml:space="preserve">
          <source>Perform move and/or copy detection, as described in the &lt;a href=&quot;git-diff&quot;&gt;git-diff[1]&lt;/a&gt; manual page, and use it to generate rename and copy commands in the output dump.</source>
          <target state="translated">&lt;a href=&quot;git-diff&quot;&gt;git-diff [1]&lt;/a&gt; 매뉴얼 페이지에 설명 된대로 이동 및 / 또는 복사 감지를 수행 하고이를 사용하여 출력 덤프에서 이름 바꾸기 및 복사 명령을 생성하십시오.</target>
        </trans-unit>
        <trans-unit id="567ab62415c3403908dcc89e62181367d58a1292" translate="yes" xml:space="preserve">
          <source>Perform only a single read-write cycle with stdin and stdout. This fits with the HTTP POST request processing model where a program may read the request, write a response, and must exit.</source>
          <target state="translated">stdin 및 stdout을 사용하여 단일 읽기-쓰기 주기만 수행하십시오. 프로그램이 요청을 읽고 응답을 작성하고 종료해야하는 HTTP POST 요청 처리 모델에 적합합니다.</target>
        </trans-unit>
        <trans-unit id="41e22f08445cd4ffeacb1dbe66209f768caca3d4" translate="yes" xml:space="preserve">
          <source>Perform sanity checks on patches. Currently, validation means the following:</source>
          <target state="translated">패치에 대한 상태 점검을 수행하십시오. 현재 유효성 검사는 다음을 의미합니다.</target>
        </trans-unit>
        <trans-unit id="5dd19cbcd38d018175e7d4b32fed6afd6bedcbe4" translate="yes" xml:space="preserve">
          <source>Perform the merge and commit the result. This option can be used to override --no-commit.</source>
          <target state="translated">병합을 수행하고 결과를 커밋하십시오. 이 옵션은 --no-commit를 재정의하는 데 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="63c904559993935c470f516c8b549ca7f3640dbb" translate="yes" xml:space="preserve">
          <source>Performance</source>
          <target state="translated">Performance</target>
        </trans-unit>
        <trans-unit id="7b942adfd148d1f49e5f455e2928985f17ee890d" translate="yes" xml:space="preserve">
          <source>Performance and Compression Tuning</source>
          <target state="translated">성능 및 압축 조정</target>
        </trans-unit>
        <trans-unit id="9848b9866799244495cf3924e3205cf2b3c1519c" translate="yes" xml:space="preserve">
          <source>Performing a three-way merge</source>
          <target state="translated">3 방향 병합 수행</target>
        </trans-unit>
        <trans-unit id="c7a1bc80737fe18d499952e507805c3eb4a06cbb" translate="yes" xml:space="preserve">
          <source>Performing text diffs of binary files</source>
          <target state="translated">이진 파일의 텍스트 차이 수행</target>
        </trans-unit>
        <trans-unit id="eefd6fa4d473259c02ba61e1f0886b5b36cd638b" translate="yes" xml:space="preserve">
          <source>Pick &lt;code&gt;HEAD&lt;/code&gt; when it asks what branch/tag to check out. Untick the &quot;launch commit wizard&quot; to avoid committing the .project file.</source>
          <target state="translated">체크 아웃 할 지점 / 태그를 물을 때 &lt;code&gt;HEAD&lt;/code&gt; 를 선택 하십시오. .project 파일을 커밋하지 않으려면 &quot;Launch commit wizard&quot;를 선택 해제하십시오.</target>
        </trans-unit>
        <trans-unit id="84307347f945f7519a1053bc099c7c72668957a6" translate="yes" xml:space="preserve">
          <source>Pick out and massage parameters</source>
          <target state="translated">매개 변수 선택 및 마사지</target>
        </trans-unit>
        <trans-unit id="6fcb3939990224a308d3440baf7b583ff2b6b3d4" translate="yes" xml:space="preserve">
          <source>Pipe all output into &lt;code&gt;less&lt;/code&gt; (or if set, $PAGER) if standard output is a terminal. This overrides the &lt;code&gt;pager.&amp;lt;cmd&amp;gt;&lt;/code&gt; configuration options (see the &quot;Configuration Mechanism&quot; section below).</source>
          <target state="translated">표준 출력이 터미널 인 경우 모든 출력을 &lt;code&gt;less&lt;/code&gt; (또는 설정된 경우 $ PAGER) 로 파이프하십시오 . 이것은 &lt;code&gt;pager.&amp;lt;cmd&amp;gt;&lt;/code&gt; 구성 옵션을 대체합니다 (아래 &quot;구성 메커니즘&quot;섹션 참조).</target>
        </trans-unit>
        <trans-unit id="cbb76042b365f8d09d0e51150e4e490e9d51908c" translate="yes" xml:space="preserve">
          <source>Pitfalls with submodules</source>
          <target state="translated">서브 모듈이있는 함정</target>
        </trans-unit>
        <trans-unit id="9bdaaf18e8d137e15a223b206babd14884c750c4" translate="yes" xml:space="preserve">
          <source>Placeholders that affect formatting of later placeholders:</source>
          <target state="translated">이후 자리 표시 자의 형식에 영향을주는 자리 표시 자 :</target>
        </trans-unit>
        <trans-unit id="ac211ac96ed9534ab58287056fd17e14f5f3e99f" translate="yes" xml:space="preserve">
          <source>Placeholders that expand to a single literal character:</source>
          <target state="translated">단일 리터럴 문자로 확장되는 자리 표시 자 :</target>
        </trans-unit>
        <trans-unit id="d70cc19bb51191879a6f88620cd832b063255806" translate="yes" xml:space="preserve">
          <source>Placeholders that expand to information extracted from the commit:</source>
          <target state="translated">커밋에서 추출 된 정보로 확장되는 자리 표시 자 :</target>
        </trans-unit>
        <trans-unit id="a17341864ca5844ed689cbcc0e99aa3136fe86e9" translate="yes" xml:space="preserve">
          <source>Placing a &lt;code&gt;progress&lt;/code&gt; command immediately after a &lt;code&gt;checkpoint&lt;/code&gt; will inform the reader when the &lt;code&gt;checkpoint&lt;/code&gt; has been completed and it can safely access the refs that fast-import updated.</source>
          <target state="translated">&lt;code&gt;checkpoint&lt;/code&gt; 바로 뒤에 &lt;code&gt;progress&lt;/code&gt; 명령을 배치 하면 &lt;code&gt;checkpoint&lt;/code&gt; 가 완료되면 리더에게 알리고 빠른 가져 오기가 업데이트 된 참조에 안전하게 액세스 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="29d132c8dca94eedc4761b19f4e56a63b7eb3b41" translate="yes" xml:space="preserve">
          <source>Please note that these range notation can be used with both gitk and &quot;git log&quot;.</source>
          <target state="translated">이 범위 표기법은 gitk 및 &quot;git log&quot;와 함께 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a872f84e7510205bc273ea7f3487281d6e0b57f1" translate="yes" xml:space="preserve">
          <source>Please note that using the &lt;code&gt;working-tree-encoding&lt;/code&gt; attribute may have a number of pitfalls:</source>
          <target state="translated">노트는 사용하시기 바랍니다 &lt;code&gt;working-tree-encoding&lt;/code&gt; 속성은 함정의 숫자가있을 수 있습니다 :</target>
        </trans-unit>
        <trans-unit id="cddad527343fcd5e5d11ccf1bbf7e571af789394" translate="yes" xml:space="preserve">
          <source>Please note that you cannot use an existing &lt;code&gt;filter.&amp;lt;driver&amp;gt;.clean&lt;/code&gt; or &lt;code&gt;filter.&amp;lt;driver&amp;gt;.smudge&lt;/code&gt; command with &lt;code&gt;filter.&amp;lt;driver&amp;gt;.process&lt;/code&gt; because the former two use a different inter process communication protocol than the latter one.</source>
          <target state="translated">기존의 두 &lt;code&gt;filter.&amp;lt;driver&amp;gt;.clean&lt;/code&gt; 가 다른 프로세스 간 통신 프로토콜을 사용하기 때문에 기존의 필터 &amp;lt;드라이버&amp;gt; .clean 또는 &lt;code&gt;filter.&amp;lt;driver&amp;gt;.smudge&lt;/code&gt; 명령과 &lt;code&gt;filter.&amp;lt;driver&amp;gt;.process&lt;/code&gt; 사용할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="c888d4a15197bdd365e37f0125b6b805c57d4e97" translate="yes" xml:space="preserve">
          <source>Please report any bugs or feature requests to &lt;a href=&quot;mailto:git@vger.kernel.org&quot;&gt;git@vger.kernel.org&lt;/a&gt;, putting &quot;gitweb&quot; in the subject of email.</source>
          <target state="translated">버그 나 기능 요청은 &lt;a href=&quot;mailto:git@vger.kernel.org&quot;&gt;git@vger.kernel.org에보&lt;/a&gt; 고하십시오. 이메일의 주제에 &quot;gitweb&quot; 을 넣으십시오 .</target>
        </trans-unit>
        <trans-unit id="f21025df43e0479e4864841eab47e70f94cac837" translate="yes" xml:space="preserve">
          <source>Please see &lt;a href=&quot;git-commit&quot;&gt;git-commit[1]&lt;/a&gt; for alternative ways to add content to a commit.</source>
          <target state="translated">&lt;a href=&quot;git-commit&quot;&gt;커밋&lt;/a&gt; 에 내용을 추가하는 다른 방법 은 git-commit [1] 을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="0aae3fa8eecc17be69c8d9ed6207c5a978bd3a01" translate="yes" xml:space="preserve">
          <source>Please see &lt;a href=&quot;gitglossary&quot;&gt;gitglossary[7]&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;gitglossary&quot;&gt;gitglossary [7]를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="3f7f1dd4c4366b63a145049cec2f6258fda24d83" translate="yes" xml:space="preserve">
          <source>Please see the &lt;a href=&quot;gitrepository-layout&quot;&gt;gitrepository-layout[5]&lt;/a&gt; document.</source>
          <target state="translated">&lt;a href=&quot;gitrepository-layout&quot;&gt;gitrepository-layout [5]&lt;/a&gt; 문서를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="9a1b79b9af4861f2750548663461bdd94c841127" translate="yes" xml:space="preserve">
          <source>Plumbing Commands</source>
          <target state="translated">배관 명령</target>
        </trans-unit>
        <trans-unit id="dec39f942885f611a23f70c734d12d63a6e011e1" translate="yes" xml:space="preserve">
          <source>Points to the location where you put &lt;code&gt;git-favicon.png&lt;/code&gt; on your web server, or to be more the generic URI of favicon, which will be served as &quot;image/png&quot; type. Web browsers that support favicons (website icons) may display them in the browser&amp;rsquo;s URL bar and next to the site name in bookmarks. Relative to the base URI of gitweb. Can be adjusted at build time using &lt;code&gt;GITWEB_FAVICON&lt;/code&gt; variable. By default set to &lt;code&gt;static/git-favicon.png&lt;/code&gt;.</source>
          <target state="translated">웹 서버에서 &lt;code&gt;git-favicon.png&lt;/code&gt; 를 넣은 위치를 가리 키 거나 &quot;image / png&quot;유형으로 제공되는 favicon의 일반적인 URI가됩니다. 즐겨 찾기 아이콘 (웹 사이트 아이콘)을 지원하는 웹 브라우저는 브라우저의 URL 표시 줄에 책갈피의 사이트 이름 옆에이를 표시 할 수 있습니다. gitweb의 기본 URI와 관련이 있습니다. &lt;code&gt;GITWEB_FAVICON&lt;/code&gt; 변수를 사용하여 빌드 타임에 조정할 수 있습니다 . 기본적으로 &lt;code&gt;static/git-favicon.png&lt;/code&gt; 로 설정되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="2a40c85c88d228670d36d1d2ec3cd1298a4f0842" translate="yes" xml:space="preserve">
          <source>Points to the location where you put &lt;code&gt;git-logo.png&lt;/code&gt; on your web server, or to be more the generic URI of logo, 72x27 size). This image is displayed in the top right corner of each gitweb page and used as a logo for the Atom feed. Relative to the base URI of gitweb (as a path). Can be adjusted when building gitweb using &lt;code&gt;GITWEB_LOGO&lt;/code&gt; variable By default set to &lt;code&gt;static/git-logo.png&lt;/code&gt;.</source>
          <target state="translated">당신이 넣어 위치를 가리키는 &lt;code&gt;git-logo.png&lt;/code&gt; 웹 서버에 이상이 될 로고의 일반적인 URI, 72x27 크기) 할 수 있습니다. 이 이미지는 각 gitweb 페이지의 오른쪽 상단에 표시되며 Atom 피드의 로고로 사용됩니다. gitweb의 기본 URI를 기준으로합니다 (경로). &lt;code&gt;GITWEB_LOGO&lt;/code&gt; 변수를 사용하여 gitweb을 빌드 할 때 조정 가능 기본적으로 &lt;code&gt;static/git-logo.png&lt;/code&gt; 로 설정됩니다 .</target>
        </trans-unit>
        <trans-unit id="9efd93f849deab28e0c41b0eba10b16f24a27c09" translate="yes" xml:space="preserve">
          <source>Points to the location where you put &lt;code&gt;gitweb.js&lt;/code&gt; on your web server, or to be more generic the URI of JavaScript code used by gitweb. Relative to the base URI of gitweb. Can be set at build time using the &lt;code&gt;GITWEB_JS&lt;/code&gt; build-time configuration variable.</source>
          <target state="translated">웹 서버 에 &lt;code&gt;gitweb.js&lt;/code&gt; 를 넣거나 gitweb에서 사용하는 JavaScript 코드의 URI 가되는 위치를 가리 킵니다 . gitweb의 기본 URI와 관련이 있습니다. &lt;code&gt;GITWEB_JS&lt;/code&gt; 빌드 타임 구성 변수를 사용하여 빌드시 설정할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="dd1dad0df44ac8f0bb40744bffd4b05eb8a096a6" translate="yes" xml:space="preserve">
          <source>Populating a git repository</source>
          <target state="translated">자식 저장소 채우기</target>
        </trans-unit>
        <trans-unit id="4cbb689daa97a321dd935e9f85d305871f823e3a" translate="yes" xml:space="preserve">
          <source>Porcelain Format</source>
          <target state="translated">도자기 형식</target>
        </trans-unit>
        <trans-unit id="7ed7cead662f9f179a2456c29bfdc5633f939f7a" translate="yes" xml:space="preserve">
          <source>Porcelain Format Version 1</source>
          <target state="translated">도자기 형식 버전 1</target>
        </trans-unit>
        <trans-unit id="10c9d2c56f0a79c71fe3af29b00f0a78804206c5" translate="yes" xml:space="preserve">
          <source>Porcelain Format Version 2</source>
          <target state="translated">도자기 형식 버전 2</target>
        </trans-unit>
        <trans-unit id="f0ec9d0a213551004afb541fee3084e09f53878a" translate="yes" xml:space="preserve">
          <source>Port number (e.g., &lt;code&gt;8080&lt;/code&gt; in &lt;code&gt;http://example.com:8080/&lt;/code&gt;). This field must match exactly between the config key and the URL. Omitted port numbers are automatically converted to the correct default for the scheme before matching.</source>
          <target state="translated">포트 번호 (예를 들어, &lt;code&gt;8080&lt;/code&gt; 년 &lt;code&gt;http://example.com:8080/&lt;/code&gt; ). 이 필드는 구성 키와 URL이 정확히 일치해야합니다. 생략 된 포트 번호는 일치하기 전에 체계에 대한 올바른 기본값으로 자동 변환됩니다.</target>
        </trans-unit>
        <trans-unit id="75288f00d3cca5affbead93289ac710b7d804777" translate="yes" xml:space="preserve">
          <source>Port specified as an option to all p4 commands, with &lt;code&gt;-p &amp;lt;port&amp;gt;&lt;/code&gt;. The environment variable &lt;code&gt;P4PORT&lt;/code&gt; can be used instead.</source>
          <target state="translated">&lt;code&gt;-p &amp;lt;port&amp;gt;&lt;/code&gt; 와 함께 모든 p4 명령에 대한 옵션으로 지정된 포트 . 환경 변수 &lt;code&gt;P4PORT&lt;/code&gt; 를 대신 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d03006f15a6deece98761a569d6fb9a550c11064" translate="yes" xml:space="preserve">
          <source>Possible status letters are:</source>
          <target state="translated">가능한 상태 편지는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="2e4db4c63c7f46787206b1d1234a6ef557d7a11f" translate="yes" xml:space="preserve">
          <source>Post-receive hook</source>
          <target state="translated">수신 후 후크</target>
        </trans-unit>
        <trans-unit id="bfc66b933494b39d9139ca2f875fbedec7e5e101" translate="yes" xml:space="preserve">
          <source>Post-update hook</source>
          <target state="translated">업데이트 후 후크</target>
        </trans-unit>
        <trans-unit id="f94b267b37a51057882021d23cd86eedc7aa6025" translate="yes" xml:space="preserve">
          <source>Pre-merge checks</source>
          <target state="translated">사전 병합 검사</target>
        </trans-unit>
        <trans-unit id="b3efe66caa7433d78cc0ca460492b30524a4fffe" translate="yes" xml:space="preserve">
          <source>Pre-receive hook</source>
          <target state="translated">사전 수신 후크</target>
        </trans-unit>
        <trans-unit id="78240cc944ed7959bc15c94695f728eafb8fe296" translate="yes" xml:space="preserve">
          <source>Prefer to use &lt;code&gt;git svn rebase&lt;/code&gt; or &lt;code&gt;git rebase&lt;/code&gt;, rather than &lt;code&gt;git pull&lt;/code&gt; or &lt;code&gt;git merge&lt;/code&gt; to synchronize unintegrated commits with a &lt;code&gt;git svn&lt;/code&gt; branch. Doing so will keep the history of unintegrated commits linear with respect to the upstream SVN repository and allow the use of the preferred &lt;code&gt;git svn dcommit&lt;/code&gt; subcommand to push unintegrated commits back into SVN.</source>
          <target state="translated">사용하는 것을 선호 &lt;code&gt;git svn rebase&lt;/code&gt; 또는 &lt;code&gt;git rebase&lt;/code&gt; 보다는 &lt;code&gt;git pull&lt;/code&gt; 또는 &lt;code&gt;git merge&lt;/code&gt; 와 통합되지 않은 커밋을 동기화하는 &lt;code&gt;git svn&lt;/code&gt; 지점입니다. 그렇게하면 통합되지 않은 커밋의 기록이 업스트림 SVN 저장소와 관련하여 선형으로 유지되고 선호되지 않는 &lt;code&gt;git svn dcommit&lt;/code&gt; 하위 명령을 사용하여 통합되지 않은 커밋을 다시 SVN으로 푸시 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="7858ef8a3e54ce180319d79ebe56992e0e058c1d" translate="yes" xml:space="preserve">
          <source>Prefix the 1-indexed byte-offset of the first match from the start of the matching line.</source>
          <target state="translated">일치하는 줄의 시작 부분에서 첫 번째 일치 항목의 1- 인덱스 바이트 오프셋을 접두사로 사용합니다.</target>
        </trans-unit>
        <trans-unit id="f98eece57f5c0c3847ca98d0dc9e3916d907af8e" translate="yes" xml:space="preserve">
          <source>Prefix the line number to matching lines.</source>
          <target state="translated">줄 번호 앞에 일치하는 줄을 붙입니다.</target>
        </trans-unit>
        <trans-unit id="cba9c5d09c8d367bd67d9492c7466ff20503c458" translate="yes" xml:space="preserve">
          <source>Prepare a public repository accessible to others, just like the &quot;project lead&quot; person does.</source>
          <target state="translated">&quot;프로젝트 리더&quot;와 마찬가지로 다른 사람이 액세스 할 수있는 공용 저장소를 준비하십시오.</target>
        </trans-unit>
        <trans-unit id="2a7490f3f599e93e81fac551095363496940e575" translate="yes" xml:space="preserve">
          <source>Prepare a public repository accessible to others.</source>
          <target state="translated">다른 사람이 액세스 할 수있는 공용 저장소를 준비하십시오.</target>
        </trans-unit>
        <trans-unit id="f3c2eb8e7f45787546457741123fe87f7a0f8282" translate="yes" xml:space="preserve">
          <source>Prepare each commit with its patch in one file per commit, formatted to resemble UNIX mailbox format. The output of this command is convenient for e-mail submission or for use with &lt;code&gt;git am&lt;/code&gt;.</source>
          <target state="translated">커밋 당 하나의 파일에 패치가있는 각 커밋을 준비하고 UNIX 사서함 형식과 유사하게 형식화하십시오. 이 명령의 출력은 전자 메일 제출이나 &lt;code&gt;git am&lt;/code&gt; 과 함께 사용하기에 편리합니다 .</target>
        </trans-unit>
        <trans-unit id="5bf024f30d7d353a4bfdcd90569f916ebb19100a" translate="yes" xml:space="preserve">
          <source>Prepare patches for e-mail submission</source>
          <target state="translated">이메일 제출을위한 패치 준비</target>
        </trans-unit>
        <trans-unit id="a8276d8a28067c8245d05a67d9e202424a88780d" translate="yes" xml:space="preserve">
          <source>Prepare patches from the topmost &amp;lt;n&amp;gt; commits.</source>
          <target state="translated">최상위 &amp;lt;n&amp;gt; 커밋에서 패치를 준비하십시오.</target>
        </trans-unit>
        <trans-unit id="99740b269904a01f8762ffe4e520b6b559ecd506" translate="yes" xml:space="preserve">
          <source>Prepare the patch as a text file using your method of choice.</source>
          <target state="translated">선택한 방법을 사용하여 패치를 텍스트 파일로 준비하십시오.</target>
        </trans-unit>
        <trans-unit id="f5c02726894a93a50b6991465d16de430338896a" translate="yes" xml:space="preserve">
          <source>Prepare the patch as a text file.</source>
          <target state="translated">패치를 텍스트 파일로 준비하십시오.</target>
        </trans-unit>
        <trans-unit id="5fdffb29f622a40bb487926aa05bf2c00b010193" translate="yes" xml:space="preserve">
          <source>Prepare to work on top of &lt;code&gt;&amp;lt;commit&amp;gt;&lt;/code&gt;, by detaching &lt;code&gt;HEAD&lt;/code&gt; at it (see &quot;DETACHED HEAD&quot; section), and updating the index and the files in the working tree. Local modifications to the files in the working tree are kept, so that the resulting working tree will be the state recorded in the commit plus the local modifications.</source>
          <target state="translated">&lt;code&gt;&amp;lt;commit&amp;gt;&lt;/code&gt; 위에서 &lt;code&gt;HEAD&lt;/code&gt; 를 분리 하고 ( &quot;DETACHED HEAD&quot;섹션 참조) 작업 트리에서 색인 및 파일을 업데이트하여 작업을 준비하십시오. 작업 트리의 파일에 대한 로컬 수정은 유지되므로 결과 작업 트리는 커밋에 기록 된 상태와 로컬 수정이됩니다.</target>
        </trans-unit>
        <trans-unit id="f2f7b858e8531ffd309df8bd0107db9d4a088dc3" translate="yes" xml:space="preserve">
          <source>Prepare your primary repository on your local machine. Your work is done there.</source>
          <target state="translated">로컬 머신에서 기본 저장소를 준비하십시오. 당신의 작업은 거기서 이루어집니다.</target>
        </trans-unit>
        <trans-unit id="6351b7119828a745613d6b91f6668ddb5c9afa30" translate="yes" xml:space="preserve">
          <source>Prepare your work repository, by &lt;code&gt;git clone&lt;/code&gt; the public repository of the &quot;project lead&quot; (or a &quot;subsystem maintainer&quot;, if you work on a subsystem). The URL used for the initial cloning is stored in the remote.origin.url configuration variable.</source>
          <target state="translated">&quot;프로젝트 리드&quot;(또는 서브 시스템에서 작업하는 경우 &quot;하위 시스템 관리자&quot;)의 공용 저장소를 &lt;code&gt;git clone&lt;/code&gt; 하여 작업 저장소를 준비하십시오 . 초기 복제에 사용 된 URL은 remote.origin.url 구성 변수에 저장됩니다.</target>
        </trans-unit>
        <trans-unit id="ab02c2194a1b4abbc5e110578e0e0c5797b11598" translate="yes" xml:space="preserve">
          <source>Prepare your work repository, by running &lt;code&gt;git clone&lt;/code&gt; on the public repository of the &quot;project lead&quot;. The URL used for the initial cloning is stored in the remote.origin.url configuration variable.</source>
          <target state="translated">&quot;프로젝트 리드&quot;의 공용 저장소 에서 &lt;code&gt;git clone&lt;/code&gt; 을 실행하여 작업 저장소를 준비하십시오 . 초기 복제에 사용 된 URL은 remote.origin.url 구성 변수에 저장됩니다.</target>
        </trans-unit>
        <trans-unit id="8d8f6ddbe39b836164638d60534dc0f8ce8c98b4" translate="yes" xml:space="preserve">
          <source>Prepend &amp;lt;path&amp;gt; to paths printed in informative messages such as &quot;Fetching submodule foo&quot;. This option is used internally when recursing over submodules.</source>
          <target state="translated">&quot;패치 서브 모듈 foo&quot;와 같은 정보 메시지로 인쇄 된 경로 앞에 &amp;lt;path&amp;gt;를 추가하십시오. 이 옵션은 서브 모듈을 통해 재귀 할 때 내부적으로 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="0d9e5ac62ee99d055177c6a4f95d4b7fe25a63a3" translate="yes" xml:space="preserve">
          <source>Prepend &amp;lt;prefix&amp;gt;/ to each filename in the archive.</source>
          <target state="translated">아카이브의 각 파일 이름 앞에 &amp;lt;prefix&amp;gt; /를 추가하십시오.</target>
        </trans-unit>
        <trans-unit id="a1528f0aff1e31c1f36c8998ca335269e9595dd6" translate="yes" xml:space="preserve">
          <source>Prepend &amp;lt;root&amp;gt; to all filenames. If a &quot;-p&quot; argument was also passed, it is applied before prepending the new root.</source>
          <target state="translated">모든 파일 이름 앞에 &amp;lt;root&amp;gt;를 추가하십시오. &quot;-p&quot;인수도 전달 된 경우 새 루트 앞에 추가하기 전에 적용됩니다.</target>
        </trans-unit>
        <trans-unit id="04fbe49467d421955780154f308daccbf9dcf57a" translate="yes" xml:space="preserve">
          <source>Prepend &lt;code&gt;path&lt;/code&gt; to requested CVSROOT</source>
          <target state="translated">요청 된 CVSROOT의 &lt;code&gt;path&lt;/code&gt; 추가</target>
        </trans-unit>
        <trans-unit id="0347b26685846c1b1d2b4efcd87239056762e453" translate="yes" xml:space="preserve">
          <source>Prepend an additional prefix to every line of output.</source>
          <target state="translated">모든 출력 줄 앞에 추가 접두사를 붙입니다.</target>
        </trans-unit>
        <trans-unit id="965630002ec8181b6c5811ecd432fedf5278178d" translate="yes" xml:space="preserve">
          <source>Prepend comment character and blank to each line. Lines will automatically be terminated with a newline. On empty lines, only the comment character will be prepended.</source>
          <target state="translated">주석 문자를 추가하고 각 행을 비워 두십시오. 줄은 개행으로 자동 종료됩니다. 빈 줄에는 주석 문자 만 앞에 붙습니다.</target>
        </trans-unit>
        <trans-unit id="f16c17f5481a4b7eaab0eba6f32fe3b9bdb77e0a" translate="yes" xml:space="preserve">
          <source>Prepend the commit message with the provided prefix. Useful for patch series and the like.</source>
          <target state="translated">제공된 접두사로 커밋 메시지 앞에 추가하십시오. 패치 시리즈 등에 유용합니다.</target>
        </trans-unit>
        <trans-unit id="1cb847e80ec2973659a3bc43c24ba721cccfc0b9" translate="yes" xml:space="preserve">
          <source>Pretend as if all objects mentioned as ref tips of alternate repositories were listed on the command line. An alternate repository is any repository whose object directory is specified in &lt;code&gt;objects/info/alternates&lt;/code&gt;. The set of included objects may be modified by &lt;code&gt;core.alternateRefsCommand&lt;/code&gt;, etc. See &lt;a href=&quot;git-config&quot;&gt;git-config[1]&lt;/a&gt;.</source>
          <target state="translated">대체 저장소의 참조 팁으로 언급 된 모든 오브젝트가 명령 행에 나열된 것처럼 가장하십시오. 대체 저장소는 오브젝트 디렉토리가 &lt;code&gt;objects/info/alternates&lt;/code&gt; 에 지정된 저장소입니다 . 포함 된 객체 세트는 &lt;code&gt;core.alternateRefsCommand&lt;/code&gt; 등에 의해 수정 될 수 있습니다 . &lt;a href=&quot;git-config&quot;&gt;git-config [1]을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="d8790db7464ad43dc2580493a3a2b7fe9009b3b8" translate="yes" xml:space="preserve">
          <source>Pretend as if all objects mentioned by reflogs are listed on the command line as &lt;code&gt;&amp;lt;commit&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">reflogs에서 언급 한 모든 객체가 &lt;code&gt;&amp;lt;commit&amp;gt;&lt;/code&gt; 로 명령 행에 나열되는 것처럼 가장 합니다.</target>
        </trans-unit>
        <trans-unit id="1bc40db9cd0077507e159c30d2cc8ff273e4cf52" translate="yes" xml:space="preserve">
          <source>Pretend as if all the branches (tags, remote branches, resp.) are listed on the command line as &lt;code&gt;&amp;lt;commit&amp;gt;&lt;/code&gt;. If &lt;code&gt;&amp;lt;pattern&amp;gt;&lt;/code&gt; is given, limit refs to ones matching given shell glob. If pattern lacks &lt;code&gt;?&lt;/code&gt;, &lt;code&gt;*&lt;/code&gt;, or &lt;code&gt;[&lt;/code&gt;, &lt;code&gt;/*&lt;/code&gt; at the end is implied.</source>
          <target state="translated">모든 분기 (태그, 원격 분기 등)가 명령 줄에 &lt;code&gt;&amp;lt;commit&amp;gt;&lt;/code&gt; 으로 표시되는 것처럼 가장 합니다. 경우 &lt;code&gt;&amp;lt;pattern&amp;gt;&lt;/code&gt; 주어, 사람에 제한 심판은 쉘 글로브를 부여 매칭. 패턴이 없으면 &lt;code&gt;?&lt;/code&gt; 끝에 , &lt;code&gt;*&lt;/code&gt; 또는 &lt;code&gt;[&lt;/code&gt; , &lt;code&gt;/*&lt;/code&gt; 가 내포되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="a40d3b9ce3a70471c04394220cc5bbfab2baa7f5" translate="yes" xml:space="preserve">
          <source>Pretend as if all the refs in &lt;code&gt;refs/&lt;/code&gt;, along with &lt;code&gt;HEAD&lt;/code&gt;, are listed on the command line as &lt;code&gt;&amp;lt;commit&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;refs/&lt;/code&gt; 모든 참조 가 &lt;code&gt;HEAD&lt;/code&gt; 와 함께 명령 행에 &lt;code&gt;&amp;lt;commit&amp;gt;&lt;/code&gt; 로 표시되는 것처럼 가장하십시오 .</target>
        </trans-unit>
        <trans-unit id="1435ebeededb24db5ecef4374cafc152c655d0c5" translate="yes" xml:space="preserve">
          <source>Pretend as if all the refs in &lt;code&gt;refs/heads&lt;/code&gt; are listed on the command line as &lt;code&gt;&amp;lt;commit&amp;gt;&lt;/code&gt;. If &lt;code&gt;&amp;lt;pattern&amp;gt;&lt;/code&gt; is given, limit branches to ones matching given shell glob. If pattern lacks &lt;code&gt;?&lt;/code&gt;, &lt;code&gt;*&lt;/code&gt;, or &lt;code&gt;[&lt;/code&gt;, &lt;code&gt;/*&lt;/code&gt; at the end is implied.</source>
          <target state="translated">&lt;code&gt;refs/heads&lt;/code&gt; 모든 심판이 &lt;code&gt;&amp;lt;commit&amp;gt;&lt;/code&gt; 로 명령 행에 나열되는 것처럼 가장 합니다. 경우 &lt;code&gt;&amp;lt;pattern&amp;gt;&lt;/code&gt; 주어, 사람에 제한 분기 쉘 글로브를 부여 매칭. 패턴이 없으면 &lt;code&gt;?&lt;/code&gt; 끝에 , &lt;code&gt;*&lt;/code&gt; 또는 &lt;code&gt;[&lt;/code&gt; , &lt;code&gt;/*&lt;/code&gt; 가 내포되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="873bc395593997376453ce378c315180f9e8037d" translate="yes" xml:space="preserve">
          <source>Pretend as if all the refs in &lt;code&gt;refs/remotes&lt;/code&gt; are listed on the command line as &lt;code&gt;&amp;lt;commit&amp;gt;&lt;/code&gt;. If &lt;code&gt;&amp;lt;pattern&amp;gt;&lt;/code&gt; is given, limit remote-tracking branches to ones matching given shell glob. If pattern lacks &lt;code&gt;?&lt;/code&gt;, &lt;code&gt;*&lt;/code&gt;, or &lt;code&gt;[&lt;/code&gt;, &lt;code&gt;/*&lt;/code&gt; at the end is implied.</source>
          <target state="translated">&lt;code&gt;refs/remotes&lt;/code&gt; 모든 심판이 &lt;code&gt;&amp;lt;commit&amp;gt;&lt;/code&gt; 로 명령 행에 나열되는 것처럼 가장 합니다. 경우 &lt;code&gt;&amp;lt;pattern&amp;gt;&lt;/code&gt; 주어, 한계는 주어진 쉘 글롭 일치 것과 분기 원격 추적. 패턴이 없으면 &lt;code&gt;?&lt;/code&gt; 끝에 , &lt;code&gt;*&lt;/code&gt; 또는 &lt;code&gt;[&lt;/code&gt; , &lt;code&gt;/*&lt;/code&gt; 가 내포되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="779811bec709e50bc3c2986dda8163a1984c59e0" translate="yes" xml:space="preserve">
          <source>Pretend as if all the refs in &lt;code&gt;refs/tags&lt;/code&gt; are listed on the command line as &lt;code&gt;&amp;lt;commit&amp;gt;&lt;/code&gt;. If &lt;code&gt;&amp;lt;pattern&amp;gt;&lt;/code&gt; is given, limit tags to ones matching given shell glob. If pattern lacks &lt;code&gt;?&lt;/code&gt;, &lt;code&gt;*&lt;/code&gt;, or &lt;code&gt;[&lt;/code&gt;, &lt;code&gt;/*&lt;/code&gt; at the end is implied.</source>
          <target state="translated">&lt;code&gt;refs/tags&lt;/code&gt; 모든 심판이 &lt;code&gt;&amp;lt;commit&amp;gt;&lt;/code&gt; 로 명령 행에 나열되는 것처럼 가장 합니다. 경우 &lt;code&gt;&amp;lt;pattern&amp;gt;&lt;/code&gt; 주어, 사람에 한계 태그는 쉘 글로브를 부여 매칭. 패턴이 없으면 &lt;code&gt;?&lt;/code&gt; 끝에 , &lt;code&gt;*&lt;/code&gt; 또는 &lt;code&gt;[&lt;/code&gt; , &lt;code&gt;/*&lt;/code&gt; 가 내포되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="fd8bdbdeb72b98a3e7d8a71774e4228e25fd4361" translate="yes" xml:space="preserve">
          <source>Pretend as if all the refs matching shell glob &lt;code&gt;&amp;lt;glob-pattern&amp;gt;&lt;/code&gt; are listed on the command line as &lt;code&gt;&amp;lt;commit&amp;gt;&lt;/code&gt;. Leading &lt;code&gt;refs/&lt;/code&gt;, is automatically prepended if missing. If pattern lacks &lt;code&gt;?&lt;/code&gt;, &lt;code&gt;*&lt;/code&gt;, or &lt;code&gt;[&lt;/code&gt;, &lt;code&gt;/*&lt;/code&gt; at the end is implied.</source>
          <target state="translated">쉘 glob &lt;code&gt;&amp;lt;glob-pattern&amp;gt;&lt;/code&gt; 과 일치하는 모든 참조가 명령 행에 &lt;code&gt;&amp;lt;commit&amp;gt;&lt;/code&gt; 으로 나열되는 것처럼 가장하십시오 . 선행 &lt;code&gt;refs/&lt;/code&gt; 는 누락 된 경우 자동으로 추가됩니다. 패턴이 없으면 &lt;code&gt;?&lt;/code&gt; 끝에 , &lt;code&gt;*&lt;/code&gt; 또는 &lt;code&gt;[&lt;/code&gt; , &lt;code&gt;/*&lt;/code&gt; 가 내포되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="46b1cc7966c168f121c45715956556d8413ae7ad" translate="yes" xml:space="preserve">
          <source>Pretend as if all trees and blobs used by the index are listed on the command line. Note that you probably want to use &lt;code&gt;--objects&lt;/code&gt;, too.</source>
          <target state="translated">색인에 사용 된 모든 트리 및 블롭이 명령 줄에 나열된 것처럼 가장합니다. &lt;code&gt;--objects&lt;/code&gt; 도 사용하고 싶을 것입니다 .</target>
        </trans-unit>
        <trans-unit id="cc70d02297620c66f8bef755f564908a1a4698d8" translate="yes" xml:space="preserve">
          <source>Pretend as if the bad bisection ref &lt;code&gt;refs/bisect/bad&lt;/code&gt; was listed and as if it was followed by &lt;code&gt;--not&lt;/code&gt; and the good bisection refs &lt;code&gt;refs/bisect/good-*&lt;/code&gt; on the command line. Cannot be combined with --first-parent.</source>
          <target state="translated">불량 이등분 참조 참조 &lt;code&gt;refs/bisect/bad&lt;/code&gt; 가 나열된 것처럼 보이고 &lt;code&gt;--not&lt;/code&gt; 다음에 이등분 섹션 참조 가 명령 줄에 &lt;code&gt;refs/bisect/good-*&lt;/code&gt; 로 표시됩니다. --first-parent와 함께 사용할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="0a3604cb0b2f73cd8456355c098a4f83f14d6060" translate="yes" xml:space="preserve">
          <source>Pretty formats</source>
          <target state="translated">예쁜 형식</target>
        </trans-unit>
        <trans-unit id="1b76ed128a23a5286f4a7e2538cc00e5737e0416" translate="yes" xml:space="preserve">
          <source>Pretty-print the contents of &amp;lt;object&amp;gt; based on its type.</source>
          <target state="translated">유형에 따라 &amp;lt;object&amp;gt;의 내용을 예쁘게 인쇄하십시오.</target>
        </trans-unit>
        <trans-unit id="a741501b13f29bc4f4975a183857a345cfe33bda" translate="yes" xml:space="preserve">
          <source>Pretty-print the contents of the commit logs in a given format, where &lt;code&gt;&amp;lt;format&amp;gt;&lt;/code&gt; can be one of &lt;code&gt;oneline&lt;/code&gt;, &lt;code&gt;short&lt;/code&gt;, &lt;code&gt;medium&lt;/code&gt;, &lt;code&gt;full&lt;/code&gt;, &lt;code&gt;fuller&lt;/code&gt;, &lt;code&gt;reference&lt;/code&gt;, &lt;code&gt;email&lt;/code&gt;, &lt;code&gt;raw&lt;/code&gt;, &lt;code&gt;format:&amp;lt;string&amp;gt;&lt;/code&gt; and &lt;code&gt;tformat:&amp;lt;string&amp;gt;&lt;/code&gt;. When &lt;code&gt;&amp;lt;format&amp;gt;&lt;/code&gt; is none of the above, and has &lt;code&gt;%placeholder&lt;/code&gt; in it, it acts as if &lt;code&gt;--pretty=tformat:&amp;lt;format&amp;gt;&lt;/code&gt; were given.</source>
          <target state="translated">커밋 로그의 내용을 주어진 형식으로 잘 인쇄하십시오. 여기서 &lt;code&gt;&amp;lt;format&amp;gt;&lt;/code&gt; 은 &lt;code&gt;oneline&lt;/code&gt; , &lt;code&gt;short&lt;/code&gt; , &lt;code&gt;medium&lt;/code&gt; , &lt;code&gt;full&lt;/code&gt; , &lt;code&gt;fuller&lt;/code&gt; , &lt;code&gt;reference&lt;/code&gt; , &lt;code&gt;email&lt;/code&gt; , &lt;code&gt;raw&lt;/code&gt; , &lt;code&gt;format:&amp;lt;string&amp;gt;&lt;/code&gt; 및 &lt;code&gt;tformat:&amp;lt;string&amp;gt;&lt;/code&gt; 중 하나 일 수 있습니다. 경우 &lt;code&gt;&amp;lt;format&amp;gt;&lt;/code&gt; 상기 전혀없고, 보유 &lt;code&gt;%placeholder&lt;/code&gt; 는 것처럼 작용, 그것에 &lt;code&gt;--pretty=tformat:&amp;lt;format&amp;gt;&lt;/code&gt; 받았다.</target>
        </trans-unit>
        <trans-unit id="7bd89feebefa381d47a4005ee3e7a70495146fc2" translate="yes" xml:space="preserve">
          <source>Print a list of diff tools that may be used with &lt;code&gt;--tool&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;--tool&lt;/code&gt; 과 함께 사용할 수있는 diff 도구 목록을 인쇄하십시오 .</target>
        </trans-unit>
        <trans-unit id="4427ae28c9b6c7b34bdd7b24aed9e7c7d30f57b8" translate="yes" xml:space="preserve">
          <source>Print a list of merge tools that may be used with &lt;code&gt;--tool&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;--tool&lt;/code&gt; 과 함께 사용할 수있는 병합 도구 목록을 인쇄하십시오 .</target>
        </trans-unit>
        <trans-unit id="66756bdfb6c604999780ed06815c6e483a2bcdd8" translate="yes" xml:space="preserve">
          <source>Print a log message describing a merge of the &quot;master&quot; branch from the &quot;origin&quot; remote.</source>
          <target state="translated">&quot;원점&quot;리모트에서 &quot;마스터&quot;분기의 병합을 설명하는 로그 메시지를 인쇄하십시오.</target>
        </trans-unit>
        <trans-unit id="e170a2249107ead5e4f805939d3f7ece45fff682" translate="yes" xml:space="preserve">
          <source>Print a message to the terminal whenever Git is waiting for editor input from the user.</source>
          <target state="translated">Git이 사용자의 편집기 입력을 기다릴 때마다 터미널에 메시지를 인쇄하십시오.</target>
        </trans-unit>
        <trans-unit id="8080962c8d32b2cabab8eb19868e6e497af4f4fb" translate="yes" xml:space="preserve">
          <source>Print a number stating how many commits would have been listed, and suppress all other output. When used together with &lt;code&gt;--left-right&lt;/code&gt;, instead print the counts for left and right commits, separated by a tab. When used together with &lt;code&gt;--cherry-mark&lt;/code&gt;, omit patch equivalent commits from these counts and print the count for equivalent commits separated by a tab.</source>
          <target state="translated">나열된 커밋 수를 나타내는 숫자를 인쇄하고 다른 모든 출력을 억제하십시오. &lt;code&gt;--left-right&lt;/code&gt; 와 함께 사용하는 경우 대신 왼쪽과 오른쪽 커밋의 수를 탭으로 구분하여 인쇄하십시오. &lt;code&gt;--cherry-mark&lt;/code&gt; 와 함께 사용하면 이러한 카운트에서 패치 동등한 커밋을 생략하고 탭으로 구분 된 동등한 커밋에 대한 카운트를 인쇄합니다.</target>
        </trans-unit>
        <trans-unit id="5c8fe4e870e195a4e0e71c8a37d1ceb1bdba9faa" translate="yes" xml:space="preserve">
          <source>Print a short usage message and exit.</source>
          <target state="translated">간단한 사용법 메시지를 인쇄하고 종료하십시오.</target>
        </trans-unit>
        <trans-unit id="1605c83b597410df01a57b6af3b5c08c7935c987" translate="yes" xml:space="preserve">
          <source>Print all commits to the standard output in mbox format, instead of creating a file for each one.</source>
          <target state="translated">각각에 대한 파일을 작성하는 대신 표준 출력에 대한 모든 커밋을 mbox 형식으로 인쇄하십시오.</target>
        </trans-unit>
        <trans-unit id="bb80930a87afbf3e0cd1b6dbc46ac66a79700ef9" translate="yes" xml:space="preserve">
          <source>Print also the children of the commit (in the form &quot;commit child&amp;hellip;​&quot;). Also enables parent rewriting, see &lt;code&gt;History Simplification&lt;/code&gt; above.</source>
          <target state="translated">커밋의 자식도 인쇄합니다 ( &quot;커밋 자식&amp;hellip;&quot;형식으로). 부모 재 작성도 가능 합니다. 위의 &lt;code&gt;History Simplification&lt;/code&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="cd486c8f7fa4f0862a9438df255d9ef58e4cce2f" translate="yes" xml:space="preserve">
          <source>Print also the parents of the commit (in the form &quot;commit parent&amp;hellip;​&quot;). Also enables parent rewriting, see &lt;code&gt;History Simplification&lt;/code&gt; above.</source>
          <target state="translated">커밋의 부모도 인쇄하십시오 ( &quot;commit parent ...&quot;형식). 부모 재 작성도 가능 합니다. 위의 &lt;code&gt;History Simplification&lt;/code&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="f770a9ba11cec50c667f92df6a9581699d1c849f" translate="yes" xml:space="preserve">
          <source>Print an empty line between matches from different files.</source>
          <target state="translated">다른 파일에서 일치하는 항목 사이에 빈 줄을 인쇄하십시오.</target>
        </trans-unit>
        <trans-unit id="dc6bbcf836701f45b1b031bc09ccba6ceff978b1" translate="yes" xml:space="preserve">
          <source>Print extra information on screen.</source>
          <target state="translated">화면에 추가 정보를 인쇄하십시오.</target>
        </trans-unit>
        <trans-unit id="f77fc6854808124fa4634165848ea2138881c54f" translate="yes" xml:space="preserve">
          <source>Print lines matching a pattern</source>
          <target state="translated">패턴과 일치하는 선 인쇄</target>
        </trans-unit>
        <trans-unit id="6fe4856d75dfab579fe9349a68cc2bed1d0dadcc" translate="yes" xml:space="preserve">
          <source>Print object information and contents for each object provided on stdin. May not be combined with any other options or arguments except &lt;code&gt;--textconv&lt;/code&gt; or &lt;code&gt;--filters&lt;/code&gt;, in which case the input lines also need to specify the path, separated by whitespace. See the section &lt;code&gt;BATCH OUTPUT&lt;/code&gt; below for details.</source>
          <target state="translated">stdin에 제공된 각 오브젝트에 대한 오브젝트 정보 및 내용을 인쇄하십시오. &lt;code&gt;--textconv&lt;/code&gt; 또는 &lt;code&gt;--filters&lt;/code&gt; 를 제외한 다른 옵션 또는 인수와 함께 사용할 수 없습니다 .이 경우 입력 행도 공백으로 구분하여 경로를 지정해야합니다. 자세한 내용은 아래의 &lt;code&gt;BATCH OUTPUT&lt;/code&gt; 섹션 을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="ca4d7c5adc217a6aa2342c6778492ad7113796ff" translate="yes" xml:space="preserve">
          <source>Print object information for each object provided on stdin. May not be combined with any other options or arguments except &lt;code&gt;--textconv&lt;/code&gt; or &lt;code&gt;--filters&lt;/code&gt;, in which case the input lines also need to specify the path, separated by whitespace. See the section &lt;code&gt;BATCH OUTPUT&lt;/code&gt; below for details.</source>
          <target state="translated">stdin에 제공된 각 오브젝트에 대한 오브젝트 정보를 인쇄하십시오. &lt;code&gt;--textconv&lt;/code&gt; 또는 &lt;code&gt;--filters&lt;/code&gt; 를 제외한 다른 옵션 또는 인수와 함께 사용할 수 없습니다 .이 경우 입력 행도 공백으로 구분하여 경로를 지정해야합니다. 자세한 내용은 아래의 &lt;code&gt;BATCH OUTPUT&lt;/code&gt; 섹션 을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="355c9197a67577b10c87d266b1fadda4f338ce43" translate="yes" xml:space="preserve">
          <source>Print objects that exist but that are never &lt;code&gt;directly&lt;/code&gt; used (default). &lt;code&gt;--no-dangling&lt;/code&gt; can be used to omit this information from the output.</source>
          <target state="translated">존재하지만 &lt;code&gt;directly&lt;/code&gt; 사용 되지 않은 개체를 인쇄합니다 (기본값). &lt;code&gt;--no-dangling&lt;/code&gt; 을 사용하여 출력에서이 정보를 생략 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2b45348ee53d58a25f5424ead463a255068c26a3" translate="yes" xml:space="preserve">
          <source>Print only merge commits. This is exactly the same as &lt;code&gt;--min-parents=2&lt;/code&gt;.</source>
          <target state="translated">병합 커밋 만 인쇄합니다. 이것은 &lt;code&gt;--min-parents=2&lt;/code&gt; 와 정확히 동일 합니다.</target>
        </trans-unit>
        <trans-unit id="fba7bfcdde0d986db48ca498619d9372ecc7d2c2" translate="yes" xml:space="preserve">
          <source>Print only the matched (non-empty) parts of a matching line, with each such part on a separate output line.</source>
          <target state="translated">일치하는 줄의 일치하는 (비어 있지 않은) 부분 만 인쇄하고 각 부분은 별도의 출력 줄에 인쇄하십시오.</target>
        </trans-unit>
        <trans-unit id="a0fc3f1d0d97da65e736eae410fad9ae12d5c7be" translate="yes" xml:space="preserve">
          <source>Print out objects that exist but that aren&amp;rsquo;t reachable from any of the reference nodes.</source>
          <target state="translated">존재하지만 참조 노드에서 도달 할 수없는 객체를 인쇄합니다.</target>
        </trans-unit>
        <trans-unit id="e099bc42258fcb131e0b9e1b48df8c89349bb7b8" translate="yes" xml:space="preserve">
          <source>Print out the ref name given on the command line by which each commit was reached.</source>
          <target state="translated">각 커밋에 도달 한 명령 줄에 지정된 참조 이름을 인쇄하십시오.</target>
        </trans-unit>
        <trans-unit id="dcb3dcb3ba78d15754773caa5f744c3c4effdf42" translate="yes" xml:space="preserve">
          <source>Print out the ref names of any commits that are shown by the log command. If &lt;code&gt;short&lt;/code&gt; is specified, the ref name prefixes &lt;code&gt;refs/heads/&lt;/code&gt;, &lt;code&gt;refs/tags/&lt;/code&gt; and &lt;code&gt;refs/remotes/&lt;/code&gt; will not be printed. If &lt;code&gt;full&lt;/code&gt; is specified, the full ref name (including prefix) will be printed. If &lt;code&gt;auto&lt;/code&gt; is specified, then if the output is going to a terminal, the ref names are shown as if &lt;code&gt;short&lt;/code&gt; were given, otherwise no ref names are shown. This is the same as the &lt;code&gt;--decorate&lt;/code&gt; option of the &lt;code&gt;git log&lt;/code&gt;.</source>
          <target state="translated">log 명령으로 표시되는 커밋의 참조 이름을 인쇄하십시오. 경우 &lt;code&gt;short&lt;/code&gt; 지정되어, 심판의 이름은 접두사 &lt;code&gt;refs/heads/&lt;/code&gt; , &lt;code&gt;refs/tags/&lt;/code&gt; 및 &lt;code&gt;refs/remotes/&lt;/code&gt; 인쇄되지 않습니다. 경우 &lt;code&gt;full&lt;/code&gt; 지정됩니다 (접두사 포함) 전체 심판 이름이 인쇄됩니다. 경우 &lt;code&gt;auto&lt;/code&gt; 지정된 출력 단자에가는 경우처럼, 다음의 REF 이름은 도시되지 않은 &lt;code&gt;short&lt;/code&gt; 주어진 그렇지 REF 이름을 나타낸다 더. 이것은 &lt;code&gt;git log&lt;/code&gt; 의 &lt;code&gt;--decorate&lt;/code&gt; 옵션과 동일합니다 .</target>
        </trans-unit>
        <trans-unit id="53ce43f1821ebff917f188f20f204c3e06f211d4" translate="yes" xml:space="preserve">
          <source>Print out the ref names of any commits that are shown. If &lt;code&gt;short&lt;/code&gt; is specified, the ref name prefixes &lt;code&gt;refs/heads/&lt;/code&gt;, &lt;code&gt;refs/tags/&lt;/code&gt; and &lt;code&gt;refs/remotes/&lt;/code&gt; will not be printed. If &lt;code&gt;full&lt;/code&gt; is specified, the full ref name (including prefix) will be printed. If &lt;code&gt;auto&lt;/code&gt; is specified, then if the output is going to a terminal, the ref names are shown as if &lt;code&gt;short&lt;/code&gt; were given, otherwise no ref names are shown. The default option is &lt;code&gt;short&lt;/code&gt;.</source>
          <target state="translated">표시된 커밋의 참조 이름을 인쇄하십시오. 경우 &lt;code&gt;short&lt;/code&gt; 지정되어, 심판의 이름은 접두사 &lt;code&gt;refs/heads/&lt;/code&gt; , &lt;code&gt;refs/tags/&lt;/code&gt; 및 &lt;code&gt;refs/remotes/&lt;/code&gt; 인쇄되지 않습니다. 경우 &lt;code&gt;full&lt;/code&gt; 지정됩니다 (접두사 포함) 전체 심판 이름이 인쇄됩니다. 경우 &lt;code&gt;auto&lt;/code&gt; 지정된 출력 단자에가는 경우처럼, 다음의 REF 이름은 도시되지 않은 &lt;code&gt;short&lt;/code&gt; 주어진 그렇지 REF 이름을 나타낸다 더. 기본 옵션은 &lt;code&gt;short&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="2011b0d7f946e8a76de0461151323ce8a5c0f935" translate="yes" xml:space="preserve">
          <source>Print paths with conflicts that have not been autoresolved by rerere. This includes paths whose resolutions cannot be tracked by rerere, such as conflicting submodules.</source>
          <target state="translated">rerere로 자동 해결되지 않은 충돌이있는 경로를 인쇄하십시오. 여기에는 충돌하는 서브 모듈과 같이 해상도를 다시 추적 할 수없는 경로가 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="2cba919653a32310570084639bfa9ccc09fb9fa2" translate="yes" xml:space="preserve">
          <source>Print paths with conflicts whose merge resolution rerere will record.</source>
          <target state="translated">병합 해상도가 다시 기록되는 충돌이있는 경로를 인쇄하십시오.</target>
        </trans-unit>
        <trans-unit id="71b60883716e5c9ed5e8d89999bad00a8a7a60a2" translate="yes" xml:space="preserve">
          <source>Print sizes in human readable format</source>
          <target state="translated">사람이 읽을 수있는 형식으로 인쇄 크기</target>
        </trans-unit>
        <trans-unit id="7acdcc1d8a4a904a279ce2f15ace2f46f09a0e30" translate="yes" xml:space="preserve">
          <source>Print the commit object name from the revision in the $REV shell variable:</source>
          <target state="translated">$ REV 쉘 변수의 개정판에서 커미트 오브젝트 이름을 인쇄하십시오.</target>
        </trans-unit>
        <trans-unit id="395b30ff424b495b247b1df9486e5529542c8ab4" translate="yes" xml:space="preserve">
          <source>Print the contents of the commit in raw-format; each record is separated with a NUL character.</source>
          <target state="translated">커밋 내용을 원시 형식으로 인쇄하십시오. 각 레코드는 NUL 문자로 구분됩니다.</target>
        </trans-unit>
        <trans-unit id="a77cbdea967e7bc1835e082ef3a9add5606ab710" translate="yes" xml:space="preserve">
          <source>Print the contents of the commit object before validating it.</source>
          <target state="translated">확약하기 전에 확약 오브젝트의 내용을 인쇄하십시오.</target>
        </trans-unit>
        <trans-unit id="31d513cdd4715b4e34b1efb48c41837ed2726bf9" translate="yes" xml:space="preserve">
          <source>Print the contents of the tag object before validating it.</source>
          <target state="translated">태그 객체의 내용을 인쇄하기 전에 인쇄하십시오.</target>
        </trans-unit>
        <trans-unit id="87753483ea6cbbd041325490c8537b3b3cada35c" translate="yes" xml:space="preserve">
          <source>Print the current notes ref. This provides an easy way to retrieve the current notes ref (e.g. from scripts).</source>
          <target state="translated">현재 메모를 인쇄합니다. 이를 통해 현재 메모 참조를 쉽게 검색 할 수 있습니다 (예 : 스크립트).</target>
        </trans-unit>
        <trans-unit id="e336397774a866fc04e04e67418c962536311ce3" translate="yes" xml:space="preserve">
          <source>Print the manpath (see &lt;code&gt;man(1)&lt;/code&gt;) for the man pages for this version of Git and exit.</source>
          <target state="translated">이 버전의 Git에 대한 매뉴얼 페이지에 대한 manpath ( &lt;code&gt;man(1)&lt;/code&gt; 참조)를 인쇄 하고 종료하십시오.</target>
        </trans-unit>
        <trans-unit id="390fcf6665394474a4208236397a723ae5bbd841" translate="yes" xml:space="preserve">
          <source>Print the name of the current branch. In detached HEAD state, nothing is printed.</source>
          <target state="translated">현재 지점의 이름을 인쇄하십시오. 분리 된 HEAD 상태에서는 아무 것도 인쇄되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="727d2c972108087f617ca9a52e1404312cb08db7" translate="yes" xml:space="preserve">
          <source>Print the name of the previous thing checked out:</source>
          <target state="translated">체크 아웃 한 이전 항목의 이름을 인쇄하십시오.</target>
        </trans-unit>
        <trans-unit id="3642aa2b7cf9b2dae48578e1bdc6f3fea172cd09" translate="yes" xml:space="preserve">
          <source>Print the object IDs of any object referenced by the listed commits. &lt;code&gt;--objects foo ^bar&lt;/code&gt; thus means &amp;ldquo;send me all object IDs which I need to download if I have the commit object &lt;code&gt;bar&lt;/code&gt; but not &lt;code&gt;foo&lt;/code&gt;&amp;rdquo;.</source>
          <target state="translated">나열된 커밋이 참조하는 객체의 객체 ID를 인쇄하십시오. &lt;code&gt;--objects foo ^bar&lt;/code&gt; 는&amp;ldquo;커밋 객체 &lt;code&gt;bar&lt;/code&gt; 있지만 &lt;code&gt;foo&lt;/code&gt; 가 아닌 경우 다운로드해야하는 모든 객체 ID를 보내십시오&amp;rdquo;를 의미합니다 .</target>
        </trans-unit>
        <trans-unit id="38fa474c9535276a4f6e33490b7ff8dcbbdc81f4" translate="yes" xml:space="preserve">
          <source>Print the object name of the current commit:</source>
          <target state="translated">현재 커밋의 객체 이름을 인쇄하십시오.</target>
        </trans-unit>
        <trans-unit id="ee021a7e92899d06aae374f43dcf779c8609f3ff" translate="yes" xml:space="preserve">
          <source>Print the path where the Info files documenting this version of Git are installed and exit.</source>
          <target state="translated">이 버전의 Git을 문서화하는 Info 파일이 설치된 경로를 인쇄하고 종료하십시오.</target>
        </trans-unit>
        <trans-unit id="f91d6d93e8468421a09b4a14a734bbd616d1eaec" translate="yes" xml:space="preserve">
          <source>Print the path, without trailing slash, where Git&amp;rsquo;s HTML documentation is installed and exit.</source>
          <target state="translated">Git의 HTML 문서가 설치된 슬래시없이 경로를 인쇄하고 종료하십시오.</target>
        </trans-unit>
        <trans-unit id="c416409aca85a3200dcaeb96638cdf0bb7fd9f1e" translate="yes" xml:space="preserve">
          <source>Print the raw commit timestamp.</source>
          <target state="translated">원시 커밋 타임 스탬프를 인쇄하십시오.</target>
        </trans-unit>
        <trans-unit id="a639de23ccd7b17d5228ed28b0950d8dd10397fd" translate="yes" xml:space="preserve">
          <source>Print the raw gpg status output to standard error instead of the normal human-readable output.</source>
          <target state="translated">사람이 읽을 수있는 정상적인 출력 대신 원시 gpg 상태 출력을 표준 오류로 인쇄하십시오.</target>
        </trans-unit>
        <trans-unit id="99ac22b00f0c79de0ff529dde835b6047cf02100" translate="yes" xml:space="preserve">
          <source>Print tree and blob ids in order of the commits. The tree and blob ids are printed after they are first referenced by a commit.</source>
          <target state="translated">커밋 순서대로 트리 및 BLOB ID를 인쇄하십시오. 트리 및 BLOB ID는 커밋에서 처음 참조한 후에 인쇄됩니다.</target>
        </trans-unit>
        <trans-unit id="3b22396fd69e4727d40157cf2f987d6e09d1fcff" translate="yes" xml:space="preserve">
          <source>Print usage information and exit</source>
          <target state="translated">사용 정보를 인쇄하고 종료</target>
        </trans-unit>
        <trans-unit id="8b0271d848c59df8398c3108bdeba41e38e8636a" translate="yes" xml:space="preserve">
          <source>Print version information and exit</source>
          <target state="translated">버전 정보 인쇄 및 종료</target>
        </trans-unit>
        <trans-unit id="85ec1b3fb97897b6ced8a489e132839db30e011a" translate="yes" xml:space="preserve">
          <source>Prints a Git logical variable.</source>
          <target state="translated">Git 논리 변수를 인쇄합니다.</target>
        </trans-unit>
        <trans-unit id="401d02aaba20f08ba2e39483d254996af7aae137" translate="yes" xml:space="preserve">
          <source>Prints a list of useful guides on the standard output. This option overrides any given command or guide name.</source>
          <target state="translated">표준 출력에 대한 유용한 안내서 목록을 인쇄합니다. 이 옵션은 지정된 명령 또는 안내서 이름을 대체합니다.</target>
        </trans-unit>
        <trans-unit id="fb51737d6bf1a9b6afa9ffc69b82cbde8918bef7" translate="yes" xml:space="preserve">
          <source>Prints all the available commands on the standard output. This option overrides any given command or guide name.</source>
          <target state="translated">사용 가능한 모든 명령을 표준 출력에 인쇄합니다. 이 옵션은 지정된 명령 또는 안내서 이름을 대체합니다.</target>
        </trans-unit>
        <trans-unit id="f5aac771b999435096d722ba3e59e6103d7d4c50" translate="yes" xml:space="preserve">
          <source>Prints information about the object at a path to a file descriptor previously arranged with the &lt;code&gt;--cat-blob-fd&lt;/code&gt; argument. This allows printing a blob from the active commit (with &lt;code&gt;cat-blob&lt;/code&gt;) or copying a blob or tree from a previous commit for use in the current one (with &lt;code&gt;filemodify&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;--cat-blob-fd&lt;/code&gt; 인수로 이전에 배열 된 파일 디스크립터의 경로에서 오브젝트에 대한 정보를 인쇄합니다 . 이를 통해 활성 커밋에서 얼룩을 인쇄하거나 ( &lt;code&gt;cat-blob&lt;/code&gt; 사용 ) 현재 커밋에서 사용하기 위해 이전 커밋에서 얼룩 또는 트리를 복사 할 수 있습니다 ( &lt;code&gt;filemodify&lt;/code&gt; 사용 ).</target>
        </trans-unit>
        <trans-unit id="67f72d83deebf87ad84204db25d15bef66391fa1" translate="yes" xml:space="preserve">
          <source>Prints the Git suite version that the &lt;code&gt;git&lt;/code&gt; program came from.</source>
          <target state="translated">&lt;code&gt;git&lt;/code&gt; 프로그램 의 Git suite 버전을 인쇄합니다 .</target>
        </trans-unit>
        <trans-unit id="31cffb4ffe2a30a3dd8ff5b977f393cbba618dfd" translate="yes" xml:space="preserve">
          <source>Prints the synopsis and a list of the most commonly used commands. If the option &lt;code&gt;--all&lt;/code&gt; or &lt;code&gt;-a&lt;/code&gt; is given then all available commands are printed. If a Git command is named this option will bring up the manual page for that command.</source>
          <target state="translated">시놉시스와 가장 일반적으로 사용되는 명령 목록을 인쇄합니다. &lt;code&gt;--all&lt;/code&gt; 또는 &lt;code&gt;-a&lt;/code&gt; 옵션 이 제공 되면 사용 가능한 모든 명령이 인쇄됩니다. Git 명령의 이름이 지정되면이 옵션은 해당 명령에 대한 매뉴얼 페이지를 불러옵니다.</target>
        </trans-unit>
        <trans-unit id="866254572e1e21a744b0d521a136d91326c823cd" translate="yes" xml:space="preserve">
          <source>Problems related to branches:</source>
          <target state="translated">지점 관련 문제 :</target>
        </trans-unit>
        <trans-unit id="ca677c6e0873752e051f5b6dc5cfbc5f3713a96f" translate="yes" xml:space="preserve">
          <source>Problems related to tags:</source>
          <target state="translated">태그 관련 문제 :</target>
        </trans-unit>
        <trans-unit id="704eb4f9500e5abbbd40e21ecae0dbc6632f17d7" translate="yes" xml:space="preserve">
          <source>Problems related to timestamps:</source>
          <target state="translated">타임 스탬프 관련 문제 :</target>
        </trans-unit>
        <trans-unit id="face2a8f1265d0d2162b3bb8d6cc8c2e4f00bd1a" translate="yes" xml:space="preserve">
          <source>Problems with rewriting history</source>
          <target state="translated">기록 다시 작성 문제</target>
        </trans-unit>
        <trans-unit id="cb8ad1a0606d68ac22c37138a82e9dcd94bd7b47" translate="yes" xml:space="preserve">
          <source>Proceed even if the index or the working tree differs from &lt;code&gt;HEAD&lt;/code&gt;. Both the index and working tree are restored to match the switching target. If &lt;code&gt;--recurse-submodules&lt;/code&gt; is specified, submodule content is also restored to match the switching target. This is used to throw away local changes.</source>
          <target state="translated">색인 또는 작업 트리가 &lt;code&gt;HEAD&lt;/code&gt; 와 다른 경우에도 진행하십시오 . 인덱스와 작업 트리가 모두 전환 대상과 일치하도록 복원됩니다. 경우 &lt;code&gt;--recurse-submodules&lt;/code&gt; 지정된 서브 모듈 컨텐츠는 전환 대상과 일치하도록 복원된다. 로컬 변경 사항을 버리는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="81635a56ae860db0a8d1fccf460faed330395977" translate="yes" xml:space="preserve">
          <source>Process binary files as if they were text.</source>
          <target state="translated">바이너리 파일을 마치 텍스트처럼 처리하십시오.</target>
        </trans-unit>
        <trans-unit id="c13073a8e5c76f53a6790b53a64799c267eda4e9" translate="yes" xml:space="preserve">
          <source>Process files in the order specified in the &amp;lt;orderfile&amp;gt;, which has one shell glob pattern per line. This overrides the &lt;code&gt;diff.orderFile&lt;/code&gt; configuration variable (see &lt;a href=&quot;git-config&quot;&gt;git-config[1]&lt;/a&gt;). To cancel &lt;code&gt;diff.orderFile&lt;/code&gt;, use &lt;code&gt;-O/dev/null&lt;/code&gt;.</source>
          <target state="translated">&amp;lt;orderfile&amp;gt;에 지정된 순서대로 파일을 처리하십시오. 행당 하나의 쉘 글로브 패턴이 있습니다. 이것은 &lt;code&gt;diff.orderFile&lt;/code&gt; 구성 변수를 대체합니다 ( &lt;a href=&quot;git-config&quot;&gt;git-config [1] 참조&lt;/a&gt; ). 취소하려면 &lt;code&gt;diff.orderFile&lt;/code&gt; 사용 &lt;code&gt;-O/dev/null&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="efe0d70966f95f77c3e86b43812298f2ec9b000a" translate="yes" xml:space="preserve">
          <source>Process the reflogs of all references.</source>
          <target state="translated">모든 참조의 참조 로그를 처리하십시오.</target>
        </trans-unit>
        <trans-unit id="0782c5b7801790281dc0fb4b01651b8bfdcbc4f5" translate="yes" xml:space="preserve">
          <source>Processes all packs. Any filenames on the command line are ignored.</source>
          <target state="translated">모든 팩을 처리합니다. 명령 행의 모든 ​​파일 이름은 무시됩니다.</target>
        </trans-unit>
        <trans-unit id="3c46a3f16a2a32b7eba71a8379b8360472d65d8d" translate="yes" xml:space="preserve">
          <source>Processes the specified option so that git fast-import behaves in a way that suits the frontend&amp;rsquo;s needs. Note that options specified by the frontend are overridden by any options the user may specify to git fast-import itself.</source>
          <target state="translated">git fast-import가 프론트 엔드의 요구에 맞는 방식으로 동작하도록 지정된 옵션을 처리합니다. 프런트 엔드에서 지정한 옵션은 사용자가 빠른 가져 오기 자체를 지정하도록 지정할 수있는 모든 옵션으로 재정의됩니다.</target>
        </trans-unit>
        <trans-unit id="2de3013c8cd324e1d7d27384810d30bdbff48678" translate="yes" xml:space="preserve">
          <source>Produce a merge commit message</source>
          <target state="translated">병합 커밋 메시지 생성</target>
        </trans-unit>
        <trans-unit id="221bd606329bfae672e0ecc9594988658e144e37" translate="yes" xml:space="preserve">
          <source>Produce machine-readable output. The output status line for each ref will be tab-separated and sent to stdout instead of stderr. The full symbolic names of the refs will be given.</source>
          <target state="translated">기계가 읽을 수있는 출력을 생성합니다. 각 심판의 출력 상태 라인은 탭으로 구분되어 stderr 대신 stdout으로 전송됩니다. 심판의 전체 상징 이름이 제공됩니다.</target>
        </trans-unit>
        <trans-unit id="fa20429458d99d060783732e4d2e8bf497560d29" translate="yes" xml:space="preserve">
          <source>Produce output in the same format as &lt;code&gt;git blame&lt;/code&gt;, but with SVN revision numbers instead of Git commit hashes. In this mode, changes that haven&amp;rsquo;t been committed to SVN (including local working-copy edits) are shown as revision 0.</source>
          <target state="translated">&lt;code&gt;git blame&lt;/code&gt; 과 같은 형식으로 출력 하지만 Git commit 해시 대신 SVN 개정 번호를 사용하십시오. 이 모드에서 SVN에 커밋되지 않은 변경 사항 (로컬 작업 복사 편집 포함)은 개정 0으로 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="cb195c53f13c5c90951762ba09047296d46995e9" translate="yes" xml:space="preserve">
          <source>Produce the working tree and index state as if a real merge happened (except for the merge information), but do not actually make a commit, move the &lt;code&gt;HEAD&lt;/code&gt;, or record &lt;code&gt;$GIT_DIR/MERGE_HEAD&lt;/code&gt; (to cause the next &lt;code&gt;git commit&lt;/code&gt; command to create a merge commit). This allows you to create a single commit on top of the current branch whose effect is the same as merging another branch (or more in case of an octopus).</source>
          <target state="translated">실제 병합이 발생한 것처럼 (작업 정보를 제외하고) 작업 트리 및 인덱스 상태를 생성하지만 실제로 커밋을하지 않거나 &lt;code&gt;HEAD&lt;/code&gt; 를 이동 하거나 &lt;code&gt;$GIT_DIR/MERGE_HEAD&lt;/code&gt; 기록 하여 (다음 &lt;code&gt;git commit&lt;/code&gt; 명령으로 인해 병합 커밋). 이를 통해 현재 분기 위에 단일 커밋을 만들 수 있으며 그 효과는 다른 분기를 병합하는 것과 동일합니다 (또는 문어의 경우 더 많음).</target>
        </trans-unit>
        <trans-unit id="465a8ba2d1fbe9de5dbb0d6da6e9b4fc2bd5f63f" translate="yes" xml:space="preserve">
          <source>Produces a fast-import stream which imports the current value of the named ref. It may additionally import other refs as needed to construct the history efficiently. The script writes to a helper-specific private namespace. The value of the named ref should be written to a location in this namespace derived by applying the refspecs from the &quot;refspec&quot; capability to the name of the ref.</source>
          <target state="translated">명명 된 참조의 현재 값을 가져 오는 빠른 가져 오기 스트림을 생성합니다. 히스토리를 효율적으로 구성하는 데 필요한 다른 참조를 추가로 가져올 수 있습니다. 이 스크립트는 도우미 특정 개인 네임 스페이스에 씁니다. 이름이 지정된 참조의 값은 &quot;refspec&quot;기능의 참조 스펙을 참조 이름에 적용하여 파생 된이 네임 스페이스의 위치에 기록되어야합니다.</target>
        </trans-unit>
        <trans-unit id="c940155095e7923b03e52693b949145b33288361" translate="yes" xml:space="preserve">
          <source>Progress status is reported on the standard error stream by default when it is attached to a terminal, unless --no-progress or --verbose is specified. --progress forces progress status even if the standard error stream is not directed to a terminal.</source>
          <target state="translated">--no-progress 또는 --verbose를 지정하지 않으면 표준 오류 스트림이 터미널에 연결될 때 기본적으로 진행 상태가보고됩니다. --progress는 표준 오류 스트림이 터미널로 보내지지 않더라도 진행 상태를 강제합니다.</target>
        </trans-unit>
        <trans-unit id="2dcc9cf9e59b81f490159a20a52344236fd5a3dc" translate="yes" xml:space="preserve">
          <source>Progress status is reported on the standard error stream by default when it is attached to a terminal, unless -q is specified. This flag forces progress status even if the standard error stream is not directed to a terminal.</source>
          <target state="translated">-q를 지정하지 않으면 표준 오류 스트림이 터미널에 연결될 때 기본적으로 진행 상태가보고됩니다. 이 플래그는 표준 오류 스트림이 터미널로 보내지지 않더라도 진행 상태를 강제합니다.</target>
        </trans-unit>
        <trans-unit id="e5cc82042c92eacaa55f040bd35ecdec7afbf1c3" translate="yes" xml:space="preserve">
          <source>Progress status is reported on the standard error stream by default when it is attached to a terminal, unless &lt;code&gt;--quiet&lt;/code&gt; is specified. This flag enables progress reporting even if not attached to a terminal, regardless of &lt;code&gt;--quiet&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;--quiet&lt;/code&gt; 을 지정 하지 않으면 표준 오류 스트림이 터미널에 연결될 때 기본적으로 진행 상태가보고 됩니다. 이 플래그는 &lt;code&gt;--quiet&lt;/code&gt; 에 관계없이 터미널에 연결되지 않은 경우에도 진행률보고를 가능하게 합니다.</target>
        </trans-unit>
        <trans-unit id="84082a3e9b3738ac2cad5de1d40208e556f0b5a9" translate="yes" xml:space="preserve">
          <source>Progress status is reported on the standard error stream by default when it is attached to a terminal, unless &lt;code&gt;--quiet&lt;/code&gt; is specified. This flag forces progress status even if the standard error stream is not directed to a terminal.</source>
          <target state="translated">&lt;code&gt;--quiet&lt;/code&gt; 을 지정 하지 않으면 표준 오류 스트림이 터미널에 연결될 때 기본적으로 진행 상태가보고 됩니다. 이 플래그는 표준 오류 스트림이 터미널로 보내지지 않더라도 진행 상태를 강제합니다.</target>
        </trans-unit>
        <trans-unit id="8942c3e281f4b4272bf2fa19690b7dbfeb0da954" translate="yes" xml:space="preserve">
          <source>Progress status is reported on the standard error stream by default when it is attached to a terminal. This flag enables progress reporting even if not attached to a terminal. Can&amp;rsquo;t use &lt;code&gt;--progress&lt;/code&gt; together with &lt;code&gt;--porcelain&lt;/code&gt; or &lt;code&gt;--incremental&lt;/code&gt;.</source>
          <target state="translated">진행 상태는 표준 오류 스트림이 터미널에 연결될 때 기본적으로보고됩니다. 이 플래그는 터미널에 연결되지 않은 경우에도 진행보고를 가능하게합니다. &lt;code&gt;--progress&lt;/code&gt; 를 &lt;code&gt;--porcelain&lt;/code&gt; 또는 &lt;code&gt;--incremental&lt;/code&gt; 과 함께 사용할 수 없습니다 .</target>
        </trans-unit>
        <trans-unit id="a4a80ecee0b21f76717158fcc872d2fe8c9f70c9" translate="yes" xml:space="preserve">
          <source>Project list files should list one project per line, with each line having the following format</source>
          <target state="translated">프로젝트 목록 파일은 라인 당 하나의 프로젝트를 나열해야하며 각 라인은 다음 형식을 갖습니다.</target>
        </trans-unit>
        <trans-unit id="64ddeaf66879746d77d52edba9fc6b51c3b5494f" translate="yes" xml:space="preserve">
          <source>Project specific override is not supported.</source>
          <target state="translated">프로젝트 별 재정의는 지원되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="38cb6b6f38fc49666443f39245952417f433b632" translate="yes" xml:space="preserve">
          <source>Projects list file format</source>
          <target state="translated">프로젝트 목록 파일 형식</target>
        </trans-unit>
        <trans-unit id="99a6cf116ac91087c7f440f3f894b1353453be3c" translate="yes" xml:space="preserve">
          <source>Promisor packfiles are repacked separately: if there are packfiles that have an associated &quot;.promisor&quot; file, these packfiles will be repacked into another separate pack, and an empty &quot;.promisor&quot; file corresponding to the new separate pack will be written.</source>
          <target state="translated">Promisor 팩 파일은 별도로 재 포장됩니다. &quot;.promisor&quot;파일과 관련된 팩 파일이있는 경우이 팩 파일은 다른 별도 팩으로 재 포장되고 새 별도 팩에 해당하는 빈 &quot;.promisor&quot;파일이 작성됩니다.</target>
        </trans-unit>
        <trans-unit id="1e3e6d8a5678027c372d639c7caa1ae762739111" translate="yes" xml:space="preserve">
          <source>Prompt before each invocation of the diff tool.</source>
          <target state="translated">diff 도구를 호출하기 전에 프롬프트하십시오.</target>
        </trans-unit>
        <trans-unit id="011847e8f4535310d3585f3561b850f5eaa68bd2" translate="yes" xml:space="preserve">
          <source>Prompt before each invocation of the diff tool. This is the default behaviour; the option is provided to override any configuration settings.</source>
          <target state="translated">diff 도구를 호출하기 전에 프롬프트하십시오. 이것이 기본 동작입니다. 옵션은 모든 구성 설정을 무시하기 위해 제공됩니다.</target>
        </trans-unit>
        <trans-unit id="60f48217749656a50ce363c78d14fe3fba58b27e" translate="yes" xml:space="preserve">
          <source>Prompt before each invocation of the merge resolution program to give the user a chance to skip the path.</source>
          <target state="translated">병합 해결 프로그램을 호출 할 때마다 사용자에게 경로를 건너 뛸 수있는 프롬프트가 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="1bd1cfd1155b4114e14d09a7c37c4a191ca7ac30" translate="yes" xml:space="preserve">
          <source>Prompt before each invocation of the merge resolution program.</source>
          <target state="translated">병합 해결 프로그램을 호출하기 전에 확인하십시오.</target>
        </trans-unit>
        <trans-unit id="353a353b6eb50b67e795967c32fb24f9eeb5d549" translate="yes" xml:space="preserve">
          <source>Protocol notes: If you are using anonymous access via pserver, just select that. Those using SSH access should choose the &lt;code&gt;ext&lt;/code&gt; protocol, and configure &lt;code&gt;ext&lt;/code&gt; access on the Preferences&amp;rarr;Team&amp;rarr;CVS&amp;rarr;ExtConnection pane. Set CVS_SERVER to &quot;&lt;code&gt;git cvsserver&lt;/code&gt;&quot;. Note that password support is not good when using &lt;code&gt;ext&lt;/code&gt;, you will definitely want to have SSH keys setup.</source>
          <target state="translated">프로토콜 노트 : pserver를 통한 익명 액세스를 사용하는 경우이를 선택하십시오. SSH 액세스를 사용하는 사용자는 &lt;code&gt;ext&lt;/code&gt; 프로토콜을 선택 하고 기본 설정 &amp;rarr; 팀 &amp;rarr; CVS &amp;rarr; ExtConnection 창에서 &lt;code&gt;ext&lt;/code&gt; 액세스를 구성 해야합니다 . CVS_SERVER를 &quot; &lt;code&gt;git cvsserver&lt;/code&gt; &quot;로 설정하십시오 . &lt;code&gt;ext&lt;/code&gt; 를 사용할 때 비밀번호 지원이 좋지 않으므로 SSH 키를 설정해야합니다.</target>
        </trans-unit>
        <trans-unit id="4e8bf93a6f67bf7687593a7faf3fef64759fa4d3" translate="yes" xml:space="preserve">
          <source>Protocol version 2 is stateless by default. This means that all commands must only last a single round and be stateless from the perspective of the server side, unless the client has requested a capability indicating that state should be maintained by the server. Clients MUST NOT require state management on the server side in order to function correctly. This permits simple round-robin load-balancing on the server side, without needing to worry about state management.</source>
          <target state="translated">프로토콜 버전 2는 기본적으로 상태 비 저장입니다. 이는 클라이언트가 서버에 의해 상태를 유지해야한다는 기능을 요청하지 않는 한 모든 명령은 단일 라운드 동안 지속되어야하며 서버 측 관점에서 비 상태 유지되어야합니다. 클라이언트가 올바르게 작동하기 위해 서버 측에서 상태 관리를 요구해서는 안됩니다. 이를 통해 상태 관리에 대해 걱정할 필요없이 서버 측에서 간단한 라운드 로빈로드 균형 조정이 가능합니다.</target>
        </trans-unit>
        <trans-unit id="a457f44dce93162338e37dcadcb5a7e148a161e8" translate="yes" xml:space="preserve">
          <source>Provide content or type and size information for repository objects</source>
          <target state="translated">저장소 오브젝트에 대한 컨텐츠 또는 유형 및 크기 정보 제공</target>
        </trans-unit>
        <trans-unit id="ce1130d2639274732ace3560e1b161a1f25e1593" translate="yes" xml:space="preserve">
          <source>Provide more progress information.</source>
          <target state="translated">더 많은 진행 정보를 제공하십시오.</target>
        </trans-unit>
        <trans-unit id="ddd6c4f93ce8e6500d931f94e6b50cb8556ece89" translate="yes" xml:space="preserve">
          <source>Provides the default value for the &lt;code&gt;--from&lt;/code&gt; option to format-patch. Accepts a boolean value, or a name and email address. If false, format-patch defaults to &lt;code&gt;--no-from&lt;/code&gt;, using commit authors directly in the &quot;From:&quot; field of patch mails. If true, format-patch defaults to &lt;code&gt;--from&lt;/code&gt;, using your committer identity in the &quot;From:&quot; field of patch mails and including a &quot;From:&quot; field in the body of the patch mail if different. If set to a non-boolean value, format-patch uses that value instead of your committer identity. Defaults to false.</source>
          <target state="translated">&lt;code&gt;--from&lt;/code&gt; 옵션 의 기본값 을 format-patch로 제공합니다. 부울 값 또는 이름과 이메일 주소를 승인합니다. false 인 경우, 패치 메일의 &quot;보낸 사람 :&quot;필드에서 커밋 작성자를 사용하여 format-patch의 기본값은 &lt;code&gt;--no-from&lt;/code&gt; 입니다. true 인 경우 패치 메일의 &quot;보낸 사람 :&quot;필드에 커미터 ID를 사용하고 패치 메일 본문에 &quot;보낸 사람 :&quot;필드를 포함하는 format-patch의 기본값은 &lt;code&gt;--from&lt;/code&gt; 입니다. 부울이 아닌 값으로 설정하면 format-patch는 커미터 ID 대신 해당 값을 사용합니다. 기본값은 false입니다.</target>
        </trans-unit>
        <trans-unit id="07e705dc3eb04b1cd0e9d868ce2fbabc5a7b23e9" translate="yes" xml:space="preserve">
          <source>Provides the default value for the &lt;code&gt;--notes&lt;/code&gt; option to format-patch. Accepts a boolean value, or a ref which specifies where to get notes. If false, format-patch defaults to &lt;code&gt;--no-notes&lt;/code&gt;. If true, format-patch defaults to &lt;code&gt;--notes&lt;/code&gt;. If set to a non-boolean value, format-patch defaults to &lt;code&gt;--notes=&amp;lt;ref&amp;gt;&lt;/code&gt;, where &lt;code&gt;ref&lt;/code&gt; is the non-boolean value. Defaults to false.</source>
          <target state="translated">format-patch에 &lt;code&gt;--notes&lt;/code&gt; 옵션 의 기본값을 제공합니다 . 부울 값 또는 메모를 가져올 위치를 지정하는 참조를 승인합니다. false 인 경우 format-patch의 기본값은 &lt;code&gt;--no-notes&lt;/code&gt; 입니다. true 인 경우 format-patch의 기본값은 &lt;code&gt;--notes&lt;/code&gt; 입니다. 부울이 아닌 값으로 설정하면 format-patch의 기본값은 &lt;code&gt;--notes=&amp;lt;ref&amp;gt;&lt;/code&gt; 이며 여기서 &lt;code&gt;ref&lt;/code&gt; 는 부울이 아닌 값입니다. 기본값은 false입니다.</target>
        </trans-unit>
        <trans-unit id="dae8413448109f25f13d1230fdfd21a6427a0a34" translate="yes" xml:space="preserve">
          <source>Provides the name of the object in the original source control system. fast-import will simply ignore this directive, but filter processes which operate on and modify the stream before feeding to fast-import may have uses for this information</source>
          <target state="translated">원래 소스 제어 시스템에서 오브젝트의 이름을 제공합니다. 빠른 가져 오기는이 지시문을 무시하지만, 빠른 가져 오기에 공급하기 전에 스트림에서 작동하고 스트림을 수정하는 필터 프로세스는이 정보를 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="354f719eac7091e1c38104be699d2a68f56df045" translate="yes" xml:space="preserve">
          <source>Providing cvs access to a git repository</source>
          <target state="translated">자식 저장소에 cvs 액세스 제공</target>
        </trans-unit>
        <trans-unit id="05a28ca41ca8e50984ed01529e7df3e3335567dc" translate="yes" xml:space="preserve">
          <source>Prune all unreachable objects from the object database</source>
          <target state="translated">개체 데이터베이스에서 연결할 수없는 개체를 모두 정리</target>
        </trans-unit>
        <trans-unit id="347c95991436ac84fd290ccf1ebe7a72eadc41e7" translate="yes" xml:space="preserve">
          <source>Prune any reflog entries that point to &quot;broken commits&quot;. A broken commit is a commit that is not reachable from any of the reference tips and that refers, directly or indirectly, to a missing commit, tree, or blob object.</source>
          <target state="translated">&quot;깨진 커밋&quot;을 가리키는 모든 reflog 항목을 제거하십시오. 커미트 커미트는 참조 팁에서 도달 할 수없고 누락 된 커미트, 트리 또는 Blob 오브젝트를 직접 또는 간접적으로 참조하는 커미트입니다.</target>
        </trans-unit>
        <trans-unit id="a7eae2a7a6ec9df449cef235306188bcb1fafe15" translate="yes" xml:space="preserve">
          <source>Prune entries older than &lt;code&gt;&amp;lt;time&amp;gt;&lt;/code&gt; that are not reachable from the current tip of the branch. If this option is not specified, the expiration time is taken from the configuration setting &lt;code&gt;gc.reflogExpireUnreachable&lt;/code&gt;, which in turn defaults to 30 days. &lt;code&gt;--expire-unreachable=all&lt;/code&gt; prunes unreachable entries regardless of their age; &lt;code&gt;--expire-unreachable=never&lt;/code&gt; turns off early pruning of unreachable entries (but see &lt;code&gt;--expire&lt;/code&gt;).</source>
          <target state="translated">분기의 현재 팁에서 도달 할 수없는 &lt;code&gt;&amp;lt;time&amp;gt;&lt;/code&gt; 보다 오래된 항목을 정리 하십시오. 이 옵션을 지정하지 않으면 만료 시간은 구성 설정 &lt;code&gt;gc.reflogExpireUnreachable&lt;/code&gt; 에서 가져 오며 기본값은 30 일입니다. &lt;code&gt;--expire-unreachable=all&lt;/code&gt; 연령에 관계없이 도달 할 수없는 항목을 제거합니다. &lt;code&gt;--expire-unreachable=never&lt;/code&gt; 도달 할 수없는 항목의 초기 정리를 해제 하지 않습니다 (그러나 &lt;code&gt;--expire&lt;/code&gt; 참조 ).</target>
        </trans-unit>
        <trans-unit id="f510204b241f9f833d70b40e365b78ba855d5d73" translate="yes" xml:space="preserve">
          <source>Prune entries older than the specified time. If this option is not specified, the expiration time is taken from the configuration setting &lt;code&gt;gc.reflogExpire&lt;/code&gt;, which in turn defaults to 90 days. &lt;code&gt;--expire=all&lt;/code&gt; prunes entries regardless of their age; &lt;code&gt;--expire=never&lt;/code&gt; turns off pruning of reachable entries (but see &lt;code&gt;--expire-unreachable&lt;/code&gt;).</source>
          <target state="translated">지정된 시간보다 오래된 항목을 정리합니다. 이 옵션을 지정하지 않으면 만료 시간은 구성 설정 &lt;code&gt;gc.reflogExpire&lt;/code&gt; 에서 가져 오며 기본값은 90 일입니다. &lt;code&gt;--expire=all&lt;/code&gt; 연령에 관계없이 항목을 제거합니다. &lt;code&gt;--expire=never&lt;/code&gt; 는 도달 가능한 항목의 정리를 해제 하지 않습니다 (그러나 &lt;code&gt;--expire-unreachable&lt;/code&gt; 참조 ).</target>
        </trans-unit>
        <trans-unit id="9ca76117e69104a0e4e81d319f878c7014bb3c8a" translate="yes" xml:space="preserve">
          <source>Prune loose objects older than date (default is 2 weeks ago, overridable by the config variable &lt;code&gt;gc.pruneExpire&lt;/code&gt;). --prune=now prunes loose objects regardless of their age and increases the risk of corruption if another process is writing to the repository concurrently; see &quot;NOTES&quot; below. --prune is on by default.</source>
          <target state="translated">날짜보다 오래된 느슨한 객체를 제거 (기본값은 2 주 전, 구성 변수 &lt;code&gt;gc.pruneExpire&lt;/code&gt; 로 대체 가능 ) --prune = 이제 나이에 관계없이 느슨한 객체를 정리하고 다른 프로세스가 동시에 저장소에 쓰는 경우 손상 위험을 증가시킵니다. 아래의 &quot;노트&quot;를 참조하십시오. --prune은 기본적으로 켜져 있습니다.</target>
        </trans-unit>
        <trans-unit id="ad1903147c3980cb00334e6e57ade6c895b0d197" translate="yes" xml:space="preserve">
          <source>Prune records of conflicted merges that occurred a long time ago. By default, unresolved conflicts older than 15 days and resolved conflicts older than 60 days are pruned. These defaults are controlled via the &lt;code&gt;gc.rerereUnresolved&lt;/code&gt; and &lt;code&gt;gc.rerereResolved&lt;/code&gt; configuration variables respectively.</source>
          <target state="translated">오래 전에 발생한 충돌 병합 기록을 정리합니다. 기본적으로 15 일보다 오래된 해결되지 않은 충돌과 60 일보다 오래된 해결 된 충돌은 제거됩니다. 이러한 기본값은 각각 &lt;code&gt;gc.rerereUnresolved&lt;/code&gt; 및 &lt;code&gt;gc.rerereResolved&lt;/code&gt; 구성 변수 를 통해 제어됩니다 .</target>
        </trans-unit>
        <trans-unit id="9ae5dc95253bd1047251fe2f0130ef53d935cb16" translate="yes" xml:space="preserve">
          <source>Prune working tree information in $GIT_DIR/worktrees.</source>
          <target state="translated">$ GIT_DIR / worktrees에서 작업 트리 정보를 제거하십시오.</target>
        </trans-unit>
        <trans-unit id="1daa62e08ce5be741f0f9512af6fe6aea569309c" translate="yes" xml:space="preserve">
          <source>Pruning</source>
          <target state="translated">Pruning</target>
        </trans-unit>
        <trans-unit id="9780740ad9404eab5bef283300816b2d37b6c371" translate="yes" xml:space="preserve">
          <source>Pruning tags with &lt;code&gt;--prune-tags&lt;/code&gt; also works when fetching a URL instead of a named remote. These will all prune tags not found on origin:</source>
          <target state="translated">&lt;code&gt;--prune-tags&lt;/code&gt; tags가 포함 된 잘라 내기 태그 는 명명 된 리모컨 대신 URL을 가져올 때도 작동합니다. 이것들은 모두 원산지에서 찾을 수없는 태그를 제거합니다.</target>
        </trans-unit>
        <trans-unit id="5d67c6362cb385f7b2fd7440df4474229e4ced1c" translate="yes" xml:space="preserve">
          <source>Pseudorefs are a class of files under &lt;code&gt;$GIT_DIR&lt;/code&gt; which behave like refs for the purposes of rev-parse, but which are treated specially by git. Pseudorefs both have names that are all-caps, and always start with a line consisting of a &lt;a href=&quot;#def_SHA1&quot;&gt;SHA-1&lt;/a&gt; followed by whitespace. So, HEAD is not a pseudoref, because it is sometimes a symbolic ref. They might optionally contain some additional data. &lt;code&gt;MERGE_HEAD&lt;/code&gt; and &lt;code&gt;CHERRY_PICK_HEAD&lt;/code&gt; are examples. Unlike &lt;a href=&quot;#def_per_worktree_ref&quot;&gt;per-worktree refs&lt;/a&gt;, these files cannot be symbolic refs, and never have reflogs. They also cannot be updated through the normal ref update machinery. Instead, they are updated by directly writing to the files. However, they can be read as if they were refs, so &lt;code&gt;git rev-parse
MERGE_HEAD&lt;/code&gt; will work.</source>
          <target state="translated">유사 참조는 &lt;code&gt;$GIT_DIR&lt;/code&gt; GIT_DIR 아래의 파일 클래스로 , rev-parse를위한 참조처럼 동작하지만 git에 의해 특별하게 처리됩니다. 유사 참조는 모두 대문자 인 이름을 가지며 항상 &lt;a href=&quot;#def_SHA1&quot;&gt;SHA-1&lt;/a&gt; 과 공백 으로 구성된 줄로 시작 합니다. 따라서 HEAD는 의사 참조가 아니므로 의사 참조가 아닙니다. 선택적으로 일부 추가 데이터를 포함 할 수 있습니다. &lt;code&gt;MERGE_HEAD&lt;/code&gt; 및 &lt;code&gt;CHERRY_PICK_HEAD&lt;/code&gt; 가 예입니다. 작업 &lt;a href=&quot;#def_per_worktree_ref&quot;&gt;별 트리 참조&lt;/a&gt; 와 달리이 파일은 기호 참조가 될 수 없으며 참조 로그가 없습니다. 또한 일반적인 참조 업데이트 기계를 통해 업데이트 할 수 없습니다. 대신 파일에 직접 쓰면 업데이트됩니다. 그러나 심판 인 것처럼 읽을 수 있습니다. &lt;code&gt;git rev-parse MERGE_HEAD&lt;/code&gt; 가 작동합니다.</target>
        </trans-unit>
        <trans-unit id="b7a4dc2e6290047f1f86721c32ae669785e9b742" translate="yes" xml:space="preserve">
          <source>Public Git repositories</source>
          <target state="translated">공공 Git 리포지토리</target>
        </trans-unit>
        <trans-unit id="8f3f20e99361b4469a543cafe71c660d905701e0" translate="yes" xml:space="preserve">
          <source>Public api</source>
          <target state="translated">공개 API</target>
        </trans-unit>
        <trans-unit id="661a1caa924e6377c910ab84f021b879aa1f3688" translate="yes" xml:space="preserve">
          <source>Public key of the https service. It may either be the filename of a PEM or DER encoded public key file or a string starting with &lt;code&gt;sha256//&lt;/code&gt; followed by the base64 encoded sha256 hash of the public key. See also libcurl &lt;code&gt;CURLOPT_PINNEDPUBLICKEY&lt;/code&gt;. git will exit with an error if this option is set but not supported by cURL.</source>
          <target state="translated">https 서비스의 공개 키 PEM 또는 DER로 인코딩 된 공개 키 파일의 파일 이름이거나 &lt;code&gt;sha256//&lt;/code&gt; 시작하고 그 뒤에 공개 키의 base64로 인코딩 된 sha256 해시가 있는 문자열 일 수 있습니다. libcurl &lt;code&gt;CURLOPT_PINNEDPUBLICKEY&lt;/code&gt; 도 참조 하십시오 . 이 옵션이 설정되었지만 cURL이 지원하지 않으면 git은 오류와 함께 종료됩니다.</target>
        </trans-unit>
        <trans-unit id="fcd79d77a075207d5bb03627d6390daac4adccdf" translate="yes" xml:space="preserve">
          <source>Publishing the changes from your local (private) repository to your remote (public) repository requires a write privilege on the remote machine. You need to have an SSH account there to run a single command, &lt;code&gt;git-receive-pack&lt;/code&gt;.</source>
          <target state="translated">로컬 (개인) 저장소에서 원격 (공용) 저장소로 변경 사항을 공개하려면 원격 시스템에 대한 쓰기 권한이 필요합니다. 단일 명령 &lt;code&gt;git-receive-pack&lt;/code&gt; 을 실행하려면 SSH 계정이 있어야합니다 .</target>
        </trans-unit>
        <trans-unit id="9d5654eba7f3fb26678d0b33453ea83f3704835b" translate="yes" xml:space="preserve">
          <source>Publishing your work</source>
          <target state="translated">작품 게시</target>
        </trans-unit>
        <trans-unit id="5225d106493e2d5cee97f92acd212fcbe8379cc8" translate="yes" xml:space="preserve">
          <source>Pulling a &lt;a href=&quot;#def_branch&quot;&gt;branch&lt;/a&gt; means to &lt;a href=&quot;#def_fetch&quot;&gt;fetch&lt;/a&gt; it and &lt;a href=&quot;#def_merge&quot;&gt;merge&lt;/a&gt; it. See also &lt;a href=&quot;git-pull&quot;&gt;git-pull[1]&lt;/a&gt;.</source>
          <target state="translated">당기는 &lt;a href=&quot;#def_branch&quot;&gt;분기&lt;/a&gt; 수단은하기 &lt;a href=&quot;#def_fetch&quot;&gt;가져 오기&lt;/a&gt; 를하고 &lt;a href=&quot;#def_merge&quot;&gt;병합&lt;/a&gt; 을. &lt;a href=&quot;git-pull&quot;&gt;git-pull [1]&lt;/a&gt; 도 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="6ba996099ee22cf557dfd858fcdfe9998a7d87a8" translate="yes" xml:space="preserve">
          <source>Pulling down the submodules is a two-step process. First run &lt;code&gt;git submodule
init&lt;/code&gt; to add the submodule repository URLs to &lt;code&gt;.git/config&lt;/code&gt;:</source>
          <target state="translated">서브 모듈을 풀다운하는 것은 2 단계 프로세스입니다. 먼저 &lt;code&gt;git submodule init&lt;/code&gt; 를 실행 하여 서브 모듈 저장소 URL을 &lt;code&gt;.git/config&lt;/code&gt; 에 추가하십시오 .</target>
        </trans-unit>
        <trans-unit id="67689e297cd4fdd92ebe641f7b6ed9bc63361f6b" translate="yes" xml:space="preserve">
          <source>Pulling into a dirty tree</source>
          <target state="translated">더러운 나무를 당겨</target>
        </trans-unit>
        <trans-unit id="678a9bfb35ce5da855b86526d846cbdc7583b760" translate="yes" xml:space="preserve">
          <source>Push &quot;matching&quot; branches to &lt;code&gt;origin&lt;/code&gt;. See &amp;lt;refspec&amp;gt; in the &lt;a href=&quot;#OPTIONS&quot;&gt;OPTIONS&lt;/a&gt; section above for a description of &quot;matching&quot; branches.</source>
          <target state="translated">&quot;일치하는&quot;분기를 &lt;code&gt;origin&lt;/code&gt; 밉니다 . &quot;일치하는&quot;브랜치에 대한 설명은 위 의 &lt;a href=&quot;#OPTIONS&quot;&gt;옵션&lt;/a&gt; 섹션 에서 &amp;lt;refspec&amp;gt;을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="e3d386bb2b306b430b8f1443632bcddb41f7fbbb" translate="yes" xml:space="preserve">
          <source>Push all branches (i.e. refs under &lt;code&gt;refs/heads/&lt;/code&gt;); cannot be used with other &amp;lt;refspec&amp;gt;.</source>
          <target state="translated">모든 분기 (예 : 참조 &lt;code&gt;refs/heads/&lt;/code&gt; 아래의 참조)를 푸시합니다 . 다른 &amp;lt;refspec&amp;gt;과 함께 사용할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="7ed05cac5fbf2fe13d768ad8d52cf3e6b3326c39" translate="yes" xml:space="preserve">
          <source>Push all the refs that would be pushed without this option, and also push annotated tags in &lt;code&gt;refs/tags&lt;/code&gt; that are missing from the remote but are pointing at commit-ish that are reachable from the refs being pushed. This can also be specified with configuration variable &lt;code&gt;push.followTags&lt;/code&gt;. For more information, see &lt;code&gt;push.followTags&lt;/code&gt; in &lt;a href=&quot;git-config&quot;&gt;git-config[1]&lt;/a&gt;.</source>
          <target state="translated">이 옵션없이 푸시 될 모든 참조를 푸시하고, 원격에서 누락되었지만 푸시되는 참조에서 도달 할 수있는 커밋을 가리키는 참조 &lt;code&gt;refs/tags&lt;/code&gt; 에 주석이 달린 태그를 푸시합니다. 구성 변수 &lt;code&gt;push.followTags&lt;/code&gt; 로 지정할 수도 있습니다 . 자세한 내용 은 &lt;a href=&quot;git-config&quot;&gt;git-config [1]의 &lt;/a&gt; &lt;code&gt;push.followTags&lt;/code&gt; 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="640e91962e4a94024fb44763555198cb451cbb5d" translate="yes" xml:space="preserve">
          <source>Push into another repository.</source>
          <target state="translated">다른 저장소로 푸시하십시오.</target>
        </trans-unit>
        <trans-unit id="fc1129a549e46f5ee09d052c0e625db078207268" translate="yes" xml:space="preserve">
          <source>Push into the public repository from your primary repository.</source>
          <target state="translated">기본 저장소에서 공용 저장소로 푸시하십시오.</target>
        </trans-unit>
        <trans-unit id="a011ac29541d686365501a5376539fc2a54082f8" translate="yes" xml:space="preserve">
          <source>Push into the public repository from your primary repository. Run &lt;code&gt;git repack&lt;/code&gt;, and possibly &lt;code&gt;git prune&lt;/code&gt; if the transport used for pulling from your repository supports packed repositories.</source>
          <target state="translated">기본 저장소에서 공용 저장소로 푸시하십시오. &lt;code&gt;git repack&lt;/code&gt; 을 실행 하고 저장소에서 가져 오기 위해 사용 된 전송이 압축 된 저장소를 지원하는 경우 &lt;code&gt;git prune&lt;/code&gt; 가능할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="a8251f9563aa908db5da52a9527e9f939a118d16" translate="yes" xml:space="preserve">
          <source>Push master, using file descriptor #7 to read data from git-receive-pack and file descriptor #8 to write data to same service.</source>
          <target state="translated">파일 디스크립터 # 7을 사용하여 git-receive-pack에서 데이터를 읽고 파일 디스크립터 # 8을 사용하여 동일한 서비스에 데이터를 쓰십시오.</target>
        </trans-unit>
        <trans-unit id="db6a77b6524cf46e0155fc78cb84e6ef6e8d26d4" translate="yes" xml:space="preserve">
          <source>Push objects over Git protocol to another repository</source>
          <target state="translated">Git 프로토콜을 통해 객체를 다른 저장소로 푸시</target>
        </trans-unit>
        <trans-unit id="e328f2dc0a129ee52c24984713b8e3e05193f873" translate="yes" xml:space="preserve">
          <source>Push objects over HTTP/DAV to another repository</source>
          <target state="translated">HTTP / DAV를 통해 객체를 다른 저장소로 푸시</target>
        </trans-unit>
        <trans-unit id="93e6fc3901865e79bc1dfa6c467266c7822bf760" translate="yes" xml:space="preserve">
          <source>Push the current branch to the remote ref matching &lt;code&gt;master&lt;/code&gt; in the &lt;code&gt;origin&lt;/code&gt; repository. This form is convenient to push the current branch without thinking about its local name.</source>
          <target state="translated">현재 브랜치를 &lt;code&gt;origin&lt;/code&gt; 저장소 의 원격 참조 일치 &lt;code&gt;master&lt;/code&gt; 로 푸시하십시오 . 이 형식은 현지 이름을 생각하지 않고 현재 분기를 밀어 넣기에 편리합니다.</target>
        </trans-unit>
        <trans-unit id="7221b3bad2db1abe78fb6e7112e947ec9066c484" translate="yes" xml:space="preserve">
          <source>Push your changes to the public repository, and announce it to the public.</source>
          <target state="translated">변경 사항을 공용 저장소로 푸시하고 공개로 알리십시오.</target>
        </trans-unit>
        <trans-unit id="44e2374abe889d292378278a32f8732ae3d0723a" translate="yes" xml:space="preserve">
          <source>Push your changes to your public repository, and ask your &quot;project lead&quot; and possibly your &quot;sub-subsystem maintainers&quot; to pull from it.</source>
          <target state="translated">변경 사항을 공용 저장소로 푸시하고 &quot;프로젝트 리더&quot;및 가능하면 &quot;하위 서브 시스템 관리자&quot;에게 요청하십시오.</target>
        </trans-unit>
        <trans-unit id="64c3ecd283374b8e31c77b37f0b37ed07f7e3e67" translate="yes" xml:space="preserve">
          <source>Pushes the given local &amp;lt;src&amp;gt; commit or branch to the remote branch described by &amp;lt;dst&amp;gt;. A batch sequence of one or more &lt;code&gt;push&lt;/code&gt; commands is terminated with a blank line (if there is only one reference to push, a single &lt;code&gt;push&lt;/code&gt; command is followed by a blank line). For example, the following would be two batches of &lt;code&gt;push&lt;/code&gt;, the first asking the remote-helper to push the local ref &lt;code&gt;master&lt;/code&gt; to the remote ref &lt;code&gt;master&lt;/code&gt; and the local &lt;code&gt;HEAD&lt;/code&gt; to the remote &lt;code&gt;branch&lt;/code&gt;, and the second asking to push ref &lt;code&gt;foo&lt;/code&gt; to ref &lt;code&gt;bar&lt;/code&gt; (forced update requested by the &lt;code&gt;+&lt;/code&gt;).</source>
          <target state="translated">지정된 로컬 &amp;lt;src&amp;gt; 커밋 또는 분기를 &amp;lt;dst&amp;gt;에서 설명하는 원격 분기로 푸시합니다. 하나 이상의 &lt;code&gt;push&lt;/code&gt; 명령 의 배치 시퀀스는 빈 줄로 종료됩니다 (푸시에 대한 참조가 하나만있는 경우 단일 &lt;code&gt;push&lt;/code&gt; 명령 뒤에 빈 줄이옵니다). 예를 들어, 다음의 두 배치 될 &lt;code&gt;push&lt;/code&gt; (가) 제 로컬 심판 밀어 원격 헬퍼 묻는 &lt;code&gt;master&lt;/code&gt; 원격 심판에 &lt;code&gt;master&lt;/code&gt; 및 로컬 &lt;code&gt;HEAD&lt;/code&gt; 원격으로 &lt;code&gt;branch&lt;/code&gt; 하고, REF 푸시 요청 제 &lt;code&gt;foo&lt;/code&gt; 는 심판에 &lt;code&gt;bar&lt;/code&gt; ( &lt;code&gt;+&lt;/code&gt; 가 요청한 강제 업데이트 ).</target>
        </trans-unit>
        <trans-unit id="ca5456a5df7b11e9ef0d22090b33d4f3bd62ba82" translate="yes" xml:space="preserve">
          <source>Pushes which fail due to problems with the incoming pack, missing objects, or due to the &lt;code&gt;pre-receive&lt;/code&gt; hook will not leave any on-disk data. This is usually helpful to prevent repeated failed pushes from filling up your disk, but can make debugging more challenging.</source>
          <target state="translated">수신 팩 문제, 누락 된 객체 또는 &lt;code&gt;pre-receive&lt;/code&gt; 후크 로 인해 실패한 푸시 는 디스크상의 데이터를 남기지 않습니다. 이 방법은 일반적으로 반복되는 실패한 푸시로 인해 디스크가 가득 차는 것을 방지하는 데 도움이되지만 디버깅이 더 어려워 질 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="bd3f47195169191b06e6fb59aa660030c03d8082" translate="yes" xml:space="preserve">
          <source>Pushing a &lt;a href=&quot;#def_branch&quot;&gt;branch&lt;/a&gt; means to get the branch&amp;rsquo;s &lt;a href=&quot;#def_head_ref&quot;&gt;head ref&lt;/a&gt; from a remote &lt;a href=&quot;#def_repository&quot;&gt;repository&lt;/a&gt;, find out if it is an ancestor to the branch&amp;rsquo;s local head ref, and in that case, putting all objects, which are &lt;a href=&quot;#def_reachable&quot;&gt;reachable&lt;/a&gt; from the local head ref, and which are missing from the remote repository, into the remote &lt;a href=&quot;#def_object_database&quot;&gt;object database&lt;/a&gt;, and updating the remote head ref. If the remote &lt;a href=&quot;#def_head&quot;&gt;head&lt;/a&gt; is not an ancestor to the local head, the push fails.</source>
          <target state="translated">푸싱 &lt;a href=&quot;#def_branch&quot;&gt;브랜치&lt;/a&gt; 수단은 지점의 얻기 위해 &lt;a href=&quot;#def_head_ref&quot;&gt;머리를 심판&lt;/a&gt; 원격에서 &lt;a href=&quot;#def_repository&quot;&gt;저장소를&lt;/a&gt; ,이 지점의 로컬 헤드 심판에 조상이 있는지 확인하고, 그 경우, 모든 객체, 퍼팅 &lt;a href=&quot;#def_reachable&quot;&gt;도달&lt;/a&gt; 로컬 헤드 심판에서하고있는을 원격 저장소에서 원격 &lt;a href=&quot;#def_object_database&quot;&gt;오브젝트 데이터베이스&lt;/a&gt; 로 누락되고 원격 헤드 참조를 업데이트합니다. 원격 &lt;a href=&quot;#def_head&quot;&gt;헤드&lt;/a&gt; 가 로컬 헤드의 조상이 아닌 경우 푸시에 실패합니다.</target>
        </trans-unit>
        <trans-unit id="a1b201ad98b52436e58805968e041862b0e44b88" translate="yes" xml:space="preserve">
          <source>Pushing an empty &amp;lt;src&amp;gt; allows you to delete the &amp;lt;dst&amp;gt; ref from the remote repository. Deletions are always accepted without a leading &lt;code&gt;+&lt;/code&gt; in the refspec (or &lt;code&gt;--force&lt;/code&gt;), except when forbidden by configuration or hooks. See &lt;code&gt;receive.denyDeletes&lt;/code&gt; in &lt;a href=&quot;git-config&quot;&gt;git-config[1]&lt;/a&gt; and &lt;code&gt;pre-receive&lt;/code&gt; and &lt;code&gt;update&lt;/code&gt; in &lt;a href=&quot;githooks&quot;&gt;githooks[5]&lt;/a&gt;.</source>
          <target state="translated">빈 &amp;lt;src&amp;gt;를 누르면 원격 저장소에서 &amp;lt;dst&amp;gt; 참조를 삭제할 수 있습니다. 구성 또는 후크에 의해 금지 된 경우를 제외하고, 참조 스펙 (또는 &lt;code&gt;--force&lt;/code&gt; ) 에서 선행 &lt;code&gt;+&lt;/code&gt; 없이 삭제가 항상 허용 됩니다. 참조 &lt;code&gt;receive.denyDeletes&lt;/code&gt; 에서 &lt;a href=&quot;git-config&quot;&gt;자식-설정 [1]&lt;/a&gt; 및 &lt;code&gt;pre-receive&lt;/code&gt; 및 &lt;code&gt;update&lt;/code&gt; 에 &lt;a href=&quot;githooks&quot;&gt;githooks [5]&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="1b554604b5dbdc966cb242c709d8d9564fd3f48c" translate="yes" xml:space="preserve">
          <source>Pushing changes to a public repository</source>
          <target state="translated">공용 저장소로 변경 사항 푸시</target>
        </trans-unit>
        <trans-unit id="eedfa4fe862b4ad2f2d3d15f8505bb4e78d4fc1a" translate="yes" xml:space="preserve">
          <source>Put all the committers in the same group, and make the repository writable by that group:</source>
          <target state="translated">모든 커미터를 동일한 그룹에 배치하고 해당 그룹이 저장소를 쓰기 가능하게하십시오.</target>
        </trans-unit>
        <trans-unit id="c26397c67704ec958580d89b3087bf7a34700351" translate="yes" xml:space="preserve">
          <source>Put everything in the current head&amp;rsquo;s Documentation/ directory into &lt;code&gt;git-1.4.0-docs.zip&lt;/code&gt;, with the prefix &lt;code&gt;git-docs/&lt;/code&gt;.</source>
          <target state="translated">현재 헤드의 Documentation / 디렉토리에있는 모든 것을 &lt;code&gt;git-docs/&lt;/code&gt; 접두어를 사용하여 &lt;code&gt;git-1.4.0-docs.zip&lt;/code&gt; 에 넣으십시오 .</target>
        </trans-unit>
        <trans-unit id="ea705b3a47d1cdf9261daf67230a93968f6edd0b" translate="yes" xml:space="preserve">
          <source>QUERY_STRING</source>
          <target state="translated">QUERY_STRING</target>
        </trans-unit>
        <trans-unit id="c3149be9220a8ce116523f671437212f69f45ea5" translate="yes" xml:space="preserve">
          <source>Quarantine environment</source>
          <target state="translated">검역 환경</target>
        </trans-unit>
        <trans-unit id="ec85d37cf9d9f3d10289231d732a03bb25cc011c" translate="yes" xml:space="preserve">
          <source>Query p4 for labels associated with the depot paths, and add them as tags in Git. Limited usefulness as only imports labels associated with new changelists. Deprecated.</source>
          <target state="translated">저장소 경로와 연관된 레이블에 대해 p4를 조회하고 Git에서 태그로 추가하십시오. 새로운 변경 목록과 관련된 레이블 만 가져 오기 때문에 유용성이 제한됩니다. 더 이상 사용되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="ce8d2336bc85bc6e5b624295904c32b955dda594" translate="yes" xml:space="preserve">
          <source>Quick reference guides: &lt;a href=&quot;https://github.github.com/training-kit/downloads/github-git-cheat-sheet.pdf&quot;&gt;GitHub Cheat Sheet&lt;/a&gt;&lt;small&gt;(PDF)&lt;/small&gt; | &lt;a href=&quot;https://ndpsoftware.com/git-cheatsheet.html&quot;&gt;Visual Git Cheat Sheet&lt;/a&gt;&lt;small&gt;(SVG | PNG)&lt;/small&gt;</source>
          <target state="translated">빠른 참조 안내서 : &lt;a href=&quot;https://github.github.com/training-kit/downloads/github-git-cheat-sheet.pdf&quot;&gt;GitHub 치트 시트 &lt;/a&gt;&lt;small&gt;(PDF)&lt;/small&gt; | &lt;a href=&quot;https://ndpsoftware.com/git-cheatsheet.html&quot;&gt;Visual Git 치트 시트 &lt;/a&gt;&lt;small&gt;(SVG | PNG)&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="3a11ac4a816649c90b2a876b8ed365a4f747816e" translate="yes" xml:space="preserve">
          <source>Quiet, suppress feedback messages.</source>
          <target state="translated">조용하고 피드백 메시지를 표시하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="2ac9102b0a2f3eb9abc09cf4e1c41ec0575ff1e1" translate="yes" xml:space="preserve">
          <source>Quiet, suppress feedback messages. Implies &lt;code&gt;--no-progress&lt;/code&gt;.</source>
          <target state="translated">조용하고 피드백 메시지를 표시하지 않습니다. &lt;code&gt;--no-progress&lt;/code&gt; 를 의미합니다 .</target>
        </trans-unit>
        <trans-unit id="de1dab6bd571badbfbb3ddaa6f495be909332129" translate="yes" xml:space="preserve">
          <source>Quiet. If --refresh finds that the index needs an update, the default behavior is to error out. This option makes &lt;code&gt;git update-index&lt;/code&gt; continue anyway.</source>
          <target state="translated">조용한. --refresh에서 인덱스를 업데이트해야하는 경우 기본 동작은 오류입니다. 이 옵션은 &lt;code&gt;git update-index&lt;/code&gt; 를 계속 진행시킵니다.</target>
        </trans-unit>
        <trans-unit id="e1baedfd2936afaf34298be8c53a6f3520c17d3e" translate="yes" xml:space="preserve">
          <source>Quiet; do not warn about conflicts.</source>
          <target state="translated">조용한; 갈등에 대해 경고하지 마십시오.</target>
        </trans-unit>
        <trans-unit id="e9770de83f70890562d92f9477d5315581d69261" translate="yes" xml:space="preserve">
          <source>Quite similarly, if &lt;code&gt;core.symlinks&lt;/code&gt; configuration variable is set to &lt;code&gt;false&lt;/code&gt; (see &lt;a href=&quot;git-config&quot;&gt;git-config[1]&lt;/a&gt;), symbolic links are checked out as plain files, and this command does not modify a recorded file mode from symbolic link to regular file.</source>
          <target state="translated">마찬가지로 &lt;code&gt;core.symlinks&lt;/code&gt; 구성 변수가 &lt;code&gt;false&lt;/code&gt; 로 설정되면 ( &lt;a href=&quot;git-config&quot;&gt;git-config [1]&lt;/a&gt; 참조) 기호 링크는 일반 파일로 체크 아웃 되며이 명령은 기호 링크에서 일반 파일로 기록 된 파일 모드를 수정하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="f0f61d9660842b035df0296041289cbf85b3ae28" translate="yes" xml:space="preserve">
          <source>Quote fields containing whitespace as if they were strings in C source code; i.e., surrounded by double-quotes and with backslash escapes. Use 40 &quot;0&quot; characters or the empty string to specify a zero value. To specify a missing value, omit the value and its preceding SP entirely.</source>
          <target state="translated">공백이 포함 된 필드를 마치 C 소스 코드의 문자열 인 것처럼 인용하십시오. 즉, 큰 따옴표로 묶고 백 슬래시 이스케이프 처리합니다. 40 개의 &quot;0&quot;문자 또는 빈 문자열을 사용하여 0 값을 지정하십시오. 결 측값을 지정하려면 값과 이전 SP를 완전히 생략하십시오.</target>
        </trans-unit>
        <trans-unit id="0550aeb8801a3ad8332244f3d277c748ecb56080" translate="yes" xml:space="preserve">
          <source>Quoted aliases and quoted addresses are not supported: lines that contain a &lt;code&gt;&quot;&lt;/code&gt; symbol are ignored.</source>
          <target state="translated">인용 된 별명 및 인용 된 주소는 지원되지 않습니다 . &lt;code&gt;&quot;&lt;/code&gt; 기호가 포함 된 행 은 무시됩니다.</target>
        </trans-unit>
        <trans-unit id="06576556d1ad802f247cad11ae748be47b70cd9c" translate="yes" xml:space="preserve">
          <source>R</source>
          <target state="translated">R</target>
        </trans-unit>
        <trans-unit id="38354f3564dc690008158ec27147b7718eef20da" translate="yes" xml:space="preserve">
          <source>R: renaming of a file</source>
          <target state="translated">R : 파일 이름 바꾸기</target>
        </trans-unit>
        <trans-unit id="73ff05a9f629bff633fa7a0499495556f0f1a07f" translate="yes" xml:space="preserve">
          <source>README.html</source>
          <target state="translated">README.html</target>
        </trans-unit>
        <trans-unit id="986c96108f4514e08f8de60c616ff1d0727fd986" translate="yes" xml:space="preserve">
          <source>REMOTE_ADDR</source>
          <target state="translated">REMOTE_ADDR</target>
        </trans-unit>
        <trans-unit id="613cec3f00ac4a24def4b10bec39e10198b8d82e" translate="yes" xml:space="preserve">
          <source>REMOTE_USER</source>
          <target state="translated">REMOTE_USER</target>
        </trans-unit>
        <trans-unit id="a16e10b928e7c21c5b4ae3d47f9db3c0b6c782c3" translate="yes" xml:space="preserve">
          <source>REQUEST_METHOD</source>
          <target state="translated">REQUEST_METHOD</target>
        </trans-unit>
        <trans-unit id="697070f17a70b2490138caae401415ac7b401fbd" translate="yes" xml:space="preserve">
          <source>RFC 2822</source>
          <target state="translated">RFC 2822</target>
        </trans-unit>
        <trans-unit id="b34db1f303fd91c6e7039f452d5097c789b26cf1" translate="yes" xml:space="preserve">
          <source>Rather than checking out a branch to work on it, check out a commit for inspection and discardable experiments. This is the default behavior of &lt;code&gt;git checkout &amp;lt;commit&amp;gt;&lt;/code&gt; when &lt;code&gt;&amp;lt;commit&amp;gt;&lt;/code&gt; is not a branch name. See the &quot;DETACHED HEAD&quot; section below for details.</source>
          <target state="translated">작업 할 지점을 확인하는 대신 검사 및 폐기 가능한 실험에 대한 커밋을 확인하십시오. &lt;code&gt;&amp;lt;commit&amp;gt;&lt;/code&gt; 이 분기 이름이 아닌 경우 &lt;code&gt;git checkout &amp;lt;commit&amp;gt;&lt;/code&gt; 의 기본 동작입니다 . 자세한 내용은 아래의 &quot;세부 헤드&quot;섹션을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="4e4bfd7d1a0190903bc19000a40525c987ff7008" translate="yes" xml:space="preserve">
          <source>Raw output format</source>
          <target state="translated">원시 출력 형식</target>
        </trans-unit>
        <trans-unit id="7b0a88cf0ceef9e929b45fca40ecfa70b119395a" translate="yes" xml:space="preserve">
          <source>Re-author p4 changes before submitting to p4. This option requires p4 admin privileges.</source>
          <target state="translated">p4에 제출하기 전에 p4 변경 사항을 다시 작성하십시오. 이 옵션에는 p4 관리자 권한이 필요합니다.</target>
        </trans-unit>
        <trans-unit id="a3d5287f4feb36f53be9e482bea0b4f69488906a" translate="yes" xml:space="preserve">
          <source>Read &lt;a href=&quot;githooks&quot;&gt;githooks[5]&lt;/a&gt; for more details about each hook.</source>
          <target state="translated">각 후크에 대한 자세한 내용은 &lt;a href=&quot;githooks&quot;&gt;githooks [5]&lt;/a&gt; 를 읽으십시오 .</target>
        </trans-unit>
        <trans-unit id="3c99ae2389e194940d6e9dae44358b0f59db22c3" translate="yes" xml:space="preserve">
          <source>Read a list of commits from stdin and commit them in reverse order. Only the leading sha1 is read from each line, so &lt;code&gt;git rev-list --pretty=oneline&lt;/code&gt; output can be used.</source>
          <target state="translated">stdin에서 커밋 목록을 읽고 역순으로 커밋합니다. 각 행에서 선행 sha1 만 읽으므로 &lt;code&gt;git rev-list --pretty=oneline&lt;/code&gt; 출력을 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="9a81bd113ea455376c0709dc2b5dec2fbcc3eae4" translate="yes" xml:space="preserve">
          <source>Read a packed archive (.pack) from the standard input, expanding the objects contained within and writing them into the repository in &quot;loose&quot; (one object per file) format.</source>
          <target state="translated">표준 입력에서 압축 된 아카이브 (.pack)를 읽고 포함 된 오브젝트를 확장하고 &quot;느슨한&quot;(파일 당 하나의 오브젝트) 형식으로 저장소에 씁니다.</target>
        </trans-unit>
        <trans-unit id="cf4f210605880935e907e739e930d70c6c05f393" translate="yes" xml:space="preserve">
          <source>Read a patch from the standard input and compute the patch ID for it.</source>
          <target state="translated">표준 입력에서 패치를 읽고 패치 ID를 계산하십시오.</target>
        </trans-unit>
        <trans-unit id="118b284f547f2475f4692a5a06eacb1fa689da5d" translate="yes" xml:space="preserve">
          <source>Read a tar archive created by &lt;code&gt;git archive&lt;/code&gt; from the standard input and extract the commit ID stored in it. It reads only the first 1024 bytes of input, thus its runtime is not influenced by the size of the tar archive very much.</source>
          <target state="translated">표준 입력에서 &lt;code&gt;git archive&lt;/code&gt; archive로 작성된 tar 아카이브를 읽고 저장된 커밋 ID를 추출하십시오. 처음 1024 바이트의 입력 만 읽으므로 런타임은 tar 아카이브의 크기에 크게 영향을받지 않습니다.</target>
        </trans-unit>
        <trans-unit id="8323be41a83f5e8edd45cebf33794d8211b9a65a" translate="yes" xml:space="preserve">
          <source>Read additional exclude patterns that apply only to the directory and its subdirectories in &amp;lt;file&amp;gt;.</source>
          <target state="translated">&amp;lt;file&amp;gt;의 디렉토리 및 해당 서브 디렉토리에만 적용되는 추가 제외 패턴을 읽으십시오.</target>
        </trans-unit>
        <trans-unit id="ec538abd0ecb84f4afa31116a9fde4a7bfbfc841" translate="yes" xml:space="preserve">
          <source>Read contacts, one per line, from the standard input after exhausting contacts provided on the command-line.</source>
          <target state="translated">명령 행에 제공된 접점을 모두 사용한 후 표준 입력에서 접점을 한 줄에 하나씩 읽으십시오.</target>
        </trans-unit>
        <trans-unit id="cc8be265c5565879cb19acef5a95bb650b329807" translate="yes" xml:space="preserve">
          <source>Read description of &lt;code&gt;%feature&lt;/code&gt; hash for detailed list, and descriptions. See also &quot;Configuring gitweb features&quot; section in &lt;a href=&quot;gitweb.conf&quot;&gt;gitweb.conf[5]&lt;/a&gt;</source>
          <target state="translated">자세한 목록과 설명은 &lt;code&gt;%feature&lt;/code&gt; 해시에 대한 설명을 읽으십시오 . &lt;a href=&quot;gitweb.conf&quot;&gt;gitweb.conf의&lt;/a&gt; &quot;gitweb 기능 구성&quot;섹션도 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="15ad57eb2da16d3087f86e421c960f711d5a7f97" translate="yes" xml:space="preserve">
          <source>Read exclude patterns from &amp;lt;file&amp;gt;; 1 per line.</source>
          <target state="translated">&amp;lt;file&amp;gt;에서 제외 패턴을 읽습니다. 한 줄에 1 개.</target>
        </trans-unit>
        <trans-unit id="f6c76b424f91b25c9b13ee14e1604c5d3fa96f28" translate="yes" xml:space="preserve">
          <source>Read file names from the standard input, one per line, instead of from the command-line.</source>
          <target state="translated">명령 줄 대신 표준 입력에서 한 줄에 하나씩 파일 이름을 읽습니다.</target>
        </trans-unit>
        <trans-unit id="d0b5b313182b086a1f9af39ecd4467e46faca9cf" translate="yes" xml:space="preserve">
          <source>Read index information from stdin.</source>
          <target state="translated">stdin에서 색인 정보를 읽습니다.</target>
        </trans-unit>
        <trans-unit id="80670c79001d8f8c9a5be5d38404bf833dac649e" translate="yes" xml:space="preserve">
          <source>Read its description.</source>
          <target state="translated">설명을 읽으십시오.</target>
        </trans-unit>
        <trans-unit id="46ab10e675175e0e453c98d42b078fb4b46c2856" translate="yes" xml:space="preserve">
          <source>Read pathnames from the standard input, one per line, instead of from the command-line.</source>
          <target state="translated">명령 줄 대신 표준 입력에서 한 줄에 하나씩 경로 이름을 읽습니다.</target>
        </trans-unit>
        <trans-unit id="e51b79a68429169e8d905bac10a875d5d0bc0bbc" translate="yes" xml:space="preserve">
          <source>Read patterns from &amp;lt;file&amp;gt;, one per line.</source>
          <target state="translated">&amp;lt;파일&amp;gt;에서 한 줄에 하나씩 패턴을 읽습니다.</target>
        </trans-unit>
        <trans-unit id="fed49b353bd2e8ef2071f098ea90e8175a16e2cc" translate="yes" xml:space="preserve">
          <source>Read text, such as commit messages, notes, tags and branch descriptions, from the standard input and clean it in the manner used by Git.</source>
          <target state="translated">커밋 메시지, 노트, 태그 및 분기 설명과 같은 텍스트를 표준 입력에서 읽고 Git에서 사용하는 방식으로 정리하십시오.</target>
        </trans-unit>
        <trans-unit id="eceb0ad0aa215d85bc1cfa0886bd096a3daed30d" translate="yes" xml:space="preserve">
          <source>Read the &lt;code&gt;.idx&lt;/code&gt; file for a Git packfile (created with &lt;a href=&quot;git-pack-objects&quot;&gt;git-pack-objects[1]&lt;/a&gt; or &lt;a href=&quot;git-index-pack&quot;&gt;git-index-pack[1]&lt;/a&gt;) from the standard input, and dump its contents. The output consists of one object per line, with each line containing two or three space-separated columns:</source>
          <target state="translated">표준 입력에서 Git &lt;a href=&quot;git-pack-objects&quot;&gt;팩&lt;/a&gt; 파일 ( git-pack-objects [1] 또는 &lt;a href=&quot;git-index-pack&quot;&gt;git-index-pack [1]로 작성&lt;/a&gt; ) 의 &lt;code&gt;.idx&lt;/code&gt; 파일을 읽고 내용을 덤프하십시오. 출력은 한 줄에 하나의 객체로 구성되며 각 줄에는 두 개 또는 세 개의 공백으로 구분 된 열이 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="ddd6a34883963a795d5ebc22563eef2cf30acd2b" translate="yes" xml:space="preserve">
          <source>Read the NUL-terminated &lt;code&gt;ls-tree -z&lt;/code&gt; output instead.</source>
          <target state="translated">대신 NUL 종료 &lt;code&gt;ls-tree -z&lt;/code&gt; 출력을 읽으십시오 .</target>
        </trans-unit>
        <trans-unit id="3ea8fc0021add956f340de030bf6e8165a69896f" translate="yes" xml:space="preserve">
          <source>Read the commit log message from the given file. Use &lt;code&gt;-&lt;/code&gt; to read from the standard input. This can be given more than once and the content of each file becomes its own paragraph.</source>
          <target state="translated">주어진 파일에서 커밋 로그 메시지를 읽습니다. &lt;code&gt;-&lt;/code&gt; 를 사용 하여 표준 입력에서 읽습니다. 이것은 두 번 이상 주어질 수 있으며 각 파일의 내용은 자체 단락이됩니다.</target>
        </trans-unit>
        <trans-unit id="507fdedba9f69c5efbd0e8cf829abe30d4a7a120" translate="yes" xml:space="preserve">
          <source>Read the commit message to be used for the merge commit (in case one is created).</source>
          <target state="translated">병합 커밋에 사용될 커밋 메시지를 읽습니다 (만약 커밋 메시지가 생성 된 경우).</target>
        </trans-unit>
        <trans-unit id="9362ea89cc38e10989edc212ebc0bf489cc001f5" translate="yes" xml:space="preserve">
          <source>Read the commit-graph file and verify its contents against the object database. Used to check for corrupted data.</source>
          <target state="translated">커밋 그래프 파일을 읽고 그 내용을 객체 데이터베이스와 비교하여 확인하십시오. 손상된 데이터를 확인하는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="9e4092c6ffe69dbb6a8bf7641feea7e173111c93" translate="yes" xml:space="preserve">
          <source>Read the object from standard input instead of from a file.</source>
          <target state="translated">파일 대신 표준 입력에서 객체를 읽습니다.</target>
        </trans-unit>
        <trans-unit id="16a5e93c91809d39b015e5b24abf65dd6438e038" translate="yes" xml:space="preserve">
          <source>Read the revision arguments from the standard input, instead of individual object names. The revision arguments are processed the same way as &lt;code&gt;git rev-list&lt;/code&gt; with the &lt;code&gt;--objects&lt;/code&gt; flag uses its &lt;code&gt;commit&lt;/code&gt; arguments to build the list of objects it outputs. The objects on the resulting list are packed. Besides revisions, &lt;code&gt;--not&lt;/code&gt; or &lt;code&gt;--shallow &amp;lt;SHA-1&amp;gt;&lt;/code&gt; lines are also accepted.</source>
          <target state="translated">개별 객체 이름 대신 표준 입력에서 개정 인수를 읽으십시오. 개정 인수는 &lt;code&gt;--objects&lt;/code&gt; 플래그를 사용하여 &lt;code&gt;git rev-list&lt;/code&gt; 와 동일한 방식으로 처리되어 &lt;code&gt;commit&lt;/code&gt; 인수를 사용하여 출력하는 객체 목록을 작성합니다. 결과 목록의 개체가 압축됩니다. 개정 외에도, &lt;code&gt;--not&lt;/code&gt; 또는 &lt;code&gt;--shallow &amp;lt;SHA-1&amp;gt;&lt;/code&gt; 라인도 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="7f840070f6a18eee1c3de888e1eec475edd1cfa4" translate="yes" xml:space="preserve">
          <source>Read, modify and delete symbolic refs</source>
          <target state="translated">기호 참조 읽기, 수정 및 삭제</target>
        </trans-unit>
        <trans-unit id="356b6782c6512845fae8c2da14d692d4da174e8d" translate="yes" xml:space="preserve">
          <source>Reading from a named tree</source>
          <target state="translated">명명 된 나무에서 읽기</target>
        </trans-unit>
        <trans-unit id="7405316147ea4906cae4c658957705537066053b" translate="yes" xml:space="preserve">
          <source>Reading from the active commit</source>
          <target state="translated">활성 커밋에서 읽기</target>
        </trans-unit>
        <trans-unit id="d5df5dafb2331c4e6af80c2f8a0c26176a288dab" translate="yes" xml:space="preserve">
          <source>Reads a packed archive (.pack) from the specified file, and builds a pack index file (.idx) for it. The packed archive together with the pack index can then be placed in the objects/pack/ directory of a Git repository.</source>
          <target state="translated">지정된 파일에서 압축 된 아카이브 (.pack)를 읽고이를위한 팩 색인 파일 (.idx)을 빌드합니다. 팩 인덱스와 함께 압축 아카이브는 Git 저장소의 objects / pack / 디렉토리에 배치 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="db9526754c129c75f60022c8e34e8db9d6855fac" translate="yes" xml:space="preserve">
          <source>Reads a single e-mail message from the standard input, and writes the commit log message in &amp;lt;msg&amp;gt; file, and the patches in &amp;lt;patch&amp;gt; file. The author name, e-mail and e-mail subject are written out to the standard output to be used by &lt;code&gt;git am&lt;/code&gt; to create a commit. It is usually not necessary to use this command directly. See &lt;a href=&quot;git-am&quot;&gt;git-am[1]&lt;/a&gt; instead.</source>
          <target state="translated">표준 입력에서 단일 전자 메일 메시지를 읽고 커밋 로그 메시지를 &amp;lt;msg&amp;gt; 파일에 기록하고 패치를 &amp;lt;patch&amp;gt; 파일에 기록합니다. 작성자 이름, 전자 우편 및 전자 우편 제목은 표준 출력에 기록되어 커밋을 작성하기 위해 &lt;code&gt;git am&lt;/code&gt; 에서 사용됩니다 . 일반적으로이 명령을 직접 사용할 필요는 없습니다. 대신 &lt;a href=&quot;git-am&quot;&gt;git-am [1]을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="91a54b1043f609f02e31617fc1ed3b549e2a4394" translate="yes" xml:space="preserve">
          <source>Reads a tag contents on standard input and creates a tag object that can also be used to sign other objects.</source>
          <target state="translated">표준 입력에서 태그 내용을 읽고 다른 객체에 서명하는 데 사용할 수있는 태그 객체를 만듭니다.</target>
        </trans-unit>
        <trans-unit id="1988117fbbba1a52186c7874f472ad690b235ffc" translate="yes" xml:space="preserve">
          <source>Reads given idx file for packed Git archive created with the &lt;code&gt;git pack-objects&lt;/code&gt; command and verifies idx file and the corresponding pack file.</source>
          <target state="translated">&lt;code&gt;git pack-objects&lt;/code&gt; 명령으로 생성 된 압축 된 Git 아카이브에 대해 지정된 idx 파일을 읽고 idx 파일과 해당 팩 파일을 확인합니다.</target>
        </trans-unit>
        <trans-unit id="befcf9896fcbea450fd9bee257995fb96286ee5a" translate="yes" xml:space="preserve">
          <source>Reads list of objects from the standard input, and writes either one or more packed archives with the specified base-name to disk, or a packed archive to the standard output.</source>
          <target state="translated">표준 입력에서 오브젝트 목록을 읽고 지정된 기본 이름을 가진 하나 이상의 압축 아카이브를 디스크에 또는 압축 아카이브를 표준 출력에 씁니다.</target>
        </trans-unit>
        <trans-unit id="d7a9d36099b1ff6ac5bd15dd14e16c269b0389b8" translate="yes" xml:space="preserve">
          <source>Reads standard input in non-recursive &lt;code&gt;ls-tree&lt;/code&gt; output format, and creates a tree object. The order of the tree entries is normalized by mktree so pre-sorting the input is not required. The object name of the tree object built is written to the standard output.</source>
          <target state="translated">비 재귀 &lt;code&gt;ls-tree&lt;/code&gt; 출력 형식으로 표준 입력을 읽고 트리 객체를 만듭니다. 트리 항목의 순서는 mktree에 의해 정규화되므로 입력을 사전 정렬 할 필요가 없습니다. 빌드 된 트리 개체의 개체 이름이 표준 출력에 기록됩니다.</target>
        </trans-unit>
        <trans-unit id="768de97d393241af581368bdb5b60add6bc4daa9" translate="yes" xml:space="preserve">
          <source>Reads the supplied diff output (i.e. &quot;a patch&quot;) and applies it to files. When running from a subdirectory in a repository, patched paths outside the directory are ignored. With the &lt;code&gt;--index&lt;/code&gt; option the patch is also applied to the index, and with the &lt;code&gt;--cached&lt;/code&gt; option the patch is only applied to the index. Without these options, the command applies the patch only to files, and does not require them to be in a Git repository.</source>
          <target state="translated">제공된 diff 출력 (예 : &quot;패치&quot;)을 읽고 파일에 적용합니다. 저장소의 서브 디렉토리에서 실행할 때 디렉토리 외부의 패치 된 경로는 무시됩니다. 으로 &lt;code&gt;--index&lt;/code&gt; 옵션 패치는 인덱스에 적용되고, 함께 &lt;code&gt;--cached&lt;/code&gt; 옵션 패치는 인덱스에 적용됩니다. 이러한 옵션이 없으면 명령은 파일에만 패치를 적용하며 Git 리포지토리에있을 필요는 없습니다.</target>
        </trans-unit>
        <trans-unit id="e5173f184d3064943fb31ef4b9c751d1119e1685" translate="yes" xml:space="preserve">
          <source>Reads the tree information given by &amp;lt;tree-ish&amp;gt; into the index, but does not actually &lt;strong&gt;update&lt;/strong&gt; any of the files it &quot;caches&quot;. (see: &lt;a href=&quot;git-checkout-index&quot;&gt;git-checkout-index[1]&lt;/a&gt;)</source>
          <target state="translated">&amp;lt;tree-ish&amp;gt;가 제공 한 트리 정보를 인덱스로 읽지 만 실제로 &quot;캐시&quot;하는 파일은 &lt;strong&gt;업데이트&lt;/strong&gt; 하지 않습니다 . ( &lt;a href=&quot;git-checkout-index&quot;&gt;git-checkout-index [1] 참조&lt;/a&gt; )</target>
        </trans-unit>
        <trans-unit id="e432986c9c0bf1c0563c54e4546289b72e2b8f05" translate="yes" xml:space="preserve">
          <source>Reads three tree-ish, and output trivial merge results and conflicting stages to the standard output. This is similar to what three-way &lt;code&gt;git read-tree -m&lt;/code&gt; does, but instead of storing the results in the index, the command outputs the entries to the standard output.</source>
          <target state="translated">3 가지 트리 -ish를 읽고 사소한 병합 결과와 충돌하는 단계를 표준 출력으로 출력합니다. 이것은 3-way &lt;code&gt;git read-tree -m&lt;/code&gt; 과 유사 하지만 결과를 색인에 저장하는 대신 항목을 표준 출력으로 출력합니다.</target>
        </trans-unit>
        <trans-unit id="47a594db00e7ab66962cb542d6f07d66a982ad3f" translate="yes" xml:space="preserve">
          <source>Reads tree information into the index</source>
          <target state="translated">색인으로 트리 정보를 읽습니다.</target>
        </trans-unit>
        <trans-unit id="209b43abaea4b5ac5dbb8b759ed99ebfaf6f9172" translate="yes" xml:space="preserve">
          <source>Reapply commits on top of another base tip</source>
          <target state="translated">다른 기본 팁 위에 다시 적용</target>
        </trans-unit>
        <trans-unit id="95695a29b19740f8f73c24fedd25acfa8a46012d" translate="yes" xml:space="preserve">
          <source>Rebase</source>
          <target state="translated">Rebase</target>
        </trans-unit>
        <trans-unit id="f805426f874c522ca8e3397a261d025324269dce" translate="yes" xml:space="preserve">
          <source>Rebase all commits reachable from &amp;lt;branch&amp;gt;, instead of limiting them with an &amp;lt;upstream&amp;gt;. This allows you to rebase the root commit(s) on a branch. When used with --onto, it will skip changes already contained in &amp;lt;newbase&amp;gt; (instead of &amp;lt;upstream&amp;gt;) whereas without --onto it will operate on every change. When used together with both --onto and --preserve-merges, &lt;code&gt;all&lt;/code&gt; root commits will be rewritten to have &amp;lt;newbase&amp;gt; as parent instead.</source>
          <target state="translated">&amp;lt;업스트림&amp;gt;으로 제한하는 대신 &amp;lt;branch&amp;gt;에서 도달 가능한 모든 커밋을 리베이스하십시오. 이를 통해 브랜치에서 루트 커밋을 리베이스 할 수 있습니다. --onto와 함께 사용하면 &amp;lt;upbase&amp;gt; 대신 &amp;lt;newbase&amp;gt;에 이미 포함 된 변경 사항을 건너 뛰고 --onto를 사용하지 않으면 모든 변경에 대해 작동합니다. --onto 및 --preserve-merges와 함께 사용하면 &lt;code&gt;all&lt;/code&gt; 루트 커밋이 대신 &amp;lt;newbase&amp;gt;를 부모로 갖도록 다시 작성됩니다.</target>
        </trans-unit>
        <trans-unit id="e5565e2c078bf46f769d916c78f2140677ea9bef" translate="yes" xml:space="preserve">
          <source>Rebase options</source>
          <target state="translated">리베이스 옵션</target>
        </trans-unit>
        <trans-unit id="716069514beaa612afd8a844f284c8d0a6aabce4" translate="yes" xml:space="preserve">
          <source>Rebase vs. pull/merge</source>
          <target state="translated">리베이스 대 풀 / 병합</target>
        </trans-unit>
        <trans-unit id="5e20f7eeaec14e3dc573b7394eb6cd8341f1bca1" translate="yes" xml:space="preserve">
          <source>Rebase your current HEAD on the last commit you want to retain as-is. For example, if you want to reorder the last 5 commits, use:</source>
          <target state="translated">현재 HEAD를 그대로 유지하려는 마지막 커밋에 리베이스하십시오. 예를 들어, 마지막 5 개의 커밋을 재정렬하려면 다음을 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="7170c51391b558eaee43fbe3f7e40861483475fb" translate="yes" xml:space="preserve">
          <source>Rebasing (or any other form of rewriting) a branch that others have based work on is a bad idea: anyone downstream of it is forced to manually fix their history. This section explains how to do the fix from the downstream&amp;rsquo;s point of view. The real fix, however, would be to avoid rebasing the upstream in the first place.</source>
          <target state="translated">다른 사람이 작업 한 브랜치를 리베이스 (또는 다른 형태의 재 작성)하는 것은 나쁜 생각입니다. 다운 스트림의 모든 사람은 수동으로 히스토리를 수정해야합니다. 이 섹션에서는 다운 스트림 관점에서 수정을 수행하는 방법에 대해 설명합니다. 그러나 실제 수정은 처음부터 업스트림을 리베이스하지 않는 것입니다.</target>
        </trans-unit>
        <trans-unit id="8f0767f1f4e33ddf301ed23c7f2cab0332acde8d" translate="yes" xml:space="preserve">
          <source>Rebasing interactively means that you have a chance to edit the commits which are rebased. You can reorder the commits, and you can remove them (weeding out bad or otherwise unwanted patches).</source>
          <target state="translated">대화식으로 리베이스한다는 것은 리베이스 된 커밋을 편집 할 수있는 기회를 의미합니다. 커밋을 재정렬하고 제거 할 수 있습니다 (나쁘거나 원치 않는 패치를 제거).</target>
        </trans-unit>
        <trans-unit id="451ba45ef5ba504d79efe1ccb8ef4e6b541d4b90" translate="yes" xml:space="preserve">
          <source>Rebasing merges</source>
          <target state="translated">리베이스 링 병합</target>
        </trans-unit>
        <trans-unit id="f41810dd94a2ab482398f10cf85665624d62733a" translate="yes" xml:space="preserve">
          <source>Recall that merge commits may have more than one parent; by default, &lt;code&gt;^&lt;/code&gt; and &lt;code&gt;~&lt;/code&gt; follow the first parent listed in the commit, but you can also choose:</source>
          <target state="translated">병합 커밋에는 둘 이상의 부모가있을 수 있습니다. 기본적으로 &lt;code&gt;^&lt;/code&gt; 및 &lt;code&gt;~&lt;/code&gt; 는 커밋에 나열된 첫 번째 부모를 따르지만 다음을 선택할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="b37c74948935714b7fd73afa3de16cd064ee51d6" translate="yes" xml:space="preserve">
          <source>Recall that the commit which will be committed after we resolve this conflict will have two parents instead of the usual one: one parent will be HEAD, the tip of the current branch; the other will be the tip of the other branch, which is stored temporarily in MERGE_HEAD.</source>
          <target state="translated">우리가이 갈등을 해결 한 후에 커밋 될 커밋은 일반적인 부모 대신 두 부모가있을 것입니다 : 한 부모는 HEAD, 현재 지점의 끝; 다른 하나는 다른 분기의 끝이며 MERGE_HEAD에 임시 저장됩니다.</target>
        </trans-unit>
        <trans-unit id="9f6cd666ff59558e35fc1e4987f55228a4aa839c" translate="yes" xml:space="preserve">
          <source>Receive missing objects from another repository</source>
          <target state="translated">다른 저장소에서 누락 된 객체 수신</target>
        </trans-unit>
        <trans-unit id="3a1414f04e5ec5736bdcd32788841a475c616871" translate="yes" xml:space="preserve">
          <source>Receive what is pushed into the repository</source>
          <target state="translated">저장소에 푸시 된 내용을받습니다.</target>
        </trans-unit>
        <trans-unit id="ca8f48326e259b3e6bb0b952b7bb30d324f93b41" translate="yes" xml:space="preserve">
          <source>Recipe: Copy maint</source>
          <target state="translated">레시피 : 복사 메인</target>
        </trans-unit>
        <trans-unit id="53d4283d5e8f18dd173ab180112f372c62ec5838" translate="yes" xml:space="preserve">
          <source>Recipe: Push/pull: Merging remote topics</source>
          <target state="translated">레시피 : 푸시 / 풀 : 원격 토픽 병합</target>
        </trans-unit>
        <trans-unit id="1f8640f7861cc46b56a1e4b42e9ca596b559f6db" translate="yes" xml:space="preserve">
          <source>Recipe: Push/pull: Publishing branches/topics</source>
          <target state="translated">레시피 : 푸시 / 풀 : 분기 / 주제 게시</target>
        </trans-unit>
        <trans-unit id="3a17d2c389fe13fb57af10dbacfb6b3db024c7c4" translate="yes" xml:space="preserve">
          <source>Recipe: Push/pull: Staying up to date</source>
          <target state="translated">레시피 : 푸시 / 풀 : 최신 상태 유지</target>
        </trans-unit>
        <trans-unit id="02b6d43b8510b59229854c014a4620861f29d737" translate="yes" xml:space="preserve">
          <source>Recipe: Release tagging</source>
          <target state="translated">레시피 : 태그 해제</target>
        </trans-unit>
        <trans-unit id="9d28e02794d321eb00b6d5b97832a596837552b2" translate="yes" xml:space="preserve">
          <source>Recipe: Rewind and rebuild next</source>
          <target state="translated">레시피 : 다음 되감기 및 다시 빌드</target>
        </trans-unit>
        <trans-unit id="f8152ab6d8ec6437faa103dde674cb065aa68613" translate="yes" xml:space="preserve">
          <source>Recipe: Update maint to new release</source>
          <target state="translated">레시피 : 메인 릴리스를 새로운 릴리즈로 업데이트</target>
        </trans-unit>
        <trans-unit id="29ee8bda8dd5e0f017624c7f75aa875a53804d32" translate="yes" xml:space="preserve">
          <source>Recipe: Verify &lt;em&gt;master&lt;/em&gt; is a superset of &lt;em&gt;maint&lt;/em&gt;</source>
          <target state="translated">레시피 : 확인 &lt;em&gt;마스터&lt;/em&gt; 의 상위 집합입니다 &lt;em&gt;MAINT&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="ffd09f97e74a882a55504c37b0826f564e6b1346" translate="yes" xml:space="preserve">
          <source>Recipe: format-patch/am: Importing patches</source>
          <target state="translated">레시피 : format-patch / am : 패치 가져 오기</target>
        </trans-unit>
        <trans-unit id="363c9c30e4fafba7e8fc9192a52c83213c41b8ac" translate="yes" xml:space="preserve">
          <source>Recipe: format-patch/am: Keeping topics up to date</source>
          <target state="translated">레시피 : format-patch / am : 주제를 최신 상태로 유지</target>
        </trans-unit>
        <trans-unit id="677a69c96c088fbfbe55531cae388f0a94e79290" translate="yes" xml:space="preserve">
          <source>Recipe: format-patch/am: Publishing branches/topics</source>
          <target state="translated">레시피 : format-patch / am : 분기 / 주제 게시</target>
        </trans-unit>
        <trans-unit id="7c405acad54185184a3b50d9aee58d7a13bab6ed" translate="yes" xml:space="preserve">
          <source>Recompress, remove unused cruft:</source>
          <target state="translated">재 압축하고 사용하지 않는 부스러기를 제거하십시오.</target>
        </trans-unit>
        <trans-unit id="257831ab2bd13a64966a7f962a9574ea39ef3108" translate="yes" xml:space="preserve">
          <source>Record changes to the repository</source>
          <target state="translated">저장소에 변경 사항 기록</target>
        </trans-unit>
        <trans-unit id="13168b3a0cbb28fba7cf06c3c640480d4de874bc" translate="yes" xml:space="preserve">
          <source>Record only the fact that the path will be added later. An entry for the path is placed in the index with no content. This is useful for, among other things, showing the unstaged content of such files with &lt;code&gt;git diff&lt;/code&gt; and committing them with &lt;code&gt;git commit
-a&lt;/code&gt;.</source>
          <target state="translated">경로가 나중에 추가된다는 사실 만 기록하십시오. 경로에 대한 항목은 내용이없는 색인에 배치됩니다. 이것은 특히 &lt;code&gt;git diff&lt;/code&gt; 를 사용 하여 이러한 파일의 스테이지되지 않은 내용을 표시하고 &lt;code&gt;git commit -a&lt;/code&gt; 커밋하는 데 유용합니다 .</target>
        </trans-unit>
        <trans-unit id="908f8c6524a9d1fb52d4fa427c4917cc570c6355" translate="yes" xml:space="preserve">
          <source>Record that a mark refers to a given object without first creating any new object.</source>
          <target state="translated">마크는 먼저 새 객체를 만들지 않고 주어진 객체를 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="59ee078874bbbc459021c0c530f38bc7aaf471b2" translate="yes" xml:space="preserve">
          <source>Record that a mark refers to a given object without first creating any new object. Using --import-marks and referring to missing marks will cause fast-import to fail, so aliases can provide a way to set otherwise pruned commits to a valid value (e.g. the nearest non-pruned ancestor).</source>
          <target state="translated">마크는 먼저 새 객체를 만들지 않고 주어진 객체를 나타냅니다. --import-marks를 사용하고 누락 된 마크를 참조하면 빠른 가져 오기가 실패하므로 별칭을 사용하면 제거 된 커밋을 유효한 값 (예 : 가장 잘리지 않은 상위 ​​조상)으로 설정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d6adcb873ab9c7cd434052b29bbda78059575713" translate="yes" xml:space="preserve">
          <source>Record the base tree information to identify the state the patch series applies to. See the BASE TREE INFORMATION section below for details. If &amp;lt;commit&amp;gt; is &quot;auto&quot;, a base commit is automatically chosen. The &lt;code&gt;--no-base&lt;/code&gt; option overrides a &lt;code&gt;format.useAutoBase&lt;/code&gt; configuration.</source>
          <target state="translated">패치 시리즈가 적용되는 상태를 식별하기 위해 기본 트리 정보를 기록하십시오. 자세한 내용은 아래의 기본 트리 정보 섹션을 참조하십시오. &amp;lt;commit&amp;gt;이 &quot;auto&quot;이면 기본 커밋이 자동으로 선택됩니다. &lt;code&gt;--no-base&lt;/code&gt; 옵션은 무시 &lt;code&gt;format.useAutoBase&lt;/code&gt; 의 구성.</target>
        </trans-unit>
        <trans-unit id="1df60f45066883b70333fa04c8ca0ea0ac9a963e" translate="yes" xml:space="preserve">
          <source>Record the pristine state as the first commit in the history.</source>
          <target state="translated">역사에서 첫 번째 커밋으로 원시 상태를 기록하십시오.</target>
        </trans-unit>
        <trans-unit id="2779532bfc36fb35edea59aae8e6a7c58766f0fd" translate="yes" xml:space="preserve">
          <source>Records all changes made to the branch tip named &lt;code&gt;name&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;name&lt;/code&gt; 이라는 브랜치 팁에 대한 모든 변경 사항을 기록합니다 .</target>
        </trans-unit>
        <trans-unit id="e26cb9a4392a1984a3c8c89ac8ba4d1939bfa972" translate="yes" xml:space="preserve">
          <source>Records all changes made to the tag named &lt;code&gt;name&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;name&lt;/code&gt; 태그의 모든 변경 사항을 기록합니다 .</target>
        </trans-unit>
        <trans-unit id="b4426300ccfff51ab94cf09d14eb70cb666bb2d4" translate="yes" xml:space="preserve">
          <source>Records of changes made to refs are stored in this directory. See &lt;a href=&quot;git-update-ref&quot;&gt;git-update-ref[1]&lt;/a&gt; for more information. This directory is ignored (except logs/HEAD) if $GIT_COMMON_DIR is set and &quot;$GIT_COMMON_DIR/logs&quot; will be used instead.</source>
          <target state="translated">심판에 대한 변경 기록은이 디렉토리에 저장됩니다. 자세한 내용은 &lt;a href=&quot;git-update-ref&quot;&gt;git-update-ref [1]&lt;/a&gt; 을 참조하십시오. $ GIT_COMMON_DIR이 설정되고 대신 &quot;$ GIT_COMMON_DIR / logs&quot;가 사용되는 경우이 디렉토리는 무시됩니다 (로그 / HEAD 제외).</target>
        </trans-unit>
        <trans-unit id="4dfb1dccefe8c5960e96ace8700ff3694a2adfa8" translate="yes" xml:space="preserve">
          <source>Records of conflicted merge you have not resolved are kept for this many days when &lt;code&gt;git rerere gc&lt;/code&gt; is run. You can also use more human-readable &quot;1.month.ago&quot;, etc. The default is 15 days. See &lt;a href=&quot;git-rerere&quot;&gt;git-rerere[1]&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;git rerere gc&lt;/code&gt; 가 실행될 때 해결되지 않은 충돌 병합 레코드는 며칠 동안 유지됩니다 . 보다 읽기 쉬운 &quot;1.month.ago&quot;등을 사용할 수도 있습니다. 기본값은 15 일입니다. &lt;a href=&quot;git-rerere&quot;&gt;git-rerere [1]을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="0041a23358783dc658fb86af817bd1e3c4818754" translate="yes" xml:space="preserve">
          <source>Records of conflicted merge you resolved earlier are kept for this many days when &lt;code&gt;git rerere gc&lt;/code&gt; is run. You can also use more human-readable &quot;1.month.ago&quot;, etc. The default is 60 days. See &lt;a href=&quot;git-rerere&quot;&gt;git-rerere[1]&lt;/a&gt;.</source>
          <target state="translated">이전에 해결 한 충돌 병합 레코드는 &lt;code&gt;git rerere gc&lt;/code&gt; 가 실행될 때 며칠 동안 유지됩니다 . 보다 읽기 쉬운 &quot;1.month.ago&quot;등을 사용할 수도 있습니다. 기본값은 60 일입니다. &lt;a href=&quot;git-rerere&quot;&gt;git-rerere [1]을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="6f27ef1289a3377cd529d96e1d59f394c9d2e51b" translate="yes" xml:space="preserve">
          <source>Recovering from repository corruption</source>
          <target state="translated">저장소 손상 복구</target>
        </trans-unit>
        <trans-unit id="45b084fa0ec2bcf4d8887dcc1ed74808ce39dd65" translate="yes" xml:space="preserve">
          <source>Recovering from upstream rebase</source>
          <target state="translated">업스트림 리베이스에서 복구</target>
        </trans-unit>
        <trans-unit id="a2b2e17c2700a078248ea4a8793fdeb963f1e774" translate="yes" xml:space="preserve">
          <source>Recovering lost changes</source>
          <target state="translated">손실 된 변경 사항 복구</target>
        </trans-unit>
        <trans-unit id="c9f9ed2d4080ff53397fc95e602ba0c0a8018150" translate="yes" xml:space="preserve">
          <source>Recovering stash entries that were cleared/dropped erroneously</source>
          <target state="translated">잘못 삭제 / 삭제 된 숨김 항목 복구</target>
        </trans-unit>
        <trans-unit id="07417b29bf5742eeb9def793a7c341803a4ae6cf" translate="yes" xml:space="preserve">
          <source>Recurse into sub-trees.</source>
          <target state="translated">하위 트리로 재귀.</target>
        </trans-unit>
        <trans-unit id="b71ca4a78b12182052bd243bd7fb2b5a8710c342" translate="yes" xml:space="preserve">
          <source>Recursively calls ls-files on each submodule in the repository. Currently there is only support for the --cached mode.</source>
          <target state="translated">리포지토리의 각 하위 모듈에서 ls 파일을 반복적으로 호출합니다. 현재는 --cached 모드 만 지원합니다.</target>
        </trans-unit>
        <trans-unit id="9594ad54e61dba1e097011c1262a0e12523ac73c" translate="yes" xml:space="preserve">
          <source>Recursively copies an existing file or subdirectory to a different location within the branch. The existing file or directory must exist. If the destination exists it will be completely replaced by the content copied from the source.</source>
          <target state="translated">기존 파일 또는 하위 디렉토리를 분기 내 다른 위치에 재귀 적으로 복사합니다. 기존 파일 또는 디렉토리가 존재해야합니다. 대상이 존재하면 소스에서 복사 한 내용으로 완전히 바뀝니다.</target>
        </trans-unit>
        <trans-unit id="784c487e0b0ebf6146a806df2269e12c1733d014" translate="yes" xml:space="preserve">
          <source>Recursively finds and lists the svn:ignore property on directories. The output is suitable for appending to the $GIT_DIR/info/exclude file.</source>
          <target state="translated">디렉토리에서 svn : ignore 특성을 반복적으로 찾고 나열합니다. 출력은 $ GIT_DIR / info / exclude 파일에 추가하는 데 적합합니다.</target>
        </trans-unit>
        <trans-unit id="8a1182cccab09515529f5c8d920459a7ff2c3ff2" translate="yes" xml:space="preserve">
          <source>Recursively finds the svn:ignore property on directories and creates matching .gitignore files. The resulting files are staged to be committed, but are not committed. Use -r/--revision to refer to a specific revision.</source>
          <target state="translated">디렉토리에서 svn : ignore 특성을 반복적으로 찾고 일치하는 .gitignore 파일을 작성합니다. 결과 파일은 커밋되도록 준비되었지만 커밋되지는 않습니다. -r /-revision을 사용하여 특정 개정을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="8cf2dd32a75d92cd5c31b8e357091014ef76d06b" translate="yes" xml:space="preserve">
          <source>Recursively search in each submodule that has been initialized and checked out in the repository. When used in combination with the &amp;lt;tree&amp;gt; option the prefix of all submodule output will be the name of the parent project&amp;rsquo;s &amp;lt;tree&amp;gt; object.</source>
          <target state="translated">저장소에서 초기화되고 체크 아웃 된 각 서브 모듈에서 반복적으로 검색하십시오. &amp;lt;tree&amp;gt; 옵션과 함께 사용하면 모든 하위 모듈 출력의 접두사가 상위 프로젝트의 &amp;lt;tree&amp;gt; 객체 이름이됩니다.</target>
        </trans-unit>
        <trans-unit id="c70c81b356beafd0eeca89b16d9fdcb5f7371848" translate="yes" xml:space="preserve">
          <source>Redirection to a file (&lt;code&gt;/path/name&lt;/code&gt;) or pipe (&lt;code&gt;|command&lt;/code&gt;) is not supported.</source>
          <target state="translated">파일 ( &lt;code&gt;/path/name&lt;/code&gt; ) 또는 파이프 ( &lt;code&gt;|command&lt;/code&gt; ) 로의 경로 재 지정 은 지원되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="89381280eddd66ed8601a4438d83804ded19d6ef" translate="yes" xml:space="preserve">
          <source>Reencoding content requires resources that might slow down certain Git operations (e.g &lt;code&gt;git checkout&lt;/code&gt; or &lt;code&gt;git add&lt;/code&gt;).</source>
          <target state="translated">콘텐츠를 다시 인코딩하려면 특정 Git 작업을 늦출 수있는 리소스가 필요합니다 (예 : &lt;code&gt;git checkout&lt;/code&gt; 또는 &lt;code&gt;git add&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="4d5f4726578da60b5802012abfa0452d24f12476" translate="yes" xml:space="preserve">
          <source>Reencoding content to non-UTF encodings can cause errors as the conversion might not be UTF-8 round trip safe. If you suspect your encoding to not be round trip safe, then add it to &lt;code&gt;core.checkRoundtripEncoding&lt;/code&gt; to make Git check the round trip encoding (see &lt;a href=&quot;git-config&quot;&gt;git-config[1]&lt;/a&gt;). SHIFT-JIS (Japanese character set) is known to have round trip issues with UTF-8 and is checked by default.</source>
          <target state="translated">UTF-8이 아닌 왕복 여행으로 변환 할 수 없으므로 내용을 비 UTF 인코딩으로 다시 인코딩하면 오류가 발생할 수 있습니다. 인코딩이 왕복 안전하지 않은 것으로 의심되면 &lt;code&gt;core.checkRoundtripEncoding&lt;/code&gt; 에 추가 하여 Git이 왕복 인코딩을 확인하도록합니다 ( &lt;a href=&quot;git-config&quot;&gt;git-config [1] 참조&lt;/a&gt; ). SHIFT-JIS (일본어 문자 세트)는 UTF-8에서 왕복 문제가있는 것으로 알려져 있으며 기본적으로 선택되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="f60624f9fc2a82abf8497341d9d81b9d0824e3d8" translate="yes" xml:space="preserve">
          <source>Ref list attributes</source>
          <target state="translated">참조 목록 속성</target>
        </trans-unit>
        <trans-unit id="042501eba486c2a8fe3dfeebed7e6a526acc65b2" translate="yes" xml:space="preserve">
          <source>Refer to trace2.h for details about all trace2 functions.</source>
          <target state="translated">모든 trace2 기능에 대한 자세한 내용은 trace2.h를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="db1c784524e1b54011a95823026161f7c8517fe0" translate="yes" xml:space="preserve">
          <source>Reference</source>
          <target state="translated">Reference</target>
        </trans-unit>
        <trans-unit id="8189e74b00341c8128de1c9b04b6630dfed40f88" translate="yes" xml:space="preserve">
          <source>Reference advertisement will be omitted unless explicitly requested</source>
          <target state="translated">명시 적으로 요청하지 않으면 참조 광고는 생략됩니다.</target>
        </trans-unit>
        <trans-unit id="219616f872f3c1f3f7c63db96c4bad5707f937ab" translate="yes" xml:space="preserve">
          <source>Reference logs, or &quot;reflogs&quot;, record when the tips of branches and other references were updated in the local repository. Reflogs are useful in various Git commands, to specify the old value of a reference. For example, &lt;code&gt;HEAD@{2}&lt;/code&gt; means &quot;where HEAD used to be two moves ago&quot;, &lt;code&gt;master@{one.week.ago}&lt;/code&gt; means &quot;where master used to point to one week ago in this local repository&quot;, and so on. See &lt;a href=&quot;gitrevisions&quot;&gt;gitrevisions[7]&lt;/a&gt; for more details.</source>
          <target state="translated">참조 로그 또는 &quot;reflogs&quot;는 분기 및 기타 참조의 팁이 로컬 저장소에서 업데이트 된시기를 기록합니다. Reflogs는 다양한 Git 명령에서 이전 참조 값을 지정하는 데 유용합니다. 예를 들어, &lt;code&gt;HEAD@{2}&lt;/code&gt; 는 &quot;HEAD가 두 번 전에 이동 한 위치&quot;를 의미 하고 &lt;code&gt;master@{one.week.ago}&lt;/code&gt; 는 &quot;이 로컬 저장소에서 1 주일 전에 마스터가 사용 된 위치&quot;등을 의미합니다. 자세한 내용은 &lt;a href=&quot;gitrevisions&quot;&gt;gitrevisions [7]&lt;/a&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="5d20d0fee3b91643dd8d272ac33d01ca95179d82" translate="yes" xml:space="preserve">
          <source>References</source>
          <target state="translated">References</target>
        </trans-unit>
        <trans-unit id="fdc0add895cb5f66656ac926ee760b1a52ebfc92" translate="yes" xml:space="preserve">
          <source>References are stored in subdirectories of this directory. The &lt;code&gt;git prune&lt;/code&gt; command knows to preserve objects reachable from refs found in this directory and its subdirectories. This directory is ignored (except refs/bisect, refs/rewritten and refs/worktree) if $GIT_COMMON_DIR is set and &quot;$GIT_COMMON_DIR/refs&quot; will be used instead.</source>
          <target state="translated">참조는이 디렉토리의 하위 디렉토리에 저장됩니다. &lt;code&gt;git prune&lt;/code&gt; 명령은 심판로부터 도달 가능한 객체가이 디렉토리 및 하위 디렉토리에있는 보존 알고있다. $ GIT_COMMON_DIR이 설정되고 &quot;$ GIT_COMMON_DIR / refs&quot;가 대신 사용되는 경우이 디렉토리는 무시됩니다 (refs / bisect, refs / rewritten 및 refs / worktree 제외).</target>
        </trans-unit>
        <trans-unit id="a774e5bc9f4a8942d74474f466fea367c3f9fc07" translate="yes" xml:space="preserve">
          <source>References to commit objects at the head of each branch are stored in files under .git/refs/heads/.</source>
          <target state="translated">각 분기의 헤드에서 객체를 커밋하는 참조는 .git / refs / heads / 아래 파일에 저장됩니다.</target>
        </trans-unit>
        <trans-unit id="586454a22a42afbc6e2564872cf76fa552b4a1a3" translate="yes" xml:space="preserve">
          <source>Reflogs</source>
          <target state="translated">Reflogs</target>
        </trans-unit>
        <trans-unit id="701486a68f3896a8a5368aead277807a6847151f" translate="yes" xml:space="preserve">
          <source>Refs</source>
          <target state="translated">Refs</target>
        </trans-unit>
        <trans-unit id="80074f188ddb96f7955691b6a7210a31a672772d" translate="yes" xml:space="preserve">
          <source>Refs are grouped into islands based on their &quot;names&quot;, and two regexes that produce the same name are considered to be in the same island. The names are computed from the regexes by concatenating any capture groups from the regex, with a &lt;code&gt;-&lt;/code&gt; dash in between. (And if there are no capture groups, then the name is the empty string, as in the above example.) This allows you to create arbitrary numbers of islands. Only up to 14 such capture groups are supported though.</source>
          <target state="translated">참조는 &quot;이름&quot;을 기준으로 섬으로 그룹화되며 동일한 이름을 생성하는 두 개의 정규 표현식은 같은 섬에있는 것으로 간주됩니다. 정규식에서 캡처 그룹을 연결하고 그 사이에 &lt;code&gt;-&lt;/code&gt; 대시를 붙여서 정규식에서 이름을 계산합니다 . (그리고 캡처 그룹이 없으면 위의 예와 같이 이름은 빈 문자열입니다.) 이렇게하면 임의의 수의 섬을 만들 수 있습니다. 이러한 캡처 그룹은 최대 14 개까지만 지원됩니다.</target>
        </trans-unit>
        <trans-unit id="2bb2083cc2f447acfd0f5d16022129235ca5b2cc" translate="yes" xml:space="preserve">
          <source>Refs that are per working tree can still be accessed from another working tree via two special paths, main-worktree and worktrees. The former gives access to per-worktree refs of the main working tree, while the latter to all linked working trees.</source>
          <target state="translated">작업 트리 당 참조는 주 작업 트리와 작업 트리라는 두 가지 특수 경로를 통해 다른 작업 트리에서 계속 액세스 할 수 있습니다. 전자는 주 작업 트리의 작업 트리 별 참조에 액세스하고 후자는 모든 연결된 작업 트리에 액세스합니다.</target>
        </trans-unit>
        <trans-unit id="05e5994fa9181b6fad85ee509538c0ad6a6bc5c4" translate="yes" xml:space="preserve">
          <source>Refs that are per-&lt;a href=&quot;#def_working_tree&quot;&gt;worktree&lt;/a&gt;, rather than global. This is presently only &lt;a href=&quot;#def_HEAD&quot;&gt;HEAD&lt;/a&gt; and any refs that start with &lt;code&gt;refs/bisect/&lt;/code&gt;, but might later include other unusual refs.</source>
          <target state="translated">행된있는 참고 문헌 &lt;a href=&quot;#def_working_tree&quot;&gt;worktree을&lt;/a&gt; 오히려 지구보다. 이것은 현재 &lt;a href=&quot;#def_HEAD&quot;&gt;HEAD&lt;/a&gt; 이며 &lt;code&gt;refs/bisect/&lt;/code&gt; 시작하는 모든 심판 이지만 나중에 다른 특이한 심판을 포함 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="338d2a0e12d851337309cef01e7fe887153b0f55" translate="yes" xml:space="preserve">
          <source>Regardless of object type, all objects share the following characteristics: they are all deflated with zlib, and have a header that not only specifies their type, but also provides size information about the data in the object. It&amp;rsquo;s worth noting that the SHA-1 hash that is used to name the object is the hash of the original data plus this header, so &lt;code&gt;sha1sum&lt;/code&gt; 'file' does not match the object name for 'file'.</source>
          <target state="translated">객체 유형에 관계없이 모든 객체는 다음 특성을 공유합니다. 객체는 모두 zlib로 수축되고 유형을 지정하고 객체의 데이터에 대한 크기 정보를 제공하는 헤더를 갖습니다. 객체 이름을 지정하는 데 사용되는 SHA-1 해시는 원본 데이터와이 헤더의 해시이므로 &lt;code&gt;sha1sum&lt;/code&gt; 'file'은 'file'의 객체 이름과 일치하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="710a95e624a3349545888a56ed2557d883a0ebee" translate="yes" xml:space="preserve">
          <source>Region and Data Messages</source>
          <target state="translated">지역 및 데이터 메시지</target>
        </trans-unit>
        <trans-unit id="039711232507cd9753ddba093da2350b27e67dca" translate="yes" xml:space="preserve">
          <source>Regions</source>
          <target state="translated">Regions</target>
        </trans-unit>
        <trans-unit id="f60734f6521040c876486255fe253adea3ef4364" translate="yes" xml:space="preserve">
          <source>Regions can be use to time an interesting section of code.</source>
          <target state="translated">지역은 흥미로운 코드 섹션의 시간을 정하는 데 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e6931aebd376c6a517eae391382acbc891d72f65" translate="yes" xml:space="preserve">
          <source>Regions may be nested. This causes messages to be indented in the PERF target, for example. Elapsed times are relative to the start of the corresponding nesting level as expected. For example, if we add region message to:</source>
          <target state="translated">지역이 중첩 될 수 있습니다. 예를 들어 PERF 대상에서 메시지가 들여 쓰기됩니다. 경과 시간은 예상대로 해당 중첩 수준의 시작에 상대적입니다. 예를 들어 지역 메시지를 다음에 추가하면</target>
        </trans-unit>
        <trans-unit id="1595f1bb6d790a7a3e5eb6fb03765aabf279806d" translate="yes" xml:space="preserve">
          <source>Register file contents in the working tree to the index</source>
          <target state="translated">작업 트리의 파일 내용을 색인에 등록</target>
        </trans-unit>
        <trans-unit id="8a6eb409adc691aa11f00dc05c7a129c2f833328" translate="yes" xml:space="preserve">
          <source>Regressions are a big problem in the software industry. But it&amp;rsquo;s difficult to put some real numbers behind that claim.</source>
          <target state="translated">회귀는 소프트웨어 산업에서 큰 문제입니다. 그러나 그 주장 뒤에 실제 숫자를 붙이는 것은 어렵습니다.</target>
        </trans-unit>
        <trans-unit id="4ab9d6c175961a8739069a73845c7f8b21150d86" translate="yes" xml:space="preserve">
          <source>Regressions: a big problem</source>
          <target state="translated">회귀 : 큰 문제</target>
        </trans-unit>
        <trans-unit id="2256cc6ee2a5d077491a8a63ef76ac743c25d2d2" translate="yes" xml:space="preserve">
          <source>Related links</source>
          <target state="translated">관련된 링크들</target>
        </trans-unit>
        <trans-unit id="b61e20d1d031c57060b03654349b1ab448029094" translate="yes" xml:space="preserve">
          <source>Relationship to the Existing Trace Api (api-trace.txt)</source>
          <target state="translated">기존 추적 API와의 관계 (api-trace.txt)</target>
        </trans-unit>
        <trans-unit id="a5807b40eca9f80054603fbc4a7d22e009d2c415" translate="yes" xml:space="preserve">
          <source>Relative and non-relative marks may be combined by interweaving --(no-)-relative-marks with the --(import|export)-marks= options.</source>
          <target state="translated">상대 및 비 상대 마크는-(no-) 상대 마크를-(import | export) -marks = 옵션과 결합하여 결합 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="31bc43768c6a353840de5e162fcf9b5cce4d9437" translate="yes" xml:space="preserve">
          <source>Relative to the tip of &lt;code&gt;topic&lt;/code&gt;: knowing that your &lt;code&gt;topic&lt;/code&gt; has three commits, the old tip of &lt;code&gt;subsystem&lt;/code&gt; must be &lt;code&gt;topic~3&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;topic&lt;/code&gt; 팁과 관련하여 : &lt;code&gt;topic&lt;/code&gt; 에 3 개의 커밋이 있다는 것을 알고 있으면 &lt;code&gt;subsystem&lt;/code&gt; 의 이전 팁은 &lt;code&gt;topic~3&lt;/code&gt; 이어야합니다 .</target>
        </trans-unit>
        <trans-unit id="98786341673b229d09cd6bac6df5f38262cac094" translate="yes" xml:space="preserve">
          <source>Remain silent even on nonexistent files</source>
          <target state="translated">존재하지 않는 파일에서도 침묵 유지</target>
        </trans-unit>
        <trans-unit id="cad2c2939c304ff819eff58f792783f6747c93cf" translate="yes" xml:space="preserve">
          <source>Remap all the path requests as relative to the given path. This is sort of &quot;Git root&quot; - if you run &lt;code&gt;git daemon&lt;/code&gt; with &lt;code&gt;--base-path=/srv/git&lt;/code&gt; on example.com, then if you later try to pull &lt;code&gt;git://example.com/hello.git&lt;/code&gt;, &lt;code&gt;git daemon&lt;/code&gt; will interpret the path as &lt;code&gt;/srv/git/hello.git&lt;/code&gt;.</source>
          <target state="translated">주어진 경로를 기준으로 모든 경로 요청을 다시 매핑하십시오. 이것은 일종의 &quot;망할 놈의 루트&quot;입니다 - 당신이 실행하는 경우 &lt;code&gt;git daemon&lt;/code&gt; 와 &lt;code&gt;--base-path=/srv/git&lt;/code&gt; 나중에 끌어하려고하면 다음 example.com에를 &lt;code&gt;git://example.com/hello.git&lt;/code&gt; , &lt;code&gt;git daemon&lt;/code&gt; 은 경로를 &lt;code&gt;/srv/git/hello.git&lt;/code&gt; 로 해석합니다 .</target>
        </trans-unit>
        <trans-unit id="4a5c393fce9fb8dc0d691f13288d22c0e7f1b235" translate="yes" xml:space="preserve">
          <source>Remap to ancestor</source>
          <target state="translated">조상으로 다시 매핑</target>
        </trans-unit>
        <trans-unit id="8d0121936c456fcf3d222b828ee9077e2cc34843" translate="yes" xml:space="preserve">
          <source>Remember how we did the &lt;code&gt;git update-index&lt;/code&gt; on file &lt;code&gt;hello&lt;/code&gt; and then we changed &lt;code&gt;hello&lt;/code&gt; afterward, and could compare the new state of &lt;code&gt;hello&lt;/code&gt; with the state we saved in the index file?</source>
          <target state="translated">우리가 어떻게했는지 기억 &lt;code&gt;git update-index&lt;/code&gt; 파일에 &lt;code&gt;hello&lt;/code&gt; 하고 우리가 변경 &lt;code&gt;hello&lt;/code&gt; 이후, 그리고 새로운 상태 비교할 수 &lt;code&gt;hello&lt;/code&gt; 우리는 인덱스 파일에 저장되어있는 상태로?</target>
        </trans-unit>
        <trans-unit id="2cc52de1f31f7df8236151d526db4f676cdfb905" translate="yes" xml:space="preserve">
          <source>Remember, before running &lt;code&gt;git merge&lt;/code&gt;, our &lt;code&gt;master&lt;/code&gt; head was at &quot;Some fun.&quot; commit, while our &lt;code&gt;mybranch&lt;/code&gt; head was at &quot;Some work.&quot; commit.</source>
          <target state="translated">기억, 실행하기 전에 &lt;code&gt;git merge&lt;/code&gt; , 우리의 &lt;code&gt;master&lt;/code&gt; 머리에 있었다 &quot;일부 재미.&quot; 우리 반면, 커밋 &lt;code&gt;mybranch&lt;/code&gt; 로 머리에 있었다 &quot;일부 작동합니다.&quot; 범하다.</target>
        </trans-unit>
        <trans-unit id="3e534e3639a4dd02297fd7fd07ede8a71c71535e" translate="yes" xml:space="preserve">
          <source>Remote HEAD must resolve to an object that exists locally</source>
          <target state="translated">원격 HEAD는 로컬로 존재하는 오브젝트로 해석되어야합니다.</target>
        </trans-unit>
        <trans-unit id="2033891925fe29daa47f6c451af0f18a87529563" translate="yes" xml:space="preserve">
          <source>Remote helper programs are invoked with one or (optionally) two arguments. The first argument specifies a remote repository as in Git; it is either the name of a configured remote or a URL. The second argument specifies a URL; it is usually of the form &lt;code&gt;&amp;lt;transport&amp;gt;://&amp;lt;address&amp;gt;&lt;/code&gt;, but any arbitrary string is possible. The &lt;code&gt;GIT_DIR&lt;/code&gt; environment variable is set up for the remote helper and can be used to determine where to store additional data or from which directory to invoke auxiliary Git commands.</source>
          <target state="translated">원격 헬퍼 프로그램은 하나 또는 선택적으로 두 개의 인수로 호출됩니다. 첫 번째 인수는 Git에서와 같이 원격 저장소를 지정합니다. 구성된 리모트의 이름이거나 URL입니다. 두 번째 인수는 URL을 지정합니다. 일반적으로 &lt;code&gt;&amp;lt;transport&amp;gt;://&amp;lt;address&amp;gt;&lt;/code&gt; 형식 이지만 임의의 문자열이 가능합니다. &lt;code&gt;GIT_DIR&lt;/code&gt; 의 환경 변수는 원격 헬퍼 대해 설정되며 여기서 보조 힘내 명령을 호출하기위한 추가 데이터 또는 디렉토리를 저장하는 방법을 결정하는데 사용될 수있다.</target>
        </trans-unit>
        <trans-unit id="8ee4f73d380c3c99d59209a069206bbd667c2977" translate="yes" xml:space="preserve">
          <source>Remote helper programs are normally not used directly by end users, but they are invoked by Git when it needs to interact with remote repositories Git does not support natively. A given helper will implement a subset of the capabilities documented here. When Git needs to interact with a repository using a remote helper, it spawns the helper as an independent process, sends commands to the helper&amp;rsquo;s standard input, and expects results from the helper&amp;rsquo;s standard output. Because a remote helper runs as an independent process from Git, there is no need to re-link Git to add a new helper, nor any need to link the helper with the implementation of Git.</source>
          <target state="translated">원격 도우미 프로그램은 일반적으로 최종 사용자가 직접 사용하지 않지만 Git은 원격 저장소와 상호 작용해야 할 때 Git에서 기본적으로 지원하지 않습니다. 지정된 도우미는 여기에 설명 된 기능의 하위 집합을 구현합니다. Git은 원격 헬퍼를 사용하여 리포지토리와 상호 작용해야하는 경우 헬퍼를 독립적 인 프로세스로 생성하고 명령을 헬퍼의 표준 입력으로 보내고 헬퍼의 표준 출력 결과를 기대합니다. 원격 헬퍼는 Git과 독립적 인 프로세스로 실행되므로 Git를 다시 연결하여 새로운 헬퍼를 추가하거나 헬퍼를 Git 구현과 연결할 필요가 없습니다.</target>
        </trans-unit>
        <trans-unit id="7f9d958435b39dd5e8519bc9a5ca0b414455c52e" translate="yes" xml:space="preserve">
          <source>Remotes</source>
          <target state="translated">Remotes</target>
        </trans-unit>
        <trans-unit id="1d36d5e98f5289fdb40f6238091d921b16cd3d1b" translate="yes" xml:space="preserve">
          <source>Remove &amp;lt;n&amp;gt; leading path components (separated by slashes) from traditional diff paths. E.g., with &lt;code&gt;-p2&lt;/code&gt;, a patch against &lt;code&gt;a/dir/file&lt;/code&gt; will be applied directly to &lt;code&gt;file&lt;/code&gt;. The default is 1.</source>
          <target state="translated">기존의 diff 경로에서 &amp;lt;n&amp;gt; 선행 경로 구성 요소 (슬래시로 구분)를 제거하십시오. 예를 들어, &lt;code&gt;-p2&lt;/code&gt; 를 사용 &lt;code&gt;a/dir/file&lt;/code&gt; 에 대한 패치 가 &lt;code&gt;file&lt;/code&gt; 에 직접 적용됩니다 . 기본값은 1입니다.</target>
        </trans-unit>
        <trans-unit id="536f22b2b28f4e056331357f5ffb90610418f296" translate="yes" xml:space="preserve">
          <source>Remove &amp;lt;ref&amp;gt; from remote repository. The specified branch cannot be the remote HEAD. If -d is specified the following other conditions must also be met:</source>
          <target state="translated">원격 저장소에서 &amp;lt;ref&amp;gt;를 제거하십시오. 지정된 분기는 원격 HEAD가 될 수 없습니다. -d를 지정하면 다음과 같은 다른 조건도 충족해야합니다.</target>
        </trans-unit>
        <trans-unit id="9a577cbb08edd5d9773523cfc5cfe43dc9b03f45" translate="yes" xml:space="preserve">
          <source>Remove a single stash entry from the list of stash entries. When no &lt;code&gt;&amp;lt;stash&amp;gt;&lt;/code&gt; is given, it removes the latest one. i.e. &lt;code&gt;stash@{0}&lt;/code&gt;, otherwise &lt;code&gt;&amp;lt;stash&amp;gt;&lt;/code&gt; must be a valid stash log reference of the form &lt;code&gt;stash@{&amp;lt;revision&amp;gt;}&lt;/code&gt;.</source>
          <target state="translated">숨김 항목 목록에서 단일 숨김 항목을 제거하십시오. &lt;code&gt;&amp;lt;stash&amp;gt;&lt;/code&gt; 가 제공 되지 않으면 최신 항목이 제거됩니다. 즉, &lt;code&gt;stash@{0}&lt;/code&gt; 이면 &lt;code&gt;&amp;lt;stash&amp;gt;&lt;/code&gt; 는 &lt;code&gt;stash@{&amp;lt;revision&amp;gt;}&lt;/code&gt; 형식의 유효한 숨김 로그 참조 여야합니다 .</target>
        </trans-unit>
        <trans-unit id="729e5fd8775c30c358fedf9e611fd4f6f670b5e7" translate="yes" xml:space="preserve">
          <source>Remove a single stashed state from the stash list and apply it on top of the current working tree state, i.e., do the inverse operation of &lt;code&gt;git stash push&lt;/code&gt;. The working directory must match the index.</source>
          <target state="translated">숨김 목록에서 단일 숨김 상태를 제거하고 현재 작업 트리 상태 위에 적용하십시오 (예 : &lt;code&gt;git stash push&lt;/code&gt; 의 역 연산 수행) . 작업 디렉토리는 색인과 일치해야합니다.</target>
        </trans-unit>
        <trans-unit id="d34ae9e19d54c7604c479f4c5964ccef00bd4a98" translate="yes" xml:space="preserve">
          <source>Remove a working tree. Only clean working trees (no untracked files and no modification in tracked files) can be removed. Unclean working trees or ones with submodules can be removed with &lt;code&gt;--force&lt;/code&gt;. The main working tree cannot be removed.</source>
          <target state="translated">작업 트리를 제거하십시오. 깨끗한 작업 트리 (추적되지 않은 파일 및 추적 된 파일의 수정 없음) 만 제거 할 수 있습니다. 부정한 작업 트리 또는 하위 모듈이있는 트리는 &lt;code&gt;--force&lt;/code&gt; 를 사용 하여 제거 할 수 있습니다 . 기본 작업 트리는 제거 할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="df5a8d70d2380181bdc059d7c2ddc0a78e9d1412" translate="yes" xml:space="preserve">
          <source>Remove all lines matching the key from config file.</source>
          <target state="translated">구성 파일에서 키와 일치하는 모든 줄을 제거하십시오.</target>
        </trans-unit>
        <trans-unit id="9fc0230ddf082dc45699878be1634350de11665f" translate="yes" xml:space="preserve">
          <source>Remove all notes for non-existing/unreachable objects.</source>
          <target state="translated">존재하지 않거나 도달 할 수없는 물체에 대한 모든 메모를 제거하십시오.</target>
        </trans-unit>
        <trans-unit id="fc1b4600e49f3115828b9f3463a6567fd85094fb" translate="yes" xml:space="preserve">
          <source>Remove all the stash entries. Note that those entries will then be subject to pruning, and may be impossible to recover (see &lt;code&gt;Examples&lt;/code&gt; below for a possible strategy).</source>
          <target state="translated">모든 숨김 항목을 제거하십시오. 그런 다음 해당 항목은 정리 될 수 있으며 복구가 불가능할 수 있습니다 ( 가능한 전략은 아래 &lt;code&gt;Examples&lt;/code&gt; 참조).</target>
        </trans-unit>
        <trans-unit id="353e52e76ff6a9350e8485da73b547859aa497ce" translate="yes" xml:space="preserve">
          <source>Remove any whitespace-continuation in trailers, so that each trailer appears on a line by itself with its full content.</source>
          <target state="translated">예고편에서 공백을 제거하여 각 예고편이 전체 내용과 함께 한 줄로 표시되도록합니다.</target>
        </trans-unit>
        <trans-unit id="de112945ec414c57cddaca5199f29ee2fc05a979" translate="yes" xml:space="preserve">
          <source>Remove directories from the SVN tree if there are no files left behind. SVN can version empty directories, and they are not removed by default if there are no files left in them. Git cannot version empty directories. Enabling this flag will make the commit to SVN act like Git.</source>
          <target state="translated">파일이 남아 있지 않으면 SVN 트리에서 디렉토리를 제거하십시오. SVN은 빈 디렉토리의 버전을 지정할 수 있으며, 파일이 남아 있지 않으면 기본적으로 제거되지 않습니다. Git은 빈 디렉토리의 버전을 지정할 수 없습니다. 이 플래그를 활성화하면 SVN에 대한 커밋이 Git처럼 작동합니다.</target>
        </trans-unit>
        <trans-unit id="7e6c07487aafd5a1b8bbc132d0eb9f70eb39a580" translate="yes" xml:space="preserve">
          <source>Remove everything in body before a scissors line (see &lt;a href=&quot;git-mailinfo&quot;&gt;git-mailinfo[1]&lt;/a&gt;). Can be activated by default using the &lt;code&gt;mailinfo.scissors&lt;/code&gt; configuration variable.</source>
          <target state="translated">가위 선 앞에서 몸의 모든 것을 제거하십시오 ( &lt;a href=&quot;git-mailinfo&quot;&gt;git-mailinfo [1] 참조&lt;/a&gt; ). &lt;code&gt;mailinfo.scissors&lt;/code&gt; 구성 변수를 사용하여 기본적으로 활성화 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="399fc61abd5e53e0ff9fe12417324d78f931368d" translate="yes" xml:space="preserve">
          <source>Remove everything in body before a scissors line. A line that mainly consists of scissors (either &quot;&amp;gt;8&quot; or &quot;8&amp;lt;&quot;) and perforation (dash &quot;-&quot;) marks is called a scissors line, and is used to request the reader to cut the message at that line. If such a line appears in the body of the message before the patch, everything before it (including the scissors line itself) is ignored when this option is used.</source>
          <target state="translated">가위 선 전에 몸의 모든 것을 제거하십시오. 가위 ( &quot;&amp;gt; 8&quot;또는 &quot;8 &amp;lt;&quot;)와 천공 (대시 &quot;-&quot;) 표시로 주로 구성되는 줄을 가위 줄이라고하며 독자가 해당 줄에서 메시지를 자르도록 요청하는 데 사용됩니다. 패치 전에 메시지 본문에 이러한 줄이 나타나면이 옵션을 사용하면 그 앞에있는 모든 항목 (가위 줄 자체 포함)이 무시됩니다.</target>
        </trans-unit>
        <trans-unit id="3b6a842b7003d3eacad12733ce8974d4d54219eb" translate="yes" xml:space="preserve">
          <source>Remove extra objects that are already in pack files</source>
          <target state="translated">이미 팩 파일에있는 추가 개체 제거</target>
        </trans-unit>
        <trans-unit id="17839ee8fd6b46f8390b41c3ab4800fda5ea86c3" translate="yes" xml:space="preserve">
          <source>Remove files from the index, or from the working tree and the index. &lt;code&gt;git rm&lt;/code&gt; will not remove a file from just your working directory. (There is no option to remove a file only from the working tree and yet keep it in the index; use &lt;code&gt;/bin/rm&lt;/code&gt; if you want to do that.) The files being removed have to be identical to the tip of the branch, and no updates to their contents can be staged in the index, though that default behavior can be overridden with the &lt;code&gt;-f&lt;/code&gt; option. When &lt;code&gt;--cached&lt;/code&gt; is given, the staged content has to match either the tip of the branch or the file on disk, allowing the file to be removed from just the index.</source>
          <target state="translated">색인 또는 작업 트리와 색인에서 파일을 제거하십시오. &lt;code&gt;git rm&lt;/code&gt; 은 작업 디렉토리에서만 파일을 제거하지 않습니다. (작업 트리에서만 파일을 제거하고 인덱스에 보관하는 옵션은 없습니다. 제거하려면 &lt;code&gt;/bin/rm&lt;/code&gt; 을 사용하십시오 .) 제거되는 파일은 분기의 끝과 같아야합니다. &lt;code&gt;-f&lt;/code&gt; 옵션을 사용하면 기본 동작을 무시할 수 있지만 해당 내용에 대한 업데이트는 색인에서 준비 할 수 없습니다 . 때 &lt;code&gt;--cached&lt;/code&gt; 가 주어진다는이 내용이 파일이 바로 인덱스에서 제거 할 수 있도록 분기의 팁 또는 디스크에있는 파일 중 하나와 일치하는 무대.</target>
        </trans-unit>
        <trans-unit id="3cb238ca5adf89378484ddf4d733eeac1d7298bc" translate="yes" xml:space="preserve">
          <source>Remove files from the working tree and from the index</source>
          <target state="translated">작업 트리 및 색인에서 파일 제거</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
