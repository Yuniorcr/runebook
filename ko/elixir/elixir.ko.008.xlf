<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="elixir">
    <body>
      <group id="elixir">
        <trans-unit id="490a95607dded73b4e2c7121c35b8a2a2901b097" translate="yes" xml:space="preserve">
          <source>Returns how many months there are in the given year.</source>
          <target state="translated">주어진 연도에 몇 개월이 있었는지 반환합니다.</target>
        </trans-unit>
        <trans-unit id="da0d66142abc50d51d45fadbe1b7ceb2bf128de8" translate="yes" xml:space="preserve">
          <source>Returns if the given year is a leap year.</source>
          <target state="translated">주어진 연도가 윤년인지를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="f5884d887fb7ba8b1601d037e06dde2d616f18cc" translate="yes" xml:space="preserve">
          <source>Returns information about the &lt;code&gt;path&lt;/code&gt;. If it exists, it returns a &lt;code&gt;{:ok, info}&lt;/code&gt; tuple, where info is a &lt;a href=&quot;file.stat&quot;&gt;&lt;code&gt;File.Stat&lt;/code&gt;&lt;/a&gt; struct. Returns &lt;code&gt;{:error, reason}&lt;/code&gt; with the same reasons as &lt;a href=&quot;#read/1&quot;&gt;&lt;code&gt;read/1&lt;/code&gt;&lt;/a&gt; if a failure occurs.</source>
          <target state="translated">&lt;code&gt;path&lt;/code&gt; 에 대한 정보를 반환 합니다 . 존재하는 경우 &lt;code&gt;{:ok, info}&lt;/code&gt; 튜플을 반환합니다 . 여기서 info는 &lt;a href=&quot;file.stat&quot;&gt; &lt;code&gt;File.Stat&lt;/code&gt; &lt;/a&gt; 구조체입니다. 실패가 발생한 경우 &lt;a href=&quot;#read/1&quot;&gt; &lt;code&gt;read/1&lt;/code&gt; &lt;/a&gt; 과 같은 이유로 &lt;code&gt;{:error, reason}&lt;/code&gt; 을 리턴 합니다.</target>
        </trans-unit>
        <trans-unit id="71f428255ff2f929b5d980ed8e402267ff12f103" translate="yes" xml:space="preserve">
          <source>Returns information about the &lt;code&gt;path&lt;/code&gt;. If the file is a symlink, sets the &lt;code&gt;type&lt;/code&gt; to &lt;code&gt;:symlink&lt;/code&gt; and returns a &lt;a href=&quot;file.stat&quot;&gt;&lt;code&gt;File.Stat&lt;/code&gt;&lt;/a&gt; struct for the link. For any other file, returns exactly the same values as &lt;a href=&quot;#stat/2&quot;&gt;&lt;code&gt;stat/2&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;path&lt;/code&gt; 에 대한 정보를 반환 합니다 . 파일이 심볼릭 링크 인 경우 &lt;code&gt;type&lt;/code&gt; 을 &lt;code&gt;:symlink&lt;/code&gt; 로 설정하고 링크에 대한 &lt;a href=&quot;file.stat&quot;&gt; &lt;code&gt;File.Stat&lt;/code&gt; &lt;/a&gt; 구조체를 반환합니다 . 다른 파일의 경우 &lt;a href=&quot;#stat/2&quot;&gt; &lt;code&gt;stat/2&lt;/code&gt; &lt;/a&gt; 와 정확히 동일한 값을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="2202568b5257269fabf7b8610f1f9626579ccc58" translate="yes" xml:space="preserve">
          <source>Returns information about the &lt;code&gt;port&lt;/code&gt; or &lt;code&gt;nil&lt;/code&gt; if the port is closed.</source>
          <target state="translated">&lt;code&gt;port&lt;/code&gt; 에 대한 정보를 반환 하거나 포트가 닫혀 있으면 &lt;code&gt;nil&lt;/code&gt; 을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="83f9b5f443afc3ae957189755eaa98e7c3fb2722" translate="yes" xml:space="preserve">
          <source>Returns information about the process identified by &lt;code&gt;pid&lt;/code&gt;, or returns &lt;code&gt;nil&lt;/code&gt; if the process is not alive.</source>
          <target state="translated">&lt;code&gt;pid&lt;/code&gt; 로 식별 된 프로세스에 대한 정보를 리턴 하거나 프로세스가 &lt;code&gt;nil&lt;/code&gt; 상태가 아닌 경우 nil을 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="04a73d587974a8675e9a92ec0f5497b61cf34112" translate="yes" xml:space="preserve">
          <source>Returns list of lists containing &lt;code&gt;count&lt;/code&gt; elements each, where each new chunk starts &lt;code&gt;step&lt;/code&gt; elements into the &lt;code&gt;enumerable&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;count&lt;/code&gt; 요소가 각각 포함 된 목록의 목록을 리턴합니다 . 여기서 각 새 청크는 &lt;code&gt;step&lt;/code&gt; 요소를 &lt;code&gt;enumerable&lt;/code&gt; 으로 시작 합니다 .</target>
        </trans-unit>
        <trans-unit id="97c42435f2786e7a4559d668951c6de124e0b400" translate="yes" xml:space="preserve">
          <source>Returns registered &lt;code&gt;after_spawn&lt;/code&gt; callbacks.</source>
          <target state="translated">등록 된 &lt;code&gt;after_spawn&lt;/code&gt; 콜백을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="35972be543b88cdbe520718e001cfd9da6a4c1a6" translate="yes" xml:space="preserve">
          <source>Returns the &lt;a href=&quot;calendar#t:iso_days/0&quot;&gt;&lt;code&gt;Calendar.iso_days/0&lt;/code&gt;&lt;/a&gt; format of the specified date.</source>
          <target state="translated">지정된 날짜 의 &lt;a href=&quot;calendar#t:iso_days/0&quot;&gt; &lt;code&gt;Calendar.iso_days/0&lt;/code&gt; &lt;/a&gt; 형식을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="4d8fb3220039c4a989cf50dc53c6e73ba318cf3b" translate="yes" xml:space="preserve">
          <source>Returns the &lt;code&gt;enumerable&lt;/code&gt; with each element wrapped in a tuple alongside its index.</source>
          <target state="translated">인덱스와 함께 튜플에 싸인 각 요소와 &lt;code&gt;enumerable&lt;/code&gt; 을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="f6e24cfb2ae8f59a7578a010e574fc3caa012742" translate="yes" xml:space="preserve">
          <source>Returns the &lt;code&gt;path&lt;/code&gt; with the &lt;code&gt;extension&lt;/code&gt; stripped.</source>
          <target state="translated">&lt;code&gt;extension&lt;/code&gt; 제거 된 &lt;code&gt;path&lt;/code&gt; 를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="dc74c30f8661f563864d03e8b3c44b66d1bd4aa7" translate="yes" xml:space="preserve">
          <source>Returns the &lt;code&gt;pid&lt;/code&gt; or &lt;code&gt;{name, node}&lt;/code&gt; of a GenServer process, or &lt;code&gt;nil&lt;/code&gt; if no process is associated with the given &lt;code&gt;server&lt;/code&gt;.</source>
          <target state="translated">GenServer 프로세스 의 &lt;code&gt;pid&lt;/code&gt; 또는 &lt;code&gt;{name, node}&lt;/code&gt; 또는 주어진 &lt;code&gt;server&lt;/code&gt; 와 연관된 프로세스가없는 경우 &lt;code&gt;nil&lt;/code&gt; 을 리턴 합니다 .</target>
        </trans-unit>
        <trans-unit id="90365e0f63c31c851a4ea0a22762d8fd5340a36b" translate="yes" xml:space="preserve">
          <source>Returns the Erlang/OTP release number.</source>
          <target state="translated">Erlang / OTP 릴리스 번호를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="bc57bd779fa06cd3c466e24b49175637b5fc12c9" translate="yes" xml:space="preserve">
          <source>Returns the IEx width for printing.</source>
          <target state="translated">인쇄 할 IEx 너비를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="8dab0f32fd45479245e3d6084613b9547e47fae3" translate="yes" xml:space="preserve">
          <source>Returns the Mix target.</source>
          <target state="translated">믹스 대상을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="3cb31056e81f8170874a64e3b816a1cafeaf8b88" translate="yes" xml:space="preserve">
          <source>Returns the PID (process identifier) of the calling process.</source>
          <target state="translated">호출 프로세스의 PID (프로세스 식별자)를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="28781d2a7b24b9b3e88b31850c6fffc73a81f172" translate="yes" xml:space="preserve">
          <source>Returns the PID of a new linked process started by the application of &lt;code&gt;fun&lt;/code&gt; on &lt;code&gt;node&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;node&lt;/code&gt; 에서 &lt;code&gt;fun&lt;/code&gt; 을 적용하여 시작된 새 링크 된 프로세스의 PID를 리턴 합니다 .</target>
        </trans-unit>
        <trans-unit id="2a1c4c6c2d4ba2c1a2bfd7c6cfe2d55559ccd904" translate="yes" xml:space="preserve">
          <source>Returns the PID of a new linked process started by the application of &lt;code&gt;module.function(args)&lt;/code&gt; on &lt;code&gt;node&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;node&lt;/code&gt; 에서 &lt;code&gt;module.function(args)&lt;/code&gt; 를 적용하여 시작된 새 링크 된 프로세스의 PID를 리턴 합니다 .</target>
        </trans-unit>
        <trans-unit id="d1bea2590103786ac5c9572e9655db1dfaa04b8a" translate="yes" xml:space="preserve">
          <source>Returns the PID of a new process started by the application of &lt;code&gt;fun&lt;/code&gt; on &lt;code&gt;node&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;node&lt;/code&gt; 에 &lt;code&gt;fun&lt;/code&gt; 을 적용하여 시작된 새 프로세스의 PID를 반환 합니다 .</target>
        </trans-unit>
        <trans-unit id="cd52650d0092e03bdb2d1d752a3e5d17538c5add" translate="yes" xml:space="preserve">
          <source>Returns the PID of a new process started by the application of &lt;code&gt;fun&lt;/code&gt; on &lt;code&gt;node&lt;/code&gt;. If &lt;code&gt;node&lt;/code&gt; does not exist, a useless PID is returned.</source>
          <target state="translated">&lt;code&gt;node&lt;/code&gt; 에 &lt;code&gt;fun&lt;/code&gt; 을 적용하여 시작된 새 프로세스의 PID를 반환 합니다 . 경우 &lt;code&gt;node&lt;/code&gt; 존재하지 않는, 쓸모없는 PID가 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="fff6b40d45bb938426184e6a79905ec94d725709" translate="yes" xml:space="preserve">
          <source>Returns the PID of a new process started by the application of &lt;code&gt;module.function(args)&lt;/code&gt; on &lt;code&gt;node&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;node&lt;/code&gt; 에 &lt;code&gt;module.function(args)&lt;/code&gt; 를 적용하여 시작한 새 프로세스의 PID를 반환 합니다 .</target>
        </trans-unit>
        <trans-unit id="5fc95961643565d6ee0e94b3a948a9b32184e234" translate="yes" xml:space="preserve">
          <source>Returns the PID of the group leader for the calling process.</source>
          <target state="translated">호출 프로세스에 대한 그룹 리더의 PID를 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="67e30a9be70444eddcad990e1b99321a52cda56a" translate="yes" xml:space="preserve">
          <source>Returns the PID or port identifier registered under &lt;code&gt;name&lt;/code&gt; or &lt;code&gt;nil&lt;/code&gt; if the name is not registered.</source>
          <target state="translated">반환 값은 PID 또는 포트 식별자에 등록 된 &lt;code&gt;name&lt;/code&gt; 또는 &lt;code&gt;nil&lt;/code&gt; 이름이 등록되지 않은 경우.</target>
        </trans-unit>
        <trans-unit id="b6ea0621ee843d2f4183487a30251fd512bb4dd5" translate="yes" xml:space="preserve">
          <source>Returns the absolute path of the directory of the current file as a binary.</source>
          <target state="translated">현재 파일 디렉토리의 절대 경로를 바이너리로 반환합니다.</target>
        </trans-unit>
        <trans-unit id="b054fb6b930203c886bcc866a9d057bd209f4748" translate="yes" xml:space="preserve">
          <source>Returns the accumulator for the next enumeration step.</source>
          <target state="translated">다음 열거 단계에 대한 누산기를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="c2b4002e3b75b6bab925771b8767cfa960e477fa" translate="yes" xml:space="preserve">
          <source>Returns the application path inside the build.</source>
          <target state="translated">빌드 내부의 응용 프로그램 경로를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="9b85bed3a262af6f35083e7e28994ef4428c7299" translate="yes" xml:space="preserve">
          <source>Returns the biggest of the two given terms according to Erlang's term ordering.</source>
          <target state="translated">Erlang의 항 순서에 따라 주어진 두 항 중 가장 큰 항을 구합니다.</target>
        </trans-unit>
        <trans-unit id="fea2095c1f29cacac8d65cf66784d4ef1ae83102" translate="yes" xml:space="preserve">
          <source>Returns the binding for the given context as a keyword list.</source>
          <target state="translated">주어진 컨텍스트에 대한 바인딩을 키워드 목록으로 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="752314d956a27e5c44f8fbfba8a3757afae67eba" translate="yes" xml:space="preserve">
          <source>Returns the build path for the given project.</source>
          <target state="translated">주어진 프로젝트의 빌드 경로를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="573a0f5ab58416d588ed3b479256a76e548b06c3" translate="yes" xml:space="preserve">
          <source>Returns the cookie if the node is alive, otherwise &lt;code&gt;:nocookie&lt;/code&gt;.</source>
          <target state="translated">노드가 &lt;code&gt;:nocookie&lt;/code&gt; 경우 쿠키를 반환하고, 그렇지 않으면 : nocookie 입니다.</target>
        </trans-unit>
        <trans-unit id="d845d89480874ca778a1116c5567c440609d9b1a" translate="yes" xml:space="preserve">
          <source>Returns the count of elements in the &lt;code&gt;enumerable&lt;/code&gt; for which &lt;code&gt;fun&lt;/code&gt; returns a truthy value.</source>
          <target state="translated">반환에있는 요소의 수를 &lt;code&gt;enumerable&lt;/code&gt; 하는 &lt;code&gt;fun&lt;/code&gt; truthy 값을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="5f20500df9c0629148c9bd099e966749367e6127" translate="yes" xml:space="preserve">
          <source>Returns the current Mix environment.</source>
          <target state="translated">현재 믹스 환경을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="0f05fa0008ff2e3de6102d2eb231a36353917056" translate="yes" xml:space="preserve">
          <source>Returns the current calling environment as a &lt;a href=&quot;macro.env&quot;&gt;&lt;code&gt;Macro.Env&lt;/code&gt;&lt;/a&gt; struct.</source>
          <target state="translated">현재 호출 환경을 &lt;a href=&quot;macro.env&quot;&gt; &lt;code&gt;Macro.Env&lt;/code&gt; &lt;/a&gt; 구조체 로 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="cbcdc4db9ba8ae581e0947b7522b6b7808fe867d" translate="yes" xml:space="preserve">
          <source>Returns the current date in UTC.</source>
          <target state="translated">현재 날짜를 UTC로 반환합니다.</target>
        </trans-unit>
        <trans-unit id="d427f0d881fcb426b0308f9c5527544913d37578" translate="yes" xml:space="preserve">
          <source>Returns the current datetime in UTC.</source>
          <target state="translated">현재 날짜 시간을 UTC로 반환합니다.</target>
        </trans-unit>
        <trans-unit id="6db00f03d4b312ef865190016b2f434102565fa4" translate="yes" xml:space="preserve">
          <source>Returns the current datetime in the provided time zone.</source>
          <target state="translated">제공된 시간대의 현재 날짜 / 시간을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="b4e884734713aacb55b93422d56caab2fd2fd029" translate="yes" xml:space="preserve">
          <source>Returns the current environment information as a &lt;a href=&quot;macro.env&quot;&gt;&lt;code&gt;Macro.Env&lt;/code&gt;&lt;/a&gt; struct.</source>
          <target state="translated">현재 환경 정보를 &lt;a href=&quot;macro.env&quot;&gt; &lt;code&gt;Macro.Env&lt;/code&gt; &lt;/a&gt; 구조체 로 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="c2d246446e08e73fc7f43897b3ee7185cb7780f4" translate="yes" xml:space="preserve">
          <source>Returns the current input/output buffers for the given IO device.</source>
          <target state="translated">주어진 IO 장치에 대한 현재 입력 / 출력 버퍼를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="fe927394cd0bfd1e814f4cc201198db4e42a8162" translate="yes" xml:space="preserve">
          <source>Returns the current module name as an atom or &lt;code&gt;nil&lt;/code&gt; otherwise.</source>
          <target state="translated">현재 모듈 이름을 아톰으로 반환하거나 그렇지 않으면 &lt;code&gt;nil&lt;/code&gt; 을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="521ef1fd72b95fd19ed6d9439535d64de0fedd30" translate="yes" xml:space="preserve">
          <source>Returns the current monotonic time in the &lt;code&gt;:native&lt;/code&gt; time unit.</source>
          <target state="translated">&lt;code&gt;:native&lt;/code&gt; 시간 단위로 현재 단조 시간을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="345cd1d89db7604f650f8e73c200c61040ceeea5" translate="yes" xml:space="preserve">
          <source>Returns the current monotonic time in the given time unit.</source>
          <target state="translated">주어진 시간 단위로 현재 단조 시간을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="26adce4b3c858c82bd89e77053f0a78750bacda8" translate="yes" xml:space="preserve">
          <source>Returns the current naive datetime in UTC.</source>
          <target state="translated">현재 순진 날짜 시간을 UTC로 반환합니다.</target>
        </trans-unit>
        <trans-unit id="1bec217a2783d794b0aff1789f2269eed2669c4d" translate="yes" xml:space="preserve">
          <source>Returns the current node.</source>
          <target state="translated">현재 노드를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="6d12c14c21595e740c48f9036de98fd93391e9c1" translate="yes" xml:space="preserve">
          <source>Returns the current operating system (OS) time in the given time &lt;code&gt;unit&lt;/code&gt;.</source>
          <target state="translated">주어진 시간 &lt;code&gt;unit&lt;/code&gt; 현재 운영 체제 (OS) 시간을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="8ec3d852082bcaf3ce2741e711151dd5810411b5" translate="yes" xml:space="preserve">
          <source>Returns the current operating system (OS) time.</source>
          <target state="translated">현재 운영 체제 (OS) 시간을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="9577165071461244948e156a490206caaa49ee13" translate="yes" xml:space="preserve">
          <source>Returns the current shell.</source>
          <target state="translated">현재 쉘을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="8e8ea115727f9d4064d043a892fb6bd3286e6745" translate="yes" xml:space="preserve">
          <source>Returns the current system time in the &lt;code&gt;:native&lt;/code&gt; time unit.</source>
          <target state="translated">&lt;code&gt;:native&lt;/code&gt; 시간 단위로 현재 시스템 시간을 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="92212b92e0e8001ce298e74695fe895e088b04d3" translate="yes" xml:space="preserve">
          <source>Returns the current system time in the given time unit.</source>
          <target state="translated">주어진 시간 단위로 현재 시스템 시간을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="540dd0788a95b6d0957d5ed2f9059d09fdbd91d9" translate="yes" xml:space="preserve">
          <source>Returns the current time in UTC.</source>
          <target state="translated">현재 시간을 UTC로 반환합니다.</target>
        </trans-unit>
        <trans-unit id="4fabbe6f4e846eeed8c475505bc8075dfa40dcb3" translate="yes" xml:space="preserve">
          <source>Returns the current time offset between the Erlang VM monotonic time and the Erlang VM system time.</source>
          <target state="translated">Erlang VM 단조 시간과 Erlang VM 시스템 시간 사이의 현재 시간 오프셋을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="20d5a985cb0015239605f2f1156e73f61f7acab9" translate="yes" xml:space="preserve">
          <source>Returns the current working directory or &lt;code&gt;nil&lt;/code&gt; if one is not available.</source>
          <target state="translated">현재 작업 디렉토리를 반환하거나 디렉토리를 사용할 수없는 경우 &lt;code&gt;nil&lt;/code&gt; 을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="3f4d96f8d1d49184aac4fce163ea1635bed830d9" translate="yes" xml:space="preserve">
          <source>Returns the current working directory or raises &lt;a href=&quot;runtimeerror&quot;&gt;&lt;code&gt;RuntimeError&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">현재 작업 디렉토리를 반환하거나 &lt;a href=&quot;runtimeerror&quot;&gt; &lt;code&gt;RuntimeError&lt;/code&gt; 를 발생&lt;/a&gt; 시킵니다.</target>
        </trans-unit>
        <trans-unit id="bd5eda37e289b94da28ee644df8f58ab267ce4a8" translate="yes" xml:space="preserve">
          <source>Returns the day of the week as an integer. For the ISO 8601 calendar (the default), it is an integer from 1 to 7, where 1 is Monday and 7 is Sunday.</source>
          <target state="translated">요일을 정수로 반환합니다. ISO 8601 달력 (기본값)의 경우 1에서 7까지의 정수이며 여기서 1은 월요일이고 7은 일요일입니다.</target>
        </trans-unit>
        <trans-unit id="473215ad94d1a89d8e50f3170d490992cd7fa885" translate="yes" xml:space="preserve">
          <source>Returns the day of the year as an integer. For the ISO 8601 calendar (the default), it is an integer from 1 to 366.</source>
          <target state="translated">연중 일을 정수로 리턴합니다. ISO 8601 달력 (기본값)의 경우 1에서 366 사이의 정수입니다.</target>
        </trans-unit>
        <trans-unit id="33b04f5e22dce70a50b505e48c02613150c8eb8a" translate="yes" xml:space="preserve">
          <source>Returns the day of the year as an integer. For the ISO 8601 calendar (the default), it is an integer from 1 to 4.</source>
          <target state="translated">연중 일을 정수로 리턴합니다. ISO 8601 달력 (기본값)의 경우 1에서 4 사이의 정수입니다.</target>
        </trans-unit>
        <trans-unit id="04afcb00bb6df97dc22721d3b7726ba2c39e5893" translate="yes" xml:space="preserve">
          <source>Returns the default compilers used by Mix.</source>
          <target state="translated">Mix에서 사용하는 기본 컴파일러를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="3918a2e8d3b80984f96cb96c51a0494d3d39bed6" translate="yes" xml:space="preserve">
          <source>Returns the default port for a given &lt;code&gt;scheme&lt;/code&gt;.</source>
          <target state="translated">주어진 &lt;code&gt;scheme&lt;/code&gt; 의 기본 포트를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="535f11476c25e1bb602ba6d2aeb55347a1d6a043" translate="yes" xml:space="preserve">
          <source>Returns the difference between two times, considering only the hour, minute, second and microsecond.</source>
          <target state="translated">시, 분, 초 및 마이크로 초 만 고려하여 두 번의 차이를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="c360d7e4c5c2b410f7a146c98152183d42efdcf3" translate="yes" xml:space="preserve">
          <source>Returns the directory component of &lt;code&gt;path&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;path&lt;/code&gt; 의 디렉토리 구성 요소를 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="743a31f3d672772d256b1200c80f279d76f2d31c" translate="yes" xml:space="preserve">
          <source>Returns the docs for the given module or path to &lt;code&gt;.beam&lt;/code&gt; file.</source>
          <target state="translated">주어진 모듈 또는 &lt;code&gt;.beam&lt;/code&gt; 파일의 경로에 대한 문서를 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="60f44569a96a86763b4d5487c67ec190e0aa215b" translate="yes" xml:space="preserve">
          <source>Returns the endianness the system was compiled with.</source>
          <target state="translated">시스템이 컴파일 된 엔디안을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="90dc2654ea71a38a108c2c7c6240011daa9ac00b" translate="yes" xml:space="preserve">
          <source>Returns the endianness.</source>
          <target state="translated">엔디안을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="55ed469436421de6156924c6030eb3ab0a32ba8f" translate="yes" xml:space="preserve">
          <source>Returns the environment stacktrace.</source>
          <target state="translated">환경 스택 추적을 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="5456a19f646f58529fe8a657394e5ddae1330e08" translate="yes" xml:space="preserve">
          <source>Returns the error or fails otherwise.</source>
          <target state="translated">오류를 반환하거나 그렇지 않으면 실패합니다.</target>
        </trans-unit>
        <trans-unit id="7362835e7fb583b56ba30b3e3d72e9f11ce9a6a9" translate="yes" xml:space="preserve">
          <source>Returns the exit status/message of the current process or fails otherwise.</source>
          <target state="translated">현재 프로세스의 종료 상태 / 메시지를 반환하거나 그렇지 않으면 실패합니다.</target>
        </trans-unit>
        <trans-unit id="13b1cd87bb42d7ad26289e50c4f9af5414cf7bac" translate="yes" xml:space="preserve">
          <source>Returns the extension of the last component of &lt;code&gt;path&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;path&lt;/code&gt; 의 마지막 구성 요소의 확장명을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="30b2ff36eaf15948432462e234a67e21fe2e2019" translate="yes" xml:space="preserve">
          <source>Returns the first element for which &lt;code&gt;fun&lt;/code&gt; returns a truthy value. If no such element is found, returns &lt;code&gt;default&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;fun&lt;/code&gt; 이 참 값 을 반환하는 첫 번째 요소를 반환합니다. 이러한 요소가 없으면 &lt;code&gt;default&lt;/code&gt; 를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="44fb56015a721ac17ca474e99ac44941901f7216" translate="yes" xml:space="preserve">
          <source>Returns the first element in &lt;code&gt;list&lt;/code&gt; or &lt;code&gt;nil&lt;/code&gt; if &lt;code&gt;list&lt;/code&gt; is empty.</source>
          <target state="translated">&lt;code&gt;list&lt;/code&gt; 의 첫 번째 요소를 반환 하거나 &lt;code&gt;list&lt;/code&gt; 가 비어 있으면 &lt;code&gt;nil&lt;/code&gt; 을 반환 합니다 .</target>
        </trans-unit>
        <trans-unit id="b755a0a7007ddbe1d8bd4609634632fb2a788b92" translate="yes" xml:space="preserve">
          <source>Returns the first grapheme from a UTF-8 string, &lt;code&gt;nil&lt;/code&gt; if the string is empty.</source>
          <target state="translated">UTF-8 문자열에서 첫 번째 그래프를 반환합니다 . 문자열이 비어 있으면 &lt;code&gt;nil&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="2328ab83b14d6136b16a050205c1494154a3401b" translate="yes" xml:space="preserve">
          <source>Returns the first value for &lt;code&gt;key&lt;/code&gt; and removes all associated entries in the keyword list.</source>
          <target state="translated">&lt;code&gt;key&lt;/code&gt; 의 첫 번째 값을 반환하고 키워드 목록에서 모든 관련 항목을 제거합니다.</target>
        </trans-unit>
        <trans-unit id="adace3ea6573dd72a53ac820de069b8efe08eeae" translate="yes" xml:space="preserve">
          <source>Returns the float whose text representation is &lt;code&gt;charlist&lt;/code&gt;.</source>
          <target state="translated">텍스트 표현이 &lt;code&gt;charlist&lt;/code&gt; 인 float를 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="132d92e12bedb340ac3d1a53925f3bc5b200ce16" translate="yes" xml:space="preserve">
          <source>Returns the full path of all dependencies as a map.</source>
          <target state="translated">모든 종속성의 전체 경로를지도로 반환합니다.</target>
        </trans-unit>
        <trans-unit id="8d3182b82f60a34d74d98ba7cc9c7db20ff5729c" translate="yes" xml:space="preserve">
          <source>Returns the given &lt;code&gt;path&lt;/code&gt; relative to the given &lt;code&gt;from&lt;/code&gt; path.</source>
          <target state="translated">주어진 리턴 &lt;code&gt;path&lt;/code&gt; 주어진 상대 &lt;code&gt;from&lt;/code&gt; 경로입니다.</target>
        </trans-unit>
        <trans-unit id="75bed7c4c49c3acb846eb78679f043b5f9939bba" translate="yes" xml:space="preserve">
          <source>Returns the given captures as a map or &lt;code&gt;nil&lt;/code&gt; if no captures are found.</source>
          <target state="translated">주어진 캡처를 맵으로 반환하거나 캡처가 없으면 &lt;code&gt;nil&lt;/code&gt; 을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="7fa658bba7d8988f6fff21b54b937be943e2fbb1" translate="yes" xml:space="preserve">
          <source>Returns the given datetime with the microsecond field truncated to the given precision (&lt;code&gt;:microsecond&lt;/code&gt;, &lt;code&gt;millisecond&lt;/code&gt; or &lt;code&gt;:second&lt;/code&gt;).</source>
          <target state="translated">마이크로 초 필드가 지정된 정밀도 ( &lt;code&gt;:microsecond&lt;/code&gt; , &lt;code&gt;millisecond&lt;/code&gt; 또는 &lt;code&gt;:second&lt;/code&gt; )로 잘린 상태에서 주어진 날짜 시간을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="28d16705056be413543338cdc59340c17555be51" translate="yes" xml:space="preserve">
          <source>Returns the given naive datetime with the microsecond field truncated to the given precision (&lt;code&gt;:microsecond&lt;/code&gt;, &lt;code&gt;:millisecond&lt;/code&gt; or &lt;code&gt;:second&lt;/code&gt;).</source>
          <target state="translated">마이크로 초 필드가 지정된 정밀도 ( &lt;code&gt;:microsecond&lt;/code&gt; , &lt;code&gt;:millisecond&lt;/code&gt; 또는 &lt;code&gt;:second&lt;/code&gt; )로 잘린 상태에서 주어진 순진 날짜 시간을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="3d1a559ecef9e97b4e0334ec074b0b1f5674bf30" translate="yes" xml:space="preserve">
          <source>Returns the given path inside &lt;a href=&quot;#app_dir/1&quot;&gt;&lt;code&gt;app_dir/1&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#app_dir/1&quot;&gt; &lt;code&gt;app_dir/1&lt;/code&gt; &lt;/a&gt; 안에 주어진 경로를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="45f9818c95e6364d0071ed3fb00b8ef3cc3d319d" translate="yes" xml:space="preserve">
          <source>Returns the given time with the microsecond field truncated to the given precision (&lt;code&gt;:microsecond&lt;/code&gt;, &lt;code&gt;millisecond&lt;/code&gt; or &lt;code&gt;:second&lt;/code&gt;).</source>
          <target state="translated">마이크로 초 필드가 주어진 정밀도 ( &lt;code&gt;:microsecond&lt;/code&gt; , &lt;code&gt;millisecond&lt;/code&gt; 또는 &lt;code&gt;:second&lt;/code&gt; )로 잘린 주어진 시간을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="909b8d4669adb90c693b81f2a8d07663b593a92e" translate="yes" xml:space="preserve">
          <source>Returns the grapheme at the &lt;code&gt;position&lt;/code&gt; of the given UTF-8 &lt;code&gt;string&lt;/code&gt;. If &lt;code&gt;position&lt;/code&gt; is greater than &lt;code&gt;string&lt;/code&gt; length, then it returns &lt;code&gt;nil&lt;/code&gt;.</source>
          <target state="translated">주어진 UTF-8 &lt;code&gt;string&lt;/code&gt; 의 &lt;code&gt;position&lt;/code&gt; 에 그래프를 반환합니다 . 경우 &lt;code&gt;position&lt;/code&gt; 보다 큰 &lt;code&gt;string&lt;/code&gt; 길이, 그것은 반환 &lt;code&gt;nil&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="05c6f692fd2828628bdd1efab20923941cb15eae" translate="yes" xml:space="preserve">
          <source>Returns the greatest common divisor of the two given integers.</source>
          <target state="translated">주어진 두 정수의 최대 공약수를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="b283ba5da4ce9761248fbc47c852c80114d37e35" translate="yes" xml:space="preserve">
          <source>Returns the head of a list. Raises &lt;a href=&quot;argumenterror&quot;&gt;&lt;code&gt;ArgumentError&lt;/code&gt;&lt;/a&gt; if the list is empty.</source>
          <target state="translated">리스트의 선두를 돌려줍니다. 레이즈 &lt;a href=&quot;argumenterror&quot;&gt; &lt;code&gt;ArgumentError&lt;/code&gt; &lt;/a&gt; 목록이 비어있는 경우.</target>
        </trans-unit>
        <trans-unit id="1aab8bad43ed60da302eaec7116a0fb4f8228f71" translate="yes" xml:space="preserve">
          <source>Returns the integer part of &lt;code&gt;number&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;number&lt;/code&gt; 의 정수 부분을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="3e4caee94b42975fc4ef569f7edb886b32f98473" translate="yes" xml:space="preserve">
          <source>Returns the integer represented by the ordered &lt;code&gt;digits&lt;/code&gt;.</source>
          <target state="translated">정렬 된 &lt;code&gt;digits&lt;/code&gt; 표시되는 정수를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="9dca7c41159299ac837cdcf59a4ccdfd24e8223d" translate="yes" xml:space="preserve">
          <source>Returns the keyword list itself.</source>
          <target state="translated">키워드 목록 자체를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="28cf4adaa9e99aa7a488eb9e9efd274d65ac64ca" translate="yes" xml:space="preserve">
          <source>Returns the known keys for the given &lt;code&gt;pid&lt;/code&gt; in &lt;code&gt;registry&lt;/code&gt; in no particular order.</source>
          <target state="translated">&lt;code&gt;registry&lt;/code&gt; 에서 주어진 &lt;code&gt;pid&lt;/code&gt; 에 대해 알려진 키를 특별한 순서없이 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="ed4f2c86eaedecae2c967c536bfa703cc2920d0c" translate="yes" xml:space="preserve">
          <source>Returns the largest integer smaller than or equal to &lt;code&gt;number&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;number&lt;/code&gt; 보다 작거나 같은 가장 큰 정수를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="b463682e5f1620bc48bbe9a0c681922d3b6e22db" translate="yes" xml:space="preserve">
          <source>Returns the last component of &lt;code&gt;path&lt;/code&gt; with the &lt;code&gt;extension&lt;/code&gt; stripped.</source>
          <target state="translated">의 마지막 구성 요소를 반환 &lt;code&gt;path&lt;/code&gt; 로 &lt;code&gt;extension&lt;/code&gt; 제거.</target>
        </trans-unit>
        <trans-unit id="81927b94fd63f85c8665acc4bc7874e3d4d31937" translate="yes" xml:space="preserve">
          <source>Returns the last component of the path or the path itself if it does not contain any directory separators.</source>
          <target state="translated">경로의 마지막 구성 요소 또는 경로가 디렉토리 분리자를 포함하지 않는 경우 경로 자체를 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="45bb2bd2dfb7427c0def40b931c0fa8bb71e07c7" translate="yes" xml:space="preserve">
          <source>Returns the last element in &lt;code&gt;list&lt;/code&gt; or &lt;code&gt;nil&lt;/code&gt; if &lt;code&gt;list&lt;/code&gt; is empty.</source>
          <target state="translated">&lt;code&gt;list&lt;/code&gt; 의 마지막 요소를 반환 하거나 &lt;code&gt;list&lt;/code&gt; 가 비어 있으면 &lt;code&gt;nil&lt;/code&gt; 을 반환 합니다 .</target>
        </trans-unit>
        <trans-unit id="b60f9b2a8336b775ec25cc98be20c5236daea41a" translate="yes" xml:space="preserve">
          <source>Returns the last grapheme from a UTF-8 string, &lt;code&gt;nil&lt;/code&gt; if the string is empty.</source>
          <target state="translated">UTF-8 문자열에서 마지막 그래프를 반환합니다 . 문자열이 비어 있으면 &lt;code&gt;nil&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="60f662f4df687832912347c33ee43b43e8d7e49d" translate="yes" xml:space="preserve">
          <source>Returns the latest modification time from config files.</source>
          <target state="translated">구성 파일에서 최신 수정 시간을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="1a17acd17d93c2beed018ebd32e7381da5cf43a4" translate="yes" xml:space="preserve">
          <source>Returns the length of &lt;code&gt;list&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;list&lt;/code&gt; 의 길이를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="8b308f7849b98129f4e56bec9a2ab362236e7a74" translate="yes" xml:space="preserve">
          <source>Returns the list of command line arguments passed to the program.</source>
          <target state="translated">프로그램에 전달 된 명령 행 인수 목록을 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="44d5cb238fa513f56b5a6d6939f5b722a4d1a26c" translate="yes" xml:space="preserve">
          <source>Returns the list of files in the given directory.</source>
          <target state="translated">주어진 디렉토리의 파일 목록을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="fe0f0d1d998912ae211cef3e07fac10c74125c71" translate="yes" xml:space="preserve">
          <source>Returns the magic cookie of the local node.</source>
          <target state="translated">로컬 노드의 매직 쿠키를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="33b9544a2e452f1a99c29a76bae5d5dc88adf825" translate="yes" xml:space="preserve">
          <source>Returns the maximal element in the &lt;code&gt;enumerable&lt;/code&gt; according to Erlang's term ordering.</source>
          <target state="translated">Erlang의 용어 순서에 따라 &lt;code&gt;enumerable&lt;/code&gt; 최대 요소를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="7a1a242005e42a95aa3266b2eab0a2a4fd8e3105" translate="yes" xml:space="preserve">
          <source>Returns the maximal element in the &lt;code&gt;enumerable&lt;/code&gt; as calculated by the given function.</source>
          <target state="translated">주어진 함수에 의해 계산 된 &lt;code&gt;enumerable&lt;/code&gt; 최대 요소를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="9536ff1a100bf1bce64d62cc60d29cc363b6d009" translate="yes" xml:space="preserve">
          <source>Returns the minimal element in the &lt;code&gt;enumerable&lt;/code&gt; according to Erlang's term ordering.</source>
          <target state="translated">Erlang의 용어 순서에 따라 &lt;code&gt;enumerable&lt;/code&gt; 최소 요소를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="4aaf9ad65824961ffacf65287788a624a792d8ad" translate="yes" xml:space="preserve">
          <source>Returns the minimal element in the &lt;code&gt;enumerable&lt;/code&gt; as calculated by the given function.</source>
          <target state="translated">주어진 함수에 의해 계산 된 &lt;code&gt;enumerable&lt;/code&gt; 최소 요소를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="0ae1bfedd52d674e4dd2a7059e781e1680098395" translate="yes" xml:space="preserve">
          <source>Returns the moduledoc or &lt;code&gt;nil&lt;/code&gt;.</source>
          <target state="translated">moduledoc 또는 &lt;code&gt;nil&lt;/code&gt; 을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="dc0172f27e90560535eb10761257b16c6438a35f" translate="yes" xml:space="preserve">
          <source>Returns the next code point in a string.</source>
          <target state="translated">문자열에서 다음 코드 포인트를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="b7a2d63dd8aa9e75aa8ca9871ffd197f84b3ad92" translate="yes" xml:space="preserve">
          <source>Returns the next grapheme in a string.</source>
          <target state="translated">문자열에서 다음 그래프를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="a16815d4724b8691695891cfce1bd1b80506605c" translate="yes" xml:space="preserve">
          <source>Returns the node where the given argument is located. The argument can be a PID, a reference, or a port. If the local node is not alive, &lt;code&gt;:nonode@nohost&lt;/code&gt; is returned.</source>
          <target state="translated">주어진 인수가있는 노드를 반환합니다. 인수는 PID, 참조 또는 포트 일 수 있습니다. 로컬 노드가 &lt;code&gt;:nonode@nohost&lt;/code&gt; 가 아닌 경우 : nonode @ nohost 가 리턴됩니다.</target>
        </trans-unit>
        <trans-unit id="fb0d19709454ac201a1e441f05c0767db885f7e5" translate="yes" xml:space="preserve">
          <source>Returns the normalized day fraction of the specified time.</source>
          <target state="translated">지정된 시간의 정규화 된 일 부분을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="ebe9ee0e2dcfef83024da931aea937711de22721" translate="yes" xml:space="preserve">
          <source>Returns the number of &lt;code&gt;{pid, value}&lt;/code&gt; pairs under the given &lt;code&gt;key&lt;/code&gt; in &lt;code&gt;registry&lt;/code&gt; that match &lt;code&gt;pattern&lt;/code&gt;.</source>
          <target state="translated">의 수를 돌려줍니다 &lt;code&gt;{pid, value}&lt;/code&gt; 주어진 아래 쌍 &lt;code&gt;key&lt;/code&gt; 의 &lt;code&gt;registry&lt;/code&gt; 가 일치하는 &lt;code&gt;pattern&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="993096f11931f901931f9487833be33b5fe12f30" translate="yes" xml:space="preserve">
          <source>Returns the number of Unicode graphemes in a UTF-8 string.</source>
          <target state="translated">UTF-8 문자열로 된 유니 코드 그래프 수를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="b9318f14536ad10f68dec3a090722544f2fc933e" translate="yes" xml:space="preserve">
          <source>Returns the number of bytes needed to contain &lt;code&gt;bitstring&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;bitstring&lt;/code&gt; 을 포함하는 데 필요한 바이트 수를 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="0ab6d73ab9101e6ad794ac65a9028c34ffc39f8a" translate="yes" xml:space="preserve">
          <source>Returns the number of days in the given &lt;code&gt;date&lt;/code&gt; month.</source>
          <target state="translated">주어진 &lt;code&gt;date&lt;/code&gt; 월 의 일 수를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="aef856be9186f5050ccf210e12afe31c44f70bfd" translate="yes" xml:space="preserve">
          <source>Returns the number of elements in &lt;code&gt;map_set&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;map_set&lt;/code&gt; 의 요소 수를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="5b54c7695f5998e85118fe351a01a0eac6afe807" translate="yes" xml:space="preserve">
          <source>Returns the number of months in the given &lt;code&gt;date&lt;/code&gt; year.</source>
          <target state="translated">주어진 &lt;code&gt;date&lt;/code&gt; 연도 의 개월 수를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="d1ea18c62ae69b9b7617892c57bf359ea558d46a" translate="yes" xml:space="preserve">
          <source>Returns the number of registered keys in a registry. It runs in constant time.</source>
          <target state="translated">레지스트리에 등록 된 키 수를 반환합니다. 일정한 시간에 실행됩니다.</target>
        </trans-unit>
        <trans-unit id="acfbdec1c3382733c31d3e5a142e482203fcba40" translate="yes" xml:space="preserve">
          <source>Returns the number of schedulers in the VM.</source>
          <target state="translated">VM의 스케줄러 수를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="b889415c6fce3d59b84ddd96e7cca2db8db380cb" translate="yes" xml:space="preserve">
          <source>Returns the number of schedulers online in the VM.</source>
          <target state="translated">VM에서 온라인으로 스케줄러 수를 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="5df4306ee94fe8f8fafbfae6afb8dc375379b369" translate="yes" xml:space="preserve">
          <source>Returns the old value of &lt;code&gt;flag&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;flag&lt;/code&gt; 의 이전 값을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="13ba9fcca2a0649fec425cb7848af73f91935f3e" translate="yes" xml:space="preserve">
          <source>Returns the operating system PID for the current Erlang runtime system instance.</source>
          <target state="translated">현재 Erlang 런타임 시스템 인스턴스의 운영 체제 PID를 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="89200e57745b7c39430ec5683fae28a368d62bac" translate="yes" xml:space="preserve">
          <source>Returns the options used for inspecting.</source>
          <target state="translated">검사에 사용 된 옵션을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="e56c4592d5df7f1bace540247183fda61bd3a8c9" translate="yes" xml:space="preserve">
          <source>Returns the ordered digits for the given &lt;code&gt;integer&lt;/code&gt;.</source>
          <target state="translated">주어진 &lt;code&gt;integer&lt;/code&gt; 대해 정렬 된 숫자를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="8d395cac96a71568d47555bbbbf4625ac25a1410" translate="yes" xml:space="preserve">
          <source>Returns the path type.</source>
          <target state="translated">경로 유형을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="12f1d8051a526d9c6a64f1dbb1d2d7d5ae196c74" translate="yes" xml:space="preserve">
          <source>Returns the path where dependencies are stored for the given project.</source>
          <target state="translated">주어진 프로젝트에 대한 의존성이 저장되는 경로를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="25dbe974fbdff9402cb982b026d936c4ff110e40" translate="yes" xml:space="preserve">
          <source>Returns the path where manifests are stored.</source>
          <target state="translated">매니페스트가 저장된 경로를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="9d953d9255141f7294d89b7b7fe49a513a28c2b3" translate="yes" xml:space="preserve">
          <source>Returns the path where protocol consolidations are stored.</source>
          <target state="translated">프로토콜 통합이 저장된 경로를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="1f11106aa39ba84c5e30cc0b55e17085927e4e42" translate="yes" xml:space="preserve">
          <source>Returns the paths the given project compiles to.</source>
          <target state="translated">주어진 프로젝트가 컴파일되는 경로를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="f12bd00aec58184b41e9e6a2031aa30605d2df99" translate="yes" xml:space="preserve">
          <source>Returns the pluralization for &lt;code&gt;word&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;word&lt;/code&gt; 의 복수형을 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="df6a4629eb175817de97b50b825cf94add115c00" translate="yes" xml:space="preserve">
          <source>Returns the process identifier of the current Erlang emulator in the format most commonly used by the operating system environment.</source>
          <target state="translated">운영 체제 환경에서 가장 일반적으로 사용되는 형식으로 현재 Erlang 에뮬레이터의 프로세스 식별자를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="568636cdc2330b657828aa8245c56f10e4eee142" translate="yes" xml:space="preserve">
          <source>Returns the project configuration.</source>
          <target state="translated">프로젝트 구성을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="ab453c26a5feb021a2c9059dd3c8585ac19eb3ef" translate="yes" xml:space="preserve">
          <source>Returns the regex options as a string.</source>
          <target state="translated">정규식 옵션을 문자열로 반환합니다.</target>
        </trans-unit>
        <trans-unit id="ce3ebec18204dd94a1942d1c3249ace4c6e0d006" translate="yes" xml:space="preserve">
          <source>Returns the regex source as a binary.</source>
          <target state="translated">정규식 소스를 이진수로 반환합니다.</target>
        </trans-unit>
        <trans-unit id="9433dc7ce38dfb47f9e2242a44435d8ec1469e59" translate="yes" xml:space="preserve">
          <source>Returns the shortdoc or &lt;code&gt;nil&lt;/code&gt;.</source>
          <target state="translated">shortdoc 또는 &lt;code&gt;nil&lt;/code&gt; 을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="53b0081e44e5c9c4563adcd42943126cb72ba8c9" translate="yes" xml:space="preserve">
          <source>Returns the size of a map.</source>
          <target state="translated">지도의 크기를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="464da3495a9bba600da306000b297ddb8d537d28" translate="yes" xml:space="preserve">
          <source>Returns the size of a tuple.</source>
          <target state="translated">튜플의 크기를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="2eab1deb376aa2eb3ded24f57f590dc04c57e6b1" translate="yes" xml:space="preserve">
          <source>Returns the size of an IO data.</source>
          <target state="translated">IO 데이터의 크기를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="771fa37bdad6a0b0f3f8ca4535f1113f29b7cca1" translate="yes" xml:space="preserve">
          <source>Returns the size of the &lt;code&gt;enumerable&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;enumerable&lt;/code&gt; 크기를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="4360055191bbc6d560abe7b2a7ed6423ae2263a6" translate="yes" xml:space="preserve">
          <source>Returns the size of the next grapheme.</source>
          <target state="translated">다음 그래프의 크기를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="921d7de9abba27ebf9e4ec955853abb5d9b2dfde" translate="yes" xml:space="preserve">
          <source>Returns the smallest integer greater than or equal to &lt;code&gt;number&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;number&lt;/code&gt; 보다 크거나 같은 가장 작은 정수를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="ec9bf6067fd64ae230688cac070ca822929e9781" translate="yes" xml:space="preserve">
          <source>Returns the smallest of the two given terms according to Erlang's term ordering.</source>
          <target state="translated">Erlang의 항 순서에 따라 주어진 두 항 중 최소값을 구합니다.</target>
        </trans-unit>
        <trans-unit id="f7e094cce152da41bb001fe75ff8ff8c450d3c55" translate="yes" xml:space="preserve">
          <source>Returns the spec for &lt;code&gt;app&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;app&lt;/code&gt; 에 대한 사양을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="5393c9233d23da08562a8362027b6bca2a3dff85" translate="yes" xml:space="preserve">
          <source>Returns the stacktrace for the currently handled exception.</source>
          <target state="translated">현재 처리 된 예외에 대한 스택 추적을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="8b893b416ca9bfbcc2d075a8ada9c6aca862a339" translate="yes" xml:space="preserve">
          <source>Returns the string representation of the given &lt;a href=&quot;#t:t/0&quot;&gt;URI struct&lt;/a&gt;.</source>
          <target state="translated">지정된 &lt;a href=&quot;#t:t/0&quot;&gt;URI 구조체&lt;/a&gt; 의 캐릭터 라인 표현을 돌려줍니다 .</target>
        </trans-unit>
        <trans-unit id="cea5e90d9f2a065b00dd59e1c92db64e63a26004" translate="yes" xml:space="preserve">
          <source>Returns the string untouched if there are no occurrences.</source>
          <target state="translated">발생이없는 경우 손대지 않은 문자열을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="2119c6340fc1c60d171f69f5b6fc40832b65f1de" translate="yes" xml:space="preserve">
          <source>Returns the string untouched if there is no match. If &lt;code&gt;match&lt;/code&gt; is an empty string (&lt;code&gt;&quot;&quot;&lt;/code&gt;), &lt;code&gt;replacement&lt;/code&gt; is just appended to &lt;code&gt;string&lt;/code&gt;.</source>
          <target state="translated">일치하는 항목이 없으면 문자열을 그대로 반환합니다. 경우 &lt;code&gt;match&lt;/code&gt; 빈 문자열입니다 ( &lt;code&gt;&quot;&quot;&lt;/code&gt; ), &lt;code&gt;replacement&lt;/code&gt; 단지에 추가되는 &lt;code&gt;string&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="4d3e5f86a6a3448482723c629b72cbcf08d2a6d1" translate="yes" xml:space="preserve">
          <source>Returns the string untouched if there is no match. If &lt;code&gt;match&lt;/code&gt; is an empty string (&lt;code&gt;&quot;&quot;&lt;/code&gt;), &lt;code&gt;replacement&lt;/code&gt; is just prepended to &lt;code&gt;string&lt;/code&gt;.</source>
          <target state="translated">일치하는 항목이 없으면 문자열을 그대로 반환합니다. 경우 &lt;code&gt;match&lt;/code&gt; 빈 문자열입니다 ( &lt;code&gt;&quot;&quot;&lt;/code&gt; ), &lt;code&gt;replacement&lt;/code&gt; 바로 앞에 추가됩니다 &lt;code&gt;string&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="99f109b4c1e9e2e52c16c8c6e0ba33b2337b1129" translate="yes" xml:space="preserve">
          <source>Returns the sum of all elements.</source>
          <target state="translated">모든 요소의 합을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="5446f0a929a51f2841c8d97a177322c6d4cfbd4b" translate="yes" xml:space="preserve">
          <source>Returns the tail of a list. Raises &lt;a href=&quot;argumenterror&quot;&gt;&lt;code&gt;ArgumentError&lt;/code&gt;&lt;/a&gt; if the list is empty.</source>
          <target state="translated">목록의 꼬리를 반환합니다. 레이즈 &lt;a href=&quot;argumenterror&quot;&gt; &lt;code&gt;ArgumentError&lt;/code&gt; &lt;/a&gt; 목록이 비어있는 경우.</target>
        </trans-unit>
        <trans-unit id="c9be2b1fad24de04c50b3e83a236b19a500bd708" translate="yes" xml:space="preserve">
          <source>Returns the task name for the given &lt;code&gt;module&lt;/code&gt;.</source>
          <target state="translated">주어진 &lt;code&gt;module&lt;/code&gt; 의 작업 이름을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="878347c3aa6513fbf6afa6efa6c7f012a2ebde56" translate="yes" xml:space="preserve">
          <source>Returns the thrown value or fails otherwise.</source>
          <target state="translated">던져진 값을 반환하거나 그렇지 않으면 실패합니다.</target>
        </trans-unit>
        <trans-unit id="76679b3900f0ba1621d3328c4d07b6237c72c826" translate="yes" xml:space="preserve">
          <source>Returns the underlying &lt;code&gt;re_pattern&lt;/code&gt; in the regular expression.</source>
          <target state="translated">정규 표현식에서 기본 &lt;code&gt;re_pattern&lt;/code&gt; 을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="8968b9f6847de7df218d57ed06876fcd4deefde7" translate="yes" xml:space="preserve">
          <source>Returns the user home directory (platform independent).</source>
          <target state="translated">사용자 홈 디렉토리를 리턴합니다 (플랫폼 독립적).</target>
        </trans-unit>
        <trans-unit id="f853f8018f651d849df46372217944c5cafdc33f" translate="yes" xml:space="preserve">
          <source>Returns the value for &lt;code&gt;key&lt;/code&gt; in &lt;code&gt;app&lt;/code&gt;'s environment in a tuple.</source>
          <target state="translated">튜플 에서 &lt;code&gt;app&lt;/code&gt; 환경의 &lt;code&gt;key&lt;/code&gt; 값을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="a25fac0ea4b17b37d92bb53583068e5149115241" translate="yes" xml:space="preserve">
          <source>Returns the value for &lt;code&gt;key&lt;/code&gt; in &lt;code&gt;app&lt;/code&gt;'s environment.</source>
          <target state="translated">&lt;code&gt;app&lt;/code&gt; 환경 에서 &lt;code&gt;key&lt;/code&gt; 값을 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="98a6e9fe912ad2fc1ebf1d97990bf4eace7713a9" translate="yes" xml:space="preserve">
          <source>Returns the value for &lt;code&gt;key&lt;/code&gt; in &lt;code&gt;app&lt;/code&gt;'s specification.</source>
          <target state="translated">&lt;code&gt;app&lt;/code&gt; 사양 에서 &lt;code&gt;key&lt;/code&gt; 값을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="4904ba9d019e50de81dadd2fd0f3950811aa6e11" translate="yes" xml:space="preserve">
          <source>Returns the value for the given &lt;code&gt;key&lt;/code&gt; in the process dictionary, or &lt;code&gt;default&lt;/code&gt; if &lt;code&gt;key&lt;/code&gt; is not set.</source>
          <target state="translated">프로세스 사전에서 지정된 &lt;code&gt;key&lt;/code&gt; 의 값을 리턴 하거나 &lt;code&gt;key&lt;/code&gt; 가 설정되지 않은 경우 &lt;code&gt;default&lt;/code&gt; 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="4b4cb0e2ce0546225daafc01a7abd95363859e47" translate="yes" xml:space="preserve">
          <source>Returns the value of the &lt;code&gt;n&lt;/code&gt;th expression in the history.</source>
          <target state="translated">히스토리에서 &lt;code&gt;n&lt;/code&gt; 번째 표현식 의 값을 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="d4c5eb060d7795d63f93a93d2174bfbde5eec930" translate="yes" xml:space="preserve">
          <source>Returns the value of the given environment variable or &lt;code&gt;:error&lt;/code&gt; if not found.</source>
          <target state="translated">주어진 환경 변수의 값을 반환하거나 찾지 못한 경우 &lt;code&gt;:error&lt;/code&gt; 를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="6d3c958f0d384e41e1fd39b3e1093c21e579bb87" translate="yes" xml:space="preserve">
          <source>Returns the value of the given environment variable or raises if not found.</source>
          <target state="translated">주어진 환경 변수의 값을 반환하거나 찾을 수없는 경우 증가합니다.</target>
        </trans-unit>
        <trans-unit id="fc426843775837bb9713393133e0f84dd5fa52c9" translate="yes" xml:space="preserve">
          <source>Returns the value of the given environment variable.</source>
          <target state="translated">주어진 환경 변수의 값을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="b17bccbe58f022f5360104153b5324a3a5f8ab53" translate="yes" xml:space="preserve">
          <source>Returns the value that was under &lt;code&gt;key&lt;/code&gt; in the process dictionary, or &lt;code&gt;nil&lt;/code&gt; if &lt;code&gt;key&lt;/code&gt; was not stored in the process dictionary.</source>
          <target state="translated">프로세스 사전 에서 &lt;code&gt;key&lt;/code&gt; 아래에 있던 값을 리턴 하거나 &lt;code&gt;key&lt;/code&gt; 가 프로세스 사전에 저장되지 않은 경우 &lt;code&gt;nil&lt;/code&gt; 을 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="4002ca69c8b4a4e8942a2a8ca79b1e4c4939052d" translate="yes" xml:space="preserve">
          <source>Returns the value under &lt;code&gt;key&lt;/code&gt; if there is such a key, or &lt;code&gt;default&lt;/code&gt; if &lt;code&gt;key&lt;/code&gt; is not found.</source>
          <target state="translated">이러한 &lt;code&gt;key&lt;/code&gt; 있으면 키 아래의 값을 반환 하거나 &lt;code&gt;key&lt;/code&gt; 를 찾지 못하면 &lt;code&gt;default&lt;/code&gt; 반환 합니다 .</target>
        </trans-unit>
        <trans-unit id="3af843cadbfac1113304e7db687b00b1758b0e54" translate="yes" xml:space="preserve">
          <source>Returns the version of the underlying Regex engine.</source>
          <target state="translated">기본 정규식 엔진의 버전을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="a5febd0aca2ae71b9183cb365b24eaa3298ba222" translate="yes" xml:space="preserve">
          <source>Returns whether a given &lt;code&gt;key&lt;/code&gt; exists in the given &lt;code&gt;keywords&lt;/code&gt;.</source>
          <target state="translated">주어진 &lt;code&gt;keywords&lt;/code&gt; 에 주어진 &lt;code&gt;key&lt;/code&gt; 가 있는지 여부를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="7d1348c5848b47392a61baf065679e3fe4bbd884" translate="yes" xml:space="preserve">
          <source>Returns whether the compilation environment is currently inside a guard.</source>
          <target state="translated">컴파일 환경이 현재 감시 내에 있는지 여부를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="d07dcf1758adbeddd9f6a8a1e7d76495004156ac" translate="yes" xml:space="preserve">
          <source>Returns whether the compilation environment is currently inside a match clause.</source>
          <target state="translated">컴파일 환경이 현재 일치 절 안에 있는지 여부를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="198fd42b2e9a3935326202ead8ca134f2cac7795" translate="yes" xml:space="preserve">
          <source>Returns whether the given &lt;code&gt;key&lt;/code&gt; exists in the given &lt;code&gt;map&lt;/code&gt;.</source>
          <target state="translated">지정된 &lt;code&gt;key&lt;/code&gt; 가 지정된 &lt;code&gt;map&lt;/code&gt; 존재 하는지를 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="8f15c934f199fc52996cd96ba7cb34c1dfc57796" translate="yes" xml:space="preserve">
          <source>Reverses the &lt;code&gt;enumerable&lt;/code&gt; in the range from initial &lt;code&gt;start_index&lt;/code&gt; through &lt;code&gt;count&lt;/code&gt; elements.</source>
          <target state="translated">초기 &lt;code&gt;start_index&lt;/code&gt; 에서 &lt;code&gt;count&lt;/code&gt; 요소 까지 범위에서 &lt;code&gt;enumerable&lt;/code&gt; 을 되돌 립니다.</target>
        </trans-unit>
        <trans-unit id="51ef45f336354a32dda3e205577483e8849e2250" translate="yes" xml:space="preserve">
          <source>Reverses the elements in &lt;code&gt;enumerable&lt;/code&gt;, appends the &lt;code&gt;tail&lt;/code&gt;, and returns it as a list.</source>
          <target state="translated">요소를 &lt;code&gt;enumerable&lt;/code&gt; 로 되돌리고 &lt;code&gt;tail&lt;/code&gt; 을 추가 한 다음 목록으로 반환합니다.</target>
        </trans-unit>
        <trans-unit id="b84612001a4f1eaa6c97171fdc0b0c9f2ef21eae" translate="yes" xml:space="preserve">
          <source>Reverses the graphemes in given string.</source>
          <target state="translated">주어진 문자열에서 그래프를 반전시킵니다.</target>
        </trans-unit>
        <trans-unit id="da502a644e54b1ce6f094fca466290322f89787d" translate="yes" xml:space="preserve">
          <source>Right to left</source>
          <target state="translated">오른쪽에서 왼쪽으로</target>
        </trans-unit>
        <trans-unit id="8565eb000a57c1167c9162526ae9f7f67679477d" translate="yes" xml:space="preserve">
          <source>Rounds a float to the largest number less than or equal to &lt;code&gt;num&lt;/code&gt;.</source>
          <target state="translated">float를 &lt;code&gt;num&lt;/code&gt; 이하의 가장 큰 숫자로 반올림합니다 .</target>
        </trans-unit>
        <trans-unit id="d4d7ddf396c77d3a28aacfec25345f3233ed75ed" translate="yes" xml:space="preserve">
          <source>Rounds a float to the smallest integer greater than or equal to &lt;code&gt;num&lt;/code&gt;.</source>
          <target state="translated">float를 &lt;code&gt;num&lt;/code&gt; 보다 크거나 같은 가장 작은 정수로 올림 합니다.</target>
        </trans-unit>
        <trans-unit id="f2bfe2b43d2e555e7e1fc1953a64ed430131021f" translate="yes" xml:space="preserve">
          <source>Rounds a floating-point value to an arbitrary number of fractional digits (between 0 and 15).</source>
          <target state="translated">부동 소수점 값을 임의의 소수 자릿수 (0과 15 사이)로 반올림합니다.</target>
        </trans-unit>
        <trans-unit id="9740f5d1fe5f451949c9d945ffaea21c8d9432a4" translate="yes" xml:space="preserve">
          <source>Rounds a number to the nearest integer.</source>
          <target state="translated">숫자를 가장 가까운 정수로 반올림합니다.</target>
        </trans-unit>
        <trans-unit id="394ff7414ed58e9bb399195e5ae3da301b62e17d" translate="yes" xml:space="preserve">
          <source>Routing layer</source>
          <target state="translated">라우팅 레이어</target>
        </trans-unit>
        <trans-unit id="2cab34e43d5bf64f55c18070062b1bc29de8d797" translate="yes" xml:space="preserve">
          <source>Run &lt;a href=&quot;https://hexdocs.pm/mix/Mix.Tasks.Test.html&quot;&gt;&lt;code&gt;mix help test&lt;/code&gt;&lt;/a&gt; for more information on how to run filters via Mix.</source>
          <target state="translated">&lt;a href=&quot;https://hexdocs.pm/mix/Mix.Tasks.Test.html&quot;&gt; &lt;code&gt;mix help test&lt;/code&gt; &lt;/a&gt; 를 통해 필터를 실행하는 방법에 대한 자세한 정보는 믹스 도움말 테스트 를 실행하십시오 .</target>
        </trans-unit>
        <trans-unit id="7f49ea60a8e2caa16528ffe5a08a1e644ee38ac0" translate="yes" xml:space="preserve">
          <source>Run &lt;code&gt;iex -S mix&lt;/code&gt; so we can give our dynamic supervisor a try:</source>
          <target state="translated">&lt;code&gt;iex -S mix&lt;/code&gt; 를 실행 하여 동적 관리자에게 다음을 시도하십시오.</target>
        </trans-unit>
        <trans-unit id="858865eeebb714c4204dbc57a8ddb8b571d4940a" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://hexdocs.pm/mix/Mix.Tasks.Format.html&quot;&gt;code formatter&lt;/a&gt;. The code formatter formats your code according to a consistent style shared by your library and the whole community, making it easier for other developers to understand your code and contribute.</source>
          <target state="translated">&lt;a href=&quot;https://hexdocs.pm/mix/Mix.Tasks.Format.html&quot;&gt;코드 포맷터를&lt;/a&gt; 실행하십시오 . 코드 포맷터는 라이브러리와 전체 커뮤니티가 공유하는 일관된 스타일에 따라 코드를 형식화하므로 다른 개발자가 코드를 이해하고 기여할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2561b01d11beb7887fdb55f789d105da46475bd7" translate="yes" xml:space="preserve">
          <source>Run the test suite and the doctest should fail:</source>
          <target state="translated">테스트 스위트를 실행하면 doctest가 실패해야합니다.</target>
        </trans-unit>
        <trans-unit id="502cb8247a0563cd3767c7c278a608b8f2c8d52e" translate="yes" xml:space="preserve">
          <source>Run the tests and they should all pass!</source>
          <target state="translated">테스트를 실행하면 모두 통과해야합니다!</target>
        </trans-unit>
        <trans-unit id="abce5e360ddf9e955294138f90e126f096dcc734" translate="yes" xml:space="preserve">
          <source>Running IEx in the directory where the above &lt;code&gt;.iex.exs&lt;/code&gt; file is located results in:</source>
          <target state="translated">위의 &lt;code&gt;.iex.exs&lt;/code&gt; 파일이 있는 디렉토리에서 IEx를 실행하면 다음이 발생합니다 .</target>
        </trans-unit>
        <trans-unit id="e8a30d8ac7729deb2e42d58fc103a0fb057a8270" translate="yes" xml:space="preserve">
          <source>Running commands</source>
          <target state="translated">명령 실행</target>
        </trans-unit>
        <trans-unit id="e1e0218f656dddcbb2f3c0fcf7777db3f26647dd" translate="yes" xml:space="preserve">
          <source>Running scripts</source>
          <target state="translated">스크립트 실행</target>
        </trans-unit>
        <trans-unit id="be64280ade23e74f60a4ce8d57444019c4382156" translate="yes" xml:space="preserve">
          <source>Running tests</source>
          <target state="translated">테스트 실행</target>
        </trans-unit>
        <trans-unit id="ae6f4b64040963769b7f32a98c16f274e7e2534e" translate="yes" xml:space="preserve">
          <source>Running the formatter</source>
          <target state="translated">포맷터 실행</target>
        </trans-unit>
        <trans-unit id="2ad21e0961858c4a176621a74bbb6c251ecc92f2" translate="yes" xml:space="preserve">
          <source>Runs a &lt;code&gt;task&lt;/code&gt; with the given &lt;code&gt;args&lt;/code&gt;.</source>
          <target state="translated">주어진 &lt;code&gt;args&lt;/code&gt; 로 &lt;code&gt;task&lt;/code&gt; 을 실행합니다 .</target>
        </trans-unit>
        <trans-unit id="27f5a1001c04b3d326d3130b840b82e3d8b78086" translate="yes" xml:space="preserve">
          <source>Runs the given &lt;code&gt;fun&lt;/code&gt; inside the given project.</source>
          <target state="translated">주어진 프로젝트 내 에서 주어진 &lt;code&gt;fun&lt;/code&gt; 실행합니다 .</target>
        </trans-unit>
        <trans-unit id="fc60430f8b509c1280cf05d516e5e479f037c43d" translate="yes" xml:space="preserve">
          <source>Runs the given stream.</source>
          <target state="translated">주어진 스트림을 실행합니다.</target>
        </trans-unit>
        <trans-unit id="d815a8f6506a6d2030fc71c5314a4b7cbc242ba3" translate="yes" xml:space="preserve">
          <source>Runs the regular expression against the given string until the first match. It returns a list with all captures or &lt;code&gt;nil&lt;/code&gt; if no match occurred.</source>
          <target state="translated">처음 일치 할 때까지 주어진 문자열에 대해 정규식을 실행합니다. 모든 캡처가 포함 된 목록을 반환하거나 일치하는 항목이 없으면 &lt;code&gt;nil&lt;/code&gt; 을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="e5ffbfd911e0b566d41b50bdfa640dfbca592312" translate="yes" xml:space="preserve">
          <source>Runs the tests for a project.</source>
          <target state="translated">프로젝트 테스트를 실행합니다.</target>
        </trans-unit>
        <trans-unit id="119006df7a024a81cf340543ca824cea7d8efa82" translate="yes" xml:space="preserve">
          <source>Runs the tests. It is invoked automatically if ExUnit is started via &lt;a href=&quot;#start/1&quot;&gt;&lt;code&gt;start/1&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">테스트를 실행합니다. ExUnit이 &lt;a href=&quot;#start/1&quot;&gt; &lt;code&gt;start/1&lt;/code&gt; 을&lt;/a&gt; 통해 시작 되면 자동으로 호출됩니다 .</target>
        </trans-unit>
        <trans-unit id="222cad2bd37e45b5f33d5d967590f4b613622bfd" translate="yes" xml:space="preserve">
          <source>Runtime Configuration</source>
          <target state="translated">런타임 구성</target>
        </trans-unit>
        <trans-unit id="1582600625fd381ca554979f70e7434d87fa5103" translate="yes" xml:space="preserve">
          <source>Runtime configuration</source>
          <target state="translated">런타임 구성</target>
        </trans-unit>
        <trans-unit id="bef3d737e1cd6b54fa5c0c009af907047c31c70e" translate="yes" xml:space="preserve">
          <source>Runtime configuration - can be set before the &lt;code&gt;:logger&lt;/code&gt; application is started, but may be changed during runtime</source>
          <target state="translated">런타임 구성- &lt;code&gt;:logger&lt;/code&gt; 응용 프로그램을 시작 하기 전에 설정할 수 있지만 런타임 중에 변경 될 수 있습니다</target>
        </trans-unit>
        <trans-unit id="f1be8bbdfa39d80e63d75464d871ca752fb54889" translate="yes" xml:space="preserve">
          <source>RuntimeError</source>
          <target state="translated">RuntimeError</target>
        </trans-unit>
        <trans-unit id="2367bc1690bc7150c00e3cc3a74e421b0f5a75af" translate="yes" xml:space="preserve">
          <source>RuntimeError &lt;small&gt;exception&lt;/small&gt;</source>
          <target state="translated">RuntimeError &lt;small&gt;예외&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="48afa22bba76fdc43e8ef8f37036831d587b298b" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;#cast/2&quot;&gt;&lt;code&gt;cast/2&lt;/code&gt;&lt;/a&gt; but a module, function, and arguments are expected instead of an anonymous function. The state is added as first argument to the given list of arguments.</source>
          <target state="translated">&lt;a href=&quot;#cast/2&quot;&gt; &lt;code&gt;cast/2&lt;/code&gt; &lt;/a&gt; 와 동일 하지만 익명 함수 대신 모듈, 함수 및 인수가 필요합니다. 주어진 인수 목록에 상태가 첫 번째 인수로 추가됩니다.</target>
        </trans-unit>
        <trans-unit id="8b6186d6c9aeff961c16e5da9e96a9c93e25a101" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;#chgrp/2&quot;&gt;&lt;code&gt;chgrp/2&lt;/code&gt;&lt;/a&gt;, but raises a &lt;a href=&quot;file.error&quot;&gt;&lt;code&gt;File.Error&lt;/code&gt;&lt;/a&gt; exception in case of failure. Otherwise &lt;code&gt;:ok&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;#chgrp/2&quot;&gt; &lt;code&gt;chgrp/2&lt;/code&gt; &lt;/a&gt; 와 동일 하지만 실패시 &lt;a href=&quot;file.error&quot;&gt; &lt;code&gt;File.Error&lt;/code&gt; &lt;/a&gt; 예외가 발생합니다. 그렇지 않으면 &lt;code&gt;:ok&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="d5551163d02c8194e2886a885aa06654149c83ba" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;#chmod/2&quot;&gt;&lt;code&gt;chmod/2&lt;/code&gt;&lt;/a&gt;, but raises a &lt;a href=&quot;file.error&quot;&gt;&lt;code&gt;File.Error&lt;/code&gt;&lt;/a&gt; exception in case of failure. Otherwise &lt;code&gt;:ok&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;#chmod/2&quot;&gt; &lt;code&gt;chmod/2&lt;/code&gt; &lt;/a&gt; 와 동일 하지만 실패시 &lt;a href=&quot;file.error&quot;&gt; &lt;code&gt;File.Error&lt;/code&gt; &lt;/a&gt; 예외가 발생합니다. 그렇지 않으면 &lt;code&gt;:ok&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="452a2701829e8135c60bab1ba0681e8954ffe2b7" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;#chown/2&quot;&gt;&lt;code&gt;chown/2&lt;/code&gt;&lt;/a&gt;, but raises a &lt;a href=&quot;file.error&quot;&gt;&lt;code&gt;File.Error&lt;/code&gt;&lt;/a&gt; exception in case of failure. Otherwise &lt;code&gt;:ok&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;#chown/2&quot;&gt; &lt;code&gt;chown/2&lt;/code&gt; &lt;/a&gt; 와 동일 하지만 실패시 &lt;a href=&quot;file.error&quot;&gt; &lt;code&gt;File.Error&lt;/code&gt; &lt;/a&gt; 예외가 발생합니다. 그렇지 않으면 &lt;code&gt;:ok&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="e0949047f6cf1d6ba67f61109f1b819c88cfe7a7" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;#defrecord/3&quot;&gt;&lt;code&gt;defrecord/3&lt;/code&gt;&lt;/a&gt; but generates private macros.</source>
          <target state="translated">&lt;a href=&quot;#defrecord/3&quot;&gt; &lt;code&gt;defrecord/3&lt;/code&gt; &lt;/a&gt; 와 동일 하지만 개인용 매크로를 생성합니다.</target>
        </trans-unit>
        <trans-unit id="8e9194a522fb8fb657e281729e962d0ed06857f7" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;#get/0&quot;&gt;&lt;code&gt;get/0&lt;/code&gt;&lt;/a&gt;, but raises an exception if there is no current project.</source>
          <target state="translated">&lt;a href=&quot;#get/0&quot;&gt; &lt;code&gt;get/0&lt;/code&gt; &lt;/a&gt; 과 동일 하지만 현재 프로젝트가 없으면 예외가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="1a5ebf1a38b49af9938b5e72845065800dbdcff3" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;#get/3&quot;&gt;&lt;code&gt;get/3&lt;/code&gt;&lt;/a&gt; but a module, function, and arguments are expected instead of an anonymous function. The state is added as first argument to the given list of arguments.</source>
          <target state="translated">&lt;a href=&quot;#get/3&quot;&gt; &lt;code&gt;get/3&lt;/code&gt; &lt;/a&gt; 와 동일 하지만 익명 함수 대신 모듈, 함수 및 인수가 필요합니다. 주어진 인수 목록에 상태가 첫 번째 인수로 추가됩니다.</target>
        </trans-unit>
        <trans-unit id="454d80b60394294842383e45eb87437d14c3f75a" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;#get_and_update/3&quot;&gt;&lt;code&gt;get_and_update/3&lt;/code&gt;&lt;/a&gt; but a module, function, and arguments are expected instead of an anonymous function. The state is added as first argument to the given list of arguments.</source>
          <target state="translated">&lt;a href=&quot;#get_and_update/3&quot;&gt; &lt;code&gt;get_and_update/3&lt;/code&gt; &lt;/a&gt; 와 동일 하지만 익명 함수 대신 모듈, 함수 및 인수가 필요합니다. 주어진 인수 목록에 상태가 첫 번째 인수로 추가됩니다.</target>
        </trans-unit>
        <trans-unit id="51fc3a99abe232080d3ba08eef47a68cfc7ea01d" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;#get_env/1&quot;&gt;&lt;code&gt;get_env/1&lt;/code&gt;&lt;/a&gt; but raises instead of returning &lt;code&gt;nil&lt;/code&gt; when the variable is not set.</source>
          <target state="translated">&lt;a href=&quot;#get_env/1&quot;&gt; &lt;code&gt;get_env/1&lt;/code&gt; &lt;/a&gt; 과 동일 하지만 변수가 설정되지 않은 경우 &lt;code&gt;nil&lt;/code&gt; 을 반환하는 대신 발생합니다.</target>
        </trans-unit>
        <trans-unit id="3c7f2b70e8cfe5f2634b92d0a6549de81f8bd0c0" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;#ln/2&quot;&gt;&lt;code&gt;ln/2&lt;/code&gt;&lt;/a&gt; but raises a &lt;a href=&quot;file.linkerror&quot;&gt;&lt;code&gt;File.LinkError&lt;/code&gt;&lt;/a&gt; exception if it fails. Returns &lt;code&gt;:ok&lt;/code&gt; otherwise.</source>
          <target state="translated">&lt;a href=&quot;#ln/2&quot;&gt; &lt;code&gt;ln/2&lt;/code&gt; &lt;/a&gt; 와 동일 하지만 실패하면 &lt;a href=&quot;file.linkerror&quot;&gt; &lt;code&gt;File.LinkError&lt;/code&gt; &lt;/a&gt; 예외가 발생합니다. 반환 &lt;code&gt;:ok&lt;/code&gt; , 그렇지.</target>
        </trans-unit>
        <trans-unit id="62ec00d18d6c7c4096134aa08579c416180f7b6c" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;#ln_s/2&quot;&gt;&lt;code&gt;ln_s/2&lt;/code&gt;&lt;/a&gt; but raises a &lt;a href=&quot;file.linkerror&quot;&gt;&lt;code&gt;File.LinkError&lt;/code&gt;&lt;/a&gt; exception if it fails. Returns &lt;code&gt;:ok&lt;/code&gt; otherwise.</source>
          <target state="translated">&lt;a href=&quot;#ln_s/2&quot;&gt; &lt;code&gt;ln_s/2&lt;/code&gt; &lt;/a&gt; 와 동일 하지만 실패하면 &lt;a href=&quot;file.linkerror&quot;&gt; &lt;code&gt;File.LinkError&lt;/code&gt; &lt;/a&gt; 예외가 발생합니다. 반환 &lt;code&gt;:ok&lt;/code&gt; , 그렇지.</target>
        </trans-unit>
        <trans-unit id="98a4a1fa45aa8e47b2fe2b04f4757dac9baf83e3" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;#lstat/2&quot;&gt;&lt;code&gt;lstat/2&lt;/code&gt;&lt;/a&gt; but returns the &lt;a href=&quot;file.stat&quot;&gt;&lt;code&gt;File.Stat&lt;/code&gt;&lt;/a&gt; struct directly, or raises a &lt;a href=&quot;file.error&quot;&gt;&lt;code&gt;File.Error&lt;/code&gt;&lt;/a&gt; exception if an error is returned.</source>
          <target state="translated">&lt;a href=&quot;#lstat/2&quot;&gt; &lt;code&gt;lstat/2&lt;/code&gt; &lt;/a&gt; 와 동일 하지만 &lt;a href=&quot;file.stat&quot;&gt; &lt;code&gt;File.Stat&lt;/code&gt; &lt;/a&gt; 구조체를 직접 반환 하거나 오류가 반환되면 &lt;a href=&quot;file.error&quot;&gt; &lt;code&gt;File.Error&lt;/code&gt; &lt;/a&gt; 예외를 발생 시킵니다 .</target>
        </trans-unit>
        <trans-unit id="5a1ac89b3d9b7123dddd932cfa309cb1e771fec8" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;#mkdir/1&quot;&gt;&lt;code&gt;mkdir/1&lt;/code&gt;&lt;/a&gt;, but raises a &lt;a href=&quot;file.error&quot;&gt;&lt;code&gt;File.Error&lt;/code&gt;&lt;/a&gt; exception in case of failure. Otherwise &lt;code&gt;:ok&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;#mkdir/1&quot;&gt; &lt;code&gt;mkdir/1&lt;/code&gt; &lt;/a&gt; 과 동일 하지만 실패시 &lt;a href=&quot;file.error&quot;&gt; &lt;code&gt;File.Error&lt;/code&gt; &lt;/a&gt; 예외가 발생합니다. 그렇지 않으면 &lt;code&gt;:ok&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="36da26cc0d9ef98b6d7a837321a0b850aa977e10" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;#mkdir_p/1&quot;&gt;&lt;code&gt;mkdir_p/1&lt;/code&gt;&lt;/a&gt;, but raises a &lt;a href=&quot;file.error&quot;&gt;&lt;code&gt;File.Error&lt;/code&gt;&lt;/a&gt; exception in case of failure. Otherwise &lt;code&gt;:ok&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;#mkdir_p/1&quot;&gt; &lt;code&gt;mkdir_p/1&lt;/code&gt; &lt;/a&gt; 과 동일 하지만 실패시 &lt;a href=&quot;file.error&quot;&gt; &lt;code&gt;File.Error&lt;/code&gt; &lt;/a&gt; 예외가 발생합니다. 그렇지 않으면 &lt;code&gt;:ok&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="9f817cb5944a5943ab83623cde62144c04d14cd3" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;#read_link/1&quot;&gt;&lt;code&gt;read_link/1&lt;/code&gt;&lt;/a&gt; but returns the target directly, or raises a &lt;a href=&quot;file.error&quot;&gt;&lt;code&gt;File.Error&lt;/code&gt;&lt;/a&gt; exception if an error is returned.</source>
          <target state="translated">&lt;a href=&quot;#read_link/1&quot;&gt; &lt;code&gt;read_link/1&lt;/code&gt; &lt;/a&gt; 과 동일 하지만 대상을 직접 반환하거나 오류가 반환되면 &lt;a href=&quot;file.error&quot;&gt; &lt;code&gt;File.Error&lt;/code&gt; &lt;/a&gt; 예외를 발생 시킵니다 .</target>
        </trans-unit>
        <trans-unit id="d59c6eed3d63d4d8a3c113ef08c30a24189a97d7" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;#rm/1&quot;&gt;&lt;code&gt;rm/1&lt;/code&gt;&lt;/a&gt;, but raises a &lt;a href=&quot;file.error&quot;&gt;&lt;code&gt;File.Error&lt;/code&gt;&lt;/a&gt; exception in case of failure. Otherwise &lt;code&gt;:ok&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;#rm/1&quot;&gt; &lt;code&gt;rm/1&lt;/code&gt; &lt;/a&gt; 과 동일 하지만 실패시 &lt;a href=&quot;file.error&quot;&gt; &lt;code&gt;File.Error&lt;/code&gt; &lt;/a&gt; 예외가 발생합니다. 그렇지 않으면 &lt;code&gt;:ok&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="cb0d2ee4285409ea9feb23a66cf1147cd51c9979" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;#rm_rf/1&quot;&gt;&lt;code&gt;rm_rf/1&lt;/code&gt;&lt;/a&gt; but raises a &lt;a href=&quot;file.error&quot;&gt;&lt;code&gt;File.Error&lt;/code&gt;&lt;/a&gt; exception in case of failures, otherwise the list of files or directories removed.</source>
          <target state="translated">&lt;a href=&quot;#rm_rf/1&quot;&gt; &lt;code&gt;rm_rf/1&lt;/code&gt; &lt;/a&gt; 과 동일 하지만 실패시 &lt;a href=&quot;file.error&quot;&gt; &lt;code&gt;File.Error&lt;/code&gt; &lt;/a&gt; 예외가 발생합니다. 그렇지 않으면 파일 또는 디렉토리 목록이 제거됩니다.</target>
        </trans-unit>
        <trans-unit id="ca1993cb0cbd43a38f474d1155f5b7b631b2f919" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;#rmdir/1&quot;&gt;&lt;code&gt;rmdir/1&lt;/code&gt;&lt;/a&gt;, but raises a &lt;a href=&quot;file.error&quot;&gt;&lt;code&gt;File.Error&lt;/code&gt;&lt;/a&gt; exception in case of failure. Otherwise &lt;code&gt;:ok&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;#rmdir/1&quot;&gt; &lt;code&gt;rmdir/1&lt;/code&gt; &lt;/a&gt; 과 동일 하지만 실패시 &lt;a href=&quot;file.error&quot;&gt; &lt;code&gt;File.Error&lt;/code&gt; &lt;/a&gt; 예외가 발생합니다. 그렇지 않으면 &lt;code&gt;:ok&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="575d3a4dccc355486708c0f537c0716004925b5b" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;#run/3&quot;&gt;&lt;code&gt;run/3&lt;/code&gt;&lt;/a&gt;, but scans the target several times collecting all matches of the regular expression.</source>
          <target state="translated">&lt;a href=&quot;#run/3&quot;&gt; &lt;code&gt;run/3&lt;/code&gt; &lt;/a&gt; 과 동일 하지만 정규식의 모든 일치 항목을 수집하여 대상을 여러 번 스캔합니다.</target>
        </trans-unit>
        <trans-unit id="b77457b6b2b1ee2217867a7c46a67495e6e62c68" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;#start/2&quot;&gt;&lt;code&gt;start/2&lt;/code&gt;&lt;/a&gt; but also starts the applications listed under &lt;code&gt;:applications&lt;/code&gt; in the &lt;code&gt;.app&lt;/code&gt; file in case they were not previously started.</source>
          <target state="translated">동일 &lt;a href=&quot;#start/2&quot;&gt; &lt;code&gt;start/2&lt;/code&gt; &lt;/a&gt; 도하지만 아래에 나열된 응용 프로그램 시작 &lt;code&gt;:applications&lt;/code&gt; 에 &lt;code&gt;.app&lt;/code&gt; 경우 파일을 그들은 이전에 시작되지 않았다.</target>
        </trans-unit>
        <trans-unit id="e78793e6d643221f3a0ae420ea08015425edcec9" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;#start/2&quot;&gt;&lt;code&gt;start/2&lt;/code&gt;&lt;/a&gt; but returns &lt;code&gt;:ok&lt;/code&gt; if the application was already started. This is useful in scripts and in test setup, where test applications need to be explicitly started:</source>
          <target state="translated">응용 프로그램이 이미 시작된 경우 &lt;a href=&quot;#start/2&quot;&gt; &lt;code&gt;start/2&lt;/code&gt; &lt;/a&gt; 와 동일 하지만 &lt;code&gt;:ok&lt;/code&gt; 를 반환합니다 . 이는 테스트 응용 프로그램을 명시 적으로 시작해야하는 스크립트 및 테스트 설정에 유용합니다.</target>
        </trans-unit>
        <trans-unit id="0a3828c1ba3c6005e9c3108c08cdb5024ed08348" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;#start_link/2&quot;&gt;&lt;code&gt;start_link/2&lt;/code&gt;&lt;/a&gt; but a module, function, and arguments are expected instead of an anonymous function; &lt;code&gt;fun&lt;/code&gt; in &lt;code&gt;module&lt;/code&gt; will be called with the given arguments &lt;code&gt;args&lt;/code&gt; to initialize the state.</source>
          <target state="translated">&lt;a href=&quot;#start_link/2&quot;&gt; &lt;code&gt;start_link/2&lt;/code&gt; &lt;/a&gt; 와 동일 하지만 익명 함수 대신 모듈, 함수 및 인수가 필요합니다. &lt;code&gt;fun&lt;/code&gt; 의 &lt;code&gt;module&lt;/code&gt; 주어진 인수로 호출됩니다 &lt;code&gt;args&lt;/code&gt; 상태를 초기화 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a7642aeb9f07cd0551ad686039cb0019e61b10b4" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;#start_supervised/2&quot;&gt;&lt;code&gt;start_supervised/2&lt;/code&gt;&lt;/a&gt; but returns the PID on success and raises if not started properly.</source>
          <target state="translated">&lt;a href=&quot;#start_supervised/2&quot;&gt; &lt;code&gt;start_supervised/2&lt;/code&gt; &lt;/a&gt; 와 동일 하지만 성공시 PID를 반환하고 올바르게 시작되지 않으면 상승합니다.</target>
        </trans-unit>
        <trans-unit id="b74921cc1238626c0cdfe7d517884a5434d9754d" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;#stat/2&quot;&gt;&lt;code&gt;stat/2&lt;/code&gt;&lt;/a&gt; but returns the &lt;a href=&quot;file.stat&quot;&gt;&lt;code&gt;File.Stat&lt;/code&gt;&lt;/a&gt; directly, or raises a &lt;a href=&quot;file.error&quot;&gt;&lt;code&gt;File.Error&lt;/code&gt;&lt;/a&gt; exception if an error is returned.</source>
          <target state="translated">&lt;a href=&quot;#stat/2&quot;&gt; &lt;code&gt;stat/2&lt;/code&gt; &lt;/a&gt; 와 동일 하지만 &lt;a href=&quot;file.stat&quot;&gt; &lt;code&gt;File.Stat&lt;/code&gt; 를&lt;/a&gt; 직접 반환 하거나 오류가 반환되면 &lt;a href=&quot;file.error&quot;&gt; &lt;code&gt;File.Error&lt;/code&gt; &lt;/a&gt; 예외를 발생 시킵니다 .</target>
        </trans-unit>
        <trans-unit id="752522d479f590f393198cc7a71e949163e1bfc7" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;#tmp_dir/0&quot;&gt;&lt;code&gt;tmp_dir/0&lt;/code&gt;&lt;/a&gt; but raises &lt;a href=&quot;runtimeerror&quot;&gt;&lt;code&gt;RuntimeError&lt;/code&gt;&lt;/a&gt; instead of returning &lt;code&gt;nil&lt;/code&gt; if no temp dir is set.</source>
          <target state="translated">&lt;a href=&quot;#tmp_dir/0&quot;&gt; &lt;code&gt;tmp_dir/0&lt;/code&gt; &lt;/a&gt; 과 동일 하지만 temp dir이 설정되어 있지 않으면 &lt;code&gt;nil&lt;/code&gt; 을 반환하는 대신 &lt;a href=&quot;runtimeerror&quot;&gt; &lt;code&gt;RuntimeError&lt;/code&gt; &lt;/a&gt; 가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="0f0e9ffc8fa804b8724f92c838bc286537c2fe1b" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;#touch/2&quot;&gt;&lt;code&gt;touch/2&lt;/code&gt;&lt;/a&gt; but raises a &lt;a href=&quot;file.error&quot;&gt;&lt;code&gt;File.Error&lt;/code&gt;&lt;/a&gt; exception if it fails. Returns &lt;code&gt;:ok&lt;/code&gt; otherwise.</source>
          <target state="translated">&lt;a href=&quot;#touch/2&quot;&gt; &lt;code&gt;touch/2&lt;/code&gt; &lt;/a&gt; 와 동일 하지만 실패하면 &lt;a href=&quot;file.error&quot;&gt; &lt;code&gt;File.Error&lt;/code&gt; &lt;/a&gt; 예외가 발생합니다. 반환 &lt;code&gt;:ok&lt;/code&gt; , 그렇지.</target>
        </trans-unit>
        <trans-unit id="f77f681371830c84b3006064d21f15db82e03e0f" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;#update/3&quot;&gt;&lt;code&gt;update/3&lt;/code&gt;&lt;/a&gt; but a module, function, and arguments are expected instead of an anonymous function. The state is added as first argument to the given list of arguments.</source>
          <target state="translated">&lt;a href=&quot;#update/3&quot;&gt; &lt;code&gt;update/3&lt;/code&gt; &lt;/a&gt; 와 동일 하지만 익명 함수 대신 모듈, 함수 및 인수가 필요합니다. 주어진 인수 목록에 상태가 첫 번째 인수로 추가됩니다.</target>
        </trans-unit>
        <trans-unit id="66821177dd6aa530fcb0000506d72a8e2ab408e7" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;#user_home/0&quot;&gt;&lt;code&gt;user_home/0&lt;/code&gt;&lt;/a&gt; but raises &lt;a href=&quot;runtimeerror&quot;&gt;&lt;code&gt;RuntimeError&lt;/code&gt;&lt;/a&gt; instead of returning &lt;code&gt;nil&lt;/code&gt; if no user home is set.</source>
          <target state="translated">&lt;a href=&quot;#user_home/0&quot;&gt; &lt;code&gt;user_home/0&lt;/code&gt; &lt;/a&gt; 과 동일 하지만 사용자 홈이 설정되어 있지 않으면 &lt;code&gt;nil&lt;/code&gt; 을 반환하는 대신 &lt;a href=&quot;runtimeerror&quot;&gt; &lt;code&gt;RuntimeError&lt;/code&gt; &lt;/a&gt; 가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="8977282b08efdcece77456c7255cb72c1b1e4397" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;#write/3&quot;&gt;&lt;code&gt;write/3&lt;/code&gt;&lt;/a&gt; but raises a &lt;a href=&quot;file.error&quot;&gt;&lt;code&gt;File.Error&lt;/code&gt;&lt;/a&gt; exception if it fails. Returns &lt;code&gt;:ok&lt;/code&gt; otherwise.</source>
          <target state="translated">&lt;a href=&quot;#write/3&quot;&gt; &lt;code&gt;write/3&lt;/code&gt; &lt;/a&gt; 와 동일 하지만 실패하면 &lt;a href=&quot;file.error&quot;&gt; &lt;code&gt;File.Error&lt;/code&gt; &lt;/a&gt; 예외가 발생합니다. 반환 &lt;code&gt;:ok&lt;/code&gt; , 그렇지.</target>
        </trans-unit>
        <trans-unit id="0e1bb5e835ea84efb6ed3926f6ca1a526b10413b" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;#write_stat/3&quot;&gt;&lt;code&gt;write_stat/3&lt;/code&gt;&lt;/a&gt; but raises a &lt;a href=&quot;file.error&quot;&gt;&lt;code&gt;File.Error&lt;/code&gt;&lt;/a&gt; exception if it fails. Returns &lt;code&gt;:ok&lt;/code&gt; otherwise.</source>
          <target state="translated">&lt;a href=&quot;#write_stat/3&quot;&gt; &lt;code&gt;write_stat/3&lt;/code&gt; &lt;/a&gt; 와 동일 하지만 실패하면 &lt;a href=&quot;file.error&quot;&gt; &lt;code&gt;File.Error&lt;/code&gt; &lt;/a&gt; 예외가 발생합니다. 반환 &lt;code&gt;:ok&lt;/code&gt; , 그렇지.</target>
        </trans-unit>
        <trans-unit id="0e420af5a80458e93aaceadae51899a9fda1e40e" translate="yes" xml:space="preserve">
          <source>Same as &lt;code&gt;list(:visible)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;list(:visible)&lt;/code&gt; 과 동일 합니다 .</target>
        </trans-unit>
        <trans-unit id="72636a9e74014e05a068fdeb4cbbbe0b8cdb277c" translate="yes" xml:space="preserve">
          <source>Sample config provider</source>
          <target state="translated">샘플 구성 제공자</target>
        </trans-unit>
        <trans-unit id="96628af1c348f649b32608354d505436e3d1b258" translate="yes" xml:space="preserve">
          <source>Save it as &lt;code&gt;simple.exs&lt;/code&gt; and execute it with &lt;code&gt;elixir&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;simple.exs&lt;/code&gt; 로 저장하고 &lt;code&gt;elixir&lt;/code&gt; 로 실행하십시오 :</target>
        </trans-unit>
        <trans-unit id="1469fbd916831395b6490858a3b537c06e6af8b1" translate="yes" xml:space="preserve">
          <source>Say we have a &lt;code&gt;LousyCalculator&lt;/code&gt; module, which performs the usual arithmetic operations (sum, product, and so on) but, instead of returning numbers, it returns tuples with the result of an operation as the first element and a random remark as the second element.</source>
          <target state="translated">일반적인 산술 연산 (합계, 곱 등)을 수행 하는 &lt;code&gt;LousyCalculator&lt;/code&gt; 모듈이 있지만 숫자를 반환하는 대신 연산 결과를 첫 번째 요소로, 튜플을 두 번째 요소로 반환한다고 가정합니다. .</target>
        </trans-unit>
        <trans-unit id="97a0b16b16a4b9ffa852bc90badc2708b654ea72" translate="yes" xml:space="preserve">
          <source>Say we want to implement a bunch of parsers, each parsing structured data: for example, a JSON parser and a MessagePack parser. Each of these two parsers will &lt;em&gt;behave&lt;/em&gt; the same way: both will provide a &lt;code&gt;parse/1&lt;/code&gt; function and an &lt;code&gt;extensions/0&lt;/code&gt; function. The &lt;code&gt;parse/1&lt;/code&gt; function will return an Elixir representation of the structured data, while the &lt;code&gt;extensions/0&lt;/code&gt; function will return a list of file extensions that can be used for each type of data (e.g., &lt;code&gt;.json&lt;/code&gt; for JSON files).</source>
          <target state="translated">JSON 구문 분석기 및 MessagePack 구문 분석기와 같이 각각 구문 분석 된 구조화 된 데이터 인 여러 구문 분석기를 구현하려고한다고 가정하십시오. 이 두 파서는 각각 같은 방식으로 &lt;em&gt;작동&lt;/em&gt; 합니다. 둘 다 &lt;code&gt;parse/1&lt;/code&gt; 기능과 &lt;code&gt;extensions/0&lt;/code&gt; 기능을 제공합니다. &lt;code&gt;parse/1&lt;/code&gt; 그동안 함수 구조화 데이터 엘릭서 표현을 반환 &lt;code&gt;extensions/0&lt;/code&gt; 함수가 각각의 데이터 타입에 이용 될 수있는 파일의 확장자 목록을 반환한다 (예 &lt;code&gt;.json&lt;/code&gt; JSON 파일).</target>
        </trans-unit>
        <trans-unit id="f797ec069a3a588cc93b2d7e7b51ec1b87b751dc" translate="yes" xml:space="preserve">
          <source>Scripted mode</source>
          <target state="translated">스크립트 모드</target>
        </trans-unit>
        <trans-unit id="8847aea2b37857c4fe9c4e29d9a32c95be30e798" translate="yes" xml:space="preserve">
          <source>Second, IEx allows you to break an expression into many lines, since this is common in Elixir. For example:</source>
          <target state="translated">둘째, IEx를 사용하면 표현식을 여러 줄로 나눌 수 있습니다. 이는 Elixir에서 일반적이기 때문입니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="80863c7291923af44e1f330d4438e654d8c8d816" translate="yes" xml:space="preserve">
          <source>Security patches only</source>
          <target state="translated">보안 패치 만</target>
        </trans-unit>
        <trans-unit id="f87ff12a5586b140b44d0aed5d1141d157905ed6" translate="yes" xml:space="preserve">
          <source>Security: a security issue in the implementation may arise whose resolution requires backwards incompatible changes. We reserve the right to address such security issues.</source>
          <target state="translated">보안 : 구현시 보안 문제가 발생하여 이전 버전과 호환되지 않는 변경이 필요합니다. 우리는 그러한 보안 문제를 해결할 권리가 있습니다.</target>
        </trans-unit>
        <trans-unit id="3d297aad6172ead65e3f02dab6f6aac40aa79934" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;#async_stream/5&quot;&gt;&lt;code&gt;async_stream/5&lt;/code&gt;&lt;/a&gt; for discussion, options, and more examples.</source>
          <target state="translated">토론, 옵션 및 기타 예제는 &lt;a href=&quot;#async_stream/5&quot;&gt; &lt;code&gt;async_stream/5&lt;/code&gt; &lt;/a&gt; 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="b9ea2a4f9446b7042ac45e1cc5f076950d4c363d" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;#async_stream/6&quot;&gt;&lt;code&gt;async_stream/6&lt;/code&gt;&lt;/a&gt; for discussion and examples.</source>
          <target state="translated">토론 및 예제는 &lt;a href=&quot;#async_stream/6&quot;&gt; &lt;code&gt;async_stream/6&lt;/code&gt; &lt;/a&gt; 을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="ab0b50cd928f15f49cfb5f68465e7dfe1adc62ce" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;#async_stream/6&quot;&gt;&lt;code&gt;async_stream/6&lt;/code&gt;&lt;/a&gt; for discussion, options, and examples.</source>
          <target state="translated">토론, 옵션 및 예제는 &lt;a href=&quot;#async_stream/6&quot;&gt; &lt;code&gt;async_stream/6&lt;/code&gt; &lt;/a&gt; 을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="c711218ea0622a68dc6c47b17be58ae3b4864c62" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;#compile_file/2&quot;&gt;&lt;code&gt;compile_file/2&lt;/code&gt;&lt;/a&gt; if you would like to compile a file without tracking its filenames. Finally, if you would like to get the result of evaluating a file rather than the modules defined in it, see &lt;a href=&quot;#eval_file/2&quot;&gt;&lt;code&gt;eval_file/2&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">파일 이름을 추적하지 않고 파일을 컴파일하려면 &lt;a href=&quot;#compile_file/2&quot;&gt; &lt;code&gt;compile_file/2&lt;/code&gt; 를&lt;/a&gt; 참조하십시오 . 마지막으로, 파일에 정의 된 모듈이 아닌 파일을 평가 한 결과를 얻으려면 &lt;a href=&quot;#eval_file/2&quot;&gt; &lt;code&gt;eval_file/2&lt;/code&gt; 를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="6204a9c040341b764a2faf52239bda6c2bbaf5b0" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;#compiler_options/1&quot;&gt;&lt;code&gt;compiler_options/1&lt;/code&gt;&lt;/a&gt; for more information.</source>
          <target state="translated">자세한 내용은 &lt;a href=&quot;#compiler_options/1&quot;&gt; &lt;code&gt;compiler_options/1&lt;/code&gt; &lt;/a&gt; 을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="7ca396c98cfdbd4e90a303c7e6adb445c5b12ce0" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;#eval_string/3&quot;&gt;&lt;code&gt;eval_string/3&lt;/code&gt;&lt;/a&gt; for a description of bindings and options.</source>
          <target state="translated">바인딩 및 옵션에 대한 설명은 &lt;a href=&quot;#eval_string/3&quot;&gt; &lt;code&gt;eval_string/3&lt;/code&gt; &lt;/a&gt; 을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="a25453935310383344a90ea3aef438a7fa788ccc" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;#format_string!/2&quot;&gt;&lt;code&gt;format_string!/2&lt;/code&gt;&lt;/a&gt; for more information on code formatting and available options.</source>
          <target state="translated">코드 형식 및 사용 가능한 옵션에 대한 자세한 내용 은 &lt;a href=&quot;#format_string!/2&quot;&gt; &lt;code&gt;format_string!/2&lt;/code&gt; &lt;/a&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="2883129c68b02ac70cbb305db2bb3985757fe9f2" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;#inspect/2&quot;&gt;&lt;code&gt;inspect/2&lt;/code&gt;&lt;/a&gt; for a full list of options.</source>
          <target state="translated">전체 옵션 목록은 &lt;a href=&quot;#inspect/2&quot;&gt; &lt;code&gt;inspect/2&lt;/code&gt; &lt;/a&gt; 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="6775db0edf91fd1bcde122f816eb64ab4807cb75" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;#line/0&quot;&gt;&lt;code&gt;line/0&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#line/0&quot;&gt; &lt;code&gt;line/0&lt;/code&gt; 을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="e856b9a0b3c384f7599e00c066aa601e20cd32e9" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;#multi_call/4&quot;&gt;&lt;code&gt;multi_call/4&lt;/code&gt;&lt;/a&gt; for more information.</source>
          <target state="translated">자세한 내용은 &lt;a href=&quot;#multi_call/4&quot;&gt; &lt;code&gt;multi_call/4&lt;/code&gt; &lt;/a&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="412e2ee91670d1cb67318a56aed59f181db3e2c1" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;#myers_difference/3&quot;&gt;&lt;code&gt;myers_difference/3&lt;/code&gt;&lt;/a&gt; if you want to handle nesting in the diff scripts.</source>
          <target state="translated">diff 스크립트에서 중첩을 처리하려면 &lt;a href=&quot;#myers_difference/3&quot;&gt; &lt;code&gt;myers_difference/3&lt;/code&gt; 를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="5383aa98051793554179d6dd9886bd65adc02068" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;#open/2&quot;&gt;&lt;code&gt;open/2&lt;/code&gt;&lt;/a&gt; for the list of available &lt;code&gt;modes&lt;/code&gt;.</source>
          <target state="translated">사용 가능한 &lt;code&gt;modes&lt;/code&gt; 목록은 &lt;a href=&quot;#open/2&quot;&gt; &lt;code&gt;open/2&lt;/code&gt; &lt;/a&gt; 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="e9443c84eb6a0e5596d38a53c0ea69e901bb5f63" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;#open/2&quot;&gt;&lt;code&gt;open/2&lt;/code&gt;&lt;/a&gt; for the list of available modes.</source>
          <target state="translated">사용 가능한 모드 목록은 &lt;a href=&quot;#open/2&quot;&gt; &lt;code&gt;open/2&lt;/code&gt; &lt;/a&gt; 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="72587bfb37893ece855338ff229de106ec981e60" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;#parse/2&quot;&gt;&lt;code&gt;parse/2&lt;/code&gt;&lt;/a&gt; for more information.</source>
          <target state="translated">자세한 내용은 &lt;a href=&quot;#parse/2&quot;&gt; &lt;code&gt;parse/2&lt;/code&gt; &lt;/a&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="a60c62583c5e98de75e0009105889ad004974083" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;#random/1&quot;&gt;&lt;code&gt;random/1&lt;/code&gt;&lt;/a&gt; for notes on implementation and random seed.</source>
          <target state="translated">구현 및 임의 시드에 대한 참고 사항 은 &lt;a href=&quot;#random/1&quot;&gt; &lt;code&gt;random/1&lt;/code&gt; &lt;/a&gt; 을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="f79bab9f64b4c1b4a45f5094f7ec3cc5e70348f2" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;#spec/1&quot;&gt;&lt;code&gt;spec/1&lt;/code&gt;&lt;/a&gt; for the supported keys. If the given specification parameter does not exist, this function will raise. Returns &lt;code&gt;nil&lt;/code&gt; if the application is not loaded.</source>
          <target state="translated">지원되는 키에 대해서는 &lt;a href=&quot;#spec/1&quot;&gt; &lt;code&gt;spec/1&lt;/code&gt; &lt;/a&gt; 을 참조하십시오 . 주어진 사양 매개 변수가 존재하지 않으면이 기능이 상승합니다. 응용 프로그램이로드되지 않은 경우 &lt;code&gt;nil&lt;/code&gt; 을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="4b86593efd6d87f56f5a4b1d1c80f9efa89b9f35" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;#start_link/2&quot;&gt;&lt;code&gt;start_link/2&lt;/code&gt;&lt;/a&gt; for more information.</source>
          <target state="translated">자세한 내용은 &lt;a href=&quot;#start_link/2&quot;&gt; &lt;code&gt;start_link/2&lt;/code&gt; &lt;/a&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="9104acc9f7e509727a191a9c211563bc8c6b8821" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;#start_link/3&quot;&gt;&lt;code&gt;start_link/3&lt;/code&gt;&lt;/a&gt; for more information.</source>
          <target state="translated">자세한 내용은 &lt;a href=&quot;#start_link/3&quot;&gt; &lt;code&gt;start_link/3&lt;/code&gt; &lt;/a&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="30ce1591410e8c20c70a914da2c1f177eba54a6b" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;#start_link/4&quot;&gt;&lt;code&gt;start_link/4&lt;/code&gt;&lt;/a&gt; for more information.</source>
          <target state="translated">자세한 내용은 &lt;a href=&quot;#start_link/4&quot;&gt; &lt;code&gt;start_link/4&lt;/code&gt; &lt;/a&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="025b78a6ec53671f1f70eaadb8c6a69193d1552c" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;#time_offset/1&quot;&gt;&lt;code&gt;time_offset/1&lt;/code&gt;&lt;/a&gt; for more information.</source>
          <target state="translated">자세한 내용은 &lt;a href=&quot;#time_offset/1&quot;&gt; &lt;code&gt;time_offset/1&lt;/code&gt; &lt;/a&gt; 을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="85b0baaaca71d7d382229291aee3fadaa203940b" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;calendar#c:day_rollover_relative_to_midnight_utc/0&quot;&gt;&lt;code&gt;Calendar.day_rollover_relative_to_midnight_utc/0&lt;/code&gt;&lt;/a&gt; for documentation.</source>
          <target state="translated">설명서는 &lt;a href=&quot;calendar#c:day_rollover_relative_to_midnight_utc/0&quot;&gt; &lt;code&gt;Calendar.day_rollover_relative_to_midnight_utc/0&lt;/code&gt; &lt;/a&gt; 을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="39aa7c276c8b00b83eda4436db990a46be4f135d" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;calendar.timezonedatabase&quot;&gt;&lt;code&gt;Calendar.TimeZoneDatabase&lt;/code&gt;&lt;/a&gt; for more information on custom time zone databases.</source>
          <target state="translated">사용자 지정 표준 시간대 데이터베이스에 대한 자세한 내용 은 &lt;a href=&quot;calendar.timezonedatabase&quot;&gt; &lt;code&gt;Calendar.TimeZoneDatabase&lt;/code&gt; &lt;/a&gt; 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="b437e60993127a72d9f00604cb32048636bf30b7" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;exunit.case&quot;&gt;&lt;code&gt;ExUnit.Case&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;exunit.callbacks&quot;&gt;&lt;code&gt;ExUnit.Callbacks&lt;/code&gt;&lt;/a&gt; for more information about defining test cases and setting up callbacks.</source>
          <target state="translated">참조 &lt;a href=&quot;exunit.case&quot;&gt; &lt;code&gt;ExUnit.Case&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;exunit.callbacks&quot;&gt; &lt;code&gt;ExUnit.Callbacks&lt;/code&gt; 을&lt;/a&gt; 테스트 케이스를 정의하고 콜백을 설정하는 방법에 대한 자세한 내용은.</target>
        </trans-unit>
        <trans-unit id="c5e92f1a723af642ec18095ee3c3e5a7b44a5253" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;http://www.erlang.org/doc/man/erlang.html#demonitor-2&quot;&gt;&lt;code&gt;:erlang.demonitor/2&lt;/code&gt;&lt;/a&gt; for more information.</source>
          <target state="translated">자세한 내용은 &lt;a href=&quot;http://www.erlang.org/doc/man/erlang.html#demonitor-2&quot;&gt; &lt;code&gt;:erlang.demonitor/2&lt;/code&gt; &lt;/a&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="236c47cfb4f80177fcf2f8fee345fdbbdb89da09" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;http://www.erlang.org/doc/man/erlang.html#hibernate-3&quot;&gt;&lt;code&gt;:erlang.hibernate/3&lt;/code&gt;&lt;/a&gt; for more information.</source>
          <target state="translated">자세한 내용은 &lt;a href=&quot;http://www.erlang.org/doc/man/erlang.html#hibernate-3&quot;&gt; &lt;code&gt;:erlang.hibernate/3&lt;/code&gt; &lt;/a&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="eb6d7556c0af02d5c3798524709f1fdfd3d33b21" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;http://www.erlang.org/doc/man/erlang.html#link-1&quot;&gt;&lt;code&gt;:erlang.link/1&lt;/code&gt;&lt;/a&gt; for more information.</source>
          <target state="translated">자세한 내용은 &lt;a href=&quot;http://www.erlang.org/doc/man/erlang.html#link-1&quot;&gt; &lt;code&gt;:erlang.link/1&lt;/code&gt; &lt;/a&gt; 을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="b294ce31a8bb19561980ff4b847d775b1ea0dc45" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;http://www.erlang.org/doc/man/erlang.html#monitor-2&quot;&gt;&lt;code&gt;:erlang.monitor/2&lt;/code&gt;&lt;/a&gt; for more information.</source>
          <target state="translated">자세한 내용은 &lt;a href=&quot;http://www.erlang.org/doc/man/erlang.html#monitor-2&quot;&gt; &lt;code&gt;:erlang.monitor/2&lt;/code&gt; &lt;/a&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="937ed9e63e3b26fc6260095741b862928cedd6d2" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;http://www.erlang.org/doc/man/erlang.html#process_flag-2&quot;&gt;&lt;code&gt;:erlang.process_flag/2&lt;/code&gt;&lt;/a&gt; for more information.</source>
          <target state="translated">자세한 내용은 &lt;a href=&quot;http://www.erlang.org/doc/man/erlang.html#process_flag-2&quot;&gt; &lt;code&gt;:erlang.process_flag/2&lt;/code&gt; &lt;/a&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="5cb7732eb146e3fb56c4b2718c19b9b1594162d2" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;http://www.erlang.org/doc/man/erlang.html#process_flag-3&quot;&gt;&lt;code&gt;:erlang.process_flag/3&lt;/code&gt;&lt;/a&gt; for more information.</source>
          <target state="translated">자세한 내용은 &lt;a href=&quot;http://www.erlang.org/doc/man/erlang.html#process_flag-3&quot;&gt; &lt;code&gt;:erlang.process_flag/3&lt;/code&gt; &lt;/a&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="1b8a68e27e33937ed393acd9f8bbbb6ac56124be" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;http://www.erlang.org/doc/man/erlang.html#process_info-1&quot;&gt;&lt;code&gt;:erlang.process_info/1&lt;/code&gt;&lt;/a&gt; for more information.</source>
          <target state="translated">자세한 내용은 &lt;a href=&quot;http://www.erlang.org/doc/man/erlang.html#process_info-1&quot;&gt; &lt;code&gt;:erlang.process_info/1&lt;/code&gt; &lt;/a&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="c57f8a3d92d9199927d2cc7fa62dbb000dd3236c" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;http://www.erlang.org/doc/man/erlang.html#process_info-2&quot;&gt;&lt;code&gt;:erlang.process_info/2&lt;/code&gt;&lt;/a&gt; for more information.</source>
          <target state="translated">자세한 정보는 &lt;a href=&quot;http://www.erlang.org/doc/man/erlang.html#process_info-2&quot;&gt; &lt;code&gt;:erlang.process_info/2&lt;/code&gt; &lt;/a&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="09e49090898de7a7c2f63c4761f683b4aa8ffefe" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;http://www.erlang.org/doc/man/erlang.html#processes-0&quot;&gt;&lt;code&gt;:erlang.processes/0&lt;/code&gt;&lt;/a&gt; for more information.</source>
          <target state="translated">자세한 정보는 &lt;a href=&quot;http://www.erlang.org/doc/man/erlang.html#processes-0&quot;&gt; &lt;code&gt;:erlang.processes/0&lt;/code&gt; &lt;/a&gt; 을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="c9b42c9b4711df8ae0d4cbe5f4d34c94df707f05" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;http://www.erlang.org/doc/man/erlang.html#unlink-1&quot;&gt;&lt;code&gt;:erlang.unlink/1&lt;/code&gt;&lt;/a&gt; for more information.</source>
          <target state="translated">자세한 내용은 &lt;a href=&quot;http://www.erlang.org/doc/man/erlang.html#unlink-1&quot;&gt; &lt;code&gt;:erlang.unlink/1&lt;/code&gt; &lt;/a&gt; 을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="90a52cb46cb51ef1c81084e7b546e8f0e253d2e0" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;http://www.erlang.org/doc/man/erlang.html#whereis-1&quot;&gt;&lt;code&gt;:erlang.whereis/1&lt;/code&gt;&lt;/a&gt; for more information.</source>
          <target state="translated">자세한 내용은 &lt;a href=&quot;http://www.erlang.org/doc/man/erlang.html#whereis-1&quot;&gt; &lt;code&gt;:erlang.whereis/1&lt;/code&gt; &lt;/a&gt; 을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="17e5bc7119d17d5e936d1012e37bfd0ad107efba" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://elixir-lang.org/getting-started/mix-otp/genserver.html#the-need-for-monitoring&quot;&gt;the need for monitoring&lt;/a&gt; for an example. See &lt;a href=&quot;http://www.erlang.org/doc/man/erlang.html#monitor-2&quot;&gt;&lt;code&gt;:erlang.monitor/2&lt;/code&gt;&lt;/a&gt; for more information.</source>
          <target state="translated">예를 보려면 &lt;a href=&quot;https://elixir-lang.org/getting-started/mix-otp/genserver.html#the-need-for-monitoring&quot;&gt;모니터링 필요성을&lt;/a&gt; 참조하십시오 . 자세한 내용은 &lt;a href=&quot;http://www.erlang.org/doc/man/erlang.html#monitor-2&quot;&gt; &lt;code&gt;:erlang.monitor/2&lt;/code&gt; &lt;/a&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="ff292d29bb98bb0fb3e3262c9d111868a43a1bea" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://hexdocs.pm/elixir/Inspect.Opts.html&quot;&gt;&lt;code&gt;Inspect.Opts&lt;/code&gt;&lt;/a&gt; for the full list of options.</source>
          <target state="translated">참조 &lt;a href=&quot;https://hexdocs.pm/elixir/Inspect.Opts.html&quot;&gt; &lt;code&gt;Inspect.Opts&lt;/code&gt; &lt;/a&gt; 옵션의 전체 목록을.</target>
        </trans-unit>
        <trans-unit id="ff7fac65821b31c7cfc50567f8471dc1022a6991" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://hexdocs.pm/ex_unit/ExUnit.html#configure/1&quot;&gt;&lt;code&gt;ExUnit.configure/1&lt;/code&gt;&lt;/a&gt; for more information on configuration options.</source>
          <target state="translated">구성 옵션에 대한 자세한 내용 은 &lt;a href=&quot;https://hexdocs.pm/ex_unit/ExUnit.html#configure/1&quot;&gt; &lt;code&gt;ExUnit.configure/1&lt;/code&gt; &lt;/a&gt; 을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="6edba8d79bc2caa95282b27ca2537278ef94ab01" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;iex#break!/4&quot;&gt;&lt;code&gt;IEx.break!/4&lt;/code&gt;&lt;/a&gt; for a complete description of breakpoints in IEx.</source>
          <target state="translated">&lt;a href=&quot;iex#break!/4&quot;&gt; &lt;code&gt;IEx.break!/4&lt;/code&gt; &lt;/a&gt; 의 중단 점에 대한 자세한 설명은 IEx.break! / 4 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="5122ba27d8721b949fffc951604aa13f45980e9b" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;inspect.opts&quot;&gt;&lt;code&gt;Inspect.Opts&lt;/code&gt;&lt;/a&gt; for a full list of remaining formatting options.</source>
          <target state="translated">나머지 포맷 옵션의 전체 목록은 &lt;a href=&quot;inspect.opts&quot;&gt; &lt;code&gt;Inspect.Opts&lt;/code&gt; &lt;/a&gt; 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="1dc68776cfd1eb7d70aa15085d8f462ed1d3d053" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;io#getn/3&quot;&gt;&lt;code&gt;IO.getn/3&lt;/code&gt;&lt;/a&gt; for a description of return values.</source>
          <target state="translated">리턴 값에 대한 설명은 &lt;a href=&quot;io#getn/3&quot;&gt; &lt;code&gt;IO.getn/3&lt;/code&gt; &lt;/a&gt; 을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="97d611377e22e5db00ff12e232a607ad3ab3ef5e" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;kernel#defoverridable/1&quot;&gt;&lt;code&gt;Kernel.defoverridable/1&lt;/code&gt;&lt;/a&gt; for more information and documentation.</source>
          <target state="translated">자세한 내용과 설명서는 &lt;a href=&quot;kernel#defoverridable/1&quot;&gt; &lt;code&gt;Kernel.defoverridable/1&lt;/code&gt; &lt;/a&gt; 을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="571066f54659ec2ac5b16799e2adaad081cfb2dd" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;kernel.specialforms#import/2&quot;&gt;&lt;code&gt;Kernel.SpecialForms.import/2&lt;/code&gt;&lt;/a&gt; for more information on importing.</source>
          <target state="translated">참조 &lt;a href=&quot;kernel.specialforms#import/2&quot;&gt; &lt;code&gt;Kernel.SpecialForms.import/2&lt;/code&gt; 를&lt;/a&gt; 가져 오기에 대한 자세한 내용을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="2f044d50d2ace10fab3e6c795376b601501a3205" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;stream#run/1&quot;&gt;&lt;code&gt;Stream.run/1&lt;/code&gt;&lt;/a&gt; for an example of streaming into a file.</source>
          <target state="translated">파일로 스트리밍하는 예는 &lt;a href=&quot;stream#run/1&quot;&gt; &lt;code&gt;Stream.run/1&lt;/code&gt; &lt;/a&gt; 을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="c71eb54f62c0e44af2d3fc12b12fd9ffd5a6142c" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;supervisor&quot;&gt;&lt;code&gt;Supervisor&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;supervisor&quot;&gt; &lt;code&gt;Supervisor&lt;/code&gt; &lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="14914fd526c793471e43dfbd5057556d75ec048c" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;task#async/1&quot;&gt;&lt;code&gt;Task.async/1&lt;/code&gt;&lt;/a&gt; for more information. The task spawned must be always awaited on by calling &lt;a href=&quot;task#await/1&quot;&gt;&lt;code&gt;Task.await/1&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">자세한 내용은 &lt;a href=&quot;task#async/1&quot;&gt; &lt;code&gt;Task.async/1&lt;/code&gt; &lt;/a&gt; 을 참조하십시오. 생성 된 작업은 항상 &lt;a href=&quot;task#await/1&quot;&gt; &lt;code&gt;Task.await/1&lt;/code&gt; &lt;/a&gt; 을 호출하여 대기 해야합니다.</target>
        </trans-unit>
        <trans-unit id="3aa41a4f7ed7d2b0af79578b5fcca0043e0e1e47" translate="yes" xml:space="preserve">
          <source>See &lt;code&gt;%Task{}&lt;/code&gt; for information about each field of the structure.</source>
          <target state="translated">구조의 각 필드에 대한 정보는 &lt;code&gt;%Task{}&lt;/code&gt; 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="4cceaf34a6a814616d8794130f79ffcf533b24d5" translate="yes" xml:space="preserve">
          <source>See &lt;code&gt;encode_www_form&lt;/code&gt; if you are interested in escaping reserved characters too.</source>
          <target state="translated">예약 문자를 이스케이프 처리하려면 &lt;code&gt;encode_www_form&lt;/code&gt; 을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="c68610d4f3ab56d8617f2cfbefaa73856e91cce0" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;#async/3&quot;&gt;&lt;code&gt;async/3&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#async/3&quot;&gt; &lt;code&gt;async/3&lt;/code&gt; &lt;/a&gt; 도 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="29a63667da796e9c242be4119c0fafe37c909456" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;#filter/2&quot;&gt;&lt;code&gt;filter/2&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#filter/2&quot;&gt; &lt;code&gt;filter/2&lt;/code&gt; &lt;/a&gt; 도 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="0a0192db1681c0a57d284e9275a06f0331fb0685" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;#if/2&quot;&gt;&lt;code&gt;if/2&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#if/2&quot;&gt; &lt;code&gt;if/2&lt;/code&gt; &lt;/a&gt; 도 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="521978e302ce7fcc9d153cb10876b8947a2b4270" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;#reject/2&quot;&gt;&lt;code&gt;reject/2&lt;/code&gt;&lt;/a&gt; which discards all elements where the function returns a truthy value.</source>
          <target state="translated">함수가 진리 값을 리턴하는 모든 요소를 ​​버리는 &lt;a href=&quot;#reject/2&quot;&gt; &lt;code&gt;reject/2&lt;/code&gt; &lt;/a&gt; 도 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="a6f19e1118fb5439e3b2951ab6f2872117a4c839" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;calendar#compatible_calendars?/2&quot;&gt;&lt;code&gt;Calendar.compatible_calendars?/2&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;calendar#compatible_calendars?/2&quot;&gt; &lt;code&gt;Calendar.compatible_calendars?/2&lt;/code&gt; &lt;/a&gt; 도 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="cce61e3bd48619c59d1a4129a8b1e9973519ccfe" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;function#capture/3&quot;&gt;&lt;code&gt;Function.capture/3&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;function#capture/3&quot;&gt; &lt;code&gt;Function.capture/3&lt;/code&gt; &lt;/a&gt; 도 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="57eefd5a434fd09c6836f667932fd5024b9ccc46" translate="yes" xml:space="preserve">
          <source>See also &lt;a href=&quot;kernel#is_atom/1&quot;&gt;&lt;code&gt;Kernel.is_atom/1&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;kernel#is_atom/1&quot;&gt; &lt;code&gt;Kernel.is_atom/1&lt;/code&gt; &lt;/a&gt; 도 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="2b47b902698fa63ed92ca0c651047d9fbaef5a1d" translate="yes" xml:space="preserve">
          <source>See the &quot;Child specification&quot; section in the &lt;a href=&quot;supervisor&quot;&gt;&lt;code&gt;Supervisor&lt;/code&gt;&lt;/a&gt; module for more detailed information.</source>
          <target state="translated">자세한 내용은 &lt;a href=&quot;supervisor&quot;&gt; &lt;code&gt;Supervisor&lt;/code&gt; &lt;/a&gt; 모듈 의 &quot;자식 지정&quot;섹션을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="1dd6eb5e99c7c03dbe3b1d4be075fa120ab3f831" translate="yes" xml:space="preserve">
          <source>See the &quot;Child specification&quot; section in the &lt;a href=&quot;supervisor&quot;&gt;&lt;code&gt;Supervisor&lt;/code&gt;&lt;/a&gt; module for more detailed information. The &lt;code&gt;@doc&lt;/code&gt; annotation immediately preceding &lt;code&gt;use Agent&lt;/code&gt; will be attached to the generated &lt;a href=&quot;#child_spec/1&quot;&gt;&lt;code&gt;child_spec/1&lt;/code&gt;&lt;/a&gt; function.</source>
          <target state="translated">자세한 내용은 &lt;a href=&quot;supervisor&quot;&gt; &lt;code&gt;Supervisor&lt;/code&gt; &lt;/a&gt; 모듈 의 &quot;자식 지정&quot;섹션을 참조하십시오. &lt;code&gt;@doc&lt;/code&gt; 의 직전의 특수 &lt;code&gt;use Agent&lt;/code&gt; 생성 부착된다 &lt;a href=&quot;#child_spec/1&quot;&gt; &lt;code&gt;child_spec/1&lt;/code&gt; &lt;/a&gt; 기능.</target>
        </trans-unit>
        <trans-unit id="960d22cd31686e11772eef98ee456c7709453659" translate="yes" xml:space="preserve">
          <source>See the &quot;Child specification&quot; section in the &lt;a href=&quot;supervisor&quot;&gt;&lt;code&gt;Supervisor&lt;/code&gt;&lt;/a&gt; module for more detailed information. The &lt;code&gt;@doc&lt;/code&gt; annotation immediately preceding &lt;code&gt;use GenServer&lt;/code&gt; will be attached to the generated &lt;code&gt;child_spec/1&lt;/code&gt; function.</source>
          <target state="translated">자세한 내용은 &lt;a href=&quot;supervisor&quot;&gt; &lt;code&gt;Supervisor&lt;/code&gt; &lt;/a&gt; 모듈 의 &quot;자식 지정&quot;섹션을 참조하십시오. &lt;code&gt;@doc&lt;/code&gt; 의 직전의 특수 &lt;code&gt;use GenServer&lt;/code&gt; 생성 부착된다 &lt;code&gt;child_spec/1&lt;/code&gt; 기능.</target>
        </trans-unit>
        <trans-unit id="7b1dc97a60bbc7638b75a98279e08aacfb50a439" translate="yes" xml:space="preserve">
          <source>See the &quot;Child specification&quot; section in the &lt;a href=&quot;supervisor&quot;&gt;&lt;code&gt;Supervisor&lt;/code&gt;&lt;/a&gt; module for more detailed information. The &lt;code&gt;@doc&lt;/code&gt; annotation immediately preceding &lt;code&gt;use Task&lt;/code&gt; will be attached to the generated &lt;a href=&quot;#child_spec/1&quot;&gt;&lt;code&gt;child_spec/1&lt;/code&gt;&lt;/a&gt; function.</source>
          <target state="translated">자세한 내용은 &lt;a href=&quot;supervisor&quot;&gt; &lt;code&gt;Supervisor&lt;/code&gt; &lt;/a&gt; 모듈 의 &quot;자식 지정&quot;섹션을 참조하십시오. &lt;code&gt;@doc&lt;/code&gt; 의 직전의 특수 &lt;code&gt;use Task&lt;/code&gt; 생성 부착된다 &lt;a href=&quot;#child_spec/1&quot;&gt; &lt;code&gt;child_spec/1&lt;/code&gt; &lt;/a&gt; 기능.</target>
        </trans-unit>
        <trans-unit id="30dd4d39d714824873c91242d2b45957ae02a0c9" translate="yes" xml:space="preserve">
          <source>See the &quot;Child specification&quot; section in the module documentation for all of the available keys for overriding.</source>
          <target state="translated">재정의 할 수있는 모든 키에 대해서는 모듈 설명서의 &quot;자식 지정&quot;섹션을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="13a1ebd27d05e64d87df69ec749b3054f6d91e47" translate="yes" xml:space="preserve">
          <source>See the &quot;Examples&quot; section for examples on how to use these macros.</source>
          <target state="translated">이러한 매크로를 사용하는 방법에 대한 예는 &quot;예제&quot;섹션을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="4715e0f5e31a7ecf5eb97e3118b4e7cb9a349e30" translate="yes" xml:space="preserve">
          <source>See the &quot;Requirements&quot; section in the &lt;a href=&quot;version&quot;&gt;&lt;code&gt;Version&lt;/code&gt;&lt;/a&gt; module for more information.</source>
          <target state="translated">자세한 정보 는 &lt;a href=&quot;version&quot;&gt; &lt;code&gt;Version&lt;/code&gt; &lt;/a&gt; 모듈 의 &quot;요구 사항&quot;섹션 을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="085f6faad706b44fbfe10741a52117a1876b7c28" translate="yes" xml:space="preserve">
          <source>See the &quot;Runtime Configuration&quot; section in the &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;Logger&lt;/code&gt;&lt;/a&gt; module documentation for the available options. The changes done here are automatically persisted to the &lt;code&gt;:logger&lt;/code&gt; application environment.</source>
          <target state="translated">사용 가능한 옵션 에 대해서는 &lt;a href=&quot;#content&quot;&gt; &lt;code&gt;Logger&lt;/code&gt; &lt;/a&gt; 모듈 설명서 의 &quot;런타임 구성&quot;섹션을 참조하십시오 . 여기에서 수행 된 변경 사항은 자동으로 &lt;code&gt;:logger&lt;/code&gt; 애플리케이션 환경에 유지됩니다.</target>
        </trans-unit>
        <trans-unit id="cca171332e51871d4f29f2362aba4c90108dd995" translate="yes" xml:space="preserve">
          <source>See the &quot;Supervisor and worker options&quot; section in the &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;Supervisor.Spec&lt;/code&gt;&lt;/a&gt; module for more information on the available options.</source>
          <target state="translated">사용 가능한 옵션에 대한 자세한 내용 은 &lt;a href=&quot;#content&quot;&gt; &lt;code&gt;Supervisor.Spec&lt;/code&gt; &lt;/a&gt; 모듈 의 &quot;감독자 및 작업자 옵션&quot;섹션 을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="fed1d1ad790bc4b32e368f1dd909f8be2e226649" translate="yes" xml:space="preserve">
          <source>See the &quot;User-defined types&quot; and &quot;Defining a specification&quot; sub-sections below for more information on defining types and typespecs.</source>
          <target state="translated">유형 및 유형 스펙 정의에 대한 자세한 정보는 아래의 &quot;사용자 정의 유형&quot;및 &quot;사양 정의&quot;하위 섹션을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="d47f633402a6dc7774499c24b6dc4ec38c37f7ac" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;https://hex.pm/docs/usage&quot;&gt;Hex usage documentation&lt;/a&gt; for Hex options.</source>
          <target state="translated">16 진 옵션에 대해서는 16 &lt;a href=&quot;https://hex.pm/docs/usage&quot;&gt;진 사용 설명서&lt;/a&gt; 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="f2819013089d7de456841d6baad7b4a9a0642c29" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;https://hexdocs.pm/elixir/IO.ANSI.html&quot;&gt;&lt;code&gt;IO.ANSI&lt;/code&gt;&lt;/a&gt; module for a list of colors and attributes.</source>
          <target state="translated">색상 및 속성 목록은 &lt;a href=&quot;https://hexdocs.pm/elixir/IO.ANSI.html&quot;&gt; &lt;code&gt;IO.ANSI&lt;/code&gt; &lt;/a&gt; 모듈을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="e4e1309d06b307016c3bb04091688992534bfea8" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;https://hexdocs.pm/elixir/Supervisor.html&quot;&gt;&lt;code&gt;Supervisor&lt;/code&gt;&lt;/a&gt; module for a discussion on child specifications and the available specification keys.</source>
          <target state="translated">하위 사양 및 사용 가능한 사양 키에 대한 설명 은 &lt;a href=&quot;https://hexdocs.pm/elixir/Supervisor.html&quot;&gt; &lt;code&gt;Supervisor&lt;/code&gt; &lt;/a&gt; 모듈을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="31cebecc5227b5e52c63b7361e188bd42aa17e0e" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;map&quot;&gt;&lt;code&gt;Map&lt;/code&gt;&lt;/a&gt; module for more information about maps, their syntax, and ways to access and manipulate them.</source>
          <target state="translated">맵, 구문 및 맵 액세스 및 조작 방법에 대한 자세한 정보 는 &lt;a href=&quot;map&quot;&gt; &lt;code&gt;Map&lt;/code&gt; &lt;/a&gt; 모듈을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="651c622de5237592dd974ed0f2426a971dc5e1d4" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;map#fetch/2&quot;&gt;&lt;code&gt;Map.fetch/2&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;keyword#fetch/2&quot;&gt;&lt;code&gt;Keyword.fetch/2&lt;/code&gt;&lt;/a&gt; implementations for examples of how to implement this callback.</source>
          <target state="translated">이 콜백을 구현하는 방법에 대한 예제 는 &lt;a href=&quot;map#fetch/2&quot;&gt; &lt;code&gt;Map.fetch/2&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;keyword#fetch/2&quot;&gt; &lt;code&gt;Keyword.fetch/2&lt;/code&gt; &lt;/a&gt; 구현을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="b624e472805d3adc4b87dc79e98807bc8b027cc7" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;mix.project&quot;&gt;&lt;code&gt;Mix.Project&lt;/code&gt;&lt;/a&gt; module for detailed documentation on Mix projects.</source>
          <target state="translated">믹스 프로젝트에 대한 자세한 문서 는 &lt;a href=&quot;mix.project&quot;&gt; &lt;code&gt;Mix.Project&lt;/code&gt; &lt;/a&gt; 모듈을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="7d2161f4dd28a8df53dbe019879d314fcf1214b8" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;mix.task&quot;&gt;&lt;code&gt;Mix.Task&lt;/code&gt;&lt;/a&gt; behaviour for detailed documentation on Mix tasks.</source>
          <target state="translated">믹스 작업에 대한 자세한 설명서 는 &lt;a href=&quot;mix.task&quot;&gt; &lt;code&gt;Mix.Task&lt;/code&gt; &lt;/a&gt; 동작을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="834e1b329e36786a4bfd904e77180b7810718e3a" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;protocol&quot;&gt;&lt;code&gt;Protocol&lt;/code&gt;&lt;/a&gt; module for more information.</source>
          <target state="translated">자세한 내용은 &lt;a href=&quot;protocol&quot;&gt; &lt;code&gt;Protocol&lt;/code&gt; &lt;/a&gt; 모듈을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="0847e6e61327a1ea818ef259423a8a134e0ee0f4" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;supervisor&quot;&gt;&lt;code&gt;Supervisor&lt;/code&gt;&lt;/a&gt; docs for a discussion of when you may want to use module-based supervisors. A &lt;code&gt;@doc&lt;/code&gt; annotation immediately preceding &lt;code&gt;use DynamicSupervisor&lt;/code&gt; will be attached to the generated &lt;a href=&quot;#child_spec/1&quot;&gt;&lt;code&gt;child_spec/1&lt;/code&gt;&lt;/a&gt; function.</source>
          <target state="translated">모듈 기반 수퍼바이저 사용시기에 대한 설명은 &lt;a href=&quot;supervisor&quot;&gt; &lt;code&gt;Supervisor&lt;/code&gt; &lt;/a&gt; 문서를 참조하십시오 . &lt;code&gt;@doc&lt;/code&gt; 의 직전의 특수 &lt;code&gt;use DynamicSupervisor&lt;/code&gt; 생성 부착된다 &lt;a href=&quot;#child_spec/1&quot;&gt; &lt;code&gt;child_spec/1&lt;/code&gt; &lt;/a&gt; 기능.</target>
        </trans-unit>
        <trans-unit id="30646707ecc4c9e5716bc2575d2918e37f631016" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;task&quot;&gt;&lt;code&gt;Task&lt;/code&gt;&lt;/a&gt; module for more examples.</source>
          <target state="translated">자세한 예는 &lt;a href=&quot;task&quot;&gt; &lt;code&gt;Task&lt;/code&gt; &lt;/a&gt; 모듈을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="97b5840ba3ecf762a5d50e89e069b4203e9b0770" translate="yes" xml:space="preserve">
          <source>See the documentation of the types &lt;a href=&quot;#t:result/0&quot;&gt;&lt;code&gt;result/0&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#t:acc/0&quot;&gt;&lt;code&gt;acc/0&lt;/code&gt;&lt;/a&gt; for more information.</source>
          <target state="translated">자세한 정보는 &lt;a href=&quot;#t:result/0&quot;&gt; &lt;code&gt;result/0&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;#t:acc/0&quot;&gt; &lt;code&gt;acc/0&lt;/code&gt; &lt;/a&gt; 의 문서 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="48919ea9082d235b5077c7a570c846b395a36e13" translate="yes" xml:space="preserve">
          <source>See the function &lt;a href=&quot;#translate/4&quot;&gt;&lt;code&gt;translate/4&lt;/code&gt;&lt;/a&gt; in this module for an example implementation and the default messages translated by Logger.</source>
          <target state="translated">구현 예와 로거가 번역 한 기본 메시지에 대해서는이 모듈의 &lt;a href=&quot;#translate/4&quot;&gt; &lt;code&gt;translate/4&lt;/code&gt; &lt;/a&gt; 함수를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="d03554d098407b50efb80318b6cb826078d373be" translate="yes" xml:space="preserve">
          <source>See the functions &lt;a href=&quot;#key/1&quot;&gt;&lt;code&gt;key/1&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#key!/1&quot;&gt;&lt;code&gt;key!/1&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#elem/1&quot;&gt;&lt;code&gt;elem/1&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;#all/0&quot;&gt;&lt;code&gt;all/0&lt;/code&gt;&lt;/a&gt; for some of the available accessors.</source>
          <target state="translated">사용 가능한 접근 자 중 일부 는 기능 &lt;a href=&quot;#key/1&quot;&gt; &lt;code&gt;key/1&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;#key!/1&quot;&gt; &lt;code&gt;key!/1&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;#elem/1&quot;&gt; &lt;code&gt;elem/1&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;#all/0&quot;&gt; &lt;code&gt;all/0&lt;/code&gt; &lt;/a&gt; 을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="d99ed096cc54f8665e2cf9b783ce3e9873f41906" translate="yes" xml:space="preserve">
          <source>See the implementations for &lt;a href=&quot;map#pop/3&quot;&gt;&lt;code&gt;Map.pop/3&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;keyword#pop/3&quot;&gt;&lt;code&gt;Keyword.pop/3&lt;/code&gt;&lt;/a&gt; for more examples.</source>
          <target state="translated">더 많은 예제 는 &lt;a href=&quot;map#pop/3&quot;&gt; &lt;code&gt;Map.pop/3&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;keyword#pop/3&quot;&gt; &lt;code&gt;Keyword.pop/3&lt;/code&gt; &lt;/a&gt; 구현을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="48e1c7f34e1efc0af461c403476b7022caec0f16" translate="yes" xml:space="preserve">
          <source>See the implementations of &lt;a href=&quot;map#get_and_update/3&quot;&gt;&lt;code&gt;Map.get_and_update/3&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;keyword#get_and_update/3&quot;&gt;&lt;code&gt;Keyword.get_and_update/3&lt;/code&gt;&lt;/a&gt; for more examples.</source>
          <target state="translated">자세한 예는 &lt;a href=&quot;map#get_and_update/3&quot;&gt; &lt;code&gt;Map.get_and_update/3&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;keyword#get_and_update/3&quot;&gt; &lt;code&gt;Keyword.get_and_update/3&lt;/code&gt; &lt;/a&gt; 의 구현을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="6c1685eaa54fe519606b25019173c312cf3476a2" translate="yes" xml:space="preserve">
          <source>See the module documentation for examples of using the &lt;a href=&quot;#dispatch/3&quot;&gt;&lt;code&gt;dispatch/3&lt;/code&gt;&lt;/a&gt; function for building custom dispatching or a pubsub system.</source>
          <target state="translated">사용자 정의 디스패치 또는 pubsub 시스템을 빌드하기 위해 &lt;a href=&quot;#dispatch/3&quot;&gt; &lt;code&gt;dispatch/3&lt;/code&gt; &lt;/a&gt; 함수를 사용하는 예는 모듈 설명서를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="14956dad2080627640e7bd584face34c8c603039" translate="yes" xml:space="preserve">
          <source>Seen in typespecs between &lt;code&gt;(&lt;/code&gt;/&lt;code&gt;)&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;(&lt;/code&gt; / &lt;code&gt;)&lt;/code&gt; 사이의 typespec에서 확인 :</target>
        </trans-unit>
        <trans-unit id="0bf39df7a763366418834d3b6d581e918c721630" translate="yes" xml:space="preserve">
          <source>Select key, pid, and values registered using full match specs.</source>
          <target state="translated">완전 일치 스펙을 사용하여 등록 된 키, pid 및 값을 선택하십시오.</target>
        </trans-unit>
        <trans-unit id="b240d04328a96aac53d166b5299cca81675589d4" translate="yes" xml:space="preserve">
          <source>Selector</source>
          <target state="translated">Selector</target>
        </trans-unit>
        <trans-unit id="a2fea41f17d4b9ff27715e407e2cf8ec1bb01c0a" translate="yes" xml:space="preserve">
          <source>Self-contained. A release does not require the source code to be included in your production artifacts. All of the code is precompiled and packaged. Releases do not even require Erlang or Elixir in your servers, as they include the Erlang VM and its runtime by default. Furthermore, both Erlang and Elixir standard libraries are stripped to bring only the parts you are actually using.</source>
          <target state="translated">독립형. 릴리스에서는 소스 코드를 프로덕션 아티팩트에 포함하지 않아도됩니다. 모든 코드는 사전 컴파일 및 패키지됩니다. 릴리스에는 서버에 Erlang 또는 Elixir가 필요하지 않습니다. 기본적으로 Erlang VM과 런타임이 포함되어 있기 때문입니다. 또한 Erlang 및 Elixir 표준 라이브러리는 실제로 사용중인 부품 만 가져 오기 위해 제거됩니다.</target>
        </trans-unit>
        <trans-unit id="fa5e4064e6fa9724596beba2eb2d2bdeb5bdd5ec" translate="yes" xml:space="preserve">
          <source>Self-synchronization</source>
          <target state="translated">Self-synchronization</target>
        </trans-unit>
        <trans-unit id="3c0d7514174147765863ad4a49aa216f1de66c30" translate="yes" xml:space="preserve">
          <source>Sends &lt;code&gt;data&lt;/code&gt; to the port driver &lt;code&gt;port&lt;/code&gt;.</source>
          <target state="translated">포트 드라이버 &lt;code&gt;port&lt;/code&gt; &lt;code&gt;data&lt;/code&gt; 를 보냅니다 .</target>
        </trans-unit>
        <trans-unit id="3f64dd7958524cc44215629f3b20e0dd31bc22fa" translate="yes" xml:space="preserve">
          <source>Sends &lt;code&gt;msg&lt;/code&gt; to &lt;code&gt;dest&lt;/code&gt; after &lt;code&gt;time&lt;/code&gt; milliseconds.</source>
          <target state="translated">전송 &lt;code&gt;msg&lt;/code&gt; 에 &lt;code&gt;dest&lt;/code&gt; 후 &lt;code&gt;time&lt;/code&gt; (밀리 초).</target>
        </trans-unit>
        <trans-unit id="17e918478af63ce463699cc4ff1b23f883f95a9f" translate="yes" xml:space="preserve">
          <source>Sends a message to the given &lt;code&gt;dest&lt;/code&gt; and returns the message.</source>
          <target state="translated">지정된 &lt;code&gt;dest&lt;/code&gt; 에게 메시지를 보내고 메시지를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="b54fc6854b1a982d3c545edf5c557bc49fded778" translate="yes" xml:space="preserve">
          <source>Sends a message to the given &lt;code&gt;dest&lt;/code&gt;.</source>
          <target state="translated">주어진 &lt;code&gt;dest&lt;/code&gt; 에게 메시지를 보냅니다 .</target>
        </trans-unit>
        <trans-unit id="2cefd165c18081fd6fe91c82252ac408d3292fbd" translate="yes" xml:space="preserve">
          <source>Sends an asynchronous request to the &lt;code&gt;server&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;server&lt;/code&gt; 로 비동기 요청을 보냅니다 .</target>
        </trans-unit>
        <trans-unit id="ca5b7002363f9f0cca78f8e906c3aa3330d0ae12" translate="yes" xml:space="preserve">
          <source>Sends an exit signal with the given &lt;code&gt;reason&lt;/code&gt; to &lt;code&gt;pid&lt;/code&gt;.</source>
          <target state="translated">주어진 &lt;code&gt;reason&lt;/code&gt; 가 있는 종료 신호 를 &lt;code&gt;pid&lt;/code&gt; 로 보냅니다 .</target>
        </trans-unit>
        <trans-unit id="1e44ba6bd0968aeac7b6e9cefab2ddb65373d4d8" translate="yes" xml:space="preserve">
          <source>Sends cursor &lt;code&gt;columns&lt;/code&gt; to the left.</source>
          <target state="translated">커서 &lt;code&gt;columns&lt;/code&gt; 을 왼쪽으로 보냅니다 .</target>
        </trans-unit>
        <trans-unit id="7f6080a32049ff439b9da9800dd735d75c29d425" translate="yes" xml:space="preserve">
          <source>Sends cursor &lt;code&gt;columns&lt;/code&gt; to the right.</source>
          <target state="translated">커서 &lt;code&gt;columns&lt;/code&gt; 을 오른쪽으로 보냅니다 .</target>
        </trans-unit>
        <trans-unit id="6dbc5e735ac797de8a8c5b81a5251a5f1a283865" translate="yes" xml:space="preserve">
          <source>Sends cursor &lt;code&gt;lines&lt;/code&gt; down.</source>
          <target state="translated">커서 &lt;code&gt;lines&lt;/code&gt; 아래로 보냅니다 .</target>
        </trans-unit>
        <trans-unit id="b9a4e84d28ea3580244ab3256b50bd9efdbc0151" translate="yes" xml:space="preserve">
          <source>Sends cursor &lt;code&gt;lines&lt;/code&gt; up.</source>
          <target state="translated">커서 &lt;code&gt;lines&lt;/code&gt; 을 보냅니다 .</target>
        </trans-unit>
        <trans-unit id="bcec44f9ec6cb9df6688389583935ce809c35f6c" translate="yes" xml:space="preserve">
          <source>Sends cursor home.</source>
          <target state="translated">커서를 집으로 보냅니다.</target>
        </trans-unit>
        <trans-unit id="bc0e62df768087c38a6a36d743e8886f42bf3c96" translate="yes" xml:space="preserve">
          <source>Sends cursor to the absolute position specified by &lt;code&gt;line&lt;/code&gt; and &lt;code&gt;column&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;line&lt;/code&gt; 과 &lt;code&gt;column&lt;/code&gt; 에서 지정한 절대 위치로 커서를 보냅니다 .</target>
        </trans-unit>
        <trans-unit id="448ab73ba1c21e671e218fb91f2644c834f0c16f" translate="yes" xml:space="preserve">
          <source>Set</source>
          <target state="translated">Set</target>
        </trans-unit>
        <trans-unit id="9be72aa01b53dd3cf81dc5aa2dc80af2f415c3d0" translate="yes" xml:space="preserve">
          <source>Sets Mix debug mode.</source>
          <target state="translated">믹스 디버그 모드를 설정합니다.</target>
        </trans-unit>
        <trans-unit id="1d77307070c014b533b9d6cfd05431cb6f0b4261" translate="yes" xml:space="preserve">
          <source>Sets a callback to be executed after the completion of a test suite.</source>
          <target state="translated">테스트 스위트 완료 후 실행할 콜백을 설정합니다.</target>
        </trans-unit>
        <trans-unit id="95049291413df5043d39363ceb451c80a5958431" translate="yes" xml:space="preserve">
          <source>Sets a new &lt;code&gt;value&lt;/code&gt; for the environment variable &lt;code&gt;varname&lt;/code&gt;.</source>
          <target state="translated">환경 변수 &lt;code&gt;varname&lt;/code&gt; 의 새 &lt;code&gt;value&lt;/code&gt; 을 설정합니다 .</target>
        </trans-unit>
        <trans-unit id="df04ebaf2d3a8d6495161f70b69f8869f9593188" translate="yes" xml:space="preserve">
          <source>Sets a new value for each environment variable corresponding to each &lt;code&gt;{key, value}&lt;/code&gt; pair in &lt;code&gt;enum&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;enum&lt;/code&gt; 의 각 &lt;code&gt;{key, value}&lt;/code&gt; 쌍에 해당하는 각 환경 변수의 새 값을 설정합니다 .</target>
        </trans-unit>
        <trans-unit id="e9ab43d5de5cacd3bc561774001fd54e4bba2a96" translate="yes" xml:space="preserve">
          <source>Sets alternative font 1.</source>
          <target state="translated">대체 글꼴 1을 설정합니다.</target>
        </trans-unit>
        <trans-unit id="8edb8def9cdb97da70bf0451c00ff25555c70e10" translate="yes" xml:space="preserve">
          <source>Sets alternative font 2.</source>
          <target state="translated">대체 글꼴 2를 설정합니다.</target>
        </trans-unit>
        <trans-unit id="8d1ac9cd4cf8b0e229c6dda3c6ecd12e98303ed1" translate="yes" xml:space="preserve">
          <source>Sets alternative font 3.</source>
          <target state="translated">대체 글꼴 3을 설정합니다.</target>
        </trans-unit>
        <trans-unit id="7072854cf2f06837bfe9e42053b67d0885cc7381" translate="yes" xml:space="preserve">
          <source>Sets alternative font 4.</source>
          <target state="translated">대체 글꼴 4를 설정합니다.</target>
        </trans-unit>
        <trans-unit id="2aa48cc2b1893e137ef411ac32f856604cb77735" translate="yes" xml:space="preserve">
          <source>Sets alternative font 5.</source>
          <target state="translated">대체 글꼴 5를 설정합니다.</target>
        </trans-unit>
        <trans-unit id="39ca4c1a80bf153fcd9906082161dce28ef18160" translate="yes" xml:space="preserve">
          <source>Sets alternative font 6.</source>
          <target state="translated">대체 글꼴 6을 설정합니다.</target>
        </trans-unit>
        <trans-unit id="4215ec54612d026378660065215630d2d5625b02" translate="yes" xml:space="preserve">
          <source>Sets alternative font 7.</source>
          <target state="translated">대체 글꼴 7을 설정합니다.</target>
        </trans-unit>
        <trans-unit id="ad6d8612ae8881afaba1678731ca951e971a4545" translate="yes" xml:space="preserve">
          <source>Sets alternative font 8.</source>
          <target state="translated">대체 글꼴 8을 설정합니다.</target>
        </trans-unit>
        <trans-unit id="72c2cb3ddc59641afaf2b1648696085dca57354a" translate="yes" xml:space="preserve">
          <source>Sets alternative font 9.</source>
          <target state="translated">대체 글꼴 9를 설정합니다.</target>
        </trans-unit>
        <trans-unit id="8cc46141abbbe2bfc4a335984571ebea030f1f4e" translate="yes" xml:space="preserve">
          <source>Sets an environment variable value.</source>
          <target state="translated">환경 변수 값을 설정합니다.</target>
        </trans-unit>
        <trans-unit id="a826d74849fb62ee6a74ceb3b1cd7978be06262a" translate="yes" xml:space="preserve">
          <source>Sets background color to black.</source>
          <target state="translated">배경색을 검은 색으로 설정합니다.</target>
        </trans-unit>
        <trans-unit id="10d0c6b6216ecb182183e3e4490d75b331e5ac4e" translate="yes" xml:space="preserve">
          <source>Sets background color to blue.</source>
          <target state="translated">배경색을 파란색으로 설정합니다.</target>
        </trans-unit>
        <trans-unit id="d1c957999d6dba80218cf8c9e454329ec1c641b4" translate="yes" xml:space="preserve">
          <source>Sets background color to cyan.</source>
          <target state="translated">배경색을 청록색으로 설정합니다.</target>
        </trans-unit>
        <trans-unit id="465b2301d66d2ec0dd6aba721293763d3f5fbd3c" translate="yes" xml:space="preserve">
          <source>Sets background color to green.</source>
          <target state="translated">배경색을 녹색으로 설정합니다.</target>
        </trans-unit>
        <trans-unit id="fdef1c6739e5c7657622b69f885688ac2aaf4c09" translate="yes" xml:space="preserve">
          <source>Sets background color to light black.</source>
          <target state="translated">배경색을 연한 검정색으로 설정합니다.</target>
        </trans-unit>
        <trans-unit id="6174513109caa31b77c1be107e7629e5ce50fce3" translate="yes" xml:space="preserve">
          <source>Sets background color to light blue.</source>
          <target state="translated">배경색을 하늘색으로 설정합니다.</target>
        </trans-unit>
        <trans-unit id="03c66b8d8e716ec6c1fecb339dadb258b6f11e36" translate="yes" xml:space="preserve">
          <source>Sets background color to light cyan.</source>
          <target state="translated">배경색을 밝은 청록색으로 설정합니다.</target>
        </trans-unit>
        <trans-unit id="470bff16eaf6d3fe0e9511cc22903bf7199b64f9" translate="yes" xml:space="preserve">
          <source>Sets background color to light green.</source>
          <target state="translated">배경색을 연한 녹색으로 설정합니다.</target>
        </trans-unit>
        <trans-unit id="c39a6cde4a6acc3a0d5beb27b16ee1f4c511d012" translate="yes" xml:space="preserve">
          <source>Sets background color to light magenta.</source>
          <target state="translated">배경색을 밝은 자홍색으로 설정합니다.</target>
        </trans-unit>
        <trans-unit id="111295dc77fed13435d084cb4401ea78ad5738ad" translate="yes" xml:space="preserve">
          <source>Sets background color to light red.</source>
          <target state="translated">배경색을 밝은 빨강으로 설정합니다.</target>
        </trans-unit>
        <trans-unit id="9ad6ecd81399c88b626b837ebb871a3c9b0bb23f" translate="yes" xml:space="preserve">
          <source>Sets background color to light white.</source>
          <target state="translated">배경색을 연한 흰색으로 설정합니다.</target>
        </trans-unit>
        <trans-unit id="a9206206a115c985d751db2969e98ef4a03e0264" translate="yes" xml:space="preserve">
          <source>Sets background color to light yellow.</source>
          <target state="translated">배경색을 밝은 노란색으로 설정합니다.</target>
        </trans-unit>
        <trans-unit id="8a1777285d3d09b9e1d76c7f8cd49f56a1573623" translate="yes" xml:space="preserve">
          <source>Sets background color to magenta.</source>
          <target state="translated">배경색을 자홍색으로 설정합니다.</target>
        </trans-unit>
        <trans-unit id="adca10d1c7b344189df9fae05a24c1bd96a1d92d" translate="yes" xml:space="preserve">
          <source>Sets background color to red.</source>
          <target state="translated">배경색을 빨간색으로 설정합니다.</target>
        </trans-unit>
        <trans-unit id="b2c0cffecb0fad25ca47ab11177e30d0c791deeb" translate="yes" xml:space="preserve">
          <source>Sets background color to white.</source>
          <target state="translated">배경색을 흰색으로 설정합니다.</target>
        </trans-unit>
        <trans-unit id="b1bdfb344a41cbd6621586aef35110ba60881a19" translate="yes" xml:space="preserve">
          <source>Sets background color to yellow.</source>
          <target state="translated">배경색을 노란색으로 설정합니다.</target>
        </trans-unit>
        <trans-unit id="23e5897be4d76f7fd4bcf26d66bb09668bfae14d" translate="yes" xml:space="preserve">
          <source>Sets background color.</source>
          <target state="translated">배경색을 설정합니다.</target>
        </trans-unit>
        <trans-unit id="b0e963b8a639f7cfa8a928aa5ef30a18f01b8b76" translate="yes" xml:space="preserve">
          <source>Sets compilation options.</source>
          <target state="translated">컴파일 옵션을 설정합니다.</target>
        </trans-unit>
        <trans-unit id="4af3191878353787f09804a940963cda289d2d58" translate="yes" xml:space="preserve">
          <source>Sets foreground color to black.</source>
          <target state="translated">전경색을 검은 색으로 설정합니다.</target>
        </trans-unit>
        <trans-unit id="9693e9447a4e2e975813685e987ef317a4f373d1" translate="yes" xml:space="preserve">
          <source>Sets foreground color to blue.</source>
          <target state="translated">전경색을 파란색으로 설정합니다.</target>
        </trans-unit>
        <trans-unit id="e44fc44fed1f585a9fb08e38ac54d6f386d53ac5" translate="yes" xml:space="preserve">
          <source>Sets foreground color to cyan.</source>
          <target state="translated">전경색을 청록색으로 설정합니다.</target>
        </trans-unit>
        <trans-unit id="6c8d3d784036e97c3c14e6d5155a1952076959ea" translate="yes" xml:space="preserve">
          <source>Sets foreground color to green.</source>
          <target state="translated">전경색을 녹색으로 설정합니다.</target>
        </trans-unit>
        <trans-unit id="4643e7e7d60ef13b2f47d12231b5f29dc03d16e3" translate="yes" xml:space="preserve">
          <source>Sets foreground color to light black.</source>
          <target state="translated">전경색을 연한 검정색으로 설정합니다.</target>
        </trans-unit>
        <trans-unit id="a1be063da145c5ab4439b40cb811d8dbef34898c" translate="yes" xml:space="preserve">
          <source>Sets foreground color to light blue.</source>
          <target state="translated">전경색을 하늘색으로 설정합니다.</target>
        </trans-unit>
        <trans-unit id="08f981db1719b08b000707738b3ef9fc3d0c75d3" translate="yes" xml:space="preserve">
          <source>Sets foreground color to light cyan.</source>
          <target state="translated">전경색을 밝은 청록색으로 설정합니다.</target>
        </trans-unit>
        <trans-unit id="104b8231f209bfbf0b97108717afda2f1750e5d3" translate="yes" xml:space="preserve">
          <source>Sets foreground color to light green.</source>
          <target state="translated">전경색을 연한 녹색으로 설정합니다.</target>
        </trans-unit>
        <trans-unit id="9db34278c7284edbd42cf0cfc89abc1fb83132ee" translate="yes" xml:space="preserve">
          <source>Sets foreground color to light magenta.</source>
          <target state="translated">전경색을 연한 자홍으로 설정합니다.</target>
        </trans-unit>
        <trans-unit id="db32a2537ecf889b0b1e5629fd7f42272fcb8fb5" translate="yes" xml:space="preserve">
          <source>Sets foreground color to light red.</source>
          <target state="translated">전경색을 밝은 빨강으로 설정합니다.</target>
        </trans-unit>
        <trans-unit id="72d00d975399756fdaf345e4284802fef4f90f59" translate="yes" xml:space="preserve">
          <source>Sets foreground color to light white.</source>
          <target state="translated">전경색을 연한 흰색으로 설정합니다.</target>
        </trans-unit>
        <trans-unit id="30c5f586e9b9108513eabb3254f8b2f1c79928cf" translate="yes" xml:space="preserve">
          <source>Sets foreground color to light yellow.</source>
          <target state="translated">전경색을 밝은 노란색으로 설정합니다.</target>
        </trans-unit>
        <trans-unit id="6abe9f60e85e97f2db25eaee46be72b5178bd4ac" translate="yes" xml:space="preserve">
          <source>Sets foreground color to magenta.</source>
          <target state="translated">전경색을 자홍색으로 설정합니다.</target>
        </trans-unit>
        <trans-unit id="0f1aec19bba5405d7e33275e8d1e98684627bc08" translate="yes" xml:space="preserve">
          <source>Sets foreground color to red.</source>
          <target state="translated">전경색을 빨간색으로 설정합니다.</target>
        </trans-unit>
        <trans-unit id="137be52a07b0514fd13837fd0050db9f38fd3616" translate="yes" xml:space="preserve">
          <source>Sets foreground color to white.</source>
          <target state="translated">전경색을 흰색으로 설정합니다.</target>
        </trans-unit>
        <trans-unit id="2056c5a1cef57a1806341bd57931cd7718d0b632" translate="yes" xml:space="preserve">
          <source>Sets foreground color to yellow.</source>
          <target state="translated">전경색을 노란색으로 설정합니다.</target>
        </trans-unit>
        <trans-unit id="9d088fae2dd79b40a794415b1ccbd5f28b7b2072" translate="yes" xml:space="preserve">
          <source>Sets foreground color.</source>
          <target state="translated">전경색을 설정합니다.</target>
        </trans-unit>
        <trans-unit id="138c11b17735272c60f9c50b24086509b686f1f3" translate="yes" xml:space="preserve">
          <source>Sets multiple environment variables.</source>
          <target state="translated">여러 환경 변수를 설정합니다.</target>
        </trans-unit>
        <trans-unit id="68c33adeac89d23e6d5c99a05bcb4768a7c7a0e8" translate="yes" xml:space="preserve">
          <source>Sets primary (default) font.</source>
          <target state="translated">기본 (기본) 글꼴을 설정합니다.</target>
        </trans-unit>
        <trans-unit id="e3fdb4abe2997f749409b0d03703a7b121cc9bd8" translate="yes" xml:space="preserve">
          <source>Sets the background color from individual RGB values.</source>
          <target state="translated">개별 RGB 값에서 배경색을 설정합니다.</target>
        </trans-unit>
        <trans-unit id="bc55385c692fce0d395e0b8027824e31b2766460" translate="yes" xml:space="preserve">
          <source>Sets the current shell.</source>
          <target state="translated">현재 쉘을 설정합니다.</target>
        </trans-unit>
        <trans-unit id="74d40df198b56abc05f8ae6474de9b6ea08c8551" translate="yes" xml:space="preserve">
          <source>Sets the current time zone database.</source>
          <target state="translated">현재 시간대 데이터베이스를 설정합니다.</target>
        </trans-unit>
        <trans-unit id="0d9058661731fe47ca5d9563f7f21cf061409cb2" translate="yes" xml:space="preserve">
          <source>Sets the current working directory.</source>
          <target state="translated">현재 작업 디렉토리를 설정합니다.</target>
        </trans-unit>
        <trans-unit id="0481389a90a61b6c7c4ff7d6f8792d81ecb8db2e" translate="yes" xml:space="preserve">
          <source>Sets the foreground color from individual RGB values.</source>
          <target state="translated">개별 RGB 값에서 전경색을 설정합니다.</target>
        </trans-unit>
        <trans-unit id="4544a9510feb0bb4447692b76f601f1678a0ecba" translate="yes" xml:space="preserve">
          <source>Sets the given &lt;code&gt;flag&lt;/code&gt; to &lt;code&gt;value&lt;/code&gt; for the calling process.</source>
          <target state="translated">주어진 &lt;code&gt;flag&lt;/code&gt; 를 호출 프로세스에 대한 &lt;code&gt;value&lt;/code&gt; 설정합니다 .</target>
        </trans-unit>
        <trans-unit id="51027f581acba990017f79f26cef0236eb4184ea" translate="yes" xml:space="preserve">
          <source>Sets the given &lt;code&gt;flag&lt;/code&gt; to &lt;code&gt;value&lt;/code&gt; for the given process &lt;code&gt;pid&lt;/code&gt;.</source>
          <target state="translated">지정된 프로세스 &lt;code&gt;pid&lt;/code&gt; 의 지정된 &lt;code&gt;flag&lt;/code&gt; 를 &lt;code&gt;value&lt;/code&gt; 설정합니다 .</target>
        </trans-unit>
        <trans-unit id="5c02ad6423bb5f9510d26c0e48d4dc2436660ce3" translate="yes" xml:space="preserve">
          <source>Sets the group leader of the given &lt;code&gt;pid&lt;/code&gt; to &lt;code&gt;leader&lt;/code&gt;.</source>
          <target state="translated">주어진의 그룹 리더 설정 &lt;code&gt;pid&lt;/code&gt; 에 &lt;code&gt;leader&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="ee2d768284181cfd0a76ff1eedd982eeb0cd8f49" translate="yes" xml:space="preserve">
          <source>Sets the magic cookie of &lt;code&gt;node&lt;/code&gt; to the atom &lt;code&gt;cookie&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;node&lt;/code&gt; 의 magic 쿠키를 atom &lt;code&gt;cookie&lt;/code&gt; 설정합니다 .</target>
        </trans-unit>
        <trans-unit id="a730a55e3da87bcb0378535ef9cec7bda9822337" translate="yes" xml:space="preserve">
          <source>Sets the number of pending stops in the breakpoint with the given &lt;code&gt;id&lt;/code&gt; to zero.</source>
          <target state="translated">주어진 &lt;code&gt;id&lt;/code&gt; 를 가진 중단 점에서 보류중인 중지 수 를 0으로 설정합니다.</target>
        </trans-unit>
        <trans-unit id="4dd8c9f35b81d47b86870fbb320fb9caa4087ba5" translate="yes" xml:space="preserve">
          <source>Sets the number of pending stops in the given module, function and arity to zero.</source>
          <target state="translated">지정된 모듈, 기능 및 특성에서 보류중인 중지 수를 0으로 설정합니다.</target>
        </trans-unit>
        <trans-unit id="5526d1cab96d796578c11fabfff9398f5447f063" translate="yes" xml:space="preserve">
          <source>Sets up a breakpoint in &lt;code&gt;module&lt;/code&gt;, &lt;code&gt;function&lt;/code&gt; and &lt;code&gt;arity&lt;/code&gt; with the given number of &lt;code&gt;stops&lt;/code&gt;.</source>
          <target state="translated">주어진 &lt;code&gt;stops&lt;/code&gt; 횟수로 &lt;code&gt;module&lt;/code&gt; , &lt;code&gt;function&lt;/code&gt; 및 &lt;code&gt;arity&lt;/code&gt; 에 중단 점을 설정 합니다 .</target>
        </trans-unit>
        <trans-unit id="5ff2890da0c6af3803e3733c3157cb74c62b5167" translate="yes" xml:space="preserve">
          <source>Sets, maps, and other dictionaries can also be given to the &lt;code&gt;:into&lt;/code&gt; option. In general, &lt;code&gt;:into&lt;/code&gt; accepts any structure that implements the &lt;a href=&quot;https://hexdocs.pm/elixir/Collectable.html&quot;&gt;&lt;code&gt;Collectable&lt;/code&gt;&lt;/a&gt; protocol.</source>
          <target state="translated">세트, 맵 및 기타 사전도 &lt;code&gt;:into&lt;/code&gt; 옵션에 제공 할 수 있습니다 . 일반적으로 &lt;code&gt;:into&lt;/code&gt; 는 &lt;a href=&quot;https://hexdocs.pm/elixir/Collectable.html&quot;&gt; &lt;code&gt;Collectable&lt;/code&gt; &lt;/a&gt; 프로토콜 을 구현하는 모든 구조 를 허용 합니다.</target>
        </trans-unit>
        <trans-unit id="bd4535505c2417e61961a7113d0eafce3cb64c39" translate="yes" xml:space="preserve">
          <source>Setting &lt;code&gt;:trap_exit&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; - trapping exits should be used only in special circumstances as it would make your process immune to not only exits from the task but from any other processes.</source>
          <target state="translated">&lt;code&gt;:trap_exit&lt;/code&gt; 를 &lt;code&gt;true&lt;/code&gt; 로 설정 -트래핑 엑시트는 프로세스가 태스크뿐만 아니라 다른 프로세스에서도 엑시트되지 않도록 특수한 상황에서만 사용해야합니다.</target>
        </trans-unit>
        <trans-unit id="d6289491eaac788284614dd116bb32674dddf31b" translate="yes" xml:space="preserve">
          <source>Setting variables or importing modules in IEx does not affect the caller's environment. However, sending and receiving messages will change the process state.</source>
          <target state="translated">IEx에서 변수를 설정하거나 모듈을 가져 오는 것은 호출자의 환경에 영향을 미치지 않습니다. 그러나 메시지를주고 받으면 프로세스 상태가 변경됩니다.</target>
        </trans-unit>
        <trans-unit id="acd658415e3f4cbdae905269541fc503e941566c" translate="yes" xml:space="preserve">
          <source>Several environment variables can be used to modify Mix's behaviour.</source>
          <target state="translated">믹스의 동작을 수정하기 위해 여러 환경 변수를 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="1511667d6b259adc4e62f0970e71e5fc502c0dde" translate="yes" xml:space="preserve">
          <source>Shared options</source>
          <target state="translated">공유 옵션</target>
        </trans-unit>
        <trans-unit id="47bf46e89ff4eb081f0b726f66e98d60c275fcf4" translate="yes" xml:space="preserve">
          <source>Shared state in tests</source>
          <target state="translated">테스트에서 공유 상태</target>
        </trans-unit>
        <trans-unit id="15226b1f30cdb72557e1cfce27d2920a8525c275" translate="yes" xml:space="preserve">
          <source>Shell commands</source>
          <target state="translated">쉘 명령</target>
        </trans-unit>
        <trans-unit id="6fce86e296dfabdc486d69f2a4bdabf524c07784" translate="yes" xml:space="preserve">
          <source>Shell history</source>
          <target state="translated">쉘 역사</target>
        </trans-unit>
        <trans-unit id="3b7bc055d42cb5ee445b4629591b6c7ce151525c" translate="yes" xml:space="preserve">
          <source>Shortcut Syntax</source>
          <target state="translated">바로 가기 구문</target>
        </trans-unit>
        <trans-unit id="bff5c401cba317d37dd02f3bf20eb021a9a7d880" translate="yes" xml:space="preserve">
          <source>Shortcut to &lt;code&gt;chunk_every(enum, count, count)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;chunk_every(enum, count, count)&lt;/code&gt; 바로 가기 .</target>
        </trans-unit>
        <trans-unit id="d799f33666a25c03f217b3a7fec86053786d518a" translate="yes" xml:space="preserve">
          <source>Shortcut to &lt;code&gt;chunk_every(enumerable, count, count)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;chunk_every(enumerable, count, count)&lt;/code&gt; 바로 가기 .</target>
        </trans-unit>
        <trans-unit id="3772f76c5efeb817b41e59c6169f0a12a5138e18" translate="yes" xml:space="preserve">
          <source>Should be called with the &lt;code&gt;enumerable&lt;/code&gt; element and the accumulator contents.</source>
          <target state="translated">&lt;code&gt;enumerable&lt;/code&gt; 요소와 누산기 내용 으로 호출해야합니다 .</target>
        </trans-unit>
        <trans-unit id="eaf3c5d30de589fe59588a546de2d175706c0a28" translate="yes" xml:space="preserve">
          <source>Should return &lt;code&gt;true&lt;/code&gt; if the given date describes a proper date in the calendar.</source>
          <target state="translated">주어진 날짜가 달력에서 적절한 날짜를 나타내는 경우 &lt;code&gt;true&lt;/code&gt; 를 반환해야 합니다 .</target>
        </trans-unit>
        <trans-unit id="f80193079cddaf6297db3a4d414717fac1a93d52" translate="yes" xml:space="preserve">
          <source>Should return &lt;code&gt;true&lt;/code&gt; if the given time describes a proper time in the calendar.</source>
          <target state="translated">주어진 시간이 달력에서 적절한 시간을 나타내는 경우 &lt;code&gt;true&lt;/code&gt; 를 반환해야 합니다 .</target>
        </trans-unit>
        <trans-unit id="cbf43a01a6c566cc924430796428a82791fb3321" translate="yes" xml:space="preserve">
          <source>Shutdown values (:shutdown)</source>
          <target state="translated">종료 값 (: 종료)</target>
        </trans-unit>
        <trans-unit id="48d45e15f28f53d164bd6ccb48a540af8d866b66" translate="yes" xml:space="preserve">
          <source>Shutdown values (&lt;code&gt;:shutdown&lt;/code&gt;)</source>
          <target state="translated">종료 값 ( &lt;code&gt;:shutdown&lt;/code&gt; )</target>
        </trans-unit>
        <trans-unit id="4bebc37beab3e41d0359e7a912db5b152d7f9a2a" translate="yes" xml:space="preserve">
          <source>Shutting down a live system cleanly can be done by calling &lt;a href=&quot;system#stop/1&quot;&gt;&lt;code&gt;System.stop/1&lt;/code&gt;&lt;/a&gt;. It will shut down every application in the opposite order they had been started.</source>
          <target state="translated">&lt;a href=&quot;system#stop/1&quot;&gt; &lt;code&gt;System.stop/1&lt;/code&gt; &lt;/a&gt; 을 호출하여 라이브 시스템을 완전히 종료 할 수 있습니다 . 시작된 반대 순서로 모든 응용 프로그램을 종료합니다.</target>
        </trans-unit>
        <trans-unit id="9495787c0b2e930e3fb428c17f97a16d333de82b" translate="yes" xml:space="preserve">
          <source>Sigils</source>
          <target state="translated">Sigils</target>
        </trans-unit>
        <trans-unit id="093f8622874818f518acf108d0ec2fc97a25f178" translate="yes" xml:space="preserve">
          <source>Sigils also support heredocs, that is, triple double- or single-quotes as separators:</source>
          <target state="translated">Sigils는 heredocs, 즉 구분 기호로 삼중 큰 따옴표 또는 작은 따옴표를 지원합니다.</target>
        </trans-unit>
        <trans-unit id="5c6cf440097cb0b13b54bff0118fbd4058653ed5" translate="yes" xml:space="preserve">
          <source>Sigils are useful to encode text with their own escaping rules, such as regular expressions, datetimes, etc.</source>
          <target state="translated">Sigils는 정규 표현식, 날짜 시간 등과 같은 자체 이스케이프 규칙으로 텍스트를 인코딩하는 데 유용합니다.</target>
        </trans-unit>
        <trans-unit id="fc9770922e8235e07af434b1817bb43b4b551610" translate="yes" xml:space="preserve">
          <source>Sigils can also be used to do compile-time work with the help of macros. For example, regular expressions in Elixir are compiled into an efficient representation during compilation of the source code, therefore skipping this step at runtime. If you&amp;rsquo;re interested in the subject, we recommend you learn more about macros and check out how sigils are implemented in the &lt;code&gt;Kernel&lt;/code&gt; module (where the &lt;code&gt;sigil_*&lt;/code&gt; functions are defined).</source>
          <target state="translated">Sigils는 매크로를 사용하여 컴파일 타임 작업을 수행하는 데에도 사용할 수 있습니다. 예를 들어, Elixir의 정규 표현식은 소스 코드를 컴파일하는 동안 효율적인 표현으로 컴파일되므로 런타임시이 단계를 건너 뜁니다. 주제에 관심이 있다면 매크로에 대해 더 배우고 &lt;code&gt;Kernel&lt;/code&gt; 모듈 ( &lt;code&gt;sigil_*&lt;/code&gt; 함수가 정의 된) 에서 시길 이 어떻게 구현되는지 확인하는 것이 좋습니다 .</target>
        </trans-unit>
        <trans-unit id="6a856a592437bb8bd2bfbbd8383e2fec047cb719" translate="yes" xml:space="preserve">
          <source>Sigils start with &lt;code&gt;~&lt;/code&gt; and are followed by a letter and one of the following pairs:</source>
          <target state="translated">Sigils는 &lt;code&gt;~&lt;/code&gt; 로 시작하고 그 뒤에 문자와 다음 쌍 중 하나가옵니다.</target>
        </trans-unit>
        <trans-unit id="8b3d8d665a765918b70a3f5f0378d51df00b92dd" translate="yes" xml:space="preserve">
          <source>Sign</source>
          <target state="translated">Sign</target>
        </trans-unit>
        <trans-unit id="83755b5bb4d8f50108c88dbf26b3cd7060bdd814" translate="yes" xml:space="preserve">
          <source>Similar results can be achieved with the string concatenation operator &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt;:</source>
          <target state="translated">문자열 연결 연산자 &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt; 를 사용하여 비슷한 결과를 얻을 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="680a08604d41ca47d86f103212437a67e75222e6" translate="yes" xml:space="preserve">
          <source>Similar to &lt;a href=&quot;#defmacrop/2&quot;&gt;&lt;code&gt;defmacrop/2&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#defguardp/1&quot;&gt;&lt;code&gt;defguardp/1&lt;/code&gt;&lt;/a&gt; must be defined before its use in the current module.</source>
          <target state="translated">유사 &lt;a href=&quot;#defmacrop/2&quot;&gt; &lt;code&gt;defmacrop/2&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;#defguardp/1&quot;&gt; &lt;code&gt;defguardp/1&lt;/code&gt; &lt;/a&gt; 현재 모듈에서 그것의 사용 전에 정의되어야한다.</target>
        </trans-unit>
        <trans-unit id="3a4528cdf8fb4e2486a93c3402abd54f52d95d7d" translate="yes" xml:space="preserve">
          <source>Similar to &lt;a href=&quot;#ensure_compiled/1&quot;&gt;&lt;code&gt;ensure_compiled/1&lt;/code&gt;&lt;/a&gt;, but returns &lt;code&gt;true&lt;/code&gt; if the module is already loaded or was successfully loaded and compiled. Returns &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="translated">&lt;a href=&quot;#ensure_compiled/1&quot;&gt; &lt;code&gt;ensure_compiled/1&lt;/code&gt; &lt;/a&gt; 과 유사 하지만 모듈이 이미로드되었거나 성공적으로로드 및 컴파일 된 경우 &lt;code&gt;true&lt;/code&gt; 를 반환 합니다 . 반환 &lt;code&gt;false&lt;/code&gt; 이 없습니다.</target>
        </trans-unit>
        <trans-unit id="d8d26b0dd0bc64203103e9942583d4ea3210f692" translate="yes" xml:space="preserve">
          <source>Similar to &lt;a href=&quot;#ensure_loaded/1&quot;&gt;&lt;code&gt;ensure_loaded/1&lt;/code&gt;&lt;/a&gt;, but returns &lt;code&gt;true&lt;/code&gt; if the module is already loaded or was successfully loaded. Returns &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="translated">&lt;a href=&quot;#ensure_loaded/1&quot;&gt; &lt;code&gt;ensure_loaded/1&lt;/code&gt; &lt;/a&gt; 과 유사 하지만 모듈이 이미로드되었거나 성공적으로로드 된 경우 &lt;code&gt;true&lt;/code&gt; 를 반환 합니다 . 반환 &lt;code&gt;false&lt;/code&gt; 이 없습니다.</target>
        </trans-unit>
        <trans-unit id="671b3de2f1f9e1bc01bc7256b906ac67b5dbc5aa" translate="yes" xml:space="preserve">
          <source>Similar to &lt;a href=&quot;#find/3&quot;&gt;&lt;code&gt;find/3&lt;/code&gt;&lt;/a&gt;, but returns the index (zero-based) of the element instead of the element itself.</source>
          <target state="translated">&lt;a href=&quot;#find/3&quot;&gt; &lt;code&gt;find/3&lt;/code&gt; &lt;/a&gt; 와 유사 하지만 요소 자체 대신 요소의 인덱스 (0부터 시작)를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="ed983810dcc745a1edc28d41dbf198f45ff86a26" translate="yes" xml:space="preserve">
          <source>Similar to &lt;a href=&quot;#find/3&quot;&gt;&lt;code&gt;find/3&lt;/code&gt;&lt;/a&gt;, but returns the value of the function invocation instead of the element itself.</source>
          <target state="translated">&lt;a href=&quot;#find/3&quot;&gt; &lt;code&gt;find/3&lt;/code&gt; &lt;/a&gt; 와 유사 하지만 요소 자체 대신 함수 호출 값을 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="cb0ea66cf26fd48568417afc7388e0fe5e4a0cfe" translate="yes" xml:space="preserve">
          <source>Similar to &lt;a href=&quot;#key/2&quot;&gt;&lt;code&gt;key/2&lt;/code&gt;&lt;/a&gt;, but the returned function raises if the key does not exist.</source>
          <target state="translated">&lt;a href=&quot;#key/2&quot;&gt; &lt;code&gt;key/2&lt;/code&gt; &lt;/a&gt; 와 유사 하지만 키가 없으면 리턴 된 함수가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="0e30d8489677f14c1a6e61f63b887f618946e277" translate="yes" xml:space="preserve">
          <source>Similar to &lt;a href=&quot;#open/2&quot;&gt;&lt;code&gt;open/2&lt;/code&gt;&lt;/a&gt; but expects a function as its last argument.</source>
          <target state="translated">유사 &lt;a href=&quot;#open/2&quot;&gt; &lt;code&gt;open/2&lt;/code&gt; &lt;/a&gt; 하지만 마지막 인수로 함수를 기대하고있다.</target>
        </trans-unit>
        <trans-unit id="9a017555f9bfef427f80d7907bb1a0b56d3fc6f0" translate="yes" xml:space="preserve">
          <source>Similar to &lt;a href=&quot;#open/2&quot;&gt;&lt;code&gt;open/2&lt;/code&gt;&lt;/a&gt; but raises a &lt;a href=&quot;file.error&quot;&gt;&lt;code&gt;File.Error&lt;/code&gt;&lt;/a&gt; exception if the file could not be opened. Returns the IO device otherwise.</source>
          <target state="translated">유사 &lt;a href=&quot;#open/2&quot;&gt; &lt;code&gt;open/2&lt;/code&gt; &lt;/a&gt; 하지만 제기 &lt;a href=&quot;file.error&quot;&gt; &lt;code&gt;File.Error&lt;/code&gt; 의&lt;/a&gt; 파일을 열 수없는 경우 예외를. 그렇지 않으면 IO 장치를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="fa8f09aee13c03e4fa19ccdc0e8643206d67f367" translate="yes" xml:space="preserve">
          <source>Similar to &lt;a href=&quot;#open/3&quot;&gt;&lt;code&gt;open/3&lt;/code&gt;&lt;/a&gt; but raises a &lt;a href=&quot;file.error&quot;&gt;&lt;code&gt;File.Error&lt;/code&gt;&lt;/a&gt; exception if the file could not be opened.</source>
          <target state="translated">유사 &lt;a href=&quot;#open/3&quot;&gt; &lt;code&gt;open/3&lt;/code&gt; &lt;/a&gt; 하지만 제기 &lt;a href=&quot;file.error&quot;&gt; &lt;code&gt;File.Error&lt;/code&gt; 의&lt;/a&gt; 파일을 열 수없는 경우 예외를.</target>
        </trans-unit>
        <trans-unit id="0c7612d9e10f8bbba6b6e71ca68dcee1c3c8ada0" translate="yes" xml:space="preserve">
          <source>Similar to &lt;a href=&quot;#parse/2&quot;&gt;&lt;code&gt;parse/2&lt;/code&gt;&lt;/a&gt; but only parses the head of &lt;code&gt;argv&lt;/code&gt;; as soon as it finds a non-switch, it stops parsing.</source>
          <target state="translated">&lt;a href=&quot;#parse/2&quot;&gt; &lt;code&gt;parse/2&lt;/code&gt; &lt;/a&gt; 와 유사 하지만 &lt;code&gt;argv&lt;/code&gt; 의 헤드 만 구문 분석합니다 . 스위치가 아닌 것을 발견하면 구문 분석이 중지됩니다.</target>
        </trans-unit>
        <trans-unit id="86e0d7ca33894f72508f1acefed15f61bc326aa6" translate="yes" xml:space="preserve">
          <source>Similar to &lt;a href=&quot;#start_child/2&quot;&gt;&lt;code&gt;start_child/2&lt;/code&gt;&lt;/a&gt; except the task is specified by the given &lt;code&gt;module&lt;/code&gt;, &lt;code&gt;fun&lt;/code&gt; and &lt;code&gt;args&lt;/code&gt;.</source>
          <target state="translated">주어진 &lt;code&gt;module&lt;/code&gt; , &lt;code&gt;fun&lt;/code&gt; 및 &lt;code&gt;args&lt;/code&gt; 에 의해 작업이 지정된다는 점을 제외하고 &lt;a href=&quot;#start_child/2&quot;&gt; &lt;code&gt;start_child/2&lt;/code&gt; &lt;/a&gt; 와 유사합니다 .</target>
        </trans-unit>
        <trans-unit id="fffdeb395a71dd9c69be0df6ed520f0f8929cdac" translate="yes" xml:space="preserve">
          <source>Similar to &lt;a href=&quot;#start_link/2&quot;&gt;&lt;code&gt;start_link/2&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#init/2&quot;&gt;&lt;code&gt;init/2&lt;/code&gt;&lt;/a&gt;, it expects a &lt;code&gt;module&lt;/code&gt;, &lt;code&gt;{module, arg}&lt;/code&gt; or a map as the child specification. If a module is given, the specification is retrieved by calling &lt;code&gt;module.child_spec(arg)&lt;/code&gt;.</source>
          <target state="translated">유사 &lt;a href=&quot;#start_link/2&quot;&gt; &lt;code&gt;start_link/2&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;#init/2&quot;&gt; &lt;code&gt;init/2&lt;/code&gt; &lt;/a&gt; , 그것은 예상 &lt;code&gt;module&lt;/code&gt; , &lt;code&gt;{module, arg}&lt;/code&gt; 또는 하위 사양으로지도. 모듈이 제공되면, &lt;code&gt;module.child_spec(arg)&lt;/code&gt; 호출하여 스펙을 검색합니다 .</target>
        </trans-unit>
        <trans-unit id="4f96191ac218da513737f46d949226677e297839" translate="yes" xml:space="preserve">
          <source>Similar to &lt;a href=&quot;#struct/2&quot;&gt;&lt;code&gt;struct/2&lt;/code&gt;&lt;/a&gt; but checks for key validity.</source>
          <target state="translated">&lt;a href=&quot;#struct/2&quot;&gt; &lt;code&gt;struct/2&lt;/code&gt; &lt;/a&gt; 와 유사 하지만 키 유효성을 검사합니다.</target>
        </trans-unit>
        <trans-unit id="544d28beafeb6ba6440bbbfe15ff61212ffb6825" translate="yes" xml:space="preserve">
          <source>Similar to &lt;a href=&quot;#transform/3&quot;&gt;&lt;code&gt;transform/3&lt;/code&gt;&lt;/a&gt; but the initial accumulated value is computed lazily via &lt;code&gt;start_fun&lt;/code&gt; and executes an &lt;code&gt;after_fun&lt;/code&gt; at the end of enumeration (both in cases of success and failure).</source>
          <target state="translated">&lt;a href=&quot;#transform/3&quot;&gt; &lt;code&gt;transform/3&lt;/code&gt; &lt;/a&gt; 유사 하지만 초기 누적 값은 &lt;code&gt;start_fun&lt;/code&gt; 을 통해 느리게 계산되며 열거 종료시 (성공 및 실패의 경우) &lt;code&gt;after_fun&lt;/code&gt; 을 실행합니다 .</target>
        </trans-unit>
        <trans-unit id="31f64163363b89c1b2d96b23c5caf03b42260cad" translate="yes" xml:space="preserve">
          <source>Similar to &lt;a href=&quot;#unquote/1&quot;&gt;&lt;code&gt;unquote/1&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#unquote/1&quot;&gt; &lt;code&gt;unquote/1&lt;/code&gt; 과&lt;/a&gt; 유사합니다 .</target>
        </trans-unit>
        <trans-unit id="a4bad9ce5e5e51929cb2b375dafa5b7519c51fcd" translate="yes" xml:space="preserve">
          <source>Similar to &lt;a href=&quot;date#convert/2&quot;&gt;&lt;code&gt;Date.convert/2&lt;/code&gt;&lt;/a&gt;, but raises an &lt;a href=&quot;argumenterror&quot;&gt;&lt;code&gt;ArgumentError&lt;/code&gt;&lt;/a&gt; if the conversion between the two calendars is not possible.</source>
          <target state="translated">&lt;a href=&quot;date#convert/2&quot;&gt; &lt;code&gt;Date.convert/2&lt;/code&gt; &lt;/a&gt; 와 유사 하지만 두 달력 간 변환이 불가능한 경우 &lt;a href=&quot;argumenterror&quot;&gt; &lt;code&gt;ArgumentError&lt;/code&gt; 가&lt;/a&gt; 발생합니다.</target>
        </trans-unit>
        <trans-unit id="49dab40556418138d9a746ed4e7aec86ea69773a" translate="yes" xml:space="preserve">
          <source>Similar to &lt;a href=&quot;kernel#defmodule/2&quot;&gt;&lt;code&gt;Kernel.defmodule/2&lt;/code&gt;&lt;/a&gt;, the binary will only be written to disk as a &lt;code&gt;.beam&lt;/code&gt; file if &lt;a href=&quot;module#create/3&quot;&gt;&lt;code&gt;Module.create/3&lt;/code&gt;&lt;/a&gt; is invoked in a file that is currently being compiled.</source>
          <target state="translated">&lt;a href=&quot;kernel#defmodule/2&quot;&gt; &lt;code&gt;Kernel.defmodule/2&lt;/code&gt; &lt;/a&gt; 와 유사하게 , 바이너리 는 현재 컴파일되고있는 파일에서 &lt;a href=&quot;module#create/3&quot;&gt; &lt;code&gt;Module.create/3&lt;/code&gt; &lt;/a&gt; 가 호출 된 경우 에만 디스크에 &lt;code&gt;.beam&lt;/code&gt; 파일 로 기록됩니다 .</target>
        </trans-unit>
        <trans-unit id="78ac4aae468baba341cc07ffa89a70612faee3d2" translate="yes" xml:space="preserve">
          <source>Similar to &lt;a href=&quot;supervisor&quot;&gt;&lt;code&gt;Supervisor&lt;/code&gt;&lt;/a&gt;, dynamic supervisors also support module-based supervisors.</source>
          <target state="translated">&lt;a href=&quot;supervisor&quot;&gt; &lt;code&gt;Supervisor&lt;/code&gt; &lt;/a&gt; 와 유사하게 동적 수퍼바이저는 모듈 기반 수퍼바이저도 지원합니다.</target>
        </trans-unit>
        <trans-unit id="12930727ef42425fe713d11813225cb176e88f5a" translate="yes" xml:space="preserve">
          <source>Similar to &lt;a href=&quot;time#convert/2&quot;&gt;&lt;code&gt;Time.convert/2&lt;/code&gt;&lt;/a&gt;, but raises an &lt;a href=&quot;argumenterror&quot;&gt;&lt;code&gt;ArgumentError&lt;/code&gt;&lt;/a&gt; if the conversion between the two calendars is not possible.</source>
          <target state="translated">&lt;a href=&quot;time#convert/2&quot;&gt; &lt;code&gt;Time.convert/2&lt;/code&gt; &lt;/a&gt; 와 유사 하지만 두 달력 간 변환이 불가능한 경우 &lt;a href=&quot;argumenterror&quot;&gt; &lt;code&gt;ArgumentError&lt;/code&gt; 가&lt;/a&gt; 발생합니다.</target>
        </trans-unit>
        <trans-unit id="a8b6ff3051123b6b61657f0295e50e9b9854f439" translate="yes" xml:space="preserve">
          <source>Similar to &lt;code&gt;IEx.pry/0&lt;/code&gt;, once a breakpoint is reached code execution stops until &lt;code&gt;continue&lt;/code&gt; is invoked. However, note &lt;code&gt;break!/2&lt;/code&gt; does not have access to aliases and imports from the debugged code as it works on the compiled artifact rather than on source.</source>
          <target state="translated">&lt;code&gt;IEx.pry/0&lt;/code&gt; 과 유사하게 중단 점에 도달하면 &lt;code&gt;continue&lt;/code&gt; 이 호출 될 때까지 코드 실행이 중지 됩니다. 그러나 note &lt;code&gt;break!/2&lt;/code&gt; 는 소스가 아닌 컴파일 된 아티팩트에서 작동하므로 디버그 된 코드에서 별명 및 가져 오기에 액세스 할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="b9586bcd0e9346aa9f7e1956ff7ddc48f27965b9" translate="yes" xml:space="preserve">
          <source>Similar to &lt;code&gt;Kernel.&quot;FUNCTION_NAME&quot;&lt;/code&gt;, &lt;code&gt;unquote(x)&lt;/code&gt; will always generate a remote call, independent of the value of &lt;code&gt;x&lt;/code&gt;. To generate an alias via the quoted expression, one needs to rely on &lt;a href=&quot;module#concat/2&quot;&gt;&lt;code&gt;Module.concat/2&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">&lt;code&gt;Kernel.&quot;FUNCTION_NAME&quot;&lt;/code&gt; 과 유사하게 , &lt;code&gt;unquote(x)&lt;/code&gt; 는 &lt;code&gt;x&lt;/code&gt; 값에 관계없이 항상 원격 호출을 생성합니다 . 인용 표현식을 통해 별칭을 생성하려면 &lt;a href=&quot;module#concat/2&quot;&gt; &lt;code&gt;Module.concat/2&lt;/code&gt; &lt;/a&gt; 에 의존해야합니다 .</target>
        </trans-unit>
        <trans-unit id="a72d340e0a469b82ec469f91c51a4c2a166acbb3" translate="yes" xml:space="preserve">
          <source>Similar to &lt;code&gt;case&lt;/code&gt;, a function may have many clauses. A particular clause is executed when the arguments passed to the function match the clause&amp;rsquo;s argument patterns and its guard evaluates to &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;case&lt;/code&gt; 와 유사하게 함수에는 많은 절이있을 수 있습니다. 함수에 전달 된 인수가 절의 인수 패턴과 일치하고 그 가드가 &lt;code&gt;true&lt;/code&gt; 로 평가되면 특정 절이 실행됩니다 .</target>
        </trans-unit>
        <trans-unit id="b996bc1af4b984c3da4c7bc2ef94d27afb3fd274" translate="yes" xml:space="preserve">
          <source>Similar to &lt;code&gt;import_file&lt;/code&gt; but only imports the file it if it is available.</source>
          <target state="translated">&lt;code&gt;import_file&lt;/code&gt; 과 유사 하지만 파일이 사용 가능한 경우에만 파일을 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="68799b7562c806765dc2184265fa19c244ff0d6b" translate="yes" xml:space="preserve">
          <source>Similar to aliases, imports in Elixir are hygienic. Consider the following code:</source>
          <target state="translated">별칭과 마찬가지로 Elixir의 수입품은 위생적입니다. 다음 코드를 고려하십시오.</target>
        </trans-unit>
        <trans-unit id="dc2b244e98818b0c2e54b67213f8b4899ca5dd2c" translate="yes" xml:space="preserve">
          <source>Similar to constructs like &lt;code&gt;if&lt;/code&gt;, named functions support both &lt;code&gt;do:&lt;/code&gt; and &lt;code&gt;do&lt;/code&gt;/&lt;code&gt;end&lt;/code&gt; block syntax, as &lt;a href=&quot;case-cond-and-if#doend-blocks&quot;&gt;we learned &lt;code&gt;do&lt;/code&gt;/&lt;code&gt;end&lt;/code&gt; is a convenient syntax for the keyword list format&lt;/a&gt;. For example, we can edit &lt;code&gt;math.exs&lt;/code&gt; to look like this:</source>
          <target state="translated">같은 구조와 유사한 &lt;code&gt;if&lt;/code&gt; 라는 기능을 모두 지원 &lt;code&gt;do:&lt;/code&gt; 및 &lt;code&gt;do&lt;/code&gt; / &lt;code&gt;end&lt;/code&gt; 으로 블록 구문은, &lt;a href=&quot;case-cond-and-if#doend-blocks&quot;&gt;우리가 배운 &lt;code&gt;do&lt;/code&gt; / &lt;code&gt;end&lt;/code&gt; 키워드 목록 형식을위한 편리한 구문입니다&lt;/a&gt; . 예를 들어 &lt;code&gt;math.exs&lt;/code&gt; 를 다음과 같이 편집 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="399d5c38656b13369d3de8bc4c4d3ffe8febae4e" translate="yes" xml:space="preserve">
          <source>Similar to the &lt;code&gt;debugger&lt;/code&gt; note above, your package manager may require a separate installation in order to run Observer.</source>
          <target state="translated">위 의 &lt;code&gt;debugger&lt;/code&gt; 노트 와 유사하게 패키지 관리자는 Observer를 실행하기 위해 별도의 설치가 필요할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="1967136eae3bf06afa80ff77d2c742df8670b3d5" translate="yes" xml:space="preserve">
          <source>Similar to the &lt;code&gt;hd/1&lt;/code&gt; and &lt;code&gt;tl/1&lt;/code&gt; functions, we can&amp;rsquo;t match an empty list with a head and tail pattern:</source>
          <target state="translated">&lt;code&gt;hd/1&lt;/code&gt; 및 &lt;code&gt;tl/1&lt;/code&gt; 함수 와 유사하게 머리와 꼬리 패턴이있는 빈 목록을 일치시킬 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="82f50da22742b95c84f018370c23671aa332e9f5" translate="yes" xml:space="preserve">
          <source>Similarly to &lt;a href=&quot;#yield/2&quot;&gt;&lt;code&gt;yield/2&lt;/code&gt;&lt;/a&gt;, each task's result will be</source>
          <target state="translated">&lt;a href=&quot;#yield/2&quot;&gt; &lt;code&gt;yield/2&lt;/code&gt; &lt;/a&gt; 와 마찬가지로 각 작업의 결과는</target>
        </trans-unit>
        <trans-unit id="93b5800fe560b818a42489dce100f7db2d3fa208" translate="yes" xml:space="preserve">
          <source>Similarly to &lt;code&gt;@doc&lt;/code&gt; also accepts a keyword list to provide metadata about the module. For more details, see the documentation of &lt;code&gt;@doc&lt;/code&gt; above.</source>
          <target state="translated">&lt;code&gt;@doc&lt;/code&gt; 과 마찬가지로 모듈에 대한 메타 데이터를 제공하기 위해 키워드 목록도 허용합니다. 자세한 내용은 위 의 &lt;code&gt;@doc&lt;/code&gt; 설명서를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="c33174c994c7adc74f3417777668f8c098a0d34c" translate="yes" xml:space="preserve">
          <source>Similarly, &lt;code&gt;uniq: true&lt;/code&gt; can also be given to comprehensions to guarantee the results are only added to the collection if they were not returned before. For example:</source>
          <target state="translated">마찬가지로, &lt;code&gt;uniq: true&lt;/code&gt; 는 결과가 이전에 반환되지 않은 경우에만 컬렉션에 추가되도록 보장하기 위해 이해에 제공 될 수 있습니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="f039a2100664bab09c37cccb1c2473f79463bd63" translate="yes" xml:space="preserve">
          <source>Similarly, an exception inside an &lt;code&gt;else&lt;/code&gt; clause is not caught or rescued inside the same &lt;code&gt;try&lt;/code&gt;:</source>
          <target state="translated">마찬가지로 &lt;code&gt;else&lt;/code&gt; 절 내부의 예외 는 동일한 &lt;code&gt;try&lt;/code&gt; 내에서 포착되거나 구제되지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="639b47876914dc3c064fca8afae90a6661f1b39d" translate="yes" xml:space="preserve">
          <source>Similarly, even if we defined an alias with the same name before invoking a macro, it won't affect the macro's result:</source>
          <target state="translated">마찬가지로 매크로를 호출하기 전에 이름이 같은 별칭을 정의하더라도 매크로 결과에는 영향을 미치지 않습니다.</target>
        </trans-unit>
        <trans-unit id="b0b02f74e4f6ced9283eee76d1f5d4a6dc901fa2" translate="yes" xml:space="preserve">
          <source>Similarly, if a match expression is given, it will report any failure in terms of that match. Given</source>
          <target state="translated">마찬가지로 일치식이 제공되면 해당 일치 측면에서 실패가보고됩니다. 주어진</target>
        </trans-unit>
        <trans-unit id="d93711412269341e983df1ae16c13701f1ea42ed" translate="yes" xml:space="preserve">
          <source>Similarly, if you are waiting for a process to terminate, monitor that process instead of sleeping. &lt;strong&gt;Do not&lt;/strong&gt;:</source>
          <target state="translated">마찬가지로 프로세스가 종료되기를 기다리는 경우 휴면 대신 해당 프로세스를 모니터하십시오. &lt;strong&gt;하지 마십시오&lt;/strong&gt; :</target>
        </trans-unit>
        <trans-unit id="cbf36629b903bf319e1dd5dfee276a2f96f82ebd" translate="yes" xml:space="preserve">
          <source>Similarly, the performance of list concatenation depends on the length of the left-hand list:</source>
          <target state="translated">마찬가지로 목록 연결 성능은 왼쪽 목록의 길이에 따라 다릅니다.</target>
        </trans-unit>
        <trans-unit id="c1f148bd168fe86bf71a8f03f4f454f35acbd7df" translate="yes" xml:space="preserve">
          <source>Similarly, we could write the list &lt;code&gt;[1, 2, 3]&lt;/code&gt; using only such pairs (called cons cells):</source>
          <target state="translated">마찬가지로, 우리는 그러한 쌍 (cons cell)을 사용하여 리스트 &lt;code&gt;[1, 2, 3]&lt;/code&gt; 을 작성할 수 있습니다 :</target>
        </trans-unit>
        <trans-unit id="b59932c5adb29f058bd5e0bb657d8adae59c14bf" translate="yes" xml:space="preserve">
          <source>Since &lt;code&gt;Enum&lt;/code&gt;&lt;em&gt;does&lt;/em&gt; provide a proper API, in practice &lt;code&gt;Enum.find/2&lt;/code&gt; is the way to go:</source>
          <target state="translated">&lt;code&gt;Enum&lt;/code&gt; &lt;em&gt;은&lt;/em&gt; 적절한 API를 제공하기 때문에 실제로 &lt;code&gt;Enum.find/2&lt;/code&gt; 를 사용하는 방법입니다.</target>
        </trans-unit>
        <trans-unit id="69225423a0e2b117d7cd03442182856546997bd1" translate="yes" xml:space="preserve">
          <source>Since &lt;code&gt;setup_all&lt;/code&gt; blocks don't belong to a specific test, log messages generated in them (or between tests) are never captured. If you want to suppress these messages as well, remove the console backend globally by setting:</source>
          <target state="translated">&lt;code&gt;setup_all&lt;/code&gt; 블록은 특정 테스트에 속하지 않기 때문에 setup 또는 모든 블록에서 생성 된 로그 메시지는 캡처되지 않습니다. 이러한 메시지도 표시하지 않으려면 다음을 설정하여 콘솔 백엔드를 전체적으로 제거하십시오.</target>
        </trans-unit>
        <trans-unit id="e2bf20a6c317edb9d40eaad36a3fcaaa5065a63f" translate="yes" xml:space="preserve">
          <source>Since &lt;code&gt;use&lt;/code&gt; allows any code to run, we can&amp;rsquo;t really know the side-effects of using a module without reading its documentation. For this reason, &lt;code&gt;import&lt;/code&gt; and &lt;code&gt;alias&lt;/code&gt; are often preferred, as their semantics are defined by the language.</source>
          <target state="translated">때문에 &lt;code&gt;use&lt;/code&gt; 실행에 코드를 할 수 있습니다, 우리는 정말 그 문서를 읽지 않고 모듈을 사용의 부작용을 알 수 없다. 이러한 이유로, 의미론이 언어에 의해 정의되므로 &lt;code&gt;import&lt;/code&gt; 및 &lt;code&gt;alias&lt;/code&gt; 이 선호되는 경우가 많습니다.</target>
        </trans-unit>
        <trans-unit id="4d3c552f54084c3d7869c55199e78593b9eebc2e" translate="yes" xml:space="preserve">
          <source>Since Elixir controls when the streamed file is opened, the underlying device cannot be shared and as such it is convenient to open the file in raw mode for performance reasons. Therefore, Elixir &lt;strong&gt;will&lt;/strong&gt; open streams in &lt;code&gt;:raw&lt;/code&gt; mode with the &lt;code&gt;:read_ahead&lt;/code&gt; option unless an encoding is specified. This means any data streamed into the file must be converted to &lt;a href=&quot;typespecs#built-in-types&quot;&gt;&lt;code&gt;iodata/0&lt;/code&gt;&lt;/a&gt; type. If you pass e.g. &lt;code&gt;[encoding: :utf8]&lt;/code&gt; or &lt;code&gt;[encoding: {:utf16, :little}]&lt;/code&gt; in the modes parameter, the underlying stream will use &lt;a href=&quot;io#write/2&quot;&gt;&lt;code&gt;IO.write/2&lt;/code&gt;&lt;/a&gt; and the &lt;a href=&quot;string.chars&quot;&gt;&lt;code&gt;String.Chars&lt;/code&gt;&lt;/a&gt; protocol to convert the data. See &lt;a href=&quot;io#binwrite/2&quot;&gt;&lt;code&gt;IO.binwrite/2&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;io#write/2&quot;&gt;&lt;code&gt;IO.write/2&lt;/code&gt;&lt;/a&gt; .</source>
          <target state="translated">Elixir는 스트리밍 파일을 열 때 제어하므로 기본 장치를 공유 할 수 없으므로 성능상의 이유로 원시 모드에서 파일을 여는 것이 편리합니다. 따라서 Elixir &lt;strong&gt;는&lt;/strong&gt; 인코딩이 지정되지 않은 경우 &lt;code&gt;:read_ahead&lt;/code&gt; 옵션 과 함께 &lt;code&gt;:raw&lt;/code&gt; 모드 에서 스트림을 엽니 다 . 이는 파일로 스트리밍 된 모든 데이터가 &lt;a href=&quot;typespecs#built-in-types&quot;&gt; &lt;code&gt;iodata/0&lt;/code&gt; &lt;/a&gt; 유형 으로 변환되어야 함을 의미합니다 . 당신이 예를 전달하는 경우 &lt;code&gt;[encoding: :utf8]&lt;/code&gt; 또는 &lt;code&gt;[encoding: {:utf16, :little}]&lt;/code&gt; 모드 매개 변수에, 기본이되는 스트림이 사용 &lt;a href=&quot;io#write/2&quot;&gt; &lt;code&gt;IO.write/2&lt;/code&gt; &lt;/a&gt; 와 &lt;a href=&quot;string.chars&quot;&gt; &lt;code&gt;String.Chars&lt;/code&gt; 이&lt;/a&gt; 프로토콜 데이터를 변환 할 수 있습니다. &lt;a href=&quot;io#binwrite/2&quot;&gt; &lt;code&gt;IO.binwrite/2&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;io#write/2&quot;&gt; &lt;code&gt;IO.write/2&lt;/code&gt; 를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="acfc136eac08ea2248c061b764cdc270d0d7d75b" translate="yes" xml:space="preserve">
          <source>Since Elixir provides a &lt;a href=&quot;task.supervisor&quot;&gt;&lt;code&gt;Task.Supervisor&lt;/code&gt;&lt;/a&gt;, it is easy to use one to dynamically start tasks across nodes:</source>
          <target state="translated">Elixir는 &lt;a href=&quot;task.supervisor&quot;&gt; &lt;code&gt;Task.Supervisor&lt;/code&gt; 를&lt;/a&gt; 제공하므로 노드를 사용하여 작업을 동적으로 시작하기가 쉽습니다.</target>
        </trans-unit>
        <trans-unit id="9ddb7c4c4e5a83e7e2eb15f183943d89c62afa54" translate="yes" xml:space="preserve">
          <source>Since Elixir's compilation happens in parallel, in some situations you may need to use a module that was not yet compiled, therefore it can't even be loaded.</source>
          <target state="translated">Elixir의 컴파일은 병렬로 수행되기 때문에 일부 상황에서는 아직 컴파일되지 않은 모듈을 사용해야 할 수도 있으므로로드 할 수도 없습니다.</target>
        </trans-unit>
        <trans-unit id="7382428d7f17d64e52201beba024a7ffa766e6af" translate="yes" xml:space="preserve">
          <source>Since ISO 8601 does not include the proper time zone, the given string will be converted to UTC and its offset in seconds will be returned as part of this function. Therefore offset information must be present in the string.</source>
          <target state="translated">ISO 8601에 적절한 시간대가 포함되어 있지 않으므로 주어진 문자열이 UTC로 변환되고 초 단위의 오프셋이이 함수의 일부로 반환됩니다. 따라서 오프셋 정보가 문자열에 있어야합니다.</target>
        </trans-unit>
        <trans-unit id="b15ad8d4c4ceb4a097cb8049bcccb30f2c171c27" translate="yes" xml:space="preserve">
          <source>Since a &lt;code&gt;DynamicSupervisor&lt;/code&gt; does not define any children during initialization, the &lt;code&gt;DynamicSupervisor&lt;/code&gt; also allows us to skip the work of defining a whole separate module with the usual &lt;code&gt;start_link&lt;/code&gt; function and the &lt;code&gt;init&lt;/code&gt; callback. Instead, we can define a &lt;code&gt;DynamicSupervisor&lt;/code&gt; directly in the supervision tree, by giving it a name and a strategy.</source>
          <target state="translated">이후 &lt;code&gt;DynamicSupervisor&lt;/code&gt; 가 초기화 중에 아이를 정의하지 않습니다는 &lt;code&gt;DynamicSupervisor&lt;/code&gt; 는 또한 우리가 평소와 완전히 별도의 모듈을 정의하는 작업을 건너 뛸 수 &lt;code&gt;start_link&lt;/code&gt; 기능과 &lt;code&gt;init&lt;/code&gt; 콜백을. 대신 이름과 전략을 제공하여 감독 트리에서 직접 &lt;code&gt;DynamicSupervisor&lt;/code&gt; 를 정의 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="a6552dd3f478ee5a7825eccbbaad93572a691d75" translate="yes" xml:space="preserve">
          <source>Since agents are processes, each bucket has a process identifier (pid), but buckets do not have a name. Back &lt;a href=&quot;../processes&quot;&gt;in the Process chapter&lt;/a&gt;, we have learned that we can register processes in Elixir by giving them atom names:</source>
          <target state="translated">에이전트는 프로세스이므로 각 버킷에는 프로세스 식별자 (pid)가 있지만 버킷에는 이름이 없습니다. &lt;a href=&quot;../processes&quot;&gt;프로세스 장으로&lt;/a&gt; 돌아가서 , 우리는 엘릭서에 프로세스 이름을 부여함으로써 프로세스를 등록 할 수 있다는 것을 배웠다</target>
        </trans-unit>
        <trans-unit id="3a720a734f9deda5036a5ed5e6279947f6baf484" translate="yes" xml:space="preserve">
          <source>Since an expression inside &lt;code&gt;try&lt;/code&gt; may not have been evaluated due to an exception, any variable created inside &lt;code&gt;try&lt;/code&gt; cannot be accessed externally. For instance:</source>
          <target state="translated">&lt;code&gt;try&lt;/code&gt; 내부의 표현식 은 예외로 인해 평가 되지 않았으므로 &lt;code&gt;try&lt;/code&gt; 내부에서 작성된 변수는 외부에서 액세스 할 수 없습니다. 예를 들어 :</target>
        </trans-unit>
        <trans-unit id="6e8e1aa133da1364ca9cd2b48bd61a3e3c1339f3" translate="yes" xml:space="preserve">
          <source>Since any message, including the ones sent via &lt;code&gt;send/2&lt;/code&gt;, go to &lt;code&gt;handle_info/2&lt;/code&gt;, there is a chance unexpected messages will arrive to the server. Therefore, if we don&amp;rsquo;t define the catch-all clause, those messages could cause our registry to crash, because no clause would match. We don&amp;rsquo;t need to worry about such cases for &lt;code&gt;handle_call/3&lt;/code&gt; and &lt;code&gt;handle_cast/2&lt;/code&gt; though. Calls and casts are only done via the &lt;code&gt;GenServer&lt;/code&gt; API, so an unknown message is quite likely a developer mistake.</source>
          <target state="translated">&lt;code&gt;send/2&lt;/code&gt; 를 통해 전송 된 메시지를 포함하여 모든 메시지 는 &lt;code&gt;handle_info/2&lt;/code&gt; 로 이동하므로 예기치 않은 메시지가 서버에 도착할 가능성이 있습니다. 따라서 catch-all 절을 정의하지 않으면 절이 일치하지 않기 때문에 해당 메시지로 인해 레지스트리가 중단 될 수 있습니다. &lt;code&gt;handle_call/3&lt;/code&gt; 및 &lt;code&gt;handle_cast/2&lt;/code&gt; 와 같은 경우에 대해서는 걱정할 필요가 없습니다 . 호출 및 전송은 &lt;code&gt;GenServer&lt;/code&gt; API 를 통해서만 수행 되므로 알 수없는 메시지는 개발자 실수 일 가능성이 높습니다.</target>
        </trans-unit>
        <trans-unit id="3d6f72045be18842d7d487aab2142772aa012354" translate="yes" xml:space="preserve">
          <source>Since configuration files are often accessed on target machines, it can be expressed either as:</source>
          <target state="translated">구성 파일은 종종 대상 시스템에서 액세스되므로 다음과 같이 표현할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="8fc813b30867503fd7d80ceb89d26056f219ebb2" translate="yes" xml:space="preserve">
          <source>Since each test has a unique name, we use the test name to name our registries. This way, we no longer need to pass the registry PID around, instead we identify it by the test name. Also note we assigned the result of &lt;code&gt;start_supervised!&lt;/code&gt; to underscore (&lt;code&gt;_&lt;/code&gt;). This idiom is often used to signal that we are not interested in the result of &lt;code&gt;start_supervised!&lt;/code&gt;.</source>
          <target state="translated">각 테스트에는 고유 한 이름이 있으므로 테스트 이름을 사용하여 레지스트리 이름을 지정합니다. 이런 식으로 더 이상 레지스트리 PID를 전달할 필요없이 테스트 이름으로 식별합니다. 또한 &lt;code&gt;start_supervised!&lt;/code&gt; 의 결과를 할당했습니다 ! 밑줄 ( &lt;code&gt;_&lt;/code&gt; ). 이 관용구는 종종 우리가 &lt;code&gt;start_supervised!&lt;/code&gt; 의 결과에 관심이 없다는 것을 알리기 위해 사용됩니다! .</target>
        </trans-unit>
        <trans-unit id="539b55b9c301e37db2ba5709f167489b7c16ad33" translate="yes" xml:space="preserve">
          <source>Since evaluating this function causes the process to terminate, it has no return value.</source>
          <target state="translated">이 함수를 평가하면 프로세스가 종료되므로 리턴 값이 없습니다.</target>
        </trans-unit>
        <trans-unit id="f1ce4d7db6e34c56c6b0f354fe1c976084fd70b9" translate="yes" xml:space="preserve">
          <source>Since exceptions are structs, the API supported by &lt;a href=&quot;#defstruct/1&quot;&gt;&lt;code&gt;defstruct/1&lt;/code&gt;&lt;/a&gt; is also available in &lt;a href=&quot;#defexception/1&quot;&gt;&lt;code&gt;defexception/1&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">예외는 구조체이므로 &lt;a href=&quot;#defstruct/1&quot;&gt; &lt;code&gt;defstruct/1&lt;/code&gt; 에서&lt;/a&gt; 지원하는 API 는 &lt;a href=&quot;#defexception/1&quot;&gt; &lt;code&gt;defexception/1&lt;/code&gt; &lt;/a&gt; 에서도 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="43379b8fa276cfff986ca581f0982483e58e7290" translate="yes" xml:space="preserve">
          <source>Since our routing table is now empty, our distributed tests should fail. Restart the apps and re-run tests to see the failure:</source>
          <target state="translated">라우팅 테이블이 비어 있으므로 분산 테스트가 실패합니다. 앱을 다시 시작하고 테스트를 다시 실행하여 실패를 확인하십시오.</target>
        </trans-unit>
        <trans-unit id="35acc66a5d066ad7dd9d09e09f76ee2a2ec26964" translate="yes" xml:space="preserve">
          <source>Since regular strings are valid entities in an algebra document, an implementation of the &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;Inspect&lt;/code&gt;&lt;/a&gt; protocol may simply return a string, although that will devoid it of any pretty-printing.</source>
          <target state="translated">정규 문자열은 대수 문서에서 유효한 엔터티이므로 &lt;a href=&quot;#content&quot;&gt; &lt;code&gt;Inspect&lt;/code&gt; &lt;/a&gt; 프로토콜을 구현 하면 문자열을 반환 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2f64d99700777b1262233e96b381239b72533e52" translate="yes" xml:space="preserve">
          <source>Since the &amp;ldquo;shopping&amp;rdquo; bucket would be stored on &lt;code&gt;bar&lt;/code&gt;, the request fails as &lt;code&gt;bar&lt;/code&gt; is not available. If you go back to the terminal running &lt;code&gt;foo&lt;/code&gt;, you will see:</source>
          <target state="translated">&amp;ldquo;쇼핑&amp;rdquo;버킷은 &lt;code&gt;bar&lt;/code&gt; 에 저장 되므로 &lt;code&gt;bar&lt;/code&gt; 를 사용할 수 없으므로 요청이 실패 합니다. &lt;code&gt;foo&lt;/code&gt; 를 실행하는 터미널로 돌아 가면 다음을 볼 수 있습니다 :</target>
        </trans-unit>
        <trans-unit id="f3f50b4e1f5b6c16d180ba7b01763cd119278691" translate="yes" xml:space="preserve">
          <source>Since the bucket terminated, the registry also stopped, and our test fails when trying to &lt;code&gt;GenServer.call/3&lt;/code&gt; it:</source>
          <target state="translated">버킷이 종료 &lt;code&gt;GenServer.call/3&lt;/code&gt; 레지스트리도 중지되었으며 GenServer.call/3을 시도하면 테스트가 실패 합니다.</target>
        </trans-unit>
        <trans-unit id="7a4bb3b51a8bb6e716ca0d2a7b86f828cab0f46b" translate="yes" xml:space="preserve">
          <source>Since the example above is such a common requirement, it can be expressed as:</source>
          <target state="translated">위의 예는 일반적인 요구 사항이므로 다음과 같이 표현할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="85bfe62ef0b50ee77c720da4424c8a1e00f3e6de" translate="yes" xml:space="preserve">
          <source>Since the first element of the enumerable is used as the initial value of the accumulator, &lt;code&gt;fun&lt;/code&gt; will only be executed &lt;code&gt;n - 1&lt;/code&gt; times where &lt;code&gt;n&lt;/code&gt; is the length of the enumerable. This function won't call the specified function for enumerables that are one-element long.</source>
          <target state="translated">열거 형의 첫 번째 요소가 누산기의 초기 값으로 사용되므로 &lt;code&gt;fun&lt;/code&gt; 는 &lt;code&gt;n - 1&lt;/code&gt; 회만 실행 되며 여기서 &lt;code&gt;n&lt;/code&gt; 은 열거 형의 길이입니다. 이 함수는 한 요소 길이의 열거 가능 항목에 대해 지정된 함수를 호출하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="765bd0055668383c0ea2677b5b1bfbe98b9619f4" translate="yes" xml:space="preserve">
          <source>Since there is no variable &lt;code&gt;unknown&lt;/code&gt; previously defined, Elixir imagined you were trying to call a function named &lt;code&gt;unknown/0&lt;/code&gt;, but such a function does not exist.</source>
          <target state="translated">이전에 정의 된 &lt;code&gt;unknown&lt;/code&gt; 없는 변수가 없기 때문에 Elixir는 &lt;code&gt;unknown/0&lt;/code&gt; 이라는 함수를 호출하려고 했지만 그러한 함수는 존재하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="f8894fa7fe5c3478753e328f6f323ba67ca2e3bb" translate="yes" xml:space="preserve">
          <source>Since these tasks are supervised and not directly linked to the caller, they cannot be awaited on. &lt;a href=&quot;#start_link/1&quot;&gt;&lt;code&gt;start_link/1&lt;/code&gt;&lt;/a&gt;, unlike &lt;a href=&quot;#async/1&quot;&gt;&lt;code&gt;async/1&lt;/code&gt;&lt;/a&gt;, returns &lt;code&gt;{:ok, pid}&lt;/code&gt; (which is the result expected by supervisors).</source>
          <target state="translated">이러한 작업은 감독되고 호출자와 직접 연결되지 않으므로 기다릴 수 없습니다. &lt;a href=&quot;#start_link/1&quot;&gt; &lt;code&gt;start_link/1&lt;/code&gt; &lt;/a&gt; 은 &lt;a href=&quot;#async/1&quot;&gt; &lt;code&gt;async/1&lt;/code&gt; &lt;/a&gt; 과 달리 &lt;code&gt;{:ok, pid}&lt;/code&gt; (감독자가 예상 한 결과)를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="389839597845fc091bf9814cfbeff4f11280ed1d" translate="yes" xml:space="preserve">
          <source>Since this function prints the result returned by the editor, &lt;code&gt;ELIXIR_EDITOR&lt;/code&gt; can be set &quot;echo&quot; if you prefer to display the location rather than opening it.</source>
          <target state="translated">이 함수는 편집기에서 반환 한 결과를 인쇄하므로 위치를 열지 않고 표시하려는 경우 &lt;code&gt;ELIXIR_EDITOR&lt;/code&gt; 를 &quot;echo&quot;로 설정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="bd876c2171809804da789369d0f788453b1d762e" translate="yes" xml:space="preserve">
          <source>Since typespecs and docs are loaded from the .beam file (they are not loaded in memory with the module because there is no need for them to be in memory), they are not reloaded when you reload the module.</source>
          <target state="translated">typespec 및 문서는 .beam 파일에서로드되므로 (메모리에있을 필요가 없기 때문에 모듈과 함께 메모리에로드되지 않음) 모듈을 다시로드 할 때 다시로드되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="695e4486dc05d2af7e873048e111e9ef335874fa" translate="yes" xml:space="preserve">
          <source>Since we have changed the supervisor specification, we need to ask: is our supervision strategy still correct?</source>
          <target state="translated">감독자 사양을 변경 했으므로 다음과 같은 질문을해야합니다. 감독 전략이 여전히 올바른가?</target>
        </trans-unit>
        <trans-unit id="1ebfcf673c0172052f119086e5c87a6211d88260" translate="yes" xml:space="preserve">
          <source>Since we have characters like &lt;code&gt;ł&lt;/code&gt; assigned to the code point &lt;code&gt;322&lt;/code&gt;, we actually need more than one byte to represent them. That&amp;rsquo;s why we see a difference when we calculate the &lt;code&gt;byte_size/1&lt;/code&gt; of a string compared to its &lt;code&gt;String.length/1&lt;/code&gt;:</source>
          <target state="translated">코드 포인트 &lt;code&gt;322&lt;/code&gt; 에 &lt;code&gt;ł&lt;/code&gt; 과 같은 문자가 할당되어 있기 때문에 실제로는 2 바이트 이상이 필요합니다. 그렇기 때문에 &lt;code&gt;String.length/1&lt;/code&gt; 과 비교하여 문자열 의 &lt;code&gt;byte_size/1&lt;/code&gt; 을 계산할 때 차이가 발생하는 이유는 다음 과 같습니다.</target>
        </trans-unit>
        <trans-unit id="f2c19e5383a549d66b2f89101e27b9b7851ada37" translate="yes" xml:space="preserve">
          <source>Since we have now changed our registry to use &lt;code&gt;KV.BucketSupervisor&lt;/code&gt;, which is registered globally, our tests are now relying on this shared supervisor even though each test has its own registry. The question is: should we?</source>
          <target state="translated">이제 전 세계에 등록 된 &lt;code&gt;KV.BucketSupervisor&lt;/code&gt; 를 사용하도록 레지스트리를 변경 했으므로 각 테스트마다 고유 한 레지스트리가 있어도 테스트는이 공유 관리자에 의존합니다. 문제는 : 우리가해야 하는가?</target>
        </trans-unit>
        <trans-unit id="73c1faf8869380abc1edacc97a5d1771ec7b9e8e" translate="yes" xml:space="preserve">
          <source>Since we have relied only on a non-shared partition of the bucket supervisor so far, we don&amp;rsquo;t need to worry about concurrency issues in our test suite. In case it ever becomes a problem, we can start a supervisor per test and pass it as an argument to the registry &lt;code&gt;start_link&lt;/code&gt; function.</source>
          <target state="translated">지금까지 버킷 수퍼바이저의 비공유 파티션에만 의존 했으므로 테스트 스위트의 동시성 문제에 대해 걱정할 필요가 없습니다. 문제가 생길 경우 테스트 당 감독자를 시작하여 레지스트리 &lt;code&gt;start_link&lt;/code&gt; 함수에 인수로 전달할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="27114ec0715ca4313c0f129e147c381a042f1009" translate="yes" xml:space="preserve">
          <source>Since we have specified &lt;code&gt;KV&lt;/code&gt; as the module callback, let&amp;rsquo;s change the &lt;code&gt;KV&lt;/code&gt; module defined in &lt;code&gt;lib/kv.ex&lt;/code&gt; to implement a &lt;code&gt;start/2&lt;/code&gt; function:</source>
          <target state="translated">&lt;code&gt;KV&lt;/code&gt; 를 모듈 콜백으로 지정 &lt;code&gt;lib/kv.ex&lt;/code&gt; 에 정의 된 &lt;code&gt;KV&lt;/code&gt; 모듈을 &lt;code&gt;start/2&lt;/code&gt; 함수 를 구현하도록 변경해 보겠습니다 .</target>
        </trans-unit>
        <trans-unit id="701589be2a9f211ec2f7483dc6bba98a5419568a" translate="yes" xml:space="preserve">
          <source>Since we want &lt;code&gt;kv_server&lt;/code&gt; to eventually use the functionality we defined in &lt;code&gt;kv&lt;/code&gt;, we need to add &lt;code&gt;kv&lt;/code&gt; as a dependency to our application.</source>
          <target state="translated">&lt;code&gt;kv_server&lt;/code&gt; 가 결국 &lt;code&gt;kv&lt;/code&gt; 에서 정의한 기능을 사용 하기를 원 하므로 애플리케이션에 대한 종속성으로 &lt;code&gt;kv&lt;/code&gt; 를 추가해야 합니다.</target>
        </trans-unit>
        <trans-unit id="425a08cd5321884d0ab45bab21799979e1c5501f" translate="yes" xml:space="preserve">
          <source>Single quotes are charlists, double quotes are strings. We will talk more about them in the &lt;a href=&quot;binaries-strings-and-char-lists&quot;&gt;&amp;ldquo;Binaries, strings and charlists&amp;rdquo;&lt;/a&gt; chapter.</source>
          <target state="translated">작은 따옴표는 문자 목록이고 큰 따옴표는 문자열입니다. &lt;a href=&quot;binaries-strings-and-char-lists&quot;&gt;&quot;바이너리, 문자열 및 캐릭터리스트&quot;&lt;/a&gt; 장 에서 이에 대해 더 이야기 할 것입니다 .</target>
        </trans-unit>
        <trans-unit id="2d7528bda0a71f6d8069c7c15f6dcbe9bf22f1e0" translate="yes" xml:space="preserve">
          <source>Single-line strings in Elixir are written between double-quotes, such as &lt;code&gt;&quot;foo&quot;&lt;/code&gt;. Any double-quote inside the string must be escaped with &lt;code&gt;\&lt;/code&gt;. Strings support Unicode characters and are stored as UTF-8 encoded binaries.</source>
          <target state="translated">Elixir의 한 줄짜리 문자열은 &lt;code&gt;&quot;foo&quot;&lt;/code&gt; 와 같이 큰 따옴표로 묶습니다 . 문자열 안의 큰 따옴표는 &lt;code&gt;\&lt;/code&gt; 로 이스케이프해야합니다 . 문자열은 유니 코드 문자를 지원하며 UTF-8로 인코딩 된 바이너리로 저장됩니다.</target>
        </trans-unit>
        <trans-unit id="a2e31d493b537b363c074ec4f97ee377323684c2" translate="yes" xml:space="preserve">
          <source>Size and unit can also be specified using a syntax shortcut when passing integer values:</source>
          <target state="translated">정수 값을 전달할 때 구문 바로 가기를 사용하여 크기와 단위를 지정할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="52d2c70012d8ed1ea7e910df59a016b1f6976dde" translate="yes" xml:space="preserve">
          <source>Sizes for types are a bit more nuanced. The default size for integers is 8.</source>
          <target state="translated">유형의 크기가 조금 더 미묘합니다. 정수의 기본 크기는 8입니다.</target>
        </trans-unit>
        <trans-unit id="5bb4bb1ca83ec5f474261d62ad95799078b47602" translate="yes" xml:space="preserve">
          <source>Skipped (via @tag :skip)</source>
          <target state="translated">건너 뛰기 (@tag : skip를 통해)</target>
        </trans-unit>
        <trans-unit id="d5ca622d07bd8d35b6d8664121b3593144857e10" translate="yes" xml:space="preserve">
          <source>Sleeps the current process for the given &lt;code&gt;timeout&lt;/code&gt;.</source>
          <target state="translated">주어진 &lt;code&gt;timeout&lt;/code&gt; 동안 현재 프로세스를 대기시킵니다 .</target>
        </trans-unit>
        <trans-unit id="7fa4b79925c8d51a8a7c81a3dc5cde46fe8fe666" translate="yes" xml:space="preserve">
          <source>So far we have been starting one registry per test to ensure they are isolated:</source>
          <target state="translated">지금까지 테스트 당 하나의 레지스트리를 시작하여 격리되었는지 확인했습니다.</target>
        </trans-unit>
        <trans-unit id="c0b9613de7c2b582f1851b80ca71692048f39354" translate="yes" xml:space="preserve">
          <source>So far we have explored tasks that are started and run in isolation, with no regard for their return value. However, sometimes it is useful to run a task to compute a value and read its result later on. For this, tasks also provide the &lt;code&gt;async/await&lt;/code&gt; pattern:</source>
          <target state="translated">지금까지 우리는 반환 값에 관계없이 시작하여 독립적으로 시작한 작업을 살펴 ​​보았습니다. 그러나 때로는 값을 계산하고 나중에 결과를 읽는 작업을 실행하는 것이 유용합니다. 이를 위해 작업은 &lt;code&gt;async/await&lt;/code&gt; 패턴 도 제공합니다 .</target>
        </trans-unit>
        <trans-unit id="7f909522b97564dd4054fcb1eb6b62ef9bbb43d1" translate="yes" xml:space="preserve">
          <source>So far we have hardcoded the routing table into the &lt;code&gt;KV.Router&lt;/code&gt; module. However, we would like to make the table dynamic. This allows us not only to configure development/test/production, but also to allow different nodes to run with different entries in the routing table. There is a feature of</source>
          <target state="translated">지금까지 라우팅 테이블을 &lt;code&gt;KV.Router&lt;/code&gt; 모듈에 하드 코딩했습니다 . 그러나 테이블을 동적으로 만들고 싶습니다. 이를 통해 개발 / 테스트 / 프로덕션을 구성 할 수있을뿐만 아니라 라우팅 테이블의 다른 항목으로 다른 노드를 실행할 수 있습니다. 기능이 있습니다</target>
        </trans-unit>
        <trans-unit id="6f62da9b30846d1f5dc3344a1711f438b5114216" translate="yes" xml:space="preserve">
          <source>So far we have only written unit tests, typically testing a single module directly. However, in order to make &lt;code&gt;KVServer.Command.run/1&lt;/code&gt; testable as a unit we would need to change its implementation to not send commands directly to the &lt;code&gt;KV.Registry&lt;/code&gt; process but instead pass a server as an argument. For example, we would need to change &lt;code&gt;run&lt;/code&gt;&amp;rsquo;s signature to &lt;code&gt;def run(command, pid)&lt;/code&gt; and then change all clauses accordingly:</source>
          <target state="translated">지금까지는 단위 테스트 만 작성했으며 일반적으로 단일 모듈을 직접 테스트했습니다. 그러나 &lt;code&gt;KVServer.Command.run/1&lt;/code&gt; 을 단위로 테스트 가능하게하려면 명령을 &lt;code&gt;KV.Registry&lt;/code&gt; 프로세스로 직접 보내지 않고 대신 서버를 인수로 전달하도록 구현을 변경해야합니다 . 예를 들어, &lt;code&gt;run&lt;/code&gt; 의 서명을 &lt;code&gt;def run(command, pid)&lt;/code&gt; 로 변경 한 다음 그에 따라 모든 절을 변경해야합니다.</target>
        </trans-unit>
        <trans-unit id="251229844d6239ebff61cacf8582cf96e235c9f5" translate="yes" xml:space="preserve">
          <source>So far we have started the supervisor and listed its children. Once the supervisor started, it also started all of its children.</source>
          <target state="translated">지금까지 우리는 감독자를 시작하고 그 자녀를 나열했습니다. 감독자가 시작되면 모든 자식도 시작했습니다.</target>
        </trans-unit>
        <trans-unit id="cd7e3ac7c01c70e2691dd378c34f831dc99cf144" translate="yes" xml:space="preserve">
          <source>So far we have started the supervisor passing a single child as a tuple as well as a strategy called &lt;code&gt;:one_for_one&lt;/code&gt;:</source>
          <target state="translated">지금까지 감독자는 단일 자녀를 튜플 및 다음과 같은 전략으로 전달하기 시작했습니다 &lt;code&gt;:one_for_one&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="2b84bcc0b56e9b7a77002fd2c4c80e6b1043dfd4" translate="yes" xml:space="preserve">
          <source>So far we have used three callbacks: &lt;code&gt;handle_call/3&lt;/code&gt;, &lt;code&gt;handle_cast/2&lt;/code&gt; and &lt;code&gt;handle_info/2&lt;/code&gt;. Here is what we should consider when deciding when to use each:</source>
          <target state="translated">지금까지 세 가지 콜백 ( &lt;code&gt;handle_call/3&lt;/code&gt; , &lt;code&gt;handle_cast/2&lt;/code&gt; 및 &lt;code&gt;handle_info/2&lt;/code&gt; )을 사용했습니다 . 각각 사용시기를 결정할 때 고려해야 할 사항은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="6f7dbac470c8be21619867a1a999689fe67e712e" translate="yes" xml:space="preserve">
          <source>So far we haven&amp;rsquo;t discussed any associative data structures, i.e. data structures that are able to associate a certain value (or multiple values) to a key. Different languages call these different names like dictionaries, hashes, associative arrays, etc.</source>
          <target state="translated">지금까지 어떤 연관 데이터 구조, 즉 특정 값 (또는 여러 값)을 키에 연결할 수있는 데이터 구조에 대해서는 논의하지 않았습니다. 다른 언어는 사전, 해시, 연관 배열 등과 같은 다른 이름을 호출합니다.</target>
        </trans-unit>
        <trans-unit id="5774107ee19024763a6ae09242699f6a7714e566" translate="yes" xml:space="preserve">
          <source>So far, all examples have used &lt;code&gt;/&lt;/code&gt; to delimit a regular expression. However, sigils support 8 different delimiters:</source>
          <target state="translated">지금까지 모든 예제는 &lt;code&gt;/&lt;/code&gt; 를 사용하여 정규식을 구분했습니다. 그러나 sigils는 8 가지 구분 기호를 지원합니다.</target>
        </trans-unit>
        <trans-unit id="088fcaa5540ac3f087305577f114f1bc32519aad" translate="yes" xml:space="preserve">
          <source>So far, we have assembled a release named &lt;code&gt;foo&lt;/code&gt;, but our routing table contains information for both &lt;code&gt;foo&lt;/code&gt; and &lt;code&gt;bar&lt;/code&gt;. Let&amp;rsquo;s start &lt;code&gt;foo&lt;/code&gt;:</source>
          <target state="translated">지금까지 &lt;code&gt;foo&lt;/code&gt; 라는 릴리즈를 조립 했지만 라우팅 테이블에는 &lt;code&gt;foo&lt;/code&gt; 와 &lt;code&gt;bar&lt;/code&gt; 모두에 대한 정보가 들어 있습니다 . &lt;code&gt;foo&lt;/code&gt; 를 시작하자 :</target>
        </trans-unit>
        <trans-unit id="e56c23fa4849096bb2c027d3d123d2a2f49fa67b" translate="yes" xml:space="preserve">
          <source>So far, we have learned that a &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;GenServer&lt;/code&gt;&lt;/a&gt; can be used as a supervised process that handles sync and async calls. It can also handle system messages, such as periodic messages and monitoring events. GenServer processes may also be named.</source>
          <target state="translated">지금까지 &lt;a href=&quot;#content&quot;&gt; &lt;code&gt;GenServer&lt;/code&gt; &lt;/a&gt; 를 동기화 및 비동기 호출을 처리하는 감독 프로세스로 사용할 수 있다는 것을 알게 되었습니다. 주기적 메시지 및 모니터링 이벤트와 같은 시스템 메시지를 처리 ​​할 수도 있습니다. GenServer 프로세스의 이름을 지정할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="68075bc4dca6cf8169233819190fd1733a0423c9" translate="yes" xml:space="preserve">
          <source>So let&amp;rsquo;s get started!</source>
          <target state="translated">이제 시작합시다!</target>
        </trans-unit>
        <trans-unit id="25ecbbe8564fb6e467c9ba98322930bbb97f7a85" translate="yes" xml:space="preserve">
          <source>So one may ask: which exit reason should I choose when exiting? There are three options:</source>
          <target state="translated">따라서 종료 할 때 어떤 종료 이유를 선택해야합니까? 세 가지 옵션이 있습니다.</target>
        </trans-unit>
        <trans-unit id="c55832fc922e1c92f24778a3f7674a00b54faf03" translate="yes" xml:space="preserve">
          <source>So our last option is to go all in and pick the &lt;code&gt;:one_for_all&lt;/code&gt; strategy: the supervisor will kill and restart all of its children processes whenever any one of them dies. This is a completely reasonable approach for our application, since the registry can&amp;rsquo;t work without the bucket supervisor, and the bucket supervisor should terminate without the registry. Let&amp;rsquo;s reimplement &lt;code&gt;init/1&lt;/code&gt; in &lt;code&gt;KV.Supervisor&lt;/code&gt; to encode those properties:</source>
          <target state="translated">따라서 마지막 옵션은 모두 들어가서 &lt;code&gt;:one_for_all&lt;/code&gt; 전략을 선택하는 것입니다 . 감독자는 자식 프로세스 중 하나가 죽을 때마다 모든 자식 프로세스를 종료하고 다시 시작합니다. 버킷 수퍼바이저 없이는 레지스트리를 사용할 수없고 레지스트리 없이도 버킷 수퍼바이저를 종료해야하므로 이는 우리의 응용 프로그램에 대해 완전히 합리적인 접근 방식입니다. 이러한 속성을 인코딩하기 위해 &lt;code&gt;KV.Supervisor&lt;/code&gt; 에서 &lt;code&gt;init/1&lt;/code&gt; 을 다시 구현해 보겠습니다 .</target>
        </trans-unit>
        <trans-unit id="83ae82602ec909b7e64f3e9c4185c9b43776fc1a" translate="yes" xml:space="preserve">
          <source>So, as mentioned above, we need to explicitly &lt;em&gt;not&lt;/em&gt; import &lt;a href=&quot;kernel#+/2&quot;&gt;&lt;code&gt;+/2&lt;/code&gt;&lt;/a&gt; from &lt;a href=&quot;kernel&quot;&gt;&lt;code&gt;Kernel&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">따라서 위에서 언급했듯이 &lt;a href=&quot;kernel&quot;&gt; &lt;code&gt;Kernel&lt;/code&gt; &lt;/a&gt; 에서 &lt;a href=&quot;kernel#+/2&quot;&gt; &lt;code&gt;+/2&lt;/code&gt; &lt;/a&gt; 를 명시 적으로 가져 &lt;em&gt;오지&lt;/em&gt; 않아도됩니다 .</target>
        </trans-unit>
        <trans-unit id="298eccb34dba30d15b41ce5a15b44bef2b165685" translate="yes" xml:space="preserve">
          <source>Some functions that work on integers are found in &lt;a href=&quot;kernel&quot;&gt;&lt;code&gt;Kernel&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">정수에서 작동하는 일부 함수는 &lt;a href=&quot;kernel&quot;&gt; &lt;code&gt;Kernel&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="b4ff408bd67bda590b1a8dadfe81203b9dd46dcd" translate="yes" xml:space="preserve">
          <source>Some lists, called improper lists, do not have an empty list as the second element in the last cons cell:</source>
          <target state="translated">부적절한 목록이라고하는 일부 목록에는 마지막 단점 셀의 두 번째 요소로 빈 목록이 없습니다.</target>
        </trans-unit>
        <trans-unit id="d07d38fa8e482844b99583b24c1125361f791f0e" translate="yes" xml:space="preserve">
          <source>Some names have specific meaning in Elixir. We detail those cases below.</source>
          <target state="translated">일부 이름은 Elixir에서 특정 의미를 갖습니다. 우리는 그 경우를 아래에 자세히 설명합니다.</target>
        </trans-unit>
        <trans-unit id="5102715b1c152eb041c75bc9866d03423b108a9d" translate="yes" xml:space="preserve">
          <source>Some of the functionalities described here will not be available depending on your terminal. In particular, if you get a message saying that the smart terminal could not be run, some of the features described here won't work.</source>
          <target state="translated">여기에 설명 된 기능 중 일부는 터미널에 따라 사용할 수 없습니다. 특히, 스마트 단말기를 실행할 수 없다는 메시지가 표시되면 여기에 설명 된 일부 기능이 작동하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="424f006fc61cb524f1c4101e27c8c225bd339a44" translate="yes" xml:space="preserve">
          <source>Some of the functions described in this module are inlined by the Elixir compiler into their Erlang counterparts in the &lt;a href=&quot;http://www.erlang.org/doc/man/erlang.html&quot;&gt;&lt;code&gt;:erlang&lt;/code&gt; module&lt;/a&gt;. Those functions are called BIFs (built-in internal functions) in Erlang-land and they exhibit interesting properties, as some of them are allowed in guards and others are used for compiler optimizations.</source>
          <target state="translated">이 모듈에서 설명하는 함수 중 일부는 Elixir 컴파일러에 의해 &lt;a href=&quot;http://www.erlang.org/doc/man/erlang.html&quot;&gt; &lt;code&gt;:erlang&lt;/code&gt; 모듈&lt;/a&gt; 의 Erlang 대응 함수에 인라인됩니다 . Erlang-land에서는 이러한 함수를 BIF (내장 내장 함수)라고하며 일부는 가드에서 허용되고 다른 함수는 컴파일러 최적화에 사용되므로 흥미로운 속성을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="a192dcc1e8e79268df0b27c2cf55ebeff7ecf7e0" translate="yes" xml:space="preserve">
          <source>Some of the functions in this module are inlined by the compiler, similar to functions in the &lt;a href=&quot;kernel&quot;&gt;&lt;code&gt;Kernel&lt;/code&gt;&lt;/a&gt; module and they are explicitly marked in their docs as &quot;inlined by the compiler&quot;. For more information about inlined functions, check out the &lt;a href=&quot;kernel&quot;&gt;&lt;code&gt;Kernel&lt;/code&gt;&lt;/a&gt; module.</source>
          <target state="translated">이 모듈의 일부 기능은 &lt;a href=&quot;kernel&quot;&gt; &lt;code&gt;Kernel&lt;/code&gt; &lt;/a&gt; 모듈의 기능과 유사하게 컴파일러에 의해 인라인되며 문서에서 &quot;컴파일러에 의해 인라인 됨&quot;으로 명시 적으로 표시됩니다. 인라인 함수에 대한 자세한 내용은 &lt;a href=&quot;kernel&quot;&gt; &lt;code&gt;Kernel&lt;/code&gt; &lt;/a&gt; 모듈을 확인하십시오 .</target>
        </trans-unit>
        <trans-unit id="1351a1f3f5e4ff15e2ee7bf563a9188c76ada1d8" translate="yes" xml:space="preserve">
          <source>Some of those functions are low-level, allowing the user to interact with files or IO devices, like &lt;a href=&quot;#open/2&quot;&gt;&lt;code&gt;open/2&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#copy/3&quot;&gt;&lt;code&gt;copy/3&lt;/code&gt;&lt;/a&gt; and others. This module also provides higher level functions that work with filenames and have their naming based on UNIX variants. For example, one can copy a file via &lt;a href=&quot;#cp/3&quot;&gt;&lt;code&gt;cp/3&lt;/code&gt;&lt;/a&gt; and remove files and directories recursively via &lt;a href=&quot;#rm_rf/1&quot;&gt;&lt;code&gt;rm_rf/1&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">이러한 기능 중 일부는 저수준이므로 사용자는 &lt;a href=&quot;#open/2&quot;&gt; &lt;code&gt;open/2&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;#copy/3&quot;&gt; &lt;code&gt;copy/3&lt;/code&gt; &lt;/a&gt; 등과 같은 파일 또는 IO 장치와 상호 작용할 수 있습니다. 이 모듈은 또한 파일 이름과 함께 작동하고 UNIX 변형을 기반으로 이름이 지정된 더 높은 수준의 기능을 제공합니다. 예를 들어, &lt;a href=&quot;#cp/3&quot;&gt; &lt;code&gt;cp/3&lt;/code&gt; &lt;/a&gt; 를 통해 파일을 복사하고 &lt;a href=&quot;#rm_rf/1&quot;&gt; &lt;code&gt;rm_rf/1&lt;/code&gt; 을&lt;/a&gt; 통해 파일과 디렉토리를 재귀 적으로 제거 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="6fd879bb620af289a1b036290e1cf67c2340065b" translate="yes" xml:space="preserve">
          <source>Some switches will output different values based on the switches types:</source>
          <target state="translated">일부 스위치는 스위치 유형에 따라 다른 값을 출력합니다.</target>
        </trans-unit>
        <trans-unit id="1594a8ec691f4330becf7636c23a4c5abd8a9640" translate="yes" xml:space="preserve">
          <source>Some types have associated modifiers to clear up ambiguity in byte representation.</source>
          <target state="translated">일부 유형에는 바이트 표시에서 모호성을 해소하기 위해 연관된 수정자가 있습니다.</target>
        </trans-unit>
        <trans-unit id="deaf1a57d57875a67207f24f3b5dd3ac6b782a3a" translate="yes" xml:space="preserve">
          <source>Sometimes a module embeds information from an external file. This attribute allows the module to annotate which external resources have been used.</source>
          <target state="translated">때때로 모듈은 외부 파일의 정보를 포함합니다. 이 속성을 통해 모듈은 사용 된 외부 리소스에 주석을 달 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="384caed829a0ddd94d2e273f1d95ffe9dee6a8ec" translate="yes" xml:space="preserve">
          <source>Sometimes it&amp;rsquo;s necessary to ensure that a resource is cleaned up after some action that could potentially raise an error. The &lt;code&gt;try/after&lt;/code&gt; construct allows you to do that. For example, we can open a file and use an &lt;code&gt;after&lt;/code&gt; clause to close it&amp;ndash;even if something goes wrong:</source>
          <target state="translated">때때로 오류가 발생할 수있는 조치 후에 자원을 정리해야합니다. &lt;code&gt;try/after&lt;/code&gt; 구조가 허용하는 당신이 그렇게합니다. 예를 들어, 파일을 열고 &lt;code&gt;after&lt;/code&gt; 절을 사용하여 파일 을 닫을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e2b2ac6019fb65f8717c90d1d018234f716a20c9" translate="yes" xml:space="preserve">
          <source>Sometimes variable names might be dynamically created. In such cases, &lt;code&gt;Macro.var/2&lt;/code&gt; can be used to define new variables:</source>
          <target state="translated">때로는 변수 이름이 동적으로 생성 될 수 있습니다. 이러한 경우 &lt;code&gt;Macro.var/2&lt;/code&gt; 를 사용하여 새 변수를 정의 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c3e6cdc44719c0255e951c12c019ffe28042a186" translate="yes" xml:space="preserve">
          <source>Sometimes when working with quoted expressions, it may be useful to get the textual code representation back. This can be done with &lt;code&gt;Macro.to_string/1&lt;/code&gt;:</source>
          <target state="translated">따옴표로 묶은 표현식으로 작업 할 때 텍스트 코드 표현을 다시 얻는 것이 유용 할 수 있습니다. 이는 &lt;code&gt;Macro.to_string/1&lt;/code&gt; 로 수행 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="f678369b61eb09a9e589708cd7a2e02598564507" translate="yes" xml:space="preserve">
          <source>Sometimes you may want to wrap the entire body of a function in a &lt;code&gt;try&lt;/code&gt; construct, often to guarantee some code will be executed afterwards. In such cases, Elixir allows you to omit the &lt;code&gt;try&lt;/code&gt; line:</source>
          <target state="translated">때로는 함수의 전체 본문을 &lt;code&gt;try&lt;/code&gt; 구문 으로 감싸고 나중에 일부 코드가 실행되도록 보장 하기를 원할 수 있습니다 . 이러한 경우 Elixir를 사용하면 &lt;code&gt;try&lt;/code&gt; 줄 을 생략 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="a96f5994cefa16cd2405b3c485f7fd5c98881745" translate="yes" xml:space="preserve">
          <source>Sometimes you will create a list and it will return a value in single quotes. For example:</source>
          <target state="translated">때로는 목록을 작성하고 작은 따옴표로 값을 반환합니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="8127688bd131696b0a37f05f499d0599032f888f" translate="yes" xml:space="preserve">
          <source>Sometimes, it may be handy to define supervisors backed by a module:</source>
          <target state="translated">때로는 모듈이 지원하는 감독자를 정의하는 것이 편리 할 수 ​​있습니다.</target>
        </trans-unit>
        <trans-unit id="7107404c903a42c3ea798cd0771e63de0679051a" translate="yes" xml:space="preserve">
          <source>Sorting by multiple properties - first by size, then by first letter (this takes advantage of the fact that tuples are compared element-by-element):</source>
          <target state="translated">여러 속성으로 정렬-먼저 크기별로, 첫 글자로 정렬 (튜플은 요소별로 비교된다는 사실을 이용합니다) :</target>
        </trans-unit>
        <trans-unit id="be5acfabf53936ea3e9b1247e69a2a9d3351da9f" translate="yes" xml:space="preserve">
          <source>Sorts the &lt;code&gt;enumerable&lt;/code&gt; according to Erlang's term ordering.</source>
          <target state="translated">Erlang의 용어 순서에 따라 &lt;code&gt;enumerable&lt;/code&gt; 정렬합니다 .</target>
        </trans-unit>
        <trans-unit id="e68a312ee613bb7d1d0c541895ad03ce0f0b9c2f" translate="yes" xml:space="preserve">
          <source>Sorts the &lt;code&gt;enumerable&lt;/code&gt; by the given function.</source>
          <target state="translated">주어진 함수를 기준 &lt;code&gt;enumerable&lt;/code&gt; 을 정렬합니다 .</target>
        </trans-unit>
        <trans-unit id="abd6bf16aa13625f3c6058f6271a87fad2698de5" translate="yes" xml:space="preserve">
          <source>Sorts the mapped results of the &lt;code&gt;enumerable&lt;/code&gt; according to the provided &lt;code&gt;sorter&lt;/code&gt; function.</source>
          <target state="translated">제공된 &lt;code&gt;sorter&lt;/code&gt; 함수 에 따라 &lt;code&gt;enumerable&lt;/code&gt; 매핑 된 결과를 정렬 합니다.</target>
        </trans-unit>
        <trans-unit id="15783b50f9d3f00eb365b748b956c65a135f9d3e" translate="yes" xml:space="preserve">
          <source>Spawn executable is a more restricted and explicit version of spawn. It expects full file paths to the executable you want to execute. If they are in your &lt;code&gt;$PATH&lt;/code&gt;, they can be retrieved by calling &lt;a href=&quot;system#find_executable/1&quot;&gt;&lt;code&gt;System.find_executable/1&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">스폰 실행 파일은보다 제한적이고 명시적인 스폰 버전입니다. 실행하려는 실행 파일의 전체 파일 경로가 필요합니다. 이들이 &lt;code&gt;$PATH&lt;/code&gt; 에 있으면 &lt;a href=&quot;system#find_executable/1&quot;&gt; &lt;code&gt;System.find_executable/1&lt;/code&gt; &lt;/a&gt; 을 호출하여 검색 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="06d844ce2d042cfc05ff00cd36cbaef907fbf9f7" translate="yes" xml:space="preserve">
          <source>Spawns the given function &lt;code&gt;fun&lt;/code&gt; from module &lt;code&gt;mod&lt;/code&gt;, passing the given &lt;code&gt;args&lt;/code&gt; according to the given options.</source>
          <target state="translated">주어진 옵션에 따라 주어진 &lt;code&gt;args&lt;/code&gt; 전달하여 모듈 &lt;code&gt;mod&lt;/code&gt; 에서 주어진 함수 &lt;code&gt;fun&lt;/code&gt; 을 생성합니다 .</target>
        </trans-unit>
        <trans-unit id="e59d5e96307908db7f7259b156c4207b4b6647f1" translate="yes" xml:space="preserve">
          <source>Spawns the given function &lt;code&gt;fun&lt;/code&gt; from the given &lt;code&gt;module&lt;/code&gt; passing it the given &lt;code&gt;args&lt;/code&gt; and returns its PID.</source>
          <target state="translated">주어진 &lt;code&gt;module&lt;/code&gt; 에서 주어진 함수 &lt;code&gt;fun&lt;/code&gt; 을 생성 하여 주어진 &lt;code&gt;args&lt;/code&gt; 전달 하고 PID를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="ebfa1216cad38e8a649b56dffd10838521f159b4" translate="yes" xml:space="preserve">
          <source>Spawns the given function &lt;code&gt;fun&lt;/code&gt; from the given &lt;code&gt;module&lt;/code&gt; passing it the given &lt;code&gt;args&lt;/code&gt;, links it to the current process, and returns its PID.</source>
          <target state="translated">주어진 &lt;code&gt;module&lt;/code&gt; 에서 주어진 함수 &lt;code&gt;fun&lt;/code&gt; 을 생성하여 주어진 &lt;code&gt;args&lt;/code&gt; 를 전달 하고 현재 프로세스에 연결하고 PID를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="ea2e62ea14924f90832df9726a7c47d9b99aef7a" translate="yes" xml:space="preserve">
          <source>Spawns the given function according to the given options.</source>
          <target state="translated">주어진 옵션에 따라 주어진 기능을 생성합니다.</target>
        </trans-unit>
        <trans-unit id="3315809b279cf15aa395cbce73fa8ae67f6dbff9" translate="yes" xml:space="preserve">
          <source>Spawns the given function and returns its PID.</source>
          <target state="translated">주어진 함수를 생성하고 PID를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="35d6575cb965b03843b65682af53845db43ea4f1" translate="yes" xml:space="preserve">
          <source>Spawns the given function, links it to the current process, and returns its PID.</source>
          <target state="translated">주어진 함수를 생성하고 현재 프로세스에 연결 한 후 PID를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="6b3166525e86d6671be4ca627ba932e58c5e6876" translate="yes" xml:space="preserve">
          <source>Spawns the given function, monitors it and returns its PID and monitoring reference.</source>
          <target state="translated">주어진 함수를 생성하고 모니터링하여 PID 및 모니터링 참조를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="476a4f932c0193636e1b5b265079bd4eebed09cf" translate="yes" xml:space="preserve">
          <source>Spawns the given module and function passing the given args, monitors it and returns its PID and monitoring reference.</source>
          <target state="translated">주어진 args를 전달하는 주어진 모듈과 함수를 생성하고 모니터하고 PID와 모니터링 참조를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="11becd1e5ec9242aef1d1841d542f66a7becf7fb" translate="yes" xml:space="preserve">
          <source>Special forms are the basic building blocks of Elixir, and therefore cannot be overridden by the developer.</source>
          <target state="translated">특수 형식은 Elixir의 기본 구성 요소이므로 개발자가 재정의 할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="ec2d21cb128d08e54f4cc7123b3da9fc09f1d1fc" translate="yes" xml:space="preserve">
          <source>Special names</source>
          <target state="translated">특별한 이름</target>
        </trans-unit>
        <trans-unit id="bd9733e0c08db2f71cd9184a67c342d610f82cb0" translate="yes" xml:space="preserve">
          <source>Specifically, this function takes a UTF-8 encoded binary and returns a list of its integer code points. It is similar to &lt;a href=&quot;#codepoints/1&quot;&gt;&lt;code&gt;codepoints/1&lt;/code&gt;&lt;/a&gt; except that the latter returns a list of code points as strings.</source>
          <target state="translated">특히이 함수는 UTF-8로 인코딩 된 이진을 사용하여 정수 코드 포인트 목록을 반환합니다. 후자는 코드 포인트 목록을 문자열로 반환한다는 점을 제외하고는 &lt;a href=&quot;#codepoints/1&quot;&gt; &lt;code&gt;codepoints/1&lt;/code&gt; &lt;/a&gt; 과 유사합니다 .</target>
        </trans-unit>
        <trans-unit id="076d7709d7ab86ddce0bc7b4c95d3c7f192f7af8" translate="yes" xml:space="preserve">
          <source>Specifications can be overloaded just like ordinary functions.</source>
          <target state="translated">일반 기능과 마찬가지로 사양이 과부하 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5caf5e40c5f8e8465a047f2e293de43751354b57" translate="yes" xml:space="preserve">
          <source>Specifies a provider API that loads configuration during boot.</source>
          <target state="translated">부팅 중에 구성을로드하는 공급자 API를 지정합니다.</target>
        </trans-unit>
        <trans-unit id="594428487583abee60caa384a006645343bb4dab" translate="yes" xml:space="preserve">
          <source>Specifies an external resource for the current module.</source>
          <target state="translated">현재 모듈의 외부 리소스를 지정합니다.</target>
        </trans-unit>
        <trans-unit id="991ba6c6c1d2cdca7ee53711d92474c28af8b0e5" translate="yes" xml:space="preserve">
          <source>Specifies the time zone database for calendar operations.</source>
          <target state="translated">달력 작업을위한 시간대 데이터베이스를 지정합니다.</target>
        </trans-unit>
        <trans-unit id="33f17cd6008d68beaa918cd4a927ca8b7fb23835" translate="yes" xml:space="preserve">
          <source>Specify the module version. Accepts any valid Elixir value, for example:</source>
          <target state="translated">모듈 버전을 지정하십시오. 유효한 Elixir 값을받습니다 (예 :</target>
        </trans-unit>
        <trans-unit id="5ae92cad872366e915ee35a53033e6a501a2ddaf" translate="yes" xml:space="preserve">
          <source>Splits a string into &lt;a href=&quot;#t:argv/0&quot;&gt;&lt;code&gt;argv/0&lt;/code&gt;&lt;/a&gt; chunks.</source>
          <target state="translated">문자열을 &lt;a href=&quot;#t:argv/0&quot;&gt; &lt;code&gt;argv/0&lt;/code&gt; &lt;/a&gt; 청크 로 나눕니다 .</target>
        </trans-unit>
        <trans-unit id="9cee674c64765c1d80ecb8eac714ef8b24a33c1b" translate="yes" xml:space="preserve">
          <source>Splits a string into two at the specified offset. When the offset given is negative, location is counted from the end of the string.</source>
          <target state="translated">지정된 오프셋에서 문자열을 2로 나눕니다. 주어진 오프셋이 음수이면 위치는 문자열의 끝부터 계산됩니다.</target>
        </trans-unit>
        <trans-unit id="ff232001d7426240fb22459c05a5783114c65dee" translate="yes" xml:space="preserve">
          <source>Splits enumerable in two at the position of the element for which &lt;code&gt;fun&lt;/code&gt; returns a falsy value (&lt;code&gt;false&lt;/code&gt; or &lt;code&gt;nil&lt;/code&gt;) for the first time.</source>
          <target state="translated">&lt;code&gt;fun&lt;/code&gt; 이 처음으로 &lt;code&gt;false&lt;/code&gt; 값 ( false 또는 &lt;code&gt;nil&lt;/code&gt; )을 반환하는 요소 위치에서 열거 가능한 두 개로 분할 됩니다.</target>
        </trans-unit>
        <trans-unit id="17bf201d5ac6822c0e5461609bb3331d4a9b71ae" translate="yes" xml:space="preserve">
          <source>Splits enumerable on every element for which &lt;code&gt;fun&lt;/code&gt; returns a new value.</source>
          <target state="translated">&lt;code&gt;fun&lt;/code&gt; 이 새로운 값을 반환하는 모든 요소에 대해 열거 가능한 분할 .</target>
        </trans-unit>
        <trans-unit id="8fab28fdcf7550270e90b45a72ddba1737cc4ba0" translate="yes" xml:space="preserve">
          <source>Splits the &lt;code&gt;enumerable&lt;/code&gt; in two lists according to the given function &lt;code&gt;fun&lt;/code&gt;.</source>
          <target state="translated">스플릿 &lt;code&gt;enumerable&lt;/code&gt; 주어진 기능에 따라이 개 목록에 &lt;code&gt;fun&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="e9928604019411df089cbfb5d79d98e495eb508a" translate="yes" xml:space="preserve">
          <source>Splits the &lt;code&gt;enumerable&lt;/code&gt; into groups based on &lt;code&gt;key_fun&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;key_fun&lt;/code&gt; 기반으로 &lt;code&gt;enumerable&lt;/code&gt; 을 그룹으로 분할합니다 .</target>
        </trans-unit>
        <trans-unit id="9508aa9de8649214346d921d5668688428b1f895" translate="yes" xml:space="preserve">
          <source>Splits the &lt;code&gt;enumerable&lt;/code&gt; into two enumerables, leaving &lt;code&gt;count&lt;/code&gt; elements in the first one.</source>
          <target state="translated">스플릿 &lt;code&gt;enumerable&lt;/code&gt; 남겨 두 enumerables로 &lt;code&gt;count&lt;/code&gt; 첫번째의 소자.</target>
        </trans-unit>
        <trans-unit id="f96c656c96d7ad7920526ee526067cab2352a1cf" translate="yes" xml:space="preserve">
          <source>Splits the given &lt;code&gt;enumerable&lt;/code&gt; in two lists by calling &lt;code&gt;fun&lt;/code&gt; with each element in the &lt;code&gt;enumerable&lt;/code&gt; as its only argument. Returns a tuple with the first list containing all the elements in &lt;code&gt;enumerable&lt;/code&gt; for which applying &lt;code&gt;fun&lt;/code&gt; returned a truthy value, and a second list with all the elements for which applying &lt;code&gt;fun&lt;/code&gt; returned a falsy value (&lt;code&gt;false&lt;/code&gt; or &lt;code&gt;nil&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;enumerable&lt;/code&gt; 각 요소를 유일한 인수로 &lt;code&gt;fun&lt;/code&gt; 을 호출 하여 주어진 열거 형 을 두 목록으로 &lt;code&gt;enumerable&lt;/code&gt; . &lt;code&gt;fun&lt;/code&gt; 을 적용 하면 true 값을 반환 한 &lt;code&gt;enumerable&lt;/code&gt; 모든 요소를 ​​포함하는 첫 번째 목록과 &lt;code&gt;fun&lt;/code&gt; 을 적용한 모든 요소가 &lt;code&gt;false&lt;/code&gt; 값을 반환하는 두 번째 목록이 포함 된 튜플을 반환합니다 ( false 또는 &lt;code&gt;nil&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="178b0042fed7fdd8f93f31219d901e4b9b82d0c2" translate="yes" xml:space="preserve">
          <source>Splits the given module name into binary parts.</source>
          <target state="translated">주어진 모듈 이름을 이진 부분으로 나눕니다.</target>
        </trans-unit>
        <trans-unit id="0fd31f1cd4c506deb298a3d1cd81da35a74ebe25" translate="yes" xml:space="preserve">
          <source>Splits the given target based on the given pattern and in the given number of parts.</source>
          <target state="translated">주어진 패턴과 주어진 부품 수를 기준으로 주어진 대상을 분할합니다.</target>
        </trans-unit>
        <trans-unit id="8b112253fdc3346c7e770f36bb6f23ad8926016d" translate="yes" xml:space="preserve">
          <source>Splits the path into a list at the path separator.</source>
          <target state="translated">경로를 경로 구분 기호의 목록으로 분할합니다.</target>
        </trans-unit>
        <trans-unit id="359b1199c2392525736cac5022b5304530d285ca" translate="yes" xml:space="preserve">
          <source>Splits the string into chunks of characters that share a common trait.</source>
          <target state="translated">문자열을 공통 특성을 공유하는 여러 문자로 분할합니다.</target>
        </trans-unit>
        <trans-unit id="036d667a456f6e5701ef615d7e9fe0acfd59a5e1" translate="yes" xml:space="preserve">
          <source>Splitting on empty string returns graphemes:</source>
          <target state="translated">빈 문자열을 분할하면 그래프가 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="580cb6b295814a3188d6380df0dec3f391ba39fd" translate="yes" xml:space="preserve">
          <source>Splitting with a string pattern:</source>
          <target state="translated">문자열 패턴으로 분할 :</target>
        </trans-unit>
        <trans-unit id="bcf765c54d34e28f6803f95f077f285d09e39e5b" translate="yes" xml:space="preserve">
          <source>Stacktrace information</source>
          <target state="translated">스택 트레이스 정보</target>
        </trans-unit>
        <trans-unit id="27f8a6f3b534fe60cc2d1d773b278872783430c8" translate="yes" xml:space="preserve">
          <source>Start IEx with &lt;code&gt;iex -S mix&lt;/code&gt; and you can see that the IEx prompt has changed.</source>
          <target state="translated">&lt;code&gt;iex -S mix&lt;/code&gt; 로 IEx를 시작 하면 IEx 프롬프트가 변경되었음을 알 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="cd55884cf622ecaecfbd0f8029b7a2200a0e0ffe" translate="yes" xml:space="preserve">
          <source>Start a new server with &lt;code&gt;PORT=4040 mix run --no-halt&lt;/code&gt; and we can now open up many concurrent telnet clients. You will also notice that quitting a client does not bring the acceptor down. Excellent!</source>
          <target state="translated">&lt;code&gt;PORT=4040 mix run --no-halt&lt;/code&gt; 로 새 서버를 시작하면 많은 동시 텔넷 클라이언트를 열 수 있습니다. 또한 클라이언트를 종료해도 수락자가 다운되지 않는 것을 알 수 있습니다. 우수한!</target>
        </trans-unit>
        <trans-unit id="a95c450013bed3752195e10c7871fec8dc526ef5" translate="yes" xml:space="preserve">
          <source>Start an IEx session inside the &lt;code&gt;kv_server&lt;/code&gt; application with &lt;code&gt;iex -S mix&lt;/code&gt;. Inside IEx, run:</source>
          <target state="translated">&lt;code&gt;iex -S mix&lt;/code&gt; 로 &lt;code&gt;kv_server&lt;/code&gt; 애플리케이션 에서 IEx 세션을 시작하십시오 . IEx 내부에서 다음을 실행하십시오.</target>
        </trans-unit>
        <trans-unit id="f1e3c34a15115da4146bddae97a22e873ad3aba6" translate="yes" xml:space="preserve">
          <source>Start and shutdown</source>
          <target state="translated">시작과 종료</target>
        </trans-unit>
        <trans-unit id="12af8a4747b6cb74e2c03f95e160e013ad4c5cb4" translate="yes" xml:space="preserve">
          <source>Start new sections with second level Markdown headers &lt;code&gt;##&lt;/code&gt;. First level headers are reserved for module and function names.</source>
          <target state="translated">두 번째 수준의 마크 다운 헤더 &lt;code&gt;##&lt;/code&gt; 로 새 섹션을 시작하십시오 . 첫 번째 수준 헤더는 모듈 및 기능 이름 용으로 예약되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="089185f450fbba06f1ee579db9849d55ba57b73a" translate="yes" xml:space="preserve">
          <source>Start the function name with one or two underscores, for example, &lt;code&gt;__add__/2&lt;/code&gt;, and add &lt;code&gt;@doc false&lt;/code&gt;. The compiler does not import functions with leading underscores and they hint to anyone reading the code of their intended private usage.</source>
          <target state="translated">&lt;code&gt;__add__/2&lt;/code&gt; 와 같이 하나 또는 두 개의 밑줄로 함수 이름을 시작하고 &lt;code&gt;@doc false&lt;/code&gt; 를 추가하십시오 . 컴파일러는 밑줄이있는 함수를 가져 오지 않으며 의도 된 개인 사용 코드를 읽는 사람에게 힌트를줍니다.</target>
        </trans-unit>
        <trans-unit id="07f93068d3bc0f04950355efb6ddd2d17ec1f56e" translate="yes" xml:space="preserve">
          <source>Started applications are, finally, &lt;em&gt;stopped&lt;/em&gt;:</source>
          <target state="translated">시작된 응용 프로그램은 마지막으로 &lt;em&gt;중지됩니다&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="64358ae1fb937d4c75eba047d686e13aa9f19ac8" translate="yes" xml:space="preserve">
          <source>Starting applications</source>
          <target state="translated">응용 프로그램 시작</target>
        </trans-unit>
        <trans-unit id="f835ee5c0014a63ad6b6df82abb9e701ec553824" translate="yes" xml:space="preserve">
          <source>Starts ExUnit and automatically runs tests right before the VM terminates.</source>
          <target state="translated">ExUnit을 시작하고 VM이 종료되기 직전에 테스트를 자동으로 실행합니다.</target>
        </trans-unit>
        <trans-unit id="86c6bbd882bee2fa0066e7a22e3454fd13db4c2a" translate="yes" xml:space="preserve">
          <source>Starts a &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;GenServer&lt;/code&gt;&lt;/a&gt; process linked to the current process.</source>
          <target state="translated">현재 프로세스에 연결된 &lt;a href=&quot;#content&quot;&gt; &lt;code&gt;GenServer&lt;/code&gt; &lt;/a&gt; 프로세스를 시작합니다 .</target>
        </trans-unit>
        <trans-unit id="2318ba34ca99a824b9aff08f1f35d1274803200e" translate="yes" xml:space="preserve">
          <source>Starts a &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;GenServer&lt;/code&gt;&lt;/a&gt; process without links (outside of a supervision tree).</source>
          <target state="translated">링크없이 &lt;a href=&quot;#content&quot;&gt; &lt;code&gt;GenServer&lt;/code&gt; &lt;/a&gt; 프로세스를 시작합니다 (감독 트리 외부).</target>
        </trans-unit>
        <trans-unit id="0782a0a4923899805a82fdd2cfd52de5db03738c" translate="yes" xml:space="preserve">
          <source>Starts a child process under the test supervisor.</source>
          <target state="translated">테스트 감독자에서 하위 프로세스를 시작합니다.</target>
        </trans-unit>
        <trans-unit id="8ae57b5742336733267931b5f6b503fd008c72a0" translate="yes" xml:space="preserve">
          <source>Starts a module-based supervisor process with the given &lt;code&gt;module&lt;/code&gt; and &lt;code&gt;arg&lt;/code&gt;.</source>
          <target state="translated">주어진 &lt;code&gt;module&lt;/code&gt; 과 &lt;code&gt;arg&lt;/code&gt; 로모듈 기반 감독자 프로세스를 시작합니다 .</target>
        </trans-unit>
        <trans-unit id="fcf80a20aa8126b71633a9c4d9fbaa386ee40cfe" translate="yes" xml:space="preserve">
          <source>Starts a module-based supervisor process with the given &lt;code&gt;module&lt;/code&gt; and &lt;code&gt;init_arg&lt;/code&gt;.</source>
          <target state="translated">주어진 &lt;code&gt;module&lt;/code&gt; 과 &lt;code&gt;init_arg&lt;/code&gt; 로모듈 기반 감독자 프로세스를 시작합니다 .</target>
        </trans-unit>
        <trans-unit id="a29ac2effba91a69db59f15d944bea1c07200c03" translate="yes" xml:space="preserve">
          <source>Starts a new IEx server session.</source>
          <target state="translated">새로운 IEx 서버 세션을 시작합니다.</target>
        </trans-unit>
        <trans-unit id="d40ac264e18a64e3aa1c8e14b1832737938a297e" translate="yes" xml:space="preserve">
          <source>Starts a new supervisor.</source>
          <target state="translated">새로운 감독자를 시작합니다.</target>
        </trans-unit>
        <trans-unit id="ebaacaa2714f2595144af20c9a68793efe7ffd04" translate="yes" xml:space="preserve">
          <source>Starts a process linked to the current process.</source>
          <target state="translated">현재 프로세스에 연결된 프로세스를 시작합니다.</target>
        </trans-unit>
        <trans-unit id="2b59224aef1ecbe4120f6edee31cbd426830d26d" translate="yes" xml:space="preserve">
          <source>Starts a supervisor with the given children.</source>
          <target state="translated">주어진 자녀와 함께 감독자를 시작합니다.</target>
        </trans-unit>
        <trans-unit id="7d9965ed4725208ff0fa257915381d4a0e7c1131" translate="yes" xml:space="preserve">
          <source>Starts a supervisor with the given options.</source>
          <target state="translated">주어진 옵션으로 감독자를 시작합니다.</target>
        </trans-unit>
        <trans-unit id="07b52174845bc90fe1ecf5c9721f55e62fa125c0" translate="yes" xml:space="preserve">
          <source>Starts a task as a child of the given &lt;code&gt;supervisor&lt;/code&gt;.</source>
          <target state="translated">지정된 &lt;code&gt;supervisor&lt;/code&gt; 의 자식으로 작업을 시작합니다 .</target>
        </trans-unit>
        <trans-unit id="b2df2466c722de3bf0630de14ca0456f24b95029" translate="yes" xml:space="preserve">
          <source>Starts a task as part of a supervision tree.</source>
          <target state="translated">감독 트리의 일부로 작업을 시작합니다.</target>
        </trans-unit>
        <trans-unit id="1cb728f23ec3d4bd98eecc35a24b2ca0a288323d" translate="yes" xml:space="preserve">
          <source>Starts a task for parallel compilation.</source>
          <target state="translated">병렬 컴파일 작업을 시작합니다.</target>
        </trans-unit>
        <trans-unit id="3e12fe5929d287faa596ff7c27135e404f41d121" translate="yes" xml:space="preserve">
          <source>Starts a task that can be awaited on.</source>
          <target state="translated">기다릴 수있는 작업을 시작합니다.</target>
        </trans-unit>
        <trans-unit id="5e4e4d48d3e46c07e8ad89683993faa9920d4034" translate="yes" xml:space="preserve">
          <source>Starts a task that must be awaited on.</source>
          <target state="translated">기다려야 할 작업을 시작합니다.</target>
        </trans-unit>
        <trans-unit id="baff2e0636d16f2edf213eeb533e7524ff6da6ba" translate="yes" xml:space="preserve">
          <source>Starts a task.</source>
          <target state="translated">작업을 시작합니다.</target>
        </trans-unit>
        <trans-unit id="60a11990717e4ff2488b4ece1a89e6bbe58d521f" translate="yes" xml:space="preserve">
          <source>Starts an agent linked to the current process with the given function.</source>
          <target state="translated">주어진 기능으로 현재 프로세스에 연결된 에이전트를 시작합니다.</target>
        </trans-unit>
        <trans-unit id="88115ca2a6a5c44765a372981f691549cc020d54" translate="yes" xml:space="preserve">
          <source>Starts an agent linked to the current process.</source>
          <target state="translated">현재 프로세스에 연결된 에이전트를 시작합니다.</target>
        </trans-unit>
        <trans-unit id="95ae19223d60b6b02cb6c4bd30ac4fa25fed8a18" translate="yes" xml:space="preserve">
          <source>Starts an agent process without links (outside of a supervision tree).</source>
          <target state="translated">링크없이 (감독 트리 외부) 에이전트 프로세스를 시작합니다.</target>
        </trans-unit>
        <trans-unit id="abf365e5082ecbff5e0e8db22fa0296d814d2bfa" translate="yes" xml:space="preserve">
          <source>Starts an agent without links with the given module, function, and arguments.</source>
          <target state="translated">주어진 모듈, 함수 및 인수와의 링크없이 에이전트를 시작합니다.</target>
        </trans-unit>
        <trans-unit id="a32e4b2048c8ef3240a536f9df6ce6e47d26f263" translate="yes" xml:space="preserve">
          <source>Starts an application in synchronous phases.</source>
          <target state="translated">동기 단계에서 애플리케이션을 시작합니다.</target>
        </trans-unit>
        <trans-unit id="c1cb03abb8e558c98285d30efef32d8ab46f3eb9" translate="yes" xml:space="preserve">
          <source>Starts monitoring the given &lt;code&gt;item&lt;/code&gt; from the calling process.</source>
          <target state="translated">호출 프로세스에서 지정된 &lt;code&gt;item&lt;/code&gt; 모니터링을 시작합니다 .</target>
        </trans-unit>
        <trans-unit id="814c5f11fc85ecacb301d5d1ff7a5207b63cc546" translate="yes" xml:space="preserve">
          <source>Starts monitoring the given &lt;code&gt;port&lt;/code&gt; from the calling process.</source>
          <target state="translated">호출 프로세스에서 지정된 &lt;code&gt;port&lt;/code&gt; 모니터링을 시작합니다 .</target>
        </trans-unit>
        <trans-unit id="32f7fdf8c34390c9e691d76ef8c0ec7bd0d81af7" translate="yes" xml:space="preserve">
          <source>Starts the current application and runs code.</source>
          <target state="translated">현재 응용 프로그램을 시작하고 코드를 실행합니다.</target>
        </trans-unit>
        <trans-unit id="465701ca429a2dfabc3bc5f01a8bd60e3b9231c7" translate="yes" xml:space="preserve">
          <source>Starts the given &lt;code&gt;app&lt;/code&gt;.</source>
          <target state="translated">주어진 &lt;code&gt;app&lt;/code&gt; 시작합니다 .</target>
        </trans-unit>
        <trans-unit id="e2271caeb4b7d5b3c207dd94c7b7c318ed2188f2" translate="yes" xml:space="preserve">
          <source>Starts the registry as a supervisor process.</source>
          <target state="translated">감독자 프로세스로 레지스트리를 시작합니다.</target>
        </trans-unit>
        <trans-unit id="a72502067518684f9deeec70cf119fd26326cd33" translate="yes" xml:space="preserve">
          <source>State</source>
          <target state="translated">State</target>
        </trans-unit>
        <trans-unit id="a04227ba1319a1fad4347603729d051498bac906" translate="yes" xml:space="preserve">
          <source>Static code analysis</source>
          <target state="translated">정적 코드 분석</target>
        </trans-unit>
        <trans-unit id="a62a6d902db47855d8f77112868e3787eabbca53" translate="yes" xml:space="preserve">
          <source>Stopping an application with a callback module has three steps:</source>
          <target state="translated">콜백 모듈을 사용하여 응용 프로그램을 중지하려면 다음 세 단계를 수행하십시오.</target>
        </trans-unit>
        <trans-unit id="3753ad0cdb9c49b6498a88fe4f4514a2b9b36ece" translate="yes" xml:space="preserve">
          <source>Stopping an application without a callback module is defined, but except for some system tracing, it is in practice a no-op.</source>
          <target state="translated">콜백 모듈없이 응용 프로그램을 중지하는 것이 정의되어 있지만 일부 시스템 추적을 제외하고 실제로는 작동하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="d5b2d506e52eb47a1075dbad242127c01e521df7" translate="yes" xml:space="preserve">
          <source>Stopping applications</source>
          <target state="translated">응용 프로그램 중지</target>
        </trans-unit>
        <trans-unit id="16d9ee2c7e28df63e19079e90e7824e30d92fc9f" translate="yes" xml:space="preserve">
          <source>Stops a child process started via &lt;a href=&quot;#start_supervised/2&quot;&gt;&lt;code&gt;start_supervised/2&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#start_supervised/2&quot;&gt; &lt;code&gt;start_supervised/2&lt;/code&gt; &lt;/a&gt; 를 통해 시작된 하위 프로세스를 중지합니다 .</target>
        </trans-unit>
        <trans-unit id="1d836dc29fd66efd06619857a7f3fbdbb2570615" translate="yes" xml:space="preserve">
          <source>Stops the IO device and returns the remaining input/output buffers.</source>
          <target state="translated">IO 장치를 중지하고 나머지 입력 / 출력 버퍼를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="420cba62897b963528b14026eceb60569ceedeae" translate="yes" xml:space="preserve">
          <source>Stops the execution of the calling process with the given reason.</source>
          <target state="translated">주어진 이유로 호출 프로세스의 실행을 중지합니다.</target>
        </trans-unit>
        <trans-unit id="1b87ddfd2f0a1efe1c63c07d6457515d241e5a11" translate="yes" xml:space="preserve">
          <source>Stops the given &lt;code&gt;app&lt;/code&gt;.</source>
          <target state="translated">지정된 &lt;code&gt;app&lt;/code&gt; 중지합니다 .</target>
        </trans-unit>
        <trans-unit id="7a8ca646fdc158d3d531a0223dadbec6991917ca" translate="yes" xml:space="preserve">
          <source>Stores registry metadata.</source>
          <target state="translated">레지스트리 메타 데이터를 저장합니다.</target>
        </trans-unit>
        <trans-unit id="486a63f10cb978abccfbd8ecf134b1efae0f41f9" translate="yes" xml:space="preserve">
          <source>Stores the given &lt;code&gt;key&lt;/code&gt;-&lt;code&gt;value&lt;/code&gt; pair in the process dictionary.</source>
          <target state="translated">주어진 &lt;code&gt;key&lt;/code&gt; - &lt;code&gt;value&lt;/code&gt; 쌍을 프로세스 사전에 저장합니다 .</target>
        </trans-unit>
        <trans-unit id="3a40588dab874cb0f15e4d524b5977f1cc44faf9" translate="yes" xml:space="preserve">
          <source>Storing information with attributes</source>
          <target state="translated">속성을 사용하여 정보 저장</target>
        </trans-unit>
        <trans-unit id="876f3e0202ca40dedf2e5ab6577eba1ae637fb53" translate="yes" xml:space="preserve">
          <source>Strategies</source>
          <target state="translated">Strategies</target>
        </trans-unit>
        <trans-unit id="df063869e11d7a9aa132cd4a984f7b5eb870d656" translate="yes" xml:space="preserve">
          <source>Stream</source>
          <target state="translated">Stream</target>
        </trans-unit>
        <trans-unit id="74985da267c6803b262f117de72af2d02e48029f" translate="yes" xml:space="preserve">
          <source>Streams</source>
          <target state="translated">Streams</target>
        </trans-unit>
        <trans-unit id="32937312f1205a985f371273166b0a08620a94b4" translate="yes" xml:space="preserve">
          <source>Streams are composable, lazy enumerables (for an introduction on enumerables, see the &lt;a href=&quot;enum&quot;&gt;&lt;code&gt;Enum&lt;/code&gt;&lt;/a&gt; module). Any enumerable that generates elements one by one during enumeration is called a stream. For example, Elixir's &lt;a href=&quot;range&quot;&gt;&lt;code&gt;Range&lt;/code&gt;&lt;/a&gt; is a stream:</source>
          <target state="translated">스트림은 컴포저 블하고 게으른 열거 형입니다 (열거 형에 대한 소개는 &lt;a href=&quot;enum&quot;&gt; &lt;code&gt;Enum&lt;/code&gt; &lt;/a&gt; 모듈 참조 ). 열거하는 동안 요소를 하나씩 생성하는 열거 가능 항목을 스트림이라고합니다. 예를 들어, 엘릭서의 &lt;a href=&quot;range&quot;&gt; &lt;code&gt;Range&lt;/code&gt; &lt;/a&gt; 는 스트림입니다 :</target>
        </trans-unit>
        <trans-unit id="4d05b9a39a36694d426084ba23a5f9e69c3f3e62" translate="yes" xml:space="preserve">
          <source>Streams are lazy, composable enumerables.</source>
          <target state="translated">스트림은 게으르고 구성 가능한 열거 형입니다.</target>
        </trans-unit>
        <trans-unit id="712809970aa25b88c8417d13c741aaaed8cdc5c7" translate="yes" xml:space="preserve">
          <source>Streams the enumerable in chunks, containing &lt;code&gt;count&lt;/code&gt; elements each, where each new chunk starts &lt;code&gt;step&lt;/code&gt; elements into the enumerable.</source>
          <target state="translated">&lt;code&gt;count&lt;/code&gt; 요소를 포함하는 열거 가능한 청크를 스트림으로 스트리밍합니다 . 여기서 각 새 청크는 &lt;code&gt;step&lt;/code&gt; 요소를 열거 가능으로 시작 합니다 .</target>
        </trans-unit>
        <trans-unit id="3df63b7acb0522da685dad5fe84b81fdd7b25264" translate="yes" xml:space="preserve">
          <source>String</source>
          <target state="translated">String</target>
        </trans-unit>
        <trans-unit id="642ccf43dc1d6fbbbae9dcb9d0b32837c15cd30f" translate="yes" xml:space="preserve">
          <source>String (binary) concatenation uses the &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt; operator but charlists use the lists concatenation operator &lt;code&gt;++&lt;/code&gt;:</source>
          <target state="translated">문자열 (이진) 연결은 &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt; 연산자를 사용하지만 문자 목록은 목록 연결 연산자 &lt;code&gt;++&lt;/code&gt; 를 사용합니다 .</target>
        </trans-unit>
        <trans-unit id="83229f3ff8f7ea7a043154af3b38efd4909e3589" translate="yes" xml:space="preserve">
          <source>String and binary operations</source>
          <target state="translated">문자열 및 이진 연산</target>
        </trans-unit>
        <trans-unit id="bd850015d8baaaed30b4f3d5a9c9529f30dc8015" translate="yes" xml:space="preserve">
          <source>String concatenation is done with &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt;:</source>
          <target state="translated">문자열 연결은 &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt; 로 수행됩니다 .</target>
        </trans-unit>
        <trans-unit id="d89992e6bf13c0c402335f758d9be996e2e01c23" translate="yes" xml:space="preserve">
          <source>String.Chars</source>
          <target state="translated">String.Chars</target>
        </trans-unit>
        <trans-unit id="34301512f5868a1de9803c4f3410c31c2c126816" translate="yes" xml:space="preserve">
          <source>String.Chars &lt;small&gt;protocol&lt;/small&gt;</source>
          <target state="translated">String.Chars &lt;small&gt;프로토콜&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="1c5c736c504b053727fd9efef0379fa8c75be99f" translate="yes" xml:space="preserve">
          <source>String.Chars.t (0)</source>
          <target state="translated">String.Chars.t (0)</target>
        </trans-unit>
        <trans-unit id="53d34343625f2871cea1abc24cdb3f39da79c324" translate="yes" xml:space="preserve">
          <source>String.Chars.to_string (1)</source>
          <target state="translated">String.Chars.to_string (1)</target>
        </trans-unit>
        <trans-unit id="71b9f81312a912f581ac74b4c41e1dabf6deb89c" translate="yes" xml:space="preserve">
          <source>StringIO</source>
          <target state="translated">StringIO</target>
        </trans-unit>
        <trans-unit id="3816c4beac471c733eed1d91c213f8c2b6a29262" translate="yes" xml:space="preserve">
          <source>Strings</source>
          <target state="translated">Strings</target>
        </trans-unit>
        <trans-unit id="4e070c4fd19657d532bad6b50d3c0bc3ada85afa" translate="yes" xml:space="preserve">
          <source>Strings are always represented as themselves in the AST.</source>
          <target state="translated">문자열은 항상 AST에서 자체로 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="9189545cce6b22534b68d2a8c78d66e2e097a67a" translate="yes" xml:space="preserve">
          <source>Strings can have line breaks in them. You can introduce them using escape sequences:</source>
          <target state="translated">문자열에는 줄 바꿈이있을 수 있습니다. 이스케이프 시퀀스를 사용하여 소개 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ca38f6c1fbddaf28313e82e08e3bdd20ed71adb5" translate="yes" xml:space="preserve">
          <source>Strings in Elixir are delimited by double quotes, and they are encoded in UTF-8:</source>
          <target state="translated">Elixir의 문자열은 큰 따옴표로 구분되며 UTF-8로 인코딩됩니다.</target>
        </trans-unit>
        <trans-unit id="956ce6bc8b8fc3893f30f39eeac47f3c2031a779" translate="yes" xml:space="preserve">
          <source>Strings in Elixir are represented internally by binaries which are sequences of bytes:</source>
          <target state="translated">Elixir의 문자열은 바이트 시퀀스 인 이진으로 내부적으로 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="949492a01a0acbead6a5b64c79b3a5208d1fa196" translate="yes" xml:space="preserve">
          <source>Strings, char lists, and word lists sigils</source>
          <target state="translated">문자열, 문자 목록 및 단어 목록시길</target>
        </trans-unit>
        <trans-unit id="b1b0c17e89281d54da848221c3d7d64fce387af1" translate="yes" xml:space="preserve">
          <source>Strings, charlists, atoms and sigils are kept as is. No character is automatically escaped or unescaped. The choice of delimiter is also respected from the input</source>
          <target state="translated">현, 캐릭터리스트, 원자 및시길은 그대로 유지됩니다. 어떤 문자도 자동으로 이스케이프되거나 이스케이프되지 않습니다. 구분 기호의 선택은 입력에서 존중됩니다.</target>
        </trans-unit>
        <trans-unit id="a4ab848fe5c4b2e5f638f279c7f13cc481bac6da" translate="yes" xml:space="preserve">
          <source>Struct</source>
          <target state="translated">Struct</target>
        </trans-unit>
        <trans-unit id="21e310386df8cb3491068257a8769c52dadb5d7d" translate="yes" xml:space="preserve">
          <source>Struct fields are evaluated at compile-time, which allows them to be dynamic. In the example below, &lt;code&gt;10 + 11&lt;/code&gt; is evaluated at compile-time and the age field is stored with value &lt;code&gt;21&lt;/code&gt;:</source>
          <target state="translated">구조 필드는 컴파일 타임에 평가되므로 동적 일 수 있습니다. 아래 예제에서 &lt;code&gt;10 + 11&lt;/code&gt; 은 컴파일 타임에 평가되고 age 필드는 &lt;code&gt;21&lt;/code&gt; 값으로 저장됩니다 .</target>
        </trans-unit>
        <trans-unit id="66b9bcf6fa135918752a0ac296373b9fc45c7435" translate="yes" xml:space="preserve">
          <source>Structs</source>
          <target state="translated">Structs</target>
        </trans-unit>
        <trans-unit id="e48092358ab469205143fa60ac35c7155aef2e05" translate="yes" xml:space="preserve">
          <source>Structs (see below)</source>
          <target state="translated">구조 (아래 참조)</target>
        </trans-unit>
        <trans-unit id="1fa66ef16d007913d84111c1caa8d36201a759a2" translate="yes" xml:space="preserve">
          <source>Structs alongside protocols provide one of the most important features for Elixir developers: data polymorphism. That&amp;rsquo;s what we will explore in the next chapter.</source>
          <target state="translated">프로토콜과 함께 Structs는 Elixir 개발자에게 가장 중요한 기능 중 하나 인 데이터 다형성입니다. 이것이 다음 장에서 살펴볼 내용입니다.</target>
        </trans-unit>
        <trans-unit id="906ed9113d865df8c36d98027adb8b4c438462a1" translate="yes" xml:space="preserve">
          <source>Structs also allow pattern matching on the struct name:</source>
          <target state="translated">구조체는 구조체 이름에서 패턴 일치를 허용합니다.</target>
        </trans-unit>
        <trans-unit id="403a81b60bd1b9d08b2aba9ce6f1c1e83a0ae9bd" translate="yes" xml:space="preserve">
          <source>Structs are bare maps underneath</source>
          <target state="translated">Structs는 맨 아래에있는 맵입니다.</target>
        </trans-unit>
        <trans-unit id="ef8a5b2279bd1fda0dd17b3e4b37d53f5cabffc3" translate="yes" xml:space="preserve">
          <source>Structs are extensions built on top of maps that provide compile-time checks and default values.</source>
          <target state="translated">Structs는 컴파일 타임 확인 및 기본값을 제공하는 맵 위에 빌드 된 확장입니다.</target>
        </trans-unit>
        <trans-unit id="57a5690039bdfaa887691c076af282fbfcd1e385" translate="yes" xml:space="preserve">
          <source>Structs are usually defined with the &lt;a href=&quot;kernel#defstruct/1&quot;&gt;&lt;code&gt;Kernel.defstruct/1&lt;/code&gt;&lt;/a&gt; macro:</source>
          <target state="translated">Structs는 일반적으로 &lt;a href=&quot;kernel#defstruct/1&quot;&gt; &lt;code&gt;Kernel.defstruct/1&lt;/code&gt; &lt;/a&gt; 매크로로 정의됩니다 .</target>
        </trans-unit>
        <trans-unit id="abdab30b78e5e45d65ba3227273c7089180b1f6f" translate="yes" xml:space="preserve">
          <source>Structs built on the map syntax by passing the struct name between &lt;code&gt;%&lt;/code&gt; and &lt;code&gt;{&lt;/code&gt;. For example, &lt;code&gt;%User{...}&lt;/code&gt;.</source>
          <target state="translated">구조체 이름을 &lt;code&gt;%&lt;/code&gt; 와 &lt;code&gt;{&lt;/code&gt; 사이에 전달하여 맵 구문을 기반으로하는 구조 입니다. 예를 들어 &lt;code&gt;%User{...}&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="6ce56958d9176de03025283b3099e3721e59a8eb" translate="yes" xml:space="preserve">
          <source>Structs can also be used in pattern matching, both for matching on the value of specific keys as well as for ensuring that the matching value is a struct of the same type as the matched value.</source>
          <target state="translated">Structs는 특정 키의 값에 대한 일치와 일치하는 값이 일치하는 값과 동일한 유형의 구조 체인지 확인하기 위해 패턴 일치에 사용될 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="627a64dfd0ce65d3cdca0e3adc12f995862ee10f" translate="yes" xml:space="preserve">
          <source>Structs provide &lt;em&gt;compile-time&lt;/em&gt; guarantees that only the fields (and &lt;em&gt;all&lt;/em&gt; of them) defined through &lt;code&gt;defstruct&lt;/code&gt; will be allowed to exist in a struct:</source>
          <target state="translated">Structs는 &lt;code&gt;defstruct&lt;/code&gt; 를 통해 정의 된 필드와 &lt;em&gt;모든&lt;/em&gt; 필드 만 구조체 에 존재할 수 있도록 &lt;em&gt;컴파일 타임을&lt;/em&gt; 보장합니다 .&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="9a421e5ee413973974fb1a4739a9e94164f81b8a" translate="yes" xml:space="preserve">
          <source>Structs take the name of the module they&amp;rsquo;re defined in. In the example above, we defined a struct named &lt;code&gt;User&lt;/code&gt;.</source>
          <target state="translated">Structs는 자신이 정의한 모듈의 이름을 사용합니다. 위의 예에서는 &lt;code&gt;User&lt;/code&gt; 라는 구조체를 정의했습니다 .</target>
        </trans-unit>
        <trans-unit id="4bcfdb993ad07d9903f21c6cf1477e9cf60ca26b" translate="yes" xml:space="preserve">
          <source>Structs whose internal structure is private to the local module (pattern matching them or directly accessing their fields should not be allowed) should use the &lt;code&gt;@opaque&lt;/code&gt; attribute. Structs whose internal structure is public should use &lt;code&gt;@type&lt;/code&gt;.</source>
          <target state="translated">내부 구조가 로컬 모듈 전용 인 구조 ( &lt;code&gt;@opaque&lt;/code&gt; 일치하거나 필드에 직접 액세스하는 패턴은 허용되지 않아야 함)는 @opaque 속성을 사용해야 합니다. 내부 구조가 public 인 구조체는 &lt;code&gt;@type&lt;/code&gt; 을 사용해야합니다 .</target>
        </trans-unit>
        <trans-unit id="3fdac6921d89e2c5b2bed6c0d9d18041f744d060" translate="yes" xml:space="preserve">
          <source>Subtracts &lt;code&gt;datetime2&lt;/code&gt; from &lt;code&gt;datetime1&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;datetime2&lt;/code&gt; 에서 &lt;code&gt;datetime1&lt;/code&gt; 뺍니다 .</target>
        </trans-unit>
        <trans-unit id="01f386a46810771df7fb30922411804e63bbb211" translate="yes" xml:space="preserve">
          <source>Subtracts &lt;code&gt;naive_datetime2&lt;/code&gt; from &lt;code&gt;naive_datetime1&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;naive_datetime2&lt;/code&gt; 에서 &lt;code&gt;naive_datetime1&lt;/code&gt; 뺍니다 .</target>
        </trans-unit>
        <trans-unit id="14da215035d163f8d2e9ac00ee5de927b8ce5918" translate="yes" xml:space="preserve">
          <source>Successive values are generated by calling &lt;code&gt;next_fun&lt;/code&gt; with the previous accumulator (the initial value being the result returned by &lt;code&gt;start_fun&lt;/code&gt;) and it must return a tuple containing a list of elements to be emitted and the next accumulator. The enumeration finishes if it returns &lt;code&gt;{:halt, acc}&lt;/code&gt;.</source>
          <target state="translated">연속적인 값은 이전 누적 기 ( &lt;code&gt;start_fun&lt;/code&gt; 에 의해 리턴 된 결과 인 초기 값)로 &lt;code&gt;next_fun&lt;/code&gt; 을 호출하여 생성되며 방출 될 요소 목록과 다음 누적 기를 포함하는 튜플을 리턴해야합니다. &lt;code&gt;{:halt, acc}&lt;/code&gt; 리턴하면 열거가 완료됩니다 .</target>
        </trans-unit>
        <trans-unit id="522311cdcaf7b3267814d3b09a19e47dea3c8a0f" translate="yes" xml:space="preserve">
          <source>Successive values are generated by calling &lt;code&gt;next_fun&lt;/code&gt; with the previous accumulator and it must return a tuple with the current value and next accumulator. The enumeration finishes if it returns &lt;code&gt;nil&lt;/code&gt;.</source>
          <target state="translated">연속적인 값은 이전 누산기로 &lt;code&gt;next_fun&lt;/code&gt; 을 호출하여 생성되며 현재 값과 다음 누산기가있는 튜플을 반환해야합니다. &lt;code&gt;nil&lt;/code&gt; 을 반환하면 열거가 완료됩니다 .</target>
        </trans-unit>
        <trans-unit id="ec0597f1e250ca1cd4f549ebe479656572bafdd1" translate="yes" xml:space="preserve">
          <source>Such a guard would look like this:</source>
          <target state="translated">이러한 경비원은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="53658e37fb70788364f35c3ef3e5d3ef21ca3b29" translate="yes" xml:space="preserve">
          <source>Such function calls are efficient memory-wise no matter the size of the range. The implementation of the &lt;a href=&quot;enumerable&quot;&gt;&lt;code&gt;Enumerable&lt;/code&gt;&lt;/a&gt; protocol uses logic based solely on the endpoints and does not materialize the whole list of integers.</source>
          <target state="translated">이러한 함수 호출은 범위의 크기에 관계없이 메모리 방식으로 효율적입니다. &lt;a href=&quot;enumerable&quot;&gt; &lt;code&gt;Enumerable&lt;/code&gt; &lt;/a&gt; 프로토콜 의 구현은 엔드 포인트만을 기반으로하는 논리를 사용하며 전체 정수 목록을 구체화하지는 않습니다.</target>
        </trans-unit>
        <trans-unit id="413448cc1d1e59d4180a2c1df46d6b20fc8b2386" translate="yes" xml:space="preserve">
          <source>Such is also useful when using update functions, allowing us to introduce values as we traverse the data structure for updates:</source>
          <target state="translated">업데이트 기능을 사용할 때도 유용하며 업데이트를 위해 데이터 구조를 탐색 할 때 값을 도입 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f0c8c931aa883a1710a5641257d627e0b793426c" translate="yes" xml:space="preserve">
          <source>Such is possible for duplicate registries though:</source>
          <target state="translated">다음과 같은 경우에는 중복 레지스트리에서 가능합니다.</target>
        </trans-unit>
        <trans-unit id="12b71c3e0fe5f7c0b8d17cc03186e281412da4a8" translate="yes" xml:space="preserve">
          <source>Summary</source>
          <target state="translated">Summary</target>
        </trans-unit>
        <trans-unit id="9413f829dc8a9eeac79634a8fecd1c1711b00407" translate="yes" xml:space="preserve">
          <source>Summing up</source>
          <target state="translated">합산</target>
        </trans-unit>
        <trans-unit id="008681d0cf389abc8327426047cec2a8b18317d8" translate="yes" xml:space="preserve">
          <source>Supervised tasks</source>
          <target state="translated">감독 업무</target>
        </trans-unit>
        <trans-unit id="908fa8f422bcf3bb9ccc6611b5129caf568648d9" translate="yes" xml:space="preserve">
          <source>Supervision trees</source>
          <target state="translated">감독 나무</target>
        </trans-unit>
        <trans-unit id="2cd4fa195ed5b220930149c31cc72fbb131921db" translate="yes" xml:space="preserve">
          <source>Supervisor</source>
          <target state="translated">Supervisor</target>
        </trans-unit>
        <trans-unit id="e1ea02d7a77e7dff85d3adb88e64fc729ba83f91" translate="yes" xml:space="preserve">
          <source>Supervisor &lt;small&gt;behaviour&lt;/small&gt;</source>
          <target state="translated">감독자 &lt;small&gt;행동&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="d69abd18d455510b99f3ff0e898ca02a3c32b696" translate="yes" xml:space="preserve">
          <source>Supervisor and Application</source>
          <target state="translated">감독자와 신청</target>
        </trans-unit>
        <trans-unit id="def06f454fe2aafd60e9bf9113ffca345eac503e" translate="yes" xml:space="preserve">
          <source>Supervisor and GenServers</source>
          <target state="translated">감독자와 GenServer</target>
        </trans-unit>
        <trans-unit id="12010eabcaf19b4380edc62ef8ef7afae10e6caa" translate="yes" xml:space="preserve">
          <source>Supervisor and worker options</source>
          <target state="translated">감독자 및 근로자 옵션</target>
        </trans-unit>
        <trans-unit id="ef948fc60b8d6995f73a05206917fcdf6cd81c08" translate="yes" xml:space="preserve">
          <source>Supervisor.Spec</source>
          <target state="translated">Supervisor.Spec</target>
        </trans-unit>
        <trans-unit id="fb7cc714ff3123e658f82813b47d9835dd16af4d" translate="yes" xml:space="preserve">
          <source>Supervisors support different strategies; in the example above, we have chosen &lt;code&gt;:one_for_one&lt;/code&gt;. Furthermore, each supervisor can have many workers and/or supervisors as children, with each one having its own configuration (as outlined in the &quot;Child specification&quot; section).</source>
          <target state="translated">감독자는 다양한 전략을 지원합니다. 위의 예에서는 &lt;code&gt;:one_for_one&lt;/code&gt; 을 선택 했습니다 . 더욱이, 각 감독 당국은 다수의 근로자 및 / 또는 감독 당국을 자녀로 가질 수 있으며, 각각의 구성 요소는 자체 구성을 갖습니다 ( &quot;자식 지정&quot;섹션에 설명 된대로).</target>
        </trans-unit>
        <trans-unit id="0578994f188280cb99013a5c58ec4c81802bfe88" translate="yes" xml:space="preserve">
          <source>Supervisors support different supervision strategies (through the &lt;code&gt;:strategy&lt;/code&gt; option, as seen above):</source>
          <target state="translated">감독자는 다양한 감독 전략을 지원합니다 ( 위 의 &lt;code&gt;:strategy&lt;/code&gt; 옵션을 통해 ).</target>
        </trans-unit>
        <trans-unit id="f32d5a3b17e614297417cc279a7ec1cd02274d65" translate="yes" xml:space="preserve">
          <source>Support</source>
          <target state="translated">Support</target>
        </trans-unit>
        <trans-unit id="a4eab47f32a482fa6a57e7d78931eebd65984bbe" translate="yes" xml:space="preserve">
          <source>Support for making private functions overridable</source>
          <target state="translated">개인 기능을 재정의 할 수 있도록 지원</target>
        </trans-unit>
        <trans-unit id="6afec07b7fa976af6cf8797ee913469e9babea8a" translate="yes" xml:space="preserve">
          <source>Supported Erlang/OTP versions</source>
          <target state="translated">지원되는 Erlang / OTP 버전</target>
        </trans-unit>
        <trans-unit id="cc98180ca761a9afbf85fc26a48b02b6e25dbae6" translate="yes" xml:space="preserve">
          <source>Supported ID values</source>
          <target state="translated">지원되는 ID 값</target>
        </trans-unit>
        <trans-unit id="59b7fd869e912d97d97078bf118935bf508cd7dc" translate="yes" xml:space="preserve">
          <source>Supported module values</source>
          <target state="translated">지원되는 모듈 값</target>
        </trans-unit>
        <trans-unit id="4ce9ab2c76a64f3bead6b697086605679c05ba0b" translate="yes" xml:space="preserve">
          <source>Supported restart values</source>
          <target state="translated">지원되는 재시작 값</target>
        </trans-unit>
        <trans-unit id="4754143afdbe77546c223d10dd545bf29beec5ec" translate="yes" xml:space="preserve">
          <source>Supported shutdown values</source>
          <target state="translated">지원되는 종료 값</target>
        </trans-unit>
        <trans-unit id="556737ead8feb164936eb5c9d04fdbaa68615120" translate="yes" xml:space="preserve">
          <source>Supported strategies</source>
          <target state="translated">지원되는 전략</target>
        </trans-unit>
        <trans-unit id="011f076c3d846af2a7296431ecd45f9d0d9ceba4" translate="yes" xml:space="preserve">
          <source>Supported worker values</source>
          <target state="translated">지원되는 근로자 가치</target>
        </trans-unit>
        <trans-unit id="b1ffd261b167462587f7afeaf76db355c7359f62" translate="yes" xml:space="preserve">
          <source>Supporting documents</source>
          <target state="translated">증빙 서류</target>
        </trans-unit>
        <trans-unit id="5074c54fe3d2dada9edf83c0782274a9de618a17" translate="yes" xml:space="preserve">
          <source>Supports multiple backends which are automatically supervised when plugged into &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;Logger&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#content&quot;&gt; &lt;code&gt;Logger&lt;/code&gt; 에&lt;/a&gt; 연결하면 자동으로 감독되는 여러 백엔드를 지원합니다 .</target>
        </trans-unit>
        <trans-unit id="63b71cb9682231a38f6cb8bfe3190bb22abb9ee8" translate="yes" xml:space="preserve">
          <source>Switch definitions</source>
          <target state="translated">스위치 정의</target>
        </trans-unit>
        <trans-unit id="3b07b3e7fad246aad851785b8640c09bc790a0c6" translate="yes" xml:space="preserve">
          <source>Switches can be specified via one of two options:</source>
          <target state="translated">스위치는 다음 두 옵션 중 하나를 통해 지정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="10f820ab2456db02149e31f2047f0b2fc4844076" translate="yes" xml:space="preserve">
          <source>Switches can be specified with modifiers, which change how they behave. The following modifiers are supported:</source>
          <target state="translated">스위치는 작동 방식을 변경하는 수정자를 사용하여 지정할 수 있습니다. 다음 수정자가 지원됩니다.</target>
        </trans-unit>
        <trans-unit id="76095f9f5c83633412d257a75ee9b301147d2861" translate="yes" xml:space="preserve">
          <source>Switches followed by a value will be assigned the value, as a string. Switches without an argument will be set automatically to &lt;code&gt;true&lt;/code&gt;. Since we cannot assert the type of the switch value, it is preferred to use the &lt;code&gt;:strict&lt;/code&gt; option that accepts only known switches and always verify their types.</source>
          <target state="translated">스위치 뒤에 값이 오는 경우 값이 문자열로 할당됩니다. 인수가없는 스위치는 자동으로 &lt;code&gt;true&lt;/code&gt; 로 설정됩니다 . 스위치 값의 유형을 지정할 수 없으므로 알려진 스위치 만 허용하고 항상 유형을 확인 하는 &lt;code&gt;:strict&lt;/code&gt; 옵션 을 사용하는 것이 좋습니다 .</target>
        </trans-unit>
        <trans-unit id="5845d5880bc5d8b451e5a4dd803aa622305d25f1" translate="yes" xml:space="preserve">
          <source>Switches parsed by &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;OptionParser&lt;/code&gt;&lt;/a&gt; may take zero or one arguments.</source>
          <target state="translated">&lt;a href=&quot;#content&quot;&gt; &lt;code&gt;OptionParser&lt;/code&gt; 로&lt;/a&gt; 구문 분석 된 스위치 는 0 개 또는 1 개의 인수를 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3687a859d3cbb75ed3b6669b03cb32119eb5e843" translate="yes" xml:space="preserve">
          <source>Synchronously stops the agent with the given &lt;code&gt;reason&lt;/code&gt;.</source>
          <target state="translated">주어진 &lt;code&gt;reason&lt;/code&gt; 에이전트를 동 기적으로 중지합니다 .</target>
        </trans-unit>
        <trans-unit id="83e327b0ee0a0791c10736b6ce6e0977e644efa8" translate="yes" xml:space="preserve">
          <source>Synchronously stops the given supervisor with the given &lt;code&gt;reason&lt;/code&gt;.</source>
          <target state="translated">주어진 &lt;code&gt;reason&lt;/code&gt; 지정된 감독자를 동 기적으로 중지합니다 .</target>
        </trans-unit>
        <trans-unit id="20daca0170b9cf17db723aa618e07ac24ddb1612" translate="yes" xml:space="preserve">
          <source>Synchronously stops the server with the given &lt;code&gt;reason&lt;/code&gt;.</source>
          <target state="translated">주어진 &lt;code&gt;reason&lt;/code&gt; 서버를 동기식으로 중지합니다 .</target>
        </trans-unit>
        <trans-unit id="f6ceae4e1810d086bda09a8ac74e9e1fae98d4f4" translate="yes" xml:space="preserve">
          <source>Syntactic sugar</source>
          <target state="translated">구문 설탕</target>
        </trans-unit>
        <trans-unit id="17c7ba7676ad1ad6dd1c4e6b997adcae910262c9" translate="yes" xml:space="preserve">
          <source>Syntax</source>
          <target state="translated">Syntax</target>
        </trans-unit>
        <trans-unit id="8c15a6de8bd57bfcd07b3aef8fb9a4bc8f26c05e" translate="yes" xml:space="preserve">
          <source>Syntax reference</source>
          <target state="translated">구문 참조</target>
        </trans-unit>
        <trans-unit id="de4af2ff6c0bd31526ce7f5f8ca08783d0cc5ed7" translate="yes" xml:space="preserve">
          <source>SyntaxError</source>
          <target state="translated">SyntaxError</target>
        </trans-unit>
        <trans-unit id="62e61480537cef04396517bf21f00631d5916b00" translate="yes" xml:space="preserve">
          <source>SyntaxError &lt;small&gt;exception&lt;/small&gt;</source>
          <target state="translated">SyntaxError &lt;small&gt;예외&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="bc0792d8dc81e8aa30b987246a5ce97c40cd6833" translate="yes" xml:space="preserve">
          <source>System</source>
          <target state="translated">System</target>
        </trans-unit>
        <trans-unit id="15a3c2ea878a67e7f83b1e5350d3a1c397e6870e" translate="yes" xml:space="preserve">
          <source>System messages such as timer messages and monitoring events</source>
          <target state="translated">타이머 메시지 및 모니터링 이벤트와 같은 시스템 메시지</target>
        </trans-unit>
        <trans-unit id="629539f2b0b3c31f1b5b674c293fc529369d30a0" translate="yes" xml:space="preserve">
          <source>System modules</source>
          <target state="translated">시스템 모듈</target>
        </trans-unit>
        <trans-unit id="e1f03c30c4ad532e4c164e6bd797580a623de00e" translate="yes" xml:space="preserve">
          <source>SystemLimitError</source>
          <target state="translated">SystemLimitError</target>
        </trans-unit>
        <trans-unit id="87d2f1faf999bf62e28a61deae6996346ba925b4" translate="yes" xml:space="preserve">
          <source>SystemLimitError &lt;small&gt;exception&lt;/small&gt;</source>
          <target state="translated">SystemLimitError &lt;small&gt;예외&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="34fe46e18f0db15e3602c13218d0d43606ec62eb" translate="yes" xml:space="preserve">
          <source>Table of deprecations</source>
          <target state="translated">지원 중단 표</target>
        </trans-unit>
        <trans-unit id="848eed0fbd5429f556b2982dec3ea87136e33e44" translate="yes" xml:space="preserve">
          <source>Tags</source>
          <target state="translated">Tags</target>
        </trans-unit>
        <trans-unit id="b6178fb349e0b28eda375aea2c569cd350dc4da1" translate="yes" xml:space="preserve">
          <source>Tags are also very effective when used with case templates (&lt;a href=&quot;exunit.casetemplate&quot;&gt;&lt;code&gt;ExUnit.CaseTemplate&lt;/code&gt;&lt;/a&gt;) allowing callbacks in the case template to customize the test behaviour.</source>
          <target state="translated">태그는 사례 템플릿 ( &lt;a href=&quot;exunit.casetemplate&quot;&gt; &lt;code&gt;ExUnit.CaseTemplate&lt;/code&gt; &lt;/a&gt; ) 과 함께 사용하면 사례 템플릿의 콜백을 통해 테스트 동작을 사용자 정의 할 수있어 매우 효과적 입니다.</target>
        </trans-unit>
        <trans-unit id="fc249ccb61119dc450a78be8a81ac2c8c0e49629" translate="yes" xml:space="preserve">
          <source>Tags can also be used to identify specific tests, which can then be included or excluded using filters. The most common functionality is to exclude some particular tests from running, which can be done via &lt;a href=&quot;exunit#configure/1&quot;&gt;&lt;code&gt;ExUnit.configure/1&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">태그를 사용하여 특정 테스트를 식별 할 수도 있습니다. 그런 다음 필터를 사용하여 포함하거나 제외 할 수 있습니다. 가장 일반적인 기능은 &lt;a href=&quot;exunit#configure/1&quot;&gt; &lt;code&gt;ExUnit.configure/1&lt;/code&gt; 을&lt;/a&gt; 통해 수행 할 수있는 특정 테스트를 제외하는 것입니다 .</target>
        </trans-unit>
        <trans-unit id="8b6e5fd9a74ed5f0c910db816652873cf2d30599" translate="yes" xml:space="preserve">
          <source>Tags in ExUnit are used to annotate tests. Tags can be later used to filter tests. For example, you can avoid running external tests on your machine because they are slow and dependent on other services, while they can still be enabled in your build system.</source>
          <target state="translated">ExUnit의 태그는 테스트에 주석을 달기 위해 사용됩니다. 태그는 나중에 테스트를 필터링하는 데 사용될 수 있습니다. 예를 들어, 시스템에서 외부 테스트가 느리고 다른 서비스에 의존하기 때문에 빌드 시스템에서 계속 활성화 할 수 있으므로 외부 테스트를 실행하지 않아도됩니다.</target>
        </trans-unit>
        <trans-unit id="001aa408e4c6ef94853eea6d535dd0cd3f2d9ecb" translate="yes" xml:space="preserve">
          <source>Take note of the second argument to &lt;code&gt;Macro.var/2&lt;/code&gt;. This is the context being used and will determine hygiene as described in the next section.</source>
          <target state="translated">&lt;code&gt;Macro.var/2&lt;/code&gt; 의 두 번째 인수를 기록해 두십시오 . 이것이 사용되는 상황이며 다음 섹션에 설명 된대로 위생을 결정할 것입니다.</target>
        </trans-unit>
        <trans-unit id="396cb525a863762a0153f155bab5fa14c60b4b53" translate="yes" xml:space="preserve">
          <source>Take such cases as a suggestion that your code should be refactored:</source>
          <target state="translated">코드를 리팩터링해야한다고 제안하는 경우를 예로 들어 보겠습니다.</target>
        </trans-unit>
        <trans-unit id="3272b9a706ed0ca47f559e862d6dc2150998b033" translate="yes" xml:space="preserve">
          <source>Takes &lt;code&gt;count&lt;/code&gt; random elements from &lt;code&gt;enumerable&lt;/code&gt;.</source>
          <target state="translated">걸립니다 &lt;code&gt;count&lt;/code&gt; 에서 임의 요소 &lt;code&gt;enumerable&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="ff00a34c033bd6b414639eb45fc22dcd00b26ff3" translate="yes" xml:space="preserve">
          <source>Takes a compiled format and injects the level, timestamp, message, and metadata keyword list and returns a properly formatted string.</source>
          <target state="translated">컴파일 된 형식을 취해 레벨, 타임 스탬프, 메시지 및 메타 데이터 키워드 목록을 삽입하고 올바른 형식의 문자열을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="fc0be3a7f7029dd2d434cb9dc499906bd7070ad7" translate="yes" xml:space="preserve">
          <source>Takes a time zone name and a point in time for UTC and returns a &lt;code&gt;time_zone_period&lt;/code&gt; for that point in time.</source>
          <target state="translated">UTC의 시간대 이름과 특정 시점을 가져 &lt;code&gt;time_zone_period&lt;/code&gt; 해당 시점 의 time_zone_period 를 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="108613966b46cb41abd8d09ea8bc76b57d639cc0" translate="yes" xml:space="preserve">
          <source>Takes all entries corresponding to the given &lt;code&gt;keys&lt;/code&gt; in &lt;code&gt;map&lt;/code&gt; and extracts them into a separate map.</source>
          <target state="translated">주어진 &lt;code&gt;keys&lt;/code&gt; 에 해당하는 모든 항목 을 &lt;code&gt;map&lt;/code&gt; 에서 가져 와서 별도의 맵으로 추출합니다.</target>
        </trans-unit>
        <trans-unit id="a057f41d143426d964dc91f467aeae07be4b8c88" translate="yes" xml:space="preserve">
          <source>Takes all entries corresponding to the given keys and extracts them into a separate keyword list.</source>
          <target state="translated">주어진 키에 해당하는 모든 항목을 가져 와서 별도의 키워드 목록으로 추출합니다.</target>
        </trans-unit>
        <trans-unit id="22f2fcc0cd4b387311cd745e5116cafb06152b07" translate="yes" xml:space="preserve">
          <source>Takes all entries corresponding to the given keys and returns them in a new keyword list.</source>
          <target state="translated">주어진 키에 해당하는 모든 항목을 가져 와서 새 키워드 목록으로 반환합니다.</target>
        </trans-unit>
        <trans-unit id="f01e74291caa1b3fb31a76131a0358dad5dd2b3a" translate="yes" xml:space="preserve">
          <source>Takes an &lt;code&gt;amount&lt;/code&gt; of elements from the beginning or the end of the &lt;code&gt;enumerable&lt;/code&gt;.</source>
          <target state="translated">걸린다 &lt;code&gt;amount&lt;/code&gt; 시작 또는 끝에서 요소들의 &lt;code&gt;enumerable&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="1f1f6557000f60347445111652f8c88ca3309153" translate="yes" xml:space="preserve">
          <source>Takes an enumerable that enumerates as a list of two-element tuples (e.g., a map or a keyword list) and returns a string in the form of &lt;code&gt;key1=value1&amp;amp;key2=value2...&lt;/code&gt; where keys and values are URL encoded as per &lt;a href=&quot;#encode_www_form/1&quot;&gt;&lt;code&gt;encode_www_form/1&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">두 요소로 된 튜플 목록 (예 :지도 또는 키워드 목록)으로 열거하고 &lt;code&gt;key1=value1&amp;amp;key2=value2...&lt;/code&gt; 형식의 문자열을 반환하는 열거 형을 가져옵니다 . 여기서 키와 값은 &lt;a href=&quot;#encode_www_form/1&quot;&gt; &lt;code&gt;encode_www_form/1&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="e45acfd4331b2440feb53de6fbc1560baa366e61" translate="yes" xml:space="preserve">
          <source>Takes an optional &lt;code&gt;character_limit&lt;/code&gt; as a second argument. If &lt;code&gt;character_limit&lt;/code&gt; is &lt;code&gt;0&lt;/code&gt;, this function will return &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">선택적 &lt;code&gt;character_limit&lt;/code&gt; 를 두 번째 인수로 사용합니다. 경우 &lt;code&gt;character_limit&lt;/code&gt; 있다 &lt;code&gt;0&lt;/code&gt; ,이 함수는 반환됩니다 &lt;code&gt;true&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="feadb0c8e9163376cb17aaa5d080783ed49a3087" translate="yes" xml:space="preserve">
          <source>Takes an optional &lt;code&gt;limit&lt;/code&gt; as a second argument. &lt;a href=&quot;#ascii_printable?/2&quot;&gt;&lt;code&gt;ascii_printable?/2&lt;/code&gt;&lt;/a&gt; only checks the printability of the list up to the &lt;code&gt;limit&lt;/code&gt;.</source>
          <target state="translated">선택적인 &lt;code&gt;limit&lt;/code&gt; 을 두 번째 인수로 사용합니다. &lt;a href=&quot;#ascii_printable?/2&quot;&gt; &lt;code&gt;ascii_printable?/2&lt;/code&gt; &lt;/a&gt; 는 목록의 인쇄 가능성을 &lt;code&gt;limit&lt;/code&gt; 까지만 확인합니다 .</target>
        </trans-unit>
        <trans-unit id="b31890ea4f4df85c9832a1da5e1e6d04b9bbfbd0" translate="yes" xml:space="preserve">
          <source>Takes changes such as summer time/DST into account. This means that adding time can cause the wall time to &quot;go backwards&quot; during &quot;fall back&quot; during autumn. Adding just a few seconds to a datetime just before &quot;spring forward&quot; can cause wall time to increase by more than an hour.</source>
          <target state="translated">서머 타임 / DST와 같은 변경 사항을 고려합니다. 즉, 시간을 추가하면 가을에 &quot;뒤로&quot;동안 벽 시간이 &quot;뒤로 이동&quot;할 수 있습니다. &quot;스프링 포워드&quot;직전에 날짜 시간에 몇 초를 추가하면 벽 시간이 1 시간 이상 증가 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="fae8e01301c7e0feb68a23236a2c9b3567e8ae34" translate="yes" xml:space="preserve">
          <source>Takes the elements from the beginning of the &lt;code&gt;enumerable&lt;/code&gt; while &lt;code&gt;fun&lt;/code&gt; returns a truthy value.</source>
          <target state="translated">&lt;code&gt;fun&lt;/code&gt; 는 진실한 가치를 반환 하면서 &lt;code&gt;enumerable&lt;/code&gt; 요소의 시작 부분부터 요소를 가져옵니다 .</target>
        </trans-unit>
        <trans-unit id="c5464b7fb8fc4c108c9bf24e8c373a4e9e4044e0" translate="yes" xml:space="preserve">
          <source>Takes the maximum width and a document to print as its arguments and returns an IO data representation of the best layout for the document to fit in the given width.</source>
          <target state="translated">최대 너비와 문서를 인수로 사용하여 주어진 너비에 맞게 문서에 가장 적합한 레이아웃의 IO 데이터 표현을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="d35260a00f655f27edcc35a7eb16da44a4f671a6" translate="yes" xml:space="preserve">
          <source>Targets</source>
          <target state="translated">Targets</target>
        </trans-unit>
        <trans-unit id="7bb0ddf9221c03b806b03c209e8366000124aa15" translate="yes" xml:space="preserve">
          <source>Task</source>
          <target state="translated">Task</target>
        </trans-unit>
        <trans-unit id="56913f440f346fedff0613f1a58aff47c8c81efb" translate="yes" xml:space="preserve">
          <source>Task and gen_tcp</source>
          <target state="translated">작업 및 gen_tcp</target>
        </trans-unit>
        <trans-unit id="42d489b854c5dff6b39f3ae727392332235bf30a" translate="yes" xml:space="preserve">
          <source>Task supervisor</source>
          <target state="translated">작업 감독자</target>
        </trans-unit>
        <trans-unit id="35a08efc9d440da7708c69812b0507ba330ba97d" translate="yes" xml:space="preserve">
          <source>Task.Supervisor</source>
          <target state="translated">Task.Supervisor</target>
        </trans-unit>
        <trans-unit id="090ec5f560fc50377fcd95e5cda128e91b276e98" translate="yes" xml:space="preserve">
          <source>Tasks</source>
          <target state="translated">Tasks</target>
        </trans-unit>
        <trans-unit id="ba00cfab602d1779b811d576baf5eafe077e7cab" translate="yes" xml:space="preserve">
          <source>Tasks are processes meant to execute one particular action throughout their lifetime, often with little or no communication with other processes. The most common use case for tasks is to convert sequential code into concurrent code by computing a value asynchronously:</source>
          <target state="translated">작업은 일생 동안 하나의 특정 작업을 실행하기위한 프로세스로, 종종 다른 프로세스와의 통신이 거의 또는 전혀 없습니다. 가장 일반적인 작업 사용 사례는 값을 비동기 적으로 계산하여 순차 코드를 동시 코드로 변환하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="8a0db3194d6f9d766302e10355f2237684a84453" translate="yes" xml:space="preserve">
          <source>Tasks are what make Mix extensible.</source>
          <target state="translated">작업은 믹스를 확장 가능하게 만드는 것입니다.</target>
        </trans-unit>
        <trans-unit id="a520f228dee983c80456da705995e99d0baf055b" translate="yes" xml:space="preserve">
          <source>Tasks build on top of the spawn functions to provide better error reports and introspection:</source>
          <target state="translated">더 나은 오류 보고서 및 내부 검사를 제공하기 위해 작업이 스폰 기능 위에 구축됩니다.</target>
        </trans-unit>
        <trans-unit id="0d54343e18426db24d51d0ad44751f910be12ca3" translate="yes" xml:space="preserve">
          <source>Tasks spawned with &lt;code&gt;async&lt;/code&gt; can be awaited on by their caller process (and only their caller) as shown in the example above. They are implemented by spawning a process that sends a message to the caller once the given computation is performed.</source>
          <target state="translated">&lt;code&gt;async&lt;/code&gt; 생성 된 작업은 위의 예와 같이 호출자 프로세스 (및 호출자 만)에 의해 대기 될 수 있습니다. 주어진 계산이 수행되면 호출자에게 메시지를 보내는 프로세스를 생성하여 구현됩니다.</target>
        </trans-unit>
        <trans-unit id="f36d34a8fff232dc61a718546ef8daf864665507" translate="yes" xml:space="preserve">
          <source>Tells whether the given process is alive on the local node.</source>
          <target state="translated">주어진 프로세스가 로컬 노드에 존재하는지 알려줍니다.</target>
        </trans-unit>
        <trans-unit id="3c899cc5439be26f0cd7b582a42447cf769aca66" translate="yes" xml:space="preserve">
          <source>Temporarily blocks the current process waiting for a task reply.</source>
          <target state="translated">작업 응답을 기다리는 현재 프로세스를 일시적으로 차단합니다.</target>
        </trans-unit>
        <trans-unit id="d33ebb237e98c8b9d937b2d694b2c125b79ca66f" translate="yes" xml:space="preserve">
          <source>Term ordering</source>
          <target state="translated">학기 주문</target>
        </trans-unit>
        <trans-unit id="696845220c6e0a0d1e64cd82d61908625e60074a" translate="yes" xml:space="preserve">
          <source>Terminate the top-level supervisor.</source>
          <target state="translated">최상위 관리자를 종료합니다.</target>
        </trans-unit>
        <trans-unit id="37c2abf54c623c6250b581aced135fc94e351e86" translate="yes" xml:space="preserve">
          <source>Terminates the Erlang runtime system without properly shutting down applications and ports. Please see &lt;a href=&quot;#stop/1&quot;&gt;&lt;code&gt;stop/1&lt;/code&gt;&lt;/a&gt; for a careful shutdown of the system.</source>
          <target state="translated">응용 프로그램 및 포트를 올바르게 종료하지 않고 Erlang 런타임 시스템을 종료합니다. 시스템을 신중하게 종료 하려면 &lt;a href=&quot;#stop/1&quot;&gt; &lt;code&gt;stop/1&lt;/code&gt; &lt;/a&gt; 을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="3cd2179f3f59774aca5baa2c47c7a727d23960ae" translate="yes" xml:space="preserve">
          <source>Terminates the child with the given &lt;code&gt;pid&lt;/code&gt;.</source>
          <target state="translated">주어진 &lt;code&gt;pid&lt;/code&gt; 로 아이를 종료합니다 .</target>
        </trans-unit>
        <trans-unit id="c4bb07a1089485a5deadcff889ffd042bd8e458f" translate="yes" xml:space="preserve">
          <source>Terminates the given child identified by &lt;code&gt;child_id&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;child_id&lt;/code&gt; 로 식별 된 지정된 자식을 종료합니다 .</target>
        </trans-unit>
        <trans-unit id="a50fe58f5df366a9be1362e929ebd0084a28443a" translate="yes" xml:space="preserve">
          <source>Terminates the given child identified by &lt;code&gt;pid&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;pid&lt;/code&gt; 로 식별 된 지정된 자식을 종료합니다 .</target>
        </trans-unit>
        <trans-unit id="a202094d471c445107dcaeee3f888512868cbcd8" translate="yes" xml:space="preserve">
          <source>Test filters and tags</source>
          <target state="translated">테스트 필터 및 태그</target>
        </trans-unit>
        <trans-unit id="6259e4e6f0c5acd8366ddcebaae6c7f8a418bd4b" translate="yes" xml:space="preserve">
          <source>Test setup with ExUnit callbacks</source>
          <target state="translated">ExUnit 콜백을 사용한 테스트 설정</target>
        </trans-unit>
        <trans-unit id="56c4fd8cce0fae76b0fc19e67eda41b7a30e0a0f" translate="yes" xml:space="preserve">
          <source>Testing a GenServer</source>
          <target state="translated">GenServer 테스트</target>
        </trans-unit>
        <trans-unit id="788b3affdeae419dc740b3f8cbcd405e20e4cc4b" translate="yes" xml:space="preserve">
          <source>Testing a GenServer is not much different from testing an agent. We will spawn the server on a setup callback and use it throughout our tests. Create a file at &lt;code&gt;test/kv/registry_test.exs&lt;/code&gt; with the following:</source>
          <target state="translated">GenServer 테스트는 에이전트 테스트와 크게 다르지 않습니다. 설정 콜백에서 서버를 스폰하고 테스트 전체에서 사용합니다. &lt;code&gt;test/kv/registry_test.exs&lt;/code&gt; 에서 다음을 사용하여 파일을 만듭니다 .</target>
        </trans-unit>
        <trans-unit id="85b9fcfc0f6fc72610f7a98efec365df258038e3" translate="yes" xml:space="preserve">
          <source>Tests in umbrella projects can be run from the root by specifying the full suite path, including &lt;code&gt;apps/my_app/test&lt;/code&gt;, in which case recursive tests for other child apps will be skipped completely:</source>
          <target state="translated">&lt;code&gt;apps/my_app/test&lt;/code&gt; 를 포함한 전체 제품군 경로를 지정하여 우산 프로젝트의 테스트를 루트에서 실행할 수 있습니다 .이 경우 다른 하위 앱에 대한 재귀 테스트는 완전히 건너 뜁니다.</target>
        </trans-unit>
        <trans-unit id="062dbf72aa69df4b2bf2e11e396bf97a679fa018" translate="yes" xml:space="preserve">
          <source>Thankfully, Elixir v1.2 introduced the &lt;code&gt;with&lt;/code&gt; construct, which allows you to simplify code like the above, replacing nested &lt;code&gt;case&lt;/code&gt; calls with a chain of matching clauses. Let&amp;rsquo;s rewrite the &lt;code&gt;serve/1&lt;/code&gt; function to use &lt;code&gt;with&lt;/code&gt;:</source>
          <target state="translated">고맙게도 Elixir v1.2에는 &lt;code&gt;with&lt;/code&gt; 구문이 도입되어 위와 같은 코드를 단순화하여 중첩 된 &lt;code&gt;case&lt;/code&gt; 호출을 일치하는 절로 대체 할 수 있습니다 . &lt;code&gt;serve/1&lt;/code&gt; 함수를 다음 &lt;code&gt;with&lt;/code&gt; 같이 다시 작성해 보겠습니다 .</target>
        </trans-unit>
        <trans-unit id="01e9b39e30c1a0e15112939ef1fff61fe4a3aa75" translate="yes" xml:space="preserve">
          <source>Thanks to the agent server process, the counter can be safely incremented concurrently.</source>
          <target state="translated">에이전트 서버 프로세스 덕분에 카운터를 동시에 안전하게 증가시킬 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="cdbd4eae22bceef6692b374955bde22d9b7d01d6" translate="yes" xml:space="preserve">
          <source>That defines a release named &lt;code&gt;foo&lt;/code&gt; with both &lt;code&gt;kv_server&lt;/code&gt; and &lt;code&gt;kv&lt;/code&gt; applications. Their mode is set to &lt;code&gt;:permanent&lt;/code&gt;, which means that, if those applications crash, the whole node terminates. That&amp;rsquo;s reasonable since those applications are essential to our system. With the configuration in place, let&amp;rsquo;s give another try at assembling the release:</source>
          <target state="translated">&lt;code&gt;kv_server&lt;/code&gt; 및 &lt;code&gt;kv&lt;/code&gt; 응용 프로그램 을 모두 사용하여 &lt;code&gt;foo&lt;/code&gt; 라는 릴리스를 정의합니다 . 해당 모드는 &lt;code&gt;:permanent&lt;/code&gt; 로 설정되어 있습니다 . 즉, 해당 응용 프로그램이 충돌하면 전체 노드가 종료됩니다. 이러한 응용 프로그램은 시스템에 필수적이므로 합리적입니다. 구성이 완료되면 릴리스를 조립할 때 다시 시도해 보겠습니다.</target>
        </trans-unit>
        <trans-unit id="c0b2e0d9fe52f84cc809886b734e22953d615efa" translate="yes" xml:space="preserve">
          <source>That ensures that if the task completes after the &lt;code&gt;timeout&lt;/code&gt; but before &lt;a href=&quot;#shutdown/1&quot;&gt;&lt;code&gt;shutdown/1&lt;/code&gt;&lt;/a&gt; has been called, you will still get the result, since &lt;a href=&quot;#shutdown/1&quot;&gt;&lt;code&gt;shutdown/1&lt;/code&gt;&lt;/a&gt; is designed to handle this case and return the result.</source>
          <target state="translated">그러면 &lt;a href=&quot;#shutdown/1&quot;&gt; &lt;code&gt;shutdown/1&lt;/code&gt; &lt;/a&gt; &lt;code&gt;timeout&lt;/code&gt; 이 종료 되었지만 shutdown / 1 이 호출 되기 전에 작업이 완료된 경우 &lt;a href=&quot;#shutdown/1&quot;&gt; &lt;code&gt;shutdown/1&lt;/code&gt; &lt;/a&gt; 이이 경우를 처리하고 결과를 반환하도록 설계되었으므로 결과를 얻을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d1fc0fd9268067ed50e8dff689947fe93beb5673" translate="yes" xml:space="preserve">
          <source>That happens because the &lt;code&gt;IO&lt;/code&gt; module actually works with processes (see &lt;a href=&quot;processes&quot;&gt;chapter 11&lt;/a&gt;). Given a file is a process, when you write to a file that has been closed, you are actually sending a message to a process which has been terminated:</source>
          <target state="translated">이는 &lt;code&gt;IO&lt;/code&gt; 모듈이 실제로 프로세스와 함께 작동 하기 때문에 발생 합니다 ( &lt;a href=&quot;processes&quot;&gt;11 장&lt;/a&gt; 참조 ). 파일이 프로세스 인 경우 닫은 파일에 쓸 때 실제로 종료 된 프로세스에 메시지를 보냅니다.</target>
        </trans-unit>
        <trans-unit id="897c7bf39cdf3d75952cff1b5ff6f99e7827d8f9" translate="yes" xml:space="preserve">
          <source>That is, if the node can be part of a distributed system.</source>
          <target state="translated">즉, 노드가 분산 시스템의 일부일 수있는 경우입니다.</target>
        </trans-unit>
        <trans-unit id="8e363ec1e2d5f0647070623c22f89c8707555da9" translate="yes" xml:space="preserve">
          <source>That is, if the number of bits in &lt;code&gt;bitstring&lt;/code&gt; is not divisible by 8, the resulting number of bytes will be rounded up (by excess). This operation happens in constant time.</source>
          <target state="translated">즉, 비트 &lt;code&gt;bitstring&lt;/code&gt; 비트 수가 8로 나눌 수없는 경우 결과 바이트 수는 반올림됩니다 (초과). 이 작업은 일정한 시간에 발생합니다.</target>
        </trans-unit>
        <trans-unit id="21fbb88b6f851991624fb5b17096150fe0715845" translate="yes" xml:space="preserve">
          <source>That said, there are still cases where using macros and modules to build domain-specific languages is useful. Since we have explored data structures and function definitions in the Getting Started guide, this chapter will explore how to use macros and module attributes to tackle more complex DSLs.</source>
          <target state="translated">그러나 매크로와 모듈을 사용하여 도메인 별 언어를 만드는 것이 여전히 유용한 경우가 있습니다. 시작 안내서에서 데이터 구조 및 기능 정의를 살펴 보았으므로이 장에서는 매크로 및 모듈 속성을 사용하여보다 복잡한 DSL을 처리하는 방법을 살펴 봅니다.</target>
        </trans-unit>
        <trans-unit id="814b47f77dfc5a37096b4b03955d625f97a0e859" translate="yes" xml:space="preserve">
          <source>That said, we need to expand the aliases node above to an atom, so we can retrieve its length. Expanding the node is not straightforward because we also need to expand the caller aliases. For example:</source>
          <target state="translated">즉, 별칭 노드를 원자로 확장하여 길이를 검색 할 수 있어야합니다. 발신자 별칭도 확장해야하므로 노드 확장은 간단하지 않습니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="4d3f07f40965deb2a6bdc254e2fe7db4fac694fb" translate="yes" xml:space="preserve">
          <source>That&amp;rsquo;s because an umbrella project gives us plenty of options when deploying the software. We can:</source>
          <target state="translated">이는 우산 프로젝트가 소프트웨어를 배포 할 때 많은 옵션을 제공하기 때문입니다. 우리는 할 수 있습니다 :</target>
        </trans-unit>
        <trans-unit id="11e8efbea29607bc7f881559616858502e41b031" translate="yes" xml:space="preserve">
          <source>That&amp;rsquo;s because we were expecting data from &lt;code&gt;:gen_tcp.recv/2&lt;/code&gt; but the client closed the connection. We need to handle such cases better in future revisions of our server.</source>
          <target state="translated">우리가 &lt;code&gt;:gen_tcp.recv/2&lt;/code&gt; 에서 데이터를 기대하고 있었지만 클라이언트가 연결을 닫았 기 때문입니다. 향후 서버 개정에서 이러한 경우를 더 잘 처리해야합니다.</target>
        </trans-unit>
        <trans-unit id="4c56715445461f557ef98a6e96f4646be8d6243e" translate="yes" xml:space="preserve">
          <source>That&amp;rsquo;s enough for our tests to pass but there is a resource leakage in our application. When a bucket terminates, the supervisor will start a new bucket in its place. After all, that&amp;rsquo;s the role of the supervisor!</source>
          <target state="translated">테스트를 통과하기에는 충분하지만 애플리케이션에 리소스가 누출됩니다. 버킷이 종료되면 수퍼바이저가 대신 새 버킷을 시작합니다. 결국, 그것은 감독자의 역할입니다!</target>
        </trans-unit>
        <trans-unit id="b7a0f3e3c150c923165c6e2a99dd197a0a28b7af" translate="yes" xml:space="preserve">
          <source>That&amp;rsquo;s happening because the release &lt;code&gt;foo&lt;/code&gt; is already listening on port &lt;code&gt;4040&lt;/code&gt; and &lt;code&gt;bar&lt;/code&gt; is trying to do the same! One option could be to move the &lt;code&gt;:port&lt;/code&gt; configuration to the application environment, like we did for the routing table. But let&amp;rsquo;s try something else. Let&amp;rsquo;s make it so the &lt;code&gt;bar&lt;/code&gt; release contains only the &lt;code&gt;:kv&lt;/code&gt; application. So it works as a storage but it won&amp;rsquo;t have a front-end. Change the &lt;code&gt;:bar&lt;/code&gt; information to this:</source>
          <target state="translated">릴리스 때문에 무슨 일이 일어나고 그 &lt;code&gt;foo&lt;/code&gt; 이미 포트에서 수신 대기 &lt;code&gt;4040&lt;/code&gt; 과 &lt;code&gt;bar&lt;/code&gt; 동일한 작업을 수행하려고! 라우팅 테이블에서와 같이 &lt;code&gt;:port&lt;/code&gt; 구성을 응용 프로그램 환경 으로 이동하는 옵션이 있습니다 . 그러나 다른 것을 시도해 봅시다. &lt;code&gt;bar&lt;/code&gt; 릴리스에 &lt;code&gt;:kv&lt;/code&gt; 애플리케이션 만 포함 되도록하십시오 . 따라서 스토리지로 작동하지만 프런트 엔드는 없습니다. &lt;code&gt;:bar&lt;/code&gt; 정보를 다음 과 같이 변경하십시오 .</target>
        </trans-unit>
        <trans-unit id="728db93af19ad8ae8e28827f7df6fa0ee95b6c1b" translate="yes" xml:space="preserve">
          <source>That&amp;rsquo;s it for the client API. On the server side, we can implement a variety of callbacks to guarantee the server initialization, termination, and handling of requests. Those callbacks are optional and for now, we have only implemented the ones we care about. Let&amp;rsquo;s recap.</source>
          <target state="translated">바로 클라이언트 API입니다. 서버 측에서는 서버 초기화, 종료 및 요청 처리를 보장하기 위해 다양한 콜백을 구현할 수 있습니다. 이러한 콜백은 선택 사항이며 현재로서는 관심있는 콜백 만 구현했습니다. 요약하자.</target>
        </trans-unit>
        <trans-unit id="a3de339a8a8126c8176ac9eab07a22576517e36b" translate="yes" xml:space="preserve">
          <source>That&amp;rsquo;s not what we wanted, since the value of the &lt;code&gt;number&lt;/code&gt; variable has not been injected and &lt;code&gt;number&lt;/code&gt; has been quoted in the expression. In order to inject the &lt;em&gt;value&lt;/em&gt; of the &lt;code&gt;number&lt;/code&gt; variable, &lt;code&gt;unquote&lt;/code&gt; has to be used inside the quoted representation:</source>
          <target state="translated">&lt;code&gt;number&lt;/code&gt; 변수 의 값 이 주입되지 않았고 표현식에서 &lt;code&gt;number&lt;/code&gt; 가 인용되었으므로 우리가 원하는 것이 아닙니다 . 분사하기 위해 &lt;em&gt;값&lt;/em&gt; 의 &lt;code&gt;number&lt;/code&gt; 변수를 &lt;code&gt;unquote&lt;/code&gt; 인용 표현 내에서 사용되어야한다 :</target>
        </trans-unit>
        <trans-unit id="dcf68842185af09e3a0f9fe32163648242f47543" translate="yes" xml:space="preserve">
          <source>That&amp;rsquo;s what macros are all about. They are about receiving quoted expressions and transforming them into something else. In fact, &lt;code&gt;unless/2&lt;/code&gt; in Elixir is implemented as a macro:</source>
          <target state="translated">그것이 매크로에 관한 것입니다. 인용 된 표현을 받고 다른 것으로 변환하는 것에 관한 것입니다. 실제로 Elixir의 &lt;code&gt;unless/2&lt;/code&gt; 는 매크로로 구현 되지 않는 한 :</target>
        </trans-unit>
        <trans-unit id="23bd0d6f40de4627ff508337339ea27a545beab3" translate="yes" xml:space="preserve">
          <source>That&amp;rsquo;s when &lt;code&gt;unquote_splicing&lt;/code&gt; becomes handy:</source>
          <target state="translated">&lt;code&gt;unquote_splicing&lt;/code&gt; 이 편리해 졌을 때입니다 .</target>
        </trans-unit>
        <trans-unit id="dd53bd72aff61e4af823bbda7c24cb88da5c37ab" translate="yes" xml:space="preserve">
          <source>That's what we meant when we said earlier that streams are composable, lazy enumerables. Notice we could call &lt;a href=&quot;stream#map/2&quot;&gt;&lt;code&gt;Stream.map/2&lt;/code&gt;&lt;/a&gt; multiple times, effectively composing the streams and keeping them lazy. The computations are only performed when you call a function from the &lt;a href=&quot;enum&quot;&gt;&lt;code&gt;Enum&lt;/code&gt;&lt;/a&gt; module.</source>
          <target state="translated">이것이 스트림이 컴포저 블, 게으른 열거 형이라고 말했을 때의 의미입니다. &lt;a href=&quot;stream#map/2&quot;&gt; &lt;code&gt;Stream.map/2&lt;/code&gt; 를&lt;/a&gt; 여러 번 호출 하여 스트림을 효과적으로 구성하고 게으르게 유지할 수 있습니다. &lt;a href=&quot;enum&quot;&gt; &lt;code&gt;Enum&lt;/code&gt; &lt;/a&gt; 모듈 에서 함수를 호출 할 때만 계산이 수행됩니다 .</target>
        </trans-unit>
        <trans-unit id="a59d1e1634f57e0cf851ffcf7499aa4351a17212" translate="yes" xml:space="preserve">
          <source>The &quot;file:line&quot; represents the file and line a call to a deprecated &quot;module.function/arity&quot; is made. This operation does not show deprecated local calls (a call to a deprecated function or macro in the same module) nor calls to deprecated functionality in Elixir itself.</source>
          <target state="translated">&quot;file : line&quot;은 파일을 나타내며 더 이상 사용되지 않는 &quot;module.function / arity&quot;를 호출합니다. 이 작업은 더 이상 사용되지 않는 로컬 호출 (같은 모듈에서 더 이상 사용되지 않는 함수 또는 매크로에 대한 호출) 또는 Elixir 자체에서 더 이상 사용되지 않는 기능에 대한 호출을 표시하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="826934dab44a7a099fc8b2a86a3c62e533cc4b2e" translate="yes" xml:space="preserve">
          <source>The &quot;file:line&quot; represents the file and line a call to an unknown &quot;module.function/arity&quot; is made.</source>
          <target state="translated">&quot;file : line&quot;은 파일을 나타내며 알 수없는 &quot;module.function / arity&quot;를 호출합니다.</target>
        </trans-unit>
        <trans-unit id="0c20b0f5fe22af74b9f5bd9023dad3c12944c0fd" translate="yes" xml:space="preserve">
          <source>The .iex.exs file</source>
          <target state="translated">.iex.exs 파일</target>
        </trans-unit>
        <trans-unit id="f8308d6c331d75737fe1ed60777039be95e5626b" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#%253C%253E/2&quot;&gt;&lt;code&gt;&amp;lt;&amp;gt;/2&lt;/code&gt;&lt;/a&gt; operator can also be used in pattern matching (and guard clauses) as long as the left argument is a literal binary:</source>
          <target state="translated">&lt;a href=&quot;#%253C%253E/2&quot;&gt; &lt;code&gt;&amp;lt;&amp;gt;/2&lt;/code&gt; &lt;/a&gt; 연산자는 긴 왼쪽 인자 리터럴 진만큼 패턴 매칭 (가드 절)에 사용될 수있다 :</target>
        </trans-unit>
        <trans-unit id="ae4a9ae0930f3e9d2c507d033d48dd4bf27477e8" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#add/2&quot;&gt;&lt;code&gt;add/2&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#diff/2&quot;&gt;&lt;code&gt;diff/2&lt;/code&gt;&lt;/a&gt; functions can be used for computing dates or retrieving the number of days between instants. For example, if there is an interest in computing the number of days from the Unix epoch (1970-01-01):</source>
          <target state="translated">&lt;a href=&quot;#add/2&quot;&gt; &lt;code&gt;add/2&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;#diff/2&quot;&gt; &lt;code&gt;diff/2&lt;/code&gt; &lt;/a&gt; 기능은 날짜를 계산하거나 순간 사이의 일 수를 검색하는 데 사용할 수 있습니다. 예를 들어, 유닉스 시대 (1970-01-01)에서 일 수를 계산하는 데 관심이있는 경우 :</target>
        </trans-unit>
        <trans-unit id="9ee4b27e73fcd2815c54fe669288c51019f1a3b0" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#add/3&quot;&gt;&lt;code&gt;add/3&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#diff/3&quot;&gt;&lt;code&gt;diff/3&lt;/code&gt;&lt;/a&gt; functions can be used for computing with date times or retrieving the number of seconds between instants. For example, if there is an interest in computing the number of seconds from the Unix epoch (1970-01-01 00:00:00):</source>
          <target state="translated">&lt;a href=&quot;#add/3&quot;&gt; &lt;code&gt;add/3&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;#diff/3&quot;&gt; &lt;code&gt;diff/3&lt;/code&gt; &lt;/a&gt; 기능 날짜 시간으로 계산 또는 순간 사이의 시간 (초)을 검색하기 위해 사용될 수있다. 예를 들어, 유닉스 시대 (1970-01-01 00:00:00)에서 초 수를 계산하는 데 관심이있는 경우 :</target>
        </trans-unit>
        <trans-unit id="43daa6aefdc5d7ab59c882f8c756868ab5825ba5" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#c:start/2&quot;&gt;&lt;code&gt;start/2&lt;/code&gt;&lt;/a&gt; callback has to spawn and link a supervisor and return &lt;code&gt;{:ok, pid}&lt;/code&gt; or &lt;code&gt;{:ok, pid, state}&lt;/code&gt;, where &lt;code&gt;pid&lt;/code&gt; is the PID of the supervisor, and &lt;code&gt;state&lt;/code&gt; is an optional application state. &lt;code&gt;args&lt;/code&gt; is the second element of the tuple given to the &lt;code&gt;:mod&lt;/code&gt; option.</source>
          <target state="translated">&lt;a href=&quot;#c:start/2&quot;&gt; &lt;code&gt;start/2&lt;/code&gt; &lt;/a&gt; 콜백은 산란을 가지고 있으며, 감독자 및 반환을 연결 &lt;code&gt;{:ok, pid}&lt;/code&gt; 또는 &lt;code&gt;{:ok, pid, state}&lt;/code&gt; , &lt;code&gt;pid&lt;/code&gt; 는 감독자의 PID이며, &lt;code&gt;state&lt;/code&gt; 옵션으로 애플리케이션 상태입니다. &lt;code&gt;args&lt;/code&gt; 는 &lt;code&gt;:mod&lt;/code&gt; 옵션에 지정된 튜플의 두 번째 요소입니다 .</target>
        </trans-unit>
        <trans-unit id="ed55773b14c9f49b1e67866369426e97f1e28202" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#c:terminate/2&quot;&gt;&lt;code&gt;terminate/2&lt;/code&gt;&lt;/a&gt; callback of the given &lt;code&gt;server&lt;/code&gt; will be invoked before exiting. This function returns &lt;code&gt;:ok&lt;/code&gt; if the server terminates with the given reason; if it terminates with another reason, the call exits.</source>
          <target state="translated">주어진 &lt;code&gt;server&lt;/code&gt; 의 &lt;a href=&quot;#c:terminate/2&quot;&gt; &lt;code&gt;terminate/2&lt;/code&gt; &lt;/a&gt; 콜백 이 종료 되기 전에 호출됩니다. 주어진 이유로 서버가 종료되면 이 함수는 &lt;code&gt;:ok&lt;/code&gt; 를 리턴합니다 . 다른 이유로 종료되면 통화가 종료됩니다.</target>
        </trans-unit>
        <trans-unit id="e5479aff7c9902d4559e5268eb0059ef6a88b9eb" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;Access&lt;/code&gt;&lt;/a&gt; module defines a behaviour for dynamically accessing keys of any type in a data structure via the &lt;code&gt;data[key]&lt;/code&gt; syntax.</source>
          <target state="translated">&lt;a href=&quot;#content&quot;&gt; &lt;code&gt;Access&lt;/code&gt; &lt;/a&gt; 모듈을 통해 동적으로 데이터 구조의 임의의 타입의 키에 액세스하기위한 동작을 정의 &lt;code&gt;data[key]&lt;/code&gt; 구.</target>
        </trans-unit>
        <trans-unit id="22076bf07a81ed27164e331c5cdde4703e5883c9" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;Agent&lt;/code&gt;&lt;/a&gt; module provides a basic server implementation that allows state to be retrieved and updated via a simple API.</source>
          <target state="translated">&lt;a href=&quot;#content&quot;&gt; &lt;code&gt;Agent&lt;/code&gt; &lt;/a&gt; 모듈은 상태가 간단한 API를 통해 검색 및 업데이트 할 수있는 기본 서버 구현을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="ab7d336fe7d0f927a59616b237afeff91face2e6" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;Collectable&lt;/code&gt;&lt;/a&gt; module was designed to fill the gap left by the &lt;a href=&quot;enumerable&quot;&gt;&lt;code&gt;Enumerable&lt;/code&gt;&lt;/a&gt; protocol. &lt;a href=&quot;collectable#into/1&quot;&gt;&lt;code&gt;Collectable.into/1&lt;/code&gt;&lt;/a&gt; can be seen as the opposite of &lt;a href=&quot;enumerable#reduce/3&quot;&gt;&lt;code&gt;Enumerable.reduce/3&lt;/code&gt;&lt;/a&gt;. If the functions in &lt;a href=&quot;enumerable&quot;&gt;&lt;code&gt;Enumerable&lt;/code&gt;&lt;/a&gt; are about taking values out, then &lt;a href=&quot;collectable#into/1&quot;&gt;&lt;code&gt;Collectable.into/1&lt;/code&gt;&lt;/a&gt; is about collecting those values into a structure.</source>
          <target state="translated">&lt;a href=&quot;#content&quot;&gt; &lt;code&gt;Collectable&lt;/code&gt; &lt;/a&gt; 모듈은 왼쪽으로 간격 채우기 위해 설계되었다 &lt;a href=&quot;enumerable&quot;&gt; &lt;code&gt;Enumerable&lt;/code&gt; 에서&lt;/a&gt; 프로토콜을. &lt;a href=&quot;collectable#into/1&quot;&gt; &lt;code&gt;Collectable.into/1&lt;/code&gt; &lt;/a&gt; 은 &lt;a href=&quot;enumerable#reduce/3&quot;&gt; &lt;code&gt;Enumerable.reduce/3&lt;/code&gt; &lt;/a&gt; 와 반대되는 것으로 볼 수 있습니다 . &lt;a href=&quot;enumerable&quot;&gt; &lt;code&gt;Enumerable&lt;/code&gt; &lt;/a&gt; 의 함수 가 값을 가져 오는 것이라면 &lt;a href=&quot;collectable#into/1&quot;&gt; &lt;code&gt;Collectable.into/1&lt;/code&gt; &lt;/a&gt; 은 해당 값을 구조에 수집하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="abf8114bea9b602a6fa5cde26a4f28f20fe6f936" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;GenServer&lt;/code&gt;&lt;/a&gt; is disabled by configuration but might be enabled later.</source>
          <target state="translated">&lt;a href=&quot;#content&quot;&gt; &lt;code&gt;GenServer&lt;/code&gt; 는&lt;/a&gt; 구성으로 비활성화되어 나중에 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="6bff3abe60e151fca7d023800c126e733ac84e99" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;Inspect&lt;/code&gt;&lt;/a&gt; protocol can be derived to hide certain fields from structs, so they don't show up in logs, inspects and similar. This is especially useful for fields containing private information.</source>
          <target state="translated">&lt;a href=&quot;#content&quot;&gt; &lt;code&gt;Inspect&lt;/code&gt; &lt;/a&gt; 가 로그, 검사 및 이와 유사한에 표시되지 않도록 프로토콜은, 구조체에서 특정 필드를 숨기도록 유도 할 수있다. 개인 정보가 포함 된 필드에 특히 유용합니다.</target>
        </trans-unit>
        <trans-unit id="8080f21d315b84058f54169b0d0e5acda5fedb17" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;Inspect&lt;/code&gt;&lt;/a&gt; protocol converts an Elixir data structure into an algebra document.</source>
          <target state="translated">는 &lt;a href=&quot;#content&quot;&gt; &lt;code&gt;Inspect&lt;/code&gt; &lt;/a&gt; 대수 문서로 프로토콜 변환 엘릭서 데이터 구조를.</target>
        </trans-unit>
        <trans-unit id="9b2d0f65323751f2d634dcefd3c1350838c93ed4" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;List.Chars&lt;/code&gt;&lt;/a&gt; protocol is responsible for converting a structure to a charlist (only if applicable).</source>
          <target state="translated">&lt;a href=&quot;#content&quot;&gt; &lt;code&gt;List.Chars&lt;/code&gt; 의&lt;/a&gt; 프로토콜은 charlist (해당되는 경우)에 구조를 변환 할 책임이 있습니다.</target>
        </trans-unit>
        <trans-unit id="38d20b80dced22a569e8ce8dd2e2cb76ca007f43" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;Logger&lt;/code&gt;&lt;/a&gt; level can be changed via &lt;a href=&quot;#configure/1&quot;&gt;&lt;code&gt;configure/1&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#content&quot;&gt; &lt;code&gt;Logger&lt;/code&gt; &lt;/a&gt; 수준을 통해 변경할 수 있습니다 &lt;a href=&quot;#configure/1&quot;&gt; &lt;code&gt;configure/1&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="49b1a8808d4938037f08f4bb6036b797cb46526f" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;String.Chars&lt;/code&gt;&lt;/a&gt; protocol is responsible for converting a structure to a binary (only if applicable).</source>
          <target state="translated">&lt;a href=&quot;#content&quot;&gt; &lt;code&gt;String.Chars&lt;/code&gt; 의&lt;/a&gt; 프로토콜은 바이너리 (해당되는 경우)에 구조를 변환 할 책임이 있습니다.</target>
        </trans-unit>
        <trans-unit id="3a7cc4ed1dd3a53a3c1622be5d60a8754eb496ed" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;System&lt;/code&gt;&lt;/a&gt; module also provides functions that work with time, returning different times kept by the system with support for different time units.</source>
          <target state="translated">&lt;a href=&quot;#content&quot;&gt; &lt;code&gt;System&lt;/code&gt; &lt;/a&gt; 모듈은 시간 작업, 반환 서로 다른 시간에 서로 다른 시간 단위를 지원하는 시스템에 의해 유지한다는 기능을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="cb4a8417128c99dd0f8e923027d6accff8aed84b" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;System&lt;/code&gt;&lt;/a&gt; module provides functions that interact directly with the VM or the host system.</source>
          <target state="translated">&lt;a href=&quot;#content&quot;&gt; &lt;code&gt;System&lt;/code&gt; &lt;/a&gt; 모듈은 기능을 제공합니다 상호 작용 직접 VM 또는 호스트 시스템과 그.</target>
        </trans-unit>
        <trans-unit id="809a6d9b2839f1f30bd03fe2ee9a26d931f04222" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#escape/2&quot;&gt;&lt;code&gt;escape/2&lt;/code&gt;&lt;/a&gt; function is sometimes confused with &lt;a href=&quot;kernel.specialforms#quote/2&quot;&gt;&lt;code&gt;Kernel.SpecialForms.quote/2&lt;/code&gt;&lt;/a&gt;, because the above examples behave the same with both. The key difference is best illustrated when the value to escape is stored in a variable.</source>
          <target state="translated">&lt;a href=&quot;#escape/2&quot;&gt; &lt;code&gt;escape/2&lt;/code&gt; &lt;/a&gt; 기능은 때때로 혼동된다 &lt;a href=&quot;kernel.specialforms#quote/2&quot;&gt; &lt;code&gt;Kernel.SpecialForms.quote/2&lt;/code&gt; &lt;/a&gt; , 모두 동일의 행동 상기 예 때문이다. 주요 차이점은 이스케이프 할 값이 변수에 저장 될 때 가장 잘 설명됩니다.</target>
        </trans-unit>
        <trans-unit id="9c2c3fda2409ed0d9077f83013708c3d236d2331" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#in/2&quot;&gt;&lt;code&gt;in/2&lt;/code&gt;&lt;/a&gt; operator (as well as &lt;code&gt;not in&lt;/code&gt;) can be used in guard clauses as long as the right-hand side is a range or a list. In such cases, Elixir will expand the operator to a valid guard expression. For example:</source>
          <target state="translated">&lt;a href=&quot;#in/2&quot;&gt; &lt;code&gt;in/2&lt;/code&gt; &lt;/a&gt; (뿐만 아니라 운영자 &lt;code&gt;not in&lt;/code&gt; ) 긴 우측이 범위 또는리스트만큼 가드 절에서 사용될 수있다. 이 경우 Elixir는 연산자를 유효한 보호 표현식으로 확장합니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="1987eac8908bd887fd45fd0aa17e5d5cf4eae6f4" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#inspect/2&quot;&gt;&lt;code&gt;inspect/2&lt;/code&gt;&lt;/a&gt; function receives the entity to be inspected followed by the inspecting options, represented by the struct &lt;a href=&quot;inspect.opts&quot;&gt;&lt;code&gt;Inspect.Opts&lt;/code&gt;&lt;/a&gt;. Building of the algebra document is done with &lt;a href=&quot;inspect.algebra&quot;&gt;&lt;code&gt;Inspect.Algebra&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">는 &lt;a href=&quot;#inspect/2&quot;&gt; &lt;code&gt;inspect/2&lt;/code&gt; &lt;/a&gt; 기능은 엔티티 구조체로 표시되는 검사 옵션 이어 피검 수신 &lt;a href=&quot;inspect.opts&quot;&gt; &lt;code&gt;Inspect.Opts&lt;/code&gt; &lt;/a&gt; . 대수 문서 작성은 &lt;a href=&quot;inspect.algebra&quot;&gt; &lt;code&gt;Inspect.Algebra&lt;/code&gt; &lt;/a&gt; 로 수행됩니다 .</target>
        </trans-unit>
        <trans-unit id="134dffce704618fe41bc1a6ff89c996a1a5a5795" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#parse_head/2&quot;&gt;&lt;code&gt;parse_head/2&lt;/code&gt;&lt;/a&gt; function is an alternative to &lt;a href=&quot;#parse/2&quot;&gt;&lt;code&gt;parse/2&lt;/code&gt;&lt;/a&gt; which stops parsing as soon as it finds a value that is not a switch nor a value for a previous switch.</source>
          <target state="translated">&lt;a href=&quot;#parse_head/2&quot;&gt; &lt;code&gt;parse_head/2&lt;/code&gt; &lt;/a&gt; 기능의 대안 &lt;a href=&quot;#parse/2&quot;&gt; &lt;code&gt;parse/2&lt;/code&gt; &lt;/a&gt; 가 스위치 나 이전 스위치의 값이 아닌 값을 발견하자마자 파싱하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="697f7c6714240908cebb2f84042a4676fb351582" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#receive/1&quot;&gt;&lt;code&gt;receive/1&lt;/code&gt;&lt;/a&gt; special form handles variables exactly as the &lt;a href=&quot;#case/2&quot;&gt;&lt;code&gt;case/2&lt;/code&gt;&lt;/a&gt; special macro. For more information, check the docs for &lt;a href=&quot;#case/2&quot;&gt;&lt;code&gt;case/2&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">은 &lt;a href=&quot;#receive/1&quot;&gt; &lt;code&gt;receive/1&lt;/code&gt; &lt;/a&gt; 정확하게 같은 특수 형태의 핸들 변수 &lt;a href=&quot;#case/2&quot;&gt; &lt;code&gt;case/2&lt;/code&gt; &lt;/a&gt; 특별한 매크로. 자세한 정보는 &lt;a href=&quot;#case/2&quot;&gt; &lt;code&gt;case/2&lt;/code&gt; 에&lt;/a&gt; 대한 문서를 확인하십시오 .</target>
        </trans-unit>
        <trans-unit id="e0a73aff6dd1644a4fec2f0cc2e5b4cbf67e226d" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#run/1&quot;&gt;&lt;code&gt;run/1&lt;/code&gt;&lt;/a&gt; function will receive a list of all arguments passed to the command line.</source>
          <target state="translated">&lt;a href=&quot;#run/1&quot;&gt; &lt;code&gt;run/1&lt;/code&gt; &lt;/a&gt; 기능은 명령 줄에 전달 된 모든 인수 목록을 받게됩니다.</target>
        </trans-unit>
        <trans-unit id="1acbbf7700e430d5e8a317ed727437d8f72605c6" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#to_charlist/1&quot;&gt;&lt;code&gt;to_charlist/1&lt;/code&gt;&lt;/a&gt; function automatically imported by &lt;a href=&quot;kernel&quot;&gt;&lt;code&gt;Kernel&lt;/code&gt;&lt;/a&gt; invokes this protocol.</source>
          <target state="translated">&lt;a href=&quot;#to_charlist/1&quot;&gt; &lt;code&gt;to_charlist/1&lt;/code&gt; &lt;/a&gt; 에 의해 자동으로 가져 오기 기능을 &lt;a href=&quot;kernel&quot;&gt; &lt;code&gt;Kernel&lt;/code&gt; &lt;/a&gt; 이 프로토콜을 호출합니다.</target>
        </trans-unit>
        <trans-unit id="c9a742b2d1a9b66bf0c1dce63c60e9a1472deab1" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#to_string/1&quot;&gt;&lt;code&gt;to_string/1&lt;/code&gt;&lt;/a&gt; function automatically imported by &lt;a href=&quot;kernel&quot;&gt;&lt;code&gt;Kernel&lt;/code&gt;&lt;/a&gt; invokes this protocol. String interpolation also invokes &lt;a href=&quot;#to_string/1&quot;&gt;&lt;code&gt;to_string/1&lt;/code&gt;&lt;/a&gt; in its arguments. For example, &lt;code&gt;&quot;foo#{bar}&quot;&lt;/code&gt; is the same as &lt;code&gt;&quot;foo&quot; &amp;lt;&amp;gt; to_string(bar)&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;#to_string/1&quot;&gt; &lt;code&gt;to_string/1&lt;/code&gt; &lt;/a&gt; 에 의해 자동으로 가져 오기 기능을 &lt;a href=&quot;kernel&quot;&gt; &lt;code&gt;Kernel&lt;/code&gt; &lt;/a&gt; 이 프로토콜을 호출합니다. 문자열 보간은 또한 인수에서 &lt;a href=&quot;#to_string/1&quot;&gt; &lt;code&gt;to_string/1&lt;/code&gt; &lt;/a&gt; 을 호출합니다 . 예를 들어, &lt;code&gt;&quot;foo#{bar}&quot;&lt;/code&gt; 는 &lt;code&gt;&quot;foo&quot; &amp;lt;&amp;gt; to_string(bar)&lt;/code&gt; 합니다.</target>
        </trans-unit>
        <trans-unit id="99cfcb046ece84f36691d25008fe9a0f03a6c335" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;access&quot;&gt;&lt;code&gt;Access&lt;/code&gt;&lt;/a&gt; module ships with many convenience accessor functions, like the &lt;code&gt;all&lt;/code&gt; anonymous function defined above. See &lt;a href=&quot;access#all/0&quot;&gt;&lt;code&gt;Access.all/0&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;access#key/2&quot;&gt;&lt;code&gt;Access.key/2&lt;/code&gt;&lt;/a&gt;, and others as examples.</source>
          <target state="translated">&lt;a href=&quot;access&quot;&gt; &lt;code&gt;Access&lt;/code&gt; &lt;/a&gt; 등 많은 편의 접근 기능을 가진 모듈 제공되는 &lt;code&gt;all&lt;/code&gt; 위에서 정의 된 익명 함수. 예를 들어 &lt;a href=&quot;access#all/0&quot;&gt; &lt;code&gt;Access.all/0&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;access#key/2&quot;&gt; &lt;code&gt;Access.key/2&lt;/code&gt; &lt;/a&gt; 및 기타를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="bf10aa8724a5861c9b7609f06466ac0092733d78" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;enum#into/2&quot;&gt;&lt;code&gt;Enum.into/2&lt;/code&gt;&lt;/a&gt; function uses this protocol to insert an enumerable into a collection:</source>
          <target state="translated">&lt;a href=&quot;enum#into/2&quot;&gt; &lt;code&gt;Enum.into/2&lt;/code&gt; &lt;/a&gt; 기능 집합을 열거 내로 삽입이 프로토콜을 사용</target>
        </trans-unit>
        <trans-unit id="fa114b12b62761d046798dab8cfd3d0e25686da7" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;enumerable&quot;&gt;&lt;code&gt;Enumerable&lt;/code&gt;&lt;/a&gt; protocol is useful to take values out of a collection. In order to support a wide range of values, the functions provided by the &lt;a href=&quot;enumerable&quot;&gt;&lt;code&gt;Enumerable&lt;/code&gt;&lt;/a&gt; protocol do not keep shape. For example, passing a map to &lt;a href=&quot;enum#map/2&quot;&gt;&lt;code&gt;Enum.map/2&lt;/code&gt;&lt;/a&gt; always returns a list.</source>
          <target state="translated">&lt;a href=&quot;enumerable&quot;&gt; &lt;code&gt;Enumerable&lt;/code&gt; 에서&lt;/a&gt; 프로토콜 모음에서 값을 가질 때 유용합니다. 광범위한 값을 지원하기 위해 &lt;a href=&quot;enumerable&quot;&gt; &lt;code&gt;Enumerable&lt;/code&gt; &lt;/a&gt; 프로토콜이 제공하는 기능은 형태를 유지하지 않습니다. 예를 들어 &lt;a href=&quot;enum#map/2&quot;&gt; &lt;code&gt;Enum.map/2&lt;/code&gt; 에&lt;/a&gt; 맵을 전달하면 항상 목록이 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="c6e919949e1cc4c7055aecf80d424e6c7c8e1be6" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;exunit.assertions&quot;&gt;&lt;code&gt;ExUnit.Assertions&lt;/code&gt;&lt;/a&gt; module contains a set of macros to generate assertions with appropriate error messages.</source>
          <target state="translated">&lt;a href=&quot;exunit.assertions&quot;&gt; &lt;code&gt;ExUnit.Assertions&lt;/code&gt; 의&lt;/a&gt; 모듈은 적절한 오류 메시지와 주장을 생성하는 매크로 세트가 포함되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="e06ff54ee1b695829bf1293f395bfa9eaf00995b" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;http://erlang.org/doc/man/queue.html&quot;&gt;&lt;code&gt;queue&lt;/code&gt; is a data structure&lt;/a&gt; that implements (double-ended) FIFO (first-in first-out) queues efficiently:</source>
          <target state="translated">&lt;a href=&quot;http://erlang.org/doc/man/queue.html&quot;&gt; &lt;code&gt;queue&lt;/code&gt; 데이터 구조&lt;/a&gt; 가 구현 (양두) 것을 효율적 큐 (선입 선출 처음에) FIFO :</target>
        </trans-unit>
        <trans-unit id="bdd1437c3341d1c07273b3f627a96d773e38e418" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://hexdocs.pm/elixir/Enum.html&quot;&gt;&lt;code&gt;Enum&lt;/code&gt; module&lt;/a&gt;, which we&amp;rsquo;re going to see in the next chapter, already provides many conveniences for working with lists. For instance, the examples above could be written as:</source>
          <target state="translated">&lt;a href=&quot;https://hexdocs.pm/elixir/Enum.html&quot;&gt; &lt;code&gt;Enum&lt;/code&gt; 모듈&lt;/a&gt; 우리는 다음 장에서 보게 될, 이미 목록 작업을위한 많은 편의를 제공합니다. 예를 들어 위의 예는 다음과 같이 작성할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a8c7834fd0c261cc1b5f7ce8f49f4c14a50c74c8" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://hexdocs.pm/elixir/File.html&quot;&gt;&lt;code&gt;File&lt;/code&gt;&lt;/a&gt; module contains functions that allow us to open files as IO devices. By default, files are opened in binary mode, which requires developers to use the specific &lt;code&gt;IO.binread/2&lt;/code&gt; and &lt;code&gt;IO.binwrite/2&lt;/code&gt; functions from the &lt;code&gt;IO&lt;/code&gt; module:</source>
          <target state="translated">&lt;a href=&quot;https://hexdocs.pm/elixir/File.html&quot;&gt; &lt;code&gt;File&lt;/code&gt; &lt;/a&gt; 모듈은 우리가 IO 장치로 파일을 열 수있는 기능이 포함되어 있습니다. 기본적으로 파일은 이진 모드로 열리 &lt;code&gt;IO.binread/2&lt;/code&gt; 개발자 는 &lt;code&gt;IO&lt;/code&gt; 모듈 에서 특정 IO.binread / 2 및 &lt;code&gt;IO.binwrite/2&lt;/code&gt; 함수를 사용해야 합니다.</target>
        </trans-unit>
        <trans-unit id="f10e5258e9f652f477ba9a6f2a826f10009c524a" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://hexdocs.pm/elixir/IO.html&quot;&gt;&lt;code&gt;IO&lt;/code&gt;&lt;/a&gt; module is the main mechanism in Elixir for reading and writing to standard input/output (&lt;code&gt;:stdio&lt;/code&gt;), standard error (&lt;code&gt;:stderr&lt;/code&gt;), files, and other IO devices. Usage of the module is pretty straightforward:</source>
          <target state="translated">&lt;a href=&quot;https://hexdocs.pm/elixir/IO.html&quot;&gt; &lt;code&gt;IO&lt;/code&gt; 의&lt;/a&gt; (모듈 읽고 표준 입 / 출력을 기록하기위한 엘릭서의 주요 메커니즘이다 &lt;code&gt;:stdio&lt;/code&gt; ), 표준 에러 ( &lt;code&gt;:stderr&lt;/code&gt; ), 파일 및 다른 IO 장치. 모듈 사용법은 매우 간단합니다.</target>
        </trans-unit>
        <trans-unit id="0707ff13aefb15f3954d547b10f3f7c1336b24c0" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://hexdocs.pm/elixir/String.html&quot;&gt;String module&lt;/a&gt; contains a bunch of functions that operate on strings as defined in the Unicode standard:</source>
          <target state="translated">&lt;a href=&quot;https://hexdocs.pm/elixir/String.html&quot;&gt;문자열 모듈은&lt;/a&gt; 유니 코드 표준에 정의 된 문자열에서 작동 기능의 무리가 포함되어 있습니다</target>
        </trans-unit>
        <trans-unit id="67af9d3d80d8598be47bff2ebf254dbbb32a0636" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://hexdocs.pm/mix/Mix.Tasks.New.html&quot;&gt;&lt;code&gt;mix new&lt;/code&gt;&lt;/a&gt; command also allows the &lt;code&gt;--sup&lt;/code&gt; option to scaffold an application with a supervision tree out of the box. We talk about supervision trees later on when discussing one of the common anti-patterns when writing libraries.</source>
          <target state="translated">&lt;a href=&quot;https://hexdocs.pm/mix/Mix.Tasks.New.html&quot;&gt; &lt;code&gt;mix new&lt;/code&gt; &lt;/a&gt; 명령은 또한 수 있습니다 &lt;code&gt;--sup&lt;/code&gt; 상자 밖으로 감독 트리를 사용하여 응용 프로그램을 스캐 폴딩하는 옵션을 선택합니다. 나중에 라이브러리를 작성할 때 일반적인 안티 패턴 중 하나를 논의 할 때 감독 트리에 대해 이야기합니다.</target>
        </trans-unit>
        <trans-unit id="08414f62e4bbf9fd4d3ea08bc5b82b4c8e08abc1" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;inspect&quot;&gt;&lt;code&gt;Inspect&lt;/code&gt;&lt;/a&gt; protocol can be derived to hide certain fields from structs, so they don't show up in logs, inspects and similar. See the &quot;Deriving&quot; section of the documentation of the &lt;a href=&quot;inspect&quot;&gt;&lt;code&gt;Inspect&lt;/code&gt;&lt;/a&gt; protocol for more information.</source>
          <target state="translated">&lt;a href=&quot;inspect&quot;&gt; &lt;code&gt;Inspect&lt;/code&gt; &lt;/a&gt; 가 로그, 검사 및 이와 유사한에 표시되지 않도록 프로토콜은, 구조체에서 특정 필드를 숨기도록 유도 할 수있다. 자세한 내용은 &lt;a href=&quot;inspect&quot;&gt; &lt;code&gt;Inspect&lt;/code&gt; &lt;/a&gt; 프로토콜 설명서의 &quot;파생&quot;섹션 을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="40361add3dfacd3a82f9de048a333c39b479ae30" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;inspect.algebra#concat/1&quot;&gt;&lt;code&gt;concat/1&lt;/code&gt;&lt;/a&gt; function comes from &lt;a href=&quot;inspect.algebra&quot;&gt;&lt;code&gt;Inspect.Algebra&lt;/code&gt;&lt;/a&gt; and it concatenates algebra documents together. In the example above, it is concatenating the string &lt;code&gt;&quot;MapSet&amp;lt;&quot;&lt;/code&gt; (all strings are valid algebra documents that keep their formatting when pretty printed), the document returned by &lt;a href=&quot;inspect.algebra#to_doc/2&quot;&gt;&lt;code&gt;Inspect.Algebra.to_doc/2&lt;/code&gt;&lt;/a&gt; and the other string &lt;code&gt;&quot;&amp;gt;&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;inspect.algebra#concat/1&quot;&gt; &lt;code&gt;concat/1&lt;/code&gt; &lt;/a&gt; 기능에서 온다 &lt;a href=&quot;inspect.algebra&quot;&gt; &lt;code&gt;Inspect.Algebra&lt;/code&gt; &lt;/a&gt; 과 함께 대수 문서를 연결합니다. 위의 예에서 문자열 &lt;code&gt;&quot;MapSet&amp;lt;&quot;&lt;/code&gt; (모든 문자열은 유효한 인쇄시 형식을 유지하는 유효한 대수 문서), &lt;a href=&quot;inspect.algebra#to_doc/2&quot;&gt; &lt;code&gt;Inspect.Algebra.to_doc/2&lt;/code&gt; 에&lt;/a&gt; 의해 반환 된 문서 및 다른 문자열 &lt;code&gt;&quot;&amp;gt;&quot;&lt;/code&gt; 을 연결 합니다.</target>
        </trans-unit>
        <trans-unit id="3e499fed5d9e082220ab4665ee83930202fbc216" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;io&quot;&gt;&lt;code&gt;IO&lt;/code&gt;&lt;/a&gt; module provides streams, that are both &lt;a href=&quot;enumerable&quot;&gt;&lt;code&gt;Enumerable&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;collectable&quot;&gt;&lt;code&gt;Collectable&lt;/code&gt;&lt;/a&gt;, here is an upcase echo server using comprehensions:</source>
          <target state="translated">&lt;a href=&quot;io&quot;&gt; &lt;code&gt;IO&lt;/code&gt; &lt;/a&gt; 모듈은 모두 스트림 제공 &lt;a href=&quot;enumerable&quot;&gt; &lt;code&gt;Enumerable&lt;/code&gt; 에서&lt;/a&gt; 와 &lt;a href=&quot;collectable&quot;&gt; &lt;code&gt;Collectable&lt;/code&gt; &lt;/a&gt; 여기를 이용한 지능형 upcase 에코 서버는 :</target>
        </trans-unit>
        <trans-unit id="ef991dbc6590a70e7dc7792c1502faa5b82544ac" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;logger#info/2&quot;&gt;&lt;code&gt;Logger.info/2&lt;/code&gt;&lt;/a&gt; macro emits the provided message at the &lt;code&gt;:info&lt;/code&gt; level. Note the arguments given to &lt;a href=&quot;#info/2&quot;&gt;&lt;code&gt;info/2&lt;/code&gt;&lt;/a&gt; will only be evaluated if a message is logged. For instance, if the Logger level is set to &lt;code&gt;:warn&lt;/code&gt;, &lt;code&gt;:info&lt;/code&gt; messages are never logged and therefore the arguments given above won't even be executed.</source>
          <target state="translated">&lt;a href=&quot;logger#info/2&quot;&gt; &lt;code&gt;Logger.info/2&lt;/code&gt; 의&lt;/a&gt; 매크로에서 제공된 메시지 방출 &lt;code&gt;:info&lt;/code&gt; 수준. &lt;a href=&quot;#info/2&quot;&gt; &lt;code&gt;info/2&lt;/code&gt; 에&lt;/a&gt; 제공된 인수 는 메시지가 기록 된 경우에만 평가됩니다. 예를 들어, 로거 레벨이 &lt;code&gt;:warn&lt;/code&gt; 으로 설정 되면 &lt;code&gt;:info&lt;/code&gt; 메시지가 기록되지 않으므로 위에 제공된 인수도 실행되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="3fb892be769329b47a3a72fea685384027a625eb" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;supervisor&quot;&gt;&lt;code&gt;Supervisor&lt;/code&gt;&lt;/a&gt; module was designed to handle mostly static children that are started in the given order when the supervisor starts. A &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;DynamicSupervisor&lt;/code&gt;&lt;/a&gt; starts with no children. Instead, children are started on demand via &lt;a href=&quot;#start_child/2&quot;&gt;&lt;code&gt;start_child/2&lt;/code&gt;&lt;/a&gt;. When a dynamic supervisor terminates, all children are shut down at the same time, with no guarantee of ordering.</source>
          <target state="translated">&lt;a href=&quot;supervisor&quot;&gt; &lt;code&gt;Supervisor&lt;/code&gt; &lt;/a&gt; 모듈은 관리자가 시작되면 주어진 순서로 시작됩니다 주로 정적 자녀를 처리 할 수 있도록 설계되었다. &lt;a href=&quot;#content&quot;&gt; &lt;code&gt;DynamicSupervisor&lt;/code&gt; 이&lt;/a&gt; 없는 아이들과 함께 시작됩니다. 대신, 아이들은 &lt;a href=&quot;#start_child/2&quot;&gt; &lt;code&gt;start_child/2&lt;/code&gt; &lt;/a&gt; 를 통해 요청에 따라 시작됩니다 . 동적 관리자가 종료되면 주문을 보장하지 않고 모든 어린이가 동시에 종료됩니다.</target>
        </trans-unit>
        <trans-unit id="26a12a273dc85b3ddb0a7cf7190ec7cccb61c0d5" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;task.supervisor&quot;&gt;&lt;code&gt;Task.Supervisor&lt;/code&gt;&lt;/a&gt; module allows developers to dynamically create multiple supervised tasks.</source>
          <target state="translated">&lt;a href=&quot;task.supervisor&quot;&gt; &lt;code&gt;Task.Supervisor&lt;/code&gt; 의&lt;/a&gt; 모듈은 개발자가 동적으로 여러 감독 작업을 만들 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="9f3bcdc6b0dacd5812de01049f85ba71ec9d986e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&amp;amp;1&lt;/code&gt; represents the first argument passed into the function. &lt;code&gt;&amp;amp;(&amp;amp;1 + 1)&lt;/code&gt; above is exactly the same as &lt;code&gt;fn x -&amp;gt; x + 1 end&lt;/code&gt;. The syntax above is useful for short function definitions.</source>
          <target state="translated">&lt;code&gt;&amp;amp;1&lt;/code&gt; 함수로 전달되는 첫번째 인수를 나타낸다. &lt;code&gt;&amp;amp;(&amp;amp;1 + 1)&lt;/code&gt; 은 &lt;code&gt;fn x -&amp;gt; x + 1 end&lt;/code&gt; 와 정확히 동일 합니다. 위의 구문은 짧은 함수 정의에 유용합니다.</target>
        </trans-unit>
        <trans-unit id="462dea57799a704e8bdaa1d60d5f41548cf0ff70" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&amp;amp;&lt;/code&gt; operator can be used with more complex expressions:</source>
          <target state="translated">&lt;code&gt;&amp;amp;&lt;/code&gt; 연산자는 더 복잡한 식을 사용할 수 있습니다 :</target>
        </trans-unit>
        <trans-unit id="8324a31beed435619f352d82babacf78e2ffed56" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;--source&lt;/code&gt; and &lt;code&gt;--sink&lt;/code&gt; options are particularly useful when trying to understand how the modules in a particular file interact with the whole system. You can combine those options with &lt;code&gt;--label&lt;/code&gt; and &lt;code&gt;--only-nodes&lt;/code&gt; to get all files that exhibit a certain property, for example:</source>
          <target state="translated">&lt;code&gt;--source&lt;/code&gt; 및 &lt;code&gt;--sink&lt;/code&gt; 전체 시스템에 특정 파일의 상호 작용에 어떻게 모듈을 이해하려고 할 때 옵션은 특히 유용합니다. 이러한 옵션을 &lt;code&gt;--label&lt;/code&gt; 및 &lt;code&gt;--only-nodes&lt;/code&gt; 와 결합 하여 특정 속성을 나타내는 모든 파일을 가져올 수 있습니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="27914fb6ca74f78b539d08d503dae1d70d9876c5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;--stale&lt;/code&gt; command line option attempts to run only those test files which reference modules that have changed since the last time you ran this task with &lt;code&gt;--stale&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;--stale&lt;/code&gt; 명령 행 옵션 시도 만 테스트 파일 당신이이 작업을 마지막으로 실행 한 이후에 변경된 참조 모듈 실행 &lt;code&gt;--stale&lt;/code&gt; 을 .</target>
        </trans-unit>
        <trans-unit id="70c59bbd77397d77a76b99b62c09d5b35df96a8c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;--trace&lt;/code&gt; option is useful when your tests are deadlocking or there are race conditions, as it runs all tests synchronously (&lt;code&gt;async: true&lt;/code&gt; has no effect) and shows detailed information about each test. You may see one or two intermittent failures:</source>
          <target state="translated">&lt;code&gt;--trace&lt;/code&gt; 동 기적 (모든 테스트를 실행되는 옵션은, 당신의 검사 결과가 교착하거나 경쟁 조건이있을 때 유용하다 &lt;code&gt;async: true&lt;/code&gt; 와 쇼는 각 테스트에 대한 자세한 정보를 아무런 효과가 없습니다). 간헐적으로 하나 또는 두 개의 장애가 발생할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="bac163fa8c2566f186b54fd07de5c6d65f93af5b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:ascii&lt;/code&gt; mode ignores Unicode characters and provides a more performant implementation when you know the string contains only ASCII characters:</source>
          <target state="translated">&lt;code&gt;:ascii&lt;/code&gt; 모드는 유니 코드 문자를 무시하고 문자열이 ASCII 문자 만 포함 알고있을 때 더 성능이 좋은 구현을 제공합니다 :</target>
        </trans-unit>
        <trans-unit id="05564ea628704e49dd4cc09651f569d44c1a82ff" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:crypto&lt;/code&gt; module is not part of the Erlang standard library, but is included with the Erlang distribution. This means you must list &lt;code&gt;:crypto&lt;/code&gt; in your project&amp;rsquo;s applications list whenever you use it. To do this, edit your &lt;code&gt;mix.exs&lt;/code&gt; file to include:</source>
          <target state="translated">&lt;code&gt;:crypto&lt;/code&gt; 모듈은 얼랑 표준 라이브러리의 일부가 아니라 얼랑 배포판에 포함되어있다. 즉, 사용할 때마다 프로젝트 응용 프로그램 목록에 &lt;code&gt;:crypto&lt;/code&gt; 를 나열해야 합니다. 이렇게하려면 &lt;code&gt;mix.exs&lt;/code&gt; 파일을 편집하여 다음 을 포함하십시오.</target>
        </trans-unit>
        <trans-unit id="add3cf115e3a7915716bd93a5b79e1744ef2d173" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:fd&lt;/code&gt; name option allows developers to access &lt;code&gt;in&lt;/code&gt; and &lt;code&gt;out&lt;/code&gt; file descriptors used by the Erlang VM. You would use those only if you are reimplementing core part of the Runtime System, such as the &lt;code&gt;:user&lt;/code&gt; and &lt;code&gt;:shell&lt;/code&gt; processes.</source>
          <target state="translated">&lt;code&gt;:fd&lt;/code&gt; 이름 옵션은 액세스 개발자 수 &lt;code&gt;in&lt;/code&gt; 와 &lt;code&gt;out&lt;/code&gt; 얼랑 VM에서 사용하는 파일 기술자. &lt;code&gt;:user&lt;/code&gt; 및 &lt;code&gt;:shell&lt;/code&gt; 프로세스 와 같이 런타임 시스템의 핵심 부분을 다시 구현하는 경우에만이를 사용 합니다.</target>
        </trans-unit>
        <trans-unit id="3f6ac7a8b41e26b0d52e88d330fed22cf2cc2f20" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:into&lt;/code&gt; and &lt;code&gt;:uniq&lt;/code&gt; options</source>
          <target state="translated">&lt;code&gt;:into&lt;/code&gt; 와 &lt;code&gt;:uniq&lt;/code&gt; 옵션</target>
        </trans-unit>
        <trans-unit id="0211bc3942dfba08cb46ef94332394518116ea6d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:into&lt;/code&gt; option</source>
          <target state="translated">&lt;code&gt;:into&lt;/code&gt; 옵션</target>
        </trans-unit>
        <trans-unit id="a3988e2dcd8f368dd88c8ea1b7ec2bcd3100e56a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:label&lt;/code&gt; option is especially useful with pipelines:</source>
          <target state="translated">&lt;code&gt;:label&lt;/code&gt; 옵션은 파이프 라인에 특히 유용합니다 :</target>
        </trans-unit>
        <trans-unit id="d03df649244dc7c63287f31c15a54de9bf6e2182" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:mod&lt;/code&gt; option specifies the &amp;ldquo;application callback module&amp;rdquo;, followed by the arguments to be passed on application start. The application callback module can be any module that implements the &lt;a href=&quot;https://hexdocs.pm/elixir/Application.html&quot;&gt;Application&lt;/a&gt; behaviour.</source>
          <target state="translated">&lt;code&gt;:mod&lt;/code&gt; 옵션은 인수 다음에 &quot;응용 프로그램 콜백 모듈&quot;, 응용 프로그램 시작에 전달되도록 지정합니다. 응용 프로그램 콜백 모듈은 &lt;a href=&quot;https://hexdocs.pm/elixir/Application.html&quot;&gt;응용 프로그램&lt;/a&gt; 동작 을 구현하는 모든 모듈 일 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="ebc92fad8b6ff75a2a9c584dbe63fcee1353d021" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:name&lt;/code&gt; option can also be given in order to register a supervisor name, the supported values are described in the &quot;Name registration&quot; section in the &lt;a href=&quot;genserver&quot;&gt;&lt;code&gt;GenServer&lt;/code&gt;&lt;/a&gt; module docs.</source>
          <target state="translated">&lt;code&gt;:name&lt;/code&gt; 옵션은 또한 관리자 이름을 등록하기 위해 제공 될 수 있으며, 지원되는 값은에서 &quot;이름 등록&quot;절에서 설명하는 &lt;a href=&quot;genserver&quot;&gt; &lt;code&gt;GenServer&lt;/code&gt; 의&lt;/a&gt; 모듈 문서.</target>
        </trans-unit>
        <trans-unit id="9dd616361d3877df539a2d092f8aadb9d1c83008" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:name&lt;/code&gt; option can also be used to register a supervisor name. The supported values are described under the &quot;Name registration&quot; section in the &lt;a href=&quot;genserver&quot;&gt;&lt;code&gt;GenServer&lt;/code&gt;&lt;/a&gt; module docs.</source>
          <target state="translated">&lt;code&gt;:name&lt;/code&gt; 옵션은 감독자의 이름을 등록 할 수 있습니다. 지원되는 값은 &lt;a href=&quot;genserver&quot;&gt; &lt;code&gt;GenServer&lt;/code&gt; &lt;/a&gt; 모듈 문서 의 &quot;이름 등록&quot;섹션에 설명되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="0be059e0f52bc117f0d9ac535f0ebaba535ffdbc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:name&lt;/code&gt; option is used for registration as described in the module documentation.</source>
          <target state="translated">&lt;code&gt;:name&lt;/code&gt; 모듈 문서에 설명 된대로 옵션을 등록하는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="9ae6a790ebfb15d6c60e22c6003dc079f27e1350" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:persistent&lt;/code&gt; option can be set to &lt;code&gt;true&lt;/code&gt; when there is a need to guarantee parameters set with this function will not be overridden by the ones defined in the application resource file on load. This means persistent values will stick after the application is loaded and also on application reload.</source>
          <target state="translated">&lt;code&gt;:persistent&lt;/code&gt; 옵션을 설정할 수 있습니다 &lt;code&gt;true&lt;/code&gt; 부하에 응용 프로그램 자원 파일에 정의 된 것들에 의해 오버라이드 (override)되지 않습니다이 기능으로 설정된 보증 매개 변수에 대한 필요가있을 때. 이는 애플리케이션이로드 된 후 및 애플리케이션을 다시로드 할 때 지속적 값이 유지됨을 의미합니다.</target>
        </trans-unit>
        <trans-unit id="f0d1fdc494208ae6f6f718ee89ecd443e0ecaf7e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:reduce&lt;/code&gt; option</source>
          <target state="translated">&lt;code&gt;:reduce&lt;/code&gt; 옵션을</target>
        </trans-unit>
        <trans-unit id="fb3b286cd086eae72642832fb5a362f5110c1af4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:restart&lt;/code&gt; option controls what the supervisor should consider to be a successful termination or not. If the termination is successful, the supervisor won't restart the child. If the child process crashed, the supervisor will start a new one.</source>
          <target state="translated">&lt;code&gt;:restart&lt;/code&gt; 감독자가 고려해야 할 옵션 컨트롤이 성공적으로 종료 여부를합니다. 종료에 성공하면 감독자는 자식을 다시 시작하지 않습니다. 하위 프로세스가 중단되면 감독자가 새 프로세스를 시작합니다.</target>
        </trans-unit>
        <trans-unit id="21c211e6097ddfd5bc4a9bb4945fe2497ef06a6b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:second&lt;/code&gt;, &lt;code&gt;:millisecond&lt;/code&gt;, &lt;code&gt;:microsecond&lt;/code&gt; and &lt;code&gt;:nanosecond&lt;/code&gt; time units controls the return value of the functions that accept a time unit.</source>
          <target state="translated">&lt;code&gt;:second&lt;/code&gt; , &lt;code&gt;:millisecond&lt;/code&gt; , &lt;code&gt;:microsecond&lt;/code&gt; 과 &lt;code&gt;:nanosecond&lt;/code&gt; 시간 단위의 시간 제어 유닛을 수용 함수의 리턴 값.</target>
        </trans-unit>
        <trans-unit id="1fc77c6e40a992f998c561f03446c6642ec346ad" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:spawn&lt;/code&gt; tuple receives a binary that is going to be executed as a full invocation. For example, we can use it to invoke &quot;echo hello&quot; directly:</source>
          <target state="translated">&lt;code&gt;:spawn&lt;/code&gt; 튜플 전체 호출로 실행하는 것입니다 바이너리를받습니다. 예를 들어, &quot;echo hello&quot;를 직접 호출하는 데 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="7b93bb4d3ff18560e52b37ae6c18a308889c8bd6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:static_atom_encoder&lt;/code&gt; function</source>
          <target state="translated">&lt;code&gt;:static_atom_encoder&lt;/code&gt; 의 기능</target>
        </trans-unit>
        <trans-unit id="7852e9b0f6e5ea07cd2dd1ac64030694b4b9d2d5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:strategy&lt;/code&gt; is a required option and the currently supported value is &lt;code&gt;:one_for_one&lt;/code&gt;. The remaining options can be found in the &lt;a href=&quot;#init/1&quot;&gt;&lt;code&gt;init/1&lt;/code&gt;&lt;/a&gt; docs.</source>
          <target state="translated">&lt;code&gt;:strategy&lt;/code&gt; 필수 옵션이며 현재 지원되는 값입니다 &lt;code&gt;:one_for_one&lt;/code&gt; . 나머지 옵션은 &lt;a href=&quot;#init/1&quot;&gt; &lt;code&gt;init/1&lt;/code&gt; &lt;/a&gt; 문서 에서 찾을 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="3ecf2c76d0e93dbfb5af69dd0e723a8fce1f3ba3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:strategy&lt;/code&gt; option is required and by default a maximum of 3 restarts is allowed within 5 seconds. Check the &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;Supervisor&lt;/code&gt;&lt;/a&gt; module for a detailed description of the available strategies.</source>
          <target state="translated">&lt;code&gt;:strategy&lt;/code&gt; 옵션이 필요하며 기본적으로 3 다시 시작의 최대 5 초 이내에 허용됩니다. 사용 가능한 전략에 대한 자세한 설명은 &lt;a href=&quot;#content&quot;&gt; &lt;code&gt;Supervisor&lt;/code&gt; &lt;/a&gt; 모듈을 확인하십시오 .</target>
        </trans-unit>
        <trans-unit id="4318a8c81e458ee0b9cf77340dadbaf79a290499" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:strategy&lt;/code&gt; option is required and by default a maximum of 3 restarts is allowed within 5 seconds. Check the &lt;a href=&quot;supervisor&quot;&gt;&lt;code&gt;Supervisor&lt;/code&gt;&lt;/a&gt; module for a detailed description of the available strategies.</source>
          <target state="translated">&lt;code&gt;:strategy&lt;/code&gt; 옵션이 필요하며 기본적으로 3 다시 시작의 최대 5 초 이내에 허용됩니다. 사용 가능한 전략에 대한 자세한 설명은 &lt;a href=&quot;supervisor&quot;&gt; &lt;code&gt;Supervisor&lt;/code&gt; &lt;/a&gt; 모듈을 확인하십시오 .</target>
        </trans-unit>
        <trans-unit id="6fd3d939dbec7e219780c6a3622d4fe572215853" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:test_coverage&lt;/code&gt; configuration accepts the following options:</source>
          <target state="translated">&lt;code&gt;:test_coverage&lt;/code&gt; 의 구성은 다음과 같은 옵션을 적용합니다</target>
        </trans-unit>
        <trans-unit id="ad9818925ace018f87e1927334e33ca1a365e0b7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:test_type&lt;/code&gt; tag is automatically set by ExUnit, but is &lt;em&gt;not&lt;/em&gt; reserved. This tag is available for users to customize if they desire.</source>
          <target state="translated">&lt;code&gt;:test_type&lt;/code&gt; 태그가 자동으로 ExUnit으로 설정되어 있지만 &lt;em&gt;없는&lt;/em&gt; 소유. 이 태그는 사용자가 원하는 경우 사용자 정의 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="0bb936c2d2f36ac2f8066e21c586a6fb2a08b1b4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@&lt;/code&gt; macro compiles to a call to this function. For example, the following code:</source>
          <target state="translated">&lt;code&gt;@&lt;/code&gt; 이 함수를 호출하는 매크로를 컴파일합니다. 예를 들어, 다음 코드는</target>
        </trans-unit>
        <trans-unit id="5131f63d4a847e5310d4b0da9f690cbf2653c391" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@compile&lt;/code&gt; attribute accepts different options that are used by both Elixir and Erlang compilers. Some of the common use cases are documented below:</source>
          <target state="translated">&lt;code&gt;@compile&lt;/code&gt; 속성은 모두 비약과 얼랑 컴파일러에 의해 사용되는 다른 옵션을 받아들입니다. 일반적인 사용 사례 중 일부는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="9c96b72a2b5229c84ff37173dda7b65a784fe244" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@doc&lt;/code&gt; annotation immediately preceding &lt;code&gt;use Supervisor&lt;/code&gt; will be attached to the generated &lt;code&gt;child_spec/1&lt;/code&gt; function.</source>
          <target state="translated">&lt;code&gt;use Supervisor&lt;/code&gt; 바로 앞에 있는 &lt;code&gt;@doc&lt;/code&gt; 주석 이 생성 된 &lt;code&gt;child_spec/1&lt;/code&gt; 함수에 첨부됩니다 .</target>
        </trans-unit>
        <trans-unit id="c2548a73a793d075044328d72e23f487f2153196" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@moduledoc&lt;/code&gt; attribute is used to add documentation to the module. &lt;code&gt;@doc&lt;/code&gt; is used before a function to provide documentation for it. Besides the attributes above, &lt;code&gt;@typedoc&lt;/code&gt; can also be used to attach documentation to types defined as part of typespecs. Elixir also allows metadata to be attached to documentation, by passing a keyword list to &lt;code&gt;@doc&lt;/code&gt; and friends.</source>
          <target state="translated">&lt;code&gt;@moduledoc&lt;/code&gt; 의 속성은 모듈에 문서를 추가하는 데 사용됩니다. &lt;code&gt;@doc&lt;/code&gt; 은 문서화 기능을 제공하기 전에 사용됩니다. 위의 속성 외에도 &lt;code&gt;@typedoc&lt;/code&gt; 을 사용하여 문서를 typespec의 일부로 정의 된 형식에 첨부 할 수 있습니다. Elixir는 또한 키워드 목록을 &lt;code&gt;@doc&lt;/code&gt; 및 friends 에 전달하여 메타 데이터를 문서에 첨부 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="5c4c9561309d3048192c645c1b53867cd58046c7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@spec&lt;/code&gt; above expresses that all types allowed to implement the given protocol are valid argument types for the given function.</source>
          <target state="translated">위 의 &lt;code&gt;@spec&lt;/code&gt; 은 주어진 프로토콜을 구현할 수있는 모든 유형이 주어진 함수에 유효한 인수 유형임을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="4ecf8bb424c804cabf2a64179dad99d91c08aa50" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@type&lt;/code&gt;, &lt;code&gt;@typep&lt;/code&gt;, and &lt;code&gt;@opaque&lt;/code&gt; module attributes can be used to define new types:</source>
          <target state="translated">&lt;code&gt;@type&lt;/code&gt; , &lt;code&gt;@typep&lt;/code&gt; 및 &lt;code&gt;@opaque&lt;/code&gt; 모듈 속성은 새로운 유형을 정의 할 수 있습니다 :</target>
        </trans-unit>
        <trans-unit id="923172e1b194c31095f6b50cc3fcf7cd6864f7d7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@typedoc&lt;/code&gt; directive, similarly to the &lt;code&gt;@doc&lt;/code&gt; and &lt;code&gt;@moduledoc&lt;/code&gt; directives, is used to document custom types.</source>
          <target state="translated">&lt;code&gt;@typedoc&lt;/code&gt; 의 지시는 유사에 &lt;code&gt;@doc&lt;/code&gt; 및 &lt;code&gt;@moduledoc&lt;/code&gt; 지침, 문서 정의 유형에 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="a63341783e3511427fe146f8a19ffd92af29382f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Agent.update/3&lt;/code&gt; function accepts as second argument any function that receives one argument and returns a value:</source>
          <target state="translated">&lt;code&gt;Agent.update/3&lt;/code&gt; 함수는 두번째 인수로 하나 개의 인자를 수신하고 값을 리턴하는 함수를 받아 :</target>
        </trans-unit>
        <trans-unit id="7a655503d2990c75edcb4c8b8a481ab364d1c5d9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Config&lt;/code&gt; module in Elixir was introduced in v1.9 as a replacement to &lt;a href=&quot;https://hexdocs.pm/mix/Mix.Config.html&quot;&gt;&lt;code&gt;Mix.Config&lt;/code&gt;&lt;/a&gt;, which was specific to Mix and has been deprecated.</source>
          <target state="translated">&lt;code&gt;Config&lt;/code&gt; 비약의 모듈로 대체 V1.9에 도입 된 &lt;a href=&quot;https://hexdocs.pm/mix/Mix.Config.html&quot;&gt; &lt;code&gt;Mix.Config&lt;/code&gt; &lt;/a&gt; 믹스 특이하고 사용되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="e27fe58053aba859d0bb7d011fc28980f6e9c181" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Enum&lt;/code&gt; module provides a huge range of functions to transform, sort, group, filter and retrieve items from enumerables. It is one of the modules developers use frequently in their Elixir code.</source>
          <target state="translated">&lt;code&gt;Enum&lt;/code&gt; 모듈은 변환 정렬 기, 필터 enumerables에서 항목을 검색하는 함수의 큰 범위를 제공한다. 개발자가 Elixir 코드에서 자주 사용하는 모듈 중 하나입니다.</target>
        </trans-unit>
        <trans-unit id="1d4fbc9808f8e26c00c234d6fa1459002dc186de" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;File&lt;/code&gt; module</source>
          <target state="translated">&lt;code&gt;File&lt;/code&gt; 모듈</target>
        </trans-unit>
        <trans-unit id="e840334dc33e37be12e55cfa6bc3b7e8c169342a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;IO&lt;/code&gt; module</source>
          <target state="translated">&lt;code&gt;IO&lt;/code&gt; 모듈</target>
        </trans-unit>
        <trans-unit id="ef38704061a34457ddb379b41a2b80be49207a37" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Inspect&lt;/code&gt; protocol is the protocol used to transform any data structure into a readable textual representation. This is what tools like IEx use to print results:</source>
          <target state="translated">&lt;code&gt;Inspect&lt;/code&gt; 프로토콜은 판독의 텍스트 표현에 어떤 데이터 구조를 변환하는 데 사용되는 프로토콜이다. 이것은 IEx와 같은 도구가 결과를 인쇄하는 데 사용하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="867c539e4d21456c5aa36b2d220867f9a7212a1e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;KV.RouterTest&lt;/code&gt; truly has to be distributed, as its purpose is to test the distribution. However, the test in &lt;code&gt;KVServerTest&lt;/code&gt; was only made distributed because we had a hardcoded distributed routing table, which we couldn&amp;rsquo;t configure, but now we can!</source>
          <target state="translated">&lt;code&gt;KV.RouterTest&lt;/code&gt; 은 진정으로 그 목적은 배포를 테스트하는 것입니다으로 분산되어야한다. 그러나 &lt;code&gt;KVServerTest&lt;/code&gt; 의 테스트는 구성 할 수없는 하드 코딩 된 분산 라우팅 테이블이 있었기 때문에 배포 만되었지만 이제는 가능합니다!</target>
        </trans-unit>
        <trans-unit id="98cbbae17162ecee1b3987ff4642880f4c337dca" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;MyApp&lt;/code&gt; module given to &lt;code&gt;:mod&lt;/code&gt; needs to implement the &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;Application&lt;/code&gt;&lt;/a&gt; behaviour. This can be done by putting &lt;code&gt;use Application&lt;/code&gt; in that module and implementing the &lt;a href=&quot;#c:start/2&quot;&gt;&lt;code&gt;start/2&lt;/code&gt;&lt;/a&gt; callback, for example:</source>
          <target state="translated">&lt;code&gt;MyApp&lt;/code&gt; 를의 에게 주어진 모듈 &lt;code&gt;:mod&lt;/code&gt; 필요가 구현하는 &lt;a href=&quot;#content&quot;&gt; &lt;code&gt;Application&lt;/code&gt; &lt;/a&gt; 동작을. 이를 &lt;code&gt;use Application&lt;/code&gt; 해당 모듈에 Application 을 사용 하고 &lt;a href=&quot;#c:start/2&quot;&gt; &lt;code&gt;start/2&lt;/code&gt; &lt;/a&gt; 콜백을 구현하면됩니다 .</target>
        </trans-unit>
        <trans-unit id="eb345c09eb20de824e9541a17d7bf17e012b4abc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Path&lt;/code&gt; module</source>
          <target state="translated">&lt;code&gt;Path&lt;/code&gt; 모듈</target>
        </trans-unit>
        <trans-unit id="c334edecfba6073bd7010af2e40dba91546f5ce7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Size&lt;/code&gt; protocol can now be implemented for &lt;code&gt;Any&lt;/code&gt;:</source>
          <target state="translated">이제 &lt;code&gt;Size&lt;/code&gt; 프로토콜을 &lt;code&gt;Any&lt;/code&gt; 에 대해 구현할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="8e306d6fedad75e62089879bf19da4f3ec37aa79" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Size&lt;/code&gt; protocol expects a function called &lt;code&gt;size&lt;/code&gt; that receives one argument (the data structure we want to know the size of) to be implemented. We can now implement this protocol for the data structures that would have a compliant implementation:</source>
          <target state="translated">&lt;code&gt;Size&lt;/code&gt; 프로토콜은 기능이라고 예상 &lt;code&gt;size&lt;/code&gt; 하나 개의 인수 구현 될 (우리는의 크기를 알고 싶은 데이터 구조)를 받는다. 이제 우리는 호환 구현을 갖는 데이터 구조에 대해이 프로토콜을 구현할 수 있습니다 :</target>
        </trans-unit>
        <trans-unit id="db5fefc34081f3a8d848c3114be6230d0555c05c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;User switch command&lt;/code&gt; can also be used to terminate an existing session, for example when the evaluator gets stuck in an infinite loop or when you are stuck typing an expression:</source>
          <target state="translated">&lt;code&gt;User switch command&lt;/code&gt; 또한 평가자가 무한 루프에 걸리면 또는 예를 들어, 기존 세션을 종료하는 데 사용할 수있는 문제가 발생할 입력하는 식 때 :</target>
        </trans-unit>
        <trans-unit id="7f41e81f3757a1435933e38bc5bfe28881ade0a2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;User switch command&lt;/code&gt; menu also allows developers to connect to remote shells using the &lt;code&gt;r&lt;/code&gt; command. A topic which we will discuss next.</source>
          <target state="translated">&lt;code&gt;User switch command&lt;/code&gt; 메뉴는 개발자가 사용하여 원격 쉘에 연결할 수 있습니다 &lt;code&gt;r&lt;/code&gt; 에 명령을. 다음에 논의 할 주제입니다.</target>
        </trans-unit>
        <trans-unit id="57c1d154dd951f8282bee6bdc6065d02cb12023d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;[head | tail]&lt;/code&gt; format is not only used on pattern matching but also for prepending items to a list:</source>
          <target state="translated">&lt;code&gt;[head | tail]&lt;/code&gt; 형식은 패턴 일치뿐만 아니라 항목을 목록에 추가 할 때도 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="fd1f98818191e0504c9112dc757cd520cf41584f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;after&lt;/code&gt; clause can be specified even if there are no match clauses. The timeout value given to &lt;code&gt;after&lt;/code&gt; can be any expression evaluating to one of the allowed values:</source>
          <target state="translated">&lt;code&gt;after&lt;/code&gt; 절은 일치하는 조항이없는 경우에도 지정할 수 있습니다. &lt;code&gt;after&lt;/code&gt; 제공된 시간 종료 값 은 허용되는 값 중 하나로 평가되는 표현식 일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d4dc8c4ed1d9e88f4741236f5ec92ee315c9d28b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;after&lt;/code&gt; clause will be executed regardless of whether or not the tried block succeeds. Note, however, that if a linked process exits, this process will exit and the &lt;code&gt;after&lt;/code&gt; clause will not get run. Thus &lt;code&gt;after&lt;/code&gt; provides only a soft guarantee. Luckily, files in Elixir are also linked to the current processes and therefore they will always get closed if the current process crashes, independent of the &lt;code&gt;after&lt;/code&gt; clause. You will find the same to be true for other resources like ETS tables, sockets, ports and more.</source>
          <target state="translated">&lt;code&gt;after&lt;/code&gt; 절에 관계없이 시도 블록이 성공 여부에 실행됩니다. 그러나 연결된 프로세스가 종료되면이 프로세스가 종료되고 &lt;code&gt;after&lt;/code&gt; 절이 실행되지 않습니다. 따라서 &lt;code&gt;after&lt;/code&gt; 는 부드러운 보증 만 제공합니다. 운 좋게도 Elixir의 파일은 현재 프로세스에 연결되어 있으므로 &lt;code&gt;after&lt;/code&gt; 절 과 상관없이 현재 프로세스가 충돌하면 항상 닫힙니다 . ETS 테이블, 소켓, 포트 등과 같은 다른 리소스에서도 마찬가지입니다.</target>
        </trans-unit>
        <trans-unit id="522546706684271ab3f2efbb350890fbe1239f1b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;assigns&lt;/code&gt; extension is useful when the number of variables required by the template is not specified at compilation time.</source>
          <target state="translated">&lt;code&gt;assigns&lt;/code&gt; 템플릿에 필요한 변수의 수는 컴파일시에 지정되지 않은 경우 확장 유용합니다.</target>
        </trans-unit>
        <trans-unit id="20b542c507c9f404606e6129f6dd5795d8b21d4a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;binding&lt;/code&gt; argument is a keyword list of variable bindings. The &lt;code&gt;opts&lt;/code&gt; argument is a keyword list of environment options.</source>
          <target state="translated">&lt;code&gt;binding&lt;/code&gt; 인수는 변수 바인딩의 키워드 목록입니다. &lt;code&gt;opts&lt;/code&gt; 인수는 환경 옵션의 키워드 목록입니다.</target>
        </trans-unit>
        <trans-unit id="43af9d9f02afe40e3a624713286d4df36015f946" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;catch&lt;/code&gt; clause also supports &lt;code&gt;:error&lt;/code&gt; alongside &lt;code&gt;:exit&lt;/code&gt; and &lt;code&gt;:throw&lt;/code&gt; as in Erlang, although this is commonly avoided in favor of &lt;code&gt;raise&lt;/code&gt;/&lt;code&gt;rescue&lt;/code&gt; control mechanisms. One reason for this is that when catching &lt;code&gt;:error&lt;/code&gt;, the error is not automatically transformed into an Elixir error:</source>
          <target state="translated">&lt;code&gt;catch&lt;/code&gt; 절은 또한 지원 &lt;code&gt;:error&lt;/code&gt; 와 함께 &lt;code&gt;:exit&lt;/code&gt; 과 &lt;code&gt;:throw&lt;/code&gt; 얼랑에서,이 일반적으로 찬성 피할 수 있지만, &lt;code&gt;raise&lt;/code&gt; / &lt;code&gt;rescue&lt;/code&gt; 제어 메커니즘. 이에 대한 한 가지 이유는 &lt;code&gt;:error&lt;/code&gt; 를 잡을 때 오류가 자동으로 Elixir 오류로 변환되지 않기 때문입니다.</target>
        </trans-unit>
        <trans-unit id="efeea9a7b42fc8c994bd1aa663c47cac8fa65f39" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;catch&lt;/code&gt; clause also supports catching exits and errors. To do that, it allows matching on both the &lt;em&gt;kind&lt;/em&gt; of the caught value as well as the value itself:</source>
          <target state="translated">&lt;code&gt;catch&lt;/code&gt; 절은 종료되고 오류를 잡기 지원합니다. 이를 위해 catch 된 값 의 &lt;em&gt;종류&lt;/em&gt; 와 값 자체를 일치시킬 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="24330da6829bfcedd43d719e9d8c6b8cc77a9453" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;catch&lt;/code&gt; clause can be used to catch thrown values, exits, and errors.</source>
          <target state="translated">&lt;code&gt;catch&lt;/code&gt; 절은 던져 값, 종료 및 오류를 포착 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="8d2397a8238f753aef5def5de423d0f7288e2079" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;child_spec/1&lt;/code&gt; function returns the child specification which describes how to start the process, if the process is a worker or a supervisor, if the process is temporary, transient or permanent and so on. The &lt;code&gt;child_spec/1&lt;/code&gt; function is automatically defined when we &lt;code&gt;use Agent&lt;/code&gt;, &lt;code&gt;use GenServer&lt;/code&gt;, &lt;code&gt;use Supervisor&lt;/code&gt;, etc. Let&amp;rsquo;s give it a try in the terminal with &lt;code&gt;iex -S mix&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;child_spec/1&lt;/code&gt; 기능은 프로세스가 일시적으로 일시적 또는 영구적 등의 경우 프로세스가 작업자 또는 감독자 인 경우, 프로세스를 시작하는 방법에 대해 설명 자식 사양을 반환합니다. &lt;code&gt;child_spec/1&lt;/code&gt; 우리는 때 기능이 자동으로 정의됩니다 &lt;code&gt;use Agent&lt;/code&gt; , &lt;code&gt;use GenServer&lt;/code&gt; , &lt;code&gt;use Supervisor&lt;/code&gt; 등하자주고 그것으로 터미널에서 시도 &lt;code&gt;iex -S mix&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="5076e4aa7f98418aab62c50ce92daa399ad148af" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;datetime&lt;/code&gt; is expected to be using the ISO calendar with a year greater than or equal to 0.</source>
          <target state="translated">&lt;code&gt;datetime&lt;/code&gt; 일년 0 이상의와 ISO 캘린더를 사용하는 것으로 예상된다.</target>
        </trans-unit>
        <trans-unit id="a7470ce899e96bb2d28a9c1301a9927e4e0d7efa" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;device&lt;/code&gt; is iterated by the given number of bytes or line by line if &lt;code&gt;:line&lt;/code&gt; is given. Alternatively, if &lt;code&gt;:all&lt;/code&gt; is given, then whole &lt;code&gt;device&lt;/code&gt; is returned.</source>
          <target state="translated">&lt;code&gt;device&lt;/code&gt; 있는 경우 광고가 바이트 라인의 소정 수로 반복되는 &lt;code&gt;:line&lt;/code&gt; 주어진다. 또는 &lt;code&gt;:all&lt;/code&gt; 을 지정하면 전체 &lt;code&gt;device&lt;/code&gt; 가 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="18926bc10cd79bf34225eb9fdce31365b1c6d418" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;device&lt;/code&gt; is iterated by the given number of bytes or line by line if &lt;code&gt;:line&lt;/code&gt; is given. This reads from the IO device as a raw binary.</source>
          <target state="translated">&lt;code&gt;device&lt;/code&gt; 있는 경우 광고가 바이트 라인의 소정 수로 반복되는 &lt;code&gt;:line&lt;/code&gt; 주어진다. 이것은 IO 디바이스에서 원시 바이너리로 읽습니다.</target>
        </trans-unit>
        <trans-unit id="d123d0b725ad2bf46d13d4f89ecd59664f74da3b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;device&lt;/code&gt; is iterated by the given number of characters or line by line if &lt;code&gt;:line&lt;/code&gt; is given.</source>
          <target state="translated">&lt;code&gt;device&lt;/code&gt; 경우 선으로 문자 나 라인의 지정된 수에 의해 반복되는 &lt;code&gt;:line&lt;/code&gt; 주어진다.</target>
        </trans-unit>
        <trans-unit id="8d73a8d9622fd3342e8e37363bb8e4678e91ee6e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;device&lt;/code&gt; is iterated by the given number of characters or line by line if &lt;code&gt;:line&lt;/code&gt; is given. Alternatively, if &lt;code&gt;:all&lt;/code&gt; is given, then whole &lt;code&gt;device&lt;/code&gt; is returned.</source>
          <target state="translated">&lt;code&gt;device&lt;/code&gt; 경우 선으로 문자 나 라인의 지정된 수에 의해 반복되는 &lt;code&gt;:line&lt;/code&gt; 주어진다. 또는 &lt;code&gt;:all&lt;/code&gt; 을 지정하면 전체 &lt;code&gt;device&lt;/code&gt; 가 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="bd6d16ba352ae3e2cd0c595b6f985cf5e9830dad" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;do:&lt;/code&gt; and &lt;code&gt;else:&lt;/code&gt; pairs form a keyword list! In fact, the call above is equivalent to:</source>
          <target state="translated">는 &lt;code&gt;do:&lt;/code&gt; 과 &lt;code&gt;else:&lt;/code&gt; 쌍은 키워드 목록을 형성! 실제로 위의 호출은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="d7d3bd404eb61a5ace38bb205d91cc9fe9dacd66" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;fields&lt;/code&gt; argument is usually a keyword list with field names as atom keys and default values as corresponding values. &lt;a href=&quot;#defstruct/1&quot;&gt;&lt;code&gt;defstruct/1&lt;/code&gt;&lt;/a&gt; also supports a list of atoms as its argument: in that case, the atoms in the list will be used as the struct's field names and they will all default to &lt;code&gt;nil&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;fields&lt;/code&gt; 인수는 일반적으로 원자의 키와 해당 값으로 기본 값으로 필드 이름과 키워드 목록입니다. &lt;a href=&quot;#defstruct/1&quot;&gt; &lt;code&gt;defstruct/1&lt;/code&gt; &lt;/a&gt; 은 또한 인수로 원자 목록을 지원합니다.이 경우 목록의 원자는 구조체의 필드 이름으로 사용되며 모두 기본값은 &lt;code&gt;nil&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="5f8139dc2ac79685ca13901ec7c7e0bf0f70fcbd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;fun&lt;/code&gt; argument receives the value of &lt;code&gt;key&lt;/code&gt; (or &lt;code&gt;nil&lt;/code&gt; if &lt;code&gt;key&lt;/code&gt; is not present in &lt;code&gt;container&lt;/code&gt;) and must return a two-element tuple &lt;code&gt;{get_value, update_value}&lt;/code&gt;: the &quot;get&quot; value &lt;code&gt;get_value&lt;/code&gt; (the retrieved value, which can be operated on before being returned) and the new value to be stored under &lt;code&gt;key&lt;/code&gt; (&lt;code&gt;update_value&lt;/code&gt;). &lt;code&gt;fun&lt;/code&gt; may also return &lt;code&gt;:pop&lt;/code&gt;, which means the current value should be removed from the container and returned.</source>
          <target state="translated">&lt;code&gt;fun&lt;/code&gt; 인수의 값 수신 &lt;code&gt;key&lt;/code&gt; (또는 &lt;code&gt;nil&lt;/code&gt; 하면 &lt;code&gt;key&lt;/code&gt; 에 존재하지 않는 &lt;code&gt;container&lt;/code&gt; )와, 2 요소 튜플 반환해야합니다 &lt;code&gt;{get_value, update_value}&lt;/code&gt; : 값 &quot;GET&quot; &lt;code&gt;get_value&lt;/code&gt; 이전에 작동 할 수 있습니다 (검색된 값을, 반환되고) &lt;code&gt;key&lt;/code&gt; ( &lt;code&gt;update_value&lt;/code&gt; )에 저장 될 새 값 입니다. &lt;code&gt;fun&lt;/code&gt; 은 &lt;code&gt;:pop&lt;/code&gt; 을 반환 할 수도 있습니다 . 즉, 현재 값을 컨테이너에서 제거하여 반환해야합니다.</target>
        </trans-unit>
        <trans-unit id="ab82e984fadbbf0154d9f589974323854d91ddd7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;fun&lt;/code&gt; argument receives the value of &lt;code&gt;key&lt;/code&gt; (or &lt;code&gt;nil&lt;/code&gt; if &lt;code&gt;key&lt;/code&gt; is not present) and must return one of the following values:</source>
          <target state="translated">&lt;code&gt;fun&lt;/code&gt; 인수의 값 수신 &lt;code&gt;key&lt;/code&gt; (또는 &lt;code&gt;nil&lt;/code&gt; 하면 &lt;code&gt;key&lt;/code&gt; 존재하지 않는)과 다음 값 중 하나를 반환해야합니다 :</target>
        </trans-unit>
        <trans-unit id="15ae90181c3399df6f57363e86986a58cdd69c58" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;inspect/1&lt;/code&gt; function is used to convert a data structure&amp;rsquo;s internal representation into a string, typically for printing. Notice that when the &lt;code&gt;receive&lt;/code&gt; block gets executed the sender process we have spawned may already be dead, as its only instruction was to send a message.</source>
          <target state="translated">는 &lt;code&gt;inspect/1&lt;/code&gt; 기능은 일반적으로 인쇄 문자열에 데이터 구조의 내부 표현으로 변환하기 위해 사용된다. (가) 때 통지 &lt;code&gt;receive&lt;/code&gt; 블록은 우리가 유일한 명령은 메시지를 보낼 수 있었다으로 이미 죽었을 수도 산란 한 발송 프로세스를 실행됩니다.</target>
        </trans-unit>
        <trans-unit id="b4ef8eb0a2e7ca9a57a606a0bc63171348ce16a7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;lib/kv.ex&lt;/code&gt; file was compiled, an application manifest named &lt;code&gt;kv.app&lt;/code&gt; was generated and &lt;a href=&quot;../protocols#protocol-consolidation&quot;&gt;all protocols were consolidated as described in the Getting Started guide&lt;/a&gt;. All compilation artifacts are placed inside the &lt;code&gt;_build&lt;/code&gt; directory using the options defined in the &lt;code&gt;mix.exs&lt;/code&gt; file.</source>
          <target state="translated">&lt;code&gt;lib/kv.ex&lt;/code&gt; 파일은 컴파일 된 응용 프로그램 매니페스트라는 이름의 &lt;code&gt;kv.app&lt;/code&gt; 가 생성 및 &lt;a href=&quot;../protocols#protocol-consolidation&quot;&gt;시작하기 안내서에 설명 된대로 모든 프로토콜을 통합했다&lt;/a&gt; . 모든 컴파일 아티팩트는 &lt;code&gt;mix.exs&lt;/code&gt; 파일에 정의 된 옵션을 사용하여 &lt;code&gt;_build&lt;/code&gt; 디렉토리에 배치 됩니다.</target>
        </trans-unit>
        <trans-unit id="fb93b5ae3cb838786493785c00bd4b6f99477ad7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;line_or_bytes&lt;/code&gt; argument configures how the file is read when streaming, by &lt;code&gt;:line&lt;/code&gt; (default) or by a given number of bytes.</source>
          <target state="translated">은 &lt;code&gt;line_or_bytes&lt;/code&gt; 하여 스트리밍 할 때 파일을 읽는 방법 인수를 구성을 &lt;code&gt;:line&lt;/code&gt; (기본값) 또는 지정된 바이트 수에 의해.</target>
        </trans-unit>
        <trans-unit id="fe606eea5a853797263dc491beb562e8cbcc73c7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;logger&lt;/code&gt; application ships as part of Elixir. We stated that our application needs it by specifying it in the &lt;code&gt;:extra_applications&lt;/code&gt; list in &lt;code&gt;mix.exs&lt;/code&gt;. See the &lt;a href=&quot;https://hexdocs.pm/logger&quot;&gt;official docs&lt;/a&gt; for more information.</source>
          <target state="translated">&lt;code&gt;logger&lt;/code&gt; 비약의 일부로 응용 프로그램 제공됩니다. 우리는 우리의 응용 프로그램에 지정하여 필요하다고 언급 &lt;code&gt;:extra_applications&lt;/code&gt; 의 목록 &lt;code&gt;mix.exs&lt;/code&gt; . 자세한 내용은 &lt;a href=&quot;https://hexdocs.pm/logger&quot;&gt;공식 문서&lt;/a&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="54af23949bca7ed78e1b2333920d90c038af7ad6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;mix test&lt;/code&gt; command also allows us to dynamically include and exclude tags. For example, we can run &lt;code&gt;$ mix test --include distributed&lt;/code&gt; to run distributed tests regardless of the value set in &lt;code&gt;test/test_helper.exs&lt;/code&gt;. We could also pass &lt;code&gt;--exclude&lt;/code&gt; to exclude a particular tag from the command line. Finally, &lt;code&gt;--only&lt;/code&gt; can be used to run only tests with a particular tag:</source>
          <target state="translated">또한 &lt;code&gt;mix test&lt;/code&gt; 명령을 사용하면 태그를 동적으로 포함 및 제외 할 수 있습니다. 예를 들어, &lt;code&gt;test/test_helper.exs&lt;/code&gt; 에 설정된 값에 관계없이 &lt;code&gt;$ mix test --include distributed&lt;/code&gt; 를 실행하여 분산 테스트를 실행할 수 있습니다 . 명령 줄에서 특정 태그를 제외하기 위해 &lt;code&gt;--exclude&lt;/code&gt; 를 전달할 수도 있습니다 . 마지막으로 &lt;code&gt;--only&lt;/code&gt; 는 특정 태그로 테스트 만 실행하는 데 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="75c3e7f0c2115829278fc15321400f8791e52369" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;mod&lt;/code&gt; key of an application resource file configures an application callback module and start argument:</source>
          <target state="translated">응용 프로그램 자원 파일 의 &lt;code&gt;mod&lt;/code&gt; 키는 응용 프로그램 콜백 모듈 및 시작 인수를 구성합니다.</target>
        </trans-unit>
        <trans-unit id="cefbaf0f99d8706ada7dd49301877753ff097956" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;options&lt;/code&gt; received by this function are also supported by &lt;a href=&quot;#start_link/2&quot;&gt;&lt;code&gt;start_link/2&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;options&lt;/code&gt; 이 기능에 의해 수신도 지원하는 &lt;a href=&quot;#start_link/2&quot;&gt; &lt;code&gt;start_link/2&lt;/code&gt; &lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="64284a2724bf8bf1be42ef3f1c05bbea72ce9fee" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;pattern&lt;/code&gt; argument must be a match pattern. Flunks with &lt;code&gt;failure_message&lt;/code&gt; if a message matching &lt;code&gt;pattern&lt;/code&gt; is not received.</source>
          <target state="translated">&lt;code&gt;pattern&lt;/code&gt; 인수는 일치하는 패턴해야합니다. 메시지 일치 &lt;code&gt;pattern&lt;/code&gt; 이 수신되지 않으면 failure_message와 함께 &lt;code&gt;failure_message&lt;/code&gt; 합니다 .</target>
        </trans-unit>
        <trans-unit id="306d8664f10996ce7979609652732704d345ac55" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;pattern&lt;/code&gt; argument must be a match pattern. Flunks with &lt;code&gt;failure_message&lt;/code&gt; if a message matching &lt;code&gt;pattern&lt;/code&gt; is received.</source>
          <target state="translated">&lt;code&gt;pattern&lt;/code&gt; 인수는 일치하는 패턴해야합니다. 메시지 일치 &lt;code&gt;pattern&lt;/code&gt; 이 수신 되면 failure_message와 &lt;code&gt;failure_message&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="e0b8cb821a5d5214e8e6bc4e51c9c7ff6f736aee" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;pattern&lt;/code&gt; argument must be a match pattern. Flunks with &lt;code&gt;failure_message&lt;/code&gt; if a message matching &lt;code&gt;pattern&lt;/code&gt; was not received.</source>
          <target state="translated">&lt;code&gt;pattern&lt;/code&gt; 인수는 일치하는 패턴해야합니다. 메시지 일치 &lt;code&gt;pattern&lt;/code&gt; 이 수신되지 않은 경우 failure_message와 &lt;code&gt;failure_message&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="05af0549cba6832bb035eed4973d7149b45f6ee9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;pattern&lt;/code&gt; argument must be a match pattern. Flunks with &lt;code&gt;failure_message&lt;/code&gt; if a message matching &lt;code&gt;pattern&lt;/code&gt; was received.</source>
          <target state="translated">&lt;code&gt;pattern&lt;/code&gt; 인수는 일치하는 패턴해야합니다. 메시지 일치 &lt;code&gt;pattern&lt;/code&gt; 이 수신 된 경우 failure_message와 &lt;code&gt;failure_message&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="9712132d8ecb090f4be0f4f06a8c889cede54cae" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;pattern&lt;/code&gt; may be a string, a regular expression, or a compiled pattern.</source>
          <target state="translated">&lt;code&gt;pattern&lt;/code&gt; 문자열, 정규 표현식, 또는 컴파일 된 패턴이있을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f1e822b0c23d86ef4a2e7320c3e2f68f5b6a5886" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;read_line/1&lt;/code&gt; implementation receives data from the socket using &lt;code&gt;:gen_tcp.recv/2&lt;/code&gt; and &lt;code&gt;write_line/2&lt;/code&gt; writes to the socket using &lt;code&gt;:gen_tcp.send/2&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;read_line/1&lt;/code&gt; 구현하여 소켓으로부터 데이터를 수신한다 &lt;code&gt;:gen_tcp.recv/2&lt;/code&gt; 및 &lt;code&gt;write_line/2&lt;/code&gt; 기입하여 소켓 &lt;code&gt;:gen_tcp.send/2&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="d4738ad60c532661639b80291c79bbfd95de51f3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;replacement&lt;/code&gt; may be a string or a function that receives the matched pattern and must return the replacement as a string or iodata.</source>
          <target state="translated">&lt;code&gt;replacement&lt;/code&gt; 문자열 또는 유사한 패턴을 수신하고, 문자열 또는 iodata로 여분을 반환해야 함수일 수있다.</target>
        </trans-unit>
        <trans-unit id="9c0458fa683a21c30d6bb8dd696e33377e0fc149" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;rescue&lt;/code&gt; clause is used to handle exceptions while the &lt;code&gt;catch&lt;/code&gt; clause can be used to catch thrown values and exits. The &lt;code&gt;else&lt;/code&gt; clause can be used to control flow based on the result of the expression. &lt;code&gt;catch&lt;/code&gt;, &lt;code&gt;rescue&lt;/code&gt;, and &lt;code&gt;else&lt;/code&gt; clauses work based on pattern matching (similar to the &lt;code&gt;case&lt;/code&gt; special form).</source>
          <target state="translated">&lt;code&gt;rescue&lt;/code&gt; 절은 동안 예외를 처리하는 데 사용됩니다 &lt;code&gt;catch&lt;/code&gt; 절을 캐치 던져 값과 종료에 사용할 수 있습니다. &lt;code&gt;else&lt;/code&gt; 절 식의 결과에 기초하여 흐름 제어하는데 사용될 수있다. &lt;code&gt;catch&lt;/code&gt; , &lt;code&gt;rescue&lt;/code&gt; 및 &lt;code&gt;else&lt;/code&gt; 절은 패턴 일치 ( &lt;code&gt;case&lt;/code&gt; 특수 양식 과 유사)를 기반으로 작동 합니다.</target>
        </trans-unit>
        <trans-unit id="8d1df58d3bea703fd1bbf8c012df285de49b968d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;setup_all&lt;/code&gt; callbacks are invoked only once per module, before any test is run. All &lt;code&gt;setup&lt;/code&gt; callbacks are run before each test. No callback is run if the test case has no tests or all tests have been filtered out.</source>
          <target state="translated">&lt;code&gt;setup_all&lt;/code&gt; 의 모든 테스트를 실행하기 전에 콜백은 오직 모듈 당 한 번만 호출됩니다. 모든 &lt;code&gt;setup&lt;/code&gt; 콜백은 각 테스트 전에 실행됩니다. 테스트 케이스에 테스트가 없거나 모든 테스트가 필터링 된 경우 콜백이 실행되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="bd0f9431cca0c37985b6fe072752b25bee336f01" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;size&lt;/code&gt; value returned by this function is used for boundary checks, therefore it is extremely important that this function only returns &lt;code&gt;:ok&lt;/code&gt; if retrieving the &lt;code&gt;size&lt;/code&gt; of the &lt;code&gt;enumerable&lt;/code&gt; is cheap, fast and takes constant time. Otherwise the simplest of operations, such as &lt;code&gt;Enum.at(enumerable, 0)&lt;/code&gt;, will become too expensive.</source>
          <target state="translated">&lt;code&gt;size&lt;/code&gt; 이 함수에 의해 반환되는 값은 따라서 매우 중요하다, 경계 확인을 위해 사용되는이 기능에만 반환 &lt;code&gt;:ok&lt;/code&gt; 검색하는 경우 &lt;code&gt;size&lt;/code&gt; 의 &lt;code&gt;enumerable&lt;/code&gt; 빠르고 저렴하고 일정 시간이 걸립니다. 그렇지 않으면 &lt;code&gt;Enum.at(enumerable, 0)&lt;/code&gt; 과 같은 가장 간단한 작업 이 너무 비쌉니다.</target>
        </trans-unit>
        <trans-unit id="c3101c570b674a9ec75b76ebada532649060afec" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;spec&lt;/code&gt; consists of a list of three part tuples, in the shape of &lt;code&gt;[{match_pattern, guards, body}]&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;spec&lt;/code&gt; 형상으로 세 부분 튜플들의 목록으로 구성 &lt;code&gt;[{match_pattern, guards, body}]&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="135f720ae9d7a6885e26e8bce732a1ea91412353" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;start&lt;/code&gt; position is a number &lt;code&gt;&amp;gt;= 0&lt;/code&gt; and guaranteed to exist in the &lt;code&gt;enumerable&lt;/code&gt;. The length is a number &lt;code&gt;&amp;gt;= 1&lt;/code&gt; in a way that &lt;code&gt;start + length &amp;lt;= count&lt;/code&gt;, where &lt;code&gt;count&lt;/code&gt; is the maximum amount of elements in the enumerable.</source>
          <target state="translated">&lt;code&gt;start&lt;/code&gt; 위치가 번호 &lt;code&gt;&amp;gt;= 0&lt;/code&gt; 및 존재 보장 &lt;code&gt;enumerable&lt;/code&gt; . 길이는 &lt;code&gt;start + length &amp;lt;= count&lt;/code&gt; 와 같은 방식으로 숫자 &lt;code&gt;&amp;gt;= 1&lt;/code&gt; 이며 , 여기서 &lt;code&gt;count&lt;/code&gt; 는 열거 가능한 최대 요소 수입니다.</target>
        </trans-unit>
        <trans-unit id="e168d9178d44f7f46283a9cdf56615be6a7637ea" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;start_link/1&lt;/code&gt; (or a custom) is then called for each child process. The &lt;code&gt;start_link/1&lt;/code&gt; function must return &lt;code&gt;{:ok, pid}&lt;/code&gt; where &lt;code&gt;pid&lt;/code&gt; is the process identifier of a new process that is linked to the supervisor. The child process usually starts its work by executing the &lt;a href=&quot;#c:init/1&quot;&gt;&lt;code&gt;init/1&lt;/code&gt;&lt;/a&gt; callback. Generally speaking, the &lt;code&gt;init&lt;/code&gt; callback is where we initialize and configure the child process.</source>
          <target state="translated">&lt;code&gt;start_link/1&lt;/code&gt; (또는 사용자 정의)은 다음 각 자식 프로세스라고합니다. &lt;code&gt;start_link/1&lt;/code&gt; 함수를 반환해야합니다 &lt;code&gt;{:ok, pid}&lt;/code&gt; 여기서 &lt;code&gt;pid&lt;/code&gt; 는 감독자에 연결된 새로운 프로세스의 프로세스 ID입니다. 자식 프로세스는 보통 &lt;a href=&quot;#c:init/1&quot;&gt; &lt;code&gt;init/1&lt;/code&gt; &lt;/a&gt; 콜백 을 실행하여 작업을 시작합니다 . 일반적으로 &lt;code&gt;init&lt;/code&gt; 콜백은 자식 프로세스를 초기화하고 구성하는 곳입니다.</target>
        </trans-unit>
        <trans-unit id="a8a0cec068e183c964ba134c5b70d885df25681c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;start_supervised!&lt;/code&gt; function was injected into our test module by &lt;code&gt;use ExUnit.Case&lt;/code&gt;. It does the job of starting the &lt;code&gt;KV.Registry&lt;/code&gt; process, by calling its &lt;code&gt;start_link/1&lt;/code&gt; function. The advantage of using &lt;code&gt;start_supervised!&lt;/code&gt; is that ExUnit will guarantee that the registry process will be shutdown &lt;strong&gt;before&lt;/strong&gt; the next test starts. In other words, it helps guarantee that the state of one test is not going to interfere with the next one in case they depend on shared resources.</source>
          <target state="translated">&lt;code&gt;start_supervised!&lt;/code&gt; 함수는 &lt;code&gt;use ExUnit.Case&lt;/code&gt; 를 사용하여 테스트 모듈에 주입되었습니다 . &lt;code&gt;KV.Registry&lt;/code&gt; &lt;code&gt;start_link/1&lt;/code&gt; 함수를 호출 하여 KV.Registry 프로세스 를 시작하는 작업을 수행합니다. &lt;code&gt;start_supervised!&lt;/code&gt; 사용의 장점 ! ExUnit은 다음 테스트가 시작 &lt;strong&gt;되기 전에&lt;/strong&gt; 레지스트리 프로세스가 종료되도록 보장 합니다. 다시 말해, 한 테스트 상태가 공유 리소스에 의존하는 경우 다음 테스트를 방해하지 않도록 보장하는 데 도움이됩니다.</target>
        </trans-unit>
        <trans-unit id="7c3b0210439efc565cc631c8fa0e308643197cf7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;string()&lt;/code&gt; type</source>
          <target state="translated">&lt;code&gt;string()&lt;/code&gt; 타입</target>
        </trans-unit>
        <trans-unit id="61ebcef3a8537f672d50ed7bff3d6db73d860578" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;struct&lt;/code&gt; argument may be an atom (which defines &lt;code&gt;defstruct&lt;/code&gt;) or a &lt;code&gt;struct&lt;/code&gt; itself. The second argument is any &lt;a href=&quot;enumerable&quot;&gt;&lt;code&gt;Enumerable&lt;/code&gt;&lt;/a&gt; that emits two-element tuples (key-value pairs) during enumeration.</source>
          <target state="translated">&lt;code&gt;struct&lt;/code&gt; 인수 (정의 원자 수있다 &lt;code&gt;defstruct&lt;/code&gt; ) 또는 &lt;code&gt;struct&lt;/code&gt; 자체. 두 번째 인수는 열거하는 동안 두 요소 튜플 (키-값 쌍)을 방출 하는 &lt;a href=&quot;enumerable&quot;&gt; &lt;code&gt;Enumerable&lt;/code&gt; &lt;/a&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="3ca4af46f233ac35dc3b79485d62ec51b88145af" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;subject&lt;/code&gt; is always a string.</source>
          <target state="translated">&lt;code&gt;subject&lt;/code&gt; 항상 문자열입니다.</target>
        </trans-unit>
        <trans-unit id="fa2ecf30353c15851b99330eab13deee5216e86a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;supervisor&lt;/code&gt; must be a reference as defined in &lt;a href=&quot;supervisor&quot;&gt;&lt;code&gt;Supervisor&lt;/code&gt;&lt;/a&gt;. The task will still be linked to the caller, see &lt;a href=&quot;task#async/3&quot;&gt;&lt;code&gt;Task.async/3&lt;/code&gt;&lt;/a&gt; for more information and &lt;a href=&quot;#async_nolink/2&quot;&gt;&lt;code&gt;async_nolink/2&lt;/code&gt;&lt;/a&gt; for a non-linked variant.</source>
          <target state="translated">&lt;code&gt;supervisor&lt;/code&gt; 에 정의 된 참조 여야 &lt;a href=&quot;supervisor&quot;&gt; &lt;code&gt;Supervisor&lt;/code&gt; &lt;/a&gt; . 작업은 여전히 ​​호출자에게 연결됩니다. 자세한 내용 은 &lt;a href=&quot;task#async/3&quot;&gt; &lt;code&gt;Task.async/3&lt;/code&gt; &lt;/a&gt; 및 연결되지 않은 변형의 경우 &lt;a href=&quot;#async_nolink/2&quot;&gt; &lt;code&gt;async_nolink/2&lt;/code&gt; &lt;/a&gt; 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="549a87864f7a5407aab555d12f030b23c5278a92" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;supervisor&lt;/code&gt; must be a reference as defined in &lt;a href=&quot;supervisor&quot;&gt;&lt;code&gt;Supervisor&lt;/code&gt;&lt;/a&gt;. The task won't be linked to the caller, see &lt;a href=&quot;task#async/3&quot;&gt;&lt;code&gt;Task.async/3&lt;/code&gt;&lt;/a&gt; for more information.</source>
          <target state="translated">&lt;code&gt;supervisor&lt;/code&gt; 에 정의 된 참조 여야 &lt;a href=&quot;supervisor&quot;&gt; &lt;code&gt;Supervisor&lt;/code&gt; &lt;/a&gt; . 작업은 호출자와 연결되지 않습니다 . 자세한 내용 은 &lt;a href=&quot;task#async/3&quot;&gt; &lt;code&gt;Task.async/3&lt;/code&gt; &lt;/a&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="bc1957bc0923712dab3fe287b0e8df3bec3ec39a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;test&lt;/code&gt; macro</source>
          <target state="translated">&lt;code&gt;test&lt;/code&gt; 매크로</target>
        </trans-unit>
        <trans-unit id="6bf883ffd229719baaf3e026049bc07e3e3fdc26" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;type&lt;/code&gt; argument passed to &lt;a href=&quot;#c:start/2&quot;&gt;&lt;code&gt;start/2&lt;/code&gt;&lt;/a&gt; is usually &lt;code&gt;:normal&lt;/code&gt; unless in a distributed setup where application takeovers and failovers are configured. Distributed applications are beyond the scope of this documentation.</source>
          <target state="translated">&lt;code&gt;type&lt;/code&gt; 인수는 전달 &lt;a href=&quot;#c:start/2&quot;&gt; &lt;code&gt;start/2&lt;/code&gt; &lt;/a&gt; 일반적으로 &lt;code&gt;:normal&lt;/code&gt; 응용 프로그램의 인수 및 장애 조치가 구성되는 경우 분산 설치에서 제외하고. 분산 응용 프로그램은이 설명서에서 다루지 않습니다.</target>
        </trans-unit>
        <trans-unit id="69149411f0751c47ab43a2cb8ee2352867ce8c60" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;type&lt;/code&gt; argument specifies the type of the application:</source>
          <target state="translated">&lt;code&gt;type&lt;/code&gt; 인수는 응용 프로그램의 유형을 지정합니다 :</target>
        </trans-unit>
        <trans-unit id="f6663df984e95662866d3ab67e965809a6b673af" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;update_in/2&lt;/code&gt; macro is similar but allows us to pass a function that controls how the value changes. For example, let&amp;rsquo;s remove &amp;ldquo;Clojure&amp;rdquo; from Mary&amp;rsquo;s list of languages:</source>
          <target state="translated">&lt;code&gt;update_in/2&lt;/code&gt; 매크로는 비슷하지만 컨트롤 값을 변경하는 방법을하는 기능을 전달할 수있게 해준다. 예를 들어 Mary의 언어 목록에서 &quot;Clojure&quot;를 제거하십시오.</target>
        </trans-unit>
        <trans-unit id="8f6feff517dde91abd98ddcc94fc5f8ee947ce68" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;use&lt;/code&gt; macro is frequently used as an extension point. This means that, when you &lt;code&gt;use&lt;/code&gt; a module &lt;code&gt;FooBar&lt;/code&gt;, you allow that module to inject &lt;em&gt;any&lt;/em&gt; code in the current module, such as importing itself or other modules, defining new functions, setting a module state, etc.</source>
          <target state="translated">&lt;code&gt;use&lt;/code&gt; 매크로는 자주 확장 지점으로 사용됩니다. 즉, &lt;code&gt;FooBar&lt;/code&gt; 모듈 을 &lt;code&gt;use&lt;/code&gt; 하면 해당 모듈이 자체 또는 다른 모듈 가져 오기, 새 함수 정의, 모듈 상태 설정 등과 같은 현재 모듈에 코드 를 삽입 &lt;em&gt;할 수&lt;/em&gt; 있습니다.&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="443668287cbb8f84b2664ce3f01400a9552185b9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;utf8&lt;/code&gt;, &lt;code&gt;utf16&lt;/code&gt;, and &lt;code&gt;utf32&lt;/code&gt; types are for Unicode code points. They can also be applied to literal strings and charlists:</source>
          <target state="translated">&lt;code&gt;utf8&lt;/code&gt; , &lt;code&gt;utf16&lt;/code&gt; 및 &lt;code&gt;utf32&lt;/code&gt; 유형은 유니 코드 코드 포인트를위한 것입니다. 리터럴 문자열과 문자 목록에도 적용 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="766b25b711b24bf14734bf86264816b50201e5a8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;xref&lt;/code&gt; task expects a mode as first argument:</source>
          <target state="translated">&lt;code&gt;xref&lt;/code&gt; 작업은 첫 번째 인수로 모드를 기대한다 :</target>
        </trans-unit>
        <trans-unit id="848f828061a57fea28024ac6791811ddcc578da8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;{module, function}&lt;/code&gt; will be invoked with four arguments:</source>
          <target state="translated">&lt;code&gt;{module, function}&lt;/code&gt; 사 개 인수와 함께 호출됩니다 :</target>
        </trans-unit>
        <trans-unit id="6bb6f7b835bb4273bfb73268cdb830e1eaa1b0c7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;|&amp;gt;&lt;/code&gt; operator is mostly useful when there is a desire to execute a series of operations resembling a pipeline:</source>
          <target state="translated">&lt;code&gt;|&amp;gt;&lt;/code&gt; 파이프 라인을 닮은 일련의 작업을 실행하는 욕구가있을 때 운전자는 대부분 유용합니다 :</target>
        </trans-unit>
        <trans-unit id="e7c15f5a444d0eb501f58185ab4ff6cc148686d3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;|&amp;gt;&lt;/code&gt; symbol used in the snippet above is the &lt;strong&gt;pipe operator&lt;/strong&gt;: it takes the output from the expression on its left side and passes it as the first argument to the function call on its right side. It&amp;rsquo;s similar to the Unix &lt;code&gt;|&lt;/code&gt; operator. Its purpose is to highlight the data being transformed by a series of functions. To see how it can make the code cleaner, have a look at the example above rewritten without using the &lt;code&gt;|&amp;gt;&lt;/code&gt; operator:</source>
          <target state="translated">&lt;code&gt;|&amp;gt;&lt;/code&gt; 상기 코드에서 사용되는 기호가있다 &lt;strong&gt;파이프 연산자&lt;/strong&gt; : 그것의 왼쪽 표현식의 출력을 취하고, 우측 함수 호출에 첫 번째 인수로서 전달한다. 유닉스와 비슷합니다. &lt;code&gt;|&lt;/code&gt; 운영자. 그 목적은 일련의 기능에 의해 변환되는 데이터를 강조하는 것입니다. 코드를 더 깔끔하게 만드는 방법을 보려면 &lt;code&gt;|&amp;gt;&lt;/code&gt; 연산자를 사용하지 않고 다시 작성된 위의 예를 살펴보십시오 .</target>
        </trans-unit>
        <trans-unit id="de83fadff1ba2a72273182089ea2a050990085bb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;~c&lt;/code&gt; sigil is useful for generating char lists that contain single quotes:</source>
          <target state="translated">&lt;code&gt;~c&lt;/code&gt; 시길는 작은 따옴표를 포함하는 문자 목록을 생성하는 데 유용합니다 :</target>
        </trans-unit>
        <trans-unit id="281b4a2fc5fd64a2cedf95577018a34d44729cd7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;~s&lt;/code&gt; sigil is used to generate strings, like double quotes are. The &lt;code&gt;~s&lt;/code&gt; sigil is useful when a string contains double quotes:</source>
          <target state="translated">&lt;code&gt;~s&lt;/code&gt; 따옴표가있는 것처럼시길는 문자열을 생성하는 데 사용됩니다. &lt;code&gt;~s&lt;/code&gt; 문자열을 큰 따옴표가 포함되어있는 경우시길 유용합니다 :</target>
        </trans-unit>
        <trans-unit id="1b5ce296d52d56b387e6952a8ac2c01f7f747b55" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;~w&lt;/code&gt; sigil also accepts the &lt;code&gt;c&lt;/code&gt;, &lt;code&gt;s&lt;/code&gt; and &lt;code&gt;a&lt;/code&gt; modifiers (for char lists, strings, and atoms, respectively), which specify the data type of the elements of the resulting list:</source>
          <target state="translated">&lt;code&gt;~w&lt;/code&gt; 인장 또한 허용 &lt;code&gt;c&lt;/code&gt; , &lt;code&gt;s&lt;/code&gt; 및 결과리스트의 요소의 데이터 유형을 지정 (각각 문자 목록, 문자열 및 원자에 대한) 개질제 : &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="9578a70bcff0146fc766139c2fb2691deada995b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;~w&lt;/code&gt; sigil is used to generate lists of words (&lt;em&gt;words&lt;/em&gt; are just regular strings). Inside the &lt;code&gt;~w&lt;/code&gt; sigil, words are separated by whitespace.</source>
          <target state="translated">&lt;code&gt;~w&lt;/code&gt; 시길는 단어의 목록을 (생성하는 데 사용되는 &lt;em&gt;단어는&lt;/em&gt; 그냥 평범한 문자열). 내부 &lt;code&gt;~w&lt;/code&gt; 시길, 단어는 공백으로 구분됩니다.</target>
        </trans-unit>
        <trans-unit id="57c0bcba93565ebcb726bbcf9fe5e3a854d68664" translate="yes" xml:space="preserve">
          <source>The AST for a pipeline (a sequence of applications of &lt;code&gt;|&amp;gt;&lt;/code&gt;) is similar to the AST of a sequence of binary operators or function applications: the top-level expression is the right-most &lt;code&gt;:|&amp;gt;&lt;/code&gt; (which is the last one to be executed), and its left-hand and right-hand sides are its arguments:</source>
          <target state="translated">파이프 라인에 대한 AST (의 응용 프로그램의 순서는 &lt;code&gt;|&amp;gt;&lt;/code&gt; ) 이항 연산자 또는 함수의 응용 프로그램의 시퀀스의 AST와 유사하다 : 최상위 표현이 가장 오른쪽 &lt;code&gt;:|&amp;gt;&lt;/code&gt; (될 수있는 마지막 하나입니다 실행) 및 왼쪽과 오른쪽이 인수입니다.</target>
        </trans-unit>
        <trans-unit id="22673f1e15930ac4a2bce8fc889928e4bf1f922d" translate="yes" xml:space="preserve">
          <source>The BREAK menu</source>
          <target state="translated">BREAK 메뉴</target>
        </trans-unit>
        <trans-unit id="98504b06eb756100aa8d0fe1b8a5bed8131e1638" translate="yes" xml:space="preserve">
          <source>The Client API</source>
          <target state="translated">클라이언트 API</target>
        </trans-unit>
        <trans-unit id="087349ac5d28e5bd9b6d72d6f50436cef7a3d724" translate="yes" xml:space="preserve">
          <source>The Date struct contains the fields year, month, day and calendar. New dates can be built with the &lt;a href=&quot;#new/3&quot;&gt;&lt;code&gt;new/3&lt;/code&gt;&lt;/a&gt; function or using the &lt;code&gt;~D&lt;/code&gt; (see &lt;a href=&quot;kernel#sigil_D/2&quot;&gt;&lt;code&gt;Kernel.sigil_D/2&lt;/code&gt;&lt;/a&gt;) sigil:</source>
          <target state="translated">Date 구조체에는 연도, 월, 일 및 달력 필드가 포함됩니다. &lt;a href=&quot;#new/3&quot;&gt; &lt;code&gt;new/3&lt;/code&gt; &lt;/a&gt; 함수를 사용하거나 &lt;code&gt;~D&lt;/code&gt; ( &lt;a href=&quot;kernel#sigil_D/2&quot;&gt; &lt;code&gt;Kernel.sigil_D/2&lt;/code&gt; &lt;/a&gt; 참조 )시길을 사용하여 새 날짜를 만들 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="60739ce280ae99907b36b37adf6ef92a05aaedd6" translate="yes" xml:space="preserve">
          <source>The Elixir AST</source>
          <target state="translated">엘릭서 AST</target>
        </trans-unit>
        <trans-unit id="b354da44a5ccc03b14d8e9e9f977406245074d69" translate="yes" xml:space="preserve">
          <source>The Elixir guides are also available in EPUB format:</source>
          <target state="translated">엘릭서 가이드는 EPUB 형식으로도 제공됩니다.</target>
        </trans-unit>
        <trans-unit id="3b3b88c39f2093f79b409f882370622044ce70ae" translate="yes" xml:space="preserve">
          <source>The Erlang compiler can provide a number of optimizations on binary creation and matching. To see optimization output, set the &lt;code&gt;bin_opt_info&lt;/code&gt; compiler option:</source>
          <target state="translated">Erlang 컴파일러는 이진 생성 및 일치에 대한 여러 가지 최적화를 제공 할 수 있습니다. 최적화 출력을 보려면 &lt;code&gt;bin_opt_info&lt;/code&gt; 컴파일러 옵션을 설정하십시오 .</target>
        </trans-unit>
        <trans-unit id="7953816f5ef9843a5ed4589ec36cf1a54fdf799d" translate="yes" xml:space="preserve">
          <source>The GenServer behaviour abstracts the common client-server interaction. Developers are only required to implement the callbacks and functionality they are interested in.</source>
          <target state="translated">GenServer 동작은 일반적인 클라이언트-서버 상호 작용을 추상화합니다. 개발자는 원하는 콜백 및 기능 만 구현하면됩니다.</target>
        </trans-unit>
        <trans-unit id="3d66e19aeb4f8b03c43c83bf06d0a7f010db09c4" translate="yes" xml:space="preserve">
          <source>The GenServer name</source>
          <target state="translated">GenServer 이름</target>
        </trans-unit>
        <trans-unit id="4c83968c19110a694ab1613224a8a36aaf6e3f41" translate="yes" xml:space="preserve">
          <source>The IEx.Server.</source>
          <target state="translated">IEx.Server.</target>
        </trans-unit>
        <trans-unit id="25aef49825211907484d43e756114a0b1fa27f36" translate="yes" xml:space="preserve">
          <source>The ISO calendar has two eras: the current era which starts in year 1 and is defined as era &quot;1&quot;. And a second era for those years less than 1 defined as era &quot;0&quot;.</source>
          <target state="translated">ISO 캘린더에는 두 가지 기간이 있습니다. 현재 연도는 1 년차에 시작하여 &quot;1&quot;로 정의됩니다. 그리고 1 미만의 기간 동안 &quot;0&quot;으로 정의 된 두 번째 시대.</target>
        </trans-unit>
        <trans-unit id="1a856fcbbb476ea67477f19a707dbe002ca4c6dc" translate="yes" xml:space="preserve">
          <source>The Jaro distance metric is designed and best suited for short strings such as person names. Elixir itself uses this function to provide the &quot;did you mean?&quot; functionality. For instance, when you are calling a function in a module and you have a typo in the function name, we attempt to suggest the most similar function name available, if any, based on the &lt;a href=&quot;#jaro_distance/2&quot;&gt;&lt;code&gt;jaro_distance/2&lt;/code&gt;&lt;/a&gt; score.</source>
          <target state="translated">Jaro 거리 측정법은 사람 이름과 같은 짧은 문자열에 가장 적합합니다. 엘릭서 자체는이 기능을 사용하여 &quot;의미 있습니까?&quot; 기능. 예를 들어, 모듈에서 함수를 호출 할 때 함수 이름에 오타가있는 경우 &lt;a href=&quot;#jaro_distance/2&quot;&gt; &lt;code&gt;jaro_distance/2&lt;/code&gt; &lt;/a&gt; 점수를 기반으로 사용 가능한 가장 유사한 함수 이름을 제안하려고 시도합니다 .</target>
        </trans-unit>
        <trans-unit id="37173c596301d8be8275b8b1f500a183f87ab7fa" translate="yes" xml:space="preserve">
          <source>The Mix build tool can also be used to start your applications. For example, &lt;a href=&quot;https://hexdocs.pm/mix/Mix.Tasks.Test.html&quot;&gt;&lt;code&gt;mix test&lt;/code&gt;&lt;/a&gt; automatically starts your application dependencies and your application itself before your test runs. &lt;code&gt;mix run --no-halt&lt;/code&gt; boots your current project and can be used to start a long running system. See &lt;a href=&quot;https://hexdocs.pm/mix/Mix.Tasks.Run.html&quot;&gt;&lt;code&gt;mix help run&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">믹스 빌드 도구를 사용하여 응용 프로그램을 시작할 수도 있습니다. 예를 들어, &lt;a href=&quot;https://hexdocs.pm/mix/Mix.Tasks.Test.html&quot;&gt; &lt;code&gt;mix test&lt;/code&gt; &lt;/a&gt; 는 테스트가 실행되기 전에 애플리케이션 종속성 및 애플리케이션 자체를 자동으로 시작합니다. &lt;code&gt;mix run --no-halt&lt;/code&gt; 는 현재 프로젝트를 부팅하며 장기 실행 시스템을 시작하는 데 사용할 수 있습니다. &lt;a href=&quot;https://hexdocs.pm/mix/Mix.Tasks.Run.html&quot;&gt; &lt;code&gt;mix help run&lt;/code&gt; &lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="ed1904da080bbb46fb65f0901cdd39a58e1d853d" translate="yes" xml:space="preserve">
          <source>The Mix compiler automatically looks for calls to deprecated modules and emit warnings during compilation, computed via &lt;code&gt;mix xref warnings&lt;/code&gt;.</source>
          <target state="translated">믹스 컴파일러는 자동으로 더 이상 사용되지 않는 모듈에 대한 호출을 찾고 컴파일 중에 &lt;code&gt;mix xref warnings&lt;/code&gt; 를 통해 계산 된 경고를 발생 시킵니다.</target>
        </trans-unit>
        <trans-unit id="be1eb0ffc63d3de62778534778d3195fa7ba19b5" translate="yes" xml:space="preserve">
          <source>The NaiveDateTime struct contains the fields year, month, day, hour, minute, second, microsecond and calendar. New naive datetimes can be built with the &lt;a href=&quot;#new/2&quot;&gt;&lt;code&gt;new/2&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#new/8&quot;&gt;&lt;code&gt;new/8&lt;/code&gt;&lt;/a&gt; functions or using the &lt;code&gt;~N&lt;/code&gt; (see &lt;a href=&quot;kernel#sigil_N/2&quot;&gt;&lt;code&gt;Kernel.sigil_N/2&lt;/code&gt;&lt;/a&gt;) sigil:</source>
          <target state="translated">NaiveDateTime 구조체는 연도, 월, 일,시, 분, 초, 마이크로 초 및 달력 필드를 포함합니다. 새로운 순진 날짜 시간은 &lt;a href=&quot;#new/2&quot;&gt; &lt;code&gt;new/2&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;#new/8&quot;&gt; &lt;code&gt;new/8&lt;/code&gt; &lt;/a&gt; 함수를 사용하거나 &lt;code&gt;~N&lt;/code&gt; ( &lt;a href=&quot;kernel#sigil_N/2&quot;&gt; &lt;code&gt;Kernel.sigil_N/2&lt;/code&gt; &lt;/a&gt; 참조 )시길을 사용하여 만들 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="68ea22c150e9e8bf3b5e486f34ccdf3da6885051" translate="yes" xml:space="preserve">
          <source>The Plug library also allows developers to define their own plugs which can be run in a web server:</source>
          <target state="translated">또한 플러그 라이브러리를 통해 개발자는 웹 서버에서 실행할 수있는 자체 플러그를 정의 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a12ef86cf46c7d5f545c70ee0f3e00bac2b5a15b" translate="yes" xml:space="preserve">
          <source>The Supervisor name</source>
          <target state="translated">감독자 이름</target>
        </trans-unit>
        <trans-unit id="ec4b01d7b2161ab93486a9f17a632dd403411fb3" translate="yes" xml:space="preserve">
          <source>The Task struct.</source>
          <target state="translated">작업 구조.</target>
        </trans-unit>
        <trans-unit id="5c4c62b39d79d7cb27a5185a0a6601bdd97a3708" translate="yes" xml:space="preserve">
          <source>The Task type.</source>
          <target state="translated">작업 유형</target>
        </trans-unit>
        <trans-unit id="3b4c615274399f80e52f24988cf891d5bac9928c" translate="yes" xml:space="preserve">
          <source>The Time struct contains the fields hour, minute, second and microseconds. New times can be built with the &lt;a href=&quot;#new/4&quot;&gt;&lt;code&gt;new/4&lt;/code&gt;&lt;/a&gt; function or using the &lt;code&gt;~T&lt;/code&gt; (see &lt;a href=&quot;kernel#sigil_T/2&quot;&gt;&lt;code&gt;Kernel.sigil_T/2&lt;/code&gt;&lt;/a&gt;) sigil:</source>
          <target state="translated">시간 구조체에는 필드시, 분, 초 및 마이크로 초가 포함됩니다. &lt;a href=&quot;#new/4&quot;&gt; &lt;code&gt;new/4&lt;/code&gt; &lt;/a&gt; 함수를 사용하거나 &lt;code&gt;~T&lt;/code&gt; ( &lt;a href=&quot;kernel#sigil_T/2&quot;&gt; &lt;code&gt;Kernel.sigil_T/2&lt;/code&gt; &lt;/a&gt; 참조 )시길을 사용하여 새로운 시간을 만들 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="8474ee41c99d01d2c859c45e3ba20cf759140dae" translate="yes" xml:space="preserve">
          <source>The UTF-8 encoding is self-synchronizing. This means that if malformed data (i.e., data that is not possible according to the definition of the encoding) is encountered, only one code point needs to be rejected.</source>
          <target state="translated">UTF-8 인코딩은 자체 동기화됩니다. 즉, 잘못된 데이터 (즉, 인코딩 정의에 따라 불가능한 데이터)가 발생하면 하나의 코드 포인트 만 거부하면됩니다.</target>
        </trans-unit>
        <trans-unit id="af4cd337ec1852f0dfb035c5a67522bde05e43a9" translate="yes" xml:space="preserve">
          <source>The Unicode standard assigns code points to many of the characters we know. For example, the letter &lt;code&gt;a&lt;/code&gt; has code point &lt;code&gt;97&lt;/code&gt; while the letter &lt;code&gt;ł&lt;/code&gt; has code point &lt;code&gt;322&lt;/code&gt;. When writing the string &lt;code&gt;&quot;hełło&quot;&lt;/code&gt; to disk, we need to convert this sequence of characters to bytes. If we adopted a rule that said one byte represents one code point, we wouldn&amp;rsquo;t be able to write &lt;code&gt;&quot;hełło&quot;&lt;/code&gt;, because it uses the code point &lt;code&gt;322&lt;/code&gt; for &lt;code&gt;ł&lt;/code&gt;, and one byte can only represent a number from &lt;code&gt;0&lt;/code&gt; to &lt;code&gt;255&lt;/code&gt;. But of course, given you can actually read &lt;code&gt;&quot;hełło&quot;&lt;/code&gt; on your screen, it must be represented &lt;em&gt;somehow&lt;/em&gt;. That&amp;rsquo;s where encodings come in.</source>
          <target state="translated">유니 코드 표준은 우리가 알고있는 많은 문자에 코드 포인트를 할당합니다. 예를 들어, 문자 &lt;code&gt;a&lt;/code&gt; 에는 코드 포인트 &lt;code&gt;97&lt;/code&gt; 이 있고 문자 &lt;code&gt;ł&lt;/code&gt; 에는 코드 포인트 &lt;code&gt;322&lt;/code&gt; 가 있습니다. 문자열 &lt;code&gt;&quot;hełło&quot;&lt;/code&gt; 를 디스크에 쓸 때이 문자 시퀀스를 바이트로 변환해야합니다. 만약 우리가 1 바이트가 하나의 코드 포인트를 나타내는 규칙을 채택했다면, &lt;code&gt;&quot;hełło&quot;&lt;/code&gt; 는 &lt;code&gt;ł&lt;/code&gt; 에 대한 코드 포인트 &lt;code&gt;322&lt;/code&gt; 를 사용 하고 1 바이트는 &lt;code&gt;0&lt;/code&gt; 에서 &lt;code&gt;255&lt;/code&gt; 까지의 숫자 만 나타낼 수 있기 때문에 &quot;hełło&quot; 를 쓸 수 없습니다 . 물론, 실제로 화면에서 &lt;code&gt;&quot;hełło&quot;&lt;/code&gt; 를 읽을 수 있다면 반드시 표시해야합니다&lt;em&gt;어떻게 든&lt;/em&gt; . 그것이 인코딩이 들어오는 곳입니다.</target>
        </trans-unit>
        <trans-unit id="2f4916c41c92d9991c4b1a3b6471eb39a20e54f2" translate="yes" xml:space="preserve">
          <source>The User switch command</source>
          <target state="translated">사용자 전환 명령</target>
        </trans-unit>
        <trans-unit id="1a567b978fcdc4da963f5cc140173eaaff0ae789" translate="yes" xml:space="preserve">
          <source>The above example shows the difference; the &lt;code&gt;String&lt;/code&gt; module returns Unicode codepoints, while &lt;code&gt;:binary&lt;/code&gt; deals with raw data bytes.</source>
          <target state="translated">위의 예는 차이점을 보여줍니다. &lt;code&gt;String&lt;/code&gt; 모듈 반면, 유니 코드 코드 포인트를 반환 &lt;code&gt;:binary&lt;/code&gt; 원시 데이터 바이트를 다룬다.</target>
        </trans-unit>
        <trans-unit id="3a294edc39ba298dd2fbf7c3e29c2a6c5831e0fe" translate="yes" xml:space="preserve">
          <source>The above is treated the same as &lt;code&gt;sum(1, 2, 3)&lt;/code&gt; by the parser.</source>
          <target state="translated">위 의 구문 분석기 는 &lt;code&gt;sum(1, 2, 3)&lt;/code&gt; 과 동일하게 취급 됩니다.</target>
        </trans-unit>
        <trans-unit id="06bc5ff1abf3cc124d1fca8a735f66352777e819" translate="yes" xml:space="preserve">
          <source>The above will open another Graphical User Interface that provides many panes to fully understand and navigate the runtime and your project:</source>
          <target state="translated">위는 런타임과 프로젝트를 완전히 이해하고 탐색 할 수있는 여러 창을 제공하는 또 다른 그래픽 사용자 인터페이스를 엽니 다.</target>
        </trans-unit>
        <trans-unit id="4124955158531615905cdb11c74372fed2efecdc" translate="yes" xml:space="preserve">
          <source>The accepted options are:</source>
          <target state="translated">허용되는 옵션은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="aca7adeb72bb259b777f4c2b15cd9a4f9b4ff5ce" translate="yes" xml:space="preserve">
          <source>The access syntax can also be used with the &lt;a href=&quot;kernel#put_in/2&quot;&gt;&lt;code&gt;Kernel.put_in/2&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;kernel#update_in/2&quot;&gt;&lt;code&gt;Kernel.update_in/2&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;kernel#get_and_update_in/2&quot;&gt;&lt;code&gt;Kernel.get_and_update_in/2&lt;/code&gt;&lt;/a&gt; macros to allow values to be set in nested data structures:</source>
          <target state="translated">액세스 구문을 &lt;a href=&quot;kernel#put_in/2&quot;&gt; &lt;code&gt;Kernel.put_in/2&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;kernel#update_in/2&quot;&gt; &lt;code&gt;Kernel.update_in/2&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;kernel#get_and_update_in/2&quot;&gt; &lt;code&gt;Kernel.get_and_update_in/2&lt;/code&gt; &lt;/a&gt; 매크로 와 함께 사용하여 중첩 된 데이터 구조에서 값을 설정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="243c0eadcb33ec262a94b0246c4ece1f117a3666" translate="yes" xml:space="preserve">
          <source>The access syntax is represented as a call to &lt;a href=&quot;access#get/2&quot;&gt;&lt;code&gt;Access.get/2&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">액세스 구문은 &lt;a href=&quot;access#get/2&quot;&gt; &lt;code&gt;Access.get/2&lt;/code&gt; 에&lt;/a&gt; 대한 호출로 표시됩니다 .</target>
        </trans-unit>
        <trans-unit id="4b8d2c8f5f09f671794f31f1f907968a5ca06aff" translate="yes" xml:space="preserve">
          <source>The accumulator is only calculated when transformation starts. It also allows an after function to be given which is invoked when the stream halts or completes.</source>
          <target state="translated">누산기는 변환이 시작될 때만 계산됩니다. 또한 스트림이 정지하거나 완료 될 때 호출되는 after 함수를 제공 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="231cb19852aaf99a578b488de350325c3dbaf7df" translate="yes" xml:space="preserve">
          <source>The accumulator value for each step.</source>
          <target state="translated">각 단계의 누산기 값입니다.</target>
        </trans-unit>
        <trans-unit id="3f1f1fb598d7730a9ff70812d543d26b95408bb0" translate="yes" xml:space="preserve">
          <source>The advantage of starting a process under the test supervisor is that it is guaranteed to exit before the next test starts. Therefore, you don't need to remove the process at the end of your tests via &lt;a href=&quot;#stop_supervised/1&quot;&gt;&lt;code&gt;stop_supervised/1&lt;/code&gt;&lt;/a&gt;. You only need to use &lt;a href=&quot;#stop_supervised/1&quot;&gt;&lt;code&gt;stop_supervised/1&lt;/code&gt;&lt;/a&gt; if you want to remove a process from the supervision tree in the middle of a test, as simply shutting down the process would cause it to be restarted according to its &lt;code&gt;:restart&lt;/code&gt; value.</source>
          <target state="translated">테스트 감독자에서 프로세스를 시작하면 다음 테스트가 시작되기 전에 프로세스가 종료된다는 장점이 있습니다. 따라서 테스트 &lt;a href=&quot;#stop_supervised/1&quot;&gt; &lt;code&gt;stop_supervised/1&lt;/code&gt; &lt;/a&gt; 통해 프로세스를 제거 할 필요가 없습니다 . 테스트 도중에 감독 트리에서 프로세스를 제거하려는 경우 &lt;a href=&quot;#stop_supervised/1&quot;&gt; &lt;code&gt;stop_supervised/1&lt;/code&gt; &lt;/a&gt; 만 사용해야합니다 . 프로세스를 종료하면 &lt;code&gt;:restart&lt;/code&gt; 값 에 따라 프로세스가 다시 시작됩니다 .</target>
        </trans-unit>
        <trans-unit id="f25d9730409ef1dfe6f5e984f31be4fd99cffcf1" translate="yes" xml:space="preserve">
          <source>The advantage of structs is that they validate that the given keys are part of the defined struct. The example below will fail because there is no key &lt;code&gt;:full_name&lt;/code&gt; in the &lt;code&gt;User&lt;/code&gt; struct:</source>
          <target state="translated">구조체의 장점은 주어진 키가 정의 된 구조체의 일부인지 확인한다는 것입니다. 더 키가 없기 때문에 아래의 예는 실패합니다 &lt;code&gt;:full_name&lt;/code&gt; 에서 &lt;code&gt;User&lt;/code&gt; 구조체 :</target>
        </trans-unit>
        <trans-unit id="83ac1b567e220f667e9d9d2c2f19a5c7705de064" translate="yes" xml:space="preserve">
          <source>The agent name</source>
          <target state="translated">에이전트 이름</target>
        </trans-unit>
        <trans-unit id="850cde34796934da35ab95f25d166c013161b0f7" translate="yes" xml:space="preserve">
          <source>The agent reference</source>
          <target state="translated">에이전트 참조</target>
        </trans-unit>
        <trans-unit id="79d99d2d3b7f3ac280b26b43a51cc435cf66db5f" translate="yes" xml:space="preserve">
          <source>The agent state</source>
          <target state="translated">에이전트 상태</target>
        </trans-unit>
        <trans-unit id="04287ba52642f4b2e9805d3cbb6242221ac4131b" translate="yes" xml:space="preserve">
          <source>The agent's state will be added to the given list of arguments (&lt;code&gt;[%{}]&lt;/code&gt;) as the first argument.</source>
          <target state="translated">에이전트의 상태는 주어진 인수 목록 ( &lt;code&gt;[%{}]&lt;/code&gt; )에 첫 번째 인수로 추가됩니다.</target>
        </trans-unit>
        <trans-unit id="8beb83ba7f5ecd3254d30e564e0d6fb8a2d460e5" translate="yes" xml:space="preserve">
          <source>The algorithm is outlined in the &quot;An O(ND) Difference Algorithm and Its Variations&quot; paper by E. Myers.</source>
          <target state="translated">알고리즘은 E. Myers의 &quot;O (ND) 차이 알고리즘 및 그 변형&quot;논문에 요약되어있다.</target>
        </trans-unit>
        <trans-unit id="3e134324067f32fab468c28c29405fca71811700" translate="yes" xml:space="preserve">
          <source>The algorithm is outlined in the &quot;String Matching with Metric Trees Using an Approximate Distance&quot; paper by Ilaria Bartolini, Paolo Ciaccia, and Marco Patella.</source>
          <target state="translated">이 알고리즘은 Ilaria Bartolini, Paolo Ciaccia 및 Marco Patella의 &quot;대략 거리를 사용한 메트릭 트리와 문자열 일치&quot;백서에 요약되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="e4b130944005218b61f70b8dda4acb83f5f8b422" translate="yes" xml:space="preserve">
          <source>The algorithm is outlined in the &lt;a href=&quot;https://www.unicode.org/reports/tr29/&quot;&gt;Unicode Standard Annex #29, Unicode Text Segmentation&lt;/a&gt;.</source>
          <target state="translated">이 알고리즘은 &lt;a href=&quot;https://www.unicode.org/reports/tr29/&quot;&gt;Unicode Standard Annex # 29, Unicode Text Segmentation에&lt;/a&gt; 요약되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="f9558fd66aceb0ac12811fbd079f3478d2d6d0b6" translate="yes" xml:space="preserve">
          <source>The allowed modes:</source>
          <target state="translated">허용되는 모드 :</target>
        </trans-unit>
        <trans-unit id="22b1bedb9b0e24d713b2164c5c95fdaf0f81ef84" translate="yes" xml:space="preserve">
          <source>The allowed values for &lt;code&gt;flag&lt;/code&gt; are only a subset of those allowed in &lt;a href=&quot;#flag/2&quot;&gt;&lt;code&gt;flag/2&lt;/code&gt;&lt;/a&gt;, namely &lt;code&gt;:save_calls&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;flag&lt;/code&gt; 허용되는 값 은 &lt;a href=&quot;#flag/2&quot;&gt; &lt;code&gt;flag/2&lt;/code&gt; &lt;/a&gt; 허용 된 값 중 &lt;code&gt;:save_calls&lt;/code&gt; . 즉 : save_calls 입니다.</target>
        </trans-unit>
        <trans-unit id="a1284e6a8b509aaab6853404ad966b4c6d0d9c11" translate="yes" xml:space="preserve">
          <source>The amount of functionality in the &lt;a href=&quot;https://hexdocs.pm/elixir/Enum.html&quot;&gt;&lt;code&gt;Enum&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://hexdocs.pm/elixir/Stream.html&quot;&gt;&lt;code&gt;Stream&lt;/code&gt;&lt;/a&gt; modules can be daunting at first, but you will get familiar with them case by case. In particular, focus on the &lt;code&gt;Enum&lt;/code&gt; module first and only move to &lt;code&gt;Stream&lt;/code&gt; for the particular scenarios where laziness is required, to either deal with slow resources or large, possibly infinite, collections.</source>
          <target state="translated">&lt;a href=&quot;https://hexdocs.pm/elixir/Enum.html&quot;&gt; &lt;code&gt;Enum&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;https://hexdocs.pm/elixir/Stream.html&quot;&gt; &lt;code&gt;Stream&lt;/code&gt; &lt;/a&gt; 모듈 의 기능은 처음에는 어려울 수 있지만 경우에 따라 익숙해 질 것입니다. 특히 &lt;code&gt;Enum&lt;/code&gt; 모듈 에 중점을두고 느리게 처리해야하는 특정 시나리오에 대해서만 &lt;code&gt;Stream&lt;/code&gt; 이동하여 느린 리소스 또는 무한대의 대규모 컬렉션을 처리하십시오.</target>
        </trans-unit>
        <trans-unit id="7e8600e30f0a326a12149028f15ee8e6ad16cef8" translate="yes" xml:space="preserve">
          <source>The anonymous function receives 0 arguments, and may return any value.</source>
          <target state="translated">익명 함수는 0 개의 인수를 받고 모든 값을 반환 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="273c2352c55239386071c9f97857464d5b54d531" translate="yes" xml:space="preserve">
          <source>The answer can be returned in any &lt;code&gt;unit&lt;/code&gt; available from &lt;a href=&quot;system#t:time_unit/0&quot;&gt;&lt;code&gt;System.time_unit/0&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">답변은 &lt;a href=&quot;system#t:time_unit/0&quot;&gt; &lt;code&gt;System.time_unit/0&lt;/code&gt; &lt;/a&gt; 에서 사용 가능한 모든 &lt;code&gt;unit&lt;/code&gt; 로 반환 될 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="0c851ccba3a0c5e2913af28fbba1bc5059650f30" translate="yes" xml:space="preserve">
          <source>The answer can be returned in any &lt;code&gt;unit&lt;/code&gt; available from &lt;a href=&quot;system#t:time_unit/0&quot;&gt;&lt;code&gt;System.time_unit/0&lt;/code&gt;&lt;/a&gt;. If the first unit is smaller than the second, a negative number is returned.</source>
          <target state="translated">답변은 &lt;a href=&quot;system#t:time_unit/0&quot;&gt; &lt;code&gt;System.time_unit/0&lt;/code&gt; &lt;/a&gt; 에서 사용 가능한 모든 &lt;code&gt;unit&lt;/code&gt; 로 반환 될 수 있습니다 . 첫 번째 단위가 두 번째 단위보다 작 으면 음수가 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="11872c1546ad5d8d77e3dd6dcf24fe80bdc32569" translate="yes" xml:space="preserve">
          <source>The application callback</source>
          <target state="translated">응용 프로그램 콜백</target>
        </trans-unit>
        <trans-unit id="498cebd5386c08940274d180a46313b584299218" translate="yes" xml:space="preserve">
          <source>The application callback module</source>
          <target state="translated">애플리케이션 콜백 모듈</target>
        </trans-unit>
        <trans-unit id="ce357182db7e39e7d54f85ac0fa8ea1bfe43cdcd" translate="yes" xml:space="preserve">
          <source>The application environment</source>
          <target state="translated">응용 환경</target>
        </trans-unit>
        <trans-unit id="40917bb5c729fef80a4c140a2928d1f7a14bf4d7" translate="yes" xml:space="preserve">
          <source>The application environment can be overridden via the &lt;code&gt;-config&lt;/code&gt; option of &lt;code&gt;erl&lt;/code&gt;, as well as command-line options, as we are going to see below.</source>
          <target state="translated">응용 프로그램 환경 은 아래에서 볼 수 있듯이 명령 줄 옵션뿐만 아니라 &lt;code&gt;erl&lt;/code&gt; 의 &lt;code&gt;-config&lt;/code&gt; 옵션을 통해 재정의 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="37789b75dd5f623e649e47a61f598fab65dfa7b6" translate="yes" xml:space="preserve">
          <source>The application environment should be reserved only for configurations that are truly global, for example, to control your application boot process and its supervision tree.</source>
          <target state="translated">응용 프로그램 환경은 응용 프로그램 부팅 프로세스 및 관리 트리를 제어하기 위해 실제로 전역적인 구성에 대해서만 예약해야합니다.</target>
        </trans-unit>
        <trans-unit id="280a9a5faaec5ff9e8215df748115db28ebee1a0" translate="yes" xml:space="preserve">
          <source>The application is located by analyzing the spec of all loaded applications. Returns &lt;code&gt;nil&lt;/code&gt; if the module is not listed in any application spec.</source>
          <target state="translated">응용 프로그램은로드 된 모든 응용 프로그램의 사양을 분석하여 찾습니다. 모듈이 애플리케이션 사양에 나열되지 않은 경우 &lt;code&gt;nil&lt;/code&gt; 을 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="cc4a58ee1265d5c1fe9173d32bf0ac223249dd85" translate="yes" xml:space="preserve">
          <source>The application lifecycle</source>
          <target state="translated">응용 프로그램 수명주기</target>
        </trans-unit>
        <trans-unit id="143141b825e19c759eb1a18e855e24abed92b957" translate="yes" xml:space="preserve">
          <source>The application resource file</source>
          <target state="translated">응용 프로그램 리소스 파일</target>
        </trans-unit>
        <trans-unit id="e3563cd3d1dfc3ea0fa27f37030c6816eb2657f5" translate="yes" xml:space="preserve">
          <source>The application works as a distributed key-value store. We are going to organize key-value pairs into buckets and distribute those buckets across multiple nodes. We will also build a simple client that allows us to connect to any of those nodes and send requests such as:</source>
          <target state="translated">응용 프로그램은 분산 키-값 저장소로 작동합니다. 키-값 쌍을 버킷으로 구성하고 해당 버킷을 여러 노드에 분산시킬 것입니다. 또한 이러한 노드 중 하나에 연결하고 다음과 같은 요청을 보낼 수있는 간단한 클라이언트를 구축 할 것입니다.</target>
        </trans-unit>
        <trans-unit id="d0f3ead845310ee387fe5a545e6953c55ffb1629" translate="yes" xml:space="preserve">
          <source>The argument can also be a compiled pattern:</source>
          <target state="translated">인수는 컴파일 된 패턴 일 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="591637cab81491d8824a1f871aa68b8d413473f1" translate="yes" xml:space="preserve">
          <source>The argument can be either a variable unquoted or in standard tuple form &lt;code&gt;{name, meta, context}&lt;/code&gt;.</source>
          <target state="translated">인수는 인용되지 않은 변수이거나 표준 튜플 형식 &lt;code&gt;{name, meta, context}&lt;/code&gt; 있습니다.</target>
        </trans-unit>
        <trans-unit id="001d538e8d0cdf963d20a8cda73ecd32223786da" translate="yes" xml:space="preserve">
          <source>The arguments passed to the callbacks are related to the state optionally returned by &lt;a href=&quot;#c:start/2&quot;&gt;&lt;code&gt;start/2&lt;/code&gt;&lt;/a&gt;, and are documented in the section about the callback module above.</source>
          <target state="translated">콜백에 전달 된 인수는 &lt;a href=&quot;#c:start/2&quot;&gt; &lt;code&gt;start/2&lt;/code&gt; &lt;/a&gt; 에서 선택적으로 반환 된 상태와 관련이 있으며 위의 콜백 모듈에 대한 섹션에 설명되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="2a881ae7cb35da41cfdaee7b5069205d1b09ab08" translate="yes" xml:space="preserve">
          <source>The atom encoder is not called for &lt;em&gt;all&lt;/em&gt; atoms that are present in the AST. It won't be invoked for the following atoms:</source>
          <target state="translated">원자 엔코더는 AST에 존재하는 &lt;em&gt;모든&lt;/em&gt; 원자에 대해 요구되는 것은 아닙니다 . 다음 원자에 대해서는 호출되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="b41ad89c98d422fd2e978f100782ecfe3f1da362" translate="yes" xml:space="preserve">
          <source>The attribute values will be available through &lt;code&gt;context.registered&lt;/code&gt;. Registered values are cleared after each &lt;a href=&quot;exunit.case#test/3&quot;&gt;&lt;code&gt;ExUnit.Case.test/3&lt;/code&gt;&lt;/a&gt; similar to &lt;code&gt;@tag&lt;/code&gt;.</source>
          <target state="translated">속성 값은 &lt;code&gt;context.registered&lt;/code&gt; 를 통해 사용 가능합니다 . 등록 된 값은 각 후 삭제됩니다 &lt;a href=&quot;exunit.case#test/3&quot;&gt; &lt;code&gt;ExUnit.Case.test/3&lt;/code&gt; &lt;/a&gt; 유사 &lt;code&gt;@tag&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="8fadbc924b0cd6b0ad53d9ab7f75eafe50d08633" translate="yes" xml:space="preserve">
          <source>The available backends by default are:</source>
          <target state="translated">기본적으로 사용 가능한 백엔드는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="6cce71e8c20ef741ad606617e045711680af943f" translate="yes" xml:space="preserve">
          <source>The available color options are:</source>
          <target state="translated">사용 가능한 색상 옵션은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="6310c4c55c85283101be1a934d0a00206b4f631d" translate="yes" xml:space="preserve">
          <source>The backend needs to be started and running in order to be configured at runtime.</source>
          <target state="translated">런타임에 구성하려면 백엔드를 시작하고 실행해야합니다.</target>
        </trans-unit>
        <trans-unit id="96a787facf19135fb4b200f8b487060672819be8" translate="yes" xml:space="preserve">
          <source>The bag distance is meant to be an efficient approximation of the distance between two strings to quickly rule out strings that are largely different.</source>
          <target state="translated">백 거리는 크게 다른 스트링을 신속하게 배제하기 위해 두 스트링 사이의 거리를 효율적으로 근사하기위한 것입니다.</target>
        </trans-unit>
        <trans-unit id="338ca5e9a146228c6591ce27e258c309b41537d7" translate="yes" xml:space="preserve">
          <source>The basic mechanism for spawning new processes is the auto-imported &lt;code&gt;spawn/1&lt;/code&gt; function:</source>
          <target state="translated">새로운 프로세스를 생성하는 기본 메커니즘은 자동 가져 &lt;code&gt;spawn/1&lt;/code&gt; 기능입니다.</target>
        </trans-unit>
        <trans-unit id="4e7559ee61af701da957bbebc32b89de3be4e12f" translate="yes" xml:space="preserve">
          <source>The behaviour of &lt;a href=&quot;#ceil/2&quot;&gt;&lt;code&gt;ceil/2&lt;/code&gt;&lt;/a&gt; for floats can be surprising. For example:</source>
          <target state="translated">수레에 대한 &lt;a href=&quot;#ceil/2&quot;&gt; &lt;code&gt;ceil/2&lt;/code&gt; &lt;/a&gt; 의 동작은 놀랍습니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="d56bb8e1dfaa2c0603350dcc324ff5c454da55f1" translate="yes" xml:space="preserve">
          <source>The behaviour of &lt;a href=&quot;#floor/2&quot;&gt;&lt;code&gt;floor/2&lt;/code&gt;&lt;/a&gt; for floats can be surprising. For example:</source>
          <target state="translated">수레에 대한 &lt;a href=&quot;#floor/2&quot;&gt; &lt;code&gt;floor/2&lt;/code&gt; &lt;/a&gt; 의 동작은 놀랍습니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="038842fad2e4b3a86e4d5b65bf16dcbffaa55807" translate="yes" xml:space="preserve">
          <source>The behaviour of &lt;a href=&quot;#round/2&quot;&gt;&lt;code&gt;round/2&lt;/code&gt;&lt;/a&gt; for floats can be surprising. For example:</source>
          <target state="translated">float에 대한 &lt;a href=&quot;#round/2&quot;&gt; &lt;code&gt;round/2&lt;/code&gt; &lt;/a&gt; 의 동작은 놀랍습니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="850b8800d7a40702a94f4c6f350b76c00c714c91" translate="yes" xml:space="preserve">
          <source>The behaviour of any expression in a clause is the same as outside. For example, &lt;code&gt;=&lt;/code&gt; will raise a &lt;a href=&quot;matcherror&quot;&gt;&lt;code&gt;MatchError&lt;/code&gt;&lt;/a&gt; instead of returning the non-matched value:</source>
          <target state="translated">절에서 식의 동작은 외부와 동일합니다. 예를 들어 &lt;code&gt;=&lt;/code&gt; 는 일치하지 않는 값을 반환하는 대신 &lt;a href=&quot;matcherror&quot;&gt; &lt;code&gt;MatchError&lt;/code&gt; &lt;/a&gt; 를 발생시킵니다.</target>
        </trans-unit>
        <trans-unit id="2c2089b4c70310731d109bdd4cb28eac8386c5ba" translate="yes" xml:space="preserve">
          <source>The behaviours above are not guaranteed. We may remove or add new rules in the future. The goal of documenting them is to provide better understanding on what to expect from the formatter.</source>
          <target state="translated">위의 동작은 보장되지 않습니다. 향후 새로운 규칙을 제거하거나 추가 할 수 있습니다. 그것들을 문서화하는 목적은 포맷터로부터 무엇을 기대해야하는지에 대한 이해를 높이는 것입니다.</target>
        </trans-unit>
        <trans-unit id="1b5532ea236231522d81c8ef60d96c8157a31b23" translate="yes" xml:space="preserve">
          <source>The best solution is to simply use the explicit module, function, and arguments APIs when working with distributed agents.</source>
          <target state="translated">가장 좋은 솔루션은 분산 에이전트로 작업 할 때 명시 적 모듈, 함수 및 인수 API를 사용하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="230a7e78c26b7490aaeba0ccd0ad9d4d649d4144" translate="yes" xml:space="preserve">
          <source>The best way to get started with your first project is by calling &lt;code&gt;mix new my_project&lt;/code&gt; from the command line.</source>
          <target state="translated">첫 번째 프로젝트를 시작하는 가장 좋은 방법 은 명령 줄에서 &lt;code&gt;mix new my_project&lt;/code&gt; 를 호출하는 것 입니다.</target>
        </trans-unit>
        <trans-unit id="d0bbf418b1f38a55ccb7dde48f0990ed9ed4760a" translate="yes" xml:space="preserve">
          <source>The binary module</source>
          <target state="translated">이진 모듈</target>
        </trans-unit>
        <trans-unit id="0b507e4caeeefa4e12188b817548237116e75e51" translate="yes" xml:space="preserve">
          <source>The booleans &lt;code&gt;true&lt;/code&gt; and &lt;code&gt;false&lt;/code&gt; are also atoms:</source>
          <target state="translated">부울 값 &lt;code&gt;true&lt;/code&gt; 및 &lt;code&gt;false&lt;/code&gt; 도 원자입니다.</target>
        </trans-unit>
        <trans-unit id="173c29727301f1e8ee220ab1adbc4da76be15175" translate="yes" xml:space="preserve">
          <source>The bucket supervisor</source>
          <target state="translated">버킷 관리자</target>
        </trans-unit>
        <trans-unit id="28ca52bc03d0c7c44e235ef531de8f5ba2e83b87" translate="yes" xml:space="preserve">
          <source>The building block of Elixir's AST is a call, such as:</source>
          <target state="translated">Elixir AST의 빌딩 블록은 다음과 같은 호출입니다.</target>
        </trans-unit>
        <trans-unit id="461328f5549d78a8b5fdedc116f07cd5036d784a" translate="yes" xml:space="preserve">
          <source>The building block of an Elixir program is a tuple with three elements. For example, the function call &lt;code&gt;sum(1, 2, 3)&lt;/code&gt; is represented internally as:</source>
          <target state="translated">Elixir 프로그램의 빌딩 블록은 세 가지 요소가있는 튜플입니다. 예를 들어 함수 호출 &lt;code&gt;sum(1, 2, 3)&lt;/code&gt; 은 내부적으로 다음과 같이 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="bb521e80a89a4c39c427f904962402bd53b9f9e8" translate="yes" xml:space="preserve">
          <source>The built-in &lt;a href=&quot;typespecs#built-in-types&quot;&gt;&lt;code&gt;iodata/0&lt;/code&gt;&lt;/a&gt; type is defined in terms of &lt;a href=&quot;typespecs#built-in-types&quot;&gt;&lt;code&gt;iolist/0&lt;/code&gt;&lt;/a&gt;. An IO list is the same as IO data but it doesn't allow for a binary at the top level (but binaries are still allowed in the list itself).</source>
          <target state="translated">는 내장 &lt;a href=&quot;typespecs#built-in-types&quot;&gt; &lt;code&gt;iodata/0&lt;/code&gt; &lt;/a&gt; 유형의 관점에서 정의 &lt;a href=&quot;typespecs#built-in-types&quot;&gt; &lt;code&gt;iolist/0&lt;/code&gt; &lt;/a&gt; . IO 목록은 IO 데이터와 동일하지만 최상위 수준에서는 이진을 허용하지 않지만 이진은 여전히 ​​목록 자체에서 허용됩니다.</target>
        </trans-unit>
        <trans-unit id="fa702ce8bbd071f4798263a3cd547b0d108c54b2" translate="yes" xml:space="preserve">
          <source>The built-in Elixir String module handles binaries that are UTF-8 encoded. &lt;a href=&quot;http://erlang.org/doc/man/binary.html&quot;&gt;The binary module&lt;/a&gt; is useful when you are dealing with binary data that is not necessarily UTF-8 encoded.</source>
          <target state="translated">내장 Elixir String 모듈은 UTF-8로 인코딩 된 바이너리를 처리합니다. &lt;a href=&quot;http://erlang.org/doc/man/binary.html&quot;&gt;이진 모듈&lt;/a&gt; 은 반드시 UTF-8로 인코딩되지 않은 이진 데이터를 처리 할 때 유용합니다.</target>
        </trans-unit>
        <trans-unit id="9912c6244d1c63cb84c34b3a68b26e804aecd085" translate="yes" xml:space="preserve">
          <source>The built-in calendar does not support leap seconds.</source>
          <target state="translated">내장 캘린더는 윤초를 지원하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="b5d5a7fc225ff3dc99ea235a243bb670a176a9d8" translate="yes" xml:space="preserve">
          <source>The calling process is put into a waiting state where its memory allocation has been reduced as much as possible, which is useful if the process does not expect to receive any messages in the near future.</source>
          <target state="translated">호출 프로세스는 메모리 할당이 가능한 한 감소 된 대기 상태가되며, 가까운 시일 내에 프로세스가 메시지를 수신하지 않을 경우 유용합니다.</target>
        </trans-unit>
        <trans-unit id="2b5b064f8261c2b03a774df6e6ae6dcd0d5c8140" translate="yes" xml:space="preserve">
          <source>The canonical example for attributes is annotating that a module implements an OTP behaviour, such as &lt;a href=&quot;genserver&quot;&gt;&lt;code&gt;GenServer&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">속성에 대한 &lt;a href=&quot;genserver&quot;&gt; &lt;code&gt;GenServer&lt;/code&gt; &lt;/a&gt; 예는 모듈이 GenServer 와 같은 OTP 동작을 구현한다는 주석입니다 .</target>
        </trans-unit>
        <trans-unit id="1347b7b88b5541d0e12b97a6af43a979bc085407" translate="yes" xml:space="preserve">
          <source>The capture operator can also be used to capture local functions, including private ones, and imported functions by omitting the module name:</source>
          <target state="translated">캡처 연산자를 사용하여 개인 기능을 포함한 로컬 기능 및 모듈 이름을 생략하여 가져온 기능을 캡처 할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="9ef5fce1b72abda5249ca40d94c6bba5adc71084" translate="yes" xml:space="preserve">
          <source>The capture operator can also be used to partially apply functions, where &lt;code&gt;&amp;amp;1&lt;/code&gt;, &lt;code&gt;&amp;amp;2&lt;/code&gt; and so on can be used as value placeholders. For example:</source>
          <target state="translated">캡처 연산자를 사용하여 &lt;code&gt;&amp;amp;1&lt;/code&gt; , &lt;code&gt;&amp;amp;2&lt;/code&gt; 등을 값 플레이스 홀더로 사용할 수있는 기능을 부분적으로 적용 할 수도 있습니다 . 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="ed78fb3f56be122fa668d8b4473c09f744fcc1e2" translate="yes" xml:space="preserve">
          <source>The capture operator is most commonly used to capture a function with given name and arity from a module:</source>
          <target state="translated">캡처 연산자는 모듈에서 주어진 이름과 특성을 가진 함수를 캡처하는 데 가장 일반적으로 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="daa5b67ac4266d64104c7c678fbebf39b612b043" translate="yes" xml:space="preserve">
          <source>The changes we have performed above have broken our tests because the registry requires the &lt;code&gt;:name&lt;/code&gt; option when starting up. Furthermore, some registry operations such as &lt;code&gt;lookup/2&lt;/code&gt; require the name to be given as an argument, instead of a PID, so we can do the ETS table lookup. Let&amp;rsquo;s change the setup function in &lt;code&gt;test/kv/registry_test.exs&lt;/code&gt; to fix both issues:</source>
          <target state="translated">레지스트리 를 시작할 때 레지스트리에 &lt;code&gt;:name&lt;/code&gt; 옵션이 필요하기 때문에 위에서 수행 한 변경 사항으로 인해 테스트가 중단 되었습니다. 또한 &lt;code&gt;lookup/2&lt;/code&gt; 와 같은 일부 레지스트리 작업 에서는 이름 대신 PID 대신 인수로 이름을 지정해야하므로 ETS 테이블 조회를 수행 할 수 있습니다. &lt;code&gt;test/kv/registry_test.exs&lt;/code&gt; 의 설정 기능을 변경하여 두 가지 문제를 모두 해결해 보겠습니다 .</target>
        </trans-unit>
        <trans-unit id="a0d4f7e1122a8b55f665626ee09ac09a98518fc5" translate="yes" xml:space="preserve">
          <source>The child specification contains 6 keys. The first two are required, and the remaining ones are optional:</source>
          <target state="translated">하위 스펙에는 6 개의 키가 있습니다. 처음 두 개가 필요하고 나머지 두 개는 선택 사항입니다.</target>
        </trans-unit>
        <trans-unit id="7160687e53597f9f0ad549c50eef17c501e4af5e" translate="yes" xml:space="preserve">
          <source>The child specification describes how the supervisor starts, shuts down, and restarts child processes.</source>
          <target state="translated">자식 사양은 감독자가 자식 프로세스를 시작, 종료 및 다시 시작하는 방법을 설명합니다.</target>
        </trans-unit>
        <trans-unit id="42da62bf1cce6040df7eca9209cf8b54396ada67" translate="yes" xml:space="preserve">
          <source>The child specification must exist and the corresponding child process must not be running.</source>
          <target state="translated">하위 스펙이 존재해야하며 해당 하위 프로세스가 실행되고 있지 않아야합니다.</target>
        </trans-unit>
        <trans-unit id="313526f010da8f629d585c9d88474ee1e8f4898f" translate="yes" xml:space="preserve">
          <source>The children is a list of modules, two-element tuples with module and arguments or a map with the child specification. A strategy is required to be provided through the &lt;code&gt;:strategy&lt;/code&gt; option. See &quot;start_link/2, init/2, and strategies&quot; for examples and other options.</source>
          <target state="translated">자식은 모듈 목록, 모듈이 포함 된 2 요소 튜플 및 인수 또는 자식 사양이 포함 된 맵입니다. &lt;code&gt;:strategy&lt;/code&gt; 옵션을 통해 전략을 제공해야합니다 . 예제 및 기타 옵션은 &quot;start_link / 2, init / 2 및 전략&quot;을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="53b9ca94898155cae15db3cc7ef654f0bd4da634" translate="yes" xml:space="preserve">
          <source>The choice between &lt;code&gt;:do&lt;/code&gt; keyword and &lt;code&gt;do/end&lt;/code&gt; blocks is left to the user</source>
          <target state="translated">&lt;code&gt;:do&lt;/code&gt; 키워드와 &lt;code&gt;do/end&lt;/code&gt; 블록 사이의 선택 은 사용자에게 맡겨집니다</target>
        </trans-unit>
        <trans-unit id="7b1b61c1ee1c04db8df86f79837449227f41eae5" translate="yes" xml:space="preserve">
          <source>The choice between parens and no parens is a matter of preference.</source>
          <target state="translated">Parens와 No Parens 중 하나를 선택하는 것이 선호의 문제입니다.</target>
        </trans-unit>
        <trans-unit id="a3a0a29c159eb1228d94714c1b6b06e0b32d7a74" translate="yes" xml:space="preserve">
          <source>The choice of parens and no parens also affects indentation. When a function call with parens doesn't fit on the same line, the formatter introduces a newline around parens and indents the arguments with two spaces:</source>
          <target state="translated">Parens의 선택과 parens가없는 것도 들여 쓰기에 영향을줍니다. parens를 사용한 함수 호출이 같은 행에 맞지 않으면 포맷터는 parens 주위에 줄 바꿈을 도입하고 인수를 두 개의 공백으로 들여 씁니다.</target>
        </trans-unit>
        <trans-unit id="23594e68f8f770603c0ad519dc9b20dde3e76ac3" translate="yes" xml:space="preserve">
          <source>The clause above will only be invoked if the user's age is more than or equal to 16. A more complete introduction to guards is available &lt;a href=&quot;guards&quot;&gt;in the Guards page&lt;/a&gt;.</source>
          <target state="translated">위의 조항은 사용자의 연령이 16 세 이상인 경우에만 호출됩니다. 가드에 대한보다 완전한 소개 &lt;a href=&quot;guards&quot;&gt;는 가드 페이지에서&lt;/a&gt; 볼 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="c255b3390bdbf75961fab635ba6b005f6d757746" translate="yes" xml:space="preserve">
          <source>The client sends the given &lt;code&gt;request&lt;/code&gt; to the server and waits until a reply arrives or a timeout occurs. &lt;a href=&quot;#c:handle_call/3&quot;&gt;&lt;code&gt;handle_call/3&lt;/code&gt;&lt;/a&gt; will be called on the server to handle the request.</source>
          <target state="translated">클라이언트는 주어진 &lt;code&gt;request&lt;/code&gt; 을 서버로 보내고 응답이 도착하거나 시간 초과가 발생할 때까지 기다립니다. 요청을 처리하기 위해 서버에서 &lt;a href=&quot;#c:handle_call/3&quot;&gt; &lt;code&gt;handle_call/3&lt;/code&gt; &lt;/a&gt; 이 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="d9950721b47bf760ca7644941dac9e25516ba4de" translate="yes" xml:space="preserve">
          <source>The closest representable number to 0.01 is 0.0099999997</source>
          <target state="translated">0.01에 가장 가까운 표현 가능한 숫자는 0.0099999997입니다.</target>
        </trans-unit>
        <trans-unit id="94f439e6735d38fbe26e845fc67b04161ed13286" translate="yes" xml:space="preserve">
          <source>The closest representable number to 0.1 is 0.1000000014</source>
          <target state="translated">0.1에 가장 가까운 표현 가능한 수는 0.1000000014입니다.</target>
        </trans-unit>
        <trans-unit id="a2e208db8b2d737003cfa026657e7817cb56f94b" translate="yes" xml:space="preserve">
          <source>The code above has very long lines and running the formatter is not going to address this issue. In fact, the formatter may make it more obvious that you have complex expressions:</source>
          <target state="translated">위의 코드는 매우 긴 행을 가지며 포맷터를 실행하면이 문제를 해결하지 못합니다. 실제로, 포매터는 복잡한 표현을 가지고 있음을보다 분명하게 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="8971296bf8b5fe352cb67c40d256dea059794cfe" translate="yes" xml:space="preserve">
          <source>The code above says we are only bringing in the functions from &lt;code&gt;MyLib&lt;/code&gt; so we can invoke &lt;code&gt;some_fun(arg1, arg2)&lt;/code&gt; directly without the &lt;code&gt;MyLib.&lt;/code&gt; prefix. Even more important, &lt;code&gt;import MyLib&lt;/code&gt; says that we have an option to not &lt;code&gt;import MyLib&lt;/code&gt; at all as we can simply invoke the function as &lt;code&gt;MyLib.some_fun(arg1, arg2)&lt;/code&gt;.</source>
          <target state="translated">위의 코드는 &lt;code&gt;MyLib&lt;/code&gt; 에서 함수를 가져 와서 MyLib 없이 &lt;code&gt;some_fun(arg1, arg2)&lt;/code&gt; 직접 호출 할 수 &lt;code&gt;MyLib.&lt;/code&gt; 접두사. 더 중요한 것은 &lt;code&gt;import MyLib&lt;/code&gt; 은 &lt;code&gt;MyLib.some_fun(arg1, arg2)&lt;/code&gt; 함수를 호출 할 수 있기 때문에 &lt;code&gt;import MyLib&lt;/code&gt; 을 전혀 가져 오지 않는 옵션이 있다고 말합니다 .</target>
        </trans-unit>
        <trans-unit id="09481c86dbd26d18c6fe8e729156a7702b288946" translate="yes" xml:space="preserve">
          <source>The code above will be kept with one keyword entry per line by the formatter. To avoid that, just squash everything into a single line.</source>
          <target state="translated">위 코드는 포맷터에 의해 한 줄에 하나의 키워드 항목으로 유지됩니다. 이를 피하기 위해 모든 것을 한 줄로 스쿼시하십시오.</target>
        </trans-unit>
        <trans-unit id="5a5a8b1aa48591121657910360da4599001ef7e7" translate="yes" xml:space="preserve">
          <source>The code above will fail because the &lt;code&gt;=&lt;/code&gt; operator always fails when the sides do not match and &lt;a href=&quot;#refute/2&quot;&gt;&lt;code&gt;refute/2&lt;/code&gt;&lt;/a&gt; does not change it.</source>
          <target state="translated">측면이 일치하지 않고 &lt;a href=&quot;#refute/2&quot;&gt; &lt;code&gt;refute/2&lt;/code&gt; &lt;/a&gt; 가 변경하지 않으면 &lt;code&gt;=&lt;/code&gt; 연산자가 항상 실패하기 때문에 위의 코드는 실패 합니다.</target>
        </trans-unit>
        <trans-unit id="d1a28899a290431210335f780f9a3a344e1bdaa4" translate="yes" xml:space="preserve">
          <source>The code above will work but issue a warning: &lt;code&gt;variable &quot;a&quot; is unused&lt;/code&gt;. The macro is overriding the original value and the original value is never used.</source>
          <target state="translated">위의 코드는 작동하지만 경고 : &lt;code&gt;variable &quot;a&quot; is unused&lt;/code&gt; . 매크로가 원래 값을 재정의하고 원래 값이 사용되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="269d3d7086c8d03fa3a689c409e633046b40f522" translate="yes" xml:space="preserve">
          <source>The code above would have the same flaw: if we link the &lt;code&gt;serve(client)&lt;/code&gt; task to the acceptor, a crash when serving a request would bring the acceptor, and consequently all other connections, down.</source>
          <target state="translated">위의 코드는 같은 결함이 있습니다. &lt;code&gt;serve(client)&lt;/code&gt; 작업을 수락 자에 연결하면 요청을 처리 할 때 충돌이 발생하여 수락 자 및 결과적으로 다른 모든 연결이 중단됩니다.</target>
        </trans-unit>
        <trans-unit id="89723bc3e0f1ff8256d889a81362651a037ba774" translate="yes" xml:space="preserve">
          <source>The code is now more readable, as it is now clear which functions are part of your API and which ones are callback implementations. To reinforce this idea, &lt;code&gt;@impl true&lt;/code&gt; automatically marks the function as &lt;code&gt;@doc false&lt;/code&gt;, disabling documentation unless &lt;code&gt;@doc&lt;/code&gt; is explicitly set.</source>
          <target state="translated">어떤 함수가 API의 일부이고 어떤 함수가 콜백 구현인지가 명확 해짐에 따라 코드는 이제 더 읽기 쉽습니다. 이 아이디어를 강화하기 위해 &lt;code&gt;@impl true&lt;/code&gt; 는 함수를 &lt;code&gt;@doc false&lt;/code&gt; 로 자동 표시하여 &lt;code&gt;@doc&lt;/code&gt; 가 명시 적으로 설정되어 있지 않으면 문서를 비활성화합니다 .</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
