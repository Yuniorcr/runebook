<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="nim">
    <body>
      <group id="nim">
        <trans-unit id="c76fa1132c9049877899fb2dd217fb4f9fb94f6c" translate="yes" xml:space="preserve">
          <source>Note that without the &lt;em&gt;*&lt;/em&gt; following the name of the type, the documentation for this type would not be generated. Documentation will only be generated for &lt;em&gt;exported&lt;/em&gt; types/procedures/etc.</source>
          <target state="translated">를 빼고 있습니다 &lt;em&gt;*&lt;/em&gt; 유형의 이름 다음에이 유형의 문서가 생성되지 않습니다. &lt;em&gt;내 보낸&lt;/em&gt; 유형 / 프로 시저 등의 문서 만 생성됩니다 .</target>
        </trans-unit>
        <trans-unit id="83dc7e0556afc26215f0f05cbb05794c79af8e39" translate="yes" xml:space="preserve">
          <source>Note that you can use &lt;code&gt;gorge&lt;/code&gt; from the &lt;a href=&quot;system&quot;&gt;system module&lt;/a&gt; to embed parameters from an external command at compile time:</source>
          <target state="translated">당신이 사용할 수있는 참고 &lt;code&gt;gorge&lt;/code&gt; 으로부터 &lt;a href=&quot;system&quot;&gt;시스템 모듈&lt;/a&gt; 컴파일시에 외부 명령에서 포함 매개 변수 :</target>
        </trans-unit>
        <trans-unit id="7a8772d3554a687071842e284d2ee1e51238d62e" translate="yes" xml:space="preserve">
          <source>Note that you can't pass any &lt;em&gt;args&lt;/em&gt; if you use the option &lt;code&gt;poEvalCommand&lt;/code&gt;, which invokes the system shell to run the specified &lt;em&gt;command&lt;/em&gt;. In this situation you have to concatenate manually the contents of &lt;em&gt;args&lt;/em&gt; to &lt;em&gt;command&lt;/em&gt; carefully escaping/quoting any special characters, since it will be passed &lt;em&gt;as is&lt;/em&gt; to the system shell. Each system/shell may feature different escaping rules, so try to avoid this kind of shell invocation if possible as it leads to non portable software.</source>
          <target state="translated">&lt;code&gt;poEvalCommand&lt;/code&gt; 옵션을 사용 하면 시스템 쉘을 호출하여 지정된 &lt;em&gt;명령&lt;/em&gt; 을 실행하는 경우 &lt;em&gt;인수를&lt;/em&gt; 전달할 수 없습니다 . 이 상황에서 수동의 내용을 연결하는이 &lt;em&gt;인수를&lt;/em&gt; 하는 &lt;em&gt;명령&lt;/em&gt; 이 전달되기 때문에,주의 깊게 특수 문자 / 탈출 인용 &lt;em&gt;같이&lt;/em&gt; 시스템 쉘. 각 시스템 / 쉘에는 다른 이스케이프 규칙이있을 수 있으므로 휴대용 소프트웨어가 아닌 경우이 유형의 쉘 호출을 피하십시오.&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="2c5592912b54a15cb049ee1308dc422e794cf8b0" translate="yes" xml:space="preserve">
          <source>Note that, unlike tuples, objects require the field names along with their values. For a &lt;code&gt;ref object&lt;/code&gt; type &lt;code&gt;system.new&lt;/code&gt; is invoked implicitly.</source>
          <target state="translated">튜플과 달리 객체에는 값과 함께 필드 이름이 필요합니다. A에 대한 &lt;code&gt;ref object&lt;/code&gt; 타입 &lt;code&gt;system.new&lt;/code&gt; 암시 적으로 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="4fe2a6b6231ef8afd037c1399752e71468fb5fa7" translate="yes" xml:space="preserve">
          <source>Note, single letter options that take an argument require a colon. E.g. -p:PATH.</source>
          <target state="translated">인수를 사용하는 단일 문자 옵션에는 콜론이 필요합니다. 예 : -p : PATH</target>
        </trans-unit>
        <trans-unit id="41b4d4771d7ff34d7e5d420650862df593a32f84" translate="yes" xml:space="preserve">
          <source>Note: Ensure the original #define is not seen by c2nim (notice the #ifndef C2NIM).</source>
          <target state="translated">참고 : c2nim에서 원래 #define을 볼 수 없도록하십시오 (#ifndef C2NIM에 유의).</target>
        </trans-unit>
        <trans-unit id="589daca808645da8bffbebba1f4a3d7ffd0724bc" translate="yes" xml:space="preserve">
          <source>Note: For inter thread communication use a &lt;a href=&quot;channels&quot;&gt;Channel&lt;/a&gt; instead.</source>
          <target state="translated">참고 : 스레드 간 통신의 경우 &lt;a href=&quot;channels&quot;&gt;채널을&lt;/a&gt; 대신 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="3c98c05550ca8db8ba1bb08e3e1cdb582a3c0958" translate="yes" xml:space="preserve">
          <source>Note: Import &lt;code&gt;std/sha1&lt;/code&gt; to use this module</source>
          <target state="translated">참고 : 이 모듈을 사용하려면 &lt;code&gt;std/sha1&lt;/code&gt; 을 가져 오십시오.</target>
        </trans-unit>
        <trans-unit id="a3380d8cd20bf5139372befec400003e462558ff" translate="yes" xml:space="preserve">
          <source>Note: In general, auto-converting from int to float loses information, which is why these operators live in a separate module. Use with care.</source>
          <target state="translated">참고 : 일반적으로 int에서 float로 자동 변환하면 정보가 손실되므로 이러한 연산자는 별도의 모듈에 있습니다. 주의해서 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="b0b65c5d5f2ba33aefbd25c3c5eb32dd838fe065" translate="yes" xml:space="preserve">
          <source>Note: The pattern refers to the original C identifiers, not to the resulting identifiers after mangling!</source>
          <target state="translated">참고 :이 패턴은 원본 C 식별자를 나타내며, 조작 후 결과 식별자가 아닙니다!</target>
        </trans-unit>
        <trans-unit id="b85936911cd46420f06b600d6cad5d51acfe276f" translate="yes" xml:space="preserve">
          <source>Note: While the rules outlined below are the &lt;em&gt;current&lt;/em&gt; naming conventions, these conventions have not always been in place. Previously, the naming conventions for identifiers followed the Pascal tradition of prefixes which indicated the base type of the identifier - PFoo for pointer and reference types, TFoo for value types, EFoo for exceptions, etc. Though this has since changed, there are many places in the standard library which still use this convention. Such style remains in place purely for legacy reasons, and will be changed in the future.</source>
          <target state="translated">참고 : 아래에 설명 된 규칙은 &lt;em&gt;현재&lt;/em&gt; 명명 규칙이지만 이러한 규칙이 항상 적용되는 것은 아닙니다. 이전에는 식별자의 이름 지정 규칙에 따라 포인터의 기본 유형 인 포인터 및 참조 유형의 경우 PFoo, 값 유형의 경우 TFoo, 예외의 경우 EFoo 등 식별자의 기본 유형을 나타내는 파스칼 전통이 뒤따 랐습니다. 이 규칙을 여전히 사용하는 표준 라이브러리에서. 이러한 스타일은 기존의 이유로 순수하게 유지되며 향후 변경 될 예정입니다.</target>
        </trans-unit>
        <trans-unit id="34fecedf4653bc748c9340a21b565062d449db86" translate="yes" xml:space="preserve">
          <source>Note: alternate ways of writing this are &lt;code&gt;b[^8..^2] = &quot;useful&quot;&lt;/code&gt; or as &lt;code&gt;b[11..b.len-2] = &quot;useful&quot;&lt;/code&gt; or as &lt;code&gt;b[11..&amp;lt;b.len-1] = &quot;useful&quot;&lt;/code&gt;.</source>
          <target state="translated">참고 : 이것을 쓰는 다른 방법은 &lt;code&gt;b[^8..^2] = &quot;useful&quot;&lt;/code&gt; 또는 &lt;code&gt;b[11..b.len-2] = &quot;useful&quot;&lt;/code&gt; 또는 &lt;code&gt;b[11..&amp;lt;b.len-1] = &quot;useful&quot;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="74d2a8fe03f1e52e70d949a49deffb7beaa9697e" translate="yes" xml:space="preserve">
          <source>Note: there is a speed improvement if the matches do not need to be captured.</source>
          <target state="translated">참고 : 경기를 캡처 할 필요가없는 경우 속도가 향상됩니다.</target>
        </trans-unit>
        <trans-unit id="c9e84c20ada2d36c53605b5b42bec5ecb1edbb93" translate="yes" xml:space="preserve">
          <source>Note: to serialize &lt;em&gt;x&lt;/em&gt; to JSON use $(%x) from the &lt;code&gt;json&lt;/code&gt; module</source>
          <target state="translated">참고 : &lt;em&gt;x&lt;/em&gt; 를 JSON 으로 직렬화 하려면 &lt;code&gt;json&lt;/code&gt; 모듈 에서 $ (% x)를 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="70440046a3dc2e079f23ee1c57dfa76669b732aa" translate="yes" xml:space="preserve">
          <source>Notes</source>
          <target state="translated">Notes</target>
        </trans-unit>
        <trans-unit id="c599056dda568258fe7a8884f67e29669997a74a" translate="yes" xml:space="preserve">
          <source>Now that we covered the basic control flow statements, let's return to Nim indentation rules.</source>
          <target state="translated">기본 제어 흐름 설명을 다루었으므로 이제 Nim 들여 쓰기 규칙으로 돌아가겠습니다.</target>
        </trans-unit>
        <trans-unit id="359cc1b4d4e1198e58400a2f6178f9956362e79d" translate="yes" xml:space="preserve">
          <source>Now that we use named arguments to call &lt;code&gt;createWindow&lt;/code&gt; the argument order does not matter anymore. Mixing named arguments with ordered arguments is also possible, but not very readable:</source>
          <target state="translated">이제 이름 지정된 인수를 사용하여 &lt;code&gt;createWindow&lt;/code&gt; 를 호출 하므로 인수 순서는 더 이상 중요하지 않습니다. 명명 된 인수와 정렬 된 인수를 혼합하는 것도 가능하지만 읽기가 쉽지 않습니다.</target>
        </trans-unit>
        <trans-unit id="de073aaec09d9a82c0b5660d7283e643aafc1ad4" translate="yes" xml:space="preserve">
          <source>Now the call to &lt;code&gt;createWindow&lt;/code&gt; only needs to set the values that differ from the defaults.</source>
          <target state="translated">이제 &lt;code&gt;createWindow&lt;/code&gt; 를 호출 하면 기본값과 다른 값만 설정하면됩니다.</target>
        </trans-unit>
        <trans-unit id="37e192255f51d8e35fa4d8c800cc0c72921cf379" translate="yes" xml:space="preserve">
          <source>Now the following holds:</source>
          <target state="translated">이제 다음 내용이 유지됩니다.</target>
        </trans-unit>
        <trans-unit id="1f1e7ee1876e3e297d1a65cb42dae5bbd812f819" translate="yes" xml:space="preserve">
          <source>Now we have compile-time checking against SQL injection attacks. Since &lt;code&gt;&quot;&quot;.SQL&lt;/code&gt; is transformed to &lt;code&gt;SQL(&quot;&quot;)&lt;/code&gt; no new syntax is needed for nice looking &lt;code&gt;SQL&lt;/code&gt; string literals. The hypothetical &lt;code&gt;SQL&lt;/code&gt; type actually exists in the library as the &lt;a href=&quot;db_sqlite#TSqlQuery&quot;&gt;TSqlQuery type&lt;/a&gt; of modules like &lt;a href=&quot;db_sqlite&quot;&gt;db_sqlite&lt;/a&gt;.</source>
          <target state="translated">이제 우리는 SQL 주입 공격에 대해 컴파일 타임을 점검했습니다. &lt;code&gt;&quot;&quot;.SQL&lt;/code&gt; &lt;code&gt;SQL(&quot;&quot;)&lt;/code&gt; 은 SQL ( &quot;&quot;) 로 변환 되므로 멋진 &lt;code&gt;SQL&lt;/code&gt; 문자열 리터럴에 새로운 구문이 필요하지 않습니다 . 가상 &lt;code&gt;SQL&lt;/code&gt; 유형은 실제로 &lt;a href=&quot;db_sqlite#TSqlQuery&quot;&gt;db_sqlite&lt;/a&gt; 와 같은 &lt;a href=&quot;db_sqlite&quot;&gt;TSqlQuery &lt;/a&gt;유형 의 모듈 로 라이브러리에 존재합니다 .</target>
        </trans-unit>
        <trans-unit id="756f1995808a7a657065d45ecdba62e1e4422db8" translate="yes" xml:space="preserve">
          <source>Now you can run the following Unix like commands to first generate C sources form the Nim code, then link them into a static binary along your main C program:</source>
          <target state="translated">이제 다음과 같은 Unix와 같은 명령을 실행하여 먼저 Nim 코드에서 C 소스를 생성 한 다음 기본 C 프로그램을 따라 정적 바이너리에 링크 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c3cf1586c107e2ad157be6c3699e618619c6124a" translate="yes" xml:space="preserve">
          <source>Number of decimal digits that can be represented in a 32-bit floating-point type without losing precision.</source>
          <target state="translated">정밀도를 잃지 않고 32 비트 부동 소수점 유형으로 표시 할 수있는 소수 자릿수입니다.</target>
        </trans-unit>
        <trans-unit id="f2a4cda872ca90910ea60e675f66d013e1c1c5d2" translate="yes" xml:space="preserve">
          <source>Number of decimal digits that can be represented in a 64-bit floating-point type without losing precision.</source>
          <target state="translated">정밀도를 잃지 않고 64 비트 부동 소수점 유형으로 표현할 수있는 소수 자릿수입니다.</target>
        </trans-unit>
        <trans-unit id="1e93ac306e3ccaf06ddd125b223d48515fd601ae" translate="yes" xml:space="preserve">
          <source>Number of digits (in base &lt;code&gt;floatingPointRadix&lt;/code&gt;) in the mantissa of 32-bit floating-point numbers.</source>
          <target state="translated">32 비트 부동 소수점 숫자의 가수 에서 자릿수 (기본 &lt;code&gt;floatingPointRadix&lt;/code&gt; )입니다.</target>
        </trans-unit>
        <trans-unit id="8d111fafd83c57aff8321d904d1159c139884ca1" translate="yes" xml:space="preserve">
          <source>Number of digits (in base &lt;code&gt;floatingPointRadix&lt;/code&gt;) in the mantissa of 64-bit floating-point numbers.</source>
          <target state="translated">64 비트 부동 소수점 숫자의 가수 에서 자릿수 (기본 &lt;code&gt;floatingPointRadix&lt;/code&gt; )입니다.</target>
        </trans-unit>
        <trans-unit id="6d57434884838acf9fbf6aa87bb099375ffa68a7" translate="yes" xml:space="preserve">
          <source>Number of whole days represented by the duration.</source>
          <target state="translated">기간으로 표시되는 전체 일수입니다.</target>
        </trans-unit>
        <trans-unit id="bbbf1dbfdd00220f8dc094d6ec5b5e3a5b7eec35" translate="yes" xml:space="preserve">
          <source>Number of whole hours represented by the duration.</source>
          <target state="translated">지속 시간으로 표시되는 전체 시간 수</target>
        </trans-unit>
        <trans-unit id="b3416e7091156db48c9ee6ff7ce55182de3f7f47" translate="yes" xml:space="preserve">
          <source>Number of whole microseconds represented by the &lt;strong&gt;fractional&lt;/strong&gt; part of the duration.</source>
          <target state="translated">지속 시간 의 &lt;strong&gt;소수&lt;/strong&gt; 부분으로 표시되는 전체 마이크로 초 수입니다 .</target>
        </trans-unit>
        <trans-unit id="e7efa45f297295912fd59ed47a00f3af6bfa2ef2" translate="yes" xml:space="preserve">
          <source>Number of whole milliseconds represented by the &lt;strong&gt;fractional&lt;/strong&gt; part of the duration.</source>
          <target state="translated">지속 시간 의 &lt;strong&gt;소수&lt;/strong&gt; 부분으로 표시되는 전체 밀리 초 수입니다 .</target>
        </trans-unit>
        <trans-unit id="76ab1f8aba37163bdf200dab23553396a7d3e689" translate="yes" xml:space="preserve">
          <source>Number of whole minutes represented by the duration.</source>
          <target state="translated">지속 시간으로 표시되는 전체 분 수입니다.</target>
        </trans-unit>
        <trans-unit id="18290aaf8138cc68a7cb85c476b2a4618ec23b5c" translate="yes" xml:space="preserve">
          <source>Number of whole nanoseconds represented by the &lt;strong&gt;fractional&lt;/strong&gt; part of the duration.</source>
          <target state="translated">지속 시간 의 &lt;strong&gt;분수&lt;/strong&gt; 부분으로 표시되는 전체 나노초 수입니다 .</target>
        </trans-unit>
        <trans-unit id="a01af1e768fd4e093861831d977f5d94b80aa9f9" translate="yes" xml:space="preserve">
          <source>Number of whole seconds represented by the duration.</source>
          <target state="translated">지속 시간으로 표시되는 전체 초 수입니다.</target>
        </trans-unit>
        <trans-unit id="5019b0366e2a30d163a49d5eb75e70470ba3899e" translate="yes" xml:space="preserve">
          <source>Number of whole weeks represented by the duration.</source>
          <target state="translated">기간으로 표시되는 전체 주 수</target>
        </trans-unit>
        <trans-unit id="7e53821f70ae16079c4a6a64c52a91fae645bc5f" translate="yes" xml:space="preserve">
          <source>Numbers</source>
          <target state="translated">Numbers</target>
        </trans-unit>
        <trans-unit id="6d872a21aa9a7b7fea7d5fe31a5c2025c54405e4" translate="yes" xml:space="preserve">
          <source>Numbers in of the range -1000.0&amp;lt;f&amp;lt;1000.0 will be formatted without an exponent. Numbers outside of this range will be formatted as a significand in the range -1000.0&amp;lt;f&amp;lt;1000.0 and an exponent that will always be an integer multiple of 3, corresponding with the SI prefix scale k, M, G, T etc for numbers with an absolute value greater than 1 and m, &amp;mu;, n, p etc for numbers with an absolute value less than 1.</source>
          <target state="translated">-1000.0 &amp;lt;f &amp;lt;1000.0 범위의 숫자는 지수없이 형식화됩니다. 이 범위를 벗어난 숫자는 -1000.0 &amp;lt;f &amp;lt;1000.0 범위의 부호로 형식이 지정되고 지수는 SI 접두어 스케일 k, M, G, T 등에 해당하는 항상 3의 정수 배수입니다. 1보다 큰 절대 값과 1보다 작은 절대 값을 가진 숫자의 경우 m, &amp;mu;, n, p 등</target>
        </trans-unit>
        <trans-unit id="76046e581003f2b0494ba6b4f5311bb28033bd96" translate="yes" xml:space="preserve">
          <source>Numeric value representing the day of the month, it will be either one or two digits long.</source>
          <target state="translated">월의 일을 나타내는 숫자 값으로 길이는 1 ~ 2 자리입니다.</target>
        </trans-unit>
        <trans-unit id="de117b3e0329ec2102122ec4b014ce37f5a796cb" translate="yes" xml:space="preserve">
          <source>Numerical constants</source>
          <target state="translated">수치 상수</target>
        </trans-unit>
        <trans-unit id="1e9d4ed2757d3ae1dd279289b3d36043bcba7966" translate="yes" xml:space="preserve">
          <source>Numerical constants are of a single type and have the form:</source>
          <target state="translated">숫자 상수는 단일 유형이며 형식은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="14f53cb15d3a159e9414701d05c0d3d0e93ec666" translate="yes" xml:space="preserve">
          <source>Numerical literals are written as in most other languages. As a special twist, underscores are allowed for better readability: &lt;code&gt;1_000_000&lt;/code&gt; (one million). A number that contains a dot (or 'e' or 'E') is a floating point literal: &lt;code&gt;1.0e9&lt;/code&gt; (one billion). Hexadecimal literals are prefixed with &lt;code&gt;0x&lt;/code&gt;, binary literals with &lt;code&gt;0b&lt;/code&gt; and octal literals with &lt;code&gt;0o&lt;/code&gt;. A leading zero alone does not produce an octal.</source>
          <target state="translated">숫자 리터럴은 대부분의 다른 언어로 작성됩니다. 특별한 트위스트로서 더 나은 가독성을 위해 밑줄이 허용됩니다 : &lt;code&gt;1_000_000&lt;/code&gt; (백만). 점 (또는 'e'또는 'E')을 포함하는 숫자는 부동 소수점 리터럴입니다 ( &lt;code&gt;1.0e9&lt;/code&gt; (10 억)). 16 진 리터럴은 &lt;code&gt;0x&lt;/code&gt; 접두사 , &lt;code&gt;0b&lt;/code&gt; 는 2 진 리터럴, &lt;code&gt;0o&lt;/code&gt; 는 8 진 리터럴로 시작 됩니다. 선행 0만으로는 8 진을 생성하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="c04cb3eb98c641516855449fcdbb36cf3f897d21" translate="yes" xml:space="preserve">
          <source>OP0</source>
          <target state="translated">OP0</target>
        </trans-unit>
        <trans-unit id="e04bcfb1ab304010d11e5f6c998c2482bd0d4128" translate="yes" xml:space="preserve">
          <source>OP1</source>
          <target state="translated">OP1</target>
        </trans-unit>
        <trans-unit id="a0f424f70ed0dceb9a4df1bcbbb44ba5f55142ae" translate="yes" xml:space="preserve">
          <source>OP10</source>
          <target state="translated">OP10</target>
        </trans-unit>
        <trans-unit id="c7235db666ae5752cda05330ea4cb5178dc33cc7" translate="yes" xml:space="preserve">
          <source>OP2</source>
          <target state="translated">OP2</target>
        </trans-unit>
        <trans-unit id="0269d7bdbba9ed5972892d3d356a1a3fac87612d" translate="yes" xml:space="preserve">
          <source>OP3</source>
          <target state="translated">OP3</target>
        </trans-unit>
        <trans-unit id="edc0331fa7efd5f99c8d4978274902462f4a77f2" translate="yes" xml:space="preserve">
          <source>OP4</source>
          <target state="translated">OP4</target>
        </trans-unit>
        <trans-unit id="1076f805e66d9538ab3ed3922addefb1313d6fee" translate="yes" xml:space="preserve">
          <source>OP5</source>
          <target state="translated">OP5</target>
        </trans-unit>
        <trans-unit id="ff32e5028e5ac9dd0850a491b15bab66a3070884" translate="yes" xml:space="preserve">
          <source>OP6</source>
          <target state="translated">OP6</target>
        </trans-unit>
        <trans-unit id="c5255cf0231d866ba6a47dd27b61007d7803323f" translate="yes" xml:space="preserve">
          <source>OP7</source>
          <target state="translated">OP7</target>
        </trans-unit>
        <trans-unit id="94fa4343a5ec0348b7ea746f38cbd00d2482ae4f" translate="yes" xml:space="preserve">
          <source>OP8</source>
          <target state="translated">OP8</target>
        </trans-unit>
        <trans-unit id="f373944b57d55ca9eddf4252a4349141943f321e" translate="yes" xml:space="preserve">
          <source>OP9</source>
          <target state="translated">OP9</target>
        </trans-unit>
        <trans-unit id="e2e3a80c4bd8a468bcd99583c85e67abc6426be7" translate="yes" xml:space="preserve">
          <source>Object Oriented Programming</source>
          <target state="translated">객체 지향 프로그래밍</target>
        </trans-unit>
        <trans-unit id="228b119ddf88904b9df1033a323f6ac211450b69" translate="yes" xml:space="preserve">
          <source>Object access operator &lt;code&gt;.&lt;/code&gt;</source>
          <target state="translated">객체 접근 연산자 &lt;code&gt;.&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="91ca8083a285ad1c3815b36f3d7992ca6b703603" translate="yes" xml:space="preserve">
          <source>Object construction</source>
          <target state="translated">객체 구성</target>
        </trans-unit>
        <trans-unit id="233bb7b76158a54f9e255a510cc28ac7b239b2dc" translate="yes" xml:space="preserve">
          <source>Object fields and global variables can be annotated via a &lt;code&gt;guard&lt;/code&gt; pragma:</source>
          <target state="translated">&lt;code&gt;guard&lt;/code&gt; pragma 를 통해 객체 필드와 전역 변수에 주석을 달 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="97f4ffdb6041c29c1c6a9a1c4566f9fc24ba1904" translate="yes" xml:space="preserve">
          <source>Object fields that should be visible from outside the defining module have to be marked by &lt;code&gt;*&lt;/code&gt;. In contrast to tuples, different object types are never &lt;em&gt;equivalent&lt;/em&gt;. New object types can only be defined within a type section.</source>
          <target state="translated">정의 모듈 외부에서 볼 수있는 객체 필드는 &lt;code&gt;*&lt;/code&gt; 로 표시해야합니다 . 튜플과 달리 서로 다른 객체 유형은 절대 &lt;em&gt;동일&lt;/em&gt; 하지 않습니다 . 새로운 객체 유형은 유형 섹션 내에서만 정의 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f0d5262dff32615f0940c3ad8ba0ac64dcad73ed" translate="yes" xml:space="preserve">
          <source>Object fields that should be visible from outside the defining module, have to be marked by &lt;code&gt;*&lt;/code&gt;. In contrast to tuples, different object types are never &lt;em&gt;equivalent&lt;/em&gt;. Objects that have no ancestor are implicitly &lt;code&gt;final&lt;/code&gt; and thus have no hidden type field. One can use the &lt;code&gt;inheritable&lt;/code&gt; pragma to introduce new object roots apart from &lt;code&gt;system.RootObj&lt;/code&gt;.</source>
          <target state="translated">정의 모듈 외부에서 볼 수있는 객체 필드는 &lt;code&gt;*&lt;/code&gt; 로 표시해야합니다 . 튜플과 달리 서로 다른 객체 유형은 절대 &lt;em&gt;동일&lt;/em&gt; 하지 않습니다 . 조상이없는 객체는 암시 적으로 &lt;code&gt;final&lt;/code&gt; 이므로 숨겨진 유형 필드가 없습니다. &lt;code&gt;inheritable&lt;/code&gt; pragma를 사용하여 &lt;code&gt;system.RootObj&lt;/code&gt; 와는 별도로 새로운 객체 루트를 도입 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="0978d14ec54e6881dd2800cbf0b00efa45a72d10" translate="yes" xml:space="preserve">
          <source>Object variants</source>
          <target state="translated">객체 변형</target>
        </trans-unit>
        <trans-unit id="72a83add2c5ede877c10d23f302d3e17accbadab" translate="yes" xml:space="preserve">
          <source>Objects</source>
          <target state="translated">Objects</target>
        </trans-unit>
        <trans-unit id="d2c0e1be93b0738e53ee9b0896c747691dcee381" translate="yes" xml:space="preserve">
          <source>Objects can also be created with an &lt;span id=&quot;object-construction-expression_1&quot;&gt;object construction expression&lt;/span&gt; that has the syntax &lt;code&gt;T(fieldA: valueA, fieldB: valueB, ...)&lt;/code&gt; where &lt;code&gt;T&lt;/code&gt; is an &lt;code&gt;object&lt;/code&gt; type or a &lt;code&gt;ref object&lt;/code&gt; type:</source>
          <target state="translated">&lt;code&gt;T(fieldA: valueA, fieldB: valueB, ...)&lt;/code&gt; 구문을 가진 &lt;span id=&quot;object-construction-expression_1&quot;&gt;객체 생성 표현식&lt;/span&gt; 으로 &lt;span id=&quot;object-construction-expression_1&quot;&gt;객체를&lt;/span&gt; 만들 수도 있습니다 . 여기서 &lt;code&gt;T&lt;/code&gt; 는 &lt;code&gt;object&lt;/code&gt; 유형 또는 &lt;code&gt;ref object&lt;/code&gt; 유형입니다.</target>
        </trans-unit>
        <trans-unit id="ec43891abad4c5f51b9f1f5052e07c492132c2c3" translate="yes" xml:space="preserve">
          <source>Objects have access to their type at runtime. There is an &lt;code&gt;of&lt;/code&gt; operator that can be used to check the object's type:</source>
          <target state="translated">객체는 런타임에 해당 유형에 액세스 할 수 있습니다. 이 &lt;code&gt;of&lt;/code&gt; 객체 유형을 확인하는 데 사용할 수 연산자가 있습니다.</target>
        </trans-unit>
        <trans-unit id="4834206117cd45bf703010b173f8d2ab8b0e8785" translate="yes" xml:space="preserve">
          <source>Objects provide many features that tuples do not. Object provide inheritance and information hiding. Objects have access to their type at runtime, so that the &lt;code&gt;of&lt;/code&gt; operator can be used to determine the object's type. The &lt;code&gt;of&lt;/code&gt; operator is similar to the &lt;code&gt;instanceof&lt;/code&gt; operator in Java.</source>
          <target state="translated">객체는 튜플이 제공하지 않는 많은 기능을 제공합니다. 개체는 상속과 정보 숨기기를 제공합니다. 객체는 런타임에 해당 유형에 액세스 할 수 있으므로 &lt;code&gt;of&lt;/code&gt; 연산자를 사용하여 객체 유형을 결정할 수 있습니다. &lt;code&gt;of&lt;/code&gt; 운영자는 유사하다 &lt;code&gt;instanceof&lt;/code&gt; 를의 자바 연산자.</target>
        </trans-unit>
        <trans-unit id="3c57f97f14e60597fdfd797182b06e968256db96" translate="yes" xml:space="preserve">
          <source>Objects, tuples and references can model quite complex data structures which depend on each other; they are &lt;em&gt;mutually recursive&lt;/em&gt;. In Nim these types can only be declared within a single type section. (Anything else would require arbitrary symbol lookahead which slows down compilation.)</source>
          <target state="translated">객체, 튜플 및 참조는 서로 의존하는 매우 복잡한 데이터 구조를 모델링 할 수 있습니다. 그들은 &lt;em&gt;상호 재귀 적입니다.&lt;/em&gt; 입니다. Nim에서 이러한 유형은 단일 유형 섹션 내에서만 선언 할 수 있습니다. (다른 어떤 것도 컴파일 속도를 늦추는 임의의 기호 미리보기가 필요합니다.)</target>
        </trans-unit>
        <trans-unit id="71f640b46a5645b45934608435a884aa861a4b91" translate="yes" xml:space="preserve">
          <source>Obtains a sequence containing the Runes in &lt;code&gt;s&lt;/code&gt;</source>
          <target state="translated">얻는 순서의 룬 함유 &lt;code&gt;s&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="46ad7ba4d959a6de6e644561408cd88962c2b6f5" translate="yes" xml:space="preserve">
          <source>Obtains the AST nodes returned from a macro or template invocation. Example:</source>
          <target state="translated">매크로 또는 템플릿 호출에서 반환 된 AST 노드를 가져옵니다. 예:</target>
        </trans-unit>
        <trans-unit id="e48a55708577c922dfe1c8727c5015fe59dcd19c" translate="yes" xml:space="preserve">
          <source>Octal format. Outputs the number in base 8.</source>
          <target state="translated">8 진 형식. 기수 8의 숫자를 출력합니다.</target>
        </trans-unit>
        <trans-unit id="1168d0c029a48fe3aea275c0858b8d7c66a53429" translate="yes" xml:space="preserve">
          <source>OctalEscape</source>
          <target state="translated">OctalEscape</target>
        </trans-unit>
        <trans-unit id="848ceaf7c8a295c627cb93a73ac754f0130154b6" translate="yes" xml:space="preserve">
          <source>Often C and C++ code contains something like the following, where the return value is frequently ignored and so the Nim wrapper should contain a &lt;code&gt;.discardable&lt;/code&gt; pragma:</source>
          <target state="translated">종종 C 및 C ++ 코드에는 다음과 같은 것이 포함됩니다. 반환 값은 자주 무시되므로 Nim 래퍼에는 &lt;code&gt;.discardable&lt;/code&gt; pragma 가 포함되어야합니다 .</target>
        </trans-unit>
        <trans-unit id="c85c11c4b42c93c3e7a04193ab3c113033320a61" translate="yes" xml:space="preserve">
          <source>Often C code contains special macros that affect the declaration of a function prototype but confuse c2nim's parser:</source>
          <target state="translated">종종 C 코드에는 함수 프로토 타입의 선언에 영향을 주지만 c2nim의 파서는 혼동되는 특수 매크로가 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="a8f42ebc1976b2a5351c29b1673e9099dfdbaca1" translate="yes" xml:space="preserve">
          <source>Often a procedure has many parameters and it is not clear in which order the parameters appear. This is especially true for procedures that construct a complex data type. Therefore the arguments to a procedure can be named, so that it is clear which argument belongs to which parameter:</source>
          <target state="translated">프로 시저에는 많은 매개 변수가 있으며 매개 변수가 표시되는 순서가 명확하지 않은 경우가 많습니다. 복잡한 데이터 형식을 구성하는 프로 시저의 경우 특히 그렇습니다. 따라서 프로 시저에 대한 인수의 이름을 지정할 수 있으므로 어떤 인수가 어떤 매개 변수에 속하는지 명확하게 알 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f6395b4ee4a71999d586e3acbee700ed5ca4da87" translate="yes" xml:space="preserve">
          <source>Often an object hierarchy is overkill in certain situations where simple variant types are needed.</source>
          <target state="translated">간단한 변형 유형이 필요한 특정 상황에서는 종종 객체 계층 구조가 과도하게 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="06ebd19cc8bc8c7150cf93f1a6c3d3c1726b3741" translate="yes" xml:space="preserve">
          <source>Often fixed size arrays turn out to be too inflexible; procedures should be able to deal with arrays of different sizes. The &lt;span id=&quot;openarray_1&quot;&gt;openarray&lt;/span&gt; type allows this. Openarrays are always indexed with an &lt;code&gt;int&lt;/code&gt; starting at position 0. The &lt;a href=&quot;system#len,TOpenArray&quot;&gt;len&lt;/a&gt;, &lt;a href=&quot;system#low&quot;&gt;low&lt;/a&gt; and &lt;a href=&quot;system#high&quot;&gt;high&lt;/a&gt; operations are available for open arrays too. Any array with a compatible base type can be passed to an openarray parameter, the index type does not matter.</source>
          <target state="translated">종종 고정 크기 배열은 너무 융통성이없는 것으로 판명됩니다. 프로시 저는 다양한 크기의 배열을 처리 할 수 ​​있어야합니다. &lt;span id=&quot;openarray_1&quot;&gt;openarray&lt;/span&gt; 유형이 있습니다. Openarray는 항상 0 위치에서 시작 하여 &lt;code&gt;int&lt;/code&gt; 로 색인 됩니다. &lt;a href=&quot;system#len,TOpenArray&quot;&gt;len&lt;/a&gt; , &lt;a href=&quot;system#low&quot;&gt;low&lt;/a&gt; 및 &lt;a href=&quot;system#high&quot;&gt;high&lt;/a&gt; 작업은 개방형 배열에서도 사용할 수 있습니다. 호환되는 기본 유형을 가진 모든 배열은 openarray 매개 변수로 전달 될 수 있으며 인덱스 유형은 중요하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="b72b9d6119b4da4f2df6e174e7eebce8ade809c0" translate="yes" xml:space="preserve">
          <source>Often fixed size arrays turn out to be too inflexible; procedures should be able to deal with arrays of different sizes. The &lt;span id=&quot;openarray_1&quot;&gt;openarray&lt;/span&gt; type allows this; it can only be used for parameters. Openarrays are always indexed with an &lt;code&gt;int&lt;/code&gt; starting at position 0. The &lt;code&gt;len&lt;/code&gt;, &lt;code&gt;low&lt;/code&gt; and &lt;code&gt;high&lt;/code&gt; operations are available for open arrays too. Any array with a compatible base type can be passed to an openarray parameter, the index type does not matter. In addition to arrays sequences can also be passed to an open array parameter.</source>
          <target state="translated">종종 고정 크기 배열은 너무 융통성이없는 것으로 판명됩니다. 프로시 저는 다양한 크기의 배열을 처리 할 수 ​​있어야합니다. &lt;span id=&quot;openarray_1&quot;&gt;openarray&lt;/span&gt; 유형이 있습니다; 매개 변수에만 사용할 수 있습니다. Openarray는 항상 0 위치에서 시작 하는 &lt;code&gt;int&lt;/code&gt; 로 색인 됩니다. &lt;code&gt;len&lt;/code&gt; , &lt;code&gt;low&lt;/code&gt; 및 &lt;code&gt;high&lt;/code&gt; 작업은 개방형 배열에서도 사용할 수 있습니다. 호환되는 기본 유형을 가진 모든 배열은 openarray 매개 변수로 전달 될 수 있으며 인덱스 유형은 중요하지 않습니다. 어레이 외에도 시퀀스를 개방형 어레이 매개 변수로 전달할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="653db7bf1a8cfcc325e38da27b77e167f0e8e1e1" translate="yes" xml:space="preserve">
          <source>Often it is unclear where the method should belong to: is &lt;code&gt;join&lt;/code&gt; a string method or an array method?</source>
          <target state="translated">메소드가 어디에 속해야하는지 불분명하다 : is &lt;code&gt;join&lt;/code&gt; 문자열 방법 또는 배열 방법을?</target>
        </trans-unit>
        <trans-unit id="c448be5e6f2f721a095ce66e4d5d6809129d6a5f" translate="yes" xml:space="preserve">
          <source>Often, you might work with callback-based API-s. You can wrap them with asynchronous procedures using promises and &lt;code&gt;newPromise&lt;/code&gt;:</source>
          <target state="translated">종종 콜백 기반 API로 작업 할 수 있습니다. promise와 &lt;code&gt;newPromise&lt;/code&gt; 를 사용하여 비동기 프로 시저로 랩핑 할 수 있습니다. .</target>
        </trans-unit>
        <trans-unit id="13c64dac54bbedb5367bd67136157fa1cbeaf400" translate="yes" xml:space="preserve">
          <source>Old HTML contains tags that have no end tag: &lt;code&gt;&amp;lt;br&amp;gt;&lt;/code&gt; for example.</source>
          <target state="translated">이전 HTML에는 종료 태그가없는 태그가 포함되어 있습니다 ( 예 : &lt;code&gt;&amp;lt;br&amp;gt;&lt;/code&gt; ) .</target>
        </trans-unit>
        <trans-unit id="b33123903f02b8bf587a5568b29d3def5ad6cd5c" translate="yes" xml:space="preserve">
          <source>On Posix systems, it uses the following parsing rules: Components are separated by whitespace unless the whitespace occurs within &lt;code&gt;&quot;&lt;/code&gt; or &lt;code&gt;'&lt;/code&gt; quotes.</source>
          <target state="translated">Posix 시스템에서는 다음과 같은 구문 분석 규칙을 사용합니다. 공백이 &lt;code&gt;&quot;&lt;/code&gt; 또는 &lt;code&gt;'&lt;/code&gt; 따옴표 로 묶이지 않으면 구성 요소는 공백으로 구분됩니다 .</target>
        </trans-unit>
        <trans-unit id="131615a38d5f682e627f291b00695b764612c48b" translate="yes" xml:space="preserve">
          <source>On Windows this is a noop, &lt;code&gt;symlinkPath&lt;/code&gt; is simply returned.</source>
          <target state="translated">Windows에서 이것은 noop이며 &lt;code&gt;symlinkPath&lt;/code&gt; 가 단순히 리턴됩니다.</target>
        </trans-unit>
        <trans-unit id="70ce96c0b5b17afe1bacf0b1747928e53aaa71eb" translate="yes" xml:space="preserve">
          <source>On Windows, a file is hidden if the file's 'hidden' attribute is set. On Unix-like systems, a file is hidden if it starts with a '.' (period) and is not &lt;em&gt;just&lt;/em&gt; '.' or '..' ' .&quot;</source>
          <target state="translated">Windows에서 파일의 'hidden'속성이 설정되면 파일이 숨겨집니다. 유닉스 계열 시스템에서 파일은 '.'로 시작하면 숨겨집니다. (기간) 및 아닌 &lt;em&gt;단지&lt;/em&gt; '.' 또는 '..' '. &quot;</target>
        </trans-unit>
        <trans-unit id="b49455f655e6af02510b37b400ad079bda32fcf9" translate="yes" xml:space="preserve">
          <source>On Windows, it uses the following parsing rules (see &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/17w5ykft.aspx&quot;&gt;http://msdn.microsoft.com/en-us/library/17w5ykft.aspx&lt;/a&gt; ):</source>
          <target state="translated">Windows에서는 다음 구문 분석 규칙을 사용합니다 ( &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/17w5ykft.aspx&quot;&gt;http://msdn.microsoft.com/en-us/library/17w5ykft.aspx&lt;/a&gt; 참조) . ).</target>
        </trans-unit>
        <trans-unit id="2d9112d9c390a489d1abe81e704b96328351c744" translate="yes" xml:space="preserve">
          <source>On Windows, network paths are considered absolute too.</source>
          <target state="translated">Windows에서는 네트워크 경로도 절대적인 것으로 간주됩니다.</target>
        </trans-unit>
        <trans-unit id="7fd69f94a373ae6ea79b01a75e59c435ad639d26" translate="yes" xml:space="preserve">
          <source>On a case-sensitive filesystem this is done case-sensitively otherwise case-insensitively. Returns:</source>
          <target state="translated">대소 문자를 구분하는 파일 시스템에서는 대소 문자를 구분하지 않고 대소 문자를 구분합니다. 보고:</target>
        </trans-unit>
        <trans-unit id="c8469f270e6308a5204d808346468ba7e32ce5ba" translate="yes" xml:space="preserve">
          <source>On an UNIX system this does nothing. Else it converts '/', '.', '..' to the appropriate things.</source>
          <target state="translated">UNIX 시스템에서는 아무 것도 수행하지 않습니다. 그렇지 않으면 '/', '.', '..'을 적절한 것으로 변환합니다.</target>
        </trans-unit>
        <trans-unit id="410676d7292fbbcf827b204fd9a0c07b3ffe5980" translate="yes" xml:space="preserve">
          <source>On backends without branch prediction (JS and the nimscript VM), this template will not affect code execution.</source>
          <target state="translated">분기 예측이없는 백엔드 (JS 및 nimscript VM)에서이 템플릿은 코드 실행에 영향을 미치지 않습니다.</target>
        </trans-unit>
        <trans-unit id="71349d230261d02d2bc3058f2f163656370a285c" translate="yes" xml:space="preserve">
          <source>On non Windows systems permissions are copied after the file itself has been copied, which won't happen atomically and could lead to a race condition. If &lt;em&gt;ignorePermissionErrors&lt;/em&gt; is true, errors while reading/setting file attributes will be ignored, otherwise will raise &lt;em&gt;OSError&lt;/em&gt;.</source>
          <target state="translated">Windows 이외의 시스템에서는 파일 자체가 복사 된 후 권한이 복사되며, 이는 원자 적으로 발생하지 않으며 경쟁 조건을 유발할 수 있습니다. &lt;em&gt;ignorePermissionErrors&lt;/em&gt; 가 true 인 경우 파일 속성을 읽거나 설정하는 동안 발생하는 오류는 무시되고 그렇지 않으면 &lt;em&gt;OSError가 발생&lt;/em&gt; 합니다.</target>
        </trans-unit>
        <trans-unit id="b26734ed023d711198160409aa5df1de55e088f2" translate="yes" xml:space="preserve">
          <source>On non Windows systems permissions are copied after the file or directory itself has been copied, which won't happen atomically and could lead to a race condition. If &lt;em&gt;ignorePermissionErrors&lt;/em&gt; is true, errors while reading/setting file attributes will be ignored, otherwise will raise &lt;em&gt;OSError&lt;/em&gt;.</source>
          <target state="translated">Windows 이외의 시스템에서는 파일 또는 디렉토리 자체가 복사 된 후 권한이 복사되며, 이는 원자 적으로 발생하지 않으며 경쟁 조건을 유발할 수 있습니다. &lt;em&gt;ignorePermissionErrors&lt;/em&gt; 가 true 인 경우 파일 속성을 읽거나 설정하는 동안 발생하는 오류는 무시되고 그렇지 않으면 &lt;em&gt;OSError가 발생합니다.&lt;/em&gt; 합니다.</target>
        </trans-unit>
        <trans-unit id="dd5345a8b53344aaa0863f04f717114c18227851" translate="yes" xml:space="preserve">
          <source>On non-Windows OSs, this proc conforms to the XDG Base Directory spec. Thus, this proc returns the value of the XDG_CONFIG_HOME environment variable if it is set, and returns the default configuration directory, &quot;~/.config/&quot;, otherwise.</source>
          <target state="translated">Windows 이외의 OS에서이 절차는 XDG 기본 디렉토리 사양을 따릅니다. 따라서이 proc은 설정된 경우 XDG_CONFIG_HOME 환경 변수의 값을 리턴하고 기본 구성 디렉토리 인 &quot;~ / .config /&quot;를 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="898bf4553278bc34226081a98acca7cca2299308" translate="yes" xml:space="preserve">
          <source>On posix this will search through the &lt;code&gt;/etc/services&lt;/code&gt; file.</source>
          <target state="translated">posix에서는 &lt;code&gt;/etc/services&lt;/code&gt; 를 통해 검색 합니다 파일을 합니다.</target>
        </trans-unit>
        <trans-unit id="c51ed0629b09b2b1d09d42b4681c845de22a12d3" translate="yes" xml:space="preserve">
          <source>On posix, if the process has exited because of a signal, 128 + signal number will be returned.</source>
          <target state="translated">posix에서 신호로 인해 프로세스가 종료되면 128 + 신호 번호가 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="bd3c38d17d46151c5d354197efeee10f8d783f2b" translate="yes" xml:space="preserve">
          <source>On relative paths, double dot (..) sequences are collapsed if possible. On absolute paths they are always collapsed.</source>
          <target state="translated">상대 경로에서 가능한 경우 이중 도트 (..) 시퀀스가 ​​축소됩니다. 절대 경로에서는 항상 축소됩니다.</target>
        </trans-unit>
        <trans-unit id="d20fce5143547ae9c280f86e85a7f988d0055a8f" translate="yes" xml:space="preserve">
          <source>On systems with a concept of &quot;drives&quot;, &lt;em&gt;drive&lt;/em&gt; is used to determine which drive label to use during absolute path conversion. &lt;em&gt;drive&lt;/em&gt; defaults to the drive of the current working directory, and is ignored on systems that do not have a concept of &quot;drives&quot;.</source>
          <target state="translated">&quot;드라이브&quot;라는 개념을 가진 시스템에서 &lt;em&gt;드라이브&lt;/em&gt; 는 절대 경로 변환 중에 사용할 드라이브 레이블을 결정하는 데 사용됩니다. &lt;em&gt;drive&lt;/em&gt; 는 현재 작업 디렉토리의 &lt;em&gt;드라이브로&lt;/em&gt; 기본 설정되며 &quot;드라이브&quot;개념이없는 시스템에서는 무시됩니다.</target>
        </trans-unit>
        <trans-unit id="4b3066034f3e12801386284630d4449cf120d021" translate="yes" xml:space="preserve">
          <source>On the other hand, if &lt;em&gt;spread&lt;/em&gt; is true, the proc will distribute evenly the remainder of the division across all sequences, which makes the result more suited to multithreading where you are passing equal sized work units to a thread pool and want to maximize core usage.</source>
          <target state="translated">반면에, &lt;em&gt;산포&lt;/em&gt; 가 사실이면, proc은 모든 시퀀스에 걸쳐 나머지 디비전을 균등하게 분배하므로 동일한 크기의 작업 단위를 스레드 풀에 전달하고 코어 사용을 최대화하려는 멀티 스레딩에 더 적합합니다. .</target>
        </trans-unit>
        <trans-unit id="317e86312cac8e36e1b7e5107ff34ed5cc4b1895" translate="yes" xml:space="preserve">
          <source>On the other hand, in Nim's future I would like to replace the VM by native code. A diff algorithm wouldn't work for that. Instead the native code would work with an API like &lt;code&gt;put&lt;/code&gt;, &lt;code&gt;get&lt;/code&gt;:</source>
          <target state="translated">반면 Nim의 미래에는 VM을 기본 코드로 교체하고 싶습니다. diff 알고리즘은 작동하지 않습니다. 대신 네이티브 코드가 같은 API와 함께 일하는 것이 &lt;code&gt;put&lt;/code&gt; , &lt;code&gt;get&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="c25df01f5e813eafaaa5663850dd783a4040697d" translate="yes" xml:space="preserve">
          <source>On the other hand, in the &lt;em&gt;RingBuffer&lt;/em&gt; example above, the designated generic param is used to instantiate the non-pointer &lt;code&gt;seq&lt;/code&gt; type, which means that the resulting generic type will have covariance that mimics an array or sequence (i.e. it will be covariant only when instantiated with &lt;code&gt;ptr&lt;/code&gt; and &lt;code&gt;ref&lt;/code&gt; types):</source>
          <target state="translated">반면, 위 의 &lt;em&gt;RingBuffer&lt;/em&gt; 예제에서 지정된 제네릭 매개 변수는 포인터가 아닌 &lt;code&gt;seq&lt;/code&gt; 유형 을 인스턴스화하는 데 사용됩니다. 즉, 결과 제네릭 유형은 배열 또는 시퀀스를 모방하는 공분산을 갖게됩니다 (즉, &lt;code&gt;ptr&lt;/code&gt; 및 &lt;code&gt;ref&lt;/code&gt; 유형으로 인스턴스화 됨 ) :</target>
        </trans-unit>
        <trans-unit id="9c4aef9144f0f23eb3dbf979b7ad1a6367db8432" translate="yes" xml:space="preserve">
          <source>On the other hand, using &lt;code&gt;bind once&lt;/code&gt; types allows you to test for equivalent types used in multiple signatures, without actually requiring any concrete types, thus allowing you to encode implementation-defined types:</source>
          <target state="translated">반면에 &lt;code&gt;bind once&lt;/code&gt; 사용 하면 유형을 사용하면 실제로 구체적인 유형을 요구하지 않고 여러 서명에 사용 된 동등한 유형을 테스트 할 수 있으므로 구현 정의 유형을 인코딩 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d13d679112fedc32342b16f2848339011424e35e" translate="yes" xml:space="preserve">
          <source>On the other hand, when &lt;em&gt;a&lt;/em&gt; is a TableRef instead, then changes to &lt;em&gt;b&lt;/em&gt; also affect &lt;em&gt;a&lt;/em&gt;. Both &lt;em&gt;a&lt;/em&gt; and &lt;em&gt;b&lt;/em&gt; reference the same data structure:</source>
          <target state="translated">때 다른 한편으로는, &lt;em&gt;A가&lt;/em&gt; 대신 TableRef이다, 다음의 변경 &lt;em&gt;ㄱ&lt;/em&gt; 영향도 &lt;em&gt;을&lt;/em&gt; . &lt;em&gt;a&lt;/em&gt; 와 &lt;em&gt;b &lt;/em&gt;&lt;em&gt;는&lt;/em&gt; 모두 동일한 데이터 구조를 참조합니다.</target>
        </trans-unit>
        <trans-unit id="37d18afb7f631d26e467ad1c5e79cc58b688edd5" translate="yes" xml:space="preserve">
          <source>On top of generating libraries or standalone applications, Nim offers bidirectional interfacing with the backend targets through generic and specific pragmas.</source>
          <target state="translated">라이브러리 또는 독립형 응용 프로그램 생성 외에도 Nim은 일반 및 특정 pragma를 통해 백엔드 대상과 양방향 인터페이스를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="e8edce91442634d7387fe386cb073a4a709ecff8" translate="yes" xml:space="preserve">
          <source>Once bound, type params can appear in the rest of the proc signature:</source>
          <target state="translated">바인드되면, 유형 매개 변수가 나머지 proc 서명에 나타날 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3b47a60e99f1394d99a1c045b8c28b67a9fc8f6a" translate="yes" xml:space="preserve">
          <source>Once everything is registered in a dispatcher, you need to call the &lt;code&gt;poll&lt;/code&gt; function in a while loop.</source>
          <target state="translated">디스패처에 모든 것이 등록되면 while 루프에서 &lt;code&gt;poll&lt;/code&gt; 함수 를 호출해야합니다 .</target>
        </trans-unit>
        <trans-unit id="d5654d82c2a3884c2cbc3f1c679468b9597dacae" translate="yes" xml:space="preserve">
          <source>Once index files have been generated for one or more modules, the Nim compiler command &lt;code&gt;buildIndex directory&lt;/code&gt; can be run to go over all the index files in the specified directory to generate a &lt;a href=&quot;https://nim-lang.org/docs/theindex.html&quot;&gt;theindex.html&lt;/a&gt; file.</source>
          <target state="translated">인덱스 파일이 하나 개 이상의 모듈에 대해 생성 된 후에는 님 컴파일러 명령 &lt;code&gt;buildIndex directory&lt;/code&gt; 를 생성하기 위해 지정된 디렉토리에있는 모든 인덱스 파일을 통해 갈 실행할 수 있습니다 &lt;a href=&quot;https://nim-lang.org/docs/theindex.html&quot;&gt;theindex.html&lt;/a&gt; 파일 있습니다.</target>
        </trans-unit>
        <trans-unit id="ba237fb6a97d475a345fe56549779371d65c0b14" translate="yes" xml:space="preserve">
          <source>Once you have code like this in place, if the list of raised exception changes the compiler will stop with an error specifying the line of the proc which stopped validating the pragma and the raised exception not being caught, along with the file and line where the uncaught exception is being raised, which may help you locate the offending code which has changed.</source>
          <target state="translated">이와 같은 코드가 작성되면, 발생한 예외 목록이 변경되면 컴파일러는 pragma 유효성 검사를 중지 한 proc의 행을 지정하고 발생한 예외 및 파일 및 행과 함께 발생하지 않는 예외를 지정하는 오류와 함께 중지됩니다. 잡히지 않은 예외가 발생하여 변경된 문제 코드를 찾는 데 도움이 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e837030f84dd416a1763c3313ad3b60179285a22" translate="yes" xml:space="preserve">
          <source>Once your code is compiled for hot reloading, you can use a framework such as &lt;em&gt;LiveReload &amp;lt;http://livereload.com/&amp;gt;&lt;/em&gt; or &lt;em&gt;BrowserSync &amp;lt;https://browsersync.io/&amp;gt;&lt;/em&gt; to implement the actual reloading behavior in your project.</source>
          <target state="translated">핫 리로딩을 위해 코드가 컴파일되면 &lt;em&gt;LiveReload &amp;lt;http://livereload.com/&amp;gt;&lt;/em&gt; 또는 &lt;em&gt;BrowserSync &amp;lt;https://browsersync.io/&amp;gt;&lt;/em&gt; 와 같은 프레임 워크를 사용할 수 있습니다.&lt;em&gt;&lt;/em&gt; 하여 프로젝트에서 실제 리로딩 동작을 구현할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b2d92002386ccab2c66af44a60e6f00bc53d2d7b" translate="yes" xml:space="preserve">
          <source>Once your macro is finished, there are two ways to invoke it:</source>
          <target state="translated">매크로가 완료되면 두 가지 방법으로 매크로를 호출 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="6e2e14b82a6a078671a4c4d9c4519514eb953104" translate="yes" xml:space="preserve">
          <source>One can tell the compiler about the convention that a parameter of name &lt;code&gt;c&lt;/code&gt; should default to type &lt;code&gt;Context&lt;/code&gt;, &lt;code&gt;n&lt;/code&gt; should default to &lt;code&gt;Node&lt;/code&gt; etc.:</source>
          <target state="translated">컴파일러에 이름 &lt;code&gt;c&lt;/code&gt; 의 매개 변수 는 기본적으로 &lt;code&gt;Context&lt;/code&gt; 유형으로 , &lt;code&gt;n&lt;/code&gt; 은 기본적으로 &lt;code&gt;Node&lt;/code&gt; 등 으로 설정해야한다는 규칙에 대해 알려줄 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="b441a31745d56840471825f544c92905083aa43a" translate="yes" xml:space="preserve">
          <source>One can use &lt;span id=&quot;tuple-unpacking_1&quot;&gt;tuple unpacking&lt;/span&gt; to access the tuple's fields:</source>
          <target state="translated">&lt;span id=&quot;tuple-unpacking_1&quot;&gt;튜플 포장 풀기&lt;/span&gt; 를 사용하여 튜플의 필드에 액세스 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="f6393931ab1901888c2c40493d5e9e26b0c1998b" translate="yes" xml:space="preserve">
          <source>One of Nim's cool features is pragmas, which allow fine-tuning of various aspects of the language. They come in all types, such as adorning procs and objects, but the standalone &lt;code&gt;emit&lt;/code&gt; pragma shows the basics with the AST.</source>
          <target state="translated">님의 멋진 기능 중 하나는 언어의 다양한 측면을 미세 조정할 수있는 프라 그마입니다. 그것들은 장식적인 물건들과 물건들과 같은 모든 유형으로 제공되지만, 독립형 &lt;code&gt;emit&lt;/code&gt; pragma는 AST의 기본 사항을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="da1a3f527bb79b13e631a70eceb3b03667fef012" translate="yes" xml:space="preserve">
          <source>One or more</source>
          <target state="translated">하나 이상</target>
        </trans-unit>
        <trans-unit id="2207e76c212f3f40ba5c67c82dea4cf30adfcd7c" translate="yes" xml:space="preserve">
          <source>One or more: Apply expression &lt;em&gt;E&lt;/em&gt; repeatedly to match the text ahead, as long as it succeeds. Consume the matched text (if any) and indicate success if there was at least one match. Otherwise indicate failure.</source>
          <target state="translated">하나 이상 : 텍스트 &lt;em&gt;E&lt;/em&gt; 가 성공하기 만하면 앞의 텍스트와 일치하도록 식 &lt;em&gt;E를&lt;/em&gt; 반복해서 적용 합니다. 일치하는 텍스트 (있는 경우)를 사용하고 하나 이상 일치하면 성공을 나타냅니다. 그렇지 않으면 실패를 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="fcabe66eb85b400f8ef4fa596004eac08e1527ca" translate="yes" xml:space="preserve">
          <source>One should overload this proc if one wants to overload the &lt;code&gt;in&lt;/code&gt; operator. The parameters are in reverse order! &lt;code&gt;a in b&lt;/code&gt; is a template for &lt;code&gt;contains(b, a)&lt;/code&gt;. This is because the unification algorithm that Nim uses for overload resolution works from left to right. But for the &lt;code&gt;in&lt;/code&gt; operator that would be the wrong direction for this piece of code:</source>
          <target state="translated">&lt;code&gt;in&lt;/code&gt; 연산자 에 과부하를가하려면이 proc을 과부하해야합니다 . 매개 변수는 역순입니다! &lt;code&gt;a in b&lt;/code&gt; 는 &lt;code&gt;contains(b, a)&lt;/code&gt; 의 템플릿입니다 . 이는 Nim이 과부하 해결에 사용하는 통합 알고리즘이 왼쪽에서 오른쪽으로 작동하기 때문입니다. 그러나 &lt;code&gt;in&lt;/code&gt; 연산자의 경우이 코드 조각에 대한 잘못된 방향입니다.</target>
        </trans-unit>
        <trans-unit id="43e4679df7a5cffe918b1e69c86872ec6282c2aa" translate="yes" xml:space="preserve">
          <source>One very nice advantage over regular expressions is that &lt;code&gt;scanf&lt;/code&gt; is extensible with ordinary Nim procs. The proc is either enclosed in &lt;code&gt;${}&lt;/code&gt; or in &lt;code&gt;$[]&lt;/code&gt;. &lt;code&gt;${}&lt;/code&gt; matches and binds the result to a variable (that was passed to the &lt;code&gt;scanf&lt;/code&gt; macro) while &lt;code&gt;$[]&lt;/code&gt; merely optional tokens.</source>
          <target state="translated">정규 표현식에 비해 매우 좋은 장점 중 하나는 &lt;code&gt;scanf&lt;/code&gt; 가 일반 Nim 프로세서로 확장 가능 하다는 것 입니다. proc은 &lt;code&gt;${}&lt;/code&gt; 또는 &lt;code&gt;$[]&lt;/code&gt; 있습니다. &lt;code&gt;${}&lt;/code&gt; 은 결과를 변수 ( &lt;code&gt;scanf&lt;/code&gt; 매크로 에 전달 된)와 일치시키고 바인딩 하며 &lt;code&gt;$[]&lt;/code&gt; 는 옵션 토큰입니다.</target>
        </trans-unit>
        <trans-unit id="7aa20e42e9fac36bab86ec5c3c5c9673fd5be3ee" translate="yes" xml:space="preserve">
          <source>Only available for numbers types. Note that the sequence will be uninitialized. After the creation of the sequence you should assign entries to the sequence instead of adding them.</source>
          <target state="translated">숫자 유형에만 사용할 수 있습니다. 시퀀스는 초기화되지 않습니다. 시퀀스를 생성 한 후 추가하는 대신 시퀀스에 항목을 할당해야합니다.</target>
        </trans-unit>
        <trans-unit id="fbc370c46bbbf0bf1dd85847affcf8aaa6e750bc" translate="yes" xml:space="preserve">
          <source>Only used in PSK ciphersuites.</source>
          <target state="translated">PSK 암호 모음에만 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="8eef2b7e3d6c43c01d59bb1d06ba5236003b6a81" translate="yes" xml:space="preserve">
          <source>Open and Closed symbols</source>
          <target state="translated">열림 및 닫힘 기호</target>
        </trans-unit>
        <trans-unit id="cc4d804a9a52970f4e0eefea5bf1b6f54e9967fb" translate="yes" xml:space="preserve">
          <source>Open arrays</source>
          <target state="translated">개방형 배열</target>
        </trans-unit>
        <trans-unit id="9ab2517dbed2bed693f918f911730ef79e6d5360" translate="yes" xml:space="preserve">
          <source>Open symbols are looked up in two different contexts: Both the context at definition and the context at instantiation are considered:</source>
          <target state="translated">열린 기호는 두 가지 다른 컨텍스트에서 조회됩니다. 정의의 컨텍스트와 인스턴스화의 컨텍스트가 모두 고려됩니다.</target>
        </trans-unit>
        <trans-unit id="6d77bab6bef6033d1033ca864d642fde957a56f8" translate="yes" xml:space="preserve">
          <source>OpenSSL can also be statically linked using &lt;code&gt;--dynlibOverride:ssl&lt;/code&gt; for OpenSSL &amp;gt;= 1.1.0. If you want to statically link against OpenSSL 1.0.x, you now have to define the &lt;code&gt;openssl10&lt;/code&gt; symbol via &lt;code&gt;-d:openssl10&lt;/code&gt;.</source>
          <target state="translated">OpenSSL &amp;gt; = 1.1.0의 경우 &lt;code&gt;--dynlibOverride:ssl&lt;/code&gt; 을 사용하여 OpenSSL을 정적으로 연결할 수도 있습니다 . OpenSSL 1.0.x에 정적으로 링크하려면 &lt;code&gt;openssl10&lt;/code&gt; 을 정의해야 합니다. &lt;code&gt;-d:openssl10&lt;/code&gt; 을 통해 기호를 .</target>
        </trans-unit>
        <trans-unit id="f0576b64464ad64eb4c53eaa5c4ef2696b5bb4d5" translate="yes" xml:space="preserve">
          <source>OpenSSL support</source>
          <target state="translated">OpenSSL 지원</target>
        </trans-unit>
        <trans-unit id="41785aa4105d96f7aa2063837bbf62b9d0c42838" translate="yes" xml:space="preserve">
          <source>Opening a connection to a database</source>
          <target state="translated">데이터베이스에 대한 연결 열기</target>
        </trans-unit>
        <trans-unit id="28b5a32312a9dd72c3dba0d99cdc13009520ada4" translate="yes" xml:space="preserve">
          <source>Opens a database connection.</source>
          <target state="translated">데이터베이스 연결을 엽니 다.</target>
        </trans-unit>
        <trans-unit id="6d89b0ce8e9218e6fea12851e9b880be1e4997d4" translate="yes" xml:space="preserve">
          <source>Opens a file named &lt;em&gt;filename&lt;/em&gt; for reading.</source>
          <target state="translated">&lt;em&gt;filename&lt;/em&gt; 이라는 &lt;em&gt;파일을&lt;/em&gt; 엽니 다&lt;em&gt;&lt;/em&gt;읽을 을 .</target>
        </trans-unit>
        <trans-unit id="a04bc38a4be5b20cb1f277438e98d1933fa9e233" translate="yes" xml:space="preserve">
          <source>Opens a file named &lt;em&gt;filename&lt;/em&gt; for writing. Then writes the &lt;em&gt;content&lt;/em&gt; completely to the file and closes the file afterwards. Raises an IO exception in case of an error.</source>
          <target state="translated">쓰기 위해 &lt;em&gt;filename&lt;/em&gt; 이라는 &lt;em&gt;파일&lt;/em&gt; 을 엽니 다 . 그런 다음 &lt;em&gt;내용을&lt;/em&gt; 씁니다.&lt;em&gt;&lt;/em&gt; 을 파일에 완전히 나중에 파일을 닫습니다. 오류가 발생하면 IO 예외가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="eaf81cf94eccf62abfb731ae2352ef1f7afad678" translate="yes" xml:space="preserve">
          <source>Opens a file named &lt;em&gt;filename&lt;/em&gt; with given &lt;em&gt;mode&lt;/em&gt;.</source>
          <target state="translated">주어진 &lt;em&gt;모드로 &lt;/em&gt;&lt;em&gt;filename&lt;/em&gt; 이라는 &lt;em&gt;파일&lt;/em&gt; 을 엽니 다 .&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="14f607a4816b562ae72f4697df3c9b5d1e94db71" translate="yes" xml:space="preserve">
          <source>Opens a file specified by the path in &lt;code&gt;filename&lt;/code&gt; using the specified FileMode &lt;code&gt;mode&lt;/code&gt; asynchronously.</source>
          <target state="translated">지정된 FileMode &lt;code&gt;mode&lt;/code&gt; 비동기 적으로 사용하여 &lt;code&gt;filename&lt;/code&gt; 에서 경로로 지정된 파일을 엽니 다 .</target>
        </trans-unit>
        <trans-unit id="430d32076eb256f0fb1db5fd1333254c368ef1ba" translate="yes" xml:space="preserve">
          <source>Operation</source>
          <target state="translated">Operation</target>
        </trans-unit>
        <trans-unit id="27fea8d4a592d2ef15188641818c4f50cf213496" translate="yes" xml:space="preserve">
          <source>Operations like &lt;code&gt;mitems&lt;/code&gt; or &lt;code&gt;mpairs&lt;/code&gt; (or the now deprecated &lt;code&gt;mget&lt;/code&gt;) that allow a &lt;em&gt;mutating view&lt;/em&gt; into some data structure should start with an &lt;code&gt;m&lt;/code&gt;.</source>
          <target state="translated">동일한 조작 &lt;code&gt;mitems&lt;/code&gt; 또는 &lt;code&gt;mpairs&lt;/code&gt; (또는 현재 사용되지 &lt;code&gt;mget&lt;/code&gt; 허용 및) &lt;em&gt;돌연변이 뷰&lt;/em&gt; 일부 데이터 구조로는 시작해야 &lt;code&gt;m&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="d0e687b079fb70f2208d1f8d2c75d64d74925496" translate="yes" xml:space="preserve">
          <source>Operator</source>
          <target state="translated">Operator</target>
        </trans-unit>
        <trans-unit id="e90414358dbfff0a68e4eb5d68a16978cf197d5a" translate="yes" xml:space="preserve">
          <source>Operators</source>
          <target state="translated">Operators</target>
        </trans-unit>
        <trans-unit id="2eb04c37cf98ac30d71ff1b2f86ff1286db3a060" translate="yes" xml:space="preserve">
          <source>Operators ending in either &lt;code&gt;-&amp;gt;&lt;/code&gt;, &lt;code&gt;~&amp;gt;&lt;/code&gt; or &lt;code&gt;=&amp;gt;&lt;/code&gt; are called &lt;span id=&quot;arrow-like_1&quot;&gt;arrow like&lt;/span&gt;, and have the lowest precedence of all operators.</source>
          <target state="translated">&lt;code&gt;-&amp;gt;&lt;/code&gt; , &lt;code&gt;~&amp;gt;&lt;/code&gt; 또는 &lt;code&gt;=&amp;gt;&lt;/code&gt; 로 끝나는 연산자를 &lt;span id=&quot;arrow-like_1&quot;&gt;arrow like&lt;/span&gt; 라고 하며 모든 연산자 중 우선 순위가 가장 낮습니다.</target>
        </trans-unit>
        <trans-unit id="b9fb7505b70ebf5d6a9bf27d2cc12bbd40ee6af9" translate="yes" xml:space="preserve">
          <source>Operators with one parameter are prefix operators, operators with two parameters are infix operators. (However, the parser distinguishes these from the operator's position within an expression.) There is no way to declare postfix operators: all postfix operators are built-in and handled by the grammar explicitly.</source>
          <target state="translated">하나의 매개 변수를 가진 연산자는 접두사 연산자이고, 두 개의 매개 변수를 가진 연산자는 접두사 연산자입니다. 그러나 구문 분석기는이를 표현식 내에서 연산자 위치와 구별합니다. 접미사 연산자를 선언 할 수있는 방법은 없습니다. 모든 접미사 연산자는 문법에 의해 기본적으로 제공되고 처리됩니다.</target>
        </trans-unit>
        <trans-unit id="4cad12b6f389d483084d0d553643ba732946936d" translate="yes" xml:space="preserve">
          <source>Optimize the code for speed or size, or disable optimization.</source>
          <target state="translated">속도 나 크기에 맞게 코드를 최적화하거나 최적화를 비활성화하십시오.</target>
        </trans-unit>
        <trans-unit id="5bc67490a69e2f143ae9471a30d11d13f1cf0a23" translate="yes" xml:space="preserve">
          <source>Optimized version of &lt;a href=&quot;#replace,string,string&quot;&gt;replace&lt;/a&gt; for characters.</source>
          <target state="translated">문자 &lt;a href=&quot;#replace,string,string&quot;&gt;대체&lt;/a&gt; 최적화 버전 .</target>
        </trans-unit>
        <trans-unit id="eeaab884d147b712e7cd622a4a60b4a88154310b" translate="yes" xml:space="preserve">
          <source>Optimizing for Nim</source>
          <target state="translated">님에 대한 최적화</target>
        </trans-unit>
        <trans-unit id="b48db209b043766c1b5804d5e27bcd73790ad927" translate="yes" xml:space="preserve">
          <source>Optimizing string handling</source>
          <target state="translated">문자열 처리 최적화</target>
        </trans-unit>
        <trans-unit id="74b1e148d5f6b3cc16368babcbaee255c62422d6" translate="yes" xml:space="preserve">
          <source>Optional human readable string to display as hyper link. If the value is not present or is the empty string, the hyper link will be rendered using the term. Prefix whitespace indicates that this entry is not for an API symbol but for a TOC entry.</source>
          <target state="translated">하이퍼 링크로 표시 할 사람이 읽을 수있는 문자열 (선택 사항). 값이 없거나 빈 문자열 인 경우 용어를 사용하여 하이퍼 링크가 렌더링됩니다. 접두사 공백은이 항목이 API 기호가 아니라 TOC 항목임을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="d39225d11f759a6f965920f1aaea6c3af2e9f0dd" translate="yes" xml:space="preserve">
          <source>Optional title or description of the hyper link. Browsers usually display this as a tooltip after hovering a moment over the hyper link.</source>
          <target state="translated">하이퍼 링크의 선택적 제목 또는 설명 브라우저는 일반적으로 하이퍼 링크 위에 잠시 마우스를 올려 놓으면이를 툴팁으로 표시합니다.</target>
        </trans-unit>
        <trans-unit id="bdd0b506837a990803d8edf137f2934329835748" translate="yes" xml:space="preserve">
          <source>Options:</source>
          <target state="translated">Options:</target>
        </trans-unit>
        <trans-unit id="81de498479269f7efcd2ce9f7789819338e86fcf" translate="yes" xml:space="preserve">
          <source>Or if we directly use a ref object:</source>
          <target state="translated">또는 ref 객체를 직접 사용하는 경우 :</target>
        </trans-unit>
        <trans-unit id="00fcdda14949d42c1610edfba9ca80d41d59564f" translate="yes" xml:space="preserve">
          <source>Or:</source>
          <target state="translated">Or:</target>
        </trans-unit>
        <trans-unit id="21ab442b56e6693d449e1b3316a7c72b27f04270" translate="yes" xml:space="preserve">
          <source>Order of evaluation</source>
          <target state="translated">평가 순서</target>
        </trans-unit>
        <trans-unit id="6fddf2edd42bb52326d95d7ad197008a3ad3c62b" translate="yes" xml:space="preserve">
          <source>Order of evaluation is strictly left-to-right, inside-out as it is typical for most others imperative programming languages:</source>
          <target state="translated">대부분의 다른 명령형 프로그래밍 언어에서 일반적으로 사용되므로 평가 순서는 왼쪽에서 오른쪽으로 엄격하게 결정됩니다.</target>
        </trans-unit>
        <trans-unit id="ab66e435888dccd3c76f559e634b263fcd8938b5" translate="yes" xml:space="preserve">
          <source>Ordered choice: Apply expressions &lt;em&gt;A&lt;/em&gt;, ..., &lt;em&gt;Z&lt;/em&gt;, in this order, to the text ahead, until one of them succeeds and possibly consumes some text. Indicate success if one of expressions succeeded. Otherwise do not consume any text and indicate failure.</source>
          <target state="translated">정렬 식 선택 : 표현식 &lt;em&gt;A&lt;/em&gt; , ..., &lt;em&gt;Z&lt;/em&gt; 를 순서대로 텍스트에 적용하고 그 중 하나가 성공하고 텍스트를 사용할 수있을 때까지 텍스트에 적용합니다. 식 중 하나가 성공하면 성공을 나타냅니다. 그렇지 않으면 텍스트를 사용하지 않고 실패를 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="bca57d661a7ac85cef723a55cd585566c9d3f621" translate="yes" xml:space="preserve">
          <source>Ordinal types</source>
          <target state="translated">서수 유형</target>
        </trans-unit>
        <trans-unit id="3119a2318ed75057b08b3960866241e029fabd75" translate="yes" xml:space="preserve">
          <source>Ordinal types are countable and ordered. This property allows the operation of functions as &lt;code&gt;inc&lt;/code&gt;, &lt;code&gt;ord&lt;/code&gt;, &lt;code&gt;dec&lt;/code&gt; on ordinal types to be defined.</source>
          <target state="translated">서수 유형은 셀 수 있고 순서가 있습니다. 이 속성을 사용하면 &lt;code&gt;inc&lt;/code&gt; , &lt;code&gt;ord&lt;/code&gt; , &lt;code&gt;dec&lt;/code&gt; 로 함수를 작동 할 수 있습니다 서수 유형에 대해 정의 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="872a8c3d6d59041261f393e2e15158de859ea0da" translate="yes" xml:space="preserve">
          <source>Ordinal types have the following characteristics:</source>
          <target state="translated">서수 유형에는 다음과 같은 특징이 있습니다.</target>
        </trans-unit>
        <trans-unit id="e629aac27b5777617cee72722956d8b340e2199c" translate="yes" xml:space="preserve">
          <source>Ordinal values have a largest possible value. Trying to count further than the largest value gives a checked runtime or static error.</source>
          <target state="translated">서수 값은 가능한 가장 큰 값을 갖습니다. 가장 큰 값보다 더 세려고하면 검사 된 런타임 또는 정적 오류가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="36acb83b7e99f490d0435fdeb44f36127e91db65" translate="yes" xml:space="preserve">
          <source>Ordinal values have a smallest possible value. Trying to count further down than the smallest value gives a checked runtime or static error.</source>
          <target state="translated">서수 값은 가능한 가장 작은 값을 갖습니다. 가장 작은 값보다 카운트 다운을 시도하면 확인 된 런타임 또는 정적 오류가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="5d640a1890d09eeb8ca875d238db12f1e6d3c3e8" translate="yes" xml:space="preserve">
          <source>Ordinary procs are often preferred over type conversions in Nim: For instance, &lt;code&gt;$&lt;/code&gt; is the &lt;code&gt;toString&lt;/code&gt; operator by convention and &lt;code&gt;toFloat&lt;/code&gt; and &lt;code&gt;toInt&lt;/code&gt; can be used to convert from floating point to integer or vice versa.</source>
          <target state="translated">일반적인 프로세스는 종종 Nim에서 유형 변환보다 선호됩니다. 예를 들어 &lt;code&gt;$&lt;/code&gt; 는 규칙 및 &lt;code&gt;toFloat&lt;/code&gt; 및 &lt;code&gt;toInt&lt;/code&gt; 에 의한 &lt;code&gt;toString&lt;/code&gt; 연산자입니다. 를 사용하여 부동 소수점에서 정수로 또는 그 반대로 변환 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="6e6a6f2086bb5fe5dbfd17d8d5f502d48759834b" translate="yes" xml:space="preserve">
          <source>Other</source>
          <target state="translated">Other</target>
        </trans-unit>
        <trans-unit id="2ff9f42e32037de9fa807030da493664b568f9f2" translate="yes" xml:space="preserve">
          <source>Other Input Formats</source>
          <target state="translated">다른 입력 형식</target>
        </trans-unit>
        <trans-unit id="43a5e3b913b70aa6bbf66b3f9a94594af1d85d6e" translate="yes" xml:space="preserve">
          <source>Other features that are &lt;em&gt;implicitly&lt;/em&gt; triggered cause problems for modularity too. Type converters fall into this category:</source>
          <target state="translated">&lt;em&gt;암시 적으로&lt;/em&gt; 트리거되는 다른 기능 도 모듈성에 문제를 일으 킵니다. 타입 변환기는이 범주에 속합니다.</target>
        </trans-unit>
        <trans-unit id="eaade51f8bd7dc897edf07f1c61fcd7a86afa793" translate="yes" xml:space="preserve">
          <source>Other parts of Nim - like scoping rules or runtime semantics are only described in the, more easily comprehensible, informal manner for now.</source>
          <target state="translated">범위 지정 규칙 또는 런타임 의미와 같은 Nim의 다른 부분은 현재보다 이해하기 쉽고 비공식적 인 방식으로 만 설명됩니다.</target>
        </trans-unit>
        <trans-unit id="13760399786dc4b7c7d0f4b3dbf3b00e5ee44753" translate="yes" xml:space="preserve">
          <source>Other strings can be inserted by putting them in &lt;code&gt;''&lt;/code&gt;. For example &lt;code&gt;hh'-&amp;gt;'mm&lt;/code&gt; will give &lt;code&gt;01-&amp;gt;56&lt;/code&gt;. The following characters can be inserted without quoting them: &lt;code&gt;:&lt;/code&gt;&lt;code&gt;-&lt;/code&gt;&lt;code&gt;(&lt;/code&gt;&lt;code&gt;)&lt;/code&gt;&lt;code&gt;/&lt;/code&gt;&lt;code&gt;[&lt;/code&gt;&lt;code&gt;]&lt;/code&gt;&lt;code&gt;,&lt;/code&gt;. A literal &lt;code&gt;'&lt;/code&gt; can be specified with &lt;code&gt;''&lt;/code&gt;.</source>
          <target state="translated">다른 문자열은 &lt;code&gt;''&lt;/code&gt; 에 넣어서 삽입 할 수 있습니다 . 예를 들어 &lt;code&gt;hh'-&amp;gt;'mm&lt;/code&gt; 은 &lt;code&gt;01-&amp;gt;56&lt;/code&gt; 을 제공 합니다. 다음 문자를 인용하지 않고 삽입 할 수 있습니다 &lt;code&gt;:&lt;/code&gt; &lt;code&gt;-&lt;/code&gt; &lt;code&gt;(&lt;/code&gt; &lt;code&gt;)&lt;/code&gt; &lt;code&gt;/&lt;/code&gt; &lt;code&gt;[&lt;/code&gt; &lt;code&gt;]&lt;/code&gt; &lt;code&gt;,&lt;/code&gt; . 리터럴 &lt;code&gt;'&lt;/code&gt; 은 &lt;code&gt;''&lt;/code&gt; 로 지정할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="8db18f7107204fed8fe24c5d3014de56d0af6c5d" translate="yes" xml:space="preserve">
          <source>Other tokens</source>
          <target state="translated">다른 토큰</target>
        </trans-unit>
        <trans-unit id="d65b86f3209b622242b01d2656aba539a4c22285" translate="yes" xml:space="preserve">
          <source>Other useful iterators for collections (like arrays and sequences) are</source>
          <target state="translated">컬렉션에 유용한 다른 반복자 (예 : 배열 및 시퀀스)는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="2d2d7e0a58dc8427e382ddd731db370ec009572b" translate="yes" xml:space="preserve">
          <source>Otherwise precedence is determined by the first character.</source>
          <target state="translated">그렇지 않으면 우선 순위는 첫 번째 문자에 의해 결정됩니다.</target>
        </trans-unit>
        <trans-unit id="21bc9e76f2a8c2a0eaf537c08d3d36f6d8085e56" translate="yes" xml:space="preserve">
          <source>Otherwise returns an empty string.</source>
          <target state="translated">그렇지 않으면 빈 문자열을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="0bdd4c9ffbb5fd3025e9485c4feb564db99a1d5f" translate="yes" xml:space="preserve">
          <source>Our first attempt will start by modifying the program to generate a compile time string with the &lt;em&gt;generated source code&lt;/em&gt;, which we then pass to the &lt;code&gt;parseStmt&lt;/code&gt; proc from the &lt;a href=&quot;macros&quot;&gt;macros module&lt;/a&gt;. Here is the modified source code implementing the macro:</source>
          <target state="translated">첫 번째 시도는 프로그램을 수정하여 &lt;em&gt;생성 된 소스 코드&lt;/em&gt; 로 컴파일 타임 문자열을 생성하는 것부터 시작합니다. 그런 다음 &lt;a href=&quot;macros&quot;&gt;매크로 모듈&lt;/a&gt; 에서 &lt;code&gt;parseStmt&lt;/code&gt; proc에 전달합니다. . 다음은 매크로를 구현 한 수정 된 소스 코드입니다.</target>
        </trans-unit>
        <trans-unit id="4bed336194a9a5c86b6a734f03b3570d2aae1a68" translate="yes" xml:space="preserve">
          <source>Output</source>
          <target state="translated">Output</target>
        </trans-unit>
        <trans-unit id="f3c8c95c5e534bcd2ea0034a0d83177efa6923f4" translate="yes" xml:space="preserve">
          <source>Output:</source>
          <target state="translated">Output:</target>
        </trans-unit>
        <trans-unit id="6ee76fa98a639a0ac269010b7032639b0a171647" translate="yes" xml:space="preserve">
          <source>Outputs:</source>
          <target state="translated">Outputs:</target>
        </trans-unit>
        <trans-unit id="1458e0711b267bc74f8fee698a4064944483ced7" translate="yes" xml:space="preserve">
          <source>Overflow: operation produces a result that exceeds the range of the exponent, for example MAXDOUBLE+0.0000000000001e308.</source>
          <target state="translated">오버 플로우 : 연산은 지수 범위 (예 : MAXDOUBLE + 0.0000000000001e308)를 초과하는 결과를 생성합니다.</target>
        </trans-unit>
        <trans-unit id="754c102f9b75ce776185c568a14f1c8a51acdc8a" translate="yes" xml:space="preserve">
          <source>Overload resolution can be further influenced by constraining the set of types that will match the type param:</source>
          <target state="translated">형식 매개 변수와 일치하는 형식 집합을 제한하면 과부하 해결에 더 많은 영향을 줄 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="7fa7936a516e9b4405cfaaa07e91ba994298a243" translate="yes" xml:space="preserve">
          <source>Overload that validates &lt;code&gt;f&lt;/code&gt; at compile time.</source>
          <target state="translated">&lt;code&gt;f&lt;/code&gt; 를 검증하는 과부하컴파일시 .</target>
        </trans-unit>
        <trans-unit id="9c00e2ea8b8b406447c26bdcb6148e11ef275602" translate="yes" xml:space="preserve">
          <source>Overload that validates &lt;code&gt;format&lt;/code&gt; at compile time.</source>
          <target state="translated">&lt;code&gt;format&lt;/code&gt; 을 확인하는 과부하컴파일 타임에 .</target>
        </trans-unit>
        <trans-unit id="084d89d78f9253e5971aa14b7a1c146ed66021d5" translate="yes" xml:space="preserve">
          <source>Overloaded procedures</source>
          <target state="translated">과부하 절차</target>
        </trans-unit>
        <trans-unit id="52682dea26ce453286dbc5b5476302bf2f155d52" translate="yes" xml:space="preserve">
          <source>Overloading based on &amp;#x27;var T&amp;#x27;</source>
          <target state="translated">'var T'에 따른 과부하</target>
        </trans-unit>
        <trans-unit id="fdfc3d44da0fc76ce20708147d4fa0f06487870d" translate="yes" xml:space="preserve">
          <source>Overloading based on 'var T'</source>
          <target state="translated">'var T'에 따른 과부하</target>
        </trans-unit>
        <trans-unit id="376919dad96314f113fa2e51189fad0ab6b8a289" translate="yes" xml:space="preserve">
          <source>Overloading of the subscript operator</source>
          <target state="translated">아래 첨자 연산자의 오버로드</target>
        </trans-unit>
        <trans-unit id="856f6c8643871a65621d9a78bd00b337b84e3743" translate="yes" xml:space="preserve">
          <source>Overloading resolution</source>
          <target state="translated">과부하 해상도</target>
        </trans-unit>
        <trans-unit id="59d786986f63a664027eb772a26d80c3f7a0abe9" translate="yes" xml:space="preserve">
          <source>Override this method in custom loggers. Default implementation does nothing.</source>
          <target state="translated">사용자 정의 로거에서이 메소드를 대체하십시오. 기본 구현은 아무것도하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="a7bf096f89a1c09f22a68174532321948a126b7a" translate="yes" xml:space="preserve">
          <source>PCRE is a library of functions to support regular expressions whose syntax and semantics are as close as possible to those of the Perl 5 language.</source>
          <target state="translated">PCRE는 구문과 의미가 Perl 5 언어의 구문 및 의미와 가능한 정규식을 지원하는 함수 라이브러리입니다.</target>
        </trans-unit>
        <trans-unit id="595a895491f3a0cc703f76860a5a4b9d42a6ea7f" translate="yes" xml:space="preserve">
          <source>PEG construction</source>
          <target state="translated">PEG 구성</target>
        </trans-unit>
        <trans-unit id="118ee2de963e33508b97b815b8c557728d365a9c" translate="yes" xml:space="preserve">
          <source>PEG syntax and semantics</source>
          <target state="translated">PEG 구문 및 의미</target>
        </trans-unit>
        <trans-unit id="9bde7e84a708b95057b420b93ae5d95c394c2f01" translate="yes" xml:space="preserve">
          <source>PEG vs regular expression</source>
          <target state="translated">PEG 대 정규식</target>
        </trans-unit>
        <trans-unit id="567edf4105fe83ec09be7bbd5ad833d065991b7e" translate="yes" xml:space="preserve">
          <source>POSIX character class (only if followed by POSIX syntax)</source>
          <target state="translated">POSIX 문자 클래스 (POSIX 구문이 뒤에 오는 경우에만)</target>
        </trans-unit>
        <trans-unit id="e3896dc47c849389aad6b68320cef38af4776a63" translate="yes" xml:space="preserve">
          <source>POSIX-compliant systems on conventional hardware are usually pretty easy to port: Add the platform to &lt;code&gt;platform&lt;/code&gt; (if it is not already listed there), check that the OS, System modules work and recompile Nim.</source>
          <target state="translated">기존 하드웨어의 POSIX 호환 시스템은 일반적으로 포팅이 매우 쉽습니다. 플랫폼을 &lt;code&gt;platform&lt;/code&gt; 추가하고 (아직 목록에없는 경우) OS, 시스템 모듈이 작동하는지 확인하고 Nim을 다시 컴파일하십시오.</target>
        </trans-unit>
        <trans-unit id="12142e28cc69313a619ae99c351fba5fe84b0a4b" translate="yes" xml:space="preserve">
          <source>POSTs &lt;code&gt;body&lt;/code&gt; to &lt;code&gt;url&lt;/code&gt; and returns the response's body as a string</source>
          <target state="translated">&lt;code&gt;body&lt;/code&gt; 을 &lt;code&gt;url&lt;/code&gt; POST 하고 응답 본문을 문자열로 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="2dbc1dded6bee0ca902ff7658892851595e373f2" translate="yes" xml:space="preserve">
          <source>POSTs &lt;code&gt;body&lt;/code&gt; to the &lt;code&gt;url&lt;/code&gt; and returns a &lt;code&gt;Response&lt;/code&gt; object.</source>
          <target state="translated">&lt;code&gt;url&lt;/code&gt; &lt;code&gt;body&lt;/code&gt; 을 게시 하고 &lt;code&gt;Response&lt;/code&gt; 객체를 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="332b04a11e1cc3787447391399cd62fd1868e0c6" translate="yes" xml:space="preserve">
          <source>Package level objects</source>
          <target state="translated">패키지 레벨 객체</target>
        </trans-unit>
        <trans-unit id="55fd3d981957b0d91d11e46f1e01dfd840b2014b" translate="yes" xml:space="preserve">
          <source>Packed pragma</source>
          <target state="translated">포장 된 pragma</target>
        </trans-unit>
        <trans-unit id="5510a92cb951dc073e6190edad274f134f704fb8" translate="yes" xml:space="preserve">
          <source>Parallel &amp;amp; Spawn</source>
          <target state="translated">병렬 및 스폰</target>
        </trans-unit>
        <trans-unit id="3b1299c53c7f5cf485c6482e9c854f429e16cdd6" translate="yes" xml:space="preserve">
          <source>Parallel statement</source>
          <target state="translated">병렬 진술</target>
        </trans-unit>
        <trans-unit id="eec7d291b5a6446b7643c94e8e46ada61a750299" translate="yes" xml:space="preserve">
          <source>Parameter constraints</source>
          <target state="translated">파라미터 제약</target>
        </trans-unit>
        <trans-unit id="6edec2e5d0a7a5dbb4aae5b4adaf9693a07b89ea" translate="yes" xml:space="preserve">
          <source>Parameter constraints can also be used for ordinary routine parameters; these constraints affect ordinary overloading resolution then:</source>
          <target state="translated">매개 변수 제한 조건은 일반 루틴 매개 변수에도 사용할 수 있습니다. 이러한 제약은 일반적인 오버로드 해상도에 영향을 미칩니다.</target>
        </trans-unit>
        <trans-unit id="f1a6890392c7940ddb0108d029ad337fb538b0dc" translate="yes" xml:space="preserve">
          <source>Parameter substitution</source>
          <target state="translated">매개 변수 대체</target>
        </trans-unit>
        <trans-unit id="a975eea30db9fa05003e3b5097688bd49ec7e01b" translate="yes" xml:space="preserve">
          <source>Parameters</source>
          <target state="translated">Parameters</target>
        </trans-unit>
        <trans-unit id="248b028facc0fd21c2e902405b8d5a47c01d6c40" translate="yes" xml:space="preserve">
          <source>Parameters and their defaults:</source>
          <target state="translated">매개 변수 및 기본값 :</target>
        </trans-unit>
        <trans-unit id="0f206e21ffd2fb787832ab9df479679c8199f0e6" translate="yes" xml:space="preserve">
          <source>Parameters are immutable in the procedure body. By default, their value cannot be changed because this allows the compiler to implement parameter passing in the most efficient way. If a mutable variable is needed inside the procedure, it has to be declared with &lt;code&gt;var&lt;/code&gt; in the procedure body. Shadowing the parameter name is possible, and actually an idiom:</source>
          <target state="translated">프로 시저 본문에서 매개 변수를 변경할 수 없습니다. 컴파일러는 가장 효율적인 방식으로 매개 변수 전달을 구현할 수 있으므로 기본적으로 값을 변경할 수 없습니다. 프로 시저 내부에 가변 변수가 필요한 경우 프로 시저 본문에서 &lt;code&gt;var&lt;/code&gt; 로 선언 해야합니다. 매개 변수 이름을 섀도 잉하는 것은 가능하며 실제로는 관용구입니다.</target>
        </trans-unit>
        <trans-unit id="0fa46df5cd24d9e242819c5e1aa5a6733dc8ec59" translate="yes" xml:space="preserve">
          <source>Parameters can be declared mutable and so allow the proc to modify those arguments, by using the type modifier &lt;em&gt;var&lt;/em&gt;.</source>
          <target state="translated">매개 변수는 변경 가능으로 선언 될 수 있으므로 type 수정 자 &lt;em&gt;var를&lt;/em&gt; 사용하여 proc가 해당 인수를 수정할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="bb1a33ba432c2fafb1613ca7e699e06e64431463" translate="yes" xml:space="preserve">
          <source>Parameters in a pattern are type checked in the matching process. If a parameter is of the type &lt;code&gt;varargs&lt;/code&gt; it is treated specially and it can match 0 or more arguments in the AST to be matched against:</source>
          <target state="translated">패턴의 매개 변수는 일치 프로세스에서 유형 확인됩니다. 매개 변수가 &lt;code&gt;varargs&lt;/code&gt; 유형 인 경우 특수하게 처리되며 AST에서 0 개 이상의 인수와 일치하여 일치시킬 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="381c775599d6e4185d4410725809e360928357cd" translate="yes" xml:space="preserve">
          <source>Parameters:</source>
          <target state="translated">Parameters:</target>
        </trans-unit>
        <trans-unit id="f9627107a88876f4aaf6d7e0b0c19984c3a631ae" translate="yes" xml:space="preserve">
          <source>Parentheses</source>
          <target state="translated">Parentheses</target>
        </trans-unit>
        <trans-unit id="127effbb71ba19570ab235baa525f232fbd22004" translate="yes" xml:space="preserve">
          <source>Parentheses for affecting operator precedence or tuple construction are built with the &lt;code&gt;nnkPar&lt;/code&gt; node.</source>
          <target state="translated">연산자 우선 순위 또는 튜플 구성에 영향을주는 괄호는 &lt;code&gt;nnkPar&lt;/code&gt; 노드로 작성됩니다.</target>
        </trans-unit>
        <trans-unit id="efdb99a054fb37fae9696b10ed15efeeb9f36b28" translate="yes" xml:space="preserve">
          <source>Parsers</source>
          <target state="translated">Parsers</target>
        </trans-unit>
        <trans-unit id="92c8de0d487854ee3be6455d253f7500550cee2d" translate="yes" xml:space="preserve">
          <source>Parses &lt;code&gt;input&lt;/code&gt; as a &lt;code&gt;DateTime&lt;/code&gt; using the format specified by &lt;code&gt;f&lt;/code&gt;. If no UTC offset was parsed, then &lt;code&gt;input&lt;/code&gt; is assumed to be specified in the &lt;code&gt;zone&lt;/code&gt; timezone. If a UTC offset was parsed, the result will be converted to the &lt;code&gt;zone&lt;/code&gt; timezone.</source>
          <target state="translated">&lt;code&gt;f&lt;/code&gt; 로 지정된 형식을 사용하여 &lt;code&gt;input&lt;/code&gt; 을 &lt;code&gt;DateTime&lt;/code&gt; 으로 구문 분석 합니다 . UTC 오프셋이 구문 분석되지 않은 경우 &lt;code&gt;zone&lt;/code&gt; 시간대 에 &lt;code&gt;input&lt;/code&gt; 이 지정된 것으로 가정 합니다. UTC 오프셋이 구문 분석 된 경우 결과는 &lt;code&gt;zone&lt;/code&gt; 시간대 로 변환됩니다 .</target>
        </trans-unit>
        <trans-unit id="7ca7a029bb84bff8ec1168a8bf88514632d40ff1" translate="yes" xml:space="preserve">
          <source>Parses &lt;em&gt;file&lt;/em&gt; into a &lt;em&gt;JsonNode&lt;/em&gt;. If &lt;em&gt;file&lt;/em&gt; contains extra data, it will raise &lt;em&gt;JsonParsingError&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;파일&lt;/em&gt; 을 &lt;em&gt;JsonNode&lt;/em&gt; 로 구문 분석 &lt;em&gt;합니다&lt;/em&gt; . &lt;em&gt;파일&lt;/em&gt; 에 추가 데이터가 포함되어 있으면 &lt;em&gt;JsonParsingError가 발생&lt;/em&gt; 합니다.</target>
        </trans-unit>
        <trans-unit id="c31988daf224c3e5481844d9affd370b85ab0c4b" translate="yes" xml:space="preserve">
          <source>Parses JSON from &lt;em&gt;buffer&lt;/em&gt;. If &lt;em&gt;buffer&lt;/em&gt; contains extra data, it will raise &lt;em&gt;JsonParsingError&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;buffer&lt;/em&gt; 에서 JSON을 구문 분석 &lt;em&gt;합니다&lt;/em&gt; . &lt;em&gt;버퍼&lt;/em&gt; 에 추가 데이터가 포함되어 있으면 &lt;em&gt;JsonParsingError가 발생&lt;/em&gt; 합니다.</target>
        </trans-unit>
        <trans-unit id="c83d8c3603707a9ecc2dd84a9a6037c204951a36" translate="yes" xml:space="preserve">
          <source>Parses Sexp from &lt;em&gt;buffer&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;버퍼&lt;/em&gt; 에서 Sexp를 구문 분석 &lt;em&gt;합니다&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="ac7b270c2a1c4209369629ad62e2046102416eaf" translate="yes" xml:space="preserve">
          <source>Parses a URI and returns it.</source>
          <target state="translated">URI를 구문 분석하여 반환합니다.</target>
        </trans-unit>
        <trans-unit id="fec7d8bb1b5440dcea9f8d95176ab435560994e3" translate="yes" xml:space="preserve">
          <source>Parses a URI. The &lt;em&gt;result&lt;/em&gt; variable will be cleared before.</source>
          <target state="translated">URI를 구문 분석합니다. &lt;em&gt;결과&lt;/em&gt; 변수는 이전에 삭제됩니다.</target>
        </trans-unit>
        <trans-unit id="d18146fc030fe2a6ab8885a719a469a90008e5f4" translate="yes" xml:space="preserve">
          <source>Parses a binary integer value contained in &lt;em&gt;s&lt;/em&gt;.</source>
          <target state="translated">에 포함 된 진 정수 값 구문 분석 &lt;em&gt;들&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="835e144c44ca9aa9a0c3bc52fffba2a23a756070" translate="yes" xml:space="preserve">
          <source>Parses a decimal floating point value contained in &lt;em&gt;s&lt;/em&gt;. If &lt;em&gt;s&lt;/em&gt; is not a valid floating point number, &lt;em&gt;ValueError&lt;/em&gt; is raised. &lt;code&gt;NAN&lt;/code&gt;, &lt;code&gt;INF&lt;/code&gt;, &lt;code&gt;-INF&lt;/code&gt; are also supported (case insensitive comparison).</source>
          <target state="translated">부동 소수점 값에 포함 된 소수 해석해 &lt;em&gt;들&lt;/em&gt; . &lt;em&gt;s&lt;/em&gt; 가 유효한 부동 소수점 숫자가 아닌 경우 &lt;em&gt;ValueError&lt;/em&gt; 가 발생합니다. &lt;code&gt;NAN&lt;/code&gt; , &lt;code&gt;INF&lt;/code&gt; , &lt;code&gt;-INF&lt;/code&gt; 도 지원됩니다 (대소 문자를 구분하지 않음).</target>
        </trans-unit>
        <trans-unit id="95acbbe3645191c11345e3af876888af39d5fe0a" translate="yes" xml:space="preserve">
          <source>Parses a decimal integer value contained in &lt;em&gt;s&lt;/em&gt;.</source>
          <target state="translated">구문 분석에 포함 된 진수 정수 값 &lt;em&gt;의&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="ed0e8f3670947e2eebff34e6614bd7b5cc662d7c" translate="yes" xml:space="preserve">
          <source>Parses a decimal unsigned integer value contained in &lt;em&gt;s&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;s에&lt;/em&gt; 포함 된 10 진수 부호없는 정수 값을 구문 분석합니다 .</target>
        </trans-unit>
        <trans-unit id="2552cef1d7b2fd79db3dae66bea932dea01f7f48" translate="yes" xml:space="preserve">
          <source>Parses a hexadecimal integer value contained in &lt;em&gt;s&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;s에&lt;/em&gt; 포함 된 16 진수 정수 값을 구문 분석합니다 .</target>
        </trans-unit>
        <trans-unit id="fc2488ed821276fa08bab01cec3a67e70fc3f6f8" translate="yes" xml:space="preserve">
          <source>Parses a hexadecimal number and stores its value in &lt;code&gt;number&lt;/code&gt;.</source>
          <target state="translated">16 진수를 구문 분석하고 그 값을 &lt;code&gt;number&lt;/code&gt; 에 저장합니다 .</target>
        </trans-unit>
        <trans-unit id="52772096a4233cc51e1600d105de8977b1778a95" translate="yes" xml:space="preserve">
          <source>Parses a single raw header HTTP line into key value pairs.</source>
          <target state="translated">단일 원시 헤더 HTTP 행을 키 값 쌍으로 구문 분석합니다.</target>
        </trans-unit>
        <trans-unit id="42c29907580552c41f83b6dee8503b24b04303ca" translate="yes" xml:space="preserve">
          <source>Parses a value into a &lt;em&gt;bool&lt;/em&gt;.</source>
          <target state="translated">값을 &lt;em&gt;bool&lt;/em&gt; 로 구문 분석합니다 .</target>
        </trans-unit>
        <trans-unit id="410e8b23cd46010b49b0dd0e3914dc4ecc9e1ca5" translate="yes" xml:space="preserve">
          <source>Parses an IP address Raises EInvalidValue on error</source>
          <target state="translated">IP 주소 구문 분석 오류 발생시 EInvalidValue가 발생합니다</target>
        </trans-unit>
        <trans-unit id="2a6850ab1bcfc38172914099c85e87137a9e1a8e" translate="yes" xml:space="preserve">
          <source>Parses an binary number and stores its value in &lt;code&gt;number&lt;/code&gt;. Returns the number of the parsed characters or 0 in case of an error.</source>
          <target state="translated">이진수를 구문 분석하고 그 값을 &lt;code&gt;number&lt;/code&gt; 에 저장합니다 . 파싱 ​​된 문자 수를 반환하거나 오류가 발생한 경우 0을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="52ecab5e0e696e851dd2d8e05a4efb7aef630d77" translate="yes" xml:space="preserve">
          <source>Parses an enum &lt;code&gt;T&lt;/code&gt;.</source>
          <target state="translated">열거 형 &lt;code&gt;T&lt;/code&gt; 를 구문 분석합니다 .</target>
        </trans-unit>
        <trans-unit id="1300628673257382b63897d5a63358653f3d654e" translate="yes" xml:space="preserve">
          <source>Parses an octal integer value contained in &lt;em&gt;s&lt;/em&gt;.</source>
          <target state="translated">에 포함 된 진수 정수 값 구문 분석 &lt;em&gt;들&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="77b4c05a71f0a355fc50b443e92107cc745a1c8a" translate="yes" xml:space="preserve">
          <source>Parses an octal number and stores its value in &lt;code&gt;number&lt;/code&gt;. Returns the number of the parsed characters or 0 in case of an error.</source>
          <target state="translated">8 진수를 구문 분석하고 그 값을 &lt;code&gt;number&lt;/code&gt; 에 저장합니다 . 파싱 ​​된 문자 수를 반환하거나 오류가 발생한 경우 0을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="541ca66d4dbc79404bc942d6bfb6c2be8439048d" translate="yes" xml:space="preserve">
          <source>Parses from a buffer &lt;em&gt;s&lt;/em&gt; into a &lt;em&gt;SexpNode&lt;/em&gt;.</source>
          <target state="translated">버퍼로부터의 파스 &lt;em&gt;S&lt;/em&gt; (A) 내로 &lt;em&gt;SexpNode&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="d8f09fb29abff457c84ba95e0bc8011331d06c2a" translate="yes" xml:space="preserve">
          <source>Parses from a stream &lt;em&gt;s&lt;/em&gt; into a &lt;em&gt;JsonNode&lt;/em&gt;. &lt;em&gt;filename&lt;/em&gt; is only needed for nice error messages. If &lt;em&gt;s&lt;/em&gt; contains extra data, it will raise &lt;em&gt;JsonParsingError&lt;/em&gt;.</source>
          <target state="translated">스트림에서 구문 분석 &lt;em&gt;의&lt;/em&gt; 에 &lt;em&gt;JsonNode&lt;/em&gt; . &lt;em&gt;filename&lt;/em&gt; 은 멋진 오류 메시지에만 필요합니다. &lt;em&gt;s&lt;/em&gt; 에 추가 데이터가 포함되어 있으면 &lt;em&gt;JsonParsingError가 발생&lt;/em&gt; 합니다.</target>
        </trans-unit>
        <trans-unit id="7392bd1dfd3616a852a08b90df502af326331916" translate="yes" xml:space="preserve">
          <source>Parses the HTML from stream &lt;em&gt;s&lt;/em&gt; and returns a &lt;code&gt;XmlNode&lt;/code&gt;. All parsing errors are ignored.</source>
          <target state="translated">스트림에서 HTML 구문 분석 &lt;em&gt;들&lt;/em&gt; 과 반환 &lt;code&gt;XmlNode&lt;/code&gt; . 모든 구문 분석 오류는 무시됩니다.</target>
        </trans-unit>
        <trans-unit id="9d6b6e4325404bd4282ae6db6786d3c6cdde20d0" translate="yes" xml:space="preserve">
          <source>Parses the HTML from string &lt;code&gt;html&lt;/code&gt; and returns a &lt;code&gt;XmlNode&lt;/code&gt;. All parsing errors are ignored.</source>
          <target state="translated">문자열 &lt;code&gt;html&lt;/code&gt; 에서 HTML을 구문 분석하고 &lt;code&gt;XmlNode&lt;/code&gt; 를 반환합니다 . 모든 구문 분석 오류는 무시됩니다.</target>
        </trans-unit>
        <trans-unit id="1b291cc50ee23e8b1901cb7970d7d44a0a902e25" translate="yes" xml:space="preserve">
          <source>Parses the XML from stream &lt;code&gt;s&lt;/code&gt; and returns a &lt;code&gt;XmlNode&lt;/code&gt;. All parsing errors are turned into an &lt;code&gt;XmlError&lt;/code&gt; exception.</source>
          <target state="translated">스트림에서 XML 파싱 &lt;code&gt;s&lt;/code&gt; 과 반환 &lt;code&gt;XmlNode&lt;/code&gt; . 모든 구문 분석 오류는 &lt;code&gt;XmlError&lt;/code&gt; 예외 로 바뀝니다 .</target>
        </trans-unit>
        <trans-unit id="377e589d2efc7bd7f0d783557a0305ff1980a8dc" translate="yes" xml:space="preserve">
          <source>Parses the XML from stream &lt;code&gt;s&lt;/code&gt; and returns a &lt;code&gt;XmlNode&lt;/code&gt;. Every occurred parsing error is added to the &lt;code&gt;errors&lt;/code&gt; sequence.</source>
          <target state="translated">스트림에서 XML 파싱 &lt;code&gt;s&lt;/code&gt; 과 반환 &lt;code&gt;XmlNode&lt;/code&gt; . 발생한 모든 구문 분석 오류가 &lt;code&gt;errors&lt;/code&gt; 순서에 추가됩니다 .</target>
        </trans-unit>
        <trans-unit id="693b35a301ba4a3e77a1617dfcdfe0c2eea41014" translate="yes" xml:space="preserve">
          <source>Parses the XML from stream &lt;em&gt;s&lt;/em&gt; and returns a &lt;code&gt;XmlNode&lt;/code&gt;. Every occurred parsing error is added to the &lt;em&gt;errors&lt;/em&gt; sequence.</source>
          <target state="translated">스트림에서 XML 파싱 &lt;em&gt;들&lt;/em&gt; 과 반환 &lt;code&gt;XmlNode&lt;/code&gt; . 발생한 모든 구문 분석 오류가 &lt;em&gt;오류&lt;/em&gt; 순서에 추가됩니다 .</target>
        </trans-unit>
        <trans-unit id="000730be1a0f93678cf7000c57f6c22e66d7b0b4" translate="yes" xml:space="preserve">
          <source>Parses the XML from string &lt;code&gt;str&lt;/code&gt; and returns a &lt;code&gt;XmlNode&lt;/code&gt;. All parsing errors are turned into an &lt;code&gt;XmlError&lt;/code&gt; exception.</source>
          <target state="translated">문자열 &lt;code&gt;str&lt;/code&gt; 에서 XML을 구문 분석하고 &lt;code&gt;XmlNode&lt;/code&gt; 를 반환합니다 . 모든 구문 분석 오류는 &lt;code&gt;XmlError&lt;/code&gt; 예외 로 바뀝니다 .</target>
        </trans-unit>
        <trans-unit id="0d46a080325775ed12fd3ffd5aa0a8d40db7175c" translate="yes" xml:space="preserve">
          <source>Parsing a string into an AST which consists of &lt;em&gt;Peg&lt;/em&gt; nodes with the &lt;em&gt;peg&lt;/em&gt; proc.</source>
          <target state="translated">&lt;em&gt;peg&lt;/em&gt; proc 이있는 &lt;em&gt;Peg&lt;/em&gt; 노드 로 구성된 AST로 문자열을 구문 분석합니다 .&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="6d1213aa0c980986abc9cfe893f564f800d35d51" translate="yes" xml:space="preserve">
          <source>Parsing and Formatting Dates</source>
          <target state="translated">날짜 구문 분석 및 형식화</target>
        </trans-unit>
        <trans-unit id="e8de9b67e60bfc9e5a53216bb30c98671e868ddb" translate="yes" xml:space="preserve">
          <source>Parsing idetools output</source>
          <target state="translated">idetools 출력 구문 분석</target>
        </trans-unit>
        <trans-unit id="1800737251d65799e8ed6a97afb24d8a2b9918ef" translate="yes" xml:space="preserve">
          <source>Parsing nimsuggest output</source>
          <target state="translated">가장 큰 출력 구문 분석</target>
        </trans-unit>
        <trans-unit id="5a01db6f2d606f2a701b77fbab0924cc899be0e3" translate="yes" xml:space="preserve">
          <source>Part 2</source>
          <target state="translated">2 부</target>
        </trans-unit>
        <trans-unit id="859cfaaaeaf6a8ced2a1b65b58557fb95d875c48" translate="yes" xml:space="preserve">
          <source>Part of a pattern that is in square brackets is called a &quot;character class&quot;. In a character class the only metacharacters are:</source>
          <target state="translated">대괄호 안에있는 패턴의 일부를 &quot;문자 클래스&quot;라고합니다. 문자 클래스에서 유일한 메타 문자는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="9269695463c8a5faa720fae720afebc9f6ef9e73" translate="yes" xml:space="preserve">
          <source>Partial Output:</source>
          <target state="translated">부분 출력 :</target>
        </trans-unit>
        <trans-unit id="d2ed3ad5db69194cd3d8766327afd474a9733e0f" translate="yes" xml:space="preserve">
          <source>Partially supported OS: Windows (only sockets and user events), Solaris (files, sockets, handles and user events). Android (files, sockets, handles and user events).</source>
          <target state="translated">부분적으로 지원되는 OS : Windows (소켓 및 사용자 이벤트 만), Solaris (파일, 소켓, 핸들 및 사용자 이벤트) Android (파일, 소켓, 핸들 및 사용자 이벤트)</target>
        </trans-unit>
        <trans-unit id="8a171b6aa4025579258fcd2c8b48f01cfb4c51c1" translate="yes" xml:space="preserve">
          <source>Parts of the string that are enclosed in the curly braces are interpreted as Nim code, to escape an &lt;code&gt;{&lt;/code&gt; or &lt;code&gt;}&lt;/code&gt; double it.</source>
          <target state="translated">중괄호로 묶인 문자열 부분은 Nim 코드로 해석되어 &lt;code&gt;{&lt;/code&gt; 또는 &lt;code&gt;}&lt;/code&gt; 를 이스케이프 처리 합니다.</target>
        </trans-unit>
        <trans-unit id="8aca8fe67e97585de445057c4943ea7782cef87e" translate="yes" xml:space="preserve">
          <source>Pass the filename and an array of times to set the access and modification times respectively. If you pass nil as the array both attributes will be set to the current time.</source>
          <target state="translated">파일 이름과 시간 배열을 전달하여 액세스 및 수정 시간을 각각 설정하십시오. 배열로 nil을 전달하면 두 속성이 모두 현재 시간으로 설정됩니다.</target>
        </trans-unit>
        <trans-unit id="c6c5b9444c85f22cfca7c6842fd1c77d3d446d19" translate="yes" xml:space="preserve">
          <source>PassC pragma</source>
          <target state="translated">PassC pragma</target>
        </trans-unit>
        <trans-unit id="27478f48296583129eac069e5087f2d2b0da482f" translate="yes" xml:space="preserve">
          <source>PassL pragma</source>
          <target state="translated">PassL 프라 그마</target>
        </trans-unit>
        <trans-unit id="c1f8c2a994a126eaf7103a7c43409efdd75a983d" translate="yes" xml:space="preserve">
          <source>Passing a code block to a template</source>
          <target state="translated">코드 블록을 템플릿으로 전달</target>
        </trans-unit>
        <trans-unit id="519e39132bb98418cc0483cc446ccf5f3c8dcffe" translate="yes" xml:space="preserve">
          <source>Path</source>
          <target state="translated">Path</target>
        </trans-unit>
        <trans-unit id="e2643c3434dcb6df9c1e72e6681f1bedc8ada4a0" translate="yes" xml:space="preserve">
          <source>Path names are syntactically either Nim identifiers or string literals. If the path name is not a valid Nim identifier it needs to be a string literal:</source>
          <target state="translated">경로 이름은 구문 적으로 Nim 식별자 또는 문자열 리터럴입니다. 경로 이름이 유효한 Nim 식별자가 아닌 경우 문자열 리터럴이어야합니다.</target>
        </trans-unit>
        <trans-unit id="1fff6a31661b491fc40cc9c1ad7fe5e479cb7500" translate="yes" xml:space="preserve">
          <source>Pattern</source>
          <target state="translated">Pattern</target>
        </trans-unit>
        <trans-unit id="7b6c2f9c3abcefd6eb4c4d0a0b5007e45b97a311" translate="yes" xml:space="preserve">
          <source>Pattern operators</source>
          <target state="translated">패턴 연산자</target>
        </trans-unit>
        <trans-unit id="d82e5a058ac8dd2705ce01808437b2ad8b5084fa" translate="yes" xml:space="preserve">
          <source>Peeks a line from a stream &lt;em&gt;s&lt;/em&gt;. Note: This is not very efficient. Raises &lt;em&gt;EIO&lt;/em&gt; if an error occurred.</source>
          <target state="translated">스트림 &lt;em&gt;s&lt;/em&gt; 에서 한 줄을 찾습니다 . 참고 : 이것은 매우 효율적이지 않습니다. 레이즈 &lt;em&gt;EIO&lt;/em&gt; 에러가 발생하면.</target>
        </trans-unit>
        <trans-unit id="b5d4c57147bf5dd3bbcaf7bdfd58b0b2226cf25d" translate="yes" xml:space="preserve">
          <source>Per convention, all strings are UTF-8 strings, but this is not enforced. For example, when reading strings from binary files, they are merely a sequence of bytes. The index operation &lt;code&gt;s[i]&lt;/code&gt; means the i-th &lt;em&gt;char&lt;/em&gt; of &lt;code&gt;s&lt;/code&gt;, not the i-th &lt;em&gt;unichar&lt;/em&gt;. The iterator &lt;code&gt;runes&lt;/code&gt; from the &lt;a href=&quot;unicode&quot;&gt;unicode module&lt;/a&gt; can be used for iteration over all Unicode characters.</source>
          <target state="translated">규칙에 따라 모든 문자열은 UTF-8 문자열이지만 적용되지는 않습니다. 예를 들어, 이진 파일에서 문자열을 읽을 때는 단순히 바이트 시퀀스 일뿐입니다. 인덱스 연산 &lt;code&gt;s[i]&lt;/code&gt; 는 i 번째 &lt;em&gt;unichar가&lt;/em&gt; 아니라 &lt;code&gt;s&lt;/code&gt; 의 i 번째 &lt;em&gt;char&lt;/em&gt; 을 의미합니다 . 반복자의 &lt;code&gt;runes&lt;/code&gt; 로부터 &lt;a href=&quot;unicode&quot;&gt;유니 코드 모듈은&lt;/a&gt; 모든 유니 코드 문자를 통해 반복 사용할 수 있습니다.&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="ff72f9179ae9e4a2376a59a5c8d0eeb265a32c2e" translate="yes" xml:space="preserve">
          <source>Per default templates are &lt;span id=&quot;hygienic_2&quot;&gt;hygienic&lt;/span&gt;: Local identifiers declared in a template cannot be accessed in the instantiation context:</source>
          <target state="translated">기본 템플릿은 &lt;span id=&quot;hygienic_2&quot;&gt;위생적입니다&lt;/span&gt; . 인스턴스화 컨텍스트에서 템플릿에 선언 된 로컬 식별자에 액세스 할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="63c904559993935c470f516c8b549ca7f3640dbb" translate="yes" xml:space="preserve">
          <source>Performance</source>
          <target state="translated">Performance</target>
        </trans-unit>
        <trans-unit id="c1cd9242728b5c1a926850fd325c67f2fc62426b" translate="yes" xml:space="preserve">
          <source>Performs a deep copy of &lt;em&gt;a&lt;/em&gt;.</source>
          <target state="translated">의 딥 카피 수행 &lt;em&gt;을&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="88fc1469f461af1ae348df9943fa1632f7f69e69" translate="yes" xml:space="preserve">
          <source>Performs a left rotation on a range of elements. If you want to rotate right, use a negative &lt;code&gt;dist&lt;/code&gt;. Specifically, &lt;code&gt;rotateLeft&lt;/code&gt; rotates the elements at &lt;code&gt;slice&lt;/code&gt; by &lt;code&gt;dist&lt;/code&gt; positions. The element at index &lt;code&gt;slice.a + dist&lt;/code&gt; will be at index &lt;code&gt;slice.a&lt;/code&gt;. The element at index &lt;code&gt;slice.b&lt;/code&gt; will be at &lt;code&gt;slice.a + dist -1&lt;/code&gt;. The element at index &lt;code&gt;slice.a&lt;/code&gt; will be at &lt;code&gt;slice.b + 1 - dist&lt;/code&gt;. The element at index &lt;code&gt;slice.a + dist - 1&lt;/code&gt; will be at &lt;code&gt;slice.b&lt;/code&gt;.</source>
          <target state="translated">다양한 요소에서 왼쪽 회전을 수행합니다. 오른쪽으로 회전하려면 음수 &lt;code&gt;dist&lt;/code&gt; 를 사용하십시오 . 구체적 &lt;code&gt;rotateLeft&lt;/code&gt; 는 의 회전 요소 &lt;code&gt;slice&lt;/code&gt; 하여 &lt;code&gt;dist&lt;/code&gt; 위치. 인덱스에있는 요소 &lt;code&gt;slice.a + dist&lt;/code&gt; 인덱스에있을 것입니다 &lt;code&gt;slice.a&lt;/code&gt; . 인덱스의 요소 &lt;code&gt;slice.b&lt;/code&gt; 가 있을 것 &lt;code&gt;slice.a + dist -1&lt;/code&gt; . 인덱스에있는 요소 &lt;code&gt;slice.a&lt;/code&gt; 가 있을 것 &lt;code&gt;slice.b + 1 - dist&lt;/code&gt; . 인덱스에있는 요소 &lt;code&gt;slice.a + dist - 1&lt;/code&gt; 에있을 것입니다 &lt;code&gt;slice.b&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="d668e43bf0a5743410bd7ab9e0edf6b66e6ccd9e" translate="yes" xml:space="preserve">
          <source>Pipe operator</source>
          <target state="translated">파이프 오퍼레이터</target>
        </trans-unit>
        <trans-unit id="91502d9216b226c484d80d6fd0eebe1eb9ccca35" translate="yes" xml:space="preserve">
          <source>Please note that &lt;code&gt;static T&lt;/code&gt; is just a syntactic convenience for the underlying generic type &lt;code&gt;static[T]&lt;/code&gt;. The type param can be omitted to obtain the type class of all values known at compile-time. A more specific type class can be created by instantiating &lt;code&gt;static&lt;/code&gt; with another type class.</source>
          <target state="translated">주의하시기 바랍니다 &lt;code&gt;static T&lt;/code&gt; 단지 기본 제네릭 형식에 대한 구문 편리 &lt;code&gt;static[T]&lt;/code&gt; . 컴파일시 알려진 모든 값의 유형 클래스를 얻기 위해 type param을 생략 할 수 있습니다. 다른 유형 클래스를 사용하여 &lt;code&gt;static&lt;/code&gt; 을 인스턴스화하여보다 구체적인 유형 클래스를 작성할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="b6a448e8765ceed97b70d742a1fbff8cbe9813f8" translate="yes" xml:space="preserve">
          <source>Please note that Nim will treat the user-defined pointer-like types as proper alternatives to the built-in pointer types. That is, types such as &lt;em&gt;seq[AnnotatedPtr[T]]&lt;/em&gt; or &lt;em&gt;RingBuffer[AnnotatedPtr[T]]&lt;/em&gt; will also be considered covariant and you can create new pointer-like types by instantiating other user-defined pointer-like types.</source>
          <target state="translated">Nim은 사용자 정의 포인터와 유사한 유형을 내장 포인터 유형의 적절한 대안으로 취급합니다. 즉, &lt;em&gt;seq [AnnotatedPtr [T]]&lt;/em&gt; 또는 &lt;em&gt;RingBuffer [AnnotatedPtr [T]]&lt;/em&gt; 와 같은 유형도 공변량으로 간주되며 다른 사용자 정의 포인터 유사 유형을 인스턴스화하여 새 포인터 유사 유형을 작성할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c6121f8f77a7e5843548ab29d76b72f1fdf494af" translate="yes" xml:space="preserve">
          <source>Please note that generic concepts such as &lt;em&gt;Enumerable[T]&lt;/em&gt; can be matched against concrete types such as &lt;em&gt;string&lt;/em&gt;. Nim doesn't require the concept type to have the same number of parameters as the type being matched. If you wish to express a requirement towards the generic parameters of the matched type, you can use a type mapping operator such as &lt;em&gt;genericHead&lt;/em&gt; or &lt;em&gt;stripGenericParams&lt;/em&gt; within the body of the concept to obtain the uninstantiated version of the type, which you can then try to instantiate in any required way. For example, here is how one might define the classic &lt;em&gt;Functor&lt;/em&gt; concept from Haskell and then demonstrate that Nim's &lt;em&gt;Option[T]&lt;/em&gt; type is an instance of it:</source>
          <target state="translated">&lt;em&gt;Enumerable [T]&lt;/em&gt; 와 같은 일반적인 개념 은 &lt;em&gt;string&lt;/em&gt; 과 같은 구체적인 유형과 비교 될 수 있습니다 . Nim은 개념 유형에 일치하는 유형과 동일한 수의 매개 변수가 필요하지 않습니다. 일치하는 유형의 일반 매개 변수에 대한 요구 사항을 표현하려는 경우 개념 본문 내에서 &lt;em&gt;genericHead&lt;/em&gt; 또는 &lt;em&gt;stripGenericParams&lt;/em&gt; 와 같은 유형 맵핑 연산자를 사용하여 유형의 인스턴스화되지 않은 버전을 얻을 수 있습니다. 필요한 방식으로. 예를 들어, 다음은 Haskell 의 클래식 &lt;em&gt;Functor&lt;/em&gt; 개념을 정의한 다음 Nim의 &lt;em&gt;Option [T]&lt;/em&gt; 유형이 그 예임을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="f5ca38697a6a448107efa272f859558c7b3efed4" translate="yes" xml:space="preserve">
          <source>Please note that the &lt;code&gt;is&lt;/code&gt; operator allows one to easily verify the precise type signatures of the required operations, but since type inference and default parameters are still applied in the concept body, it's also possible to describe usage protocols that do not reveal implementation details.</source>
          <target state="translated">(가) 있습니다 &lt;code&gt;is&lt;/code&gt; 연산자는 하나 쉽게 필요한 작업의 정확한 유형의 서명을 확인 할 수 있지만 형식 유추 및 기본 매개 변수가 여전히 개념 본문에 적용되기 때문에, 그것은 구현 세부 사항을 공개하지 않는 사용 프로토콜을 설명하는 것도 가능합니다.</target>
        </trans-unit>
        <trans-unit id="1e396fac5e10a7261ea311d079d21e12d48a8e32" translate="yes" xml:space="preserve">
          <source>Pop and return the current smallest value, and add the new item. This is more efficient than pop() followed by push(), and can be more appropriate when using a fixed-size heap. Note that the value returned may be larger than item! That constrains reasonable uses of this routine unless written as part of a conditional replacement:</source>
          <target state="translated">현재 가장 작은 값을 팝하여 반환하고 새 항목을 추가하십시오. 이것은 pop () 다음에 push ()보다 효율적이며 고정 크기 힙을 사용할 때 더 적합 할 수 있습니다. 반환 된 값은 item보다 클 수 있습니다! 조건부 대체의 일부로 작성되지 않은 경우이 루틴의 합리적인 사용을 제한합니다.</target>
        </trans-unit>
        <trans-unit id="7a35ff20b244cefddc1604b170c46f6cbce2de97" translate="yes" xml:space="preserve">
          <source>Pop the smallest item off the heap, maintaining the heap invariant.</source>
          <target state="translated">힙을 변하지 않고 유지하면서 힙에서 가장 작은 항목을 팝하십시오.</target>
        </trans-unit>
        <trans-unit id="fe035157cda20b361ce30613e29b5d6f1a46b5fc" translate="yes" xml:space="preserve">
          <source>Port</source>
          <target state="translated">Port</target>
        </trans-unit>
        <trans-unit id="62eb2d652c640374db70b913a59f5d9da34f44b1" translate="yes" xml:space="preserve">
          <source>Porting Nim to a new architecture is pretty easy, since C is the most portable programming language (within certain limits) and Nim generates C code, porting the code generator is not necessary.</source>
          <target state="translated">C가 가장 이식 가능한 프로그래밍 언어이고 (특정 한도 내에서) Nim이 C 코드를 생성하므로 코드 생성기를 이식 할 필요가 없으므로 Nim을 새로운 아키텍처로 이식하는 것은 매우 쉽습니다.</target>
        </trans-unit>
        <trans-unit id="442a29f3c82b03d1fb72c4411cbd3b9a535b5dbf" translate="yes" xml:space="preserve">
          <source>Porting to new platforms</source>
          <target state="translated">새로운 플랫폼으로 포팅</target>
        </trans-unit>
        <trans-unit id="96938ac778902dc9c8a77d5d10c75b74615cc812" translate="yes" xml:space="preserve">
          <source>Position relative to which seek should happen</source>
          <target state="translated">탐색이 발생하는 상대 위치</target>
        </trans-unit>
        <trans-unit id="7350d4c47ea4aa0bc5e9515e97fb1d18e41403e7" translate="yes" xml:space="preserve">
          <source>Postfix operator call</source>
          <target state="translated">접미사 운영자 호출</target>
        </trans-unit>
        <trans-unit id="d857c4a3cba6bb11f909b140e46311890f7f21c4" translate="yes" xml:space="preserve">
          <source>Pragmas</source>
          <target state="translated">Pragmas</target>
        </trans-unit>
        <trans-unit id="5d8e7de7f25aa645cd3d52db842b4045251d9dd7" translate="yes" xml:space="preserve">
          <source>Pragmas are Nim's method to give the compiler additional information / commands without introducing a massive number of new keywords. Pragmas are processed on the fly during semantic checking. Pragmas are enclosed in the special &lt;code&gt;{.&lt;/code&gt; and &lt;code&gt;.}&lt;/code&gt; curly brackets. Pragmas are also often used as a first implementation to play with a language feature before a nicer syntax to access the feature becomes available.</source>
          <target state="translated">Pragmas는 많은 새로운 키워드를 도입하지 않고 컴파일러에게 추가 정보 / 명령을 제공하는 Nim의 방법입니다. 시맨틱 검사 중에 프라그 마가 즉시 처리됩니다. 프라그 마는 특수 &lt;code&gt;{.&lt;/code&gt; 및 &lt;code&gt;.}&lt;/code&gt; 중괄호. Pragma는 종종 기능에 액세스하기위한 더 좋은 구문을 사용할 수있게되기 전에 언어 기능을 가지고 노는 첫 번째 구현으로도 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="fe9ce5f74d6f359dacb6b5ff6609ec745d285ed1" translate="yes" xml:space="preserve">
          <source>Pragmas are Nim's method to give the compiler additional information/ commands without introducing a massive number of new keywords. Pragmas are enclosed in the special &lt;code&gt;{.&lt;/code&gt; and &lt;code&gt;.}&lt;/code&gt; curly dot brackets. This tutorial does not cover pragmas. See the &lt;a href=&quot;manual#pragmas&quot;&gt;manual&lt;/a&gt; or &lt;a href=&quot;nimc#additional-features&quot;&gt;user guide&lt;/a&gt; for a description of the available pragmas.</source>
          <target state="translated">Pragmas는 많은 새로운 키워드를 도입하지 않고도 컴파일러에게 추가 정보 / 명령을 제공하는 Nim의 방법입니다. 프라그 마는 특수 &lt;code&gt;{.&lt;/code&gt; 및 &lt;code&gt;.}&lt;/code&gt; 중괄호. 이 튜토리얼에서는 pragma를 다루지 않습니다. &lt;a href=&quot;manual#pragmas&quot;&gt;사용&lt;/a&gt; 가능한 pragma에 대한 설명은 설명서 또는 &lt;a href=&quot;nimc#additional-features&quot;&gt;사용 설명서&lt;/a&gt; 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="98fd755e5931021a9b89b9579124e072dc87d99f" translate="yes" xml:space="preserve">
          <source>Pre-defined floating point types</source>
          <target state="translated">사전 정의 된 부동 소수점 유형</target>
        </trans-unit>
        <trans-unit id="ddce2e3fda9f6f78c28f745b41b5c1d94ce0affb" translate="yes" xml:space="preserve">
          <source>Pre-defined integer types</source>
          <target state="translated">미리 정의 된 정수 유형</target>
        </trans-unit>
        <trans-unit id="ab86fb82a986460447b29bbb55ca5b9bf867bad6" translate="yes" xml:space="preserve">
          <source>Precedence</source>
          <target state="translated">Precedence</target>
        </trans-unit>
        <trans-unit id="e11b40e5dc046d6eacf2b9c0341a3b59b3ba5410" translate="yes" xml:space="preserve">
          <source>Precedence level</source>
          <target state="translated">우선 순위 수준</target>
        </trans-unit>
        <trans-unit id="9eee28bfd739e1debf4d3b892d013537ae16da9f" translate="yes" xml:space="preserve">
          <source>Predicate</source>
          <target state="translated">Predicate</target>
        </trans-unit>
        <trans-unit id="b360b99e5530a900c44998c81311dbde2b2172fa" translate="yes" xml:space="preserve">
          <source>Predicates that share their name with a keyword have to be escaped with backticks: `` &lt;em&gt;const&lt;/em&gt;&lt;code&gt;. The ``alias&lt;/code&gt; and &lt;code&gt;noalias&lt;/code&gt; predicates refer not only to the matching AST, but also to every other bound parameter; syntactically they need to occur after the ordinary AST predicates:</source>
          <target state="translated">키워드와 이름을 공유하는 술어는 역 따옴표로 이스케이프해야합니다 :`` &lt;em&gt;const &lt;/em&gt; &lt;code&gt;. The ``alias&lt;/code&gt; 및 &lt;code&gt;noalias&lt;/code&gt; 술어는 일치하는 AST뿐만 아니라 다른 모든 바인딩 된 매개 변수를 나타냅니다. 문법적으로 이들은 일반적인 AST 술어 다음에 발생해야합니다.</target>
        </trans-unit>
        <trans-unit id="2b151af2a194f19ff375b24827bd3223300579c0" translate="yes" xml:space="preserve">
          <source>Prefix operator call</source>
          <target state="translated">접두사 운영자 호출</target>
        </trans-unit>
        <trans-unit id="66495d0734591a26213f3a366af624feb0c83b41" translate="yes" xml:space="preserve">
          <source>Prepares a string for insertion into a XML document by escaping the XML special characters.</source>
          <target state="translated">XML 특수 문자를 이스케이프 처리하여 XML 문서에 삽입 할 문자열을 준비합니다.</target>
        </trans-unit>
        <trans-unit id="db44386f03d5b854ad6dafaca1b1eeb202b32004" translate="yes" xml:space="preserve">
          <source>Prepends the element x to the beginning of the sequence. Requires copying of the sequence</source>
          <target state="translated">x를 시퀀스의 시작 부분에 추가합니다. 시퀀스 복사 필요</target>
        </trans-unit>
        <trans-unit id="a5ecd31a75929e40768bb20c6e9a666bcfc1c0cf" translate="yes" xml:space="preserve">
          <source>Preprocess table &lt;em&gt;a&lt;/em&gt; for &lt;em&gt;sub&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;sub &lt;/em&gt;&lt;em&gt;에&lt;/em&gt; 대한 전처리 테이블 &lt;em&gt;a&lt;/em&gt; .&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="0ebd928fc5c21d8b23de923afa72f9b439e03d18" translate="yes" xml:space="preserve">
          <source>Preprocessor support</source>
          <target state="translated">전 처리기 지원</target>
        </trans-unit>
        <trans-unit id="78f94e0402b0663fec796a2cb153834ccd0300a2" translate="yes" xml:space="preserve">
          <source>Presumably this snippet of code could be used in a commercial software, reading a configuration file to display information about the person who bought the software. This external file would be generated by an online web shopping cart to be included along the program containing the license information:</source>
          <target state="translated">이 코드 조각은 상용 소프트웨어에서 사용되어 소프트웨어를 구입 한 사람에 대한 정보를 표시하는 구성 파일을 읽을 수 있습니다. 이 외부 파일은 온라인 웹 쇼핑 카트에 의해 생성되어 라이센스 정보가 포함 된 프로그램과 함께 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="bbaacc193c8d2a284014a58127bf356addea8297" translate="yes" xml:space="preserve">
          <source>Print out the checkpoints encountered so far and quit if &lt;code&gt;abortOnError&lt;/code&gt; is true. Otherwise, erase the checkpoints and indicate the test has failed (change exit code and test status). This template is useful for debugging, but is otherwise mostly used internally. Example:</source>
          <target state="translated">지금까지 발생한 검사 점을 인쇄하고 &lt;code&gt;abortOnError&lt;/code&gt; 가 true이면 종료 합니다. 그렇지 않으면 검사 점을 지우고 테스트가 실패했음을 나타냅니다 (종료 코드 및 테스트 상태 변경). 이 템플릿은 디버깅에 유용하지만 대부분 내부적으로 사용됩니다. 예:</target>
        </trans-unit>
        <trans-unit id="eb113d7d8beac65e410d096bf62f5df0c3b28a3c" translate="yes" xml:space="preserve">
          <source>Procedural type</source>
          <target state="translated">절차 유형</target>
        </trans-unit>
        <trans-unit id="9e7331be4f43593dd7df9b640d47a72f7445dbe7" translate="yes" xml:space="preserve">
          <source>Procedure calls of the form &lt;code&gt;p(X)&lt;/code&gt; are compile-time computable if &lt;code&gt;p&lt;/code&gt; is a proc without side-effects (see the &lt;a href=&quot;#pragmas-nosideeffect-pragma&quot;&gt;noSideEffect pragma&lt;/a&gt; for details) and if &lt;code&gt;X&lt;/code&gt; is a (possibly empty) list of compile-time computable arguments.</source>
          <target state="translated">&lt;code&gt;p&lt;/code&gt; 가 부작용이없는 proc (자세한 내용은 &lt;a href=&quot;#pragmas-nosideeffect-pragma&quot;&gt;noSideEffect pragma&lt;/a&gt; 참조)이고 &lt;code&gt;X&lt;/code&gt; 가 컴파일 타임 계산 가능한 인수의 목록 인 경우 &lt;code&gt;p(X)&lt;/code&gt; 형식의 프로 시저 호출 은 컴파일 타임 계산 가능합니다 .</target>
        </trans-unit>
        <trans-unit id="b8db867373f6b118d2afb0458feddadd86fe8e12" translate="yes" xml:space="preserve">
          <source>Procedure declaration</source>
          <target state="translated">절차 선언</target>
        </trans-unit>
        <trans-unit id="d682fc9dab69c1d2daf94fe72d9c9c2027249415" translate="yes" xml:space="preserve">
          <source>Procedures</source>
          <target state="translated">Procedures</target>
        </trans-unit>
        <trans-unit id="c7e7f6611bf2da78f49f8e451d842d8bd7ab42ec" translate="yes" xml:space="preserve">
          <source>Procedures always use static dispatch. For dynamic dispatch replace the &lt;code&gt;proc&lt;/code&gt; keyword by &lt;code&gt;method&lt;/code&gt;:</source>
          <target state="translated">프로시 저는 항상 정적 디스패치를 ​​사용합니다. 동적 디스패치의 경우 &lt;code&gt;proc&lt;/code&gt; 키워드를 &lt;code&gt;method&lt;/code&gt; 바꾸십시오 .</target>
        </trans-unit>
        <trans-unit id="8ad221890d30672f04664877c946ff70a32ff7b5" translate="yes" xml:space="preserve">
          <source>Procedures always use static dispatch. Multi-methods use dynamic dispatch. For dynamic dispatch to work on an object it should be a reference type as well.</source>
          <target state="translated">프로시 저는 항상 정적 디스패치를 ​​사용합니다. 다중 메서드는 동적 디스패치를 ​​사용합니다. 동적 디스패치가 객체에서 작동하려면 참조 유형이어야합니다.</target>
        </trans-unit>
        <trans-unit id="06fbd2dad7effcb2234aac62fd8428a3ba476436" translate="yes" xml:space="preserve">
          <source>Procedures can appear at the top level in a module as well as inside other scopes, in which case they are called nested procs. A nested proc can access local variables from its enclosing scope and if it does so it becomes a closure. Any captured variables are stored in a hidden additional argument to the closure (its environment) and they are accessed by reference by both the closure and its enclosing scope (i.e. any modifications made to them are visible in both places). The closure environment may be allocated on the heap or on the stack if the compiler determines that this would be safe.</source>
          <target state="translated">프로시 저는 모듈의 최상위 레벨과 다른 범위 내에서 나타날 수 있으며이 경우 중첩 된 프로 시저라고합니다. 중첩 된 proc은 포함 범위에서 로컬 변수에 액세스 할 수 있으며, 그렇게하면 클로저가됩니다. 캡처 된 변수는 클로저 (환경)에 대한 숨겨진 추가 인수에 저장되며 클로저와 해당 범위에 의해 참조로 액세스됩니다 (즉, 수정 된 내용은 두 곳에서 모두 볼 수 있음). 컴파일러가 안전한 것으로 판단되면 클로저 환경은 힙이나 스택에 할당 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e6d366db67df6a0b1e1efe0e08594bca71f8eee2" translate="yes" xml:space="preserve">
          <source>Procedures utilizing type classes in such manner are considered to be &lt;span id=&quot;implicitly-generic_1&quot;&gt;implicitly generic&lt;/span&gt;. They will be instantiated once for each unique combination of param types used within the program.</source>
          <target state="translated">이러한 방식으로 형식 클래스를 사용하는 절차는 &lt;span id=&quot;implicitly-generic_1&quot;&gt;암시 적으로 일반적인&lt;/span&gt; 것으로 간주됩니다 . 프로그램 내에서 사용되는 각각의 고유 한 매개 변수 유형 조합에 대해 한 번 인스턴스화됩니다.</target>
        </trans-unit>
        <trans-unit id="77d887d3c4269645cbb00a3f203259c5546c162d" translate="yes" xml:space="preserve">
          <source>Process the closure of all inner procs in one pass and accumulate the environments. This is however not always possible.</source>
          <target state="translated">모든 내부 proc의 폐쇄를 한 번에 처리하고 환경을 축적하십시오. 그러나 이것이 항상 가능한 것은 아닙니다.</target>
        </trans-unit>
        <trans-unit id="e63451d3cf90040c075dc1fe95aa1f7d7528c37f" translate="yes" xml:space="preserve">
          <source>Processing</source>
          <target state="translated">Processing</target>
        </trans-unit>
        <trans-unit id="9afbe384e2a83f2b02c509b5363d71ee79a38e3a" translate="yes" xml:space="preserve">
          <source>Procs</source>
          <target state="translated">Procs</target>
        </trans-unit>
        <trans-unit id="4311d5a41c23a4400f7edfce5e0b039536a0abc1" translate="yes" xml:space="preserve">
          <source>Procs as expressions can appear both as nested procs and inside top level executable code.</source>
          <target state="translated">식으로서의 proc는 중첩 된 proc 및 최상위 실행 코드 내부에 모두 나타날 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3a1616e4bc1aa2bed912867d0902aca437b90990" translate="yes" xml:space="preserve">
          <source>Procs can also be treated as expressions, in which case it's allowed to omit the proc's name.</source>
          <target state="translated">Procs는 표현식으로 취급 될 수도 있는데,이 경우 proc의 이름을 생략 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="57362afa37cf6acde07ad138b615e180f8f62a5b" translate="yes" xml:space="preserve">
          <source>Procs featuring &lt;code&gt;type&lt;/code&gt; params are considered implicitly generic. They will be instantiated for each unique combination of supplied types and within the body of the proc, the name of each param will refer to the bound concrete type:</source>
          <target state="translated">&lt;code&gt;type&lt;/code&gt; 매개 변수를 갖춘 프로세서 는 암시 적으로 일반적인 것으로 간주됩니다. 제공된 유형의 고유 한 조합과 proc 본문 내에서 인스턴스화되며 각 매개 변수의 이름은 바운드 콘크리트 유형을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="6342d3bbf4c02568a11954f011158915db9e2356" translate="yes" xml:space="preserve">
          <source>Procs have been provided to calculate statistics on arrays and sequences.</source>
          <target state="translated">배열 및 시퀀스에 대한 통계를 계산하기위한 프로세스가 제공되었습니다.</target>
        </trans-unit>
        <trans-unit id="cdad80c260c1b79fcf7078364eee12ddb03d0dbf" translate="yes" xml:space="preserve">
          <source>Procs written with the implicitly generic style will often need to refer to the type parameters of the matched generic type. They can be easily accessed using the dot syntax:</source>
          <target state="translated">암시 적으로 제네릭 스타일로 작성된 프로세스는 종종 일치하는 제네릭 형식의 형식 매개 변수를 참조해야합니다. 도트 구문을 사용하여 쉽게 액세스 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="9a5dd73eabe0ceec3510ddd56cff50a79d0fd6a6" translate="yes" xml:space="preserve">
          <source>Produces an XML tree for:</source>
          <target state="translated">다음을위한 XML 트리를 생성합니다.</target>
        </trans-unit>
        <trans-unit id="2fac879cf602e3396c116983a52de85ad6e251ad" translate="yes" xml:space="preserve">
          <source>Produces roughly this C code:</source>
          <target state="translated">대략이 C 코드를 생성합니다.</target>
        </trans-unit>
        <trans-unit id="960e8fddc698625d55770887235e931f448d8d54" translate="yes" xml:space="preserve">
          <source>Produces:</source>
          <target state="translated">Produces:</target>
        </trans-unit>
        <trans-unit id="a6d68bd4be10c0820c76fc8d06aecf226d4b6440" translate="yes" xml:space="preserve">
          <source>Program is executed.</source>
          <target state="translated">프로그램이 실행됩니다.</target>
        </trans-unit>
        <trans-unit id="4f17a83cbcff788a0cad5a770a0848dad49ec175" translate="yes" xml:space="preserve">
          <source>Progress reporting</source>
          <target state="translated">진행보고</target>
        </trans-unit>
        <trans-unit id="1f2140e31dbd92836ebf9c2bfdffac3015b3027f" translate="yes" xml:space="preserve">
          <source>Project switch</source>
          <target state="translated">프로젝트 스위치</target>
        </trans-unit>
        <trans-unit id="760874ddf5afe0d82343947ffb16ccd1781c1d3b" translate="yes" xml:space="preserve">
          <source>Proper thunk generation is harder because the proc that is to wrap could stem from a complex expression:</source>
          <target state="translated">랩핑 할 프로 시저가 복잡한 표현에서 나올 수 있기 때문에 적절한 썽크 생성이 더 어렵습니다.</target>
        </trans-unit>
        <trans-unit id="bc6c88db2f0703a9e2461a4a8060ccf1cb881998" translate="yes" xml:space="preserve">
          <source>Properties</source>
          <target state="translated">Properties</target>
        </trans-unit>
        <trans-unit id="5e49b9bd99ab4bc355bcfd55bdeb30deaad41741" translate="yes" xml:space="preserve">
          <source>Protecting general locations</source>
          <target state="translated">일반 위치 보호</target>
        </trans-unit>
        <trans-unit id="d8eec506723634351a9cba0d6d82397b9f72baf0" translate="yes" xml:space="preserve">
          <source>Protecting global variables</source>
          <target state="translated">전역 변수 보호</target>
        </trans-unit>
        <trans-unit id="157122474fc28e9dcab665a3696cb13a6fe9933e" translate="yes" xml:space="preserve">
          <source>Protocol version specifies the protocol to use. SSLv2, SSLv3, TLSv1 are available with the addition of &lt;code&gt;protSSLv23&lt;/code&gt; which allows for compatibility with all of them.</source>
          <target state="translated">프로토콜 버전은 사용할 프로토콜을 지정합니다. SSLv2, SSLv3, TLSv1은 &lt;code&gt;protSSLv23&lt;/code&gt; 을 추가하여 사용할 수 있어 모든 제품과 호환됩니다.</target>
        </trans-unit>
        <trans-unit id="e38d7d5b91755bfbdf05c15f5eb398d4e6becf82" translate="yes" xml:space="preserve">
          <source>Provide a restrictive API that can load/save the compiletime state to a file.</source>
          <target state="translated">컴파일 타임 상태를 파일로로드 / 저장할 수있는 제한적인 API를 제공하십시오.</target>
        </trans-unit>
        <trans-unit id="7b940e771b06f772546586fc239edc7c0e4b029b" translate="yes" xml:space="preserve">
          <source>Provide spaces around binary operators if that enhances readability.</source>
          <target state="translated">가독성을 향상시키는 경우 이진 연산자 주위에 공백을 제공하십시오.</target>
        </trans-unit>
        <trans-unit id="d1cea344353e26ba6f1565ed661d94f610ce9e4f" translate="yes" xml:space="preserve">
          <source>Proxy</source>
          <target state="translated">Proxy</target>
        </trans-unit>
        <trans-unit id="8ec4b541fad1239b548ff32ef94487dec816b95b" translate="yes" xml:space="preserve">
          <source>Pseudo import/include paths</source>
          <target state="translated">의사 가져 오기 / 포함 경로</target>
        </trans-unit>
        <trans-unit id="b3a030279e3be16bc447509ee9cb018fef87870e" translate="yes" xml:space="preserve">
          <source>Pull an identifier from prefix/postfix expressions</source>
          <target state="translated">접두사 / 접두사 식에서 식별자 가져 오기</target>
        </trans-unit>
        <trans-unit id="7d5ec8ce5c1cd610e2351c5a15b6b9c81346e199" translate="yes" xml:space="preserve">
          <source>Pure libraries</source>
          <target state="translated">순수한 라이브러리</target>
        </trans-unit>
        <trans-unit id="c6a218c1fffd61e7a4c8cd984b85f49ea6bce0e1" translate="yes" xml:space="preserve">
          <source>Pure libraries do not depend on any external &lt;code&gt;*.dll&lt;/code&gt; or &lt;code&gt;lib*.so&lt;/code&gt; binary while impure libraries do. A wrapper is an impure library that is a very low-level interface to a C library.</source>
          <target state="translated">순수한 라이브러리는 외부 &lt;code&gt;*.dll&lt;/code&gt; 또는 &lt;code&gt;lib*.so&lt;/code&gt; 바이너리 에 의존하지 않지만 불순한 라이브러리는 의존하지 않습니다 . 랩퍼는 C 라이브러리에 대한 매우 낮은 수준의 인터페이스 인 불순한 라이브러리입니다.</target>
        </trans-unit>
        <trans-unit id="a0fb821bdaf93ed9a1f1e920acfb2840eff5b153" translate="yes" xml:space="preserve">
          <source>Purpose</source>
          <target state="translated">Purpose</target>
        </trans-unit>
        <trans-unit id="ab194e6c51955e3ece7467854fe421e48b6e4cf4" translate="yes" xml:space="preserve">
          <source>Push item onto heap, maintaining the heap invariant.</source>
          <target state="translated">힙을 변하지 않고 유지하면서 항목을 힙으로 푸시하십시오.</target>
        </trans-unit>
        <trans-unit id="a39c27c6f3bf8974c957653b58c3fa5dc8ccf58c" translate="yes" xml:space="preserve">
          <source>Quasi-quoting operator. Accepts an expression or a block and returns the AST that represents it. Within the quoted AST, you are able to interpolate NimNode expressions from the surrounding scope. If no operator is given, quoting is done using backticks. Otherwise, the given operator must be used as a prefix operator for any interpolated expression. The original meaning of the interpolation operator may be obtained by escaping it (by prefixing it with itself): e.g. &lt;em&gt;@&lt;/em&gt; is escaped as &lt;em&gt;@@&lt;/em&gt;, &lt;em&gt;@@&lt;/em&gt; is escaped as &lt;em&gt;@@@&lt;/em&gt; and so on.</source>
          <target state="translated">유사 인용 연산자. 표현식 또는 블록을 승인하고이를 나타내는 AST를 리턴합니다. 인용 된 AST 내에서 주변 범위에서 NimNode 표현식을 보간 할 수 있습니다. 운영자가 제공되지 않으면 인용 부호가 사용됩니다. 그렇지 않으면 주어진 연산자는 보간 된 표현식의 접두사 연산자로 사용해야합니다. 예 : 보간 오퍼레이터의 원래 의미는 (자체 붙임에 의한)을 탈출하여 얻을 수있다 &lt;em&gt;@하는 것은&lt;/em&gt; 같이 이스케이프 &lt;em&gt;@@&lt;/em&gt; , &lt;em&gt;@@&lt;/em&gt; 같이 이스케이프 &lt;em&gt;@@@&lt;/em&gt; 등등.</target>
        </trans-unit>
        <trans-unit id="84df47161db68162cf2c1cf2df6862e32ae9b781" translate="yes" xml:space="preserve">
          <source>Quickly find the log base 2 of an integer. If &lt;em&gt;x&lt;/em&gt; is zero, when &lt;code&gt;noUndefinedBitOpts&lt;/code&gt; is set, result is -1, otherwise result is undefined.</source>
          <target state="translated">정수의 로그베이스 2를 빠르게 찾으십시오. 경우 &lt;em&gt;X가&lt;/em&gt; 되면 제로 &lt;code&gt;noUndefinedBitOpts&lt;/code&gt; 가 설정되고, 그 결과는 -1, 그렇지 않으면 결과는 정의되지 않는다.</target>
        </trans-unit>
        <trans-unit id="e155eddd124128a190616e7a186ae4d25f6a6ebc" translate="yes" xml:space="preserve">
          <source>QuitCalled</source>
          <target state="translated">QuitCalled</target>
        </trans-unit>
        <trans-unit id="d43a34ec7721112f13b97cfbb0d6e0a2ad3e3442" translate="yes" xml:space="preserve">
          <source>Quote &lt;code&gt;s&lt;/code&gt;, so it can be safely passed to POSIX shell. Based on Python's pipes.quote</source>
          <target state="translated">견적 &lt;code&gt;s&lt;/code&gt; , 그래서 안전하게 POSIX 쉘에 전달 될 수 있습니다. 파이썬의 파이프를 기반으로합니다.</target>
        </trans-unit>
        <trans-unit id="4d08dfbd0710ec2fc6ea17808fda70dbf079d436" translate="yes" xml:space="preserve">
          <source>Quote &lt;code&gt;s&lt;/code&gt;, so it can be safely passed to shell.</source>
          <target state="translated">Quote &lt;code&gt;s&lt;/code&gt; 이므로 쉘에 안전하게 전달할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b5d45f4b8112546563b986e1d340a3de1ceef7ec" translate="yes" xml:space="preserve">
          <source>Quote s, so it can be safely passed to Windows API. Based on Python's subprocess.list2cmdline See &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/17w5ykft.aspx&quot;&gt;http://msdn.microsoft.com/en-us/library/17w5ykft.aspx&lt;/a&gt;</source>
          <target state="translated">Quote이므로 Windows API에 안전하게 전달할 수 있습니다. Python의 subprocess.list2cmdline 기반 &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/17w5ykft.aspx&quot;&gt;http://msdn.microsoft.com/en-us/library/17w5ykft.aspx&lt;/a&gt; 참조</target>
        </trans-unit>
        <trans-unit id="c3a56dd5f4e333e6e2e0eafd9130d0884fa87aa3" translate="yes" xml:space="preserve">
          <source>RST Quick Reference</source>
          <target state="translated">RST 빠른 참조</target>
        </trans-unit>
        <trans-unit id="bcb0bbc7586f8b1cf1562ef98d5628eb03fc6223" translate="yes" xml:space="preserve">
          <source>Raise statement</source>
          <target state="translated">성명서</target>
        </trans-unit>
        <trans-unit id="728c44d434025a939b40fb468f6b464eb21b6d42" translate="yes" xml:space="preserve">
          <source>Raise the supported exceptions represented by &lt;em&gt;excepts&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;excepts로&lt;/em&gt; 표시되는 지원되는 예외를 발생 시킵니다.</target>
        </trans-unit>
        <trans-unit id="ec3240294db6590d6eb674eceefe2d3080c82d81" translate="yes" xml:space="preserve">
          <source>Raised by &lt;code&gt;0.0/0.0&lt;/code&gt;, for example.</source>
          <target state="translated">예를 들어 &lt;code&gt;0.0/0.0&lt;/code&gt; 씩 올렸습니다 .</target>
        </trans-unit>
        <trans-unit id="1ad44127cead1a93b77e67eaafbb798c1b8d6a72" translate="yes" xml:space="preserve">
          <source>Raised by division by zero.</source>
          <target state="translated">0으로 나누면 발생합니다.</target>
        </trans-unit>
        <trans-unit id="66d476b23e649e63bb348172beb74bbf37053e03" translate="yes" xml:space="preserve">
          <source>Raised by invalid operations according to IEEE.</source>
          <target state="translated">IEEE에 따른 잘못된 작업으로 발생합니다.</target>
        </trans-unit>
        <trans-unit id="0626d08315c63b21ae589949312963836c529522" translate="yes" xml:space="preserve">
          <source>Raised for inexact results.</source>
          <target state="translated">부정확 한 결과가 발생했습니다.</target>
        </trans-unit>
        <trans-unit id="99e5be4241e93c72cfe80efe56d3696ed1d11b32" translate="yes" xml:space="preserve">
          <source>Raised for invalid memory access errors</source>
          <target state="translated">유효하지 않은 메모리 액세스 오류 발생</target>
        </trans-unit>
        <trans-unit id="38c30cf567b7b9ee1eddd8acb70da472c0ad9270" translate="yes" xml:space="preserve">
          <source>Raised for overflows.</source>
          <target state="translated">오버플로가 발생했습니다.</target>
        </trans-unit>
        <trans-unit id="dd2cdbc5b0a42dacf72096db49f963030ac2eaf1" translate="yes" xml:space="preserve">
          <source>Raised for runtime integer divide-by-zero errors.</source>
          <target state="translated">런타임 정수 0으로 나누기 오류가 발생했습니다.</target>
        </trans-unit>
        <trans-unit id="2c9304ac03b02da4616572280aa9bb8ab12791a0" translate="yes" xml:space="preserve">
          <source>Raised for runtime integer overflows.</source>
          <target state="translated">런타임 정수 오버플로로 발생했습니다.</target>
        </trans-unit>
        <trans-unit id="32c28ea5c78055e8ea68515c83c3ba22b6953b99" translate="yes" xml:space="preserve">
          <source>Raised for string and object conversion errors.</source>
          <target state="translated">문자열 및 객체 변환 오류가 발생했습니다.</target>
        </trans-unit>
        <trans-unit id="08c46d3ef782190797d8a4bd64e301f0fa063ecc" translate="yes" xml:space="preserve">
          <source>Raised for underflows.</source>
          <target state="translated">언더 플로에 대해 발생했습니다.</target>
        </trans-unit>
        <trans-unit id="be95aced11bd594c29b8a4cd5b58705ab2fd7a7d" translate="yes" xml:space="preserve">
          <source>Raised for unsuccessful attempts to allocate memory.</source>
          <target state="translated">메모리 할당 시도가 실패했습니다.</target>
        </trans-unit>
        <trans-unit id="ec59fe758ecda80d7bef1c0104bc8498d5c4a618" translate="yes" xml:space="preserve">
          <source>Raised if a dynamic library could not be loaded.</source>
          <target state="translated">동적 라이브러리를로드 할 수없는 경우 발생합니다.</target>
        </trans-unit>
        <trans-unit id="fe56f3d52954d21251fffdab96d048a6101b0e04" translate="yes" xml:space="preserve">
          <source>Raised if a key cannot be found in a table.</source>
          <target state="translated">테이블에서 키를 찾을 수없는 경우 발생합니다.</target>
        </trans-unit>
        <trans-unit id="bbba70332d0c775286b48ce439b172d9ba242f8e" translate="yes" xml:space="preserve">
          <source>Raised if a range check error occurred.</source>
          <target state="translated">범위 확인 오류가 발생하면 발생합니다.</target>
        </trans-unit>
        <trans-unit id="650353b9e13b1678f3e0f946a77bce78b804cb35" translate="yes" xml:space="preserve">
          <source>Raised if a record field is not accessible because its dicriminant's value does not fit.</source>
          <target state="translated">구분자의 값이 맞지 않아 레코드 필드에 액세스 할 수없는 경우 발생합니다.</target>
        </trans-unit>
        <trans-unit id="3ad88cbc3b7ff45823f8340b1fcd5be1d429c6ad" translate="yes" xml:space="preserve">
          <source>Raised if a resource request could not be fulfilled.</source>
          <target state="translated">자원 요청을 이행 할 수없는 경우 발생합니다.</target>
        </trans-unit>
        <trans-unit id="cd11d72b167232b61b07884734877076a77cdc66" translate="yes" xml:space="preserve">
          <source>Raised if an IO &quot;end of file&quot; error occurred.</source>
          <target state="translated">IO &quot;파일 끝&quot;오류가 발생하면 발생합니다.</target>
        </trans-unit>
        <trans-unit id="68c91c46567b49ce511b6a68e91cd37c644d9b1b" translate="yes" xml:space="preserve">
          <source>Raised if an IO error occurred.</source>
          <target state="translated">IO 오류가 발생하면 발생합니다.</target>
        </trans-unit>
        <trans-unit id="f68ad7db1fb95353786755c35e1d60aecfb00a29" translate="yes" xml:space="preserve">
          <source>Raised if an array index is out of bounds.</source>
          <target state="translated">배열 인덱스가 범위를 벗어나면 발생합니다.</target>
        </trans-unit>
        <trans-unit id="d3ef858ef306b68c4f896a6d7c87ab203440961c" translate="yes" xml:space="preserve">
          <source>Raised if an object gets assigned to its parent's object.</source>
          <target state="translated">객체가 부모 객체에 할당되면 발생합니다.</target>
        </trans-unit>
        <trans-unit id="fdb573346d5de72dc1dc0894684d9b86b57d2d06" translate="yes" xml:space="preserve">
          <source>Raised if an object is converted to an incompatible object type. You can use &lt;code&gt;of&lt;/code&gt; operator to check if conversion will succeed.</source>
          <target state="translated">객체가 호환되지 않는 객체 유형으로 변환되면 발생합니다. 연산자를 사용 &lt;code&gt;of&lt;/code&gt; 변환이 성공하는지 확인할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="da2633c286ea06df76a0438d7891623c292b571a" translate="yes" xml:space="preserve">
          <source>Raised if an operating system service failed.</source>
          <target state="translated">운영 체제 서비스가 실패하면 발생합니다.</target>
        </trans-unit>
        <trans-unit id="028c1298a842b618b5e92022ea3c9cb7f8150b55" translate="yes" xml:space="preserve">
          <source>Raised if any kind of arithmetic error occurred.</source>
          <target state="translated">모든 종류의 산술 오류가 발생하면 발생합니다.</target>
        </trans-unit>
        <trans-unit id="b57acbd1eafc73247bdc8b7db4a7e36731116243" translate="yes" xml:space="preserve">
          <source>Raised if it is attempted to send a message to a dead thread.</source>
          <target state="translated">사용 불능 스레드에 메시지를 보내려고하면 발생합니다.</target>
        </trans-unit>
        <trans-unit id="586536f2532bdba51684aaa2faaccf9a0ee3ad93" translate="yes" xml:space="preserve">
          <source>Raised if the hardware stack used for subroutine calls overflowed.</source>
          <target state="translated">서브 루틴 호출에 사용 된 하드웨어 스택이 오버플로 된 경우 발생합니다.</target>
        </trans-unit>
        <trans-unit id="17261fb73363d2c277ed1529e2e101dd346435d0" translate="yes" xml:space="preserve">
          <source>Raised if there is no exception to reraise.</source>
          <target state="translated">후퇴 할 예외가 없으면 발생합니다.</target>
        </trans-unit>
        <trans-unit id="351c8bf075d81572768b1ca963b6bf3b6f76ed34" translate="yes" xml:space="preserve">
          <source>Raised on attempts to re-sink an already consumed &lt;code&gt;sink&lt;/code&gt; parameter.</source>
          <target state="translated">이미 소비 된 &lt;code&gt;sink&lt;/code&gt; 매개 변수 를 다시 싱크하려는 시도가 발생했습니다 .</target>
        </trans-unit>
        <trans-unit id="c3c39e104d96138eb3a3997e68ced83f3dee4e47" translate="yes" xml:space="preserve">
          <source>Raised on dereferences of &lt;code&gt;nil&lt;/code&gt; pointers.</source>
          <target state="translated">&lt;code&gt;nil&lt;/code&gt; 포인터의 역 참조에서 발생했습니다 .</target>
        </trans-unit>
        <trans-unit id="32a2e38706f27d38537d5bf0c1530200f9030954" translate="yes" xml:space="preserve">
          <source>Raised when a tag is not properly closed</source>
          <target state="translated">태그가 제대로 닫히지 않으면 발생</target>
        </trans-unit>
        <trans-unit id="42ca68196e5e694cdc0156d223a1ff6b17dcec98" translate="yes" xml:space="preserve">
          <source>Raised when an unexpected XML Parser event occurs</source>
          <target state="translated">예기치 않은 XML 파서 이벤트가 발생할 때 발생</target>
        </trans-unit>
        <trans-unit id="4d15913f72d2ca164e122d25060193477a26ffc0" translate="yes" xml:space="preserve">
          <source>Raised when assertion is proved wrong.</source>
          <target state="translated">어설 션이 잘못되면 발생합니다.</target>
        </trans-unit>
        <trans-unit id="91029130d53f12dffcfc80d43ea48134c5d69fcf" translate="yes" xml:space="preserve">
          <source>Raises &lt;code&gt;AssertionError&lt;/code&gt; if specified &lt;code&gt;code&lt;/code&gt; does not raise the specified exception. Example:</source>
          <target state="translated">발생시킵니다 &lt;code&gt;AssertionError&lt;/code&gt; 지정하면 &lt;code&gt;code&lt;/code&gt; 지정된 예외를 발생시키지 않습니다. 예:</target>
        </trans-unit>
        <trans-unit id="567f8f001d78a8e744cdf6369fc805b49aa2b893" translate="yes" xml:space="preserve">
          <source>Raises &lt;code&gt;AssertionError&lt;/code&gt; with &lt;em&gt;msg&lt;/em&gt; if &lt;em&gt;cond&lt;/em&gt; is false. Note that &lt;code&gt;AssertionError&lt;/code&gt; is hidden from the effect system, so it doesn't produce &lt;code&gt;{.raises: [AssertionError].}&lt;/code&gt;. This exception is only supposed to be caught by unit testing frameworks.</source>
          <target state="translated">발생시킵니다 &lt;code&gt;AssertionError&lt;/code&gt; 를은 으로 &lt;em&gt;MSG&lt;/em&gt; 경우 &lt;em&gt;콘드은&lt;/em&gt; false입니다. 참고 &lt;code&gt;AssertionError&lt;/code&gt; 를가 가 발생하지 않도록, 효과 시스템에서 숨겨져 &lt;code&gt;{.raises: [AssertionError].}&lt;/code&gt; . 이 예외는 단위 테스팅 프레임 워크에서만 잡을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="40cc1c9996322f8cc38f559f2584b50f088e6996" translate="yes" xml:space="preserve">
          <source>Raises &lt;code&gt;ValueError&lt;/code&gt; for an invalid hex values. The comparison is case-insensitive.</source>
          <target state="translated">발생시킵니다 &lt;code&gt;ValueError&lt;/code&gt; 잘못된 16 진수 값에 대한. 비교는 대소 문자를 구분하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="c22f12804c795d88ca74f939ddf08aea8931971a" translate="yes" xml:space="preserve">
          <source>Raises &lt;code&gt;ValueError&lt;/code&gt; for an invalid value in &lt;em&gt;s&lt;/em&gt;. The comparison is done in a style insensitive way.</source>
          <target state="translated">발생시킵니다 &lt;code&gt;ValueError&lt;/code&gt; 에서 잘못된 값 &lt;em&gt;의&lt;/em&gt; . 비교는 스타일에 무관하게 수행됩니다.</target>
        </trans-unit>
        <trans-unit id="2d4578456b5ba2f01543ab1822189b16a39fba87" translate="yes" xml:space="preserve">
          <source>Raises &lt;em&gt;EDb&lt;/em&gt; if the connection could not be established.</source>
          <target state="translated">발생시킵니다 &lt;em&gt;EDB를&lt;/em&gt; 연결을 설정할 수없는 경우.</target>
        </trans-unit>
        <trans-unit id="09f056dbb100b1c839a4625115b8a60c96d1a0e6" translate="yes" xml:space="preserve">
          <source>Raises EInvalidValue in case of an error.</source>
          <target state="translated">오류가 발생하면 EInvalidValue를 발생시킵니다.</target>
        </trans-unit>
        <trans-unit id="e0bebaa2403bca683eb4d2b3f51753adb492d176" translate="yes" xml:space="preserve">
          <source>Raises EOS on error.</source>
          <target state="translated">오류 발생시 EOS를 높입니다.</target>
        </trans-unit>
        <trans-unit id="e80f698527275363029eae2721df321a059387f0" translate="yes" xml:space="preserve">
          <source>Raises KeyError if the set &lt;em&gt;s&lt;/em&gt; is empty.</source>
          <target state="translated">설정된 &lt;em&gt;s&lt;/em&gt; 가 비어 있으면 KeyError를 발생시킵니다 .</target>
        </trans-unit>
        <trans-unit id="9e8600b37550ccb497a4af5ce01a4410e73d0d2b" translate="yes" xml:space="preserve">
          <source>Raises a &lt;code&gt;ValueError&lt;/code&gt; if the parsing fails or the value is not a correctly formatted time.</source>
          <target state="translated">발생시킵니다 &lt;code&gt;ValueError&lt;/code&gt; 를을 구문 분석에 실패하거나 값이 올바른 형식의 시간이 아닌 경우.</target>
        </trans-unit>
        <trans-unit id="276b555f70ce184a6b1f8f69f1b6bd8354a1579b" translate="yes" xml:space="preserve">
          <source>Raises a &lt;code&gt;ValueError&lt;/code&gt; if the response's &lt;code&gt;status&lt;/code&gt; does not have a corresponding &lt;code&gt;HttpCode&lt;/code&gt;.</source>
          <target state="translated">발생시킵니다 &lt;code&gt;ValueError&lt;/code&gt; 를하는 것은 응답의 경우 &lt;code&gt;status&lt;/code&gt; 해당하지 않습니다 &lt;code&gt;HttpCode&lt;/code&gt; 을 .</target>
        </trans-unit>
        <trans-unit id="307a090405fae28bbe37ae495085d4fc3467fca3" translate="yes" xml:space="preserve">
          <source>Raises a new SSL error.</source>
          <target state="translated">새로운 SSL 에러를 일으 킵니다.</target>
        </trans-unit>
        <trans-unit id="e4b8735df78acafac0305b07c45583c0f5e06188" translate="yes" xml:space="preserve">
          <source>Raises an &lt;em&gt;[DbError]&lt;/em&gt; exception with ODBC error information</source>
          <target state="translated">올린다 &lt;em&gt;[DbError]&lt;/em&gt; ODBC 오류 정보와 예외</target>
        </trans-unit>
        <trans-unit id="172a8dadd8dd7c12c87a018821e520f360bdd00c" translate="yes" xml:space="preserve">
          <source>Raises an EOS error upon failure.</source>
          <target state="translated">실패시 EOS 오류를 발생시킵니다.</target>
        </trans-unit>
        <trans-unit id="524595e54374e963ef480df057abcc139126f7c3" translate="yes" xml:space="preserve">
          <source>Raises an IO exception in case of an error. It is an error if the current file position is not at the beginning of the file.</source>
          <target state="translated">오류가 발생하면 IO 예외가 발생합니다. 현재 파일 위치가 파일의 시작 부분에 있지 않으면 오류입니다.</target>
        </trans-unit>
        <trans-unit id="6ab99fafbb1c01fadc221231a21a65c013cfa660" translate="yes" xml:space="preserve">
          <source>Raises an OSError based on the error code returned by &lt;code&gt;SSLGetError&lt;/code&gt; (for SSL sockets) and &lt;code&gt;osLastError&lt;/code&gt; otherwise.</source>
          <target state="translated">&lt;code&gt;SSLGetError&lt;/code&gt; (SSL 소켓의 경우)에서 반환 한 오류 코드 와 그렇지 않으면 osLastError 에 따라 OSError를 발생 &lt;code&gt;osLastError&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="90ebae0e4f71b7a4be2a66964668697eb30ea1dc" translate="yes" xml:space="preserve">
          <source>Raises exceptions for the status codes &lt;code&gt;4xx&lt;/code&gt; and &lt;code&gt;5xx&lt;/code&gt;</source>
          <target state="translated">상태 코드 &lt;code&gt;4xx&lt;/code&gt; 및 &lt;code&gt;5xx&lt;/code&gt; 에 대한 예외를 발생시킵니다.</target>
        </trans-unit>
        <trans-unit id="bbcfba3180974b175ec29f25aedc4af60fbde06f" translate="yes" xml:space="preserve">
          <source>Raises proper errors based on return values of &lt;code&gt;recv&lt;/code&gt; functions.</source>
          <target state="translated">&lt;code&gt;recv&lt;/code&gt; 함수의 반환 값을 기반으로 적절한 오류를 발생 시킵니다.</target>
        </trans-unit>
        <trans-unit id="2208414278b65730f3d9e753c0bd6120a6090206" translate="yes" xml:space="preserve">
          <source>Raising an exception is done with the &lt;code&gt;raise&lt;/code&gt; statement:</source>
          <target state="translated">&lt;code&gt;raise&lt;/code&gt; 문을 사용하여 예외를 발생시킵니다 .</target>
        </trans-unit>
        <trans-unit id="0d5fda95e3940bc09dc1ccc22666813c0b54f73d" translate="yes" xml:space="preserve">
          <source>Ranges</source>
          <target state="translated">Ranges</target>
        </trans-unit>
        <trans-unit id="39db0baa12271196bc8f4503eccfe33d8bedd2cf" translate="yes" xml:space="preserve">
          <source>Ranges occur in set constructors, case statement branches, or array slices. Internally, the node kind &lt;code&gt;nnkRange&lt;/code&gt; is used, but when constructing the AST, construction with &lt;code&gt;..&lt;/code&gt; as an infix operator should be used instead.</source>
          <target state="translated">범위는 집합 생성자, case 문 분기 또는 배열 조각에서 발생합니다. 내부적으로 노드 종류 &lt;code&gt;nnkRange&lt;/code&gt; 가 사용되지만 AST를 구성 할 때는 대신 &lt;code&gt;..&lt;/code&gt; 를 포함 연산자로 사용하는 구성을 사용해야합니다.</target>
        </trans-unit>
        <trans-unit id="0a6d74fbec021ac49e6d5b9824dc9112431d3fb1" translate="yes" xml:space="preserve">
          <source>Rationale: Consistency with overloaded assignment or assignment-like operations, &lt;code&gt;a = b&lt;/code&gt; can be read as &lt;code&gt;performSomeCopy(a, b)&lt;/code&gt;.</source>
          <target state="translated">이론적 근거 : 할당 또는 할당과 같은 오버로드 된 작업과 일관성이 &lt;code&gt;a = b&lt;/code&gt; 는 &lt;code&gt;performSomeCopy(a, b)&lt;/code&gt; 로 읽을 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="ce9a4a772a88d49b6a63f78245488ac96b3f98ab" translate="yes" xml:space="preserve">
          <source>Raw string literals</source>
          <target state="translated">원시 문자열 리터럴</target>
        </trans-unit>
        <trans-unit id="386ba29889d0288988970831100059ae32e75da0" translate="yes" xml:space="preserve">
          <source>Read &lt;code&gt;size&lt;/code&gt; bytes from the specified file asynchronously starting at the current position of the file pointer.</source>
          <target state="translated">파일 포인터의 현재 위치에서 시작하여 지정된 파일에서 &lt;code&gt;size&lt;/code&gt; 바이트를 비동기 적으로 읽습니다 .</target>
        </trans-unit>
        <trans-unit id="6837b052d9e0068e0b32c146cb0a7341a45c3d40" translate="yes" xml:space="preserve">
          <source>Read CGI data. If the client does not use a method listed in the &lt;em&gt;allowedMethods&lt;/em&gt; set, an &lt;em&gt;ECgi&lt;/em&gt; exception is raised.</source>
          <target state="translated">CGI 데이터를 읽습니다. 클라이언트가 &lt;em&gt;allowedMethods&lt;/em&gt; 세트에 나열된 메소드를 사용하지 않으면 &lt;em&gt;ECgi&lt;/em&gt; 예외가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="cec1fd33cb854b699cea99a9f755995756d5ee2f" translate="yes" xml:space="preserve">
          <source>Read a single character from the terminal, blocking until it is entered. The character is not printed to the terminal.</source>
          <target state="translated">터미널에서 단일 문자를 읽고 입력 할 때까지 차단하십시오. 문자가 터미널에 인쇄되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="fa1f949ee6094b79d43e6d504438e7f6f64c9ab8" translate="yes" xml:space="preserve">
          <source>Read this &lt;a href=&quot;apis&quot;&gt;document&lt;/a&gt; for a quick overview of the API design.</source>
          <target state="translated">API 디자인에 대한 간단한 개요를 보려면이 &lt;a href=&quot;apis&quot;&gt;문서&lt;/a&gt; 를 읽으십시오 .</target>
        </trans-unit>
        <trans-unit id="e12115c2336394c1a363bbc5f4d2a10707e72fdd" translate="yes" xml:space="preserve">
          <source>Read/Write tracking</source>
          <target state="translated">읽기 / 쓰기 추적</target>
        </trans-unit>
        <trans-unit id="24620e210d243aab2166090142b8a7d92b8f8897" translate="yes" xml:space="preserve">
          <source>Reading a configuration file.</source>
          <target state="translated">구성 파일을 읽습니다.</target>
        </trans-unit>
        <trans-unit id="ed5a5f0d0a31292a7e615d242d5373135350e488" translate="yes" xml:space="preserve">
          <source>Reads &lt;strong&gt;up to&lt;/strong&gt;&lt;code&gt;size&lt;/code&gt; bytes from &lt;code&gt;socket&lt;/code&gt; into &lt;code&gt;buf&lt;/code&gt;, which must at least be of that size. Returned future will complete once all the data requested is read, a part of the data has been read, or the socket has disconnected in which case the future will complete with a value of &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;socket&lt;/code&gt; 에서 &lt;code&gt;buf&lt;/code&gt; &lt;strong&gt;까지의 최대&lt;/strong&gt; 바이트 &lt;code&gt;size&lt;/code&gt; 읽 &lt;strong&gt;습니다.이 &lt;/strong&gt;크기 는 최소한 해당 크기 여야합니다. 반환 된 미래는 요청 된 모든 데이터를 읽거나, 데이터의 일부를 읽거나, 소켓이 연결 해제 된 경우 완료되며 미래는 &lt;code&gt;0&lt;/code&gt; 값으로 완료됩니다 .</target>
        </trans-unit>
        <trans-unit id="1e7c0e94dad43b7d156eb9468f3ce53d820c8c1b" translate="yes" xml:space="preserve">
          <source>Reads &lt;strong&gt;up to&lt;/strong&gt;&lt;code&gt;size&lt;/code&gt; bytes from &lt;code&gt;socket&lt;/code&gt; into &lt;code&gt;buf&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;socket&lt;/code&gt; 에서 &lt;code&gt;buf&lt;/code&gt; 까지 바이트 &lt;code&gt;size&lt;/code&gt; 읽 &lt;strong&gt;습니다&lt;/strong&gt; .</target>
        </trans-unit>
        <trans-unit id="33491ee917470d5dff9cb97340d439812d5536b8" translate="yes" xml:space="preserve">
          <source>Reads &lt;strong&gt;up to&lt;/strong&gt;&lt;code&gt;size&lt;/code&gt; bytes from &lt;code&gt;socket&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;socket&lt;/code&gt; 에서 &lt;strong&gt;최대 &lt;/strong&gt; &lt;code&gt;size&lt;/code&gt; 바이트를 읽 &lt;strong&gt;습니다&lt;/strong&gt; .</target>
        </trans-unit>
        <trans-unit id="77c0df6a022c05feac3496fef62e568dec0833b2" translate="yes" xml:space="preserve">
          <source>Reads &lt;strong&gt;up to&lt;/strong&gt;&lt;code&gt;size&lt;/code&gt; bytes from &lt;code&gt;socket&lt;/code&gt;. Returned future will complete once all the data requested is read, a part of the data has been read, or the socket has disconnected in which case the future will complete with a value of &lt;code&gt;&quot;&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;socket&lt;/code&gt; 에서 &lt;strong&gt;최대 &lt;/strong&gt; &lt;code&gt;size&lt;/code&gt; 바이트를 읽 &lt;strong&gt;습니다&lt;/strong&gt; . 반환 된 미래는 요청 된 모든 데이터를 읽거나 데이터의 일부를 읽거나 소켓 연결이 끊어지면 미래가 완료되며,이 경우 미래는 &lt;code&gt;&quot;&quot;&lt;/code&gt; 값으로 완료됩니다 .</target>
        </trans-unit>
        <trans-unit id="978c556c2dd2a7521290801e2dc3c34fa4b57db4" translate="yes" xml:space="preserve">
          <source>Reads a &lt;em&gt;password&lt;/em&gt; from stdin without printing it. &lt;em&gt;password&lt;/em&gt; must not be &lt;code&gt;nil&lt;/code&gt;! Returns &lt;code&gt;false&lt;/code&gt; if the end of the file has been reached, &lt;code&gt;true&lt;/code&gt; otherwise.</source>
          <target state="translated">stdin 에서 &lt;em&gt;비밀번호&lt;/em&gt; 를 인쇄하지 않고 읽 습니다. &lt;em&gt;비밀번호&lt;/em&gt; 는 &lt;code&gt;nil&lt;/code&gt; 이 아니어야합니다 ! 반환 &lt;code&gt;false&lt;/code&gt; , 파일의 마지막에 이르렀을 경우 &lt;code&gt;true&lt;/code&gt; , 그렇지.</target>
        </trans-unit>
        <trans-unit id="f4c7c69f0a4086f87414fa84f0850e98e826f6a2" translate="yes" xml:space="preserve">
          <source>Reads a line from a stream &lt;em&gt;s&lt;/em&gt;. Note: This is not very efficient. Raises &lt;em&gt;EIO&lt;/em&gt; if an error occurred.</source>
          <target state="translated">스트림에서 선 읽어 &lt;em&gt;들&lt;/em&gt; . 참고 : 이것은 매우 효율적이지 않습니다. 레이즈 &lt;em&gt;EIO&lt;/em&gt; 에러가 발생하면.</target>
        </trans-unit>
        <trans-unit id="603f08eff7888543b9965532d75111a52efffb42" translate="yes" xml:space="preserve">
          <source>Reads a line of data from &lt;code&gt;socket&lt;/code&gt; into &lt;code&gt;resString&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;socket&lt;/code&gt; 에서 &lt;code&gt;resString&lt;/code&gt; 으로 데이터 라인을 읽 습니다 .</target>
        </trans-unit>
        <trans-unit id="7f939728ad91b0c6736db56d252e3d56ef5aac62" translate="yes" xml:space="preserve">
          <source>Reads a line of data from &lt;code&gt;socket&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;socket&lt;/code&gt; 에서 데이터 라인을 읽습니다 .</target>
        </trans-unit>
        <trans-unit id="b9683a6732a76c35b64fa9e3a0d7661b3a22d384" translate="yes" xml:space="preserve">
          <source>Reads a line of data from &lt;code&gt;socket&lt;/code&gt;. Returned future will complete once a full line is read or an error occurs.</source>
          <target state="translated">&lt;code&gt;socket&lt;/code&gt; 에서 데이터 라인을 읽습니다 . 전체 라인을 읽거나 오류가 발생하면 반환 된 미래는 완료됩니다.</target>
        </trans-unit>
        <trans-unit id="512f7f707ed82b2a4fb989d157a70b5d69b30b07" translate="yes" xml:space="preserve">
          <source>Reads a password from stdin without printing it.</source>
          <target state="translated">stdin에서 비밀번호를 인쇄하지 않고 읽습니다.</target>
        </trans-unit>
        <trans-unit id="38f82d6c2b3adf0dd37525a198d9bcda0bb8916c" translate="yes" xml:space="preserve">
          <source>Reads a single character from the stream &lt;em&gt;f&lt;/em&gt;. Should not be used in performance sensitive code.</source>
          <target state="translated">스트림 &lt;em&gt;f&lt;/em&gt; 에서 단일 문자를 읽습니다 . 성능에 민감한 코드에는 사용하지 않아야합니다.</target>
        </trans-unit>
        <trans-unit id="4ad562c998d7d33d16f2d35016ec8f1190aaf424" translate="yes" xml:space="preserve">
          <source>Reads a single line from the specified file asynchronously.</source>
          <target state="translated">지정된 파일에서 한 줄을 비동기 적으로 읽습니다.</target>
        </trans-unit>
        <trans-unit id="b45c699410e48af3598ad0ffd48f49477789d869" translate="yes" xml:space="preserve">
          <source>Reads all available data.</source>
          <target state="translated">사용 가능한 모든 데이터를 읽습니다.</target>
        </trans-unit>
        <trans-unit id="2c8cdad2cd8286acdfd0d66e63f133bab5192a3c" translate="yes" xml:space="preserve">
          <source>Reads all data from the specified file.</source>
          <target state="translated">지정된 파일에서 모든 데이터를 읽습니다.</target>
        </trans-unit>
        <trans-unit id="50c0c9eac2fafeeecf77fef0fbd118a7d5fe097d" translate="yes" xml:space="preserve">
          <source>Reads all data from the stream &lt;em&gt;file&lt;/em&gt;.</source>
          <target state="translated">스트림 &lt;em&gt;파일&lt;/em&gt; 에서 모든 데이터를 읽습니다 .</target>
        </trans-unit>
        <trans-unit id="16aa2b06a9fd45fdc5177ba0791c46e2186fefff" translate="yes" xml:space="preserve">
          <source>Reads and decodes CGI data and yields the (name, value) pairs the data consists of.</source>
          <target state="translated">CGI 데이터를 읽고 디코딩하여 데이터로 구성된 (이름, 값) 쌍을 생성합니다.</target>
        </trans-unit>
        <trans-unit id="2f08e1736fd8ee6f6e4264f9ba880fc2692403ee" translate="yes" xml:space="preserve">
          <source>Reads and decodes CGI data and yields the (name, value) pairs the data consists of. If the client does not use a method listed in the &lt;em&gt;allowedMethods&lt;/em&gt; set, an &lt;em&gt;ECgi&lt;/em&gt; exception is raised.</source>
          <target state="translated">CGI 데이터를 읽고 디코딩하여 데이터로 구성된 (이름, 값) 쌍을 생성합니다. 클라이언트가 &lt;em&gt;allowedMethods&lt;/em&gt; 세트에 나열된 메소드를 사용하지 않으면 &lt;em&gt;ECgi&lt;/em&gt; 예외가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="cd580d77db8229465ebeb4157251802035fe7ba1" translate="yes" xml:space="preserve">
          <source>Reads data from the specified future stream until it is completed. The data which is read is written to the file immediately and freed from memory.</source>
          <target state="translated">지정된 미래 스트림에서 완료 될 때까지 데이터를 읽습니다. 읽은 데이터는 파일에 즉시 기록되고 메모리에서 비워집니다.</target>
        </trans-unit>
        <trans-unit id="595d56d3e18b21c18bca00840423ca2ea7fc2a5e" translate="yes" xml:space="preserve">
          <source>Reads in a build-time define as a string</source>
          <target state="translated">빌드 타임에서 문자열로 정의 읽기</target>
        </trans-unit>
        <trans-unit id="e8adc86af0b87b9e44aebe3a30de9bd18fc60874" translate="yes" xml:space="preserve">
          <source>Reads in a build-time define as an integer</source>
          <target state="translated">빌드 타임에서 읽기는 정수로 정의</target>
        </trans-unit>
        <trans-unit id="4598472634a594f3ffeff8206db9ccc9d9d0f85d" translate="yes" xml:space="preserve">
          <source>Reads the first row and creates a look-up table for column numbers See also &lt;a href=&quot;#rowEntry.CsvParser.string&quot;&gt;rowEntry&lt;/a&gt;.</source>
          <target state="translated">첫 번째 행을 읽고 열 번호에 대한 찾아보기 테이블을 작성합니다 . &lt;a href=&quot;#rowEntry.CsvParser.string&quot;&gt;rowEntry&lt;/a&gt; 도 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="494c153aaf278be23e83188e46e8ae53c00137ae" translate="yes" xml:space="preserve">
          <source>Reads the response's body and caches it. The read is performed only once.</source>
          <target state="translated">응답 본문을 읽고 캐시합니다. 읽기는 한 번만 수행됩니다.</target>
        </trans-unit>
        <trans-unit id="c09ea5f583e17a92aa05d2a79d90d53798b88bd5" translate="yes" xml:space="preserve">
          <source>Realtime support</source>
          <target state="translated">실시간 지원</target>
        </trans-unit>
        <trans-unit id="7a26b1287f5ff59f6b29334f315518ff72b9960f" translate="yes" xml:space="preserve">
          <source>Receive a line of data from &lt;code&gt;socket&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;socket&lt;/code&gt; 으로부터 데이터 라인을받습니다 .</target>
        </trans-unit>
        <trans-unit id="45ba1787b19136d286049145b2a0b743a6c33a76" translate="yes" xml:space="preserve">
          <source>Receives a datagram data from &lt;code&gt;socket&lt;/code&gt; into &lt;code&gt;buf&lt;/code&gt;, which must be at least of size &lt;code&gt;size&lt;/code&gt;, address of datagram's sender will be stored into &lt;code&gt;saddr&lt;/code&gt; and &lt;code&gt;saddrLen&lt;/code&gt;. Returned future will complete once one datagram has been received, and will return size of packet received.</source>
          <target state="translated">&lt;code&gt;socket&lt;/code&gt; 에서 &lt;code&gt;buf&lt;/code&gt; 로 데이터 그램 데이터를 수신 합니다. 최소한 size &lt;code&gt;size&lt;/code&gt; 여야합니다. 데이터 그램 발신자의 주소는 &lt;code&gt;saddr&lt;/code&gt; 및 &lt;code&gt;saddrLen&lt;/code&gt; 에 저장됩니다 . 반환 된 미래는 하나의 데이터 그램이 수신되면 완료되며 수신 된 패킷의 크기를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="cc62c15428d535855ae8065d053fb9f3dae416a2" translate="yes" xml:space="preserve">
          <source>Receives data from &lt;code&gt;socket&lt;/code&gt;. This function should normally be used with connection-less sockets (UDP sockets).</source>
          <target state="translated">&lt;code&gt;socket&lt;/code&gt; 으로부터 데이터를받습니다 . 이 기능은 일반적으로 비 연결 소켓 (UDP 소켓)과 함께 사용해야합니다.</target>
        </trans-unit>
        <trans-unit id="fde44220b1eb77eb349f04d90b283dec9ec8fc18" translate="yes" xml:space="preserve">
          <source>Receives data from a socket.</source>
          <target state="translated">소켓에서 데이터를받습니다.</target>
        </trans-unit>
        <trans-unit id="4a29f5764a54e8058c540d4730c0a945d240f1f8" translate="yes" xml:space="preserve">
          <source>Recursively walks over the directory &lt;em&gt;dir&lt;/em&gt; and yields for each file or directory in &lt;em&gt;dir&lt;/em&gt;. The full path for each file or directory is returned. &lt;strong&gt;Warning&lt;/strong&gt;: Modifying the directory structure while the iterator is traversing may result in undefined behavior!</source>
          <target state="translated">재귀는 디렉토리를 통해 산책 &lt;em&gt;디렉토리&lt;/em&gt; 에있는 각 파일이나 디렉토리 및 수율 &lt;em&gt;디렉토리&lt;/em&gt; . 각 파일 또는 디렉토리의 전체 경로가 리턴됩니다. &lt;strong&gt;경고&lt;/strong&gt; : 반복자가 이동하는 동안 디렉토리 구조를 수정하면 정의되지 않은 동작이 발생할 수 있습니다!</target>
        </trans-unit>
        <trans-unit id="c20bb0f7c4d78b01fa838319a2981e9b417f1f05" translate="yes" xml:space="preserve">
          <source>Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:</source>
          <target state="translated">다음 조건이 충족되는 경우 수정하거나 수정하지 않고 소스 및 이진 형식으로 재배포 및 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="57ec4bae787e02e75ae9439f5fbfc851c887f70f" translate="yes" xml:space="preserve">
          <source>Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.</source>
          <target state="translated">이진 형식으로 재배포 할 경우 위의 저작권 표시,이 조건 목록 및 배포와 함께 제공된 설명서 및 / 또는 기타 자료의 다음 면책 사항을 재현해야합니다.</target>
        </trans-unit>
        <trans-unit id="b7338b5245c44e48d0d288fd4ec6f22445873f8e" translate="yes" xml:space="preserve">
          <source>Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.</source>
          <target state="translated">소스 코드의 재배포에는 위의 저작권 표시,이 조건 목록 및 다음 면책 사항이 유지되어야합니다.</target>
        </trans-unit>
        <trans-unit id="7a93873a7ac8bb5a91e249745de2599e8d65fd26" translate="yes" xml:space="preserve">
          <source>Reduce rational &lt;em&gt;x&lt;/em&gt;.</source>
          <target state="translated">유리수 &lt;em&gt;x를&lt;/em&gt; 줄 입니다.</target>
        </trans-unit>
        <trans-unit id="259516f23573e881a917050af2115d65af6da166" translate="yes" xml:space="preserve">
          <source>Ref objects should be used whenever inheritance is used. It isn't strictly necessary, but with non-ref objects assignments such as &lt;code&gt;let person: Person = Student(id: 123)&lt;/code&gt; will truncate subclass fields.</source>
          <target state="translated">상속이 사용될 때마다 Ref 객체가 사용되어야합니다. 꼭 필요한 것은 아니지만 &lt;code&gt;let person: Person = Student(id: 123)&lt;/code&gt; 과 같이 참조가 아닌 객체를 할당 하면 하위 클래스 필드가 잘립니다.</target>
        </trans-unit>
        <trans-unit id="db1c784524e1b54011a95823026161f7c8517fe0" translate="yes" xml:space="preserve">
          <source>Reference</source>
          <target state="translated">Reference</target>
        </trans-unit>
        <trans-unit id="960faca00a2ea60fd367da06c6a9cf388e7dc545" translate="yes" xml:space="preserve">
          <source>Reference and pointer types</source>
          <target state="translated">참조 및 포인터 유형</target>
        </trans-unit>
        <trans-unit id="170afdf8e2efc163d33d771c752badc8b632f258" translate="yes" xml:space="preserve">
          <source>References (similar to pointers in other programming languages) are a way to introduce many-to-one relationships. This means different references can point to and modify the same location in memory (also called &lt;span id=&quot;aliasing_1&quot;&gt;aliasing&lt;/span&gt;).</source>
          <target state="translated">참조 (다른 프로그래밍 언어의 포인터와 유사)는 다 대일 관계를 도입하는 방법입니다. 이는 서로 다른 참조가 메모리에서 동일한 위치 ( &lt;span id=&quot;aliasing_1&quot;&gt;앨리어싱&lt;/span&gt; 이라고도 함 )를 가리키고 수정할 수 있음을 의미 합니다.</target>
        </trans-unit>
        <trans-unit id="02069e24e1a9efdb72de58330148c041dfc9b7b2" translate="yes" xml:space="preserve">
          <source>References (similar to pointers in other programming languages) are a way to introduce many-to-one relationships. This means different references can point to and modify the same location in memory.</source>
          <target state="translated">참조 (다른 프로그래밍 언어의 포인터와 유사)는 다 대일 관계를 도입하는 방법입니다. 이는 서로 다른 참조가 메모리에서 동일한 위치를 가리키고 수정할 수 있음을 의미합니다.</target>
        </trans-unit>
        <trans-unit id="21261db724edbd03f7602d59e2bb7a253492652e" translate="yes" xml:space="preserve">
          <source>Regarding binary comparison, this module only provides unequal operators. The equality operator &lt;code&gt;==&lt;/code&gt; is omitted, because depending on the use case either casting to float or rounding to int might be preferred, and users should make an explicit choice.</source>
          <target state="translated">이진 비교와 관련하여이 모듈은 같지 않은 연산자 만 제공합니다. 사용 사례에 따라 부동으로 캐스팅하거나 int로 반올림하는 것이 바람직 할 수 있으므로 사용자는 명시 적으로 선택해야하므로 항등 연산자 &lt;code&gt;==&lt;/code&gt; 는 생략됩니다.</target>
        </trans-unit>
        <trans-unit id="e68ebd1d4ba803b29c2b4073e01cb0c6ecc77d97" translate="yes" xml:space="preserve">
          <source>Registers 'foreignPackageName' to the internal list of foreign deps. It is your job to ensure the package name</source>
          <target state="translated">'foreignPackageName'을 외부 dep의 내부 목록에 등록합니다. 패키지 이름을 확인하는 것은 당신의 일입니다</target>
        </trans-unit>
        <trans-unit id="dba53deed8138d1e437d395564bccc72d2fe91e1" translate="yes" xml:space="preserve">
          <source>Registers &lt;code&gt;fd&lt;/code&gt; with the dispatcher.</source>
          <target state="translated">디스패처에 &lt;code&gt;fd&lt;/code&gt; 를 등록 합니다.</target>
        </trans-unit>
        <trans-unit id="bb5bd595db3b7cfbb12cdce72914e82c34cdf5db" translate="yes" xml:space="preserve">
          <source>Registers &lt;code&gt;ftp&lt;/code&gt; with dispatcher &lt;code&gt;d&lt;/code&gt;.</source>
          <target state="translated">디스패처 &lt;code&gt;d&lt;/code&gt; 에 &lt;code&gt;ftp&lt;/code&gt; 를 등록합니다 .</target>
        </trans-unit>
        <trans-unit id="cbabe5b470b654e5897fc52c60eed8e57b18f5cc" translate="yes" xml:space="preserve">
          <source>Registers &lt;code&gt;s&lt;/code&gt; with dispatcher &lt;code&gt;d&lt;/code&gt;.</source>
          <target state="translated">디스패처 &lt;code&gt;d&lt;/code&gt; 에 &lt;code&gt;s&lt;/code&gt; 를 등록합니다 .</target>
        </trans-unit>
        <trans-unit id="3ac05ff3f5dcfa293b9d59ad4d7bb0664b1aef3f" translate="yes" xml:space="preserve">
          <source>Registers Unix signal notification with &lt;code&gt;signal&lt;/code&gt; to selector &lt;code&gt;s&lt;/code&gt;.</source>
          <target state="translated">레지스터와 유닉스 신호 통지 &lt;code&gt;signal&lt;/code&gt; 선택기 &lt;code&gt;s&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="ac28cb53181efd36c017064827507024c32b8745" translate="yes" xml:space="preserve">
          <source>Registers a &lt;em&gt;thread local&lt;/em&gt; handler that is called at the thread's destruction. A thread is destructed when the &lt;code&gt;.thread&lt;/code&gt; proc returns normally or when it raises an exception. Note that unhandled exceptions in a thread nevertheless cause the whole process to die.</source>
          <target state="translated">스레드 삭제시 호출 되는 &lt;em&gt;스레드 로컬&lt;/em&gt; 핸들러를 등록합니다 . 스레드는 &lt;code&gt;.thread&lt;/code&gt; 프로세스 가 정상적으로 리턴되거나 예외가 발생하면 소멸됩니다 . 그럼에도 불구하고 스레드에서 처리되지 않은 예외로 인해 전체 프로세스가 종료 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3deac7496ef34d80158290e83f7f14ef92d45c58" translate="yes" xml:space="preserve">
          <source>Registers a foreign command to the intern list of commands that can be queried later.</source>
          <target state="translated">나중에 쿼리 할 수있는 외부 명령을 인턴 명령 목록에 등록합니다.</target>
        </trans-unit>
        <trans-unit id="f6b6982c4f6e50fc17a208315b2726e3bf92e0ac" translate="yes" xml:space="preserve">
          <source>Registers a process id (pid) notification (when process has exited) in selector &lt;code&gt;s&lt;/code&gt;.</source>
          <target state="translated">선택기 &lt;code&gt;s&lt;/code&gt; 에 프로세스 ID (pid) 알림 (프로세스가 종료 된 경우)을 등록합니다 .</target>
        </trans-unit>
        <trans-unit id="a2e6ab3c2650ac19e734751307d1c267db478032" translate="yes" xml:space="preserve">
          <source>Registers async socket &lt;code&gt;sock&lt;/code&gt; with dispatcher &lt;code&gt;d&lt;/code&gt;.</source>
          <target state="translated">디스패처 &lt;code&gt;d&lt;/code&gt; 에 비동기 소켓 &lt;code&gt;sock&lt;/code&gt; 을 등록합니다 .</target>
        </trans-unit>
        <trans-unit id="4d5e51b21a074f3910595269ee7ab90c19c97cbb" translate="yes" xml:space="preserve">
          <source>Registers callback &lt;code&gt;cb&lt;/code&gt; to be called when &lt;code&gt;ev&lt;/code&gt; will be signaled</source>
          <target state="translated">&lt;code&gt;ev&lt;/code&gt; 신호를받을 때 호출 할 콜백 &lt;code&gt;cb&lt;/code&gt; 를 등록합니다.</target>
        </trans-unit>
        <trans-unit id="31450955f986e0842dc1c13efe0a244827237e9d" translate="yes" xml:space="preserve">
          <source>Registers callback &lt;code&gt;cb&lt;/code&gt; to be called when process with process ID &lt;code&gt;pid&lt;/code&gt; exited.</source>
          <target state="translated">프로세스 ID가 &lt;code&gt;pid&lt;/code&gt; 인 프로세스 가 종료 될 때 호출 될 콜백 &lt;code&gt;cb&lt;/code&gt; 를 등록 합니다.</target>
        </trans-unit>
        <trans-unit id="e6471db9bd2a705c0ad2173f10920c7b023bff08" translate="yes" xml:space="preserve">
          <source>Registers callback &lt;code&gt;cb&lt;/code&gt; to be called when timer expired.</source>
          <target state="translated">타이머 만료시 호출 할 콜백 &lt;code&gt;cb&lt;/code&gt; 를 등록합니다 .</target>
        </trans-unit>
        <trans-unit id="337e6b2b0028085b3fcc713332555d1608d2e3ce" translate="yes" xml:space="preserve">
          <source>Registers delegate &lt;code&gt;deleg&lt;/code&gt; with dispatcher &lt;code&gt;d&lt;/code&gt;.</source>
          <target state="translated">레지스터 위임 &lt;code&gt;deleg&lt;/code&gt; 디스패처 &lt;code&gt;d&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="0836d5ff61abf1d138e16122f0ec0c79c61d80e8" translate="yes" xml:space="preserve">
          <source>Registers file/socket descriptor &lt;code&gt;fd&lt;/code&gt; to selector &lt;code&gt;s&lt;/code&gt; with events set in &lt;code&gt;events&lt;/code&gt;. The &lt;code&gt;data&lt;/code&gt; is application-defined data, which will be passed when an event is triggered.</source>
          <target state="translated">레지스터는 / 소켓 기술자 파일 &lt;code&gt;fd&lt;/code&gt; 에 대한 선택 &lt;code&gt;s&lt;/code&gt; 설정 이벤트와 &lt;code&gt;events&lt;/code&gt; . &lt;code&gt;data&lt;/code&gt; 이벤트가 트리거 될 때 전달되는 애플리케이션 정의 데이터이다.</target>
        </trans-unit>
        <trans-unit id="43e16ff873d5de584458f76ad72d9537d10683d7" translate="yes" xml:space="preserve">
          <source>Registers selector BSD/MacOSX specific vnode events for file descriptor &lt;code&gt;fd&lt;/code&gt; and events &lt;code&gt;events&lt;/code&gt;. &lt;code&gt;data&lt;/code&gt; application-defined data, which to be passed, when vnode event happens.</source>
          <target state="translated">파일 설명자 &lt;code&gt;fd&lt;/code&gt; 및 events &lt;code&gt;events&lt;/code&gt; 에 대한 선택기 BSD / MacOSX 특정 vnode 이벤트를 등록 합니다 . vnode 이벤트가 발생할 때 전달 될 &lt;code&gt;data&lt;/code&gt; 응용 프로그램 정의 데이터.</target>
        </trans-unit>
        <trans-unit id="2199311ef193878f7d6db4d7b746d800cbc0159f" translate="yes" xml:space="preserve">
          <source>Registers selector event &lt;code&gt;ev&lt;/code&gt; in selector &lt;code&gt;s&lt;/code&gt;.</source>
          <target state="translated">선택기 이벤트 &lt;code&gt;ev&lt;/code&gt; 를 선택기 &lt;code&gt;s&lt;/code&gt; 에 등록합니다 .</target>
        </trans-unit>
        <trans-unit id="b636a5c4fface43e127ecfee78ea1a0d490a11bb" translate="yes" xml:space="preserve">
          <source>Registers timer notification with &lt;code&gt;timeout&lt;/code&gt; (in milliseconds) to selector &lt;code&gt;s&lt;/code&gt;.</source>
          <target state="translated">타이머 알림을 &lt;code&gt;timeout&lt;/code&gt; (밀리 초)로 선택자 &lt;code&gt;s&lt;/code&gt; 에 등록 합니다.</target>
        </trans-unit>
        <trans-unit id="136039c2b54f04914b3cfa5a13100aef989f0ca7" translate="yes" xml:space="preserve">
          <source>Regular expression support for Nim.</source>
          <target state="translated">Nim에 대한 정규식 지원.</target>
        </trans-unit>
        <trans-unit id="dc6d5a0c3dd27227e0ade1d680a1afafeb5cd176" translate="yes" xml:space="preserve">
          <source>Regular expression syntax and semantics</source>
          <target state="translated">정규식 구문 및 의미</target>
        </trans-unit>
        <trans-unit id="3172c4ae8fee97c04bb506eac2e6f47443f5a679" translate="yes" xml:space="preserve">
          <source>Regular expressions</source>
          <target state="translated">정규식</target>
        </trans-unit>
        <trans-unit id="632284d6d44cd285a0879407d2b79c59fd92e9cc" translate="yes" xml:space="preserve">
          <source>Regular file.</source>
          <target state="translated">일반 파일.</target>
        </trans-unit>
        <trans-unit id="c73e7346189862b7e0f60858180cc71c17d6472c" translate="yes" xml:space="preserve">
          <source>Related Options</source>
          <target state="translated">관련 옵션</target>
        </trans-unit>
        <trans-unit id="0eeef2cf95f50c40792682050928f40e5526ea33" translate="yes" xml:space="preserve">
          <source>Relative paths won't be expanded by this proc. Instead, it will traverse only the directories appearing in the relative path.</source>
          <target state="translated">이 과정으로 상대 경로는 확장되지 않습니다. 대신 상대 경로에 나타나는 디렉토리 만 탐색합니다.</target>
        </trans-unit>
        <trans-unit id="7bbbb9e16a836cdff3a094ab77249ddd20e70760" translate="yes" xml:space="preserve">
          <source>Releases the given lock.</source>
          <target state="translated">주어진 잠금을 해제합니다.</target>
        </trans-unit>
        <trans-unit id="154465987117610232e8996850d08335b4100707" translate="yes" xml:space="preserve">
          <source>Remove &lt;em&gt;fromFirst&lt;/em&gt; elements from the front of the deque and &lt;em&gt;fromLast&lt;/em&gt; elements from the back. If the supplied number of elements exceeds the total number of elements in the deque, the deque will remain empty.</source>
          <target state="translated">&lt;em&gt;데크&lt;/em&gt; 앞면에서 &lt;em&gt;첫 번째&lt;/em&gt; 요소 와 &lt;em&gt;뒷면&lt;/em&gt; 에서 &lt;em&gt;마지막&lt;/em&gt; 요소에서 제거하십시오 . 제공된 요소 수가 deque의 총 요소 수를 초과하면 deque는 비어 있습니다.</target>
        </trans-unit>
        <trans-unit id="1c3917158d99d175858d7953e6b6e9cb15550589" translate="yes" xml:space="preserve">
          <source>Remove and return an arbitrary element from the set &lt;em&gt;s&lt;/em&gt;.</source>
          <target state="translated">제거하고 설정에서 임의의 요소를 반환 &lt;em&gt;들&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="2c54936e344741227a270e4e931622db1988d283" translate="yes" xml:space="preserve">
          <source>Remove and returns the first element of the &lt;em&gt;deq&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;deq&lt;/em&gt; 의 첫 번째 요소를 제거하고 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="d0fbcf13973a390df5982811fd42fe25c950652d" translate="yes" xml:space="preserve">
          <source>Remove and returns the last element of the &lt;em&gt;deq&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;deq&lt;/em&gt; 의 마지막 요소를 제거하고 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="384fc682f39353a0f1c47ba8e506eebd6931689b" translate="yes" xml:space="preserve">
          <source>Remove one level of structure in a nested Option.</source>
          <target state="translated">중첩 된 옵션에서 한 레벨의 구조를 제거하십시오.</target>
        </trans-unit>
        <trans-unit id="03b764d0e66d4b3da726d47a7364c4864a30ba9c" translate="yes" xml:space="preserve">
          <source>Remove the first matching prefix (in-place) from a string.</source>
          <target state="translated">문자열에서 일치하는 첫 번째 접두사를 제자리에서 제거하십시오.</target>
        </trans-unit>
        <trans-unit id="097126e9687b04ffc950f7c735543acbbb976e38" translate="yes" xml:space="preserve">
          <source>Remove the first matching suffix (in-place) from a string.</source>
          <target state="translated">문자열에서 일치하는 첫 번째 접미사를 제자리에서 제거하십시오.</target>
        </trans-unit>
        <trans-unit id="dde5ba5aedd2d9d8a62213b10fb268c832c22b6e" translate="yes" xml:space="preserve">
          <source>Removes a node specified by &lt;code&gt;name&lt;/code&gt; Raises the &lt;code&gt;ENotFoundErr&lt;/code&gt; exception, if the node was not found</source>
          <target state="translated">에 의해 지정된 노드 삭제 &lt;code&gt;name&lt;/code&gt; 발생시킵니다 &lt;code&gt;ENotFoundErr&lt;/code&gt; 의 노드가 발견되지 않은 경우, 예외를</target>
        </trans-unit>
        <trans-unit id="6042c06e3ae5da402287f685262f3a39bd2645a1" translate="yes" xml:space="preserve">
          <source>Removes a node specified by local name and namespace URI</source>
          <target state="translated">로컬 이름 및 네임 스페이스 URI로 지정된 노드를 제거합니다.</target>
        </trans-unit>
        <trans-unit id="fe3025964da6282be8933d53955ea4da04a6f2c1" translate="yes" xml:space="preserve">
          <source>Removes all characters from &lt;em&gt;chars&lt;/em&gt; from the end of the string &lt;em&gt;s&lt;/em&gt; (in-place).</source>
          <target state="translated">모든 문자 삭제 &lt;em&gt;문자를&lt;/em&gt; 문자열의 끝에서 &lt;em&gt;의&lt;/em&gt; (현재 위치에서).</target>
        </trans-unit>
        <trans-unit id="56467b96f7431e715a40bfe72ad92d9f145c8f16" translate="yes" xml:space="preserve">
          <source>Removes all characters from &lt;em&gt;chars&lt;/em&gt; from the start of the string &lt;em&gt;s&lt;/em&gt; (in-place).</source>
          <target state="translated">문자열 &lt;em&gt;의&lt;/em&gt; 시작 부분 에서 &lt;em&gt;문자의&lt;/em&gt; 모든 문자를 제자리 에서 제거합니다 .&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="e0f43cf9ae15cdd0ea09bd461752b6a5b76b2311" translate="yes" xml:space="preserve">
          <source>Removes all indentation composed of whitespace from each line in &lt;code&gt;s&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;s&lt;/code&gt; 의 각 줄에서 공백으로 구성된 들여 쓰기를 모두 제거합니다 .</target>
        </trans-unit>
        <trans-unit id="23688146735e8d6717a569932dbc93f6dcbe7bdb" translate="yes" xml:space="preserve">
          <source>Removes all occurrences of a single character (in-place) from the end of a string.</source>
          <target state="translated">문자열의 끝에서 모든 단일 문자 (제자리에서)를 제거합니다.</target>
        </trans-unit>
        <trans-unit id="8258aaf046e7709f9a807daa9506d031e201445b" translate="yes" xml:space="preserve">
          <source>Removes all occurrences of a single character (in-place) from the start of a string.</source>
          <target state="translated">문자열의 시작 부분에서 모든 단일 문자 (제자리에서)를 제거합니다.</target>
        </trans-unit>
        <trans-unit id="2e38297722c496fe4c9430024a4d966deb7e3fa0" translate="yes" xml:space="preserve">
          <source>Removes an attribute by &lt;code&gt;localName&lt;/code&gt; and &lt;code&gt;namespaceURI&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;localName&lt;/code&gt; 및 &lt;code&gt;namespaceURI&lt;/code&gt; 로 속성을 제거합니다.</target>
        </trans-unit>
        <trans-unit id="625dd27e0373847ddd93f90e5824a6018c71e8b9" translate="yes" xml:space="preserve">
          <source>Removes an attribute by &lt;code&gt;name&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;name&lt;/code&gt; 으로 속성을 제거합니다</target>
        </trans-unit>
        <trans-unit id="2e72850d2f2ef7ec0860f6783fa13720858d4e67" translate="yes" xml:space="preserve">
          <source>Removes element at &lt;em&gt;index&lt;/em&gt;, maintaining the heap invariant.</source>
          <target state="translated">힙의 불변성을 유지하면서 &lt;em&gt;index의&lt;/em&gt; 요소를 제거합니다 .</target>
        </trans-unit>
        <trans-unit id="a0f617920b58e6892e9b62e5c8ba8e1d424b46ca" translate="yes" xml:space="preserve">
          <source>Removes the &lt;code&gt;handleWrite&lt;/code&gt; event handler on &lt;code&gt;s&lt;/code&gt;.</source>
          <target state="translated">제거 &lt;code&gt;handleWrite&lt;/code&gt; 의 에 이벤트 핸들러 &lt;code&gt;s&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="8525e09ee3d6117f5a94a1df04aac06a3b67a70e" translate="yes" xml:space="preserve">
          <source>Removes the &lt;em&gt;file&lt;/em&gt;. If this fails, &lt;em&gt;OSError&lt;/em&gt; is raised. This does not fail if the file never existed in the first place. On Windows, ignores the read-only attribute.</source>
          <target state="translated">&lt;em&gt;파일을&lt;/em&gt; 제거 &lt;em&gt;합니다&lt;/em&gt; . 이것이 실패하면 &lt;em&gt;OSError&lt;/em&gt; 가 발생합니다. 파일이 처음에 존재하지 않았더라도 실패하지 않습니다. Windows에서는 읽기 전용 속성을 무시합니다.</target>
        </trans-unit>
        <trans-unit id="56895bcc66cef43a87d6d589301de22089ce085a" translate="yes" xml:space="preserve">
          <source>Removes the &lt;em&gt;file&lt;/em&gt;. If this fails, returns &lt;em&gt;false&lt;/em&gt;. This does not fail if the file never existed in the first place. On Windows, ignores the read-only attribute.</source>
          <target state="translated">&lt;em&gt;파일을&lt;/em&gt; 제거 &lt;em&gt;합니다&lt;/em&gt; . 실패하면 &lt;em&gt;false를&lt;/em&gt; 반환합니다 . 파일이 처음에 존재하지 않았더라도 실패하지 않습니다. Windows에서는 읽기 전용 속성을 무시합니다.</target>
        </trans-unit>
        <trans-unit id="ea98ca68efa98c2122daacf8ecd527527e525c03" translate="yes" xml:space="preserve">
          <source>Removes the child node indicated by &lt;code&gt;oldChild&lt;/code&gt; from the list of children, and returns it.</source>
          <target state="translated">&lt;code&gt;oldChild&lt;/code&gt; 로 표시된 자식 노드를 자식 목록에서 제거 하고 반환합니다.</target>
        </trans-unit>
        <trans-unit id="5ee7a80a2694626db7ca8837e09b04f1f91d6149" translate="yes" xml:space="preserve">
          <source>Removes the directory &lt;em&gt;dir&lt;/em&gt; including all subdirectories and files in &lt;em&gt;dir&lt;/em&gt; (recursively).</source>
          <target state="translated">디렉토리 삭제 &lt;em&gt;디렉토리&lt;/em&gt; 의 모든 하위 디렉토리와 파일을 포함한 &lt;em&gt;디렉토리를&lt;/em&gt; (재귀 적으로).</target>
        </trans-unit>
        <trans-unit id="1562f8c69c8827573900416b9339b1607f33af77" translate="yes" xml:space="preserve">
          <source>Removes the specified attribute node If the attribute node cannot be found raises &lt;code&gt;ENotFoundErr&lt;/code&gt;</source>
          <target state="translated">지정된 속성 노드를 제거합니다. 속성 노드를 찾을 수 없으면 &lt;code&gt;ENotFoundErr&lt;/code&gt; 가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="9c7a479da37958808f0473f7eac3fda1de6808b9" translate="yes" xml:space="preserve">
          <source>Removing a cell is analogous - the bit has to be set to zero. Single page descriptors are never deleted from the hash table. This is not needed as the data structures needs to be rebuilt periodically anyway.</source>
          <target state="translated">셀 제거는 비슷합니다. 비트는 0으로 설정해야합니다. 단일 페이지 디스크립터는 해시 테이블에서 삭제되지 않습니다. 어쨌든 데이터 구조를 주기적으로 재 구축해야하므로 이것은 필요하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="c7866d0abb35f4f59ac67429d338b279fa1b6f97" translate="yes" xml:space="preserve">
          <source>Rename a file or directory on the remote FTP Server from current name &lt;code&gt;name_from&lt;/code&gt; to new name &lt;code&gt;name_to&lt;/code&gt;</source>
          <target state="translated">원격 FTP 서버의 파일 또는 디렉토리 이름을 현재 이름 &lt;code&gt;name_from&lt;/code&gt; 에서 새 이름 &lt;code&gt;name_to&lt;/code&gt; 로 바꾸십시오.</target>
        </trans-unit>
        <trans-unit id="cd10c92b5f024da07bd7626f0c1bf73f5c9b5b8e" translate="yes" xml:space="preserve">
          <source>Renders the string decorated within `foobar`:idx: markers.</source>
          <target state="translated">`foobar` : idx : 마커 내에 장식 된 문자열을 렌더링합니다.</target>
        </trans-unit>
        <trans-unit id="193b295a7082d54e15809cab2c56316092ddb475" translate="yes" xml:space="preserve">
          <source>Replace contents of passed buffer with each new line, like &lt;a href=&quot;system#readLine,File,TaintedString&quot;&gt;readLine(File)&lt;/a&gt;. &lt;em&gt;delim&lt;/em&gt;, &lt;em&gt;eat&lt;/em&gt;, and delimiting logic is exactly as for &lt;a href=&quot;#memSlices&quot;&gt;memSlices&lt;/a&gt;, but Nim strings are returned.</source>
          <target state="translated">&lt;a href=&quot;system#readLine,File,TaintedString&quot;&gt;readLine (File)&lt;/a&gt; 과 같이 전달 된 버퍼의 내용을 각각의 새 줄로 바꾸십시오 . &lt;em&gt;delim&lt;/em&gt; , &lt;em&gt;eat&lt;/em&gt; 및 delimiting 논리는 &lt;a href=&quot;#memSlices&quot;&gt;memSlices&lt;/a&gt; 와 동일하지만 Nim 문자열이 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="3ba87bae1b2bf4888ad1a6c7d8f7d7e43da2ff92" translate="yes" xml:space="preserve">
          <source>Replace filter</source>
          <target state="translated">필터 교체</target>
        </trans-unit>
        <trans-unit id="ec48379ea31f417016f7bb9acdc33294df54c21e" translate="yes" xml:space="preserve">
          <source>Replaces &lt;code&gt;sub&lt;/code&gt; in &lt;code&gt;s&lt;/code&gt; by the string &lt;code&gt;by&lt;/code&gt;. Captures can be accessed in &lt;code&gt;by&lt;/code&gt; with the notation &lt;code&gt;$i&lt;/code&gt; and &lt;code&gt;$#&lt;/code&gt; (see strutils.`%`).</source>
          <target state="translated">&lt;code&gt;s&lt;/code&gt; 에서 &lt;code&gt;sub&lt;/code&gt; 를 문자열 &lt;code&gt;by&lt;/code&gt; 바꿉니다 . 캡처는에 액세스 할 수 있습니다 &lt;code&gt;by&lt;/code&gt; 표기법으로 &lt;code&gt;$i&lt;/code&gt; 및 &lt;code&gt;$#&lt;/code&gt; (`strutils.` % 참조).</target>
        </trans-unit>
        <trans-unit id="262b172d0e596a292cd19fd4e382a22e07137b68" translate="yes" xml:space="preserve">
          <source>Replaces &lt;code&gt;sub&lt;/code&gt; in &lt;code&gt;s&lt;/code&gt; by the string &lt;code&gt;by&lt;/code&gt;. Captures cannot be accessed in &lt;code&gt;by&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;s&lt;/code&gt; 에서 &lt;code&gt;sub&lt;/code&gt; 를 문자열 &lt;code&gt;by&lt;/code&gt; 바꿉니다 . 캡처가에 액세스 할 수 없습니다 &lt;code&gt;by&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="d2826f2bd7456d830ac8eee22fa77591049f4481" translate="yes" xml:space="preserve">
          <source>Replaces &lt;em&gt;sub&lt;/em&gt; in &lt;em&gt;s&lt;/em&gt; by the character &lt;em&gt;by&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;s&lt;/em&gt; 에서 &lt;em&gt;sub&lt;/em&gt; 를 문자 &lt;em&gt;로&lt;/em&gt; 교체합니다 .&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="d39df839f36a3e3c3be3d5f7890f0bfbe2b93efc" translate="yes" xml:space="preserve">
          <source>Replaces &lt;em&gt;sub&lt;/em&gt; in &lt;em&gt;s&lt;/em&gt; by the resulting strings from the callback. The callback proc receives the index of the current match (starting with 0), the count of captures and an open array with the captures of each match. Examples:</source>
          <target state="translated">&lt;em&gt;s의 &lt;/em&gt;&lt;em&gt;sub&lt;/em&gt; 를 콜백의 결과 문자열로 바꿉니다 . 콜백 proc은 현재 일치 인덱스 (0으로 시작), 캡처 수 및 각 일치 캡처가있는 열린 배열을받습니다. 예 :&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="827aa382fc5c0590c1b9e715fe77ee41d565fca8" translate="yes" xml:space="preserve">
          <source>Replaces &lt;em&gt;sub&lt;/em&gt; in &lt;em&gt;s&lt;/em&gt; by the string &lt;em&gt;by&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;s&lt;/em&gt; 에서 &lt;em&gt;sub&lt;/em&gt; 를 문자열 &lt;em&gt;로&lt;/em&gt; 바꿉니다 .&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="91b199be59ebf23ec19835773410d2f5a88562e7" translate="yes" xml:space="preserve">
          <source>Replaces &lt;em&gt;sub&lt;/em&gt; in &lt;em&gt;s&lt;/em&gt; by the string &lt;em&gt;by&lt;/em&gt;. Captures can be accessed in &lt;em&gt;by&lt;/em&gt; with the notation &lt;code&gt;$i&lt;/code&gt; and &lt;code&gt;$#&lt;/code&gt; (see strutils.`%`). Examples:</source>
          <target state="translated">&lt;em&gt;s&lt;/em&gt; 에서 &lt;em&gt;sub&lt;/em&gt; 를 문자열 &lt;em&gt;로&lt;/em&gt; 바꿉니다 . 캡처는에 액세스 할 수 있습니다 &lt;em&gt;에 의해&lt;/em&gt; 표기법으로 &lt;code&gt;$i&lt;/code&gt; 및 &lt;code&gt;$#&lt;/code&gt; (`strutils.` % 참조). 예 :&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="44a45639108d1ff8f624730f88605c2a8d489575" translate="yes" xml:space="preserve">
          <source>Replaces &lt;em&gt;sub&lt;/em&gt; in &lt;em&gt;s&lt;/em&gt; by the string &lt;em&gt;by&lt;/em&gt;. Captures cannot be accessed in &lt;em&gt;by&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;s&lt;/em&gt; 에서 &lt;em&gt;sub&lt;/em&gt; 를 문자열 &lt;em&gt;로&lt;/em&gt; 바꿉니다 . 캡처가에 액세스 할 수 없습니다 &lt;em&gt;에 의해&lt;/em&gt; .&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="63b2c45af2328eac15e4934824b957c6dbf1aaa0" translate="yes" xml:space="preserve">
          <source>Replaces the child node &lt;code&gt;oldChild&lt;/code&gt; with &lt;code&gt;newChild&lt;/code&gt; in the list of children, and returns the &lt;code&gt;oldChild&lt;/code&gt; node.</source>
          <target state="translated">자식 목록에서 자식 노드 &lt;code&gt;oldChild&lt;/code&gt; 를 &lt;code&gt;newChild&lt;/code&gt; 로 &lt;code&gt;oldChild&lt;/code&gt; 노드를 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="9a74f67447ef0a253561123dbcd3d24a64504400" translate="yes" xml:space="preserve">
          <source>Represents a fixed duration of time. Uses the same time resolution as &lt;code&gt;Time&lt;/code&gt;. This type should be prefered over &lt;code&gt;TimeInterval&lt;/code&gt; unless non-static time units is needed.</source>
          <target state="translated">고정 된 기간을 나타냅니다. &lt;code&gt;Time&lt;/code&gt; 과 동일한 시간 해상도를 사용합니다 . 비 정적 시간 단위가 필요한 경우가 아니면 &lt;code&gt;TimeInterval&lt;/code&gt; 보다이 유형을 선호해야 합니다.</target>
        </trans-unit>
        <trans-unit id="4f08818bb528e70e03c0e6a752708ea82a2d50f2" translate="yes" xml:space="preserve">
          <source>Represents a format for parsing and printing time types.</source>
          <target state="translated">시간 유형 구문 분석 및 인쇄 형식을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="d7f78d2532222ee16ceb829670216b43daae9773" translate="yes" xml:space="preserve">
          <source>Represents a month. Note that the enum starts at &lt;code&gt;1&lt;/code&gt;, so &lt;code&gt;ord(month)&lt;/code&gt; will give the month number in the range &lt;code&gt;[1..12]&lt;/code&gt;.</source>
          <target state="translated">한 달을 나타냅니다. 열거 형은 &lt;code&gt;1&lt;/code&gt; 에서 시작 하므로 &lt;code&gt;ord(month)&lt;/code&gt; 는 &lt;code&gt;[1..12]&lt;/code&gt; 범위의 월 번호를 제공합니다 .</target>
        </trans-unit>
        <trans-unit id="753488b243f7d9dcec21ce6db3fb2ec29aeeb786" translate="yes" xml:space="preserve">
          <source>Represents a non-fixed duration of time. Can be used to add and subtract non-fixed time units from a &lt;code&gt;DateTime&lt;/code&gt; or &lt;code&gt;Time&lt;/code&gt;. &lt;code&gt;TimeInterval&lt;/code&gt; doesn't represent a fixed duration of time, since the duration of some units depend on the context (e.g a year can be either 365 or 366 days long). The non-fixed time units are years, months and days.</source>
          <target state="translated">고정되지 않은 기간을 나타냅니다. &lt;code&gt;DateTime&lt;/code&gt; 또는 &lt;code&gt;Time&lt;/code&gt; 에서 고정되지 않은 시간 단위를 더하고 빼는 데 사용할 수 있습니다 . 일부 단위의 기간은 상황에 따라 달라 지므로 &lt;code&gt;TimeInterval&lt;/code&gt; 은 고정 된 기간을 나타내지 않습니다 (예 : 1 년은 365 일 또는 366 일이 될 수 있음). 고정되지 않은 시간 단위는 년, 월 및 일입니다.</target>
        </trans-unit>
        <trans-unit id="4953c5cebb0f8703b4ed26ddbee7652305a6e232" translate="yes" xml:space="preserve">
          <source>Represents a point in time with an associated UTC offset and DST flag. This type is only used for implementing timezones.</source>
          <target state="translated">관련 UTC 오프셋 및 DST 플래그가있는 특정 시점을 나타냅니다. 이 유형은 시간대 구현에만 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="7018b9456e85041baffc3aba3513cd751297be23" translate="yes" xml:space="preserve">
          <source>Represents a point in time.</source>
          <target state="translated">특정 시점을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="2c4e3d3ad7eedf7bcfffd4d6b9f05ec606703879" translate="yes" xml:space="preserve">
          <source>Represents a time in different parts. Although this type can represent leap seconds, they are generally not supported in this module. They are not ignored, but the &lt;code&gt;DateTime&lt;/code&gt;'s returned by procedures in this module will never have a leap second.</source>
          <target state="translated">다른 부분의 시간을 나타냅니다. 이 유형은 윤초를 나타낼 수 있지만 일반적으로이 모듈에서는 지원되지 않습니다. 그것들은 무시되지 않지만 이 모듈의 절차에 의해 반환 된 &lt;code&gt;DateTime&lt;/code&gt; 은 결코 도약하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="899b801db0732a2b8bb088f71d876cce161577c6" translate="yes" xml:space="preserve">
          <source>Represents a weekday.</source>
          <target state="translated">평일을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="de4d2a2dca7a42ded5243e5a6e366a0f42019f32" translate="yes" xml:space="preserve">
          <source>Represents the entire floating-point environment. The floating-point environment refers collectively to any floating-point status flags and control modes supported by the implementation.</source>
          <target state="translated">전체 부동 소수점 환경을 나타냅니다. 부동 소수점 환경은 집합 적으로 구현에서 지원되는 모든 부동 소수점 상태 플래그 및 제어 모드를 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="577162d22bbb66e30b35ce553801326629e0643e" translate="yes" xml:space="preserve">
          <source>Represents the floating-point status flags collectively, including any status the implementation associates with the flags. A floating-point status flag is a system variable whose value is set (but never cleared) when a floating-point exception is raised, which occurs as a side effect of exceptional floating-point arithmetic to provide auxiliary information. A floating-point control mode is a system variable whose value may be set by the user to affect the subsequent behavior of floating-point arithmetic.</source>
          <target state="translated">구현이 플래그와 연관시키는 모든 상태를 포함하여 부동 소수점 상태 플래그를 집합 적으로 나타냅니다. 부동 소수점 상태 플래그는 부동 소수점 예외가 발생할 때 값이 설정되어 있지만 절대로 지워지지 않는 시스템 변수이며 보조 정보를 제공하기 위해 예외적 인 부동 소수점 산술의 부작용으로 발생합니다. 부동 소수점 제어 모드는 사용자가 부동 소수점 산술의 후속 동작에 영향을주기 위해 값을 설정할 수있는 시스템 변수입니다.</target>
        </trans-unit>
        <trans-unit id="2b2210bdc3dcb3fa823cf296b4b33bc17dc576f6" translate="yes" xml:space="preserve">
          <source>Requests &lt;code&gt;url&lt;/code&gt; with the custom method string specified by the</source>
          <target state="translated">에 의해 지정된 사용자 정의 메소드 문자열로 &lt;code&gt;url&lt;/code&gt; 을 요청 합니다.</target>
        </trans-unit>
        <trans-unit id="423bf14a52b51814fad80460b71fa2b637c1a7a2" translate="yes" xml:space="preserve">
          <source>Requests &lt;code&gt;url&lt;/code&gt; with the specified &lt;code&gt;httpMethod&lt;/code&gt;.</source>
          <target state="translated">지정된 &lt;code&gt;httpMethod&lt;/code&gt; 로 &lt;code&gt;url&lt;/code&gt; 을 요청 합니다 .</target>
        </trans-unit>
        <trans-unit id="37f069ac401bf42a0dbc5b97d2bb0aa079730513" translate="yes" xml:space="preserve">
          <source>Required to build this module.</source>
          <target state="translated">이 모듈을 빌드하는 데 필요합니다.</target>
        </trans-unit>
        <trans-unit id="d3c49d0f71096b4ee04b440fb7f00fdd36784456" translate="yes" xml:space="preserve">
          <source>Resets all attributes on stdout. It is advisable to register this as a quit proc with &lt;code&gt;system.addQuitProc(resetAttributes)&lt;/code&gt;.</source>
          <target state="translated">stdout의 모든 속성을 재설정합니다. &lt;code&gt;system.addQuitProc(resetAttributes)&lt;/code&gt; 사용하여이를 quit proc로 등록하는 것이 좋습니다 .</target>
        </trans-unit>
        <trans-unit id="97f4d7e17f03d2ddae5b33b0691e0061a8d5b3a6" translate="yes" xml:space="preserve">
          <source>Resets all attributes.</source>
          <target state="translated">모든 속성을 재설정합니다.</target>
        </trans-unit>
        <trans-unit id="df722cbded2bdfc5394608fd4ef3dc24f7902930" translate="yes" xml:space="preserve">
          <source>Resets the &lt;code&gt;finished&lt;/code&gt; status of &lt;code&gt;future&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;finished&lt;/code&gt; &lt;code&gt;future&lt;/code&gt; 상태를 재설정합니다 .</target>
        </trans-unit>
        <trans-unit id="751dfe5aca039753b67ccdb550e807be870fe5e1" translate="yes" xml:space="preserve">
          <source>Resets the deque so that it is empty.</source>
          <target state="translated">비어 있도록 deque를 재설정합니다.</target>
        </trans-unit>
        <trans-unit id="9a02051a6d57fa8e81760d7a4c6ac7cb815afd1c" translate="yes" xml:space="preserve">
          <source>Resets the table so that is is empty.</source>
          <target state="translated">비어 있도록 테이블을 재설정합니다.</target>
        </trans-unit>
        <trans-unit id="f3835365cc0aec4ce30ee73bcf3f82965e792739" translate="yes" xml:space="preserve">
          <source>Resets the table so that it is empty.</source>
          <target state="translated">비어 있도록 테이블을 재설정합니다.</target>
        </trans-unit>
        <trans-unit id="87198cfc41473b283133dd7d542f9622316bdb79" translate="yes" xml:space="preserve">
          <source>Responds to the request with the specified &lt;code&gt;HttpCode&lt;/code&gt;, headers and content.</source>
          <target state="translated">지정된 &lt;code&gt;HttpCode&lt;/code&gt; , 헤더 및 컨텐츠 를 사용하여 요청에 응답합니다 .</target>
        </trans-unit>
        <trans-unit id="e2fa0c601772113ab10ae8c9ecaea4253c175498" translate="yes" xml:space="preserve">
          <source>Restrict the types of global compiletime variables to &lt;code&gt;Set[T]&lt;/code&gt; or similar unordered, only-growable collections so that we can track the module's write effects to these variables and reapply the changes in a different order.</source>
          <target state="translated">전역 컴파일 타임 변수의 유형을 &lt;code&gt;Set[T]&lt;/code&gt; 또는 이와 비슷하고 순서가없고 증가 할 수있는 유사한 컬렉션으로 제한하여 이러한 변수에 대한 모듈의 쓰기 효과를 추적하고 다른 순서로 변경 사항을 다시 적용 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5faa59d4bc3756040b8ce9e673c09f929e6ee9ba" translate="yes" xml:space="preserve">
          <source>Result</source>
          <target state="translated">Result</target>
        </trans-unit>
        <trans-unit id="b14c22c32514d194f9b116863613c6081728c177" translate="yes" xml:space="preserve">
          <source>Result variable</source>
          <target state="translated">결과 변수</target>
        </trans-unit>
        <trans-unit id="0a21e903b6267f536fabc1b6084afbb594ce4774" translate="yes" xml:space="preserve">
          <source>Resulting type of literal</source>
          <target state="translated">리터럴의 결과 유형</target>
        </trans-unit>
        <trans-unit id="a9e8ac0d20310a4fbe103da4be4f60aadb8e03c1" translate="yes" xml:space="preserve">
          <source>Results in &lt;em&gt;tailSplit&lt;/em&gt; containing:</source>
          <target state="translated">&lt;em&gt;다음을&lt;/em&gt; 포함하는 &lt;em&gt;tailSplit의&lt;/em&gt; 결과 :</target>
        </trans-unit>
        <trans-unit id="02d55b2baf2725bcbe0634735b4de01c005aa3e5" translate="yes" xml:space="preserve">
          <source>Results in:</source>
          <target state="translated">결과 :</target>
        </trans-unit>
        <trans-unit id="c11c0efb014d298d8b91fe1db9fb38dc43bf8827" translate="yes" xml:space="preserve">
          <source>Resumes the process &lt;em&gt;p&lt;/em&gt;.</source>
          <target state="translated">프로세스 &lt;em&gt;p를&lt;/em&gt; 재개합니다 .</target>
        </trans-unit>
        <trans-unit id="066583e93d0d4e7bbce10d5a64fe73f5cf48d2df" translate="yes" xml:space="preserve">
          <source>Retrieve the server name requested in the client hello. This can be used in the callback set in &lt;em&gt;SSL_CTX_set_tlsext_servername_callback&lt;/em&gt; to implement virtual hosting. May return &lt;em&gt;nil&lt;/em&gt;.</source>
          <target state="translated">클라이언트 hello에 요청 된 서버 이름을 검색하십시오. 가상 호스팅을 구현하기 위해 &lt;em&gt;SSL_CTX_set_tlsext_servername_callback&lt;/em&gt; 에 설정된 콜백에서 사용될 수 있습니다 . &lt;em&gt;nil을&lt;/em&gt; 리턴 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="04589a81fb23be8bb65bf03611e766051e2ac975" translate="yes" xml:space="preserve">
          <source>Retrieves &lt;code&gt;file&lt;/code&gt;. File must be ASCII text.</source>
          <target state="translated">&lt;code&gt;file&lt;/code&gt; 검색 합니다 . 파일은 ASCII 텍스트 여야합니다.</target>
        </trans-unit>
        <trans-unit id="06165ff17f31624c66e7c5d59742bd21ce1e6e02" translate="yes" xml:space="preserve">
          <source>Retrieves &lt;code&gt;file&lt;/code&gt;. File must be ASCII text. If &lt;code&gt;async&lt;/code&gt; is true, this function will return immediately and it will be your job to call asyncio's &lt;code&gt;poll&lt;/code&gt; to progress this operation.</source>
          <target state="translated">&lt;code&gt;file&lt;/code&gt; 검색 합니다 . 파일은 ASCII 텍스트 여야합니다. 경우 &lt;code&gt;async&lt;/code&gt; 사실,이 기능은 즉시 반환하고는 전화 asyncio의에 당신의 일이 될 것입니다 &lt;code&gt;poll&lt;/code&gt; 이 작업을 진행합니다.</target>
        </trans-unit>
        <trans-unit id="708b44dc2f2baf5cc8245762f76c3a9de0bba1e7" translate="yes" xml:space="preserve">
          <source>Retrieves a node specified by &lt;code&gt;localName&lt;/code&gt; and &lt;code&gt;namespaceURI&lt;/code&gt;. If this node cannot be found returns &lt;code&gt;nil&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;localName&lt;/code&gt; 및 &lt;code&gt;namespaceURI&lt;/code&gt; 로 지정된 노드를 검색합니다 . 이 노드를 찾을 수 없으면 &lt;code&gt;nil&lt;/code&gt; 을 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="0f4a5d757905a34a975a7c7f880ee9257bec516b" translate="yes" xml:space="preserve">
          <source>Retrieves a node specified by &lt;code&gt;name&lt;/code&gt;. If this node cannot be found returns &lt;code&gt;nil&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;name&lt;/code&gt; 으로 지정된 노드를 검색합니다 . 이 노드를 찾을 수 없으면 &lt;code&gt;nil&lt;/code&gt; 을 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="1e4ba6f579e56eb9968a2769102dd7d9747f8076" translate="yes" xml:space="preserve">
          <source>Retrieves a single row. If the query doesn't return any rows, this proc will return a Row with empty strings for each column.</source>
          <target state="translated">단일 행을 검색합니다. 쿼리가 행을 반환하지 않으면이 프로시 저는 각 열에 빈 문자열이있는 행을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="cd6ff2ac1d9027b0924878f8ff15cc5797e1e841" translate="yes" xml:space="preserve">
          <source>Retrieves an &lt;em&gt;Attr&lt;/em&gt; node by &lt;code&gt;localName&lt;/code&gt; and &lt;code&gt;namespaceURI&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;localName&lt;/code&gt; 및 &lt;code&gt;namespaceURI&lt;/code&gt; 로 &lt;em&gt;Attr&lt;/em&gt; 노드를 검색합니다.</target>
        </trans-unit>
        <trans-unit id="f9e91065bf30d26fa7fab636c6847bb75cb5b08a" translate="yes" xml:space="preserve">
          <source>Retrieves an attribute node by &lt;code&gt;name&lt;/code&gt; To retrieve an attribute node by qualified name and namespace URI, use the &lt;em&gt;getAttributeNodeNS&lt;/em&gt; method</source>
          <target state="translated">&lt;code&gt;name&lt;/code&gt; 별로 속성 노드 를 검색합니다. 정규화 된 이름 및 네임 스페이스 URI로 속성 노드를 검색하려면 &lt;em&gt;getAttributeNodeNS&lt;/em&gt; 메소드를 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="d99b34114c6fab7e3e4c9b090e7887f1f8c2734d" translate="yes" xml:space="preserve">
          <source>Retrieves an attribute value by &lt;code&gt;localName&lt;/code&gt; and &lt;code&gt;namespaceURI&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;localName&lt;/code&gt; 및 &lt;code&gt;namespaceURI&lt;/code&gt; 로 속성 값을 검색합니다.</target>
        </trans-unit>
        <trans-unit id="321d6245edf371666ca536f11b615b2835822504" translate="yes" xml:space="preserve">
          <source>Retrieves an attribute value by &lt;code&gt;name&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;name&lt;/code&gt; 속성 값을 얻어 온다</target>
        </trans-unit>
        <trans-unit id="2d3583b597046bb9612671a541518853b1914b2a" translate="yes" xml:space="preserve">
          <source>Retrieves application-defined &lt;code&gt;data&lt;/code&gt; associated with descriptor &lt;code&gt;fd&lt;/code&gt;. If specified descriptor &lt;code&gt;fd&lt;/code&gt; is not registered, empty/default value will be returned.</source>
          <target state="translated">디스크립터 &lt;code&gt;fd&lt;/code&gt; 와 연관된 애플리케이션 정의 &lt;code&gt;data&lt;/code&gt; 검색합니다 . 지정된 설명자 &lt;code&gt;fd&lt;/code&gt; 가 등록되지 않은 경우 빈 / 기본값이 리턴됩니다.</target>
        </trans-unit>
        <trans-unit id="fb8a6d4886e2330b52bb6a75989727c4bd05a532" translate="yes" xml:space="preserve">
          <source>Retrieves arbitrary data stored inside SSLContext.</source>
          <target state="translated">SSLContext에 저장된 임의의 데이터를 검색합니다.</target>
        </trans-unit>
        <trans-unit id="015f16100c976af43692f433ec03836131d79abe" translate="yes" xml:space="preserve">
          <source>Retrieves file information for the file object pointed to by &lt;em&gt;path&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;path가&lt;/em&gt; 가리키는 파일 객체의 파일 정보를 검색합니다 .</target>
        </trans-unit>
        <trans-unit id="2191cd8bc54b836002b1901a06c2621a1a7fbaee" translate="yes" xml:space="preserve">
          <source>Retrieves file information for the file object represented by the given handle.</source>
          <target state="translated">주어진 핸들이 나타내는 파일 객체에 대한 파일 정보를 검색합니다.</target>
        </trans-unit>
        <trans-unit id="c7e0c86f86814f46e9dbd90709b15f1e20420dc0" translate="yes" xml:space="preserve">
          <source>Retrieves option &lt;code&gt;opt&lt;/code&gt; as a boolean value.</source>
          <target state="translated">옵션 &lt;code&gt;opt&lt;/code&gt; 를 부울 값으로 검색 합니다.</target>
        </trans-unit>
        <trans-unit id="837b13a4bd9356d109f78e8ac8a4f83d4bf6eb4d" translate="yes" xml:space="preserve">
          <source>Retrieves the BiggestInt value of a &lt;em&gt;JInt JsonNode&lt;/em&gt;.</source>
          <target state="translated">a의 BiggestInt 값 취득 &lt;em&gt;jint를 JsonNode을&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="6067326ec0effa74c48170c1f1d00e93cde22b6d" translate="yes" xml:space="preserve">
          <source>Retrieves the amount of delegates in &lt;code&gt;disp&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;disp&lt;/code&gt; 의 델리게이트 양을 검색합니다 .</target>
        </trans-unit>
        <trans-unit id="51443b1a027e0041343a327a18a22da988c23255" translate="yes" xml:space="preserve">
          <source>Retrieves the application-data assigned with descriptor &lt;code&gt;fd&lt;/code&gt; to &lt;code&gt;value&lt;/code&gt;. This &lt;code&gt;value&lt;/code&gt; can be modified in the scope of the &lt;code&gt;withData&lt;/code&gt; call.</source>
          <target state="translated">디스크립터 &lt;code&gt;fd&lt;/code&gt; 가 지정된 애플리케이션 데이터 를 &lt;code&gt;value&lt;/code&gt; 로 검색 합니다 . 이 &lt;code&gt;value&lt;/code&gt; 은 &lt;code&gt;withData&lt;/code&gt; 호출 범위에서 수정할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="3e50dd135cc90e3bf1fb606553463e3584da4aaf" translate="yes" xml:space="preserve">
          <source>Retrieves the array of a &lt;em&gt;JArray JsonNode&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;JArray JsonNode&lt;/em&gt; 의 배열을 가져 &lt;em&gt;옵니다&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="b6b54980b1ce107ca235e14e5585daeca73e5b68" translate="yes" xml:space="preserve">
          <source>Retrieves the bool value of a &lt;em&gt;JBool JsonNode&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;JBool JsonNode&lt;/em&gt; 의 bool 값을 검색합니다 .</target>
        </trans-unit>
        <trans-unit id="6116e6af7428731b024ee0bcb9a90633eaa1b65c" translate="yes" xml:space="preserve">
          <source>Retrieves the cons value of a &lt;em&gt;SList SexpNode&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;SList SexpNode&lt;/em&gt; 의 cons 값을 검색합니다 .</target>
        </trans-unit>
        <trans-unit id="1fb77bcde55641bc259dfaf8d662eb74e685f27f" translate="yes" xml:space="preserve">
          <source>Retrieves the current position of the file pointer that is used to read from the specified file. The file's first byte has the index zero.</source>
          <target state="translated">지정된 파일에서 읽는 데 사용되는 파일 포인터의 현재 위치를 검색합니다. 파일의 첫 번째 바이트의 인덱스는 0입니다.</target>
        </trans-unit>
        <trans-unit id="6806d5240ac26960202f3647aa627772a18e4246" translate="yes" xml:space="preserve">
          <source>Retrieves the exception stored in &lt;code&gt;future&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;future&lt;/code&gt; 저장된 예외를 검색합니다 .</target>
        </trans-unit>
        <trans-unit id="6e39d1bc79f320cde4bb8be5a5b0c6f755b35daa" translate="yes" xml:space="preserve">
          <source>Retrieves the float value of a &lt;em&gt;JFloat JsonNode&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;JFloat JsonNode&lt;/em&gt; 의 float 값을 &lt;em&gt;가져옵니다&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="444feb29b7d6550e584fb3b8bfc96e61bd1599e8" translate="yes" xml:space="preserve">
          <source>Retrieves the float value of a &lt;em&gt;SFloat SexpNode&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;SFloat SexpNode&lt;/em&gt; 의 float 값을 검색합니다 .</target>
        </trans-unit>
        <trans-unit id="39cc5a39396857a14f239752157a7eddb187d0b6" translate="yes" xml:space="preserve">
          <source>Retrieves the int value of a &lt;em&gt;JInt JsonNode&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;JInt JsonNode&lt;/em&gt; int 값을 검색합니다 .</target>
        </trans-unit>
        <trans-unit id="72e2f84a130412ae5b2d3de89f74115d86fbbe30" translate="yes" xml:space="preserve">
          <source>Retrieves the int value of a &lt;em&gt;SInt SexpNode&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;SInt SexpNode&lt;/em&gt; 의 int 값을 &lt;em&gt;얻어 온다&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="ca4fb2018aae86dbcad121e715113628f3608605" translate="yes" xml:space="preserve">
          <source>Retrieves the int value of a &lt;em&gt;SList SexpNode&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;SList SexpNode&lt;/em&gt; 의 int 값을 검색합니다 .</target>
        </trans-unit>
        <trans-unit id="9e6999893833e0ccc7cf4102045821f5a0b25645" translate="yes" xml:space="preserve">
          <source>Retrieves the key, value pairs of a &lt;em&gt;JObject JsonNode&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;JObject JsonNode&lt;/em&gt; 의 키, 값 쌍을 검색합니다 .</target>
        </trans-unit>
        <trans-unit id="9ff933948f6e23aa1e7b11b1015d8095219c9661" translate="yes" xml:space="preserve">
          <source>Retrieves the specified file's size.</source>
          <target state="translated">지정된 파일의 크기를 검색합니다.</target>
        </trans-unit>
        <trans-unit id="685a3d9e7762093ce44594d9a49f0280d7bf0559" translate="yes" xml:space="preserve">
          <source>Retrieves the specified response's &lt;code&gt;HttpCode&lt;/code&gt;.</source>
          <target state="translated">지정된 응답의 &lt;code&gt;HttpCode&lt;/code&gt; 를 검색합니다 .</target>
        </trans-unit>
        <trans-unit id="7d1d493765a4f0514c58ff02b20db45c11ad1976" translate="yes" xml:space="preserve">
          <source>Retrieves the specified response's body.</source>
          <target state="translated">지정된 응답의 본문을 검색합니다.</target>
        </trans-unit>
        <trans-unit id="570a4baba3e303fa102910501697bc3bb03173f4" translate="yes" xml:space="preserve">
          <source>Retrieves the specified response's content length.</source>
          <target state="translated">지정된 응답의 내용 길이를 검색합니다.</target>
        </trans-unit>
        <trans-unit id="09359ef901fb6fa3a94480d9dc3968d56f7146fa" translate="yes" xml:space="preserve">
          <source>Retrieves the specified response's content type.</source>
          <target state="translated">지정된 응답의 컨텐츠 유형을 검색합니다.</target>
        </trans-unit>
        <trans-unit id="df7f739a35f9f0c186a541799d97d6d0e6f76841" translate="yes" xml:space="preserve">
          <source>Retrieves the specified response's last modified time.</source>
          <target state="translated">지정된 응답의 마지막 수정 시간을 검색합니다.</target>
        </trans-unit>
        <trans-unit id="3d6fcdd1f339c48a10ac7e4a0ef6aab88c7ad6c3" translate="yes" xml:space="preserve">
          <source>Retrieves the string value of a &lt;em&gt;JString JsonNode&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;JString JsonNode&lt;/em&gt; 의 문자열 값을 검색합니다 .</target>
        </trans-unit>
        <trans-unit id="dea0445c40c6bc5fbb5df22449aeeb7a80d3b4cb" translate="yes" xml:space="preserve">
          <source>Retrieves the string value of a &lt;em&gt;SString SexpNode&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;SString SexpNode&lt;/em&gt; 의 문자열 값을 검색합니다 .</target>
        </trans-unit>
        <trans-unit id="fa288d732352af266800fd3d19549ed756860f85" translate="yes" xml:space="preserve">
          <source>Retrieves the underlying selector's file descriptor.</source>
          <target state="translated">기본 선택기의 파일 설명자를 검색합니다.</target>
        </trans-unit>
        <trans-unit id="f6d6454598f094014f3dd4207038915a13b25f1b" translate="yes" xml:space="preserve">
          <source>Retrieves the value of &lt;code&gt;future&lt;/code&gt;. Future must be finished otherwise this function will fail with a &lt;code&gt;ValueError&lt;/code&gt; exception.</source>
          <target state="translated">&lt;code&gt;future&lt;/code&gt; 값을 검색합니다 . 이후에 완료해야합니다. 그렇지 않으면이 함수는 &lt;code&gt;ValueError&lt;/code&gt; 예외로 실패 합니다.</target>
        </trans-unit>
        <trans-unit id="128c89c6e212cd4b3fd298d37566de4e1e003547" translate="yes" xml:space="preserve">
          <source>Retrieving a website</source>
          <target state="translated">웹 사이트 검색</target>
        </trans-unit>
        <trans-unit id="d18c3dba807023eb479b19cccaf642fbd166e81c" translate="yes" xml:space="preserve">
          <source>Retrieving the value of a JSON node can then be achieved using one of the helper procedures, which include:</source>
          <target state="translated">그런 다음 다음과 같은 헬퍼 프로 시저 중 하나를 사용하여 JSON 노드의 값을 검색 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f83e64c353006b473f887588653de238abd34f04" translate="yes" xml:space="preserve">
          <source>Return OpenSSL version as unsigned long or 0 if not available</source>
          <target state="translated">OpenSSL 버전을 부호없는 long으로 반환하거나 사용할 수없는 경우 0을 반환</target>
        </trans-unit>
        <trans-unit id="44a1fa97206206bfcd4e3bf95bbf51164e9829bc" translate="yes" xml:space="preserve">
          <source>Return a Nim string built from a MemSlice.</source>
          <target state="translated">MemSlice에서 빌드 한 Nim 문자열을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="ade10eda4a0f18e89f3696d99a08c9ee0cd76ea8" translate="yes" xml:space="preserve">
          <source>Return each line in a file as a Nim string, like &lt;a href=&quot;system#lines.i,File&quot;&gt;lines(File)&lt;/a&gt;. &lt;em&gt;delim&lt;/em&gt;, &lt;em&gt;eat&lt;/em&gt;, and delimiting logic is exactly as for &lt;a href=&quot;#memSlices&quot;&gt;memSlices&lt;/a&gt;, but Nim strings are returned.</source>
          <target state="translated">파일의 각 줄을 &lt;a href=&quot;system#lines.i,File&quot;&gt;lines (File)&lt;/a&gt; 과 같은 Nim 문자열로 반환하십시오 . &lt;em&gt;delim&lt;/em&gt; , &lt;em&gt;eat&lt;/em&gt; 및 delimiting 논리는 &lt;a href=&quot;#memSlices&quot;&gt;memSlices&lt;/a&gt; 와 동일하지만 Nim 문자열이 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="2264bb678878c1da487e8d9590aeb94bfa8d65fd" translate="yes" xml:space="preserve">
          <source>Return statement</source>
          <target state="translated">반품 문</target>
        </trans-unit>
        <trans-unit id="99c5a3d019af345a567a439667416a1af215f5db" translate="yes" xml:space="preserve">
          <source>Return the contents of &lt;em&gt;s&lt;/em&gt; centered in a string &lt;em&gt;width&lt;/em&gt; long using &lt;em&gt;fillChar&lt;/em&gt; as padding.</source>
          <target state="translated">&lt;em&gt;fillChar&lt;/em&gt; 를 패딩으로 사용하여 문자열 &lt;em&gt;너비가&lt;/em&gt; 긴 &lt;em&gt;s&lt;/em&gt; 의 내용을 반환합니다 .&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="0f5596430fc57cece11913c7a92342ebf124e61d" translate="yes" xml:space="preserve">
          <source>Return the distance from (0,0) to &lt;em&gt;z&lt;/em&gt;.</source>
          <target state="translated">(0,0)에서 &lt;em&gt;z&lt;/em&gt; 까지의 거리를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="7c18a019affcca1100cfdc0773d93f18d4c7aaf7" translate="yes" xml:space="preserve">
          <source>Return the last item in nodes children. Same as &lt;em&gt;node[^1]&lt;/em&gt;</source>
          <target state="translated">노드 자식의 마지막 항목을 반환합니다. &lt;em&gt;노드&lt;/em&gt; 와 동일 &lt;em&gt;[^ 1]&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="fa1f8ce586fa1f1aca322872b925f917f2a43aeb" translate="yes" xml:space="preserve">
          <source>Return the number of elements of &lt;em&gt;deq&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;deq&lt;/em&gt; 의 요소 수를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="e135dfefec0e7e76f509c5ee6e0fde4befcd98e5" translate="yes" xml:space="preserve">
          <source>Return the value of &lt;em&gt;initialSize&lt;/em&gt; to support &lt;em&gt;count&lt;/em&gt; items.</source>
          <target state="translated">&lt;em&gt;카운트&lt;/em&gt; 항목 을 지원하려면 &lt;em&gt;initialSize&lt;/em&gt; 값을 반환하십시오 .&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="2defcf7d16cd037c1dc3872ea7a75d5c11453bfe" translate="yes" xml:space="preserve">
          <source>Return the value of a property of name &lt;em&gt;field&lt;/em&gt; from a JsAssoc &lt;em&gt;obj&lt;/em&gt;.</source>
          <target state="translated">JsAssoc &lt;em&gt;obj&lt;/em&gt; 에서 name &lt;em&gt;필드&lt;/em&gt; 의 속성 값을 반환합니다 .&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="287838e3c35b83d59a3db1c06370a17b602e22aa" translate="yes" xml:space="preserve">
          <source>Return the value of a property of name &lt;em&gt;field&lt;/em&gt; from a JsObject &lt;em&gt;obj&lt;/em&gt;.</source>
          <target state="translated">JsObject &lt;em&gt;obj&lt;/em&gt; 로부터 name &lt;em&gt;필드&lt;/em&gt; 의 프로퍼티의 값을 돌려줍니다 .&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="7f3e132f4f4ff03980d3b3694da1d265aad54262" translate="yes" xml:space="preserve">
          <source>Return true if &lt;em&gt;item&lt;/em&gt; is in &lt;em&gt;deq&lt;/em&gt; or false if not found. Usually used via the &lt;code&gt;in&lt;/code&gt; operator. It is the equivalent of &lt;code&gt;deq.find(item) &amp;gt;= 0&lt;/code&gt;.</source>
          <target state="translated">&lt;em&gt;항목&lt;/em&gt; 이 &lt;em&gt;deq에&lt;/em&gt; 있으면 true를 , &lt;em&gt;찾지 못하면&lt;/em&gt; false를 반환합니다 . 일반적으로 &lt;code&gt;in&lt;/code&gt; 연산자 를 통해 사용됩니다 . 그것의 동등 &lt;code&gt;deq.find(item) &amp;gt;= 0&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="f6171f05dfc435cf65e810b333e9106c25b9bfdb" translate="yes" xml:space="preserve">
          <source>Return value: The newly created process object. Nil is never returned, but &lt;code&gt;EOS&lt;/code&gt; is raised in case of an error.</source>
          <target state="translated">리턴 값 : 새로 작성된 프로세스 오브젝트. Nil은 반환되지 않지만 오류가 발생하면 &lt;code&gt;EOS&lt;/code&gt; 가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="ca9a66242586d466bdbc58b7b1fbfd07beea37fc" translate="yes" xml:space="preserve">
          <source>Returns (osInvalidSocket, &quot;&quot;) if an error occurred.</source>
          <target state="translated">오류가 발생하면 (osInvalidSocket, &quot;&quot;)을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="dcc5df2e4d6cbe31ebed040fecbbd0e4641a1493" translate="yes" xml:space="preserve">
          <source>Returns -1 if no item has been found and -2 if multiple items match.</source>
          <target state="translated">항목이 없으면 -1을 반환하고 여러 항목이 일치하면 -2를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="a48dc00b46b58cb7acacdcf6975044cb1e94919e" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;'&quot;' &amp;amp; s &amp;amp; '&quot;'&lt;/code&gt; if &lt;em&gt;s&lt;/em&gt; contains a space and does not start with a quote, else returns &lt;em&gt;s&lt;/em&gt;.</source>
          <target state="translated">반환 &lt;code&gt;'&quot;' &amp;amp; s &amp;amp; '&quot;'&lt;/code&gt; 경우 &lt;em&gt;의이&lt;/em&gt; 공간을 포함하고 따옴표로 시작하지 않는, 다른 반환 &lt;em&gt;의&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="ff8a229e5915e9c9536813d4f5bd6d13cc7a7728" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;default&lt;/code&gt; if &lt;code&gt;n&lt;/code&gt; is not a &lt;code&gt;JArray&lt;/code&gt;, or if &lt;code&gt;n&lt;/code&gt; is nil.</source>
          <target state="translated">반환 &lt;code&gt;default&lt;/code&gt; 경우 &lt;code&gt;n&lt;/code&gt; 은 되지 &lt;code&gt;JArray&lt;/code&gt; , 또는 경우 &lt;code&gt;n&lt;/code&gt; 은 전무하다.</target>
        </trans-unit>
        <trans-unit id="a543f654ad3f6ad7022da544bf7e19b20651b602" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;default&lt;/code&gt; if &lt;code&gt;n&lt;/code&gt; is not a &lt;code&gt;JBool&lt;/code&gt;, or if &lt;code&gt;n&lt;/code&gt; is nil.</source>
          <target state="translated">반환 &lt;code&gt;default&lt;/code&gt; 경우 &lt;code&gt;n&lt;/code&gt; 은 하지 않은 것입니다 &lt;code&gt;JBool&lt;/code&gt; , 또는 경우 &lt;code&gt;n&lt;/code&gt; 은 전무하다.</target>
        </trans-unit>
        <trans-unit id="705a6a4b6149c64acc6d1beaddd53f928a0aa174" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;default&lt;/code&gt; if &lt;code&gt;n&lt;/code&gt; is not a &lt;code&gt;JFloat&lt;/code&gt; or &lt;code&gt;JInt&lt;/code&gt;, or if &lt;code&gt;n&lt;/code&gt; is nil.</source>
          <target state="translated">반환 &lt;code&gt;default&lt;/code&gt; 경우 &lt;code&gt;n&lt;/code&gt; 은 하지 않은 것입니다 &lt;code&gt;JFloat&lt;/code&gt; 또는 &lt;code&gt;JInt&lt;/code&gt; , 또는 경우 &lt;code&gt;n&lt;/code&gt; 은 전무하다.</target>
        </trans-unit>
        <trans-unit id="17145b367e102ff87e1c3b70efa399b993ee1807" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;default&lt;/code&gt; if &lt;code&gt;n&lt;/code&gt; is not a &lt;code&gt;JInt&lt;/code&gt;, or if &lt;code&gt;n&lt;/code&gt; is nil.</source>
          <target state="translated">반환 &lt;code&gt;default&lt;/code&gt; 경우 &lt;code&gt;n&lt;/code&gt; 은 하지 않은 것입니다 &lt;code&gt;JInt&lt;/code&gt; , 또는 경우 &lt;code&gt;n&lt;/code&gt; 은 전무하다.</target>
        </trans-unit>
        <trans-unit id="d315e71eab355d443e19ab232507339662628da0" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;default&lt;/code&gt; if &lt;code&gt;n&lt;/code&gt; is not a &lt;code&gt;JObject&lt;/code&gt;, or if &lt;code&gt;n&lt;/code&gt; is nil.</source>
          <target state="translated">반환 &lt;code&gt;default&lt;/code&gt; 경우 &lt;code&gt;n&lt;/code&gt; 은 하지 않은 것입니다 &lt;code&gt;JObject&lt;/code&gt; , 또는 경우 &lt;code&gt;n&lt;/code&gt; 은 전무하다.</target>
        </trans-unit>
        <trans-unit id="447d0f7984892e3f07ebf8fdcaeb9993ef879662" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;default&lt;/code&gt; if &lt;code&gt;n&lt;/code&gt; is not a &lt;code&gt;JString&lt;/code&gt;, or if &lt;code&gt;n&lt;/code&gt; is nil.</source>
          <target state="translated">반환 &lt;code&gt;default&lt;/code&gt; 경우 &lt;code&gt;n&lt;/code&gt; 은 하지 않은 것입니다 &lt;code&gt;JString&lt;/code&gt; , 또는 경우 &lt;code&gt;n&lt;/code&gt; 은 전무하다.</target>
        </trans-unit>
        <trans-unit id="fb00d2122f17f1f0c359738ddd75daa270a80735" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;default&lt;/code&gt; if &lt;code&gt;n&lt;/code&gt; is not a &lt;code&gt;SFloat&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;n&lt;/code&gt; 이 &lt;code&gt;SFloat&lt;/code&gt; 가 아닌 경우 &lt;code&gt;default&lt;/code&gt; 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="65855ca1ca284e074b8dd94da068d9bf1106092a" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;default&lt;/code&gt; if &lt;code&gt;n&lt;/code&gt; is not a &lt;code&gt;SInt&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;n&lt;/code&gt; 이 &lt;code&gt;SInt&lt;/code&gt; 가 아닌 경우 &lt;code&gt;default&lt;/code&gt; 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="18a4d4ecaa5a382af5d435aea158e0708c8bbec4" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;default&lt;/code&gt; if &lt;code&gt;n&lt;/code&gt; is not a &lt;code&gt;SList&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;n&lt;/code&gt; 이 &lt;code&gt;SList&lt;/code&gt; 가 아닌 경우 &lt;code&gt;default&lt;/code&gt; 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="929ba86ba314d5479dcc23c84e8127c5ecd14a30" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;default&lt;/code&gt; if &lt;code&gt;n&lt;/code&gt; is not a &lt;code&gt;SString&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;n&lt;/code&gt; 이 &lt;code&gt;SString&lt;/code&gt; 이 아닌 경우 &lt;code&gt;default&lt;/code&gt; 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="0b28c62b1da24916c221ec36be11091184096142" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;true&lt;/code&gt; if both &lt;code&gt;Option``s are ``none&lt;/code&gt;, or if they have equal values</source>
          <target state="translated">두 &lt;code&gt;Option``s are ``none&lt;/code&gt; 모두 ``none '' 이거나 값이 같은 경우 &lt;code&gt;true&lt;/code&gt; 를 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="28fa89343dd943d496f518140ed7a30afde7f32b" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;true&lt;/code&gt; if coroutine has not returned, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="translated">반환 &lt;code&gt;true&lt;/code&gt; 코 루틴이 반환되지 않은 경우, &lt;code&gt;false&lt;/code&gt; 그렇지.</target>
        </trans-unit>
        <trans-unit id="b27d2210164d96dcfbf7397901cc1f380f593789" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;true&lt;/code&gt; if this &lt;code&gt;version&lt;/code&gt; of the DomImplementation implements &lt;code&gt;feature&lt;/code&gt;, otherwise &lt;code&gt;false&lt;/code&gt;</source>
          <target state="translated">반환 &lt;code&gt;true&lt;/code&gt; 이 경우 &lt;code&gt;version&lt;/code&gt; 하는 DOMImplementation를 구현의 &lt;code&gt;feature&lt;/code&gt; , 그렇지 않은 경우 &lt;code&gt;false&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="09c6ec64fce7e918d973572976c4020e6633665f" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;true&lt;/code&gt; when an attribute with a given &lt;code&gt;localName&lt;/code&gt; and &lt;code&gt;namespaceURI&lt;/code&gt; is specified on this element , &lt;code&gt;false&lt;/code&gt; otherwise</source>
          <target state="translated">지정된 &lt;code&gt;localName&lt;/code&gt; 및 &lt;code&gt;namespaceURI&lt;/code&gt; 를 가진 속성 이이 요소에 지정되면 &lt;code&gt;false&lt;/code&gt; 그렇지 않으면 false를 리턴 &lt;code&gt;true&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="98d0a77296ca4a8d67f075aafe1d6d3ae1f66c4a" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;true&lt;/code&gt; when an attribute with a given &lt;code&gt;name&lt;/code&gt; is specified on this element , &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="translated">주어진 &lt;code&gt;name&lt;/code&gt; 가진 속성 이이 요소에 지정되면 &lt;code&gt;false&lt;/code&gt; 그렇지 않으면 false를 리턴 &lt;code&gt;true&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="5ebe36e10d41ce2814858bd5dd8194d1f70832e7" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;true&lt;/code&gt;, if data was succesfully updated, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="translated">반환 &lt;code&gt;true&lt;/code&gt; , 데이터가 성공적으로 업데이트 된 경우, &lt;code&gt;false&lt;/code&gt; 그렇지.</target>
        </trans-unit>
        <trans-unit id="1f1db63a5862808a2c924bc4746de9c71a294f97" translate="yes" xml:space="preserve">
          <source>Returns &lt;code&gt;true&lt;/code&gt;, if there are no registered events or descriptors in selector.</source>
          <target state="translated">선택기에 등록 된 이벤트 또는 설명자가없는 경우 &lt;code&gt;true&lt;/code&gt; 를 반환 합니다 .</target>
        </trans-unit>
        <trans-unit id="c225b4c4709abebe016008360969c173825e525b" translate="yes" xml:space="preserve">
          <source>Returns &lt;em&gt;true&lt;/em&gt; if the global dispatcher has pending operations.</source>
          <target state="translated">글로벌 디스패처에 보류중인 조작이 있으면 &lt;em&gt;true를&lt;/em&gt; 리턴 &lt;em&gt;합니다&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="fdfb1ee5e761f01932c785e691256728905609ed" translate="yes" xml:space="preserve">
          <source>Returns &lt;em&gt;true&lt;/em&gt; if the ordered set has been initialized with &lt;a href=&quot;#initOrderedSet&quot;&gt;initSet&lt;/a&gt;.</source>
          <target state="translated">순서가 지정된 세트가 &lt;a href=&quot;#initOrderedSet&quot;&gt;initSet&lt;/a&gt; 로 초기화 된 경우에 &lt;em&gt;true를&lt;/em&gt; 리턴 &lt;em&gt;합니다&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="e1c31e9371662f13a3b17347d05acdb3e1fd8273" translate="yes" xml:space="preserve">
          <source>Returns &lt;em&gt;true&lt;/em&gt; if the set has been initialized with &lt;a href=&quot;#initSet&quot;&gt;initSet&lt;/a&gt;.</source>
          <target state="translated">반환 &lt;em&gt;진정한&lt;/em&gt; 세트가로 초기화 된 경우 &lt;a href=&quot;#initSet&quot;&gt;initSet&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="617fb92dd97e67dc58115e3bd9351acb01159738" translate="yes" xml:space="preserve">
          <source>Returns &lt;em&gt;x&lt;/em&gt; rounded up to the nearest power of two. Zero and negative numbers get rounded up to 1.</source>
          <target state="translated">반환 &lt;em&gt;X는&lt;/em&gt; 두 가지의 가장 가까운 전원으로 반올림. 0과 음수는 1로 반올림됩니다.</target>
        </trans-unit>
        <trans-unit id="d79ac8ba0001d2e4bf4814e4735414553d0e3714" translate="yes" xml:space="preserve">
          <source>Returns &lt;em&gt;z&lt;/em&gt; in polar coordinates.</source>
          <target state="translated">&lt;em&gt;z&lt;/em&gt; 를 극좌표로 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="e937b1bc62398f7c2558d4ffdd31612a2e54f52a" translate="yes" xml:space="preserve">
          <source>Returns &lt;em&gt;z&lt;/em&gt;'s string representation as &lt;code&gt;&quot;(re, im)&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;em&gt;z&lt;/em&gt; 의 문자열 표현을 &lt;code&gt;&quot;(re, im)&quot;&lt;/code&gt; 으로 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="83e5fcd487e8bc7b4df2471ce12906d82bfa5ccf" translate="yes" xml:space="preserve">
          <source>Returns String &lt;em&gt;s&lt;/em&gt; concatenated &lt;em&gt;n&lt;/em&gt; times. Example:</source>
          <target state="translated">반환 문자열 &lt;em&gt;의&lt;/em&gt; 연결된 &lt;em&gt;n 개의&lt;/em&gt; 시간. 예:</target>
        </trans-unit>
        <trans-unit id="a5ba56abaada16d3d95720efe5b8df3d88e69e47" translate="yes" xml:space="preserve">
          <source>Returns a 3 string tuple of (beforeSep, &lt;em&gt;sep&lt;/em&gt;, afterSep) or (&quot;&quot;, &quot;&quot;, &lt;em&gt;s&lt;/em&gt;) if &lt;em&gt;sep&lt;/em&gt; is not found</source>
          <target state="translated">&lt;em&gt;sep&lt;/em&gt; 를 찾을 수없는 경우 (beforeSep, &lt;em&gt;sep&lt;/em&gt; , afterSep) 또는 ( &quot;&quot;, &quot;&quot;, &lt;em&gt;s&lt;/em&gt; ) 의 3 개 문자열 튜플을 반환합니다.&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="7c14975a8ace5a4bace767a7db2a7ec221ee7e24" translate="yes" xml:space="preserve">
          <source>Returns a 3 string tuple of (beforeSep, &lt;em&gt;sep&lt;/em&gt;, afterSep) or (&lt;em&gt;s&lt;/em&gt;, &quot;&quot;, &quot;&quot;) if &lt;em&gt;sep&lt;/em&gt; is not found and &lt;em&gt;right&lt;/em&gt; is false or (&quot;&quot;, &quot;&quot;, &lt;em&gt;s&lt;/em&gt;) if &lt;em&gt;sep&lt;/em&gt; is not found and &lt;em&gt;right&lt;/em&gt; is true</source>
          <target state="translated">반환 (beforeSep의 3 문자열 튜플 &lt;em&gt;9월&lt;/em&gt; , afterSep) 또는 ( &lt;em&gt;의&lt;/em&gt; 경우, &quot;&quot;, &quot;&quot;) &lt;em&gt;9월가&lt;/em&gt; 발견되지 않은 &lt;em&gt;권리는&lt;/em&gt; 거짓 또는 ( &quot;&quot;, &quot;&quot;, &lt;em&gt;s의&lt;/em&gt; 경우) &lt;em&gt;9월가&lt;/em&gt; 발견되지 않는 &lt;em&gt;권리&lt;/em&gt; 이다 진실</target>
        </trans-unit>
        <trans-unit id="21bcbadd68e657f3ed1a515499ca587a21bba13a" translate="yes" xml:space="preserve">
          <source>Returns a &lt;code&gt;DateTime&lt;/code&gt; representing the same point in time as &lt;code&gt;dt&lt;/code&gt; but using &lt;code&gt;zone&lt;/code&gt; as the timezone.</source>
          <target state="translated">&lt;code&gt;dt&lt;/code&gt; 와 동일한 시점을 나타내지 만 &lt;code&gt;zone&lt;/code&gt; 을 시간대 로 사용 하는 &lt;code&gt;DateTime&lt;/code&gt; 을 리턴 합니다.</target>
        </trans-unit>
        <trans-unit id="3ea737ff6b94cd4a40ffa9d780ebfb5527d132a3" translate="yes" xml:space="preserve">
          <source>Returns a &lt;code&gt;Future&lt;/code&gt; which will complete when the connection succeeds or an error occurs.</source>
          <target state="translated">연결에 성공하거나 오류가 발생하면 완료 될 &lt;code&gt;Future&lt;/code&gt; 를 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="5e690e1f490d05b71bfb6b87d07a16afb1f392bb" translate="yes" xml:space="preserve">
          <source>Returns a &lt;code&gt;Option&lt;/code&gt; that has this value.</source>
          <target state="translated">이 값을 가진 &lt;code&gt;Option&lt;/code&gt; 을 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="dfd47355dad3eb6af7756f443b830f23b90002ed" translate="yes" xml:space="preserve">
          <source>Returns a &lt;em&gt;NodeList&lt;/em&gt; of all descendant &lt;em&gt;Elements&lt;/em&gt; of &lt;code&gt;el&lt;/code&gt; with a given tag &lt;code&gt;name&lt;/code&gt;, in the order in which they are encountered in a preorder traversal of this &lt;em&gt;Element&lt;/em&gt; tree If &lt;code&gt;name&lt;/code&gt; is &lt;em&gt;*&lt;/em&gt;, returns all descendant of &lt;code&gt;el&lt;/code&gt;</source>
          <target state="translated">리턴 &lt;em&gt;NodeList를&lt;/em&gt; , 모든 자손의 &lt;em&gt;요소&lt;/em&gt; 의 &lt;code&gt;el&lt;/code&gt; 주어진 태그와 &lt;code&gt;name&lt;/code&gt; 자신들이 발견 된 순서대로, 전순 탐색이의 &lt;em&gt;요소&lt;/em&gt; 트리 경우 &lt;code&gt;name&lt;/code&gt; 이다 &lt;em&gt;*&lt;/em&gt; 의 모든 자손 반환 &lt;code&gt;el&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="4c3162e0f286b1ef5b797cd5da1319af941f9a53" translate="yes" xml:space="preserve">
          <source>Returns a &lt;em&gt;NodeList&lt;/em&gt; of all the descendant Elements with a given &lt;code&gt;localName&lt;/code&gt; and &lt;code&gt;namespaceURI&lt;/code&gt; in the order in which they are encountered in a preorder traversal of this Element tree</source>
          <target state="translated">주어진 &lt;code&gt;localName&lt;/code&gt; 및 &lt;code&gt;namespaceURI&lt;/code&gt; 를 가진 모든 하위 요소 의 &lt;em&gt;NodeList&lt;/em&gt; 를이 요소 트리의 사전 주문 순회에서 발견되는 순서대로 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="f8a932e252fd4a1a850b0115ae826d6c001c1a85" translate="yes" xml:space="preserve">
          <source>Returns a DOMImplementation</source>
          <target state="translated">DOMImplementation을 반환</target>
        </trans-unit>
        <trans-unit id="d46521933e52611d0e858b527ac35169763ac109" translate="yes" xml:space="preserve">
          <source>Returns a JSON Representation of &lt;em&gt;node&lt;/em&gt;, with indentation and on multiple lines.</source>
          <target state="translated">들여 쓰기와 여러 줄로 &lt;em&gt;node&lt;/em&gt; 의 JSON 표현을 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="4ccdda87bca9ffe9dff01b6820d3f932d1cb5a78" translate="yes" xml:space="preserve">
          <source>Returns a NodeList of all the Elements with a given localName and namespaceURI in the order in which they are encountered in a preorder traversal of the Document tree.</source>
          <target state="translated">지정된 localName 및 namespaceURI를 가진 모든 요소의 노드 목록을 문서 트리의 사전 주문 순회에서 발견되는 순서대로 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="8597d90ffc929922526f80787675bd1559ff0801" translate="yes" xml:space="preserve">
          <source>Returns a NodeList of all the Elements with a given tag name in the order in which they are encountered in a preorder traversal of the Document tree.</source>
          <target state="translated">주어진 태그 이름을 가진 모든 요소의 노드 목록을 문서 트리의 사전 주문 순회에서 발견되는 순서대로 반환합니다.</target>
        </trans-unit>
        <trans-unit id="af4ef06f70ba4289a8205cb198139a60ca84c58c" translate="yes" xml:space="preserve">
          <source>Returns a String with &lt;em&gt;n&lt;/em&gt; space characters. You can use this proc to left align strings. Example:</source>
          <target state="translated">&lt;em&gt;n 개의&lt;/em&gt; 공백 문자 가 포함 된 문자열을 반환합니다 . 이 proc를 사용하여 문자열을 왼쪽 정렬 할 수 있습니다. 예:</target>
        </trans-unit>
        <trans-unit id="bc0b3186ee1a878fabe64da9b65c64963c90f977" translate="yes" xml:space="preserve">
          <source>Returns a default configuration for embedded HTML generation.</source>
          <target state="translated">임베디드 HTML 생성을위한 기본 구성을 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="7396f8dbd9d1b9b1f444559a8e82eeb735eee681" translate="yes" xml:space="preserve">
          <source>Returns a duplicate of this node, if &lt;code&gt;deep&lt;/code&gt; is &lt;em&gt;true&lt;/em&gt;, Element node's children are copied</source>
          <target state="translated">이 노드의 복제본을 리턴합니다. &lt;code&gt;deep&lt;/code&gt; 이 &lt;em&gt;true&lt;/em&gt; 이면 Element 노드의 하위가 복사됩니다.</target>
        </trans-unit>
        <trans-unit id="e4b0f8c69a4c10eda5ab67fcbf318c126e6e879d" translate="yes" xml:space="preserve">
          <source>Returns a future that will complete when all the string data from the specified future stream is retrieved.</source>
          <target state="translated">지정된 미래 스트림에서 모든 문자열 데이터를 검색 할 때 완료되는 미래를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="a0cdb38da1af4ab6afd03acceb4110f5f6beea22" translate="yes" xml:space="preserve">
          <source>Returns a future that will complete when the &lt;code&gt;FutureStream&lt;/code&gt; has data placed into it. The future will be completed with the oldest value stored inside the stream. The return value will also determine whether data was retrieved, &lt;code&gt;false&lt;/code&gt; means that the future stream was completed and no data was retrieved.</source>
          <target state="translated">&lt;code&gt;FutureStream&lt;/code&gt; 에 데이터가 저장 되면 완료 될 미래를 반환 합니다. 미래는 스트림 내에 저장된 가장 오래된 값으로 완료됩니다. 리턴 값은 또한 데이터 검색 여부를 판별 하며 , &lt;code&gt;false&lt;/code&gt; 는 미래 스트림이 완료되었으며 데이터가 검색되지 않았 음을 의미합니다.</target>
        </trans-unit>
        <trans-unit id="17f67688a98105a5c45fdf95c9b823343e237672" translate="yes" xml:space="preserve">
          <source>Returns a future which will complete once &lt;code&gt;fut&lt;/code&gt; completes or after &lt;code&gt;timeout&lt;/code&gt; milliseconds has elapsed.</source>
          <target state="translated">&lt;code&gt;fut&lt;/code&gt; 가 완료되거나 &lt;code&gt;timeout&lt;/code&gt; 밀리 초)이 경과 한 후 완료 될 미래를 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="af4c30424f6182ef1ffa6042052d2d62fd1713ee" translate="yes" xml:space="preserve">
          <source>Returns a future which will complete once all futures in &lt;code&gt;futs&lt;/code&gt; complete. If the argument is empty, the returned future completes immediately.</source>
          <target state="translated">&lt;code&gt;futs&lt;/code&gt; 모든 선물이 완료되면 완료되는 미래를 반환합니다 . 인수가 비어 있으면 반환 된 미래가 즉시 완료됩니다.</target>
        </trans-unit>
        <trans-unit id="87509fcccbc673ff7757dab67acd12813910ce57" translate="yes" xml:space="preserve">
          <source>Returns a future which will complete once both &lt;code&gt;fut1&lt;/code&gt; and &lt;code&gt;fut2&lt;/code&gt; complete.</source>
          <target state="translated">&lt;code&gt;fut1&lt;/code&gt; 과 &lt;code&gt;fut2&lt;/code&gt; 가 모두 완료되면 완료 될 미래를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="dfe856eddf1daae7687fabc975783a3f6fb0d7d7" translate="yes" xml:space="preserve">
          <source>Returns a future which will complete once either &lt;code&gt;fut1&lt;/code&gt; or &lt;code&gt;fut2&lt;/code&gt; complete.</source>
          <target state="translated">&lt;code&gt;fut1&lt;/code&gt; 또는 &lt;code&gt;fut2&lt;/code&gt; 가 완료되면 완료 될 미래를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="cc7dd181fcfc9f4e7ccf6514ea197d24d3ddb73e" translate="yes" xml:space="preserve">
          <source>Returns a list of all the registered handlers.</source>
          <target state="translated">등록 된 모든 핸들러 목록을 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="c7b83ebc97f050c17044a7445153d70272612a77" translate="yes" xml:space="preserve">
          <source>Returns a list of filenames in the given directory. If &lt;code&gt;dir&lt;/code&gt; is &quot;&quot;, the current directory is used. If &lt;code&gt;async&lt;/code&gt; is true, this function will return immediately and it will be your job to use asyncio's &lt;code&gt;poll&lt;/code&gt; to progress this operation.</source>
          <target state="translated">주어진 디렉토리의 파일 이름 목록을 반환합니다. 경우 &lt;code&gt;dir&lt;/code&gt; &quot;&quot;입니다, 현재 디렉토리가 사용됩니다. 경우 &lt;code&gt;async&lt;/code&gt; 사실,이 기능은 즉시 반환하고이 asyncio의 사용 당신의 일이 될 것입니다 &lt;code&gt;poll&lt;/code&gt; 이 작업을 진행.</target>
        </trans-unit>
        <trans-unit id="105109764bdb3507e6a49222e3207a0f77b639ba" translate="yes" xml:space="preserve">
          <source>Returns a list of triggered events.</source>
          <target state="translated">트리거 된 이벤트 목록을 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="03b22ef5aa888694a87a3597c1d780b39d97041b" translate="yes" xml:space="preserve">
          <source>Returns a modified copy of &lt;code&gt;s&lt;/code&gt; with the substitutions in &lt;code&gt;subs&lt;/code&gt; applied in parallel.</source>
          <target state="translated">&lt;code&gt;subs&lt;/code&gt; 의 대체 가 병렬로 적용된 수정 된 &lt;code&gt;s&lt;/code&gt; 사본을 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="7f4868f59d6694df3f6c5457e4655f3fa8479176" translate="yes" xml:space="preserve">
          <source>Returns a modified copy of &lt;code&gt;s&lt;/code&gt; with the substitutions in &lt;code&gt;subs&lt;/code&gt; applied in parallel. &lt;strong&gt;Deprecated since version 0.18.0&lt;/strong&gt;: Use &lt;code&gt;multiReplace&lt;/code&gt; instead.</source>
          <target state="translated">&lt;code&gt;subs&lt;/code&gt; 의 대체 가 병렬로 적용된 수정 된 &lt;code&gt;s&lt;/code&gt; 사본을 리턴합니다 . &lt;strong&gt;버전 0.18.0부터 사용되지 않음&lt;/strong&gt; : &lt;code&gt;multiReplace&lt;/code&gt; 사용&lt;strong&gt;&lt;/strong&gt; 대신 를 .</target>
        </trans-unit>
        <trans-unit id="3142b10d20ec06e5558b02c59f6248d554d6fdda" translate="yes" xml:space="preserve">
          <source>Returns a modified copy of &lt;em&gt;s&lt;/em&gt; with the substitutions in &lt;em&gt;subs&lt;/em&gt; applied in parallel.</source>
          <target state="translated">&lt;em&gt;서브&lt;/em&gt; 의 대체 가 병렬로 적용된 수정 된 &lt;em&gt;s&lt;/em&gt; 사본을 리턴합니다 .&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="53ae0a67b94291c3cc81406099c3cc74bd406dd5" translate="yes" xml:space="preserve">
          <source>Returns a mutable value stored in &lt;code&gt;future&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;future&lt;/code&gt; 저장된 변경 가능한 값을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="7629b5e1e3c9a0e807c6d52359111e0cc0b17460" translate="yes" xml:space="preserve">
          <source>Returns a new sequence with a combination of the two input containers.</source>
          <target state="translated">두 입력 컨테이너를 조합하여 새 시퀀스를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="b45de52b00b364a3a7528cb3b2501c62d283104e" translate="yes" xml:space="preserve">
          <source>Returns a new sequence with all the items that fulfilled the predicate.</source>
          <target state="translated">술어를 이행 한 모든 항목이 포함 된 새 시퀀스를 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="0aeeb61c9f4521d776691655703a71ddb7e73a11" translate="yes" xml:space="preserve">
          <source>Returns a new sequence with the item &lt;em&gt;x&lt;/em&gt; repeated &lt;em&gt;n&lt;/em&gt; times.</source>
          <target state="translated">항목 &lt;em&gt;x가 &lt;/em&gt;&lt;em&gt;n&lt;/em&gt; 번 반복 된 새 시퀀스를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="b49db4f7063639f973ccdea100c134d2ac66f7d4" translate="yes" xml:space="preserve">
          <source>Returns a new sequence with the items of the container &lt;em&gt;s&lt;/em&gt; repeated &lt;em&gt;n&lt;/em&gt; times.</source>
          <target state="translated">컨테이너 &lt;em&gt;의&lt;/em&gt; 항목이 &lt;em&gt;n&lt;/em&gt; 번 반복 된 새 시퀀스를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="f3ae344d6d7844ed25d2cd53f9ab3cab1412c997" translate="yes" xml:space="preserve">
          <source>Returns a new sequence with the results of &lt;em&gt;op&lt;/em&gt; applied to every item in the container &lt;em&gt;s&lt;/em&gt;.</source>
          <target state="translated">컨테이너 &lt;em&gt;s의&lt;/em&gt; 모든 항목에 &lt;em&gt;op&lt;/em&gt; 결과가 적용된 새 시퀀스를 반환합니다 .&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="7f653e6bcb9722e03527b27cdac64ce1ddc74cd2" translate="yes" xml:space="preserve">
          <source>Returns a new sequence without duplicates.</source>
          <target state="translated">중복없이 새로운 시퀀스를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="91bcae9ed5957c0188e55f1c22827e4cb3420ba2" translate="yes" xml:space="preserve">
          <source>Returns a new set after applying &lt;em&gt;op&lt;/em&gt; on each of the elements of &lt;em&gt;data&lt;/em&gt;.</source>
          <target state="translated">각 &lt;em&gt;data&lt;/em&gt; 요소에 &lt;em&gt;op&lt;/em&gt; 를 적용한 후 새 세트를 반환합니다 .&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="38d25807403b75563f0cf70385a1925abc93ad13" translate="yes" xml:space="preserve">
          <source>Returns a new string such that the cases of all unicode characters are swapped if possible</source>
          <target state="translated">가능한 경우 모든 유니 코드 문자의 경우가 바뀌도록 새 문자열을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="46fc71040bd28d3aad09d4d99804df86881a6769" translate="yes" xml:space="preserve">
          <source>Returns a new string such that the first character in each word inside &lt;em&gt;s&lt;/em&gt; is capitalized</source>
          <target state="translated">&lt;em&gt;s&lt;/em&gt; 안의 각 단어의 첫 문자 가 대문자가 되도록 새 문자열을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="90c1e528172ae28acfbb11957c3efd57b6949e4f" translate="yes" xml:space="preserve">
          <source>Returns a normalized path for the current OS. See &lt;a href=&quot;#normalizePath&quot;&gt;#normalizePath&lt;/a&gt;</source>
          <target state="translated">현재 OS의 정규화 된 경로를 반환합니다. &lt;a href=&quot;#normalizePath&quot;&gt;#normalizePath를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="089f66a2f54998147b7a8821a74f973e8de72d1b" translate="yes" xml:space="preserve">
          <source>Returns a position to the first element in the &lt;em&gt;a&lt;/em&gt; that is greater than &lt;em&gt;key&lt;/em&gt;, or last if no such element is found. In other words if you have a sorted sequence and you call insert(thing, elm, lowerBound(thing, elm)) the sequence will still be sorted.</source>
          <target state="translated">&lt;em&gt;key&lt;/em&gt; 보다 큰 &lt;em&gt;a&lt;/em&gt; 의 첫 번째 요소 위치를 찾거나 해당 요소가 없으면 마지막 위치를 반환합니다 . 즉, 정렬 된 시퀀스가 ​​있고 insert (thing, elm, lowerBound (thing, elm))를 호출하면 시퀀스가 ​​여전히 정렬됩니다.&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="dcdc0a2c4ca881c97eb5de9f6acf424b68856876" translate="yes" xml:space="preserve">
          <source>Returns a position to the first element in the &lt;em&gt;a&lt;/em&gt; that is not less (i.e. greater or equal to) than &lt;em&gt;key&lt;/em&gt;, or last if no such element is found. In other words if you have a sorted sequence and you call insert(thing, elm, upperBound(thing, elm)) the sequence will still be sorted.</source>
          <target state="translated">반환의 첫 번째 요소의 위치 이하 (즉,보다 크거나 같음)하지보다 &lt;em&gt;키&lt;/em&gt; , 또는 그러한 엘리먼트가 발견되지 않는 경우 마지막. 즉, 정렬 된 시퀀스가 ​​있고 insert (thing, elm, upperBound (thing, elm))를 호출하면 시퀀스가 ​​여전히 정렬됩니다.&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="a0068c3382b33425a095976f4593ded8ef900a93" translate="yes" xml:space="preserve">
          <source>Returns a random number in the range 0..&amp;lt;max. The sequence of random number is always the same, unless &lt;em&gt;randomize&lt;/em&gt; is called which initializes the random number generator with a &quot;random&quot; number, i.e. a tickcount. &lt;strong&gt;Deprecated since version 0.18.0&lt;/strong&gt;. Use &lt;code&gt;rand&lt;/code&gt; instead.</source>
          <target state="translated">0 .. &amp;lt;max 범위의 난수를 반환합니다. 난수 생성기가 &quot;임의의&quot;숫자 (즉, 틱 카운트)로 초기화되는 &lt;em&gt;randomize&lt;/em&gt; 가 호출 되지 않는 한 난수 시퀀스는 항상 동일 합니다. &lt;strong&gt;버전 0.18.0부터 사용되지 않습니다&lt;/strong&gt; . 대신 &lt;code&gt;rand&lt;/code&gt; 를 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="1181f08ec4a272665c29f8cf44cb56a75215cf95" translate="yes" xml:space="preserve">
          <source>Returns a random number in the range 0..max-1. The sequence of random number is always the same, unless &lt;em&gt;randomize&lt;/em&gt; is called which initializes the random number generator with a &quot;random&quot; number, i.e. a tickcount. &lt;strong&gt;Deprecated since version 0.18.0&lt;/strong&gt;. Use &lt;code&gt;rand&lt;/code&gt; instead.</source>
          <target state="translated">0..max-1 범위의 난수를 반환합니다. 난수 생성기가 &quot;임의의&quot;숫자 (즉, 틱 카운트)로 초기화되는 &lt;em&gt;randomize&lt;/em&gt; 가 호출 되지 않는 한 난수 시퀀스는 항상 동일 합니다. &lt;strong&gt;버전 0.18.0부터 사용되지 않습니다&lt;/strong&gt; . 대신 &lt;code&gt;rand&lt;/code&gt; 를 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="f75dde8a047d74d4a105234e405aec653589372d" translate="yes" xml:space="preserve">
          <source>Returns a random number in the range 0..max. The sequence of random number is always the same, unless &lt;em&gt;randomize&lt;/em&gt; is called which initializes the random number generator with a &quot;random&quot; number, i.e. a tickcount.</source>
          <target state="translated">0..max 범위의 난수를 반환합니다. 난수 생성기가 &quot;임의의&quot;숫자 (즉, 틱 카운트)로 초기화되는 &lt;em&gt;randomize&lt;/em&gt; 가 호출 되지 않는 한 난수 시퀀스는 항상 동일 합니다.</target>
        </trans-unit>
        <trans-unit id="9636f7f7ba07ddb23945ad7f7a48b85ea602c6a3" translate="yes" xml:space="preserve">
          <source>Returns a sequence of &lt;em&gt;num&lt;/em&gt; sequences. For some input values this is the inverse of the &lt;a href=&quot;#concat&quot;&gt;concat&lt;/a&gt; proc. The proc will assert in debug builds if &lt;em&gt;s&lt;/em&gt; is nil or &lt;em&gt;num&lt;/em&gt; is less than one, and will likely crash on release builds. The input sequence &lt;em&gt;s&lt;/em&gt; can be empty, which will produce &lt;em&gt;num&lt;/em&gt; empty sequences.</source>
          <target state="translated">일련의 &lt;em&gt;숫자&lt;/em&gt; 시퀀스를 반환합니다 . 일부 입력 값의 경우 &lt;a href=&quot;#concat&quot;&gt;concat&lt;/a&gt; proc 의 반대입니다 . &lt;em&gt;s&lt;/em&gt; 가 nil이거나 &lt;em&gt;num&lt;/em&gt; 이 1보다 작 으면 디버그 빌드에서 proc이 선언되며 릴리스 빌드에서 충돌이 발생할 수 있습니다. 입력 시퀀스 &lt;em&gt;(S)가&lt;/em&gt; 생성되는, 비어있을 수 &lt;em&gt;NUM&lt;/em&gt; 빈 서열.</target>
        </trans-unit>
        <trans-unit id="add9a203f2079cc13e1ace73e487476172846d64" translate="yes" xml:space="preserve">
          <source>Returns a string of length &lt;em&gt;count&lt;/em&gt; consisting only of the character &lt;em&gt;c&lt;/em&gt;. You can use this proc to left align strings. Example:</source>
          <target state="translated">문자 &lt;em&gt;c&lt;/em&gt; 만으로 구성된 길이 &lt;em&gt;개수&lt;/em&gt; 의 문자열을 반환합니다 . 이 proc를 사용하여 문자열을 왼쪽 정렬 할 수 있습니다. 예:&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="729725bfb4a47dce6c82ccf2ab99fa662b4d8ece" translate="yes" xml:space="preserve">
          <source>Returns a string representing the path to which the symbolic link points.</source>
          <target state="translated">심볼릭 링크가 가리키는 경로를 나타내는 문자열을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="84cd1e30df0708afd420eb5009581093d4f4d274" translate="yes" xml:space="preserve">
          <source>Returns a tuple containing intpart and floatpart representing the integer part and the fractional part respectively.</source>
          <target state="translated">정수 부분과 분수 부분을 각각 나타내는 intpart와 floatpart를 포함하는 튜플을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="d09e139464614935076ecb5fc050699b848cfe3d" translate="yes" xml:space="preserve">
          <source>Returns a tuple with the the byte offset of the unicode character at position &lt;code&gt;rev&lt;/code&gt; in s counting from the end (starting with 1) and the total number of runes in the string. Returns a negative value for offset if there are to few runes in the string to satisfy the request.</source>
          <target state="translated">반환 위치에서 유니 코드 문자의 바이트 오프셋과 터플 &lt;code&gt;rev&lt;/code&gt; (1로 시작하는) 단부로부터 계산들 및 문자열 룬의 총 수. 요청을 충족시키기 위해 문자열에 룬이 거의없는 경우 오프셋의 음수 값을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="1b5be8d333e1abc777e094dd1044a10d487a6ae4" translate="yes" xml:space="preserve">
          <source>Returns an &lt;code&gt;Option&lt;/code&gt; for this type that has no value.</source>
          <target state="translated">값이없는이 유형에 대한 &lt;code&gt;Option&lt;/code&gt; 을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="df3df41de1b4c50e97ca2936dd535a774d4e50de" translate="yes" xml:space="preserve">
          <source>Returns an empty hash set you can assign directly in &lt;code&gt;var&lt;/code&gt; blocks in a single line. Example:</source>
          <target state="translated">&lt;code&gt;var&lt;/code&gt; 블록에서 한 줄로 직접 할당 할 수있는 빈 해시 세트를 반환합니다 . 예:</target>
        </trans-unit>
        <trans-unit id="9a7ed7f7fe14c1f7ef4472a98ce7f354a4a13943" translate="yes" xml:space="preserve">
          <source>Returns an empty ordered hash set you can assign directly in &lt;code&gt;var&lt;/code&gt; blocks in a single line. Example:</source>
          <target state="translated">&lt;code&gt;var&lt;/code&gt; 블록에서 한 줄로 직접 할당 할 수있는 빈 순서 해시 세트를 반환합니다 . 예:</target>
        </trans-unit>
        <trans-unit id="7a6ec976df2b967286d40c7cce2d0572e152304f" translate="yes" xml:space="preserve">
          <source>Returns contents of the Option. If it is none, then an exception is thrown.</source>
          <target state="translated">Option의 내용을 돌려줍니다. 존재하지 않으면 예외가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="beffe0dcb6ea1b18cf214054c9ac51442d535c3d" translate="yes" xml:space="preserve">
          <source>Returns index of the '.' char in &lt;em&gt;path&lt;/em&gt; if it signifies the beginning of extension. Returns -1 otherwise.</source>
          <target state="translated">'.'의 색인을 리턴합니다. 확장의 시작을 나타내는 경우 &lt;em&gt;경로의&lt;/em&gt; 문자입니다 . 그렇지 않으면 -1을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="90649b5ee35112c84ac4f019ec2bca72a730a877" translate="yes" xml:space="preserve">
          <source>Returns number of columns in the row</source>
          <target state="translated">행의 열 수를 반환합니다</target>
        </trans-unit>
        <trans-unit id="a56c3d1353aa8876a78c07a4f1281cebd356cda4" translate="yes" xml:space="preserve">
          <source>Returns number of columns in the row.</source>
          <target state="translated">행의 열 수를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="745a5ee1bffc8ff6dee6cbfb12dd9c0b58f36f5f" translate="yes" xml:space="preserve">
          <source>Returns number of triggered events.</source>
          <target state="translated">트리거 된 이벤트 수를 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="e7e9384227e7f76e2195180d2f189910e5f68927" translate="yes" xml:space="preserve">
          <source>Returns only after coroutine &lt;code&gt;c&lt;/code&gt; has returned. &lt;code&gt;interval&lt;/code&gt; is time in seconds how often.</source>
          <target state="translated">코 루틴 &lt;code&gt;c&lt;/code&gt; 가 반환 된 후에 만 반환합니다. &lt;code&gt;interval&lt;/code&gt; 은 초 단위의 시간입니다.</target>
        </trans-unit>
        <trans-unit id="c9e14b65cad4b3c339c1aec06e2bb80bf8c6e8b7" translate="yes" xml:space="preserve">
          <source>Returns text for given column of the row</source>
          <target state="translated">행의 주어진 열에 대한 텍스트를 반환</target>
        </trans-unit>
        <trans-unit id="b6255c7bcaefa03e52b2f865c36487063d9547a3" translate="yes" xml:space="preserve">
          <source>Returns text for given column of the row.</source>
          <target state="translated">행의 지정된 열에 대한 텍스트를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="f7a0496a26992e3c3478b5259b27e385a19a5a37" translate="yes" xml:space="preserve">
          <source>Returns the 1-based index of the least significant set bit of x. If &lt;em&gt;x&lt;/em&gt; is zero, when &lt;code&gt;noUndefinedBitOpts&lt;/code&gt; is set, result is 0, otherwise result is undefined.</source>
          <target state="translated">x의 최하위 세트 비트의 1 기반 인덱스를 반환합니다. 경우 &lt;em&gt;X가&lt;/em&gt; 되면 제로 &lt;code&gt;noUndefinedBitOpts&lt;/code&gt; 가 설정되고, 그 결과, 그렇지 않으면 결과가 정의되고, 0이다.</target>
        </trans-unit>
        <trans-unit id="4fd7d846dc9addc90bbae0234b2170f049826f61" translate="yes" xml:space="preserve">
          <source>Returns the &lt;code&gt;ZonedTime&lt;/code&gt; for some local time.</source>
          <target state="translated">현지 시간으로 &lt;code&gt;ZonedTime&lt;/code&gt; 을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="0a6db4d2c33567d91e94119171ef6a0238c4be40" translate="yes" xml:space="preserve">
          <source>Returns the &lt;code&gt;ZonedTime&lt;/code&gt; for some point in time.</source>
          <target state="translated">특정 시점 의 &lt;code&gt;ZonedTime&lt;/code&gt; 을 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="9984435573ae5ce64486dfeb8d7406a4fbe0183d" translate="yes" xml:space="preserve">
          <source>Returns the &lt;code&gt;i&lt;/code&gt;'th value associated with the given key. If there are no values associated with the key or the &lt;code&gt;i&lt;/code&gt;'th value doesn't exist, an exception is raised.</source>
          <target state="translated">주어진 키와 관련된 &lt;code&gt;i&lt;/code&gt; 번째 값을 반환합니다 . 키와 연관된 값이 없거나 &lt;code&gt;i&lt;/code&gt; 번째 값이 존재하지 않으면 예외가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="e845f6e6fd5c9db40839662ad45e1694dbb3a2fb" translate="yes" xml:space="preserve">
          <source>Returns the &lt;code&gt;index&lt;/code&gt; th item in the map. If &lt;code&gt;index&lt;/code&gt; is greater than or equal to the number of nodes in this map, this returns &lt;code&gt;nil&lt;/code&gt;.</source>
          <target state="translated">지도에서 &lt;code&gt;index&lt;/code&gt; th 항목을 반환합니다 . 경우 &lt;code&gt;index&lt;/code&gt; 보다 큰 경우, 또는이 맵의 노드 수만큼,이 반환 &lt;code&gt;nil&lt;/code&gt; 을 .</target>
        </trans-unit>
        <trans-unit id="0c412f8c43994f877bfb8607971a925eaae97e2c" translate="yes" xml:space="preserve">
          <source>Returns the &lt;em&gt;NonTerminal&lt;/em&gt; object of a given &lt;em&gt;Peg&lt;/em&gt; variant object where present.</source>
          <target state="translated">주어진 &lt;em&gt;Peg&lt;/em&gt; 변형 객체 의 &lt;em&gt;NonTerminal&lt;/em&gt; 객체를 반환합니다 .&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="04c14dafe1a3fc460e6dc43c12460374417d29df" translate="yes" xml:space="preserve">
          <source>Returns the &lt;em&gt;PegKind&lt;/em&gt; of a given &lt;em&gt;Peg&lt;/em&gt; object.</source>
          <target state="translated">주어진 &lt;em&gt;Peg&lt;/em&gt; 객체 의 &lt;em&gt;PegKind&lt;/em&gt; 를 반환 합니다.&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="03f56dea0a275e9777e238ac6dca1e8531710163" translate="yes" xml:space="preserve">
          <source>Returns the &lt;em&gt;char&lt;/em&gt; representation of a given &lt;em&gt;Peg&lt;/em&gt; variant object where present.</source>
          <target state="translated">주어진 &lt;em&gt;Peg&lt;/em&gt; 변형 객체 의 &lt;em&gt;문자&lt;/em&gt; 표현을 반환합니다 .&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="dd15366b23d1b4b0f490725bd38f5e37ade16edf" translate="yes" xml:space="preserve">
          <source>Returns the &lt;em&gt;charChoice&lt;/em&gt; field of a given &lt;em&gt;Peg&lt;/em&gt; variant object where present.</source>
          <target state="translated">주어진 &lt;em&gt;Peg&lt;/em&gt; 변형 객체 의 &lt;em&gt;charChoice&lt;/em&gt; 필드를 반환합니다 .&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="f250f789738838738632f20b2bc37e7ed7425a45" translate="yes" xml:space="preserve">
          <source>Returns the &lt;em&gt;file&lt;/em&gt;'s creation time.</source>
          <target state="translated">&lt;em&gt;파일&lt;/em&gt; 의 생성 시간을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="ac946990955d93ce95d42bf02bdd942c43e2203e" translate="yes" xml:space="preserve">
          <source>Returns the &lt;em&gt;file&lt;/em&gt;'s last modification time.</source>
          <target state="translated">&lt;em&gt;파일&lt;/em&gt; 의 마지막 수정 시간을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="24e4933c2e27f568e7e56b2a6a4951cf8501c70a" translate="yes" xml:space="preserve">
          <source>Returns the &lt;em&gt;file&lt;/em&gt;'s last read or write access time.</source>
          <target state="translated">&lt;em&gt;파일&lt;/em&gt; 의 마지막 읽기 또는 쓰기 액세스 시간을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="e6a52d8441a79607d1079404d2ace05fbb990222" translate="yes" xml:space="preserve">
          <source>Returns the &lt;em&gt;i&lt;/em&gt;-th &lt;span id=&quot;command-line-argument_1&quot;&gt;command line argument&lt;/span&gt; given to the application.</source>
          <target state="translated">응용 프로그램에 제공된 &lt;em&gt;i&lt;/em&gt; 번째 &lt;span id=&quot;command-line-argument_1&quot;&gt;명령 행 인수를&lt;/span&gt; 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="41ea345d831e1e15dc72765d01e8c2e488abff1c" translate="yes" xml:space="preserve">
          <source>Returns the &lt;em&gt;string&lt;/em&gt; representation of a given &lt;em&gt;Peg&lt;/em&gt; variant object where present.</source>
          <target state="translated">주어진 &lt;em&gt;Peg&lt;/em&gt; 변형 객체 의 &lt;em&gt;문자열&lt;/em&gt; 표현을 반환합니다 .&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="71b794d7a2ed4c93f9d0eb5bac1e18ab882b0d4a" translate="yes" xml:space="preserve">
          <source>Returns the &lt;span id=&quot;current-working-directory_1&quot;&gt;current working directory&lt;/span&gt;.</source>
          <target state="translated">&lt;span id=&quot;current-working-directory_1&quot;&gt;현재 작업 디렉토리를&lt;/span&gt; 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="c9ed26717dcf5985d2a006d7aa71ce1194ded9fb" translate="yes" xml:space="preserve">
          <source>Returns the &lt;span id=&quot;type_2&quot;&gt;type&lt;/span&gt; of a node in a form matching the way the type instance was declared in the code.</source>
          <target state="translated">코드에서 형식 인스턴스가 선언 된 방식과 일치하는 형식의 노드 &lt;span id=&quot;type_2&quot;&gt;형식&lt;/span&gt; 을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="3cda697cb36f49d6d270ab65a128bd21ed3883d5" translate="yes" xml:space="preserve">
          <source>Returns the &lt;span id=&quot;type_3&quot;&gt;type&lt;/span&gt; of a node in a form matching the implementation of the type. Any intermediate aliases are expanded to arrive at the final type implementation. You can instead use &lt;code&gt;getImpl&lt;/code&gt; on a symbol if you want to find the intermediate aliases.</source>
          <target state="translated">&lt;span id=&quot;type_3&quot;&gt;유형&lt;/span&gt; 의 구현과 일치하는 양식의 노드 &lt;span id=&quot;type_3&quot;&gt;유형&lt;/span&gt; 을 리턴합니다 . 모든 중간 별명은 최종 유형 구현에 도달하도록 확장됩니다. 중간 별명을 찾으려면 기호에서 &lt;code&gt;getImpl&lt;/code&gt; 을 대신 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="15c9b199982ddb1300ebf75272e2ba25f689e774" translate="yes" xml:space="preserve">
          <source>Returns the Element Tag Name</source>
          <target state="translated">요소 태그 이름을 반환</target>
        </trans-unit>
        <trans-unit id="e3ea48d569b36f236e3612895a7c823acc97ed77" translate="yes" xml:space="preserve">
          <source>Returns the IPv4 any address, which can be used to listen on all available network adapters</source>
          <target state="translated">사용 가능한 모든 네트워크 어댑터에서 수신 대기하는 데 사용할 수있는 IPv4 모든 주소를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="6adce3178b8c3b20426c3e4a10c83d1fb7df36fb" translate="yes" xml:space="preserve">
          <source>Returns the IPv4 broadcast address (255.255.255.255)</source>
          <target state="translated">IPv4 브로드 캐스트 주소를 반환합니다 (255.255.255.255)</target>
        </trans-unit>
        <trans-unit id="2349504ebad9a6536c26520001e11ccad1529acd" translate="yes" xml:space="preserve">
          <source>Returns the IPv4 loopback address (127.0.0.1)</source>
          <target state="translated">IPv4 루프백 주소를 반환합니다 (127.0.0.1)</target>
        </trans-unit>
        <trans-unit id="7b6ef67ab44754b35712729ed50dc82d5ddee5cd" translate="yes" xml:space="preserve">
          <source>Returns the IPv6 any address (::0), which can be used to listen on all available network adapters</source>
          <target state="translated">사용 가능한 모든 네트워크 어댑터에서 수신 대기하는 데 사용할 수있는 IPv6 모든 주소 (:: 0)를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="ed51704630af368fd067e423ea2d6b4d9b780ec3" translate="yes" xml:space="preserve">
          <source>Returns the IPv6 loopback address (::1)</source>
          <target state="translated">IPv6 루프백 주소를 반환합니다 (:: 1)</target>
        </trans-unit>
        <trans-unit id="a043d26c4f552fd8d24f32736730f7c637cb7f97" translate="yes" xml:space="preserve">
          <source>Returns the Nim type node for given type. This can be used to turn macro typedesc parameter into proper NimNode representing type, since typedesc are an exception in macro calls - they are not mapped implicitly to NimNode like any other arguments.</source>
          <target state="translated">주어진 유형에 대한 Nim 유형 노드를 반환합니다. typedesc는 매크로 호출에서 예외이기 때문에 매크로 typedesc 매개 변수를 유형을 나타내는 적절한 NimNode로 변환하는 데 사용할 수 있습니다. 다른 인수와 같이 암시 적으로 NimNode에 맵핑되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="7433819d56d01691e2ccf657dcec2df2e8f31b5d" translate="yes" xml:space="preserve">
          <source>Returns the Processing Instructions target</source>
          <target state="translated">처리 지침 대상을 반환</target>
        </trans-unit>
        <trans-unit id="5653f59b7b80c05fc62c78ffa7eb6b2873729868" translate="yes" xml:space="preserve">
          <source>Returns the UTF-8 substring starting at codepoint pos with len codepoints. If pos or len is negative they count from the end of the string. If len is not given it means the longest possible string.</source>
          <target state="translated">len 코드 포인트를 사용하여 코드 포인트 pos에서 시작하는 UTF-8 하위 문자열을 리턴합니다. pos 또는 len이 음수이면 문자열 끝부터 계산됩니다. len이 주어지지 않으면 가능한 가장 긴 문자열을 의미합니다.</target>
        </trans-unit>
        <trans-unit id="823a5548b20b132657e68bae1622e4e4132f8775" translate="yes" xml:space="preserve">
          <source>Returns the Unicode character &lt;code&gt;s[i]&lt;/code&gt; in &lt;code&gt;result&lt;/code&gt;. If &lt;code&gt;doInc == true&lt;/code&gt;&lt;code&gt;i&lt;/code&gt; is incremented by the number of bytes that have been processed.</source>
          <target state="translated">반환 유니 코드 문자 &lt;code&gt;s[i]&lt;/code&gt; 의 &lt;code&gt;result&lt;/code&gt; . 경우 &lt;code&gt;doInc == true&lt;/code&gt; &lt;code&gt;i&lt;/code&gt; 처리 된 바이트 수만큼 증가된다.</target>
        </trans-unit>
        <trans-unit id="39287f476e3bfbbbd1b3cc2c693dcdeef60f15e2" translate="yes" xml:space="preserve">
          <source>Returns the absolute path of &lt;em&gt;path&lt;/em&gt;, rooted at &lt;em&gt;root&lt;/em&gt; (which must be absolute) if &lt;em&gt;path&lt;/em&gt; is absolute, return it, ignoring &lt;em&gt;root&lt;/em&gt;</source>
          <target state="translated">반환 값의 절대 경로 &lt;em&gt;경로&lt;/em&gt; 루트, &lt;em&gt;루트&lt;/em&gt; (절대해야하는) 경우 &lt;em&gt;경로가&lt;/em&gt; 절대 무시하고, 그것을 돌려 &lt;em&gt;루트&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="6ea5f6bd3f9ea7654f4dfb8f3de71e1a0ce4b532" translate="yes" xml:space="preserve">
          <source>Returns the amount of data pieces inside the stream.</source>
          <target state="translated">스트림 내부의 데이터 조각 수를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="1219754fd56425ae43ed093ca4c19533433f0a7b" translate="yes" xml:space="preserve">
          <source>Returns the arity of the given type. This is the number of &quot;type&quot; components or the number of generic parameters a given type &lt;code&gt;t&lt;/code&gt; has.</source>
          <target state="translated">주어진 유형의 arity를 ​​반환합니다. 이것은 &quot;type&quot;구성 요소의 수 또는 주어진 유형 &lt;code&gt;t&lt;/code&gt; 에 있는 일반 매개 변수의 수입니다 .</target>
        </trans-unit>
        <trans-unit id="2059f108411ea7f5060cac7d3878c64da9452b85" translate="yes" xml:space="preserve">
          <source>Returns the back-reference index of a captured sub-pattern in the &lt;em&gt;Captures&lt;/em&gt; object for a given &lt;em&gt;Peg&lt;/em&gt; variant object where present.</source>
          <target state="translated">주어진 &lt;em&gt;Peg&lt;/em&gt; 변형 객체가있는 경우 &lt;em&gt;Captures&lt;/em&gt; 객체 에서 &lt;em&gt;캡처&lt;/em&gt; 된 하위 패턴의 역 참조 색인을 반환합니다 .&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="ca6b794572a1b7b105f3786e1abc623a7e896705" translate="yes" xml:space="preserve">
          <source>Returns the byte position of unicode character at position pos in s with an optional start byte position. returns the special value -1 if it runs out of the string</source>
          <target state="translated">선택적 시작 바이트 위치를 사용하여 위치 pos에서 유니 코드 문자의 바이트 위치를 반환합니다. 문자열이 부족하면 특수 값 -1을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="d43abdcc32243118359e534675605f18d35d812a" translate="yes" xml:space="preserve">
          <source>Returns the complex number with polar coordinates &lt;em&gt;r&lt;/em&gt; and &lt;em&gt;phi&lt;/em&gt;.</source>
          <target state="translated">극좌표 &lt;em&gt;r&lt;/em&gt; 과 &lt;em&gt;phi로&lt;/em&gt; 복소수를 구합니다 .</target>
        </trans-unit>
        <trans-unit id="358ef03ef3c60bbd3ce5d975aa6fd219e1d9b74d" translate="yes" xml:space="preserve">
          <source>Returns the config directory of the current user for applications.</source>
          <target state="translated">응용 프로그램에 대한 현재 사용자의 구성 디렉토리를 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="95f6f709748d8136b6ddc3e522b728ef71103dff" translate="yes" xml:space="preserve">
          <source>Returns the contents of this option or &lt;em&gt;otherwise&lt;/em&gt; if the option is none.</source>
          <target state="translated">반환이 옵션의 내용이나 &lt;em&gt;다른&lt;/em&gt; 옵션이 하나도없는 경우.</target>
        </trans-unit>
        <trans-unit id="20851868b7760a2d968df9e69541fc1e01654770" translate="yes" xml:space="preserve">
          <source>Returns the cosecant of &lt;em&gt;z&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;z&lt;/em&gt; 의 코시컨트를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="a69e3d606de0d95df07623f7d2795ededaf14241" translate="yes" xml:space="preserve">
          <source>Returns the cosine of &lt;em&gt;z&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;z&lt;/em&gt; 의 코사인을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="512bec76bbfbda171b3dc22f92d2d7c76c5f21b1" translate="yes" xml:space="preserve">
          <source>Returns the cotangent of &lt;em&gt;z&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;z&lt;/em&gt; 의 코탄젠트를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="7c44a2f225c0656c4984e0204b4d9b37b2725674" translate="yes" xml:space="preserve">
          <source>Returns the current working directory.</source>
          <target state="translated">현재 작업 디렉토리를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="ef0675a729cb81d96787bfcb8ceae90163a7c73c" translate="yes" xml:space="preserve">
          <source>Returns the day of the week enum from day, month and year, according to the Julian calendar. &lt;strong&gt;Deprecated since v0.18.0&lt;/strong&gt;</source>
          <target state="translated">Julian 달력에 따라 요일, 일 및 월에서 요일 열거를 반환합니다. &lt;strong&gt;v0.18.0부터 사용되지 않음&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="b8e59982ec0b8066eb026a2ed720c38b5f9f9a46" translate="yes" xml:space="preserve">
          <source>Returns the day of the week enum from day, month and year. Equivalent with &lt;code&gt;initDateTime(monthday, month, year, 0, 0, 0).weekday&lt;/code&gt;.</source>
          <target state="translated">일, 월 및 연도에서 요일 열거를 반환합니다. 와 등가 &lt;code&gt;initDateTime(monthday, month, year, 0, 0, 0).weekday&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="4fa70cf2a79fdcabda28d7c41b04b923d256481a" translate="yes" xml:space="preserve">
          <source>Returns the day of the year. Equivalent with &lt;code&gt;initDateTime(monthday, month, year, 0, 0, 0).yearday&lt;/code&gt;.</source>
          <target state="translated">일을 돌려줍니다. 와 등가 &lt;code&gt;initDateTime(monthday, month, year, 0, 0, 0).yearday&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="2d972459838c903303770f7bf06e90a0ed84df8a" translate="yes" xml:space="preserve">
          <source>Returns the default filename for a logger.</source>
          <target state="translated">로거의 기본 파일 이름을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="e962d9ac2f76673ff17f9107d37cdd7c91870947" translate="yes" xml:space="preserve">
          <source>Returns the difference of the sets &lt;em&gt;s1&lt;/em&gt; and &lt;em&gt;s2&lt;/em&gt;.</source>
          <target state="translated">집합 &lt;em&gt;s1&lt;/em&gt; 과 &lt;em&gt;s2&lt;/em&gt; 의 차이를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="cde5eac100ae5b614459cf59e78de95c2de517c4" translate="yes" xml:space="preserve">
          <source>Returns the directory of the application's executable.</source>
          <target state="translated">응용 프로그램 실행 파일의 디렉토리를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="0e6370c3941b4dba713b459ae89fd981d4bedcb4" translate="yes" xml:space="preserve">
          <source>Returns the distro's native command line to install 'foreignPackageName' and whether it requires root/admin rights.</source>
          <target state="translated">'foreignPackageName'을 설치하기위한 배포판의 기본 명령 줄과 루트 / 관리자 권한이 필요한지 여부를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="a2188ec7d8b2a26e1588447e2107061e12a0e5fc" translate="yes" xml:space="preserve">
          <source>Returns the edit distance between &lt;em&gt;a&lt;/em&gt; and &lt;em&gt;b&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;a&lt;/em&gt; 와 &lt;em&gt;b&lt;/em&gt; 사이의 편집 거리를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="6e7af8cb6f899c592d00cd50a6013888d315f923" translate="yes" xml:space="preserve">
          <source>Returns the file descriptor for the registered signal.</source>
          <target state="translated">등록 된 신호에 대한 파일 디스크립터를 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="bc63e72775b038c01ababa66995a57eceff5b40b" translate="yes" xml:space="preserve">
          <source>Returns the file descriptor for the registered timer.</source>
          <target state="translated">등록 된 타이머의 파일 설명자를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="b126f9553d4c9ba1bfd9f8e0a91f5ab64ab9b148" translate="yes" xml:space="preserve">
          <source>Returns the filename of the application's executable.</source>
          <target state="translated">응용 프로그램 실행 파일의 파일 이름을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="adf375ae1da98ac46dc18c55e71d641eb10b309a" translate="yes" xml:space="preserve">
          <source>Returns the first element of &lt;em&gt;deq&lt;/em&gt;, but does not remove it from the deque.</source>
          <target state="translated">&lt;em&gt;deq&lt;/em&gt; 의 첫 번째 요소를 반환 하지만 deque에서 제거하지는 않습니다.</target>
        </trans-unit>
        <trans-unit id="dbb577ef88265f28a26bcb01520bd1c1d8ad8217" translate="yes" xml:space="preserve">
          <source>Returns the first index of &lt;em&gt;item&lt;/em&gt; in &lt;em&gt;a&lt;/em&gt; or -1 if not found. This requires appropriate &lt;em&gt;items&lt;/em&gt; and &lt;em&gt;==&lt;/em&gt; operations to work.</source>
          <target state="translated">의 첫 번째 인덱스 반환 &lt;em&gt;항목&lt;/em&gt; 에 또는 발견되지 -1 경우. 이를 위해서는 적절한 &lt;em&gt;항목&lt;/em&gt; 과 &lt;em&gt;==&lt;/em&gt; 작업 이 필요합니다 .&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="0c0507d1d2a44cbb9d1d78ab2a36f85e8e167881" translate="yes" xml:space="preserve">
          <source>Returns the format string that was used to construct &lt;code&gt;f&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;f&lt;/code&gt; 를 구성하는 데 사용 된 형식 문자열을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="ae97b02f4656b13efaf66409cc376f53702e5c50" translate="yes" xml:space="preserve">
          <source>Returns the full (&lt;span id=&quot;absolute_1&quot;&gt;absolute&lt;/span&gt;) path of an existing file &lt;em&gt;filename&lt;/em&gt;, raises OSError in case of an error. Follows symlinks.</source>
          <target state="translated">기존 파일 &lt;em&gt;filename&lt;/em&gt; 의 전체 ( &lt;span id=&quot;absolute_1&quot;&gt;절대&lt;/span&gt; ) 경로를 반환하고 오류가 발생하면 OSError가 발생합니다. 심볼릭 링크를 따릅니다.&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="d49781281b1143a4b4bdc8add328f40c359c2806" translate="yes" xml:space="preserve">
          <source>Returns the home directory of the current user.</source>
          <target state="translated">현재 사용자의 홈 디렉토리를 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="7c82e4545d98e84c1c322c09f4faecd80039521d" translate="yes" xml:space="preserve">
          <source>Returns the hyperbolic cosecant of &lt;em&gt;z&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;z&lt;/em&gt; 의 쌍곡 코시컨트를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="e785a9a98849a574d2b5ef31ce4f6c4411049fc8" translate="yes" xml:space="preserve">
          <source>Returns the hyperbolic cosine of &lt;em&gt;z&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;z&lt;/em&gt; 의 쌍곡 코사인을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="867ddae35dbed6f127c59de11de752b01a23aa38" translate="yes" xml:space="preserve">
          <source>Returns the hyperbolic cotangent of &lt;em&gt;z&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;z&lt;/em&gt; 의 쌍곡 코탄젠트를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="a94942bb6b75b6797eabf43e10308bd4c88b31bd" translate="yes" xml:space="preserve">
          <source>Returns the hyperbolic secant of &lt;em&gt;z&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;z&lt;/em&gt; 의 쌍곡선 시컨트를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="012add359acea4853b5e3238eae2580d3054529d" translate="yes" xml:space="preserve">
          <source>Returns the hyperbolic sine of &lt;em&gt;z&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;z&lt;/em&gt; 의 쌍곡 사인을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="5eaef9c432e7d46458a2b5cc51e7f8014f05434c" translate="yes" xml:space="preserve">
          <source>Returns the hyperbolic tangent of &lt;em&gt;z&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;z&lt;/em&gt; 의 쌍곡 탄젠트를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="1dce11bbab06f8ffead798ec7486fedd346c105b" translate="yes" xml:space="preserve">
          <source>Returns the index of the first item in &lt;em&gt;possibilities&lt;/em&gt; if not ambiguous.</source>
          <target state="translated">모호하지 않은 경우 &lt;em&gt;가능한&lt;/em&gt; 첫 번째 항목의 색인을 리턴 합니다.</target>
        </trans-unit>
        <trans-unit id="f05f9acaf107aa3190a4bc7df5f213e423e2e888" translate="yes" xml:space="preserve">
          <source>Returns the intersection of the sets &lt;em&gt;s1&lt;/em&gt; and &lt;em&gt;s2&lt;/em&gt;.</source>
          <target state="translated">세트 &lt;em&gt;s1&lt;/em&gt; 과 &lt;em&gt;s2&lt;/em&gt; 의 교집합을 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="f935f229b0bfb085d8c1d575a5aa200df2ef7b88" translate="yes" xml:space="preserve">
          <source>Returns the inverse cosecant of &lt;em&gt;z&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;z&lt;/em&gt; 의 역 코시컨트를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="20751c2ed8fa6863ff5dece55a7e389fb427e1ad" translate="yes" xml:space="preserve">
          <source>Returns the inverse cosine of &lt;em&gt;z&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;z&lt;/em&gt; 의 역 코사인을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="d17c0d9927485c09b41254f0d91f5bc173767638" translate="yes" xml:space="preserve">
          <source>Returns the inverse cotangent of &lt;em&gt;z&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;z&lt;/em&gt; 의 역 코탄젠트를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="cc3717f106a5003f52f78d884432e5865dbca12a" translate="yes" xml:space="preserve">
          <source>Returns the inverse hyperbolic cosecant of &lt;em&gt;z&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;z&lt;/em&gt; 의 역 쌍곡 코시컨트를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="df5064f4d7ad9bb96d44a0634a89ebaf9c38e3c5" translate="yes" xml:space="preserve">
          <source>Returns the inverse hyperbolic cosine of &lt;em&gt;z&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;z&lt;/em&gt; 의 역 쌍곡 코사인을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="c92fa0cbea631550312413b45214232865b24691" translate="yes" xml:space="preserve">
          <source>Returns the inverse hyperbolic cotangent of &lt;em&gt;z&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;z&lt;/em&gt; 의 역 쌍곡 코탄젠트를 구합니다 .</target>
        </trans-unit>
        <trans-unit id="16101e5040db0d5cdc27ac8767562ddaf9df3c67" translate="yes" xml:space="preserve">
          <source>Returns the inverse hyperbolic secant of &lt;em&gt;z&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;z&lt;/em&gt; 의 역 쌍곡 시컨트를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="68e35bfedfe2bfc68c79ec70076f047edacaf910" translate="yes" xml:space="preserve">
          <source>Returns the inverse hyperbolic sine of &lt;em&gt;z&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;z&lt;/em&gt; 의 역 쌍곡 사인을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="0cfa561a9b2dd1b1753328afeba4603410ef5c08" translate="yes" xml:space="preserve">
          <source>Returns the inverse hyperbolic tangent of &lt;em&gt;z&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;z&lt;/em&gt; 의 역 쌍곡 탄젠트를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="ba022740663f94c827a5e35661ae5a73236aa9fa" translate="yes" xml:space="preserve">
          <source>Returns the inverse secant of &lt;em&gt;z&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;z&lt;/em&gt; 의 역 시컨트를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="3c908fba863b6f2ed1ca1be3d23be24fe5c3727a" translate="yes" xml:space="preserve">
          <source>Returns the inverse sine of &lt;em&gt;z&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;z&lt;/em&gt; 의 역 사인을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="db980b4934b225a980d12dd26f945fb3bbad0199" translate="yes" xml:space="preserve">
          <source>Returns the inverse tangent of &lt;em&gt;z&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;z&lt;/em&gt; 의 역 탄젠트를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="1bdfb318daa81f8388873dc49cac501df0ee04da" translate="yes" xml:space="preserve">
          <source>Returns the last element of &lt;em&gt;deq&lt;/em&gt;, but does not remove it from the deque.</source>
          <target state="translated">&lt;em&gt;deq&lt;/em&gt; 의 마지막 요소를 반환 하지만 deque에서 제거하지는 않습니다.</target>
        </trans-unit>
        <trans-unit id="3c3568a8a59a23bd3c47abc38d639e8234f727e0" translate="yes" xml:space="preserve">
          <source>Returns the local hostname (not the FQDN)</source>
          <target state="translated">로컬 호스트 이름을 반환합니다 (FQDN 아님).</target>
        </trans-unit>
        <trans-unit id="21f1eaae83d3abe304f9e1afa86c216faef79e1b" translate="yes" xml:space="preserve">
          <source>Returns the log base 10 of &lt;em&gt;z&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;z&lt;/em&gt; 의 로그베이스 10을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="32d434abd5082f55f8ad5af6623032d1d30788a7" translate="yes" xml:space="preserve">
          <source>Returns the log base 2 of &lt;em&gt;z&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;z&lt;/em&gt; 의 로그베이스 2를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="30fefcee5b9c1400d6f8a7e087dccd826153b24e" translate="yes" xml:space="preserve">
          <source>Returns the merged and sorted indices into a single HTML block which can be further embedded into nimdoc templates.</source>
          <target state="translated">병합 및 정렬 된 인덱스를 nimdoc 템플릿에 추가로 포함 할 수있는 단일 HTML 블록으로 반환합니다.</target>
        </trans-unit>
        <trans-unit id="3f8dc736257a7fb16276e1007f7a3cc6203dc2b4" translate="yes" xml:space="preserve">
          <source>Returns the name of the Attribute</source>
          <target state="translated">속성의 이름을 반환</target>
        </trans-unit>
        <trans-unit id="59aa8c03ea22c046f6e91773826223012b99a16f" translate="yes" xml:space="preserve">
          <source>Returns the name of the JsObject's JavaScript type as a cstring.</source>
          <target state="translated">JsObject의 JavaScript 유형 이름을 cstring으로 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="5e71c5b59da08e8b0ff9d2557c61076c1d833e47" translate="yes" xml:space="preserve">
          <source>Returns the name of the given type.</source>
          <target state="translated">주어진 타입의 이름을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="9906a5fa9ce20f5e5185caf2720c0e6ef096cf53" translate="yes" xml:space="preserve">
          <source>Returns the name of the timezone.</source>
          <target state="translated">시간대 이름을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="25c33f85c950eaa780c845a0c076d4a6c2529008" translate="yes" xml:space="preserve">
          <source>Returns the name of this node</source>
          <target state="translated">이 노드의 이름을 돌려줍니다</target>
        </trans-unit>
        <trans-unit id="28681f2a35610ba03a7e3f770e1a61864cc1218b" translate="yes" xml:space="preserve">
          <source>Returns the natural log of &lt;em&gt;z&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;z&lt;/em&gt; 의 자연 로그를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="17cbfcbdaa935018c204b81856b33524e0e77584" translate="yes" xml:space="preserve">
          <source>Returns the next pseudo random number ranging from 0 to high(uint32)</source>
          <target state="translated">0에서 high (uint32) 범위의 다음 의사 난수를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="cebb03f437a4a106392e96937340e702bf3270a8" translate="yes" xml:space="preserve">
          <source>Returns the next sibling of this node</source>
          <target state="translated">이 노드의 다음 형제를 반환합니다</target>
        </trans-unit>
        <trans-unit id="f9cdab9bca02508199771437f71f8865e10ea563" translate="yes" xml:space="preserve">
          <source>Returns the number of &lt;span id=&quot;command-line-arguments_1&quot;&gt;command line arguments&lt;/span&gt; given to the application.</source>
          <target state="translated">응용 프로그램에 제공된 &lt;span id=&quot;command-line-arguments_1&quot;&gt;명령 행 인수&lt;/span&gt; 수를 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="d269fb2bd9b0984074ff25662d5abbeb504fa562" translate="yes" xml:space="preserve">
          <source>Returns the number of Unicode characters of the string &lt;code&gt;s&lt;/code&gt;</source>
          <target state="translated">문자열 &lt;code&gt;s&lt;/code&gt; 유니 코드 문자 수를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="7a4a75324ac5ed5e003df60c683bd0e77be24639" translate="yes" xml:space="preserve">
          <source>Returns the number of bytes the rune starting at &lt;code&gt;s[i]&lt;/code&gt; takes</source>
          <target state="translated">룬에서 시작 바이트 수 반환 &lt;code&gt;s[i]&lt;/code&gt; 얻어</target>
        </trans-unit>
        <trans-unit id="aa284194f3de1c6d83f6c1d799814514d9388a2d" translate="yes" xml:space="preserve">
          <source>Returns the number of days spanned by a given number of years.</source>
          <target state="translated">주어진 기간 (년)에 걸쳐있는 일 수를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="c6410e16df9d6786db04898460a8796cf7527fa5" translate="yes" xml:space="preserve">
          <source>Returns the number of keys in &lt;em&gt;s&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;s&lt;/em&gt; 의 키 수를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="9ad87f976893c5d9f4743f19aec9d2b6e130936d" translate="yes" xml:space="preserve">
          <source>Returns the number of leading zero bits in integer. If &lt;em&gt;x&lt;/em&gt; is zero, when &lt;code&gt;noUndefinedBitOpts&lt;/code&gt; is set, result is 0, otherwise result is undefined.</source>
          <target state="translated">선행 0 비트의 수를 정수로 반환합니다. 경우 &lt;em&gt;X가&lt;/em&gt; 되면 제로 &lt;code&gt;noUndefinedBitOpts&lt;/code&gt; 가 설정되고, 그 결과, 그렇지 않으면 결과가 정의되고, 0이다.</target>
        </trans-unit>
        <trans-unit id="10ae6bad4e5ca9ef6cb1b114c9210ee31bdb3d93" translate="yes" xml:space="preserve">
          <source>Returns the number of leap years spanned by a given number of years.</source>
          <target state="translated">주어진 연도에 걸쳐있는 윤년 수를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="868b75ec3b9ff5ba8d5879c82669503c91167a28" translate="yes" xml:space="preserve">
          <source>Returns the number of lines in the string &lt;em&gt;s&lt;/em&gt;.</source>
          <target state="translated">문자열 &lt;em&gt;s&lt;/em&gt; 의 줄 수를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="8031e96acb04e749b09c745d3dfff7519e307adb" translate="yes" xml:space="preserve">
          <source>Returns the number of occurrences of the item &lt;em&gt;x&lt;/em&gt; in the container &lt;em&gt;s&lt;/em&gt;.</source>
          <target state="translated">컨테이너 &lt;em&gt;s&lt;/em&gt; 에서 &lt;em&gt;x&lt;/em&gt; 항목의 발생 횟수를 리턴합니다 .&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="1440a213702270cf2e7bb92677edc89da9c76164" translate="yes" xml:space="preserve">
          <source>Returns the number of skipped bytes.</source>
          <target state="translated">건너 뛴 바이트 수를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="5ed6c957ece3b4b44218387b7d7e327cc05a3415" translate="yes" xml:space="preserve">
          <source>Returns the number of the parsed characters or 0 in case of an error. This proc is sensitive to the already existing value of &lt;code&gt;number&lt;/code&gt; and will likely not do what you want unless you make sure &lt;code&gt;number&lt;/code&gt; is zero. You can use this feature to &lt;em&gt;chain&lt;/em&gt; calls, though the result int will quickly overflow. Example:</source>
          <target state="translated">파싱 ​​된 문자 수를 반환하거나 오류가 발생한 경우 0을 반환합니다. 이 proc은 이미 존재하는 &lt;code&gt;number&lt;/code&gt; 값에 민감하며 &lt;code&gt;number&lt;/code&gt; 가 0 인지 확인하지 않으면 원하는 것을 수행하지 않을 것 입니다. 이 기능을 사용하면 호출 을 &lt;em&gt;연쇄&lt;/em&gt; 할 수 있지만 결과는 빠르게 오버플로됩니다. 예:</target>
        </trans-unit>
        <trans-unit id="c7835afba0157e1a056262f78ac77d6114f01a80" translate="yes" xml:space="preserve">
          <source>Returns the number of trailing zeros in integer. If &lt;em&gt;x&lt;/em&gt; is zero, when &lt;code&gt;noUndefinedBitOpts&lt;/code&gt; is set, result is 0, otherwise result is undefined.</source>
          <target state="translated">후행 0의 수를 정수로 리턴합니다. 경우 &lt;em&gt;X가&lt;/em&gt; 되면 제로 &lt;code&gt;noUndefinedBitOpts&lt;/code&gt; 가 설정되고, 그 결과, 그렇지 않으면 결과가 정의되고, 0이다.</target>
        </trans-unit>
        <trans-unit id="38b458cbb1ce4d0f1bbe000474a921dbda5aaf84" translate="yes" xml:space="preserve">
          <source>Returns the number of years spanned by a given number of days and the remainder as days.</source>
          <target state="translated">주어진 일 수에 해당하는 기간과 나머지 일 수를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="47361723fe221d8d9427bb3568a0d9ed4d141663" translate="yes" xml:space="preserve">
          <source>Returns the number of years spanned by a given number of days.</source>
          <target state="translated">주어진 일 수에 걸친 기간을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="c5502538b141e755c101390499be955a30f09349" translate="yes" xml:space="preserve">
          <source>Returns the offset of the local (non-DST) timezone in seconds west of UTC.</source>
          <target state="translated">UTC (서쪽 초)의 로컬 (DST 이외) 시간대의 오프셋을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="6c13da3192f12802c7f7f7cf658fe53f46bb891f" translate="yes" xml:space="preserve">
          <source>Returns the owner document of this node</source>
          <target state="translated">이 노드의 소유자 문서를 돌려줍니다</target>
        </trans-unit>
        <trans-unit id="19eb25b16b94b106cd29d96dc8d300008883baae" translate="yes" xml:space="preserve">
          <source>Returns the parent directory of &lt;em&gt;path&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;path&lt;/em&gt; 의 부모 디렉토리를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="f55db505f7e31d5d602432fbb5c5933f00a6446a" translate="yes" xml:space="preserve">
          <source>Returns the parent node of this node</source>
          <target state="translated">이 노드의 부모 노드를 돌려줍니다</target>
        </trans-unit>
        <trans-unit id="9031ef989255b038ad3598bcc8f847d9e67d50fe" translate="yes" xml:space="preserve">
          <source>Returns the path to the currently compiling project</source>
          <target state="translated">현재 컴파일중인 프로젝트의 경로를 반환</target>
        </trans-unit>
        <trans-unit id="119499b23ef4163bf4c0bf8fe76b075e516ec784" translate="yes" xml:space="preserve">
          <source>Returns the phase of &lt;em&gt;z&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;z&lt;/em&gt; 위상을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="74a6b9b345a48fefe2db6377f4f4e7c707706a8d" translate="yes" xml:space="preserve">
          <source>Returns the position of the invalid byte in &lt;code&gt;s&lt;/code&gt; if the string &lt;code&gt;s&lt;/code&gt; does not hold valid UTF-8 data. Otherwise &lt;code&gt;-1&lt;/code&gt; is returned.</source>
          <target state="translated">문자열 &lt;code&gt;s&lt;/code&gt; 에 유효한 UTF-8 데이터가 없으면 유효하지 않은 바이트의 위치를 &lt;code&gt;s&lt;/code&gt; 로 반환합니다 . 그렇지 않으면 &lt;code&gt;-1&lt;/code&gt; 이 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="3224ab35c1aac184c90db0d92fb81df2b0637785" translate="yes" xml:space="preserve">
          <source>Returns the previous sibling of this node</source>
          <target state="translated">이 노드의 이전 형제를 반환합니다</target>
        </trans-unit>
        <trans-unit id="a9bd67cf75a1f91a6848fff257cf259eca2e1503" translate="yes" xml:space="preserve">
          <source>Returns the reverse of &lt;code&gt;s&lt;/code&gt;, interpreting it as Unicode characters. Unicode combining characters are correctly interpreted as well:</source>
          <target state="translated">&lt;code&gt;s&lt;/code&gt; 의 반대 를 유니 코드 문자로 해석 하여 반환합니다 . 유니 코드 결합 문자도 올바르게 해석됩니다.</target>
        </trans-unit>
        <trans-unit id="034dca5b89c49b3b3a21763616e6836be709ce0c" translate="yes" xml:space="preserve">
          <source>Returns the secant of &lt;em&gt;z&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;z&lt;/em&gt; 의 시컨트를 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="8f28f034b9df64e62630194c82dba2c27ea90f30" translate="yes" xml:space="preserve">
          <source>Returns the sine of &lt;em&gt;z&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;z&lt;/em&gt; 의 사인을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="9dbc212b3b981df30039102f6c2ab55fe5bcd1ba" translate="yes" xml:space="preserve">
          <source>Returns the socket's file descriptor</source>
          <target state="translated">소켓의 파일 기술자를 돌려줍니다</target>
        </trans-unit>
        <trans-unit id="aff469b903b9494158308e0a594553f762cb57f2" translate="yes" xml:space="preserve">
          <source>Returns the socket's file descriptor.</source>
          <target state="translated">소켓의 파일 기술자를 돌려줍니다.</target>
        </trans-unit>
        <trans-unit id="abe5aa8e0fe8f8d3006ccbb8fc6f6340b16bdf3d" translate="yes" xml:space="preserve">
          <source>Returns the string representation of the specified URI object.</source>
          <target state="translated">지정된 URI 객체의 문자열 표현을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="d310f9d142541923eb8760089370f02ccac138c1" translate="yes" xml:space="preserve">
          <source>Returns the symmetric difference of the sets &lt;em&gt;s1&lt;/em&gt; and &lt;em&gt;s2&lt;/em&gt;.</source>
          <target state="translated">세트 &lt;em&gt;s1&lt;/em&gt; 과 &lt;em&gt;s2&lt;/em&gt; 의 대칭 차이를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="831b1b13c8ff344093708e211ecc41f8909c7f54" translate="yes" xml:space="preserve">
          <source>Returns the tail part of &lt;em&gt;path&lt;/em&gt;..</source>
          <target state="translated">&lt;em&gt;경로&lt;/em&gt; 의 꼬리 부분을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="3f73b5f8833125b0818002da84b6a296d0b9c654" translate="yes" xml:space="preserve">
          <source>Returns the tangent of &lt;em&gt;z&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;z&lt;/em&gt; 의 탄젠트를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="c98c53f67d8dc3b78d8f86ac49ca64dbe19df2f3" translate="yes" xml:space="preserve">
          <source>Returns the temporary directory of the current user for applications to save temporary files in.</source>
          <target state="translated">애플리케이션이 임시 파일을 저장할 현재 사용자의 임시 디렉토리를 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="99fcc09ef326b7f61e3fbba7e6283a4079d8758d" translate="yes" xml:space="preserve">
          <source>Returns the terminal width and height as a tuple. Internally calls &lt;em&gt;terminalWidth&lt;/em&gt; and &lt;em&gt;terminalHeight&lt;/em&gt;, so the same assumptions apply.</source>
          <target state="translated">터미널 너비와 높이를 튜플로 반환합니다. 내부적으로 &lt;em&gt;terminalWidth&lt;/em&gt; 및 &lt;em&gt;terminalHeight를&lt;/em&gt; 호출 하므로 동일한 가정이 적용됩니다.</target>
        </trans-unit>
        <trans-unit id="485ea0f123b90e802d59e631716f2f95f1826a64" translate="yes" xml:space="preserve">
          <source>Returns the time in seconds since the unix epoch.</source>
          <target state="translated">유닉스 시대 이후의 시간을 초 단위로 반환합니다.</target>
        </trans-unit>
        <trans-unit id="7df8e6a9d30abb456a6d968ddd869b70bc13ffe3" translate="yes" xml:space="preserve">
          <source>Returns the type kind of the node 'n' that should represent a type, that means the node should have been obtained via &lt;code&gt;getType&lt;/code&gt;.</source>
          <target state="translated">유형을 나타내는 노드 'n'의 유형 종류를 리턴합니다. 즉, &lt;code&gt;getType&lt;/code&gt; 을 통해 노드를 확보해야합니다 .</target>
        </trans-unit>
        <trans-unit id="f005451c6d94515674b59537aa80c67d9afcfad4" translate="yes" xml:space="preserve">
          <source>Returns the type of this node</source>
          <target state="translated">이 노드의 형태를 돌려줍니다</target>
        </trans-unit>
        <trans-unit id="6741d8a109f95be623bc0496522d3d085d106130" translate="yes" xml:space="preserve">
          <source>Returns the underlying IO Completion Port handle (Windows) or selector (Unix) for the specified dispatcher.</source>
          <target state="translated">지정된 디스패처에 대한 기본 IO 완료 포트 핸들 (Windows) 또는 선택기 (Unix)를 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="b2bf709110faaa4311d681b0cccd57863ada3fd7" translate="yes" xml:space="preserve">
          <source>Returns the unicode character at position pos</source>
          <target state="translated">위치 pos의 유니 코드 문자를 반환</target>
        </trans-unit>
        <trans-unit id="b3bcfe5c86cb245a8ba3c4e6e3381fd930ac4c8b" translate="yes" xml:space="preserve">
          <source>Returns the unicode character at position pos as UTF8 String</source>
          <target state="translated">위치 pos의 유니 코드 문자를 UTF8 문자열로 반환합니다</target>
        </trans-unit>
        <trans-unit id="ec1e257e3ab866521de12167756645f6bbd4cf09" translate="yes" xml:space="preserve">
          <source>Returns the unicode character in &lt;code&gt;s&lt;/code&gt; at byte index &lt;code&gt;i&lt;/code&gt;</source>
          <target state="translated">바이트 인덱스 &lt;code&gt;i&lt;/code&gt; 에서 유니 코드 문자를 &lt;code&gt;s&lt;/code&gt; 로 반환합니다.</target>
        </trans-unit>
        <trans-unit id="f2f1a75ebbf42c4fa5d0b7cc12ea43445b338ea3" translate="yes" xml:space="preserve">
          <source>Returns the union of the sets &lt;em&gt;s1&lt;/em&gt; and &lt;em&gt;s2&lt;/em&gt;.</source>
          <target state="translated">세트 &lt;em&gt;s1&lt;/em&gt; 및 &lt;em&gt;s2&lt;/em&gt; 의 합집합을 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="a42c4006c25448cb8e8a9927654e643e2d41eee6" translate="yes" xml:space="preserve">
          <source>Returns the value of a &lt;code&gt;some&lt;/code&gt;. Behavior is undefined for &lt;code&gt;none&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;some&lt;/code&gt; 의 값을 반환합니다 . &lt;code&gt;none&lt;/code&gt; 의 동작은 정의되어 있지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="e9822f79cc77c7dcef1e1be2dfccc7f5d5a327da" translate="yes" xml:space="preserve">
          <source>Returns the value of a specific &lt;code&gt;rnField&lt;/code&gt; node.</source>
          <target state="translated">특정 &lt;code&gt;rnField&lt;/code&gt; 노드 의 값을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="0cd4bf07463e0f7367808c9b677081eac431e722" translate="yes" xml:space="preserve">
          <source>Returns the values associated with the given &lt;code&gt;key&lt;/code&gt;. If the returned values are passed to a procedure expecting a &lt;code&gt;string&lt;/code&gt;, the first value is automatically picked. If there are no values associated with the key, an exception is raised.</source>
          <target state="translated">주어진 &lt;code&gt;key&lt;/code&gt; 와 관련된 값을 반환합니다 . 리턴 된 값이 &lt;code&gt;string&lt;/code&gt; 을 기대하는 프로 시저로 전달 되면 첫 번째 값이 자동으로 선택됩니다. 키와 관련된 값이 없으면 예외가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="93f51faa57e9b3489262567f680af0cbaa4e89f3" translate="yes" xml:space="preserve">
          <source>Returns the values associated with the given &lt;code&gt;key&lt;/code&gt;. If there are no values associated with the key, then &lt;code&gt;default&lt;/code&gt; is returned.</source>
          <target state="translated">주어진 &lt;code&gt;key&lt;/code&gt; 와 관련된 값을 반환합니다 . 키와 관련된 값이 없으면 &lt;code&gt;default&lt;/code&gt; 이 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="a103de7c9534549de982a329849174d847991461" translate="yes" xml:space="preserve">
          <source>Returns this Attributes owner element</source>
          <target state="translated">이 속성의 소유자 요소를 돌려줍니다</target>
        </trans-unit>
        <trans-unit id="97aed22ddb99c2d3b3900b9eff89121a7467bb53" translate="yes" xml:space="preserve">
          <source>Returns this node's first child</source>
          <target state="translated">이 노드의 최초의 아이를 돌려줍니다</target>
        </trans-unit>
        <trans-unit id="46c4123940050ab879470321b00f02a05fe04d3e" translate="yes" xml:space="preserve">
          <source>Returns this node's last child</source>
          <target state="translated">이 노드의 마지막 자식을 돌려줍니다</target>
        </trans-unit>
        <trans-unit id="5566259966775d6ab4d785dba138b97e794b8ef6" translate="yes" xml:space="preserve">
          <source>Returns this nodes local name</source>
          <target state="translated">이 노드의 로컬 명을 돌려줍니다</target>
        </trans-unit>
        <trans-unit id="33893d95cf60d05be4ea9e5a0f490e5b5052c3cf" translate="yes" xml:space="preserve">
          <source>Returns this nodes namespace URI</source>
          <target state="translated">이 노드 네임 스페이스 URI를 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="e7c1f7bfc8f54bcf959e440f67dee37c86f130cf" translate="yes" xml:space="preserve">
          <source>Returns true if &lt;code&gt;a == b&lt;/code&gt;, that is if both dates represent the same point in time.</source>
          <target state="translated">&lt;code&gt;a == b&lt;/code&gt; 인 경우, 즉 두 날짜가 모두 동일한 시점을 나타내는 경우 true를 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="b6c329ea909a5d0e9d3ffdb0b4876217ed838ee7" translate="yes" xml:space="preserve">
          <source>Returns true if &lt;code&gt;a == b&lt;/code&gt;, that is if both times represent the same point in time.</source>
          <target state="translated">&lt;code&gt;a == b&lt;/code&gt; 인 경우, 즉 두 시간이 모두 동일한 시점을 나타내는 경우 true를 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="4466f7a21685de9f410b9130d63bbe23744ae53d" translate="yes" xml:space="preserve">
          <source>Returns true if &lt;code&gt;year&lt;/code&gt; is a leap year.</source>
          <target state="translated">&lt;code&gt;year&lt;/code&gt; 가 윤년 인 경우 true를 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="f0d47248fdc2ddd06b5fc1c4920fe5668b35cfa6" translate="yes" xml:space="preserve">
          <source>Returns true if &lt;em&gt;f&lt;/em&gt; is associated with a terminal device.</source>
          <target state="translated">&lt;em&gt;f&lt;/em&gt; 가 터미널 장치와 연결된 경우 true를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="8a375bfef84a2adf0c1e8894adbbc84c2a6db990" translate="yes" xml:space="preserve">
          <source>Returns true if &lt;em&gt;filename&lt;/em&gt; exists and is a regular file or symlink. (directories, device files, named pipes and sockets return false)</source>
          <target state="translated">&lt;em&gt;filename&lt;/em&gt; 이 존재하고 일반 파일 또는 심볼릭 링크 이면 true를 반환합니다 . (디렉토리, 장치 파일, 명명 된 파이프 및 소켓은 false를 반환 함)</target>
        </trans-unit>
        <trans-unit id="2b6a20adf71f715ac99b978019378d6a4de2e105" translate="yes" xml:space="preserve">
          <source>Returns true if &lt;em&gt;item&lt;/em&gt; is in &lt;em&gt;a&lt;/em&gt; or false if not found. This is a shortcut for &lt;code&gt;find(a, item) &amp;gt;= 0&lt;/code&gt;.</source>
          <target state="translated">&lt;em&gt;항목&lt;/em&gt; 이 &lt;em&gt;a에&lt;/em&gt; 있으면 true를, 그렇지 않으면 false를 리턴합니다 . &lt;code&gt;find(a, item) &amp;gt;= 0&lt;/code&gt; 의 바로 가기입니다 .</target>
        </trans-unit>
        <trans-unit id="f1f892089be6bdc1ecad63fe88fb93b06f48fb7c" translate="yes" xml:space="preserve">
          <source>Returns true if &lt;em&gt;s&lt;/em&gt; is a strict or proper subset of &lt;em&gt;t&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;s&lt;/em&gt; 가 엄격하거나 적절한 &lt;em&gt;t&lt;/em&gt; 서브 세트 인 경우 true를 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="2fbc95f11f1058737c01ec6bb3d24b1abf45935f" translate="yes" xml:space="preserve">
          <source>Returns true if &lt;em&gt;s&lt;/em&gt; is a valid identifier.</source>
          <target state="translated">&lt;em&gt;s&lt;/em&gt; 가 유효한 식별자 이면 true를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="d9f0d9fc96a2c159528d34d30631b7367401cc98" translate="yes" xml:space="preserve">
          <source>Returns true if &lt;em&gt;s&lt;/em&gt; is subset of &lt;em&gt;t&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;s&lt;/em&gt; 가 &lt;em&gt;t의&lt;/em&gt; 부분 집합 인 경우 true를 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="f1a5fb997fbf5f05184d700473d623a97e566c7a" translate="yes" xml:space="preserve">
          <source>Returns true if a terminal supports true color.</source>
          <target state="translated">터미널이 트루 컬러를 지원하면 true를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="3f3ea35d72c725449adfde6da07c438ca9552a1f" translate="yes" xml:space="preserve">
          <source>Returns true if all characters in &lt;em&gt;s&lt;/em&gt; are whitespace characters and there is at least one character in &lt;em&gt;s&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;s의&lt;/em&gt; 모든 문자 가 공백 문자이고 &lt;em&gt;s에&lt;/em&gt; 하나 이상의 문자가있는 경우 true를 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="b95dfabe13ee6a1609ae976d3718f019be6c63d5" translate="yes" xml:space="preserve">
          <source>Returns true if both &lt;em&gt;s&lt;/em&gt; and &lt;em&gt;t&lt;/em&gt; have the same members and set size.</source>
          <target state="translated">&lt;em&gt;s&lt;/em&gt; 와 &lt;em&gt;t&lt;/em&gt; 가 동일한 멤버와 설정된 크기를 갖는 경우 true를 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="bacafe9bb3e56969a4f182228b8a17b4ce906f1d" translate="yes" xml:space="preserve">
          <source>Returns true if both pathname arguments refer to files with identical binary content.</source>
          <target state="translated">두 경로 이름 인수가 동일한 이진 컨텐츠를 가진 파일을 참조하면 true를 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="5bd2b49a7ac6325b556d1e14e4a95619c08b615a" translate="yes" xml:space="preserve">
          <source>Returns true if both pathname arguments refer to the same physical file or directory. Raises an exception if any of the files does not exist or information about it can not be obtained.</source>
          <target state="translated">두 경로 이름 인수가 동일한 실제 파일 또는 디렉토리를 참조하면 true를 리턴합니다. 파일이 없거나 해당 정보를 얻을 수없는 경우 예외를 발생시킵니다.</target>
        </trans-unit>
        <trans-unit id="cd7ec21082838962be509e5da1d8fca2e60fe954" translate="yes" xml:space="preserve">
          <source>Returns true if the file &lt;em&gt;a&lt;/em&gt; is newer than file &lt;em&gt;b&lt;/em&gt;, i.e. if &lt;em&gt;a&lt;/em&gt;'s modification time is later than &lt;em&gt;b&lt;/em&gt;'s.</source>
          <target state="translated">true를 돌려줍니다 파일의 경우 &lt;em&gt;A는&lt;/em&gt; 파일보다 새로운 &lt;em&gt;B&lt;/em&gt; 경우, 즉 의 수정 시간이 나중에보다 &lt;em&gt;B&lt;/em&gt; 의 '.&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="d18295e84bb9768516d59ae848cb506adfd712a9" translate="yes" xml:space="preserve">
          <source>Returns true if the first character in each word inside &lt;em&gt;s&lt;/em&gt; are upper case and there is at least one character in &lt;em&gt;s&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;s&lt;/em&gt; 안의 각 단어의 첫 문자 가 대문자이고 &lt;em&gt;s에&lt;/em&gt; 하나 이상의 문자가있는 경우 true를 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="c6a345c7016264fc027d4e41c24c42c178fee6e3" translate="yes" xml:space="preserve">
          <source>Returns true iff &lt;code&gt;a &amp;lt; b&lt;/code&gt;, that is iff a happened before b.</source>
          <target state="translated">&lt;code&gt;a &amp;lt; b&lt;/code&gt; , a가 b 이전에 발생한 경우 true를 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="d1c8ab774c4ec4a2c7f7e4068c83f812e96b10fa" translate="yes" xml:space="preserve">
          <source>Returns true iff &lt;code&gt;a &amp;lt;= b&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;a &amp;lt;= b&lt;/code&gt; 인 경우 true를 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="be46f5184aa1f715107d38ca43a2be3f6627fcd6" translate="yes" xml:space="preserve">
          <source>Returns true iff &lt;code&gt;c&lt;/code&gt; is a Unicode combining character</source>
          <target state="translated">&lt;code&gt;c&lt;/code&gt; 가 유니 코드 결합 문자 인 경우 true를 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="4f53760b18145aae16c17664969c430df5f6e22b" translate="yes" xml:space="preserve">
          <source>Returns true iff &lt;code&gt;c&lt;/code&gt; is a Unicode titlecase character</source>
          <target state="translated">&lt;code&gt;c&lt;/code&gt; 가 유니 코드 제목 문자 인 경우 true를 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="13f9cf92f412c08f7d45d707fe596c36f478f7c6" translate="yes" xml:space="preserve">
          <source>Returns true iff &lt;code&gt;c&lt;/code&gt; is a Unicode whitespace character</source>
          <target state="translated">&lt;code&gt;c&lt;/code&gt; 가 유니 코드 공백 문자 인 경우 true를 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="842b11875525454eaf78ea9e702b73d44dbb828b" translate="yes" xml:space="preserve">
          <source>Returns true iff &lt;code&gt;c&lt;/code&gt; is a lower case Unicode character. If possible, prefer &lt;code&gt;isLower&lt;/code&gt; over &lt;code&gt;isUpper&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;c&lt;/code&gt; 가 소문자 유니 코드 문자 이면 true를 반환합니다 . 가능하면 &lt;code&gt;isUpper&lt;/code&gt; 보다 &lt;code&gt;isLower&lt;/code&gt; 를 선호 하십시오 .</target>
        </trans-unit>
        <trans-unit id="1d0be0d9786917ee47dc5077951cebbed4a773f1" translate="yes" xml:space="preserve">
          <source>Returns true iff &lt;code&gt;c&lt;/code&gt; is a upper case Unicode character. If possible, prefer &lt;code&gt;isLower&lt;/code&gt; over &lt;code&gt;isUpper&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;c&lt;/code&gt; 가 대문자 유니 코드 문자 인 경우 true를 리턴합니다 . 가능하면 &lt;code&gt;isUpper&lt;/code&gt; 보다 &lt;code&gt;isLower&lt;/code&gt; 를 선호 하십시오 .</target>
        </trans-unit>
        <trans-unit id="937a5ab5858128a451cc1afaae6edd6e3313a016" translate="yes" xml:space="preserve">
          <source>Returns true iff &lt;code&gt;c&lt;/code&gt; is an &lt;em&gt;alpha&lt;/em&gt; Unicode character (i.e., a letter)</source>
          <target state="translated">&lt;code&gt;c&lt;/code&gt; 가 &lt;em&gt;알파&lt;/em&gt; 유니 코드 문자 (즉, 문자) 이면 true를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="58c9fb7b3fa81326681d0874fd797ba4b1c22f08" translate="yes" xml:space="preserve">
          <source>Returns true iff &lt;code&gt;s&lt;/code&gt; continues with &lt;code&gt;substr&lt;/code&gt; at position &lt;code&gt;start&lt;/code&gt;.</source>
          <target state="translated">반환에만 true &lt;code&gt;s&lt;/code&gt; 과 계속 &lt;code&gt;substr&lt;/code&gt; 위치에서 &lt;code&gt;start&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="2db059e834545ec15afef56b21df8639c9c17bef" translate="yes" xml:space="preserve">
          <source>Returns true iff &lt;code&gt;s&lt;/code&gt; ends with &lt;code&gt;suffix&lt;/code&gt;.</source>
          <target state="translated">경우에만 true를 돌려 &lt;code&gt;s&lt;/code&gt; 과 함께 끝을 &lt;code&gt;suffix&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="03ab746180143be68c1fc2adc8d559f675d74c0d" translate="yes" xml:space="preserve">
          <source>Returns true iff &lt;code&gt;s&lt;/code&gt; starts with &lt;code&gt;prefix&lt;/code&gt;.</source>
          <target state="translated">경우에만 true를 반환 &lt;code&gt;s&lt;/code&gt; 시작을 &lt;code&gt;prefix&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="c7ab96885b8905adb36fa6fd5f1d92035a4c57cf" translate="yes" xml:space="preserve">
          <source>Returns true iff &lt;code&gt;unsigned(x) &amp;lt; unsigned(y)&lt;/code&gt;.</source>
          <target state="translated">uniffed &lt;code&gt;unsigned(x) &amp;lt; unsigned(y)&lt;/code&gt; 이면 true를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="989161bea2a8fd33b18d377395646382e88d24a7" translate="yes" xml:space="preserve">
          <source>Returns true iff &lt;code&gt;x &amp;lt;= y&lt;/code&gt;.</source>
          <target state="translated">iff &lt;code&gt;x &amp;lt;= y&lt;/code&gt; true를 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="cc68d3fb6e32ee81440dccee40aeab98efc1b636" translate="yes" xml:space="preserve">
          <source>Returns true iff &lt;em&gt;c&lt;/em&gt; does not contain the given &lt;em&gt;key&lt;/em&gt;. If the key does exist, c.excl(key) is performed.</source>
          <target state="translated">&lt;em&gt;c&lt;/em&gt; 에 주어진 &lt;em&gt;키가&lt;/em&gt; 포함되어 있지 않으면 true를 리턴합니다 . 키가 존재하면 c.excl (key)가 수행됩니다.</target>
        </trans-unit>
        <trans-unit id="1e31f59357067504885196ae02f864de63152565" translate="yes" xml:space="preserve">
          <source>Returns true iff &lt;em&gt;f&lt;/em&gt; is at the end.</source>
          <target state="translated">&lt;em&gt;f&lt;/em&gt; 가 끝에 있으면 true를 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="bed62579837f33b1ad936f60e7f58038d0a36966" translate="yes" xml:space="preserve">
          <source>Returns true iff &lt;em&gt;key&lt;/em&gt; is in &lt;em&gt;s&lt;/em&gt;.</source>
          <target state="translated">iff &lt;em&gt;키&lt;/em&gt; 가 &lt;em&gt;s&lt;/em&gt; 인 경우 true를 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="c1fa5c1044ffea59affb1130470462f23fe4b931" translate="yes" xml:space="preserve">
          <source>Returns true iff &lt;em&gt;s1&lt;/em&gt; is proper subset of &lt;em&gt;s2&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;s1&lt;/em&gt; 이 &lt;em&gt;s2의&lt;/em&gt; 적절한 서브 세트 인 경우 true를 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="40704492783b00bd93d0595318517e1537391c3d" translate="yes" xml:space="preserve">
          <source>Returns true iff &lt;em&gt;s1&lt;/em&gt; is subset of &lt;em&gt;s2&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;s1&lt;/em&gt; 이 &lt;em&gt;s2의&lt;/em&gt; 부분 집합 인 경우 true를 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="06bbbf1fcf91b89e08a767a1ca4fd1d480635aab" translate="yes" xml:space="preserve">
          <source>Returns true iff &lt;em&gt;s&lt;/em&gt; contains all alphabetic unicode characters.</source>
          <target state="translated">반환에만 true &lt;em&gt;들&lt;/em&gt; 모두 알파벳 유니 코드 문자가 포함되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="fd9b0b52bf7eef83d096e5758576c9da25421424" translate="yes" xml:space="preserve">
          <source>Returns true iff &lt;em&gt;s&lt;/em&gt; contains all whitespace unicode characters.</source>
          <target state="translated">반환에만 true &lt;em&gt;들&lt;/em&gt; 모두 공백 유니 코드 문자가 포함되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="099fa1404dd4a3e6a31a634adb9c5f73a0fcb782" translate="yes" xml:space="preserve">
          <source>Returns true iff &lt;em&gt;x&lt;/em&gt; is less than &lt;em&gt;y&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;x&lt;/em&gt; 가 &lt;em&gt;y&lt;/em&gt; 보다 작은 경우 true를 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="a8393ecc96f9abbf571ff80c1f09e22cee090e0a" translate="yes" xml:space="preserve">
          <source>Returns true iff &lt;em&gt;x&lt;/em&gt; is less than or equal to &lt;em&gt;y&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;x&lt;/em&gt; 가 &lt;em&gt;y&lt;/em&gt; 보다 작거나 같은 경우 true를 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="0e6e41d0625e1136d8c3f7ff69a37ae63be1a77a" translate="yes" xml:space="preserve">
          <source>Returns true iff each character of &lt;em&gt;s&lt;/em&gt; is in the set &lt;em&gt;theSet&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;s의&lt;/em&gt; 각 문자가 set &lt;em&gt;theSet&lt;/em&gt; 에있는 경우 true를 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="274a567b46e62fb1bd35fbdd5f84bd3b390c2be3" translate="yes" xml:space="preserve">
          <source>Returns true iff the directory &lt;em&gt;dir&lt;/em&gt; exists. If &lt;em&gt;dir&lt;/em&gt; is a file, false is returned.</source>
          <target state="translated">디렉토리 &lt;em&gt;디렉토리&lt;/em&gt; 가 존재 하면 true를 리턴 합니다. 경우 &lt;em&gt;디렉토리는&lt;/em&gt; 파일입니다, 거짓이 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="e474d336f342512272f48e5b692a7be26da35b17" translate="yes" xml:space="preserve">
          <source>Returns true iff the process &lt;em&gt;p&lt;/em&gt; is still running. Returns immediately.</source>
          <target state="translated">프로세스 &lt;em&gt;p&lt;/em&gt; 가 여전히 실행중인 경우 true를 리턴합니다 . 즉시 반환합니다.</target>
        </trans-unit>
        <trans-unit id="3363f09adb4d04cb85355ac2da1367de53b31d67" translate="yes" xml:space="preserve">
          <source>Returns true iff the sets &lt;em&gt;s1&lt;/em&gt; and &lt;em&gt;s2&lt;/em&gt; have no items in common.</source>
          <target state="translated">세트 &lt;em&gt;s1&lt;/em&gt; 과 &lt;em&gt;s2&lt;/em&gt; 에 공통 항목이없는 경우 true를 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="0c82cd243c1933a75b353c20f3c9079e9292e5d7" translate="yes" xml:space="preserve">
          <source>Returns true iff the symlink &lt;em&gt;link&lt;/em&gt; exists. Will return true regardless of whether the link points to a directory or file.</source>
          <target state="translated">symlink &lt;em&gt;링크&lt;/em&gt; 가 존재 하면 true를 리턴 합니다. 링크가 디렉토리 또는 파일을 가리키는 지 여부에 관계없이 true를 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="9da9a63a45bba33de5fc9b077956378763e4710d" translate="yes" xml:space="preserve">
          <source>Returns true, if &lt;em&gt;x&lt;/em&gt; is a power of two, false otherwise. Zero and negative numbers are not a power of two.</source>
          <target state="translated">&lt;em&gt;x&lt;/em&gt; 가 2의 거듭 제곱 이면 true를, 그렇지 않으면 false를 반환합니다. 0과 음수는 2의 거듭 제곱이 아닙니다.</target>
        </trans-unit>
        <trans-unit id="95ab6c9bb98e11d820dd03f216ac2a3563c7cbaf" translate="yes" xml:space="preserve">
          <source>Returns whether this node (if it is an element) has any attributes.</source>
          <target state="translated">이 노드 (요소 인 경우)에 속성이 있는지 여부를 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="64b0e3e014f680c6cee41ff15c7156cf4736a8e2" translate="yes" xml:space="preserve">
          <source>Returns whether this node has any children.</source>
          <target state="translated">이 노드에 자식이 있는지 여부를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="921d08259fefe923f27c8709cf0ca2be0f19c915" translate="yes" xml:space="preserve">
          <source>Returns zero on success.</source>
          <target state="translated">성공하면 0을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="94a56f49aceed5b4f1376409b7241610e054530b" translate="yes" xml:space="preserve">
          <source>Reverse a duration.</source>
          <target state="translated">지속 시간을 되돌립니다.</target>
        </trans-unit>
        <trans-unit id="d4eb4f9adb7dabea3e5b355957a9b7339c9cf086" translate="yes" xml:space="preserve">
          <source>Reverses a time interval</source>
          <target state="translated">시간 간격을 되돌립니다</target>
        </trans-unit>
        <trans-unit id="1576a7955e1212bee1e1e9a087a1bc1675b7eb9d" translate="yes" xml:space="preserve">
          <source>Right-rotate bits in a 16-bits value.</source>
          <target state="translated">16 비트 값에서 비트를 오른쪽으로 회전합니다.</target>
        </trans-unit>
        <trans-unit id="b1901a77f2b1fbfddc559de040c0f787cb0575ad" translate="yes" xml:space="preserve">
          <source>Right-rotate bits in a 32-bits value.</source>
          <target state="translated">32 비트 값에서 비트를 오른쪽으로 회전합니다.</target>
        </trans-unit>
        <trans-unit id="b3caac53f637fa40f74149239dfe245d5ae4d6f3" translate="yes" xml:space="preserve">
          <source>Right-rotate bits in a 64-bits value.</source>
          <target state="translated">64 비트 값의 비트를 오른쪽으로 회전합니다.</target>
        </trans-unit>
        <trans-unit id="a7aba425de45fd784c6d62570031d13e8b4e50b3" translate="yes" xml:space="preserve">
          <source>Right-rotate bits in a 8-bits value.</source>
          <target state="translated">8 비트 값에서 비트를 오른쪽으로 회전합니다.</target>
        </trans-unit>
        <trans-unit id="807ed363e3ecefb21de485fe6e4d591f4e211a86" translate="yes" xml:space="preserve">
          <source>Root type of the JavaScript object hierarchy</source>
          <target state="translated">JavaScript 객체 계층의 루트 유형</target>
        </trans-unit>
        <trans-unit id="66e290595d5ac59c4a565f1e2762fadc2e1d5e2f" translate="yes" xml:space="preserve">
          <source>Round a floating point number.</source>
          <target state="translated">부동 소수점 숫자를 반올림합니다.</target>
        </trans-unit>
        <trans-unit id="3f6285a733882b71208f679ccce1b0e39eaf76d3" translate="yes" xml:space="preserve">
          <source>Rounds and formats &lt;em&gt;bytes&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;바이트를&lt;/em&gt; 반올림 및 포맷 &lt;em&gt;합니다&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="16da0b3857815def052ecbf0d1a7d411e083f1fa" translate="yes" xml:space="preserve">
          <source>Routines can be invoked without the &lt;code&gt;()&lt;/code&gt; if the call is syntactically a statement. This command invocation syntax also works for expressions, but then only a single argument may follow. This restriction means &lt;code&gt;echo f 1, f 2&lt;/code&gt; is parsed as &lt;code&gt;echo(f(1), f(2))&lt;/code&gt; and not as &lt;code&gt;echo(f(1, f(2)))&lt;/code&gt;. The method call syntax may be used to provide one more argument in this case:</source>
          <target state="translated">호출이 구문 상 명령문이면 &lt;code&gt;()&lt;/code&gt; 없이 루틴을 호출 할 수 있습니다 . 이 명령 호출 구문은 표현식에도 적용되지만 단일 인수 만 따를 수 있습니다. 이 제한 수단은 &lt;code&gt;echo f 1, f 2&lt;/code&gt; 로서 해석되는 &lt;code&gt;echo(f(1), f(2))&lt;/code&gt; 및하지 &lt;code&gt;echo(f(1, f(2)))&lt;/code&gt; . 이 경우 메소드 호출 구문을 사용하여 하나 이상의 인수를 제공 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="16963d5c01f4da70faf8f227d8db7851d5d356fa" translate="yes" xml:space="preserve">
          <source>Routines that are imported from C are always assumed to be &lt;code&gt;gcsafe&lt;/code&gt;. To disable the GC-safety checking the &lt;code&gt;--threadAnalysis:off&lt;/code&gt; command line switch can be used. This is a temporary workaround to ease the porting effort from old code to the new threading model.</source>
          <target state="translated">C에서 가져온 루틴은 항상 &lt;code&gt;gcsafe&lt;/code&gt; 인 것으로 가정합니다 . GC 안전 검사를 비활성화하려면 &lt;code&gt;--threadAnalysis:off&lt;/code&gt; 명령 줄 스위치를 사용할 수 있습니다. 이것은 오래된 코드에서 새로운 스레딩 모델로의 이식 작업을 용이하게하기위한 임시 해결 방법입니다.</target>
        </trans-unit>
        <trans-unit id="c54d661a4fe39dc49b20639369c0867602b2def8" translate="yes" xml:space="preserve">
          <source>Rows are retrieved from the server at each iteration.</source>
          <target state="translated">각 반복마다 서버에서 행이 검색됩니다.</target>
        </trans-unit>
        <trans-unit id="cb8bf77cede87ad18ce7dffc8811672324879519" translate="yes" xml:space="preserve">
          <source>Rule: Bind the expression &lt;em&gt;E&lt;/em&gt; to the &lt;em&gt;nonterminal symbol&lt;/em&gt;&lt;em&gt;A&lt;/em&gt;. &lt;strong&gt;Left recursive rules are not possible and crash the matching engine.&lt;/strong&gt;</source>
          <target state="translated">규칙 : 표현식 &lt;em&gt;E&lt;/em&gt; 를 &lt;em&gt;비 터미널 심볼 &lt;/em&gt;&lt;em&gt;A에&lt;/em&gt; 바인딩하십시오 . &lt;strong&gt;왼쪽 재귀 규칙은 불가능하며 일치하는 엔진이 충돌합니다.&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="eaf0271f93155201626fd726e221c8d6edf77a58" translate="yes" xml:space="preserve">
          <source>Rules 1-2 ensure the following works:</source>
          <target state="translated">규칙 1-2는 다음과 같은 작동을 보장합니다.</target>
        </trans-unit>
        <trans-unit id="178bbb914e180ee4437de9efa9d2efbcf55416ed" translate="yes" xml:space="preserve">
          <source>Run it via &lt;code&gt;nimsuggest --stdin --debug --v2 myproject.nim&lt;/code&gt;. Nimsuggest is a server that takes queries that are related to &lt;code&gt;myproject&lt;/code&gt;. There is some support so that you can throw random &lt;code&gt;.nim&lt;/code&gt; files which are not part of &lt;code&gt;myproject&lt;/code&gt; at Nimsuggest too, but usually the query refer to modules/files that are part of &lt;code&gt;myproject&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;nimsuggest --stdin --debug --v2 myproject.nim&lt;/code&gt; 통해 실행하십시오 . Nimsuggest는 &lt;code&gt;myproject&lt;/code&gt; 와 관련된 쿼리를받는 서버입니다 . &lt;code&gt;.nim&lt;/code&gt; 에서 &lt;code&gt;myproject&lt;/code&gt; 의 일부가 아닌 임의의 .nim 파일을 던질 수 있도록 약간의 지원이 있지만 일반적으로 쿼리는 &lt;code&gt;myproject&lt;/code&gt; 의 일부인 모듈 / 파일을 참조합니다 .</target>
        </trans-unit>
        <trans-unit id="0b4a7ea8c0792491001922adaff665458451a667" translate="yes" xml:space="preserve">
          <source>Running a single test</source>
          <target state="translated">단일 테스트 실행</target>
        </trans-unit>
        <trans-unit id="09552c90e54913d565538b7f6bcb2dea7e830095" translate="yes" xml:space="preserve">
          <source>Running a single test suite</source>
          <target state="translated">단일 테스트 스위트 실행</target>
        </trans-unit>
        <trans-unit id="489f1cd116ebc39235c3de0222662235ee30506a" translate="yes" xml:space="preserve">
          <source>Running the &lt;code&gt;caasdriver&lt;/code&gt; without parameters will attempt to process all the test cases in all three operation modes. If a test succeeds nothing will be printed and the process will exit with zero. If any test fails, the specific line of the test preceding the failure and the failure itself will be dumped to stdout, along with a final indicator of the success state and operation mode. You can pass the parameter &lt;code&gt;verbose&lt;/code&gt; to force all output even on successful tests.</source>
          <target state="translated">매개 변수없이 &lt;code&gt;caasdriver&lt;/code&gt; 를 실행하면 세 가지 작동 모드 모두에서 모든 테스트 사례를 처리하려고 시도합니다. 테스트가 성공하면 아무것도 인쇄되지 않고 프로세스는 0으로 종료됩니다. 테스트가 실패하면 성공 상태 및 작동 모드의 최종 표시기와 함께 실패 이전의 테스트 라인과 실패 자체가 stdout에 덤프됩니다. 테스트에 성공하더라도 모든 출력을 강제 적용하기 위해 매개 변수 &lt;code&gt;verbose&lt;/code&gt; 를 전달할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="d4c5f3fdf69fa7aba94d3cfadb0af88cbc0c09a1" translate="yes" xml:space="preserve">
          <source>Running the test suite</source>
          <target state="translated">테스트 스위트 실행</target>
        </trans-unit>
        <trans-unit id="74a331a7406e7d65c8316a6cbc51f5fa95a0cd09" translate="yes" xml:space="preserve">
          <source>Runs the query (typically &quot;UPDATE&quot;) and returns the number of affected rows</source>
          <target state="translated">쿼리를 실행하고 (일반적으로 &quot;UPDATE&quot;) 영향을받는 행 수를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="347702aa4fda57b5221678d353ef36e030f1e1fb" translate="yes" xml:space="preserve">
          <source>Runtime type information</source>
          <target state="translated">런타임 타입 정보</target>
        </trans-unit>
        <trans-unit id="4e81beb7bd9c7466cdede3ff0d2b4e410d57d1f5" translate="yes" xml:space="preserve">
          <source>SCGI state object</source>
          <target state="translated">SCGI 상태 객체</target>
        </trans-unit>
        <trans-unit id="ff98764de0504c108b09d3cb3695158e24376b68" translate="yes" xml:space="preserve">
          <source>SEXP node</source>
          <target state="translated">SEXP 노드</target>
        </trans-unit>
        <trans-unit id="65068f14e3b7f92c1df965e21bc29d98c82e75c9" translate="yes" xml:space="preserve">
          <source>SOBool</source>
          <target state="translated">SOBool</target>
        </trans-unit>
        <trans-unit id="6a73cc83305dcf7c307c3cb5753f0e67e05f38ef" translate="yes" xml:space="preserve">
          <source>SQL parser object</source>
          <target state="translated">SQL 파서 객체</target>
        </trans-unit>
        <trans-unit id="78bb8826fcc2504583e625386c238563e6207595" translate="yes" xml:space="preserve">
          <source>SSL</source>
          <target state="translated">SSL</target>
        </trans-unit>
        <trans-unit id="dc4efddfc2555e442cfb1d2f170aeeda792ad777" translate="yes" xml:space="preserve">
          <source>SSL can be enabled by compiling with the &lt;code&gt;-d:ssl&lt;/code&gt; flag.</source>
          <target state="translated">&lt;code&gt;-d:ssl&lt;/code&gt; 플래그 로 컴파일하여 SSL을 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="7bec8191edd4600a59f1a884197b619e05577ef1" translate="yes" xml:space="preserve">
          <source>SSL is supported through the OpenSSL library. This support can be activated by compiling with the &lt;code&gt;-d:ssl&lt;/code&gt; switch. When an SSL socket is used it will raise ESSL exceptions when SSL errors occur.</source>
          <target state="translated">SSL은 OpenSSL 라이브러리를 통해 지원됩니다. 이 지원은 &lt;code&gt;-d:ssl&lt;/code&gt; 스위치 로 컴파일하여 활성화 할 수 있습니다 . SSL 소켓을 사용하면 SSL 오류가 발생하면 ESSL 예외가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="2b3c414b1fbe84be2cc3fd66d6e0113d5ef10164" translate="yes" xml:space="preserve">
          <source>SSL/TLS support</source>
          <target state="translated">SSL / TLS 지원</target>
        </trans-unit>
        <trans-unit id="79a88f6299b961bcf360191b035d872be482703b" translate="yes" xml:space="preserve">
          <source>SSL_TLSEXT_ERR_ALERT_FATAL</source>
          <target state="translated">SSL_TLSEXT_ERR_ALERT_FATAL</target>
        </trans-unit>
        <trans-unit id="56c229ceb34fc459171ec8dbfd9f085fe13e38b9" translate="yes" xml:space="preserve">
          <source>SSL_TLSEXT_ERR_ALERT_WARNING</source>
          <target state="translated">SSL_TLSEXT_ERR_ALERT_WARNING</target>
        </trans-unit>
        <trans-unit id="be6b34c0e7c61951a8f4e9498285aa602f66b472" translate="yes" xml:space="preserve">
          <source>SSL_TLSEXT_ERR_NOACK</source>
          <target state="translated">SSL_TLSEXT_ERR_NOACK</target>
        </trans-unit>
        <trans-unit id="8052b33f646e6999358ebfd291394b5c53d08cc5" translate="yes" xml:space="preserve">
          <source>SSL_TLSEXT_ERR_OK</source>
          <target state="translated">SSL_TLSEXT_ERR_OK</target>
        </trans-unit>
        <trans-unit id="5c5eaf1404be1155cab2206709e5a03edbf28083" translate="yes" xml:space="preserve">
          <source>Safe alternative to &lt;code&gt;send&lt;/code&gt;. Does not raise an EOS when an error occurs, and instead returns &lt;code&gt;false&lt;/code&gt; on failure.</source>
          <target state="translated">&lt;code&gt;send&lt;/code&gt; 안전한 대안 . 오류가 발생할 때 EOS를 높이 지 않고 실패시 &lt;code&gt;false&lt;/code&gt; 를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="e1b03b74797fecc452c176f514f8824e68c98aab" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;#echo&quot;&gt;echo&lt;/a&gt;, but as a special semantic rule, &lt;code&gt;debugEcho&lt;/code&gt; pretends to be free of side effects, so that it can be used for debugging routines marked as &lt;a href=&quot;manual#pragmas-nosideeffect-pragma&quot;&gt;noSideEffect&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#echo&quot;&gt;echo&lt;/a&gt; 와 동일 하지만 특별한 의미 규칙으로 &lt;code&gt;debugEcho&lt;/code&gt; 는 부작용이없는 것으로 가장하여 &lt;a href=&quot;manual#pragmas-nosideeffect-pragma&quot;&gt;noSideEffect&lt;/a&gt; 로 표시된 루틴을 디버깅하는 데 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="cae316e49719a5d17e05487f3a3446241878dbfe" translate="yes" xml:space="preserve">
          <source>Same as &lt;code&gt;find(s, c) &amp;gt;= 0&lt;/code&gt;.</source>
          <target state="translated">동일 &lt;code&gt;find(s, c) &amp;gt;= 0&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="bf05772fddbca23f39278597cf0a88944814455e" translate="yes" xml:space="preserve">
          <source>Same as &lt;code&gt;find(s, chars) &amp;gt;= 0&lt;/code&gt;.</source>
          <target state="translated">동일 &lt;code&gt;find(s, chars) &amp;gt;= 0&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="0eb638aeaaddd6236cffcef4fe0d42ea003eb3ae" translate="yes" xml:space="preserve">
          <source>Same as &lt;code&gt;find(s, sub) &amp;gt;= 0&lt;/code&gt;.</source>
          <target state="translated">동일 &lt;code&gt;find(s, sub) &amp;gt;= 0&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="7e5b6c68d0c7209eed575cea11d1b7de870323a5" translate="yes" xml:space="preserve">
          <source>Same as &lt;code&gt;{@} E&lt;/code&gt;.</source>
          <target state="translated">과 동일 &lt;code&gt;{@} E&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="a11726c63d0ec8978edea1c9e5f29146069a06bf" translate="yes" xml:space="preserve">
          <source>Same as &lt;em&gt;check&lt;/em&gt; except any failed test causes the program to quit immediately. Any teardown statements are not executed and the failed test output is not generated.</source>
          <target state="translated">실패한 테스트로 인해 프로그램이 즉시 종료된다는 점을 제외하면 &lt;em&gt;확인&lt;/em&gt; 과 동일 합니다. 테어 다운 문이 실행되지 않고 실패한 테스트 출력이 생성되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="83e89ee100776e6f9e2e9f157578409932b3f6d6" translate="yes" xml:space="preserve">
          <source>Same as &lt;em&gt;fastRows&lt;/em&gt;, but slower and safe.</source>
          <target state="translated">&lt;em&gt;fastRows&lt;/em&gt; 와 동일 하지만 느리고 안전합니다.</target>
        </trans-unit>
        <trans-unit id="d362db7884b9b46c6a3d44434123c45de14ec1b4" translate="yes" xml:space="preserve">
          <source>Same as &lt;em&gt;gorge&lt;/em&gt; but also returns the precious exit code.</source>
          <target state="translated">&lt;em&gt;협곡&lt;/em&gt; 과 동일 하지만 귀중한 종료 코드를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="6d005bfbffa25fd3f6907fab064aef834fea6c07" translate="yes" xml:space="preserve">
          <source>Same as above but always 2 digits, 0 is prepended if the minute is one digit.</source>
          <target state="translated">위와 동일하지만 항상 2 자리이며 분이 한 자리이면 0이 앞에옵니다.</target>
        </trans-unit>
        <trans-unit id="593a67af74ca60df1d753179f6579b368b8ecabb" translate="yes" xml:space="preserve">
          <source>Same as above but always two digits. 0 is prepended.</source>
          <target state="translated">위와 동일하지만 항상 두 자리 숫자입니다. 0이 앞에 붙습니다.</target>
        </trans-unit>
        <trans-unit id="3b35c0e25910bfc8092243e72f3f5dfb338c8493" translate="yes" xml:space="preserve">
          <source>Same as above but with &lt;code&gt;:mm&lt;/code&gt; where &lt;em&gt;mm&lt;/em&gt; represents minutes.</source>
          <target state="translated">위와 같지만와 동일 &lt;code&gt;:mm&lt;/code&gt; &lt;em&gt;mm은&lt;/em&gt; 분을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="1f7cdb4819cd49164b43b8e929c90565bd76edc7" translate="yes" xml:space="preserve">
          <source>Same as above but with &lt;code&gt;:ss&lt;/code&gt; where &lt;em&gt;ss&lt;/em&gt; represents seconds.</source>
          <target state="translated">위와 같지만와 동일 &lt;code&gt;:ss&lt;/code&gt; &lt;em&gt;SS는&lt;/em&gt; 초를 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="0eb66618f40e3aa6b28e9256d96120d3b5c74faa" translate="yes" xml:space="preserve">
          <source>Same as above but with leading 0.</source>
          <target state="translated">위와 동일하지만 앞에 0이 있습니다.</target>
        </trans-unit>
        <trans-unit id="b28cb2a32cff3b6aea860b63fc87b4c434b5eaa1" translate="yes" xml:space="preserve">
          <source>Same as above, but &lt;code&gt;AM&lt;/code&gt; and &lt;code&gt;PM&lt;/code&gt; instead of &lt;code&gt;A&lt;/code&gt; and &lt;code&gt;P&lt;/code&gt; respectively.</source>
          <target state="translated">위와 동일하지만 각각 &lt;code&gt;A&lt;/code&gt; 와 &lt;code&gt;P&lt;/code&gt; 대신 &lt;code&gt;AM&lt;/code&gt; 과 &lt;code&gt;PM&lt;/code&gt; 이 있습니다.</target>
        </trans-unit>
        <trans-unit id="72f428ba17f954e3a8ef6db77883ac29a4a540a8" translate="yes" xml:space="preserve">
          <source>Same as above, but is always two digits.</source>
          <target state="translated">위와 동일하지만 항상 두 자리 숫자입니다.</target>
        </trans-unit>
        <trans-unit id="8534970f50803862dcb810540900fc5227561718" translate="yes" xml:space="preserve">
          <source>Same as fastRows but returns a handle that can be used to get column text on demand using []. Returned handle is valid only within the interator body.</source>
          <target state="translated">fastRows와 동일하지만 []를 사용하여 요청시 열 텍스트를 가져 오는 데 사용할 수있는 핸들을 반환합니다. 반환 된 핸들은 인터 레이터 본체 내에서만 유효합니다.</target>
        </trans-unit>
        <trans-unit id="7fa437f07e81a81aeb20918d589755aff3131279" translate="yes" xml:space="preserve">
          <source>Same as fastRows but returns a handle that can be used to get column text on demand using []. Returned handle is valid only within the iterator body.</source>
          <target state="translated">fastRows와 동일하지만 []를 사용하여 요청시 열 텍스트를 가져 오는 데 사용할 수있는 핸들을 반환합니다. 리턴 된 핸들은 반복자 본문 내에서만 유효합니다.</target>
        </trans-unit>
        <trans-unit id="2dc9b3b1a8688d9fd2c653ab330f0b9b6c723b0f" translate="yes" xml:space="preserve">
          <source>Same as replace, but specialized for doing multiple replacements in a single pass through the input string.</source>
          <target state="translated">replace와 동일하지만 입력 문자열을 통한 단일 패스에서 여러 번의 교체를 수행하는 데 특화되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="283e538395378eea3aaea570fed9ed227432c36f" translate="yes" xml:space="preserve">
          <source>Same for 8/16</source>
          <target state="translated">8/16과 동일</target>
        </trans-unit>
        <trans-unit id="f15fdec22b1531cc92e62430352ff3780009a8a0" translate="yes" xml:space="preserve">
          <source>Same for 8/16/32</source>
          <target state="translated">8/16/32와 동일</target>
        </trans-unit>
        <trans-unit id="f320568538fc06811c18160fdc21283612518e08" translate="yes" xml:space="preserve">
          <source>Save current exceptions in temporary storage, install environment represented by object pointed to by &lt;em&gt;envp&lt;/em&gt; and raise exceptions according to saved exceptions.</source>
          <target state="translated">현재 예외를 임시 저장소에 저장하고 &lt;em&gt;envp가&lt;/em&gt; 가리키는 객체로 표시되는 설치 환경 을 저장하고 저장된 예외에 따라 예외를 발생시킵니다.</target>
        </trans-unit>
        <trans-unit id="22647c986d59ad784653050cc50abe50e6b37bcc" translate="yes" xml:space="preserve">
          <source>Save the current environment in the object pointed to by &lt;em&gt;envp&lt;/em&gt;, clear exception flags and install a non-stop mode (if available) for all exceptions.</source>
          <target state="translated">&lt;em&gt;envp가&lt;/em&gt; 가리키는 오브젝트에 현재 환경을 저장하고 예외 플래그를 지우고 모든 예외에 대해 논스톱 모드 (사용 가능한 경우)를 설치하십시오.</target>
        </trans-unit>
        <trans-unit id="000fdec7b0fb4f7ca4d80b71370aa2bd7f253c32" translate="yes" xml:space="preserve">
          <source>Save this code to the file &quot;greetings.nim&quot;. Now compile and run it:</source>
          <target state="translated">이 코드를 &quot;greetings.nim&quot;파일에 저장하십시오. 이제 컴파일하고 실행하십시오.</target>
        </trans-unit>
        <trans-unit id="6ac82619ea882de68eeb0082674550708440d08a" translate="yes" xml:space="preserve">
          <source>Schedule coroutine for execution. It does not run immediately.</source>
          <target state="translated">코 루틴 실행을 예약합니다. 즉시 실행되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="cdfca4155826bc8e6ad3ef0a7d59e8759a6b9d52" translate="yes" xml:space="preserve">
          <source>Scope rules</source>
          <target state="translated">범위 규칙</target>
        </trans-unit>
        <trans-unit id="ee3530f970ffbb5ec4559bc99680ad1143fac206" translate="yes" xml:space="preserve">
          <source>Scopes and the block statement</source>
          <target state="translated">범위와 블록 설명</target>
        </trans-unit>
        <trans-unit id="00da56197fc812db9fff1bc8a7ea6c836a93112d" translate="yes" xml:space="preserve">
          <source>Search nnkFormalParams for an argument.</source>
          <target state="translated">nnkFormalParams에서 인수를 검색하십시오.</target>
        </trans-unit>
        <trans-unit id="854e806638626e330301f049db3f54b2ddc27cc2" translate="yes" xml:space="preserve">
          <source>Search path handling</source>
          <target state="translated">검색 경로 처리</target>
        </trans-unit>
        <trans-unit id="8c453282de484c89be41cb7be79db2f5dcdb0814" translate="yes" xml:space="preserve">
          <source>Search paths modifications.</source>
          <target state="translated">검색 경로 수정.</target>
        </trans-unit>
        <trans-unit id="3a19227f98a8795e53d16744d185b4399fa0b4fc" translate="yes" xml:space="preserve">
          <source>Search: Shorthand for &lt;code&gt;(!E .)* E&lt;/code&gt;. (Search loop for the pattern &lt;em&gt;E&lt;/em&gt;.)</source>
          <target state="translated">검색 : &lt;code&gt;(!E .)* E&lt;/code&gt; 속기입니다 . (패턴 &lt;em&gt;E에&lt;/em&gt; 대한 검색 루프 .)</target>
        </trans-unit>
        <trans-unit id="3733c670253bc28d6353cb5edb694485bb0dd84e" translate="yes" xml:space="preserve">
          <source>Searches for &lt;em&gt;chars&lt;/em&gt; in &lt;em&gt;s&lt;/em&gt; in reverse starting at position &lt;em&gt;start&lt;/em&gt;.</source>
          <target state="translated">위치 &lt;em&gt;start&lt;/em&gt; 에서 역순 으로 &lt;em&gt;s의 &lt;/em&gt;&lt;em&gt;문자&lt;/em&gt; 를 검색합니다 .&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="248865dbfaf519c83ddafb291c9cac33dc567f69" translate="yes" xml:space="preserve">
          <source>Searches for &lt;em&gt;chars&lt;/em&gt; in &lt;em&gt;s&lt;/em&gt; inside range &lt;em&gt;start&lt;/em&gt;..`last`. If &lt;em&gt;last&lt;/em&gt; is unspecified, it defaults to &lt;em&gt;s.high&lt;/em&gt;.</source>
          <target state="translated">에 대한 검색 &lt;em&gt;문자&lt;/em&gt; 에 &lt;em&gt;의의&lt;/em&gt; 내부 범위 &lt;em&gt;시작&lt;/em&gt; ..`last`. 경우 &lt;em&gt;마지막으로&lt;/em&gt; 지정되지, 기본값은하기 &lt;em&gt;s.high&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="a4e227efca156bcedc3499c3c17e9a199325882d" translate="yes" xml:space="preserve">
          <source>Searches for &lt;em&gt;exe&lt;/em&gt; in the current working directory and then in directories listed in the &lt;code&gt;PATH&lt;/code&gt; environment variable. Returns &quot;&quot; if the &lt;em&gt;exe&lt;/em&gt; cannot be found. &lt;em&gt;exe&lt;/em&gt; is added the &lt;a href=&quot;#ExeExts&quot;&gt;ExeExts&lt;/a&gt; file extensions if it has none. If the system supports symlinks it also resolves them until it meets the actual file. This behavior can be disabled if desired.</source>
          <target state="translated">현재 작업 디렉토리 및 &lt;code&gt;PATH&lt;/code&gt; 환경 변수에 나열된 디렉토리에서 &lt;em&gt;exe&lt;/em&gt; 를 검색 합니다. &lt;em&gt;exe&lt;/em&gt; 를 찾을 수 없으면 &quot;&quot;를 반환 합니다. &lt;a href=&quot;#ExeExts&quot;&gt;ExeExts&lt;/a&gt; 파일 확장자가 없으면 &lt;em&gt;exe&lt;/em&gt; 에 추가됩니다 . 시스템이 심볼릭 링크를 지원하면 실제 파일을 충족 할 때까지 심볼릭 링크도 해결합니다. 원하는 경우이 동작을 비활성화 할 수 있습니다.&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="93ebaf85930657208392c075ab454ea29ce19dfa" translate="yes" xml:space="preserve">
          <source>Searches for &lt;em&gt;sub&lt;/em&gt; in &lt;em&gt;s&lt;/em&gt; in reverse starting at position &lt;em&gt;start&lt;/em&gt;.</source>
          <target state="translated">위치 &lt;em&gt;시작&lt;/em&gt; 시 역순 으로 &lt;em&gt;s&lt;/em&gt; 에서 &lt;em&gt;서브&lt;/em&gt; 를 검색합니다 .&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="8c50eb3c068c74f518a2397edff50c4427849e1b" translate="yes" xml:space="preserve">
          <source>Searches for &lt;em&gt;sub&lt;/em&gt; in &lt;em&gt;s&lt;/em&gt; in reverse, starting at &lt;em&gt;start&lt;/em&gt; and going backwards to 0.</source>
          <target state="translated">시작에서 &lt;em&gt;시작&lt;/em&gt; 하여 0으로 거꾸로 &lt;em&gt;s&lt;/em&gt; 에서 &lt;em&gt;하위&lt;/em&gt; 를 검색합니다 .&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="0f889e86cb19736912b36200c4d9fd28c03ccd26" translate="yes" xml:space="preserve">
          <source>Searches for &lt;em&gt;sub&lt;/em&gt; in &lt;em&gt;s&lt;/em&gt; inside range &lt;em&gt;start&lt;/em&gt;..`last` using preprocessed table &lt;em&gt;a&lt;/em&gt;. If &lt;em&gt;last&lt;/em&gt; is unspecified, it defaults to &lt;em&gt;s.high&lt;/em&gt;.</source>
          <target state="translated">를 검색 &lt;em&gt;부&lt;/em&gt; 에 &lt;em&gt;S를&lt;/em&gt; 내부 범위 &lt;em&gt;시작&lt;/em&gt; 전처리 테이블 사용 ..`last` &lt;em&gt;를&lt;/em&gt; . 경우 &lt;em&gt;마지막으로&lt;/em&gt; 지정되지, 기본값은하기 &lt;em&gt;s.high&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="33c2559f7a5ed2aaa9aa78cb77d3567c110a4b8e" translate="yes" xml:space="preserve">
          <source>Searches for &lt;em&gt;sub&lt;/em&gt; in &lt;em&gt;s&lt;/em&gt; inside range &lt;em&gt;start&lt;/em&gt;..`last`. If &lt;em&gt;last&lt;/em&gt; is unspecified, it defaults to &lt;em&gt;s.high&lt;/em&gt;.</source>
          <target state="translated">를 검색 &lt;em&gt;부&lt;/em&gt; 에 &lt;em&gt;S를&lt;/em&gt; 내부 범위 &lt;em&gt;시작&lt;/em&gt; ..`last`. 경우 &lt;em&gt;마지막으로&lt;/em&gt; 지정되지, 기본값은하기 &lt;em&gt;s.high&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="8b89d3b0ce0511c851f99e886ac565d15df6abf5" translate="yes" xml:space="preserve">
          <source>Searches the database from the beginning and finds the first entry for which the port specified by &lt;code&gt;port&lt;/code&gt; matches the s_port member and the protocol name specified by &lt;code&gt;proto&lt;/code&gt; matches the s_proto member.</source>
          <target state="translated">데이터베이스를 처음부터 검색하여 port로 지정된 &lt;code&gt;port&lt;/code&gt; 가 s_port 멤버와 일치하고 &lt;code&gt;proto&lt;/code&gt; 로 지정된 프로토콜 이름이 s_proto 멤버와 일치하는 첫 번째 항목을 찾습니다 .</target>
        </trans-unit>
        <trans-unit id="c449a0393c39301f6123d0a0e9a55389325e10b4" translate="yes" xml:space="preserve">
          <source>Searches the database from the beginning and finds the first entry for which the service name specified by &lt;code&gt;name&lt;/code&gt; matches the s_name member and the protocol name specified by &lt;code&gt;proto&lt;/code&gt; matches the s_proto member.</source>
          <target state="translated">검색 시작과 발견에 의해 지정된 서비스 이름있는 첫 번째 항목에서 데이터베이스 &lt;code&gt;name&lt;/code&gt; s_name 구성원에 의해 지정된 프로토콜 이름과 일치하는 &lt;code&gt;proto&lt;/code&gt; s_proto 멤버를 일치합니다.</target>
        </trans-unit>
        <trans-unit id="b2a3b23da5776a04ee423e81be96f8e462fd4f27" translate="yes" xml:space="preserve">
          <source>Searching is case-sensitive. If &lt;em&gt;sub&lt;/em&gt; is not in &lt;em&gt;s&lt;/em&gt;, -1 is returned.</source>
          <target state="translated">검색은 대소 문자를 구분합니다. 경우 &lt;em&gt;하위가&lt;/em&gt; 아닌 &lt;em&gt;S&lt;/em&gt; , -1이 돌려 주어집니다.</target>
        </trans-unit>
        <trans-unit id="c2ad72db173f245e5e0df92e9c460c77e51e6b33" translate="yes" xml:space="preserve">
          <source>Second, we cannot use the &lt;a href=&quot;system#readFile&quot;&gt;readFile proc&lt;/a&gt; from the &lt;a href=&quot;system&quot;&gt;system module&lt;/a&gt; due to FFI restriction at compile time. If we try to use this proc, or any other which depends on FFI, the compiler will error with the message &lt;code&gt;cannot evaluate&lt;/code&gt; and a dump of the macro's source code, along with a stack trace where the compiler reached before bailing out. We can get around this limitation by using the &lt;a href=&quot;system#slurp&quot;&gt;slurp proc&lt;/a&gt; from the &lt;a href=&quot;system&quot;&gt;system module&lt;/a&gt;, which was precisely made for compilation time (just like &lt;a href=&quot;system#gorge&quot;&gt;gorge&lt;/a&gt; which executes an external program and captures its output).</source>
          <target state="translated">둘째, 컴파일시 FFI 제한으로 인해 &lt;a href=&quot;system&quot;&gt;시스템 모듈&lt;/a&gt; 에서 &lt;a href=&quot;system#readFile&quot;&gt;readFile proc&lt;/a&gt; 을 사용할 수 없습니다 . 이 proc 또는 FFI에 의존하는 다른 proc을 사용하려고하면 컴파일러는 메시지 &lt;code&gt;cannot evaluate&lt;/code&gt; 매크로 소스 코드 덤프와 함께 컴파일러가 베이 아웃하기 전에 도달 한 스택 추적과 함께 오류를 발생시킵니다 . 컴파일 시간을 위해 정밀하게 &lt;a href=&quot;system#slurp&quot;&gt;작성된 &lt;/a&gt;&lt;a href=&quot;system&quot;&gt;시스템 모듈&lt;/a&gt; 의 slurp proc 을 사용하면 이러한 한계를 극복 할 수 있습니다 ( 외부 프로그램을 실행하고 출력을 캡처하는 &lt;a href=&quot;system#gorge&quot;&gt;협곡&lt;/a&gt; 과 마찬가지로 ).</target>
        </trans-unit>
        <trans-unit id="ce312d7beae7ab8d67d31a009e1edbe16821c39b" translate="yes" xml:space="preserve">
          <source>Seconds as one digit if possible.</source>
          <target state="translated">가능한 경우 한 자리수로 초.</target>
        </trans-unit>
        <trans-unit id="3973fce9cc10858049aacc6f93d928ceef21cfea" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;#parsing-and-formatting-dates&quot;&gt;Parsing and formatting dates&lt;/a&gt; for documentation of the &lt;code&gt;f&lt;/code&gt; argument.</source>
          <target state="translated">&lt;code&gt;f&lt;/code&gt; 인수에 대한 문서는 &lt;a href=&quot;#parsing-and-formatting-dates&quot;&gt;날짜 구문 분석 및 형식화를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="007854703b2856873c5b75e5ccd07028741d9f88" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;#parsing-and-formatting-dates&quot;&gt;Parsing and formatting dates&lt;/a&gt; for documentation of the &lt;code&gt;format&lt;/code&gt; argument.</source>
          <target state="translated">&lt;code&gt;format&lt;/code&gt; 인수에 대한 문서는 &lt;a href=&quot;#parsing-and-formatting-dates&quot;&gt;날짜 구문 분석 및 형식화를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="079e35ad49364b7b959837d7b8c4075bad42046b" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;#types-varargs&quot;&gt;Varargs&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#types-varargs&quot;&gt;Varargs를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="8d7cec6c27750168d071981a308988f033dad082" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;http://www.postgresql.org/docs/current/static/libpq-connect.html#LIBPQ-CONNSTRING&quot;&gt;http://www.postgresql.org/docs/current/static/libpq-connect.html#LIBPQ-CONNSTRING&lt;/a&gt; for more information.</source>
          <target state="translated">자세한 내용은 &lt;a href=&quot;http://www.postgresql.org/docs/current/static/libpq-connect.html#LIBPQ-CONNSTRING&quot;&gt;http://www.postgresql.org/docs/current/static/libpq-connect.html#LIBPQ-CONNSTRING&lt;/a&gt; 을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="026f00ed70b5ea1d33e3d0a7fe97e633ce8c314d" translate="yes" xml:space="preserve">
          <source>See &lt;em&gt;dumpTree&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;dumpTree를&lt;/em&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="2e84aded15a4dce7fa32ff9274352ce415d6c1a7" translate="yes" xml:space="preserve">
          <source>See also &lt;em&gt;getCustomPragmaVal&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;getCustomPragmaVal&lt;/em&gt; 도 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="397e58039ec924dd88eae423221c59ae4164ec76" translate="yes" xml:space="preserve">
          <source>See also &lt;em&gt;hasCustomPragma&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;hasCustomPragma&lt;/em&gt; 참조&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="158612fe403e9ded24807d705a5e535f24b55b64" translate="yes" xml:space="preserve">
          <source>See also &lt;em&gt;repr&lt;/em&gt;, &lt;em&gt;lispRepr&lt;/em&gt;, and &lt;em&gt;astGenRepr&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;repr&lt;/em&gt; , &lt;em&gt;lispRepr&lt;/em&gt; 및 &lt;em&gt;astGenRepr&lt;/em&gt; 도 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="1ec2854aa3891f1afbcabb78062c8a9bd4a052a2" translate="yes" xml:space="preserve">
          <source>See also &lt;em&gt;repr&lt;/em&gt;, &lt;em&gt;treeRepr&lt;/em&gt;, and &lt;em&gt;astGenRepr&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;repr&lt;/em&gt; , &lt;em&gt;treeRepr&lt;/em&gt; 및 &lt;em&gt;astGenRepr&lt;/em&gt; 도 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="597467af3eae67fa0e1bc983ecbd4275692c9f35" translate="yes" xml:space="preserve">
          <source>See also &lt;em&gt;repr&lt;/em&gt;, &lt;em&gt;treeRepr&lt;/em&gt;, and &lt;em&gt;lispRepr&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;repr&lt;/em&gt; , &lt;em&gt;treeRepr&lt;/em&gt; 및 &lt;em&gt;lispRepr&lt;/em&gt; 도 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="1cd50ccb05e94d25f4e0618842ed1a7f8a06b947" translate="yes" xml:space="preserve">
          <source>See also the &lt;a href=&quot;apis&quot;&gt;API naming design&lt;/a&gt; document.</source>
          <target state="translated">&lt;a href=&quot;apis&quot;&gt;API 명명 설계&lt;/a&gt; 문서를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="843bda3db4712edbcd6b9df44e3a1feb2e04cf4f" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;#templates-limitations-of-the-method-call-syntax&quot;&gt;Limitations of the method call syntax&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#templates-limitations-of-the-method-call-syntax&quot;&gt;메소드 호출 구문의 제한 사항&lt;/a&gt; 도 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="134288782bb5bcfc11c246b2fe53ceb3bd016399" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;db_odbc&quot;&gt;db_odbc&lt;/a&gt;, &lt;a href=&quot;db_postgres&quot;&gt;db_postgres&lt;/a&gt;, &lt;a href=&quot;db_mysql&quot;&gt;db_mysql&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;db_odbc&quot;&gt;db_odbc&lt;/a&gt; , &lt;a href=&quot;db_postgres&quot;&gt;db_postgres&lt;/a&gt; , &lt;a href=&quot;db_mysql&quot;&gt;db_mysql&lt;/a&gt; 도 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="b602f00227041e32bbea05ec9419db9ca3913e68" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;db_odbc&quot;&gt;db_odbc&lt;/a&gt;, &lt;a href=&quot;db_sqlite&quot;&gt;db_sqlite&lt;/a&gt;, &lt;a href=&quot;db_mysql&quot;&gt;db_mysql&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;db_odbc&quot;&gt;db_odbc&lt;/a&gt; , &lt;a href=&quot;db_sqlite&quot;&gt;db_sqlite&lt;/a&gt; , &lt;a href=&quot;db_mysql&quot;&gt;db_mysql&lt;/a&gt; 도 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="552c1373b853f1fdc119ba44224e31ffef581dcc" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;db_odbc&quot;&gt;db_odbc&lt;/a&gt;, &lt;a href=&quot;db_sqlite&quot;&gt;db_sqlite&lt;/a&gt;, &lt;a href=&quot;db_postgres&quot;&gt;db_postgres&lt;/a&gt;.</source>
          <target state="translated">참조 : &lt;a href=&quot;db_odbc&quot;&gt;db_odbc&lt;/a&gt; , &lt;a href=&quot;db_sqlite&quot;&gt;db_sqlite&lt;/a&gt; ,&lt;a href=&quot;db_postgres&quot;&gt; db_postgres&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="dfbc3119399a1e39fc0881eab1af3e49a07506f2" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;db_postgres&quot;&gt;db_postgres&lt;/a&gt;, &lt;a href=&quot;db_sqlite&quot;&gt;db_sqlite&lt;/a&gt;, &lt;a href=&quot;db_mysql&quot;&gt;db_mysql&lt;/a&gt;.</source>
          <target state="translated">참조 : &lt;a href=&quot;db_postgres&quot;&gt;db_postgres&lt;/a&gt; , &lt;a href=&quot;db_sqlite&quot;&gt;db_sqlite&lt;/a&gt; , &lt;a href=&quot;db_mysql&quot;&gt;db_mysql&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="4a58566255fef7a43538068edfefb3c7c0ee78e5" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;https://en.wikipedia.org/wiki/Tz_database&quot;&gt;https://en.wikipedia.org/wiki/Tz_database&lt;/a&gt;</source>
          <target state="translated">참조 : &lt;a href=&quot;https://en.wikipedia.org/wiki/Tz_database&quot;&gt;https://en.wikipedia.org/wiki/Tz_database&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="7210897998bd22d53a943b0d63318de4e68e08ab" translate="yes" xml:space="preserve">
          <source>See source switch</source>
          <target state="translated">소스 스위치 참조</target>
        </trans-unit>
        <trans-unit id="9716956ee4c391a60ffca3d3606313d84f461c53" translate="yes" xml:space="preserve">
          <source>See the &lt;a href=&quot;marshal&quot;&gt;marshal&lt;/a&gt; module for what this module allows you to do.</source>
          <target state="translated">참고 항목 &lt;a href=&quot;marshal&quot;&gt;정렬 화를&lt;/a&gt;이 모듈로 할 수있는 작업 모듈을 .</target>
        </trans-unit>
        <trans-unit id="81b8d3c2c7da851f8357605755ae3101cf8fc78b" translate="yes" xml:space="preserve">
          <source>See the documentation of Nim's soft realtime &lt;a href=&quot;gc&quot;&gt;GC&lt;/a&gt; for further information.</source>
          <target state="translated">Nim의 소프트 실시간 &lt;a href=&quot;gc&quot;&gt;GC&lt;/a&gt; 문서를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="387cfbde3ee86288c077827a6cc5c3f634db22fd" translate="yes" xml:space="preserve">
          <source>See top level documentation of this module about how &lt;code&gt;scanf&lt;/code&gt; works.</source>
          <target state="translated">&lt;code&gt;scanf&lt;/code&gt; 방법에 대해서는이 모듈의 최상위 문서를 참조하십시오 작동 방식 .</target>
        </trans-unit>
        <trans-unit id="b4985d545e511c0eae8a67fa27c39ad7147c0724" translate="yes" xml:space="preserve">
          <source>See top level documentation of this module about how &lt;code&gt;scanp&lt;/code&gt; works.</source>
          <target state="translated">&lt;code&gt;scanp&lt;/code&gt; 방법에 대해서는 이 모듈의 최상위 문서를 참조하십시오 작동 .</target>
        </trans-unit>
        <trans-unit id="f40b41a194a89e314ef14f7724b344a13e9f60fd" translate="yes" xml:space="preserve">
          <source>Selecting tests by pattern</source>
          <target state="translated">패턴별로 테스트 선택</target>
        </trans-unit>
        <trans-unit id="310483b902e72895f55c75452b18157642311c62" translate="yes" xml:space="preserve">
          <source>Semantically the same as &lt;code&gt;cmp(normalize($a), normalize($b))&lt;/code&gt;. It is just optimized to not allocate temporary strings. This should NOT be used to compare Nim identifier names. use &lt;em&gt;macros.eqIdent&lt;/em&gt; for that. Returns:</source>
          <target state="translated">의미 적으로 &lt;code&gt;cmp(normalize($a), normalize($b))&lt;/code&gt; 합니다. 임시 문자열을 할당하지 않도록 최적화되었습니다. Nim 식별자 이름을 비교하는 데 사용해서는 안됩니다. &lt;em&gt;macros.eqIdent&lt;/em&gt; 사용&lt;em&gt;&lt;/em&gt; 를 . 보고:</target>
        </trans-unit>
        <trans-unit id="0c8a203644fa71ccfac204cf794cac43cb056bec" translate="yes" xml:space="preserve">
          <source>Semantically the same as &lt;code&gt;cmp(normalize(a), normalize(b))&lt;/code&gt;. It is just optimized to not allocate temporary strings. This should NOT be used to compare Nim identifier names. use &lt;em&gt;macros.eqIdent&lt;/em&gt; for that. Returns:</source>
          <target state="translated">의미 적으로 &lt;code&gt;cmp(normalize(a), normalize(b))&lt;/code&gt; 합니다. 임시 문자열을 할당하지 않도록 최적화되었습니다. Nim 식별자 이름을 비교하는 데 사용해서는 안됩니다. &lt;em&gt;macros.eqIdent&lt;/em&gt; 사용&lt;em&gt;&lt;/em&gt; 를 . 보고:</target>
        </trans-unit>
        <trans-unit id="35ee868f8885d37a97939546d68b678aa3fda4f4" translate="yes" xml:space="preserve">
          <source>Semantically this is the same as &lt;code&gt;pred&lt;/code&gt;.</source>
          <target state="translated">의미 적으로 이것은 &lt;code&gt;pred&lt;/code&gt; 와 동일합니다 .</target>
        </trans-unit>
        <trans-unit id="6de77ffd37607ff9518c4f9e8e5386cd009439b2" translate="yes" xml:space="preserve">
          <source>Semantically very similar to &lt;em&gt;info&lt;/em&gt;, but meant to be messages you want to be actively notified about (depending on your application). These could be, for example, grouped by hour and mailed out.</source>
          <target state="translated">의미 상 &lt;em&gt;정보&lt;/em&gt; 와 매우 유사&lt;em&gt;&lt;/em&gt; 하지만 응용 프로그램에 따라 적극적으로 알림을 받으려는 메시지를 의미합니다. 예를 들어 시간별로 그룹화되어 발송 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="170573f174a216ca03d9ab682d5f2a88dc2b1d9e" translate="yes" xml:space="preserve">
          <source>Send a message to the server, and wait for a primary reply. &lt;code&gt;\c\L&lt;/code&gt; is added for you.</source>
          <target state="translated">서버에 메시지를 보내고 기본 응답을 기다립니다. &lt;code&gt;\c\L&lt;/code&gt; 이 추가됩니다.</target>
        </trans-unit>
        <trans-unit id="63217fdf9c05113069261bfb7f82b228cd9313a7" translate="yes" xml:space="preserve">
          <source>Sends &lt;code&gt;data&lt;/code&gt; to &lt;code&gt;socket&lt;/code&gt;. The returned future will complete once all data has been sent.</source>
          <target state="translated">&lt;code&gt;socket&lt;/code&gt; 에 &lt;code&gt;data&lt;/code&gt; 를 보냅니다 . 모든 데이터가 전송되면 반환 된 미래는 완료됩니다.</target>
        </trans-unit>
        <trans-unit id="808586c92c7155d7aa45db302e4d798013a29d17" translate="yes" xml:space="preserve">
          <source>Sends &lt;code&gt;data&lt;/code&gt; to socket &lt;code&gt;sock&lt;/code&gt;. This is basically a nicer implementation of &lt;code&gt;sockets.sendAsync&lt;/code&gt;.</source>
          <target state="translated">소켓 &lt;code&gt;sock&lt;/code&gt; &lt;code&gt;data&lt;/code&gt; 를 보냅니다 . 이것은 기본적으로 &lt;code&gt;sockets.sendAsync&lt;/code&gt; 의 더 나은 구현입니다 .</target>
        </trans-unit>
        <trans-unit id="0f44cbe7038e29ec39697e4aee0dac9b82e51886" translate="yes" xml:space="preserve">
          <source>Sends &lt;code&gt;data&lt;/code&gt; to specified destination &lt;code&gt;saddr&lt;/code&gt;, using socket &lt;code&gt;socket&lt;/code&gt;. The returned future will complete once all data has been sent.</source>
          <target state="translated">소켓 &lt;code&gt;socket&lt;/code&gt; 사용하여 지정된 대상 &lt;code&gt;saddr&lt;/code&gt; 로 &lt;code&gt;data&lt;/code&gt; 를 보냅니다. . 모든 데이터가 전송되면 반환 된 미래는 완료됩니다.</target>
        </trans-unit>
        <trans-unit id="a182e14ae39a6a6ff86eecf3bc70c0b36c727808" translate="yes" xml:space="preserve">
          <source>Sends &lt;code&gt;msg&lt;/code&gt; from &lt;code&gt;fromAddr&lt;/code&gt; to the addresses specified in &lt;code&gt;toAddrs&lt;/code&gt;. Messages may be formed using &lt;code&gt;createMessage&lt;/code&gt; by converting the Message into a string.</source>
          <target state="translated">&lt;code&gt;fromAddr&lt;/code&gt; 에서 &lt;code&gt;toAddrs&lt;/code&gt; 에 지정된 주소로 &lt;code&gt;msg&lt;/code&gt; 를 보냅니다 . &lt;code&gt;createMessage&lt;/code&gt; 를 사용하여 메시지를 구성 할 수 있습니다. 문자열로 변환하여 메시지.</target>
        </trans-unit>
        <trans-unit id="e5a27dce3f2a133605f9afba21dbcbe87d7d9e13" translate="yes" xml:space="preserve">
          <source>Sends &lt;code&gt;size&lt;/code&gt; bytes from &lt;code&gt;buf&lt;/code&gt; to &lt;code&gt;socket&lt;/code&gt;. The returned future will complete once all data has been sent.</source>
          <target state="translated">&lt;code&gt;buf&lt;/code&gt; 에서 &lt;code&gt;socket&lt;/code&gt; 로 &lt;code&gt;size&lt;/code&gt; 바이트를 보냅니다 . 모든 데이터가 전송되면 반환 된 미래는 완료됩니다.</target>
        </trans-unit>
        <trans-unit id="25ffc10d9cb8e1ef8e3b0a351837cdbdd813d092" translate="yes" xml:space="preserve">
          <source>Sends an AUTH command to the server to login as the &lt;em&gt;username&lt;/em&gt; using &lt;em&gt;password&lt;/em&gt;. May fail with ReplyError.</source>
          <target state="translated">&lt;em&gt;password를&lt;/em&gt; 사용 하여 &lt;em&gt;사용자 이름&lt;/em&gt; 으로 로그인하도록 AUTH 명령을 서버에 보냅니다 . ReplyError로 실패 할 수 있습니다.&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="5ec0a390eca744b4e21d1c9faa664e07afa13bdd" translate="yes" xml:space="preserve">
          <source>Sends data to a socket.</source>
          <target state="translated">소켓으로 데이터를 보냅니다.</target>
        </trans-unit>
        <trans-unit id="33ad671989ea5eac38ff7d3c0f12e1c1f50e5df6" translate="yes" xml:space="preserve">
          <source>Sends the specified headers to the requesting client.</source>
          <target state="translated">지정된 헤더를 요청 클라이언트로 보냅니다.</target>
        </trans-unit>
        <trans-unit id="3074a16babd576481f6d30b0f45e8d125986e54b" translate="yes" xml:space="preserve">
          <source>Sequence variables are initialized with &lt;code&gt;@[]&lt;/code&gt;.</source>
          <target state="translated">시퀀스 변수는 &lt;code&gt;@[]&lt;/code&gt; 로 초기화됩니다 .</target>
        </trans-unit>
        <trans-unit id="88178136525c6478718f7b2fc55007e115123eaa" translate="yes" xml:space="preserve">
          <source>Sequence: Apply expressions &lt;em&gt;A&lt;/em&gt;, ..., &lt;em&gt;Z&lt;/em&gt;, in this order, to consume consecutive portions of the text ahead, as long as they succeed. Indicate success if all succeeded. Otherwise do not consume any text and indicate failure. The sequence's precedence is higher than that of ordered choice: &lt;code&gt;A B / C&lt;/code&gt; means &lt;code&gt;(A B) / Z&lt;/code&gt; and not &lt;code&gt;A (B / Z)&lt;/code&gt;.</source>
          <target state="translated">시퀀스 : 표현식 &lt;em&gt;A&lt;/em&gt; , ..., &lt;em&gt;Z&lt;/em&gt; 를이 순서대로 적용 하여 텍스트가 성공하는 한 연속 된 텍스트 부분을 소비합니다. 모두 성공하면 성공을 나타냅니다. 그렇지 않으면 텍스트를 소비하지 않고 실패를 나타냅니다. 순서의 우선 순위는 순서대로 선택한 순서보다 높습니다. &lt;code&gt;A B / C&lt;/code&gt; 는 &lt;code&gt;A (B / Z)&lt;/code&gt; 아닌 &lt;code&gt;(A B) / Z&lt;/code&gt; 의미합니다. 합니다.</target>
        </trans-unit>
        <trans-unit id="b5fb636023abb67d347041d398442118f79ea091" translate="yes" xml:space="preserve">
          <source>Sequences</source>
          <target state="translated">Sequences</target>
        </trans-unit>
        <trans-unit id="0bc1ddda48aa18861bbd55aff84f335ccf39403e" translate="yes" xml:space="preserve">
          <source>Sequences and strings are implemented as pointers to resizeable buffers, but Nim requires copying for assignments. Apart from RTTI the compiler could generate copy procedures for any type that needs one. However, this would make the code bigger and the RTTI is likely already there for the GC.</source>
          <target state="translated">시퀀스와 문자열은 크기 조정 가능한 버퍼에 대한 포인터로 구현되지만 할당을 위해서는 복사가 필요합니다. RTTI 외에도 컴파일러는 필요한 모든 유형에 대해 복사 절차를 생성 할 수 있습니다. 그러나 이것은 코드를 더 크게 만들고 RTTI는 이미 GC에있을 가능성이 큽니다.</target>
        </trans-unit>
        <trans-unit id="5a52dd463d27a8ba5f3355a484a83258d1f51219" translate="yes" xml:space="preserve">
          <source>Sequences are always indexed with an &lt;code&gt;int&lt;/code&gt; starting at position 0. The &lt;a href=&quot;system#len,seq%5BT%5D&quot;&gt;len&lt;/a&gt;, &lt;a href=&quot;system#low&quot;&gt;low&lt;/a&gt; and &lt;a href=&quot;system#high&quot;&gt;high&lt;/a&gt; operations are available for sequences too. The notation &lt;code&gt;x[i]&lt;/code&gt; can be used to access the i-th element of &lt;code&gt;x&lt;/code&gt;.</source>
          <target state="translated">시퀀스는 항상 위치 0에서 시작 하여 &lt;code&gt;int&lt;/code&gt; 로 색인 됩니다. &lt;a href=&quot;system#len,seq%5BT%5D&quot;&gt;len&lt;/a&gt; , &lt;a href=&quot;system#low&quot;&gt;low&lt;/a&gt; 및 &lt;a href=&quot;system#high&quot;&gt;high&lt;/a&gt; 연산도 시퀀스에 사용할 수 있습니다. 표기 &lt;code&gt;x[i]&lt;/code&gt; 액세스의 i 번째 요소 사용될 수 &lt;code&gt;x&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="d57a688b0804db680b53148991bfaf47d165ac64" translate="yes" xml:space="preserve">
          <source>Sequences are similar to arrays but of dynamic length which may change during runtime (like strings). Sequences are implemented as growable arrays, allocating pieces of memory as items are added. A sequence &lt;code&gt;S&lt;/code&gt; is always indexed by integers from 0 to &lt;code&gt;len(S)-1&lt;/code&gt; and its bounds are checked. Sequences can be constructed by the array constructor &lt;code&gt;[]&lt;/code&gt; in conjunction with the array to sequence operator &lt;code&gt;@&lt;/code&gt;. Another way to allocate space for a sequence is to call the built-in &lt;code&gt;newSeq&lt;/code&gt; procedure.</source>
          <target state="translated">시퀀스는 배열과 비슷하지만 런타임 중에 문자열과 같이 변경 될 수있는 동적 길이입니다. 시퀀스는 확장 가능한 배열로 구현되어 항목이 추가 될 때 메모리 조각을 할당합니다. 시퀀스 &lt;code&gt;S&lt;/code&gt; 는 항상 0에서 &lt;code&gt;len(S)-1&lt;/code&gt; 까지의 정수로 색인화되며 그 경계가 점검됩니다. 배열 생성자 &lt;code&gt;[]&lt;/code&gt; 는 배열 연산자와 배열 연산자 &lt;code&gt;@&lt;/code&gt; 를 사용하여 시퀀스를 구성 할 수 있습니다 . 시퀀스를위한 공간을 할당하는 또 다른 방법은 내장 &lt;code&gt;newSeq&lt;/code&gt; 프로 시저 를 호출하는 것 입니다.</target>
        </trans-unit>
        <trans-unit id="f4caee0ce61eb9f9010da8278c6bb9819fd97bcc" translate="yes" xml:space="preserve">
          <source>Sequences are similar to arrays but of dynamic length which may change during runtime (like strings). Since sequences are resizable they are always allocated on the heap and garbage collected.</source>
          <target state="translated">시퀀스는 배열과 비슷하지만 런타임 중에 문자열과 같이 변경 될 수있는 동적 길이입니다. 시퀀스 크기를 조정할 수 있으므로 항상 힙에 할당되고 가비지 수집됩니다.</target>
        </trans-unit>
        <trans-unit id="de40162a10ac517da4c83478490320d176010324" translate="yes" xml:space="preserve">
          <source>Sequences can be constructed by the array constructor &lt;code&gt;[]&lt;/code&gt; in conjunction with the array to sequence operator &lt;code&gt;@&lt;/code&gt;. Another way to allocate space for a sequence is to call the built-in &lt;a href=&quot;system#newSeq&quot;&gt;newSeq&lt;/a&gt; procedure.</source>
          <target state="translated">배열 생성자 &lt;code&gt;[]&lt;/code&gt; 는 배열 연산자와 배열 연산자 &lt;code&gt;@&lt;/code&gt; 를 사용하여 시퀀스를 구성 할 수 있습니다 . 시퀀스를위한 공간을 할당하는 또 다른 방법은 내장 &lt;a href=&quot;system#newSeq&quot;&gt;newSeq&lt;/a&gt; 프로 시저 를 호출하는 것 입니다.</target>
        </trans-unit>
        <trans-unit id="382013311d593d4fc5f3d775cc83027690f80d35" translate="yes" xml:space="preserve">
          <source>Set &lt;code&gt;oneshot&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt; if you want periodic notifications.</source>
          <target state="translated">정기적으로 알림을 &lt;code&gt;oneshot&lt;/code&gt; 을 &lt;code&gt;false&lt;/code&gt; 로 설정하십시오 .</target>
        </trans-unit>
        <trans-unit id="ac3b3dbadd2d80926e6b2ef30c5d46cd3af98beb" translate="yes" xml:space="preserve">
          <source>Set PSK identity hint to use.</source>
          <target state="translated">사용할 PSK ID 힌트를 설정하십시오.</target>
        </trans-unit>
        <trans-unit id="fca3a3f78708e6e8ef0a5fc9e87f9955562e0cf8" translate="yes" xml:space="preserve">
          <source>Set a checkpoint identified by &lt;em&gt;msg&lt;/em&gt;. Upon test failure all checkpoints encountered so far are printed out. Example:</source>
          <target state="translated">&lt;em&gt;msg로&lt;/em&gt; 식별되는 검사 점을 설정하십시오 . 테스트가 실패하면 지금까지 발생한 모든 검사 점이 인쇄됩니다. 예:</target>
        </trans-unit>
        <trans-unit id="bea824346555421d7b4f79726afe2253b1cb518f" translate="yes" xml:space="preserve">
          <source>Set a file length.</source>
          <target state="translated">파일 길이를 설정하십시오.</target>
        </trans-unit>
        <trans-unit id="abb4da8f53976c10c6722300fc689b2d215c41e5" translate="yes" xml:space="preserve">
          <source>Set callback called when OpenSSL needs PSK (for client).</source>
          <target state="translated">OpenSSL에 PSK (클라이언트 용)가 필요할 때 호출되는 콜백을 설정합니다.</target>
        </trans-unit>
        <trans-unit id="18edc59e062af37dea81ac6e186b07fd669cf629" translate="yes" xml:space="preserve">
          <source>Set callback called when OpenSSL needs PSK (for server).</source>
          <target state="translated">OpenSSL에 PSK (서버용)가 필요할 때 호출되는 콜백을 설정하십시오.</target>
        </trans-unit>
        <trans-unit id="2eb3a86185513109bd4d845afe43667d09e37d7b" translate="yes" xml:space="preserve">
          <source>Set complete status for exceptions indicated by &lt;em&gt;excepts&lt;/em&gt; according to the representation in the object pointed to by &lt;em&gt;flagp&lt;/em&gt;.</source>
          <target state="translated">예외 설정 완료 상태로 표시 &lt;em&gt;excepts&lt;/em&gt; 가 가리키는 객체의 표현에 따르면 &lt;em&gt;, 깃대&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="33ac2bcee80b5462c33e07494b4201714806558a" translate="yes" xml:space="preserve">
          <source>Set event &lt;code&gt;ev&lt;/code&gt; to signaled state.</source>
          <target state="translated">이벤트 &lt;code&gt;ev&lt;/code&gt; 를 신호 상태로 설정하십시오 .</target>
        </trans-unit>
        <trans-unit id="caab561e9360f5b03bbaa05a1412b0e6faa1a2d3" translate="yes" xml:space="preserve">
          <source>Set the SNI server name extension to be used in a client hello. Returns 1 if SNI was set, 0 if current SSL configuration doesn't support SNI.</source>
          <target state="translated">클라이언트 hello에 사용될 SNI 서버 이름 확장자를 설정하십시오. SNI가 설정된 경우 1을, 현재 SSL 구성이 SNI를 지원하지 않으면 0을 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="ec2788dcf8be591ed6a7f6e6a23a5f17199035e0" translate="yes" xml:space="preserve">
          <source>Set the appropriate bit in the page descriptor indicating that the cell points to the start of a memory block.</source>
          <target state="translated">셀이 메모리 블록의 시작을 가리키는 것을 나타내는 페이지 디스크립터에서 적절한 비트를 설정하십시오.</target>
        </trans-unit>
        <trans-unit id="be778905c0bc766264b1775d017b7217e1afea98" translate="yes" xml:space="preserve">
          <source>Set the callback to be used on listening SSL connections when the client hello is received.</source>
          <target state="translated">클라이언트 hello가 수신 될 때 SSL 연결 청취에 사용될 콜백을 설정하십시오.</target>
        </trans-unit>
        <trans-unit id="300fa407b8a8eb2c9e1e0d5cce10b34f6a8aba60" translate="yes" xml:space="preserve">
          <source>Set the pointer to be used in the callback registered to &lt;code&gt;SSL_CTX_set_tlsext_servername_callback&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;SSL_CTX_set_tlsext_servername_callback&lt;/code&gt; 에 등록 된 콜백에 사용될 포인터를 설정하십시오 .</target>
        </trans-unit>
        <trans-unit id="facaeed5def5c1ec0d1296bc94bea17d9d9a94e4" translate="yes" xml:space="preserve">
          <source>Set the pragma of a proc type</source>
          <target state="translated">proc 유형의 pragma 설정</target>
        </trans-unit>
        <trans-unit id="d39aea59047168d929f9e5b4e91f67157f32e9e7" translate="yes" xml:space="preserve">
          <source>Set the value of a property of name &lt;em&gt;field&lt;/em&gt; in a JsAssoc &lt;em&gt;obj&lt;/em&gt; to &lt;em&gt;v&lt;/em&gt;.</source>
          <target state="translated">JsAssoc &lt;em&gt;obj&lt;/em&gt; 에서 name &lt;em&gt;필드&lt;/em&gt; 의 특성 값 을 &lt;em&gt;v로 설정하십시오&lt;/em&gt; .&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="3db21d69f3f8485742c0994bd2b4a1ac360b9852" translate="yes" xml:space="preserve">
          <source>Set the value of a property of name &lt;em&gt;field&lt;/em&gt; in a JsObject &lt;em&gt;obj&lt;/em&gt; to &lt;em&gt;v&lt;/em&gt;.</source>
          <target state="translated">JsObject &lt;em&gt;obj&lt;/em&gt; 에서 name &lt;em&gt;필드&lt;/em&gt; 의 특성 값 을 &lt;em&gt;v로 설정하십시오&lt;/em&gt; .&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="cc77a1d3da71ce9d8ef7a90a239ccce2678cbecf" translate="yes" xml:space="preserve">
          <source>Set to true in order to quit immediately on fail. Default is false, unless the &lt;code&gt;NIMTEST_ABORT_ON_ERROR&lt;/code&gt; environment variable is set for the non-js target.</source>
          <target state="translated">실패시 즉시 종료하려면 true로 설정하십시오. &lt;code&gt;NIMTEST_ABORT_ON_ERROR&lt;/code&gt; 환경 변수가 j 가 아닌 대상에 설정되어 있지 않으면 기본값은 false 입니다.</target>
        </trans-unit>
        <trans-unit id="6ba8a4e35c2ca993f0910108377e4d4052112de4" translate="yes" xml:space="preserve">
          <source>Set type</source>
          <target state="translated">세트 타입</target>
        </trans-unit>
        <trans-unit id="2ab262f44dfc9e1ee8adf98c1aa64de34434fa83" translate="yes" xml:space="preserve">
          <source>Sets</source>
          <target state="translated">Sets</target>
        </trans-unit>
        <trans-unit id="2b58a2dc522a6a8ba321f78fee1a6c388a06c415" translate="yes" xml:space="preserve">
          <source>Sets a callback on &lt;code&gt;future&lt;/code&gt; which raises an exception if the future finished with an error.</source>
          <target state="translated">&lt;code&gt;future&lt;/code&gt; 에 콜백을 설정 하여 미래에 오류가 발생한 경우 예외를 발생시킵니다.</target>
        </trans-unit>
        <trans-unit id="d46a344c3d7a8738543b24b1f6ba63ae6f78fe53" translate="yes" xml:space="preserve">
          <source>Sets a cookie.</source>
          <target state="translated">쿠키를 설정합니다.</target>
        </trans-unit>
        <trans-unit id="7e9befb4cdae1e6823e43dc2c6ff05a4d14679a4" translate="yes" xml:space="preserve">
          <source>Sets a field from a &lt;em&gt;JObject&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;JObject&lt;/em&gt; 로부터 필드를 설정합니다 .</target>
        </trans-unit>
        <trans-unit id="ec9850c80890ceba2abbf806a1f610eb26626643" translate="yes" xml:space="preserve">
          <source>Sets an assertion failure handler that will intercept any assert statements following &lt;em&gt;onFailedAssert&lt;/em&gt; in the current module scope.</source>
          <target state="translated">현재 모듈 범위에서 &lt;em&gt;onFailedAssert&lt;/em&gt; 다음에 &lt;em&gt;오는&lt;/em&gt; 어설 션 문을 가로 챌 어설 션 실패 처리기를 설정합니다 .</target>
        </trans-unit>
        <trans-unit id="c2d72ef2dff8a1ecfc77b14fb5fb6845b0292abd" translate="yes" xml:space="preserve">
          <source>Sets are often used to define a type for the &lt;em&gt;flags&lt;/em&gt; of a procedure. This is a much cleaner (and type safe) solution than just defining integer constants that should be &lt;code&gt;or&lt;/code&gt;'ed together.</source>
          <target state="translated">세트는 종종 프로 시저 &lt;em&gt;플래그&lt;/em&gt; 의 유형을 정의하는 데 사용됩니다 . 이것은 함께 &lt;code&gt;or&lt;/code&gt; 함께 정수 상수를 정의하는 것보다 훨씬 깨끗하고 안전한 솔루션 입니다.</target>
        </trans-unit>
        <trans-unit id="b1196a7636e138500281b6029122d47c3358474c" translate="yes" xml:space="preserve">
          <source>Sets blocking mode on socket</source>
          <target state="translated">소켓에서 차단 모드를 설정합니다</target>
        </trans-unit>
        <trans-unit id="5a2f39b3a6fa12685dce4cec4aebd5a5a8e594a6" translate="yes" xml:space="preserve">
          <source>Sets blocking mode on socket.</source>
          <target state="translated">소켓에서 차단 모드를 설정합니다.</target>
        </trans-unit>
        <trans-unit id="13d87b8c2a64eaf422ebe52b694323f1b95af950" translate="yes" xml:space="preserve">
          <source>Sets can be constructed via the set constructor: &lt;code&gt;{}&lt;/code&gt; is the empty set. The empty set is type compatible with any concrete set type. The constructor can also be used to include elements (and ranges of elements):</source>
          <target state="translated">세트 생성자를 통해 세트를 구성 할 수 있습니다. &lt;code&gt;{}&lt;/code&gt; 은 빈 세트입니다. 빈 세트는 모든 콘크리트 세트 유형과 호환되는 유형입니다. 생성자를 사용하여 요소 (및 요소 범위)를 포함 할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="5c70ba56414b5c4f667e41bd0273c23bf52416e2" translate="yes" xml:space="preserve">
          <source>Sets file access and modification times.</source>
          <target state="translated">파일 액세스 및 수정 시간을 설정합니다.</target>
        </trans-unit>
        <trans-unit id="7c204196126cdd879acd680d24d30aaf38839f0b" translate="yes" xml:space="preserve">
          <source>Sets function that returns PSK based on the client identity.</source>
          <target state="translated">클라이언트 ID를 기반으로 PSK를 반환하는 함수를 설정합니다.</target>
        </trans-unit>
        <trans-unit id="100097d058008ef76ad407d5cedae724ee7a4479" translate="yes" xml:space="preserve">
          <source>Sets function that returns the client identity and the PSK based on identity hint from the server.</source>
          <target state="translated">서버의 ID 힌트를 기반으로 클라이언트 ID 및 PSK를 반환하는 기능을 설정합니다.</target>
        </trans-unit>
        <trans-unit id="593b179784d31587e9e35012a25f04eecb3bc779" translate="yes" xml:space="preserve">
          <source>Sets in object variants are not supported.</source>
          <target state="translated">객체 변형의 세트는 지원되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="dabb4963a555ba7124e0874b5417cee4a3363cf2" translate="yes" xml:space="preserve">
          <source>Sets option &lt;code&gt;opt&lt;/code&gt; to a boolean value specified by &lt;code&gt;value&lt;/code&gt;.</source>
          <target state="translated">옵션 &lt;code&gt;opt&lt;/code&gt; 를 value로 지정된 부울 값으로 설정 &lt;code&gt;value&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="f9b2940d72b32b640ab2b037c4f1cddaddf0cde2" translate="yes" xml:space="preserve">
          <source>Sets the &lt;em&gt;file&lt;/em&gt;'s last modification time. &lt;em&gt;OSError&lt;/em&gt; is raised in case of an error.</source>
          <target state="translated">&lt;em&gt;파일&lt;/em&gt; 의 마지막 수정 시간을 설정합니다 . 오류가 발생하면 &lt;em&gt;OSError&lt;/em&gt; 가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="b83f8f862eba6356a93ce6941ee575f1de05800f" translate="yes" xml:space="preserve">
          <source>Sets the &lt;span id=&quot;current-working-directory_2&quot;&gt;current working directory&lt;/span&gt;; &lt;em&gt;OSError&lt;/em&gt; is raised if &lt;em&gt;newDir&lt;/em&gt; cannot been set.</source>
          <target state="translated">&lt;span id=&quot;current-working-directory_2&quot;&gt;현재 작업 디렉토리를&lt;/span&gt; 설정합니다 . &lt;em&gt;newDir을&lt;/em&gt; 설정할 수 없으면 &lt;em&gt;OSError&lt;/em&gt; 가 발생합니다 .&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="37f5e53f3803952f681635d49b1492116ff1a455" translate="yes" xml:space="preserve">
          <source>Sets the Key value of the specified Section.</source>
          <target state="translated">지정된 섹션의 키 값을 설정합니다.</target>
        </trans-unit>
        <trans-unit id="a8e8f8486f8b126f04c244b5acc79c545422b032" translate="yes" xml:space="preserve">
          <source>Sets the callback proc to be called when data was placed inside the future stream.</source>
          <target state="translated">데이터가 향후 스트림 내에 배치 될 때 호출 될 콜백 proc을 설정합니다.</target>
        </trans-unit>
        <trans-unit id="dfd402f8b29e8041ffa26bd2e46cfccf9560e819" translate="yes" xml:space="preserve">
          <source>Sets the callback proc to be called when the future completes.</source>
          <target state="translated">향후 완료시 콜백 proc이 호출되도록 설정합니다.</target>
        </trans-unit>
        <trans-unit id="2bd9d81344500b645186c4c243c4d7737df7028e" translate="yes" xml:space="preserve">
          <source>Sets the encoding of a database connection, returns true for success, false for failure. result = set_character_set(connection, encoding) == 0</source>
          <target state="translated">데이터베이스 연결의 인코딩을 설정하고 성공하면 true를, 실패하면 false를 반환합니다. 결과 = set_character_set (연결, 인코딩) == 0</target>
        </trans-unit>
        <trans-unit id="9a160c5f28384ff8d9cb2001fe120c533b9f14fa" translate="yes" xml:space="preserve">
          <source>Sets the global log filter.</source>
          <target state="translated">글로벌 로그 필터를 설정합니다.</target>
        </trans-unit>
        <trans-unit id="0767527cb84f2c78c768c161ec01249708d5c674" translate="yes" xml:space="preserve">
          <source>Sets the header entries associated with &lt;code&gt;key&lt;/code&gt; to the specified list of values. Replaces any existing values.</source>
          <target state="translated">&lt;code&gt;key&lt;/code&gt; 와 연관된 헤더 항목 을 지정된 값 목록으로 설정합니다. 기존 값을 바꿉니다.</target>
        </trans-unit>
        <trans-unit id="30775b9da4f687e49b7ce056c05167e372e5d957" translate="yes" xml:space="preserve">
          <source>Sets the header entries associated with &lt;code&gt;key&lt;/code&gt; to the specified value. Replaces any existing values.</source>
          <target state="translated">&lt;code&gt;key&lt;/code&gt; 와 연관된 헤더 항목 을 지정된 값으로 설정합니다. 기존 값을 바꿉니다.</target>
        </trans-unit>
        <trans-unit id="9d7d565e294c74c7f76daa93a38c7d68240d9e2d" translate="yes" xml:space="preserve">
          <source>Sets the identity hint passed to server.</source>
          <target state="translated">서버에 전달 된 아이디 힌트를 설정합니다.</target>
        </trans-unit>
        <trans-unit id="cde44825811fc9045b3cdcbd8dc04231770b2041" translate="yes" xml:space="preserve">
          <source>Sets the position of the file pointer that is used for read/write operations. The file's first byte has the index zero.</source>
          <target state="translated">읽기 / 쓰기 작업에 사용되는 파일 포인터의 위치를 ​​설정합니다. 파일의 첫 번째 바이트의 인덱스는 0입니다.</target>
        </trans-unit>
        <trans-unit id="8fa087f6ec74e4f8bac3289c0ce3118bb4dac0ff" translate="yes" xml:space="preserve">
          <source>Sets the terminal style.</source>
          <target state="translated">터미널 스타일을 설정합니다.</target>
        </trans-unit>
        <trans-unit id="e624588f393759507f3613c629e6df9eaa251266" translate="yes" xml:space="preserve">
          <source>Sets the terminal's background color.</source>
          <target state="translated">터미널의 배경색을 설정합니다.</target>
        </trans-unit>
        <trans-unit id="ba839ae8690b617da587c686a5f041a1f15dd58c" translate="yes" xml:space="preserve">
          <source>Sets the terminal's background true color.</source>
          <target state="translated">단말기의 배경 트루 컬러를 설정합니다.</target>
        </trans-unit>
        <trans-unit id="692d91dc53c987f088c17432a09d05df33286dc2" translate="yes" xml:space="preserve">
          <source>Sets the terminal's cursor to the (x,y) position. (0,0) is the upper left of the screen.</source>
          <target state="translated">터미널 커서를 (x, y) 위치로 설정합니다. (0,0)은 화면의 왼쪽 상단입니다.</target>
        </trans-unit>
        <trans-unit id="3a93a60c09c9561641755272688e52a0376880fe" translate="yes" xml:space="preserve">
          <source>Sets the terminal's cursor to the x position. The y position is not changed.</source>
          <target state="translated">터미널의 커서를 x ​​위치로 설정합니다. y 위치는 변경되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="4b5b2e99977b2a5492673f05761bcdb029825663" translate="yes" xml:space="preserve">
          <source>Sets the terminal's cursor to the y position. The x position is not changed. &lt;strong&gt;Warning&lt;/strong&gt;: This is not supported on UNIX!</source>
          <target state="translated">터미널 커서를 y 위치로 설정합니다. x 위치는 변경되지 않습니다. &lt;strong&gt;경고&lt;/strong&gt; : 이것은 UNIX에서 지원되지 않습니다!</target>
        </trans-unit>
        <trans-unit id="33d6e610d0a3c1c7ea14e8ff71649b85e0821381" translate="yes" xml:space="preserve">
          <source>Sets the terminal's foreground color.</source>
          <target state="translated">터미널의 전경색을 설정합니다.</target>
        </trans-unit>
        <trans-unit id="2b7fb45a7a27531e9ca1ac031875d00590ed7793" translate="yes" xml:space="preserve">
          <source>Sets the terminal's foreground true color.</source>
          <target state="translated">터미널의 전경색을 설정합니다.</target>
        </trans-unit>
        <trans-unit id="58b128f1f1dfd81080ace41d9a53a79e98c77e32" translate="yes" xml:space="preserve">
          <source>Setter for backward compatibility.</source>
          <target state="translated">이전 버전과의 호환성을위한 세터입니다.</target>
        </trans-unit>
        <trans-unit id="2409ea624ba698b2734c243a9f2d2956dda21e7e" translate="yes" xml:space="preserve">
          <source>Setter for the &lt;code&gt;handleWrite&lt;/code&gt; event.</source>
          <target state="translated">&lt;code&gt;handleWrite&lt;/code&gt; 이벤트의 세터입니다 .</target>
        </trans-unit>
        <trans-unit id="7655e5151bc276acbf89d38beaab125af1057fee" translate="yes" xml:space="preserve">
          <source>Setup code to be executed when Unix signals are received. The currently handled signal is injected as &lt;code&gt;sig&lt;/code&gt; into the calling scope.</source>
          <target state="translated">유닉스 신호가 수신 될 때 실행되는 설정 코드. 현재 처리 된 신호는 호출 범위에 &lt;code&gt;sig&lt;/code&gt; 로 주입됩니다 .</target>
        </trans-unit>
        <trans-unit id="4438d5cf2b81bdd383ce9074e1f2ffceafc43c3c" translate="yes" xml:space="preserve">
          <source>ShadowIdent</source>
          <target state="translated">ShadowIdent</target>
        </trans-unit>
        <trans-unit id="b9aac6edcd9fccee278d1d720b29ecfb0939f38d" translate="yes" xml:space="preserve">
          <source>Shared global compiletime state</source>
          <target state="translated">공유 전역 컴파일 타임 상태</target>
        </trans-unit>
        <trans-unit id="28dc378515622329465eaea75a1dd093caa6b12c" translate="yes" xml:space="preserve">
          <source>Shared list support.</source>
          <target state="translated">공유 목록 지원</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
