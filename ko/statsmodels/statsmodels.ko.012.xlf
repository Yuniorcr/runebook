<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="statsmodels">
    <body>
      <group id="statsmodels">
        <trans-unit id="cc97897f8217785700304289928dd558bd902abc" translate="yes" xml:space="preserve">
          <source>For orthogonal rotations the algorithm can be set to analytic in which case the following keyword arguments are available:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="372d223f788bb4eb9f80a6ba083d608f01f886b5" translate="yes" xml:space="preserve">
          <source>For orthogonal rotations:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2cd6dea43d855de5ff83d52c84db489db9939a8c" translate="yes" xml:space="preserve">
          <source>For other approaches to FDR control in regression, see the statsmodels.stats.multitest module. Methods provided in that module use Z-scores or p-values, and therefore require standard errors for the coefficient estimates to be available.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7273e81ee15ac1f97ee0c98dd27d4bcadb0044f" translate="yes" xml:space="preserve">
          <source>For reference, the shaded periods represent the NBER recessions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="210b6dd98f33939dcba2364db9de72138493b940" translate="yes" xml:space="preserve">
          <source>For result summary, scree/loading plots and factor rotations</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78511da645687d2ded88eb605fbd855b3ec3c8c2" translate="yes" xml:space="preserve">
          <source>For small n, upper_bound and lower_bound may have to be provided by the user. Consider using test_kurt to find values close to the desired significance level.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4fbf981987be5b89d31026082848946b11d4a2e" translate="yes" xml:space="preserve">
          <source>For the AR specification and MA specification components, there are two possiblities. The first is to specify the &lt;strong&gt;maximum degree&lt;/strong&gt; of the corresponding lag polynomial, in which case the component is an integer. For example, if we wanted to specify an ARIMA(1,1,4) process, we would use:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd33e8d35caf5ad8d36a4b558a6557c6cf51b091" translate="yes" xml:space="preserve">
          <source>For the Gaussian distribution, Anscombe residuals are the same as deviance residuals.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20810a76442692d320fdaf64f3945dbcd920176f" translate="yes" xml:space="preserve">
          <source>For the Gaussian family, there is no benefit to setting &lt;code&gt;params_niter&lt;/code&gt; to a value greater than 1, since the mean structure parameters converge in one step.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab74c65919e3271e660243a215d9741694eceae9" translate="yes" xml:space="preserve">
          <source>For the airline model ARIMA $(2,1,0) \times (1,1,0)_{12}$ with an intercept, the command is:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c429570392860455cd5dccbc420e0b61f63b5271" translate="yes" xml:space="preserve">
          <source>For the models estimated over missing dataset, the AIC chooses ARMA(1,1)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6678b180ae3444d3f4e5c680ad34af7507ff494a" translate="yes" xml:space="preserve">
          <source>For the models estimated over the full (non-missing) dataset, the AIC chooses ARMA(1,1) or ARMA(3,0). Durbin and Koopman suggest the ARMA(1,1) specification is better due to parsimony.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="093625b808c597373ce97553e5b2244325481ff9" translate="yes" xml:space="preserve">
          <source>For the present purposed epsilon_{t} is assumed to always be zero.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2bbc35ea6dd3cce7f8e58ee0ba7fae1edd73927b" translate="yes" xml:space="preserve">
          <source>For the studentized range statistic, the resulting factor has to be divided by 2.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8378f360ddc1e2239b5f30e9778165bbca6c0032" translate="yes" xml:space="preserve">
          <source>For these test the null hypothesis is that all observations have the same error variance, i.e. errors are homoscedastic. The tests differ in which kind of heteroscedasticity is considered as alternative hypothesis. They also vary in the power of the test for different types of heteroscedasticity.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="afc496aad5ef92c247efcb94dd825f7e98cdfdac" translate="yes" xml:space="preserve">
          <source>For this purpose a matrix P is used which fulfills \(\Sigma_u = PP^\prime\). P defaults to the Cholesky decomposition of \(\Sigma_u\)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="373457d30600f99a051b081d078219e7a50c5e2a" translate="yes" xml:space="preserve">
          <source>For unobserved components models, and in particular when exploring stylized facts in line with point (2) from the introduction, it is often more instructive to plot the estimated unobserved components (e.g. the level, trend, and cycle) themselves to see if they provide a meaningful description of the data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="574fffc6c9ae87061b76458a140e39022af5dd93" translate="yes" xml:space="preserve">
          <source>Forecast Error Variance Decomposition (FEVD)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e1dc20fd7aef4e6f40ff592d8fb1eedd182e11a" translate="yes" xml:space="preserve">
          <source>Forecast errors of component j on k in an i-step ahead forecast can be decomposed using the orthogonalized impulse responses \(\Theta_i\):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5a050dfdf99d1907a8cf602c77c205f7c8c6ca0" translate="yes" xml:space="preserve">
          <source>Forecasting</source>
          <target state="translated">Forecasting</target>
        </trans-unit>
        <trans-unit id="1b3aca246eb5084889447843414210938a8eb9c1" translate="yes" xml:space="preserve">
          <source>Format 113: Stata 8/9 Format 114: Stata 10/11 Format 115: Stata 12</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="720f58fb1f9353ab3c904b888ccb774c40393e06" translate="yes" xml:space="preserve">
          <source>Formula</source>
          <target state="translated">Formula</target>
        </trans-unit>
        <trans-unit id="d40c9c879e0cf2d3ebc7aff248633a1bcbb56c8c" translate="yes" xml:space="preserve">
          <source>Formula-compatible models have the following generic call signature: &lt;code&gt;(formula, data, subset=None, *args, **kwargs)&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23837eb44131054d463cc6397d24dccb648f4874" translate="yes" xml:space="preserve">
          <source>Formulas</source>
          <target state="translated">Formulas</target>
        </trans-unit>
        <trans-unit id="49782ae67c4c03c21ed859fb1c9f177c64a3891d" translate="yes" xml:space="preserve">
          <source>Formulas from Greene, section 8.3.4 translated to code</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8c6ab3fdb19a252d4f9dff0dcd2ce45308304c2" translate="yes" xml:space="preserve">
          <source>Formulas: Fitting models using R-style formulas</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c43025a84087877bb9b88869d33f5faa853ea5f3" translate="yes" xml:space="preserve">
          <source>Fourier transform of AR polynomial, zero-padded at end to n</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37ad4caa9d7ca5597bdc4955f743d03fffd5fb3e" translate="yes" xml:space="preserve">
          <source>Fourier transform of ARMA polynomial, zero-padded at end to n</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7d7fb149fd34972cfe98c3a02c5a589afb4745b" translate="yes" xml:space="preserve">
          <source>Fourier transform of MA polynomial, zero-padded at end to n</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aed5d9d2e8b96f7c3c2ac68acd9934f09f5dbbfb" translate="yes" xml:space="preserve">
          <source>Freeze the distribution for the given arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4fd7c136b72a1cab97e42f838a654f2d2b4a3c4b" translate="yes" xml:space="preserve">
          <source>Freq Seasonal</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ee18094f506055b971a37f2c740493de61f7d69" translate="yes" xml:space="preserve">
          <source>Frequency weights produce the same results as repeating observations by the frequencies (if those are integers). Frequency weights will keep the number of observations consistent, but the degrees of freedom will change to reflect the new weights.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4fa0ff5e6510d330c2b05647a7a78975c7e97d3" translate="yes" xml:space="preserve">
          <source>Frequently Asked Question</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6b78b15145d3714d1fa08a93a967675445038d6" translate="yes" xml:space="preserve">
          <source>Friedman, Hastie, Tibshirani (2008). Regularization paths for generalized linear models via coordinate descent. Journal of Statistical Software 33(1), 1-22 Feb 2010.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7127c91f8ce6259538d6e47bd966c2b10a68f11e" translate="yes" xml:space="preserve">
          <source>Friedman, J. H., Hastie, T. and Tibshirani, R. Regularized Paths for Generalized Linear Models via Coordinate Descent. Journal of Statistical Software, 33(1) (2008) &lt;a href=&quot;http://www.jstatsoft.org/v33/i01/paper&quot;&gt;http://www.jstatsoft.org/v33/i01/paper&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="418fbe1e403f1f8571126596d76661a312fe4e03" translate="yes" xml:space="preserve">
          <source>From an Q x P contrast matrix &lt;code&gt;C&lt;/code&gt; and an N x P design matrix &lt;code&gt;D&lt;/code&gt;, checks if the contrast &lt;code&gt;C&lt;/code&gt; is estimable by looking at the rank of &lt;code&gt;vstack([C,D])&lt;/code&gt; and verifying it is the same as the rank of &lt;code&gt;D&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7bb02af7bc6e2d165f0d87896ec2d7f7db2932a" translate="yes" xml:space="preserve">
          <source>From description in Greene, section 8.3.3</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5ed298743bb2122f4c7b7f9f698781a0fdbf390" translate="yes" xml:space="preserve">
          <source>From examples it looks like there is little power for standard cusum if exog (other than constant) have mean zero.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c038fd3ac9bb02ad97d688475d8acf9549e7fe42" translate="yes" xml:space="preserve">
          <source>From our first look at the data, the difference between Master's and PhD in the management group is different than in the non-management group. This is an interaction between the two qualitative variables management,M and education,E. We can visualize this by first removing the effect of experience, then plotting the means within each of the 6 groups using interaction.plot.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1df82bc5c1e344bed6020e9be993942176e0842" translate="yes" xml:space="preserve">
          <source>From the estimated VAR model, we can plot the impulse response functions of the endogenous variables.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b500e38830503652505e4ed52df98a53c7cb3b78" translate="yes" xml:space="preserve">
          <source>From the estimated transition matrix we can calculate the expected duration of a low regime versus a high regime.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1d22af648dc41f98d2314a305d0dc8393e994a3" translate="yes" xml:space="preserve">
          <source>From the estimated transition matrix we can calculate the expected duration of a recession versus an expansion.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dde8fde814ce32ac510730325e7778f2f050c25e" translate="yes" xml:space="preserve">
          <source>From the first two graphs, we note that the original time series does not appear to be stationary, whereas the first-difference does. This supports either estimating an ARMA model on the first-difference of the data, or estimating an ARIMA model with 1 order of integration (recall that we are taking the latter approach). The last two graphs support the use of an ARMA(1,1,1) model.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b61f68fdb0f2d32ded82f2d0a52ba4349716c923" translate="yes" xml:space="preserve">
          <source>From the summary output, the mean federal funds rate in the first regime (the &quot;low regime&quot;) is estimated to be $3.7$ whereas in the &quot;high regime&quot; it is $9.6$. Below we plot the smoothed probabilities of being in the high regime. The model suggests that the 1980's was a time-period in which a high federal funds rate existed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d0eec59d9e6940975a5a165a85bae74248c6c3e" translate="yes" xml:space="preserve">
          <source>Frozen Statespace Model</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d8ebefb0d46943e2c4758e3e63dd8f2f55246af" translate="yes" xml:space="preserve">
          <source>Frozen random number generator object with mean and variance determined by the fitted linear model. Use the &lt;code&gt;rvs&lt;/code&gt; method to generate random values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5a374fc85d2a8e7d05298cd6a91aaa4b9b304a3" translate="yes" xml:space="preserve">
          <source>Frozen random number generator object. Use the &lt;code&gt;rvs&lt;/code&gt; method to generate random values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8ad130f0c863784cac10c8b3545de3f950d3230" translate="yes" xml:space="preserve">
          <source>FrozenRepresentation.update_representation()</source>
          <target state="translated">FrozenRepresentation.update_representation()</target>
        </trans-unit>
        <trans-unit id="a1900e63dd1f5b483ae00d326adfc4fe41faee22" translate="yes" xml:space="preserve">
          <source>Full fit of the model.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f27f90646ae95d223d2e644595a6ab16a7b1588" translate="yes" xml:space="preserve">
          <source>Full string syntax</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="464fdd60e691e1b934715fd2fbde342f856b33cc" translate="yes" xml:space="preserve">
          <source>Fully tested against matlab</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a09469eb4c8e67738d49e33ebe5f3ec80c42de6c" translate="yes" xml:space="preserve">
          <source>Functional Data&amp;rdquo;, vol. 19, pp. 29-25, 2010.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b495fe1337cf7db558788313f36143b4fb60ba75" translate="yes" xml:space="preserve">
          <source>Functional Data&amp;rdquo;, vol. 19, pp. 29-45, 2010.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7147e4cd94c841473f4c29463180e85fb7abefd8" translate="yes" xml:space="preserve">
          <source>Functional Plots</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05975be86581a8ac01f634a08ee889e6370060d7" translate="yes" xml:space="preserve">
          <source>Functional band depth as an order statistic for functional data was proposed in &lt;a href=&quot;#id4&quot; id=&quot;id2&quot;&gt;[1]&lt;/a&gt; and applied to functional boxplots and bagplots in &lt;a href=&quot;#id5&quot; id=&quot;id3&quot;&gt;[2]&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b961dea1dc0c60ddf9a2c8e9d090f6f7d082483" translate="yes" xml:space="preserve">
          <source>Functions</source>
          <target state="translated">Functions</target>
        </trans-unit>
        <trans-unit id="604b65966adc8a2c47418b4fe070cf35c583d4b9" translate="yes" xml:space="preserve">
          <source>Functions and classes:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6da76886d65d87e4650f5c14ec791f8c2f676112" translate="yes" xml:space="preserve">
          <source>Further explanation of the &lt;code&gt;fmt&lt;/code&gt; parameter (&lt;code&gt;%[flag]width[.precision]specifier&lt;/code&gt;):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7119290ea5d72c418b0ac1d42b0698992776ba5b" translate="yes" xml:space="preserve">
          <source>Furthermore, the qualitative results are unchanged, as we can see from the updated $R^2$ chart and the new coincident index, both of which are practically identical to the previous results.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79c96a2b52f177f6593be4fe28333689ed918a7a" translate="yes" xml:space="preserve">
          <source>G:varname1*varname2 : create product between factor and continuous variable</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4f453f2e77b1de3377909c8492e4700657d6f63" translate="yes" xml:space="preserve">
          <source>GEE can be used to fit Generalized Linear Models (GLMs) when the data have a grouped structure, and the observations are possibly correlated within groups but not between groups.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54655b145b6a871cca0d1e9139050ef829a3d5aa" translate="yes" xml:space="preserve">
          <source>GEE.cluster_list()</source>
          <target state="translated">GEE.cluster_list()</target>
        </trans-unit>
        <trans-unit id="9b7de0af2e22de03a4089e0638590962773a03ce" translate="yes" xml:space="preserve">
          <source>GEE.estimate_scale()</source>
          <target state="translated">GEE.estimate_scale()</target>
        </trans-unit>
        <trans-unit id="7e9b6ad7e6249e6f24765763d252c4b7c7fb87f9" translate="yes" xml:space="preserve">
          <source>GEE.fit()</source>
          <target state="translated">GEE.fit()</target>
        </trans-unit>
        <trans-unit id="76799940532c140c833f2b7389d2c88a757f3c38" translate="yes" xml:space="preserve">
          <source>GEE.from_formula()</source>
          <target state="translated">GEE.from_formula()</target>
        </trans-unit>
        <trans-unit id="fa1311743fea21bf9f032652c70727ec9af3db94" translate="yes" xml:space="preserve">
          <source>GEE.mean_deriv()</source>
          <target state="translated">GEE.mean_deriv()</target>
        </trans-unit>
        <trans-unit id="3b7f0abbb50199c05675ee8cf9667e38bbdef3a3" translate="yes" xml:space="preserve">
          <source>GEE.mean_deriv_exog()</source>
          <target state="translated">GEE.mean_deriv_exog()</target>
        </trans-unit>
        <trans-unit id="bd874e174ffa9d6a36b68cc6bf6a142522f80d0f" translate="yes" xml:space="preserve">
          <source>GEE.predict()</source>
          <target state="translated">GEE.predict()</target>
        </trans-unit>
        <trans-unit id="03ef23612371378eec563392288b0b37aa487467" translate="yes" xml:space="preserve">
          <source>GEE.update_cached_means()</source>
          <target state="translated">GEE.update_cached_means()</target>
        </trans-unit>
        <trans-unit id="d5dc5186c9259385ed9e4f00522d2229cb1dfe69" translate="yes" xml:space="preserve">
          <source>GEEMargins.conf_int()</source>
          <target state="translated">GEEMargins.conf_int()</target>
        </trans-unit>
        <trans-unit id="e9bb8b5a8381299f7a24888af605aec385e568e6" translate="yes" xml:space="preserve">
          <source>GEEMargins.get_margeff()</source>
          <target state="translated">GEEMargins.get_margeff()</target>
        </trans-unit>
        <trans-unit id="2ee82b0301893b36fcc743cdb03bf8d67d150dd2" translate="yes" xml:space="preserve">
          <source>GEEMargins.pvalues()</source>
          <target state="translated">GEEMargins.pvalues()</target>
        </trans-unit>
        <trans-unit id="cc0f0ae412454704df2e46afe658bec59f7b5265" translate="yes" xml:space="preserve">
          <source>GEEMargins.summary()</source>
          <target state="translated">GEEMargins.summary()</target>
        </trans-unit>
        <trans-unit id="bee52d8dd5ed81e62aa52f9f2e767ea7fcc2fb9e" translate="yes" xml:space="preserve">
          <source>GEEMargins.summary_frame()</source>
          <target state="translated">GEEMargins.summary_frame()</target>
        </trans-unit>
        <trans-unit id="33ad71749cdb99115dd915abfcb61790d26c6cd3" translate="yes" xml:space="preserve">
          <source>GEEMargins.tvalues()</source>
          <target state="translated">GEEMargins.tvalues()</target>
        </trans-unit>
        <trans-unit id="ec0aa3c3379fa4477f89a7613e3a45c3aeb7e752" translate="yes" xml:space="preserve">
          <source>GEEResults.bse()</source>
          <target state="translated">GEEResults.bse()</target>
        </trans-unit>
        <trans-unit id="536c562ed7c904e37ecf0c8c980b7dfc55bd31a6" translate="yes" xml:space="preserve">
          <source>GEEResults.centered_resid()</source>
          <target state="translated">GEEResults.centered_resid()</target>
        </trans-unit>
        <trans-unit id="2e418c9982a3e305d5d275b69e87d0c03d8b313a" translate="yes" xml:space="preserve">
          <source>GEEResults.conf_int()</source>
          <target state="translated">GEEResults.conf_int()</target>
        </trans-unit>
        <trans-unit id="2e846c196ee306fe5e5237e2912513b633e31129" translate="yes" xml:space="preserve">
          <source>GEEResults.cov_params()</source>
          <target state="translated">GEEResults.cov_params()</target>
        </trans-unit>
        <trans-unit id="8a69ddd908719acbcadee295ae52f5ac0114cdb6" translate="yes" xml:space="preserve">
          <source>GEEResults.f_test()</source>
          <target state="translated">GEEResults.f_test()</target>
        </trans-unit>
        <trans-unit id="6651cbac0fffe263c96de701093a4c737b9ab6ac" translate="yes" xml:space="preserve">
          <source>GEEResults.fittedvalues()</source>
          <target state="translated">GEEResults.fittedvalues()</target>
        </trans-unit>
        <trans-unit id="7180735a3563acbf0615f2f7e78288fd4e0cbf3d" translate="yes" xml:space="preserve">
          <source>GEEResults.get_margeff()</source>
          <target state="translated">GEEResults.get_margeff()</target>
        </trans-unit>
        <trans-unit id="49fa7612fbd7e6bfc1f20ba6ea698cfc5a39a6e0" translate="yes" xml:space="preserve">
          <source>GEEResults.initialize()</source>
          <target state="translated">GEEResults.initialize()</target>
        </trans-unit>
        <trans-unit id="1b7d1696b3c3a959bd94ee08cda7b0da5c8c94f4" translate="yes" xml:space="preserve">
          <source>GEEResults.llf()</source>
          <target state="translated">GEEResults.llf()</target>
        </trans-unit>
        <trans-unit id="9fd2bfac6fc164bb1753ec91148d14595f9fac29" translate="yes" xml:space="preserve">
          <source>GEEResults.load()</source>
          <target state="translated">GEEResults.load()</target>
        </trans-unit>
        <trans-unit id="7aa5e78c7442f63cee69e65f2d21d89bb527c3e5" translate="yes" xml:space="preserve">
          <source>GEEResults.normalized_cov_params()</source>
          <target state="translated">GEEResults.normalized_cov_params()</target>
        </trans-unit>
        <trans-unit id="ebb95d511a28fdb8447371d37dce115df838c79a" translate="yes" xml:space="preserve">
          <source>GEEResults.params_sensitivity()</source>
          <target state="translated">GEEResults.params_sensitivity()</target>
        </trans-unit>
        <trans-unit id="ebc382e2f4be839dd30d6370501b873c0ee92935" translate="yes" xml:space="preserve">
          <source>GEEResults.plot_added_variable()</source>
          <target state="translated">GEEResults.plot_added_variable()</target>
        </trans-unit>
        <trans-unit id="eb647db0eabc72d45dca9da39805e1f818da6ee9" translate="yes" xml:space="preserve">
          <source>GEEResults.plot_ceres_residuals()</source>
          <target state="translated">GEEResults.plot_ceres_residuals()</target>
        </trans-unit>
        <trans-unit id="4c1d550a12b7c5f4bea4892b53a3a8b64de1003c" translate="yes" xml:space="preserve">
          <source>GEEResults.plot_isotropic_dependence()</source>
          <target state="translated">GEEResults.plot_isotropic_dependence()</target>
        </trans-unit>
        <trans-unit id="e3225774922f5feda03e0aea7e40f23e840eab1e" translate="yes" xml:space="preserve">
          <source>GEEResults.plot_partial_residuals()</source>
          <target state="translated">GEEResults.plot_partial_residuals()</target>
        </trans-unit>
        <trans-unit id="dce05dfb5f2ef581e9296f47843cdc5823c0542a" translate="yes" xml:space="preserve">
          <source>GEEResults.predict()</source>
          <target state="translated">GEEResults.predict()</target>
        </trans-unit>
        <trans-unit id="2bab1b3e0dbf6a73dc2b09351cacc5564a66afb7" translate="yes" xml:space="preserve">
          <source>GEEResults.pvalues()</source>
          <target state="translated">GEEResults.pvalues()</target>
        </trans-unit>
        <trans-unit id="0b3d7c51ee247f11bce107d7df2cb9bc97da2efb" translate="yes" xml:space="preserve">
          <source>GEEResults.remove_data()</source>
          <target state="translated">GEEResults.remove_data()</target>
        </trans-unit>
        <trans-unit id="5fdd04f83fe6698847e0eadfc3d4c0af16e8f0a0" translate="yes" xml:space="preserve">
          <source>GEEResults.resid()</source>
          <target state="translated">GEEResults.resid()</target>
        </trans-unit>
        <trans-unit id="4d149ce8b317fdd6f48af3bb1bbceec23a7c3a68" translate="yes" xml:space="preserve">
          <source>GEEResults.resid_anscombe()</source>
          <target state="translated">GEEResults.resid_anscombe()</target>
        </trans-unit>
        <trans-unit id="c6bb35763f7116ab4894aa2a91f4c016fd8ee628" translate="yes" xml:space="preserve">
          <source>GEEResults.resid_centered()</source>
          <target state="translated">GEEResults.resid_centered()</target>
        </trans-unit>
        <trans-unit id="2da3905b3c26b9e329c884608f1c7dc1d0abb0a3" translate="yes" xml:space="preserve">
          <source>GEEResults.resid_centered_split()</source>
          <target state="translated">GEEResults.resid_centered_split()</target>
        </trans-unit>
        <trans-unit id="e7fe298210217f9bd58d6128fa173f07919461e6" translate="yes" xml:space="preserve">
          <source>GEEResults.resid_deviance()</source>
          <target state="translated">GEEResults.resid_deviance()</target>
        </trans-unit>
        <trans-unit id="ab37576f11383bca8e7c5c01d6934ba6acfc5e98" translate="yes" xml:space="preserve">
          <source>GEEResults.resid_pearson()</source>
          <target state="translated">GEEResults.resid_pearson()</target>
        </trans-unit>
        <trans-unit id="f26c05b3e93033cc4e85785d0819b850eae6e7cf" translate="yes" xml:space="preserve">
          <source>GEEResults.resid_response()</source>
          <target state="translated">GEEResults.resid_response()</target>
        </trans-unit>
        <trans-unit id="711de1312eec3a5da46e06258fef481b8998d2bd" translate="yes" xml:space="preserve">
          <source>GEEResults.resid_split()</source>
          <target state="translated">GEEResults.resid_split()</target>
        </trans-unit>
        <trans-unit id="ef315f455148531574a63b89c57d9e83ecc60929" translate="yes" xml:space="preserve">
          <source>GEEResults.resid_working()</source>
          <target state="translated">GEEResults.resid_working()</target>
        </trans-unit>
        <trans-unit id="8a2096e2fd69550e703b9fd494e47aa70ea7c70b" translate="yes" xml:space="preserve">
          <source>GEEResults.save()</source>
          <target state="translated">GEEResults.save()</target>
        </trans-unit>
        <trans-unit id="7da42ec7d1656dc181df396418e8c9c9a90e5cdb" translate="yes" xml:space="preserve">
          <source>GEEResults.sensitivity_params()</source>
          <target state="translated">GEEResults.sensitivity_params()</target>
        </trans-unit>
        <trans-unit id="0fbdd54c8854e6af7b352c7a2d3c644958c35f21" translate="yes" xml:space="preserve">
          <source>GEEResults.split_centered_resid()</source>
          <target state="translated">GEEResults.split_centered_resid()</target>
        </trans-unit>
        <trans-unit id="4d484a67fb8a0b65d7dbe4483d8a1fc801621e36" translate="yes" xml:space="preserve">
          <source>GEEResults.split_resid()</source>
          <target state="translated">GEEResults.split_resid()</target>
        </trans-unit>
        <trans-unit id="55dd0ad5b83921523e266ec8bc8cdd3b9c9c9346" translate="yes" xml:space="preserve">
          <source>GEEResults.standard_errors()</source>
          <target state="translated">GEEResults.standard_errors()</target>
        </trans-unit>
        <trans-unit id="624fd9fae3051ad70d601af57c6af4d997ff02cf" translate="yes" xml:space="preserve">
          <source>GEEResults.summary()</source>
          <target state="translated">GEEResults.summary()</target>
        </trans-unit>
        <trans-unit id="7ff71de0cb64f8a5c5e80d113fbd702792c97b96" translate="yes" xml:space="preserve">
          <source>GEEResults.t_test()</source>
          <target state="translated">GEEResults.t_test()</target>
        </trans-unit>
        <trans-unit id="853476b9a4f94ba35375395499fa7baadf142629" translate="yes" xml:space="preserve">
          <source>GEEResults.t_test_pairwise()</source>
          <target state="translated">GEEResults.t_test_pairwise()</target>
        </trans-unit>
        <trans-unit id="3db3276c6c7ba420832f25361fc54a8165a0ce7c" translate="yes" xml:space="preserve">
          <source>GEEResults.tvalues()</source>
          <target state="translated">GEEResults.tvalues()</target>
        </trans-unit>
        <trans-unit id="2758baa6eeb7a797d82d3c6bacf1661c8953dd24" translate="yes" xml:space="preserve">
          <source>GEEResults.wald_test()</source>
          <target state="translated">GEEResults.wald_test()</target>
        </trans-unit>
        <trans-unit id="42fc10302cc969910fa97ce7229489dd78ee858d" translate="yes" xml:space="preserve">
          <source>GEEResults.wald_test_terms()</source>
          <target state="translated">GEEResults.wald_test_terms()</target>
        </trans-unit>
        <trans-unit id="956369183eb0a1e9cb25f2777446b4967e0bf080" translate="yes" xml:space="preserve">
          <source>GLM</source>
          <target state="translated">GLM</target>
        </trans-unit>
        <trans-unit id="2b0220dae931973f90925fadaf0cd84849282994" translate="yes" xml:space="preserve">
          <source>GLM inherits from statsmodels.base.model.LikelihoodModel</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ba15bed486d11ce74f8c1d999a702dca710ee52" translate="yes" xml:space="preserve">
          <source>GLM.estimate_scale()</source>
          <target state="translated">GLM.estimate_scale()</target>
        </trans-unit>
        <trans-unit id="d72d86d1990735428459f7afacf00a0664fc023d" translate="yes" xml:space="preserve">
          <source>GLM.estimate_tweedie_power()</source>
          <target state="translated">GLM.estimate_tweedie_power()</target>
        </trans-unit>
        <trans-unit id="03e5be134ca0770bd69bb6df33dd26ccecbf7bc3" translate="yes" xml:space="preserve">
          <source>GLM.fit()</source>
          <target state="translated">GLM.fit()</target>
        </trans-unit>
        <trans-unit id="e042e5ac1683153156258cd6d84d4483bbb6a1dc" translate="yes" xml:space="preserve">
          <source>GLM.fit_constrained()</source>
          <target state="translated">GLM.fit_constrained()</target>
        </trans-unit>
        <trans-unit id="e4aefbb9367fffb947911a2638e194cb0d12e9cc" translate="yes" xml:space="preserve">
          <source>GLM.fit_regularized()</source>
          <target state="translated">GLM.fit_regularized()</target>
        </trans-unit>
        <trans-unit id="97f85ffa80b00ea0dbf1344b2622c6ae790524cd" translate="yes" xml:space="preserve">
          <source>GLM.from_formula()</source>
          <target state="translated">GLM.from_formula()</target>
        </trans-unit>
        <trans-unit id="e217bae497520dec1c38f701048361bb66430de5" translate="yes" xml:space="preserve">
          <source>GLM.get_distribution()</source>
          <target state="translated">GLM.get_distribution()</target>
        </trans-unit>
        <trans-unit id="cf3c107cc6946d1694e39c80459c04756e2f9133" translate="yes" xml:space="preserve">
          <source>GLM.hessian()</source>
          <target state="translated">GLM.hessian()</target>
        </trans-unit>
        <trans-unit id="3de8d23dfe284bac2fab55226c5301ebbe4a2d4b" translate="yes" xml:space="preserve">
          <source>GLM.hessian_factor()</source>
          <target state="translated">GLM.hessian_factor()</target>
        </trans-unit>
        <trans-unit id="561b643994967791cda0d5bdee7ee3f0d6598c83" translate="yes" xml:space="preserve">
          <source>GLM.information()</source>
          <target state="translated">GLM.information()</target>
        </trans-unit>
        <trans-unit id="4870015ba0e6d91152618be46a64f9197b034c79" translate="yes" xml:space="preserve">
          <source>GLM.initialize()</source>
          <target state="translated">GLM.initialize()</target>
        </trans-unit>
        <trans-unit id="e9c693246b43eb98afc54c5ec215b70530c5128d" translate="yes" xml:space="preserve">
          <source>GLM.loglike()</source>
          <target state="translated">GLM.loglike()</target>
        </trans-unit>
        <trans-unit id="2b33cde5021a591d44de5b5999a930b04edfa0c1" translate="yes" xml:space="preserve">
          <source>GLM.loglike_mu()</source>
          <target state="translated">GLM.loglike_mu()</target>
        </trans-unit>
        <trans-unit id="58a09c4eebaf9655be09e6d38e0cb4e9aa602936" translate="yes" xml:space="preserve">
          <source>GLM.predict()</source>
          <target state="translated">GLM.predict()</target>
        </trans-unit>
        <trans-unit id="a9a390d9701bea5e7aaf7714659252d0f42452d3" translate="yes" xml:space="preserve">
          <source>GLM.score()</source>
          <target state="translated">GLM.score()</target>
        </trans-unit>
        <trans-unit id="74636623136b7ed62bba80d596a25c6ed27e05b4" translate="yes" xml:space="preserve">
          <source>GLM.score_factor()</source>
          <target state="translated">GLM.score_factor()</target>
        </trans-unit>
        <trans-unit id="22f50b92418643d70a3ae9d7fea70f3e472929c1" translate="yes" xml:space="preserve">
          <source>GLM.score_obs()</source>
          <target state="translated">GLM.score_obs()</target>
        </trans-unit>
        <trans-unit id="a44ca1afc58ab139a54974c1dbaca70b1e3d66c1" translate="yes" xml:space="preserve">
          <source>GLM.score_test()</source>
          <target state="translated">GLM.score_test()</target>
        </trans-unit>
        <trans-unit id="f0582927c3bf511139bc54aab092dfc288c93d6a" translate="yes" xml:space="preserve">
          <source>GLM: Binomial response data</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26f044f47619510b310c38ecfd25b012efd13d65" translate="yes" xml:space="preserve">
          <source>GLM: Gamma for proportional count response</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56f2a82abd791448129d673ed831af560d523efa" translate="yes" xml:space="preserve">
          <source>GLM: Gaussian distribution with a noncanonical link</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1cb51d300488978f32e058c175e6591f1e803069" translate="yes" xml:space="preserve">
          <source>GLMResults inherits from statsmodels.LikelihoodModelResults</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd784db7e43eb621a39453501c337c83a66e7869" translate="yes" xml:space="preserve">
          <source>GLMResults.aic()</source>
          <target state="translated">GLMResults.aic()</target>
        </trans-unit>
        <trans-unit id="c7b83fe2ac252f4091929506886f3b8e90e0913a" translate="yes" xml:space="preserve">
          <source>GLMResults.bic()</source>
          <target state="translated">GLMResults.bic()</target>
        </trans-unit>
        <trans-unit id="2bf51685b3042f150ef4f0e1a16e6d4d8a6a925f" translate="yes" xml:space="preserve">
          <source>GLMResults.bse()</source>
          <target state="translated">GLMResults.bse()</target>
        </trans-unit>
        <trans-unit id="dcad747acfa8073749043c62eb14dd1ede5dcac1" translate="yes" xml:space="preserve">
          <source>GLMResults.conf_int()</source>
          <target state="translated">GLMResults.conf_int()</target>
        </trans-unit>
        <trans-unit id="2744a4d5cc0fb1376ceb39f258a69c8fc3f5da7b" translate="yes" xml:space="preserve">
          <source>GLMResults.cov_params()</source>
          <target state="translated">GLMResults.cov_params()</target>
        </trans-unit>
        <trans-unit id="25baaa5d63dee8915f5283477bc32d4d94e0e34b" translate="yes" xml:space="preserve">
          <source>GLMResults.deviance()</source>
          <target state="translated">GLMResults.deviance()</target>
        </trans-unit>
        <trans-unit id="e92083dfcef2fd91fc3c05ae2cf03f9c35a5b2bc" translate="yes" xml:space="preserve">
          <source>GLMResults.f_test()</source>
          <target state="translated">GLMResults.f_test()</target>
        </trans-unit>
        <trans-unit id="635bd9a8d8bf8488072202c66edf838d293033bc" translate="yes" xml:space="preserve">
          <source>GLMResults.fittedvalues()</source>
          <target state="translated">GLMResults.fittedvalues()</target>
        </trans-unit>
        <trans-unit id="e6c2a19094b526c790990c621b67c7778a3ef6c5" translate="yes" xml:space="preserve">
          <source>GLMResults.get_prediction()</source>
          <target state="translated">GLMResults.get_prediction()</target>
        </trans-unit>
        <trans-unit id="ba8f69682341e0319fe5299c09a06ff36c9cf4be" translate="yes" xml:space="preserve">
          <source>GLMResults.initialize()</source>
          <target state="translated">GLMResults.initialize()</target>
        </trans-unit>
        <trans-unit id="f574d93b71e64d8a51bca466eab77383154dc44e" translate="yes" xml:space="preserve">
          <source>GLMResults.llf()</source>
          <target state="translated">GLMResults.llf()</target>
        </trans-unit>
        <trans-unit id="edadbd679e59703543ac9adeba1d8645b19b5f3b" translate="yes" xml:space="preserve">
          <source>GLMResults.llnull()</source>
          <target state="translated">GLMResults.llnull()</target>
        </trans-unit>
        <trans-unit id="4e2898cd7f20226b0ae863e29c328cb17b6d5ceb" translate="yes" xml:space="preserve">
          <source>GLMResults.load()</source>
          <target state="translated">GLMResults.load()</target>
        </trans-unit>
        <trans-unit id="962ce26f8524dbdeecfcf88f1b68f243ebb60c64" translate="yes" xml:space="preserve">
          <source>GLMResults.mu()</source>
          <target state="translated">GLMResults.mu()</target>
        </trans-unit>
        <trans-unit id="12ea1953df8066edf7c3d70fe424fd429ca90b5f" translate="yes" xml:space="preserve">
          <source>GLMResults.normalized_cov_params()</source>
          <target state="translated">GLMResults.normalized_cov_params()</target>
        </trans-unit>
        <trans-unit id="d6ca884dcc89412df3fbf651d94f7a02fa86f6a4" translate="yes" xml:space="preserve">
          <source>GLMResults.null()</source>
          <target state="translated">GLMResults.null()</target>
        </trans-unit>
        <trans-unit id="2118cac7a63f85784732a89d5f4a5f7a56155dc1" translate="yes" xml:space="preserve">
          <source>GLMResults.null_deviance()</source>
          <target state="translated">GLMResults.null_deviance()</target>
        </trans-unit>
        <trans-unit id="da3b561e21d8d6f4b3f724c46e4a8ca58760ab7f" translate="yes" xml:space="preserve">
          <source>GLMResults.pearson_chi2()</source>
          <target state="translated">GLMResults.pearson_chi2()</target>
        </trans-unit>
        <trans-unit id="f38e6269d09a3e1b36c2a2978f86f601d23304d5" translate="yes" xml:space="preserve">
          <source>GLMResults.plot_added_variable()</source>
          <target state="translated">GLMResults.plot_added_variable()</target>
        </trans-unit>
        <trans-unit id="5a4a4a90e0521a98bda25050833a4e6eb0d14734" translate="yes" xml:space="preserve">
          <source>GLMResults.plot_ceres_residuals()</source>
          <target state="translated">GLMResults.plot_ceres_residuals()</target>
        </trans-unit>
        <trans-unit id="db558e832635aaccb7e5969f098ff8faba72b163" translate="yes" xml:space="preserve">
          <source>GLMResults.plot_partial_residuals()</source>
          <target state="translated">GLMResults.plot_partial_residuals()</target>
        </trans-unit>
        <trans-unit id="53b90219644fea0aa0b15064bcd8420f165d22b0" translate="yes" xml:space="preserve">
          <source>GLMResults.predict()</source>
          <target state="translated">GLMResults.predict()</target>
        </trans-unit>
        <trans-unit id="4e5cf0443bd1c7f433ffe83855a32dd0b24857c1" translate="yes" xml:space="preserve">
          <source>GLMResults.pvalues()</source>
          <target state="translated">GLMResults.pvalues()</target>
        </trans-unit>
        <trans-unit id="1641dad5f2af9ed10b77c3ed3db3fc5854744a03" translate="yes" xml:space="preserve">
          <source>GLMResults.remove_data()</source>
          <target state="translated">GLMResults.remove_data()</target>
        </trans-unit>
        <trans-unit id="af1ac90f424840db24a7793cea4518454174c5bd" translate="yes" xml:space="preserve">
          <source>GLMResults.resid_anscombe()</source>
          <target state="translated">GLMResults.resid_anscombe()</target>
        </trans-unit>
        <trans-unit id="4fa4b243b846d06b11532f50c8ce4b52aba97351" translate="yes" xml:space="preserve">
          <source>GLMResults.resid_anscombe_scaled()</source>
          <target state="translated">GLMResults.resid_anscombe_scaled()</target>
        </trans-unit>
        <trans-unit id="f55adfd0943bed20354d8ce77365a2616ee244c7" translate="yes" xml:space="preserve">
          <source>GLMResults.resid_anscombe_unscaled()</source>
          <target state="translated">GLMResults.resid_anscombe_unscaled()</target>
        </trans-unit>
        <trans-unit id="987729d64f04fe865e885a29665e1db7bf6c98e7" translate="yes" xml:space="preserve">
          <source>GLMResults.resid_deviance()</source>
          <target state="translated">GLMResults.resid_deviance()</target>
        </trans-unit>
        <trans-unit id="2c78ee03c65fdd023313639de710402a138a26ac" translate="yes" xml:space="preserve">
          <source>GLMResults.resid_pearson()</source>
          <target state="translated">GLMResults.resid_pearson()</target>
        </trans-unit>
        <trans-unit id="2f9f2cde3a19576b0649f6111b3ffde21067dba1" translate="yes" xml:space="preserve">
          <source>GLMResults.resid_response()</source>
          <target state="translated">GLMResults.resid_response()</target>
        </trans-unit>
        <trans-unit id="9ea193800c782ca637acb9f72dddfc98a97d7d01" translate="yes" xml:space="preserve">
          <source>GLMResults.resid_working()</source>
          <target state="translated">GLMResults.resid_working()</target>
        </trans-unit>
        <trans-unit id="fc5863f59d3b9a0453212678a3537f0848a866b1" translate="yes" xml:space="preserve">
          <source>GLMResults.save()</source>
          <target state="translated">GLMResults.save()</target>
        </trans-unit>
        <trans-unit id="ba145abf105d694780ef757041ea72de3cef5512" translate="yes" xml:space="preserve">
          <source>GLMResults.summary()</source>
          <target state="translated">GLMResults.summary()</target>
        </trans-unit>
        <trans-unit id="b1ccf695a080b3c71f0ec4b180c81bacb20d6cb1" translate="yes" xml:space="preserve">
          <source>GLMResults.summary2()</source>
          <target state="translated">GLMResults.summary2()</target>
        </trans-unit>
        <trans-unit id="773ceed76af7981909271d031f992b902650854a" translate="yes" xml:space="preserve">
          <source>GLMResults.t_test()</source>
          <target state="translated">GLMResults.t_test()</target>
        </trans-unit>
        <trans-unit id="4aeaf195beb68c7fdca596321314c8ba5b7806ce" translate="yes" xml:space="preserve">
          <source>GLMResults.t_test_pairwise()</source>
          <target state="translated">GLMResults.t_test_pairwise()</target>
        </trans-unit>
        <trans-unit id="6f99b8506b17e84724ab4d84242a2088c06dab12" translate="yes" xml:space="preserve">
          <source>GLMResults.tvalues()</source>
          <target state="translated">GLMResults.tvalues()</target>
        </trans-unit>
        <trans-unit id="19a97aad840c95a97aff4c94e86cf1d2eaab2eca" translate="yes" xml:space="preserve">
          <source>GLMResults.wald_test()</source>
          <target state="translated">GLMResults.wald_test()</target>
        </trans-unit>
        <trans-unit id="85dd000666ea8d5938c9ed87d4e8adc11ff4dcac" translate="yes" xml:space="preserve">
          <source>GLMResults.wald_test_terms()</source>
          <target state="translated">GLMResults.wald_test_terms()</target>
        </trans-unit>
        <trans-unit id="7dc74a44a08ceffd931fcb77cd7e7e4c007d7072" translate="yes" xml:space="preserve">
          <source>GLS</source>
          <target state="translated">GLS</target>
        </trans-unit>
        <trans-unit id="9a9502c37f31bef36da44a77c85e6c3865432b9b" translate="yes" xml:space="preserve">
          <source>GLS : generalized least squares for arbitrary covariance \(\Sigma\)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56bf22baa184015635d1efee682cb84051209df7" translate="yes" xml:space="preserve">
          <source>GLS is the superclass of the other regression classes except for RecursiveLS.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c94750a9562001306132d11e7a251d70ff6d7c88" translate="yes" xml:space="preserve">
          <source>GLS whiten method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3bd92509f7b31ca38b57e8acfa056db1a75724cf" translate="yes" xml:space="preserve">
          <source>GLS.fit()</source>
          <target state="translated">GLS.fit()</target>
        </trans-unit>
        <trans-unit id="ac101987d8ad74a9cdf211cfabf149e25a384602" translate="yes" xml:space="preserve">
          <source>GLS.fit_regularized()</source>
          <target state="translated">GLS.fit_regularized()</target>
        </trans-unit>
        <trans-unit id="a6737060f1908875607eeb0e6d0e6f6e3db4b36a" translate="yes" xml:space="preserve">
          <source>GLS.from_formula()</source>
          <target state="translated">GLS.from_formula()</target>
        </trans-unit>
        <trans-unit id="27ddf75176328d92394db74e1712e6ac5676985c" translate="yes" xml:space="preserve">
          <source>GLS.get_distribution()</source>
          <target state="translated">GLS.get_distribution()</target>
        </trans-unit>
        <trans-unit id="3e019bf85d7aaa1fa2ee0c3cf7496a6441a21d19" translate="yes" xml:space="preserve">
          <source>GLS.hessian()</source>
          <target state="translated">GLS.hessian()</target>
        </trans-unit>
        <trans-unit id="89abc7ad93251095b024da20430e4629cb8dfb25" translate="yes" xml:space="preserve">
          <source>GLS.hessian_factor()</source>
          <target state="translated">GLS.hessian_factor()</target>
        </trans-unit>
        <trans-unit id="028f5f6a65d8c996c61c58d93ec197a92bc46e61" translate="yes" xml:space="preserve">
          <source>GLS.information()</source>
          <target state="translated">GLS.information()</target>
        </trans-unit>
        <trans-unit id="176f04054458b41fe3d93e5b511e84b820695d5b" translate="yes" xml:space="preserve">
          <source>GLS.initialize()</source>
          <target state="translated">GLS.initialize()</target>
        </trans-unit>
        <trans-unit id="24dbe4896a401a74810b0043a0da7d6d2fe02545" translate="yes" xml:space="preserve">
          <source>GLS.loglike()</source>
          <target state="translated">GLS.loglike()</target>
        </trans-unit>
        <trans-unit id="7bb5bb50ed88798164ab33f8c894d4f415e74532" translate="yes" xml:space="preserve">
          <source>GLS.predict()</source>
          <target state="translated">GLS.predict()</target>
        </trans-unit>
        <trans-unit id="11d5c10cba3279cfe4d74dce4db9682ce6996e22" translate="yes" xml:space="preserve">
          <source>GLS.score()</source>
          <target state="translated">GLS.score()</target>
        </trans-unit>
        <trans-unit id="175b59841ffb596acad427e9827828347952c50f" translate="yes" xml:space="preserve">
          <source>GLS.whiten()</source>
          <target state="translated">GLS.whiten()</target>
        </trans-unit>
        <trans-unit id="80d1afb68731d4e21e26cb780614090fbaf1e3e7" translate="yes" xml:space="preserve">
          <source>GLSAR : feasible generalized least squares with autocorrelated AR(p) errors \(\Sigma=\Sigma\left(\rho\right)\)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d43a9e705036c1bc28f3059e29fed0ebb12999f" translate="yes" xml:space="preserve">
          <source>GLSAR is considered to be experimental. The linear autoregressive process of order p&amp;ndash;AR(p)&amp;ndash;is defined as: TODO</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35d22932643af88f747048d1fa9a79918c995f85" translate="yes" xml:space="preserve">
          <source>GLSAR.fit()</source>
          <target state="translated">GLSAR.fit()</target>
        </trans-unit>
        <trans-unit id="4c09662c2bb48d6c5381d8788dc6bf72cf7a4d20" translate="yes" xml:space="preserve">
          <source>GLSAR.fit_regularized()</source>
          <target state="translated">GLSAR.fit_regularized()</target>
        </trans-unit>
        <trans-unit id="97e6068da39c605189231efffd995974fa01e83f" translate="yes" xml:space="preserve">
          <source>GLSAR.from_formula()</source>
          <target state="translated">GLSAR.from_formula()</target>
        </trans-unit>
        <trans-unit id="3bce1b96583873cb65534a34dc1395bda937b4f9" translate="yes" xml:space="preserve">
          <source>GLSAR.get_distribution()</source>
          <target state="translated">GLSAR.get_distribution()</target>
        </trans-unit>
        <trans-unit id="a9c776da1d80d8d13da192b903eaf9dab3db1ae7" translate="yes" xml:space="preserve">
          <source>GLSAR.hessian()</source>
          <target state="translated">GLSAR.hessian()</target>
        </trans-unit>
        <trans-unit id="2f8804fe42944e291c6847fc8ba04e5b40a4555e" translate="yes" xml:space="preserve">
          <source>GLSAR.hessian_factor()</source>
          <target state="translated">GLSAR.hessian_factor()</target>
        </trans-unit>
        <trans-unit id="14343698658fef812c81a4dd026c1bdf557206b0" translate="yes" xml:space="preserve">
          <source>GLSAR.information()</source>
          <target state="translated">GLSAR.information()</target>
        </trans-unit>
        <trans-unit id="13f3cb0d7361f0f1d8a08b3c4ff7abd98ed1ecff" translate="yes" xml:space="preserve">
          <source>GLSAR.initialize()</source>
          <target state="translated">GLSAR.initialize()</target>
        </trans-unit>
        <trans-unit id="e3697579c26db5b2212d49f10357834e11cf6a44" translate="yes" xml:space="preserve">
          <source>GLSAR.iterative_fit()</source>
          <target state="translated">GLSAR.iterative_fit()</target>
        </trans-unit>
        <trans-unit id="a784c37aa8e874503ab516396f9a7f2dd113a460" translate="yes" xml:space="preserve">
          <source>GLSAR.loglike()</source>
          <target state="translated">GLSAR.loglike()</target>
        </trans-unit>
        <trans-unit id="dca7ca0f02695d01688ead44321fcc70f4de30c9" translate="yes" xml:space="preserve">
          <source>GLSAR.predict()</source>
          <target state="translated">GLSAR.predict()</target>
        </trans-unit>
        <trans-unit id="7c81145043ce918c35f43158a52faa4f8c88c402" translate="yes" xml:space="preserve">
          <source>GLSAR.score()</source>
          <target state="translated">GLSAR.score()</target>
        </trans-unit>
        <trans-unit id="d4436c0555b4388bb88d6e192df3e1d25bf48abd" translate="yes" xml:space="preserve">
          <source>GLSAR.whiten()</source>
          <target state="translated">GLSAR.whiten()</target>
        </trans-unit>
        <trans-unit id="3425867da1e8ae102919b56376290dee1bf61a0a" translate="yes" xml:space="preserve">
          <source>GMM.calc_weightmatrix()</source>
          <target state="translated">GMM.calc_weightmatrix()</target>
        </trans-unit>
        <trans-unit id="dd1fb2eda2fd404767612dd330416ff9cf61fadf" translate="yes" xml:space="preserve">
          <source>GMM.fit()</source>
          <target state="translated">GMM.fit()</target>
        </trans-unit>
        <trans-unit id="55169efa77c559c3fdb9851154f9a8454d246aa0" translate="yes" xml:space="preserve">
          <source>GMM.fitgmm()</source>
          <target state="translated">GMM.fitgmm()</target>
        </trans-unit>
        <trans-unit id="8ff38681b7183d8951722ff9e083e819b9421eb0" translate="yes" xml:space="preserve">
          <source>GMM.fitgmm_cu()</source>
          <target state="translated">GMM.fitgmm_cu()</target>
        </trans-unit>
        <trans-unit id="9f5c08b31a147bcdcc24b642496f04112420de93" translate="yes" xml:space="preserve">
          <source>GMM.fititer()</source>
          <target state="translated">GMM.fititer()</target>
        </trans-unit>
        <trans-unit id="aa2c3db4e40a94e0cdb66b3b3743717015fee563" translate="yes" xml:space="preserve">
          <source>GMM.from_formula()</source>
          <target state="translated">GMM.from_formula()</target>
        </trans-unit>
        <trans-unit id="b0f9b82aaca7513f19937bad95ff3a46912cd039" translate="yes" xml:space="preserve">
          <source>GMM.gmmobjective()</source>
          <target state="translated">GMM.gmmobjective()</target>
        </trans-unit>
        <trans-unit id="aa9373c658fba51aa96a204232c5c787360d75a5" translate="yes" xml:space="preserve">
          <source>GMM.gmmobjective_cu()</source>
          <target state="translated">GMM.gmmobjective_cu()</target>
        </trans-unit>
        <trans-unit id="8a2f55116c3652d050c17ca14c8ff1f5ddeb72f2" translate="yes" xml:space="preserve">
          <source>GMM.gradient_momcond()</source>
          <target state="translated">GMM.gradient_momcond()</target>
        </trans-unit>
        <trans-unit id="5ebecd5b64337a4ab7536547aeb0890cbd1017dc" translate="yes" xml:space="preserve">
          <source>GMM.momcond_mean()</source>
          <target state="translated">GMM.momcond_mean()</target>
        </trans-unit>
        <trans-unit id="769337f226d04a58adee99b18f968e34d3a63459" translate="yes" xml:space="preserve">
          <source>GMM.predict()</source>
          <target state="translated">GMM.predict()</target>
        </trans-unit>
        <trans-unit id="f09c409df51f0dd6ae5dfd41331f202e07132cdf" translate="yes" xml:space="preserve">
          <source>GMM.score()</source>
          <target state="translated">GMM.score()</target>
        </trans-unit>
        <trans-unit id="1a1c0d260f4d01cd9db1b58d7812450ecbbe4592" translate="yes" xml:space="preserve">
          <source>GMM.score_cu()</source>
          <target state="translated">GMM.score_cu()</target>
        </trans-unit>
        <trans-unit id="986e9eceac85773fb5c2c3c530d1d658378b7c4a" translate="yes" xml:space="preserve">
          <source>GMM.set_param_names()</source>
          <target state="translated">GMM.set_param_names()</target>
        </trans-unit>
        <trans-unit id="9b7e1d1afc6264ff38f288578283ba2569c7935f" translate="yes" xml:space="preserve">
          <source>GMM.start_weights()</source>
          <target state="translated">GMM.start_weights()</target>
        </trans-unit>
        <trans-unit id="f700547b4fe5b4f6b5798f7496473439f156b384" translate="yes" xml:space="preserve">
          <source>GMMResults.bse()</source>
          <target state="translated">GMMResults.bse()</target>
        </trans-unit>
        <trans-unit id="ae6a84ad151ee4e661c1af0bb5ea7964492a61f2" translate="yes" xml:space="preserve">
          <source>GMMResults.calc_cov_params()</source>
          <target state="translated">GMMResults.calc_cov_params()</target>
        </trans-unit>
        <trans-unit id="e5a3e54343eabb6c0b2687197fd6485dc34d7257" translate="yes" xml:space="preserve">
          <source>GMMResults.compare_j()</source>
          <target state="translated">GMMResults.compare_j()</target>
        </trans-unit>
        <trans-unit id="b1e31cb2a12556df3732be6aaa71330c73d5a283" translate="yes" xml:space="preserve">
          <source>GMMResults.conf_int()</source>
          <target state="translated">GMMResults.conf_int()</target>
        </trans-unit>
        <trans-unit id="3c3d37957a1a3bad0698c325603471788b830a79" translate="yes" xml:space="preserve">
          <source>GMMResults.cov_params()</source>
          <target state="translated">GMMResults.cov_params()</target>
        </trans-unit>
        <trans-unit id="9d6baf53d3529e6ad7f40b40c8778fff09172ba2" translate="yes" xml:space="preserve">
          <source>GMMResults.f_test()</source>
          <target state="translated">GMMResults.f_test()</target>
        </trans-unit>
        <trans-unit id="038c00089c652b9eb6063bed0ff0653bd5550a1b" translate="yes" xml:space="preserve">
          <source>GMMResults.get_bse()</source>
          <target state="translated">GMMResults.get_bse()</target>
        </trans-unit>
        <trans-unit id="077870197fef5673fd2bcb915d6d930aee786386" translate="yes" xml:space="preserve">
          <source>GMMResults.initialize()</source>
          <target state="translated">GMMResults.initialize()</target>
        </trans-unit>
        <trans-unit id="97d2e646f2e4be9d7db08d3d8ef6570c64f6b4b0" translate="yes" xml:space="preserve">
          <source>GMMResults.jtest()</source>
          <target state="translated">GMMResults.jtest()</target>
        </trans-unit>
        <trans-unit id="1fb86b98ce404ccf3ba2e518bf403f573975e933" translate="yes" xml:space="preserve">
          <source>GMMResults.jval()</source>
          <target state="translated">GMMResults.jval()</target>
        </trans-unit>
        <trans-unit id="3c508c428b04df3d78ce74140e6aa1ffbc6fcc60" translate="yes" xml:space="preserve">
          <source>GMMResults.llf()</source>
          <target state="translated">GMMResults.llf()</target>
        </trans-unit>
        <trans-unit id="bc0de682ad50eb37aa7a9a7f59b6737276004b02" translate="yes" xml:space="preserve">
          <source>GMMResults.load()</source>
          <target state="translated">GMMResults.load()</target>
        </trans-unit>
        <trans-unit id="f14066bb03fdfac751959cafc07faa2dc02411d0" translate="yes" xml:space="preserve">
          <source>GMMResults.normalized_cov_params()</source>
          <target state="translated">GMMResults.normalized_cov_params()</target>
        </trans-unit>
        <trans-unit id="cd78716ee3dedea76d9a8fc4d62f14e7aefa4066" translate="yes" xml:space="preserve">
          <source>GMMResults.predict()</source>
          <target state="translated">GMMResults.predict()</target>
        </trans-unit>
        <trans-unit id="58660b5f41b510ca4932e2978347461feb2ec3ea" translate="yes" xml:space="preserve">
          <source>GMMResults.pvalues()</source>
          <target state="translated">GMMResults.pvalues()</target>
        </trans-unit>
        <trans-unit id="d4e61d8d49d9c4a08fe6654e0c22de37062f6508" translate="yes" xml:space="preserve">
          <source>GMMResults.q()</source>
          <target state="translated">GMMResults.q()</target>
        </trans-unit>
        <trans-unit id="36f0428e5f3f17dfd7cf657bbecadd4e9596b3cb" translate="yes" xml:space="preserve">
          <source>GMMResults.remove_data()</source>
          <target state="translated">GMMResults.remove_data()</target>
        </trans-unit>
        <trans-unit id="0b34ea3c47f63c9f829c4e8f1bbe67de04fda716" translate="yes" xml:space="preserve">
          <source>GMMResults.save()</source>
          <target state="translated">GMMResults.save()</target>
        </trans-unit>
        <trans-unit id="492ce1ecf746866fc398334f8b08a1248d2d655d" translate="yes" xml:space="preserve">
          <source>GMMResults.summary()</source>
          <target state="translated">GMMResults.summary()</target>
        </trans-unit>
        <trans-unit id="d5d95e63d13f78639ae91a2f4589e375649d92d1" translate="yes" xml:space="preserve">
          <source>GMMResults.t_test()</source>
          <target state="translated">GMMResults.t_test()</target>
        </trans-unit>
        <trans-unit id="37c3deaec4e48eedbf5bcded606ea245b380f8d4" translate="yes" xml:space="preserve">
          <source>GMMResults.t_test_pairwise()</source>
          <target state="translated">GMMResults.t_test_pairwise()</target>
        </trans-unit>
        <trans-unit id="071f252bb131a2351d47a6740fd24f54be6d24f4" translate="yes" xml:space="preserve">
          <source>GMMResults.tvalues()</source>
          <target state="translated">GMMResults.tvalues()</target>
        </trans-unit>
        <trans-unit id="6e2d2110f2bc240f5b7f63b0533464f8df754279" translate="yes" xml:space="preserve">
          <source>GMMResults.wald_test()</source>
          <target state="translated">GMMResults.wald_test()</target>
        </trans-unit>
        <trans-unit id="926f0164eb90570630f5a05c6d9829adbee3671c" translate="yes" xml:space="preserve">
          <source>GMMResults.wald_test_terms()</source>
          <target state="translated">GMMResults.wald_test_terms()</target>
        </trans-unit>
        <trans-unit id="a4030789047e03b1fb516f107da0926b4b882deb" translate="yes" xml:space="preserve">
          <source>Gamma \(N(\mu,\nu)\)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09acd49f513ecba9d57e733564d396d7cef548db" translate="yes" xml:space="preserve">
          <source>Gamma exponential family distribution.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9cfa12c81c111858c6937483768dc7cff9437cb0" translate="yes" xml:space="preserve">
          <source>Gamma.deviance()</source>
          <target state="translated">Gamma.deviance()</target>
        </trans-unit>
        <trans-unit id="2182a1d8f025b595b8a833c85c806b8c069a3a4c" translate="yes" xml:space="preserve">
          <source>Gamma.fitted()</source>
          <target state="translated">Gamma.fitted()</target>
        </trans-unit>
        <trans-unit id="9c40dbac5d3883807ae409b6eacdc2c032345fe2" translate="yes" xml:space="preserve">
          <source>Gamma.loglike()</source>
          <target state="translated">Gamma.loglike()</target>
        </trans-unit>
        <trans-unit id="e8dffdede3ce72dccfba6e03c56e2fb9cecf9fbd" translate="yes" xml:space="preserve">
          <source>Gamma.loglike_obs()</source>
          <target state="translated">Gamma.loglike_obs()</target>
        </trans-unit>
        <trans-unit id="5e82d503a117a7b930dc2d46f68bf7be76b0e02d" translate="yes" xml:space="preserve">
          <source>Gamma.predict()</source>
          <target state="translated">Gamma.predict()</target>
        </trans-unit>
        <trans-unit id="9d0adf900ec6712fbe0af655bc4f73e58447292c" translate="yes" xml:space="preserve">
          <source>Gamma.resid_anscombe()</source>
          <target state="translated">Gamma.resid_anscombe()</target>
        </trans-unit>
        <trans-unit id="2c458e3d3374d6eb103b81ac3aded6985824c6bf" translate="yes" xml:space="preserve">
          <source>Gamma.resid_dev()</source>
          <target state="translated">Gamma.resid_dev()</target>
        </trans-unit>
        <trans-unit id="ab5d4b37f2365e4725aededc2f5da1ecd6219859" translate="yes" xml:space="preserve">
          <source>Gamma.starting_mu()</source>
          <target state="translated">Gamma.starting_mu()</target>
        </trans-unit>
        <trans-unit id="1812b7b5e6fa2aebbd05bbc2daf861ad5c6f2c62" translate="yes" xml:space="preserve">
          <source>Gamma.weights()</source>
          <target state="translated">Gamma.weights()</target>
        </trans-unit>
        <trans-unit id="c33f839a0c79eeac5ac1bc0065822e74476ff402" translate="yes" xml:space="preserve">
          <source>Gaussian</source>
          <target state="translated">Gaussian</target>
        </trans-unit>
        <trans-unit id="7053a133cedf29730ea45f321af06f421ff1576f" translate="yes" xml:space="preserve">
          <source>Gaussian exponential family distribution.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b6c3b63f58131ed0682fe2e85e14a4a8f3ec753" translate="yes" xml:space="preserve">
          <source>Gaussian.deviance()</source>
          <target state="translated">Gaussian.deviance()</target>
        </trans-unit>
        <trans-unit id="852411494cc09d5a7a10ff5e6e284b1f31b1f25a" translate="yes" xml:space="preserve">
          <source>Gaussian.fitted()</source>
          <target state="translated">Gaussian.fitted()</target>
        </trans-unit>
        <trans-unit id="2d8b00b486112b06c0c2d594c4fd5baa752dd011" translate="yes" xml:space="preserve">
          <source>Gaussian.loglike()</source>
          <target state="translated">Gaussian.loglike()</target>
        </trans-unit>
        <trans-unit id="aa6b8bce7a5e79c42d2fe209c605d185c209d59e" translate="yes" xml:space="preserve">
          <source>Gaussian.loglike_obs()</source>
          <target state="translated">Gaussian.loglike_obs()</target>
        </trans-unit>
        <trans-unit id="f6812608811311944f02ce873a04126e233641c0" translate="yes" xml:space="preserve">
          <source>Gaussian.predict()</source>
          <target state="translated">Gaussian.predict()</target>
        </trans-unit>
        <trans-unit id="189ed04e195b979abd55fcf83a34dd1e0a6fe7ea" translate="yes" xml:space="preserve">
          <source>Gaussian.resid_anscombe()</source>
          <target state="translated">Gaussian.resid_anscombe()</target>
        </trans-unit>
        <trans-unit id="6a0a715fee352f48418c3e68222b761ba7b151c0" translate="yes" xml:space="preserve">
          <source>Gaussian.resid_dev()</source>
          <target state="translated">Gaussian.resid_dev()</target>
        </trans-unit>
        <trans-unit id="a5d8aa697b156916a8efdae7be36512174181ad4" translate="yes" xml:space="preserve">
          <source>Gaussian.starting_mu()</source>
          <target state="translated">Gaussian.starting_mu()</target>
        </trans-unit>
        <trans-unit id="302622c321ebc7a62b7e1d8d6e7d86779a425c5a" translate="yes" xml:space="preserve">
          <source>Gaussian.weights()</source>
          <target state="translated">Gaussian.weights()</target>
        </trans-unit>
        <trans-unit id="919906a1d9de86f2e37e4bf7a173fdf3dc92ca50" translate="yes" xml:space="preserve">
          <source>Gaussian/Normal \(N(\mu,\sigma^2)\)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23e3b7271a3807de87922d50e29c021eb0748b8b" translate="yes" xml:space="preserve">
          <source>Genarlized Linear Model Example</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9df868dc95c2799427b1742a91ed0abd4469203" translate="yes" xml:space="preserve">
          <source>General reference for regression models:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2672eb4dac0440844556fb66fa39b9edb2d2041" translate="yes" xml:space="preserve">
          <source>General:</source>
          <target state="translated">General:</target>
        </trans-unit>
        <trans-unit id="79d10d4044839a36560490eb61f1e2b42f5c2dbd" translate="yes" xml:space="preserve">
          <source>Generalized Estimating Equations</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dbd11db620a41c9760857067d781c2fa8f0a5774" translate="yes" xml:space="preserve">
          <source>Generalized Estimating Equations estimate generalized linear models for panel, cluster or repeated measures data when the observations are possibly correlated withing a cluster but uncorrelated across clusters. It supports estimation of the same one-parameter exponential families as Generalized Linear models (&lt;code&gt;GLM&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0c4e1b57d615794235202dbe46de43a297238a8" translate="yes" xml:space="preserve">
          <source>Generalized Least Squares</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd88a3fd38244ec39b6c849ea83d6c9085be48e3" translate="yes" xml:space="preserve">
          <source>Generalized Linear Mixed Effects (GLIMMIX) models are generalized linear models with random effects in the linear predictors. Statsmodels currently supports estimation of binomial and Poisson GLIMMIX models using two Bayesian methods: the Laplace approximation to the posterior, and a variational Bayes approximation to the posterior. Both methods provide point estimates (posterior means) and assessments of uncertainty (posterior standard deviation).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="423b638517bb21b4cb90f83e5d8cb168fca9eb50" translate="yes" xml:space="preserve">
          <source>Generalized Linear Mixed Effects Models</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dbc6022e63f972fa81ff0eec6fb96210381822e0" translate="yes" xml:space="preserve">
          <source>Generalized Linear Model Regression Results</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b17d9222a12b9513aac695dd37d7bdc64c218d77" translate="yes" xml:space="preserve">
          <source>Generalized Linear Models</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c24c2bca7a462d651f0c17966bff5c3b3641c1d1" translate="yes" xml:space="preserve">
          <source>Generalized Linear Models (Formula)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5716020548fcc39441f6ec134cf4d9b8eddcf701" translate="yes" xml:space="preserve">
          <source>Generalized Linear Models Overview</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d4f2651f979cf67547588614944e0f21a037b6a" translate="yes" xml:space="preserve">
          <source>Generalized Linear Models class</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e73f2589fb2848b6e2415bb0fee02612a6bd9938" translate="yes" xml:space="preserve">
          <source>Generalized Method of Moments</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6499a9e61f3a12cc77b24214e3168e1b4a7faf9a" translate="yes" xml:space="preserve">
          <source>Generalized Method of Moments gmm</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="910ff179380b44380f3b42d00f01e5e5edb037f7" translate="yes" xml:space="preserve">
          <source>Generalized Negative Binomial (NB-P) model for count data</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9b857374da2d52cd182cc7b5ae0b56b002cdc4d" translate="yes" xml:space="preserve">
          <source>Generalized Negative Binomial (NB-P) model hessian maxtrix of the log-likelihood</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6214f3446c7f4702b113db1fe4fcdb0a32099ad" translate="yes" xml:space="preserve">
          <source>Generalized Negative Binomial (NB-P) model score (gradient) vector of the log-likelihood</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5099d7fc0abd8047c65a16239174c85c81cde5c0" translate="yes" xml:space="preserve">
          <source>Generalized Negative Binomial (NB-P) model score (gradient) vector of the log-likelihood for each observations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71a4a89a9419a6b7f085c2ace3df3a363ba590e0" translate="yes" xml:space="preserve">
          <source>Generalized Poisson model Hessian matrix of the loglikelihood</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b2ed562c990dfb6e8fc337e1a4c004152947103" translate="yes" xml:space="preserve">
          <source>Generalized Poisson model for count data</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25f60a7fc3d41659604d82d9a9e495f236b44abf" translate="yes" xml:space="preserve">
          <source>Generalized least squares model with a general covariance structure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75aa875afb5de05e99f6fdc1498d204f502db55d" translate="yes" xml:space="preserve">
          <source>Generalized linear models currently supports estimation using the one-parameter exponential families.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="338390a49d71eb942aabb59759f4653abf1a289c" translate="yes" xml:space="preserve">
          <source>Generalized residuals</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90516a620d23440fcc7cf97d7ccdd507472fdb80" translate="yes" xml:space="preserve">
          <source>GeneralizedPoisson.cdf()</source>
          <target state="translated">GeneralizedPoisson.cdf()</target>
        </trans-unit>
        <trans-unit id="752cf12713140903418c533d8e7b32ac6d8a2835" translate="yes" xml:space="preserve">
          <source>GeneralizedPoisson.cov_params_func_l1()</source>
          <target state="translated">GeneralizedPoisson.cov_params_func_l1()</target>
        </trans-unit>
        <trans-unit id="999edc3d680fdbe28eb913e1ac780c669946ba5a" translate="yes" xml:space="preserve">
          <source>GeneralizedPoisson.fit()</source>
          <target state="translated">GeneralizedPoisson.fit()</target>
        </trans-unit>
        <trans-unit id="851062786fd1d5b9a5a9ec7f5f98033263eadfd8" translate="yes" xml:space="preserve">
          <source>GeneralizedPoisson.fit_regularized()</source>
          <target state="translated">GeneralizedPoisson.fit_regularized()</target>
        </trans-unit>
        <trans-unit id="c527ec724712638f9597ca005db1818bf195c992" translate="yes" xml:space="preserve">
          <source>GeneralizedPoisson.from_formula()</source>
          <target state="translated">GeneralizedPoisson.from_formula()</target>
        </trans-unit>
        <trans-unit id="bfc0a5f6aec660851d48ba06efa0c8f223529827" translate="yes" xml:space="preserve">
          <source>GeneralizedPoisson.hessian()</source>
          <target state="translated">GeneralizedPoisson.hessian()</target>
        </trans-unit>
        <trans-unit id="4f34697792c2548b2aab145b8615a14562d647af" translate="yes" xml:space="preserve">
          <source>GeneralizedPoisson.information()</source>
          <target state="translated">GeneralizedPoisson.information()</target>
        </trans-unit>
        <trans-unit id="6d1f3e4c1979fa40ba467ad0c6cbc2716aea4055" translate="yes" xml:space="preserve">
          <source>GeneralizedPoisson.initialize()</source>
          <target state="translated">GeneralizedPoisson.initialize()</target>
        </trans-unit>
        <trans-unit id="fedd86f376817646975e11c1cc04812d1212e5a7" translate="yes" xml:space="preserve">
          <source>GeneralizedPoisson.loglike()</source>
          <target state="translated">GeneralizedPoisson.loglike()</target>
        </trans-unit>
        <trans-unit id="77da062af5bdc5f146ac0a8d13fe739696958498" translate="yes" xml:space="preserve">
          <source>GeneralizedPoisson.loglikeobs()</source>
          <target state="translated">GeneralizedPoisson.loglikeobs()</target>
        </trans-unit>
        <trans-unit id="58a408381bf053aed09f19073bc36169565714ae" translate="yes" xml:space="preserve">
          <source>GeneralizedPoisson.pdf()</source>
          <target state="translated">GeneralizedPoisson.pdf()</target>
        </trans-unit>
        <trans-unit id="22d5fee688f018cd7dd3bc30c1a5c8e06f8aaf6e" translate="yes" xml:space="preserve">
          <source>GeneralizedPoisson.predict()</source>
          <target state="translated">GeneralizedPoisson.predict()</target>
        </trans-unit>
        <trans-unit id="de569f8c4e49530f28406d05bcdbbadc5e52d1c8" translate="yes" xml:space="preserve">
          <source>GeneralizedPoisson.score()</source>
          <target state="translated">GeneralizedPoisson.score()</target>
        </trans-unit>
        <trans-unit id="01d5e42fe81b567a5f6c78fa5801ec7a3bfbcda4" translate="yes" xml:space="preserve">
          <source>GeneralizedPoisson.score_obs()</source>
          <target state="translated">GeneralizedPoisson.score_obs()</target>
        </trans-unit>
        <trans-unit id="f15da314d9ba84a9a5cf67b0dd49a13bf52febf6" translate="yes" xml:space="preserve">
          <source>GeneralizedPoissonResults.aic()</source>
          <target state="translated">GeneralizedPoissonResults.aic()</target>
        </trans-unit>
        <trans-unit id="b748e8722694a1ccecbf08ab27fd47949017e7cd" translate="yes" xml:space="preserve">
          <source>GeneralizedPoissonResults.bic()</source>
          <target state="translated">GeneralizedPoissonResults.bic()</target>
        </trans-unit>
        <trans-unit id="f7680e8d98923cfe7bd84af32a9e69a1d0910e6e" translate="yes" xml:space="preserve">
          <source>GeneralizedPoissonResults.bse()</source>
          <target state="translated">GeneralizedPoissonResults.bse()</target>
        </trans-unit>
        <trans-unit id="b053e108c3b67f67122dcd0fa63c5b2c879ed21d" translate="yes" xml:space="preserve">
          <source>GeneralizedPoissonResults.conf_int()</source>
          <target state="translated">GeneralizedPoissonResults.conf_int()</target>
        </trans-unit>
        <trans-unit id="660964b6f72b602560845a8806174277ab5fda35" translate="yes" xml:space="preserve">
          <source>GeneralizedPoissonResults.cov_params()</source>
          <target state="translated">GeneralizedPoissonResults.cov_params()</target>
        </trans-unit>
        <trans-unit id="14cd1e581b45cbc3539f36bc857acd652a497fb7" translate="yes" xml:space="preserve">
          <source>GeneralizedPoissonResults.f_test()</source>
          <target state="translated">GeneralizedPoissonResults.f_test()</target>
        </trans-unit>
        <trans-unit id="3d10fa724a12ad4b76b0da3a8129900ef4f6c2e1" translate="yes" xml:space="preserve">
          <source>GeneralizedPoissonResults.fittedvalues()</source>
          <target state="translated">GeneralizedPoissonResults.fittedvalues()</target>
        </trans-unit>
        <trans-unit id="9eec55db89575cccf157a08c9c6ec88d1b620f3f" translate="yes" xml:space="preserve">
          <source>GeneralizedPoissonResults.get_margeff()</source>
          <target state="translated">GeneralizedPoissonResults.get_margeff()</target>
        </trans-unit>
        <trans-unit id="263f1d513581a11e306eaa0c8952e6e53cf7130f" translate="yes" xml:space="preserve">
          <source>GeneralizedPoissonResults.initialize()</source>
          <target state="translated">GeneralizedPoissonResults.initialize()</target>
        </trans-unit>
        <trans-unit id="ea3c06bff5eec2c0019070ebee9677c965d8947b" translate="yes" xml:space="preserve">
          <source>GeneralizedPoissonResults.llf()</source>
          <target state="translated">GeneralizedPoissonResults.llf()</target>
        </trans-unit>
        <trans-unit id="8e4e984a75feea32dd0a72c08636fd0e8472b2bd" translate="yes" xml:space="preserve">
          <source>GeneralizedPoissonResults.llnull()</source>
          <target state="translated">GeneralizedPoissonResults.llnull()</target>
        </trans-unit>
        <trans-unit id="ad0954ff54f1c37f2989b91c7b71c599568a3b8d" translate="yes" xml:space="preserve">
          <source>GeneralizedPoissonResults.llr()</source>
          <target state="translated">GeneralizedPoissonResults.llr()</target>
        </trans-unit>
        <trans-unit id="a1f84eed6ca2baf4f54d77fee7ac632cd2d90369" translate="yes" xml:space="preserve">
          <source>GeneralizedPoissonResults.llr_pvalue()</source>
          <target state="translated">GeneralizedPoissonResults.llr_pvalue()</target>
        </trans-unit>
        <trans-unit id="317213134c17e3e08e55f74951a9d939b05e8231" translate="yes" xml:space="preserve">
          <source>GeneralizedPoissonResults.lnalpha()</source>
          <target state="translated">GeneralizedPoissonResults.lnalpha()</target>
        </trans-unit>
        <trans-unit id="5f4adda9ea94e77138659f7685b6c45de1f49392" translate="yes" xml:space="preserve">
          <source>GeneralizedPoissonResults.lnalpha_std_err()</source>
          <target state="translated">GeneralizedPoissonResults.lnalpha_std_err()</target>
        </trans-unit>
        <trans-unit id="cc1f0f4194149a846898ddf86e33d04953796fc2" translate="yes" xml:space="preserve">
          <source>GeneralizedPoissonResults.load()</source>
          <target state="translated">GeneralizedPoissonResults.load()</target>
        </trans-unit>
        <trans-unit id="776762bd083227ac82b791da2d08f3c5b397c928" translate="yes" xml:space="preserve">
          <source>GeneralizedPoissonResults.normalized_cov_params()</source>
          <target state="translated">GeneralizedPoissonResults.normalized_cov_params()</target>
        </trans-unit>
        <trans-unit id="7f7006035504c234f86f01e10c09e5f0cdbc412c" translate="yes" xml:space="preserve">
          <source>GeneralizedPoissonResults.predict()</source>
          <target state="translated">GeneralizedPoissonResults.predict()</target>
        </trans-unit>
        <trans-unit id="5c1c9ef94bcd4fd78ddd4c1d237d1bb93a5a217a" translate="yes" xml:space="preserve">
          <source>GeneralizedPoissonResults.prsquared()</source>
          <target state="translated">GeneralizedPoissonResults.prsquared()</target>
        </trans-unit>
        <trans-unit id="0fb68446057a08f58b8f729d401704926809802b" translate="yes" xml:space="preserve">
          <source>GeneralizedPoissonResults.pvalues()</source>
          <target state="translated">GeneralizedPoissonResults.pvalues()</target>
        </trans-unit>
        <trans-unit id="6f739ab933fcf4ad8aa3f4eee16f0c277d941649" translate="yes" xml:space="preserve">
          <source>GeneralizedPoissonResults.remove_data()</source>
          <target state="translated">GeneralizedPoissonResults.remove_data()</target>
        </trans-unit>
        <trans-unit id="5be9ef17215c4cf33fecb3f5bc824ee7a6df2027" translate="yes" xml:space="preserve">
          <source>GeneralizedPoissonResults.resid()</source>
          <target state="translated">GeneralizedPoissonResults.resid()</target>
        </trans-unit>
        <trans-unit id="90255a336f8c6ddebf5146ca6d382ead6b959480" translate="yes" xml:space="preserve">
          <source>GeneralizedPoissonResults.save()</source>
          <target state="translated">GeneralizedPoissonResults.save()</target>
        </trans-unit>
        <trans-unit id="5f61529a6ff85353985c638ae8058b72ec145026" translate="yes" xml:space="preserve">
          <source>GeneralizedPoissonResults.set_null_options()</source>
          <target state="translated">GeneralizedPoissonResults.set_null_options()</target>
        </trans-unit>
        <trans-unit id="bd6be9c2fa6d3d242c04584ded7ed8184b432aab" translate="yes" xml:space="preserve">
          <source>GeneralizedPoissonResults.summary()</source>
          <target state="translated">GeneralizedPoissonResults.summary()</target>
        </trans-unit>
        <trans-unit id="f72407e82f4e56f3ac9f6acdd1365f27fe292646" translate="yes" xml:space="preserve">
          <source>GeneralizedPoissonResults.summary2()</source>
          <target state="translated">GeneralizedPoissonResults.summary2()</target>
        </trans-unit>
        <trans-unit id="f168b1980a3c1ce736420734b93e32e6226a59b4" translate="yes" xml:space="preserve">
          <source>GeneralizedPoissonResults.t_test()</source>
          <target state="translated">GeneralizedPoissonResults.t_test()</target>
        </trans-unit>
        <trans-unit id="0f704734264fa8fec75c35d78e993f7b5eca9f0d" translate="yes" xml:space="preserve">
          <source>GeneralizedPoissonResults.t_test_pairwise()</source>
          <target state="translated">GeneralizedPoissonResults.t_test_pairwise()</target>
        </trans-unit>
        <trans-unit id="cf2a60790c49a9760db364cdfed54c392cc90c76" translate="yes" xml:space="preserve">
          <source>GeneralizedPoissonResults.tvalues()</source>
          <target state="translated">GeneralizedPoissonResults.tvalues()</target>
        </trans-unit>
        <trans-unit id="880b2fda1b01e0117bf9d65455fdc3ba06e8832c" translate="yes" xml:space="preserve">
          <source>GeneralizedPoissonResults.wald_test()</source>
          <target state="translated">GeneralizedPoissonResults.wald_test()</target>
        </trans-unit>
        <trans-unit id="15fb688c64074ef545deaaafbd420364a10a49a2" translate="yes" xml:space="preserve">
          <source>GeneralizedPoissonResults.wald_test_terms()</source>
          <target state="translated">GeneralizedPoissonResults.wald_test_terms()</target>
        </trans-unit>
        <trans-unit id="08fba1ca2724ae603683eb7b2cbcaeb0443ad644" translate="yes" xml:space="preserve">
          <source>Generate ASCII Summary Table</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79fca7509aadcab24a467808aea8c16a271fcb0a" translate="yes" xml:space="preserve">
          <source>Generate HTML Summary Table</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78d47e19f017786c02741af18e68fbb2013916ad" translate="yes" xml:space="preserve">
          <source>Generate LaTeX Summary Table</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a150d407a6aa9c472a51a5b52549f9a28a2c444d" translate="yes" xml:space="preserve">
          <source>Generate a random sample of an ARMA process</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72ef83be578cd20f44743cd99296abf5c141ab4d" translate="yes" xml:space="preserve">
          <source>Generate an image showing the missing data pattern.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e02cd5b07276efbe8dbddeb8bc67d753e27f7b8b" translate="yes" xml:space="preserve">
          <source>Generate lagmatrix for 2d array, columns arranged by variables</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8f8610e3d8e9d7fbf7cf8113a922ac1f1443a01" translate="yes" xml:space="preserve">
          <source>Generate some data from an ARMA process:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2b03d3d6b94b4c28ec1f35f149459724dae2627" translate="yes" xml:space="preserve">
          <source>Generate some data to fit: draw random variates from the &lt;code&gt;beta&lt;/code&gt; distribution</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b9342d3551d11f890e1a6f4fa43f3fcd601276b" translate="yes" xml:space="preserve">
          <source>Generates a CCPR (component and component-plus-residual) plot.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c43da449a63c6a2909b82f95b2fc56f0ec214268" translate="yes" xml:space="preserve">
          <source>Generic Maximum Likelihood</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4afe0f961abe5ece201ace0b846b2b7e31f2f28" translate="yes" xml:space="preserve">
          <source>Generic Zero Inflated model Hessian matrix of the loglikelihood</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cbb2fb966cf765c485664c8ed445aa69734d9d6f" translate="yes" xml:space="preserve">
          <source>Generic Zero Inflated model score (gradient) vector of the log-likelihood</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37daa079c54df7f30a7dae7b8698116726af5b19" translate="yes" xml:space="preserve">
          <source>GenericZeroInflated.cdf()</source>
          <target state="translated">GenericZeroInflated.cdf()</target>
        </trans-unit>
        <trans-unit id="0317f451f5310d5b9add4b72d148981fedc0c6eb" translate="yes" xml:space="preserve">
          <source>GenericZeroInflated.cov_params_func_l1()</source>
          <target state="translated">GenericZeroInflated.cov_params_func_l1()</target>
        </trans-unit>
        <trans-unit id="331d116fd4abcb78a5c8d4fb985e44088337cffa" translate="yes" xml:space="preserve">
          <source>GenericZeroInflated.fit()</source>
          <target state="translated">GenericZeroInflated.fit()</target>
        </trans-unit>
        <trans-unit id="f43362878f2bd6dec815940f39f3ca8ff0f16d83" translate="yes" xml:space="preserve">
          <source>GenericZeroInflated.fit_regularized()</source>
          <target state="translated">GenericZeroInflated.fit_regularized()</target>
        </trans-unit>
        <trans-unit id="d617de04522f6df5a001c43253b2019dc214e3f3" translate="yes" xml:space="preserve">
          <source>GenericZeroInflated.from_formula()</source>
          <target state="translated">GenericZeroInflated.from_formula()</target>
        </trans-unit>
        <trans-unit id="8e1d45e1bde7316379f8293f8b87e6e7106f5efe" translate="yes" xml:space="preserve">
          <source>GenericZeroInflated.hessian()</source>
          <target state="translated">GenericZeroInflated.hessian()</target>
        </trans-unit>
        <trans-unit id="7ad3ebb08f360cfe25fcc01545c2fe63f77bc99c" translate="yes" xml:space="preserve">
          <source>GenericZeroInflated.information()</source>
          <target state="translated">GenericZeroInflated.information()</target>
        </trans-unit>
        <trans-unit id="89a1dbc5268eb06af89e8e4f9f51ac5fc56edc88" translate="yes" xml:space="preserve">
          <source>GenericZeroInflated.initialize()</source>
          <target state="translated">GenericZeroInflated.initialize()</target>
        </trans-unit>
        <trans-unit id="a14f71df0ac056f36a5761bc0dbd69141e5c5c76" translate="yes" xml:space="preserve">
          <source>GenericZeroInflated.loglike()</source>
          <target state="translated">GenericZeroInflated.loglike()</target>
        </trans-unit>
        <trans-unit id="e16fd2903159cfe0ea0bc575df511e2e8e9da101" translate="yes" xml:space="preserve">
          <source>GenericZeroInflated.loglikeobs()</source>
          <target state="translated">GenericZeroInflated.loglikeobs()</target>
        </trans-unit>
        <trans-unit id="18f7673163bebc5e412e18549a15b60ef902ee07" translate="yes" xml:space="preserve">
          <source>GenericZeroInflated.pdf()</source>
          <target state="translated">GenericZeroInflated.pdf()</target>
        </trans-unit>
        <trans-unit id="346774a94459d952dfba71a8fd21e5d12c29986b" translate="yes" xml:space="preserve">
          <source>GenericZeroInflated.predict()</source>
          <target state="translated">GenericZeroInflated.predict()</target>
        </trans-unit>
        <trans-unit id="57d8a36dfef36b1f6a381ce2ab25e229b4cb21cd" translate="yes" xml:space="preserve">
          <source>GenericZeroInflated.score()</source>
          <target state="translated">GenericZeroInflated.score()</target>
        </trans-unit>
        <trans-unit id="f1fd325e747f289f000b9c1526e3f7d266787eb5" translate="yes" xml:space="preserve">
          <source>GenericZeroInflated.score_obs()</source>
          <target state="translated">GenericZeroInflated.score_obs()</target>
        </trans-unit>
        <trans-unit id="44f16605a8fb93fbb25d11089e53ebeb8272c913" translate="yes" xml:space="preserve">
          <source>Generically, the VARMAX model is specified (see for example chapter 18 of &lt;a href=&quot;#id3&quot; id=&quot;id1&quot;&gt;[1]&lt;/a&gt;):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f10657fbf7b66d716647b7555ef0c007a38861f" translate="yes" xml:space="preserve">
          <source>Generiz Zero Inflated model for count data</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8fb98478e8ca5d2a338682efed328b7430011ce" translate="yes" xml:space="preserve">
          <source>Get marginal effects of the fitted model.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fda064812271081733478afc6cd70455d0f424b1" translate="yes" xml:space="preserve">
          <source>Get or set the RandomState object for generating random variates.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48e455e14b2b17598f4ec52f6d543de8bdb62cab" translate="yes" xml:space="preserve">
          <source>Get the AR representation of an ARMA process</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3ad761345cc15d97d7234ae7d233871520823b7" translate="yes" xml:space="preserve">
          <source>Get the MA representation of an ARMA process</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b97e9dd4196fcf87a73a9bf7ac985e26e88f1733" translate="yes" xml:space="preserve">
          <source>Get the errors of the ARMA process.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1de8237ad7f9ae6427c5fe07f8be3ee4270890a9" translate="yes" xml:space="preserve">
          <source>Get the impulse response function (MA representation) for ARMA process</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="010b85ad56b34c34c7c2a3b2436c740e30428ed5" translate="yes" xml:space="preserve">
          <source>Getting Started</source>
          <target state="translated">시작하기</target>
        </trans-unit>
        <trans-unit id="76e7a3a3f9c225fe820ba7e9cff10ea2a73b79a1" translate="yes" xml:space="preserve">
          <source>Getting started</source>
          <target state="translated">시작하기</target>
        </trans-unit>
        <trans-unit id="28de41fb98d77320658017f8a04c0448c5cb21fa" translate="yes" xml:space="preserve">
          <source>Gill, Jeff. 2000. Generalized Linear Models: A Unified Approach. SAGE QASS Series.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13920848e0b8ac702ba358adc4c30eac0e0e72ce" translate="yes" xml:space="preserve">
          <source>Given a monotone function fn (no checking is done to verify monotonicity) and a set of x values, return an linearly interpolated approximation to its inverse from its values on x.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d178f9e82c139fcae0f4f9e8e3e115f0d6612aa3" translate="yes" xml:space="preserve">
          <source>Given a series (denoted \(y_t\)), performs the differencing operation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6986a3e9bb17e989a90f1001f89ab7c8b6f031e0" translate="yes" xml:space="preserve">
          <source>Given coefficients of a lag polynomial of the form:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e98d05ae7a7ecd40e1e4ba232e04e3ab8d4c7f3b" translate="yes" xml:space="preserve">
          <source>Given the whitened design matrix, the log-likelihood is evaluated at the parameter vector &lt;code&gt;params&lt;/code&gt; for the dependent variable &lt;code&gt;Y&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b386577de1fd8f6f5d08211e3cf22d22fad50299" translate="yes" xml:space="preserve">
          <source>Given the whitened design matrix, the log-likelihood is evaluated at the parameter vector &lt;code&gt;params&lt;/code&gt; for the dependent variable &lt;code&gt;endog&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b460eee9dc82fcd74d4627432d51d1d35203804c" translate="yes" xml:space="preserve">
          <source>Gives the covariance matrix of the corresponding VAR-representation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32941e44ee4b8deb3a9d13fecbb3c95a0ce48bd2" translate="yes" xml:space="preserve">
          <source>GlobalOddsRatio.covariance_matrix()</source>
          <target state="translated">GlobalOddsRatio.covariance_matrix()</target>
        </trans-unit>
        <trans-unit id="f8ca53bacae7e8e075accd789de1303913c3cb46" translate="yes" xml:space="preserve">
          <source>GlobalOddsRatio.covariance_matrix_solve()</source>
          <target state="translated">GlobalOddsRatio.covariance_matrix_solve()</target>
        </trans-unit>
        <trans-unit id="8847c379debd3798aef9d5a3a966ca5c4a608017" translate="yes" xml:space="preserve">
          <source>GlobalOddsRatio.get_eyy()</source>
          <target state="translated">GlobalOddsRatio.get_eyy()</target>
        </trans-unit>
        <trans-unit id="e4f078ee2fd6a4356caab3181f87028c75dda9c8" translate="yes" xml:space="preserve">
          <source>GlobalOddsRatio.initialize()</source>
          <target state="translated">GlobalOddsRatio.initialize()</target>
        </trans-unit>
        <trans-unit id="0c059d945a35d40ccce5d0c47d25880390f1cd69" translate="yes" xml:space="preserve">
          <source>GlobalOddsRatio.observed_crude_oddsratio()</source>
          <target state="translated">GlobalOddsRatio.observed_crude_oddsratio()</target>
        </trans-unit>
        <trans-unit id="790c1c67f2d6576fba3db802dc621a516cb4793f" translate="yes" xml:space="preserve">
          <source>GlobalOddsRatio.pooled_odds_ratio()</source>
          <target state="translated">GlobalOddsRatio.pooled_odds_ratio()</target>
        </trans-unit>
        <trans-unit id="9230d547b8bc8a82b159f7a22ec88c67cfd34272" translate="yes" xml:space="preserve">
          <source>GlobalOddsRatio.summary()</source>
          <target state="translated">GlobalOddsRatio.summary()</target>
        </trans-unit>
        <trans-unit id="9d2f162aac20f85e1d79c4da310d477d21206f5b" translate="yes" xml:space="preserve">
          <source>GlobalOddsRatio.update()</source>
          <target state="translated">GlobalOddsRatio.update()</target>
        </trans-unit>
        <trans-unit id="e6cfcb066a2437d071cef2300ca2436b8fd60ed8" translate="yes" xml:space="preserve">
          <source>GofChisquarePower.plot_power()</source>
          <target state="translated">GofChisquarePower.plot_power()</target>
        </trans-unit>
        <trans-unit id="a7571dbabfc6b5e99278d490728dce5458a024ee" translate="yes" xml:space="preserve">
          <source>GofChisquarePower.power()</source>
          <target state="translated">GofChisquarePower.power()</target>
        </trans-unit>
        <trans-unit id="f30f5cd7abc5030813d7c6dcc4670eb0dace5281" translate="yes" xml:space="preserve">
          <source>GofChisquarePower.solve_power()</source>
          <target state="translated">GofChisquarePower.solve_power()</target>
        </trans-unit>
        <trans-unit id="2c63d71c4caa2eaf49a2ac56e0c68740def97543" translate="yes" xml:space="preserve">
          <source>Goldfeld-Quandt test</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c351ded757bdd68b17c050a093b6a62c19cc3a70" translate="yes" xml:space="preserve">
          <source>Goodness of Fit Plots</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eafd1af766499da6912697f015cc7e8e1a5eda59" translate="yes" xml:space="preserve">
          <source>Goodness of Fit Tests and Measures</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8b8f4e702baa97ce49511479dded9ccf94288ef" translate="yes" xml:space="preserve">
          <source>Goodness-of-Fit Tests for Likert Type Data</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="abd057f4e02b76654d11f8cacc00fbcbfcd298dc" translate="yes" xml:space="preserve">
          <source>Gradient of function, or Jacobian if function f returns 1d array</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9bda8a4aaedd3e34c12d4b05c93fc1e48fc46c6a" translate="yes" xml:space="preserve">
          <source>Gradient of log-likelihood evaluated at params</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a0b459475e4313fdc554c18e7e2aa7d6e308aa1" translate="yes" xml:space="preserve">
          <source>Gram-Charlier Expansion of Normal distribution</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51511ac8aa4c067009dbb7745b964b0350934347" translate="yes" xml:space="preserve">
          <source>Granger causality</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5bdb0b88d8ad5b157e30d5638056610cc97113fa" translate="yes" xml:space="preserve">
          <source>Graphical comparison</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab255c27aec8dfb7cbe347babe25d68cec1ce7a6" translate="yes" xml:space="preserve">
          <source>Graphics</source>
          <target state="translated">Graphics</target>
        </trans-unit>
        <trans-unit id="0e6a1f1740a1920072193ed030712a217142a68e" translate="yes" xml:space="preserve">
          <source>Green (2008) Table 14.2</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9844d9b726685c3a8f196dd6e825423702756cc6" translate="yes" xml:space="preserve">
          <source>Green, PJ. 1984. &amp;ldquo;Iteratively reweighted least squares for maximum likelihood estimation, and some robust and resistant alternatives.&amp;rdquo; Journal of the Royal Statistical Society, Series B, 46, 149-192.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53d9c75a167d81462898a16fbdf5e1637c13f02a" translate="yes" xml:space="preserve">
          <source>Green,W. H. (2008). Econometric Analysis. Sixth Edition. International Student Edition.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="550608f002391445e475c349a8a2a251d0684d33" translate="yes" xml:space="preserve">
          <source>Green. &amp;ldquo;Econometric Analysis,&amp;rdquo; 5th ed., Pearson, 2003.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ab93338cd3fcbdb4f3868ac6c42adb165f61ffc" translate="yes" xml:space="preserve">
          <source>Greene Econometrics, 5th edition</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87ba7671450dd3f32619fbda38507c5c5b99ed12" translate="yes" xml:space="preserve">
          <source>Greene Hansen, Bruce</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8c3a3603de9ae6508558c8f4589a9e2ca076fec" translate="yes" xml:space="preserve">
          <source>Greene Wikipedia</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5897bd17af05d8c5a63d3ce4a02366713bd60bc5" translate="yes" xml:space="preserve">
          <source>Greene also points out that dropping a single observation can have a dramatic effect on the coefficient estimates:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="baa22844f91b0bbe034bf1a195f07d4cb9ee2258" translate="yes" xml:space="preserve">
          <source>Greene section 11.4.1 5th edition p. 222 now test statistic reproduces Greene 5th, example 11.3</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a54fa42e3b3cf2f4f1c0caa6d76b5e4da64136b" translate="yes" xml:space="preserve">
          <source>Greene section 7.5.1, notation follows Greene</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f57768beadd53d248af1b139dd339565d14a32dc" translate="yes" xml:space="preserve">
          <source>Greene, W. 2008. &amp;ldquo;Functional forms for the negtive binomial model</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3cb95b5fad53db80fadbacec8f43e439ffa2b066" translate="yes" xml:space="preserve">
          <source>Group age by party ID, and create a violin plot with it:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4abcade8f7d51afe3048cf182d94dbc4ab3a7237" translate="yes" xml:space="preserve">
          <source>GroupsStats.groupdemean()</source>
          <target state="translated">GroupsStats.groupdemean()</target>
        </trans-unit>
        <trans-unit id="547e325ec65bac46164781f5788fac8ed02f9991" translate="yes" xml:space="preserve">
          <source>GroupsStats.groupsswithin()</source>
          <target state="translated">GroupsStats.groupsswithin()</target>
        </trans-unit>
        <trans-unit id="1559ad5b4dc7f67cf51e8d717971adbd50c714db" translate="yes" xml:space="preserve">
          <source>GroupsStats.groupvarwithin()</source>
          <target state="translated">GroupsStats.groupvarwithin()</target>
        </trans-unit>
        <trans-unit id="f8ad4ab61a18133eaaba0fd35d553a533c7f7d63" translate="yes" xml:space="preserve">
          <source>GroupsStats.runbasic()</source>
          <target state="translated">GroupsStats.runbasic()</target>
        </trans-unit>
        <trans-unit id="ad9278a3117bd2dca9e03852e93a965633af3446" translate="yes" xml:space="preserve">
          <source>GroupsStats.runbasic_old()</source>
          <target state="translated">GroupsStats.runbasic_old()</target>
        </trans-unit>
        <trans-unit id="344b07899264769c756cc5eb0fc1be5415b88516" translate="yes" xml:space="preserve">
          <source>Growth curves of pigs</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1995e5b8b1cc06874fe705f8cb3eec24d937c070" translate="yes" xml:space="preserve">
          <source>H : &lt;code&gt;obs_cov&lt;/code&gt;\((k\_endog \times k\_endog \times nobs)\)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed2f7983b127b95d64652fc44a102e247dcc44b9" translate="yes" xml:space="preserve">
          <source>H0 (null) : data are generated by a Gaussian-distributed process</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0b45c672cdf70b5fc7beb43aad8527b8bf197d4" translate="yes" xml:space="preserve">
          <source>H2 is defined as &lt;code&gt;k * (1/df_resid) * sum(M.psi(sresid)**2) *scale**2/
((1/nobs)*sum(M.psi_deriv(sresid)))*W_inv&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f66df83e70158d7d26b52351092773ab0c239d8e" translate="yes" xml:space="preserve">
          <source>H3 is defined as &lt;code&gt;1/k * (1/df_resid * sum(M.psi(sresid)**2)*scale**2 *
(W_inv X.T X W_inv))&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b108e2dae6c42d3b599305103e1121e0fe2dd7e6" translate="yes" xml:space="preserve">
          <source>H&lt;sub&gt;0&lt;/sub&gt; : data are generated by a Gaussian-distributed process</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb013b18ac387a6c67aee9376cc54462d22019cc" translate="yes" xml:space="preserve">
          <source>HQIC</source>
          <target state="translated">HQIC</target>
        </trans-unit>
        <trans-unit id="b77ded6c96826f535ab8b579df57d4299ff3f693" translate="yes" xml:space="preserve">
          <source>Hall, P., and S. Sheather. (1988). On the distribution of the Studentized quantile. Journal of the Royal Statistical Society, Series B 50: 381-391.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f64205244a930902b4b9345fb39540983d238919" translate="yes" xml:space="preserve">
          <source>Hamilton (1989) switching model of GNP</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="632098d0940d9dd6faa743ff8f6482ae751d1ac2" translate="yes" xml:space="preserve">
          <source>Hamilton, J.D. &amp;ldquo;Time Series Analysis&amp;rdquo;. Princeton, 1994.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c57098cee9839ad33d259c75e7cda86ef45f8829" translate="yes" xml:space="preserve">
          <source>Hampel 17A</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58c1bbcb3b8c2136fa12d38d4de83dd763f93282" translate="yes" xml:space="preserve">
          <source>Hampel function for M-estimation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5030c96bcd9d2dd77d4705ca14d8514baa5fdec6" translate="yes" xml:space="preserve">
          <source>Hampel weighting function for the IRLS algorithm</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2284f6e0163212da1d4a4f6f5f1165550347fdd1" translate="yes" xml:space="preserve">
          <source>Hampel's 17A</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b47f7e09b89415c68d3aa63f42d3e86c2569170e" translate="yes" xml:space="preserve">
          <source>Hampel.psi()</source>
          <target state="translated">Hampel.psi()</target>
        </trans-unit>
        <trans-unit id="9240c32d96fd13343ccf1740a4847c2dd77a07f7" translate="yes" xml:space="preserve">
          <source>Hampel.psi_deriv()</source>
          <target state="translated">Hampel.psi_deriv()</target>
        </trans-unit>
        <trans-unit id="33b7bb09a4256aa2bb16fa3895c1cd0ed26f219a" translate="yes" xml:space="preserve">
          <source>Hampel.rho()</source>
          <target state="translated">Hampel.rho()</target>
        </trans-unit>
        <trans-unit id="b2690e8c8e381a0583f8e08b90c5b16b2b6d0075" translate="yes" xml:space="preserve">
          <source>Hampel.weights()</source>
          <target state="translated">Hampel.weights()</target>
        </trans-unit>
        <trans-unit id="46ac66a84d37a8d2584cc786634b92d70e014ac3" translate="yes" xml:space="preserve">
          <source>Hannan-Quinn criterion</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9735417d4f20815d3f7afdf90e70c95c12ee97fc" translate="yes" xml:space="preserve">
          <source>Hannan-Quinn information criterion (HQC)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20e467b2a793502c125bbf74b0521725063cf1f5" translate="yes" xml:space="preserve">
          <source>Hard thresholding a correlation matrix may result in a matrix that is not positive semidefinite. We can approximate a hard thresholded correlation matrix with a PSD matrix as follows, where &lt;code&gt;corr&lt;/code&gt; is the input correlation matrix.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8422ca08835d9a81ec168ec5f5c722aa1137978a" translate="yes" xml:space="preserve">
          <source>Hard thresholding a covariance matrix may result in a matrix that is not positive semidefinite. We can approximate a hard thresholded covariance matrix with a PSD matrix as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a894d423103e9e56df9d0e9676570ba3d7e0a40" translate="yes" xml:space="preserve">
          <source>Hardin, J.W. and Hilbe, J.M. 2007. &amp;ldquo;Generalized Linear Models and Extensions.&amp;rdquo; 2nd ed. Stata Press, College Station, TX.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="428a2a9909c626aaea1c8dd9effbf7f4cb61a7e4" translate="yes" xml:space="preserve">
          <source>Harvey Collier test for linearity</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e834145d08dfccef7308c0cf821b75a670332d8" translate="yes" xml:space="preserve">
          <source>Harvey, Andrew C. 1990. &lt;em&gt;Forecasting, Structural Time Series&lt;/em&gt;&lt;em&gt;Models and the Kalman Filter.&lt;/em&gt; Cambridge University Press.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cde53a8f157a486823602c1b6cd5a28dd3ca5a94" translate="yes" xml:space="preserve">
          <source>Harvey, Andrew C. 1990. Forecasting, Structural Time Series Models and the Kalman Filter. Cambridge University Press.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="abfb06be03a06b019958811b62797d0cf93c75b7" translate="yes" xml:space="preserve">
          <source>Harvey-Collier multiplier test for Null hypothesis that the linear specification is correct:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b6a079490f36aaef55bbef31d13e8def1e577f9" translate="yes" xml:space="preserve">
          <source>Has keys typlist, data_label, lbllist, varlist, nvar, filetype, ds_format, nobs, fmtlist, vlblist, time_stamp, srtlist, byteorder</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eed67ffb44204528b90c3a6cb7418d0aa9cdfbf4" translate="yes" xml:space="preserve">
          <source>Hastie, Tibshirani and Friedman, &amp;ldquo;The Elements of Statistical Learning: Data Mining, Inference, and Prediction&amp;rdquo;, Springer, 2009.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2580f682d31948dab8a662a924948d3373aeceef" translate="yes" xml:space="preserve">
          <source>Hausman&amp;rsquo;s specification test</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="831afcb2bb371a3164a0d4f55e171696535b128c" translate="yes" xml:space="preserve">
          <source>Have a look at &lt;code&gt;dir(results)&lt;/code&gt; to see available results. Attributes are described in &lt;code&gt;results.__doc__&lt;/code&gt; and results methods have their own docstrings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7803f5e8df073b926e12fef4c62b2a124e586cc6" translate="yes" xml:space="preserve">
          <source>Have a look at the created design matrix:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05e7e907a116020f13bc99c85e9a145ad64447fd" translate="yes" xml:space="preserve">
          <source>Helmert Coding</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="107bd27c9a983c63bd7d134f38093c512a481394" translate="yes" xml:space="preserve">
          <source>Here X is a tall data matrix (e.g. with 100,000 rows and 50 columns). The row-wise correlation matrix of X is calculated and stored in sparse form, with all entries smaller than 0.3 treated as 0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6effb241c7bacbe73c68719d3554dc2329101a38" translate="yes" xml:space="preserve">
          <source>Here \(\eta_t \sim N(0, \sigma_\eta^2)\) and \(\zeta_t \sim N(0, \sigma_\zeta^2)\).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44f5ee358c0452581b473ce9b29b506b923c928e" translate="yes" xml:space="preserve">
          <source>Here are our import statements:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6cc1278c7ab5916b8473a75c8dbf748ab563858" translate="yes" xml:space="preserve">
          <source>Here are some of the other testing procedures implemented by survdiff:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fcd1e59ba4255ebf66c2c6a00b741ffe5fca7f97" translate="yes" xml:space="preserve">
          <source>Here is a plot of the profile likelihood function. The profile likelihood plot shows that the MLE of the random slope variance parameter is a very small positive number, and that there is low uncertainty in this estimate.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="431fdc9bd1b146f6cd3a9233bd25f03a93fe37e5" translate="yes" xml:space="preserve">
          <source>Here is a plot of the profile likelihood function. We multiply the log-likelihood difference by 2 to obtain the usual $\chi^2$ reference distribution with 1 degree of freedom.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9a5bcdac79a67279d5962598b1b79788f27afcc" translate="yes" xml:space="preserve">
          <source>Here is the same model fit in R using LMER:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ec672e6ad9cf28cf4ab17b54b2c06fe2c882bbf" translate="yes" xml:space="preserve">
          <source>Here is the same model fit using LMER in R (note that here R is reporting the REML criterion instead of the likelihood, where the REML criterion is twice the log likeihood):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0da9c80250c28d9976155199a70c48e11b720926" translate="yes" xml:space="preserve">
          <source>Here is the same model fit using LMER in R:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23ea9139b482baafc3de18298b93a9e2a79a0351" translate="yes" xml:space="preserve">
          <source>Here is the statsmodels LME fit for a basic model with a random intercept. We are passing the endog and exog data directly to the LME init function as arrays. Also note that endog_re is specified explicitly in argument 4 as a random intercept (although this would also be the default if it were not specified).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d618b1b918f6d8c20c917820393fb711b0a2be56" translate="yes" xml:space="preserve">
          <source>Here we consider three methods for separating a trend and cycle in economic data. Supposing we have a time series $y_t$, the basic idea is to decompose it into these two components:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4780fec5de7d0661209257f97312fccd68a7b16e" translate="yes" xml:space="preserve">
          <source>Here we create a &lt;code&gt;SurvfuncRight&lt;/code&gt; object using data from the &lt;code&gt;flchain&lt;/code&gt; study, which is available through the R datasets repository. We fit the survival distribution only for the female subjects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="beb9bbe91f08609d7288f645b732e689dce564a3" translate="yes" xml:space="preserve">
          <source>Here we demonstrate another feature of model fitting - the use of a random search for MLE starting parameters. Because Markov switching models are often characterized by many local maxima of the likelihood function, performing an initial optimization step can be helpful to find the best parameters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b92f6e6c61dc7fdaf24d1b6ef2088b8275201ba5" translate="yes" xml:space="preserve">
          <source>Here we describe some of the post-estimation capabilities of Statsmodels' SARIMAX.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f71bf436b1835ba0f3426f8212b02e8eff2b7b5" translate="yes" xml:space="preserve">
          <source>Here we implemented the HP filter as a ridge-regression rule using scipy.sparse. In this sense, the solution can be written as</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4101202b650d7143b71b53a3e829d09f66edaff8" translate="yes" xml:space="preserve">
          <source>Here we perform dynamic prediction starting in the first quarter of 1978.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a74522e6843302f9736050ee4b19080bf0540eba" translate="yes" xml:space="preserve">
          <source>Here we plot survival functions for two groups (females and males) on the same axes:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8901eb497c9e60e481cb5f520b5dedd74f0363a9" translate="yes" xml:space="preserve">
          <source>Here we show how linear mixed models can be fit using the MixedLM procedure in Statsmodels. Results from R (LME4) are included for comparison.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25b4399d0ef4dde258a7af4ce4b4aad497dbe6dd" translate="yes" xml:space="preserve">
          <source>Here we used &lt;code&gt;reference=0&lt;/code&gt;, which implies that the first level, Hispanic, is the reference category against which the other level effects are measured. As mentioned above, the columns do not sum to zero and are thus not independent of the intercept. To be explicit, let&amp;rsquo;s look at how this would encode the &lt;code&gt;race&lt;/code&gt; variable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70adb22a1adb9e0d23e4e4b1be904e1b41418e6a" translate="yes" xml:space="preserve">
          <source>Here we used &lt;code&gt;reference=0&lt;/code&gt;, which implies that the first level, Hispanic, is the reference category against which the other level effects are measured. As mentioned above, the columns do not sum to zero and are thus not independent of the intercept. To be explicit, let's look at how this would encode the &lt;code&gt;race&lt;/code&gt; variable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c37af9a8c6a514ae8cfa9576f54da43b5053cb3e" translate="yes" xml:space="preserve">
          <source>Here, \(Y_{ijk}\) is the \(k`th measured response under conditions :math:`i, j\). The only &amp;ldquo;mean structure parameter&amp;rdquo; is \(\beta_0\). The \(\eta_{1i}\) are independent and identically distributed with zero mean, and variance \(\tau_1^2\), and the \(\eta_{2j}\) are independent and identically distributed with zero mean, and variance \(\tau_2^2\).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f839c0e8dd51d76fc2de3a309daceef9c11d644" translate="yes" xml:space="preserve">
          <source>Here, \(Y_{ij}\) is the \(j`th measured response for subject :math:`i\), and \(X_{ij}\) is a covariate for this response. The &amp;ldquo;fixed effects parameters&amp;rdquo; \(\beta_0\) and \(\beta_1\) are shared by all subjects, and the errors \(\epsilon_{ij}\) are independent of everything else, and identically distributed (with mean zero). The &amp;ldquo;random effects parameters&amp;rdquo; \(gamma_{0i}\) and \(gamma_{1i}\) follow a bivariate distribution with mean zero, described by three parameters: \({\rm var}\gamma_{0i}\), \({\rm var}\gamma_{1i}\), and \({\rm cov}(\gamma_{0i}, \gamma_{1i})\). There is also a parameter for \({\rm var}(\epsilon_{ij})\).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eeb7f417e4310079c8a497bad0f18ab4ceea646e" translate="yes" xml:space="preserve">
          <source>Here, one of the easy-to-interpret implications in this model is the persistence of the unobserved factor: we find that exhibits substantial persistence.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e3e65b7547dd9ed16b4bab87524faffc4ab88bd" translate="yes" xml:space="preserve">
          <source>Here, we have:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d389e34eece24e8b22fe00bc426c348730f09781" translate="yes" xml:space="preserve">
          <source>Hertzprung Russell data for Star Cluster CYG 0B1 - Leverage Points</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f36a0abe2c6b3d1c0270cf4e90ac74dd631cc14" translate="yes" xml:space="preserve">
          <source>Hessian matrix of the likelihood function, evaluated at the given parameters</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="319a1ff9bd142f6c01c1af4c3eecb7794e281fa3" translate="yes" xml:space="preserve">
          <source>Hessian of log-likelihood evaluated at params</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e45550b61c04242e9a89f81c65a73649f39985f9" translate="yes" xml:space="preserve">
          <source>Hessian, second derivative of loglikelihood function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="595775908d0e5a234246c900dbf7397129af1d44" translate="yes" xml:space="preserve">
          <source>HetGoldfeldQuandt.run()</source>
          <target state="translated">HetGoldfeldQuandt.run()</target>
        </trans-unit>
        <trans-unit id="a7c67f9a45f0b984bbe65c46c5176e467e5c84ec" translate="yes" xml:space="preserve">
          <source>Heteroscedasticity Tests</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="301279a8960a3c59f8664846ec7c1b66340118fd" translate="yes" xml:space="preserve">
          <source>Heteroskedasticity tests</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9753ad51959ad9534cc99a452ecc11c161e5237" translate="yes" xml:space="preserve">
          <source>High Density Region boxplot</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33d14f281a614b057aa20523a0584315a6127319" translate="yes" xml:space="preserve">
          <source>Hilbe, J.M. 2011. &amp;ldquo;Negative binomial regression&amp;rdquo;. Cambridge University</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7de196b1b01e8a0cf5bbcb6c1068d36d1385cf17" translate="yes" xml:space="preserve">
          <source>Hint:</source>
          <target state="translated">Hint:</target>
        </trans-unit>
        <trans-unit id="65488a9921b341501d7e2d7f277db78de64a9228" translate="yes" xml:space="preserve">
          <source>Histogram of standardized deviance residuals with Kernel Density Estimate overlayed</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a1a9095779e640c90f6f6a5869f488a814ac4cc" translate="yes" xml:space="preserve">
          <source>Histogram of standardized deviance residuals:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e69d78cf7785aab9b52b178156965cfa80e1c4e" translate="yes" xml:space="preserve">
          <source>Histogram plus estimated density of standardized residulas, along with a Normal(0,1) density plotted for reference.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44df4e7a78b0a8be906a0af2f27bef57fb2f9a51" translate="yes" xml:space="preserve">
          <source>Hochberg, Y., and A. C. Tamhane. Multiple Comparison Procedures. Hoboken, NJ: John Wiley &amp;amp; Sons, 1987.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc4d0135042adb2f6db54170cd18150094e0f96b" translate="yes" xml:space="preserve">
          <source>Hodrick, R.J, and E. C. Prescott. 1980. &amp;ldquo;Postwar U.S. Business Cycles: An</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6208b366d53f235f09d322b09fee8c762256543" translate="yes" xml:space="preserve">
          <source>Hodrick-Prescott (HP) filter</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f73baa28c68648db0aae14d9e0bb998f7ca72a2" translate="yes" xml:space="preserve">
          <source>Hodrick-Prescott Filter</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="043f064e2e468719531ac5d409890440d20a9f53" translate="yes" xml:space="preserve">
          <source>Hodrick-Prescott filter</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc775f1664082bb1ad24e9ce9e49f7c39ae44a9e" translate="yes" xml:space="preserve">
          <source>Hofacker, C. (2004). Exploratory Factor Analysis, Mathematical Marketing. &lt;a href=&quot;http://www.openaccesstexts.org/pdf/Quant_Chapter_11_efa.pdf&quot;&gt;http://www.openaccesstexts.org/pdf/Quant_Chapter_11_efa.pdf&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="643ba48cc5d467eac1acebe08bac439fce3f1bd6" translate="yes" xml:space="preserve">
          <source>Holder</source>
          <target state="translated">Holder</target>
        </trans-unit>
        <trans-unit id="13a119ab392cf55f0b39f657c9cb27cea193cf13" translate="yes" xml:space="preserve">
          <source>Holt Winter&amp;rsquo;s Exponential Smoothing</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5677b7472cf276b7526c2965e8aabaed1a375ad8" translate="yes" xml:space="preserve">
          <source>Holt Winter&amp;rsquo;s Exponential Smoothing Results</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24e1ec1293b12492b95998485fb628cd206ab26c" translate="yes" xml:space="preserve">
          <source>Holt class</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a07eb41913974b84f1f46e484fd65f38477a280" translate="yes" xml:space="preserve">
          <source>Holt&amp;rsquo;s Exponential Smoothing wrapper(&amp;hellip;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b6fd411be016650f0ab2d249c1a7cf12d4654bf" translate="yes" xml:space="preserve">
          <source>Holt.fit()</source>
          <target state="translated">Holt.fit()</target>
        </trans-unit>
        <trans-unit id="8abeafa14356adfd8879bfa601e54c76903e2d8c" translate="yes" xml:space="preserve">
          <source>Holt.from_formula()</source>
          <target state="translated">Holt.from_formula()</target>
        </trans-unit>
        <trans-unit id="775aa62b19f19b4345070bf692b436871cd38d1d" translate="yes" xml:space="preserve">
          <source>Holt.hessian()</source>
          <target state="translated">Holt.hessian()</target>
        </trans-unit>
        <trans-unit id="590a5b87300a1820076c02383be7198edb67a36f" translate="yes" xml:space="preserve">
          <source>Holt.information()</source>
          <target state="translated">Holt.information()</target>
        </trans-unit>
        <trans-unit id="7c0e22163de663e97b3b53eefd6cdf10c82d999e" translate="yes" xml:space="preserve">
          <source>Holt.initialize()</source>
          <target state="translated">Holt.initialize()</target>
        </trans-unit>
        <trans-unit id="ea9c10e49224b85bd518d5bb7dbdff7865be9d63" translate="yes" xml:space="preserve">
          <source>Holt.loglike()</source>
          <target state="translated">Holt.loglike()</target>
        </trans-unit>
        <trans-unit id="381b005f1dbf8f1b5f18b41133c0cee7f2eeccaf" translate="yes" xml:space="preserve">
          <source>Holt.predict()</source>
          <target state="translated">Holt.predict()</target>
        </trans-unit>
        <trans-unit id="db7b96f499b2000f6c02a1e791c02a9b3a2a2d99" translate="yes" xml:space="preserve">
          <source>Holt.score()</source>
          <target state="translated">Holt.score()</target>
        </trans-unit>
        <trans-unit id="41545fd825be5c8fcd013769b3d8e5ac4cdb8b76" translate="yes" xml:space="preserve">
          <source>HoltWintersResults class</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b17d9daed8d399c81ac949870525d2d2f6f315f" translate="yes" xml:space="preserve">
          <source>HoltWintersResults.forecast()</source>
          <target state="translated">HoltWintersResults.forecast()</target>
        </trans-unit>
        <trans-unit id="ec42988c50be48e4fe7317b2a58e6d0f934dc989" translate="yes" xml:space="preserve">
          <source>HoltWintersResults.initialize()</source>
          <target state="translated">HoltWintersResults.initialize()</target>
        </trans-unit>
        <trans-unit id="ab3ae1c23be7ed02c7e7c50431f06c7e4ad89fc4" translate="yes" xml:space="preserve">
          <source>HoltWintersResults.predict()</source>
          <target state="translated">HoltWintersResults.predict()</target>
        </trans-unit>
        <trans-unit id="f37cb3c6526880f1bfbaf2dd38a369c0e1f13a52" translate="yes" xml:space="preserve">
          <source>HoltWintersResults.summary()</source>
          <target state="translated">HoltWintersResults.summary()</target>
        </trans-unit>
        <trans-unit id="b265b8afbf834a77914f4be2baea5d507af508ff" translate="yes" xml:space="preserve">
          <source>Homoscedasticity implies that $alpha=0$</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7c27a08c8999ff9e352055a79d282e6b1bbb32c" translate="yes" xml:space="preserve">
          <source>How does statsmodels handle missing data?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="caf2bd701d4573b5c4a9c0235383ec232dfcb60a" translate="yes" xml:space="preserve">
          <source>How well are we predicting?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e064ac9f51875f5a099264b8e07d13862a50c61" translate="yes" xml:space="preserve">
          <source>However, to have a statistical model we need additional assumptions on the properties of the explanatory variables, x, and the noise. One standard assumption for many basic models is that x is not correlated with the noise. In a more general definition, x being exogenous means that we do not have to consider how the explanatory variables in x were generated, whether by design or by random draws from some underlying distribution, when we want to estimate the effect or impact that x has on y, or test a hypothesis about this effect.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e7fe10b5b5200fd9a725575d58803511e4ec744" translate="yes" xml:space="preserve">
          <source>However, when we want to hold on to two different estimation results, then it is recommended to create two separate model instances.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="542363de468004508289eab715ebe08086d6e30d" translate="yes" xml:space="preserve">
          <source>Huber&amp;rsquo;s T for M estimation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c57504e595b331f9cf3060ad19841e66deb49479" translate="yes" xml:space="preserve">
          <source>Huber&amp;rsquo;s proposal 2 for estimating location and scale jointly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="764bb08d71ce05560ba78395a1e779023aa5ff02" translate="yes" xml:space="preserve">
          <source>Huber&amp;rsquo;s scale is intended to be used as the scale estimate in the IRLS algorithm and is slightly different than the &lt;code&gt;Huber&lt;/code&gt; class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5235a0f4484a397bde3bf4174363706ed6d1f114" translate="yes" xml:space="preserve">
          <source>Huber&amp;rsquo;s scale is the iterative solution to</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae53ecec4ededcb399a51dcfbf51b617f3410864" translate="yes" xml:space="preserve">
          <source>Huber&amp;rsquo;s scaling for fitting robust linear models.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52aea287df6ae4d5bca53907ee23557895383ac9" translate="yes" xml:space="preserve">
          <source>Huber&amp;rsquo;s t</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c9bac0f83e81f7ecc4fb1313d0e09fb68e1360e" translate="yes" xml:space="preserve">
          <source>Huber&amp;rsquo;s t weighting function for the IRLS algorithm</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9fb55e57ad6cb163c4c3c00b2af435ea4ef826a4" translate="yes" xml:space="preserve">
          <source>Huber's T norm with 'H2' covariance matrix</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc6f6ecce6f0249305c362b7dff21779b74948d3" translate="yes" xml:space="preserve">
          <source>Huber's T norm with the (default) median absolute deviation scaling</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb5f259834bfa7b364a81b7626175da665b2afe1" translate="yes" xml:space="preserve">
          <source>Huber's t</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59be3fda62d1c1c29a2244ed0f95f84cbb55d5da" translate="yes" xml:space="preserve">
          <source>HuberT.psi()</source>
          <target state="translated">HuberT.psi()</target>
        </trans-unit>
        <trans-unit id="6507586706695cda514075f8e2ee87179d960a7f" translate="yes" xml:space="preserve">
          <source>HuberT.psi_deriv()</source>
          <target state="translated">HuberT.psi_deriv()</target>
        </trans-unit>
        <trans-unit id="d5835fc5f60bfe125204065346937bd2116d96cf" translate="yes" xml:space="preserve">
          <source>HuberT.rho()</source>
          <target state="translated">HuberT.rho()</target>
        </trans-unit>
        <trans-unit id="653f61909d67c66899b9f26f22acff49d578ea4f" translate="yes" xml:space="preserve">
          <source>HuberT.weights()</source>
          <target state="translated">HuberT.weights()</target>
        </trans-unit>
        <trans-unit id="73179568b18743a871c68503271a993e5de73c29" translate="yes" xml:space="preserve">
          <source>Hypothesis &lt;code&gt;L*B*M = C&lt;/code&gt; to be tested where B is the parameters in regression Y = X*B. Each element is a tuple of length 2, 3, or 4:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f68cdcf3d78523f52e40c1e929ae6c2e45140d91" translate="yes" xml:space="preserve">
          <source>HypothesisTestResults.summary()</source>
          <target state="translated">HypothesisTestResults.summary()</target>
        </trans-unit>
        <trans-unit id="ca73ab65568cd125c2d27a22bbd9e863c10b675d" translate="yes" xml:space="preserve">
          <source>I</source>
          <target state="translated">I</target>
        </trans-unit>
        <trans-unit id="d17e0702ecc145022047362a90d171c59e8686ec" translate="yes" xml:space="preserve">
          <source>I : add constant</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6300f446d32457e42cc87d15ab537e0dfb770da" translate="yes" xml:space="preserve">
          <source>I guess this is missing a division by nobs, what&amp;rsquo;s the normalization in jval ?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d837b83497ba392def6af254a73f9d550802a7d8" translate="yes" xml:space="preserve">
          <source>I think other conversions to normality can be used, but I need to check.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89f89c02cf47e091e726a4e07b88af0966806897" translate="yes" xml:space="preserve">
          <source>ID</source>
          <target state="translated">ID</target>
        </trans-unit>
        <trans-unit id="e95267a3d7c90357edbf0c964cb1dce18c03ec87" translate="yes" xml:space="preserve">
          <source>II</source>
          <target state="translated">II</target>
        </trans-unit>
        <trans-unit id="a6178c525a0d5f1233c6fdb6103036d292bf056a" translate="yes" xml:space="preserve">
          <source>III</source>
          <target state="translated">III</target>
        </trans-unit>
        <trans-unit id="e1148c17d6cb1b0210648925cafa300573128df2" translate="yes" xml:space="preserve">
          <source>INVERT_CHOLESKY = 0x10</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c93019f08ec2c41266e7a19acb83340c63fd0c32" translate="yes" xml:space="preserve">
          <source>INVERT_LU = 0x04</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3dae9f68bb57a4f631c65acc10822c85c2d3e430" translate="yes" xml:space="preserve">
          <source>INVERT_UNIVARIATE = 0x01</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19e95697471f0174e947adfc9b023c91bf191e28" translate="yes" xml:space="preserve">
          <source>IRAnalysis</source>
          <target state="translated">IRAnalysis</target>
        </trans-unit>
        <trans-unit id="d0466b925026bf5e532d64f91bb91be8549c02bb" translate="yes" xml:space="preserve">
          <source>IRAnalysis.G()</source>
          <target state="translated">IRAnalysis.G()</target>
        </trans-unit>
        <trans-unit id="fc2b20598851b9d71e77ec89376846d608936c0c" translate="yes" xml:space="preserve">
          <source>IRAnalysis.H()</source>
          <target state="translated">IRAnalysis.H()</target>
        </trans-unit>
        <trans-unit id="9c271dde365f3b288ceb38c48f841fe1286ce8c7" translate="yes" xml:space="preserve">
          <source>IRAnalysis.cov()</source>
          <target state="translated">IRAnalysis.cov()</target>
        </trans-unit>
        <trans-unit id="8d672ed8363932a6db03be34c7f820dcabd65b06" translate="yes" xml:space="preserve">
          <source>IRAnalysis.cum_effect_cov()</source>
          <target state="translated">IRAnalysis.cum_effect_cov()</target>
        </trans-unit>
        <trans-unit id="6a554831842968c38513051f175078571305400e" translate="yes" xml:space="preserve">
          <source>IRAnalysis.cum_effect_stderr()</source>
          <target state="translated">IRAnalysis.cum_effect_stderr()</target>
        </trans-unit>
        <trans-unit id="fa603e57420154256fa90ae457a1d7c18ab5fd76" translate="yes" xml:space="preserve">
          <source>IRAnalysis.cum_errband_mc()</source>
          <target state="translated">IRAnalysis.cum_errband_mc()</target>
        </trans-unit>
        <trans-unit id="fd02a90c9a4142ad4e29ef8badaa958c251f111b" translate="yes" xml:space="preserve">
          <source>IRAnalysis.err_band_sz1()</source>
          <target state="translated">IRAnalysis.err_band_sz1()</target>
        </trans-unit>
        <trans-unit id="8583c1450a585cdaae7161ff9752541b83f5088d" translate="yes" xml:space="preserve">
          <source>IRAnalysis.err_band_sz2()</source>
          <target state="translated">IRAnalysis.err_band_sz2()</target>
        </trans-unit>
        <trans-unit id="309c3cff2bb1c07964754989af9d4d5a561500e0" translate="yes" xml:space="preserve">
          <source>IRAnalysis.err_band_sz3()</source>
          <target state="translated">IRAnalysis.err_band_sz3()</target>
        </trans-unit>
        <trans-unit id="9aebe71d2fe5359b97fd8fcc9f448121e5cb4c8e" translate="yes" xml:space="preserve">
          <source>IRAnalysis.errband_mc()</source>
          <target state="translated">IRAnalysis.errband_mc()</target>
        </trans-unit>
        <trans-unit id="ee218289cd2bc1f6ff8d6b4563976b7c200284c8" translate="yes" xml:space="preserve">
          <source>IRAnalysis.fevd_table()</source>
          <target state="translated">IRAnalysis.fevd_table()</target>
        </trans-unit>
        <trans-unit id="c3d8185e4dd642a7036009cdbd7be4786443af5f" translate="yes" xml:space="preserve">
          <source>IRAnalysis.lr_effect_cov()</source>
          <target state="translated">IRAnalysis.lr_effect_cov()</target>
        </trans-unit>
        <trans-unit id="7eb0af83a9244cabff8086cfe7d82a769933d1d0" translate="yes" xml:space="preserve">
          <source>IRAnalysis.lr_effect_stderr()</source>
          <target state="translated">IRAnalysis.lr_effect_stderr()</target>
        </trans-unit>
        <trans-unit id="27accaa10990b2884a6bde6458f71db89cc7881c" translate="yes" xml:space="preserve">
          <source>IRAnalysis.plot()</source>
          <target state="translated">IRAnalysis.plot()</target>
        </trans-unit>
        <trans-unit id="f4d3e448aedbc4ea71173fd56c351514bbf81de7" translate="yes" xml:space="preserve">
          <source>IRAnalysis.plot_cum_effects()</source>
          <target state="translated">IRAnalysis.plot_cum_effects()</target>
        </trans-unit>
        <trans-unit id="5b1ef98d307bf73163e83e79b851c721c3054774" translate="yes" xml:space="preserve">
          <source>IRAnalysis.stderr()</source>
          <target state="translated">IRAnalysis.stderr()</target>
        </trans-unit>
        <trans-unit id="7437bb3306198f71bf59f54d7108b7b5a206d3e7" translate="yes" xml:space="preserve">
          <source>IRF Monte Carlo integrated error bands</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7b9f999a2a0450883d4f3a84b2092b18863e935" translate="yes" xml:space="preserve">
          <source>IRF Monte Carlo integrated error bands of cumulative effect</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c1b7a7a057030a2f6c56525d0fe65ebce824071" translate="yes" xml:space="preserve">
          <source>IRF Sims-Zha error band method 1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7b48e50e99a7baef865886f4971b87827d41ec8" translate="yes" xml:space="preserve">
          <source>IRF Sims-Zha error band method 1. Assumes symmetric error bands around mean.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab9097ad68a45817b221ca7edaed7b19caf0c366" translate="yes" xml:space="preserve">
          <source>IRF Sims-Zha error band method 2.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa71841e0d467f1aa72acb420a6977d0dd41fa0c" translate="yes" xml:space="preserve">
          <source>IRF Sims-Zha error band method 3.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1cdf0b78a8bbea1ec7da5396d2bb5fe531acc2ca" translate="yes" xml:space="preserve">
          <source>IRF Sims-Zha error band method 3. Does not assume symmetric error bands around mean.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c2b3fb4c903131403dac9b7bf9deb77a93d6e7b" translate="yes" xml:space="preserve">
          <source>IRLS</source>
          <target state="translated">IRLS</target>
        </trans-unit>
        <trans-unit id="932eaaf5a36529c34a7868b56cba634f534f39b4" translate="yes" xml:space="preserve">
          <source>IV</source>
          <target state="translated">IV</target>
        </trans-unit>
        <trans-unit id="763933cd894b13b133daf98cdf7c12cf94df6719" translate="yes" xml:space="preserve">
          <source>IV2SLS.fit()</source>
          <target state="translated">IV2SLS.fit()</target>
        </trans-unit>
        <trans-unit id="9ce6033b4552f21aa9b569080d22beb46b3a0961" translate="yes" xml:space="preserve">
          <source>IV2SLS.from_formula()</source>
          <target state="translated">IV2SLS.from_formula()</target>
        </trans-unit>
        <trans-unit id="5baa3ac2adf24470b6a536b385b47c52c93d755c" translate="yes" xml:space="preserve">
          <source>IV2SLS.hessian()</source>
          <target state="translated">IV2SLS.hessian()</target>
        </trans-unit>
        <trans-unit id="6f8041f9672e9f6b7cd9040285b74f08830ec1d6" translate="yes" xml:space="preserve">
          <source>IV2SLS.information()</source>
          <target state="translated">IV2SLS.information()</target>
        </trans-unit>
        <trans-unit id="6b51d1fb6dce06fbd72a63133c798a7f84342cff" translate="yes" xml:space="preserve">
          <source>IV2SLS.initialize()</source>
          <target state="translated">IV2SLS.initialize()</target>
        </trans-unit>
        <trans-unit id="bc086df3d391d23b9011fd1475eb6ac50abbf63d" translate="yes" xml:space="preserve">
          <source>IV2SLS.loglike()</source>
          <target state="translated">IV2SLS.loglike()</target>
        </trans-unit>
        <trans-unit id="38785237be92b56b9ba82950e0d1f602ae337f6a" translate="yes" xml:space="preserve">
          <source>IV2SLS.predict()</source>
          <target state="translated">IV2SLS.predict()</target>
        </trans-unit>
        <trans-unit id="cfe50e840c090b51a0559487d34a191c8455b384" translate="yes" xml:space="preserve">
          <source>IV2SLS.score()</source>
          <target state="translated">IV2SLS.score()</target>
        </trans-unit>
        <trans-unit id="dbfdd777c2b216640028fdb58b4de004018a057f" translate="yes" xml:space="preserve">
          <source>IV2SLS.whiten()</source>
          <target state="translated">IV2SLS.whiten()</target>
        </trans-unit>
        <trans-unit id="5ff3f72d6b82d2ee1786da7c1ed0f5f0fae50a10" translate="yes" xml:space="preserve">
          <source>IVGMM.calc_weightmatrix()</source>
          <target state="translated">IVGMM.calc_weightmatrix()</target>
        </trans-unit>
        <trans-unit id="fab854980a59bd4a9b8a218774755c9cb6c900c2" translate="yes" xml:space="preserve">
          <source>IVGMM.fit()</source>
          <target state="translated">IVGMM.fit()</target>
        </trans-unit>
        <trans-unit id="a97a99d7b510c1ecb0026de685f0bd156a781577" translate="yes" xml:space="preserve">
          <source>IVGMM.fitgmm()</source>
          <target state="translated">IVGMM.fitgmm()</target>
        </trans-unit>
        <trans-unit id="2c425abd98e3f0f05dc37efbc7df103e1b0737a1" translate="yes" xml:space="preserve">
          <source>IVGMM.fitgmm_cu()</source>
          <target state="translated">IVGMM.fitgmm_cu()</target>
        </trans-unit>
        <trans-unit id="4e74a788306ba366e964d37d241685aa98e6657c" translate="yes" xml:space="preserve">
          <source>IVGMM.fititer()</source>
          <target state="translated">IVGMM.fititer()</target>
        </trans-unit>
        <trans-unit id="4fafb711bf71358c4b7c8377e5326482f215b4ed" translate="yes" xml:space="preserve">
          <source>IVGMM.fitstart()</source>
          <target state="translated">IVGMM.fitstart()</target>
        </trans-unit>
        <trans-unit id="ffd3a5b24d18eaec66ebb03a237c3909873d329a" translate="yes" xml:space="preserve">
          <source>IVGMM.from_formula()</source>
          <target state="translated">IVGMM.from_formula()</target>
        </trans-unit>
        <trans-unit id="323a4c25c5ecab58a78eac30cf3d48f3002f018e" translate="yes" xml:space="preserve">
          <source>IVGMM.get_error()</source>
          <target state="translated">IVGMM.get_error()</target>
        </trans-unit>
        <trans-unit id="fa157560eaab40a2038c940e414831129dcf2428" translate="yes" xml:space="preserve">
          <source>IVGMM.gmmobjective()</source>
          <target state="translated">IVGMM.gmmobjective()</target>
        </trans-unit>
        <trans-unit id="8cb0ba96dbc3c6a9b8f4f74624093ba19adde5fb" translate="yes" xml:space="preserve">
          <source>IVGMM.gmmobjective_cu()</source>
          <target state="translated">IVGMM.gmmobjective_cu()</target>
        </trans-unit>
        <trans-unit id="c21d8010af647763d109d216937c97a062a0d4ec" translate="yes" xml:space="preserve">
          <source>IVGMM.gradient_momcond()</source>
          <target state="translated">IVGMM.gradient_momcond()</target>
        </trans-unit>
        <trans-unit id="32f0f882e32c27cb70e82ede46b821273a5e3cfa" translate="yes" xml:space="preserve">
          <source>IVGMM.momcond()</source>
          <target state="translated">IVGMM.momcond()</target>
        </trans-unit>
        <trans-unit id="c96b218b299e3e29248e0e2eb9bb4dbe2f684c5b" translate="yes" xml:space="preserve">
          <source>IVGMM.momcond_mean()</source>
          <target state="translated">IVGMM.momcond_mean()</target>
        </trans-unit>
        <trans-unit id="ded0db9ff4287bbf57b63af0a77be051cda19ad4" translate="yes" xml:space="preserve">
          <source>IVGMM.predict()</source>
          <target state="translated">IVGMM.predict()</target>
        </trans-unit>
        <trans-unit id="c8842de080a2c3ffbb6b04dada855ab962891f5b" translate="yes" xml:space="preserve">
          <source>IVGMM.score()</source>
          <target state="translated">IVGMM.score()</target>
        </trans-unit>
        <trans-unit id="12d922a3b79f7aafb002292ed6c6df12a71b82d3" translate="yes" xml:space="preserve">
          <source>IVGMM.score_cu()</source>
          <target state="translated">IVGMM.score_cu()</target>
        </trans-unit>
        <trans-unit id="82594d0fb174036711a21de4192f05da5168b457" translate="yes" xml:space="preserve">
          <source>IVGMM.set_param_names()</source>
          <target state="translated">IVGMM.set_param_names()</target>
        </trans-unit>
        <trans-unit id="aeb43cf4381ef790d11fb84d3e77336a9b65ff33" translate="yes" xml:space="preserve">
          <source>IVGMM.start_weights()</source>
          <target state="translated">IVGMM.start_weights()</target>
        </trans-unit>
        <trans-unit id="b10393864a62c11bdb553d90dd5b3ed7132425e4" translate="yes" xml:space="preserve">
          <source>IVGMMResults.bse()</source>
          <target state="translated">IVGMMResults.bse()</target>
        </trans-unit>
        <trans-unit id="d06bf40473f9d54e3d36855677de9d0aa8cbf9ca" translate="yes" xml:space="preserve">
          <source>IVGMMResults.calc_cov_params()</source>
          <target state="translated">IVGMMResults.calc_cov_params()</target>
        </trans-unit>
        <trans-unit id="9a56bfa71a6da5312a2850f651ed8eb287958fb1" translate="yes" xml:space="preserve">
          <source>IVGMMResults.compare_j()</source>
          <target state="translated">IVGMMResults.compare_j()</target>
        </trans-unit>
        <trans-unit id="85dae8f35b04a25fc25b2507a0345919153e70d3" translate="yes" xml:space="preserve">
          <source>IVGMMResults.conf_int()</source>
          <target state="translated">IVGMMResults.conf_int()</target>
        </trans-unit>
        <trans-unit id="5efec7d380163fff7f4841373236fe120edfd125" translate="yes" xml:space="preserve">
          <source>IVGMMResults.cov_params()</source>
          <target state="translated">IVGMMResults.cov_params()</target>
        </trans-unit>
        <trans-unit id="2d2a11d01c21b04de69de5664327d5803ed58f6e" translate="yes" xml:space="preserve">
          <source>IVGMMResults.f_test()</source>
          <target state="translated">IVGMMResults.f_test()</target>
        </trans-unit>
        <trans-unit id="f4e94fd86a1e264a0a66901693305aca14da5b6a" translate="yes" xml:space="preserve">
          <source>IVGMMResults.fittedvalues()</source>
          <target state="translated">IVGMMResults.fittedvalues()</target>
        </trans-unit>
        <trans-unit id="ba36e540478a3edafe4ba95e9a4191cac82e95ee" translate="yes" xml:space="preserve">
          <source>IVGMMResults.get_bse()</source>
          <target state="translated">IVGMMResults.get_bse()</target>
        </trans-unit>
        <trans-unit id="abec704aa6b9babb61a323ccc47d7242488c4ae1" translate="yes" xml:space="preserve">
          <source>IVGMMResults.initialize()</source>
          <target state="translated">IVGMMResults.initialize()</target>
        </trans-unit>
        <trans-unit id="01b4dda41a0f63c07dbd57d27ba15198cad67986" translate="yes" xml:space="preserve">
          <source>IVGMMResults.jtest()</source>
          <target state="translated">IVGMMResults.jtest()</target>
        </trans-unit>
        <trans-unit id="dd3827cadaa68555e0e9a4b22ec5616aa7cfcbf4" translate="yes" xml:space="preserve">
          <source>IVGMMResults.jval()</source>
          <target state="translated">IVGMMResults.jval()</target>
        </trans-unit>
        <trans-unit id="954fb3565ca03e15faef109199b602d5fc9c26b8" translate="yes" xml:space="preserve">
          <source>IVGMMResults.llf()</source>
          <target state="translated">IVGMMResults.llf()</target>
        </trans-unit>
        <trans-unit id="bd3bb2c7a22b2f64fa1d886c25abeb1969e1f402" translate="yes" xml:space="preserve">
          <source>IVGMMResults.load()</source>
          <target state="translated">IVGMMResults.load()</target>
        </trans-unit>
        <trans-unit id="385f394444a4dd593b8609d2bdcc6b64720c81c5" translate="yes" xml:space="preserve">
          <source>IVGMMResults.normalized_cov_params()</source>
          <target state="translated">IVGMMResults.normalized_cov_params()</target>
        </trans-unit>
        <trans-unit id="75064e6bed826e5db701184ee249ac194675d750" translate="yes" xml:space="preserve">
          <source>IVGMMResults.predict()</source>
          <target state="translated">IVGMMResults.predict()</target>
        </trans-unit>
        <trans-unit id="b4515884db0a1e6353cd855e767c799c9d3fea7a" translate="yes" xml:space="preserve">
          <source>IVGMMResults.pvalues()</source>
          <target state="translated">IVGMMResults.pvalues()</target>
        </trans-unit>
        <trans-unit id="28a652c87a6de262f3b50c5fc1edf0e5158c528b" translate="yes" xml:space="preserve">
          <source>IVGMMResults.q()</source>
          <target state="translated">IVGMMResults.q()</target>
        </trans-unit>
        <trans-unit id="c4d4ad3245156c60d74c37d62a5087cdb468273a" translate="yes" xml:space="preserve">
          <source>IVGMMResults.remove_data()</source>
          <target state="translated">IVGMMResults.remove_data()</target>
        </trans-unit>
        <trans-unit id="6a4e7ddce6bd7a90dcdb9ce6de189779e6761670" translate="yes" xml:space="preserve">
          <source>IVGMMResults.resid()</source>
          <target state="translated">IVGMMResults.resid()</target>
        </trans-unit>
        <trans-unit id="0f4d3fa102d8a55d93a43c919ec197bd4e61f205" translate="yes" xml:space="preserve">
          <source>IVGMMResults.save()</source>
          <target state="translated">IVGMMResults.save()</target>
        </trans-unit>
        <trans-unit id="25251956e8b61e6214f6276923572db6399d4561" translate="yes" xml:space="preserve">
          <source>IVGMMResults.ssr()</source>
          <target state="translated">IVGMMResults.ssr()</target>
        </trans-unit>
        <trans-unit id="b83748acdf7206aa56cd528cfe0868ec7b785dab" translate="yes" xml:space="preserve">
          <source>IVGMMResults.summary()</source>
          <target state="translated">IVGMMResults.summary()</target>
        </trans-unit>
        <trans-unit id="6ccb1149e1931eee5244e9929c7461641008ea23" translate="yes" xml:space="preserve">
          <source>IVGMMResults.t_test()</source>
          <target state="translated">IVGMMResults.t_test()</target>
        </trans-unit>
        <trans-unit id="9da92fbfd028a8269d8f083dde34ef0e3500e35f" translate="yes" xml:space="preserve">
          <source>IVGMMResults.t_test_pairwise()</source>
          <target state="translated">IVGMMResults.t_test_pairwise()</target>
        </trans-unit>
        <trans-unit id="8cce61640708f564447e837a9fa89076ac5585bd" translate="yes" xml:space="preserve">
          <source>IVGMMResults.tvalues()</source>
          <target state="translated">IVGMMResults.tvalues()</target>
        </trans-unit>
        <trans-unit id="ce03d7dbeccfce309def9a3019ceb206680fc057" translate="yes" xml:space="preserve">
          <source>IVGMMResults.wald_test()</source>
          <target state="translated">IVGMMResults.wald_test()</target>
        </trans-unit>
        <trans-unit id="d2656e71fcb5a6e2663daa5626c1ca2a561701be" translate="yes" xml:space="preserve">
          <source>IVGMMResults.wald_test_terms()</source>
          <target state="translated">IVGMMResults.wald_test_terms()</target>
        </trans-unit>
        <trans-unit id="b0af0ceb6fe42cc3d0c0336ad8f532002fe20660" translate="yes" xml:space="preserve">
          <source>IVRegressionResults.HC0_se()</source>
          <target state="translated">IVRegressionResults.HC0_se()</target>
        </trans-unit>
        <trans-unit id="3d8c754bb81e95b208ed12213b7bf0172e16f577" translate="yes" xml:space="preserve">
          <source>IVRegressionResults.HC1_se()</source>
          <target state="translated">IVRegressionResults.HC1_se()</target>
        </trans-unit>
        <trans-unit id="4d67318063695bd8d847751b5801c945a3400694" translate="yes" xml:space="preserve">
          <source>IVRegressionResults.HC2_se()</source>
          <target state="translated">IVRegressionResults.HC2_se()</target>
        </trans-unit>
        <trans-unit id="7d6473fc3dd287b5ce00217b9f808ad55e08315e" translate="yes" xml:space="preserve">
          <source>IVRegressionResults.HC3_se()</source>
          <target state="translated">IVRegressionResults.HC3_se()</target>
        </trans-unit>
        <trans-unit id="c2d5095c3fbe8e501d70fbc2ab5fe41dd704c326" translate="yes" xml:space="preserve">
          <source>IVRegressionResults.aic()</source>
          <target state="translated">IVRegressionResults.aic()</target>
        </trans-unit>
        <trans-unit id="21b7b1cd5d1f654a6a238d70e5ec757fb84ad03a" translate="yes" xml:space="preserve">
          <source>IVRegressionResults.bic()</source>
          <target state="translated">IVRegressionResults.bic()</target>
        </trans-unit>
        <trans-unit id="d1a5ffac8d3702312c278efaefca56c956c2bcc7" translate="yes" xml:space="preserve">
          <source>IVRegressionResults.bse()</source>
          <target state="translated">IVRegressionResults.bse()</target>
        </trans-unit>
        <trans-unit id="eb175c43eda2e88ab7bc4877ea0805a6e27b3bda" translate="yes" xml:space="preserve">
          <source>IVRegressionResults.centered_tss()</source>
          <target state="translated">IVRegressionResults.centered_tss()</target>
        </trans-unit>
        <trans-unit id="ccb095d2b809cfe6bfcec9191ad64d55321fbd7f" translate="yes" xml:space="preserve">
          <source>IVRegressionResults.compare_f_test()</source>
          <target state="translated">IVRegressionResults.compare_f_test()</target>
        </trans-unit>
        <trans-unit id="ece9b6f8deb3c7a717375e35a5c94b5aa2ec1b10" translate="yes" xml:space="preserve">
          <source>IVRegressionResults.compare_lm_test()</source>
          <target state="translated">IVRegressionResults.compare_lm_test()</target>
        </trans-unit>
        <trans-unit id="64ebf4ab1d488e50eca9e811a61b70579e968f69" translate="yes" xml:space="preserve">
          <source>IVRegressionResults.compare_lr_test()</source>
          <target state="translated">IVRegressionResults.compare_lr_test()</target>
        </trans-unit>
        <trans-unit id="a8a24910d7fd01740c73a1f08ad28d72852f581d" translate="yes" xml:space="preserve">
          <source>IVRegressionResults.condition_number()</source>
          <target state="translated">IVRegressionResults.condition_number()</target>
        </trans-unit>
        <trans-unit id="3fcba5d5351e57a79d1017f940b9f91f8c55cca4" translate="yes" xml:space="preserve">
          <source>IVRegressionResults.conf_int()</source>
          <target state="translated">IVRegressionResults.conf_int()</target>
        </trans-unit>
        <trans-unit id="b1045b42ea3184298a476caecae1e36e2cbc71d0" translate="yes" xml:space="preserve">
          <source>IVRegressionResults.cov_HC0()</source>
          <target state="translated">IVRegressionResults.cov_HC0()</target>
        </trans-unit>
        <trans-unit id="1907f7f99337c87b4c7ef3be13cc1ae2f40eca21" translate="yes" xml:space="preserve">
          <source>IVRegressionResults.cov_HC1()</source>
          <target state="translated">IVRegressionResults.cov_HC1()</target>
        </trans-unit>
        <trans-unit id="59ece154a7646234c942cc97e9893c046d091e19" translate="yes" xml:space="preserve">
          <source>IVRegressionResults.cov_HC2()</source>
          <target state="translated">IVRegressionResults.cov_HC2()</target>
        </trans-unit>
        <trans-unit id="4c74f6c3f1be1f320a35c95c552bcc2deccf55aa" translate="yes" xml:space="preserve">
          <source>IVRegressionResults.cov_HC3()</source>
          <target state="translated">IVRegressionResults.cov_HC3()</target>
        </trans-unit>
        <trans-unit id="ee165d2d715066090715f7ced4f4ffc13a4d7a83" translate="yes" xml:space="preserve">
          <source>IVRegressionResults.cov_params()</source>
          <target state="translated">IVRegressionResults.cov_params()</target>
        </trans-unit>
        <trans-unit id="fcd83a630427f257f7690c12a7df7df3e542dc84" translate="yes" xml:space="preserve">
          <source>IVRegressionResults.eigenvals()</source>
          <target state="translated">IVRegressionResults.eigenvals()</target>
        </trans-unit>
        <trans-unit id="5a8a43effe7e8f52bf5d332c4b702cf030ed1385" translate="yes" xml:space="preserve">
          <source>IVRegressionResults.ess()</source>
          <target state="translated">IVRegressionResults.ess()</target>
        </trans-unit>
        <trans-unit id="09ff50c934212706e6d91a5002ea27f2bdd38eab" translate="yes" xml:space="preserve">
          <source>IVRegressionResults.f_pvalue()</source>
          <target state="translated">IVRegressionResults.f_pvalue()</target>
        </trans-unit>
        <trans-unit id="3b2086b4d23954b9985ec3f3f395e938397d47f4" translate="yes" xml:space="preserve">
          <source>IVRegressionResults.f_test()</source>
          <target state="translated">IVRegressionResults.f_test()</target>
        </trans-unit>
        <trans-unit id="812b49448db15bb89b8428d1da0f6dc7bd5d79ae" translate="yes" xml:space="preserve">
          <source>IVRegressionResults.fittedvalues()</source>
          <target state="translated">IVRegressionResults.fittedvalues()</target>
        </trans-unit>
        <trans-unit id="47ffbee91c037d90398de8873a3463214e1287e8" translate="yes" xml:space="preserve">
          <source>IVRegressionResults.fvalue()</source>
          <target state="translated">IVRegressionResults.fvalue()</target>
        </trans-unit>
        <trans-unit id="406c4c95fe5c7b1175cb9d2fd5f9d4d2c90b2034" translate="yes" xml:space="preserve">
          <source>IVRegressionResults.get_prediction()</source>
          <target state="translated">IVRegressionResults.get_prediction()</target>
        </trans-unit>
        <trans-unit id="53808629c80eab15150c6cfa38cc7c973a666e81" translate="yes" xml:space="preserve">
          <source>IVRegressionResults.get_robustcov_results()</source>
          <target state="translated">IVRegressionResults.get_robustcov_results()</target>
        </trans-unit>
        <trans-unit id="f9050f5e5213cf0f18ef350508908728b832d9d4" translate="yes" xml:space="preserve">
          <source>IVRegressionResults.initialize()</source>
          <target state="translated">IVRegressionResults.initialize()</target>
        </trans-unit>
        <trans-unit id="cca3fc2820c2fafa689b6966950a92157f43acd9" translate="yes" xml:space="preserve">
          <source>IVRegressionResults.llf()</source>
          <target state="translated">IVRegressionResults.llf()</target>
        </trans-unit>
        <trans-unit id="6e68c5cc7eba147dc19ff0a684ca9863d560a9d7" translate="yes" xml:space="preserve">
          <source>IVRegressionResults.load()</source>
          <target state="translated">IVRegressionResults.load()</target>
        </trans-unit>
        <trans-unit id="2e5c977d00ffa583a829bc88552aea16a43bd837" translate="yes" xml:space="preserve">
          <source>IVRegressionResults.mse_model()</source>
          <target state="translated">IVRegressionResults.mse_model()</target>
        </trans-unit>
        <trans-unit id="e8cf18e4828a138008400590d83fa3e477064775" translate="yes" xml:space="preserve">
          <source>IVRegressionResults.mse_resid()</source>
          <target state="translated">IVRegressionResults.mse_resid()</target>
        </trans-unit>
        <trans-unit id="8100327832c94cdaefb1487c4a983fe86401cf1b" translate="yes" xml:space="preserve">
          <source>IVRegressionResults.mse_total()</source>
          <target state="translated">IVRegressionResults.mse_total()</target>
        </trans-unit>
        <trans-unit id="cb2e41d2d1e63c3c45525dd500a9bb39e997927f" translate="yes" xml:space="preserve">
          <source>IVRegressionResults.nobs()</source>
          <target state="translated">IVRegressionResults.nobs()</target>
        </trans-unit>
        <trans-unit id="4727aed29ad95e5ad4f873a81985f7c5c03f39a3" translate="yes" xml:space="preserve">
          <source>IVRegressionResults.normalized_cov_params()</source>
          <target state="translated">IVRegressionResults.normalized_cov_params()</target>
        </trans-unit>
        <trans-unit id="972f0dc901c5e6297b8947de61577d03fed05878" translate="yes" xml:space="preserve">
          <source>IVRegressionResults.predict()</source>
          <target state="translated">IVRegressionResults.predict()</target>
        </trans-unit>
        <trans-unit id="172ed92aacfa3841e086c7b3fce9e55ab194f977" translate="yes" xml:space="preserve">
          <source>IVRegressionResults.pvalues()</source>
          <target state="translated">IVRegressionResults.pvalues()</target>
        </trans-unit>
        <trans-unit id="0dfd8552094426d6150f5a1a0acbd13594665a3b" translate="yes" xml:space="preserve">
          <source>IVRegressionResults.remove_data()</source>
          <target state="translated">IVRegressionResults.remove_data()</target>
        </trans-unit>
        <trans-unit id="5d864e0958692564b177728c2954d1287e6e9b85" translate="yes" xml:space="preserve">
          <source>IVRegressionResults.resid()</source>
          <target state="translated">IVRegressionResults.resid()</target>
        </trans-unit>
        <trans-unit id="07625fb2123c70d06e6d9e3bff017afbbe001638" translate="yes" xml:space="preserve">
          <source>IVRegressionResults.resid_pearson()</source>
          <target state="translated">IVRegressionResults.resid_pearson()</target>
        </trans-unit>
        <trans-unit id="1560f7de9019e6867bd7344a5126ef801772709e" translate="yes" xml:space="preserve">
          <source>IVRegressionResults.rsquared()</source>
          <target state="translated">IVRegressionResults.rsquared()</target>
        </trans-unit>
        <trans-unit id="b7c7bc10fabc23f6efe601b04d5c41a49b73c629" translate="yes" xml:space="preserve">
          <source>IVRegressionResults.rsquared_adj()</source>
          <target state="translated">IVRegressionResults.rsquared_adj()</target>
        </trans-unit>
        <trans-unit id="ffe73863309c4df3c273be5774606cddeec56fba" translate="yes" xml:space="preserve">
          <source>IVRegressionResults.save()</source>
          <target state="translated">IVRegressionResults.save()</target>
        </trans-unit>
        <trans-unit id="1287f0308237b26baac93749746037d90b7c2d48" translate="yes" xml:space="preserve">
          <source>IVRegressionResults.scale()</source>
          <target state="translated">IVRegressionResults.scale()</target>
        </trans-unit>
        <trans-unit id="6f0f1bca540df9d25d8abba36d6e3e334c2e84eb" translate="yes" xml:space="preserve">
          <source>IVRegressionResults.spec_hausman()</source>
          <target state="translated">IVRegressionResults.spec_hausman()</target>
        </trans-unit>
        <trans-unit id="fd7b2e0f7b5a858eba8bc45f4279a4df1fa13643" translate="yes" xml:space="preserve">
          <source>IVRegressionResults.ssr()</source>
          <target state="translated">IVRegressionResults.ssr()</target>
        </trans-unit>
        <trans-unit id="edd9c1a9d71c1074765aa3988a67918b53c17e71" translate="yes" xml:space="preserve">
          <source>IVRegressionResults.summary()</source>
          <target state="translated">IVRegressionResults.summary()</target>
        </trans-unit>
        <trans-unit id="090b92921a363c3756619eaf9fb6b023f7140163" translate="yes" xml:space="preserve">
          <source>IVRegressionResults.summary2()</source>
          <target state="translated">IVRegressionResults.summary2()</target>
        </trans-unit>
        <trans-unit id="21cc5046a23192deafbfdaca631c1badd89bfcd2" translate="yes" xml:space="preserve">
          <source>IVRegressionResults.t_test()</source>
          <target state="translated">IVRegressionResults.t_test()</target>
        </trans-unit>
        <trans-unit id="1ddb44a04f869102e7fab4acd9e5c419dee9ce25" translate="yes" xml:space="preserve">
          <source>IVRegressionResults.t_test_pairwise()</source>
          <target state="translated">IVRegressionResults.t_test_pairwise()</target>
        </trans-unit>
        <trans-unit id="b326e8090ddfd0f8af95a39d3f5e1b2fcc982d28" translate="yes" xml:space="preserve">
          <source>IVRegressionResults.tvalues()</source>
          <target state="translated">IVRegressionResults.tvalues()</target>
        </trans-unit>
        <trans-unit id="8c937e267388961a4823fa433d3828500e253522" translate="yes" xml:space="preserve">
          <source>IVRegressionResults.uncentered_tss()</source>
          <target state="translated">IVRegressionResults.uncentered_tss()</target>
        </trans-unit>
        <trans-unit id="c4f6c8702a570372fcd558ff7c569707a739ba6c" translate="yes" xml:space="preserve">
          <source>IVRegressionResults.wald_test()</source>
          <target state="translated">IVRegressionResults.wald_test()</target>
        </trans-unit>
        <trans-unit id="905eb972e0b9fcaec07d76a04a63b286717739ed" translate="yes" xml:space="preserve">
          <source>IVRegressionResults.wald_test_terms()</source>
          <target state="translated">IVRegressionResults.wald_test_terms()</target>
        </trans-unit>
        <trans-unit id="41906216dfd1c1c7aa0b61a0a6d508362e14d52a" translate="yes" xml:space="preserve">
          <source>IVRegressionResults.wresid()</source>
          <target state="translated">IVRegressionResults.wresid()</target>
        </trans-unit>
        <trans-unit id="49f36c528e813753bf3dbb9375414fa32a4f90d4" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;data1&lt;/code&gt; and &lt;code&gt;data2&lt;/code&gt; are not &lt;code&gt;ProbPlot&lt;/code&gt; instances, instances will be created using the default parameters. Therefore, it is recommended to use &lt;code&gt;ProbPlot&lt;/code&gt; instance if fine-grained control is needed in the computation of the quantiles.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db9240b5fbcc0770aee06c8b7c995913d1eb5381" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;endog&lt;/code&gt; is a 2d array, then the input is assumed to be in the format</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41c6ff02331f549b4d34972044fb649f843c7bc6" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;endog&lt;/code&gt; is binary, returns &lt;code&gt;endog&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7582c70a0d0f60bb11c2385000a07697f891765" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;func&lt;/code&gt; is not equal to the default, what&amp;rsquo;s calculated is a function of the leave-one-out conditional likelihood.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62ef43d589627460b29c8982bb2f04e2c9de50d6" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;hypotheses&lt;/code&gt; is None: 1) the effect of each independent variable on the dependent variables will be tested. Or 2) if model is created using a formula, &lt;code&gt;hypotheses&lt;/code&gt; will be created according to &lt;code&gt;design_info&lt;/code&gt;. 1) and 2) is equivalent if no additional variables are created by the formula (e.g. dummy variables for categorical variables and interaction terms)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ccef339d464ac35ddb4581ef70a2b12314aa9a2" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;loglikelihood_burn&lt;/code&gt; is positive, then the entries in the returned loglikelihood vector are set to be zero for those initial time periods.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be591901f2dfc930fdcc2ed4ee3f00a8c1e997bf" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;mle_regression&lt;/code&gt; is True, regression coefficients are treated as additional parameters to be estimated via maximum likelihood. Otherwise they are included as part of the state with a diffuse initialization. In this case, however, with approximate diffuse initialization, results can be sensitive to the initial variance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8547ea491199cc81c9f921815026b4c03b70099a" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;return_pandas&lt;/code&gt; = False, returns an ndarray containing the same values as the Series/DataFrame.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ccc832591ee233bb36febc044c4366cfea06003" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;transform_variance=True&lt;/code&gt;, then only Lemma 2.1 is applied in the second step.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0526bb0812101a9e6089033a3801aeb04969e2b7" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;x1&lt;/code&gt; and &lt;code&gt;x2&lt;/code&gt; have different shapes, then they need to broadcast.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3dcbfbb9090879c6736e225441d93dd9ab63d5d3" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;x1&lt;/code&gt; and &lt;code&gt;x2&lt;/code&gt; have different shapes, then they need to broadcast. This uses &lt;code&gt;numpy.asanyarray&lt;/code&gt; to convert the input. Whether this is the desired result or not depends on the array subclass, for example numpy matrices will silently produce an incorrect result.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9093a7c4edb32a3be219ff7ef8ab4a696d64b5fc" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;x1&lt;/code&gt; and &lt;code&gt;x2&lt;/code&gt; have different shapes, then they need to broadcast. This uses &lt;code&gt;numpy.asanyarray&lt;/code&gt; to convert the input. Whether this is the desired result or not depends on the array subclass.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00ce28b0e082c5812495367c643a538748e3f392" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;Region&lt;/em&gt; had been an integer variable that we wanted to treat explicitly as categorical, we could have done so by using the &lt;code&gt;C()&lt;/code&gt; operator:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5969c091981a00eafda8ea7be2300bfcb800824" translate="yes" xml:space="preserve">
          <source>If False (default) the raw sample quantiles are plotted against the theoretical quantiles, show the probability that a sample will not exceed a given value</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a43952917f9b418b91468bff6582e0b025d4a42d" translate="yes" xml:space="preserve">
          <source>If False the sandwich covariance is calculated without small sample correction.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2689cdda61033ab16ba77b2bbdf042f3ab37e1da" translate="yes" xml:space="preserve">
          <source>If False the the sandwich covariance is calulated without small sample correction. If &lt;code&gt;use_correction = &amp;lsquo;cluster&amp;rsquo;&lt;/code&gt; (default), then the same small sample correction as in the case of &amp;lsquo;covtype=&amp;rsquo;cluster&amp;rsquo;&amp;rsquo; is used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08b71dcfc8ff46966e13de23be13b30992f168a7" translate="yes" xml:space="preserve">
          <source>If True (default), then the degrees of freedom for the inferential statistics and hypothesis tests, such as pvalues, f_pvalue, conf_int, and t_test and f_test, are based on the number of groups minus one instead of the total number of observations minus the number of explanatory variables. &lt;code&gt;df_resid&lt;/code&gt; of the results instance is adjusted. If False, then &lt;code&gt;df_resid&lt;/code&gt; of the results instance is not adjusted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b65d14d650f96c31c8abcd1340882b7fc0389588" translate="yes" xml:space="preserve">
          <source>If True the sandwich covariance is calculated with a small sample correction. If False the sandwich covariance is calculated without small sample correction.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9f12425c0a6226d7356c822a13194a5159577b6" translate="yes" xml:space="preserve">
          <source>If True, the theoretical quantiles are flipped such that the figure displays the probability that a sample will exceed a given value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97e064e7b2757a3ebc4eed846887dada6d10bff0" translate="yes" xml:space="preserve">
          <source>If a float is given, it is the bandwidth.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bda70ed5eb736d3834681af36c281047984b5729" translate="yes" xml:space="preserve">
          <source>If a formula was used, then exog is processed in the same way as the original data. This transformation needs to have key access to the same variable names, and can be a pandas DataFrame or a dict like object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6926d1c240a64620a64da745a148ac173b36a9c2" translate="yes" xml:space="preserve">
          <source>If all options are included in the model and selected, this produces a 6x1 plot grid with the following plots (ordered top-to-bottom):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fbba6eba9a5010bd4efbe3a2ebed105998751749" translate="yes" xml:space="preserve">
          <source>If an array, it is a fixed user-specified bandwidth. If &lt;code&gt;None&lt;/code&gt;, set to &lt;code&gt;normal_reference&lt;/code&gt;. If a string, should be one of:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e69703db156d6f969b0b5b69e1d2e18fb97d5b5e" translate="yes" xml:space="preserve">
          <source>If an array, it is a fixed user-specified bandwidth. If a string, should be one of:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aba508b60d074154d177ef90d9620f9f3eee3b99" translate="yes" xml:space="preserve">
          <source>If cdf, sf, cumhazard, or entropy are computed, they are computed based on the definition of the kernel rather than the FFT approximation, even if the density is fit with FFT = True.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b0e0cf38616d13af3831dee7bf913d6221a1a65" translate="yes" xml:space="preserve">
          <source>If column is specified returns &lt;code&gt;(scale) * (X.T X)^(-1)[column,column]&lt;/code&gt; if column is 0d</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e8912a4aedc0f850eb0cec615490c6caa0c9c42" translate="yes" xml:space="preserve">
          <source>If cond_means contains only the focus exog, the results are equivalent to a partial residual plot.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1eb0e63515c627692cd3c8a5466e54ff6da9d55b" translate="yes" xml:space="preserve">
          <source>If contrast and other are specified returns &lt;code&gt;(scale) * r_matrix (X.T X)^(-1) other.T&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6919e355963ba837013579abbd584e6b7579adf2" translate="yes" xml:space="preserve">
          <source>If contrast is specified it pre and post-multiplies as follows &lt;code&gt;(scale) * r_matrix (X.T X)^(-1) r_matrix.T&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48d0b32c84a295bb2ab06445df0657f9a0246026" translate="yes" xml:space="preserve">
          <source>If convergence difficulties occur, increase the values of &lt;code&gt;first_dep_update&lt;/code&gt; and/or &lt;code&gt;params_niter&lt;/code&gt;. Setting &lt;code&gt;first_dep_update&lt;/code&gt; to a greater value (e.g. ~10-20) causes the algorithm to move close to the GLM solution before attempting to identify the dependence structure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e51d21ceb3e96092dafebae85184ad22e32327b2" translate="yes" xml:space="preserve">
          <source>If data x is 2d, then moving moment is calculated for each column.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14e3d40823cf8f5ce352da935c33c216a3e8a8c0" translate="yes" xml:space="preserve">
          <source>If degrees of freedom correction is used, then weights should add up to the number of observations. ttest also assumes that the sum of weights corresponds to the sample size.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c61de4d25beff0f174d6da4febe61a79a15f91a5" translate="yes" xml:space="preserve">
          <source>If endog was not provided when creating the factor class, then a standarized endog needs to be provided here.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cecd11f1be1de59d5f16865a50bd634ee3fd524e" translate="yes" xml:space="preserve">
          <source>If excess kurtosis is known, provide as &lt;code&gt;kurt&lt;/code&gt;. Standard errors are only available if the model was fit using maximum likelihood. If &lt;code&gt;endog&lt;/code&gt; is not provided, &lt;code&gt;nobs&lt;/code&gt; must be provided to obtain standard errors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="318258e7809730d991b697aeca9856a8649d84d8" translate="yes" xml:space="preserve">
          <source>If exog is None, the standard Kaplan-Meier estimator is used. If exog is not None, a local estimate of the marginal survival function around each point is constructed, and these are then averaged. This procedure gives an estimate of the marginal survival function that accounts for dependent censoring as long as the censoring becomes independent when conditioning on the covariates in exog. See Zeng et al. (2004) for details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c44fe7e1f7cda527600f21d864c0af708c7fd0ab" translate="yes" xml:space="preserve">
          <source>If exogenous variables are given, then the model that is fit is</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eeb0a9285f5d70b02c575dcf7d57ca51ee600644" translate="yes" xml:space="preserve">
          <source>If exposure is specified, then it will be logged by the method. The user does not need to log it first.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b36218f7c5f3f3a1087c5a189ec789acc154ba5" translate="yes" xml:space="preserve">
          <source>If f returns a 1d array, it returns a Jacobian. If a 2d array is returned by f (e.g., with a value for each observation), it returns a 3d array with the Jacobian of each observation with shape xk x nobs x xk. I.e., the Jacobian of the first observation would be [:, 0, :]</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e45911c2930a16d51453f9a7b18a177aab28aad6" translate="yes" xml:space="preserve">
          <source>If filt is 1d or (nlags,1) one lag polynomial is applied to all variables (columns of x). If filt is 2d, (nlags, nvars) each series is independently filtered with its own lag polynomial, uses loop over nvar. This is different than the usual 2d vs 2d convolution.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43c5eb656656913daa569f3070680616a742b565" translate="yes" xml:space="preserve">
          <source>If fit by &amp;lsquo;mle&amp;rsquo;, it is assumed for the Kalman Filter that the initial unkown state is zero, and that the inital variance is P = dot(inv(identity(m**2)-kron(T,T)),dot(R,R.T).ravel(&amp;lsquo;F&amp;rsquo;)).reshape(r, r, order = &amp;lsquo;F&amp;rsquo;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8843b30b4b4b6013740153f3689df2d4ba0af09f" translate="yes" xml:space="preserve">
          <source>If function returns f(a) and f(b) must have different signs, consider expanding lower and upper bounds</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c4595c1d4135d745d7fa2346f984b4d58543c32" translate="yes" xml:space="preserve">
          <source>If function returns f(a) and f(b) must have different signs, consider expanding the bounds.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf63d3b105c83eed9af0700e96192be89134f26d" translate="yes" xml:space="preserve">
          <source>If installed, &lt;a href=&quot;http://www.census.gov/srd/www/x13as/&quot;&gt;X-12-ARIMA&lt;/a&gt; or &lt;a href=&quot;http://www.census.gov/srd/www/x13as/&quot;&gt;X-13ARIMA-SEATS&lt;/a&gt; can be used for time-series analysis.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c1b02468b3a6cb333206792b92999416c40d9dda" translate="yes" xml:space="preserve">
          <source>If it &amp;gt; 1, then further weighted local linear regressions are performed, where the weights are the same as above times the _lowess_bisquare function of the residuals. Each iteration takes approximately the same amount of time as the original fit, so these iterations are expensive. They are most useful when the noise has extremely heavy tails, such as Cauchy noise. Noise with less heavy-tails, such as t-distributions with df&amp;gt;2, are less problematic. The weights downgrade the influence of points with large residuals. In the extreme case, points whose residuals are larger than 6 times the median absolute residual are given weight 0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1482a52afdd27f3b09d956a9ee3b4e31fc348636" translate="yes" xml:space="preserve">
          <source>If it is fit by MLE then the (exact) unconditional maximum likelihood is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4a90afd502cda4c8c56d22f90401ca8f7ce0956" translate="yes" xml:space="preserve">
          <source>If keyword arguments are used to set individual boolean flags, then the lowercase of the method must be used as an argument name, and the value is the desired value of the boolean flag (True or False).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02f3830c54e38939f9ec6a2507406c9e4adcfddd" translate="yes" xml:space="preserve">
          <source>If method is &amp;lsquo;IRLS&amp;rsquo;, then an additional keyword &amp;lsquo;attach_wls&amp;rsquo; is available. This is currently for internal use only and might change in future versions. If attach_wls&amp;rsquo; is true, then the final WLS instance of the IRLS iteration is attached to the results instance as &lt;code&gt;results_wls&lt;/code&gt; attribute.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0683fdb776c86ed9f982895cebd2aeb1c11013e" translate="yes" xml:space="preserve">
          <source>If method is &amp;lsquo;l1&amp;rsquo;, then &lt;code&gt;fe_pen&lt;/code&gt; and &lt;code&gt;cov_pen&lt;/code&gt; are used to obtain the covariance structure, but are ignored during the L1-penalized fitting.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="523f2c0a0f2c863fa957ce99378ec5ff8c169095" translate="yes" xml:space="preserve">
          <source>If method=&amp;rsquo;ml&amp;rsquo;, the factors are rotated to satisfy condition IC3 of Bai and Li (2012). This means that the scores have covariance I, so the model for the covariance matrix is L * L&amp;rsquo; + diag(U), where L are the loadings and U are the uniquenesses. In addition, L&amp;rsquo; * diag(U)^{-1} L must be diagonal.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="391bfacd7955dcff47d25a4f4362db460aae2450" translate="yes" xml:space="preserve">
          <source>If missing_values is True during instantiation of StataReader then observations with _StataMissingValue(s) are not filtered and should be handled by your applcation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3cd54b51f720b8b0b842f851e807bf0af8d4e4a2" translate="yes" xml:space="preserve">
          <source>If no argument is specified returns the covariance matrix of a model &lt;code&gt;(scale)*(X.T X)^(-1)&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0bed5e46ab57deb102ec01aee5d6f9a337846b48" translate="yes" xml:space="preserve">
          <source>If no date / time information is provided, the frequency is constrained to be between zero and \(\pi\), so the period is constrained to be in \([0.5, \infty]\).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7dc8cb974e7d3f08ecc67a3759a91c0da34449d8" translate="yes" xml:space="preserve">
          <source>If no formula was used, then the provided exog needs to have the same number of columns as the original exog in the model. No transformation of the data is performed except converting it to a numpy array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4b4d44c07624e8843b36f70140a38c2074bf706" translate="yes" xml:space="preserve">
          <source>If nothing is known or suspected about the form of E[x1 | x2], set &lt;code&gt;cond_means&lt;/code&gt; to None, and it will be estimated by smoothing each non-focus exog against the focus exog. The values of &lt;code&gt;frac&lt;/code&gt; control these lowess smooths.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="116809481d480af4e30ce77bf3fc3c538cbd2b27" translate="yes" xml:space="preserve">
          <source>If nsides == 2, x is filtered around lag 0</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a69de495e2f7c1f2c42bbdcd891aea314a04d8e9" translate="yes" xml:space="preserve">
          <source>If num is a time series, then this applies the linear filter den^{-1}. If both num and den are both lag polynomials, then this calculates the quotient polynomial for n terms and also returns the remainder.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aacbfec46aea8c5d0754e212b140eb3cbea437af" translate="yes" xml:space="preserve">
          <source>If optimization is still not successful, try changing the values of start_int_params. If the current function value repeatedly jumps from a number between 0 and the critical value and a very large number (&amp;gt;50), the starting parameters of the interior minimization need to be changed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c871898028dbe7edc90af1b1be67d256c55cae93" translate="yes" xml:space="preserve">
          <source>If performance is a concern, only those results which are needed should be specified as any results that are not specified will not be calculated. For example, if the smoother output is set to only include SMOOTHER_STATE, the smoother operates much more quickly than if all output is required.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8efadac929ffe1ec0cbcc191c88da8c95db82e7a" translate="yes" xml:space="preserve">
          <source>If remove_data is true and the model result does not implement a remove_data method then this will raise an exception.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d5ef3dc169f190331806184b881da35d2e52f03" translate="yes" xml:space="preserve">
          <source>If return_results is True (default), then a results instance with all statistics is returned If return_results is False, then only kappa is calculated and returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b750eabbd30372929adf1d27744f4ca10d62604" translate="yes" xml:space="preserve">
          <source>If sigma is a function of the data making one of the regressors a constant, then the current postestimation statistics will not be correct.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57aae94301febefa08a240300d3ebd387e6bca38" translate="yes" xml:space="preserve">
          <source>If the bitmask is set directly via the &lt;code&gt;conserve_memory&lt;/code&gt; argument, then the full method must be provided.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f537707d38478066b7f7d241a898ad311b43dc9c" translate="yes" xml:space="preserve">
          <source>If the bitmask is set directly via the &lt;code&gt;filter_method&lt;/code&gt; argument, then the full method must be provided.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e371934202ea70ff29cfaa6fc72daad44d74b738" translate="yes" xml:space="preserve">
          <source>If the bitmask is set directly via the &lt;code&gt;inversion_method&lt;/code&gt; argument, then the full method must be provided.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7b59aa57ae30d2c81e67830cea77c00f245ffaf" translate="yes" xml:space="preserve">
          <source>If the bitmask is set directly via the &lt;code&gt;smooth_method&lt;/code&gt; argument, then the full method must be provided.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa4152b687bbebf23b8ab84c890646fefdcfe925" translate="yes" xml:space="preserve">
          <source>If the bitmask is set directly via the &lt;code&gt;smoother_output&lt;/code&gt; argument, then the full method must be provided.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78ecf47459cd278fda88d8c6680a59a43792c01e" translate="yes" xml:space="preserve">
          <source>If the bitmask is set directly via the &lt;code&gt;stability_method&lt;/code&gt; argument, then the full method must be provided.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6bed7b8da33baa3d2798fe0a575a84a02497aafc" translate="yes" xml:space="preserve">
          <source>If the coefficients provided are matrices \((C_0, C_1, \dots, C_n)\), then the corresponding polynomial is \(C_0 + C_1 L + \dots + C_n L^n\).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="385484aed5370474bce0e8a845dd5c2a0164008b" translate="yes" xml:space="preserve">
          <source>If the coefficients provided are matrices \((C_0, C_1, \dots, C_p)\), each of shape \((m, m)\), then the companion matrix is an \(nm \times nm\) matrix formed with the elements in the first column defined as \(\phi_i = -C_0^{-1} C_i', i \in 1, \dots, p\).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b178306f8c01c9f5c137617be49dae01596b7edb" translate="yes" xml:space="preserve">
          <source>If the coefficients provided are scalars \((c_0, c_1, \dots, c_n)\), then the corresponding polynomial is \(c_0 + c_1 L + \dots + c_n L^n\).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12103443ee2c5976e9b81a9db8accc82ab31d8d5" translate="yes" xml:space="preserve">
          <source>If the coefficients provided are scalars \((c_0, c_1, \dots, c_p)\), then the companion matrix is an \(n \times n\) matrix formed with the elements in the first column defined as \(\phi_i = -\frac{c_i}{c_0}, i \in 1, \dots, p\).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a86cf6e863fa697831c861b8a8e9592027e04113" translate="yes" xml:space="preserve">
          <source>If the correlation matrix is already positive semi-definite given the threshold, then the original correlation matrix is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a3bfb65efd3df588ead569ee99f54c384afc7e3" translate="yes" xml:space="preserve">
          <source>If the covariance matrix is singular or not SPD, it is projected to the nearest such matrix. These projection events are recorded in the fit_history member of the GEE model.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce682080a6aab18a34e4a18032352325f14a6ec8" translate="yes" xml:space="preserve">
          <source>If the cycle is damped (&lt;code&gt;damped_cycle=True&lt;/code&gt;), then there is a third parameter to estimate, \(\rho_c\).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3ef51f5710326f303da7a7ee329d244fd6be27c" translate="yes" xml:space="preserve">
          <source>If the cyclical effect is stochastic (&lt;code&gt;stochastic_cycle=True&lt;/code&gt;), then there is another parameter to estimate (the variance of the error term - note that both of the error terms here share the same variance, but are assumed to have independent draws).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15925eac83f6fe56689606bc7a17f76f7efa2e48" translate="yes" xml:space="preserve">
          <source>If the data are jointly Gaussian, the marginal sampling distributions of the elements of the sample correlation matrix are approximately Gaussian with standard deviation 1 / sqrt(n). The default value of &lt;code&gt;minabs&lt;/code&gt; is thus equal to 1 standard error, which will set to zero approximately 68% of the estimated correlation coefficients for which the population value is zero.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48a11ff9f8f8cc1ba877f8d623b05fe5bb98651a" translate="yes" xml:space="preserve">
          <source>If the data is 2d, then these are separate confidence intervals for each column.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a18c3a5309f86622d8f752db6b56ce5d3d19101" translate="yes" xml:space="preserve">
          <source>If the date / time information is provided, the default bounds allow the cyclical component to be between 1.5 and 12 years; depending on the frequency of the endogenous variable, this will imply different specific bounds.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a02074d4880fdf1b09442c40aeb765639289b69d" translate="yes" xml:space="preserve">
          <source>If the endogenous time series is univariate, then inversion can be performed by simple division. If this flag is set and the time series is univariate, then division will always be used even if other flags are also set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5c52c50927a9109a8a6a020b8f2f3b617f92f68" translate="yes" xml:space="preserve">
          <source>If the endogenous variable is binary:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13b225aa93921a73bc83e5ea03b6874ee148f45e" translate="yes" xml:space="preserve">
          <source>If the endogenous variable is binomial:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0df9b49247aac46b7fdd2d578352bae5e214b42" translate="yes" xml:space="preserve">
          <source>If the filtering method is specified to be univariate, then simple division is always used regardless of the dimension of the endogenous time series.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="611c51fec70923b83192f95401eeefbdc3c4080b" translate="yes" xml:space="preserve">
          <source>If the first &lt;code&gt;d&lt;/code&gt; loglikelihood values were burned (i.e. in the specified model, &lt;code&gt;loglikelihood_burn=d&lt;/code&gt;), then this test is calculated ignoring the first &lt;code&gt;d&lt;/code&gt; residuals.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc5d1298d15b096a0793a356b030cb1c26c2d9f8" translate="yes" xml:space="preserve">
          <source>If the focus variable is believed to be independent of the other exog variables, &lt;code&gt;cond_means&lt;/code&gt; can be set to an (empty) nx0 array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c44ba8067e54daacb98f63c07b26096be3a33d8" translate="yes" xml:space="preserve">
          <source>If the function returns optimization failed, consider narrowing the boundaries of the plot</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="401aef7ee6874d2d22ee2844539e19c5328fc40d" translate="yes" xml:space="preserve">
          <source>If the function returns the error f(a) and f(b) must have different signs, consider lowering lower_bound and raising upper_bound.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30f7901b544b79fb127d8423fc4810e028b9dc52" translate="yes" xml:space="preserve">
          <source>If the input matrix is sparse, then cov - k*I is also sparse, so the eigen-decomposition can be done effciciently using sparse routines.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a749c25dd908f1d6fde906dba08bb4939f20bbce" translate="yes" xml:space="preserve">
          <source>If the lag polynomial has non-consecutive powers (so that the coefficient is zero on some element of the polynomial), then the constraint function is not onto the entire space of invertible polynomials, although it only excludes a very small portion very close to the invertibility boundary.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8fb881cd61faf5ac9126e8024d4fa40185ca7b9" translate="yes" xml:space="preserve">
          <source>If the link is the identity link function then the loglikelihood function is the same as the classical OLS model.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="596007660bd70ab8267c454eb684bf01657deb57" translate="yes" xml:space="preserve">
          <source>If the links is not the identity link then the loglikelihood function is defined as</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c1f153c3bfb7cbf5458de9d127d35270456f5af" translate="yes" xml:space="preserve">
          <source>If the list doesn&amp;rsquo;t include the singletons, then it will be only a partial partition. Missing items are singletons (I think).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11035e29b926990690ee4ffd3cc1a1e899c8c7bc" translate="yes" xml:space="preserve">
          <source>If the model as not yet been fit, params is not optional.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53014d627922dd16018a12904b687066b37bb3b5" translate="yes" xml:space="preserve">
          <source>If the model has not yet been fit, params is not optional.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0aea106b5f462325908191bea6a398f038f3938" translate="yes" xml:space="preserve">
          <source>If the optimization does not terminate successfully, consider switching optimization algorithms.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e657b875960b95406b17781cfa59b64de34f21dd" translate="yes" xml:space="preserve">
          <source>If the pvalue is smaller than a threshold, say 0.05, then we reject the hypothesis that the difference between the two samples is larger than the the thresholds given by low and upp.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5080cbd73d2b46c1f94976792f3412e0adfa7f8f" translate="yes" xml:space="preserve">
          <source>If the pvalue is smaller than a threshold, say 0.05, then we reject the hypothesis that the expected value of the sample (mean of the population) is outside of the interval given by thresholds low and upp.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec847e4e77158a0e4c0ee3f784e2394fa792a3a8" translate="yes" xml:space="preserve">
          <source>If the pvalue is smaller than a threshold,say 0.05, then we reject the hypothesis that the difference between the two samples is larger than the the thresholds given by low and upp.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0aaca6cdff979e1af488fc3f8a169b8a08dcaa0f" translate="yes" xml:space="preserve">
          <source>If the rank of X is known it can be specified as r &amp;ndash; no check is made to ensure that this really is the rank of X.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d2a2983880ed5a061341b70c2b9e79937bbac91" translate="yes" xml:space="preserve">
          <source>If the regression_coefficients are included in the state vector, the recursive estimates are available in the results class in the &lt;code&gt;regression_coefficients&lt;/code&gt; attribute.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a65589c4346be191c087e27030092e94792a04d7" translate="yes" xml:space="preserve">
          <source>If the seasonal effect is stochastic, then there is one additional parameter to estimate via MLE (the variance of the error term).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a97104ab4d63b256b0f0809baf597d635773c6c2" translate="yes" xml:space="preserve">
          <source>If the two series are almost perfectly collinear, then computing the test is numerically unstable. However, the two series will be cointegrated under the maintained assumption that they are integrated. In this case the t-statistic will be set to -inf and the pvalue to zero.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71afeed0fddab0b7264996b723693e4955baed45" translate="yes" xml:space="preserve">
          <source>If the variance component is intended to produce random intercepts for disjoint subsets of a group, specified by string labels or a categorical data value, always use &amp;lsquo;0 +&amp;rsquo; in the formula so that no overall intercept is included.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f062e8a86eaba0588c184ecb680a87a47a39d99" translate="yes" xml:space="preserve">
          <source>If the variance components specify random slopes and you do not also want a random group-level intercept in the model, then use &amp;lsquo;0 +&amp;rsquo; in the formula to exclude the intercept.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1fe0f4a2cd0bab3533a1217d29a7b76ae6b69899" translate="yes" xml:space="preserve">
          <source>If the weights are a function of the data, then the post estimation statistics such as fvalue and mse_model might not be correct, as the package does not yet support no-constant regression.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bcd282647fd34ec6a8a8cd484ede8fa44f6631c3" translate="yes" xml:space="preserve">
          <source>If there are ties, then then the test statistic and p-value that is reported, is based on the higher p-value between sorting all tied observations of the same group</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b457d4f06edc65bf06f2cf9a041b9018455207e9" translate="yes" xml:space="preserve">
          <source>If there is an offset or exposure, it should be added to &lt;code&gt;lin_pred&lt;/code&gt; prior to calling this function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01df4363464bafa4cd57008ee02ac2eb129e450e" translate="yes" xml:space="preserve">
          <source>If there is prior information on the fraction of true hypothesis, then alpha should be set to alpha * m/m_0 where m is the number of tests, given by the p-values, and m_0 is an estimate of the true hypothesis. (see Benjamini, Krieger and Yekuteli)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cee3e5c9e4f28f19bfd7b2b9178b5658d024b2db" translate="yes" xml:space="preserve">
          <source>If this flag is set, symmetry of the predicted state covariance matrix is enforced at each iteration of the filter, where each element is set to the average of the corresponding elements in the upper and lower triangle.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb3d0e2e52277ada76ff71614138650e7bc41714" translate="yes" xml:space="preserve">
          <source>If this function is called with the time series (isacov=False), then the sample autocovariance function is calculated with the default options (biased, no fft).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c9eed42fa2bf10ffd46844ca4243694effafa7b" translate="yes" xml:space="preserve">
          <source>If unbiased is true, the denominator for the autocovariance is adjusted but the autocorrelation is not an unbiased estimtor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="586b5a17e49d1a13b69a601d2241f2cd227afa8f" translate="yes" xml:space="preserve">
          <source>If we generate artificial data with smaller group effects, the T test can no longer reject the Null hypothesis:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7139ad5dbdc45ec4116578943ce2784697290d20" translate="yes" xml:space="preserve">
          <source>If we run this in statsmodels LME with defaults, we see that the variance estimate is indeed very small, which leads to a warning about the solution being on the boundary of the parameter space. The regression slopes agree very well with R, but the likelihood value is much higher than that returned by R.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="887a2646285d60d2230dcbbd3fbc742b0a544295" translate="yes" xml:space="preserve">
          <source>If weights matrix is given, then the formula use to calculate cov_params depends on whether has_optimal_weights is true. If no weights are given, then the weight matrix is calculated with the given method, and has_optimal_weights is assumed to be true.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e0661d45f9c58a1aa67d0ae23747b04a6ab277d" translate="yes" xml:space="preserve">
          <source>If wt and weights are None, then the simple kappa is computed. If wt is given, but weights is None, then the weights are set to be [0, 1, 2, &amp;hellip;, k]. If weights is a one-dimensional array, then it is used to construct the weight matrix given the following options.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="edaa686d830cded7e5013f4c268a58e9089df939" translate="yes" xml:space="preserve">
          <source>If you are not comfortable with git, we also encourage users to submit their own examples, tutorials or cool statsmodels tricks to the &lt;a href=&quot;https://github.com/statsmodels/statsmodels/wiki/Examples&quot;&gt;Examples wiki page&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f87dddcb99ebaee7b82301c5247bd08d3c1b6d8d" translate="yes" xml:space="preserve">
          <source>If you need to modify the labeling and the coloring you can give a function tocreate the labels and one with the graphical properties starting from the key tuple</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6a363e3f88347fdcd9c6ca743aa8c366752b470" translate="yes" xml:space="preserve">
          <source>If you want to accomplish the same without opening up the SDK CMD SHELL, then you can use these commands at the CMD Prompt or in a batch file.:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24a90585ad80eeaa9b04c49ffd655e17e6d21b09" translate="yes" xml:space="preserve">
          <source>If you want to keep up to date with the source on github just periodically do:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd5c33f3addccb2778b6c74693e505a99d3a915b" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re on Python 3.4, you &lt;em&gt;must&lt;/em&gt; use Cython 0.20.1. If you&amp;rsquo;re still having problems, try running</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4c3577b0c9ba4933e42c644a0c9129231556f7f" translate="yes" xml:space="preserve">
          <source>Illustrates the use of different types of sums of squares (I,II,II) and how the Sum contrast can be used to produce the same output between the 3.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b09ebe06f5181aa2b83095416465ce0b7b3ba547" translate="yes" xml:space="preserve">
          <source>Imai, Keele, Tingley (2010). A general approach to causal mediation analysis. Psychological Methods 15:4, 309-334. &lt;a href=&quot;http://imai.princeton.edu/research/files/BaronKenny.pdf&quot;&gt;http://imai.princeton.edu/research/files/BaronKenny.pdf&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00b783520a8a2fbc5645a580ba36a3a286254053" translate="yes" xml:space="preserve">
          <source>Implementation Details</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4351142b2bc9fd95183aa064ff1af5bf675b44b8" translate="yes" xml:space="preserve">
          <source>Implementation This is calculated using the generic formula for LM test using $R^2$ (Greene, section 17.6) and not with the explicit formula (Greene, section 11.4.3). The degrees of freedom for the p-value assume x is full rank.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbbfbeb6b2bac7c8a943d729bea73100760d1ef8" translate="yes" xml:space="preserve">
          <source>Implementation conditions on the first m-1 initial values, which are required to calculate the m-histories: x_t^m = (x_t, x_{t-1}, &amp;hellip; x_{t-(m-1)})</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66bdd37c41596ab3974248cecedb8ce5be5808c9" translate="yes" xml:space="preserve">
          <source>Implementation is based on the SAS documentation, R includes it in &lt;code&gt;mcnemar.test&lt;/code&gt; if the table is not 2 by 2.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bfcdf2f195c98c3df14f705ec2558d348e84feb3" translate="yes" xml:space="preserve">
          <source>Import Paths and Structure</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25b15fa022a5200369487feb10239b87d227b75d" translate="yes" xml:space="preserve">
          <source>Import convention</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cfc92040367588859e00e311dba595dc49fe8872" translate="yes" xml:space="preserve">
          <source>Import examples</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1761a175f65935bcd193ae0e91e67dd3902201e5" translate="yes" xml:space="preserve">
          <source>Importing &lt;code&gt;statsmodels.api&lt;/code&gt; will load most of the public parts of statsmodels. This makes most functions and classes conveniently available within one or two levels, without making the &amp;ldquo;sm&amp;rdquo; namespace too crowded.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1d35569681e049a00fc2e0035cc54a08a5706b5" translate="yes" xml:space="preserve">
          <source>Impulse Response Analysis</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ff9c09b27ee6d1c7b932a35ebd1d92f52405e97" translate="yes" xml:space="preserve">
          <source>Impulse response analysis class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f437d90b45328b64462e5747af2234157c63a5b2" translate="yes" xml:space="preserve">
          <source>Impulse response analysis class. Computes impulse responses, asymptotic standard errors, and produces relevant plots</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="487594b8e74ea6087229e652c285e14bfe385208" translate="yes" xml:space="preserve">
          <source>Impulse response function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="929774102cf4f5dfd7ca72fcd49fb44e915d5e03" translate="yes" xml:space="preserve">
          <source>Impute missing values for a single variable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c697deac38e8fcdc3b583c620b7fe23907d5bcae" translate="yes" xml:space="preserve">
          <source>Impute using default models, using the MICEData object as an iterator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f74f1388cff57509fe1a3da94239fec0ec5c3e4" translate="yes" xml:space="preserve">
          <source>In Wikipedia terminology, rows are blocks and columns are treatments. The number of rows N, should be large for the chisquare distribution to be a good approximation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ae2905c5693dd2cd8f003e8123e6044f4ac295d" translate="yes" xml:space="preserve">
          <source>In Wikipedia terminology, rows are blocks and columns are treatments. The number of rows N, should be large for the chisquare distribution to be a good approximation. The Null hypothesis of the test is that all treatments have the same effect.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e25a7773aa06cb0d1bf6d5778a8d82703853b39" translate="yes" xml:space="preserve">
          <source>In [ ]:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c9f80e2b349e6e07974b04049e7aace0c101ead" translate="yes" xml:space="preserve">
          <source>In [10]:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b77e74aeeca312c4766d85eacb5c7cea683b40d" translate="yes" xml:space="preserve">
          <source>In [11]:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4761384c9abf25c961998b1c9a3af228582e983" translate="yes" xml:space="preserve">
          <source>In [12]:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e429bdfe542a525caaba1f0aea52d1c8373fedd" translate="yes" xml:space="preserve">
          <source>In [13]:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22c3374d9890e0a7dcf898e5c6b14ee826b434ec" translate="yes" xml:space="preserve">
          <source>In [14]:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6af8832d8f63b000285463d55813dd4aaf41106e" translate="yes" xml:space="preserve">
          <source>In [15]:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="396fb38158dad6df11e774cfb79a0857263a40aa" translate="yes" xml:space="preserve">
          <source>In [16]:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c2b21d6bcf1b5bb6ab408cc98829a8fc650695f" translate="yes" xml:space="preserve">
          <source>In [17]:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d03b89d6c7ecff7fd3cc2fe64adb27e893649a9" translate="yes" xml:space="preserve">
          <source>In [18]:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6d1a9a0f8ab118d2d1085132e14375d7d058108" translate="yes" xml:space="preserve">
          <source>In [19]:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="414d61722bba0403867ad32ae94d8ae8491d20d2" translate="yes" xml:space="preserve">
          <source>In [1]:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86810b1b9758ee9934b3ebcbc0eb29c0c1c84928" translate="yes" xml:space="preserve">
          <source>In [20]:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bef1b0bd5d46d4cc5e89efb9a5ce35375eba2429" translate="yes" xml:space="preserve">
          <source>In [21]:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4f41393750cb51ecda816bc9e1d86bfabf8a5a0" translate="yes" xml:space="preserve">
          <source>In [22]:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="043922805d91080ca143014f8b04ef602367d22f" translate="yes" xml:space="preserve">
          <source>In [23]:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82180130fed4378d498034f220a3346b7187f408" translate="yes" xml:space="preserve">
          <source>In [24]:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8bb8ff2c5c4cf834a95cfd4a308d76e3b6619c54" translate="yes" xml:space="preserve">
          <source>In [25]:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aea27b95ccf1af0161a205ef5acd49bfe67836d5" translate="yes" xml:space="preserve">
          <source>In [26]:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85adc277be3d1a5a7f70d12353e7f46f6598328d" translate="yes" xml:space="preserve">
          <source>In [27]:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1ac7cfdec1d0f641611c78289462302d2efb681" translate="yes" xml:space="preserve">
          <source>In [28]:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c8da4a055940f6797b0a6e5c2c370e9602d72f0" translate="yes" xml:space="preserve">
          <source>In [29]:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19a16ef8e6e9c71e2014e5fe99bf84cc810979e8" translate="yes" xml:space="preserve">
          <source>In [2]:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f54383565937df38e67621e2233d17c80026784" translate="yes" xml:space="preserve">
          <source>In [30]:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a42a4ae492ecba8634598d46ed9735748cbc347c" translate="yes" xml:space="preserve">
          <source>In [31]:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b39f6571d38d0b81ca5377ad7008cb98ab1bccc" translate="yes" xml:space="preserve">
          <source>In [32]:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6b7d51746b46f7617351233644e1383c7974559" translate="yes" xml:space="preserve">
          <source>In [33]:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="206f726a75233c747cd9398edc15cd7b3604f8ba" translate="yes" xml:space="preserve">
          <source>In [34]:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3906614c2598761fdd47b61726d95e40f2386bca" translate="yes" xml:space="preserve">
          <source>In [35]:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd0a4a7abe9c8d5cb55efd0e0632c545b73ce5cd" translate="yes" xml:space="preserve">
          <source>In [36]:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e51e5eb8b9e63b637bd22511e22551147079bcb0" translate="yes" xml:space="preserve">
          <source>In [37]:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b272c57b0ff50eb4a8579f79d7775ab6d0514ebc" translate="yes" xml:space="preserve">
          <source>In [38]:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ace51a2d99dfaa4161ad81ed3a181e74d640328c" translate="yes" xml:space="preserve">
          <source>In [39]:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc86644a4be5d24b5325ddf88a99375ab88ca983" translate="yes" xml:space="preserve">
          <source>In [3]:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00a48f74717f42b3777f4900da3af28a51548a6f" translate="yes" xml:space="preserve">
          <source>In [40]:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef23e754d9d71cc35f15c847cebc835f9f0f9d79" translate="yes" xml:space="preserve">
          <source>In [41]:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46a2a354052b7e95fd07b89d7cdb763939441bfd" translate="yes" xml:space="preserve">
          <source>In [42]:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53234aeb67e5e3f26fa338408ff7c015c1c0b45f" translate="yes" xml:space="preserve">
          <source>In [43]:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3784becdd41c0ccdb158184de6047c17c60c642c" translate="yes" xml:space="preserve">
          <source>In [4]:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29bcd0876def9b18509202945dffd5eb048d61ea" translate="yes" xml:space="preserve">
          <source>In [5]:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7a3511020dee5f6b299e796589ebce60364b998" translate="yes" xml:space="preserve">
          <source>In [6]:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5cb40f0c6cc6b1c5361bf9d4950c11ecd4db1b74" translate="yes" xml:space="preserve">
          <source>In [7]:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a1d8c04fd2ff398a37d16147c1ec8c7f71ad2a3" translate="yes" xml:space="preserve">
          <source>In [8]:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f32f7ea7660014f01aea6c0a510182e03ee5f6ba" translate="yes" xml:space="preserve">
          <source>In [9]:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89e76bcc5c4965eda91206aeb9862c0492fb168d" translate="yes" xml:space="preserve">
          <source>In \(D^{co}_{t-1}\) we have the deterministic terms which are inside the cointegration relation (or restricted to the cointegration relation). \(\eta\) is the corresponding estimator. To pass a deterministic term inside the cointegration relation, we can use the &lt;code&gt;exog_coint&lt;/code&gt; argument. For the two special cases of an intercept and a linear trend there exists a simpler way to declare these terms: we can pass &lt;code&gt;&quot;ci&quot;&lt;/code&gt; and &lt;code&gt;&quot;li&quot;&lt;/code&gt; respectively to the &lt;code&gt;deterministic&lt;/code&gt; argument. So for an intercept inside the cointegration relation we can either pass &lt;code&gt;&quot;ci&quot;&lt;/code&gt; as &lt;code&gt;deterministic&lt;/code&gt; or &lt;code&gt;np.ones(len(data))&lt;/code&gt; as &lt;code&gt;exog_coint&lt;/code&gt; if &lt;code&gt;data&lt;/code&gt; is passed as the &lt;code&gt;endog&lt;/code&gt; argument. This ensures that \(D_{t-1}^{co} = 1\) for all \(t\).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d7b48ba0fb7c61c42e9bdf907b2b6d165f2eba6" translate="yes" xml:space="preserve">
          <source>In a partial regression plot, to discern the relationship between the response variable and the $k$-th variabe, we compute</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29afb498fae17ed17f88b0cb51398792ffee2eb1" translate="yes" xml:space="preserve">
          <source>In a previous version, statsmodels 0.4, alpha was the confidence level, e.g. 0.95</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ed3ed45b7d6330005654dce98794552a8a016c7" translate="yes" xml:space="preserve">
          <source>In all cases, the data is at the monthly frequency and has been seasonally adjusted; the time-frame considered is 1972 - 2005.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91dcc6c0c507f92b50a4671570ecae50c655f32f" translate="yes" xml:space="preserve">
          <source>In an influential article, Harvey and Jaeger (1993) described the use of unobserved components models (also known as &quot;structural time series models&quot;) to derive stylized facts of the business cycle.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd2f597fc668935cbee1829e3163114fdc35c7dd" translate="yes" xml:space="preserve">
          <source>In backward difference coding, the mean of the dependent variable for a level is compared with the mean of the dependent variable for the prior level. This type of coding may be useful for a nominal or an ordinal variable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23493c0fe07230d22497fd9ca824c7877e62e7ef" translate="yes" xml:space="preserve">
          <source>In case of a VECM the shown lags are lagged differences.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9afb6ff1724fc134e9ef100b48ca4edcff16502" translate="yes" xml:space="preserve">
          <source>In case of a point forecast: each row of the returned ndarray represents the forecast of the neqs variables for a specific period. The first row (index [0]) is the forecast for the next period, the last row (index [steps-1]) is the steps-periods-ahead- forecast.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57ca4fc80875314eaf197bbde085a597795b2e4c" translate="yes" xml:space="preserve">
          <source>In econometrics and statistics the terms are defined more formally, and different definitions of exogeneity (weak, strong, strict) are used depending on the model. The usage in statsmodels as variable names cannot always be interpreted in a formal sense, but tries to follow the same principle.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26237b2cad61d16490c5e36e8a18c0751156539a" translate="yes" xml:space="preserve">
          <source>In essense, what is done is to reconstruct the mean of the (differenced) factor. We will compare it to the coincident index on published by the Federal Reserve Bank of Philadelphia (USPHCI on FRED).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37b9721a0f490ad248df7b9cab6b399dcb7eafc8" translate="yes" xml:space="preserve">
          <source>In fact, the dummy coding is not technically a contrast coding. This is because the dummy variables add to one and are not functionally independent of the model&amp;rsquo;s intercept. On the other hand, a set of &lt;em&gt;contrasts&lt;/em&gt; for a categorical variable with &lt;code&gt;k&lt;/code&gt; levels is a set of &lt;code&gt;k-1&lt;/code&gt; functionally independent linear combinations of the factor level means that are also independent of the sum of the dummy variables. The dummy coding isn&amp;rsquo;t wrong &lt;em&gt;per se&lt;/em&gt;. It captures all of the coefficients, but it complicates matters when the model assumes independence of the coefficients such as in ANOVA. Linear regression models do not assume independence of the coefficients and thus dummy coding is often the only coding that is taught in this context.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a94e54228fafece7a88008d45d49221ab789e00f" translate="yes" xml:space="preserve">
          <source>In fact, the dummy coding is not technically a contrast coding. This is because the dummy variables add to one and are not functionally independent of the model's intercept. On the other hand, a set of &lt;em&gt;contrasts&lt;/em&gt; for a categorical variable with &lt;code&gt;k&lt;/code&gt; levels is a set of &lt;code&gt;k-1&lt;/code&gt; functionally independent linear combinations of the factor level means that are also independent of the sum of the dummy variables. The dummy coding isn't wrong &lt;em&gt;per se&lt;/em&gt;. It captures all of the coefficients, but it complicates matters when the model assumes independence of the coefficients such as in ANOVA. Linear regression models do not assume independence of the coefficients and thus dummy coding is often the only coding that is taught in this context.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5ed29752d637cc399805888f3522e4b61817c3f" translate="yes" xml:space="preserve">
          <source>In general we may consider DBETAS in absolute value greater than $2/\sqrt{N}$ to be influential observations</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd578a5e842cbe15dd368149965f164b35b97ce4" translate="yes" xml:space="preserve">
          <source>In many cases of statistical analysis, we are not sure whether our statistical model is correctly specified. For example when using ols, then linearity and homoscedasticity are assumed, some test statistics additionally assume that the errors are normally distributed or that we have a large sample. Since our results depend on these statistical assumptions, the results are only correct of our assumptions hold (at least approximately).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2db97bf8b270c9da9479f97609e1d0220cda180" translate="yes" xml:space="preserve">
          <source>In models with many variables and factors, this can sometimes lend interpretation to the factors (for example sometimes one factor will load primarily on real variables and another on nominal variables).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f42b3b5ac6022a91d54dddb324cf26e1cc58fcc" translate="yes" xml:space="preserve">
          <source>In models with more variables and more factors, this can sometimes lend interpretation to the factors (for example sometimes one factor will load primarily on real variables and another on nominal variables).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02039e79d92b6bdc0c48f0e479910485e6237d52" translate="yes" xml:space="preserve">
          <source>In most cases, the quantile regression point estimates lie outside the OLS confidence interval, which suggests that the effect of income on food expenditure may not be constant across the distribution.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3dc4aee64689cb12169c1d4117ded449d69fa256" translate="yes" xml:space="preserve">
          <source>In nsides == 1, x is filtered</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e209feef98eeebe2d0217fe3c6cda5f80c39a13" translate="yes" xml:space="preserve">
          <source>In order for \(C(L)\) to be invertible, it must be that each factor \((1 - \lambda_i L)\) is invertible; the condition is then that \(|\lambda_i| &amp;lt; 1\), where \(\lambda_i\) is a root of the polynomial.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="371ce63cae539daffca063b691dd6d77a4a2a9ea" translate="yes" xml:space="preserve">
          <source>In order to achieve cycles with the appropriate frequencies, bounds are imposed on the parameter \(\lambda_c\) in estimation. These can be controlled via the keyword argument &lt;code&gt;cycle_period_bounds&lt;/code&gt;, which, if specified, must be a tuple of bounds on the &lt;strong&gt;period&lt;/strong&gt;&lt;code&gt;(lower, upper)&lt;/code&gt;. The bounds on the frequency are then calculated from those bounds.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b61f0dc9999f281b62e715092181ad451c0f177" translate="yes" xml:space="preserve">
          <source>In other words, y is &lt;em&gt;endogenous&lt;/em&gt; to our model, x is &lt;em&gt;exogenous&lt;/em&gt; to our model for the estimation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af90dbfc4e39fbda9f7a497a6246ce3bb3127bbe" translate="yes" xml:space="preserve">
          <source>In particular, they make the argument that these goals are often better met using the unobserved components approach rather than the popular Hodrick-Prescott filter or Box-Jenkins ARIMA modeling techniques.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9926bd94895ca91514e8b247bc2442349a94cae" translate="yes" xml:space="preserve">
          <source>In simple cases, the model can be constructed entirely using the MLEModel class. For example, the AR(2) model from above could be constructed and estimated using only the following code:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f053989db436c4cd81a913a0be43cb1fdd364992" translate="yes" xml:space="preserve">
          <source>In small samples the power for the &lt;code&gt;discrete&lt;/code&gt; version, has a sawtooth pattern as a function of the number of observations. As a consequence, small changes in the number of observations or in the normal approximation can have a large effect on the power.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1bf0c1caf2d8221615ae93f85f55ec2af748a797" translate="yes" xml:space="preserve">
          <source>In some cases, the maximum likelihood estimator might not exist, parameters might be infinite or not unique (e.g. (quasi-)separation in models with binary endogenous variable). Under the default settings, statsmodels will print a warning if the optimization algorithm stops without reaching convergence. However, it is important to know that the convergence criteria may sometimes falsely indicate convergence (e.g. if the value of the objective function converged but not the parameters). In general, a user needs to verify convergence.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84f1801a59dbd51ce1648ed0ecf9698edd3a38fa" translate="yes" xml:space="preserve">
          <source>In some cases, we may want to generalize the irregular component to allow for autoregressive effects:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="033f71e7c4540349e9a7263a3ea8e8d37981b76b" translate="yes" xml:space="preserve">
          <source>In terms of a univariate structural model, this can be represented as</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a75dd4a7269dce2b43686dd9b791814fb020d497" translate="yes" xml:space="preserve">
          <source>In terms of this model, regression with SARIMA errors can be represented easily as</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27777d8d6ce034846c9b9c80f5c6e015bc3ea028" translate="yes" xml:space="preserve">
          <source>In the Gram-Charlier distribution it is possible that the density becomes negative. This is the case when the deviation from the normal distribution is too large.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db037569ebf4335e05972e96cbf8adc3b3ed628d" translate="yes" xml:space="preserve">
          <source>In the above models we have assumed that the transition probabilities are constant across time. Here we allow the probabilities to change with the state of the economy. Otherwise, the model is the same Markov autoregression of Hamilton (1989).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3fb8f6b777f5610e0dbd587a1817976a008f95c" translate="yes" xml:space="preserve">
          <source>In the above situation, the $\lambda_{\text{emp}, j}$ are forced to be zero for $j &amp;gt; 0$, and we want them to be estimated as parameters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1235a7b5a95d7ef5465d75432758b3a2dcb243d2" translate="yes" xml:space="preserve">
          <source>In the case of missing data, the maintained hypothesis is that the data are missing completely at random. This test is then run on the standardized residuals excluding those corresponding to missing observations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c66517341041b3172270e9b797bbd46385aa1df" translate="yes" xml:space="preserve">
          <source>In the case of two samples, the samples are assumed to be independent.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa5a37344ecdd3e387d816da66ec4e0667cebecd" translate="yes" xml:space="preserve">
          <source>In the case that one of the matrices is time-invariant (so that, for example, \(Z_t = Z_{t+1} ~ \forall ~ t\)), its last dimension may be of size \(1\) rather than size &lt;code&gt;nobs&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b73e7dc8c7adb9f902fc3700bb47d579fe892af" translate="yes" xml:space="preserve">
          <source>In the code above, default arguments were used. We can also vary the bandwidth of the kernel, as we will now see.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80866483f08a623812f25bcc4cefb1add806c198" translate="yes" xml:space="preserve">
          <source>In the example above, a Gaussian kernel was used. Several other kernels are also available.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f7409dc37d95cea8b3b0b376d91e7e59e0285f4" translate="yes" xml:space="preserve">
          <source>In the example above, we printed the &lt;code&gt;NOTE&lt;/code&gt; attribute to learn about the Star98 dataset. Statsmodels datasets ships with other useful information. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18a075479c8677b7326ff83020570732bb749ec0" translate="yes" xml:space="preserve">
          <source>In the logit model,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e371799f3de18e7b4f437305bcd5f70fe8906866" translate="yes" xml:space="preserve">
          <source>In the multinomial logit model. .. math:: frac{expleft(beta_{j}^{prime}x_{i}right)}{sum_{k=0}^{J}expleft(beta_{k}^{prime}x_{i}right)}</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e3f3b27f895ca82e79d897eece3331f465e3d248" translate="yes" xml:space="preserve">
          <source>In the multinomial model the score matrix is K x J-1 but is returned as a flattened array to work with the solvers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af239662bc62772fdc3c88fc1b2e85ef7bca80b4" translate="yes" xml:space="preserve">
          <source>In the multinomial model the score vector is K x (J-1) but is returned as a flattened array. The Jacobian has the observations in rows and the flatteded array of derivatives in columns.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c57323d8e96cdefdc83e54b4a28f6576f11c656c" translate="yes" xml:space="preserve">
          <source>In the notation of &lt;a href=&quot;#id4&quot; id=&quot;id1&quot;&gt;[1]&lt;/a&gt;, the arguments &lt;code&gt;(variance, unconstrained)&lt;/code&gt; are written as \((\Sigma, A_1, \dots, A_p)\), where \(p\) is the order of the vector autoregression, and is here determined by the length of the &lt;code&gt;unconstrained&lt;/code&gt; argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9b26bac783855b46f37303280b0d8c98766c4ae" translate="yes" xml:space="preserve">
          <source>In the one and two sample cases with two-sided alternative, this test produces the same p-value as &lt;code&gt;proportions_chisquare&lt;/code&gt;, since the chisquare is the distribution of the square of a standard normal distribution.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="abcec44936a7af0cd742cf3e09ca9ec86c7ac266" translate="yes" xml:space="preserve">
          <source>In the previous example, we included a seasonal effect in an &lt;em&gt;additive&lt;/em&gt; way, meaning that we added a term allowing the process to depend on the 4th MA lag. It may be instead that we want to model a seasonal effect in a multiplicative way. We often write the model then as an ARIMA $(p,d,q) \times (P,D,Q)_s$, where the lowercast letters indicate the specification for the non-seasonal component, and the uppercase letters indicate the specification for the seasonal component; $s$ is the periodicity of the seasons (e.g. it is often 4 for quarterly data or 12 for monthly data). The data process can be written generically as:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="011303f3d93e7a851a623dffc6257747820e60e1" translate="yes" xml:space="preserve">
          <source>In the simplest form, a model relates an observed variable, y, to another set of variables, x, in some linear or nonlinear form</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54fd08210a2d16216c177307629603135e2bb3b4" translate="yes" xml:space="preserve">
          <source>In this case, it is expected that a recession will last about one year (4 quarters) and an expansion about two and a half years.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fdbd0cfcad11e12d19c08971c5813455039288e4" translate="yes" xml:space="preserve">
          <source>In this case, the AR order is specified via the &lt;code&gt;autoregressive&lt;/code&gt; keyword, and the autoregressive coefficients are estimated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3e2b4541f79a15725a560a46b53b39cd4cfc649" translate="yes" xml:space="preserve">
          <source>In this case, the autoregressive parameters would also be estimated via MLE.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6adf60dbc0597f3624016dc689aea05732bfcd9b" translate="yes" xml:space="preserve">
          <source>In this example we just reuse the same correlation matrix several times. Of course in reality one would show a different correlation (measuring a another type of correlation, for example Pearson (linear) and Spearman, Kendall (nonlinear) correlations) for the same variables.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99c4d2e8d599baee429271b4d01298264057c2f6" translate="yes" xml:space="preserve">
          <source>In this example, &lt;code&gt;w&lt;/code&gt; is the standard deviation of the error. &lt;code&gt;WLS&lt;/code&gt; requires that the weights are proportional to the inverse of the error variance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a895c8808fc3fc6ee0091425a5fa918bd58790a5" translate="yes" xml:space="preserve">
          <source>In this example, we use the Star98 dataset which was taken with permission from Jeff Gill (2000) Generalized linear models: A unified approach. Codebook information can be obtained by typing:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="478299e5b26517557e1769f423623d408fc72ec4" translate="yes" xml:space="preserve">
          <source>In this example, we will vizualize the interaction between categorical factors. First, we will create some categorical data are initialized. Then plotted using the interaction_plot function which internally recodes the x-factor categories to ingegers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dff971fe4a7e0d6ce65e91aef9a30e6f669c3013" translate="yes" xml:space="preserve">
          <source>In this implementation of differenced models, the Hamilton representation is not able to accomodate differencing in the state vector, so &lt;code&gt;simple_differencing&lt;/code&gt; (which performs differencing prior to estimation so that the first d + sD observations are lost) must be used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aabff73c75149585e862dd23972ea6aaa35d8b5d" translate="yes" xml:space="preserve">
          <source>In this model, with only four endogenous variables and one factor, it is easy to digest a simple table of the $R^2$ values, but in larger models it is not. For this reason, a bar plot is often employed; from the plot we can easily see that the factor explains most of the variation in industrial production index and a large portion of the variation in sales and employment, it is less helpful in explaining income.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d55dad2599ad7e30abb3cccb2167311a4d26994" translate="yes" xml:space="preserve">
          <source>In this part we develop models and functions that will be useful for time series analysis. Most of the models and function have been moved to &lt;a href=&quot;tsa#module-statsmodels.tsa&quot;&gt;&lt;code&gt;statsmodels.tsa&lt;/code&gt;&lt;/a&gt;. Currently, GARCH models remain in development stage in &lt;code&gt;sandbox.tsa&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9bb2ddca92b27d95046d217b5c18de2d127707aa" translate="yes" xml:space="preserve">
          <source>In this plot, if some points are adjacent (similar components), it means that back in the original space, the curves are similar. Then, finding the median curve means finding the higher density region (HDR) in the reduced space. Moreover, the more you get away from this HDR, the more the curve is unlikely to be similar to the other curves.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52a344ab92f53c1ff389cff5380c429fe7829f9b" translate="yes" xml:space="preserve">
          <source>In-sample and out-of-sample prediction for state space models generally</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="363a3a6af7113049664c020e7ee99a1acf2369e8" translate="yes" xml:space="preserve">
          <source>In-sample dynamic prediction. How good does our model do?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0464f611302b6576733d00eac0fce8da8c355ba7" translate="yes" xml:space="preserve">
          <source>In-sample prediction</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a74edfa6a4cc8da67acaca282e4cdefbf4e930d1" translate="yes" xml:space="preserve">
          <source>In-sample prediction and out-of-sample forecasting</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b00ad23b0f85ad63704fd9ff02c3251c6df279b0" translate="yes" xml:space="preserve">
          <source>In-sample prediction, conditional on the current and previous regime</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cf76a0bdb9c34207620453f0a1e77a112ae8f1c3" translate="yes" xml:space="preserve">
          <source>In-sample prediction, conditional on the current regime</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30ed7e09e4d89afc78bd7752a71db7471b5faafd" translate="yes" xml:space="preserve">
          <source>Incomplete convergence in maximum likelihood estimation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24e09a367f20a0156fa4c482c3bf77ddf4643d14" translate="yes" xml:space="preserve">
          <source>Increasing: Null hypothesis is that the variance is not increasing throughout the sample; that the sum-of-squares in the later subsample is &lt;em&gt;not&lt;/em&gt; greater than the sum-of-squares in the earlier subsample.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1db51a0f26de62a20645e34c6af0bca2f499ded3" translate="yes" xml:space="preserve">
          <source>Independence</source>
          <target state="translated">Independence</target>
        </trans-unit>
        <trans-unit id="064fe7e7340f3929a54313fa1b2dcd9d6289a7c2" translate="yes" xml:space="preserve">
          <source>Independence.covariance_matrix()</source>
          <target state="translated">Independence.covariance_matrix()</target>
        </trans-unit>
        <trans-unit id="ebac36ebd1ff36aab870109cdb9cbc53a8cac85e" translate="yes" xml:space="preserve">
          <source>Independence.covariance_matrix_solve()</source>
          <target state="translated">Independence.covariance_matrix_solve()</target>
        </trans-unit>
        <trans-unit id="48bd406dd1ec77b69d47ee18e24d97a5fa6f3f45" translate="yes" xml:space="preserve">
          <source>Independence.initialize()</source>
          <target state="translated">Independence.initialize()</target>
        </trans-unit>
        <trans-unit id="172562f1088c94824ddbd2d0c6893e84ef8e804b" translate="yes" xml:space="preserve">
          <source>Independence.summary()</source>
          <target state="translated">Independence.summary()</target>
        </trans-unit>
        <trans-unit id="89a14594ea7b2cf10665ef4d3e56c1c8a85d461e" translate="yes" xml:space="preserve">
          <source>Independence.update()</source>
          <target state="translated">Independence.update()</target>
        </trans-unit>
        <trans-unit id="ed00e282b5c140c3a3fdb10a2035a6dfb83c3ee7" translate="yes" xml:space="preserve">
          <source>Independent noise/error term</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61c78d39f1f69eed8ebf9848736cc4b64eb2ad5a" translate="yes" xml:space="preserve">
          <source>Industrial production (IPMAN)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22d6089592c782f147775e963b89bbe16711633b" translate="yes" xml:space="preserve">
          <source>Inefficient implementation for unequal lags, implemented for convenience</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a7511e8895a3cd04fa86c5aff8ac62dc9329215" translate="yes" xml:space="preserve">
          <source>Influence Plot</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e680fbc2fe27c85cb497b8c65cb84b00ac998c1b" translate="yes" xml:space="preserve">
          <source>Influence instance</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7186cdabc0c391ceafcd3d300f9bbfa49b266252" translate="yes" xml:space="preserve">
          <source>Influence plots</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ad7cfd3d2efcfc3ad6ac8eec090273c1b48ff0a" translate="yes" xml:space="preserve">
          <source>Influence plots show the (externally) studentized residuals vs. the leverage of each observation as measured by the hat matrix.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bfce336dd588bf419088eeabfaa020bb3a255ee9" translate="yes" xml:space="preserve">
          <source>Influence statistics</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f886d255e38a9480b110e9000c80245cf048c97a" translate="yes" xml:space="preserve">
          <source>Influence tests</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9fb72795780f2e5eb7181cfb242fb1817d19ddd3" translate="yes" xml:space="preserve">
          <source>Information criteria</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e60b5800af0f14d4171e5e6212b253f348b1a0eb" translate="yes" xml:space="preserve">
          <source>Initial design matrix</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8591f63912f13ac15beec7a50029ecb036640f55" translate="yes" xml:space="preserve">
          <source>Initial filtered observations differ from filter2 and signal.lfilter, but at end they are the same.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b73eb89be28f9945149744db460f228fbda042e5" translate="yes" xml:space="preserve">
          <source>Initial selection matrix</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b7c777fa63bc79d6177d2c6767fa30c9dd701c5" translate="yes" xml:space="preserve">
          <source>Initial state intercept vector</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3aa607c96c236b811f3f24df4abc29d46239785" translate="yes" xml:space="preserve">
          <source>Initial transition matrix</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8b6abe4b26a932af0dcaf7b4c35ea7379b636c3" translate="yes" xml:space="preserve">
          <source>Initialize (possibly re-initialize) a Model instance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af350bcf96de13e97bad409c4e982166e665b988" translate="yes" xml:space="preserve">
          <source>Initialize (possibly re-initialize) a Model instance. For instance, the design matrix of a linear model may change and some things must be recomputed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11da04a6a9a4be271afe5076f6b1ba2a670e9bfc" translate="yes" xml:space="preserve">
          <source>Initialize a generalized linear model.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e0d38fa15d85d275cbb415fa16ec9704ec85445" translate="yes" xml:space="preserve">
          <source>Initialize is called by statsmodels.model.LikelihoodModel.__init__ and should contain any preprocessing that needs to be done for a model.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b71a92a2da9b2b5cfa0c62d756608811991cf0ef" translate="yes" xml:space="preserve">
          <source>Initialize state and state covariance arrays in preparation for the Kalman filter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9aa0f93d5b3095f00fdf9c91126c048d23139eb4" translate="yes" xml:space="preserve">
          <source>Initialize the SARIMAX model.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="956539c5269d610e6b31329e275460af2a541d5c" translate="yes" xml:space="preserve">
          <source>Initialize the response variable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31395b43a185f90fc83fb47e0991060787b8538d" translate="yes" xml:space="preserve">
          <source>Initialize the state space representation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="587a055c3831d80dd42abe4b43736f19a5a96dfb" translate="yes" xml:space="preserve">
          <source>Initialize the statespace model as stationary.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6cdc49418be0aa79de59f9f616e2b08c79b318e7" translate="yes" xml:space="preserve">
          <source>Initialize the statespace model with approximate diffuse values.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e6b1fee932b3ef85b1312b03b6e1d2d8d27ce2f" translate="yes" xml:space="preserve">
          <source>Initialize the statespace model with known distribution for initial state.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a00a861598934ed25d332cdeb7cdd3714c03d4d" translate="yes" xml:space="preserve">
          <source>Initializes the ARMA component of the state space to the typical stationary values and the other components as approximate diffuse.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef1a45682840bb04d37247b63bfde58583efb5f4" translate="yes" xml:space="preserve">
          <source>Input-Output</source>
          <target state="translated">Input-Output</target>
        </trans-unit>
        <trans-unit id="a025fe96d2e5a21a2ed856e47cd2c53731dc47e4" translate="yes" xml:space="preserve">
          <source>Input-Output iolib</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d92cb65ebb13d195c1be1a71c1dbec28f5c36d5" translate="yes" xml:space="preserve">
          <source>Insert a title on top of the summary table.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5740205bcbc7bc813294b06f477797e2ee545e8" translate="yes" xml:space="preserve">
          <source>Insert a title on top of the summary table. If a string is provided in the title argument, that string is printed. If no title string is provided but a results instance is provided, statsmodels attempts to construct a useful title automatically.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4b58f8b5103a301fdd375c6985c849ef10c7541" translate="yes" xml:space="preserve">
          <source>Inspect the data:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c81b79df3c6448eae7c4f80428b54cd5692a17d7" translate="yes" xml:space="preserve">
          <source>Installation</source>
          <target state="translated">Installation</target>
        </trans-unit>
        <trans-unit id="f1b59071822012b8f8f9990eb707c0c33c15b7fe" translate="yes" xml:space="preserve">
          <source>Installation from Source</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c94644db0428a95602746df223de90d701352a1" translate="yes" xml:space="preserve">
          <source>Instantaneous causality is a symmetric relation (i.e. if causing is &amp;ldquo;instantaneously causing&amp;rdquo; caused, then also caused is &amp;ldquo;instantaneously causing&amp;rdquo; causing), thus the naming of the parameters (which is chosen to be in accordance with test_granger_causality()) may be misleading.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65d4bcd386b5ed958dd6c8af4ae3cc9ceb19e020" translate="yes" xml:space="preserve">
          <source>Instantiate a gamma family model with the default link function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e7dbabafadf6e78ac25107d1220882833d0c9c9" translate="yes" xml:space="preserve">
          <source>Instantiate the model</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27dab87f7be774dd20382fa63db61985a718e61c" translate="yes" xml:space="preserve">
          <source>Instead of estimating the transition probabilities as part of maximum likelihood, the regression coefficients $\beta_{ij}$ are estimated. These coefficients relate the transition probabilities to a vector of pre-determined or exogenous regressors $x_{t-1}$.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b85bdd007056803e5d8a3664a453fa2427468a1" translate="yes" xml:space="preserve">
          <source>Instead, we want to look at the relationship of the dependent variable and independent variables conditional on the other</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bcec6e9f9644074c38ddf1df9057a70dc68cae7f" translate="yes" xml:space="preserve">
          <source>Instrumental variables estimation using Two-Stage Least-Squares (2SLS)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9f88745d4faaff1abb4643ea8a5f1d2094ef5c2" translate="yes" xml:space="preserve">
          <source>Insufficient variation in the data</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d5d6046347833a75ea0ef496d2096a2273b1f7c" translate="yes" xml:space="preserve">
          <source>Interaction plot for factor level statistics.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2bdc876b8bb978589d0ab5c0da7a4cca946b328d" translate="yes" xml:space="preserve">
          <source>Interactions and ANOVA</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb14019570430bf6aedd1b6c89b80d0442cdce2f" translate="yes" xml:space="preserve">
          <source>Intercept</source>
          <target state="translated">Intercept</target>
        </trans-unit>
        <trans-unit id="605e0351f4c15cbef6df742de141f2bb8dfc5955" translate="yes" xml:space="preserve">
          <source>Intercepts in the measurement and state equation are ignored when calculating impulse responses.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba1f7d133929f22d262ab28cb90d3325c8239463" translate="yes" xml:space="preserve">
          <source>Internally, this function uses &lt;a href=&quot;http://pandas.pydata.org/pandas-docs/stable/missing_data.html#working-with-missing-data&quot;&gt;pandas.isnull&lt;/a&gt;. Anything that returns True from this function will be treated as missing data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8039c280e13418eb8811746b6f2213c94af3d6d" translate="yes" xml:space="preserve">
          <source>Internally, we calculate deviance as:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a9858c9bf3149456595f98943cf88e41039822e" translate="yes" xml:space="preserve">
          <source>Interpolation</source>
          <target state="translated">Interpolation</target>
        </trans-unit>
        <trans-unit id="4bcff4dac2f4478456355025d82a6ba7ccf06372" translate="yes" xml:space="preserve">
          <source>Interrater Reliability and Agreement</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fab7314229638cf50be1c2f8c2ff7b7dca355223" translate="yes" xml:space="preserve">
          <source>Interrater agreement measures like Fleiss&amp;rsquo;s kappa measure agreement relative to chance agreement. Different authors have proposed ways of defining these chance agreements. Fleiss&amp;rsquo; is based on the marginal sample distribution of categories, while Randolph uses a uniform distribution of categories as benchmark. Warrens (2010) showed that Randolph&amp;rsquo;s kappa is always larger or equal to Fleiss&amp;rsquo; kappa. Under some commonly observed condition, Fleiss&amp;rsquo; and Randolph&amp;rsquo;s kappa provide lower and upper bounds for two similar kappa_like measures by Light (1971) and Hubert (1977).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2473e96bc614a911821242119918a241a41836d6" translate="yes" xml:space="preserve">
          <source>Introduction</source>
          <target state="translated">Introduction</target>
        </trans-unit>
        <trans-unit id="e478e817df2bff2fd990ed7d25e5438eb73ec664" translate="yes" xml:space="preserve">
          <source>Introduction to generalized linear mixed models: &lt;a href=&quot;https://stats.idre.ucla.edu/other/mult-pkg/introduction-to-generalized-linear-mixed-models&quot;&gt;https://stats.idre.ucla.edu/other/mult-pkg/introduction-to-generalized-linear-mixed-models&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9904b1db009752d41f31bf0f55f0418fbdfff78c" translate="yes" xml:space="preserve">
          <source>Inv. Gauss. \(IG(\mu,\sigma^2)\)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99280cb58a39fd8ebd9553d3c8ef8efeecb590e0" translate="yes" xml:space="preserve">
          <source>Inverse Cumulative Distribution (Quantile) Function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3da6a2c5ecd24cfab06932ce2a4728cca18c0d55" translate="yes" xml:space="preserve">
          <source>Inverse of C-Log-Log transform link function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8fc597a6ba82326d6e0ba3d405a8e60fb257976" translate="yes" xml:space="preserve">
          <source>Inverse of log transform link function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e697fcde57296f7e51d41775d2347dfbd986d936" translate="yes" xml:space="preserve">
          <source>Inverse of the CDF</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af838d8bf2026663cc3a496754fd2439c2631558" translate="yes" xml:space="preserve">
          <source>Inverse of the link function.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6478fd2962c976f319ec8d0ebd2ab7ee3ab5a637" translate="yes" xml:space="preserve">
          <source>Inverse of the link function. Just a placeholder.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6440c28a5db910254c27a2cef41c10bd51928da" translate="yes" xml:space="preserve">
          <source>Inverse of the logit transform</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="211202afe409273f963b8308917670635b540fba" translate="yes" xml:space="preserve">
          <source>Inverse of the negative binomial transform</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="544d5f953a65495371d4a248ef82783e8cb4e7ea" translate="yes" xml:space="preserve">
          <source>Inverse of the power transform link function</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85f74eaed64bf35759fc4ed8838f16e01c97fe99" translate="yes" xml:space="preserve">
          <source>Inverse survival function (inverse of &lt;code&gt;sf&lt;/code&gt;) at q of the given RV.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd3d91132292cdb30feb941c61497f420f591f0f" translate="yes" xml:space="preserve">
          <source>InverseGaussian exponential family.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c56ee32ce83a09c3d0ca6e1680634d81850e9603" translate="yes" xml:space="preserve">
          <source>InverseGaussian.deviance()</source>
          <target state="translated">InverseGaussian.deviance()</target>
        </trans-unit>
        <trans-unit id="e37a03ca4a8af035c8cb5fb48880aa1a1a5ed3c0" translate="yes" xml:space="preserve">
          <source>InverseGaussian.fitted()</source>
          <target state="translated">InverseGaussian.fitted()</target>
        </trans-unit>
        <trans-unit id="687f6a617dcfcbd1a0316ad736af20a233ebbe58" translate="yes" xml:space="preserve">
          <source>InverseGaussian.loglike()</source>
          <target state="translated">InverseGaussian.loglike()</target>
        </trans-unit>
        <trans-unit id="db2d0c3bfe0d7cf51fee430ebf6bdcb3c75ee85b" translate="yes" xml:space="preserve">
          <source>InverseGaussian.loglike_obs()</source>
          <target state="translated">InverseGaussian.loglike_obs()</target>
        </trans-unit>
        <trans-unit id="bd37ecf92a10ba06b9423fb0f84a3b63d7164733" translate="yes" xml:space="preserve">
          <source>InverseGaussian.predict()</source>
          <target state="translated">InverseGaussian.predict()</target>
        </trans-unit>
        <trans-unit id="76dc7cfd152c01178428cf7b0237c8022bc8c144" translate="yes" xml:space="preserve">
          <source>InverseGaussian.resid_anscombe()</source>
          <target state="translated">InverseGaussian.resid_anscombe()</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
