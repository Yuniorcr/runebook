<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="perl">
    <body>
      <group id="perl">
        <trans-unit id="d95c8bef773580433166be7c2c32b85e8e849e6f" translate="yes" xml:space="preserve">
          <source>If a 2-digit code is entered, it is converted to 3 digits by prepending a 0.</source>
          <target state="translated">2 자리 코드를 입력하면 0을 앞에 붙여 3 자리로 변환합니다.</target>
        </trans-unit>
        <trans-unit id="e64a7d7369be70b0218a1b95be79c2c2deb28c1d" translate="yes" xml:space="preserve">
          <source>If a &lt;code&gt;&amp;lt;&lt;i&gt;FILEHANDLE&lt;/i&gt;&amp;gt;&lt;/code&gt; is used in a context that is looking for a list, a list comprising all input lines is returned, one line per list element. It's easy to grow to a rather large data space this way, so use with care.</source>
          <target state="translated">경우 &lt;code&gt;&amp;lt;&lt;i&gt;FILEHANDLE&lt;/i&gt;&amp;gt;&lt;/code&gt; 목록을 찾고 문맥에서 사용되는 모든 입력 라인을 포함하는 목록이 목록 요소마다 1 개 라인을 반환한다. 이런 식으로 다소 큰 데이터 공간으로 쉽게 확장 할 수 있으므로주의해서 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="259cdf2dd383c0f84fbe2ca3b6aceeeeaeccb785" translate="yes" xml:space="preserve">
          <source>If a &lt;code&gt;&lt;a href=&quot;functions/die&quot;&gt;die&lt;/a&gt;&lt;/code&gt; can find a &lt;code&gt;CxEVAL&lt;/code&gt; block on the context stack, then the stack is popped to that level and the return op in that block is assigned to &lt;code&gt;PL_restartop&lt;/code&gt; ; then a &lt;code&gt;JMPENV_JUMP(3)&lt;/code&gt; is performed. This normally passes control back to the guard. In the case of &lt;code&gt;perl_run&lt;/code&gt; and &lt;code&gt;call_sv&lt;/code&gt; , a non-null &lt;code&gt;PL_restartop&lt;/code&gt; triggers re-entry to the runops loop. The is the normal way that &lt;code&gt;&lt;a href=&quot;functions/die&quot;&gt;die&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;croak&lt;/code&gt; is handled within an &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/die&quot;&gt;die&lt;/a&gt;&lt;/code&gt; 가 컨텍스트 스택에서 &lt;code&gt;CxEVAL&lt;/code&gt; 블록을 찾을 수 있으면 스택이 해당 레벨로 팝되고 해당 블록의 리턴 op가 &lt;code&gt;PL_restartop&lt;/code&gt; 에 할당됩니다 . 그런 다음 &lt;code&gt;JMPENV_JUMP(3)&lt;/code&gt; 이 수행됩니다. 이것은 일반적으로 제어를 가드로 다시 전달합니다. &lt;code&gt;perl_run&lt;/code&gt; 및 &lt;code&gt;call_sv&lt;/code&gt; 의 경우 널이 아닌 &lt;code&gt;PL_restartop&lt;/code&gt; 트리거는 runops 루프에 다시 입력합니다. 일반적인 방법이다 &lt;code&gt;&lt;a href=&quot;functions/die&quot;&gt;die&lt;/a&gt;&lt;/code&gt; 또는 &lt;code&gt;croak&lt;/code&gt; 내에 처리 &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="2e842b426c14ec5c17e64ac341313bcce514b5ce" translate="yes" xml:space="preserve">
          <source>If a &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; locale&lt;/code&gt; form that includes &lt;code&gt;LC_CTYPE&lt;/code&gt; is in effect (see &lt;a href=&quot;perllocale&quot;&gt;perllocale&lt;/a&gt;), the case map used by &lt;code&gt;\l&lt;/code&gt; , &lt;code&gt;\L&lt;/code&gt; , &lt;code&gt;\u&lt;/code&gt; , and &lt;code&gt;\U&lt;/code&gt; is taken from the current locale. If Unicode (for example, &lt;code&gt;\N{}&lt;/code&gt; or code points of 0x100 or beyond) is being used, the case map used by &lt;code&gt;\l&lt;/code&gt; , &lt;code&gt;\L&lt;/code&gt; , &lt;code&gt;\u&lt;/code&gt; , and &lt;code&gt;\U&lt;/code&gt; is as defined by Unicode. That means that case-mapping a single character can sometimes produce a sequence of several characters. Under &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; locale&lt;/code&gt; , &lt;code&gt;\F&lt;/code&gt; produces the same results as &lt;code&gt;\L&lt;/code&gt; for all locales but a UTF-8 one, where it instead uses the Unicode definition.</source>
          <target state="translated">&lt;code&gt;LC_CTYPE&lt;/code&gt; 을 포함 하는 &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; locale&lt;/code&gt; 양식이 유효한 경우 ( &lt;a href=&quot;perllocale&quot;&gt;perllocale&lt;/a&gt; 참조 ) &lt;code&gt;\l&lt;/code&gt; , &lt;code&gt;\L&lt;/code&gt; , &lt;code&gt;\u&lt;/code&gt; 및 &lt;code&gt;\U&lt;/code&gt; 에서 사용하는 케이스 맵 은 현재 로케일에서 가져옵니다. 유니 코드 (예 : &lt;code&gt;\N{}&lt;/code&gt; 또는 코드 포인트 0x100 이상)를 사용하는 경우 &lt;code&gt;\l&lt;/code&gt; , &lt;code&gt;\L&lt;/code&gt; , &lt;code&gt;\u&lt;/code&gt; 및 &lt;code&gt;\U&lt;/code&gt; 사용하는 대소 문자 맵 은 유니 코드에서 정의한 것과 같습니다. 즉, 단일 문자를 대소 문자로 매핑하면 때때로 여러 문자의 시퀀스가 ​​생성 될 수 있습니다. 에서 &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; locale&lt;/code&gt; 로케일 , &lt;code&gt;\F&lt;/code&gt; 같은 결과를 &lt;code&gt;\L&lt;/code&gt; UTF-8을 제외한 모든 로케일의 경우 \ L 이며 대신 유니 코드 정의를 사용합니다.</target>
        </trans-unit>
        <trans-unit id="549e5fcf45cf7944f8141812970bb7a27ad11345" translate="yes" xml:space="preserve">
          <source>If a &lt;code&gt;Net::POP3&lt;/code&gt; object goes out of scope before &lt;code&gt;quit&lt;/code&gt; method is called then the &lt;code&gt;&lt;a href=&quot;../functions/reset&quot;&gt;reset&lt;/a&gt;&lt;/code&gt; method will called before the connection is closed. This means that any messages marked to be deleted will not be.</source>
          <target state="translated">경우 &lt;code&gt;Net::POP3&lt;/code&gt; 객체가 범위를 벗어나 전에 &lt;code&gt;quit&lt;/code&gt; 방법은 다음 호출되는 &lt;code&gt;&lt;a href=&quot;../functions/reset&quot;&gt;reset&lt;/a&gt;&lt;/code&gt; 연결이 닫히기 전에 메소드가 호출됩니다. 즉, 삭제 표시된 메시지는 삭제되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="043d74f31a25532198b1527d3ae5c4b1da9715ef" translate="yes" xml:space="preserve">
          <source>If a CODE reference is not used, a</source>
          <target state="translated">코드 참조가 사용되지 않으면</target>
        </trans-unit>
        <trans-unit id="e12066458359083bdcf249636aa07df8a14816c7" translate="yes" xml:space="preserve">
          <source>If a CODE reference is used then a</source>
          <target state="translated">코드 참조가 사용 된 경우</target>
        </trans-unit>
        <trans-unit id="f9ad0abaf0eff45a492a44f419b412cf87f4dd03" translate="yes" xml:space="preserve">
          <source>If a FILEHANDLE is supplied, it must be writable and opened in append mode (i.e., use &lt;code&gt;&lt;a href=&quot;functions/open&quot;&gt;open&lt;/a&gt;(FH, '&amp;gt;&amp;gt;filename')&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;functions/sysopen&quot;&gt;sysopen(FH,...,O_APPEND|O_RDWR)&lt;/a&gt;&lt;/code&gt;. If a filename is supplied, it should not be held open elsewhere. (Win32)</source>
          <target state="translated">FILEHANDLE이 제공되면 쓰기 가능해야하며 추가 모드에서 열어야합니다 (예 : &lt;code&gt;&lt;a href=&quot;functions/open&quot;&gt;open&lt;/a&gt;(FH, '&amp;gt;&amp;gt;filename')&lt;/code&gt; 또는 &lt;code&gt;&lt;a href=&quot;functions/sysopen&quot;&gt;sysopen(FH,...,O_APPEND|O_RDWR)&lt;/a&gt;&lt;/code&gt; . 파일 이름이 제공되면 다른 곳에서는 열지 말아야합니다 (Win32).</target>
        </trans-unit>
        <trans-unit id="3af3f41934dd0fe8f979cc12d4f4c701b5fb0dcf" translate="yes" xml:space="preserve">
          <source>If a Pod processor sees any command other than the ones listed above (like &quot;=head&quot;, or &quot;=haed1&quot;, or &quot;=stuff&quot;, or &quot;=cuttlefish&quot;, or &quot;=w123&quot;), that processor must by default treat this as an error. It must not process the paragraph beginning with that command, must by default warn of this as an error, and may abort the parse. A Pod parser may allow a way for particular applications to add to the above list of known commands, and to stipulate, for each additional command, whether formatting codes should be processed.</source>
          <target state="translated">포드 프로세서에 위에 나열된 명령 이외의 명령 (예 : &quot;= head&quot;또는 &quot;= haed1&quot;또는 &quot;= stuff&quot;또는 &quot;= cuttlefish&quot;또는 &quot;= w123&quot;)이 표시되면 해당 프로세서는 기본적으로 이것을 오류로 취급하십시오. 해당 명령으로 시작하는 단락을 처리해서는 안되며, 기본적으로이를 오류로 경고하고 구문 분석을 중단 할 수 있습니다. 포드 파서는 특정 애플리케이션이 상기 알려진 커맨드 목록에 추가하고, 포맷 코드가 처리되어야하는지의 여부를 추가 커맨드마다 규정 할 수있는 방법을 제공 할 수있다.</target>
        </trans-unit>
        <trans-unit id="84d7b60c1fec814496b3c4bc1816a8d5d03c5699" translate="yes" xml:space="preserve">
          <source>If a Pod processor sees any formatting code other than the ones listed above (as in &quot;N&amp;lt;...&amp;gt;&quot;, or &quot;Q&amp;lt;...&amp;gt;&quot;, etc.), that processor must by default treat this as an error. A Pod parser may allow a way for particular applications to add to the above list of known formatting codes; a Pod parser might even allow a way to stipulate, for each additional command, whether it requires some form of special processing, as L&amp;lt;...&amp;gt; does.</source>
          <target state="translated">Pod 프로세서가 위에 나열된 것 이외의 형식 코드 ( &quot;N &amp;lt;...&amp;gt;&quot;또는 &quot;Q &amp;lt;...&amp;gt;&quot;등)를 발견하면 해당 프로세서는 기본적으로이를 오류로 처리해야합니다. . 포드 파서는 특정 애플리케이션이 상기 알려진 포맷팅 코드 목록에 추가하는 방법을 허용 할 수있다. 포드 파서는 L &amp;lt;...&amp;gt;처럼 특정 형태의 특수 처리가 필요한지 여부에 관계없이 추가 명령마다 규정하는 방법을 허용 할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="a69d2c6e5370a359253a714b367c144cea0b32a3" translate="yes" xml:space="preserve">
          <source>If a SKIP directive is included with the plan, this method will return it.</source>
          <target state="translated">SKIP 지시문이 계획에 포함되어 있으면이 메소드가이를 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="fc36fbb42452cd08e5fbc977b40571fcb5ba6163" translate="yes" xml:space="preserve">
          <source>If a SKIP directive was included with the plan, this method will return the explanation, if any.</source>
          <target state="translated">SKIP 지시문이 계획에 포함 된 경우이 메소드는 설명이있는 경우 설명을 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="21c8d4e7e9fdf0b61712f2ee7b9d5069189ec21c" translate="yes" xml:space="preserve">
          <source>If a TODO test does succeed, then the feature in question shouldn't be on the TODO list, now should it?</source>
          <target state="translated">TODO 테스트가 성공하면 해당 기능이 TODO 목록에 없어야합니다. 이제해야합니까?</target>
        </trans-unit>
        <trans-unit id="5bc13fa8b4104f174148a214dadae282567de13a" translate="yes" xml:space="preserve">
          <source>If a character that isn't an octal digit is encountered, a warning is raised, and the value is based on the octal digits before it, discarding it and all following characters up to the closing brace. It is a fatal error if there are no octal digits at all.</source>
          <target state="translated">8 진수가 아닌 문자가 발견되면 경고가 발생하고 값은 그 앞에있는 8 진수를 기준으로하며 그 뒤에 오는 모든 문자와 닫는 중괄호까지 버립니다. 8 진수가 전혀 없으면 치명적인 오류입니다.</target>
        </trans-unit>
        <trans-unit id="22ce7778730981e7a416c117aaec163fa0497dba" translate="yes" xml:space="preserve">
          <source>If a check for non-empty is what you wanted then just put it in boolean context (see &lt;a href=&quot;perldata#Scalar-values&quot;&gt;Scalar values in perldata&lt;/a&gt;):</source>
          <target state="translated">비어 있지 않은 검사가 원하는 경우 부울 컨텍스트에 넣습니다 ( &lt;a href=&quot;perldata#Scalar-values&quot;&gt;perldata의 스칼라 값&lt;/a&gt; 참조 ).</target>
        </trans-unit>
        <trans-unit id="7bbe66a04a030c6e054fb0dfd4a30c2a7ed6df30" translate="yes" xml:space="preserve">
          <source>If a child calls &quot;skip_all&quot; in the plan, a &lt;code&gt;Test::Builder::Exception&lt;/code&gt; is thrown. Trap this error, call &lt;code&gt;finalize()&lt;/code&gt; and don't run any more tests on the child.</source>
          <target state="translated">계획에서 자식이 &quot;skip_all&quot;을 호출하면 &lt;code&gt;Test::Builder::Exception&lt;/code&gt; 이 발생합니다. 이 오류를 해결하고 &lt;code&gt;finalize()&lt;/code&gt; 호출 하고 자식에 대해 더 이상 테스트를 실행하지 마십시오.</target>
        </trans-unit>
        <trans-unit id="9e2b6a0e0e45f39177eb31d01e15e452bd57cce8" translate="yes" xml:space="preserve">
          <source>If a comparison subroutine (comp) is defined, it must return less than zero, zero, or greater than zero, if the first comparand is less than, equal, or greater than the second comparand.</source>
          <target state="translated">비교 서브 루틴 (comp)이 정의 된 경우, 첫 번째 비교가 두 번째 비교보다 작거나 같거나 크면 0보다 작거나 0보다 크거나 0보다 큰 값을 리턴해야합니다.</target>
        </trans-unit>
        <trans-unit id="6bcefbb01c642f7f0fc9b06ad8c1d9b86690b30e" translate="yes" xml:space="preserve">
          <source>If a config variable name ends with &lt;code&gt;list&lt;/code&gt; , it is a list. &lt;code&gt;o conf
KEY &lt;a href=&quot;functions/shift&quot;&gt;shift&lt;/a&gt;&lt;/code&gt; removes the first element of the list, &lt;code&gt;o conf KEY &lt;a href=&quot;functions/pop&quot;&gt;pop&lt;/a&gt;&lt;/code&gt; removes the last element of the list. &lt;code&gt;o conf KEYS &lt;a href=&quot;functions/unshift&quot;&gt;unshift&lt;/a&gt; LIST&lt;/code&gt; prepends a list of values to the list, &lt;code&gt;o conf KEYS &lt;a href=&quot;functions/push&quot;&gt;push&lt;/a&gt; LIST&lt;/code&gt; appends a list of valued to the list.</source>
          <target state="translated">구성 변수 이름이 &lt;code&gt;list&lt;/code&gt; 로 끝나는 경우 목록입니다. &lt;code&gt;o conf KEY &lt;a href=&quot;functions/shift&quot;&gt;shift&lt;/a&gt;&lt;/code&gt; 는 목록의 첫 번째 요소를 제거하고 &lt;code&gt;o conf KEY &lt;a href=&quot;functions/pop&quot;&gt;pop&lt;/a&gt;&lt;/code&gt; 은 목록의 마지막 요소를 제거합니다. &lt;code&gt;o conf KEYS &lt;a href=&quot;functions/unshift&quot;&gt;unshift&lt;/a&gt; LIST&lt;/code&gt; 는 목록에 값 목록을 추가하고 &lt;code&gt;o conf KEYS &lt;a href=&quot;functions/push&quot;&gt;push&lt;/a&gt; LIST&lt;/code&gt; 은 목록에 값 목록을 추가합니다.</target>
        </trans-unit>
        <trans-unit id="5109117db036bd8645f50a5e04d368af63084ec5" translate="yes" xml:space="preserve">
          <source>If a container object, such as a hash or array, is locked, all the elements of that container are not locked. For example, if a thread does a &lt;code&gt;&lt;a href=&quot;functions/lock&quot;&gt;lock&lt;/a&gt; @a&lt;/code&gt; , any other thread doing a &lt;code&gt;&lt;a href=&quot;functions/lock&quot;&gt;lock($a[12])&lt;/a&gt;&lt;/code&gt; won't block.</source>
          <target state="translated">해시 또는 배열과 같은 컨테이너 객체가 잠겨 있으면 해당 컨테이너의 모든 요소가 잠기지 않습니다. 스레드는 않는다 예를 들어, &lt;code&gt;&lt;a href=&quot;functions/lock&quot;&gt;lock&lt;/a&gt; @a&lt;/code&gt; 하는 일 다른 쓰레드 &lt;code&gt;&lt;a href=&quot;functions/lock&quot;&gt;lock($a[12])&lt;/a&gt;&lt;/code&gt; 차단하지 않을 것이다.</target>
        </trans-unit>
        <trans-unit id="dca4e72f15d2d8185a5bffef1f8b63be490eec41" translate="yes" xml:space="preserve">
          <source>If a default timeout ($def_timeout) in seconds is provided, it is used when a timeout is not given to the ping() method (below). The timeout must be greater than 0 and the default, if not specified, is 5 seconds.</source>
          <target state="translated">기본 시간 초과 ($ def_timeout)가 초 단위로 제공되면 ping () 메소드에 시간 초과가 제공되지 않을 때 사용됩니다 (아래). 제한 시간은 0보다 커야하며 지정되지 않은 경우 기본값은 5 초입니다.</target>
        </trans-unit>
        <trans-unit id="9cb3d5a547282377cc66b4c5457632db46bb8ed9" translate="yes" xml:space="preserve">
          <source>If a dereference operator is overloaded then it must return a</source>
          <target state="translated">역 참조 연산자에 과부하가 걸리면</target>
        </trans-unit>
        <trans-unit id="fe98464b03f834d1a964476866ec0454738cfc5e" translate="yes" xml:space="preserve">
          <source>If a directory name is specified, Perl will switch to that directory before running the program. The &lt;b&gt;-x&lt;/b&gt; switch controls only the disposal of leading garbage. The program must be terminated with &lt;code&gt;__END__&lt;/code&gt; if there is trailing garbage to be ignored; the program can process any or all of the trailing garbage via the &lt;code&gt;DATA&lt;/code&gt; filehandle if desired.</source>
          <target state="translated">디렉토리 이름이 지정되면 Perl은 프로그램을 실행하기 전에 해당 디렉토리로 전환합니다. &lt;b&gt;-x&lt;/b&gt; 스위치는 선도적 인 쓰레기의 처분을 제어합니다. 무시할 가비지가있는 경우 &lt;code&gt;__END__&lt;/code&gt; 로 프로그램을 종료해야합니다 . 프로그램은 원하는 경우 &lt;code&gt;DATA&lt;/code&gt; 파일 핸들을 통해 후행 가비지 중 일부 또는 전부를 처리 할 수 ​​있습니다 .</target>
        </trans-unit>
        <trans-unit id="5aaf565f5088172c3b4f50e88e5260fa4d43f871" translate="yes" xml:space="preserve">
          <source>If a distribution defines a minimal required perl version, this is added to the output as an additional line of the form:</source>
          <target state="translated">배포판이 최소한의 필수 perl 버전을 정의하면, 이는 다음 형식의 추가 행으로 출력에 추가됩니다.</target>
        </trans-unit>
        <trans-unit id="42b6266ffbedee9d19b5a6a2dc00e2ab21c075e3" translate="yes" xml:space="preserve">
          <source>If a false value (but not &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt;) is passed, &lt;code&gt;overrideHangul&lt;/code&gt; has no effect. &lt;code&gt;$Collator-&amp;gt;change(overrideHangul =&amp;gt; 0)&lt;/code&gt; resets the old one.</source>
          <target state="translated">false 값 ( &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; 아님)이 전달되면 &lt;code&gt;overrideHangul&lt;/code&gt; 이 적용되지 않습니다. &lt;code&gt;$Collator-&amp;gt;change(overrideHangul =&amp;gt; 0)&lt;/code&gt; 은 이전 것을 재설정합니다.</target>
        </trans-unit>
        <trans-unit id="41f3060c136c5cb39245327e845028b89a018338" translate="yes" xml:space="preserve">
          <source>If a false value (including &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt;) is passed, &lt;code&gt;overrideCJK&lt;/code&gt; has no effect. &lt;code&gt;$Collator-&amp;gt;change(overrideCJK =&amp;gt; 0)&lt;/code&gt; resets the old one.</source>
          <target state="translated">잘못된 값 ( &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; 포함 )이 전달되면 &lt;code&gt;overrideCJK&lt;/code&gt; 가 적용되지 않습니다. &lt;code&gt;$Collator-&amp;gt;change(overrideCJK =&amp;gt; 0)&lt;/code&gt; 는 이전 것을 재설정합니다.</target>
        </trans-unit>
        <trans-unit id="4ce3e5ab6913747cb34ccc5fe411d22f75b39a20" translate="yes" xml:space="preserve">
          <source>If a false value (including &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt;) is passed, &lt;code&gt;overrideOut&lt;/code&gt; has no effect. &lt;code&gt;$Collator-&amp;gt;change(overrideOut =&amp;gt; 0)&lt;/code&gt; resets the old one.</source>
          <target state="translated">잘못된 값 ( &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; 포함 )이 전달되면 &lt;code&gt;overrideOut&lt;/code&gt; 이 적용되지 않습니다. &lt;code&gt;$Collator-&amp;gt;change(overrideOut =&amp;gt; 0)&lt;/code&gt; 은 이전 것을 재설정합니다.</target>
        </trans-unit>
        <trans-unit id="14cf492ed81687842dddeeef058d5e33b14e6b8c" translate="yes" xml:space="preserve">
          <source>If a field width obtained through &lt;code&gt;*&lt;/code&gt; is negative, it has the same effect as the &lt;code&gt;-&lt;/code&gt; flag: left-justification.</source>
          <target state="translated">&lt;code&gt;*&lt;/code&gt; 를 통해 얻은 필드 너비 가 음수이면 &lt;code&gt;-&lt;/code&gt; 플래그 : 왼쪽 정렬 과 같은 효과를 갖습니다 .</target>
        </trans-unit>
        <trans-unit id="9605e9893d52ad305cb79e90d906d025024d5412" translate="yes" xml:space="preserve">
          <source>If a file named by an argument cannot be opened for some reason, Perl warns you about it, and moves on to the next file. Note that the lines are printed automatically. An error occurring during printing is treated as fatal. To suppress printing use the &lt;b&gt;-n&lt;/b&gt; switch. A &lt;b&gt;-p&lt;/b&gt; overrides a &lt;b&gt;-n&lt;/b&gt; switch.</source>
          <target state="translated">어떤 이유로 인수로 명명 된 파일을 열 수없는 경우 Perl은 이에 대해 경고하고 다음 파일로 이동합니다. 줄이 자동으로 인쇄됩니다. 인쇄 중에 발생하는 오류는 치명적인 것으로 처리됩니다. 인쇄를 억제하려면 &lt;b&gt;-n&lt;/b&gt; 스위치를 사용하십시오 . &lt;b&gt;-p&lt;/b&gt; 재정의하는 &lt;b&gt;-n&lt;/b&gt; 스위치.</target>
        </trans-unit>
        <trans-unit id="7607c4673d0f39465175ed86077289b9bf56cef9" translate="yes" xml:space="preserve">
          <source>If a filter has been installed with this method, it will be invoked every time you read a key from a DBM database.</source>
          <target state="translated">이 방법으로 필터를 설치 한 경우 DBM 데이터베이스에서 키를 읽을 때마다 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="ffcdc45cfdda9fabc4fc72ffad32b6bd83924c58" translate="yes" xml:space="preserve">
          <source>If a filter has been installed with this method, it will be invoked every time you read a value from a DBM database.</source>
          <target state="translated">이 방법으로 필터를 설치 한 경우 DBM 데이터베이스에서 값을 읽을 때마다 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="cd250eca2a3b32b9a72984e5551322c2a78954ba" translate="yes" xml:space="preserve">
          <source>If a filter has been installed with this method, it will be invoked every time you write a key to a DBM database.</source>
          <target state="translated">이 방법으로 필터를 설치 한 경우 DBM 데이터베이스에 키를 쓸 때마다 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="6d4a7b6c0f00f48df8682a8b26e45e64646603ea" translate="yes" xml:space="preserve">
          <source>If a filter has been installed with this method, it will be invoked every time you write a value to a DBM database.</source>
          <target state="translated">이 방법으로 필터를 설치 한 경우 DBM 데이터베이스에 값을 쓸 때마다 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="e3c644e7c4d09f78ea460ddc805cbed0f24eef71" translate="yes" xml:space="preserve">
          <source>If a fully qualified $class is given, its abbreviated version is checked first.</source>
          <target state="translated">정규화 된 $ class가 제공되면 약어 버전이 먼저 확인됩니다.</target>
        </trans-unit>
        <trans-unit id="61efacc190b96b684717f3100b2802427ca3f5f2" translate="yes" xml:space="preserve">
          <source>If a hyphen in a character class cannot syntactically be part of a range, for instance because it is the first or the last character of the character class, or if it immediately follows a range, the hyphen isn't special, and so is considered a character to be matched literally. If you want a hyphen in your set of characters to be matched and its position in the class is such that it could be considered part of a range, you must escape that hyphen with a backslash.</source>
          <target state="translated">문자 클래스의 하이픈이 구문 적으로 범위의 일부가 될 수없는 경우 (예 : 문자 클래스의 첫 번째 또는 마지막 문자이므로) 또는 범위 바로 뒤에 오는 경우 하이픈은 특별하지 않으므로 고려됩니다. 문자 그대로 일치하는 문자. 문자 세트의 하이픈을 일치시키고 클래스에서의 위치가 범위의 일부로 간주 될 수 있도록하려면 하이픈을 백 슬래시로 이스케이프해야합니다.</target>
        </trans-unit>
        <trans-unit id="8e9b736d2bd9dc9660e81744f77377a13eb0a302" translate="yes" xml:space="preserve">
          <source>If a key appears more than once in the initializer list of a hash, the last occurrence wins:</source>
          <target state="translated">해시의 이니셜 라이저 목록에 키가 두 번 이상 나타나면 마지막 항목이 승리합니다.</target>
        </trans-unit>
        <trans-unit id="e38101b895429346e058b0e8e435924731bb16b2" translate="yes" xml:space="preserve">
          <source>If a layer provides &lt;code&gt;Open()&lt;/code&gt; it should normally call the &lt;code&gt;Open()&lt;/code&gt; method of next layer down (if any) and then push itself on top if that succeeds. &lt;code&gt;PerlIOBase_open&lt;/code&gt; is provided to do exactly that, so in most cases you don't have to write your own &lt;code&gt;Open()&lt;/code&gt; method. If this method is not defined, other layers may have difficulty pushing themselves on top of it during open.</source>
          <target state="translated">레이어가 &lt;code&gt;Open()&lt;/code&gt; 제공하는 경우 일반적으로 다음 레이어 의 &lt;code&gt;Open()&lt;/code&gt; 메소드를 호출 한 다음 (있는 경우) 맨 위로 밀어야합니다. &lt;code&gt;PerlIOBase_open&lt;/code&gt; 은 정확히 그렇게하기 위해 제공되므로 대부분의 경우 고유 한 &lt;code&gt;Open()&lt;/code&gt; 메소드 를 작성할 필요가 없습니다 . 이 방법을 정의하지 않으면 다른 레이어가 열려있는 동안 레이어 위로 밀기 어려울 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="73dbe9c1af884c682c784ff2164f939b559495d3" translate="yes" xml:space="preserve">
          <source>If a lexical variable is given an attribute, there is no symbol table to which it belongs, so the symbol table argument (&lt;code&gt;$_[1]&lt;/code&gt; ) is set to the string &lt;code&gt;'LEXICAL'&lt;/code&gt; in that case. Likewise, ascribing an attribute to an anonymous subroutine results in a symbol table argument of &lt;code&gt;'ANON'&lt;/code&gt; .</source>
          <target state="translated">어휘 변수에 속성이 제공되면 해당 변수에 속하는 기호 테이블이 없으므로 기호 테이블 인수 ( &lt;code&gt;$_[1]&lt;/code&gt; )가 문자열 &lt;code&gt;'LEXICAL'&lt;/code&gt; 로 설정됩니다 . 마찬가지로, 익명 서브 루틴에 속성을 부여하면 기호 테이블 인수 &lt;code&gt;'ANON'&lt;/code&gt; 이 발생 합니다.</target>
        </trans-unit>
        <trans-unit id="373e9d26b4e220dbf14e875851af78e4ef70cdec" translate="yes" xml:space="preserve">
          <source>If a line was available from the source stream, &lt;code&gt;filter_read()&lt;/code&gt; returns a status value greater than zero and appends the line to &lt;code&gt;$_&lt;/code&gt; . A status value of zero indicates end-of-file, less than zero means an error. The filter function itself is expected to return its status in the same way, and put the filtered line it wants written to the source stream in &lt;code&gt;$_&lt;/code&gt; . The use of &lt;code&gt;$_&lt;/code&gt; accounts for the brevity of most Perl source filters.</source>
          <target state="translated">소스 스트림에서 라인을 사용할 수있는 경우 &lt;code&gt;filter_read()&lt;/code&gt; 는 0보다 큰 상태 값을 리턴하고 라인을 &lt;code&gt;$_&lt;/code&gt; 추가합니다 . 상태 값이 0이면 파일 끝을 나타내고 0보다 작 으면 오류를 나타냅니다. 필터 함수 자체는 같은 방식으로 상태를 반환하고 소스 스트림에 쓰려는 필터링 된 행을 &lt;code&gt;$_&lt;/code&gt; 넣습니다 . 사용 &lt;code&gt;$_&lt;/code&gt; 대부분의 펄 소스 필터의 간결함을 차지한다.</target>
        </trans-unit>
        <trans-unit id="eb73e02f11dc05b75008088bd5b205cf808a5add" translate="yes" xml:space="preserve">
          <source>If a matching entry cannot be found, and a default entry exists, then a reference to the default entry is returned.</source>
          <target state="translated">일치하는 항목을 찾을 수없고 기본 항목이 있으면 기본 항목에 대한 참조가 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="c613dbc045a6d1ccd39d5e4d8985654cb6efdedb" translate="yes" xml:space="preserve">
          <source>If a message can be controlled by the &lt;code&gt;warnings&lt;/code&gt; pragma, its warning category is included with the classification letter in the description below. E.g. &lt;code&gt;(W closed)&lt;/code&gt; means a warning in the &lt;code&gt;closed&lt;/code&gt; category.</source>
          <target state="translated">&lt;code&gt;warnings&lt;/code&gt; pragma 로 메시지를 제어 할 수있는 경우 해당 경고 범주는 아래 설명에서 분류 문자와 함께 포함됩니다. 예를 들어 &lt;code&gt;(W closed)&lt;/code&gt; 는 &lt;code&gt;closed&lt;/code&gt; 범주 의 경고를 의미합니다 .</target>
        </trans-unit>
        <trans-unit id="f00576e48e7083129f4536c4d9542b2af3efddb9" translate="yes" xml:space="preserve">
          <source>If a method for an operation is not found then Perl tries to autogenerate a substitute implementation from the operations that have been defined.</source>
          <target state="translated">오퍼레이션의 메소드를 찾지 못하면 Perl은 정의 된 오퍼레이션에서 대체 구현을 자동 생성하려고 시도합니다.</target>
        </trans-unit>
        <trans-unit id="0bdd74a3b17bde34780674e393224f07968f9f1d" translate="yes" xml:space="preserve">
          <source>If a module attempts to import any of these symbols the Exporter will give the module an opportunity to handle the situation before generating an error. The Exporter will call an export_fail method with a list of the failed symbols:</source>
          <target state="translated">모듈이 이러한 기호 중 하나를 가져 오려고 시도하면 내보내기는 오류를 생성하기 전에 상황을 처리 할 수있는 기회를 모듈에 제공합니다. 내보내기는 실패한 심볼 목록과 함께 export_fail 메소드를 호출합니다.</target>
        </trans-unit>
        <trans-unit id="46e9244ade28e8f11cc0bc5968d58da31945ce21" translate="yes" xml:space="preserve">
          <source>If a module does not build for some reason, look carefully for why it failed, and report problems to the module author. If it looks like the extension building support is at fault, report that with full details of how the build failed using the perlbug utility.</source>
          <target state="translated">어떤 이유로 모듈이 빌드되지 않으면 실패한 이유를주의해서 살펴보고 모듈 작성자에게 문제점을보고하십시오. 확장 빌드 지원에 결함이있는 것 같으면 perlbug 유틸리티를 사용하여 빌드가 실패한 방법에 대한 전체 세부 사항을보고하십시오.</target>
        </trans-unit>
        <trans-unit id="094a8b4d892c0d307d87dac5429320ae267e0ba1" translate="yes" xml:space="preserve">
          <source>If a module implements XSUBs, you will need one of the supported C compilers. You must make sure you have set up the environment for the compiler for command-line compilation before running &lt;code&gt;perl Makefile.PL&lt;/code&gt; or any invocation of make.</source>
          <target state="translated">모듈이 XSUB를 구현하는 경우 지원되는 C 컴파일러 중 하나가 필요합니다. &lt;code&gt;perl Makefile.PL&lt;/code&gt; 또는 make 호출을 실행하기 전에 명령 행 컴파일을위한 컴파일러 환경을 설정했는지 확인해야합니다 .</target>
        </trans-unit>
        <trans-unit id="9711733a9e84337767e9b5acb7ff59757c774ea1" translate="yes" xml:space="preserve">
          <source>If a name does not already have a suitable prefix and/or suffix then the corresponding file will be searched for by trying combinations of prefix and suffix appropriate to the platform: &quot;$name.o&quot;, &quot;lib$name.*&quot; and &quot;$name&quot;.</source>
          <target state="translated">이름에 적절한 접두사 및 / 또는 접미사가없는 경우 플랫폼에 적합한 접두사와 접미사를 조합하여 해당 파일을 검색합니다 : &quot;$ name.o&quot;, &quot;lib $ name. *&quot;및 &quot; $ name &quot;.</target>
        </trans-unit>
        <trans-unit id="71674c3e4540508bc53564e31d00df9a0af1f1d2" translate="yes" xml:space="preserve">
          <source>If a name resolve operation fails to provide a name, then this flag will cause getnameinfo() to indicate an error, rather than returning the numeric representation as a human-readable string.</source>
          <target state="translated">이름 해석 조작이 이름을 제공하지 못하면,이 플래그는 숫자 표시를 사람이 읽을 수있는 문자열로 리턴하지 않고 getnameinfo ()가 오류를 표시하게합니다.</target>
        </trans-unit>
        <trans-unit id="31b368c0d757e116a5dfb072a97b4193c426b9b0" translate="yes" xml:space="preserve">
          <source>If a negative array index is used to read from an array, the index will be translated to a positive one internally by calling FETCHSIZE before being passed to FETCH. You may disable this feature by assigning a true value to the variable &lt;code&gt;$NEGATIVE_INDICES&lt;/code&gt; in the tied array class.</source>
          <target state="translated">음수 배열 인덱스를 사용하여 배열을 읽으면 FETCH에 전달되기 전에 FETCHSIZE를 호출하여 인덱스가 내부적으로 양수로 변환됩니다. 연결된 배열 클래스 의 변수 &lt;code&gt;$NEGATIVE_INDICES&lt;/code&gt; 에 true 값을 할당하여이 기능을 비활성화 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="77fd7f19527eab5261c210a54c173bb0abc87920" translate="yes" xml:space="preserve">
          <source>If a package uses overload, it carries a special flag. This flag is also set when new functions are defined or @ISA is modified. There will be a slight speed penalty on the very first operation thereafter that supports overloading, while the overload tables are updated. If there is no overloading present, the flag is turned off. Thus the only speed penalty thereafter is the checking of this flag.</source>
          <target state="translated">패키지가 과부하를 사용하는 경우 특수 플래그를 전달합니다. 이 플래그는 새 함수가 정의되거나 @ISA가 수정 될 때도 설정됩니다. 오버로드를 지원하는 첫 번째 작업에는 오버로드 테이블이 업데이트되는 동안 약간의 속도 저하가 있습니다. 과부하가 없으면 플래그가 꺼집니다. 따라서 이후의 유일한 속도 불이익은이 플래그를 점검하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="eef6b1875e2dcae080c75ee35ffb78afc980a5f8" translate="yes" xml:space="preserve">
          <source>If a pattern does not contain a special backtracking verb that allows an argument, then &lt;code&gt;$REGERROR&lt;/code&gt; and &lt;code&gt;$REGMARK&lt;/code&gt; are not touched at all.</source>
          <target state="translated">패턴에 인수를 허용하는 특수 역 &lt;code&gt;$REGERROR&lt;/code&gt; 동사가 포함되어 있지 않으면 $ REGERROR 및 &lt;code&gt;$REGMARK&lt;/code&gt; 는 전혀 건드리지 않습니다.</target>
        </trans-unit>
        <trans-unit id="9f0b6253b5fcfd411b56a12da1005e8889d7cecd" translate="yes" xml:space="preserve">
          <source>If a piece of code is under the control of the &lt;code&gt;warnings&lt;/code&gt; pragma, both the &lt;code&gt;$^W&lt;/code&gt; variable and the &lt;b&gt;-w&lt;/b&gt; flag will be ignored for the scope of the lexical warning.</source>
          <target state="translated">코드 조각이 &lt;code&gt;warnings&lt;/code&gt; pragma 의 제어하에있는 경우 &lt;code&gt;$^W&lt;/code&gt; 변수와 &lt;b&gt;-w&lt;/b&gt; 플래그가 어휘 경고 범위에서 무시됩니다.</target>
        </trans-unit>
        <trans-unit id="dc66a04b7fd6c8f1331b2adb91a4455713a61616" translate="yes" xml:space="preserve">
          <source>If a plan has not yet been output, it will do so.</source>
          <target state="translated">계획이 아직 출력되지 않은 경우 계획이 출력됩니다.</target>
        </trans-unit>
        <trans-unit id="f9d2f49ea2b290886ecf360d9425d5113040021a" translate="yes" xml:space="preserve">
          <source>If a precision obtained through &lt;code&gt;*&lt;/code&gt; is negative, it counts as having no precision at all.</source>
          <target state="translated">&lt;code&gt;*&lt;/code&gt; 를 통해 얻은 정밀도 가 음수이면 정밀도가 전혀없는 것으로 계산됩니다.</target>
        </trans-unit>
        <trans-unit id="2493d17a98c3b1f685aa6fcd91f6a228a3382409" translate="yes" xml:space="preserve">
          <source>If a precompiled pattern is embedded in a larger pattern then the effect of &lt;code&gt;&quot;msixpluadn&quot;&lt;/code&gt; will be propagated appropriately. The effect that the &lt;code&gt;/o&lt;/code&gt; modifier has is not propagated, being restricted to those patterns explicitly using it.</source>
          <target state="translated">사전 컴파일 된 패턴이 더 큰 패턴으로 임베드되면 &lt;code&gt;&quot;msixpluadn&quot;&lt;/code&gt; 의 효과가 적절하게 전파됩니다. &lt;code&gt;/o&lt;/code&gt; 수정자가 갖는 효과 는 전파되지 않고 명시 적으로 사용하는 패턴으로 제한됩니다.</target>
        </trans-unit>
        <trans-unit id="cfe77c7e04c6532a52f2ea4bb204b4b081b46114" translate="yes" xml:space="preserve">
          <source>If a program's environment specifies an LC_NUMERIC locale and &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt;
locale&lt;/code&gt; is in effect when the format is declared, the locale is used to specify the decimal point character in formatted output. Formatted output cannot be controlled by &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; locale&lt;/code&gt; at the time when write() is called. See &lt;a href=&quot;perllocale&quot;&gt;perllocale&lt;/a&gt; for further discussion of locale handling.</source>
          <target state="translated">프로그램 환경이 LC_NUMERIC 로케일을 지정 하고 형식을 선언 할 때 &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; locale&lt;/code&gt; &lt;a href=&quot;functions/use&quot;&gt;사용&lt;/a&gt; 이 유효한 경우, 로케일은 형식화 된 출력에서 ​​소수점 문자를 지정하는 데 사용됩니다. write ()가 호출 될 때 &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; locale&lt;/code&gt; 을 &lt;a href=&quot;functions/use&quot;&gt;사용하여&lt;/a&gt; 형식화 된 출력을 제어 할 수 없습니다 . 로케일 처리에 대한 자세한 내용은 &lt;a href=&quot;perllocale&quot;&gt;perllocale&lt;/a&gt; 을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="dbdd7653484d14bb99878153118f9a9fc7a64201" translate="yes" xml:space="preserve">
          <source>If a queue is empty, &lt;code&gt;dequeue()&lt;/code&gt; blocks until another thread enqueues something. This makes queues ideal for event loops and other communications between threads.</source>
          <target state="translated">큐가 비어 있으면 다른 스레드가 무언가를 큐에 넣을 때까지 &lt;code&gt;dequeue()&lt;/code&gt; 차단됩니다. 따라서 큐는 이벤트 루프 및 스레드 간 기타 통신에 이상적입니다.</target>
        </trans-unit>
        <trans-unit id="d8a808372475f8c939dd3899bae64db28b71a73e" translate="yes" xml:space="preserve">
          <source>If a reference happens to be a reference to an object, then there are probably methods to access the things referred to, and you should probably stick to those methods unless you're in the class package that defines the object's methods. In other words, be nice, and don't violate the object's encapsulation without a very good reason. Perl does not enforce encapsulation. We are not totalitarians here. We do expect some basic civility though.</source>
          <target state="translated">참조가 객체에 대한 참조 인 경우, 참조 된 것들에 액세스하는 메소드가있을 수 있으며, 객체의 메소드를 정의하는 클래스 패키지에 있지 않는 한 해당 메소드를 고수해야합니다. 다시 말해서, 아주 좋은 이유없이 객체의 캡슐화를 위반하지 마십시오. Perl은 캡슐화를 시행하지 않습니다. 우리는 전체 주의자가 아닙니다. 우리는 약간의 기본 시민을 기대합니다.</target>
        </trans-unit>
        <trans-unit id="c8efe9417a8ca522054e8e0f20aa5ebe3ad20734" translate="yes" xml:space="preserve">
          <source>If a regexp has a variable that interpolates a code expression, Perl treats the regexp as an error. If the code expression is precompiled into a variable, however, interpolating is ok. The question is, why is this an error?</source>
          <target state="translated">정규 표현식에 코드 표현식을 보간하는 변수가 있으면 Perl은 정규 표현식을 오류로 처리합니다. 그러나 코드 표현식이 변수로 사전 컴파일 된 경우 보간은 정상입니다. 문제는 왜 이것이 오류입니까?</target>
        </trans-unit>
        <trans-unit id="d5bd95a2da72abd4235bfb3025f329041ecd2afc" translate="yes" xml:space="preserve">
          <source>If a regexp matches in more than one place in the string, Perl will always match at the earliest possible point in the string:</source>
          <target state="translated">정규 표현식이 문자열에서 둘 이상의 위치에서 일치하면 Perl은 항상 문자열에서 가능한 가장 빠른 지점에서 일치합니다.</target>
        </trans-unit>
        <trans-unit id="eaf4b93182f52023e0f84b564980685b7296c6d9" translate="yes" xml:space="preserve">
          <source>If a regular bracketed character class contains a &lt;code&gt;\p{}&lt;/code&gt; or &lt;code&gt;\P{}&lt;/code&gt; and is matched against a non-Unicode code point, a warning may be raised, as the result is not Unicode-defined. No such warning will come when using this extended form.</source>
          <target state="translated">일반 대괄호 문자 클래스에 &lt;code&gt;\p{}&lt;/code&gt; 또는 &lt;code&gt;\P{}&lt;/code&gt; 되어 있고 비 유니 코드 코드 포인트와 일치하는 경우 결과가 유니 코드로 정의되지 않으므로 경고가 발생할 수 있습니다. 이 확장 양식을 사용할 때는 그러한 경고가 표시되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="f85e430ff8e0f946fbbcd7fbdf03ad676d0029b5" translate="yes" xml:space="preserve">
          <source>If a result does not have a callback defined for it, this callback will be invoked. Thus, if all of the previous result types are specified as callbacks, this callback will</source>
          <target state="translated">결과에 콜백이 정의되어 있지 않으면이 콜백이 호출됩니다. 따라서 모든 이전 결과 유형이 콜백으로 지정된 경우이 콜백은</target>
        </trans-unit>
        <trans-unit id="7c88e9a20d1a229d11dbc65d34fee24d0f8252b1" translate="yes" xml:space="preserve">
          <source>If a script does not contain such a cooky, then to avoid calling</source>
          <target state="translated">스크립트에 그러한 요리법이 포함되어 있지 않으면 전화를 피하기 위해</target>
        </trans-unit>
        <trans-unit id="7e6d780b3e70414e72c5be7308b60f82c00d250e" translate="yes" xml:space="preserve">
          <source>If a second argument is given and it corresponds to a valid locale, the locale for the category is set to that value, and the function returns the now-current locale value. You can then use this in yet another call to &lt;code&gt;setlocale()&lt;/code&gt; . (In some implementations, the return value may sometimes differ from the value you gave as the second argument--think of it as an alias for the value you gave.)</source>
          <target state="translated">두 번째 인수가 제공되고 유효한 로케일에 해당하는 경우 카테고리의 로케일이 해당 값으로 설정되고 함수는 현재 현재 로케일 값을 리턴합니다. 그런 다음 &lt;code&gt;setlocale()&lt;/code&gt; 또 다른 호출에서 이것을 사용할 수 있습니다 . (일부 구현에서 반환 값은 때로는 두 번째 인수로 제공 한 값과 다를 수 있습니다. 제공 한 값의 별칭으로 생각하십시오.)</target>
        </trans-unit>
        <trans-unit id="91a945f54fa17399a38d6421bac299acb5873c21" translate="yes" xml:space="preserve">
          <source>If a second argument is given then it should be the name of the desired output file. If the special output filename &quot;-&quot; or &quot;&amp;gt;&amp;amp;STDOUT&quot; is given then the STDOUT filehandle is used for output (and no open or close is performed). If the special output filename &quot;&amp;gt;&amp;amp;STDERR&quot; is given then the STDERR filehandle is used for output (and no open or close is performed). If no output filehandle is currently in use and no output filename is specified, then &quot;-&quot; is implied. Alternatively, filehandle references or objects that support the regular IO operations (like &lt;code&gt;&lt;a href=&quot;../functions/print&quot;&gt;print&lt;/a&gt;&lt;/code&gt;, e.g. &lt;a href=&quot;http://search.cpan.org/perldoc/IO::String&quot;&gt;IO::String&lt;/a&gt;) are also accepted; the object must already be opened.</source>
          <target state="translated">두 번째 인수가 제공되면 원하는 출력 파일의 이름이어야합니다. 특수 출력 파일 이름 &quot;-&quot;또는 &quot;&amp;gt; &amp;amp; STDOUT&quot;이 제공되면 STDOUT 파일 핸들이 출력에 사용되며 열기 또는 닫기가 수행되지 않습니다. 특수 출력 파일 이름 &quot;&amp;gt; &amp;amp; STDERR&quot;이 제공되면 STDERR 파일 핸들이 출력에 사용되며 열기 또는 닫기가 수행되지 않습니다. 현재 사용중인 출력 파일 핸들이없고 출력 파일 이름을 지정하지 않으면 &quot;-&quot;가 내포됩니다. 또한, 일반 IO 작업을 지원 파일 핸들 참조 또는 객체 (같은 &lt;code&gt;&lt;a href=&quot;../functions/print&quot;&gt;print&lt;/a&gt;&lt;/code&gt; , 예를 들어, &lt;a href=&quot;http://search.cpan.org/perldoc/IO::String&quot;&gt;IO :: 문자열&lt;/a&gt; )도 허용됩니다; 개체가 이미 열려 있어야합니다.</target>
        </trans-unit>
        <trans-unit id="477169172ccc2cfa646e6b1ff7ebcaf7ea663dbd" translate="yes" xml:space="preserve">
          <source>If a second argument is given then it should correspond to a filehandle where output should be sent (otherwise the default output filehandle is &lt;code&gt;STDOUT&lt;/code&gt; if no output filehandle is currently in use).</source>
          <target state="translated">두 번째 인수가 제공되면 출력을 보내야하는 파일 핸들에 해당해야합니다 (그렇지 않으면 현재 출력 파일 핸들을 사용하지 않는 경우 기본 출력 파일 핸들은 &lt;code&gt;STDOUT&lt;/code&gt; 입니다 ).</target>
        </trans-unit>
        <trans-unit id="93e01c4263faa2fd7e903bd96fbfc6f719b4224a" translate="yes" xml:space="preserve">
          <source>If a signal of any given type fires multiple times during an opcode (such as from a fine-grained timer), the handler for that signal will be called only once, after the opcode completes; all other instances will be discarded. Furthermore, if your system's signal queue gets flooded to the point that there are signals that have been raised but not yet caught (and thus not deferred) at the time an opcode completes, those signals may well be caught and deferred during subsequent opcodes, with sometimes surprising results. For example, you may see alarms delivered even after calling &lt;code&gt;&lt;a href=&quot;functions/alarm&quot;&gt;alarm(0)&lt;/a&gt;&lt;/code&gt; as the latter stops the raising of alarms but does not cancel the delivery of alarms raised but not yet caught. Do not depend on the behaviors described in this paragraph as they are side effects of the current implementation and may change in future versions of Perl.</source>
          <target state="translated">주어진 유형의 신호가 오피 코드 동안 (예 : 세밀한 타이머에서) 여러 번 발생하는 경우 오피 코드가 완료된 후 해당 신호에 대한 핸들러가 한 번만 호출됩니다. 다른 모든 인스턴스는 삭제됩니다. 또한, opcode가 완료 될 때 발생했지만 아직 포착되지 않은 (따라서 지연되지 않은) 신호가있는 지점까지 시스템의 신호 대기열이 넘치면 이후의 opcode 중에 해당 신호가 포착되어 지연 될 수 있습니다. 때때로 놀라운 결과. 예를 들어, &lt;code&gt;&lt;a href=&quot;functions/alarm&quot;&gt;alarm(0)&lt;/a&gt;&lt;/code&gt; 호출 한 후에도 알람이 전달되는 것을 볼 수 있습니다후자는 경보 발생을 중지하지만 발생했지만 아직 포착되지 않은 경보의 전달을 취소하지는 않습니다. 현재 구현의 부작용이며 향후 버전의 Perl에서 변경 될 수 있으므로이 단락에 설명 된 동작에 의존하지 마십시오.</target>
        </trans-unit>
        <trans-unit id="8ca9f14adad1a4346557fbd963ffe8837b4e2de6" translate="yes" xml:space="preserve">
          <source>If a specified constant &lt;code&gt;EFOO&lt;/code&gt; does not exist on the system, &lt;code&gt;$!{EFOO}&lt;/code&gt; returns &lt;code&gt;&quot;&quot;&lt;/code&gt; . You may use &lt;code&gt;&lt;a href=&quot;functions/exists&quot;&gt;exists&lt;/a&gt; $!{EFOO}&lt;/code&gt; to check whether the constant is available on the system.</source>
          <target state="translated">지정된 상수 &lt;code&gt;EFOO&lt;/code&gt; 가 시스템에 없으면 &lt;code&gt;$!{EFOO}&lt;/code&gt; 는 &lt;code&gt;&quot;&quot;&lt;/code&gt; 를 리턴합니다 . 당신이 사용할 수 &lt;code&gt;&lt;a href=&quot;functions/exists&quot;&gt;exists&lt;/a&gt; $!{EFOO}&lt;/code&gt; 상수는 시스템에서 사용할 수 있는지 여부를 확인합니다.</target>
        </trans-unit>
        <trans-unit id="f800d47729ac41db50a73befe5a0c18db31026bf" translate="yes" xml:space="preserve">
          <source>If a string is UTF-8, &lt;b&gt;always&lt;/b&gt; use &lt;code&gt;utf8_to_uvchr_buf&lt;/code&gt; to get at the value, unless &lt;code&gt;UTF8_IS_INVARIANT(*s)&lt;/code&gt; in which case you can use &lt;code&gt;*s&lt;/code&gt; .</source>
          <target state="translated">문자열이 UTF-8 인 경우 &lt;code&gt;UTF8_IS_INVARIANT(*s)&lt;/code&gt; 가 아닌 경우 &lt;code&gt;*s&lt;/code&gt; 를 사용할 수있는 경우가 아니면 &lt;b&gt;항상 &lt;/b&gt; &lt;code&gt;utf8_to_uvchr_buf&lt;/code&gt; 를 사용 하여 값을 얻으십시오 .</target>
        </trans-unit>
        <trans-unit id="1be10a035bc9dd04a9faa3e7d6666d736bd26b25" translate="yes" xml:space="preserve">
          <source>If a sub has both a PROTO and a BLOCK, the prototype is not applied until after the BLOCK is completely defined. This means that a recursive function with a prototype has to be predeclared for the prototype to take effect, like so:</source>
          <target state="translated">서브에 PROTO와 BLOCK이 모두 있으면 BLOCK이 완전히 정의 될 때까지 프로토 타입이 적용되지 않습니다. 즉, 다음과 같이 프로토 타입을 적용하려면 프로토 타입이있는 재귀 함수를 미리 선언해야합니다.</target>
        </trans-unit>
        <trans-unit id="0608dc713e7e2ffc835fe7b94ed6aa1dd9da10a4" translate="yes" xml:space="preserve">
          <source>If a subroutine reference was given, it is invoked as:</source>
          <target state="translated">서브 루틴 참조가 제공된 경우 다음과 같이 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="b5b26c7bacf7c0c773c98a08b7cfd7b95eaadc8d" translate="yes" xml:space="preserve">
          <source>If a substring is known to match at end-of-line only, it may be followed by &lt;code&gt;$&lt;/code&gt; , as in &lt;code&gt;floating 'k'$&lt;/code&gt; .</source>
          <target state="translated">서브 스트링이 행 끝에서만 일치하는 것으로 알려진 경우, &lt;code&gt;floating 'k'$&lt;/code&gt; 에서와 같이 &lt;code&gt;$&lt;/code&gt; 뒤에 올 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="b8bac00f48a56f95c981f68b27c67c1613b3abed" translate="yes" xml:space="preserve">
          <source>If a test had either a &lt;code&gt;TODO&lt;/code&gt; or &lt;code&gt;SKIP&lt;/code&gt; directive, this method will return the accompanying explanation, if present.</source>
          <target state="translated">테스트에 &lt;code&gt;TODO&lt;/code&gt; 또는 &lt;code&gt;SKIP&lt;/code&gt; 지시문이 있으면이 메소드는 첨부 된 설명 (있는 경우)을 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="65b9290b4f037c914cf42f893f1aba1433a9e97a" translate="yes" xml:space="preserve">
          <source>If a test number is greater than the number of planned tests, this method will return true. Unplanned tests will</source>
          <target state="translated">테스트 수가 계획된 테스트 수보다 큰 경우이 방법은 true를 반환합니다. 계획되지 않은 테스트는</target>
        </trans-unit>
        <trans-unit id="99f0a88031cba297a38b9bb2a8d9794138cdfcc6" translate="yes" xml:space="preserve">
          <source>If a transformation subroutine (xfrm) is defined, its value is used to transform the lines read from the filehandle before their comparison.</source>
          <target state="translated">변환 서브 루틴 (xfrm)이 정의 된 경우 해당 값은 비교 전에 파일 핸들에서 읽은 행을 변환하는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="571f9ad4d812cfdda52b01e4ae41c48c7aa1a889" translate="yes" xml:space="preserve">
          <source>If a true value is given (non-zero but should be positive), it will be added as a terminator primary weight to the end of every standard Hangul syllable. Secondary and any higher weights for terminator are set to zero. If the value is false or &lt;code&gt;hangul_terminator&lt;/code&gt; key does not exist, insertion of terminator weights will not be performed.</source>
          <target state="translated">0이 아닌 양수인 값이 true이면 모든 표준 한글 음절 끝에 터미네이터 기본 가중치로 추가됩니다. 터미네이터에 대한 2 차 및 더 높은 가중치는 0으로 설정됩니다. 값이 false이거나 &lt;code&gt;hangul_terminator&lt;/code&gt; 키가 없으면 종료 자 가중치 삽입이 수행되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="06c503e180fbd73d4ade263d4ec3fc736e96785b" translate="yes" xml:space="preserve">
          <source>If a typed lexical variable (&lt;code&gt;&lt;a href=&quot;functions/my&quot;&gt;my&lt;/a&gt; Class
$var&lt;/code&gt; ) holding a reference is used to access a hash element and a package with the same name as the type has declared class fields using this pragma, then the hash key is verified at compile time. If the variables are not typed, access is only checked at run time.</source>
          <target state="translated">참조를 보유한 유형화 된 어휘 변수 ( &lt;code&gt;&lt;a href=&quot;functions/my&quot;&gt;my&lt;/a&gt; Class $var&lt;/code&gt; )를 사용하여 해시 요소에 액세스하고 해당 유형이이 pragma를 사용하여 클래스 필드를 선언 한 것과 동일한 이름을 가진 패키지에 액세스하는 경우, 컴파일시 해시 키가 확인됩니다. 변수를 입력하지 않으면 런타임시에만 액세스가 확인됩니다.</target>
        </trans-unit>
        <trans-unit id="a56a688e323d9747dee356792880eafa156d2877" translate="yes" xml:space="preserve">
          <source>If a utility or module isn't available, it will be marked in a cache (see the &lt;code&gt;$METHOD_FAIL&lt;/code&gt; variable further down), so it will not be tried again. The &lt;code&gt;fetch&lt;/code&gt; method will only fail when all options are exhausted, and it was not able to retrieve the file.</source>
          <target state="translated">유틸리티 나 모듈을 사용할 수없는 경우 캐시에 표시되므로 ( &lt;code&gt;$METHOD_FAIL&lt;/code&gt; 변수를 자세히 참조 ) 다시 시도하지 않습니다. &lt;code&gt;fetch&lt;/code&gt; 모든 옵션이 소진 때 메서드는 실패하고이 파일을 검색 할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="17e415afdb54d5332d73e9d658477c2317a9747c" translate="yes" xml:space="preserve">
          <source>If a variable is declared inside a CODE: section it will follow any typemap code that is emitted for the input parameters. This may result in the declaration ending up after C code, which is C syntax error. Similar errors may happen with an explicit &lt;code&gt;;&lt;/code&gt; -type or &lt;code&gt;+&lt;/code&gt; -type initialization of parameters is used (see &lt;a href=&quot;#Initializing-Function-Parameters&quot;&gt;Initializing Function Parameters&lt;/a&gt;). Declaring these variables in an INIT: section will not help.</source>
          <target state="translated">변수가 CODE : 섹션 내에 선언되면 입력 매개 변수에 대해 생성 된 모든 유형 맵 코드를 따릅니다. 이로 인해 C 코드 다음에 선언이 끝나고 C 구문 오류가 발생할 수 있습니다. 비슷한 오류가 명시 적으로 발생할 수 있습니다 &lt;code&gt;;&lt;/code&gt; 매개 변수의 -type 또는 &lt;code&gt;+&lt;/code&gt; -type 초기화가 사용됩니다 ( &lt;a href=&quot;#Initializing-Function-Parameters&quot;&gt;함수 매개 변수 초기화&lt;/a&gt; 참조 ). INIT : 섹션에서 이러한 변수를 선언하면 도움이되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="b1e1471095c4d68dab8592febf94b7e3ac2a2016" translate="yes" xml:space="preserve">
          <source>If accept() is interrupted by a signal, $! will be set to EINTR. If this happens, we can safely continue to the next iteration of the loop and another call to accept(). It is important that your signal handling code not modify the value of $!, or else this test will likely fail. In the REAPER subroutine we create a local version of $! before calling waitpid(). When waitpid() sets $! to ECHILD as it inevitably does when it has no more children waiting, it updates the local copy and leaves the original unchanged.</source>
          <target state="translated">accept ()가 신호에 의해 중단되면 $! EINTR로 설정됩니다. 이런 일이 발생하면 루프의 다음 반복과 accept ()에 대한 다른 호출을 안전하게 계속할 수 있습니다. 신호 처리 코드가 $!의 값을 수정하지 않는 것이 중요합니다. 그렇지 않으면이 테스트가 실패 할 수 있습니다. REAPER 서브 루틴에서 $의 로컬 버전을 만듭니다! waitpid ()를 호출하기 전에 waitpid ()가 $!를 설정하면 더 이상 대기중인 자식이 없을 때 필연적으로 ECHILD에 로컬 사본을 업데이트하고 원본을 그대로 둡니다.</target>
        </trans-unit>
        <trans-unit id="752e6cffd40215caddfd723588dccf4863a5ed16" translate="yes" xml:space="preserve">
          <source>If adding a new module to a set, follow the original author's standards for naming modules and the interface to methods in those modules.</source>
          <target state="translated">세트에 새 모듈을 추가하는 경우 모듈 이름 지정에 대한 원래 작성자의 표준 및 해당 모듈의 메소드에 대한 인터페이스를 따르십시오.</target>
        </trans-unit>
        <trans-unit id="c30aaa76b20fc01d8891caaf8c421bdbbefa39ad" translate="yes" xml:space="preserve">
          <source>If after that process the layer is still not defined then the &lt;code&gt;&lt;a href=&quot;functions/open&quot;&gt;open&lt;/a&gt;&lt;/code&gt; will fail.</source>
          <target state="translated">해당 프로세스 후에도 레이어가 여전히 정의되지 않으면 &lt;code&gt;&lt;a href=&quot;functions/open&quot;&gt;open&lt;/a&gt;&lt;/code&gt; 가 실패합니다.</target>
        </trans-unit>
        <trans-unit id="3f5b65dba45a85e174c3b613f61ee902daa93694" translate="yes" xml:space="preserve">
          <source>If all actions were successful install will return a hashref of the results as described above for the $result parameter. If any action is a failure then install will die, therefore it is recommended to pass in the $result parameter instead of using the return value. If the result parameter is provided then the returned hashref will be the passed in hashref.</source>
          <target state="translated">모든 조치가 완료되면 $ result 매개 변수에 대해 위에서 설명한대로 결과의 해시 참조를 리턴합니다. 조치가 실패하면 설치가 종료되므로 리턴 값을 사용하는 대신 $ result 매개 변수를 전달하는 것이 좋습니다. 결과 매개 변수가 제공되면 리턴 된 hashref가 hashref로 전달됩니다.</target>
        </trans-unit>
        <trans-unit id="127255eea385053cfe8f53f8f2c648f76a8be49c" translate="yes" xml:space="preserve">
          <source>If all data that comes from a certain handle is encoded in exactly the same way, you can tell the PerlIO system to automatically decode everything, with the &lt;code&gt;encoding&lt;/code&gt; layer. If you do this, you can't accidentally forget to decode or encode anymore, on things that use the layered handle.</source>
          <target state="translated">특정 핸들에서 오는 모든 데이터가 정확히 같은 방식으로 인코딩 된 경우 PerlIO 시스템에 &lt;code&gt;encoding&lt;/code&gt; 계층을 사용하여 모든 것을 자동으로 디코딩하도록 지시 할 수 있습니다 . 이렇게하면 계층화 된 핸들을 사용하는 항목에서 실수로 더 이상 디코딩하거나 인코딩하는 것을 잊을 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="3e7d1b1bb140827b5655410f34d1155c7f80618e" translate="yes" xml:space="preserve">
          <source>If all goes okay and no errors during a build, you'll get two independent distributions: &lt;code&gt;wince-mips-pocket-wce300&lt;/code&gt; and &lt;code&gt;mips-wce300-thr&lt;/code&gt; .</source>
          <target state="translated">빌드 중에 모든 것이 정상이고 오류가 없으면 &lt;code&gt;wince-mips-pocket-wce300&lt;/code&gt; 및 &lt;code&gt;mips-wce300-thr&lt;/code&gt; 의 두 가지 독립적 인 배포판을 얻게 됩니다.</target>
        </trans-unit>
        <trans-unit id="2ab3e0df4f550d075ed2874e19cdd1793f373e2a" translate="yes" xml:space="preserve">
          <source>If all this is intimidating, have no (well, maybe only a little) fear. There are modules that can help. The &lt;code&gt;File::Spec&lt;/code&gt; modules provide methods to do the Right Thing on whatever platform happens to be running the program.</source>
          <target state="translated">이 모든 것이 협박이라면 두려움이 없습니다. 도움이 될 수있는 모듈이 있습니다. &lt;code&gt;File::Spec&lt;/code&gt; 모듈은 프로그램을 실행하는 일이 어떤 플랫폼에서 옳은 일을 할 수있는 방법을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="ae7ad2a8e725968ebffe98c6ec06a2f880b60f52" translate="yes" xml:space="preserve">
          <source>If all you want to do is pretend to be telnet but don't need the initial telnet handshaking, then the standard dual-process approach will suffice:</source>
          <target state="translated">텔넷 인 것처럼 가장하지만 초기 텔넷 핸드 쉐이킹이 필요하지 않은 경우 표준 이중 프로세스 방식으로 충분합니다.</target>
        </trans-unit>
        <trans-unit id="114fc5763881eaed2b695ddb5eda1e514b33dd63" translate="yes" xml:space="preserve">
          <source>If all your tests passed, &lt;a href=&quot;builder&quot;&gt;Test::Builder&lt;/a&gt; will exit with zero (which is normal). If anything failed it will exit with how many failed. If you run less (or more) tests than you planned, the missing (or extras) will be considered failures. If no tests were ever run &lt;a href=&quot;builder&quot;&gt;Test::Builder&lt;/a&gt; will throw a warning and exit with 255. If the test died, even after having successfully completed all its tests, it will still be considered a failure and will exit with 255.</source>
          <target state="translated">모든 테스트가 통과되면 &lt;a href=&quot;builder&quot;&gt;Test :: Builder&lt;/a&gt; 가 0으로 종료됩니다 (정상). 실패한 항목이 몇 개 있으면 종료됩니다. 계획 한 것보다 적은 (또는 더 많은) 테스트를 실행하면 누락 (또는 추가)이 실패로 간주됩니다. 테스트가 실행되지 않은 경우 &lt;a href=&quot;builder&quot;&gt;Test :: Builder&lt;/a&gt; 는 경고를 발생시키고 255로 종료합니다. 테스트가 모두 완료된 후에도 테스트가 종료 된 경우에도 여전히 실패로 간주되어 255로 종료됩니다.</target>
        </trans-unit>
        <trans-unit id="a98f6624ef41fa5865752ff72d1c88c5adce8ff1" translate="yes" xml:space="preserve">
          <source>If all your tests passed, Test::Builder will exit with zero (which is normal). If anything failed it will exit with how many failed. If you run less (or more) tests than you planned, the missing (or extras) will be considered failures. If no tests were ever run Test::Builder will throw a warning and exit with 255. If the test died, even after having successfully completed all its tests, it will still be considered a failure and will exit with 255.</source>
          <target state="translated">모든 테스트가 통과되면 Test :: Builder가 0으로 종료됩니다 (정상). 실패한 항목이 몇 개 있으면 종료됩니다. 계획 한 것보다 적은 (또는 더 많은) 테스트를 실행하면 누락 (또는 추가)이 실패로 간주됩니다. 테스트가 실행되지 않은 경우 Test :: Builder는 경고를 발생시키고 255로 종료합니다. 테스트가 모두 완료된 후에도 테스트가 완료된 경우에도 여전히 실패로 간주되어 255로 종료됩니다.</target>
        </trans-unit>
        <trans-unit id="ec52cc18e24a40a3b425f46525ccb32d3bbfcd0d" translate="yes" xml:space="preserve">
          <source>If all your tests passed, Test::Simple will exit with zero (which is normal). If anything failed it will exit with how many failed. If you run less (or more) tests than you planned, the missing (or extras) will be considered failures. If no tests were ever run Test::Simple will throw a warning and exit with 255. If the test died, even after having successfully completed all its tests, it will still be considered a failure and will exit with 255.</source>
          <target state="translated">모든 테스트가 통과되면 Test :: Simple은 0으로 종료됩니다 (정상). 실패한 항목이 몇 개 있으면 종료됩니다. 계획 한 것보다 적은 (또는 더 많은) 테스트를 실행하면 누락 (또는 추가)이 실패로 간주됩니다. 테스트가 실행되지 않은 경우 Test :: Simple은 경고를 발생시키고 255로 종료합니다. 테스트가 성공적으로 완료된 후에도 테스트는 모두 실패로 간주되어 255로 종료됩니다.</target>
        </trans-unit>
        <trans-unit id="bf21a78dfdb342ccff4796ddae824fa3095f386e" translate="yes" xml:space="preserve">
          <source>If an &lt;code&gt;ExtraField&lt;/code&gt; option is specified and it is a simple scalar, it must conform to the sub-field structure as defined in RFC 1952.</source>
          <target state="translated">는 IF &lt;code&gt;ExtraField&lt;/code&gt; 의 옵션을 지정하고 간단한 스칼라입니다 RFC 1952에 정의 된대로, 그것은 서브 필드 구조에 따라야합니다.</target>
        </trans-unit>
        <trans-unit id="703bb32d1796efb54146381859e7e166335fd702" translate="yes" xml:space="preserve">
          <source>If an &lt;code&gt;ExtraField&lt;/code&gt; option is specified and it is a simple scalar, the structure will not be checked. The only error is if the length is too big.</source>
          <target state="translated">는 IF &lt;code&gt;ExtraField&lt;/code&gt; 의 옵션을 지정하고 간단한 스칼라이다, 구조는 검사하지 않습니다. 길이가 너무 큰 경우 유일한 오류입니다.</target>
        </trans-unit>
        <trans-unit id="d5888ada14b086770c285ef36da99e64d4b36a12" translate="yes" xml:space="preserve">
          <source>If an &lt;code&gt;ExtraField&lt;/code&gt; option is specified the second byte of the ID will be checked in each subfield to ensure that it does not contain the reserved value 0x00.</source>
          <target state="translated">는 IF &lt;code&gt;ExtraField&lt;/code&gt; 의 옵션은 지정된 ID의 두 번째 바이트는 예약 된 값 &amp;times; 00이 없도록 각 서브 필드에서 확인할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="bba67c55f0a73d622c034c758b4c54c06d0297ce" translate="yes" xml:space="preserve">
          <source>If an AUTOLOAD routine is an XSUB, as with Perl subroutines, Perl puts the fully-qualified name of the autoloaded subroutine in the $AUTOLOAD variable of the XSUB's package.</source>
          <target state="translated">Perl 서브 루틴과 같이 AUTOLOAD 루틴이 XSUB 인 경우 Perl은 자동로드 서브 루틴의 완전한 이름을 XSUB 패키지의 $ AUTOLOAD 변수에 넣습니다.</target>
        </trans-unit>
        <trans-unit id="42bdc376fb833e498b49e6edb80ebe7de88f4149" translate="yes" xml:space="preserve">
          <source>If an Input glob matches the same file more than once, only the first will be used.</source>
          <target state="translated">입력 글로브가 동일한 파일을 두 번 이상 일치하면 첫 번째 파일 만 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="4c7ac1d42b2433b8600fc2dd6eb1a16139df0641" translate="yes" xml:space="preserve">
          <source>If an XSUB is created to offer a direct translation between this function and Perl, then this XSUB will be used from Perl with the following code. The $status and $timep variables will contain the output of the function.</source>
          <target state="translated">이 함수와 Perl간에 직접 변환을 제공하기 위해 XSUB가 작성되면이 XSUB는 다음 코드와 함께 Perl에서 사용됩니다. $ status 및 $ timep 변수에는 함수 출력이 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="b382afe3d07f60c5f6eced5294d3838170432890" translate="yes" xml:space="preserve">
          <source>If an XSUB name contains &lt;code&gt;::&lt;/code&gt; , it is considered to be a C++ method. The generated Perl function will assume that its first argument is an object pointer. The object pointer will be stored in a variable called THIS. The object should have been created by C++ with the new() function and should be blessed by Perl with the sv_setref_pv() macro. The blessing of the object by Perl can be handled by a typemap. An example typemap is shown at the end of this section.</source>
          <target state="translated">XSUB 이름에 &lt;code&gt;::&lt;/code&gt; 가 포함 된 경우 C ++ 메소드로 간주됩니다. 생성 된 Perl 함수는 첫 번째 인수가 객체 포인터라고 가정합니다. 객체 포인터는 THIS라는 변수에 저장됩니다. 객체는 new () 함수를 사용하여 C ++에 의해 작성되었고 sv_setref_pv () 매크로를 사용하여 Perl에 의해 축복을 받아야합니다. Perl에 의한 객체의 축복은 타입 맵에 의해 처리 될 수 있습니다. 이 섹션의 끝에 typemap 예제가 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="a5be5707a4fed01d7fc6a9c5c683f16ea2406809" translate="yes" xml:space="preserve">
          <source>If an argument callback routine is specified, &lt;code&gt;@ARGV&lt;/code&gt; will always be empty upon successful return of GetOptions() since all options have been processed. The only exception is when &lt;code&gt;--&lt;/code&gt; is used:</source>
          <target state="translated">인수 콜백 루틴이 지정되면 모든 옵션이 처리되었으므로 GetOptions ()가 성공적으로 리턴 되면 &lt;code&gt;@ARGV&lt;/code&gt; 가 항상 비어 있습니다. &lt;code&gt;--&lt;/code&gt; 가 사용되는 경우 는 예외입니다 .</target>
        </trans-unit>
        <trans-unit id="b39b97b3c5875ed6ddbb4cadef1665f0d49ebbe7" translate="yes" xml:space="preserve">
          <source>If an argument is given, it must correspond to the desired section heading number, in which case only the specified section heading is returned. If there is no current section heading at the specified level, then &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; is returned.</source>
          <target state="translated">인수가 제공되면 원하는 섹션 제목 번호에 해당해야하며,이 경우 지정된 섹션 제목 만 반환됩니다. 지정된 레벨에 현재 섹션 표제가 없으면 &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; 가 리턴됩니다.</target>
        </trans-unit>
        <trans-unit id="7271fc38171101f8ded47e78d280e28ab4aefe24" translate="yes" xml:space="preserve">
          <source>If an attribute handler is declared and the &lt;code&gt;:ATTR&lt;/code&gt; specifier is given the name of a built-in type (&lt;code&gt;SCALAR&lt;/code&gt; , &lt;code&gt;ARRAY&lt;/code&gt; , &lt;code&gt;HASH&lt;/code&gt; , or &lt;code&gt;CODE&lt;/code&gt; ), the handler is only applied to declarations of that type. For example, the following definition:</source>
          <target state="translated">속성 핸들러가 선언되고 &lt;code&gt;:ATTR&lt;/code&gt; 지정자에 내장 유형의 이름 ( &lt;code&gt;SCALAR&lt;/code&gt; , &lt;code&gt;ARRAY&lt;/code&gt; , &lt;code&gt;HASH&lt;/code&gt; 또는 &lt;code&gt;CODE&lt;/code&gt; )이 지정된 경우 핸들러는 해당 유형의 선언에만 적용됩니다. 예를 들어 다음과 같은 정의가 있습니다.</target>
        </trans-unit>
        <trans-unit id="62eb757e944d2fdd579513e058242369fd9ee059" translate="yes" xml:space="preserve">
          <source>If an element of</source>
          <target state="translated">요소가</target>
        </trans-unit>
        <trans-unit id="34964fb1164dd648c7d2582c841b9ac59c8a6438" translate="yes" xml:space="preserve">
          <source>If an empty list, &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt;, or nothing that matches the first 3 values above is returned, then &lt;code&gt;&lt;a href=&quot;functions/require&quot;&gt;require&lt;/a&gt;&lt;/code&gt; looks at the remaining elements of @INC. Note that this filehandle must be a real filehandle (strictly a typeglob or reference to a typeglob, whether blessed or unblessed); tied filehandles will be ignored and processing will stop there.</source>
          <target state="translated">빈 목록이 경우 &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; 위의 첫 번째 3 값과 일치하거나 아무 것도 반환되지 않으며, 다음 &lt;code&gt;&lt;a href=&quot;functions/require&quot;&gt;require&lt;/a&gt;&lt;/code&gt; @ INC의 나머지 요소에 모습을. 이 파일 핸들은 실제 파일 핸들이어야합니다 (축적이든 비 축적이든 엄격하게 타입 글로브 또는 타입 글로브에 대한 참조). 묶인 파일 핸들은 무시되고 처리가 중지됩니다.</target>
        </trans-unit>
        <trans-unit id="e6b9ed06c157d2ccb39c11bcda5c6ea1f6b42a42" translate="yes" xml:space="preserve">
          <source>If an empty list, &lt;code&gt;&lt;a href=&quot;undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt;, or nothing that matches the first 3 values above is returned, then &lt;code&gt;&lt;a href=&quot;require&quot;&gt;require&lt;/a&gt;&lt;/code&gt; looks at the remaining elements of @INC. Note that this filehandle must be a real filehandle (strictly a typeglob or reference to a typeglob, whether blessed or unblessed); tied filehandles will be ignored and processing will stop there.</source>
          <target state="translated">빈 목록이 경우 &lt;code&gt;&lt;a href=&quot;undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; 위의 첫 번째 3 값과 일치하거나 아무 것도 반환되지 않으며, 다음 &lt;code&gt;&lt;a href=&quot;require&quot;&gt;require&lt;/a&gt;&lt;/code&gt; @ INC의 나머지 요소에 모습을. 이 파일 핸들은 실제 파일 핸들이어야합니다 (축적이든 비 축적이든 엄격하게 타입 글로브 또는 타입 글로브에 대한 참조). 묶인 파일 핸들은 무시되고 처리가 중지됩니다.</target>
        </trans-unit>
        <trans-unit id="f919dfddbef4a1a12f08337d7a834831006d9b11" translate="yes" xml:space="preserve">
          <source>If an error is encountered during conversion, output file will be removed and a warning emitted instead of terminating the conversion immediately.</source>
          <target state="translated">변환 중에 오류가 발생하면 출력 파일이 제거되고 변환을 즉시 종료하지 않고 경고가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="9714806e81ca60318ef1d507fb9add3187535d9b" translate="yes" xml:space="preserve">
          <source>If an error occurs &lt;code&gt;blocking&lt;/code&gt; will return undef and &lt;code&gt;$!&lt;/code&gt; will be set.</source>
          <target state="translated">에러가 발생하면 &lt;code&gt;blocking&lt;/code&gt; 은 undef와 &lt;code&gt;$!&lt;/code&gt; 설정됩니다.</target>
        </trans-unit>
        <trans-unit id="223081f636c4dc0e612cdeecd4fd8749800bcc2c" translate="yes" xml:space="preserve">
          <source>If an error occurs in parsing or compilation, in most cases a valid op tree (most likely null) is returned anyway. The error is reflected in the parser state, normally resulting in a single exception at the top level of parsing which covers all the compilation errors that occurred. Some compilation errors, however, will throw an exception immediately.</source>
          <target state="translated">구문 분석 또는 컴파일 과정에서 오류가 발생하면 대부분의 경우 유효한 op 트리 (대부분의 경우 null)가 반환됩니다. 오류는 파서 상태에 반영되어 일반적으로 발생한 모든 컴파일 오류를 포괄하는 최상위 수준의 구문 분석에서 단일 예외를 발생시킵니다. 그러나 일부 컴파일 오류는 즉시 예외를 발생시킵니다.</target>
        </trans-unit>
        <trans-unit id="409c88cc16ea56deb3ee2fd13496f8443cdeb8ed" translate="yes" xml:space="preserve">
          <source>If an error occurs in parsing or compilation, in most cases a valid op tree is returned anyway. The error is reflected in the parser state, normally resulting in a single exception at the top level of parsing which covers all the compilation errors that occurred. Some compilation errors, however, will throw an exception immediately.</source>
          <target state="translated">구문 분석 또는 컴파일에서 오류가 발생하면 대부분의 경우 유효한 op 트리가 반환됩니다. 오류는 파서 상태에 반영되어 일반적으로 발생한 모든 컴파일 오류를 포괄하는 최상위 수준의 구문 분석에서 단일 예외를 발생시킵니다. 그러나 일부 컴파일 오류는 즉시 예외를 발생시킵니다.</target>
        </trans-unit>
        <trans-unit id="fb3a0347b1d41b96c13bdbefc10e2d1afbf9de50" translate="yes" xml:space="preserve">
          <source>If an error occurs in parsing, which can only occur if the label is mandatory, a valid label is returned anyway. The error is reflected in the parser state, normally resulting in a single exception at the top level of parsing which covers all the compilation errors that occurred.</source>
          <target state="translated">구문 분석시 레이블이 필수 인 경우에만 발생할 수있는 오류가 발생하면 유효한 레이블이 반환됩니다. 오류는 파서 상태에 반영되어 일반적으로 발생한 모든 컴파일 오류를 포괄하는 최상위 수준의 구문 분석에서 단일 예외를 발생시킵니다.</target>
        </trans-unit>
        <trans-unit id="d9bdcdf03abe1ba577aa0e79f3435579268caad1" translate="yes" xml:space="preserve">
          <source>If an error occurs, it SHOULD return the fragment of string that has been converted and modify $octets in-place to remove the converted part leaving it starting with the problem fragment. If perlio_ok() is true, SHOULD becomes MUST.</source>
          <target state="translated">오류가 발생하면 변환 된 문자열 조각을 반환하고 $ octets를 수정하여 변환 된 부분을 제거하여 문제 조각으로 시작해야합니다 (SHOULD). perlio_ok ()가 true이면 반드시 있어야합니다.</target>
        </trans-unit>
        <trans-unit id="5cf7457198e3f9cd671a04a577836ab4a9017358" translate="yes" xml:space="preserve">
          <source>If an error occurs, it SHOULD return the octet sequence for the fragment of string that has been converted and modify $string in-place to remove the converted part leaving it starting with the problem fragment. If perlio_ok() is true, SHOULD becomes MUST.</source>
          <target state="translated">오류가 발생하면 변환 된 문자열 조각에 대한 옥텟 시퀀스를 반환하고 $ string을 수정하여 변환 된 부분을 제거하여 문제 조각으로 시작해야합니다. perlio_ok ()가 true이면 반드시 있어야합니다.</target>
        </trans-unit>
        <trans-unit id="0c2d11e497e2ae0afa960e508853e27c914d2845" translate="yes" xml:space="preserve">
          <source>If an existing module &lt;b&gt;almost&lt;/b&gt; does what you want, consider writing a patch, writing a subclass, or otherwise extending the existing module rather than rewriting it.</source>
          <target state="translated">기존 모듈이 &lt;b&gt;거의&lt;/b&gt; 원하는 작업을 수행하는 경우 패치 작성, 서브 클래스 작성 또는 기존 모듈을 다시 쓰지 않고 확장하는 것을 고려하십시오.</target>
        </trans-unit>
        <trans-unit id="82c1aacb1c3709d4e7d697aae2bed5c77802f47c" translate="yes" xml:space="preserve">
          <source>If an exit status</source>
          <target state="translated">종료 상태 인 경우</target>
        </trans-unit>
        <trans-unit id="cea12036a9c231320c44066b7b5457646bd39537" translate="yes" xml:space="preserve">
          <source>If an exit status is</source>
          <target state="translated">종료 상태가</target>
        </trans-unit>
        <trans-unit id="e2873de2f1e9af5ea740b20953d89320900ebe0e" translate="yes" xml:space="preserve">
          <source>If an extant $SIG{__WARN__} handler is discovered, it will continue to be honored, but only after the diagnostics::splainthis() function (the module's $SIG{__WARN__} interceptor) has had its way with your warnings.</source>
          <target state="translated">현존하는 $ SIG {__ WARN__} 핸들러가 발견되면 진단 :: splainthis () 함수 (모듈의 $ SIG {__ WARN__} 인터셉터)가 경고와 함께 수행 된 후에 만 ​​계속 처리됩니다.</target>
        </trans-unit>
        <trans-unit id="d72e4c503af6f4a09cfa2171e2474d37da483a9b" translate="yes" xml:space="preserve">
          <source>If an extension is being built away from the perl source then MakeMaker will leave PERL_SRC undefined and default to using the installed copy of the perl library. The other variables default to the following:</source>
          <target state="translated">확장 기능이 perl 소스와 별도로 구축 된 경우 MakeMaker는 PERL_SRC를 정의되지 않은 상태로두고 설치된 perl 라이브러리 사본을 사용하도록 기본 설정합니다. 다른 변수는 기본적으로 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="a1c876b366d6c58e85d7243f2dbcbb0c36548470" translate="yes" xml:space="preserve">
          <source>If an extension is being built below the &lt;code&gt;ext/&lt;/code&gt; directory of the perl source then MakeMaker will set PERL_SRC automatically (e.g., &lt;code&gt;../..&lt;/code&gt;). If PERL_SRC is defined and the extension is recognized as a standard extension, then other variables default to the following:</source>
          <target state="translated">확장이 perl 소스 의 &lt;code&gt;ext/&lt;/code&gt; 디렉토리 아래에 빌드되면 MakeMaker는 PERL_SRC를 자동으로 설정합니다 (예 : &lt;code&gt;../..&lt;/code&gt; ). PERL_SRC가 정의되고 확장이 표준 확장으로 인식되면 다른 변수의 기본값은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="a0316d054e0262fb322cda466200340b0b6b9a08" translate="yes" xml:space="preserve">
          <source>If an extractor returns a defined value, that value is immediately treated as the next extracted field and pushed onto the list of fields. If the extractor was specified in a hash reference, the field is also blessed into the appropriate class,</source>
          <target state="translated">추출기가 정의 된 값을 반환하면 해당 값은 즉시 다음 추출 된 필드로 취급되어 필드 목록으로 푸시됩니다. 추출기가 해시 참조에 지정된 경우 해당 필드는 해당 클래스에도 축복됩니다.</target>
        </trans-unit>
        <trans-unit id="f7e24bf211ae35444c0a5b02834d4c163f847646" translate="yes" xml:space="preserve">
          <source>If an infinity or a not-a-number is recognized, the *sp will point to one byte past the end of the recognized string. If the recognition fails, zero is returned, and the *sp will not move.</source>
          <target state="translated">무한대 또는 숫자가 아닌 것이 인식되면 * sp는 인식 된 문자열의 끝을지나 1 바이트를 가리 킵니다. 인식에 실패하면 0이 리턴되고 * sp는 이동하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="ce09f2ed6b39791e05ffc528e1a968457528299e" translate="yes" xml:space="preserve">
          <source>If an object does not support the method specified (determined using UNIVERSAL::can()) then the call will be skipped. If the method dies a warning will be generated.</source>
          <target state="translated">객체가 지정된 메소드를 지원하지 않으면 (UNIVERSAL :: can ()을 사용하여 결정) 호출을 건너 뜁니다. 메소드가 종료되면 경고가 생성됩니다.</target>
        </trans-unit>
        <trans-unit id="24adf3fb9ad8a72560fd633d7f97a817649bd630" translate="yes" xml:space="preserve">
          <source>If an operation is trapped in this way, then the code in STRING will not be executed. If such a trapped operation occurs or any other compile-time or return error, then $@ is set to the error message, just as with an eval().</source>
          <target state="translated">이러한 방식으로 작업이 트랩되면 STRING의 코드가 실행되지 않습니다. 이러한 트랩 된 작업이 발생하거나 다른 컴파일 타임 또는 반환 오류가 발생하면 eval ()과 마찬가지로 $ @가 오류 메시지로 설정됩니다.</target>
        </trans-unit>
        <trans-unit id="215592828190613f91a4fc9378ebe41cd5d2be61" translate="yes" xml:space="preserve">
          <source>If an uncaught exception results in interpreter exit, the exit code is determined from the values of &lt;code&gt;$!&lt;/code&gt; and &lt;code&gt;$?&lt;/code&gt; with this pseudocode:</source>
          <target state="translated">포착되지 않은 예외로 인해 인터프리터 종료가 발생하면 종료 코드는 &lt;code&gt;$!&lt;/code&gt; 값에서 결정됩니다 . 그리고 &lt;code&gt;$?&lt;/code&gt; 이 의사 코드로 :</target>
        </trans-unit>
        <trans-unit id="7b864a885bc89443cbce8d662bf2be7249be99d8" translate="yes" xml:space="preserve">
          <source>If any &lt;code&gt;test_args&lt;/code&gt; are given they will be appended to the end of the command argument list.</source>
          <target state="translated">어떤 경우 &lt;code&gt;test_args&lt;/code&gt; 이 주어진다 그들은 명령 인수 목록의 끝에 추가됩니다.</target>
        </trans-unit>
        <trans-unit id="37251314e00b333d40467d467ca5c0c35c0e366e" translate="yes" xml:space="preserve">
          <source>If any argument to &lt;b&gt;podselect&lt;/b&gt; is a reference to a hash (associative array) then the values with the following keys are processed as follows:</source>
          <target state="translated">&lt;b&gt;podselect에&lt;/b&gt; 대한 인수가 해시 (연관 배열)에 대한 참조 인 경우 다음 키가있는 값은 다음과 같이 처리됩니다.</target>
        </trans-unit>
        <trans-unit id="0fa7b6de1acc5eb4980a2653a96afb04a72dd14b" translate="yes" xml:space="preserve">
          <source>If any arguments remain, and &lt;code&gt;GetOptionsFromString&lt;/code&gt; was not called in list context, a message will be given and &lt;code&gt;GetOptionsFromString&lt;/code&gt; will return failure.</source>
          <target state="translated">인수가 남아 있고 목록 컨텍스트에서 &lt;code&gt;GetOptionsFromString&lt;/code&gt; 이 호출되지 않은 경우 메시지가 제공되고 &lt;code&gt;GetOptionsFromString&lt;/code&gt; 이 실패를 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="59b5cfa2ac91aed4f93a07d4f29fc54a851c06d0" translate="yes" xml:space="preserve">
          <source>If any destructors are triggered as a result, the hv itself may be freed.</source>
          <target state="translated">결과적으로 소멸자가 트리거되면 hv 자체가 해제 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="dd7074163e07f37b8a41bd25ef8050c203f85577" translate="yes" xml:space="preserve">
          <source>If any directories are included in @names they are searched before @dl_library_path. Directories may be specified as &lt;b&gt;-Ldir&lt;/b&gt;. Any other names are treated as filenames to be searched for.</source>
          <target state="translated">@names에 포함 된 디렉토리가 있으면 @dl_library_path 전에 검색됩니다. 디렉토리는 &lt;b&gt;-Ldir&lt;/b&gt; 로 지정 될 수 있습니다 . 다른 이름은 검색 할 파일 이름으로 취급됩니다.</target>
        </trans-unit>
        <trans-unit id="864b32c42a324d7506e9ca2ec49f2bbc8bbdcf83" translate="yes" xml:space="preserve">
          <source>If any element of LIST is an lvalue, you can modify it by modifying VAR inside the loop. Conversely, if any element of LIST is NOT an lvalue, any attempt to modify that element will fail. In other words, the &lt;code&gt;foreach&lt;/code&gt; loop index variable is an implicit alias for each item in the list that you're looping over.</source>
          <target state="translated">LIST의 요소가 lvalue 인 경우 루프 내에서 VAR을 수정하여 수정할 수 있습니다. 반대로 LIST의 요소가 lvalue가 아닌 경우 해당 요소를 수정하려는 시도는 실패합니다. 다시 말해, &lt;code&gt;foreach&lt;/code&gt; 루프 인덱스 변수는 목록의 각 항목에 대한 암시 적 별칭입니다.</target>
        </trans-unit>
        <trans-unit id="705cbac0d6d9464ed1b8a92ba681b4a46a07d153" translate="yes" xml:space="preserve">
          <source>If any list operator (&lt;code&gt;&lt;a href=&quot;functions/print&quot;&gt;print()&lt;/a&gt;&lt;/code&gt;, etc.) or any unary operator (&lt;code&gt;&lt;a href=&quot;functions/chdir&quot;&gt;chdir()&lt;/a&gt;&lt;/code&gt;, etc.) is followed by a left parenthesis as the next token, the operator and arguments within parentheses are taken to be of highest precedence, just like a normal function call.</source>
          <target state="translated">리스트 연산자 ( &lt;code&gt;&lt;a href=&quot;functions/print&quot;&gt;print()&lt;/a&gt;&lt;/code&gt; 등) 또는 단항 연산자 ( &lt;code&gt;&lt;a href=&quot;functions/chdir&quot;&gt;chdir()&lt;/a&gt;&lt;/code&gt; 등) 뒤에 다음 토큰으로 왼쪽 괄호가 오는 경우, 괄호 안의 연산자와 인수는 우선 순위가 가장 높습니다. 정상적인 함수 호출처럼.</target>
        </trans-unit>
        <trans-unit id="cec7c53718240c968018769a330928a1255918e0" translate="yes" xml:space="preserve">
          <source>If any list operator (&lt;code&gt;&lt;a href=&quot;functions/print&quot;&gt;print()&lt;/a&gt;&lt;/code&gt;, etc.) or any unary operator (&lt;code&gt;&lt;a href=&quot;functions/chdir&quot;&gt;chdir()&lt;/a&gt;&lt;/code&gt;, etc.) is followed by a left parenthesis as the next token, the operator and arguments within parentheses are taken to be of highest precedence, just like a normal function call. For example, because named unary operators are higher precedence than &lt;code&gt;||&lt;/code&gt;:</source>
          <target state="translated">리스트 연산자 ( &lt;code&gt;&lt;a href=&quot;functions/print&quot;&gt;print()&lt;/a&gt;&lt;/code&gt; 등) 또는 단항 연산자 ( &lt;code&gt;&lt;a href=&quot;functions/chdir&quot;&gt;chdir()&lt;/a&gt;&lt;/code&gt; 등) 뒤에 다음 토큰으로 왼쪽 괄호가 오는 경우, 괄호 안의 연산자와 인수는 우선 순위가 가장 높습니다. 정상적인 함수 호출처럼. 예를 들어, 명명 된 단항 연산자가 &lt;code&gt;||&lt;/code&gt; 보다 우선 순위가 높기 때문에 :</target>
        </trans-unit>
        <trans-unit id="b227e6f9b5d8d36337845d9688db6eb8efa3551d" translate="yes" xml:space="preserve">
          <source>If any module's own AUTOLOAD subroutine has no need to fallback to the AutoLoader's AUTOLOAD subroutine (because it doesn't have any AutoSplit subroutines), then that module should not use &lt;b&gt;AutoLoader&lt;/b&gt; at all.</source>
          <target state="translated">모듈 자체의 AUTOLOAD 서브 루틴이 AutoLoader의 AUTOLOAD 서브 루틴으로 대체 될 필요가없는 경우 (AutoSplit 서브 루틴이 없기 때문에) 해당 모듈은 &lt;b&gt;AutoLoader&lt;/b&gt; 를 전혀 사용하지 않아야 합니다.</target>
        </trans-unit>
        <trans-unit id="54f05d2b51008f086be29ce06ad2dc1e36ce0970" translate="yes" xml:space="preserve">
          <source>If any of the alternatives matches, the hash &lt;code&gt;%+&lt;/code&gt; is bound to contain the three key-value pairs.</source>
          <target state="translated">대안이 일치하면 해시 &lt;code&gt;%+&lt;/code&gt; 는 세 개의 키-값 쌍을 포함하도록 바인딩됩니다.</target>
        </trans-unit>
        <trans-unit id="dde2e9ba6df88b543ea738e9014946a615cc8feb" translate="yes" xml:space="preserve">
          <source>If any of the entries in an import list begins with !, : or / then the list is treated as a series of specifications which either add to or delete from the list of names to import. They are processed left to right. Specifications are in the form:</source>
          <target state="translated">가져 오기 목록의 항목 중 하나가!, : 또는 /로 시작하면 목록은 가져올 이름 목록에 추가하거나 삭제할 이름의 일련의 스펙으로 처리됩니다. 왼쪽에서 오른쪽으로 처리됩니다. 사양은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="3fd2433b191431a7e89003ab4a4e523c3a5de0d9" translate="yes" xml:space="preserve">
          <source>If any of the file tests (or either the &lt;code&gt;&lt;a href=&quot;functions/stat&quot;&gt;stat&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;functions/lstat&quot;&gt;lstat&lt;/a&gt;&lt;/code&gt; operator) is given the special filehandle consisting of a solitary underline, then the stat structure of the previous file test (or stat operator) is used, saving a system call. (This doesn't work with &lt;code&gt;-t&lt;/code&gt; , and you need to remember that lstat() and &lt;code&gt;-l&lt;/code&gt; leave values in the stat structure for the symbolic link, not the real file.) (Also, if the stat buffer was filled by an &lt;code&gt;&lt;a href=&quot;functions/lstat&quot;&gt;lstat&lt;/a&gt;&lt;/code&gt; call, &lt;code&gt;-T&lt;/code&gt; and &lt;code&gt;-B&lt;/code&gt; will reset it with the results of &lt;code&gt;&lt;a href=&quot;functions/stat&quot;&gt;stat&lt;/a&gt; _&lt;/code&gt; ). Example:</source>
          <target state="translated">파일 테스트 (또는 &lt;code&gt;&lt;a href=&quot;functions/stat&quot;&gt;stat&lt;/a&gt;&lt;/code&gt; 또는 &lt;code&gt;&lt;a href=&quot;functions/lstat&quot;&gt;lstat&lt;/a&gt;&lt;/code&gt; 연산자)에 단독 밑줄로 구성된 특수 파일 처리가 제공되면 이전 파일 테스트 (또는 stat 연산자)의 통계 구조가 사용되어 시스템 호출을 저장합니다. (이것은 &lt;code&gt;-t&lt;/code&gt; 에서는 작동하지 않으며 lstat () 및 &lt;code&gt;-l&lt;/code&gt; 은 실제 파일이 아닌 기호 링크의 통계 구조에 값을 남겨 둡니다.) (또한 통계 버퍼가 &lt;code&gt;&lt;a href=&quot;functions/lstat&quot;&gt;lstat&lt;/a&gt;&lt;/code&gt; 호출, &lt;code&gt;-T&lt;/code&gt; 및 &lt;code&gt;-B&lt;/code&gt; 는 &lt;code&gt;&lt;a href=&quot;functions/stat&quot;&gt;stat&lt;/a&gt; _&lt;/code&gt; 의 결과로 재설정합니다 . 예:</target>
        </trans-unit>
        <trans-unit id="c70d4afb0f7f0b8a4b2bcb0de7d2fe106cb41892" translate="yes" xml:space="preserve">
          <source>If any of the file tests (or either the &lt;code&gt;&lt;a href=&quot;stat&quot;&gt;stat&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;lstat&quot;&gt;lstat&lt;/a&gt;&lt;/code&gt; operator) is given the special filehandle consisting of a solitary underline, then the stat structure of the previous file test (or stat operator) is used, saving a system call. (This doesn't work with &lt;code&gt;-t&lt;/code&gt; , and you need to remember that lstat() and &lt;code&gt;-l&lt;/code&gt; leave values in the stat structure for the symbolic link, not the real file.) (Also, if the stat buffer was filled by an &lt;code&gt;&lt;a href=&quot;lstat&quot;&gt;lstat&lt;/a&gt;&lt;/code&gt; call, &lt;code&gt;-T&lt;/code&gt; and &lt;code&gt;-B&lt;/code&gt; will reset it with the results of &lt;code&gt;&lt;a href=&quot;stat&quot;&gt;stat&lt;/a&gt; _&lt;/code&gt; ). Example:</source>
          <target state="translated">파일 테스트 (또는 &lt;code&gt;&lt;a href=&quot;stat&quot;&gt;stat&lt;/a&gt;&lt;/code&gt; 또는 &lt;code&gt;&lt;a href=&quot;lstat&quot;&gt;lstat&lt;/a&gt;&lt;/code&gt; 연산자)에 단독 밑줄로 구성된 특수 파일 처리가 제공되면 이전 파일 테스트 (또는 stat 연산자)의 통계 구조가 사용되어 시스템 호출을 저장합니다. (이것은 &lt;code&gt;-t&lt;/code&gt; 에서는 작동하지 않으며 lstat () 및 &lt;code&gt;-l&lt;/code&gt; 은 실제 파일이 아닌 기호 링크의 통계 구조에 값을 남겨 둡니다.) (또한 통계 버퍼가 &lt;code&gt;&lt;a href=&quot;lstat&quot;&gt;lstat&lt;/a&gt;&lt;/code&gt; 호출, &lt;code&gt;-T&lt;/code&gt; 및 &lt;code&gt;-B&lt;/code&gt; 는 &lt;code&gt;&lt;a href=&quot;stat&quot;&gt;stat&lt;/a&gt; _&lt;/code&gt; 의 결과로 재설정합니다 . 예:</target>
        </trans-unit>
        <trans-unit id="4eae7869337353cadd5cbfe4d84a955fd03cd8ba" translate="yes" xml:space="preserve">
          <source>If any of the given search directories contains a</source>
          <target state="translated">주어진 검색 디렉토리 중 하나에</target>
        </trans-unit>
        <trans-unit id="0865eba790bb7da4cb38d4fafb11a71c0ca93d75" translate="yes" xml:space="preserve">
          <source>If any of the three values is &lt;code&gt;&lt;a href=&quot;../../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; that time value will not be used. So, for example, to set only the &lt;code&gt;$mtime&lt;/code&gt; you would use this</source>
          <target state="translated">세 개의 값 중 하나 인 경우 &lt;code&gt;&lt;a href=&quot;../../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; 그 시간 값을 사용하지 않습니다. 예를 들어 &lt;code&gt;$mtime&lt;/code&gt; 만 설정 하려면 이것을 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="341a4d7e4dbc9eeb69d34b947d58bc6f15ecb9f2" translate="yes" xml:space="preserve">
          <source>If any part of LIST is an array, &lt;code&gt;foreach&lt;/code&gt; will get very confused if you add or remove elements within the loop body, for example with &lt;code&gt;&lt;a href=&quot;functions/splice&quot;&gt;splice&lt;/a&gt;&lt;/code&gt;. So don't do that.</source>
          <target state="translated">LIST의 일부가 배열이면 루프 본문 내에 요소를 추가하거나 제거하면 (예 : &lt;code&gt;&lt;a href=&quot;functions/splice&quot;&gt;splice&lt;/a&gt;&lt;/code&gt; ) &lt;code&gt;foreach&lt;/code&gt; 가 매우 혼란스러워집니다 . 그러지 마</target>
        </trans-unit>
        <trans-unit id="31cf9c709860eea50a338d60ff5edf1e2478723c" translate="yes" xml:space="preserve">
          <source>If applicable, please include details on what the user should do to correct the error; documenting an error as indicating &quot;the input buffer is too small&quot; without telling the user how to increase the size of the input buffer (or at least telling them that it isn't possible) aren't very useful.</source>
          <target state="translated">해당되는 경우 사용자가 오류를 해결하기 위해 수행해야하는 작업에 대한 세부 정보를 포함하십시오. 사용자에게 입력 버퍼의 크기를 늘리는 방법을 알려주지 않고 (또는 적어도 가능하지 않다는 것을 알리지 않고) &quot;입력 버퍼가 너무 작습니다&quot;라는 오류를 문서화하는 것은 그리 유용하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="17ebb7f065dcd7d1005a6e70cd7fc9ddab662a16" translate="yes" xml:space="preserve">
          <source>If argument is specified, it is an advice on minimal size of line to be included into history. &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; means do not include anything into history. Returns the old value.</source>
          <target state="translated">인수가 지정되면 히스토리에 포함되는 최소 라인 크기에 대한 조언입니다. &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; 는 역사에 아무것도 포함하지 않음을 의미합니다. 이전 값을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="fd699eb48fd240fe4a2bcf57e3a3520a6ee8d6f2" translate="yes" xml:space="preserve">
          <source>If backward compatibility for Perls under 5.6 is important, one must write instead a &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; vars&lt;/code&gt; statement.</source>
          <target state="translated">5.6 미만의 Perls에 대한 이전 버전과의 호환성이 중요한 경우 &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; vars&lt;/code&gt; 문을 대신 작성해야합니다 .</target>
        </trans-unit>
        <trans-unit id="b7d0b9799b974e77c25f857fd60005fd09516395" translate="yes" xml:space="preserve">
          <source>If bits is 4 or less, the string is broken into bytes, then the bits of each byte are broken into 8/BITS groups. Bits of a byte are numbered in a little-endian-ish way, as in &lt;code&gt;0x01&lt;/code&gt; , &lt;code&gt;0x02&lt;/code&gt; , &lt;code&gt;0x04&lt;/code&gt; , &lt;code&gt;0x08&lt;/code&gt; , &lt;code&gt;0x10&lt;/code&gt; , &lt;code&gt;0x20&lt;/code&gt; , &lt;code&gt;0x40&lt;/code&gt; , &lt;code&gt;0x80&lt;/code&gt; . For example, breaking the single input byte &lt;code&gt;&lt;a href=&quot;chr&quot;&gt;chr(0x36)&lt;/a&gt;&lt;/code&gt; into two groups gives a list &lt;code&gt;(0x6, 0x3)&lt;/code&gt; ; breaking it into 4 groups gives &lt;code&gt;(0x2, 0x1, 0x3, 0x0)&lt;/code&gt; .</source>
          <target state="translated">비트가 4 이하이면 문자열이 바이트로 분할되고 각 바이트의 비트가 8 / BITS 그룹으로 분할됩니다. 바이트의 비트는 &lt;code&gt;0x01&lt;/code&gt; , &lt;code&gt;0x02&lt;/code&gt; , &lt;code&gt;0x04&lt;/code&gt; , &lt;code&gt;0x08&lt;/code&gt; , &lt;code&gt;0x10&lt;/code&gt; , &lt;code&gt;0x20&lt;/code&gt; , &lt;code&gt;0x40&lt;/code&gt; , &lt;code&gt;0x80&lt;/code&gt; 과 같이 리틀 엔디안 방식으로 번호가 매겨집니다 . 예를 들어, 단일 입력 바이트 &lt;code&gt;&lt;a href=&quot;chr&quot;&gt;chr(0x36)&lt;/a&gt;&lt;/code&gt; 을 두 그룹으로 나누면 목록 &lt;code&gt;(0x6, 0x3)&lt;/code&gt; . 4 그룹으로 &lt;code&gt;(0x2, 0x1, 0x3, 0x0)&lt;/code&gt; 됩니다.</target>
        </trans-unit>
        <trans-unit id="77d4537f5763ddf89d58388ac5f77f55fec21e75" translate="yes" xml:space="preserve">
          <source>If bits is 4 or less, the string is broken into bytes, then the bits of each byte are broken into 8/BITS groups. Bits of a byte are numbered in a little-endian-ish way, as in &lt;code&gt;0x01&lt;/code&gt; , &lt;code&gt;0x02&lt;/code&gt; , &lt;code&gt;0x04&lt;/code&gt; , &lt;code&gt;0x08&lt;/code&gt; , &lt;code&gt;0x10&lt;/code&gt; , &lt;code&gt;0x20&lt;/code&gt; , &lt;code&gt;0x40&lt;/code&gt; , &lt;code&gt;0x80&lt;/code&gt; . For example, breaking the single input byte &lt;code&gt;&lt;a href=&quot;functions/chr&quot;&gt;chr(0x36)&lt;/a&gt;&lt;/code&gt; into two groups gives a list &lt;code&gt;(0x6, 0x3)&lt;/code&gt; ; breaking it into 4 groups gives &lt;code&gt;(0x2, 0x1, 0x3, 0x0)&lt;/code&gt; .</source>
          <target state="translated">비트가 4 이하이면 문자열이 바이트로 분할되고 각 바이트의 비트가 8 / BITS 그룹으로 분할됩니다. 바이트의 비트는 &lt;code&gt;0x01&lt;/code&gt; , &lt;code&gt;0x02&lt;/code&gt; , &lt;code&gt;0x04&lt;/code&gt; , &lt;code&gt;0x08&lt;/code&gt; , &lt;code&gt;0x10&lt;/code&gt; , &lt;code&gt;0x20&lt;/code&gt; , &lt;code&gt;0x40&lt;/code&gt; , &lt;code&gt;0x80&lt;/code&gt; 과 같이 리틀 엔디안 방식으로 번호가 매겨집니다 . 예를 들어, 단일 입력 바이트 &lt;code&gt;&lt;a href=&quot;functions/chr&quot;&gt;chr(0x36)&lt;/a&gt;&lt;/code&gt; 을 두 그룹으로 나누면 목록 &lt;code&gt;(0x6, 0x3)&lt;/code&gt; . 4 그룹으로 &lt;code&gt;(0x2, 0x1, 0x3, 0x0)&lt;/code&gt; 됩니다.</target>
        </trans-unit>
        <trans-unit id="bf0f5d848a9043e820336aaa7c2b5b535010685b" translate="yes" xml:space="preserve">
          <source>If both arguments to &lt;code&gt;copy&lt;/code&gt; are not file handles, then &lt;code&gt;copy&lt;/code&gt; will perform a &quot;system copy&quot; of the input file to a new output file, in order to preserve file attributes, indexed file structure,</source>
          <target state="translated">&lt;code&gt;copy&lt;/code&gt; 할 두 인수가 모두 파일 핸들이 아닌 경우 &lt;code&gt;copy&lt;/code&gt; 는 파일 속성, 색인화 된 파일 구조를 유지하기 위해 입력 파일의 &quot;시스템 복사&quot;를 새 출력 파일로 수행합니다.</target>
        </trans-unit>
        <trans-unit id="e9104a77e501731bf3173e5f8cc7012527cca560" translate="yes" xml:space="preserve">
          <source>If both the SIGNAL and the PROCESS are negative, the results are undefined. A warning may be produced in a future version.</source>
          <target state="translated">SIGNAL과 PROCESS가 모두 음수이면 결과가 정의되지 않습니다. 향후 버전에서는 경고가 생성 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="43c2b718c80fc2756eb63ba9991217396d36da72" translate="yes" xml:space="preserve">
          <source>If braces are not needed to specify a property (e.g., &lt;code&gt;\pL&lt;/code&gt; ), the left column contains both forms, with and without braces.</source>
          <target state="translated">속성을 지정하는 데 중괄호가 필요하지 않은 경우 (예 : &lt;code&gt;\pL&lt;/code&gt; ) 왼쪽 열에는 중괄호가 있거나없는 양식이 모두 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="0a4169e83148646605b11ff599e0ccd6579a7d78" translate="yes" xml:space="preserve">
          <source>If branches are involved (ie. $Revision: 1.5.3.4$) it's a little more complicated.</source>
          <target state="translated">브랜치가 관련된 경우 (예 : $ Revision : 1.5.3.4 $) 조금 더 복잡합니다.</target>
        </trans-unit>
        <trans-unit id="2c319407a62fb715df8d4d26f7931f9374106237" translate="yes" xml:space="preserve">
          <source>If building natively on PASE, please do the build under the /QOpenSys directory, since Perl is happier when built on a case sensitive filesystem.</source>
          <target state="translated">기본적으로 PASE로 빌드하는 경우, 대소 문자 구분 파일 시스템에서 빌드 할 때 Perl이 더 행복하므로 / QOpenSys 디렉토리에서 빌드를 수행하십시오.</target>
        </trans-unit>
        <trans-unit id="2edb493675bf68411bac8372236ccf07c63ce62d" translate="yes" xml:space="preserve">
          <source>If building with the cross-compiler provided by mingw-w64.sourceforge.net you'll need to uncomment the line that sets GCCCROSS in the makefile.mk. Do this only if it's the cross-compiler - ie only if the bin folder doesn't contain a gcc.exe. (The cross-compiler does not provide a gcc.exe, g++.exe, ar.exe, etc. Instead, all of these executables are prefixed with 'x86_64-w64-mingw32-'.)</source>
          <target state="translated">mingw-w64.sourceforge.net에서 제공하는 크로스 컴파일러로 빌드하는 경우 makefile.mk에서 GCCCROSS를 설정하는 행의 주석을 해제해야합니다. 크로스 컴파일러 인 경우에만이 작업을 수행하십시오. 즉, bin 폴더에 gcc.exe가없는 경우에만 수행하십시오. 크로스 컴파일러는 gcc.exe, g ++. exe, ar.exe 등을 제공하지 않습니다. 대신 이러한 모든 실행 파일 앞에는 'x86_64-w64-mingw32-'가 붙습니다.</target>
        </trans-unit>
        <trans-unit id="9e17d613e1404f153f1b0ce16d928004818ba4b8" translate="yes" xml:space="preserve">
          <source>If by daemon process you mean one that's detached (disassociated from its tty), then the following process is reported to work on most Unixish systems. Non-Unix users should check their Your_OS::Process module for other solutions.</source>
          <target state="translated">데몬 프로세스에 의해 분리 된 (tty와 분리 된) 프로세스를 의미하는 경우 다음 프로세스가 대부분의 Unixish 시스템에서 작동하는 것으로보고됩니다. Unix 이외의 사용자는 Your_OS :: Process 모듈에서 다른 솔루션을 확인해야합니다.</target>
        </trans-unit>
        <trans-unit id="f14156857ddead4c835ba55e44d3f79ccfb246a2" translate="yes" xml:space="preserve">
          <source>If by some reasons</source>
          <target state="translated">어떤 이유로</target>
        </trans-unit>
        <trans-unit id="85a1911ef5d789d9bb6809a0f2c6b323a8f5cec0" translate="yes" xml:space="preserve">
          <source>If callbacks are used, they will be issued before this call returns.</source>
          <target state="translated">콜백이 사용되면이 콜이 반환되기 전에 콜백이 발행됩니다.</target>
        </trans-unit>
        <trans-unit id="706aad3a29650f166c943e5c886b39dcd0a4394e" translate="yes" xml:space="preserve">
          <source>If called as &lt;code&gt;sv_vcatpvfn&lt;/code&gt; or flags include &lt;code&gt;SV_GMAGIC&lt;/code&gt; , calls get magic.</source>
          <target state="translated">로 불리는 경우 &lt;code&gt;sv_vcatpvfn&lt;/code&gt; 또는 플래그가 포함 &lt;code&gt;SV_GMAGIC&lt;/code&gt; 을 , 호출은 마법을 얻을.</target>
        </trans-unit>
        <trans-unit id="614a0f52f1c33eb959730f1d5d32f8786b9d57d8" translate="yes" xml:space="preserve">
          <source>If called as an instance method (i.e. $md5-&amp;gt;new) it will just reset the state the object to the state of a newly created object. No new object is created in this case.</source>
          <target state="translated">인스턴스 메소드 (예 : $ md5-&amp;gt; new)로 호출되면 객체의 상태를 새로 작성된 객체의 상태로 재설정하기 만하면됩니다. 이 경우 새로운 객체가 생성되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="8679ce9e8862eb205bcd677039372fd6e97a03da" translate="yes" xml:space="preserve">
          <source>If called in a list context and the global variable &lt;code&gt;$INSTANCES&lt;/code&gt; is a true value, it will return a list of the full paths to instances of the binary where found in &lt;code&gt;PATH&lt;/code&gt; , or an empty list if it was not found.</source>
          <target state="translated">리스트 컨텍스트에서 호출되고 글로벌 변수 &lt;code&gt;$INSTANCES&lt;/code&gt; 가 true 값인 경우 &lt;code&gt;PATH&lt;/code&gt; 에서 찾은 2 진의 인스턴스에 대한 전체 경로 목록을 찾 거나 찾지 못한 경우 비어 있는 목록을 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="b8293e343dafdb403ea7c5d5ddbde243205b61a6" translate="yes" xml:space="preserve">
          <source>If called in a list context, it will return a list of the full paths to instances of the binary where found in &lt;code&gt;PATH&lt;/code&gt; , or an empty list if it was not found.</source>
          <target state="translated">목록 컨텍스트에서 호출되면 &lt;code&gt;PATH&lt;/code&gt; 에서 찾은 이진 인스턴스의 전체 경로 목록을 찾 거나 찾지 못한 경우 빈 목록을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="522ffa67a9fbac5fe032f13cc8e4e97e4f0b245b" translate="yes" xml:space="preserve">
          <source>If called in a scalar context it will return the full path to the binary you asked for if it was found, or &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; if it was not.</source>
          <target state="translated">스칼라 컨텍스트에서 호출되면 찾은 바이너리에 대한 전체 경로를 반환하거나 그렇지 않은 경우 &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; 를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="5e86b593d758e5e3c8998823e4b17f5dfdc961bc" translate="yes" xml:space="preserve">
          <source>If called in scalar context, only the filehandle is returned and the file will automatically be deleted when closed on operating systems that support this (see the description of tmpfile() elsewhere in this document). This is the preferred mode of operation, as if you only have a filehandle, you can never create a race condition by fumbling with the filename. On systems that can not unlink an open file or can not mark a file as temporary when it is opened (for example, Windows NT uses the C</source>
          <target state="translated">스칼라 컨텍스트에서 호출 된 경우 파일 핸들 만 리턴되며이를 지원하는 운영 체제에서 파일을 닫을 때 파일이 자동으로 삭제됩니다 (이 문서의 다른 곳에서 tmpfile ()에 대한 설명 참조). 파일 핸들 만있는 것처럼 파일 이름으로 엉킴으로써 경쟁 조건을 만들 수 없으므로 선호되는 작동 모드입니다. 열린 파일을 링크 해제 할 수 없거나 파일을 열 때 파일을 임시 파일로 표시 할 수없는 시스템 (예 : Windows NT는 C</target>
        </trans-unit>
        <trans-unit id="c83187abf3e8e59deed13ec45be5007e63c321fb" translate="yes" xml:space="preserve">
          <source>If called with a property that doesn't have synonyms for its values, it returns the input value, possibly normalized with capitalization and underscores, but not necessarily checking that the input value is valid.</source>
          <target state="translated">값과 동의어가없는 속성으로 호출 된 경우 입력 값을 반환하고 대문자와 밑줄로 정규화 할 수 있지만 입력 값이 유효한지 반드시 확인하지는 않습니다.</target>
        </trans-unit>
        <trans-unit id="abcbf5b218ac08698c7495d3bca85cf2f5fc593a" translate="yes" xml:space="preserve">
          <source>If called with an argument &lt;code&gt;blocking&lt;/code&gt; will turn on non-blocking IO if &lt;code&gt;BOOL&lt;/code&gt; is false, and turn it off if &lt;code&gt;BOOL&lt;/code&gt; is true.</source>
          <target state="translated">인수 &lt;code&gt;blocking&lt;/code&gt; 과 함께 호출 하면 &lt;code&gt;BOOL&lt;/code&gt; 이 false 인 경우 비 차단 IO가 켜지고 &lt;code&gt;BOOL&lt;/code&gt; 이 true이면 끄십시오 .</target>
        </trans-unit>
        <trans-unit id="cd8fbca057a7b0f8546bef2e8eba78cd01155b5c" translate="yes" xml:space="preserve">
          <source>If called with an argument the &lt;code&gt;list&lt;/code&gt; returns the size of the message in octets.</source>
          <target state="translated">인수와 함께 호출하면 &lt;code&gt;list&lt;/code&gt; 은 메시지 크기를 8 진수로 반환합니다.</target>
        </trans-unit>
        <trans-unit id="d3101b42b801bc480044d4583af8814cf3a6fda1" translate="yes" xml:space="preserve">
          <source>If called without arguments a reference to a hash is returned. The keys will be the &lt;code&gt;MSGNUM&lt;/code&gt; 's of all undeleted messages and the values will be their size in octets.</source>
          <target state="translated">인수없이 호출하면 해시에 대한 참조가 반환됩니다. 키는 삭제되지 않은 모든 메시지 의 &lt;code&gt;MSGNUM&lt;/code&gt; 이 되고 값은 옥텟 단위의 크기가됩니다.</target>
        </trans-unit>
        <trans-unit id="e77963c1065ed922557c941a37ed57186c92ec48" translate="yes" xml:space="preserve">
          <source>If capturing parenthesis are used in a regular expression, we can refer to the part of the source string that was matched, and match exactly the same thing. There are three ways of referring to such</source>
          <target state="translated">캡처 괄호를 정규식에 사용하면 일치하는 소스 문자열 부분을 참조하고 정확히 같은 것을 일치시킬 수 있습니다. 그러한 것을 언급하는 세 가지 방법이 있습니다</target>
        </trans-unit>
        <trans-unit id="8ef19162a844967deef3f5d85d04764641f71041" translate="yes" xml:space="preserve">
          <source>If compiled with &lt;code&gt;-DPERL_MEM_LOG&lt;/code&gt; , both memory and SV allocations go through logging functions, which is handy for breakpoint setting.</source>
          <target state="translated">&lt;code&gt;-DPERL_MEM_LOG&lt;/code&gt; 로 컴파일하면 메모리 및 SV 할당 모두 로깅 기능 을 거치므로 중단 점 설정에 편리합니다.</target>
        </trans-unit>
        <trans-unit id="505c257963541e6d1081b0bfdec05dc2d7991e03" translate="yes" xml:space="preserve">
          <source>If constant folding was not performed, the execution-order thread is created.</source>
          <target state="translated">상수 폴딩이 수행되지 않으면 실행 순서 스레드가 작성됩니다.</target>
        </trans-unit>
        <trans-unit id="9c0592ae26e8bb261300ebbed2b588cacc05e4ff" translate="yes" xml:space="preserve">
          <source>If cross-compiling, this variable can be used to modify the environment on the target system. However, how and where it's used, and even if it's used at all, is entirely dependent on both the transport mechanism (targetrun) and what the target system is. Unless the relevant documentation says otherwise, it is genereally not useful.</source>
          <target state="translated">교차 컴파일의 경우이 변수를 사용하여 대상 시스템의 환경을 수정할 수 있습니다. 그러나 사용 방법과 위치, 심지어 사용하더라도 전송 메커니즘 (targetrun)과 대상 시스템이 무엇인지에 전적으로 달려 있습니다. 관련 문서에서 달리 언급하지 않는 한, 실제로는 유용하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="c66c617b16e576e77dc9dc8e186d44f33fe447f3" translate="yes" xml:space="preserve">
          <source>If cross-compiling, this variable contains the location of sh on the target system. If not, this will be the same as $sh.</source>
          <target state="translated">교차 컴파일의 경우이 변수에는 대상 시스템에서 sh의 위치가 포함됩니다. 그렇지 않으면 $ sh와 같습니다.</target>
        </trans-unit>
        <trans-unit id="60357fb3a62a70cdf0b8804a617b55fe7b82dc59" translate="yes" xml:space="preserve">
          <source>If cross-compiling, this variable contains the target architecture. If not, this will be empty.</source>
          <target state="translated">크로스 컴파일시이 변수에는 대상 아키텍처가 포함됩니다. 그렇지 않으면 비어 있습니다.</target>
        </trans-unit>
        <trans-unit id="e5ce981aa84829db1548a6d11516c6b5fa9cbc60" translate="yes" xml:space="preserve">
          <source>If d_procselfexe is defined, $procselfexe is the filename of the symbolic link pointing to the absolute pathname of the executing program.</source>
          <target state="translated">d_procselfexe가 정의 된 경우 $ procselfexe는 실행중인 프로그램의 절대 경로 이름을 가리키는 기호 링크의 파일 이름입니다.</target>
        </trans-unit>
        <trans-unit id="dc4c096ee5da0f37bd52c68590795a5281826f8c" translate="yes" xml:space="preserve">
          <source>If declared at the outermost scope (the file scope), then lexicals work somewhat like C's file statics. They are available to all functions in that same file declared below them, but are inaccessible from outside that file. This strategy is sometimes used in modules to create private variables that the whole module can see.</source>
          <target state="translated">가장 바깥 쪽 범위 (파일 범위)에서 선언 된 경우 어휘는 C의 파일 정적처럼 작동합니다. 그것들은 아래에 선언 된 동일한 파일의 모든 기능에 사용할 수 있지만 해당 파일 외부에서는 액세스 할 수 없습니다. 이 전략은 모듈 전체에서 볼 수있는 개인 변수를 만들기 위해 모듈에서 사용되기도합니다.</target>
        </trans-unit>
        <trans-unit id="6ae3059e06d397630c09d4c165cce518cf89f33b" translate="yes" xml:space="preserve">
          <source>If defined specifies whether color output is desired. If &lt;code&gt;color&lt;/code&gt; is not defined it will default to color output if color support is available on the current platform and output is not being redirected.</source>
          <target state="translated">정의 된 경우 컬러 출력을 원하는지 여부를 지정합니다. 경우 &lt;code&gt;color&lt;/code&gt; 정의되지 않은 색상 지원은 현재 플랫폼에서 사용할 수 있으며 출력은 재 지정되지 않는 경우는 컬러 출력을 기본값으로 사용합니다.</target>
        </trans-unit>
        <trans-unit id="dc3bd5a9c7fbd30c1f819a008f41219b5c451f73" translate="yes" xml:space="preserve">
          <source>If desired, an optional hash-ref may be specified as the first argument to customize certain aspects of the parse-tree that is created and returned. The set of recognized option keywords are:</source>
          <target state="translated">원하는 경우, 생성 및 리턴되는 구문 분석 트리의 특정 측면을 사용자 정의하기위한 선택적 해시 참조가 첫 번째 인수로 지정 될 수 있습니다. 인식되는 옵션 키워드 세트는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="c417457bb41c44d12dd8e05efc098db997c407b3" translate="yes" xml:space="preserve">
          <source>If developing modules for private internal or project specific use, that will never be released to the public, then you should ensure that their names will not clash with any future public module. You can do this either by using the reserved Local::* category or by using a category name that includes an underscore like Foo_Corp::*.</source>
          <target state="translated">개인용 또는 프로젝트 전용 용도로 개발 된 모듈을 일반인에게 공개하지 않는 경우 해당 모듈의 이름이 향후 공용 모듈과 충돌하지 않도록해야합니다. 예약 된 Local :: * 범주를 사용하거나 Foo_Corp :: *와 같이 밑줄을 포함하는 범주 이름을 사용하여이 작업을 수행 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="1bf0d1f77248c2c58d4104ac428f32e38cbba679" translate="yes" xml:space="preserve">
          <source>If either (or both!) is a subroutine reference, it is run and used as the value for comparing. For example:</source>
          <target state="translated">서브 루틴 참조 중 하나 (또는 ​​둘 다)가 실행되면 비교를위한 값으로 사용됩니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="0201c4d3bcdfd14f6a2e27e712be0d303b850c91" translate="yes" xml:space="preserve">
          <source>If either name is unknown, &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; is returned. Note that Perl typically recognizes property names in regular expressions with an optional &lt;code&gt;&quot;Is_&lt;/code&gt; &quot; (with or without the underscore) prefixed to them, such as &lt;code&gt;\p{isgc=punct}&lt;/code&gt; . This function does not recognize those in the property parameter, returning &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">이름 중 하나를 알 수 없으면 &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; 가 반환됩니다. Perl은 일반적 으로 &lt;code&gt;\p{isgc=punct}&lt;/code&gt; 와 같이 접두어가 있거나없는 선택적 &lt;code&gt;&quot;Is_&lt;/code&gt; &quot;(밑줄이 있거나없는)를 사용하여 정규식에서 특성 이름을 인식합니다 . 이 함수는 property 매개 변수의 것을 인식하지 않고 &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; 를 리턴 합니다.</target>
        </trans-unit>
        <trans-unit id="3926f5454427802efbe3e6cffcb07732270c9a24" translate="yes" xml:space="preserve">
          <source>If either operand of scalar &lt;code&gt;&quot;..&quot;&lt;/code&gt; is a constant expression, that operand is considered true if it is equal (&lt;code&gt;==&lt;/code&gt; ) to the current input line number (the &lt;code&gt;$.&lt;/code&gt; variable).</source>
          <target state="translated">스칼라 &lt;code&gt;&quot;..&quot;&lt;/code&gt; 의 피연산자가 상수 표현식 인 경우, 해당 피연산자가 현재 입력 행 번호 ( &lt;code&gt;$.&lt;/code&gt; 변수)와 같으면 ( &lt;code&gt;==&lt;/code&gt; ) 참으로 간주됩니다 .</target>
        </trans-unit>
        <trans-unit id="f99b132bd00ba92228931c93b4096f125672ade0" translate="yes" xml:space="preserve">
          <source>If either reader or writer is the null string, this will be replaced by an autogenerated filehandle. If so, you must pass a valid lvalue in the parameter slot so it can be overwritten in the caller, or an exception will be raised.</source>
          <target state="translated">reader 또는 writer가 널 (null) 문자열 인 경우 자동 생성 된 파일 핸들로 대체됩니다. 그렇다면 호출자에서 덮어 쓸 수 있도록 매개 변수 슬롯에 유효한 lvalue를 전달해야합니다. 그렇지 않으면 예외가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="c51794930a0cb952da1b5da2c73c8a1455bd1093" translate="yes" xml:space="preserve">
          <source>If embedded documentation (in pod format, see &lt;a href=&quot;../perlpod&quot;&gt;perlpod&lt;/a&gt;) is detected in the script, &lt;code&gt;--help&lt;/code&gt; will also show how to access the documentation.</source>
          <target state="translated">스크립트 에서 내장 된 문서 (포드 형식의 경우 &lt;a href=&quot;../perlpod&quot;&gt;perlpod&lt;/a&gt; 참조 )가 감지되면 &lt;code&gt;--help&lt;/code&gt; 는 설명서에 액세스하는 방법도 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="29d066b26000935ae7bb2e10a40ebaebacd4b8b0" translate="yes" xml:space="preserve">
          <source>If enabled, case is ignored when matching option names. If, however, bundling is enabled as well, single character options will be treated case-sensitive.</source>
          <target state="translated">사용 가능한 경우 옵션 이름과 일치 할 때 대소 문자가 무시됩니다. 그러나 번들링이 활성화 된 경우 단일 문자 옵션은 대소 문자를 구분합니다.</target>
        </trans-unit>
        <trans-unit id="db7040756e9968d1786c608e978b27880a9b3f0b" translate="yes" xml:space="preserve">
          <source>If everything else fails, you need to build a stand-alone DLL for perl. Contact me, I did it once. Sockets would not work, as a lot of other stuff.</source>
          <target state="translated">다른 모든 것이 실패하면 perl에 대한 독립형 DLL을 빌드해야합니다. 저에게 연락하십시오, 한 번 해냈습니다. 소켓은 다른 많은 것들과 같이 작동하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="3a7b09ae5de32a801bf3504292c1ba7f8a26bf8f" translate="yes" xml:space="preserve">
          <source>If exception handling is all you're interested in, use one of the many CPAN modules that handle exceptions, such as &lt;a href=&quot;http://search.cpan.org/perldoc/Try::Tiny&quot;&gt;Try::Tiny&lt;/a&gt;.</source>
          <target state="translated">예외 처리에 관심이있는 경우 &lt;a href=&quot;http://search.cpan.org/perldoc/Try::Tiny&quot;&gt;Try :: Tiny&lt;/a&gt; 와 같은 예외를 처리하는 많은 CPAN 모듈 중 하나를 사용 하십시오 .</target>
        </trans-unit>
        <trans-unit id="24299a423807f4b77a396032f4cc65f70fe49537" translate="yes" xml:space="preserve">
          <source>If explicitly enabled by</source>
          <target state="translated">에 의해 명시 적으로 활성화 된 경우</target>
        </trans-unit>
        <trans-unit id="8ede30fd7e2f6fae82106f61a77ef1de04cb5cb3" translate="yes" xml:space="preserve">
          <source>If false, STDERR is not captured (though it is 'relayed' to keep it somewhat synchronized with STDOUT.)</source>
          <target state="translated">false 인 경우 STDERR이 캡처되지 않습니다 (STDOUT과 다소 동기화 된 상태를 유지하기 위해 '릴레이'됨).</target>
        </trans-unit>
        <trans-unit id="9b5838f52003c96db3e6bffb7f5e0838c7d79e5c" translate="yes" xml:space="preserve">
          <source>If false, readline support in the debugger is disabled in order to debug applications that themselves use ReadLine.</source>
          <target state="translated">False이면 ReadLine을 사용하는 응용 프로그램을 디버깅하기 위해 디버거에서 readline 지원이 비활성화됩니다.</target>
        </trans-unit>
        <trans-unit id="b1fe899108d979b4e6baf329c011d799eeebe85b" translate="yes" xml:space="preserve">
          <source>If filenames might use strange characters, it is safest to open it with &lt;code&gt;&lt;a href=&quot;functions/sysopen&quot;&gt;sysopen&lt;/a&gt;&lt;/code&gt; instead of &lt;code&gt;&lt;a href=&quot;functions/open&quot;&gt;open&lt;/a&gt;&lt;/code&gt;. &lt;code&gt;&lt;a href=&quot;functions/open&quot;&gt;open&lt;/a&gt;&lt;/code&gt; is magic and can translate characters like &lt;code&gt;&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;&lt;/code&gt; , and &lt;code&gt;|&lt;/code&gt;, which may be the wrong thing to do. (Sometimes, though, it's the right thing.) Three-arg open can also help protect against this translation in cases where it is undesirable.</source>
          <target state="translated">파일 이름이 이상한 문자를 사용할 수있는 경우로 엽니 가장 안전 &lt;code&gt;&lt;a href=&quot;functions/sysopen&quot;&gt;sysopen&lt;/a&gt;&lt;/code&gt; 대신 &lt;code&gt;&lt;a href=&quot;functions/open&quot;&gt;open&lt;/a&gt;&lt;/code&gt; . &lt;code&gt;&lt;a href=&quot;functions/open&quot;&gt;open&lt;/a&gt;&lt;/code&gt; 은 마술이며 &lt;code&gt;&amp;gt;&lt;/code&gt; , &lt;code&gt;&amp;lt;&lt;/code&gt; 및 &lt;code&gt;|&lt;/code&gt; , 이것은 잘못된 일일 수 있습니다. (때로는 옳은 일입니다.) Three-arg open은 바람직하지 않은 경우이 번역으로부터 보호하는 데 도움이 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5ca04d4d675b32f985d24c749a113dd2e8503548" translate="yes" xml:space="preserve">
          <source>If find is used in taint-mode (-T command line switch or if EUID != UID or if EGID != GID) then internally directory names have to be untainted before they can be chdir'ed to. Therefore they are checked against a regular expression</source>
          <target state="translated">find가 taint-mode (-T 명령 행 스위치 또는 EUID! = UID 또는 EGID! = GID)에서 사용되는 경우 내부적으로 디렉토리 이름을 숨겨야 chdir'ed 할 수 있습니다. 따라서 정규식에 대해 검사됩니다.</target>
        </trans-unit>
        <trans-unit id="ae542d10e971a673bbde2971d115357debc351d4" translate="yes" xml:space="preserve">
          <source>If flags contains PERL_PV_ESCAPE_QUOTE then any double quotes in the string will also be escaped.</source>
          <target state="translated">플래그에 PERL_PV_ESCAPE_QUOTE가 포함 된 경우 문자열의 큰 따옴표도 이스케이프됩니다.</target>
        </trans-unit>
        <trans-unit id="5f11c4bbd633be0ac4ec3da7d6d4106626b272c7" translate="yes" xml:space="preserve">
          <source>If for some reason you want to have complete control over the data connection, this includes generating it and calling the &lt;code&gt;response&lt;/code&gt; method when required, then the user can use these methods to do so.</source>
          <target state="translated">어떤 이유로 데이터 연결을 완전히 제어하려면 필요한 경우 데이터 생성 및 &lt;code&gt;response&lt;/code&gt; 메소드 호출이 포함 되며 사용자는 이러한 메소드를 사용하여이를 수행 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="33f20d3ebb86a1fb4909973670b43aa80acbb4c8" translate="yes" xml:space="preserve">
          <source>If hash values couldn't be lists, you lose. You'd probably have to combine all the cities into a single string somehow, and then when time came to write the output, you'd have to break the string into a list, sort the list, and turn it back into a string. This is messy and error-prone. And it's frustrating, because Perl already has perfectly good lists that would solve the problem if only you could use them.</source>
          <target state="translated">해시 값을 나열 할 수 없으면 손실됩니다. 어쨌든 모든 도시를 단일 문자열로 결합해야 할 때 출력을 쓸 때가되면 문자열을 목록으로 나누고 목록을 정렬 한 다음 다시 문자열로 바꿔야합니다. 이것은 지저분하고 오류가 발생하기 쉽습니다. 그리고 Perl은 이미 당신이 사용할 수만 있다면 문제를 해결할 완벽한 목록을 가지고 있기 때문에 실망 스럽습니다.</target>
        </trans-unit>
        <trans-unit id="7e8d248524799b9e3f004b01925fdada9567cc4f" translate="yes" xml:space="preserve">
          <source>If i&amp;lt;checked_at&amp;gt; is a reference to a scalar, then instead it gives the characters pre-checked at the beginning, (and the number of chars by which the C variable name has been advanced. These need to be chopped from the front of</source>
          <target state="translated">i &amp;lt;checked_at&amp;gt;이 스칼라에 대한 참조 인 경우 대신 처음에 사전 확인 된 문자 (및 C 변수 이름이 진보 한 문자 수)를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="0cd56861a4473054d59049046296e1c9cc1b21dc" translate="yes" xml:space="preserve">
          <source>If illegalproto warnings are enabled, the prototype declared inside this attribute will be sanity checked at compile time.</source>
          <target state="translated">잘못된 프로토콜 경고가 활성화 된 경우이 속성 내에 선언 된 프로토 타입은 컴파일 타임에 완전성 검사됩니다.</target>
        </trans-unit>
        <trans-unit id="4d3aefb53a3e40d895443465bbfd3168415b47af" translate="yes" xml:space="preserve">
          <source>If in doubt, break the expression into simpler terms, or cast all operands to the desired resulting type.</source>
          <target state="translated">확실하지 않은 경우 표현식을 더 간단한 용어로 나누거나 모든 피연산자를 원하는 결과 유형으로 캐스트하십시오.</target>
        </trans-unit>
        <trans-unit id="ce224243c2c27e9c319eeded5da4d7520f7a48e0" translate="yes" xml:space="preserve">
          <source>If instead of the recommended GNU make you would like to use the system supplied make program then be sure to install the default rules file properly via the shell command:</source>
          <target state="translated">권장 GNU make 대신 시스템 제공 make 프로그램을 사용하려면 shell 명령을 통해 기본 규칙 파일을 올바르게 설치하십시오.</target>
        </trans-unit>
        <trans-unit id="8c224a826076db854fafc0daefe6f5025badc4ce" translate="yes" xml:space="preserve">
          <source>If instead you intended to match the word 'foo' at the end of the line followed by whitespace and the word 'bar' on the next line then you can use &lt;code&gt;&lt;a href=&quot;functions/m&quot;&gt;m/$(?)\/&lt;/a&gt;&lt;/code&gt; (for example: &lt;code&gt;&lt;a href=&quot;functions/m&quot;&gt;m/foo$(?)\s+bar/&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="translated">대신 줄 끝에서 'foo'단어와 공백, 다음 줄에서 'bar'단어를 찾으려면 &lt;code&gt;&lt;a href=&quot;functions/m&quot;&gt;m/$(?)\/&lt;/a&gt;&lt;/code&gt; 사용할 수 있습니다 (예 : &lt;code&gt;&lt;a href=&quot;functions/m&quot;&gt;m/foo$(?)\s+bar/&lt;/a&gt;&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="d03def7cbe4cc9c7f39111662b050f07a1bc1197" translate="yes" xml:space="preserve">
          <source>If instead you want to sort the array @key with the comparison routine &lt;code&gt;find_records()&lt;/code&gt; then you can use:</source>
          <target state="translated">대신 배열 @key를 비교 루틴 &lt;code&gt;find_records()&lt;/code&gt; 로 정렬하려면 다음을 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d1fc62400435ca2b18e437e1de72ea45d0c40705" translate="yes" xml:space="preserve">
          <source>If invalid, a &lt;code&gt;Malformed UTF-8 character&lt;/code&gt; warning is produced. The &quot;C0&quot; means &quot;process the string character per character&quot;. Without that, the &lt;code&gt;&lt;a href=&quot;functions/unpack&quot;&gt;unpack&lt;/a&gt;(&quot;U*&quot;, ...)&lt;/code&gt; would work in &lt;code&gt;U0&lt;/code&gt; mode (the default if the format string starts with &lt;code&gt;U&lt;/code&gt; ) and it would return the bytes making up the UTF-8 encoding of the target string, something that will always work.</source>
          <target state="translated">유효하지 않은 경우 잘못된 &lt;code&gt;Malformed UTF-8 character&lt;/code&gt; 경고가 생성됩니다. &quot;C0&quot;은 &quot;문자 당 문자열 문자 처리&quot;를 의미합니다. 그없이, &lt;code&gt;&lt;a href=&quot;functions/unpack&quot;&gt;unpack&lt;/a&gt;(&quot;U*&quot;, ...)&lt;/code&gt; 에서 작동 할 &lt;code&gt;U0&lt;/code&gt; 의 모드 (기본 경우와 형식 문자열이 시작 &lt;code&gt;U&lt;/code&gt; )과이 (가) 대상 문자열의 UTF-8 인코딩을 구성하는 바이트 반환 뭔가 항상 작동합니다.</target>
        </trans-unit>
        <trans-unit id="51c33e52f177d40ae2c3679305c70e4a9572745e" translate="yes" xml:space="preserve">
          <source>If it ain't broke, don't fix it! Perl 4 library scripts should continue to work with no problems. You may need to make some minor changes (like escaping non-array @'s in double quoted strings) but there is no need to convert a .pl file into a Module for just that.</source>
          <target state="translated">고장 나지 않았다면 고치지 마십시오! Perl 4 라이브러리 스크립트는 문제없이 계속 작동해야합니다. 작은 따옴표로 묶인 문자열에서 배열이 아닌 @를 이스케이프 처리하는 것과 같이 약간의 변경이 필요할 수 있지만 .pl 파일을 모듈로 변환 할 필요는 없습니다.</target>
        </trans-unit>
        <trans-unit id="5ae3aaa5715ffc32724b48d8610f7a354399dcc4" translate="yes" xml:space="preserve">
          <source>If it does not yet provide support for any encoding, one could write a derived class with such a &lt;code&gt;param&lt;/code&gt; method:</source>
          <target state="translated">아직 인코딩을 지원하지 않으면 그러한 &lt;code&gt;param&lt;/code&gt; 메소드를 사용하여 파생 클래스를 작성할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="6ed0026aa4685c99082bcd85012c95fb26671228" translate="yes" xml:space="preserve">
          <source>If it is defined and perl is compiled with the C macro &lt;code&gt;DL_UNLOAD_ALL_AT_EXIT&lt;/code&gt; defined, then it is called automatically when the interpreter exits for every shared object or library loaded by DynaLoader::bootstrap. All such library references are stored in @dl_librefs by DynaLoader::Bootstrap as it loads the libraries. The files are unloaded in last-in, first-out order.</source>
          <target state="translated">정의되고 perl이 정의 된 C 매크로 &lt;code&gt;DL_UNLOAD_ALL_AT_EXIT&lt;/code&gt; 로 컴파일 되면 DynaLoader :: bootstrap이로드 한 모든 공유 객체 또는 라이브러리에 대해 인터프리터가 종료 될 때 자동으로 호출됩니다. 이러한 모든 라이브러리 참조는 라이브러리를로드 할 때 DynaLoader :: Bootstrap에 의해 @dl_librefs에 저장됩니다. 파일은 처음부터 끝까지 언로드됩니다.</target>
        </trans-unit>
        <trans-unit id="860a9992a29a5bed07a92916afafcc39c4466897" translate="yes" xml:space="preserve">
          <source>If it is important to you that your bug be fixed, do monitor the perl5-porters@perl.org mailing list (mailing lists are moderated, your message may take a while to show up) and the commit logs to development versions of Perl, and encourage the maintainers with kind words or offers of frosty beverages. (Please do be kind to the maintainers. Harassing or flaming them is likely to have the opposite effect of the one you want.)</source>
          <target state="translated">버그를 수정하는 것이 중요한 경우 perl5-porters@perl.org 메일 링리스트 (메일 링리스트가 조정되고 메시지가 표시되는 데 시간이 걸릴 수 있음)와 Perl 개발 버전에 대한 커밋 로그를 모니터링하십시오. 서리가 내린 음료를 친절한 말이나 제안으로 유지하도록 장려하십시오. (관리자에게 친절하게 행동하십시오. 괴롭 히거나 불에 태우면 원하는 것과 반대의 영향을 줄 수 있습니다.)</target>
        </trans-unit>
        <trans-unit id="835fcc1c62a963fd6a71d84d2861d08fa2d6dba4" translate="yes" xml:space="preserve">
          <source>If it is impossible to tell from the parameters passed back from the C callback what the context is, then you may need to create a sequence of C callback interface functions, and store pointers to each in an array.</source>
          <target state="translated">컨텍스트가 무엇인지 C 콜백에서 다시 전달 된 매개 변수에서 알 수없는 경우 C 콜백 인터페이스 함수 시퀀스를 작성하고 각 포인터를 배열에 저장해야합니다.</target>
        </trans-unit>
        <trans-unit id="5680f195fb6f8f7119b1a5d53970a5a24089ffc3" translate="yes" xml:space="preserve">
          <source>If it is intended that a new perl binary be produced, this variable may hold a name for that binary. Defaults to perl</source>
          <target state="translated">새로운 perl 바이너리를 생성하려는 경우이 변수는 해당 바이너리의 이름을 가질 수 있습니다. 기본적으로 perl</target>
        </trans-unit>
        <trans-unit id="cb1ca7ba722f679f82900212b2623b7a140c3fd8" translate="yes" xml:space="preserve">
          <source>If it persists, you may disable this warnings, see &lt;a href=&quot;#PERL_BADFREE&quot;&gt;PERL_BADFREE&lt;/a&gt;.</source>
          <target state="translated">지속되면이 경고를 비활성화 할 수 있습니다 ( &lt;a href=&quot;#PERL_BADFREE&quot;&gt;PERL_BADFREE&lt;/a&gt; 참조) .</target>
        </trans-unit>
        <trans-unit id="3596d2c66fdea5d09f2cf7238ff867c93df8d69a" translate="yes" xml:space="preserve">
          <source>If it runs thru the entire given list of language-tags, and finds no classes for those exact terms, it then tries &quot;superordinate&quot; language classes. So if no &quot;en-US&quot; class (i.e., YourProjClass::en_us) was found, nor classes for anything else in that list, we then try its superordinate, &quot;en&quot; (i.e., YourProjClass::en), and so on thru the other language-tags in the given list: &quot;es&quot;. (The other language-tags in our example list: happen to have no superordinates.)</source>
          <target state="translated">주어진 전체 언어 태그 목록을 통해 실행되고 정확한 용어에 대한 클래스를 찾지 못하면 &quot;상위&quot;언어 클래스를 시도합니다. 따라서 &quot;en-US&quot;클래스 (예 : YourProjClass :: en_us)가 없거나 해당 목록의 다른 클래스가 없으면 상위 &quot;en&quot;(예 : YourProjClass :: en) 등을 시도합니다. 주어진 목록에있는 다른 언어 태그를 통해 : &quot;es&quot;. (예제 목록의 다른 언어 태그는 상위 항목이 없습니다.)</target>
        </trans-unit>
        <trans-unit id="9e9c27ad93f7400ed6fd8cabde972a2941b1fcc1" translate="yes" xml:space="preserve">
          <source>If it's a regular enough string that it always has the same format, you can split it up and pass the parts to &lt;code&gt;timelocal&lt;/code&gt; in the standard &lt;a href=&quot;time/local&quot;&gt;Time::Local&lt;/a&gt; module. Otherwise, you should look into the &lt;a href=&quot;http://search.cpan.org/perldoc/Date::Calc&quot;&gt;Date::Calc&lt;/a&gt;, &lt;a href=&quot;http://search.cpan.org/perldoc/Date::Parse&quot;&gt;Date::Parse&lt;/a&gt;, and &lt;a href=&quot;http://search.cpan.org/perldoc/Date::Manip&quot;&gt;Date::Manip&lt;/a&gt; modules from CPAN.</source>
          <target state="translated">규칙이 충분한 문자열이면 항상 같은 형식을 &lt;code&gt;timelocal&lt;/code&gt; 습니다. 표준 &lt;a href=&quot;time/local&quot;&gt;Time :: Local&lt;/a&gt; 모듈 에서 분할하여 파트를 timelocal 에 전달할 수 있습니다 . 그렇지 않으면 CPAN 의 &lt;a href=&quot;http://search.cpan.org/perldoc/Date::Calc&quot;&gt;Date :: Calc&lt;/a&gt; , &lt;a href=&quot;http://search.cpan.org/perldoc/Date::Parse&quot;&gt;Date :: Parse&lt;/a&gt; 및 &lt;a href=&quot;http://search.cpan.org/perldoc/Date::Manip&quot;&gt;Date :: Manip&lt;/a&gt; 모듈을 조사해야합니다.</target>
        </trans-unit>
        <trans-unit id="95cd7c9791eb757b708be268b21d99a1603edf51" translate="yes" xml:space="preserve">
          <source>If it's run from a terminal,</source>
          <target state="translated">터미널에서 실행되면</target>
        </trans-unit>
        <trans-unit id="8ec1e5cfa3f1d5f23853bddc58974b89d51e4343" translate="yes" xml:space="preserve">
          <source>If linking miniperl</source>
          <target state="translated">miniperl을 연결하는 경우</target>
        </trans-unit>
        <trans-unit id="4bdbff6d4225cd79b23186ed9cad6253292a76ca" translate="yes" xml:space="preserve">
          <source>If locale matching rules are in effect, the case map is taken from the current locale for code points less than 255, and from Unicode rules for larger code points. However, matches that would cross the Unicode rules/non-Unicode rules boundary (ords 255/256) will not succeed. See &lt;a href=&quot;perllocale&quot;&gt;perllocale&lt;/a&gt;.</source>
          <target state="translated">로케일 일치 규칙이 적용되는 경우 255보다 작은 코드 포인트의 경우 현재 로케일 및 더 큰 코드 포인트의 경우 유니 코드 규칙에서 사례 맵을 가져옵니다. 그러나 유니 코드 규칙 / 비 유니 코드 규칙 경계 (코드 255/256)를 넘는 일치는 성공하지 못합니다. &lt;a href=&quot;perllocale&quot;&gt;perllocale을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="763f933c48615038adc7019dfce8f6c0c593c306" translate="yes" xml:space="preserve">
          <source>If locale rules are not in effect, the use of a Unicode property will force the regular expression into using Unicode rules, if it isn't already.</source>
          <target state="translated">로캘 규칙이 적용되지 않는 경우 유니 코드 속성을 사용하면 정규식이 아직 없으면 유니 코드 규칙을 사용하게됩니다.</target>
        </trans-unit>
        <trans-unit id="d834fc3f63056ccac9737e1620e9488be6eb7541" translate="yes" xml:space="preserve">
          <source>If maketext goes to look in an individual %Lexicon for an entry for</source>
          <target state="translated">maketext가 개별 % Lexicon에서 항목을 찾을 경우</target>
        </trans-unit>
        <trans-unit id="3e3dcee3a8b9bd973fa29d705bfdb80867c80c81" translate="yes" xml:space="preserve">
          <source>If many functions use the same failure indication based on the return value, you may want to create a special typedef to handle this situation. Put</source>
          <target state="translated">많은 함수가 반환 값을 기반으로 동일한 실패 표시를 사용하는 경우이 상황을 처리하기 위해 특별한 typedef를 만들 수 있습니다. 놓다</target>
        </trans-unit>
        <trans-unit id="b606db88e20200612d730cc961241a27da21957f" translate="yes" xml:space="preserve">
          <source>If module is installed, peeks into the module's manpage, reads the headline, and returns it. Moreover, if the module has been downloaded within this session, does the equivalent on the downloaded module even if it hasn't been installed yet.</source>
          <target state="translated">모듈이 설치된 경우 모듈 맨 페이지를 들여다보고 헤드 라인을 읽은 다음 반환합니다. 또한이 세션 내에서 모듈을 다운로드 한 경우 아직 설치되지 않은 경우에도 다운로드 된 모듈에서 동등한 기능을 수행합니다.</target>
        </trans-unit>
        <trans-unit id="dd58d8ff347dcd8c05f67e1fd3ee4d2440157ff1" translate="yes" xml:space="preserve">
          <source>If more arguments are provided then they are all appended to the message, thus all these lines will have the same effect on the state of the $ctx object:</source>
          <target state="translated">더 많은 인수가 제공되면 모두 메시지에 추가되므로 이러한 모든 행은 $ ctx 오브젝트의 상태에 동일한 영향을 미칩니다.</target>
        </trans-unit>
        <trans-unit id="d7d32d6074826a3d2d75814ea308b5ddeaca2f3c" translate="yes" xml:space="preserve">
          <source>If more delimiters than escape chars are specified, the last escape char is used for the remaining delimiters. If no escape char is specified for a given specified delimiter, '\' is used.</source>
          <target state="translated">이스케이프 문자보다 많은 구분 기호를 지정하면 마지막 이스케이프 문자가 나머지 구분 기호에 사용됩니다. 지정된 구분 기호에 이스케이프 문자를 지정하지 않으면 '\'가 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="285c13c421c908ec1b5157ff1d11ce664fe6f585" translate="yes" xml:space="preserve">
          <source>If more than one argument is given then the entire argument list is assumed to be a hash. If a hash is supplied (either as a reference or as a list) it should contain one or more elements with the following keys:</source>
          <target state="translated">둘 이상의 인수가 제공되면 전체 인수 목록이 해시 인 것으로 가정합니다. 해시가 제공되면 (참조 또는 목록으로) 다음 키를 가진 하나 이상의 요소를 포함해야합니다.</target>
        </trans-unit>
        <trans-unit id="39e41b545db315dc5126671cc2bd5d88f5c30e3d" translate="yes" xml:space="preserve">
          <source>If more than one restriction of &lt;code&gt;module&lt;/code&gt; , &lt;code&gt;distribution&lt;/code&gt; , etc. is specified, the results of the separately computed match values must all match. If so, the hashref represented by the YAML document is returned as the preference structure for the current distribution.</source>
          <target state="translated">&lt;code&gt;module&lt;/code&gt; , &lt;code&gt;distribution&lt;/code&gt; 등의 제한이 둘 이상 지정된 경우 별도로 계산 된 일치 값의 결과가 모두 일치해야합니다. 그렇다면 YAML 문서로 표시되는 해시 참조는 현재 배포의 기본 설정 구조로 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="da05e2a6f3037e503e2698db0f33736532af13ae" translate="yes" xml:space="preserve">
          <source>If more than one variable is listed, the list must be placed in parentheses.</source>
          <target state="translated">둘 이상의 변수가 나열되면 목록을 괄호 안에 넣어야합니다.</target>
        </trans-unit>
        <trans-unit id="5915108dabbdb47d0e6487842fce0264a4b8c92e" translate="yes" xml:space="preserve">
          <source>If more than one variable is listed, the list must be placed in parentheses. With a parenthesised list, &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; can be used as a dummy placeholder. However, since initialization of state variables in list context is currently not possible this would serve no purpose.</source>
          <target state="translated">둘 이상의 변수가 나열되면 목록을 괄호 안에 넣어야합니다. 괄호로 &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; 목록을 사용하면 undef 를 더미 자리 표시 자로 사용할 수 있습니다. 그러나 목록 컨텍스트에서 상태 변수를 초기화하는 것은 현재 불가능하므로 목적이 없습니다.</target>
        </trans-unit>
        <trans-unit id="13f0dd65ec56750a188884a636ba7b4f0428367d" translate="yes" xml:space="preserve">
          <source>If more than one variable is listed, the list must be placed in parentheses. With a parenthesised list, &lt;code&gt;&lt;a href=&quot;undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; can be used as a dummy placeholder. However, since initialization of state variables in list context is currently not possible this would serve no purpose.</source>
          <target state="translated">둘 이상의 변수가 나열되면 목록을 괄호 안에 넣어야합니다. 괄호로 &lt;code&gt;&lt;a href=&quot;undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; 목록을 사용하면 undef 를 더미 자리 표시 자로 사용할 수 있습니다. 그러나 목록 컨텍스트에서 상태 변수를 초기화하는 것은 현재 불가능하므로 목적이 없습니다.</target>
        </trans-unit>
        <trans-unit id="cc246b70384e8a417eb59e4e6e4575312d9d1e0a" translate="yes" xml:space="preserve">
          <source>If more than one variable or expression is given to &lt;code&gt;&lt;a href=&quot;functions/local&quot;&gt;local&lt;/a&gt;&lt;/code&gt;, they must be placed in parentheses. This operator works by saving the current values of those variables in its argument list on a hidden stack and restoring them upon exiting the block, subroutine, or eval. This means that called subroutines can also reference the local variable, but not the global one. The argument list may be assigned to if desired, which allows you to initialize your local variables. (If no initializer is given for a particular variable, it is created with an undefined value.)</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/local&quot;&gt;local&lt;/a&gt;&lt;/code&gt; 에 둘 이상의 변수 또는 표현식이 제공되면 괄호 안에 넣어야합니다. 이 연산자는 인수 목록에있는 변수의 현재 값을 숨겨진 스택에 저장하고 블록, 서브 루틴 또는 평가 종료시이를 복원하여 작동합니다. 이것은 호출 된 서브 루틴이 로컬 변수를 참조 할 수 있지만 글로벌 변수는 참조 할 수 없음을 의미합니다. 원하는 경우 인수 목록을 할당하여 지역 변수를 초기화 할 수 있습니다. (특정 변수에 대해 초기화자가 제공되지 않으면 정의되지 않은 값으로 작성됩니다.)</target>
        </trans-unit>
        <trans-unit id="e6e3db41fbfcf6140e9c02e059dd4c934fd6f5ad" translate="yes" xml:space="preserve">
          <source>If multiple distinct capture groups have the same name then the $+{NAME} will refer to the leftmost defined group in the match.</source>
          <target state="translated">여러 개의 고유 캡처 그룹이 동일한 이름을 가진 경우 $ + {NAME}은 일치하는 가장 왼쪽에 정의 된 그룹을 참조합니다.</target>
        </trans-unit>
        <trans-unit id="0bfee97a70420feb4c2945973c34123d251dd9c2" translate="yes" xml:space="preserve">
          <source>If multiple files from one program are desired an array ref can be used.</source>
          <target state="translated">한 프로그램의 여러 파일이 필요한 경우 배열 참조를 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="081ad6caef0052cfab1aad2ae1061ca747e43248" translate="yes" xml:space="preserve">
          <source>If multiple transliterations are given for a character, only the first one is used:</source>
          <target state="translated">한 문자에 여러 음역이 제공되면 첫 번째 음역 만 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="766c6735ff098a4b925a773897fe49012fa4895d" translate="yes" xml:space="preserve">
          <source>If name passed in doesn't specify a readable file, appends</source>
          <target state="translated">전달 된 이름이 읽을 수있는 파일을 지정하지 않으면 추가</target>
        </trans-unit>
        <trans-unit id="1afec739c7f1e924deac0edbd4a6af96f74019ce" translate="yes" xml:space="preserve">
          <source>If necessary switch the input stream to handle unicode. This only has any effect for I/O handle based streams.</source>
          <target state="translated">필요한 경우 입력 스트림을 전환하여 유니 코드를 처리하십시오. 이것은 I / O 핸들 기반 스트림에만 영향을 미칩니다.</target>
        </trans-unit>
        <trans-unit id="1f88753647459114bf0fff92153d71fa3be1ef0c" translate="yes" xml:space="preserve">
          <source>If needed, &lt;code&gt;$new_size&lt;/code&gt; will be rounded up to the next multiple of the memory page size (usually 4096 or 8192).</source>
          <target state="translated">필요한 경우 &lt;code&gt;$new_size&lt;/code&gt; 는 메모리 페이지 크기의 다음 배수 (일반적으로 4096 또는 8192)로 올림됩니다.</target>
        </trans-unit>
        <trans-unit id="13ffb9e8f4aa9a45a3175ee9916b5d80efc23ef5" translate="yes" xml:space="preserve">
          <source>If needed, a thread can be exited at any time by calling &lt;code&gt;threads-&amp;gt;exit()&lt;/code&gt; . This will cause the thread to return &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; in a scalar context, or the empty list in a list context.</source>
          <target state="translated">필요한 경우 언제든지 &lt;code&gt;threads-&amp;gt;exit()&lt;/code&gt; 호출하여 스레드를 종료 할 수 있습니다 . 이것은 스레드가 스칼라 컨텍스트에서 &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; 를 리턴 하거나 목록 컨텍스트에서 빈 목록 을 리턴하게 합니다.</target>
        </trans-unit>
        <trans-unit id="ba4f2509d5dd63a76d44f087cc7f42f7f77c757a" translate="yes" xml:space="preserve">
          <source>If needed, scripts can be written so as to run on both threaded and non-threaded Perls:</source>
          <target state="translated">필요한 경우 스레드 및 스레드가 아닌 Perls에서 실행되도록 스크립트를 작성할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="91fbdba912e7cde9b89fa3cefbc9b3e7d8d65343" translate="yes" xml:space="preserve">
          <source>If needed, these methods should be defined by the package inheriting from &lt;b&gt;Tie::Hash&lt;/b&gt;, &lt;b&gt;Tie::StdHash&lt;/b&gt;, or &lt;b&gt;Tie::ExtraHash&lt;/b&gt;. See &lt;a href=&quot;../perltie#SCALAR&quot;&gt;SCALAR in perltie&lt;/a&gt; to find out what happens when &lt;code&gt;SCALAR&lt;/code&gt; does not exist.</source>
          <target state="translated">필요한 경우 이러한 메소드는 &lt;b&gt;Tie :: Hash&lt;/b&gt; , &lt;b&gt;Tie :: StdHash&lt;/b&gt; 또는 &lt;b&gt;Tie :: ExtraHash&lt;/b&gt; 에서 상속하는 패키지로 정의해야합니다 . &lt;code&gt;SCALAR&lt;/code&gt; 가 존재하지 않을 때 발생하는 &lt;a href=&quot;../perltie#SCALAR&quot;&gt;사항&lt;/a&gt; 을 찾으 려면 perltie의 SCALAR를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="f7a52a7ddea6d450e656d921a0db2fecb1485c60" translate="yes" xml:space="preserve">
          <source>If needed, thread warnings can be suppressed by using:</source>
          <target state="translated">필요한 경우 다음을 사용하여 스레드 경고를 억제 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="7b8270c68932b39381b724db912d7e0064edb351" translate="yes" xml:space="preserve">
          <source>If neither the &lt;code&gt;-L&lt;/code&gt; or &lt;code&gt;-l&lt;/code&gt; prefix is present in an entry, the entry is considered a directory to search if it is in fact a directory, and a library to search for otherwise. The &lt;code&gt;$Config{lib_ext}&lt;/code&gt; suffix will be appended to any entries that are not directories and don't already have the suffix.</source>
          <target state="translated">항목에 &lt;code&gt;-L&lt;/code&gt; 또는 &lt;code&gt;-l&lt;/code&gt; 접두어가 없으면 항목은 실제로 디렉토리 인 경우 검색 할 디렉토리로, 그렇지 않으면 검색 할 라이브러리로 간주됩니다. &lt;code&gt;$Config{lib_ext}&lt;/code&gt; 접미사가없는 디렉토리이며, 이미 접미사가없는 모든 항목에 추가됩니다.</target>
        </trans-unit>
        <trans-unit id="33d1d1804f2f0f5f5a1b0fb679650c8cfecd87fb" translate="yes" xml:space="preserve">
          <source>If neither the exit status nor the verbose level is specified, then the default is to use an exit status of 2 with a verbose level of 0.</source>
          <target state="translated">종료 상태와 상세 레벨이 모두 지정되지 않은 경우 기본값은 상세 레벨이 0 인 종료 상태 2를 사용하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="ca010fd55b822b0537501828b1432d2b69dedb67" translate="yes" xml:space="preserve">
          <source>If neither your configured &lt;code&gt;yaml_module&lt;/code&gt; nor YAML.pm is installed, CPAN.pm falls back to using Data::Dumper and Storable and looks for files with the extensions &lt;code&gt;.dd&lt;/code&gt; or &lt;code&gt;.st&lt;/code&gt; in the &lt;code&gt;prefs_dir&lt;/code&gt; directory. These files are expected to contain one or more hashrefs. For Data::Dumper generated files, this is expected to be done with by defining &lt;code&gt;$VAR1&lt;/code&gt; , &lt;code&gt;$VAR2&lt;/code&gt; , etc. The YAML shell would produce these with the command</source>
          <target state="translated">구성된 &lt;code&gt;yaml_module&lt;/code&gt; 과 YAML.pm이 모두 설치되어 있지 않으면 CPAN.pm은 Data :: Dumper 및 Storable을 사용하여 폴백하여 &lt;code&gt;.dd&lt;/code&gt; 또는 &lt;code&gt;.st&lt;/code&gt; 확장자를 가진 파일을 &lt;code&gt;prefs_dir&lt;/code&gt; 디렉토리 에서 찾습니다 . 이 파일은 하나 이상의 해시 참조를 포함해야합니다. Data :: Dumper 생성 파일의 경우 &lt;code&gt;$VAR1&lt;/code&gt; , &lt;code&gt;$VAR2&lt;/code&gt; 등 을 정의 하면됩니다. YAML 쉘은 다음 명령을 사용하여이를 생성합니다.</target>
        </trans-unit>
        <trans-unit id="1ff3f3f68e857a065a27224d0e20ede58778f1ae" translate="yes" xml:space="preserve">
          <source>If new() is called as an instance method (i.e. $ctx-&amp;gt;new) it will just reset the state the object to the state of a newly created object. No new object is created in this case, and the return value is the reference to the object (i.e. $ctx).</source>
          <target state="translated">new ()가 인스턴스 메소드 (예 : $ ctx-&amp;gt; new)로 호출되면 객체의 상태를 새로 작성된 객체의 상태로 재설정하기 만합니다. 이 경우 새 객체가 만들어지지 않으며 반환 값은 객체에 대한 참조입니다 (예 : $ ctx).</target>
        </trans-unit>
        <trans-unit id="2e13ee0a65adecfa0d8e7d8968c5c8fbe048cddb" translate="yes" xml:space="preserve">
          <source>If no $default is provided an empty string will be used instead.</source>
          <target state="translated">$ default가 제공되지 않으면 빈 문자열이 대신 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="0472c17854436e8327aa450d7bb9d0ca29c0fa4c" translate="yes" xml:space="preserve">
          <source>If no &lt;code&gt;$VERSION&lt;/code&gt; was specified on the &lt;code&gt;bootstrap&lt;/code&gt; line, the last line becomes</source>
          <target state="translated">&lt;code&gt;bootstrap&lt;/code&gt; 줄 에 &lt;code&gt;$VERSION&lt;/code&gt; 이 지정 되지 않은 경우 마지막 줄은</target>
        </trans-unit>
        <trans-unit id="1b4091cfd69b61e159053e0bbc2425f479136432" translate="yes" xml:space="preserve">
          <source>If no &lt;code&gt;$section_spec&lt;/code&gt; arguments are given, then the existing set of selected sections is cleared out (which means &lt;code&gt;all&lt;/code&gt; sections will be processed).</source>
          <target state="translated">&lt;code&gt;$section_spec&lt;/code&gt; 인수가 제공 되지 않으면 기존의 선택된 섹션 세트가 지워집니다 ( &lt;code&gt;all&lt;/code&gt; 섹션이 처리됨 을 의미 함 ).</target>
        </trans-unit>
        <trans-unit id="c0be16a9153a991182a683ab2886f1fa902dd9f4" translate="yes" xml:space="preserve">
          <source>If no &lt;code&gt;&lt;a href=&quot;functions/return&quot;&gt;return&lt;/a&gt;&lt;/code&gt; is found and if the last statement is an expression, its value is returned. If the last statement is a loop control structure like a &lt;code&gt;foreach&lt;/code&gt; or a &lt;code&gt;while&lt;/code&gt; , the returned value is unspecified. The empty sub returns the empty list.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/return&quot;&gt;return&lt;/a&gt;&lt;/code&gt; 이 없고 마지막 명령문이 표현식 인 경우 해당 값이 리턴됩니다. 마지막 명령문이 &lt;code&gt;foreach&lt;/code&gt; 또는 &lt;code&gt;while&lt;/code&gt; 과 같은 루프 제어 구조 인 경우 리턴 된 값은 지정되지 않습니다. 빈 하위는 빈 목록을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="bf9cd2f55bd05fa55b1648853a5a5e34325f19ca" translate="yes" xml:space="preserve">
          <source>If no @args are given, no @cmds will be returned.</source>
          <target state="translated">@args를 지정하지 않으면 @cmds가 반환되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="d11be4d28581ad6cd28ff2cca82d45474710696d" translate="yes" xml:space="preserve">
          <source>If no MANIFEST.SKIP file is found, a default set of skips will be used, similar to the example above. If you want nothing skipped, simply make an empty MANIFEST.SKIP file.</source>
          <target state="translated">MANIFEST.SKIP 파일이 없으면 위의 예와 유사한 기본 건너 뛰기 세트가 사용됩니다. 건너 뛰지 않으려면 비어있는 MANIFEST.SKIP 파일을 만드십시오.</target>
        </trans-unit>
        <trans-unit id="cae10c8870eae9f10da944c7a01e813768cc713b" translate="yes" xml:space="preserve">
          <source>If no arguments are given to pod2man it will read from @ARGV.</source>
          <target state="translated">pod2man에 인수가 없으면 @ARGV에서 읽습니다.</target>
        </trans-unit>
        <trans-unit id="87c6b87283ba7c4ecec068cb48f3ae13420b59ed" translate="yes" xml:space="preserve">
          <source>If no arguments are given, &lt;code&gt;&lt;a href=&quot;../functions/write&quot;&gt;write&lt;/a&gt;&lt;/code&gt; returns the entire formatted archive as a string, which could be useful if you'd like to stuff the archive into a socket or a pipe to gzip or something.</source>
          <target state="translated">인수가 제공되지 않으면 &lt;code&gt;&lt;a href=&quot;../functions/write&quot;&gt;write&lt;/a&gt;&lt;/code&gt; 는 전체 형식의 아카이브를 문자열로 반환하므로 아카이브를 소켓이나 gzip 등의 파이프에 넣을 때 유용 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="886a141165f04df6d6f369bc4c3d2d482bb6efce" translate="yes" xml:space="preserve">
          <source>If no arguments are passed then the current article in the currently selected newsgroup is fetched.</source>
          <target state="translated">인수가 전달되지 않으면 현재 선택된 뉴스 그룹의 현재 기사를 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="ddc296f09027fdaaecb023b3cebc4e9cba37abbb" translate="yes" xml:space="preserve">
          <source>If no extension is supplied, and your system supports it, the original</source>
          <target state="translated">확장이 제공되지 않고 시스템에서 확장을 지원하는 경우 원래</target>
        </trans-unit>
        <trans-unit id="85c571c913f7bfa21e872b065c24a094b4bb7659" translate="yes" xml:space="preserve">
          <source>If no files or directories are supplied, &lt;code&gt;prove&lt;/code&gt; looks for all files matching the pattern &lt;code&gt;t/*.t&lt;/code&gt;.</source>
          <target state="translated">파일이나 디렉토리가 제공되지 않은 경우 &lt;code&gt;prove&lt;/code&gt; 는 패턴 &lt;code&gt;t/*.t&lt;/code&gt; 와 일치하는 모든 파일을 찾습니다 .</target>
        </trans-unit>
        <trans-unit id="cea57f19921408109bb2fb4d00e16350d27b4844" translate="yes" xml:space="preserve">
          <source>If no import list is supplied, all possible VMS-specific features are assumed. Currently, there are four VMS-specific features available: 'status' (a.k.a '$?'), 'exit', 'time' and 'hushed'.</source>
          <target state="translated">가져 오기 목록이 제공되지 않으면 가능한 모든 VMS 관련 기능이 가정됩니다. 현재 '상태'(일명 '$?'), '종료', '시간'및 '허쉬'와 같은 4 가지 VMS 관련 기능이 있습니다.</target>
        </trans-unit>
        <trans-unit id="d4ceff2a6aadec6052244b97bba7012539a0b105" translate="yes" xml:space="preserve">
          <source>If no import list is supplied, all possible restrictions are assumed. (This is the safest mode to operate in, but is sometimes too strict for casual programming.) Currently, there are three possible things to be strict about: &quot;subs&quot;, &quot;vars&quot;, and &quot;refs&quot;.</source>
          <target state="translated">가져 오기 목록이 제공되지 않으면 가능한 모든 제한 사항이 가정됩니다. (이는 운영하기에 가장 안전한 모드이지만 때로는 일상적인 프로그래밍에는 너무 엄격합니다.) 현재 &quot;subs&quot;, &quot;vars&quot;및 &quot;refs&quot;에 대해 엄격하게 세 가지가 있습니다.</target>
        </trans-unit>
        <trans-unit id="c1d6512b9a9d5a5a9bf4112bcb1e3a393263f0b9" translate="yes" xml:space="preserve">
          <source>If no items exists at the specified index (i.e., the queue is empty, or the index is beyond the number of items on the queue), then &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; is returned.</source>
          <target state="translated">지정된 인덱스에 항목이없는 경우 (즉, 큐가 비어 있거나 인덱스가 큐의 항목 수를 초과하는 경우) &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; 가 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="bc9e3e2a819c8fb3d75385fda77f033e08dfb423" translate="yes" xml:space="preserve">
          <source>If no options are given, Pod::Man uses the name of the input file with any trailing &lt;code&gt;.pod&lt;/code&gt;, &lt;code&gt;.pm&lt;/code&gt;, or &lt;code&gt;.pl&lt;/code&gt; stripped as the man page title, to section 1 unless the file ended in &lt;code&gt;.pm&lt;/code&gt; in which case it defaults to section 3, to a centered title of &quot;User Contributed Perl Documentation&quot;, to a centered footer of the Perl version it is run with, and to a left-hand footer of the modification date of its input (or the current date if given &lt;code&gt;STDIN&lt;/code&gt; for input).</source>
          <target state="translated">옵션이 제공되지 않으면 Pod :: Man은 파일이 &lt;code&gt;.pm&lt;/code&gt; 으로 끝나지 않는 한 맨 페이지 제목으로 후행 &lt;code&gt;.pod&lt;/code&gt; , &lt;code&gt;.pm&lt;/code&gt; 또는 &lt;code&gt;.pl&lt;/code&gt; 이있는 입력 파일 이름 을 섹션 1에 사용 합니다. 기본적으로 섹션 3, &quot;사용자 제공 Perl 문서&quot;의 중심 제목, 함께 실행되는 Perl 버전의 중심 바닥 글 및 입력 수정 날짜의 왼쪽 바닥 글 (또는 현재 날짜 인 경우) 주어진 &lt;code&gt;STDIN&lt;/code&gt; 입력).</target>
        </trans-unit>
        <trans-unit id="1f1608fb3d0f72aad27d7541f9de6e52f802b4ee" translate="yes" xml:space="preserve">
          <source>If no second argument is provided and the category is &lt;code&gt;LC_ALL&lt;/code&gt; , the result is implementation-dependent. It may be a string of concatenated locale names (separator also implementation-dependent) or a single locale name. Please consult your</source>
          <target state="translated">두 번째 인수가 제공되지 않고 카테고리가 &lt;code&gt;LC_ALL&lt;/code&gt; 인 경우 결과는 구현에 따라 다릅니다. 연결된 로캘 이름의 문자열 (구분자도 구현에 따라 다름) 또는 단일 로캘 이름 일 수 있습니다. 상담하십시오</target>
        </trans-unit>
        <trans-unit id="ed489574b7ebc8c696d017fb9515c4a591232a34" translate="yes" xml:space="preserve">
          <source>If no second argument is provided and the category is something other than &lt;code&gt;LC_ALL&lt;/code&gt; , the function returns a string naming the current locale for the category. You can use this value as the second argument in a subsequent call to &lt;code&gt;setlocale()&lt;/code&gt; , &lt;b&gt;but&lt;/b&gt; on some platforms the string is opaque, not something that most people would be able to decipher as to what locale it means.</source>
          <target state="translated">두 번째 인수가 제공되지 않고 카테고리가 &lt;code&gt;LC_ALL&lt;/code&gt; 이외의 다른 경우 함수는 카테고리의 현재 로케일을 명명하는 문자열을 리턴합니다. 당신은에 대한 후속 호출에서 두 번째 인수로이 값을 사용할 수 있습니다 &lt;code&gt;setlocale()&lt;/code&gt; , &lt;b&gt;하지만&lt;/b&gt; 일부 플랫폼에서 문자열은 대부분의 사람들이 무엇을 의미하는지 로케일로 해독 할 수있을 것이라고 불투명하지 무언가이다.</target>
        </trans-unit>
        <trans-unit id="53385049e198591f3af9c0f621b19586d0e6e03c" translate="yes" xml:space="preserve">
          <source>If no string is specified via the &lt;code&gt;=~&lt;/code&gt; or &lt;code&gt;!~&lt;/code&gt; operator, the &lt;code&gt;$_&lt;/code&gt; variable is searched and modified. Unless the &lt;code&gt;/r&lt;/code&gt; option is used, the string specified must be a scalar variable, an array element, a hash element, or an assignment to one of those; that is, some sort of scalar lvalue.</source>
          <target state="translated">&lt;code&gt;=~&lt;/code&gt; 또는 &lt;code&gt;!~&lt;/code&gt; 연산자 를 통해 문자열을 지정하지 않으면 &lt;code&gt;$_&lt;/code&gt; 변수가 검색되고 수정됩니다. &lt;code&gt;/r&lt;/code&gt; 옵션을 사용 하지 않으면 지정된 문자열은 스칼라 변수, 배열 요소, 해시 요소 또는 그 중 하나에 대한 지정이어야합니다. 즉, 일종의 스칼라 lvalue입니다.</target>
        </trans-unit>
        <trans-unit id="9ee4d303ec9de35b4bd6b8caf1f726ddd4ca7c6e" translate="yes" xml:space="preserve">
          <source>If no such Pod file is found, this method returns undef.</source>
          <target state="translated">이러한 포드 파일이 없으면이 메소드는 undef를 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="34cd3d77c3969309ab95d1d80fe464b5d299344d" translate="yes" xml:space="preserve">
          <source>If no urllist has been chosen yet, would you prefer CPAN.pm to connect to the built-in default sites without asking? (yes/no)?</source>
          <target state="translated">urllist를 아직 선택하지 않은 경우 CPAN.pm을 사용하여 묻지 않고 기본 제공 기본 사이트에 연결 하시겠습니까? (예 아니오)?</target>
        </trans-unit>
        <trans-unit id="b1457b54499e074ed5ffc48ffd57a11b298ba627" translate="yes" xml:space="preserve">
          <source>If no value is associated with the attribute, &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; is passed.</source>
          <target state="translated">속성과 연관된 값이 없으면 &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; 가 전달됩니다.</target>
        </trans-unit>
        <trans-unit id="3641612d3261f449a8b25c55086ede32d34dbbcb" translate="yes" xml:space="preserve">
          <source>If non-empty braces are the only wildcard characters used in the &lt;code&gt;&lt;a href=&quot;functions/glob&quot;&gt;glob&lt;/a&gt;&lt;/code&gt;, no filenames are matched, but potentially many strings are returned. For example, this produces nine strings, one for each pairing of fruits and colors:</source>
          <target state="translated">비어 있지 않은 중괄호가 &lt;code&gt;&lt;a href=&quot;functions/glob&quot;&gt;glob&lt;/a&gt;&lt;/code&gt; 에 사용 된 유일한 와일드 카드 문자 인 경우 파일 이름이 일치하지 않지만 잠재적으로 많은 문자열이 반환됩니다. 예를 들어, 과일과 색상의 각 쌍마다 하나씩 9 개의 문자열을 생성합니다.</target>
        </trans-unit>
        <trans-unit id="1328c99f7fc26be401ecc4c3daf8d11e272b065b" translate="yes" xml:space="preserve">
          <source>If non-empty braces are the only wildcard characters used in the &lt;code&gt;&lt;a href=&quot;glob&quot;&gt;glob&lt;/a&gt;&lt;/code&gt;, no filenames are matched, but potentially many strings are returned. For example, this produces nine strings, one for each pairing of fruits and colors:</source>
          <target state="translated">비어 있지 않은 중괄호가 &lt;code&gt;&lt;a href=&quot;glob&quot;&gt;glob&lt;/a&gt;&lt;/code&gt; 에 사용 된 유일한 와일드 카드 문자 인 경우 파일 이름이 일치하지 않지만 잠재적으로 많은 문자열이 반환됩니다. 예를 들어, 과일과 색상의 각 쌍마다 하나씩 9 개의 문자열을 생성합니다.</target>
        </trans-unit>
        <trans-unit id="cf3289643abb0e0247bc66bf82c16e180f16eb54" translate="yes" xml:space="preserve">
          <source>If none of the above apply, for backwards compatibility reasons, the &lt;code&gt;/d&lt;/code&gt; modifier is the one in effect by default. As this can lead to unexpected results, it is best to specify which other rule set should be used.</source>
          <target state="translated">위의 어느 것도 적용되지 않으면 이전 버전과의 호환성을 위해 &lt;code&gt;/d&lt;/code&gt; 수정자가 기본적으로 적용됩니다. 예기치 않은 결과가 발생할 수 있으므로 사용해야 할 다른 규칙 집합을 지정하는 것이 가장 좋습니다.</target>
        </trans-unit>
        <trans-unit id="ca7c7d8696c46f8858c11c99d7d1a93c5e34454b" translate="yes" xml:space="preserve">
          <source>If none of the three command line flags (&lt;b&gt;-w&lt;/b&gt;, &lt;b&gt;-W&lt;/b&gt; or &lt;b&gt;-X&lt;/b&gt;) that control warnings is used and neither &lt;code&gt;$^W&lt;/code&gt; nor the &lt;code&gt;warnings&lt;/code&gt; pragma are used, then default warnings will be enabled and optional warnings disabled. This means that legacy code that doesn't attempt to control the warnings will work unchanged.</source>
          <target state="translated">경고를 제어 하는 세 개의 명령 행 플래그 ( &lt;b&gt;-w&lt;/b&gt; , &lt;b&gt;-W&lt;/b&gt; 또는 &lt;b&gt;-X&lt;/b&gt; )가 사용되지 않고 &lt;code&gt;$^W&lt;/code&gt; 또는 &lt;code&gt;warnings&lt;/code&gt; pragma가 사용 되지 않으면 기본 경고가 사용 가능하고 선택적 경고가 사용 불가능합니다. 즉, 경고를 제어하지 않는 레거시 코드는 변경되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="3318e55dc39962c8bcf2ab6429b4489bcf36fce0" translate="yes" xml:space="preserve">
          <source>If none of those language-tags leads to loadable classes, we then try classes derived from YourProjClass-&amp;gt;fallback_languages() and then if nothing comes of that, we use classes named by YourProjClass-&amp;gt;fallback_language_classes(). Then in the (probably quite unlikely) event that that fails, we just return undef.</source>
          <target state="translated">해당 언어 태그 중 어느 것도로드 가능한 클래스로 연결되지 않으면 YourProjClass-&amp;gt; fallback_languages ​​()에서 파생 된 클래스를 시도한 후 아무것도 나오지 않으면 YourProjClass-&amp;gt; fallback_language_classes ()로 명명 된 클래스를 사용합니다. 그런 다음 실패 할 가능성이 높은 이벤트에서 undef를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="92205bb5b979576b7a4566bdd880e8993ef8accb" translate="yes" xml:space="preserve">
          <source>If not 0, then it will be a count of the number of items returned by the subroutine. These items will be stored on the Perl stack. The section</source>
          <target state="translated">0이 아닌 경우 서브 루틴이 리턴 한 항목 수입니다. 이러한 항목은 Perl 스택에 저장됩니다. 그 영역</target>
        </trans-unit>
        <trans-unit id="15089e00b79e7ab36a4d99102807c33fe5f2fa61" translate="yes" xml:space="preserve">
          <source>If not already thread-shared, the other complex data types will be cloned (recursively, if needed, and including any &lt;code&gt;&lt;a href=&quot;../functions/bless&quot;&gt;bless&lt;/a&gt;&lt;/code&gt;ings and read-only settings) into thread-shared structures before being placed onto a queue.</source>
          <target state="translated">스레드 공유가 아닌 경우 다른 복합 데이터 유형은 큐에 배치되기 전에 스레드 공유 구조 로 복제됩니다 (필요한 경우 재귀 적으로, &lt;code&gt;&lt;a href=&quot;../functions/bless&quot;&gt;bless&lt;/a&gt;&lt;/code&gt; 및 읽기 전용 설정 포함).</target>
        </trans-unit>
        <trans-unit id="3e6242ea32a785a3ff0172e42255ea915052f271" translate="yes" xml:space="preserve">
          <source>If not explicitly stated, the thread's context is implied from the context of the &lt;code&gt;-&amp;gt;create()&lt;/code&gt; call:</source>
          <target state="translated">명시 적으로 언급되지 않은 경우 스레드의 컨텍스트는 &lt;code&gt;-&amp;gt;create()&lt;/code&gt; 호출 의 컨텍스트에서 암시됩니다 .</target>
        </trans-unit>
        <trans-unit id="546f552a865a929b4eb67739806b6d1165a21c9a" translate="yes" xml:space="preserve">
          <source>If not present or if it returns false, then the stream is left with the UTF-8 flag clear. The</source>
          <target state="translated">존재하지 않거나 false를 리턴하면 UTF-8 플래그가 지워진 상태로 스트림이 남습니다. 그만큼</target>
        </trans-unit>
        <trans-unit id="2aa39c0e8f5ce84edfe0042135e7b88219cc53b5" translate="yes" xml:space="preserve">
          <source>If not specified, this parameter defaults to the OS code of the Operating System this module was built on. The value 3 is used as a catch-all for all Unix variants and unknown Operating Systems.</source>
          <target state="translated">지정되지 않은 경우이 매개 변수의 기본값은이 모듈이 작성된 운영 체제의 OS 코드입니다. 값 3은 모든 Unix 변형 및 알려지지 않은 운영 체제에 대한 포괄적으로 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="5be9107047108eada41300dc934c5b436deb60f0" translate="yes" xml:space="preserve">
          <source>If not successful &lt;code&gt;$status&lt;/code&gt; will hold the</source>
          <target state="translated">실패하면 &lt;code&gt;$status&lt;/code&gt; 는</target>
        </trans-unit>
        <trans-unit id="aff9c9f30e8137171bc8ec7e751402e0d4e840fb" translate="yes" xml:space="preserve">
          <source>If not successful, &lt;code&gt;$i&lt;/code&gt; will be</source>
          <target state="translated">성공하지 못하면 &lt;code&gt;$i&lt;/code&gt; 는</target>
        </trans-unit>
        <trans-unit id="b50aafa5c3c8fb148f77f7f985f1a7044430dc1d" translate="yes" xml:space="preserve">
          <source>If not successful, the returned compression object, &lt;code&gt;$z&lt;/code&gt; , will be</source>
          <target state="translated">성공하지 못한 경우 반환 된 압축 개체 &lt;code&gt;$z&lt;/code&gt; 는</target>
        </trans-unit>
        <trans-unit id="e8abade20743149de14f55b6a98559ef8ef9d29a" translate="yes" xml:space="preserve">
          <source>If not successful, the returned deflation object, &lt;code&gt;$d&lt;/code&gt; , will be</source>
          <target state="translated">성공하지 못한 경우 반환 된 수축 객체 &lt;code&gt;$d&lt;/code&gt; 는</target>
        </trans-unit>
        <trans-unit id="98576d6e30e44a960914f7dcf4587ee17092e2df" translate="yes" xml:space="preserve">
          <source>If not successful, the returned deflation stream (&lt;code&gt;$d&lt;/code&gt; ) will be</source>
          <target state="translated">성공하지 못하면 반환 된 수축 스트림 ( &lt;code&gt;$d&lt;/code&gt; )은</target>
        </trans-unit>
        <trans-unit id="b7bd4ba1b78daba8a26ec4a9a7d4b9cf1b5da29e" translate="yes" xml:space="preserve">
          <source>If not successful, the returned uncompression object, &lt;code&gt;$z&lt;/code&gt; , will be</source>
          <target state="translated">성공하지 못한 경우 반환 된 압축 해제 객체 &lt;code&gt;$z&lt;/code&gt; 는</target>
        </trans-unit>
        <trans-unit id="5c88e7dc3b6ede485e4fd5bdcc2d18ce257150ea" translate="yes" xml:space="preserve">
          <source>If not under &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; utf8&lt;/code&gt; , the source is treated as ASCII + 128 extra controls, and identifiers should match</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; utf8&lt;/code&gt; 아닌 경우 utf8 소스는 ASCII + 128 추가 제어로 처리되며 식별자는 일치해야합니다.</target>
        </trans-unit>
        <trans-unit id="adf92a54eaec2aef254d98d2b3572cf157430f6f" translate="yes" xml:space="preserve">
          <source>If not, you can use a Fisher-Yates shuffle.</source>
          <target state="translated">그렇지 않은 경우 Fisher-Yates 셔플을 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="63aa47bb8d880da4c29744c1e2b5b0be9d2d8c10" translate="yes" xml:space="preserve">
          <source>If not, you may need to dig in the indices to find it in the directory of the current maintainer.</source>
          <target state="translated">그렇지 않은 경우 현재 관리자의 디렉토리에서 색인을 찾아야합니다.</target>
        </trans-unit>
        <trans-unit id="e3dd66c8bbe90e184bf0c3b78ff920f066856ccf" translate="yes" xml:space="preserve">
          <source>If omitted, PATTERN defaults to a single space, &lt;code&gt;&quot; &quot;&lt;/code&gt; , triggering the previously described</source>
          <target state="translated">생략하면 PATTERN의 기본값은 단일 공간 &lt;code&gt;&quot; &quot;&lt;/code&gt; 으로 설정되어 앞에서 설명한대로 트리거됩니다.</target>
        </trans-unit>
        <trans-unit id="9db6f61ce06c88ac7402efe003ec5c4f69fd8d53" translate="yes" xml:space="preserve">
          <source>If omitted, the maximum is the 4th.</source>
          <target state="translated">생략하면 최대 값은 4입니다.</target>
        </trans-unit>
        <trans-unit id="8cf02da092076b8bc64e89cb4d51247518c5d4fc" translate="yes" xml:space="preserve">
          <source>If one attempts to print this value, then the overloaded operator &lt;code&gt;&quot;&quot;&lt;/code&gt; will be called, which will call &lt;code&gt;nomethod&lt;/code&gt; operator. The result of this operator will be stringified again, but this result is again of type &lt;code&gt;symbolic&lt;/code&gt; , which will lead to an infinite loop.</source>
          <target state="translated">이 값을 인쇄하려고하면 오버로드 된 연산자 &lt;code&gt;&quot;&quot;&lt;/code&gt; 가 호출되고 &lt;code&gt;nomethod&lt;/code&gt; 연산자 가 호출 됩니다 . 이 연산자의 결과는 다시 문자열로 표시되지만이 결과는 다시 &lt;code&gt;symbolic&lt;/code&gt; 유형 이므로 무한 루프가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="e1adcb84ff8cdfac7bb94b3520eb9afd47061bae" translate="yes" xml:space="preserve">
          <source>If one can be sure that a particular program is a Perl script expecting filenames in @ARGV, the clever programmer can write something like this:</source>
          <target state="translated">특정 프로그램이 @ARGV에서 파일 이름을 예상하는 Perl 스크립트임을 확신 할 수 있다면 영리한 프로그래머는 다음과 같이 작성할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b9a4785b4cb95e8fee7a09364380427defe0f204" translate="yes" xml:space="preserve">
          <source>If one is compiling Perl with the &lt;code&gt;-DPERL_GLOBAL_STRUCT&lt;/code&gt; the &lt;code&gt;dVAR&lt;/code&gt; definition is needed if the Perl global variables (see</source>
          <target state="translated">&lt;code&gt;-DPERL_GLOBAL_STRUCT&lt;/code&gt; 를 사용 하여 Perl을 컴파일 하는 경우 Perl 전역 변수 인 경우 &lt;code&gt;dVAR&lt;/code&gt; 정의가 필요합니다 (참조</target>
        </trans-unit>
        <trans-unit id="e3e822ed5577ab52cc19452e08717fd8eeaeaafa" translate="yes" xml:space="preserve">
          <source>If one of the input arguments to the C function is the length of a string argument &lt;code&gt;NAME&lt;/code&gt; , one can substitute the name of the length-argument by &lt;code&gt;&lt;a href=&quot;functions/length&quot;&gt;length(NAME)&lt;/a&gt;&lt;/code&gt; in the XSUB declaration. This argument must be omitted when the generated Perl function is called. E.g.,</source>
          <target state="translated">C 함수에 대한 입력 인수 중 하나가 문자열 인수 &lt;code&gt;NAME&lt;/code&gt; 의 길이 인 경우 XSUB 선언에서 &lt;code&gt;&lt;a href=&quot;functions/length&quot;&gt;length(NAME)&lt;/a&gt;&lt;/code&gt; 인수의 이름을 length (NAME) 로 대체 할 수 있습니다 . 생성 된 Perl 함수가 호출 될 때이 인수를 생략해야합니다. 예 :</target>
        </trans-unit>
        <trans-unit id="80356b3107601264757c736090081f30d00dbd0c" translate="yes" xml:space="preserve">
          <source>If one of the values is the string &quot;FATAL&quot;, then all the warnings in that list will be considered fatal, just as with the &lt;b&gt;warnings&lt;/b&gt; pragma itself. Should you need to specify that some warnings are fatal, and others are merely enabled, you can pass the &lt;b&gt;warnings&lt;/b&gt; parameter twice:</source>
          <target state="translated">값 중 하나가 문자열 &quot;FATAL&quot;인 경우 &lt;b&gt;경고&lt;/b&gt; 프라 그마 자체 와 마찬가지로 해당 목록의 모든 경고가 치명적인 것으로 간주 됩니다. 일부 경고는 치명적이며 다른 경고는 단순히 활성화되도록 지정해야하는 경우 &lt;b&gt;warnings&lt;/b&gt; 매개 변수를 두 번 전달할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="58b3d6b8eb5c53fb4bf738ec026bd17996fb8d7b" translate="yes" xml:space="preserve">
          <source>If one wants to use pure Perl and to be compatible with Perl versions prior to 5.10, the general answer is to use &lt;code&gt;if-elsif-else&lt;/code&gt;:</source>
          <target state="translated">순수한 Perl을 사용하고 5.10 이전의 Perl 버전과 호환되기를 원한다면 일반적인 대답은 &lt;code&gt;if-elsif-else&lt;/code&gt; 를 사용 하는 것입니다 .</target>
        </trans-unit>
        <trans-unit id="12b8235b34f1e041150a031d0b9fbd780bdea304" translate="yes" xml:space="preserve">
          <source>If only PATTERN is given, EXPR defaults to &lt;code&gt;$_&lt;/code&gt; .</source>
          <target state="translated">PATTERN 만 제공되는 경우 EXPR의 기본값은 &lt;code&gt;$_&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="16392afc89510c0fc9dd7ff46ccb0d1b3e97fcef" translate="yes" xml:space="preserve">
          <source>If other charset support is needed, please file a bug report against CPAN.pm at rt.cpan.org and describe your needs. Maybe we can extend the support or maybe UTF-8 terminals become widely available.</source>
          <target state="translated">다른 문자 집합 지원이 필요한 경우 rt.cpan.org에 CPAN.pm에 대한 버그 보고서를 제출하고 요구 사항을 설명하십시오. 지원을 확장하거나 UTF-8 터미널을 널리 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a07176206cda4e320bb3d161ccf541de7489aeb9" translate="yes" xml:space="preserve">
          <source>If our include file had contained #include directives, these would not have been processed by h2xs. There is no good solution to this right now.</source>
          <target state="translated">포함 파일에 #include 지시문이 포함되어 있으면 h2xs에서 처리하지 않았을 것입니다. 현재로서는 이것에 대한 좋은 해결책이 없습니다.</target>
        </trans-unit>
        <trans-unit id="1342cd54e96ee75c7832a17e50d7545968334b8a" translate="yes" xml:space="preserve">
          <source>If parse errors are found in the TAP output, a note of this will be made in the summary report. To see all of the parse errors, set this argument to true:</source>
          <target state="translated">TAP 출력에서 ​​구문 분석 오류가 발견되면이를 요약 보고서에 기록합니다. 모든 구문 분석 오류를 보려면이 인수를 true로 설정하십시오.</target>
        </trans-unit>
        <trans-unit id="390961095f8040e196a232b583180a54cb19ea61" translate="yes" xml:space="preserve">
          <source>If passed a filehandle will write a copy of all parsed TAP to that handle.</source>
          <target state="translated">파일 핸들이 전달되면 파싱 된 모든 TAP 사본을 해당 핸들에 씁니다.</target>
        </trans-unit>
        <trans-unit id="5a4f883097b033ba66596455cc092c01c5e9be39" translate="yes" xml:space="preserve">
          <source>If performance is an issue, and you don't care if the output is in the same case as the input, Use &lt;code&gt;&lt;a href=&quot;functions/tr&quot;&gt;tr///&lt;/a&gt;&lt;/code&gt; to transform to the case most employed within the data. If the data are primarily UPPERCASE non-Latin1, then apply &lt;code&gt;&lt;a href=&quot;functions/tr&quot;&gt;tr/[a-z]/[A-Z]/&lt;/a&gt;&lt;/code&gt;, and then &lt;code&gt;&lt;a href=&quot;functions/sort&quot;&gt;sort()&lt;/a&gt;&lt;/code&gt;. If the data are primarily lowercase non Latin1 then apply &lt;code&gt;&lt;a href=&quot;functions/tr&quot;&gt;tr/[A-Z]/[a-z]/&lt;/a&gt;&lt;/code&gt; before sorting. If the data are primarily UPPERCASE and include Latin-1 characters then apply:</source>
          <target state="translated">성능에 문제가 있고 출력이 입력과 같은 경우에 신경 쓰지 않으면 &lt;code&gt;&lt;a href=&quot;functions/tr&quot;&gt;tr///&lt;/a&gt;&lt;/code&gt; 를 사용하여 데이터 내에서 가장 많이 사용되는 사례로 변환 하십시오 . 데이터가 주로 대문자 이외의 라틴어 1 인 경우 &lt;code&gt;&lt;a href=&quot;functions/tr&quot;&gt;tr/[a-z]/[A-Z]/&lt;/a&gt;&lt;/code&gt; 를 적용한 다음 &lt;code&gt;&lt;a href=&quot;functions/sort&quot;&gt;sort()&lt;/a&gt;&lt;/code&gt; . 데이터가 주로 비 라틴어 1 인 경우 정렬 전에 &lt;code&gt;&lt;a href=&quot;functions/tr&quot;&gt;tr/[A-Z]/[a-z]/&lt;/a&gt;&lt;/code&gt; 를 적용하십시오 . 데이터가 주로 대문자이고 Latin-1 문자를 포함하는 경우 다음을 적용하십시오.</target>
        </trans-unit>
        <trans-unit id="ab79de5389c6af407dc202c7877566f66fb7264b" translate="yes" xml:space="preserve">
          <source>If perl has not yet been installed then PERL_SRC can be defined on the command line as shown in the previous section.</source>
          <target state="translated">perl이 아직 설치되지 않은 경우 PERL_SRC는 이전 섹션에 표시된대로 명령 행에서 정의 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="527ed5a2bdcdb5849d3d992698d64bca35b1da28" translate="yes" xml:space="preserve">
          <source>If perl is invoked using the &lt;b&gt;-e&lt;/b&gt; option or the perl script is read from &lt;code&gt;STDIN&lt;/code&gt; then FindBin sets both &lt;code&gt;$Bin&lt;/code&gt; and &lt;code&gt;$RealBin&lt;/code&gt; to the current directory.</source>
          <target state="translated">&lt;b&gt;-e&lt;/b&gt; 옵션을 사용하여 perl을 호출 하거나 &lt;code&gt;STDIN&lt;/code&gt; 에서 perl 스크립트를 읽으면 &lt;code&gt;$RealBin&lt;/code&gt; 은 &lt;code&gt;$Bin&lt;/code&gt; 및 $ RealBin 을 모두 현재 디렉토리로 설정합니다.</target>
        </trans-unit>
        <trans-unit id="c28bb9f5b57ae9540614c1c058beb6e3302cae11" translate="yes" xml:space="preserve">
          <source>If perl was installed correctly and your shadow library was written properly, the &lt;code&gt;getpw*()&lt;/code&gt; functions described in &lt;a href=&quot;perlfunc&quot;&gt;perlfunc&lt;/a&gt; should in theory provide (read-only) access to entries in the shadow password file. To change the file, make a new shadow password file (the format varies from system to system--see</source>
          <target state="translated">perl이 올바르게 설치되고 새도우 라이브러리가 올바르게 작성된 경우, &lt;a href=&quot;perlfunc&quot;&gt;perlfunc에&lt;/a&gt; 설명 된 &lt;code&gt;getpw*()&lt;/code&gt; 함수는 이론적으로 새도우 비밀번호 파일의 항목에 대한 (읽기 전용) 액세스를 제공해야합니다. 파일을 변경하려면 새 섀도우 암호 파일을 만드십시오 (시스템마다 형식이 다릅니다.</target>
        </trans-unit>
        <trans-unit id="4aa77499616bd2f38224ed594fc316a580948f20" translate="yes" xml:space="preserve">
          <source>If possible, move() will simply rename the file. Otherwise, it copies the file to the new location and deletes the original. If an error occurs during this copy-and-delete process, you may be left with a (possibly partial) copy of the file under the destination name.</source>
          <target state="translated">가능한 경우 move ()는 단순히 파일 이름을 바꿉니다. 그렇지 않으면 파일을 새 위치로 복사하고 원본을 삭제합니다. 이 복사 및 삭제 프로세스 중에 오류가 발생하면 대상 이름 아래에 파일의 (일부) 사본이 남아있을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="821e3f8f257e241afb18f9d12ceda656792b21cb" translate="yes" xml:space="preserve">
          <source>If possible, register the module with CPAN. You should include details of its location in your announcement.</source>
          <target state="translated">가능하면 CPAN에 모듈을 등록하십시오. 공지 사항에 해당 위치의 세부 사항을 포함시켜야합니다.</target>
        </trans-unit>
        <trans-unit id="00df1bad6fa3810b7a0fb796a7103c7f28a05f8c" translate="yes" xml:space="preserve">
          <source>If possible, this form should be used to prevent possible race conditions.</source>
          <target state="translated">가능하면 경쟁 조건을 방지하기 위해이 양식을 사용해야합니다.</target>
        </trans-unit>
        <trans-unit id="34d4da8aa87987ec9ceda1c43801e78b64cdc28a" translate="yes" xml:space="preserve">
          <source>If present on a regex, &lt;code&gt;&quot;#&quot;&lt;/code&gt; comments will be handled differently by the tokenizer in some cases.</source>
          <target state="translated">정규식에있는 경우 &lt;code&gt;&quot;#&quot;&lt;/code&gt; 주석은 경우에 따라 토크 나이저에 의해 다르게 처리됩니다.</target>
        </trans-unit>
        <trans-unit id="fcb106d01e2834098b09ad25220c5df2510aa768" translate="yes" xml:space="preserve">
          <source>If present, $hints should be a reference to a hash, where the following keys are recognised:</source>
          <target state="translated">존재하는 경우 $ hints는 다음 키가 인식되는 해시에 대한 참조 여야합니다.</target>
        </trans-unit>
        <trans-unit id="768b78e920d55b41dde42ac4d330e515e86f1cd7" translate="yes" xml:space="preserve">
          <source>If present, each callback corresponding to a given result type will be called with the result as the argument if the &lt;code&gt;run&lt;/code&gt; method is used:</source>
          <target state="translated">존재하는 경우, 주어진 메소드 유형에 해당하는 각 콜백은 &lt;code&gt;run&lt;/code&gt; 메소드가 사용되는 경우 결과를 인수로 사용하여 호출 됩니다.</target>
        </trans-unit>
        <trans-unit id="80e76146570d6b35c93035dd97f6090cb9b7cbba" translate="yes" xml:space="preserve">
          <source>If present, it should be a reference to a scalar. This scalar will be made to reference an array, which will be used to store all files and directories unlinked during the call. If nothing is unlinked, the array will be empty.</source>
          <target state="translated">있는 경우 스칼라를 참조해야합니다. 이 스칼라는 배열을 참조하기 위해 만들어지며 호출 중에 링크되지 않은 모든 파일과 디렉토리를 저장하는 데 사용됩니다. 아무것도 연결되어 있지 않으면 배열이 비어 있습니다.</target>
        </trans-unit>
        <trans-unit id="eaf6326ff6faceb306eebc039298d3cef21ae0f2" translate="yes" xml:space="preserve">
          <source>If present, it should be a reference to a scalar. This scalar will be made to reference an array, which will be used to store any errors that are encountered. See the &lt;a href=&quot;#ERROR-HANDLING&quot;&gt;ERROR HANDLING&lt;/a&gt; section for more information.</source>
          <target state="translated">있는 경우 스칼라를 참조해야합니다. 이 스칼라는 배열을 참조하도록 만들어지며 발생하는 모든 오류를 저장하는 데 사용됩니다. 자세한 내용은 &lt;a href=&quot;#ERROR-HANDLING&quot;&gt;오류 처리&lt;/a&gt; 섹션을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="28236ec2fcbd77071db6f4df51ebe2ad1353410f" translate="yes" xml:space="preserve">
          <source>If present, will cause &lt;code&gt;make_path&lt;/code&gt; to print the name of each directory as it is created. By default nothing is printed.</source>
          <target state="translated">있는 경우 &lt;code&gt;make_path&lt;/code&gt; 가 생성 될 때 각 디렉토리의 이름을 인쇄합니다. 기본적으로 아무것도 인쇄되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="ba616b58ac8bd248e0e92e90224a9f0e82a7126d" translate="yes" xml:space="preserve">
          <source>If present, will cause &lt;code&gt;remove_tree&lt;/code&gt; to print the name of each file as it is unlinked. By default nothing is printed.</source>
          <target state="translated">존재하는 경우, &lt;code&gt;remove_tree&lt;/code&gt; 는 링크 해제 된 각 파일의 이름을 인쇄합니다. 기본적으로 아무것도 인쇄되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="da38e80a5de666bdd4124bbd72eac17c8b7acaf5" translate="yes" xml:space="preserve">
          <source>If present, will cause any created directory to be owned by &lt;code&gt;$owner&lt;/code&gt; . If the value is numeric, it will be interpreted as a uid, otherwise as username is assumed. An error will be issued if the username cannot be mapped to a uid, or the uid does not exist, or the process lacks the privileges to change ownership.</source>
          <target state="translated">존재하면 &lt;code&gt;$owner&lt;/code&gt; 가 생성 한 디렉토리를 소유하게됩니다 . 값이 숫자이면 uid로 해석되고, 그렇지 않으면 username으로 간주됩니다. 사용자 이름을 uid에 매핑 할 수 없거나 uid가 없거나 프로세스에 소유권을 변경할 수있는 권한이없는 경우 오류가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="c6bc6a6c714ec1098b00e8f4665bf29765d41191" translate="yes" xml:space="preserve">
          <source>If present, will cause any created directory to be owned by the group &lt;code&gt;$group&lt;/code&gt; . If the value is numeric, it will be interpreted as a gid, otherwise as group name is assumed. An error will be issued if the group name cannot be mapped to a gid, or the gid does not exist, or the process lacks the privileges to change group ownership.</source>
          <target state="translated">존재하면 &lt;code&gt;$group&lt;/code&gt; 그룹이 생성 된 디렉토리를 소유하게됩니다 . 값이 숫자 인 경우 gid로 해석되고, 그렇지 않으면 그룹 이름으로 간주됩니다. 그룹 이름을 gid에 맵핑 할 수 없거나 gid가 없거나 프로세스에 그룹 소유권을 변경할 수있는 권한이없는 경우 오류가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="a365bb62991d043cada86ad3beb15687e9b5977b" translate="yes" xml:space="preserve">
          <source>If program usage has been explicitly requested by the user, it is often desirable to exit with a status of 1 (as opposed to 0) after issuing the user-requested usage message. It is also desirable to give a more verbose description of program usage in this case.</source>
          <target state="translated">사용자가 프로그램 사용을 명시 적으로 요청한 경우 사용자가 요청한 사용 메시지를 발행 한 후 상태가 1 (0이 아닌)로 종료하는 것이 바람직합니다. 이 경우 프로그램 사용에 대한 자세한 설명을 제공하는 것도 바람직합니다.</target>
        </trans-unit>
        <trans-unit id="ff3608d191706961b1f05c1c4d43ca10631cdf8b" translate="yes" xml:space="preserve">
          <source>If run on any operating system other than Windows, this will import the functions &lt;code&gt;setlocale&lt;/code&gt; and &lt;code&gt;LC_ALL&lt;/code&gt; from &lt;a href=&quot;posix&quot;&gt;POSIX&lt;/a&gt;. On Windows it does nothing.</source>
          <target state="translated">Windows 이외의 운영 체제에서 실행되는 경우 &lt;a href=&quot;posix&quot;&gt;POSIX&lt;/a&gt; 에서 &lt;code&gt;setlocale&lt;/code&gt; 및 &lt;code&gt;LC_ALL&lt;/code&gt; 함수를 가져옵니다 . Windows에서는 아무것도하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="9d9d2ff0e902fe5020fe3d38bdc23ea71c9ea208" translate="yes" xml:space="preserve">
          <source>If run with no arguments, filters standard input to standard output.</source>
          <target state="translated">인수없이 실행하면 표준 입력을 표준 출력으로 필터링합니다.</target>
        </trans-unit>
        <trans-unit id="53f4c878607755d2bdfa2564e4393c026538b21e" translate="yes" xml:space="preserve">
          <source>If running under taint mode, and if $ENV{TMPDIR} is tainted, it is not used.</source>
          <target state="translated">오염 모드에서 실행 중이고 $ ENV {TMPDIR}이 오염 된 경우에는 사용되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="c028c3067c9e1833a7b2f721beaf502c1d3b87c3" translate="yes" xml:space="preserve">
          <source>If running under taint mode, and if the environment variables are tainted, they are not used.</source>
          <target state="translated">오염 모드에서 실행 중이고 환경 변수가 오염 된 경우에는 사용되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="bc42709752d603d6e86a31cea878bd9ef78c5a40" translate="yes" xml:space="preserve">
          <source>If safety matters to you (and why else would you be using the Opcode module?) then you should not rely on the definition of this, or indeed any other, optag!</source>
          <target state="translated">안전이 중요한 이유 (및 다른 이유는 Opcode 모듈을 사용하는 이유는 무엇입니까?)에 대한 정의 나 다른 optag에 의존해서는 안됩니다!</target>
        </trans-unit>
        <trans-unit id="c49a3b26a25358ee584c0e87edb350360c053486" translate="yes" xml:space="preserve">
          <source>If set &lt;code&gt;formatter&lt;/code&gt; must be an object that is capable of formatting the TAP output. See &lt;a href=&quot;formatter/console&quot;&gt;TAP::Formatter::Console&lt;/a&gt; for an example.</source>
          <target state="translated">설정된 경우 &lt;code&gt;formatter&lt;/code&gt; 는 TAP 출력을 형식화 할 수있는 오브젝트 여야합니다. 예제는 &lt;a href=&quot;formatter/console&quot;&gt;TAP :: Formatter :: Console&lt;/a&gt; 을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="cc6406e3d3c8ec686d43e0bd0630b45054571335" translate="yes" xml:space="preserve">
          <source>If set forward, the details of the missing tests are filled in as 'unknown'. if set backward, the details of the intervening tests are deleted. You can erase history if you really want to.</source>
          <target state="translated">설정하면 누락 된 테스트의 세부 사항이 '알 수 없음'으로 채워집니다. 뒤로 설정하면 중재 테스트의 세부 사항이 삭제됩니다. 정말로 원한다면 역사를 지울 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="94a6b6735d1cf67d97faf5afa93385c976f8d9ca" translate="yes" xml:space="preserve">
          <source>If set to 'none', no man pages will be installed.</source>
          <target state="translated">'없음'으로 설정하면 매뉴얼 페이지가 설치되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="35193d3a52f1a67d3457cb0804a53caff3b762a2" translate="yes" xml:space="preserve">
          <source>If set to 0, the contents of the output parameter of the &lt;code&gt;&lt;a href=&quot;../../functions/read&quot;&gt;read&lt;/a&gt;&lt;/code&gt; method will be overwritten by the uncompressed data.</source>
          <target state="translated">0으로 설정 하면 압축되지 않은 데이터가 &lt;code&gt;&lt;a href=&quot;../../functions/read&quot;&gt;read&lt;/a&gt;&lt;/code&gt; 메소드 의 출력 매개 변수 내용을 겹쳐 씁니다.</target>
        </trans-unit>
        <trans-unit id="63134c061d53f609b58fe4db77f806b2b217214c" translate="yes" xml:space="preserve">
          <source>If set to 1, all uncompressed data will be appended to the output parameter of the &lt;code&gt;&lt;a href=&quot;../../functions/read&quot;&gt;read&lt;/a&gt;&lt;/code&gt; method.</source>
          <target state="translated">1로 설정하면 압축되지 않은 모든 데이터가 &lt;code&gt;&lt;a href=&quot;../../functions/read&quot;&gt;read&lt;/a&gt;&lt;/code&gt; 메소드 의 출력 매개 변수에 추가됩니다 .</target>
        </trans-unit>
        <trans-unit id="a99badbf73893e25506e2b45aeb306043f0421e4" translate="yes" xml:space="preserve">
          <source>If set to a true value instruct &lt;code&gt;TAP::Parser&lt;/code&gt; to ignore exit and wait status from test scripts.</source>
          <target state="translated">true 값으로 설정되면 테스트 스크립트의 종료 및 대기 상태를 무시 하도록 &lt;code&gt;TAP::Parser&lt;/code&gt; 에 지시하십시오 .</target>
        </trans-unit>
        <trans-unit id="7addd0cdb6e060b7f425d641cdc5802f63dc6646" translate="yes" xml:space="preserve">
          <source>If set to a true value then MakeMaker's prompt function will always return the default without waiting for user input.</source>
          <target state="translated">true 값으로 설정하면 MakeMaker의 프롬프트 기능은 항상 사용자 입력을 기다리지 않고 기본값을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="37acce4270c3ae4d059b2f5d5497684bcefbd070" translate="yes" xml:space="preserve">
          <source>If set to a true value, Pod::PlainText will assume that each sentence ends in two spaces, and will try to preserve that spacing. If set to false, all consecutive whitespace in non-verbatim paragraphs is compressed into a single space. Defaults to true.</source>
          <target state="translated">True 값으로 설정하면 Pod :: PlainText는 각 문장이 두 공백으로 끝나고 해당 간격을 유지하려고 시도합니다. false로 설정하면 비-언어 단락의 모든 연속 공백이 단일 공백으로 압축됩니다. 기본값은 true입니다.</target>
        </trans-unit>
        <trans-unit id="a1e0bdf314190ede062d43bfa363f6d6ba57f992" translate="yes" xml:space="preserve">
          <source>If set to a true value, Pod::Text will assume that each sentence ends in two spaces, and will try to preserve that spacing. If set to false, all consecutive whitespace in non-verbatim paragraphs is compressed into a single space. Defaults to true.</source>
          <target state="translated">True 값으로 설정하면 Pod :: Text는 각 문장이 두 공백으로 끝나고 해당 간격을 유지하려고 시도합니다. false로 설정하면 비-언어 단락의 모든 연속 공백이 단일 공백으로 압축됩니다. 기본값은 true입니다.</target>
        </trans-unit>
        <trans-unit id="c7ea67874e15073f2f8a8748dd116175b232517b" translate="yes" xml:space="preserve">
          <source>If set to a true value, a blank line is printed after a &lt;code&gt;=head1&lt;/code&gt; heading. If set to false (the default), no blank line is printed after &lt;code&gt;=head1&lt;/code&gt; , although one is still printed after &lt;code&gt;=head2&lt;/code&gt; . This is the default because it's the expected formatting for manual pages; if you're formatting arbitrary text documents, setting this to true may result in more pleasing output.</source>
          <target state="translated">true 값으로 설정하면 &lt;code&gt;=head1&lt;/code&gt; 제목 다음에 빈 줄이 인쇄 됩니다. false (기본값)로 설정하면 &lt;code&gt;=head1&lt;/code&gt; 뒤에 공백 행이 인쇄되지 않지만 &lt;code&gt;=head2&lt;/code&gt; 뒤에 행이 인쇄 됩니다. 수동 페이지에 대해 예상되는 형식이므로 기본값입니다. 임의의 텍스트 문서를 포맷하는 경우이 값을 true로 설정하면 출력이 더 좋아질 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="79c7d693600594b39fe949ae434a7a5fc8a792dc" translate="yes" xml:space="preserve">
          <source>If set to a true value, a blank line is printed after a &lt;code&gt;=headN&lt;/code&gt; headings. If set to false (the default), no blank line is printed after &lt;code&gt;=headN&lt;/code&gt; . This is the default because it's the expected formatting for manual pages; if you're formatting arbitrary text documents, setting this to true may result in more pleasing output.</source>
          <target state="translated">true 값으로 설정하면 &lt;code&gt;=headN&lt;/code&gt; 머리글 다음에 빈 줄이 인쇄 됩니다. false (기본값)로 설정하면 &lt;code&gt;=headN&lt;/code&gt; 뒤에 빈 줄이 인쇄되지 않습니다 . 수동 페이지에 대해 예상되는 형식이므로 기본값입니다. 임의의 텍스트 문서를 포맷하는 경우이 값을 true로 설정하면 출력이 더 좋아질 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3fb0153c7c54ce2bccc40f5b7e2d5aff19532ce7" translate="yes" xml:space="preserve">
          <source>If set to a true value, indicates to the debugger that the code being debugged uses threads.</source>
          <target state="translated">true로 설정하면 디버깅중인 코드가 스레드를 사용함을 디버거에 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="e75bb2ef91a1a8c8b0ee4cbc07e5ef237213911f" translate="yes" xml:space="preserve">
          <source>If set to a true value, only test results with directives will be displayed. This overrides other settings such as &lt;code&gt;verbose&lt;/code&gt; , &lt;code&gt;failures&lt;/code&gt; , or &lt;code&gt;comments&lt;/code&gt; .</source>
          <target state="translated">true 값으로 설정하면 지시문이있는 테스트 결과 만 표시됩니다. 이것은 &lt;code&gt;verbose&lt;/code&gt; , &lt;code&gt;failures&lt;/code&gt; 또는 &lt;code&gt;comments&lt;/code&gt; 와 같은 다른 설정보다 우선 합니다.</target>
        </trans-unit>
        <trans-unit id="6403db7bde854649adecbe2fe72bc17d3ded2ac7" translate="yes" xml:space="preserve">
          <source>If set to a true value, only test results with directives will be displayed. This overrides other settings such as &lt;code&gt;verbose&lt;/code&gt; or &lt;code&gt;failures&lt;/code&gt; .</source>
          <target state="translated">true 값으로 설정하면 지시문이있는 테스트 결과 만 표시됩니다. &lt;code&gt;verbose&lt;/code&gt; 또는 &lt;code&gt;failures&lt;/code&gt; 와 같은 다른 설정보다 우선 합니다.</target>
        </trans-unit>
        <trans-unit id="ace0eebb3ad1da3562cf6ba2f4eb062020ce0829" translate="yes" xml:space="preserve">
          <source>If set to a true value, selects an alternate output format that, among other things, uses a different heading style and marks &lt;code&gt;=item&lt;/code&gt; entries with a colon in the left margin. Defaults to false.</source>
          <target state="translated">true 값으로 설정된 경우, 다른 제목 스타일을 사용 하고 왼쪽 여백에 콜론으로 &lt;code&gt;=item&lt;/code&gt; 항목을 표시하는 대체 출력 형식을 선택합니다 . 기본값은 false입니다.</target>
        </trans-unit>
        <trans-unit id="341f05ae650241bc98a8aa05ba502f05572aa8ee" translate="yes" xml:space="preserve">
          <source>If set to a true value, source entries will be converted into utf8-strings (available in Perl 5.6.1 or later). This feature needs the &lt;b&gt;Encode&lt;/b&gt; or &lt;b&gt;Encode::compat&lt;/b&gt; module.</source>
          <target state="translated">true 값으로 설정하면 소스 항목이 utf8 문자열로 변환됩니다 (Perl 5.6.1 이상에서 사용 가능). 이 기능에는 &lt;b&gt;Encode&lt;/b&gt; 또는 &lt;b&gt;Encode :: compat&lt;/b&gt; 모듈 이 필요합니다 .</target>
        </trans-unit>
        <trans-unit id="e52de704a5928c9a6d768f4b0d7d8f6e786b6b18" translate="yes" xml:space="preserve">
          <source>If set to a true value, the non-POD parts of the input file will be included in the output. Useful for viewing code documented with POD blocks with the POD rendered and the code left intact.</source>
          <target state="translated">true 값으로 설정하면 입력 파일의 비 POD 부분이 출력에 포함됩니다. POD가 렌더링되고 코드는 그대로 유지 된 상태에서 POD 블록으로 문서화 된 코드를 보는 데 유용합니다.</target>
        </trans-unit>
        <trans-unit id="77ffaa19bbb496da1b7f2a485ed0c35990cc9fa8" translate="yes" xml:space="preserve">
          <source>If set to nonzero, forces a flush right away and after every write or print on the currently selected output channel. Default is 0 (regardless of whether the channel is really buffered by the system or not; &lt;code&gt;$|&lt;/code&gt; tells you only whether you've asked Perl explicitly to flush after each write). STDOUT will typically be line buffered if output is to the terminal and block buffered otherwise. Setting this variable is useful primarily when you are outputting to a pipe or socket, such as when you are running a Perl program under &lt;b&gt;rsh&lt;/b&gt; and want to see the output as it's happening. This has no effect on input buffering. See &lt;a href=&quot;functions/getc&quot;&gt;getc&lt;/a&gt; for that. See &lt;a href=&quot;functions/select&quot;&gt;select&lt;/a&gt; on how to select the output channel. See also &lt;a href=&quot;io/handle&quot;&gt;IO::Handle&lt;/a&gt;.</source>
          <target state="translated">0이 아닌 값으로 설정하면 현재 선택된 출력 채널에서 모든 쓰기 또는 인쇄 후에 즉시 플러시를 수행합니다. 기본값은 0입니다 (채널이 실제로 시스템에 의해 버퍼링되는지 여부에 관계없이 &lt;code&gt;$|&lt;/code&gt; 는 Perl에게 각 쓰기 후에 플러시를 명시 적으로 요청했는지 여부 만 알려줍니다). 출력이 터미널에 출력되면 STDOUT은 일반적으로 라인 버퍼링되고 그렇지 않으면 블록 버퍼링됩니다. 이 변수를 설정하면 &lt;b&gt;rsh&lt;/b&gt; 에서 Perl 프로그램을 실행 중이고 출력이 발생하는 것을 확인하려는 경우와 같이 파이프 또는 소켓으로 출력 할 때 주로 유용합니다 . 이것은 입력 버퍼링에 영향을 미치지 않습니다. &lt;a href=&quot;functions/getc&quot;&gt;getc&lt;/a&gt; 를 참조하십시오 . 출력 채널을 선택하는 방법에 대한 &lt;a href=&quot;functions/select&quot;&gt;선택&lt;/a&gt; 을 참조 하십시오 . &lt;a href=&quot;io/handle&quot;&gt;IO :: Handle&lt;/a&gt; 도 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="910076b95e48e767183ba95d8bfd82a29fd1f4b7" translate="yes" xml:space="preserve">
          <source>If set to the name of a file or device, certain operations of PerlIO subsystem will be logged to that file, which is opened in append mode. Typical uses are in Unix:</source>
          <target state="translated">파일 또는 장치 이름으로 설정하면 PerlIO 하위 시스템의 특정 작업이 해당 파일에 기록되며 추가 모드로 열립니다. 일반적인 용도는 Unix입니다.</target>
        </trans-unit>
        <trans-unit id="907b3689c8943c9530c2bccd5f2399b3ea311ce8" translate="yes" xml:space="preserve">
          <source>If set to true, &lt;a href=&quot;check&quot;&gt;Params::Check&lt;/a&gt; will &lt;code&gt;croak&lt;/code&gt; when an error during template validation occurs, rather than return &lt;code&gt;false&lt;/code&gt; .</source>
          <target state="translated">true로 설정하면 템플릿 유효성 검사 중 오류가 발생하면 &lt;code&gt;false&lt;/code&gt; 를 반환하지 않고 &lt;a href=&quot;check&quot;&gt;Params :: Check&lt;/a&gt; 가 &lt;code&gt;croak&lt;/code&gt; 됩니다 .</target>
        </trans-unit>
        <trans-unit id="262e77d8ecddf65d8252c722de18aca6dafa7dd4" translate="yes" xml:space="preserve">
          <source>If set to true, &lt;a href=&quot;check&quot;&gt;Params::Check&lt;/a&gt; will no longer convert all keys from the user input to lowercase, but instead expect them to be in the case the template provided. This is useful when you want to use similar keys with different casing in your templates.</source>
          <target state="translated">true로 설정하면 &lt;a href=&quot;check&quot;&gt;Params :: Check&lt;/a&gt; 는 더 이상 사용자 입력의 모든 키를 소문자로 변환하지 않지만 대신 템플릿이 제공 한 경우 일 것으로 예상합니다. 템플릿에서 다른 케이스와 유사한 키를 사용하려는 경우에 유용합니다.</target>
        </trans-unit>
        <trans-unit id="fcd2802dc60a0f5aa656aa8d36630b4a5a1195a7" translate="yes" xml:space="preserve">
          <source>If set to true, &lt;a href=&quot;check&quot;&gt;Params::Check&lt;/a&gt; will require all values passed to be &lt;code&gt;&lt;a href=&quot;../functions/defined&quot;&gt;defined&lt;/a&gt;&lt;/code&gt;. If you wish to enable this on a 'per key' basis, use the template option &lt;code&gt;&lt;a href=&quot;../functions/defined&quot;&gt;defined&lt;/a&gt;&lt;/code&gt; instead.</source>
          <target state="translated">true로 설정하면 &lt;a href=&quot;check&quot;&gt;Params :: Check&lt;/a&gt; 는 전달 된 모든 값을 &lt;code&gt;&lt;a href=&quot;../functions/defined&quot;&gt;defined&lt;/a&gt;&lt;/code&gt; 합니다. 이를 '키당'으로 활성화하려면 대신 &lt;code&gt;&lt;a href=&quot;../functions/defined&quot;&gt;defined&lt;/a&gt;&lt;/code&gt; 템플릿 옵션을 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="b62a3740f4d2f3949ae331d68aff300bd8b9c5aa" translate="yes" xml:space="preserve">
          <source>If set to true, &lt;a href=&quot;check&quot;&gt;Params::Check&lt;/a&gt; will sanity check templates, validating for errors and unknown keys. Although very useful for debugging, this can be somewhat slow in hot-code and large loops.</source>
          <target state="translated">true로 설정된 경우 &lt;a href=&quot;check&quot;&gt;Params :: Check&lt;/a&gt; 는 오류 및 알 수없는 키의 유효성을 검사하여 템플릿을 검사합니다. 디버깅에 매우 유용하지만 핫 코드 및 큰 루프에서는 다소 느려질 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="df88f116b1eff18f21bd345796868ca93d04ee66" translate="yes" xml:space="preserve">
          <source>If set to true, a crc32 checksum of the uncompressed data will be calculated. Use the &lt;code&gt;$d-&amp;gt;crc32&lt;/code&gt; method to retrieve this value.</source>
          <target state="translated">true로 설정하면 압축되지 않은 데이터의 crc32 체크섬이 계산됩니다. 이 값을 검색 하려면 &lt;code&gt;$d-&amp;gt;crc32&lt;/code&gt; 메소드를 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="bbd8aed6bbb2cb495083f75e98d7497f01edca37" translate="yes" xml:space="preserve">
          <source>If set to true, a crc32 checksum of the uncompressed data will be calculated. Use the &lt;code&gt;$i-&amp;gt;crc32&lt;/code&gt; method to retrieve this value.</source>
          <target state="translated">true로 설정하면 압축되지 않은 데이터의 crc32 체크섬이 계산됩니다. 이 값을 검색 하려면 &lt;code&gt;$i-&amp;gt;crc32&lt;/code&gt; 메소드를 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="d4a8f4d307b72654b7c09182b593e029ffb7af20" translate="yes" xml:space="preserve">
          <source>If set to true, all keys in the template that are marked as to be stored in a scalar, will also be removed from the result set.</source>
          <target state="translated">true로 설정하면 스칼라에 저장되도록 표시된 템플리트의 모든 키도 결과 세트에서 제거됩니다.</target>
        </trans-unit>
        <trans-unit id="8a9a61d55c40cdf983928fb90e5f246e820a5b49" translate="yes" xml:space="preserve">
          <source>If set to true, an adler32 checksum of the uncompressed data will be calculated. Use the &lt;code&gt;$d-&amp;gt;adler32&lt;/code&gt; method to retrieve this value.</source>
          <target state="translated">true로 설정하면 압축되지 않은 데이터의 adler32 체크섬이 계산됩니다. 이 값을 검색 하려면 &lt;code&gt;$d-&amp;gt;adler32&lt;/code&gt; 메소드를 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="a5a30a93daed908c592b28db82a1a0b5d4a5ffc0" translate="yes" xml:space="preserve">
          <source>If set to true, an adler32 checksum of the uncompressed data will be calculated. Use the &lt;code&gt;$i-&amp;gt;adler32&lt;/code&gt; method to retrieve this value.</source>
          <target state="translated">true로 설정하면 압축되지 않은 데이터의 adler32 체크섬이 계산됩니다. 이 값을 검색 하려면 &lt;code&gt;$i-&amp;gt;adler32&lt;/code&gt; 메소드를 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="dbc945146e02b49c89057b1636cf31aa2669f101" translate="yes" xml:space="preserve">
          <source>If set to true, immediately extract entries when reading them. This gives you the same memory break as the &lt;code&gt;extract_archive&lt;/code&gt; function. Note however that entries will not be read into memory, but written straight to disk. This means no &lt;code&gt;Archive::Tar::File&lt;/code&gt; objects are created for you to inspect.</source>
          <target state="translated">true로 설정하면 항목을 읽을 때 즉시 추출하십시오. 이것은 &lt;code&gt;extract_archive&lt;/code&gt; 함수 와 동일한 메모리 브레이크를 제공합니다 . 그러나 항목은 메모리로 읽히지 않고 디스크에 직접 쓰여집니다. 즉, 검사 할 &lt;code&gt;Archive::Tar::File&lt;/code&gt; 객체가 생성 되지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="8be646f7a5def96ccc7c7343df2cffa456a1c220" translate="yes" xml:space="preserve">
          <source>If set to true, no &quot;1..N&quot; header will be printed.</source>
          <target state="translated">true로 설정하면 &quot;1..N&quot;헤더가 인쇄되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="7adb95e8ec0ed6e84fcb01131c2b90c160ee5335" translate="yes" xml:space="preserve">
          <source>If set to true, this option will remove compressed data from the input buffer of the &lt;code&gt;$i-&amp;gt;inflate&lt;/code&gt; method as the inflate progresses.</source>
          <target state="translated">true로 설정하면이 옵션은 팽창이 진행됨 에 따라 &lt;code&gt;$i-&amp;gt;inflate&lt;/code&gt; 메소드 의 입력 버퍼에서 압축 된 데이터를 제거 합니다.</target>
        </trans-unit>
        <trans-unit id="d55732bd7089a68f6b5548af27b4b056d17dc65d" translate="yes" xml:space="preserve">
          <source>If set true no diagnostics will be printed. This includes calls to &lt;code&gt;diag()&lt;/code&gt; .</source>
          <target state="translated">true로 설정하면 진단이 인쇄되지 않습니다. 여기에는 &lt;code&gt;diag()&lt;/code&gt; 호출이 포함됩니다 .</target>
        </trans-unit>
        <trans-unit id="767e45d99bc3772f600dade44827bcaf3503a3c0" translate="yes" xml:space="preserve">
          <source>If set, &lt;code&gt;sources&lt;/code&gt; must be a hashref containing the names of the &lt;a href=&quot;parser/sourcehandler&quot;&gt;TAP::Parser::SourceHandler&lt;/a&gt;s to load and/or configure. The values are a hash of configuration that will be accessible to the source handlers via &lt;a href=&quot;parser/source#config_for&quot;&gt;config_for in TAP::Parser::Source&lt;/a&gt;.</source>
          <target state="translated">설정되면 &lt;code&gt;sources&lt;/code&gt; 는 로드 및 / 또는 구성 할 &lt;a href=&quot;parser/sourcehandler&quot;&gt;TAP :: Parser :: SourceHandler&lt;/a&gt; 의 이름이 포함 된 해시 참조 여야 합니다. 값은 &lt;a href=&quot;parser/source#config_for&quot;&gt;TAP :: Parser :: Source의 config_for를&lt;/a&gt; 통해 소스 핸들러가 액세스 할 수있는 구성의 해시입니다 .</target>
        </trans-unit>
        <trans-unit id="7a162adb7a0dc8b66567284e3d48459cecdcd046" translate="yes" xml:space="preserve">
          <source>If set, a directory which fails the</source>
          <target state="translated">설정된 경우 실패한 디렉토리</target>
        </trans-unit>
        <trans-unit id="41e6aaabd1216511f49764603b89114f7c2c7520" translate="yes" xml:space="preserve">
          <source>If set, should be the name of a file (in the output directory) to write the HTML index to. The default value is &quot;index.html&quot;. If you set this to a false value, no contents file will be written.</source>
          <target state="translated">설정된 경우 HTML 색인을 쓸 파일 이름 (출력 디렉토리에 있음)이어야합니다. 기본값은 &quot;index.html&quot;입니다. 이 값을 false로 설정하면 내용 파일이 기록되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="fed7ed0698b463358f79ea435791a3f79370827d" translate="yes" xml:space="preserve">
          <source>If set, the debugger goes into &lt;code&gt;NonStop&lt;/code&gt; mode and will not connect to a TTY. If interrupted (or if control goes to the debugger via explicit setting of $DB::signal or $DB::single from the Perl script), it connects to a TTY specified in the &lt;code&gt;TTY&lt;/code&gt; option at startup, or to a tty found at runtime using the &lt;code&gt;Term::Rendezvous&lt;/code&gt; module of your choice.</source>
          <target state="translated">설정된 경우 디버거는 &lt;code&gt;NonStop&lt;/code&gt; 모드 로 전환되고 TTY에 연결되지 않습니다. 중단 된 경우 (또는 Perl 스크립트에서 $ DB :: signal 또는 $ DB :: single의 명시 적 설정을 통해 제어가 디버거로 이동하는 경우) 시작시 &lt;code&gt;TTY&lt;/code&gt; 옵션에 지정된 TTY 또는 선택한 &lt;code&gt;Term::Rendezvous&lt;/code&gt; 모듈을 사용하는 런타임 .</target>
        </trans-unit>
        <trans-unit id="f19bf560504f7c9497b672610231bba49eba7830" translate="yes" xml:space="preserve">
          <source>If set, the debugger goes into non-interactive mode until interrupted, or programmatically by setting $DB::signal or $DB::single.</source>
          <target state="translated">설정된 경우 디버거는 중단 될 때까지 또는 $ DB :: signal 또는 $ DB :: single을 설정하여 프로그래밍 방식으로 비 대화식 모드로 전환됩니다.</target>
        </trans-unit>
        <trans-unit id="825ea211f8cc0b564969fbeabe2d0a330315f1a6" translate="yes" xml:space="preserve">
          <source>If set, this dumps out memory statistics after execution. If set to an integer greater than one, also dumps out memory statistics after compilation.</source>
          <target state="translated">설정하면 실행 후 메모리 통계를 덤프합니다. 1보다 큰 정수로 설정하면 컴파일 후 메모리 통계도 덤프합니다.</target>
        </trans-unit>
        <trans-unit id="8b969433f335481102ca199a1faf8cf07ca2debd" translate="yes" xml:space="preserve">
          <source>If set, this symbol indicates that only the version-specific components of a perl installation should be installed. This may be useful for making a test installation of a new version without disturbing the existing installation. Setting versiononly is equivalent to setting installperl's -v option. In particular, the non-versioned scripts and programs such as a2p, c2ph, h2xs, pod2*, and perldoc are not installed (see &lt;code&gt;INSTALL&lt;/code&gt; for a more complete list). Nor are the man pages installed. Usually, this is undef.</source>
          <target state="translated">설정된 경우이 기호는 perl 설치의 버전 별 구성 요소 만 설치해야 함을 나타냅니다. 기존 설치를 방해하지 않고 새 버전을 테스트 설치하는 데 유용 할 수 있습니다. versiononly 설정은 installperl의 -v 옵션 설정과 같습니다. 특히 a2p, c2ph, h2xs, pod2 * 및 perldoc과 같은 버전이없는 스크립트 및 프로그램은 &lt;code&gt;INSTALL&lt;/code&gt; 되지 않습니다 (자세한 내용은 INSTALL 참조 ). 매뉴얼 페이지도 설치되어 있지 않습니다. 일반적으로 이것은 정의되지 않은 것입니다.</target>
        </trans-unit>
        <trans-unit id="5be95242fd4f1700426db0866219ce183a7c4d43" translate="yes" xml:space="preserve">
          <source>If setmagic is false then no set magic will be called on the new (empty) SV. This typically means that assignment will soon follow (e.g. 'local $x = $y'), and that will handle the magic.</source>
          <target state="translated">setmagic이 false이면 새로운 (빈) SV에서 설정된 매직이 호출되지 않습니다. 이는 일반적으로 과제가 곧 따를 것 (예 : 'local $ x = $ y')을 의미하며 마술을 처리합니다.</target>
        </trans-unit>
        <trans-unit id="b7db0eb29b687c30aa2094a54d8f1f63ca4df7c5" translate="yes" xml:space="preserve">
          <source>If several symbol categories exist in &lt;code&gt;%EXPORT_TAGS&lt;/code&gt; , it's usually useful to create the utility &quot;:all&quot; to simplify &quot;use&quot; statements.</source>
          <target state="translated">&lt;code&gt;%EXPORT_TAGS&lt;/code&gt; 에 여러 심볼 범주가있는 경우 &quot;use&quot;문을 단순화하기 위해 유틸리티 &quot;: all&quot;을 만드는 것이 일반적으로 유용합니다.</target>
        </trans-unit>
        <trans-unit id="1d650df7f1b284cce9178200761c079c663691a8" translate="yes" xml:space="preserve">
          <source>If so, please try to reuse the existing modules either in whole or by inheriting useful features into a new class. If this is not practical try to get together with the module authors to work on extending or enhancing the functionality of the existing modules. A perfect example is the plethora of packages in perl4 for dealing with command line options.</source>
          <target state="translated">그렇다면 기존 모듈을 전체적으로 재사용하거나 유용한 기능을 새로운 클래스로 상속하여 시도하십시오. 이것이 실용적이지 않으면 모듈 작성자와 함께 기존 모듈의 기능을 확장하거나 향상시키는 작업을 시도하십시오. 완벽한 예는 명령 행 옵션을 처리하기위한 perl4의 많은 패키지입니다.</target>
        </trans-unit>
        <trans-unit id="dcc2c875ef26b86def7f4287ef7a97e0b0212c08" translate="yes" xml:space="preserve">
          <source>If so, that's great news; bug reports with patches are likely to receive significantly more attention and interest than those without patches. Please attach your patch to the report using the &lt;code&gt;-p&lt;/code&gt; option. When sending a patch, create it using &lt;code&gt;git format-patch&lt;/code&gt; if possible, though a unified diff created with &lt;code&gt;diff -pu&lt;/code&gt; will do nearly as well.</source>
          <target state="translated">그렇다면 좋은 소식입니다. 패치가있는 버그 보고서는 패치가없는 버그 보고서보다 훨씬 더 많은주의와 관심을받습니다. &lt;code&gt;-p&lt;/code&gt; 옵션을 사용하여 패치를 보고서에 첨부하십시오 . 패치를 보낼 때, 가능하다면 &lt;code&gt;git format-patch&lt;/code&gt; 를 사용하여 패치를 만드십시오. &lt;code&gt;diff -pu&lt;/code&gt; 로 작성된 통합 된 diff 도 거의 비슷합니다.</target>
        </trans-unit>
        <trans-unit id="e41db44860ffe2b84a712b997e64175db6318266" translate="yes" xml:space="preserve">
          <source>If some events detected in</source>
          <target state="translated">일부 이벤트가 감지 된 경우</target>
        </trans-unit>
        <trans-unit id="4a24b9aa82fff6a4581557ce8337d0476898456b" translate="yes" xml:space="preserve">
          <source>If some threads have not finished running when the main Perl thread ends, Perl will warn you about it and die, since it is impossible for Perl to clean up itself while other threads are running.</source>
          <target state="translated">주 Perl 스레드가 종료 될 때 일부 스레드가 실행을 완료하지 않으면 Perl이 다른 스레드가 실행중인 동안 자체 정리할 수 없으므로 Perl에서 경고하고 종료합니다.</target>
        </trans-unit>
        <trans-unit id="5c202d6491a5606cc9c88606232cf0104e601803" translate="yes" xml:space="preserve">
          <source>If something in a program isn&amp;rsquo;t the value you&amp;rsquo;re looking for but indicates where the value is, that&amp;rsquo;s indirection. This can be done with either &lt;b&gt;symbolic references&lt;/b&gt; or &lt;b&gt;hard&lt;/b&gt;.</source>
          <target state="translated">프로그램의 어떤 것이 당신이 찾고있는 가치가 아니지만 그 가치가 어디에 있는지를 나타내면 간접적입니다. 이것은 &lt;b&gt;기호 참조&lt;/b&gt; 나 &lt;b&gt;hard&lt;/b&gt; 로 수행 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="6d353132ec4a6837954d3ce352dc8e97cba1ae50" translate="yes" xml:space="preserve">
          <source>If something in the Perl core is marked as &lt;b&gt;deprecated&lt;/b&gt;, we may remove it from the core in the future, though we might not. Generally, backward incompatible changes will have deprecation warnings for two release cycles before being removed, but may be removed after just one cycle if the risk seems quite low or the benefits quite high.</source>
          <target state="translated">Perl 코어의 어떤 것이 &lt;b&gt;더 이상 사용되지 않는&lt;/b&gt; 것으로 표시 되면 나중에 코어에서 제거 할 수 있습니다. 일반적으로 이전 버전과 호환되지 않는 변경 사항은 제거되기 전에 두 릴리스주기에 대해 사용 중단 경고가 표시되지만 위험이 매우 낮거나 이점이 매우 높은 경우 한주기 후에 제거 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5fdc0cac0824435fe5437bd44fc271afb23e92f6" translate="yes" xml:space="preserve">
          <source>If something in the Perl core is marked as &lt;b&gt;experimental&lt;/b&gt;, we may change its behaviour, deprecate or remove it without notice. While we'll always do our best to smooth the transition path for users of experimental features, you should contact the perl5-porters mailinglist if you find an experimental feature useful and want to help shape its future.</source>
          <target state="translated">Perl 코어의 어떤 것이 &lt;b&gt;실험적인&lt;/b&gt; 것으로 표시되면 , 우리는 그 행동을 예고없이 변경하거나, 더 이상 사용하지 않거나 제거 할 수 있습니다. 실험 기능 사용자를위한 전환 경로를 매끄럽게하기 위해 항상 최선을 다하지만, 실험 기능이 유용하고 미래를 구체화하는 데 도움이 되려면 perl5-porters 메일 링리스트에 문의해야합니다.</target>
        </trans-unit>
        <trans-unit id="12083dc2cfbc1c39486c5540691a063ce5c5018f" translate="yes" xml:space="preserve">
          <source>If spaces extend into the next chunk of input text, the next chunk will be read in. Normally the current chunk will be discarded at the same time, but if</source>
          <target state="translated">공백이 입력 텍스트의 다음 청크로 확장되면 다음 청크를 읽습니다. 일반적으로 현재 청크는 동시에 버려지지만</target>
        </trans-unit>
        <trans-unit id="b6dd58d3559146e497eb5b446f27a9cb126713f8" translate="yes" xml:space="preserve">
          <source>If specified, strings are normalized before preparation of sort keys (the normalization is executed after preprocess).</source>
          <target state="translated">지정된 경우 정렬 키를 준비하기 전에 문자열이 정규화됩니다 (정규화는 사전 처리 후 실행 됨).</target>
        </trans-unit>
        <trans-unit id="c54d25c0a371a4a7533e5b6eb7a37c54566669f4" translate="yes" xml:space="preserve">
          <source>If specified, the coderef is used to preprocess each string before the formation of sort keys.</source>
          <target state="translated">지정된 경우, coderef는 정렬 키를 형성하기 전에 각 문자열을 사전 처리하는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="df742ffc92755882ac205c4e8f1710a25c417cf9" translate="yes" xml:space="preserve">
          <source>If specified, the coderef is used to rewrite lines in &lt;code&gt;table&lt;/code&gt; or &lt;code&gt;entry&lt;/code&gt; . The coderef will get each line, and then should return a rewritten line according to the UCA file format. If the coderef returns an empty line, the line will be skipped.</source>
          <target state="translated">지정된 경우 coderef는 &lt;code&gt;table&lt;/code&gt; 또는 &lt;code&gt;entry&lt;/code&gt; 의 행을 다시 쓰는 데 사용됩니다 . coderef는 각 줄을 가져온 다음 UCA 파일 형식에 따라 다시 작성된 줄을 반환해야합니다. 코드 참조가 빈 줄을 반환하면 줄을 건너 뜁니다.</target>
        </trans-unit>
        <trans-unit id="fd186f184cd201e115617cc1e9809ac56ff41627" translate="yes" xml:space="preserve">
          <source>If specified, the given string will be stripped off from the beginning of the C function name in the generated XS functions (if it starts with that prefix). This only applies to XSUBs without &lt;code&gt;CODE&lt;/code&gt; or &lt;code&gt;PPCODE&lt;/code&gt; blocks. For example, the XS:</source>
          <target state="translated">지정된 경우 지정된 문자열은 생성 된 XS 함수에서 C 함수 이름의 시작 부분에서 제거됩니다 (해당 접두어로 시작하는 경우). 이것은 &lt;code&gt;CODE&lt;/code&gt; 또는 &lt;code&gt;PPCODE&lt;/code&gt; 블록이 없는 XSUB에만 적용됩니다 . 예를 들어 XS :</target>
        </trans-unit>
        <trans-unit id="db33e17f1262611ad9b1ad5050ad6146c6b090c4" translate="yes" xml:space="preserve">
          <source>If specified, this option will disable the creation of all extra fields in the zip local and central headers. So the &lt;code&gt;exTime&lt;/code&gt; , &lt;code&gt;exUnix2&lt;/code&gt; , &lt;code&gt;exUnixN&lt;/code&gt; , &lt;code&gt;ExtraFieldLocal&lt;/code&gt; and &lt;code&gt;ExtraFieldCentral&lt;/code&gt; options will be ignored.</source>
          <target state="translated">이 옵션을 지정하면 zip 로컬 및 중앙 헤더에서 모든 추가 필드를 만들 수 없습니다. 따라서 &lt;code&gt;exTime&lt;/code&gt; , &lt;code&gt;exUnix2&lt;/code&gt; , &lt;code&gt;exUnixN&lt;/code&gt; , &lt;code&gt;ExtraFieldLocal&lt;/code&gt; 및 &lt;code&gt;ExtraFieldCentral&lt;/code&gt; 옵션은 무시됩니다.</target>
        </trans-unit>
        <trans-unit id="4d0066c7ecc8871ce3a62f9b83ef61508d6113e7" translate="yes" xml:space="preserve">
          <source>If specified, this option will force the creation of the smallest possible compliant gzip header (which is exactly 10 bytes long) as defined in RFC 1952.</source>
          <target state="translated">이 옵션을 지정하면 RFC 1952에 정의 된대로 가능한 가장 작은 호환 가능한 gzip 헤더 (정확하게 10 바이트 길이)를 작성하게됩니다.</target>
        </trans-unit>
        <trans-unit id="74b346bb75048f3d43315e1f91c059eb29d865aa" translate="yes" xml:space="preserve">
          <source>If speed is of little concern, the common idiom uses grep in scalar context (which returns the number of items that passed its condition) to traverse the entire list. This does have the benefit of telling you how many matches it found, though.</source>
          <target state="translated">속도가 중요하지 않은 경우 공통 관용구는 스칼라 컨텍스트에서 grep을 사용하여 (조건을 통과 한 항목 수를 리턴 함) 전체 목록을 탐색합니다. 그래도 일치하는 항목 수를 알려주는 이점이 있습니다.</target>
        </trans-unit>
        <trans-unit id="8029f3ea6d316f66b8a86b9af29af453cce204da" translate="yes" xml:space="preserve">
          <source>If start_color is non-null then it will be inserted after the opening quote (if there is one) but before the escaped text. If end_color is non-null then it will be inserted after the escaped text but before any quotes or ellipses.</source>
          <target state="translated">start_color가 널이 아닌 경우 여는 인용 부호 (있는 경우) 뒤에 이스케이프 된 텍스트 앞에 삽입됩니다. end_color가 널이 아닌 경우 이스케이프 된 텍스트 뒤에 따옴표 나 생략 부호 앞에 삽입됩니다.</target>
        </trans-unit>
        <trans-unit id="741bc8e54000bbf6547a93a37e27f9bd7b7bf22e" translate="yes" xml:space="preserve">
          <source>If straightforward stream-based parsing wont meet your needs (as is likely the case for tasks such as translating PODs into structured markup languages like HTML and XML) then you may need to take the tree-based approach. Rather than doing everything in one pass and calling the &lt;b&gt;interpolate()&lt;/b&gt; method to expand sequences into text, it may be desirable to instead create a parse-tree using the &lt;b&gt;parse_text()&lt;/b&gt; method to return a tree-like structure which may contain an ordered list of children (each of which may be a text-string, or a similar tree-like structure).</source>
          <target state="translated">스트림 기반 구문 분석이 사용자의 요구를 충족시키지 못하면 (POD를 HTML 및 XML과 같은 구조화 된 마크 업 언어로 변환하는 것과 같은 작업의 경우처럼) 트리 기반 접근 방식을 사용해야합니다. 한 번에 모든 작업을 수행하고 &lt;b&gt;interpolate ()&lt;/b&gt; 메서드를 호출하여 시퀀스를 텍스트로 확장하는 대신 &lt;b&gt;parse_text ()&lt;/b&gt; 메서드를 사용하여 구문 분석 트리를 만들어 정렬 된 목록을 포함 할 수있는 트리와 같은 구조를 반환하는 것이 &lt;b&gt;좋습니다.&lt;/b&gt; 어린이 (각각 텍스트 문자열 또는 유사한 나무와 같은 구조 일 수 있음).</target>
        </trans-unit>
        <trans-unit id="5d14b7e2a788098ee234bfc1585ff4767dfdaee2" translate="yes" xml:space="preserve">
          <source>If subroutine signatures are enabled (see &lt;a href=&quot;#Signatures&quot;&gt;Signatures&lt;/a&gt;), then the shorter PROTO syntax is unavailable, because it would clash with signatures. In that case, a prototype can only be declared in the form of an attribute.</source>
          <target state="translated">서브 루틴 서명을 사용하는 경우 ( &lt;a href=&quot;#Signatures&quot;&gt;서명&lt;/a&gt; 참조 ) 더 짧은 PROTO 구문은 서명과 충돌하므로 사용할 수 없습니다. 이 경우 프로토 타입은 속성 형식으로 만 선언 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="42c7d01f7359f4959eaf7c155ab3009451137cea" translate="yes" xml:space="preserve">
          <source>If successful, &lt;code&gt;$i&lt;/code&gt; will hold the inflation object and &lt;code&gt;$status&lt;/code&gt; will be &lt;code&gt;Z_OK&lt;/code&gt; .</source>
          <target state="translated">성공하면 &lt;code&gt;$i&lt;/code&gt; 는 인플레이션 객체를 보유하고 &lt;code&gt;$status&lt;/code&gt; 는 &lt;code&gt;Z_OK&lt;/code&gt; 가 됩니다.</target>
        </trans-unit>
        <trans-unit id="ec38a973765ca012bc6fc104f4b8ef70937c9614" translate="yes" xml:space="preserve">
          <source>If successful, &lt;code&gt;$i&lt;/code&gt; will hold the inflation stream and &lt;code&gt;$status&lt;/code&gt; will be &lt;code&gt;Z_OK&lt;/code&gt; .</source>
          <target state="translated">성공하면 &lt;code&gt;$i&lt;/code&gt; 는 인플레이션 스트림을 보유하고 &lt;code&gt;$status&lt;/code&gt; 는 &lt;code&gt;Z_OK&lt;/code&gt; 가 됩니다.</target>
        </trans-unit>
        <trans-unit id="f34b524a05a94eda9eec45a5e52e923221e9853a" translate="yes" xml:space="preserve">
          <source>If successful, it returns the in-memory gzip file. Otherwise it returns &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; and the &lt;code&gt;$gzerrno&lt;/code&gt; variable will store the zlib error code.</source>
          <target state="translated">성공하면 메모리 내 gzip 파일을 반환합니다. 그렇지 않으면 &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; 를 반환 하고 &lt;code&gt;$gzerrno&lt;/code&gt; 변수는 zlib 오류 코드를 저장합니다.</target>
        </trans-unit>
        <trans-unit id="a4a46b7cfb2406db4688f3a0ac9d424f4865a652" translate="yes" xml:space="preserve">
          <source>If successful, it returns the uncompressed gzip file. Otherwise it returns &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; and the &lt;code&gt;$gzerrno&lt;/code&gt; variable will store the zlib error code.</source>
          <target state="translated">성공하면 압축되지 않은 gzip 파일을 반환합니다. 그렇지 않으면 &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; 를 반환 하고 &lt;code&gt;$gzerrno&lt;/code&gt; 변수는 zlib 오류 코드를 저장합니다.</target>
        </trans-unit>
        <trans-unit id="0f77490ec0c061ac3ae6e48aedaf1d41d413b95c" translate="yes" xml:space="preserve">
          <source>If successful, it will return the initialised compression object, &lt;code&gt;$z&lt;/code&gt; and a &lt;code&gt;$status&lt;/code&gt; of &lt;code&gt;BZ_OK&lt;/code&gt; in a list context. In scalar context it returns the deflation object, &lt;code&gt;$z&lt;/code&gt; , only.</source>
          <target state="translated">성공적인 경우, 초기화 압축 개체를 반환 &lt;code&gt;$z&lt;/code&gt; 와 &lt;code&gt;$status&lt;/code&gt; 의 &lt;code&gt;BZ_OK&lt;/code&gt; 목록 맥락에서입니다. 스칼라 컨텍스트에서는 디플레이션 객체 &lt;code&gt;$z&lt;/code&gt; 만 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="003d593630b18abe30c9939f8d44076e1ce90807" translate="yes" xml:space="preserve">
          <source>If successful, it will return the initialised deflation object, &lt;code&gt;$d&lt;/code&gt; and a &lt;code&gt;$status&lt;/code&gt; of &lt;code&gt;Z_OK&lt;/code&gt; in a list context. In scalar context it returns the deflation object, &lt;code&gt;$d&lt;/code&gt; , only.</source>
          <target state="translated">성공적인 경우, 초기화 디플레이션 개체를 반환 &lt;code&gt;$d&lt;/code&gt; 및 &lt;code&gt;$status&lt;/code&gt; 의 &lt;code&gt;Z_OK&lt;/code&gt; 목록 맥락에서입니다. 스칼라 컨텍스트에서는 디플레이션 객체 &lt;code&gt;$d&lt;/code&gt; 만 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="7f86208486cf7be6093bb8b7191e306d09fb04dc" translate="yes" xml:space="preserve">
          <source>If successful, it will return the initialised deflation stream, &lt;code&gt;$d&lt;/code&gt; and &lt;code&gt;$status&lt;/code&gt; of &lt;code&gt;Z_OK&lt;/code&gt; in a list context. In scalar context it returns the deflation stream, &lt;code&gt;$d&lt;/code&gt; , only.</source>
          <target state="translated">성공적인 경우, 초기화 디플레이션 스트림, 반환 &lt;code&gt;$d&lt;/code&gt; 및 &lt;code&gt;$status&lt;/code&gt; 의 &lt;code&gt;Z_OK&lt;/code&gt; 목록 맥락에서입니다. 스칼라 컨텍스트에서는 디플레이션 스트림 &lt;code&gt;$d&lt;/code&gt; 만 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="05d2c70da3dce90528345981e79d77f52c5f5ddb" translate="yes" xml:space="preserve">
          <source>If successful, it will return the initialised uncompression object, &lt;code&gt;$z&lt;/code&gt; and a &lt;code&gt;$status&lt;/code&gt; of &lt;code&gt;BZ_OK&lt;/code&gt; in a list context. In scalar context it returns the deflation object, &lt;code&gt;$z&lt;/code&gt; , only.</source>
          <target state="translated">성공적인 경우는 초기화 비 압축 개체를 반환 &lt;code&gt;$z&lt;/code&gt; 와 &lt;code&gt;$status&lt;/code&gt; 의 &lt;code&gt;BZ_OK&lt;/code&gt; 목록 맥락에서입니다. 스칼라 컨텍스트에서는 디플레이션 객체 &lt;code&gt;$z&lt;/code&gt; 만 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="9905dac4184f6f7193dddf39eab6d02ad4540f03" translate="yes" xml:space="preserve">
          <source>If supplied with an argument that can't be a code point, &lt;code&gt;charblock()&lt;/code&gt; tries to do the opposite and interpret the argument as an old-style block name. On an ASCII platform, the return value is a</source>
          <target state="translated">코드 포인트가 될 수없는 인수가 제공되는 경우 &lt;code&gt;charblock()&lt;/code&gt; 은 반대로 수행하여 인수를 구식 블록 이름으로 해석합니다. ASCII 플랫폼에서 반환 값은</target>
        </trans-unit>
        <trans-unit id="343b1f1d2e0b0c3a0e2a3dffed0083feca7d527c" translate="yes" xml:space="preserve">
          <source>If supplied with an argument that can't be a code point, charscript() tries to do the opposite and interpret the argument as a script name. The return value is a</source>
          <target state="translated">코드 포인트가 될 수없는 인수가 제공되면, charscript ()는 반대를 수행하고 인수를 스크립트 이름으로 해석하려고 시도합니다. 반환 값은</target>
        </trans-unit>
        <trans-unit id="608c69ec5dc593b8e31469808e911c9b8c28fab1" translate="yes" xml:space="preserve">
          <source>If tcsh is your login shell then use the setenv command.</source>
          <target state="translated">tcsh가 로그인 쉘인 경우 setenv 명령을 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="6722301f4d6d5b294f3eee46d693b203a67e97d7" translate="yes" xml:space="preserve">
          <source>If that doesn't make much sense, consider the analogy of a command pipeline. Say you have a shell script stored in the compressed file</source>
          <target state="translated">이것이 의미가 없다면 명령 파이프 라인의 비유를 고려하십시오. 압축 파일에 쉘 스크립트가 저장되어 있다고 가정하십시오.</target>
        </trans-unit>
        <trans-unit id="0ce337d0a942d7a20e0ccbeff20a1fe0816cdba5" translate="yes" xml:space="preserve">
          <source>If that doesn't work (it relies on features of your stdio implementation), then you need something more like this:</source>
          <target state="translated">그래도 작동하지 않으면 (stdio 구현의 기능에 의존) 다음과 같은 것이 더 필요합니다.</target>
        </trans-unit>
        <trans-unit id="ace9cde0327f63e0372278440efb1605dee92be3" translate="yes" xml:space="preserve">
          <source>If that doesn't work (some I/O implementations are particularly cantankerous), you might need something like this:</source>
          <target state="translated">그래도 작동하지 않으면 (일부 I / O 구현은 특히 무시할 수 있습니다) 다음과 같은 것이 필요할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="76b21d1151e484221dbc92ea1c2c56d3ec4082a9" translate="yes" xml:space="preserve">
          <source>If that doesn't work, give up on your stdio package and use sysread.</source>
          <target state="translated">그래도 작동하지 않으면 stdio 패키지를 포기하고 sysread를 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="0580b926aa13464eaf5222ef23bd075e2a2e806d" translate="yes" xml:space="preserve">
          <source>If that doesn't work, try seeking to a different part of the file and then back.</source>
          <target state="translated">그래도 문제가 해결되지 않으면 파일의 다른 부분을 찾은 다음 다시 시도하십시오.</target>
        </trans-unit>
        <trans-unit id="b4eb30982662b9e20db4ab3ae1666e6a76a6e58a" translate="yes" xml:space="preserve">
          <source>If that doesn't work, try seeking to a different part of the file, reading something, and then seeking back.</source>
          <target state="translated">그래도 문제가 해결되지 않으면 파일의 다른 부분을 찾아서 무언가를 읽은 다음 다시 찾아보십시오.</target>
        </trans-unit>
        <trans-unit id="4c63d398b08eb5cb7f3f37514cbe92856008dc42" translate="yes" xml:space="preserve">
          <source>If that gives too much output every day, you may want to watch only for three modules. You can write</source>
          <target state="translated">매일 너무 많은 출력을 제공하는 경우 세 개의 모듈 만 감시 할 수 있습니다. 당신은 쓸 수 있습니다</target>
        </trans-unit>
        <trans-unit id="0c73f5392dc820a97b0a4426cb998de73cb28f26" translate="yes" xml:space="preserve">
          <source>If that warnings category has been set to &quot;FATAL&quot; in the calling module then die. Otherwise return.</source>
          <target state="translated">호출 모듈에서 해당 경고 범주가 &quot;FATAL&quot;로 설정되어 있으면 죽습니다. 그렇지 않으면 돌아옵니다.</target>
        </trans-unit>
        <trans-unit id="313f3cd86007469b883802f17e39affb3f8c8794" translate="yes" xml:space="preserve">
          <source>If that warnings category has been set to &quot;FATAL&quot; in the scope where &lt;code&gt;$object&lt;/code&gt; is first used then die. Otherwise return.</source>
          <target state="translated">&lt;code&gt;$object&lt;/code&gt; 가 처음 사용되는 범위에서 해당 경고 범주가 &quot;FATAL&quot;로 설정되어 있으면 죽습니다. 그렇지 않으면 돌아옵니다.</target>
        </trans-unit>
        <trans-unit id="3d9b7696c9777c3fdef5f5f1690ef14ee23382d9" translate="yes" xml:space="preserve">
          <source>If the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4493cf703f913ddbd099cc80db075e294c3617b1" translate="yes" xml:space="preserve">
          <source>If the &quot;external&quot; protocol is specified, the ping() method attempts to use the &lt;code&gt;Net::Ping::External&lt;/code&gt; module to ping the remote host. &lt;code&gt;Net::Ping::External&lt;/code&gt; interfaces with your system's default &lt;code&gt;ping&lt;/code&gt; utility to perform the ping, and generally produces relatively accurate results. If &lt;code&gt;Net::Ping::External&lt;/code&gt; if not installed on your system, specifying the &quot;external&quot; protocol will result in an error.</source>
          <target state="translated">&quot;외부&quot;프로토콜이 지정된 경우 ping () 메소드는 &lt;code&gt;Net::Ping::External&lt;/code&gt; 모듈을 사용하여 원격 호스트를 ping합니다. &lt;code&gt;Net::Ping::External&lt;/code&gt; 을 수행하기 위해 시스템의 기본 &lt;code&gt;ping&lt;/code&gt; 유틸리티 와 외부 인터페이스 를 수행하며 일반적으로 비교적 정확한 결과를 생성합니다. 경우 &lt;code&gt;Net::Ping::External&lt;/code&gt; 시스템에 설치하지 않을 경우는 &quot;외부&quot;프로토콜 오류가 발생합니다 지정.</target>
        </trans-unit>
        <trans-unit id="b022b01a378125712b4875c54365686882089f63" translate="yes" xml:space="preserve">
          <source>If the &quot;icmp&quot; protocol is specified, the ping() method sends an icmp echo message to the remote host, which is what the UNIX ping program does. If the echoed message is received from the remote host and the echoed information is correct, the remote host is considered reachable. Specifying the &quot;icmp&quot; protocol requires that the program be run as root or that the program be setuid to root.</source>
          <target state="translated">&quot;icmp&quot;프로토콜이 지정된 경우 ping () 메소드는 UNIX ping 프로그램이 수행하는 원격 호스트에 icmp echo 메시지를 보냅니다. 반향 메시지가 원격 호스트로부터 수신되고 반향 정보가 올 바르면 원격 호스트에 도달 할 수있는 것으로 간주됩니다. &quot;icmp&quot;프로토콜을 지정하려면 프로그램을 root로 실행하거나 프로그램을 root로 설정해야합니다.</target>
        </trans-unit>
        <trans-unit id="c3280089081e0a65bf27928777cbd13d99f6f66b" translate="yes" xml:space="preserve">
          <source>If the &quot;syn&quot; protocol is specified, the ping() method will only send a TCP SYN packet to the remote host then immediately return. If the syn packet was sent successfully, it will return a true value, otherwise it will return false. NOTE: Unlike the other protocols, the return value does NOT determine if the remote host is alive or not since the full TCP three-way handshake may not have completed yet. The remote host is only considered reachable if it receives a TCP ACK within the timeout specified. To begin waiting for the ACK packets, use the ack() method as explained below. Use the &quot;syn&quot; protocol instead the &quot;tcp&quot; protocol to determine reachability of multiple destinations simultaneously by sending parallel TCP SYN packets. It will not block while testing each remote host. demo/fping is provided in this distribution to demonstrate the &quot;syn&quot; protocol as an example. This protocol does not require any special privileges.</source>
          <target state="translated">&quot;syn&quot;프로토콜이 지정되면 ping () 메소드는 TCP SYN 패킷 만 원격 호스트로 전송 한 후 즉시 리턴합니다. syn 패킷이 성공적으로 전송되면 true 값을 반환하고, 그렇지 않으면 false를 반환합니다. 참고 : 다른 프로토콜과 달리 반환 값은 전체 TCP 3 방향 핸드 셰이크가 아직 완료되지 않았기 때문에 원격 호스트가 활성 상태인지 여부를 결정하지 않습니다. 원격 호스트는 지정된 시간 초과 내에 TCP ACK를 수신 한 경우에만 연결할 수있는 것으로 간주됩니다. ACK 패킷 대기를 시작하려면 아래 설명 된대로 ack () 메소드를 사용하십시오. 병렬 TCP SYN 패킷을 전송하여 여러 대상의 도달 가능성을 동시에 판별하려면 &quot;tcp&quot;프로토콜 대신 &quot;syn&quot;프로토콜을 사용하십시오. 각 원격 호스트를 테스트하는 동안 차단되지 않습니다.데모 / fping은이 배포판에 제공되어 &quot;syn&quot;프로토콜을 예로 들어 설명합니다. 이 프로토콜에는 특별한 권한이 필요하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="318d6b49d6250a4816190433cf297845eb70cba7" translate="yes" xml:space="preserve">
          <source>If the $crc parameters is &lt;code&gt;&lt;a href=&quot;../../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt;, the crc value will be reset.</source>
          <target state="translated">$ crc 매개 변수가 &lt;code&gt;&lt;a href=&quot;../../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; 인 경우 crc 값이 재설정됩니다.</target>
        </trans-unit>
        <trans-unit id="abcc06c7fad286b05b36114515df89ab3f899db0" translate="yes" xml:space="preserve">
          <source>If the $crc parameters is &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt;, the crc value will be reset.</source>
          <target state="translated">$ crc 매개 변수가 &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; 인 경우 crc 값이 재설정됩니다.</target>
        </trans-unit>
        <trans-unit id="302e31c3384df8bb8c31ef52a9d8291c6e65b38e" translate="yes" xml:space="preserve">
          <source>If the $must_be_file argument is provided and is TRUE, then return &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; unless the image looks like it belongs to a file dump.</source>
          <target state="translated">$ must_be_file 인수가 제공되고 TRUE 인 경우 이미지가 파일 덤프에 속하는 것처럼 보이지 않으면 &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; 를 리턴 하십시오.</target>
        </trans-unit>
        <trans-unit id="865165ad77b0593f721d466f6d0ebabfe1d34482" translate="yes" xml:space="preserve">
          <source>If the $string is &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt;, then &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; is returned.</source>
          <target state="translated">$ string이 &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; 이면 &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; 가 리턴됩니다.</target>
        </trans-unit>
        <trans-unit id="076c07280263c9d15e3255695b14d837c538bc87" translate="yes" xml:space="preserve">
          <source>If the &amp;lt;$input_filename_or_reference&amp;gt; parameter is a simple scalar, it is assumed to be a filename. This file will be opened for reading and the input data will be read from it.</source>
          <target state="translated">&amp;lt;$ input_filename_or_reference&amp;gt; 매개 변수가 단순 스칼라 인 경우 파일 이름 인 것으로 가정합니다. 이 파일은 읽기 위해 열리고 입력 데이터를 읽습니다.</target>
        </trans-unit>
        <trans-unit id="e6e87357913d48be4073006d8b0866ceef5457d5" translate="yes" xml:space="preserve">
          <source>If the 'name' is '&amp;amp;' the corresponding entry in the PAD is a CV representing a possible closure.</source>
          <target state="translated">'name'이 '&amp;amp;'인 경우 PAD의 해당 항목은 가능한 폐쇄를 나타내는 CV입니다.</target>
        </trans-unit>
        <trans-unit id="45cb5ded2282f7dcd41dd84a212cb40770ba3961" translate="yes" xml:space="preserve">
          <source>If the &lt;b&gt;-W&lt;/b&gt; flag is used on the command line, it will enable all warnings throughout the program regardless of whether warnings were disabled locally using &lt;code&gt;&lt;a href=&quot;functions/no&quot;&gt;no&lt;/a&gt; warnings&lt;/code&gt; or &lt;code&gt;$^W =0&lt;/code&gt; . This includes all files that get included via &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/require&quot;&gt;require&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;functions/do&quot;&gt;do&lt;/a&gt;&lt;/code&gt;. Think of it as the Perl equivalent of the &quot;lint&quot; command.</source>
          <target state="translated">경우] &lt;b&gt;-W&lt;/b&gt; 플래그는 명령 라인에 사용되며, 관계없이 경고 로컬 중지 사용하지되었는지의 과정에 걸쳐 모든 경고있게 &lt;code&gt;&lt;a href=&quot;functions/no&quot;&gt;no&lt;/a&gt; warnings&lt;/code&gt; 또는 &lt;code&gt;$^W =0&lt;/code&gt; . 여기에는 &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;functions/require&quot;&gt;require&lt;/a&gt;&lt;/code&gt; 또는 &lt;code&gt;&lt;a href=&quot;functions/do&quot;&gt;do&lt;/a&gt;&lt;/code&gt; 통해 포함되는 모든 파일이 포함됩니다 . &quot;lint&quot;명령과 동등한 Perl로 생각하십시오.</target>
        </trans-unit>
        <trans-unit id="544ad5b88e657a2b04055790eb69377a583771e6" translate="yes" xml:space="preserve">
          <source>If the &lt;b&gt;ExtUtils::Embed&lt;/b&gt; module isn't part of your Perl distribution, you can retrieve it from &lt;a href=&quot;http://www.perl.com/perl/CPAN/modules/by-module/ExtUtils/&quot;&gt;http://www.perl.com/perl/CPAN/modules/by-module/ExtUtils/&lt;/a&gt; (If this documentation came from your Perl distribution, then you're running 5.004 or better and you already have it.)</source>
          <target state="translated">는 IF &lt;b&gt;위한 ExtUtils :: 삽입&lt;/b&gt; 모듈은에서를 검색 할 수 있습니다, 당신의 펄 배포판의 일부가 아닌 &lt;a href=&quot;http://www.perl.com/perl/CPAN/modules/by-module/ExtUtils/&quot;&gt;http://www.perl.com/perl/CPAN/modules/by-module/ExtUtils/&lt;/a&gt; 이 문서에서 제공된 경우 (당신의 펄 배포판, 5.004 이상을 실행 중이며 이미 가지고 있습니다.)</target>
        </trans-unit>
        <trans-unit id="40e97ddfc26315857071022b6a58a8c5330f9bda" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;&quot;-S&quot;&lt;/code&gt; or &lt;code&gt;-&quot;S&quot;&lt;/code&gt; switch is present</source>
          <target state="translated">는 IF &lt;code&gt;&quot;-S&quot;&lt;/code&gt; 또는 &lt;code&gt;-&quot;S&quot;&lt;/code&gt; 스위치가 존재</target>
        </trans-unit>
        <trans-unit id="bcfb6b5f36fe9b097b6d4cfdd0d5b8347d4498d3" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;#!&lt;/code&gt; line does not contain the word &quot;perl&quot; nor the word &quot;indir&quot; the program named after the &lt;code&gt;#!&lt;/code&gt; is executed instead of the Perl interpreter. This is slightly bizarre, but it helps people on machines that don't do &lt;code&gt;#!&lt;/code&gt; , because they can tell a program that their SHELL is</source>
          <target state="translated">경우] &lt;code&gt;#!&lt;/code&gt; line에는 단어 &quot;perl&quot;이나 단어 &quot;indir&quot;이 포함되지 않습니다 &lt;code&gt;#!&lt;/code&gt; Perl 인터프리터 대신 실행됩니다. 이것은 약간 기괴하지만, &lt;code&gt;#!&lt;/code&gt; 를하지 않는 기계를 사용하는 사람들에게 도움이됩니다 ! 프로그램에 SHELL이 있음을 알릴 수 있기 때문에</target>
        </trans-unit>
        <trans-unit id="263d47f71006c52e232d04a65727d383732b439a" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;$Encode::Guess::NoUTFAutoGuess&lt;/code&gt; variable is set to a true value, no heuristics will be applied to UTF8/16/32, and the result will be limited to the suspects and &lt;code&gt;ascii&lt;/code&gt; .</source>
          <target state="translated">경우] &lt;code&gt;$Encode::Guess::NoUTFAutoGuess&lt;/code&gt; 변수가 참 값으로 설정되고, 어떠한 추론는 UTF8 / 16 / (32)에 적용되지 않으며, 그 결과는 용의자 한정한다 &lt;code&gt;ascii&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="4ad3f883582e4c647a3748b90c080c6161d8d898" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;$input&lt;/code&gt; parameter is a filehandle, the compressed data will be read from it. The string '-' can be used as an alias for standard input.</source>
          <target state="translated">경우] &lt;code&gt;$input&lt;/code&gt; 파라미터는 핸들이며, 압축 데이터는 그로부터 판독 될 것이다. 문자열 '-'는 표준 입력의 별명으로 사용될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="7b21ca0ba17da1de5557b8c2561a39c672e345ba" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;$input&lt;/code&gt; parameter is a scalar, it is assumed to be a filename. This file will be opened for reading and the compressed data will be read from it.</source>
          <target state="translated">경우] &lt;code&gt;$input&lt;/code&gt; 매개 변수는 스칼라이고, 파일명 것으로 가정된다. 이 파일은 읽기 위해 열리고 압축 된 데이터를 읽습니다.</target>
        </trans-unit>
        <trans-unit id="8c806bbadc7d9dce5be50aca2c285d39455523f0" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;$input_filename_or_reference&lt;/code&gt; parameter is a filehandle, the input data will be read from it. The string '-' can be used as an alias for standard input.</source>
          <target state="translated">는 IF &lt;code&gt;$input_filename_or_reference&lt;/code&gt; 매개 변수는 파일 핸들이며, 입력 데이터는 그것에서 읽을 수 있습니다. 문자열 '-'는 표준 입력의 별명으로 사용될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="573972f31f94bcc5ce697159aca1ad87294adc22" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;$input_filename_or_reference&lt;/code&gt; parameter is any other type, &lt;code&gt;&lt;a href=&quot;../../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; will be returned.</source>
          <target state="translated">는 IF &lt;code&gt;$input_filename_or_reference&lt;/code&gt; 매개 변수는 다른 유형, &lt;code&gt;&lt;a href=&quot;../../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="6f4cccbcdf0c65cc8f40030797afae3d268325f9" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;$need&lt;/code&gt; argument is given then it will check that the current version (as defined by the $VERSION variable in the package) is greater than or equal to &lt;code&gt;$need&lt;/code&gt; ; it will die if this is not the case. This method is called automatically by the &lt;code&gt;VERSION&lt;/code&gt; form of &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">경우] &lt;code&gt;$need&lt;/code&gt; 인수가 지정되어 그것이 (패키지의 $ VERSION 변수에 의해 정의 된 바와 같이) 현재의 버전과 동일하거나보다 큰 것으로 확인한다 &lt;code&gt;$need&lt;/code&gt; ; 그렇지 않은 경우 사망합니다. 이 메소드는 &lt;code&gt;VERSION&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt;&lt;/code&gt; 형식에 의해 자동으로 호출됩니다 .</target>
        </trans-unit>
        <trans-unit id="4e612a8de15e6e3ebce7b57945845f8b7dc29222" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;$output&lt;/code&gt; parameter is a filehandle, the compressed data will be written to it. The string '-' can be used as an alias for standard output.</source>
          <target state="translated">경우] &lt;code&gt;$output&lt;/code&gt; 파라미터는 핸들이며, 압축 데이터가 기록된다. 문자열 '-'는 표준 출력의 별명으로 사용될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ca1b12c1cf4a15c9b6156dfb74283d87ea201fd5" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;$output&lt;/code&gt; parameter is a simple scalar, it is assumed to be a filename. This file will be opened for writing and the compressed data will be written to it.</source>
          <target state="translated">경우] &lt;code&gt;$output&lt;/code&gt; 파라미터 단순한 스칼라이를 파일명 것으로 가정된다. 이 파일은 쓰기 위해 열리고 압축 된 데이터가 기록됩니다.</target>
        </trans-unit>
        <trans-unit id="59757227a4fe8fdd27a95b595bd3ff8c8a163939" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;$output&lt;/code&gt; parameter is any other type, &lt;code&gt;IO::Compress::Bzip2&lt;/code&gt; ::new will return undef.</source>
          <target state="translated">는 IF &lt;code&gt;$output&lt;/code&gt; 매개 변수는 다른 유형 인, &lt;code&gt;IO::Compress::Bzip2&lt;/code&gt; undef를 반환합니다 :: 새.</target>
        </trans-unit>
        <trans-unit id="cadc0cd9a0990edba8eef6811ffbf43a8f495bbc" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;$output&lt;/code&gt; parameter is any other type, &lt;code&gt;IO::Compress::Deflate&lt;/code&gt; ::new will return undef.</source>
          <target state="translated">는 IF &lt;code&gt;$output&lt;/code&gt; 매개 변수는 다른 유형 인, &lt;code&gt;IO::Compress::Deflate&lt;/code&gt; :: 새가 undef를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="3e714bc9d0ca60a68f45566881bf3e6145bc1ce5" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;$output&lt;/code&gt; parameter is any other type, &lt;code&gt;IO::Compress::Gzip&lt;/code&gt; ::new will return undef.</source>
          <target state="translated">는 IF &lt;code&gt;$output&lt;/code&gt; 매개 변수는 다른 유형 인, &lt;code&gt;IO::Compress::Gzip&lt;/code&gt; undef를 반환합니다 :: 새.</target>
        </trans-unit>
        <trans-unit id="876928fea8ebdaa591df8075f9c404fb23d04a28" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;$output&lt;/code&gt; parameter is any other type, &lt;code&gt;IO::Compress::RawDeflate&lt;/code&gt; ::new will return undef.</source>
          <target state="translated">는 IF &lt;code&gt;$output&lt;/code&gt; 매개 변수는 다른 유형 인, &lt;code&gt;IO::Compress::RawDeflate&lt;/code&gt; :: undef를 반환합니다 새.</target>
        </trans-unit>
        <trans-unit id="38552f9e6ec9c67c09d8bddc8275dd8bdd5d8803" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;$output&lt;/code&gt; parameter is any other type, &lt;code&gt;IO::Compress::Zip&lt;/code&gt; ::new will return undef.</source>
          <target state="translated">는 IF &lt;code&gt;$output&lt;/code&gt; 매개 변수는 다른 유형이다 &lt;code&gt;IO::Compress::Zip&lt;/code&gt; :: 새가 undef를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="cc18113fea92f93f29a91b56f7f76e4dd3fc2c3e" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;$output_filename_or_reference&lt;/code&gt; parameter is a filehandle, the compressed data will be written to it. The string '-' can be used as an alias for standard output.</source>
          <target state="translated">는 IF &lt;code&gt;$output_filename_or_reference&lt;/code&gt; 매개 변수는 파일 핸들이며, 압축 된 데이터가 기록됩니다. 문자열 '-'는 표준 출력의 별명으로 사용될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b000e8d3bf3971a53c3d271eb802381bc6b99814" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;$output_filename_or_reference&lt;/code&gt; parameter is a filehandle, the uncompressed data will be written to it. The string '-' can be used as an alias for standard output.</source>
          <target state="translated">는 IF &lt;code&gt;$output_filename_or_reference&lt;/code&gt; 매개 변수는 파일 핸들이며, 압축되지 않은 데이터가 기록됩니다. 문자열 '-'는 표준 출력의 별명으로 사용될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="4843925dd2f30aabd060449fee92e5566394585d" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;$output_filename_or_reference&lt;/code&gt; parameter is a simple scalar, it is assumed to be a filename. This file will be opened for writing and the compressed data will be written to it.</source>
          <target state="translated">는 IF &lt;code&gt;$output_filename_or_reference&lt;/code&gt; 매개 변수는 간단한 스칼라, 파일 이름으로 간주됩니다. 이 파일은 쓰기 위해 열리고 압축 된 데이터가 기록됩니다.</target>
        </trans-unit>
        <trans-unit id="82c61471bec0e7ab85ea6d51b841a7cd924bb91c" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;$output_filename_or_reference&lt;/code&gt; parameter is a simple scalar, it is assumed to be a filename. This file will be opened for writing and the uncompressed data will be written to it.</source>
          <target state="translated">는 IF &lt;code&gt;$output_filename_or_reference&lt;/code&gt; 매개 변수는 간단한 스칼라, 파일 이름으로 간주됩니다. 이 파일은 쓰기 위해 열리고 압축되지 않은 데이터가 기록됩니다.</target>
        </trans-unit>
        <trans-unit id="171f6debdc3c19e16dbddc9b4ccb5eb09a1f9e1d" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;$output_filename_or_reference&lt;/code&gt; parameter is any other type, &lt;code&gt;&lt;a href=&quot;../../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; will be returned.</source>
          <target state="translated">는 IF &lt;code&gt;$output_filename_or_reference&lt;/code&gt; 매개 변수는 다른 유형, &lt;code&gt;&lt;a href=&quot;../../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="2259a2e974894cbf8831f8e74de6dee67d652d9c" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;$regexp&lt;/code&gt; variable contains a code expression, the user could then execute arbitrary Perl code. For instance, some joker could search for &lt;code&gt;&lt;a href=&quot;functions/system&quot;&gt;system&lt;/a&gt;('rm -rf *');&lt;/code&gt; to erase your files. In this sense, the combination of interpolation and code expressions</source>
          <target state="translated">는 IF &lt;code&gt;$regexp&lt;/code&gt; 변수가 코드 식을 포함, 사용자는 임의의 펄 코드를 실행할 수 있습니다. 예를 들어, 일부 조커는 &lt;code&gt;&lt;a href=&quot;functions/system&quot;&gt;system&lt;/a&gt;('rm -rf *');&lt;/code&gt; 검색 할 수 있습니다 ( 'rm -rf *'); 파일을 지우려면 이런 의미에서 보간과 코드 표현식의 조합</target>
        </trans-unit>
        <trans-unit id="cead10e67b406c29ab565d567b9609063d5776ca" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;$z&lt;/code&gt; object is associated with a buffer, this method will return &lt;code&gt;&lt;a href=&quot;../../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">경우] &lt;code&gt;$z&lt;/code&gt; 오브젝트 버퍼와 관련되며,이 방법은 리턴 &lt;code&gt;&lt;a href=&quot;../../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="58dcaddb355cecd931c021172a4bedf908dd76a9" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;$z&lt;/code&gt; object is associated with a file or a filehandle, &lt;code&gt;&lt;a href=&quot;../../functions/fileno&quot;&gt;fileno&lt;/a&gt;&lt;/code&gt; will return the underlying file descriptor. Once the &lt;code&gt;&lt;a href=&quot;../../functions/close&quot;&gt;close&lt;/a&gt;&lt;/code&gt; method is called &lt;code&gt;&lt;a href=&quot;../../functions/fileno&quot;&gt;fileno&lt;/a&gt;&lt;/code&gt; will return &lt;code&gt;&lt;a href=&quot;../../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;$z&lt;/code&gt; 객체가 파일 또는 파일 핸들과 연결되어 있으면 &lt;code&gt;&lt;a href=&quot;../../functions/fileno&quot;&gt;fileno&lt;/a&gt;&lt;/code&gt; 는 기본 파일 설명자를 반환합니다. &lt;code&gt;&lt;a href=&quot;../../functions/close&quot;&gt;close&lt;/a&gt;&lt;/code&gt; 메소드가 호출 되면 &lt;code&gt;&lt;a href=&quot;../../functions/fileno&quot;&gt;fileno&lt;/a&gt;&lt;/code&gt; 는 &lt;code&gt;&lt;a href=&quot;../../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; 를 리턴 합니다.</target>
        </trans-unit>
        <trans-unit id="c8acbfda88a1601bef7d039c62529de82f9b15c5" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;$z&lt;/code&gt; object is associated with a file or a filehandle, this method returns the current autoflush setting for the underlying filehandle. If &lt;code&gt;EXPR&lt;/code&gt; is present, and is non-zero, it will enable flushing after every write/print operation.</source>
          <target state="translated">는 IF &lt;code&gt;$z&lt;/code&gt; 객체가 파일 또는 파일 핸들과 연관되어,이 방법은 기본 파일 핸들의 현재의 autoflush 설정을 반환합니다. 경우 &lt;code&gt;EXPR&lt;/code&gt; 이 존재하고, 0이 아닌, 그것은 모든 쓰기 / 인쇄 작업 후 세척 할 수있게된다.</target>
        </trans-unit>
        <trans-unit id="4f22b38f141c1394908e5c44c3cf641e6013a601" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;(*ACCEPT)&lt;/code&gt; is inside of capturing groups then the groups are marked as ended at the point at which the &lt;code&gt;(*ACCEPT)&lt;/code&gt; was encountered. For instance:</source>
          <target state="translated">만약 &lt;code&gt;(*ACCEPT)&lt;/code&gt; 시점에서 종료로 다음 그룹이 표시되어 그룹 포착 내부 &lt;code&gt;(*ACCEPT)&lt;/code&gt; 가 발생 하였다. 예를 들어 :</target>
        </trans-unit>
        <trans-unit id="d96d9f9f8c91a22bdf7e1a3536eeb47596adfe1c" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;-Strict&lt;/code&gt; option is disabled, the comment field can contain any character except NULL. If any null characters are present, the field will be truncated at the first NULL.</source>
          <target state="translated">는 IF &lt;code&gt;-Strict&lt;/code&gt; 옵션을 사용하지 주석 필드는 NULL 문자를 제외한 모든 문자를 포함 할 수 있습니다. 널 문자가 존재하면 필드는 첫 번째 NULL에서 잘립니다.</target>
        </trans-unit>
        <trans-unit id="8a0625a9517209d9c735d420fbb7b372c06cae56" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;-Strict&lt;/code&gt; option is enabled, &lt;code&gt;$string&lt;/code&gt; can only consist of ISO 8859-1 characters.</source>
          <target state="translated">경우 &lt;code&gt;-Strict&lt;/code&gt; 옵션이 활성화되어, &lt;code&gt;$string&lt;/code&gt; 에만 ISO 8859-1 문자로 구성 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="7e727e67c9a9b626ab111993b625d6fae0b44b5e" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;-Strict&lt;/code&gt; option is enabled, the comment can only consist of ISO 8859-1 characters plus line feed.</source>
          <target state="translated">경우 &lt;code&gt;-Strict&lt;/code&gt; 옵션이 활성화되어, 코멘트는 ISO 8859-1 문자와 줄 바꿈으로 구성 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="687858bb0364e03075315214e49915f4063efd20" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;-i&lt;/code&gt; switch is present but no extension for a backup copy is given, then inplace editing creates a new version of a file; the existing copy is not deleted. (Note that if an extension is given, an existing file is renamed to the backup file, as is the case under other operating systems, so it does not remain as a previous version under the original filename.)</source>
          <target state="translated">경우 &lt;code&gt;-i&lt;/code&gt; 스위치가 존재하지만 백업 사본에 대한 확장을 지정하지, 다음 올바른 위치 편집 파일의 새 버전을 생성; 기존 사본은 삭제되지 않습니다. 확장명이 제공되면 다른 운영 체제의 경우와 같이 기존 파일의 이름이 백업 파일로 바뀌므로 원래 파일 이름 아래에는 이전 버전으로 유지되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="45a06195ed61d1ad05b053f7cec670bab3d1b47d" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;/c&lt;/code&gt; modifier is specified, the</source>
          <target state="translated">만약 &lt;code&gt;/c&lt;/code&gt; 수정 지정되면,</target>
        </trans-unit>
        <trans-unit id="61f363164df63c08b01c2f8d842eb83178238fca" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;/d&lt;/code&gt; modifier is used, the</source>
          <target state="translated">는 IF &lt;code&gt;/d&lt;/code&gt; 개질제를 사용하는 경우,</target>
        </trans-unit>
        <trans-unit id="228d53bdcd18fe101fa332b95e05c49d501e9bd9" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;/g&lt;/code&gt; option is not used, &lt;code&gt;&lt;a href=&quot;functions/m&quot;&gt;m//&lt;/a&gt;&lt;/code&gt; in list context returns a list consisting of the subexpressions matched by the parentheses in the pattern, that is, (&lt;code&gt;$1&lt;/code&gt; , &lt;code&gt;$2&lt;/code&gt; , &lt;code&gt;$3&lt;/code&gt; ...) (Note that here &lt;code&gt;$1&lt;/code&gt; etc. are also set). When there are no parentheses in the pattern, the return value is the list &lt;code&gt;(1)&lt;/code&gt; for success. With or without parentheses, an empty list is returned upon failure.</source>
          <target state="translated">는 IF &lt;code&gt;/g&lt;/code&gt; 옵션을 사용하지 않고, &lt;code&gt;&lt;a href=&quot;functions/m&quot;&gt;m//&lt;/a&gt;&lt;/code&gt; 리스트 컨텍스트에 패턴에서 괄호 일치 하위 표현식 구성된리스트 (반환 &lt;code&gt;$1&lt;/code&gt; , &lt;code&gt;$2&lt;/code&gt; , &lt;code&gt;$3&lt;/code&gt; ...) (참고로 여기에 &lt;code&gt;$1&lt;/code&gt; 등 설정되어 있습니다). 패턴에 괄호가 없으면 리턴 값은 성공을위한 목록 &lt;code&gt;(1)&lt;/code&gt; 입니다. 괄호를 사용하거나 사용하지 않고 실패하면 빈 목록이 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="f3f80ef36f0d767bd1b67ec24494f102a4ec7c1e" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;/r&lt;/code&gt; (non-destructive) option is present, a new copy of the string is made and its characters transliterated, and this copy is returned no matter whether it was modified or not: the original string is always left unchanged. The new copy is always a plain string, even if the input string is an object or a tied variable.</source>
          <target state="translated">는 IF &lt;code&gt;/r&lt;/code&gt; (비파괴) 옵션이 존재하는 문자열의 새 복사본을 만들어 그 문자는 자역,이 사본은 상관없이이 수정되었는지 여부를 반환되지 않습니다되어 원래 문자열은 항상 변경되지 않습니다. 입력 문자열이 객체이거나 묶인 변수 인 경우에도 새 복사본은 항상 일반 문자열입니다.</target>
        </trans-unit>
        <trans-unit id="a9229f75d9765b6c9e80a754666b4ec3786ce235" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;/r&lt;/code&gt; (non-destructive) option is used then it runs the substitution on a copy of the string and instead of returning the number of substitutions, it returns the copy whether or not a substitution occurred. The original string is never changed when &lt;code&gt;/r&lt;/code&gt; is used. The copy will always be a plain string, even if the input is an object or a tied variable.</source>
          <target state="translated">는 IF &lt;code&gt;/r&lt;/code&gt; (비파괴) 옵션은 다음 사용은 문자열의 복사본을 대체를 실행하고 대신 대체의 수를 반환하는, 그것은 대체가 발생하는지 여부를 복사본을 반환합니다. &lt;code&gt;/r&lt;/code&gt; 을 사용할 때 원래 문자열은 변경되지 않습니다 . 입력이 객체 또는 묶인 변수 인 경우에도 복사본은 항상 일반 문자열입니다.</target>
        </trans-unit>
        <trans-unit id="98015ad9cab949396e11223bb4b809b828f32a12" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;ADLER32&lt;/code&gt; option is not enabled in the constructor for this object, this method will always return 0;</source>
          <target state="translated">는 IF &lt;code&gt;ADLER32&lt;/code&gt; 의 옵션이 객체의 생성자에 사용할 수 없습니다,이 메소드는 항상 0을 반환합니다;</target>
        </trans-unit>
        <trans-unit id="e7e3cc3b120420d3fe3e5903cbe74d0d544abd6d" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;AppendOutput&lt;/code&gt; option is set to false, the output buffers in the &lt;code&gt;$d-&amp;gt;deflate&lt;/code&gt; and &lt;code&gt;$d-&amp;gt;flush&lt;/code&gt; methods will be truncated before uncompressed data is written to them.</source>
          <target state="translated">는 IF &lt;code&gt;AppendOutput&lt;/code&gt; 의 옵션이 false로 설정되어있는 출력 버퍼 &lt;code&gt;$d-&amp;gt;deflate&lt;/code&gt; 과 &lt;code&gt;$d-&amp;gt;flush&lt;/code&gt; 압축되지 않은 데이터가 그들에 기록되기 전에 방법을 잘립니다.</target>
        </trans-unit>
        <trans-unit id="dc67d2e9493b30b20a1a27f63c6bc36f875e42fb" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;AppendOutput&lt;/code&gt; option is set to true in the constructor for the &lt;code&gt;$d&lt;/code&gt; object, the compressed data will be appended to &lt;code&gt;$output&lt;/code&gt; . If it is false, &lt;code&gt;$output&lt;/code&gt; will be truncated before any compressed data is written to it.</source>
          <target state="translated">경우] &lt;code&gt;AppendOutput&lt;/code&gt; 의 옵션이 생성자 true로 설정되어 &lt;code&gt;$d&lt;/code&gt; 오브젝트, 압축 데이터에 부가한다 &lt;code&gt;$output&lt;/code&gt; . False 인 경우 압축 된 데이터를 기록하기 전에 &lt;code&gt;$output&lt;/code&gt; 이 잘립니다.</target>
        </trans-unit>
        <trans-unit id="241ec910d4c3fc198870214959a19e4587117b91" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;AppendOutput&lt;/code&gt; option is set to true in the constructor for this object, the uncompressed data will be appended to &lt;code&gt;$output&lt;/code&gt; . If it is false, &lt;code&gt;$output&lt;/code&gt; will be truncated before any uncompressed data is written to it.</source>
          <target state="translated">는 IF &lt;code&gt;AppendOutput&lt;/code&gt; 의 옵션이 오브젝트의 생성자에서 true로 설정되어, 압축되지 않은 데이터에 추가됩니다 &lt;code&gt;$output&lt;/code&gt; . False 인 경우 압축되지 않은 데이터가 기록되기 전에 &lt;code&gt;$output&lt;/code&gt; 이 잘립니다.</target>
        </trans-unit>
        <trans-unit id="23a4bdafd5b4aee2bfba5a403d17509d788319bb" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;Archive::Tar&lt;/code&gt; module is installed and either the &lt;code&gt;uncompress&lt;/code&gt; or &lt;code&gt;gunzip&lt;/code&gt; programs are available, you can use one of these workarounds to read &lt;code&gt;.tar.Z&lt;/code&gt; files.</source>
          <target state="translated">경우 &lt;code&gt;Archive::Tar&lt;/code&gt; 모듈이 설치되어 중 하나입니다 &lt;code&gt;uncompress&lt;/code&gt; 또는 &lt;code&gt;gunzip&lt;/code&gt; 이 프로그램을 사용할 수 있습니다, 당신은 읽을 이러한 해결 방법 중 하나를 사용할 수 &lt;code&gt;.tar.Z&lt;/code&gt; 파일을.</target>
        </trans-unit>
        <trans-unit id="da717ba776ac7b943780ea377cd85c35cc7f2655" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;AutoClose&lt;/code&gt; option has been enabled when the IO::Compress::Bzip2 object was created, and the object is associated with a file, the underlying file will also be closed.</source>
          <target state="translated">경우 &lt;code&gt;AutoClose&lt;/code&gt; IO :: 압축 :: Bzip2의 객체를 만들 때 옵션이 사용 가능하고, 객체가 파일과 연관된, 기본 파일은 종료됩니다.</target>
        </trans-unit>
        <trans-unit id="2451f14f493fd0c1b2a744f1ca680885802c97fb" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;AutoClose&lt;/code&gt; option has been enabled when the IO::Compress::Deflate object was created, and the object is associated with a file, the underlying file will also be closed.</source>
          <target state="translated">경우 &lt;code&gt;AutoClose&lt;/code&gt; IO :: 압축 :: 공기를 빼다 개체를 만들 때 옵션이 사용 가능하고, 객체가 파일과 연관된, 기본 파일은 종료됩니다.</target>
        </trans-unit>
        <trans-unit id="a262cca6ca624ccbcc230f0a9a299f301469ea87" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;AutoClose&lt;/code&gt; option has been enabled when the IO::Compress::Gzip object was created, and the object is associated with a file, the underlying file will also be closed.</source>
          <target state="translated">경우 &lt;code&gt;AutoClose&lt;/code&gt; IO :: 압축 : Gzip으로 개체를 만들 때 옵션이 사용 가능하고, 객체가 파일과 연관된, 기본 파일은 종료됩니다.</target>
        </trans-unit>
        <trans-unit id="e1abc2a1019c01d985ed7b90e95e969f6f299bf2" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;AutoClose&lt;/code&gt; option has been enabled when the IO::Compress::RawDeflate object was created, and the object is associated with a file, the underlying file will also be closed.</source>
          <target state="translated">경우 &lt;code&gt;AutoClose&lt;/code&gt; IO :: 압축 :: RawDeflate 개체를 만들 때 옵션이 사용 가능하고, 객체가 파일과 연관된, 기본 파일은 종료됩니다.</target>
        </trans-unit>
        <trans-unit id="f5ea66329ad2b4187630d779016bfcf01873661d" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;AutoClose&lt;/code&gt; option has been enabled when the IO::Compress::Zip object was created, and the object is associated with a file, the underlying file will also be closed.</source>
          <target state="translated">경우 &lt;code&gt;AutoClose&lt;/code&gt; IO :: 압축 : 우편 개체를 만들 때 옵션이 사용 가능하고, 객체가 파일과 연관된, 기본 파일은 종료됩니다.</target>
        </trans-unit>
        <trans-unit id="efa0131be286b8ee087293f106c69cc7176b941b" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;AutoClose&lt;/code&gt; option has been enabled when the IO::Uncompress::AnyInflate object was created, and the object is associated with a file, the underlying file will also be closed.</source>
          <target state="translated">경우 &lt;code&gt;AutoClose&lt;/code&gt; IO :: 압축 풀기 :: AnyInflate 개체를 만들 때 옵션이 사용 가능하고, 객체가 파일과 연관된, 기본 파일은 종료됩니다.</target>
        </trans-unit>
        <trans-unit id="d7295924866c46c6268e8a714d1d64a580c31683" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;AutoClose&lt;/code&gt; option has been enabled when the IO::Uncompress::AnyUncompress object was created, and the object is associated with a file, the underlying file will also be closed.</source>
          <target state="translated">경우 &lt;code&gt;AutoClose&lt;/code&gt; IO :: 압축 풀기 :: AnyUncompress 개체를 만들 때 옵션이 사용 가능하고, 객체가 파일과 연관된, 기본 파일은 종료됩니다.</target>
        </trans-unit>
        <trans-unit id="d590344cfdd3022553efe336602191d1dbf477b6" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;AutoClose&lt;/code&gt; option has been enabled when the IO::Uncompress::Bunzip2 object was created, and the object is associated with a file, the underlying file will also be closed.</source>
          <target state="translated">경우 &lt;code&gt;AutoClose&lt;/code&gt; IO :: 압축 풀기 :: bunzip2는 개체를 만들 때 옵션이 사용 가능하고, 객체가 파일과 연관된, 기본 파일은 종료됩니다.</target>
        </trans-unit>
        <trans-unit id="d48a250e20975c54010e5628db4f5baad9a34122" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;AutoClose&lt;/code&gt; option has been enabled when the IO::Uncompress::Gunzip object was created, and the object is associated with a file, the underlying file will also be closed.</source>
          <target state="translated">경우 &lt;code&gt;AutoClose&lt;/code&gt; IO :: 압축을 풉니 다 : gunzip이 개체를 만들 때 옵션이 사용 가능하고, 객체가 파일과 연관된, 기본 파일은 종료됩니다.</target>
        </trans-unit>
        <trans-unit id="52452c9550cd8363c6c8237af362cc345e53f457" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;AutoClose&lt;/code&gt; option has been enabled when the IO::Uncompress::Inflate object was created, and the object is associated with a file, the underlying file will also be closed.</source>
          <target state="translated">경우 &lt;code&gt;AutoClose&lt;/code&gt; IO :: 압축 풀기 :: 팽창 개체를 만들 때 옵션이 사용 가능하고, 객체가 파일과 연관된, 기본 파일은 종료됩니다.</target>
        </trans-unit>
        <trans-unit id="34f0502573716752984911463b9f0d1cdbf46468" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;AutoClose&lt;/code&gt; option has been enabled when the IO::Uncompress::RawInflate object was created, and the object is associated with a file, the underlying file will also be closed.</source>
          <target state="translated">경우 &lt;code&gt;AutoClose&lt;/code&gt; IO :: 압축 풀기 :: RawInflate 개체를 만들 때 옵션이 사용 가능하고, 객체가 파일과 연관된, 기본 파일은 종료됩니다.</target>
        </trans-unit>
        <trans-unit id="a4a69474f66acefa05c78e7afea37ef49d0b67b4" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;AutoClose&lt;/code&gt; option has been enabled when the IO::Uncompress::Unzip object was created, and the object is associated with a file, the underlying file will also be closed.</source>
          <target state="translated">경우 &lt;code&gt;AutoClose&lt;/code&gt; IO :: 압축 풀기 : 압축을 풀고 개체를 만들 때 옵션이 사용 가능하고, 객체가 파일과 연관된, 기본 파일은 종료됩니다.</target>
        </trans-unit>
        <trans-unit id="c5ac2a9fbc05192cf46afe1261683a81419aaa4d" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;CRC32&lt;/code&gt; option is not enabled in the constructor for this object, this method will always return 0;</source>
          <target state="translated">경우 &lt;code&gt;CRC32&lt;/code&gt; 의 옵션이 객체의 생성자에 사용할 수 없습니다,이 메소드는 항상 0을 반환합니다;</target>
        </trans-unit>
        <trans-unit id="1078abcc96e5bc5e00a4c013f64ebcf42ad64647" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;ConsumeInput&lt;/code&gt; option has been set to true when the &lt;code&gt;Compress::Raw::Zlib::Inflate&lt;/code&gt; object is created, the &lt;code&gt;$input&lt;/code&gt; parameter is modified by &lt;code&gt;inflate&lt;/code&gt; . On completion it will contain what remains of the input buffer after inflation. In practice, this means that when the return status is &lt;code&gt;Z_OK&lt;/code&gt; the &lt;code&gt;$input&lt;/code&gt; parameter will contain an empty string, and when the return status is &lt;code&gt;Z_STREAM_END&lt;/code&gt; the &lt;code&gt;$input&lt;/code&gt; parameter will contains what (if anything) was stored in the input buffer after the deflated data stream.</source>
          <target state="translated">는 IF &lt;code&gt;ConsumeInput&lt;/code&gt; 의 때 옵션이 true로 설정되어있는 &lt;code&gt;Compress::Raw::Zlib::Inflate&lt;/code&gt; 객체가 생성되면, &lt;code&gt;$input&lt;/code&gt; 매개 변수에 의해 수정 &lt;code&gt;inflate&lt;/code&gt; . 완료되면 인플레이션 후 입력 버퍼에 남아있는 내용이 포함됩니다. 실제로 이것은 리턴 상태가 &lt;code&gt;Z_OK&lt;/code&gt; 일 때 &lt;code&gt;$input&lt;/code&gt; 매개 변수에 빈 문자열을 포함하고 리턴 상태가 &lt;code&gt;Z_STREAM_END&lt;/code&gt; 일 때 &lt;code&gt;$input&lt;/code&gt; 매개 변수는 수축 된 데이터 후 입력 버퍼에 저장된 내용을 포함합니다 (있는 경우). 흐름.</target>
        </trans-unit>
        <trans-unit id="6a12981a50e52bd8360e58342fda216fd19888ef" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;Encode::LEAVE_SRC&lt;/code&gt; bit is</source>
          <target state="translated">경우 &lt;code&gt;Encode::LEAVE_SRC&lt;/code&gt; 비트입니다</target>
        </trans-unit>
        <trans-unit id="1bd3991b928d2bed7eef1e209952394cc1a3b16f" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;Listen&lt;/code&gt; argument is given, but false, the queue size will be set to 5.</source>
          <target state="translated">는 IF &lt;code&gt;Listen&lt;/code&gt; 인수가 주어하지만 거짓되고, 큐 크기는 5로 설정됩니다.</target>
        </trans-unit>
        <trans-unit id="1143100ee61e97ea2197747ccc58abb62c39ba7a" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;Minimal&lt;/code&gt; option is set to true, this option will be ignored.</source>
          <target state="translated">경우 &lt;code&gt;Minimal&lt;/code&gt; 옵션이 true로 설정되어,이 옵션은 무시됩니다.</target>
        </trans-unit>
        <trans-unit id="9b0cd9b590461a3324fa8fa68396f36ebee97301" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;Strict&lt;/code&gt; is on it will automatically enable this option.</source>
          <target state="translated">경우 &lt;code&gt;Strict&lt;/code&gt; 에 자동이 옵션을 사용합니다.</target>
        </trans-unit>
        <trans-unit id="1a5a03dfea212cb5b29a1fbf2d5e717d48359451" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;YAML&lt;/code&gt; or the &lt;code&gt;YAML::Syck&lt;/code&gt; module is installed a record of the internal state of all modules is written to disk after each step. The files contain a signature of the currently running perl version for later perusal.</source>
          <target state="translated">경우] &lt;code&gt;YAML&lt;/code&gt; 또는 &lt;code&gt;YAML::Syck&lt;/code&gt; 모듈은 모든 모듈의 내부 상태의 기록 설치된 각 단계 후에 디스크에 기록된다. 파일에는 나중에 실행하기 위해 현재 실행중인 펄 버전의 서명이 포함되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="c82a6fc0a2f95bf7629d02360284d3c7a1ca8a6f" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;can&lt;/code&gt; returns false, then that is passed to &lt;code&gt;ok&lt;/code&gt; . If it returns true, then the larger expression &lt;code&gt;$thingy-&amp;gt;can('some_method') &amp;amp;&amp;amp; 1&lt;/code&gt; returns 1, which &lt;code&gt;ok&lt;/code&gt; sees as a simple signal of success, as you would expect.</source>
          <target state="translated">는 IF &lt;code&gt;can&lt;/code&gt; false를 반환, 그 다음이 전달됩니다 &lt;code&gt;ok&lt;/code&gt; . 그것은 사실, 그 다음 더 큰 표현 반환하는 경우 &lt;code&gt;$thingy-&amp;gt;can('some_method') &amp;amp;&amp;amp; 1&lt;/code&gt; 을 반환 1, &lt;code&gt;ok&lt;/code&gt; 당신이 기대하는 것처럼, 성공의 간단한 신호로 볼 수있다.</target>
        </trans-unit>
        <trans-unit id="8bb03363c1cc83c40db7187bc0c1808c11643507" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;charscript()&lt;/code&gt; argument is not a known script, &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; is returned.</source>
          <target state="translated">는 IF &lt;code&gt;charscript()&lt;/code&gt; 인수가 알려진 스크립트 아니라, &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="15aaa040db904ad0d7e939ff87d0289e4ed113e7" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;decimal string --&amp;gt; native integer&lt;/code&gt; conversion cannot be done without loss of information, the result is compatible with the conversion sequence &lt;code&gt;decimal_string --&amp;gt; native_floating_point --&amp;gt; native_integer&lt;/code&gt; . In particular, rounding is strongly biased to 0, though a number like &lt;code&gt;&quot;0.99999999999999999999&quot;&lt;/code&gt; has a chance of being rounded to 1.</source>
          <target state="translated">는 IF &lt;code&gt;decimal string --&amp;gt; native integer&lt;/code&gt; 변환 정보의 손실없이 할 수없는, 결과는 변환 시퀀스와 호환 &lt;code&gt;decimal_string --&amp;gt; native_floating_point --&amp;gt; native_integer&lt;/code&gt; . 특히 &lt;code&gt;&quot;0.99999999999999999999&quot;&lt;/code&gt; 와 같은 숫자 는 1로 반올림 될 가능성이 있지만 반올림은 0으로 강하게 바이어스됩니다 .</target>
        </trans-unit>
        <trans-unit id="6e4484ac7779a53de50aea47a7a5981f680fda36" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;encoding&lt;/code&gt; pragma is in scope then the lengths returned are calculated from the length of &lt;code&gt;$/&lt;/code&gt; in Unicode characters, which is not always the same as the length of &lt;code&gt;$/&lt;/code&gt; in the native encoding.</source>
          <target state="translated">&lt;code&gt;encoding&lt;/code&gt; pragma가 범위 내에있는 경우 반환되는 길이는 &lt;code&gt;$/&lt;/code&gt; 의 길이 에서 유니 코드 문자 로 계산되며 기본 인코딩 의 &lt;code&gt;$/&lt;/code&gt; 의 길이와 항상 같지는 않습니다 .</target>
        </trans-unit>
        <trans-unit id="bb917cbee0d97141aac38b7ae445c57c18b27f43" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;export_fail&lt;/code&gt; method returns an empty list then no error is recorded and all the requested symbols are exported. If the returned list is not empty then an error is generated for each symbol and the export fails. The Exporter provides a default &lt;code&gt;export_fail&lt;/code&gt; method which simply returns the list unchanged.</source>
          <target state="translated">는 IF &lt;code&gt;export_fail&lt;/code&gt; 의 방법은 다음 오류가 기록되지 않은 빈 목록을 반환하고 요청 된 모든 기호를 수출하고 있습니다. 리턴 된 목록이 비어 있지 않으면 각 기호에 대해 오류가 생성되고 내보내기에 실패합니다. Exporter는 기본 &lt;code&gt;export_fail&lt;/code&gt; 메소드를 제공하여 단순히 목록을 변경하지 않고 반환합니다.</target>
        </trans-unit>
        <trans-unit id="276362d098a443c72a3870f2a2d48ae260499ef9" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;gv&lt;/code&gt; is present and is not in the symbol table, then this function simply returns. This checked will be skipped if &lt;code&gt;flags &amp;amp; 1&lt;/code&gt; .</source>
          <target state="translated">는 IF &lt;code&gt;gv&lt;/code&gt; 존재하고 심볼 테이블에없는,이 함수는 단순히 반환합니다. &lt;code&gt;flags &amp;amp; 1&lt;/code&gt; 경우이 옵션을 건너 뜁니다 .</target>
        </trans-unit>
        <trans-unit id="798f35bb0e17493f55f47f1e0e601507174d7021" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;maxdepth&lt;/code&gt; is included, it must be a numeral</source>
          <target state="translated">&lt;code&gt;maxdepth&lt;/code&gt; 가 포함 된 경우 숫자 여야합니다</target>
        </trans-unit>
        <trans-unit id="4672f4a6483db1b05eeb609d8e652aab384c295c" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;timelocal()&lt;/code&gt; function is given a non-existent local time, it will simply return an epoch value for the time one hour later.</source>
          <target state="translated">는 IF &lt;code&gt;timelocal()&lt;/code&gt; 함수가 존재하지 않는 현지 시간을 주어, 단순히 1 시간 후 시간에 대한 획기적인 값을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="d8b1721e1ae657f367e4018c29dc66b147cf1c09" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;uncompress&lt;/code&gt; or &lt;code&gt;gunzip&lt;/code&gt; programs are available, you can use one of these workarounds to read &lt;code&gt;.tar.Z&lt;/code&gt; files from &lt;code&gt;Archive::Tar&lt;/code&gt;</source>
          <target state="translated">경우 &lt;code&gt;uncompress&lt;/code&gt; 또는 &lt;code&gt;gunzip&lt;/code&gt; 이 프로그램을 사용할 수 있습니다, 당신은 읽을 이러한 해결 방법 중 하나를 사용할 수 &lt;code&gt;.tar.Z&lt;/code&gt; 파일을 &lt;code&gt;Archive::Tar&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="cddc99dbc25aed0c730c0fe2bb39cef906b6e6a7" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;unicode_eval&lt;/code&gt; feature is enabled (which is the default under a &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; 5.16&lt;/code&gt; or higher declaration), EXPR or &lt;code&gt;$_&lt;/code&gt; is treated as a string of characters, so &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; utf8&lt;/code&gt; declarations have no effect, and source filters are forbidden. In the absence of the &lt;code&gt;unicode_eval&lt;/code&gt; feature, the string will sometimes be treated as characters and sometimes as bytes, depending on the internal encoding, and source filters activated within the &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt; exhibit the erratic, but historical, behaviour of affecting some outer file scope that is still compiling. See also the &lt;a href=&quot;#evalbytes&quot;&gt;evalbytes&lt;/a&gt; keyword, which always treats its input as a byte stream and works properly with source filters, and the &lt;a href=&quot;feature&quot;&gt;feature&lt;/a&gt; pragma.</source>
          <target state="translated">는 IF &lt;code&gt;unicode_eval&lt;/code&gt; 기능 (아래에있는 A 기본값 인 설정되어 &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; 5.16&lt;/code&gt; 이상 선언), EXPR 또는 &lt;code&gt;$_&lt;/code&gt; 그래서 문자열로 처리됩니다 &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; utf8&lt;/code&gt; 선언은 아무런 효과가없고, 소스 필터가 금지된다. &lt;code&gt;unicode_eval&lt;/code&gt; 기능 이없는 경우 내부 인코딩에 따라 문자열이 문자 및 바이트로 처리되는 경우가 있으며, &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt; 내에서 활성화 된 소스 필터 는 일부 외부 파일 범위에 영향을 미치는 불규칙하지만 역사적입니다. 여전히 컴파일 중입니다. 또한 참조 &lt;a href=&quot;#evalbytes&quot;&gt;evalbytes을&lt;/a&gt;키워드는 입력을 항상 바이트 스트림으로 취급하고 소스 필터 및 &lt;a href=&quot;feature&quot;&gt;기능&lt;/a&gt; pragma 와 올바르게 작동합니다 .</target>
        </trans-unit>
        <trans-unit id="87e45908e093ce58a5e789307a68cc9a88437767" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;unicode_eval&lt;/code&gt; feature is enabled (which is the default under a &lt;code&gt;&lt;a href=&quot;use&quot;&gt;use&lt;/a&gt; 5.16&lt;/code&gt; or higher declaration), EXPR or &lt;code&gt;$_&lt;/code&gt; is treated as a string of characters, so &lt;code&gt;&lt;a href=&quot;use&quot;&gt;use&lt;/a&gt; utf8&lt;/code&gt; declarations have no effect, and source filters are forbidden. In the absence of the &lt;code&gt;unicode_eval&lt;/code&gt; feature, the string will sometimes be treated as characters and sometimes as bytes, depending on the internal encoding, and source filters activated within the &lt;code&gt;&lt;a href=&quot;eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt; exhibit the erratic, but historical, behaviour of affecting some outer file scope that is still compiling. See also the &lt;a href=&quot;evalbytes&quot;&gt;evalbytes&lt;/a&gt; keyword, which always treats its input as a byte stream and works properly with source filters, and the &lt;a href=&quot;../feature&quot;&gt;feature&lt;/a&gt; pragma.</source>
          <target state="translated">는 IF &lt;code&gt;unicode_eval&lt;/code&gt; 기능 (아래에있는 A 기본값 인 설정되어 &lt;code&gt;&lt;a href=&quot;use&quot;&gt;use&lt;/a&gt; 5.16&lt;/code&gt; 이상 선언), EXPR 또는 &lt;code&gt;$_&lt;/code&gt; 그래서 문자열로 처리됩니다 &lt;code&gt;&lt;a href=&quot;use&quot;&gt;use&lt;/a&gt; utf8&lt;/code&gt; 선언은 아무런 효과가없고, 소스 필터가 금지된다. &lt;code&gt;unicode_eval&lt;/code&gt; 기능 이없는 경우 내부 인코딩에 따라 문자열이 문자 및 바이트로 처리되는 경우가 있으며, &lt;code&gt;&lt;a href=&quot;eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt; 내에서 활성화 된 소스 필터 는 일부 외부 파일 범위에 영향을 미치는 불규칙하지만 역사적입니다. 여전히 컴파일 중입니다. 또한 참조 &lt;a href=&quot;evalbytes&quot;&gt;evalbytes을&lt;/a&gt;키워드는 입력을 항상 바이트 스트림으로 취급하고 소스 필터 및 &lt;a href=&quot;../feature&quot;&gt;기능&lt;/a&gt; pragma 와 올바르게 작동합니다 .</target>
        </trans-unit>
        <trans-unit id="094a307e3b02182e7190ab8c7d41908a31be7b6f" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;utf8&lt;/code&gt; option is not given, the encoding of its output file handle will be forced to the detected encoding of the input POD, which preserves whatever the input text is. This ensures backward compatibility with earlier, pre-Unicode versions of this module, without large numbers of Perl warnings.</source>
          <target state="translated">는 IF &lt;code&gt;utf8&lt;/code&gt; 옵션이 제공되지 않으며, 출력 파일 핸들의 인코딩은 입력 텍스트가 무엇이든 보존 입력 POD의 감지 인코딩으로 강제됩니다. 이를 통해 많은 수의 Perl 경고없이이 모듈의 이전 프리 유니 코드 버전과 역 호환됩니다.</target>
        </trans-unit>
        <trans-unit id="b5abb9df31ef6516fcae104f653339d0026bd9e0" translate="yes" xml:space="preserve">
          <source>If the AIX Toolbox version of lib gdbm &amp;lt; 1.8.3-5 is installed on your system then Perl will not work. This library contains the header files /opt/freeware/include/gdbm/dbm.h|ndbm.h which conflict with the AIX system versions. The lib gdbm will be automatically removed from the wanted libraries if the presence of one of these two header files is detected. If you want to build Perl with GDBM support then please install at least gdbm-devel-1.8.3-5 (or higher).</source>
          <target state="translated">lib gdbm &amp;lt;1.8.3-5의 AIX Toolbox 버전이 시스템에 설치되어 있으면 Perl이 작동하지 않습니다. 이 라이브러리에는 AIX 시스템 버전과 충돌하는 헤더 파일 /opt/freeware/include/gdbm/dbm.h|ndbm.h가 포함되어 있습니다. 이 두 헤더 파일 중 하나가 존재하면 lib gdbm이 원하는 라이브러리에서 자동으로 제거됩니다. GDBM 지원으로 Perl을 빌드하려면 gdbm-devel-1.8.3-5 이상을 설치하십시오.</target>
        </trans-unit>
        <trans-unit id="e4f37200eb3cc7a4dd0c87959fbb6c2e093e138e" translate="yes" xml:space="preserve">
          <source>If the C function setvbuf() is available, then &lt;code&gt;FileHandle::setvbuf&lt;/code&gt; sets the buffering policy for the FileHandle. The calling sequence for the Perl function is the same as its C counterpart, including the macros &lt;code&gt;_IOFBF&lt;/code&gt; , &lt;code&gt;_IOLBF&lt;/code&gt; , and &lt;code&gt;_IONBF&lt;/code&gt; , except that the buffer parameter specifies a scalar variable to use as a buffer. WARNING: A variable used as a buffer by &lt;code&gt;FileHandle::setvbuf&lt;/code&gt; must not be modified in any way until the FileHandle is closed or until &lt;code&gt;FileHandle::setvbuf&lt;/code&gt; is called again, or memory corruption may result!</source>
          <target state="translated">C 함수 setvbuf ()를 사용할 수 있으면 &lt;code&gt;FileHandle::setvbuf&lt;/code&gt; 가 FileHandle에 대한 버퍼링 정책을 설정합니다. 버퍼 매개 변수가 버퍼로 사용할 스칼라 변수를 지정한다는 점을 제외하고 Perl 함수의 호출 순서는 매크로 &lt;code&gt;_IOFBF&lt;/code&gt; , &lt;code&gt;_IOLBF&lt;/code&gt; 및 &lt;code&gt;_IONBF&lt;/code&gt; 를 포함하여 C 대응 함수와 동일 합니다. 경고 : &lt;code&gt;FileHandle::setvbuf&lt;/code&gt; 가 버퍼로 사용하는 변수 는 FileHandle을 &lt;code&gt;FileHandle::setvbuf&lt;/code&gt; 를 다시 호출 할 때까지 어떤 식 으로든 수정해서는 안됩니다. 그렇지 않으면 메모리 손상이 발생할 수 있습니다!</target>
        </trans-unit>
        <trans-unit id="1a7ae4abb775cdaecaa965021a5be89b2c2a0678" translate="yes" xml:space="preserve">
          <source>If the C functions fgetpos() and fsetpos() are available, then &lt;code&gt;FileHandle::getpos&lt;/code&gt; returns an opaque value that represents the current position of the FileHandle, and &lt;code&gt;FileHandle::setpos&lt;/code&gt; uses that value to return to a previously visited position.</source>
          <target state="translated">C 함수 fgetpos () 및 fsetpos ()를 사용할 수있는 경우 &lt;code&gt;FileHandle::getpos&lt;/code&gt; 는 FileHandle 의 현재 위치를 나타내는 불투명 한 값을 반환하고 &lt;code&gt;FileHandle::setpos&lt;/code&gt; 는 해당 값을 사용하여 이전에 방문한 위치로 돌아갑니다.</target>
        </trans-unit>
        <trans-unit id="50ebbabfe865d409f0b42636c02f4e83fa99aca9" translate="yes" xml:space="preserve">
          <source>If the C functions setbuf() and/or setvbuf() are available, then &lt;code&gt;IO::Handle::setbuf&lt;/code&gt; and &lt;code&gt;IO::Handle::setvbuf&lt;/code&gt; set the buffering policy for an IO::Handle. The calling sequences for the Perl functions are the same as their C counterparts--including the constants &lt;code&gt;_IOFBF&lt;/code&gt; , &lt;code&gt;_IOLBF&lt;/code&gt; , and &lt;code&gt;_IONBF&lt;/code&gt; for setvbuf()--except that the buffer parameter specifies a scalar variable to use as a buffer. You should only change the buffer before any I/O, or immediately after calling flush.</source>
          <target state="translated">C 함수 setbuf () 및 / 또는 setvbuf ()를 사용할 수있는 경우 &lt;code&gt;IO::Handle::setbuf&lt;/code&gt; 및 &lt;code&gt;IO::Handle::setvbuf&lt;/code&gt; 는 IO :: Handle에 대한 버퍼링 정책을 설정합니다. 버퍼 매개 변수가 버퍼로 사용할 스칼라 변수를 지정한다는 점을 제외하고 Perl 함수의 호출 시퀀스는 상수 &lt;code&gt;_IOFBF&lt;/code&gt; , &lt;code&gt;_IOLBF&lt;/code&gt; 및 &lt;code&gt;_IONBF&lt;/code&gt; 를 포함하여 C 대응 함수와 동일 합니다. I / O 전이나 flush를 호출 한 직후에만 버퍼를 변경해야합니다.</target>
        </trans-unit>
        <trans-unit id="cb7a6c24ac237588ebe82997b3227d4077970889" translate="yes" xml:space="preserve">
          <source>If the FHCRC bit is set in the gzip FLG header byte, the CRC16 bytes in the header must match the crc16 value of the gzip header actually read.</source>
          <target state="translated">FHCRC 비트가 gzip FLG 헤더 바이트에 설정된 경우 헤더의 CRC16 바이트는 실제로 읽은 gzip 헤더의 crc16 값과 일치해야합니다.</target>
        </trans-unit>
        <trans-unit id="716df9a8cd6dfb775c171f4188701d3aabf993bd" translate="yes" xml:space="preserve">
          <source>If the PATTERN contains &lt;a href=&quot;../perlretut#Grouping-things-and-hierarchical-matching&quot;&gt;capturing groups&lt;/a&gt;, then for each separator, an additional field is produced for each substring captured by a group (in the order in which the groups are specified, as per &lt;a href=&quot;../perlretut#Backreferences&quot;&gt;backreferences&lt;/a&gt;); if any group does not match, then it captures the &lt;code&gt;&lt;a href=&quot;undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; value instead of a substring. Also, note that any such additional field is produced whenever there is a separator (that is, whenever a split occurs), and such an additional field does &lt;b&gt;not&lt;/b&gt; count towards the LIMIT. Consider the following expressions evaluated in list context (each returned list is provided in the associated comment):</source>
          <target state="translated">PATTERN에 &lt;a href=&quot;../perlretut#Grouping-things-and-hierarchical-matching&quot;&gt;캡처 그룹이&lt;/a&gt; 포함 된 경우 각 구분 기호에 대해 그룹에 의해 캡처 된 각 하위 문자열에 대한 추가 필드가 생성됩니다 ( &lt;a href=&quot;../perlretut#Backreferences&quot;&gt;역 참조에&lt;/a&gt; 따라 그룹이 지정된 순서대로 ). 그룹이 일치하지 않으면 하위 문자열 대신 &lt;code&gt;&lt;a href=&quot;undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; 값을 캡처합니다 . 또한 이러한 추가 필드는 구분 기호가있을 때마다 (즉, 분할이 발생할 때마다) 생성되며 이러한 추가 필드는 LIMIT에 포함 되지 &lt;b&gt;않습니다&lt;/b&gt; . 목록 컨텍스트에서 평가 된 다음 표현식을 고려하십시오 (각 리턴 된 목록은 연관된 주석에 제공됨).</target>
        </trans-unit>
        <trans-unit id="82d842f2ab3731c9a4a0e7946b2b84aa92b80adc" translate="yes" xml:space="preserve">
          <source>If the PATTERN contains &lt;a href=&quot;perlretut#Grouping-things-and-hierarchical-matching&quot;&gt;capturing groups&lt;/a&gt;, then for each separator, an additional field is produced for each substring captured by a group (in the order in which the groups are specified, as per &lt;a href=&quot;perlretut#Backreferences&quot;&gt;backreferences&lt;/a&gt;); if any group does not match, then it captures the &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; value instead of a substring. Also, note that any such additional field is produced whenever there is a separator (that is, whenever a split occurs), and such an additional field does &lt;b&gt;not&lt;/b&gt; count towards the LIMIT. Consider the following expressions evaluated in list context (each returned list is provided in the associated comment):</source>
          <target state="translated">PATTERN에 &lt;a href=&quot;perlretut#Grouping-things-and-hierarchical-matching&quot;&gt;캡처 그룹이&lt;/a&gt; 포함 된 경우 각 구분 기호에 대해 그룹에 의해 캡처 된 각 하위 문자열에 대한 추가 필드가 생성됩니다 ( &lt;a href=&quot;perlretut#Backreferences&quot;&gt;역 참조에&lt;/a&gt; 따라 그룹이 지정된 순서대로 ). 그룹이 일치하지 않으면 하위 문자열 대신 &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; 값을 캡처합니다 . 또한 이러한 추가 필드는 구분 기호가있을 때마다 (즉, 분할이 발생할 때마다) 생성되며 이러한 추가 필드는 LIMIT에 포함 되지 &lt;b&gt;않습니다&lt;/b&gt; . 목록 컨텍스트에서 평가 된 다음 표현식을 고려하십시오 (각 리턴 된 목록은 연관된 주석에 제공됨).</target>
        </trans-unit>
        <trans-unit id="4e7443d40abaa23829b9ab709311a1922fe461b6" translate="yes" xml:space="preserve">
          <source>If the PERL_PV_PRETTY_ELLIPSES flag is set and not all characters in string were output then an ellipsis &lt;code&gt;...&lt;/code&gt; will be appended to the string. Note that this happens AFTER it has been quoted.</source>
          <target state="translated">PERL_PV_PRETTY_ELLIPSES 플래그가 설정되고 문자열의 모든 문자가 출력되지 않은 경우 줄임표 ( &lt;code&gt;...&lt;/code&gt; ) 가 문자열에 추가됩니다. 이것은 인용 된 후에 발생합니다.</target>
        </trans-unit>
        <trans-unit id="09680d261a6a88f2e5836c919a2510509957b1e5" translate="yes" xml:space="preserve">
          <source>If the PERL_PV_PRETTY_QUOTE flag is set then the result will be double quoted with any double quotes in the string escaped. Otherwise if the PERL_PV_PRETTY_LTGT flag is set then the result be wrapped in angle brackets.</source>
          <target state="translated">PERL_PV_PRETTY_QUOTE 플래그가 설정되면 문자열에서 이스케이프 된 큰 따옴표와 함께 결과가 큰 따옴표로 표시됩니다. 그렇지 않으면 PERL_PV_PRETTY_LTGT 플래그가 설정된 경우 결과는 꺾쇠 괄호로 묶습니다.</target>
        </trans-unit>
        <trans-unit id="b990fe2846203877eedfbcf554045c1e773431f8" translate="yes" xml:space="preserve">
          <source>If the POD is inconsistent about the indentation of verbatim blocks, but you have figured out a heuristic to determine how much a particular verbatim block is indented, you can pass a code reference instead. The code reference will be executed with one argument, an array reference of all the lines in the verbatim block, and should return the value to be stripped from each line. For example, if you decide that you're fine to use the first line of the verbatim block to set the standard for indentation of the rest of the block, you can look at the first line and return the appropriate value, like so:</source>
          <target state="translated">POD가 동사 블록 들여 쓰기에 대해 일관성이 없지만 특정 동사 블록 들여 쓰기 정도를 결정하는 휴리스틱을 찾은 경우 대신 코드 참조를 전달할 수 있습니다. 코드 참조는 하나의 인수, 즉 동사 블록의 모든 행에 대한 배열 참조로 실행되며 각 행에서 제거 할 값을 반환해야합니다. 예를 들어, 동사 블록의 첫 번째 줄을 사용하여 나머지 블록의 들여 쓰기에 대한 표준을 설정하는 것이 좋다고 결정한 경우 첫 번째 줄을보고 적절한 값을 반환 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e9fd97e2c853d040e2b1f08382eba5acd7317a9d" translate="yes" xml:space="preserve">
          <source>If the POD source does not include an &lt;code&gt;=encoding&lt;/code&gt; declaration, the parser will attempt to guess the encoding (selecting one of UTF-8 or Latin-1) by examining the first non-ASCII bytes and applying the heuristic described in &lt;a href=&quot;../perlpodspec&quot;&gt;perlpodspec&lt;/a&gt;.</source>
          <target state="translated">POD 소스에 &lt;code&gt;=encoding&lt;/code&gt; 선언이 포함되어 있지 않으면 파서는 ASCII가 아닌 첫 번째 바이트를 검사하고 &lt;a href=&quot;../perlpodspec&quot;&gt;perlpodspec에&lt;/a&gt; 설명 된 휴리스틱을 적용하여 인코딩 (UTF-8 또는 Latin-1 중 하나를 선택)을 추측합니다 .</target>
        </trans-unit>
        <trans-unit id="539121ee50a224917b8fad7fe828de50a4356761" translate="yes" xml:space="preserve">
          <source>If the POD you're parsing adheres to a consistent indentation policy, you can have such indentation stripped from the beginning of every line of your verbatim blocks. This method tells Pod::Simple what to strip. For two-space indents, you'd use:</source>
          <target state="translated">구문 분석중인 POD가 일관된 들여 쓰기 정책을 준수하는 경우 동사 블록의 모든 줄의 시작 부분에서 이러한 들여 쓰기를 제거 할 수 있습니다. 이 방법은 Pod :: Simple에게 무엇을 제거할지 알려줍니다. 두 칸 들여 쓰기의 경우 다음을 사용합니다.</target>
        </trans-unit>
        <trans-unit id="767d61bbd817028665e597ffd44d52d2f3072a5a" translate="yes" xml:space="preserve">
          <source>If the PV of the SV is an octet sequence in UTF-8 and contains a multiple-byte character, the &lt;code&gt;SvUTF8&lt;/code&gt; flag is turned on so that it looks like a character. If the PV contains only single-byte characters, the &lt;code&gt;SvUTF8&lt;/code&gt; flag stays off. Scans PV for validity and returns false if the PV is invalid UTF-8.</source>
          <target state="translated">SV의 PV가 UTF-8의 8 진수 시퀀스이고 멀티 바이트 문자를 포함하는 경우 &lt;code&gt;SvUTF8&lt;/code&gt; 플래그가 켜져 문자처럼 보입니다. PV에 1 바이트 문자 만 포함 된 경우 &lt;code&gt;SvUTF8&lt;/code&gt; 플래그는 꺼져 있습니다. PV가 유효한지 검사하고 PV가 유효하지 않은 UTF-8이면 false를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="5ce916c1cc7717c4e805155c2d7548fbc24c77ee" translate="yes" xml:space="preserve">
          <source>If the Perl script is being executed as &lt;code&gt;perl scriptname&lt;/code&gt; , then the &lt;b&gt;-%c&lt;/b&gt; option must appear on the command line: &lt;code&gt;perl -%c scriptname&lt;/code&gt;.</source>
          <target state="translated">Perl 스크립트가 &lt;code&gt;perl scriptname&lt;/code&gt; 으로 실행 되면 &lt;b&gt;-% c&lt;/b&gt; 옵션이 명령 행에 표시되어야합니다 ( &lt;code&gt;perl -%c scriptname&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="fde4187a6aa163d9c96f574141763bdd38ae34f7" translate="yes" xml:space="preserve">
          <source>If the Perl script is being executed as a command using the #! mechanism (or its local equivalent), this error can usually be fixed by editing the #! line so that the &lt;b&gt;-%c&lt;/b&gt; option is a part of Perl's first argument: e.g. change &lt;code&gt;perl -n -%c&lt;/code&gt; to &lt;code&gt;perl -%c -n&lt;/code&gt; .</source>
          <target state="translated">Perl 스크립트가 #! 명령을 사용하여 명령으로 실행되는 경우 메커니즘 (또는 그에 상응하는 부분)의 경우이 오류는 일반적으로 #! &lt;b&gt;-% c&lt;/b&gt; 옵션이 Perl의 첫 번째 인수의 일부가 되도록하십시오 . 예를 들어 &lt;code&gt;perl -n -%c&lt;/code&gt; 를 &lt;code&gt;perl -%c -n&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="3c878ced38c4f673dcc4c3921e7ce406e54b4b71" translate="yes" xml:space="preserve">
          <source>If the README file seems to be getting too large you may wish to split out some of the sections into separate files: INSTALL, Copying, ToDo etc.</source>
          <target state="translated">README 파일이 너무 커 보인다면 일부 섹션을 INSTALL, Copying, ToDo 등의 별도 파일로 분할 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="bcda0ef071779fc235b5cd85b1d75a393d7ae1e4" translate="yes" xml:space="preserve">
          <source>If the Time::HiRes module has been installed, you can specify the special tag &lt;code&gt;:hireswallclock&lt;/code&gt; for Benchmark (if Time::HiRes is not available, the tag will be silently ignored). This tag will cause the wallclock time to be measured in microseconds, instead of integer seconds. Note though that the speed computations are still conducted in CPU time, not wallclock time.</source>
          <target state="translated">Time :: HiRes 모듈이 설치된 경우 벤치 마크에 특수 태그 &lt;code&gt;:hireswallclock&lt;/code&gt; 을 지정할 수 있습니다 (Time :: HiRes를 사용할 수없는 경우 태그는 자동으로 무시됩니다). 이 태그는 벽시계 시간이 정수 초가 아닌 마이크로 초 단위로 측정되게합니다. 속도 계산은 여전히 ​​벽시계 시간이 아니라 CPU 시간으로 수행됩니다.</target>
        </trans-unit>
        <trans-unit id="1e0de044d27a1f06d198fa6cd4b199e7a501a7e3" translate="yes" xml:space="preserve">
          <source>If the UNTIE method exists then the warning above does not occur. Instead the UNTIE method is passed the count of &quot;extra&quot; references and can issue its own warning if appropriate. e.g. to replicate the no UNTIE case this method can be used:</source>
          <target state="translated">UNTIE 방법이 존재하면 위의 경고가 발생하지 않습니다. 대신 UNTIE 방법에는 &quot;추가&quot;참조 수가 전달되며 적절한 경우 자체 경고를 발행 할 수 있습니다. 예를 들어 UNTIE가 아닌 경우를 복제하기 위해이 방법을 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="afcfedf6cd11f719819da193333a7cf6de0732a7" translate="yes" xml:space="preserve">
          <source>If the VERSION argument is present between Module and LIST, then the &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt;&lt;/code&gt; will call the VERSION method in class Module with the given version as an argument. The default VERSION method, inherited from the UNIVERSAL class, croaks if the given version is larger than the value of the variable &lt;code&gt;$Module::VERSION&lt;/code&gt; .</source>
          <target state="translated">버전 인수가 모듈 및 LIST 사이에 존재하는 경우, &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt;&lt;/code&gt; 인수로 주어진 버전으로 클래스 모듈의 버전 메소드를 호출합니다. 지정된 버전이 &lt;code&gt;$Module::VERSION&lt;/code&gt; 변수의 값보다 크면 UNIVERSAL 클래스에서 상속 된 기본 VERSION 메소드가 크로 킹됩니다 .</target>
        </trans-unit>
        <trans-unit id="28fd8c6bb88e030936b47d8b396e97702a34b855" translate="yes" xml:space="preserve">
          <source>If the VERSION argument is present between Module and LIST, then the &lt;code&gt;&lt;a href=&quot;use&quot;&gt;use&lt;/a&gt;&lt;/code&gt; will call the VERSION method in class Module with the given version as an argument. The default VERSION method, inherited from the UNIVERSAL class, croaks if the given version is larger than the value of the variable &lt;code&gt;$Module::VERSION&lt;/code&gt; .</source>
          <target state="translated">버전 인수가 모듈 및 LIST 사이에 존재하는 경우, &lt;code&gt;&lt;a href=&quot;use&quot;&gt;use&lt;/a&gt;&lt;/code&gt; 인수로 주어진 버전으로 클래스 모듈의 버전 메소드를 호출합니다. 지정된 버전이 &lt;code&gt;$Module::VERSION&lt;/code&gt; 변수의 값보다 크면 UNIVERSAL 클래스에서 상속 된 기본 VERSION 메소드가 크로 킹됩니다 .</target>
        </trans-unit>
        <trans-unit id="333bd150f2ebb931ff98dd0682381076be3b30d6" translate="yes" xml:space="preserve">
          <source>If the XSUB has a return type of &lt;code&gt;void&lt;/code&gt; then the compiler will not declare a RETVAL variable for that function. When using a PPCODE: section no manipulation of the RETVAL variable is required, the section may use direct stack manipulation to place output values on the stack.</source>
          <target state="translated">XSUB의 반환 유형이 &lt;code&gt;void&lt;/code&gt; 이면 컴파일러는 해당 함수에 대한 RETVAL 변수를 선언하지 않습니다. PPCODE : 섹션을 사용할 때 RETVAL 변수를 조작 할 필요가없는 경우 섹션은 직접 스택 조작을 사용하여 출력 값을 스택에 배치 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="bebee72fc9aa0a9b169227a410e90f7f3df000ed" translate="yes" xml:space="preserve">
          <source>If the above does not work, or is not adequate for your application, then file a bug report on &lt;a href=&quot;http://rt.cpan.org/Public/&quot;&gt;http://rt.cpan.org/Public/&lt;/a&gt; against the problematic module.</source>
          <target state="translated">위의 방법으로 작동하지 않거나 응용 프로그램에 적합하지 않은 경우 &lt;a href=&quot;http://rt.cpan.org/Public/&quot;&gt;http://rt.cpan.org/Public/&lt;/a&gt; 에 문제가있는 모듈 에 대한 버그 보고서를 제출 하십시오.</target>
        </trans-unit>
        <trans-unit id="77f8b1f2470978bb7eb295cba54688c501c99623" translate="yes" xml:space="preserve">
          <source>If the above evaluates as true, the following methods will be available on the &lt;code&gt;$result&lt;/code&gt; object.</source>
          <target state="translated">위의 내용이 true로 평가되면 &lt;code&gt;$result&lt;/code&gt; 객체 에서 다음 방법을 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="3626e8a47b75cd9814f9aabb6f3226e20a12cd72" translate="yes" xml:space="preserve">
          <source>If the act of unimporting your module (via a &lt;code&gt;&lt;a href=&quot;../functions/no&quot;&gt;no&lt;/a&gt;&lt;/code&gt;) should cause source code filtering to cease, create an &lt;code&gt;unimport&lt;/code&gt; subroutine, and have it call &lt;code&gt;filter_del&lt;/code&gt; . Make sure that the call to &lt;code&gt;filter_read&lt;/code&gt; or &lt;code&gt;filter_read_exact&lt;/code&gt; in step 5 will not accidentally read past the &lt;code&gt;&lt;a href=&quot;../functions/no&quot;&gt;no&lt;/a&gt;&lt;/code&gt;. Effectively this limits source code filters to line-by-line operation, unless the &lt;code&gt;&lt;a href=&quot;../functions/import&quot;&gt;import&lt;/a&gt;&lt;/code&gt; subroutine does some fancy pre-pre-parsing of the source code it's filtering.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;../functions/no&quot;&gt;no&lt;/a&gt;&lt;/code&gt; 를 통해 모듈을 가져 오는 작업으로 인해 소스 코드 필터링이 중단되면 가져 &lt;code&gt;unimport&lt;/code&gt; 서브 루틴을 작성하고 &lt;code&gt;filter_del&lt;/code&gt; 을 호출 하십시오 . 확인에 대한 호출 확인 &lt;code&gt;filter_read&lt;/code&gt; 또는 &lt;code&gt;filter_read_exact&lt;/code&gt; 5 단계에서 실수로 과거 읽지 않습니다 &lt;code&gt;&lt;a href=&quot;../functions/no&quot;&gt;no&lt;/a&gt;&lt;/code&gt; . &lt;code&gt;&lt;a href=&quot;../functions/import&quot;&gt;import&lt;/a&gt;&lt;/code&gt; 서브 루틴이 필터링하는 소스 코드의 사전 사전 분석을 수행하지 않는 한 효과적으로 소스 코드 필터를 라인 단위로 제한 합니다.</target>
        </trans-unit>
        <trans-unit id="f14d384ae54d7fd6956617c902dc52b4f7c913e2" translate="yes" xml:space="preserve">
          <source>If the archive creation fails for any reason, &lt;code&gt;create_archive&lt;/code&gt; will return false. Please use the &lt;code&gt;error&lt;/code&gt; method to find the cause of the failure.</source>
          <target state="translated">어떤 이유로 든 아카이브 작성에 실패하면 &lt;code&gt;create_archive&lt;/code&gt; 는 false를 리턴합니다. &lt;code&gt;error&lt;/code&gt; 의 원인을 찾으 려면 오류 방법을 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="bdb2a47c2b4d923874ce10a47d541cda074eec3d" translate="yes" xml:space="preserve">
          <source>If the argument has any characters in it other than those matching &lt;code&gt;\w&lt;/code&gt; , &lt;code&gt;:&lt;/code&gt; or &lt;code&gt;'&lt;/code&gt;, it must be a file</source>
          <target state="translated">인수에 &lt;code&gt;\w&lt;/code&gt; , &lt;code&gt;:&lt;/code&gt; 또는 &lt;code&gt;'&lt;/code&gt; 와 일치하는 문자 이외의 문자가 있으면 파일이어야합니다.</target>
        </trans-unit>
        <trans-unit id="6ad412a6b0ecba8c1d6ad813bdece11aeaddeb49" translate="yes" xml:space="preserve">
          <source>If the argument is &quot;/cygdrive&quot;, then just the volume mount settings, and the cygdrive mount prefix are returned.</source>
          <target state="translated">인수가 &quot;/ cygdrive&quot;인 경우 볼륨 마운트 설정과 cygdrive 마운트 접두사 만 리턴됩니다.</target>
        </trans-unit>
        <trans-unit id="b2f2982f0afdcf62760763525865c85306c36f4e" translate="yes" xml:space="preserve">
          <source>If the argument is a compiled regular expression as returned by &lt;code&gt;&lt;a href=&quot;functions/qr&quot;&gt;qr//&lt;/a&gt;&lt;/code&gt;, then this function returns the pattern.</source>
          <target state="translated">인수가 &lt;code&gt;&lt;a href=&quot;functions/qr&quot;&gt;qr//&lt;/a&gt;&lt;/code&gt; 의해 리턴 된 컴파일 된 정규식 인 경우이 함수는 패턴을 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="7b654339779464179184dbeba32e40251c7e2e80" translate="yes" xml:space="preserve">
          <source>If the argument is a compiled regular expression as returned by &lt;code&gt;&lt;a href=&quot;functions/qr&quot;&gt;qr//&lt;/a&gt;&lt;/code&gt;, then this function returns what the optimiser considers to be the longest anchored fixed string and longest floating fixed string in the pattern.</source>
          <target state="translated">인수가 &lt;code&gt;&lt;a href=&quot;functions/qr&quot;&gt;qr//&lt;/a&gt;&lt;/code&gt; 의해 리턴 된 컴파일 된 정규식 인 경우, 이 함수는 옵티마이 저가 패턴에서 가장 긴 고정 고정 문자열 및 가장 긴 부동 고정 문자열로 간주하는 것을 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="5788205c6ad8a4a8ebfb81bffe26f845a9b7bbcb" translate="yes" xml:space="preserve">
          <source>If the argument is a distribution file name (recognized by embedded slashes), it is processed. If it is a module, CPAN determines the distribution file in which this module is included and processes that, following any dependencies named in the module's META.yml or Makefile.PL (this behavior is controlled by the configuration parameter &lt;code&gt;prerequisites_policy&lt;/code&gt; ). If an argument is enclosed in slashes it is treated as a regular expression: it is expanded and if the result is a single object (distribution, bundle or module), this object is processed.</source>
          <target state="translated">인수가 분산 파일 이름 인 경우 (내장 슬래시로 인식) 처리됩니다. 모듈 인 경우 CPAN은이 모듈이 포함 된 분배 파일을 판별하고 모듈의 META.yml 또는 Makefile.PL에 이름 지정된 종속성에 따라이를 처리합니다 (이 동작은 구성 매개 변수 &lt;code&gt;prerequisites_policy&lt;/code&gt; 에 의해 제어 됨 ). 인수가 슬래시로 묶인 경우 일반 표현식으로 처리됩니다. 인수가 확장되고 결과가 단일 오브젝트 (분포, 번들 또는 모듈) 인 경우이 오브젝트가 처리됩니다.</target>
        </trans-unit>
        <trans-unit id="b117f48b026da0b0825304f95daf71b17bbf61f6" translate="yes" xml:space="preserve">
          <source>If the argument matches only &lt;code&gt;[\w:']&lt;/code&gt;, it must be a module</source>
          <target state="translated">인수가 &lt;code&gt;[\w:']&lt;/code&gt; 만 일치 하면 모듈이어야합니다.</target>
        </trans-unit>
        <trans-unit id="0af3cf093a2df4958131449dc2e48cabc581ef28" translate="yes" xml:space="preserve">
          <source>If the argument matches only &lt;code&gt;\w&lt;/code&gt; , it could either be a module or a file. We will try to find &lt;code&gt;file.pm&lt;/code&gt; first in &lt;code&gt;@INC&lt;/code&gt; and if that fails, we will try to find &lt;code&gt;file&lt;/code&gt; in @INC. If both fail, we die with the respective error messages.</source>
          <target state="translated">인수가 &lt;code&gt;\w&lt;/code&gt; 만 일치 하면 모듈 또는 파일 일 수 있습니다. &lt;code&gt;@INC&lt;/code&gt; 에서 먼저 &lt;code&gt;file.pm&lt;/code&gt; 을 찾으려고 시도 하고 실패하면 @INC에서 &lt;code&gt;file&lt;/code&gt; 을 찾으려고 시도합니다 . 둘 다 실패하면 각각의 오류 메시지로 죽습니다.</target>
        </trans-unit>
        <trans-unit id="950fc5f071c3850318ce53caaa9abf5b8d7e4b09" translate="yes" xml:space="preserve">
          <source>If the argument ops disagree with the prototype, for example by having an unacceptable number of arguments, a valid op tree is returned anyway. The error is reflected in the parser state, normally resulting in a single exception at the top level of parsing which covers all the compilation errors that occurred. In the error message, the callee is referred to by the name defined by the</source>
          <target state="translated">예를 들어 수용 할 수없는 수의 인수를 사용하여 인수 op가 프로토 타입에 동의하지 않으면 유효한 op 트리가 반환됩니다. 오류는 파서 상태에 반영되어 일반적으로 발생하는 모든 컴파일 오류를 포괄하는 최상위 수준의 구문 분석에서 단일 예외를 발생시킵니다. 오류 메시지에서 수신자는</target>
        </trans-unit>
        <trans-unit id="0d4e5120bb33dd7cd87d33b762323635453284d3" translate="yes" xml:space="preserve">
          <source>If the argument to &lt;code&gt;charblock()&lt;/code&gt; is not a known block, &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; is returned.</source>
          <target state="translated">&lt;code&gt;charblock()&lt;/code&gt; 대한 인수가 알려진 블록이 아닌 경우 &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; 가 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="d7830cf54412f961c402c681fff76496d227d2f2" translate="yes" xml:space="preserve">
          <source>If the attribute name is unqualified, the attribute is installed in the current package. Otherwise it is installed in the qualifier's package:</source>
          <target state="translated">속성 이름이 규정되지 않은 경우 속성은 현재 패키지에 설치됩니다. 그렇지 않으면 한정자 패키지에 설치됩니다.</target>
        </trans-unit>
        <trans-unit id="c1735572aa151643b864cff0b5bfb1e1bb6554fd" translate="yes" xml:space="preserve">
          <source>If the author's vision of the future of their module is sufficiently different from the vision of the pumpkin holder and perl5-porters as a whole so as to cause serious problems for Perl, the pumpkin holder may choose to formally fork the version of the module in the Perl core from the one maintained by the author. This should not be done lightly and should &lt;b&gt;always&lt;/b&gt; if at all possible be done only after direct input from Larry. If this is done, it must then be made explicit in the module as distributed with the Perl core that it is a forked version and that while it is based on the original author's work, it is no longer maintained by them. This must be noted in both the documentation and in the comments in the source of the module.</source>
          <target state="translated">모듈의 미래에 대한 저자의 비전이 호박 홀더 및 perl5 포터의 비전과 완전히 다르면 Perl에 심각한 문제가 발생할 수 있습니다. 호박 홀더는 모듈 버전을 공식적으로 포크하도록 선택할 수 있습니다. 저자가 관리하는 Perl 코어. 이 가볍게해서는 안해야하고 &lt;b&gt;항상&lt;/b&gt; 경우 가능한 모든에서만 래리에서 직접 입력 한 후 수행 할 수. 이 작업이 완료되면 포크 버전이며 Perl 코어와 함께 배포 된 모듈에서 명시 적으로 작성해야하며 원래 작성자의 작업을 기반으로하므로 더 이상 유지 관리되지 않습니다. 이것은 문서와 모듈 소스의 주석 모두에 언급되어야합니다.</target>
        </trans-unit>
        <trans-unit id="1ff96c964c43432c71bf023f75aff4edc100165c" translate="yes" xml:space="preserve">
          <source>If the backslash is followed by a single digit, it's a backreference.</source>
          <target state="translated">백 슬래시 다음에 한 자리 숫자가 오는 경우 역 참조입니다.</target>
        </trans-unit>
        <trans-unit id="a1567cb832ddb83a0b923a12411e03c46deba90f" translate="yes" xml:space="preserve">
          <source>If the beginning of some prebuilt path matches</source>
          <target state="translated">사전 빌드 된 경로의 시작이 일치하는 경우</target>
        </trans-unit>
        <trans-unit id="10167b28b5bd2cad97967630ae689888c6716c8a" translate="yes" xml:space="preserve">
          <source>If the block of code given to &lt;a href=&quot;#pairmap&quot;&gt;pairmap&lt;/a&gt; contains lexical variables that are captured by a returned closure, and the closure is executed after the block has been re-used for the next iteration, these lexicals will not see the correct values. For example:</source>
          <target state="translated">&lt;a href=&quot;#pairmap&quot;&gt;pairmap에&lt;/a&gt; 제공된 코드 블록에 리턴 된 클로저가 캡처 한 어휘 변수가 포함되어 있고 다음 반복에 블록을 재사용 한 후 클로저가 실행되면 이러한 어휘는 올바른 값을 볼 수 없습니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="440a5d8f345e7d80a2856dd0eeb83f250fbc92a1" translate="yes" xml:space="preserve">
          <source>If the byte length &lt;code&gt;l1&lt;/code&gt; is non-zero, it says how far into &lt;code&gt;s1&lt;/code&gt; to check for fold equality. In other words, &lt;code&gt;s1&lt;/code&gt; +&lt;code&gt;l1&lt;/code&gt; will be used as a goal to reach. The scan will not be considered to be a match unless the goal is reached, and scanning won't continue past that goal. Correspondingly for &lt;code&gt;l2&lt;/code&gt; with respect to &lt;code&gt;s2&lt;/code&gt; .</source>
          <target state="translated">바이트 길이 &lt;code&gt;l1&lt;/code&gt; 이 0이 아닌 경우, &lt;code&gt;s1&lt;/code&gt; 에서 fold equality를 확인하기위한 거리를 나타 냅니다. 즉, &lt;code&gt;s1&lt;/code&gt; + &lt;code&gt;l1&lt;/code&gt; 이 도달 목표로 사용됩니다. 목표에 도달하지 않으면 스캔이 일치하는 것으로 간주되지 않으며 해당 목표를 지나서도 스캔이 계속되지 않습니다. &lt;code&gt;s2&lt;/code&gt; 와 관련하여 &lt;code&gt;l2&lt;/code&gt; 에 해당합니다 .</target>
        </trans-unit>
        <trans-unit id="9b7b55adcf46426f8905247d52b7cd465b36f52b" translate="yes" xml:space="preserve">
          <source>If the c89 compiler complains of syntax errors during the build of the Socket extension then be sure to fix the syntax error in the system header /usr/include/sys/socket.h.</source>
          <target state="translated">소켓 확장을 빌드하는 동안 c89 컴파일러가 구문 오류를 불평하면 시스템 헤더 /usr/include/sys/socket.h에서 구문 오류를 수정하십시오.</target>
        </trans-unit>
        <trans-unit id="440bf862cd2a86e099efb047265c5fac0693c286" translate="yes" xml:space="preserve">
          <source>If the call is to an lvalue subroutine, and &lt;code&gt;&amp;amp;DB::lsub&lt;/code&gt; is defined &lt;code&gt;&amp;amp;DB::lsub&lt;/code&gt; (</source>
          <target state="translated">호출이 lvalue 서브 루틴에 대한 것이고 &lt;code&gt;&amp;amp;DB::lsub&lt;/code&gt; 가 정의 된 경우 &lt;code&gt;&amp;amp;DB::lsub&lt;/code&gt; (</target>
        </trans-unit>
        <trans-unit id="3e23c7323ae1871ee025af31121766b37b8d3a26" translate="yes" xml:space="preserve">
          <source>If the call to &lt;code&gt;load&lt;/code&gt; is from &lt;code&gt;YourPackage&lt;/code&gt; , then that can be further simplified to</source>
          <target state="translated">&lt;code&gt;load&lt;/code&gt; 호출 이 &lt;code&gt;YourPackage&lt;/code&gt; 에서 온 경우 다음과 같이 단순화 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5682bd082d01ef4bbac6126150d3b6f81612d0af" translate="yes" xml:space="preserve">
          <source>If the character following the backslash is an ASCII letter or an ASCII digit, then the sequence may be special; if so, it's listed below. A few letters have not been used yet, so escaping them with a backslash doesn't change them to be special. A future version of Perl may assign a special meaning to them, so if you have warnings turned on, Perl issues a warning if you use such a sequence. [1].</source>
          <target state="translated">백 슬래시 뒤의 문자가 ASCII 문자 또는 ASCII 숫자이면 시퀀스가 ​​특별 할 수 있습니다. 그렇다면 아래에 나열되어 있습니다. 몇 개의 문자가 아직 사용되지 않았으므로 백 슬래시로 이스케이프 처리해도 특수 문자로 변경되지는 않습니다. 이후 버전의 Perl은 특별한 의미를 부여 할 수 있으므로 경고를 설정 한 경우 이러한 순서를 사용하면 Perl에서 경고를 발행합니다. [1].</target>
        </trans-unit>
        <trans-unit id="da17f25e114b45ba4ef865a9786c813cdbdd1421" translate="yes" xml:space="preserve">
          <source>If the character is canonically decomposable (including Hangul Syllables), it returns the (full) canonical decomposition as a string. Otherwise it returns &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">문자가 정식 분해 가능한 경우 (한글 음절 포함) 정식 분해 (전체)를 문자열로 반환합니다. 그렇지 않으면 &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; 를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="68a39c4975b03ffeafb0215bb69dbcb4fdb18e47" translate="yes" xml:space="preserve">
          <source>If the character is compatibility decomposable (including Hangul Syllables), it returns the (full) compatibility decomposition as a string. Otherwise it returns &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">문자가 호환성 분해 가능 (한글 음절 포함) 인 경우 (완전한) 호환성 분해를 문자열로 반환합니다. 그렇지 않으면 &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; 를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="65221cae28ebb56c2b7e384de16ed70d718d62d1" translate="yes" xml:space="preserve">
          <source>If the child falls out of scope before &lt;code&gt;finalize&lt;/code&gt; is called, a failure diagnostic will be issued and the child is considered to have failed.</source>
          <target state="translated">전에 아이가 범위 밖으로 떨어지면 &lt;code&gt;finalize&lt;/code&gt; 호출, 고장 진단이 발행되고 아이가 실패한 것으로 간주됩니다.</target>
        </trans-unit>
        <trans-unit id="ddc80dbef3fa7a98447bcda86b6b6a922737dbbf" translate="yes" xml:space="preserve">
          <source>If the child process dies for any reason, the next write to CHLD_IN is likely to generate a SIGPIPE in the parent, which is fatal by default. So you may wish to handle this signal.</source>
          <target state="translated">어떤 이유로 하위 프로세스가 종료되면 CHLD_IN에 대한 다음 쓰기는 상위에서 SIGPIPE를 생성 할 가능성이 높으며 기본적으로 치명적입니다. 따라서이 신호를 처리 할 수 ​​있습니다.</target>
        </trans-unit>
        <trans-unit id="dbd5594c7134763067cde3b54f3bfaeaa68b552a" translate="yes" xml:space="preserve">
          <source>If the child process follows the convention of C programs compiled with the _POSIX_EXIT macro set, the status value will contain the actual value of 0 to 255 returned by that program on a normal exit.</source>
          <target state="translated">하위 프로세스가 _POSIX_EXIT 매크로 세트로 컴파일 된 C 프로그램의 규칙을 따르는 경우, 상태 값은 정상 종료시 해당 프로그램이 리턴 한 실제 값 0-255를 포함합니다.</target>
        </trans-unit>
        <trans-unit id="3a2359effbd1215640880aada1292b5fa0877c9a" translate="yes" xml:space="preserve">
          <source>If the class shown in &lt;a href=&quot;#SYNOPSIS&quot;&gt;SYNOPSIS&lt;/a&gt; were placed in the MyClass.pm module, then the following code:</source>
          <target state="translated">&lt;a href=&quot;#SYNOPSIS&quot;&gt;SYNOPSIS&lt;/a&gt; 에 표시된 클래스 가 MyClass.pm 모듈에 배치 된 경우 다음 코드는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="2f9ec72ad3a19d5c4b84af5eba887a50b7eef9b5" translate="yes" xml:space="preserve">
          <source>If the client asks for &quot;fr&quot;, that will look up successfully in %greetings, to the value &quot;Bonjour&quot;. And if the client asks for &quot;i-mingo&quot;, that will look up successfully in %greetings, to the value &quot;Hau'&quot;.</source>
          <target state="translated">클라이언트가 &quot;fr&quot;을 요청하면 % greetings에서 &quot;Bonjour&quot;값으로 성공적으로 조회됩니다. 그리고 클라이언트가 &quot;i-mingo&quot;를 요청하면, &quot;Hau&quot; &quot;값으로 % greetings에서 성공적으로 조회됩니다.</target>
        </trans-unit>
        <trans-unit id="1e012fb4a0052bc107066983e24cd424b0582af0" translate="yes" xml:space="preserve">
          <source>If the code point is unassigned, this returns the block it would belong to if it were assigned. (If the Unicode version being used is so early as to not have blocks, all code points are considered to be in &lt;code&gt;No_Block&lt;/code&gt; .)</source>
          <target state="translated">코드 포인트가 할당되지 않은 경우 할당 된 경우 해당 블록이 반환됩니다. (사용중인 유니 코드 버전이 블록을 갖지 않을 정도로 빠른 경우 모든 코드 포인트는 &lt;code&gt;No_Block&lt;/code&gt; 에있는 것으로 간주됩니다 .)</target>
        </trans-unit>
        <trans-unit id="ced2db748e9e7079888c75fca8f7175caebcea61" translate="yes" xml:space="preserve">
          <source>If the code to be executed doesn't vary, you may use the eval-BLOCK form to trap run-time errors without incurring the penalty of recompiling each time. The error, if any, is still returned in &lt;code&gt;$@&lt;/code&gt; . Examples:</source>
          <target state="translated">실행할 코드가 다르지 않은 경우 eval-BLOCK 양식을 사용하여 매번 재 컴파일의 불이익없이 런타임 오류를 잡을 수 있습니다. 오류가있는 경우 여전히 &lt;code&gt;$@&lt;/code&gt; 반환됩니다 . 예 :</target>
        </trans-unit>
        <trans-unit id="2bd498c74c7384947431c9fbfc4c96437164ae53" translate="yes" xml:space="preserve">
          <source>If the code to execute had been passed in as a string, &lt;code&gt;'$line = &amp;lt;STDIN&amp;gt;'&lt;/code&gt; , there would have been no way for the hypothetical timeout() function to access the lexical variable $line back in its caller's scope.</source>
          <target state="translated">실행할 코드가 &lt;code&gt;'$line = &amp;lt;STDIN&amp;gt;'&lt;/code&gt; 문자열로 전달 된 경우 가상 timeout () 함수가 호출자의 범위에서 어휘 변수 $ line에 다시 액세스 할 수있는 방법이 없었습니다.</target>
        </trans-unit>
        <trans-unit id="c5dcda0eb63d695c2273d9f58a5b27fc7e844c60" translate="yes" xml:space="preserve">
          <source>If the configurations variable &lt;code&gt;build_dir_reuse&lt;/code&gt; is set to a true value, then CPAN.pm reads the collected YAML files. If the stored signature matches the currently running perl, the stored state is loaded into memory such that persistence between sessions is effectively established.</source>
          <target state="translated">구성 변수 &lt;code&gt;build_dir_reuse&lt;/code&gt; 가 true 값으로 설정되면 CPAN.pm은 수집 된 YAML 파일을 읽습니다. 저장된 서명이 현재 실행중인 perl과 일치하면 저장된 상태는 메모리에로드되어 세션 간의 지속성이 효과적으로 설정됩니다.</target>
        </trans-unit>
        <trans-unit id="a91d44bc473043f072a494275450d9c876250d17" translate="yes" xml:space="preserve">
          <source>If the connection is via a firewall then the &lt;code&gt;authorize&lt;/code&gt; method will be called with no arguments.</source>
          <target state="translated">방화벽을 통한 연결 인 경우, &lt;code&gt;authorize&lt;/code&gt; 메소드가 인수없이 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="880ff18ec98ddcf514d383275dae13c355bbcadf" translate="yes" xml:space="preserve">
          <source>If the construct is a here-doc, the ending delimiter is a line that has a terminating string as the content. Therefore &lt;code&gt;&amp;lt;&amp;lt;EOF&lt;/code&gt; is terminated by &lt;code&gt;EOF&lt;/code&gt; immediately followed by &lt;code&gt;&quot;\n&quot;&lt;/code&gt; and starting from the first column of the terminating line. When searching for the terminating line of a here-doc, nothing is skipped. In other words, lines after the here-doc syntax are compared with the terminating string line by line.</source>
          <target state="translated">구문이 here-doc 인 경우 끝 구분 기호는 내용으로 종료 문자열이있는 줄입니다. 따라서 &lt;code&gt;&amp;lt;&amp;lt;EOF&lt;/code&gt; 는 종료된다 &lt;code&gt;EOF&lt;/code&gt; 바로 뒤에 &lt;code&gt;&quot;\n&quot;&lt;/code&gt; 과 종단 행의 첫 번째 열에서 시작. here-doc의 종료 라인을 검색 할 때 건너 뛰는 것이 없습니다. 즉, here-doc 구문 다음의 행은 종료 문자열과 한 행씩 비교됩니다.</target>
        </trans-unit>
        <trans-unit id="e1f5405c8fb7cef756ea27523f26d6d391697258" translate="yes" xml:space="preserve">
          <source>If the constructor fails undef will be returned and an error message will be in $@</source>
          <target state="translated">생성자가 실패하면 undef가 반환되고 오류 메시지는 $ @에 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="a03d6a855f28c1f0fcb373d36da3e2b752b1b618" translate="yes" xml:space="preserve">
          <source>If the constructor is only passed a single argument, it is assumed to be a &lt;code&gt;Peer&lt;/code&gt; specification.</source>
          <target state="translated">생성자에 단일 인수 만 전달되면 &lt;code&gt;Peer&lt;/code&gt; 스펙으로 간주됩니다 .</target>
        </trans-unit>
        <trans-unit id="59d6c514d80580b526f459658680b5bcb3039600" translate="yes" xml:space="preserve">
          <source>If the constructor is only passed a single argument, it is assumed to be a &lt;code&gt;PeerAddr&lt;/code&gt; specification.</source>
          <target state="translated">생성자에 단일 인수 만 전달되면 &lt;code&gt;PeerAddr&lt;/code&gt; 사양으로 간주됩니다 .</target>
        </trans-unit>
        <trans-unit id="2c1d4da7e238174b01de906293d93c6822b7ffed" translate="yes" xml:space="preserve">
          <source>If the count doesn't impress your friends, then the code might. :-)</source>
          <target state="translated">카운트가 친구에게 감동을주지 않으면 코드가 영향을 줄 수 있습니다. :-)</target>
        </trans-unit>
        <trans-unit id="e2812a31f32729d7d8acbab2252b618f1597089e" translate="yes" xml:space="preserve">
          <source>If the current directory is not writable, file is created using modified &lt;code&gt;tmpnam&lt;/code&gt; , so there may be a race condition.</source>
          <target state="translated">현재 디렉토리에 쓰기 가능하지 않은 경우 수정 된 &lt;code&gt;tmpnam&lt;/code&gt; 을 사용하여 파일이 작성 되므로 경쟁 조건이있을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="494e23aba89eecf5e12f5237686e230eddf4cf1f" translate="yes" xml:space="preserve">
          <source>If the current tests are considered &quot;TODO&quot; it will return the reason, if any. This reason can come from a &lt;code&gt;$TODO&lt;/code&gt; variable or the last call to &lt;code&gt;todo_start()&lt;/code&gt; .</source>
          <target state="translated">현재 테스트가 &quot;TODO&quot;로 간주되면 이유가있는 경우이를 반환합니다. 이 이유는 &lt;code&gt;$TODO&lt;/code&gt; 변수 또는 마지막 &lt;code&gt;todo_start()&lt;/code&gt; 호출에서 비롯 될 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="4dc2b173d8d4940a748b9c83e49e0862799d41a0" translate="yes" xml:space="preserve">
          <source>If the debugging output of &lt;code&gt;-D&lt;/code&gt; doesn't help you, it's time to step through perl's execution with a source-level debugger.</source>
          <target state="translated">&lt;code&gt;-D&lt;/code&gt; 의 디버깅 출력이 도움이되지 않으면 소스 레벨 디버거를 사용하여 perl의 실행을 단계별로 진행해야합니다.</target>
        </trans-unit>
        <trans-unit id="5d9b61b179e59a5faa76c718b44a80bf30b29231" translate="yes" xml:space="preserve">
          <source>If the deferred-write buffer isn't yet full, but the total size of the buffer and the read cache would exceed the &lt;code&gt;memory&lt;/code&gt; limit, the oldest records will be expired from the read cache until the total size is under the limit.</source>
          <target state="translated">지연 쓰기 버퍼가 아직 가득 차지 않았지만 버퍼 및 읽기 캐시의 총 크기가 &lt;code&gt;memory&lt;/code&gt; 제한을 초과 하면 총 크기가 한계 미만이 될 때까지 가장 오래된 레코드가 읽기 캐시에서 만료됩니다.</target>
        </trans-unit>
        <trans-unit id="2d787ba93d433e8611c0010f5b5125e21c2fae5b" translate="yes" xml:space="preserve">
          <source>If the delimiter chosen is a single quote, no interpolation is done on either the</source>
          <target state="translated">선택한 구분자가 작은 따옴표 인 경우에는</target>
        </trans-unit>
        <trans-unit id="fd691ad27529116a3a5593dc1f80d4b01d408999" translate="yes" xml:space="preserve">
          <source>If the destination (second argument) already exists and is a directory, and the source (first argument) is not a filehandle, then the source file will be copied into the directory specified by the destination, using the same base name as the source file. It's a failure to have a filehandle as the source when the destination is a directory.</source>
          <target state="translated">대상 (두 번째 인수)이 이미 있고 디렉토리이고 소스 (첫 번째 인수)가 파일 핸들이 아닌 경우 소스 파일은 소스 파일과 동일한 기본 이름을 사용하여 대상이 지정한 디렉토리로 복사됩니다. . 대상이 디렉토리 인 경우 파일 핸들을 소스로 사용하지 못했습니다.</target>
        </trans-unit>
        <trans-unit id="bf967ef029273cc2d212ca164cc9a8a6a20b4430" translate="yes" xml:space="preserve">
          <source>If the element type does not start with a &lt;code&gt;'*'&lt;/code&gt; , the accessor returns the element value (after assignment). If the element type starts with a &lt;code&gt;'*'&lt;/code&gt; , a reference to the element itself is returned.</source>
          <target state="translated">요소 유형이 &lt;code&gt;'*'&lt;/code&gt; 로 시작하지 않으면 접근자는 요소 값을 할당 후 반환합니다. 요소 유형이 &lt;code&gt;'*'&lt;/code&gt; 로 시작 하면 요소 자체에 대한 참조가 리턴됩니다.</target>
        </trans-unit>
        <trans-unit id="4e23930732591461e14ec21d8b1f90dcd530ad74" translate="yes" xml:space="preserve">
          <source>If the element type is &lt;code&gt;'$'&lt;/code&gt; , the value of the element (after assignment) is returned. If the element type is &lt;code&gt;'*$'&lt;/code&gt; , a reference to the element is returned.</source>
          <target state="translated">요소 유형이 &lt;code&gt;'$'&lt;/code&gt; 인 경우 (할당 후) 요소 값이 리턴됩니다. 요소 유형이 &lt;code&gt;'*$'&lt;/code&gt; 이면 요소에 대한 참조가 리턴됩니다.</target>
        </trans-unit>
        <trans-unit id="1bac597df37b35f3a7dd05dd8ec187e68ab2f23b" translate="yes" xml:space="preserve">
          <source>If the empty regex &lt;code&gt;//&lt;/code&gt; is used, the string is split into individual characters. If the regex has groupings, then the list produced contains the matched substrings from the groupings as well:</source>
          <target state="translated">빈 정규식 &lt;code&gt;//&lt;/code&gt; 을 사용하면 문자열이 개별 문자로 분할됩니다. 정규식에 그룹화가 있으면 생성 된 목록에 그룹과 일치하는 하위 문자열이 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="8e04e07bd20c824f00e23be10a97b35d7d8bdaf8" translate="yes" xml:space="preserve">
          <source>If the empty regexp &lt;code&gt;//&lt;/code&gt; is used, the regexp always matches and the string is split into individual characters. If the regexp has groupings, then the resulting list contains the matched substrings from the groupings as well. For instance,</source>
          <target state="translated">빈 정규 표현식 &lt;code&gt;//&lt;/code&gt; 을 사용하면 정규 표현식이 항상 일치하고 문자열이 개별 문자로 분할됩니다. 정규 표현식에 그룹이 있으면 결과 목록에 그룹의 일치하는 하위 문자열도 포함됩니다. 예를 들어</target>
        </trans-unit>
        <trans-unit id="9160efcd7b61ecdb5eab89bb5f1048b8690bd897" translate="yes" xml:space="preserve">
          <source>If the entereval op is permitted then the code can use eval &quot;...&quot; to 'hide' code which might use denied ops. This is not a major problem since when the code tries to execute the eval it will fail because the opmask is still in effect. However this technique would allow clever, and possibly harmful, code to 'probe' the boundaries of what is possible.</source>
          <target state="translated">entereval op가 허용되면 코드는 eval &quot;...&quot;을 사용하여 거부 된 op를 사용할 수있는 코드를 '숨길'수 있습니다. 코드가 eval을 실행하려고 할 때 opmask가 여전히 유효하기 때문에 실패하기 때문에 이것은 큰 문제가 아닙니다. 그러나이 기술은 영리하고 유해 할 수있는 코드를 통해 가능한 것의 경계를 '탐색'할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a6dd91d8fc44e261add22f788040f3b0d9653b9a" translate="yes" xml:space="preserve">
          <source>If the environment variable &lt;code&gt;PERL_TEST_HARNESS_DUMP_TAP&lt;/code&gt; is defined it should name a directory into which a copy of the raw TAP for each test will be written. TAP is written to files named for each test. Subdirectories will be created as needed.</source>
          <target state="translated">환경 변수 &lt;code&gt;PERL_TEST_HARNESS_DUMP_TAP&lt;/code&gt; 가 정의되면 각 테스트에 대한 원시 TAP 사본이 작성 될 디렉토리의 이름을 지정해야합니다. TAP는 각 테스트에 대해 명명 된 파일에 작성됩니다. 필요에 따라 서브 디렉토리가 작성됩니다.</target>
        </trans-unit>
        <trans-unit id="9e66c1c6198ecf06cc2142e9e5e1dd957bf8c18d" translate="yes" xml:space="preserve">
          <source>If the executable called by system()/exec()/pipe-open()/&lt;code&gt;``&lt;/code&gt; is a script with the &quot;magic&quot; &lt;code&gt;#!&lt;/code&gt; line or &lt;code&gt;extproc&lt;/code&gt; line which specifies shell;</source>
          <target state="translated">system () / exec () / pipe-open () / &lt;code&gt;``&lt;/code&gt; 에 의해 호출 된 실행 파일 이 &quot;magic&quot; &lt;code&gt;#!&lt;/code&gt; 쉘을 지정하는 라인 또는 &lt;code&gt;extproc&lt;/code&gt; 라인;</target>
        </trans-unit>
        <trans-unit id="2a754fbd5a5705920e61152dd8c6911b9ca9d965" translate="yes" xml:space="preserve">
          <source>If the executable called by system()/exec()/pipe-open()/&lt;code&gt;``&lt;/code&gt; is a script without &quot;magic&quot; line, and &lt;code&gt;$ENV{EXECSHELL}&lt;/code&gt; is set to shell;</source>
          <target state="translated">system () / exec () / pipe-open () / &lt;code&gt;``&lt;/code&gt; 에 의해 호출 된 실행 파일 이 &quot;magic&quot;줄이없는 스크립트이고 &lt;code&gt;$ENV{EXECSHELL}&lt;/code&gt; 이 shell로 설정되어있는 경우;</target>
        </trans-unit>
        <trans-unit id="6143c4a0521be912f40be9869aedf7b75cf3c5aa" translate="yes" xml:space="preserve">
          <source>If the executable called by system()/exec()/pipe-open()/&lt;code&gt;``&lt;/code&gt; is not found (is not this remark obsolete?);</source>
          <target state="translated">system () / exec () / pipe-open () / &lt;code&gt;``&lt;/code&gt; 에 의해 호출 된 실행 파일을 찾을 수없는 경우 (이 설명은 더 이상 사용되지 않습니까?);</target>
        </trans-unit>
        <trans-unit id="50b9d8b532d25e89b151dc2833716077761d9468" translate="yes" xml:space="preserve">
          <source>If the exit status used is less than 2, then output is printed on &lt;code&gt;STDOUT&lt;/code&gt; . Otherwise output is printed on &lt;code&gt;STDERR&lt;/code&gt; .</source>
          <target state="translated">사용 된 종료 상태가 2보다 작 으면 &lt;code&gt;STDOUT&lt;/code&gt; 에 출력이 인쇄됩니다 . 그렇지 않으면 출력이 &lt;code&gt;STDERR&lt;/code&gt; 에 인쇄됩니다 .</target>
        </trans-unit>
        <trans-unit id="48f5e0e5ea6330c7048648eb2edf1ad4ccc05a55" translate="yes" xml:space="preserve">
          <source>If the experimental &quot;bitwise&quot; feature is enabled (see &lt;a href=&quot;feature&quot;&gt;feature&lt;/a&gt;), a fifth TRUE argument is passed to subroutines handling &lt;code&gt;&amp;amp;&lt;/code&gt; , &lt;code&gt;|&lt;/code&gt;, &lt;code&gt;^&lt;/code&gt; and &lt;code&gt;~&lt;/code&gt; . This indicates that the caller is expecting numeric behaviour. The fourth argument will be &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt;, as that position (&lt;code&gt;$_[3]&lt;/code&gt; ) is reserved for use by &lt;a href=&quot;#nomethod&quot;&gt;nomethod&lt;/a&gt;.</source>
          <target state="translated">실험적인 &quot;비트 단위&quot;기능이 활성화 된 경우 ( &lt;a href=&quot;feature&quot;&gt;기능&lt;/a&gt; 참조 ), 다섯 번째 TRUE 인수는 &lt;code&gt;&amp;amp;&lt;/code&gt; , &lt;code&gt;|&lt;/code&gt; , &lt;code&gt;^&lt;/code&gt; 및 &lt;code&gt;~&lt;/code&gt; . 이것은 발신자가 숫자 동작을 기대하고 있음을 나타냅니다. 위치 ( &lt;code&gt;$_[3]&lt;/code&gt; )가 &lt;a href=&quot;#nomethod&quot;&gt;nomethod에&lt;/a&gt; 의해 예약되어 있으므로 네 번째 인수는 &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="8d70ab84f3a316c00496bd0dced7b93acc9fa6af" translate="yes" xml:space="preserve">
          <source>If the experimental &quot;bitwise&quot; feature is enabled via &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; feature
'bitwise'&lt;/code&gt; , then this operator always treats its operand as numbers. This feature produces a warning unless you also use &lt;code&gt;&lt;a href=&quot;functions/no&quot;&gt;no&lt;/a&gt; warnings
'experimental::bitwise'&lt;/code&gt; .</source>
          <target state="translated">실험 기능 &quot;비트 단위&quot;기능이 &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; feature 'bitwise'&lt;/code&gt; 을 &lt;a href=&quot;functions/use&quot;&gt;사용하여&lt;/a&gt; 활성화 된 경우이 연산자는 항상 피연산자를 숫자로 처리합니다. &lt;code&gt;&lt;a href=&quot;functions/no&quot;&gt;no&lt;/a&gt; warnings 'experimental::bitwise'&lt;/code&gt; 사용 &lt;a href=&quot;functions/no&quot;&gt;하지&lt;/a&gt; 않으면이 기능은 경고를 생성합니다 .</target>
        </trans-unit>
        <trans-unit id="429f3423b67c7b1e2fda19e3e61bde6079c26d75" translate="yes" xml:space="preserve">
          <source>If the experimental &quot;bitwise&quot; feature is enabled via &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; feature
'bitwise'&lt;/code&gt; , then unary &lt;code&gt;&quot;~&quot;&lt;/code&gt; always treats its argument as a number, and an alternate form of the operator, &lt;code&gt;&quot;~.&quot;&lt;/code&gt; , always treats its argument as a string. So &lt;code&gt;~0&lt;/code&gt; and &lt;code&gt;~&quot;0&quot;&lt;/code&gt; will both give 2**32-1 on 32-bit platforms, whereas &lt;code&gt;~.0&lt;/code&gt; and &lt;code&gt;~.&quot;0&quot;&lt;/code&gt; will both yield &lt;code&gt;&quot;\xff&quot;&lt;/code&gt; . This feature produces a warning unless you use &lt;code&gt;&lt;a href=&quot;functions/no&quot;&gt;no&lt;/a&gt; warnings 'experimental::bitwise'&lt;/code&gt; .</source>
          <target state="translated">실험 &quot;비트 단위&quot;기능이 &quot;bitwise&quot; &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; feature 'bitwise'&lt;/code&gt; 통해 활성화 된 경우 단항 &lt;code&gt;&quot;~&quot;&lt;/code&gt; 는 항상 인수를 숫자로 대체 연산자 인 &lt;code&gt;&quot;~.&quot;&lt;/code&gt; 항상 인수를 문자열로 취급합니다. 따라서 &lt;code&gt;~0&lt;/code&gt; 및 &lt;code&gt;~&quot;0&quot;&lt;/code&gt; 은 32 비트 플랫폼에서 2 ** 32-1을 제공하는 반면 &lt;code&gt;~.0&lt;/code&gt; 및 &lt;code&gt;~.&quot;0&quot;&lt;/code&gt; 은 &lt;code&gt;&quot;\xff&quot;&lt;/code&gt; 합니다. &lt;code&gt;&lt;a href=&quot;functions/no&quot;&gt;no&lt;/a&gt; warnings 'experimental::bitwise'&lt;/code&gt; 를 사용 &lt;a href=&quot;functions/no&quot;&gt;하지&lt;/a&gt; 않으면이 기능은 경고를 생성합니다 .</target>
        </trans-unit>
        <trans-unit id="44c964489535901a948a3b23073f9b9bb3c0a3e6" translate="yes" xml:space="preserve">
          <source>If the expression evaluates to a label name, its scope will be resolved dynamically. This allows for computed &lt;code&gt;&lt;a href=&quot;functions/goto&quot;&gt;goto&lt;/a&gt;&lt;/code&gt;s per FORTRAN, but isn't necessarily recommended if you're optimizing for maintainability:</source>
          <target state="translated">표현식이 레이블 이름으로 평가되면 해당 범위는 동적으로 해석됩니다. 이렇게하면 FORTRAN 당 계산 된 &lt;code&gt;&lt;a href=&quot;functions/goto&quot;&gt;goto&lt;/a&gt;&lt;/code&gt; 가 가능하지만 유지 관리 성을 최적화하는 경우 반드시 권장되는 것은 아닙니다.</target>
        </trans-unit>
        <trans-unit id="c0c3c70b730f0e2950f8179af548175b3c6ef32a" translate="yes" xml:space="preserve">
          <source>If the expression evaluates to a label name, its scope will be resolved dynamically. This allows for computed &lt;code&gt;&lt;a href=&quot;goto&quot;&gt;goto&lt;/a&gt;&lt;/code&gt;s per FORTRAN, but isn't necessarily recommended if you're optimizing for maintainability:</source>
          <target state="translated">표현식이 레이블 이름으로 평가되면 해당 범위는 동적으로 해석됩니다. 이렇게하면 FORTRAN 당 계산 된 &lt;code&gt;&lt;a href=&quot;goto&quot;&gt;goto&lt;/a&gt;&lt;/code&gt; 가 가능하지만 유지 관리 성을 최적화하는 경우 반드시 권장되는 것은 아닙니다.</target>
        </trans-unit>
        <trans-unit id="3a5f344d7e209018f81b3bb395e41710ea76000e" translate="yes" xml:space="preserve">
          <source>If the extension doesn't contain a &lt;code&gt;*&lt;/code&gt; , then it is appended to the end of the current filename as a suffix. If the extension does contain one or more &lt;code&gt;*&lt;/code&gt; characters, then each &lt;code&gt;*&lt;/code&gt; is replaced with the current filename. In Perl terms, you could think of this as:</source>
          <target state="translated">확장자에 &lt;code&gt;*&lt;/code&gt; 가 포함되어 있지 않으면 현재 파일 이름 끝에 접미사로 추가됩니다. 확장자에 하나 이상의 &lt;code&gt;*&lt;/code&gt; 문자 가 포함되어 있으면 각 &lt;code&gt;*&lt;/code&gt; 가 현재 파일 이름으로 바뀝니다. Perl 용어로 다음과 같이 생각할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="912122ed04813ef6afa69c21de9ff5d7b9578a1b" translate="yes" xml:space="preserve">
          <source>If the extension links to a library that it builds, set this to the name of the library (see SDBM_File)</source>
          <target state="translated">확장이 빌드 한 라이브러리에 링크 된 경우이를 라이브러리 이름으로 설정하십시오 (SDBM_File 참조).</target>
        </trans-unit>
        <trans-unit id="d3a643174ddd0d9876c30f4ff9ae6dc788ca282c" translate="yes" xml:space="preserve">
          <source>If the extension might need extra libraries, they should be included here. The extension Makefile.PL will take care of checking whether the libraries actually exist and how they should be loaded. The extra libraries should be specified in the form -lm -lposix, etc, just as on the cc command line. By default, the Makefile.PL will search through the library path determined by Configure. That path can be augmented by including arguments of the form &lt;b&gt;-L/another/library/path&lt;/b&gt; in the extra-libraries argument.</source>
          <target state="translated">확장에 추가 라이브러리가 필요할 경우 여기에 포함시켜야합니다. 확장명 Makefile.PL은 라이브러리가 실제로 존재하는지 그리고 어떻게로드되어야하는지 점검합니다. 추가 라이브러리는 cc 명령 행에서와 같이 -lm -lposix 등의 형식으로 지정해야합니다. 기본적으로 Makefile.PL은 Configure에 의해 결정된 라이브러리 경로를 검색합니다. 추가 경로 인수에 &lt;b&gt;-L / another / library / path&lt;/b&gt; 형식의 인수를 포함 시켜서 해당 경로를 확장 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="effa256cfcef0cdd6582a1503da6bdf1fb1d1f9e" translate="yes" xml:space="preserve">
          <source>If the external</source>
          <target state="translated">외부의 경우</target>
        </trans-unit>
        <trans-unit id="2e204c469081d0ce7742a3d71bcaeedaf9240cda" translate="yes" xml:space="preserve">
          <source>If the extractor fails to match (in the case of a regex extractor), or returns an empty list or an undefined value (in the case of a subroutine extractor), it is assumed to have failed to extract. If none of the extractor subroutines succeeds, then one character is extracted from the start of the text and the extraction subroutines reapplied. Characters which are thus removed are accumulated and eventually become the next field (unless the fourth argument is true, in which case they are discarded).</source>
          <target state="translated">추출기가 일치하지 않거나 (정규 추출기의 경우) 빈 목록 또는 정의되지 않은 값 (서브 루틴 추출기의 경우)을 반환하면 추출에 실패한 것으로 간주됩니다. 추출기 서브 루틴이 성공하지 못하면 텍스트의 시작에서 하나의 문자가 추출되고 추출 서브 루틴이 다시 적용됩니다. 따라서 제거 된 문자는 누적되고 결국 다음 필드가됩니다 (4 번째 인수가 참이 아닌 경우에는 버림).</target>
        </trans-unit>
        <trans-unit id="17d2c98a680d0b983c00126ba7fbf7037583b89d" translate="yes" xml:space="preserve">
          <source>If the extractor is a hash reference, it must contain exactly one element. The value of that element is one of the above extractor types (subroutine reference, regular expression, or string). The key of that element is the name of a class into which the successful return value of the extractor will be blessed.</source>
          <target state="translated">추출기가 해시 참조 인 경우 정확히 하나의 요소를 포함해야합니다. 해당 요소의 값은 위 추출기 유형 (서브 루틴 참조, 정규식 또는 문자열) 중 하나입니다. 그 요소의 열쇠는 추출기의 성공적인 반환 가치가 축복 될 클래스의 이름입니다.</target>
        </trans-unit>
        <trans-unit id="a2187e610c6c9ce986c9ab2bc434fe210c96d6c7" translate="yes" xml:space="preserve">
          <source>If the extractor is a precompiled regular expression or a string, it is matched against the text in a scalar context with a leading '\G' and the gc modifiers enabled. The extracted value is either $1 if that variable is defined after the match, or else the complete match (i.e. $&amp;amp;).</source>
          <target state="translated">추출기가 사전 컴파일 된 정규식 또는 문자열 인 경우 선행 '\ G'및 gc 수정자가 활성화 된 스칼라 컨텍스트의 텍스트와 일치합니다. 해당 변수가 일치 후에 정의 된 경우 추출 된 값은 $ 1이거나 완전 일치 (예 : $ &amp;amp;)입니다.</target>
        </trans-unit>
        <trans-unit id="8efec72894ea829331e728164da92723ccc10f46" translate="yes" xml:space="preserve">
          <source>If the extractor is a subroutine it is called in a list context and is expected to return a list of a single element, namely the extracted text. It may optionally also return two further arguments: a string representing the text left after extraction (like $' for a pattern match), and a string representing any prefix skipped before the extraction (like $` in a pattern match). Note that this is designed to facilitate the use of other Text::Balanced subroutines with &lt;code&gt;extract_multiple&lt;/code&gt; . Note too that the value returned by an extractor subroutine need not bear any relationship to the corresponding substring of the original text (see examples below).</source>
          <target state="translated">추출기가 서브 루틴 인 경우, 목록 컨텍스트에서 호출되며 단일 요소, ​​즉 추출 된 텍스트의 목록을 리턴해야합니다. 또한 선택적으로 추출 후 남은 텍스트를 나타내는 문자열 (패턴 일치의 경우 $ ')과 추출 전에 건너 뛴 접 두부를 나타내는 문자열 (패턴 일치의 $`)을 추가로 반환 할 수도 있습니다. 이것은 &lt;code&gt;extract_multiple&lt;/code&gt; 과 함께 다른 Text :: Balanced 서브 루틴을 쉽게 사용할 수 있도록 설계되었습니다 . 추출기 서브 루틴이 리턴 한 값은 원본 텍스트의 해당 서브 스트링과 관계가 없어도됩니다 (아래 예 참조).</target>
        </trans-unit>
        <trans-unit id="e4293d2972da49b7deee5cbac8e57e93be999a13" translate="yes" xml:space="preserve">
          <source>If the file is a symlink, the file it's pointing to</source>
          <target state="translated">파일이 심볼릭 링크 인 경우 파일이 가리키는 파일</target>
        </trans-unit>
        <trans-unit id="1260f14708b5c4f0e969b3d9b19ac87d75cb1573" translate="yes" xml:space="preserve">
          <source>If the file is pulled in by &lt;code&gt;perl_parse()&lt;/code&gt; , compiled into a newly constructed interpreter, and subsequently cleaned out with &lt;code&gt;perl_destruct()&lt;/code&gt; afterwards, you're shielded from most namespace troubles.</source>
          <target state="translated">파일에 의해 당겨 경우 &lt;code&gt;perl_parse()&lt;/code&gt; , 새로 지어진 인터프리터로 컴파일하고, 그 후 함께 청소 &lt;code&gt;perl_destruct()&lt;/code&gt; 이후에, 당신은 대부분의 네임 스페이스 문제로부터 보호하고 있습니다.</target>
        </trans-unit>
        <trans-unit id="972b095c8cf0635710238db90318d20a5a12c4b1" translate="yes" xml:space="preserve">
          <source>If the file named by FILENAME does not exist and the &lt;code&gt;&lt;a href=&quot;functions/open&quot;&gt;open&lt;/a&gt;&lt;/code&gt; call creates it (typically because MODE includes the &lt;code&gt;O_CREAT&lt;/code&gt; flag), then the value of PERMS specifies the permissions of the newly created file. If you omit the PERMS argument to &lt;code&gt;&lt;a href=&quot;functions/sysopen&quot;&gt;sysopen&lt;/a&gt;&lt;/code&gt;, Perl uses the octal value &lt;code&gt;0666&lt;/code&gt; . These permission values need to be in octal, and are modified by your process's current &lt;code&gt;&lt;a href=&quot;functions/umask&quot;&gt;umask&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">FILENAME으로 이름 지정된 파일이 존재하지 않고 &lt;code&gt;&lt;a href=&quot;functions/open&quot;&gt;open&lt;/a&gt;&lt;/code&gt; 호출이 파일을 작성하는 경우 (일반적으로 MODE에 &lt;code&gt;O_CREAT&lt;/code&gt; 플래그가 포함되어 있기 때문에 ) PERMS 값은 새로 작성된 파일의 권한을 지정합니다. PERMS 인수를 &lt;code&gt;&lt;a href=&quot;functions/sysopen&quot;&gt;sysopen&lt;/a&gt;&lt;/code&gt; 에 생략하면 Perl은 8 진 값 &lt;code&gt;0666&lt;/code&gt; 을 사용합니다 . 이 권한 값은 8 진수 여야하며 프로세스의 현재 &lt;code&gt;&lt;a href=&quot;functions/umask&quot;&gt;umask&lt;/a&gt;&lt;/code&gt; 에 의해 수정됩니다 .</target>
        </trans-unit>
        <trans-unit id="8aa66e9311c9629d0b8c20e950c88829b4d37f7e" translate="yes" xml:space="preserve">
          <source>If the file named by FILENAME does not exist and the &lt;code&gt;&lt;a href=&quot;open&quot;&gt;open&lt;/a&gt;&lt;/code&gt; call creates it (typically because MODE includes the &lt;code&gt;O_CREAT&lt;/code&gt; flag), then the value of PERMS specifies the permissions of the newly created file. If you omit the PERMS argument to &lt;code&gt;&lt;a href=&quot;sysopen&quot;&gt;sysopen&lt;/a&gt;&lt;/code&gt;, Perl uses the octal value &lt;code&gt;0666&lt;/code&gt; . These permission values need to be in octal, and are modified by your process's current &lt;code&gt;&lt;a href=&quot;umask&quot;&gt;umask&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">FILENAME으로 이름 지정된 파일이 존재하지 않고 &lt;code&gt;&lt;a href=&quot;open&quot;&gt;open&lt;/a&gt;&lt;/code&gt; 호출이 파일을 작성하는 경우 (일반적으로 MODE에 &lt;code&gt;O_CREAT&lt;/code&gt; 플래그가 포함되어 있기 때문에 ) PERMS 값은 새로 작성된 파일의 권한을 지정합니다. PERMS 인수를 &lt;code&gt;&lt;a href=&quot;sysopen&quot;&gt;sysopen&lt;/a&gt;&lt;/code&gt; 에 생략하면 Perl은 8 진 값 &lt;code&gt;0666&lt;/code&gt; 을 사용합니다 . 이 권한 값은 8 진수 여야하며 프로세스의 현재 &lt;code&gt;&lt;a href=&quot;umask&quot;&gt;umask&lt;/a&gt;&lt;/code&gt; 에 의해 수정됩니다 .</target>
        </trans-unit>
        <trans-unit id="9b9e946eeefcb8ca3ed866d0a22b192157304573" translate="yes" xml:space="preserve">
          <source>If the file to be opened contains binary data instead of text characters, then the &lt;code&gt;MODE&lt;/code&gt; argument to &lt;code&gt;&lt;a href=&quot;functions/open&quot;&gt;open&lt;/a&gt;&lt;/code&gt; is a little different. Instead of specifying the encoding, you tell Perl that your data are in raw bytes.</source>
          <target state="translated">열려는 파일에 텍스트 문자 대신 이진 데이터가 들어 있으면 &lt;code&gt;&lt;a href=&quot;functions/open&quot;&gt;open&lt;/a&gt;&lt;/code&gt; 는 &lt;code&gt;MODE&lt;/code&gt; 인수 가 약간 다릅니다. 인코딩을 지정하는 대신 데이터가 원시 바이트임을 Perl에 알립니다.</target>
        </trans-unit>
        <trans-unit id="ed7727f14d3896e4199132a911f1277a6913be80" translate="yes" xml:space="preserve">
          <source>If the file was loaded via a hook (e.g. a subroutine reference, see &lt;a href=&quot;functions/require&quot;&gt;require&lt;/a&gt; for a description of these hooks), this hook is by default inserted into &lt;code&gt;%INC&lt;/code&gt; in place of a filename. Note, however, that the hook may have set the &lt;code&gt;%INC&lt;/code&gt; entry by itself to provide some more specific info.</source>
          <target state="translated">파일이 후크를 통해로드 된 경우 (예를 들어 서브 루틴 참조 참조 &lt;a href=&quot;functions/require&quot;&gt;필요한&lt;/a&gt; 이들 고리에 대한 설명)이 후크 삽입 디폴트로 &lt;code&gt;%INC&lt;/code&gt; 파일명 대신. 그러나 후크는 &lt;code&gt;%INC&lt;/code&gt; 항목을 자체적으로 설정하여 보다 구체적인 정보를 제공 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="6e74503c754d78c3ba0f9051478f8b0d722c72c1" translate="yes" xml:space="preserve">
          <source>If the filehandle came from a piped open, &lt;code&gt;&lt;a href=&quot;close&quot;&gt;close&lt;/a&gt;&lt;/code&gt; returns false if one of the other syscalls involved fails or if its program exits with non-zero status. If the only problem was that the program exited non-zero, &lt;code&gt;$!&lt;/code&gt; will be set to &lt;code&gt;0&lt;/code&gt; . Closing a pipe also waits for the process executing on the pipe to exit--in case you wish to look at the output of the pipe afterwards--and implicitly puts the exit status value of that command into &lt;code&gt;$?&lt;/code&gt; and &lt;code&gt;${^CHILD_ERROR_NATIVE}&lt;/code&gt; .</source>
          <target state="translated">파일 핸들이 파이프 된 열기에서 온 경우, 관련된 다른 시스템 호출 중 하나가 실패하거나 프로그램이 0이 아닌 상태로 종료되면 &lt;code&gt;&lt;a href=&quot;close&quot;&gt;close&lt;/a&gt;&lt;/code&gt; 는 false를 리턴합니다. 유일한 문제는 프로그램이 0이 아닌 것으로 종료했다면 &lt;code&gt;$!&lt;/code&gt; &lt;code&gt;0&lt;/code&gt; 으로 설정됩니다 . 파이프를 닫으면 파이프에서 실행중인 프로세스가 종료 될 때까지 기다립니다 (나중에 파이프의 출력을 보려는 경우).이 명령의 종료 상태 값을 &lt;code&gt;$?&lt;/code&gt; 및 &lt;code&gt;${^CHILD_ERROR_NATIVE}&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="a275dda5ca271e5742fe50c27b80a1dea7fadc2a" translate="yes" xml:space="preserve">
          <source>If the filehandle came from a piped open, &lt;code&gt;&lt;a href=&quot;functions/close&quot;&gt;close&lt;/a&gt;&lt;/code&gt; returns false if one of the other syscalls involved fails or if its program exits with non-zero status. If the only problem was that the program exited non-zero, &lt;code&gt;$!&lt;/code&gt; will be set to &lt;code&gt;0&lt;/code&gt; . Closing a pipe also waits for the process executing on the pipe to exit--in case you wish to look at the output of the pipe afterwards--and implicitly puts the exit status value of that command into &lt;code&gt;$?&lt;/code&gt; and &lt;code&gt;${^CHILD_ERROR_NATIVE}&lt;/code&gt; .</source>
          <target state="translated">파일 핸들이 파이프 된 열기에서 온 경우, 관련된 다른 시스템 호출 중 하나가 실패하거나 프로그램이 0이 아닌 상태로 종료되면 &lt;code&gt;&lt;a href=&quot;functions/close&quot;&gt;close&lt;/a&gt;&lt;/code&gt; 는 false를 리턴합니다. 유일한 문제는 프로그램이 0이 아닌 것으로 종료했다면 &lt;code&gt;$!&lt;/code&gt; &lt;code&gt;0&lt;/code&gt; 으로 설정됩니다 . 파이프를 닫으면 파이프에서 실행중인 프로세스가 종료 될 때까지 기다립니다 (나중에 파이프의 출력을 보려는 경우).이 명령의 종료 상태 값을 &lt;code&gt;$?&lt;/code&gt; 및 &lt;code&gt;${^CHILD_ERROR_NATIVE}&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="5fc5e1415bd14e8d1ec6ad1e512653e073ea2d16" translate="yes" xml:space="preserve">
          <source>If the filename supplied contains directory separators (and so is an absolute or relative pathname), and if that file is not found, platforms that append file extensions will do so and try to look for the file with those extensions added, one by one.</source>
          <target state="translated">제공된 파일 이름에 디렉토리 구분 기호 (절대 또는 상대 경로 이름도 포함)가 포함되어 있고 해당 파일을 찾을 수없는 경우 파일 확장자를 추가하는 플랫폼이 파일 확장자를 추가 한 파일을 하나씩 찾습니다.</target>
        </trans-unit>
        <trans-unit id="8b638dc989817125971a607e8fa00529b2b307c1" translate="yes" xml:space="preserve">
          <source>If the final value specified is not in the sequence that the magical increment would produce, the sequence goes until the next value would be longer than the final value specified.</source>
          <target state="translated">지정된 최종 값이 마법 증분이 생성하는 순서에없는 경우 다음 값이 지정된 최종 값보다 길 때까지 시퀀스가 ​​진행됩니다.</target>
        </trans-unit>
        <trans-unit id="d5f8e1e30b780f6553cc08550f9370ae0ed9b97a" translate="yes" xml:space="preserve">
          <source>If the first argument is a reference to an array, the pseudo-hash will be created with keys from that array. If a second argument is supplied, it must also be a reference to an array whose elements will be used as the values. If the second array contains less elements than the first, the trailing elements of the pseudo-hash will not be initialized. This makes it particularly useful for creating a pseudo-hash from subroutine arguments:</source>
          <target state="translated">첫 번째 인수가 배열에 대한 참조 인 경우 해당 배열의 키를 사용하여 의사 해시가 작성됩니다. 두 번째 인수가 제공되면 요소가 값으로 사용될 배열에 대한 참조이기도합니다. 두 번째 배열에 첫 번째 배열보다 적은 수의 요소가 포함되어 있으면 의사 해시의 후행 요소가 초기화되지 않습니다. 이는 서브 루틴 인수에서 의사 해시를 작성하는 데 특히 유용합니다.</target>
        </trans-unit>
        <trans-unit id="9f235f80bacbd6f2376896bcd2071e6b6ed89634" translate="yes" xml:space="preserve">
          <source>If the first argument is an empty string &quot;&quot; or is a volume name, i.e. matches the pattern /^[^:]+:/, the resulting path is &lt;b&gt;absolute&lt;/b&gt;.</source>
          <target state="translated">첫 번째 인수가 빈 문자열 &quot;&quot;이거나 볼륨 이름 인 경우, 즉 / ^ [^ :] + : / 패턴과 일치하면 결과 경로는 &lt;b&gt;absolute&lt;/b&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="89aa8ef2f6a6df7b419aa16ffe18ced8031ac672" translate="yes" xml:space="preserve">
          <source>If the first character after the &lt;b&gt;-M&lt;/b&gt; or &lt;b&gt;-m&lt;/b&gt; is a dash (&lt;b&gt;-&lt;/b&gt;) then the 'use' is replaced with 'no'.</source>
          <target state="translated">&lt;b&gt;-M&lt;/b&gt; 또는 &lt;b&gt;-m&lt;/b&gt; 뒤의 첫 문자 가 대시 ( &lt;b&gt;-&lt;/b&gt; )이면 'use'가 'no'로 바뀝니다.</target>
        </trans-unit>
        <trans-unit id="781d0d29a2affd4018c32ec572f1b116a7081027" translate="yes" xml:space="preserve">
          <source>If the first chars of a Perl script are &lt;code&gt;&quot;extproc &quot;&lt;/code&gt; , this line is treated as &lt;code&gt;#!&lt;/code&gt; -line, thus all the switches on this line are processed (twice if script was started via cmd.exe). See &lt;a href=&quot;perlrun#DESCRIPTION&quot;&gt;DESCRIPTION in perlrun&lt;/a&gt;.</source>
          <target state="translated">Perl 스크립트의 첫 문자가 &lt;code&gt;&quot;extproc &quot;&lt;/code&gt; 인 경우이 행은 &lt;code&gt;#!&lt;/code&gt; -line과 같이이 줄의 모든 스위치가 처리됩니다 (cmd가 cmd.exe를 통해 시작된 경우 두 번). &lt;a href=&quot;perlrun#DESCRIPTION&quot;&gt;perlrun의 DESCRIPTION을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="f46518f452342a5c022fec8e53026c8608f2e02a" translate="yes" xml:space="preserve">
          <source>If the first digit following the backslash is a 0, it's an octal escape.</source>
          <target state="translated">백 슬래시 다음의 첫 번째 숫자가 0이면 8 진수 이스케이프입니다.</target>
        </trans-unit>
        <trans-unit id="5675bafb3dc48482ba4a4f320234c0b4d704c9a0" translate="yes" xml:space="preserve">
          <source>If the first element of the return value (&lt;code&gt;success&lt;/code&gt; ) was 0, then some error occurred. This second element is the error message the command you requested exited with, if available. This is generally a pretty printed value of &lt;code&gt;$?&lt;/code&gt; or &lt;code&gt;$@&lt;/code&gt; . See &lt;code&gt;perldoc perlvar&lt;/code&gt; for details on what they can contain. If the error was a timeout, the &lt;code&gt;error message&lt;/code&gt; will be prefixed with the string &lt;code&gt;IPC::Cmd::TimeOut&lt;/code&gt; , the timeout class.</source>
          <target state="translated">리턴 값 ( &lt;code&gt;success&lt;/code&gt; ) 의 첫 번째 요소 가 0 인 경우 일부 오류가 발생했습니다. 이 두 번째 요소는 요청한 명령이 사용 가능한 경우 종료 한 오류 메시지입니다. 이것은 일반적으로 &lt;code&gt;$?&lt;/code&gt; 의 꽤 인쇄 된 값 입니까? 또는 &lt;code&gt;$@&lt;/code&gt; . 포함 할 수있는 내용에 대한 자세한 내용 은 &lt;code&gt;perldoc perlvar&lt;/code&gt; 를 참조하십시오 . 오류가 시간 초과 인 경우 시간 초과 클래스 인 문자열 &lt;code&gt;IPC::Cmd::TimeOut&lt;/code&gt; 이 &lt;code&gt;error message&lt;/code&gt; 앞에 표시 됩니다 .</target>
        </trans-unit>
        <trans-unit id="6a57fb9b1830952d24356efef9c0744590e7e139" translate="yes" xml:space="preserve">
          <source>If the first item in a bracket group is &quot;*&quot;, it's taken as shorthand for the so commonly called &quot;quant&quot; method. Similarly, if the first item in a bracket group is &quot;#&quot;, it's taken to be shorthand for &quot;numf&quot;.</source>
          <target state="translated">대괄호 그룹의 첫 번째 항목이 &quot;*&quot;인 경우 소위 &quot;quant&quot;메소드의 약어로 간주됩니다. 마찬가지로, 괄호 그룹의 첫 번째 항목이 &quot;#&quot;이면 &quot;numf&quot;의 약어로 간주됩니다.</target>
        </trans-unit>
        <trans-unit id="1953104edb77654c33631a60ba8219310b08e426" translate="yes" xml:space="preserve">
          <source>If the first item in a bracket group is the empty-string, or &quot;_*&quot; or &quot;_</source>
          <target state="translated">대괄호 그룹의 첫 번째 항목이 빈 문자열이거나 &quot;_ *&quot;또는 &quot;_</target>
        </trans-unit>
        <trans-unit id="bf6e94a3fad4e68b50306c3295f243e0a73b5811" translate="yes" xml:space="preserve">
          <source>If the first item in a bracket group looks like a method name, then that group is interpreted like this:</source>
          <target state="translated">대괄호 그룹의 첫 번째 항목이 메소드 이름처럼 보이는 경우 해당 그룹은 다음과 같이 해석됩니다.</target>
        </trans-unit>
        <trans-unit id="ccf14e3215a8aeb1aa87eb4f44052cead882fc98" translate="yes" xml:space="preserve">
          <source>If the first operand has a &quot;nomethod&quot; method then use that.</source>
          <target state="translated">첫 번째 피연산자에 &quot;nomethod&quot;메소드가 있으면이를 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="a0dadbb13895f7c7975effc9602b93ea5e861379" translate="yes" xml:space="preserve">
          <source>If the first operand has declared a subroutine to overload the operator then use that implementation.</source>
          <target state="translated">첫 번째 피연산자가 연산자를 오버로드하기 위해 서브 루틴을 선언 한 경우 해당 구현을 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="63722d831a3c09d59c00e59b75ba5f74f6230f38" translate="yes" xml:space="preserve">
          <source>If the flag is present in &lt;code&gt;rx-&amp;gt;extflags&lt;/code&gt;&lt;code&gt;&lt;a href=&quot;functions/split&quot;&gt;split&lt;/a&gt;&lt;/code&gt; will delete whitespace from the start of the subject string before it's operated on. What is considered whitespace depends on if the subject is a UTF-8 string and if the &lt;code&gt;RXf_PMf_LOCALE&lt;/code&gt; flag is set.</source>
          <target state="translated">플래그가 &lt;code&gt;rx-&amp;gt;extflags&lt;/code&gt; 에 있으면 &lt;code&gt;&lt;a href=&quot;functions/split&quot;&gt;split&lt;/a&gt;&lt;/code&gt; 은 작동하기 전에 대상 문자열의 시작 부분에서 공백을 삭제합니다. 공백으로 간주되는 것은 주제가 UTF-8 문자열인지와 &lt;code&gt;RXf_PMf_LOCALE&lt;/code&gt; 플래그가 설정되어 있는지에 따라 다릅니다 .</target>
        </trans-unit>
        <trans-unit id="dbc08ae29def75bcb01866771948171d3f78fd50" translate="yes" xml:space="preserve">
          <source>If the function is used across several files, but intended only for Perl's internal use (and this should be the common case), do not export it to the public API. See the discussion about</source>
          <target state="translated">함수가 여러 파일에서 사용되지만 Perl의 내부 용도로만 사용되는 경우 (일반적인 경우) 공용 API로 내 보내지 마십시오. 에 대한 토론을 참조하십시오</target>
        </trans-unit>
        <trans-unit id="0cd096b932efa03a9f98d53e47997c47f5475a48" translate="yes" xml:space="preserve">
          <source>If the function is used only inside one source code file, make it static. See the discussion about</source>
          <target state="translated">함수가 하나의 소스 코드 파일 내에서만 사용되는 경우 정적으로 만듭니다. 에 대한 토론을 참조하십시오</target>
        </trans-unit>
        <trans-unit id="d809f75a0fec341370456ffe5542097322b23570" translate="yes" xml:space="preserve">
          <source>If the function wants to handle the keyword, it first must parse anything following the keyword that is part of the syntax introduced by the keyword. See &lt;a href=&quot;#Lexer-interface&quot;&gt;Lexer interface&lt;/a&gt; for details.</source>
          <target state="translated">함수가 키워드를 처리하려면 먼저 키워드에 의해 도입 된 구문의 일부인 키워드 다음에있는 것을 구문 분석해야합니다. 자세한 내용은 &lt;a href=&quot;#Lexer-interface&quot;&gt;Lexer 인터페이스&lt;/a&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="4257aa9162577acd082afc2803cd5eba4d35b6a8" translate="yes" xml:space="preserve">
          <source>If the function's name is &lt;b&gt;DESTROY&lt;/b&gt; then the C++ &lt;code&gt;&lt;a href=&quot;functions/delete&quot;&gt;delete&lt;/a&gt;&lt;/code&gt; function will be called and &lt;code&gt;THIS&lt;/code&gt; will be given as its parameter. The generated C++ code for</source>
          <target state="translated">함수 이름이 &lt;b&gt;DESTROY&lt;/b&gt; 이면 C ++ &lt;code&gt;&lt;a href=&quot;functions/delete&quot;&gt;delete&lt;/a&gt;&lt;/code&gt; 함수가 호출되고 &lt;code&gt;THIS&lt;/code&gt; 가 매개 변수로 제공됩니다. 에 대한 생성 된 C ++ 코드</target>
        </trans-unit>
        <trans-unit id="7a9d5afefb1f72725e3effbcde85fc42f858949b" translate="yes" xml:space="preserve">
          <source>If the function's name is &lt;b&gt;new&lt;/b&gt; then the C++ &lt;code&gt;new&lt;/code&gt; function will be called to create a dynamic C++ object. The XSUB will expect the class name, which will be kept in a variable called &lt;code&gt;CLASS&lt;/code&gt; , to be given as the first argument.</source>
          <target state="translated">함수 이름이 &lt;b&gt;new&lt;/b&gt; 이면 동적 C ++ 객체를 만들기 위해 C ++ &lt;code&gt;new&lt;/code&gt; 함수가 호출됩니다. XSUB는 클래스 이름이 &lt;code&gt;CLASS&lt;/code&gt; 라는 변수에 유지 될 것으로 첫 번째 인수로 제공 될 것으로 예상합니다 .</target>
        </trans-unit>
        <trans-unit id="cf92d6194fe17b6faa691c083e3aa66b73fd41bc" translate="yes" xml:space="preserve">
          <source>If the given file is a Storable image return a hash describing it. If the file is readable, but not a Storable image return &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt;. If the file does not exist or is unreadable then croak.</source>
          <target state="translated">주어진 파일이 Storable 이미지 인 경우이를 설명하는 해시를 반환합니다. 파일을 읽을 수 있지만 저장 가능 이미지가 아닌 경우 &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; 를 리턴하십시오 . 파일이 존재하지 않거나 읽을 수없는 경우에는 숨어 있습니다.</target>
        </trans-unit>
        <trans-unit id="6f5f5dfa299a465aa9a0110ad7326e956c843743" translate="yes" xml:space="preserve">
          <source>If the given string is in FCD (&quot;Fast C or D&quot; form; cf. UTN #5), it returns the string without modification; otherwise it returns an FCD string.</source>
          <target state="translated">주어진 문자열이 FCD ( &quot;Fast C 또는 D&quot;형식, UTN # 5 참조) 인 경우 수정없이 문자열을 반환합니다. 그렇지 않으면 FCD 문자열을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="12d092a8012a2b0bc17122d5b49e40f14ceca06d" translate="yes" xml:space="preserve">
          <source>If the global variable $KEEP_ALL is true, the file or directory will not be removed.</source>
          <target state="translated">글로벌 변수 $ KEEP_ALL이 true이면 파일 또는 디렉토리가 제거되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="cc1c6dee6d24dc894200423540415887a91afb83" translate="yes" xml:space="preserve">
          <source>If the groupings in a regex are nested, &lt;code&gt;$1&lt;/code&gt; gets the group with the leftmost opening parenthesis, &lt;code&gt;$2&lt;/code&gt; the next opening parenthesis, etc. For example, here is a complex regex and the matching variables indicated below it:</source>
          <target state="translated">정규식의 그룹화가 중첩 된 경우 &lt;code&gt;$1&lt;/code&gt; 은 가장 왼쪽의 여는 괄호, &lt;code&gt;$2&lt;/code&gt; 는 다음 여는 괄호 등으로 그룹을 가져옵니다 . 예를 들어, 복잡한 정규식과 그 아래에 표시된 일치하는 변수는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="83b41f5fdfcf62fc4686ef889212a3544a4d2078" translate="yes" xml:space="preserve">
          <source>If the groupings in a regexp are nested, &lt;code&gt;$1&lt;/code&gt; gets the group with the leftmost opening parenthesis, &lt;code&gt;$2&lt;/code&gt; the next opening parenthesis, etc. Here is a regexp with nested groups:</source>
          <target state="translated">정규 표현식의 그룹이 중첩되면 &lt;code&gt;$1&lt;/code&gt; 은 가장 왼쪽에 여는 괄호가있는 그룹을 가져오고 다음에 여는 첫 번째 괄호는 &lt;code&gt;$2&lt;/code&gt; 입니다. 중첩 된 그룹이있는 정규 표현식은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="7672fac594e6a7dd98d2bae0c51d24e5065e39e4" translate="yes" xml:space="preserve">
          <source>If the gzip FEXTRA header field is present it must conform to the sub-field structure as defined in RFC 1952.</source>
          <target state="translated">gzip FEXTRA 헤더 필드가 있으면 RFC 1952에 정의 된대로 서브 필드 구조를 준수해야합니다.</target>
        </trans-unit>
        <trans-unit id="948511a86fa3a757ed333c1057a05dc236b1ed7b" translate="yes" xml:space="preserve">
          <source>If the gzip header contains a comment field (FCOMMENT) it consists solely of ISO 8859-1 characters plus line-feed.</source>
          <target state="translated">gzip 헤더에 주석 필드 (FCOMMENT)가 포함 된 경우 ISO 8859-1 문자와 줄 바꿈만으로 구성됩니다.</target>
        </trans-unit>
        <trans-unit id="309f2d92f5e86ee4880748347a713d797525d1c3" translate="yes" xml:space="preserve">
          <source>If the gzip header contains a name field (FNAME) it consists solely of ISO 8859-1 characters.</source>
          <target state="translated">gzip 헤더에 이름 필드 (FNAME)가 포함 된 경우 ISO 8859-1 문자로만 구성됩니다.</target>
        </trans-unit>
        <trans-unit id="76da98a8a76e4650e3f026f7c68c78b99cc6936b" translate="yes" xml:space="preserve">
          <source>If the hash is very large, you might not want to create a long list of keys. To save some memory, you can grab one key-value pair at a time using &lt;code&gt;&lt;a href=&quot;functions/each&quot;&gt;each()&lt;/a&gt;&lt;/code&gt;, which returns a pair you haven't seen yet:</source>
          <target state="translated">해시가 매우 큰 경우 긴 키 목록을 작성하지 않을 수 있습니다. 메모리를 절약하기 위해 &lt;code&gt;&lt;a href=&quot;functions/each&quot;&gt;each()&lt;/a&gt;&lt;/code&gt; 사용하여 한 번에 하나의 키-값 쌍을 가져와 아직 보지 못한 쌍을 반환 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="7d353d642decb66a3abbcefcf79e58c99b0ba1e9" translate="yes" xml:space="preserve">
          <source>If the hook is an array reference, its first element must be a subroutine reference. This subroutine is called as above, but the first parameter is the array reference. This lets you indirectly pass arguments to the subroutine.</source>
          <target state="translated">후크가 배열 참조 인 경우 첫 번째 요소는 서브 루틴 참조 여야합니다. 이 서브 루틴은 위와 같이 호출되지만 첫 번째 매개 변수는 배열 참조입니다. 이를 통해 서브 루틴에 인수를 간접적으로 전달할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="089781c4ed94b59afd45ade73f63dd3ae0adcf17" translate="yes" xml:space="preserve">
          <source>If the hook is an object, it must provide an INC method that will be called as above, the first parameter being the object itself. (Note that you must fully qualify the sub's name, as unqualified &lt;code&gt;INC&lt;/code&gt; is always forced into package &lt;code&gt;main&lt;/code&gt; .) Here is a typical code layout:</source>
          <target state="translated">후크가 객체 인 경우 위와 같이 호출 될 INC 메소드를 제공해야합니다. 첫 번째 매개 변수는 객체 자체입니다. 정규화되지 않은 &lt;code&gt;INC&lt;/code&gt; 는 항상 &lt;code&gt;main&lt;/code&gt; 패키지로 강제 적용 되므로 하위 이름을 완전히 규정 해야합니다 . 다음은 일반적인 코드 레이아웃입니다.</target>
        </trans-unit>
        <trans-unit id="dc5ac6730609a596bd949c3bb5ec01a23d4ffce0" translate="yes" xml:space="preserve">
          <source>If the initial value specified isn't part of a magical increment sequence (that is, a non-empty string matching &lt;code&gt;/^[a-zA-Z]*[0-9]*\z/&lt;/code&gt; ), only the initial value will be returned. So the following will only return an alpha:</source>
          <target state="translated">지정된 초기 값이 마법 증가 시퀀스의 일부가 아닌 경우 (즉, &lt;code&gt;/^[a-zA-Z]*[0-9]*\z/&lt;/code&gt; 일치하는 비어 있지 않은 문자열 ), 초기 값 만 반환됩니다. 따라서 다음은 알파 만 반환합니다.</target>
        </trans-unit>
        <trans-unit id="ce1ecd771a78ded6bdca0c84c4a8624d300c4df7" translate="yes" xml:space="preserve">
          <source>If the initialization begins with &lt;code&gt;=&lt;/code&gt; , then it is output in the declaration for the input variable, replacing the initialization supplied by the typemap. If the initialization begins with &lt;code&gt;;&lt;/code&gt; or &lt;code&gt;+&lt;/code&gt; , then it is performed after all of the input variables have been declared. In the &lt;code&gt;;&lt;/code&gt; case the initialization normally supplied by the typemap is not performed. For the &lt;code&gt;+&lt;/code&gt; case, the declaration for the variable will include the initialization from the typemap. A global variable, &lt;code&gt;%v&lt;/code&gt; , is available for the truly rare case where information from one initialization is needed in another initialization.</source>
          <target state="translated">초기화가 &lt;code&gt;=&lt;/code&gt; 로 시작 하면 입력 변수에 대한 선언으로 출력되어 형식 맵에서 제공 한 초기화를 대체합니다. 초기화가 &lt;code&gt;;&lt;/code&gt; 또는 &lt;code&gt;+&lt;/code&gt; 이면 모든 입력 변수가 선언 된 후에 수행됩니다. 에서 &lt;code&gt;;&lt;/code&gt; typemap에 의해 정상적으로 제공되는 초기화가 수행되지 않는 경우. 들어 &lt;code&gt;+&lt;/code&gt; 의 경우, 변수의 선언 타입 맵의 초기화를 포함 할 것이다. 전역 변수 &lt;code&gt;%v&lt;/code&gt; 는 한 초기화의 정보가 다른 초기화에 필요한 경우가 거의없는 경우에 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a641a3d375c74024ce1445924cf66af681f41ebd" translate="yes" xml:space="preserve">
          <source>If the input code point's name has more than one synonym, they are returned joined into a single comma-separated string.</source>
          <target state="translated">입력 코드 포인트 이름에 둘 이상의 동의어가있는 경우 단일 쉼표로 구분 된 문자열로 결합되어 리턴됩니다.</target>
        </trans-unit>
        <trans-unit id="9e071ed158601437a7fd928632778e71dc9740aa" translate="yes" xml:space="preserve">
          <source>If the input file/buffer contains multiple compressed data streams, this option will uncompress the whole lot as a single data stream.</source>
          <target state="translated">입력 파일 / 버퍼에 여러 개의 압축 된 데이터 스트림이 포함 된 경우이 옵션은 전체 로트를 단일 데이터 스트림으로 압축 해제합니다.</target>
        </trans-unit>
        <trans-unit id="3c582e01c3ed1134227361002db4abc5ef87f0a6" translate="yes" xml:space="preserve">
          <source>If the input is a buffer, &lt;code&gt;trailingData&lt;/code&gt; will return everything from the end of the compressed data stream to the end of the buffer.</source>
          <target state="translated">입력이 버퍼 인 경우 &lt;code&gt;trailingData&lt;/code&gt; 는 압축 된 데이터 스트림의 끝에서 버퍼의 끝까지 모든 것을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="646ddea5cc7fe42fca7b5f673b48b7968e951a94" translate="yes" xml:space="preserve">
          <source>If the input is a filehandle, &lt;code&gt;trailingData&lt;/code&gt; will return the data that is left in the filehandle input buffer once the end of the compressed data stream has been reached. You can then use the filehandle to read the rest of the input file.</source>
          <target state="translated">입력이 파일 핸들 인 경우 &lt;code&gt;trailingData&lt;/code&gt; 는 압축 된 데이터 스트림의 끝에 도달하면 파일 핸들 입력 버퍼에 남아있는 데이터를 리턴합니다. 그런 다음 파일 핸들을 사용하여 나머지 입력 파일을 읽을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="68ffb2242fbe49d90e0f353510f536b7c97b26ff" translate="yes" xml:space="preserve">
          <source>If the input is a gzip (RFC 1952) data stream, the following will be checked:</source>
          <target state="translated">입력이 gzip (RFC 1952) 데이터 스트림 인 경우 다음을 확인합니다.</target>
        </trans-unit>
        <trans-unit id="fbb62e9bad07668939b33bd6b3f35cbd2a29221c" translate="yes" xml:space="preserve">
          <source>If the input is an RFC 1950 data stream, the following will be checked:</source>
          <target state="translated">입력이 RFC 1950 데이터 스트림 인 경우 다음을 확인합니다.</target>
        </trans-unit>
        <trans-unit id="681895bf526e306295ee60c6f4d01df1e2e0e233" translate="yes" xml:space="preserve">
          <source>If the input is being interpreted as UTF-8 and a UTF-8 encoding error is encountered, an exception is generated.</source>
          <target state="translated">입력이 UTF-8로 해석되고 UTF-8 인코딩 오류가 발생하면 예외가 생성됩니다.</target>
        </trans-unit>
        <trans-unit id="3c3ba700c41877fa613cc375e9afc8a49773890d" translate="yes" xml:space="preserve">
          <source>If the input is unknown &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; is returned in scalar context; an empty-list in list context. If the input is known, the number of elements in the list is returned if called in scalar context.</source>
          <target state="translated">입력을 알 수없는 경우 스칼라 컨텍스트에서 &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; 가 리턴됩니다. 리스트 문맥 내의 비어있는리스트 입력이 알려진 경우 스칼라 컨텍스트에서 호출되면 목록의 요소 수가 리턴됩니다.</target>
        </trans-unit>
        <trans-unit id="a45a90c97d69c88324a18a4a975329202a110a46" translate="yes" xml:space="preserve">
          <source>If the input string is longer than needed, extra characters are ignored.</source>
          <target state="translated">입력 문자열이 필요 이상으로 길면 추가 문자가 무시됩니다.</target>
        </trans-unit>
        <trans-unit id="daec947152f5e00d64f719376318858935b663a6" translate="yes" xml:space="preserve">
          <source>If the input string is longer than needed, remaining characters are ignored.</source>
          <target state="translated">입력 문자열이 필요 이상으로 길면 나머지 문자는 무시됩니다.</target>
        </trans-unit>
        <trans-unit id="1a191161ccbd661c7961516bab02ad1f7aadb16a" translate="yes" xml:space="preserve">
          <source>If the interdependence of your &lt;code&gt;BOOT:&lt;/code&gt; section and Perl code is more complicated than this (e.g., the &lt;code&gt;BOOT:&lt;/code&gt; section makes calls to Perl functions which make calls to XSUBs with prototypes), get rid of the &lt;code&gt;BOOT:&lt;/code&gt; section altogether. Replace it with a function &lt;code&gt;onBOOT()&lt;/code&gt; , and call it like this:</source>
          <target state="translated">&lt;code&gt;BOOT:&lt;/code&gt; 섹션과 Perl 코드 의 상호 의존성 이 이보다 복잡한 경우 (예 &lt;code&gt;BOOT:&lt;/code&gt; 섹션은 프로토 타입으로 XSUB를 호출하는 Perl 함수를 호출 함) &lt;code&gt;BOOT:&lt;/code&gt; 섹션을 모두 제거 하십시오. &lt;code&gt;onBOOT()&lt;/code&gt; 함수로 바꾸고 다음과 같이 호출하십시오.</target>
        </trans-unit>
        <trans-unit id="3e4a966e522ce068cba366c74c39330ba735c481" translate="yes" xml:space="preserve">
          <source>If the key does not exist the method returns 1.</source>
          <target state="translated">키가 존재하지 않으면 메소드는 1을 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="f74ad7c032adb69e8741c3ce089dbedf2af387c8" translate="yes" xml:space="preserve">
          <source>If the language handle has a &quot;fail&quot; attribute whose value is a coderef, then $lh-&amp;gt;maketext(</source>
          <target state="translated">언어 핸들에 값이 coderef 인 &quot;fail&quot;속성이 있으면 $ lh-&amp;gt; maketext (</target>
        </trans-unit>
        <trans-unit id="74b0a2c233bae54a5a0a22d4c6904ecf217ffcc9" translate="yes" xml:space="preserve">
          <source>If the language handle has no &quot;fail&quot; attribute, maketext will simply throw an exception (i.e., it calls &lt;code&gt;&lt;a href=&quot;../functions/die&quot;&gt;die&lt;/a&gt;&lt;/code&gt;, mentioning the</source>
          <target state="translated">언어 핸들이 더는 &quot;실패&quot;가없는 경우 속성, maketext 단순히 예외가 발생합니다 (즉,이 호출 &lt;code&gt;&lt;a href=&quot;../functions/die&quot;&gt;die&lt;/a&gt;&lt;/code&gt; 을 언급,</target>
        </trans-unit>
        <trans-unit id="11f576169bf47c87f2f0af12c0e2e1a4146c280c" translate="yes" xml:space="preserve">
          <source>If the last element of LIST does not end in a newline, the current script line number and input line number (if any) are also printed, and a newline is supplied. Note that the &quot;input line number&quot; (also known as &quot;chunk&quot;) is subject to whatever notion of &quot;line&quot; happens to be currently in effect, and is also available as the special variable &lt;code&gt;$.&lt;/code&gt; . See &lt;a href=&quot;../perlvar#%24%2f&quot;&gt;$/ in perlvar&lt;/a&gt; and &lt;a href=&quot;../perlvar#%24.&quot;&gt;$. in perlvar&lt;/a&gt;.</source>
          <target state="translated">LIST의 마지막 요소가 줄 바꿈으로 끝나지 않으면 현재 스크립트 줄 번호와 입력 줄 번호 (있는 경우)도 인쇄되고 줄 바꿈이 제공됩니다. &quot;입력 라인 번호&quot;( &quot;청크&quot;라고도 함)는 현재 유효한 &quot;라인&quot;개념에 따라 달라지며 특수 변수 &lt;code&gt;$.&lt;/code&gt; 로도 제공됩니다 . . &lt;a href=&quot;../perlvar#%24%2f&quot;&gt;perlvar&lt;/a&gt; 및 &lt;a href=&quot;../perlvar#%24.&quot;&gt;$ &lt;/a&gt;에서 $ /를 참조하십시오 . perlvar에서 .</target>
        </trans-unit>
        <trans-unit id="2ddf8780e7e7d9b3df1dc954871c1e6b0c532c31" translate="yes" xml:space="preserve">
          <source>If the last element of LIST does not end in a newline, the current script line number and input line number (if any) are also printed, and a newline is supplied. Note that the &quot;input line number&quot; (also known as &quot;chunk&quot;) is subject to whatever notion of &quot;line&quot; happens to be currently in effect, and is also available as the special variable &lt;code&gt;$.&lt;/code&gt; . See &lt;a href=&quot;perlvar#%24%2f&quot;&gt;$/ in perlvar&lt;/a&gt; and &lt;a href=&quot;perlvar#%24.&quot;&gt;$. in perlvar&lt;/a&gt;.</source>
          <target state="translated">LIST의 마지막 요소가 줄 바꿈으로 끝나지 않으면 현재 스크립트 줄 번호와 입력 줄 번호 (있는 경우)도 인쇄되고 줄 바꿈이 제공됩니다. &quot;입력 라인 번호&quot;( &quot;청크&quot;라고도 함)는 현재 유효한 &quot;라인&quot;개념에 따라 달라지며 특수 변수 &lt;code&gt;$.&lt;/code&gt; 로도 제공됩니다 . . &lt;a href=&quot;perlvar#%24%2f&quot;&gt;perlvar&lt;/a&gt; 및 &lt;a href=&quot;perlvar#%24.&quot;&gt;$ &lt;/a&gt;에서 $ /를 참조하십시오 . perlvar에서 .</target>
        </trans-unit>
        <trans-unit id="e90835049bf9dceb2b3128f6e0da3805c87bc497" translate="yes" xml:space="preserve">
          <source>If the left hand side is neither a package name nor an object, then the method call will cause an error, but see the section on &lt;a href=&quot;#Method-Call-Variations&quot;&gt;Method Call Variations&lt;/a&gt; for more nuances.</source>
          <target state="translated">왼쪽이 패키지 이름이나 객체가 아닌 경우 메소드 호출로 오류가 발생하지만 더 많은 뉘앙스에 대해서는 &lt;a href=&quot;#Method-Call-Variations&quot;&gt;메소드 호출 변형&lt;/a&gt; 섹션을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="37bacecd2332508665ec81733fbdffa749ac5bfa" translate="yes" xml:space="preserve">
          <source>If the length of the input string is not even, it behaves as if padded by a null character at the end. Similarly, &quot;extra&quot; nybbles are ignored during unpacking.</source>
          <target state="translated">입력 문자열의 길이가 고르지 않으면 끝에 널 문자로 채워진 것처럼 작동합니다. 마찬가지로, 포장을 풀 때 &quot;추가&quot;Nybbles가 무시됩니다.</target>
        </trans-unit>
        <trans-unit id="88b7864a27a0577ffff54b7d555aea0617e9d505" translate="yes" xml:space="preserve">
          <source>If the length of the input string is not evenly divisible by 8, the remainder is packed as if the input string were padded by null characters at the end. Similarly during unpacking, &quot;extra&quot; bits are ignored.</source>
          <target state="translated">입력 문자열의 길이를 8로 균등하게 나눌 수없는 경우 나머지는 입력 문자열이 끝에 널 문자로 채워진 것처럼 압축됩니다. 압축을 풀 때와 마찬가지로 &quot;추가&quot;비트는 무시됩니다.</target>
        </trans-unit>
        <trans-unit id="a2e67d3ea522ed96fe7a9c8431714f7f3d0ba5c5" translate="yes" xml:space="preserve">
          <source>If the library happens to be in a location not in &lt;code&gt;$Config{libpth}&lt;/code&gt; , you need:</source>
          <target state="translated">라이브러리가 &lt;code&gt;$Config{libpth}&lt;/code&gt; 아닌 위치 에 있으면 다음이 필요합니다.</target>
        </trans-unit>
        <trans-unit id="96118a855a2f1b2515701521249ef16334052e1f" translate="yes" xml:space="preserve">
          <source>If the line number is &lt;code&gt;.&lt;/code&gt;, sets a breakpoint on the current line:</source>
          <target state="translated">줄 번호가 &lt;code&gt;.&lt;/code&gt; 현재 줄에 중단 점을 설정합니다.</target>
        </trans-unit>
        <trans-unit id="f93c03970a56584f9fb61994432bc17cb7db5f12" translate="yes" xml:space="preserve">
          <source>If the list moderators tell you that you are not being civil, carefully consider how your words have appeared before responding in any way. You may protest, but repeated protest in the face of a repeatedly reaffirmed decision is not acceptable.</source>
          <target state="translated">목록 중재자가 당신이 시민이 아니라고 말하면 어떤 식 으로든 반응하기 전에 단어가 어떻게 나타나는지 신중하게 고려하십시오. 귀하는 항의 할 수 있지만 반복적으로 재확인 된 결정에 대한 반복 된 항의는 용납되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="e0a9f58b026642b9c9e8e7bb8deab3007d5236f6" translate="yes" xml:space="preserve">
          <source>If the locale from the user's environment is desired, there should be no need for XS code to set the locale except for &lt;code&gt;LC_NUMERIC&lt;/code&gt; , as perl has already set it up. XS code should avoid changing the locale, as it can adversely affect other, unrelated, code and may not be thread safe. However, some alien libraries that may be called do set it, such as &lt;code&gt;Gtk&lt;/code&gt; . This can cause problems for the perl core and other modules. Starting in v5.20.1, calling the function &lt;a href=&quot;perlapi#sync_locale&quot;&gt;sync_locale()&lt;/a&gt; from XS should be sufficient to avoid most of these problems. Prior to this, you need a pure Perl statement that does this:</source>
          <target state="translated">사용자 환경의 로케일이 필요한 경우 perl이 이미 설정 했으므로 &lt;code&gt;LC_NUMERIC&lt;/code&gt; 이외의 로케일을 설정하기 위해 XS 코드가 필요하지 않습니다 . XS 코드는 로케일 변경을 피해야합니다. 로케일을 변경하면 관련이없는 다른 코드에 악영향을 줄 수 있으며 스레드로부터 안전하지 않을 수 있습니다. 그러나 &lt;code&gt;Gtk&lt;/code&gt; 와 같은 일부 외계인 라이브러리가 설정합니다 . 이로 인해 펄 코어 및 기타 모듈에 문제가 발생할 수 있습니다. v5.20.1부터는 XS에서 &lt;a href=&quot;perlapi#sync_locale&quot;&gt;sync_locale ()&lt;/a&gt; 함수를 호출하면 이러한 문제를 대부분 피할 수 있습니다. 이 작업을 수행하기 전에이를 수행하는 순수한 Perl 명령문이 필요합니다.</target>
        </trans-unit>
        <trans-unit id="823e97e3e713d61f96695c0b7d66500ba0535b81" translate="yes" xml:space="preserve">
          <source>If the make process encounters trouble with either compilation or linking then try setting the _C89_CCMODE to 1. Assuming sh is your login shell then run:</source>
          <target state="translated">make 프로세스에서 컴파일 또는 링크에 문제가 발생하면 _C89_CCMODE를 1로 설정하십시오. sh가 로그인 쉘이라고 가정하면 다음을 실행하십시오.</target>
        </trans-unit>
        <trans-unit id="2ae0fed8c834da6c72af01b4cce727e6b5ec751e" translate="yes" xml:space="preserve">
          <source>If the module &lt;code&gt;Module&lt;/code&gt; is already loaded, then the declaration</source>
          <target state="translated">모듈 &lt;code&gt;Module&lt;/code&gt; 이 이미로드 된 경우 선언</target>
        </trans-unit>
        <trans-unit id="1b3cd9a44d834ecaba373518cdced67ef6882e1c" translate="yes" xml:space="preserve">
          <source>If the module &lt;code&gt;Module&lt;/code&gt; is not loaded yet, then the above declaration declares functions func1() and func2() in the current package. When these functions are called, they load the package &lt;code&gt;Module&lt;/code&gt; if needed, and substitute themselves with the correct definitions.</source>
          <target state="translated">모듈 &lt;code&gt;Module&lt;/code&gt; 이 아직로드되지 않은 경우, 위 선언은 현재 패키지에서 func1 () 및 func2 () 함수를 선언합니다. 이러한 함수가 호출 되면 필요한 경우 패키지 &lt;code&gt;Module&lt;/code&gt; 을로드 하고 올바른 정의로 ​​대체합니다.</target>
        </trans-unit>
        <trans-unit id="aa83e5ba98e2e00acddd7117050d321e4e9d54d9" translate="yes" xml:space="preserve">
          <source>If the module is already loaded, &lt;code&gt;mark_as_loaded&lt;/code&gt; will carp about this and tell you from where the &lt;code&gt;PACKAGE&lt;/code&gt; has been loaded already.</source>
          <target state="translated">모듈이 이미로드 된 경우 &lt;code&gt;mark_as_loaded&lt;/code&gt; 는이 문제를 해결하고 &lt;code&gt;PACKAGE&lt;/code&gt; 가 이미로드 된 위치를 알려줍니다 .</target>
        </trans-unit>
        <trans-unit id="e1cec740a866f3242f2245723f611d8e6a35a17e" translate="yes" xml:space="preserve">
          <source>If the module is already unloaded, &lt;code&gt;mark_as_unloaded&lt;/code&gt; will carp about this and tell you the &lt;code&gt;PACKAGE&lt;/code&gt; has been unloaded already.</source>
          <target state="translated">모듈이 이미 언로드 된 경우 &lt;code&gt;mark_as_unloaded&lt;/code&gt; 는이 문제에 대해 경고 하고 &lt;code&gt;PACKAGE&lt;/code&gt; 가 이미 언로드되었음을 알려줍니다 .</target>
        </trans-unit>
        <trans-unit id="55dd2ee6ad71be855cc8cea6dc45014e0de598b9" translate="yes" xml:space="preserve">
          <source>If the module is needed inside the</source>
          <target state="translated">내부에 모듈이 필요한 경우</target>
        </trans-unit>
        <trans-unit id="fab3a0f11307492451a39d88e9be980974dcb4d2" translate="yes" xml:space="preserve">
          <source>If the module will only be used inside a thread, you can try loading the module from inside the thread entry point function using &lt;code&gt;&lt;a href=&quot;functions/require&quot;&gt;require&lt;/a&gt;&lt;/code&gt; (and &lt;code&gt;&lt;a href=&quot;functions/import&quot;&gt;import&lt;/a&gt;&lt;/code&gt; if needed):</source>
          <target state="translated">모듈이 스레드 내부에서만 사용되는 경우 &lt;code&gt;&lt;a href=&quot;functions/require&quot;&gt;require&lt;/a&gt;&lt;/code&gt; 를 사용하여 스레드 진입 점 함수 내부에서 모듈을로드 해보십시오 ( 필요한 경우 &lt;code&gt;&lt;a href=&quot;functions/import&quot;&gt;import&lt;/a&gt;&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="cc3b3934908dc77b79dcbb0b789e5b838d36463c" translate="yes" xml:space="preserve">
          <source>If the name is given in UTF-8, set this to &lt;code&gt;HVhek_UTF8&lt;/code&gt; . The value is passed direct as the parameter</source>
          <target state="translated">이름이 UTF-8로 제공되면 &lt;code&gt;HVhek_UTF8&lt;/code&gt; 로 설정하십시오 . 값은 매개 변수로 직접 전달됩니다.</target>
        </trans-unit>
        <trans-unit id="31ddfa3306f944720376a989f9d5fd87c400eb47" translate="yes" xml:space="preserve">
          <source>If the name is omitted, format &quot;STDOUT&quot; is defined. A single &quot;.&quot; in column 1 is used to terminate a format. FORMLIST consists of a sequence of lines, each of which may be one of three types:</source>
          <target state="translated">이름을 생략하면 &quot;STDOUT&quot;형식이 정의됩니다. 싱글 &quot;.&quot; 1 열의 형식은 형식을 종료하는 데 사용됩니다. FORMLIST는 일련의 행으로 구성되며 각 행은 세 가지 유형 중 하나 일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="0def4cf3757d0553a2341afef733c2c0849f1052" translate="yes" xml:space="preserve">
          <source>If the name is unknown, &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; is returned (or an empty list in list context). Note that Perl typically recognizes property names in regular expressions with an optional &lt;code&gt;&quot;Is_&lt;/code&gt; &quot; (with or without the underscore) prefixed to them, such as &lt;code&gt;\p{isgc=punct}&lt;/code&gt; . This function does not recognize those in the input, returning &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt;. Nor are they included in the output as possible synonyms.</source>
          <target state="translated">이름을 알 수 없으면 &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; 가 리턴됩니다 (또는 목록 컨텍스트의 빈 목록). Perl은 일반적 으로 &lt;code&gt;\p{isgc=punct}&lt;/code&gt; 와 같이 접두어가 있거나없는 선택적 &lt;code&gt;&quot;Is_&lt;/code&gt; &quot;(밑줄이 있거나없는)를 사용하여 정규식에서 특성 이름을 인식합니다 . 이 함수는 입력에있는 것을 인식하지 않고 &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; 를 반환 합니다. 그것들은 가능한 동의어로서 출력에 포함되지도 않습니다.</target>
        </trans-unit>
        <trans-unit id="a79bb3cadb8f975e939ef18071a526a4b5d3363e" translate="yes" xml:space="preserve">
          <source>If the named parameter &lt;code&gt;config_override&lt;/code&gt; is specified, it should be a reference to a hash which contains all information usually found in &lt;code&gt;%Config::Config&lt;/code&gt; . For example, you can obtain the configuration information for a separate perl installation and pass that in.</source>
          <target state="translated">명명 된 매개 변수 &lt;code&gt;config_override&lt;/code&gt; 가 지정되면 일반적으로 &lt;code&gt;%Config::Config&lt;/code&gt; 있는 모든 정보가 포함 된 해시에 대한 참조 여야합니다 . 예를 들어, 별도의 perl 설치에 대한 구성 정보를 확보하여 전달할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="db3ef5746e8cd5bab310439aa50dba89f545a584" translate="yes" xml:space="preserve">
          <source>If the named parameter &lt;code&gt;skip_cwd&lt;/code&gt; is true, the current directory &lt;code&gt;.&lt;/code&gt; will be stripped from &lt;code&gt;@INC&lt;/code&gt; before searching for .packlists. This keeps ExtUtils::Installed from finding modules installed in other perls that happen to be located below the current directory.</source>
          <target state="translated">명명 된 매개 변수가있는 경우 &lt;code&gt;skip_cwd&lt;/code&gt; , 현재 디렉토리 사실이다 &lt;code&gt;.&lt;/code&gt; .packlists를 검색하기 전에 &lt;code&gt;@INC&lt;/code&gt; 에서 제거됩니다 . 이렇게하면 ExtUtils :: Installed가 현재 디렉토리 아래에있는 다른 perls에 설치된 모듈을 찾을 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="7f6facbdb87684a56df7a20a0d54e6b8073b8eb9" translate="yes" xml:space="preserve">
          <source>If the new version of the C library is ABI-compatible (that's Application Binary Interface compatible) with the version you're upgrading from, and if the shared library version didn't change, no re-compilation should be necessary.</source>
          <target state="translated">C 라이브러리의 새 버전이 업그레이드하려는 버전과 ABI 호환 (응용 프로그램 이진 인터페이스 호환)이고 공유 라이브러리 버전이 변경되지 않은 경우 다시 컴파일 할 필요가 없습니다.</target>
        </trans-unit>
        <trans-unit id="3f6451aaf2bf86188eece8b63b5bab6c7257462f" translate="yes" xml:space="preserve">
          <source>If the next character is in (or extends into) the next chunk of input text, the next chunk will be read in. Normally the current chunk will be discarded at the same time, but if</source>
          <target state="translated">다음 문자가 입력 텍스트의 다음 청크에 있거나 확장되면 다음 청크를 읽습니다. 일반적으로 현재 청크는 동시에 버려지지만</target>
        </trans-unit>
        <trans-unit id="bf7862ebb65f1805f38240d9ec3614885b02e6ad" translate="yes" xml:space="preserve">
          <source>If the number following the backslash is N (in decimal), and Perl already has seen N capture groups, Perl considers this a backreference. Otherwise, it considers it an octal escape. If N has more than three digits, Perl takes only the first three for the octal escape; the rest are matched as is.</source>
          <target state="translated">백 슬래시 다음의 숫자가 N (10 진수)이고 Perl이 이미 N 개의 캡처 그룹을 본 경우, Perl은이를 역 참조로 간주합니다. 그렇지 않으면 8 진 탈출로 간주됩니다. N에 3 자리가 넘는 숫자가 있으면 Perl은 8 진수 이스케이프에 처음 3 개만 사용합니다. 나머지는 그대로 일치합니다.</target>
        </trans-unit>
        <trans-unit id="fad0df49da49393094ec039045da70fce50b5429" translate="yes" xml:space="preserve">
          <source>If the number of data bytes ($bytes) is given, that many data bytes are included in the ping packet sent to the remote host. The number of data bytes is ignored if the protocol is &quot;tcp&quot;. The minimum (and default) number of data bytes is 1 if the protocol is &quot;udp&quot; and 0 otherwise. The maximum number of data bytes that can be specified is 1024.</source>
          <target state="translated">데이터 바이트 수 ($ bytes)가 제공되면 원격 호스트로 전송되는 핑 패킷에 많은 데이터 바이트가 포함됩니다. 프로토콜이 &quot;tcp&quot;인 경우 데이터 바이트 수는 무시됩니다. 프로토콜이 &quot;udp&quot;인 경우 데이터 바이트의 최소 (및 기본) 수는 1이고 그렇지 않으면 0입니다. 지정할 수있는 최대 데이터 바이트 수는 1024입니다.</target>
        </trans-unit>
        <trans-unit id="cf726231b3d599cdbe46b108046dbf7815381c4c" translate="yes" xml:space="preserve">
          <source>If the object has been passed to a child process during a fork, the file will be deleted when the object goes out of scope in the parent.</source>
          <target state="translated">포크 동안 오브젝트가 하위 프로세스로 전달 된 경우 오브젝트가 상위에서 범위를 벗어나면 파일이 삭제됩니다.</target>
        </trans-unit>
        <trans-unit id="39e52d92c6b313ed3349d0401be82f80d273536a" translate="yes" xml:space="preserve">
          <source>If the only casing for a code point is locale-dependent, then the returned hash will not have any of the base keys, like &lt;code&gt;code&lt;/code&gt; , &lt;code&gt;upper&lt;/code&gt; , etc., but will contain only locale keys.</source>
          <target state="translated">코드 포인트의 유일한 케이싱이 로케일에 의존하면, 리턴 된 해시는 &lt;code&gt;code&lt;/code&gt; , &lt;code&gt;upper&lt;/code&gt; 등과 같은 기본 키를 가지지 않지만 로케일 키만 포함합니다.</target>
        </trans-unit>
        <trans-unit id="addcad10a864d1cffc4846608d394fea1feac09a" translate="yes" xml:space="preserve">
          <source>If the operands to a binary bitwise op are strings of different sizes, &lt;b&gt;|&lt;/b&gt; and &lt;b&gt;^&lt;/b&gt; ops act as though the shorter operand had additional zero bits on the right, while the &lt;b&gt;&amp;amp;&lt;/b&gt; op acts as though the longer operand were truncated to the length of the shorter. The granularity for such extension or truncation is one or more bytes.</source>
          <target state="translated">이진 비트 단위 연산에 대한 피연산자가 다른 크기의 문자열 인 경우 &lt;b&gt;| &lt;/b&gt;및 &lt;b&gt;^&lt;/b&gt; 그동안 짧은 피연산자는 우측 부가 제로 비트를 가지고있는 것처럼 행동 OPS &lt;b&gt;및&lt;/b&gt; 긴 피연산자 짧은 길이로 절단 한 것처럼 연산이 작용한다. 이러한 확장 또는 잘림의 세분성은 하나 이상의 바이트입니다.</target>
        </trans-unit>
        <trans-unit id="c7870bd3c024159f240305b7047279e21ad1fe56" translate="yes" xml:space="preserve">
          <source>If the operating system supports it (for example BSD derived systems), the filehandle will be opened with O_EXLOCK (open with exclusive file lock). This can sometimes cause problems if the intention is to pass the filename to another system that expects to take an exclusive lock itself (such as DBD::SQLite) whilst ensuring that the tempfile is not reused. In this situation the &quot;EXLOCK&quot; option can be passed to tempfile. By default EXLOCK will be true (this retains compatibility with earlier releases).</source>
          <target state="translated">운영 체제에서 지원하는 경우 (예 : BSD 파생 시스템) 파일 핸들은 O_EXLOCK (독점 파일 잠금으로 열림)으로 열립니다. 임시 파일이 재사용되지 않도록 배타적 잠금 (예 : DBD :: SQLite)을 취하는 다른 시스템으로 파일 이름을 전달하려는 경우 때때로 문제가 발생할 수 있습니다. 이 상황에서 &quot;EXLOCK&quot;옵션을 임시 파일로 전달할 수 있습니다. 기본적으로 EXLOCK은 true입니다 (이전 릴리스와의 호환성 유지).</target>
        </trans-unit>
        <trans-unit id="e19b7bb4d69a3c985ce8931960025916d3561c3a" translate="yes" xml:space="preserve">
          <source>If the operation being timed out is system() or qx(), this technique is liable to generate zombies. If this matters to you, you'll need to do your own fork() and exec(), and kill the errant child process.</source>
          <target state="translated">시간 초과 된 작업이 system () 또는 qx () 인 경우이 기술은 좀비를 생성 할 수 있습니다. 이것이 당신에게 중요하다면, 당신은 당신 자신의 fork ()와 exec ()를하고 잘못된 자식 프로세스를 죽여야합니다.</target>
        </trans-unit>
        <trans-unit id="05f4a71ea34fe9d7ddbd210db5290a2dfa223838" translate="yes" xml:space="preserve">
          <source>If the operation shown is &quot;ToFold&quot;, it means that case-insensitive matching in a regular expression was done on the code point.</source>
          <target state="translated">표시된 작업이 &quot;ToFold&quot;이면 정규식에서 대소 문자를 구분하지 않는 일치가 코드 포인트에서 수행되었음을 의미합니다.</target>
        </trans-unit>
        <trans-unit id="a982ec5add551174c87d54c0c75cad924249147a" translate="yes" xml:space="preserve">
          <source>If the option destination is a reference to a hash, the option will take, as value, strings of the form</source>
          <target state="translated">옵션 대상이 해시에 대한 참조 인 경우 옵션은 형식의 문자열을 값으로 사용합니다.</target>
        </trans-unit>
        <trans-unit id="ab8a370e734c2b7f25ad3475fabaef52fd095ddb" translate="yes" xml:space="preserve">
          <source>If the option is provided, and &lt;code&gt;PERL_PERTURB_KEYS&lt;/code&gt; is NOT set, then a value of '0' implies &lt;code&gt;PERL_PERTURB_KEYS=0&lt;/code&gt; and any other value implies &lt;code&gt;PERL_PERTURB_KEYS=2&lt;/code&gt; .</source>
          <target state="translated">옵션이 제공되고 &lt;code&gt;PERL_PERTURB_KEYS&lt;/code&gt; 가 설정되지 않은 경우 '0'값은 &lt;code&gt;PERL_PERTURB_KEYS=0&lt;/code&gt; 을 의미 하고 다른 값은 &lt;code&gt;PERL_PERTURB_KEYS=2&lt;/code&gt; 를 의미 합니다.</target>
        </trans-unit>
        <trans-unit id="bb774833de734f7b65efa56e3c7c5f53234542f8" translate="yes" xml:space="preserve">
          <source>If the option is set to false, the output buffer in the &lt;code&gt;$i-&amp;gt;inflate&lt;/code&gt; method will be truncated before uncompressed data is written to it.</source>
          <target state="translated">옵션이 false로 설정되면 압축되지 않은 데이터가 기록되기 전에 &lt;code&gt;$i-&amp;gt;inflate&lt;/code&gt; 메소드 의 출력 버퍼 가 잘립니다.</target>
        </trans-unit>
        <trans-unit id="a7e5a140437039036cbeabf084c8f96c887a93f7" translate="yes" xml:space="preserve">
          <source>If the option is set to true, uncompressed data will be appended to the output buffer by the &lt;code&gt;$i-&amp;gt;inflate&lt;/code&gt; method.</source>
          <target state="translated">옵션이 true로 설정되면 &lt;code&gt;$i-&amp;gt;inflate&lt;/code&gt; 메소드에 의해 압축되지 않은 데이터가 출력 버퍼에 추가됩니다 .</target>
        </trans-unit>
        <trans-unit id="c22c2720bbc793b56d2bdb2031cd852762e79aba" translate="yes" xml:space="preserve">
          <source>If the option is set to true, uncompressed data will be appended to the output buffer in the &lt;code&gt;$d-&amp;gt;deflate&lt;/code&gt; and &lt;code&gt;$d-&amp;gt;flush&lt;/code&gt; methods.</source>
          <target state="translated">옵션이 true로 설정되면 압축되지 않은 데이터가 &lt;code&gt;$d-&amp;gt;deflate&lt;/code&gt; 및 &lt;code&gt;$d-&amp;gt;flush&lt;/code&gt; 메소드 의 출력 버퍼에 추가됩니다 .</target>
        </trans-unit>
        <trans-unit id="943c28148863687139f9e45e03407da89d7e13fa" translate="yes" xml:space="preserve">
          <source>If the option value is required, Getopt::Long will take the command line argument that follows the option and assign this to the option variable. If, however, the option value is specified as optional, this will only be done if that value does not look like a valid command line option itself.</source>
          <target state="translated">옵션 값이 필요한 경우 Getopt :: Long은 옵션 뒤에 오는 명령 행 인수를 사용하여 옵션 변수에 지정합니다. 그러나 옵션 값이 선택적으로 지정된 경우 해당 값이 유효한 명령 행 옵션 자체가 아닌 경우에만 수행됩니다.</target>
        </trans-unit>
        <trans-unit id="8b25fc0c82dd37f9c4b9d7996e6e001cd8c1c22e" translate="yes" xml:space="preserve">
          <source>If the order of &lt;code&gt;sv_setiv&lt;/code&gt; and &lt;code&gt;sv_setpv&lt;/code&gt; had been reversed, then the macro &lt;code&gt;SvPOK_on&lt;/code&gt; would need to be called instead of &lt;code&gt;SvIOK_on&lt;/code&gt; .</source>
          <target state="translated">의 순서 경우 &lt;code&gt;sv_setiv&lt;/code&gt; 및 &lt;code&gt;sv_setpv&lt;/code&gt; 이 반전했다, 다음 매크로 &lt;code&gt;SvPOK_on&lt;/code&gt; 는 대신 호출 할 필요가 &lt;code&gt;SvIOK_on&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="3b0f391156a0e1896106ec41b93d3c42cc8fd48b" translate="yes" xml:space="preserve">
          <source>If the output is empty and &lt;code&gt;$@&lt;/code&gt; already contains a value (typically from a previous eval) that value is reused after appending &lt;code&gt;&quot;\t...propagated&quot;&lt;/code&gt; . This is useful for propagating exceptions:</source>
          <target state="translated">출력이 비어 있고 &lt;code&gt;$@&lt;/code&gt; 에 값이 이미있는 경우 (일반적으로 이전 평가판의 값) &lt;code&gt;&quot;\t...propagated&quot;&lt;/code&gt; 추가 한 후 해당 값이 재사용 됩니다. 이는 예외를 전파하는 데 유용합니다.</target>
        </trans-unit>
        <trans-unit id="25d81dad12165191ac2a4d2f3e667fda9ababd8e" translate="yes" xml:space="preserve">
          <source>If the output is empty and &lt;code&gt;$@&lt;/code&gt; already contains a value (typically from a previous eval) that value is used after appending &lt;code&gt;&quot;\t...caught&quot;&lt;/code&gt; to &lt;code&gt;$@&lt;/code&gt; . This is useful for staying almost, but not entirely similar to &lt;code&gt;&lt;a href=&quot;die&quot;&gt;die&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">출력이 비어 있고 &lt;code&gt;$@&lt;/code&gt; 에 값이 이미있는 경우 (일반적으로 이전 평가판의 값) &lt;code&gt;$@&lt;/code&gt; &lt;code&gt;&quot;\t...caught&quot;&lt;/code&gt; 를 추가 한 후에 해당 값이 사용됩니다 . 이것은 거의 머물지 만, &lt;code&gt;&lt;a href=&quot;die&quot;&gt;die&lt;/a&gt;&lt;/code&gt; 와 완전히 유사한 것은 아닙니다 .</target>
        </trans-unit>
        <trans-unit id="65e420bc5858eb45a1dddd4a10cb455bd1ce4cc1" translate="yes" xml:space="preserve">
          <source>If the output is empty and &lt;code&gt;$@&lt;/code&gt; already contains a value (typically from a previous eval) that value is used after appending &lt;code&gt;&quot;\t...caught&quot;&lt;/code&gt; to &lt;code&gt;$@&lt;/code&gt; . This is useful for staying almost, but not entirely similar to &lt;code&gt;&lt;a href=&quot;functions/die&quot;&gt;die&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">출력이 비어 있고 &lt;code&gt;$@&lt;/code&gt; 에 값이 이미있는 경우 (일반적으로 이전 평가판의 값) &lt;code&gt;$@&lt;/code&gt; &lt;code&gt;&quot;\t...caught&quot;&lt;/code&gt; 를 추가 한 후에 해당 값이 사용됩니다 . 이것은 거의 머물지 만, &lt;code&gt;&lt;a href=&quot;functions/die&quot;&gt;die&lt;/a&gt;&lt;/code&gt; 와 완전히 유사한 것은 아닙니다 .</target>
        </trans-unit>
        <trans-unit id="2cfa46357b1516decacabae244126181d8b80b21" translate="yes" xml:space="preserve">
          <source>If the output is empty and &lt;code&gt;$@&lt;/code&gt; contains an object reference that has a &lt;code&gt;PROPAGATE&lt;/code&gt; method, that method will be called with additional file and line number parameters. The return value replaces the value in &lt;code&gt;$@&lt;/code&gt; ; i.e., as if &lt;code&gt;$@ = &lt;a href=&quot;eval&quot;&gt;eval&lt;/a&gt; { $@-&amp;gt;PROPAGATE(__FILE__, __LINE__) };&lt;/code&gt; were called.</source>
          <target state="translated">출력이 비어 있고 &lt;code&gt;$@&lt;/code&gt; 에 &lt;code&gt;PROPAGATE&lt;/code&gt; 메소드 가있는 오브젝트 참조가 포함 된 경우 해당 파일은 추가 파일 및 행 번호 매개 변수와 함께 호출됩니다. 리턴 값은 &lt;code&gt;$@&lt;/code&gt; 의 값을 대체합니다 . 즉, &lt;code&gt;$@ = &lt;a href=&quot;eval&quot;&gt;eval&lt;/a&gt; { $@-&amp;gt;PROPAGATE(__FILE__, __LINE__) };&lt;/code&gt; 호출되었다.</target>
        </trans-unit>
        <trans-unit id="a97492155e7589378bb301645dfa7c34b680ef04" translate="yes" xml:space="preserve">
          <source>If the output is empty and &lt;code&gt;$@&lt;/code&gt; contains an object reference that has a &lt;code&gt;PROPAGATE&lt;/code&gt; method, that method will be called with additional file and line number parameters. The return value replaces the value in &lt;code&gt;$@&lt;/code&gt; ; i.e., as if &lt;code&gt;$@ = &lt;a href=&quot;functions/eval&quot;&gt;eval&lt;/a&gt; { $@-&amp;gt;PROPAGATE(__FILE__, __LINE__) };&lt;/code&gt; were called.</source>
          <target state="translated">출력이 비어 있고 &lt;code&gt;$@&lt;/code&gt; 에 &lt;code&gt;PROPAGATE&lt;/code&gt; 메소드 가있는 오브젝트 참조가 포함 된 경우 해당 파일은 추가 파일 및 행 번호 매개 변수와 함께 호출됩니다. 리턴 값은 &lt;code&gt;$@&lt;/code&gt; 의 값을 대체합니다 . 즉, &lt;code&gt;$@ = &lt;a href=&quot;functions/eval&quot;&gt;eval&lt;/a&gt; { $@-&amp;gt;PROPAGATE(__FILE__, __LINE__) };&lt;/code&gt; 호출되었다.</target>
        </trans-unit>
        <trans-unit id="4e71a254b15b38644afabad82376b2bb1e4f7fab" translate="yes" xml:space="preserve">
          <source>If the output of the &lt;code&gt;h h&lt;/code&gt; command (or any command, for that matter) scrolls past your screen, precede the command with a leading pipe symbol so that it's run through your pager, as in</source>
          <target state="translated">&lt;code&gt;h h&lt;/code&gt; 명령 (또는 해당 문제에 대한 명령) 의 출력이 화면을 지나서 스크롤되는 경우 다음과 같이 페이저를 통해 실행되도록 명령 앞에 선행 파이프 기호를 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="f7911c6fed712fb085afb893540153d04c3ba2b2" translate="yes" xml:space="preserve">
          <source>If the package has a mailing list, include a URL or subscription instructions here.</source>
          <target state="translated">패키지에 메일 목록이있는 경우 여기에 URL 또는 구독 지침을 포함하십시오.</target>
        </trans-unit>
        <trans-unit id="2bd5efd382acc87571dd747451ad45f157dd85d7" translate="yes" xml:space="preserve">
          <source>If the package has a web site, include a URL here.</source>
          <target state="translated">패키지에 웹 사이트가있는 경우 여기에 URL을 포함하십시오.</target>
        </trans-unit>
        <trans-unit id="128d72462f8fdf7586cd07b73dc9169d6e753911" translate="yes" xml:space="preserve">
          <source>If the parameter is made true, &lt;code&gt;U+FFFE&lt;/code&gt; has a minimal primary weight. The comparison between &lt;code&gt;&quot;$a1\x{FFFE}$a2&quot;&lt;/code&gt; and &lt;code&gt;&quot;$b1\x{FFFE}$b2&quot;&lt;/code&gt; first compares &lt;code&gt;$a1&lt;/code&gt; and &lt;code&gt;$b1&lt;/code&gt; at level 1, and then &lt;code&gt;$a2&lt;/code&gt; and &lt;code&gt;$b2&lt;/code&gt; at level 1, as followed.</source>
          <target state="translated">매개 변수가 true이면 &lt;code&gt;U+FFFE&lt;/code&gt; 의 최소 ​​기본 가중치가 있습니다. 간의 비교 &lt;code&gt;&quot;$a1\x{FFFE}$a2&quot;&lt;/code&gt; 및 &lt;code&gt;&quot;$b1\x{FFFE}$b2&quot;&lt;/code&gt; 제 비교 &lt;code&gt;$a1&lt;/code&gt; 과 &lt;code&gt;$b1&lt;/code&gt; 등급 1, 그리고 &lt;code&gt;$a2&lt;/code&gt; 및 &lt;code&gt;$b2&lt;/code&gt; 등급 1은 다음과 같이, .</target>
        </trans-unit>
        <trans-unit id="c1bc1d540aa212d81d3c27835031fe5adbb0eee1" translate="yes" xml:space="preserve">
          <source>If the parameter is made true, &lt;code&gt;U+FFFF&lt;/code&gt; has a highest primary weight. When a boolean of &lt;code&gt;$coll-&amp;gt;ge($str, &quot;abc&quot;)&lt;/code&gt; and &lt;code&gt;$coll-&amp;gt;le($str, &quot;abc\x{FFFF}&quot;)&lt;/code&gt; is true, it is expected that &lt;code&gt;$str&lt;/code&gt; begins with &lt;code&gt;&quot;abc&quot;&lt;/code&gt; , or another primary equivalent. &lt;code&gt;$str&lt;/code&gt; may be &lt;code&gt;&quot;abcd&quot;&lt;/code&gt; , &lt;code&gt;&quot;abc012&quot;&lt;/code&gt; , but should not include &lt;code&gt;U+FFFF&lt;/code&gt; such as &lt;code&gt;&quot;abc\x{FFFF}xyz&quot;&lt;/code&gt; .</source>
          <target state="translated">매개 변수가 true이면 &lt;code&gt;U+FFFF&lt;/code&gt; 의 기본 중량이 가장 높습니다. 시의 부울 &lt;code&gt;$coll-&amp;gt;ge($str, &quot;abc&quot;)&lt;/code&gt; 와 &lt;code&gt;$coll-&amp;gt;le($str, &quot;abc\x{FFFF}&quot;)&lt;/code&gt; 에 해당하는 것으로,이를 것으로 예상된다 &lt;code&gt;$str&lt;/code&gt; 시작 &lt;code&gt;&quot;abc&quot;&lt;/code&gt; 또는 이와 동등한 다른 기본 항목입니다. &lt;code&gt;$str&lt;/code&gt; 은 &lt;code&gt;&quot;abcd&quot;&lt;/code&gt; , &lt;code&gt;&quot;abc012&quot;&lt;/code&gt; 일 수 있지만 &lt;code&gt;&quot;abc\x{FFFF}xyz&quot;&lt;/code&gt; 와 같은 &lt;code&gt;U+FFFF&lt;/code&gt; 를 포함하지 않아야합니다 .</target>
        </trans-unit>
        <trans-unit id="2379a678967ce11b206cce9256eec402c626744e" translate="yes" xml:space="preserve">
          <source>If the parameter is made true, a final, tie-breaking level is used. If no difference of weights is found after the comparison through all the level specified by &lt;code&gt;level&lt;/code&gt; , the comparison with code points will be performed. For the tie-breaking comparison, the sort key has code points of the original string appended. Completely ignorable characters are not ignored.</source>
          <target state="translated">매개 변수가 true이면 최종 타이 브레이킹 레벨이 사용됩니다. 무게의 차이에 의해 지정된 모든 수준을 통해 비교 한 후 발견되지 않는 경우 &lt;code&gt;level&lt;/code&gt; , 코드 포인트와 비교가 수행됩니다. 동점 비교를 위해 정렬 키에는 원래 문자열의 코드 포인트가 추가됩니다. 완전히 무시할 수있는 문자는 무시되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="e6d70ed0cf4279c5cf91d7d6890341737c51d4df" translate="yes" xml:space="preserve">
          <source>If the parameter is made true, accents (and other primary ignorable characters) are ignored, even though cases are taken into account.</source>
          <target state="translated">이 매개 변수가 true이면 대소 문자를 고려하더라도 악센트 (및 기타 무시할 수없는 문자)는 무시됩니다.</target>
        </trans-unit>
        <trans-unit id="3ffce08d047eaee75c853cd8ab3be63e13efe5a7" translate="yes" xml:space="preserve">
          <source>If the parameter is made true, for a contraction with three or more characters (here nicknamed &quot;long contraction&quot;), initial substrings will be handled. For example, a contraction ABC, where A is a starter, and B and C are non-starters (character with non-zero combining character class), will be detected even if there is not AB as a contraction.</source>
          <target state="translated">세 개 이상의 문자 (여기서 &quot;긴 수축&quot;이라는 별명)가있는 수축의 경우이 매개 변수가 적용되면 초기 하위 문자열이 처리됩니다. 예를 들어, 수축 ABC는 A가 시작이고 B와 C가 시작이 아닌 (0이 아닌 결합 문자 클래스를 가진 문자) 수축으로 AB가없는 경우에도 감지됩니다.</target>
        </trans-unit>
        <trans-unit id="6196ed90d85a5642d1f2bff307d9850731d3ee76" translate="yes" xml:space="preserve">
          <source>If the parameters to the INCLUDE: keyword are followed by a pipe (&lt;code&gt;|&lt;/code&gt;) then the compiler will interpret the parameters as a command. This feature is mildly deprecated in favour of the &lt;code&gt;INCLUDE_COMMAND:&lt;/code&gt; directive, as documented below.</source>
          <target state="translated">INCLUDE : 키워드에 대한 매개 변수 뒤에 파이프 ( &lt;code&gt;|&lt;/code&gt; ) 가 오는 경우 컴파일러는 매개 변수를 명령으로 해석합니다. 이 기능은 아래에 설명 된 것처럼 &lt;code&gt;INCLUDE_COMMAND:&lt;/code&gt; 지시문 에 유리하게 사용되지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="60984150a4a273c37051fdd1024089806a686df1" translate="yes" xml:space="preserve">
          <source>If the parent process is killed (either using Perl's kill() builtin, or using some external means) all the pseudo-processes are killed as well, and the whole process exits.</source>
          <target state="translated">상위 프로세스가 종료되면 (Perl의 kill () 내장 또는 외부 수단 사용) 모든 의사 프로세스도 종료되고 전체 프로세스가 종료됩니다.</target>
        </trans-unit>
        <trans-unit id="aa64f5b5dc3063c1ec88bf3714d6a78f8885563e" translate="yes" xml:space="preserve">
          <source>If the pattern contains embedded code, such as</source>
          <target state="translated">패턴에 다음과 같은 내장 코드가 포함 된 경우</target>
        </trans-unit>
        <trans-unit id="400ab285c2500104132be9cd3fcc1a752df8a4f5" translate="yes" xml:space="preserve">
          <source>If the pattern does not match any pathname, then bsd_glob() returns a list consisting of only the pattern. If &lt;code&gt;GLOB_QUOTE&lt;/code&gt; is set, its effect is present in the pattern returned.</source>
          <target state="translated">패턴이 경로 이름과 일치하지 않으면 bsd_glob ()는 패턴으로 만 구성된 목록을 반환합니다. 경우 &lt;code&gt;GLOB_QUOTE&lt;/code&gt; 가 설정되어, 그 효과가 반환 패턴으로 존재한다.</target>
        </trans-unit>
        <trans-unit id="6adde583f90fd2399e3928b4e6217841c09c97fb" translate="yes" xml:space="preserve">
          <source>If the pattern may match only at a handful of places, with &lt;code&gt;TYPE&lt;/code&gt; being &lt;code&gt;SBOL&lt;/code&gt; , &lt;code&gt;MBOL&lt;/code&gt; , or &lt;code&gt;GPOS&lt;/code&gt; . See the table below.</source>
          <target state="translated">패턴이 소수의 위치에서만 일치 할 수있는 경우 &lt;code&gt;TYPE&lt;/code&gt; 은 &lt;code&gt;SBOL&lt;/code&gt; , &lt;code&gt;MBOL&lt;/code&gt; 또는 &lt;code&gt;GPOS&lt;/code&gt; 입니다. 아래 표를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="d0ce5cbb841f39a51912df72d9768f6a6a5fae33" translate="yes" xml:space="preserve">
          <source>If the pattern was used as follows</source>
          <target state="translated">패턴이 다음과 같이 사용 된 경우</target>
        </trans-unit>
        <trans-unit id="2dd05fadef47c4bd45462fdfaa94e04afc77ad22" translate="yes" xml:space="preserve">
          <source>If the performance in such cases is unacceptable, you may defer the actual writing, and then have it done all at once. The following loop will perform much better for large files:</source>
          <target state="translated">그러한 경우 성능이 만족스럽지 않으면 실제 작문을 연기 한 다음 한 번에 수행하도록 할 수 있습니다. 다음 루프는 큰 파일의 경우 훨씬 더 잘 수행됩니다.</target>
        </trans-unit>
        <trans-unit id="956656b1b2d0c77e2fbe4d0d92677dc48070a8ed" translate="yes" xml:space="preserve">
          <source>If the platform is MS-DOS like and normally does CRLF to &quot;\n&quot; translation for text files then the default layers are :</source>
          <target state="translated">플랫폼이 MS-DOS와 같고 일반적으로 CRLF에서 텍스트 파일을 &quot;\ n&quot;로 변환하는 경우 기본 레이어는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="fee788dad0c5b1cd15e2fa5ddb122d4f9bd910af" translate="yes" xml:space="preserve">
          <source>If the platform supports the &lt;code&gt;langinfo(CODESET)&lt;/code&gt; interface, the codeset returned is used as the default encoding for the open pragma.</source>
          <target state="translated">플랫폼이 &lt;code&gt;langinfo(CODESET)&lt;/code&gt; 인터페이스를 지원하는 경우, 반환 된 코드 세트는 공개 pragma의 기본 인코딩으로 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="e029b7bfe44b40ce79cdafd38dd9f57646af8f39" translate="yes" xml:space="preserve">
          <source>If the program exits without all threads having either been joined or detached, then a warning will be issued.</source>
          <target state="translated">모든 스레드가 결합 또는 분리되지 않고 프로그램이 종료되면 경고가 발행됩니다.</target>
        </trans-unit>
        <trans-unit id="68122aab68b9511758161a833aab14bd7cf8f3f4" translate="yes" xml:space="preserve">
          <source>If the program exits without all threads having either been joined or detached, then this warning will be issued.</source>
          <target state="translated">모든 스레드가 결합 또는 분리되지 않고 프로그램이 종료되면이 경고가 발행됩니다.</target>
        </trans-unit>
        <trans-unit id="3f05e0c9adcc7343a41a8d24201ee4c19ce64a54" translate="yes" xml:space="preserve">
          <source>If the program has been given to perl via the switches &lt;code&gt;-e&lt;/code&gt; or &lt;code&gt;-E&lt;/code&gt; , &lt;code&gt;$0&lt;/code&gt; will contain the string &lt;code&gt;&quot;-e&quot;&lt;/code&gt; .</source>
          <target state="translated">스위치를 통해 프로그램이 펄에 부여 된 경우 &lt;code&gt;-e&lt;/code&gt; 또는 &lt;code&gt;-E&lt;/code&gt; , &lt;code&gt;$0&lt;/code&gt; 문자열을 포함하는 것 &lt;code&gt;&quot;-e&quot;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="187d3c3b9917db708f6b4997f1f577493d56ad38" translate="yes" xml:space="preserve">
          <source>If the program is syntactically correct, it is executed. If the program runs off the end without hitting an exit() or die() operator, an implicit &lt;code&gt;&lt;a href=&quot;functions/exit&quot;&gt;exit(0)&lt;/a&gt;&lt;/code&gt; is provided to indicate successful completion.</source>
          <target state="translated">프로그램이 구문 상 올바른 경우 실행됩니다. exit () 또는 die () 연산자를 누르지 않고 프로그램이 끝까지 실행되면 내재적 인 &lt;code&gt;&lt;a href=&quot;functions/exit&quot;&gt;exit(0)&lt;/a&gt;&lt;/code&gt; 이 제공되어 성공적인 완료를 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="8cf82d5604429bbfe1cb41298b645fa1f014e9ae" translate="yes" xml:space="preserve">
          <source>If the property doesn't have such a restricted set, &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; is returned.</source>
          <target state="translated">속성에 이러한 제한된 집합이 없으면 &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; 가 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="f736ee647a4d5e1589838b72f5b05af7545714ad" translate="yes" xml:space="preserve">
          <source>If the property name is unknown, &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; is returned. Note that Perl typically recognizes property names in regular expressions with an optional &lt;code&gt;&quot;Is_&lt;/code&gt; &quot; (with or without the underscore) prefixed to them, such as &lt;code&gt;\p{isgc=punct}&lt;/code&gt; . This function does not recognize those in the property parameter, returning &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">등록 정보 이름을 알 수 없으면 &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; 가 반환됩니다. Perl은 일반적 으로 &lt;code&gt;\p{isgc=punct}&lt;/code&gt; 와 같이 접두어가 있거나없는 선택적 &lt;code&gt;&quot;Is_&lt;/code&gt; &quot;(밑줄이 있거나없는)를 사용하여 정규식에서 특성 이름을 인식합니다 . 이 함수는 property 매개 변수의 것을 인식하지 않고 &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; 를 리턴 합니다.</target>
        </trans-unit>
        <trans-unit id="afaf0816b79f3c9b4d1b468e6b1d9a01691cd781" translate="yes" xml:space="preserve">
          <source>If the protocol is set to &quot;tcp&quot;, this method may be called any number of times, and each call to the ping() method (below) will use the most recent $local_addr. If the protocol is &quot;icmp&quot; or &quot;udp&quot;, then bind() must be called at most once per object, and (if it is called at all) must be called before the first call to ping() for that object.</source>
          <target state="translated">프로토콜이 &quot;tcp&quot;로 설정된 경우이 메소드는 여러 번 호출 될 수 있으며 ping () 메소드 (아래)를 호출 할 때마다 가장 최근의 $ local_addr이 사용됩니다. 프로토콜이 &quot;icmp&quot;또는 &quot;udp&quot;인 경우, 오브젝트 당 최대 한 번 bind ()를 호출해야하며, 해당 오브젝트에 대한 ping ()을 처음 호출하기 전에 (전혀 호출되는 경우) 호출해야합니다.</target>
        </trans-unit>
        <trans-unit id="bd278d79ed04376a1ab23bc38f3813d0d8a95858" translate="yes" xml:space="preserve">
          <source>If the prototypes are enabled, you can disable it locally for a given XSUB as in the following example:</source>
          <target state="translated">프로토 타입이 활성화 된 경우 다음 예제와 같이 지정된 XSUB에 대해 로컬로 프로토 타입을 비활성화 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="22222d2992db775cc93f4e6df7a745c81e01a6be" translate="yes" xml:space="preserve">
          <source>If the referenced object has been blessed into a package, then that package name is returned instead. But don't use that, as it's now considered &quot;bad practice&quot;. For one reason, an object could be using a class called &lt;code&gt;Regexp&lt;/code&gt; or &lt;code&gt;IO&lt;/code&gt; , or even &lt;code&gt;HASH&lt;/code&gt; . Also, &lt;code&gt;&lt;a href=&quot;functions/ref&quot;&gt;ref&lt;/a&gt;&lt;/code&gt; doesn't take into account subclasses, like &lt;code&gt;isa&lt;/code&gt; does.</source>
          <target state="translated">참조 된 객체가 패키지에 들어간 경우 해당 패키지 이름이 대신 반환됩니다. 그러나 이제는 &quot;나쁜 습관&quot;으로 간주되므로 사용하지 마십시오. 한 가지 이유 때문에 객체는 &lt;code&gt;Regexp&lt;/code&gt; 또는 &lt;code&gt;IO&lt;/code&gt; 또는 &lt;code&gt;HASH&lt;/code&gt; 클래스를 사용할 수 있습니다 . 또한 &lt;code&gt;&lt;a href=&quot;functions/ref&quot;&gt;ref&lt;/a&gt;&lt;/code&gt; 는 &lt;code&gt;isa&lt;/code&gt; 와 같은 하위 클래스를 고려 하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="cf268542a8929b7e398cc1536659093d140d5216" translate="yes" xml:space="preserve">
          <source>If the referenced object has been blessed into a package, then that package name is returned instead. But don't use that, as it's now considered &quot;bad practice&quot;. For one reason, an object could be using a class called &lt;code&gt;Regexp&lt;/code&gt; or &lt;code&gt;IO&lt;/code&gt; , or even &lt;code&gt;HASH&lt;/code&gt; . Also, &lt;code&gt;&lt;a href=&quot;ref&quot;&gt;ref&lt;/a&gt;&lt;/code&gt; doesn't take into account subclasses, like &lt;code&gt;isa&lt;/code&gt; does.</source>
          <target state="translated">참조 된 객체가 패키지에 들어간 경우 해당 패키지 이름이 대신 반환됩니다. 그러나 이제는 &quot;나쁜 습관&quot;으로 간주되므로 사용하지 마십시오. 한 가지 이유 때문에 객체는 &lt;code&gt;Regexp&lt;/code&gt; 또는 &lt;code&gt;IO&lt;/code&gt; 또는 &lt;code&gt;HASH&lt;/code&gt; 클래스를 사용할 수 있습니다 . 또한 &lt;code&gt;&lt;a href=&quot;ref&quot;&gt;ref&lt;/a&gt;&lt;/code&gt; 는 &lt;code&gt;isa&lt;/code&gt; 와 같은 하위 클래스를 고려 하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="09e68bc71ae659a158de263698e821903752a759" translate="yes" xml:space="preserve">
          <source>If the referred library is an archive library, then it is treated as a simple collection of .o modules (all of which must contain PIC). These modules are then linked into the shared library.</source>
          <target state="translated">참조 된 라이브러리가 아카이브 라이브러리 인 경우, 간단한 .o 모듈 콜렉션 (모두 PIC를 포함해야 함)으로 취급됩니다. 그런 다음이 모듈은 공유 라이브러리에 연결됩니다.</target>
        </trans-unit>
        <trans-unit id="487c69f3c32cf6208263be856047bd1120b5cb11" translate="yes" xml:space="preserve">
          <source>If the regex engine was entered, the output may look like this:</source>
          <target state="translated">정규식 엔진을 입력 한 경우 출력은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="4071da6362bfae97335d6ccd04527e0675ca1ecf" translate="yes" xml:space="preserve">
          <source>If the remote server sends data a byte at time, and you need that data immediately without waiting for a newline (which might not happen), you may wish to replace the &lt;code&gt;while&lt;/code&gt; loop in the parent with the following:</source>
          <target state="translated">원격 서버가 한 번에 데이터를 바이트로 전송하고 줄 바꿈을 기다리지 않고 즉시 해당 데이터가 필요한 경우 (발생하지 않을 수도 있음) 부모 의 &lt;code&gt;while&lt;/code&gt; 루프를 다음과 같이 바꾸려고 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="78e886a06c0d6c64ae06980c39f4979b0d06c657" translate="yes" xml:space="preserve">
          <source>If the repeat count is &lt;code&gt;*&lt;/code&gt; , the offset is relative to the start of the packed string.</source>
          <target state="translated">반복 횟수가 &lt;code&gt;*&lt;/code&gt; 이면 오프셋은 묶음 문자열의 시작을 기준으로합니다.</target>
        </trans-unit>
        <trans-unit id="71535d2706781140ebf79d95c5c1eb0328f89697" translate="yes" xml:space="preserve">
          <source>If the repeat count is &lt;code&gt;0&lt;/code&gt; , it's relative to the current position.</source>
          <target state="translated">반복 횟수가 &lt;code&gt;0&lt;/code&gt; 이면 현재 위치를 기준으로합니다.</target>
        </trans-unit>
        <trans-unit id="adddd684b7b4b320c5c6cd3d4e144f8d42b00be2" translate="yes" xml:space="preserve">
          <source>If the requested class doesn't yet exist, this function will still succeed, and return &lt;code&gt;[ $classname ]&lt;/code&gt;</source>
          <target state="translated">요청 된 클래스가 존재하지 않으면이 함수는 계속 성공하고 &lt;code&gt;[ $classname ]&lt;/code&gt; 리턴합니다 .</target>
        </trans-unit>
        <trans-unit id="f3c8df40676c5ef413c4d428cc8bce1edd4a74be" translate="yes" xml:space="preserve">
          <source>If the required version is older than Perl 5.10, the &quot;:default&quot; feature bundle is automatically loaded instead.</source>
          <target state="translated">필요한 버전이 Perl 5.10보다 오래된 경우 &quot;: default&quot;기능 번들이 대신 자동으로로드됩니다.</target>
        </trans-unit>
        <trans-unit id="d407bfa98e92001cef51aaea080c36419318c881" translate="yes" xml:space="preserve">
          <source>If the result is a fraction, it is converted into a floating point number to the accuracy of your platform.</source>
          <target state="translated">결과가 분수이면 플랫폼 정확도에 따라 부동 소수점 숫자로 변환됩니다.</target>
        </trans-unit>
        <trans-unit id="a0f32bf4dd5015a300ddb6707d47fae5eba9e46c" translate="yes" xml:space="preserve">
          <source>If the result is multiple script names, they are returned joined into a single comma-separated string.</source>
          <target state="translated">결과가 여러 스크립트 이름 인 경우 단일 쉼표로 구분 된 문자열로 결합되어 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="45ec7fbff805996e6714524f94283d541160e6c3" translate="yes" xml:space="preserve">
          <source>If the return type of the XSUB includes &lt;code&gt;static&lt;/code&gt; , the method is considered to be a static method. It will call the C++ function using the class::method() syntax. If the method is not static the function will be called using the THIS-&amp;gt;method() syntax.</source>
          <target state="translated">XSUB의 리턴 유형에 &lt;code&gt;static&lt;/code&gt; 이 포함 된 경우 메소드는 정적 메소드로 간주됩니다. class :: method () 구문을 사용하여 C ++ 함수를 호출합니다. 메소드가 정적이 아닌 경우 THIS-&amp;gt; method () 구문을 사용하여 함수가 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="95ff7ce638cb043eea1113e455241d4090a0ba15" translate="yes" xml:space="preserve">
          <source>If the return value of reval() is (or contains) any code reference, those code references are wrapped to be themselves executed always in the compartment. See &lt;a href=&quot;#wrap_code_refs_within&quot;&gt;wrap_code_refs_within&lt;/a&gt;.</source>
          <target state="translated">reval ()의 반환 값이 코드 참조이거나 포함 된 경우 해당 코드 참조는 항상 구획에서 실행되도록 랩핑됩니다. &lt;a href=&quot;#wrap_code_refs_within&quot;&gt;wrap_code_refs_within을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="9b5b2e1517f57a24f52793e2d523bf3e3916b624" translate="yes" xml:space="preserve">
          <source>If the revision (previously &quot;tracking version&quot;) number of UCA is given, behavior of that revision is emulated on collating. If omitted, the return value of &lt;code&gt;UCA_Version()&lt;/code&gt; is used.</source>
          <target state="translated">UCA 개정판 (이전의 &quot;추적 버전&quot;) 수가 제공되면 해당 개정판의 동작이 조합시 에뮬레이트됩니다. 생략하면 &lt;code&gt;UCA_Version()&lt;/code&gt; 의 반환 값 이 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="1a7a3bfd506eaa3a5969fb39449cbd90048c5cd5" translate="yes" xml:space="preserve">
          <source>If the right argument is an expression rather than a search pattern, substitution, or transliteration, it is interpreted as a search pattern at run time. Note that this means that its contents will be interpolated twice, so</source>
          <target state="translated">올바른 인수가 검색 패턴, 대체 또는 음역이 아닌 표현식 인 경우 런타임시 검색 패턴으로 해석됩니다. 이는 내용이 두 번 보간됨을 의미하므로</target>
        </trans-unit>
        <trans-unit id="397d47eee4fc1ac1405170a336868a5dec199f77" translate="yes" xml:space="preserve">
          <source>If the same C type is used in several different contexts which require different translations, &lt;code&gt;typedef&lt;/code&gt; several new types mapped to this C type, and create separate</source>
          <target state="translated">다른 번역이 필요한 여러 컨텍스트에서 동일한 C 유형을 사용 하는 경우이 C 유형에 맵핑 된 몇 가지 새 유형을 &lt;code&gt;typedef&lt;/code&gt; 로 작성하고 개별적으로 작성하십시오</target>
        </trans-unit>
        <trans-unit id="456756c29fcce7da570891f767727aa9e1c8ea70" translate="yes" xml:space="preserve">
          <source>If the same character (or a sequence of characters) exists in the collation element table through &lt;code&gt;table&lt;/code&gt; , mapping to collation elements is overridden. If it does not exist, the mapping is defined additionally.</source>
          <target state="translated">같은 문자 (또는 문자 시퀀스)를 통해 조합 요소 테이블에있는 경우 &lt;code&gt;table&lt;/code&gt; , 정렬 요소에 매핑이 무시됩니다. 존재하지 않는 경우 매핑이 추가로 정의됩니다.</target>
        </trans-unit>
        <trans-unit id="250b229660b09d1a93cecb0077c43fdb021bc44f" translate="yes" xml:space="preserve">
          <source>If the scalar contains a number the raw SV will be leaner.</source>
          <target state="translated">스칼라에 숫자가 포함되어 있으면 원시 SV가 더 적습니다.</target>
        </trans-unit>
        <trans-unit id="129cba7aa8d1059953f619ec45963493064daafb" translate="yes" xml:space="preserve">
          <source>If the scalar from the previous example had an extra reference:</source>
          <target state="translated">이전 예제의 스칼라에 추가 참조가있는 경우 :</target>
        </trans-unit>
        <trans-unit id="942a6cfe1787a0e79c2fbf6e9025269b48593e53" translate="yes" xml:space="preserve">
          <source>If the script says that your package is incomplete, and asks whether to continue, just answer with Y (this can only happen if you don't use long filenames or forget to issue &quot;set FNCASE=y&quot; first).</source>
          <target state="translated">스크립트가 패키지가 불완전하다고 말하고 계속할지 묻는다면 Y로 응답하십시오. 긴 파일 이름을 사용하지 않거나 &quot;set FNCASE = y&quot;를 먼저 발행하는 것을 잊어 버린 경우에만 발생할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="1ebc636a0a5f78fe0991b4d30678c7a47413c67b" translate="yes" xml:space="preserve">
          <source>If the second argument to a piped &lt;code&gt;&lt;a href=&quot;functions/open&quot;&gt;open()&lt;/a&gt;&lt;/code&gt; contains shell metacharacters, perl &lt;code&gt;&lt;a href=&quot;functions/fork&quot;&gt;fork()&lt;/a&gt;&lt;/code&gt;s, then &lt;code&gt;&lt;a href=&quot;functions/exec&quot;&gt;exec()&lt;/a&gt;&lt;/code&gt;s a shell to decode the metacharacters and eventually run the desired program. If the program couldn't be run, it's the shell that gets the message, not Perl. All your Perl program can find out is whether the shell itself could be successfully started. You can still capture the shell's STDERR and check it for error messages. See &lt;a href=&quot;#How-can-I-capture-STDERR-from-an-external-command%3f&quot;&gt;How can I capture STDERR from an external command?&lt;/a&gt; elsewhere in this document, or use the &lt;a href=&quot;ipc/open3&quot;&gt;IPC::Open3&lt;/a&gt; module.</source>
          <target state="translated">파이프로 &lt;code&gt;&lt;a href=&quot;functions/open&quot;&gt;open()&lt;/a&gt;&lt;/code&gt; 대한 두 번째 인수에 쉘 메타 문자 perl &lt;code&gt;&lt;a href=&quot;functions/fork&quot;&gt;fork()&lt;/a&gt;&lt;/code&gt; 가 포함 된 경우 &lt;code&gt;&lt;a href=&quot;functions/exec&quot;&gt;exec()&lt;/a&gt;&lt;/code&gt; sa 쉘은 메타 문자를 디코딩하고 원하는 프로그램을 실행합니다. 프로그램을 실행할 수 없으면 펄이 아니라 메시지를받는 것이 쉘입니다. 펄 프로그램에서 찾을 수있는 것은 쉘 자체가 성공적으로 시작될 수 있는지 여부입니다. 여전히 쉘의 STDERR을 캡처하여 오류 메시지를 확인할 수 있습니다. &lt;a href=&quot;#How-can-I-capture-STDERR-from-an-external-command%3f&quot;&gt;외부 명령에서 STDERR을 캡처하는 방법을&lt;/a&gt; 참조하십시오 . 이 문서의 다른 곳에 있거나 &lt;a href=&quot;ipc/open3&quot;&gt;IPC :: Open3&lt;/a&gt; 모듈을 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="6a485d6980d01df96f56ec659ef159a6f3e30c7c" translate="yes" xml:space="preserve">
          <source>If the second operand has a &quot;nomethod&quot; method then use that.</source>
          <target state="translated">두 번째 피연산자에 &quot;nomethod&quot;메소드가 있으면이를 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="d89fc930c903cfb2489602dfe78fa395aab16a02" translate="yes" xml:space="preserve">
          <source>If the second parameter (a boolean) is omitted or false, the decomposition is canonical decomposition; if the second parameter (a boolean) is true, the decomposition is compatibility decomposition.</source>
          <target state="translated">두 번째 매개 변수 (부울)가 생략되거나 거짓이면 분해는 정식 분해입니다. 두 번째 매개 변수 (부울)가 true 인 경우 분해는 호환성 분해입니다.</target>
        </trans-unit>
        <trans-unit id="cdc3a4f8b493e77f4b46b059968dc0b38f7409ec" translate="yes" xml:space="preserve">
          <source>If the selected element is outside the string, the value 0 is returned. If an element off the end of the string is written to, Perl will first extend the string with sufficiently many zero bytes. It is an error to try to write off the beginning of the string (i.e., negative OFFSET).</source>
          <target state="translated">선택된 요소가 문자열 외부에 있으면 값 0이 리턴됩니다. 문자열의 끝에있는 요소가 쓰여지면 Perl은 먼저 충분히 많은 0 바이트로 문자열을 확장합니다. 문자열의 시작 부분 (예 : 음수 OFFSET)을 쓰려고하면 오류가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="08309d3b072967d3ab275a7c77649be9b9f2f474" translate="yes" xml:space="preserve">
          <source>If the semaphore's count would drop below zero, this method will block until such time as the semaphore's count is greater than or equal to the amount you're &lt;code&gt;down&lt;/code&gt; ing the semaphore's count by.</source>
          <target state="translated">세마포어 카운트가 0 아래로 떨어지면이 방법은 세마포어 카운트가 세마포어 카운트를 &lt;code&gt;down&lt;/code&gt; 양보다 크거나 같은 시간까지 차단 됩니다.</target>
        </trans-unit>
        <trans-unit id="49cf6efaba2d8b062462556a6172122cd62a7391" translate="yes" xml:space="preserve">
          <source>If the semaphore's count would drop below zero, this method will return</source>
          <target state="translated">세마포어 수가 0 아래로 떨어지면이 메소드는</target>
        </trans-unit>
        <trans-unit id="feaf413a0792a40fde39688dd7794f1b79d23f9d" translate="yes" xml:space="preserve">
          <source>If the shareable image isn't in any of these places, you'll need to define a logical name</source>
          <target state="translated">공유 가능한 이미지가이 위치에 없으면 논리적 이름을 정의해야합니다.</target>
        </trans-unit>
        <trans-unit id="5d77daa474d5b520bbe270f2db415132f8e51945" translate="yes" xml:space="preserve">
          <source>If the socket is in a connected state, the peer address is returned. If the socket is not in a connected state, undef is returned.</source>
          <target state="translated">소켓이 연결 상태에 있으면 피어 주소가 반환됩니다. 소켓이 연결 상태가 아닌 경우 undef가 리턴됩니다.</target>
        </trans-unit>
        <trans-unit id="bc839afaf75ab77ac378c573dd37cfe67fada222" translate="yes" xml:space="preserve">
          <source>If the source number can be represented in the target form, that representation is used.</source>
          <target state="translated">소스 번호를 대상 형식으로 표현할 수 있으면 해당 표현이 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="ad2456e62439e41ca828e4d7a559faef86d9a12f" translate="yes" xml:space="preserve">
          <source>If the source number is between two numbers representable in the target form, a representation of one of these numbers is used. (</source>
          <target state="translated">소스 번호가 대상 형식으로 표현할 수있는 두 숫자 사이 인 경우이 숫자 중 하나의 표현이 사용됩니다. (</target>
        </trans-unit>
        <trans-unit id="5807a3edb0534ce60ac2857df2fbffa4467c6e15" translate="yes" xml:space="preserve">
          <source>If the source number is outside of the limits representable in the target form, a representation of the closest limit is used. (</source>
          <target state="translated">소스 번호가 목표 형식으로 표현할 수있는 한계를 벗어난 경우 가장 가까운 한계의 ​​표현이 사용됩니다. (</target>
        </trans-unit>
        <trans-unit id="a2b6fc7f507aeb4c29a8733766d6c6136c45fda9" translate="yes" xml:space="preserve">
          <source>If the special input filename &quot;&quot;, &quot;-&quot; or &quot;&amp;lt;&amp;amp;STDIN&quot; is given then the STDIN filehandle is used for input (and no open or close is performed). If no input filename is specified then &quot;-&quot; is implied. Filehandle references, or objects that support the regular IO operations (like &lt;code&gt;&amp;lt;$fh&amp;gt;&lt;/code&gt; or &lt;code&gt;$fh-&amp;lt;Egt&lt;/code&gt;getline&amp;gt;) are also accepted; the handles must already be opened.</source>
          <target state="translated">특수 입력 파일 이름 &quot;&quot;, &quot;-&quot;또는 &quot;&amp;lt;&amp;amp; STDIN&quot;이 제공되면 STDIN 파일 핸들이 입력에 사용되며 열기 또는 닫기가 수행되지 않습니다. 입력 파일 이름을 지정하지 않으면 &quot;-&quot;가 암시됩니다. 파일 핸들 참조 또는 일반 IO 작업을 지원하는 객체 (예 : &lt;code&gt;&amp;lt;$fh&amp;gt;&lt;/code&gt; 또는 &lt;code&gt;$fh-&amp;lt;Egt&lt;/code&gt; getline&amp;gt;)도 허용됩니다. 핸들이 이미 열려 있어야합니다.</target>
        </trans-unit>
        <trans-unit id="0ec8f0307ac0cd29be9e31e20412d0003c85f12a" translate="yes" xml:space="preserve">
          <source>If the standard options aren't enough, you may want to subclass Pod::Simple::XHMTL. These are the most likely candidates for methods you'll want to override when subclassing.</source>
          <target state="translated">표준 옵션이 충분하지 않으면 Pod :: Simple :: XHMTL을 서브 클래스화할 수 있습니다. 서브 클래 싱 할 때 재정의하려는 메소드에 가장 적합한 후보입니다.</target>
        </trans-unit>
        <trans-unit id="95c4f5fed91805150d0fb1f5cc265445f3719afe" translate="yes" xml:space="preserve">
          <source>If the string happens to be encoded as UTF-8 internally (and thus has the UTF8 flag set), this is ignored by &lt;code&gt;&lt;a href=&quot;functions/vec&quot;&gt;vec&lt;/a&gt;&lt;/code&gt;, and it operates on the internal byte string, not the conceptual character string, even if you only have characters with values less than 256.</source>
          <target state="translated">문자열이 내부적으로 UTF-8로 인코딩되어 UTF8 플래그 세트가있는 경우 &lt;code&gt;&lt;a href=&quot;functions/vec&quot;&gt;vec&lt;/a&gt;&lt;/code&gt; 에 의해 무시되며 , 문자열이있는 문자 만있는 경우에도 개념적 문자열이 아닌 내부 바이트 문자열에서 작동합니다. 256보다 작은 값.</target>
        </trans-unit>
        <trans-unit id="e46f7dff46b6e909ca2a4c0f1cd989e3474f6367" translate="yes" xml:space="preserve">
          <source>If the string happens to be encoded as UTF-8 internally (and thus has the UTF8 flag set), this is ignored by &lt;code&gt;&lt;a href=&quot;vec&quot;&gt;vec&lt;/a&gt;&lt;/code&gt;, and it operates on the internal byte string, not the conceptual character string, even if you only have characters with values less than 256.</source>
          <target state="translated">문자열이 내부적으로 UTF-8로 인코딩되어 UTF8 플래그 세트가있는 경우 &lt;code&gt;&lt;a href=&quot;vec&quot;&gt;vec&lt;/a&gt;&lt;/code&gt; 에 의해 무시되며 , 문자열이있는 문자 만있는 경우에도 개념적 문자열이 아닌 내부 바이트 문자열에서 작동합니다. 256보다 작은 값.</target>
        </trans-unit>
        <trans-unit id="556906a3727707516e15ba62fe70b3006b4bd52d" translate="yes" xml:space="preserve">
          <source>If the string is just one character in length, the Unicode numeric value is returned if it has one, or &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; otherwise. Note that this need not be a whole number. &lt;code&gt;num(&quot;\N{TIBETAN DIGIT HALF ZERO}&quot;)&lt;/code&gt; , for example returns -0.5.</source>
          <target state="translated">문자열의 길이가 한 문자이면 유니 코드 숫자 값이 있으면 반환되고 그렇지 않으면 &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; 입니다. 이것은 정수일 필요는 없습니다. &lt;code&gt;num(&quot;\N{TIBETAN DIGIT HALF ZERO}&quot;)&lt;/code&gt; 예를 들어 -0.5를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="3c98175c6574b582a8455429e44a48ac7e74d895" translate="yes" xml:space="preserve">
          <source>If the string is more than one character, &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; is returned unless all its characters are decimal digits (that is, they would match &lt;code&gt;\d+&lt;/code&gt; ), from the same script. For example if you have an ASCII '0' and a Bengali '3', mixed together, they aren't considered a valid number, and &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; is returned. A further restriction is that the digits all have to be of the same form. A half-width digit mixed with a full-width one will return &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt;. The Arabic script has two sets of digits; &lt;code&gt;num&lt;/code&gt; will return &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; unless all the digits in the string come from the same set.</source>
          <target state="translated">문자열이 둘 이상의 문자 인 경우 , 동일한 스크립트에서 모든 문자가 10 진수 (즉, &lt;code&gt;\d+&lt;/code&gt; 와 일치)가 아닌 한 &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; 가 리턴 됩니다. 예를 들어 ASCII '0'과 Bengali '3'이 함께 혼합 된 경우 유효한 숫자로 간주되지 않으며 &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; 가 반환됩니다. 추가 제한 사항은 숫자가 모두 같은 형식이어야한다는 것입니다. 반각 자릿수와 전각 자릿수를 혼합하면 &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; 가 반환 됩니다. 아랍어 스크립트에는 두 자리 숫자가 있습니다. 문자열의 모든 숫자가 동일한 세트에서 나오지 않으면 &lt;code&gt;num&lt;/code&gt; 은 &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; 를 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="b8c4922eb5c062cef768c57176fb78d4965487a5" translate="yes" xml:space="preserve">
          <source>If the subroutine is an XSUB, the elements to be compared are pushed on to the stack, the way arguments are usually passed to XSUBs. $a and $b are not set.</source>
          <target state="translated">서브 루틴이 XSUB 인 경우 비교할 요소가 스택으로 푸시되고 인수가 일반적으로 XSUB에 전달되는 방식으로 푸시됩니다. $ a 및 $ b가 설정되지 않았습니다.</target>
        </trans-unit>
        <trans-unit id="976151f66fa723fd3131374feb62ee8e2fa9f3b7" translate="yes" xml:space="preserve">
          <source>If the subroutine needs to signal an error, it should call die() with the desired error message as its argument. GetOptions() will catch the die(), issue the error message, and record that an error result must be returned upon completion.</source>
          <target state="translated">서브 루틴이 오류를 신호해야하는 경우 원하는 오류 메시지를 인수로 사용하여 die ()를 호출해야합니다. GetOptions ()는 die ()를 포착하고 오류 메시지를 발행하며 완료시 오류 결과를 리턴해야한다는 것을 기록합니다.</target>
        </trans-unit>
        <trans-unit id="40540ec0b48601a220c70ec78c454bb0e1f51c33" translate="yes" xml:space="preserve">
          <source>If the subroutine returns a scalar with a newline or a filehandle, it will be interpreted as raw TAP or as a TAP stream, respectively.</source>
          <target state="translated">서브 루틴이 개행 또는 파일 핸들이있는 스칼라를 리턴하면 각각 원시 TAP 또는 TAP 스트림으로 해석됩니다.</target>
        </trans-unit>
        <trans-unit id="ca613cca9ddf94b18fd3a6da5979f02e2a0a3fcf" translate="yes" xml:space="preserve">
          <source>If the subroutine's prototype is &lt;code&gt;($$)&lt;/code&gt; , the elements to be compared are passed by reference in &lt;code&gt;@_&lt;/code&gt; , as for a normal subroutine. This is slower than unprototyped subroutines, where the elements to be compared are passed into the subroutine as the package global variables $a and $b (see example below). Note that in the latter case, it is usually highly counter-productive to declare $a and $b as lexicals.</source>
          <target state="translated">서브 루틴의 프로토 타입이 &lt;code&gt;($$)&lt;/code&gt; 인 경우, 비교할 요소 는 일반 서브 루틴과 마찬가지로 &lt;code&gt;@_&lt;/code&gt; 에 참조로 전달됩니다 . 이것은 프로토 타입이없는 서브 루틴보다 느립니다. 여기서 비교할 요소는 패키지 전역 변수 $ a 및 $ b (아래 예 참조)로 서브 루틴에 전달됩니다. 후자의 경우, 일반적으로 $ a와 $ b를 어휘로 선언하는 것은 비생산적입니다.</target>
        </trans-unit>
        <trans-unit id="1b8a697c5090fd8ce94c13b5cefb41955f99b010" translate="yes" xml:space="preserve">
          <source>If the sv already is UTF-8 (or if it is not POK), or if the encoding is not a reference, nothing is done to the sv. If the encoding is not an &lt;code&gt;Encode::XS&lt;/code&gt; Encoding object, bad things will happen. (See</source>
          <target state="translated">sv가 이미 UTF-8이거나 (또는 ​​POK가 아닌 경우) 인코딩이 참조가 아닌 경우 sv에 대해서는 수행되지 않습니다. 인코딩이 &lt;code&gt;Encode::XS&lt;/code&gt; 인코딩 개체 가 아닌 경우 나쁜 일이 발생합니다. (보다</target>
        </trans-unit>
        <trans-unit id="25e6d11786b2dfdb0f52678b6850a3dff8731c46" translate="yes" xml:space="preserve">
          <source>If the sv is the target of a weak reference then it returns the back references structure associated with the sv; otherwise return NULL.</source>
          <target state="translated">sv가 약한 참조의 대상이면 sv와 연관된 역 참조 구조를 반환합니다. 그렇지 않으면 NULL을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="82b0821b14cc4cbb805ab8ac00aa5900da22e409" translate="yes" xml:space="preserve">
          <source>If the symbol &lt;code&gt;:void&lt;/code&gt; appears in the import list, then functions named later in that import list raise an exception only when these are called in void context--that is, when their return values are ignored. For example</source>
          <target state="translated">가져 오기 목록에 &lt;code&gt;:void&lt;/code&gt; 기호 가 표시되면 해당 가져 오기 목록에서 나중에 명명 된 함수가 void 컨텍스트에서 호출 된 경우, 즉 반환 값이 무시되는 경우에만 예외가 발생합니다. 예를 들어</target>
        </trans-unit>
        <trans-unit id="50cf7df5061941de64a11ddf12781ae7a8f3290f" translate="yes" xml:space="preserve">
          <source>If the system Perl is compiled in has thread-safe variants of such calls, they will be used. Beyond that, Perl is at the mercy of the thread-safety or -unsafety of the calls. Please consult your C library call documentation.</source>
          <target state="translated">시스템 Perl이 그러한 호출의 스레드 안전 변형을 갖는 경우 컴파일됩니다. 그 외에도 Perl은 스레드 안전성 또는 호출의 안전하지 않은 자비에 있습니다. C 라이브러리 호출 문서를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="d5b1234bec481f7f0fb540471e8867994b10762a" translate="yes" xml:space="preserve">
          <source>If the target machine is little-endian, we could write:</source>
          <target state="translated">대상 머신이 리틀 엔디안이라면 다음과 같이 쓸 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ff635540edd5aea28a885e06a80c5c6844ba7c11" translate="yes" xml:space="preserve">
          <source>If the template is not specified, a template is always automatically generated. This temporary file is placed in tmpdir() (L&amp;lt;:spec&amp;gt;) unless a directory is specified explicitly with the DIR option.</source>
          <target state="translated">템플릿을 지정하지 않으면 템플릿이 항상 자동으로 생성됩니다. 이 임시 파일은 디렉토리가 DIR 옵션으로 명시 적으로 지정되지 않는 한 tmpdir () (L &amp;lt;: spec&amp;gt;)에 있습니다.</target>
        </trans-unit>
        <trans-unit id="593ec0746d963b28de5ba2cf0799b3f4777c63c7" translate="yes" xml:space="preserve">
          <source>If the temporary file can not be created undef is returned. Currently this command will probably not work when the temporary directory is on an NFS file system.</source>
          <target state="translated">임시 파일을 만들 수 없으면 undef가 반환됩니다. 현재이 명령은 임시 디렉토리가 NFS 파일 시스템에있을 때 작동하지 않을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="326e7cf804954bda3811121b38cb7c631e7575fe" translate="yes" xml:space="preserve">
          <source>If the terminating string is quoted, the type of quotes used determine the treatment of the text.</source>
          <target state="translated">종료 문자열이 인용되는 경우 사용 된 인용 유형에 따라 텍스트 처리가 결정됩니다.</target>
        </trans-unit>
        <trans-unit id="957eb5ae659823f7ba1c0183ec0ac873de8b4109" translate="yes" xml:space="preserve">
          <source>If the test is unplanned, this method will always return false. See &lt;code&gt;is_unplanned&lt;/code&gt; .</source>
          <target state="translated">테스트가 계획되지 않은 경우이 메소드는 항상 false를 리턴합니다. &lt;code&gt;is_unplanned&lt;/code&gt; 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="1bfabe273698ccd033cf292d0d277e005ca02c57" translate="yes" xml:space="preserve">
          <source>If the tests fail &lt;code&gt;prove&lt;/code&gt; will exit with non-zero status.</source>
          <target state="translated">테스트에 실패하면 &lt;code&gt;prove&lt;/code&gt; 은 0이 아닌 상태로 종료됩니다.</target>
        </trans-unit>
        <trans-unit id="269c79628ff3b9a7faad565d0d36f6d320d9b282" translate="yes" xml:space="preserve">
          <source>If the text of the L&amp;lt;&amp;gt; escape is entirely enclosed in double quotes, it's interpreted as a link to a section for backward compatibility.</source>
          <target state="translated">L &amp;lt;&amp;gt; 이스케이프 텍스트가 큰 따옴표로 묶인 경우 이전 버전과의 호환성을위한 섹션에 대한 링크로 해석됩니다.</target>
        </trans-unit>
        <trans-unit id="f92e03b607dab58b8f2f2e3c224ccb0a3fc3ca6c" translate="yes" xml:space="preserve">
          <source>If the text of the error message starts with an exclamation mark &lt;code&gt;!&lt;/code&gt; it is interpreted specially by GetOptions(). There is currently one special command implemented: &lt;code&gt;&lt;a href=&quot;../functions/die&quot;&gt;die(&quot;!FINISH&quot;)&lt;/a&gt;&lt;/code&gt; will cause GetOptions() to stop processing options, as if it encountered a double dash &lt;code&gt;--&lt;/code&gt; .</source>
          <target state="translated">오류 메시지의 텍스트가 느낌표로 시작하면 &lt;code&gt;!&lt;/code&gt; GetOptions ()에 의해 특별히 해석됩니다. 현재 하나의 특수 명령이 구현되어 있습니다. &lt;code&gt;&lt;a href=&quot;../functions/die&quot;&gt;die(&quot;!FINISH&quot;)&lt;/a&gt;&lt;/code&gt; 는 GetOptions ()가 이중 대시 &lt;code&gt;--&lt;/code&gt; 와 같이 옵션 처리를 중지하도록합니다 .</target>
        </trans-unit>
        <trans-unit id="54a21a0dcb36b1ce3d43912ccebce5a460b97864" translate="yes" xml:space="preserve">
          <source>If the third argument is</source>
          <target state="translated">세 번째 인수가</target>
        </trans-unit>
        <trans-unit id="b232866b6ad063c73d4ad37ea476edb565d6de63" translate="yes" xml:space="preserve">
          <source>If the third argument,</source>
          <target state="translated">세 번째 주장이</target>
        </trans-unit>
        <trans-unit id="66bf0740d3ced4e3ce4166e93bb8bdf81549240a" translate="yes" xml:space="preserve">
          <source>If the thread being &lt;code&gt;&lt;a href=&quot;functions/join&quot;&gt;join&lt;/a&gt;&lt;/code&gt;ed &lt;code&gt;&lt;a href=&quot;functions/die&quot;&gt;die&lt;/a&gt;&lt;/code&gt;d, the error it died with will be returned at this time. If you don't want the thread performing the &lt;code&gt;&lt;a href=&quot;functions/join&quot;&gt;join&lt;/a&gt;&lt;/code&gt; to die as well, you should either wrap the &lt;code&gt;&lt;a href=&quot;functions/join&quot;&gt;join&lt;/a&gt;&lt;/code&gt; in an &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt; or use the &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt; thread method instead of &lt;code&gt;&lt;a href=&quot;functions/join&quot;&gt;join&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">스레드가 존재하는 경우 &lt;code&gt;&lt;a href=&quot;functions/join&quot;&gt;join&lt;/a&gt;&lt;/code&gt; 에드 &lt;code&gt;&lt;a href=&quot;functions/die&quot;&gt;die&lt;/a&gt;&lt;/code&gt; (D)를, 그것과 사망 오류 이때 리턴한다. 당신이이 수행하는 스레드하지 않으려면 &lt;code&gt;&lt;a href=&quot;functions/join&quot;&gt;join&lt;/a&gt;&lt;/code&gt; 뿐만 아니라 죽을를, 당신이 중 하나는 포장해야 &lt;code&gt;&lt;a href=&quot;functions/join&quot;&gt;join&lt;/a&gt;&lt;/code&gt; 에 &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt; 또는 사용 &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt; 스레드 방식을 대신 &lt;code&gt;&lt;a href=&quot;functions/join&quot;&gt;join&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="3cd970acc5e28ee89d2e82334dde273c65bae5b7" translate="yes" xml:space="preserve">
          <source>If the title can't be found, then get_short_title returns empty-string (&quot;&quot;).</source>
          <target state="translated">제목을 찾을 수 없으면 get_short_title은 빈 문자열 ( &quot;&quot;)을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="697a489e14d5b870ec5510bd4b458c67ab45bad8" translate="yes" xml:space="preserve">
          <source>If the typeglob &lt;code&gt;gv&lt;/code&gt; can be expressed more succinctly, by having something other than a real GV in its place in the stash, replace it with the optimised form. Basic requirements for this are that &lt;code&gt;gv&lt;/code&gt; is a real typeglob, is sufficiently ordinary, and is only referenced from its package. This function is meant to be used when a GV has been looked up in part to see what was there, causing upgrading, but based on what was found it turns out that the real GV isn't required after all.</source>
          <target state="translated">타입 글로브 &lt;code&gt;gv&lt;/code&gt; 를 더 간결하게 표현할 수있는 경우, 숨김에 실제 GV 이외의 것을 배치하여 최적화 된 형태로 바꾸십시오. 이것에 대한 기본 요구 사항은 &lt;code&gt;gv&lt;/code&gt; 가 실제 타입 글롭이고 충분히 평범하며 패키지에서만 참조 해야한다는 것 입니다. 이 기능은 GV가 부분적으로 조회되어 업그레이드 된 원인이 무엇인지 확인하는 데 사용되지만 실제 GV가 전혀 필요하지 않은 것으로 밝혀졌습니다.</target>
        </trans-unit>
        <trans-unit id="7e317e256420ab2a48b2f7e7b312c3d9f416e521" translate="yes" xml:space="preserve">
          <source>If the underlying &lt;code&gt;IO::Handle&lt;/code&gt; is closed, or if there are any read or write failures, the file handle will be forced closed, and &lt;code&gt;code()&lt;/code&gt; will return &quot;421&quot; (temporary connection failure) and &lt;code&gt;message()&lt;/code&gt; will return &quot;[$pkg] Connection closed&quot; (where $pkg is the name of the class that subclassed &lt;code&gt;Net::Cmd&lt;/code&gt; ). The _set_status_closed() method can be overridden to set a different message (by calling set_status()) or otherwise trap this error.</source>
          <target state="translated">기본 &lt;code&gt;IO::Handle&lt;/code&gt; 이 닫히거나 읽기 또는 쓰기 실패가 발생하면 파일 핸들이 강제로 닫히고 &lt;code&gt;code()&lt;/code&gt; 는 &quot;421&quot;(임시 연결 실패 &lt;code&gt;message()&lt;/code&gt; 을 반환 하고 message () 는 &quot;[ $ pkg] Connection closed &quot;(여기서 $ pkg는 &lt;code&gt;Net::Cmd&lt;/code&gt; 를 서브 클래 싱 한 클래스의 이름입니다 ). _set_status_closed () 메소드를 재정 의하여 다른 메시지를 설정하거나 (set_status () 호출)이 오류를 잡을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="cdc3b2cf894256f273b0349af8d5d688d0cdcb39" translate="yes" xml:space="preserve">
          <source>If the user builds a shared</source>
          <target state="translated">사용자가 공유를 구축하는 경우</target>
        </trans-unit>
        <trans-unit id="32324af5745fb70c85007da7a27faa556a189cfd" translate="yes" xml:space="preserve">
          <source>If the user didn't specify anything, it's interpreted as having used the &lt;code&gt;please&lt;/code&gt; tag. It's up to you to make this useful.</source>
          <target state="translated">사용자가 아무것도 지정하지 않은 경우 &lt;code&gt;please&lt;/code&gt; 태그 를 사용한 것으로 해석됩니다 . 이것을 유용하게 만드는 것은 당신에게 달려 있습니다.</target>
        </trans-unit>
        <trans-unit id="cd074d1ec9315994a5770ffd227be188d8ea3674" translate="yes" xml:space="preserve">
          <source>If the user does not have HTML::Lint installed, the whole block of code</source>
          <target state="translated">사용자에게 HTML :: Lint가 설치되어 있지 않은 경우 전체 코드 블록</target>
        </trans-unit>
        <trans-unit id="b39c8811f479889c6eabed43038bf7a333557852" translate="yes" xml:space="preserve">
          <source>If the user has superuser privileges, and is not working on AFS or relatives, then the defaults for INSTALLPRIVLIB, INSTALLARCHLIB, INSTALLSCRIPT, etc. will be appropriate, and this incantation will be the best:</source>
          <target state="translated">사용자에게 수퍼 유저 권한이 있고 AFS 또는 친척에 대해 작업하지 않는 경우 INSTALLPRIVLIB, INSTALLARCHLIB, INSTALLSCRIPT 등의 기본값이 적절하며이 제안이 가장 좋습니다.</target>
        </trans-unit>
        <trans-unit id="3d9745c4616cab220c27715466f7a222d8b72268" translate="yes" xml:space="preserve">
          <source>If the value</source>
          <target state="translated">값이</target>
        </trans-unit>
        <trans-unit id="1676523b419ae746e43ad6553d2687aea42c504e" translate="yes" xml:space="preserve">
          <source>If the value doesn't match the 'make' program you want to use, edit Config.pm to fix it.</source>
          <target state="translated">값이 사용하려는 'make'프로그램과 일치하지 않으면 Config.pm을 편집하여 수정하십시오.</target>
        </trans-unit>
        <trans-unit id="9aa86f4743abc7079a416abc9073771271ff4394" translate="yes" xml:space="preserve">
          <source>If the value is &amp;lt;= &lt;code&gt;UV_MAX&lt;/code&gt; it is returned as a UV, the output flags are clear, and nothing is written to</source>
          <target state="translated">값이 &amp;lt;= &lt;code&gt;UV_MAX&lt;/code&gt; 인 경우 UV로 반환되고 출력 플래그가 지워 지며 아무것도 기록되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="bd15952acdcd265d4f18a816b3be548c37a82d83" translate="yes" xml:space="preserve">
          <source>If the value is &amp;lt;= UV_MAX it is returned as a UV, the output flags are clear, and nothing is written to</source>
          <target state="translated">값이 &amp;lt;= UV_MAX 인 경우 UV로 반환되고 출력 플래그가 지워지며 아무것도 기록되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="c10d8690679793d91d603d7249997075229bffed" translate="yes" xml:space="preserve">
          <source>If the value is a coderef, we return &amp;amp;$value($lh, ...parameters...).</source>
          <target state="translated">값이 코드 참조 인 경우 &amp;amp; $ value ($ lh, ... parameters ...)를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="ef50a320b2209faad43a3f8213d92ea4b618e424" translate="yes" xml:space="preserve">
          <source>If the value is a scalarref, the scalar is dereferenced and returned (and any parameters are ignored).</source>
          <target state="translated">값이 스칼라 참조 인 경우 스칼라는 역 참조되어 리턴됩니다 (그리고 모든 매개 변수는 무시됩니다).</target>
        </trans-unit>
        <trans-unit id="6f950a468109b8d39520112d3f58effdc56407fc" translate="yes" xml:space="preserve">
          <source>If the value is a string that</source>
          <target state="translated">값이 문자열 인 경우</target>
        </trans-unit>
        <trans-unit id="034aa5dfb1d3fc388ace8815e3c3af316b7fe0f0" translate="yes" xml:space="preserve">
          <source>If the value is true, then the appropriate pragma is assumed to be in the ambient scope, otherwise not.</source>
          <target state="translated">값이 true이면 해당 pragma가 주변 범위에있는 것으로 가정하고 그렇지 않으면 그렇지 않습니다.</target>
        </trans-unit>
        <trans-unit id="c4b0ded1a1deef22b5fab46f3c6efeda2921b5b8" translate="yes" xml:space="preserve">
          <source>If the value of</source>
          <target state="translated">값이</target>
        </trans-unit>
        <trans-unit id="3799e4ea2da2d340ca2beed8a5872250c216eb41" translate="yes" xml:space="preserve">
          <source>If the value of the number can fit in a UV, it is returned in the *valuep IS_NUMBER_IN_UV will be set to indicate that *valuep is valid, IS_NUMBER_IN_UV will never be set unless *valuep is valid, but *valuep may have been assigned to during processing even though IS_NUMBER_IN_UV is not set on return. If valuep is NULL, IS_NUMBER_IN_UV will be set for the same cases as when valuep is non-NULL, but no actual assignment (or SEGV) will occur.</source>
          <target state="translated">숫자 값이 UV에 맞을 수 있으면 * valuep에 반환됩니다. IS_NUMBER_IN_UV는 * valuep가 유효 함을 나타내도록 설정되며 * valuep가 유효하지 않으면 IS_NUMBER_IN_UV가 설정되지 않지만 * valuep가 IS_NUMBER_IN_UV가 반환시 설정되지 않은 경우에도 처리 중 valuep가 NULL이면 valuep가 NULL이 아닌 경우와 동일한 경우 IS_NUMBER_IN_UV가 설정되지만 실제 할당 (또는 SEGV)은 발생하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="d417792987cefdc8fbbad820c7047930346b40c5" translate="yes" xml:space="preserve">
          <source>If the value to pack is too long, the result is truncated. If it's too long and an explicit count is provided, &lt;code&gt;Z&lt;/code&gt; packs only &lt;code&gt;$count-1&lt;/code&gt; bytes, followed by a null byte. Thus &lt;code&gt;Z&lt;/code&gt; always packs a trailing null, except when the count is 0.</source>
          <target state="translated">압축 할 값이 너무 길면 결과가 잘립니다. 너무 길고 명시적인 카운트가 제공되면 &lt;code&gt;Z&lt;/code&gt; 는 &lt;code&gt;$count-1&lt;/code&gt; 바이트 만 압축 한 다음 null 바이트를 씁니다. 따라서 &lt;code&gt;Z&lt;/code&gt; 는 개수가 0 인 경우를 제외하고 항상 후행 null을 압축합니다.</target>
        </trans-unit>
        <trans-unit id="2b18faee7915986e7efaa1de04f931c2b8c71f1c" translate="yes" xml:space="preserve">
          <source>If the values are all small integers, you could use a simple indexed array. This kind of an array will take up less space:</source>
          <target state="translated">값이 모두 작은 정수이면 간단한 인덱스 배열을 사용할 수 있습니다. 이런 종류의 배열은 공간을 덜 차지합니다.</target>
        </trans-unit>
        <trans-unit id="5cc9e16e91b4a8896cd9faaa5f9549cbc7085c8f" translate="yes" xml:space="preserve">
          <source>If the values in question are integers instead of strings, you can save quite a lot of space by using bit strings instead:</source>
          <target state="translated">문제의 값이 문자열이 아닌 정수이면 비트 문자열을 대신 사용하여 많은 공간을 절약 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="73e7da39372f108fea1077e432f6f8a5490ef1c9" translate="yes" xml:space="preserve">
          <source>If the variable is locked by another thread, the &lt;code&gt;&lt;a href=&quot;functions/lock&quot;&gt;lock&lt;/a&gt;&lt;/code&gt; call will block until it's available. &lt;code&gt;&lt;a href=&quot;functions/lock&quot;&gt;lock&lt;/a&gt;&lt;/code&gt; is recursive, so multiple calls to &lt;code&gt;&lt;a href=&quot;functions/lock&quot;&gt;lock&lt;/a&gt;&lt;/code&gt; are safe--the variable will remain locked until the outermost lock on the variable goes out of scope.</source>
          <target state="translated">변수가 다른 스레드에 의해 잠겨 있으면 &lt;code&gt;&lt;a href=&quot;functions/lock&quot;&gt;lock&lt;/a&gt;&lt;/code&gt; 호출은 사용 가능할 때까지 차단됩니다. &lt;code&gt;&lt;a href=&quot;functions/lock&quot;&gt;lock&lt;/a&gt;&lt;/code&gt; 여러 번 호출하므로 재귀 &lt;code&gt;&lt;a href=&quot;functions/lock&quot;&gt;lock&lt;/a&gt;&lt;/code&gt; 안전 - 변수의 바깥 쪽 잠금 범위를 벗어날 때까지 변수이 고정됩니다.</target>
        </trans-unit>
        <trans-unit id="82a274850c71686d34e3baa803737f0dedda24d3" translate="yes" xml:space="preserve">
          <source>If the variable is not set, or if the head of space-separated list is empty, the best available package is loaded.</source>
          <target state="translated">변수가 설정되어 있지 않거나 공백으로 구분 된 목록의 헤드가 비어 있으면 사용 가능한 최상의 패키지가로드됩니다.</target>
        </trans-unit>
        <trans-unit id="80b83d018cb7a8db8be65fb54c56d8b5b7e8cb24" translate="yes" xml:space="preserve">
          <source>If the warnings category, &lt;code&gt;$category&lt;/code&gt; , has been set to &quot;FATAL&quot; in the calling module then die. Otherwise return.</source>
          <target state="translated">호출 모듈에서 경고 범주 &lt;code&gt;$category&lt;/code&gt; 가 &quot;FATAL&quot;로 설정되어 있으면 죽습니다. 그렇지 않으면 돌아옵니다.</target>
        </trans-unit>
        <trans-unit id="9de09cf9a89a26f0cb448619847689ec2527d3db" translate="yes" xml:space="preserve">
          <source>If the whole program is Unicode (signified by using 8-bit &lt;b&gt;U&lt;/b&gt;nicode &lt;b&gt;T&lt;/b&gt;ransformation &lt;b&gt;F&lt;/b&gt;ormat), then all strings within it must be Unicode.</source>
          <target state="translated">전체 프로그램이 유니 코드 인 경우 (8 비트 사용하여 의미했다 &lt;b&gt;U&lt;/b&gt; nicode &lt;b&gt;T&lt;/b&gt; ransformation &lt;b&gt;F의&lt;/b&gt; ORMAT을), 다음 내의 모든 문자열은 유니 코드해야합니다.</target>
        </trans-unit>
        <trans-unit id="9cdf7f58b72ea89ccbb496e2eb6b9b4bc7fadaa5" translate="yes" xml:space="preserve">
          <source>If the word &lt;code&gt;while&lt;/code&gt; is replaced by the word &lt;code&gt;until&lt;/code&gt; , the sense of the test is reversed, but the conditional is still tested before the first iteration.</source>
          <target state="translated">단어의 경우 &lt;code&gt;while&lt;/code&gt; 단어로 대체 &lt;code&gt;until&lt;/code&gt; 테스트의 의미는 반대하지만, 조건은 여전히 첫 번째 반복 전에 테스트됩니다.</target>
        </trans-unit>
        <trans-unit id="10166029e96e7fe67231308fbe3c16515584c847" translate="yes" xml:space="preserve">
          <source>If there are additional casing rules that apply only in certain locales, an additional key for each will be defined in the returned hash. Each such key will be its locale name, defined as a 2-letter ISO 3166 country code, possibly followed by a &quot;_&quot; and a 2-letter ISO language code (possibly followed by a &quot;_&quot; and a variant code). You can find the lists of all possible locales, see &lt;a href=&quot;../locale/country&quot;&gt;Locale::Country&lt;/a&gt; and &lt;a href=&quot;../locale/language&quot;&gt;Locale::Language&lt;/a&gt;. (In Unicode 6.0, the only locales returned by this function are &lt;code&gt;lt&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;../functions/tr&quot;&gt;tr&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;az&lt;/code&gt; .)</source>
          <target state="translated">특정 로케일에만 적용되는 추가 케이싱 규칙이있는 경우 각각의 추가 키가 반환 된 해시에 정의됩니다. 이러한 각 키는 2 문자 ISO 3166 국가 코드로 정의 된 로케일 이름이며 &quot;_&quot;및 2 문자 ISO 언어 코드 ( &quot;_&quot;및 변형 코드가 뒤에옵니다)가 뒤에있을 수 있습니다. 가능한 모든 로캘 목록을 찾을 수 있습니다 ( &lt;a href=&quot;../locale/country&quot;&gt;Locale :: Country&lt;/a&gt; 및 &lt;a href=&quot;../locale/language&quot;&gt;Locale :: Language 참조)&lt;/a&gt; . (유니 코드 6.0에서이 함수가 리턴하는 유일한 로케일은 &lt;code&gt;lt&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;../functions/tr&quot;&gt;tr&lt;/a&gt;&lt;/code&gt; 및 &lt;code&gt;az&lt;/code&gt; 입니다.)</target>
        </trans-unit>
        <trans-unit id="c264a98231858c182cc8e558543c798b7c30e957" translate="yes" xml:space="preserve">
          <source>If there are more pack codes or if the repeat count of a field or a group is larger than what the remainder of the input string allows, the result is not well defined: the repeat count may be decreased, or &lt;code&gt;&lt;a href=&quot;functions/unpack&quot;&gt;unpack()&lt;/a&gt;&lt;/code&gt; may produce empty strings or zeros, or it may raise an exception. If the input string is longer than one described by the TEMPLATE, the remainder of that input string is ignored.</source>
          <target state="translated">더 많은 팩 코드가 있거나 필드 또는 그룹의 반복 횟수가 입력 문자열의 나머지가 허용하는 것보다 큰 경우 결과가 제대로 정의되지 않습니다. 반복 횟수가 줄어들거나 &lt;code&gt;&lt;a href=&quot;functions/unpack&quot;&gt;unpack()&lt;/a&gt;&lt;/code&gt; 이 비어있을 수 있습니다 문자열 또는 0이거나 예외가 발생할 수 있습니다. 입력 문자열이 TEMPLATE에서 설명 된 것보다 긴 경우 해당 입력 문자열의 나머지는 무시됩니다.</target>
        </trans-unit>
        <trans-unit id="b76f7ceb246d4c2d7fabcbfce30f4b0cda04fc65" translate="yes" xml:space="preserve">
          <source>If there are more pack codes or if the repeat count of a field or a group is larger than what the remainder of the input string allows, the result is not well defined: the repeat count may be decreased, or &lt;code&gt;&lt;a href=&quot;unpack&quot;&gt;unpack()&lt;/a&gt;&lt;/code&gt; may produce empty strings or zeros, or it may raise an exception. If the input string is longer than one described by the TEMPLATE, the remainder of that input string is ignored.</source>
          <target state="translated">더 많은 팩 코드가 있거나 필드 또는 그룹의 반복 횟수가 입력 문자열의 나머지가 허용하는 것보다 큰 경우 결과가 제대로 정의되지 않습니다. 반복 횟수가 줄어들거나 &lt;code&gt;&lt;a href=&quot;unpack&quot;&gt;unpack()&lt;/a&gt;&lt;/code&gt; 이 비어있을 수 있습니다 문자열 또는 0이거나 예외가 발생할 수 있습니다. 입력 문자열이 TEMPLATE에서 설명 된 것보다 긴 경우 해당 입력 문자열의 나머지는 무시됩니다.</target>
        </trans-unit>
        <trans-unit id="cf8ae3d8fd9e42e9aba417d2727a1cef25f1654d" translate="yes" xml:space="preserve">
          <source>If there are multiple threads running, &lt;code&gt;&lt;a href=&quot;close&quot;&gt;close&lt;/a&gt;&lt;/code&gt; on a filehandle from a piped open returns true without waiting for the child process to terminate, if the filehandle is still open in another thread.</source>
          <target state="translated">여러 스레드가 실행중인 경우 파일 핸들이 다른 스레드에서 여전히 열려 있으면 파이프 프로세스 열기에서 파일 핸들을 &lt;code&gt;&lt;a href=&quot;close&quot;&gt;close&lt;/a&gt;&lt;/code&gt; 하위 프로세스가 종료 될 때까지 기다리지 않고 true를 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="2d703ea78c6bd312ccc4d4536374984caf742a2c" translate="yes" xml:space="preserve">
          <source>If there are multiple threads running, &lt;code&gt;&lt;a href=&quot;functions/close&quot;&gt;close&lt;/a&gt;&lt;/code&gt; on a filehandle from a piped open returns true without waiting for the child process to terminate, if the filehandle is still open in another thread.</source>
          <target state="translated">여러 스레드가 실행중인 경우 파일 핸들이 다른 스레드에서 여전히 열려 있으면 파이프 프로세스 열기에서 파일 핸들을 &lt;code&gt;&lt;a href=&quot;functions/close&quot;&gt;close&lt;/a&gt;&lt;/code&gt; 하위 프로세스가 종료 될 때까지 기다리지 않고 true를 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="c3ca3b8e4b7d3fd6327a3431ba332cb4654544b7" translate="yes" xml:space="preserve">
          <source>If there are no case mappings for the &lt;a href=&quot;#code-point-argument&quot;&gt;code point argument&lt;/a&gt;, or if all three possible mappings (</source>
          <target state="translated">&lt;a href=&quot;#code-point-argument&quot;&gt;코드 포인트 인수에&lt;/a&gt; 대한 대소 문자 맵핑이 없거나 가능한 세 가지 맵핑 (</target>
        </trans-unit>
        <trans-unit id="4d288bab40c0346d55a3c0eb77940eab7a6641ad" translate="yes" xml:space="preserve">
          <source>If there are no shell metacharacters in the argument of &lt;code&gt;&lt;a href=&quot;functions/open&quot;&gt;open()&lt;/a&gt;&lt;/code&gt;, Perl runs the command directly, without using the shell, and can correctly report whether the command started.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/open&quot;&gt;open()&lt;/a&gt;&lt;/code&gt; 인수에 쉘 메타 문자가 없으면 Perl은 쉘을 사용하지 않고 명령을 직접 실행하며 명령이 시작되었는지 여부를 올바르게보고 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="83b3c9dc933e2482f8eba281e591135e3899389e" translate="yes" xml:space="preserve">
          <source>If there are no threads blocked in a &lt;code&gt;cond_wait&lt;/code&gt; on the variable, the signal is discarded.</source>
          <target state="translated">변수 의 &lt;code&gt;cond_wait&lt;/code&gt; 에 차단 된 스레드가 없으면 신호가 삭제됩니다.</target>
        </trans-unit>
        <trans-unit id="dcf5c5ee7e0424ea7ada5c7826f4b90fdb2a116c" translate="yes" xml:space="preserve">
          <source>If there are no threads blocked in a &lt;code&gt;cond_wait&lt;/code&gt; on the variable, the signal is discarded. By always locking before signaling, you can (with care), avoid signaling before another thread has entered cond_wait().</source>
          <target state="translated">변수 의 &lt;code&gt;cond_wait&lt;/code&gt; 에 차단 된 스레드가 없으면 신호가 삭제됩니다. 신호를 보내기 전에 항상 잠금을 설정하면 다른 스레드가 cond_wait ()에 들어가기 전에 신호를 피할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a5de19948908467a5a983001d47b7d9a0689b746" translate="yes" xml:space="preserve">
          <source>If there are no valid digits between the braces, the generated character is the NULL character (&lt;code&gt;\x{00}&lt;/code&gt; ). However, an explicit empty brace (&lt;code&gt;\x{}&lt;/code&gt; ) will not cause a warning (currently).</source>
          <target state="translated">중괄호 사이에 유효한 숫자가 없으면 생성 된 문자는 NULL 문자 ( &lt;code&gt;\x{00}&lt;/code&gt; )입니다. 그러나 명시적인 빈 괄호 ( &lt;code&gt;\x{}&lt;/code&gt; )는 경고를 발생시키지 않습니다 (현재).</target>
        </trans-unit>
        <trans-unit id="b342c6d59112da790e47e12118a22cde8dbcaf22" translate="yes" xml:space="preserve">
          <source>If there are only a few field hashes to declare, it is simplest to</source>
          <target state="translated">선언 할 필드 해시가 거의없는 경우 가장 간단합니다.</target>
        </trans-unit>
        <trans-unit id="ae8e9a2c571cd018342d9c2118caec048fd77da4" translate="yes" xml:space="preserve">
          <source>If there are only three arguments and the third argument is a hash reference, the keys of that hash can have values &lt;code&gt;dict&lt;/code&gt; , &lt;code&gt;fold&lt;/code&gt; , and &lt;code&gt;comp&lt;/code&gt; or &lt;code&gt;xfrm&lt;/code&gt; (see below), and their corresponding values will be used as the parameters.</source>
          <target state="translated">세 개의 인수 만 있고 세 번째 인수가 해시 참조 인 경우 해당 해시의 키는 &lt;code&gt;dict&lt;/code&gt; , &lt;code&gt;fold&lt;/code&gt; 및 &lt;code&gt;comp&lt;/code&gt; 또는 &lt;code&gt;xfrm&lt;/code&gt; 값을 가질 수 있으며 (아래 참조) 해당 값이 매개 변수로 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="1e86b013905dd12651149e8ec83c3ae6cf6c6b73" translate="yes" xml:space="preserve">
          <source>If there are two modules using &lt;code&gt;FindBin&lt;/code&gt; from different directories under the same interpreter, this won't work. Since &lt;code&gt;FindBin&lt;/code&gt; uses a &lt;code&gt;BEGIN&lt;/code&gt; block, it'll be executed only once, and only the first caller will get it right. This is a problem under mod_perl and other persistent Perl environments, where you shouldn't use this module. Which also means that you should avoid using &lt;code&gt;FindBin&lt;/code&gt; in modules that you plan to put on CPAN. To make sure that &lt;code&gt;FindBin&lt;/code&gt; will work is to call the &lt;code&gt;again&lt;/code&gt; function:</source>
          <target state="translated">동일한 인터프리터 아래의 다른 디렉토리에서 &lt;code&gt;FindBin&lt;/code&gt; 을 사용하는 두 개의 모듈이 있으면 작동하지 않습니다. &lt;code&gt;FindBin&lt;/code&gt; 은 &lt;code&gt;BEGIN&lt;/code&gt; 블록을 사용 하므로 한 번만 실행되며 첫 번째 발신자 만 올바르게 처리합니다. 이 모듈을 사용해서는 안되는 mod_perl 및 기타 영구 Perl 환경에서 발생하는 문제입니다. 또한 &lt;code&gt;FindBin&lt;/code&gt; 에 장착하려는 모듈에서 FindBin 을 사용하지 않아야합니다 . &lt;code&gt;FindBin&lt;/code&gt; 이 작동 하는지 확인하려면 &lt;code&gt;again&lt;/code&gt; 함수 를 호출하십시오 .</target>
        </trans-unit>
        <trans-unit id="fcc3c3e2760c5e396f33222005be848fc9fe18e0" translate="yes" xml:space="preserve">
          <source>If there is a &lt;code&gt;&lt;a href=&quot;functions/continue&quot;&gt;continue&lt;/a&gt;&lt;/code&gt; BLOCK, it is always executed just before the conditional is about to be evaluated again. Thus it can be used to increment a loop variable, even when the loop has been continued via the &lt;code&gt;&lt;a href=&quot;functions/next&quot;&gt;next&lt;/a&gt;&lt;/code&gt; statement.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/continue&quot;&gt;continue&lt;/a&gt;&lt;/code&gt; BLOCK 이 있으면 조건부 상태가 다시 평가되기 직전에 항상 실행됩니다. 따라서 루프가 &lt;code&gt;&lt;a href=&quot;functions/next&quot;&gt;next&lt;/a&gt;&lt;/code&gt; 명령문을 통해 계속 된 경우에도 루프 변수를 증가시키는 데 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="8b36be5061281671022cf399b379651681b1d4d0" translate="yes" xml:space="preserve">
          <source>If there is a case folding for that code point, a reference to a hash with the following fields is returned:</source>
          <target state="translated">해당 코드 포인트에 대해 접는 사례가있는 경우 다음 필드가있는 해시에 대한 참조가 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="6424bf8b1f44f30e366f5038ca9bafadec447990" translate="yes" xml:space="preserve">
          <source>If there is a read or write timeout &lt;code&gt;code()&lt;/code&gt; will return &quot;421&quot; (temporary connection failure) and &lt;code&gt;message()&lt;/code&gt; will return &quot;[$pkg] Timeout&quot; (where $pkg is the name of the class that subclassed &lt;code&gt;Net::Cmd&lt;/code&gt; ). The _set_status_timeout() method can be overridden to set a different message (by calling set_status()) or otherwise trap this error.</source>
          <target state="translated">읽기 또는 쓰기 시간 종료 &lt;code&gt;code()&lt;/code&gt; 가있는 경우 () 는 &quot;421&quot;(임시 연결 실패 &lt;code&gt;message()&lt;/code&gt; 을 리턴 하고 message () 는 &quot;[$ pkg] 시간 종료&quot;를 리턴합니다 (여기서 $ pkg는 &lt;code&gt;Net::Cmd&lt;/code&gt; 를 서브 클래 싱 한 클래스의 이름입니다) ). _set_status_timeout () 메소드를 재정 의하여 다른 메시지를 설정하거나 (set_status () 호출)이 오류를 잡을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="11aba41a92baa1006f7ccfb764892fd564d365da" translate="yes" xml:space="preserve">
          <source>If there is a syntax error or runtime error, or a &lt;code&gt;&lt;a href=&quot;die&quot;&gt;die&lt;/a&gt;&lt;/code&gt; statement is executed, &lt;code&gt;&lt;a href=&quot;eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt; returns &lt;code&gt;&lt;a href=&quot;undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; in scalar context or an empty list in list context, and &lt;code&gt;$@&lt;/code&gt; is set to the error message. (Prior to 5.16, a bug caused &lt;code&gt;&lt;a href=&quot;undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; to be returned in list context for syntax errors, but not for runtime errors.) If there was no error, &lt;code&gt;$@&lt;/code&gt; is set to the empty string. A control flow operator like &lt;code&gt;&lt;a href=&quot;last&quot;&gt;last&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;goto&quot;&gt;goto&lt;/a&gt;&lt;/code&gt; can bypass the setting of &lt;code&gt;$@&lt;/code&gt; . Beware that using &lt;code&gt;&lt;a href=&quot;eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt; neither silences Perl from printing warnings to STDERR, nor does it stuff the text of warning messages into &lt;code&gt;$@&lt;/code&gt; . To do either of those, you have to use the &lt;code&gt;$SIG{__WARN__}&lt;/code&gt; facility, or turn off warnings inside the BLOCK or EXPR using &lt;code&gt;&lt;a href=&quot;no&quot;&gt;no&lt;/a&gt; warnings 'all'&lt;/code&gt; . See &lt;a href=&quot;warn&quot;&gt;warn&lt;/a&gt;, &lt;a href=&quot;../perlvar&quot;&gt;perlvar&lt;/a&gt;, and &lt;a href=&quot;../warnings&quot;&gt;warnings&lt;/a&gt;.</source>
          <target state="translated">구문 오류 또는 런타임 오류가 있거나 &lt;code&gt;&lt;a href=&quot;die&quot;&gt;die&lt;/a&gt;&lt;/code&gt; 문이 실행되면 &lt;code&gt;&lt;a href=&quot;eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt; 은 스칼라 컨텍스트에서 &lt;code&gt;&lt;a href=&quot;undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; 를 반환 하거나 목록 컨텍스트에서 빈 목록을 반환 하고 &lt;code&gt;$@&lt;/code&gt; 는 오류 메시지로 설정됩니다. (5.16 이전에는 버그로 인해 구문 오류에 대해서는 목록 컨텍스트에서 &lt;code&gt;&lt;a href=&quot;undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; 가 반환되었지만 런타임 오류는 발생하지 않았습니다.) 오류가 없으면 &lt;code&gt;$@&lt;/code&gt; 가 빈 문자열로 설정됩니다. &lt;code&gt;&lt;a href=&quot;last&quot;&gt;last&lt;/a&gt;&lt;/code&gt; 또는 &lt;code&gt;&lt;a href=&quot;goto&quot;&gt;goto&lt;/a&gt;&lt;/code&gt; 와 같은 제어 흐름 연산자 는 &lt;code&gt;$@&lt;/code&gt; 설정을 무시할 수 있습니다 . &lt;code&gt;&lt;a href=&quot;eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt; 을 사용하면 Perl이 경고를 STDERR로 인쇄하지 못하게하거나 경고 메시지의 텍스트를 &lt;code&gt;$@&lt;/code&gt; 넣지 않습니다.. 이들 중 하나를 수행하려면 &lt;code&gt;$SIG{__WARN__}&lt;/code&gt; 기능을 사용하거나 &lt;code&gt;&lt;a href=&quot;no&quot;&gt;no&lt;/a&gt; warnings 'all'&lt;/code&gt; 사용 &lt;a href=&quot;no&quot;&gt;하지 않고&lt;/a&gt; BLOCK 또는 EXPR 내에서 경고를 해제 해야 합니다. &lt;a href=&quot;warn&quot;&gt;경고&lt;/a&gt; , &lt;a href=&quot;../perlvar&quot;&gt;perlvar&lt;/a&gt; 및 &lt;a href=&quot;../warnings&quot;&gt;경고를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="ebacccba519ce29c0edb6165a1d7c06041545422" translate="yes" xml:space="preserve">
          <source>If there is a syntax error or runtime error, or a &lt;code&gt;&lt;a href=&quot;functions/die&quot;&gt;die&lt;/a&gt;&lt;/code&gt; statement is executed, &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt; returns &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; in scalar context or an empty list in list context, and &lt;code&gt;$@&lt;/code&gt; is set to the error message. (Prior to 5.16, a bug caused &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; to be returned in list context for syntax errors, but not for runtime errors.) If there was no error, &lt;code&gt;$@&lt;/code&gt; is set to the empty string. A control flow operator like &lt;code&gt;&lt;a href=&quot;functions/last&quot;&gt;last&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;functions/goto&quot;&gt;goto&lt;/a&gt;&lt;/code&gt; can bypass the setting of &lt;code&gt;$@&lt;/code&gt; . Beware that using &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt; neither silences Perl from printing warnings to STDERR, nor does it stuff the text of warning messages into &lt;code&gt;$@&lt;/code&gt; . To do either of those, you have to use the &lt;code&gt;$SIG{__WARN__}&lt;/code&gt; facility, or turn off warnings inside the BLOCK or EXPR using &lt;code&gt;&lt;a href=&quot;functions/no&quot;&gt;no&lt;/a&gt; warnings 'all'&lt;/code&gt; . See &lt;a href=&quot;#warn&quot;&gt;warn&lt;/a&gt;, &lt;a href=&quot;perlvar&quot;&gt;perlvar&lt;/a&gt;, and &lt;a href=&quot;warnings&quot;&gt;warnings&lt;/a&gt;.</source>
          <target state="translated">구문 오류 또는 런타임 오류가 있거나 &lt;code&gt;&lt;a href=&quot;functions/die&quot;&gt;die&lt;/a&gt;&lt;/code&gt; 문이 실행되면 &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt; 은 스칼라 컨텍스트에서 &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; 를 반환 하거나 목록 컨텍스트에서 빈 목록을 반환 하고 &lt;code&gt;$@&lt;/code&gt; 는 오류 메시지로 설정됩니다. (5.16 이전에는 버그로 인해 구문 오류에 대해서는 목록 컨텍스트에서 &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; 가 반환되었지만 런타임 오류는 발생하지 않았습니다.) 오류가 없으면 &lt;code&gt;$@&lt;/code&gt; 가 빈 문자열로 설정됩니다. &lt;code&gt;&lt;a href=&quot;functions/last&quot;&gt;last&lt;/a&gt;&lt;/code&gt; 또는 &lt;code&gt;&lt;a href=&quot;functions/goto&quot;&gt;goto&lt;/a&gt;&lt;/code&gt; 와 같은 제어 흐름 연산자 는 &lt;code&gt;$@&lt;/code&gt; 설정을 무시할 수 있습니다 . &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt; 을 사용하면 Perl이 경고를 STDERR로 인쇄하지 못하게하거나 경고 메시지의 텍스트를 &lt;code&gt;$@&lt;/code&gt; 넣지 않습니다.. 이들 중 하나를 수행하려면 &lt;code&gt;$SIG{__WARN__}&lt;/code&gt; 기능을 사용하거나 &lt;code&gt;&lt;a href=&quot;functions/no&quot;&gt;no&lt;/a&gt; warnings 'all'&lt;/code&gt; 사용 &lt;a href=&quot;functions/no&quot;&gt;하지 않고&lt;/a&gt; BLOCK 또는 EXPR 내에서 경고를 해제 해야 합니다. &lt;a href=&quot;#warn&quot;&gt;경고&lt;/a&gt; , &lt;a href=&quot;perlvar&quot;&gt;perlvar&lt;/a&gt; 및 &lt;a href=&quot;warnings&quot;&gt;경고를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="5466934b0ce09952bbdf7a873d8e98baf5e63870" translate="yes" xml:space="preserve">
          <source>If there is an error then &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; will be returned.</source>
          <target state="translated">오류가 있으면 &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; 가 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="467d2ed550f37bc1b9fda912fd43e11ff12b4118" translate="yes" xml:space="preserve">
          <source>If there is any question about whether a given patch might merit inclusion in a maint release, then it almost certainly should not be included.</source>
          <target state="translated">주어진 패치가 maint 릴리스에 포함될 가치가 있는지에 대한 의문이 있다면, 거의 포함시키지 않아야합니다.</target>
        </trans-unit>
        <trans-unit id="0f8376c45472eeb9e97a43b3d977d663509a5686" translate="yes" xml:space="preserve">
          <source>If there is more than one argument in LIST, this calls execvp(3) with the arguments in LIST. If there is only one element in LIST, the argument is checked for shell metacharacters, and if there are any, the entire argument is passed to the system's command shell for parsing (this is &lt;code&gt;/bin/sh -c&lt;/code&gt; on Unix platforms, but varies on other platforms). If there are no shell metacharacters in the argument, it is split into words and passed directly to &lt;code&gt;execvp&lt;/code&gt; , which is more efficient. Examples:</source>
          <target state="translated">LIST에 둘 이상의 인수가 있으면 LIST의 인수와 함께 execvp (3)을 호출합니다. LIST에 하나의 요소 만있는 경우, 인수는 쉘 메타 문자를 검사하고, 존재하는 경우 전체 인수는 구문 분석을 위해 시스템의 명령 쉘로 전달됩니다 (이는 Unix 플랫폼에서 &lt;code&gt;/bin/sh -c&lt;/code&gt; 이지만 다양합니다) 다른 플랫폼에서). 인수에 쉘 메타 문자가 없으면 단어로 분리되어 &lt;code&gt;execvp&lt;/code&gt; 로 직접 전달되므로 보다 효율적입니다. 예 :</target>
        </trans-unit>
        <trans-unit id="2594b97a91aa3fa79863d35058be1a8172ac679a" translate="yes" xml:space="preserve">
          <source>If there is no</source>
          <target state="translated">없는 경우</target>
        </trans-unit>
        <trans-unit id="836d7eec1f71c6b6f4181b3811b03cbac0e80430" translate="yes" xml:space="preserve">
          <source>If there is no &lt;code&gt;\E&lt;/code&gt; , case is converted until the end of the string. The regexps &lt;code&gt;\L\u$word&lt;/code&gt; or &lt;code&gt;\u\L$word&lt;/code&gt; convert the first character of &lt;code&gt;$word&lt;/code&gt; to uppercase and the rest of the characters to lowercase.</source>
          <target state="translated">&lt;code&gt;\E&lt;/code&gt; 가 없으면 문자열이 끝날 때까지 대소 문자가 변환됩니다. regexps '에 &lt;code&gt;\L\u$word&lt;/code&gt; 또는 &lt;code&gt;\u\L$word&lt;/code&gt; 변환의 첫 번째 문자 &lt;code&gt;$word&lt;/code&gt; 대문자와 소문자로 문자의 나머지.</target>
        </trans-unit>
        <trans-unit id="c73d7b3af9d178254858949bc270c269c6e2e60d" translate="yes" xml:space="preserve">
          <source>If there is no INSTALL.SKIP file in the make directory then this value can be used to provide a default.</source>
          <target state="translated">make 디렉토리에 INSTALL.SKIP 파일이 없으면이 값을 사용하여 기본값을 제공 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="349639462c1781c6c7203933948097f1b032dbf1" translate="yes" xml:space="preserve">
          <source>If there is no case folding for the input code point, &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; is returned.</source>
          <target state="translated">입력 코드 포인트에 대소 문자가 접히지 않으면 &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; 가 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="20a8d9cc6cec6caebf969b32884584509dabbda2" translate="yes" xml:space="preserve">
          <source>If there is no corresponding capture group defined, then it is a fatal error. Recursing deeper than 50 times without consuming any input string will also result in a fatal error. The maximum depth is compiled into perl, so changing it requires a custom build.</source>
          <target state="translated">해당 캡처 그룹이 정의되어 있지 않으면 치명적인 오류입니다. 입력 문자열을 사용하지 않고 50 회 이상 반복하면 치명적인 오류가 발생합니다. 최대 깊이는 perl로 컴파일되므로이를 변경하려면 사용자 정의 빌드가 필요합니다.</target>
        </trans-unit>
        <trans-unit id="c5c7947682ddf8ce5897cbba5d096660017802ec" translate="yes" xml:space="preserve">
          <source>If there is no description, its the same as the parameter to WriteMakefile() documented in ExtUtils::MakeMaker.</source>
          <target state="translated">설명이 없으면 ExtUtils :: MakeMaker에 설명 된 WriteMakefile ()의 매개 변수와 동일합니다.</target>
        </trans-unit>
        <trans-unit id="9a08244ff3de5da70abd74d4f48bc9a98bd5fd63" translate="yes" xml:space="preserve">
          <source>If there is no error, then the method returns the value of the last expression evaluated, or a return statement may be used, just as with subroutines and &lt;b&gt;eval()&lt;/b&gt;. The context (list or scalar) is determined by the caller as usual.</source>
          <target state="translated">오류가 없으면 메소드는 마지막으로 평가 된 표현식의 값을 리턴하거나 서브 루틴 및 &lt;b&gt;eval ()에서&lt;/b&gt; 와 같이 리턴 명령문을 사용할 수 있습니다 . 컨텍스트 (목록 또는 스칼라)는 일반적인 방법으로 호출자가 결정합니다.</target>
        </trans-unit>
        <trans-unit id="9fcf9881e5055fcb38df136c867429f9722c1a7e" translate="yes" xml:space="preserve">
          <source>If there is no global precision or accuracy set, &lt;b&gt;and&lt;/b&gt; the operation in question was not called with a requested precision or accuracy, &lt;b&gt;and&lt;/b&gt; the input $x has no accuracy or precision set, then a fallback parameter will be used. For historical reasons, it is called &lt;code&gt;div_scale&lt;/code&gt; and can be accessed via:</source>
          <target state="translated">이 전역 정밀도 또는 정확성 세트 없으며, 경우 &lt;b&gt;및&lt;/b&gt; 해당 작업이 요청 된 정밀도 또는 정확도로 호출되지 않은, &lt;b&gt;그리고&lt;/b&gt; 입력 $ x가 더 정확성과 정밀도가 설정되지, 다음 대체 매개 변수가 사용됩니다. 역사적 이유로 &lt;code&gt;div_scale&lt;/code&gt; 이라고 하며 다음을 통해 액세스 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="bbd1fd130f18a572d29a93b5834a0fdb0347ebb7" translate="yes" xml:space="preserve">
          <source>If there is no interactivity then you may still want to look at using something like &lt;a href=&quot;http://search.cpan.org/perldoc/https:#%2fmetacpan.org%2fmodule%2fTemplate&quot;&gt;Template Toolkit&lt;/a&gt; or &lt;a href=&quot;http://search.cpan.org/perldoc/Plack::Middleware::TemplateToolkit&quot;&gt;Plack::Middleware::TemplateToolkit&lt;/a&gt; so maintenance of your HTML files (and other assets) is easier.</source>
          <target state="translated">상호 작용이없는 경우에도 여전히 &lt;a href=&quot;http://search.cpan.org/perldoc/https:#%2fmetacpan.org%2fmodule%2fTemplate&quot;&gt;템플릿 툴킷&lt;/a&gt; 또는 &lt;a href=&quot;http://search.cpan.org/perldoc/Plack::Middleware::TemplateToolkit&quot;&gt;Plack :: Middleware :: TemplateToolkit&lt;/a&gt; 과 같은 것을 사용 하여 HTML 파일 (및 기타 자산)을보다 쉽게 ​​관리 할 수 ​​있습니다.</target>
        </trans-unit>
        <trans-unit id="8dd8956e9b63cae584008cf6c1bbe7cd26c8c5c5" translate="yes" xml:space="preserve">
          <source>If there is no matching entry found and there is no default defined, or no .netrc file is found, then &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; is returned.</source>
          <target state="translated">일치하는 항목이없고 기본값이 정의되어 있지 않거나 .netrc 파일이 없으면 &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; 가 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="40165726268e187e7ad5a226c93cb70fb5e7ae2c" translate="yes" xml:space="preserve">
          <source>If there is only one argument and it is a reference to an array then the array is assumed to contain a list of key-value pairs specifying the options. In this case the option &quot;from_to&quot; is mandatory. This style means that you do not have to supply a cryptic list of arguments and can use a self documenting argument list that is easier to understand.</source>
          <target state="translated">인수가 하나만 있고 배열에 대한 참조 인 경우 배열은 옵션을 지정하는 키-값 쌍의 목록을 포함하는 것으로 가정합니다. 이 경우 &quot;from_to&quot;옵션은 필수입니다. 이 스타일은 암호 인수 목록을 제공 할 필요가없고 이해하기 쉬운 자체 문서화 인수 목록을 사용할 수 있음을 의미합니다.</target>
        </trans-unit>
        <trans-unit id="663e6f7ad7626839945e055f61dd00fa139292d7" translate="yes" xml:space="preserve">
          <source>If there was an error authenticating the user then</source>
          <target state="translated">사용자 인증 오류가 발생한 경우</target>
        </trans-unit>
        <trans-unit id="c4805e4afe7a0ccfe45caa54514a077972082082" translate="yes" xml:space="preserve">
          <source>If there's already an entry in &lt;code&gt;%table&lt;/code&gt; for the current &lt;code&gt;$country&lt;/code&gt; , then nothing is different. Line 6 will locate the value in &lt;code&gt;$table{$country}&lt;/code&gt; , which is a reference to an array, and push &lt;code&gt;$city&lt;/code&gt; into the array. But what does it do when &lt;code&gt;$country&lt;/code&gt; holds a key, say &lt;code&gt;Greece&lt;/code&gt; , that is not yet in &lt;code&gt;%table&lt;/code&gt; ?</source>
          <target state="translated">현재 &lt;code&gt;$country&lt;/code&gt; 대한 &lt;code&gt;%table&lt;/code&gt; 에 이미 항목이 있으면 아무것도 다릅니다. 6 행 은 배열에 대한 참조 인 &lt;code&gt;$table{$country}&lt;/code&gt; 의 값을 찾아 &lt;code&gt;$city&lt;/code&gt; 를 배열로 푸시 합니다. 그러나이 때 무엇을 않는 &lt;code&gt;$country&lt;/code&gt; 말할 키를 보유하고 &lt;code&gt;Greece&lt;/code&gt; 에 아직, &lt;code&gt;%table&lt;/code&gt; ?</target>
        </trans-unit>
        <trans-unit id="b79b95fc8b6f0bdad9a42663607fbb6bbfce24c2" translate="yes" xml:space="preserve">
          <source>If there's no &lt;code&gt;\w&lt;/code&gt; in &lt;code&gt;s1&lt;/code&gt; nor in &lt;code&gt;s2&lt;/code&gt; , why does their concatenation have one?</source>
          <target state="translated">&lt;code&gt;s1&lt;/code&gt; 또는 &lt;code&gt;s2&lt;/code&gt; 에 &lt;code&gt;\w&lt;/code&gt; 가 없으면 왜 연결에 하나가 있습니까?</target>
        </trans-unit>
        <trans-unit id="4d867e0a4fd4a8ea827c16a08b87197c9c461d55" translate="yes" xml:space="preserve">
          <source>If these dependent libraries are not listed at shared library creation time, you will get fatal &quot;Unresolved symbol&quot; errors at run time when the library is loaded.</source>
          <target state="translated">이러한 종속 라이브러리가 공유 라이브러리 작성 시간에 나열되지 않으면 라이브러리가로드 될 때 런타임시 치명적인 &quot;해결되지 않은 기호&quot;오류가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="66c4d2d6f3874b5b92940f178682f9bbdd8c1db5" translate="yes" xml:space="preserve">
          <source>If these operators are not explicitly overloaded then they work in the normal way, yielding the underlying scalar, array, or whatever stores the object data (or the appropriate error message if the dereference operator doesn't match it). Defining a catch-all &lt;code&gt;'nomethod'&lt;/code&gt; (see &lt;a href=&quot;#nomethod&quot;&gt;below&lt;/a&gt;) makes no difference to this as the catch-all function will not be called to implement a missing dereference operator.</source>
          <target state="translated">이러한 연산자가 명시 적으로 오버로드되지 않으면 정상적인 방식으로 작동하여 기본 스칼라, 배열 또는 객체 데이터를 저장하는 모든 항목 (역 참조 연산자가 일치하지 않는 경우 적절한 오류 메시지)을 생성합니다. catch-all &lt;code&gt;'nomethod'&lt;/code&gt; ( &lt;a href=&quot;#nomethod&quot;&gt;아래 참조&lt;/a&gt; )를 정의하면 누락 된 역 참조 연산자를 구현하기 위해 catch-all 함수가 호출되지 않으므로 이에 차이가 없습니다.</target>
        </trans-unit>
        <trans-unit id="e7e81ed1aafee87e39f3bf4df7400134171b1b47" translate="yes" xml:space="preserve">
          <source>If these were ordinary paragraphs, the Pod parser would try to expand the &quot;E&amp;lt;/em&amp;gt;&quot; (in the first paragraph) as a formatting code, just like &quot;E&amp;lt;lt&amp;gt;&quot; or &quot;E&amp;lt;eacute&amp;gt;&quot;. But since this is in a &quot;=begin</source>
          <target state="translated">이것들이 일반적인 문단이라면 포드 파서는 &quot;E &amp;lt;em&amp;gt;&quot;또는 &quot;E &amp;lt;eacute&amp;gt;&quot;와 같이 &quot;E &amp;lt;/ em&amp;gt;&quot;(첫 번째 문단)를 서식 코드로 확장하려고 시도합니다. 그러나 이것은 &quot;= 시작하기 때문에</target>
        </trans-unit>
        <trans-unit id="4135dfc8a9407c20cefc1359ee43028a8d9e9a77" translate="yes" xml:space="preserve">
          <source>If they are not composable, it returns &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">구성 할 수없는 경우 &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; 를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="7928853cb29cf0ed7b6549f627a68e66710a9993" translate="yes" xml:space="preserve">
          <source>If they wanted to clobber something, they might say:</source>
          <target state="translated">그들이 무언가를 방해하고 싶다면 다음과 같이 말할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="005637a170229ceb4ce45f18dce99b88396f9f92" translate="yes" xml:space="preserve">
          <source>If things aren't broken, upgrading perl may break them (or at least issue new warnings).</source>
          <target state="translated">문제가 해결되지 않으면 perl을 업그레이드하면 문제가 발생하거나 최소한 새로운 경고가 표시 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="af3184843a959ec8cbcadf6df48b4b495b6b3f78" translate="yes" xml:space="preserve">
          <source>If this behaviour is not desirable, the &lt;code&gt;error&lt;/code&gt; attribute may be used to hold a reference to a variable, which will be used to store the diagnostics. The variable is made a reference to an array of hash references. Each hash contain a single key/value pair where the key is the name of the file, and the value is the error message (including the contents of &lt;code&gt;$!&lt;/code&gt; when appropriate). If a general error is encountered the diagnostic key will be empty.</source>
          <target state="translated">이 동작이 바람직하지 않은 경우 &lt;code&gt;error&lt;/code&gt; 속성을 사용하여 변수에 대한 참조를 보유 할 수 있으며 이는 진단을 저장하는 데 사용됩니다. 변수는 해시 참조 배열을 참조합니다. 각 해시는 단일 키 / 값 쌍을 포함합니다. 여기서 키는 파일 이름이고 값은 오류 메시지입니다 ( 적절한 경우 &lt;code&gt;$!&lt;/code&gt; 의 내용 포함 ). 일반적인 오류가 발생하면 진단 키가 비어 있습니다.</target>
        </trans-unit>
        <trans-unit id="cfffc413c869bcf00848584ef88629d0cba8d4b7" translate="yes" xml:space="preserve">
          <source>If this command lists any paths that don't exist on your system, then you may need to move the appropriate libraries to these locations, or create symbolic links, aliases, or shortcuts appropriately. &lt;code&gt;@INC&lt;/code&gt; is also printed as part of the output of</source>
          <target state="translated">이 명령이 시스템에 존재하지 않는 경로를 나열하는 경우 적절한 라이브러리를이 위치로 이동하거나 기호 링크, 별명 또는 단축키를 적절하게 작성해야합니다. &lt;code&gt;@INC&lt;/code&gt; 는 출력의 일부로 인쇄됩니다.</target>
        </trans-unit>
        <trans-unit id="4975023e8ced451b521e66f7c64344d22c9935aa" translate="yes" xml:space="preserve">
          <source>If this directory is exactly the same as the prefix which was compiled into</source>
          <target state="translated">이 디렉토리가 컴파일 된 접두사와 정확히 동일한 경우</target>
        </trans-unit>
        <trans-unit id="285c8028480f1bd9da414482302791b2b2e5917d" translate="yes" xml:space="preserve">
          <source>If this displays any &lt;code&gt;D&lt;/code&gt; or &lt;code&gt;d&lt;/code&gt; symbols (or possibly &lt;code&gt;C&lt;/code&gt; or &lt;code&gt;c&lt;/code&gt; ), you have non-const data. The symbols the &lt;code&gt;&lt;a href=&quot;functions/grep&quot;&gt;grep&lt;/a&gt;&lt;/code&gt; removed are as follows: &lt;code&gt;Tt&lt;/code&gt; are</source>
          <target state="translated">이것이 &lt;code&gt;D&lt;/code&gt; 또는 &lt;code&gt;d&lt;/code&gt; 기호 (또는 가능하면 &lt;code&gt;C&lt;/code&gt; 또는 &lt;code&gt;c&lt;/code&gt; )를 표시하면 비 정확한 데이터가있는 것입니다. 기호 &lt;code&gt;&lt;a href=&quot;functions/grep&quot;&gt;grep&lt;/a&gt;&lt;/code&gt; 다음과 같이 제거는 다음과 같습니다 &lt;code&gt;Tt&lt;/code&gt; 있습니다</target>
        </trans-unit>
        <trans-unit id="4abdac7aa391382bc2754c2374cb867d27e05580" translate="yes" xml:space="preserve">
          <source>If this environment variable is set to a true value, all of the functions defined by this module (color(), colored(), and all of the constants not previously used in the program) will not output any escape sequences and instead will just return the empty string or pass through the original text as appropriate. This is intended to support easy use of scripts using this module on platforms that don't support ANSI escape sequences.</source>
          <target state="translated">이 환경 변수가 true 값으로 설정되면이 모듈에 의해 정의 된 모든 함수 (color (), colored () 및 프로그램에서 이전에 사용되지 않은 모든 상수)가 이스케이프 시퀀스를 출력하지 않고 대신 빈 문자열을 반환하거나 적절하게 원본 텍스트를 전달하십시오. 이는 ANSI 이스케이프 시퀀스를 지원하지 않는 플랫폼에서이 모듈을 사용하여 스크립트를 쉽게 사용할 수 있도록하기위한 것입니다.</target>
        </trans-unit>
        <trans-unit id="876cbaf8d98a55944949f12e34d25c434a20bad7" translate="yes" xml:space="preserve">
          <source>If this environment variable is true then normal install processes will always overwrite older identical files during the install process.</source>
          <target state="translated">이 환경 변수가 true이면 일반 설치 프로세스는 설치 프로세스 중에 항상 동일한 동일한 파일을 겹쳐 씁니다.</target>
        </trans-unit>
        <trans-unit id="07fe5d03fc19f605909f122565e563658cd995e6" translate="yes" xml:space="preserve">
          <source>If this field is zero then &lt;code&gt;PerlIO_pushed&lt;/code&gt; does not malloc anything and assumes layer's Pushed function will do any required layer stack manipulation - used to avoid malloc/free overhead for dummy layers. If the field is non-zero it must be at least the size of &lt;code&gt;PerlIOl&lt;/code&gt; , &lt;code&gt;PerlIO_pushed&lt;/code&gt; will allocate memory for the layer's data structures and link new layer onto the stream's stack. (If the layer's Pushed method returns an error indication the layer is popped again.)</source>
          <target state="translated">이 필드가 0이면 &lt;code&gt;PerlIO_pushed&lt;/code&gt; 는 아무 것도 말코 하지 않으며 레이어의 푸시 기능은 필요한 레이어 스택 조작을 수행한다고 가정합니다. 더미 레이어에 대한 말코 / 무료 오버 헤드를 피하는 데 사용됩니다. 필드가 0이 아닌 경우, 최소한 &lt;code&gt;PerlIOl&lt;/code&gt; 크기 여야합니다 . &lt;code&gt;PerlIO_pushed&lt;/code&gt; 는 계층의 데이터 구조에 메모리를 할당하고 새 계층을 스트림 스택에 링크합니다. 레이어의 Pushed 메서드가 오류 표시를 반환하면 레이어가 다시 나타납니다.</target>
        </trans-unit>
        <trans-unit id="6eff879286b0f884c3e6b0dc473e05a91d80d4a8" translate="yes" xml:space="preserve">
          <source>If this function is being sourced in from a separate file via &lt;code&gt;&lt;a href=&quot;functions/require&quot;&gt;require&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt;&lt;/code&gt;, then this is probably just fine. If it's all in the main program, you'll need to arrange for the &lt;code&gt;&lt;a href=&quot;functions/my&quot;&gt;my&lt;/a&gt;&lt;/code&gt; to be executed early, either by putting the whole block above your main program, or more likely, placing merely a &lt;code&gt;BEGIN&lt;/code&gt; code block around it to make sure it gets executed before your program starts to run:</source>
          <target state="translated">이 함수가 &lt;code&gt;&lt;a href=&quot;functions/require&quot;&gt;require&lt;/a&gt;&lt;/code&gt; 또는 &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt;&lt;/code&gt; 를 통해 별도의 파일에서 제공되는 경우에는 문제가되지 않습니다 . 메인 프로그램에 모두 포함되어 있다면 메인 블록 위에 전체 블록을 배치하거나 &lt;code&gt;BEGIN&lt;/code&gt; 코드 블록 만 배치 하여 &lt;code&gt;&lt;a href=&quot;functions/my&quot;&gt;my&lt;/a&gt;&lt;/code&gt; 을 조기에 실행할 수 있도록 준비해야합니다. 프로그램이 실행되기 전에 실행됩니다.</target>
        </trans-unit>
        <trans-unit id="e5121e7b7256f6d0ab378dc9bff9a8c6dad43577" translate="yes" xml:space="preserve">
          <source>If this happens to you, there's not much you can do except switch to use a different locale or use &lt;a href=&quot;encode&quot;&gt;Encode&lt;/a&gt; to translate from the locale into UTF-8; if that's impracticable, you have been warned that some things may break.</source>
          <target state="translated">이런 일이 발생하면 다른 로케일을 사용하거나 로케일을 UTF-8로 변환 하기 위해 &lt;a href=&quot;encode&quot;&gt;Encode&lt;/a&gt; 를 사용하는 스위치를 제외하고는 할 수있는 일이 많지 않습니다 . 그것이 불가능한 경우, 당신은 어떤 것들이 깨질 수 있다는 경고를 받았습니다.</target>
        </trans-unit>
        <trans-unit id="faa64c33180aaefa8582782daf214d7a2f4780a7" translate="yes" xml:space="preserve">
          <source>If this interior sequence is nested inside of another interior sequence, then the outer/parent sequence that contains it is returned. Otherwise &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; is returned.</source>
          <target state="translated">이 내부 시퀀스가 ​​다른 내부 시퀀스 안에 중첩 된 경우이 시퀀스가 ​​포함 된 외부 / 부모 시퀀스가 ​​반환됩니다. 그렇지 않으면 &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; 가 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="bf7d995797b0338af1d03b9d03a8511323aeb269" translate="yes" xml:space="preserve">
          <source>If this is a TODO test and an 'ok' line, this method returns true. Otherwise, it will always return false (regardless of passing status on non-todo tests).</source>
          <target state="translated">이것이 TODO 테스트이고 'ok'라인 인 경우이 메소드는 true를 리턴합니다. 그렇지 않으면, 할 일이 아닌 테스트에서 상태를 전달하지 않더라도 항상 false를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="f7666722db0ac2cfa26e5cabc574e02e68556877" translate="yes" xml:space="preserve">
          <source>If this is being called as &lt;code&gt;re::regname&lt;/code&gt; , &lt;code&gt;re::regnames&lt;/code&gt; or &lt;code&gt;re::regnames_count&lt;/code&gt; , if any. The first two will be combined with &lt;code&gt;RXapif_ONE&lt;/code&gt; or &lt;code&gt;RXapif_ALL&lt;/code&gt; .</source>
          <target state="translated">이것이 &lt;code&gt;re::regname&lt;/code&gt; 으로 호출 되면 &lt;code&gt;re::regnames&lt;/code&gt; 또는 &lt;code&gt;re::regnames_count&lt;/code&gt; (있는 경우). 처음 두 개는 &lt;code&gt;RXapif_ONE&lt;/code&gt; 또는 &lt;code&gt;RXapif_ALL&lt;/code&gt; 과 결합됩니다 .</target>
        </trans-unit>
        <trans-unit id="9edbce2664bb4f91955d900ea95b27deaa6b5a4b" translate="yes" xml:space="preserve">
          <source>If this is in &lt;code&gt;rx-&amp;gt;extflags&lt;/code&gt; it will be passed to &lt;code&gt;Perl_fbm_instr&lt;/code&gt; by &lt;code&gt;pp_split&lt;/code&gt; which will treat the subject string as a multi-line string.</source>
          <target state="translated">이것이 &lt;code&gt;rx-&amp;gt;extflags&lt;/code&gt; 에 있으면 &lt;code&gt;Perl_fbm_instr&lt;/code&gt; 의해 &lt;code&gt;pp_split&lt;/code&gt; 전달되어 제목 문자열을 여러 줄 문자열로 취급합니다.</target>
        </trans-unit>
        <trans-unit id="3e0c042153cf9f6ff54247584b15672ab611a4af" translate="yes" xml:space="preserve">
          <source>If this is negative, and amounts to &lt;code&gt;HEf_SVKEY&lt;/code&gt; , it indicates the entry holds an &lt;code&gt;SV*&lt;/code&gt; key. Otherwise, holds the actual length of the key. Can be assigned to. The &lt;code&gt;HePV()&lt;/code&gt; macro is usually preferable for finding key lengths.</source>
          <target state="translated">음수이고 &lt;code&gt;HEf_SVKEY&lt;/code&gt; 에 해당하면 항목에 &lt;code&gt;SV*&lt;/code&gt; 키 가 있음을 나타냅니다 . 그렇지 않으면 실제 키 길이를 유지합니다. 할당 할 수 있습니다. &lt;code&gt;HePV()&lt;/code&gt; 매크로 키 길이를 찾는 일반적으로 바람직하다.</target>
        </trans-unit>
        <trans-unit id="ddda819aeefa94d361f2fc0677ccc065e6c33f4f" translate="yes" xml:space="preserve">
          <source>If this is starting to sound scarier than it's worth, relax. Perl has some features to help you avoid its most common pitfalls. The best way to avoid getting confused is to start every program like this:</source>
          <target state="translated">이것이 가치보다 무섭게 들리기 시작하면 긴장을 푸십시오. Perl에는 가장 일반적인 함정을 피하는 데 도움이되는 몇 가지 기능이 있습니다. 혼동을 피하는 가장 좋은 방법은 다음과 같이 모든 프로그램을 시작하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="c2cd7396387cdb373b2dd32a6d21ffa39a9fbdd0" translate="yes" xml:space="preserve">
          <source>If this is true, none of that will be done.</source>
          <target state="translated">이것이 사실이라면, 그 중 어느 것도 수행되지 않을 것입니다.</target>
        </trans-unit>
        <trans-unit id="998c59b2484753d1482d0ff9ba7497a84e80fcd4" translate="yes" xml:space="preserve">
          <source>If this is what you intended then you can silence the warning by using &lt;code&gt;&lt;a href=&quot;functions/m&quot;&gt;m/${\}/&lt;/a&gt;&lt;/code&gt; (for example: &lt;code&gt;&lt;a href=&quot;functions/m&quot;&gt;m/foo${\}s+bar/&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="translated">이것이 의도 한 것이라면 &lt;code&gt;&lt;a href=&quot;functions/m&quot;&gt;m/${\}/&lt;/a&gt;&lt;/code&gt; 를 사용하여 경고를 끄십시오 (예 : &lt;code&gt;&lt;a href=&quot;functions/m&quot;&gt;m/foo${\}s+bar/&lt;/a&gt;&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="b2f4b7328771b0d9e19ff0a7ce5f9c13e4b36300" translate="yes" xml:space="preserve">
          <source>If this is your first use of Sys::Syslog, you must read the doc.</source>
          <target state="translated">이것이 Sys :: Syslog를 처음 사용하는 경우 문서를 읽어야합니다.</target>
        </trans-unit>
        <trans-unit id="51861420a23f19227e776c6bc3a38fdcea309df1" translate="yes" xml:space="preserve">
          <source>If this option is not present, the value stored in XFL field will be determined by the setting of the &lt;code&gt;Level&lt;/code&gt; option.</source>
          <target state="translated">이 옵션이 없으면 XFL 필드에 저장된 값은 &lt;code&gt;Level&lt;/code&gt; 옵션 의 설정에 의해 결정됩니다 .</target>
        </trans-unit>
        <trans-unit id="415323d14a6e182890345d78f7ae3f3149cdff1f" translate="yes" xml:space="preserve">
          <source>If this option is set and the input file/buffer is not compressed data, the module will allow reading of it anyway.</source>
          <target state="translated">이 옵션이 설정되고 입력 파일 / 버퍼가 압축 된 데이터가 아닌 경우 모듈은 어쨌든 읽을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="805aae725ba9def01f764562edc887adcbc46d85" translate="yes" xml:space="preserve">
          <source>If this option is set, Pod::Man will instead output UTF-8. If your *roff implementation can handle it, this is the best output format to use and avoids corruption of documents containing non-ASCII characters. However, be warned that *roff source with literal UTF-8 characters is not supported by many implementations and may even result in segfaults and other bad behavior.</source>
          <target state="translated">이 옵션을 설정하면 Pod :: Man이 대신 UTF-8을 출력합니다. * roff 구현이이를 처리 할 수있는 경우 이것이 사용하기에 가장 적합한 출력 형식이며 ASCII가 아닌 문자가 포함 된 문서의 손상을 피합니다. 그러나 리터럴 UTF-8 문자가있는 * roff 소스는 많은 구현에서 지원되지 않으며 segfaults 및 기타 나쁜 동작을 초래할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="9276827e0a43ce0cd98e803156d215d94a1cfced" translate="yes" xml:space="preserve">
          <source>If this paragraph is a command paragraph, then this method will return the name of the command (</source>
          <target state="translated">이 단락이 명령 단락이면이 메소드는 명령의 이름을 리턴합니다 (</target>
        </trans-unit>
        <trans-unit id="bcc44b3b4b66c03b7a2464f3e737f50efd9dbf21" translate="yes" xml:space="preserve">
          <source>If this paragraph is a command paragraph, then this method will return the prefix used to denote the command (which should be the string &quot;=&quot; or &quot;==&quot;).</source>
          <target state="translated">이 단락이 명령 단락이면이 메서드는 명령을 나타내는 데 사용되는 접두사 (문자열 &quot;=&quot;또는 &quot;==&quot;여야 함)를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="97d5af9792754821d43f791eb7a3e99d0e1078a4" translate="yes" xml:space="preserve">
          <source>If this paragraph is a command paragraph, then this method will return the text used to separate the command name from the rest of the paragraph (if any).</source>
          <target state="translated">이 단락이 명령 단락이면이 메소드는 명령 이름을 나머지 단락과 분리하는 데 사용되는 텍스트를 반환합니다 (있는 경우).</target>
        </trans-unit>
        <trans-unit id="f1f4b76081f3628eb70be0fbee8dbf0d6e9f3ca4" translate="yes" xml:space="preserve">
          <source>If this parameter is not used, certain error conditions may raise a fatal error that will cause the program will halt, unless trapped in an &lt;code&gt;&lt;a href=&quot;../functions/eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt; block.</source>
          <target state="translated">이 매개 변수를 사용하지 않으면 특정 오류 조건으로 인해 &lt;code&gt;&lt;a href=&quot;../functions/eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt; 블록에 갇히지 않으면 치명적인 오류가 발생하여 프로그램이 중지 될 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="0d2fb08e29fba6225fdf1f445f37f2366e459721" translate="yes" xml:space="preserve">
          <source>If this regexp matches, &lt;code&gt;$1&lt;/code&gt; contains a string starting with &lt;code&gt;'ab'&lt;/code&gt; , &lt;code&gt;$2&lt;/code&gt; is either set to &lt;code&gt;'cd'&lt;/code&gt; or &lt;code&gt;'ef'&lt;/code&gt; , &lt;code&gt;$3&lt;/code&gt; equals either &lt;code&gt;'gi'&lt;/code&gt; or &lt;code&gt;'j'&lt;/code&gt; , and &lt;code&gt;$4&lt;/code&gt; is either set to &lt;code&gt;'gi'&lt;/code&gt; , just like &lt;code&gt;$3&lt;/code&gt; , or it remains undefined.</source>
          <target state="translated">이 정규 표현식에 일치하는 경우, &lt;code&gt;$1&lt;/code&gt; 로 시작하는 문자열이 들어 &lt;code&gt;'ab'&lt;/code&gt; , &lt;code&gt;$2&lt;/code&gt; 에 두 세트입니다 &lt;code&gt;'cd'&lt;/code&gt; 또는 &lt;code&gt;'ef'&lt;/code&gt; , &lt;code&gt;$3&lt;/code&gt; 등호 중 &lt;code&gt;'gi'&lt;/code&gt; 또는 &lt;code&gt;'j'&lt;/code&gt; , 및 &lt;code&gt;$4&lt;/code&gt; 에 두 세트입니다 &lt;code&gt;'gi'&lt;/code&gt; 단지를, 같은 &lt;code&gt;$3&lt;/code&gt; , 또는 그것은 정의되지 않은 상태로 유지됩니다.</target>
        </trans-unit>
        <trans-unit id="f4f92dc123bfc535dc7925652fedf35a2b5f0876" translate="yes" xml:space="preserve">
          <source>If this seems like a lot, then feel free to inherit from merely the standard Tie::StdHash module for most of your methods, redefining only the interesting ones. See &lt;a href=&quot;tie/hash&quot;&gt;Tie::Hash&lt;/a&gt; for details.</source>
          <target state="translated">이것이 많은 것처럼 보이면 대부분의 메소드에 대해 표준 Tie :: StdHash 모듈을 상속하고 흥미로운 메소드 만 재정의하십시오. 자세한 내용은 &lt;a href=&quot;tie/hash&quot;&gt;타이 :: 해시&lt;/a&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="d3f60efe640d39524c6e11c22deb74b1e7bd6e48" translate="yes" xml:space="preserve">
          <source>If this still doesn't work, look into the &lt;code&gt;clearerr&lt;/code&gt; method from &lt;a href=&quot;io/handle&quot;&gt;IO::Handle&lt;/a&gt;, which resets the error and end-of-file states on the handle.</source>
          <target state="translated">그래도 문제가 해결되지 않으면 &lt;a href=&quot;io/handle&quot;&gt;IO :: Handle&lt;/a&gt; 에서 &lt;code&gt;clearerr&lt;/code&gt; 메소드를 살펴보십시오 . 그러면 핸들 의 오류 및 파일 끝 상태가 재설정됩니다.</target>
        </trans-unit>
        <trans-unit id="5f660c829995c0ccf8574939955dcb34cbb1fbc2" translate="yes" xml:space="preserve">
          <source>If this template key is true, enforces that if this key is provided by user input, its value is &lt;code&gt;&lt;a href=&quot;../functions/defined&quot;&gt;defined&lt;/a&gt;&lt;/code&gt;. This just means that the user is not allowed to pass &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; as a value for this key and is equivalent to: allow =&amp;gt; sub { defined $_[0] &amp;amp;&amp;amp; OTHER TESTS }</source>
          <target state="translated">이 템플릿 키가 true이면이 키가 사용자 입력에 의해 제공되면 해당 값이 &lt;code&gt;&lt;a href=&quot;../functions/defined&quot;&gt;defined&lt;/a&gt;&lt;/code&gt; . 이는 사용자 가이 키의 값으로 &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; 를 전달할 수 없으며 다음과 같습니다. allow =&amp;gt; sub {defined $ _ [0] &amp;amp;&amp;amp; OTHER TESTS}</target>
        </trans-unit>
        <trans-unit id="76bbabb48932b2f041b390c777de07be84c85182" translate="yes" xml:space="preserve">
          <source>If this value is defined but false then such an operation has ocurred, but should not impact later operations.</source>
          <target state="translated">이 값이 정의되었지만 false 인 경우 해당 작업이 발생했지만 이후 작업에는 영향을 미치지 않습니다.</target>
        </trans-unit>
        <trans-unit id="cc6a20a1fa0fe02624d3822b74f6ca89396c5ee4" translate="yes" xml:space="preserve">
          <source>If this variable is set to a true value, then &lt;code&gt;&lt;a href=&quot;functions/stat&quot;&gt;stat()&lt;/a&gt;&lt;/code&gt; on Windows will not try to open the file. This means that the link count cannot be determined and file attributes may be out of date if additional hardlinks to the file exist. On the other hand, not opening the file is considerably faster, especially for files on network drives.</source>
          <target state="translated">이 변수를 true로 설정하면 Windows의 &lt;code&gt;&lt;a href=&quot;functions/stat&quot;&gt;stat()&lt;/a&gt;&lt;/code&gt; 가 파일을 열려고하지 않습니다. 이는 파일에 대한 추가 하드 링크가 존재하는 경우 링크 수를 결정할 수없고 파일 속성이 오래되었을 수 있음을 의미합니다. 반면에 파일을 열지 않으면 특히 네트워크 드라이브의 파일이 훨씬 빠릅니다.</target>
        </trans-unit>
        <trans-unit id="65e9d7214894094637d48b5893992a1d4deebf1e" translate="yes" xml:space="preserve">
          <source>If this variable is true then such an operation has occurred and anything depending on this module cannot proceed until a reboot has occurred.</source>
          <target state="translated">이 변수가 true이면 해당 작업이 발생한 것이므로이 모듈에 따라 재부팅이 발생할 때까지 진행할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="41c3e520fc9953b8c23b0cb154effeffba4245f7" translate="yes" xml:space="preserve">
          <source>If three (or more) arguments are specified, the open mode (including optional encoding) in the second argument are distinct from the filename in the third. If MODE is &lt;code&gt;&amp;lt;&lt;/code&gt; or nothing, the file is opened for input. If MODE is &lt;code&gt;&amp;gt;&lt;/code&gt;, the file is opened for output, with existing files first being truncated (&quot;clobbered&quot;) and nonexisting files newly created. If MODE is &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt; , the file is opened for appending, again being created if necessary.</source>
          <target state="translated">세 개 이상의 인수가 지정된 경우 두 번째 인수의 열린 모드 (선택적 인코딩 포함)는 세 번째의 파일 이름과 다릅니다. MODE가 &lt;code&gt;&amp;lt;&lt;/code&gt; 이거나 아니면 파일이 입력을 위해 열립니다. MODE가 &lt;code&gt;&amp;gt;&lt;/code&gt; 이면 기존 파일이 먼저 잘리고 ( &quot;clobbered&quot;) 존재하지 않는 파일이 새로 작성된 상태로 파일이 출력을 위해 열립니다. MODE가 &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt; 인 경우 파일을 추가하기 위해 열어 필요한 경우 다시 작성합니다.</target>
        </trans-unit>
        <trans-unit id="2e10a47d1100af2f4e741fa10c714b1d6eb83c05" translate="yes" xml:space="preserve">
          <source>If true (the default value), we autogenerate a JavaScript in the output directory, and set our HTML files to use it. Currently, the JavaScript is used only to get the browser to remember what stylesheet it prefers. TODO: continue</source>
          <target state="translated">true 인 경우 (기본값) 출력 디렉토리에서 JavaScript를 자동 생성하고 HTML 파일을 사용하도록 설정합니다. 현재 JavaScript는 브라우저가 선호하는 스타일 시트를 기억하도록하기 위해서만 사용됩니다. TODO : 계속</target>
        </trans-unit>
        <trans-unit id="634c500cd04e5d0b913158c1c6e9ccddc0f9bc06" translate="yes" xml:space="preserve">
          <source>If true (the default value), we autogenerate some CSS files in the output directory, and set our HTML files to use those. TODO: continue</source>
          <target state="translated">true 인 경우 (기본값) 출력 디렉토리에서 일부 CSS 파일을 자동 생성하고 HTML 파일을 사용하도록 설정합니다. TODO : 계속</target>
        </trans-unit>
        <trans-unit id="ed672b2b381b7d94345040cc4eb4667fc3d97c8b" translate="yes" xml:space="preserve">
          <source>If true and a code reference, will be called with the symbolic link name and the directory it lives in as arguments. Otherwise, if true and warnings are on, warning &quot;symbolic_link_name is a dangling symbolic link\n&quot; will be issued. If false, the dangling symbolic link will be silently ignored.</source>
          <target state="translated">true이고 코드 참조 인 경우 기호 링크 이름 및 해당 디렉토리가 인수로있는 디렉토리와 함께 호출됩니다. 그렇지 않으면 true이고 경고가 설정되어 있으면 &quot;symbolic_link_name이 매달려있는 심볼릭 링크 \ n&quot;이라는 경고가 표시됩니다. False이면 매달려있는 심볼릭 링크가 자동으로 무시됩니다.</target>
        </trans-unit>
        <trans-unit id="3f3fdfd0a40c103a2211bdac354013485a8b6be3" translate="yes" xml:space="preserve">
          <source>If true is returned, those arguments &lt;b&gt;should&lt;/b&gt; in theory be processed with quadmath_snprintf(), but in case there is more than one such format specifier (see &lt;a href=&quot;#quadmath_format_single&quot;&gt;quadmath_format_single&lt;/a&gt;), and if there is anything else beyond that one (even just a single byte), they &lt;b&gt;cannot&lt;/b&gt; be processed because quadmath_snprintf() is very strict, accepting only one format spec, and nothing else. In this case, the code should probably fail.</source>
          <target state="translated">true가 반환되면 이러한 인수 &lt;b&gt;는&lt;/b&gt; 이론적으로 quadmath_snprintf ()를 사용하여 처리 &lt;b&gt;해야&lt;/b&gt; 하지만 이러한 형식 지정자가 두 개 이상인 경우 ( &lt;a href=&quot;#quadmath_format_single&quot;&gt;quadmath_format_single&lt;/a&gt; 참조 ) 그 이외의 항목이있는 경우 (단일 바이트) quadmath_snprintf ()는 매우 엄격하여 하나의 형식 스펙 만 허용하고 다른 것은 없기 때문에 처리 할 &lt;b&gt;수 없습니다&lt;/b&gt; . 이 경우 코드가 실패해야합니다.</target>
        </trans-unit>
        <trans-unit id="0653af7b3995880e12e86c1b6df46b2abdc8adcd" translate="yes" xml:space="preserve">
          <source>If true then &lt;code&gt;Configure&lt;/code&gt; will check each hostname given that it exists</source>
          <target state="translated">true 인 경우 &lt;code&gt;Configure&lt;/code&gt; 는 각 호스트 이름이 존재하는지 확인합니다.</target>
        </trans-unit>
        <trans-unit id="5e192827bd7624c2eefa078600e9250f2fd8d099" translate="yes" xml:space="preserve">
          <source>If true then &lt;code&gt;make test&lt;/code&gt; may attempt to connect to hosts given in the configuration.</source>
          <target state="translated">true 인 경우 &lt;code&gt;make test&lt;/code&gt; 에서 구성에 지정된 호스트에 연결을 시도 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="1bd986bfa48b8d9de9607995da53c20f474abed0" translate="yes" xml:space="preserve">
          <source>If true, &lt;code&gt;Test::Harness&lt;/code&gt; will output the verbose results of running its tests. Setting &lt;code&gt;$Test::Harness::verbose&lt;/code&gt; will override this, or you can use the &lt;code&gt;-v&lt;/code&gt; switch in the</source>
          <target state="translated">true 인 경우 &lt;code&gt;Test::Harness&lt;/code&gt; 는 테스트 실행의 자세한 결과를 출력합니다. &lt;code&gt;$Test::Harness::verbose&lt;/code&gt; 설정하면 이것을 무시하거나 &lt;code&gt;-v&lt;/code&gt; 스위치를 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="44529fee5d3eb44416500710e8dc9bea67c57ded" translate="yes" xml:space="preserve">
          <source>If true, STDERR and STDOUT are the same filehandle. This may cause breakage if STDERR contains anything resembling TAP format, but does allow exact synchronization.</source>
          <target state="translated">true 인 경우 STDERR 및 STDOUT은 동일한 파일 핸들입니다. STDERR에 TAP 형식과 유사한 것이 포함되어 있지만 정확한 동기화를 허용하는 경우 손상이 발생할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="fe1c5580c4e77a7f54f6b42fc274494bf3ad60b5" translate="yes" xml:space="preserve">
          <source>If true, make install will be verbose</source>
          <target state="translated">true 인 경우 자세한 설치를 수행하십시오.</target>
        </trans-unit>
        <trans-unit id="fb2c5a318ef60df6e780dd24e4ef173dd23b6b3c" translate="yes" xml:space="preserve">
          <source>If true, uses proxy subs. See &lt;a href=&quot;http://search.cpan.org/perldoc/ExtUtils::Constant::ProxySubs&quot;&gt;ExtUtils::Constant::ProxySubs&lt;/a&gt;.</source>
          <target state="translated">true 인 경우 프록시 하위를 사용합니다. &lt;a href=&quot;http://search.cpan.org/perldoc/ExtUtils::Constant::ProxySubs&quot;&gt;ExtUtils :: Constant :: ProxySubs를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="33b670decc24a56dd9e5e0101143f31051cabe4b" translate="yes" xml:space="preserve">
          <source>If two arrays smartmatch each other, then they are deep copies of each others' values, as this example reports:</source>
          <target state="translated">두 배열이 서로 스마트하게 일치하는 경우이 예에서보고하는 것처럼 서로의 값에 대한 깊은 사본입니다.</target>
        </trans-unit>
        <trans-unit id="acee3e1d7871c445b42f87ba144a405a067cf53f" translate="yes" xml:space="preserve">
          <source>If two characters here and next (as code points) are composable (including Hangul Jamo/Syllables and Composition Exclusions), it returns the code point of the composite.</source>
          <target state="translated">여기 및 다음 두 문자 (코드 포인트)가 컴포저 블 가능하면 (한글 자모 / 음절 및 컴포지션 제외 포함) 컴포지트의 코드 포인트를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="42360b0ce037c1aa50c01166917adec5fecc2590" translate="yes" xml:space="preserve">
          <source>If type is non-Unix (see &lt;a href=&quot;#fileparse_set_fstype&quot;&gt;fileparse_set_fstype&lt;/a&gt;) then the pattern matching for suffix removal is performed case-insensitively, since those systems are not case-sensitive when opening existing files.</source>
          <target state="translated">type이 Unix가 아닌 경우 ( &lt;a href=&quot;#fileparse_set_fstype&quot;&gt;fileparse_set_fstype&lt;/a&gt; 참조 ) 접미사 제거에 대한 패턴 일치는 기존 파일을 열 때 대소 문자를 구분하지 않으므로 대소 문자를 구분하지 않고 수행됩니다.</target>
        </trans-unit>
        <trans-unit id="2fd48f2e17e1f717f9f154bd3292076827285d01" translate="yes" xml:space="preserve">
          <source>If umask(2) is not implemented on your system and you are trying to restrict access for</source>
          <target state="translated">시스템에 umask (2)가 구현되어 있지 않고 액세스를 제한하려는 경우</target>
        </trans-unit>
        <trans-unit id="67a1f447b6ee3db12f569b14d8d5a13cc81a620d" translate="yes" xml:space="preserve">
          <source>If unsafe signals is in effect, then signal handling is not thread-safe, and the &lt;code&gt;-&amp;gt;kill()&lt;/code&gt; signalling method cannot be used.</source>
          <target state="translated">안전하지 않은 신호가 유효하면 신호 처리가 스레드로부터 안전하지 않으며 &lt;code&gt;-&amp;gt;kill()&lt;/code&gt; 신호 방식을 사용할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="70663a96a9c0a32a9a2fde13b31bf56729b3885e" translate="yes" xml:space="preserve">
          <source>If upgrading is in effect, returns PI, rounded to N digits with the current rounding mode:</source>
          <target state="translated">업그레이드가 유효하면 현재 반올림 모드에서 N 자리로 반올림 된 PI를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="d763c9ab9f9ca920e89e5e82fe0a4c19ddec98c7" translate="yes" xml:space="preserve">
          <source>If used with a single argument in a scalar context, returns the string consisting of the code points of the named sequence, or &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; if no named sequence by that name exists. If used with a single argument in a list context, it returns the list of the ordinals of the code points.</source>
          <target state="translated">스칼라 컨텍스트에서 단일 인수와 함께 사용하면 명명 된 시퀀스의 코드 포인트로 구성된 문자열을 반환하거나 해당 이름의 명명 된 시퀀스가 ​​없으면 &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; 를 반환합니다. 목록 컨텍스트에서 단일 인수와 함께 사용하면 코드 포인트의 서수 목록을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="beaceddc3b74ab2a5e89e9e5517463a3fd4ed9e1" translate="yes" xml:space="preserve">
          <source>If used with no arguments in a list context, it returns a hash with the names of all the named sequences as the keys and their sequences as strings as the values. Otherwise, it returns &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; or an empty list depending on the context.</source>
          <target state="translated">목록 컨텍스트에서 인수없이 사용하면 명명 된 모든 시퀀스의 이름을 키로, 해당 시퀀스를 문자열로 값으로 사용하여 해시를 반환합니다. 그렇지 않으면 컨텍스트에 따라 &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; 또는 빈 목록을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="6b1f504c6467cdb5b94820cfba3df9e446f6d20a" translate="yes" xml:space="preserve">
          <source>If using &lt;b&gt;BerkeleyDB&lt;/b&gt; isn't an option, there are a number of modules available on CPAN that can be used to implement locking. Each one implements locking differently and has different goals in mind. It is therefore worth knowing the difference, so that you can pick the right one for your application. Here are the three locking wrappers:</source>
          <target state="translated">&lt;b&gt;BerkeleyDB&lt;/b&gt; 사용 이 옵션이 아닌 경우 CPAN에서 잠금을 구현하는 데 사용할 수있는 많은 모듈이 있습니다. 각각은 잠금을 다르게 구현하고 다른 목표를 염두에두고 있습니다. 따라서 차이점을 아는 것이 가치가 있으므로 응용 프로그램에 적합한 것을 선택할 수 있습니다. 다음은 세 가지 잠금 래퍼입니다.</target>
        </trans-unit>
        <trans-unit id="b0d8dee3f60efc11f28b77ac32acb4a0d6da837c" translate="yes" xml:space="preserve">
          <source>If using a Perl file as a source, optional switches may be passed which will be used when invoking the perl executable.</source>
          <target state="translated">Perl 파일을 소스로 사용하는 경우 perl 실행 파일을 호출 할 때 사용되는 선택적 스위치가 전달 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d2c2e41b4856cbf4192df9fdfdae8eb4debbc3b0" translate="yes" xml:space="preserve">
          <source>If using crypt() on a Unicode string (which</source>
          <target state="translated">유니 코드 문자열에서 crypt ()를 사용하는 경우</target>
        </trans-unit>
        <trans-unit id="45cfcf2e0c855940dc64008801ae135f972cfd74" translate="yes" xml:space="preserve">
          <source>If using ftp remember to transfer the distribution in binary format.</source>
          <target state="translated">ftp를 사용하는 경우 이진 형식으로 배포를 전송해야합니다.</target>
        </trans-unit>
        <trans-unit id="b6fa09de90b513e62acb77e553ed8a67bf3a34b1" translate="yes" xml:space="preserve">
          <source>If using gcc, you can add the &lt;code&gt;-std=c89&lt;/code&gt; option which will hopefully catch most of these unportabilities. (However it might also catch incompatibilities in your system's header files.)</source>
          <target state="translated">gcc를 사용한다면, &lt;code&gt;-std=c89&lt;/code&gt; 옵션을 추가 할 수 있습니다 . 그러나 시스템 헤더 파일의 비 호환성 문제가 발생할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="664754e120bf0080d8c4c2636edd9c4d43e0b86a" translate="yes" xml:space="preserve">
          <source>If using the &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; encoding&lt;/code&gt; pragma without an explicit encoding name, the PERL_ENCODING environment variable is consulted for an encoding name.</source>
          <target state="translated">명시 적 인코딩 이름없이 &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; encoding&lt;/code&gt; pragma &lt;a href=&quot;functions/use&quot;&gt;사용을 사용&lt;/a&gt; 하는 경우 PERL_ENCODING 환경 변수가 인코딩 이름을 참조합니다.</target>
        </trans-unit>
        <trans-unit id="cfca052b74a8f394827d7f4faa9fd4f5bf5109bf" translate="yes" xml:space="preserve">
          <source>If using the &lt;code&gt;gcc -Wall&lt;/code&gt; note that not all the possible warnings (like &lt;code&gt;-Wunitialized&lt;/code&gt; ) are given unless you also compile with &lt;code&gt;-O&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;gcc -Wall&lt;/code&gt; 을 사용하는 경우 &lt;code&gt;-O&lt;/code&gt; 로 컴파일하지 않으면 가능한 모든 경고 (예 : &lt;code&gt;-Wunitialized&lt;/code&gt; )가 제공되지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="95f6a03b7ab2b25638142acde2118920ba4f7593" translate="yes" xml:space="preserve">
          <source>If we add a &lt;code&gt;(*PRUNE)&lt;/code&gt; before the count like the following</source>
          <target state="translated">다음과 같이 카운트 앞에 &lt;code&gt;(*PRUNE)&lt;/code&gt; 을 추가하면</target>
        </trans-unit>
        <trans-unit id="f49196da102bf295b3091d7157018af8c9071a57" translate="yes" xml:space="preserve">
          <source>If we call a method on a &lt;code&gt;Child&lt;/code&gt; object and that method is not defined in the &lt;code&gt;Child&lt;/code&gt; class, Perl will look for that method in the &lt;code&gt;Parent&lt;/code&gt; class and then, if necessary, in the &lt;code&gt;Grandparent&lt;/code&gt; class.</source>
          <target state="translated">&lt;code&gt;Child&lt;/code&gt; 객체 에서 메소드를 호출 하고 해당 메소드가 &lt;code&gt;Child&lt;/code&gt; 클래스에 정의되어 있지 않으면 Perl은 &lt;code&gt;Parent&lt;/code&gt; 클래스 에서 해당 메소드를 찾은 다음 필요한 경우 &lt;code&gt;Grandparent&lt;/code&gt; 클래스 에서 해당 메소드를 찾습니다 .</target>
        </trans-unit>
        <trans-unit id="ef968fd799fd1b1033f77f3853f27266c25aff48" translate="yes" xml:space="preserve">
          <source>If we can tell that there is no valid start point then we don't bother running the interpreter at all. Likewise, if we know from the analysis phase that we cannot detect a short-cut to the start position, we go straight to the interpreter.</source>
          <target state="translated">유효한 시작점이 없다는 것을 알 수 있다면 인터프리터를 전혀 실행하지 않아도됩니다. 마찬가지로, 분석 단계에서 시작 위치로의 지름길을 감지 할 수 없다는 것을 알면 통역사로 바로 이동합니다.</target>
        </trans-unit>
        <trans-unit id="2cd027f23ebc9bafdd0ef83ac988a2e8f6205abb" translate="yes" xml:space="preserve">
          <source>If we encrypt this with &lt;code&gt;mkrot13&lt;/code&gt; :</source>
          <target state="translated">&lt;code&gt;mkrot13&lt;/code&gt; 으로 이것을 암호화하면 :</target>
        </trans-unit>
        <trans-unit id="b742d69e435d1dc4ae57558eae468b9e3038bfd1" translate="yes" xml:space="preserve">
          <source>If we have a string which needs to be modified, while a regex will almost always be much more flexible, &lt;code&gt;&lt;a href=&quot;functions/tr&quot;&gt;tr&lt;/a&gt;&lt;/code&gt;, an oft underused tool, can still be a useful. One scenario might be replace all vowels with another character. The regex solution might look like this:</source>
          <target state="translated">우리가 수정해야 할 문자열이 있다면 정규 표현식은 거의 항상 훨씬 더 융통성이 있지만 , 자주 사용되지 않는 도구 인 &lt;code&gt;&lt;a href=&quot;functions/tr&quot;&gt;tr&lt;/a&gt;&lt;/code&gt; 은 여전히 ​​유용 할 수 있습니다. 하나의 시나리오는 모든 모음을 다른 문자로 대체 할 수 있습니다. 정규식 솔루션은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="e9e855f5e5eecc49e2e1826c2e605b2358ee8b64" translate="yes" xml:space="preserve">
          <source>If we look at any of the C code generated by any of the examples except example 1, you will notice a number of references to ST(n), where n is usually 0. &quot;ST&quot; is actually a macro that points to the n'th argument on the argument stack. ST(0) is thus the first argument on the stack and therefore the first argument passed to the XSUB, ST(1) is the second argument, and so on.</source>
          <target state="translated">예제 1을 제외한 모든 예제에서 생성 된 C 코드를 살펴보면 ST (n)에 대한 수많은 참조를 볼 수 있습니다. 여기서 n은 일반적으로 0입니다. &quot;ST&quot;는 실제로 n을 가리키는 매크로입니다. 인수 스택의 인수 따라서 ST (0)은 스택의 첫 번째 인수이므로 XSUB에 전달 된 첫 번째 인수이고 ST (1)은 두 번째 인수입니다.</target>
        </trans-unit>
        <trans-unit id="b4b727c2115d816f7a5edf98b373babd311821be" translate="yes" xml:space="preserve">
          <source>If we replace the &lt;code&gt; (?{local $c = $c + 1;})&lt;/code&gt; with &lt;code&gt; (?{$c = $c + 1;})&lt;/code&gt;, the variable changes are</source>
          <target state="translated">우리가 교체되면 &lt;code&gt; (?{local $c = $c + 1;})&lt;/code&gt; 과 &lt;code&gt; (?{$c = $c + 1;})&lt;/code&gt; , 변수의 변화는</target>
        </trans-unit>
        <trans-unit id="6b22701c7de1c1b18f83a3da253320877e6db57e" translate="yes" xml:space="preserve">
          <source>If we want to call the function in scalar context, we have to do a bit more work. We can really have any code we like inside the braces, so we simply have to end with the scalar reference, although how you do that is up to you, and you can use code inside the braces. Note that the use of parens creates a list context, so we need &lt;code&gt;&lt;a href=&quot;functions/scalar&quot;&gt;scalar&lt;/a&gt;&lt;/code&gt; to force the scalar context on the function:</source>
          <target state="translated">스칼라 컨텍스트에서 함수를 호출하려면 조금 더 많은 작업을 수행해야합니다. 우리는 실제로 중괄호 안에 좋아하는 코드를 가질 수 있으므로 스칼라 참조로 끝나기 만하면됩니다. 비록 그렇게하는 방법은 여러분에게 달려 있으며, 중괄호 안에 코드를 사용할 수 있습니다. 우리가 필요하므로 참고 괄호의 사용은리스트 문맥을 생성하는 &lt;code&gt;&lt;a href=&quot;functions/scalar&quot;&gt;scalar&lt;/a&gt;&lt;/code&gt; 함수에 대한 스칼라 문맥을 강제로 :</target>
        </trans-unit>
        <trans-unit id="2aa4af82f261a5bfccad859728bbc5e698f2ad5a" translate="yes" xml:space="preserve">
          <source>If we want to sort by the hash value instead, we use the hash key to look it up. We still get out a list of keys, but this time they are ordered by their value.</source>
          <target state="translated">해시 값을 기준으로 정렬하려면 해시 키를 사용하여 찾아보십시오. 우리는 여전히 키 목록을 얻지 만 이번에는 키 값으로 정렬됩니다.</target>
        </trans-unit>
        <trans-unit id="1a0a23be20e0afdc53dc3805694c934e04c1d63f" translate="yes" xml:space="preserve">
          <source>If we wanted to include the mp3's title in the greeting, we could override the method:</source>
          <target state="translated">인사말에 mp3의 제목을 포함하려면 다음 방법을 무시하십시오.</target>
        </trans-unit>
        <trans-unit id="215abf71d62aea6c4bacd7ab63842ca42cbc8d09" translate="yes" xml:space="preserve">
          <source>If we were interested in performance, not in code compactness, in the success branch we would not use &lt;code&gt;XPUSHs&lt;/code&gt; macros, but &lt;code&gt;PUSHs&lt;/code&gt; macros, and would pre-extend the stack before pushing the return values:</source>
          <target state="translated">우리가하지 코드 소형화에, 성능에 관심이 있다면, 성공 지점에서 우리는 사용하지 것이다 &lt;code&gt;XPUSHs&lt;/code&gt; 의 매크로하지만 &lt;code&gt;PUSHs&lt;/code&gt; 의 매크로 및 반환 값을 밀어 전에 스택을 미리 확장 할 것입니다 :</target>
        </trans-unit>
        <trans-unit id="ed55ede23a733b9689b8f241805b425f9dc0c341" translate="yes" xml:space="preserve">
          <source>If we've done things right, you'll probably want to write a new source, rather than sub-classing this (see &lt;a href=&quot;sourcehandler&quot;&gt;TAP::Parser::SourceHandler&lt;/a&gt; for that).</source>
          <target state="translated">작업을 올바르게 수행했다면 하위 클래스를 작성하는 대신 새 소스를 작성하는 것이 좋습니다 ( &lt;a href=&quot;sourcehandler&quot;&gt;TAP :: Parser :: SourceHandler&lt;/a&gt; 참조 ).</target>
        </trans-unit>
        <trans-unit id="433a6e7876c97a91d0108a2079322b6917a252c6" translate="yes" xml:space="preserve">
          <source>If what the angle brackets contain is a simple scalar variable (for example, &lt;code&gt;$foo&lt;/code&gt; ), then that variable contains the name of the filehandle to input from, or its typeglob, or a reference to the same. For example:</source>
          <target state="translated">꺾쇠 괄호에 포함 된 내용이 간단한 스칼라 변수 (예 : &lt;code&gt;$foo&lt;/code&gt; ) 인 경우 해당 변수에는 입력 할 파일 핸들의 이름 또는 typeglob 또는 이에 대한 참조가 포함됩니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="0b51d046d4f4e47130f90dab13b7fc186caff6e3" translate="yes" xml:space="preserve">
          <source>If what's within the angle brackets is neither a filehandle nor a simple scalar variable containing a filehandle name, typeglob, or typeglob reference, it is interpreted as a filename pattern to be globbed, and either a list of filenames or the next filename in the list is returned, depending on context. This distinction is determined on syntactic grounds alone. That means &lt;code&gt;&amp;lt;$x&amp;gt;&lt;/code&gt; is always a &lt;code&gt;&lt;a href=&quot;functions/readline&quot;&gt;readline()&lt;/a&gt;&lt;/code&gt; from an indirect handle, but &lt;code&gt;&amp;lt;$hash{key}&amp;gt;&lt;/code&gt; is always a &lt;code&gt;&lt;a href=&quot;functions/glob&quot;&gt;glob()&lt;/a&gt;&lt;/code&gt;. That's because &lt;code&gt;$x&lt;/code&gt; is a simple scalar variable, but &lt;code&gt;$hash{key}&lt;/code&gt; is not--it's a hash element. Even &lt;code&gt;&amp;lt;$x &amp;gt;&lt;/code&gt; (note the extra space) is treated as &lt;code&gt;&lt;a href=&quot;functions/glob&quot;&gt;glob&lt;/a&gt;(&quot;$x &quot;)&lt;/code&gt; , not &lt;code&gt;&lt;a href=&quot;functions/readline&quot;&gt;readline($x)&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">꺾쇠 괄호 안에있는 파일이 파일 핸들 이름, typeglob 또는 typeglob 참조를 포함하는 단순 스칼라 변수가 아닌 경우, glob 할 파일 이름 패턴과 파일 이름 목록 또는 목록의 다음 파일 이름으로 해석됩니다. 상황에 따라 반환됩니다. 이 구별은 구문상의 근거에서만 결정됩니다. 즉, &lt;code&gt;&amp;lt;$x&amp;gt;&lt;/code&gt; 는 항상 간접 핸들 의 &lt;code&gt;&lt;a href=&quot;functions/readline&quot;&gt;readline()&lt;/a&gt;&lt;/code&gt; 이지만 &lt;code&gt;&amp;lt;$hash{key}&amp;gt;&lt;/code&gt; 는 항상 &lt;code&gt;&lt;a href=&quot;functions/glob&quot;&gt;glob()&lt;/a&gt;&lt;/code&gt; 입니다. 의 그 때문에 &lt;code&gt;$x&lt;/code&gt; 간단한 스칼라 변수이지만, &lt;code&gt;$hash{key}&lt;/code&gt; 아니다 - 그것은 해시 요소입니다. &lt;code&gt;&amp;lt;$x &amp;gt;&lt;/code&gt; (추가 공간에 주목) 조차도 &lt;code&gt;&lt;a href=&quot;functions/glob&quot;&gt;glob&lt;/a&gt;(&quot;$x &quot;)&lt;/code&gt; 로 취급됩니다 .아니 &lt;code&gt;&lt;a href=&quot;functions/readline&quot;&gt;readline($x)&lt;/a&gt;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="5b842d8a427447b55d56f0f86ffb1407d7bbf70b" translate="yes" xml:space="preserve">
          <source>If whitespace is mostly irrelevant, how does one include space characters in an extended regexp? The answer is to backslash it &lt;code&gt;'\ '&lt;/code&gt; or put it in a character class &lt;code&gt;[ ]&lt;/code&gt; . The same thing goes for pound signs: use &lt;code&gt;\#&lt;/code&gt; or &lt;code&gt;[#]&lt;/code&gt;. For instance, Perl allows a space between the sign and the mantissa or integer, and we could add this to our regexp as follows:</source>
          <target state="translated">공백이 대부분 관련이없는 경우 확장 정규 표현식에 공백 문자가 어떻게 포함됩니까? 답은 &lt;code&gt;'\ '&lt;/code&gt; 를 백 슬래시 하거나 문자 클래스 &lt;code&gt;[ ]&lt;/code&gt; 에 넣는 것입니다 . 파운드 기호도 마찬가지입니다 : use &lt;code&gt;\#&lt;/code&gt; 또는 &lt;code&gt;[#]&lt;/code&gt; . 예를 들어, Perl은 부호와 가수 또는 정수 사이에 공백을 허용하며 다음과 같이 정규식에이를 추가 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="0ac523288e8907db49cd44aeec42c46983d54f41" translate="yes" xml:space="preserve">
          <source>If you</source>
          <target state="translated">만약 너라면</target>
        </trans-unit>
        <trans-unit id="a97a499d1638eac60812016983597e71f2e68467" translate="yes" xml:space="preserve">
          <source>If you &quot;mmap&quot; the file with the File::Map module from CPAN, you can virtually load the entire file into a string without actually storing it in memory:</source>
          <target state="translated">CPAN의 File :: Map 모듈을 사용하여 파일을 &quot;mmap&quot;하면 실제로 파일을 메모리에 저장하지 않고 전체 파일을 사실상 문자열로로드 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e9fdf3b9fc81571db27bb02cd29a8e0b53b10cc5" translate="yes" xml:space="preserve">
          <source>If you &lt;code&gt;&lt;a href=&quot;fork&quot;&gt;fork&lt;/a&gt;&lt;/code&gt; without ever waiting on your children, you will accumulate zombies. On some systems, you can avoid this by setting &lt;code&gt;$SIG{CHLD}&lt;/code&gt; to &lt;code&gt;&quot;IGNORE&quot;&lt;/code&gt; . See also &lt;a href=&quot;../perlipc&quot;&gt;perlipc&lt;/a&gt; for more examples of forking and reaping moribund children.</source>
          <target state="translated">당신이 경우 &lt;code&gt;&lt;a href=&quot;fork&quot;&gt;fork&lt;/a&gt;&lt;/code&gt; 이제까지 당신의 아이들을 기다리지 않고, 당신은 좀비를 축적합니다. 일부 시스템에서는 &lt;code&gt;$SIG{CHLD}&lt;/code&gt; 를 &lt;code&gt;&quot;IGNORE&quot;&lt;/code&gt; 로 설정하여이를 피할 수 있습니다 . 사나운 아이들을 포크하고 거두는 예 는 &lt;a href=&quot;../perlipc&quot;&gt;perlipc&lt;/a&gt; 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="3342529f369584d116691354aca02d8a637cdc3f" translate="yes" xml:space="preserve">
          <source>If you &lt;code&gt;&lt;a href=&quot;functions/fork&quot;&gt;fork&lt;/a&gt;&lt;/code&gt; without ever waiting on your children, you will accumulate zombies. On some systems, you can avoid this by setting &lt;code&gt;$SIG{CHLD}&lt;/code&gt; to &lt;code&gt;&quot;IGNORE&quot;&lt;/code&gt; . See also &lt;a href=&quot;perlipc&quot;&gt;perlipc&lt;/a&gt; for more examples of forking and reaping moribund children.</source>
          <target state="translated">당신이 경우 &lt;code&gt;&lt;a href=&quot;functions/fork&quot;&gt;fork&lt;/a&gt;&lt;/code&gt; 이제까지 당신의 아이들을 기다리지 않고, 당신은 좀비를 축적합니다. 일부 시스템에서는 &lt;code&gt;$SIG{CHLD}&lt;/code&gt; 를 &lt;code&gt;&quot;IGNORE&quot;&lt;/code&gt; 로 설정하여이를 피할 수 있습니다 . 사나운 아이들을 포크하고 거두는 예 는 &lt;a href=&quot;perlipc&quot;&gt;perlipc&lt;/a&gt; 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="bb90d14b290d4320ac5634dcbc5bece03b18182e" translate="yes" xml:space="preserve">
          <source>If you actually need to be able to get a real reference back from each hash entry, you can use the Tie::RefHash module, which does the required work for you.</source>
          <target state="translated">실제로 각 해시 항목에서 실제 참조를 다시 얻을 수 있어야하는 경우 필요한 작업을 수행하는 Tie :: RefHash 모듈을 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="0863c378529bcaaf05a08fbe7b9d62fcdd40f533" translate="yes" xml:space="preserve">
          <source>If you actually want to bless into the stringified version of the reference supplied, you need to stringify it yourself, for example by:</source>
          <target state="translated">제공된 참조의 문자열 버전을 실제로 축복하려면 다음과 같이 직접 참조해야합니다.</target>
        </trans-unit>
        <trans-unit id="7632fd79ddaeaed4fd83611844af65a8558ccb38" translate="yes" xml:space="preserve">
          <source>If you actually want to pack Unicode codepoints, use the &lt;code&gt;&quot;U&quot;&lt;/code&gt; format instead.</source>
          <target state="translated">실제로 유니 코드 코드 포인트를 압축하려면 대신 &lt;code&gt;&quot;U&quot;&lt;/code&gt; 형식을 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="30a06cdba55cf94e2b0d8887615268f65da700c2" translate="yes" xml:space="preserve">
          <source>If you add the &lt;code&gt;stringify&lt;/code&gt; import option to your &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; threads&lt;/code&gt; declaration, then using a threads object in a string or a string context (e.g., as a hash key) will cause its ID to be used as the value:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; threads&lt;/code&gt; 스레드 선언에 &lt;code&gt;stringify&lt;/code&gt; 가져 오기 옵션을 추가하면 문자열 또는 문자열 컨텍스트 (예 : 해시 키)의 스레드 객체를 사용하면 해당 ID가 값으로 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="77f0b688e7f7db776b8a41a0294b1be395b96046" translate="yes" xml:space="preserve">
          <source>If you already have the data in memory or if you want to keep your code simple, you can use one of the sv_cat*() variants, such as sv_catpvn(). If you want to insert anywhere in the string you can use sv_insert() or sv_insert_flags().</source>
          <target state="translated">메모리에 이미 데이터가 있거나 코드를 단순하게 유지하려는 경우 sv_catpvn ()과 같은 sv_cat * () 변형 중 하나를 사용할 수 있습니다. 문자열의 아무 곳에 나 삽입하려면 sv_insert () 또는 sv_insert_flags ()를 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d0e6e027d69f3e21d5d8d4eaafdf5a18b7a271a0" translate="yes" xml:space="preserve">
          <source>If you also specify the &lt;code&gt;save&lt;/code&gt; option newly passing tests will be excluded from subsequent runs.</source>
          <target state="translated">&lt;code&gt;save&lt;/code&gt; 옵션 도 지정하면 새로 통과 한 테스트는 후속 실행에서 제외됩니다.</target>
        </trans-unit>
        <trans-unit id="f2315b4f443374dc91536026901e2322007448a6" translate="yes" xml:space="preserve">
          <source>If you alter your @_ arguments in a subroutine (such as with &lt;code&gt;&lt;a href=&quot;functions/shift&quot;&gt;shift&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;functions/pop&quot;&gt;pop&lt;/a&gt;&lt;/code&gt;), the stack backtrace will not show the original values.</source>
          <target state="translated">서브 루틴 (예 : &lt;code&gt;&lt;a href=&quot;functions/shift&quot;&gt;shift&lt;/a&gt;&lt;/code&gt; 또는 &lt;code&gt;&lt;a href=&quot;functions/pop&quot;&gt;pop&lt;/a&gt;&lt;/code&gt; ) 에서 @_ 인수를 변경 하면 스택 역 추적에 원래 값이 표시되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="bcce70763746b8ab89abce0fda8214efc82356bb" translate="yes" xml:space="preserve">
          <source>If you are accustomed to using perl from various command-line shells found in UNIX environments, you will be less than pleased with what Windows offers by way of a command shell.</source>
          <target state="translated">UNIX 환경에있는 다양한 명령 줄 셸에서 perl을 사용하는 데 익숙하다면 Windows가 명령 셸을 통해 제공하는 것에 만족하지 못할 것입니다.</target>
        </trans-unit>
        <trans-unit id="75851b1a6055f8c9601d27bb8e4f2638f62e5f5e" translate="yes" xml:space="preserve">
          <source>If you are advanced enough with building C code, here is a suggestion to speed up building perl, and the later &lt;code&gt;make test&lt;/code&gt; . Try to keep your PATH enviromental variable with the least number of folders possible (remember to keep your C compiler's folders there). &lt;code&gt;C:\WINDOWS\system32&lt;/code&gt; or &lt;code&gt;C:\WINNT\system32&lt;/code&gt; depending on your OS version should be first folder in PATH, since &quot;cmd.exe&quot; is the most commonly launched program during the build and later testing.</source>
          <target state="translated">C 코드 작성으로 충분히 발전했다면 다음과 같이 perl 작성 속도를 높이고 나중에 &lt;code&gt;make test&lt;/code&gt; . 가능한 최소한의 폴더로 PATH 환경 변수를 유지하십시오 (C 컴파일러의 폴더를 거기에 보관하십시오). OS 버전에 따라 &lt;code&gt;C:\WINDOWS\system32&lt;/code&gt; 또는 &lt;code&gt;C:\WINNT\system32&lt;/code&gt; 는 PATH의 첫 번째 폴더 여야합니다. &quot;cmd.exe&quot;는 빌드 및 이후 테스트 중에 가장 일반적으로 실행되는 프로그램이기 때문입니다.</target>
        </trans-unit>
        <trans-unit id="9e6e47c6af55350e3bd275924a9467fa5be92cb6" translate="yes" xml:space="preserve">
          <source>If you are author of a package and wonder if your $VERSION can be parsed, please try the above method.</source>
          <target state="translated">패키지를 작성하고 $ VERSION을 파싱 할 수 있는지 궁금하다면 위의 방법을 시도하십시오.</target>
        </trans-unit>
        <trans-unit id="e9341f5fe0aca50dc1a438efa6a2a0829ec331a7" translate="yes" xml:space="preserve">
          <source>If you are building Perl from source, the Perl test suite file</source>
          <target state="translated">소스에서 Perl을 빌드하는 경우 Perl 테스트 스위트 파일</target>
        </trans-unit>
        <trans-unit id="fd709122178ec9749d3b052901d53a7e7c059f96" translate="yes" xml:space="preserve">
          <source>If you are calling &lt;b&gt;pod2usage()&lt;/b&gt; from a module and want to display that module's POD, you can use this:</source>
          <target state="translated">모듈에서 &lt;b&gt;pod2usage ()&lt;/b&gt; 를 호출 하고 해당 모듈의 POD를 표시하려는 경우 다음을 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f5b3eed9ee23b3eafd899b21c185d1c6a6521682" translate="yes" xml:space="preserve">
          <source>If you are careful, it is possible to mix API calls with the tied hash/array interface in the same piece of code. Although only a few of the methods used to implement the tied interface currently make use of the cursor, you should always assume that the cursor has been changed any time the tied hash/array interface is used. As an example, this code will probably not do what you expect:</source>
          <target state="translated">주의를 기울이면 동일한 코드에서 API 호출을 연결된 해시 / 배열 인터페이스와 혼합 할 수 있습니다. 연결된 인터페이스를 구현하는 데 사용되는 몇 가지 메서드 만 현재 커서를 사용하지만 연결된 해시 / 배열 인터페이스를 사용할 때마다 커서가 변경되었다고 가정해야합니다. 예를 들어,이 코드는 예상 한대로 수행하지 않을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="46443ee64846124969f99d9a251a1b5c33defa28" translate="yes" xml:space="preserve">
          <source>If you are coming here because code of yours is being adversely affected by someone's use of this variable, you can usually work around it by doing this:</source>
          <target state="translated">귀하의 코드가 누군가 가이 변수를 사용하여 악영향을 받아 여기에 오는 경우 일반적으로 다음을 수행하여 해결할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="580a992ac4c85198002e3da1ab0af0114ef2843d" translate="yes" xml:space="preserve">
          <source>If you are compiling Perl on a remotely-mounted NFS filesystem, the test io/fs.t may fail on test #18. This appears to be a bug in HP-UX and no fix is currently available.</source>
          <target state="translated">원격으로 마운트 된 NFS 파일 시스템에서 Perl을 컴파일하는 경우 테스트 # 18에서 테스트 io / fs.t가 실패 할 수 있습니다. HP-UX의 버그로 보이며 현재 사용할 수있는 수정 프로그램이 없습니다.</target>
        </trans-unit>
        <trans-unit id="3b33c19354a1a90e2387b434d12153c90f20f627" translate="yes" xml:space="preserve">
          <source>If you are compiling in PASE, then &quot;make install&quot; is the only thing you will need to do.</source>
          <target state="translated">PASE로 컴파일하는 경우 &quot;make install&quot;만 수행하면됩니다.</target>
        </trans-unit>
        <trans-unit id="81413ae9ed04e602e1a5e2aa34f9a9228c164afc" translate="yes" xml:space="preserve">
          <source>If you are compiling on AIX, simply do a &quot;make install&quot; on the AIX box. Once the install finishes, tar up the /QOpenSys/perl directory. Transfer the tarball to the OS/400 using FTP with the following commands:</source>
          <target state="translated">AIX에서 컴파일하는 경우 AIX 상자에서 &quot;make install&quot;을 수행하십시오. 설치가 완료되면 / QOpenSys / perl 디렉토리를 압축 해제하십시오. 다음 명령으로 FTP를 사용하여 tarball을 OS / 400으로 전송하십시오.</target>
        </trans-unit>
        <trans-unit id="24c32dcfc58ac17c09099d20bc9bc3a8e41bba8b" translate="yes" xml:space="preserve">
          <source>If you are content with the test result, just &quot;make install&quot;</source>
          <target state="translated">테스트 결과에 만족하는 경우 &quot;make install&quot;</target>
        </trans-unit>
        <trans-unit id="aa6a61423fd16b04dc17486be56b73db7a8c3506" translate="yes" xml:space="preserve">
          <source>If you are creating a PerlIO layer, you may want to be lazy, in other words, implement only the methods that interest you. The other methods you can either replace with the &quot;blank&quot; methods</source>
          <target state="translated">PerlIO 계층을 작성하는 경우 게으 르기를 원할 수 있습니다. 즉, 관심있는 메소드 만 구현하십시오. &quot;빈&quot;방법으로 대체 할 수있는 다른 방법</target>
        </trans-unit>
        <trans-unit id="4b2de75d9b2a463fc1f9325a0ae503a9f6861718" translate="yes" xml:space="preserve">
          <source>If you are developing a suite of related modules/classes it's good practice to use nested classes with a common prefix as this will avoid namespace clashes. For example: Xyz::Control, Xyz::View, Xyz::Model etc. Use the modules in this list as a naming guide.</source>
          <target state="translated">관련 모듈 / 클래스 제품군을 개발하는 경우 네임 스페이스 충돌을 피하기 위해 공통 접두사가있는 중첩 클래스를 사용하는 것이 좋습니다. 예를 들면 다음과 같습니다. Xyz :: Control, Xyz :: View, Xyz :: Model 등.이 목록의 모듈을 이름 지정 안내서로 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="cf3f54058ec5c3861eafa70f589fb5c16feca4d3" translate="yes" xml:space="preserve">
          <source>If you are doing a blocking &lt;code&gt;&lt;a href=&quot;functions/read&quot;&gt;read()&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;functions/sysread&quot;&gt;sysread()&lt;/a&gt;&lt;/code&gt;, you'll have to arrange for an alarm handler to provide a timeout (see &lt;a href=&quot;functions/alarm&quot;&gt;alarm&lt;/a&gt;). If you have a non-blocking open, you'll likely have a non-blocking read, which means you may have to use a 4-arg &lt;code&gt;&lt;a href=&quot;functions/select&quot;&gt;select()&lt;/a&gt;&lt;/code&gt; to determine whether I/O is ready on that device (see &lt;a href=&quot;functions/select&quot;&gt;select&lt;/a&gt;.</source>
          <target state="translated">당신은 차단하고 있다면 &lt;code&gt;&lt;a href=&quot;functions/read&quot;&gt;read()&lt;/a&gt;&lt;/code&gt; 또는 &lt;code&gt;&lt;a href=&quot;functions/sysread&quot;&gt;sysread()&lt;/a&gt;&lt;/code&gt; , 당신은 알람 핸들러 (참조 제한 시간을 제공하기 위해 준비해야 &lt;a href=&quot;functions/alarm&quot;&gt;알람&lt;/a&gt; ). 비 차단 열기가있는 경우 비 차단 읽기가있을 수 있습니다. 즉, 4 개 인수 &lt;code&gt;&lt;a href=&quot;functions/select&quot;&gt;select()&lt;/a&gt;&lt;/code&gt; 를 사용하여 해당 장치에서 I / O가 준비되어 있는지 확인해야합니다 ( &lt;a href=&quot;functions/select&quot;&gt;select&lt;/a&gt; 참조) .</target>
        </trans-unit>
        <trans-unit id="27eb5f2751e7b3c976fa3693eb1b047c9ea468b5" translate="yes" xml:space="preserve">
          <source>If you are doing something complex, such as moving through many pages and forms or a web site, you can use &lt;a href=&quot;http://search.cpan.org/perldoc/WWW::Mechanize&quot;&gt;WWW::Mechanize&lt;/a&gt;. See its documentation for all the details.</source>
          <target state="translated">많은 페이지와 양식 또는 웹 사이트를 이동하는 등 복잡한 작업을 수행하는 경우 &lt;a href=&quot;http://search.cpan.org/perldoc/WWW::Mechanize&quot;&gt;WWW :: Mechanize를&lt;/a&gt; 사용할 수 있습니다 . 자세한 내용은 해당 설명서를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="1a9b4d7923308acf7ee68c13a2cd11f90f3c70ce" translate="yes" xml:space="preserve">
          <source>If you are experiencing variable suicide, that &lt;code&gt;&lt;a href=&quot;functions/my&quot;&gt;my&lt;/a&gt; $f&lt;/code&gt; in the subroutine doesn't pick up a fresh copy of the &lt;code&gt;$f&lt;/code&gt; whose value is &lt;code&gt;'foo'&lt;/code&gt; . The output shows that inside the subroutine the value of &lt;code&gt;$f&lt;/code&gt; leaks through when it shouldn't, as in this output:</source>
          <target state="translated">당신이 변수 자살이 발생하는 경우, 것을 &lt;code&gt;&lt;a href=&quot;functions/my&quot;&gt;my&lt;/a&gt; $f&lt;/code&gt; 서브 루틴은의 새 복사본 선택하지 않는 &lt;code&gt;$f&lt;/code&gt; 값 &lt;code&gt;'foo'&lt;/code&gt; . 출력은 서브 루틴 내부에서 &lt;code&gt;$f&lt;/code&gt; 값 이이 출력에서와 같이해서는 안될 때 누출되는 것을 보여줍니다 .</target>
        </trans-unit>
        <trans-unit id="bbeae6d94c0568a9909c55582ce46133df1b3000" translate="yes" xml:space="preserve">
          <source>If you are familiar with the</source>
          <target state="translated">당신이 익숙한 경우</target>
        </trans-unit>
        <trans-unit id="09b5540260d1429f031cae6d4fea34d1c0219ed0" translate="yes" xml:space="preserve">
          <source>If you are forking many processes in parallel that are all creating temporary files, you may need to reset the random number seed using srand(EXPR) in each child else all the children will attempt to walk through the same set of random file names and may well cause themselves to give up if they exceed the number of retry attempts.</source>
          <target state="translated">모든 임시 파일을 생성하는 많은 프로세스를 병렬로 포크하는 경우 각 자식에서 srand (EXPR)를 사용하여 난수 시드를 재설정해야합니다. 재시도 횟수를 초과하면 포기할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="79eaecd3ef824520bc14f0a6f551bc580fb007f0" translate="yes" xml:space="preserve">
          <source>If you are going to convert the script to a module you can use the opportunity to redesign the interface. The guidelines for module creation above include many of the issues you should consider.</source>
          <target state="translated">스크립트를 모듈로 변환하려는 경우 기회를 사용하여 인터페이스를 다시 디자인 할 수 있습니다. 위의 모듈 생성 지침에는 고려해야 할 많은 문제가 포함되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="37c8864889db08a398c2a1fd61fb5557dd86b1b1" translate="yes" xml:space="preserve">
          <source>If you are going to put something onto the Perl stack, you need to know where to put it. This is the purpose of the macro &lt;code&gt;dSP&lt;/code&gt; --it declares and initializes a</source>
          <target state="translated">Perl 스택에 무언가를 넣으려면 어디에 놓아야하는지 알아야합니다. 이것은 매크로 &lt;code&gt;dSP&lt;/code&gt; 의 목적입니다. 선언하고 초기화합니다.</target>
        </trans-unit>
        <trans-unit id="0cf3f133791811ca9201975358ebf1e226d3c50a" translate="yes" xml:space="preserve">
          <source>If you are going to use the HP DCE package, the library used for threading is /usr/lib/libcma.sl, but there have been multiple updates of that library over time. Perl will build with the first version, but it will not pass the test suite. Older Oracle versions might be a compelling reason not to update that library, otherwise please find a newer version in one of the following patches: PHSS_19739, PHSS_20608, or PHSS_23672</source>
          <target state="translated">HP DCE 패키지를 사용하려는 경우 스레딩에 사용되는 라이브러리는 /usr/lib/libcma.sl이지만 시간이 지남에 따라 해당 라이브러리가 여러 번 업데이트되었습니다. Perl은 첫 번째 버전으로 빌드되지만 테스트 스위트를 통과하지는 않습니다. 이전 Oracle 버전은 해당 라이브러리를 업데이트하지 않는 강력한 이유 일 수 있습니다. 그렇지 않으면 PHSS_19739, PHSS_20608 또는 PHSS_23672 패치 중 하나에서 최신 버전을 찾으십시오.</target>
        </trans-unit>
        <trans-unit id="330882464199f1a0851acc4b79e3a966cdc91c15" translate="yes" xml:space="preserve">
          <source>If you are going to use this method you have to be aware of a possible memory leak which can arise under very specific circumstances. To explain these circumstances you need to know a bit about the flow of control between Perl and the callback routine.</source>
          <target state="translated">이 방법을 사용하려면 매우 특정한 상황에서 발생할 수있는 메모리 누수를 알고 있어야합니다. 이러한 상황을 설명하려면 Perl과 콜백 루틴 사이의 제어 흐름에 대해 약간 알아야합니다.</target>
        </trans-unit>
        <trans-unit id="91073f8278c247bf05c5742a59e2d0906bf12cbd" translate="yes" xml:space="preserve">
          <source>If you are going to write a platform specific MM package, please try to limit the necessary overrides to primitive methods, and if it is not possible to do so, let's work out how to achieve that gain.</source>
          <target state="translated">플랫폼 별 MM 패키지를 작성하려는 경우 필요한 대체를 기본 메소드로 제한하십시오. 그렇게 할 수없는 경우 해당 이득을 달성하는 방법을 알아 봅시다.</target>
        </trans-unit>
        <trans-unit id="3470649433d76902fec9be392ea404a581213006" translate="yes" xml:space="preserve">
          <source>If you are having trouble with square brackets then consider switching your rlogin or telnet client. Try to avoid older 3270 emulators and ISHELL for working with Perl on USS.</source>
          <target state="translated">대괄호에 문제가있는 경우 rlogin 또는 telnet 클라이언트 전환을 고려하십시오. USS에서 Perl과 함께 작업 할 때 구형 3270 에뮬레이터와 ISHELL을 피하십시오.</target>
        </trans-unit>
        <trans-unit id="be777d0c50e7b77da7283f3ff8a7e540b7f7344c" translate="yes" xml:space="preserve">
          <source>If you are in any doubt about the license situation, contact either the Berkeley DB authors or the author of DB_File. See &lt;a href=&quot;#AUTHOR&quot;&gt;AUTHOR&lt;/a&gt; for details.</source>
          <target state="translated">라이센스 상황이 확실하지 않은 경우 Berkeley DB 작성자 또는 DB_File 작성자에게 문의하십시오. 자세한 내용은 &lt;a href=&quot;#AUTHOR&quot;&gt;저자&lt;/a&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="99320978b9537887ebc85e1dfd4bdf0910cbc812" translate="yes" xml:space="preserve">
          <source>If you are in doubt which package contains a file you are missing, try to find an installation that has that file. Then do a</source>
          <target state="translated">누락 된 파일이 들어있는 패키지가 확실하지 않은 경우 해당 파일이있는 설치를 찾으십시오. 그런 다음</target>
        </trans-unit>
        <trans-unit id="92276bc0e44e1b658a5288e18f73cfbd284b63bb" translate="yes" xml:space="preserve">
          <source>If you are intending to manipulate bitstrings, be certain that you're supplying bitstrings: If an operand is a number, that will imply a &lt;b&gt;numeric&lt;/b&gt; bitwise operation. You may explicitly show which type of operation you intend by using &lt;code&gt;&quot;&quot;&lt;/code&gt; or &lt;code&gt;0+&lt;/code&gt; , as in the examples below.</source>
          <target state="translated">비트 스트링을 조작하려는 경우 비트 스트링을 제공하고 있는지 확인하십시오. 피연산자가 &lt;b&gt;숫자 인&lt;/b&gt; 경우 &lt;b&gt;숫자&lt;/b&gt; 비트 연산을 의미 합니다. 아래 예와 같이 &lt;code&gt;&quot;&quot;&lt;/code&gt; 또는 &lt;code&gt;0+&lt;/code&gt; 를 사용하여 원하는 작업 유형을 명시 적으로 표시 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="a0e74d8ccd8d67f221dc38d69397982438ef8887" translate="yes" xml:space="preserve">
          <source>If you are interested in the guts underlying these systems, check out &lt;a href=&quot;perlobj&quot;&gt;perlobj&lt;/a&gt;.</source>
          <target state="translated">이 시스템의 기본 내장에 관심이 있으시면 &lt;a href=&quot;perlobj&quot;&gt;perlobj를&lt;/a&gt; 확인하십시오 .</target>
        </trans-unit>
        <trans-unit id="f81bce975381ffe867c89af365021d38913e30eb" translate="yes" xml:space="preserve">
          <source>If you are interested in the z/OS (formerly known as OS/390) and POSIX-BC (BS2000) ports of Perl then see the perl-mvs mailing list. To subscribe, send an empty message to perl-mvs-subscribe@perl.org.</source>
          <target state="translated">Perl의 z / OS (이전의 OS / 390) 및 POSIX-BC (BS2000) 포트에 관심이있는 경우 perl-mvs 메일 링리스트를 참조하십시오. 가입하려면 빈 메시지를 perl-mvs-subscribe@perl.org로 보내십시오.</target>
        </trans-unit>
        <trans-unit id="38d9bbb97bd39f15f79a0ad6f3bd53d77bb54ef1" translate="yes" xml:space="preserve">
          <source>If you are looking for a &quot;bar&quot; that isn't preceded by a &quot;foo&quot;, &lt;code&gt;/(?!foo)bar/&lt;/code&gt; will not do what you want. That's because the &lt;code&gt;(?!foo)&lt;/code&gt; is just saying that the next thing cannot be &quot;foo&quot;--and it's not, it's a &quot;bar&quot;, so &quot;foobar&quot; will match. Use look-behind instead (see below).</source>
          <target state="translated">앞에 &quot;foo&quot;가없는 &quot;bar&quot;를 찾는 경우 &lt;code&gt;/(?!foo)bar/&lt;/code&gt; 는 원하는 작업을 수행하지 않습니다. 그것은 &lt;code&gt;(?!foo)&lt;/code&gt; 가 단지 다음 것은 &quot;foo&quot;가 될 수 없다고 말하고 있기 때문입니다. 그리고 &quot;bar&quot;가 아니기 때문에 &quot;foobar&quot;는 일치합니다. 대신 숨김을 사용하십시오 (아래 참조).</target>
        </trans-unit>
        <trans-unit id="f20427718038bfba8c53137f8646eb9abfc2ff46" translate="yes" xml:space="preserve">
          <source>If you are looking for a class that does everything for you you don't define yourself, use the &lt;code&gt;Tie::StdScalar&lt;/code&gt; class, not the &lt;code&gt;Tie::Scalar&lt;/code&gt; one.</source>
          <target state="translated">스스로 정의하지 않은 모든 것을 수행하는 클래스를 찾고 있다면 &lt;code&gt;Tie::Scalar&lt;/code&gt; 클래스가 아닌 &lt;code&gt;Tie::StdScalar&lt;/code&gt; 클래스를 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="7787fb3feb00a627232c8ef4ce3954c9d7deed73" translate="yes" xml:space="preserve">
          <source>If you are looking for a table of contents to the Perl library modules documentation, see the &lt;a href=&quot;http://search.cpan.org/perldoc/perltoc&quot;&gt;perltoc&lt;/a&gt; page.</source>
          <target state="translated">Perl 라이브러리 모듈 문서의 목차를 찾으 &lt;a href=&quot;http://search.cpan.org/perldoc/perltoc&quot;&gt;려면 perltoc&lt;/a&gt; 페이지를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="3fac826063cfc00ef4ae02f7626b0848d723ad5d" translate="yes" xml:space="preserve">
          <source>If you are looking for an example, I recommend that you look at the simple example in the Memoize::Expire documentation, or at the code for Memoize::Expire itself.</source>
          <target state="translated">예제를 찾고 있다면 Memoize :: Expire 문서 또는 Memoize :: Expire 자체의 코드에서 간단한 예제를 보는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="b33652a525614ae7d89321a43fb11331d7e5b6fa" translate="yes" xml:space="preserve">
          <source>If you are making use of the Perl stack pointer in your code you must always refresh the local copy using SPAGAIN whenever you make use of the</source>
          <target state="translated">코드에서 Perl 스택 포인터를 사용하는 경우 항상 SPAGAIN을 사용하여 로컬 사본을 새로 고쳐야합니다.</target>
        </trans-unit>
        <trans-unit id="0468c5bae6319f4655b5720508b9d190b598ea2a" translate="yes" xml:space="preserve">
          <source>If you are on a Unix-like system, you might be able to get away with a system call where you put an &lt;code&gt;&amp;amp;&lt;/code&gt; on the end of the command:</source>
          <target state="translated">유닉스 계열 시스템을 사용하는 경우 명령 끝에 &lt;code&gt;&amp;amp;&lt;/code&gt; 를 입력하면 시스템 호출을 피할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="74fb92ccab7935bd1e0cc2c8300a7bef29eb75de" translate="yes" xml:space="preserve">
          <source>If you are on a non-UNIX platform &lt;b&gt;perldoc&lt;/b&gt;&lt;a href=&quot;perlport&quot;&gt;perlport&lt;/a&gt;, as some features may be unimplemented or work differently.</source>
          <target state="translated">비 UNIX 플랫폼 &lt;b&gt;perldoc &lt;/b&gt;&lt;a href=&quot;perlport&quot;&gt;perlport&lt;/a&gt; 에있는 경우 일부 기능이 구현되지 않거나 다르게 작동 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5f59ff52a71652ecb89231c85ecae2ce17688eb9" translate="yes" xml:space="preserve">
          <source>If you are on a system that correctly implements &lt;code&gt;&lt;a href=&quot;functions/flock&quot;&gt;flock&lt;/a&gt;&lt;/code&gt; and you use the example appending code from &quot;perldoc -f flock&quot; everything will be OK even if the OS you are on doesn't implement append mode correctly (if such a system exists). So if you are happy to restrict yourself to OSs that implement &lt;code&gt;&lt;a href=&quot;functions/flock&quot;&gt;flock&lt;/a&gt;&lt;/code&gt; (and that's not really much of a restriction) then that is what you should do.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/flock&quot;&gt;flock&lt;/a&gt;&lt;/code&gt; 을 올바르게 구현하는 시스템에 있고 &quot;perldoc -f flock&quot;의 코드를 추가하는 예제를 사용하는 경우 사용중인 OS가 추가 모드를 올바르게 구현하지 않아도 (모든 시스템이있는 경우) 모든 것이 정상입니다. 따라서 &lt;code&gt;&lt;a href=&quot;functions/flock&quot;&gt;flock&lt;/a&gt;&lt;/code&gt; 를 구현하는 OS로 자신을 제한하고 싶다면 (그다지 제한되지는 않습니다) 그렇게해야합니다.</target>
        </trans-unit>
        <trans-unit id="54d7fa3e38420fc843370b116c9be081ea5603e0" translate="yes" xml:space="preserve">
          <source>If you are only exporting function names it is recommended to omit the ampersand, as the implementation is faster this way.</source>
          <target state="translated">함수 이름 만 내보내는 경우 구현 속도가 빠르므로 앰퍼샌드를 생략하는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="2de91fd61e5dabce87e62b432c1af2d2e0384486" translate="yes" xml:space="preserve">
          <source>If you are overriding any of these methods in your Makefile.PL (in the MY class), please report that to the makemaker mailing list. We are trying to minimize the necessary method overrides and switch to data driven Makefile.PLs wherever possible. In the long run less methods will be overridable via the MY class.</source>
          <target state="translated">MY 클래스의 Makefile.PL에서 이러한 메소드를 재정의하는 경우 해당 메소드를 makemaker 메일 링리스트에보고하십시오. 필요한 메소드 재정의를 최소화하고 가능한 경우 데이터 구동 Makefile.PL로 전환하려고합니다. 장기적으로는 MY 클래스를 통해 더 적은 메서드를 재정의 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="25095e5b9b6ab11015f95ba50809b8be1a58758d" translate="yes" xml:space="preserve">
          <source>If you are particularly interested in customizing this module's output even more, see the source and/or write to me.</source>
          <target state="translated">특히이 모듈의 출력을 사용자 정의하는 데 관심이 있으시면 소스를 참조하거나 저에게 문의하십시오.</target>
        </trans-unit>
        <trans-unit id="d40865e3f4f814dc75edbc20fbc8762037c6c824" translate="yes" xml:space="preserve">
          <source>If you are printing IVs, UVs, or NVS instead of the stdio(3) style formatting codes like &lt;code&gt;%d&lt;/code&gt; , &lt;code&gt;%ld&lt;/code&gt; , &lt;code&gt;%f&lt;/code&gt; , you should use the following macros for portability</source>
          <target state="translated">&lt;code&gt;%d&lt;/code&gt; , &lt;code&gt;%ld&lt;/code&gt; , &lt;code&gt;%f&lt;/code&gt; 와 같은 stdio (3) 스타일 형식화 코드 대신 IV, UV 또는 NVS를 인쇄하는 경우 이식성을 위해 다음 매크로를 사용해야합니다</target>
        </trans-unit>
        <trans-unit id="b082a380f246d61dd682cd511f2ea77809e32735" translate="yes" xml:space="preserve">
          <source>If you are printing addresses of pointers, use UVxf combined with PTR2UV(), do not use %lx or %p.</source>
          <target state="translated">포인터의 주소를 인쇄하는 경우 PTR2UV ()와 함께 UVxf를 사용하고 % lx 또는 % p를 사용하지 마십시오.</target>
        </trans-unit>
        <trans-unit id="b6f4ed221243b9dde4f0f2cc29b067e485bbf822" translate="yes" xml:space="preserve">
          <source>If you are reading this documentation, looking for a replacement for the &lt;code&gt;FileHandle&lt;/code&gt; package, then I suggest you read the documentation for &lt;code&gt;IO::File&lt;/code&gt; too.</source>
          <target state="translated">이 문서를 읽고 &lt;code&gt;FileHandle&lt;/code&gt; 패키지 의 대체물을 찾고 있다면 &lt;code&gt;IO::File&lt;/code&gt; 대한 문서도 읽는 것이 좋습니다 .</target>
        </trans-unit>
        <trans-unit id="8c40246fed4e0a31f96c46a72d0a85e56bbe29c3" translate="yes" xml:space="preserve">
          <source>If you are reading this in the future then it's possible that the state of the art has changed. We recommend you start by reading the perlootut document in the latest stable release of Perl, rather than this version.</source>
          <target state="translated">미래에 이것을 읽으면 최신 기술이 변경되었을 수 있습니다. 이 버전이 아닌 최신 Perl 릴리스에서 perlootut 문서를 읽는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="d0add6c557074aa94dbce442362b0e5da76c5396" translate="yes" xml:space="preserve">
          <source>If you are running Perl 5.005 or better the object, &lt;code&gt;$z&lt;/code&gt; , returned from IO::Compress::Bzip2 can be used exactly like an &lt;a href=&quot;../file&quot;&gt;IO::File&lt;/a&gt; filehandle. This means that all normal output file operations can be carried out with &lt;code&gt;$z&lt;/code&gt; . For example, to write to a compressed file/buffer you can use either of these forms</source>
          <target state="translated">Perl 5.005 이상을 실행중인 경우 IO :: Compress :: Bzip2에서 리턴 된 오브젝트 &lt;code&gt;$z&lt;/code&gt; 는 &lt;a href=&quot;../file&quot;&gt;IO :: File 파일&lt;/a&gt; 핸들 과 동일하게 사용할 수 있습니다 . 이는 모든 일반 출력 파일 작업이 &lt;code&gt;$z&lt;/code&gt; 로 수행 될 수 있음을 의미합니다 . 예를 들어 압축 파일 / 버퍼에 쓰려면 다음 형식 중 하나를 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b7e4df4e4f27db0bf9a46e2a1941e85758d61068" translate="yes" xml:space="preserve">
          <source>If you are running Perl 5.005 or better the object, &lt;code&gt;$z&lt;/code&gt; , returned from IO::Compress::Deflate can be used exactly like an &lt;a href=&quot;../file&quot;&gt;IO::File&lt;/a&gt; filehandle. This means that all normal output file operations can be carried out with &lt;code&gt;$z&lt;/code&gt; . For example, to write to a compressed file/buffer you can use either of these forms</source>
          <target state="translated">Perl 5.005 이상을 실행중인 경우 IO :: Compress :: Deflate에서 리턴 된 &lt;code&gt;$z&lt;/code&gt; 오브젝트 는 &lt;a href=&quot;../file&quot;&gt;IO :: File 파일&lt;/a&gt; 핸들 과 동일하게 사용할 수 있습니다 . 이는 모든 일반 출력 파일 작업이 &lt;code&gt;$z&lt;/code&gt; 로 수행 될 수 있음을 의미합니다 . 예를 들어 압축 파일 / 버퍼에 쓰려면 다음 형식 중 하나를 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="41e65ffc69fed189ecd525fba0988f92db4e7035" translate="yes" xml:space="preserve">
          <source>If you are running Perl 5.005 or better the object, &lt;code&gt;$z&lt;/code&gt; , returned from IO::Compress::Gzip can be used exactly like an &lt;a href=&quot;../file&quot;&gt;IO::File&lt;/a&gt; filehandle. This means that all normal output file operations can be carried out with &lt;code&gt;$z&lt;/code&gt; . For example, to write to a compressed file/buffer you can use either of these forms</source>
          <target state="translated">Perl 5.005 이상을 실행중인 경우 IO :: Compress :: Gzip에서 리턴 된 오브젝트 &lt;code&gt;$z&lt;/code&gt; 는 &lt;a href=&quot;../file&quot;&gt;IO :: File 파일&lt;/a&gt; 핸들 과 동일하게 사용할 수 있습니다 . 이는 모든 일반 출력 파일 작업이 &lt;code&gt;$z&lt;/code&gt; 로 수행 될 수 있음을 의미합니다 . 예를 들어 압축 파일 / 버퍼에 쓰려면 다음 형식 중 하나를 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c6b6ef257ae9881b6bd3fd8eaa22b1a4c05c99ca" translate="yes" xml:space="preserve">
          <source>If you are running Perl 5.005 or better the object, &lt;code&gt;$z&lt;/code&gt; , returned from IO::Compress::RawDeflate can be used exactly like an &lt;a href=&quot;../file&quot;&gt;IO::File&lt;/a&gt; filehandle. This means that all normal output file operations can be carried out with &lt;code&gt;$z&lt;/code&gt; . For example, to write to a compressed file/buffer you can use either of these forms</source>
          <target state="translated">Perl 5.005 이상을 실행중인 경우 IO :: Compress :: RawDeflate에서 리턴 된 &lt;code&gt;$z&lt;/code&gt; 오브젝트 는 &lt;a href=&quot;../file&quot;&gt;IO :: File 파일&lt;/a&gt; 핸들 과 동일하게 사용할 수 있습니다 . 이는 모든 일반 출력 파일 작업이 &lt;code&gt;$z&lt;/code&gt; 로 수행 될 수 있음을 의미합니다 . 예를 들어 압축 파일 / 버퍼에 쓰려면 다음 형식 중 하나를 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3c423a94c7fc5cb61812044d70c6c094354f683a" translate="yes" xml:space="preserve">
          <source>If you are running Perl 5.005 or better the object, &lt;code&gt;$z&lt;/code&gt; , returned from IO::Compress::Zip can be used exactly like an &lt;a href=&quot;../file&quot;&gt;IO::File&lt;/a&gt; filehandle. This means that all normal output file operations can be carried out with &lt;code&gt;$z&lt;/code&gt; . For example, to write to a compressed file/buffer you can use either of these forms</source>
          <target state="translated">Perl 5.005 이상을 실행중인 경우 IO :: Compress :: Zip에서 리턴 된 &lt;code&gt;$z&lt;/code&gt; 오브젝트 는 &lt;a href=&quot;../file&quot;&gt;IO :: File 파일&lt;/a&gt; 핸들 과 동일하게 사용할 수 있습니다 . 이는 모든 일반 출력 파일 작업이 &lt;code&gt;$z&lt;/code&gt; 로 수행 될 수 있음을 의미합니다 . 예를 들어 압축 파일 / 버퍼에 쓰려면 다음 형식 중 하나를 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5fea5722273a1695c99b2d6f3f73bb1257cd24c3" translate="yes" xml:space="preserve">
          <source>If you are running Perl 5.005 or better the object, &lt;code&gt;$z&lt;/code&gt; , returned from IO::Uncompress::AnyInflate can be used exactly like an &lt;a href=&quot;../file&quot;&gt;IO::File&lt;/a&gt; filehandle. This means that all normal input file operations can be carried out with &lt;code&gt;$z&lt;/code&gt; . For example, to read a line from a compressed file/buffer you can use either of these forms</source>
          <target state="translated">Perl 5.005 이상을 실행중인 경우 IO :: Uncompress :: AnyInflate에서 리턴 된 &lt;code&gt;$z&lt;/code&gt; 오브젝트 는 &lt;a href=&quot;../file&quot;&gt;IO :: File 파일&lt;/a&gt; 핸들 과 동일하게 사용할 수 있습니다 . 이는 모든 일반 입력 파일 조작이 &lt;code&gt;$z&lt;/code&gt; 로 수행 될 수 있음을 의미합니다 . 예를 들어, 압축 파일 / 버퍼에서 행을 읽으려면 다음 형식 중 하나를 사용할 수 있습니다</target>
        </trans-unit>
        <trans-unit id="b2972d5cdbb1eb98b989631b3ded397e40e59e75" translate="yes" xml:space="preserve">
          <source>If you are running Perl 5.005 or better the object, &lt;code&gt;$z&lt;/code&gt; , returned from IO::Uncompress::AnyUncompress can be used exactly like an &lt;a href=&quot;../file&quot;&gt;IO::File&lt;/a&gt; filehandle. This means that all normal input file operations can be carried out with &lt;code&gt;$z&lt;/code&gt; . For example, to read a line from a compressed file/buffer you can use either of these forms</source>
          <target state="translated">Perl 5.005 이상을 실행중인 경우 IO :: Uncompress :: AnyUncompress에서 리턴 된 &lt;code&gt;$z&lt;/code&gt; 오브젝트 는 &lt;a href=&quot;../file&quot;&gt;IO :: File 파일&lt;/a&gt; 핸들 과 동일하게 사용할 수 있습니다 . 이는 모든 일반 입력 파일 조작이 &lt;code&gt;$z&lt;/code&gt; 로 수행 될 수 있음을 의미합니다 . 예를 들어, 압축 파일 / 버퍼에서 행을 읽으려면 다음 형식 중 하나를 사용할 수 있습니다</target>
        </trans-unit>
        <trans-unit id="18aa1921698d337e93a7e4edaa2b66e95de457bf" translate="yes" xml:space="preserve">
          <source>If you are running Perl 5.005 or better the object, &lt;code&gt;$z&lt;/code&gt; , returned from IO::Uncompress::Bunzip2 can be used exactly like an &lt;a href=&quot;../file&quot;&gt;IO::File&lt;/a&gt; filehandle. This means that all normal input file operations can be carried out with &lt;code&gt;$z&lt;/code&gt; . For example, to read a line from a compressed file/buffer you can use either of these forms</source>
          <target state="translated">Perl 5.005 이상을 실행중인 경우 IO :: Uncompress :: Bunzip2에서 리턴 된 오브젝트 &lt;code&gt;$z&lt;/code&gt; 는 &lt;a href=&quot;../file&quot;&gt;IO :: File 파일&lt;/a&gt; 핸들 과 동일하게 사용할 수 있습니다 . 이는 모든 일반 입력 파일 조작이 &lt;code&gt;$z&lt;/code&gt; 로 수행 될 수 있음을 의미합니다 . 예를 들어, 압축 파일 / 버퍼에서 행을 읽으려면 다음 형식 중 하나를 사용할 수 있습니다</target>
        </trans-unit>
        <trans-unit id="f86eb994b5def7f39f87b382b570ded31372309e" translate="yes" xml:space="preserve">
          <source>If you are running Perl 5.005 or better the object, &lt;code&gt;$z&lt;/code&gt; , returned from IO::Uncompress::Gunzip can be used exactly like an &lt;a href=&quot;../file&quot;&gt;IO::File&lt;/a&gt; filehandle. This means that all normal input file operations can be carried out with &lt;code&gt;$z&lt;/code&gt; . For example, to read a line from a compressed file/buffer you can use either of these forms</source>
          <target state="translated">Perl 5.005 이상을 실행중인 경우 IO :: Uncompress :: Gunzip에서 리턴 된 오브젝트 &lt;code&gt;$z&lt;/code&gt; 는 &lt;a href=&quot;../file&quot;&gt;IO :: File 파일&lt;/a&gt; 핸들 과 동일하게 사용할 수 있습니다 . 이는 모든 일반 입력 파일 조작이 &lt;code&gt;$z&lt;/code&gt; 로 수행 될 수 있음을 의미합니다 . 예를 들어, 압축 파일 / 버퍼에서 행을 읽으려면 다음 형식 중 하나를 사용할 수 있습니다</target>
        </trans-unit>
        <trans-unit id="05ab40d4db9fa577fb79380b48870abe52f5c6be" translate="yes" xml:space="preserve">
          <source>If you are running Perl 5.005 or better the object, &lt;code&gt;$z&lt;/code&gt; , returned from IO::Uncompress::Inflate can be used exactly like an &lt;a href=&quot;../file&quot;&gt;IO::File&lt;/a&gt; filehandle. This means that all normal input file operations can be carried out with &lt;code&gt;$z&lt;/code&gt; . For example, to read a line from a compressed file/buffer you can use either of these forms</source>
          <target state="translated">Perl 5.005 이상을 실행중인 경우 IO :: Uncompress :: Inflate에서 리턴 된 &lt;code&gt;$z&lt;/code&gt; 오브젝트 는 &lt;a href=&quot;../file&quot;&gt;IO :: File 파일&lt;/a&gt; 핸들 과 동일하게 사용할 수 있습니다 . 이는 모든 일반 입력 파일 조작이 &lt;code&gt;$z&lt;/code&gt; 로 수행 될 수 있음을 의미합니다 . 예를 들어, 압축 파일 / 버퍼에서 행을 읽으려면 다음 형식 중 하나를 사용할 수 있습니다</target>
        </trans-unit>
        <trans-unit id="d70a4ecbd7bb1c964123dba102fe8a49b561cb00" translate="yes" xml:space="preserve">
          <source>If you are running Perl 5.005 or better the object, &lt;code&gt;$z&lt;/code&gt; , returned from IO::Uncompress::RawInflate can be used exactly like an &lt;a href=&quot;../file&quot;&gt;IO::File&lt;/a&gt; filehandle. This means that all normal input file operations can be carried out with &lt;code&gt;$z&lt;/code&gt; . For example, to read a line from a compressed file/buffer you can use either of these forms</source>
          <target state="translated">Perl 5.005 이상을 실행중인 경우 IO :: Uncompress :: RawInflate에서 리턴 된 오브젝트 &lt;code&gt;$z&lt;/code&gt; 는 &lt;a href=&quot;../file&quot;&gt;IO :: File 파일&lt;/a&gt; 핸들 과 동일하게 사용할 수 있습니다 . 이는 모든 일반 입력 파일 조작이 &lt;code&gt;$z&lt;/code&gt; 로 수행 될 수 있음을 의미합니다 . 예를 들어, 압축 파일 / 버퍼에서 행을 읽으려면 다음 형식 중 하나를 사용할 수 있습니다</target>
        </trans-unit>
        <trans-unit id="3608890b582bffd465c544ac9e831ad2b06501a0" translate="yes" xml:space="preserve">
          <source>If you are running Perl 5.005 or better the object, &lt;code&gt;$z&lt;/code&gt; , returned from IO::Uncompress::Unzip can be used exactly like an &lt;a href=&quot;../file&quot;&gt;IO::File&lt;/a&gt; filehandle. This means that all normal input file operations can be carried out with &lt;code&gt;$z&lt;/code&gt; . For example, to read a line from a compressed file/buffer you can use either of these forms</source>
          <target state="translated">Perl 5.005 이상을 실행중인 경우 IO :: Uncompress :: Unzip에서 리턴 된 &lt;code&gt;$z&lt;/code&gt; 오브젝트 는 &lt;a href=&quot;../file&quot;&gt;IO :: File 파일&lt;/a&gt; 핸들 과 동일하게 사용할 수 있습니다 . 이는 모든 일반 입력 파일 조작이 &lt;code&gt;$z&lt;/code&gt; 로 수행 될 수 있음을 의미합니다 . 예를 들어, 압축 파일 / 버퍼에서 행을 읽으려면 다음 형식 중 하나를 사용할 수 있습니다</target>
        </trans-unit>
        <trans-unit id="89f53b731da5c3618fcf6d87c9434da7f9ed2f65" translate="yes" xml:space="preserve">
          <source>If you are running Perl 5.6.0 or better, the &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; warnings&lt;/code&gt; pragma allows fine control of what warnings are produced. See &lt;a href=&quot;perllexwarn&quot;&gt;perllexwarn&lt;/a&gt; for more details.</source>
          <target state="translated">Perl 5.6.0 이상을 실행중인 경우 &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; warnings&lt;/code&gt; pragma를 통해 생성되는 경고를 세부적으로 제어 할 수 있습니다. 자세한 내용은 &lt;a href=&quot;perllexwarn&quot;&gt;perllexwarn&lt;/a&gt; 을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="af8514c8e63d77882efdff2789324ce75a2c20f4" translate="yes" xml:space="preserve">
          <source>If you are running VOS Release 14.4.1 or later, you can obtain a pre-compiled, supported copy of perl by purchasing the GNU Tools product from Stratus Technologies.</source>
          <target state="translated">VOS 릴리스 14.4.1 이상을 실행중인 경우 Stratus Technologies에서 GNU Tools 제품을 구입하여 사전 컴파일되고 지원되는 perl 사본을 얻을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="90113b08f2e5803b4f4fa9119cc6038c86b7bb42" translate="yes" xml:space="preserve">
          <source>If you are running a Unix derivative this value defaults to</source>
          <target state="translated">Unix 파생 상품을 실행중인 경우이 값의 기본값은</target>
        </trans-unit>
        <trans-unit id="ae421a254aed7ffd059cb6be52110578a85cd308" translate="yes" xml:space="preserve">
          <source>If you are running experiments with embedding perl as a library into other applications, you might find MakeMaker is not sufficient. You'd better have a look at ExtUtils::Embed which is a collection of utilities for embedding.</source>
          <target state="translated">Perl을 라이브러리로 다른 응용 프로그램에 임베드 한 실험을 실행중인 경우 MakeMaker가 충분하지 않을 수 있습니다. 임베드 용 유틸리티 모음 인 ExtUtils :: Embed를 살펴 보는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="743cbf656ee357233b7747fd85635a26f54ae749" translate="yes" xml:space="preserve">
          <source>If you are running the tests from a emacs shell window, you may see failures in op/stat.t. Run &quot;dmake test-notty&quot; in that case.</source>
          <target state="translated">emacs 쉘 ​​창에서 테스트를 실행중인 경우 op / stat.t에 실패가 표시 될 수 있습니다. 이 경우 &quot;dmake test-notty&quot;를 실행하십시오.</target>
        </trans-unit>
        <trans-unit id="eb661707e45d0fa6207ff65030fca0e35ac953eb" translate="yes" xml:space="preserve">
          <source>If you are running under &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; strict&lt;/code&gt; (and if you aren't, why in the world aren't you?), you'll have to add some declarations to make it happy:</source>
          <target state="translated">당신이에서 실행중인 경우 &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; strict&lt;/code&gt; (? 당신이하지 않은 경우, 왜 세상에서 당신이 아닌), 당신은 행복하게하는 몇 가지 선언을 추가해야합니다 :</target>
        </trans-unit>
        <trans-unit id="767de91007776d2ff4bd67fc3c5e04ab7cebdfa3" translate="yes" xml:space="preserve">
          <source>If you are seeing spaces between the elements of your array when you print the array, you are probably interpolating the array in double quotes:</source>
          <target state="translated">배열을 인쇄 할 때 배열 요소 사이에 공백이 있으면 배열을 큰 따옴표로 보간하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="16bb00dc57c212c5f89aeced92e2138d70407e36" translate="yes" xml:space="preserve">
          <source>If you are stuck with older Perls, you can do Unicode with the &lt;a href=&quot;http://search.cpan.org/perldoc/Unicode::String&quot;&gt;Unicode::String&lt;/a&gt; module, and character conversions using the &lt;a href=&quot;http://search.cpan.org/perldoc/Unicode::Map8&quot;&gt;Unicode::Map8&lt;/a&gt; and &lt;a href=&quot;http://search.cpan.org/perldoc/Unicode::Map&quot;&gt;Unicode::Map&lt;/a&gt; modules. If you are using Japanese encodings, you might try using the jperl 5.005_03.</source>
          <target state="translated">이전 Perls를 사용하는 경우 &lt;a href=&quot;http://search.cpan.org/perldoc/Unicode::String&quot;&gt;Unicode :: String&lt;/a&gt; 모듈로 &lt;a href=&quot;http://search.cpan.org/perldoc/Unicode::Map8&quot;&gt;유니 코드&lt;/a&gt; 를 수행하고 Unicode :: Map8 및 &lt;a href=&quot;http://search.cpan.org/perldoc/Unicode::Map&quot;&gt;Unicode :: Map&lt;/a&gt; 모듈을 사용하여 문자를 변환 할 수 있습니다 . 일본어 인코딩을 사용하는 경우 jperl 5.005_03을 사용해보십시오.</target>
        </trans-unit>
        <trans-unit id="a4539f5703f218245f234df49c0b9e75bd10857f" translate="yes" xml:space="preserve">
          <source>If you are submitting a code patch there are several things that you can do to help the Perl 5 Porters accept your patch.</source>
          <target state="translated">코드 패치를 제출하는 경우 Perl 5 Porter가 패치를 승인하는 데 도움이되는 몇 가지 방법이 있습니다.</target>
        </trans-unit>
        <trans-unit id="9d2ae6978c448ceee8a44a91cddc4545fb9e5c5e" translate="yes" xml:space="preserve">
          <source>If you are targetting an ARM device -- which currently includes the vast majority of phones and tablets -- you'll want to pass -Dcc=arm-unknown-nto-qnx8.0.0eabi-gcc to Configure. Alternatively, if you are targetting an x86 device, or using the simulator provided with the NDK, you should specify -Dcc=ntox86-gcc instead.</source>
          <target state="translated">현재 대다수의 휴대 전화와 태블릿을 포함하는 ARM 장치를 대상으로하는 경우 -Dcc = arm-unknown-nto-qnx8.0.0eabi-gcc를 구성에 전달하려고합니다. 또는 x86 장치를 대상으로하거나 NDK와 함께 제공된 시뮬레이터를 사용하는 경우 대신 -Dcc = ntox86-gcc를 지정해야합니다.</target>
        </trans-unit>
        <trans-unit id="c81847f52511bd6e6f2d950ba6b028d46d7fda4c" translate="yes" xml:space="preserve">
          <source>If you are testing locales (see &lt;a href=&quot;perllocale&quot;&gt;perllocale&lt;/a&gt;), there are helper functions in</source>
          <target state="translated">로케일을 테스트하는 경우 ( &lt;a href=&quot;perllocale&quot;&gt;perllocale&lt;/a&gt; 참조 )</target>
        </trans-unit>
        <trans-unit id="1005d40b52c8fba9456ef2a3b1ec6cff90f7233f" translate="yes" xml:space="preserve">
          <source>If you are testing only once, the standard module &lt;a href=&quot;list/util&quot;&gt;List::Util&lt;/a&gt; exports the function &lt;code&gt;first&lt;/code&gt; for this purpose. It works by stopping once it finds the element. It's written in C for speed, and its Perl equivalent looks like this subroutine:</source>
          <target state="translated">한 번만 테스트하는 경우 표준 모듈 &lt;a href=&quot;list/util&quot;&gt;List :: Util&lt;/a&gt; 은이 목적으로 함수를 &lt;code&gt;first&lt;/code&gt; 내 보냅니다 . 요소를 찾으면 중지하여 작동합니다. 속도를 위해 C로 작성되었으며 Perl에 해당하는 것은 다음 서브 루틴과 같습니다.</target>
        </trans-unit>
        <trans-unit id="faf3c25ab12fb420d9fdf6ea0144e15dc43f0fe2" translate="yes" xml:space="preserve">
          <source>If you are trying to use this instead of &lt;code&gt;&lt;a href=&quot;functions/write&quot;&gt;write&lt;/a&gt;&lt;/code&gt; to capture the output, you may find it easier to open a filehandle to a scalar (&lt;code&gt;&lt;a href=&quot;functions/open&quot;&gt;open&lt;/a&gt; $fh, &quot;&amp;gt;&quot;, \$output&lt;/code&gt; ) and write to that instead.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/write&quot;&gt;write&lt;/a&gt;&lt;/code&gt; 대신 이것을 사용 하여 출력을 캡처하려는 경우, 파일 핸들을 스칼라에 &lt;code&gt;&lt;a href=&quot;functions/open&quot;&gt;open&lt;/a&gt; $fh, &quot;&amp;gt;&quot;, \$output&lt;/code&gt; ) 보다 쉽게 ​​파일 핸들을 열 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="87f126d580b9d17eb9520e5adc6ebcd7b64cbce8" translate="yes" xml:space="preserve">
          <source>If you are trying to use this instead of &lt;code&gt;&lt;a href=&quot;write&quot;&gt;write&lt;/a&gt;&lt;/code&gt; to capture the output, you may find it easier to open a filehandle to a scalar (&lt;code&gt;&lt;a href=&quot;open&quot;&gt;open&lt;/a&gt; $fh, &quot;&amp;gt;&quot;, \$output&lt;/code&gt; ) and write to that instead.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;write&quot;&gt;write&lt;/a&gt;&lt;/code&gt; 대신 이것을 사용 하여 출력을 캡처하려는 경우, 파일 핸들을 스칼라에 &lt;code&gt;&lt;a href=&quot;open&quot;&gt;open&lt;/a&gt; $fh, &quot;&amp;gt;&quot;, \$output&lt;/code&gt; ) 보다 쉽게 ​​파일 핸들을 열 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="f0601abe3b8fe05fc06de5499fb9941a40db6bc0" translate="yes" xml:space="preserve">
          <source>If you are unable to send your report using &lt;b&gt;perlbug&lt;/b&gt; (most likely because your system doesn't have a way to send mail that perlbug recognizes), you may be able to use this tool to compose your report and save it to a file which you can then send to &lt;b&gt;perlbug@perl.org&lt;/b&gt; using your regular mail client.</source>
          <target state="translated">&lt;b&gt;perlbug를&lt;/b&gt; 사용하여 보고서를 보낼 수없는 경우 (시스템에 perlbug가 인식하는 메일을 보낼 수있는 방법이 없기 때문에)이 도구를 사용하여 보고서를 작성하고 파일을 저장할 수 있습니다. 그런 다음 일반 메일 클라이언트를 사용하여 &lt;b&gt;perlbug@perl.org&lt;/b&gt; 로 &lt;b&gt;보낼&lt;/b&gt; 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="dd788f693f0912cff62f6c5004a3304201e94790" translate="yes" xml:space="preserve">
          <source>If you are used to working with a version of Perl prior to the introduction of lexically scoped warnings, or have code that uses both lexical warnings and &lt;code&gt;$^W&lt;/code&gt; , this section will describe how they interact.</source>
          <target state="translated">어휘 범위 경고를 도입하기 전에 Perl 버전 작업에 익숙하거나 어휘 경고와 &lt;code&gt;$^W&lt;/code&gt; 모두 사용하는 코드가있는 경우이 섹션에서는 이들이 상호 작용하는 방식에 대해 설명합니다.</target>
        </trans-unit>
        <trans-unit id="19c883172a7bd8c24338f9dd7a287c030969e4c2" translate="yes" xml:space="preserve">
          <source>If you are using &lt;a href=&quot;io/handle&quot;&gt;IO::Handle&lt;/a&gt; or one of its subclasses, you can call the &lt;code&gt;autoflush&lt;/code&gt; method to change the settings of the filehandle:</source>
          <target state="translated">당신이 사용하는 경우 &lt;a href=&quot;io/handle&quot;&gt;IO :: 핸들&lt;/a&gt; 또는 그 서브 클래스 중 하나를, 당신은 호출 할 수 &lt;code&gt;autoflush&lt;/code&gt; 파일 핸들의 설정을 변경하는 방법 :</target>
        </trans-unit>
        <trans-unit id="66ca3a901cfd38d2b33b77415f58b3c173825a91" translate="yes" xml:space="preserve">
          <source>If you are using &lt;code&gt;HePV&lt;/code&gt; to get values to pass to &lt;code&gt;newSVpvn()&lt;/code&gt; to create a new SV, you should consider using &lt;code&gt;newSVhek(HeKEY_hek(he))&lt;/code&gt; as it is more efficient.</source>
          <target state="translated">새 SV를 작성 하기 위해 &lt;code&gt;HePV&lt;/code&gt; 를 사용하여 newSVpvn &lt;code&gt;newSVpvn()&lt;/code&gt; 에 전달할 값을 얻는 경우 &lt;code&gt;newSVhek(HeKEY_hek(he))&lt;/code&gt; 를 사용하는 것이 더 효율적이므로 고려해야 합니다.</target>
        </trans-unit>
        <trans-unit id="987d668924ef21e965c8815374cd5ece61317689" translate="yes" xml:space="preserve">
          <source>If you are using &lt;code&gt;nanosleep&lt;/code&gt; for something else than mixing sleeping with signals, give some thought to whether Perl is the tool you should be using for work requiring nanosecond accuracies.</source>
          <target state="translated">수면과 신호를 혼합하는 것 이외의 용도로 &lt;code&gt;nanosleep&lt;/code&gt; 을 사용하는 경우 Perl이 나노초 정확도가 필요한 작업에 사용해야하는 도구인지 여부를 고려하십시오.</target>
        </trans-unit>
        <trans-unit id="f9a45f762f42b66675541c22b88f50402f53057c" translate="yes" xml:space="preserve">
          <source>If you are using ACLs, there is a pragma called &lt;code&gt;filetest&lt;/code&gt; that may produce more accurate results than the bare stat() mode bits. When under &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; filetest 'access'&lt;/code&gt; the above-mentioned filetests test whether the permission can(not) be granted using the access(2) family of system calls. Also note that the &lt;code&gt;-x&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;functions/-x&quot;&gt;-X&lt;/a&gt;&lt;/code&gt; may under this pragma return true even if there are no execute permission bits set (nor any extra execute permission ACLs). This strangeness is due to the underlying system calls' definitions. Note also that, due to the implementation of &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; filetest 'access'&lt;/code&gt; , the &lt;code&gt;_&lt;/code&gt; special filehandle won't cache the results of the file tests when this pragma is in effect. Read the documentation for the &lt;code&gt;filetest&lt;/code&gt; pragma for more information.</source>
          <target state="translated">ACL을 사용하는 경우, 베어 stat () 모드 비트보다 정확한 결과를 생성 할 수있는 &lt;code&gt;filetest&lt;/code&gt; 라는 pragma 가 있습니다. 경우에 따라 &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; filetest 'access'&lt;/code&gt; 권한이 액세스 시스템 콜 (2) 제품군을 사용하여 부여 (안) 할 수 있는지 여부를 상기 filetests 테스트. 또한 &lt;code&gt;-x&lt;/code&gt; 및 &lt;code&gt;&lt;a href=&quot;functions/-x&quot;&gt;-X&lt;/a&gt;&lt;/code&gt; 는이 pragma에서 실행 권한 비트가 설정되어 있지 않거나 추가 실행 권한 ACL이없는 경우에도 true를 반환 할 수 있습니다. 이 이상한 점은 기본 시스템 호출의 정의 때문입니다. 때문에의 구현에, 또한 주 &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; filetest 'access'&lt;/code&gt; 1, &lt;code&gt;_&lt;/code&gt; 이 pragma가 적용될 때 특수 파일 핸들은 파일 테스트 결과를 캐시하지 않습니다. 자세한 내용 은 &lt;code&gt;filetest&lt;/code&gt; pragma 설명서를 읽으십시오 .</target>
        </trans-unit>
        <trans-unit id="536f259afd4833a386595561631d799b0872387d" translate="yes" xml:space="preserve">
          <source>If you are using ACLs, there is a pragma called &lt;code&gt;filetest&lt;/code&gt; that may produce more accurate results than the bare stat() mode bits. When under &lt;code&gt;&lt;a href=&quot;use&quot;&gt;use&lt;/a&gt; filetest 'access'&lt;/code&gt; the above-mentioned filetests test whether the permission can(not) be granted using the access(2) family of system calls. Also note that the &lt;code&gt;-x&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;-x&quot;&gt;-X&lt;/a&gt;&lt;/code&gt; may under this pragma return true even if there are no execute permission bits set (nor any extra execute permission ACLs). This strangeness is due to the underlying system calls' definitions. Note also that, due to the implementation of &lt;code&gt;&lt;a href=&quot;use&quot;&gt;use&lt;/a&gt; filetest 'access'&lt;/code&gt; , the &lt;code&gt;_&lt;/code&gt; special filehandle won't cache the results of the file tests when this pragma is in effect. Read the documentation for the &lt;code&gt;filetest&lt;/code&gt; pragma for more information.</source>
          <target state="translated">ACL을 사용하는 경우, 베어 stat () 모드 비트보다 정확한 결과를 생성 할 수있는 &lt;code&gt;filetest&lt;/code&gt; 라는 pragma 가 있습니다. 경우에 따라 &lt;code&gt;&lt;a href=&quot;use&quot;&gt;use&lt;/a&gt; filetest 'access'&lt;/code&gt; 권한이 액세스 시스템 콜 (2) 제품군을 사용하여 부여 (안) 할 수 있는지 여부를 상기 filetests 테스트. 또한 &lt;code&gt;-x&lt;/code&gt; 및 &lt;code&gt;&lt;a href=&quot;-x&quot;&gt;-X&lt;/a&gt;&lt;/code&gt; 는이 pragma에서 실행 권한 비트가 설정되어 있지 않거나 추가 실행 권한 ACL이없는 경우에도 true를 반환 할 수 있습니다. 이 이상한 점은 기본 시스템 호출의 정의 때문입니다. 때문에의 구현에, 또한 주 &lt;code&gt;&lt;a href=&quot;use&quot;&gt;use&lt;/a&gt; filetest 'access'&lt;/code&gt; 1, &lt;code&gt;_&lt;/code&gt; 이 pragma가 적용될 때 특수 파일 핸들은 파일 테스트 결과를 캐시하지 않습니다. 자세한 내용 은 &lt;code&gt;filetest&lt;/code&gt; pragma 설명서를 읽으십시오 .</target>
        </trans-unit>
        <trans-unit id="4cb0cc5912b1065f25576985628bc261176328a3" translate="yes" xml:space="preserve">
          <source>If you are using MacOS, the same concerns apply. MacPerl (for Classic environments) comes with a simple editor. Popular external editors are BBEdit ( &lt;a href=&quot;http://www.barebones.com/products/bbedit/&quot;&gt;http://www.barebones.com/products/bbedit/&lt;/a&gt; ) or Alpha ( &lt;a href=&quot;http://www.his.com/~jguyer/Alpha/Alpha8.html&quot;&gt;http://www.his.com/~jguyer/Alpha/Alpha8.html&lt;/a&gt; ). MacOS X users can use Unix editors as well.</source>
          <target state="translated">MacOS를 사용하는 경우 동일한 문제가 적용됩니다. MacPerl (클래식 환경 용)에는 간단한 편집기가 제공됩니다. 널리 사용되는 외부 편집기는 BBEdit ( &lt;a href=&quot;http://www.barebones.com/products/bbedit/&quot;&gt;http://www.barebones.com/products/bbedit/&lt;/a&gt; ) 또는 Alpha ( &lt;a href=&quot;http://www.his.com/~jguyer/Alpha/Alpha8.html&quot;&gt;http://www.his.com/~jguyer/Alpha/Alpha8.html&lt;/a&gt; )입니다. MacOS X 사용자는 Unix 편집기도 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="6e4548a312b12b5507979ee1df1e5c700b717005" translate="yes" xml:space="preserve">
          <source>If you are using Plack (which most frameworks do), then &lt;a href=&quot;http://search.cpan.org/perldoc/Plack::Middleware::Rewrite&quot;&gt;Plack::Middleware::Rewrite&lt;/a&gt; is worth looking at if you are migrating from Apache or have URL's you want to always redirect.</source>
          <target state="translated">Plack (대부분의 프레임 워크가 사용하는)을 사용하는 경우 &lt;a href=&quot;http://search.cpan.org/perldoc/Plack::Middleware::Rewrite&quot;&gt;Plack :: Middleware :: Rewrite&lt;/a&gt; 는 Apache에서 마이그레이션하거나 URL을 항상 리디렉션하려는 경우 살펴볼 가치가 있습니다.</target>
        </trans-unit>
        <trans-unit id="b1b08c775dc3592188f9dd4afa0190ccbb806664" translate="yes" xml:space="preserve">
          <source>If you are using Windows, you can use any editor that lets you work with plain text, such as NotePad or WordPad. Word processors, such as Microsoft Word or WordPerfect, typically do not work since they insert all sorts of behind-the-scenes information, although some allow you to save files as &quot;Text Only&quot;. You can also download text editors designed specifically for programming, such as Textpad ( &lt;a href=&quot;http://www.textpad.com/&quot;&gt;http://www.textpad.com/&lt;/a&gt; ) and UltraEdit ( &lt;a href=&quot;http://www.ultraedit.com/&quot;&gt;http://www.ultraedit.com/&lt;/a&gt; ), among others.</source>
          <target state="translated">Windows를 사용하는 경우 메모장이나 워드 패드와 같은 일반 텍스트로 작업 할 수있는 편집기를 사용할 수 있습니다. Microsoft Word 또는 WordPerfect와 같은 워드 프로세서는 일반적으로 모든 종류의 비하인드 정보를 삽입하기 때문에 작동하지 않지만 일부는 파일을 &quot;텍스트 만&quot;으로 저장할 수 있습니다. Textpad ( &lt;a href=&quot;http://www.textpad.com/&quot;&gt;http://www.textpad.com/&lt;/a&gt; ) 및 UltraEdit ( &lt;a href=&quot;http://www.ultraedit.com/&quot;&gt;http://www.ultraedit.com/&lt;/a&gt; ) 와 같이 프로그래밍을 위해 특별히 설계된 텍스트 편집기를 다운로드 할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="42b14c31c340803d7d1a8907e87c3b623cebca0d" translate="yes" xml:space="preserve">
          <source>If you are using a SOCKS firewall, you will need to compile perl and link it with the SOCKS library. This is what is normally called a 'socksified' perl. With this executable you will be able to connect to servers outside the firewall as if it were not there.</source>
          <target state="translated">SOCKS 방화벽을 사용하는 경우 perl을 컴파일하고 SOCKS 라이브러리와 링크해야합니다. 이것을 일반적으로 '양말'펄이라고합니다. 이 실행 파일을 사용하면 마치 방화벽이없는 것처럼 방화벽 외부의 서버에 연결할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="29c561106308348f3755c72923d0a263a80ca5d3" translate="yes" xml:space="preserve">
          <source>If you are using a regex here, you have to use the quotes as shown or it won't work. Also note that regex handling is tricky even for the experienced. Use this feature with caution.</source>
          <target state="translated">여기에 정규 표현식을 사용하는 경우 표시된대로 따옴표를 사용해야합니다. 그렇지 않으면 작동하지 않습니다. 또한 정규 표현식 처리는 경험이 많은 사람들에게 까다 롭습니다. 이 기능은주의해서 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="5a12a925a69a2c6041232d382cd6683ae36d2da6" translate="yes" xml:space="preserve">
          <source>If you are using a version of Perl earlier than 5.004_57, the tied array interface is quite limited. In the example script above &lt;code&gt;&lt;a href=&quot;functions/push&quot;&gt;push&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/pop&quot;&gt;pop&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/shift&quot;&gt;shift&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/unshift&quot;&gt;unshift&lt;/a&gt;&lt;/code&gt; or determining the array length will not work with a tied array.</source>
          <target state="translated">5.004_57 이전의 Perl 버전을 사용하는 경우 연결 배열 인터페이스가 상당히 제한됩니다. 위의 예제 스크립트에서 &lt;code&gt;&lt;a href=&quot;functions/push&quot;&gt;push&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;functions/pop&quot;&gt;pop&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;functions/shift&quot;&gt;shift&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;functions/unshift&quot;&gt;unshift&lt;/a&gt;&lt;/code&gt; 또는 array length 결정은 연결된 배열에서 작동하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="360a39abe6795afd63327f3e470a092ad595cbfe" translate="yes" xml:space="preserve">
          <source>If you are using cpan-mac, just drop the folder on the &lt;b&gt;installme&lt;/b&gt; droplet, and use the module.</source>
          <target state="translated">cpan-mac을 사용하는 경우, &lt;b&gt;installme&lt;/b&gt; 드롭 릿 에 폴더를 놓고 모듈을 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="1fc1c37b5a3d2067860bd9ba4aa2038972693c34" translate="yes" xml:space="preserve">
          <source>If you are using gcc, just</source>
          <target state="translated">gcc를 사용하는 경우</target>
        </trans-unit>
        <trans-unit id="8fd5d7695f8aa3649f7196f528604d5d3ae20e06" translate="yes" xml:space="preserve">
          <source>If you are using gcc, you would need to use -mcpu=v9 -m64 instead. This option is not yet supported as of gcc 2.95.2; from install/SPECIFIC in that release:</source>
          <target state="translated">gcc를 사용하는 경우 대신 -mcpu = v9 -m64를 사용해야합니다. 이 옵션은 gcc 2.95.2부터 아직 지원되지 않습니다. 해당 릴리스의 설치 / 특정에서 :</target>
        </trans-unit>
        <trans-unit id="43b374ff761647040bfef238a2f344855f86b957" translate="yes" xml:space="preserve">
          <source>If you are using locale purely for its characteristics related to things like its numeric and time formatting (and not &lt;code&gt;LC_CTYPE&lt;/code&gt; ), consider using a restricted form of the locale pragma (see &lt;a href=&quot;perllocale#The-%22use-locale%22-pragma&quot;&gt;The use locale pragma in perllocale&lt;/a&gt;) like &quot;&lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; locale ':not_characters'&lt;/code&gt; &quot;.</source>
          <target state="translated">&lt;code&gt;LC_CTYPE&lt;/code&gt; 이 아닌 숫자 및 시간 형식과 관련된 특성으로 로케일을 순수하게 사용하는 &lt;a href=&quot;perllocale#The-%22use-locale%22-pragma&quot;&gt;경우&lt;/a&gt; &quot; &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; locale ':not_characters'&lt;/code&gt; 와 같이 제한된 형식의 로케일 pragma 사용 ( perllocale에서 로케일 pragma 사용 참조)을 고려하십시오 . &quot;.</target>
        </trans-unit>
        <trans-unit id="63c7cadf9ebf06d221687f1101781684817f90c8" translate="yes" xml:space="preserve">
          <source>If you are using the DB_RECNO interface and you intend making use of &lt;code&gt;bval&lt;/code&gt; , you should check out &lt;a href=&quot;#The-'bval'-Option&quot;&gt;The 'bval' Option&lt;/a&gt;.</source>
          <target state="translated">DB_RECNO 인터페이스를 사용 &lt;code&gt;bval&lt;/code&gt; 을 사용하려는 경우 &lt;a href=&quot;#The-'bval'-Option&quot;&gt;'bval'옵션을&lt;/a&gt; 확인해야합니다 .</target>
        </trans-unit>
        <trans-unit id="9e34b95c988ef9ff5f011e4473a6842bbc8f305e" translate="yes" xml:space="preserve">
          <source>If you are using the Visual C compiler, you can get the C runtime's command line wildcard expansion built into perl binary. The resulting binary will always expand unquoted command lines, which may not be what you want if you use a shell that does that for you. The expansion done is also somewhat less powerful than the approach suggested above.</source>
          <target state="translated">Visual C 컴파일러를 사용하는 경우 perl 바이너리에 내장 된 C 런타임 명령 줄 와일드 카드 확장을 얻을 수 있습니다. 결과 바이너리는 항상 인용 부호가없는 명령 행을 확장하며,이를 위해 쉘을 사용하는 경우 원치 않을 수도 있습니다. 확장은 또한 위에서 제안한 접근법보다 다소 덜 강력합니다.</target>
        </trans-unit>
        <trans-unit id="a368c00c8ef926e64658830003081d5eb361bb8d" translate="yes" xml:space="preserve">
          <source>If you are using zlib 1.2.0 or older, &lt;code&gt;zlibCompileFlags&lt;/code&gt; will return 0.</source>
          <target state="translated">zlib 1.2.0 이상을 사용하는 경우 &lt;code&gt;zlibCompileFlags&lt;/code&gt; 는 0을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="9d19a794a39cad7420e5c34d0bb89a7b77ddba40" translate="yes" xml:space="preserve">
          <source>If you are willing to accept all the defaults run Configure with &lt;b&gt;-de&lt;/b&gt;. However, several useful customizations are available.</source>
          <target state="translated">모든 기본값을 그대로 사용하려면 Configure with &lt;b&gt;-de를&lt;/b&gt; 실행하십시오 . 그러나 몇 가지 유용한 사용자 정의가 가능합니다.</target>
        </trans-unit>
        <trans-unit id="fd5b1c2924a349d7291d8ad147e3c28043609419" translate="yes" xml:space="preserve">
          <source>If you are working with a git clone of the Perl repository, you will want to create a branch for your changes. This will make creating a proper patch much simpler. See the &lt;a href=&quot;perlgit&quot;&gt;perlgit&lt;/a&gt; for details on how to do this.</source>
          <target state="translated">Perl 저장소의 git 복제본으로 작업하는 경우 변경 사항에 대한 분기를 작성하려고합니다. 이렇게하면 적절한 패치를 만드는 것이 훨씬 간단 해집니다. 이 작업을 수행하는 방법에 대한 자세한 내용은 &lt;a href=&quot;perlgit&quot;&gt;perlgit&lt;/a&gt; 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="d3a5c5d66921962ee5d2f131da55a853da5b0930" translate="yes" xml:space="preserve">
          <source>If you are working with data you know to be valid, you can speed your code up by using the &quot;nocheck&quot; variants, &lt;code&gt;timelocal_nocheck()&lt;/code&gt; and &lt;code&gt;timegm_nocheck()&lt;/code&gt; . These variants must be explicitly imported.</source>
          <target state="translated">유효한 것으로 알고있는 데이터로 작업하는 경우 &quot;nocheck&quot;변형 인 &lt;code&gt;timelocal_nocheck()&lt;/code&gt; 및 &lt;code&gt;timegm_nocheck()&lt;/code&gt; 를 사용하여 코드 속도를 높일 수 있습니다 . 이러한 변형은 명시 적으로 가져와야합니다.</target>
        </trans-unit>
        <trans-unit id="a9fdba02c2ad23e42f49d14ef3350c451024e80f" translate="yes" xml:space="preserve">
          <source>If you are writing a module to expand an already existing set of modules, please coordinate with the author of the package. It helps if you follow the same naming scheme and module interaction scheme as the original author.</source>
          <target state="translated">기존 모듈 세트를 확장하기 위해 모듈을 작성하는 경우 패키지 작성자와상의하십시오. 원래 작성자와 동일한 이름 지정 체계 및 모듈 상호 작용 체계를 따르는 경우 도움이됩니다.</target>
        </trans-unit>
        <trans-unit id="1cd2c8d5447831e253b224430edc3070841bc27c" translate="yes" xml:space="preserve">
          <source>If you are writing a package that &lt;code&gt;AUTOLOAD&lt;/code&gt; s, consider forcing an &lt;code&gt;AUTOLOAD&lt;/code&gt; for any constants explicitly imported by other packages or which are usually used when your package is &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt;&lt;/code&gt;d.</source>
          <target state="translated">해당 패키지를 작성하는 경우 &lt;code&gt;AUTOLOAD&lt;/code&gt; 들, 강제 고려 &lt;code&gt;AUTOLOAD&lt;/code&gt; 를 패키지 인 경우 일반적으로 사용되는 명시 적으로 다른 패키지 나있는 수입 된 모든 상수 &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt;&lt;/code&gt; 라.</target>
        </trans-unit>
        <trans-unit id="f5966f6f48bbef92de0797373659162ca479de0d" translate="yes" xml:space="preserve">
          <source>If you are writing new code, your first port of call should be one of the new &lt;code&gt;IO::Compress&lt;/code&gt; or &lt;code&gt;IO::Uncompress&lt;/code&gt; modules.</source>
          <target state="translated">새 코드를 작성하는 경우 첫 번째 호출 포트는 새로운 &lt;code&gt;IO::Compress&lt;/code&gt; 또는 &lt;code&gt;IO::Uncompress&lt;/code&gt; 모듈 중 하나 여야 합니다.</target>
        </trans-unit>
        <trans-unit id="0d5955743a0fa060d529640f937e917d974a0fd9" translate="yes" xml:space="preserve">
          <source>If you ask for nothing in particular, you'll be asking for &lt;code&gt;less
'please'&lt;/code&gt; .</source>
          <target state="translated">특별히 아무 것도 요구하지 않으면 &lt;code&gt;less 'please'&lt;/code&gt; 을 적게 요구할 것 입니다.</target>
        </trans-unit>
        <trans-unit id="d232183f686226b9e4d9f0a9749bb4ab75350724" translate="yes" xml:space="preserve">
          <source>If you ask it to unmemoize a function that was never memoized, it croaks.</source>
          <target state="translated">절대로 메모되지 않은 기능의 메모리를 해제하도록 요청하면 삐걱 거립니다.</target>
        </trans-unit>
        <trans-unit id="5ac398bf0535c0d2bb95ebfd6fd6655ce0bd6b20" translate="yes" xml:space="preserve">
          <source>If you ask to override your chdir() built-in function,</source>
          <target state="translated">chdir () 내장 함수를 대체하도록 요청하면</target>
        </trans-unit>
        <trans-unit id="aae82346550e5f30641b00cfb651b5e652048f2e" translate="yes" xml:space="preserve">
          <source>If you attempt to compile Perl with (POSIX) threads on an 11.X system and also link in the GDBM library, then Perl will immediately core dump when it starts up. The only workaround at this point is to relink the GDBM library under 11.X, then relink it into Perl.</source>
          <target state="translated">11.X 시스템에서 (POSIX) 스레드로 Perl을 컴파일하려고 시도하고 GDBM 라이브러리에서도 링크를 시도하면 Perl은 시작할 때 즉시 코어 덤프를 수행합니다. 이 시점의 유일한 해결 방법은 GDBM 라이브러리를 11.X에서 다시 연결 한 다음 Perl에 다시 연결하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="372756b443de4017a28427029bf0d506d7081a2a" translate="yes" xml:space="preserve">
          <source>If you believe the scalar comes back as UTF-8, you will most likely want the UTF8 flag restored:</source>
          <target state="translated">스칼라가 UTF-8로 돌아 왔다고 생각되면 UTF8 플래그를 복원하는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="1489e0cb25a613554ca1fb1509eb4766e09aaf06" translate="yes" xml:space="preserve">
          <source>If you believe you have found a security vulnerability in Perl, please email perl5-security-report@perl.org with details. This points to a closed subscription, unarchived mailing list. Please only use this address for security issues in the Perl core, not for modules independently distributed on CPAN.</source>
          <target state="translated">Perl에서 보안 취약점을 발견했다고 생각되면 perl5-security-report@perl.org로 이메일을 보내주십시오. 이것은 비공개 구독, 보관되지 않은 메일 링리스트를 가리 킵니다. CPAN에 독립적으로 배포 된 모듈이 아닌 Perl 코어의 보안 문제에만이 주소를 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="2508e4352c00aad2e5cda3b21b798f7f8735a139" translate="yes" xml:space="preserve">
          <source>If you build with Visual C++ 2013 then three tests currently may fail with Daylight Saving Time related problems:</source>
          <target state="translated">Visual C ++ 2013으로 빌드하면 일광 절약 시간 관련 문제로 현재 세 가지 테스트가 실패 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="fc747a2308602b12226c600429d56710358ba8a4" translate="yes" xml:space="preserve">
          <source>If you build with certain versions (e.g. 4.8.1) of gcc from www.mingw.org then</source>
          <target state="translated">www.mingw.org에서 gcc의 특정 버전 (예 : 4.8.1)으로 빌드하는 경우</target>
        </trans-unit>
        <trans-unit id="fccb9cfffea038156e1e9bf29f1e74a06b7c692d" translate="yes" xml:space="preserve">
          <source>If you built perl with dynamic loading capability then that would also be the way to build xs based extensions. However, if you built perl with the default static linking you can still build xs based extensions for OS/390 but you will need to follow the instructions in ExtUtils::MakeMaker for building statically linked perl binaries. In the simplest configurations building a static perl + xs extension boils down to:</source>
          <target state="translated">동적 로딩 기능으로 perl을 빌드하면 xs 기반 확장을 빌드하는 방법이기도합니다. 그러나 기본 정적 링크로 perl을 빌드 한 경우에도 OS / 390 용 xs 기반 확장을 빌드 할 수 있지만 정적으로 링크 된 perl 바이너리를 빌드하려면 ExtUtils :: MakeMaker의 지시 사항을 따라야합니다. 가장 간단한 구성에서 정적 perl + xs 확장을 빌드하면 다음과 같이 요약됩니다.</target>
        </trans-unit>
        <trans-unit id="b4bbe3ec8c3dbb9079b54edeba88cab20e6c6b9a" translate="yes" xml:space="preserve">
          <source>If you call $lh-&amp;gt;maketext(</source>
          <target state="translated">$ lh-&amp;gt; maketext (</target>
        </trans-unit>
        <trans-unit id="b2b245ecec2ba731bc1217986ab8fe3ce3832fb6" translate="yes" xml:space="preserve">
          <source>If you call &lt;code&gt;plan()&lt;/code&gt; , don't call any of the other methods below.</source>
          <target state="translated">&lt;code&gt;plan()&lt;/code&gt; 을 호출하는 경우 아래의 다른 방법을 호출하지 마십시오.</target>
        </trans-unit>
        <trans-unit id="f29b01f558f5cc8e37b47ab816256a32df3eb207" translate="yes" xml:space="preserve">
          <source>If you call a method that doesn't exist in a class, Perl will throw an error. However, if that class or any of its parent classes defines an &lt;code&gt;AUTOLOAD&lt;/code&gt; method, that &lt;code&gt;AUTOLOAD&lt;/code&gt; method is called instead.</source>
          <target state="translated">클래스에 존재하지 않는 메소드를 호출하면 Perl에서 오류가 발생합니다. 그러나 해당 클래스 또는 상위 클래스 중 하나가 &lt;code&gt;AUTOLOAD&lt;/code&gt; 메소드를 정의하면 해당 &lt;code&gt;AUTOLOAD&lt;/code&gt; 메소드가 대신 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="945646515b442a128e465225a1d325a7ca2f3625" translate="yes" xml:space="preserve">
          <source>If you call a subroutine that is undefined, you would ordinarily get an immediate, fatal error complaining that the subroutine doesn't exist. (Likewise for subroutines being used as methods, when the method doesn't exist in any base class of the class's package.) However, if an &lt;code&gt;AUTOLOAD&lt;/code&gt; subroutine is defined in the package or packages used to locate the original subroutine, then that &lt;code&gt;AUTOLOAD&lt;/code&gt; subroutine is called with the arguments that would have been passed to the original subroutine. The fully qualified name of the original subroutine magically appears in the global $AUTOLOAD variable of the same package as the &lt;code&gt;AUTOLOAD&lt;/code&gt; routine. The name is not passed as an ordinary argument because, er, well, just because, that's why. (As an exception, a method call to a nonexistent &lt;code&gt;&lt;a href=&quot;functions/import&quot;&gt;import&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;unimport&lt;/code&gt; method is just skipped instead. Also, if the AUTOLOAD subroutine is an XSUB, there are other ways to retrieve the subroutine name. See &lt;a href=&quot;perlguts#Autoloading-with-XSUBs&quot;&gt;Autoloading with XSUBs in perlguts&lt;/a&gt; for details.)</source>
          <target state="translated">정의되지 않은 서브 루틴을 호출하면 일반적으로 서브 루틴이 존재하지 않는다는 불만을 즉시 치명적인 오류가 발생합니다. (메소드가 클래스 패키지의 기본 클래스에 존재하지 않는 경우 메소드로 사용되는 서브 루틴의 경우와 유사합니다.) 그러나 &lt;code&gt;AUTOLOAD&lt;/code&gt; 서브 루틴이 패키지에 원래 서브 루틴을 찾는 데 사용 된 패키지에 정의되어 있으면 해당 &lt;code&gt;AUTOLOAD&lt;/code&gt; 서브 루틴 원래 서브 루틴으로 전달 된 인수와 함께 호출됩니다. 원래 서브 루틴의 완전한 이름은 마술과 같은 패키지의 글로벌 $의 AUTOLOAD 변수에 나타납니다 &lt;code&gt;AUTOLOAD&lt;/code&gt; 일상. 그 이름은 일반적인 주장으로 전달되지 않습니다. 왜냐하면 그 이유 때문입니다. (예외, 존재하지 않는에 메소드 호출로 &lt;code&gt;&lt;a href=&quot;functions/import&quot;&gt;import&lt;/a&gt;&lt;/code&gt; 또는 &lt;code&gt;unimport&lt;/code&gt; 자동로드 서브 루틴이 XSUB 경우 대신 건너 그냥 방법. 또한, 서브 루틴의 이름을 검색 할 수있는 다른 방법이 있습니다. 참조 &lt;a href=&quot;perlguts#Autoloading-with-XSUBs&quot;&gt;자동 로딩은 perlguts에있는 XSUB에&lt;/a&gt; 대한 자세한 내용은.)</target>
        </trans-unit>
        <trans-unit id="a71cdebace5c6abb01b81af0b4383d9f3787c035" translate="yes" xml:space="preserve">
          <source>If you can arrange for everyone to deal with this through references, it's cleaner code, although not so nice to look at. Here's a function that takes two array references as arguments, returning the two array elements in order of how many elements they have in them:</source>
          <target state="translated">모든 사람이 참조를 통해이 문제를 처리하도록 할 수 있다면보기에는 좋지 않지만 코드는 더 깨끗합니다. 다음은 두 개의 배열 참조를 인수로 사용하여 두 개의 배열 요소를 요소 수의 순서대로 반환하는 함수입니다.</target>
        </trans-unit>
        <trans-unit id="23b6ce07b51bd0ae187fbd5346ee2bf854f2bb10" translate="yes" xml:space="preserve">
          <source>If you can avoid it, don't, or if you can use a templating system, such as &lt;a href=&quot;http://search.cpan.org/perldoc/Text::Template&quot;&gt;Text::Template&lt;/a&gt; or &lt;a href=&quot;http://search.cpan.org/perldoc/Template&quot;&gt;Template&lt;/a&gt; Toolkit, do that instead. You might even be able to get the job done with &lt;code&gt;&lt;a href=&quot;functions/sprintf&quot;&gt;sprintf&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;functions/printf&quot;&gt;printf&lt;/a&gt;&lt;/code&gt;:</source>
          <target state="translated">이를 피할 수 있거나하지 말아야하거나 &lt;a href=&quot;http://search.cpan.org/perldoc/Text::Template&quot;&gt;Text :: Template&lt;/a&gt; 또는 &lt;a href=&quot;http://search.cpan.org/perldoc/Template&quot;&gt;Template&lt;/a&gt; Toolkit 과 같은 템플릿 시스템을 사용할 수있는 경우 대신 사용하십시오. &lt;code&gt;&lt;a href=&quot;functions/sprintf&quot;&gt;sprintf&lt;/a&gt;&lt;/code&gt; 또는 &lt;code&gt;&lt;a href=&quot;functions/printf&quot;&gt;printf&lt;/a&gt;&lt;/code&gt; 로 작업을 수행 할 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="f9556f6832194ce02eb38bf13ea3951955c6d164" translate="yes" xml:space="preserve">
          <source>If you can do these things, you've started on the long road to Perl porting. Thanks for wanting to help make Perl better - and happy hacking!</source>
          <target state="translated">이런 일을 할 수 있다면 Perl 포팅으로가는 길을 시작한 것입니다. Perl을 개선하고 행복한 해킹을 도와 주셔서 감사합니다!</target>
        </trans-unit>
        <trans-unit id="4e5e8e457d8aab789523193251b0cae471debcb4" translate="yes" xml:space="preserve">
          <source>If you can go through your firewall with e.g. lynx, presumably with a command such as</source>
          <target state="translated">lynx와 같은 방화벽을 통과 할 수 있다면 아마도 다음과 같은 명령으로</target>
        </trans-unit>
        <trans-unit id="22d913b1c7a6af16ecff397b87485204b5a8ebbc" translate="yes" xml:space="preserve">
          <source>If you can not reach the author for some reason contact the PAUSE admins at modules@perl.org who may be able to help, but each case is treated separately.</source>
          <target state="translated">어떤 이유로 저자에게 연락 할 수없는 경우 PAUSE 관리자 (module@perl.org)에게 도움을 줄 수 있지만 각 사례는 별도로 처리됩니다.</target>
        </trans-unit>
        <trans-unit id="e0ff87acae1d2fe61dfcf4190a982955e52a9134" translate="yes" xml:space="preserve">
          <source>If you can't configure &lt;code&gt;TAP::Harness&lt;/code&gt; to do exactly what you want, and writing a plugin isn't an option, consider extending it. It is designed to be (mostly) easy to subclass, though the cases when sub-classing is necessary should be few and far between.</source>
          <target state="translated">원하는 것을 정확하게 수행 하도록 &lt;code&gt;TAP::Harness&lt;/code&gt; 를 구성 할 수없고 플러그인 작성이 옵션이 아닌 경우 확장을 고려하십시오. 서브 클래 싱이 필요한 경우는 거의없고 서브 클래 싱이 필요한 경우가 많지만 (주로) 서브 클래스하기 쉽도록 설계되었습니다.</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
