<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="perl">
    <body>
      <group id="perl">
        <trans-unit id="bda6d4349e03cdc3822accb764cf2332f0d166cc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;struct()&lt;/code&gt; function</source>
          <target state="translated">&lt;code&gt;struct()&lt;/code&gt; 함수</target>
        </trans-unit>
        <trans-unit id="7a95e760c73406947e7da7714b03782e42d5fa06" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;struct&lt;/code&gt; function has three forms of parameter-list.</source>
          <target state="translated">&lt;code&gt;struct&lt;/code&gt; 함수 파라미터리스트의 세 가지 형태를 갖는다.</target>
        </trans-unit>
        <trans-unit id="ca2248434d315d7f4555ab09ed558fffeb25af18" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;sv&lt;/code&gt; argument is a pointer to the SV that is to acquire a new magical feature.</source>
          <target state="translated">&lt;code&gt;sv&lt;/code&gt; 인수는 새로운 마법의 기능을 확보하는 것입니다 SV에 대한 포인터입니다.</target>
        </trans-unit>
        <trans-unit id="9d1732cdeea04b3b5302655756ff012b4b97e760" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;sv&lt;/code&gt; argument must be a reference value. The &lt;code&gt;stash&lt;/code&gt; argument specifies which class the reference will belong to. See &lt;a href=&quot;#Stashes-and-Globs&quot;&gt;Stashes and Globs&lt;/a&gt; for information on converting class names into stashes.</source>
          <target state="translated">&lt;code&gt;sv&lt;/code&gt; 인수는 참조 값이어야합니다. &lt;code&gt;stash&lt;/code&gt; 인수 지정은 클래스 참조가 속한 것이다. 클래스 이름을 &lt;a href=&quot;#Stashes-and-Globs&quot;&gt;숨김&lt;/a&gt; 으로 변환하는 방법에 대한 정보는 숨김 및 글로브 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="5aa9fb7196f50b878b4d2185150e32ef86a1a0ee" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;sv_cat*()&lt;/code&gt; functions are not generic enough to operate on values that have &quot;magic&quot;. See &lt;a href=&quot;#Magic-Virtual-Tables&quot;&gt;Magic Virtual Tables&lt;/a&gt; later in this document.</source>
          <target state="translated">&lt;code&gt;sv_cat*()&lt;/code&gt; 함수는 &quot;마법&quot;이 값에서 작동하는 일반적인 충분하지 않습니다. &lt;a href=&quot;#Magic-Virtual-Tables&quot;&gt;매직 가상 테이블&lt;/a&gt; 참조이 문서 뒷부분의 .</target>
        </trans-unit>
        <trans-unit id="451bffe03c920b337c26d3f6c5c7b3d0a90a952c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;sv_set*()&lt;/code&gt; functions are not generic enough to operate on values that have &quot;magic&quot;. See &lt;a href=&quot;#Magic-Virtual-Tables&quot;&gt;Magic Virtual Tables&lt;/a&gt; later in this document.</source>
          <target state="translated">&lt;code&gt;sv_set*()&lt;/code&gt; 함수는 &quot;마법&quot;이 값에서 작동하는 일반적인 충분하지 않습니다. 이 문서 뒷부분의 &lt;a href=&quot;#Magic-Virtual-Tables&quot;&gt;Magic Virtual Tables를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="264e3c8ac2fdd944cc02ae92713944fc8cf6494f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;taint&lt;/code&gt; pragma causes any substrings from a match with a tainted variable to be tainted as well. This is not normally the case, as regexps are often used to extract the safe bits from a tainted variable. Use &lt;code&gt;taint&lt;/code&gt; when you are not extracting safe bits, but are performing some other processing. Both &lt;code&gt;taint&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt; pragmas are lexically scoped, which means they are in effect only until the end of the block enclosing the pragmas.</source>
          <target state="translated">&lt;code&gt;taint&lt;/code&gt; pragma는 오염 된 변수와 경기에서 어떤 문자열이 아니라 오염되도록합니다. 정규 표현식은 종종 오염 된 변수에서 안전한 비트를 추출하는 데 사용되므로 일반적으로 그렇지 않습니다. 안전한 비트를 추출하지는 않지만 다른 처리를 수행 할 때는 &lt;code&gt;taint&lt;/code&gt; 사용하십시오 . 두 &lt;code&gt;taint&lt;/code&gt; 과 &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt; 프라 그마는 어휘들은 단지 프라그 둘러싸 블록이 끝날 때까지 적용되는 의미 범위가된다.</target>
        </trans-unit>
        <trans-unit id="0e22b53957ab545ec5f1fe43f2463dbb75fb5bef" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;test_diag&lt;/code&gt; function prepends comment hashes and spacing to the start and newlines to the end of the expected output passed to it and adds it to the list of expected error output. So, instead of writing</source>
          <target state="translated">&lt;code&gt;test_diag&lt;/code&gt; 의 기능은 전달 된 예상 출력의 끝에 주석 해시와 시작 간격과 줄 바꿈 앞에 추가 및 예상 오류 출력 목록에 추가합니다. 그래서 글 쓰는 대신</target>
        </trans-unit>
        <trans-unit id="9a044497bbeccf899d123e744ac60158148d66b5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;thing&lt;/code&gt; argument can be any of an &lt;code&gt;SV*&lt;/code&gt; , &lt;code&gt;AV*&lt;/code&gt; , or &lt;code&gt;HV*&lt;/code&gt; . The functions are identical except that &lt;code&gt;newRV_inc&lt;/code&gt; increments the reference count of the &lt;code&gt;thing&lt;/code&gt; , while &lt;code&gt;newRV_noinc&lt;/code&gt; does not. For historical reasons, &lt;code&gt;newRV&lt;/code&gt; is a synonym for &lt;code&gt;newRV_inc&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;thing&lt;/code&gt; 인수는 어떤 일 수있다 &lt;code&gt;SV*&lt;/code&gt; , &lt;code&gt;AV*&lt;/code&gt; , 또는 &lt;code&gt;HV*&lt;/code&gt; . 기능은 다음을 제외하고 동일합니다 &lt;code&gt;newRV_inc&lt;/code&gt; 는 &lt;code&gt;thing&lt;/code&gt; 의 참조 카운트를 증가시키는 반면 &lt;code&gt;newRV_noinc&lt;/code&gt; 는 그렇지 않은 . 역사적인 이유로, &lt;code&gt;newRV&lt;/code&gt; 는 동의어입니다 &lt;code&gt;newRV_inc&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="764690cb5a9a1e69711deb7f1d4bd7570cd33533" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;threads-&amp;gt;self()&lt;/code&gt; class method provides your program with a way to get an object representing the thread it's currently in. You can use this object in the same way as the ones returned from thread creation.</source>
          <target state="translated">&lt;code&gt;threads-&amp;gt;self()&lt;/code&gt; 클래스 메소드는 현재의 스레드를 나타내는 개체를 얻을 수있는 방법과 프로그램을 제공합니다. 당신은 스레드 생성에서 반환 된 것과 같은 방식으로이 객체를 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5cb77a0f1c56daabcc9daa1cb20e1afceca163c1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;tid&lt;/code&gt; method returns the tid of a thread. The tid is a monotonically increasing integer assigned when a thread is created. The main thread of a program will have a tid of zero, while subsequent threads will have tids assigned starting with one.</source>
          <target state="translated">&lt;code&gt;tid&lt;/code&gt; 방법은 스레드의 TID를 반환합니다. tid는 스레드가 작성 될 때 지정된 단조 증가 정수입니다. 프로그램의 메인 스레드는 tid가 0이고, 후속 스레드는 tid가 1부터 시작하여 할당됩니다.</target>
        </trans-unit>
        <trans-unit id="62cae6d3e02f73d7641c7861d0693bc4b08d5c81" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;timelocal()&lt;/code&gt; and &lt;code&gt;timegm()&lt;/code&gt; functions perform range checking on the input $sec, $min, $hour, $mday, and $mon values by default.</source>
          <target state="translated">&lt;code&gt;timelocal()&lt;/code&gt; 및 &lt;code&gt;timegm()&lt;/code&gt; 함수는 기본적으로 입력 $ 초, $ 분, $ 시간, $ MDAY 및 $ 월 값 범위 검사를 수행한다.</target>
        </trans-unit>
        <trans-unit id="3444ad2f99e605827ac849ba41549cb93537c5ca" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;timelocal()&lt;/code&gt; function is implemented using the same cache. We just assume that we're translating a GMT time, and then fudge it when we're done for the timezone and daylight savings arguments. Note that the timezone is evaluated for each date because countries occasionally change their official timezones. Assuming that &lt;code&gt;&lt;a href=&quot;../functions/localtime&quot;&gt;localtime()&lt;/a&gt;&lt;/code&gt; corrects for these changes, this routine will also be correct.</source>
          <target state="translated">그만큼 &lt;code&gt;timelocal()&lt;/code&gt; 함수는 동일한 캐시를 이용하여 구현된다. 우리는 GMT 시간을 번역한다고 가정하고 시간대 및 일광 절약 시간제 인수에 대한 작업이 끝나면 퍼지합니다. 국가는 때때로 공식 시간대를 변경하기 때문에 시간대는 각 날짜에 대해 평가됩니다. &lt;code&gt;&lt;a href=&quot;../functions/localtime&quot;&gt;localtime()&lt;/a&gt;&lt;/code&gt; 이 이러한 변경 사항을 수정 한다고 가정하면 이 루틴도 정확합니다.</target>
        </trans-unit>
        <trans-unit id="7969d03acba8ec22322bc524970a2e67bf531eeb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;type&lt;/code&gt; argument should be equal to the &lt;code&gt;how&lt;/code&gt; value when the &lt;code&gt;SV&lt;/code&gt; was initially made magical.</source>
          <target state="translated">&lt;code&gt;type&lt;/code&gt; 인자는 같아야 &lt;code&gt;how&lt;/code&gt; 때 값 &lt;code&gt;SV&lt;/code&gt; 가 처음 마법되었다.</target>
        </trans-unit>
        <trans-unit id="e605c3e8404b3b1569b2a8f6ee2a28bb09c8e25f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;u&lt;/code&gt; template to &lt;code&gt;&lt;a href=&quot;functions/pack&quot;&gt;pack()&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;functions/unpack&quot;&gt;unpack()&lt;/a&gt;&lt;/code&gt; will render EBCDIC data in EBCDIC characters equivalent to their ASCII counterparts. For example, the following will print &quot;Yes indeed\n&quot; on either an ASCII or EBCDIC computer:</source>
          <target state="translated">&lt;code&gt;u&lt;/code&gt; 에 템플릿 &lt;code&gt;&lt;a href=&quot;functions/pack&quot;&gt;pack()&lt;/a&gt;&lt;/code&gt; 또는 &lt;code&gt;&lt;a href=&quot;functions/unpack&quot;&gt;unpack()&lt;/a&gt;&lt;/code&gt; 는 EBCDIC 데이터를 ASCII에 해당하는 EBCDIC 문자로 렌더링합니다. 예를 들어, 다음은 ASCII 또는 EBCDIC 컴퓨터에서 &quot;예 \ n&quot;을 인쇄합니다.</target>
        </trans-unit>
        <trans-unit id="6a1909f52d28496be25968c9641232bd70a050cf" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;up&lt;/code&gt; method increases the semaphore's count by the number specified (which must be an integer &amp;gt;= 1), or by one if no number is specified.</source>
          <target state="translated">그만큼 &lt;code&gt;up&lt;/code&gt; 방법 수가 지정되지 않은 경우, 또는 하나 (정수&amp;gt; = 1이어야 함)에 의해 지정된 번호 세마포어의 카운트를 증가시킨다.</target>
        </trans-unit>
        <trans-unit id="3bfafbe930277e35ea02604239f7cd015c3326fb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;upgrade&lt;/code&gt; command first runs an &lt;code&gt;r&lt;/code&gt; command with the given arguments and then installs the newest versions of all modules that were listed by that.</source>
          <target state="translated">&lt;code&gt;upgrade&lt;/code&gt; 명령을 먼저 실행 &lt;code&gt;r&lt;/code&gt; 에 지정된 인수와 명령을 한 후 해당 의해 나열된 모든 모듈의 최신 버전을 설치합니다.</target>
        </trans-unit>
        <trans-unit id="ed2a8ecd68dda5352fc1303d01e5cd582863eba1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;urllist&lt;/code&gt; parameter of the configuration table contains a list of URLs used for downloading. If the list contains any &lt;code&gt;file&lt;/code&gt; URLs, CPAN always tries there first. This feature is disabled for index files. So the recommendation for the owner of a CD-ROM with CPAN contents is: include your local, possibly outdated CD-ROM as a &lt;code&gt;file&lt;/code&gt; URL at the end of urllist, e.g.</source>
          <target state="translated">구성 테이블 의 &lt;code&gt;urllist&lt;/code&gt; 매개 변수는 다운로드에 사용되는 URL 목록을 포함합니다. 목록에 &lt;code&gt;file&lt;/code&gt; 포함 된 경우 URL이 CPAN은 항상 먼저 시도합니다. 이 기능은 인덱스 파일에서 사용할 수 없습니다. CPAN 내용이 포함 된 CD-ROM 소유자의 권장 사항은 다음과 같습니다. urllist 끝에 &lt;code&gt;file&lt;/code&gt; URL 로 로컬 또는 오래된 CD-ROM을 포함하십시오.</target>
        </trans-unit>
        <trans-unit id="468aa2690cfac4f39947fa49f9490387f38518f6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;utf8::unicode_to_native()&lt;/code&gt; and &lt;code&gt;utf8::upgrade()&lt;/code&gt; aren't needed if the argument is above 0xFF, so the above could have been written as</source>
          <target state="translated">&lt;code&gt;utf8::unicode_to_native()&lt;/code&gt; 및 &lt;code&gt;utf8::upgrade()&lt;/code&gt; 인수가 0xFF를 초과하는 경우에는 위와 같이 작성되었습니다 수 있도록, 필요하지 않습니다</target>
        </trans-unit>
        <trans-unit id="0a270d12703e96872d5ec49cc2bfa5c1ab0eb455" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;vars&lt;/code&gt; pragma (see &lt;a href=&quot;perlmod#vars&quot;&gt;vars in perlmod&lt;/a&gt;) may be used in such situations as an alternative to explicitly qualifying all globals with the package namespace. Variables pre-declared with this pragma will be visible to any autoloaded routines (but will not be invisible outside the package, unfortunately).</source>
          <target state="translated">은 &lt;code&gt;vars&lt;/code&gt; 프라 그마 (참조를&lt;a href=&quot;perlmod#vars&quot;&gt; perlmod를에 바르&lt;/a&gt; ) 명시 적으로 패키지 네임 스페이스의 모든 전역 자격에 대한 대안과 같은 상황에서 사용할 수있다. 이 pragma로 미리 선언 된 변수는 모든 자동로드 루틴에 표시됩니다 (그러나 불행히도 패키지 외부에서는 보이지 않습니다).</target>
        </trans-unit>
        <trans-unit id="8a981f510b5bc1a31c1fe6f83ee184b884a41beb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;verbose&lt;/code&gt; and &lt;code&gt;inc&lt;/code&gt; attributes influence the behavior of this search; notably, &lt;code&gt;inc&lt;/code&gt; , if true, adds @INC</source>
          <target state="translated">&lt;code&gt;verbose&lt;/code&gt; 및 &lt;code&gt;inc&lt;/code&gt; 특성이 검색의 동작에 영향을 미칠; 특히 &lt;code&gt;inc&lt;/code&gt; 는 true이면 @INC를 추가합니다.</target>
        </trans-unit>
        <trans-unit id="42e9db15fd405837558fc69a3922cf4c07b0d66c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;void&lt;/code&gt; return type for this function tells the &lt;b&gt;xsubpp&lt;/b&gt; compiler that the RETVAL variable is not needed or used and that it should not be created. In most scenarios the void return type should be used with the PPCODE: directive.</source>
          <target state="translated">이 함수 의 &lt;code&gt;void&lt;/code&gt; 리턴 유형은 &lt;b&gt;xsubpp&lt;/b&gt; 컴파일러에게 RETVAL 변수가 필요하지 않거나 사용되지 않으며 작성되어서는 안된다고 알려줍니다 . 대부분의 시나리오에서 void 리턴 유형은 PPCODE : 지시문과 함께 사용해야합니다.</target>
        </trans-unit>
        <trans-unit id="0803129a0bffe56a31c42b951ef5b3d0fb1885a9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;wanted()&lt;/code&gt; function does whatever verifications you want on each file and directory. Note that despite its name, the &lt;code&gt;wanted()&lt;/code&gt; function is a generic callback function, and does &lt;b&gt;not&lt;/b&gt; tell File::Find if a file is &quot;wanted&quot; or not. In fact, its return value is ignored.</source>
          <target state="translated">&lt;code&gt;wanted()&lt;/code&gt; 함수는 각 파일 및 디렉토리에 원하는 검증한다. 이름에도 불구하고 &lt;code&gt;wanted()&lt;/code&gt; 함수는 일반 콜백 함수이며&lt;b&gt; 없는&lt;/b&gt; 파일 말은 : 파일이 &quot;원&quot;여부를 찾습니다. 실제로, 반환 값은 무시됩니다.</target>
        </trans-unit>
        <trans-unit id="31b1fe49028e0123810b9a17034fff70bf1be6cc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;warnings&lt;/code&gt; pragma gives control over which warnings are enabled in which parts of a Perl program. It's a more flexible alternative for both the command line flag &lt;b&gt;-w&lt;/b&gt; and the equivalent Perl variable, &lt;code&gt;$^W&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;warnings&lt;/code&gt; 프라그 경고가 펄 프로그램의 어느 부분에서 활성화되는 동안 제어를 제공한다. 명령 행 플래그 &lt;b&gt;-w&lt;/b&gt; 와 동등한 Perl 변수 &lt;code&gt;$^W&lt;/code&gt; 모두에 대한보다 유연한 대안입니다. .</target>
        </trans-unit>
        <trans-unit id="4d599e8a7252be8237239500a33b9cae49be5da2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;warnings&lt;/code&gt; pragma provides a number of functions that are useful for module authors. These are used when you want to report a module-specific warning to a calling module has enabled warnings via the &lt;code&gt;warnings&lt;/code&gt; pragma.</source>
          <target state="translated">&lt;code&gt;warnings&lt;/code&gt; pragma는 모듈 작성자 유용한 기능을 제공합니다. 이는 호출 모듈에 모듈 별 경고를보고하려는 경우 경고를 통해 경고를 활성화 &lt;code&gt;warnings&lt;/code&gt; pragma.</target>
        </trans-unit>
        <trans-unit id="eaaf2c2b19accccb92902e0f89453388a8136ad7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;when&lt;/code&gt; modifier is an experimental feature that first appeared in Perl 5.14. To use it, you should include a &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; v5.14&lt;/code&gt; declaration. (Technically, it requires only the &lt;code&gt;switch&lt;/code&gt; feature, but that aspect of it was not available before 5.14.) Operative only from within a &lt;code&gt;foreach&lt;/code&gt; loop or a &lt;code&gt;given&lt;/code&gt; block, it executes the statement only if the smartmatch &lt;code&gt;$_ ~~ &lt;i&gt;EXPR&lt;/i&gt;&lt;/code&gt; is true. If the statement executes, it is followed by a &lt;code&gt;&lt;a href=&quot;functions/next&quot;&gt;next&lt;/a&gt;&lt;/code&gt; from inside a &lt;code&gt;foreach&lt;/code&gt; and &lt;code&gt;break&lt;/code&gt; from inside a &lt;code&gt;given&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;when&lt;/code&gt; 수정 먼저 펄 5.14에 나타난 실험적인 기능입니다. 그것을 사용하려면, 당신은 포함해야 &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; v5.14&lt;/code&gt; 선언. (기술적으로는 &lt;code&gt;switch&lt;/code&gt; 기능 만 필요 하지만 그 기능은 5.14 이전에는 사용할 수 없었습니다.) &lt;code&gt;foreach&lt;/code&gt; 루프 또는 &lt;code&gt;given&lt;/code&gt; 블록 내 에서만 작동 할 수 있으며 스마트 매치 &lt;code&gt;$_ ~~ &lt;i&gt;EXPR&lt;/i&gt;&lt;/code&gt; 이 참인 경우에만 명령문을 실행 합니다. 문이 실행되면, 그것은 뒤에 &lt;code&gt;&lt;a href=&quot;functions/next&quot;&gt;next&lt;/a&gt;&lt;/code&gt; , 안쪽에서 &lt;code&gt;foreach&lt;/code&gt; 와 &lt;code&gt;break&lt;/code&gt; 돌며에서 &lt;code&gt;given&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="e19be3044d8f18bead09bab3403090b34e1156d5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;while&lt;/code&gt; and &lt;code&gt;until&lt;/code&gt; modifiers have the usual &quot;&lt;code&gt;while&lt;/code&gt; loop&quot; semantics (conditional evaluated first), except when applied to a &lt;code&gt;&lt;a href=&quot;functions/do&quot;&gt;do&lt;/a&gt;&lt;/code&gt;-BLOCK (or to the Perl4 &lt;code&gt;&lt;a href=&quot;functions/do&quot;&gt;do&lt;/a&gt;&lt;/code&gt;-SUBROUTINE statement), in which case the block executes once before the conditional is evaluated.</source>
          <target state="translated">&lt;code&gt;while&lt;/code&gt; 및 &lt;code&gt;until&lt;/code&gt; 개질제가 &quot;일반적인 &lt;code&gt;while&lt;/code&gt; 시맨틱 (A)에인가하는 경우를 제외하고, (조건부 제 평가) 루프&quot; &lt;code&gt;&lt;a href=&quot;functions/do&quot;&gt;do&lt;/a&gt;&lt;/code&gt; (또는 perl4의로 - 블록 &lt;code&gt;&lt;a href=&quot;functions/do&quot;&gt;do&lt;/a&gt;&lt;/code&gt; , -SUBROUTINE 문)이 경우, 상기 블록이 실행 회 전의 조건으로 평가 된가있는 .</target>
        </trans-unit>
        <trans-unit id="3d5b06f931731acb22dad061fcd52f2783c874b3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;while&lt;/code&gt; statement executes the block as long as the expression is &lt;a href=&quot;#Truth-and-Falsehood&quot;&gt;true&lt;/a&gt;. The &lt;code&gt;until&lt;/code&gt; statement executes the block as long as the expression is false. The LABEL is optional, and if present, consists of an identifier followed by a colon. The LABEL identifies the loop for the loop control statements &lt;code&gt;&lt;a href=&quot;functions/next&quot;&gt;next&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/last&quot;&gt;last&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;functions/redo&quot;&gt;redo&lt;/a&gt;&lt;/code&gt;. If the LABEL is omitted, the loop control statement refers to the innermost enclosing loop. This may include dynamically looking back your call-stack at run time to find the LABEL. Such desperate behavior triggers a warning if you use the &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; warnings&lt;/code&gt; pragma or the &lt;b&gt;-w&lt;/b&gt; flag.</source>
          <target state="translated">그만큼 &lt;code&gt;while&lt;/code&gt; 문은 오랫동안 표현만큼 블록을 실행 &lt;a href=&quot;#Truth-and-Falsehood&quot;&gt;사실&lt;/a&gt; . &lt;code&gt;until&lt;/code&gt; 문은 긴 표현식이 거짓으로로 블록을 실행합니다. LABEL은 선택 사항이며 존재하는 경우 식별자와 콜론으로 구성됩니다. LABEL은 &lt;code&gt;&lt;a href=&quot;functions/next&quot;&gt;next&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;functions/last&quot;&gt;last&lt;/a&gt;&lt;/code&gt; 및 &lt;code&gt;&lt;a href=&quot;functions/redo&quot;&gt;redo&lt;/a&gt;&lt;/code&gt; 루프 제어문의 루프를 식별합니다 . LABEL을 생략하면 루프 제어문이 가장 안쪽의 루프를 나타냅니다. 여기에는 LABEL을 찾기 위해 런타임에 콜 스택을 동적으로 다시 찾는 것이 포함될 수 있습니다. &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; warnings&lt;/code&gt; pragma 또는 &lt;b&gt;-w&lt;/b&gt; 플래그 를 사용하면 이러한 절망적 인 동작으로 경고가 트리거됩니다 .</target>
        </trans-unit>
        <trans-unit id="42f557fbb89c75fd2ab740d93d25721ccbf0fda2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;yield&lt;/code&gt; function allows another thread to take control of the CPU. The exact results are implementation-dependent.</source>
          <target state="translated">&lt;code&gt;yield&lt;/code&gt; 함수는 다른 스레드가 CPU를 제어 할 수있다. 정확한 결과는 구현에 따라 다릅니다.</target>
        </trans-unit>
        <trans-unit id="246e63b2eb0074027eaf6b6fe6bf0995cbbb987b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;||&lt;/code&gt;, &lt;code&gt;//&lt;/code&gt; and &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; operators return the last value evaluated (unlike C's &lt;code&gt;||&lt;/code&gt; and &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;, which return 0 or 1). Thus, a reasonably portable way to find out the home directory might be:</source>
          <target state="translated">&lt;code&gt;||&lt;/code&gt; , &lt;code&gt;//&lt;/code&gt; 및 &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; 연산자는 마지막으로 평가 된 값을 반환합니다 (C의 &lt;code&gt;||&lt;/code&gt; 및 &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; 는 0 또는 1을 반환 함). 따라서 홈 디렉토리를 찾는 합리적인 이식 방법은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="11f57b3d94eabb5c19fb9360ab6afe8316dfa0a5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;~~&lt;/code&gt; operator compares its operands &quot;polymorphically&quot;, determining how to compare them according to their actual types (numeric, string, array, hash, etc.) Like the equality operators with which it shares the same precedence, &lt;code&gt;~~&lt;/code&gt; returns 1 for true and &lt;code&gt;&quot;&quot;&lt;/code&gt; for false. It is often best read aloud as &quot;in&quot;, &quot;inside of&quot;, or &quot;is contained in&quot;, because the left operand is often looked for</source>
          <target state="translated">&lt;code&gt;~~&lt;/code&gt; 연산자는 동일한 우선 공유되는 항등 연산자 마찬가지로 실제 유형 (숫자, 스트링, 어레이, 해시 등)에 따라 이들과 비교하는 방법을 결정하는 단계 &quot;다형&quot;피연산자 비교 &lt;code&gt;~~&lt;/code&gt; 반품 1 참이고 &lt;code&gt;&quot;&quot;&lt;/code&gt; 는 거짓입니다. 왼쪽 피연산자가 종종 찾기 때문에 &quot;in&quot;, &quot;inside of&quot;또는 &quot;include in&quot;으로 큰소리로 읽는 것이 가장 좋습니다.</target>
        </trans-unit>
        <trans-unit id="ef321bd7088ac81817f2231db61c1174692aaac0" translate="yes" xml:space="preserve">
          <source>The ADLER32 checksum field must be present.</source>
          <target state="translated">ADLER32 체크섬 필드가 있어야합니다.</target>
        </trans-unit>
        <trans-unit id="9c4519701849f27da68be727b95e63207f2a9abf" translate="yes" xml:space="preserve">
          <source>The AIX tar does not fill all unused space in the tar archive with 0x00. This sometimes leads to warning messages from &lt;code&gt;Archive::Tar&lt;/code&gt; .</source>
          <target state="translated">AIX tar는 tar 아카이브에서 사용되지 않은 모든 공간을 0x00으로 채우지 않습니다. 이것은 때때로 &lt;code&gt;Archive::Tar&lt;/code&gt; 경고 메시지로 이어집니다 .</target>
        </trans-unit>
        <trans-unit id="b5549afa573e8454744ea43299cd8d8505147fcd" translate="yes" xml:space="preserve">
          <source>The ALIAS: Keyword</source>
          <target state="translated">별칭 : 키워드</target>
        </trans-unit>
        <trans-unit id="2ce9242faeeab07eef2f7afd701bea6933de8059" translate="yes" xml:space="preserve">
          <source>The ALIAS: keyword allows an XSUB to have two or more unique Perl names and to know which of those names was used when it was invoked. The Perl names may be fully-qualified with package names. Each alias is given an index. The compiler will setup a variable called &lt;code&gt;ix&lt;/code&gt; which contain the index of the alias which was used. When the XSUB is called with its declared name &lt;code&gt;ix&lt;/code&gt; will be 0.</source>
          <target state="translated">ALIAS : 키워드를 사용하면 XSUB가 고유 한 Perl 이름을 두 개 이상 가질 수 있으며 호출시 사용 된 이름을 알 수 있습니다. Perl 이름은 패키지 이름으로 정규화 될 수 있습니다. 각 별명에는 색인이 제공됩니다. 컴파일러 는 사용 된 별칭의 색인을 포함하는 &lt;code&gt;ix&lt;/code&gt; 라는 변수를 설정합니다 . 선언 된 이름으로 XSUB를 호출하면 &lt;code&gt;ix&lt;/code&gt; 는 0이됩니다.</target>
        </trans-unit>
        <trans-unit id="15fd0430aabb02304def7c36146cf671599d3942" translate="yes" xml:space="preserve">
          <source>The API</source>
          <target state="translated">API</target>
        </trans-unit>
        <trans-unit id="9ed04c99d7b2c6a9ba47b9e4b73c73bb3ccc347c" translate="yes" xml:space="preserve">
          <source>The API was changed in the 2.0 branch. For a time, &lt;code&gt;mkpath&lt;/code&gt; and &lt;code&gt;rmtree&lt;/code&gt; tried, unsuccessfully, to deal with the two different calling mechanisms. This approach was considered a failure.</source>
          <target state="translated">API는 2.0 지점에서 변경되었습니다. 한동안 &lt;code&gt;mkpath&lt;/code&gt; 와 &lt;code&gt;rmtree&lt;/code&gt; 는 두 가지 다른 호출 메커니즘을 다루지 못했습니다. 이 접근법은 실패로 간주되었습니다.</target>
        </trans-unit>
        <trans-unit id="009ead0f6ffd2c056d27d3bfda98818a54d2faea" translate="yes" xml:space="preserve">
          <source>The ASCII region (0x00-0x7f) is preserved for all encodings, even though this conflicts with mappings by the Unicode Consortium.</source>
          <target state="translated">ASCII 영역 (0x00-0x7f)은 유니 코드 컨소시엄의 매핑과 충돌하더라도 모든 인코딩에 대해 유지됩니다.</target>
        </trans-unit>
        <trans-unit id="b3c4e287eeab5aae5482e7df8b6e409cada7c372" translate="yes" xml:space="preserve">
          <source>The ASCII/Latin-1/Unicode character with that number. A leading &quot;0x&quot; means that</source>
          <target state="translated">해당 번호의 ASCII / Latin-1 / Unicode 문자 선행 &quot;0x&quot;는</target>
        </trans-unit>
        <trans-unit id="e2afefe4f37ea14f731718bb07a4d6306f1639c5" translate="yes" xml:space="preserve">
          <source>The AUTOLOAD method, discussed in &lt;a href=&quot;perlsub#Autoloading&quot;&gt;Autoloading in perlsub&lt;/a&gt; lets you capture calls to undefined functions and methods.</source>
          <target state="translated">&lt;a href=&quot;perlsub#Autoloading&quot;&gt;perlsub의 자동로드에&lt;/a&gt; 설명 된 AUTOLOAD 메소드를 사용하면 정의되지 않은 함수 및 메소드에 대한 호출을 캡처 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="31231455a0cef5b5794db63f07a47d2f6efab12c" translate="yes" xml:space="preserve">
          <source>The ActiveState Pages, &lt;a href=&quot;http://www.activestate.com/&quot;&gt;http://www.activestate.com/&lt;/a&gt;</source>
          <target state="translated">ActiveState 페이지, &lt;a href=&quot;http://www.activestate.com/&quot;&gt;http://www.activestate.com/&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="fbbc6fc0e5dd1ef33879bfc672f5e3e8813e4f97" translate="yes" xml:space="preserve">
          <source>The Adventures of Tom Bombadil</source>
          <target state="translated">톰 봄 바딜의 모험</target>
        </trans-unit>
        <trans-unit id="e2e0a5aea5199e87efc4db9939033262cf1e73b8" translate="yes" xml:space="preserve">
          <source>The Alignment Pit</source>
          <target state="translated">정렬 구덩이</target>
        </trans-unit>
        <trans-unit id="68a751b9c456def01d238b0c06471f4927931bb2" translate="yes" xml:space="preserve">
          <source>The American Standard Code for Information Interchange (ASCII or US-ASCII) is a set of integers running from 0 to 127 (decimal) that have standardized interpretations by the computers which use ASCII. For example, 65 means the letter &quot;A&quot;. The range 0..127 can be covered by setting the bits in a 7-bit binary digit, hence the set is sometimes referred to as &quot;7-bit ASCII&quot;. ASCII was described by the American National Standards Institute document ANSI X3.4-1986. It was also described by ISO 646:1991 (with localization for currency symbols). The full ASCII set is given in the table &lt;a href=&quot;#recipe-3&quot;&gt;below&lt;/a&gt; as the first 128 elements. Languages that can be written adequately with the characters in ASCII include English, Hawaiian, Indonesian, Swahili and some Native American languages.</source>
          <target state="translated">미국 정보 교환 표준 코드 (ASCII 또는 US-ASCII)는 ASCII를 사용하는 컴퓨터에서 표준화 된 해석을 갖는 0에서 127 (10 진수)까지 실행되는 정수 세트입니다. 예를 들어 65는 문자 &quot;A&quot;를 의미합니다. 0..127 범위는 비트를 7 비트 이진수로 설정하여 적용 할 수 있으므로 세트를 &quot;7 비트 ASCII&quot;라고도합니다. ASCII는 American National Standards Institute 문서 ANSI X3.4-1986에 의해 설명되었습니다. 또한 ISO 646 : 1991 (통화 기호 현지화)으로 설명되었습니다. 전체 ASCII 세트는 &lt;a href=&quot;#recipe-3&quot;&gt;아래&lt;/a&gt; 표에 나와 있습니다. 에서 처음 128 개 요소로 제공됩니다. ASCII 문자로 적절하게 작성할 수있는 언어에는 영어, 하 와이어, 인도네시아어, 스와힐리어 및 일부 아메리카 원주민 언어가 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="f3ff218a8809c68d0eb083f2cf66b8207142d4f0" translate="yes" xml:space="preserve">
          <source>The American Standard Code for Information Interchange (a 7-bit character set adequate only for poorly representing English text). Often used loosely to describe the lowest 128 values of the various ISO-8859-X character sets, a bunch of mutually incompatible 8-bit codes best described as half ASCII. See also &lt;b&gt;Unicode&lt;/b&gt;.</source>
          <target state="translated">미국 정보 교환 표준 코드 (영어 텍스트를 잘 표현하지 못하는 경우에만 적합한 7 비트 문자 세트). 다양한 ISO-8859-X 문자 세트의 최저 128 값을 설명하기 위해 느슨하게 사용되는 경우가 많으며, 절반 ASCII로 가장 잘 기술 된 서로 호환되지 않는 8 비트 코드입니다. &lt;b&gt;유니 코드&lt;/b&gt; 참조&lt;b&gt;&lt;/b&gt; .</target>
        </trans-unit>
        <trans-unit id="fd1c7da39d90054f5c4c81dc1a1fa13bcbbe82e7" translate="yes" xml:space="preserve">
          <source>The Anatomy of an XSUB</source>
          <target state="translated">XSUB의 해부</target>
        </trans-unit>
        <trans-unit id="0746d95bfde5c5ba18bf27b5d1463ad01ffdafa1" translate="yes" xml:space="preserve">
          <source>The Argument Stack</source>
          <target state="translated">인수 스택</target>
        </trans-unit>
        <trans-unit id="59f8369b68ee932dd97b5ec57202b3f3969c4a83" translate="yes" xml:space="preserve">
          <source>The Arrow Operator</source>
          <target state="translated">화살표 연산자</target>
        </trans-unit>
        <trans-unit id="e40e5d487b331e1f7f4c2477322a84662ea1dcde" translate="yes" xml:space="preserve">
          <source>The Art of Computer Programming</source>
          <target state="translated">컴퓨터 프로그래밍의 기술</target>
        </trans-unit>
        <trans-unit id="e6a71a9e8ae70e8f61fd0c5d80d8189dbf3cf681" translate="yes" xml:space="preserve">
          <source>The AutoSplit and &lt;b&gt;AutoLoader&lt;/b&gt; modules automate the creation of forward declarations. The AutoSplit module creates an 'index' file containing forward declarations of all the AutoSplit subroutines. When the AutoLoader module is 'use'd it loads these declarations into its callers package.</source>
          <target state="translated">오토 스플릿 및 &lt;b&gt;오토로더&lt;/b&gt; 모듈은 전달 선언 작성을 자동화합니다. AutoSplit 모듈은 모든 AutoSplit 서브 루틴의 순방향 선언을 포함하는 'index'파일을 만듭니다. AutoLoader 모듈이 '사용'되면이 선언을 호출자 패키지에로드합니다.</target>
        </trans-unit>
        <trans-unit id="547ca45f60093a7fb15745aaa1976d8399cc0918" translate="yes" xml:space="preserve">
          <source>The B-determined class of the OP, in all caps.</source>
          <target state="translated">모든 한도에서 B가 결정한 OP 등급.</target>
        </trans-unit>
        <trans-unit id="fad9fed447a0e7963d894765232a4acc4b663de9" translate="yes" xml:space="preserve">
          <source>The B::Xref module is used to generate a cross reference listing of all definitions and uses of variables, subroutines and formats in a Perl program. It is implemented as a backend for the Perl compiler.</source>
          <target state="translated">B :: Xref 모듈은 Perl 프로그램에서 변수, 서브 루틴 및 형식의 모든 정의 및 사용에 대한 상호 참조 목록을 생성하는 데 사용됩니다. Perl 컴파일러의 백엔드로 구현됩니다.</target>
        </trans-unit>
        <trans-unit id="8026a52e63f99adbefc0e084618e1f479fd95572" translate="yes" xml:space="preserve">
          <source>The BITS mode (&quot;0&quot;) interprets the contents of</source>
          <target state="translated">BITS 모드 ( &quot;0&quot;)는</target>
        </trans-unit>
        <trans-unit id="ba88dd1d9005852348725927325ddcf383a69f7c" translate="yes" xml:space="preserve">
          <source>The BLOCK construct can be used to emulate case structures.</source>
          <target state="translated">BLOCK 구문을 사용하여 케이스 구조를 에뮬레이트 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="6dfef44d3b22aafe27912b6966e2a486d9c0c14d" translate="yes" xml:space="preserve">
          <source>The BOOT: Keyword</source>
          <target state="translated">BOOT : 키워드</target>
        </trans-unit>
        <trans-unit id="d4a87a13d39a77a50a617134650c09dd8bdc8e3b" translate="yes" xml:space="preserve">
          <source>The BOOT: keyword is used to add code to the extension's bootstrap function. The bootstrap function is generated by the &lt;b&gt;xsubpp&lt;/b&gt; compiler and normally holds the statements necessary to register any XSUBs with Perl. With the BOOT: keyword the programmer can tell the compiler to add extra statements to the bootstrap function.</source>
          <target state="translated">BOOT : 키워드는 확장의 부트 스트랩 함수에 코드를 추가하는 데 사용됩니다. 부트 스트랩 함수는 &lt;b&gt;xsubpp&lt;/b&gt; 컴파일러에 의해 생성되며 일반적으로 Perl에 XSUB를 등록하는 데 필요한 명령문을 보유합니다. BOOT : 키워드를 사용하면 프로그래머는 컴파일러에게 부트 스트랩 함수에 추가 명령문을 추가하도록 지시 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ad4a573da9545ff1a8eab5e0d4f5f08622036178" translate="yes" xml:space="preserve">
          <source>The BTREE file type optionally allows a single key to be associated with an arbitrary number of values. This option is enabled by setting the flags element of &lt;code&gt;$DB_BTREE&lt;/code&gt; to R_DUP when creating the database.</source>
          <target state="translated">BTREE 파일 형식을 사용하면 단일 키를 임의의 수의 값과 연결할 수 있습니다. 이 옵션은 &lt;code&gt;$DB_BTREE&lt;/code&gt; 의 flags 요소를 설정하여 활성화됩니다 데이터베이스를 작성할 때 합니다.</target>
        </trans-unit>
        <trans-unit id="4a8451f6eedb6a6056c8ac828a203a8cf8bdc79c" translate="yes" xml:space="preserve">
          <source>The BTREE interface has a feature which allows partial keys to be matched. This functionality is</source>
          <target state="translated">BTREE 인터페이스에는 부분 키를 일치시킬 수있는 기능이 있습니다. 이 기능은</target>
        </trans-unit>
        <trans-unit id="19350bba9c33f125fd021dceab5ff7633dce372c" translate="yes" xml:space="preserve">
          <source>The BUILD and INSTALL steps are identical to those for Unix. Some modules generate Makefiles that work better with GNU make, which is available from &lt;a href=&quot;http://www.mks.com/s390/gnu/&quot;&gt;http://www.mks.com/s390/gnu/&lt;/a&gt;</source>
          <target state="translated">빌드 및 설치 단계는 Unix와 동일합니다. 일부 모듈은 GNU make와 더 잘 작동하는 Makefile을 생성하며, &lt;a href=&quot;http://www.mks.com/s390/gnu/&quot;&gt;http://www.mks.com/s390/gnu/&lt;/a&gt; 에서 제공됩니다 .</target>
        </trans-unit>
        <trans-unit id="06987733f8223bbe1dde5201da803a816622002c" translate="yes" xml:space="preserve">
          <source>The Basic Principle</source>
          <target state="translated">기본 원리</target>
        </trans-unit>
        <trans-unit id="afdc8705dda034aabf31fc65386bddfb61c3e95b" translate="yes" xml:space="preserve">
          <source>The Benchmark module encapsulates a number of routines to help you figure out how long it takes to execute some code.</source>
          <target state="translated">벤치 마크 모듈은 몇 가지 루틴을 캡슐화하여 일부 코드를 실행하는 데 걸리는 시간을 파악하는 데 도움을줍니다.</target>
        </trans-unit>
        <trans-unit id="869885b765935f032e1e45165248683c4d860661" translate="yes" xml:space="preserve">
          <source>The Berkeley DB 4.1.25 has been tested with Tru64 V5.1A and found to work. The latest Berkeley DB can be found from &lt;a href=&quot;http://www.sleepycat.com&quot;&gt;http://www.sleepycat.com&lt;/a&gt;.</source>
          <target state="translated">Berkeley DB 4.1.25는 Tru64 V5.1A로 테스트되었으며 작동하는 것으로 나타났습니다. 최신 Berkeley DB는 &lt;a href=&quot;http://www.sleepycat.com&quot;&gt;http://www.sleepycat.com&lt;/a&gt; 에서 찾을 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="1425da38b0881b20e7239aedd72aa0c3d5db10c1" translate="yes" xml:space="preserve">
          <source>The Bessel function of the first kind of the order zero.</source>
          <target state="translated">첫 번째 종류의 차수 0의 베셀 함수입니다.</target>
        </trans-unit>
        <trans-unit id="95802efdaca31b27a14913bfe1089183b4ec8875" translate="yes" xml:space="preserve">
          <source>The C API for the backtrace is as follows:</source>
          <target state="translated">역 추적에 대한 C API는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="89f382052ffa523340ba739809ce6ebbf65c53dd" translate="yes" xml:space="preserve">
          <source>The C array of a padlist, containing the pads. Only subscript it with numbers &amp;gt;= 1, as the 0th entry is not guaranteed to remain usable.</source>
          <target state="translated">패드를 포함하는 패드리스트의 C 배열입니다. 0 번째 항목은 사용 가능한 상태로 유지되지 않으므로 숫자가 1보다 큰 첨자를 사용해야합니다.</target>
        </trans-unit>
        <trans-unit id="9d9a695f29b97a18f6840062c9b13365fc424c17" translate="yes" xml:space="preserve">
          <source>The C array of pad entries.</source>
          <target state="translated">패드 엔트리의 C 배열입니다.</target>
        </trans-unit>
        <trans-unit id="82cdebaae9f3b94b2c40ce92be9ab7f40abcb4e4" translate="yes" xml:space="preserve">
          <source>The C array of pad names.</source>
          <target state="translated">패드 이름의 C 배열입니다.</target>
        </trans-unit>
        <trans-unit id="66ccfe4f23602b2282c83a4407f8d3eb55b4ce47" translate="yes" xml:space="preserve">
          <source>The C code asks for:</source>
          <target state="translated">C 코드는 다음을 요청합니다.</target>
        </trans-unit>
        <trans-unit id="1755acfd3f32daf3e3ba7fab9fbb3582e6e7bc1c" translate="yes" xml:space="preserve">
          <source>The C function required to call</source>
          <target state="translated">호출하는 데 필요한 C 함수</target>
        </trans-unit>
        <trans-unit id="593e19336c2ea1e5b6f3c47a320c97c9b260fd7c" translate="yes" xml:space="preserve">
          <source>The C library &lt;code&gt;&lt;a href=&quot;functions/sprintf&quot;&gt;sprintf&lt;/a&gt;&lt;/code&gt;, wrapped if necessary, to ensure that it will return the length of the string written to the buffer. Only rare pre-ANSI systems need the wrapper function - usually this is a direct call to &lt;code&gt;&lt;a href=&quot;functions/sprintf&quot;&gt;sprintf&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">필요한 경우 랩핑 된 C 라이브러리 &lt;code&gt;&lt;a href=&quot;functions/sprintf&quot;&gt;sprintf&lt;/a&gt;&lt;/code&gt; 는 버퍼에 기록 된 문자열의 길이를 리턴합니다. 드문 사전 ANSI 시스템에만 래퍼 기능이 필요합니다. 일반적으로 이것은 &lt;code&gt;&lt;a href=&quot;functions/sprintf&quot;&gt;sprintf&lt;/a&gt;&lt;/code&gt; 에 대한 직접 호출 입니다.</target>
        </trans-unit>
        <trans-unit id="9f593f0f7e2f42e16decd49842d3eba832ba134e" translate="yes" xml:space="preserve">
          <source>The C library &lt;code&gt;snprintf&lt;/code&gt; functionality, if available and standards-compliant (uses &lt;code&gt;vsnprintf&lt;/code&gt; , actually). However, if the &lt;code&gt;vsnprintf&lt;/code&gt; is not available, will unfortunately use the unsafe &lt;code&gt;vsprintf&lt;/code&gt; which can overrun the buffer (there is an overrun check, but that may be too late). Consider using &lt;code&gt;sv_vcatpvf&lt;/code&gt; instead, or getting &lt;code&gt;vsnprintf&lt;/code&gt; .</source>
          <target state="translated">C 라이브러리 &lt;code&gt;snprintf&lt;/code&gt; 기능 (사용 가능한 경우 표준 준수) ( 실제로 &lt;code&gt;vsnprintf&lt;/code&gt; 사용 ) 그러나 &lt;code&gt;vsnprintf&lt;/code&gt; 를 사용할 수 없으면 불행히도 안전하지 않은 &lt;code&gt;vsprintf&lt;/code&gt; 를 사용 하여 버퍼를 오버런 할 수 있습니다 (오버런 검사가 있지만 너무 늦을 수 있음). 대신 &lt;code&gt;sv_vcatpvf&lt;/code&gt; 를 사용하거나 &lt;code&gt;vsnprintf&lt;/code&gt; 를 얻는 것을 고려하십시오 .</target>
        </trans-unit>
        <trans-unit id="661ddafc70911db04cf396a10417bb22f9c9013f" translate="yes" xml:space="preserve">
          <source>The C library &lt;code&gt;strlcat&lt;/code&gt; if available, or a Perl implementation of it. This operates on C &lt;code&gt;NUL&lt;/code&gt; -terminated strings.</source>
          <target state="translated">사용 가능한 경우 C 라이브러리 &lt;code&gt;strlcat&lt;/code&gt; 또는 Perl 구현. 이것은 C &lt;code&gt;NUL&lt;/code&gt; 종료 문자열 에서 작동합니다 .</target>
        </trans-unit>
        <trans-unit id="8f1fcfbd88c7e47c13102ec9e5c6df21938df7a0" translate="yes" xml:space="preserve">
          <source>The C library &lt;code&gt;strlcpy&lt;/code&gt; if available, or a Perl implementation of it. This operates on C &lt;code&gt;NUL&lt;/code&gt; -terminated strings.</source>
          <target state="translated">사용 가능한 경우 C 라이브러리 &lt;code&gt;strlcpy&lt;/code&gt; 또는 Perl 구현. 이것은 C &lt;code&gt;NUL&lt;/code&gt; 종료 문자열 에서 작동합니다 .</target>
        </trans-unit>
        <trans-unit id="6e368fd4b911113fa139d4b324c13f128de90489" translate="yes" xml:space="preserve">
          <source>The C library &lt;code&gt;vsnprintf&lt;/code&gt; if available and standards-compliant. However, if if the &lt;code&gt;vsnprintf&lt;/code&gt; is not available, will unfortunately use the unsafe &lt;code&gt;vsprintf&lt;/code&gt; which can overrun the buffer (there is an overrun check, but that may be too late). Consider using &lt;code&gt;sv_vcatpvf&lt;/code&gt; instead, or getting &lt;code&gt;vsnprintf&lt;/code&gt; .</source>
          <target state="translated">사용 가능하고 표준을 준수하는 경우 C 라이브러리 &lt;code&gt;vsnprintf&lt;/code&gt; . 그러나 &lt;code&gt;vsnprintf&lt;/code&gt; 를 사용할 수없는 경우 불행히도 안전하지 않은 &lt;code&gt;vsprintf&lt;/code&gt; 를 사용 하여 버퍼를 오버런 할 수 있습니다 (오버런 검사가 있지만 너무 늦을 수 있음). 대신 &lt;code&gt;sv_vcatpvf&lt;/code&gt; 를 사용하거나 &lt;code&gt;vsnprintf&lt;/code&gt; 를 얻는 것을 고려하십시오 .</target>
        </trans-unit>
        <trans-unit id="5183e1e6aa36fa93c903a6e7e44a0cb72c213922" translate="yes" xml:space="preserve">
          <source>The C library routines listed in the table below return values based on the current locale. Use the entries in the final column for that functionality. The other two columns always assume a POSIX (or C) locale. The entries in the ASCII column are only meaningful for ASCII inputs, returning FALSE for anything else. Use these only when you &lt;b&gt;know&lt;/b&gt; that is what you want. The entries in the Latin1 column assume that the non-ASCII 8-bit characters are as Unicode defines, them, the same as ISO-8859-1, often called Latin 1.</source>
          <target state="translated">아래 표에 나열된 C 라이브러리 루틴은 현재 로케일을 기반으로 값을 리턴합니다. 해당 기능의 마지막 열에있는 항목을 사용하십시오. 다른 두 열은 항상 POSIX (또는 C) 로캘을 가정합니다. ASCII 열의 항목은 ASCII 입력에만 의미가 있으며 다른 항목에는 FALSE를 반환합니다. 원하는 것을 &lt;b&gt;알고&lt;/b&gt; 있을 때만 사용하십시오 . Latin1 열의 항목은 ASCII가 아닌 8 비트 문자가 유니 코드로 정의 된 것으로 간주되며 ISO-8859-1과 동일하며 종종 라틴어 1이라고합니다.</target>
        </trans-unit>
        <trans-unit id="a28b4e51a54be7620c06b31ca4a6442c8879a612" translate="yes" xml:space="preserve">
          <source>The C pre-processor macro to use in the &lt;code&gt;#ifdef&lt;/code&gt; . This defaults to the</source>
          <target state="translated">ㄴ 프리 프로세서 매크로에 사용 &lt;code&gt;#ifdef&lt;/code&gt; 와 . 기본값은</target>
        </trans-unit>
        <trans-unit id="e289a8cac4c6625ed2e896b05f021cd0b663f2cc" translate="yes" xml:space="preserve">
          <source>The C signature of the corresponding function should be</source>
          <target state="translated">해당 함수의 C 서명은</target>
        </trans-unit>
        <trans-unit id="434fa80b2289a7e8297f9f4dbd629257d6d523b1" translate="yes" xml:space="preserve">
          <source>The C source code and header files mostly live in the root of the source tree. There are a few platform-specific directories which contain C code. In addition, some of the modules shipped with Perl include C or XS code.</source>
          <target state="translated">C 소스 코드와 헤더 파일은 대부분 소스 트리의 루트에 있습니다. C 코드가 포함 된 플랫폼 별 디렉토리가 몇 가지 있습니다. 또한 Perl과 함께 제공되는 일부 모듈에는 C 또는 XS 코드가 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="128905b571f66231b1c910d09a2688b981aad8fb" translate="yes" xml:space="preserve">
          <source>The C standard defines the &lt;code&gt;LC_MONETARY&lt;/code&gt; category, but not a function that is affected by its contents. (Those with experience of standards committees will recognize that the working group decided to punt on the issue.) Consequently, Perl essentially takes no notice of it. If you really want to use &lt;code&gt;LC_MONETARY&lt;/code&gt; , you can query its contents--see &lt;a href=&quot;#The-localeconv-function&quot;&gt;The localeconv function&lt;/a&gt;--and use the information that it returns in your application's own formatting of currency amounts. However, you may well find that the information, voluminous and complex though it may be, still does not quite meet your requirements: currency formatting is a hard nut to crack.</source>
          <target state="translated">C 표준은 &lt;code&gt;LC_MONETARY&lt;/code&gt; 범주를 정의 하지만 그 내용에 영향을받는 함수는 아닙니다. (표준위원회의 경험이있는 사람들은 실무 그룹이이 문제를 해결하기로 결정했다는 것을 알게 될 것입니다.) 따라서 Perl은 본질적으로이를 인식하지 않습니다. &lt;code&gt;LC_MONETARY&lt;/code&gt; 를 실제로 사용하려면 내용을 쿼리하고 &lt;a href=&quot;#The-localeconv-function&quot;&gt;(localeconv 함수&lt;/a&gt; 참조) , 응용 프로그램 자체의 통화 금액 형식으로 반환되는 정보를 사용할 수 있습니다. 그러나 볼륨이 크고 복잡한 정보가 여전히 요구 사항을 충족하지 못하는 경우가 있습니다. 통화 형식화는 까다로울 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="9998f45e4c7233897bbe30273f117556d7539b74" translate="yes" xml:space="preserve">
          <source>The C structures used by Perl's internals to hold SV and OP information (PVIV, AV, HV, ..., OP, SVOP, UNOP, ...) are modelled on a class hierarchy and the &lt;code&gt;B&lt;/code&gt; module gives access to them via a true object hierarchy. Structure fields which point to other objects (whether types of SV or types of OP) are represented by the &lt;code&gt;B&lt;/code&gt; module as Perl objects of the appropriate class.</source>
          <target state="translated">SV 및 OP 정보 (PVIV, AV, HV, ..., OP, SVOP, UNOP 등)를 보유하기 위해 Perl의 내부에서 사용하는 C 구조는 클래스 계층 구조로 모델링되며 &lt;code&gt;B&lt;/code&gt; 모듈은 진정한 객체 계층. 다른 객체 (SV 유형 또는 OP 유형)를 가리키는 구조 필드는 &lt;code&gt;B&lt;/code&gt; 모듈에 의해 적절한 클래스의 Perl 객체로 표시됩니다 .</target>
        </trans-unit>
        <trans-unit id="e52cd1f128c9fdf3705990415e2a1725ce8c0daa" translate="yes" xml:space="preserve">
          <source>The C style for loop is rarely needed in Perl since Perl provides the more friendly list scanning &lt;code&gt;foreach&lt;/code&gt; loop.</source>
          <target state="translated">펄이 더 친화적 목록 스캔 제공하기 때문에 루프에 대한 C 스타일은 거의 펄에 필요하지 않습니다 &lt;code&gt;foreach&lt;/code&gt; 는 루프를.</target>
        </trans-unit>
        <trans-unit id="41766adf1b20a48cee72fe6667e88ebc85cdc6f9" translate="yes" xml:space="preserve">
          <source>The C variable which corresponds to Perl's $^W warning variable.</source>
          <target state="translated">Perl의 $ ^ W 경고 변수에 해당하는 C 변수.</target>
        </trans-unit>
        <trans-unit id="dfa119354e27d0075a95b6198dbb34324da3f2fb" translate="yes" xml:space="preserve">
          <source>The C-level function pointer is returned in</source>
          <target state="translated">C 레벨 함수 포인터는</target>
        </trans-unit>
        <trans-unit id="230e53618d509a745420dd7ed8f916298cb8a1f6" translate="yes" xml:space="preserve">
          <source>The C-level function pointer is supplied in</source>
          <target state="translated">C 레벨 함수 포인터는</target>
        </trans-unit>
        <trans-unit id="1e1b0aeffa7ba38a3388c23b72c5a0f47c58d0b1" translate="yes" xml:space="preserve">
          <source>The C3 MRO</source>
          <target state="translated">C3 MRO</target>
        </trans-unit>
        <trans-unit id="0890f76e297e8a69278390e1b8b2216c138a276e" translate="yes" xml:space="preserve">
          <source>The C3 order also lets you call methods in sibling classes with the &lt;code&gt;&lt;a href=&quot;functions/next&quot;&gt;next&lt;/a&gt;&lt;/code&gt; pseudo-class. See the &lt;a href=&quot;mro&quot;&gt;mro&lt;/a&gt; documentation for more details on this feature.</source>
          <target state="translated">C3 순서를 사용하면 형제 클래스에서 &lt;code&gt;&lt;a href=&quot;functions/next&quot;&gt;next&lt;/a&gt;&lt;/code&gt; 의사. 이 기능에 대한 자세한 내용은&lt;a href=&quot;mro&quot;&gt; mro&lt;/a&gt; 설명서를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="d0ff2a087cbd21d4354452514069e5aa62203f63" translate="yes" xml:space="preserve">
          <source>The CASE: Keyword</source>
          <target state="translated">사례 : 키워드</target>
        </trans-unit>
        <trans-unit id="c34759e310ffd05ba41a3c6d9e4717368401e66b" translate="yes" xml:space="preserve">
          <source>The CASE: keyword allows an XSUB to have multiple distinct parts with each part acting as a virtual XSUB. CASE: is greedy and if it is used then all other XS keywords must be contained within a CASE:. This means nothing may precede the first CASE: in the XSUB and anything following the last CASE: is included in that case.</source>
          <target state="translated">CASE : 키워드를 사용하면 XSUB가 각 부분이 가상 XSUB 역할을하는 여러 개의 개별 부분을 가질 수 있습니다. CASE :는 욕심이 많으며 사용되는 경우 다른 모든 XS 키워드는 CASE :에 포함되어야합니다. 즉, XSUB에서 첫 번째 CASE 앞에는 아무것도 없으며 마지막 CASE : 뒤에 오는 것은 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="fae674d05cdd7c7c93ed58176b2c5091862f5184" translate="yes" xml:space="preserve">
          <source>The CLEANUP: Keyword</source>
          <target state="translated">정리 : 키워드</target>
        </trans-unit>
        <trans-unit id="241f3ed896c795a2f153c574bd096719fc549cce" translate="yes" xml:space="preserve">
          <source>The CODE: Keyword</source>
          <target state="translated">코드 : 키워드</target>
        </trans-unit>
        <trans-unit id="75462a30b7eda0a1256e9e78d46c9b66a39ca496" translate="yes" xml:space="preserve">
          <source>The CODEHASHREF is a reference to a hash containing names as keys and either a string to eval or a code reference for each value. For each (KEY, VALUE) pair in the CODEHASHREF, this routine will call</source>
          <target state="translated">CODEHASHREF는 이름을 키로 포함하고 해시 할 문자열 또는 각 값에 대한 코드 참조를 포함하는 해시에 대한 참조입니다. CODEHASHREF의 각 (KEY, VALUE) 쌍에 대해이 루틴은</target>
        </trans-unit>
        <trans-unit id="2d375a6aa9b8906ba2ffceffe206a677c43a7349" translate="yes" xml:space="preserve">
          <source>The COP's hint flags, rendered with abbreviated names if possible. An empty string if this is not a COP. Here are the symbols used:</source>
          <target state="translated">가능한 경우 약어 이름으로 렌더링 된 COP의 힌트 플래그입니다. COP가 아닌 경우 빈 문자열입니다. 사용 된 기호는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="1edd5ccb6f317807268c4d710f3579aef8a9d833" translate="yes" xml:space="preserve">
          <source>The COUNT can be zero or negative, see timethis().</source>
          <target state="translated">COUNT는 0이거나 음수 일 수 있습니다. timethis ()를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="d7abd867e28669bc36a83d10cc2868dd307bb204" translate="yes" xml:space="preserve">
          <source>The COUNT can be zero or negative: this means the</source>
          <target state="translated">COUNT는 0 또는 음수 일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="7180933318067029f5e634690ac1d29792da70f9" translate="yes" xml:space="preserve">
          <source>The CPAN indexes are usually rebuilt once or twice per hour, but the typical CPAN mirror mirrors only once or twice per day. Depending on the quality of your mirror and your desire to be on the bleeding edge, you may want to set the following value to more or less than one day (which is the default). It determines after how many days CPAN.pm downloads new indexes.</source>
          <target state="translated">CPAN 인덱스는 일반적으로 시간당 한두 번 다시 작성되지만 일반적인 CPAN 미러는 하루에 한두 번만 미러링됩니다. 거울의 품질과 블리딩 엣지에 대한 욕구에 따라 다음 값을 하루 이상 (기본값)으로 설정할 수 있습니다. CPAN.pm이 새 인덱스를 다운로드하는 일 수를 결정합니다.</target>
        </trans-unit>
        <trans-unit id="377d91db5cfe6b5bd06da1ed353fc316766187b9" translate="yes" xml:space="preserve">
          <source>The CPAN module &lt;a href=&quot;http://search.cpan.org/perldoc/Term::ExtendedColor&quot;&gt;Term::ExtendedColor&lt;/a&gt; provides a different and more comprehensive interface for 256-color emulators that may be more convenient. The CPAN module &lt;a href=&quot;http://search.cpan.org/perldoc/Win32::Console::ANSI&quot;&gt;Win32::Console::ANSI&lt;/a&gt; provides ANSI color (and other escape sequence) support in the Win32 Console environment.</source>
          <target state="translated">CPAN 모듈 &lt;a href=&quot;http://search.cpan.org/perldoc/Term::ExtendedColor&quot;&gt;Term :: ExtendedColor&lt;/a&gt; 는보다 편리한 256 색 에뮬레이터를위한 다양하고 포괄적 인 인터페이스를 제공합니다. CPAN 모듈 &lt;a href=&quot;http://search.cpan.org/perldoc/Win32::Console::ANSI&quot;&gt;Win32 :: Console :: ANSI&lt;/a&gt; 는 Win32 콘솔 환경에서 ANSI 색상 (및 기타 이스케이프 시퀀스)을 지원합니다.</target>
        </trans-unit>
        <trans-unit id="d6b4425af9b4e8fb2b471139f3e26220141f7951" translate="yes" xml:space="preserve">
          <source>The CPAN module also supports named and versioned</source>
          <target state="translated">CPAN 모듈은 또한 명명 및 버전 관리를 지원합니다</target>
        </trans-unit>
        <trans-unit id="0c026574d1a86a555bc568a8cb4ff270316b96bc" translate="yes" xml:space="preserve">
          <source>The CPAN module automates or at least simplifies the make and install of perl modules and extensions. It includes some primitive searching capabilities and knows how to use LWP, HTTP::Tiny, Net::FTP and certain external download clients to fetch distributions from the net.</source>
          <target state="translated">CPAN 모듈은 perl 모듈 및 확장의 작성 및 설치를 자동화하거나 최소한 단순화합니다. 여기에는 기본 검색 기능이 포함되어 있으며 LWP, HTTP :: Tiny, Net :: FTP 및 특정 외부 다운로드 클라이언트를 사용하여 인터넷에서 배포를 가져 오는 방법을 알고 있습니다.</target>
        </trans-unit>
        <trans-unit id="4e178ebb5191d2f8095d21912890034971c23f17" translate="yes" xml:space="preserve">
          <source>The CPAN module can detect when a module which you are trying to build depends on prerequisites. If this happens, it can build the prerequisites for you automatically ('follow'), ask you for confirmation ('ask'), or just ignore them ('ignore'). Choosing 'follow' also sets PERL_AUTOINSTALL and PERL_EXTUTILS_AUTOINSTALL for &quot;--defaultdeps&quot; if not already set.</source>
          <target state="translated">CPAN 모듈은 빌드하려는 모듈이 전제 조건에 따라 달라지는시기를 감지 할 수 있습니다. 이 경우 자동으로 전제 조건을 구축하거나 ( '따라') 확인을 요청하거나 ( '요청') 무시 만하면됩니다 ( '무시'). 'follow'를 선택하면 아직 설정되지 않은 경우 PERL_AUTOINSTALL 및 PERL_EXTUTILS_AUTOINSTALL이 &quot;--defaultdeps&quot;로 설정됩니다.</target>
        </trans-unit>
        <trans-unit id="6c6573c37a2e4b0e2c1f6ecf5ee527de52c79b5e" translate="yes" xml:space="preserve">
          <source>The CPAN program is trying to depend on as little as possible so the user can use it in hostile environment. It works better the more goodies the environment provides. For example if you try in the CPAN shell</source>
          <target state="translated">CPAN 프로그램은 사용자가 적대적인 환경에서 사용할 수 있도록 가능한 한 적게 의존하려고합니다. 환경이 제공하는 혜택이 많을수록 더 잘 작동합니다. 예를 들어 CPAN 쉘에서 시도하는 경우</target>
        </trans-unit>
        <trans-unit id="85d1aee245c3b6a287276d71fb8b02358e6086ca" translate="yes" xml:space="preserve">
          <source>The CPAN testers ( &lt;a href=&quot;http://testers.cpan.org/&quot;&gt;http://testers.cpan.org/&lt;/a&gt; ) are a group of volunteers who test CPAN modules on a variety of platforms.</source>
          <target state="translated">CPAN 테스터 ( &lt;a href=&quot;http://testers.cpan.org/&quot;&gt;http://testers.cpan.org/&lt;/a&gt; )는 다양한 플랫폼에서 CPAN 모듈을 테스트하는 자원 봉사자 그룹입니다.</target>
        </trans-unit>
        <trans-unit id="e02636a6cb280626a26310497466ab4002dc994b" translate="yes" xml:space="preserve">
          <source>The CRC32 and ISIZE trailer fields must be present.</source>
          <target state="translated">CRC32 및 ISIZE 트레일러 필드가 있어야합니다.</target>
        </trans-unit>
        <trans-unit id="9feb874c73b191dd9599e9b2017419a0da4abb3d" translate="yes" xml:space="preserve">
          <source>The C_ARGS: Keyword</source>
          <target state="translated">C_ARGS : 키워드</target>
        </trans-unit>
        <trans-unit id="701e155d0ecdee0723938fe9c7bf1396f627436a" translate="yes" xml:space="preserve">
          <source>The C_ARGS: keyword allows creating of XSUBS which have different calling sequence from Perl than from C, without a need to write CODE: or PPCODE: section. The contents of the C_ARGS: paragraph is put as the argument to the called C function without any change.</source>
          <target state="translated">C_ARGS : 키워드를 사용하면 CODE : 또는 PPCODE : 섹션을 작성할 필요없이 Perl과 다른 호출 순서를 갖는 XSUBS를 작성할 수 있습니다. C_ARGS : 단락의 내용은 변경없이 호출 된 C 함수의 인수로 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="8dd34313e432c589bd3beca248664e04fa335c40" translate="yes" xml:space="preserve">
          <source>The Carp module first appeared in Larry Wall's perl 5.000 distribution. Since then it has been modified by several of the perl 5 porters. Andrew Main (Zefram) &amp;lt;zefram@fysh.org&amp;gt; divested Carp into an independent distribution.</source>
          <target state="translated">잉어 모듈은 Larry Wall의 perl 5.000 배포판에 처음 등장했습니다. 그 이후로 여러 perl 5 포터에 의해 수정되었습니다. Andrew Main (Zefram) &amp;lt;zefram@fysh.org&amp;gt;는 잉어를 독립된 배포판에 버렸습니다.</target>
        </trans-unit>
        <trans-unit id="73aa54f605c75d537db25ae13f844b387570066b" translate="yes" xml:space="preserve">
          <source>The Carp routines are useful in your own modules because they act like &lt;code&gt;&lt;a href=&quot;functions/die&quot;&gt;die()&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;functions/warn&quot;&gt;warn()&lt;/a&gt;&lt;/code&gt;, but with a message which is more likely to be useful to a user of your module. In the case of &lt;code&gt;cluck()&lt;/code&gt; and &lt;code&gt;confess()&lt;/code&gt; , that context is a summary of every call in the call-stack; &lt;code&gt;longmess()&lt;/code&gt; returns the contents of the error message.</source>
          <target state="translated">Carp 루틴은 &lt;code&gt;&lt;a href=&quot;functions/die&quot;&gt;die()&lt;/a&gt;&lt;/code&gt; 또는 &lt;code&gt;&lt;a href=&quot;functions/warn&quot;&gt;warn()&lt;/a&gt;&lt;/code&gt; 과 같이 작동 하지만 모듈 사용자에게 유용 할 수있는 메시지가 있으므로 자신의 모듈에서 유용합니다. 의 경우 &lt;code&gt;cluck()&lt;/code&gt; 와 &lt;code&gt;confess()&lt;/code&gt; , 즉 컨텍스트 호출 스택에있는 모든 통화의 요약이며; &lt;code&gt;longmess()&lt;/code&gt; 는 오류 메시지의 내용을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="0a9dcee0d40bd7f4aac08fafa5945185600a2589" translate="yes" xml:space="preserve">
          <source>The Carp routines don't handle exception objects currently. If called with a first argument that is a reference, they simply call die() or warn(), as appropriate.</source>
          <target state="translated">잉어 루틴은 현재 예외 객체를 처리하지 않습니다. 참조 인 첫 번째 인수로 호출 된 경우, 적절하게 die () 또는 warn ()을 호출합니다.</target>
        </trans-unit>
        <trans-unit id="f74ecb659d2dae844024a2a7edc2eb73241a6948" translate="yes" xml:space="preserve">
          <source>The Color Stack</source>
          <target state="translated">컬러 스택</target>
        </trans-unit>
        <trans-unit id="0e751c2cd8e75382ca856116ff4097eafeafab18" translate="yes" xml:space="preserve">
          <source>The Comprehensive Perl Archive Network (CPAN) offers a wealth of extensions, some of which require a C compiler to build. Look in &lt;a href=&quot;http://www.cpan.org/&quot;&gt;http://www.cpan.org/&lt;/a&gt; for more information on CPAN.</source>
          <target state="translated">CPAN (Comprehensive Perl Archive Network)은 다양한 확장 기능을 제공하며,이 중 일부는 빌드하려면 C 컴파일러가 필요합니다. CPAN에 대한 자세한 내용 은 &lt;a href=&quot;http://www.cpan.org/&quot;&gt;http://www.cpan.org/&lt;/a&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="2a3290ed25612a4eaac36507c34578ae080df3b2" translate="yes" xml:space="preserve">
          <source>The Comprehensive Perl Archive Network. (See the Camel Preface and Camel chapter 19, &amp;ldquo;CPAN&amp;rdquo; for details.)</source>
          <target state="translated">종합적인 Perl 아카이브 네트워크. (자세한 내용은 Camel Preface 및 Camel 19 장 &quot;CPAN&quot;을 참조하십시오.)</target>
        </trans-unit>
        <trans-unit id="fbde9b6a7a92989c5e72924e954088639a082096" translate="yes" xml:space="preserve">
          <source>The Config module contains all the information that was available to the &lt;code&gt;Configure&lt;/code&gt; program at Perl build time (over 900 values).</source>
          <target state="translated">구성 모듈에는 Perl 빌드 시간 (900 개 이상의 값)에서 &lt;code&gt;Configure&lt;/code&gt; 프로그램에 사용 가능한 모든 정보가 포함됩니다 .</target>
        </trans-unit>
        <trans-unit id="f82ec628dc6b60e59ddc0aa4e8da2f644e35b47f" translate="yes" xml:space="preserve">
          <source>The Config module is installed into the architecture and version specific library directory ($Config{installarchlib}) and it checks the perl version number when loaded.</source>
          <target state="translated">구성 모듈은 아키텍처 및 버전 별 라이브러리 디렉토리 ($ Config {installarchlib})에 설치되며로드 될 때 perl 버전 번호를 확인합니다.</target>
        </trans-unit>
        <trans-unit id="cfdfb921abaaac3f8f467a1db7786aa8a018327d" translate="yes" xml:space="preserve">
          <source>The Config::Extensions module provides a hash &lt;code&gt;%Extensions&lt;/code&gt; containing all the core extensions that were enabled for this perl. The hash is keyed by extension name, with each entry having one of 3 possible values:</source>
          <target state="translated">Config :: Extensions 모듈은 이 perl에 대해 활성화 된 모든 코어 확장을 포함 하는 해시 &lt;code&gt;%Extensions&lt;/code&gt; 를 제공합니다 . 해시는 확장 이름으로 키가 지정되며 각 항목에는 3 가지 가능한 값 중 하나가 있습니다.</target>
        </trans-unit>
        <trans-unit id="93bfc257b83bc0f3f1d509f0feed1135175ce382" translate="yes" xml:space="preserve">
          <source>The Conformance Test for the UCA is available under &lt;a href=&quot;http://www.unicode.org/Public/UCA/&quot;&gt;http://www.unicode.org/Public/UCA/&lt;/a&gt;.</source>
          <target state="translated">UCA 적합성 테스트는 &lt;a href=&quot;http://www.unicode.org/Public/UCA/&quot;&gt;http://www.unicode.org/Public/UCA/에&lt;/a&gt; 있습니다.</target>
        </trans-unit>
        <trans-unit id="a9099e439d69987253b372d83d6abc9bc4c12963" translate="yes" xml:space="preserve">
          <source>The Curses module from CPAN provides a dynamically loadable object module interface to a curses library. A small demo can be found at the directory &lt;a href=&quot;http://www.cpan.org/authors/Tom_Christiansen/scripts/rep.gz&quot;&gt;http://www.cpan.org/authors/Tom_Christiansen/scripts/rep.gz&lt;/a&gt; ; this program repeats a command and updates the screen as needed, rendering &lt;b&gt;rep ps axu&lt;/b&gt; similar to &lt;b&gt;top&lt;/b&gt;.</source>
          <target state="translated">CPAN의 Curses 모듈은 curses 라이브러리에 동적으로로드 가능한 오브젝트 모듈 인터페이스를 제공합니다. 작은 데모는 &lt;a href=&quot;http://www.cpan.org/authors/Tom_Christiansen/scripts/rep.gz&quot;&gt;http://www.cpan.org/authors/Tom_Christiansen/scripts/rep.gz&lt;/a&gt; 디렉토리에 있습니다 . 이 프로그램은 명령을 반복하고 필요에 따라 화면을 업데이트하여 &lt;b&gt;rep ps axu&lt;/b&gt; 를 &lt;b&gt;top&lt;/b&gt; 과 유사하게 렌더링 합니다.</target>
        </trans-unit>
        <trans-unit id="e14abdffc22e514738def0dbe442a1a41dfd62a8" translate="yes" xml:space="preserve">
          <source>The CvDEPTH'th entry of a PADLIST is a PAD (an AV) which is the stack frame at that depth of recursion into the CV. The 0th slot of a frame AV is an AV which is @_. Other entries are storage for variables and op targets.</source>
          <target state="translated">PADLIST의 CvDEPTH '번째 항목은 PAD (AV)이며 CV에 대한 재귀 깊이의 스택 프레임입니다. 프레임 AV의 0 번째 슬롯은 AV 인 AV입니다. 다른 항목은 변수 및 op 대상을위한 스토리지입니다.</target>
        </trans-unit>
        <trans-unit id="4c8b698edc086f6d5f09074b59ab49b539df94b8" translate="yes" xml:space="preserve">
          <source>The Cygwin &lt;code&gt;&lt;a href=&quot;functions/chroot&quot;&gt;chroot()&lt;/a&gt;&lt;/code&gt; implementation has holes (it can not restrict file access by native Win32 programs).</source>
          <target state="translated">Cygwin &lt;code&gt;&lt;a href=&quot;functions/chroot&quot;&gt;chroot()&lt;/a&gt;&lt;/code&gt; 구현에는 구멍이 있습니다 (기본 Win32 프로그램의 파일 액세스를 제한 할 수 없음).</target>
        </trans-unit>
        <trans-unit id="24d81b19eab85eca5ef9e9f2cae5a86c87573ad6" translate="yes" xml:space="preserve">
          <source>The Cygwin &lt;code&gt;&lt;a href=&quot;functions/stat&quot;&gt;stat()&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/lstat&quot;&gt;lstat()&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;functions/readlink&quot;&gt;readlink()&lt;/a&gt;&lt;/code&gt; functions make the</source>
          <target state="translated">Cygwin &lt;code&gt;&lt;a href=&quot;functions/stat&quot;&gt;stat()&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;functions/lstat&quot;&gt;lstat()&lt;/a&gt;&lt;/code&gt; 및 &lt;code&gt;&lt;a href=&quot;functions/readlink&quot;&gt;readlink()&lt;/a&gt;&lt;/code&gt; 함수는</target>
        </trans-unit>
        <trans-unit id="ba192629e74cc31eca240e3c966c286bb927abba" translate="yes" xml:space="preserve">
          <source>The Cygwin environment for Win32;</source>
          <target state="translated">Win32 용 Cygwin 환경;</target>
        </trans-unit>
        <trans-unit id="1c285b2bd2bfb42d86890b2e5f1ea0881773f57b" translate="yes" xml:space="preserve">
          <source>The Cygwin tools are ports of the popular GNU development tools for Win32 platforms. They run thanks to the Cygwin library which provides the UNIX system calls and environment these programs expect. More information about this project can be found at:</source>
          <target state="translated">Cygwin 도구는 Win32 플랫폼 용으로 널리 사용되는 GNU 개발 도구의 포트입니다. Cygwin 라이브러리 덕분에 UNIX 시스템 호출 및 이러한 프로그램이 기대하는 환경을 제공합니다. 이 프로젝트에 대한 자세한 내용은 다음을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="b1c1f15ff329b2e8194094e815d08360dc942cc0" translate="yes" xml:space="preserve">
          <source>The DB_BTREE format is useful when you want to store data in a given order. By default the keys will be stored in lexical order, but as you will see from the example shown in the next section, it is very easy to define your own sorting function.</source>
          <target state="translated">DB_BTREE 형식은 지정된 순서로 데이터를 저장하려는 경우에 유용합니다. 기본적으로 키는 어휘 순서로 저장되지만 다음 섹션의 예에서 볼 수 있듯이 자체 정렬 기능을 정의하는 것은 매우 쉽습니다.</target>
        </trans-unit>
        <trans-unit id="da84dd6e821316467ab753b852b3c6f56039e638" translate="yes" xml:space="preserve">
          <source>The DB_File interface was written by Paul Marquess &amp;lt;pmqs@cpan.org&amp;gt;.</source>
          <target state="translated">DB_File 인터페이스는 Paul Marquess &amp;lt;pmqs@cpan.org&amp;gt;에 의해 작성되었습니다.</target>
        </trans-unit>
        <trans-unit id="bc4b830fc8435dde71447902321a40e9b54b9e85" translate="yes" xml:space="preserve">
          <source>The DB_File tests (db-btree.t, db-hash.t, db-recno.t) may fail you have installed a newer version of Berkeley DB into the system and the -I and -L compiler and linker flags introduce version conflicts with the DB 1.85 headers and libraries that came with the Tru64. For example, mixing a DB v2 library with the DB v1 headers is a bad idea. Watch out for Configure options -Dlocincpth and -Dloclibpth, and check your /usr/local/include and /usr/local/lib since they are included by default.</source>
          <target state="translated">DB_File 테스트 (db-btree.t, db-hash.t, db-recno.t)가 시스템에 최신 버전의 Berkeley DB를 설치하지 못했을 수 있으며 -I 및 -L 컴파일러 및 링커 플래그는 버전 충돌을 유발합니다. Tru64와 함께 제공되는 DB 1.85 헤더 및 라이브러리 예를 들어, DB v2 라이브러리를 DB v1 헤더와 혼합하는 것은 나쁜 생각입니다. 구성 옵션 -Dlocincpth 및 -Dloclibpth를 확인하고 / usr / local / include 및 / usr / local / lib는 기본적으로 포함되어 있으므로 확인하십시오.</target>
        </trans-unit>
        <trans-unit id="4aa7475384871e821eca8486a731a00b705b7453" translate="yes" xml:space="preserve">
          <source>The DB_HASH file format is probably the most commonly used of the three file formats that &lt;b&gt;DB_File&lt;/b&gt; supports. It is also very straightforward to use.</source>
          <target state="translated">DB_HASH 파일 형식은 &lt;b&gt;DB_File이&lt;/b&gt; 지원 하는 세 가지 파일 형식 중 가장 일반적으로 사용됩니다 . 사용하는 것도 매우 간단합니다.</target>
        </trans-unit>
        <trans-unit id="093622558089c2ef694fcbf575b62744b7d5e02e" translate="yes" xml:space="preserve">
          <source>The DEBUGGING define exposes more code to the compiler, therefore more ways for things to go wrong. You should try it.</source>
          <target state="translated">DEBUGGING 정의는 더 많은 코드를 컴파일러에 노출 시키므로 더 많은 문제가 발생할 수 있습니다. 당신은 그것을 시도해야합니다.</target>
        </trans-unit>
        <trans-unit id="cd3218b27f646c5b1da0c16a7d86f78d988008e7" translate="yes" xml:space="preserve">
          <source>The DECC$FILENAME_UNIX_REPORT logical name controls how Perl interprets filenames to the extent that Perl uses the CRTL internally for many purposes, and attempts to follow CRTL conventions for reporting filenames. The DECC$FILENAME_UNIX_ONLY feature differs in that it expects all filenames passed to the C run-time to be already in Unix format. This feature is not yet supported in Perl since Perl uses traditional OpenVMS file specifications internally and in the test harness, and it is not yet clear whether this mode will be useful or useable. The feature logical name DECC$POSIX_COMPLIANT_PATHNAMES is new with the RMS Symbolic Link SDK and included with OpenVMS v8.3, but is not yet supported in Perl.</source>
          <target state="translated">DECC $ FILENAME_UNIX_REPORT 논리 이름은 Perl이 여러 목적으로 내부적으로 CRTL을 사용하는 정도까지 Perl이 파일 이름을 해석하는 방법을 제어하고 파일 이름보고를 위해 CRTL 규칙을 따르려고합니다. DECC $ FILENAME_UNIX_ONLY 기능은 C 런타임에 전달 된 모든 파일 이름이 이미 Unix 형식 일 것으로 예상한다는 점에서 다릅니다. Perl은 내부 및 테스트 하네스에서 전통적인 OpenVMS 파일 사양을 사용하므로이 기능은 아직 Perl에서 지원되지 않으며이 모드가 유용하거나 사용 가능한지 아직 명확하지 않습니다. 기능 논리 이름 DECC $ POSIX_COMPLIANT_PATHNAMES는 RMS Symbolic Link SDK의 새로운 기능이며 OpenVMS v8.3에 포함되어 있지만 Perl에서는 아직 지원되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="9d134d51441969270625bd1289ca90b131d940f8" translate="yes" xml:space="preserve">
          <source>The DOS FAT filesystem can accommodate only &quot;8.3&quot; style filenames. Under the &quot;case-insensitive, but case-preserving&quot; HPFS (OS/2) and NTFS (NT) filesystems you may have to be careful about case returned with functions like &lt;code&gt;&lt;a href=&quot;functions/readdir&quot;&gt;readdir&lt;/a&gt;&lt;/code&gt; or used with functions like &lt;code&gt;&lt;a href=&quot;functions/open&quot;&gt;open&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;functions/opendir&quot;&gt;opendir&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">DOS FAT 파일 시스템은 &quot;8.3&quot;스타일 파일 이름 만 수용 할 수 있습니다. &quot;대소 문자를 구분하지 않지만 대소 문자를 보존하는&quot;HPFS (OS / 2) 및 NTFS (NT) 파일 시스템에서 &lt;code&gt;&lt;a href=&quot;functions/readdir&quot;&gt;readdir&lt;/a&gt;&lt;/code&gt; 과 같은 함수로 반환 되거나 &lt;code&gt;&lt;a href=&quot;functions/open&quot;&gt;open&lt;/a&gt;&lt;/code&gt; 또는 &lt;code&gt;&lt;a href=&quot;functions/opendir&quot;&gt;opendir&lt;/a&gt;&lt;/code&gt; 과 같은 함수와 함께 사용되는 경우에주의해야합니다 .</target>
        </trans-unit>
        <trans-unit id="37eace57ea45e399a72f8107235f1e100b1ee8bb" translate="yes" xml:space="preserve">
          <source>The DynaLoader is designed to be a very simple high-level interface that is sufficiently general to cover the requirements of SunOS, HP-UX, Linux, VMS and other platforms.</source>
          <target state="translated">DynaLoader는 SunOS, HP-UX, Linux, VMS 및 기타 플랫폼의 요구 사항을 충분히 수용 할 수있는 매우 간단한 고급 인터페이스로 설계되었습니다.</target>
        </trans-unit>
        <trans-unit id="f912c465834fcee4d486c53fdce3a5c5359e646e" translate="yes" xml:space="preserve">
          <source>The EBCDIC code page in use on Siemens' BS2000 system is distinct from 1047 and 0037. It is identified below as the POSIX-BC set. Like 0037 and 1047, it is the same as ISO 8859-1 in 20 code point values.</source>
          <target state="translated">Siemens BS2000 시스템에서 사용중인 EBCDIC 코드 페이지는 1047 및 0037과 다릅니다. 아래는 POSIX-BC 세트로 식별됩니다. 0037 및 1047과 마찬가지로 20 개의 코드 포인트 값에서 ISO 8859-1과 동일합니다.</target>
        </trans-unit>
        <trans-unit id="79364f1341ebeff610668d7a68e618ee03998d55" translate="yes" xml:space="preserve">
          <source>The EBCDIC controls provide three possible line terminator characters, CR (0x0D), LF (0x25), and NL (0x15). On ASCII platforms, the symbols &quot;NL&quot; and &quot;LF&quot; refer to the same character, but in strict EBCDIC terminology they are different ones. The EBCDIC NL is mapped to the C1 control called &quot;NEL&quot; (&quot;Next Line&quot;; here's a case where the mapping makes quite a bit of sense, and hence isn't just arbitrary). On some EBCDIC platforms, this NL or NEL is the typical line terminator. This is true of z/OS and BS2000. In these platforms, the C compilers will swap the LF and NEL code points, so that &lt;code&gt;&quot;\n&quot;&lt;/code&gt; is 0x15, and refers to NL. Perl does that too; you can see it in the code chart &lt;a href=&quot;#recipe-3&quot;&gt;below&lt;/a&gt;. This makes things generally &quot;just work&quot; without you even having to be aware that there is a swap.</source>
          <target state="translated">EBCDIC 컨트롤은 CR (0x0D), LF (0x25) 및 NL (0x15)의 세 가지 줄 종결 자 문자를 제공합니다. ASCII 플랫폼에서 &quot;NL&quot;및 &quot;LF&quot;기호는 동일한 문자를 나타내지 만 엄격한 EBCDIC 용어에서는 서로 다릅니다. EBCDIC NL은 &quot;NEL&quot;( &quot;Next Line&quot;)이라는 C1 컨트롤에 매핑됩니다. 여기에 매핑이 상당히 의미가 있고 임의적이지 않습니다. 일부 EBCDIC 플랫폼에서이 NL 또는 NEL은 일반적인 회선 종결 자입니다. 이는 z / OS 및 BS2000의 경우에 해당합니다. 이러한 플랫폼에서 C 컴파일러는 LF 및 NEL 코드 포인트를 교환하므로 &lt;code&gt;&quot;\n&quot;&lt;/code&gt; 은 0x15이며 NL을 참조합니다. 펄도 그렇게한다. &lt;a href=&quot;#recipe-3&quot;&gt;아래&lt;/a&gt; 코드 차트에서 볼 수 있습니다 . 이것은 일반적으로 &quot;그냥 작동합니다&quot;스왑이 있다는 것을 알 필요조차 없습니다.</target>
        </trans-unit>
        <trans-unit id="ebf0849b9c64cecc2853f7671dcdaa67dfb5bd40" translate="yes" xml:space="preserve">
          <source>The EMX environment for DOS, OS/2, etc. emx@iaehv.nl, &lt;a href=&quot;ftp://hobbes.nmsu.edu/pub/os2/dev/emx/&quot;&gt;ftp://hobbes.nmsu.edu/pub/os2/dev/emx/&lt;/a&gt; Also &lt;a href=&quot;perlos2&quot;&gt;perlos2&lt;/a&gt;.</source>
          <target state="translated">DOS, OS / 2 등의 EMX 환경. emx@iaehv.nl, &lt;a href=&quot;ftp://hobbes.nmsu.edu/pub/os2/dev/emx/&quot;&gt;ftp://hobbes.nmsu.edu/pub/os2/dev/emx/&lt;/a&gt; 또한 &lt;a href=&quot;perlos2&quot;&gt;perlos2&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="256f82d42fe9ffdaee741a9745d27494e5988357" translate="yes" xml:space="preserve">
          <source>The EXPORT_XSUB_SYMBOLS: Keyword</source>
          <target state="translated">EXPORT_XSUB_SYMBOLS : 키워드</target>
        </trans-unit>
        <trans-unit id="dc2d72754e20f4d7576339fd0b632f9904767606" translate="yes" xml:space="preserve">
          <source>The EXPORT_XSUB_SYMBOLS: keyword is likely something you will never need. In perl versions earlier than 5.16.0, this keyword does nothing. Starting with 5.16, XSUB symbols are no longer exported by default. That is, they are &lt;code&gt;static&lt;/code&gt; functions. If you include</source>
          <target state="translated">EXPORT_XSUB_SYMBOLS : 키워드는 아마도 필요하지 않을 것입니다. 5.16.0 이전의 perl 버전에서이 키워드는 아무 작업도 수행하지 않습니다. 5.16부터는 XSUB 기호가 더 이상 기본적으로 내보내지지 않습니다. 즉, &lt;code&gt;static&lt;/code&gt; 함수입니다. 포함하면</target>
        </trans-unit>
        <trans-unit id="617a336bda8dcf8d5dea55c8c402db880f815331" translate="yes" xml:space="preserve">
          <source>The EXPR can be arbitrarily complicated provided its final operation is an element or slice of an aggregate:</source>
          <target state="translated">EXPR은 최종 작업이 집합의 요소 또는 슬라이스 인 경우 임의로 복잡 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c1575f71c727dbc3cc08a704b1c6455476c26b21" translate="yes" xml:space="preserve">
          <source>The EXTEND() macro is used to make room on the argument stack for 2 return values. The PPCODE: directive causes the &lt;b&gt;xsubpp&lt;/b&gt; compiler to create a stack pointer available as &lt;code&gt;SP&lt;/code&gt; , and it is this pointer which is being used in the EXTEND() macro. The values are then pushed onto the stack with the PUSHs() macro.</source>
          <target state="translated">EXTEND () 매크로는 2 개의 반환 값을위한 인수 스택을위한 공간을 만드는 데 사용됩니다. PPCODE : 지시문은 &lt;b&gt;xsubpp&lt;/b&gt; 컴파일러가 &lt;code&gt;SP&lt;/code&gt; 로 사용할 수있는 스택 포인터를 작성 하게하며이 포인터 는 EXTEND () 매크로에서 사용됩니다. 그런 다음 PUSHs () 매크로를 사용하여 값을 스택으로 푸시합니다.</target>
        </trans-unit>
        <trans-unit id="24d94044d20d73e1e217702a7997adf3573359ef" translate="yes" xml:space="preserve">
          <source>The Eclipse Perl Integration Project integrates Perl editing/debugging with Eclipse.</source>
          <target state="translated">Eclipse Perl 통합 프로젝트는 Perl 편집 / 디버깅을 Eclipse와 통합합니다.</target>
        </trans-unit>
        <trans-unit id="089e76f353c6f78abb99ad80ce2ae65f3d8d4946" translate="yes" xml:space="preserve">
          <source>The Eighth, and Final Rule of Sys::Syslog is:</source>
          <target state="translated">Sys :: Syslog의 여덟 번째 규칙 규칙은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="45e6da0d5cb898ad01f0a9bae1837646548ecfe3" translate="yes" xml:space="preserve">
          <source>The Ellipsis Statement</source>
          <target state="translated">줄임표</target>
        </trans-unit>
        <trans-unit id="e36201c57b08755e4246cc5ce75f450c34e846b3" translate="yes" xml:space="preserve">
          <source>The Encode module is not available.</source>
          <target state="translated">인코딩 모듈을 사용할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="a85df1c32e44ae493b3d9d47f5ce746d47a72805" translate="yes" xml:space="preserve">
          <source>The Encode package comes with</source>
          <target state="translated">Encode 패키지는 함께 제공됩니다</target>
        </trans-unit>
        <trans-unit id="1795442e49f2b33213fac82a59f9aa602577ec9d" translate="yes" xml:space="preserve">
          <source>The End Of Cargo Cult Programming</source>
          <target state="translated">화물 컬트 프로그래밍의 끝</target>
        </trans-unit>
        <trans-unit id="8b81b46699720b949c812be3aaed26b804f52e55" translate="yes" xml:space="preserve">
          <source>The English module, loaded via</source>
          <target state="translated">통해로드 된 영어 모듈</target>
        </trans-unit>
        <trans-unit id="f6ae3dbecbd56f2fb799d619d775a492c5918b30" translate="yes" xml:space="preserve">
          <source>The English name $EXCEPTIONS_BEING_CAUGHT is slightly misleading, because the &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; value does not indicate whether exceptions are being caught, since compilation of the main program does not catch exceptions.</source>
          <target state="translated">영어 프로그램 $ EXCEPTIONS_BEING_CAUGHT는 기본 프로그램의 컴파일이 예외를 포착하지 않기 때문에 &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; 값이 예외가 포착되는지 여부를 나타내지 않기 때문에 약간 오도 됩니다.</target>
        </trans-unit>
        <trans-unit id="a563900434d5f24e6b403136d7617e396332a2c1" translate="yes" xml:space="preserve">
          <source>The Execution of this file takes 2 parameters as input. The first being the NetWare SDK path, second being the path for CodeWarrior Compiler &amp;amp; tools. Execution of this file sets these paths and also sets the build type to Release by default.</source>
          <target state="translated">이 파일의 실행은 2 개의 매개 변수를 입력으로 사용합니다. 첫 번째는 NetWare SDK 경로이고, 두 번째는 CodeWarrior 컴파일러 및 도구의 경로입니다. 이 파일을 실행하면 이러한 경로가 설정되고 빌드 유형도 기본적으로 릴리스로 설정됩니다.</target>
        </trans-unit>
        <trans-unit id="f147b2a13785e77381665ed5dff1c497a9b6d450" translate="yes" xml:space="preserve">
          <source>The Exporter module implements an &lt;code&gt;&lt;a href=&quot;functions/import&quot;&gt;import&lt;/a&gt;&lt;/code&gt; method which allows a module to export functions and variables to its users' namespaces. Many modules use Exporter rather than implementing their own &lt;code&gt;&lt;a href=&quot;functions/import&quot;&gt;import&lt;/a&gt;&lt;/code&gt; method because Exporter provides a highly flexible interface, with an implementation optimised for the common case.</source>
          <target state="translated">Exporter 모듈은 &lt;code&gt;&lt;a href=&quot;functions/import&quot;&gt;import&lt;/a&gt;&lt;/code&gt; 메소드를 구현하여 모듈이 함수와 변수를 사용자의 네임 스페이스로 내보낼 수 있도록합니다. Exporter는 일반적인 경우에 최적화 된 구현과 함께 매우 유연한 인터페이스를 제공하므로 많은 모듈이 자체 &lt;code&gt;&lt;a href=&quot;functions/import&quot;&gt;import&lt;/a&gt;&lt;/code&gt; 방법을 구현하는 대신 Exporter를 사용합니다.</target>
        </trans-unit>
        <trans-unit id="f4abee164dbbeb51e77682498dd2aaadf957faf7" translate="yes" xml:space="preserve">
          <source>The Exporter module will convert an attempt to import a number from a module into a call to &lt;code&gt;$module_name-&amp;gt;VERSION($value)&lt;/code&gt; . This can be used to validate that the version of the module being used is greater than or equal to the required version.</source>
          <target state="translated">내보내기 모듈은 모듈에서 번호를 가져 오려는 시도를 &lt;code&gt;$module_name-&amp;gt;VERSION($value)&lt;/code&gt; 에 대한 호출로 변환합니다 . 사용중인 모듈의 버전이 필요한 버전 이상인지 확인하는 데 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="7c52e8ff54cbaf19ce5405ab1f4fcb23fdb70082" translate="yes" xml:space="preserve">
          <source>The Extended Binary Coded Decimal Interchange Code refers to a large collection of single- and multi-byte coded character sets that are quite different from ASCII and ISO 8859-1, and are all slightly different from each other; they typically run on host computers. The EBCDIC encodings derive from 8-bit byte extensions of Hollerith punched card encodings, which long predate ASCII. The layout on the cards was such that high bits were set for the upper and lower case alphabetic characters &lt;code&gt;[a-z]&lt;/code&gt; and &lt;code&gt;[A-Z]&lt;/code&gt; , but there were gaps within each Latin alphabet range, visible in the table &lt;a href=&quot;#recipe-3&quot;&gt;below&lt;/a&gt;. These gaps can cause complications.</source>
          <target state="translated">확장 이진 코드화 된 10 진수 교환 코드는 ASCII 및 ISO 8859-1과는 상당히 다르고 모두 약간 다른 1 바이트 및 멀티 바이트 코드화 된 문자 집합의 모음입니다. 이들은 일반적으로 호스트 컴퓨터에서 실행됩니다. EBCDIC 인코딩은 ASCII 이전의 Hollerith 펀치 카드 인코딩의 8 비트 바이트 확장에서 파생됩니다. 카드의 레이아웃은 대문자 및 소문자 알파벳 문자 &lt;code&gt;[a-z]&lt;/code&gt; 및 &lt;code&gt;[A-Z]&lt;/code&gt; 대해 높은 비트가 설정 되었지만 각 라틴 알파벳 범위 내에는 &lt;a href=&quot;#recipe-3&quot;&gt;아래&lt;/a&gt; 표에서 볼 수있는 간격이있었습니다 . 이러한 차이는 합병증을 유발할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="6f06c8685e10bb2298b3fbb853d3946ef5600f7b" translate="yes" xml:space="preserve">
          <source>The Extended Time field (ID &quot;UT&quot;), set using the &lt;code&gt;exTime&lt;/code&gt; option, and the Unix2 extra field (ID &quot;Ux), set using the &lt;code&gt;exUnix2&lt;/code&gt; option, are examples of extra fields.</source>
          <target state="translated">사용하여 설정 확장 된 시간 필드 (ID &quot;UT&quot;), &lt;code&gt;exTime&lt;/code&gt; 의 옵션을, 그리고 Unix2 추가 필드 (ID &quot;UX)의 사용 설정 &lt;code&gt;exUnix2&lt;/code&gt; 의 옵션은 추가 필드의 예입니다.</target>
        </trans-unit>
        <trans-unit id="fcb46fea1b1fd4aac6612092ac926ea662164c18" translate="yes" xml:space="preserve">
          <source>The FALLBACK: Keyword</source>
          <target state="translated">폴백 : 키워드</target>
        </trans-unit>
        <trans-unit id="81e67da9b589fcad262531decfe34d5e04ad538d" translate="yes" xml:space="preserve">
          <source>The FTP protocol allows files to be sent to or fetched from the server. Each transfer involves a &lt;b&gt;local file&lt;/b&gt; (on the client) and a &lt;b&gt;remote file&lt;/b&gt; (on the server). In this module, the same file name will be used for both local and remote if only one is specified. This means that transferring remote file &lt;code&gt;/path/to/file&lt;/code&gt; will try to put that file in &lt;code&gt;/path/to/file&lt;/code&gt; locally, unless you specify a local file name.</source>
          <target state="translated">FTP 프로토콜을 사용하면 서버로 파일을 보내거나 가져올 수 있습니다. 각 전송에는 &lt;b&gt;로컬 파일&lt;/b&gt; (클라이언트)과 &lt;b&gt;원격 파일&lt;/b&gt; (서버)이 포함됩니다. 이 모듈에서 하나의 파일 만 지정하면 로컬 및 원격 모두에 동일한 파일 이름이 사용됩니다. 이는 원격 파일 &lt;code&gt;/path/to/file&lt;/code&gt; 을 전송 하면 로컬 파일 이름을 지정하지 않는 한 해당 파일을 &lt;code&gt;/path/to/file&lt;/code&gt; 에 로컬로 배치하려고합니다 .</target>
        </trans-unit>
        <trans-unit id="19ca5c1f27cf809b055786ff82f78ffa209098e1" translate="yes" xml:space="preserve">
          <source>The Field @* for Variable-Width Multi-Line Text</source>
          <target state="translated">가변 폭 다중 라인 텍스트를위한 필드 @ *</target>
        </trans-unit>
        <trans-unit id="e40af0a7d64eded8997f1df4aaf651855caff401" translate="yes" xml:space="preserve">
          <source>The Field ^* for Variable-Width One-line-at-a-time Text</source>
          <target state="translated">한 번에 한 줄씩 가변 너비 텍스트의 필드 ^ *</target>
        </trans-unit>
        <trans-unit id="051fa4e84ae2fee9062644631a452abe1ffe1819" translate="yes" xml:space="preserve">
          <source>The Fifth Rule of Sys::Syslog is:</source>
          <target state="translated">Sys :: Syslog의 다섯 번째 규칙은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="916ba58ad633c9294928c7ea005c39a240dcf055" translate="yes" xml:space="preserve">
          <source>The File::Compare::compare function compares the contents of two sources, each of which can be a file or a file handle. It is exported from File::Compare by default.</source>
          <target state="translated">File :: Compare :: compare 함수는 파일 또는 파일 핸들 일 수있는 두 가지 소스의 내용을 비교합니다. File :: Compare에서 기본적으로 내보내집니다.</target>
        </trans-unit>
        <trans-unit id="ca8ebdce3138f1ac959e2447b9991cb0fe638baf" translate="yes" xml:space="preserve">
          <source>The File::Copy module provides two basic functions, &lt;code&gt;copy&lt;/code&gt; and &lt;code&gt;move&lt;/code&gt; , which are useful for getting the contents of a file from one place to another.</source>
          <target state="translated">File :: Copy 모듈은 파일 의 내용을 한 곳에서 다른 곳으로 가져 오는 데 유용한 &lt;code&gt;copy&lt;/code&gt; 및 &lt;code&gt;move&lt;/code&gt; 의 두 가지 기본 기능을 제공합니다 .</target>
        </trans-unit>
        <trans-unit id="09b1bcb4dc016e97cb98e50f74998315b3fcc200" translate="yes" xml:space="preserve">
          <source>The File::Temp has been a standard module since Perl 5.6.1. If you don't have a modern enough Perl installed, use the &lt;code&gt;new_tmpfile&lt;/code&gt; class method from the IO::File module to get a filehandle opened for reading and writing. Use it if you don't need to know the file's name:</source>
          <target state="translated">File :: Temp는 Perl 5.6.1 이후 표준 모듈입니다. 최신 Perl을 설치하지 않은 경우 IO :: File 모듈에서 &lt;code&gt;new_tmpfile&lt;/code&gt; 클래스 메소드를 사용하여 읽고 쓸 수 있도록 파일 핸들을여십시오. 파일 이름을 알 필요가없는 경우 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="b913943216bac4cfd103b39436c3d12211246595" translate="yes" xml:space="preserve">
          <source>The Filter</source>
          <target state="translated">필터</target>
        </trans-unit>
        <trans-unit id="43340f79f355f6131007a53845317a0044b9a6f5" translate="yes" xml:space="preserve">
          <source>The Filter::Simple module exports into the package that calls &lt;code&gt;FILTER&lt;/code&gt; (or &lt;code&gt;&lt;a href=&quot;../functions/use&quot;&gt;use&lt;/a&gt;&lt;/code&gt;s it directly) -- such as package &quot;BANG&quot; in the above example -- two automagically constructed subroutines -- &lt;code&gt;&lt;a href=&quot;../functions/import&quot;&gt;import&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;unimport&lt;/code&gt; -- which take care of all the nasty details.</source>
          <target state="translated">통화하는 패키지로 필터 : 간단한 모듈 수출 &lt;code&gt;FILTER&lt;/code&gt; (또는 &lt;code&gt;&lt;a href=&quot;../functions/use&quot;&gt;use&lt;/a&gt;&lt;/code&gt; 직접 S) - 같은 패키지 &quot;BANG&quot;로 위의 예 -이 개 자동적으로 구성된 서브 루틴 - &lt;code&gt;&lt;a href=&quot;../functions/import&quot;&gt;import&lt;/a&gt;&lt;/code&gt; 및 &lt;code&gt;unimport&lt;/code&gt; - 모든 돌봐 불쾌한 세부 사항.</target>
        </trans-unit>
        <trans-unit id="6e7c10894c7b8df4a2736098e84057abd21e37b8" translate="yes" xml:space="preserve">
          <source>The Filter::Simple module provides a simplified interface to Filter::Util::Call; one that is sufficient for most common cases.</source>
          <target state="translated">Filter :: Simple 모듈은 Filter :: Util :: Call에 단순화 된 인터페이스를 제공합니다. 가장 일반적인 경우에 충분한 것.</target>
        </trans-unit>
        <trans-unit id="bddf2be2229684864beadb4258752319125e5d27" translate="yes" xml:space="preserve">
          <source>The First Rule of Sys::Syslog is:</source>
          <target state="translated">Sys :: Syslog의 첫 번째 규칙은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="c785438975752290d77a3cbc9b618a56d2ef340f" translate="yes" xml:space="preserve">
          <source>The Fourth Rule of Sys::Syslog is:</source>
          <target state="translated">Sys :: Syslog의 네 번째 규칙은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="9fc0887978d7a0f1367b4c9ada979ec50584ea98" translate="yes" xml:space="preserve">
          <source>The FreeBSD extensions to the POSIX standard are the following flags:</source>
          <target state="translated">POSIX 표준에 대한 FreeBSD 확장은 다음 플래그입니다.</target>
        </trans-unit>
        <trans-unit id="ab3e557141760f9299f04ad34f2deeabfcc7fef0" translate="yes" xml:space="preserve">
          <source>The FreeMiNT port uses GNU dld for loadable module capabilities. So ensure you have that library installed when building perl.</source>
          <target state="translated">FreeMiNT 포트는로드 가능한 모듈 기능을 위해 GNU dld를 사용합니다. 따라서 perl을 빌드 할 때 해당 라이브러리가 설치되어 있는지 확인하십시오.</target>
        </trans-unit>
        <trans-unit id="f0fd999d74111938e315c20e741e008d3fd7c5c7" translate="yes" xml:space="preserve">
          <source>The GNU C Compiler</source>
          <target state="translated">GNU C 컴파일러</target>
        </trans-unit>
        <trans-unit id="d9d4765228818a588c101c574dcfb1a870a89ab7" translate="yes" xml:space="preserve">
          <source>The GV returned from &lt;code&gt;gv_fetchmeth&lt;/code&gt; may be a method cache entry, which is not visible to Perl code. So when calling &lt;code&gt;call_sv&lt;/code&gt; , you should not use the GV directly; instead, you should use the method's CV, which can be obtained from the GV with the &lt;code&gt;GvCV&lt;/code&gt; macro.</source>
          <target state="translated">&lt;code&gt;gv_fetchmeth&lt;/code&gt; 에서 반환 된 GV 는 메서드 캐시 항목 일 수 있으며 Perl 코드에는 보이지 않습니다. 따라서 &lt;code&gt;call_sv&lt;/code&gt; 를 호출 할 때 GV를 직접 사용해서는 안됩니다. 대신 &lt;code&gt;GvCV&lt;/code&gt; 매크로 를 사용하여 GV에서 얻을 수있는 메소드의 CV를 사용해야합니다 .</target>
        </trans-unit>
        <trans-unit id="b49130058618570dadbdb5fe7db0bf1f3977aebe" translate="yes" xml:space="preserve">
          <source>The GV which was last used for a filehandle input operation. (&lt;code&gt;&amp;lt;FH&amp;gt;&lt;/code&gt; )</source>
          <target state="translated">파일 핸들 입력 조작에 마지막으로 사용 된 GV ( &lt;code&gt;&amp;lt;FH&amp;gt;&lt;/code&gt; )</target>
        </trans-unit>
        <trans-unit id="f9210879f69c79f8b2c57a2c424d2e90c56d2548" translate="yes" xml:space="preserve">
          <source>The G_KEEPERR flag is meant to be used in conjunction with G_EVAL in</source>
          <target state="translated">G_KEEPERR 플래그는 다음에서 G_EVAL과 함께 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="270052086120a712d1ce772352a3feccf55ed3d1" translate="yes" xml:space="preserve">
          <source>The G_KEEPERR flag was introduced in Perl version 5.002.</source>
          <target state="translated">G_KEEPERR 플래그는 Perl 버전 5.002에서 도입되었습니다.</target>
        </trans-unit>
        <trans-unit id="c166e1d44ca297aba655d34fc5c35cdba6de63b6" translate="yes" xml:space="preserve">
          <source>The Gamma function [C99].</source>
          <target state="translated">감마 기능 [C99].</target>
        </trans-unit>
        <trans-unit id="c28a373a90d22851cb6b0c5d6429010695515e8d" translate="yes" xml:space="preserve">
          <source>The Generic Object</source>
          <target state="translated">일반 객체</target>
        </trans-unit>
        <trans-unit id="be19e055acdc9d4cfa79691a16d99bc6afcec772" translate="yes" xml:space="preserve">
          <source>The Getopt::Long module implements an extended getopt function called GetOptions(). It parses the command line from &lt;code&gt;@ARGV&lt;/code&gt; , recognizing and removing specified options and their possible values.</source>
          <target state="translated">Getopt :: Long 모듈은 GetOptions ()라는 확장 된 getopt 함수를 구현합니다. 지정된 옵션과 가능한 값을 인식하고 제거하여 &lt;code&gt;@ARGV&lt;/code&gt; 에서 명령 행을 구문 분석 합니다.</target>
        </trans-unit>
        <trans-unit id="2070520f96de2fb3aff1e83e6888cb8e89e845b4" translate="yes" xml:space="preserve">
          <source>The Gods Must Be Crazy</source>
          <target state="translated">신들은 미쳐야한다</target>
        </trans-unit>
        <trans-unit id="95a2e8168d41f50bb6b37295098c965f76153807" translate="yes" xml:space="preserve">
          <source>The Guide</source>
          <target state="translated">가이드</target>
        </trans-unit>
        <trans-unit id="5298e135f008dcbe68c1cb6c5368e25d31e290a3" translate="yes" xml:space="preserve">
          <source>The HP ANSI C Compiler</source>
          <target state="translated">HP ANSI C 컴파일러</target>
        </trans-unit>
        <trans-unit id="cbc8f650d8669a3292691821f3fcd62a7f570f6f" translate="yes" xml:space="preserve">
          <source>The HP porting centres are limited in what systems they are allowed to port to and they usually choose the two most recent OS versions available.</source>
          <target state="translated">HP 포팅 센터는 포트 할 수있는 시스템이 제한되어 있으며 일반적으로 사용 가능한 최신 OS 버전 2 개를 선택합니다.</target>
        </trans-unit>
        <trans-unit id="f122712cd3f618cf66f5c1f12ee353af13431595" translate="yes" xml:space="preserve">
          <source>The HTML/XML character reference modes are about the same. In place of &lt;code&gt;\x{&lt;i&gt;HHHH&lt;/i&gt;}&lt;/code&gt;, HTML uses &lt;code&gt;&amp;amp;#&lt;i&gt;NNN&lt;/i&gt;;&lt;/code&gt; where</source>
          <target state="translated">HTML / XML 문자 참조 모드는 거의 같습니다. &lt;code&gt;\x{&lt;i&gt;HHHH&lt;/i&gt;}&lt;/code&gt; 대신 HTML은 &lt;code&gt;&amp;amp;#&lt;i&gt;NNN&lt;/i&gt;;&lt;/code&gt; 어디</target>
        </trans-unit>
        <trans-unit id="36100c08868e01dc8cc43e522dca19e6917bba7c" translate="yes" xml:space="preserve">
          <source>The Hitchhiker's Guide to the Galaxy</source>
          <target state="translated">은하수를 여행하는 히치하이커를위한 안내서</target>
        </trans-unit>
        <trans-unit id="e1c3679460c98c3b3c6c4ab57a10e09b7a1778d9" translate="yes" xml:space="preserve">
          <source>The Hobbit</source>
          <target state="translated">호빗</target>
        </trans-unit>
        <trans-unit id="ff076bcca2d7f3f3bc21f192dd45509aa2d50344" translate="yes" xml:space="preserve">
          <source>The I/O layers can also be specified more flexibly with the &lt;code&gt;&lt;a href=&quot;functions/open&quot;&gt;open&lt;/a&gt;&lt;/code&gt; pragma. See &lt;a href=&quot;open&quot;&gt;open&lt;/a&gt;, or look at the following example.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/open&quot;&gt;open&lt;/a&gt;&lt;/code&gt; pragma를 사용하여 I / O 레이어를보다 유연하게 지정할 수도 있습니다 . &lt;a href=&quot;open&quot;&gt;open을&lt;/a&gt; 참조 하거나 다음 예를보십시오.</target>
        </trans-unit>
        <trans-unit id="9bb410ea518f5686bb8957c03ada154b43330468" translate="yes" xml:space="preserve">
          <source>The IANA is responsible for delegating management of the top level country domains. The country domains are the two-letter (lowercase) codes from ISO 3166 with a few other additions.</source>
          <target state="translated">IANA는 최상위 국가 도메인 관리 위임을 담당합니다. 국가 도메인은 몇 가지 다른 추가 사항이있는 ISO 3166의 2 자리 (소문자) 코드입니다.</target>
        </trans-unit>
        <trans-unit id="494453dbfde6185be2550cd595666629ce3cd776" translate="yes" xml:space="preserve">
          <source>The IANA language subtag registry.</source>
          <target state="translated">IANA 언어 하위 태그 레지스트리</target>
        </trans-unit>
        <trans-unit id="14ed0108ca9064725768107f673bb9f9f4c35fe4" translate="yes" xml:space="preserve">
          <source>The IBM ANSI C Compiler</source>
          <target state="translated">IBM ANSI C 컴파일러</target>
        </trans-unit>
        <trans-unit id="02dd8ba3a34ffd809cf07605a9d86d87105f9946" translate="yes" xml:space="preserve">
          <source>The IBM APAR number for this problem is IZ50240 (Reported component ID: 5765G0300 / AIX 5.3). It is possible to get an ifix for that problem. If you need an ifix please contact your local IBM AIX support.</source>
          <target state="translated">이 문제점의 IBM APAR 번호는 IZ50240입니다 (보고 된 구성 요소 ID : 5765G0300 / AIX 5.3). 해당 문제에 대한 ifix를 얻을 수 있습니다. ifix가 필요한 경우 로컬 IBM AIX 지원에 문의하십시오.</target>
        </trans-unit>
        <trans-unit id="a6c290ab208815021765007f305a8fc14c88a6b4" translate="yes" xml:space="preserve">
          <source>The IBM's compiler patch levels 5.0.0.0 and 5.0.1.0 have compiler optimization bugs that affect compiling perl.c and regcomp.c, respectively. If Perl's configuration detects those compiler patch levels, optimization is turned off for the said source code files. Upgrading to at least 5.0.2.0 is recommended.</source>
          <target state="translated">IBM의 컴파일러 패치 레벨 5.0.0.0 및 5.0.1.0에는 perl.c 및 regcomp.c의 컴파일에 각각 영향을주는 컴파일러 최적화 버그가 있습니다. Perl의 구성이 해당 컴파일러 패치 레벨을 발견하면, 해당 소스 코드 파일에 대한 최적화가 해제됩니다. 5.0.2.0 이상으로 업그레이드하는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="9495fe8f41686bc61a5fe351f28585160b7d92af" translate="yes" xml:space="preserve">
          <source>The ID header in an &lt;code&gt;ExtraField&lt;/code&gt; sub-field can consist of any two bytes.</source>
          <target state="translated">&lt;code&gt;ExtraField&lt;/code&gt; 서브 필드 의 ID 헤더는 2 바이트로 구성 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e1d154173604900e6d649a0362f6607140bc599a" translate="yes" xml:space="preserve">
          <source>The IDs of all objects available within a program are strings that can be expanded to the corresponding real objects with the &lt;code&gt;CPAN::Shell-&amp;gt;expand(&quot;Module&quot;,@things)&lt;/code&gt; method. Expand returns a list of CPAN::Module objects according to the &lt;code&gt;@things&lt;/code&gt; arguments given. In scalar context, it returns only the first element of the list.</source>
          <target state="translated">프로그램 내에서 사용 가능한 모든 오브젝트의 ID는 &lt;code&gt;CPAN::Shell-&amp;gt;expand(&quot;Module&quot;,@things)&lt;/code&gt; 메소드 를 사용하여 해당 실제 오브젝트로 확장 될 수있는 문자열입니다 . Expand는 주어진 &lt;code&gt;@things&lt;/code&gt; 인수 에 따라 CPAN :: Module 객체 목록을 반환합니다 . 스칼라 컨텍스트에서는 목록의 첫 번째 요소 만 반환합니다.</target>
        </trans-unit>
        <trans-unit id="10ac6c437c9901ca659c989f66f60ed9a2a13418" translate="yes" xml:space="preserve">
          <source>The IN/OUTLIST/IN_OUTLIST/OUT/IN_OUT Keywords</source>
          <target state="translated">IN / OUTLIST / IN_OUTLIST / OUT / IN_OUT 키워드</target>
        </trans-unit>
        <trans-unit id="348998c68227b2675b00049ded155d9a2e0cebf4" translate="yes" xml:space="preserve">
          <source>The INCLUDE: Keyword</source>
          <target state="translated">포함 : 키워드</target>
        </trans-unit>
        <trans-unit id="2fd635a1ef0c21453ce812dc91933d7964a41662" translate="yes" xml:space="preserve">
          <source>The INCLUDE_COMMAND: Keyword</source>
          <target state="translated">INCLUDE_COMMAND : 키워드</target>
        </trans-unit>
        <trans-unit id="edaf758a314e34d83c79323397c8453ba48d6649" translate="yes" xml:space="preserve">
          <source>The INIT: Keyword</source>
          <target state="translated">INIT : 키워드</target>
        </trans-unit>
        <trans-unit id="c2a1ae034dc0e7090561071ada28079423ed98bf" translate="yes" xml:space="preserve">
          <source>The INIT: directive contains code that will be placed immediately after the argument stack is decoded. C does not allow variable declarations at arbitrary locations inside a function, so this is usually the best way to declare local variables needed by the XSUB. (Alternatively, one could put the whole &lt;code&gt;PPCODE:&lt;/code&gt; section into braces, and put these declarations on top.)</source>
          <target state="translated">INIT : 지시문에는 인수 스택이 디코딩 된 직후에 배치되는 코드가 포함됩니다. C는 함수 내의 임의 위치에서 변수 선언을 허용하지 않으므로 일반적으로 XSUB에 필요한 로컬 변수를 선언하는 가장 좋은 방법입니다. (또는 전체 &lt;code&gt;PPCODE:&lt;/code&gt; 섹션을 중괄호로 묶고 이러한 선언을 맨 위에 넣을 수도 있습니다.)</target>
        </trans-unit>
        <trans-unit id="08f7558037e95071c749920f4074890a9d7217ea" translate="yes" xml:space="preserve">
          <source>The INIT: keyword allows initialization to be inserted into the XSUB before the compiler generates the call to the C function. Unlike the CODE: keyword above, this keyword does not affect the way the compiler handles RETVAL.</source>
          <target state="translated">INIT : 키워드를 사용하면 컴파일러가 C 함수에 대한 호출을 생성하기 전에 초기화를 XSUB에 삽입 할 수 있습니다. 위의 CODE : 키워드와 달리이 키워드는 컴파일러가 RETVAL을 처리하는 방식에 영향을 미치지 않습니다.</target>
        </trans-unit>
        <trans-unit id="05bebe82f53ea5f020b6b0d4fe1069dcc8a1edbb" translate="yes" xml:space="preserve">
          <source>The INPUT and OUTPUT sections substitute underscores for double-colons on the fly, giving the desired effect. This example demonstrates some of the power and versatility of the typemap facility.</source>
          <target state="translated">INPUT 및 OUTPUT 섹션은 이중 콜론을 밑줄로 대신 사용하여 원하는 효과를줍니다. 이 예제는 타입 맵 기능의 강력한 기능과 다양성을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="970adbac5d031ff3f8daeef101bb8b55901dc870" translate="yes" xml:space="preserve">
          <source>The INPUT: Keyword</source>
          <target state="translated">입력 : 키워드</target>
        </trans-unit>
        <trans-unit id="21ee92ef918e68068f302b993af8bd2d49672033" translate="yes" xml:space="preserve">
          <source>The INSTALL file in the perl top-level has much information that is only relevant to people building Perl on Unix-like systems. In particular, you can safely ignore any information that talks about &quot;Configure&quot;.</source>
          <target state="translated">perl 최상위 레벨의 INSTALL 파일에는 Unix 계열 시스템에서 Perl을 빌드하는 사람들과 관련된 많은 정보가 있습니다. 특히 &quot;구성&quot;에 관한 정보는 무시해도됩니다.</target>
        </trans-unit>
        <trans-unit id="0adfc9336795bed66f7e1ae7c7424119e43e300c" translate="yes" xml:space="preserve">
          <source>The INSTALL... macros in turn default to their %Config ($Config{installprivlib}, $Config{installarchlib}, etc.) counterparts.</source>
          <target state="translated">INSTALL ... 매크로는 기본적으로 % Config ($ Config {installprivlib}, $ Config {installarchlib} 등)로 설정됩니다.</target>
        </trans-unit>
        <trans-unit id="9023b649b609edcd17550081d28e4a80cf681ce5" translate="yes" xml:space="preserve">
          <source>The INTERFACE: Keyword</source>
          <target state="translated">인터페이스 : 키워드</target>
        </trans-unit>
        <trans-unit id="e1fc34a9a712c8a8848d549ec748ba68c13f33e7" translate="yes" xml:space="preserve">
          <source>The INTERFACE_MACRO: Keyword</source>
          <target state="translated">INTERFACE_MACRO : 키워드</target>
        </trans-unit>
        <trans-unit id="1dc68d829f3e7afebf9178286cb38cc376f6ec35" translate="yes" xml:space="preserve">
          <source>The IO::Pty and Expect modules from CPAN can help with this, as they provide a real tty (well, a pseudo-tty, actually), which gets you back to line buffering in the invoked command again.</source>
          <target state="translated">CPAN의 IO :: Pty 및 Expect 모듈은 실제 tty (실제 pseudo-tty)를 제공하므로 호출 된 명령에서 다시 라인 버퍼링으로 돌아갈 수 있으므로 도움이 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="99807f53289794deab86efdaf9d7a76fb60defb6" translate="yes" xml:space="preserve">
          <source>The IO::Socket(3) manpage describes the object library, and the Socket(3) manpage describes the low-level interface to sockets. Besides the obvious functions in &lt;a href=&quot;perlfunc&quot;&gt;perlfunc&lt;/a&gt;, you should also check out the</source>
          <target state="translated">IO :: Socket (3) 맨 페이지는 객체 라이브러리를 설명하고 Socket (3) 맨 페이지는 소켓에 대한 저수준 인터페이스를 설명합니다. &lt;a href=&quot;perlfunc&quot;&gt;perlfunc&lt;/a&gt; 의 명백한 기능 외에도 ,</target>
        </trans-unit>
        <trans-unit id="dd19329497c4746f419d864be77ab0a23a7089f7" translate="yes" xml:space="preserve">
          <source>The ISO 4217 data.</source>
          <target state="translated">ISO 4217 데이터</target>
        </trans-unit>
        <trans-unit id="9aedc742ca6fb2dc7b951347169405aefc47d178" translate="yes" xml:space="preserve">
          <source>The ISO 8601 standard defines the date format to be YYYY-MM-DD, and the time format to be hh:mm:ss (24 hour clock), and if combined, they should be concatenated with date first and with a capital 'T' in front of the time.</source>
          <target state="translated">ISO 8601 표준은 날짜 형식을 YYYY-MM-DD로 정의하고 시간 형식을 hh : mm : ss (24 시간제)로 정의하고 결합 된 경우 날짜와 먼저, 대문자 'T로 연결해야합니다. '시간의 앞에.</target>
        </trans-unit>
        <trans-unit id="b1897fe9f53f26e8ee1d177c372171adf09aeabb" translate="yes" xml:space="preserve">
          <source>The ISO 8859-</source>
          <target state="translated">ISO 8859-</target>
        </trans-unit>
        <trans-unit id="be3a3d5a87727d649fad4e25cef60372ccbe4e20" translate="yes" xml:space="preserve">
          <source>The IVdf will expand to whatever is the correct format for the IVs.</source>
          <target state="translated">IVdf는 IV에 적합한 형식으로 확장됩니다.</target>
        </trans-unit>
        <trans-unit id="2438b4ecbe3dbd078f85fcd76de3ac8517dfbe33" translate="yes" xml:space="preserve">
          <source>The Inside-out Technique</source>
          <target state="translated">인사이드 아웃 기법</target>
        </trans-unit>
        <trans-unit id="bfd4ccd468ad208229b8e304f3f53a782dd6a87c" translate="yes" xml:space="preserve">
          <source>The Intent</source>
          <target state="translated">의도</target>
        </trans-unit>
        <trans-unit id="94771cb0c8e4f1f0a6f837c00d85c8dc460252be" translate="yes" xml:space="preserve">
          <source>The Internet line terminator is &quot;\015\012&quot;. Under ASCII variants of Unix, that could usually be written as &quot;\r\n&quot;, but under other systems, &quot;\r\n&quot; might at times be &quot;\015\015\012&quot;, &quot;\012\012\015&quot;, or something completely different. The standards specify writing &quot;\015\012&quot; to be conformant (be strict in what you provide), but they also recommend accepting a lone &quot;\012&quot; on input (be lenient in what you require). We haven't always been very good about that in the code in this manpage, but unless you're on a Mac from way back in its pre-Unix dark ages, you'll probably be ok.</source>
          <target state="translated">인터넷 회선 종결자는 &quot;\ 015 \ 012&quot;입니다. Unix의 ASCII 변형에서는 일반적으로 &quot;\ r \ n&quot;으로 쓸 수 있지만 다른 시스템에서는 &quot;\ r \ n&quot;이 &quot;\ 015 \ 015 \ 012&quot;, &quot;\ 012 \ 012 \ 015 일 수 있습니다. &quot;또는 완전히 다른 것입니다. 표준은 &quot;\ 015 \ 012&quot;를 준수하도록 지정하지만 (제공 한 내용이 엄격해야 함) 입력시 고독한 &quot;\ 012&quot;를 수락하는 것이 좋습니다 (필요한 내용에 관대함). 우리는이 맨 페이지의 코드에서 그 점을 항상 잘 알고 있지는 않지만, Unix 이전의 어두운 시대로 돌아 가지 않는 한 Mac에 있지 않으면 아마 괜찮을 것입니다.</target>
        </trans-unit>
        <trans-unit id="501b92baa8d232237960cf668a9120aec4afdddd" translate="yes" xml:space="preserve">
          <source>The Keyed-Hash Message Authentication Code (HMAC):</source>
          <target state="translated">키 해시 메시지 인증 코드 (HMAC) :</target>
        </trans-unit>
        <trans-unit id="d65b2222a8c282dae9b3cd28518dc29329740227" translate="yes" xml:space="preserve">
          <source>The LAYER parameter of the binmode() function is described as &quot;DISCIPLINE&quot; in &quot;Programming Perl, 3rd Edition&quot;. However, since the publishing of this book, by many known as &quot;Camel III&quot;, the consensus of the naming of this functionality has moved from &quot;discipline&quot; to &quot;layer&quot;. All documentation of this version of Perl therefore refers to &quot;layers&quot; rather than to &quot;disciplines&quot;. Now back to the regularly scheduled documentation...</source>
          <target state="translated">binmode () 함수의 LAYER 매개 변수는 &quot;Programming Perl, 3rd Edition&quot;에서 &quot;DISCIPLINE&quot;으로 설명됩니다. 그러나 많은 사람들이 &quot;Camel III&quot;이라고하는이 책을 출판 한 이후로이 기능의 명명에 대한 합의는 &quot;징계&quot;에서 &quot;계층&quot;으로 옮겨졌습니다. 따라서이 버전의 Perl에 대한 모든 문서는 &quot;훈련&quot;이 아니라 &quot;계층&quot;을 나타냅니다. 이제 정기적으로 예약 된 설명서로 돌아가십시오 ...</target>
        </trans-unit>
        <trans-unit id="c5a27ef16f958a529f7db36014226c11d0b2a269" translate="yes" xml:space="preserve">
          <source>The LENGTH must be less than or equal to the buffer size.</source>
          <target state="translated">LENGTH는 버퍼 크기보다 작거나 같아야합니다.</target>
        </trans-unit>
        <trans-unit id="ea2784880355655cd5260296b326df11e2887853" translate="yes" xml:space="preserve">
          <source>The LLP64 data model is different from the LP64 data model that is the norm on 64-bit Unix platforms. In the former, &lt;code&gt;&lt;a href=&quot;functions/int&quot;&gt;int&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;long&lt;/code&gt; are both 32-bit data types, while pointers are 64 bits wide. In addition, there is a separate 64-bit wide integral type, &lt;code&gt;__int64&lt;/code&gt; . In contrast, the LP64 data model that is pervasive on Unix platforms provides &lt;code&gt;&lt;a href=&quot;functions/int&quot;&gt;int&lt;/a&gt;&lt;/code&gt; as the 32-bit type, while both the &lt;code&gt;long&lt;/code&gt; type and pointers are of 64-bit precision. Note that both models provide for 64-bits of addressability.</source>
          <target state="translated">LLP64 데이터 모델은 64 비트 Unix 플랫폼에서 일반적으로 사용되는 LP64 데이터 모델과 다릅니다. 전자에서 &lt;code&gt;&lt;a href=&quot;functions/int&quot;&gt;int&lt;/a&gt;&lt;/code&gt; 와 &lt;code&gt;long&lt;/code&gt; 은 모두 32 비트 데이터 형식이고 포인터는 64 비트입니다. 또한 별도의 64 비트 너비 정수 유형 인 &lt;code&gt;__int64&lt;/code&gt; 가 있습니다. 반대로 Unix 플랫폼에서 널리 사용되는 LP64 데이터 모델은 &lt;code&gt;&lt;a href=&quot;functions/int&quot;&gt;int&lt;/a&gt;&lt;/code&gt; 를 32 비트 유형으로 제공하는 반면 &lt;code&gt;long&lt;/code&gt; 유형과 포인터는 모두 64 비트 정밀도입니다. 두 모델 모두 64 비트의 주소 지정 가능성을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="89a865b15f025e4125f9521e0cbb444b319a7463" translate="yes" xml:space="preserve">
          <source>The Layout</source>
          <target state="translated">배치</target>
        </trans-unit>
        <trans-unit id="3892e7769cde3def977297b2fd107c985947cfbb" translate="yes" xml:space="preserve">
          <source>The Lays of Beleriand</source>
          <target state="translated">Beleriand의 낳는다</target>
        </trans-unit>
        <trans-unit id="b0afa09df1fad56be5d5842b1eca124439a7ca1c" translate="yes" xml:space="preserve">
          <source>The LimitOutput option.</source>
          <target state="translated">LimitOutput 옵션.</target>
        </trans-unit>
        <trans-unit id="7609c4332cdddf67282a426dcc844b81450f8724" translate="yes" xml:space="preserve">
          <source>The Locale-Codes distribution.</source>
          <target state="translated">로캘 코드 배포</target>
        </trans-unit>
        <trans-unit id="4371d0e1d710e94eadf09e06051f14e2003db5e7" translate="yes" xml:space="preserve">
          <source>The Locale/Maketext.pm source. Observe that the module is much shorter than its documentation!</source>
          <target state="translated">Locale / Maketext.pm 소스 모듈이 설명서보다 훨씬 짧은 지 확인하십시오!</target>
        </trans-unit>
        <trans-unit id="38bb5321e46a281dda4ae130db97eaa961627a32" translate="yes" xml:space="preserve">
          <source>The Lord of the Rings</source>
          <target state="translated">반지의 제왕</target>
        </trans-unit>
        <trans-unit id="65d1f880f060efd8bb95b4c1ef3aa2f9bbc16903" translate="yes" xml:space="preserve">
          <source>The MANIFEST file contains the names of all the files just created in the Mytest directory.</source>
          <target state="translated">MANIFEST 파일에는 Mytest 디렉토리에 방금 생성 된 모든 파일의 이름이 포함되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="cc342c2add9e7769b6276801f43191956bbbeb6e" translate="yes" xml:space="preserve">
          <source>The MD5 algorithm is defined in RFC 1321. This implementation is derived from the reference C code in RFC 1321 which is covered by the following copyright statement:</source>
          <target state="translated">MD5 알고리즘은 RFC 1321에 정의되어 있습니다.이 구현은 RFC 1321의 참조 C 코드에서 파생되며 다음 저작권 정보가 적용됩니다.</target>
        </trans-unit>
        <trans-unit id="a517aaaef144e51dda68ffaef4baabb6659f9741" translate="yes" xml:space="preserve">
          <source>The MODULE Keyword</source>
          <target state="translated">모듈 키워드</target>
        </trans-unit>
        <trans-unit id="d640b9c0318e742980f68cffc45a40affd82cb5f" translate="yes" xml:space="preserve">
          <source>The MODULE keyword is used to start the XS code and to specify the package of the functions which are being defined. All text preceding the first MODULE keyword is considered C code and is passed through to the output with POD stripped, but otherwise untouched. Every XS module will have a bootstrap function which is used to hook the XSUBs into Perl. The package name of this bootstrap function will match the value of the last MODULE statement in the XS source files. The value of MODULE should always remain constant within the same XS file, though this is not required.</source>
          <target state="translated">MODULE 키워드는 XS 코드를 시작하고 정의중인 기능의 패키지를 지정하는 데 사용됩니다. 첫 번째 MODULE 키워드 앞에있는 모든 텍스트는 C 코드로 간주되며 POD가 제거 된 상태로 출력에 전달되지만 그렇지 않으면 그대로 유지됩니다. 모든 XS 모듈에는 XSUB를 Perl에 연결하는 데 사용되는 부트 스트랩 기능이 있습니다. 이 부트 스트랩 함수의 패키지 이름은 XS 소스 파일의 마지막 MODULE 문의 값과 일치합니다. MODULE의 값은 항상 동일한 XS 파일 내에서 일정하게 유지되어야하지만 필수는 아닙니다.</target>
        </trans-unit>
        <trans-unit id="eb4b2ce583f381cfbe7f078522f5b75cf8b0acdd" translate="yes" xml:space="preserve">
          <source>The MY_CXT_INIT macro initializes storage for the &lt;code&gt;my_cxt_t&lt;/code&gt; struct.</source>
          <target state="translated">MY_CXT_INIT 매크로는 &lt;code&gt;my_cxt_t&lt;/code&gt; 의 스토리지를 초기화합니다 . 구조체의 .</target>
        </trans-unit>
        <trans-unit id="2dd4eb6a77854464c830f76b78c6ac15e92b669d" translate="yes" xml:space="preserve">
          <source>The Makefile to be produced may be altered by adding arguments of the form &lt;code&gt;KEY=VALUE&lt;/code&gt; . E.g.</source>
          <target state="translated">생성 될 Makefile은 &lt;code&gt;KEY=VALUE&lt;/code&gt; 형식의 인수를 추가하여 변경 될 수 있습니다 . 예 :</target>
        </trans-unit>
        <trans-unit id="ad78ec4ae3b5a4c78156cf44036606a40c32aaf5" translate="yes" xml:space="preserve">
          <source>The Mantra</source>
          <target state="translated">만트라</target>
        </trans-unit>
        <trans-unit id="1b194ffb2833786ebe5362ee6e09704940be3454" translate="yes" xml:space="preserve">
          <source>The Memoize man page.</source>
          <target state="translated">Memoize 매뉴얼 페이지.</target>
        </trans-unit>
        <trans-unit id="8b07a539021a149c75372ae5a8d60bcacade8512" translate="yes" xml:space="preserve">
          <source>The Microsoft Visual C++ compilers are also now being given away free. They are available as &quot;Visual C++ Toolkit 2003&quot; or &quot;Visual C++ 2005-2013 Express Edition&quot; (and also as part of the &quot;.NET Framework SDK&quot;) and are the same compilers that ship with &quot;Visual C++ .NET 2003 Professional&quot; or &quot;Visual C++ 2005-2013 Professional&quot; respectively.</source>
          <target state="translated">Microsoft Visual C ++ 컴파일러도 이제 무료로 제공되고 있습니다. &quot;Visual C ++ Toolkit 2003&quot;또는 &quot;Visual C ++ 2005-2013 Express Edition&quot;(및 &quot;.NET Framework SDK&quot;의 일부)으로 제공되며 &quot;Visual C ++ .NET 2003 Professional&quot;과 함께 제공되는 동일한 컴파일러입니다. 또는 &quot;Visual C ++ 2005-2013 Professional&quot;입니다.</target>
        </trans-unit>
        <trans-unit id="b6efbee1ed83675ffebd32144ba8248768436ab5" translate="yes" xml:space="preserve">
          <source>The NAME section (&lt;code&gt;=head1 NAME&lt;/code&gt; ) should consist of a single paragraph with the script/module name, followed by a dash `-' and a very short description of what the thing is good for.</source>
          <target state="translated">NAME 섹션 ( &lt;code&gt;=head1 NAME&lt;/code&gt; )은 스크립트 / 모듈 이름이있는 단일 단락으로 구성되고 그 뒤에 대시`- '가 있고 그 내용이 무엇인지에 대한 아주 짧은 설명으로 구성되어야합니다.</target>
        </trans-unit>
        <trans-unit id="552a987af386f5239d1d91c8f3cd7d6b46b27cbb" translate="yes" xml:space="preserve">
          <source>The NAME section should be recognized specially and index entries emitted for everything in that section. This would have to be deferred until the next section, since extraneous things in NAME tends to confuse various man page processors. Currently, no index entries are emitted for anything in NAME.</source>
          <target state="translated">NAME 섹션은 특별히 인식되어야하며 해당 섹션의 모든 항목에 대해 생성 된 색인 항목입니다. NAME의 외부 항목이 다양한 매뉴얼 페이지 프로세서를 혼동하는 경향이 있으므로 다음 섹션까지 연기해야합니다. 현재 NAME의 항목에는 색인 항목이 생성되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="eede37533894539b6f0e561b631aee0b3870de35" translate="yes" xml:space="preserve">
          <source>The NEVER keyword must appear by itself if used within the Notify option and &quot;requests that a DSN not be returned to the sender under any conditions.&quot;</source>
          <target state="translated">알림 옵션 내에서 사용하고 &quot;어떤 조건에서도 발신자에게 DSN을 반환하지 않도록 요청&quot;하는 경우 NEVER 키워드가 표시되어야합니다.</target>
        </trans-unit>
        <trans-unit id="1dccb0bb054644651ad0c69767bda009b1d0637b" translate="yes" xml:space="preserve">
          <source>The NO_INIT Keyword</source>
          <target state="translated">NO_INIT 키워드</target>
        </trans-unit>
        <trans-unit id="23729fabcc944859639583f78edb8c8ef05b2818" translate="yes" xml:space="preserve">
          <source>The NO_INIT keyword is used to indicate that a function parameter is being used only as an output value. The &lt;b&gt;xsubpp&lt;/b&gt; compiler will normally generate code to read the values of all function parameters from the argument stack and assign them to C variables upon entry to the function. NO_INIT will tell the compiler that some parameters will be used for output rather than for input and that they will be handled before the function terminates.</source>
          <target state="translated">NO_INIT 키워드는 함수 매개 변수가 출력 값으로 만 사용되고 있음을 나타내는 데 사용됩니다. &lt;b&gt;은 xsubpp&lt;/b&gt; 컴파일러는 일반적으로 아규먼트 스택에서 모든 함수 매개 변수의 값을 읽고 함수 항목에 C 변수에 할당하는 코드를 생성합니다. NO_INIT는 컴파일러에게 일부 매개 변수가 입력이 아닌 출력에 사용되며 함수가 종료되기 전에 처리 될 것이라고 지시합니다.</target>
        </trans-unit>
        <trans-unit id="8fd6dba18911a57231232a7c939d805f823c76e7" translate="yes" xml:space="preserve">
          <source>The NO_OUTPUT Keyword</source>
          <target state="translated">NO_OUTPUT 키워드</target>
        </trans-unit>
        <trans-unit id="03379df3fc9b65eb904066ecff904227f6ca6017" translate="yes" xml:space="preserve">
          <source>The NO_OUTPUT can be placed as the first token of the XSUB. This keyword indicates that while the C subroutine we provide an interface to has a non-&lt;code&gt;void&lt;/code&gt; return type, the return value of this C subroutine should not be returned from the generated Perl subroutine.</source>
          <target state="translated">NO_OUTPUT은 XSUB의 첫 번째 토큰으로 배치 될 수 있습니다. 이 키워드는 C 서브 루틴이 &lt;code&gt;void&lt;/code&gt; 가 아닌 리턴 유형 을 갖는 인터페이스를 제공하지만이 C 서브 루틴 의 리턴 값은 생성 된 Perl 서브 루틴에서 리턴되지 않아야 함을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="904e01c3e307ff335e43430a3d4bc1ddd9643078" translate="yes" xml:space="preserve">
          <source>The Name_Alias property is also of this form. But each scalar consists of two components: 1) the name, and 2) the type of alias this is. They are separated by a colon and a space. In Unicode 6.1, there are several alias types:</source>
          <target state="translated">Name_Alias ​​속성도이 형식입니다. 그러나 각 스칼라는 1) 이름과 2)이 별칭 유형으로 구성됩니다. 콜론과 공백으로 구분됩니다. 유니 코드 6.1에는 몇 가지 별명 유형이 있습니다.</target>
        </trans-unit>
        <trans-unit id="b8335e651ec579d0644f75bd5c6369bb3697cc7b" translate="yes" xml:space="preserve">
          <source>The Nestable version works by looking for hash references being stored and converting them to tied hashes so that they too can have references as keys. This will happen without warning whenever you store a reference to one of your own hashes in the tied hash.</source>
          <target state="translated">Nestable 버전은 저장되는 해시 참조를 찾아 묶음 해시로 변환하여 키로 참조를 가질 수 있도록합니다. 묶인 해시에 자신의 해시 중 하나에 대한 참조를 저장할 때마다 경고없이 발생합니다.</target>
        </trans-unit>
        <trans-unit id="1aaccf615c02a846abe966f8242837a674850c5a" translate="yes" xml:space="preserve">
          <source>The Net::FTP class is a subclass of Net::Cmd and IO::Socket::INET.</source>
          <target state="translated">Net :: FTP 클래스는 Net :: Cmd 및 IO :: Socket :: INET의 하위 클래스입니다.</target>
        </trans-unit>
        <trans-unit id="01eaa0b5dde8380e0c7a54964e805d8bfcf3acc6" translate="yes" xml:space="preserve">
          <source>The Net::NNTP class is a subclass of Net::Cmd and IO::Socket::INET.</source>
          <target state="translated">Net :: NNTP 클래스는 Net :: Cmd 및 IO :: Socket :: INET의 하위 클래스입니다.</target>
        </trans-unit>
        <trans-unit id="da23b39231b794a7054fda91fbd214625459379e" translate="yes" xml:space="preserve">
          <source>The Net::POP3 class is a subclass of Net::Cmd and IO::Socket::INET.</source>
          <target state="translated">Net :: POP3 클래스는 Net :: Cmd 및 IO :: Socket :: INET의 하위 클래스입니다.</target>
        </trans-unit>
        <trans-unit id="8d68199e14c6e60b44de999602d0fae86539eba2" translate="yes" xml:space="preserve">
          <source>The Net::SMTP class is a subclass of Net::Cmd and IO::Socket::INET.</source>
          <target state="translated">Net :: SMTP 클래스는 Net :: Cmd 및 IO :: Socket :: INET의 하위 클래스입니다.</target>
        </trans-unit>
        <trans-unit id="64f60cb8e2581437bfdc17a813e7b06233279924" translate="yes" xml:space="preserve">
          <source>The OP's flags, abbreviated as a series of symbols.</source>
          <target state="translated">OP의 플래그는 일련의 기호로 축약됩니다.</target>
        </trans-unit>
        <trans-unit id="895a69280490efde337cd0fd19af585a8e383312" translate="yes" xml:space="preserve">
          <source>The OP's name, in all caps.</source>
          <target state="translated">모든 대문자로 된 OP의 이름입니다.</target>
        </trans-unit>
        <trans-unit id="02eabb0cd331fbbf23966749354f0c2df6db1d07" translate="yes" xml:space="preserve">
          <source>The OP's name.</source>
          <target state="translated">OP의 이름입니다.</target>
        </trans-unit>
        <trans-unit id="2e25dacc5e61c7fb0d63f53483335a706cbf1613" translate="yes" xml:space="preserve">
          <source>The OP's private flags, rendered with abbreviated names if possible.</source>
          <target state="translated">가능한 경우 약어 이름으로 렌더링 된 OP의 개인용 플래그입니다.</target>
        </trans-unit>
        <trans-unit id="59e423cd50aec687154fc4dc506adc4e55e686ff" translate="yes" xml:space="preserve">
          <source>The OP-specific information of the OP (such as the SV for an SVOP, the non-local exit pointers for a LOOP, etc.) enclosed in parentheses.</source>
          <target state="translated">OP의 OP 특정 정보 (예 : SVOP의 SV, LOOP의 비 로컬 종료 포인터 등)는 괄호로 묶습니다.</target>
        </trans-unit>
        <trans-unit id="0f586844a0e8ae4292abb29dd5184b53fc4b9536" translate="yes" xml:space="preserve">
          <source>The OS/390 and z/OS C run-time libraries provide &lt;code&gt;_atoe()&lt;/code&gt; and &lt;code&gt;_etoa()&lt;/code&gt; functions.</source>
          <target state="translated">OS / 390 및 z / OS C 런타임 라이브러리는 &lt;code&gt;_atoe()&lt;/code&gt; 및 &lt;code&gt;_etoa()&lt;/code&gt; 기능을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="efc93b2b68cdc27d26189d3924b12fba2216cd16" translate="yes" xml:space="preserve">
          <source>The OUTPUT: Keyword</source>
          <target state="translated">출력 : 키워드</target>
        </trans-unit>
        <trans-unit id="6558e5f212b7172c05e18d1a7261588a3081027f" translate="yes" xml:space="preserve">
          <source>The OUTPUT: keyword can also be used to indicate that function parameters are output variables. This may be necessary when a parameter has been modified within the function and the programmer would like the update to be seen by Perl.</source>
          <target state="translated">OUTPUT : 키워드를 사용하여 함수 매개 변수가 출력 변수임을 표시 할 수도 있습니다. 이것은 함수 내에서 매개 변수가 수정되었고 프로그래머가 Perl에 의해 업데이트를보고자 할 때 필요할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="73a9f4665d98e2b1d4598fa0b47867a5d82b1767" translate="yes" xml:space="preserve">
          <source>The OUTPUT: keyword indicates that certain function parameters should be updated (new values made visible to Perl) when the XSUB terminates or that certain values should be returned to the calling Perl function. For simple functions which have no CODE: or PPCODE: section, such as the sin() function above, the RETVAL variable is automatically designated as an output value. For more complex functions the &lt;b&gt;xsubpp&lt;/b&gt; compiler will need help to determine which variables are output variables.</source>
          <target state="translated">OUTPUT : 키워드는 XSUB가 종료 될 때 특정 함수 매개 변수가 갱신되거나 (Perl에 새 값이 표시됨) 특정 값이 호출 Perl 함수에 리턴되어야 함을 나타냅니다. 위의 sin () 함수와 같이 CODE : 또는 PPCODE : 섹션이없는 간단한 함수의 경우 RETVAL 변수가 자동으로 출력 값으로 지정됩니다. 보다 복잡한 함수의 경우 &lt;b&gt;xsubpp&lt;/b&gt; 컴파일러는 출력 변수 인 변수를 결정하는 데 도움이 필요합니다.</target>
        </trans-unit>
        <trans-unit id="4cc5401f4b3edfb0209daaa58ea92639a885ffb3" translate="yes" xml:space="preserve">
          <source>The OUTPUT: keyword will also allow an output parameter to be mapped to a matching piece of code rather than to a typemap.</source>
          <target state="translated">OUTPUT : 키워드를 사용하면 출력 매개 변수를 유형 맵이 아닌 일치하는 코드에 맵핑 할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="9ee72e50bec09b405c45fd6861c78e461f0c9260" translate="yes" xml:space="preserve">
          <source>The OVERLOAD: Keyword</source>
          <target state="translated">과부하 : 키워드</target>
        </trans-unit>
        <trans-unit id="7288e63116c84272f399850db852020e0cc73247" translate="yes" xml:space="preserve">
          <source>The Opcode module allow you to define an</source>
          <target state="translated">Opcode 모듈을 사용하면</target>
        </trans-unit>
        <trans-unit id="959cf82efacd7e02d3ef8885dabccff7457e7125" translate="yes" xml:space="preserve">
          <source>The Opcode module is not usually used directly. See the ops pragma and Safe modules for more typical uses.</source>
          <target state="translated">Opcode 모듈은 일반적으로 직접 사용되지 않습니다. 보다 일반적인 용도는 ops pragma 및 Safe 모듈을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="fc2df1bcfc1883b7877806492c6187e99dd073c7" translate="yes" xml:space="preserve">
          <source>The Opcode package contains functions for manipulating operator names tags and sets. All are available for export by the package.</source>
          <target state="translated">Opcode 패키지에는 운영자 이름 태그 및 세트를 조작하는 기능이 포함되어 있습니다. 모두 패키지로 내보낼 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d8d0c8d509c42bd9d64cbd39302a78c4a8138b0f" translate="yes" xml:space="preserve">
          <source>The Output File Glob is a normal string, with 2 glob-like features.</source>
          <target state="translated">Output File Glob은 2 개의 glob-like 기능을 가진 일반 문자열입니다.</target>
        </trans-unit>
        <trans-unit id="84f8f10721f91385f97d9092c39e5e78fd029d2f" translate="yes" xml:space="preserve">
          <source>The PACKAGE Keyword</source>
          <target state="translated">패키지 키워드</target>
        </trans-unit>
        <trans-unit id="865d0a1c65f77bfae0d9586920617d375bc6acfd" translate="yes" xml:space="preserve">
          <source>The PADLIST has a C array where pads are stored.</source>
          <target state="translated">PADLIST에는 패드가 저장된 C 배열이 있습니다.</target>
        </trans-unit>
        <trans-unit id="14a42650858d4f29fe76f5f506d61c2fcd72c3a0" translate="yes" xml:space="preserve">
          <source>The PASE environment is a runtime environment for OS/400 that can run executables built for PowerPC AIX in OS/400; see &lt;a href=&quot;perlos400&quot;&gt;perlos400&lt;/a&gt;. PASE is ASCII-based, not EBCDIC-based as the ILE.</source>
          <target state="translated">PASE 환경은 OS / 400에서 PowerPC AIX 용으로 빌드 된 실행 파일을 실행할 수있는 OS / 400 용 런타임 환경입니다. &lt;a href=&quot;perlos400&quot;&gt;perlos400을&lt;/a&gt; 참조하십시오 . PASE는 ILE로서 EBCDIC 기반이 아닌 ASCII 기반입니다.</target>
        </trans-unit>
        <trans-unit id="1f72b8482ed4bc7cb03eba7f8d7c5860c8cba587" translate="yes" xml:space="preserve">
          <source>The PATH isn't the only environment variable which can cause problems. Because some shells may use the variables IFS, CDPATH, ENV, and BASH_ENV, Perl checks that those are either empty or untainted when starting subprocesses. You may wish to add something like this to your setid and taint-checking scripts.</source>
          <target state="translated">PATH는 문제를 일으킬 수있는 유일한 환경 변수가 아닙니다. 일부 쉘은 변수 IFS, CDPATH, ENV 및 BASH_ENV를 사용할 수 있으므로 Perl은 서브 프로세스를 시작할 때 비어 있거나 포함되지 않았는지 확인합니다. setid 및 taint-checking 스크립트에 이와 같은 것을 추가 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="74d39bcf239c4e87e009e146ae36fe8545147ee4" translate="yes" xml:space="preserve">
          <source>The PATHEXT env variable will be used to get a list of extensions that might indicate a command, otherwise .com, .exe, .bat and .cmd will be used by default.</source>
          <target state="translated">PATHEXT env 변수는 명령을 나타낼 수있는 확장명 목록을 가져 오는 데 사용됩니다. 그렇지 않으면 기본적으로 .com, .exe, .bat 및 .cmd가 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="7243f6ac7c83fe20c93feefd9b08218632215bc2" translate="yes" xml:space="preserve">
          <source>The PATTERN need not be constant; an expression may be used to specify a pattern that varies at runtime.</source>
          <target state="translated">패턴은 일정 할 필요는 없습니다. 식은 런타임에 따라 달라지는 패턴을 지정하는 데 사용될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="692a1dbebc7770986f39cc91bf3402c713778957" translate="yes" xml:space="preserve">
          <source>The PERL5DB environment variable is only used when Perl is started with a bare &lt;b&gt;-d&lt;/b&gt; switch.</source>
          <target state="translated">PERL5DB 환경 변수는 Perl이 bare &lt;b&gt;-d&lt;/b&gt; 스위치로 시작된 경우에만 사용됩니다 .</target>
        </trans-unit>
        <trans-unit id="1eee98df1ea759ea4940bac25b454fb3fd49fcab" translate="yes" xml:space="preserve">
          <source>The PERL5LIB and PERLLIB logical names work as documented in &lt;a href=&quot;perl&quot;&gt;perl&lt;/a&gt;, except that the element separator is '|' instead of ':'. The directory specifications may use either VMS or Unix syntax.</source>
          <target state="translated">PERL5LIB 및 PERLLIB 논리 이름 은 요소 구분 기호가 '|'인 것을 제외하고 &lt;a href=&quot;perl&quot;&gt;perl에&lt;/a&gt; 문서화 된대로 작동 합니다. 대신에 ':'. 디렉토리 스펙은 VMS 또는 Unix 구문을 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="368f8cf4322638139da678fdc3327c77e1a054e7" translate="yes" xml:space="preserve">
          <source>The PERLIO environment variable is completely ignored when Perl is run in taint mode.</source>
          <target state="translated">PerlIO가 변수 모드에서 실행될 때 PERLIO 환경 변수는 완전히 무시됩니다.</target>
        </trans-unit>
        <trans-unit id="054efbf018fd73b713cd0bc442abab0d7792d243" translate="yes" xml:space="preserve">
          <source>The PERLLIB environment variable is completely ignored when Perl is run in taint mode.</source>
          <target state="translated">Perl이 환경 모드에서 실행될 때 PERLLIB 환경 변수는 완전히 무시됩니다.</target>
        </trans-unit>
        <trans-unit id="d86bdeabcf0cc9f48a3238fc1e1e9701f94852a2" translate="yes" xml:space="preserve">
          <source>The PERL_MAGIC_uvar interface for hashes</source>
          <target state="translated">해시 용 PERL_MAGIC_uvar 인터페이스</target>
        </trans-unit>
        <trans-unit id="fb91b23c022ab8bc327b326b9c283bc9250f0c0a" translate="yes" xml:space="preserve">
          <source>The PERL_VMS_EXCEPTION_DEBUG being defined as &quot;ENABLE&quot; will cause the VMS debugger to be invoked if a fatal exception that is not otherwise handled is raised. The purpose of this is to allow debugging of internal Perl problems that would cause such a condition.</source>
          <target state="translated">&quot;ENABLE&quot;로 정의되는 PERL_VMS_EXCEPTION_DEBUG는 달리 처리되지 않은 치명적인 예외가 발생하면 VMS 디버거가 호출되게합니다. 이것의 목적은 그러한 조건을 야기하는 내부 Perl 문제점의 디버깅을 허용하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="7e2373bae9a9b5526191c72b5feebb5b501ede90" translate="yes" xml:space="preserve">
          <source>The POD file has some &lt;code&gt;=item&lt;/code&gt; and/or &lt;code&gt;=head&lt;/code&gt; commands that have the same text. Potential hyperlinks to such a text cannot be unique then. This warning is printed only with warning level greater than one.</source>
          <target state="translated">POD 파일에는 &lt;code&gt;=item&lt;/code&gt; 및 / 또는 &lt;code&gt;=head&lt;/code&gt; 동일한 텍스트를 가진 = head 명령이 있습니다. 그런 텍스트에 대한 잠재적 하이퍼 링크는 고유 할 수 없습니다. 이 경고는 경고 수준이 1보다 큰 경우에만 인쇄됩니다.</target>
        </trans-unit>
        <trans-unit id="6a2061d2e11b2e67b0037b468d2ff510b08d969a" translate="yes" xml:space="preserve">
          <source>The POD names of files are the plain basenames with any Perl-like extension (.pm, .pl, .pod) stripped, and path separators replaced by &lt;code&gt;::&lt;/code&gt; 's.</source>
          <target state="translated">파일의 POD 이름은 Perl과 같은 확장명 (.pm, .pl, .pod)이 제거되고 경로 구분 기호가 &lt;code&gt;::&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="d3f7ef3aaed3b96c670ec2c717b4d27aac5d999a" translate="yes" xml:space="preserve">
          <source>The POSIX class matches according to the locale, except:</source>
          <target state="translated">POSIX 클래스는 다음을 제외하고 로케일에 따라 일치합니다.</target>
        </trans-unit>
        <trans-unit id="d05b25c0d51d4520f59dbd5e7b83c675d81a2280" translate="yes" xml:space="preserve">
          <source>The POSIX class matches the same as its Full-range counterpart.</source>
          <target state="translated">POSIX 클래스는 Full-range 클래스와 동일합니다.</target>
        </trans-unit>
        <trans-unit id="a91522989698e72a81436ce9d52c71f12180a429" translate="yes" xml:space="preserve">
          <source>The POSIX class matches the same as the ASCII range counterpart.</source>
          <target state="translated">POSIX 클래스는 ASCII 범위와 동일합니다.</target>
        </trans-unit>
        <trans-unit id="45eac6affb7dfd81e7b1ef63dd7e0a2e6da662a9" translate="yes" xml:space="preserve">
          <source>The POSIX class matches the same as the Full-range counterpart.</source>
          <target state="translated">POSIX 클래스는 전체 범위와 동일합니다.</target>
        </trans-unit>
        <trans-unit id="dc901c76cdcb97dea7310ea8ea924293bb5949f6" translate="yes" xml:space="preserve">
          <source>The POSIX defined flags for bsd_glob() are:</source>
          <target state="translated">bsd_glob ()에 대한 POSIX 정의 플래그는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="0fced43544b15278205eeaf1ce05bf21af49dca0" translate="yes" xml:space="preserve">
          <source>The POSIX module (part of the standard perl distribution) implements &lt;code&gt;ceil()&lt;/code&gt; , &lt;code&gt;floor()&lt;/code&gt; , and other mathematical and trigonometric functions. The &lt;code&gt;&lt;a href=&quot;math/complex&quot;&gt;Math::Complex&lt;/a&gt;&lt;/code&gt; module (part of the standard perl distribution) defines mathematical functions that work on both the reals and the imaginary numbers. &lt;code&gt;Math::Complex&lt;/code&gt; is not as efficient as POSIX, but POSIX can't work with complex numbers.</source>
          <target state="translated">POSIX 모듈 (표준 펄 분포의 일부)은 &lt;code&gt;ceil()&lt;/code&gt; , &lt;code&gt;floor()&lt;/code&gt; 및 기타 수학 및 삼각 함수를 구현합니다. &lt;code&gt;&lt;a href=&quot;math/complex&quot;&gt;Math::Complex&lt;/a&gt;&lt;/code&gt; 모듈 (표준 펄 배포판의 일부) 수학 함수를 정의하는 실수와 허수 모두에서 작동하는지. &lt;code&gt;Math::Complex&lt;/code&gt; 는 POSIX만큼 효율적이지 않지만 POSIX는 복잡한 숫자로 작동 할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="58a76e828b7178504f0efaab58e9fc7ae8c408e4" translate="yes" xml:space="preserve">
          <source>The POSIX module permits you to access all (or nearly all) the standard POSIX 1003.1 identifiers. Many of these identifiers have been given Perl-ish interfaces.</source>
          <target state="translated">POSIX 모듈을 사용하면 모든 표준 POSIX 1003.1 식별자에 액세스 할 수 있습니다. 이러한 식별자 중 다수에는 Perl-ish 인터페이스가 제공되었습니다.</target>
        </trans-unit>
        <trans-unit id="bb00001e36c555e321a2c3180d9872e8c4493925" translate="yes" xml:space="preserve">
          <source>The POSIX provided &lt;code&gt;GLOB_APPEND&lt;/code&gt; , &lt;code&gt;GLOB_DOOFFS&lt;/code&gt; , and the FreeBSD extensions &lt;code&gt;GLOB_ALTDIRFUNC&lt;/code&gt; , and &lt;code&gt;GLOB_MAGCHAR&lt;/code&gt; flags have not been implemented in the Perl version because they involve more complex interaction with the underlying C structures.</source>
          <target state="translated">POSIX는 &lt;code&gt;GLOB_APPEND&lt;/code&gt; , &lt;code&gt;GLOB_DOOFFS&lt;/code&gt; 및 FreeBSD 확장명 &lt;code&gt;GLOB_ALTDIRFUNC&lt;/code&gt; 및 &lt;code&gt;GLOB_MAGCHAR&lt;/code&gt; 를 제공했습니다. 플래그는 기본 C 구조와보다 복잡한 상호 작용을 포함하므로 Perl 버전에서는 구현되지 않았습니다.</target>
        </trans-unit>
        <trans-unit id="a0d47d53c93142215e84e50218c868cd954904f3" translate="yes" xml:space="preserve">
          <source>The POSIX::strftime() approach has the benefit of being, in theory, independent of the current locale. See &lt;a href=&quot;perllocale&quot;&gt;perllocale&lt;/a&gt; for details.</source>
          <target state="translated">POSIX :: strftime () 접근 방식은 이론적으로 현재 로케일과 무관 한 이점이 있습니다. 자세한 내용은 &lt;a href=&quot;perllocale&quot;&gt;perllocale&lt;/a&gt; 을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="f4be5af1b8c4f7ec96a716021937a3c9561f2d5c" translate="yes" xml:space="preserve">
          <source>The POSTCALL: Keyword</source>
          <target state="translated">POSTCALL : 키워드</target>
        </trans-unit>
        <trans-unit id="58e421a82995ac1225598edc3f8a16b394004724" translate="yes" xml:space="preserve">
          <source>The POSTCALL: block does not make a lot of sense when the C subroutine call is supplied by user by providing either CODE: or PPCODE: section.</source>
          <target state="translated">POSTCALL : 블록은 CODE : 또는 PPCODE : 섹션을 제공하여 사용자가 C 서브 루틴 호출을 제공 할 때 의미가 없습니다.</target>
        </trans-unit>
        <trans-unit id="b336bc59359478eb80f69f21fc081230df6f7578" translate="yes" xml:space="preserve">
          <source>The PPCODE: Keyword</source>
          <target state="translated">PPCODE : 키워드</target>
        </trans-unit>
        <trans-unit id="cfd48109a24f72ee93cb2960e4b31f2a2958e886" translate="yes" xml:space="preserve">
          <source>The PPCODE: keyword is an alternate form of the CODE: keyword and is used to tell the &lt;b&gt;xsubpp&lt;/b&gt; compiler that the programmer is supplying the code to control the argument stack for the XSUBs return values. Occasionally one will want an XSUB to return a list of values rather than a single value. In these cases one must use PPCODE: and then explicitly push the list of values on the stack. The PPCODE: and CODE: keywords should not be used together within the same XSUB.</source>
          <target state="translated">PPCODE : 키워드는 CODE : 키워드의 대체 형식이며 &lt;b&gt;xsubpp&lt;/b&gt; 를 알려주는 데 사용됩니다.&lt;b&gt;&lt;/b&gt; 컴파일러 XSUB 반환 값에 대한 인수 스택을 제어하는 ​​코드를 제공하고 있음을 컴파일러 됩니다. 때때로 XSUB가 단일 값이 아닌 값 목록을 반환하기를 원할 것입니다. 이 경우 PPCODE :를 사용해야합니다. 그런 다음 스택에서 값 목록을 명시 적으로 푸시하십시오. PPCODE : 및 CODE : 키워드는 동일한 XSUB 내에서 함께 사용하면 안됩니다.</target>
        </trans-unit>
        <trans-unit id="6f7f4e638293474e32a1342be9b48c14f4f2f5af" translate="yes" xml:space="preserve">
          <source>The PREFIX Keyword</source>
          <target state="translated">PREFIX 키워드</target>
        </trans-unit>
        <trans-unit id="52a603903d899ccd2bb20a31b53d728d154bd0a6" translate="yes" xml:space="preserve">
          <source>The PREFIX keyword designates prefixes which should be removed from the Perl function names. If the C function is &lt;code&gt;rpcb_gettime()&lt;/code&gt; and the PREFIX value is &lt;code&gt;rpcb_&lt;/code&gt; then Perl will see this function as &lt;code&gt;gettime()&lt;/code&gt; .</source>
          <target state="translated">PREFIX 키워드는 Perl 함수 이름에서 제거해야하는 접 두부를 지정합니다. C 함수가 &lt;code&gt;rpcb_gettime()&lt;/code&gt; 이고 PREFIX 값이 &lt;code&gt;rpcb_&lt;/code&gt; 이면 Perl은이 함수를 &lt;code&gt;gettime()&lt;/code&gt; 로 간주 합니다.</target>
        </trans-unit>
        <trans-unit id="88877bb4605c88019ee2001796614ad12f854190" translate="yes" xml:space="preserve">
          <source>The PREINIT: Keyword</source>
          <target state="translated">PREINIT : 키워드</target>
        </trans-unit>
        <trans-unit id="81434e6a015b3cc52c205c8d0096aa1b8047f180" translate="yes" xml:space="preserve">
          <source>The PREINIT: keyword allows extra variables to be declared immediately before or after the declarations of the parameters from the INPUT: section are emitted.</source>
          <target state="translated">PREINIT : 키워드를 사용하면 INPUT : 섹션에서 매개 변수 선언 직전 또는 직후에 추가 변수를 선언 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="fe7bb955840f60bbf203155b0452f242dc963bed" translate="yes" xml:space="preserve">
          <source>The PROTOTYPE: Keyword</source>
          <target state="translated">프로토 타입 : 키워드</target>
        </trans-unit>
        <trans-unit id="88332a599c2ebe7acc31d1e6540ad41d11fdae24" translate="yes" xml:space="preserve">
          <source>The PROTOTYPES: Keyword</source>
          <target state="translated">프로토 타입 : 키워드</target>
        </trans-unit>
        <trans-unit id="4762c608488c900a25e5c9ce4a388703783fff72" translate="yes" xml:space="preserve">
          <source>The PROTOTYPES: keyword corresponds to &lt;b&gt;xsubpp&lt;/b&gt;'s &lt;code&gt;-prototypes&lt;/code&gt; and &lt;code&gt;-noprototypes&lt;/code&gt; options. This keyword overrides the command line options. Prototypes are enabled by default. When prototypes are enabled XSUBs will be given Perl prototypes. This keyword may be used multiple times in an XS module to enable and disable prototypes for different parts of the module.</source>
          <target state="translated">PROTOTYPES : 키워드는 &lt;b&gt;xsubpp&lt;/b&gt; 의 &lt;code&gt;-prototypes&lt;/code&gt; 및 &lt;code&gt;-noprototypes&lt;/code&gt; 옵션에 해당합니다. 이 키워드는 명령 행 옵션을 대체합니다. 프로토 타입은 기본적으로 활성화되어 있습니다. 프로토 타입이 활성화되면 XSUB에 Perl 프로토 타입이 제공됩니다. 이 키워드는 XS 모듈에서 여러 번 사용되어 모듈의 다른 부분에 대한 프로토 타입을 활성화 및 비활성화 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="32ef6835ed63a718cf287a36ed5a59d894d8bfe4" translate="yes" xml:space="preserve">
          <source>The PV of the sv is returned.</source>
          <target state="translated">sv의 PV가 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="cbea6ce0d8ba0f98747339e84eb8596aa1948b13" translate="yes" xml:space="preserve">
          <source>The Perl 5 core includes mechanisms to help porters make backwards incompatible changes more compatible such as the &lt;a href=&quot;feature&quot;&gt;feature&lt;/a&gt; and &lt;a href=&quot;deprecate&quot;&gt;deprecate&lt;/a&gt; modules. Please use them when appropriate.</source>
          <target state="translated">Perl 5 코어에는 포터가 이전 버전과 호환되지 않는 변경 사항을 &lt;a href=&quot;feature&quot;&gt;기능&lt;/a&gt; 및 &lt;a href=&quot;deprecate&quot;&gt;더 이상 사용하지 않는&lt;/a&gt; 모듈 과 같이 호환 가능하게하는 메커니즘이 포함되어 있습니다. 적절한 경우 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="bab276840135536c5b050850ebb3b382c1feec45" translate="yes" xml:space="preserve">
          <source>The Perl 5 smartmatch and &lt;code&gt;given&lt;/code&gt; /&lt;code&gt;when&lt;/code&gt; constructs are not compatible with their Perl 6 analogues. The most visible difference and least important difference is that, in Perl 5, parentheses are required around the argument to &lt;code&gt;given()&lt;/code&gt; and &lt;code&gt;when()&lt;/code&gt; (except when this last one is used as a statement modifier). Parentheses in Perl 6 are always optional in a control construct such as &lt;code&gt;if()&lt;/code&gt; , &lt;code&gt;while()&lt;/code&gt; , or &lt;code&gt;when()&lt;/code&gt; ; they can't be made optional in Perl 5 without a great deal of potential confusion, because Perl 5 would parse the expression</source>
          <target state="translated">Perl 5 스마트 매치와 &lt;code&gt;given&lt;/code&gt; / &lt;code&gt;when&lt;/code&gt; 구성은 Perl 6 아날로그와 호환되지 않습니다. 가장 눈에 띄는 차이점과 가장 중요한 차이점은 Perl 5에서 &lt;code&gt;given()&lt;/code&gt; 및 &lt;code&gt;when()&lt;/code&gt; 대한 인수 주위에 괄호가 필요하다는 것입니다 (마지막 수정자가 명령문 수정 자로 사용될 때 제외). Perl 6의 괄호는 &lt;code&gt;if()&lt;/code&gt; , &lt;code&gt;while()&lt;/code&gt; 또는 &lt;code&gt;when()&lt;/code&gt; 과 같은 제어 구문에서 항상 선택 사항입니다 . Perl 5는 표현을 파싱하기 때문에 잠재적 인 혼란이없이 Perl 5에서 선택적으로 만들 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="5d32638db8a1c22afb3b560c2715ac8287958e39" translate="yes" xml:space="preserve">
          <source>The Perl 5 source code is available at &amp;lt;&lt;a href=&quot;http://perl5.git.perl.org/perl.git&quot;&gt;http://perl5.git.perl.org/perl.git&lt;/a&gt;&amp;gt; and ExtUtils-CBuilder may be found in the</source>
          <target state="translated">Perl 5 소스 코드는 &amp;lt; &lt;a href=&quot;http://perl5.git.perl.org/perl.git&quot;&gt;http://perl5.git.perl.org/perl.git&lt;/a&gt; &amp;gt; 에서 구할 수 있으며 ExtUtils-CBuilder는</target>
        </trans-unit>
        <trans-unit id="afeaca8df1b6424181f3a66ccbb3b6382d64c41b" translate="yes" xml:space="preserve">
          <source>The Perl API changes over time. New functions are added or the interfaces of existing functions are changed. The &lt;code&gt;Devel::PPPort&lt;/code&gt; module tries to provide compatibility code for some of these changes, so XS writers don't have to code it themselves when supporting multiple versions of Perl.</source>
          <target state="translated">Perl API는 시간이 지남에 따라 변경됩니다. 새로운 기능이 추가되거나 기존 기능의 인터페이스가 변경됩니다. &lt;code&gt;Devel::PPPort&lt;/code&gt; 펄의 여러 버전을 지원할 때 XS 작가는 코드 그 자체를하지 않아도 모듈은 이러한 변경 사항 중 일부에 대한 호환성 코드를 제공하려고합니다.</target>
        </trans-unit>
        <trans-unit id="b3ddaaeb977cd171a0809e4c9d46db7115a9f674" translate="yes" xml:space="preserve">
          <source>The Perl Archive Toolkit ( &lt;a href=&quot;http://par.perl.org/&quot;&gt;http://par.perl.org/&lt;/a&gt; ) is Perl's analog to Java's JAR. It's freely available and on CPAN ( &lt;a href=&quot;http://search.cpan.org/dist/PAR/&quot;&gt;http://search.cpan.org/dist/PAR/&lt;/a&gt; ).</source>
          <target state="translated">Perl Archive Toolkit ( &lt;a href=&quot;http://par.perl.org/&quot;&gt;http://par.perl.org/&lt;/a&gt; )은 Perl의 Java JAR과 유사합니다. CPAN ( &lt;a href=&quot;http://search.cpan.org/dist/PAR/&quot;&gt;http://search.cpan.org/dist/PAR/&lt;/a&gt; ) 에서 무료로 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="f01c36b942223cd02d483b2f8710a5fcbe7b3f1a" translate="yes" xml:space="preserve">
          <source>The Perl Authors Upload SErver (&lt;a href=&quot;http://pause.perl.org&quot;&gt;http://pause.perl.org&lt;/a&gt;), the gateway for &lt;b&gt;modules&lt;/b&gt; on their way to &lt;b&gt;CPAN&lt;/b&gt;.</source>
          <target state="translated">&lt;b&gt;CPAN&lt;/b&gt; 으로가는 &lt;b&gt;모듈&lt;/b&gt; 의 게이트웨이 인 Perl Authors Upload SErver ( &lt;a href=&quot;http://pause.perl.org&quot;&gt;http://pause.perl.org&lt;/a&gt; ) .&lt;b&gt;&lt;/b&gt;&lt;b&gt;&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="b633506d32991c982d57371e8ff5e8e620c6651c" translate="yes" xml:space="preserve">
          <source>The Perl Compiler Backend</source>
          <target state="translated">펄 컴파일러 백엔드</target>
        </trans-unit>
        <trans-unit id="528f579664ac974a57416a02a9f4d6f1fb344d5b" translate="yes" xml:space="preserve">
          <source>The Perl DLL is installed in \System\Libs\. The Perl libraries and extension DLLs are installed in \System\Libs\Perl\X.Y.Z\. The PerlApp is installed in \System\Apps\, and the SIS also installs a couple of demo scripts in \Perl\ (C:\Mydocs\Perl\ on Nokia 7710).</source>
          <target state="translated">Perl DLL은 \ System \ Libs \에 설치됩니다. Perl 라이브러리 및 확장 DLL은 \ System \ Libs \ Perl \ XYZ \에 설치됩니다. PerlApp은 \ System \ Apps \에 설치되며 SIS는 \ Perl \ (Nokia 7710의 C : \ Mydocs \ Perl \)에 몇 개의 데모 스크립트도 설치합니다.</target>
        </trans-unit>
        <trans-unit id="b0d4827468980c5df0784a8af4ce7848ecde4b66" translate="yes" xml:space="preserve">
          <source>The Perl Debugger</source>
          <target state="translated">펄 디버거</target>
        </trans-unit>
        <trans-unit id="003a86b939921d18b908afadb31a1624a5c158e1" translate="yes" xml:space="preserve">
          <source>The Perl Dev Kit ( &lt;a href=&quot;http://www.activestate.com/Products/Perl_Dev_Kit/&quot;&gt;http://www.activestate.com/Products/Perl_Dev_Kit/&lt;/a&gt; ) from ActiveState can &quot;Turn your Perl programs into ready-to-run executables for HP-UX, Linux, Solaris and Windows.&quot;</source>
          <target state="translated">ActiveState 의 Perl Dev Kit ( &lt;a href=&quot;http://www.activestate.com/Products/Perl_Dev_Kit/&quot;&gt;http://www.activestate.com/Products/Perl_Dev_Kit/&lt;/a&gt; )는 &quot;Perl 프로그램을 HP-UX, Linux, Solaris 및 Windows 용 실행 가능한 실행 파일로 전환 할 수 있습니다.&quot;</target>
        </trans-unit>
        <trans-unit id="1c56af5a226a11b5977e777d4fb79e3fb6c794f9" translate="yes" xml:space="preserve">
          <source>The Perl Forked Debugger</source>
          <target state="translated">펄 포크 디버거</target>
        </trans-unit>
        <trans-unit id="076abbe7cec0580634f13cf92571ce869da1bf79" translate="yes" xml:space="preserve">
          <source>The Perl Foundation is an advocacy organization for the Perl language which maintains the web site &lt;a href=&quot;http://www.perl.org/&quot;&gt;http://www.perl.org/&lt;/a&gt; as a general advocacy site for the Perl language. It uses the domain to provide general support services to the Perl community, including the hosting of mailing lists, web sites, and other services. There are also many other sub-domains for special topics like learning Perl and jobs in Perl, such as:</source>
          <target state="translated">Perl Foundation은 Perl 언어의 옹호 조직으로서 웹 사이트 &lt;a href=&quot;http://www.perl.org/&quot;&gt;http://www.perl.org/&lt;/a&gt; 를 Perl 언어의 일반 옹호 사이트로 유지합니다 . 도메인을 사용하여 메일 목록, 웹 사이트 및 기타 서비스 호스팅을 포함하여 Perl 커뮤니티에 일반 지원 서비스를 제공합니다. Perl 학습 및 Perl에서의 작업과 같은 특수 주제에 대한 다른 많은 하위 도메인도 있습니다.</target>
        </trans-unit>
        <trans-unit id="d177a21aa5a9fba680e844771ded5bc126e66e5c" translate="yes" xml:space="preserve">
          <source>The Perl Journal</source>
          <target state="translated">펄 저널</target>
        </trans-unit>
        <trans-unit id="b540cf823fa7d059f14c61e7a0646ec955faa0d9" translate="yes" xml:space="preserve">
          <source>The Perl Profiler</source>
          <target state="translated">펄 프로파일 러</target>
        </trans-unit>
        <trans-unit id="b016030ffb60704d0c5d1297b6257d8c67a0ebea" translate="yes" xml:space="preserve">
          <source>The Perl Review, &lt;a href=&quot;http://www.theperlreview.com&quot;&gt;http://www.theperlreview.com&lt;/a&gt; maintains a website and Google calendar (&lt;a href=&quot;http://www.theperlreview.com/community_calendar&quot;&gt;http://www.theperlreview.com/community_calendar&lt;/a&gt;) for tracking workshops, hackathons, Perl Mongers meetings, and other events. Views of this calendar are at &lt;a href=&quot;http://www.perl.org/events.html&quot;&gt;http://www.perl.org/events.html&lt;/a&gt; and &lt;a href=&quot;http://www.yapc.org&quot;&gt;http://www.yapc.org&lt;/a&gt;.</source>
          <target state="translated">Perl Review, &lt;a href=&quot;http://www.theperlreview.com&quot;&gt;http://www.theperlreview.com&lt;/a&gt; 은 워크숍, 해커 톤, ​​Perl Mongers 미팅 및 기타 이벤트를 추적 하기위한 웹 사이트 및 Google 캘린더 ( &lt;a href=&quot;http://www.theperlreview.com/community_calendar&quot;&gt;http://www.theperlreview.com/community_calendar&lt;/a&gt; )를 유지 관리 합니다. 이 달력은 &lt;a href=&quot;http://www.perl.org/events.html&quot;&gt;http://www.perl.org/events.html&lt;/a&gt; 및 &lt;a href=&quot;http://www.yapc.org&quot;&gt;http://www.yapc.org에&lt;/a&gt; 있습니다.</target>
        </trans-unit>
        <trans-unit id="6955a584a390227f3bb9df6a8ce1cb0fe482186c" translate="yes" xml:space="preserve">
          <source>The Perl argument stack is used to store the values which are sent as parameters to the XSUB and to store the XSUB's return value(s). In reality all Perl functions (including non-XSUB ones) keep their values on this stack all the same time, each limited to its own range of positions on the stack. In this document the first position on that stack which belongs to the active function will be referred to as position 0 for that function.</source>
          <target state="translated">Perl 인수 스택은 XSUB에 매개 변수로 전송 된 값을 저장하고 XSUB의 리턴 값을 저장하는 데 사용됩니다. 실제로 모든 Perl 함수 (XSUB 이외의 함수 포함)는이 스택에서 값을 항상 같은 시간에 유지합니다. 각 스택은 스택의 고유 한 위치 범위로 제한됩니다. 이 문서에서는 활성 기능에 속하는 스택의 첫 번째 위치를 해당 기능의 위치 0이라고합니다.</target>
        </trans-unit>
        <trans-unit id="1afd605920f29e13092c6aa9a01dbc8ba4878de1" translate="yes" xml:space="preserve">
          <source>The Perl build system starts with the</source>
          <target state="translated">Perl 빌드 시스템은</target>
        </trans-unit>
        <trans-unit id="337328dc6570faaca13781601b8dac575ac43697" translate="yes" xml:space="preserve">
          <source>The Perl community has a rather large IRC presence. For starters, it has its own IRC network, &lt;a href=&quot;irc://irc.perl.org&quot;&gt;irc://irc.perl.org&lt;/a&gt;. General (not help-oriented) chat can be found at &lt;a href=&quot;irc://irc.perl.org/#perl&quot;&gt;irc://irc.perl.org/#perl&lt;/a&gt;. Many other more specific chats are also hosted on the network. Information about irc.perl.org is located on the network's website: &lt;a href=&quot;http://www.irc.perl.org&quot;&gt;http://www.irc.perl.org&lt;/a&gt;. For a more help-oriented #perl, check out &lt;a href=&quot;irc://irc.freenode.net/#perl&quot;&gt;irc://irc.freenode.net/#perl&lt;/a&gt;. Perl 6 development also has a presence in &lt;a href=&quot;irc://irc.freenode.net/#perl6&quot;&gt;irc://irc.freenode.net/#perl6&lt;/a&gt;. Most Perl-related channels will be kind enough to point you in the right direction if you ask nicely.</source>
          <target state="translated">Perl 커뮤니티는 다소 큰 IRC 존재를 가지고 있습니다. 우선, 자체 IRC 네트워크 &lt;a href=&quot;irc://irc.perl.org&quot;&gt;irc : //irc.perl.org가&lt;/a&gt; 있습니다. &lt;a href=&quot;irc://irc.perl.org/#perl&quot;&gt;irc : //irc.perl.org/#perl&lt;/a&gt; 에서 일반 (도움말 중심이 아닌) 채팅을 찾을 수 있습니다 . 더 많은 다른 특정 채팅도 네트워크에서 호스팅됩니다. irc.perl.org에 대한 정보는 네트워크 웹 사이트 ( &lt;a href=&quot;http://www.irc.perl.org&quot;&gt;http://www.irc.perl.org)에&lt;/a&gt; 있습니다. 도움말 중심의 #perl을 확인하려면&lt;a href=&quot;irc://irc.freenode.net/#perl&quot;&gt; irc : //irc.freenode.net/#perl을&lt;/a&gt; . Perl 6 개발에는 &lt;a href=&quot;irc://irc.freenode.net/#perl6&quot;&gt;irc : //irc.freenode.net/#perl6도&lt;/a&gt; 있습니다. 대부분의 Perl 관련 채널은 친절하게 요청하면 올바른 방향으로 안내 할 수있을만큼 친절합니다.</target>
        </trans-unit>
        <trans-unit id="1e71a9470b64a2480ea7c8c2886a8ca9bc8c982c" translate="yes" xml:space="preserve">
          <source>The Perl community is as diverse as Perl, and there is a large amount of evidence that the Perl users apply TMTOWTDI to all endeavors, not just programming. From websites, to IRC, to mailing lists, there is more than one way to get involved in the community.</source>
          <target state="translated">Perl 커뮤니티는 Perl만큼 다양하며 Perl 사용자가 프로그래밍뿐만 아니라 모든 노력에 TMTOWTDI를 적용한다는 많은 증거가 있습니다. 웹 사이트, IRC, 메일 목록에 이르기까지 커뮤니티에 참여하는 방법은 여러 가지가 있습니다.</target>
        </trans-unit>
        <trans-unit id="75fca85980fcb62b1837d386b956468cb5d6629f" translate="yes" xml:space="preserve">
          <source>The Perl community is geared toward supporting the most recent releases, so you'll have an easier time finding help for those.</source>
          <target state="translated">Perl 커뮤니티는 최신 릴리스를 지원하도록 설계되었으므로보다 쉽게 ​​도움을 찾을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="660fe5fd6a64acb9219ffd0837bb1e282e990fa7" translate="yes" xml:space="preserve">
          <source>The Perl core has an extensive test suite. If you add new tests (or new modules with tests), you may need to update the</source>
          <target state="translated">Perl 코어에는 광범위한 테스트 스위트가 있습니다. 새 테스트 (또는 테스트가 포함 된 새 모듈)를 추가하는 경우</target>
        </trans-unit>
        <trans-unit id="8f13ce29b0232702f230a3b4d47d029f48d1ff8a" translate="yes" xml:space="preserve">
          <source>The Perl core uses a handful of keys in &lt;code&gt;%^H&lt;/code&gt; which do not follow this convention, because they predate it. Keys that follow the convention won't conflict with the core's historical keys.</source>
          <target state="translated">Perl 코어는 &lt;code&gt;%^H&lt;/code&gt; 의 소수 키를 사용합니다. 이전 규칙을 따르지 않기 때문에이 규칙을 따르지 않습니다. 컨벤션을 따르는 키는 코어의 히스토리 키와 충돌하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="40fdaea2f094775674cd40eee5e41200dd9b0a76" translate="yes" xml:space="preserve">
          <source>The Perl development team are called Perl 5 Porters, and their organization is described at &lt;a href=&quot;http://perldoc.perl.org/perlpolicy.html&quot;&gt;http://perldoc.perl.org/perlpolicy.html&lt;/a&gt;. The organizational rules really just boil down to one: Larry is always right, even when he was wrong.</source>
          <target state="translated">Perl 개발 팀은 Perl 5 Porters라고하며 조직은 &lt;a href=&quot;http://perldoc.perl.org/perlpolicy.html&quot;&gt;http://perldoc.perl.org/perlpolicy.html에&lt;/a&gt; 설명되어 있습니다 . 있습니다. 조직의 규칙은 실제로 한 가지로 요약됩니다.</target>
        </trans-unit>
        <trans-unit id="85f7977946f345bcbaa5f5a8afb688bfb2d58512" translate="yes" xml:space="preserve">
          <source>The Perl development team occasionally make changes to the internal core of the language, but all possible efforts are made toward backward compatibility.</source>
          <target state="translated">Perl 개발 팀은 때때로 언어의 내부 핵심을 변경하지만 가능한 모든 노력은 이전 버전과의 호환성을 위해 이루어집니다.</target>
        </trans-unit>
        <trans-unit id="bef6ea773b29bc42d6bc39580b413ba88c9c2941" translate="yes" xml:space="preserve">
          <source>The Perl engine/interpreter and the host are orthogonal entities. There could be one or more interpreters in a process, and one or more &quot;hosts&quot;, with free association between them.</source>
          <target state="translated">Perl 엔진 / 통역사 및 호스트는 직교 엔티티입니다. 프로세스에 하나 이상의 통역사가있을 수 있고, 하나 이상의 &quot;호스트&quot;가있을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="be2ab355cd62828f3bbc09e8a520aa45842fe8c2" translate="yes" xml:space="preserve">
          <source>The Perl equivalent for this is &lt;code&gt;$#myarray&lt;/code&gt; .</source>
          <target state="translated">이것과 동등한 Perl은 &lt;code&gt;$#myarray&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="3bbb1426c72d3038d784b1de2b64c8aea8f60fd1" translate="yes" xml:space="preserve">
          <source>The Perl executables can be easily rebuilt at any moment. Moreover, one can use the</source>
          <target state="translated">Perl 실행 파일은 언제든지 쉽게 재 구축 할 수 있습니다. 또한, 하나를 사용할 수 있습니다</target>
        </trans-unit>
        <trans-unit id="d136d03bdd5714dfcd154602e7c27ff31ede4518" translate="yes" xml:space="preserve">
          <source>The Perl forked debugger places the debugger commands and output in a separate X-11 terminal window so that commands and output from multiple processes are not mixed together.</source>
          <target state="translated">Perl forked 디버거는 디버거 명령과 출력을 별도의 X-11 터미널 창에 배치하므로 여러 프로세스의 명령과 출력이 함께 혼합되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="fa02d08b07357f1b109729d24eaf520757219ddc" translate="yes" xml:space="preserve">
          <source>The Perl functions for dealing with sockets have the same names as the corresponding system calls in C, but their arguments tend to differ for two reasons. First, Perl filehandles work differently than C file descriptors. Second, Perl already knows the length of its strings, so you don't need to pass that information.</source>
          <target state="translated">소켓을 다루기위한 Perl 함수는 C의 해당 시스템 호출과 동일한 이름을 갖지만, 인수는 두 가지 이유로 다른 경향이 있습니다. 먼저, Perl 파일 핸들은 C 파일 디스크립터와 다르게 작동합니다. 둘째, Perl은 이미 문자열의 길이를 알고 있으므로 해당 정보를 전달할 필요가 없습니다.</target>
        </trans-unit>
        <trans-unit id="92147dd8f1d29e8ce474756b4726d9b1d8e42e16" translate="yes" xml:space="preserve">
          <source>The Perl interface was written by Nathan Torkington &amp;lt;gnat@frii.com&amp;gt;, and is released under the artistic license. Further modifications were made by Greg Bacon &amp;lt;gbacon@cs.uah.edu&amp;gt;, Gurusamy Sarathy &amp;lt;gsar@activestate.com&amp;gt;, and Thomas Wegner &amp;lt;wegner_thomas@yahoo.com&amp;gt;. The C glob code has the following copyright:</source>
          <target state="translated">Perl 인터페이스는 Nathan Torkington &amp;lt;gnat@frii.com&amp;gt;이 작성했으며 예술적 라이센스에 따라 배포됩니다. Greg Bacon &amp;lt;gbacon@cs.uah.edu&amp;gt;, Gurusamy Sarathy &amp;lt;gsar@activestate.com&amp;gt; 및 Thomas Wegner &amp;lt;wegner_thomas@yahoo.com&amp;gt;에 의해 추가 수정되었습니다. C 글로브 코드에는 다음과 같은 저작권이 있습니다.</target>
        </trans-unit>
        <trans-unit id="99bc4ac3d59eed09e1d0f94b3a3f01535d2fc89d" translate="yes" xml:space="preserve">
          <source>The Perl interpreter can be regarded as a closed box: it has an API for feeding it code or otherwise making it do things, but it also has functions for its own use. This smells a lot like an object, and there are ways for you to build Perl so that you can have multiple interpreters, with one interpreter represented either as a C structure, or inside a thread-specific structure. These structures contain all the context, the state of that interpreter.</source>
          <target state="translated">Perl 인터프리터는 닫힌 상자로 간주 될 수 있습니다. 코드를 공급하거나 작업을 수행하기위한 API가 있지만 자체 사용 기능도 있습니다. 이것은 객체처럼 냄새가 나며 Perl을 빌드하여 여러 개의 인터프리터를 가질 수있는 방법이 있습니다. 하나의 인터프리터가 C 구조 또는 스레드 특정 구조로 표시됩니다. 이러한 구조에는 해당 컨텍스트의 모든 컨텍스트, 해당 인터프리터의 상태가 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="4ec97d45bb2f6ea56e5a238f738362154db298f5" translate="yes" xml:space="preserve">
          <source>The Perl logo is a trademark of the Perl Foundation.</source>
          <target state="translated">Perl 로고는 Perl Foundation의 상표입니다.</target>
        </trans-unit>
        <trans-unit id="6b8a4b8bd5fc4d36250e80003bd49d95bed77a10" translate="yes" xml:space="preserve">
          <source>The Perl model for function call and return values is simple: all functions are passed as parameters one single flat list of scalars, and all functions likewise return to their caller one single flat list of scalars. Any arrays or hashes in these call and return lists will collapse, losing their identities--but you may always use pass-by-reference instead to avoid this. Both call and return lists may contain as many or as few scalar elements as you'd like. (Often a function without an explicit return statement is called a subroutine, but there's really no difference from Perl's perspective.)</source>
          <target state="translated">함수 호출 및 반환 값에 대한 Perl 모델은 간단합니다. 모든 함수는 하나의 단일 스칼라 목록으로 매개 변수로 전달되며 모든 함수는 마찬가지로 단일 단일 스칼라 목록으로 호출자에게 리턴됩니다. 이 호출 및 반환 목록의 배열 또는 해시는 ID를 잃어 버릴 것입니다. 그러나이를 피하기 위해 항상 참조로 전달을 사용할 수 있습니다. 호출리스트와 리턴리스트 모두 원하는만큼의 스칼라 요소를 포함 할 수 있습니다. (종종 명시적인 return 문이없는 함수를 서브 루틴이라고하지만 실제로 Perl의 관점에는 차이가 없습니다.)</target>
        </trans-unit>
        <trans-unit id="b9ee0cf4ab63cf1be081346d4784ae92aedc21e4" translate="yes" xml:space="preserve">
          <source>The Perl motto is &quot;There's more than one way to do it.&quot; Divining how many more is left as an exercise to the reader.</source>
          <target state="translated">펄 좌우명은 &quot;한 가지 이상의 방법이있다&quot;는 것이다. 독자에게 연습으로 남은 횟수를 몇 가지로 나누십시오.</target>
        </trans-unit>
        <trans-unit id="b25f4bf878cf14a357970d887adcbf624e87e118" translate="yes" xml:space="preserve">
          <source>The Perl parser will expand $variable and @variable references in regular expressions unless the delimiter is a single quote. Remember, too, that the right-hand side of a &lt;code&gt;&lt;a href=&quot;functions/s&quot;&gt;s///&lt;/a&gt;&lt;/code&gt; substitution is considered a double-quoted string (see &lt;a href=&quot;perlop&quot;&gt;perlop&lt;/a&gt; for more details). Remember also that any regex special characters will be acted on unless you precede the substitution with \Q. Here's an example:</source>
          <target state="translated">구분 기호가 작은 따옴표가 아닌 경우 Perl 파서는 정규식에서 $ variable 및 @variable 참조를 확장합니다. 또한 &lt;code&gt;&lt;a href=&quot;functions/s&quot;&gt;s///&lt;/a&gt;&lt;/code&gt; 치환 의 오른쪽 은 큰 따옴표로 묶인 문자열로 간주됩니다 ( 자세한 내용 은 &lt;a href=&quot;perlop&quot;&gt;perlop&lt;/a&gt; 참조). \ Q로 대체하기 전에는 정규 표현식 특수 문자가 작동한다는 점도 기억하십시오. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="0bc52b1056fd349e5d759d3b05d91376e2d9a16e" translate="yes" xml:space="preserve">
          <source>The Perl port has been done for the most part using the Symbian standard POSIX-ish STDLIB library. It is a reasonably complete library, but certain corners of such emulation libraries that tend to be left unimplemented on non-UNIX platforms have been left unimplemented also this time: fork(), signals(), user/group ids, select() working for sockets, non-blocking sockets, and so forth. See the file</source>
          <target state="translated">Perl 포트는 대부분 Symbian 표준 POSIX-ish STDLIB 라이브러리를 사용하여 수행되었습니다. 합리적으로 완전한 라이브러리이지만 유닉스가 아닌 플랫폼에서 구현되지 않은 경향이있는 에뮬레이션 라이브러리의 특정 모서리는 이번에도 구현되지 않은 채로 있습니다 : fork (), 시그널 (), 사용자 / 그룹 ID, select () 작동 소켓, 비 차단 소켓 등에 사용됩니다. 파일보기</target>
        </trans-unit>
        <trans-unit id="b67868d8a32ed03bc87b830fb6a6b1a5f3f79a34" translate="yes" xml:space="preserve">
          <source>The Perl regular expression &lt;code&gt;\p{}&lt;/code&gt; and &lt;code&gt;\P{}&lt;/code&gt; constructs give access to most of the Unicode character properties. The table below shows all these constructs, both single and compound forms.</source>
          <target state="translated">Perl 정규식 &lt;code&gt;\p{}&lt;/code&gt; 및 &lt;code&gt;\P{}&lt;/code&gt; 구문은 대부분의 유니 코드 문자 속성에 대한 액세스를 제공합니다. 아래 표는 단일 및 복합 형태의 모든 구성을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="f0e8425fc37fe67a70d8b01bf266a53e0f530848" translate="yes" xml:space="preserve">
          <source>The Perl source tree is big. Here's some of the thing you'll find in it:</source>
          <target state="translated">펄 소스 트리가 크다. 여기에 몇 가지 내용이 있습니다.</target>
        </trans-unit>
        <trans-unit id="6a0d4acb6c550a60d6a38a5a63678cce3e904bee" translate="yes" xml:space="preserve">
          <source>The Perl subroutine,</source>
          <target state="translated">Perl 서브 루틴</target>
        </trans-unit>
        <trans-unit id="df3a691d5cbb91293ddf18af01bb5af5f01bbb73" translate="yes" xml:space="preserve">
          <source>The Perl syntax error message from the last &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval()&lt;/a&gt;&lt;/code&gt; operator. If &lt;code&gt;$@&lt;/code&gt; is the null string, the last &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval()&lt;/a&gt;&lt;/code&gt; parsed and executed correctly (although the operations you invoked may have failed in the normal fashion).</source>
          <target state="translated">마지막 &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval()&lt;/a&gt;&lt;/code&gt; 연산자 의 Perl 구문 오류 메시지입니다 . 경우 &lt;code&gt;$@&lt;/code&gt; 널 (null) 문자열입니다, 마지막 &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval()&lt;/a&gt;&lt;/code&gt; 구문 분석 (당신이 호출 한 작업이 정상적인 방식으로 실패 할 수 있지만)이 올바르게 실행.</target>
        </trans-unit>
        <trans-unit id="968a791625fe0d4ef7287cb8aaab8e329d603dbe" translate="yes" xml:space="preserve">
          <source>The Perl test suite may still report some errors on the Hurd. The &quot;lib/anydbm&quot; and &quot;pragma/warnings&quot; tests will almost certainly fail. Both failures are not really specific to the Hurd, as indicated by the test suite output.</source>
          <target state="translated">Perl 테스트 스위트는 여전히 허드에서 일부 오류를보고 할 수 있습니다. &quot;lib / anydbm&quot;및 &quot;pragma / warnings&quot;테스트는 거의 실패 할 것입니다. 테스트 스위트 출력에서 ​​알 수 있듯이 두 실패 모두 실제로 허드에만 해당되는 것은 아닙니다.</target>
        </trans-unit>
        <trans-unit id="f6abf53e543be5d8676f05668af9e144a63af4c4" translate="yes" xml:space="preserve">
          <source>The Perl variables that are available for interpolation into typemaps are the following:</source>
          <target state="translated">타입 맵으로 보간 할 수있는 Perl 변수는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="6bcd8c322dd20c222b91b35688318973e6596a5a" translate="yes" xml:space="preserve">
          <source>The Perl warning &quot;Wide character in ...&quot; is caused by such a character. With no specified encoding layer, Perl tries to fit things into a single byte. When it can't, it emits this warning (if warnings are enabled), and uses UTF-8 encoded data instead.</source>
          <target state="translated">Perl 경고 &quot;Wide character in ...&quot;는 이러한 문자로 인해 발생합니다. 지정된 인코딩 레이어가 없으면 Perl은 사물을 단일 바이트에 맞추려고합니다. 불가능한 경우이 경고가 발생하고 (경고가 활성화 된 경우) UTF-8로 인코딩 된 데이터를 대신 사용합니다.</target>
        </trans-unit>
        <trans-unit id="4d7feb5052b0fb54136f812ed2c2ffa2175dab42" translate="yes" xml:space="preserve">
          <source>The Perl-QA list attempted to ensure backwards compatibility with &lt;a href=&quot;../test/harness&quot;&gt;Test::Harness&lt;/a&gt;. However, there are some minor differences.</source>
          <target state="translated">Perl-QA 목록은 &lt;a href=&quot;../test/harness&quot;&gt;Test :: Harness&lt;/a&gt; 와의 호환성을 보장하려고 시도했습니다 . 그러나 약간의 차이가 있습니다.</target>
        </trans-unit>
        <trans-unit id="a9ec1c232da33c6ab26241322f9069a9704be0af" translate="yes" xml:space="preserve">
          <source>The PerlApp also is started when the &quot;Perl recognizer&quot; (also included and installed) detects a Perl file being activated through the GUI, and offers either to install it under \Perl (if the Perl file is in the inbox of the messaging application) or to run it (if the Perl file is under \Perl).</source>
          <target state="translated">PerlApp은 또한 &quot;Perl 인식기&quot;(포함 및 설치됨)가 GUI를 통해 활성화되는 Perl 파일을 감지하고 \ Perl 아래에 설치하도록 제안합니다 (Perl 파일이 메시징 응용 프로그램의받은 편지함에있는 경우). 또는 Perl 파일이 \ Perl 아래에있는 경우이를 실행하십시오.</target>
        </trans-unit>
        <trans-unit id="c6111a686e0ef0ac50573a59b08dc1b8aeb3287a" translate="yes" xml:space="preserve">
          <source>The PerlApp application demonstrates how to embed Perl interpreters to a Symbian application. The &quot;Time&quot; menu item runs the following Perl code: &lt;code&gt;&lt;a href=&quot;functions/print&quot;&gt;print&lt;/a&gt; &quot;Running in &quot;, $^O, &quot;\n&quot;, &lt;a href=&quot;functions/scalar&quot;&gt;scalar&lt;/a&gt; &lt;a href=&quot;functions/localtime&quot;&gt;localtime&lt;/a&gt;&lt;/code&gt; , the &quot;Oneliner&quot; allows one to type in Perl code, and the &quot;Run&quot; opens a file chooser for selecting a Perl file to run.</source>
          <target state="translated">PerlApp 애플리케이션은 Perl 인터프리터를 Symbian 애플리케이션에 임베드하는 방법을 보여줍니다. &quot;Time&quot;메뉴 항목은 다음 Perl 코드를 실행합니다 : &lt;code&gt;&lt;a href=&quot;functions/print&quot;&gt;print&lt;/a&gt; &quot;Running in &quot;, $^O, &quot;\n&quot;, &lt;a href=&quot;functions/scalar&quot;&gt;scalar&lt;/a&gt; &lt;a href=&quot;functions/localtime&quot;&gt;localtime&lt;/a&gt;&lt;/code&gt; , &quot;Oneliner&quot;를 사용하면 Perl 코드를 입력 할 수 있으며 &quot;Run&quot;은 파일을 엽니 다 실행할 Perl 파일을 선택하기위한 선택기.</target>
        </trans-unit>
        <trans-unit id="b43fd89b2979a98b7d902f7d0334218ba2ca529e" translate="yes" xml:space="preserve">
          <source>The PerlIO abstraction was introduced in perl5.003_02 but languished as just an abstraction until perl5.7.0. However during that time a number of perl extensions switched to using it, so the API is mostly fixed to maintain (source) compatibility.</source>
          <target state="translated">PerlIO 추상화는 perl5.003_02에 도입되었지만 perl5.7.0까지 추상화로 사라졌습니다. 그러나 그 기간 동안 많은 perl 확장이 그것을 사용하도록 전환했기 때문에 API는 대부분 (소스) 호환성을 유지하도록 수정되었습니다.</target>
        </trans-unit>
        <trans-unit id="43641046aefdabfa554afe6cf89fa8594b9147ac" translate="yes" xml:space="preserve">
          <source>The PerlIO is set to textmode. Use PerlIO_binmode if this is not the desired mode.</source>
          <target state="translated">PerlIO가 텍스트 모드로 설정되어 있습니다. 원하는 모드가 아닌 경우 PerlIO_binmode를 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="df2a9946f78c97c4cb0379505dfaf42cfc784763" translate="yes" xml:space="preserve">
          <source>The PerlIO::via module allows you to develop PerlIO layers in Perl, without having to go into the nitty gritty of programming C with XS as the interface to Perl.</source>
          <target state="translated">PerlIO :: via 모듈을 사용하면 Perl의 인터페이스로 XS를 사용하여 C를 프로그래밍하는 데 어려움을 겪지 않고도 PerlIO에서 PerlIO 계층을 개발할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="69b9d42402dbac92bb5f313095f98e57d920e008" translate="yes" xml:space="preserve">
          <source>The Pod format is not necessarily sufficient for writing a book. Pod is just meant to be an idiot-proof common source for nroff, HTML, TeX, and other markup languages, as used for online documentation. Translators exist for &lt;b&gt;pod2text&lt;/b&gt;, &lt;b&gt;pod2html&lt;/b&gt;, &lt;b&gt;pod2man&lt;/b&gt; (that's for nroff(1) and troff(1)), &lt;b&gt;pod2latex&lt;/b&gt;, and &lt;b&gt;pod2fm&lt;/b&gt;. Various others are available in CPAN.</source>
          <target state="translated">포드 형식이 책을 쓰기에 반드시 필요한 것은 아닙니다. 포드는 온라인 문서에 사용되는 nroff, HTML, TeX 및 기타 마크 업 언어에 대한 바보 방지 공통 소스입니다. &lt;b&gt;pod2text&lt;/b&gt; , &lt;b&gt;pod2html&lt;/b&gt; , &lt;b&gt;pod2man&lt;/b&gt; (nroff (1) 및 troff (1) 용), &lt;b&gt;pod2latex&lt;/b&gt; 및 &lt;b&gt;pod2fm&lt;/b&gt; 용 번역기가 존재합니다 . CPAN에는 다양한 다른 제품이 있습니다.</target>
        </trans-unit>
        <trans-unit id="5181d340ea28e7004e1fc926376f0269c6a7af0c" translate="yes" xml:space="preserve">
          <source>The Pod parser normally expects to read octets and to convert those octets to characters based on the &lt;code&gt;=encoding&lt;/code&gt; declaration in the Pod source. Set this option to a true value to indicate that the Pod source is already a Perl character stream. This tells the parser to ignore any &lt;code&gt;=encoding&lt;/code&gt; command and to skip all the code paths involving decoding octets.</source>
          <target state="translated">포드 파서는 일반적으로 옥텟을 읽고 포드 소스 의 &lt;code&gt;=encoding&lt;/code&gt; 선언에 따라 옥텟을 문자로 변환 할 것으로 예상합니다 . 포드 소스가 이미 Perl 문자 스트림임을 나타내려면이 옵션을 true 값으로 설정하십시오. 이것은 파서에게 &lt;code&gt;=encoding&lt;/code&gt; 명령 을 무시하고 옥텟 디코딩과 관련된 모든 코드 경로를 건너 뛰 도록 지시합니다 .</target>
        </trans-unit>
        <trans-unit id="d54e40195036f1a1a1b5551f96370345ff64638a" translate="yes" xml:space="preserve">
          <source>The Pod::Simple parser expects to read &lt;b&gt;octets&lt;/b&gt;. The parser will decode the octets into Perl's internal character string representation using the value of the &lt;code&gt;=encoding&lt;/code&gt; declaration in the POD source.</source>
          <target state="translated">Pod :: Simple 파서는 &lt;b&gt;octets&lt;/b&gt; 를 읽을 것으로 예상합니다 . 파서는 POD 소스에서 &lt;code&gt;=encoding&lt;/code&gt; 선언 값을 사용하여 옥텟을 Perl의 내부 문자열 표현으로 디코딩합니다 .</target>
        </trans-unit>
        <trans-unit id="a52e0eb3298b4fa461fa923215cc1e681ac40256" translate="yes" xml:space="preserve">
          <source>The Pod::Usage distribution comes with a script pod2usage which offers a command line interface to the functionality of Pod::Usage. See &lt;a href=&quot;../pod2usage&quot;&gt;pod2usage&lt;/a&gt;.</source>
          <target state="translated">Pod :: Usage 배포에는 Pod :: Usage 기능에 대한 명령 줄 인터페이스를 제공하는 스크립트 pod2usage가 제공됩니다. &lt;a href=&quot;../pod2usage&quot;&gt;pod2usage를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="27cf4d4fc397867d0e2a99e5b7bffdeae843c96c" translate="yes" xml:space="preserve">
          <source>The Portable Operating System Interface specification.</source>
          <target state="translated">휴대용 운영 체제 인터페이스 사양.</target>
        </trans-unit>
        <trans-unit id="355c15d3884285cbe9de6e8c0623457a61fdc6ca" translate="yes" xml:space="preserve">
          <source>The Problem</source>
          <target state="translated">문제</target>
        </trans-unit>
        <trans-unit id="cca8ca027231a86237a6c4dda51f169cc4d16c32" translate="yes" xml:space="preserve">
          <source>The Pugs prototype Perl 6 Object Model uses C3</source>
          <target state="translated">퍼그 프로토 타입 Perl 6 오브젝트 모델은 C3를 사용합니다.</target>
        </trans-unit>
        <trans-unit id="77d5d72ac418e20fd29b7eec3b6c8de1afc54920" translate="yes" xml:space="preserve">
          <source>The REGEXP struct is defined in</source>
          <target state="translated">REGEXP 구조체는</target>
        </trans-unit>
        <trans-unit id="2ad89d37eadf28843f6bcc04fe292798559736be" translate="yes" xml:space="preserve">
          <source>The REGEXP structure</source>
          <target state="translated">REGEXP 구조</target>
        </trans-unit>
        <trans-unit id="8da65302c118d1898dddaf19bb76877bb8166258" translate="yes" xml:space="preserve">
          <source>The REGEXP structure contains all the data that Perl needs to be aware of to properly work with the regular expression. It includes data about optimisations that Perl can use to determine if the regex engine should really be used, and various other control info that is needed to properly execute patterns in various contexts, such as if the pattern anchored in some way, or what flags were used during the compile, or if the program contains special constructs that Perl needs to be aware of.</source>
          <target state="translated">REGEXP 구조에는 정규 표현식을 올바르게 사용하기 위해 Perl이 알고 있어야하는 모든 데이터가 포함됩니다. 여기에는 Perl이 정규식 엔진을 실제로 사용해야하는지 여부를 결정하는 데 사용할 수있는 최적화에 대한 데이터와 패턴이 어떤 방식으로 고정되었는지 또는 어떤 플래그가 있는지 등 다양한 컨텍스트에서 패턴을 올바르게 실행하는 데 필요한 다양한 제어 정보가 포함됩니다. 컴파일 도중 또는 프로그램에 Perl이 알아야하는 특수한 구성이 포함 된 경우에 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="1d6f38948819f825c1778442bfb0bf54fd236038" translate="yes" xml:space="preserve">
          <source>The REQUIRE: Keyword</source>
          <target state="translated">필요 : 키워드</target>
        </trans-unit>
        <trans-unit id="eb7911fb319180325559ab93300e4a8e754d4918" translate="yes" xml:space="preserve">
          <source>The REQUIRE: keyword is used to indicate the minimum version of the &lt;b&gt;xsubpp&lt;/b&gt; compiler needed to compile the XS module. An XS module which contains the following statement will compile with only &lt;b&gt;xsubpp&lt;/b&gt; version 1.922 or greater:</source>
          <target state="translated">REQUIRE : 키워드는 XS 모듈을 컴파일하는 데 필요한 &lt;b&gt;xsubpp&lt;/b&gt; 컴파일러 의 최소 ​​버전을 나타내는 데 사용됩니다 . 다음 명령문이 포함 된 XS 모듈은 &lt;b&gt;xsubpp&lt;/b&gt; 버전 1.922 이상 으로 만 컴파일됩니다 .</target>
        </trans-unit>
        <trans-unit id="325d9dc6bcb33887233fc6bb3fee83c1db779aa6" translate="yes" xml:space="preserve">
          <source>The RETVAL Variable</source>
          <target state="translated">RETVAL 변수</target>
        </trans-unit>
        <trans-unit id="2c001438878b5f3376fc8700b6556da0eb7ce7c1" translate="yes" xml:space="preserve">
          <source>The RETVAL variable is a special C variable that is declared automatically for you. The C type of RETVAL matches the return type of the C library function. The &lt;b&gt;xsubpp&lt;/b&gt; compiler will declare this variable in each XSUB with non-&lt;code&gt;void&lt;/code&gt; return type. By default the generated C function will use RETVAL to hold the return value of the C library function being called. In simple cases the value of RETVAL will be placed in ST(0) of the argument stack where it can be received by Perl as the return value of the XSUB.</source>
          <target state="translated">RETVAL 변수는 자동으로 선언되는 특수 C 변수입니다. RETVAL의 C 유형은 C 라이브러리 함수의 리턴 유형과 일치합니다. &lt;b&gt;은 xsubpp&lt;/b&gt; 컴파일러 비 각 XSUB이 변수를 선언한다 &lt;code&gt;void&lt;/code&gt; 반환형. 기본적으로 생성 된 C 함수는 RETVAL을 사용하여 호출중인 C 라이브러리 함수의 리턴 값을 보유합니다. 간단한 경우에 RETVAL의 값은 인수 스택의 ST (0)에 배치되며 여기서 Perl은 XSUB의 반환 값으로이를 수신 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b5719fca838ea2f703064b736671d8a5c53c2b7c" translate="yes" xml:space="preserve">
          <source>The Ram is a cookbook with hundreds of examples of using Perl to accomplish specific tasks:</source>
          <target state="translated">Ram은 특정 작업을 수행하기 위해 Perl을 사용하는 수백 가지 예가 포함 된 요리 책입니다.</target>
        </trans-unit>
        <trans-unit id="bda5eb8009d503d3f7d7ac84a0313722c46a6dc4" translate="yes" xml:space="preserve">
          <source>The Rest</source>
          <target state="translated">나머지</target>
        </trans-unit>
        <trans-unit id="c06052540c4d2319036f128e767c17cbef7e664e" translate="yes" xml:space="preserve">
          <source>The Role of the typemap File in Your Distribution</source>
          <target state="translated">배포판에서 typemap 파일의 역할</target>
        </trans-unit>
        <trans-unit id="5afe900033efd0b8bef5b765a85f46485e313663" translate="yes" xml:space="preserve">
          <source>The SCOPE: Keyword</source>
          <target state="translated">범위 : 키워드</target>
        </trans-unit>
        <trans-unit id="3f77c1166b9eee5ec219ef962a60436e0a2f2130" translate="yes" xml:space="preserve">
          <source>The SCOPE: keyword allows scoping to be enabled for a particular XSUB. If enabled, the XSUB will invoke ENTER and LEAVE automatically.</source>
          <target state="translated">SCOPE : 키워드를 사용하면 특정 XSUB에 대해 범위를 사용할 수 있습니다. 활성화되면 XSUB는 ENTER와 LEAVE를 자동으로 호출합니다.</target>
        </trans-unit>
        <trans-unit id="3f3c8dbe377ba2fb462f83142477acc2c9fed9b5" translate="yes" xml:space="preserve">
          <source>The SEEK_* constants can be imported from the &lt;code&gt;Fcntl&lt;/code&gt; module if you don't wish to use the numbers &lt;code&gt;0&lt;/code&gt;&lt;code&gt;1&lt;/code&gt; or &lt;code&gt;2&lt;/code&gt; in your code.</source>
          <target state="translated">코드에서 숫자 &lt;code&gt;0&lt;/code&gt; &lt;code&gt;1&lt;/code&gt; 또는 &lt;code&gt;2&lt;/code&gt; 를 사용하지 않으려면 &lt;code&gt;Fcntl&lt;/code&gt; 모듈 에서 SEEK_ * 상수를 가져올 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="6874e0e71dff8b677770e211cb23f7a0bc03af61" translate="yes" xml:space="preserve">
          <source>The STDIN filehandle used by the command is inherited from Perl's STDIN. For example:</source>
          <target state="translated">명령이 사용하는 STDIN 파일 핸들은 Perl의 STDIN에서 상속됩니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="c9698c556df2cef5c4ee4e944157366d894bd711" translate="yes" xml:space="preserve">
          <source>The SV arena serves the secondary purpose of allowing still-live SVs to be located and destroyed during final cleanup.</source>
          <target state="translated">SV 아레나는 최종 정리 중에 스틸 SV를 찾아 파괴 할 수 있도록하는 2 차 목적을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="82e45de5e22cb3332054cbfb0b3a963e2aa8939b" translate="yes" xml:space="preserve">
          <source>The SV returned has a refcount of 1.</source>
          <target state="translated">반환 된 SV의 참조 횟수는 1입니다.</target>
        </trans-unit>
        <trans-unit id="3397a37f03fe6e25c10e0df218712221b41b076a" translate="yes" xml:space="preserve">
          <source>The SV* corresponding to the $_ variable. Works even if there is a lexical $_ in scope.</source>
          <target state="translated">$ _ 변수에 해당하는 SV *. 범위에 어휘 $ _가있는 경우에도 작동합니다.</target>
        </trans-unit>
        <trans-unit id="166ec7ce6ae952f37ed9ee7074b722386bfc06c5" translate="yes" xml:space="preserve">
          <source>The SYS:/temp is preferred in Novell NetWare and the C:\system\temp for Symbian (the File::Spec::Win32 is used also for those platforms).</source>
          <target state="translated">SYS : / temp는 Novell NetWare에서 선호되며 Symbian의 경우 C : \ system \ temp (File :: Spec :: Win32는 해당 플랫폼에도 사용됨)입니다.</target>
        </trans-unit>
        <trans-unit id="c305a702522737f58ad2f086c3a8baae101bf7fa" translate="yes" xml:space="preserve">
          <source>The Safe extension module allows the creation of compartments in which perl code can be evaluated. Each compartment has</source>
          <target state="translated">안전 확장 모듈을 사용하면 펄 코드를 평가할 수있는 구획을 만들 수 있습니다. 각 구획에는</target>
        </trans-unit>
        <trans-unit id="f3ebdf6626009aca2f7b1117ac99eeb3a50e8a0f" translate="yes" xml:space="preserve">
          <source>The Second Rule of Sys::Syslog is:</source>
          <target state="translated">Sys :: Syslog의 두 번째 규칙은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="59ce582565e3aa2e433ddd5ed3ee6bdecbd67e3d" translate="yes" xml:space="preserve">
          <source>The Secure Hash Standard (Draft FIPS PUB 180-4) can be found at:</source>
          <target state="translated">보안 해시 표준 (Draft FIPS PUB 180-4)은 다음에서 찾을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a0cf9a0044474cf0b7a47510d7ab73b298c8894f" translate="yes" xml:space="preserve">
          <source>The SelfLoader can load stubs automatically at module initialization with the statement 'SelfLoader-&amp;gt;load_stubs()';, but you may wish to avoid having the stub loading overhead associated with your initialization (though note that the SelfLoader::load_stubs method will be called sooner or later - at latest when the first sub is being autoloaded). In this case, you can put the sub stubs before the __DATA__ token. This can be done manually, but this module allows automatic generation of the stubs.</source>
          <target state="translated">SelfLoader는 'SelfLoader-&amp;gt; load_stubs ()'문을 사용하여 모듈 초기화시 스텁을 자동으로로드 할 수 있지만, 초기화와 연관된 스텁로드 오버 헤드가 발생하지 않도록 할 수 있습니다 (SelfLoader :: load_stubs 메소드가 호출됨에 유의하십시오) 조만간-최근에 첫 번째 서브가 자동로드되는 경우). 이 경우 하위 스텁을 __DATA__ 토큰 앞에 놓을 수 있습니다. 이 작업은 수동으로 수행 할 수 있지만이 모듈을 사용하면 스텁을 자동으로 생성 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c273113828f1c56d85466a94fe42bd54d051b33a" translate="yes" xml:space="preserve">
          <source>The Seventh Rule of Sys::Syslog is:</source>
          <target state="translated">Sys :: Syslog의 일곱 번째 규칙은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="48b5fdd7473bc512821401bfc6bdb55846607392" translate="yes" xml:space="preserve">
          <source>The Silmarillion</source>
          <target state="translated">실마릴리온</target>
        </trans-unit>
        <trans-unit id="3d872a2e6f315517170676af6926b6bd336f2e79" translate="yes" xml:space="preserve">
          <source>The Sixth Rule of Sys::Syslog is:</source>
          <target state="translated">Sys :: Syslog의 여섯 번째 규칙은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="2615af73b1e9a8107739890b278d6bb8e8c58b89" translate="yes" xml:space="preserve">
          <source>The Socket library makes this slightly easier:</source>
          <target state="translated">소켓 라이브러리는 이것을 약간 더 쉽게 만듭니다 :</target>
        </trans-unit>
        <trans-unit id="0346baceabdf020f1948aaad1950b71c29c8313d" translate="yes" xml:space="preserve">
          <source>The Solaris FAQ is available at &lt;a href=&quot;http://www.science.uva.nl/pub/solaris/solaris2.html&quot;&gt;http://www.science.uva.nl/pub/solaris/solaris2.html&lt;/a&gt;.</source>
          <target state="translated">Solaris FAQ는 &lt;a href=&quot;http://www.science.uva.nl/pub/solaris/solaris2.html&quot;&gt;http://www.science.uva.nl/pub/solaris/solaris2.html에&lt;/a&gt; 있습니다.</target>
        </trans-unit>
        <trans-unit id="c6524b148594d89baefb15f79bab2c7c15e79227" translate="yes" xml:space="preserve">
          <source>The Solution</source>
          <target state="translated">해결책</target>
        </trans-unit>
        <trans-unit id="f8bdb1b7f6851c01f4e6dd6b9335a25cbb9f32fe" translate="yes" xml:space="preserve">
          <source>The Source Filters distribution is available on CPAN, in</source>
          <target state="translated">소스 필터 배포는 CPAN에서 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c95deb069230cbfe43ae345e5dcb1b877dd184d4" translate="yes" xml:space="preserve">
          <source>The Storable engine can also store data into a Perl scalar instead, to later retrieve them. This is mainly used to freeze a complex structure in some safe compact memory place (where it can possibly be sent to another process via some IPC, since freezing the structure also serializes it in effect). Later on, and maybe somewhere else, you can thaw the Perl scalar out and recreate the original complex structure in memory.</source>
          <target state="translated">Storable 엔진은 데이터를 나중에 Perl 스칼라에 저장하여 나중에 검색 할 수도 있습니다. 이것은 주로 안전한 소형 메모리 장소에서 복잡한 구조를 고정하는 데 사용됩니다 (구조를 동결하면 사실상 직렬화되기 때문에 일부 IPC를 통해 다른 프로세스로 전송 될 수 있음). 나중에 그리고 어딘가에 Perl 스칼라를 녹여서 메모리에 원래의 복잡한 구조를 다시 만들 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b46a98161104ffbf830836edabb2204067559b45" translate="yes" xml:space="preserve">
          <source>The Storable package brings persistence to your Perl data structures containing SCALAR, ARRAY, HASH or REF objects, i.e. anything that can be conveniently stored to disk and retrieved at a later time.</source>
          <target state="translated">Storable 패키지는 SCALAR, ARRAY, HASH 또는 REF 객체, 즉 디스크에 저장하고 나중에 검색 할 수있는 모든 것을 포함하는 Perl 데이터 구조에 지속성을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="1c31479831ac23c24002214051aef3521fbb967b" translate="yes" xml:space="preserve">
          <source>The Sun Managers' FAQ is available at &lt;a href=&quot;ftp://ftp.cs.toronto.edu/pub/jdd/sunmanagers/faq&quot;&gt;ftp://ftp.cs.toronto.edu/pub/jdd/sunmanagers/faq&lt;/a&gt;</source>
          <target state="translated">Sun Manager의 FAQ는 &lt;a href=&quot;ftp://ftp.cs.toronto.edu/pub/jdd/sunmanagers/faq&quot;&gt;ftp://ftp.cs.toronto.edu/pub/jdd/sunmanagers/faq&lt;/a&gt; 에 있습니다.</target>
        </trans-unit>
        <trans-unit id="6e4005ffb38cdcce66cf2552b3af0aed0d38d327" translate="yes" xml:space="preserve">
          <source>The Symbian port is licensed under the same terms as Perl itself.</source>
          <target state="translated">Symbian 포트는 Perl과 동일한 조건으로 라이센스가 부여됩니다.</target>
        </trans-unit>
        <trans-unit id="2d3f94b6eeafe888e9cb15f1090b03b3cc5b3e69" translate="yes" xml:space="preserve">
          <source>The Syntax of Variable Names</source>
          <target state="translated">변수 이름의 구문</target>
        </trans-unit>
        <trans-unit id="0dcb2ce1d39ebcd7787f9ace607f3511d6d60bc4" translate="yes" xml:space="preserve">
          <source>The SysV IPC code above was written long ago, and it's definitely clunky looking. For a more modern look, see the IPC::SysV module.</source>
          <target state="translated">위의 SysV IPC 코드는 오래 전에 작성되었으며 확실히 어색합니다. 보다 현대적인 모습을 보려면 IPC :: SysV 모듈을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="81ef1999f4ab1d77c16c0134c1c911b0b6e377cd" translate="yes" xml:space="preserve">
          <source>The TEMPLATE has the same format as in the &lt;code&gt;&lt;a href=&quot;functions/pack&quot;&gt;pack&lt;/a&gt;&lt;/code&gt; function. Here's a subroutine that does substring:</source>
          <target state="translated">TEMPLATE는 &lt;code&gt;&lt;a href=&quot;functions/pack&quot;&gt;pack&lt;/a&gt;&lt;/code&gt; 기능 과 동일한 형식 입니다. 서브 스트링을 수행하는 서브 루틴은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="14ab3be603ef17e174d5422d8fa9db4cbcd8a394" translate="yes" xml:space="preserve">
          <source>The TEMPLATE has the same format as in the &lt;code&gt;&lt;a href=&quot;pack&quot;&gt;pack&lt;/a&gt;&lt;/code&gt; function. Here's a subroutine that does substring:</source>
          <target state="translated">TEMPLATE는 &lt;code&gt;&lt;a href=&quot;pack&quot;&gt;pack&lt;/a&gt;&lt;/code&gt; 기능 과 동일한 형식 입니다. 서브 스트링을 수행하는 서브 루틴은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="c84fad0e6672900e0ccb385df9c5a53aa073119f" translate="yes" xml:space="preserve">
          <source>The TEMPLATE is a sequence of characters that give the order and type of values, as follows:</source>
          <target state="translated">TEMPLATE는 다음과 같이 순서 및 유형의 값을 제공하는 일련의 문자입니다.</target>
        </trans-unit>
        <trans-unit id="aa18d821da8b238046aafed6e970f790f7308b97" translate="yes" xml:space="preserve">
          <source>The TTY to use for debugging I/O.</source>
          <target state="translated">I / O 디버깅에 사용할 TTY입니다.</target>
        </trans-unit>
        <trans-unit id="28ac83583a93c3bbe04e5be7ac1ae0bf8d97eb60" translate="yes" xml:space="preserve">
          <source>The TYPEMAP file</source>
          <target state="translated">TYPEMAP 파일</target>
        </trans-unit>
        <trans-unit id="10a06ea76a05d039fe9de3770c4f7ea4ca5db2f3" translate="yes" xml:space="preserve">
          <source>The TYPEMAP: Keyword</source>
          <target state="translated">TYPEMAP : 키워드</target>
        </trans-unit>
        <trans-unit id="a995c45f782f6eac7b2e49619c36fb98f70351d5" translate="yes" xml:space="preserve">
          <source>The T_SYSRET typemap is used to process return values from system calls. It is only meaningful when passing values from C to perl (there is no concept of passing a system return value from Perl to C).</source>
          <target state="translated">T_SYSRET 유형 맵은 시스템 호출의 리턴 값을 처리하는 데 사용됩니다. C에서 perl로 값을 전달할 때만 의미가 있습니다 (Perl에서 C로 시스템 리턴 값을 전달한다는 개념은 없습니다).</target>
        </trans-unit>
        <trans-unit id="c00d492559cf23114ccf6a4416bb2a3622dd118a" translate="yes" xml:space="preserve">
          <source>The Tale of the Children of Hurin</source>
          <target state="translated">후린의 아이들 이야기</target>
        </trans-unit>
        <trans-unit id="dc20618b36ece0cca578d0aaf6a793d399b51768" translate="yes" xml:space="preserve">
          <source>The Tamil digits (U+0BE6 - U+0BEF) can also legally be used in old-style Tamil numbers in which they would appear no more than one in a row, separated by characters that mean &quot;times 10&quot;, &quot;times 100&quot;, etc. (See &lt;a href=&quot;http://www.unicode.org/notes/tn21&quot;&gt;http://www.unicode.org/notes/tn21&lt;/a&gt;.)</source>
          <target state="translated">타밀어 숫자 (U + 0BE6-U + 0BEF)는 구식 타밀어 숫자로도 합법적으로 사용될 수 있습니다.이 숫자는 &quot;10 번&quot;, &quot;100 번&quot;을 의미하는 문자로 구분되어 한 행에 하나만 표시됩니다. 등 ( &lt;a href=&quot;http://www.unicode.org/notes/tn21&quot;&gt;http://www.unicode.org/notes/tn21&lt;/a&gt; 참조 )</target>
        </trans-unit>
        <trans-unit id="47ba114bf39e8b27a93263e54d8b1d42bd44b898" translate="yes" xml:space="preserve">
          <source>The Term::ReadKey module from CPAN may be easier to use. Recent versions include also support for non-portable systems as well.</source>
          <target state="translated">CPAN의 Term :: ReadKey 모듈을 사용하는 것이 더 쉬울 수 있습니다. 최신 버전에는 비 휴대용 시스템도 지원됩니다.</target>
        </trans-unit>
        <trans-unit id="35a1f7393254a3b1337f16135889cbf5d4ddbd76" translate="yes" xml:space="preserve">
          <source>The Third Rule of Sys::Syslog is:</source>
          <target state="translated">Sys :: Syslog의 세 번째 규칙은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="93fb358185964087944f1d6c1078da04b430b4f0" translate="yes" xml:space="preserve">
          <source>The Tree subsubsection in XML::Parser</source>
          <target state="translated">XML :: Parser의 트리 하위 섹션</target>
        </trans-unit>
        <trans-unit id="8dd1d72b0140a01ec4804e7eb5bb38229499e0d2" translate="yes" xml:space="preserve">
          <source>The U/WIN environment for Win32, &lt;a href=&quot;http://www.research.att.com/sw/tools/uwin/&quot;&gt;http://www.research.att.com/sw/tools/uwin/&lt;/a&gt;</source>
          <target state="translated">Win32 용 U / WIN 환경, &lt;a href=&quot;http://www.research.att.com/sw/tools/uwin/&quot;&gt;http://www.research.att.com/sw/tools/uwin/&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="769648b0d99f3965f04ad4c0ff49f028dec18b56" translate="yes" xml:space="preserve">
          <source>The UNICODE_WARN_NONCHAR and UNICODE_DISALLOW_NONCHAR flags affect how the function handles a Unicode non-character. And likewise, the UNICODE_WARN_SUPER and UNICODE_DISALLOW_SUPER flags affect the handling of code points that are above the Unicode maximum of 0x10FFFF. Code points above 0x7FFF_FFFF (which are even less portable) can be warned and/or disallowed even if other above-Unicode code points are accepted, by the UNICODE_WARN_FE_FF and UNICODE_DISALLOW_FE_FF flags.</source>
          <target state="translated">UNICODE_WARN_NONCHAR 및 UNICODE_DISALLOW_NONCHAR 플래그는 함수가 문자가 아닌 유니 코드를 처리하는 방법에 영향을줍니다. 마찬가지로 UNICODE_WARN_SUPER 및 UNICODE_DISALLOW_SUPER 플래그는 유니 코드 최대 값 0x10FFFF보다 큰 코드 포인트 처리에 영향을줍니다. UNICODE_WARN_FE_FF 및 UNICODE_DISALLOW_FE_FF 플래그를 사용하여 0x7FFF_FFFF (이동성이 덜한) 이상의 코드 포인트는 유니 코드 이상의 다른 코드 포인트가 허용 되더라도 경고 및 / 또는 허용되지 않을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b1a9962a264046baa6e654280499186de4c8dcb8" translate="yes" xml:space="preserve">
          <source>The UNIVERSAL Class</source>
          <target state="translated">유니버설 클래스</target>
        </trans-unit>
        <trans-unit id="626ffdf925f7f1a1535b1e7a24ab5f1836995ec2" translate="yes" xml:space="preserve">
          <source>The URL or relative path of a CSS file to include. This option is not set by default.</source>
          <target state="translated">포함 할 CSS 파일의 URL 또는 상대 경로입니다. 이 옵션은 기본적으로 설정되어 있지 않습니다.</target>
        </trans-unit>
        <trans-unit id="40bee207a472a4fd5b0841568ca70dbba8442ce0" translate="yes" xml:space="preserve">
          <source>The URL or relative path of a JavaScript file to pull in. This option is not set by default.</source>
          <target state="translated">가져올 JavaScript 파일의 URL 또는 상대 경로입니다.이 옵션은 기본적으로 설정되어 있지 않습니다.</target>
        </trans-unit>
        <trans-unit id="da88ae39f79698f8a366077011136f1217b89d12" translate="yes" xml:space="preserve">
          <source>The USE_PERLIO implementation is described in &lt;a href=&quot;perliol&quot;&gt;perliol&lt;/a&gt;.</source>
          <target state="translated">USE_PERLIO 구현은 perliol에 설명되어 &lt;a href=&quot;perliol&quot;&gt;있습니다&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="5daf05eaea510ba5b0017fb9c306e9890c51ff94" translate="yes" xml:space="preserve">
          <source>The UTF-32 family is pretty much like the UTF-16 family, except that the units are 32-bit, and therefore the surrogate scheme is not needed. UTF-32 is a fixed-width encoding. The &lt;code&gt;BOM&lt;/code&gt; signatures are &lt;code&gt;0x00 0x00 0xFE 0xFF&lt;/code&gt; for BE and &lt;code&gt;0xFF 0xFE 0x00 0x00&lt;/code&gt; for LE.</source>
          <target state="translated">UTF-32 제품군은 단위가 32 비트이므로 대리 체계가 필요하지 않다는 점을 제외하면 UTF-16 제품군과 매우 비슷합니다. UTF-32는 고정 너비 인코딩입니다. &lt;code&gt;BOM&lt;/code&gt; 의 서명은 &lt;code&gt;0x00 0x00 0xFE 0xFF&lt;/code&gt; BE 및 &lt;code&gt;0xFF 0xFE 0x00 0x00&lt;/code&gt; LE합니다.</target>
        </trans-unit>
        <trans-unit id="1dd8debe441de21cb20cb60141841b3943f5b160" translate="yes" xml:space="preserve">
          <source>The UTF8 flag</source>
          <target state="translated">UTF8 플래그</target>
        </trans-unit>
        <trans-unit id="e84247eff9f0cf26586d5f7b3851d2932bd10a42" translate="yes" xml:space="preserve">
          <source>The UTF8 flag, also called SvUTF8, is an internal flag that indicates that the current internal representation is UTF-8. Without the flag, it is assumed to be ISO-8859-1. Perl converts between these automatically. (Actually Perl usually assumes the representation is ASCII; see &lt;a href=&quot;#Why-do-regex-character-classes-sometimes-match-only-in-the-ASCII-range%3f&quot;&gt;Why do regex character classes sometimes match only in the ASCII range?&lt;/a&gt; above.)</source>
          <target state="translated">SvUTF8이라고도하는 UTF8 플래그는 현재 내부 표현이 UTF-8임을 나타내는 내부 플래그입니다. 플래그가 없으면 ISO-8859-1로 간주됩니다. 펄은 이들 사이를 자동으로 변환합니다. (실제로 Perl은 일반적으로 표현이 ASCII라고 가정합니다. &lt;a href=&quot;#Why-do-regex-character-classes-sometimes-match-only-in-the-ASCII-range%3f&quot;&gt;정규식 문자 클래스가 때때로 ASCII 범위에서만 일치하는 이유는 무엇입니까?를&lt;/a&gt; 참조하십시오.)</target>
        </trans-unit>
        <trans-unit id="0c156f969a0dd40349df4b801ec75724f31841f0" translate="yes" xml:space="preserve">
          <source>The UTF8_CHECK_ONLY flag overrides the behavior when a non-allowed (by other flags) malformation is found. If this flag is set, the routine assumes that the caller will raise a warning, and this function will silently just set &lt;code&gt;retlen&lt;/code&gt; to &lt;code&gt;-1&lt;/code&gt; (cast to &lt;code&gt;STRLEN&lt;/code&gt; ) and return zero.</source>
          <target state="translated">UTF8_CHECK_ONLY 플래그는 허용되지 않는 (다른 플래그에 의한) 기형이 발견 될 때 동작을 대체합니다. 이 플래그가 설정되면 루틴은 호출자가 경고를 발생한다고 가정하고이 함수는 자동으로 &lt;code&gt;retlen&lt;/code&gt; 을 &lt;code&gt;-1&lt;/code&gt; ( &lt;code&gt;STRLEN&lt;/code&gt; 로 캐스트 )로 설정하고 0을 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="fe051c2554d575b5ef8dd3483cd37e0f3f831882" translate="yes" xml:space="preserve">
          <source>The Unicode &lt;code&gt;Script&lt;/code&gt; and &lt;code&gt;Script_Extensions&lt;/code&gt; properties give what script a given character is in. Either property can be specified with the compound form like &lt;code&gt;\p{Script=Hebrew}&lt;/code&gt; (short: &lt;code&gt;\p{sc=hebr}&lt;/code&gt; ), or &lt;code&gt;\p{Script_Extensions=Javanese}&lt;/code&gt; (short: &lt;code&gt;\p{scx=java}&lt;/code&gt; ). In addition, Perl furnishes shortcuts for all &lt;code&gt;Script&lt;/code&gt; property names. You can omit everything up through the equals (or colon), and simply write &lt;code&gt;\p{Latin}&lt;/code&gt; or &lt;code&gt;\P{Cyrillic}&lt;/code&gt; . (This is not true for &lt;code&gt;Script_Extensions&lt;/code&gt; , which is required to be written in the compound form.)</source>
          <target state="translated">유니 코드 &lt;code&gt;Script&lt;/code&gt; 및 &lt;code&gt;Script_Extensions&lt;/code&gt; 속성은 지정된 문자의 스크립트를 제공합니다. &lt;code&gt;\p{Script=Hebrew}&lt;/code&gt; (약식 : &lt;code&gt;\p{sc=hebr}&lt;/code&gt; ) 또는 &lt;code&gt;\p{Script_Extensions=Javanese}&lt;/code&gt; 와 같은 복합 형식으로 속성을 지정할 수 있습니다. Javanese} (약식 : &lt;code&gt;\p{scx=java}&lt;/code&gt; ). 또한 Perl은 모든 &lt;code&gt;Script&lt;/code&gt; 속성 이름에 대한 바로 가기를 제공 합니다. 등호 (또는 콜론)를 통해 모든 것을 생략하고 간단히 &lt;code&gt;\p{Latin}&lt;/code&gt; 또는 &lt;code&gt;\P{Cyrillic}&lt;/code&gt; 쓸 수 있습니다. ( 복합 형식으로 작성 &lt;code&gt;Script_Extensions&lt;/code&gt; 경우 에는 해당되지 않습니다 .)</target>
        </trans-unit>
        <trans-unit id="68ace88196ee8ab90b1eb6e05c27ca6293cc1949" translate="yes" xml:space="preserve">
          <source>The Unicode &lt;code&gt;\p{Script}&lt;/code&gt; property is used to categorize every Unicode character into the language script it is written in. For example, English, French, and a bunch of other European languages are written in the Latin script. But there is also the Greek script, the Thai script, the Katakana script, etc. You can test whether a character is in a particular script with, for example &lt;code&gt;\p{Latin}&lt;/code&gt; , &lt;code&gt;\p{Greek}&lt;/code&gt; , or &lt;code&gt;\p{Katakana}&lt;/code&gt; . To test if it isn't in the Balinese script, you would use &lt;code&gt;\P{Balinese}&lt;/code&gt; .</source>
          <target state="translated">Unicode &lt;code&gt;\p{Script}&lt;/code&gt; 속성은 모든 유니 코드 문자를 작성된 언어 스크립트로 분류하는 데 사용됩니다. 예를 들어 영어, 프랑스어 및 기타 여러 유럽 언어는 라틴 스크립트로 작성됩니다. 그러나 그리스어 스크립트, 태국어 스크립트, 가타카나 스크립트 등도 있습니다. &lt;code&gt;\p{Latin}&lt;/code&gt; , &lt;code&gt;\p{Greek}&lt;/code&gt; 또는 &lt;code&gt;\p{Katakana}&lt;/code&gt; 등을 사용하여 특정 스크립트에 문자가 있는지 테스트 할 수 있습니다. } . 발리 스크립트에 없는지 테스트하려면 &lt;code&gt;\P{Balinese}&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="c137959e417f1d80c5a78f30067a032e5b5cba1e" translate="yes" xml:space="preserve">
          <source>The Unicode CLDR project extracts the POSIX portion of many of its locales, available at</source>
          <target state="translated">Unicode CLDR 프로젝트는 여러 로케일의 POSIX 부분을 추출합니다.</target>
        </trans-unit>
        <trans-unit id="d486f8bf02133ca434524335056eb02772644059" translate="yes" xml:space="preserve">
          <source>The Unicode Character Map</source>
          <target state="translated">유니 코드 문자표</target>
        </trans-unit>
        <trans-unit id="c5ce90a3e4de6a4acbbf53c0744b1a0991c6efd2" translate="yes" xml:space="preserve">
          <source>The Unicode Consortium has a list of articles and books, some of which give a much more in depth treatment of Unicode: &lt;a href=&quot;http://unicode.org/resources/readinglist.html&quot;&gt;http://unicode.org/resources/readinglist.html&lt;/a&gt;</source>
          <target state="translated">유니 코드 컨소시엄에는 기사 및 서적 목록이 있으며 그 중 일부는 유니 코드에 대한 심층적 인 처리를 제공합니다. &lt;a href=&quot;http://unicode.org/resources/readinglist.html&quot;&gt;http://unicode.org/resources/readinglist.html&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="6f47c9f664ce4e52a0db000d2410941371e77032" translate="yes" xml:space="preserve">
          <source>The Unicode Standard, Version 6.1</source>
          <target state="translated">유니 코드 표준, 버전 6.1</target>
        </trans-unit>
        <trans-unit id="ceaf176fe24089b589f5a8df64bfcb78329c82a1" translate="yes" xml:space="preserve">
          <source>The Unicode character sets associates characters with integers. Encoding these numbers in an equal number of bytes would more than double the requirements for storing texts written in Latin alphabets. The UTF-8 encoding avoids this by storing the most common (from a western point of view) characters in a single byte while encoding the rarer ones in three or more bytes.</source>
          <target state="translated">유니 코드 문자 세트는 문자를 정수와 연관시킵니다. 이 숫자를 같은 바이트 수로 인코딩하면 라틴 알파벳으로 작성된 텍스트를 저장하는 데 필요한 요구 사항이 두 배 이상 증가합니다. UTF-8 인코딩은 가장 일반적인 (서부 관점에서) 문자를 단일 바이트에 저장하고 가장 드문 문자를 3 개 이상의 바이트로 인코딩하여이를 방지합니다.</target>
        </trans-unit>
        <trans-unit id="b01639a1272db3c72594d5482698c9a198da2486" translate="yes" xml:space="preserve">
          <source>The Unicode code points are just abstract numbers. To input and output these abstract numbers, the numbers must be</source>
          <target state="translated">유니 코드 코드 포인트는 단지 추상 숫자입니다. 이 추상 숫자를 입력하고 출력하려면 숫자가</target>
        </trans-unit>
        <trans-unit id="fee82003cf69ee996e6b6206be19d9eb1e9b4ae7" translate="yes" xml:space="preserve">
          <source>The Unicode data base is delivered in two different formats. The XML version is valid for more modern Unicode releases. The other version is a collection of files. The two are intended to give equivalent information. Perl uses the older form; this allows you to recompile Perl to use early Unicode releases.</source>
          <target state="translated">유니 코드 데이터베이스는 두 가지 형식으로 제공됩니다. XML 버전은 최신 유니 코드 릴리스에 유효합니다. 다른 버전은 파일 모음입니다. 이 두 가지는 동등한 정보를 제공하기위한 것입니다. Perl은 이전 형식을 사용합니다. 따라서 초기 유니 코드 릴리스를 사용하기 위해 Perl을 다시 컴파일 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="0af64faddaa46b640051dd4c06cacd9bdf1c61ba" translate="yes" xml:space="preserve">
          <source>The Unicode name for each of the control characters (such as LINE FEED) is the empty string. However almost all had names assigned by other standards, such as the ASCII Standard, or were in common use. &lt;code&gt;viacode&lt;/code&gt; returns these names as the &quot;best&quot; ones available. Unicode 6.1 has created Name_Aliases for each of them, including alternate names, like NEW LINE. &lt;code&gt;viacode&lt;/code&gt; uses the original name, &quot;LINE FEED&quot; in preference to the alternate. Similarly the name returned for U+FEFF is &quot;ZERO WIDTH NO-BREAK SPACE&quot;, not &quot;BYTE ORDER MARK&quot;.</source>
          <target state="translated">각 제어 문자 (예 : LINE FEED)의 유니 코드 이름은 빈 문자열입니다. 그러나 거의 모든 이름에는 ASCII 표준과 같은 다른 표준에 의해 지정된 이름이 있거나 일반적으로 사용되었습니다. &lt;code&gt;viacode&lt;/code&gt; 는 이러한 이름을 사용 가능한 &quot;최상의&quot;이름으로 반환합니다. 유니 코드 6.1은 NEW LINE과 같은 대체 이름을 포함하여 각각에 대해 Name_Aliases를 작성했습니다. &lt;code&gt;viacode&lt;/code&gt; 는 대체 이름보다 원래 이름 인 &quot;LINE FEED&quot;를 사용합니다. 마찬가지로 U + FEFF에 대해 반환 된 이름은 &quot;BYTE ORDER MARK&quot;가 아니라 &quot;ZERO WIDTH NO-BREAK SPACE&quot;입니다.</target>
        </trans-unit>
        <trans-unit id="1ac858cb298c00054e86b0d115cb91b95f10f3cf" translate="yes" xml:space="preserve">
          <source>The Unicode standard prefers using hexadecimal notation because that more clearly shows the division of Unicode into blocks of 256 characters. Hexadecimal is also simply shorter than decimal. You can use decimal notation, too, but learning to use hexadecimal just makes life easier with the Unicode standard. The &lt;code&gt;U+HHHH&lt;/code&gt; notation uses hexadecimal, for example.</source>
          <target state="translated">유니 코드 표준은 16 진수 표기법을 선호합니다. 왜냐하면 유니 코드를 256 문자 블록으로 나누는 것을보다 명확하게 보여주기 때문입니다. 16 진법은 단순히 10 진법보다 짧습니다. 십진수 표기법도 사용할 수 있지만 16 진수를 사용하는 법을 배우면 유니 코드 표준을 사용하는 것이 더 쉽습니다. &lt;code&gt;U+HHHH&lt;/code&gt; 의 표기는, 예를 들어 16 진수를 사용합니다.</target>
        </trans-unit>
        <trans-unit id="e6fd7f938d86967a9161a418271cce0d06cd2600" translate="yes" xml:space="preserve">
          <source>The Unicode standard prefers using hexadecimal notation for the code points. If numbers like &lt;code&gt;0x0041&lt;/code&gt; are unfamiliar to you, take a peek at a later section, &lt;a href=&quot;#Hexadecimal-Notation&quot;&gt;Hexadecimal Notation&lt;/a&gt;. The Unicode standard uses the notation &lt;code&gt;U+0041 LATIN CAPITAL LETTER A&lt;/code&gt;, to give the hexadecimal code point and the normative name of the character.</source>
          <target state="translated">유니 코드 표준은 코드 포인트에 16 진 표기법을 사용하는 것을 선호합니다. &lt;code&gt;0x0041&lt;/code&gt; 과 같은 숫자 가 익숙하지 않은 경우 , &lt;a href=&quot;#Hexadecimal-Notation&quot;&gt;16 진수 표기법&lt;/a&gt; 섹션을 살펴보십시오 . 유니 코드 표준은 표기법 &lt;code&gt;U+0041 LATIN CAPITAL LETTER A&lt;/code&gt; 를 사용하여 16 진 코드 포인트와 문자의 규범 이름을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="c02514a64c1d2f4e4fce35a40ef0864ea99b3007" translate="yes" xml:space="preserve">
          <source>The Unicode::Collate module for perl was written by SADAHIRO Tomoyuki, &amp;lt;SADAHIRO@cpan.org&amp;gt;. This module is Copyright(C) 2001-2014, SADAHIRO Tomoyuki. Japan. All rights reserved.</source>
          <target state="translated">perl 용 Unicode :: Collate 모듈은 SADAHIRO Tomoyuki, &amp;lt;SADAHIRO@cpan.org&amp;gt;에 의해 작성되었습니다. 이 모듈은 SADAHIRO Tomoyuki의 Copyright (C) 2001-2014입니다. 일본. 판권 소유.</target>
        </trans-unit>
        <trans-unit id="473e3f8c820ceadead01839cdf7e14621c8d192f" translate="yes" xml:space="preserve">
          <source>The Unicode::UCD module offers a series of functions that provide a simple interface to the Unicode Character Database.</source>
          <target state="translated">Unicode :: UCD 모듈은 유니 코드 문자 데이터베이스에 대한 간단한 인터페이스를 제공하는 일련의 기능을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="26e3ce0808d98a59d29700d316741aae764f2a61" translate="yes" xml:space="preserve">
          <source>The Unix System V IPC (&lt;code&gt;msg*(), sem*(), shm*()&lt;/code&gt; ) is not available even on all Unix platforms.</source>
          <target state="translated">Unix 시스템 V IPC ( &lt;code&gt;msg*(), sem*(), shm*()&lt;/code&gt; )는 모든 Unix 플랫폼에서도 사용할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="fae3b6a0c7efbf25175bd611a319e0fb66e5613e" translate="yes" xml:space="preserve">
          <source>The Unix column assumes that you are not accessing a serial line (like a tty) in canonical mode. If you are, then CR on input becomes &quot;\n&quot;, and &quot;\n&quot; on output becomes CRLF.</source>
          <target state="translated">유닉스 열은 표준 모드에서 tty와 같은 직렬 회선에 액세스하지 않는다고 가정합니다. 그렇다면 입력의 CR이 &quot;\ n&quot;이되고 출력의 &quot;\ n&quot;이 CRLF가됩니다.</target>
        </trans-unit>
        <trans-unit id="dd39418cfe05cee0fae6b087e55e6c5b32837941" translate="yes" xml:space="preserve">
          <source>The Unix emulation library's translation of filenames to native assumes that this sort of translation is required, and it allows a user-defined list of known suffixes that it will transpose in this fashion. This may seem transparent, but consider that with these rules</source>
          <target state="translated">유닉스 에뮬레이션 라이브러리의 파일 이름을 기본으로 변환하는 것은 이러한 종류의 변환이 필요하다고 가정하며 이러한 방식으로 변환 될 알려진 접미사의 사용자 정의 목록을 허용합니다. 이것은 투명 해 보일 수 있지만 이러한 규칙을 사용하면</target>
        </trans-unit>
        <trans-unit id="fb551ea7181334bc4b0216d63d17835797e645a3" translate="yes" xml:space="preserve">
          <source>The Unix permission &lt;code&gt;rwxr-x---&lt;/code&gt; is represented as three sets of three bits, or three octal digits: &lt;code&gt;0750&lt;/code&gt; (the leading 0 indicates octal and isn't one of the digits). The &lt;code&gt;&lt;a href=&quot;functions/umask&quot;&gt;umask&lt;/a&gt;&lt;/code&gt; value is such a number representing disabled permissions bits. The permission (or &quot;mode&quot;) values you pass &lt;code&gt;&lt;a href=&quot;functions/mkdir&quot;&gt;mkdir&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;functions/sysopen&quot;&gt;sysopen&lt;/a&gt;&lt;/code&gt; are modified by your umask, so even if you tell &lt;code&gt;&lt;a href=&quot;functions/sysopen&quot;&gt;sysopen&lt;/a&gt;&lt;/code&gt; to create a file with permissions &lt;code&gt;0777&lt;/code&gt; , if your umask is &lt;code&gt;0022&lt;/code&gt; , then the file will actually be created with permissions &lt;code&gt;0755&lt;/code&gt; . If your &lt;code&gt;&lt;a href=&quot;functions/umask&quot;&gt;umask&lt;/a&gt;&lt;/code&gt; were &lt;code&gt;0027&lt;/code&gt; (group can't write; others can't read, write, or execute), then passing &lt;code&gt;&lt;a href=&quot;functions/sysopen&quot;&gt;sysopen&lt;/a&gt;&lt;/code&gt;&lt;code&gt;0666&lt;/code&gt; would create a file with mode &lt;code&gt;0640&lt;/code&gt; (because &lt;code&gt;0666 &amp;amp;~ 027&lt;/code&gt; is &lt;code&gt;0640&lt;/code&gt; ).</source>
          <target state="translated">Unix 권한 &lt;code&gt;rwxr-x---&lt;/code&gt; 는 3 비트의 3 비트 세트 또는 3 개의 8 진수로 표시됩니다. &lt;code&gt;0750&lt;/code&gt; (앞의 0은 8 진수를 나타내며 숫자 중 하나가 아닙니다). &lt;code&gt;&lt;a href=&quot;functions/umask&quot;&gt;umask&lt;/a&gt;&lt;/code&gt; 값을 사용할 권한을 나타내는 비트와 같은 수이다. &lt;code&gt;&lt;a href=&quot;functions/mkdir&quot;&gt;mkdir&lt;/a&gt;&lt;/code&gt; 또는 &lt;code&gt;&lt;a href=&quot;functions/sysopen&quot;&gt;sysopen&lt;/a&gt;&lt;/code&gt; 에 전달하는 권한 (또는 &quot;모드&quot;) 값 은 umask에 의해 수정되므로 &lt;code&gt;&lt;a href=&quot;functions/sysopen&quot;&gt;sysopen&lt;/a&gt;&lt;/code&gt; 에 권한 &lt;code&gt;0777&lt;/code&gt; 의 파일을 작성하도록 지시 하더라도 umask가 &lt;code&gt;0022&lt;/code&gt; 인 경우 파일은 실제로 권한 &lt;code&gt;0755&lt;/code&gt; 로 작성됩니다. . 귀하의 경우 &lt;code&gt;&lt;a href=&quot;functions/umask&quot;&gt;umask&lt;/a&gt;&lt;/code&gt; 를 했다 &lt;code&gt;0027&lt;/code&gt; 을다음 전달 (다른 사람들이 읽을 수 없습니다 쓰기 또는 실행 그룹은 쓸 수 없습니다) &lt;code&gt;&lt;a href=&quot;functions/sysopen&quot;&gt;sysopen&lt;/a&gt;&lt;/code&gt; &lt;code&gt;0666&lt;/code&gt; 을 모드 파일을 만들 것입니다 &lt;code&gt;0640&lt;/code&gt; 을 (때문에 &lt;code&gt;0666 &amp;amp;~ 027&lt;/code&gt; 입니다 &lt;code&gt;0640&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="96615142b96c010257cd138eceafdbdb1fcfb3bc" translate="yes" xml:space="preserve">
          <source>The Unix permission &lt;code&gt;rwxr-x---&lt;/code&gt; is represented as three sets of three bits, or three octal digits: &lt;code&gt;0750&lt;/code&gt; (the leading 0 indicates octal and isn't one of the digits). The &lt;code&gt;&lt;a href=&quot;umask&quot;&gt;umask&lt;/a&gt;&lt;/code&gt; value is such a number representing disabled permissions bits. The permission (or &quot;mode&quot;) values you pass &lt;code&gt;&lt;a href=&quot;mkdir&quot;&gt;mkdir&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;sysopen&quot;&gt;sysopen&lt;/a&gt;&lt;/code&gt; are modified by your umask, so even if you tell &lt;code&gt;&lt;a href=&quot;sysopen&quot;&gt;sysopen&lt;/a&gt;&lt;/code&gt; to create a file with permissions &lt;code&gt;0777&lt;/code&gt; , if your umask is &lt;code&gt;0022&lt;/code&gt; , then the file will actually be created with permissions &lt;code&gt;0755&lt;/code&gt; . If your &lt;code&gt;&lt;a href=&quot;umask&quot;&gt;umask&lt;/a&gt;&lt;/code&gt; were &lt;code&gt;0027&lt;/code&gt; (group can't write; others can't read, write, or execute), then passing &lt;code&gt;&lt;a href=&quot;sysopen&quot;&gt;sysopen&lt;/a&gt;&lt;/code&gt;&lt;code&gt;0666&lt;/code&gt; would create a file with mode &lt;code&gt;0640&lt;/code&gt; (because &lt;code&gt;0666 &amp;amp;~ 027&lt;/code&gt; is &lt;code&gt;0640&lt;/code&gt; ).</source>
          <target state="translated">Unix 권한 &lt;code&gt;rwxr-x---&lt;/code&gt; 는 3 비트의 3 비트 세트 또는 3 개의 8 진수로 표시됩니다. &lt;code&gt;0750&lt;/code&gt; (앞의 0은 8 진수를 나타내며 숫자 중 하나가 아닙니다). &lt;code&gt;&lt;a href=&quot;umask&quot;&gt;umask&lt;/a&gt;&lt;/code&gt; 값을 사용할 권한을 나타내는 비트와 같은 수이다. &lt;code&gt;&lt;a href=&quot;mkdir&quot;&gt;mkdir&lt;/a&gt;&lt;/code&gt; 또는 &lt;code&gt;&lt;a href=&quot;sysopen&quot;&gt;sysopen&lt;/a&gt;&lt;/code&gt; 에 전달하는 권한 (또는 &quot;모드&quot;) 값 은 umask에 의해 수정되므로 &lt;code&gt;&lt;a href=&quot;sysopen&quot;&gt;sysopen&lt;/a&gt;&lt;/code&gt; 에 권한 &lt;code&gt;0777&lt;/code&gt; 의 파일을 작성하도록 지시 하더라도 umask가 &lt;code&gt;0022&lt;/code&gt; 인 경우 파일은 실제로 권한 &lt;code&gt;0755&lt;/code&gt; 로 작성됩니다. . 귀하의 경우 &lt;code&gt;&lt;a href=&quot;umask&quot;&gt;umask&lt;/a&gt;&lt;/code&gt; 를 했다 &lt;code&gt;0027&lt;/code&gt; 을다음 전달 (다른 사람들이 읽을 수 없습니다 쓰기 또는 실행 그룹은 쓸 수 없습니다) &lt;code&gt;&lt;a href=&quot;sysopen&quot;&gt;sysopen&lt;/a&gt;&lt;/code&gt; &lt;code&gt;0666&lt;/code&gt; 을 모드 파일을 만들 것입니다 &lt;code&gt;0640&lt;/code&gt; 을 (때문에 &lt;code&gt;0666 &amp;amp;~ 027&lt;/code&gt; 입니다 &lt;code&gt;0640&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="d68f3b12b3008b73f340d97bbe8121b4ae3d9886" translate="yes" xml:space="preserve">
          <source>The Unix program that displays online documentation (manual pages) for you.</source>
          <target state="translated">온라인 설명서 (수동 페이지)를 표시하는 Unix 프로그램.</target>
        </trans-unit>
        <trans-unit id="025899dcfc40460b6af9f2e480800fa184584302" translate="yes" xml:space="preserve">
          <source>The VERSIONCHECK: Keyword</source>
          <target state="translated">VERSIONCHECK : 키워드</target>
        </trans-unit>
        <trans-unit id="191f8a3a602b994bc056ffe04831bd5feed30108" translate="yes" xml:space="preserve">
          <source>The VERSIONCHECK: keyword corresponds to &lt;b&gt;xsubpp&lt;/b&gt;'s &lt;code&gt;-versioncheck&lt;/code&gt; and &lt;code&gt;-noversioncheck&lt;/code&gt; options. This keyword overrides the command line options. Version checking is enabled by default. When version checking is enabled the XS module will attempt to verify that its version matches the version of the PM module.</source>
          <target state="translated">VERSIONCHECK : 키워드는 &lt;b&gt;xsubpp&lt;/b&gt; 의 &lt;code&gt;-versioncheck&lt;/code&gt; 및 &lt;code&gt;-noversioncheck&lt;/code&gt; 옵션에 해당합니다. 이 키워드는 명령 행 옵션을 대체합니다. 버전 확인은 기본적으로 활성화되어 있습니다. 버전 확인이 활성화되면 XS 모듈은 해당 버전이 PM 모듈 버전과 일치하는지 확인합니다.</target>
        </trans-unit>
        <trans-unit id="04e7acc0343752ab985314abfd05d75387072015" translate="yes" xml:space="preserve">
          <source>The VMS operating system has two filesystems, designated by their on-disk structure (ODS) level: ODS-2 and its successor ODS-5. The initial port of Perl to VMS pre-dates ODS-5, but all current testing and development assumes ODS-5 and its capabilities, including case preservation, extended characters in filespecs, and names up to 8192 bytes long.</source>
          <target state="translated">VMS 운영 체제에는 디스크 구조 (ODS) 레벨로 지정된 두 개의 파일 시스템이 있습니다 : ODS-2 및 후속 ODS-5. Perl의 VMS 로의 초기 포트는 ODS-5보다 오래되었지만 현재의 모든 테스트 및 개발은 대소 문자 보존, 파일 스펙의 확장 문자 및 최대 8192 바이트의 이름을 포함한 ODS-5 및 그 기능을 가정합니다.</target>
        </trans-unit>
        <trans-unit id="b30b00a3df196d84b7a24a918a3d0aa60756c262" translate="yes" xml:space="preserve">
          <source>The VOS mailing list.</source>
          <target state="translated">VOS 메일 링리스트.</target>
        </trans-unit>
        <trans-unit id="1e59303fe7c8cd36efc35383c5bbb06ef61bf43f" translate="yes" xml:space="preserve">
          <source>The Win95/NT installation, when using the ActiveState installer for Perl, will modify the Registry to associate the</source>
          <target state="translated">Perl 용 ActiveState 설치 프로그램을 사용할 때 Win95 / NT 설치는 레지스트리를 수정하여</target>
        </trans-unit>
        <trans-unit id="f858558f020a34e7480b07972a3c08c5fd6984b6" translate="yes" xml:space="preserve">
          <source>The Win95/NT installation, when using the ActiveState port of Perl, will modify the Registry to associate the &lt;code&gt;.pl&lt;/code&gt; extension with the perl interpreter. If you install another port, perhaps even building your own Win95/NT Perl from the standard sources by using a Windows port of gcc (e.g., with cygwin or mingw32), then you'll have to modify the Registry yourself. In addition to associating &lt;code&gt;.pl&lt;/code&gt; with the interpreter, NT people can use: &lt;code&gt;SET PATHEXT=%PATHEXT%;.PL&lt;/code&gt; to let them run the program &lt;code&gt;install-linux.pl&lt;/code&gt; merely by typing &lt;code&gt;install-linux&lt;/code&gt; .</source>
          <target state="translated">Perl의 ActiveState 포트를 사용할 때 Win95 / NT 설치는 &lt;code&gt;.pl&lt;/code&gt; 확장자를 perl 인터프리터와 연관 시키도록 레지스트리를 수정합니다 . 다른 포트를 설치하는 경우, gcc의 Windows 포트 (예 : cygwin 또는 mingw32 사용)를 사용하여 표준 소스에서 자체 Win95 / NT Perl을 빌드하는 경우에도 레지스트리를 직접 수정해야합니다. &lt;code&gt;.pl&lt;/code&gt; 을 인터프리터와 연관시키는 것 외에도 NT 사용자는 &lt;code&gt;SET PATHEXT=%PATHEXT%;.PL&lt;/code&gt; 을 사용 하여 &lt;code&gt;install-linux&lt;/code&gt; 를 입력하여 &lt;code&gt;install-linux.pl&lt;/code&gt; 프로그램을 실행할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="beb45e4cde225026f4e16a740e28e45e50f2309b" translate="yes" xml:space="preserve">
          <source>The Windows SDK can be downloaded from &lt;a href=&quot;http://www.microsoft.com/&quot;&gt;http://www.microsoft.com/&lt;/a&gt;. The MinGW64 compiler is available at &lt;a href=&quot;http://sourceforge.net/projects/mingw-w64&quot;&gt;http://sourceforge.net/projects/mingw-w64&lt;/a&gt;. The latter is actually a cross-compiler targeting Win64. There's also a trimmed down compiler (no java, or gfortran) suitable for building perl available at: &lt;a href=&quot;http://strawberryperl.com/package/kmx/64_gcctoolchain/&quot;&gt;http://strawberryperl.com/package/kmx/64_gcctoolchain/&lt;/a&gt;</source>
          <target state="translated">Windows SDK는 &lt;a href=&quot;http://www.microsoft.com/&quot;&gt;http://www.microsoft.com/&lt;/a&gt; 에서 다운로드 할 수 있습니다 . MinGW64 컴파일러는 &lt;a href=&quot;http://sourceforge.net/projects/mingw-w64&quot;&gt;http://sourceforge.net/projects/mingw-w64&lt;/a&gt; 에서 사용할 수 있습니다 . 후자는 실제로 Win64를 대상으로하는 크로스 컴파일러입니다. &lt;a href=&quot;http://strawberryperl.com/package/kmx/64_gcctoolchain/&quot;&gt;http://strawberryperl.com/package/kmx/64_gcctoolchain/&lt;/a&gt; 에서 사용할 수있는 perl을 빌드하는 데 적합한 트리밍 된 컴파일러 (Java 또는 gfortran 없음)가 있습니다.</target>
        </trans-unit>
        <trans-unit id="c1dd1e762380b02f42ad88590f07ac599a582c23" translate="yes" xml:space="preserve">
          <source>The Windows documentation describes the shell parsing rules here: &lt;a href=&quot;http://www.microsoft.com/resources/documentation/windows/xp/all/proddocs/en-us/cmd.mspx?mfr=true&quot;&gt;http://www.microsoft.com/resources/documentation/windows/xp/all/proddocs/en-us/cmd.mspx?mfr=true&lt;/a&gt; and the C runtime parsing rules here: &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/17w5ykft%28v=VS.100%29.aspx&quot;&gt;http://msdn.microsoft.com/en-us/library/17w5ykft%28v=VS.100%29.aspx&lt;/a&gt;.</source>
          <target state="translated">Windows 설명서는 여기에서 셸 구문 분석 규칙을 설명합니다. &lt;a href=&quot;http://www.microsoft.com/resources/documentation/windows/xp/all/proddocs/en-us/cmd.mspx?mfr=true&quot;&gt;http://www.microsoft.com/resources/documentation/windows/xp/all/proddocs/en-us/cmd.mspx?mfr=true&lt;/a&gt; 및 여기 에서 C 런타임 구문 분석 규칙 : &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/17w5ykft%28v=VS.100%29.aspx&quot;&gt;http://msdn.microsoft.com/en-us/library/17w5ykft%28v=VS.100%29.aspx&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="0944600f567f37796a44d203cb305a8c3dc31877" translate="yes" xml:space="preserve">
          <source>The World Factbook maintained by the CIA is a potential source of the data. Unfortunately, it adds/preserves non-standard codes, so it is no longer used as a source of data.</source>
          <target state="translated">CIA가 유지 관리하는 World Factbook은 잠재적 인 데이터 소스입니다. 불행히도 비표준 코드를 추가 / 보존하므로 더 이상 데이터 소스로 사용되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="91e3c6e2754b93eaf46a2a00de960a8c0e2e11b1" translate="yes" xml:space="preserve">
          <source>The XL C for AIX is integrated in the XL C/C++ for AIX compiler and therefore also supported.</source>
          <target state="translated">AIX 용 XL C는 AIX 컴파일러 용 XL C / C ++에 통합되어 지원됩니다.</target>
        </trans-unit>
        <trans-unit id="26b303e7615c750693be69ec473b2f4dff6fc26e" translate="yes" xml:space="preserve">
          <source>The XPUSH* macros will automatically extend the return stack to prevent it from being overrun. You push values onto the stack in the order you want them seen by the calling program.</source>
          <target state="translated">XPUSH * 매크로는 오버런을 방지하기 위해 리턴 스택을 자동으로 확장합니다. 호출 프로그램에서 원하는 순서대로 값을 스택에 푸시합니다.</target>
        </trans-unit>
        <trans-unit id="a60c05b1221aad4f1b3aa2c5d4dc4eb83e2bb2ba" translate="yes" xml:space="preserve">
          <source>The XROVER command returns reference information for the article(s) specified.</source>
          <target state="translated">XROVER 명령은 지정된 기사에 대한 참조 정보를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="11313e63e9f00be77c380f5038dabb62b6e1dd06" translate="yes" xml:space="preserve">
          <source>The XS code, with ellipsis, follows.</source>
          <target state="translated">줄임표가있는 XS 코드는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="f7fa3ea30854edb41afcb9fc07a8de31e1d1857c" translate="yes" xml:space="preserve">
          <source>The XS compiler is called &lt;b&gt;xsubpp&lt;/b&gt;. This compiler creates the constructs necessary to let an XSUB manipulate Perl values, and creates the glue necessary to let Perl call the XSUB. The compiler uses &lt;b&gt;typemaps&lt;/b&gt; to determine how to map C function parameters and output values to Perl values and back. The default typemap (which comes with Perl) handles many common C types. A supplementary typemap may also be needed to handle any special structures and types for the library being linked. For more information on typemaps, see &lt;a href=&quot;perlxstypemap&quot;&gt;perlxstypemap&lt;/a&gt;.</source>
          <target state="translated">XS 컴파일러를 &lt;b&gt;xsubpp&lt;/b&gt; 라고 합니다. 이 컴파일러는 XSUB가 Perl 값을 조작하는 데 필요한 구문을 작성하고 Perl이 XSUB를 호출하는 데 필요한 접착제를 작성합니다. 컴파일러는 &lt;b&gt;타입 맵&lt;/b&gt; 을 사용 하여 C 함수 매개 변수 및 출력 값을 Perl 값으로 매핑하는 방법을 결정합니다. 기본 유형 맵 (Perl과 함께 제공)은 많은 공통 C 유형을 처리합니다. 링크되는 라이브러리에 대한 특수 구조 및 유형을 처리하기 위해 보충 유형 맵이 필요할 수도 있습니다. 타입 맵에 대한 자세한 내용은 &lt;a href=&quot;perlxstypemap&quot;&gt;perlxstypemap을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="f7b25a71b5ed14cc6ac2648af9eea46c98febfb6" translate="yes" xml:space="preserve">
          <source>The XS implementation uses code from metamail. Copyright 1991 Bell Communications Research, Inc. (Bellcore)</source>
          <target state="translated">XS 구현은 메타 메일의 코드를 사용합니다. Copyright 1991 Bell Communications Research, Inc. (벨 코어)</target>
        </trans-unit>
        <trans-unit id="d9806f72759923810498b1550dc8fe607f007c38" translate="yes" xml:space="preserve">
          <source>The XS language allows one to describe the mapping between how the C routine is used, and how the corresponding Perl routine is used. It also allows creation of Perl routines which are directly translated to C code and which are not related to a pre-existing C function. In cases when the C interface coincides with the Perl interface, the XSUB declaration is almost identical to a declaration of a C function (in K&amp;amp;R style). In such circumstances, there is another tool called &lt;code&gt;h2xs&lt;/code&gt; that is able to translate an entire C header file into a corresponding XS file that will provide glue to the functions/macros described in the header file.</source>
          <target state="translated">XS 언어를 사용하면 C 루틴 사용 방법과 해당 Perl 루틴 사용 방법 간의 맵핑을 설명 할 수 있습니다. 또한 C 코드로 직접 변환되고 기존 C 함수와 관련이없는 Perl 루틴을 작성할 수 있습니다. C 인터페이스가 Perl 인터페이스와 일치하는 경우 XSUB 선언은 C 함수 선언 (K &amp;amp; R 스타일)과 거의 동일합니다. 이러한 상황에서는 전체 C 헤더 파일을 해당 XS 파일로 변환하여 헤더 파일에 설명 된 기능 / 매크로에 접착제를 제공 할 수있는 &lt;code&gt;h2xs&lt;/code&gt; 라는 도구 가 있습니다.</target>
        </trans-unit>
        <trans-unit id="5ec313ae92b11ca169ff5d7233881fd7bd18d45a" translate="yes" xml:space="preserve">
          <source>The XS module can use INCLUDE: to pull that file into it.</source>
          <target state="translated">XS 모듈은 INCLUDE :를 사용하여 해당 파일을 가져올 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="218e35287369aa01c3e7fcdd8962b5804ec13123" translate="yes" xml:space="preserve">
          <source>The XSUB follows.</source>
          <target state="translated">XSUB는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="8e74c8817464edf988ad4bdeab912f47c5f34e75" translate="yes" xml:space="preserve">
          <source>The XSUB mechanism is a simple way for Perl programs to access C subroutines. An XSUB routine will have a stack that contains the arguments from the Perl program, and a way to map from the Perl data structures to a C equivalent.</source>
          <target state="translated">XSUB 메커니즘은 Perl 프로그램이 C 서브 루틴에 액세스하는 간단한 방법입니다. XSUB 루틴에는 Perl 프로그램의 인수가 포함 된 스택과 Perl 데이터 구조에서 동등한 C 구조를 맵핑하는 방법이 있습니다.</target>
        </trans-unit>
        <trans-unit id="5d59b445869847df575ae1068c63533e2dbc9b4f" translate="yes" xml:space="preserve">
          <source>The XSUB will look like the code which follows. A CODE: block is used to call the real rpcb_gettime() function with the parameters in the correct order for that function.</source>
          <target state="translated">XSUB는 다음 코드와 같습니다. CODE : 블록은 해당 함수에 대해 올바른 순서로 매개 변수와 함께 실제 rpcb_gettime () 함수를 호출하는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="4912ec37b73cb1d3321d6d839b0519b8e1f0ad32" translate="yes" xml:space="preserve">
          <source>The XSUB's parameters are usually evaluated immediately after entering the XSUB. The INPUT: keyword can be used to force those parameters to be evaluated a little later. The INPUT: keyword can be used multiple times within an XSUB and can be used to list one or more input variables. This keyword is used with the PREINIT: keyword.</source>
          <target state="translated">XSUB의 매개 변수는 일반적으로 XSUB를 입력 한 직후에 평가됩니다. INPUT : 키워드를 사용하여 해당 매개 변수를 나중에 나중에 강제로 평가할 수 있습니다. INPUT : 키워드는 XSUB 내에서 여러 번 사용될 수 있으며 하나 이상의 입력 변수를 나열하는 데 사용될 수 있습니다. 이 키워드는 PREINIT : 키워드와 함께 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="889ae69f0e646c6957d38054ac7106368e38cd84" translate="yes" xml:space="preserve">
          <source>The XSUB-writer's equivalent of &lt;a href=&quot;functions/caller&quot;&gt;caller&lt;/a&gt;. The returned &lt;code&gt;PERL_CONTEXT&lt;/code&gt; structure can be interrogated to find all the information returned to Perl by &lt;code&gt;&lt;a href=&quot;functions/caller&quot;&gt;caller&lt;/a&gt;&lt;/code&gt;. Note that XSUBs don't get a stack frame, so &lt;code&gt;caller_cx(0, NULL)&lt;/code&gt; will return information for the immediately-surrounding Perl code.</source>
          <target state="translated">XSUB-writer의 &lt;a href=&quot;functions/caller&quot;&gt;caller&lt;/a&gt; 와 같습니다 . 반환 된 &lt;code&gt;PERL_CONTEXT&lt;/code&gt; 구조체는 &lt;code&gt;&lt;a href=&quot;functions/caller&quot;&gt;caller&lt;/a&gt;&lt;/code&gt; 의해 Perl에 반환 된 모든 정보를 찾기 위해 조사 될 수 있습니다 . XSUB에는 스택 프레임이 없으므로 &lt;code&gt;caller_cx(0, NULL)&lt;/code&gt; 은 바로 주변 Perl 코드에 대한 정보를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="cf42b7fd9e4e74da90d9e8ca347b2091c98166db" translate="yes" xml:space="preserve">
          <source>The XSUB-writer's equivalent to Perl's &lt;code&gt;&lt;a href=&quot;functions/wantarray&quot;&gt;wantarray&lt;/a&gt;&lt;/code&gt;. Returns &lt;code&gt;G_VOID&lt;/code&gt; , &lt;code&gt;G_SCALAR&lt;/code&gt; or &lt;code&gt;G_ARRAY&lt;/code&gt; for void, scalar or list context, respectively. See &lt;a href=&quot;perlcall&quot;&gt;perlcall&lt;/a&gt; for a usage example.</source>
          <target state="translated">XSUB-writer는 Perl의 &lt;code&gt;&lt;a href=&quot;functions/wantarray&quot;&gt;wantarray&lt;/a&gt;&lt;/code&gt; 와 같습니다 . void, 스칼라 또는 목록 컨텍스트에 대해 각각 &lt;code&gt;G_VOID&lt;/code&gt; , &lt;code&gt;G_SCALAR&lt;/code&gt; 또는 &lt;code&gt;G_ARRAY&lt;/code&gt; 를 리턴 합니다. 사용 예는 &lt;a href=&quot;perlcall&quot;&gt;perlcall&lt;/a&gt; 을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="75d69996de0f1c3559d54da444421bb8a65343e9" translate="yes" xml:space="preserve">
          <source>The XSUB-writer's interface to the C &lt;code&gt;free&lt;/code&gt; function.</source>
          <target state="translated">는 C에 XSUB - 작가의 인터페이스 &lt;code&gt;free&lt;/code&gt; 기능.</target>
        </trans-unit>
        <trans-unit id="407a1fe0a1b35df310a191803c348a1466dc758e" translate="yes" xml:space="preserve">
          <source>The XSUB-writer's interface to the C &lt;code&gt;malloc&lt;/code&gt; function, with cast. See also &lt;code&gt;Newx&lt;/code&gt; .</source>
          <target state="translated">캐스트와 함께 C &lt;code&gt;malloc&lt;/code&gt; 함수에 대한 XSUB-writer 인터페이스 . &lt;code&gt;Newx&lt;/code&gt; 도 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="03573c77e22afa37657d3ab695d4f1f77625b4b6" translate="yes" xml:space="preserve">
          <source>The XSUB-writer's interface to the C &lt;code&gt;malloc&lt;/code&gt; function.</source>
          <target state="translated">C &lt;code&gt;malloc&lt;/code&gt; 함수에 대한 XSUB-writer 인터페이스</target>
        </trans-unit>
        <trans-unit id="bb6fbdec07f505cf20563b49cda07ec35e3c5893" translate="yes" xml:space="preserve">
          <source>The XSUB-writer's interface to the C &lt;code&gt;malloc&lt;/code&gt; function. The allocated memory is zeroed with &lt;code&gt;memzero&lt;/code&gt; . See also &lt;code&gt;Newx&lt;/code&gt; .</source>
          <target state="translated">C &lt;code&gt;malloc&lt;/code&gt; 함수에 대한 XSUB-writer 인터페이스 할당 된 메모리는 &lt;code&gt;memzero&lt;/code&gt; 로 제로화됩니다 . &lt;code&gt;Newx&lt;/code&gt; 도 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="012775e63d169c2ca0d945eee45190f976576a44" translate="yes" xml:space="preserve">
          <source>The XSUB-writer's interface to the C &lt;code&gt;memcpy&lt;/code&gt; function. The &lt;code&gt;src&lt;/code&gt; is the source, &lt;code&gt;dest&lt;/code&gt; is the destination, &lt;code&gt;nitems&lt;/code&gt; is the number of items, and &lt;code&gt;type&lt;/code&gt; is the type. May fail on overlapping copies. See also &lt;code&gt;Move&lt;/code&gt; .</source>
          <target state="translated">C &lt;code&gt;memcpy&lt;/code&gt; 함수에 대한 XSUB-writer 인터페이스 &lt;code&gt;src&lt;/code&gt; 소스입니다 &lt;code&gt;dest&lt;/code&gt; 대상입니다 &lt;code&gt;nitems&lt;/code&gt; 항목의 수이며, &lt;code&gt;type&lt;/code&gt; 유형입니다. 중복 사본에서 실패 할 수 있습니다. &lt;code&gt;Move&lt;/code&gt; 도 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="45005a2398999be54551083e5df9a69f712a0c93" translate="yes" xml:space="preserve">
          <source>The XSUB-writer's interface to the C &lt;code&gt;memmove&lt;/code&gt; function. The &lt;code&gt;src&lt;/code&gt; is the source, &lt;code&gt;dest&lt;/code&gt; is the destination, &lt;code&gt;nitems&lt;/code&gt; is the number of items, and &lt;code&gt;type&lt;/code&gt; is the type. Can do overlapping moves. See also &lt;code&gt;Copy&lt;/code&gt; .</source>
          <target state="translated">C &lt;code&gt;memmove&lt;/code&gt; 기능에 대한 XSUB-writer 인터페이스 . &lt;code&gt;src&lt;/code&gt; 소스입니다 &lt;code&gt;dest&lt;/code&gt; 대상입니다 &lt;code&gt;nitems&lt;/code&gt; 항목의 수이며, &lt;code&gt;type&lt;/code&gt; 유형입니다. 겹치는 동작을 수행 할 수 있습니다. &lt;code&gt;Copy&lt;/code&gt; 참조 .</target>
        </trans-unit>
        <trans-unit id="6a4b16e416d5be5fce93e4644cc50a90934125a5" translate="yes" xml:space="preserve">
          <source>The XSUB-writer's interface to the C &lt;code&gt;memzero&lt;/code&gt; function. The &lt;code&gt;dest&lt;/code&gt; is the destination, &lt;code&gt;nitems&lt;/code&gt; is the number of items, and &lt;code&gt;type&lt;/code&gt; is the type.</source>
          <target state="translated">C &lt;code&gt;memzero&lt;/code&gt; 함수에 대한 XSUB-writer 인터페이스 &lt;code&gt;dest&lt;/code&gt; 대상입니다 &lt;code&gt;nitems&lt;/code&gt; 항목의 수이며, &lt;code&gt;type&lt;/code&gt; 유형입니다.</target>
        </trans-unit>
        <trans-unit id="37176570a3748e41537c9ad870ca5c052d9042c5" translate="yes" xml:space="preserve">
          <source>The XSUB-writer's interface to the C &lt;code&gt;realloc&lt;/code&gt; function, with cast.</source>
          <target state="translated">캐스트 를 사용하여 C &lt;code&gt;realloc&lt;/code&gt; 함수에 대한 XSUB-writer 인터페이스 .</target>
        </trans-unit>
        <trans-unit id="c8ea9501eaec9d4dc35b91e9053fafc1e103de32" translate="yes" xml:space="preserve">
          <source>The XSUB-writer's interface to the C &lt;code&gt;realloc&lt;/code&gt; function.</source>
          <target state="translated">C &lt;code&gt;realloc&lt;/code&gt; 함수에 대한 XSUB-writer 인터페이스</target>
        </trans-unit>
        <trans-unit id="b5f612b4df0e6a83ff9d89b145ebd6884b1f570e" translate="yes" xml:space="preserve">
          <source>The XSUBPP Program</source>
          <target state="translated">XSUBPP 프로그램</target>
        </trans-unit>
        <trans-unit id="1e85e39271c3e660414eb16aa8d858f60416c1a5" translate="yes" xml:space="preserve">
          <source>The XSUBs for the blue() and set_blue() methods are defined with the class name but the parameter for the object (THIS, or &quot;self&quot;) is implicit and is not listed.</source>
          <target state="translated">blue () 및 set_blue () 메소드의 XSUB는 클래스 이름으로 정의되지만 오브젝트의 매개 변수 (THIS 또는 &quot;self&quot;)는 내재되어 있으며 나열되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="f515a1ddc8e361ef2e2c6d0f98a0db815d43b99f" translate="yes" xml:space="preserve">
          <source>The YAML files themselves must have the &lt;code&gt;.yml&lt;/code&gt; extension; all other files are ignored (for two exceptions see</source>
          <target state="translated">YAML 파일 자체의 확장자 는 &lt;code&gt;.yml&lt;/code&gt; 이어야합니다 . 다른 모든 파일은 무시됩니다 (두 가지 예외는</target>
        </trans-unit>
        <trans-unit id="d674c081d1720c0407789140462f1119f634eb87" translate="yes" xml:space="preserve">
          <source>The Zxxx, Zyyy, and Zzzz codes are not used.</source>
          <target state="translated">Zxxx, Zyyy 및 Zzzz 코드는 사용되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="eb61dbdf150df0568557c97e9633ab5164b764f0" translate="yes" xml:space="preserve">
          <source>The __DATA__ token</source>
          <target state="translated">__DATA__ 토큰</target>
        </trans-unit>
        <trans-unit id="463e37f3f7783165c25668e9edcd6bb8f407a3e5" translate="yes" xml:space="preserve">
          <source>The _splain_ Program</source>
          <target state="translated">_splain_ 프로그램</target>
        </trans-unit>
        <trans-unit id="14c9176f141fa52e2e9b370433e3e5dfafe8e555" translate="yes" xml:space="preserve">
          <source>The ability of an independent subexpression to prevent backtracking can be quite useful. Suppose we want to match a non-empty string enclosed in parentheses up to two levels deep. Then the following regexp matches:</source>
          <target state="translated">역 추적을 방지하기위한 독립적 인 하위 식의 능력은 매우 유용 할 수 있습니다. 비어 있지 않은 문자열을 괄호로 묶고 최대 2 단계까지 일치 시키려고한다고 가정합니다. 그런 다음 다음 정규 표현식이 일치합니다.</target>
        </trans-unit>
        <trans-unit id="d9ff4522b539fedb72c69d4e7d1a591065047a06" translate="yes" xml:space="preserve">
          <source>The ability to create &quot;canned&quot; filters. These allow commonly used filters to be packaged into a stand-alone module.</source>
          <target state="translated">&quot;통조림&quot;필터를 만드는 기능. 이를 통해 일반적으로 사용되는 필터를 독립형 모듈로 패키지 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="76b03d5ecb823d555d353e5848c41c73876ec792" translate="yes" xml:space="preserve">
          <source>The ability to easily apply multiple filters to a single DBM file.</source>
          <target state="translated">단일 DBM 파일에 여러 필터를 쉽게 적용 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2a644c13f043d9a916e16c6cb02fd3b3d632a99e" translate="yes" xml:space="preserve">
          <source>The ability to put additional declarations before the typemap entries are processed is very handy in the cases when typemap conversions manipulate some global state:</source>
          <target state="translated">타입 맵 엔트리가 처리되기 전에 추가 선언을하는 기능은 타입 맵 변환이 일부 글로벌 상태를 조작하는 경우에 매우 유용합니다.</target>
        </trans-unit>
        <trans-unit id="bca0d0a62c6e09e5d5a84f9c8ee968851fbd9ea7" translate="yes" xml:space="preserve">
          <source>The ability to specify a different outermost delimiter bracket is useful in some circumstances. For example, in the Parse::RecDescent module, parser actions which are to be performed only on a successful parse are specified using a &lt;code&gt;&amp;lt;defer:...&amp;gt;&lt;/code&gt; directive. For example:</source>
          <target state="translated">다른 가장 바깥 쪽 구분 기호를 지정하는 기능은 일부 상황에서 유용합니다. 예를 들어 Parse :: RecDescent 모듈에서 성공적인 구문 분석에서만 수행 될 구문 분석기 조치는 &lt;code&gt;&amp;lt;defer:...&amp;gt;&lt;/code&gt; 지시문을 사용하여 지정됩니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="7bc890528d2492bad24f35a51d7d007c56cdbd51" translate="yes" xml:space="preserve">
          <source>The above attempts to show how the layer scheme works in a simple case. The application's &lt;code&gt;PerlIO *&lt;/code&gt; points to an entry in the table(s) representing open (allocated) handles. For example the first three slots in the table correspond to &lt;code&gt;stdin&lt;/code&gt; ,&lt;code&gt;stdout&lt;/code&gt; and &lt;code&gt;stderr&lt;/code&gt; . The table in turn points to the current &quot;top&quot; layer for the handle - in this case an instance of the generic buffering layer &quot;perlio&quot;. That layer in turn points to the next layer down - in this case the low-level &quot;unix&quot; layer.</source>
          <target state="translated">위의 방법은 간단한 경우 계층 구조가 어떻게 작동하는지 보여줍니다. 응용 프로그램의 &lt;code&gt;PerlIO *&lt;/code&gt; 는 열린 (할당 된) 핸들을 나타내는 테이블의 항목을 가리 킵니다. 예를 들어, 표의 처음 3 개 슬롯은 &lt;code&gt;stdin&lt;/code&gt; , &lt;code&gt;stdout&lt;/code&gt; 및 &lt;code&gt;stderr&lt;/code&gt; 에 해당합니다. . 표는 차례로 핸들의 현재 &quot;상위&quot;레이어 (이 경우 일반 버퍼링 레이어 &quot;perlio&quot;의 인스턴스)를 가리 킵니다. 그 레이어는 차례로 다음 레이어를 가리 킵니다.이 경우에는 저수준 &quot;유닉스&quot;레이어입니다.</target>
        </trans-unit>
        <trans-unit id="abf94dbab29db68325894cd60a65f3c2a1fc56fa" translate="yes" xml:space="preserve">
          <source>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</source>
          <target state="translated">상기 저작권 고지 및이 허가 고지는 소프트웨어의 모든 사본 또는 상당 부분에 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="267b118ff06011e806ac608fae00f2938fa2a609" translate="yes" xml:space="preserve">
          <source>The above example works only if &lt;code&gt;&quot;s&quot;&lt;/code&gt; is &lt;code&gt;NUL&lt;/code&gt; -terminated; otherwise you have to pass its length to &lt;code&gt;newSVpv&lt;/code&gt; .</source>
          <target state="translated">위의 예제는 &lt;code&gt;&quot;s&quot;&lt;/code&gt; 가 &lt;code&gt;NUL&lt;/code&gt; 로 종료 된 경우에만 작동합니다 . 그렇지 않으면 길이를 &lt;code&gt;newSVpv&lt;/code&gt; 로 전달해야합니다 .</target>
        </trans-unit>
        <trans-unit id="a24a47b6e29ea30653b134f5da5c978447aa0575" translate="yes" xml:space="preserve">
          <source>The above example would print out the message:</source>
          <target state="translated">위의 예는 메시지를 인쇄합니다.</target>
        </trans-unit>
        <trans-unit id="f4ebb52f7b218814c788462297b6da7a43f52650" translate="yes" xml:space="preserve">
          <source>The above four are optional except in other formatting codes, notably &lt;code&gt;L&amp;lt;...&amp;gt;&lt;/code&gt; , and when preceded by a capital letter.</source>
          <target state="translated">위의 네 개는 다른 형식화 ​​코드, 특히 &lt;code&gt;L&amp;lt;...&amp;gt;&lt;/code&gt; 및 대문자가 앞에 오는 경우를 제외하고는 선택 사항 입니다.</target>
        </trans-unit>
        <trans-unit id="dd54f214af2e16fd555100563837da248db5495d" translate="yes" xml:space="preserve">
          <source>The above is a somewhat simplified view of what really happens. Since Perl allows more flexible calling conventions than C, XSUBs may do much more in practice, such as checking input parameters for validity, throwing exceptions (or returning undef/empty list) if the return value from the C function indicates failure, calling different C functions based on numbers and types of the arguments, providing an object-oriented interface, etc.</source>
          <target state="translated">위의 내용은 실제 상황에 대한 약간 단순화 된 견해입니다. Perl은 C보다 더 유연한 호출 규칙을 허용하므로, XSUB는 유효성에 대한 입력 매개 변수 확인, C 함수의 반환 값이 실패를 나타내면 다른 C를 호출하는 경우 예외 발생 (또는 undef / empty 목록 반환)과 같이 실제로 훨씬 더 많은 작업을 수행 할 수 있습니다. 인수의 숫자와 유형에 기반한 함수, 객체 지향 인터페이스 제공 등</target>
        </trans-unit>
        <trans-unit id="754ca936a964e1d5816b54783f4e5f1ce663020d" translate="yes" xml:space="preserve">
          <source>The above is roughly equivalent to a &quot;stdio&quot; buffered stream, but with much more flexibility:</source>
          <target state="translated">위의 내용은 &quot;stdio&quot;버퍼링 스트림과 거의 동일하지만 훨씬 더 융통성이 있습니다.</target>
        </trans-unit>
        <trans-unit id="7fcad7cfc523d43a196084786f96b8329cc3ac60" translate="yes" xml:space="preserve">
          <source>The above module is very primitive. It does not implement mutator methods (&lt;code&gt;++&lt;/code&gt; , &lt;code&gt;-=&lt;/code&gt; and so on), does not do deep copying (not required without mutators!), and implements only those arithmetic operations which are used in the example.</source>
          <target state="translated">위의 모듈은 매우 원시적입니다. 뮤 테이터 메소드 ( &lt;code&gt;++&lt;/code&gt; , &lt;code&gt;-=&lt;/code&gt; 등)를 구현하지 않고 딥 카피 (뮤 테이터 없이는 필요하지 않음)를 수행하지 않으며 예제에서 사용 된 산술 연산 만 구현합니다.</target>
        </trans-unit>
        <trans-unit id="281ac3a4234dba5767807b1f7ef90bcb868fb84e" translate="yes" xml:space="preserve">
          <source>The above recipes describe the ordering of matches</source>
          <target state="translated">위의 요리법은 경기의 순서를 설명합니다</target>
        </trans-unit>
        <trans-unit id="abb826d1f92a77f8ee5fb15c131983e89da595f3" translate="yes" xml:space="preserve">
          <source>The above search for &quot;interpreter&quot; is recursive: if</source>
          <target state="translated">위의 &quot;통역사&quot;에 대한 검색은 재귀 적입니다.</target>
        </trans-unit>
        <trans-unit id="b606cf43c801f260cbdfb890db240a19d58a3f8e" translate="yes" xml:space="preserve">
          <source>The above subroutine may be called with either one or two arguments. The default value expression is evaluated when the subroutine is called, so it may provide different default values for different calls. It is only evaluated if the argument was actually omitted from the call. For example,</source>
          <target state="translated">위의 서브 루틴은 하나 또는 두 개의 인수로 호출 될 수 있습니다. 서브 루틴이 호출 될 때 디폴트 값 표현식이 평가되므로 호출마다 다른 디폴트 값을 제공 할 수 있습니다. 인수가 실제로 호출에서 생략 된 경우에만 평가됩니다. 예를 들어</target>
        </trans-unit>
        <trans-unit id="54c21b6df45da0f9df4499ebff5512482a22c709" translate="yes" xml:space="preserve">
          <source>The above test passes two values to &lt;code&gt;ok(arg1, arg2)&lt;/code&gt; -- the first a coderef, and the second is the number 4. Before &lt;code&gt;ok&lt;/code&gt; compares them, it calls the coderef, and uses its return value as the real value of this parameter. Assuming that &lt;code&gt;$bytecount&lt;/code&gt; returns 4, &lt;code&gt;ok&lt;/code&gt; ends up testing &lt;code&gt;4 eq 4&lt;/code&gt; . Since that's true, this test passes.</source>
          <target state="translated">상기 시험은 2 개 값 전달 &lt;code&gt;ok(arg1, arg2)&lt;/code&gt; - 제의 코드 참조를, 두번째 이전 수가 4 인 &lt;code&gt;ok&lt;/code&gt; 그들을 비교는 코드 참조를 호출하고,이 파라미터의 실제 값으로 반환 값을 사용 . &lt;code&gt;$bytecount&lt;/code&gt; 가 4를 리턴 한다고 가정하면 &lt;code&gt;ok&lt;/code&gt; 는 &lt;code&gt;4 eq 4&lt;/code&gt; 테스트를 끝냅니다 . 사실이므로이 테스트는 통과합니다.</target>
        </trans-unit>
        <trans-unit id="b1ef6a2bf455cf77affd01d5de26884f122aeca1" translate="yes" xml:space="preserve">
          <source>The above variables have all been localized and may be changed without affecting data outside of the wanted function.</source>
          <target state="translated">위의 변수는 모두 현지화되었으며 원하는 기능 외부의 데이터에 영향을 미치지 않고 변경 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ae51a1ce20f245092ecaad634de2dfa1ff5d3441" translate="yes" xml:space="preserve">
          <source>The above won't happen every time competing process update the same &lt;b&gt;DB_File&lt;/b&gt; database, but it does illustrate why the technique should not be used.</source>
          <target state="translated">위의 내용은 경쟁 프로세스가 동일한 &lt;b&gt;DB_File&lt;/b&gt; 데이터베이스를 업데이트 할 때마다 발생 하지는 않지만 기술을 사용하지 않아야하는 이유를 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="3f1ad066d4a66bd948f60c33d21673c18f0eb993" translate="yes" xml:space="preserve">
          <source>The accessor method provided by &lt;code&gt;struct&lt;/code&gt; for an element depends on the declared type of the element.</source>
          <target state="translated">요소에 대한 &lt;code&gt;struct&lt;/code&gt; 에서 제공하는 접근 자 메서드 는 선언 된 요소 유형에 따라 다릅니다.</target>
        </trans-unit>
        <trans-unit id="2cc7abc6dcf89e4b9609885153970267df830f15" translate="yes" xml:space="preserve">
          <source>The accessor methods assume that the actual storage for the data in the tied hash is in the hash referenced by &lt;code&gt;(&lt;a href=&quot;../functions/tied&quot;&gt;tied&lt;/a&gt;(%tiedhash))-&amp;gt;[0]&lt;/code&gt; . Thus overwritten &lt;code&gt;TIEHASH&lt;/code&gt; method should return an array reference with the first element being a hash reference, and the remaining methods should operate on the hash &lt;code&gt;%{ $_[0]-&amp;gt;[0] }&lt;/code&gt; :</source>
          <target state="translated">접근 자 메서드는 연결된 해시의 데이터에 대한 실제 저장소가 &lt;code&gt;(&lt;a href=&quot;../functions/tied&quot;&gt;tied&lt;/a&gt;(%tiedhash))-&amp;gt;[0]&lt;/code&gt; 의해 참조되는 해시에 있다고 가정합니다 . 따라서 덮어 쓴 &lt;code&gt;TIEHASH&lt;/code&gt; 메소드는 첫 번째 요소가 해시 참조 인 배열 참조를 리턴해야하며 나머지 메소드는 해시 &lt;code&gt;%{ $_[0]-&amp;gt;[0] }&lt;/code&gt; 작동해야합니다 .</target>
        </trans-unit>
        <trans-unit id="225d5409f9e31ec1fd3549dba0dd919b3904ec0c" translate="yes" xml:space="preserve">
          <source>The accessor methods assume that the actual storage for the data in the tied hash is in the hash referenced by &lt;code&gt;&lt;a href=&quot;../functions/tied&quot;&gt;tied(%tiedhash)&lt;/a&gt;&lt;/code&gt;. Thus overwritten &lt;code&gt;TIEHASH&lt;/code&gt; method should return a hash reference, and the remaining methods should operate on the hash referenced by the first argument:</source>
          <target state="translated">접근 자 메서드는 연결된 해시의 데이터에 대한 실제 저장소가 &lt;code&gt;&lt;a href=&quot;../functions/tied&quot;&gt;tied(%tiedhash)&lt;/a&gt;&lt;/code&gt; 참조하는 해시에 있다고 가정합니다 . 따라서 덮어 쓴 &lt;code&gt;TIEHASH&lt;/code&gt; 메소드는 해시 참조를 리턴해야하며 나머지 메소드는 첫 번째 인수가 참조하는 해시에서 작동해야합니다.</target>
        </trans-unit>
        <trans-unit id="2198a837e059e4191004ad59c18436a206b5087a" translate="yes" xml:space="preserve">
          <source>The accessor's argument, if any, is assigned to the element.</source>
          <target state="translated">접근 자의 인수가 있다면 요소에 할당됩니다.</target>
        </trans-unit>
        <trans-unit id="0a55122025df9d01179435aa1526880dbd188b0d" translate="yes" xml:space="preserve">
          <source>The accessor's argument, if any, is assigned to the element. The accessor will &lt;code&gt;croak&lt;/code&gt; if this is not an appropriate object reference.</source>
          <target state="translated">접근 자의 인수가 있다면 요소에 할당됩니다. 이것이 적절한 객체 참조가 아닌 경우 접근자는 &lt;code&gt;croak&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="bc291805bbdf71f35da9613fd10fc72effdd81d3" translate="yes" xml:space="preserve">
          <source>The act of calling up a deity, daemon, program, method, subroutine, or function to get it to do what you think it&amp;rsquo;s supposed to do. We usually &amp;ldquo;call&amp;rdquo; subroutines but &amp;ldquo;invoke&amp;rdquo; methods, since it sounds cooler.</source>
          <target state="translated">생각,해야 할 일을하기 위해 신, 데몬, 프로그램, 메소드, 서브 루틴 또는 함수를 호출하는 행위. 우리는 보통 서브 루틴을 &quot;호출&quot;하지만 더 시원하게 들리기 때문에 &quot;호출&quot;메소드를 호출합니다.</target>
        </trans-unit>
        <trans-unit id="0aae7e6b56823ac18d0d863614b52f8ccee20556" translate="yes" xml:space="preserve">
          <source>The act of emptying a &lt;b&gt;buffer&lt;/b&gt;, often before it&amp;rsquo;s full.</source>
          <target state="translated">&lt;b&gt;버퍼&lt;/b&gt; 가 가득 차기 전에 &lt;b&gt;버퍼&lt;/b&gt; 를 비우는 동작 .</target>
        </trans-unit>
        <trans-unit id="da4cbb2e16fc1345262c617dbbfacc0e9a82482b" translate="yes" xml:space="preserve">
          <source>The action begins in</source>
          <target state="translated">행동은</target>
        </trans-unit>
        <trans-unit id="c50575ea6cd15b6f99786b019f7fd7d151291681" translate="yes" xml:space="preserve">
          <source>The actual &lt;code&gt;SvUTF8&lt;/code&gt; flag of the &lt;a href=&quot;#PL_parser-%3elinestr&quot;&gt;PL_parser-&amp;gt;linestr&lt;/a&gt; scalar is significant, but not the whole story regarding the input character encoding. Normally, when a file is being read, the scalar contains octets and its &lt;code&gt;SvUTF8&lt;/code&gt; flag is off, but the octets should be interpreted as UTF-8 if the &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; utf8&lt;/code&gt; pragma is in effect. During a string eval, however, the scalar may have the &lt;code&gt;SvUTF8&lt;/code&gt; flag on, and in this case its octets should be interpreted as UTF-8 unless the &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; bytes&lt;/code&gt; pragma is in effect. This logic may change in the future; use this function instead of implementing the logic yourself.</source>
          <target state="translated">&lt;a href=&quot;#PL_parser-%3elinestr&quot;&gt;PL_parser-&amp;gt; linestr&lt;/a&gt; 스칼라 의 실제 &lt;code&gt;SvUTF8&lt;/code&gt; 플래그 는 중요하지만 입력 문자 인코딩에 관한 전체 스토리는 아닙니다. 일반적으로 파일을 읽을 때 스칼라는 옥텟을 포함하고 해당 &lt;code&gt;SvUTF8&lt;/code&gt; 플래그가 꺼져 있지만 &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; utf8&lt;/code&gt; pragma &lt;a href=&quot;functions/use&quot;&gt;사용&lt;/a&gt; 이 유효 하면 옥텟은 UTF-8로 해석되어야합니다 . 그러나 문자열 평가 중에 스칼라에 &lt;code&gt;SvUTF8&lt;/code&gt; 플래그 가 설정되어있을 수 있으며이 경우 8 &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; bytes&lt;/code&gt; &lt;a href=&quot;functions/use&quot;&gt;사용&lt;/a&gt; 바이트 pragma가 적용 되지 않는 한 8 진수는 UTF-8로 해석되어야합니다 . 이 논리는 나중에 변경 될 수 있습니다. 로직을 직접 구현하는 대신이 기능을 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="7dd5fba3f25088e2897b2cb955245840fd943e5f" translate="yes" xml:space="preserve">
          <source>The actual difference between PPCODE: and CODE: sections is in the initialization of &lt;code&gt;SP&lt;/code&gt; macro (which stands for the</source>
          <target state="translated">PPCODE :와 CODE : 섹션의 실제 차이점은 &lt;code&gt;SP&lt;/code&gt; 매크로 의 초기화 에 있습니다.</target>
        </trans-unit>
        <trans-unit id="c8adbcba0e7f4d6240d43127016adb7bebb0e850" translate="yes" xml:space="preserve">
          <source>The actual functions called are known as PP code, and they're spread between four files:</source>
          <target state="translated">호출되는 실제 함수는 PP 코드라고하며 4 개의 파일로 분산되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="9fed5c7ec6f1ab01c643aa93a8adb0f82c40adfa" translate="yes" xml:space="preserve">
          <source>The actual numbers are stored as unsigned big integers (with separate sign).</source>
          <target state="translated">실제 숫자는 부호없는 큰 정수 (별도의 부호)로 저장됩니다.</target>
        </trans-unit>
        <trans-unit id="7371146aaafc3d93e00f035ea0ab638040fbcf08" translate="yes" xml:space="preserve">
          <source>The actual permissions set depend on the value of the &lt;code&gt;CYGWIN&lt;/code&gt; in the SYSTEM environment settings. (Cygwin)</source>
          <target state="translated">실제 권한 설정은 SYSTEM 환경 설정 의 &lt;code&gt;CYGWIN&lt;/code&gt; 값에 따라 다릅니다 . (사이 윈)</target>
        </trans-unit>
        <trans-unit id="6f09daaa018160f529d356d689ea131810985b7e" translate="yes" xml:space="preserve">
          <source>The actual sizes (in bytes) of native shorts, ints, longs, and long longs on the platform where Perl was built are also available from the command line:</source>
          <target state="translated">Perl이 빌드 된 플랫폼에서 기본 short, int, long 및 long long의 실제 크기 (바이트)도 명령 행에서 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b9688cf79c9a25cc4e9f2e8b4c5ac878b783210d" translate="yes" xml:space="preserve">
          <source>The actual values on the argument stack are pointers to the values passed in. When an argument is listed as being an OUTPUT value, its corresponding value on the stack (i.e., ST(0) if it was the first argument) is changed. You can verify this by looking at the C code generated for Example 3. The code for the round() XSUB routine contains lines that look like this:</source>
          <target state="translated">인수 스택의 실제 값은 전달 된 값에 대한 포인터입니다. 인수가 OUTPUT 값으로 나열되면 스택의 해당 값 (즉, 첫 번째 인수 인 경우 ST (0))이 변경됩니다. 예제 3에 대해 생성 된 C 코드를 보면이를 확인할 수 있습니다. round () XSUB 루틴의 코드는 다음과 같은 행을 포함합니다.</target>
        </trans-unit>
        <trans-unit id="9efd0030f2fab9c72c68391b18e8706f0e577dc3" translate="yes" xml:space="preserve">
          <source>The add_bits() method is an alternative to add() that allow partial bytes to be appended to the message. Most users should just ignore this method as partial bytes is very unlikely to be of any practical use.</source>
          <target state="translated">add_bits () 메소드는 메시지에 부분 바이트를 추가 할 수있는 add ()의 대안입니다. 부분 바이트는 실용적이지 않기 때문에 대부분의 사용자는이 방법을 무시해야합니다.</target>
        </trans-unit>
        <trans-unit id="4385ce0c6decd2654eecaf2223aa22c33620d447" translate="yes" xml:space="preserve">
          <source>The addfile() method will croak() if it fails reading data for some reason. If it croaks it is unpredictable what the state of the $ctx object will be in. The addfile() method might have been able to read the file partially before it failed. It is probably wise to discard or reset the $ctx object if this occurs.</source>
          <target state="translated">addfile () 메소드는 어떤 이유로 데이터 읽기에 실패하면 croak ()합니다. 삐걱 거리면 $ ctx 객체의 상태를 예측할 수 없습니다. addfile () 메소드는 파일이 실패하기 전에 파일을 부분적으로 읽을 수있었습니다. 이것이 발생하면 $ ctx 객체를 삭제하거나 재설정하는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="29515a29b800fb1b3a5d264f9d3d2a8c7827591b" translate="yes" xml:space="preserve">
          <source>The addfile() method will croak() if it fails reading data for some reason. If it croaks it is unpredictable what the state of the $md5 object will be in. The addfile() method might have been able to read the file partially before it failed. It is probably wise to discard or reset the $md5 object if this occurs.</source>
          <target state="translated">addfile () 메소드는 어떤 이유로 데이터 읽기에 실패하면 croak ()합니다. 삐걱 거리면 $ md5 객체의 상태를 예측할 수 없습니다. addfile () 메소드는 실패하기 전에 파일을 부분적으로 읽을 수있었습니다. 이 경우 $ md5 객체를 삭제하거나 재설정하는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="bad770ef214b3ea483bf0a738f9ad60704fafe4f" translate="yes" xml:space="preserve">
          <source>The addition of threads has changed Perl's internals substantially. There are implications for people who write modules with XS code or external libraries. However, since Perl data is not shared among threads by default, Perl modules stand a high chance of being thread-safe or can be made thread-safe easily. Modules that are not tagged as thread-safe should be tested or code reviewed before being used in production code.</source>
          <target state="translated">스레드의 추가로 Perl의 내부가 크게 변경되었습니다. XS 코드 또는 외부 라이브러리로 모듈을 작성하는 사람들에게는 의미가 있습니다. 그러나 Perl 데이터는 기본적으로 스레드간에 공유되지 않기 때문에 Perl 모듈은 스레드로부터 안전하거나 스레드로부터 안전하게 만들 수 있습니다. 스레드 안전으로 태그가 지정되지 않은 모듈은 프로덕션 코드에서 사용하기 전에 테스트하거나 코드를 검토해야합니다.</target>
        </trans-unit>
        <trans-unit id="9fb5062c416df742306ccabb4b5f706bc8df9b28" translate="yes" xml:space="preserve">
          <source>The additional state of being</source>
          <target state="translated">추가 상태</target>
        </trans-unit>
        <trans-unit id="e003249c8de3365551eedf50a46a7442176acc5e" translate="yes" xml:space="preserve">
          <source>The address family (e.g. &lt;code&gt;AF_INET&lt;/code&gt; )</source>
          <target state="translated">주소 패밀리 (예 : &lt;code&gt;AF_INET&lt;/code&gt; )</target>
        </trans-unit>
        <trans-unit id="f126536906b38b811e2283014aef5b17fb2a2bb1" translate="yes" xml:space="preserve">
          <source>The address in a packed string (such as would be returned by pack_sockaddr_in())</source>
          <target state="translated">묶음 문자열의 주소 (예 : pack_sockaddr_in ()에 의해 반환 됨)</target>
        </trans-unit>
        <trans-unit id="9ca884174256cffd8e2121d14b1b2f9600471f92" translate="yes" xml:space="preserve">
          <source>The address of the OP's SV, if it has an SV, in hexadecimal.</source>
          <target state="translated">SV가있는 경우 OP의 SV 주소는 16 진수입니다.</target>
        </trans-unit>
        <trans-unit id="452ef6486bc83e321d333ed85c0a567a4e8c1783" translate="yes" xml:space="preserve">
          <source>The address of the OP's first child, in hexadecimal.</source>
          <target state="translated">OP의 첫 번째 자식 주소 (16 진수)입니다.</target>
        </trans-unit>
        <trans-unit id="2838690d17f05c70e3e67bc06eecc94e3f275b6e" translate="yes" xml:space="preserve">
          <source>The address of the OP's last child, in hexadecimal.</source>
          <target state="translated">OP의 마지막 자식 주소 (16 진수)입니다.</target>
        </trans-unit>
        <trans-unit id="e332f1e7f698853a5727152a76eca59b2c2b494a" translate="yes" xml:space="preserve">
          <source>The address of the OP's next OP, in hexadecimal.</source>
          <target state="translated">OP의 다음 OP 주소 (16 진수)입니다.</target>
        </trans-unit>
        <trans-unit id="1290cc2c32604c72580d6a56eb9a2ca86ec89ccf" translate="yes" xml:space="preserve">
          <source>The address of the OP's next youngest sibling, in hexadecimal.</source>
          <target state="translated">OP의 다음 막내 형제 주소 (16 진수).</target>
        </trans-unit>
        <trans-unit id="b68836e0a8059af6d65948c4349c2eade8a16af3" translate="yes" xml:space="preserve">
          <source>The address of the OP, in hexadecimal.</source>
          <target state="translated">OP의 주소 (16 진)입니다.</target>
        </trans-unit>
        <trans-unit id="09ebb8cc7d0fd73db86fd8a64bea18fe0c098b0c" translate="yes" xml:space="preserve">
          <source>The address tables of DLLs are patched only once, when they are loaded. The addresses of the entry points into DLLs are guaranteed to be the same for all the programs which use the same DLL. This removes the runtime fixup - once DLL is loaded, its code is read-only.</source>
          <target state="translated">DLL의 주소 테이블은로드 될 때 한 번만 패치됩니다. DLL 진입 점의 주소는 동일한 DLL을 사용하는 모든 프로그램에서 동일하게 보장됩니다. 이렇게하면 런타임 수정이 제거됩니다. 일단 DLL이로드되면 해당 코드는 읽기 전용입니다.</target>
        </trans-unit>
        <trans-unit id="c74bfa2ec2baf330be7b8d46296fdd61de05ff99" translate="yes" xml:space="preserve">
          <source>The advantage of this approach comparing to ALIAS: keyword is that there is no need to code a switch statement, each Perl function (which shares the same XSUB) knows which C function it should call. Additionally, one can attach an extra function remainder() at runtime by using</source>
          <target state="translated">ALIAS : 키워드와 비교할 때이 방법의 장점은 스위치 명령문을 코딩 할 필요가 없다는 것입니다. 각 Perl 함수 (동일한 XSUB를 공유 함)는 호출해야하는 C 함수를 알고 있습니다. 또한 런타임에 다음을 사용하여 추가 함수 나머지 ()를 첨부 할 수 있습니다</target>
        </trans-unit>
        <trans-unit id="1ba0a293372a8086f2c3cb8bd66f4ad49631031c" translate="yes" xml:space="preserve">
          <source>The advantage of this technique is that you have complete control over the implementation of your filter. The big disadvantage is the increased complexity required to write the filter - not only do you need to understand the source filter hooks, but you also need a reasonable knowledge of Perl guts. One of the few times it is worth going to this trouble is when writing a source scrambler. The &lt;code&gt;decrypt&lt;/code&gt; filter (which unscrambles the source before Perl parses it) included with the source filter distribution is an example of a C source filter (see Decryption Filters, below).</source>
          <target state="translated">이 기술의 장점은 필터 구현을 완전히 제어 할 수 있다는 것입니다. 가장 큰 단점은 필터를 작성하는 데 필요한 복잡성이 증가한다는 것입니다. 소스 필터 후크를 이해해야 할뿐만 아니라 Perl 내장에 대한 합리적인 지식이 필요합니다. 소스 스크램블러를 작성할 때이 문제를 해결해야 할 때가 있습니다. &lt;code&gt;decrypt&lt;/code&gt; 소스 필터 분포 포함 (펄을 파싱하기 전에 소스 스크램블을 풉니) 필터 (이하, 해독 필터 참조) C 소스 필터의 예이다.</target>
        </trans-unit>
        <trans-unit id="072e0efbeb225d357c21442cc8c46a3dcf93b381" translate="yes" xml:space="preserve">
          <source>The advantage of using the above macros is that you don't have to setup an extra function for &lt;code&gt;call_*&lt;/code&gt; , and that using these macros is faster than using &lt;code&gt;call_*&lt;/code&gt; .</source>
          <target state="translated">위의 매크로를 사용하면 &lt;code&gt;call_*&lt;/code&gt; 에 추가 기능을 설정할 필요가 없으며 이러한 매크로를 사용하는 것이 &lt;code&gt;call_*&lt;/code&gt; 를 사용하는 것보다 빠릅니다 .</target>
        </trans-unit>
        <trans-unit id="53174719bc4a34362607e16e39670825ed959235" translate="yes" xml:space="preserve">
          <source>The agent on whose behalf a &lt;b&gt;method&lt;/b&gt; is invoked. In a &lt;b&gt;class&lt;/b&gt; method, the invocant is a package name. In an &lt;b&gt;instance&lt;/b&gt; method, the invocant is an object reference.</source>
          <target state="translated">&lt;b&gt;메소드&lt;/b&gt; 를 호출 한 에이전트입니다 . A의 &lt;b&gt;클래스&lt;/b&gt; 에있어서, 상기 invocant은 패키지 이름입니다. 에서 &lt;b&gt;인스턴스&lt;/b&gt; 에있어서, 상기 invocant 개체 참조한다.</target>
        </trans-unit>
        <trans-unit id="3e3cbe3ecc5eb1d553a5d35837bcb40ffd7eda37" translate="yes" xml:space="preserve">
          <source>The aim of the implementation is to provide the PerlIO API in a flexible and platform neutral manner. It is also a trial of an &quot;Object Oriented C, with vtables&quot; approach which may be applied to Perl 6.</source>
          <target state="translated">구현의 목표는 유연하고 플랫폼 중립적 인 방식으로 PerlIO API를 제공하는 것입니다. 또한 Perl 6에 적용될 수있는 &quot;vtables를 가진 객체 지향 C&quot;접근 방식의 시험판입니다.</target>
        </trans-unit>
        <trans-unit id="eca34d276a1e0da5bdcd3481f3be5f1fa01ec807" translate="yes" xml:space="preserve">
          <source>The aim of this stage is to take the Perl source, and turn it into an op tree. We'll see what one of those looks like later. Strictly speaking, there's three things going on here.</source>
          <target state="translated">이 단계의 목표는 Perl 소스를 가져 와서 op 트리로 만드는 것입니다. 우리는 나중에 그 중 하나가 어떻게 보이는지 볼 것입니다. 엄밀히 말하면, 여기에는 세 가지 일이 있습니다.</target>
        </trans-unit>
        <trans-unit id="1c84b06bf15cbe5bd96e34833737cbd3f8f36b72" translate="yes" xml:space="preserve">
          <source>The alarm() test failure is caused by system() apparently blocking alarm(). That is probably a libc bug, and given that SunOS 4.x has been end-of-lifed years ago, don't hold your breath for a fix. In addition to that, don't try anything too Unicode-y, especially with Encode, and you should be fine in SunOS 4.x.</source>
          <target state="translated">alarm () 테스트 실패는 system ()이 명백하게 alarm ()을 차단하여 발생합니다. 이것은 아마도 libc 버그 일 것입니다. SunOS 4.x가 몇 년 전에 수명이 다했다는 것을 감안할 때, 숨을 고치지 마십시오. 그 외에도 특히 Encode를 사용하여 너무 유니 코드로 시도하지 마십시오 .SunOS 4.x에서는 괜찮을 것입니다.</target>
        </trans-unit>
        <trans-unit id="ac23951d81146a4c25773847fcd1353c10dfdb5b" translate="yes" xml:space="preserve">
          <source>The alias_code function is deprecated and will be removed in the December 2014 release.</source>
          <target state="translated">alias_code 함수는 더 이상 사용되지 않으며 2014 년 12 월 릴리스에서 제거 될 예정입니다.</target>
        </trans-unit>
        <trans-unit id="f5829e682c777d3809510d4e74d665806fe75e9a" translate="yes" xml:space="preserve">
          <source>The alias_code function is preserved for backwards compatibility, but the following two are identical:</source>
          <target state="translated">alias_code 함수는 이전 버전과의 호환성을 위해 유지되지만 다음 두 가지는 동일합니다.</target>
        </trans-unit>
        <trans-unit id="70cc56ad5f5fa00e1dcd91a0319ec7c86448a5ca" translate="yes" xml:space="preserve">
          <source>The alloc command allows you to give the ftp server a hint about the size of the file about to be transferred using the ALLO ftp command. Some storage systems use this to make intelligent decisions about how to store the file. The &lt;code&gt;SIZE&lt;/code&gt; argument represents the size of the file in bytes. The &lt;code&gt;RECORD_SIZE&lt;/code&gt; argument indicates a maximum record or page size for files sent with a record or page structure.</source>
          <target state="translated">alloc 명령을 사용하면 ALLO ftp 명령을 사용하여 전송하려는 파일 크기에 대한 힌트를 ftp 서버에 제공 할 수 있습니다. 일부 스토리지 시스템은이를 사용하여 파일을 저장하는 방법에 대한 현명한 결정을 내립니다. &lt;code&gt;SIZE&lt;/code&gt; 의 인수는 파일의 크기 (바이트)를 나타냅니다. &lt;code&gt;RECORD_SIZE&lt;/code&gt; 인수는 기록 또는 페이지 구조로 전송 파일의 최대 레코드 또는 페이지 크기를 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="b33892c53e0bb40f7871a5fed62579159a0f62e4" translate="yes" xml:space="preserve">
          <source>The alternative &lt;code&gt;STORABLE_attach&lt;/code&gt; method provides a solution for these shared objects. Instead of &lt;code&gt;STORABLE_freeze&lt;/code&gt; --&amp;gt; &lt;code&gt;STORABLE_thaw&lt;/code&gt; , you implement &lt;code&gt;STORABLE_freeze&lt;/code&gt; --&amp;gt; &lt;code&gt;STORABLE_attach&lt;/code&gt; instead.</source>
          <target state="translated">대체 &lt;code&gt;STORABLE_attach&lt;/code&gt; 메소드는 이러한 공유 객체에 대한 솔루션을 제공합니다. 대신에 &lt;code&gt;STORABLE_freeze&lt;/code&gt; -&amp;gt; &lt;code&gt;STORABLE_thaw&lt;/code&gt; 은 , 당신이 구현 &lt;code&gt;STORABLE_freeze&lt;/code&gt; 을 -&amp;gt; &lt;code&gt;STORABLE_attach&lt;/code&gt; 대신.</target>
        </trans-unit>
        <trans-unit id="402e3151897f6beaece02f0ebb7344497fe45587" translate="yes" xml:space="preserve">
          <source>The alternative is to put the stubs in before the &lt;code&gt;__DATA__&lt;/code&gt; token BEFORE releasing the module, and for this purpose the &lt;code&gt;Devel::SelfStubber&lt;/code&gt; module is available. However this does require the extra step of ensuring that the stubs are in the module. If this is done I strongly recommend that this is done BEFORE releasing the module - it should NOT be done at install time in general.</source>
          <target state="translated">대안은 모듈을 해제 하기 전에 &lt;code&gt;__DATA__&lt;/code&gt; 토큰 앞에 스텁을 배치하는 것이며,이를 위해 &lt;code&gt;Devel::SelfStubber&lt;/code&gt; 모듈을 사용할 수 있습니다. 그러나 스텁이 모듈에 있는지 확인하는 추가 단계가 필요합니다. 이 작업을 수행 한 경우 모듈을 릴리스하기 전에이 작업을 수행하는 것이 좋습니다. 일반적으로 설치시 수행하면 안됩니다.</target>
        </trans-unit>
        <trans-unit id="6f8e08a6bd15bdf7cb57a249a2eb325f0bdb259e" translate="yes" xml:space="preserve">
          <source>The amount of sbrk(2)ed memory needed to keep buckets aligned.</source>
          <target state="translated">버킷을 정렬하는 데 필요한 sbrk (2) 메모리의 양입니다.</target>
        </trans-unit>
        <trans-unit id="24d94fd90247d993fe24e78a68e00db6f524e13c" translate="yes" xml:space="preserve">
          <source>The anger you feel when the computer is being lazy. This makes you write programs that don&amp;rsquo;t just react to your needs, but actually anticipate them. Or at least that pretend to. Hence, the second great virtue of a programmer. See also &lt;b&gt;laziness&lt;/b&gt; and &lt;b&gt;hubris&lt;/b&gt;.</source>
          <target state="translated">컴퓨터가 게으르고있을 때 느끼는 분노. 이것은 당신의 요구에 부응하는 것이 아니라 실제로 예상하는 프로그램을 작성하게합니다. 아니면 적어도 척. 따라서 프로그래머의 두 번째 큰 미덕. &lt;b&gt;게으름&lt;/b&gt; 과 &lt;b&gt;후부&lt;/b&gt; 참조 .</target>
        </trans-unit>
        <trans-unit id="2d396c6c924a9cda1b9caf0839be7530a8ba7f62" translate="yes" xml:space="preserve">
          <source>The anonymous subroutine returned by add_function_generator() isn't technically a closure because it refers to no lexicals outside its own scope. Using a closure gives you a</source>
          <target state="translated">add_function_generator ()에 의해 리턴 된 익명 서브 루틴은 자체 범위 밖의 어휘를 참조하지 않기 때문에 기술적으로 닫히지 않습니다. 클로저를 사용하면</target>
        </trans-unit>
        <trans-unit id="7c26228772d7852b95995c9f2def9a6401f105ab" translate="yes" xml:space="preserve">
          <source>The answer is &lt;b&gt;recursion&lt;/b&gt;, and maybe &lt;b&gt;threads&lt;/b&gt;. Both these can create several execution pointers going into the same subroutine. For the subroutine-child not write over the temporaries for the subroutine-parent (lifespan of which covers the call to the child), the parent and the child should have different scratchpads. (</source>
          <target state="translated">대답은 &lt;b&gt;재귀입니다&lt;/b&gt; 이며 &lt;b&gt;스레드 일 수&lt;/b&gt; 있습니다. 둘 다 동일한 서브 루틴으로 들어가는 여러 실행 포인터를 만들 수 있습니다. 서브 루틴-자식이 서브 루틴-부모의 수명을 초과하지 않는 경우 (자녀의 전화를받는 수명) 부모와 자식은 서로 다른 스크래치 패드를 가져야합니다. (</target>
        </trans-unit>
        <trans-unit id="352a5795d3c7f4b3f3c9dafd2990d2244d787ba4" translate="yes" xml:space="preserve">
          <source>The answer is that our regexp works well until we get past the last real match. Then the regexp will fail to match a synchronized &lt;code&gt;TGA&lt;/code&gt; and start stepping ahead one character position at a time, not what we want. The solution is to use &lt;code&gt;\G&lt;/code&gt; to anchor the match to the codon alignment:</source>
          <target state="translated">대답은 마지막 실제 경기를 지날 때까지 정규 표현식이 잘 작동한다는 것입니다. 그러면 정규 표현식이 동기화 된 &lt;code&gt;TGA&lt;/code&gt; 와 일치하지 않습니다. 와 하지 않고 원하는 문자가 아닌 한 번에 한 문자 위치 씩 앞으로 나아갑니다. 해결책은 &lt;code&gt;\G&lt;/code&gt; 를 사용 하여 일치를 코돈 정렬에 고정시키는 것입니다.</target>
        </trans-unit>
        <trans-unit id="08cdc226d03f36a2e4fc74ff822641ef90ed1cc6" translate="yes" xml:space="preserve">
          <source>The answer lies in the optimizations the regex engine makes. In the first case, all the engine sees are plain old characters (aside from the &lt;code&gt;?{}&lt;/code&gt; construct). It's smart enough to realize that the string 'ddd' doesn't occur in our target string before actually running the pattern through. But in the second case, we've tricked it into thinking that our pattern is more complicated. It takes a look, sees our character class, and decides that it will have to actually run the pattern to determine whether or not it matches, and in the process of running it hits the print statement before it discovers that we don't have a match.</source>
          <target state="translated">그 대답은 정규식 엔진의 최적화에 있습니다. 첫 번째 경우 모든 엔진에 보이는 오래된 문자입니다 ( &lt;code&gt;?{}&lt;/code&gt; 구문 제외)입니다. 실제로 패턴을 실행하기 전에 문자열 'ddd'가 대상 문자열에서 발생하지 않는다는 것을 인식하는 것이 현명합니다. 그러나 두 번째 경우에는 패턴이 더 복잡하다고 생각하도록 속였습니다. 살펴보고, 캐릭터 클래스를보고, 패턴이 실제로 일치하는지 여부를 결정하기 위해 실제로 패턴을 실행해야하는지 결정하고, 실행하는 동안 패턴이없는 것을 발견하기 전에 print 문을칩니다. 시합.</target>
        </trans-unit>
        <trans-unit id="a5831b08e8cef23b3074e1a04c2a596b4fb392c8" translate="yes" xml:space="preserve">
          <source>The answer to requirement 2) is that a regexp (mostly) uses Unicode characters. The &quot;mostly&quot; is for messy backward compatibility reasons, but starting in Perl 5.14, any regex compiled in the scope of a &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; feature 'unicode_strings'&lt;/code&gt; (which is automatically turned on within the scope of a &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; 5.012&lt;/code&gt; or higher) will turn that &quot;mostly&quot; into &quot;always&quot;. If you want to handle Unicode properly, you should ensure that &lt;code&gt;'unicode_strings'&lt;/code&gt; is turned on. Internally, this is encoded to bytes using either UTF-8 or a native 8 bit encoding, depending on the history of the string, but conceptually it is a sequence of characters, not bytes. See &lt;a href=&quot;perlunitut&quot;&gt;perlunitut&lt;/a&gt; for a tutorial about that.</source>
          <target state="translated">요구 사항 2)에 대한 대답은 정규 표현식 (대부분)이 유니 코드 문자를 사용한다는 것입니다. &quot;대부분&quot;은 이전 버전과의 호환성 문제로, Perl 5.14부터 &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; feature 'unicode_strings'&lt;/code&gt; ( &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; 5.012&lt;/code&gt; 이상의 범위 내에서 자동으로 설정 됨) 의 범위에서 컴파일 된 정규식 은 &quot; &quot;항상&quot;으로. 유니 코드를 올바르게 처리하려면 &lt;code&gt;'unicode_strings'&lt;/code&gt; 가 켜져 있는지 확인해야합니다 . 내부적으로 이것은 문자열 히스토리에 따라 UTF-8 또는 기본 8 비트 인코딩을 사용하여 바이트로 인코딩되지만 개념적으로 바이트가 아닌 일련의 문자입니다. &lt;a href=&quot;perlunitut&quot;&gt;이에&lt;/a&gt; 대한 튜토리얼은 perlunitut 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="ab2461c5e3f0cff2ecb68a3151a2d92b8a70b40b" translate="yes" xml:space="preserve">
          <source>The answers may be off by few percentages because of the irregular (slightly aspherical) form of the Earth. The errors are at worst about 0.55%, but generally below 0.3%.</source>
          <target state="translated">불규칙한 (약간의 비구면) 형태의 지구로 인해 답이 몇 퍼센트 감소 할 수 있습니다. 오류는 최악의 경우 약 0.55 %이지만 일반적으로 0.3 % 미만입니다.</target>
        </trans-unit>
        <trans-unit id="d59be2ed12ab2165af09c3bf2c28e33ef82222db" translate="yes" xml:space="preserve">
          <source>The appended output looks like:</source>
          <target state="translated">추가 된 출력은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="0bd30cce9c74d0ed491dced5ecc139a5a1ba48e4" translate="yes" xml:space="preserve">
          <source>The appropriate string for the capability will be returned.</source>
          <target state="translated">기능에 적합한 문자열이 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="3156ec770160eccf0b831e893b19fba7da139602" translate="yes" xml:space="preserve">
          <source>The arcus (also known as the inverse) functions of the sine, cosine, and tangent</source>
          <target state="translated">사인, 코사인 및 탄젠트의 아크 (역수라고도 함) 함수</target>
        </trans-unit>
        <trans-unit id="ef155b03ef2bd4353f5f3ae9ce3143e92ce08f0b" translate="yes" xml:space="preserve">
          <source>The arcus cofunctions of the sine, cosine, and tangent (acosec/acsc and acotan/acot are aliases). Note that atan2(0, 0) is not well-defined.</source>
          <target state="translated">사인, 코사인 및 탄젠트의 원호 함수 (acosec / acsc 및 acotan / acot는 별칭)입니다. atan2 (0, 0)은 잘 정의되어 있지 않습니다.</target>
        </trans-unit>
        <trans-unit id="d90394bf6d1003afd92e57075638d8ec96a8f149" translate="yes" xml:space="preserve">
          <source>The area (also known as the inverse) functions of the hyperbolic sine, cosine, and tangent</source>
          <target state="translated">쌍곡 사인, 코사인 및 탄젠트의 면적 (역수라고도 함) 함수</target>
        </trans-unit>
        <trans-unit id="96b07ebcfe3eb3364fc6d5a9b44430b864f7f185" translate="yes" xml:space="preserve">
          <source>The area cofunctions of the hyperbolic sine, cosine, and tangent (acsch/acosech and acoth/acotanh are aliases)</source>
          <target state="translated">쌍곡 사인, 코사인 및 탄젠트의 면적 함수 (acsch / acosech 및 acoth / acotanh는 별칭 임)</target>
        </trans-unit>
        <trans-unit id="5ccdfb64dc7931913963c31e04d78b0a9af3ae93" translate="yes" xml:space="preserve">
          <source>The area in which a particular invocation of a particular file or subroutine keeps some of its temporary values, including any lexically scoped variables.</source>
          <target state="translated">특정 파일 또는 서브 루틴의 특정 호출은 어휘 범위 변수를 포함하여 임시 값의 일부를 유지하는 영역입니다.</target>
        </trans-unit>
        <trans-unit id="d10c9af72d3c8216f90487b0cb07489720300b93" translate="yes" xml:space="preserve">
          <source>The arg variable is initially set by taking the value from ST(0), then is stored back into ST(0) at the end of the routine.</source>
          <target state="translated">arg 변수는 처음에 ST (0)에서 값을 가져 와서 설정 한 다음 루틴 종료시 ST (0)에 다시 저장됩니다.</target>
        </trans-unit>
        <trans-unit id="4d814bb4a725af841ef1489f2dfafba121655945" translate="yes" xml:space="preserve">
          <source>The argument &lt;code&gt;level&lt;/code&gt; should be either 0 or -1. If &lt;code&gt;level==0&lt;/code&gt; , as a side-effect creates a glob with the given &lt;code&gt;name&lt;/code&gt; in the given &lt;code&gt;stash&lt;/code&gt; which in the case of success contains an alias for the subroutine, and sets up caching info for this glob.</source>
          <target state="translated">인수 &lt;code&gt;level&lt;/code&gt; 은 0 또는 -1이어야합니다. &lt;code&gt;level==0&lt;/code&gt; 인 경우 부작용으로 주어진 &lt;code&gt;stash&lt;/code&gt; 에 지정된 &lt;code&gt;name&lt;/code&gt; 의 글로브를 작성하는데 , 성공시 서브 루틴의 별명을 포함하고이 글로브에 대한 캐싱 정보를 설정합니다.</target>
        </trans-unit>
        <trans-unit id="46a90c11604ca06c6858b07026656614cf325b22" translate="yes" xml:space="preserve">
          <source>The argument after &lt;code&gt;'autotie'&lt;/code&gt; is a reference to a hash in which each key is the name of an attribute to be created, and each value is the class to which variables ascribed that attribute should be tied.</source>
          <target state="translated">&lt;code&gt;'autotie'&lt;/code&gt; 뒤의 인수 는 각 키가 생성 될 속성의 이름 인 각 해시에 대한 참조이며, 각 값은 해당 속성에 속하는 변수가 연결되는 클래스입니다.</target>
        </trans-unit>
        <trans-unit id="de7c9584c8050b2d0fdb24caf50ee070b0a90073" translate="yes" xml:space="preserve">
          <source>The argument specification can be</source>
          <target state="translated">인수 사양은</target>
        </trans-unit>
        <trans-unit id="e56eb85000cd23825e22500ebb61377895023bf6" translate="yes" xml:space="preserve">
          <source>The argument specification is optional. If omitted, the option is considered boolean, a value of 1 will be assigned when the option is used on the command line.</source>
          <target state="translated">인수 스펙은 선택 사항입니다. 생략하면 옵션이 부울로 간주되며 명령 행에서 옵션을 사용할 때 값 1이 지정됩니다.</target>
        </trans-unit>
        <trans-unit id="f70b3fa6aabdcb387bd854a30ff21340870477da" translate="yes" xml:space="preserve">
          <source>The argument to &lt;code&gt;LIST_CACHE&lt;/code&gt; or &lt;code&gt;SCALAR_CACHE&lt;/code&gt; must either be one of the following four strings:</source>
          <target state="translated">&lt;code&gt;LIST_CACHE&lt;/code&gt; 또는 &lt;code&gt;SCALAR_CACHE&lt;/code&gt; 에 대한 인수 는 다음 4 개의 문자열 중 하나 여야합니다.</target>
        </trans-unit>
        <trans-unit id="c5464d59534d6182be5453dd048427e6d0c50353" translate="yes" xml:space="preserve">
          <source>The arguments &lt;code&gt;$heading1&lt;/code&gt; , &lt;code&gt;$heading2&lt;/code&gt; , etc. are the heading titles of the corresponding sections, subsections, etc. to try and match. If &lt;code&gt;$headingN&lt;/code&gt; is omitted then it defaults to the current corresponding section heading title in the input.</source>
          <target state="translated">인수 &lt;code&gt;$heading1&lt;/code&gt; , &lt;code&gt;$heading2&lt;/code&gt; 등은 시도하고 일치시킬 해당 섹션, 하위 섹션 등의 제목 제목입니다. 경우 &lt;code&gt;$headingN&lt;/code&gt; 입력 전류에 대응하는 섹션 제목 타이틀로 기본 생략한다.</target>
        </trans-unit>
        <trans-unit id="0c2d811d7e533f13a02dc5ccb0c9cf2822f648ef" translate="yes" xml:space="preserve">
          <source>The arguments after the</source>
          <target state="translated">이후의 주장</target>
        </trans-unit>
        <trans-unit id="c3ee6db939d4bf6fb2dbd132ec653ceddc879c3d" translate="yes" xml:space="preserve">
          <source>The arguments and expected behaviour of these methods are described in &lt;a href=&quot;../digest&quot;&gt;Digest&lt;/a&gt;.</source>
          <target state="translated">이러한 메소드의 주장과 예상되는 동작은 &lt;a href=&quot;../digest&quot;&gt;다이제스트에&lt;/a&gt; 설명되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="b5c76d2b203709556f900b75ce0e52a9ac994219" translate="yes" xml:space="preserve">
          <source>The arguments are available via @ARGV, not $1, $2, etc.</source>
          <target state="translated">인수는 $ 1, $ 2 등이 아닌 @ARGV를 통해 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="6cb92f325e1877b21a75fa1acba0a791fd4726a3" translate="yes" xml:space="preserve">
          <source>The arguments of &lt;code&gt;sv_setpvf&lt;/code&gt; are processed like &lt;code&gt;&lt;a href=&quot;functions/sprintf&quot;&gt;sprintf&lt;/a&gt;&lt;/code&gt;, and the formatted output becomes the value.</source>
          <target state="translated">&lt;code&gt;sv_setpvf&lt;/code&gt; 의 인수는 &lt;code&gt;&lt;a href=&quot;functions/sprintf&quot;&gt;sprintf&lt;/a&gt;&lt;/code&gt; 와 같이 처리 되며 형식화 된 출력이 값이됩니다.</target>
        </trans-unit>
        <trans-unit id="839631a833c7558b199549ece29ff396d5371aa7" translate="yes" xml:space="preserve">
          <source>The arguments passed to the &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt;&lt;/code&gt; statement which invokes &lt;b&gt;sigtrap&lt;/b&gt; are processed in order. When a signal name or the name of one of &lt;b&gt;sigtrap&lt;/b&gt;'s signal lists is encountered a handler is immediately installed, when an option is encountered it affects subsequently installed handlers.</source>
          <target state="translated">&lt;b&gt;sigtrap&lt;/b&gt; 을 호출 하는 &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt;&lt;/code&gt; 문에 전달 된 인수 는 순서대로 처리됩니다. 신호 이름 또는 &lt;b&gt;sigtrap&lt;/b&gt; 의 신호 목록 중 하나의 이름 이 발견되면 핸들러가 즉시 설치되고, 옵션이 발견되면 이후에 설치된 핸들러에 영향을줍니다.&lt;b&gt;&lt;/b&gt;&lt;b&gt;&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="a181ad8a8d3a3252da75be7994d668c484c4410f" translate="yes" xml:space="preserve">
          <source>The arguments should be a hashref with</source>
          <target state="translated">인수는 다음과 같은 해시 참조 여야합니다.</target>
        </trans-unit>
        <trans-unit id="01c93f64cbaa573f1e972a244178e4f2a83875d0" translate="yes" xml:space="preserve">
          <source>The arguments themselves are any values following the &lt;code&gt;flags&lt;/code&gt; argument.</source>
          <target state="translated">인수 자체는 &lt;code&gt;flags&lt;/code&gt; 인수 뒤에 오는 모든 값 입니다.</target>
        </trans-unit>
        <trans-unit id="380902efca5b9b3a75f7c59abab4db85bec7e897" translate="yes" xml:space="preserve">
          <source>The arguments to &lt;code&gt;given&lt;/code&gt; and &lt;code&gt;when&lt;/code&gt; are in scalar context, and &lt;code&gt;given&lt;/code&gt; assigns the &lt;code&gt;$_&lt;/code&gt; variable its topic value.</source>
          <target state="translated">에 대한 인수는 &lt;code&gt;given&lt;/code&gt; 와 &lt;code&gt;when&lt;/code&gt; 스칼라 문맥에서, 그리고 &lt;code&gt;given&lt;/code&gt; 양수인에게 &lt;code&gt;$_&lt;/code&gt; 변수의 항목 값입니다.</target>
        </trans-unit>
        <trans-unit id="bee53666a69514e40c684814c2f3de57ce34649e" translate="yes" xml:space="preserve">
          <source>The arguments to layers are by default returned in parentheses after the name of the layer, and certain layers (like &lt;code&gt;utf8&lt;/code&gt; ) are not real layers but instead flags on real layers; to get all of these returned separately, use the optional &lt;code&gt;details&lt;/code&gt; argument:</source>
          <target state="translated">레이어에 대한 인수는 기본적으로 레이어 이름 뒤에 괄호 안에 반환되며, &lt;code&gt;utf8&lt;/code&gt; 과 같은 특정 레이어 는 실제 레이어가 아니라 실제 레이어의 플래그입니다. 이 모든 것을 개별적으로 반환하려면 선택적 &lt;code&gt;details&lt;/code&gt; 인수를 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="6e693a7b71ba349ddefc634c4aa1cd90dc56ea7f" translate="yes" xml:space="preserve">
          <source>The arithmetics with pure imaginary numbers works just like you would expect it with real numbers... you just have to remember that</source>
          <target state="translated">순수한 허수를 사용한 산술은 실수로 예상하는 것과 같은 방식으로 작동합니다.</target>
        </trans-unit>
        <trans-unit id="27b0340458e5b6bada543e551d3178c4f1de6919" translate="yes" xml:space="preserve">
          <source>The array &lt;code&gt;@ARGV&lt;/code&gt; contains the command-line arguments intended for the script. &lt;code&gt;$#ARGV&lt;/code&gt; is generally the number of arguments minus one, because &lt;code&gt;$ARGV[0]&lt;/code&gt; is the first argument,</source>
          <target state="translated">&lt;code&gt;@ARGV&lt;/code&gt; 배열 에는 스크립트를위한 명령 행 인수가 포함됩니다. &lt;code&gt;$#ARGV&lt;/code&gt; 는 일반적으로 인수의 수에서 1을 뺀 수입니다. &lt;code&gt;$ARGV[0]&lt;/code&gt; 이 첫 번째 인수이므로</target>
        </trans-unit>
        <trans-unit id="5e6fff9bfd20cc94284be277039aa46feebe2516" translate="yes" xml:space="preserve">
          <source>The array &lt;code&gt;@F&lt;/code&gt; contains the fields of each line read in when autosplit mode is turned on. See &lt;a href=&quot;perlrun&quot;&gt;perlrun&lt;/a&gt; for the &lt;b&gt;-a&lt;/b&gt; switch. This array is package-specific, and must be declared or given a full package name if not in package main when running under &lt;code&gt;strict 'vars'&lt;/code&gt; .</source>
          <target state="translated">배열 &lt;code&gt;@F&lt;/code&gt; 는 자동 분할 모드가 켜져있을 때 읽은 각 줄의 필드를 포함합니다. &lt;b&gt;-a&lt;/b&gt; 스위치에 대해서는 &lt;a href=&quot;perlrun&quot;&gt;perlrun&lt;/a&gt; 을 참조하십시오 . 이 배열은 패키지마다 &lt;code&gt;strict 'vars'&lt;/code&gt; 에서 실행될 때 main 패키지에없는 경우 선언되거나 전체 패키지 이름을 지정해야합니다 .&lt;b&gt;&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="c8441a1e4197d6b374d0c52606833f2a1d2d3753" translate="yes" xml:space="preserve">
          <source>The array &lt;code&gt;@INC&lt;/code&gt; contains the list of places that the &lt;code&gt;&lt;a href=&quot;functions/do&quot;&gt;do&lt;/a&gt; EXPR&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;functions/require&quot;&gt;require&lt;/a&gt;&lt;/code&gt;, or &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt;&lt;/code&gt; constructs look for their library files. It initially consists of the arguments to any &lt;b&gt;-I&lt;/b&gt; command-line switches, followed by the default Perl library, probably</source>
          <target state="translated">배열 &lt;code&gt;@INC&lt;/code&gt; 것을 장소의 목록을 포함 &lt;code&gt;&lt;a href=&quot;functions/do&quot;&gt;do&lt;/a&gt; EXPR&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;functions/require&quot;&gt;require&lt;/a&gt;&lt;/code&gt; , 또는 &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt;&lt;/code&gt; 구조가 라이브러리 파일을 찾을 수 있습니다. 처음에는 &lt;b&gt;-I&lt;/b&gt; 명령 행 스위치 에 대한 인수로 구성되며 기본 Perl 라이브러리가 이어집니다.</target>
        </trans-unit>
        <trans-unit id="a14a26b2dd6454634cc1107915a7a3aee19dc784" translate="yes" xml:space="preserve">
          <source>The array indices start with 0. A negative subscript retrieves its value from the end. In our example, &lt;code&gt;$myarray[-1]&lt;/code&gt; would have been 5000, and &lt;code&gt;$myarray[-2]&lt;/code&gt; would have been 500.</source>
          <target state="translated">배열 인덱스는 0으로 시작합니다. 음의 아래 첨자는 끝에서 값을 검색합니다. 이 예에서 &lt;code&gt;$myarray[-1]&lt;/code&gt; 은 5000이고 &lt;code&gt;$myarray[-2]&lt;/code&gt; 는 500입니다.</target>
        </trans-unit>
        <trans-unit id="5870f5124d5a86e2473fbde56d4d16aa6bdafbce" translate="yes" xml:space="preserve">
          <source>The array returned by the &lt;code&gt;&lt;a href=&quot;functions/times&quot;&gt;times&lt;/a&gt;&lt;/code&gt; operator is divided up according to the same rules the CRTL &lt;code&gt;&lt;a href=&quot;functions/times&quot;&gt;times()&lt;/a&gt;&lt;/code&gt; routine. Therefore, the &quot;system time&quot; elements will always be 0, since there is no difference between &quot;user time&quot; and &quot;system&quot; time under VMS, and the time accumulated by a subprocess may or may not appear separately in the &quot;child time&quot; field, depending on whether &lt;code&gt;&lt;a href=&quot;functions/times&quot;&gt;times()&lt;/a&gt;&lt;/code&gt; keeps track of subprocesses separately. Note especially that the VAXCRTL (at least) keeps track only of subprocesses spawned using &lt;code&gt;&lt;a href=&quot;functions/fork&quot;&gt;fork()&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;functions/exec&quot;&gt;exec()&lt;/a&gt;&lt;/code&gt;; it will not accumulate the times of subprocesses spawned via pipes, &lt;code&gt;&lt;a href=&quot;functions/system&quot;&gt;system()&lt;/a&gt;&lt;/code&gt;, or backticks.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/times&quot;&gt;times&lt;/a&gt;&lt;/code&gt; 연산자가 리턴 한 배열 은 CRTL &lt;code&gt;&lt;a href=&quot;functions/times&quot;&gt;times()&lt;/a&gt;&lt;/code&gt; 루틴 과 동일한 규칙에 따라 나뉩니다 . 따라서 &quot;시스템 시간&quot;요소는 VMS 하에서 &quot;사용자 시간&quot;과 &quot;시스템&quot;시간 사이에 차이가없고 하위 프로세스에 의해 누적 된 시간이 &quot;자식 시간&quot;에 개별적으로 나타나거나 나타나지 않을 수 있기 때문에 항상 0입니다. &lt;code&gt;&lt;a href=&quot;functions/times&quot;&gt;times()&lt;/a&gt;&lt;/code&gt; 가 하위 프로세스를 개별적으로 추적 하는지 여부에 따라 필드 . 특히 VAXCRTL은 (적어도) &lt;code&gt;&lt;a href=&quot;functions/fork&quot;&gt;fork()&lt;/a&gt;&lt;/code&gt; 및 &lt;code&gt;&lt;a href=&quot;functions/exec&quot;&gt;exec()&lt;/a&gt;&lt;/code&gt; 사용하여 생성 된 하위 프로세스 만 추적합니다 . 파이프, &lt;code&gt;&lt;a href=&quot;functions/system&quot;&gt;system()&lt;/a&gt;&lt;/code&gt; 또는 백틱을 통해 생성 된 하위 프로세스의 시간을 누적하지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="3e203923e4bb3b1b85d85c3be6cf6dca987c9241" translate="yes" xml:space="preserve">
          <source>The arrays &lt;code&gt;@EXPORT&lt;/code&gt; and &lt;code&gt;@EXPORT_OK&lt;/code&gt; in a module hold lists of symbols that are going to be exported into the users name space by default, or which they can request to be exported, respectively. The symbols can represent functions, scalars, arrays, hashes, or typeglobs. The symbols must be given by full name with the exception that the ampersand in front of a function is optional, e.g.</source>
          <target state="translated">배열 &lt;code&gt;@EXPORT&lt;/code&gt; 및 &lt;code&gt;@EXPORT_OK&lt;/code&gt; 가는 기호 모듈 보류 목록에 기본적으로 사용자 이름 공간으로 내보낼하거나 각각 내보낼 수 요청할 수있다. 기호는 함수, 스칼라, 배열, 해시 또는 타입 글로브를 나타낼 수 있습니다. 함수 앞의 앰퍼샌드가 선택 사항 인 경우를 제외하고 기호는 전체 이름으로 제공해야합니다. 예 :</target>
        </trans-unit>
        <trans-unit id="6be6541bf2f3c9c38b314f884349aae8de53fdfb" translate="yes" xml:space="preserve">
          <source>The arrays completely specify the mappings for all possible code points. The final element in an inversion map returned by this function will always be for the range that consists of all the code points that aren't legal Unicode, but that are expressible on the platform. (That is, it starts with code point 0x110000, the first code point above the legal Unicode maximum, and extends to infinity.) The value for that range will be the same that any typical unassigned code point has for the specified property. (Certain unassigned code points are not &quot;typical&quot;; for example the non-character code points, or those in blocks that are to be written right-to-left. The above-Unicode range's value is not based on these atypical code points.) It could be argued that, instead of treating these as unassigned Unicode code points, the value for this range should be &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt;. If you wish, you can change the returned arrays accordingly.</source>
          <target state="translated">배열은 가능한 모든 코드 포인트에 대한 매핑을 완전히 지정합니다. 이 함수가 반환 한 반전 맵의 마지막 요소는 항상 유효한 유니 코드는 아니지만 플랫폼에서 표현할 수있는 모든 코드 포인트로 구성된 범위에 대한 것입니다. 즉, 유효한 유니 코드 최대 값을 초과하는 첫 번째 코드 포인트 인 코드 포인트 0x110000으로 시작하여 무한대로 확장됩니다. 해당 범위의 값은 할당되지 않은 일반적인 코드 포인트가 지정된 속성과 동일합니다. (할당되지 않은 특정 코드 포인트는 &quot;일반적&quot;이 아닙니다 (예 : 문자가 아닌 코드 포인트 또는 오른쪽에서 왼쪽으로 쓰는 블록의 코드 포인트). 유니 코드 범위의 값은 이러한 비정형 코드 포인트를 기반으로하지 않습니다. )이를 할당되지 않은 유니 코드 코드 포인트로 취급하는 대신,이 범위의 값은 &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; . 원하는 경우 반환 된 배열을 적절히 변경할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="215f34a814c5d96aebb0e5a01677224428736e62" translate="yes" xml:space="preserve">
          <source>The arrays.h/arrays.c code in the &lt;a href=&quot;http://search.cpan.org/perldoc/PGPLOT&quot;&gt;PGPLOT&lt;/a&gt; module on CPAN does just this. If you're doing a lot of float or double processing, consider using the &lt;a href=&quot;http://search.cpan.org/perldoc/PDL&quot;&gt;PDL&lt;/a&gt; module from CPAN instead--it makes number-crunching easy.</source>
          <target state="translated">CPAN 의 &lt;a href=&quot;http://search.cpan.org/perldoc/PGPLOT&quot;&gt;PGPLOT&lt;/a&gt; 모듈에 있는 arrays.h / arrays.c 코드는 이 작업을 수행합니다. 많은 부동 또는 이중 처리를 수행하는 경우 대신 CPAN 의 &lt;a href=&quot;http://search.cpan.org/perldoc/PDL&quot;&gt;PDL&lt;/a&gt; 모듈을 사용하는 것이 좋습니다. 이는 숫자를 쉽게 처리 할 수있게합니다.</target>
        </trans-unit>
        <trans-unit id="7c674ebc98c67a6b78e8bff2084920a9483e6761" translate="yes" xml:space="preserve">
          <source>The arrow points to the sequence number of the next op; they're not displayed in -exec mode, for obvious reasons.</source>
          <target state="translated">화살표는 다음 op의 시퀀스 번호를 가리 킵니다. 명백한 이유로 -exec 모드로 표시되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="d3369ef5421624f50c9461a4385bdfc6e73878c8" translate="yes" xml:space="preserve">
          <source>The art of defining something (at least partly) in terms of itself, which is a naughty no-no in dictionaries but often works out okay in computer programs if you&amp;rsquo;re careful not to recurse forever (which is like an infinite loop with more spectacular failure modes).</source>
          <target state="translated">그 자체로 (적어도 부분적으로) 무언가를 정의하는 기술은 사전에서 나쁜 것은 아니지만 영원히 재귀하지 않도록주의하면 컴퓨터 프로그램에서 정상적으로 작동합니다 (더 많은 것을 가진 무한 루프와 같습니다) 화려한 실패 모드).</target>
        </trans-unit>
        <trans-unit id="44c6ad6b4370d28f2449d941c6198878c199473e" translate="yes" xml:space="preserve">
          <source>The article &quot;Constants in Perl&quot;, in</source>
          <target state="translated">&quot;Perl의 상수&quot;기사</target>
        </trans-unit>
        <trans-unit id="f1506bf3257cec0583c1b75ddabb2245f7506472" translate="yes" xml:space="preserve">
          <source>The assignment to &lt;code&gt;$^R&lt;/code&gt; above is properly localized, so the old value of &lt;code&gt;$^R&lt;/code&gt; is restored if the assertion is backtracked; compare &lt;a href=&quot;#Backtracking&quot;&gt;Backtracking&lt;/a&gt;.</source>
          <target state="translated">위의 &lt;code&gt;$^R&lt;/code&gt; 대한 지정 이 올바르게 현지화되었으므로 어설 션이 역 추적되면 이전 &lt;code&gt;$^R&lt;/code&gt; 값 이 복원됩니다. &lt;a href=&quot;#Backtracking&quot;&gt;역 추적&lt;/a&gt; 비교 .</target>
        </trans-unit>
        <trans-unit id="afaa9c220de769e54d663ab2c9c6d4f430c692cd" translate="yes" xml:space="preserve">
          <source>The assignment variants of these operators (&lt;code&gt;&amp;amp;= |= ^= &amp;amp;.= |.= ^.=&lt;/code&gt; ) behave likewise under the feature.</source>
          <target state="translated">이러한 연산자의 할당 변형 ( &lt;code&gt;&amp;amp;= |= ^= &amp;amp;.= |.= ^.=&lt;/code&gt; )도 기능에서 동일하게 작동합니다.</target>
        </trans-unit>
        <trans-unit id="71ba6eda663c17eb85a62c08062fb7adfc8e5822" translate="yes" xml:space="preserve">
          <source>The association between the filter object and the source stream is made with the &lt;code&gt;filter_add()&lt;/code&gt; function. This takes a filter object as a parameter (&lt;code&gt;$ref&lt;/code&gt; in this case) and installs it in the source stream.</source>
          <target state="translated">필터 객체와 소스 스트림 간의 연관은 &lt;code&gt;filter_add()&lt;/code&gt; 함수 로 이루어집니다 . 필터 객체를 매개 변수로 사용하고 ( 이 경우 &lt;code&gt;$ref&lt;/code&gt; ) 소스 스트림에 설치합니다.</target>
        </trans-unit>
        <trans-unit id="12a98cd04a6eb830d540ea5356e8449610414ff4" translate="yes" xml:space="preserve">
          <source>The atmark() functionality is also exportable as sockatmark() function:</source>
          <target state="translated">atmark () 기능은 sockatmark () 함수로 내보낼 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="30252fd845cfc7120c5fe1c8c4bfc41149abe5bb" translate="yes" xml:space="preserve">
          <source>The atmark() implementation: Copyright 2001, Lincoln Stein &amp;lt;lstein@cshl.org&amp;gt;. This module is distributed under the same terms as Perl itself. Feel free to use, modify and redistribute it as long as you retain the correct attribution.</source>
          <target state="translated">atmark () 구현 : Copyright 2001, Lincoln Stein &amp;lt;lstein@cshl.org&amp;gt;. 이 모듈은 Perl 자체와 동일한 용어로 배포됩니다. 올바른 속성을 유지하는 한 자유롭게 사용, 수정 및 재배포하십시오.</target>
        </trans-unit>
        <trans-unit id="82c21f7a3ae183ec4d3047341406ff01ae50460f" translate="yes" xml:space="preserve">
          <source>The attribute list is passed as a list of constant strings to the code which associates them with the subroutine. In particular, the second example of valid syntax above currently looks like this in terms of how it's parsed and invoked:</source>
          <target state="translated">속성 목록은 상수 문자열 목록으로 코드에 전달되어 서브 루틴과 연결됩니다. 특히, 위의 유효한 구문의 두 번째 예는 구문 분석 및 호출 방식 측면에서 현재 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="b657a6989977956f6b98ac68863da82534e8cebe" translate="yes" xml:space="preserve">
          <source>The attributes must be valid as simple identifier names (without any punctuation other than the '_' character). They may have a parameter list appended, which is only checked for whether its parentheses ('(',')') nest properly.</source>
          <target state="translated">속성은 간단한 식별자 이름으로 유효해야합니다 ( '_'문자 이외의 구두점 제외). 매개 변수 목록이 추가되어 괄호 ( '(', ')')가 제대로 중첩되는지 여부 만 확인됩니다.</target>
        </trans-unit>
        <trans-unit id="6773066d674b1f4d653955ef73a085c07f393513" translate="yes" xml:space="preserve">
          <source>The author is particularly grateful to</source>
          <target state="translated">저자는 특히 감사합니다</target>
        </trans-unit>
        <trans-unit id="a93ac8e5cbb3f89224036c2390524cda7879089a" translate="yes" xml:space="preserve">
          <source>The author that PAUSE allows to assign &lt;b&gt;co-maintainer&lt;/b&gt; permissions to a &lt;b&gt;namespace&lt;/b&gt;. A primary maintainer can give up this distinction by assigning it to another PAUSE author. See Camel chapter 19, &amp;ldquo;CPAN&amp;rdquo;.</source>
          <target state="translated">PAUSE가 &lt;b&gt;공동 유지 관리자&lt;/b&gt; 권한을 &lt;b&gt;네임 스페이스&lt;/b&gt; 에 할당 할 수있는 작성자 . 기본 관리자는 다른 PAUSE 작성자에게이 구분을 지정하여이 구분을 포기할 수 있습니다. 낙타 19 장 &quot;CPAN&quot;을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="08620722332423b72a0cf9f7ae67e151d08d71e3" translate="yes" xml:space="preserve">
          <source>The author would like to thank Jeff Pinyan, Andrew Johnson, Peter Haworth, Ronald J Kimball, and Joe Smith for all their helpful comments.</source>
          <target state="translated">저자는 Jeff Pinyan, Andrew Johnson, Peter Haworth, Ronald J Kimball 및 Joe Smith에게 도움이되는 모든 의견에 감사를 표합니다.</target>
        </trans-unit>
        <trans-unit id="7842e70d44fa0066b01f00b794f28e99cc120d48" translate="yes" xml:space="preserve">
          <source>The author would like to thank Mark-Jason Dominus, Tom Christiansen, Ilya Zakharevich, Brad Hughes, and Mike Giroux for all their helpful comments.</source>
          <target state="translated">저자는 Mark-Jason Dominus, Tom Christiansen, Ilya Zakharevich, Brad Hughes 및 Mike Giroux에게 도움이되는 모든 의견에 감사의 말씀을 전합니다.</target>
        </trans-unit>
        <trans-unit id="d5ab428bb4c4aa590bf7abb081e2b965dbe912a0" translate="yes" xml:space="preserve">
          <source>The author's book</source>
          <target state="translated">저자의 책</target>
        </trans-unit>
        <trans-unit id="c9e7cff5bfc96623d1a90b00467d7f7914fdeb06" translate="yes" xml:space="preserve">
          <source>The authors make &lt;b&gt;no warranty&lt;/b&gt;, implied or otherwise, about the suitability of this software for safety or security purposes.</source>
          <target state="translated">저자 는 안전 또는 보안 목적으로이 소프트웨어의 적합성에 대해 암시 적이든 명시 적이든 &lt;b&gt;어떠한 보증도하지 않습니다&lt;/b&gt; .</target>
        </trans-unit>
        <trans-unit id="9dd8067e06812735b51136d8d5ba18979e5deef6" translate="yes" xml:space="preserve">
          <source>The authors shall not in any case be liable for special, incidental, consequential, indirect or other similar damages arising from the use of this software.</source>
          <target state="translated">저자는 어떠한 경우에도이 소프트웨어의 사용으로 인해 발생하는 특수, 부수적, 결과적, 간접적 또는 기타 유사한 손해에 대해 책임을지지 않습니다.</target>
        </trans-unit>
        <trans-unit id="bac4f3e7625a4b29694017ee1288427918dba79c" translate="yes" xml:space="preserve">
          <source>The auto-decrement operator is not magical.</source>
          <target state="translated">자동 감소 연산자는 마법이 아닙니다.</target>
        </trans-unit>
        <trans-unit id="c93a7c7b52c97bf0962eebd109f5c679236979ad" translate="yes" xml:space="preserve">
          <source>The auto-increment operator has a little extra builtin magic to it. If you increment a variable that is numeric, or that has ever been used in a numeric context, you get a normal increment. If, however, the variable has been used in only string contexts since it was set, and has a value that is not the empty string and matches the pattern &lt;code&gt;/^[a-zA-Z]*[0-9]*\z/&lt;/code&gt; , the increment is done as a string, preserving each character within its range, with carry:</source>
          <target state="translated">자동 증가 연산자에는 약간의 추가 마법이 있습니다. 숫자이거나 숫자 컨텍스트에서 사용 된 변수를 증가 시키면 정상적인 증가를 얻습니다. 그러나 변수가 설정된 이후 문자열 컨텍스트에서만 사용되었으며 값이 비어있는 문자열이 아니며 &lt;code&gt;/^[a-zA-Z]*[0-9]*\z/&lt;/code&gt; 패턴과 일치하는 경우 / , 증가는 문자열로 수행되며, 각 문자를 해당 범위 내에서 캐리로 유지합니다.</target>
        </trans-unit>
        <trans-unit id="2fa846bc3447cd43bb267eb92f634f66df9d2ff7" translate="yes" xml:space="preserve">
          <source>The autodie pragma &lt;b&gt;&amp;lt;does not check calls to &lt;code&gt;&lt;a href=&quot;functions/print&quot;&gt;print&lt;/a&gt;&lt;/code&gt;&lt;/b&gt;&amp;gt;.</source>
          <target state="translated">autodie pragma는 &lt;b&gt;&amp;lt; &lt;code&gt;&lt;a href=&quot;functions/print&quot;&gt;print&lt;/a&gt;&lt;/code&gt; &lt;/b&gt;&lt;b&gt; 호출을 확인하지 않습니다&lt;/b&gt; &amp;gt;.</target>
        </trans-unit>
        <trans-unit id="6a915a44546183301bc1ab2da7f5d31390cf86d3" translate="yes" xml:space="preserve">
          <source>The autodocumentation system was originally added to the Perl core by Benjamin Stuhl. Documentation is by whoever was kind enough to document their functions.</source>
          <target state="translated">자동 문서 시스템은 원래 Benjamin Stuhl에 의해 Perl 코어에 추가되었습니다. 문서는 자신의 기능을 문서화하기에 충분히 친절한 사람입니다.</target>
        </trans-unit>
        <trans-unit id="3c574214b5c14cf6b803beb9ac59c1988cd63384" translate="yes" xml:space="preserve">
          <source>The automatic and manual perl installation leave precompiled paths inside perl executables. While these paths are overwriteable (see &lt;a href=&quot;#PERLLIB_PREFIX&quot;&gt;PERLLIB_PREFIX&lt;/a&gt;, &lt;a href=&quot;#PERL_SH_DIR&quot;&gt;PERL_SH_DIR&lt;/a&gt;), some people may prefer binary editing of paths inside the executables/DLLs.</source>
          <target state="translated">자동 및 수동 perl 설치는 사전 컴파일 된 경로를 perl 실행 파일 내에 둡니다. 이러한 경로는 덮어 쓸 수 있지만 ( &lt;a href=&quot;#PERLLIB_PREFIX&quot;&gt;PERLLIB_PREFIX&lt;/a&gt; , &lt;a href=&quot;#PERL_SH_DIR&quot;&gt;PERL_SH_DIR&lt;/a&gt; 참조 ) 일부 사람들은 실행 파일 / DLL 내의 경로를 이진 편집하는 것을 선호 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ff6dd9cd9205a8a816f4c19d3aaf08bb26c3152c" translate="yes" xml:space="preserve">
          <source>The available binary operators are:</source>
          <target state="translated">사용 가능한 이진 연산자는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="68bb2a0daa0abd0313002b533bf42c71219aad2d" translate="yes" xml:space="preserve">
          <source>The available diagnostics are:</source>
          <target state="translated">사용 가능한 진단은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="d8dc3fd07c3386d7e5ad61722c90a54b40f250e5" translate="yes" xml:space="preserve">
          <source>The available fields in the structure are:</source>
          <target state="translated">구조에서 사용 가능한 필드는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="191f1bb9111a3757ed2ccf45e0e506ae45f1cb2d" translate="yes" xml:space="preserve">
          <source>The available locales depend on your operating system; try whether &lt;code&gt;locale -a&lt;/code&gt; shows them or man pages for &quot;locale&quot; or &quot;nlsinfo&quot; or the direct approach &lt;code&gt;ls /usr/lib/nls/loc&lt;/code&gt; or &lt;code&gt;ls /usr/lib/nls&lt;/code&gt; or &lt;code&gt;ls /usr/lib/locale&lt;/code&gt; . Not all the locales that your vendor supports are necessarily installed: please consult your operating system's documentation and possibly your local system administration. The locale names are probably something like &lt;code&gt;xx_XX.(ISO)?8859-N&lt;/code&gt; or &lt;code&gt;xx_XX.(ISO)?8859N&lt;/code&gt;, for example &lt;code&gt;fr_CH.ISO8859-1&lt;/code&gt; is the Swiss (CH) variant of French (fr), ISO Latin (8859) 1 (-1) which is the Western European character set.</source>
          <target state="translated">사용 가능한 로케일은 운영 체제에 따라 다릅니다. &lt;code&gt;locale -a&lt;/code&gt; 가 &quot;locale&quot;또는 &quot;nlsinfo&quot;또는 &lt;code&gt;ls /usr/lib/nls/loc&lt;/code&gt; 또는 &lt;code&gt;ls /usr/lib/nls&lt;/code&gt; 또는 &lt;code&gt;ls /usr/lib/locale&lt;/code&gt; 대한 매뉴얼 페이지를 표시 하는지 또는 시도 하십시오 . 공급 업체가 지원하는 모든 로캘이 반드시 설치되어있는 것은 아닙니다. 운영 체제 설명서 및 가능하면 로컬 시스템 관리를 참조하십시오. 로케일 이름은 아마도 &lt;code&gt;xx_XX.(ISO)?8859-N&lt;/code&gt; 또는 &lt;code&gt;xx_XX.(ISO)?8859N&lt;/code&gt; 과 같습니다 (예 : &lt;code&gt;fr_CH.ISO8859-1&lt;/code&gt; 은 프랑스어 (fr), ISO Latin (8859)의 스위스 (CH) 변형 임) 서유럽 문자 세트 인 1 (-1).</target>
        </trans-unit>
        <trans-unit id="7b104fea0c3b585be7abd9fdcae3632fd9df0849" translate="yes" xml:space="preserve">
          <source>The available mechanisms are:</source>
          <target state="translated">사용 가능한 메커니즘은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="54ed46c150718473d8504c434e30cd577b337e90" translate="yes" xml:space="preserve">
          <source>The available options are:</source>
          <target state="translated">사용 가능한 옵션은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="456a0ea0217776b650b3498424ef7ee39f3e2d1e" translate="yes" xml:space="preserve">
          <source>The backend for the &lt;code&gt;SvPVbytex_force&lt;/code&gt; macro. Always use the macro instead.</source>
          <target state="translated">&lt;code&gt;SvPVbytex_force&lt;/code&gt; 매크로 의 백엔드 항상 매크로를 대신 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="6595fe0b01dc35e2c9393282a00929c691d16bd4" translate="yes" xml:space="preserve">
          <source>The backend for the &lt;code&gt;SvPVutf8x_force&lt;/code&gt; macro. Always use the macro instead.</source>
          <target state="translated">&lt;code&gt;SvPVutf8x_force&lt;/code&gt; 매크로 의 백엔드 항상 매크로를 대신 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="77f66884acce6cf3a3939cb28b0a48cb55b42d47" translate="yes" xml:space="preserve">
          <source>The backslash</source>
          <target state="translated">백 슬래시</target>
        </trans-unit>
        <trans-unit id="d905ecd546099386ec13c3559da83e50955fb3c5" translate="yes" xml:space="preserve">
          <source>The backslash character &lt;code&gt;'\'&lt;/code&gt; is a metacharacter itself and needs to be backslashed:</source>
          <target state="translated">백 슬래시 문자 &lt;code&gt;'\'&lt;/code&gt; 는 메타 문자 자체이며 백 슬래시 여야합니다.</target>
        </trans-unit>
        <trans-unit id="3991be487f455d5a6205c52bea36150b4cf4f97a" translate="yes" xml:space="preserve">
          <source>The backslash sequence can mean either ASCII- or Full-range Unicode, depending on various factors as described in &lt;a href=&quot;perlre#Which-character-set-modifier-is-in-effect%3f&quot;&gt;Which character set modifier is in effect? in perlre&lt;/a&gt;.</source>
          <target state="translated">백 슬래시 시퀀스는 &lt;a href=&quot;perlre#Which-character-set-modifier-is-in-effect%3f&quot;&gt;어떤 문자 세트 수정자가 적용됩니까?에&lt;/a&gt; 설명 된 다양한 요인에 따라 ASCII 또는 전체 범위 유니 코드를 의미 할 수 있습니다 . perlre에서 .</target>
        </trans-unit>
        <trans-unit id="f6d38a5acb41572fd3f6bf7b206aa3e31dca4b0b" translate="yes" xml:space="preserve">
          <source>The backtick operator does no translation of the return value, unlike &lt;b&gt;csh&lt;/b&gt;.</source>
          <target state="translated">backtick 연산자는 &lt;b&gt;csh&lt;/b&gt; 와 달리 반환 값을 변환하지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="ee45daa9d8b6e8559dda882c9eead013ce496d22" translate="yes" xml:space="preserve">
          <source>The backtick operator does variable interpolation without regard to the presence of single quotes in the command.</source>
          <target state="translated">백틱 연산자는 명령에 작은 따옴표가 있는지 여부에 관계없이 변수 보간을 수행합니다.</target>
        </trans-unit>
        <trans-unit id="8cd2b3706bb4ede8bd356d31a0615f4df40a7834" translate="yes" xml:space="preserve">
          <source>The backtrace returns the stack trace of the C call frames, with the symbol names (function names), the object names (like &quot;perl&quot;), and if it can, also the source code locations (&lt;a href=&quot;file:line&quot;&gt;file:line&lt;/a&gt;).</source>
          <target state="translated">역 추적은 심볼 이름 (함수 이름), 객체 이름 (예 : &quot;perl&quot;) 및 가능한 경우 소스 코드 위치 ( &lt;a href=&quot;file:line&quot;&gt;file : line&lt;/a&gt; ) 와 함께 C 호출 프레임의 스택 추적을 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="8bed32736e1b2815ccd999741f9407d4d43d0e8b" translate="yes" xml:space="preserve">
          <source>The base class implementation of the &lt;b&gt;interior_sequence()&lt;/b&gt; method simply returns the raw text of the interior sequence (as it occurred in the input) to the caller.</source>
          <target state="translated">&lt;b&gt;interior_sequence ()&lt;/b&gt; 메소드 의 기본 클래스 구현은 단순히 입력에서 발생한 내부 시퀀스의 원시 텍스트를 호출자에게 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="c9ddcb47643cb89116a0a922b50075bea2f25a0e" translate="yes" xml:space="preserve">
          <source>The base class implementation of this method returns the given text.</source>
          <target state="translated">이 메소드의 기본 클래스 구현은 주어진 텍스트를 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="3f5a827dc5c599719e7ecb28e524afa3505acc67" translate="yes" xml:space="preserve">
          <source>The base class implementation of this method simply prints the text block as it occurred in the input stream).</source>
          <target state="translated">이 메소드의 기본 클래스 구현은 입력 스트림에서 발생한대로 텍스트 블록을 인쇄합니다.</target>
        </trans-unit>
        <trans-unit id="df7aaeb92a14b1f8eaf4aa28b1e80496ba8b43fa" translate="yes" xml:space="preserve">
          <source>The base class implementation of this method simply prints the textblock (unmodified) to the output filehandle.</source>
          <target state="translated">이 메소드의 기본 클래스 구현은 단순히 텍스트 블록 (수정되지 않은)을 출력 파일 핸들에 인쇄합니다.</target>
        </trans-unit>
        <trans-unit id="303eecbc86fd9c0b4febc57eac0a317dd40331d4" translate="yes" xml:space="preserve">
          <source>The base class implementation of this method simply treats the raw POD command as normal block of paragraph text (invoking the &lt;b&gt;textblock()&lt;/b&gt; method with the command paragraph).</source>
          <target state="translated">이 메소드의 기본 클래스 구현은 단순히 원시 POD 명령을 일반 단락 텍스트 블록으로 처리합니다 ( 명령 단락으로 &lt;b&gt;textblock ()&lt;/b&gt; 메소드 호출 ).</target>
        </trans-unit>
        <trans-unit id="b322d5503c2a18a0550bcf3559879c8738ef1a3f" translate="yes" xml:space="preserve">
          <source>The base class' &lt;code&gt;&lt;a href=&quot;functions/import&quot;&gt;import&lt;/a&gt;&lt;/code&gt; method is &lt;b&gt;not&lt;/b&gt; called.</source>
          <target state="translated">기본 클래스의 &lt;code&gt;&lt;a href=&quot;functions/import&quot;&gt;import&lt;/a&gt;&lt;/code&gt; 메소드가 호출 &lt;b&gt;되지 않습니다&lt;/b&gt; .</target>
        </trans-unit>
        <trans-unit id="869b6928181db8fd7439173a04a65a2b691f1a82" translate="yes" xml:space="preserve">
          <source>The base function, e.g., &lt;code&gt;isALPHA()&lt;/code&gt; , takes an octet (either a &lt;code&gt;char&lt;/code&gt; or a &lt;code&gt;U8&lt;/code&gt; ) as input and returns a boolean as to whether or not the character represented by that octet is (or on non-ASCII platforms, corresponds to) an ASCII character in the named class based on platform, Unicode, and Perl rules. If the input is a number that doesn't fit in an octet, FALSE is returned.</source>
          <target state="translated">기본 함수 (예 : &lt;code&gt;isALPHA()&lt;/code&gt; 는 8 진수 ( &lt;code&gt;char&lt;/code&gt; 또는 &lt;code&gt;U8&lt;/code&gt; )를 입력으로 사용하고 해당 8 진수로 표시되는 문자가 (또는 비 ASCII 플랫폼에서 해당하는) 문자인지 여부에 대한 부울을 리턴합니다. 플랫폼, 유니 코드 및 Perl 규칙을 기반으로하는 명명 된 클래스의 ASCII 문자 입력이 8 진수에 맞지 않는 숫자이면 FALSE가 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="b4a446b2fbdd7a1f128f546637cc4e95f828763e" translate="yes" xml:space="preserve">
          <source>The base port of Perl to Symbian only implements the basic POSIX-like functionality; it does not implement any further Symbian or Series 60, Series 80, or UIQ bindings for Perl.</source>
          <target state="translated">Perl에서 Symbian으로의 기본 포트는 기본 POSIX와 유사한 기능 만 구현합니다. Perl에 대한 추가 Symbian 또는 Series 60, Series 80 또는 UIQ 바인딩을 구현하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="7b0c0715021b7093caa628303290fd7be9406317" translate="yes" xml:space="preserve">
          <source>The base revision level of this package, from the</source>
          <target state="translated">이 패키지의 기본 개정 레벨</target>
        </trans-unit>
        <trans-unit id="1f81368d64cf4514ffa26dd1724286707ec25460" translate="yes" xml:space="preserve">
          <source>The base should be zero or between 2 and 36, inclusive. When the base is zero or omitted &lt;code&gt;strtol&lt;/code&gt; will use the string itself to determine the base: a leading &quot;0x&quot; or &quot;0X&quot; means hexadecimal; a leading &quot;0&quot; means octal; any other leading characters mean decimal. Thus, &quot;1234&quot; is parsed as a decimal number, &quot;01234&quot; as an octal number, and &quot;0x1234&quot; as a hexadecimal number.</source>
          <target state="translated">밑은 0 또는 2와 36 사이 여야합니다. 밑이 0이거나 생략되면 &lt;code&gt;strtol&lt;/code&gt; 은 문자열 자체를 사용하여 밑을 결정합니다. 선행 &quot;0x&quot;또는 &quot;0X&quot;는 16 진수를 의미합니다. 선행 &quot;0&quot;은 8 진을 의미하고; 다른 선행 문자는 십진수를 의미합니다. 따라서 &quot;1234&quot;는 10 진수로, &quot;01234&quot;는 8 진수로, &quot;0x1234&quot;는 16 진수로 파싱됩니다.</target>
        </trans-unit>
        <trans-unit id="d0bf4e2fa899dc153c411be4c5898369064784f4" translate="yes" xml:space="preserve">
          <source>The base structure of a regop is defined in</source>
          <target state="translated">regop의 기본 구조는</target>
        </trans-unit>
        <trans-unit id="29446f6b360bcce933609abf092817cd60b4c651" translate="yes" xml:space="preserve">
          <source>The base64 encoded string returned is not padded to be a multiple of 4 bytes long. If you want interoperability with other base64 encoded md5 digests you might want to append the string &quot;==&quot; to the result.</source>
          <target state="translated">리턴 된 base64 인코딩 문자열은 4 바이트의 배수로 채워지지 않습니다. 다른 base64로 인코딩 된 md5 다이제스트와 상호 운용성을 원할 경우 문자열 &quot;==&quot;를 결과에 추가 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d8ffce64bc52685123cf17779b3bc30ab4b06b36" translate="yes" xml:space="preserve">
          <source>The basic &lt;code&gt;quant&lt;/code&gt; method that Locale::Maketext provides should be good for many languages. For some languages, it might be useful to modify it (or its constituent &lt;code&gt;numerate&lt;/code&gt; method) to take a plural form in the two-argument call to &lt;code&gt;quant&lt;/code&gt; (as in &quot;[quant,_1,files]&quot;) if it's all-around easier to infer the singular form from the plural, than to infer the plural form from the singular.</source>
          <target state="translated">Locale :: Maketext가 제공하는 기본 &lt;code&gt;quant&lt;/code&gt; 메소드는 많은 언어에 적합해야합니다. 일부 언어의 경우, 그것은 (또는 그 구성 수정 유용 할 수 있습니다 &lt;code&gt;numerate&lt;/code&gt; 에 2 개의 인수를 호출의 복수 형태 취할 방법) &lt;code&gt;quant&lt;/code&gt; (같이 &quot;[퀀트, _1 파일]&quot;)은 모든 주위의 경우 쉽게 단수의 복수 형태를 유추하는 것보다 복수의 단수 형태를 유추하는 것.</target>
        </trans-unit>
        <trans-unit id="bd8f1357516762bbb931d125e3d2a8b11599ee5f" translate="yes" xml:space="preserve">
          <source>The basic IPC facilities of Perl are built out of the good old Unix signals, named pipes, pipe opens, the Berkeley socket routines, and SysV IPC calls. Each is used in slightly different situations.</source>
          <target state="translated">Perl의 기본 IPC 기능은 오래된 유닉스 신호, 명명 된 파이프, 파이프 개구부, 버클리 소켓 루틴 및 SysV IPC 호출로 구축됩니다. 각각 약간 다른 상황에서 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="9eaaba65a1dac8dd5fd38c2dd581e65245159383" translate="yes" xml:space="preserve">
          <source>The basic building block of Perl strings has always been a &quot;character&quot;. The changes basically come down to that the implementation no longer thinks that a character is always just a single byte.</source>
          <target state="translated">Perl 문자열의 기본 구성 요소는 항상 &quot;문자&quot;였습니다. 변경 사항은 기본적으로 구현이 더 이상 문자가 항상 단일 바이트라고 생각하지 않는다는 것입니다.</target>
        </trans-unit>
        <trans-unit id="bf944598ad68a6908fe4ecd014a8a61a7b06d00e" translate="yes" xml:space="preserve">
          <source>The basic data structure is a PerlIOl:</source>
          <target state="translated">기본 데이터 구조는 PerlIOl입니다.</target>
        </trans-unit>
        <trans-unit id="b5815b577f436fdec50339dbc9340f9c6b027e08" translate="yes" xml:space="preserve">
          <source>The basic design of Locale::Maketext is object-oriented, and Locale::Maketext is an abstract base class, from which you derive a &quot;project class&quot;. The project class (with a name like &quot;TkBocciBall::Localize&quot;, which you then use in your module) is in turn the base class for all the &quot;language classes&quot; for your project (with names &quot;TkBocciBall::Localize::it&quot;, &quot;TkBocciBall::Localize::en&quot;, &quot;TkBocciBall::Localize::fr&quot;, etc.).</source>
          <target state="translated">Locale :: Maketext의 기본 디자인은 객체 지향적이며 Locale :: Maketext는 &quot;프로젝트 클래스&quot;를 파생시키는 추상 기본 클래스입니다. 모듈에서 사용하는 &quot;TkBocciBall :: Localize&quot;와 같은 이름을 가진 프로젝트 클래스는 프로젝트의 모든 &quot;언어 클래스&quot;의 기본 클래스입니다 (이름이 &quot;TkBocciBall :: Localize :: it&quot;). &quot;,&quot;TkBocciBall :: Localize :: en &quot;,&quot;TkBocciBall :: Localize :: fr &quot;등).</target>
        </trans-unit>
        <trans-unit id="7d3d2515e50dae3561d665210b7c755d11c489ee" translate="yes" xml:space="preserve">
          <source>The basic design of Math::BigInt allows simple subclasses with very little work, as long as a few simple rules are followed:</source>
          <target state="translated">Math :: BigInt의 기본 설계는 몇 가지 간단한 규칙을 따르는 한 적은 작업으로 간단한 서브 클래스를 허용합니다.</target>
        </trans-unit>
        <trans-unit id="1933c32469836b92b1e6ed87797ae53de2e4a98a" translate="yes" xml:space="preserve">
          <source>The basic files in a module look something like this.</source>
          <target state="translated">모듈의 기본 파일은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="341f2c68b6960d075517d469051ae07bb1f926b7" translate="yes" xml:space="preserve">
          <source>The basic idea of inserting, changing, or deleting a line from a text file involves reading and printing the file to the point you want to make the change, making the change, then reading and printing the rest of the file. Perl doesn't provide random access to lines (especially since the record input separator, &lt;code&gt;$/&lt;/code&gt; , is mutable), although modules such as &lt;a href=&quot;tie/file&quot;&gt;Tie::File&lt;/a&gt; can fake it.</source>
          <target state="translated">텍스트 파일에서 행을 삽입, 변경 또는 삭제하는 기본 개념은 파일을 변경하려는 지점까지 읽고 인쇄하고 변경 한 다음 나머지 파일을 읽고 인쇄하는 것입니다. Perl은 &lt;a href=&quot;tie/file&quot;&gt;Tie :: File&lt;/a&gt; 과 같은 모듈 이 위조 할 수 있지만 행에 대한 임의 액세스를 제공하지 않습니다 (특히 레코드 입력 구분 기호 &lt;code&gt;$/&lt;/code&gt; 가 변경 가능 하므로).</target>
        </trans-unit>
        <trans-unit id="99456abf05b5371483583dbfe86305dc116a350f" translate="yes" xml:space="preserve">
          <source>The basic purpose of this module is to print out either &quot;ok #&quot; or &quot;not ok #&quot; depending on if a given test succeeded or failed. Everything else is just gravy.</source>
          <target state="translated">이 모듈의 기본 목적은 주어진 테스트의 성공 또는 실패 여부에 따라 &quot;ok #&quot;또는 &quot;not ok #&quot;를 인쇄하는 것입니다. 다른 모든 것은 단지 국물입니다.</target>
        </trans-unit>
        <trans-unit id="64db8342329369b417d189ab1b4fe97232b396bf" translate="yes" xml:space="preserve">
          <source>The basic structure of this routine is to try to find the start- and/or end-points of where the pattern could match, and to ensure that the string is long enough to match the pattern. It tries to use more efficient methods over less efficient methods and may involve considerable cross-checking of constraints to find the place in the string that matches. For instance it may try to determine that a given fixed string must be not only present but a certain number of chars before the end of the string, or whatever.</source>
          <target state="translated">이 루틴의 기본 구조는 패턴이 일치 할 수있는 시작점 및 / 또는 끝점을 찾고 문자열이 패턴과 일치하기에 충분히 길도록하는 것입니다. 덜 효율적인 방법보다 더 효율적인 방법을 사용하려고하며 문자열에서 일치하는 위치를 찾기 위해 제약 조건을 상당히 교차 검사해야 할 수 있습니다. 예를 들어 주어진 고정 문자열이 문자열의 끝 이전에 존재하거나 특정 수의 문자 또는 기타로 존재해야한다고 결정하려고 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="80dbc79bfdbd83bc8576245228c2b94ef265f584" translate="yes" xml:space="preserve">
          <source>The basic unit of Perl testing is the ok. For each thing you want to test your program will print out an &quot;ok&quot; or &quot;not ok&quot; to indicate pass or fail. You do this with the &lt;code&gt;ok()&lt;/code&gt; function (see below).</source>
          <target state="translated">Perl 테스트의 기본 단위는 괜찮습니다. 테스트하려는 각 항목에 대해 &quot;ok&quot;또는 &quot;not ok&quot;를 인쇄하여 합격 또는 불합격을 나타냅니다. &lt;code&gt;ok()&lt;/code&gt; 함수를 사용 하여이 작업을 수행 합니다 (아래 참조).</target>
        </trans-unit>
        <trans-unit id="9d2230b748e4308cffef19ddef65b44d6210c473" translate="yes" xml:space="preserve">
          <source>The behavior implied by the &lt;b&gt;use warnings&lt;/b&gt; pragma is not mandatory.</source>
          <target state="translated">&lt;b&gt;사용 경고&lt;/b&gt; pragma에 의해 암시 된 동작 은 필수가 아닙니다.</target>
        </trans-unit>
        <trans-unit id="b5f143aadeaa7a8e64e344e87d8748a02f3060a4" translate="yes" xml:space="preserve">
          <source>The behavior is undefined if LENGTH is greater than the length of the file.</source>
          <target state="translated">LENGTH가 파일 길이보다 큰 경우 동작이 정의되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="2f1c51d0082c9a007ed014e64f75cf7ba3d7eb5f" translate="yes" xml:space="preserve">
          <source>The behavior of &lt;code&gt;&lt;a href=&quot;fileno&quot;&gt;fileno&lt;/a&gt;&lt;/code&gt; on a directory handle depends on the operating system. On a system with dirfd(3) or similar, &lt;code&gt;&lt;a href=&quot;fileno&quot;&gt;fileno&lt;/a&gt;&lt;/code&gt; on a directory handle returns the underlying file descriptor associated with the handle; on systems with no such support, it returns the undefined value, and sets &lt;code&gt;$!&lt;/code&gt; (errno).</source>
          <target state="translated">디렉토리 핸들 에서 &lt;code&gt;&lt;a href=&quot;fileno&quot;&gt;fileno&lt;/a&gt;&lt;/code&gt; 의 동작은 운영 체제에 따라 다릅니다. dirfd (3) 또는 이와 유사한 시스템 에서 디렉토리 핸들의 &lt;code&gt;&lt;a href=&quot;fileno&quot;&gt;fileno&lt;/a&gt;&lt;/code&gt; 는 핸들과 연관된 기본 파일 디스크립터를 리턴합니다. 이러한 지원이없는 시스템에서는 정의되지 않은 값을 반환하고 &lt;code&gt;$!&lt;/code&gt; (errno).</target>
        </trans-unit>
        <trans-unit id="ac7e84891cea0201bfbd9008ae17bfca2f62f2a2" translate="yes" xml:space="preserve">
          <source>The behavior of &lt;code&gt;&lt;a href=&quot;functions/__sub__&quot;&gt;__SUB__&lt;/a&gt;&lt;/code&gt; within a regex code block (such as &lt;code&gt;/(?{...})/&lt;/code&gt; ) is subject to change.</source>
          <target state="translated">정규식 코드 블록 내에서 &lt;code&gt;&lt;a href=&quot;functions/__sub__&quot;&gt;__SUB__&lt;/a&gt;&lt;/code&gt; 의 동작 (예 : &lt;code&gt;/(?{...})/&lt;/code&gt; )은 변경 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="57f854aca9536e1cea9a0904019b31bc3e9f0356" translate="yes" xml:space="preserve">
          <source>The behavior of &lt;code&gt;&lt;a href=&quot;functions/fileno&quot;&gt;fileno&lt;/a&gt;&lt;/code&gt; on a directory handle depends on the operating system. On a system with dirfd(3) or similar, &lt;code&gt;&lt;a href=&quot;functions/fileno&quot;&gt;fileno&lt;/a&gt;&lt;/code&gt; on a directory handle returns the underlying file descriptor associated with the handle; on systems with no such support, it returns the undefined value, and sets &lt;code&gt;$!&lt;/code&gt; (errno).</source>
          <target state="translated">디렉토리 핸들 에서 &lt;code&gt;&lt;a href=&quot;functions/fileno&quot;&gt;fileno&lt;/a&gt;&lt;/code&gt; 의 동작은 운영 체제에 따라 다릅니다. dirfd (3) 또는 이와 유사한 시스템 에서 디렉토리 핸들의 &lt;code&gt;&lt;a href=&quot;functions/fileno&quot;&gt;fileno&lt;/a&gt;&lt;/code&gt; 는 핸들과 연관된 기본 파일 디스크립터를 리턴합니다. 이러한 지원이없는 시스템에서는 정의되지 않은 값을 반환하고 &lt;code&gt;$!&lt;/code&gt; (errno).</target>
        </trans-unit>
        <trans-unit id="00c21c5f299927d5b3bf2172e0cf7aff5e3373e8" translate="yes" xml:space="preserve">
          <source>The behavior of PREFIX is complicated and depends closely on how your Perl is configured. The resulting installation locations will vary from machine to machine and even different installations of Perl on the same machine. Because of this, its difficult to document where prefix will place your modules.</source>
          <target state="translated">PREFIX의 동작은 복잡하며 Perl의 구성 방식에 밀접하게 의존합니다. 결과 설치 위치는 기계마다 다르며 심지어 동일한 기계에서 다른 Perl 설치도 있습니다. 이 때문에 접두사가 모듈을 배치 할 위치를 문서화하기가 어렵습니다.</target>
        </trans-unit>
        <trans-unit id="93dc5bd5efb782736e0942603b0c8fa1c754b397" translate="yes" xml:space="preserve">
          <source>The behavior of a smartmatch depends on what type of things its arguments are, as determined by the following table. The first row of the table whose types apply determines the smartmatch behavior. Because what actually happens is mostly determined by the type of the second operand, the table is sorted on the right operand instead of on the left.</source>
          <target state="translated">스마트 매치의 동작은 다음 표에 따라 결정되는 인수 유형에 따라 다릅니다. 유형이 적용되는 테이블의 첫 번째 행이 스마트 매치 동작을 결정합니다. 실제로 발생하는 일은 대부분 두 번째 피연산자의 유형에 따라 결정되므로 테이블은 왼쪽이 아닌 오른쪽 피연산자에 따라 정렬됩니다.</target>
        </trans-unit>
        <trans-unit id="f414c994d5bce7014330ec5990bba640279929f3" translate="yes" xml:space="preserve">
          <source>The behavior of binary arithmetic operators depends on whether they're used on numbers or strings. The operators treat a string as a series of bits and work with that (the string &lt;code&gt;&quot;3&quot;&lt;/code&gt; is the bit pattern &lt;code&gt;00110011&lt;/code&gt; ). The operators work with the binary form of a number (the number &lt;code&gt;3&lt;/code&gt; is treated as the bit pattern &lt;code&gt;00000011&lt;/code&gt; ).</source>
          <target state="translated">이진 산술 연산자의 동작은 숫자 또는 문자열에 사용되는지 여부에 따라 다릅니다. 연산자는 문자열을 일련의 비트로 취급하고이를 사용합니다 (문자열 &lt;code&gt;&quot;3&quot;&lt;/code&gt; 은 비트 패턴 &lt;code&gt;00110011&lt;/code&gt; ). 연산자는 숫자의 이진 형식으로 작업합니다 (숫자 &lt;code&gt;3&lt;/code&gt; 은 비트 패턴 &lt;code&gt;00000011&lt;/code&gt; 로 처리됨 ).</target>
        </trans-unit>
        <trans-unit id="31eed332c2e58a5c0964723f7df67ca11212685a" translate="yes" xml:space="preserve">
          <source>The behavior of kill when a</source>
          <target state="translated">때 살인의 행동</target>
        </trans-unit>
        <trans-unit id="d59b4319820011355ea137761a33247562041027" translate="yes" xml:space="preserve">
          <source>The behavior of local() on non-existent members of composite types is subject to change in future.</source>
          <target state="translated">존재하지 않는 복합 유형의 멤버에 대한 local ()의 동작은 나중에 변경 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="7ad390bfcc2f23a71fab54461bd3359a98aa3f6d" translate="yes" xml:space="preserve">
          <source>The behavior of these operators is problematic (and subject to change) if either or both of the strings are encoded in UTF-8 (see &lt;a href=&quot;perlunicode#Byte-and-Character-Semantics&quot;&gt;Byte and Character Semantics in perlunicode&lt;/a&gt;.</source>
          <target state="translated">이 연산자의 동작은 문자열 중 하나 또는 둘 다 UTF-8로 인코딩 된 경우 문제가되고 변경 될 수 있습니다 ( &lt;a href=&quot;perlunicode#Byte-and-Character-Semantics&quot;&gt;perlunicode의 바이트 및 문자 의미&lt;/a&gt; 참조) .</target>
        </trans-unit>
        <trans-unit id="a64f313f128b7624f16c0e92b9e3e3d919ea21bc" translate="yes" xml:space="preserve">
          <source>The behavior of tied arrays is not precisely the same as for regular arrays. For example:</source>
          <target state="translated">연결된 배열의 동작은 일반 배열과 정확히 동일하지 않습니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="e661f036702b62721315aa1d02abc1020897293c" translate="yes" xml:space="preserve">
          <source>The behaviour of &lt;code&gt;%-&lt;/code&gt; is implemented via the &lt;a href=&quot;tie/hash/namedcapture&quot;&gt;Tie::Hash::NamedCapture&lt;/a&gt; module.</source>
          <target state="translated">&lt;code&gt;%-&lt;/code&gt; 의 동작은 &lt;a href=&quot;tie/hash/namedcapture&quot;&gt;Tie :: Hash :: NamedCapture&lt;/a&gt; 모듈을 통해 구현됩니다 .</target>
        </trans-unit>
        <trans-unit id="9f2f442d7e61435532ac3ebe398b46e4cb8b23b2" translate="yes" xml:space="preserve">
          <source>The behaviour of &lt;code&gt;&lt;a href=&quot;__sub__&quot;&gt;__SUB__&lt;/a&gt;&lt;/code&gt; within a regex code block (such as &lt;code&gt;/(?{...})/&lt;/code&gt; ) is subject to change.</source>
          <target state="translated">정규식 코드 블록 내에서 &lt;code&gt;&lt;a href=&quot;__sub__&quot;&gt;__SUB__&lt;/a&gt;&lt;/code&gt; 의 동작 (예 : &lt;code&gt;/(?{...})/&lt;/code&gt; )은 변경 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ecf97494e2dabd3d3c4d6cda259bfc77c61ec233" translate="yes" xml:space="preserve">
          <source>The behaviour of &lt;code&gt;&lt;a href=&quot;functions/__sub__&quot;&gt;__SUB__&lt;/a&gt;&lt;/code&gt; within a regex code block (such as &lt;code&gt;/(?{...})/&lt;/code&gt; ) is subject to change.</source>
          <target state="translated">정규식 코드 블록 내에서 &lt;code&gt;&lt;a href=&quot;functions/__sub__&quot;&gt;__SUB__&lt;/a&gt;&lt;/code&gt; 의 동작 (예 : &lt;code&gt;/(?{...})/&lt;/code&gt; )은 변경 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="893a97392f7263bab5a8304f6d49e881ca91ba83" translate="yes" xml:space="preserve">
          <source>The behaviour of File::Fetch can be altered by changing the following global variables:</source>
          <target state="translated">File :: Fetch의 동작은 다음 전역 변수를 변경하여 변경할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="9225f0f55c56aed5c676f19da54d01c0121ae5ab" translate="yes" xml:space="preserve">
          <source>The behaviour of IPC::Cmd can be altered by changing the following global variables:</source>
          <target state="translated">IPC :: Cmd의 동작은 다음 전역 변수를 변경하여 변경할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d64ba516b01f1b6dc31324edef30defa2d23432c" translate="yes" xml:space="preserve">
          <source>The behaviour of Module::Load::Conditional can be altered by changing the following global variables:</source>
          <target state="translated">Module :: Load :: Conditional의 동작은 다음 전역 변수를 변경하여 변경할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="47460fd55663b585106f39954f79fa9625db07e7" translate="yes" xml:space="preserve">
          <source>The behaviour of Params::Check can be altered by changing the following global variables:</source>
          <target state="translated">Params :: Check의 동작은 다음 전역 변수를 변경하여 변경할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="deb69a58f590c98de917558022e0254d1d774946" translate="yes" xml:space="preserve">
          <source>The behaviour of the function depends on the arguments:</source>
          <target state="translated">함수의 동작은 인수에 따라 다릅니다.</target>
        </trans-unit>
        <trans-unit id="6ec80595e1c021e2b98071cdf1e5337bff9c960f" translate="yes" xml:space="preserve">
          <source>The behaviour of this option is dependent on the type of &lt;code&gt;$output&lt;/code&gt; .</source>
          <target state="translated">이 옵션의 동작은 &lt;code&gt;$output&lt;/code&gt; 유형에 따라 다릅니다 .</target>
        </trans-unit>
        <trans-unit id="db32480c737ba8d1007a7ce0c4ddf37612954128" translate="yes" xml:space="preserve">
          <source>The behaviour of this option is dependent on the type of output data stream.</source>
          <target state="translated">이 옵션의 동작은 출력 데이터 스트림 유형에 따라 다릅니다.</target>
        </trans-unit>
        <trans-unit id="ae8ebb83ae7fe5dc9eabc5af8c2815aedcfc7b2d" translate="yes" xml:space="preserve">
          <source>The belief that &amp;ldquo;small is beautiful&amp;rdquo;. Paradoxically, if you say something in a small language, it turns out big, and if you say it in a big language, it turns out small. Go figure.</source>
          <target state="translated">&quot;작은 것이 아름답다&quot;는 믿음. 역설적으로, 작은 언어로 무언가를 말하면 크게 나타나고, 큰 언어로 말하면 작게 나타납니다. 그림을 이동.</target>
        </trans-unit>
        <trans-unit id="5dcff025d12c2edfa9fc4a567fa29e7990ea6873" translate="yes" xml:space="preserve">
          <source>The benefit of using &lt;code&gt;-Mlib=/foo&lt;/code&gt; over &lt;code&gt;-I/foo&lt;/code&gt; , is that the former will automagically remove any duplicated directories, while the latter will not.</source>
          <target state="translated">&lt;code&gt;-I/foo&lt;/code&gt; &lt;code&gt;-Mlib=/foo&lt;/code&gt; 보다 -Mlib = / foo 를 사용 하면 전자가 복제 된 디렉토리를 자동으로 제거하지만 후자는 그렇지 않습니다.</target>
        </trans-unit>
        <trans-unit id="18900f73de54d7de200d866c09a29fdcc8cd53a3" translate="yes" xml:space="preserve">
          <source>The best algorithm depends on many things. On average, mergesort does fewer comparisons than quicksort, so it may be better when complicated comparison routines are used. Mergesort also takes advantage of pre-existing order, so it would be favored for using &lt;code&gt;&lt;a href=&quot;functions/sort&quot;&gt;sort()&lt;/a&gt;&lt;/code&gt; to merge several sorted arrays. On the other hand, quicksort is often faster for small arrays, and on arrays of a few distinct values, repeated many times. You can force the choice of algorithm with this pragma, but this feels heavy-handed, so the subpragmas beginning with a &lt;code&gt;_&lt;/code&gt; may not persist beyond Perl 5.8. The default algorithm is mergesort, which will be stable even if you do not explicitly demand it. But the stability of the default sort is a side-effect that could change in later versions. If stability is important, be sure to say so with a</source>
          <target state="translated">가장 좋은 알고리즘은 많은 것에 달려 있습니다. 평균적으로 mergesort는 quicksort보다 적은 수의 비교를 수행하므로 복잡한 비교 루틴을 사용할 때 더 좋습니다. Mergesort는 또한 기존 순서를 이용하므로 &lt;code&gt;&lt;a href=&quot;functions/sort&quot;&gt;sort()&lt;/a&gt;&lt;/code&gt; 를 사용하여 여러 정렬 된 배열을 병합하는 것이 좋습니다. 반면에, 퀵 정렬은 종종 작은 배열의 경우 더 빠르며 몇 가지 고유 한 값의 배열에서는 여러 번 반복됩니다. 이 pragma를 사용하여 알고리즘을 강제로 선택할 수 있지만,이 방법은 힘이 넘치므로 subpragma는 &lt;code&gt;_&lt;/code&gt; Perl 5.8 이상으로 지속되지 않을 수 있습니다. 기본 알고리즘은 mergesort이며, 명시 적으로 요구하지 않더라도 안정적입니다. 그러나 기본 정렬의 안정성은 이후 버전에서 변경 될 수있는 부작용입니다. 안정성이 중요하다면</target>
        </trans-unit>
        <trans-unit id="25c86820424aca2962f29e4f76c6234dbf83f89d" translate="yes" xml:space="preserve">
          <source>The best comments explain</source>
          <target state="translated">최고의 의견 설명</target>
        </trans-unit>
        <trans-unit id="97fb423abf47c78c911e5c1b325aae0069b921b4" translate="yes" xml:space="preserve">
          <source>The best way to avoid this oddity is to use this pragma RIGHT AFTER other modules are loaded. i.e.</source>
          <target state="translated">이 이상한 점을 피하는 가장 좋은 방법은 다른 모듈을로드 한 후에이 pragma를 사용하는 것입니다. 즉</target>
        </trans-unit>
        <trans-unit id="7c4c0bd8f72ca6e9c0f331a5d5955e9a813aecd9" translate="yes" xml:space="preserve">
          <source>The best way to do this is to come up with a better algorithm. This can often make a dramatic difference. Jon Bentley's book</source>
          <target state="translated">가장 좋은 방법은 더 나은 알고리즘을 만드는 것입니다. 이것은 종종 극적인 차이를 만들 수 있습니다. 존 벤틀리의 책</target>
        </trans-unit>
        <trans-unit id="98421bf65e01fd86f5f0e0be25fe15a961951223" translate="yes" xml:space="preserve">
          <source>The best way to know for sure, and pick up many helpful suggestions, is to ask someone who knows. Comp.lang.perl.misc is read by just about all the people who develop modules and it's the best place to ask.</source>
          <target state="translated">확실하게 알고 가장 유용한 제안을받는 가장 좋은 방법은 아는 사람에게 물어 보는 것입니다. Comp.lang.perl.misc는 모듈을 개발하는 모든 사람들에 의해 읽혀졌으며 요청하기 가장 좋은 곳입니다.</target>
        </trans-unit>
        <trans-unit id="f32d03eab0e341d80074007f2d5b494b8f3cdcfe" translate="yes" xml:space="preserve">
          <source>The best way to prevent this issue is to use waitpid(), as in the following example:</source>
          <target state="translated">이 문제를 방지하는 가장 좋은 방법은 다음 예제와 같이 waitpid ()를 사용하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="832c6230c64f67a2bd05effe72650dfa3f10cba9" translate="yes" xml:space="preserve">
          <source>The best way to unlock a file is to discard the object and untie the array. It is probably unsafe to unlock the file without also untying it, because if you do, changes may remain unwritten inside the object. That is why there is no shortcut for unlocking. If you really want to unlock the file prematurely, you know what to do; if you don't know what to do, then don't do it.</source>
          <target state="translated">파일 잠금을 해제하는 가장 좋은 방법은 객체를 버리고 배열을 해제하는 것입니다. 파일을 풀지 않고 파일을 잠금 해제하지 않으면 안전하지 않을 수 있습니다. 변경하면 객체 내부에서 변경 사항이 기록되지 않은 상태로 남아있을 수 있습니다. 이것이 바로 잠금 해제 단축키가없는 이유입니다. 파일을 조기에 잠금 해제하려면 어떻게해야하는지 알고 있습니다. 해야 할 일을 모른다면하지 마십시오.</target>
        </trans-unit>
        <trans-unit id="7b82cd1f6eaec920a028950cb809a9a88e952b55" translate="yes" xml:space="preserve">
          <source>The big advantage of this form is that it makes it much easier to write patterns with references that can be interpolated in larger patterns, even if the larger pattern also contains capture groups.</source>
          <target state="translated">이 형식의 큰 장점은 큰 패턴에도 캡처 그룹이 포함되어 있어도 큰 패턴으로 보간 할 수있는 참조를 사용하여 패턴을 훨씬 쉽게 작성할 수 있다는 것입니다.</target>
        </trans-unit>
        <trans-unit id="d54be9133193e99a54a3311620e4e293b6619ef3" translate="yes" xml:space="preserve">
          <source>The big difference between the two types of filter is that the</source>
          <target state="translated">두 필터 유형의 큰 차이점은</target>
        </trans-unit>
        <trans-unit id="f4cd1959ad69d1f5686957182fd610eaea766644" translate="yes" xml:space="preserve">
          <source>The big difference between this filter and the previous example is the use of context data in the filter object. The filter object is based on a hash reference, and is used to keep various pieces of context information between calls to the filter function. All but two of the hash fields are used for error reporting. The first of those two, Enabled, is used by the filter to determine whether the debugging code should be given to the Perl parser. The second, InTraceBlock, is true when the filter has encountered a &lt;code&gt;DEBUG_BEGIN&lt;/code&gt; line, but has not yet encountered the following &lt;code&gt;DEBUG_END&lt;/code&gt; line.</source>
          <target state="translated">이 필터와 이전 예제의 큰 차이점은 필터 객체에서 컨텍스트 데이터를 사용한다는 것입니다. 필터 객체는 해시 참조를 기반으로하며 필터 함수 호출간에 다양한 컨텍스트 정보를 유지하는 데 사용됩니다. 두 개의 해시 필드를 제외한 모든 필드가 오류보고에 사용됩니다. 이 두 가지 중 첫 번째 인 Enabled는 필터에서 디버깅 코드를 Perl 파서에 제공해야하는지 여부를 결정하는 데 사용됩니다. 두 번째 InTraceBlock은 필터에 &lt;code&gt;DEBUG_BEGIN&lt;/code&gt; 행이 있지만 아직 다음 &lt;code&gt;DEBUG_END&lt;/code&gt; 행 이없는 경우에 해당 됩니다.</target>
        </trans-unit>
        <trans-unit id="52b096e99c9cb93102a3127548a39ec46a5e6a20" translate="yes" xml:space="preserve">
          <source>The big problem with this approach is that if you don't have control over source code being run in the child process, you can't control what it does with pipe buffering. Thus you can't just open a pipe to &lt;code&gt;cat -v&lt;/code&gt; and continually read and write a line from it.</source>
          <target state="translated">이 방법의 큰 문제점은 하위 프로세스에서 실행되는 소스 코드를 제어 할 수없는 경우 파이프 버퍼링으로 수행하는 작업을 제어 할 수 없다는 것입니다. 따라서 &lt;code&gt;cat -v&lt;/code&gt; 에 파이프를 열고 파이프를 계속 읽고 쓸 수는 없습니다.</target>
        </trans-unit>
        <trans-unit id="6486f0bee06ebbaca6cfa5b06fc46e3b4ab031bf" translate="yes" xml:space="preserve">
          <source>The biggest difference between Perl</source>
          <target state="translated">펄의 가장 큰 차이점</target>
        </trans-unit>
        <trans-unit id="10223441fe4732f3b2ec434dced2b599c8ca3725" translate="yes" xml:space="preserve">
          <source>The biggest difference is that the first construction would reinstate the initial value of $var, irrespective of how control exits the block: &lt;code&gt;&lt;a href=&quot;functions/goto&quot;&gt;goto&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/return&quot;&gt;return&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/die&quot;&gt;die&lt;/a&gt;&lt;/code&gt;/&lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt;, etc. It is a little bit more efficient as well.</source>
          <target state="translated">가장 큰 차이점은 첫 번째 구성은 제어가 블록을 나가는 방식 ( &lt;code&gt;&lt;a href=&quot;functions/goto&quot;&gt;goto&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;functions/return&quot;&gt;return&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;functions/die&quot;&gt;die&lt;/a&gt;&lt;/code&gt; / &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt; 등 )에 관계없이 $ var의 초기 값을 복원한다는 것 입니다. 조금 더 효율적입니다.</target>
        </trans-unit>
        <trans-unit id="3dfc4089faf0bdc2fe8184811a388d88572e3199" translate="yes" xml:space="preserve">
          <source>The biggest trap of all is forgetting to &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; warnings&lt;/code&gt; or use the &lt;b&gt;-w&lt;/b&gt; switch; see &lt;a href=&quot;warnings&quot;&gt;warnings&lt;/a&gt; and &lt;a href=&quot;perlrun&quot;&gt;perlrun&lt;/a&gt;. The second biggest trap is not making your entire program runnable under &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; strict&lt;/code&gt; . The third biggest trap is not reading the list of changes in this version of Perl; see &lt;a href=&quot;https://perldoc.perl.org/5.26.0/perldelta.html&quot;&gt;perldelta&lt;/a&gt;.</source>
          <target state="translated">가장 큰 함정은 &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; warnings&lt;/code&gt; 를 &lt;a href=&quot;functions/use&quot;&gt;사용&lt;/a&gt; 하거나 &lt;b&gt;-w&lt;/b&gt; 스위치를 사용하지 않는 것입니다. &lt;a href=&quot;warnings&quot;&gt;경고&lt;/a&gt; 및 &lt;a href=&quot;perlrun&quot;&gt;perlrun을&lt;/a&gt; 참조하십시오 . 두 번째로 큰 함정은 전체 프로그램을 &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; strict&lt;/code&gt; &lt;a href=&quot;functions/use&quot;&gt;사용&lt;/a&gt; 하지 못하게 만드는 것 입니다. 세 번째로 큰 함정은이 버전의 Perl의 변경 목록을 읽지 않는 것입니다. &lt;a href=&quot;https://perldoc.perl.org/5.26.0/perldelta.html&quot;&gt;perldelta를&lt;/a&gt; 참조 하십시오 .</target>
        </trans-unit>
        <trans-unit id="86312f7a492ad492d886bde4c3d6e414b56f1879" translate="yes" xml:space="preserve">
          <source>The binary can be installed into the directory where perl normally resides on your machine with</source>
          <target state="translated">바이너리는 perl이 일반적으로 컴퓨터에있는 디렉토리에 설치할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="153cbfaf81971e19f89aca8f0baea516f2171a06" translate="yes" xml:space="preserve">
          <source>The binary number may optionally be prefixed with &quot;0b&quot; or &quot;b&quot; unless &lt;code&gt;PERL_SCAN_DISALLOW_PREFIX&lt;/code&gt; is set in</source>
          <target state="translated">&lt;code&gt;PERL_SCAN_DISALLOW_PREFIX&lt;/code&gt; 가 설정되어 있지 않으면 이진 번호 앞에 &quot;0b&quot;또는 &quot;b&quot;가 붙을 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="5cc1bf2dab8b81eb0899313841a54927fbe7de16" translate="yes" xml:space="preserve">
          <source>The binary operators &lt;code&gt;+&lt;/code&gt;&lt;code&gt;-&lt;/code&gt;&lt;code&gt;*&lt;/code&gt;&lt;code&gt;/&lt;/code&gt;&lt;code&gt;%&lt;/code&gt;&lt;code&gt;==&lt;/code&gt;&lt;code&gt;!=&lt;/code&gt;&lt;code&gt;&amp;gt;&lt;/code&gt;&lt;code&gt;&amp;lt;&lt;/code&gt;&lt;code&gt;&amp;gt;=&lt;/code&gt;&lt;code&gt;&amp;lt;=&lt;/code&gt; and the unary operators &lt;code&gt;-&lt;/code&gt;&lt;code&gt;&lt;a href=&quot;functions/abs&quot;&gt;abs&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;--&lt;/code&gt; will attempt to convert arguments to integers. If both conversions are possible without loss of precision, and the operation can be performed without loss of precision then the integer result is used. Otherwise arguments are converted to floating point format and the floating point result is used. The caching of conversions (as described above) means that the integer conversion does not throw away fractional parts on floating point numbers.</source>
          <target state="translated">이진 연산자 &lt;code&gt;+&lt;/code&gt; &lt;code&gt;-&lt;/code&gt; &lt;code&gt;*&lt;/code&gt; &lt;code&gt;/&lt;/code&gt; &lt;code&gt;%&lt;/code&gt; &lt;code&gt;==&lt;/code&gt; &lt;code&gt;!=&lt;/code&gt; &lt;code&gt;&amp;gt;&lt;/code&gt; &lt;code&gt;&amp;lt;&lt;/code&gt; &lt;code&gt;&amp;gt;=&lt;/code&gt; &lt;code&gt;&amp;lt;=&lt;/code&gt; 및 단항 연산자 &lt;code&gt;-&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;functions/abs&quot;&gt;abs&lt;/a&gt;&lt;/code&gt; 과이 &lt;code&gt;--&lt;/code&gt; 정수로 변환 인수를 시도합니다. 정밀도 손실없이 두 변환이 가능하고 정밀도 손실없이 연산을 수행 할 수 있으면 정수 결과가 사용됩니다. 그렇지 않으면 인수가 부동 소수점 형식으로 변환되고 부동 소수점 결과가 사용됩니다. 변환 캐싱 (위 설명 참조)은 정수 변환이 부동 소수점 숫자에서 소수 부분을 버리지 않음을 의미합니다.</target>
        </trans-unit>
        <trans-unit id="1bc82db291b733618e76b84e58f74ac2a34e10aa" translate="yes" xml:space="preserve">
          <source>The bit complement operator &lt;code&gt;~&lt;/code&gt; may produce surprising results if used on strings containing characters with ordinal values above 255. In such a case, the results are consistent with the internal encoding of the characters, but not with much else. So don't do that. Similarly for &lt;code&gt;&lt;a href=&quot;functions/vec&quot;&gt;vec()&lt;/a&gt;&lt;/code&gt;: you will be operating on the internally-encoded bit patterns of the Unicode characters, not on the code point values, which is very probably not what you want.</source>
          <target state="translated">비트 보수 연산자 &lt;code&gt;~&lt;/code&gt; 는 서 수가 255보다 큰 문자를 포함하는 문자열에 사용될 경우 놀라운 결과를 생성 할 수 있습니다. 이러한 경우 결과는 문자의 내부 인코딩과 일치하지만 다른 것은 아닙니다. 그러지 마 &lt;code&gt;&lt;a href=&quot;functions/vec&quot;&gt;vec()&lt;/a&gt;&lt;/code&gt; 유사하게 : 코드 포인트 값이 아닌 유니 코드 문자의 내부 인코딩 된 비트 패턴에서 작동 할 것입니다.</target>
        </trans-unit>
        <trans-unit id="d35eca1d1b5259b3fe2499ebc8287ac008c74743" translate="yes" xml:space="preserve">
          <source>The bit of magic mentioned in the section title occurs when the regexp backtracks in the process of searching for a match. If the regexp backtracks over a code expression and if the variables used within are localized using &lt;code&gt;&lt;a href=&quot;functions/local&quot;&gt;local&lt;/a&gt;&lt;/code&gt;, the changes in the variables produced by the code expression are undone! Thus, if we wanted to count how many times a character got matched inside a group, we could use, e.g.,</source>
          <target state="translated">섹션 제목에 언급 된 약간의 마술은 정규 표현식이 일치하는 과정을 추적 할 때 발생합니다. 정규 표현식이 코드 표현식을 역 추적하고 그 안에 사용 된 변수가 &lt;code&gt;&lt;a href=&quot;functions/local&quot;&gt;local&lt;/a&gt;&lt;/code&gt; 을 사용하여 지역화 된 경우 코드 표현식에 의해 생성 된 변수의 변경 사항은 취소됩니다! 따라서 그룹 내에서 캐릭터가 몇 번 일치하는지 계산하려면 다음과 같이 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="37e1e5bfe9f52e71b4a679c89e1ebe8060bbbb9c" translate="yes" xml:space="preserve">
          <source>The bit string operators, &lt;code&gt;&amp;amp; | ^ ~&lt;/code&gt; and (starting in v5.22) &lt;code&gt;&amp;amp;. |. ^.  ~.&lt;/code&gt; can operate on characters that don't fit into a byte. However, the current behavior is likely to change. You should not use these operators on strings that are encoded in UTF-8. If you're not sure about the encoding of a string, downgrade it before using any of these operators; you can use &lt;a href=&quot;utf8#Utility-functions&quot;&gt;utf8::utf8_downgrade() &lt;/a&gt;.</source>
          <target state="translated">비트 문자열 연산자 &lt;code&gt;&amp;amp; | ^ ~&lt;/code&gt; 및 (v5.22에서 시작) &lt;code&gt;&amp;amp;. |. ^. ~.&lt;/code&gt; 바이트에 맞지 않는 문자에서 작동 할 수 있습니다. 그러나 현재 동작은 변경 될 수 있습니다. UTF-8로 인코딩 된 문자열에는 이러한 연산자를 사용하지 않아야합니다. 문자열 인코딩이 확실하지 않은 경우 이러한 연산자를 사용하기 전에 문자열을 다운 그레이드하십시오. &lt;a href=&quot;utf8#Utility-functions&quot;&gt;utf8 :: utf8_downgrade ()&lt;/a&gt; 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="798f07dedaf152fa64ff8f36aa832d747a59dede" translate="yes" xml:space="preserve">
          <source>The bitmask</source>
          <target state="translated">비트 마스크</target>
        </trans-unit>
        <trans-unit id="7f65bb852dcddd2ea289cb9a819f8b8574f5d891" translate="yes" xml:space="preserve">
          <source>The bitwise operators such as &amp;amp; ^ | may return different results when operating on string or character data in a Perl program running on an EBCDIC platform than when run on an ASCII platform. Here is an example adapted from the one in &lt;a href=&quot;perlop&quot;&gt;perlop&lt;/a&gt;:</source>
          <target state="translated">&amp;amp; ^ |와 같은 비트 연산자 EBCDIC 플랫폼에서 실행되는 Perl 프로그램의 문자열 또는 문자 데이터에서 작동 할 때 ASCII 플랫폼에서 실행될 때와 다른 결과를 리턴 할 수 있습니다. 다음은 &lt;a href=&quot;perlop&quot;&gt;perlop&lt;/a&gt; 의 예제에서 수정 한 예입니다 .</target>
        </trans-unit>
        <trans-unit id="6f959154b03d16bc90e316f48db81d6452186e11" translate="yes" xml:space="preserve">
          <source>The bless() operator may be used to associate the object a reference points to with a package functioning as an object class. See &lt;a href=&quot;perlobj&quot;&gt;perlobj&lt;/a&gt;.</source>
          <target state="translated">bless () 연산자는 참조가 가리키는 객체를 객체 클래스로 기능하는 패키지와 연관시키는 데 사용될 수 있습니다. &lt;a href=&quot;perlobj&quot;&gt;perlobj를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="62c6e0f6d8c3596c1d5e718f86c80115574f39a3" translate="yes" xml:space="preserve">
          <source>The blibdirs.ts target is deprecated. Depend on blibdirs instead.</source>
          <target state="translated">blibdirs.ts 대상은 더 이상 사용되지 않습니다. 대신 blibdirs에 의존하십시오.</target>
        </trans-unit>
        <trans-unit id="a0e8f481ec3e68f2eee488cdec2641a9ee4fc58d" translate="yes" xml:space="preserve">
          <source>The body of an object is never examined by an inside-out class, only its reference address is used. This allows for the body of an actual object to be</source>
          <target state="translated">객체의 본문은 인사이드 아웃 클래스에 의해 검사되지 않으며 참조 주소 만 사용됩니다. 이를 통해 실제 객체의 몸체가</target>
        </trans-unit>
        <trans-unit id="5f03e7d3d4bcb5b96cdb3a0cb31e708fb5a607fe" translate="yes" xml:space="preserve">
          <source>The bond between a magical variable and its implementation class. See the &lt;code&gt;&lt;a href=&quot;functions/tie&quot;&gt;tie&lt;/a&gt;&lt;/code&gt; function in Camel chapter 27, &amp;ldquo;Functions&amp;rdquo; and Camel chapter 14, &amp;ldquo;Tied Variables&amp;rdquo;.</source>
          <target state="translated">마법 변수와 구현 클래스 사이의 결합. 참조 &lt;code&gt;&lt;a href=&quot;functions/tie&quot;&gt;tie&lt;/a&gt;&lt;/code&gt; Camel 27 장, &quot;기능&quot;및 Camel 14 장, &quot; 타이 변수&quot; 타이 기능을.</target>
        </trans-unit>
        <trans-unit id="3d1559aa0f7fe592165823ac05e1383677536c15" translate="yes" xml:space="preserve">
          <source>The boss thread does relatively little work. While tasks aren't necessarily performed faster than with any other method, it tends to have the best user-response times.</source>
          <target state="translated">보스 스레드는 상대적으로 거의 작동하지 않습니다. 작업이 다른 방법보다 반드시 더 빨리 수행되는 것은 아니지만 최상의 사용자 응답 시간을 갖는 경향이 있습니다.</target>
        </trans-unit>
        <trans-unit id="4d643dd67e77ce12596be6c04808856092685be2" translate="yes" xml:space="preserve">
          <source>The boss/worker model usually has one</source>
          <target state="translated">보스 / 작업자 모델에는 일반적으로</target>
        </trans-unit>
        <trans-unit id="7cb25d97420dee45b6ff8e8d1d3ce98bc5f8cf9f" translate="yes" xml:space="preserve">
          <source>The bottom line is that Perl has always practiced &quot;Character Semantics&quot;, but with the advent of Unicode, that is now different than &quot;Byte Semantics&quot;.</source>
          <target state="translated">결론적으로 Perl은 항상 &quot;문자 의미론&quot;을 연습했지만, 유니 코드의 출현으로 이제는 &quot;바이트 의미론&quot;과 다릅니다.</target>
        </trans-unit>
        <trans-unit id="b78f42ecd2e198ccb02cbf24e0cb3e2f279a41cb" translate="yes" xml:space="preserve">
          <source>The bottom line is that using &lt;code&gt;/o&lt;/code&gt; is almost never a good idea.</source>
          <target state="translated">&lt;code&gt;/o&lt;/code&gt; 으로 / o 를 사용 하는 것은 결코 좋은 생각이 아닙니다.</target>
        </trans-unit>
        <trans-unit id="d9acf6e820cb60c3e92eccf3aa1b7d56933e4bb1" translate="yes" xml:space="preserve">
          <source>The bracketing construct &lt;code&gt;( ... )&lt;/code&gt; creates capture groups (also referred to as capture buffers). To refer to the current contents of a group later on, within the same pattern, use &lt;code&gt;\g1&lt;/code&gt; (or &lt;code&gt;\g{1}&lt;/code&gt; ) for the first, &lt;code&gt;\g2&lt;/code&gt; (or &lt;code&gt;\g{2}&lt;/code&gt; ) for the second, and so on. This is called a</source>
          <target state="translated">브라케팅 구성 &lt;code&gt;( ... )&lt;/code&gt; 은 캡처 그룹 (캡처 버퍼라고도 함 )을 작성합니다. 나중에 동일한 패턴 내에서 그룹의 현재 내용을 참조하려면 첫 번째 는 &lt;code&gt;\g1&lt;/code&gt; (또는 &lt;code&gt;\g{1}&lt;/code&gt; )을 사용하고 두 번째는 &lt;code&gt;\g2&lt;/code&gt; (또는 &lt;code&gt;\g{2}&lt;/code&gt; )을 사용하십시오. 이것은</target>
        </trans-unit>
        <trans-unit id="e36070a31e90d55267b22c4c53ba4bb76bc4e98b" translate="yes" xml:space="preserve">
          <source>The btree format allows arbitrary key/value pairs to be stored in a sorted, balanced binary tree.</source>
          <target state="translated">btree 형식을 사용하면 임의의 키 / 값 쌍을 정렬 된 균형 이진 트리에 저장할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3d23a8ab70ee632140bebef4fc4a9cc18111b1ba" translate="yes" xml:space="preserve">
          <source>The bucket usage information provided by &lt;code&gt;&lt;a href=&quot;functions/scalar&quot;&gt;scalar(%hash)&lt;/a&gt;&lt;/code&gt; is not available. What this means is that using %tied_hash in boolean context doesn't work right (currently this always tests false, regardless of whether the hash is empty or hash elements).</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/scalar&quot;&gt;scalar(%hash)&lt;/a&gt;&lt;/code&gt; 제공 한 버킷 사용 정보를 사용할 수 없습니다. 이것이 의미하는 것은 부울 컨텍스트에서 % tied_hash를 사용하면 제대로 작동하지 않는다는 것입니다 (현재 해시가 비어 있는지 또는 해시 요소에 관계없이 항상 false를 테스트 함).</target>
        </trans-unit>
        <trans-unit id="ca05fef836743ccb209a85580910e15958fde72d" translate="yes" xml:space="preserve">
          <source>The buffer for this layer currently holds data written to it but not sent to next layer.</source>
          <target state="translated">이 계층의 버퍼에는 현재 데이터가 기록되었지만 다음 계층으로 전송되지는 않습니다.</target>
        </trans-unit>
        <trans-unit id="7906bb96b8244bc39b3b8a2c3c66a3c0af5824fe" translate="yes" xml:space="preserve">
          <source>The buffer for this layer currently holds unconsumed data read from layer below.</source>
          <target state="translated">이 계층의 버퍼는 현재 아래 계층에서 읽은 소비되지 않은 데이터를 보유합니다.</target>
        </trans-unit>
        <trans-unit id="6ea453ad94b47d04a0aaf4ba8a7c5a8d66aac757" translate="yes" xml:space="preserve">
          <source>The buffer for this layer should be filled (for read) from layer below. When you &quot;subclass&quot; PerlIOBuf layer, you want to use its</source>
          <target state="translated">이 레이어의 버퍼는 아래 레이어에서 채워야합니다 (읽기 위해). PerlIOBuf 레이어를 &quot;서브 클래스&quot;할 때</target>
        </trans-unit>
        <trans-unit id="0b0da711f6da8dbe92866cc34757189eaf594fa5" translate="yes" xml:space="preserve">
          <source>The buffer parameters can either be a scalar or a scalar reference.</source>
          <target state="translated">버퍼 매개 변수는 스칼라 또는 스칼라 참조 일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3180fcf8985754e2c180a612db1e7626b0444c64" translate="yes" xml:space="preserve">
          <source>The buffer size parameter is ignored. If either argument to &lt;code&gt;copy&lt;/code&gt; is a handle to an opened file, then data is copied using Perl operators, and no effort is made to preserve file attributes or record structure.</source>
          <target state="translated">버퍼 크기 매개 변수는 무시됩니다. &lt;code&gt;copy&lt;/code&gt; 할 인수가 열린 파일에 대한 핸들 인 경우 Perl 연산자를 사용하여 데이터가 복사되며 파일 속성 또는 레코드 구조를 보존하기 위해 노력하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="3a3e5d3d24ac3da5ee8782f3b635bd002510477d" translate="yes" xml:space="preserve">
          <source>The build procedure is completely standard:</source>
          <target state="translated">빌드 절차는 완전히 표준입니다 :</target>
        </trans-unit>
        <trans-unit id="eb86001bb0f7c51ab8f75bc125c6599630a9618e" translate="yes" xml:space="preserve">
          <source>The build process is dependent on the location of the NetWare SDK. Once the Tools &amp;amp; SDK are installed, the build environment has to be setup. The following batch files setup the environment.</source>
          <target state="translated">빌드 프로세스는 NetWare SDK의 위치에 따라 다릅니다. 도구 및 SDK가 설치되면 빌드 환경을 설정해야합니다. 다음 배치 파일은 환경을 설정합니다.</target>
        </trans-unit>
        <trans-unit id="66dc024a88d2f72023e3d27090cc749788a83502" translate="yes" xml:space="preserve">
          <source>The build requires CodeWarrior compiler and linker. In addition, the &quot;NetWare SDK&quot;, &quot;NLM &amp;amp; NetWare Libraries for C&quot; and &quot;NetWare Server Protocol Libraries for C&quot;, all available at &lt;a href=&quot;http://developer.novell.com/wiki/index.php/Category:Novell_Developer_Kit&quot;&gt;http://developer.novell.com/wiki/index.php/Category:Novell_Developer_Kit&lt;/a&gt;, are required. Microsoft Visual C++ version 4.2 or later is also required.</source>
          <target state="translated">빌드에는 CodeWarrior 컴파일러 및 링커가 필요합니다. 또한 &quot;NetWare SDK&quot;, &quot;C 용 NLM 및 NetWare 라이브러리&quot;및 &quot;C 용 NetWare 서버 프로토콜 라이브러리&quot;는 모두 &lt;a href=&quot;http://developer.novell.com/wiki/index.php/Category:Novell_Developer_Kit&quot;&gt;http://developer.novell.com/wiki/index.php/Category:Novell_Developer_Kit&lt;/a&gt; 에서 구할 수 있습니다 . 필수입니다. Microsoft Visual C ++ 버전 4.2 이상도 필요합니다.</target>
        </trans-unit>
        <trans-unit id="2ba6778f7060ad4df8f24bbc1bdc4f90be4ddf10" translate="yes" xml:space="preserve">
          <source>The build system that Perl uses is called metaconfig. This system is maintained separately from the Perl core.</source>
          <target state="translated">Perl이 사용하는 빌드 시스템을 metaconfig라고합니다. 이 시스템은 Perl 코어와 별도로 유지 관리됩니다.</target>
        </trans-unit>
        <trans-unit id="942228e32ca9b0927fd55428e4055983f76b4ec4" translate="yes" xml:space="preserve">
          <source>The built-ins &lt;code&gt;&lt;a href=&quot;functions/do&quot;&gt;do&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/require&quot;&gt;require&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;functions/glob&quot;&gt;glob&lt;/a&gt;&lt;/code&gt; can also be overridden, but due to special magic, their original syntax is preserved, and you don't have to define a prototype for their replacements. (You can't override the &lt;code&gt;&lt;a href=&quot;functions/do&quot;&gt;do&lt;/a&gt; BLOCK&lt;/code&gt; syntax, though).</source>
          <target state="translated">내장 된 &lt;code&gt;&lt;a href=&quot;functions/do&quot;&gt;do&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;functions/require&quot;&gt;require&lt;/a&gt;&lt;/code&gt; 및 &lt;code&gt;&lt;a href=&quot;functions/glob&quot;&gt;glob&lt;/a&gt;&lt;/code&gt; 도 무시할 수 있지만 특별한 마법으로 인해 원래 구문이 유지되므로 대체를 위해 프로토 타입을 정의 할 필요가 없습니다. ( 하지만 &lt;code&gt;&lt;a href=&quot;functions/do&quot;&gt;do&lt;/a&gt; BLOCK&lt;/code&gt; 구문을 무시할 수는 없습니다 ).</target>
        </trans-unit>
        <trans-unit id="296da44de5630b90165936266a71322d333ad173" translate="yes" xml:space="preserve">
          <source>The bulk of the &lt;code&gt;B&lt;/code&gt; module is the methods for accessing fields of these structures.</source>
          <target state="translated">&lt;code&gt;B&lt;/code&gt; 모듈 의 대부분은 이러한 구조의 필드에 액세스하는 방법입니다.</target>
        </trans-unit>
        <trans-unit id="8b0e07205f847f3c71cfbfff3ef8429008605c63" translate="yes" xml:space="preserve">
          <source>The bulk of the work is done by the &lt;code&gt;check_num()&lt;/code&gt; subroutine, which takes a reference to its input queue and a prime number that it's responsible for. After pulling in the input queue and the prime that the subroutine is checking (line 11), we create a new queue (line 13) and reserve a scalar for the thread that we're likely to create later (line 12).</source>
          <target state="translated">대부분의 작업은 &lt;code&gt;check_num()&lt;/code&gt; 서브 루틴에 의해 수행됩니다. check_num () 서브 루틴은 입력 큐와 담당하는 소수를 참조합니다. 입력 큐와 서브 루틴이 점검하고있는 프라임 (11 행)을 가져온 후, 우리는 새로운 큐 (13 행)를 작성하고 나중에 생성 할 스레드에 대한 스칼라를 예약합니다 (12 행).</target>
        </trans-unit>
        <trans-unit id="791442532861b4bafb692d53705783ee9bec0932" translate="yes" xml:space="preserve">
          <source>The byteorder on the platform where Perl was built is also available via &lt;a href=&quot;../config&quot;&gt;Config&lt;/a&gt;:</source>
          <target state="translated">Perl이 빌드 된 플랫폼의 바이트 순서는 &lt;a href=&quot;../config&quot;&gt;Config&lt;/a&gt; 를 통해 사용할 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="2a22ccaf7c6bd804cab616f223b89fb4c998d9e8" translate="yes" xml:space="preserve">
          <source>The byteorder on the platform where Perl was built is also available via &lt;a href=&quot;config&quot;&gt;Config&lt;/a&gt;:</source>
          <target state="translated">Perl이 빌드 된 플랫폼의 바이트 순서는 &lt;a href=&quot;config&quot;&gt;Config&lt;/a&gt; 를 통해 사용할 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="95b43b81c5e8935337a225eeb872942eb25c3b63" translate="yes" xml:space="preserve">
          <source>The cache itself consumes about 310 bytes per cached record, so if your file has many short records, you may want to decrease the cache memory limit, or else the cache overhead may exceed the size of the cached data.</source>
          <target state="translated">캐시 자체는 캐시 된 레코드 당 약 310 바이트를 소비하므로 파일에 짧은 레코드가 많은 경우 캐시 메모리 제한을 줄이거 나 캐시 오버 헤드가 캐시 된 데이터의 크기를 초과 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="64eab8d82090d9e1801adf3ce396bf3e93f4b8ee" translate="yes" xml:space="preserve">
          <source>The call graph looks like this:</source>
          <target state="translated">호출 그래프는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="438b1deafb199f6d78cd53708e2c5819899363df" translate="yes" xml:space="preserve">
          <source>The call is implemented in terms of either Perl's or your system's native fread(3) library function. To get a true read(2) system call, see &lt;a href=&quot;#sysread-FILEHANDLE%2cSCALAR%2cLENGTH%2cOFFSET&quot;&gt;sysread&lt;/a&gt;.</source>
          <target state="translated">호출은 Perl 또는 시스템의 기본 fread (3) 라이브러리 함수 측면에서 구현됩니다. 진정한 read (2) 시스템 호출을 얻으려면 &lt;a href=&quot;#sysread-FILEHANDLE%2cSCALAR%2cLENGTH%2cOFFSET&quot;&gt;sysread를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="743d372bad1a8cad2381aca07cbb441a9da8196f" translate="yes" xml:space="preserve">
          <source>The call to &lt;code&gt;XSLoader::load()&lt;/code&gt; (or &lt;code&gt;bootstrap()&lt;/code&gt; ) calls the module's bootstrap code. For modules build by</source>
          <target state="translated">를 호출 &lt;code&gt;XSLoader::load()&lt;/code&gt; (또는 &lt;code&gt;bootstrap()&lt;/code&gt; ) 모듈의 부트 스트랩 코드를 호출합니다. 모듈 별</target>
        </trans-unit>
        <trans-unit id="3ec6acbf7a32681ee91fb2a933c9fbfbb9c3da0d" translate="yes" xml:space="preserve">
          <source>The call to &lt;code&gt;from_to()&lt;/code&gt; changes the bytes in &lt;code&gt;$data&lt;/code&gt; , but nothing material about the nature of the string has changed as far as Perl is concerned. Both before and after the call, the string &lt;code&gt;$data&lt;/code&gt; contains just a bunch of 8-bit bytes. As far as Perl is concerned, the encoding of the string remains as &quot;system-native 8-bit bytes&quot;.</source>
          <target state="translated">&lt;code&gt;from_to()&lt;/code&gt; 호출하면 &lt;code&gt;$data&lt;/code&gt; 의 바이트 가 변경되지만 Perl과 관련하여 문자열의 특성에 대한 자료는 변경되지 않았습니다. 호출 전후에 문자열 &lt;code&gt;$data&lt;/code&gt; 에는 단지 8 비트 바이트가 들어 있습니다. Perl과 관련하여 문자열 인코딩은 &quot;시스템 기본 8 비트 바이트&quot;로 유지됩니다.</target>
        </trans-unit>
        <trans-unit id="ad70e5f54776fc0924c4e470d4ee9b439b4f2953" translate="yes" xml:space="preserve">
          <source>The call to &lt;code&gt;warnings::register&lt;/code&gt; will create a new warnings category called &quot;MyMod::Abc&quot;, i.e. the new category name matches the current package name. The &lt;code&gt;&lt;a href=&quot;functions/open&quot;&gt;open&lt;/a&gt;&lt;/code&gt; function in the module will display a warning message if it gets given a relative path as a parameter. This warnings will only be displayed if the code that uses &lt;code&gt;MyMod::Abc&lt;/code&gt; has actually enabled them with the &lt;code&gt;warnings&lt;/code&gt; pragma like below.</source>
          <target state="translated">&lt;code&gt;warnings::register&lt;/code&gt; 호출하면 &quot;MyMod :: Abc&quot;라는 새 경고 범주가 작성됩니다. 즉, 새 범주 이름이 현재 패키지 이름과 일치합니다. 모듈 의 &lt;code&gt;&lt;a href=&quot;functions/open&quot;&gt;open&lt;/a&gt;&lt;/code&gt; 기능은 상대 경로가 매개 변수로 제공되면 경고 메시지를 표시합니다. 이 경고는 &lt;code&gt;MyMod::Abc&lt;/code&gt; 를 사용하는 코드에서 실제로 다음과 같은 &lt;code&gt;warnings&lt;/code&gt; pragma를 사용하여 활성화 한 경우에만 표시됩니다 .</target>
        </trans-unit>
        <trans-unit id="de39aad93d96a8313ed651448e2dc806dfea3c70" translate="yes" xml:space="preserve">
          <source>The call to GetOptions() parses the command line arguments that are present in &lt;code&gt;@ARGV&lt;/code&gt; and sets the option variable to the value &lt;code&gt;1&lt;/code&gt; if the option did occur on the command line. Otherwise, the option variable is not touched. Setting the option value to true is often called</source>
          <target state="translated">GetOptions ()를 호출하면 &lt;code&gt;@ARGV&lt;/code&gt; 에 있는 명령 줄 인수를 구문 분석 하고 옵션이 명령 줄에서 발생한 경우 옵션 변수를 값 &lt;code&gt;1&lt;/code&gt; 로 설정합니다. 그렇지 않으면 옵션 변수를 건드리지 않습니다. 옵션 값을 true로 설정하는 것을 종종 호출합니다</target>
        </trans-unit>
        <trans-unit id="171eeffe94ffcbbb77d480c5aae1700315d244fd" translate="yes" xml:space="preserve">
          <source>The call to the program that is able to compile perlmain.c. Defaults to $(CC).</source>
          <target state="translated">perlmain.c를 컴파일 할 수있는 프로그램 호출 기본값은 $ (CC)입니다.</target>
        </trans-unit>
        <trans-unit id="acb2e8bffbae50387da55c62d3573564cf939bc2" translate="yes" xml:space="preserve">
          <source>The call to this method is currently made</source>
          <target state="translated">이 메소드에 대한 호출은 현재 이루어집니다</target>
        </trans-unit>
        <trans-unit id="af59be20c7eb663137f8b78548e36aec5ac0b8fe" translate="yes" xml:space="preserve">
          <source>The callback methods &lt;code&gt;start_code&lt;/code&gt; and &lt;code&gt;end_code&lt;/code&gt; emits the &lt;code&gt;code&lt;/code&gt; tags before and after &lt;code&gt;handle_code&lt;/code&gt; is invoked, so you might want to override these together with &lt;code&gt;handle_code&lt;/code&gt; if this wrapping isn't suitable.</source>
          <target state="translated">&lt;code&gt;handle_code&lt;/code&gt; 가 호출 되기 전후에 콜백 메소드 &lt;code&gt;start_code&lt;/code&gt; 및 &lt;code&gt;end_code&lt;/code&gt; 가 &lt;code&gt;code&lt;/code&gt; 태그를 생성 하므로이 줄 바꿈이 적합하지 않은 경우 &lt;code&gt;handle_code&lt;/code&gt; 와 함께이를 무시할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="6e4b93d3f2cc24bc6cb3f704f926b3838cfb6c18" translate="yes" xml:space="preserve">
          <source>The callback routine's return value is not used for anything.</source>
          <target state="translated">콜백 루틴의 반환 값은 아무것도 사용되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="df4f95aac52b872cdb00cff71137de388b659b49" translate="yes" xml:space="preserve">
          <source>The callbacks are called for each opcode visited by Concise, in the same order as they are added. Each subroutine is passed five parameters.</source>
          <target state="translated">Concise가 방문한 각 opcode에 대해 콜백이 추가 된 순서대로 호출됩니다. 각 서브 루틴에는 5 개의 매개 변수가 전달됩니다.</target>
        </trans-unit>
        <trans-unit id="cf3ef404c2544a6e1a747fcdf0563fa6c44b7664" translate="yes" xml:space="preserve">
          <source>The caller is responsible for incrementing the reference count of the array returned if it wants to keep the structure. Hence, if you have created a temporary value that you keep no pointer to, &lt;code&gt;sv_2mortal()&lt;/code&gt; to ensure that it is disposed of correctly. If you have cached your return value, then return a pointer to it without changing the reference count.</source>
          <target state="translated">호출자는 구조를 유지하려는 경우 반환 된 배열의 참조 횟수를 증가시킵니다. 따라서 포인터를 유지하지 않는 임시 값을 만든 경우 &lt;code&gt;sv_2mortal()&lt;/code&gt; 이 올바르게 처리되도록합니다. 반환 값을 캐시 한 경우 참조 카운트를 변경하지 않고 포인터를 반환하십시오.</target>
        </trans-unit>
        <trans-unit id="261ce3b0bcf399d133cb40e0b62c874dd44f485a" translate="yes" xml:space="preserve">
          <source>The calling context of the function (scalar or list context) is propagated to the normalizer. This means that if the memoized function will treat its arguments differently in list context than it would in scalar context, you can have the normalizer function select its behavior based on the results of &lt;code&gt;&lt;a href=&quot;functions/wantarray&quot;&gt;wantarray&lt;/a&gt;&lt;/code&gt;. Even if called in a list context, a normalizer should still return a single string.</source>
          <target state="translated">함수의 호출 컨텍스트 (스칼라 또는 목록 컨텍스트)가 노멀 라이저로 전파됩니다. 즉, 메모 된 함수가 스칼라 컨텍스트 &lt;code&gt;&lt;a href=&quot;functions/wantarray&quot;&gt;wantarray&lt;/a&gt;&lt;/code&gt; 달리 목록 컨텍스트에서 인수를 다르게 처리하는 경우 노멀 라이저 함수가 wantarray 의 결과에 따라 동작을 선택하도록 할 수 있습니다. . 목록 컨텍스트에서 호출 되더라도 노멀 라이저는 여전히 단일 문자열을 반환해야합니다.</target>
        </trans-unit>
        <trans-unit id="8bf2965af27484a7764a15d3bbb805341a4c18b1" translate="yes" xml:space="preserve">
          <source>The canonical list of operator names is the contents of the array PL_op_name defined and initialised in file</source>
          <target state="translated">정식 연산자 이름 목록은 파일에서 정의되고 초기화 된 PL_op_name 배열의 내용입니다.</target>
        </trans-unit>
        <trans-unit id="c754480a0b53533e23d99a04ff3b99e5ce4e8f9f" translate="yes" xml:space="preserve">
          <source>The canonical name for the host if the &lt;code&gt;AI_CANONNAME&lt;/code&gt; flag was provided, or &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; otherwise. This field will only be present on the first returned address.</source>
          <target state="translated">&lt;code&gt;AI_CANONNAME&lt;/code&gt; 플래그가 제공된 경우 호스트의 정식 이름 이거나 그렇지 않으면 &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; 입니다. 이 필드는 첫 번째 반송 주소에만 나타납니다.</target>
        </trans-unit>
        <trans-unit id="2ddb3e29fbb2261125aa3969a5b44d4db9de4c6e" translate="yes" xml:space="preserve">
          <source>The canonical name of a delegate distribution to install instead. Useful when a new version, although it tests OK itself, breaks something else or a developer release or a fork is already uploaded that is better than the last released version.</source>
          <target state="translated">대신 설치할 대리자 배포의 정식 이름입니다. 새 버전은 확인 자체를 테스트하지만 다른 것을 깨뜨 리거나 개발자 릴리스 또는 포크가 이미 업로드되어 마지막 릴리스 버전보다 나은 경우에 유용합니다.</target>
        </trans-unit>
        <trans-unit id="69da2adf0aadd37547ac813fb993aa6ad1179ac5" translate="yes" xml:space="preserve">
          <source>The canonical name of a given encoding does not necessarily agree with IANA Character Set Registry, commonly seen as &lt;code&gt;Content-Type:
text/plain; charset=&lt;i&gt;WHATEVER&lt;/i&gt;&lt;/code&gt;. For most cases, the canonical name works, but sometimes it does not, most notably with &quot;utf-8-strict&quot;.</source>
          <target state="translated">지정된 인코딩의 정식 이름이 일반적으로 &lt;code&gt;Content-Type: text/plain; charset=&lt;i&gt;WHATEVER&lt;/i&gt;&lt;/code&gt; . 대부분의 경우, 표준 이름은 작동하지만 때로는 &quot;utf-8-strict&quot;에서는 그렇지 않습니다.</target>
        </trans-unit>
        <trans-unit id="7959d4667d41c3277e70505dbf41353d2303db33" translate="yes" xml:space="preserve">
          <source>The capability whose string is to be output.</source>
          <target state="translated">문자열을 출력 할 기능입니다.</target>
        </trans-unit>
        <trans-unit id="a744fed76bc528e01936c6092d667062609b77e5" translate="yes" xml:space="preserve">
          <source>The caret allows for simpler stringification of compiled regular expressions. These look like</source>
          <target state="translated">캐럿을 사용하면 컴파일 된 정규식을보다 간단하게 문자열화할 수 있습니다. 이것들은</target>
        </trans-unit>
        <trans-unit id="743958808118b71ad904b9a5f8eed52c69df8dc0" translate="yes" xml:space="preserve">
          <source>The caret tells Perl that this cluster doesn't inherit the flags of any surrounding pattern, but uses the system defaults (&lt;code&gt;d-imsx&lt;/code&gt; ), modified by any flags specified.</source>
          <target state="translated">캐럿은 Perl에게이 클러스터가 주변 패턴의 플래그를 상속하지 않지만 지정된 플래그로 수정 된 시스템 기본값 ( &lt;code&gt;d-imsx&lt;/code&gt; )을 사용한다고 알려줍니다 .</target>
        </trans-unit>
        <trans-unit id="d4cdf247822c1c118e5e2a91cdbbd856905f935f" translate="yes" xml:space="preserve">
          <source>The case used for capitals that are followed by lowercase characters instead of by more capitals. Sometimes called sentence case or headline case. English doesn&amp;rsquo;t use Unicode titlecase, but casing rules for English titles are more complicated than simply capitalizing each word&amp;rsquo;s first character.</source>
          <target state="translated">더 많은 대문자 대신 소문자 뒤에 대문자가 사용됩니다. 때때로 문장 또는 헤드 라인 사건이라고합니다. 영어는 유니 코드 제목을 사용하지 않지만 영어 제목의 대소 문자 구분 규칙은 단순히 각 단어의 첫 문자를 대문자로 표기하는 것보다 더 복잡합니다.</target>
        </trans-unit>
        <trans-unit id="d711d105fb7ff9ba5105330930cd96c20b047fd3" translate="yes" xml:space="preserve">
          <source>The casemap used in Unicode when comparing or matching without regard to case. Comparing lower-, title-, or uppercase are all unreliable due to Unicode&amp;rsquo;s complex, one-to-many case mappings. Foldcase is a &lt;b&gt;lowercase&lt;/b&gt; variant (using a partially decomposed &lt;b&gt;normalization&lt;/b&gt; form for certain codepoints) created specifically to resolve this.</source>
          <target state="translated">대소 문자와 상관없이 비교 또는 일치 할 때 유니 코드로 사용되는 사례 맵입니다. 유니 코드의 복잡한 일대 다 사례 매핑으로 인해 소문자, 제목 또는 대문자를 모두 비교할 수 없습니다. Foldcase는 이를 해결하기 위해 특별히 작성된 &lt;b&gt;소문자&lt;/b&gt; 변형입니다 ( 특정 코드 포인트에 대해 부분적으로 분해 &lt;b&gt;된 정규화&lt;/b&gt; 양식 사용 ).</target>
        </trans-unit>
        <trans-unit id="f16ecea32ddc45aef48d30c6428e765b0124d50c" translate="yes" xml:space="preserve">
          <source>The cases when the shell is used are:</source>
          <target state="translated">쉘을 사용하는 경우는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="90158421e0d058f44be7171e42f898369c12eafb" translate="yes" xml:space="preserve">
          <source>The categories are currently:</source>
          <target state="translated">카테고리는 현재 :</target>
        </trans-unit>
        <trans-unit id="998a96285bef3fbf35e88e13ee25ef0e94c840c0" translate="yes" xml:space="preserve">
          <source>The character following &lt;code&gt;\c&lt;/code&gt; is mapped to some other character as shown in the table:</source>
          <target state="translated">&lt;code&gt;\c&lt;/code&gt; 다음에 오는 문자는 표에 표시된 것처럼 다른 문자에 매핑됩니다.</target>
        </trans-unit>
        <trans-unit id="0182edc494649671b24bec81ea32f4948632cbbf" translate="yes" xml:space="preserve">
          <source>The character set /adul flags cancel each other out. So, in this example,</source>
          <target state="translated">문자 세트 / adul 플래그는 서로를 취소합니다. 이 예에서는</target>
        </trans-unit>
        <trans-unit id="9d4fb2a2ad59e5fb5f2e1ac776d2184744805bf9" translate="yes" xml:space="preserve">
          <source>The character set rules are determined by an enum that is contained in this field. This is still experimental and subject to change, but the current interface returns the rules by use of the in-line function &lt;code&gt;get_regex_charset(const U32 flags)&lt;/code&gt; . The only currently documented value returned from it is REGEX_LOCALE_CHARSET, which is set if &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; locale&lt;/code&gt; is in effect. If present in &lt;code&gt;rx-&amp;gt;extflags&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;functions/split&quot;&gt;split&lt;/a&gt;&lt;/code&gt; will use the locale dependent definition of whitespace when RXf_SKIPWHITE or RXf_WHITE is in effect. ASCII whitespace is defined as per &lt;a href=&quot;perlapi#isSPACE&quot;&gt;isSPACE&lt;/a&gt;, and by the internal macros &lt;code&gt;is_utf8_space&lt;/code&gt; under UTF-8, and &lt;code&gt;isSPACE_LC&lt;/code&gt; under &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt;
locale&lt;/code&gt; .</source>
          <target state="translated">문자 집합 규칙은이 필드에 포함 된 열거 형에 의해 결정됩니다. 이것은 여전히 ​​실험적이며 변경 될 수 있지만 현재 인터페이스는 인라인 함수 &lt;code&gt;get_regex_charset(const U32 flags)&lt;/code&gt; 를 사용하여 규칙을 반환합니다 . 현재 문서화 된 값은 REGEX_LOCALE_CHARSET이며, &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; locale&lt;/code&gt; &lt;a href=&quot;functions/use&quot;&gt;사용&lt;/a&gt; 이 유효 하면 설정됩니다 . 존재한다면 &lt;code&gt;rx-&amp;gt;extflags&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;functions/split&quot;&gt;split&lt;/a&gt;&lt;/code&gt; 공백의 로케일 따라 정의를 사용 RXf_SKIPWHITE 또는 RXf_WHITE 효과에있을 때. ASCII 공백은 &lt;a href=&quot;perlapi#isSPACE&quot;&gt;isSPACE&lt;/a&gt; 및 UTF-8 에서 내부 매크로 &lt;code&gt;is_utf8_space&lt;/code&gt; 및 &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; locale&lt;/code&gt; &lt;code&gt;isSPACE_LC&lt;/code&gt; 에 따라 정의 &lt;a href=&quot;functions/use&quot;&gt; 사용중인 됩니다.&lt;/a&gt;됩니다. .</target>
        </trans-unit>
        <trans-unit id="2a9c5d866ba1d6358a34fce2d9ed9c3acf7a55d6" translate="yes" xml:space="preserve">
          <source>The character set to declare in the Content-Type meta tag created by default for &lt;code&gt;html_header_tags&lt;/code&gt; . Note that this option will be ignored if the value of &lt;code&gt;html_header_tags&lt;/code&gt; is changed. Defaults to &quot;ISO-8859-1&quot;.</source>
          <target state="translated">&lt;code&gt;html_header_tags&lt;/code&gt; 에 대해 기본적으로 작성된 Content-Type 메타 태그에서 선언하도록 설정된 문자입니다 . &lt;code&gt;html_header_tags&lt;/code&gt; 값 이 변경 되면이 옵션이 무시됩니다 . 기본값은 &quot;ISO-8859-1&quot;입니다.</target>
        </trans-unit>
        <trans-unit id="71daab686bee256e6d597c2f8159505d9e02d07d" translate="yes" xml:space="preserve">
          <source>The characters &lt;code&gt;|&lt;/code&gt; and &lt;code&gt;/&lt;/code&gt; are special in the L&amp;lt;...&amp;gt; context. Although the hyperlink parser does its best to determine which &quot;/&quot; is text and which is a delimiter in case of doubt, one ought to escape these literal characters like this:</source>
          <target state="translated">문자 &lt;code&gt;|&lt;/code&gt; 그리고 &lt;code&gt;/&lt;/code&gt; 는 L &amp;lt;...&amp;gt; 문맥에서 특별하다. 하이퍼 링크 파서는 어떤 &quot;/&quot;가 텍스트이고 어떤 것이 확실하지 않은지를 구분하기 위해 최선을 다하지만 다음과 같이이 리터럴 문자를 이스케이프해야합니다.</target>
        </trans-unit>
        <trans-unit id="9e5d809d420604eb5bdc15b23bb82aec938490ad" translate="yes" xml:space="preserve">
          <source>The characters used to recall a command or spawn a shell. By default, both are set to &lt;code&gt;!&lt;/code&gt; , which is unfortunate.</source>
          <target state="translated">명령을 불러 오거나 쉘을 생성하는 데 사용되는 문자입니다. 기본적으로 둘 다 &lt;code&gt;!&lt;/code&gt; 로 설정되어 있습니다 . 불행한 일입니다.</target>
        </trans-unit>
        <trans-unit id="ffd9954b7982718c7437be17e29fbfd3df1a4fe1" translate="yes" xml:space="preserve">
          <source>The check routine returns the node which should be inserted into the tree (if the top-level node was not modified, check routine returns its argument).</source>
          <target state="translated">점검 루틴은 트리에 삽입해야하는 노드를 리턴합니다 (최상위 노드가 수정되지 않은 경우 점검 루틴은 인수를 리턴합니다).</target>
        </trans-unit>
        <trans-unit id="47475762ffe9e435213b5064a86af730e143c18a" translate="yes" xml:space="preserve">
          <source>The chunk of memory which is pointed to by &lt;code&gt;p&lt;/code&gt; is Safefree()ed at the end of</source>
          <target state="translated">&lt;code&gt;p&lt;/code&gt; 가 가리키는 메모리 청크 는 Safefree ()입니다.</target>
        </trans-unit>
        <trans-unit id="16a3c0a4c50db86e628588170d93fcb36250d2c0" translate="yes" xml:space="preserve">
          <source>The class created by &lt;code&gt;struct&lt;/code&gt; must not be a subclass of another class other than &lt;code&gt;UNIVERSAL&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;struct&lt;/code&gt; 로 작성된 클래스는 &lt;code&gt;UNIVERSAL&lt;/code&gt; 이외의 다른 클래스의 서브 클래스가 아니어야합니다 .</target>
        </trans-unit>
        <trans-unit id="232a87cc5cdc58df0837defb5b9c5d4aee8a3bd8" translate="yes" xml:space="preserve">
          <source>The class method &lt;code&gt;less-&amp;gt;of( NAME )&lt;/code&gt; returns a boolean to tell you whether your user requested less of something.</source>
          <target state="translated">&lt;code&gt;less-&amp;gt;of( NAME )&lt;/code&gt; 클래스 메소드 는 부울을 반환하여 사용자의 요청이 적 었는지 여부를 알려줍니다.</target>
        </trans-unit>
        <trans-unit id="94cc64c25f30949cf122aa35d8a463e7d89e7056" translate="yes" xml:space="preserve">
          <source>The class method is invoked by the command &lt;code&gt;&lt;a href=&quot;../functions/tie&quot;&gt;tie&lt;/a&gt; @array, classname&lt;/code&gt; . Associates an array instance with the specified class. &lt;code&gt;LIST&lt;/code&gt; would represent additional arguments (along the lines of &lt;a href=&quot;../anydbm_file&quot;&gt;AnyDBM_File&lt;/a&gt; and compatriots) needed to complete the association. The method should return an object of a class which provides the methods below.</source>
          <target state="translated">클래스 메소드는 &lt;code&gt;&lt;a href=&quot;../functions/tie&quot;&gt;tie&lt;/a&gt; @array, classname&lt;/code&gt; 명령에 의해 호출됩니다 . 배열 인스턴스를 지정된 클래스와 연결합니다. &lt;code&gt;LIST&lt;/code&gt; 는 연결을 완료하는 데 필요한 추가 인수 ( &lt;a href=&quot;../anydbm_file&quot;&gt;AnyDBM_File&lt;/a&gt; 및 compatriots 행)를 나타냅니다 . 이 메소드는 아래 메소드를 제공하는 클래스의 오브젝트를 리턴해야합니다.</target>
        </trans-unit>
        <trans-unit id="d36e86369efaf1df03cb1d3f2a6ee7366375ea68" translate="yes" xml:space="preserve">
          <source>The class methods invoked for modifying and fetching are these:</source>
          <target state="translated">수정 및 페치하기 위해 호출 된 클래스 메소드는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="16f1f45dc986b853b9f9c28d5e7c510f2818ec6c" translate="yes" xml:space="preserve">
          <source>The class of the OP's SV, if it has one, in all caps (e.g., 'IV').</source>
          <target state="translated">OP의 SV 클래스 (있는 경우)는 모든 대문자로 표시됩니다 (예 : 'IV').</target>
        </trans-unit>
        <trans-unit id="1a1cd2e1aca2f382b8e61ec8f61c8bcfacf6a4ed" translate="yes" xml:space="preserve">
          <source>The classic example of where callbacks are used is when writing an event driven program, such as for an X11 application. In this case you register functions to be called whenever specific events occur, e.g., a mouse button is pressed, the cursor moves into a window or a menu item is selected.</source>
          <target state="translated">콜백이 사용되는 전형적인 예는 X11 응용 프로그램과 같은 이벤트 중심 프로그램을 작성할 때입니다. 이 경우 마우스 버튼을 누르거나 커서를 창으로 이동하거나 메뉴 항목을 선택하는 등 특정 이벤트가 발생할 때마다 호출 할 기능을 등록합니다.</target>
        </trans-unit>
        <trans-unit id="99430da67a315f54b20e2f72a5fd52a7326fcd42" translate="yes" xml:space="preserve">
          <source>The clobber method is simply:</source>
          <target state="translated">클로버 방법은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="d62999c9944be1bb3aba520e7d0e62efb63cb438" translate="yes" xml:space="preserve">
          <source>The clone method creates a copy of the digest state object and returns a reference to the copy.</source>
          <target state="translated">clone 메소드는 요약 상태 오브젝트의 사본을 작성하고 사본에 대한 참조를 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="32e3ee7a8f238c3dc42124d9afe27b0f78dc70db" translate="yes" xml:space="preserve">
          <source>The code</source>
          <target state="translated">코드</target>
        </trans-unit>
        <trans-unit id="563ad7ecb10abdc47d619f7b3d0884f86cf94b31" translate="yes" xml:space="preserve">
          <source>The code above can be rearranged to get around the problem, like this:</source>
          <target state="translated">위의 코드는 다음과 같이 문제를 해결하기 위해 재 배열 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ecf14a60f040b746943a04d158c46f884d48943b" translate="yes" xml:space="preserve">
          <source>The code above uses DB_File, but again it will work with any of the DBM modules.</source>
          <target state="translated">위의 코드는 DB_File을 사용하지만 모든 DBM 모듈에서 작동합니다.</target>
        </trans-unit>
        <trans-unit id="6d3c51612c2ccbd720904d0ac0d50a474014ffdd" translate="yes" xml:space="preserve">
          <source>The code above uses SDBM_File, but it will work with any of the DBM modules.</source>
          <target state="translated">위의 코드는 SDBM_File을 사용하지만 모든 DBM 모듈에서 작동합니다.</target>
        </trans-unit>
        <trans-unit id="d0ef4aba54c8ec4419ef4523d1390067d9ff6620" translate="yes" xml:space="preserve">
          <source>The code below can be used to traverse a zip file, one compressed data stream at a time.</source>
          <target state="translated">아래 코드는 한 번에 하나의 압축 된 데이터 스트림 인 zip 파일을 탐색하는 데 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d29217257764218057a5c39c6d3e329014141e5b" translate="yes" xml:space="preserve">
          <source>The code below for</source>
          <target state="translated">에 대한 아래 코드</target>
        </trans-unit>
        <trans-unit id="1d78d26d7e9f445a9bc052e60af207768e7330c6" translate="yes" xml:space="preserve">
          <source>The code below is the example given in the section</source>
          <target state="translated">아래 코드는 섹션에 제공된 예입니다.</target>
        </trans-unit>
        <trans-unit id="6e196e9f225b5138a983bdb659d302d31a1c384a" translate="yes" xml:space="preserve">
          <source>The code below makes use of both modules, but it only enables warnings from &lt;code&gt;Derived&lt;/code&gt; .</source>
          <target state="translated">아래 코드는 두 모듈을 모두 사용하지만 &lt;code&gt;Derived&lt;/code&gt; 의 경고 만 활성화 합니다.</target>
        </trans-unit>
        <trans-unit id="4b70175bee574db6d4bbb54ae246e1319c020349" translate="yes" xml:space="preserve">
          <source>The code block introduces a new scope from the perspective of lexical variable declarations, but &lt;b&gt;not&lt;/b&gt; from the perspective of &lt;code&gt;&lt;a href=&quot;functions/local&quot;&gt;local&lt;/a&gt;&lt;/code&gt; and similar localizing behaviours. So later code blocks within the same pattern will still see the values which were localized in earlier blocks. These accumulated localizations are undone either at the end of a successful match, or if the assertion is backtracked (compare &lt;a href=&quot;#Backtracking&quot;&gt;Backtracking&lt;/a&gt;). For example,</source>
          <target state="translated">코드 블록은 어휘 변수 선언의 관점에서 새로운 범위를 도입하지만 &lt;code&gt;&lt;a href=&quot;functions/local&quot;&gt;local&lt;/a&gt;&lt;/code&gt; 및 유사한 지역화 동작 의 관점 에서는 &lt;b&gt;아닙니다&lt;/b&gt; . 따라서 동일한 패턴의 코드 블록은 이전 블록에서 현지화 된 값을 계속 볼 수 있습니다. 이러한 누적 된 현지화는 성공적인 일치가 끝날 때 또는 어설 션이 역 추적 된 경우에 취소됩니다 ( &lt;a href=&quot;#Backtracking&quot;&gt;역 추적&lt;/a&gt; 비교 ). 예를 들어</target>
        </trans-unit>
        <trans-unit id="e98d3c5b00844f7eee566f69a2fd1ffcc0553db1" translate="yes" xml:space="preserve">
          <source>The code can only see the compartment's namespace (as returned by the &lt;b&gt;root&lt;/b&gt; method). The compartment's root package appears to be the &lt;code&gt;main::&lt;/code&gt; package to the code inside the compartment.</source>
          <target state="translated">코드는 구획의 네임 스페이스 만 볼 수 있습니다 ( &lt;b&gt;루트&lt;/b&gt; 메소드에 의해 리턴 됨 ). 구획의 루트 패키지 는 구획 내부의 코드에 대한 &lt;code&gt;main::&lt;/code&gt; 패키지 인 것으로 보입니다 .</target>
        </trans-unit>
        <trans-unit id="7cc1bb98d53bdcc3465bf9409e43dfe68967ea92" translate="yes" xml:space="preserve">
          <source>The code in the enclosing block has warnings enabled, but the inner block has them disabled. In this case that means the assignment to the scalar &lt;code&gt;$c&lt;/code&gt; will trip the &lt;code&gt;&quot;Scalar value @a[0] better written as $a[0]&quot;&lt;/code&gt; warning, but the assignment to the scalar &lt;code&gt;$b&lt;/code&gt; will not.</source>
          <target state="translated">엔 클로징 블록의 코드에는 경고가 활성화되어 있지만 내부 블록에는 코드가 비활성화되어 있습니다. 이 경우 스칼라 &lt;code&gt;$c&lt;/code&gt; 대한 지정 은 &lt;code&gt;&quot;Scalar value @a[0] better written as $a[0]&quot;&lt;/code&gt; 경고 를 트립 하지만 스칼라 &lt;code&gt;$b&lt;/code&gt; 대한 지정 은 그렇지 않습니다.</target>
        </trans-unit>
        <trans-unit id="3bbef419a6073b40632618263de6b83e9a3b2f8c" translate="yes" xml:space="preserve">
          <source>The code involved in &lt;code&gt;study_chunk()&lt;/code&gt; is extremely cryptic. Be careful. :-)</source>
          <target state="translated">&lt;code&gt;study_chunk()&lt;/code&gt; 관련된 코드 는 매우 암호입니다. 조심해. :-)</target>
        </trans-unit>
        <trans-unit id="fa55939059730530d1f6070150cdfbb84afaa7d4" translate="yes" xml:space="preserve">
          <source>The code is executed</source>
          <target state="translated">코드가 실행됩니다</target>
        </trans-unit>
        <trans-unit id="8fe7ae8735b35c106099f4a767ac8bec4145c55c" translate="yes" xml:space="preserve">
          <source>The code is executed in the package &lt;code&gt;DB&lt;/code&gt; . Note that</source>
          <target state="translated">코드는 패키지 &lt;code&gt;DB&lt;/code&gt; 에서 실행됩니다 . 참고</target>
        </trans-unit>
        <trans-unit id="5bdd192de0a16314fb946ed4a5f124bbba34ce51" translate="yes" xml:space="preserve">
          <source>The code is hosted on Github: https://github.com/jonathanstowe/Term-Cap please feel free to fork, submit patches etc, etc there.</source>
          <target state="translated">코드는 Github에서 호스팅됩니다 : https://github.com/jonathanstowe/Term-Cap 자유롭게 포크하거나 패치를 제출하십시오.</target>
        </trans-unit>
        <trans-unit id="6188bbd338f5f4453ec5eefb9a596ee762c4a047" translate="yes" xml:space="preserve">
          <source>The code is not optimized for speed, especially because we use &lt;code&gt;Math::Complex&lt;/code&gt; and thus go quite near complex numbers while doing the computations even when the arguments are not. This, however, cannot be completely avoided if we want things like &lt;code&gt;asin(2)&lt;/code&gt; to give an answer instead of giving a fatal runtime error.</source>
          <target state="translated">코드는 속도에 최적화되어 있지 않습니다. 특히 &lt;code&gt;Math::Complex&lt;/code&gt; 를 사용하므로 인수가 아닌 경우에도 계산을 수행하는 동안 복잡한 숫자에 가깝습니다. 그러나 치명적인 런타임 오류를 발생시키는 대신 &lt;code&gt;asin(2)&lt;/code&gt; 와 같은 것이 응답을 제공 하려는 경우이를 피할 수 없습니다 .</target>
        </trans-unit>
        <trans-unit id="eeb45ce8e4c72e0b27d2dd4e6b03aed6d8283a3c" translate="yes" xml:space="preserve">
          <source>The code isn't pretty as I mentioned -- I never thought it would be a 1000- line program when I started, or I might not have begun. :-) But I would have been less cavalier in how the parts of the program communicated with each other, etc. It might also have helped if I didn't have to divine the makeup of the stabs on the fly, and then account for micro differences between my compiler and gcc.</source>
          <target state="translated">내가 언급 한대로 코드가 예쁘지 않다. 처음 시작할 때 1000 줄 프로그램이라고 생각하지 않았거나 시작하지 않았을 수도있다. :-) 그러나 나는 프로그램의 일부가 서로 통신하는 방법에 대해 덜 무심했을 것입니다. 그것은 또한 찌르기의 화장을 신성하게 할 필요가 없다면 도움이 될 것입니다. 내 컴파일러와 gcc의 미세한 차이.</target>
        </trans-unit>
        <trans-unit id="9e137833ea36c6bb446c1454de0e7f32827ac2db" translate="yes" xml:space="preserve">
          <source>The code reference associated with &lt;code&gt;Store&lt;/code&gt; will be called before any key/value is written to the database and the code reference associated with &lt;code&gt;Fetch&lt;/code&gt; will be called after any key/value is read from the database.</source>
          <target state="translated">키 / 값이 데이터베이스에 기록되기 전에 &lt;code&gt;Store&lt;/code&gt; 와 연관된 코드 참조 가 호출되고 데이터베이스에서 키 / 값을 읽은 후에 &lt;code&gt;Fetch&lt;/code&gt; 와 연관된 코드 참조 가 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="9112803a8d3c96a68465b0bcde1920f2e7e6a455" translate="yes" xml:space="preserve">
          <source>The code to be parsed comes from</source>
          <target state="translated">파싱 ​​할 코드는</target>
        </trans-unit>
        <trans-unit id="ab517e2a8ba12a27ab2bbd36c075257a2d62e599" translate="yes" xml:space="preserve">
          <source>The code:</source>
          <target state="translated">코드:</target>
        </trans-unit>
        <trans-unit id="43bd0609e5f4f6c76dfb80ec0b3769b0a1ce5867" translate="yes" xml:space="preserve">
          <source>The codes generated by this module are standard terminal control codes, complying with ECMA-048 and ISO 6429 (generally referred to as &quot;ANSI color&quot; for the color codes). The non-color control codes (bold, dark, italic, underline, and reverse) are part of the earlier ANSI X3.64 standard for control sequences for video terminals and peripherals.</source>
          <target state="translated">이 모듈에 의해 생성 된 코드는 ECMA-048 및 ISO 6429 (일반적으로 컬러 코드에 대해 &quot;ANSI 컬러&quot;)를 준수하는 표준 터미널 제어 코드입니다. 비색 제어 코드 (굵게, 어둡게, 기울임 꼴, 밑줄 및 역)는 비디오 터미널 및 주변 장치의 제어 시퀀스에 대한 이전 ANSI X3.64 표준의 일부입니다.</target>
        </trans-unit>
        <trans-unit id="6fab56ccb009185913550effa31ed3b9edd378e9" translate="yes" xml:space="preserve">
          <source>The codesets currently supported are:</source>
          <target state="translated">현재 지원되는 코드 세트는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="71e94bac38239334b6900c0a017267aa1a8ae397" translate="yes" xml:space="preserve">
          <source>The cofunctions of the hyperbolic sine, cosine, and tangent (cosech/csch and cotanh/coth are aliases)</source>
          <target state="translated">쌍곡 사인, 코사인 및 탄젠트의 조합 (cosech / csch 및 cotanh / coth는 별칭)</target>
        </trans-unit>
        <trans-unit id="28a5561373d2289312316102a3c2581ebe7698d3" translate="yes" xml:space="preserve">
          <source>The cofunctions of the sine, cosine, and tangent (cosec/csc and cotan/cot are aliases)</source>
          <target state="translated">사인, 코사인 및 탄젠트의 cofunctions (cosec / csc 및 cotan / cot는 별명 임)</target>
        </trans-unit>
        <trans-unit id="4a1e9fabea4570a18aadb2a0be8b117d7c1d1876" translate="yes" xml:space="preserve">
          <source>The collective set of &lt;b&gt;environment variables&lt;/b&gt; your &lt;b&gt;process&lt;/b&gt; inherits from its parent. Accessed via &lt;code&gt;%ENV&lt;/code&gt; .</source>
          <target state="translated">의 집단 세트 &lt;b&gt;환경 변수는&lt;/b&gt; 사용자의 &lt;b&gt;프로세스&lt;/b&gt; 의 부모로부터 상속. &lt;code&gt;%ENV&lt;/code&gt; 를 통해 액세스합니다 .</target>
        </trans-unit>
        <trans-unit id="54dbe0de410d1fee14f151bad669e4e7f64514b7" translate="yes" xml:space="preserve">
          <source>The color function doesn't work unless &lt;a href=&quot;../../term/ansicolor&quot;&gt;Term::ANSIColor&lt;/a&gt; is compatible with your terminal.</source>
          <target state="translated">&lt;a href=&quot;../../term/ansicolor&quot;&gt;Term :: ANSIColor&lt;/a&gt; 가 터미널과 호환 되지 않으면 색상 기능이 작동하지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="d494da03d1029e001559e320101aec67b6081a14" translate="yes" xml:space="preserve">
          <source>The color stack, including the &lt;code&gt;:pushpop&lt;/code&gt; import tag, PUSHCOLOR, POPCOLOR, LOCALCOLOR, and the $Term::ANSIColor::AUTOLOCAL variable, was added in Term::ANSIColor 2.00, included in Perl 5.10.1.</source>
          <target state="translated">&lt;code&gt;:pushpop&lt;/code&gt; 가져 오기 태그, PUSHCOLOR, POPCOLOR, LOCALCOLOR 및 $ Term :: ANSIColor :: AUTOLOCAL 변수를 포함한 색상 스택 이 Perl 5.10.1에 포함 된 Term :: ANSIColor 2.00에 추가되었습니다.</target>
        </trans-unit>
        <trans-unit id="99f186121577072655b8ffd874560fdf2ec9538e" translate="yes" xml:space="preserve">
          <source>The column at which to wrap text on the right-hand side. Defaults to 76, unless &lt;b&gt;-t&lt;/b&gt; is given, in which case it's two columns less than the width of your terminal device.</source>
          <target state="translated">오른쪽에서 텍스트를 줄 바꿈하는 열입니다. &lt;b&gt;-t&lt;/b&gt; 를 지정 하지 않으면 기본값은 76 입니다.이 경우 터미널 장치의 너비보다 두 열이 작습니다.</target>
        </trans-unit>
        <trans-unit id="dc0da64614756f754ff954c33b5269fabc02fce0" translate="yes" xml:space="preserve">
          <source>The column at which to wrap text on the right-hand side. Defaults to 76.</source>
          <target state="translated">오른쪽에서 텍스트를 줄 바꿈하는 열입니다. 기본값은 76입니다.</target>
        </trans-unit>
        <trans-unit id="e8623930908f634360f3d6d3225f352295877e28" translate="yes" xml:space="preserve">
          <source>The combination of &lt;code&gt;//g&lt;/code&gt; and &lt;code&gt;\G&lt;/code&gt; allows us to process the string a bit at a time and use arbitrary Perl logic to decide what to do next. Currently, the &lt;code&gt;\G&lt;/code&gt; anchor is only fully supported when used to anchor to the start of the pattern.</source>
          <target state="translated">&lt;code&gt;//g&lt;/code&gt; 와 &lt;code&gt;\G&lt;/code&gt; 조합 하면 문자열을 한 번에 조금씩 처리하고 임의의 Perl 논리를 사용하여 다음에 수행 할 작업을 결정할 수 있습니다. 현재 &lt;code&gt;\G&lt;/code&gt; 앵커는 패턴의 시작 부분에 앵커하는 데 사용될 때만 완벽하게 지원됩니다.</target>
        </trans-unit>
        <trans-unit id="970e7f15d0c6ab9e35629ba58fe853786b66b02c" translate="yes" xml:space="preserve">
          <source>The combination of multiple command- line switches (</source>
          <target state="translated">여러 명령 줄 스위치 (</target>
        </trans-unit>
        <trans-unit id="e655e997e08648320978a6ff86ae273d24047f81" translate="yes" xml:space="preserve">
          <source>The combined effect of 3 &amp;amp; 4 is that it will allow code which uses the &lt;code&gt;warnings&lt;/code&gt; pragma to control the warning behavior of $^W-type code (using a &lt;code&gt;&lt;a href=&quot;functions/local&quot;&gt;local&lt;/a&gt; $^W=0&lt;/code&gt; ) if it really wants to, but not vice-versa.</source>
          <target state="translated">3 &amp;amp; 4의 결합 된 효과는 &lt;code&gt;warnings&lt;/code&gt; pragma를 사용하는 코드 가 실제로 원하는 경우 &lt;code&gt;&lt;a href=&quot;functions/local&quot;&gt;local&lt;/a&gt; $^W=0&lt;/code&gt; 유형 코드 ( &lt;a href=&quot;functions/local&quot;&gt;로컬&lt;/a&gt; $ ^ W = 0 사용 ) 의 경고 동작을 제어 할 수있게하는 것입니다 . 반대로.</target>
        </trans-unit>
        <trans-unit id="c5195e2f756a78470c45dda1ae8fbd38d00cbe08" translate="yes" xml:space="preserve">
          <source>The command &quot;=for</source>
          <target state="translated">&quot;= for 명령</target>
        </trans-unit>
        <trans-unit id="3d8aeb4458c1560b0d5ab2e46d755733e3bb6324" translate="yes" xml:space="preserve">
          <source>The command does not start.</source>
          <target state="translated">명령이 시작되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="7e6f4f93a21a7f88a65ff2221b6911802d75f842" translate="yes" xml:space="preserve">
          <source>The command is killed by a signal.</source>
          <target state="translated">명령이 신호에 의해 종료됩니다.</target>
        </trans-unit>
        <trans-unit id="914be5b158c3cc5be779f3d3fed5d23185a3c4a4" translate="yes" xml:space="preserve">
          <source>The command line interface is tightly integrated with an &lt;b&gt;emacs&lt;/b&gt; extension and there's a &lt;b&gt;vi&lt;/b&gt; interface too.</source>
          <target state="translated">커맨드 라인 인터페이스는 &lt;b&gt;emacs&lt;/b&gt; 확장과 밀접하게 통합되어 있으며 &lt;b&gt;vi&lt;/b&gt; 인터페이스도 있습니다.</target>
        </trans-unit>
        <trans-unit id="f789ad4d35bca82f26a9236e86bce7a57e057b98" translate="yes" xml:space="preserve">
          <source>The command line is not split by GetOptions, but by the command line interpreter (CLI). On Unix, this is the shell. On Windows, it is COMMAND.COM or CMD.EXE. Other operating systems have other CLIs.</source>
          <target state="translated">명령 줄은 GetOptions가 아니라 명령 줄 인터프리터 (CLI)에 의해 분할됩니다. 유닉스에서 이것은 쉘입니다. Windows에서는 COMMAND.COM 또는 CMD.EXE입니다. 다른 운영 체제에는 다른 CLI가 있습니다.</target>
        </trans-unit>
        <trans-unit id="a12dc653b968ec55d9bfea4484d747acafd8c027" translate="yes" xml:space="preserve">
          <source>The command returns a non-zero exit value (but see below).</source>
          <target state="translated">이 명령은 0이 아닌 종료 값을 반환합니다 (하지만 아래 참조).</target>
        </trans-unit>
        <trans-unit id="ccf7fbf7b3dd60fe57ca23a7e47b3c4eeb05e932" translate="yes" xml:space="preserve">
          <source>The command used to load the debugger code. The default is:</source>
          <target state="translated">디버거 코드를로드하는 데 사용되는 명령입니다. 기본값은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="35175a977556088d11ca4a7b0e7332f1ce787324" translate="yes" xml:space="preserve">
          <source>The command's STDOUT and STDERR (and possibly STDIN, depending on your shell) will be the same as the parent's. You won't need to catch SIGCHLD because of the double-fork taking place; see below for details.</source>
          <target state="translated">명령의 STDOUT 및 STDERR (및 쉘에 따라 STDIN도 가능)은 부모의 명령과 동일합니다. 이중 포크가 발생하기 때문에 SIGCHLD를 잡을 필요가 없습니다. 자세한 내용은 아래를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="75337684a9346d140506f8cf5d632c3a6fe46276" translate="yes" xml:space="preserve">
          <source>The command-line mentioned in the SYNOPSIS section corresponds to the Perl code</source>
          <target state="translated">SYNOPSIS 섹션에 언급 된 명령 줄은 Perl 코드에 해당합니다.</target>
        </trans-unit>
        <trans-unit id="ea72136c38b086284678c74c52f83815bf874db4" translate="yes" xml:space="preserve">
          <source>The commands &lt;code&gt;=pod&lt;/code&gt; and &lt;code&gt;=cut&lt;/code&gt; do not take any arguments.</source>
          <target state="translated">&lt;code&gt;=pod&lt;/code&gt; 및 &lt;code&gt;=cut&lt;/code&gt; 명령 은 인수를 사용하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="f1e3cdc1d66a6ddbc94785be80a34d0a817fb94d" translate="yes" xml:space="preserve">
          <source>The commands available in the shell interface are methods in the package CPAN::Shell. If you enter the shell command, your input is split by the Text::ParseWords::shellwords() routine, which acts like most shells do. The first word is interpreted as the method to be invoked, and the rest of the words are treated as the method's arguments. Continuation lines are supported by ending a line with a literal backslash.</source>
          <target state="translated">쉘 인터페이스에서 사용 가능한 명령은 CPAN :: Shell 패키지의 메소드입니다. 쉘 명령을 입력하면 대부분의 쉘처럼 작동하는 Text :: ParseWords :: shellwords () 루틴으로 입력이 분할됩니다. 첫 번째 단어는 호출 할 메소드로 해석되며 나머지 단어는 메소드의 인수로 처리됩니다. 연속 라인은 리터럴 백 슬래시로 라인을 종료하여 지원됩니다.</target>
        </trans-unit>
        <trans-unit id="50c172c64b8304a2667bbd4145cf67a46b69892f" translate="yes" xml:space="preserve">
          <source>The commit message should include a description of the problem that the patch corrects or new functionality that the patch adds.</source>
          <target state="translated">커밋 메시지에는 패치로 해결되는 문제 또는 패치가 추가 한 새로운 기능에 대한 설명이 포함되어야합니다.</target>
        </trans-unit>
        <trans-unit id="a48a6b9a39f2c1e8f05ac68afbc7708f295daa69" translate="yes" xml:space="preserve">
          <source>The common (and original) usage of B::Concise was for command-line renderings of simple code, as given in EXAMPLE. But you can also use &lt;b&gt;B::Concise&lt;/b&gt; from your code, and call compile() directly, and repeatedly. By doing so, you can avoid the compile-time only operation of O.pm, and even use the debugger to step through B::Concise::compile() itself.</source>
          <target state="translated">B :: Concise의 일반적인 (및 원래) 사용법은 예제에 제공된 것처럼 간단한 코드의 명령 줄 렌더링에 사용되었습니다. 그러나 코드에서 &lt;b&gt;B :: Concise&lt;/b&gt; 를 사용 하고 compile ()을 직접 반복해서 호출 할 수도 있습니다 . 이렇게하면 O.pm의 컴파일 타임 전용 작업을 피하고 디버거를 사용하여 B :: Concise :: compile () 자체를 단계별로 실행할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="092b88432af421400f5d15e398af7e25459b6caf" translate="yes" xml:space="preserve">
          <source>The comparison function is required to behave. If it returns inconsistent results (sometimes saying &lt;code&gt;$x[1]&lt;/code&gt; is less than &lt;code&gt;$x[2]&lt;/code&gt; and sometimes saying the opposite, for example) the results are not well-defined.</source>
          <target state="translated">비교 기능이 작동해야합니다. 일치하지 않는 결과를 반환하면 ( 예를 들어 &lt;code&gt;$x[1]&lt;/code&gt; 이 &lt;code&gt;$x[2]&lt;/code&gt; 보다 작고 때로는 반대의 경우도 있음) 결과가 잘 정의되지 않은 것입니다.</target>
        </trans-unit>
        <trans-unit id="edfa309c58fb1bf1eba2e1c0e1a54aa1aefcb60b" translate="yes" xml:space="preserve">
          <source>The compilation of a subroutine can be affected by a few compiler directives, &lt;b&gt;pragmas&lt;/b&gt;. These are:</source>
          <target state="translated">서브 루틴의 컴파일은 소수의 컴파일러 지시문 인 &lt;b&gt;pragmas의&lt;/b&gt; 영향을받을 수 있습니다 . 이것들은:</target>
        </trans-unit>
        <trans-unit id="ecde94171862ef8b275c6d67c44a792fcd8d5efd" translate="yes" xml:space="preserve">
          <source>The compile tree is executed in a runops function. There are two runops functions, in</source>
          <target state="translated">컴파일 트리는 runops 함수에서 실행됩니다. 두 가지 룬 기능이 있습니다.</target>
        </trans-unit>
        <trans-unit id="79a77bf1e2569d28ea6eda34147b4768d49e28ad" translate="yes" xml:space="preserve">
          <source>The compiler will search for typemap files called</source>
          <target state="translated">컴파일러는 다음과 같은 유형 맵 파일을 검색합니다.</target>
        </trans-unit>
        <trans-unit id="111471390604961ec6523ced1b372373b53d8003" translate="yes" xml:space="preserve">
          <source>The compiler would immediately flag that as an error</source>
          <target state="translated">컴파일러는 즉시 오류로 표시합니다.</target>
        </trans-unit>
        <trans-unit id="89f4eed42cf9fec88c7f54948d286e3b27120ba8" translate="yes" xml:space="preserve">
          <source>The complementary error function [C99].</source>
          <target state="translated">상보 오차 함수 [C99].</target>
        </trans-unit>
        <trans-unit id="ed6f778f02ef1fa177aa048ce5ee5aeaef666a7f" translate="yes" xml:space="preserve">
          <source>The complete Perl documentation is available with the Perl distribution. If you have Perl installed locally, you probably have the documentation installed as well: type &lt;code&gt;perldoc perl&lt;/code&gt; in a terminal or &lt;a href=&quot;http://search.cpan.org/perldoc/http:#%2fperldoc.perl.org%2fperl.html&quot;&gt;view online&lt;/a&gt;.</source>
          <target state="translated">완전한 Perl 문서는 Perl 배포판과 함께 제공됩니다. Perl을 로컬로 설치 한 경우 문서를 설치했을 수도 있습니다. 터미널에 &lt;code&gt;perldoc perl&lt;/code&gt; 을 입력 하거나 &lt;a href=&quot;http://search.cpan.org/perldoc/http:#%2fperldoc.perl.org%2fperl.html&quot;&gt;온라인으로보십시오&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="068df1cb71064dd3af102dcffe784783c3c8d76f" translate="yes" xml:space="preserve">
          <source>The complete array will be walked to ensure that it only contains valid filenames before any data is compressed.</source>
          <target state="translated">데이터가 압축되기 전에 유효한 파일 이름 만 포함하도록 전체 배열이 진행됩니다.</target>
        </trans-unit>
        <trans-unit id="3bc7e120c73e8eddc193ee78a2c4c1f364b17641" translate="yes" xml:space="preserve">
          <source>The complete array will be walked to ensure that it only contains valid filenames before any data is uncompressed.</source>
          <target state="translated">데이터가 압축 해제되기 전에 유효한 파일 이름 만 포함하도록 전체 배열이 진행됩니다.</target>
        </trans-unit>
        <trans-unit id="98b6ca723bf0fecfbf2258563e5ac721bc8076d0" translate="yes" xml:space="preserve">
          <source>The complete list of keys that can be specified in the &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; overload&lt;/code&gt; directive are given, separated by spaces, in the values of the hash &lt;code&gt;%overload::ops&lt;/code&gt; :</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; overload&lt;/code&gt; 지시문에 지정할 수있는 전체 키 목록은 해시 &lt;code&gt;%overload::ops&lt;/code&gt; 의 값에 공백으로 구분되어 제공됩니다 .</target>
        </trans-unit>
        <trans-unit id="52c281d1dec7eebd9b6bf4d9cf26bf4311a392cc" translate="yes" xml:space="preserve">
          <source>The complete table can be found in the Sun Managers' FAQ &lt;a href=&quot;ftp://ftp.cs.toronto.edu/pub/jdd/sunmanagers/faq&quot;&gt;ftp://ftp.cs.toronto.edu/pub/jdd/sunmanagers/faq&lt;/a&gt; under &quot;9.1) Which Sun models run which versions of SunOS?&quot;.</source>
          <target state="translated">전체 표는 &quot;9.1) 어떤 Sun 모델이 어떤 버전의 SunOS를 실행합니까?&quot; 의 Sun Managers FAQ &lt;a href=&quot;ftp://ftp.cs.toronto.edu/pub/jdd/sunmanagers/faq&quot;&gt;ftp://ftp.ftp.cs.toronto.edu/pub/jdd/sunmanagers/faq&lt;/a&gt; 에서 확인할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="243520c31a219c7d1aad4ef85de5d88764701e20" translate="yes" xml:space="preserve">
          <source>The completion character &amp;lt;tab&amp;gt; cannot be changed.</source>
          <target state="translated">완성 문자 &amp;lt;tab&amp;gt;은 변경할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="57f8fbb5c61dbf32a6295f7091431384e77ad0b9" translate="yes" xml:space="preserve">
          <source>The complicated syntaxes of this code are discussed at length in &lt;a href=&quot;perlpod#Formatting-Codes&quot;&gt;Formatting Codes in perlpod&lt;/a&gt;, and implementation details are discussed below, in &lt;a href=&quot;#About-L%3c...%3e-Codes&quot;&gt;About L&amp;lt;...&amp;gt; Codes&lt;/a&gt;. Parsing the contents of L&amp;lt;content&amp;gt; is tricky. Notably, the content has to be checked for whether it looks like a URL, or whether it has to be split on literal &quot;|&quot; and/or &quot;/&quot; (in the right order!), and so on,</source>
          <target state="translated">이 코드의 복잡한 구문은 &lt;a href=&quot;perlpod#Formatting-Codes&quot;&gt;perlpod의 형식화 코드에서&lt;/a&gt; 자세히 설명하며 구현 세부 사항은 &lt;a href=&quot;#About-L%3c...%3e-Codes&quot;&gt;L &amp;lt;...&amp;gt; 코드 정보&lt;/a&gt; 에서 아래에 설명되어 있습니다 . L &amp;lt;content&amp;gt;의 내용을 파싱하는 것은 까다 롭습니다. 특히 콘텐츠가 URL처럼 보이는지 또는 리터럴 &quot;|&quot;로 분할되어야하는지 여부를 확인해야합니다. 및 / 또는 &quot;/&quot;(올바른 순서로) 등</target>
        </trans-unit>
        <trans-unit id="3e080e954af33f166a94bcfa488743e85b7e060c" translate="yes" xml:space="preserve">
          <source>The compound way of writing these is like &lt;code&gt;\p{General_Category=Number}&lt;/code&gt; (short: &lt;code&gt;\p{gc:n}&lt;/code&gt; ). But Perl furnishes shortcuts in which everything up through the equal or colon separator is omitted. So you can instead just write &lt;code&gt;\pN&lt;/code&gt; .</source>
          <target state="translated">이를 작성하는 복합적인 방법은 &lt;code&gt;\p{General_Category=Number}&lt;/code&gt; (약식 : &lt;code&gt;\p{gc:n}&lt;/code&gt; )와 같습니다. 그러나 Perl은 동일하거나 콜론 분리자를 통해 모든 것이 생략되는 바로 가기를 제공합니다. 따라서 대신 &lt;code&gt;\pN&lt;/code&gt; 쓸 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="c4be8f3e8beb322b0e55f10e2929087827e8f380" translate="yes" xml:space="preserve">
          <source>The computer on which a program or other data resides.</source>
          <target state="translated">프로그램 또는 기타 데이터가있는 컴퓨터</target>
        </trans-unit>
        <trans-unit id="cfcbad8d7cd3118bc2c84750149f972c9d76bac3" translate="yes" xml:space="preserve">
          <source>The concatenation operator is &quot;.&quot;, not the null string. (Using the null string would render &lt;code&gt;/pat/ /pat/&lt;/code&gt; unparsable, because the third slash would be interpreted as a division operator--the tokenizer is in fact slightly context sensitive for operators like &quot;/&quot;, &quot;?&quot;, and &quot;&amp;gt;&quot;. And in fact, &quot;.&quot; itself can be the beginning of a number.)</source>
          <target state="translated">연결 연산자는 널 문자열이 아닌 &quot;.&quot;입니다. (널 문자열을 사용하면 &lt;code&gt;/pat/ /pat/&lt;/code&gt; 해석 할 수 없습니다. 세 번째 슬래시는 나누기 연산자로 해석되기 때문에 토크 나이 저는 실제로 &quot;/&quot;, &quot;?&quot;및 &quot;&amp;gt; &quot;. 그리고 실제로&quot;. &quot;자체는 숫자의 시작일 수 있습니다.)</target>
        </trans-unit>
        <trans-unit id="7397c296c9007588d87f382f9ceff5394823ef48" translate="yes" xml:space="preserve">
          <source>The concise style uses symbols to convey maximum info with minimal clutter (like hex addresses). With just a little practice, you can start to see the flowers, not just the branches, in the trees.</source>
          <target state="translated">간결한 스타일은 기호를 사용하여 16 진수 주소와 같은 최소한의 혼란으로 최대 정보를 전달합니다. 약간의 연습만으로도 나무에서 가지뿐만 아니라 꽃을 볼 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d9749679dc3561ae81ba863d8e80238321089767" translate="yes" xml:space="preserve">
          <source>The concrete formatter must implement</source>
          <target state="translated">콘크리트 포맷터는</target>
        </trans-unit>
        <trans-unit id="ec6253a94addb83f76f25a71c4752860278fa23c" translate="yes" xml:space="preserve">
          <source>The conditions can be any Perl expression. See the list of operators in the next section for information on comparison and boolean logic operators, which are commonly used in conditional statements.</source>
          <target state="translated">조건은 모든 Perl 표현식 일 수 있습니다. 조건문에 일반적으로 사용되는 비교 및 ​​부울 논리 연산자에 대한 정보는 다음 섹션의 연산자 목록을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="543b88d3ab70df9ad92d2d1112ca25224746b1f5" translate="yes" xml:space="preserve">
          <source>The configuration data is held globally in a file in the perl installation tree, but a user may override any of these values by providing their own. This can be done by having a &lt;code&gt;.libnetrc&lt;/code&gt; file in their home directory. This file should return a reference to a HASH containing the keys described below. For example</source>
          <target state="translated">구성 데이터는 전체적으로 perl 설치 트리의 파일에 보관되지만 사용자는 고유 한 값을 제공하여 이러한 값을 대체 할 수 있습니다. 홈 디렉토리에 &lt;code&gt;.libnetrc&lt;/code&gt; 파일 이 있으면이를 수행 할 수 있습니다 . 이 파일은 아래 설명 된 키가 포함 된 HASH에 대한 참조를 반환해야합니다. 예를 들어</target>
        </trans-unit>
        <trans-unit id="9a78f97fbb5cf4075595c0b03128bde7af0266c1" translate="yes" xml:space="preserve">
          <source>The configuration dialog can be started any time later again by issuing the command &lt;code&gt; o conf init &lt;/code&gt; in the CPAN shell. A subset of the configuration dialog can be run by issuing &lt;code&gt;o conf init WORD&lt;/code&gt; where WORD is any valid config variable or a regular expression.</source>
          <target state="translated">CPAN 쉘에서 &lt;code&gt; o conf init &lt;/code&gt; 명령을 실행하여 나중에 구성 대화 상자를 다시 시작할 수 있습니다 . &lt;code&gt;o conf init WORD&lt;/code&gt; 를 발행하여 구성 대화 상자의 서브 세트를 실행할 수 있습니다. 여기서 WORD는 유효한 구성 변수 또는 정규식입니다.</target>
        </trans-unit>
        <trans-unit id="b4c7562be2672acce7fe43e87808c7f47379f387" translate="yes" xml:space="preserve">
          <source>The configuration parameter check_sigs is there to turn signature checking on or off.</source>
          <target state="translated">구성 매개 변수 check_sigs는 서명 확인을 켜거나 끄는 것입니다.</target>
        </trans-unit>
        <trans-unit id="92e8c71c043d1ee5895cf5c5a239168a7f0a8975" translate="yes" xml:space="preserve">
          <source>The confusion arises because people incorrectly assume that the sigil denotes the variable type.</source>
          <target state="translated">사람들이시길이 변수 유형을 나타내는 것으로 잘못 가정하기 때문에 혼란이 발생합니다.</target>
        </trans-unit>
        <trans-unit id="72def2ab61e0c7e7dccd965b3f9393136d20aa03" translate="yes" xml:space="preserve">
          <source>The constant &lt;code&gt;pi&lt;/code&gt; and some handy multiples of it (pi2, pi4, and pip2 (pi/2) and pip4 (pi/4)) are also available if separately exported:</source>
          <target state="translated">별도로 pi를 내 보내면 상수 &lt;code&gt;pi&lt;/code&gt; 와 일부 편리한 배수 (pi2, pi4 및 pip2 (pi / 2) 및 pip4 (pi / 4))도 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c81821f9e03375c52f91dde5667119328458dcfd" translate="yes" xml:space="preserve">
          <source>The constant function &lt;code&gt;Storable::BIN_VERSION_NV&lt;/code&gt; returns a comparable number that represents the highest file version number that this version of Storable fully supports (but see discussion of &lt;code&gt;$Storable::accept_future_minor&lt;/code&gt; above). The constant &lt;code&gt;Storable::BIN_WRITE_VERSION_NV&lt;/code&gt; function returns what file version is written and might be less than &lt;code&gt;Storable::BIN_VERSION_NV&lt;/code&gt; in some configurations.</source>
          <target state="translated">상수 함수 &lt;code&gt;Storable::BIN_VERSION_NV&lt;/code&gt; 는이 Storable 버전이 완전히 지원하는 가장 높은 파일 버전 번호를 나타내는 비교 가능한 숫자를 리턴합니다 (그러나 위 의 &lt;code&gt;$Storable::accept_future_minor&lt;/code&gt; 대한 설명 참조 ). 상수 &lt;code&gt;Storable::BIN_WRITE_VERSION_NV&lt;/code&gt; 함수는 작성된 파일 버전을 리턴 하며 일부 구성에서 &lt;code&gt;Storable::BIN_VERSION_NV&lt;/code&gt; 보다 작을 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="9018d00ba0cf85500f9049cabc293077c6a815d2" translate="yes" xml:space="preserve">
          <source>The construct</source>
          <target state="translated">구조</target>
        </trans-unit>
        <trans-unit id="8226460345430ec3df47c2bd35c2d238766995a6" translate="yes" xml:space="preserve">
          <source>The construct &lt;code&gt;\$v{timep}=@{[$v{timep}=$arg]}&lt;/code&gt; used in the above example has a two-fold purpose: first, when this line is processed by &lt;b&gt;xsubpp&lt;/b&gt;, the Perl snippet &lt;code&gt;$v{timep}=$arg&lt;/code&gt; is evaluated. Second, the text of the evaluated snippet is output into the generated C file (inside a C comment)! During the processing of &lt;code&gt;char *host&lt;/code&gt; line, &lt;code&gt;$arg&lt;/code&gt; will evaluate to &lt;code&gt;ST(0)&lt;/code&gt; , and &lt;code&gt;$v{timep}&lt;/code&gt; will evaluate to &lt;code&gt;ST(1)&lt;/code&gt; .</source>
          <target state="translated">위 예제에서 사용 된 구문 &lt;code&gt;\$v{timep}=@{[$v{timep}=$arg]}&lt;/code&gt; 는 두 가지 목적을 가지고 있습니다. &lt;b&gt;먼저이&lt;/b&gt; 줄이 &lt;b&gt;xsubpp&lt;/b&gt; 에 의해 처리 될 때 Perl 스 니펫 &lt;code&gt;$v{timep}=$arg&lt;/code&gt; 가 평가됩니다. 둘째, 평가 된 스 니펫의 텍스트가 생성 된 C 파일 (C 주석 내부)에 출력됩니다! &lt;code&gt;char *host&lt;/code&gt; 행을 처리하는 동안 &lt;code&gt;$arg&lt;/code&gt; 는 &lt;code&gt;ST(0)&lt;/code&gt; 평가 되고 &lt;code&gt;$v{timep}&lt;/code&gt; 는 &lt;code&gt;ST(1)&lt;/code&gt; 평가됩니다 .</target>
        </trans-unit>
        <trans-unit id="b59007854896f819ee065a798da86e7867bce96e" translate="yes" xml:space="preserve">
          <source>The constructor &lt;code&gt;new&lt;/code&gt; creates and returns an empty &lt;code&gt;TAP::Parser::YAMLish::Reader&lt;/code&gt; object.</source>
          <target state="translated">&lt;code&gt;new&lt;/code&gt; 생성자 는 빈 &lt;code&gt;TAP::Parser::YAMLish::Reader&lt;/code&gt; 객체를 만들어 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="1bad8668cdf1d431ad701326f6748ece18b79658" translate="yes" xml:space="preserve">
          <source>The constructor &lt;code&gt;new&lt;/code&gt; creates and returns an empty &lt;code&gt;TAP::Parser::YAMLish::Writer&lt;/code&gt; object.</source>
          <target state="translated">&lt;code&gt;new&lt;/code&gt; 생성자 는 빈 &lt;code&gt;TAP::Parser::YAMLish::Writer&lt;/code&gt; 객체를 만들어 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="4c2fcf35a44aabf097cd59f3a3854953c70e5fcd" translate="yes" xml:space="preserve">
          <source>The constructor can also accept additional parameters that define the object. Let's write a real constructor for the &lt;code&gt;File&lt;/code&gt; class we used earlier:</source>
          <target state="translated">생성자는 객체를 정의하는 추가 매개 변수를 사용할 수도 있습니다. 앞에서 사용한 &lt;code&gt;File&lt;/code&gt; 클래스 의 실제 생성자를 작성해 보겠습니다 .</target>
        </trans-unit>
        <trans-unit id="3a88176407788666ff0021721dd4e56b3400cf3f" translate="yes" xml:space="preserve">
          <source>The constructor creates a new object and optionally initialises it with a set of handles.</source>
          <target state="translated">생성자는 새 객체를 만들고 선택적으로 핸들 세트로 초기화합니다.</target>
        </trans-unit>
        <trans-unit id="26002f2b8ad63b7adc28307355437aa48afa5d7b" translate="yes" xml:space="preserve">
          <source>The constructor for a &lt;code&gt;Net::Netrc&lt;/code&gt; object is not called new as it does not really create a new object. But instead is called &lt;code&gt;lookup&lt;/code&gt; as this is essentially what it does.</source>
          <target state="translated">&lt;code&gt;Net::Netrc&lt;/code&gt; 객체 의 생성자는 실제로 새 객체를 만들지 않으므로 new라고하지 않습니다. 그러나 이것이 기본적으로 &lt;code&gt;lookup&lt;/code&gt; 되는 작업이므로 조회 라고 합니다.</target>
        </trans-unit>
        <trans-unit id="5e4047980f5ac3eb3127d3d68b5f254e9299a0fd" translate="yes" xml:space="preserve">
          <source>The constructor for all the singletons used to represent modules, distributions, authors, and bundles. If the object already exists, this method returns the object; otherwise, it calls the constructor.</source>
          <target state="translated">모듈, 배포판, 작성자 및 번들을 나타내는 데 사용되는 모든 싱글 톤의 생성자입니다. 객체가 이미 존재하는 경우이 메소드는 객체를 반환합니다. 그렇지 않으면 생성자를 호출합니다.</target>
        </trans-unit>
        <trans-unit id="a54cf785d15de998f3ac18ade864f218319b1ee1" translate="yes" xml:space="preserve">
          <source>The constructor of a generated class can be passed a list of</source>
          <target state="translated">생성 된 클래스의 생성자에게</target>
        </trans-unit>
        <trans-unit id="bb7df7aab984a9c0e691c8f805de279350cf56e0" translate="yes" xml:space="preserve">
          <source>The constructor returns a new &lt;code&gt;Digest::MD5&lt;/code&gt; object which encapsulate the state of the MD5 message-digest algorithm.</source>
          <target state="translated">생성자는 MD5 메시지 요약 알고리즘의 상태를 캡슐화 하는 새로운 &lt;code&gt;Digest::MD5&lt;/code&gt; 객체를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="2e6b2441df01bfc969fd7dfde15484f966dcaf52" translate="yes" xml:space="preserve">
          <source>The constructor returns a new &lt;code&gt;TAP::Formatter::Color&lt;/code&gt; object. If &lt;a href=&quot;../../term/ansicolor&quot;&gt;Term::ANSIColor&lt;/a&gt; is not installed, returns undef.</source>
          <target state="translated">생성자는 새로운 &lt;code&gt;TAP::Formatter::Color&lt;/code&gt; 객체를 반환 합니다. 경우 &lt;a href=&quot;../../term/ansicolor&quot;&gt;기간 : ANSIColor가&lt;/a&gt; 설치되어 있지 않은, 반환 undef를.</target>
        </trans-unit>
        <trans-unit id="972195b07373ba2fa384173c37fb399dc7626fb1" translate="yes" xml:space="preserve">
          <source>The constructor returns a new &lt;code&gt;TAP::Formatter::Console::Session&lt;/code&gt; object.</source>
          <target state="translated">생성자는 새로운 &lt;code&gt;TAP::Formatter::Console::Session&lt;/code&gt; 객체를 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="64d08d3b354e3667ab5da2f82eaec44dd6d25ea5" translate="yes" xml:space="preserve">
          <source>The constructor returns a new &lt;code&gt;TAP::Formatter::Console&lt;/code&gt; object. If a &lt;a href=&quot;../harness&quot;&gt;TAP::Harness&lt;/a&gt; is created with no &lt;code&gt;formatter&lt;/code&gt; a &lt;code&gt;TAP::Formatter::Console&lt;/code&gt; is automatically created. If any of the following options were given to TAP::Harness-&amp;gt;new they well be passed to this constructor which accepts an optional hashref whose allowed keys are:</source>
          <target state="translated">생성자는 새로운 &lt;code&gt;TAP::Formatter::Console&lt;/code&gt; 객체를 반환 합니다. 경우 &lt;a href=&quot;../harness&quot;&gt;TAP :: 하네스가&lt;/a&gt; 더으로 작성되지 않습니다 &lt;code&gt;formatter&lt;/code&gt; &lt;code&gt;TAP::Formatter::Console&lt;/code&gt; 자동으로 생성됩니다. 다음 옵션 중 하나가 TAP :: Harness-&amp;gt; new에 제공된 경우 허용 된 키가있는 선택적 hashref를 허용하는이 생성자에 전달됩니다.</target>
        </trans-unit>
        <trans-unit id="cdf8ec5d8f9e8688b8b1e013d18928a0b5fdbbeb" translate="yes" xml:space="preserve">
          <source>The constructor returns a new &lt;code&gt;TAP::Harness&lt;/code&gt; object. It accepts an optional hashref whose allowed keys are:</source>
          <target state="translated">생성자는 새로운 &lt;code&gt;TAP::Harness&lt;/code&gt; 객체를 반환 합니다. 허용되는 키가 다음과 같은 선택적 해시 참조를 허용합니다.</target>
        </trans-unit>
        <trans-unit id="093c7ac00d4bfb4c1a8deee532d1b8ad2334e8c0" translate="yes" xml:space="preserve">
          <source>The constructor returns some object that encapsulate the state of the message-digest algorithm. You can add data to the object and finally ask for the digest. The &quot;XXX&quot; should of course be replaced by the proper name of the digest algorithm you want to use.</source>
          <target state="translated">생성자는 메시지 요약 알고리즘의 상태를 캡슐화하는 일부 객체를 반환합니다. 객체에 데이터를 추가하고 마지막으로 다이제스트를 요청할 수 있습니다. 물론 &quot;XXX&quot;는 사용하려는 다이제스트 알고리즘의 올바른 이름으로 바꿔야합니다.</target>
        </trans-unit>
        <trans-unit id="f4ebdab724a22632fec3a1d054882b1bc817c7d6" translate="yes" xml:space="preserve">
          <source>The content of the here doc is treated just as it would be if the string were embedded in backticks. Thus the content is interpolated as though it were double quoted and then executed via the shell, with the results of the execution returned.</source>
          <target state="translated">here doc의 내용은 문자열이 백틱에 포함 된 것처럼 처리됩니다. 따라서 내용은 큰 따옴표로 묶은 다음 셸을 통해 실행 된 것처럼 보간되어 실행 결과가 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="6af50a9986dd8fc345d5bd2a482a8608eafdf212" translate="yes" xml:space="preserve">
          <source>The content of the text chunk in the buffer is commonly exactly one complete line of input, up to and including a newline terminator, but there are situations where it is otherwise. The octets of the buffer may be intended to be interpreted as either UTF-8 or Latin-1. The function &lt;a href=&quot;#lex_bufutf8&quot;&gt;lex_bufutf8&lt;/a&gt; tells you which. Do not use the &lt;code&gt;SvUTF8&lt;/code&gt; flag on this scalar, which may disagree with it.</source>
          <target state="translated">버퍼에서 텍스트 청크의 내용은 일반적으로 줄 바꿈 종결자를 포함하여 정확히 하나의 완전한 입력 줄이지 만, 그렇지 않은 경우가 있습니다. 버퍼의 옥텟은 UTF-8 또는 Latin-1로 해석 될 수 있습니다. &lt;a href=&quot;#lex_bufutf8&quot;&gt;lex_bufutf8&lt;/a&gt; 함수는 어느 것을 알려줍니다. 이 스칼라 에서 &lt;code&gt;SvUTF8&lt;/code&gt; 플래그를 사용하면 동의하지 않을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3c50b9c6cd39ffa60fa752e0357613216ec7e1d3" translate="yes" xml:space="preserve">
          <source>The contents of &lt;code&gt;$/&lt;/code&gt; are used to determine what constitutes a line terminator.</source>
          <target state="translated">&lt;code&gt;$/&lt;/code&gt; 의 내용은 라인 종결자를 구성하는 것을 결정하는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="18d18ed7c7a8db27a58a80fd58640cc3bbfe1bce" translate="yes" xml:space="preserve">
          <source>The contents of the Comment header field, if present. If no comment is present, the value will be undef. Note this is different from a zero length comment, which will return an empty string.</source>
          <target state="translated">주석 머리글 필드의 내용입니다 (있는 경우). 주석이 없으면 값이 정의되지 않습니다. 이것은 길이가 0 인 주석과 다르며 빈 문자열을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="f67589a8aeaaf0494de7c02234d42e486e771e87" translate="yes" xml:space="preserve">
          <source>The contents of the Name header field, if present. If no name is present, the value will be undef. Note this is different from a zero length name, which will return an empty string.</source>
          <target state="translated">존재하는 경우 이름 헤더 필드의 내용 이름이 없으면 값은 정의되지 않습니다. 이것은 길이가 0 인 이름과 다르며 빈 문자열을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="9456b1413183ce2a7cacbf69ac958ec33df9e078" translate="yes" xml:space="preserve">
          <source>The contents of the above &quot;=begin :yetanotherformat&quot; ... &quot;=end :yetanotherformat&quot; region</source>
          <target state="translated">위의 &quot;= begin : yetanotherformat&quot;... &quot;= end : yetanotherformat&quot;영역의 내용</target>
        </trans-unit>
        <trans-unit id="7bdc8b3d3c8ea3698e851bea6c870ef22be74842" translate="yes" xml:space="preserve">
          <source>The contents of the string are split into arguments using a call to &lt;code&gt;Text::ParseWords::shellwords&lt;/code&gt; . As with &lt;code&gt;GetOptionsFromArray&lt;/code&gt; , the global &lt;code&gt;@ARGV&lt;/code&gt; is not touched.</source>
          <target state="translated">문자열의 내용은 &lt;code&gt;Text::ParseWords::shellwords&lt;/code&gt; 대한 호출을 사용하여 인수로 분할됩니다 . 와 마찬가지로 &lt;code&gt;GetOptionsFromArray&lt;/code&gt; , 글로벌 &lt;code&gt;@ARGV&lt;/code&gt; 은 건드리지 않는다.</target>
        </trans-unit>
        <trans-unit id="ee0a191734836657a10b5b7b1f37002c95e61a13" translate="yes" xml:space="preserve">
          <source>The contents of the string changes, but not the nature of the string. Perl doesn't know any more after the call than before that the contents of the string indicates the affirmative.</source>
          <target state="translated">문자열의 내용은 변하지 만 문자열의 본질은 변하지 않습니다. 펄은 문자열의 내용이 긍정을 나타내는 것보다 전화를 한 후에 더 이상 알지 못한다.</target>
        </trans-unit>
        <trans-unit id="fa23695f3fe9b71ce5ed23d56ccd05be2c1e1b36" translate="yes" xml:space="preserve">
          <source>The contents should be an integer; different bits of it are used for different pragmatic flags. Here's an example:</source>
          <target state="translated">내용은 정수 여야합니다. 그것의 다른 비트는 다른 실용적인 플래그에 사용됩니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="29b067c45824f7dfd004988f65509a605101a269" translate="yes" xml:space="preserve">
          <source>The context (void, scalar or list) for the return value(s) for &lt;code&gt;-&amp;gt;join()&lt;/code&gt; is determined at the time of thread creation.</source>
          <target state="translated">&lt;code&gt;-&amp;gt;join()&lt;/code&gt; 대한 리턴 값에 대한 컨텍스트 (void, 스칼라 또는 목록) 는 스레드 작성시 결정됩니다.</target>
        </trans-unit>
        <trans-unit id="cafef0e58c037c46bb556fc0f1a1471183c9edb3" translate="yes" xml:space="preserve">
          <source>The context type may also be used as the</source>
          <target state="translated">컨텍스트 유형은</target>
        </trans-unit>
        <trans-unit id="cd3e46d3e11cb302e5746c299ddd22b0f06326e3" translate="yes" xml:space="preserve">
          <source>The context-free version of Perl_warner is called Perl_warner_nocontext, and does not take the extra argument. Instead it does dTHX; to get the context from thread-local storage. We &lt;code&gt;#define warner Perl_warner_nocontext&lt;/code&gt; so that extensions get source compatibility at the expense of performance. (Passing an arg is cheaper than grabbing it from thread-local storage.)</source>
          <target state="translated">컨텍스트없는 버전의 Perl_warner를 Perl_warner_nocontext라고하며 추가 인수를 사용하지 않습니다. 대신 dTHX를 수행합니다. 스레드 로컬 스토리지에서 컨텍스트를 가져옵니다. 우리는 &lt;code&gt;#define warner Perl_warner_nocontext&lt;/code&gt; 성능이 저하 때문에 확장을 얻을 소스 호환성. arg를 전달하는 것은 스레드 로컬 스토리지에서 가져 오는 것보다 저렴합니다.</target>
        </trans-unit>
        <trans-unit id="a306525389293789c4d3b564d2695ad27f640911" translate="yes" xml:space="preserve">
          <source>The conversion from Perl to C is left as an exercise to the reader, but the prototype would be:</source>
          <target state="translated">Perl에서 C 로의 변환은 독자에게 연습으로 남겨 두지 만 프로토 타입은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="5dab7a329fdfbc3426218724b9a43e87edffc6ee" translate="yes" xml:space="preserve">
          <source>The copy constructor is called only before a call to a function declared to implement a mutator, for example, if &lt;code&gt;++$b;&lt;/code&gt; in the code above is effected via a method declared for key &lt;code&gt;'++'&lt;/code&gt; (or 'nomethod', passed &lt;code&gt;'++'&lt;/code&gt; as the fourth argument) or, by autogeneration, &lt;code&gt;'+='&lt;/code&gt; . It is not called if the increment operation is effected by a call to the method for &lt;code&gt;'+'&lt;/code&gt; since, in the equivalent code,</source>
          <target state="translated">복사 생성자는 뮤 테이터를 구현하도록 선언 된 함수를 호출하기 전에 만 호출됩니다 (예 : &lt;code&gt;++$b;&lt;/code&gt; 위의 코드에서 키 &lt;code&gt;'++'&lt;/code&gt; (또는 'nomethod', 네 번째 인수로 &lt;code&gt;'++'&lt;/code&gt; 를 전달한 ' nomethod')에 대해 선언 된 메소드 또는 자동 생성에 의해 &lt;code&gt;'+='&lt;/code&gt; 가 적용 됩니다. 등가 코드에서 &lt;code&gt;'+'&lt;/code&gt; 에 대한 메소드 호출로 증가 조작이 수행되는 경우 호출되지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="ed73a5b2044d7fb703c52c07bf589cfde908abd5" translate="yes" xml:space="preserve">
          <source>The copy constructor is not called if Perl determines that it is unnecessary because there is no other reference to the data being modified.</source>
          <target state="translated">Perl이 수정중인 데이터에 대한 다른 참조가 없기 때문에 불필요하다고 판단하면 복사 생성자가 호출되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="dd210b745dfa94e566cd092061cca3c4c3e619ac" translate="yes" xml:space="preserve">
          <source>The core &lt;a href=&quot;devel/peek&quot;&gt;Devel::Peek&lt;/a&gt; module lets us examine SVs from a Perl program. Let's see, for instance, how Perl treats the constant &lt;code&gt;&quot;hello&quot;&lt;/code&gt; .</source>
          <target state="translated">핵심 &lt;a href=&quot;devel/peek&quot;&gt;Devel :: Peek&lt;/a&gt; 모듈을 사용하면 Perl 프로그램에서 SV를 검사 할 수 있습니다. 예를 들어, Perl이 상수 &lt;code&gt;&quot;hello&quot;&lt;/code&gt; 를 어떻게 처리하는지 봅시다 .</target>
        </trans-unit>
        <trans-unit id="216872d0879be12be32ab51a2f74dd9e0b301e2c" translate="yes" xml:space="preserve">
          <source>The core development team (known as the Perl Porters) are a group of highly altruistic individuals committed to producing better software for free than you could hope to purchase for money. You may snoop on pending developments via the &lt;a href=&quot;http://search.cpan.org/perldoc/http:#%2fwww.nntp.perl.org%2fgroup%2fperl.perl5.porters%2f&quot;&gt;archives&lt;/a&gt; or read the &lt;a href=&quot;http://search.cpan.org/perldoc/http:#%2fdev.perl.org%2fperl5%2fdocs%2fp5p-faq.html&quot;&gt;faq&lt;/a&gt;, or you can subscribe to the mailing list by sending perl5-porters-subscribe@perl.org a subscription request (an empty message with no subject is fine).</source>
          <target state="translated">핵심 개발 팀 (Perl Porters라고도 함)은 돈으로 구매할 수있는 것보다 더 나은 소프트웨어를 무료로 생산하기 위해 노력하는 고도로 이타적인 개인 그룹입니다. &lt;a href=&quot;http://search.cpan.org/perldoc/http:#%2fwww.nntp.perl.org%2fgroup%2fperl.perl5.porters%2f&quot;&gt;아카이브&lt;/a&gt; 를 통해 보류중인 개발을 스누핑 하거나 &lt;a href=&quot;http://search.cpan.org/perldoc/http:#%2fdev.perl.org%2fperl5%2fdocs%2fp5p-faq.html&quot;&gt;faq를&lt;/a&gt; 읽 거나 perl5-porters-subscribe@perl.org에 구독 요청 (제목이없는 빈 메시지는 괜찮음)을 보내 메일 링리스트에 가입 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="0cd6f3115d2d6dbe91a070c10c729356bd227008" translate="yes" xml:space="preserve">
          <source>The core distribution can now run its regression tests in parallel on Unix-like platforms. Instead of running &lt;code&gt;make test&lt;/code&gt; , set &lt;code&gt;TEST_JOBS&lt;/code&gt; in your environment to the number of tests to run in parallel, and run &lt;code&gt;make test_harness&lt;/code&gt; . On a Bourne-like shell, this can be done as</source>
          <target state="translated">코어 배포는 이제 유닉스 계열 플랫폼에서 병렬로 회귀 테스트를 실행할 수 있습니다. &lt;code&gt;make test&lt;/code&gt; 를 실행 하는 대신 환경에서 &lt;code&gt;TEST_JOBS&lt;/code&gt; 를 병렬로 실행할 테스트 수로 설정 하고 &lt;code&gt;make test_harness&lt;/code&gt; 를 실행 하십시오 . Bourne과 같은 쉘에서 다음과 같이 수행 할 수 있습니다</target>
        </trans-unit>
        <trans-unit id="e662bc8801eef788dff3d6316ec77e7ad811db79" translate="yes" xml:space="preserve">
          <source>The core uses the same testing style as the rest of Perl, a simple &quot;ok/not ok&quot; run through Test::Harness, but there are a few special considerations.</source>
          <target state="translated">코어는 Test :: Harness를 통해 실행되는 간단한 &quot;ok / not ok&quot;인 Perl의 나머지와 동일한 테스트 스타일을 사용하지만 몇 가지 특별한 고려 사항이 있습니다.</target>
        </trans-unit>
        <trans-unit id="a3ac8ff08d630fcfeea5350e81e0c2b799df3c84" translate="yes" xml:space="preserve">
          <source>The corpse of a &lt;b&gt;process&lt;/b&gt;, in the form of a file left in the &lt;b&gt;working directory&lt;/b&gt; of the process, usually as a result of certain kinds of fatal errors.</source>
          <target state="translated">a의 시체 &lt;b&gt;처리&lt;/b&gt; 파일의 형태는 남아 &lt;b&gt;작업 디렉토리&lt;/b&gt; 보통 치명적 오류의 특정 종류의 결과로, 프로세스의.</target>
        </trans-unit>
        <trans-unit id="ad72ec528dbf7e40ea844e46e3a129f3b3eadb6f" translate="yes" xml:space="preserve">
          <source>The correct code is &lt;code&gt;MAN3PODS =&amp;gt; { }&lt;/code&gt; .</source>
          <target state="translated">올바른 코드는 &lt;code&gt;MAN3PODS =&amp;gt; { }&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="7eb7322d9e711d10a989215f61754b35fdcb57a5" translate="yes" xml:space="preserve">
          <source>The correct procedure, then, is to use &lt;code&gt;newRV_noinc&lt;/code&gt; instead of &lt;code&gt;newRV_inc&lt;/code&gt; . Then, if and when the last reference is destroyed, the reference count of the SV will go to zero and it will be destroyed, stopping any memory leak.</source>
          <target state="translated">올바른 절차는 다음 사용하는 것입니다 &lt;code&gt;newRV_noinc&lt;/code&gt; 대신 &lt;code&gt;newRV_inc&lt;/code&gt; 을 . 그런 다음 마지막 참조가 파괴되면 SV의 참조 카운트가 0이되고 파괴되어 메모리 누수가 중단됩니다.</target>
        </trans-unit>
        <trans-unit id="e90480b056b891e1197a3bfca2f65f9341469925" translate="yes" xml:space="preserve">
          <source>The correspondence between OPs and</source>
          <target state="translated">OP와의 대응</target>
        </trans-unit>
        <trans-unit id="3e632bae0f91b7fe9b42695b7f4eb9541547d7ab" translate="yes" xml:space="preserve">
          <source>The corresponding bright foreground color attributes (colors 8 to 15) are:</source>
          <target state="translated">해당 밝은 전경색 속성 (8 ~ 15 색)은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="15d3a8f91abd0b678be46a5c74457eb9c1a22a59" translate="yes" xml:space="preserve">
          <source>The corresponding command to get the current value of &lt;code&gt;$version&lt;/code&gt; is:</source>
          <target state="translated">&lt;code&gt;$version&lt;/code&gt; 의 현재 값을 가져 오는 해당 명령 은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="05b1215b3085d02b291dbd96e47ab01de8dfb44a" translate="yes" xml:space="preserve">
          <source>The corresponding values are interpreted as regular expressions. The &lt;code&gt;distribution&lt;/code&gt; related one will be matched against the canonical distribution name, e.g. &quot;AUTHOR/Foo-Bar-3.14.tar.gz&quot;.</source>
          <target state="translated">해당 값은 정규식으로 해석됩니다. &lt;code&gt;distribution&lt;/code&gt; 관련 하나는 정규 분포의 이름, 예를 들어 &quot;저자 / 푸 바-3.14.tar.gz&quot;에 대해 일치됩니다.</target>
        </trans-unit>
        <trans-unit id="128893376b086988df0b6fe82266dcff7ded3c2c" translate="yes" xml:space="preserve">
          <source>The corresponding values are references to functions which take three arguments: the first one is the</source>
          <target state="translated">해당 값은 세 개의 인수를 취하는 함수에 대한 참조입니다. 첫 번째는</target>
        </trans-unit>
        <trans-unit id="6d3c7b629f0ebabb7666a1418d689e5fcefefd4a" translate="yes" xml:space="preserve">
          <source>The count of the saved lines in the history (assuming &lt;code&gt;HistFile&lt;/code&gt; above).</source>
          <target state="translated">히스토리에 저장된 행의 수입니다 ( 위의 &lt;code&gt;HistFile&lt;/code&gt; 가정 ).</target>
        </trans-unit>
        <trans-unit id="8a76e9ed23620e2d0138b893f98a44b589dac036" translate="yes" xml:space="preserve">
          <source>The cpd tool detects cut-and-paste coding. If one instance of the cut-and-pasted code changes, all the other spots should probably be changed, too. Therefore such code should probably be turned into a subroutine or a macro.</source>
          <target state="translated">cpd 도구는 잘라 내기 및 붙여 넣기 코딩을 감지합니다. 잘라서 붙여 넣은 코드의 한 인스턴스가 변경되면 다른 모든 스팟도 변경해야합니다. 따라서 이러한 코드는 아마도 서브 루틴 또는 매크로로 바뀌어야합니다.</target>
        </trans-unit>
        <trans-unit id="4315b91912980da8ee0d1d0ed73982372319566a" translate="yes" xml:space="preserve">
          <source>The critical thing when considering performance is to remember there is no such thing as a &lt;code&gt;Golden Bullet&lt;/code&gt; , which is why there are no rules, only guidelines.</source>
          <target state="translated">성능을 고려할 때 중요한 것은 &lt;code&gt;Golden Bullet&lt;/code&gt; 과 같은 것이 없다는 것을 기억 하는 것입니다. 따라서 규칙이없고 지침 만 있습니다.</target>
        </trans-unit>
        <trans-unit id="2b2f6d378553efd3b9ab7bab3a4069e081f7b24e" translate="yes" xml:space="preserve">
          <source>The crucial thing to understand about the Windows environment is that the command line you type in is processed twice before Perl sees it. First, your command shell (usually CMD.EXE) preprocesses the command line, to handle redirection, environment variable expansion, and location of the executable to run. Then, the perl executable splits the remaining command line into individual arguments, using the C runtime library upon which Perl was built.</source>
          <target state="translated">Windows 환경에 대해 알아야 할 중요한 사항은 입력 한 명령 줄이 Perl에 표시되기 전에 두 번 처리된다는 것입니다. 먼저 명령 셸 (일반적으로 CMD.EXE)은 명령 줄을 사전 처리하여 리디렉션, 환경 변수 확장 및 실행할 실행 파일의 위치를 ​​처리합니다. 그런 다음 perl 실행 파일은 Perl이 빌드 된 C 런타임 라이브러리를 사용하여 나머지 명령 행을 개별 인수로 분할합니다.</target>
        </trans-unit>
        <trans-unit id="1bc259f8a74780b8f0344bb67ea81414fbf6762f" translate="yes" xml:space="preserve">
          <source>The crypt package distributed with Cygwin is a Linux compatible 56-bit DES crypt port by Corinna Vinschen.</source>
          <target state="translated">Cygwin과 함께 배포되는 암호화 패키지는 Corinna Vinschen의 Linux 호환 56 비트 DES 암호화 포트입니다.</target>
        </trans-unit>
        <trans-unit id="831281b1eb1b6cf65cdf498d326c123b4d2ac980" translate="yes" xml:space="preserve">
          <source>The csh_glob() function can also be exported, but you should not use it directly unless you really know what you are doing. It splits the pattern into words and feeds each one to bsd_glob(). Perl's own glob() function uses this internally.</source>
          <target state="translated">csh_glob () 함수도 내보낼 수 있지만 실제로 수행중인 작업을 모르면 직접 사용해서는 안됩니다. 패턴을 단어로 나누고 각각을 bsd_glob ()에 공급합니다. 펄 자신의 glob () 함수는 이것을 내부적으로 사용합니다.</target>
        </trans-unit>
        <trans-unit id="bb0c5fc2762311ff2f0c2ca9c51463e63c575d45" translate="yes" xml:space="preserve">
          <source>The ctime() function provides a way of getting at the scalar sense of the original CORE::localtime() function.</source>
          <target state="translated">ctime () 함수는 원래 CORE :: localtime () 함수의 스칼라 의미를 얻는 방법을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="cc603efa123dedf5ee9218533c5f2218c02b0847" translate="yes" xml:space="preserve">
          <source>The cube root [C99].</source>
          <target state="translated">큐브 루트 [C99].</target>
        </trans-unit>
        <trans-unit id="64523d7c78b273edb939e95b2a44e78339d21a0e" translate="yes" xml:space="preserve">
          <source>The current format name is stored in the variable &lt;code&gt;$~&lt;/code&gt; (&lt;code&gt;$FORMAT_NAME&lt;/code&gt; ), and the current top of form format name is in &lt;code&gt;$^&lt;/code&gt; (&lt;code&gt;$FORMAT_TOP_NAME&lt;/code&gt; ). The current output page number is stored in &lt;code&gt;$%&lt;/code&gt; (&lt;code&gt;$FORMAT_PAGE_NUMBER&lt;/code&gt; ), and the number of lines on the page is in &lt;code&gt;$=&lt;/code&gt; (&lt;code&gt;$FORMAT_LINES_PER_PAGE&lt;/code&gt; ). Whether to autoflush output on this handle is stored in &lt;code&gt;$|&lt;/code&gt; (&lt;code&gt;$OUTPUT_AUTOFLUSH&lt;/code&gt; ). The string output before each top of page (except the first) is stored in &lt;code&gt;$^L&lt;/code&gt; (&lt;code&gt;$FORMAT_FORMFEED&lt;/code&gt; ). These variables are set on a per-filehandle basis, so you'll need to select() into a different one to affect them:</source>
          <target state="translated">현재 형식 이름은 변수 &lt;code&gt;$~&lt;/code&gt; ( &lt;code&gt;$FORMAT_NAME&lt;/code&gt; )에 저장되며 양식 형식 이름의 현재 맨 위는 &lt;code&gt;$^&lt;/code&gt; ( &lt;code&gt;$FORMAT_TOP_NAME&lt;/code&gt; )입니다. 현재 출력 페이지 번호는 &lt;code&gt;$%&lt;/code&gt; ( &lt;code&gt;$FORMAT_PAGE_NUMBER&lt;/code&gt; )에 저장되고 페이지 의 줄 수는 &lt;code&gt;$=&lt;/code&gt; ( &lt;code&gt;$FORMAT_LINES_PER_PAGE&lt;/code&gt; )에 있습니다. 이 핸들의 출력을 자동 플러시할지 여부는 &lt;code&gt;$|&lt;/code&gt; ( &lt;code&gt;$OUTPUT_AUTOFLUSH&lt;/code&gt; ). 첫 페이지를 제외한 각 페이지 상단의 문자열 출력은 &lt;code&gt;$^L&lt;/code&gt; ( &lt;code&gt;$FORMAT_FORMFEED&lt;/code&gt; )에 저장됩니다.). 이러한 변수는 파일 단위로 설정되므로 다른 변수로 select ()를 적용하여 변수에 영향을 주어야합니다.</target>
        </trans-unit>
        <trans-unit id="bbbf873260d45973f075c0f7d16575580f2c6333" translate="yes" xml:space="preserve">
          <source>The current hierarchy is:</source>
          <target state="translated">현재 계층 구조는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="824b38e0c77c472868114a17d1e97b269bb0ba11" translate="yes" xml:space="preserve">
          <source>The current implementation does not allow specification of the required version of the module.</source>
          <target state="translated">현재 구현에서는 필요한 버전의 모듈을 지정할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="282bec354d0f4d4b762dd47ad0eb5b6ecfd1f6ce" translate="yes" xml:space="preserve">
          <source>The current input line is normally in $_, not $0. It generally does not have the newline stripped. ($0 is the name of the program executed.) See &lt;a href=&quot;perlvar&quot;&gt;perlvar&lt;/a&gt;.</source>
          <target state="translated">현재 입력 라인은 일반적으로 $ 0가 아니라 $ _에 있습니다. 일반적으로 줄 바꿈이 제거되지 않습니다. ($ 0은 실행 된 프로그램의 이름입니다.) &lt;a href=&quot;perlvar&quot;&gt;perlvar를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="18f618cc025364ce800e5f345611b3c1497a1ed6" translate="yes" xml:space="preserve">
          <source>The current kinds of Magic Virtual Tables are:</source>
          <target state="translated">현재 종류의 매직 가상 테이블은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="5c4fde69768c885a1c05aaf0e69e2380f88e2b66" translate="yes" xml:space="preserve">
          <source>The current leading implementation of Perl 6, Rakudo, released a &quot;useful, usable, 'early adopter'&quot; distribution of Perl 6 (called Rakudo Star) in July of 2010. Please see &lt;a href=&quot;http://rakudo.org/&quot;&gt;http://rakudo.org/&lt;/a&gt; for more information.</source>
          <target state="translated">현재 Rakudo Perl 6의 주요 구현은 2010 년 7 월에 Perl 6 (Rakudo Star라고 함)의 &quot;유용하고 사용 가능하며 초기 얼리 어답터&quot;배포판을 발표했습니다. 자세한 내용은 &lt;a href=&quot;http://rakudo.org/&quot;&gt;http://rakudo.org/&lt;/a&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="22d3f495bb4240a9d3bab6ec75da601351d12c2b" translate="yes" xml:space="preserve">
          <source>The current locale is exposed to XS code except possibly &lt;code&gt;LC_NUMERIC&lt;/code&gt; (explained in the next paragraph). There have not been reports of problems with the other categories. Perl initializes things on start-up so that the current locale is the one which is indicated by the user's environment in effect at that time. See &lt;a href=&quot;perllocale#ENVIRONMENT&quot;&gt;ENVIRONMENT in perllocale&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;LC_NUMERIC&lt;/code&gt; (다음 단락에서 설명)를 제외하고 현재 로케일이 XS 코드에 노출됩니다 . 다른 범주에 대한 문제는보고되지 않았습니다. Perl은 현재 로케일이 당시 사용자 환경에 의해 표시되는 로케일이되도록 시작시 사물을 초기화합니다. &lt;a href=&quot;perllocale#ENVIRONMENT&quot;&gt;perllocale의 환경을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="061c069ca3fcc48e2c1a6a5055f7be81ca6838c7" translate="yes" xml:space="preserve">
          <source>The current locale is set at execution time by &lt;a href=&quot;#The-setlocale-function&quot;&gt;setlocale()&lt;/a&gt; described below. If that function hasn't yet been called in the course of the program's execution, the current locale is that which was determined by the &lt;a href=&quot;#ENVIRONMENT&quot;&gt;ENVIRONMENT&lt;/a&gt; in effect at the start of the program. If there is no valid environment, the current locale is whatever the system default has been set to. On POSIX systems, it is likely, but not necessarily, the &quot;C&quot; locale. On Windows, the default is set via the computer's &lt;code&gt;Control Panel-&amp;gt;Regional &lt;a href=&quot;functions/and&quot;&gt;and&lt;/a&gt; Language Options&lt;/code&gt; (or its current equivalent).</source>
          <target state="translated">현재 로케일은 아래 설명 된 &lt;a href=&quot;#The-setlocale-function&quot;&gt;setlocale ()에&lt;/a&gt; 의해 실행시 설정 됩니다. 프로그램 실행 과정에서 해당 함수가 아직 호출되지 않은 경우 현재 로케일은 프로그램 시작시 유효한 &lt;a href=&quot;#ENVIRONMENT&quot;&gt;ENVIRONMENT&lt;/a&gt; 에 의해 결정된 것 입니다. 유효한 환경이 없으면 현재 로케일은 시스템 기본값이 설정된 값입니다. POSIX 시스템에서는 &quot;C&quot;로캘 일 수 있지만 반드시 그런 것은 아닙니다. Windows의 경우, 기본값은 컴퓨터의 &lt;code&gt;Control Panel-&amp;gt;Regional &lt;a href=&quot;functions/and&quot;&gt;and&lt;/a&gt; Language Options&lt;/code&gt; (또는 이에 상응하는 기능)을 통해 설정됩니다.</target>
        </trans-unit>
        <trans-unit id="b7f42f27fb52f98cb07c551fabc648053a689c30" translate="yes" xml:space="preserve">
          <source>The current locale is used when going outside of Perl with operations like &lt;a href=&quot;functions/system&quot;&gt;system LIST&lt;/a&gt; or &lt;a href=&quot;perlop#qx%2fSTRING%2f&quot;&gt;qx//&lt;/a&gt;, if those operations are locale-sensitive.</source>
          <target state="translated">현재 로케일은 로케일 구분 &lt;a href=&quot;functions/system&quot;&gt;시스템&lt;/a&gt; 인 경우 시스템 LIST 또는 &lt;a href=&quot;perlop#qx%2fSTRING%2f&quot;&gt;qx //&lt;/a&gt; 와 같은 조작으로 Perl 외부로 갈 때 사용됩니다 .</target>
        </trans-unit>
        <trans-unit id="ea51628874f50840c20248e49e31ecc39bc8aab0" translate="yes" xml:space="preserve">
          <source>The current major release of Perl is Perl 5, first released in 1994. It can run scripts from the previous major release, Perl 4 (March 1991), but has significant differences.</source>
          <target state="translated">Perl의 현재 주요 릴리스는 1994 년에 처음 릴리스 된 Perl 5입니다. 이전 주요 릴리스 인 Perl 4 (1991 년 3 월)에서 스크립트를 실행할 수 있지만 상당한 차이가 있습니다.</target>
        </trans-unit>
        <trans-unit id="1ad75b57a59621fb77288b117b229032ac9f513f" translate="yes" xml:space="preserve">
          <source>The current naming convention is:</source>
          <target state="translated">현재 명명 규칙은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="b2e2b3b69c2218e4d8359acb1335a4024632d82a" translate="yes" xml:space="preserve">
          <source>The current offset on the Perl internal stack (cf. &lt;code&gt;SP&lt;/code&gt; ) is restored at the end of</source>
          <target state="translated">Perl 내부 스택 ( &lt;code&gt;SP&lt;/code&gt; 참조 ) 의 현재 오프셋 은</target>
        </trans-unit>
        <trans-unit id="c030186501458b34adb46e2d42aa7b81f218a056" translate="yes" xml:space="preserve">
          <source>The current page length (printable lines) of the currently selected output channel. The default is 60.</source>
          <target state="translated">현재 선택된 출력 채널의 현재 페이지 길이 (인쇄 가능한 라인). 기본값은 60입니다.</target>
        </trans-unit>
        <trans-unit id="3d4eb19bb10369473283d32cc7dd71a86ff46c90" translate="yes" xml:space="preserve">
          <source>The current page number of the currently selected output channel.</source>
          <target state="translated">현재 선택된 출력 채널의 현재 페이지 번호입니다.</target>
        </trans-unit>
        <trans-unit id="770296232bd3d822ead8ffe492b7e0e282b9f95e" translate="yes" xml:space="preserve">
          <source>The current phase of the perl interpreter.</source>
          <target state="translated">펄 인터프리터의 현재 단계.</target>
        </trans-unit>
        <trans-unit id="a2857cd700aaf0537f04949257bdb10786ea5148" translate="yes" xml:space="preserve">
          <source>The current set of characters after which a string may be broken to fill continuation fields (starting with &lt;code&gt;^&lt;/code&gt;) in a format. The default is &quot; \n-&quot;, to break on a space, newline, or a hyphen.</source>
          <target state="translated">문자열이 연속 필드 ( &lt;code&gt;^&lt;/code&gt; 로 시작)를 채우 도록 형식화 한 후의 현재 문자 세트입니다 . 공백, 줄 바꿈 또는 하이픈을 나누려면 기본값은 &quot;\ n-&quot;입니다.</target>
        </trans-unit>
        <trans-unit id="981300e195cac4e7353f833304330d8ac58b67a9" translate="yes" xml:space="preserve">
          <source>The current set of warning checks enabled by the &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; warnings&lt;/code&gt; pragma. It has the same scoping as the &lt;code&gt;$^H&lt;/code&gt; and &lt;code&gt;%^H&lt;/code&gt; variables. The exact values are considered internal to the &lt;a href=&quot;warnings&quot;&gt;warnings&lt;/a&gt; pragma and may change between versions of Perl.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; warnings&lt;/code&gt; pragma에 의해 사용 가능한 현재 경고 점검 세트 . &lt;code&gt;$^H&lt;/code&gt; 및 &lt;code&gt;%^H&lt;/code&gt; 변수 와 동일한 범위를 갖습니다 . 정확한 값은 &lt;a href=&quot;warnings&quot;&gt;경고&lt;/a&gt; pragma 내부에있는 것으로 간주되며 Perl 버전간에 변경 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e48b124af22e055d2f998460eddfa2b05c504d05" translate="yes" xml:space="preserve">
          <source>The current setting for a particular CV can be retrieved by &lt;a href=&quot;#cv_get_call_checker&quot;&gt;cv_get_call_checker&lt;/a&gt;.</source>
          <target state="translated">특정 CV의 현재 설정은 &lt;a href=&quot;#cv_get_call_checker&quot;&gt;cv_get_call_checker&lt;/a&gt; 로 검색 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="b952480064e555e874a4e5bab67374e0afa43170" translate="yes" xml:space="preserve">
          <source>The current state is quite close to this target. Known limitations:</source>
          <target state="translated">현재 상태는이 목표에 매우 가깝습니다. 알려진 제한 사항 :</target>
        </trans-unit>
        <trans-unit id="8b45957d0c48ff5a61159add09d1cced4fe06354" translate="yes" xml:space="preserve">
          <source>The current value of &lt;code&gt;$,&lt;/code&gt; (if any) is printed between each LIST item. The current value of &lt;code&gt;$\&lt;/code&gt; (if any) is printed after the entire LIST has been printed. Because print takes a LIST, anything in the LIST is evaluated in list context, including any subroutines whose return lists you pass to &lt;code&gt;&lt;a href=&quot;functions/print&quot;&gt;print&lt;/a&gt;&lt;/code&gt;. Be careful not to follow the print keyword with a left parenthesis unless you want the corresponding right parenthesis to terminate the arguments to the print; put parentheses around all arguments (or interpose a &lt;code&gt;+&lt;/code&gt; , but that doesn't look as good).</source>
          <target state="translated">각 LIST 항목 사이 에 &lt;code&gt;$,&lt;/code&gt; 의 현재 값 (있는 경우)이 인쇄됩니다. 전체 LIST가 인쇄 된 후 &lt;code&gt;$\&lt;/code&gt; (있는 경우) 의 현재 값 이 인쇄됩니다. print는 LIST를 가져 오기 때문에 리턴 목록을 &lt;code&gt;&lt;a href=&quot;functions/print&quot;&gt;print&lt;/a&gt;&lt;/code&gt; 로 전달하는 서브 루틴을 포함하여 LIST의 모든 내용이 목록 컨텍스트에서 평가됩니다 . 해당 오른쪽 괄호로 인쇄 인수를 종료하지 않으려면 print 키워드 뒤에 왼쪽 괄호를 붙이지 않도록주의하십시오. 모든 인수 주위에 괄호를 넣으십시오 (또는 &lt;code&gt;+&lt;/code&gt; 를 넣으십시오 . 그러나 좋지 않습니다).</target>
        </trans-unit>
        <trans-unit id="d3b381c8d22a96ce946901e90864741d92df1af5" translate="yes" xml:space="preserve">
          <source>The current value of &lt;code&gt;$,&lt;/code&gt; (if any) is printed between each LIST item. The current value of &lt;code&gt;$\&lt;/code&gt; (if any) is printed after the entire LIST has been printed. Because print takes a LIST, anything in the LIST is evaluated in list context, including any subroutines whose return lists you pass to &lt;code&gt;&lt;a href=&quot;print&quot;&gt;print&lt;/a&gt;&lt;/code&gt;. Be careful not to follow the print keyword with a left parenthesis unless you want the corresponding right parenthesis to terminate the arguments to the print; put parentheses around all arguments (or interpose a &lt;code&gt;+&lt;/code&gt; , but that doesn't look as good).</source>
          <target state="translated">각 LIST 항목 사이 에 &lt;code&gt;$,&lt;/code&gt; 의 현재 값 (있는 경우)이 인쇄됩니다. 전체 LIST가 인쇄 된 후 &lt;code&gt;$\&lt;/code&gt; (있는 경우) 의 현재 값 이 인쇄됩니다. print는 LIST를 가져 오기 때문에 리턴 목록을 &lt;code&gt;&lt;a href=&quot;print&quot;&gt;print&lt;/a&gt;&lt;/code&gt; 로 전달하는 서브 루틴을 포함하여 LIST의 모든 내용이 목록 컨텍스트에서 평가됩니다 . 해당 오른쪽 괄호로 인쇄 인수를 종료하지 않으려면 print 키워드 뒤에 왼쪽 괄호를 붙이지 않도록주의하십시오. 모든 인수 주위에 괄호를 넣으십시오 (또는 &lt;code&gt;+&lt;/code&gt; 를 넣으십시오 . 그러나 좋지 않습니다).</target>
        </trans-unit>
        <trans-unit id="16a7c40e8bbfe13e91d735da741af8520eabede2" translate="yes" xml:space="preserve">
          <source>The current value of &lt;code&gt;$archname&lt;/code&gt; can be found with this command:</source>
          <target state="translated">&lt;code&gt;$archname&lt;/code&gt; 의 현재 값은 다음 명령으로 찾을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="db4a25bfed587546962de5c8d6543f967c92521a" translate="yes" xml:space="preserve">
          <source>The current value of the &lt;code&gt;&lt;a href=&quot;functions/write&quot;&gt;write()&lt;/a&gt;&lt;/code&gt; accumulator for &lt;code&gt;&lt;a href=&quot;functions/format&quot;&gt;format()&lt;/a&gt;&lt;/code&gt; lines. A format contains &lt;code&gt;&lt;a href=&quot;functions/formline&quot;&gt;formline()&lt;/a&gt;&lt;/code&gt; calls that put their result into &lt;code&gt;$^A&lt;/code&gt; . After calling its format, &lt;code&gt;&lt;a href=&quot;functions/write&quot;&gt;write()&lt;/a&gt;&lt;/code&gt; prints out the contents of &lt;code&gt;$^A&lt;/code&gt; and empties. So you never really see the contents of &lt;code&gt;$^A&lt;/code&gt; unless you call &lt;code&gt;&lt;a href=&quot;functions/formline&quot;&gt;formline()&lt;/a&gt;&lt;/code&gt; yourself and then look at it. See &lt;a href=&quot;perlform&quot;&gt;perlform&lt;/a&gt; and &lt;a href=&quot;functions/formline&quot;&gt;formline PICTURE,LIST&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/format&quot;&gt;format()&lt;/a&gt;&lt;/code&gt; 행에 대한 &lt;code&gt;&lt;a href=&quot;functions/write&quot;&gt;write()&lt;/a&gt;&lt;/code&gt; 누산기 의 현재 값입니다 . 형식에는 결과를 &lt;code&gt;$^A&lt;/code&gt; 넣는 &lt;code&gt;&lt;a href=&quot;functions/formline&quot;&gt;formline()&lt;/a&gt;&lt;/code&gt; 호출이 포함 됩니다. 형식을 호출 한 후 &lt;code&gt;&lt;a href=&quot;functions/write&quot;&gt;write()&lt;/a&gt;&lt;/code&gt; 는 &lt;code&gt;$^A&lt;/code&gt; 의 내용을 인쇄 하고 비 웁니다. 따라서 &lt;code&gt;&lt;a href=&quot;functions/formline&quot;&gt;formline()&lt;/a&gt;&lt;/code&gt; 직접 호출하지 않으면 &lt;code&gt;$^A&lt;/code&gt; 의 내용을 실제로 볼 수 없습니다 . &lt;a href=&quot;perlform&quot;&gt;perlform&lt;/a&gt; 및 &lt;a href=&quot;functions/formline&quot;&gt;formline PICTURE, LIST를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="ed07dc52d8f87fe5efbcd1795acd592cb2bcdd55" translate="yes" xml:space="preserve">
          <source>The current value of the debugging flags. May be read or set. Like its command-line equivalent, you can use numeric or symbolic values, eg &lt;code&gt;$^D = 10&lt;/code&gt; or &lt;code&gt;$^D = &quot;st&quot;&lt;/code&gt; .</source>
          <target state="translated">디버깅 플래그의 현재 값입니다. 읽거나 설정할 수 있습니다. 해당 명령 줄과 마찬가지로 숫자 또는 기호 값을 사용할 수 있습니다 (예 : &lt;code&gt;$^D = 10&lt;/code&gt; 또는 &lt;code&gt;$^D = &quot;st&quot;&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="761048a9f6779920117c38b6975281ec2824cbaa" translate="yes" xml:space="preserve">
          <source>The current value of the flag associated with the &lt;b&gt;-c&lt;/b&gt; switch. Mainly of use with &lt;b&gt;-MO=...&lt;/b&gt; to allow code to alter its behavior when being compiled, such as for example to &lt;code&gt;AUTOLOAD&lt;/code&gt; at compile time rather than normal, deferred loading. Setting &lt;code&gt;$^C = 1&lt;/code&gt; is similar to calling &lt;code&gt;B::minus_c&lt;/code&gt; .</source>
          <target state="translated">&lt;b&gt;-c&lt;/b&gt; 스위치 와 연관된 플래그의 현재 값 일반적으로 &lt;b&gt;-MO = ...&lt;/b&gt; 와 함께 사용하여 코드가 컴파일 될 때 동작을 변경하도록 허용합니다 (예 : 정상 지연로드가 아닌 컴파일 시간 에 &lt;code&gt;AUTOLOAD&lt;/code&gt; 로). &lt;code&gt;$^C = 1&lt;/code&gt; 설정 은 &lt;code&gt;B::minus_c&lt;/code&gt; 호출과 유사합니다 .</target>
        </trans-unit>
        <trans-unit id="5468ce0ac69ee02e09a591df294df02b8e8e00dd" translate="yes" xml:space="preserve">
          <source>The current value of the inplace-edit extension. Use &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; to disable inplace editing.</source>
          <target state="translated">내부 편집 확장의 현재 값입니다. 전체 편집을 비활성화 하려면 &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; 를 사용 하십시오 .</target>
        </trans-unit>
        <trans-unit id="ab0d30902e8f62034444f0c46f34be59caec65d2" translate="yes" xml:space="preserve">
          <source>The current value of the regex debugging flags. Set to 0 for no debug output even when the &lt;code&gt;re 'debug'&lt;/code&gt; module is loaded. See &lt;a href=&quot;re&quot;&gt;re&lt;/a&gt; for details.</source>
          <target state="translated">정규식 디버깅 플래그의 현재 값입니다. &lt;code&gt;re 'debug'&lt;/code&gt; 모듈이로드 된 경우에도 디버그 출력이 없으면 0으로 설정하십시오 . 자세한 내용은 &lt;a href=&quot;re&quot;&gt;re&lt;/a&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="a22922d7a166dbc35ec6d0a0c534fd11892caf1b" translate="yes" xml:space="preserve">
          <source>The current value of the warning switch, initially true if &lt;b&gt;-w&lt;/b&gt; was used, false otherwise, but directly modifiable.</source>
          <target state="translated">경고 스위치의 현재 값으로, &lt;b&gt;-w&lt;/b&gt; 가 사용 된 경우 처음에는 true이고 , 그렇지 않으면 false이지만 직접 수정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="434ca8d76bd8ecc27a064789f98b19395ab4f212" translate="yes" xml:space="preserve">
          <source>The current version of the standards for &lt;code&gt;&lt;a href=&quot;functions/atan2&quot;&gt;atan2()&lt;/a&gt;&lt;/code&gt; is available at &lt;a href=&quot;http://www.opengroup.org/onlinepubs/009695399/functions/atan2.html&quot;&gt;http://www.opengroup.org/onlinepubs/009695399/functions/atan2.html&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/atan2&quot;&gt;atan2()&lt;/a&gt;&lt;/code&gt; 표준의 최신 버전은 &lt;a href=&quot;http://www.opengroup.org/onlinepubs/009695399/functions/atan2.html&quot;&gt;http://www.opengroup.org/onlinepubs/009695399/functions/atan2.html&lt;/a&gt; 에서 볼 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="6af70deb3b449e89c48e84135fbdeb7d79f07a9c" translate="yes" xml:space="preserve">
          <source>The current version of this module is always available from its web site at &lt;a href=&quot;http://www.eyrie.org/~eagle/software/ansicolor/&quot;&gt;http://www.eyrie.org/~eagle/software/ansicolor/&lt;/a&gt;. It is also part of the Perl core distribution as of 5.6.0.</source>
          <target state="translated">이 모듈의 현재 버전은 항상 웹 사이트 ( &lt;a href=&quot;http://www.eyrie.org/~eagle/software/ansicolor/&quot;&gt;http://www.eyrie.org/~eagle/software/ansicolor/)&lt;/a&gt; 에서 사용 가능 합니다. 또한 5.6.0부터 Perl 코어 배포의 일부입니다.</target>
        </trans-unit>
        <trans-unit id="b31c3cebc8faae4e8a4925e48535264d89073d95" translate="yes" xml:space="preserve">
          <source>The current version of this module is always available from its web site at &lt;a href=&quot;http://www.eyrie.org/~eagle/software/podlators/&quot;&gt;http://www.eyrie.org/~eagle/software/podlators/&lt;/a&gt;.</source>
          <target state="translated">이 모듈의 현재 버전은 항상 웹 사이트 ( &lt;a href=&quot;http://www.eyrie.org/~eagle/software/podlators/&quot;&gt;http://www.eyrie.org/~eagle/software/podlators/)&lt;/a&gt; 에서 사용 가능 합니다.</target>
        </trans-unit>
        <trans-unit id="f5a8854edfd01b7a5e559e1a5294ccbba9d0afe6" translate="yes" xml:space="preserve">
          <source>The current version of this module is always available from its web site at &lt;a href=&quot;http://www.eyrie.org/~eagle/software/podlators/&quot;&gt;http://www.eyrie.org/~eagle/software/podlators/&lt;/a&gt;. It is also part of the Perl core distribution as of 5.6.0.</source>
          <target state="translated">이 모듈의 현재 버전은 항상 웹 사이트 ( &lt;a href=&quot;http://www.eyrie.org/~eagle/software/podlators/&quot;&gt;http://www.eyrie.org/~eagle/software/podlators/)&lt;/a&gt; 에서 사용 가능 합니다. 또한 5.6.0부터 Perl 코어 배포의 일부입니다.</target>
        </trans-unit>
        <trans-unit id="c47cd4fd8d9bd245ee61848360efac4088607cb6" translate="yes" xml:space="preserve">
          <source>The current version of this script is always available from its web site at &lt;a href=&quot;http://www.eyrie.org/~eagle/software/podlators/&quot;&gt;http://www.eyrie.org/~eagle/software/podlators/&lt;/a&gt;. It is also part of the Perl core distribution as of 5.6.0.</source>
          <target state="translated">이 스크립트의 현재 버전은 웹 사이트 ( &lt;a href=&quot;http://www.eyrie.org/~eagle/software/podlators/&quot;&gt;http://www.eyrie.org/~eagle/software/podlators/)&lt;/a&gt; 에서 항상 구할 수 있습니다 . 또한 5.6.0부터 Perl 코어 배포의 일부입니다.</target>
        </trans-unit>
        <trans-unit id="9d8fe5626c6979a9718f106c0652b7d905296f64" translate="yes" xml:space="preserve">
          <source>The current version was written by Graham Barr.</source>
          <target state="translated">현재 버전은 Graham Barr에 의해 작성되었습니다.</target>
        </trans-unit>
        <trans-unit id="7c32f08e82229236d88693ec9eaad5ec8a635209" translate="yes" xml:space="preserve">
          <source>The current working directory of the program is</source>
          <target state="translated">프로그램의 현재 작업 디렉토리는</target>
        </trans-unit>
        <trans-unit id="588f5e820c106e9822f858102bdf0e7ae9b574c7" translate="yes" xml:space="preserve">
          <source>The customary Perl approach for processing all the lines in a file is to do so one line at a time:</source>
          <target state="translated">파일의 모든 줄을 처리하기위한 일반적인 Perl 방식은 한 번에 한 줄씩 수행하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="a4504c4a63cdd557da723133c8d2b75666dc8630" translate="yes" xml:space="preserve">
          <source>The cwd() is the most natural form for the current architecture. For most systems it is identical to `pwd` (but without the trailing line terminator).</source>
          <target state="translated">cwd ()는 현재 아키텍처에서 가장 자연스러운 형태입니다. 대부분의 시스템에서 그것은`pwd`와 동일하다 (그러나 후행 터미네이터는 없다).</target>
        </trans-unit>
        <trans-unit id="40c9ebfbdf9a557c5ad182c1d60f03fd99fa74ef" translate="yes" xml:space="preserve">
          <source>The data argument passes in the value (if any) associated with the attribute. For example, if &lt;code&gt;&amp;amp;foo&lt;/code&gt; had been declared:</source>
          <target state="translated">데이터 인수는 속성과 연관된 값 (있는 경우)을 전달합니다. 예를 들어, &lt;code&gt;&amp;amp;foo&lt;/code&gt; 가 선언 된 경우 :</target>
        </trans-unit>
        <trans-unit id="4057a2800ea2edef8acd376fce4a738947ca16f2" translate="yes" xml:space="preserve">
          <source>The data can be aggregated into obvious structures, especially if there's a large amount of data in each aggregate.</source>
          <target state="translated">특히 각 집계에 많은 양의 데이터가있는 경우 데이터를 명확한 구조로 집계 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f1737bbb402e005395886a66a62fefd166798f8a" translate="yes" xml:space="preserve">
          <source>The data is stored as a list of values from the time and times functions:</source>
          <target state="translated">데이터는 시간 및 시간 함수의 값 목록으로 저장됩니다.</target>
        </trans-unit>
        <trans-unit id="083ecdb4eb83b1283f9d7370b6905eb300e214e7" translate="yes" xml:space="preserve">
          <source>The data may be retrieved using the &lt;code&gt;&lt;a href=&quot;functions/unpack&quot;&gt;unpack&lt;/a&gt;&lt;/code&gt; function if the underlying type of the byte stream is known.</source>
          <target state="translated">바이트 스트림의 기본 유형이 알려진 경우 &lt;code&gt;&lt;a href=&quot;functions/unpack&quot;&gt;unpack&lt;/a&gt;&lt;/code&gt; 기능을 사용하여 데이터를 검색 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="9bb2c0f943e4592858ab2d05373119174b2d2dda" translate="yes" xml:space="preserve">
          <source>The data was added as a Unicode string and when writing it out to disk, the &lt;code&gt;:utf8&lt;/code&gt; line discipline wasn't set by &lt;code&gt;Archive::Tar&lt;/code&gt; , so Perl tried to convert the string to ISO-8859 and failed. The written file now contains garbage.</source>
          <target state="translated">데이터가 유니 코드 문자열로 추가되어 디스크에 쓸 때 &lt;code&gt;Archive::Tar&lt;/code&gt; 의해 &lt;code&gt;:utf8&lt;/code&gt; 라인 규칙이 설정되지 않았 으므로 Perl은 문자열을 ISO-8859로 변환하려고했으나 실패했습니다. 작성된 파일은 이제 가비지를 포함합니다.</target>
        </trans-unit>
        <trans-unit id="93ccb288f67ba8fe0c8510721b3e70886d45432a" translate="yes" xml:space="preserve">
          <source>The date and day names in dates formatted by &lt;code&gt;strftime()&lt;/code&gt; could be manipulated to advantage by a malicious user able to subvert the &lt;code&gt;LC_DATE&lt;/code&gt; locale. (&quot;Look--it says I wasn't in the building on Sunday.&quot;)</source>
          <target state="translated">&lt;code&gt;strftime()&lt;/code&gt; 형식화 된 날짜의 날짜 및 요일 이름 은 &lt;code&gt;LC_DATE&lt;/code&gt; 로케일 을 파괴 할 수있는 악의적 인 사용자에 의해 조작 될 수 있습니다 . ( &quot;저는 일요일에 건물에 없었다고 말합니다.&quot;)</target>
        </trans-unit>
        <trans-unit id="c40b16f78ce75cc859be91a0613f27d3f68c2364" translate="yes" xml:space="preserve">
          <source>The day of the year is in the list returned by the &lt;code&gt;&lt;a href=&quot;functions/localtime&quot;&gt;localtime&lt;/a&gt;&lt;/code&gt; function. Without an argument &lt;code&gt;&lt;a href=&quot;functions/localtime&quot;&gt;localtime&lt;/a&gt;&lt;/code&gt; uses the current time.</source>
          <target state="translated">일의 날짜는 &lt;code&gt;&lt;a href=&quot;functions/localtime&quot;&gt;localtime&lt;/a&gt;&lt;/code&gt; 함수가 리턴 한 목록에 있습니다. 인수없이 &lt;code&gt;&lt;a href=&quot;functions/localtime&quot;&gt;localtime&lt;/a&gt;&lt;/code&gt; 은 현재 시간을 사용합니다.</target>
        </trans-unit>
        <trans-unit id="32d7e957f2b60e8e8af1a45f78007f3a710223c2" translate="yes" xml:space="preserve">
          <source>The days of just flinging strings around are over. It's well established that modern programs need to be capable of communicating funny accented letters, and things like euro symbols. This means that programmers need new habits. It's easy to program Unicode capable software, but it does require discipline to do it right.</source>
          <target state="translated">현을 넘기는 시대는 끝났습니다. 현대 프로그램은 재미있는 악센트 문자와 유로 기호와 같은 것을 전달할 수 있어야한다는 것이 잘 확립되어 있습니다. 이것은 프로그래머에게 새로운 습관이 필요하다는 것을 의미합니다. 유니 코드 가능 소프트웨어를 프로그래밍하는 것은 쉽지만 제대로하려면 훈련이 필요합니다.</target>
        </trans-unit>
        <trans-unit id="7d9856be0d4d4aa47742843ac8ee15803c0a6dbf" translate="yes" xml:space="preserve">
          <source>The debugger does not currently work in conjunction with the &lt;b&gt;-W&lt;/b&gt; command-line switch, because it itself is not free of warnings.</source>
          <target state="translated">디버거 자체에는 경고 가 없으므로 현재 &lt;b&gt;-W&lt;/b&gt; 명령 줄 스위치 와 함께 작동하지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="bff20683f233c3b1a43e85dddcc26c68e9457e08" translate="yes" xml:space="preserve">
          <source>The debugger has numerous options settable using the &lt;code&gt;o&lt;/code&gt; command, either interactively or from the environment or an rc file. (./.perldb or ~/.perldb under Unix.)</source>
          <target state="translated">디버거에는 대화식으로 또는 환경 또는 rc 파일에서 &lt;code&gt;o&lt;/code&gt; 명령을 사용하여 설정할 수있는 수많은 옵션이 있습니다 . (UNIX에서 ./.perldb 또는 ~ / .perldb)</target>
        </trans-unit>
        <trans-unit id="2b8f02d76c62b5ac783a580e7846d6536aa86d85" translate="yes" xml:space="preserve">
          <source>The debugger probably contains enough configuration hooks that you won't ever have to modify it yourself. You may change the behaviour of the debugger from within the debugger using its &lt;code&gt;o&lt;/code&gt; command, from the command line via the &lt;code&gt;PERLDB_OPTS&lt;/code&gt; environment variable, and from customization files.</source>
          <target state="translated">디버거에는 아마도 직접 구성 할 필요가없는 충분한 구성 후크가 포함되어있을 것입니다. &lt;code&gt;o&lt;/code&gt; 명령을 사용하여 디버거 내에서 , &lt;code&gt;PERLDB_OPTS&lt;/code&gt; 환경 변수 를 통해 명령 행 에서, 사용자 정의 파일에서 디버거의 동작을 변경할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="24bc00b2a7165b041b9ffd101df7fc63fd2218dd" translate="yes" xml:space="preserve">
          <source>The debugger prompt is something like</source>
          <target state="translated">디버거 프롬프트는 다음과 같습니다</target>
        </trans-unit>
        <trans-unit id="f8e855d0dba7087b2dc163f59ea22e7610600301" translate="yes" xml:space="preserve">
          <source>The debugging output at compile time looks like this:</source>
          <target state="translated">컴파일시 디버깅 출력은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="5cc26823ddc27c25d44117d4b49405e558f3683c" translate="yes" xml:space="preserve">
          <source>The declared variable is not introduced (is not visible) until after the current statement. Thus,</source>
          <target state="translated">선언 된 변수는 현재 명령문 이후까지 소개되지 않습니다 (표시되지 않음). 그러므로,</target>
        </trans-unit>
        <trans-unit id="9ae51c467cb04a1b525475d0b1964978fbf97d39" translate="yes" xml:space="preserve">
          <source>The default &lt;code&gt;:perlio&lt;/code&gt; layer retries &lt;code&gt;&lt;a href=&quot;functions/read&quot;&gt;read&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/write&quot;&gt;write&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;functions/close&quot;&gt;close&lt;/a&gt;&lt;/code&gt; as described above; interrupted &lt;code&gt;&lt;a href=&quot;functions/wait&quot;&gt;wait&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;functions/waitpid&quot;&gt;waitpid&lt;/a&gt;&lt;/code&gt; calls will always be retried.</source>
          <target state="translated">기본 &lt;code&gt;:perlio&lt;/code&gt; 레이어 는 위에서 설명한대로 &lt;code&gt;&lt;a href=&quot;functions/read&quot;&gt;read&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;functions/write&quot;&gt;write&lt;/a&gt;&lt;/code&gt; 및 &lt;code&gt;&lt;a href=&quot;functions/close&quot;&gt;close&lt;/a&gt;&lt;/code&gt; 를 재 시도합니다 . 중단 된 &lt;code&gt;&lt;a href=&quot;functions/wait&quot;&gt;wait&lt;/a&gt;&lt;/code&gt; 와 &lt;code&gt;&lt;a href=&quot;functions/waitpid&quot;&gt;waitpid&lt;/a&gt;&lt;/code&gt; 를 호출은 항상 시도됩니다.</target>
        </trans-unit>
        <trans-unit id="7af57631245798d230b9a42590aed5504edc7411" translate="yes" xml:space="preserve">
          <source>The default &lt;code&gt;TIEHASH&lt;/code&gt; method stores &quot;extra&quot; arguments to tie() starting from offset 1 in the array referenced by &lt;code&gt;&lt;a href=&quot;../functions/tied&quot;&gt;tied(%tiedhash)&lt;/a&gt;&lt;/code&gt;; this is the same storage algorithm as in TIEHASH subroutine above. Hence, a typical package inheriting from &lt;b&gt;Tie::ExtraHash&lt;/b&gt; does not need to overwrite this method.</source>
          <target state="translated">기본 &lt;code&gt;TIEHASH&lt;/code&gt; 메서드는 &quot;extra&quot;인수를 &lt;code&gt;&lt;a href=&quot;../functions/tied&quot;&gt;tied(%tiedhash)&lt;/a&gt;&lt;/code&gt; 의해 참조되는 배열에서 오프셋 1부터 시작하여 tie ()에 저장합니다 . 이것은 위의 TIEHASH 서브 루틴에서와 동일한 스토리지 알고리즘입니다. 따라서 &lt;b&gt;Tie :: ExtraHash&lt;/b&gt; 에서 상속 된 일반적인 패키지 는이 메소드를 덮어 쓸 필요가 없습니다.</target>
        </trans-unit>
        <trans-unit id="8bacf1d67275db56db4c207815d6942a42814176" translate="yes" xml:space="preserve">
          <source>The default behavior is restored with the &lt;code&gt;&lt;a href=&quot;functions/no&quot;&gt;no&lt;/a&gt; locale&lt;/code&gt; pragma, or upon reaching the end of the block enclosing &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; locale&lt;/code&gt; . Note that &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; locale&lt;/code&gt; calls may be nested, and that what is in effect within an inner scope will revert to the outer scope's rules at the end of the inner scope.</source>
          <target state="translated">기본 동작은과 복원 &lt;code&gt;&lt;a href=&quot;functions/no&quot;&gt;no&lt;/a&gt; locale&lt;/code&gt; 프라그 또는 블록 둘러싸의 마지막에 도달 할 때 &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; locale&lt;/code&gt; . 주 &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; locale&lt;/code&gt; 호출을 중첩하고, 내부 범위의 끝에서 바깥 쪽 범위의 규칙으로 돌아갑니다 내부 범위 내에서 적용되는 어떤 것을 할 수있다.</target>
        </trans-unit>
        <trans-unit id="ebc252c3cc028e1614732f1daa492845981dc49a" translate="yes" xml:space="preserve">
          <source>The default behavior is to allow either VMS or Unix syntax on input and to return VMS syntax on output unless Unix syntax has been explicitly requested via the &lt;code&gt;DECC$FILENAME_UNIX_REPORT&lt;/code&gt; CRTL feature.</source>
          <target state="translated">기본 동작은 &lt;code&gt;DECC$FILENAME_UNIX_REPORT&lt;/code&gt; CRTL 기능을 통해 Unix 구문이 명시 적으로 요청되지 않은 경우 입력시 VMS 또는 Unix 구문을 허용하고 출력에서 ​​VMS 구문을 반환하는 것 입니다.</target>
        </trans-unit>
        <trans-unit id="6dccc7bf2df4ee545fc6ed04ddf3f01c1358bdf3" translate="yes" xml:space="preserve">
          <source>The default behaviour of file test operators is to use the simple mode bits as returned by the stat() family of system calls. However, many operating systems have additional features to define more complex access rights, for example ACLs (Access Control Lists). For such environments, &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; filetest&lt;/code&gt; may help the permission operators to return results more consistent with other tools.</source>
          <target state="translated">파일 테스트 연산자의 기본 동작은 stat () 시스템 호출 제품군에서 반환 된 단순 모드 비트를 사용하는 것입니다. 그러나 많은 운영 체제에는 ACL (액세스 제어 목록)과 같이보다 복잡한 액세스 권한을 정의하는 추가 기능이 있습니다. 이러한 환경에서 &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; filetest&lt;/code&gt; &lt;a href=&quot;functions/use&quot;&gt;사용&lt;/a&gt; 하면 권한 연산자가 다른 도구와보다 일관된 결과를 반환하는 데 도움이 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="1e443bdcb2163a4573139a1dc139dfc380443bd8" translate="yes" xml:space="preserve">
          <source>The default blacklist is [qw|ftp|], as &lt;code&gt;/bin/ftp&lt;/code&gt; is rather unreliable.</source>
          <target state="translated">&lt;code&gt;/bin/ftp&lt;/code&gt; 는 다소 신뢰할 수 없으므로 기본 블랙리스트는 [qw | ftp |] 입니다.</target>
        </trans-unit>
        <trans-unit id="ed0767b7e5643475189138ab836319b55629d878" translate="yes" xml:space="preserve">
          <source>The default buffer size is 4096.</source>
          <target state="translated">기본 버퍼 크기는 4096입니다.</target>
        </trans-unit>
        <trans-unit id="8bc00fd19b1a0edf6b2c0d08377dcc6685c37357" translate="yes" xml:space="preserve">
          <source>The default can be overridden by setting the environment variable PERLIO to a space separated list of layers (&lt;code&gt;unix&lt;/code&gt; or platform low level layer is always pushed first).</source>
          <target state="translated">환경 변수 PERLIO를 공백으로 구분 된 계층 목록으로 설정하여 기본값을 대체 할 수 있습니다 ( &lt;code&gt;unix&lt;/code&gt; 또는 플랫폼 하위 레벨 계층이 항상 먼저 푸시 됨).</target>
        </trans-unit>
        <trans-unit id="34b91bbcac281ec343e20574aee63c504ba37c87" translate="yes" xml:space="preserve">
          <source>The default command shells on DOS descendant operating systems (such as they are) usually do not expand wildcard arguments supplied to programs. They consider it the application's job to handle that. This is commonly achieved by linking the application (in our case, perl) with startup code that the C runtime libraries usually provide. However, doing that results in incompatible perl versions (since the behavior of the argv expansion code differs depending on the compiler, and it is even buggy on some compilers). Besides, it may be a source of frustration if you use such a perl binary with an alternate shell that *does* expand wildcards.</source>
          <target state="translated">DOS 하위 운영 ​​체제 (예 : 운영 체제)의 기본 명령 쉘은 일반적으로 프로그램에 제공된 와일드 카드 인수를 확장하지 않습니다. 그들은 그것을 처리하는 것이 응용 프로그램의 일이라고 생각합니다. 이는 일반적으로 애플리케이션 (이 경우 perl)을 C 런타임 라이브러리가 일반적으로 제공하는 시작 코드와 연결하여 수행됩니다. 그러나 argv 확장 코드의 동작이 컴파일러에 따라 다르기 때문에 일부 컴파일러에서는 버그가 있기 때문에 그렇게하면 호환되지 않는 perl 버전이 생성됩니다. 또한 와일드 카드를 확장하는 대체 쉘과 같은 펄 바이너리를 사용하면 좌절의 원인이 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="83afe3e15499ebffd14384524a4838c21ad9ac57" translate="yes" xml:space="preserve">
          <source>The default delivery policy of signals changed in Perl v5.8.0 from immediate (also known as &quot;unsafe&quot;) to deferred, also known as &quot;safe signals&quot;. See &lt;a href=&quot;perlipc&quot;&gt;perlipc&lt;/a&gt; for more information.</source>
          <target state="translated">신호의 기본 전달 정책은 Perl v5.8.0에서 즉시 ( &quot;안전하지 않은&quot;이라고도 함)에서 &quot;안전한 신호&quot;라고도하는 지연으로 변경되었습니다. 자세한 내용은 &lt;a href=&quot;perlipc&quot;&gt;perlipc&lt;/a&gt; 을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="f60de20ca32864441bb2ece16480b765adbc68d5" translate="yes" xml:space="preserve">
          <source>The default filename translation is roughly &lt;code&gt;&lt;a href=&quot;functions/tr&quot;&gt;tr|/.|./|;&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">기본 파일 이름 변환은 대략 &lt;code&gt;&lt;a href=&quot;functions/tr&quot;&gt;tr|/.|./|;&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="141616a08e099cc503e54695ac44f2c439029e1f" translate="yes" xml:space="preserve">
          <source>The default for this option is off.</source>
          <target state="translated">이 옵션의 기본값은 해제입니다.</target>
        </trans-unit>
        <trans-unit id="841e53532f4d336433d317d532f99affc692102b" translate="yes" xml:space="preserve">
          <source>The default hash function has been modified with the intention of making it harder to infer the hash seed.</source>
          <target state="translated">기본 해시 함수는 해시 시드를 추론하기 어렵게하기 위해 수정되었습니다.</target>
        </trans-unit>
        <trans-unit id="917b792910290b9f104f9e9bb1c1c376f6e62a1b" translate="yes" xml:space="preserve">
          <source>The default implementation does nothing.</source>
          <target state="translated">기본 구현은 아무 것도 수행하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="ba4a564c2fb984db1b9ac70f6b103f10fd3f2c07" translate="yes" xml:space="preserve">
          <source>The default in Perl 5.8.0 and later is to automatically use the &lt;code&gt;:perlio&lt;/code&gt; layer.</source>
          <target state="translated">Perl 5.8.0 이상에서 기본값은 &lt;code&gt;:perlio&lt;/code&gt; 레이어 를 자동으로 사용하는 것 입니다.</target>
        </trans-unit>
        <trans-unit id="c034d8cea0ccefbe74b407c47763a2d7febf85bd" translate="yes" xml:space="preserve">
          <source>The default input &lt;b&gt;stream&lt;/b&gt; for your program, which if possible shouldn&amp;rsquo;t care where its data is coming from. Represented within a Perl program by the &lt;b&gt;filehandle&lt;/b&gt;&lt;code&gt;STDIN&lt;/code&gt; .</source>
          <target state="translated">프로그램 의 기본 입력 &lt;b&gt;스트림&lt;/b&gt; 으로, 가능한 경우 데이터의 출처를 신경 쓰지 않아야합니다. &lt;b&gt;파일 핸들 &lt;/b&gt; &lt;code&gt;STDIN&lt;/code&gt; 에 의해 Perl 프로그램 내에서 나타납니다 .</target>
        </trans-unit>
        <trans-unit id="c65b453abcd65763f1788a5bfac88b6cf8e06702" translate="yes" xml:space="preserve">
          <source>The default input and pattern-searching space. The following pairs are equivalent:</source>
          <target state="translated">기본 입력 및 패턴 검색 공간. 다음 쌍은 동일합니다.</target>
        </trans-unit>
        <trans-unit id="cea52ce10c001ee673712587e9b895266781fd26" translate="yes" xml:space="preserve">
          <source>The default installation directory of Perl under PASE is /QOpenSys/perl. This can be modified if needed with Configure parameter -Dprefix=/some/dir.</source>
          <target state="translated">PASE에서 Perl의 기본 설치 디렉토리는 / QOpenSys / perl입니다. 필요한 경우 Configure 매개 변수 -Dprefix = / some / dir을 사용하여 수정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c02bd4590e22b3fdced3d71cd3c3281cc1a0a660" translate="yes" xml:space="preserve">
          <source>The default installation location for this release uses the traditional UNIX directory layout under /usr/local. This is the recommended location for most users, and will leave the Apple-supplied Perl and its modules undisturbed.</source>
          <target state="translated">이 릴리스의 기본 설치 위치는 / usr / local의 기존 UNIX 디렉토리 레이아웃을 사용합니다. 대부분의 사용자에게 권장되는 위치이며 Apple에서 제공 한 Perl 및 해당 모듈은 그대로 둡니다.</target>
        </trans-unit>
        <trans-unit id="2cf27b908bba58a1adbe27495a165db5ad0a8770" translate="yes" xml:space="preserve">
          <source>The default is 0.</source>
          <target state="translated">기본값은 0입니다.</target>
        </trans-unit>
        <trans-unit id="b6e007f998a46a63459c07f21e8e579bcd3ddb9e" translate="yes" xml:space="preserve">
          <source>The default is 0;</source>
          <target state="translated">기본값은 0입니다.</target>
        </trans-unit>
        <trans-unit id="2fede1b14731afaa7b9b9368ecc641901f9fa509" translate="yes" xml:space="preserve">
          <source>The default is 1 when &lt;a href=&quot;../warnings&quot;&gt;warnings&lt;/a&gt; are enabled, 0 otherwise;</source>
          <target state="translated">&lt;a href=&quot;../warnings&quot;&gt;경고&lt;/a&gt; 가 활성화 되면 기본값은 1 이고, 그렇지 않으면 0입니다.</target>
        </trans-unit>
        <trans-unit id="515832f976590cbb3c71bc0d7d3d0a86a107732b" translate="yes" xml:space="preserve">
          <source>The default is 1.</source>
          <target state="translated">기본값은 1입니다.</target>
        </trans-unit>
        <trans-unit id="895305ba9904fa755bf8e86c105e9e415a01803b" translate="yes" xml:space="preserve">
          <source>The default is 15 seconds. If you set this value to 0, no timeout will occur, but this is not recommended.</source>
          <target state="translated">기본값은 15 초입니다. 이 값을 0으로 설정하면 시간 초과가 발생하지 않지만 권장되지는 않습니다.</target>
        </trans-unit>
        <trans-unit id="df47c42104d45d72a320a61c09a39d1b3d97871e" translate="yes" xml:space="preserve">
          <source>The default is 1;</source>
          <target state="translated">기본값은 1입니다.</target>
        </trans-unit>
        <trans-unit id="f462ad28c3fd0db899a9c6ebf2e36d1b531777fa" translate="yes" xml:space="preserve">
          <source>The default is 4096.</source>
          <target state="translated">기본값은 4096입니다.</target>
        </trans-unit>
        <trans-unit id="32bc975de1e1a4635ed927b65955622d6412a442" translate="yes" xml:space="preserve">
          <source>The default is &lt;code&gt;0&lt;/code&gt; .</source>
          <target state="translated">기본값은 &lt;code&gt;0&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="9b05c3b862baf5dbb3b6628baf4b68b1570abdb4" translate="yes" xml:space="preserve">
          <source>The default is &lt;code&gt;1&lt;/code&gt; .</source>
          <target state="translated">기본값은 &lt;code&gt;1&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="1e7ce922e57105bce0e95e91cfca276a6a4bf1ac" translate="yes" xml:space="preserve">
          <source>The default is &lt;code&gt;1&lt;/code&gt; for the root user and &lt;code&gt;0&lt;/code&gt; for normal users.</source>
          <target state="translated">루트 사용자 의 경우 기본값은 &lt;code&gt;1&lt;/code&gt; 이고 일반 사용자의 경우 &lt;code&gt;0&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="bbf2b1ea0900573472d5b071e3de19f7567ee6bd" translate="yes" xml:space="preserve">
          <source>The default is &lt;code&gt;&lt;a href=&quot;functions/die&quot;&gt;die&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">기본값은 &lt;code&gt;&lt;a href=&quot;functions/die&quot;&gt;die&lt;/a&gt;&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="b961dbd8be6b25800dc4b37b67546efccad28f8e" translate="yes" xml:space="preserve">
          <source>The default is &lt;code&gt;Z_DEFAULT_COMPRESSION&lt;/code&gt; .</source>
          <target state="translated">기본값은 &lt;code&gt;Z_DEFAULT_COMPRESSION&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="dc194b0254a7cf1688815756a4f2837510b9b267" translate="yes" xml:space="preserve">
          <source>The default is &lt;code&gt;Z_DEFAULT_STRATEGY&lt;/code&gt; .</source>
          <target state="translated">기본값은 &lt;code&gt;Z_DEFAULT_STRATEGY&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="fb390eebfd5c04071c6f9ae432a01e30ec460a80" translate="yes" xml:space="preserve">
          <source>The default is &lt;code&gt;pod&lt;/code&gt; .</source>
          <target state="translated">기본값은 &lt;code&gt;pod&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="3d0a0f1ca8eef2f6fbf6f39dbd7668ad5fbc612a" translate="yes" xml:space="preserve">
          <source>The default is Z_DEFAULT_COMPRESSION.</source>
          <target state="translated">기본값은 Z_DEFAULT_COMPRESSION입니다.</target>
        </trans-unit>
        <trans-unit id="ae93ce6388b29eb983caf1def75b439a9873a0b9" translate="yes" xml:space="preserve">
          <source>The default is Z_DEFAULT_STRATEGY.</source>
          <target state="translated">기본값은 Z_DEFAULT_STRATEGY입니다.</target>
        </trans-unit>
        <trans-unit id="b30329767ad59c2dc5630061d1ce79106ced2716" translate="yes" xml:space="preserve">
          <source>The default is no dictionary.</source>
          <target state="translated">기본값은 사전이 없습니다.</target>
        </trans-unit>
        <trans-unit id="0eaff3b0b1b9eb661e7fc7bd656a07d77ba2a1ef" translate="yes" xml:space="preserve">
          <source>The default is not to cuddle.</source>
          <target state="translated">기본값은 포옹하지 않는 것입니다.</target>
        </trans-unit>
        <trans-unit id="9c65dc0d3752b5562d0e04006d66de6352709010" translate="yes" xml:space="preserve">
          <source>The default is to try &lt;code&gt;native&lt;/code&gt; , &lt;code&gt;tcp&lt;/code&gt; , &lt;code&gt;udp&lt;/code&gt; , &lt;code&gt;unix&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;../functions/pipe&quot;&gt;pipe&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;stream&lt;/code&gt; , &lt;code&gt;console&lt;/code&gt; . Under systems with the Win32 API, &lt;code&gt;eventlog&lt;/code&gt; will be added as the first mechanism to try if &lt;code&gt;Win32::EventLog&lt;/code&gt; is available.</source>
          <target state="translated">기본값은 &lt;code&gt;native&lt;/code&gt; , &lt;code&gt;tcp&lt;/code&gt; , &lt;code&gt;udp&lt;/code&gt; , &lt;code&gt;unix&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;../functions/pipe&quot;&gt;pipe&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;stream&lt;/code&gt; , &lt;code&gt;console&lt;/code&gt; 을 사용하는 것 입니다. Win32 API가있는 시스템에서 &lt;code&gt;eventlog&lt;/code&gt; 는 &lt;code&gt;Win32::EventLog&lt;/code&gt; 를 사용할 수 있는지 확인하는 첫 번째 메커니즘으로 추가됩니다 .</target>
        </trans-unit>
        <trans-unit id="69bb3e1a426b5cc38eac62d98ea857e63ed9b5dd" translate="yes" xml:space="preserve">
          <source>The default iterator variable in a &lt;code&gt;foreach&lt;/code&gt; loop if no other variable is supplied.</source>
          <target state="translated">다른 변수가 제공되지 않은 경우 &lt;code&gt;foreach&lt;/code&gt; 루프 의 기본 반복자 변수입니다 .</target>
        </trans-unit>
        <trans-unit id="375ddf0ab7799023484d02f8a221ca6afd3b2054" translate="yes" xml:space="preserve">
          <source>The default memory limit is 2Mib. You can adjust the maximum read cache size by supplying the &lt;code&gt;memory&lt;/code&gt; option. The argument is the desired cache size, in bytes.</source>
          <target state="translated">기본 메모리 제한은 2Mib입니다. &lt;code&gt;memory&lt;/code&gt; 옵션 을 제공하여 최대 읽기 캐시 크기를 조정할 수 있습니다 . 인수는 원하는 캐시 크기 (바이트)입니다.</target>
        </trans-unit>
        <trans-unit id="97d617432e38273ff2337188090afe707d321e91" translate="yes" xml:space="preserve">
          <source>The default method is ZIP_CM_DEFLATE.</source>
          <target state="translated">기본 방법은 ZIP_CM_DEFLATE입니다.</target>
        </trans-unit>
        <trans-unit id="d06faea5104288d8b0b633dc0567b8b191f0df74" translate="yes" xml:space="preserve">
          <source>The default name of the new configuration file is &quot;libnet.cfg&quot;, and by default it is written to the current directory, unless otherwise specified using the -o option, &lt;code&gt;-o newfile&lt;/code&gt; .</source>
          <target state="translated">새 구성 파일의 기본 이름은 &quot;libnet.cfg&quot;이며, -o 옵션 &lt;code&gt;-o newfile&lt;/code&gt; 을 사용하여 달리 지정하지 않는 한 기본적으로 현재 디렉토리에 기록됩니다 .</target>
        </trans-unit>
        <trans-unit id="2e5074809750e6c620d635552cb416989d3d15b2" translate="yes" xml:space="preserve">
          <source>The default name of the old configuration file is by default &quot;libnet.cfg&quot;, unless otherwise specified using the -i option, &lt;code&gt;-i oldfile&lt;/code&gt; , and it is searched first from the current directory, and then from your module path.</source>
          <target state="translated">-i 옵션 &lt;code&gt;-i oldfile&lt;/code&gt; 을 사용하여 달리 지정하지 않는 한 이전 구성 파일의 기본 이름은 기본적으로 &quot;libnet.cfg&quot;이며, 현재 디렉토리에서 먼저 검색 한 다음 모듈 경로에서 검색합니다.</target>
        </trans-unit>
        <trans-unit id="5eb6185afb472dae00827acf41154ba83b345446" translate="yes" xml:space="preserve">
          <source>The default normalizer just concatenates the arguments with character 28 in between. (In ASCII, this is called FS or control-\.) This always works correctly for functions with only one string argument, and also when the arguments never contain character 28. However, it can confuse certain argument lists:</source>
          <target state="translated">기본 노멀 라이저는 인수를 문자 28로 사이에 연결합니다. (ASCII에서는 이것을 FS 또는 control- \라고합니다.) 이것은 하나의 문자열 인수 만있는 함수와 인수에 문자 28이 포함되지 않은 경우에도 항상 올바르게 작동합니다. 그러나 특정 인수 목록을 혼동 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b39e82de8afe051a851d53770ae84cf3c68d41cb" translate="yes" xml:space="preserve">
          <source>The default normalizer will turn this into something like &lt;code&gt;&quot;13\034ARRAY(0x436c1f)&quot;&lt;/code&gt; . That would be all right, except that a subsequent array of numbers might be stored at a different location even though it contains the same data. If this happens, &lt;code&gt;Memoize&lt;/code&gt; will think that the arguments are different, even though they are equivalent. In this case, a normalizer like this is appropriate:</source>
          <target state="translated">기본 노멀 라이저는 이것을 &lt;code&gt;&quot;13\034ARRAY(0x436c1f)&quot;&lt;/code&gt; 와 같은 것으로 바꿉니다 . 후속 데이터 배열이 동일한 데이터를 포함하더라도 다른 위치에 저장 될 수 있다는 점을 제외하고는 괜찮습니다. 이 경우 &lt;code&gt;Memoize&lt;/code&gt; 는 인수가 동일하더라도 인수가 다르다고 생각합니다. 이 경우 다음과 같은 노멀 라이저가 적절합니다.</target>
        </trans-unit>
        <trans-unit id="e5d60aed408340ddef56e731c14beba1f193a756" translate="yes" xml:space="preserve">
          <source>The default of building Perl statically may cause problems with complex applications like Tk: in that case consider building shared Perl</source>
          <target state="translated">Perl을 정적으로 빌드하는 기본값은 Tk와 같은 복잡한 응용 프로그램에서 문제를 일으킬 수 있습니다.이 경우 공유 Perl 작성을 고려하십시오.</target>
        </trans-unit>
        <trans-unit id="ac5f6413f6edd9db793b85ce42ea2d862be3c9a0" translate="yes" xml:space="preserve">
          <source>The default operator mask for a newly created compartment is the ':default' optag.</source>
          <target state="translated">새로 만든 구획의 기본 연산자 마스크는 ': default'optag입니다.</target>
        </trans-unit>
        <trans-unit id="cd7a35f6ae99c836f5d425b35999dec2510b2218" translate="yes" xml:space="preserve">
          <source>The default options gathered by Configure with the assistance of</source>
          <target state="translated">다음을 통해 Configure에서 수집 한 기본 옵션</target>
        </trans-unit>
        <trans-unit id="340bacd1cab82a806d284b26719b4d768c188a8d" translate="yes" xml:space="preserve">
          <source>The default output &lt;b&gt;stream&lt;/b&gt; for nasty remarks that don&amp;rsquo;t belong in &lt;b&gt;standard output&lt;/b&gt;. Represented within a Perl program by the output&amp;gt; &lt;b&gt;filehandle&lt;/b&gt;&lt;code&gt;STDERR&lt;/code&gt; . You can use this stream explicitly, but the &lt;code&gt;&lt;a href=&quot;functions/die&quot;&gt;die&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;functions/warn&quot;&gt;warn&lt;/a&gt;&lt;/code&gt; built-ins write to your standard error stream automatically (unless trapped or otherwise intercepted).</source>
          <target state="translated">&lt;b&gt;표준 출력에&lt;/b&gt; 속하지 않는 불쾌한 말 의 기본 출력 &lt;b&gt;스트림&lt;/b&gt; 입니다 . output&amp;gt; &lt;b&gt;filehandle &lt;/b&gt; &lt;code&gt;STDERR&lt;/code&gt; 에 의해 Perl 프로그램 내에 표시 됩니다. 이 스트림을 명시 적으로 사용할 수 있지만, &lt;code&gt;&lt;a href=&quot;functions/die&quot;&gt;die&lt;/a&gt;&lt;/code&gt; 및 &lt;code&gt;&lt;a href=&quot;functions/warn&quot;&gt;warn&lt;/a&gt;&lt;/code&gt; 내장 기능은 표준 오류 스트림에 자동으로 기록됩니다 (트랩되거나 달리 가로 채지 않는 한).&lt;b&gt;&lt;/b&gt;&lt;b&gt;&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="aa254ec270a416bb3ac03f5a884b155a435c80cb" translate="yes" xml:space="preserve">
          <source>The default output &lt;b&gt;stream&lt;/b&gt; for your program, which if possible shouldn&amp;rsquo;t care where its data is going. Represented within a Perl program by the &lt;b&gt;filehandle&lt;/b&gt;&lt;code&gt;STDOUT&lt;/code&gt; .</source>
          <target state="translated">프로그램 의 기본 출력 &lt;b&gt;스트림&lt;/b&gt; 으로, 가능하면 데이터가 어디로 가는지 신경 쓰지 않아야합니다. &lt;b&gt;파일 핸들 &lt;/b&gt; &lt;code&gt;STDOUT&lt;/code&gt; 에 의해 Perl 프로그램 내에서 나타납니다 .</target>
        </trans-unit>
        <trans-unit id="e96d4d616212a6cfd4d2816b5ab3f17c9db66319" translate="yes" xml:space="preserve">
          <source>The default output of self-referential structures can be &lt;code&gt;&lt;a href=&quot;../functions/eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt;ed, but the nested references to &lt;code&gt;$VAR&lt;/code&gt;</source>
          <target state="translated">자기 참조 구조의 기본 출력 할 수 있습니다 &lt;code&gt;&lt;a href=&quot;../functions/eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt; 에드 만에 중첩 된 참조 &lt;code&gt;$VAR&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a5f2d9e51d87e9b71a9bd992e69d11af3ccda88f" translate="yes" xml:space="preserve">
          <source>The default path for perl binary is /QOpenSys/perl/bin/perl. You'll want to symlink /QOpenSys/usr/bin/perl to this file so you don't have to modify your path.</source>
          <target state="translated">perl 바이너리의 기본 경로는 / QOpenSys / perl / bin / perl입니다. / QOpenSys / usr / bin / perl을이 파일에 심볼릭 링크하여 경로를 수정할 필요가 없습니다.</target>
        </trans-unit>
        <trans-unit id="c0e7903465e131bba24e8f9fa0f5926ebf1b8dce" translate="yes" xml:space="preserve">
          <source>The default per-thread stack size for different platforms varies significantly, and is almost always far more than is needed for most applications. On Win32, Perl's makefile explicitly sets the default stack to 16 MB; on most other platforms, the system default is used, which again may be much larger than is needed.</source>
          <target state="translated">다른 플랫폼의 기본 스레드 당 스택 크기는 상당히 다양하며 대부분의 응용 프로그램에 필요한 것보다 훨씬 더 큽니다. Win32에서 Perl의 makefile은 기본 스택을 16MB로 명시 적으로 설정합니다. 대부분의 다른 플랫폼에서는 시스템 기본값이 사용되는데 이는 다시 필요한 것보다 훨씬 클 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="02fbe3c9bc6d319100d5d82a643c83d45a2aaf27" translate="yes" xml:space="preserve">
          <source>The default per-thread stack size may be set at the start of the application through the use of the environment variable &lt;code&gt;PERL5_ITHREADS_STACK_SIZE&lt;/code&gt; :</source>
          <target state="translated">스레드 당 기본 스택 크기는 환경 변수 &lt;code&gt;PERL5_ITHREADS_STACK_SIZE&lt;/code&gt; 를 사용하여 애플리케이션 시작시 설정할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="d17c04396f5d2338f66524479b64e4296e2bc5c4" translate="yes" xml:space="preserve">
          <source>The default perl executable is flexible enough to support most usages. However, one may want something yet more flexible; for example, one may want to find Perl DLL relatively to the location of the EXE file; or one may want to ignore the environment when setting the Perl-library search patch, etc.</source>
          <target state="translated">기본 perl 실행 파일은 대부분의 사용법을 지원할만큼 유연합니다. 그러나 더 유연한 것을 원할 수도 있습니다. 예를 들어, EXE 파일의 위치와 관련하여 Perl DLL을 찾을 수 있습니다. 또는 Perl 라이브러리 검색 패치 등을 설정할 때 환경을 무시하고 싶을 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="7009bdcf386245a7873fc69dc2c48c3bfdcf71d9" translate="yes" xml:space="preserve">
          <source>The default permissions to use if a new file is created. The actual permissions will be modified by the user's umask, so you should probably use 0666 here. (See &lt;a href=&quot;functions/umask&quot;&gt;umask&lt;/a&gt;.)</source>
          <target state="translated">새 파일이 작성 될 때 사용할 기본 권한. 실제 권한은 사용자의 umask에 의해 수정되므로 여기서 0666을 사용해야합니다. ( &lt;a href=&quot;functions/umask&quot;&gt;umask&lt;/a&gt; 참조 )</target>
        </trans-unit>
        <trans-unit id="af672db5716c0b823ab6d08666d2a653d572eae5" translate="yes" xml:space="preserve">
          <source>The default place to put the next value or input record when a &lt;code&gt;&amp;lt;FH&amp;gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;functions/readline&quot;&gt;readline&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/readdir&quot;&gt;readdir&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;functions/each&quot;&gt;each&lt;/a&gt;&lt;/code&gt; operation's result is tested by itself as the sole criterion of a &lt;code&gt;while&lt;/code&gt; test. Outside a &lt;code&gt;while&lt;/code&gt; test, this will not happen.</source>
          <target state="translated">&lt;code&gt;&amp;lt;FH&amp;gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;functions/readline&quot;&gt;readline&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;functions/readdir&quot;&gt;readdir&lt;/a&gt;&lt;/code&gt; 또는 &lt;code&gt;&lt;a href=&quot;functions/each&quot;&gt;each&lt;/a&gt;&lt;/code&gt; 연산의 결과가 자체적으로 &lt;code&gt;while&lt;/code&gt; 테스트 의 유일한 기준으로 테스트 될 때 다음 값 또는 입력 레코드를 넣는 기본 위치 입니다. 외부 &lt;code&gt;while&lt;/code&gt; 테스트, 이런 일은 발생하지 않을 것이다.</target>
        </trans-unit>
        <trans-unit id="c5df9208ed1f779ba0f9d5864d277d9b22483511" translate="yes" xml:space="preserve">
          <source>The default rendering is top-down, so they're not in execution order. This form reflects the way the stack is used to parse and evaluate expressions; the add operates on the two terms below it in the tree.</source>
          <target state="translated">기본 렌더링은 하향식이므로 실행 순서가 아닙니다. 이 형식은 스택을 사용하여 식을 구문 분석하고 평가하는 방식을 반영합니다. add는 트리에서 아래 두 용어에 대해 작동합니다.</target>
        </trans-unit>
        <trans-unit id="2fc20ab6a2146e41cd4461ac23c56be7f29f5c25" translate="yes" xml:space="preserve">
          <source>The default rounding mode is 'even'. By using &lt;code&gt;Math::BigFloat-&amp;gt;round_mode($round_mode);&lt;/code&gt; you can get and set the default mode for subsequent rounding. The usage of &lt;code&gt;$Math::BigFloat::$round_mode&lt;/code&gt; is no longer supported. The second parameter to the round functions then overrides the default temporarily.</source>
          <target state="translated">기본 반올림 모드는 '짝수'입니다. &lt;code&gt;Math::BigFloat-&amp;gt;round_mode($round_mode);&lt;/code&gt; 를 사용하여 이후 반올림에 대한 기본 모드를 가져오고 설정할 수 있습니다. 의 사용 &lt;code&gt;$Math::BigFloat::$round_mode&lt;/code&gt; 더 이상 지원되지 않습니다. 그런 다음 반올림 함수의 두 번째 매개 변수는 기본값을 임시로 대체합니다.</target>
        </trans-unit>
        <trans-unit id="0c0082ed0ee0f68ac7247af3405f6e36532a7d14" translate="yes" xml:space="preserve">
          <source>The default set of layers should give acceptable results on all platforms</source>
          <target state="translated">기본 레이어 세트는 모든 플랫폼에서 적절한 결과를 제공해야합니다.</target>
        </trans-unit>
        <trans-unit id="98f212f2163021f600388dfedb85757788b2ee77" translate="yes" xml:space="preserve">
          <source>The default sort function is cmp, string comparison, which would sort &lt;code&gt;(1, 2, 10)&lt;/code&gt; into &lt;code&gt;(1, 10, 2)&lt;/code&gt; . &lt;code&gt;&amp;lt;=&amp;gt;&lt;/code&gt; , used above, is the numerical comparison operator.</source>
          <target state="translated">기본 정렬 함수는 cmp, 문자열 비교이며 &lt;code&gt;(1, 2, 10)&lt;/code&gt; 을 &lt;code&gt;(1, 10, 2)&lt;/code&gt; 로 정렬 합니다. 위에서 사용한 &lt;code&gt;&amp;lt;=&amp;gt;&lt;/code&gt; 은 숫자 비교 연산자입니다.</target>
        </trans-unit>
        <trans-unit id="baa9ec2a72f812d2fff5978a7051ec1d9ead2a46" translate="yes" xml:space="preserve">
          <source>The default subscript separator is &quot;\034&quot;, the same as SUBSEP in &lt;b&gt;awk&lt;/b&gt;.</source>
          <target state="translated">기본 첨자 구분 기호는 &quot;\ 034&quot;이며 &lt;b&gt;awk의&lt;/b&gt; SUBSEP와 동일 합니다.</target>
        </trans-unit>
        <trans-unit id="fedbef30ad12f7c78358c3195161f7bf65ed2265" translate="yes" xml:space="preserve">
          <source>The default text formatter is &lt;a href=&quot;text&quot;&gt;Pod::Text&lt;/a&gt;. The base class for Pod::Usage can be defined by pre-setting &lt;code&gt;$Pod::Usage::Formatter&lt;/code&gt;</source>
          <target state="translated">기본 텍스트 포맷터는 &lt;a href=&quot;text&quot;&gt;Pod :: Text&lt;/a&gt; 입니다. Pod :: Usage의 기본 클래스는 &lt;code&gt;$Pod::Usage::Formatter&lt;/code&gt; 를 사전 설정하여 정의 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2eca7e39567cc3a4e38f07441f8e4f7046f9b14f" translate="yes" xml:space="preserve">
          <source>The default type for the constants. If not specified &lt;code&gt;IV&lt;/code&gt; is assumed.</source>
          <target state="translated">상수의 기본 유형입니다. 지정하지 않으면 &lt;code&gt;IV&lt;/code&gt; 로 가정합니다.</target>
        </trans-unit>
        <trans-unit id="3a6f652439685a6a403073936eade467faa79602" translate="yes" xml:space="preserve">
          <source>The default typemap in the</source>
          <target state="translated">의 기본 타입 맵</target>
        </trans-unit>
        <trans-unit id="82f3cb0c641077271c3068ea9c85e22ba715cfbb" translate="yes" xml:space="preserve">
          <source>The default value for &lt;code&gt;div_scale&lt;/code&gt; is 40.</source>
          <target state="translated">&lt;code&gt;div_scale&lt;/code&gt; 의 기본값 은 40입니다.</target>
        </trans-unit>
        <trans-unit id="609bf4918ead31f720f19323f5cf2348643f6d2e" translate="yes" xml:space="preserve">
          <source>The default value for CCHOME in the makefiles for Visual C++ may not be correct for some versions. Make sure the default exists and is valid.</source>
          <target state="translated">Visual C ++ 용 makefile에서 CCHOME의 기본값은 일부 버전에서 올바르지 않을 수 있습니다. 기본값이 존재하고 유효한지 확인하십시오.</target>
        </trans-unit>
        <trans-unit id="1f34862d6782defbe2c5b2a0445c8f00de39fa4d" translate="yes" xml:space="preserve">
          <source>The default value is &lt;code&gt;XSINTERFACE_FUNC&lt;/code&gt; and &lt;code&gt;XSINTERFACE_FUNC_SET&lt;/code&gt; . An INTERFACE keyword with an empty list of functions can be omitted if INTERFACE_MACRO keyword is used.</source>
          <target state="translated">기본값은 &lt;code&gt;XSINTERFACE_FUNC&lt;/code&gt; 및 &lt;code&gt;XSINTERFACE_FUNC_SET&lt;/code&gt; 입니다. INTERFACE_MACRO 키워드를 사용하는 경우 비어있는 기능 목록이있는 INTERFACE 키워드를 생략 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3ae2f809fd681df4fcb45c0c13d99a0283fc66b8" translate="yes" xml:space="preserve">
          <source>The definition used for complex arguments of atan2() is</source>
          <target state="translated">atan2 ()의 복잡한 인수에 사용 된 정의는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="6431fb44fb840f90a758f20a67dcf8b7a9374aa9" translate="yes" xml:space="preserve">
          <source>The del_dup() Method</source>
          <target state="translated">del_dup () 메소드</target>
        </trans-unit>
        <trans-unit id="ed1ded41373481d9b3a2afdb892465f6f5d0d39d" translate="yes" xml:space="preserve">
          <source>The delimiter provided to &lt;code&gt;extract_bracketed&lt;/code&gt; was not one of &lt;code&gt;'()[]&amp;lt;&amp;gt;{}'&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;extract_bracketed&lt;/code&gt; 에 제공된 분리 문자 는 &lt;code&gt;'()[]&amp;lt;&amp;gt;{}'&lt;/code&gt; 중 하나가 아닙니다 .</target>
        </trans-unit>
        <trans-unit id="0e6b6844fe43a8d8ec1aad6ff952638a46635ab3" translate="yes" xml:space="preserve">
          <source>The denizens of makemaker@perl.org.</source>
          <target state="translated">makemaker@perl.org의 이재민.</target>
        </trans-unit>
        <trans-unit id="d6c12d31655a68b617bd8f8ac7d7b41ffa97d8df" translate="yes" xml:space="preserve">
          <source>The dereferencing cases (as opposed to method-calling cases) are somewhat extended by the experimental &lt;code&gt;postderef&lt;/code&gt; feature. For the details of that feature, consult &lt;a href=&quot;perlref#Postfix-Dereference-Syntax&quot;&gt;Postfix Dereference Syntax in perlref&lt;/a&gt;.</source>
          <target state="translated">역 참조 사례 (메소드 호출 사례와 달리)는 실험적인 &lt;code&gt;postderef&lt;/code&gt; 기능에 의해 다소 확장됩니다 . 해당 기능에 대한 자세한 내용은 &lt;a href=&quot;perlref#Postfix-Dereference-Syntax&quot;&gt;perlref의 Postfix Dereference Syntax를 참조&lt;/a&gt; 하십시오 .</target>
        </trans-unit>
        <trans-unit id="c06b4b9a1d8e7058531ada60d67614dbcf01dfd0" translate="yes" xml:space="preserve">
          <source>The deserializing hook called on the object during deserialization. But wait: if we're deserializing, there's no object yet... right?</source>
          <target state="translated">역 직렬화 중에 객체에서 역 직렬화 후크가 호출되었습니다. 하지만 기다립니다 : 역 직렬화하는 경우 아직 개체가 없습니다 ... 맞습니까?</target>
        </trans-unit>
        <trans-unit id="8a2f99ef5bda346c32f63e70a7361acb83da8b02" translate="yes" xml:space="preserve">
          <source>The design intent is for &lt;code&gt;\d&lt;/code&gt; to exactly match the set of characters that can safely be used with &quot;normal&quot; big-endian positional decimal syntax, where, for example 123 means one 'hundred', plus two 'tens', plus three 'ones'. This positional notation does not necessarily apply to characters that match the other type of &quot;digit&quot;, &lt;code&gt;\p{Numeric_Type=Digit}&lt;/code&gt; , and so &lt;code&gt;\d&lt;/code&gt; doesn't match them.</source>
          <target state="translated">디자인 의도는 &lt;code&gt;\d&lt;/code&gt; 가 &quot;일반적인&quot;빅 엔디안 위치 10 진수 구문과 함께 안전하게 사용할 수있는 문자 세트와 정확하게 일치하도록하기위한 것입니다. 그들 '. 이 위치 표기법이 다른 유형의 &quot;숫자&quot;, &lt;code&gt;\p{Numeric_Type=Digit}&lt;/code&gt; 와 일치하는 문자에 반드시 적용되는 것은 아니므로 &lt;code&gt;\d&lt;/code&gt; 와 일치하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="d6ec3b1b57d74d9cf92c20c7537d430a4cb91982" translate="yes" xml:space="preserve">
          <source>The desire of users to express filenames of the form &lt;code&gt;&amp;lt;Foo$Dir&amp;gt;.Bar&lt;/code&gt; on the command line unquoted causes problems, too: &lt;code&gt;``&lt;/code&gt; command output capture has to perform a guessing game. It assumes that a string &lt;code&gt;&amp;lt;[^&amp;lt;&amp;gt;]+\$[^&amp;lt;&amp;gt;]&amp;gt;&lt;/code&gt; is a reference to an environment variable, whereas anything else involving &lt;code&gt;&amp;lt;&lt;/code&gt; or &lt;code&gt;&amp;gt;&lt;/code&gt; is redirection, and generally manages to be 99% right. Of course, the problem remains that scripts cannot rely on any Unix tools being available, or that any tools found have Unix-like command line arguments.</source>
          <target state="translated">커맨드 라인에서 &lt;code&gt;&amp;lt;Foo$Dir&amp;gt;.Bar&lt;/code&gt; 형식의 파일 이름을 표현하려는 사용자의 욕구 도 문제를 일으킨다 : &lt;code&gt;``&lt;/code&gt; 명령 출력 캡처는 추측 게임을 수행해야한다. 문자열 &lt;code&gt;&amp;lt;[^&amp;lt;&amp;gt;]+\$[^&amp;lt;&amp;gt;]&amp;gt;&lt;/code&gt; 는 환경 변수에 대한 참조 인 반면, &lt;code&gt;&amp;lt;&lt;/code&gt; 또는 &lt;code&gt;&amp;gt;&lt;/code&gt; 와 관련된 다른 것은 리디렉션이며 일반적으로 99 % 올바른 것으로 가정합니다. 물론, 스크립트가 사용 가능한 유닉스 도구에 의존 할 수 없거나 발견 된 도구에 유닉스 계열 명령 줄 인수가 있다는 문제는 여전히 남아 있습니다.</target>
        </trans-unit>
        <trans-unit id="a11af240187e8ce0ea57c0f5d9817fa72798ba59" translate="yes" xml:space="preserve">
          <source>The desired exit status to pass to the &lt;b&gt;exit()&lt;/b&gt; function. This should be an integer, or else the string &quot;NOEXIT&quot; to indicate that control should simply be returned without terminating the invoking process.</source>
          <target state="translated">&lt;b&gt;exit ()&lt;/b&gt; 함수 에 전달할 원하는 종료 상태 입니다. 이것은 정수이거나 그렇지 않으면 호출 프로세스를 종료하지 않고 제어를 리턴해야 함을 표시하는 문자열 &quot;NOEXIT&quot;이어야합니다.</target>
        </trans-unit>
        <trans-unit id="a47bdc95431692c8deb0f97084523a81a5887de3" translate="yes" xml:space="preserve">
          <source>The desired level of &quot;verboseness&quot; to use when printing the usage message. If the corresponding value is 0, then only the &quot;SYNOPSIS&quot; section of the pod documentation is printed. If the corresponding value is 1, then the &quot;SYNOPSIS&quot; section, along with any section entitled &quot;OPTIONS&quot;, &quot;ARGUMENTS&quot;, or &quot;OPTIONS AND ARGUMENTS&quot; is printed. If the corresponding value is 2 or more then the entire manpage is printed.</source>
          <target state="translated">사용법 메시지를 인쇄 할 때 사용할 &quot;자세한 수준&quot;수준입니다. 해당 값이 0이면 포드 설명서의 &quot;SYNOPSIS&quot;섹션 만 인쇄됩니다. 해당 값이 1이면 &quot;OPTIONS&quot;, &quot;ARGUMENTS&quot;또는 &quot;OPTIONS AND ARGUMENTS&quot;섹션과 함께 &quot;SYNOPSIS&quot;섹션이 인쇄됩니다. 해당 값이 2 이상이면 전체 맨 페이지가 인쇄됩니다.</target>
        </trans-unit>
        <trans-unit id="2b3e64d006f3001c3df4472f5962fd664df30c48" translate="yes" xml:space="preserve">
          <source>The desired level of verbosity to use:</source>
          <target state="translated">사용할 원하는 상세 레벨 :</target>
        </trans-unit>
        <trans-unit id="1f8c4d84dbcf0f5f2d69ca16b4ced3235af3fefd" translate="yes" xml:space="preserve">
          <source>The destination for the option must be an array or array reference.</source>
          <target state="translated">옵션의 대상은 배열 또는 배열 참조 여야합니다.</target>
        </trans-unit>
        <trans-unit id="2940ce84da888fbb72c23c514c9cdd4e2c7bab4a" translate="yes" xml:space="preserve">
          <source>The detection algorithm works something like this:</source>
          <target state="translated">감지 알고리즘은 다음과 같이 작동합니다.</target>
        </trans-unit>
        <trans-unit id="cfd0b50108607e59344e69b0de3bc9fd4f301247" translate="yes" xml:space="preserve">
          <source>The diagnostics Pragma</source>
          <target state="translated">진단 Pragma</target>
        </trans-unit>
        <trans-unit id="9e8272da23da05393615d77b37bcea56278deff5" translate="yes" xml:space="preserve">
          <source>The diagnostics of this test normally just refer to 'the object'. If you'd like them to be more specific, you can supply an $object_name (for example 'Test customer').</source>
          <target state="translated">이 테스트의 진단은 보통 '개체'를 참조합니다. 보다 구체적으로 지정하려면 $ object_name (예 : 'Test customer')을 제공 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="67027b213e7e98e89fd8e5ebf75f4789f0806d73" translate="yes" xml:space="preserve">
          <source>The diagram below represents a single source stream, with the flow of source from a Perl script file on the left into the Perl parser on the right. This is how Perl normally operates.</source>
          <target state="translated">아래 다이어그램은 왼쪽의 Perl 스크립트 파일에서 오른쪽의 Perl 파서로의 소스 흐름과 함께 단일 소스 스트림을 나타냅니다. 이것이 Perl이 정상적으로 작동하는 방식입니다.</target>
        </trans-unit>
        <trans-unit id="09d12bc25e1c17128a784d1b2ff7f2b3ea6c5f9e" translate="yes" xml:space="preserve">
          <source>The die on line 4 pops the context stack back down to the CxEVAL, leaving it as:</source>
          <target state="translated">라인 4의 다이는 컨텍스트 스택을 CxEVAL로 다시 팝하여 다음과 같이 남겨 둡니다.</target>
        </trans-unit>
        <trans-unit id="930610eed704196a6c02e9606fed36fd7cdf0a59" translate="yes" xml:space="preserve">
          <source>The die pops the first &lt;code&gt;CxEVAL&lt;/code&gt; off the context stack, sets &lt;code&gt;PL_restartop&lt;/code&gt; from it, does a &lt;code&gt;JMPENV_JUMP(3)&lt;/code&gt; , and control returns to the top &lt;code&gt;docatch&lt;/code&gt; . This then starts another third-level runops level, which executes the nextstate, pushmark and die ops on line 4. At the point that the second &lt;code&gt;pp_die&lt;/code&gt; is called, the C call stack looks exactly like that above, even though we are no longer within an inner eval; this is because of the optimization mentioned earlier. However, the context stack now looks like this, ie with the top CxEVAL popped:</source>
          <target state="translated">다이 는 컨텍스트 스택 에서 첫 번째 &lt;code&gt;CxEVAL&lt;/code&gt; 을 팝하고 &lt;code&gt;PL_restartop&lt;/code&gt; 을 설정 하고 &lt;code&gt;JMPENV_JUMP(3)&lt;/code&gt; 을 수행하며 제어는 최상위 &lt;code&gt;docatch&lt;/code&gt; 로 리턴합니다 . 그런 다음 또 다른 3 단계 runops 레벨을 시작하여 라인 4에서 nextstate, pushmark 및 die ops를 실행합니다. 두 번째 &lt;code&gt;pp_die&lt;/code&gt; 가 호출 에서 C 호출 스택은 더 이상 내부에 있지 않더라도 위와 동일하게 보입니다. 내부 평가; 이것은 앞에서 언급 한 최적화 때문입니다. 그러나 컨텍스트 스택은 이제 다음과 같이 보입니다. 즉 상단 CxEVAL이 튀어 나와 있습니다.</target>
        </trans-unit>
        <trans-unit id="6ed5acbfe1a4a69e2eecb34b13c8306880da82cf" translate="yes" xml:space="preserve">
          <source>The difference between &lt;code&gt;extract_tagged&lt;/code&gt; and the anonymous subroutines generated by &lt;code&gt;gen_extract_tagged&lt;/code&gt; , is that those generated subroutines:</source>
          <target state="translated">&lt;code&gt;gen_extract_tagged&lt;/code&gt; 에 의해 생성 된 &lt;code&gt;extract_tagged&lt;/code&gt; 와 익명 서브 루틴 의 차이점은 다음 과 같이 생성 된 서브 루틴입니다.</target>
        </trans-unit>
        <trans-unit id="7e6f28f40692ae97e2ea2e8080e59d267505ccf0" translate="yes" xml:space="preserve">
          <source>The difference between &lt;code&gt;minlen&lt;/code&gt; and &lt;code&gt;minlenret&lt;/code&gt; can be seen in the following pattern:</source>
          <target state="translated">&lt;code&gt;minlen&lt;/code&gt; 과 &lt;code&gt;minlenret&lt;/code&gt; 의 차이점 은 다음과 같은 패턴으로 볼 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f8ae9fbf98646f2ef8526e7b39bf817f11262438" translate="yes" xml:space="preserve">
          <source>The difference between a block and a script is that scripts are closer to the linguistic notion of a set of code points required to represent languages, while block is more of an artifact of the Unicode code point numbering and separation into blocks of consecutive code points (so far the size of a block is some multiple of 16, like 128 or 256).</source>
          <target state="translated">블록과 스크립트의 차이점은 스크립트는 언어를 표현하는 데 필요한 코드 포인트 세트의 언어 적 개념에 더 가깝고, 블록은 유니 코드 코드 포인트 번호 매기기 및 연속 코드 포인트 블록으로 분리되는 인공물에 가깝습니다 ( 지금까지 블록의 크기는 128 또는 256과 같은 16의 배수입니다.</target>
        </trans-unit>
        <trans-unit id="4e0fd5df1eb8c3e578915cd6f8934c4fe5cf676a" translate="yes" xml:space="preserve">
          <source>The difference between these two properties involves characters that are used in multiple scripts. For example the digits '0' through '9' are used in many parts of the world. These are placed in a script named &lt;code&gt;Common&lt;/code&gt; . Other characters are used in just a few scripts. For example, the &lt;code&gt;&quot;KATAKANA-HIRAGANA DOUBLE HYPHEN&quot;&lt;/code&gt; is used in both Japanese scripts, Katakana and Hiragana, but nowhere else. The &lt;code&gt;Script&lt;/code&gt; property places all characters that are used in multiple scripts in the &lt;code&gt;Common&lt;/code&gt; script, while the &lt;code&gt;Script_Extensions&lt;/code&gt; property places those that are used in only a few scripts into each of those scripts; while still using &lt;code&gt;Common&lt;/code&gt; for those used in many scripts. Thus both these match:</source>
          <target state="translated">이 두 속성의 차이점은 여러 스크립트에서 사용되는 문자와 관련이 있습니다. 예를 들어 숫자 '0'에서 '9'는 전세계 여러 지역에서 사용됩니다. 이들은 &lt;code&gt;Common&lt;/code&gt; 이라는 스크립트에 배치됩니다 . 다른 문자는 몇 개의 스크립트에서만 사용됩니다. 예를 들어, &lt;code&gt;&quot;KATAKANA-HIRAGANA DOUBLE HYPHEN&quot;&lt;/code&gt; 은 가타카나와 히라가나와 같은 일본어 스크립트에서 사용되지만 다른 곳에서는 사용되지 않습니다. &lt;code&gt;Script&lt;/code&gt; 속성은 여러 스크립트에서 사용되는 모든 문자를 배치 &lt;code&gt;Common&lt;/code&gt; 스크립트를하는 동안 &lt;code&gt;Script_Extensions&lt;/code&gt; 속성 장소 그 스크립트의 각에 몇 스크립트에서 사용되는 것과; 많은 스크립트에서 사용되는 것들에 대해서는 여전히 &lt;code&gt;Common&lt;/code&gt; 을 사용합니다. 따라서 두 가지 모두 일치합니다.</target>
        </trans-unit>
        <trans-unit id="f324cedd823e628f1ed8025386bfb26cab3778ab" translate="yes" xml:space="preserve">
          <source>The difference is clear to see and the dereferencing approach is slower. While it managed to execute an average of 628,930 times a second during our test, the direct approach managed to run an additional 204,403 times, unfortunately. Unfortunately, because there are many examples of code written using the multiple layer direct variable access, and it's usually horrible. It is, however, minusculy faster. The question remains whether the minute gain is actually worth the eyestrain, or the loss of maintainability.</source>
          <target state="translated">차이점은 분명하고 역 참조 접근법은 느립니다. 테스트하는 동안 초당 평균 628,930 회를 실행했지만 직접 접근 방식은 불행히도 204,403 번을 추가로 실행했습니다. 불행히도, 다중 계층 직접 변수 액세스를 사용하여 작성된 코드의 예가 많기 때문에 일반적으로 끔찍합니다. 그러나 그 속도는 아주 빠릅니다. 미세한 이득이 실제로 눈의 피로를 감당할 가치가 있는지 또는 유지 보수성의 상실 여부는 여전히 의문입니다.</target>
        </trans-unit>
        <trans-unit id="c9d466e6cdc3e3b171ba671cc22acace7243054b" translate="yes" xml:space="preserve">
          <source>The difference is the sigil, that special character in front of the array name. The &lt;code&gt;$&lt;/code&gt; sigil means &quot;exactly one item&quot;, while the &lt;code&gt;@&lt;/code&gt; sigil means &quot;zero or more items&quot;. The &lt;code&gt;$&lt;/code&gt; gets you a single scalar, while the &lt;code&gt;@&lt;/code&gt; gets you a list.</source>
          <target state="translated">차이점은 배열 이름 앞에있는 특수 문자 인시길입니다. &lt;code&gt;$&lt;/code&gt; 수단 &quot;정확히 하나 개의 항목&quot;시길 반면 &lt;code&gt;@&lt;/code&gt; 수단 &quot;0 개 이상의 항목&quot;시길. &lt;code&gt;$&lt;/code&gt; 는 그동안 당신에게 하나의 스칼라를 얻을 &lt;code&gt;@&lt;/code&gt; 가 당신에게 목록을 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="c2b0921f524dbbf7564616e5853365d0c767bfc6" translate="yes" xml:space="preserve">
          <source>The digest can be delivered in three formats:</source>
          <target state="translated">다이제스트는 세 가지 형식으로 제공 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="0155d0c091234cee22dc790957626f27306487e0" translate="yes" xml:space="preserve">
          <source>The direction you must follow the great circle (also known as</source>
          <target state="translated">큰 원을 따라야하는 방향 (또는</target>
        </trans-unit>
        <trans-unit id="03d134305af0df1045ab396312ef86cfab55c5d9" translate="yes" xml:space="preserve">
          <source>The direction you would have to go from London to Tokyo (in radians, straight north being zero, straight east being pi/2).</source>
          <target state="translated">런던에서 도쿄로 가야 할 방향 (라디안, 직선 북쪽은 0, 직선 동쪽은 pi / 2).</target>
        </trans-unit>
        <trans-unit id="9159a72a045b505fc788bec97c5202fb7f87247c" translate="yes" xml:space="preserve">
          <source>The directory portion may or may not be returned with a trailing '/'.</source>
          <target state="translated">디렉토리 부분은 후행 '/'와 함께 리턴되거나 리턴되지 않을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="efd54b0e8774d4521e37e9c7dad7074640dfad53" translate="yes" xml:space="preserve">
          <source>The directory you are put into when you log in. On a Unix system, the name is often placed into &lt;code&gt;$ENV{HOME}&lt;/code&gt; or &lt;code&gt;$ENV{LOGDIR}&lt;/code&gt; by</source>
          <target state="translated">로그인 할 때 입력 한 디렉토리입니다. Unix 시스템에서 이름은 종종 &lt;code&gt;$ENV{HOME}&lt;/code&gt; 또는 &lt;code&gt;$ENV{LOGDIR}&lt;/code&gt; 에 있습니다.</target>
        </trans-unit>
        <trans-unit id="0f834768c044521ed2139a347066ecd1f6fd454d" translate="yes" xml:space="preserve">
          <source>The directory, if specified, must appear immediately following the &lt;b&gt;-x&lt;/b&gt; with no intervening whitespace.</source>
          <target state="translated">지정된 경우 디렉토리는 공백없이 &lt;b&gt;-x&lt;/b&gt; 바로 다음에 나타나야합니다 .</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
