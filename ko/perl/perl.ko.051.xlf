<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="perl">
    <body>
      <group id="perl">
        <trans-unit id="052319a3e5bb93ee7405765a73d430f34cc0defb" translate="yes" xml:space="preserve">
          <source>another simple word (note the lack of effect of the backslashed double-quote)</source>
          <target state="translated">또 다른 간단한 단어 (백 슬래시 큰 따옴표의 효과가 없음에 유의하십시오)</target>
        </trans-unit>
        <trans-unit id="49b2ac3b32339e34e4b9f904d93b48ebd2e613e1" translate="yes" xml:space="preserve">
          <source>ansi2knr.U</source>
          <target state="translated">ansi2knr.U</target>
        </trans-unit>
        <trans-unit id="c5fe0200d1c7a5139bd18fd22268c4ca8bf45e90" translate="yes" xml:space="preserve">
          <source>any</source>
          <target state="translated">any</target>
        </trans-unit>
        <trans-unit id="7696527a9b692224a3b35e3d1ce7238f165ab13d" translate="yes" xml:space="preserve">
          <source>any data associated with that attribute;</source>
          <target state="translated">해당 속성과 관련된 모든 데이터</target>
        </trans-unit>
        <trans-unit id="9a459f25776e773a64e295d1cb084a05b171699e" translate="yes" xml:space="preserve">
          <source>any function in the DLL, just the act of loading this DLL will reset your flags. What is worse, the same compiler was used to compile some HOOK DLLs. Given that HOOK dlls are executed in the context of</source>
          <target state="translated">DLL의 모든 기능,이 DLL을로드하는 행위는 플래그를 재설정합니다. 더 나쁜 것은, 일부 HOOK DLL을 컴파일하는 데 동일한 컴파일러가 사용되었습니다. HOOK dll은 다음과 같은 맥락에서 실행됩니다.</target>
        </trans-unit>
        <trans-unit id="e19bd065bb47fc295eafe4767c2de6b337ea119e" translate="yes" xml:space="preserve">
          <source>any leading &lt;code&gt;=&lt;/code&gt; prefix).</source>
          <target state="translated">선행 &lt;code&gt;=&lt;/code&gt; 접두사).</target>
        </trans-unit>
        <trans-unit id="8b084990d915b056c34e7529bc336db861040427" translate="yes" xml:space="preserve">
          <source>any of the loaded</source>
          <target state="translated">로드 된</target>
        </trans-unit>
        <trans-unit id="78e16822f2fffca52176d34705897fa841dd6f90" translate="yes" xml:space="preserve">
          <source>any one</source>
          <target state="translated">어느 하나</target>
        </trans-unit>
        <trans-unit id="f637daefbefeda9e4ed60d0501fba49913559846" translate="yes" xml:space="preserve">
          <source>any optional parameters that need to be sent to the filter. See the encode filter for an example of a module that uses parameters.</source>
          <target state="translated">필터로 보내야하는 선택적 매개 변수. 매개 변수를 사용하는 모듈의 예는 인코딩 필터를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="42323bfecca119f546c25856e4f9be955460919c" translate="yes" xml:space="preserve">
          <source>any previous content in &lt;code&gt;$tar&lt;/code&gt; !</source>
          <target state="translated">&lt;code&gt;$tar&lt;/code&gt; 모든 이전 컨텐츠 !</target>
        </trans-unit>
        <trans-unit id="c9eb4e932e9bcc3bc1ece409a17107d5c50fed04" translate="yes" xml:space="preserve">
          <source>any starting with &lt;code&gt;(&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;(&lt;/code&gt; 로 시작하는 모든</target>
        </trans-unit>
        <trans-unit id="d6a65efb0501666a4c913ea32a973da114f0ead8" translate="yes" xml:space="preserve">
          <source>any subroutine called from within that block</source>
          <target state="translated">해당 블록 내에서 호출 된 모든 서브 루틴</target>
        </trans-unit>
        <trans-unit id="035563ded8fdfc83ecef543e5bd6ec441f8b116a" translate="yes" xml:space="preserve">
          <source>anyinflate $input_filename_or_reference =&amp;gt; $output_filename_or_reference [, OPTS]</source>
          <target state="translated">anyinflate $ input_filename_or_reference =&amp;gt; $ output_filename_or_reference [, OPTS]</target>
        </trans-unit>
        <trans-unit id="8867c88b56e0bfb82cffaf15a66bc8d107d6754a" translate="yes" xml:space="preserve">
          <source>anything</source>
          <target state="translated">anything</target>
        </trans-unit>
        <trans-unit id="da86b2350d7133a0b9455e2c4cae962d691712b0" translate="yes" xml:space="preserve">
          <source>anything at all</source>
          <target state="translated">아무것도</target>
        </trans-unit>
        <trans-unit id="bd4f0e49dee0e1f5509e5161f80bbbbf9009690f" translate="yes" xml:space="preserve">
          <source>anything by default (because you don't want to surprise your users... badly)</source>
          <target state="translated">기본적으로 무엇이든 (사용자를 놀라게하고 싶지 않기 때문에 ... 심하게)</target>
        </trans-unit>
        <trans-unit id="3c305d671dd1d39b0b5796b00915162f7f25d581" translate="yes" xml:space="preserve">
          <source>anything else</source>
          <target state="translated">다른 것</target>
        </trans-unit>
        <trans-unit id="cad4d6d244c26510fb5dde9917efd285d64788e5" translate="yes" xml:space="preserve">
          <source>anything you don't need to (because less is more)</source>
          <target state="translated">필요하지 않은 것 (적을수록 많을수록)</target>
        </trans-unit>
        <trans-unit id="faa4dad3e5b02731169057ea528c1d5f84a048de" translate="yes" xml:space="preserve">
          <source>anyuncompress $input_filename_or_reference =&amp;gt; $output_filename_or_reference [, OPTS]</source>
          <target state="translated">anyuncompress $ input_filename_or_reference =&amp;gt; $ output_filename_or_reference [, OPTS]</target>
        </trans-unit>
        <trans-unit id="66623d62c46dc1f443a91e7a202ce54689d760e0" translate="yes" xml:space="preserve">
          <source>anyway.</source>
          <target state="translated">anyway.</target>
        </trans-unit>
        <trans-unit id="112c2a063a0f6f3f9ba00da0de16624f951645e8" translate="yes" xml:space="preserve">
          <source>anywhere</source>
          <target state="translated">anywhere</target>
        </trans-unit>
        <trans-unit id="32e21d9b9cba5dad74e5e372580bff4069832094" translate="yes" xml:space="preserve">
          <source>appear as parameters to the Perl function. With the exception of &lt;code&gt;OUT&lt;/code&gt; -parameters, these parameters are converted to the corresponding C type, then pointers to these data are given as arguments to the C function. It is expected that the C function will write through these pointers.</source>
          <target state="translated">Perl 함수의 매개 변수로 나타납니다. &lt;code&gt;OUT&lt;/code&gt; 매개 변수를 제외하고 이러한 매개 변수는 해당 C 유형으로 변환 된 다음 이러한 데이터에 대한 포인터가 C 함수에 대한 인수로 제공됩니다. C 함수는 이러한 포인터를 통해 작성 될 것으로 예상됩니다.</target>
        </trans-unit>
        <trans-unit id="24d201fd82f39662031e729d27fec76771838d92" translate="yes" xml:space="preserve">
          <source>appear in a package's &lt;code&gt;@ISA&lt;/code&gt; variable.</source>
          <target state="translated">패키지의 &lt;code&gt;@ISA&lt;/code&gt; 변수에 나타납니다 .</target>
        </trans-unit>
        <trans-unit id="ef5924a72dac5871eee278d0ded5dbd03cc1c19b" translate="yes" xml:space="preserve">
          <source>appear within the tagged text.</source>
          <target state="translated">태그가 지정된 텍스트 안에 나타납니다.</target>
        </trans-unit>
        <trans-unit id="db43bff34c78044870bc6b1ae2aa16902bb1bb8a" translate="yes" xml:space="preserve">
          <source>append</source>
          <target state="translated">append</target>
        </trans-unit>
        <trans-unit id="d2005cc206ccbfdedf2be43a200cb050c538bdb5" translate="yes" xml:space="preserve">
          <source>application</source>
          <target state="translated">application</target>
        </trans-unit>
        <trans-unit id="3802a68da20f566d7fb269f15c34508be3676bf9" translate="yes" xml:space="preserve">
          <source>approximately</source>
          <target state="translated">approximately</target>
        </trans-unit>
        <trans-unit id="f8aca17f8dc62636fe56d26d991498181502da89" translate="yes" xml:space="preserve">
          <source>arch_check</source>
          <target state="translated">arch_check</target>
        </trans-unit>
        <trans-unit id="a07f43054e7ab8b8f32e28994504a2df3069bad6" translate="yes" xml:space="preserve">
          <source>archive if the crypt() function is not defined in the standard C library. It is up to the Makefile to use this.</source>
          <target state="translated">crypt () 함수가 표준 C 라이브러리에 정의되어 있지 않은 경우 아카이브하십시오. 이것을 사용하는 것은 Makefile에 달려 있습니다.</target>
        </trans-unit>
        <trans-unit id="100ad6ee2f5499bff96b61a63b2efa0ea3981a7e" translate="yes" xml:space="preserve">
          <source>archlib.U</source>
          <target state="translated">archlib.U</target>
        </trans-unit>
        <trans-unit id="72b2a70ac7a2415a83e5898d42c24867ef6c76fb" translate="yes" xml:space="preserve">
          <source>archname.U</source>
          <target state="translated">archname.U</target>
        </trans-unit>
        <trans-unit id="d5067cf69455114e2110970315849096fa94f0fd" translate="yes" xml:space="preserve">
          <source>archname/</source>
          <target state="translated">archname/</target>
        </trans-unit>
        <trans-unit id="5f9e5802bbabc71f9275fccf122f5a52b8599f12" translate="yes" xml:space="preserve">
          <source>are</source>
          <target state="translated">are</target>
        </trans-unit>
        <trans-unit id="8dc07e958ba7e04dfd2e47ec804fc360ac6b560f" translate="yes" xml:space="preserve">
          <source>are 1, 224, 256, 384, 512, 512224, or 512256. It's also possible to use common string representations of the algorithm (e.g. &quot;sha256&quot;, &quot;SHA-384&quot;). If the argument is missing, SHA-1 will be used by default.</source>
          <target state="translated">1, 224, 256, 384, 512, 512224 또는 512256입니다. 알고리즘의 공통 문자열 표현 (예 : &quot;sha256&quot;, &quot;SHA-384&quot;)을 사용할 수도 있습니다. 인수가 없으면 기본적으로 SHA-1이 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="b3e8825648e40951cf73eb803bb3033952b8d48a" translate="yes" xml:space="preserve">
          <source>are a collection of character code sets from the International Organization for Standardization (ISO), each of which adds characters to the ASCII set that are typically found in various languages, many of which are based on the Roman, or Latin, alphabet. Most are for European languages, but there are also ones for Arabic, Greek, Hebrew, and Thai. There are good references on the web about all these.</source>
          <target state="translated">ISO (International Organization for Standardization)의 문자 코드 세트 모음으로, 각 문자는 일반적으로 다양한 언어로 제공되는 ASCII 세트에 문자를 추가하며, 대부분은 로마자 또는 라틴어 알파벳을 기반으로합니다. 대부분 유럽 언어를위한 것이지만 아랍어, 그리스어, 히브리어 및 태국어도 있습니다. 웹에는 이러한 모든 것에 대한 좋은 참고 자료가 있습니다.</target>
        </trans-unit>
        <trans-unit id="de4fe4ffac933dfb4f0c5094e64bc601a7611806" translate="yes" xml:space="preserve">
          <source>are all equal.</source>
          <target state="translated">모두 동일합니다.</target>
        </trans-unit>
        <trans-unit id="40cd33871ba50f9d26f25a0b0967a938c3c33a02" translate="yes" xml:space="preserve">
          <source>are allowed.</source>
          <target state="translated">허용됩니다.</target>
        </trans-unit>
        <trans-unit id="3e1131dc785866fbebf7ccb8d1293f801f197a2a" translate="yes" xml:space="preserve">
          <source>are also always exempt from such warnings.</source>
          <target state="translated">또한 이러한 경고는 항상 면제됩니다.</target>
        </trans-unit>
        <trans-unit id="5fcbd6f84c4cae433390a20653865fe7ad335515" translate="yes" xml:space="preserve">
          <source>are also defined. Thus, &lt;code&gt;LATIN CAPITAL LETTER A WITH ACUTE&lt;/code&gt; is in</source>
          <target state="translated">정의되어 있습니다. 따라서, &lt;code&gt;LATIN CAPITAL LETTER A WITH ACUTE&lt;/code&gt; 가있는 라틴 대문자 A 가</target>
        </trans-unit>
        <trans-unit id="770b01f5221d280697bb0ba87d0e2d9db74e1a94" translate="yes" xml:space="preserve">
          <source>are comic references to the egg-eating habits of the little-endian Lilliputians and the big-endian Blefuscudians from the classic Jonathan Swift satire,</source>
          <target state="translated">리틀 엔디안 Lilliputians와 고전적인 Jonathan Swift 풍자에서 빅 엔디안 Blefuscudians의 계란 먹는 습관에 대한 만화 참조,</target>
        </trans-unit>
        <trans-unit id="daac3dfff48cc466d9ca23db01b2c0a1076fa335" translate="yes" xml:space="preserve">
          <source>are converted to all uppercase for look-up. Other than that, both of them follow &lt;a href=&quot;#LOOSE-MATCHES&quot;&gt;loose&lt;/a&gt; rules if &lt;code&gt;:loose&lt;/code&gt; is also specified; strict otherwise.</source>
          <target state="translated">조회를 위해 모든 대문자로 변환됩니다. 그 외에는, 둘 다에 따라 &lt;a href=&quot;#LOOSE-MATCHES&quot;&gt;느슨한&lt;/a&gt; 규칙을 경우 &lt;code&gt;:loose&lt;/code&gt; 도 지정; 그렇지 않으면 엄격합니다.</target>
        </trans-unit>
        <trans-unit id="3ef4b9fd15129bb4ba23b3e2d5f6b2f50984d837" translate="yes" xml:space="preserve">
          <source>are deleted. (Note that this is slightly more flexible than the behavior of some &lt;b&gt;tr&lt;/b&gt; programs, which delete anything they find in the</source>
          <target state="translated">삭제됩니다. (이것은 일부 &lt;b&gt;tr&lt;/b&gt; 프로그램 의 동작보다 약간 더 유연 합니다.</target>
        </trans-unit>
        <trans-unit id="e553ec1da64a1470d4a07b9f0ea75b9f2786fbbc" translate="yes" xml:space="preserve">
          <source>are designed to test things that run thousands of times slower if a particular optimisation is broken (for example, the utf8 length cache on long utf8 strings). Add a test that will take a fraction of a second normally, and minutes otherwise, causing the test file to time out on failure.</source>
          <target state="translated">특정 최적화가 중단 된 경우 (예 : 긴 utf8 문자열의 utf8 길이 캐시) 수천 번 느리게 실행되는 항목을 테스트하도록 설계되었습니다. 일반적으로 1 분의 1 초가 걸리는 테스트를 추가하고 그렇지 않으면 몇 분이 걸리므로 테스트 파일이 실패하면 시간 초과됩니다.</target>
        </trans-unit>
        <trans-unit id="7d19bbed1db5eb79730973a9f9a4bc06ef968d56" translate="yes" xml:space="preserve">
          <source>are exempt from warnings (because they care about truth rather than definedness). Operators such as &lt;code&gt;++&lt;/code&gt; , &lt;code&gt;--&lt;/code&gt; , &lt;code&gt;+=&lt;/code&gt; , &lt;code&gt;-=&lt;/code&gt; , and &lt;code&gt;.=&lt;/code&gt; , that operate on undefined variables such as:</source>
          <target state="translated">(정의보다는 진실에 관심이 있기 때문에) 경고가 면제됩니다. &lt;code&gt;++&lt;/code&gt; , &lt;code&gt;--&lt;/code&gt; , &lt;code&gt;+=&lt;/code&gt; , &lt;code&gt;-=&lt;/code&gt; 및 &lt;code&gt;.=&lt;/code&gt; 과 같은 연산자는 다음과 같이 정의되지 않은 변수에서 작동합니다.</target>
        </trans-unit>
        <trans-unit id="5057aa4e52a95f389308d1244df9e17bc251d60c" translate="yes" xml:space="preserve">
          <source>are generated. If there are</source>
          <target state="translated">생성됩니다. 만일 거기에</target>
        </trans-unit>
        <trans-unit id="39e300e92d55897673ef91e24c657fab7d7f2f47" translate="yes" xml:space="preserve">
          <source>are hexadecimal digits, matches the character whose ordinal is</source>
          <target state="translated">16 진수이며, 서 수가있는 문자와 일치합니다.</target>
        </trans-unit>
        <trans-unit id="0396f8fab0fd4ee1179eee3502c230f019ae22d2" translate="yes" xml:space="preserve">
          <source>are in effect, &lt;code&gt;postprocess&lt;/code&gt; is a no-op.</source>
          <target state="translated">실제로 &lt;code&gt;postprocess&lt;/code&gt; 는 작동하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="570405f9be4be3ed167dfbbb5eecc3ddbaa2bed9" translate="yes" xml:space="preserve">
          <source>are in effect, &lt;code&gt;preprocess&lt;/code&gt; is a no-op.</source>
          <target state="translated">사실상, &lt;code&gt;preprocess&lt;/code&gt; 는 작동하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="fedda21f963002d22ee355f74566c5941f369717" translate="yes" xml:space="preserve">
          <source>are latitudes: zero at the North Pole, northward positive, southward negative. &lt;b&gt;NOTE&lt;/b&gt;: this formula thinks in mathematics, not geographically: the</source>
          <target state="translated">위도 : 북극에서 0, 북쪽으로 긍정적, 남쪽으로 부정적인. &lt;b&gt;참고&lt;/b&gt; :이 공식은 수학이 아닌 지리적으로 생각합니다.</target>
        </trans-unit>
        <trans-unit id="a431c3157083cfaa848431ab6951d8e26a4c0c12" translate="yes" xml:space="preserve">
          <source>are longitudes: zero at the Greenwhich meridian, eastward positive, westward negative -- and the</source>
          <target state="translated">경도 : 녹색의 자오선, 동쪽으로 양수, 서쪽으로 음수-</target>
        </trans-unit>
        <trans-unit id="609716f862354a27aae0296acc60afdae2c70a58" translate="yes" xml:space="preserve">
          <source>are not always present. The</source>
          <target state="translated">항상 존재하는 것은 아닙니다. 그만큼</target>
        </trans-unit>
        <trans-unit id="46c8feb754cc537b05ea38e46f4716d3389f6083" translate="yes" xml:space="preserve">
          <source>are not checked for taintedness. This requires extra carefulness unless you want external data to affect your control flow. Unless you carefully limit what these symbolic values are, people are able to call functions &lt;b&gt;outside&lt;/b&gt; your Perl code, such as POSIX::system, in which case they are able to run arbitrary external code.</source>
          <target state="translated">오염 여부를 점검하지 않습니다. 외부 데이터가 제어 흐름에 영향을 미치지 않게하려면 특별한주의가 필요합니다. 이러한 기호 값을 신중하게 제한하지 않으면 POSIX :: system과 같은 Perl 코드 &lt;b&gt;외부에서&lt;/b&gt; 함수를 호출 할 수 있습니다.이 경우 임의의 외부 코드를 실행할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5ccd41f08ede872f51066757b8c4ae13668882ad" translate="yes" xml:space="preserve">
          <source>are not equivalent;</source>
          <target state="translated">동등하지 않다;</target>
        </trans-unit>
        <trans-unit id="3dbd91a738da0c945eed880dcd55854536701ae2" translate="yes" xml:space="preserve">
          <source>are not implemented.</source>
          <target state="translated">구현되지 않았습니다.</target>
        </trans-unit>
        <trans-unit id="d2b97aebc4deb474b3edf462a85d2011cb2609d5" translate="yes" xml:space="preserve">
          <source>are not present by default in compressed data streams. They must have been added explicitly when the data stream was created by calling &lt;code&gt;Compress::Deflate::flush&lt;/code&gt; with &lt;code&gt;Z_FULL_FLUSH&lt;/code&gt; .</source>
          <target state="translated">압축 된 데이터 스트림에는 기본적으로 존재하지 않습니다. &lt;code&gt;Z_FULL_FLUSH&lt;/code&gt; 와 함께 &lt;code&gt;Compress::Deflate::flush&lt;/code&gt; 를 호출하여 데이터 스트림이 작성 될 때 명시 적으로 추가 되었어야합니다 .</target>
        </trans-unit>
        <trans-unit id="40db504d084e6e3300a4b8d81479b259b9880a4a" translate="yes" xml:space="preserve">
          <source>are not set.</source>
          <target state="translated">설정되어 있지 않습니다.</target>
        </trans-unit>
        <trans-unit id="1d74281d1301f35973cccef918ad9c2a8a370111" translate="yes" xml:space="preserve">
          <source>are numbers from 0 to 5 giving the intensity of red, green, and blue. &lt;code&gt;on_&lt;/code&gt; variants of all of these colors are also provided. These colors may be ignored completely on non-256-color terminals or may be misinterpreted and produce random behavior. Additional attributes such as blink, italic, or bold may not work with the 256-color palette.</source>
          <target state="translated">빨강, 초록, 파랑의 강도를 나타내는 0에서 5까지의 숫자입니다. 이러한 모든 색상의 &lt;code&gt;on_&lt;/code&gt; 변형도 제공됩니다. 이러한 색상은 256 색이 아닌 터미널에서 완전히 무시되거나 잘못 해석되어 임의의 동작이 발생할 수 있습니다. 깜박임, 기울임 꼴 또는 굵게와 같은 추가 속성은 256 색 팔레트에서 작동하지 않을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ee047ace3155120c0c998a4fbef3fd51e859a9c4" translate="yes" xml:space="preserve">
          <source>are provided with &lt;code&gt;-MCross&lt;/code&gt; so to enable cross- compile.</source>
          <target state="translated">크로스 컴파일이 가능하도록 &lt;code&gt;-MCross&lt;/code&gt; 가 제공됩니다 .</target>
        </trans-unit>
        <trans-unit id="fbbf84bcdae10459f4be5e4c43dfcd186671107d" translate="yes" xml:space="preserve">
          <source>are regular expressions, in the context of a larger regular expression, that function independently of the larger regular expression. That is, they consume as much or as little of the string as they wish without regard for the ability of the larger regexp to match. Independent subexpressions are represented by &lt;code&gt;(?&amp;gt;regexp)&lt;/code&gt;. We can illustrate their behavior by first considering an ordinary regexp:</source>
          <target state="translated">더 큰 정규 표현식과 관련하여 더 큰 정규 표현식과 독립적으로 기능하는 정규 표현식입니다. 즉, 더 큰 정규 표현식의 일치 능력에 관계없이 원하는만큼 문자열을 많이 또는 적게 소비합니다. 독립 하위 식은 &lt;code&gt;(?&amp;gt;regexp)&lt;/code&gt; 로 표시 됩니다. 먼저 정규 정규 표현식을 고려하여 동작을 설명 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="bf6b8a83833152c05402e374a039993996c3a5f4" translate="yes" xml:space="preserve">
          <source>are relocated relative to the directory containing the perl binary, and a logical cleanup of the path is then made around the join point (removing</source>
          <target state="translated">perl 바이너리를 포함하는 디렉토리를 기준으로 재배치되고 경로의 논리적 정리가 결합 점 주위에서 수행됩니다 (제거).</target>
        </trans-unit>
        <trans-unit id="c22d2121cf1ad3c9fdf597eb6ea7a9ec831c3008" translate="yes" xml:space="preserve">
          <source>are similar to these:</source>
          <target state="translated">다음과 유사합니다.</target>
        </trans-unit>
        <trans-unit id="5daee755ffcc3e1b323374ccd7080b09b7b8a3b2" translate="yes" xml:space="preserve">
          <source>are simply the file names of the test scripts to run.</source>
          <target state="translated">단순히 실행할 테스트 스크립트의 파일 이름입니다.</target>
        </trans-unit>
        <trans-unit id="097a56ab5012c31b2588a7fcf5955a17a3d173fe" translate="yes" xml:space="preserve">
          <source>are specified in the same way as command line options:</source>
          <target state="translated">명령 행 옵션과 동일한 방식으로 지정됩니다.</target>
        </trans-unit>
        <trans-unit id="78aee12896fca1df627811f8bc479814fea0b083" translate="yes" xml:space="preserve">
          <source>are subjected to double quote interpolation. That means that if you want to use variables, you must use an &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval()&lt;/a&gt;&lt;/code&gt;:</source>
          <target state="translated">큰 따옴표 보간이 적용됩니다. 즉, 변수를 사용하려면 &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval()&lt;/a&gt;&lt;/code&gt; 사용해야합니다 .</target>
        </trans-unit>
        <trans-unit id="1660aa40e15fa486c99c667a79b0b660d94e44d8" translate="yes" xml:space="preserve">
          <source>are supported by a data structure called the</source>
          <target state="translated">데이터 구조에 의해 지원됩니다.</target>
        </trans-unit>
        <trans-unit id="b0525539dbfb2e75b20f33ebd3a32d8383ed15e2" translate="yes" xml:space="preserve">
          <source>are text editors for OS X that have a Perl sensitivity mode ( &lt;a href=&quot;http://www.barebones.com/&quot;&gt;http://www.barebones.com/&lt;/a&gt; ).</source>
          <target state="translated">Perl 감도 모드 ( &lt;a href=&quot;http://www.barebones.com/&quot;&gt;http://www.barebones.com/&lt;/a&gt; ) 가있는 OS X 용 텍스트 편집기입니다 .</target>
        </trans-unit>
        <trans-unit id="8f5de845a40e63e6edb669bb61faa6f919437589" translate="yes" xml:space="preserve">
          <source>are the list-type ops to concatenate.</source>
          <target state="translated">연결할 목록 유형 op입니다.</target>
        </trans-unit>
        <trans-unit id="7df1a21211f78189703a86e3cbb836a7e63fe998" translate="yes" xml:space="preserve">
          <source>are the range &lt;code&gt;U+D800..U+DBFF&lt;/code&gt; and the</source>
          <target state="translated">&lt;code&gt;U+D800..U+DBFF&lt;/code&gt; 범위 이며</target>
        </trans-unit>
        <trans-unit id="e10ada24dcf0e25f997bb273775bbfb50fbba99d" translate="yes" xml:space="preserve">
          <source>are the range &lt;code&gt;U+DC00..U+DFFF&lt;/code&gt; . The surrogate encoding is</source>
          <target state="translated">&lt;code&gt;U+DC00..U+DFFF&lt;/code&gt; 범위 입니다. 대리 인코딩은</target>
        </trans-unit>
        <trans-unit id="b02d00372e009301b6f76aac94b40c9dd1c62278" translate="yes" xml:space="preserve">
          <source>are treated as infinite loops.</source>
          <target state="translated">무한 루프로 취급됩니다.</target>
        </trans-unit>
        <trans-unit id="7ceaee791c3214e301c067af0fb90e4e9184e870" translate="yes" xml:space="preserve">
          <source>are used in absolutely incompatible manner. Parameters to these functions could be described &lt;b&gt;xsubpp&lt;/b&gt; like this:</source>
          <target state="translated">절대 호환되지 않는 방식으로 사용됩니다. 이러한 함수에 대한 매개 변수는 다음 과 같이 &lt;b&gt;xsubpp&lt;/b&gt; 로 설명 될 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="225abc0f937024b5e6707bd1f4cf5fc01203b6c7" translate="yes" xml:space="preserve">
          <source>are used to allow the calling code to think that there is only one such encoding. This is almost always referred to as &lt;code&gt;utf8&lt;/code&gt; , but it means the EBCDIC version as well. Again, comments in the code may well be wrong even if the code itself is right. For example, the concept of UTF-8 &lt;code&gt;invariant
characters&lt;/code&gt; differs between ASCII and EBCDIC. On ASCII platforms, only characters that do not have the high-order bit set (i.e. whose ordinals are strict ASCII, 0 - 127) are invariant, and the documentation and comments in the code may assume that, often referring to something like, say, &lt;code&gt;hibit&lt;/code&gt; . The situation differs and is not so simple on EBCDIC machines, but as long as the code itself uses the &lt;code&gt;NATIVE_IS_INVARIANT()&lt;/code&gt; macro appropriately, it works, even if the comments are wrong.</source>
          <target state="translated">호출 코드가 그러한 인코딩이 하나만 있다고 생각하게하는 데 사용됩니다. 이것은 거의 항상 &lt;code&gt;utf8&lt;/code&gt; 이라고 하지만 EBCDIC 버전도 의미합니다. 다시 말하지만 코드 자체가 옳더라도 코드의 주석이 잘못되었을 수 있습니다. 예를 들어 UTF-8 &lt;code&gt;invariant characters&lt;/code&gt; 의 개념은 ASCII와 EBCDIC에서 다릅니다. ASCII 플랫폼에서는 상위 비트가 설정되지 않은 문자 (즉, 서 수가 엄격한 ASCII, 0-127 인 문자) 만 변하지 않으며 코드의 문서 및 주석은 종종 다음과 같은 것을 언급한다고 가정 할 수 있습니다. , &lt;code&gt;hibit&lt;/code&gt; . 상황이 다르고 EBCDIC 시스템에서 그렇게 간단하지는 않지만 코드 자체가 &lt;code&gt;NATIVE_IS_INVARIANT()&lt;/code&gt; 사용하는 한 주석이 틀리더라도 매크로가 적절하게 작동합니다.</target>
        </trans-unit>
        <trans-unit id="b5e6f047bd2af282863f2c0acfd2b4831e04019f" translate="yes" xml:space="preserve">
          <source>are used to refer to the relative positioning of the stack layers.</source>
          <target state="translated">스택 층의 상대적 위치를 나타내는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="79c5c14521f2fdbf7474b004cb4f21e3735f3d69" translate="yes" xml:space="preserve">
          <source>are usually from the standards &lt;b&gt;ISO 3166&lt;/b&gt; and &lt;b&gt;ISO 639&lt;/b&gt;, the two-letter abbreviations for the countries and the languages of the world, respectively. The</source>
          <target state="translated">일반적으로 &lt;b&gt;ISO 3166&lt;/b&gt; 및 &lt;b&gt;ISO 639&lt;/b&gt; 표준 , 각각 국가 및 세계 언어의 두 글자 약어입니다. 그만큼</target>
        </trans-unit>
        <trans-unit id="e6b83e0d18c05db2e099977bc4d92896d38a2907" translate="yes" xml:space="preserve">
          <source>are what is fed to &lt;code&gt;ok(...)&lt;/code&gt; if this test isn't skipped.</source>
          <target state="translated">이 테스트를 건너 뛰지 않으면 &lt;code&gt;ok(...)&lt;/code&gt; 공급됩니다 .</target>
        </trans-unit>
        <trans-unit id="624cd1f425ffb0afe6e743d09639a61c5ac6e5af" translate="yes" xml:space="preserve">
          <source>aren't</source>
          <target state="translated">aren't</target>
        </trans-unit>
        <trans-unit id="04d6e2b300911995efa37b6707fdc02975a3021c" translate="yes" xml:space="preserve">
          <source>arg</source>
          <target state="translated">arg</target>
        </trans-unit>
        <trans-unit id="e044db5cacc7c1e1ded3c45fa7472331fe5e6246" translate="yes" xml:space="preserve">
          <source>arg1</source>
          <target state="translated">arg1</target>
        </trans-unit>
        <trans-unit id="b38facf4a8f9f6e8fc7192d1cbc326386647f4c1" translate="yes" xml:space="preserve">
          <source>arg2</source>
          <target state="translated">arg2</target>
        </trans-unit>
        <trans-unit id="3030e728f154bf51419109efb93b6b8aeec9a976" translate="yes" xml:space="preserve">
          <source>args</source>
          <target state="translated">args</target>
        </trans-unit>
        <trans-unit id="0f3802314d747bbc5016897875185c3a9fae57bf" translate="yes" xml:space="preserve">
          <source>argument</source>
          <target state="translated">argument</target>
        </trans-unit>
        <trans-unit id="d8d433b9ebc59257b2702d1e5069f881de7eb837" translate="yes" xml:space="preserve">
          <source>argument (using &lt;code&gt;threads::joinable&lt;/code&gt; ), returns a list of all non-joined, non-detached</source>
          <target state="translated">인수 ( &lt;code&gt;threads::joinable&lt;/code&gt; )는 결합 되지 않은 분리되지 않은 모든 목록을 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="75fa8514a906cf4d46ad0af7f07708ece0b99d60" translate="yes" xml:space="preserve">
          <source>argument (using &lt;code&gt;threads::running&lt;/code&gt; ), returns a list of all non-joined, non-detached</source>
          <target state="translated">인수 ( &lt;code&gt;threads::running&lt;/code&gt; )는 결합되지 않은 분리되지 않은 모든 목록을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="d3aa5b01cae682ed2f47655046c91faa406d82a7" translate="yes" xml:space="preserve">
          <source>argument is in the customary binary format used for Perl strings.</source>
          <target state="translated">인수는 Perl 문자열에 사용되는 일반적인 이진 형식입니다.</target>
        </trans-unit>
        <trans-unit id="cd393b012062093f38db6d2b39b7ceda6271e2a9" translate="yes" xml:space="preserve">
          <source>argument specifies that &lt;code&gt;autosplit&lt;/code&gt; is to check the modification time of the module against that of the &lt;code&gt;autosplit.ix&lt;/code&gt; file, and only split the module if it is newer. $modtime defaults to 1.</source>
          <target state="translated">인수는 &lt;code&gt;autosplit&lt;/code&gt; 이 &lt;code&gt;autosplit.ix&lt;/code&gt; 파일 의 수정 시간과 모듈의 수정 시간을 확인하고 더 최신 인 경우에만 모듈을 분할하도록 지정 합니다. $ modtime의 기본값은 1입니다.</target>
        </trans-unit>
        <trans-unit id="1a29b569d43822c3afa1f10f2e311200106908b4" translate="yes" xml:space="preserve">
          <source>argument tells &lt;code&gt;Encode&lt;/code&gt; what to do when encountering malformed data. Without</source>
          <target state="translated">인수는 잘못된 데이터가 발생할 때 수행 할 작업을 &lt;code&gt;Encode&lt;/code&gt; 에 알려줍니다 . 없이</target>
        </trans-unit>
        <trans-unit id="2e918e513d7e7933ffcc3b08aa036254e58b7109" translate="yes" xml:space="preserve">
          <source>argument to &lt;code&gt;when&lt;/code&gt; does is hard to describe precisely, but in general, it tries to guess what you want done. Sometimes it is interpreted as &lt;code&gt;$_ ~~ &lt;i&gt;EXPR&lt;/i&gt;&lt;/code&gt;, and sometimes it is not. It also behaves differently when lexically enclosed by a &lt;code&gt;given&lt;/code&gt; block than it does when dynamically enclosed by a &lt;code&gt;foreach&lt;/code&gt; loop. The rules are far too difficult to understand to be described here. See &lt;a href=&quot;#Experimental-Details-on-given-and-when&quot;&gt;Experimental Details on given and when&lt;/a&gt; later on.</source>
          <target state="translated">&lt;code&gt;when&lt;/code&gt; 대한 주장 은 정확하게 설명하기 어렵지만 일반적으로 원하는 것을 추측하려고합니다. 때로는 &lt;code&gt;$_ ~~ &lt;i&gt;EXPR&lt;/i&gt;&lt;/code&gt; 로 해석되지만 그렇지 않은 경우도 있습니다. &lt;code&gt;given&lt;/code&gt; 블록으로 사 전적으로 묶으 면 &lt;code&gt;foreach&lt;/code&gt; 루프로 동적으로 묶일 때와 다르게 동작 합니다. 여기에 설명하기에는 규칙을 이해하기가 너무 어렵습니다. &lt;a href=&quot;#Experimental-Details-on-given-and-when&quot;&gt;주어진 시간과&lt;/a&gt; 나중에 실험 세부 사항을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="e08f7198b54296915eb6e0097b8ceca98cfafe50" translate="yes" xml:space="preserve">
          <source>argument to one of the following values:</source>
          <target state="translated">다음 값 중 하나에 대한 인수 :</target>
        </trans-unit>
        <trans-unit id="3abba5546715d0ff24cfa816d8610e27353a5e14" translate="yes" xml:space="preserve">
          <source>argument will be true if there is a layer below and that layer was expecting UTF-8.</source>
          <target state="translated">아래에 레이어가 있고 해당 레이어에 UTF-8이 필요한 경우 인수는 true입니다.</target>
        </trans-unit>
        <trans-unit id="77d4f1467ed49524381be69d50a3bb40b010d3c6" translate="yes" xml:space="preserve">
          <source>argument, &lt;code&gt;&lt;a href=&quot;functions/exit&quot;&gt;exit()&lt;/a&gt;&lt;/code&gt; will cause only the thread to exit. With a</source>
          <target state="translated">인수, &lt;code&gt;&lt;a href=&quot;functions/exit&quot;&gt;exit()&lt;/a&gt;&lt;/code&gt; 는 스레드 만 종료시킵니다. 와</target>
        </trans-unit>
        <trans-unit id="5e1a5dc31772bb5680208573714d0df8690531e4" translate="yes" xml:space="preserve">
          <source>argument, &lt;code&gt;&lt;a href=&quot;functions/exit&quot;&gt;exit()&lt;/a&gt;&lt;/code&gt; will terminate the application.</source>
          <target state="translated">인수, &lt;code&gt;&lt;a href=&quot;functions/exit&quot;&gt;exit()&lt;/a&gt;&lt;/code&gt; 는 응용 프로그램을 종료합니다.</target>
        </trans-unit>
        <trans-unit id="11b4277f19e0685458402bdc5d7577a60a68c705" translate="yes" xml:space="preserve">
          <source>argument. For example, &lt;a href=&quot;encode/unicode&quot;&gt;Encode::Unicode&lt;/a&gt; ignores</source>
          <target state="translated">논의. 예를 들어 &lt;a href=&quot;encode/unicode&quot;&gt;Encode :: Unicode&lt;/a&gt; 는 무시합니다.</target>
        </trans-unit>
        <trans-unit id="d4da21b9484bced14bdff9911f748d00022f7cf3" translate="yes" xml:space="preserve">
          <source>argument. Use &lt;b&gt;-Ilib&lt;/b&gt;, for instance. &lt;b&gt;-I lib&lt;/b&gt; won't work.</source>
          <target state="translated">논의. 예를 들어 &lt;b&gt;-Ilib를&lt;/b&gt; 사용하십시오 . &lt;b&gt;-나는 lib&lt;/b&gt; 가 작동하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="9077da4d0275ca769922dd3ab43da95b6ef7b997" translate="yes" xml:space="preserve">
          <source>arguments are allowed, provided that</source>
          <target state="translated">다음과 같은 경우에 인수가 허용됩니다.</target>
        </trans-unit>
        <trans-unit id="168293336923dcdfadd4e17664f5fabfcd3ee1d2" translate="yes" xml:space="preserve">
          <source>arguments can be ignored in most cases)</source>
          <target state="translated">대부분의 경우 인수를 무시할 수 있습니다)</target>
        </trans-unit>
        <trans-unit id="a144cfdf650067c37a4a69dac8b434fbb91f984b" translate="yes" xml:space="preserve">
          <source>arguments have been parsed (so you can not change the way arguments are processed, sorry), typically with the &lt;code&gt;-P&lt;i&gt;plugin&lt;/i&gt;&lt;/code&gt; switch, eg:</source>
          <target state="translated">일반적으로 &lt;code&gt;-P&lt;i&gt;plugin&lt;/i&gt;&lt;/code&gt; 스위치를 사용하여 인수를 구문 분석했습니다 (따라서 인수 처리 방식을 변경할 수 없습니다. 죄송합니다) . 예 :</target>
        </trans-unit>
        <trans-unit id="93520313719be4cf49f3e938fc38e935e34348fd" translate="yes" xml:space="preserve">
          <source>argv[1]</source>
          <target state="translated">argv[1]</target>
        </trans-unit>
        <trans-unit id="405928ee9a480fc2a8eade49b14a897e6af33c76" translate="yes" xml:space="preserve">
          <source>around</source>
          <target state="translated">around</target>
        </trans-unit>
        <trans-unit id="d95e887f901f26e63014aa2cdccb63b7fb5f1815" translate="yes" xml:space="preserve">
          <source>around the subroutine call.</source>
          <target state="translated">서브 루틴 호출 주위.</target>
        </trans-unit>
        <trans-unit id="276700d738a08a17c36c325a79d878275e1e62b7" translate="yes" xml:space="preserve">
          <source>array ref is used to create a &lt;a href=&quot;parser/source&quot;&gt;TAP::Parser::Source&lt;/a&gt; that is passed to the &lt;a href=&quot;#iterator_factory_class&quot;&gt;iterator_factory_class&lt;/a&gt; which in turn figures out how to handle the source and creates a &amp;lt;TAP::Parser::Iterator&amp;gt; for it. The iterator is used by the parser to read in the TAP stream.</source>
          <target state="translated">array ref는 &lt;a href=&quot;#iterator_factory_class&quot;&gt;iterator_factory_class&lt;/a&gt; 로 전달 되는 &lt;a href=&quot;parser/source&quot;&gt;TAP :: Parser :: Source&lt;/a&gt; 를 만드는 데 사용됩니다 . iterator_factory_class 는 소스를 처리하는 방법을 파악하고 &amp;lt;TAP :: Parser :: Iterator&amp;gt;를 만듭니다. 이터레이터는 파서에서 TAP 스트림을 읽는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="f007d443bf9be1cbb02a5647bc3ffc2ea4a7b0be" translate="yes" xml:space="preserve">
          <source>article about Maketext. It explains many important concepts underlying Locale::Maketext's design, and some insight into why Maketext is better than the plain old approach of having message catalogs that are just databases of sprintf formats.</source>
          <target state="translated">Maketext에 대한 기사. Locale :: Maketext의 디자인에 기초한 많은 중요한 개념과 왜 sprintf 형식의 데이터베이스 인 메시지 카탈로그를 갖는 기존의 접근 방식보다 Maketext가 더 나은지에 대한 통찰력을 설명합니다.</target>
        </trans-unit>
        <trans-unit id="c39354a2afa38bb8867edb6c280fc4691cf93e48" translate="yes" xml:space="preserve">
          <source>article in the &quot;Far More Than You Ever Wanted To Know&quot; collection in &lt;a href=&quot;http://www.cpan.org/misc/olddoc/FMTEYEWTK.tgz&quot;&gt;http://www.cpan.org/misc/olddoc/FMTEYEWTK.tgz&lt;/a&gt; .</source>
          <target state="translated">&lt;a href=&quot;http://www.cpan.org/misc/olddoc/FMTEYEWTK.tgz&quot;&gt;http://www.cpan.org/misc/olddoc/FMTEYEWTK.tgz의&lt;/a&gt; &quot;알고 싶은 것보다 훨씬 더&quot;컬렉션에있는 기사 .</target>
        </trans-unit>
        <trans-unit id="770bc2c07a08614cf46186cc798c253673fb1442" translate="yes" xml:space="preserve">
          <source>article in the &quot;Far More Than You Ever Wanted To Know&quot; collection in &lt;a href=&quot;http://www.cpan.org/misc/olddoc/FMTEYEWTK.tgz&quot;&gt;http://www.cpan.org/misc/olddoc/FMTEYEWTK.tgz&lt;/a&gt; . To capture a command's STDERR and STDOUT together:</source>
          <target state="translated">&lt;a href=&quot;http://www.cpan.org/misc/olddoc/FMTEYEWTK.tgz&quot;&gt;http://www.cpan.org/misc/olddoc/FMTEYEWTK.tgz의&lt;/a&gt; &quot;알고 싶은 것보다 훨씬 더&quot;컬렉션에있는 기사 . 명령의 STDERR 및 STDOUT을 함께 캡처하려면 다음을 수행하십시오.</target>
        </trans-unit>
        <trans-unit id="d63a2a6a0595f68a45646a780e4852db4b72a660" translate="yes" xml:space="preserve">
          <source>article in the &quot;Far More Than You Ever Wanted To Know&quot; collection in &lt;a href=&quot;http://www.cpan.org/misc/olddoc/FMTEYEWTK.tgz&quot;&gt;http://www.cpan.org/misc/olddoc/FMTEYEWTK.tgz&lt;/a&gt; for more about this approach.</source>
          <target state="translated">이 접근 방식에 대한 자세한 내용 은 &lt;a href=&quot;http://www.cpan.org/misc/olddoc/FMTEYEWTK.tgz&quot;&gt;http://www.cpan.org/misc/olddoc/FMTEYEWTK.tgz의&lt;/a&gt; &quot;알고 싶은 것보다 더&quot;컬렉션의 기사를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="0791a67844c8f4efbe5e99ac3105cf46b29ab17a" translate="yes" xml:space="preserve">
          <source>article in the &quot;Far More Than You Ever Wanted To Know&quot; collection in &lt;a href=&quot;http://www.cpan.org/misc/olddoc/FMTEYEWTK.tgz&quot;&gt;http://www.cpan.org/misc/olddoc/FMTEYEWTK.tgz&lt;/a&gt;, courtesy of Tom Phoenix, talks more about this. John von Neumann said, &quot;Anyone who attempts to generate random numbers by deterministic means is, of course, living in a state of sin.&quot;</source>
          <target state="translated">Tom Phoenix가 제공 한 &lt;a href=&quot;http://www.cpan.org/misc/olddoc/FMTEYEWTK.tgz&quot;&gt;http://www.cpan.org/misc/olddoc/FMTEYEWTK.tgz의&lt;/a&gt; &quot;알고 싶은 것보다 훨씬 더&quot;컬렉션에있는 기사에서 이에 대해 자세히 설명합니다. 존 폰 노이만 (John von Neumann)은 &quot;결정 론적 수단으로 난수를 생성하려는 사람은 물론 죄의 상태에 살고있다&quot;고 말했다.</target>
        </trans-unit>
        <trans-unit id="df211ccdd94a63e0bcb9e6ae427a249484a49d60" translate="yes" xml:space="preserve">
          <source>as</source>
          <target state="translated">as</target>
        </trans-unit>
        <trans-unit id="a65837ad13e0fdf78d35e16e571d952b5ff6f7e1" translate="yes" xml:space="preserve">
          <source>as &lt;code&gt;load&lt;/code&gt; will use &lt;code&gt;&lt;a href=&quot;functions/caller&quot;&gt;caller&lt;/a&gt;&lt;/code&gt; to determine the package.</source>
          <target state="translated">로 &lt;code&gt;load&lt;/code&gt; 사용 &lt;code&gt;&lt;a href=&quot;functions/caller&quot;&gt;caller&lt;/a&gt;&lt;/code&gt; 패키지를 결정합니다.</target>
        </trans-unit>
        <trans-unit id="54d62e679336367634a72a952dc99d5052db36db" translate="yes" xml:space="preserve">
          <source>as UTF-8. This takes into account if the call to the XS function is being made from within the scope of &lt;a href=&quot;bytes&quot;&gt;use bytes &lt;/a&gt;. If so, the underlying bytes that comprise the UTF-8 string are to be exposed, rather than the character they represent. But this pragma should only really be used for debugging and perhaps low-level testing at the byte level. Hence most XS code need not concern itself with this, but various areas of the perl core do need to support it.</source>
          <target state="translated">UTF-8로. XS 함수에 대한 호출이 &lt;a href=&quot;bytes&quot;&gt;사용 바이트&lt;/a&gt; 범위 내에서 수행되는 경우이를 고려 합니다 . 그렇다면 UTF-8 문자열을 구성하는 기본 바이트가 나타내는 문자가 아니라 노출됩니다. 그러나이 pragma는 바이트 수준에서 디버깅 및 아마도 저수준 테스트에만 사용해야합니다. 따라서 대부분의 XS 코드는 이것과 관련이 없지만 펄 코어의 다양한 영역에서이를 지원해야합니다.</target>
        </trans-unit>
        <trans-unit id="15cb6bc32b06c78e373977af44ccb471b3a1d4af" translate="yes" xml:space="preserve">
          <source>as a binary string of approximately 44 bytes which holds a set or zero or more operators.</source>
          <target state="translated">약 44 바이트의 이진 문자열로, 집합 또는 0 개 이상의 연산자를 보유합니다.</target>
        </trans-unit>
        <trans-unit id="49535962cebbc0ea94c6df25ea434365bc702259" translate="yes" xml:space="preserve">
          <source>as a hash itself, the only problem one has to circumvent is how to access this</source>
          <target state="translated">해시 자체로 우회해야 할 유일한 문제는 이것에 액세스하는 방법입니다.</target>
        </trans-unit>
        <trans-unit id="b3d154f01d41c1bc9eb1e234a00980811a7203a7" translate="yes" xml:space="preserve">
          <source>as a logical stream of bits, where each ASCII '0' or '1' character represents a 0 or 1 bit, respectively. All other characters are ignored. This provides a convenient way to calculate the digest values of partial-byte data by using files, rather than having to write separate programs employing the</source>
          <target state="translated">논리적 인 비트 스트림으로서 각 ASCII '0'또는 '1'문자는 각각 0 또는 1 비트를 나타냅니다. 다른 모든 문자는 무시됩니다. 이것은 파일을 사용하여 부분 바이트 데이터의 다이제스트 값을 계산하는 편리한 방법을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="0484899da16ac25f9334dc3c0f326506de8f3b2a" translate="yes" xml:space="preserve">
          <source>as a module hierarchy name etc.</source>
          <target state="translated">모듈 계층 이름 등으로</target>
        </trans-unit>
        <trans-unit id="2595e4d12822845ad19e585d97389ce1ab042a19" translate="yes" xml:space="preserve">
          <source>as a module hierarchy name, etc.</source>
          <target state="translated">모듈 계층 이름 등으로</target>
        </trans-unit>
        <trans-unit id="7489e1fa251bf45372d6ac9fae76ff03bb4fc00a" translate="yes" xml:space="preserve">
          <source>as a naive</source>
          <target state="translated">순진한</target>
        </trans-unit>
        <trans-unit id="74d1f75f898cb43e0472a9e5e56f2df27dec3699" translate="yes" xml:space="preserve">
          <source>as a regular expression.</source>
          <target state="translated">정규식으로.</target>
        </trans-unit>
        <trans-unit id="73ad2cf416dcc1436eb98bf0ea9e81a9ab178ed0" translate="yes" xml:space="preserve">
          <source>as a shell, thus I picked up &lt;code&gt;sh.exe&lt;/code&gt; . This assures almost 100% compatibility with the scripts coming from *nix. As an added benefit this works as well under DOS if you use DOS-enabled port of pdksh (see &lt;a href=&quot;#Prerequisites&quot;&gt;Prerequisites&lt;/a&gt;).</source>
          <target state="translated">쉘로 &lt;code&gt;sh.exe&lt;/code&gt; 를 선택했습니다 . 이는 * nix에서 제공되는 스크립트와 거의 100 %의 호환성을 보장합니다. pdksh의 DOS 사용 가능 포트를 사용하는 경우 DOS에서도 추가 이점이 있습니다 ( &lt;a href=&quot;#Prerequisites&quot;&gt;전제 조건&lt;/a&gt; 참조 ).</target>
        </trans-unit>
        <trans-unit id="7fc448ca1e6145126fcde1afbfc84e38e6144b79" translate="yes" xml:space="preserve">
          <source>as a temporary development aid while securing legacy code: for real production code and for new secure code written from scratch, always use the real &lt;b&gt;-T&lt;/b&gt;.</source>
          <target state="translated">레거시 코드를 보호하는 동안 임시 개발 지원으로 : 실제 프로덕션 코드 및 처음부터 작성된 새 보안 코드에는 항상 real &lt;b&gt;-T를&lt;/b&gt; 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="4ab073688be2687e53685015f7b0f7521b1bb83a" translate="yes" xml:space="preserve">
          <source>as after matching the A but failing on the B the &lt;code&gt;(*THEN)&lt;/code&gt; verb will backtrack and try C; but the &lt;code&gt;(*PRUNE)&lt;/code&gt; verb will simply fail.</source>
          <target state="translated">A와 일치하지만 B에서 실패한 후 &lt;code&gt;(*THEN)&lt;/code&gt; 동사는 역 추적하고 C를 시도합니다. 그러나 &lt;code&gt;(*PRUNE)&lt;/code&gt; 동사는 단순히 실패합니다.</target>
        </trans-unit>
        <trans-unit id="9753eb43e6b71481134609a83fe7c9d127007ad0" translate="yes" xml:space="preserve">
          <source>as an additional linker argument.</source>
          <target state="translated">추가 링커 인수로.</target>
        </trans-unit>
        <trans-unit id="819da9a9443370e84fe6f05fc53d70984c447739" translate="yes" xml:space="preserve">
          <source>as an argument, and returns text to insert into the string instead of the &lt;code&gt;\N{&lt;i&gt;CHARNAME&lt;/i&gt;}&lt;/code&gt; escape.</source>
          <target state="translated">&lt;code&gt;\N{&lt;i&gt;CHARNAME&lt;/i&gt;}&lt;/code&gt; 이스케이프 대신 문자열에 삽입 할 텍스트를 인수로 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="a1e4232743f22df2b484ab094b5e1490c15a9dc6" translate="yes" xml:space="preserve">
          <source>as an array reference (as in the original Tie::Cycle example at the start of this section).</source>
          <target state="translated">이 섹션의 시작 부분에있는 원래 Tie :: Cycle 예제에서와 같이 배열 참조로 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="1fedb298f571e978a357461bbaffb88fd67e6d25" translate="yes" xml:space="preserve">
          <source>as an input to makefile.pl above. Here</source>
          <target state="translated">위의 makefile.pl에 대한 입력으로. 여기</target>
        </trans-unit>
        <trans-unit id="22c9de0caa5ee810970ed637faf33df068656b95" translate="yes" xml:space="preserve">
          <source>as an instance method will reset the object to the initial state associated with</source>
          <target state="translated">인스턴스 메소드는 객체를 초기 상태로 재설정합니다.</target>
        </trans-unit>
        <trans-unit id="fec541f105313d0d35c30d128259bc532a7d9fe9" translate="yes" xml:space="preserve">
          <source>as are these</source>
          <target state="translated">이것들은</target>
        </trans-unit>
        <trans-unit id="3f566ada162944f7b5c8044e94db8ddd5ca7b693" translate="yes" xml:space="preserve">
          <source>as being identical to calling &lt;code&gt;&lt;a href=&quot;functions/binmode&quot;&gt;binmode($fh)&lt;/a&gt;&lt;/code&gt; - the stream is made suitable for passing binary data, i.e. each byte is passed as-is. The stream will still be buffered.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/binmode&quot;&gt;binmode($fh)&lt;/a&gt;&lt;/code&gt; 호출과 동일 -스트림은 이진 데이터를 전달하는 데 적합합니다. 즉, 각 바이트는 그대로 전달됩니다. 스트림은 여전히 ​​버퍼링됩니다.</target>
        </trans-unit>
        <trans-unit id="fe36dc0e525faa7dfe808ab76ec97f002c503815" translate="yes" xml:space="preserve">
          <source>as characters in Perl's internal format. For example, to convert ISO-8859-1 data into Microsoft's CP1250 encoding:</source>
          <target state="translated">Perl의 내부 형식으로 문자로. 예를 들어, ISO-8859-1 데이터를 Microsoft의 CP1250 인코딩으로 변환하려면 다음을 수행하십시오.</target>
        </trans-unit>
        <trans-unit id="52ad92a7cc1dc82c3b06fb1e695eb96d880a2a5a" translate="yes" xml:space="preserve">
          <source>as defined by ANSI C are</source>
          <target state="translated">ANSI C에서 정의한대로</target>
        </trans-unit>
        <trans-unit id="0db0e3d07dd3b225f470aaeae03a367dc468530e" translate="yes" xml:space="preserve">
          <source>as described &lt;a href=&quot;#The-Generic-Object&quot;&gt;further down&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#The-Generic-Object&quot;&gt;더 아래에&lt;/a&gt; 설명 된대로 .</target>
        </trans-unit>
        <trans-unit id="f8f8adcdf42c0a2a9a24916f1ba32a8d72714fa5" translate="yes" xml:space="preserve">
          <source>as expected. Without the specification of &lt;code&gt;&quot;&lt;/code&gt; as an embedded quoter:</source>
          <target state="translated">예상대로. 내장 인용 자로 &lt;code&gt;&quot;&lt;/code&gt; 를 지정하지 않은 경우 :</target>
        </trans-unit>
        <trans-unit id="50b0ba5762dbe68ffeef1f2372b2155aab4b196b" translate="yes" xml:space="preserve">
          <source>as far as &lt;code&gt;CODE:&lt;/code&gt; section or &lt;code&gt;PPCODE:&lt;/code&gt; section</source>
          <target state="translated">까지로 &lt;code&gt;CODE:&lt;/code&gt; 섹션 또는 &lt;code&gt;PPCODE:&lt;/code&gt; 섹션</target>
        </trans-unit>
        <trans-unit id="4baf8ad65f591cd293a9207d4c3e6ef80259ae5f" translate="yes" xml:space="preserve">
          <source>as far as you can in real-time.</source>
          <target state="translated">당신이 실시간으로 할 수있는 한.</target>
        </trans-unit>
        <trans-unit id="3f657c5685f4dbb2d51dff03864121342570902a" translate="yes" xml:space="preserve">
          <source>as follows). The name of suspects can either be canonical names or aliases.</source>
          <target state="translated">다음과 같이). 용의자 이름은 정식 이름 또는 별칭 일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="44b2b85ecf80cc5b480b0158de904c01eefa0d24" translate="yes" xml:space="preserve">
          <source>as follows:</source>
          <target state="translated">다음과 같이 :</target>
        </trans-unit>
        <trans-unit id="ff4a3f206de020088e59ed005bda8b3029a132f8" translate="yes" xml:space="preserve">
          <source>as is</source>
          <target state="translated">그대로</target>
        </trans-unit>
        <trans-unit id="7be0a48e6cca430c773cf99a10b3b59e7934ed11" translate="yes" xml:space="preserve">
          <source>as it feels like a bit of an ugly hack in its current form.</source>
          <target state="translated">현재 형태의 약간 못생긴 해킹처럼 느껴집니다.</target>
        </trans-unit>
        <trans-unit id="878a917630b24304536b1a8522e60b14130b110d" translate="yes" xml:space="preserve">
          <source>as needed.</source>
          <target state="translated">필요에 따라.</target>
        </trans-unit>
        <trans-unit id="b51e507fa59a767444dbf1b962a404eb04a8e4aa" translate="yes" xml:space="preserve">
          <source>as part of the 'distdir' target (and thus the 'dist' target). This is intended to seamlessly and rapidly populate CPAN with module meta-data. If you wish to shut this feature off, set the &lt;code&gt;NO_META&lt;/code&gt;&lt;code&gt;WriteMakefile()&lt;/code&gt; flag to true.</source>
          <target state="translated">'distdir'대상 ( 'dist'대상)의 일부로 이는 CPAN을 모듈 메타 데이터로 원활하고 빠르게 채울 수 있도록하기위한 것입니다. 이 기능을 끄려면 &lt;code&gt;NO_META&lt;/code&gt; &lt;code&gt;WriteMakefile()&lt;/code&gt; 플래그를 true로 설정하십시오 .</target>
        </trans-unit>
        <trans-unit id="1b4102fd0036fbd6a5a356f9ed338ac369433f6c" translate="yes" xml:space="preserve">
          <source>as passed in cannot be inferred from</source>
          <target state="translated">전달 된대로에서 추론 할 수없는</target>
        </trans-unit>
        <trans-unit id="a2383664a361c0b34599be3f0ddacd7781220e2a" translate="yes" xml:space="preserve">
          <source>as returned by &lt;a href=&quot;#charblock()&quot;&gt;charblock()&lt;/a&gt; and &lt;a href=&quot;#charscript()&quot;&gt;charscript()&lt;/a&gt; or as the values of the hash returned by &lt;a href=&quot;#charblocks()&quot;&gt;charblocks()&lt;/a&gt; and &lt;a href=&quot;#charscripts()&quot;&gt;charscripts()&lt;/a&gt; by using &lt;code&gt;charinrange()&lt;/code&gt; :</source>
          <target state="translated">로 돌려 &lt;a href=&quot;#charblock()&quot;&gt;charblock ()&lt;/a&gt; 및 &lt;a href=&quot;#charscript()&quot;&gt;charscript ()&lt;/a&gt; 또는에 의해 리턴 된 해시 값과 같은 &lt;a href=&quot;#charblocks()&quot;&gt;charblocks ()&lt;/a&gt; 및 &lt;a href=&quot;#charscripts()&quot;&gt;charscripts ()&lt;/a&gt; 를 사용하여 &lt;code&gt;charinrange()&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="c83d44be22c0359c7a8a15302b7f5e83e6b94790" translate="yes" xml:space="preserve">
          <source>as shown below.</source>
          <target state="translated">아래 그림과 같이.</target>
        </trans-unit>
        <trans-unit id="6daf9fe089003e9cf65e42ff59a1d2773ab32262" translate="yes" xml:space="preserve">
          <source>as the first argument</source>
          <target state="translated">첫 번째 논쟁으로</target>
        </trans-unit>
        <trans-unit id="dcb44b7e0e1eb593d77c64f859e0a77259727455" translate="yes" xml:space="preserve">
          <source>as the first line in &lt;code&gt;*.cmd&lt;/code&gt; file (&lt;b&gt;-S&lt;/b&gt; due to a bug in cmd.exe's `extproc' handling).</source>
          <target state="translated">&lt;code&gt;*.cmd&lt;/code&gt; 파일 의 첫 줄로 ( cmd.exe의`extproc '처리 버그로 인해 &lt;b&gt;-S&lt;/b&gt; ).</target>
        </trans-unit>
        <trans-unit id="9afe0920031a79f7bd9f3454807b104ed19d1232" translate="yes" xml:space="preserve">
          <source>as the first line in &lt;code&gt;*.cmd&lt;/code&gt; file (&lt;code&gt;-S&lt;/code&gt; due to a bug in cmd.exe's &quot;extproc&quot; handling). For DOS one should first invent a corresponding batch file and codify it in &lt;code&gt;ALTERNATE_SHEBANG&lt;/code&gt; (see the</source>
          <target state="translated">&lt;code&gt;*.cmd&lt;/code&gt; 파일 의 첫 번째 줄로 ( cmd.exe의 &quot;extproc&quot;처리 버그로 인해 &lt;code&gt;-S&lt;/code&gt; ). DOS의 경우 먼저 해당 배치 파일을 발명하고 &lt;code&gt;ALTERNATE_SHEBANG&lt;/code&gt; 에 코드화해야 합니다 (</target>
        </trans-unit>
        <trans-unit id="aa88a9399009fa8389588f0aaf2da6151a41febb" translate="yes" xml:space="preserve">
          <source>as the first line instead. Or you can combine some of the above tricks:</source>
          <target state="translated">대신 첫 번째 줄로. 또는 위의 일부 트릭을 결합 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="0d88bf94a93a4b61f0fa92dfc15bfef6b4012493" translate="yes" xml:space="preserve">
          <source>as the first line of the handler (see &lt;a href=&quot;../perlvar#%24%5eS&quot;&gt;$^S in perlvar&lt;/a&gt;). Because this promotes strange action at a distance, this counterintuitive behavior may be fixed in a future release.</source>
          <target state="translated">핸들러의 첫 번째 줄로 ( &lt;a href=&quot;../perlvar#%24%5eS&quot;&gt;perlvar의 $ ^ S&lt;/a&gt; 참조 ). 이로 인해 원거리에서 이상한 동작이 발생하므로이 반 직관적 인 동작은 향후 릴리스에서 수정 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="17abd9184d2928495e286f5f11862b4c9a8071d0" translate="yes" xml:space="preserve">
          <source>as the first line of the handler (see &lt;a href=&quot;perlvar#%24%5eS&quot;&gt;$^S in perlvar&lt;/a&gt;). Because this promotes strange action at a distance, this counterintuitive behavior may be fixed in a future release.</source>
          <target state="translated">핸들러의 첫 번째 줄로 ( &lt;a href=&quot;perlvar#%24%5eS&quot;&gt;perlvar의 $ ^ S&lt;/a&gt; 참조 ). 이로 인해 원거리에서 이상한 동작이 발생하므로이 반 직관적 인 동작은 향후 릴리스에서 수정 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="bf7d822469082c4bfc650c2ae1a9bcefcadfb22e" translate="yes" xml:space="preserve">
          <source>as the key. In most cases, this contains only a few keys, but if Perl was invoked via the C &lt;code&gt;&lt;a href=&quot;functions/exec&quot;&gt;exec[lv]e()&lt;/a&gt;&lt;/code&gt; function, as is the case for some embedded Perl applications or when running under a shell such as GNV bash, the &lt;code&gt;environ&lt;/code&gt; array may have been populated by the calling program.</source>
          <target state="translated">열쇠로. 대부분의 경우 여기에는 몇 개의 키만 포함되어 있지만 Perl이 C &lt;code&gt;&lt;a href=&quot;functions/exec&quot;&gt;exec[lv]e()&lt;/a&gt;&lt;/code&gt; 함수 를 통해 호출 된 경우 일부 임베디드 Perl 응용 프로그램의 경우와 같이 또는 &lt;code&gt;environ&lt;/code&gt; GNV bash와 같은 쉘에서 실행될 때 호출 프로그램이 배열을 채웠을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5d01b7b2a5e71d9e7c928d505a1b934e42c98d8d" translate="yes" xml:space="preserve">
          <source>as the logical name. The normal search order of access modes is used.</source>
          <target state="translated">논리적 이름으로. 액세스 모드의 일반적인 검색 순서가 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="24bb2a3db47e83fda820245153deab8162cb8ccb" translate="yes" xml:space="preserve">
          <source>as the name of the symbol. When reading an element of &lt;code&gt;%ENV&lt;/code&gt; , the local symbol table is scanned first, followed by the global symbol table.. The characters following &lt;code&gt;CLISYM_&lt;/code&gt; are significant when an element of &lt;code&gt;%ENV&lt;/code&gt; is set or deleted: if the complete string is &lt;code&gt;CLISYM_LOCAL&lt;/code&gt; , the change is made in the local symbol table; otherwise the global symbol table is changed.</source>
          <target state="translated">기호의 이름으로. &lt;code&gt;%ENV&lt;/code&gt; 요소를 읽을 때 로컬 기호 테이블이 먼저 스캔 된 다음 전역 기호 테이블이 스캔됩니다. &lt;code&gt;CLISYM_&lt;/code&gt; 뒤에 오는 문자 는 &lt;code&gt;%ENV&lt;/code&gt; 요소 가 설정되거나 삭제 될 때 중요 합니다. 전체 문자열이 &lt;code&gt;CLISYM_LOCAL&lt;/code&gt; 인 경우 변경 사항 로컬 심볼 테이블에서 이루어집니다. 그렇지 않으면 전역 기호 테이블이 변경됩니다.</target>
        </trans-unit>
        <trans-unit id="43689b10d7e82ce746d34de5bbe78235ef4476bd" translate="yes" xml:space="preserve">
          <source>as though the argument to &lt;code&gt;given&lt;/code&gt; were an element of the hash &lt;code&gt;%foo&lt;/code&gt; , interpreting the braces as hash-element syntax.</source>
          <target state="translated">&lt;code&gt;given&lt;/code&gt; 인수가 해시 &lt;code&gt;%foo&lt;/code&gt; 의 요소 인 것처럼 중괄호를 해시 요소 구문으로 해석합니다.</target>
        </trans-unit>
        <trans-unit id="9aa9ebca57db525b108992870f6a6a0744343a91" translate="yes" xml:space="preserve">
          <source>as though you stored the same variable reference each time, you actually did not! This is a subtle distinction that can produce more efficient code at the risk of misleading all but the most experienced of programmers. So I usually advise against teaching it to beginners. In fact, except for passing arguments to functions, I seldom like to see the gimme-a-reference operator (backslash) used much at all in code. Instead, I advise beginners that they (and most of the rest of us) should try to use the much more easily understood constructors &lt;code&gt;[]&lt;/code&gt; and &lt;code&gt;{}&lt;/code&gt; instead of relying upon lexical (or dynamic) scoping and hidden reference-counting to do the right thing behind the scenes.</source>
          <target state="translated">매번 같은 변수 참조를 저장 한 것처럼 실제로는 그렇지 않습니다! 이것은 가장 숙련 된 프로그래머를 제외한 모든 사람을 오도 할 위험이있는보다 효율적인 코드를 생성 할 수있는 미묘한 차이입니다. 그래서 나는 보통 초보자에게 가르치지 말 것을 권합니다. 실제로 함수에 인수를 전달하는 것을 제외하고는 코드에서 김미-참조 연산자 (백 슬래시)가 많이 사용되는 것을 거의 좋아하지 않습니다. 대신 초보자들에게 (그리고 우리 대부분은 ) 올바른 어휘 (또는 동적) 범위 지정 및 숨겨진 참조 계산에 의존하는 대신 훨씬 쉽게 이해되는 생성자 &lt;code&gt;[]&lt;/code&gt; 및 &lt;code&gt;{}&lt;/code&gt; 를 사용해야한다고 조언합니다. 무대 뒤에서.</target>
        </trans-unit>
        <trans-unit id="1b721d8a6c65b8f505bf083f7362443eee48e0d5" translate="yes" xml:space="preserve">
          <source>as used in</source>
          <target state="translated">에 사용되는</target>
        </trans-unit>
        <trans-unit id="73b20ad0fd8d8906b930c36d48ac0a852e8a70ab" translate="yes" xml:space="preserve">
          <source>as usual</source>
          <target state="translated">평소와 같이</target>
        </trans-unit>
        <trans-unit id="9fa196bf1305f9de2ff08f52aee250714a733647" translate="yes" xml:space="preserve">
          <source>as we know that if the final quote does not match, backtracking will not help. See the independent subexpression &lt;a href=&quot;#(%3f%3epattern)&quot;&gt;(?&amp;gt;pattern)&lt;/a&gt; for more details; possessive quantifiers are just syntactic sugar for that construct. For instance the above example could also be written as follows:</source>
          <target state="translated">최종 견적이 일치하지 않으면 역 추적이 도움이되지 않습니다. 자세한 내용은 독립 하위 표현식 &lt;a href=&quot;#(%3f%3epattern)&quot;&gt;(?&amp;gt; 패턴)&lt;/a&gt; 을 참조하십시오. 소유 정량자는 그 구성에 대한 구문 설탕 일뿐입니다. 예를 들어 위의 예는 다음과 같이 작성할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="983291ad5e53a2455ef9e77e2de94ef019d4ba61" translate="yes" xml:space="preserve">
          <source>as well (I use one from pdksh). The path</source>
          <target state="translated">또한 (나는 pdksh에서 하나를 사용합니다). 경로</target>
        </trans-unit>
        <trans-unit id="ffcbb6274e566044113aaf2e534009b9310ede89" translate="yes" xml:space="preserve">
          <source>as well.</source>
          <target state="translated">게다가.</target>
        </trans-unit>
        <trans-unit id="0b2d56ecd63cccc527289487cbff82b5288f062d" translate="yes" xml:space="preserve">
          <source>as well. Here's a sample entry from that table:</source>
          <target state="translated">게다가. 해당 테이블의 샘플 항목은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="163b9e6ac2b85e0d1d3b25a5f039388d7483329f" translate="yes" xml:space="preserve">
          <source>as well. Options are not necessary for the program to work, hence the name 'option', but are used to modify its default behaviour. For example, a program could do its job quietly, but with a suitable option it could provide verbose information about what it did.</source>
          <target state="translated">게다가. 프로그램이 작동하는 데 옵션이 필요하지 않으므로 'option'이라는 이름이 사용되지만 기본 동작을 수정하는 데 사용됩니다. 예를 들어, 프로그램은 조용히 작업을 수행 할 수 있지만 적절한 옵션을 사용하면 수행 한 작업에 대한 자세한 정보를 제공 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e0f6619c3a0d789145899e0d26503b93025880f2" translate="yes" xml:space="preserve">
          <source>as_bin()</source>
          <target state="translated">as_bin()</target>
        </trans-unit>
        <trans-unit id="6293714a50a40120f58b4889cff9a65fc732965e" translate="yes" xml:space="preserve">
          <source>as_float()</source>
          <target state="translated">as_float()</target>
        </trans-unit>
        <trans-unit id="c3bc5083cb007923550a1a79fad46180e4d878d7" translate="yes" xml:space="preserve">
          <source>as_hex()</source>
          <target state="translated">as_hex()</target>
        </trans-unit>
        <trans-unit id="003d7a49b767183e39c1b831d4ce7263b750ea27" translate="yes" xml:space="preserve">
          <source>as_int()/as_number()</source>
          <target state="translated">as_int()/as_number()</target>
        </trans-unit>
        <trans-unit id="1200fa194bbc6cba8352b08f67c5ac42078a226e" translate="yes" xml:space="preserve">
          <source>as_oct()</source>
          <target state="translated">as_oct()</target>
        </trans-unit>
        <trans-unit id="ce10f51d7f39f9fc7631435563d91f1e2dd622f5" translate="yes" xml:space="preserve">
          <source>ask DB not to stop in these packages</source>
          <target state="translated">이 패키지에서 DB를 멈추지 말라고 요청하십시오.</target>
        </trans-unit>
        <trans-unit id="c4407719eccaafa9bde053b1db60d6c0d61f7672" translate="yes" xml:space="preserve">
          <source>assigned</source>
          <target state="translated">assigned</target>
        </trans-unit>
        <trans-unit id="18237e23354148ad3de3fd278a74bf877d784ef2" translate="yes" xml:space="preserve">
          <source>assignment-variants of operators are present in the script, they may be generated by the optimizer. For example,</source>
          <target state="translated">연산자의 할당 변수는 스크립트에 존재하며 옵티 마이저에 의해 생성 될 수 있습니다. 예를 들어</target>
        </trans-unit>
        <trans-unit id="19f88cb673e51233787f63a133933b396397ecad" translate="yes" xml:space="preserve">
          <source>assigns the entire list value to array @foo, but</source>
          <target state="translated">전체 목록 값을 배열 @foo에 할당하지만</target>
        </trans-unit>
        <trans-unit id="bac4a6a253f6704e2643e1787606b1818276ab16" translate="yes" xml:space="preserve">
          <source>assigns the value of variable $bar to the scalar variable $foo. Note that the value of an actual array in scalar context is the length of the array; the following assigns the value 3 to $foo:</source>
          <target state="translated">변수 $ bar의 값을 스칼라 변수 $ foo에 지정합니다. 스칼라 컨텍스트에서 실제 배열의 값은 배열의 길이입니다. 다음은 값 3을 $ foo에 지정합니다.</target>
        </trans-unit>
        <trans-unit id="a2c480bb0d3fb166118fff165602dfb3d8755b71" translate="yes" xml:space="preserve">
          <source>associated with a particular file.</source>
          <target state="translated">특정 파일과 연관되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="d03fe2e108278a21db78ad03f95614754c65b243" translate="yes" xml:space="preserve">
          <source>associations</source>
          <target state="translated">associations</target>
        </trans-unit>
        <trans-unit id="ae321c05bada36b13f653e5d63881d2980254f64" translate="yes" xml:space="preserve">
          <source>assumes that either the layer has popped itself, or the layer is super special and needs to be retained for other reasons. In most cases it should return</source>
          <target state="translated">레이어 자체가 튀어 나오거나 레이어가 특별하고 다른 이유로 유지해야한다고 가정합니다. 대부분의 경우 반환해야합니다</target>
        </trans-unit>
        <trans-unit id="617755c776549d8f4f3362cdb6a17b675ef13281" translate="yes" xml:space="preserve">
          <source>assuming you have mounted that CD on /cdrom.</source>
          <target state="translated">CD를 / cdrom에 마운트했다고 가정합니다.</target>
        </trans-unit>
        <trans-unit id="3602b9270e66ab97788614f8a3fd98920bdaf5c7" translate="yes" xml:space="preserve">
          <source>at &lt;a href=&quot;http://developer.apple.com/documentation/Darwin/Conceptual/64bitPorting/index.html&quot;&gt;http://developer.apple.com/documentation/Darwin/Conceptual/64bitPorting/index.html&lt;/a&gt;.</source>
          <target state="translated">에서 &lt;a href=&quot;http://developer.apple.com/documentation/Darwin/Conceptual/64bitPorting/index.html&quot;&gt;http://developer.apple.com/documentation/Darwin/Conceptual/64bitPorting/index.html&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="412f08a017337a56b4152e7bc3cd13375ff3254f" translate="yes" xml:space="preserve">
          <source>at &lt;a href=&quot;http://perltraining.com.au/tips/2008-08-20.html&quot;&gt;http://perltraining.com.au/tips/2008-08-20.html&lt;/a&gt;</source>
          <target state="translated">에서 &lt;a href=&quot;http://perltraining.com.au/tips/2008-08-20.html&quot;&gt;http://perltraining.com.au/tips/2008-08-20.html&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="763fd237e6f3831141eb71f2fa9c664c2d5dde22" translate="yes" xml:space="preserve">
          <source>at a given position</source>
          <target state="translated">주어진 위치에서</target>
        </trans-unit>
        <trans-unit id="9a37607749afe8d9567c08deb31e518558e6f3b5" translate="yes" xml:space="preserve">
          <source>at any one time.</source>
          <target state="translated">어느 한 순간에.</target>
        </trans-unit>
        <trans-unit id="850ad5d4afbea97738fa95acd1da7e607bd530cc" translate="yes" xml:space="preserve">
          <source>at compile time</source>
          <target state="translated">컴파일 타임에</target>
        </trans-unit>
        <trans-unit id="b4e380389a774a586c5fa16ad6f747ccd0f5dd49" translate="yes" xml:space="preserve">
          <source>at least</source>
          <target state="translated">적어도</target>
        </trans-unit>
        <trans-unit id="9564a8b2dea482cb502ddc133f411fb7baa8cd10" translate="yes" xml:space="preserve">
          <source>at make time, so you should make perl to follow this along.</source>
          <target state="translated">제작 시간에 펄을 따라야합니다.</target>
        </trans-unit>
        <trans-unit id="32f22c8244d7198bc5973a52b7e608dea1b695bc" translate="yes" xml:space="preserve">
          <source>at run time</source>
          <target state="translated">런타임에</target>
        </trans-unit>
        <trans-unit id="e490f3a80d5cc3f15d3885d16099e39047e2c3bc" translate="yes" xml:space="preserve">
          <source>at startup (in a BEGIN block). This is a hook that allows the sysadmin to customize how Perl behaves. It can for instance be used to add entries to the @INC array to make Perl find modules in non-standard locations.</source>
          <target state="translated">시작시 (BEGIN 블록에서). 이것은 sysadmin이 Perl의 동작 방식을 사용자 정의 할 수있는 후크입니다. 예를 들어 @INC 배열에 항목을 추가하여 Perl이 비표준 위치에서 모듈을 찾도록하는 데 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="15d1d5e3a86f87da2663eae7907bc2307a399554" translate="yes" xml:space="preserve">
          <source>at startup.</source>
          <target state="translated">시작할 때.</target>
        </trans-unit>
        <trans-unit id="fdc8cfe05d049efd8ba3e7434e7eaf619158eb0f" translate="yes" xml:space="preserve">
          <source>at the C level</source>
          <target state="translated">C 레벨에서</target>
        </trans-unit>
        <trans-unit id="c1388282fa974c0f59a57d7833efecdf9f582735" translate="yes" xml:space="preserve">
          <source>at the end</source>
          <target state="translated">결국</target>
        </trans-unit>
        <trans-unit id="9217e9b0a48bcfc528a9d49dbdf842dbf2a6a760" translate="yes" xml:space="preserve">
          <source>at the end. The &lt;code&gt;ENTER&lt;/code&gt; /&lt;code&gt;SAVETMPS&lt;/code&gt; pair creates a boundary for any temporaries we create. This means that the temporaries we get rid of will be limited to those which were created after these calls.</source>
          <target state="translated">끝에. 는 &lt;code&gt;ENTER&lt;/code&gt; / &lt;code&gt;SAVETMPS&lt;/code&gt; 의 쌍 우리가 만드는 모든 임시직에 대한 경계를 만듭니다. 즉, 우리가 제거하는 임시는 이러한 호출 후 생성 된 임시로 제한됩니다.</target>
        </trans-unit>
        <trans-unit id="8dcfd128d2ba54e6c9380293b323b1260cdc3701" translate="yes" xml:space="preserve">
          <source>at the same level of nesting</source>
          <target state="translated">같은 수준의 중첩</target>
        </trans-unit>
        <trans-unit id="8e1733375a8dd981de1735fa2875f132e477b6da" translate="yes" xml:space="preserve">
          <source>at the start (or near the start) of your program. (Note that this</source>
          <target state="translated">프로그램의 시작 (또는 시작 근처)에 (이것은</target>
        </trans-unit>
        <trans-unit id="37f302ce8124164c6fcfe7d012fcfb1e33675294" translate="yes" xml:space="preserve">
          <source>at the start of the function, and</source>
          <target state="translated">기능이 시작될 때</target>
        </trans-unit>
        <trans-unit id="9b151ca84837e5f88e85ae049f9b552e13c6fe0d" translate="yes" xml:space="preserve">
          <source>at the top of your code.</source>
          <target state="translated">코드 상단에.</target>
        </trans-unit>
        <trans-unit id="89c4f7ac43cc28c22dbb5ebc96fabde7dae0b382" translate="yes" xml:space="preserve">
          <source>at the top of your program, where &lt;b&gt;-mysw&lt;/b&gt; are any command line switches you want to pass to Perl. You can now invoke the program directly, by saying &lt;code&gt;perl program&lt;/code&gt; , or as a DCL procedure, by saying &lt;code&gt;@program&lt;/code&gt; (or implicitly via</source>
          <target state="translated">프로그램 맨 위에서 &lt;b&gt;-mysw&lt;/b&gt; 는 Perl에 전달할 명령 행 스위치입니다. 이제 &lt;code&gt;perl program&lt;/code&gt; 을 말 하거나 DCL 프로 시저로 &lt;code&gt;@program&lt;/code&gt; 을 말 하여 프로그램을 직접 호출 할 수 있습니다. (또는 암시 적으로 통해)을 통해</target>
        </trans-unit>
        <trans-unit id="7e70d57f73905d45b6f79912c7b2b82874d2e8a5" translate="yes" xml:space="preserve">
          <source>at the top of your program. This aliases all the short names to the long names in the current package. Some even have medium names, generally borrowed from &lt;b&gt;awk&lt;/b&gt;. For more info, please see &lt;a href=&quot;english&quot;&gt;English&lt;/a&gt;.</source>
          <target state="translated">프로그램 맨 위에 이렇게하면 모든 짧은 이름이 현재 패키지의 긴 이름으로 별칭이 지정됩니다. 일부는 보통 &lt;b&gt;awk&lt;/b&gt; 에서 빌린 중간 이름을 갖습니다 . 자세한 내용은 &lt;a href=&quot;english&quot;&gt;영어&lt;/a&gt; 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="5c4d67f365ec49b947ee79badac65584b0444347" translate="yes" xml:space="preserve">
          <source>at the top of your script, Math::BigFloat and Math::BigInt will be loaded and any constant number will be converted to an object (Math::BigFloat for floats like 3.1415 and Math::BigInt for integers like 1234).</source>
          <target state="translated">스크립트 상단에 Math :: BigFloat 및 Math :: BigInt가로드되고 상수가 객체로 변환됩니다 (3.415와 같은 부동 소수점의 경우 Math :: BigFloat, 1234와 같은 정수의 경우 Math :: BigInt).</target>
        </trans-unit>
        <trans-unit id="c90414cee16b2af97b8d5180cc885c0f62d6800c" translate="yes" xml:space="preserve">
          <source>at which point %greetings has the contents:</source>
          <target state="translated">% greetings의 내용이있는 시점 :</target>
        </trans-unit>
        <trans-unit id="3bb758cfc583548bd5a6d49b0a553b6fe91a0689" translate="yes" xml:space="preserve">
          <source>at your peril</source>
          <target state="translated">당신의 위험에</target>
        </trans-unit>
        <trans-unit id="b1a7357ef61ecd1781b4633dc3e33a383686041c" translate="yes" xml:space="preserve">
          <source>atan2</source>
          <target state="translated">atan2</target>
        </trans-unit>
        <trans-unit id="fc337a53ff380e9cc91c7f4ada35b7c83e1170cd" translate="yes" xml:space="preserve">
          <source>atan2 Y,X</source>
          <target state="translated">atan2 Y, X</target>
        </trans-unit>
        <trans-unit id="5604a15f93274b4be18e2e5703972fcae8d4191f" translate="yes" xml:space="preserve">
          <source>atolf.U</source>
          <target state="translated">atolf.U</target>
        </trans-unit>
        <trans-unit id="20378f82e37925c4f68137e0b5f0ceba9d2f7e7d" translate="yes" xml:space="preserve">
          <source>atoll.U</source>
          <target state="translated">atoll.U</target>
        </trans-unit>
        <trans-unit id="aaa7447496328d92dc17c3d0fc8649f8ad7d1856" translate="yes" xml:space="preserve">
          <source>attribute for this start-token object to</source>
          <target state="translated">이 시작 토큰 객체의 속성을</target>
        </trans-unit>
        <trans-unit id="33337ed515c0adfa6a07049f9d97abb273869d7a" translate="yes" xml:space="preserve">
          <source>attribute for this start-token object, or undef.</source>
          <target state="translated">이 시작 토큰 객체의 속성 또는 undef.</target>
        </trans-unit>
        <trans-unit id="d7f67a250d8254339cc572b200990d99fe1baf29" translate="yes" xml:space="preserve">
          <source>attributes</source>
          <target state="translated">attributes</target>
        </trans-unit>
        <trans-unit id="247d5e69b38550a7d0b09aea424ed5dab3a67bad" translate="yes" xml:space="preserve">
          <source>attributes - get/set subroutine or variable attributes</source>
          <target state="translated">속성-서브 루틴 또는 변수 속성 가져 오기 / 설정</target>
        </trans-unit>
        <trans-unit id="6c96eab257b4cf4e5e658df68be3609a71585745" translate="yes" xml:space="preserve">
          <source>attrname</source>
          <target state="translated">attrname</target>
        </trans-unit>
        <trans-unit id="480abf89fe2d1830b23e7098edc6d51d774d0c2a" translate="yes" xml:space="preserve">
          <source>authors/id/TOMC/scripts/nshist.gz</source>
          <target state="translated">authors/id/TOMC/scripts/nshist.gz</target>
        </trans-unit>
        <trans-unit id="c33fcb6996455fe1e1fa0a761ee443d59c481aa3" translate="yes" xml:space="preserve">
          <source>auto/</source>
          <target state="translated">auto/</target>
        </trans-unit>
        <trans-unit id="379a77c54f6ae1790a2244a0d2c048af4e634475" translate="yes" xml:space="preserve">
          <source>auto/$module/$module.bs</source>
          <target state="translated">auto/$module/$module.bs</target>
        </trans-unit>
        <trans-unit id="220e6841a8a7621c4a89ea7b80f1f146f73eaf9b" translate="yes" xml:space="preserve">
          <source>auto/DBD/Oracle/Oracle.a</source>
          <target state="translated">auto/DBD/Oracle/Oracle.a</target>
        </trans-unit>
        <trans-unit id="51ebf6d6fd8909a977306dd245925df9ee90fd5f" translate="yes" xml:space="preserve">
          <source>auto/Foo/*.mo</source>
          <target state="translated">auto/Foo/*.mo</target>
        </trans-unit>
        <trans-unit id="e694098f1cf7520142821fcc984e3d661c44f43f" translate="yes" xml:space="preserve">
          <source>auto/Foo/*.po</source>
          <target state="translated">auto/Foo/*.po</target>
        </trans-unit>
        <trans-unit id="3c5e43613cff090be4fc50d8ae5dd6d77a6b436a" translate="yes" xml:space="preserve">
          <source>auto/Socket/Socket.a</source>
          <target state="translated">auto/Socket/Socket.a</target>
        </trans-unit>
        <trans-unit id="2be06c1e85af3aeda93bd94fc5f8c8f0ca1a6fcf" translate="yes" xml:space="preserve">
          <source>auto/Socket/Socket.so</source>
          <target state="translated">auto/Socket/Socket.so</target>
        </trans-unit>
        <trans-unit id="0159b1c4926c7d3e58575705e2b2446e2f089413" translate="yes" xml:space="preserve">
          <source>auto/funcname.al</source>
          <target state="translated">auto/funcname.al</target>
        </trans-unit>
        <trans-unit id="29dbf9fbbc1982eb3494d98a1ba20678ee1cd75a" translate="yes" xml:space="preserve">
          <source>autobundle</source>
          <target state="translated">autobundle</target>
        </trans-unit>
        <trans-unit id="d7fdb81095b8f0d754d3385c78ee0178778a27e1" translate="yes" xml:space="preserve">
          <source>autochomp</source>
          <target state="translated">autochomp</target>
        </trans-unit>
        <trans-unit id="a577d5867e3da0a70fe888d4e799c74e3bb3acee" translate="yes" xml:space="preserve">
          <source>autodie</source>
          <target state="translated">autodie</target>
        </trans-unit>
        <trans-unit id="3d06c1fb0d41b3bcd406473263f2d39a8385f847" translate="yes" xml:space="preserve">
          <source>autodie - Replace functions with ones that succeed or die with lexical scope</source>
          <target state="translated">autodie-함수를 어휘 범위로 성공하거나 죽는 것으로 대체</target>
        </trans-unit>
        <trans-unit id="a11d8629a6714617f42a511f4ed6cd917d35963b" translate="yes" xml:space="preserve">
          <source>autodie and string eval</source>
          <target state="translated">autodie와 string eval</target>
        </trans-unit>
        <trans-unit id="7554acb29f084d6cb46fbc0e7508ae57a54cbdfc" translate="yes" xml:space="preserve">
          <source>autoexec.bat</source>
          <target state="translated">autoexec.bat</target>
        </trans-unit>
        <trans-unit id="b2858151dc8dfe7daca5d572d920ca322993a122" translate="yes" xml:space="preserve">
          <source>autoflush</source>
          <target state="translated">autoflush</target>
        </trans-unit>
        <trans-unit id="64e3d9c664534c5dc480d648743bea7d2acbe343" translate="yes" xml:space="preserve">
          <source>automatically assigns distinct sequential IDs to things for which no ID was supplied by the caller. A default value expression may also refer to parameters earlier in the signature, making the default for one parameter vary according to the earlier parameters. For example,</source>
          <target state="translated">발신자가 ID를 제공하지 않은 항목에 고유 한 순차적 ID를 자동으로 할당합니다. 기본값 표현식은 서명의 앞부분에있는 매개 변수를 참조하여 한 매개 변수의 기본값이 이전 매개 변수에 따라 달라집니다. 예를 들어</target>
        </trans-unit>
        <trans-unit id="76fc9ebd6695f30477da08fb8142ffeedfeb7837" translate="yes" xml:space="preserve">
          <source>autosplit.ix</source>
          <target state="translated">autosplit.ix</target>
        </trans-unit>
        <trans-unit id="a5d5b1a8b0a28fc771323790020196c5accafa43" translate="yes" xml:space="preserve">
          <source>autouse</source>
          <target state="translated">autouse</target>
        </trans-unit>
        <trans-unit id="442893c8365aac3e6f7baa2c6d61b464ed2881a4" translate="yes" xml:space="preserve">
          <source>autouse - postpone load of modules until a function is used</source>
          <target state="translated">자동 사용-함수가 사용될 때까지 모듈의로드를 연기</target>
        </trans-unit>
        <trans-unit id="5d4dfc227465e494c0c115736952236fb57eead0" translate="yes" xml:space="preserve">
          <source>autovivification</source>
          <target state="translated">autovivification</target>
        </trans-unit>
        <trans-unit id="7d4a1ec6821afa3e290c645e7f8553cda905013e" translate="yes" xml:space="preserve">
          <source>av.c</source>
          <target state="translated">av.c</target>
        </trans-unit>
        <trans-unit id="bf2d347acf0d2210411dbd48fd0188278826a510" translate="yes" xml:space="preserve">
          <source>available when the &lt;code&gt;seq&lt;/code&gt; method is used along with the R_CURSOR flag.</source>
          <target state="translated">&lt;code&gt;seq&lt;/code&gt; 메소드가 R_CURSOR 플래그와 함께 사용될 때 사용 가능합니다 .</target>
        </trans-unit>
        <trans-unit id="5b2f5ffc6516e12ddb85b8802e4260a6688c946b" translate="yes" xml:space="preserve">
          <source>available. After the first argument, &lt;code&gt;skip(...)&lt;/code&gt; works exactly the same way as &lt;code&gt;ok(...)&lt;/code&gt; does.</source>
          <target state="translated">유효한. 첫 번째 인수 다음에 &lt;code&gt;skip(...)&lt;/code&gt; 은 &lt;code&gt;ok(...)&lt;/code&gt; 와 동일한 방식으로 작동합니다 .</target>
        </trans-unit>
        <trans-unit id="de42df957f23daa4c8157074e0625209abd6488c" translate="yes" xml:space="preserve">
          <source>avoids such a degradation.</source>
          <target state="translated">그러한 저하를 피하십시오.</target>
        </trans-unit>
        <trans-unit id="c027a379a046e31dfb0f6b178d42c47ae4aba491" translate="yes" xml:space="preserve">
          <source>awk</source>
          <target state="translated">awk</target>
        </trans-unit>
        <trans-unit id="e418c6a55a4fb786dadd646e1573be4fd2df9653" translate="yes" xml:space="preserve">
          <source>awk.exe</source>
          <target state="translated">awk.exe</target>
        </trans-unit>
        <trans-unit id="6431b8949d26ab22586e5fea24d5e1fcf2e09540" translate="yes" xml:space="preserve">
          <source>axes. Mathematicians call</source>
          <target state="translated">축. 수학자 호출</target>
        </trans-unit>
        <trans-unit id="69036a2af9bfb0d5daf1763137608136cb2401bd" translate="yes" xml:space="preserve">
          <source>axis, and therefore</source>
          <target state="translated">축, 따라서</target>
        </trans-unit>
        <trans-unit id="e8e340942e36c5463f6d6ae678f806cf14a11886" translate="yes" xml:space="preserve">
          <source>axis. There is a notation for this using the exponential form, which is:</source>
          <target state="translated">중심선. 지수 형식을 사용하는 표기법은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="85f73bad0a71d5e81d44f69fff24051a84f9e8cb" translate="yes" xml:space="preserve">
          <source>azimuthal</source>
          <target state="translated">azimuthal</target>
        </trans-unit>
        <trans-unit id="e9d71f5ee7c92d6dc9e92ffdad17b8bd49418f98" translate="yes" xml:space="preserve">
          <source>b</source>
          <target state="translated">b</target>
        </trans-unit>
        <trans-unit id="be0f342011df36195c2bdef07802b43a541d7d4c" translate="yes" xml:space="preserve">
          <source>b) How do I verify that an email address targets a valid recipient?</source>
          <target state="translated">b) 이메일 주소가 유효한 수신자를 대상으로하는지 확인하려면 어떻게합니까?</target>
        </trans-unit>
        <trans-unit id="e24941468d7edb7b4b97099853ae8f500000e6d5" translate="yes" xml:space="preserve">
          <source>backlink</source>
          <target state="translated">backlink</target>
        </trans-unit>
        <trans-unit id="3652c1c0d07ea36c0f41d5a5bd1906547467aa7c" translate="yes" xml:space="preserve">
          <source>backreference</source>
          <target state="translated">backreference</target>
        </trans-unit>
        <trans-unit id="84eb39aaf0e1b7cca7c174974634139b97dd390f" translate="yes" xml:space="preserve">
          <source>backreferences</source>
          <target state="translated">backreferences</target>
        </trans-unit>
        <trans-unit id="d6666df3cfe0a87d82053354efeb1ef3f1df123d" translate="yes" xml:space="preserve">
          <source>backtracking</source>
          <target state="translated">backtracking</target>
        </trans-unit>
        <trans-unit id="023e7452be147f47fab20b687cbf88f849f3973e" translate="yes" xml:space="preserve">
          <source>bacmp()/bcmp()</source>
          <target state="translated">bacmp()/bcmp()</target>
        </trans-unit>
        <trans-unit id="a30e4fdfae25e2407e88209d32fa3206cbd57707" translate="yes" xml:space="preserve">
          <source>bad for IBM's programs, but the same compiler was used for DLLs which are used with general-purpose applications. When these DLLs are used, the state of floating-point flags in the application is not predictable.</source>
          <target state="translated">IBM 프로그램에는 좋지 않지만, 범용 응용 프로그램과 함께 사용되는 DLL에는 동일한 컴파일러가 사용되었습니다. 이러한 DLL을 사용하면 응용 프로그램의 부동 소수점 플래그 상태를 예측할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="bcea895e1a3b428cb9ae8f8bb6a77c80b6d1735c" translate="yes" xml:space="preserve">
          <source>badd()/bmul()/bsub()/bdiv()/bdec()/binc()</source>
          <target state="translated">badd()/bmul()/bsub()/bdiv()/bdec()/binc()</target>
        </trans-unit>
        <trans-unit id="28776fc2f596476304f65e05ae24e174fbc20745" translate="yes" xml:space="preserve">
          <source>bailey@newman.upenn.edu</source>
          <target state="translated">bailey@newman.upenn.edu</target>
        </trans-unit>
        <trans-unit id="d5f9d5e53a7c7d23a33fb2e87ff767a4dee06322" translate="yes" xml:space="preserve">
          <source>bailout methods</source>
          <target state="translated">구제 방법</target>
        </trans-unit>
        <trans-unit id="62cdb7020ff920e5aa642c3d4066950dd1f01f4d" translate="yes" xml:space="preserve">
          <source>bar</source>
          <target state="translated">bar</target>
        </trans-unit>
        <trans-unit id="961b1cd40787e3f47e9dd503958e048866722a96" translate="yes" xml:space="preserve">
          <source>bar.dll</source>
          <target state="translated">bar.dll</target>
        </trans-unit>
        <trans-unit id="1405df66cbe219b0bf6355bc3d60361a8376b6b4" translate="yes" xml:space="preserve">
          <source>base</source>
          <target state="translated">base</target>
        </trans-unit>
        <trans-unit id="82364d6e500f9e7c6d2e135ddc4ef3ae5df9c250" translate="yes" xml:space="preserve">
          <source>base - Establish an ISA relationship with base classes at compile time</source>
          <target state="translated">base-컴파일 타임에 기본 클래스와 ISA 관계 설정</target>
        </trans-unit>
        <trans-unit id="d5b858bb629f56a1b3bf07eec9afeff8cb2176cd" translate="yes" xml:space="preserve">
          <source>base character</source>
          <target state="translated">기본 캐릭터</target>
        </trans-unit>
        <trans-unit id="fb170bf0a7f9325c8aa7a0a138128b8ec5471d88" translate="yes" xml:space="preserve">
          <source>base.pm was unable to require the base package, because it was not found in your path.</source>
          <target state="translated">base.pm은 경로에 기본 패키지가 없기 때문에 기본 패키지를 요구할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="e9e99739293e7367ccad4549a440bbf99651181f" translate="yes" xml:space="preserve">
          <source>basename(1)</source>
          <target state="translated">basename(1)</target>
        </trans-unit>
        <trans-unit id="9a441af68f4177c8bcff94839c442392a522bb71" translate="yes" xml:space="preserve">
          <source>baserev.U</source>
          <target state="translated">baserev.U</target>
        </trans-unit>
        <trans-unit id="c8a16b493c487d9f0d43546b842106bf2ffa7152" translate="yes" xml:space="preserve">
          <source>bash</source>
          <target state="translated">bash</target>
        </trans-unit>
        <trans-unit id="1da8eaa4a0d77769d77e901c7a8bd51a90b2108b" translate="yes" xml:space="preserve">
          <source>bash.btm</source>
          <target state="translated">bash.btm</target>
        </trans-unit>
        <trans-unit id="d7113141808e2d9571e4d8981caf323c56b50b9c" translate="yes" xml:space="preserve">
          <source>bash.exe</source>
          <target state="translated">bash.exe</target>
        </trans-unit>
        <trans-unit id="e25ac03f477736cf429678bb164c6ba39a46224c" translate="yes" xml:space="preserve">
          <source>basic block profiling</source>
          <target state="translated">기본 블록 프로파일 링</target>
        </trans-unit>
        <trans-unit id="bb86a2ae262d9c015cbc4346cbdae479e321322e" translate="yes" xml:space="preserve">
          <source>basic blocks</source>
          <target state="translated">기본 블록</target>
        </trans-unit>
        <trans-unit id="ce252839c8120fb5bca1f5ab1ecf317e2b8c1ad2" translate="yes" xml:space="preserve">
          <source>basic-block counting</source>
          <target state="translated">기본 블록 카운팅</target>
        </trans-unit>
        <trans-unit id="c09a78352f016692dcd8dd798d66441c80a78605" translate="yes" xml:space="preserve">
          <source>basic_text</source>
          <target state="translated">basic_text</target>
        </trans-unit>
        <trans-unit id="504ee22084024022630f49c8572bc2a333f11490" translate="yes" xml:space="preserve">
          <source>batch_mode_page_object_init</source>
          <target state="translated">batch_mode_page_object_init</target>
        </trans-unit>
        <trans-unit id="75736a80f50247c7c9141706465352089a086efa" translate="yes" xml:space="preserve">
          <source>baz&quot;, and, going the other way, the optional parsing of groups of words joined by NBSP's as if each group were in a S&amp;lt;...&amp;gt; code, so that formatters may use the representation that maps best to what the output format demands.</source>
          <target state="translated">다른 방법으로, 각 그룹이 S &amp;lt;...&amp;gt; 코드에있는 것처럼 NBSP에 의해 결합 된 단어 그룹의 선택적 구문 분석은 포맷터가 출력 형식에 가장 적합한 맵핑을 사용할 수 있도록합니다. 요구합니다.</target>
        </trans-unit>
        <trans-unit id="89a83e99befe035db29117627cce4ee77338bd35" translate="yes" xml:space="preserve">
          <source>bceil()</source>
          <target state="translated">bceil()</target>
        </trans-unit>
        <trans-unit id="986b1bc1eb8de89643c50722910f99001c232865" translate="yes" xml:space="preserve">
          <source>be</source>
          <target state="translated">be</target>
        </trans-unit>
        <trans-unit id="36048f5f57efa9c9c207392cd7127b119b057243" translate="yes" xml:space="preserve">
          <source>be a bareword. The importation can be made conditional by using the &lt;a href=&quot;../if&quot;&gt;if&lt;/a&gt; module.</source>
          <target state="translated">말 그대로 &lt;a href=&quot;../if&quot;&gt;if&lt;/a&gt; 모듈 을 사용하여 가져 오기를 조건부로 만들 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="e70616934e98e6243ad338b17e6d1d1a80ef47cd" translate="yes" xml:space="preserve">
          <source>be a bareword. The importation can be made conditional by using the &lt;a href=&quot;if&quot;&gt;if&lt;/a&gt; module.</source>
          <target state="translated">말 그대로 &lt;a href=&quot;if&quot;&gt;if&lt;/a&gt; 모듈 을 사용하여 가져 오기를 조건부로 만들 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="6174cfdb1b6f1f01bc8c27356965cea1660ff655" translate="yes" xml:space="preserve">
          <source>be a string of octal digits: &lt;code&gt;0644&lt;/code&gt; is okay, but &lt;code&gt;&quot;0644&quot;&lt;/code&gt; is not. Returns the number of files successfully changed. See also &lt;a href=&quot;#oct&quot;&gt;oct&lt;/a&gt; if all you have is a string.</source>
          <target state="translated">8 진수 문자열이어야합니다. &lt;code&gt;0644&lt;/code&gt; 는 괜찮지 만 &lt;code&gt;&quot;0644&quot;&lt;/code&gt; 는 아닙니다. 성공적으로 변경된 파일 수를 반환합니다. 모든 것이 문자열이면 &lt;a href=&quot;#oct&quot;&gt;oct&lt;/a&gt; 도 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="956f149445457ad325f5a84a0c7c25a363bcc21c" translate="yes" xml:space="preserve">
          <source>be a string of octal digits: &lt;code&gt;0644&lt;/code&gt; is okay, but &lt;code&gt;&quot;0644&quot;&lt;/code&gt; is not. Returns the number of files successfully changed. See also &lt;a href=&quot;oct&quot;&gt;oct&lt;/a&gt; if all you have is a string.</source>
          <target state="translated">8 진수 문자열이어야합니다. &lt;code&gt;0644&lt;/code&gt; 는 괜찮지 만 &lt;code&gt;&quot;0644&quot;&lt;/code&gt; 는 아닙니다. 성공적으로 변경된 파일 수를 반환합니다. 모든 것이 문자열이면 &lt;a href=&quot;oct&quot;&gt;oct&lt;/a&gt; 도 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="2f14746af9c291f92399b053f1e619f9de693adc" translate="yes" xml:space="preserve">
          <source>be a valid Perl package name and it</source>
          <target state="translated">유효한 Perl 패키지 이름이어야합니다.</target>
        </trans-unit>
        <trans-unit id="8bab9adc00fd7e4a64089f6b0ae5c963c3f36a5a" translate="yes" xml:space="preserve">
          <source>be able to tolerate layers compiled against an old version of the headers.</source>
          <target state="translated">이전 버전의 헤더에 대해 컴파일 된 레이어를 허용 할 수 있어야합니다.</target>
        </trans-unit>
        <trans-unit id="14982941f96f6d84c8cd50b24f899b4c1845a614" translate="yes" xml:space="preserve">
          <source>be able to write:</source>
          <target state="translated">쓸 수있다 :</target>
        </trans-unit>
        <trans-unit id="34c1cc772dd68663334c7cc5a51270a9c162743c" translate="yes" xml:space="preserve">
          <source>be addressed by adding a</source>
          <target state="translated">추가하여 해결</target>
        </trans-unit>
        <trans-unit id="28396307a68e2c8ee56bd6b269f6e59ccaf41b7a" translate="yes" xml:space="preserve">
          <source>be assigned back to &lt;code&gt;$(&lt;/code&gt; without being forced numeric, such as by adding zero. Note that this is different to the effective gid (&lt;code&gt;$)&lt;/code&gt; ) which does take a list.</source>
          <target state="translated">0을 추가하는 등 강제 숫자없이 &lt;code&gt;$(&lt;/code&gt; 다시 할당 됩니다. 이는 목록을 취하는 유효 gid ( &lt;code&gt;$)&lt;/code&gt; 와 다릅니다 .</target>
        </trans-unit>
        <trans-unit id="93202847d0c4f58d96ed2de441c5bae895f03f9f" translate="yes" xml:space="preserve">
          <source>be be treated as nested tags within the tagged text (even if they would match the start tag pattern).</source>
          <target state="translated">태그가 지정된 텍스트 내에 시작 태그 패턴과 일치하더라도 중첩 된 태그로 취급됩니다.</target>
        </trans-unit>
        <trans-unit id="e1cd6e63a2e61c9b680434df73ca1618e7d52128" translate="yes" xml:space="preserve">
          <source>be called exactly once, typically in a BOOT: section. If you are maintaining multiple interpreters, it should be called once in each interpreter instance, except for interpreters cloned from existing ones. (But see &lt;a href=&quot;#MY_CXT_CLONE&quot;&gt;MY_CXT_CLONE&lt;/a&gt; below.)</source>
          <target state="translated">일반적으로 BOOT : 섹션에서 정확히 한 번 호출됩니다. 여러 개의 인터프리터를 유지 보수하는 경우 기존 인터프리터에서 복제 된 인터프리터를 제외하고 각 인터프리터 인스턴스에서 한 번씩 호출해야합니다. (하지만 아래 &lt;a href=&quot;#MY_CXT_CLONE&quot;&gt;MY_CXT_CLONE을&lt;/a&gt; 참조하십시오 .)</target>
        </trans-unit>
        <trans-unit id="9d2edd7898262b515a39df03229b24d227d1c626" translate="yes" xml:space="preserve">
          <source>be called explicitly.</source>
          <target state="translated">명시 적으로 불러야합니다.</target>
        </trans-unit>
        <trans-unit id="438a35efe202395aa4bfcea78aeb25f89d7ddb6d" translate="yes" xml:space="preserve">
          <source>be closed by calling &lt;code&gt;PerlIO_close()&lt;/code&gt; on the returned PerlIO *.</source>
          <target state="translated">반환 된 PerlIO *에서 &lt;code&gt;PerlIO_close()&lt;/code&gt; 를 호출하여 닫힙니다 .</target>
        </trans-unit>
        <trans-unit id="9934090830c2424ca6cc4ecf9b012220e6cb8ade" translate="yes" xml:space="preserve">
          <source>be closed until both the tied variable is untied and all copies of the saved object are destroyed.</source>
          <target state="translated">묶인 변수가 묶이지 않고 저장된 객체의 모든 복사본이 파괴 될 때까지 닫힙니다.</target>
        </trans-unit>
        <trans-unit id="c3e7ca4e78e0952264ac139095f7bf1f632db6fe" translate="yes" xml:space="preserve">
          <source>be consistent with each other (implementation may only use one or the other or may require both).</source>
          <target state="translated">서로 일치해야합니다 (구현은 하나만 사용하거나 둘 다 필요할 수 있음).</target>
        </trans-unit>
        <trans-unit id="bdfc850e994531d0f620111ecf403220532f49bb" translate="yes" xml:space="preserve">
          <source>be declared</source>
          <target state="translated">선언되다</target>
        </trans-unit>
        <trans-unit id="4bc6d0c7f9935408fb2bc64464a3d82819a4723d" translate="yes" xml:space="preserve">
          <source>be expanded as specified by the &lt;b&gt;-expand_seq&lt;/b&gt; option; Any such recursive expansion needs to be handled by the specified callback routine.]</source>
          <target state="translated">&lt;b&gt;-expand_seq&lt;/b&gt; 옵션 으로 지정된대로 확장하십시오 . 이러한 재귀 확장은 지정된 콜백 루틴에 의해 처리되어야합니다.]</target>
        </trans-unit>
        <trans-unit id="fb00294fdc4c477751afeb60eec17519d313dd85" translate="yes" xml:space="preserve">
          <source>be faster in certain circumstances for large files, and may result in less physical memory use when multiple processes are reading the same file.</source>
          <target state="translated">큰 파일의 경우 특정 환경에서 더 빠르며 여러 프로세스가 동일한 파일을 읽을 때 실제 메모리 사용이 줄어들 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="89547cfa26f8957d4689489ae8e6da3bfe190445" translate="yes" xml:space="preserve">
          <source>be globrefs).</source>
          <target state="translated">globrefs이어야 함).</target>
        </trans-unit>
        <trans-unit id="aed67ceeb07b3aad12dfc70fda375fa903262c1b" translate="yes" xml:space="preserve">
          <source>be globrefs. Objects of &lt;code&gt;NamedFile&lt;/code&gt; should behave like a file opened for reading and also support the &lt;code&gt;name()&lt;/code&gt; method. This class juncture works with exception of the &lt;code&gt;Name_hash&lt;/code&gt; implementation, where object initialization fails because of the incompatibility of object bodies.</source>
          <target state="translated">globrefs입니다. &lt;code&gt;NamedFile&lt;/code&gt; 의 객체는 읽기 위해 열린 파일처럼 동작해야하며 &lt;code&gt;name()&lt;/code&gt; 메서드 도 지원해야합니다 . 이 클래스 &lt;code&gt;Name_hash&lt;/code&gt; 은 Name_hash 구현 을 제외하고 작동 하는데 , 여기서 오브젝트 본문의 비 호환성으로 인해 오브젝트 초기화에 실패합니다.</target>
        </trans-unit>
        <trans-unit id="96a908fc7385d1425e0ba694653b67ebf458eb65" translate="yes" xml:space="preserve">
          <source>be in effect.)</source>
          <target state="translated">효력이있다.)</target>
        </trans-unit>
        <trans-unit id="93fdaed10217b38690a5394ba6f117f7442dc2d0" translate="yes" xml:space="preserve">
          <source>be interpreted as simply &quot;codepoint</source>
          <target state="translated">단순히 &quot;코드 포인트&quot;로 해석됩니다</target>
        </trans-unit>
        <trans-unit id="3b8bb41a2a75cf63cb4e4b8dd89b36e596750288" translate="yes" xml:space="preserve">
          <source>be introduced with &lt;code&gt;--&lt;/code&gt; and bundles with &lt;code&gt;-&lt;/code&gt; .</source>
          <target state="translated">함께 소개 &lt;code&gt;--&lt;/code&gt; 와 함께 번들 &lt;code&gt;-&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="42a1854f29dd88d78bf67b5c84417d21fb1c6102" translate="yes" xml:space="preserve">
          <source>be invoked.</source>
          <target state="translated">호출됩니다.</target>
        </trans-unit>
        <trans-unit id="9b400f46c67266a74a7941beb8d8f3aa492d507c" translate="yes" xml:space="preserve">
          <source>be made read-only (by the caller), or at least should be treated as such.</source>
          <target state="translated">(발신자에 의해) 읽기 전용이되거나 최소한 그렇게 취급되어야합니다.</target>
        </trans-unit>
        <trans-unit id="8aca838b806998e1c3a7660775bb22707c53a139" translate="yes" xml:space="preserve">
          <source>be open any more when the program is reincarnated, with possible resulting confusion by Perl.</source>
          <target state="translated">프로그램이 재연 될 때 더 이상 열리지 않으면 Perl에 의해 혼동 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="4942a835a218847da1bc9474d15e7f7fecee9472" translate="yes" xml:space="preserve">
          <source>be parsed as two paragraphs in italics (with the I code starting in one paragraph and starting in another.) Instead, the first paragraph should generate a warning, but that aside, the above code must parse as if it were:</source>
          <target state="translated">기울임 꼴로 두 단락으로 구문 분석됩니다 (I 코드는 한 단락에서 시작하여 다른 단락에서 시작 함). 대신 첫 번째 단락은 경고를 생성해야하지만, 위 코드는 다음과 같이 구문 분석해야합니다.</target>
        </trans-unit>
        <trans-unit id="cac76875da8caea6da506441e4a3013ef795de69" translate="yes" xml:space="preserve">
          <source>be preceded with a blank line; &lt;code&gt;__END__&lt;/code&gt; is</source>
          <target state="translated">빈 줄이 앞에옵니다. &lt;code&gt;__END__&lt;/code&gt; 는</target>
        </trans-unit>
        <trans-unit id="56f17a9fa2003de9ef3c254fb72eb38377857e77" translate="yes" xml:space="preserve">
          <source>be present during testing.</source>
          <target state="translated">테스트 중에 나타납니다.</target>
        </trans-unit>
        <trans-unit id="ac6789e5ce6bb8c48ccfee0a53b55ecb18497192" translate="yes" xml:space="preserve">
          <source>be provided.</source>
          <target state="translated">제공된.</target>
        </trans-unit>
        <trans-unit id="8e7ed5c5b2648d3fb47f0ce1afb127706a1279f2" translate="yes" xml:space="preserve">
          <source>be restored.</source>
          <target state="translated">회복된다.</target>
        </trans-unit>
        <trans-unit id="c9bf9ad1188aa77634cd3b8aff0b84c5c12ad44c" translate="yes" xml:space="preserve">
          <source>be stopped by debugger, although &lt;code&gt;&lt;a href=&quot;functions/require&quot;&gt;require&lt;/a&gt;&lt;/code&gt;s and INIT blocks will, and compile-time statements can be traced with the &lt;code&gt;AutoTrace&lt;/code&gt; option set in &lt;code&gt;PERLDB_OPTS&lt;/code&gt; ). From your own Perl code, however, you can transfer control back to the debugger using the following statement, which is harmless if the debugger is not running:</source>
          <target state="translated">s 및 INIT 블록이 &lt;code&gt;&lt;a href=&quot;functions/require&quot;&gt;require&lt;/a&gt;&lt;/code&gt; 하지만 디버거에 의해 중지되고 &lt;code&gt;PERLDB_OPTS&lt;/code&gt; 에 설정된 &lt;code&gt;AutoTrace&lt;/code&gt; 옵션을 사용하여 컴파일 타임 문을 추적 할 수 있습니다 . 그러나 자체 Perl 코드에서 다음 명령문을 사용하여 제어를 디버거로 다시 전송할 수 있습니다. 디버거가 실행되고 있지 않으면 무해합니다.</target>
        </trans-unit>
        <trans-unit id="400bf125e188b6776f7244947b865d3a2497a3b3" translate="yes" xml:space="preserve">
          <source>be stored as a single data paragraph (consisting of &quot;&amp;lt;img src='wirth_spokesmodeling_book.png'&amp;gt;\n\n&amp;lt;hr&amp;gt;\n&quot;).</source>
          <target state="translated">단일 데이터 단락으로 저장됩니다 ( &quot;&amp;lt;img src = 'wirth_spokesmodeling_book.png'&amp;gt; \ n \ n &amp;lt;hr&amp;gt; \ n&quot;으로 구성).</target>
        </trans-unit>
        <trans-unit id="16137519316b812afb2da09aa91b112ba92bff67" translate="yes" xml:space="preserve">
          <source>be stored as two data paragraphs (one consisting of &quot;&amp;lt;img src='wirth_spokesmodeling_book.png'&amp;gt;\n&quot; and another consisting of &quot;&amp;lt;hr&amp;gt;\n&quot;), but</source>
          <target state="translated">두 개의 데이터 단락 (하나는 &quot;&amp;lt;img src = 'wirth_spokesmodeling_book.png'&amp;gt; \ n&quot;으로 구성되고 다른 하나는 &quot;&amp;lt;hr&amp;gt; \ n&quot;으로 구성)으로 저장됩니다.</target>
        </trans-unit>
        <trans-unit id="619ff8abea4d5f3ccd22e0c825463c6f2e928d79" translate="yes" xml:space="preserve">
          <source>be sure to invoke &lt;code&gt;$self-&amp;gt;SUPER::initialize()&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;$self-&amp;gt;SUPER::initialize()&lt;/code&gt; 를 호출하십시오 .</target>
        </trans-unit>
        <trans-unit id="b3127d5be257498591fa1b1e632079190d24627c" translate="yes" xml:space="preserve">
          <source>be sure to invoke the &lt;b&gt;initialize()&lt;/b&gt; method of the newly blessed object.</source>
          <target state="translated">새로 축복받은 객체 의 &lt;b&gt;initialize ()&lt;/b&gt; 메소드 를 호출하십시오 .</target>
        </trans-unit>
        <trans-unit id="6bd6f3dc5720d53f6325adeb9c38189554e2d06f" translate="yes" xml:space="preserve">
          <source>be the desired effect within a diamond hierarchy, but in others (e.g. for destructors) it may be more appropriate to call each method only once during a sequence of redispatches.</source>
          <target state="translated">다이아몬드 계층 구조 내에서 원하는 효과이지만, 다른 것 (예 : 소멸자)에서는 일련의 재발송 동안 각 메소드를 한 번만 호출하는 것이 더 적절할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f32b0724100efc9f3b38df25932dbc397348687a" translate="yes" xml:space="preserve">
          <source>be thrown if</source>
          <target state="translated">만약에 던져지면</target>
        </trans-unit>
        <trans-unit id="d996815a3551001f2437592e2dfe9cf2917da354" translate="yes" xml:space="preserve">
          <source>be treated as an error:</source>
          <target state="translated">오류로 취급됩니다 :</target>
        </trans-unit>
        <trans-unit id="5cfeeb86f388b90e9358708fb9a2cf2d92ff6a4c" translate="yes" xml:space="preserve">
          <source>be treated as an option, but passed to the program unharmed, in &lt;code&gt;@ARGV&lt;/code&gt; .</source>
          <target state="translated">옵션으로 취급되지만 &lt;code&gt;@ARGV&lt;/code&gt; 에서 무사히 프로그램에 전달됩니다 .</target>
        </trans-unit>
        <trans-unit id="213ce7c8d8fef7b5daff184033ed3b8b66ff7b3a" translate="yes" xml:space="preserve">
          <source>be undone (but not &lt;code&gt;&lt;a href=&quot;functions/pop&quot;&gt;pop&lt;/a&gt; @_&lt;/code&gt; or other splicing,</source>
          <target state="translated">취소 (그러나이 될 &lt;code&gt;&lt;a href=&quot;functions/pop&quot;&gt;pop&lt;/a&gt; @_&lt;/code&gt; 또는 다른 접합을,</target>
        </trans-unit>
        <trans-unit id="8002f964e7f54fd6c9a88e0e37e9510ff919095b" translate="yes" xml:space="preserve">
          <source>be undone (but not &lt;code&gt;&lt;a href=&quot;pop&quot;&gt;pop&lt;/a&gt; @_&lt;/code&gt; or other splicing,</source>
          <target state="translated">취소 (그러나이 될 &lt;code&gt;&lt;a href=&quot;pop&quot;&gt;pop&lt;/a&gt; @_&lt;/code&gt; 또는 다른 접합을,</target>
        </trans-unit>
        <trans-unit id="17bd5dc5ae122c31aab12373873620d67a1c4b2d" translate="yes" xml:space="preserve">
          <source>be used for method calls. You can't use it for regular subroutine calls or class methods:</source>
          <target state="translated">메소드 호출에 사용됩니다. 일반 서브 루틴 호출 또는 클래스 메소드에는 사용할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="4e471a2c455269486f9776c668e9c672d74418df" translate="yes" xml:space="preserve">
          <source>be used in interpolating strings (double quotes or the &lt;code&gt;&lt;a href=&quot;functions/qq&quot;&gt;qq&lt;/a&gt;&lt;/code&gt; operator), but only if the additional &lt;code&gt;postderef_qq&lt;/code&gt; feature is enabled.</source>
          <target state="translated">추가 &lt;code&gt;postderef_qq&lt;/code&gt; 기능이 활성화 된 경우에만 문자열 보간 (큰 따옴표 또는 &lt;code&gt;&lt;a href=&quot;functions/qq&quot;&gt;qq&lt;/a&gt;&lt;/code&gt; 연산자)에 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="37c19bda8dda58aa4daba4c9519e4dc020b7a3f4" translate="yes" xml:space="preserve">
          <source>be used in interpolating strings (double quotes or the &lt;code&gt;&lt;a href=&quot;functions/qq&quot;&gt;qq&lt;/a&gt;&lt;/code&gt; operator), but only if the additional &lt;code&gt;postderef_qq&lt;/code&gt;&lt;a href=&quot;feature&quot;&gt;feature&lt;/a&gt; is enabled.</source>
          <target state="translated">추가 &lt;code&gt;postderef_qq&lt;/code&gt; &lt;a href=&quot;feature&quot;&gt;기능&lt;/a&gt; 이 활성화 된 경우에만 문자열 보간 (큰 따옴표 또는 &lt;code&gt;&lt;a href=&quot;functions/qq&quot;&gt;qq&lt;/a&gt;&lt;/code&gt; 연산자)에 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="9eccf910fdd37c2a3bcdbac9f3427f38c70da9c0" translate="yes" xml:space="preserve">
          <source>bearing</source>
          <target state="translated">bearing</target>
        </trans-unit>
        <trans-unit id="1407501dd659df6fb3cfafb420938ddd4792bbdd" translate="yes" xml:space="preserve">
          <source>because it can match zero copies of &lt;code&gt;'X'&lt;/code&gt; at the beginning of the string. If you definitely want to match at least one &lt;code&gt;'X'&lt;/code&gt; , use &lt;code&gt;X+&lt;/code&gt; , not &lt;code&gt;X*&lt;/code&gt; .</source>
          <target state="translated">문자열의 시작 부분에 &lt;code&gt;'X'&lt;/code&gt; 의 복사본이 0과 일치 할 수 있기 때문 입니다. 적어도 하나의 &lt;code&gt;'X'&lt;/code&gt; 를 정확히 일치 시키려면 &lt;code&gt;X*&lt;/code&gt; 아니라 X &lt;code&gt;X+&lt;/code&gt; 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="ed626eff2ded4ff54496b1cd4f2b0a1c7d5ccbb9" translate="yes" xml:space="preserve">
          <source>because it is much faster - it reduces internal variables into the modulus whenever possible, so it operates on smaller numbers.</source>
          <target state="translated">훨씬 빠르기 때문에 가능할 때마다 내부 변수를 모듈러스로 줄이므로 더 적은 수로 작동합니다.</target>
        </trans-unit>
        <trans-unit id="c9ac39be8f080b55461591140c43654051426f56" translate="yes" xml:space="preserve">
          <source>because it was listed as a TODO test on the plan line. However, we are not aware of anyone actually using this feature and hard-coding test numbers is discouraged because it's very easy to add a test and break the test number sequence. This makes test suites very fragile. Instead, the following should be used:</source>
          <target state="translated">계획 라인에서 TODO 테스트로 나열 되었기 때문입니다. 그러나 실제로이 기능을 사용하는 사람은 없으며 테스트를 쉽게 추가하고 테스트 번호 시퀀스를 중단하기 때문에 하드 코딩 테스트 번호는 사용하지 않는 것이 좋습니다. 이것은 테스트 스위트를 매우 취약하게 만듭니다. 대신 다음을 사용해야합니다.</target>
        </trans-unit>
        <trans-unit id="3716b55181b7d4ce5a8064066cc2010c3e1b6360" translate="yes" xml:space="preserve">
          <source>because of the strict regularization of Perl 5's grammar into unary and list operators. (The old open was a little of both.) You must put parentheses around the filehandle, or use the new &quot;or&quot; operator instead of &quot;||&quot;.</source>
          <target state="translated">Perl 5의 문법을 단항 및리스트 연산자로 엄격하게 정규화했기 때문입니다. (오래된 오픈은 둘 다 조금이었다.) 파일 핸들을 괄호로 묶거나 &quot;||&quot;대신 새 &quot;or&quot;연산자를 사용해야한다.</target>
        </trans-unit>
        <trans-unit id="71ee90a49bf1ab4bd322eb175c4eef72341f4bf3" translate="yes" xml:space="preserve">
          <source>because otherwise &lt;b&gt;xsubpp&lt;/b&gt; will believe that you made a duplicate definition of the function. Also, put a blank line before the #else/#endif so it will not be seen as part of the function body.</source>
          <target state="translated">그렇지 않으면 &lt;b&gt;xsubpp&lt;/b&gt; 는 함수를 중복 정의했다고 믿기 때문 입니다. 또한 # else / # endif 앞에 빈 줄을 넣어 함수 본문의 일부로 표시되지 않도록합니다.</target>
        </trans-unit>
        <trans-unit id="c57dfba8d90c3ee87942986e029f65c0a62033af" translate="yes" xml:space="preserve">
          <source>because the &quot;less than&quot; operator is interpreted as a closing delimiter.</source>
          <target state="translated">&quot;보다 작음&quot;연산자는 닫는 구분 기호로 해석되기 때문입니다.</target>
        </trans-unit>
        <trans-unit id="91d068e640ed02bcfffdad4e89ae0a9db41b7044" translate="yes" xml:space="preserve">
          <source>because the embedded pairs of &lt;code&gt;'(..)'&lt;/code&gt; s and &lt;code&gt;'[..]'&lt;/code&gt; s are &quot;cross-nested&quot; and the embedded &lt;code&gt;'&amp;gt;'&lt;/code&gt; is unbalanced. (In a scalar context, this call would return an empty string. In a void context, &lt;code&gt;$text&lt;/code&gt; would be unchanged.)</source>
          <target state="translated">&lt;code&gt;'(..)'&lt;/code&gt; 및 &lt;code&gt;'[..]'&lt;/code&gt; 의 포함 된 쌍 은 &quot;교차&quot;되고 포함 된 &lt;code&gt;'&amp;gt;'&lt;/code&gt; 은 불균형하기 때문입니다. 스칼라 컨텍스트에서이 호출은 빈 문자열을 반환합니다. 빈 컨텍스트에서는 &lt;code&gt;$text&lt;/code&gt; 가 변경되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="331252ee302b6da2035026aca3ba4ae99c1a4ea1" translate="yes" xml:space="preserve">
          <source>because the latter will alternate between returning a filename and returning false.</source>
          <target state="translated">후자는 파일 이름 반환과 false 반환 사이를 번갈아 표시하기 때문입니다.</target>
        </trans-unit>
        <trans-unit id="f2ef9563189019bf8c9ac0f31b94f7d982047b5c" translate="yes" xml:space="preserve">
          <source>because the main point isn't whether the user typed &lt;b&gt;-v&lt;/b&gt; or not.</source>
          <target state="translated">요점은 사용자가 &lt;b&gt;-v를&lt;/b&gt; 입력했는지 여부가 아니기 때문 입니다.</target>
        </trans-unit>
        <trans-unit id="95dd904c935d8d74a8bd1af96d4e502e980aaabd" translate="yes" xml:space="preserve">
          <source>because the notion of &quot;compile-time&quot; is relative. Instead, you want:</source>
          <target state="translated">&quot;컴파일 타임&quot;이라는 개념이 상대적이기 때문입니다. 대신, 당신은 원합니다 :</target>
        </trans-unit>
        <trans-unit id="6a35b87feefdc6c196b1d4d33ac852a059f8f67f" translate="yes" xml:space="preserve">
          <source>because the second way hides the main point of the statement in a modifier. On the other hand</source>
          <target state="translated">두 번째 방법은 수정 자의 명령문의 주요 지점을 숨기므로 반면에</target>
        </trans-unit>
        <trans-unit id="b15c6a463c6e853f47c1bd82bf87355ef292954f" translate="yes" xml:space="preserve">
          <source>because they test functionality which</source>
          <target state="translated">그들은 기능을 테스트하기 때문에</target>
        </trans-unit>
        <trans-unit id="c89a78424c4f276725f3f2424f018f5fc3348fbb" translate="yes" xml:space="preserve">
          <source>because you don't have to start a process on every filename found. It does suffer from the bug of mishandling newlines in pathnames, which you can fix if you follow the example under &lt;b&gt;-0&lt;/b&gt;.</source>
          <target state="translated">발견 된 모든 파일 이름에 대해 프로세스를 시작할 필요가 없기 때문입니다. 경로 이름에서 줄 바꿈을 잘못 처리하는 버그로 어려움을 겪습니다 . &lt;b&gt;-0&lt;/b&gt; 아래의 예제를 따르면 수정 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="a217c7a44aead49b3247ffc0322e6ace486aeba7" translate="yes" xml:space="preserve">
          <source>because you'll get just references listed, and perl will never automatically dereference things for you. Instead, you have to roll yourself a loop or two. This prints the whole structure, using the shell-style for() construct to loop across the outer set of subscripts.</source>
          <target state="translated">왜냐하면 당신은 단지 참조를 열거 할 것이고, perl은 자동으로 당신을 대신 할 것입니다. 대신에, 당신은 자신에게 루프를 굴려야합니다. 이것은 쉘 구조의 for () 구문을 사용하여 전체 구조를 인쇄하여 외부 첨자 집합을 반복합니다.</target>
        </trans-unit>
        <trans-unit id="4e58ac78738f8185ee5c7c2c3d83aca0198db529" translate="yes" xml:space="preserve">
          <source>becomes</source>
          <target state="translated">becomes</target>
        </trans-unit>
        <trans-unit id="e0d2345f9f72fcdda8f445997826d44505e55aef" translate="yes" xml:space="preserve">
          <source>been in use as an Internet language tag, and RFC 3066 stipulates that it never should be, since a shorter tag (&quot;ar&quot;) exists.</source>
          <target state="translated">인터넷 언어 태그로 사용되고 있으며 RFC 3066은 더 짧은 태그 ( &quot;ar&quot;)가 있기 때문에 절대로 사용해서는 안된다고 규정합니다.</target>
        </trans-unit>
        <trans-unit id="51de2b835bd35a67eb32dbcd3d77d4b96e5aa39d" translate="yes" xml:space="preserve">
          <source>before</source>
          <target state="translated">before</target>
        </trans-unit>
        <trans-unit id="915c701ba2639a5081cecf4fc5bdf5de5ad69a85" translate="yes" xml:space="preserve">
          <source>before calling</source>
          <target state="translated">전화하기 전에</target>
        </trans-unit>
        <trans-unit id="0cbf8d2dc3ebc2ee1d97d9f37a08ec8f737756c3" translate="yes" xml:space="preserve">
          <source>before running your wide record pipe program. A larger value may improve performance at the expense of the BYTLM UAF quota.</source>
          <target state="translated">와이드 레코드 파이프 프로그램을 실행하기 전에. 값이 클수록 BYTLM UAF 할당량을 희생하여 성능이 향상 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="9dfe8489641883d87825274b161f0adcb018192e" translate="yes" xml:space="preserve">
          <source>before unpacking the archive.</source>
          <target state="translated">보관을 풀기 전에</target>
        </trans-unit>
        <trans-unit id="e00d3375a237dc6b36e090011f01e09a680f730b" translate="yes" xml:space="preserve">
          <source>begin with a colon, should not directly contain &quot;=head1&quot; ... &quot;=head4&quot; commands, nor &quot;=over&quot;, nor &quot;=back&quot;, nor &quot;=item&quot;. For example, this may be considered invalid:</source>
          <target state="translated">콜론으로 시작하고 &quot;= head1&quot;... &quot;= head4&quot;명령이나 &quot;= over&quot;, &quot;= back&quot;또는 &quot;= item&quot;을 직접 포함해서는 안됩니다. 예를 들어, 이것은 유효하지 않은 것으로 간주 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="35ee011e96122a1b4404f72436530569c798f3bc" translate="yes" xml:space="preserve">
          <source>begin with a colon, then &quot;text...&quot; will constitute a data paragraph. There is no way to use &quot;=for formatname text...&quot; to express &quot;text...&quot; as a verbatim paragraph.</source>
          <target state="translated">콜론으로 시작하면 &quot;text ...&quot;는 데이터 단락을 구성합니다. &quot;= formatname text ...&quot;를 사용하여 &quot;text ...&quot;를 축약 형 단락으로 표현하는 방법은 없습니다.</target>
        </trans-unit>
        <trans-unit id="01012d8e1a5ae715258cadbaf70262cad1cf8ef2" translate="yes" xml:space="preserve">
          <source>begin with a colon, then non-command paragraphs are ordinary paragraphs or data paragraphs. This is discussed in detail in the section &lt;a href=&quot;#About-Data-Paragraphs-and-%22%3dbegin%2f%3dend%22-Regions&quot;&gt;About Data Paragraphs and =begin/=end Regions&lt;/a&gt;.</source>
          <target state="translated">콜론으로 시작하면 명령이 아닌 단락은 일반 단락 또는 데이터 단락입니다. 이에 대해서는 &lt;a href=&quot;#About-Data-Paragraphs-and-%22%3dbegin%2f%3dend%22-Regions&quot;&gt;데이터 단락 및 = begin / = 종료 정보&lt;/a&gt; 섹션에서 자세히 설명 합니다 .</target>
        </trans-unit>
        <trans-unit id="43e8c372c4b8551232015b4964270e14bc96c611" translate="yes" xml:space="preserve">
          <source>begin with a colon.</source>
          <target state="translated">콜론으로 시작하십시오.</target>
        </trans-unit>
        <trans-unit id="f96514769306205e5e54b126ee406aa18da22231" translate="yes" xml:space="preserve">
          <source>begin with a literal colon (&quot;:&quot;). In some sense, a data paragraph is not part of Pod at all (i.e., effectively it's &quot;out-of-band&quot;), since it's not subject to most kinds of Pod parsing; but it is specified here, since Pod parsers need to be able to call an event for it, or store it in some form in a parse tree, or at least just parse</source>
          <target state="translated">리터럴 콜론 ( &quot;:&quot;)으로 시작하십시오. 어떤 의미에서, 데이터 단락은 대부분 포드의 일부가 아닙니다 (즉, 사실상 &quot;대역 외&quot;). 이는 대부분의 포드 파싱에 영향을받지 않기 때문입니다. 포드 파서는 이벤트를 호출하거나 파싱 트리에 어떤 형태로 저장하거나 최소한 파싱해야하기 때문에 여기에 지정됩니다.</target>
        </trans-unit>
        <trans-unit id="e2e281b54db81b16a35418fcd87978434eb58caf" translate="yes" xml:space="preserve">
          <source>begins with a colon,</source>
          <target state="translated">콜론으로 시작하고</target>
        </trans-unit>
        <trans-unit id="1c831dd4349f7440d63aa005aa956edcf6570200" translate="yes" xml:space="preserve">
          <source>behaves approximately like</source>
          <target state="translated">대략적으로 행동</target>
        </trans-unit>
        <trans-unit id="878cb14881bc8cc40ffa36c11bd520865655b641" translate="yes" xml:space="preserve">
          <source>behaves just like &lt;b&gt;-e&lt;/b&gt;, except that it implicitly enables all optional features (in the main compilation unit). See &lt;a href=&quot;feature&quot;&gt;feature&lt;/a&gt;.</source>
          <target state="translated">기본 컴파일 단위에서 모든 선택적 기능을 암시 적으로 활성화한다는 점을 제외하고는 &lt;b&gt;-e&lt;/b&gt; 와 동일하게 작동 합니다. &lt;a href=&quot;feature&quot;&gt;기능을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="29c4a5cf676b2e6b5aac47ac451d31e3961499c9" translate="yes" xml:space="preserve">
          <source>behavior for a thread after it has been created. With a</source>
          <target state="translated">스레드가 작성된 후의 동작. 와</target>
        </trans-unit>
        <trans-unit id="ab7103d633748a477ad2572ee63045defbe35f36" translate="yes" xml:space="preserve">
          <source>behavior, for some inputs.) In 5.7, the quicksort implementation was replaced with a stable mergesort algorithm whose worst-case behavior is O(NlogN). But benchmarks indicated that for some inputs, on some platforms, the original quicksort was faster. 5.8 has a sort pragma for limited control of the sort. Its rather blunt control of the underlying algorithm may not persist into future Perls, but the ability to characterize the input or output in implementation independent ways quite probably will. See &lt;a href=&quot;../sort&quot;&gt;the sort pragma&lt;/a&gt;.</source>
          <target state="translated">5.7에서 quicksort 구현은 최악의 동작이 O (NlogN) 인 안정적인 병합 정렬 알고리즘으로 대체되었습니다. 그러나 벤치 마크에 따르면 일부 입력의 경우 일부 플랫폼에서 원래의 퀵 정렬이 더 빠르다. 5.8에는 정렬 제어를 제한하는 정렬 프라그 마가 있습니다. 근본적인 알고리즘에 대한 다소 둔한 제어는 미래의 Perls에서는 지속되지 않지만 구현 또는 독립적 인 방식으로 입력 또는 출력을 특성화하는 기능은 아마도 그럴 것입니다. &lt;a href=&quot;../sort&quot;&gt;pragma 정렬을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="7662c3889bf0376550fc93aa4448d4df9574c86b" translate="yes" xml:space="preserve">
          <source>behavior, for some inputs.) In 5.7, the quicksort implementation was replaced with a stable mergesort algorithm whose worst-case behavior is O(NlogN). But benchmarks indicated that for some inputs, on some platforms, the original quicksort was faster. 5.8 has a sort pragma for limited control of the sort. Its rather blunt control of the underlying algorithm may not persist into future Perls, but the ability to characterize the input or output in implementation independent ways quite probably will. See &lt;a href=&quot;sort&quot;&gt;the sort pragma&lt;/a&gt;.</source>
          <target state="translated">5.7에서 quicksort 구현은 최악의 동작이 O (NlogN) 인 안정적인 병합 정렬 알고리즘으로 대체되었습니다. 그러나 벤치 마크에 따르면 일부 입력의 경우 일부 플랫폼에서 원래의 퀵 정렬이 더 빠르다. 5.8에는 정렬 제어를 제한하는 정렬 프라그 마가 있습니다. 근본적인 알고리즘에 대한 다소 둔한 제어는 미래의 Perls에서는 지속되지 않지만 구현 또는 독립적 인 방식으로 입력 또는 출력을 특성화하는 기능은 아마도 그럴 것입니다. &lt;a href=&quot;sort&quot;&gt;pragma 정렬을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="a4d45707cf30bc986faddb8a61f21a6e9cdaf80e" translate="yes" xml:space="preserve">
          <source>behaviour is different from the outer public API. The logic is that the &quot;unchecked&quot; case is useful when the encoding is part of a stream which may be reporting errors (e.g. STDERR). In such cases, it is desirable to get everything through somehow without causing additional errors which obscure the original one. Also, the encoding is best placed to know what the correct replacement character is, so if that is the desired behaviour then letting low level code do it is the most efficient.</source>
          <target state="translated">동작은 외부 공용 API와 다릅니다. 논리는 &quot;확인되지 않은&quot;경우가 인코딩이 오류를보고 할 수있는 스트림 (예 : STDERR)의 일부인 경우에 유용하다는 것입니다. 이러한 경우 원래 오류를 가릴 수있는 추가 오류를 발생시키지 않으면 서 모든 것을 얻는 것이 바람직합니다. 또한 올바른 대체 문자가 무엇인지 알기 위해 인코딩을 사용하는 것이 가장 좋습니다. 따라서 원하는 동작 인 경우 저수준 코드를 사용하는 것이 가장 효율적입니다.</target>
        </trans-unit>
        <trans-unit id="d665cbacbfa3c977993d51ac9f39d4889ffea309" translate="yes" xml:space="preserve">
          <source>behaviour. One can start</source>
          <target state="translated">행동. 하나는 시작할 수 있습니다</target>
        </trans-unit>
        <trans-unit id="c4ad9e56b49ef76a7e8fcbc4f0e989ac69868fc0" translate="yes" xml:space="preserve">
          <source>behind its back; calling &lt;a href=&quot;#sync_locale&quot;&gt;sync_locale&lt;/a&gt; before calling this macro will update perl's records.)</source>
          <target state="translated">그 뒤에; 전화 &lt;a href=&quot;#sync_locale&quot;&gt;sync_locale을&lt;/a&gt; 펄의 기록을 업데이트합니다이 매크로를 호출하기 전에.)</target>
        </trans-unit>
        <trans-unit id="53f8e0ff86be0a313b2007cbdd020a9b83a37fba" translate="yes" xml:space="preserve">
          <source>being data being sent to the server. Calls &lt;code&gt;debug_text&lt;/code&gt; before printing to STDERR.</source>
          <target state="translated">서버로 전송되는 데이터 STDERR로 인쇄하기 전에 &lt;code&gt;debug_text&lt;/code&gt; 를 호출합니다 .</target>
        </trans-unit>
        <trans-unit id="70842494fd493a8f8803b71e1e93717e5ff8d7e2" translate="yes" xml:space="preserve">
          <source>being executed within the distribution file's working directory.</source>
          <target state="translated">배포 파일의 작업 디렉토리 내에서 실행됩니다.</target>
        </trans-unit>
        <trans-unit id="c6309e2149391dbe0d16560dc35ff7f7d071ea27" translate="yes" xml:space="preserve">
          <source>being more accurate than C</source>
          <target state="translated">C보다 정확한 것</target>
        </trans-unit>
        <trans-unit id="ae7d864b083311cd426e7717f8e3a7be973f886e" translate="yes" xml:space="preserve">
          <source>being unfilled. In a threading situation,</source>
          <target state="translated">채워지지 않은. 스레딩 상황에서</target>
        </trans-unit>
        <trans-unit id="d4300189fdbe1cb5fe64ef0a483b7086eb450712" translate="yes" xml:space="preserve">
          <source>belongs to (used in &lt;code&gt;\p{Blk=...}&lt;/code&gt; ). The &lt;a href=&quot;#prop_value_aliases()&quot;&gt;prop_value_aliases()&lt;/a&gt; function can be used to get all the synonyms of the block name.</source>
          <target state="translated">( &lt;code&gt;\p{Blk=...}&lt;/code&gt; 사용)에 속합니다 . &lt;a href=&quot;#prop_value_aliases()&quot;&gt;prop_value_aliases ()&lt;/a&gt; 함수는 블록 이름의 모든 동의어를 얻을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a2fdbc23a85b8e4584cd5c7c6fb3ac1138bda7bd" translate="yes" xml:space="preserve">
          <source>belongs to. The &lt;a href=&quot;#prop_value_aliases()&quot;&gt;prop_value_aliases()&lt;/a&gt; function can be used to get all the synonyms of the script name.</source>
          <target state="translated">에 속한다. &lt;a href=&quot;#prop_value_aliases()&quot;&gt;prop_value_aliases ()&lt;/a&gt; 함수는 스크립트 이름의 모든 동의어를 얻을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="489c7fc8339f7c44efa172c21d3dbf41ad08c7e4" translate="yes" xml:space="preserve">
          <source>below</source>
          <target state="translated">below</target>
        </trans-unit>
        <trans-unit id="21b17c5ba622c38ebd7690a2824aa2f55d5b8a0f" translate="yes" xml:space="preserve">
          <source>below). The containing directory can be specified in &lt;code&gt;CPAN.pm&lt;/code&gt; in the &lt;code&gt;prefs_dir&lt;/code&gt; config variable. Try &lt;code&gt;o conf init
prefs_dir&lt;/code&gt; in the CPAN shell to set and activate the distroprefs system.</source>
          <target state="translated">이하). 포함 디렉토리는 &lt;code&gt;CPAN.pm&lt;/code&gt; 의 &lt;code&gt;prefs_dir&lt;/code&gt; 구성 변수 에서 지정할 수 있습니다 . 시험 &lt;code&gt;o conf init prefs_dir&lt;/code&gt; CPAN 쉘에서 conf init prefs_dir 을 하여 distroprefs 시스템을 설정하고 활성화하십시오.</target>
        </trans-unit>
        <trans-unit id="6ee65b4d48e2ac02540ecb32d3b43d908326681d" translate="yes" xml:space="preserve">
          <source>bench.pl</source>
          <target state="translated">bench.pl</target>
        </trans-unit>
        <trans-unit id="c5f5e4d75252d9788ce20300d00023fa1ccd4d19" translate="yes" xml:space="preserve">
          <source>best</source>
          <target state="translated">best</target>
        </trans-unit>
        <trans-unit id="a2db5af4b95c649c7f23f26e2d00914f22ca9241" translate="yes" xml:space="preserve">
          <source>best effort</source>
          <target state="translated">최고의 노력</target>
        </trans-unit>
        <trans-unit id="709634051471385aada32356842983beeff4b065" translate="yes" xml:space="preserve">
          <source>between</source>
          <target state="translated">between</target>
        </trans-unit>
        <trans-unit id="6ff6cf52c304b7ca8d264e3830a9bb468d96fb99" translate="yes" xml:space="preserve">
          <source>between configuring and making steps.)</source>
          <target state="translated">구성 단계와 단계 사이에.)</target>
        </trans-unit>
        <trans-unit id="95b5da10cca6e837a526a6e638dc826063502032" translate="yes" xml:space="preserve">
          <source>bexp()</source>
          <target state="translated">bexp()</target>
        </trans-unit>
        <trans-unit id="d52f22fd878ee3706d7dd2feba05080b099127cc" translate="yes" xml:space="preserve">
          <source>bfac()</source>
          <target state="translated">bfac()</target>
        </trans-unit>
        <trans-unit id="7bbd3be39df70eda29db2e96251dc8a4c05ce7be" translate="yes" xml:space="preserve">
          <source>bfloor()</source>
          <target state="translated">bfloor()</target>
        </trans-unit>
        <trans-unit id="0eb26de54355ba1e1f99e33725a9d024cfd6b807" translate="yes" xml:space="preserve">
          <source>bidirectional type of</source>
          <target state="translated">양방향 유형</target>
        </trans-unit>
        <trans-unit id="38e4f23119f7668c81c56c877acdc10f397299d2" translate="yes" xml:space="preserve">
          <source>big-endian</source>
          <target state="translated">big-endian</target>
        </trans-unit>
        <trans-unit id="5f9c9d32d71f1ef8b8014c350a5f8aec50c577ec" translate="yes" xml:space="preserve">
          <source>bigint</source>
          <target state="translated">bigint</target>
        </trans-unit>
        <trans-unit id="83123b65dc13ec2d11ceae1c1cec211e7cef1cb6" translate="yes" xml:space="preserve">
          <source>bigint - Transparent BigInteger support for Perl</source>
          <target state="translated">bigint-Perl에 대한 투명한 BigInteger 지원</target>
        </trans-unit>
        <trans-unit id="dc0c0c0aa0c98c99641fd608b1168be57143c887" translate="yes" xml:space="preserve">
          <source>bigint recognizes some options that can be passed while loading it via use. The options can (currently) be either a single letter form, or the long form. The following options exist:</source>
          <target state="translated">bigint는 사용을 통해로드하는 동안 전달할 수있는 일부 옵션을 인식합니다. 옵션은 (현재) 단일 문자 형식이거나 긴 형식 일 수 있습니다. 다음과 같은 옵션이 있습니다.</target>
        </trans-unit>
        <trans-unit id="2c5ed18936a55186b9ba8eb22ac87953629628d3" translate="yes" xml:space="preserve">
          <source>bignum</source>
          <target state="translated">bignum</target>
        </trans-unit>
        <trans-unit id="ebef2dfbf356b1d6376d0a89d5a3dc3812dc7025" translate="yes" xml:space="preserve">
          <source>bignum - Transparent BigNumber support for Perl</source>
          <target state="translated">bignum-Perl에 대한 투명한 BigNumber 지원</target>
        </trans-unit>
        <trans-unit id="cfc363199f35898d0c10e170520f53e8601bb52d" translate="yes" xml:space="preserve">
          <source>bignum recognizes some options that can be passed while loading it via use. The options can (currently) be either a single letter form, or the long form. The following options exist:</source>
          <target state="translated">bignum은 사용을 통해로드하는 동안 전달할 수있는 일부 옵션을 인식합니다. 옵션은 (현재) 단일 문자 형식이거나 긴 형식 일 수 있습니다. 다음과 같은 옵션이 있습니다.</target>
        </trans-unit>
        <trans-unit id="59cfee0f6bb73ee64a7b9dbb363c27ea0eb9f302" translate="yes" xml:space="preserve">
          <source>bigrat</source>
          <target state="translated">bigrat</target>
        </trans-unit>
        <trans-unit id="dbf25a54f2fd0d3932bef731375b0ba1d051ef77" translate="yes" xml:space="preserve">
          <source>bigrat - Transparent BigNumber/BigRational support for Perl</source>
          <target state="translated">bigrat-Perl에 대한 투명한 BigNumber / BigRational 지원</target>
        </trans-unit>
        <trans-unit id="7e19d6f26f79bdfbe7853603c9a8d51e943da151" translate="yes" xml:space="preserve">
          <source>bin.U</source>
          <target state="translated">bin.U</target>
        </trans-unit>
        <trans-unit id="7e57cfe843145135aee1f4d0d63ceb7842093712" translate="yes" xml:space="preserve">
          <source>binary</source>
          <target state="translated">binary</target>
        </trans-unit>
        <trans-unit id="a7932f025d5ca969d2e5249dfaee5d1123fb29da" translate="yes" xml:space="preserve">
          <source>binary representation. Leaving floating point numbers aside for the moment, the salient properties of any such representation are:</source>
          <target state="translated">이진 표현. 현재 부동 소수점 숫자를 제외하고 이러한 표현의 두드러진 속성은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="988edf147febb2b4b364a6acf2ddf6d4e94e8f33" translate="yes" xml:space="preserve">
          <source>binary, setting the C pre-processor macro &lt;code&gt;PERL_SUB_DEPTH_WARN&lt;/code&gt; to the desired value.</source>
          <target state="translated">이진, C 전 처리기 매크로 &lt;code&gt;PERL_SUB_DEPTH_WARN&lt;/code&gt; 을 원하는 값으로 설정합니다.</target>
        </trans-unit>
        <trans-unit id="de2cc6807b3c1fe9f5060a6094b70de72fb1f441" translate="yes" xml:space="preserve">
          <source>binary, which affect its binary compatibility with extensions. &lt;code&gt;bincompat_options()&lt;/code&gt; and &lt;code&gt;non_bincompat_options()&lt;/code&gt; are shown together in the output of &lt;code&gt;perl -V&lt;/code&gt; as</source>
          <target state="translated">바이너리. 확장과 바이너리 호환성에 영향을줍니다. &lt;code&gt;bincompat_options()&lt;/code&gt; 및 &lt;code&gt;non_bincompat_options()&lt;/code&gt; 는 &lt;code&gt;perl -V&lt;/code&gt; 의 출력에 함께 표시 됩니다.</target>
        </trans-unit>
        <trans-unit id="b636cf5b464cf1767119b4fe29df7c510211a548" translate="yes" xml:space="preserve">
          <source>binary, which do not affect binary compatibility with extensions.</source>
          <target state="translated">이진은 확장과의 이진 호환성에 영향을 미치지 않습니다.</target>
        </trans-unit>
        <trans-unit id="27b0abcf6d482c493480a28ab67814ecd71ae2f0" translate="yes" xml:space="preserve">
          <source>binary/&lt;code&gt;API&lt;/code&gt;</source>
          <target state="translated">binary/&lt;code&gt;API&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="6bdd4db977b0f96aaf3bff2e4300153c648ca382" translate="yes" xml:space="preserve">
          <source>bind</source>
          <target state="translated">bind</target>
        </trans-unit>
        <trans-unit id="15cb6b206f5309c215554249b37ea718b7489464" translate="yes" xml:space="preserve">
          <source>bind SOCKET,NAME</source>
          <target state="translated">SOCKET, NAME 바인딩</target>
        </trans-unit>
        <trans-unit id="b8caa416ad22dfd04289ea1a80760faf5b038881" translate="yes" xml:space="preserve">
          <source>binmode</source>
          <target state="translated">binmode</target>
        </trans-unit>
        <trans-unit id="5e65b13dafb6dd4c759cc9455fddbe5bd69a8e0f" translate="yes" xml:space="preserve">
          <source>binmode FILEHANDLE</source>
          <target state="translated">빈 모드 파일 핸들</target>
        </trans-unit>
        <trans-unit id="baf4fab3113579642465b028f8be5d19dbe690da" translate="yes" xml:space="preserve">
          <source>binmode FILEHANDLE, LAYER</source>
          <target state="translated">binmode FILEHANDLE, LAYER</target>
        </trans-unit>
        <trans-unit id="fab68bdc2486879246a68125daf732306cd8090f" translate="yes" xml:space="preserve">
          <source>binmode() is important not only for readline() and print() operations, but also when using read(), seek(), sysread(), syswrite() and tell() (see &lt;a href=&quot;../perlport&quot;&gt;perlport&lt;/a&gt; for more details). See the &lt;code&gt;$/&lt;/code&gt; and &lt;code&gt;$\&lt;/code&gt; variables in &lt;a href=&quot;../perlvar&quot;&gt;perlvar&lt;/a&gt; for how to manually set your input and output line-termination sequences.</source>
          <target state="translated">binmode ()는 readline () 및 print () 작업뿐만 아니라 read (), seek (), sysread (), syswrite () 및 tell ()을 사용할 &lt;a href=&quot;../perlport&quot;&gt;때도 중요&lt;/a&gt; 합니다 (자세한 내용 은 perlport 참조). &lt;a href=&quot;../perlvar&quot;&gt;perlvar&lt;/a&gt; 의 &lt;code&gt;$/&lt;/code&gt; 및 &lt;code&gt;$\&lt;/code&gt; 변수를 참조하십시오입력 및 출력 라인 종료 시퀀스를 수동으로 설정하는 방법 .</target>
        </trans-unit>
        <trans-unit id="c6cf70d51d1b9249c9bedbb5a665191357d92d38" translate="yes" xml:space="preserve">
          <source>binmode() is important not only for readline() and print() operations, but also when using read(), seek(), sysread(), syswrite() and tell() (see &lt;a href=&quot;perlport&quot;&gt;perlport&lt;/a&gt; for more details). See the &lt;code&gt;$/&lt;/code&gt; and &lt;code&gt;$\&lt;/code&gt; variables in &lt;a href=&quot;perlvar&quot;&gt;perlvar&lt;/a&gt; for how to manually set your input and output line-termination sequences.</source>
          <target state="translated">binmode ()는 readline () 및 print () 작업뿐만 아니라 read (), seek (), sysread (), syswrite () 및 tell ()을 사용할 &lt;a href=&quot;perlport&quot;&gt;때도 중요&lt;/a&gt; 합니다 (자세한 내용 은 perlport 참조). 입력 및 출력 라인 종료 시퀀스를 수동으로 설정하는 방법 은 &lt;a href=&quot;perlvar&quot;&gt;perlvar&lt;/a&gt; 의 &lt;code&gt;$/&lt;/code&gt; 및 &lt;code&gt;$\&lt;/code&gt; 변수를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="64304f0eaf264d4083a161af95cca3f4fc9956cd" translate="yes" xml:space="preserve">
          <source>binmode() operates similarly to open(): by default the specified layers are pushed on top of the existing stack.</source>
          <target state="translated">binmode ()는 open ()과 유사하게 작동합니다. 기본적으로 지정된 레이어는 기존 스택 위에 푸시됩니다.</target>
        </trans-unit>
        <trans-unit id="20f2d91e547cecad3b564ae99be53b45a6e670cc" translate="yes" xml:space="preserve">
          <source>bison on BS2000</source>
          <target state="translated">BS2000의 들소</target>
        </trans-unit>
        <trans-unit id="f019d80321d209bdb5e25621a435c0f92ac86cfd" translate="yes" xml:space="preserve">
          <source>bits that is computed from the data value by doing sums. For numeric unpack codes, no big feat is achieved:</source>
          <target state="translated">합을 수행하여 데이터 값에서 계산되는 비트. 숫자 압축 해제 코드의 경우 큰 위업이 달성되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="5bf1fd927dfb8679496a2e6cf00cbe50c1c87145" translate="yes" xml:space="preserve">
          <source>blah</source>
          <target state="translated">blah</target>
        </trans-unit>
        <trans-unit id="fcfd8b08b9dfc18492f53d1d51ef8d9ad41fbf87" translate="yes" xml:space="preserve">
          <source>blah.</source>
          <target state="translated">blah.</target>
        </trans-unit>
        <trans-unit id="c6198477997fe2771883ee25a1a71d0e4c7432b1" translate="yes" xml:space="preserve">
          <source>blah.exe</source>
          <target state="translated">blah.exe</target>
        </trans-unit>
        <trans-unit id="710f4beb6f3094fc46248a083fb427bcc0ad2e24" translate="yes" xml:space="preserve">
          <source>bless</source>
          <target state="translated">bless</target>
        </trans-unit>
        <trans-unit id="e4f59c387f62cb1edb42a1911954c50219be47d9" translate="yes" xml:space="preserve">
          <source>bless REF</source>
          <target state="translated">REF를 축복</target>
        </trans-unit>
        <trans-unit id="2e44205459ae344b338868e3b6b33bce58faf520" translate="yes" xml:space="preserve">
          <source>bless REF,CLASSNAME</source>
          <target state="translated">REF, CLASSNAME 축복</target>
        </trans-unit>
        <trans-unit id="a49b3189e430e15827425d766ade8c8277059efb" translate="yes" xml:space="preserve">
          <source>bless, blessed, and ref</source>
          <target state="translated">축복, 축복, 심판</target>
        </trans-unit>
        <trans-unit id="f08a7a19e6f47e1125c9aee2336c6759c7798fe4" translate="yes" xml:space="preserve">
          <source>blessed</source>
          <target state="translated">blessed</target>
        </trans-unit>
        <trans-unit id="7cdb9aa0f32f7a30fb9e35578aff5c7297e84bc8" translate="yes" xml:space="preserve">
          <source>blessings</source>
          <target state="translated">blessings</target>
        </trans-unit>
        <trans-unit id="5948cd46ec4b37fb77f455070c85e3a53a5385e6" translate="yes" xml:space="preserve">
          <source>blib</source>
          <target state="translated">blib</target>
        </trans-unit>
        <trans-unit id="58725a4e858a2c6188cdb04784100e5472989d90" translate="yes" xml:space="preserve">
          <source>blib - Use MakeMaker's uninstalled version of a package</source>
          <target state="translated">blib-MakeMaker의 제거 된 버전의 패키지 사용</target>
        </trans-unit>
        <trans-unit id="a76058b40e0fac4a71812a9bc906c2fefb88858f" translate="yes" xml:space="preserve">
          <source>blibdirs_target</source>
          <target state="translated">blibdirs_target</target>
        </trans-unit>
        <trans-unit id="0214b4b355d11ca8f2ce45a968c264651bdfbf83" translate="yes" xml:space="preserve">
          <source>block</source>
          <target state="translated">block</target>
        </trans-unit>
        <trans-unit id="de78f4557b8f92abac734524c8092acd1ff00895" translate="yes" xml:space="preserve">
          <source>blsft()/brsft()</source>
          <target state="translated">blsft()/brsft()</target>
        </trans-unit>
        <trans-unit id="2e264db45128e397f171695bf390adfeef3598d7" translate="yes" xml:space="preserve">
          <source>bmod()</source>
          <target state="translated">bmod()</target>
        </trans-unit>
        <trans-unit id="acb2323220a9a7746a44255816d71f5351a4790a" translate="yes" xml:space="preserve">
          <source>bneg()</source>
          <target state="translated">bneg()</target>
        </trans-unit>
        <trans-unit id="33366fdd69ce84e94b98d8a229f85a41c634530c" translate="yes" xml:space="preserve">
          <source>bnok()</source>
          <target state="translated">bnok()</target>
        </trans-unit>
        <trans-unit id="c770c8e7173b85479c2dc8ac9f7dcbb9bc5fe2f3" translate="yes" xml:space="preserve">
          <source>bnorm()</source>
          <target state="translated">bnorm()</target>
        </trans-unit>
        <trans-unit id="32895dc66f25fd7dac0899bd9b4408dd1841faf8" translate="yes" xml:space="preserve">
          <source>bnorm() on a BigFloat object is now effectively a no-op, since the numbers are always stored in normalized form. On a string, it creates a BigFloat object.</source>
          <target state="translated">숫자가 항상 정규화 된 형식으로 저장되기 때문에 BigFloat 객체의 bnorm ()은 사실상 효과적으로 작동하지 않습니다. 문자열에서 BigFloat 오브젝트를 작성합니다.</target>
        </trans-unit>
        <trans-unit id="02083f4579e08a612425c0c1a17ee47add783b94" translate="yes" xml:space="preserve">
          <source>body</source>
          <target state="translated">body</target>
        </trans-unit>
        <trans-unit id="1aed26655fb288402a22a39e65ab37ea6faa2d19" translate="yes" xml:space="preserve">
          <source>book-keeping code to the generated code. During the execution of the code the basic block counters are then updated appropriately. The caveat is that the added extra code can skew the results: again, the profiling tools usually try to factor their own effects out of the results.</source>
          <target state="translated">생성 된 코드에 대한 부기 코드. 코드를 실행하는 동안 기본 블록 카운터가 적절하게 업데이트됩니다. 주의 할 점은 추가 된 추가 코드가 결과를 왜곡 할 수 있다는 것입니다. 다시 말하지만 프로파일 링 도구는 일반적으로 결과에서 자체 효과를 고려하려고합니다.</target>
        </trans-unit>
        <trans-unit id="729e45dc00b922b49b39fefe181e1e856ed87ec4" translate="yes" xml:space="preserve">
          <source>boot_Module</source>
          <target state="translated">boot_Module</target>
        </trans-unit>
        <trans-unit id="ba663f22e3229112460a32e29c16274682d6bf7a" translate="yes" xml:space="preserve">
          <source>boot_ModuleName</source>
          <target state="translated">boot_ModuleName</target>
        </trans-unit>
        <trans-unit id="3c71cc99d2fc1c12a3d3e1b27e448ca612a89a1d" translate="yes" xml:space="preserve">
          <source>bootstrap</source>
          <target state="translated">bootstrap</target>
        </trans-unit>
        <trans-unit id="4b73f58647d46c351e92c5308bdff57c346a520b" translate="yes" xml:space="preserve">
          <source>bootstrap($module [...])</source>
          <target state="translated">부트 스트랩 ($ module [...])</target>
        </trans-unit>
        <trans-unit id="7910fb624621794d30d4a0171b4ef16c06efef31" translate="yes" xml:space="preserve">
          <source>bootstraps the shared library and</source>
          <target state="translated">공유 라이브러리를 부트 스트랩하고</target>
        </trans-unit>
        <trans-unit id="05b1f356646c24bf1765f6f1b65aea3bde7247e1" translate="yes" xml:space="preserve">
          <source>boss</source>
          <target state="translated">boss</target>
        </trans-unit>
        <trans-unit id="fc39b18f287d8bbfaceae020f4a4eb32ac5c1e70" translate="yes" xml:space="preserve">
          <source>both</source>
          <target state="translated">both</target>
        </trans-unit>
        <trans-unit id="abb0e3da05698e3415e8b8587366c2e5c9fe8869" translate="yes" xml:space="preserve">
          <source>both map to</source>
          <target state="translated">둘 다에 매핑</target>
        </trans-unit>
        <trans-unit id="654dc453fcad5d97496638c1771b5fea1e41eb18" translate="yes" xml:space="preserve">
          <source>both of which mean to enable locale awarness of all categories but &lt;code&gt;LC_CTYPE&lt;/code&gt; . Only one category argument may be specified in a &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; locale&lt;/code&gt; if it is of the negated form.</source>
          <target state="translated">둘 다 &lt;code&gt;LC_CTYPE&lt;/code&gt; 이외의 모든 범주에 대한 로케일 경고를 활성화 합니다. &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; locale&lt;/code&gt; 로케일 에는 하나의 범주 인수 만 지정할 수 있습니다.부정 형식 인 경우 .</target>
        </trans-unit>
        <trans-unit id="26d491c7e7617951114de7ec765c4e99eb127ce3" translate="yes" xml:space="preserve">
          <source>both s and m modifiers (//sm): Treat string as a single long line, but detect multiple lines. &lt;code&gt;'.'&lt;/code&gt; matches any character, even &lt;code&gt;&quot;\n&quot;&lt;/code&gt; . &lt;code&gt;^&lt;/code&gt; and &lt;code&gt;$&lt;/code&gt; , however, are able to match at the start or end of</source>
          <target state="translated">s 및 m 수정 자 (// sm) : 문자열을 하나의 긴 줄로 취급하지만 여러 줄을 감지합니다. &lt;code&gt;'.'&lt;/code&gt; &lt;code&gt;&quot;\n&quot;&lt;/code&gt; 조차 모든 문자와 일치합니다 . 그러나 &lt;code&gt;^&lt;/code&gt; 및 &lt;code&gt;$&lt;/code&gt; 는 시작 또는 끝에서 일치 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d145e8b6add511128e3c21f5ad3c0317ad3aa0f5" translate="yes" xml:space="preserve">
          <source>both supply a list context to the right-hand side, while</source>
          <target state="translated">둘 다 오른쪽에 목록 컨텍스트를 제공하고</target>
        </trans-unit>
        <trans-unit id="ddb1e7c979a33eef473274634ab437e562e02159" translate="yes" xml:space="preserve">
          <source>bother</source>
          <target state="translated">bother</target>
        </trans-unit>
        <trans-unit id="23998aef8c711bbb24e99222ca54b2d1029087d8" translate="yes" xml:space="preserve">
          <source>bpow()</source>
          <target state="translated">bpow()</target>
        </trans-unit>
        <trans-unit id="8a6b08579a9805d7dea44b94ea1dcb6609f11536" translate="yes" xml:space="preserve">
          <source>bracketed character classes, and are a convenient and descriptive way of listing a group of characters.</source>
          <target state="translated">대괄호 문자 클래스이며 문자 그룹을 나열하는 편리하고 설명적인 방법입니다.</target>
        </trans-unit>
        <trans-unit id="837cc1c54b7aa66d67f7d308af69db6dc69fbbe4" translate="yes" xml:space="preserve">
          <source>brackets subscripts, so you can shrink the above down to</source>
          <target state="translated">대괄호 아래 첨자를 사용하여 위의</target>
        </trans-unit>
        <trans-unit id="4f9cac8dbc4c67a388b8379dcc126c90c7c5e72a" translate="yes" xml:space="preserve">
          <source>break</source>
          <target state="translated">break</target>
        </trans-unit>
        <trans-unit id="bb43d711172bd27bbb3fc18fb773e33edc6b3165" translate="yes" xml:space="preserve">
          <source>breaking down the problem into smaller parts,</source>
          <target state="translated">문제를 더 작은 부분으로 나누고</target>
        </trans-unit>
        <trans-unit id="ef6896ab2d5a3c6e8ba7ee46ba3e48c29057ad74" translate="yes" xml:space="preserve">
          <source>breakout</source>
          <target state="translated">breakout</target>
        </trans-unit>
        <trans-unit id="b33a5b3e6b7eb3b9f7f1a0e451dee877c2374873" translate="yes" xml:space="preserve">
          <source>breaks this paradigm;</source>
          <target state="translated">이 패러다임을 끊습니다.</target>
        </trans-unit>
        <trans-unit id="58bcf671da7c6005da184d1a734e880e766af7f5" translate="yes" xml:space="preserve">
          <source>brian d foy &lt;code&gt;&amp;lt;brian.d.foy@gmail.com&amp;gt;&lt;/code&gt;</source>
          <target state="translated">브라이언 디 포이 &lt;code&gt;&amp;lt;brian.d.foy@gmail.com&amp;gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="96a69616cc78fb488e50bb7f07bd37667d493f80" translate="yes" xml:space="preserve">
          <source>broken.</source>
          <target state="translated">broken.</target>
        </trans-unit>
        <trans-unit id="0b12bb49ef8a21331b0526566fe4b80e5eaec019" translate="yes" xml:space="preserve">
          <source>broot()</source>
          <target state="translated">broot()</target>
        </trans-unit>
        <trans-unit id="6fa78ae26f483beb12891190edb2dc005e4cbe3b" translate="yes" xml:space="preserve">
          <source>bround()/round()/bfround()</source>
          <target state="translated">bround()/round()/bfround()</target>
        </trans-unit>
        <trans-unit id="1dbd729f945c8998e112203241f2035b87c572b0" translate="yes" xml:space="preserve">
          <source>bsd_glob() returns a list of matching paths, possibly zero length. If an error occurred, &amp;amp;File::Glob::GLOB_ERROR will be non-zero and &lt;code&gt;$!&lt;/code&gt; will be set. &amp;amp;File::Glob::GLOB_ERROR is guaranteed to be zero if no error occurred, or one of the following values otherwise:</source>
          <target state="translated">bsd_glob ()는 길이가 0 인 일치하는 경로 목록을 반환합니다. 오류가 발생하면 &amp;amp; File :: Glob :: GLOB_ERROR는 0이 아니며 &lt;code&gt;$!&lt;/code&gt; 설정됩니다. &amp;amp; File :: Glob :: GLOB_ERROR는 오류가 발생하지 않으면 0, 그렇지 않으면 다음 값 중 하나를 보장합니다.</target>
        </trans-unit>
        <trans-unit id="60747fb94e0ee1e6a3033c0be43d87212b33a4f5" translate="yes" xml:space="preserve">
          <source>bsddev.zip</source>
          <target state="translated">bsddev.zip</target>
        </trans-unit>
        <trans-unit id="98e6344878aedd07915a448203ac11106893ceb4" translate="yes" xml:space="preserve">
          <source>bsqrt()</source>
          <target state="translated">bsqrt()</target>
        </trans-unit>
        <trans-unit id="d0f6068194aa4e1d1262dafb62bcf499c7cc6deb" translate="yes" xml:space="preserve">
          <source>bstr()/bsstr()</source>
          <target state="translated">bstr()/bsstr()</target>
        </trans-unit>
        <trans-unit id="fe1b2b96400138c433e3bcd27a0351d10505d6a4" translate="yes" xml:space="preserve">
          <source>btree(3)</source>
          <target state="translated">btree(3)</target>
        </trans-unit>
        <trans-unit id="39001d5c18f51088ca9e1057a5abbd818117d55a" translate="yes" xml:space="preserve">
          <source>build them, but you must link the XSUBs subroutines with the rest of Perl, creating a new executable. This situation is similar to Perl 4.</source>
          <target state="translated">이들을 빌드하되 XSUB 서브 루틴을 나머지 Perl과 링크하여 새 실행 파일을 작성해야합니다. 이 상황은 Perl 4와 유사합니다.</target>
        </trans-unit>
        <trans-unit id="f52318a05e518a5596012af2ed38de68ac26a468" translate="yes" xml:space="preserve">
          <source>builder</source>
          <target state="translated">builder</target>
        </trans-unit>
        <trans-unit id="9b72ae582cc1e1e343de827cc627cd49a4a6c7c4" translate="yes" xml:space="preserve">
          <source>building below the perl source directory. If you</source>
          <target state="translated">펄 소스 디렉토리 아래에 건물. 만약 너라면</target>
        </trans-unit>
        <trans-unit id="947d8f664d143e01412e73e257100b32b9ed0ecf" translate="yes" xml:space="preserve">
          <source>building below the perl source, INST_LIB and INST_ARCHLIB default to ../../lib, and INST_SCRIPT is not defined.</source>
          <target state="translated">펄 소스 아래에서 빌드하는 경우, INST_LIB 및 INST_ARCHLIB는 기본적으로 ../../lib이며 INST_SCRIPT는 정의되어 있지 않습니다.</target>
        </trans-unit>
        <trans-unit id="f125862e397bf52c7831a13c2443aeda18c3ffb1" translate="yes" xml:space="preserve">
          <source>builds a PPD package that references a binary of the &lt;code&gt;Agent&lt;/code&gt; package, located in the &lt;code&gt;x86&lt;/code&gt; directory relative to the PPD itself.</source>
          <target state="translated">PPD 자체와 관련 하여 &lt;code&gt;x86&lt;/code&gt; 디렉토리 에 있는 &lt;code&gt;Agent&lt;/code&gt; 패키지 의 바이너리를 참조하는 PPD 패키지를 빌드 합니다.</target>
        </trans-unit>
        <trans-unit id="54c968766b16149a445212d3b145a5471982de2f" translate="yes" xml:space="preserve">
          <source>builds a Perl extension for use by Encode from either Unicode Character Mapping files (.ucm) or Tcl Encoding Files (.enc). Besides being used internally during the build process of the Encode module, you can use</source>
          <target state="translated">유니 코드 문자 매핑 파일 (.ucm) 또는 Tcl 인코딩 파일 (.enc)에서 Encode에서 사용할 Perl 확장을 빌드합니다. Encode 모듈의 빌드 프로세스 중에 내부적으로 사용되는 것 외에도</target>
        </trans-unit>
        <trans-unit id="02270db35bb6bd281f1f08fafc816eeb39611e44" translate="yes" xml:space="preserve">
          <source>builds a Perl extension from C header files. The extension will include functions which can be used to retrieve the value of any #define statement which was in the C header files.</source>
          <target state="translated">C 헤더 파일에서 Perl 확장을 빌드합니다. 확장명에는 C 헤더 파일에있는 #define 문의 값을 검색하는 데 사용할 수있는 함수가 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="353c847ec3d51fb75d760939a900605ca2ba1152" translate="yes" xml:space="preserve">
          <source>built</source>
          <target state="translated">built</target>
        </trans-unit>
        <trans-unit id="35e8277cc95cf8aaf1e8e9ffcb5ea39e6502bbd0" translate="yes" xml:space="preserve">
          <source>bundles</source>
          <target state="translated">bundles</target>
        </trans-unit>
        <trans-unit id="97bd27f135ae383d1ab339e2ddd56faabfe06a3c" translate="yes" xml:space="preserve">
          <source>bunzip2 $input_filename_or_reference =&amp;gt; $output_filename_or_reference [, OPTS]</source>
          <target state="translated">bunzip2 $ input_filename_or_reference =&amp;gt; $ output_filename_or_reference [, OPTS]</target>
        </trans-unit>
        <trans-unit id="786e97b3ee9fc4b292d5852c2c5943153c4ce91a" translate="yes" xml:space="preserve">
          <source>but</source>
          <target state="translated">but</target>
        </trans-unit>
        <trans-unit id="cf72a790bf9220db925b72c5cbee1dd78ac17da1" translate="yes" xml:space="preserve">
          <source>but $var is referenced elsewhere and could be modified after the &lt;code&gt;&lt;a href=&quot;functions/sub&quot;&gt;sub&lt;/a&gt;&lt;/code&gt; expression is evaluated. Either it is explicitly modified elsewhere (&lt;code&gt;$var = 3&lt;/code&gt; ) or it is passed to a subroutine or to an operator like &lt;code&gt;&lt;a href=&quot;functions/printf&quot;&gt;printf&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;functions/map&quot;&gt;map&lt;/a&gt;&lt;/code&gt;, which may or may not modify the variable.</source>
          <target state="translated">그러나 $ var은 다른 곳에서 참조되며 &lt;code&gt;&lt;a href=&quot;functions/sub&quot;&gt;sub&lt;/a&gt;&lt;/code&gt; 표현식을 평가 한 후에 수정할 수 있습니다 . 다른 곳에서 명시 적으로 수정 되거나 ( &lt;code&gt;$var = 3&lt;/code&gt; ), 서브 루틴 또는 &lt;code&gt;&lt;a href=&quot;functions/printf&quot;&gt;printf&lt;/a&gt;&lt;/code&gt; 또는 &lt;code&gt;&lt;a href=&quot;functions/map&quot;&gt;map&lt;/a&gt;&lt;/code&gt; 과 같은 연산자로 전달되어 변수를 수정하거나 수정하지 않을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="71b30c3e0c461e872d1934c8031a13c3d20f53a0" translate="yes" xml:space="preserve">
          <source>but a string consisting of two null bytes (the result of &lt;code&gt;&quot;\020\020&quot;
&amp;amp; &quot;\101\101&quot;&lt;/code&gt; ) is not a false value in Perl. You need:</source>
          <target state="translated">그러나 두 개의 널 바이트 ( &lt;code&gt;&quot;\020\020&quot; &amp;amp; &quot;\101\101&quot;&lt;/code&gt; 의 결과)로 구성된 문자열 은 Perl에서 잘못된 값이 아닙니다. 당신이 필요합니다 :</target>
        </trans-unit>
        <trans-unit id="0f5c833e6b8ad19de738251b4d0e198a912780cf" translate="yes" xml:space="preserve">
          <source>but avoids the need to know $cpt's package name.</source>
          <target state="translated">그러나 $ cpt의 패키지 이름을 알 필요가 없습니다.</target>
        </trans-unit>
        <trans-unit id="14589f2bfb988ba357d07d902945d6c51ace67f6" translate="yes" xml:space="preserve">
          <source>but calling any method that modifies the number directly will result in &lt;b&gt;both&lt;/b&gt; the original and the copy being destroyed:</source>
          <target state="translated">하지만 수정 수가 직접 발생합니다 것을 어떤 방법 호출 &lt;b&gt;모두&lt;/b&gt; 원본과 사본 것은 파괴되고 :</target>
        </trans-unit>
        <trans-unit id="2a43af42a3edda8e818e0b4b4bad6b01d151755a" translate="yes" xml:space="preserve">
          <source>but doesn't spit out extra fields. It's also cheaper not to capture characters if you don't need to.</source>
          <target state="translated">추가 필드를 뱉어 내지 않습니다. 필요하지 않은 경우 캐릭터를 캡처하지 않는 것이 더 저렴합니다.</target>
        </trans-unit>
        <trans-unit id="15e6be4e78dba9fceaa351875dbb83140728ef88" translate="yes" xml:space="preserve">
          <source>but faster.</source>
          <target state="translated">그러나 더 빠릅니다.</target>
        </trans-unit>
        <trans-unit id="5db5323d8075957d671047bee13d624d6956eafd" translate="yes" xml:space="preserve">
          <source>but in actual fact, you got</source>
          <target state="translated">하지만 실제로는</target>
        </trans-unit>
        <trans-unit id="f46b2388486d21f0ad260e041f0ddfc6e4c238c0" translate="yes" xml:space="preserve">
          <source>but instead you get:</source>
          <target state="translated">그러나 대신에 당신은 얻는다 :</target>
        </trans-unit>
        <trans-unit id="670c9eed4ef45780d6a27c66aa6737f774ca7361" translate="yes" xml:space="preserve">
          <source>but is more efficient. Returns the number of elements in the array following the completed &lt;code&gt;&lt;a href=&quot;functions/push&quot;&gt;push&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">그러나 더 효율적입니다. 완료된 &lt;code&gt;&lt;a href=&quot;functions/push&quot;&gt;push&lt;/a&gt;&lt;/code&gt; 다음에있는 배열의 요소 수를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="ea2b46c116a2c87653b1086423551aaba04ef434" translate="yes" xml:space="preserve">
          <source>but is more efficient. Returns the number of elements in the array following the completed &lt;code&gt;&lt;a href=&quot;push&quot;&gt;push&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">그러나 더 효율적입니다. 완료된 &lt;code&gt;&lt;a href=&quot;push&quot;&gt;push&lt;/a&gt;&lt;/code&gt; 다음에있는 배열의 요소 수를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="430a12560afed6b52405b428e0d46fec40e28bab" translate="yes" xml:space="preserve">
          <source>but not a mixture of both as in:</source>
          <target state="translated">그러나 다음과 같이 둘 다의 혼합물은 아닙니다.</target>
        </trans-unit>
        <trans-unit id="07b3726c790e16484102349cd362b2dc216a33e9" translate="yes" xml:space="preserve">
          <source>but rather as class methods:</source>
          <target state="translated">오히려 클래스 메소드로 :</target>
        </trans-unit>
        <trans-unit id="9702a21ebfe300cef572f0598fe961666de341c4" translate="yes" xml:space="preserve">
          <source>but remember that there's a startup cost to pay in that case (see above &quot;libperl and Prebinding&quot;).</source>
          <target state="translated">그러나이 경우 지불해야하는 시작 비용이 있음을 기억하십시오 (위의 &quot;libperl 및 사전 바인딩&quot;참조).</target>
        </trans-unit>
        <trans-unit id="acb2133a2923255080591abe8aebb2b94ab97c8d" translate="yes" xml:space="preserve">
          <source>but shorter. Parent directory specifications are stripped from the template itself. The C</source>
          <target state="translated">그러나 더 짧습니다. 상위 디렉토리 스펙은 템플리트 자체에서 제거됩니다. C</target>
        </trans-unit>
        <trans-unit id="62ddbd66e01cf82298f15351b5c586e039d8e26c" translate="yes" xml:space="preserve">
          <source>but since you anticipate localizing this, you write:</source>
          <target state="translated">그러나 이것을 현지화 할 것으로 예상하기 때문에 다음과 같이 씁니다.</target>
        </trans-unit>
        <trans-unit id="f4adbde7584db1a7c8b596705eb7136fbd8e99a5" translate="yes" xml:space="preserve">
          <source>but that makes no difference compared with the -Duse64bitint because of the &lt;code&gt;cc -64&lt;/code&gt; .</source>
          <target state="translated">그러나 &lt;code&gt;cc -64&lt;/code&gt; 때문에 -Duse64bitint와 비교해도 차이가 없습니다 .</target>
        </trans-unit>
        <trans-unit id="23d8d8f376b2cff8835a27af9acf7c580e3a9e81" translate="yes" xml:space="preserve">
          <source>but that may be just luck. Other AntiVirus software may have similar issues.</source>
          <target state="translated">그러나 그것은 운이 좋을 수도 있습니다. 다른 안티 바이러스 소프트웨어에도 비슷한 문제가있을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ed3d39f2ff5bb81326e9be2a017f7421168dc990" translate="yes" xml:space="preserve">
          <source>but that will be silently converted into &lt;code&gt;[3,-3pi/4]&lt;/code&gt;, since the modulus must be non-negative (it represents the distance to the origin in the complex plane).</source>
          <target state="translated">그러나 계수는 음이 아니어야하기 때문에 ( &lt;code&gt;[3,-3pi/4]&lt;/code&gt; 로 자동 변환됩니다 (복합 평면에서 원점까지의 거리를 나타냄).</target>
        </trans-unit>
        <trans-unit id="b509dd9066df836513e27436a8d4e7ade7f0b728" translate="yes" xml:space="preserve">
          <source>but the comma is not</source>
          <target state="translated">그러나 쉼표는 아닙니다</target>
        </trans-unit>
        <trans-unit id="9384ff012c073541ee4cf2ad0804fa1a41e628ac" translate="yes" xml:space="preserve">
          <source>but the syntax of Perl doesn't allow this. You need a comma after the string. (Of course, you may consider it a bug that commas between all the constants aren't required, in which case you may feel free to insert commas unless you're using $Term::ANSIColor::AUTORESET or PUSHCOLOR/POPCOLOR.)</source>
          <target state="translated">그러나 Perl의 구문은 이것을 허용하지 않습니다. 문자열 뒤에 쉼표가 필요합니다. (물론, 모든 상수 사이에 쉼표가 필요하지 않은 버그로 간주 될 수 있습니다.이 경우 $ Term :: ANSIColor :: AUTORESET 또는 PUSHCOLOR / POPCOLOR를 사용하지 않으면 쉼표를 삽입해도됩니다.)</target>
        </trans-unit>
        <trans-unit id="f59fd7340224ad23961f9ec29fad42c961b15b81" translate="yes" xml:space="preserve">
          <source>but then $foo no longer contains a glob.</source>
          <target state="translated">그러나 $ foo는 더 이상 glob를 포함하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="5e375615161c63e7fc29a1c88b265148575b94e3" translate="yes" xml:space="preserve">
          <source>but then cannot see that &quot;En_US&quot; listed by the above-mentioned commands. You may see things like &quot;en_US.ISO8859-1&quot;, but that isn't the same. In this case, try running under a locale that you can list and which somehow matches what you tried. The rules for matching locale names are a bit vague because standardization is weak in this area. See again the &lt;a href=&quot;#Finding-locales&quot;&gt;Finding locales&lt;/a&gt; about general rules.</source>
          <target state="translated">그러나 위에서 언급 한 명령으로 &quot;En_US&quot;가 표시되지 않습니다. &quot;en_US.ISO8859-1&quot;과 같은 것을 볼 수 있지만 동일하지 않습니다. 이 경우, 나열 할 수있는 로케일에서 실행 해보십시오. 이 영역에서는 표준화가 약하기 때문에 로캘 이름 일치 규칙이 약간 모호합니다. 일반 규칙에 대한 &lt;a href=&quot;#Finding-locales&quot;&gt;로케일 찾기를&lt;/a&gt; 다시 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="3cac644780c84e33b8c8e17e1aa72c863bdc551c" translate="yes" xml:space="preserve">
          <source>but then modify it if the current Configure options warrant.</source>
          <target state="translated">그러나 현재 구성 옵션이 필요한 경우이를 수정하십시오.</target>
        </trans-unit>
        <trans-unit id="9bbd6063bd561229cf513f5487e005633f74b476" translate="yes" xml:space="preserve">
          <source>but these will fail:</source>
          <target state="translated">그러나 이것들은 실패 할 것입니다 :</target>
        </trans-unit>
        <trans-unit id="ca81437b80f2ad6457ea481a09d4317a77895103" translate="yes" xml:space="preserve">
          <source>but this can be altered by passing a second argument to &lt;code&gt;&lt;a href=&quot;../functions/use&quot;&gt;use&lt;/a&gt; Filter::Simple&lt;/code&gt; or &lt;code&gt;FILTER&lt;/code&gt; (just remember: there's</source>
          <target state="translated">그러나 이것은 &lt;code&gt;&lt;a href=&quot;../functions/use&quot;&gt;use&lt;/a&gt; Filter::Simple&lt;/code&gt; 또는 &lt;code&gt;FILTER&lt;/code&gt; 를 &lt;a href=&quot;../functions/use&quot;&gt;사용&lt;/a&gt; 하기 위해 두 번째 인수를 전달하여 변경할 수 있습니다 (단지 기억하십시오 :</target>
        </trans-unit>
        <trans-unit id="e691b4ae28b1162e1f37e88fdb2e7fa3a57809e2" translate="yes" xml:space="preserve">
          <source>but this will not</source>
          <target state="translated">그러나 이것은하지 않습니다</target>
        </trans-unit>
        <trans-unit id="50607a6413ca39fe7073dd9a3b641d9d68b5acf2" translate="yes" xml:space="preserve">
          <source>but translates into</source>
          <target state="translated">그러나로 번역</target>
        </trans-unit>
        <trans-unit id="d32b03d32cae9215bc5e3eedc3a4a9edf0f113a6" translate="yes" xml:space="preserve">
          <source>but under a French locale</source>
          <target state="translated">그러나 프랑스어 로케일에서</target>
        </trans-unit>
        <trans-unit id="02bc126135ab3f34b2cc7b1c93207acc39efb18e" translate="yes" xml:space="preserve">
          <source>but with &lt;code&gt;extract_delimited&lt;/code&gt; it can be simplified to:</source>
          <target state="translated">그러나 &lt;code&gt;extract_delimited&lt;/code&gt; 를 사용 하면 다음 과 같이 단순화 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5a3caba3b95cb830b6cd3bb3694f24d055d2aa69" translate="yes" xml:space="preserve">
          <source>but you have to say</source>
          <target state="translated">하지만 당신은 말해야</target>
        </trans-unit>
        <trans-unit id="790b666b737305903b34914bd264529abbf92746" translate="yes" xml:space="preserve">
          <source>but you should be aware that in this form, the &lt;code&gt;..&lt;/code&gt; operator creates a list of all integers in the range, which can take a lot of memory for large ranges. However, the problem does not occur when using &lt;code&gt;..&lt;/code&gt; within a &lt;code&gt;for&lt;/code&gt; loop, because in that case the range operator is optimized to</source>
          <target state="translated">그러나이 형식에서 &lt;code&gt;..&lt;/code&gt; 연산자는 범위 내의 모든 정수 목록을 작성하므로 넓은 범위의 경우 많은 메모리를 차지할 수 있습니다. 그러나 &lt;code&gt;for&lt;/code&gt; 루프 내에서 &lt;code&gt;..&lt;/code&gt; 를 사용할 때 문제가 발생하지 않습니다 . 이 경우 범위 연산자는</target>
        </trans-unit>
        <trans-unit id="920f4cbc6f3b3ccfd1fe8ce2d2eca6336d87c327" translate="yes" xml:space="preserve">
          <source>but your system might have more.</source>
          <target state="translated">그러나 시스템에 더 많은 것이있을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="0a0df778ce40c92b4130fd3cc1bc732e0dcd8097" translate="yes" xml:space="preserve">
          <source>but your version of perl is compiled without perlio, and this form of open is not supported.</source>
          <target state="translated">그러나 perl 버전은 perlio없이 컴파일되며이 형식의 개방은 지원되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="f6cf3e61369618c4d062082f34a8e4eb6950efaa" translate="yes" xml:space="preserve">
          <source>but, because &lt;code&gt;&quot;*&quot;&lt;/code&gt; is higher precedence than named operators:</source>
          <target state="translated">그러나 &lt;code&gt;&quot;*&quot;&lt;/code&gt; 가 명명 된 연산자보다 우선 순위가 높기 때문에 :</target>
        </trans-unit>
        <trans-unit id="408158643ed564c72fa0921826f8294d71ccbf7c" translate="yes" xml:space="preserve">
          <source>by</source>
          <target state="translated">by</target>
        </trans-unit>
        <trans-unit id="b562123d16a87ef1dd2d50e459ddac28857a828c" translate="yes" xml:space="preserve">
          <source>by &lt;code&gt;BEGIN{ $/ = &quot;\0digits&quot;; }&lt;/code&gt; .</source>
          <target state="translated">에 의해 &lt;code&gt;BEGIN{ $/ = &quot;\0digits&quot;; }&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="5d7f03736d7aee983a0f27b66b3cd7bd23ae58bf" translate="yes" xml:space="preserve">
          <source>by Andreas Koenig &amp;lt;&lt;code&gt;k@anna.in-berlin.de&lt;/code&gt; &amp;gt; and Tim Bunce.</source>
          <target state="translated">Andreas Koenig &amp;lt; &lt;code&gt;k@anna.in-berlin.de&lt;/code&gt; &amp;gt; 및 Tim Bunce.</target>
        </trans-unit>
        <trans-unit id="58b9be2f90b4b5e0f72bcc70fc011d637b555279" translate="yes" xml:space="preserve">
          <source>by Jeffrey Friedl (</source>
          <target state="translated">제프리 프리들 (Jeffrey Friedl)</target>
        </trans-unit>
        <trans-unit id="b7d25fddceaf2bede4f0c1508fc9756858ff0f82" translate="yes" xml:space="preserve">
          <source>by Jeffrey Friedl (published by O'Reilly, ISBN 1556592-257-3).</source>
          <target state="translated">Jeffrey Friedl (O'Reilly 출판, ISBN 1556592-257-3).</target>
        </trans-unit>
        <trans-unit id="01bcdce954a667cee1cea208aa989626d65f08eb" translate="yes" xml:space="preserve">
          <source>by Jeffrey Friedl gives a wonderful discussion of this and other efficiency issues.</source>
          <target state="translated">Jeffrey Friedl이이 문제와 다른 효율성 문제에 대해 멋진 토론을합니다.</target>
        </trans-unit>
        <trans-unit id="292b840af5da5995eb868afee859b139a4198e22" translate="yes" xml:space="preserve">
          <source>by Jeffrey Friedl, published by O'Reilly and Associates.</source>
          <target state="translated">O'Reilly and Associates가 출판 한 Jeffrey Friedl</target>
        </trans-unit>
        <trans-unit id="a030535d3a4b6473025f29bd648142b0bfd7bded" translate="yes" xml:space="preserve">
          <source>by Jeffrey Friedl. He explains how the regular expressions engine works and why some patterns are surprisingly inefficient. Once you understand how perl applies regular expressions, you can tune them for individual situations.</source>
          <target state="translated">제프리 프리들 그는 정규 표현식 엔진의 작동 방식과 일부 패턴이 놀랍도록 비효율적 인 이유를 설명합니다. 펄이 정규 표현식을 적용하는 방법을 이해하면 개별 상황에 맞게 조정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="aa3b42830418e798c60825381fd17fa38f07279b" translate="yes" xml:space="preserve">
          <source>by W. Richard Stevens (published by Prentice-Hall). Most books on networking address the subject from the perspective of a C programmer; translation to Perl is left as an exercise for the reader.</source>
          <target state="translated">W. Richard Stevens (Prentice-Hall 출판). 네트워킹에 관한 대부분의 책은 C 프로그래머의 관점에서 주제를 다루고 있습니다. Perl 로의 번역은 독자를위한 연습으로 남아 있습니다.</target>
        </trans-unit>
        <trans-unit id="aa39ccc1df65d58c55c7ad4408539c603519c108" translate="yes" xml:space="preserve">
          <source>by Yves Orton, 2006.</source>
          <target state="translated">이브 오튼, 2006.</target>
        </trans-unit>
        <trans-unit id="3e3c60c9a79bc01108d963cab52a79402baacea3" translate="yes" xml:space="preserve">
          <source>by compiling using gcc with the flag &lt;code&gt;-pg&lt;/code&gt; . Either edit</source>
          <target state="translated">&lt;code&gt;-pg&lt;/code&gt; 플래그로 gcc를 사용하여 컴파일 합니다. 편집하다</target>
        </trans-unit>
        <trans-unit id="f5d400126bc4b2b2a0be4cb6f504f4a728dab5e6" translate="yes" xml:space="preserve">
          <source>by compiling using gcc with the flags &lt;code&gt;-fprofile-arcs -ftest-coverage&lt;/code&gt; . Either edit</source>
          <target state="translated">플래그 &lt;code&gt;-fprofile-arcs -ftest-coverage&lt;/code&gt; 와 함께 gcc를 사용하여 컴파일 합니다. 편집하다</target>
        </trans-unit>
        <trans-unit id="ed704a971a09b89d0355af9ed7f590b8d16afef1" translate="yes" xml:space="preserve">
          <source>by default</source>
          <target state="translated">기본적으로</target>
        </trans-unit>
        <trans-unit id="4e935cb2d694a730a179e0fab14594701e7b71b6" translate="yes" xml:space="preserve">
          <source>by default the object is constructed as if C</source>
          <target state="translated">기본적으로 객체는 C처럼 구성됩니다.</target>
        </trans-unit>
        <trans-unit id="76e18cd7b5438dfa50021afe47ddf6798a2380ea" translate="yes" xml:space="preserve">
          <source>by default, and this file is read by the &lt;code&gt;dprofpp&lt;/code&gt; program, which is already installed as part of the &lt;code&gt;Devel::DProf&lt;/code&gt; distribution. If you call &lt;code&gt;dprofpp&lt;/code&gt; with no options, it will read the</source>
          <target state="translated">기본적으로이 파일은 &lt;code&gt;dprofpp&lt;/code&gt; 프로그램에서 읽습니다.이 프로그램은 이미 &lt;code&gt;Devel::DProf&lt;/code&gt; 배포의 일부로 설치되어 있습니다. 옵션없이 &lt;code&gt;dprofpp&lt;/code&gt; 를 호출 하면</target>
        </trans-unit>
        <trans-unit id="ab0866dc7f2a672bc7b6be003ac55641a8c5066d" translate="yes" xml:space="preserve">
          <source>by default. Human readable reports can be generated from here by using the supplied &lt;code&gt;nytprofhtml&lt;/code&gt; (HTML output) and &lt;code&gt;nytprofcsv&lt;/code&gt; (CSV output) programs. We've used the Unix system &lt;code&gt;html2text&lt;/code&gt; utility to convert the</source>
          <target state="translated">기본적으로. 제공된 &lt;code&gt;nytprofhtml&lt;/code&gt; (HTML 출력) 및 &lt;code&gt;nytprofcsv&lt;/code&gt; (CSV 출력) 프로그램 을 사용하여 여기에서 사람이 읽을 수있는 보고서를 생성 할 수 있습니다 . 우리는 유닉스 시스템 &lt;code&gt;html2text&lt;/code&gt; 유틸리티를 사용하여</target>
        </trans-unit>
        <trans-unit id="76d6fc20656e3c76019aabc723d52e70642bd78d" translate="yes" xml:space="preserve">
          <source>by endianness</source>
          <target state="translated">엔디안으로</target>
        </trans-unit>
        <trans-unit id="b98507aaeb9a1c77075f94408b252b18efe599de" translate="yes" xml:space="preserve">
          <source>by just using the name of the program).</source>
          <target state="translated">프로그램 이름을 사용하여).</target>
        </trans-unit>
        <trans-unit id="2c5bb516b1987dabf813c98e4515eda07d81aaa5" translate="yes" xml:space="preserve">
          <source>by name</source>
          <target state="translated">이름으로</target>
        </trans-unit>
        <trans-unit id="5e3f04f999831235b9b402a22b7e7de4ce80d90f" translate="yes" xml:space="preserve">
          <source>by size</source>
          <target state="translated">크기별</target>
        </trans-unit>
        <trans-unit id="d5d90792858f3b6ce0d3e628c5cd82bf536aa2e2" translate="yes" xml:space="preserve">
          <source>by the DynaLoader when the shared object is loaded. See BSLOADLIBS below.</source>
          <target state="translated">공유 객체가로드 될 때 DynaLoader에 의해 아래 BSLOADLIBS를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="ac25d943ca16593ccd5b638578371920d418f826" translate="yes" xml:space="preserve">
          <source>by the Perl interpreter itself.</source>
          <target state="translated">Perl 통역사 자체에 의해.</target>
        </trans-unit>
        <trans-unit id="c2a3a0641c2dba021dc10a286962de22e15df633" translate="yes" xml:space="preserve">
          <source>by the Perl interpreter itself. This attribute's default value is &lt;b&gt;TRUE&lt;/b&gt;. If you want to search only specific directories, set $self-&amp;gt;inc(0) before calling $inc-&amp;gt;survey or $inc-&amp;gt;find.</source>
          <target state="translated">Perl 통역사 자체에 의해. 이 속성의 기본값은 &lt;b&gt;TRUE&lt;/b&gt; 입니다. 특정 디렉토리 만 검색하려면 $ inc-&amp;gt; survey 또는 $ inc-&amp;gt; find를 호출하기 전에 $ self-&amp;gt; inc (0)을 설정하십시오.</target>
        </trans-unit>
        <trans-unit id="1899511ea754deb578535a8d92e9165fcbc88e82" translate="yes" xml:space="preserve">
          <source>by the ld command when the perl binary is linked with the extension library. See EXTRALIBS below.</source>
          <target state="translated">perl 바이너리가 확장 라이브러리와 링크 될 때 ld 명령에 의해. 아래 EXTRALIBS를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="b5f079545f5d4621415bdb75f7dcd595e58fae02" translate="yes" xml:space="preserve">
          <source>by the ld command when the shared object is built/linked. See LDLOADLIBS below.</source>
          <target state="translated">공유 객체가 빌드 / 링크 될 때 ld 명령에 의해. 아래의 LDLOADLIBS를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="fb53580843b764dd08d059a4ffde7b32707736ab" translate="yes" xml:space="preserve">
          <source>by the main thread (thread ID = 0) of a script. Therefore, setting up signal handlers in threads for purposes other than &lt;a href=&quot;#THREAD-SIGNALLING&quot;&gt;THREAD SIGNALLING&lt;/a&gt; as documented above will not accomplish what is intended.</source>
          <target state="translated">스크립트의 메인 스레드 (스레드 ID = 0)에 의해 따라서 위에서 설명한 &lt;a href=&quot;#THREAD-SIGNALLING&quot;&gt;THREAD SIGNALING&lt;/a&gt; 이외의 목적으로 스레드에서 신호 처리기를 설정 하면 의도 한 것을 달성 할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="08b3b402ddb7fb46a261bf00b77d547af5513e6c" translate="yes" xml:space="preserve">
          <source>by their very definition. It is of course possible to write a nearly instantaneous program, but it's not going to do very much, here's a very efficient one:</source>
          <target state="translated">그들의 정의에 의해. 물론 거의 즉각적인 프로그램을 작성하는 것도 가능하지만 그다지 많은 일을하지는 않을 것입니다. 여기에는 매우 효율적인 프로그램이 있습니다 :</target>
        </trans-unit>
        <trans-unit id="cd5f3427a5b91cc9194daa4a03c9e849e100f09d" translate="yes" xml:space="preserve">
          <source>by this:</source>
          <target state="translated">이로 인해:</target>
        </trans-unit>
        <trans-unit id="90078d2f7170e62d296450a6cf5226698468ce9b" translate="yes" xml:space="preserve">
          <source>by using calls like this one;</source>
          <target state="translated">이와 같은 호출을 사용함으로써;</target>
        </trans-unit>
        <trans-unit id="cda65ed6f996204ff01e4d76e80bf0eb135783c9" translate="yes" xml:space="preserve">
          <source>by-category</source>
          <target state="translated">by-category</target>
        </trans-unit>
        <trans-unit id="52d31c8a6d5578bdb0ba6c7bacaa72d3064e7f98" translate="yes" xml:space="preserve">
          <source>by-module</source>
          <target state="translated">by-module</target>
        </trans-unit>
        <trans-unit id="8cf1783fa99f62ca581f6fe8f3cd66b0f9ab9fc3" translate="yes" xml:space="preserve">
          <source>byte</source>
          <target state="translated">byte</target>
        </trans-unit>
        <trans-unit id="721b9babe5628970cc09024b3a1a9b932d9e0924" translate="yes" xml:space="preserve">
          <source>byte order marks</source>
          <target state="translated">바이트 순서 표시</target>
        </trans-unit>
        <trans-unit id="beb025390e6b44933a6bf16e1bc9c499925f957e" translate="yes" xml:space="preserve">
          <source>byteorder.U</source>
          <target state="translated">byteorder.U</target>
        </trans-unit>
        <trans-unit id="daf529a73101c2be626b99fc6938163e7a27620b" translate="yes" xml:space="preserve">
          <source>bytes</source>
          <target state="translated">bytes</target>
        </trans-unit>
        <trans-unit id="305428c11e612a57e6dca43980d6a15186d3eedd" translate="yes" xml:space="preserve">
          <source>bytes - Perl pragma to force byte semantics rather than character semantics</source>
          <target state="translated">bytes-문자 의미가 아닌 바이트 의미를 강제하는 Perl pragma</target>
        </trans-unit>
        <trans-unit id="74e04eb86371917242f5f42e7825ff63f37fa8b7" translate="yes" xml:space="preserve">
          <source>bytes of data from</source>
          <target state="translated">의 데이터 바이트</target>
        </trans-unit>
        <trans-unit id="a6a3035438f8082d9bbe01b48538b14cd1cebf95" translate="yes" xml:space="preserve">
          <source>bytes of data into</source>
          <target state="translated">바이트의 데이터</target>
        </trans-unit>
        <trans-unit id="d285f82774e0d86e76e8e37aedf166837530e229" translate="yes" xml:space="preserve">
          <source>bytes of the character. The UTF8 flag is turned off. Returns nothing.</source>
          <target state="translated">문자의 바이트 UTF8 플래그가 꺼져 있습니다. 아무것도 반환하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="a8d7a1f72563dfcee3b9751f0008a7ef3b69a283" translate="yes" xml:space="preserve">
          <source>bytes::substr() does not work as an lvalue().</source>
          <target state="translated">bytes :: substr ()은 lvalue ()로 작동하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="18966dcea477ed087e87037c4255cd180be7d19e" translate="yes" xml:space="preserve">
          <source>bzip2</source>
          <target state="translated">bzip2</target>
        </trans-unit>
        <trans-unit id="8dddd252e4acf3054b159272da897404d0ef9a10" translate="yes" xml:space="preserve">
          <source>bzip2 $input_filename_or_reference =&amp;gt; $output_filename_or_reference [, OPTS]</source>
          <target state="translated">bzip2 $ input_filename_or_reference =&amp;gt; $ output_filename_or_reference [, OPTS]</target>
        </trans-unit>
        <trans-unit id="84a516841ba77a5b4648de2cd0dfcb30ea46dbb4" translate="yes" xml:space="preserve">
          <source>c</source>
          <target state="translated">c</target>
        </trans-unit>
        <trans-unit id="9bf518bb1d83f8f8b94f6a75e535c0324b999e9e" translate="yes" xml:space="preserve">
          <source>c2ph</source>
          <target state="translated">c2ph</target>
        </trans-unit>
        <trans-unit id="aab64cc4582b2a7ac50ea4d29f8baf504eb3ffd7" translate="yes" xml:space="preserve">
          <source>c2ph, pstruct - Dump C structures as generated from &lt;code&gt;cc -g -S&lt;/code&gt; stabs</source>
          <target state="translated">c2ph, pstruct- &lt;code&gt;cc -g -S&lt;/code&gt; stab 에서 생성 된 C 구조 덤프</target>
        </trans-unit>
        <trans-unit id="ecce20b9ec4855087467bfaecc68195be1813592" translate="yes" xml:space="preserve">
          <source>caches, one for scalar values and one for list values. When your function is called in scalar context, its return value is cached in one hash, and when your function is called in list context, its value is cached in the other hash. You can control the caching behavior of both contexts independently with these options.</source>
          <target state="translated">하나는 스칼라 값이고 다른 하나는리스트 값입니다. 스칼라 컨텍스트에서 함수를 호출하면 반환 값이 한 해시에 캐시되고 함수가 목록 컨텍스트에서 호출되면 해당 값이 다른 해시에 캐시됩니다. 이 옵션을 사용하여 두 컨텍스트의 캐싱 동작을 독립적으로 제어 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="0d68cbf5b8fc5792e2b012765c8d99152d921657" translate="yes" xml:space="preserve">
          <source>calculator indeed.</source>
          <target state="translated">실제로 계산기.</target>
        </trans-unit>
        <trans-unit id="bc8d8647b02deea0ab3e715c220d041ee78cc19d" translate="yes" xml:space="preserve">
          <source>call</source>
          <target state="translated">call</target>
        </trans-unit>
        <trans-unit id="d26793c374d42f2321b52b9ab8c04fd33c02f47c" translate="yes" xml:space="preserve">
          <source>call &lt;code&gt;iota&lt;/code&gt; in scalar context and cache the result, but the &lt;code&gt;SCALAR_CACHE =&amp;gt; 'MERGE'&lt;/code&gt; option says not to do that, but to use the cache list-context value instead. But it cannot return a list of seven elements in a scalar context. In this case &lt;code&gt;$i7&lt;/code&gt; will receive the &lt;b&gt;first element&lt;/b&gt; of the cached list value, namely 7.</source>
          <target state="translated">스칼라 컨텍스트에서 &lt;code&gt;iota&lt;/code&gt; 를 호출 하고 결과를 캐시하지만 &lt;code&gt;SCALAR_CACHE =&amp;gt; 'MERGE'&lt;/code&gt; 옵션은이를 수행하지 말고 대신 캐시 목록 컨텍스트 값을 사용하라는 메시지를 표시합니다. 그러나 스칼라 컨텍스트에서 7 개의 요소 목록을 리턴 할 수 없습니다. 이 경우 &lt;code&gt;$i7&lt;/code&gt; 은 캐시 된 목록 값 의 &lt;b&gt;첫 번째 요소&lt;/b&gt; 인 7을받습니다.</target>
        </trans-unit>
        <trans-unit id="aea66ab9134e8035b60e502b44c9255902019bb8" translate="yes" xml:space="preserve">
          <source>call a method without void context. Use &lt;a href=&quot;autodie&quot;&gt;autodie&lt;/a&gt; instead if you need to be able to disable autodying/Fatal behaviour for a small block of code.</source>
          <target state="translated">빈 공간이없는 메소드를 호출하십시오. 작은 코드 블록에 대해 자동 염색 / 치명적 동작을 비활성화해야하는 경우 대신 &lt;a href=&quot;autodie&quot;&gt;autodie&lt;/a&gt; 를 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="07ee532dfc7a5c9512fdcf2b4ab1a03d4a1d1bd8" translate="yes" xml:space="preserve">
          <source>call an overridden &lt;code&gt;isa&lt;/code&gt; method in any class. Instead, use &lt;code&gt;reftype&lt;/code&gt; from &lt;a href=&quot;scalar/util&quot;&gt;Scalar::Util&lt;/a&gt; for the first case:</source>
          <target state="translated">모든 클래스에서 재정의 된 &lt;code&gt;isa&lt;/code&gt; 메소드를 호출하십시오 . 대신, 사용 &lt;code&gt;reftype&lt;/code&gt; 에서 &lt;a href=&quot;scalar/util&quot;&gt;스칼라 :: 백분율&lt;/a&gt; 첫 번째 경우에 :</target>
        </trans-unit>
        <trans-unit id="0a301a28fa31b59f5762db2f0e4dae07ecf49b7f" translate="yes" xml:space="preserve">
          <source>call in call_Subtract reads:</source>
          <target state="translated">call_Subtract의 호출은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="09af65b77373b270115d65e0cc4152963620d518" translate="yes" xml:space="preserve">
          <source>call them indirectly:</source>
          <target state="translated">간접적으로 호출하십시오.</target>
        </trans-unit>
        <trans-unit id="bea45b65dbd679ba81c088f23290abf3a9afb91e" translate="yes" xml:space="preserve">
          <source>call to &lt;code&gt;filter_read&lt;/code&gt; or &lt;code&gt;filter_read_exact&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;filter_read&lt;/code&gt; 또는 &lt;code&gt;filter_read_exact&lt;/code&gt; 를 호출 하십시오 .</target>
        </trans-unit>
        <trans-unit id="6c949d2de33459ca2d9973d9bf5448c9e6bdb1f6" translate="yes" xml:space="preserve">
          <source>call-back unit so that long doubles can be formatted without loss of precision.</source>
          <target state="translated">콜백 (back-back) 단위로 긴 복식을 정밀도 손실없이 포맷 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="01eeb3a3ce36a45d2ed8b640d6a38cc855a0aea9" translate="yes" xml:space="preserve">
          <source>call.</source>
          <target state="translated">call.</target>
        </trans-unit>
        <trans-unit id="a0a7cf13bc05b8452a04f1e2d381330099f264f0" translate="yes" xml:space="preserve">
          <source>call. For example:</source>
          <target state="translated">요구. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="fa4e53e51ebd0d0df17edd40ee676dc6179cfe87" translate="yes" xml:space="preserve">
          <source>call_*</source>
          <target state="translated">call_*</target>
        </trans-unit>
        <trans-unit id="5558c19f08af12e8462cd902d73078dd2305080f" translate="yes" xml:space="preserve">
          <source>call_AddSubScalar</source>
          <target state="translated">call_AddSubScalar</target>
        </trans-unit>
        <trans-unit id="90ff1a8ade713598c1646d49e8bd8e0ab53cf48c" translate="yes" xml:space="preserve">
          <source>call_AddSubtract</source>
          <target state="translated">call_AddSubtract</target>
        </trans-unit>
        <trans-unit id="2854630a13713d11a8b6885e7f79056447c62688" translate="yes" xml:space="preserve">
          <source>call_LeftString</source>
          <target state="translated">call_LeftString</target>
        </trans-unit>
        <trans-unit id="18631234b2a7bd26d823fa54e3df7188c8e989c8" translate="yes" xml:space="preserve">
          <source>call_Subtract</source>
          <target state="translated">call_Subtract</target>
        </trans-unit>
        <trans-unit id="d4a0b92fad95fc628341a5a87ec98cabb9a02a7d" translate="yes" xml:space="preserve">
          <source>call_argv</source>
          <target state="translated">call_argv</target>
        </trans-unit>
        <trans-unit id="6f635f2379199699013477fde9934d1b25b2ed69" translate="yes" xml:space="preserve">
          <source>call_method</source>
          <target state="translated">call_method</target>
        </trans-unit>
        <trans-unit id="c9b67be4160b43f537f38ed300d8d7d67ad56af8" translate="yes" xml:space="preserve">
          <source>call_pv</source>
          <target state="translated">call_pv</target>
        </trans-unit>
        <trans-unit id="8cecf04d9c1fddec48927de0af20f7d816c7d167" translate="yes" xml:space="preserve">
          <source>call_sv</source>
          <target state="translated">call_sv</target>
        </trans-unit>
        <trans-unit id="b4d5b37bf7a986c138ede89e0806f366b5cb1830" translate="yes" xml:space="preserve">
          <source>callback</source>
          <target state="translated">callback</target>
        </trans-unit>
        <trans-unit id="4e8127df1a4b3dbfb5b327173cfb08b8676ac454" translate="yes" xml:space="preserve">
          <source>callbacks</source>
          <target state="translated">callbacks</target>
        </trans-unit>
        <trans-unit id="5b73d33ca4d0ef4a3df6b67b837e769d4cb0af6e" translate="yes" xml:space="preserve">
          <source>called &lt;code&gt;$some_pack::secret_version&lt;/code&gt; or anything; it's just $secret_version, unqualified and unqualifiable.</source>
          <target state="translated">라는 &lt;code&gt;$some_pack::secret_version&lt;/code&gt; 또는 아무것도; 그것은 단지 $ secret_version이며, 자격이 없으며 자격이 없습니다.</target>
        </trans-unit>
        <trans-unit id="1fb8b294c8dd06c5ddbfda59a1996397e5dff5ee" translate="yes" xml:space="preserve">
          <source>called for &lt;code&gt;=pod&lt;/code&gt; paragraphs.</source>
          <target state="translated">요구 &lt;code&gt;=pod&lt;/code&gt; 단락.</target>
        </trans-unit>
        <trans-unit id="4dca004e14e54a193da4bef6ddcce901570f9219" translate="yes" xml:space="preserve">
          <source>called immediately, and if Perl is using the system's &lt;code&gt;stdio&lt;/code&gt; library that library may restart the &lt;code&gt;&lt;a href=&quot;functions/read&quot;&gt;read&lt;/a&gt;&lt;/code&gt; without returning to Perl to give it a chance to call the %SIG handler. If this happens on your system the solution is to use the &lt;code&gt;:perlio&lt;/code&gt; layer to do IO--at least on those handles that you want to be able to break into with signals. (The &lt;code&gt;:perlio&lt;/code&gt; layer checks the signal flags and calls %SIG handlers before resuming IO operation.)</source>
          <target state="translated">Perl이 시스템의 &lt;code&gt;stdio&lt;/code&gt; 라이브러리를 사용하는 경우 해당 라이브러리는 Perl로 돌아 가지 않고 &lt;code&gt;&lt;a href=&quot;functions/read&quot;&gt;read&lt;/a&gt;&lt;/code&gt; 를 다시 시작 하여 % SIG 핸들러를 호출 할 수 있습니다. 이것이 시스템에서 발생하면 해결책은 &lt;code&gt;:perlio&lt;/code&gt; 레이어 를 사용하여 최소한 신호로 침입 할 수있는 핸들에서 IO를 수행하는 것입니다. ( &lt;code&gt;:perlio&lt;/code&gt; . 층 검사 신호 플래그 및 IO 동작을 재개하기 전에 호출 %의 SIG 핸들러)</target>
        </trans-unit>
        <trans-unit id="14dc69de2a1e6087529f02b62fd2888c90d741d3" translate="yes" xml:space="preserve">
          <source>caller</source>
          <target state="translated">caller</target>
        </trans-unit>
        <trans-unit id="a5f0d61e9b1c1b14054070cd5efad882cc10c593" translate="yes" xml:space="preserve">
          <source>caller EXPR</source>
          <target state="translated">발신자 EXPR</target>
        </trans-unit>
        <trans-unit id="7aba60747c4150b59b47e08abdd47c33cc7a6995" translate="yes" xml:space="preserve">
          <source>caller's scope</source>
          <target state="translated">발신자의 범위</target>
        </trans-unit>
        <trans-unit id="b31614a7ba28b398fab5be5b1f0abace81483c66" translate="yes" xml:space="preserve">
          <source>calling pod2usage, Pod::Usage will fail even on robust platforms. Don't do that. Or use &lt;a href=&quot;../findbin&quot;&gt;FindBin&lt;/a&gt; to locate the script:</source>
          <target state="translated">Pod :: Usage는 pod2usage를 호출하면 강력한 플랫폼에서도 실패합니다. 하지마 또는 &lt;a href=&quot;../findbin&quot;&gt;FindBin&lt;/a&gt; 을 사용 하여 스크립트를 찾으십시오.</target>
        </trans-unit>
        <trans-unit id="51b6cb253fc406fc1b9780eaa1fb645eb82e631d" translate="yes" xml:space="preserve">
          <source>calls</source>
          <target state="translated">calls</target>
        </trans-unit>
        <trans-unit id="4a782bf6f0127a0ab6a9b55b344eb864af06d6d9" translate="yes" xml:space="preserve">
          <source>calls &amp;amp;{&quot;${module}::bootstrap&quot;} to bootstrap the module (actually it uses the function reference returned by dl_install_xsub for speed)</source>
          <target state="translated">&amp;amp; { &quot;$ {module} :: bootstrap&quot;}을 호출하여 모듈을 부트 스트랩합니다 (실제로는 속도를 위해 dl_install_xsub에 의해 리턴 된 함수 참조를 사용함)</target>
        </trans-unit>
        <trans-unit id="8068c49fd178ebbbb1181c7892ff798980347f20" translate="yes" xml:space="preserve">
          <source>calls (e.g., using &lt;code&gt;&lt;a href=&quot;functions/system&quot;&gt;system()&lt;/a&gt;&lt;/code&gt; or back-ticks) made from threads use the environment variable settings from the</source>
          <target state="translated">스레드에서 작성된 호출 (예 : &lt;code&gt;&lt;a href=&quot;functions/system&quot;&gt;system()&lt;/a&gt;&lt;/code&gt; 또는 역 틱 사용)은 환경 변수 설정을 사용합니다.</target>
        </trans-unit>
        <trans-unit id="23927d0aa967922575276101593ab186ac76a894" translate="yes" xml:space="preserve">
          <source>calls dl_find_symbol() for &quot;boot_$module&quot;</source>
          <target state="translated">&quot;boot_ $ module&quot;에 대해 dl_find_symbol ()을 호출합니다.</target>
        </trans-unit>
        <trans-unit id="df5598c9096a42a3629f35c7aa2f39e91fa80505" translate="yes" xml:space="preserve">
          <source>calls dl_install_xsub() to install it as &quot;${module}::bootstrap&quot;</source>
          <target state="translated">dl_install_xsub ()를 호출하여 &quot;$ {module} :: bootstrap&quot;으로 설치</target>
        </trans-unit>
        <trans-unit id="eeddbfb4bab615284264705345a27ee10700ba4b" translate="yes" xml:space="preserve">
          <source>calls dl_load_file() to load the file</source>
          <target state="translated">파일을로드하기 위해 dl_load_file ()을 호출합니다.</target>
        </trans-unit>
        <trans-unit id="60dd082e722533c84eb7e433f3fa4582d921f83b" translate="yes" xml:space="preserve">
          <source>calls dl_load_flags() to determine how to load the file.</source>
          <target state="translated">dl_load_flags ()를 호출하여 파일로드 방법을 결정합니다.</target>
        </trans-unit>
        <trans-unit id="c1e90b552179a525781d61e90b26ebd803e604f3" translate="yes" xml:space="preserve">
          <source>calls dl_undef_symbols() and warns if any symbols are undefined</source>
          <target state="translated">dl_undef_symbols ()를 호출하고 심볼이 정의되지 않은 경우 경고</target>
        </trans-unit>
        <trans-unit id="03b5ee56e23671d3878c7bc1765e42ba79aa3e0b" translate="yes" xml:space="preserve">
          <source>calls like the following</source>
          <target state="translated">다음과 같은 호출</target>
        </trans-unit>
        <trans-unit id="f02e2d24dc9d64bcb7041c2fc782098c29ed69dd" translate="yes" xml:space="preserve">
          <source>calls made by that thread.</source>
          <target state="translated">해당 스레드에 의해 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="2dcbf5bd7246d954454bd3f3804dead54471c5e2" translate="yes" xml:space="preserve">
          <source>calls the Perl subroutine specified by the C string stored in the &lt;code&gt;subname&lt;/code&gt; parameter. It also takes the usual &lt;code&gt;flags&lt;/code&gt; parameter. The final parameter, &lt;code&gt;argv&lt;/code&gt; , consists of a NULL-terminated list of C strings to be passed as parameters to the Perl subroutine. See</source>
          <target state="translated">&lt;code&gt;subname&lt;/code&gt; 매개 변수에 저장된 C 문자열로 지정된 Perl 서브 루틴을 호출합니다 . 일반적인 &lt;code&gt;flags&lt;/code&gt; 매개 변수도 사용합니다. 최종 매개 변수 &lt;code&gt;argv&lt;/code&gt; 는 Perl 서브 루틴에 매개 변수로 전달 될 NULL로 끝나는 C 문자열 목록으로 구성됩니다. 보다</target>
        </trans-unit>
        <trans-unit id="df5b12037f7721d936298a1dbbb871e6381c2da1" translate="yes" xml:space="preserve">
          <source>camel_flea</source>
          <target state="translated">camel_flea</target>
        </trans-unit>
        <trans-unit id="7e9219a0599eae1d9601883f894b4fbe60870586" translate="yes" xml:space="preserve">
          <source>can</source>
          <target state="translated">can</target>
        </trans-unit>
        <trans-unit id="699d91f476fc57b066fa45249291eed227b9fc79" translate="yes" xml:space="preserve">
          <source>can also be &lt;code&gt;I&lt;/code&gt; which is the same as &lt;code&gt;C&lt;/code&gt; but is a special case for dotted uppercase I and dotless lowercase i:</source>
          <target state="translated">&lt;code&gt;C&lt;/code&gt; 와 동일 하지만 점이있는 대문자 I 및 ​​점이없는 소문자 i에 대한 특별한 경우 인 &lt;code&gt;I&lt;/code&gt; 일 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="e4fb56cea3d4b5b887c8b15f28fd462013d373d9" translate="yes" xml:space="preserve">
          <source>can be &lt;code&gt;@&lt;/code&gt; or &lt;code&gt;%&lt;/code&gt; to specify that the option is list or a hash valued. This is only needed when the destination for the option value is not otherwise specified. It should be omitted when not needed.</source>
          <target state="translated">옵션을 list 또는 해시 값으로 지정하려면 &lt;code&gt;@&lt;/code&gt; 또는 &lt;code&gt;%&lt;/code&gt; 일 수 있습니다 . 옵션 값의 대상이 달리 지정되지 않은 경우에만 필요합니다. 필요하지 않은 경우 생략해야합니다.</target>
        </trans-unit>
        <trans-unit id="24b476e0c0907463a17bc1306e027e47233cc399" translate="yes" xml:space="preserve">
          <source>can be any expression that evaluates to a name accepted by &lt;code&gt;\N{...}&lt;/code&gt; under the &lt;a href=&quot;#DESCRIPTION&quot;&gt;:full option&lt;/a&gt; to &lt;code&gt;charnames&lt;/code&gt; . In addition, any other options for the controlling &lt;code&gt;&quot;use charnames&quot;&lt;/code&gt; in the same scope apply, like &lt;code&gt;:loose&lt;/code&gt; or any &lt;a href=&quot;#DESCRIPTION&quot;&gt;script list, :short option&lt;/a&gt;, or &lt;a href=&quot;#CUSTOM-ALIASES&quot;&gt;custom aliases&lt;/a&gt; you may have defined.</source>
          <target state="translated">표현식이 될 수 수락 이름으로 평가 &lt;code&gt;\N{...}&lt;/code&gt; 세 이하 &lt;a href=&quot;#DESCRIPTION&quot;&gt;: 풀 옵션&lt;/a&gt; 에 &lt;code&gt;charnames&lt;/code&gt; . 또한 동일한 범위에서 &lt;code&gt;&quot;use charnames&quot;&lt;/code&gt; 을 제어하기위한 다른 옵션 ( 예 &lt;code&gt;:loose&lt;/code&gt; 또는 &lt;a href=&quot;#DESCRIPTION&quot;&gt;스크립트 목록, : short 옵션&lt;/a&gt; 또는 &lt;a href=&quot;#CUSTOM-ALIASES&quot;&gt;사용자 정의 별칭)&lt;/a&gt; 이 적용됩니다.</target>
        </trans-unit>
        <trans-unit id="8b34e29f857c70f78af80d100b29730e6cdc1149" translate="yes" xml:space="preserve">
          <source>can be any value which is valid as an assignment to an element of &lt;code&gt;%SIG&lt;/code&gt; . See &lt;a href=&quot;perlvar&quot;&gt;perlvar&lt;/a&gt; for examples of handler functions.</source>
          <target state="translated">&lt;code&gt;%SIG&lt;/code&gt; 의 요소에 대한 지정으로 유효한 값이 될 수 있습니다 . 핸들러 함수의 예는 &lt;a href=&quot;perlvar&quot;&gt;perlvar&lt;/a&gt; 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="461c0b19fe19c96b45408c038271b2fb35f66553" translate="yes" xml:space="preserve">
          <source>can be compressed with &lt;code&gt;/c:max&lt;/code&gt; (the bug only appears when there is a fixup in the last 6 bytes of a page (?); since the tiny executables are much smaller than a page, the bug will not hit). Do not compress &lt;code&gt;perl_.exe&lt;/code&gt; - it would not work under DOS.</source>
          <target state="translated">&lt;code&gt;/c:max&lt;/code&gt; 로 압축 할 수 있습니다 (버그는 페이지의 마지막 6 바이트에 수정이있을 때만 나타납니다 (?). 작은 실행 파일이 페이지보다 훨씬 작기 때문에 버그가 발생하지 않습니다). &lt;code&gt;perl_.exe&lt;/code&gt; 를 압축하지 마십시오 . DOS에서는 작동하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="446662c59650e49f63dcfb6d7d27d374899b2abe" translate="yes" xml:space="preserve">
          <source>can be constructed using &lt;code&gt;pod2latex&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;pod2latex&lt;/code&gt; 를 사용하여 구성 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="794d8b0a9b686ba34ee696408ef6df66c3a413de" translate="yes" xml:space="preserve">
          <source>can be either a canonical name or an alias. For encoding names and aliases, see &lt;a href=&quot;#Defining-Aliases&quot;&gt;Defining Aliases&lt;/a&gt;. For CHECK, see &lt;a href=&quot;#Handling-Malformed-Data&quot;&gt;Handling Malformed Data&lt;/a&gt;.</source>
          <target state="translated">정식 이름 또는 별칭 일 수 있습니다. 인코딩 이름 및 별명은 별명 &lt;a href=&quot;#Defining-Aliases&quot;&gt;정의를&lt;/a&gt; 참조하십시오 . 점검은 &lt;a href=&quot;#Handling-Malformed-Data&quot;&gt;조작 된 데이터 처리를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="8fd5395b7f9e578475974e9b86e078fb0ec61ac4" translate="yes" xml:space="preserve">
          <source>can be either a canonical name or an alias. For encoding names and aliases, see &lt;a href=&quot;#Defining-Aliases&quot;&gt;Defining Aliases&lt;/a&gt;; for</source>
          <target state="translated">정식 이름 또는 별칭 일 수 있습니다. 인코딩 이름 및 별명은 별명 &lt;a href=&quot;#Defining-Aliases&quot;&gt;정의를&lt;/a&gt; 참조하십시오 . ...에 대한</target>
        </trans-unit>
        <trans-unit id="e77ae9195619436cf623136bc0de83a787a047da" translate="yes" xml:space="preserve">
          <source>can be misparsed by pre-5.10.0 Perls as a non-terminated search pattern.</source>
          <target state="translated">종료되지 않은 검색 패턴으로 5.10.0 이전 Perls에 의해 잘못 구문 분석 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="102e5cd9960ccd33f4c8886eae28cc9c5d186cd5" translate="yes" xml:space="preserve">
          <source>can be represented by any of the strings &quot;Y&quot;, &quot;Yes&quot;, &quot;T&quot;, or &quot;True&quot;; and the General Category &quot;Punctuation&quot; by that string, or &quot;Punct&quot;, or simply &quot;P&quot;.</source>
          <target state="translated">&quot;Y&quot;, &quot;Yes&quot;, &quot;T&quot;또는 &quot;True&quot;문자열 중 하나로 표시 될 수 있습니다. 해당 문자열 또는 &quot;Punct&quot;또는 &quot;P&quot;로 일반 범주 &quot;Punctuation&quot;이 있습니다.</target>
        </trans-unit>
        <trans-unit id="ab1e1922e94c24432c2394888ae6becca02bff46" translate="yes" xml:space="preserve">
          <source>can be rewritten as the much more efficient</source>
          <target state="translated">훨씬 더 효율적으로 다시 쓸 수 있습니다</target>
        </trans-unit>
        <trans-unit id="6980df54f269ebb5f12cf9f66876a22b962b6463" translate="yes" xml:space="preserve">
          <source>can be specified as either a POSIX termios/SYSV termio speeds (where 9600 equals 9600) or an old DSD-style speed ( where 13 equals 9600).</source>
          <target state="translated">POSIX termios / SYSV termio speeds (9600은 9600) 또는 오래된 DSD 스타일 속도 (13은 9600)로 지정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2a0b30925918e47087c2c3fd8ec3511807439d9a" translate="yes" xml:space="preserve">
          <source>can be supplied as true to force the loop body to be enclosed in its own scope.</source>
          <target state="translated">루프 본체를 자체 범위로 묶으려면 true로 제공 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2ec6c241c08eaa0e7cd65d17fc2d47fc2d922f6d" translate="yes" xml:space="preserve">
          <source>can be used any place a string (char *) is required:</source>
          <target state="translated">문자열 (char *)이 필요한 어느 곳에서나 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d8acc4b4615821e09fe517afa1e537f21aba062d" translate="yes" xml:space="preserve">
          <source>can be used as an alias for</source>
          <target state="translated">에 대한 별칭으로 사용할 수 있습니다</target>
        </trans-unit>
        <trans-unit id="c83ef2aed21667cc47266aebbf22a19737c73278" translate="yes" xml:space="preserve">
          <source>can be used to initialize a new $x with the value of the old $x, and the expression</source>
          <target state="translated">이전 $ x의 값과 표현식으로 새로운 $ x를 초기화하는 데 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="32fde68489fc1913d62a482e299a8d35e0bda2c3" translate="yes" xml:space="preserve">
          <source>can be used to pass parameters to the methods which implement that part of the Makefile. Parameters are specified as a hash ref but are passed to the method as a hash.</source>
          <target state="translated">Makefile의 해당 부분을 구현하는 메소드에 매개 변수를 전달하는 데 사용할 수 있습니다. 매개 변수는 해시 참조로 지정되지만 해시로 메소드에 전달됩니다.</target>
        </trans-unit>
        <trans-unit id="e020f4df52e0881b17e0bbdbefc5b62b50ac0eaa" translate="yes" xml:space="preserve">
          <source>can be used to test the locales on your system. Setting the environment variable &lt;code&gt;PERL_DEBUG_FULL_TEST&lt;/code&gt; to 1 will cause it to output detailed results. For example, on Linux, you could say</source>
          <target state="translated">시스템의 로케일을 테스트하는 데 사용할 수 있습니다. 환경 변수 &lt;code&gt;PERL_DEBUG_FULL_TEST&lt;/code&gt; 를 1로 설정하면 자세한 결과가 출력됩니다. 예를 들어 Linux에서는 다음과 같이 말할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ec38106a7a2c4aeab519526f1fc64d639439ebe7" translate="yes" xml:space="preserve">
          <source>can now be called via the</source>
          <target state="translated">통해 통해 호출 할 수 있습니다</target>
        </trans-unit>
        <trans-unit id="073fc766b5f28ba9a5e826b65821aea6ad51da11" translate="yes" xml:space="preserve">
          <source>can refer either to a &quot;=head</source>
          <target state="translated">&quot;= 헤드를 참조 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f3e4c81c1862fa7e83f6209d035bc6b6a4c37811" translate="yes" xml:space="preserve">
          <source>can tell if it has been sourced already.</source>
          <target state="translated">이미 공급되었는지 알 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5bac399344eb2e104a9bc2cee9e2a722464b5047" translate="yes" xml:space="preserve">
          <source>can't</source>
          <target state="translated">can't</target>
        </trans-unit>
        <trans-unit id="98058934126afcffdf3e1dca698b1e5933052270" translate="yes" xml:space="preserve">
          <source>can_dep_space</source>
          <target state="translated">can_dep_space</target>
        </trans-unit>
        <trans-unit id="f1d8c600ccae6e37aa7bd1365c835614b2fdb93f" translate="yes" xml:space="preserve">
          <source>can_load_xs</source>
          <target state="translated">can_load_xs</target>
        </trans-unit>
        <trans-unit id="9b48ac28ef2fa55ed9118eab541eb96b568c95c9" translate="yes" xml:space="preserve">
          <source>can_redirect_error</source>
          <target state="translated">can_redirect_error</target>
        </trans-unit>
        <trans-unit id="60f8214968771a1ddbf7e4ae68c3192535834642" translate="yes" xml:space="preserve">
          <source>can_run</source>
          <target state="translated">can_run</target>
        </trans-unit>
        <trans-unit id="0ec09fd5087f20f8f1487c0620fa4aae9bf6bd67" translate="yes" xml:space="preserve">
          <source>cancelling</source>
          <target state="translated">cancelling</target>
        </trans-unit>
        <trans-unit id="6ef80072f39071d4118a6e7890e209d4dd07e504" translate="yes" xml:space="preserve">
          <source>cannot</source>
          <target state="translated">cannot</target>
        </trans-unit>
        <trans-unit id="04f7fc0aca9ad2b7aa0a289811be4f44339c3fa2" translate="yes" xml:space="preserve">
          <source>cannot be computed for all arguments because that would mean dividing by zero or taking logarithm of zero. These situations cause fatal runtime errors looking like this</source>
          <target state="translated">0으로 나누거나 로그를 0으로하는 것을 의미하므로 모든 인수에 대해 계산할 수 없습니다. 이러한 상황은 다음과 같은 치명적인 런타임 오류를 발생시킵니다</target>
        </trans-unit>
        <trans-unit id="07567c7d826aa63adc1a5eeccb8e1d221eb1a7bd" translate="yes" xml:space="preserve">
          <source>cannot be included, use</source>
          <target state="translated">포함 할 수 없습니다</target>
        </trans-unit>
        <trans-unit id="8204e50dcc76473893509dee81c209dd37748814" translate="yes" xml:space="preserve">
          <source>cannot be started directly using the above API. One needs a way to surround the doublequotes in some other quoting construction, necessarily having an extra non-Unixish shell in between.</source>
          <target state="translated">위 API를 사용하여 직접 시작할 수 없습니다. 다른 인용 구조에서 이중 인용 부호를 둘러싸는 방법이 필요하며, 그 사이에 여분의 비 유닉스 쉘이 있어야합니다.</target>
        </trans-unit>
        <trans-unit id="d6baf2d107957d5d2e553bf06c6534a12bcb1fc9" translate="yes" xml:space="preserve">
          <source>cannot find the needed</source>
          <target state="translated">필요한 것을 찾을 수 없습니다</target>
        </trans-unit>
        <trans-unit id="433ee83dd6e407f89126bb331d94555ce0d19f8b" translate="yes" xml:space="preserve">
          <source>cannot lead to &lt;code&gt;$b&lt;/code&gt; 's implementation of &lt;code&gt;*=&lt;/code&gt; being called, even if &lt;code&gt;$a&lt;/code&gt; is a scalar. (It can, however, generate a call to &lt;code&gt;$b&lt;/code&gt; 's method for &lt;code&gt;*&lt;/code&gt; ).</source>
          <target state="translated">&lt;code&gt;$a&lt;/code&gt; 가 스칼라 인 경우에도 &lt;code&gt;$b&lt;/code&gt; 의 &lt;code&gt;*=&lt;/code&gt; 구현을 호출 할 수 없습니다 . 그러나 &lt;code&gt;*&lt;/code&gt; 에 대한 &lt;code&gt;$b&lt;/code&gt; 의 메소드에 대한 호출을 생성 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="865f1ff7a475134380e8c1ade9c9257a3b2d3d4b" translate="yes" xml:space="preserve">
          <source>capabilities, such as the less program on Unix.</source>
          <target state="translated">유닉스에서 적은 프로그램과 같은 기능.</target>
        </trans-unit>
        <trans-unit id="24d36117a06589995877d65c61dd6ec645ccc49e" translate="yes" xml:space="preserve">
          <source>capabilities:</source>
          <target state="translated">capabilities:</target>
        </trans-unit>
        <trans-unit id="cf3298ba24c6c4e554b7f8b9a3569ba924ef42f8" translate="yes" xml:space="preserve">
          <source>capturing groups, or else</source>
          <target state="translated">캡처 그룹 또는 기타</target>
        </trans-unit>
        <trans-unit id="27da055de62be5ea00a18b05686dc722ef504503" translate="yes" xml:space="preserve">
          <source>capturing parentheses will not be penalized. So avoid &lt;code&gt;$&amp;amp;&lt;/code&gt; , &lt;code&gt;$'&lt;/code&gt; , and &lt;code&gt;$`&lt;/code&gt; if you can, but if you can't (and some algorithms really appreciate them), once you've used them once, use them at will, because you've already paid the price.</source>
          <target state="translated">캡처 괄호는 처벌되지 않습니다. 따라서 가능하면 &lt;code&gt;$&amp;amp;&lt;/code&gt; , &lt;code&gt;$'&lt;/code&gt; 및 &lt;code&gt;$`&lt;/code&gt; 를 피 하십시오.하지만 할 수 없다면 (그리고 일부 알고리즘은 정말로 감사합니다), 일단 사용하면 마음대로 사용하십시오. 가격.</target>
        </trans-unit>
        <trans-unit id="4fecdfe9582b11c15b0bff91598fe22c64541102" translate="yes" xml:space="preserve">
          <source>careful with this routine, as it short-circuits some of Perl's fundamental security features. XS module authors should not use this function unless they fully understand all the implications of unconditionally untainting the value. Untainting should be done in the standard perl fashion, via a carefully crafted regexp, rather than directly untainting variables.</source>
          <target state="translated">Perl의 기본 보안 기능 중 일부를 단락 시키므로이 루틴에주의하십시오. XS 모듈 작성자는 무조건 값을 유지하는 모든 의미를 완전히 이해하지 않는 한이 기능을 사용하지 않아야합니다. 오염 제거는 변수를 직접 보존하는 대신 신중하게 조작 된 정규식을 통해 표준 펄 방식으로 수행해야합니다.</target>
        </trans-unit>
        <trans-unit id="acfdc4b2f9d00e51d0b86829e77cfae27b4f24d2" translate="yes" xml:space="preserve">
          <source>case 2:</source>
          <target state="translated">사례 2 :</target>
        </trans-unit>
        <trans-unit id="16c71304ae30f71d8ffe8067ff4329c77039c916" translate="yes" xml:space="preserve">
          <source>casey@geeknest.com</source>
          <target state="translated">casey@geeknest.com</target>
        </trans-unit>
        <trans-unit id="9d989e8d27dc9e0ec3389fc855f142c3d40f0c50" translate="yes" xml:space="preserve">
          <source>cat</source>
          <target state="translated">cat</target>
        </trans-unit>
        <trans-unit id="b7a1dd9696988ff944977d50eecb627d1171afd1" translate="yes" xml:space="preserve">
          <source>cat -v</source>
          <target state="translated">고양이 -v</target>
        </trans-unit>
        <trans-unit id="b8af4ddb2fd9d33e56485a48ce24f1383577c83a" translate="yes" xml:space="preserve">
          <source>catfile</source>
          <target state="translated">catfile</target>
        </trans-unit>
        <trans-unit id="8b5241c71bbdffecbb391eeb3bd478542f088494" translate="yes" xml:space="preserve">
          <source>caught</source>
          <target state="translated">caught</target>
        </trans-unit>
        <trans-unit id="ce39e901b8f283aefa4925c1fe1b0dac3ebd0891" translate="yes" xml:space="preserve">
          <source>cause the strings &lt;code&gt;'my,ears,are,bleeding'&lt;/code&gt; and &lt;code&gt;'qw/my ears are bleeding'&lt;/code&gt; respectively to be passed as the data argument.</source>
          <target state="translated">문자열 &lt;code&gt;'my,ears,are,bleeding'&lt;/code&gt; 및 &lt;code&gt;'qw/my ears are bleeding'&lt;/code&gt; 각각 데이터 인수로 전달되도록합니다.</target>
        </trans-unit>
        <trans-unit id="d8573205b7f8e0810587a0422f70a6051e6cffc4" translate="yes" xml:space="preserve">
          <source>causes Perl to assume the following loop around your program, which makes it iterate over filename arguments somewhat like</source>
          <target state="translated">Perl이 프로그램 주변에서 다음과 같은 루프를 가정하여 파일 이름 인수를 약간 반복합니다.</target>
        </trans-unit>
        <trans-unit id="c70f8ca968cc2b84a2d8f9ff723dd921b777eee6" translate="yes" xml:space="preserve">
          <source>causes Perl to check the syntax of the program and then exit without executing it. Actually, it</source>
          <target state="translated">Perl이 프로그램의 구문을 확인한 다음 실행하지 않고 종료합니다. 실제로, 그것은</target>
        </trans-unit>
        <trans-unit id="7b78a06967eb0fcc80e6215114337d9827b4fb2f" translate="yes" xml:space="preserve">
          <source>causes error like this</source>
          <target state="translated">이와 같은 오류가 발생합니다</target>
        </trans-unit>
        <trans-unit id="088014ee15be0c288a8023edf6654b8083e4a8da" translate="yes" xml:space="preserve">
          <source>causes it to pass &lt;code&gt;[ ['till','ears','are','bleeding'] ]&lt;/code&gt; ; the array reference specified in the data being passed inside the standard array reference indicating successful interpretation.</source>
          <target state="translated">그것이 통과시킨다 &lt;code&gt;[ ['till','ears','are','bleeding'] ]&lt;/code&gt; ; 성공적인 해석을 나타내는 표준 배열 참조 내로 전달되는 데이터에 지정된 배열 참조</target>
        </trans-unit>
        <trans-unit id="b2bf4396d07b4ae05a6896457aa1b58578889201" translate="yes" xml:space="preserve">
          <source>causes it to pass &lt;code&gt;['till','ears','are','bleeding']&lt;/code&gt; as the handler's data argument. While:</source>
          <target state="translated">이렇게 되었 원인 &lt;code&gt;['till','ears','are','bleeding']&lt;/code&gt; 핸들러의 데이터 인수로. 동안:</target>
        </trans-unit>
        <trans-unit id="df8cc3e0e2570acf8b47b8189932aad1db4bc131" translate="yes" xml:space="preserve">
          <source>causes the LoudDecl::Loud handler to be invoked (even if OtherClass also defines a handler for &lt;code&gt;:Loud&lt;/code&gt; attributes).</source>
          <target state="translated">LoudDecl :: Loud 핸들러가 호출되도록합니다 (OtherClass가 &lt;code&gt;:Loud&lt;/code&gt; 속성에 대한 핸들러를 정의하더라도 ).</target>
        </trans-unit>
        <trans-unit id="fb15d695643b39f8fa43791dc77a2c03e35f00b6" translate="yes" xml:space="preserve">
          <source>causes the above handler to be invoked, and passed:</source>
          <target state="translated">위의 핸들러를 호출하고 전달합니다.</target>
        </trans-unit>
        <trans-unit id="252e750ff47e4f26ef1004fd4eb884dc2b37ed2e" translate="yes" xml:space="preserve">
          <source>causes variables, subroutines, formats, and file and directory handles accessible via the identifier &lt;code&gt;richard&lt;/code&gt; also to be accessible via the identifier &lt;code&gt;dick&lt;/code&gt; . If you want to alias only a particular variable or subroutine, assign a reference instead:</source>
          <target state="translated">식별자 &lt;code&gt;richard&lt;/code&gt; 를 통해 액세스 할 수있는 변수, 서브 루틴, 형식 및 파일 및 디렉토리 핸들 이 식별자 &lt;code&gt;dick&lt;/code&gt; 을 통해 액세스 할 수도 있습니다 . 특정 변수 또는 서브 루틴 만 별명을 지정하려면 대신 참조를 지정하십시오.</target>
        </trans-unit>
        <trans-unit id="bdb480de655aa6ec75ca058c849c4faf3c0f75b1" translate="yes" xml:space="preserve">
          <source>cc</source>
          <target state="translated">cc</target>
        </trans-unit>
        <trans-unit id="e12e6002847af51b7fe034f4ae458d7c224ff7eb" translate="yes" xml:space="preserve">
          <source>cc.U</source>
          <target state="translated">cc.U</target>
        </trans-unit>
        <trans-unit id="36c653ca6aa745b9e24d538496bc8b8d0b36922e" translate="yes" xml:space="preserve">
          <source>cc1.exe</source>
          <target state="translated">cc1.exe</target>
        </trans-unit>
        <trans-unit id="6bbfad7f25547b50fdac092afd8fe1321fabc60b" translate="yes" xml:space="preserve">
          <source>ccflags.U</source>
          <target state="translated">ccflags.U</target>
        </trans-unit>
        <trans-unit id="034778198a045c1ed80be271cdd029b76874f6fc" translate="yes" xml:space="preserve">
          <source>cd</source>
          <target state="translated">cd</target>
        </trans-unit>
        <trans-unit id="e992c3182d410b7ac370694b82237ca081ebad2b" translate="yes" xml:space="preserve">
          <source>cd /usr/local/ascii export IO_CONVERSION=NO gunzip &amp;lt; /usr/local/src/perl.tar.gz | pax -r</source>
          <target state="translated">cd / usr / local / ascii 내보내기 IO_CONVERSION = NO gunzip &amp;lt;/usr/local/src/perl.tar.gz | pax -r</target>
        </trans-unit>
        <trans-unit id="f7c8cd0c2b39e0615a3916ddfa03de4480bedc53" translate="yes" xml:space="preserve">
          <source>cd /usr/local/src IO_CONVERSION=YES cp -r /usr/local/ascii/perl5.005_02 ./</source>
          <target state="translated">cd / usr / local / src IO_CONVERSION = YES cp -r /usr/local/ascii/perl5.005_02 ./</target>
        </trans-unit>
        <trans-unit id="02cd8467dc324e9631313e2b2d896d1c32006648" translate="yes" xml:space="preserve">
          <source>ce-helpers/wince-reg.bat</source>
          <target state="translated">ce-helpers/wince-reg.bat</target>
        </trans-unit>
        <trans-unit id="f22c7b71da8e7b91af77c1e966a231ef482b7b4a" translate="yes" xml:space="preserve">
          <source>certain operations will 'upgrade' their calculation and thus the result to the class Foo::Bar. Usually this is used in conjunction with Math::BigFloat:</source>
          <target state="translated">특정 작업은 계산을 '업그레이드'하여 결과를 클래스 Foo :: Bar로 업그레이드합니다. 보통 이것은 Math :: BigFloat와 함께 사용됩니다 :</target>
        </trans-unit>
        <trans-unit id="1a1dc14cbfb80ebee3e6fa16d5973ad2a9773a40" translate="yes" xml:space="preserve">
          <source>cf_email.U</source>
          <target state="translated">cf_email.U</target>
        </trans-unit>
        <trans-unit id="0fee8d38867e35f1baff12ad4f0ab653efd982ee" translate="yes" xml:space="preserve">
          <source>cf_who.U</source>
          <target state="translated">cf_who.U</target>
        </trans-unit>
        <trans-unit id="6edb3b90fe76780aadcce3bd9df636f585dcee65" translate="yes" xml:space="preserve">
          <source>change in a future version!</source>
          <target state="translated">향후 버전에서 변경!</target>
        </trans-unit>
        <trans-unit id="60e81acd41a6237b0da8a4c03b985db0f8ba5dd2" translate="yes" xml:space="preserve">
          <source>change in the future). This means that &lt;code&gt;_initialize&lt;/code&gt; is never called.</source>
          <target state="translated">미래의 변화). 이는 &lt;code&gt;_initialize&lt;/code&gt; 가 호출되지 않음을 의미합니다 .</target>
        </trans-unit>
        <trans-unit id="a993877e0d1e29860d977864aaa31d83906a360e" translate="yes" xml:space="preserve">
          <source>change their distributions, leaving out some parts or including extras. See also &lt;b&gt;dual-lived&lt;/b&gt;.</source>
          <target state="translated">분포를 변경하거나 일부 부품을 제외하거나 추가 부품을 포함합니다. &lt;b&gt;dual-lived&lt;/b&gt; 도 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="57fc90a063f2394662c7d3418550884894dcf3e0" translate="yes" xml:space="preserve">
          <source>change their meanings.)</source>
          <target state="translated">그들의 의미를 바꾸십시오.)</target>
        </trans-unit>
        <trans-unit id="dfa53d2feb524c8b13e38235b2d708f0b72872be" translate="yes" xml:space="preserve">
          <source>changes the &quot;current&quot; drive.</source>
          <target state="translated">&quot;현재&quot;드라이브를 변경합니다.</target>
        </trans-unit>
        <trans-unit id="4484402f1113ed9203c51ce588e25edfdd93e538" translate="yes" xml:space="preserve">
          <source>changing to the extension directory, so it will find your header files OK.</source>
          <target state="translated">확장 디렉토리로 변경하면 헤더 파일을 찾을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f0db3fa401aea04b711d6f1f3630552eaaee8e59" translate="yes" xml:space="preserve">
          <source>character</source>
          <target state="translated">character</target>
        </trans-unit>
        <trans-unit id="1ded623062251337ec9783b4d26ea9bea9b5a46d" translate="yes" xml:space="preserve">
          <source>character (letters, digits, Unicode marks, and connector punctuation (like the underscore)). &lt;code&gt;\d&lt;/code&gt; is a character class that matches any decimal digit, while the character class &lt;code&gt;\s&lt;/code&gt; matches any whitespace character. New in perl 5.10.0 are the classes &lt;code&gt;\h&lt;/code&gt; and &lt;code&gt;\v&lt;/code&gt; which match horizontal and vertical whitespace characters.</source>
          <target state="translated">문자 (문자, 숫자, 유니 코드 표시 및 커넥터 문장 부호 (밑줄과 같은)) &lt;code&gt;\d&lt;/code&gt; 는 십진수와 일치하는 문자 클래스이며 문자 클래스 &lt;code&gt;\s&lt;/code&gt; 는 공백 문자와 일치합니다. perl 5.10.0의 새로운 클래스는 수평 및 수직 공백 문자와 일치하는 &lt;code&gt;\h&lt;/code&gt; 및 &lt;code&gt;\v&lt;/code&gt; 클래스 입니다.</target>
        </trans-unit>
        <trans-unit id="23bb22d8aab24aba9b2f28895b2b23e2a939a85f" translate="yes" xml:space="preserve">
          <source>character class</source>
          <target state="translated">캐릭터 클래스</target>
        </trans-unit>
        <trans-unit id="0e683117d4a032b7836c0342b63f9dfadb190b53" translate="yes" xml:space="preserve">
          <source>character classes, the [] are part of the construct, for example: /[012[:alpha:]345]/. Note that [= =] and [. .] are not currently implemented; they are simply placeholders for future extensions and will cause fatal errors. The &amp;lt;-- HERE shows whereabouts in the regular expression the problem was discovered. See &lt;a href=&quot;perlre&quot;&gt;perlre&lt;/a&gt;.</source>
          <target state="translated">문자 클래스에서 []는 구문의 일부입니다 (예 : / [012 [: alpha :] 345] /). [= =] 및 [. .] 현재 구현되지 않았습니다. 그들은 단순히 미래 확장을위한 자리 표시 자이며 치명적인 오류를 일으킬 것입니다. &amp;lt;-HERE는 정규식에서 문제가 발견 된 위치를 보여줍니다. &lt;a href=&quot;perlre&quot;&gt;perlre를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="87099f64417cf7aa38848c69f3d9125914ae7859" translate="yes" xml:space="preserve">
          <source>character encoding forms</source>
          <target state="translated">문자 인코딩 양식</target>
        </trans-unit>
        <trans-unit id="184c6f197cfb875777fc5d4fa52ebd2117645d1c" translate="yes" xml:space="preserve">
          <source>character escape</source>
          <target state="translated">캐릭터 탈출</target>
        </trans-unit>
        <trans-unit id="1c475cf1886a99e2cccc41c622e3b56b84fd507c" translate="yes" xml:space="preserve">
          <source>character of &lt;code&gt;s1&lt;/code&gt; beyond what was matched. Correspondingly for &lt;code&gt;pe2&lt;/code&gt; and &lt;code&gt;s2&lt;/code&gt; .</source>
          <target state="translated">일치하는 것 이상의 &lt;code&gt;s1&lt;/code&gt; 의 문자 . &lt;code&gt;pe2&lt;/code&gt; 및 &lt;code&gt;s2&lt;/code&gt; 에 해당합니다 .</target>
        </trans-unit>
        <trans-unit id="c135ee977d5bdc1daf24b793a26aa0b0337de240" translate="yes" xml:space="preserve">
          <source>character set is complemented. If the &lt;code&gt;/d&lt;/code&gt; modifier is specified, any characters specified by</source>
          <target state="translated">문자 세트가 보완됩니다. 는 IF &lt;code&gt;/d&lt;/code&gt; 를 수정자가 지정된 모든 문자에 의해 지정</target>
        </trans-unit>
        <trans-unit id="aa908a40ba515918f9d5edbdcad8ebc1fe5c2b42" translate="yes" xml:space="preserve">
          <source>characters</source>
          <target state="translated">characters</target>
        </trans-unit>
        <trans-unit id="beb063d20fe6a9f7acbd87ce84e35c7e78f47b70" translate="yes" xml:space="preserve">
          <source>characters &lt;code&gt;a&lt;/code&gt; at the beginning of string, leaving no &lt;code&gt;a&lt;/code&gt; for &lt;code&gt;ab&lt;/code&gt; to match. In contrast, &lt;code&gt;a*ab&lt;/code&gt; will match the same as &lt;code&gt;a+b&lt;/code&gt; , since the match of the subgroup &lt;code&gt;a*&lt;/code&gt; is influenced by the following group &lt;code&gt;ab&lt;/code&gt; (see &lt;a href=&quot;#Backtracking&quot;&gt;Backtracking&lt;/a&gt;). In particular, &lt;code&gt;a*&lt;/code&gt; inside &lt;code&gt;a*ab&lt;/code&gt; will match fewer characters than a standalone &lt;code&gt;a*&lt;/code&gt; , since this makes the tail match.</source>
          <target state="translated">문자 전혀 남기지 않고 문자열의 시작 부분에서, &lt;code&gt;a&lt;/code&gt; 위한 &lt;code&gt;ab&lt;/code&gt; 일치합니다. 반대로, 하위 그룹 &lt;code&gt;a*&lt;/code&gt; 의 일치 는 다음 그룹 &lt;code&gt;ab&lt;/code&gt; 의 영향을 받기 때문에 &lt;code&gt;a+b&lt;/code&gt; &lt;code&gt;a*ab&lt;/code&gt; 는 a + b 와 동일합니다 ( &lt;a href=&quot;#Backtracking&quot;&gt;역 추적&lt;/a&gt; 참조 ). 특히, &lt;code&gt;a*&lt;/code&gt; &lt;code&gt;a*ab&lt;/code&gt; 내의 a * 는 독립형 &lt;code&gt;a*&lt;/code&gt; 보다 적은 문자 와 일치합니다. 꼬리가 일치하기 때문입니다. &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="51acb16f7fd5365de7328594e8affafe9d165ec2" translate="yes" xml:space="preserve">
          <source>characters. If</source>
          <target state="translated">문자. 만약</target>
        </trans-unit>
        <trans-unit id="28f2a64f07df612f1f5f5fd5915a06de60e6989f" translate="yes" xml:space="preserve">
          <source>characters. There is a single character equivalent, for example, for the sequence &lt;code&gt;LATIN CAPITAL LETTER A&lt;/code&gt; followed by &lt;code&gt;COMBINING ACUTE ACCENT&lt;/code&gt; . It is called &lt;code&gt;LATIN CAPITAL LETTER A WITH
ACUTE&lt;/code&gt; . These precomposed characters are, however, only available for some combinations, and are mainly meant to support round-trip conversions between Unicode and legacy standards (like ISO 8859). Using sequences, as Unicode does, allows for needing fewer basic building blocks (code points) to express many more potential grapheme clusters. To support conversion between equivalent forms, various</source>
          <target state="translated">문자. 예를 들어, &lt;code&gt;LATIN CAPITAL LETTER A&lt;/code&gt; 시퀀스 다음에 &lt;code&gt;COMBINING ACUTE ACCENT&lt;/code&gt; 와 동일한 단일 문자가 있습니다 . 이를 &lt;code&gt;LATIN CAPITAL LETTER A WITH ACUTE&lt;/code&gt; 합니다. 그러나 이러한 사전 구성 문자는 일부 조합에서만 사용할 수 있으며 주로 유니 코드와 레거시 표준 (예 : ISO 8859) 간의 왕복 변환을 지원하기위한 것입니다. 유니 코드처럼 시퀀스를 사용하면 더 많은 잠재적 인 그래 핀 클러스터를 표현하기 위해 더 적은 기본 빌딩 블록 (코드 포인트)이 필요합니다. 등가 양식 간의 변환을 지원하기 위해 다양한</target>
        </trans-unit>
        <trans-unit id="c2769251f72974da1bea54c62a8b8393181a1511" translate="yes" xml:space="preserve">
          <source>charnames</source>
          <target state="translated">charnames</target>
        </trans-unit>
        <trans-unit id="6cbcede204922fe5735b40b4f57a548c0c0b6447" translate="yes" xml:space="preserve">
          <source>charnames - access to Unicode character names and named character sequences; also define character names</source>
          <target state="translated">문자 이름-유니 코드 문자 이름 및 명명 된 문자 시퀀스에 액세스합니다. 또한 캐릭터 이름을 정의</target>
        </trans-unit>
        <trans-unit id="53a445993cbe9ace6d33bc2082c16e72ea889024" translate="yes" xml:space="preserve">
          <source>charnames.pm</source>
          <target state="translated">charnames.pm</target>
        </trans-unit>
        <trans-unit id="6dbb040328cb60636ff254f069ae532bcf9c34dd" translate="yes" xml:space="preserve">
          <source>charnames::string_vianame(</source>
          <target state="translated">charnames::string_vianame(</target>
        </trans-unit>
        <trans-unit id="4d584b131071626c28282572a911c82de405d92a" translate="yes" xml:space="preserve">
          <source>charnames::string_vianame(_name_)</source>
          <target state="translated">charnames::string_vianame(_name_)</target>
        </trans-unit>
        <trans-unit id="f30e5e350eda7aed251c0567e09e916651569637" translate="yes" xml:space="preserve">
          <source>charnames::viacode(</source>
          <target state="translated">charnames::viacode(</target>
        </trans-unit>
        <trans-unit id="d5ec2d618a08f9768571680bfb56871f6a619e67" translate="yes" xml:space="preserve">
          <source>charnames::viacode(_code_)</source>
          <target state="translated">charnames::viacode(_code_)</target>
        </trans-unit>
        <trans-unit id="c2b7829d2bf4d9060031381a2ab3c4936307e478" translate="yes" xml:space="preserve">
          <source>charnames::vianame(</source>
          <target state="translated">charnames::vianame(</target>
        </trans-unit>
        <trans-unit id="256d04480387a6b2d1ba2c8fd73adbaa1f26d432" translate="yes" xml:space="preserve">
          <source>charnames::vianame(_name_)</source>
          <target state="translated">charnames::vianame(_name_)</target>
        </trans-unit>
        <trans-unit id="3e62d330b7d706fa949df3d5e9ea0424f148eb11" translate="yes" xml:space="preserve">
          <source>charsize.U</source>
          <target state="translated">charsize.U</target>
        </trans-unit>
        <trans-unit id="35a84f0024005c618708f5609e5a94e5e4d92db6" translate="yes" xml:space="preserve">
          <source>chat2.pl</source>
          <target state="translated">chat2.pl</target>
        </trans-unit>
        <trans-unit id="8869899ee8011d5ab6098b5e50f006d50dff5fc7" translate="yes" xml:space="preserve">
          <source>chatty</source>
          <target state="translated">chatty</target>
        </trans-unit>
        <trans-unit id="2629bf149086d2faa087c4d7a46d46f75c8e924b" translate="yes" xml:space="preserve">
          <source>chcp(1)</source>
          <target state="translated">chcp(1)</target>
        </trans-unit>
        <trans-unit id="9b7ac455925a9f1c24e2faed07172b8cce5f6b5a" translate="yes" xml:space="preserve">
          <source>chdir</source>
          <target state="translated">chdir</target>
        </trans-unit>
        <trans-unit id="714ab6e630b89f329b1b7cd33765085d3e0f8af3" translate="yes" xml:space="preserve">
          <source>chdir DIRHANDLE</source>
          <target state="translated">chdir DIRHANDLE</target>
        </trans-unit>
        <trans-unit id="f4dc55a464a00a60ebc3a35f5b1254009801a498" translate="yes" xml:space="preserve">
          <source>chdir EXPR</source>
          <target state="translated">chdir EXPR</target>
        </trans-unit>
        <trans-unit id="01cab8f49d14f099f7ec4f8b43b93bd91584a333" translate="yes" xml:space="preserve">
          <source>chdir FILEHANDLE</source>
          <target state="translated">chdir 파일 핸들</target>
        </trans-unit>
        <trans-unit id="21d7d24eb10c88dc964c9ead2a103baa7982275e" translate="yes" xml:space="preserve">
          <source>check the return value from these functions. Even if you are expecting only a particular number of values to be returned from the Perl subroutine, there is nothing to stop someone from doing something unexpected--don't say you haven't been warned.</source>
          <target state="translated">이 기능들에서 반환 값을 확인하십시오. Perl 서브 루틴에서 특정 수의 값만 리턴 될 것으로 예상하더라도 예상치 못한 작업을 수행하는 것을 막을 수있는 것은 없습니다.</target>
        </trans-unit>
        <trans-unit id="f02f809bcf184ddf5eb4ab64a1de11c9bda69112" translate="yes" xml:space="preserve">
          <source>check( \%tmpl, \%args, [$verbose] );</source>
          <target state="translated">check (\ % tmpl, \ % args, [$ verbose]);</target>
        </trans-unit>
        <trans-unit id="8974f44f89948eb6014394185f1a7d817a634988" translate="yes" xml:space="preserve">
          <source>checked for containing only well-formed UTF-8. Do not use this unless you</source>
          <target state="translated">올바른 형식의 UTF-8 만 포함하는지 확인했습니다. 당신이하지 않는 한 이것을 사용하지 마십시오</target>
        </trans-unit>
        <trans-unit id="400368266f7f8e461618b3fe78656107a8a052ca" translate="yes" xml:space="preserve">
          <source>checked_at</source>
          <target state="translated">checked_at</target>
        </trans-unit>
        <trans-unit id="0dd41d48e3f4289d0dbdc4628e88dcc868f6d214" translate="yes" xml:space="preserve">
          <source>checks if all the files within a &lt;code&gt;MANIFEST&lt;/code&gt; in the current directory really do exist. If &lt;code&gt;MANIFEST&lt;/code&gt; and the tree below the current directory are in sync it silently returns an empty list. Otherwise it returns a list of files which are listed in the &lt;code&gt;MANIFEST&lt;/code&gt; but missing from the directory, and by default also outputs these names to STDERR.</source>
          <target state="translated">현재 디렉토리 의 &lt;code&gt;MANIFEST&lt;/code&gt; 내의 모든 파일이 실제로 존재 하는지 확인 합니다. 경우 &lt;code&gt;MANIFEST&lt;/code&gt; 와 현재 디렉토리 아래의 트리가 동기화되어 그것은 자동으로 빈 목록을 반환합니다. 그렇지 않으면 &lt;code&gt;MANIFEST&lt;/code&gt; 에 나열 되었지만 디렉토리에서 누락 된 파일 목록을 리턴하고 기본적으로이 이름을 STDERR로 출력합니다.</target>
        </trans-unit>
        <trans-unit id="d202be8aad13da1f92438d8b7937c8916d90c438" translate="yes" xml:space="preserve">
          <source>checkstr</source>
          <target state="translated">checkstr</target>
        </trans-unit>
        <trans-unit id="0e93069c40111cd62dac2cd02cd71daffdb01cc0" translate="yes" xml:space="preserve">
          <source>child</source>
          <target state="translated">child</target>
        </trans-unit>
        <trans-unit id="793fd19ae07dde0a2238bbe91255c3e0f8040ede" translate="yes" xml:space="preserve">
          <source>chip@fin.uucp</source>
          <target state="translated">chip@fin.uucp</target>
        </trans-unit>
        <trans-unit id="ce1b7c1e7d1b9f2bbb281956ad9dba56ae30dd10" translate="yes" xml:space="preserve">
          <source>chmod</source>
          <target state="translated">chmod</target>
        </trans-unit>
        <trans-unit id="6f334e9a5d18a9e6fad620c5d5feb7ca5c9ca91e" translate="yes" xml:space="preserve">
          <source>chmod LIST</source>
          <target state="translated">chmod 목록</target>
        </trans-unit>
        <trans-unit id="6775b573f38862fd49aea4ec4a987af120199a47" translate="yes" xml:space="preserve">
          <source>chomp</source>
          <target state="translated">chomp</target>
        </trans-unit>
        <trans-unit id="14fe3aa3b351bb70abdaefa315855bec62fe6b23" translate="yes" xml:space="preserve">
          <source>chomp VARIABLE</source>
          <target state="translated">V 가변</target>
        </trans-unit>
        <trans-unit id="f7655cc7fd7fc8d38a728857c81359132ca5f90e" translate="yes" xml:space="preserve">
          <source>chomp( LIST )</source>
          <target state="translated">mp 프 (목록)</target>
        </trans-unit>
        <trans-unit id="0914b71d9a69f732130e136ef20b1f049f4b0707" translate="yes" xml:space="preserve">
          <source>chop</source>
          <target state="translated">chop</target>
        </trans-unit>
        <trans-unit id="d48877c4b876189389e3d56b423aa9d8adf06337" translate="yes" xml:space="preserve">
          <source>chop VARIABLE</source>
          <target state="translated">다채 롭다</target>
        </trans-unit>
        <trans-unit id="023175c3a37e36cc780269b539ded9f00d61cdca" translate="yes" xml:space="preserve">
          <source>chop( LIST )</source>
          <target state="translated">절단 (목록)</target>
        </trans-unit>
        <trans-unit id="f9f4b9a5f607e09de3d3e8274799aecdc429bc1b" translate="yes" xml:space="preserve">
          <source>chown</source>
          <target state="translated">chown</target>
        </trans-unit>
        <trans-unit id="6b4c351cbd67fa757a21b0ee957f6648d69bb53c" translate="yes" xml:space="preserve">
          <source>chown LIST</source>
          <target state="translated">chown LIST</target>
        </trans-unit>
        <trans-unit id="52018ef6a64fdefbf8127ede4f29a9094de1c755" translate="yes" xml:space="preserve">
          <source>chr</source>
          <target state="translated">chr</target>
        </trans-unit>
        <trans-unit id="1a528aa73e431095b3aaf4c5d6c14c4ab4985caf" translate="yes" xml:space="preserve">
          <source>chr NUMBER</source>
          <target state="translated">chr 번호</target>
        </trans-unit>
        <trans-unit id="80fcb88d41205d6e76d6dff653bb3acc664463a8" translate="yes" xml:space="preserve">
          <source>chr(), ord(), substr(), index() and rindex() behave similarly.</source>
          <target state="translated">chr (), ord (), substr (), index () 및 rindex ()는 비슷하게 동작합니다.</target>
        </trans-unit>
        <trans-unit id="43f12e50e08974b895e2ed854996e592cd4c8a47" translate="yes" xml:space="preserve">
          <source>chroot</source>
          <target state="translated">chroot</target>
        </trans-unit>
        <trans-unit id="8bc1f73f42677c7ed6b6c8bcb2ecb8307de7d407" translate="yes" xml:space="preserve">
          <source>chroot FILENAME</source>
          <target state="translated">chroot FILENAME</target>
        </trans-unit>
        <trans-unit id="6c689caf965677e20e4b5b662bd605f6a419ab03" translate="yes" xml:space="preserve">
          <source>ckfun</source>
          <target state="translated">ckfun</target>
        </trans-unit>
        <trans-unit id="c45b8d14b3e1d422fb397e41aba7a7922103cb02" translate="yes" xml:space="preserve">
          <source>ckobj</source>
          <target state="translated">ckobj</target>
        </trans-unit>
        <trans-unit id="8d767bf5b72373d12f0efd4406677e9ed076f592" translate="yes" xml:space="preserve">
          <source>class</source>
          <target state="translated">class</target>
        </trans-unit>
        <trans-unit id="e8954076dd543ae7c54252674b562258ca9ac2cf" translate="yes" xml:space="preserve">
          <source>class coincides with the current one.</source>
          <target state="translated">클래스는 현재 클래스와 일치합니다.</target>
        </trans-unit>
        <trans-unit id="fc160c927561b470a5ed7db832522a92dcd5924c" translate="yes" xml:space="preserve">
          <source>class methods</source>
          <target state="translated">수업 방법</target>
        </trans-unit>
        <trans-unit id="d1583919405b0ffaf7049dbab585a9522a3f0a6c" translate="yes" xml:space="preserve">
          <source>class of the tie()d variable.</source>
          <target state="translated">tie () d 변수의 클래스.</target>
        </trans-unit>
        <trans-unit id="7f794a42ad5205654a6f8a1f0ce2833ce24667bc" translate="yes" xml:space="preserve">
          <source>class the parser should use. It defaults to &lt;a href=&quot;parser/grammar&quot;&gt;TAP::Parser::Grammar&lt;/a&gt;.</source>
          <target state="translated">파서가 사용해야 할 클래스. 기본값은 &lt;a href=&quot;parser/grammar&quot;&gt;TAP :: Parser :: Grammar&lt;/a&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="1adaa84dc07a16d34ede5b9a70713ff832a0f853" translate="yes" xml:space="preserve">
          <source>classes</source>
          <target state="translated">classes</target>
        </trans-unit>
        <trans-unit id="61fbbd0dc1d8da92c1eac1d42004f614817ad786" translate="yes" xml:space="preserve">
          <source>classes, each class declares a (typically lexical) hash for each field it wants to use. The reference address of an object is used as the hash key. By definition, the reference address is unique to each object so this guarantees a place for each field that is private to the class and unique to each object. See &lt;code&gt;Name_id&lt;/code&gt; in &lt;a href=&quot;#Example-1&quot;&gt;Example 1&lt;/a&gt; for a simple example.</source>
          <target state="translated">각 클래스는 사용하려는 각 필드에 대해 (일반적으로 어휘) 해시를 선언합니다. 객체의 참조 주소는 해시 키로 사용됩니다. 정의에 따라 참조 주소는 각 객체에 고유하므로 클래스에 대해 개인용이며 각 객체에 고유 한 각 필드의 위치를 ​​보장합니다. 간단한 예 는 &lt;a href=&quot;#Example-1&quot;&gt;예 1의 &lt;/a&gt; &lt;code&gt;Name_id&lt;/code&gt; 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="596d49ad40a7bfdeccd623b010b2e22381e6296b" translate="yes" xml:space="preserve">
          <source>clean (o)</source>
          <target state="translated">깨끗하다 (o)</target>
        </trans-unit>
        <trans-unit id="99876f76b65400ea89723de9692bdbd1d5995e5e" translate="yes" xml:space="preserve">
          <source>clean_subdirs_target</source>
          <target state="translated">clean_subdirs_target</target>
        </trans-unit>
        <trans-unit id="6fa23a207d7e5bd69c9944ee5d9c366d5d10fc7d" translate="yes" xml:space="preserve">
          <source>clear the end-of-file condition on the handle, so that the next &lt;code&gt;&amp;lt;FILE&amp;gt;&lt;/code&gt; makes Perl try again to read something. (We hope.)</source>
          <target state="translated">핸들에서 파일 끝 조건을 지우면 다음 &lt;code&gt;&amp;lt;FILE&amp;gt;&lt;/code&gt; 에서 Perl이 다시 읽으려고합니다. (우리는 바랍니다.)</target>
        </trans-unit>
        <trans-unit id="bcf447495c45ee1eb737f812581bbeefba6a61da" translate="yes" xml:space="preserve">
          <source>clear_for_close</source>
          <target state="translated">clear_for_close</target>
        </trans-unit>
        <trans-unit id="b3da65bbc40b2249fd82c5dbf801f5b38f10338a" translate="yes" xml:space="preserve">
          <source>cloning</source>
          <target state="translated">cloning</target>
        </trans-unit>
        <trans-unit id="da38860cb875cb64092e402d80d9fe29c4865b18" translate="yes" xml:space="preserve">
          <source>close</source>
          <target state="translated">close</target>
        </trans-unit>
        <trans-unit id="d3e09694ad361f2d14e06be36c08e555dfe35cf7" translate="yes" xml:space="preserve">
          <source>close FILEHANDLE</source>
          <target state="translated">FILEHANDLE 닫기</target>
        </trans-unit>
        <trans-unit id="b93282e6b78f94dc23da20ce483ad7fb84179590" translate="yes" xml:space="preserve">
          <source>close_test</source>
          <target state="translated">close_test</target>
        </trans-unit>
        <trans-unit id="448a0f12f99fbc5c68d38d7274165acc527a990b" translate="yes" xml:space="preserve">
          <source>closedir</source>
          <target state="translated">closedir</target>
        </trans-unit>
        <trans-unit id="5af96b35b3b6011de105827ac853e0503206d5a3" translate="yes" xml:space="preserve">
          <source>closedir DIRHANDLE</source>
          <target state="translated">클로 디르 DIRHANDLE</target>
        </trans-unit>
        <trans-unit id="004e9fd382447a65ced980bdc76de1f2cd09d173" translate="yes" xml:space="preserve">
          <source>closes the input and output files.</source>
          <target state="translated">입력 및 출력 파일을 닫습니다.</target>
        </trans-unit>
        <trans-unit id="d091cefc7695f6aba9a1064d92fd838e1321dce0" translate="yes" xml:space="preserve">
          <source>closure</source>
          <target state="translated">closure</target>
        </trans-unit>
        <trans-unit id="03b254b372b345c237118eeb5587f74d20f6f2cc" translate="yes" xml:space="preserve">
          <source>closure filter</source>
          <target state="translated">폐쇄 필터</target>
        </trans-unit>
        <trans-unit id="2d24694e45580957f57c09b542c087cecccfbafe" translate="yes" xml:space="preserve">
          <source>closure filters</source>
          <target state="translated">폐쇄 필터</target>
        </trans-unit>
        <trans-unit id="7bacf512003f37590fdb819abc21a1abb0ffcaaa" translate="yes" xml:space="preserve">
          <source>closures</source>
          <target state="translated">closures</target>
        </trans-unit>
        <trans-unit id="ebf1f9fa8afd6d1932bd65bc4cc3af89a4c8e228" translate="yes" xml:space="preserve">
          <source>cmd.exe</source>
          <target state="translated">cmd.exe</target>
        </trans-unit>
        <trans-unit id="a07c2354daca744663c8a244d9878da128ee6a3a" translate="yes" xml:space="preserve">
          <source>cmd1</source>
          <target state="translated">cmd1</target>
        </trans-unit>
        <trans-unit id="b7ff88cc24f1683fbbca6c2098a5c5e37bd49915" translate="yes" xml:space="preserve">
          <source>cmd2</source>
          <target state="translated">cmd2</target>
        </trans-unit>
        <trans-unit id="ba6c06e4be30524ef0009a48aabf7d270581932f" translate="yes" xml:space="preserve">
          <source>cmp</source>
          <target state="translated">cmp</target>
        </trans-unit>
        <trans-unit id="f5a2ec7db0bf19e16b47cd761c37cf88ab9ac38c" translate="yes" xml:space="preserve">
          <source>cmpthese - print results of timethese as a comparison chart</source>
          <target state="translated">cmpthese-timethese의 결과를 비교 차트로 인쇄</target>
        </trans-unit>
        <trans-unit id="e6fb06210fafc02fd7479ddbed2d042cc3a5155e" translate="yes" xml:space="preserve">
          <source>code</source>
          <target state="translated">code</target>
        </trans-unit>
        <trans-unit id="9da61277ba6865aaef989ee99dee168468b958be" translate="yes" xml:space="preserve">
          <source>code feeds it the constructions it recognizes. Since</source>
          <target state="translated">코드는 인식하는 구성을 공급합니다. 이후</target>
        </trans-unit>
        <trans-unit id="c1a1ce9f897fd014df7e4f16014e8d3ab6f114ba" translate="yes" xml:space="preserve">
          <source>code point</source>
          <target state="translated">코드 포인트</target>
        </trans-unit>
        <trans-unit id="f52d596cb405e6b2f7e9f85a49d0e9ce72ddb86a" translate="yes" xml:space="preserve">
          <source>code point argument</source>
          <target state="translated">코드 포인트 인수</target>
        </trans-unit>
        <trans-unit id="11d4a42d17eb1eb21462ecad911515e463934b68" translate="yes" xml:space="preserve">
          <source>code point pairs. You can test whether a code point is in a range set using the &lt;a href=&quot;#charinrange()&quot;&gt;charinrange()&lt;/a&gt; function. (To be precise, each</source>
          <target state="translated">코드 포인트 쌍. &lt;a href=&quot;#charinrange()&quot;&gt;charinrange ()&lt;/a&gt; 함수를 사용하여 코드 포인트가 설정된 범위에 있는지 테스트 할 수 있습니다 . (정확하게 말하면, 각각</target>
        </trans-unit>
        <trans-unit id="5e0af62d93d2da86a0151c2341d222a391773edd" translate="yes" xml:space="preserve">
          <source>code points</source>
          <target state="translated">코드 포인트</target>
        </trans-unit>
        <trans-unit id="657316ad9de3b1e352b6e95e3450ef30527c5349" translate="yes" xml:space="preserve">
          <source>code to ensure portability.</source>
          <target state="translated">이식성을 보장하는 코드.</target>
        </trans-unit>
        <trans-unit id="bac2cb7df5401a49f39bf565a8d26e84d63a9aef" translate="yes" xml:space="preserve">
          <source>coderef for CHECK</source>
          <target state="translated">CHECK에 대한 코드 참조</target>
        </trans-unit>
        <trans-unit id="0e27b22a86082458f75eb9a01371da18ccced707" translate="yes" xml:space="preserve">
          <source>coderef2text</source>
          <target state="translated">coderef2text</target>
        </trans-unit>
        <trans-unit id="794269474d0aada35852054db9616d8208afcea7" translate="yes" xml:space="preserve">
          <source>codeset</source>
          <target state="translated">codeset</target>
        </trans-unit>
        <trans-unit id="0affef98bf27a31edab1f82edb89feedbc9acc25" translate="yes" xml:space="preserve">
          <source>coincides with &lt;code&gt;&lt;a href=&quot;functions/substr&quot;&gt;substr&lt;/a&gt; $_, $-[n],
$+[n] - $-[n]&lt;/code&gt; if &lt;code&gt;$-[n]&lt;/code&gt; is defined, and $+ coincides with &lt;code&gt;&lt;a href=&quot;functions/substr&quot;&gt;substr&lt;/a&gt; $_, $-[$#-], $+[$#-] - $-[$#-]&lt;/code&gt; . One can use &lt;code&gt;$#-&lt;/code&gt; to find the last matched subgroup in the last successful match. Contrast with &lt;code&gt;$#+&lt;/code&gt; , the number of subgroups in the regular expression. Compare with &lt;code&gt;@+&lt;/code&gt; .</source>
          <target state="translated">일치와 &lt;code&gt;&lt;a href=&quot;functions/substr&quot;&gt;substr&lt;/a&gt; $_, $-[n], $+[n] - $-[n]&lt;/code&gt; 의 경우 &lt;code&gt;$-[n]&lt;/code&gt; 정의하고, 함께 $ + 일치 &lt;code&gt;&lt;a href=&quot;functions/substr&quot;&gt;substr&lt;/a&gt; $_, $-[$#-], $+[$#-] - $-[$#-]&lt;/code&gt; . &lt;code&gt;$#-&lt;/code&gt; 를 사용 하여 마지막으로 성공한 일치 항목에서 마지막으로 일치하는 하위 그룹을 찾을 수 있습니다 . 정규 표현식의 하위 그룹 수인 &lt;code&gt;$#+&lt;/code&gt; 와 대조됩니다 . &lt;code&gt;@+&lt;/code&gt; 와 비교하십시오 .</target>
        </trans-unit>
        <trans-unit id="baa7634dd6fc792fc39f9eade8c13eef4dc7f687" translate="yes" xml:space="preserve">
          <source>color() takes any number of strings as arguments and considers them to be space-separated lists of attributes. It then forms and returns the escape sequence to set those attributes. It doesn't print it out, just returns it, so you'll have to print it yourself if you want to. This is so that you can save it as a string, pass it to something else, send it to a file handle, or do anything else with it that you might care to. color() throws an exception if given an invalid attribute.</source>
          <target state="translated">color ()는 임의의 수의 문자열을 인수로 취하여 공백으로 구분 된 속성 목록으로 간주합니다. 그런 다음 이스케이프 시퀀스를 구성하고 반환하여 해당 속성을 설정합니다. 인쇄하지 않고 그냥 반환하므로 원하는 경우 직접 인쇄해야합니다. 이것은 문자열로 저장하거나, 다른 것으로 전달하거나, 파일 핸들로 보내거나, 관심이있는 다른 작업을 수행 할 수 있도록하기위한 것입니다. 유효하지 않은 속성이 제공되면 color ()에서 예외가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="866ebe5a4ffaae003e56cb9000e64fc80cbe587b" translate="yes" xml:space="preserve">
          <source>colorstrip() removes all color escape sequences from the provided strings, returning the modified strings separately in array context or joined together in scalar context. Its arguments are not modified.</source>
          <target state="translated">colorstrip ()은 제공된 문자열에서 모든 색상 이스케이프 시퀀스를 제거하고 수정 된 문자열을 배열 컨텍스트에서 개별적으로 반환하거나 스칼라 컨텍스트에서 함께 결합합니다. 인수는 수정되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="cc2e88d690afd5cca29d4c4820d6f40e865ad2d9" translate="yes" xml:space="preserve">
          <source>colorstrip() was added in Term::ANSIColor 2.01 and colorvalid() was added in Term::ANSIColor 2.02, both included in Perl 5.11.0.</source>
          <target state="translated">colorstrip ()은 Term :: ANSIColor 2.01에 추가되었고 colorvalid ()는 Perl 5.11.0에 포함 된 Term :: ANSIColor 2.02에 추가되었습니다.</target>
        </trans-unit>
        <trans-unit id="c0c1c531424ec61747f6f1b2747a02b590468e5f" translate="yes" xml:space="preserve">
          <source>colorvalid() takes attribute strings the same as color() and returns true if all attributes are known and false otherwise.</source>
          <target state="translated">colorvalid ()는 color ()와 동일한 속성 문자열을 가져오고 모든 속성을 알고 있으면 true를, 그렇지 않으면 false를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="553b8d9460d5ec9d3238ec3f9f149796206668d1" translate="yes" xml:space="preserve">
          <source>columns. The default is 4 columns.</source>
          <target state="translated">열. 기본값은 4 열입니다.</target>
        </trans-unit>
        <trans-unit id="0a5bdb6930a55ea4051008b470a27e557f0620ff" translate="yes" xml:space="preserve">
          <source>combining</source>
          <target state="translated">combining</target>
        </trans-unit>
        <trans-unit id="5c296375f250fae9b2dc8c5ee373383cede54d7b" translate="yes" xml:space="preserve">
          <source>combining character sequence</source>
          <target state="translated">문자 시퀀스 결합</target>
        </trans-unit>
        <trans-unit id="1e72c3cef8ffa878469f9a8d3b32a08cf2d9d042" translate="yes" xml:space="preserve">
          <source>combining the regexps,</source>
          <target state="translated">정규 표현식을 결합하여</target>
        </trans-unit>
        <trans-unit id="4b30e55fedcd2138a431b53a3c8fa077f91776a7" translate="yes" xml:space="preserve">
          <source>come as compressed or gzipped tarfiles or as zip files and contain a &lt;code&gt;Makefile.PL&lt;/code&gt; or &lt;code&gt;Build.PL&lt;/code&gt; (well, we try to handle a bit more, but with little enthusiasm).</source>
          <target state="translated">압축 또는 zip으로 압축 된 tarfile 또는 zip 파일로 제공되며 &lt;code&gt;Makefile.PL&lt;/code&gt; 또는 &lt;code&gt;Build.PL&lt;/code&gt; 을 포함합니다 (물론 조금 더 열정적으로 다루려고합니다).</target>
        </trans-unit>
        <trans-unit id="ec796d4586552c37788a6ebe53e4ff905b4159b6" translate="yes" xml:space="preserve">
          <source>comes first and must consist of complete lines of input, and</source>
          <target state="translated">먼저 입력하고 완전한 입력 라인으로 구성되어야합니다.</target>
        </trans-unit>
        <trans-unit id="08ae9576a25419d97eee8be6079d1102dd501788" translate="yes" xml:space="preserve">
          <source>comma after the initial block when you use &lt;code&gt;FILTER&lt;/code&gt; ).</source>
          <target state="translated">&lt;code&gt;FILTER&lt;/code&gt; 를 사용할 때 초기 블록 뒤의 쉼표 ).</target>
        </trans-unit>
        <trans-unit id="a00fc89e489feb78ba2a90d1a1a3e2742cd34b6d" translate="yes" xml:space="preserve">
          <source>command alias management</source>
          <target state="translated">명령 별명 관리</target>
        </trans-unit>
        <trans-unit id="a32233989708642f746d478ae78867a000f29692" translate="yes" xml:space="preserve">
          <source>command described in &lt;a href=&quot;perlrun&quot;&gt;perlrun&lt;/a&gt;, which is usable only if a special Perl is built per the instructions in the</source>
          <target state="translated">&lt;a href=&quot;perlrun&quot;&gt;perlrun에&lt;/a&gt; 설명 된 명령으로 , 특수 Perl이 다음의 지시 사항에 따라 빌드 된 경우에만 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2350fa1ca5933d3319468870ed1a147463ee228e" translate="yes" xml:space="preserve">
          <source>command is executed with the corresponding part of its memory erased.</source>
          <target state="translated">명령은 메모리의 해당 부분이 지워진 상태에서 실행됩니다.</target>
        </trans-unit>
        <trans-unit id="ce97aac05c65318d3a9c0de9f45b34691b032ae8" translate="yes" xml:space="preserve">
          <source>command line tool. This tool will ensure that your bug report includes all the relevant system and configuration information.</source>
          <target state="translated">명령 줄 도구. 이 도구는 버그 보고서에 모든 관련 시스템 및 구성 정보가 포함되도록합니다.</target>
        </trans-unit>
        <trans-unit id="95d7b5e04adb582ccbd1830291eb225a995904e2" translate="yes" xml:space="preserve">
          <source>command line), then there is no reason to assume that the Configure-time $installstyle setting will be relevant for that &lt;code&gt;PREFIX&lt;/code&gt; .</source>
          <target state="translated">명령 줄)에 따라 Configure-time $ installstyle 설정이 해당 &lt;code&gt;PREFIX&lt;/code&gt; 와 관련이 있다고 가정 할 이유가 없습니다 .</target>
        </trans-unit>
        <trans-unit id="26f462963f9eb20fdaa42ca56411218d1ee06ad2" translate="yes" xml:space="preserve">
          <source>command paragraph, so a &quot;=pod&quot; command is usually used just when you want to start a Pod block with an ordinary paragraph or a verbatim paragraph. For example:</source>
          <target state="translated">명령 단락이므로 &quot;= pod&quot;명령은 일반적으로 일반 단락이나 완전 단락으로 포드 블록을 시작하려는 경우에만 사용됩니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="fa5b28913405846cb20d2d5c0f7c9da9fdcdad2d" translate="yes" xml:space="preserve">
          <source>command paragraphs allow formatting codes in their content (i.e., after the part that matches &lt;code&gt;&lt;a href=&quot;functions/m&quot;&gt;m/\A=[a-zA-Z]\S*\s*/&lt;/a&gt;&lt;/code&gt;), as in:</source>
          <target state="translated">명령 단락은 다음과 같이 내용에 형식 코드를 허용합니다 (예 : &lt;code&gt;&lt;a href=&quot;functions/m&quot;&gt;m/\A=[a-zA-Z]\S*\s*/&lt;/a&gt;&lt;/code&gt; 와 일치하는 부분 뒤에 ).</target>
        </trans-unit>
        <trans-unit id="908e44229adf15648bd313eea07d94f19b18fe8f" translate="yes" xml:space="preserve">
          <source>command processing</source>
          <target state="translated">명령 처리</target>
        </trans-unit>
        <trans-unit id="81e8811a50c94aa47e6ab235f23967bf8162fcab" translate="yes" xml:space="preserve">
          <source>command sometimes compensates for this. Other restrictions include whether it works on directories, open files, or pre-existing files. Check &lt;a href=&quot;../perlport&quot;&gt;perlport&lt;/a&gt; and either the rename(2) manpage or equivalent system documentation for details.</source>
          <target state="translated">명령은 때때로 이것을 보상합니다. 다른 제한 사항은 디렉토리에서 작동하는지, 파일을 열거 나 기존 파일에서 작동하는지 여부를 포함합니다. 자세한 내용은 &lt;a href=&quot;../perlport&quot;&gt;perlport&lt;/a&gt; 및 rename (2) 맨 페이지 또는 해당 시스템 설명서를 확인하십시오.</target>
        </trans-unit>
        <trans-unit id="004b6326b0d5ffc41e7dd89235723df45cdc46b1" translate="yes" xml:space="preserve">
          <source>command sometimes compensates for this. Other restrictions include whether it works on directories, open files, or pre-existing files. Check &lt;a href=&quot;perlport&quot;&gt;perlport&lt;/a&gt; and either the rename(2) manpage or equivalent system documentation for details.</source>
          <target state="translated">명령은 때때로 이것을 보상합니다. 다른 제한 사항은 디렉토리에서 작동하는지, 파일을 열거 나 기존 파일에서 작동하는지 여부를 포함합니다. 자세한 내용은 &lt;a href=&quot;perlport&quot;&gt;perlport&lt;/a&gt; 및 rename (2) 맨 페이지 또는 해당 시스템 설명서를 확인하십시오.</target>
        </trans-unit>
        <trans-unit id="701dc47ba0201600971182fe81e8e08348a51774" translate="yes" xml:space="preserve">
          <source>command, and finally the</source>
          <target state="translated">명령, 그리고 마지막으로</target>
        </trans-unit>
        <trans-unit id="695d63b2267f9baaa26a81fd9fd45c17a391ec3e" translate="yes" xml:space="preserve">
          <source>command. File::Find exports two functions, &lt;code&gt;find&lt;/code&gt; and &lt;code&gt;finddepth&lt;/code&gt; . They work similarly but have subtle differences.</source>
          <target state="translated">명령. File :: Find는 &lt;code&gt;find&lt;/code&gt; 와 &lt;code&gt;finddepth&lt;/code&gt; 의 두 함수를 내 보냅니다 . 그들은 비슷하게 작동하지만 미묘한 차이가 있습니다.</target>
        </trans-unit>
        <trans-unit id="c336680fdba2930981615fe8aa2bf1e1c4871200" translate="yes" xml:space="preserve">
          <source>command. The default behaviour is to try to use an external</source>
          <target state="translated">명령. 기본 동작은 외부를 사용하는 것입니다</target>
        </trans-unit>
        <trans-unit id="b0d021f1ed473dc5029d50be679688256761e06b" translate="yes" xml:space="preserve">
          <source>comment methods</source>
          <target state="translated">댓글 방법</target>
        </trans-unit>
        <trans-unit id="5a3c2cd2a71dbff7e78a7d63e72b8ddb4e74daf8" translate="yes" xml:space="preserve">
          <source>commercial software: it has a license that you can grab and carefully read to your manager. It is distributed in releases and comes in well-defined packages. There is a very large and supportive user community and an extensive literature.</source>
          <target state="translated">상용 소프트웨어 : 여기에는 관리자에게 맡겨서주의 깊게 읽을 수있는 라이센스가 있습니다. 릴리즈로 배포되며 잘 정의 된 패키지로 제공됩니다. 매우 크고 지원적인 사용자 커뮤니티와 광범위한 문헌이 있습니다.</target>
        </trans-unit>
        <trans-unit id="4015b57a143aec5156fd1444a017a32137a3fd0f" translate="yes" xml:space="preserve">
          <source>commit</source>
          <target state="translated">commit</target>
        </trans-unit>
        <trans-unit id="b1227d2ef5edb14a1d4bf6dfb9871c3a17b42df0" translate="yes" xml:space="preserve">
          <source>comp</source>
          <target state="translated">comp</target>
        </trans-unit>
        <trans-unit id="6e4ad69ef96331c1a04ff5303a4abcd4e99129b4" translate="yes" xml:space="preserve">
          <source>comp.programming.threads FAQ, &lt;a href=&quot;http://www.serpentine.com/~bos/threads-faq/&quot;&gt;http://www.serpentine.com/~bos/threads-faq/&lt;/a&gt;</source>
          <target state="translated">comp.programming.threads FAQ, &lt;a href=&quot;http://www.serpentine.com/~bos/threads-faq/&quot;&gt;http://www.serpentine.com/~bos/threads-faq/&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="068bba568e6340e330e37a3839f209788f1db08b" translate="yes" xml:space="preserve">
          <source>compatibility file in Debian 4.0.</source>
          <target state="translated">데비안 4.0의 호환성 파일.</target>
        </trans-unit>
        <trans-unit id="2e947ba843b3abd53a604b05f7c1726c8be4b575" translate="yes" xml:space="preserve">
          <source>compatibility file in RedHat 7.1.</source>
          <target state="translated">RedHat 7.1의 호환성 파일.</target>
        </trans-unit>
        <trans-unit id="f479a23ebfa9b36fa8585d6c66f9a64aa6f9919c" translate="yes" xml:space="preserve">
          <source>compatibility to run &lt;code&gt;XS&lt;/code&gt; code built with the older version). Normally this does not change across maintenance releases. Please read the comment in</source>
          <target state="translated">이전 버전으로 &lt;code&gt;XS&lt;/code&gt; 코드 를 실행하기위한 호환성 ). 일반적으로 이것은 유지 보수 릴리스에서 변경되지 않습니다. 의견을 읽으십시오</target>
        </trans-unit>
        <trans-unit id="592c971d2d8aa617ad80fea75f2b71af931174b8" translate="yes" xml:space="preserve">
          <source>compatible with the Unix commands of the same name.</source>
          <target state="translated">같은 이름의 유닉스 명령과 호환됩니다.</target>
        </trans-unit>
        <trans-unit id="7ac5aba35566b199712c3d2eb7b5e62396cee0a9" translate="yes" xml:space="preserve">
          <source>compilation that the already compiled code may try to perform.</source>
          <target state="translated">이미 컴파일 된 코드가 수행하려고하는 컴파일</target>
        </trans-unit>
        <trans-unit id="91d57a8d930f6b42fac784730108b8b9dd712b28" translate="yes" xml:space="preserve">
          <source>compile.bat</source>
          <target state="translated">compile.bat</target>
        </trans-unit>
        <trans-unit id="9b6cf5446314f1e4646cf53c0d7e62a18d873f8f" translate="yes" xml:space="preserve">
          <source>compiled form</source>
          <target state="translated">컴파일 된 형태</target>
        </trans-unit>
        <trans-unit id="2b2563adbae4d00637b45758bb62d62aa6388692" translate="yes" xml:space="preserve">
          <source>compiler is supported by IBM on AIX 5L/6.1/7.1.</source>
          <target state="translated">컴파일러는 AIX 5L / 6.1 / 7.1에서 IBM에 의해 지원됩니다.</target>
        </trans-unit>
        <trans-unit id="3df4914ee42164f6ae46e850cebfd5c0ca11bba2" translate="yes" xml:space="preserve">
          <source>compiles any code. Attempting to compile code which contains a masked opcode will cause the compilation to fail with an error. The code will not be executed.</source>
          <target state="translated">모든 코드를 컴파일합니다. 마스크 처리 된 opcode가 포함 된 코드를 컴파일하려고하면 컴파일에 오류가 발생합니다. 코드가 실행되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="1c3ad01b92b3dbd52abd622ca6216853c1fba74b" translate="yes" xml:space="preserve">
          <source>compiles to</source>
          <target state="translated">컴파일</target>
        </trans-unit>
        <trans-unit id="36152587b7f8361cfbcf149096a1a5e82959c60d" translate="yes" xml:space="preserve">
          <source>completely</source>
          <target state="translated">completely</target>
        </trans-unit>
        <trans-unit id="b2d73ff91a5f876b29cc72977847ee5d1c3be9a9" translate="yes" xml:space="preserve">
          <source>complex plane</source>
          <target state="translated">복잡한 비행기</target>
        </trans-unit>
        <trans-unit id="c212f08ed1157ae268fd83d142afd5ccd48664b2" translate="yes" xml:space="preserve">
          <source>components</source>
          <target state="translated">components</target>
        </trans-unit>
        <trans-unit id="12dfb7d897712cd52e3ec502407df7551db4693c" translate="yes" xml:space="preserve">
          <source>composed of a single space character (such as &lt;code&gt;' '&lt;/code&gt; or &lt;code&gt;&quot;\x20&quot;&lt;/code&gt; , but not e.g. &lt;code&gt;/ /&lt;/code&gt; ). In this case, any leading whitespace in EXPR is removed before splitting occurs, and the PATTERN is instead treated as if it were &lt;code&gt;/\s+/&lt;/code&gt; ; in particular, this means that</source>
          <target state="translated">단일 공백 ​​문자로 구성됩니다 (예 : &lt;code&gt;' '&lt;/code&gt; 또는 &lt;code&gt;&quot;\x20&quot;&lt;/code&gt; , 예를 들어 &lt;code&gt;/ /&lt;/code&gt; ). 이 경우 EXPR의 선행 공백은 분할이 발생하기 전에 제거되고 PATTERN은 &lt;code&gt;/\s+/&lt;/code&gt; 것처럼 처리됩니다 . 특히 이것은</target>
        </trans-unit>
        <trans-unit id="6127e6ffe8872ff87ec22f05e6b9f1acb37d59aa" translate="yes" xml:space="preserve">
          <source>compressed data in &lt;code&gt;$input&lt;/code&gt; will have been dealt with. So if you are reading from an input source and uncompressing as you go the code will look something like this</source>
          <target state="translated">&lt;code&gt;$input&lt;/code&gt; 압축 데이터 가 처리 될 것입니다. 따라서 입력 소스에서 읽고 압축을 풀면 코드가 다음과 같이 보입니다.</target>
        </trans-unit>
        <trans-unit id="025869549b0b056eecdf01e5c7a04198305b98fb" translate="yes" xml:space="preserve">
          <source>compression library (see &lt;a href=&quot;#AUTHOR&quot;&gt;AUTHOR&lt;/a&gt; for details about where to get</source>
          <target state="translated">압축 라이브러리 ( 구할 수있는 위치에 대한 자세한 내용 은 &lt;a href=&quot;#AUTHOR&quot;&gt;AUTHOR&lt;/a&gt; 참조)</target>
        </trans-unit>
        <trans-unit id="ec13e4eb72f3d391134259d0183bd64c7b1680c9" translate="yes" xml:space="preserve">
          <source>compression library is</source>
          <target state="translated">압축 라이브러리는</target>
        </trans-unit>
        <trans-unit id="f12f044c06efa896066b896898d28ea39f1d4af9" translate="yes" xml:space="preserve">
          <source>compression library was written by Jean-loup Gailly</source>
          <target state="translated">압축 라이브러리는 Jean-loup Gailly에 의해 작성되었습니다</target>
        </trans-unit>
        <trans-unit id="af30dd1d79e03186a6532248645f23029d5446ae" translate="yes" xml:space="preserve">
          <source>concept, which was later further refined into the</source>
          <target state="translated">나중에 더 구체화 된 개념</target>
        </trans-unit>
        <trans-unit id="f9b3c21e895be55922fa8fbdd5f7a004769b4fca" translate="yes" xml:space="preserve">
          <source>cond</source>
          <target state="translated">cond</target>
        </trans-unit>
        <trans-unit id="afad9a69767e7c24ecda5af9187202e1b4b070b2" translate="yes" xml:space="preserve">
          <source>condition</source>
          <target state="translated">condition</target>
        </trans-unit>
        <trans-unit id="53fe0e9923a8475c588d93af07f3fd82021e751d" translate="yes" xml:space="preserve">
          <source>conditional expression</source>
          <target state="translated">조건식</target>
        </trans-unit>
        <trans-unit id="c705b5c07e94e5b4ef420654932ee77cfc0d3039" translate="yes" xml:space="preserve">
          <source>config()</source>
          <target state="translated">config()</target>
        </trans-unit>
        <trans-unit id="03461db87a24c8a99f7e61a96ba5df4ef9e79d47" translate="yes" xml:space="preserve">
          <source>config.h</source>
          <target state="translated">config.h</target>
        </trans-unit>
        <trans-unit id="7e889baa6e4cb4bd98805a8b8096412822c4f99d" translate="yes" xml:space="preserve">
          <source>config.sh</source>
          <target state="translated">config.sh</target>
        </trans-unit>
        <trans-unit id="685bb349569f3229e3d50061ff81accc6f623504" translate="yes" xml:space="preserve">
          <source>config_h.SH</source>
          <target state="translated">config_h.SH</target>
        </trans-unit>
        <trans-unit id="5b71a4225f3de00a0de0a2d057fbdc6b7907a61f" translate="yes" xml:space="preserve">
          <source>configpm</source>
          <target state="translated">configpm</target>
        </trans-unit>
        <trans-unit id="09be8533ff0a6ee5d577f971145ed449399fcda4" translate="yes" xml:space="preserve">
          <source>configure</source>
          <target state="translated">configure</target>
        </trans-unit>
        <trans-unit id="6ddd132f5d7491ac61dfcd007387153f4cdb2499" translate="yes" xml:space="preserve">
          <source>configvar</source>
          <target state="translated">configvar</target>
        </trans-unit>
        <trans-unit id="4443fcb96c75058684a34fa6e9077456b788f37d" translate="yes" xml:space="preserve">
          <source>conforming systems).</source>
          <target state="translated">적합한 시스템).</target>
        </trans-unit>
        <trans-unit id="4ca9e20e4d70df9dc6c19f404890df5beb2102cd" translate="yes" xml:space="preserve">
          <source>confused about &lt;code&gt;@_&lt;/code&gt; or &lt;code&gt;@DB::args&lt;/code&gt; being tied.</source>
          <target state="translated">에 대해 혼동 &lt;code&gt;@_&lt;/code&gt; 또는 &lt;code&gt;@DB::args&lt;/code&gt; 연결된다.</target>
        </trans-unit>
        <trans-unit id="9664a445a056225ffd216e07a2091d6ad3ff0a33" translate="yes" xml:space="preserve">
          <source>conjugate</source>
          <target state="translated">conjugate</target>
        </trans-unit>
        <trans-unit id="f11a107f38328604e9320754224b60375758bca1" translate="yes" xml:space="preserve">
          <source>connect</source>
          <target state="translated">connect</target>
        </trans-unit>
        <trans-unit id="5b5fd14fd15af0f29c402a456040108ca491bf96" translate="yes" xml:space="preserve">
          <source>connect SOCKET,NAME</source>
          <target state="translated">SOCKET, NAME 연결</target>
        </trans-unit>
        <trans-unit id="c2fae7502ca3a8313cd77e43cfa9956a074b0666" translate="yes" xml:space="preserve">
          <source>considered meaningful in language-tag comparison.)</source>
          <target state="translated">언어 태그 비교에서 의미있는 것으로 간주됩니다.)</target>
        </trans-unit>
        <trans-unit id="222f86aa8df05eadc1219055ce940b90898f4ea9" translate="yes" xml:space="preserve">
          <source>considered part of the POD document).</source>
          <target state="translated">POD 문서의 일부로 간주 됨).</target>
        </trans-unit>
        <trans-unit id="afd9e885669a3e138aed5be1f9fa0911cf7081c4" translate="yes" xml:space="preserve">
          <source>considered to be a symbolic reference when you're using strict refs:</source>
          <target state="translated">엄격한 참조를 사용하는 경우 기호 참조로 간주됩니다.</target>
        </trans-unit>
        <trans-unit id="11f4a64f6fa1d91c5e7b6e491377d7a035449d88" translate="yes" xml:space="preserve">
          <source>considered variable interpolation. Thus:</source>
          <target state="translated">변수 보간으로 간주됩니다. 그러므로:</target>
        </trans-unit>
        <trans-unit id="17a9fea753f52d4e03254e2e57c3c4bed8f95bd9" translate="yes" xml:space="preserve">
          <source>const_meth</source>
          <target state="translated">const_meth</target>
        </trans-unit>
        <trans-unit id="d810ca965a236c6f46a932efff918a4b3a191918" translate="yes" xml:space="preserve">
          <source>constant</source>
          <target state="translated">constant</target>
        </trans-unit>
        <trans-unit id="0504ccc4bd11502b019a64b9e806261ce03d723a" translate="yes" xml:space="preserve">
          <source>constant - Perl pragma to declare constants</source>
          <target state="translated">constant-상수를 선언하는 Perl pragma</target>
        </trans-unit>
        <trans-unit id="e6d2f0631cda4d6efc629d2121169975c2ccdd85" translate="yes" xml:space="preserve">
          <source>constant.pm</source>
          <target state="translated">constant.pm</target>
        </trans-unit>
        <trans-unit id="3c68e852e576badaab4d5104094f39037265b3aa" translate="yes" xml:space="preserve">
          <source>constants are automatically imported when you make use of</source>
          <target state="translated">상수를 사용할 때 자동으로 가져옵니다</target>
        </trans-unit>
        <trans-unit id="a8baf617ece3e924e80dcbb5e14b608a7dd0da91" translate="yes" xml:space="preserve">
          <source>construct, not just the empty search pattern. Therefore code written in Perl 5.10.0 or later that uses the // as the</source>
          <target state="translated">빈 검색 패턴뿐만 아니라 구성. 따라서 //를 다음과 같이 사용하는 Perl 5.10.0 이상으로 작성된 코드</target>
        </trans-unit>
        <trans-unit id="8a1c1339801686eb9bf9a9ac5b4719b8c8b8fc9b" translate="yes" xml:space="preserve">
          <source>constructor</source>
          <target state="translated">constructor</target>
        </trans-unit>
        <trans-unit id="72e9a547fbb17beb5b5ea139f68f91eea1ed3e1d" translate="yes" xml:space="preserve">
          <source>cont</source>
          <target state="translated">cont</target>
        </trans-unit>
        <trans-unit id="c1380af48659113969e097bf1cb2bc27425f186c" translate="yes" xml:space="preserve">
          <source>contain</source>
          <target state="translated">contain</target>
        </trans-unit>
        <trans-unit id="9c625731c42e13cefcabbdf038f623268a8b2f8c" translate="yes" xml:space="preserve">
          <source>contain commands. For example:</source>
          <target state="translated">명령을 포함합니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="de33d2e14162941894fee180071f7586145848de" translate="yes" xml:space="preserve">
          <source>contain the &lt;code&gt;=&lt;/code&gt; prefix); this is needed only if the POD paragraph corresponds to a command paragraph. The &lt;code&gt;-file&lt;/code&gt; and &lt;code&gt;-line&lt;/code&gt; keywords indicate the filename and line number corresponding to the beginning of the paragraph</source>
          <target state="translated">&lt;code&gt;=&lt;/code&gt; 접두사 포함 ); 이것은 POD 단락이 명령 단락에 해당하는 경우에만 필요합니다. &lt;code&gt;-file&lt;/code&gt; 와 &lt;code&gt;-line&lt;/code&gt; 키워드는 단락의 시작 부분에 해당하는 파일 이름과 라인 수를 표시</target>
        </trans-unit>
        <trans-unit id="c83f5eb7732c80efe1cb74cd7698cdb71a73ab40" translate="yes" xml:space="preserve">
          <source>containing the essentials of embedding:</source>
          <target state="translated">퍼가기의 필수 요소를 포함 :</target>
        </trans-unit>
        <trans-unit id="456759b7de9dffe0984565499992ad5c28e11f2a" translate="yes" xml:space="preserve">
          <source>contains a &lt;code&gt;$&lt;/code&gt; that looks like a variable rather than an end-of-string test, the variable will be interpolated into the pattern at run-time. If you want the pattern compiled only once the first time the variable is interpolated, use the &lt;code&gt;/o&lt;/code&gt; option. If the pattern evaluates to the empty string, the last successfully executed regular expression is used instead. See &lt;a href=&quot;perlre&quot;&gt;perlre&lt;/a&gt; for further explanation on these.</source>
          <target state="translated">문자열 끝 테스트가 아닌 변수처럼 보이는 &lt;code&gt;$&lt;/code&gt; 를 포함 하면 변수는 런타임에 패턴으로 보간됩니다. 변수를 처음 보간 할 때 패턴을 한 번만 컴파일하려면 &lt;code&gt;/o&lt;/code&gt; 옵션을 사용하십시오 . 패턴이 빈 문자열로 평가되면 마지막으로 성공적으로 실행 된 정규식이 대신 사용됩니다. 이에 대한 자세한 설명 은 &lt;a href=&quot;perlre&quot;&gt;perlre&lt;/a&gt; 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="2e9fc2513d38b23de077e16ef771bb5e1ba313ee" translate="yes" xml:space="preserve">
          <source>contains a number of functions which produce formatted output of internal data structures.</source>
          <target state="translated">내부 데이터 구조의 형식화 된 출력을 생성하는 여러 함수를 포함합니다.</target>
        </trans-unit>
        <trans-unit id="97d9b2d523ae7c08e42a0378f3168116fd6ac99b" translate="yes" xml:space="preserve">
          <source>contains a third array element, after the range boundary ones: the old_style block name.)</source>
          <target state="translated">범위 경계 요소 다음에 세 번째 배열 요소를 포함합니다 (old_style 블록 이름).</target>
        </trans-unit>
        <trans-unit id="1e39f4d34160a0c98c4ecb1c728c648cc593c34a" translate="yes" xml:space="preserve">
          <source>contains a third array element, after the range boundary ones: the script name.)</source>
          <target state="translated">범위 경계 요소 다음에 세 번째 배열 요소를 포함합니다 (스크립트 이름).</target>
        </trans-unit>
        <trans-unit id="41f54bb14132b493b92c26df5faa1d294b7aa12c" translate="yes" xml:space="preserve">
          <source>contains all the elements of @foo followed by all the elements of @bar, followed by all the elements returned by the subroutine named SomeSub called in list context, followed by the key/value pairs of %glarch. To make a list reference that does</source>
          <target state="translated">@foo의 모든 요소와 @bar의 모든 요소, 그리고리스트 컨텍스트에서 호출 된 SomeSub라는 서브 루틴에 의해 리턴 된 모든 요소와 % glarch의 키 / 값 쌍이 뒤 따릅니다. 하는 목록 참조를 만들려면</target>
        </trans-unit>
        <trans-unit id="3cb4fa0e628428cfb9b4db01087a9f5db68ecf38" translate="yes" xml:space="preserve">
          <source>contains all the system-specific functions,</source>
          <target state="translated">모든 시스템 별 기능을 포함합니다.</target>
        </trans-unit>
        <trans-unit id="b4a3e3041113fdd1bddf95caa788a8fa6500be88" translate="yes" xml:space="preserve">
          <source>contains any special folding for Turkic languages. For versions of Unicode starting with 3.2, this field is empty unless</source>
          <target state="translated">투르크어 언어를위한 특별한 접는 부분이 들어 있습니다. 3.2로 시작하는 유니 코드 버전의 경우이 필드는 비어 있지 않으면</target>
        </trans-unit>
        <trans-unit id="f682a5e2bacce4b727dd6835165db3a42c0490c7" translate="yes" xml:space="preserve">
          <source>contains everything else. These are, if you like, the C code for Perl's built-in functions and operators.</source>
          <target state="translated">다른 모든 것을 포함합니다. 원하는 경우 Perl의 내장 함수 및 연산자에 대한 C 코드입니다.</target>
        </trans-unit>
        <trans-unit id="4364e65ad67e2e4441d43321c651e2cac9b760eb" translate="yes" xml:space="preserve">
          <source>contains our &lt;code&gt;rpcb_gettime()&lt;/code&gt; function:</source>
          <target state="translated">&lt;code&gt;rpcb_gettime()&lt;/code&gt; 함수를 포함 합니다 :</target>
        </trans-unit>
        <trans-unit id="cc59e91f1f4fb80c6f16f33f295a9084147b614e" translate="yes" xml:space="preserve">
          <source>contains snippets of perl code which are intended to be benchmarked across a range of perls by the</source>
          <target state="translated">에 의해 펄 범위에 걸쳐 벤치마킹되도록 의도 된 펄 코드 스 니펫을 포함</target>
        </trans-unit>
        <trans-unit id="1d22a5d352aa38186ed43bc2d343c65d9b9d7338" translate="yes" xml:space="preserve">
          <source>contains some helpful functions for writing tests valid on both ASCII and EBCDIC platforms. Sometimes, though, a test can't use a function and it's inconvenient to have different test versions depending on the platform. There are 20 code points that are the same in all 4 character sets currently recognized by Perl (the 3 EBCDIC code pages plus ISO 8859-1 (ASCII/Latin1)). These can be used in such tests, though there is a small possibility that Perl will become available in yet another character set, breaking your test. All but one of these code points are C0 control characters. The most significant controls that are the same are &lt;code&gt;\0&lt;/code&gt; , &lt;code&gt;\r&lt;/code&gt; , and &lt;code&gt;\N{VT}&lt;/code&gt; (also specifiable as &lt;code&gt;\cK&lt;/code&gt; , &lt;code&gt;\x0B&lt;/code&gt; , &lt;code&gt;\N{U+0B}&lt;/code&gt; , or &lt;code&gt;\013&lt;/code&gt; ). The single non-control is U+00B6 PILCROW SIGN. The controls that are the same have the same bit pattern in all 4 character sets, regardless of the UTF8ness of the string containing them. The bit pattern for U+B6 is the same in all 4 for non-UTF8 strings, but differs in each when its containing string is UTF-8 encoded. The only other code points that have some sort of sameness across all 4 character sets are the pair 0xDC and 0xFC. Together these represent upper- and lowercase LATIN LETTER U WITH DIAERESIS, but which is upper and which is lower may be reversed: 0xDC is the capital in Latin1 and 0xFC is the small letter, while 0xFC is the capital in EBCDIC and 0xDC is the small one. This factoid may be exploited in writing case insensitive tests that are the same across all 4 character sets.</source>
          <target state="translated">ASCII 및 EBCDIC 플랫폼 모두에서 유효한 테스트 작성에 유용한 기능이 포함되어 있습니다. 그러나 때로는 테스트에서 함수를 사용할 수 없으며 플랫폼에 따라 다른 테스트 버전을 갖는 것이 불편합니다. 현재 Perl에서 인식하는 4 개의 문자 세트 (3 개의 EBCDIC 코드 페이지에 ISO 8859-1 (ASCII / Latin1))에 동일한 20 개의 코드 포인트가 있습니다. Perl이 또 다른 문자 세트에서 사용 가능 해져 테스트를 중단 할 가능성은 적지 만 이러한 테스트에 사용할 수 있습니다. 이러한 코드 포인트 중 하나를 제외한 모든 코드 포인트는 C0 제어 문자입니다. 동일한 가장 중요한 컨트롤은 &lt;code&gt;\0&lt;/code&gt; , &lt;code&gt;\r&lt;/code&gt; 및 &lt;code&gt;\N{VT}&lt;/code&gt; ( &lt;code&gt;\cK&lt;/code&gt; , &lt;code&gt;\x0B&lt;/code&gt; , &lt;code&gt;\N{U+0B}&lt;/code&gt; 로 지정할 수도 있음).또는 &lt;code&gt;\013&lt;/code&gt; ). 단일 비 제어는 U + 00B6 PILCROW SIGN입니다. 동일한 컨트롤은 컨트롤을 포함하는 문자열의 UTF8에 관계없이 4 개의 모든 문자 세트에서 동일한 비트 패턴을 갖습니다. U + B6의 비트 패턴은 비 UTF8 문자열의 경우 4에서 모두 동일하지만 포함 문자열이 UTF-8로 인코딩 된 경우 각각 다릅니다. 모든 4 개의 문자 집합에서 동일한 종류를 가진 유일한 다른 코드 포인트는 쌍 0xDC와 0xFC입니다. 이 둘은 대문자와 소문자 LAETTER U WITH DIAERESIS를 나타냅니다. 그러나 대문자와 소문자는 반대로 표시 될 수 있습니다. 0xDC는 라틴어 1의 대문자이고 0xFC는 소문자, 0xFC는 EBCDIC의 대문자이고 0xDC는 작은 하나. 이 사실은 4 개의 문자 집합 모두에서 동일한 대소 문자를 구분하지 않는 테스트를 작성하는 데 악용 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f9ecf591b48a021fcfa56b07f615c6fee077adcf" translate="yes" xml:space="preserve">
          <source>contains the &quot;hot&quot; code, which is most often used and highly optimized,</source>
          <target state="translated">가장 자주 사용되며 고도로 최적화 된 &quot;핫&quot;코드가 포함되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="d2f0d0091560a93ac18a046dd74619847856144f" translate="yes" xml:space="preserve">
          <source>contains the &lt;code&gt;&quot;,&quot;&lt;/code&gt; or the &lt;code&gt;&quot;#&quot;&lt;/code&gt; character.</source>
          <target state="translated">포함 &lt;code&gt;&quot;,&quot;&lt;/code&gt; 또는 &lt;code&gt;&quot;#&quot;&lt;/code&gt; 문자를.</target>
        </trans-unit>
        <trans-unit id="181d5157c98ff403f168dc14c756ebcce30df2fb" translate="yes" xml:space="preserve">
          <source>contains the functions which implement control structures (&lt;code&gt;if&lt;/code&gt; , &lt;code&gt;while&lt;/code&gt; and the like) and</source>
          <target state="translated">제어 구조 ( &lt;code&gt;if&lt;/code&gt; , &lt;code&gt;while&lt;/code&gt; 등) 를 구현하는 함수를 포함 하고</target>
        </trans-unit>
        <trans-unit id="5306ca990f920ccf0b74788fb1427bedb68ab005" translate="yes" xml:space="preserve">
          <source>contains well-formed UTF-8. Returns true if successful, false otherwise.</source>
          <target state="translated">올바른 형식의 UTF-8을 포함합니다. 성공하면 true를, 그렇지 않으면 false를 반환합니다.</target>
        </trans-unit>
        <trans-unit id="872301ecc9b3c84467427470058935d7214561b0" translate="yes" xml:space="preserve">
          <source>contains.U</source>
          <target state="translated">contains.U</target>
        </trans-unit>
        <trans-unit id="137026ac560ad7653b25bdc20c97ee1bd7ece8f3" translate="yes" xml:space="preserve">
          <source>contains_pod( $file , $verbose )</source>
          <target state="translated">contains_pod ($ file, $ verbose)</target>
        </trans-unit>
        <trans-unit id="ec2727b3b71f07635f726026bef44352ec89e452" translate="yes" xml:space="preserve">
          <source>context</source>
          <target state="translated">context</target>
        </trans-unit>
        <trans-unit id="a3eeca228bc889520c139930476789b402394dd2" translate="yes" xml:space="preserve">
          <source>context), you would do the following:</source>
          <target state="translated">상황에 따라 다음을 수행하십시오.</target>
        </trans-unit>
        <trans-unit id="5a99ed2f608eaf4f435e0115b942d1717c1469e7" translate="yes" xml:space="preserve">
          <source>context, the &lt;code&gt;$@&lt;/code&gt; variable is set. Accessing &lt;code&gt;$@-&amp;gt;{error}&lt;/code&gt; returns one of the error diagnostics listed below. Accessing &lt;code&gt;$@-&amp;gt;{pos}&lt;/code&gt; returns the offset into the original string at which the error was detected (although not necessarily where it occurred!) Printing &lt;code&gt;$@&lt;/code&gt; directly produces the error message, with the offset appended. On success, the &lt;code&gt;$@&lt;/code&gt; variable is guaranteed to be &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">컨텍스트에서 &lt;code&gt;$@&lt;/code&gt; 변수가 설정됩니다. &lt;code&gt;$@-&amp;gt;{error}&lt;/code&gt; 액세스 하면 아래 나열된 오류 진단 중 하나가 반환됩니다. &lt;code&gt;$@-&amp;gt;{pos}&lt;/code&gt; 액세스 하면 오류가 감지 된 원래 문자열로 오프셋을 반환합니다 (필수 위치는 아니지만!) &lt;code&gt;$@&lt;/code&gt; 직접 인쇄 하면 오프셋이 추가 된 오류 메시지가 생성됩니다. 성공하면 &lt;code&gt;$@&lt;/code&gt; 변수는 &lt;code&gt;&lt;a href=&quot;../functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="14700e97a4da0be29b50c0dae3132b7c369e29c6" translate="yes" xml:space="preserve">
          <source>contexts</source>
          <target state="translated">contexts</target>
        </trans-unit>
        <trans-unit id="39d550f280658b767ff7493844c3e30cdf5894bc" translate="yes" xml:space="preserve">
          <source>contexts from the actual types of its operands and uses that type information to select a suitable comparison mechanism.</source>
          <target state="translated">피연산자의 실제 유형에서 컨텍스트를 찾고 해당 유형 정보를 사용하여 적합한 비교 메커니즘을 선택합니다.</target>
        </trans-unit>
        <trans-unit id="f22d8d92136f354829a39361ebf819a0c87f2bda" translate="yes" xml:space="preserve">
          <source>contiguous whitespace (not just a single space character) is used as a separator. However, this special treatment can be avoided by specifying the pattern &lt;code&gt;/ /&lt;/code&gt; instead of the string &lt;code&gt;&quot; &quot;&lt;/code&gt; , thereby allowing only a single space character to be a separator. In earlier Perls this special case was restricted to the use of a plain &lt;code&gt;&quot; &quot;&lt;/code&gt; as the pattern argument to split, in Perl 5.18.0 and later this special case is triggered by any expression which evaluates as the simple string &lt;code&gt;&quot; &quot;&lt;/code&gt; .</source>
          <target state="translated">단일 공백 ​​문자가 아닌 연속 공백이 분리 자로 사용됩니다. 그러나 문자열 &lt;code&gt;&quot; &quot;&lt;/code&gt; 대신 패턴 &lt;code&gt;/ /&lt;/code&gt; 을 지정하면 이러한 특수한 처리를 피할 수 있으므로 단일 공백 ​​문자 만 구분 기호로 사용할 수 있습니다. 이전 Perls에서는이 특수 사례가 일반 &lt;code&gt;&quot; &quot;&lt;/code&gt; 분할 패턴 인수로 사용되도록 제한되었으며, Perl 5.18.0 이상에서는이 특수 사례가 단순 문자열 &lt;code&gt;&quot; &quot;&lt;/code&gt; 으로 평가되는 표현식에 의해 트리거됩니다 .</target>
        </trans-unit>
        <trans-unit id="78a343b7196ffacef4e4111d72721d860fab69a6" translate="yes" xml:space="preserve">
          <source>contiguous. It still leaves the matching position after the here document, but now the rest of the line on which the here document starts is not skipped.</source>
          <target state="translated">연속적. here 문서 뒤에 여전히 일치하는 위치를 유지하지만 이제 here 문서가 시작되는 나머지 줄은 건너 뛰지 않습니다.</target>
        </trans-unit>
        <trans-unit id="eee0bbba4ff92adbeb038a77df0466d660f15716" translate="yes" xml:space="preserve">
          <source>continue</source>
          <target state="translated">continue</target>
        </trans-unit>
        <trans-unit id="d621f977fc5b4a596a11f857850602ac8b190701" translate="yes" xml:space="preserve">
          <source>continue BLOCK</source>
          <target state="translated">블록 계속</target>
        </trans-unit>
        <trans-unit id="633cbbb1b27b0398b3ca7eb06922aad56d751b9c" translate="yes" xml:space="preserve">
          <source>controlling program, instead of</source>
          <target state="translated">제어 프로그램 대신</target>
        </trans-unit>
        <trans-unit id="4719418f83051cf6557dbd49eac79ed5514925b0" translate="yes" xml:space="preserve">
          <source>conversion functions do croak() on bad arguments.) It is therefore essential to check return values from these functions. Always begin your socket programs this way for optimal success, and don't forget to add the &lt;b&gt;-T&lt;/b&gt; taint-checking flag to the &lt;code&gt;#!&lt;/code&gt; line for servers:</source>
          <target state="translated">변환 함수는 잘못된 인수에 대해 croak ()를 수행합니다.) 따라서 이러한 함수에서 반환 값을 확인해야합니다. 최적의 성공을 위해 항상 이런 방식으로 소켓 프로그램을 시작 하고 &lt;code&gt;#!&lt;/code&gt; &lt;b&gt;-T&lt;/b&gt; taint-checking 플래그를 추가하는 것을 잊지 마십시오 ! 서버 라인 :</target>
        </trans-unit>
        <trans-unit id="2484757b822d6a8ec055551756531c20c9545487" translate="yes" xml:space="preserve">
          <source>converts C header files into XS modules, and will try and write as much glue between C libraries and Perl modules as it can. It's also very useful for creating skeletons of pure Perl modules.</source>
          <target state="translated">C 헤더 파일을 XS 모듈로 변환하고 C 라이브러리와 Perl 모듈 사이에 가능한 많은 접착제를 시도하고 작성합니다. 또한 순수한 Perl 모듈의 골격을 만드는 데 매우 유용합니다.</target>
        </trans-unit>
        <trans-unit id="e236c7fcc533441e580388a48ee6c1eb0630aba6" translate="yes" xml:space="preserve">
          <source>converts a string representing a binary number to numeric form.</source>
          <target state="translated">이진수를 나타내는 문자열을 숫자 형식으로 변환합니다.</target>
        </trans-unit>
        <trans-unit id="98a8e6a8b2996b6a160c2a27faefcd5e98e76254" translate="yes" xml:space="preserve">
          <source>converts a string representing a hex number to numeric form.</source>
          <target state="translated">16 진수를 나타내는 문자열을 숫자 형식으로 변환합니다.</target>
        </trans-unit>
        <trans-unit id="5372738b9637da96901885d0e698d1fa85c1d7b9" translate="yes" xml:space="preserve">
          <source>converts a string representing an octal number to numeric form.</source>
          <target state="translated">8 진수를 나타내는 문자열을 숫자 형식으로 변환합니다.</target>
        </trans-unit>
        <trans-unit id="a4a102f879e8471e55679daf6e698de673ddb16e" translate="yes" xml:space="preserve">
          <source>converts any C header files specified to the corresponding Perl header file format. It is most easily run while in /usr/include:</source>
          <target state="translated">지정된 C 헤더 파일을 해당 Perl 헤더 파일 형식으로 변환합니다. / usr / include에있는 동안 가장 쉽게 실행됩니다.</target>
        </trans-unit>
        <trans-unit id="34338ec9943dcbf6124b0147f1de16a04c24de3a" translate="yes" xml:space="preserve">
          <source>coordinate and the</source>
          <target state="translated">좌표와</target>
        </trans-unit>
        <trans-unit id="b8350600f526d289bd9e95c43cde8ce328e85c2a" translate="yes" xml:space="preserve">
          <source>coordinate. See also &lt;a href=&quot;math/trig&quot;&gt;Math::Trig&lt;/a&gt;.</source>
          <target state="translated">동등 어구. &lt;a href=&quot;math/trig&quot;&gt;Math :: Trig&lt;/a&gt; 도 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="00f75dd8d6816b55dfa981aea23c36226a3c13f4" translate="yes" xml:space="preserve">
          <source>coordinate. The North Pole is therefore</source>
          <target state="translated">동등 어구. 따라서 북극은</target>
        </trans-unit>
        <trans-unit id="4bee6a29c81fb6cfb3f0ccd73759d5d7493123ac" translate="yes" xml:space="preserve">
          <source>coordinate. The angle from the</source>
          <target state="translated">동등 어구. 의 각도</target>
        </trans-unit>
        <trans-unit id="98d9e552ccd124aa232a89d1b97e68700b00c141" translate="yes" xml:space="preserve">
          <source>coordinate. The angle in the</source>
          <target state="translated">동등 어구. 의 각도</target>
        </trans-unit>
        <trans-unit id="c7c925e009e4517e71ee344e00311a6353973c12" translate="yes" xml:space="preserve">
          <source>coordinate. The third coordinate is the</source>
          <target state="translated">동등 어구. 세 번째 좌표는</target>
        </trans-unit>
        <trans-unit id="3bb4096cd3e137920b80365c7ccb27f9ced60fe0" translate="yes" xml:space="preserve">
          <source>cop</source>
          <target state="translated">cop</target>
        </trans-unit>
        <trans-unit id="d6add04179c575e90ca0cfb2394dcf612938b72b" translate="yes" xml:space="preserve">
          <source>cophh</source>
          <target state="translated">cophh</target>
        </trans-unit>
        <trans-unit id="475f96eca831d080a0c1c4e82e61660869fdbccd" translate="yes" xml:space="preserve">
          <source>copies</source>
          <target state="translated">copies</target>
        </trans-unit>
        <trans-unit id="f84e2e2dadd87384fb55f25886926b777e8378f1" translate="yes" xml:space="preserve">
          <source>copy</source>
          <target state="translated">copy</target>
        </trans-unit>
        <trans-unit id="2485b57e49793f529fb0cc34d378ecf20efb1a78" translate="yes" xml:space="preserve">
          <source>copy of</source>
          <target state="translated">복사본</target>
        </trans-unit>
        <trans-unit id="ec49698ab3e07f7975d6068f30b75f21078351f3" translate="yes" xml:space="preserve">
          <source>copy of the Perl stack pointer.</source>
          <target state="translated">Perl 스택 포인터의 사본.</target>
        </trans-unit>
        <trans-unit id="2b2ed0922e5c552c1298785802c663d39da798ea" translate="yes" xml:space="preserve">
          <source>copy()</source>
          <target state="translated">copy()</target>
        </trans-unit>
        <trans-unit id="fd55385eb48f393c84c0b727ea5b123b7df43771" translate="yes" xml:space="preserve">
          <source>corelist</source>
          <target state="translated">corelist</target>
        </trans-unit>
        <trans-unit id="6939cd5fb17cf5658056113938aafea0e6ed75d1" translate="yes" xml:space="preserve">
          <source>corelist - a commandline frontend to Module::CoreList</source>
          <target state="translated">corelist-Module :: CoreList에 대한 명령 행 프론트 엔드</target>
        </trans-unit>
        <trans-unit id="18040567b4508fbf83110e29def8c8ebc92b5480" translate="yes" xml:space="preserve">
          <source>correctly</source>
          <target state="translated">correctly</target>
        </trans-unit>
        <trans-unit id="5e3a2e46e91ed1c6b53b5b890370200bef1a2e60" translate="yes" xml:space="preserve">
          <source>corresponding to</source>
          <target state="translated">에 해당하는</target>
        </trans-unit>
        <trans-unit id="e7a40ef5b5a7db27987f7449f599734f590378ab" translate="yes" xml:space="preserve">
          <source>correspondingly, you need to hand-edit</source>
          <target state="translated">이에 따라 직접 편집해야합니다</target>
        </trans-unit>
        <trans-unit id="5bcc2c4d81811ed80bdd75460668f2bc84ab2137" translate="yes" xml:space="preserve">
          <source>cos</source>
          <target state="translated">cos</target>
        </trans-unit>
        <trans-unit id="2b1ed3a70ed16bc27d8adf2da5017ab39b17af11" translate="yes" xml:space="preserve">
          <source>cos EXPR</source>
          <target state="translated">코스 EXPR</target>
        </trans-unit>
        <trans-unit id="81dbf9771ca0e4359f0827ba522d0d5e08233012" translate="yes" xml:space="preserve">
          <source>cosec</source>
          <target state="translated">cosec</target>
        </trans-unit>
        <trans-unit id="d3d979ce266c12a742c772be86181f1a30419190" translate="yes" xml:space="preserve">
          <source>cosech</source>
          <target state="translated">cosech</target>
        </trans-unit>
        <trans-unit id="7fd2e982067b387f73dcb93cf080fe66cc2f33b3" translate="yes" xml:space="preserve">
          <source>cot</source>
          <target state="translated">cot</target>
        </trans-unit>
        <trans-unit id="2f723208a5459ef4be350e5486eb56c7c5225202" translate="yes" xml:space="preserve">
          <source>cotan</source>
          <target state="translated">cotan</target>
        </trans-unit>
        <trans-unit id="c3c86eb1ad84347701cf3c00659f271340a34ef2" translate="yes" xml:space="preserve">
          <source>cotanh</source>
          <target state="translated">cotanh</target>
        </trans-unit>
        <trans-unit id="90deb50615027dd3aaf70c6323942dc959e1b32b" translate="yes" xml:space="preserve">
          <source>coth</source>
          <target state="translated">coth</target>
        </trans-unit>
        <trans-unit id="e30de8fdbd3f2502c1d3f32cf7288b3caecc93ee" translate="yes" xml:space="preserve">
          <source>could</source>
          <target state="translated">could</target>
        </trans-unit>
        <trans-unit id="c91c97e310f7b524f0d2829665eb1979e5325553" translate="yes" xml:space="preserve">
          <source>could (unless a method is specifically declared for the key &lt;code&gt;'+'&lt;/code&gt; ) result in a call</source>
          <target state="translated">( &lt;code&gt;'+'&lt;/code&gt; 키에 대해 메소드가 특별히 선언되지 않은 한 ) 호출이 발생할 수 있음</target>
        </trans-unit>
        <trans-unit id="c4e5b9a873cc7a9940fe960e094beba494d78f0b" translate="yes" xml:space="preserve">
          <source>could potentially trigger two filters, one for the writing of the key &quot;abc&quot; and another for writing the value 42. Similarly, this snippet</source>
          <target state="translated">하나는 키 &quot;abc&quot;를 기록하기위한 필터와 값 42를 기록하기위한 필터를 잠재적으로 트리거 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ee9f38e186ba06f57b7b74d7e626b94e13ce2556" translate="yes" xml:space="preserve">
          <source>count</source>
          <target state="translated">count</target>
        </trans-unit>
        <trans-unit id="fc9ec9f65f5ff87c03a0a80c679c8eb98ebd144d" translate="yes" xml:space="preserve">
          <source>count as a loop, so the loop control statements &lt;code&gt;&lt;a href=&quot;functions/next&quot;&gt;next&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/last&quot;&gt;last&lt;/a&gt;&lt;/code&gt;, or &lt;code&gt;&lt;a href=&quot;functions/redo&quot;&gt;redo&lt;/a&gt;&lt;/code&gt; cannot be used to leave or restart the block.</source>
          <target state="translated">루프로 계산되므로 &lt;code&gt;&lt;a href=&quot;functions/next&quot;&gt;next&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;functions/last&quot;&gt;last&lt;/a&gt;&lt;/code&gt; 또는 &lt;code&gt;&lt;a href=&quot;functions/redo&quot;&gt;redo&lt;/a&gt;&lt;/code&gt; 루프 제어문을 사용하여 블록을 종료하거나 다시 시작할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="3749c0e3ee6fcca3254e89b8c05bafb50b5016eb" translate="yes" xml:space="preserve">
          <source>count as a loop, so the loop control statements &lt;code&gt;&lt;a href=&quot;functions/next&quot;&gt;next&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;functions/last&quot;&gt;last&lt;/a&gt;&lt;/code&gt;, or &lt;code&gt;&lt;a href=&quot;functions/redo&quot;&gt;redo&lt;/a&gt;&lt;/code&gt; cannot be used to leave or restart the block. See &lt;a href=&quot;perlsyn&quot;&gt;perlsyn&lt;/a&gt; for alternative strategies.</source>
          <target state="translated">루프로 계산되므로 &lt;code&gt;&lt;a href=&quot;functions/next&quot;&gt;next&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;functions/last&quot;&gt;last&lt;/a&gt;&lt;/code&gt; 또는 &lt;code&gt;&lt;a href=&quot;functions/redo&quot;&gt;redo&lt;/a&gt;&lt;/code&gt; 루프 제어문을 사용하여 블록을 종료하거나 다시 시작할 수 없습니다. 대체 전략 은 &lt;a href=&quot;perlsyn&quot;&gt;perlsyn&lt;/a&gt; 을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="17283885133328f25c078ae27e90aa6cfec56752" translate="yes" xml:space="preserve">
          <source>count as a loop, so the loop control statements &lt;code&gt;&lt;a href=&quot;next&quot;&gt;next&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;last&quot;&gt;last&lt;/a&gt;&lt;/code&gt;, or &lt;code&gt;&lt;a href=&quot;redo&quot;&gt;redo&lt;/a&gt;&lt;/code&gt; cannot be used to leave or restart the block.</source>
          <target state="translated">루프로 계산되므로 &lt;code&gt;&lt;a href=&quot;next&quot;&gt;next&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;last&quot;&gt;last&lt;/a&gt;&lt;/code&gt; 또는 &lt;code&gt;&lt;a href=&quot;redo&quot;&gt;redo&lt;/a&gt;&lt;/code&gt; 루프 제어문을 사용하여 블록을 종료하거나 다시 시작할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="41f6af29328830a1db9688bf89de226db6f277ef" translate="yes" xml:space="preserve">
          <source>count as a loop, so the loop control statements &lt;code&gt;&lt;a href=&quot;next&quot;&gt;next&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;last&quot;&gt;last&lt;/a&gt;&lt;/code&gt;, or &lt;code&gt;&lt;a href=&quot;redo&quot;&gt;redo&lt;/a&gt;&lt;/code&gt; cannot be used to leave or restart the block. See &lt;a href=&quot;../perlsyn&quot;&gt;perlsyn&lt;/a&gt; for alternative strategies.</source>
          <target state="translated">루프로 계산되므로 &lt;code&gt;&lt;a href=&quot;next&quot;&gt;next&lt;/a&gt;&lt;/code&gt; , &lt;code&gt;&lt;a href=&quot;last&quot;&gt;last&lt;/a&gt;&lt;/code&gt; 또는 &lt;code&gt;&lt;a href=&quot;redo&quot;&gt;redo&lt;/a&gt;&lt;/code&gt; 루프 제어문을 사용하여 블록을 종료하거나 다시 시작할 수 없습니다. 대체 전략 은 &lt;a href=&quot;../perlsyn&quot;&gt;perlsyn&lt;/a&gt; 을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="3510fce2f9f8ca88fafa9cc2ae095cb6652b3285" translate="yes" xml:space="preserve">
          <source>count as loops.) The &lt;code&gt;&lt;a href=&quot;functions/continue&quot;&gt;continue&lt;/a&gt;&lt;/code&gt; block is optional.</source>
          <target state="translated">루프로 계산합니다.) &lt;code&gt;&lt;a href=&quot;functions/continue&quot;&gt;continue&lt;/a&gt;&lt;/code&gt; 블록은 선택 사항입니다.</target>
        </trans-unit>
        <trans-unit id="733232300c7b6972b9008fb62af14d73e8001245" translate="yes" xml:space="preserve">
          <source>countit - see how many times a chunk of code runs in a given time</source>
          <target state="translated">countit-주어진 시간에 코드 덩어리가 몇 번 실행되는지 확인</target>
        </trans-unit>
        <trans-unit id="8e68b3e5af636475363c23b52ade8e6064b05806" translate="yes" xml:space="preserve">
          <source>country</source>
          <target state="translated">country</target>
        </trans-unit>
        <trans-unit id="3f81e91d69a8a61ffbf19297eb0791ad54ce5690" translate="yes" xml:space="preserve">
          <source>cp</source>
          <target state="translated">cp</target>
        </trans-unit>
        <trans-unit id="59f869352b368644ee4b1686961cc9d943046b55" translate="yes" xml:space="preserve">
          <source>cpan</source>
          <target state="translated">cpan</target>
        </trans-unit>
        <trans-unit id="9e1e6e1e3374e4b1819e5a93071779728c67e76c" translate="yes" xml:space="preserve">
          <source>cpan/</source>
          <target state="translated">cpan/</target>
        </trans-unit>
        <trans-unit id="646081900f2ce796c13fdf0ec5c1c6d5a28019e6" translate="yes" xml:space="preserve">
          <source>cpan/HTTP-Tiny/t/110_mirror.t</source>
          <target state="translated">cpan/HTTP-Tiny/t/110_mirror.t</target>
        </trans-unit>
        <trans-unit id="da2ffe1e8ff32f669a8b365d03c6e3a6cc22fde8" translate="yes" xml:space="preserve">
          <source>cpd (&lt;a href=&quot;http://pmd.sourceforge.net/cpd.html&quot;&gt;http://pmd.sourceforge.net/cpd.html&lt;/a&gt;) is part of the pmd project (&lt;a href=&quot;http://pmd.sourceforge.net/&quot;&gt;http://pmd.sourceforge.net/&lt;/a&gt;). pmd was originally written for static analysis of Java code, but later the cpd part of it was extended to parse also C and C++.</source>
          <target state="translated">cpd ( &lt;a href=&quot;http://pmd.sourceforge.net/cpd.html&quot;&gt;http://pmd.sourceforge.net/cpd.html&lt;/a&gt; )는 pmd 프로젝트 ( &lt;a href=&quot;http://pmd.sourceforge.net/&quot;&gt;http://pmd.sourceforge.net/&lt;/a&gt; )의 일부입니다 . pmd는 원래 Java 코드의 정적 분석을 위해 작성되었지만 나중에 cpd 부분은 C 및 C ++도 구문 분석하도록 확장되었습니다.</target>
        </trans-unit>
        <trans-unit id="3f13690d9f78c0dd3b78cc56249d1342a0762ff6" translate="yes" xml:space="preserve">
          <source>cpd (cut-and-paste detector)</source>
          <target state="translated">cpd (잘라 내기 및 붙여 넣기 감지기)</target>
        </trans-unit>
        <trans-unit id="edd9a349011f4725e482bc6bc145ec92ab109a82" translate="yes" xml:space="preserve">
          <source>cpp</source>
          <target state="translated">cpp</target>
        </trans-unit>
        <trans-unit id="0cd0c956de252609d33214e77f1d31c75fc11ba3" translate="yes" xml:space="preserve">
          <source>cpp_stuff.U</source>
          <target state="translated">cpp_stuff.U</target>
        </trans-unit>
        <trans-unit id="b2167df3c1c60dd7ad51bbf712d081b717ca8ed1" translate="yes" xml:space="preserve">
          <source>cppstdin.U</source>
          <target state="translated">cppstdin.U</target>
        </trans-unit>
        <trans-unit id="05531e92a060a8064db013666efa6357dae24486" translate="yes" xml:space="preserve">
          <source>create a local variable. This is known as dynamic scoping. Lexical scoping is done with &lt;code&gt;&lt;a href=&quot;functions/my&quot;&gt;my&lt;/a&gt;&lt;/code&gt;, which works more like C's auto declarations.</source>
          <target state="translated">지역 변수를 만듭니다. 이것을 동적 범위 지정이라고합니다. 어휘 범위 지정은 &lt;code&gt;&lt;a href=&quot;functions/my&quot;&gt;my&lt;/a&gt;&lt;/code&gt; 로 수행되며 C의 자동 선언과 더 유사합니다.</target>
        </trans-unit>
        <trans-unit id="5b435cb4670fb9989f690757d28c921e069705ff" translate="yes" xml:space="preserve">
          <source>create the key.</source>
          <target state="translated">키를 만듭니다.</target>
        </trans-unit>
        <trans-unit id="d879e705f27e6b66619d4dafc1be673760766192" translate="yes" xml:space="preserve">
          <source>create the smallest possible gzip header (exactly 10 bytes). If you want greater control over what gets stored in the gzip header (like the original filename or a comment) use &lt;a href=&quot;../io/compress/gzip&quot;&gt;IO::Compress::Gzip&lt;/a&gt; instead. Similarly if you want to read the contents of the gzip header use &lt;a href=&quot;../io/uncompress/gunzip&quot;&gt;IO::Uncompress::Gunzip&lt;/a&gt;.</source>
          <target state="translated">가장 작은 gzip 헤더 (정확히 10 바이트)를 만듭니다. gzip 헤더에 저장된 내용 (예 : 원래 파일 이름 또는 주석)을보다 강력하게 제어하려면 &lt;a href=&quot;../io/compress/gzip&quot;&gt;IO :: Compress :: Gzip을&lt;/a&gt; 대신 사용하십시오. 마찬가지로 gzip 헤더의 내용을 읽으려면 &lt;a href=&quot;../io/uncompress/gunzip&quot;&gt;IO :: Uncompress :: Gunzip을 사용하십시오&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="a4c0122a517eca9362fb442b1949b747aabd4734" translate="yes" xml:space="preserve">
          <source>creates a whole new symbol table entry for the glob &lt;code&gt;name&lt;/code&gt; in the current package. That means that all variables in its glob slot ($name, @name, %name, &amp;amp;name, and the &lt;code&gt;name&lt;/code&gt; filehandle) are dynamically reset.</source>
          <target state="translated">현재 패키지에서 glob &lt;code&gt;name&lt;/code&gt; 에 대한 완전히 새로운 기호 테이블 항목을 작성 합니다. 즉, 글로브 슬롯의 모든 변수 ($ name, @name, % name, &amp;amp; name 및 &lt;code&gt;name&lt;/code&gt; filehandle)가 동적으로 재설정됩니다.</target>
        </trans-unit>
        <trans-unit id="4c6bb7dcb5125acb8022bbc170655e676dfc2515" translate="yes" xml:space="preserve">
          <source>creates actually a Math::BigInt and stores a reference to in $x. This happens transparently and behind your back, so to speak.</source>
          <target state="translated">실제로 Math :: BigInt를 작성하고 참조를 $ x에 저장합니다. 이것은 투명하고 등 뒤에서 일어나서 말하자면.</target>
        </trans-unit>
        <trans-unit id="4798abd80e0d4f05a5b14a2ff80d235983b66cbf" translate="yes" xml:space="preserve">
          <source>creates an &quot;:all&quot; tag which contains some (but not really all) of its categories. That could be done with one small change:</source>
          <target state="translated">범주의 일부 (실제로는 전부는 아님)를 포함하는 &quot;: all&quot;태그를 만듭니다. 하나의 작은 변경으로 수행 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="bca47fd52c3a4de99dd9e93e28f23b793fa83105" translate="yes" xml:space="preserve">
          <source>creates an attribute handler that applies only to scalars:</source>
          <target state="translated">스칼라에만 적용되는 속성 핸들러를 작성합니다.</target>
        </trans-unit>
        <trans-unit id="d57bdd2b468c862463f2a2f2034aa2d9abf553f8" translate="yes" xml:space="preserve">
          <source>creates two scopes: the first starts at the &lt;code&gt;(&lt;/code&gt; and has &lt;code&gt;full == 1&lt;/code&gt; , the second starts at the &lt;code&gt;{&lt;/code&gt; and has &lt;code&gt;full == 0&lt;/code&gt; . Both end at the &lt;code&gt;}&lt;/code&gt;, so calls to &lt;code&gt;start&lt;/code&gt; and &lt;code&gt;pre/post_end&lt;/code&gt; will match. Anything pushed onto the save stack by this hook will be popped just before the scope ends (between the &lt;code&gt;pre_&lt;/code&gt; and &lt;code&gt;post_end&lt;/code&gt; hooks, in fact).</source>
          <target state="translated">이 개 범위 만들어 다음에 처음 시작 &lt;code&gt;(&lt;/code&gt; 및이 &lt;code&gt;full == 1&lt;/code&gt; 에서, 두 번째 시작을 &lt;code&gt;{&lt;/code&gt; 및이 &lt;code&gt;full == 0&lt;/code&gt; . 상기 두 끝을 &lt;code&gt;}&lt;/code&gt; 호출하기 때문에, &lt;code&gt;start&lt;/code&gt; 및 &lt;code&gt;pre/post_end&lt;/code&gt; 일치합니다 뭐든지 푸시. 이 후크에 의한 저장 스택은 범위가 끝나기 직전 에 (사실 &lt;code&gt;pre_&lt;/code&gt; 와 &lt;code&gt;post_end&lt;/code&gt; 후크 사이에) 팝 됩니다.</target>
        </trans-unit>
        <trans-unit id="106df19f3461a102c7f9ca426d90c7b79a74fdda" translate="yes" xml:space="preserve">
          <source>croak in a statement that looks like it would modify a numbered capture variable. This is because the STORE callback will not be called if Perl can determine that it doesn't have to modify the value. This is exactly how tied variables behave in the same situation:</source>
          <target state="translated">번호가 매겨진 캡처 변수를 수정하는 것처럼 보이는 명령문에서 croak. Perl이 값을 수정할 필요가 없다고 판단 할 수 있으면 STORE 콜백이 호출되지 않기 때문입니다. 이것은 같은 상황에서 묶인 변수가 정확히 어떻게 동작하는지입니다 :</target>
        </trans-unit>
        <trans-unit id="02f919145acd5795f2be3b610280992c94482221" translate="yes" xml:space="preserve">
          <source>cron</source>
          <target state="translated">cron</target>
        </trans-unit>
        <trans-unit id="8bfe65513ae6e6a1af42c06d65fe37c9eec15df8" translate="yes" xml:space="preserve">
          <source>crypt</source>
          <target state="translated">crypt</target>
        </trans-unit>
        <trans-unit id="2e9f48352e9b455bb12c45023163ec783d4a7204" translate="yes" xml:space="preserve">
          <source>crypt PLAINTEXT,SALT</source>
          <target state="translated">토굴 일반 텍스트, 소금</target>
        </trans-unit>
        <trans-unit id="c168a1a2ae6f569e7911794fb27f81843b3d2e7c" translate="yes" xml:space="preserve">
          <source>crypt() is a one-way hash function. The PLAINTEXT and SALT are turned into a short string, called a digest, which is returned. The same PLAINTEXT and SALT will always return the same string, but there is no (known) way to get the original PLAINTEXT from the hash. Small changes in the PLAINTEXT or SALT will result in large changes in the digest.</source>
          <target state="translated">crypt ()는 단방향 해시 함수입니다. PLAINTEXT 및 SALT는 다이제스트라고하는 짧은 문자열로 변환되어 반환됩니다. 동일한 PLAINTEXT와 SALT는 항상 동일한 문자열을 반환하지만 해시에서 원래 PLAINTEXT를 가져 오는 방법은 없습니다. PLAINTEXT 또는 SALT의 작은 변경은 다이제스트에 큰 변경을 초래합니다.</target>
        </trans-unit>
        <trans-unit id="7018d9174fb00aaa4b853b352d90b923967ab4c7" translate="yes" xml:space="preserve">
          <source>csc</source>
          <target state="translated">csc</target>
        </trans-unit>
        <trans-unit id="d001689ac62cfb0c04a33b16bc1a20d965db399d" translate="yes" xml:space="preserve">
          <source>csch</source>
          <target state="translated">csch</target>
        </trans-unit>
        <trans-unit id="9145a3ad32249e3a113e52d2384b4bf1bb0f3b0f" translate="yes" xml:space="preserve">
          <source>csh</source>
          <target state="translated">csh</target>
        </trans-unit>
        <trans-unit id="6f2d5fee544562755bbcf3f39a480587ba3e49de" translate="yes" xml:space="preserve">
          <source>csh.</source>
          <target state="translated">csh.</target>
        </trans-unit>
        <trans-unit id="9f370c9afd3aed9749f78e294406ff5164e18595" translate="yes" xml:space="preserve">
          <source>ctal or</source>
          <target state="translated">ctal 또는</target>
        </trans-unit>
        <trans-unit id="5f4562d4088fad27768c94dfe632c1866009d23f" translate="yes" xml:space="preserve">
          <source>ctal.</source>
          <target state="translated">ctal.</target>
        </trans-unit>
        <trans-unit id="15128f80670b2bc00473a6c2266e24162cc364d7" translate="yes" xml:space="preserve">
          <source>ctime is creation time instead of inode change time (Win32).</source>
          <target state="translated">ctime은 inode 변경 시간 (Win32) 대신 생성 시간입니다.</target>
        </trans-unit>
        <trans-unit id="6d9f092f5f236a35c5ae0f61df532a58b8a5856d" translate="yes" xml:space="preserve">
          <source>ctime not supported on UFS (Mac OS X).</source>
          <target state="translated">ctime은 UFS (Mac OS X)에서 지원되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="afd17208ab8f7e8b347263da2865b7a7432cfe97" translate="yes" xml:space="preserve">
          <source>ctype.h</source>
          <target state="translated">ctype.h</target>
        </trans-unit>
        <trans-unit id="405ab5d2b930fe3725b3cb1ace051f9fd3d6d7af" translate="yes" xml:space="preserve">
          <source>current</source>
          <target state="translated">current</target>
        </trans-unit>
        <trans-unit id="0a10abed0be29396c6db539c6d3b8235c97ddd65" translate="yes" xml:space="preserve">
          <source>currently: &lt;code&gt;env perl perlconfig distribution module&lt;/code&gt;</source>
          <target state="translated">현재 : &lt;code&gt;env perl perlconfig distribution module&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="164c4a27d71c04134780d4cd2d452b4e9e4ddc96" translate="yes" xml:space="preserve">
          <source>cv</source>
          <target state="translated">cv</target>
        </trans-unit>
        <trans-unit id="7106c803ab38fc8e5b1f7fcaf0a665e51f9ca591" translate="yes" xml:space="preserve">
          <source>cvop</source>
          <target state="translated">cvop</target>
        </trans-unit>
        <trans-unit id="abfaabafddc502f22c9572e8c2d4f5674605a2e3" translate="yes" xml:space="preserve">
          <source>cvtres.exe is required by link.exe when using a .res file. It is actually installed by the .NET Framework SDK, but into a location such as the following:</source>
          <target state="translated">.res 파일을 사용할 때 link.exe에 cvtres.exe가 필요합니다. 실제로는 .NET Framework SDK에 의해 설치되지만 다음과 같은 위치에 설치됩니다.</target>
        </trans-unit>
        <trans-unit id="d7320b31283ac19028bafe9886b5c221e881502c" translate="yes" xml:space="preserve">
          <source>cygperl5_16.dll</source>
          <target state="translated">cygperl5_16.dll</target>
        </trans-unit>
        <trans-unit id="3c363836cf4e16666669a25da280a1865c2d2874" translate="yes" xml:space="preserve">
          <source>d</source>
          <target state="translated">d</target>
        </trans-unit>
        <trans-unit id="5a759e9449eca397b4585e1d1fd9b348a4b515c8" translate="yes" xml:space="preserve">
          <source>d_Gconvert may be set to override Configure with a platform- specific function. If this function expects a double, a different value may need to be set by the</source>
          <target state="translated">d_Gconvert는 플랫폼 별 기능으로 구성을 무시하도록 설정 될 수 있습니다. 이 함수가 두 배가 필요한 경우 다른 값을 설정해야 할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="57313aa0d699891b715baa76c501717862f9c6ae" translate="yes" xml:space="preserve">
          <source>d__fwalk.U</source>
          <target state="translated">d__fwalk.U</target>
        </trans-unit>
        <trans-unit id="a4e7f21386f87ef7c1fd0bc35839b32956f597ec" translate="yes" xml:space="preserve">
          <source>d_access.U</source>
          <target state="translated">d_access.U</target>
        </trans-unit>
        <trans-unit id="55d1006684186b7f8e4a0296bae13f4d59c698ba" translate="yes" xml:space="preserve">
          <source>d_accessx.U</source>
          <target state="translated">d_accessx.U</target>
        </trans-unit>
        <trans-unit id="f0ac6b80d23bd77f6d1cc41b1150ffa39c8bbd6d" translate="yes" xml:space="preserve">
          <source>d_acosh.U</source>
          <target state="translated">d_acosh.U</target>
        </trans-unit>
        <trans-unit id="e7115d5159a72e108ad2694b5058ae288dbd52ba" translate="yes" xml:space="preserve">
          <source>d_aintl.U</source>
          <target state="translated">d_aintl.U</target>
        </trans-unit>
        <trans-unit id="74e588dce9c20c0ce8b36c50bc9a8abcd82a9cb3" translate="yes" xml:space="preserve">
          <source>d_alarm.U</source>
          <target state="translated">d_alarm.U</target>
        </trans-unit>
        <trans-unit id="e399057ffbf3bc0a7916547e9fe6d684ec5cfbf6" translate="yes" xml:space="preserve">
          <source>d_asctime_r.U</source>
          <target state="translated">d_asctime_r.U</target>
        </trans-unit>
        <trans-unit id="960f4add2a90547dc4a813983796203f792628ba" translate="yes" xml:space="preserve">
          <source>d_asinh.U</source>
          <target state="translated">d_asinh.U</target>
        </trans-unit>
        <trans-unit id="a104bd29e39a6aa3e752e1b96addb8ee0f926c26" translate="yes" xml:space="preserve">
          <source>d_atanh.U</source>
          <target state="translated">d_atanh.U</target>
        </trans-unit>
        <trans-unit id="692961e7ed99fa81d62f7536cdf07041fca461dc" translate="yes" xml:space="preserve">
          <source>d_attribut.U</source>
          <target state="translated">d_attribut.U</target>
        </trans-unit>
        <trans-unit id="d40cb034029d16e288606608d915dc6053d51b4d" translate="yes" xml:space="preserve">
          <source>d_backtrace.U</source>
          <target state="translated">d_backtrace.U</target>
        </trans-unit>
        <trans-unit id="cc09486a2f879d7de8991447737e785fb34512a6" translate="yes" xml:space="preserve">
          <source>d_bcmp.U</source>
          <target state="translated">d_bcmp.U</target>
        </trans-unit>
        <trans-unit id="ad52dfebd88fc782f319e91b8b070086f211ae28" translate="yes" xml:space="preserve">
          <source>d_bcopy.U</source>
          <target state="translated">d_bcopy.U</target>
        </trans-unit>
        <trans-unit id="958f6501addd2ca788581076a3b3089c9de1ccba" translate="yes" xml:space="preserve">
          <source>d_builtin.U</source>
          <target state="translated">d_builtin.U</target>
        </trans-unit>
        <trans-unit id="20266f9d23cc1bc712c1a68ac610c61138e4638d" translate="yes" xml:space="preserve">
          <source>d_bzero.U</source>
          <target state="translated">d_bzero.U</target>
        </trans-unit>
        <trans-unit id="ed980090902be825976ad473dd5d4dad7617db35" translate="yes" xml:space="preserve">
          <source>d_c99_variadic.U</source>
          <target state="translated">d_c99_variadic.U</target>
        </trans-unit>
        <trans-unit id="fae4d570397d90f5dec89977b7518f4a7571d055" translate="yes" xml:space="preserve">
          <source>d_casti32.U</source>
          <target state="translated">d_casti32.U</target>
        </trans-unit>
        <trans-unit id="2b5e95decd991782af20944a92f99bb839f14f6c" translate="yes" xml:space="preserve">
          <source>d_castneg.U</source>
          <target state="translated">d_castneg.U</target>
        </trans-unit>
        <trans-unit id="493c53c40edb5db35bc603adfb0c93e294c6cf88" translate="yes" xml:space="preserve">
          <source>d_cbrt.U</source>
          <target state="translated">d_cbrt.U</target>
        </trans-unit>
        <trans-unit id="096a16031618c5dd59672db5de5eff608e1f3cb5" translate="yes" xml:space="preserve">
          <source>d_chown.U</source>
          <target state="translated">d_chown.U</target>
        </trans-unit>
        <trans-unit id="9a038a94e7db4150d0f58dd7f0edd90655dfe30e" translate="yes" xml:space="preserve">
          <source>d_chroot.U</source>
          <target state="translated">d_chroot.U</target>
        </trans-unit>
        <trans-unit id="b63c9627d098800d39ca40d697baf6d74476ebed" translate="yes" xml:space="preserve">
          <source>d_chsize.U</source>
          <target state="translated">d_chsize.U</target>
        </trans-unit>
        <trans-unit id="2ec85552d337dc9808e0410fde95da5d171631a8" translate="yes" xml:space="preserve">
          <source>d_class.U</source>
          <target state="translated">d_class.U</target>
        </trans-unit>
        <trans-unit id="b185e845711e08e036f4c616de54061b9546d20d" translate="yes" xml:space="preserve">
          <source>d_clearenv.U</source>
          <target state="translated">d_clearenv.U</target>
        </trans-unit>
        <trans-unit id="acd2e806af8a8693e21daf3a329eed930ce1d325" translate="yes" xml:space="preserve">
          <source>d_closedir.U</source>
          <target state="translated">d_closedir.U</target>
        </trans-unit>
        <trans-unit id="6918c58efa254e6bb6ca8c3825bc9eb6691b1354" translate="yes" xml:space="preserve">
          <source>d_cmsghdr_s.U</source>
          <target state="translated">d_cmsghdr_s.U</target>
        </trans-unit>
        <trans-unit id="82c4ed0336662bd80e4b9d223e3c2ff08c0f41dd" translate="yes" xml:space="preserve">
          <source>d_const.U</source>
          <target state="translated">d_const.U</target>
        </trans-unit>
        <trans-unit id="49bbc34feebdae07d8bec84c5de2f4c7fb591013" translate="yes" xml:space="preserve">
          <source>d_copysign.U</source>
          <target state="translated">d_copysign.U</target>
        </trans-unit>
        <trans-unit id="14eab0a11fa1e7dd505766a6949ff148235e7edb" translate="yes" xml:space="preserve">
          <source>d_copysignl.U</source>
          <target state="translated">d_copysignl.U</target>
        </trans-unit>
        <trans-unit id="6e4b94074943964aa65ff528f782a9a5b1fe96d0" translate="yes" xml:space="preserve">
          <source>d_cplusplus.U</source>
          <target state="translated">d_cplusplus.U</target>
        </trans-unit>
        <trans-unit id="1f8b425b85071be6ae4eb7d90d16c31acea44894" translate="yes" xml:space="preserve">
          <source>d_crypt.U</source>
          <target state="translated">d_crypt.U</target>
        </trans-unit>
        <trans-unit id="f7ee9c6cf224c3cf855e386e20b51f79d4eaa09d" translate="yes" xml:space="preserve">
          <source>d_crypt_r.U</source>
          <target state="translated">d_crypt_r.U</target>
        </trans-unit>
        <trans-unit id="cb1c3f17fdc00bc8d95d1ed36bbc73bbd25793de" translate="yes" xml:space="preserve">
          <source>d_csh.U</source>
          <target state="translated">d_csh.U</target>
        </trans-unit>
        <trans-unit id="5ecf0bf5506f7396ee5905083306e938edeb3f6d" translate="yes" xml:space="preserve">
          <source>d_ctermid.U</source>
          <target state="translated">d_ctermid.U</target>
        </trans-unit>
        <trans-unit id="dcae0883ca9362a478ed33fc0081313700ba4e5b" translate="yes" xml:space="preserve">
          <source>d_ctermid_r.U</source>
          <target state="translated">d_ctermid_r.U</target>
        </trans-unit>
        <trans-unit id="357ec816bc42fd99a68703c6dc417f1677651e99" translate="yes" xml:space="preserve">
          <source>d_ctime_r.U</source>
          <target state="translated">d_ctime_r.U</target>
        </trans-unit>
        <trans-unit id="bc6de30e4a8656c49b91e07be9c2ab8894af2bdd" translate="yes" xml:space="preserve">
          <source>d_cuserid.U</source>
          <target state="translated">d_cuserid.U</target>
        </trans-unit>
        <trans-unit id="b17000e2ded681fcb95cca1e0526186f9b33f1e9" translate="yes" xml:space="preserve">
          <source>d_dbl_dig.U</source>
          <target state="translated">d_dbl_dig.U</target>
        </trans-unit>
        <trans-unit id="8612d4b652f2979932c96bf1ca7dc9200c76518f" translate="yes" xml:space="preserve">
          <source>d_dbminitproto.U</source>
          <target state="translated">d_dbminitproto.U</target>
        </trans-unit>
        <trans-unit id="c2bdd9db79207a03cc422db92662e779ef8dd059" translate="yes" xml:space="preserve">
          <source>d_difftime.U</source>
          <target state="translated">d_difftime.U</target>
        </trans-unit>
        <trans-unit id="1c20a8f3a68f3a097dc6878ac3805b74d9211bf1" translate="yes" xml:space="preserve">
          <source>d_dir_dd_fd.U</source>
          <target state="translated">d_dir_dd_fd.U</target>
        </trans-unit>
        <trans-unit id="ec159f1e0a73a594474fa6ae89c0a20579e39fc2" translate="yes" xml:space="preserve">
          <source>d_dirfd.U</source>
          <target state="translated">d_dirfd.U</target>
        </trans-unit>
        <trans-unit id="9b3165cc3c8011e8ad6f91854cb2686866e179a3" translate="yes" xml:space="preserve">
          <source>d_dladdr.U</source>
          <target state="translated">d_dladdr.U</target>
        </trans-unit>
        <trans-unit id="b70972dfb75561821beb601ccb3287c342eb55c8" translate="yes" xml:space="preserve">
          <source>d_dlerror.U</source>
          <target state="translated">d_dlerror.U</target>
        </trans-unit>
        <trans-unit id="2b5d12a7db0823de84c0367acad4c235ab064f96" translate="yes" xml:space="preserve">
          <source>d_dlopen.U</source>
          <target state="translated">d_dlopen.U</target>
        </trans-unit>
        <trans-unit id="dc8eed02e671ef678307e9e31da926de773d7e10" translate="yes" xml:space="preserve">
          <source>d_dlsymun.U</source>
          <target state="translated">d_dlsymun.U</target>
        </trans-unit>
        <trans-unit id="9e990b449bcb86098b00cfc09fe8dc9307acb7bd" translate="yes" xml:space="preserve">
          <source>d_dosuid.U</source>
          <target state="translated">d_dosuid.U</target>
        </trans-unit>
        <trans-unit id="4a2ad9cb61942b5f09e9017042cdeb9f570be3ad" translate="yes" xml:space="preserve">
          <source>d_drand48_r.U</source>
          <target state="translated">d_drand48_r.U</target>
        </trans-unit>
        <trans-unit id="93e47f6785b73f0e4f380d618a5328fc35e3349d" translate="yes" xml:space="preserve">
          <source>d_drand48proto.U</source>
          <target state="translated">d_drand48proto.U</target>
        </trans-unit>
        <trans-unit id="0e8171ae7619bc060c417ddc891f452d9ee4d2f4" translate="yes" xml:space="preserve">
          <source>d_dup2.U</source>
          <target state="translated">d_dup2.U</target>
        </trans-unit>
        <trans-unit id="13d99d3557d6463e65f12dab3a3b98f275ea745b" translate="yes" xml:space="preserve">
          <source>d_eaccess.U</source>
          <target state="translated">d_eaccess.U</target>
        </trans-unit>
        <trans-unit id="8942b760c472fd189eb8e058ab7d9a20d64a4fa7" translate="yes" xml:space="preserve">
          <source>d_endgrent.U</source>
          <target state="translated">d_endgrent.U</target>
        </trans-unit>
        <trans-unit id="5f1350c9863b1a138322db5880fe460a27554218" translate="yes" xml:space="preserve">
          <source>d_endgrent_r.U</source>
          <target state="translated">d_endgrent_r.U</target>
        </trans-unit>
        <trans-unit id="055cb43f460fe39ac04fd677b1a831f4d159c399" translate="yes" xml:space="preserve">
          <source>d_endhent.U</source>
          <target state="translated">d_endhent.U</target>
        </trans-unit>
        <trans-unit id="162b1dea1e482ab00847c6db280d9fe5838ec53d" translate="yes" xml:space="preserve">
          <source>d_endhostent_r.U</source>
          <target state="translated">d_endhostent_r.U</target>
        </trans-unit>
        <trans-unit id="9e9a377cadd06e267229e0a8c642446433b157ee" translate="yes" xml:space="preserve">
          <source>d_endnent.U</source>
          <target state="translated">d_endnent.U</target>
        </trans-unit>
        <trans-unit id="b6db102a3e11a5a88079818b05c512c28244e153" translate="yes" xml:space="preserve">
          <source>d_endnetent_r.U</source>
          <target state="translated">d_endnetent_r.U</target>
        </trans-unit>
        <trans-unit id="082434b739c16dafa9b9ff85b0080412c25e142f" translate="yes" xml:space="preserve">
          <source>d_endpent.U</source>
          <target state="translated">d_endpent.U</target>
        </trans-unit>
        <trans-unit id="dbc5e21bfeaa60eba8e35ead73c2aac0aadb5c86" translate="yes" xml:space="preserve">
          <source>d_endprotoent_r.U</source>
          <target state="translated">d_endprotoent_r.U</target>
        </trans-unit>
        <trans-unit id="0a438128e68f364ce1edfe9168384c370ab43078" translate="yes" xml:space="preserve">
          <source>d_endpwent.U</source>
          <target state="translated">d_endpwent.U</target>
        </trans-unit>
        <trans-unit id="290df3e2c64bd74ab162155d0a89b9dcc3ef4c34" translate="yes" xml:space="preserve">
          <source>d_endpwent_r.U</source>
          <target state="translated">d_endpwent_r.U</target>
        </trans-unit>
        <trans-unit id="8ea97974c355e0a355261d95fdac4300e951da34" translate="yes" xml:space="preserve">
          <source>d_endsent.U</source>
          <target state="translated">d_endsent.U</target>
        </trans-unit>
        <trans-unit id="0f45ae11575db454086967fe80a4258298abf4a6" translate="yes" xml:space="preserve">
          <source>d_endservent_r.U</source>
          <target state="translated">d_endservent_r.U</target>
        </trans-unit>
        <trans-unit id="ef1639c3b18f41085695b1642c287890d47b6956" translate="yes" xml:space="preserve">
          <source>d_erf.U</source>
          <target state="translated">d_erf.U</target>
        </trans-unit>
        <trans-unit id="f1c8317114a6e29b13819653d7eefdd60d830928" translate="yes" xml:space="preserve">
          <source>d_erfc.U</source>
          <target state="translated">d_erfc.U</target>
        </trans-unit>
        <trans-unit id="8d3ca9e633401175fac092ab243ed0acc0350dbf" translate="yes" xml:space="preserve">
          <source>d_exp2.U</source>
          <target state="translated">d_exp2.U</target>
        </trans-unit>
        <trans-unit id="1fab102a804397a68c80918e813717a1c544ca6f" translate="yes" xml:space="preserve">
          <source>d_expm1.U</source>
          <target state="translated">d_expm1.U</target>
        </trans-unit>
        <trans-unit id="685fe55c5f870175b5757716439517e51891b514" translate="yes" xml:space="preserve">
          <source>d_faststdio.U</source>
          <target state="translated">d_faststdio.U</target>
        </trans-unit>
        <trans-unit id="8335a708d750853a097559e9d852f3f88b5af450" translate="yes" xml:space="preserve">
          <source>d_fchdir.U</source>
          <target state="translated">d_fchdir.U</target>
        </trans-unit>
        <trans-unit id="3157c34d2ecd7ef6df64b281e86f2a2a5eb13c77" translate="yes" xml:space="preserve">
          <source>d_fchdir='define'</source>
          <target state="translated">d_fchdir='define'</target>
        </trans-unit>
        <trans-unit id="5d9ad69952867afa8d6bf3a5224032f310cb0cd4" translate="yes" xml:space="preserve">
          <source>d_fchdir='undef'</source>
          <target state="translated">d_fchdir='undef'</target>
        </trans-unit>
        <trans-unit id="609c41d6508a4ec4857efa2e4f5a2cb0c5c99cd7" translate="yes" xml:space="preserve">
          <source>d_fchmod.U</source>
          <target state="translated">d_fchmod.U</target>
        </trans-unit>
        <trans-unit id="ef7081bad9616cb32c7150906b6791d4e1eb767f" translate="yes" xml:space="preserve">
          <source>d_fchown.U</source>
          <target state="translated">d_fchown.U</target>
        </trans-unit>
        <trans-unit id="ade11c323f1a312a310054caaed1ccdc07152198" translate="yes" xml:space="preserve">
          <source>d_fcntl.U</source>
          <target state="translated">d_fcntl.U</target>
        </trans-unit>
        <trans-unit id="6b397e85b7df1147766250ebfbfad4e0b3c513c3" translate="yes" xml:space="preserve">
          <source>d_fcntl_can_lock.U</source>
          <target state="translated">d_fcntl_can_lock.U</target>
        </trans-unit>
        <trans-unit id="96cd2e736164f3d1c953572a858dd2f3fecbf743" translate="yes" xml:space="preserve">
          <source>d_fd_set.U</source>
          <target state="translated">d_fd_set.U</target>
        </trans-unit>
        <trans-unit id="5610a6176f6dffa5c6339e3b4aed254c6d8d5bdb" translate="yes" xml:space="preserve">
          <source>d_fdim.U</source>
          <target state="translated">d_fdim.U</target>
        </trans-unit>
        <trans-unit id="093f1f8d37325e4090b731a7e736baa0824ed9bb" translate="yes" xml:space="preserve">
          <source>d_fegetround.U</source>
          <target state="translated">d_fegetround.U</target>
        </trans-unit>
        <trans-unit id="22c5d6e46475330d576fbddf1674c48e022b69a2" translate="yes" xml:space="preserve">
          <source>d_fgetpos.U</source>
          <target state="translated">d_fgetpos.U</target>
        </trans-unit>
        <trans-unit id="4d6ce27a642cfc0e43c2278ef8311e3855bbefe7" translate="yes" xml:space="preserve">
          <source>d_finite.U</source>
          <target state="translated">d_finite.U</target>
        </trans-unit>
        <trans-unit id="df2b5a950f1a6c7ea5c601383c6357b80b529916" translate="yes" xml:space="preserve">
          <source>d_finitel.U</source>
          <target state="translated">d_finitel.U</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
