<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="perl">
    <body>
      <group id="perl">
        <trans-unit id="5277ed40894774a2ba216ada895326e2680c5641" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_NICE&lt;/code&gt; symbol, which indicates to the C program that the nice() routine is available.</source>
          <target state="translated">이 변수 는 C 프로그램에 nice () 루틴을 사용할 수 있음을 나타내는 &lt;code&gt;HAS_NICE&lt;/code&gt; 기호를 조건부로 정의합니다 .</target>
        </trans-unit>
        <trans-unit id="af0a20e5476f2b86b8442bdada0615dea2fffc05" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_NL_LANGINFO&lt;/code&gt; symbol, which indicates to the C program that the nl_langinfo() routine is available.</source>
          <target state="translated">이 변수는 조건 적으로 &lt;code&gt;HAS_NL_LANGINFO&lt;/code&gt; 기호를 정의합니다 .이 기호는 C 프로그램에 nl_langinfo () 루틴을 사용할 수 있음을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="42ed73584476eb3cff07ec2b3b92d7f11ff4544e" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_PATHCONF&lt;/code&gt; symbol, which indicates to the C program that the pathconf() routine is available to determine file-system related limits and options associated with a given filename.</source>
          <target state="translated">이 변수는 &lt;code&gt;HAS_PATHCONF&lt;/code&gt; 기호를 조건부로 정의합니다 . 이는 C 프로그램에 pathconf () 루틴을 사용하여 파일 시스템 관련 한계 및 지정된 파일 이름과 관련된 옵션을 결정할 수 있음을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="1e60fd6e1fad01f7c6b060fd6548b4b0c288ca74" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_PAUSE&lt;/code&gt; symbol, which indicates to the C program that the pause() routine is available to suspend a process until a signal is received.</source>
          <target state="translated">이 변수는 조건 적으로 &lt;code&gt;HAS_PAUSE&lt;/code&gt; 기호를 정의합니다 . 이는 C 프로그램에 pause () 루틴을 사용하여 신호가 수신 될 때까지 프로세스를 일시 중단 할 수 있음을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="e606684e99cd2526fc33ee67d5160faec8e1b4b1" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_PHOSTNAME&lt;/code&gt; symbol, which contains the shell command which, when fed to popen(), may be used to derive the host name.</source>
          <target state="translated">이 변수는 조건부로 &lt;code&gt;HAS_PHOSTNAME&lt;/code&gt; 기호를 정의하며 , 여기에는 popen ()으로 공급 될 때 호스트 이름을 파생시키는 데 사용될 수있는 쉘 명령이 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="f5e9460d4aa49a8f6cda898aea276648d360b0ee" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_PIPE&lt;/code&gt; symbol, which indicates to the C program that the pipe() routine is available to create an inter-process channel.</source>
          <target state="translated">이 변수는 &lt;code&gt;HAS_PIPE&lt;/code&gt; 기호를 조건부로 정의합니다 . 이는 C 프로그램에 pipe () 루틴이 프로세스 간 채널을 작성할 수 있음을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="bd07b0f89812ec7f4882f2ef903b3b418e2b4eaa" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_POLL&lt;/code&gt; symbol, which indicates to the C program that the poll() routine is available to poll active file descriptors.</source>
          <target state="translated">이 변수는 조건부로 &lt;code&gt;HAS_POLL&lt;/code&gt; 기호를 정의합니다 . 이는 C 프로그램에 poll () 루틴이 활성 파일 디스크립터를 폴링 할 수 있음을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="d19e5a58a493a3e72e15d799a19003028f51f982" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_PRCTL&lt;/code&gt; symbol, which indicates to the C program that the prctl() routine is available. Note that there are at least two prctl variants: Linux and Irix. While they are somewhat similar, they are incompatible.</source>
          <target state="translated">이 변수는 조건 적으로 &lt;code&gt;HAS_PRCTL&lt;/code&gt; 기호를 정의하며 prctl () 루틴을 사용할 수 있음을 C 프로그램에 표시합니다. 두 가지 prctl 변형 인 Linux와 Irix가 있습니다. 그것들은 다소 비슷하지만 호환되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="5ebf54637f893db261609451b910c27bcc8f091b" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_PRCTL_SET_NAME&lt;/code&gt; symbol, which indicates to the C program that the prctl() routine supports the &lt;code&gt;PR_SET_NAME&lt;/code&gt; option.</source>
          <target state="translated">이 변수는 조건 적으로 &lt;code&gt;HAS_PRCTL_SET_NAME&lt;/code&gt; 기호를 정의합니다 . 이는 prctl () 루틴이 &lt;code&gt;PR_SET_NAME&lt;/code&gt; 옵션을 지원함을 C 프로그램에 나타냅니다 .</target>
        </trans-unit>
        <trans-unit id="c3ecaf028b373110a8f40a51809f4d579b737a8f" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_PSEUDOFORK&lt;/code&gt; symbol, which indicates that an emulation of the fork routine is available.</source>
          <target state="translated">이 변수는 &lt;code&gt;HAS_PSEUDOFORK&lt;/code&gt; 기호를 조건부로 정의하는데 , 이는 포크 루틴의 에뮬레이션이 사용 가능함을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="bc4ef7f3655f36a52acb95d81e9a02d6789c39a8" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_PTHREAD_ATFORK&lt;/code&gt; symbol, which indicates to the C program that the pthread_atfork() routine is available.</source>
          <target state="translated">이 변수는 조건 적으로 &lt;code&gt;HAS_PTHREAD_ATFORK&lt;/code&gt; 기호를 정의합니다 . 이는 pthread_atfork () 루틴을 사용할 수 있음을 C 프로그램에 표시합니다.</target>
        </trans-unit>
        <trans-unit id="79dc88760f8a76eae528ad5cc3a27f2f6431bb0f" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_PTHREAD_YIELD&lt;/code&gt; symbol if the pthread_yield routine is available to yield the execution of the current thread.</source>
          <target state="translated">pthread_yield 루틴을 사용하여 현재 스레드의 실행을 생성 할 수 있는 &lt;code&gt;HAS_PTHREAD_YIELD&lt;/code&gt; 변수는 조건부로 HAS_PTHREAD_YIELD 기호를 정의합니다 .</target>
        </trans-unit>
        <trans-unit id="cf81f8754d5d00e4d41f1c30c1f9a7c9b8e81bef" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_QGCVT&lt;/code&gt; symbol, which indicates to the C program that the qgcvt() routine is available.</source>
          <target state="translated">이 변수는 조건 적으로 &lt;code&gt;HAS_QGCVT&lt;/code&gt; 기호를 정의합니다 . 이는 qgcvt () 루틴이 사용 가능함을 C 프로그램에 표시합니다.</target>
        </trans-unit>
        <trans-unit id="8e9b2bfb0734331186e86ecf1ccb63af8b3ba30c" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_RANDOM_R&lt;/code&gt; symbol, which indicates to the C program that the random_r() routine is available.</source>
          <target state="translated">이 변수 는 C 프로그램에 random_r () 루틴을 사용할 수 있음을 나타내는 &lt;code&gt;HAS_RANDOM_R&lt;/code&gt; 기호를 조건부로 정의합니다 .</target>
        </trans-unit>
        <trans-unit id="c65a62001e9e03adb09c0dbd6c2811a7ea2da19a" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_READDIR_R&lt;/code&gt; symbol, which indicates to the C program that the readdir_r() routine is available.</source>
          <target state="translated">이 변수는 조건부로 &lt;code&gt;HAS_READDIR_R&lt;/code&gt; 기호를 정의하며 , 이는 readdir_r () 루틴이 사용 가능함을 C 프로그램에 표시합니다.</target>
        </trans-unit>
        <trans-unit id="6fd1e82c6efc0d6f7536439da7a35beb1256cd16" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_READLINK&lt;/code&gt; symbol, which indicates to the C program that the readlink() routine is available to read the value of a symbolic link.</source>
          <target state="translated">이 변수는 조건부로 &lt;code&gt;HAS_READLINK&lt;/code&gt; 기호를 정의합니다 .이 기호는 C 프로그램에 readlink () 루틴이 기호 링크의 값을 읽을 수 있음을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="2dc4c2fa5222e60c5f68de8036a6fdeb29fa75d4" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_READV&lt;/code&gt; symbol, which indicates to the C program that the readv() routine is available.</source>
          <target state="translated">이 변수는 조건 적으로 &lt;code&gt;HAS_READV&lt;/code&gt; 기호를 정의합니다 .이 기호는 C 프로그램에 readv () 루틴을 사용할 수 있음을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="e3f91d013ddfc25cb2fcffc4118bc4400d5ce506" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_RECOMP&lt;/code&gt; symbol, which indicates to the C program that the re_comp() routine is available for regular patern matching (usally on &lt;code&gt;BSD&lt;/code&gt; ). If so, it is likely that re_exec() exists.</source>
          <target state="translated">이 변수는 조건부로 &lt;code&gt;HAS_RECOMP&lt;/code&gt; 기호를 정의합니다 . 이는 C 프로그램에 re_comp () 루틴이 정기적 인 patern 일치 (일반적으로 &lt;code&gt;BSD&lt;/code&gt; 에서 ) 에 사용 가능함을 나타냅니다 . 그렇다면 re_exec ()가있을 가능성이 있습니다.</target>
        </trans-unit>
        <trans-unit id="6c3f29bc2154f4c7a6c6f35d44e8edd998c0226b" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_RECVMSG&lt;/code&gt; symbol, which indicates to the C program that the recvmsg() routine is available.</source>
          <target state="translated">이 변수는 조건 적으로 &lt;code&gt;HAS_RECVMSG&lt;/code&gt; 기호를 정의하며 , 이는 recvmsg () 루틴이 사용 가능함을 C 프로그램에 표시합니다.</target>
        </trans-unit>
        <trans-unit id="6d67ed8549c55fe5a2605834ce109f95ac461359" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_REGCMP&lt;/code&gt; symbol, which indicates to the C program that the regcmp() routine is available for regular patern matching (usally on System V).</source>
          <target state="translated">이 변수는 조건부로 &lt;code&gt;HAS_REGCMP&lt;/code&gt; 기호를 정의합니다 . 이는 regcmp () 루틴이 정기적 인 patern 일치 (일반적으로 시스템 V)에 사용 가능하다는 것을 C 프로그램에 표시합니다.</target>
        </trans-unit>
        <trans-unit id="e07c10218f9fabf16f8d5854c92cf2f16b32b7e9" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_REGCOMP&lt;/code&gt; symbol, which indicates to the C program that the regcomp() routine is available for regular patern matching (usally on</source>
          <target state="translated">이 변수는 조건부로 &lt;code&gt;HAS_REGCOMP&lt;/code&gt; 기호를 정의합니다 .이 기호는 C 프로그램에 regcomp () 루틴이 정기적 인 patern 일치 (일반적으로 on</target>
        </trans-unit>
        <trans-unit id="9b05fd196967a1a71516b4a88276313a557aa5bc" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_REMAINDER&lt;/code&gt; symbol, which indicates to the C program that the remainder() routine is available.</source>
          <target state="translated">이 변수는 조건부로 &lt;code&gt;HAS_REMAINDER&lt;/code&gt; 기호를 정의합니다 .이 기호는 C 프로그램에 나머지 () 루틴을 사용할 수 있음을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="4cfe52f27defd1a63d52af40f150c15bfeb71bb7" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_REMQUO&lt;/code&gt; symbol, which indicates to the C program that the remquo() routine is available.</source>
          <target state="translated">이 변수는 조건 적으로 &lt;code&gt;HAS_REMQUO&lt;/code&gt; 기호를 정의합니다 .이 기호는 C 프로그램에 remquo () 루틴을 사용할 수 있음을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="c169ea47ac3e9cb5232ceda473f58311a9092997" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_RENAME&lt;/code&gt; symbol, which indicates to the C program that the rename() routine is available to rename files.</source>
          <target state="translated">이 변수는 조건 적으로 &lt;code&gt;HAS_RENAME&lt;/code&gt; 기호를 정의합니다. 이 이름은 C 프로그램에 rename () 루틴을 사용하여 파일 이름을 바꿀 수 있음을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="1fc2419ec7384419c653e2e04e22752b3e26782e" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_RINT&lt;/code&gt; symbol, which indicates to the C program that the rint() routine is available.</source>
          <target state="translated">이 변수는 조건 적으로 &lt;code&gt;HAS_RINT&lt;/code&gt; 기호를 정의하며 , rint () 루틴을 사용할 수 있음을 C 프로그램에 표시합니다.</target>
        </trans-unit>
        <trans-unit id="252fce7c8fec522876f402bc3771436d7e053a8b" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_ROUND&lt;/code&gt; symbol, which indicates to the C program that the round() routine is available.</source>
          <target state="translated">이 변수는 조건부로 &lt;code&gt;HAS_ROUND&lt;/code&gt; 기호를 정의합니다 .이 기호는 C 프로그램에 round () 루틴을 사용할 수 있음을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="8302be254222641686214eb90d203acf90f889ca" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_SAFE_BCOPY&lt;/code&gt; symbol if the bcopy() routine can do overlapping copies. Normally, you should probably use memmove().</source>
          <target state="translated">bcopy () 루틴이 중복 사본을 수행 할 수 있는 &lt;code&gt;HAS_SAFE_BCOPY&lt;/code&gt; 변수는 조건부로 HAS_SAFE_BCOPY 기호를 정의합니다 . 일반적으로 memmove ()를 사용해야합니다.</target>
        </trans-unit>
        <trans-unit id="9c452c4e512101e3881d48bc3f5b752b0a76ff1b" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_SAFE_MEMCPY&lt;/code&gt; symbol if the memcpy() routine can do overlapping copies. For overlapping copies, memmove() should be used, if available.</source>
          <target state="translated">memcpy () 루틴이 중복 사본을 수행 할 수 있는 &lt;code&gt;HAS_SAFE_MEMCPY&lt;/code&gt; 변수는 조건부로 HAS_SAFE_MEMCPY 기호를 정의합니다 . 중복 사본의 경우 가능한 경우 memmove ()를 사용해야합니다.</target>
        </trans-unit>
        <trans-unit id="69b5df3fae9e380dd31bacf8601a50634d843973" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_SANE_MEMCMP&lt;/code&gt; symbol if the memcpy() routine is available and can be used to compare relative magnitudes of chars with their high bits set.</source>
          <target state="translated">memcpy () 루틴이 사용 가능하고 높은 비트 세트와 문자의 상대적인 크기를 비교하는 데 사용할 수 있는 &lt;code&gt;HAS_SANE_MEMCMP&lt;/code&gt; 변수는 조건부로 HAS_SANE_MEMCMP 기호를 정의합니다 .</target>
        </trans-unit>
        <trans-unit id="70c4e22971a98e05d75f4171ebce0451ae617364" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_SBRK_PROTO&lt;/code&gt; symbol, which indicates to the C program that the system provides a prototype for the sbrk() function. Otherwise, it is up to the program to supply one.</source>
          <target state="translated">이 변수는 &lt;code&gt;HAS_SBRK_PROTO&lt;/code&gt; 기호를 조건부로 정의합니다 .이 기호는 시스템이 sbrk () 함수의 프로토 타입을 제공한다는 것을 C 프로그램에 표시합니다. 그렇지 않으면 프로그램을 제공하는 것은 프로그램의 책임입니다.</target>
        </trans-unit>
        <trans-unit id="bf34a9ff9d97d9a47eaff2f964ed4eba8c94a9da" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_SCALBN&lt;/code&gt; symbol, which indicates to the C program that the scalbn() routine is available.</source>
          <target state="translated">이 변수는 조건 적으로 &lt;code&gt;HAS_SCALBN&lt;/code&gt; 기호를 정의합니다 . 이는 C 프로그램에 scalbn () 루틴을 사용할 수 있음을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="056df173ab102738b8f1113094f7590b13a7bcb2" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_SCALBNL&lt;/code&gt; symbol, which indicates to the C program that the scalbnl() routine is available. If ilogbl is also present we can emulate frexpl.</source>
          <target state="translated">이 변수는 조건 적으로 &lt;code&gt;HAS_SCALBNL&lt;/code&gt; 기호를 정의합니다 . 이는 C 프로그램에 scalbnl () 루틴이 사용 가능함을 나타냅니다. 만약 ilogbl이 존재한다면 frexpl을 흉내낼 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="404cd178274e29b46392d4b9d1d62d9d89a6a230" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_SCHED_YIELD&lt;/code&gt; symbol if the sched_yield routine is available to yield the execution of the current thread.</source>
          <target state="translated">sched_yield 루틴을 사용하여 현재 스레드를 실행할 수 있는 &lt;code&gt;HAS_SCHED_YIELD&lt;/code&gt; 변수는 조건부로 HAS_SCHED_YIELD 기호를 정의합니다 .</target>
        </trans-unit>
        <trans-unit id="f85d23daea4fa592971aa421327cc008d01c2ac9" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_SCM_RIGHTS&lt;/code&gt; symbol, which indicates that the &lt;code&gt;SCM_RIGHTS&lt;/code&gt; is available. #ifdef is not enough because it may be an enum, glibc has been known to do this.</source>
          <target state="translated">이 변수 는 &lt;code&gt;SCM_RIGHTS&lt;/code&gt; 가 사용 가능함 을 나타내는 &lt;code&gt;HAS_SCM_RIGHTS&lt;/code&gt; 기호를 조건부로 정의합니다 . #ifdef는 열거 형일 수 있기 때문에 충분하지 않습니다. glibc는이를 수행하는 것으로 알려져 있습니다.</target>
        </trans-unit>
        <trans-unit id="dea922aadae789ea1a95fdab48d62de9553cabac" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_SEM&lt;/code&gt; symbol, which indicates that the entire sem*(2) library is present.</source>
          <target state="translated">이 변수 는 전체 sem * (2) 라이브러리가 있음을 나타내는 &lt;code&gt;HAS_SEM&lt;/code&gt; 기호를 조건부로 정의합니다 .</target>
        </trans-unit>
        <trans-unit id="5b148aa1a9afc4648f0cc63bbf5f952b64040e69" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_SEMCTL&lt;/code&gt; symbol, which indicates to the C program that the semctl() routine is available.</source>
          <target state="translated">이 변수는 조건 적으로 &lt;code&gt;HAS_SEMCTL&lt;/code&gt; 기호를 정의하며 , 이는 semctl () 루틴이 사용 가능함을 C 프로그램에 표시합니다.</target>
        </trans-unit>
        <trans-unit id="d19f9403ea6df19878d8bd947cbe5d3b17ab117b" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_SEMGET&lt;/code&gt; symbol, which indicates to the C program that the semget() routine is available.</source>
          <target state="translated">이 변수는 조건 적으로 &lt;code&gt;HAS_SEMGET&lt;/code&gt; 기호를 정의합니다 .이 기호는 C 프로그램에 semget () 루틴을 사용할 수 있음을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="ed7f4ce9b6451085a36945d888c752e4d7275794" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_SEMOP&lt;/code&gt; symbol, which indicates to the C program that the semop() routine is available.</source>
          <target state="translated">이 변수는 &lt;code&gt;HAS_SEMOP&lt;/code&gt; 기호를 조건부로 정의하며 , 이는 C 프로그램에 semop () 루틴을 사용할 수 있음을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="d6ec4029dd5383d19da712a00dd2a6939c7054ee" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_SENDMSG&lt;/code&gt; symbol, which indicates to the C program that the sendmsg() routine is available.</source>
          <target state="translated">이 변수는 조건 적으로 &lt;code&gt;HAS_SENDMSG&lt;/code&gt; 기호를 정의하며 , sendmsg () 루틴을 사용할 수 있음을 C 프로그램에 표시합니다.</target>
        </trans-unit>
        <trans-unit id="efef1c889515b0f4be93dfb2d0eea78cf9332c98" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_SETEGID&lt;/code&gt; symbol, which indicates to the C program that the setegid() routine is available to change the effective gid of the current program.</source>
          <target state="translated">이 변수는 조건 적으로 &lt;code&gt;HAS_SETEGID&lt;/code&gt; 기호를 정의합니다 . 이는 C 프로그램에 setegid () 루틴을 사용하여 현재 프로그램의 유효 gid를 변경할 수 있음을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="1a86b980917ba9c8b6c9bced088f2566cd3d02a9" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_SETEUID&lt;/code&gt; symbol, which indicates to the C program that the seteuid() routine is available to change the effective uid of the current program.</source>
          <target state="translated">이 변수는 조건 적으로 &lt;code&gt;HAS_SETEUID&lt;/code&gt; 기호를 정의합니다 . 이는 C 프로그램에 seteuid () 루틴이 현재 프로그램의 유효 uid를 변경하는 데 사용 가능함을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="d246b49933e9f21fac1405364ff32e520a309e60" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_SETGRENT&lt;/code&gt; symbol, which indicates to the C program that the setgrent() routine is available for initializing sequential access to the group database.</source>
          <target state="translated">이 변수는 조건부로 &lt;code&gt;HAS_SETGRENT&lt;/code&gt; 기호를 정의합니다 . 이는 C 프로그램에 setgrent () 루틴이 그룹 데이터베이스에 대한 순차 액세스를 초기화하는 데 사용 가능함을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="589d24084faf0c2cd477e893215d61c64efdd448" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_SETGRENT_R&lt;/code&gt; symbol, which indicates to the C program that the setgrent_r() routine is available.</source>
          <target state="translated">이 변수는 조건부로 &lt;code&gt;HAS_SETGRENT_R&lt;/code&gt; 기호를 정의합니다 . 이는 setgrent_r () 루틴을 사용할 수 있음을 C 프로그램에 표시합니다.</target>
        </trans-unit>
        <trans-unit id="4a933eeb905c95437c3a9047e80a1b6f2c4972a0" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_SETGROUPS&lt;/code&gt; symbol, which indicates to the C program that the setgroups() routine is available to set the list of process groups.</source>
          <target state="translated">이 변수는 조건부로 &lt;code&gt;HAS_SETGROUPS&lt;/code&gt; 기호를 정의합니다 . 이는 C 프로그램에 setgroups () 루틴을 사용하여 프로세스 그룹 목록을 설정할 수 있음을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="a2050d4c05e3a916230e1e01c1b28c300be94833" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_SETHOSTENT_R&lt;/code&gt; symbol, which indicates to the C program that the sethostent_r() routine is available.</source>
          <target state="translated">이 변수 는 C 프로그램에 sethostent_r () 루틴을 사용할 수 있음을 나타내는 &lt;code&gt;HAS_SETHOSTENT_R&lt;/code&gt; 기호를 조건부로 정의합니다 .</target>
        </trans-unit>
        <trans-unit id="a7abd6d4d4f071b55eb7b75153aa363a88ba3dec" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_SETITIMER&lt;/code&gt; symbol, which indicates to the C program that the setitimer() routine is available.</source>
          <target state="translated">이 변수 는 C 프로그램에 setitimer () 루틴을 사용할 수 있음을 나타내는 &lt;code&gt;HAS_SETITIMER&lt;/code&gt; 기호를 조건부로 정의합니다 .</target>
        </trans-unit>
        <trans-unit id="84f918495536e04dc0ccac1eb98aa213def7a2e8" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_SETLINEBUF&lt;/code&gt; symbol, which indicates to the C program that the setlinebuf() routine is available to change stderr or stdout from block-buffered or unbuffered to a line-buffered mode.</source>
          <target state="translated">이 변수는 조건부로 &lt;code&gt;HAS_SETLINEBUF&lt;/code&gt; 기호를 정의합니다 . 이는 setlinebuf () 루틴을 사용하여 stderr 또는 stdout을 블록 버퍼링 또는 버퍼링되지 않은 모드에서 라인 버퍼링 된 모드로 변경할 수 있음을 C 프로그램에 표시합니다.</target>
        </trans-unit>
        <trans-unit id="2ca4473bd0a8384ccc2d7db9358f39febea76296" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_SETLOCALE_R&lt;/code&gt; symbol, which indicates to the C program that the setlocale_r() routine is available.</source>
          <target state="translated">이 변수는 조건부로 &lt;code&gt;HAS_SETLOCALE_R&lt;/code&gt; 기호를 정의하며 setlocale_r () 루틴을 사용할 수 있음을 C 프로그램에 표시합니다.</target>
        </trans-unit>
        <trans-unit id="f455ad33ad16eecbc6ce3963675437e9a5a2ccc5" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_SETNETENT_R&lt;/code&gt; symbol, which indicates to the C program that the setnetent_r() routine is available.</source>
          <target state="translated">이 변수 는 C 프로그램에 setnetent_r () 루틴을 사용할 수 있음을 나타내는 &lt;code&gt;HAS_SETNETENT_R&lt;/code&gt; 기호를 조건부로 정의합니다 .</target>
        </trans-unit>
        <trans-unit id="bd7e30481f6fa7e1b3bd623bf0c35f33af1025af" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_SETPGID&lt;/code&gt; symbol if the setpgid(pid, gpid) function is available to set process group &lt;code&gt;ID&lt;/code&gt; .</source>
          <target state="translated">setpgid (pid, gpid) 함수를 사용하여 프로세스 그룹 &lt;code&gt;ID&lt;/code&gt; 를 설정할 수 있는 &lt;code&gt;HAS_SETPGID&lt;/code&gt; 변수는 조건부로 HAS_SETPGID 기호를 정의합니다 .</target>
        </trans-unit>
        <trans-unit id="e9edef6ae76c8944446c013725fb197b48fa39fe" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_SETPROCTITLE&lt;/code&gt; symbol, which indicates to the C program that the setproctitle() routine is available.</source>
          <target state="translated">이 변수는 조건 적으로 &lt;code&gt;HAS_SETPROCTITLE&lt;/code&gt; 기호를 정의합니다 .이 기호는 C 프로그램에 setproctitle () 루틴을 사용할 수 있음을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="d3f341f3570968646d3fd38a96ae3afe919b893b" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_SETPROTOENT_R&lt;/code&gt; symbol, which indicates to the C program that the setprotoent_r() routine is available.</source>
          <target state="translated">이 변수 는 C 프로그램에 setprotoent_r () 루틴을 사용할 수 있음을 나타내는 &lt;code&gt;HAS_SETPROTOENT_R&lt;/code&gt; 기호를 조건부로 정의합니다 .</target>
        </trans-unit>
        <trans-unit id="3abc3546df3c0db0a7495a04a08ac7e577028525" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_SETPWENT&lt;/code&gt; symbol, which indicates to the C program that the setpwent() routine is available for initializing sequential access to the passwd database.</source>
          <target state="translated">이 변수는 조건부로 &lt;code&gt;HAS_SETPWENT&lt;/code&gt; 기호를 정의합니다 . 이는 C 프로그램에 setpwent () 루틴이 passwd 데이터베이스에 대한 순차 액세스를 초기화하는 데 사용 가능함을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="f815f5d34768ba0d9cd88ead612376bf175844f7" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_SETPWENT_R&lt;/code&gt; symbol, which indicates to the C program that the setpwent_r() routine is available.</source>
          <target state="translated">이 변수 는 C 프로그램에 setpwent_r () 루틴을 사용할 수 있음을 나타내는 &lt;code&gt;HAS_SETPWENT_R&lt;/code&gt; 기호를 조건부로 정의합니다 .</target>
        </trans-unit>
        <trans-unit id="f5d88047ec151db31ca73cd8e6fefe093fe58114" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_SETRESGID_PROTO&lt;/code&gt; symbol, which indicates to the C program that the system provides a prototype for the setresgid() function. Otherwise, it is up to the program to supply one.</source>
          <target state="translated">이 변수는 &lt;code&gt;HAS_SETRESGID_PROTO&lt;/code&gt; 기호를 조건부로 정의하며 , 이는 시스템이 setresgid () 함수의 프로토 타입을 제공함을 C 프로그램에 표시합니다. 그렇지 않으면 프로그램을 제공하는 것은 프로그램의 책임입니다.</target>
        </trans-unit>
        <trans-unit id="24eb08c656ce761f6087195ce9455c818bd9a13c" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_SETRESUID_PROTO&lt;/code&gt; symbol, which indicates to the C program that the system provides a prototype for the setresuid() function. Otherwise, it is up to the program to supply one.</source>
          <target state="translated">이 변수는 &lt;code&gt;HAS_SETRESUID_PROTO&lt;/code&gt; 기호를 조건부로 정의하며 , 이는 시스템이 setresuid () 함수의 프로토 타입을 제공함을 C 프로그램에 표시합니다. 그렇지 않으면 프로그램을 제공하는 것은 프로그램의 책임입니다.</target>
        </trans-unit>
        <trans-unit id="ff94800da87fb91adb70b42b7c317e55aeb3e007" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_SETRGID&lt;/code&gt; symbol, which indicates to the C program that the setrgid() routine is available to change the real gid of the current program.</source>
          <target state="translated">이 변수는 조건 적으로 &lt;code&gt;HAS_SETRGID&lt;/code&gt; 기호를 정의합니다 . 이는 C 프로그램에 setrgid () 루틴을 사용하여 현재 프로그램의 실제 gid를 변경할 수 있음을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="dbf52c5b79e2d8522a207448380bd479037d630b" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_SETRUID&lt;/code&gt; symbol, which indicates to the C program that the setruid() routine is available to change the real uid of the current program.</source>
          <target state="translated">이 변수는 조건 적으로 &lt;code&gt;HAS_SETRUID&lt;/code&gt; 기호를 정의합니다 . 이는 C 프로그램에 setruid () 루틴을 사용하여 현재 프로그램의 실제 uid를 변경할 수 있음을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="d0045505fc1f8f12b866ff980c08b76f8ab8a573" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_SETSERVENT_R&lt;/code&gt; symbol, which indicates to the C program that the setservent_r() routine is available.</source>
          <target state="translated">이 변수는 조건 적으로 &lt;code&gt;HAS_SETSERVENT_R&lt;/code&gt; 기호를 정의합니다 . 이는 setservent_r () 루틴이 사용 가능함을 C 프로그램에 표시합니다.</target>
        </trans-unit>
        <trans-unit id="ffe8075645d07e578caf35ed3053e2328c32951f" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_SETVBUF&lt;/code&gt; symbol, which indicates to the C program that the setvbuf() routine is available to change buffering on an open stdio stream.</source>
          <target state="translated">이 변수는 조건 적으로 &lt;code&gt;HAS_SETVBUF&lt;/code&gt; 기호를 정의합니다 . 이는 C 프로그램에 setvbuf () 루틴이 열린 stdio 스트림에서 버퍼링을 변경할 수 있음을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="5e9d32e8b4c0970f3e0b14035c50448358b4eb3f" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_SHM&lt;/code&gt; symbol, which indicates that the entire shm*(2) library is present.</source>
          <target state="translated">이 변수 는 전체 shm * (2) 라이브러리가 있음을 나타내는 &lt;code&gt;HAS_SHM&lt;/code&gt; 기호를 조건부로 정의합니다 .</target>
        </trans-unit>
        <trans-unit id="e4860192fe34bb82c2b57fbf3ce883a966de008f" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_SHMAT&lt;/code&gt; symbol, which indicates to the C program that the shmat() routine is available.</source>
          <target state="translated">이 변수 는 C 프로그램에 shmat () 루틴을 사용할 수 있음을 나타내는 &lt;code&gt;HAS_SHMAT&lt;/code&gt; 기호를 조건부로 정의합니다 .</target>
        </trans-unit>
        <trans-unit id="0ddb43c8ba59d4274944632bb31bddf6eb7b2784" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_SHMAT_PROTOTYPE&lt;/code&gt; symbol, which indicates that</source>
          <target state="translated">이 변수는 조건 적으로 &lt;code&gt;HAS_SHMAT_PROTOTYPE&lt;/code&gt; 기호를 정의합니다.</target>
        </trans-unit>
        <trans-unit id="45dc983e9867e71eecb842badfd1c7d2839481d3" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_SHMCTL&lt;/code&gt; symbol, which indicates to the C program that the shmctl() routine is available.</source>
          <target state="translated">이 변수 는 C 프로그램에 shmctl () 루틴을 사용할 수 있음을 나타내는 &lt;code&gt;HAS_SHMCTL&lt;/code&gt; 기호를 조건부로 정의합니다 .</target>
        </trans-unit>
        <trans-unit id="737f5dddfcf9ec8a844dd7a98ec4b5d487bf14c6" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_SHMDT&lt;/code&gt; symbol, which indicates to the C program that the shmdt() routine is available.</source>
          <target state="translated">이 변수는 조건 적으로 &lt;code&gt;HAS_SHMDT&lt;/code&gt; 기호를 정의합니다 .이 기호는 C 프로그램에 shmdt () 루틴을 사용할 수 있음을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="4350b354f9719bb658838cee9a74cd7b9786aebc" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_SHMGET&lt;/code&gt; symbol, which indicates to the C program that the shmget() routine is available.</source>
          <target state="translated">이 변수 는 C 프로그램에 shmget () 루틴을 사용할 수 있음을 나타내는 &lt;code&gt;HAS_SHMGET&lt;/code&gt; 기호를 조건부로 정의합니다 .</target>
        </trans-unit>
        <trans-unit id="437fd06099c4077763f5958de502ec64283e2c58" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_SIGACTION&lt;/code&gt; symbol, which indicates that the Vr4 sigaction() routine is available.</source>
          <target state="translated">이 변수 는 Vr4 sigaction () 루틴을 사용할 수 있음을 나타내는 &lt;code&gt;HAS_SIGACTION&lt;/code&gt; 기호를 조건부로 정의합니다 .</target>
        </trans-unit>
        <trans-unit id="123187e08340159be001480b92cae8c3fe8fa881" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_SIGNBIT&lt;/code&gt; symbol, which indicates to the C program that the signbit() routine is available and safe to use with perl's intern &lt;code&gt;NV&lt;/code&gt; type.</source>
          <target state="translated">이 변수는 조건 적으로 &lt;code&gt;HAS_SIGNBIT&lt;/code&gt; 기호를 정의합니다 . 이는 C 프로그램에 signbit () 루틴이 사용 가능하고 perl의 인턴 &lt;code&gt;NV&lt;/code&gt; 유형 과 함께 사용할 수 있음을 나타냅니다 .</target>
        </trans-unit>
        <trans-unit id="a55187259595d502ca100cbdce1dc3f6adb532f9" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_SIGSETJMP&lt;/code&gt; symbol, which indicates that the sigsetjmp() routine is available to call setjmp() and optionally save the process's signal mask.</source>
          <target state="translated">이 변수는 조건부로 &lt;code&gt;HAS_SIGSETJMP&lt;/code&gt; 기호를 정의합니다 . 이는 sigsetjmp () 루틴이 setjmp ()를 호출하고 선택적으로 프로세스의 신호 마스크를 저장할 수 있음을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="3fbff66da218341954d4dbcb9ab0dd79d621c938" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_SNPRINTF&lt;/code&gt; symbol, which indicates to the C program that the snprintf () library function is available.</source>
          <target state="translated">이 변수는 조건부로 &lt;code&gt;HAS_SNPRINTF&lt;/code&gt; 기호를 정의합니다 .이 기호는 C 프로그램에 snprintf () 라이브러리 함수를 사용할 수 있음을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="5acf55188378c7fbe648dc6edc0668a1ab26c47a" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_SOCKADDR_SA_LEN&lt;/code&gt; symbol, which indicates that a struct sockaddr structure has the sa_len member.</source>
          <target state="translated">이 변수는 &lt;code&gt;HAS_SOCKADDR_SA_LEN&lt;/code&gt; 기호를 조건부로 정의하는데 , 이는 구조 sockaddr 구조에 sa_len 멤버가 있음을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="d31710ecb085f72c5251cccdbeb14a6e9c225b26" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_SOCKATMARK&lt;/code&gt; symbol, which indicates to the C program that the sockatmark() routine is available.</source>
          <target state="translated">이 변수는 조건부로 &lt;code&gt;HAS_SOCKATMARK&lt;/code&gt; 기호를 정의하며 , 이는 sockatmark () 루틴이 사용 가능함을 C 프로그램에 표시합니다.</target>
        </trans-unit>
        <trans-unit id="c36072052afd17b0f381cb1b723e2e98b9d06076" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_SOCKATMARK_PROTO&lt;/code&gt; symbol, which indicates to the C program that the system provides a prototype for the sockatmark() function. Otherwise, it is up to the program to supply one.</source>
          <target state="translated">이 변수는 &lt;code&gt;HAS_SOCKATMARK_PROTO&lt;/code&gt; 기호를 조건부로 정의하며 , 이는 시스템이 sockatmark () 함수의 프로토 타입을 제공함을 C 프로그램에 표시합니다. 그렇지 않으면 프로그램을 제공하는 것은 프로그램의 책임입니다.</target>
        </trans-unit>
        <trans-unit id="1ff90cee299cb6e7c7bb9e2fadaa51ea4770478c" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_SOCKETPAIR&lt;/code&gt; symbol, which indicates that the &lt;code&gt;BSD&lt;/code&gt; socketpair() is supported.</source>
          <target state="translated">이 변수는 조건부로 &lt;code&gt;BSD&lt;/code&gt; socketpair ()가 지원됨 을 나타내는 &lt;code&gt;HAS_SOCKETPAIR&lt;/code&gt; 기호를 정의합니다 .</target>
        </trans-unit>
        <trans-unit id="55a608976913f11c0bfe48b82c12d6c98fc5be2a" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_SQRTL&lt;/code&gt; symbol, which indicates to the C program that the sqrtl() routine is available.</source>
          <target state="translated">이 변수는 조건 적으로 &lt;code&gt;HAS_SQRTL&lt;/code&gt; 기호를 정의합니다 . 이는 C 프로그램에 sqrtl () 루틴을 사용할 수 있음을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="ff161d028d12a8f60281ba1557ef4b340f9a866d" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_SRANDOM_R&lt;/code&gt; symbol, which indicates to the C program that the srandom_r() routine is available.</source>
          <target state="translated">이 변수는 조건 적으로 &lt;code&gt;HAS_SRANDOM_R&lt;/code&gt; 기호를 정의합니다 .이 기호는 C 프로그램에 srandom_r () 루틴을 사용할 수 있음을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="df31d97adb4ed010363e7ea545be291a3d3df0c5" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_STATIC_INLINE&lt;/code&gt; symbol, which indicates that the C compiler supports C99-style static inline. That is, the function can't be called from another translation unit.</source>
          <target state="translated">이 변수 는 C 컴파일러가 C99 스타일 정적 인라인을 지원함을 나타내는 &lt;code&gt;HAS_STATIC_INLINE&lt;/code&gt; 기호를 조건부로 정의합니다 . 즉, 다른 번역 단위에서 함수를 호출 할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="d474b5756e047a2e52981c5580659a2956dc6ff0" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_STATVFS&lt;/code&gt; symbol, which indicates to the C program that the statvfs() routine is available.</source>
          <target state="translated">이 변수는 조건 적으로 &lt;code&gt;HAS_STATVFS&lt;/code&gt; 기호를 정의하며 이는 statvfs () 루틴을 사용할 수 있음을 C 프로그램에 표시합니다.</target>
        </trans-unit>
        <trans-unit id="b6d10579337800185a9e7132750b60557d76bfa3" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_STRERROR_R&lt;/code&gt; symbol, which indicates to the C program that the strerror_r() routine is available.</source>
          <target state="translated">이 변수는 조건 적으로 &lt;code&gt;HAS_STRERROR_R&lt;/code&gt; 기호를 정의하며 , 이는 strerror_r () 루틴을 사용할 수 있음을 C 프로그램에 표시합니다.</target>
        </trans-unit>
        <trans-unit id="20fcca82429da7795e5cc59892dac7593b77e77b" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_STRFTIME&lt;/code&gt; symbol, which indicates to the C program that the strftime() routine is available.</source>
          <target state="translated">이 변수는 조건부로 &lt;code&gt;HAS_STRFTIME&lt;/code&gt; 기호를 정의하며 , 이는 strftime () 루틴을 사용할 수 있음을 C 프로그램에 표시합니다.</target>
        </trans-unit>
        <trans-unit id="0199a91972fc0c149d39a201728c3b80c0b01bd2" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_STRLCAT&lt;/code&gt; symbol, which indicates to the C program that the strlcat () routine is available.</source>
          <target state="translated">이 변수는 조건 적으로 &lt;code&gt;HAS_STRLCAT&lt;/code&gt; 기호를 정의합니다 .이 기호는 C 프로그램에 strlcat () 루틴을 사용할 수 있음을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="d6ee12efe7537e1b19c6229e9c0752448d18d8be" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_STRLCPY&lt;/code&gt; symbol, which indicates to the C program that the strlcpy () routine is available.</source>
          <target state="translated">이 변수는 조건 적으로 &lt;code&gt;HAS_STRLCPY&lt;/code&gt; 기호를 정의합니다 .이 기호는 C 프로그램에 strlcpy () 루틴을 사용할 수 있음을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="3b009264466a67856d0fde2237b24764adf8eec7" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_STRTOD&lt;/code&gt; symbol, which indicates to the C program that the strtod() routine is available to provide better numeric string conversion than atof().</source>
          <target state="translated">이 변수는 조건부로 &lt;code&gt;HAS_STRTOD&lt;/code&gt; 기호를 정의합니다 . 이는 C 프로그램에 atto ()보다 더 나은 숫자 문자열 변환을 제공하기 위해 strtod () 루틴을 사용할 수 있음을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="7663a9fd5e1349aef4bd66a1526e5e17e25ffc7f" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_STRTOL&lt;/code&gt; symbol, which indicates to the C program that the strtol() routine is available to provide better numeric string conversion than atoi() and friends.</source>
          <target state="translated">이 변수는 조건부로 &lt;code&gt;HAS_STRTOL&lt;/code&gt; 기호를 정의합니다 . 이는 C 프로그램에 strtol () 루틴이 atoi () 및 friends보다 더 나은 숫자 문자열 변환을 제공 할 수 있음을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="b4ebed292945155ae20aa03c4b963474073bfaad" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_STRTOLD&lt;/code&gt; symbol, which indicates to the C program that the strtold() routine is available.</source>
          <target state="translated">이 변수는 조건부로 &lt;code&gt;HAS_STRTOLD&lt;/code&gt; 기호를 정의합니다 .이 기호는 C 프로그램에 strtold () 루틴을 사용할 수 있음을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="4c8554bba02c19a66efff6c62b106f50dbcdd559" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_STRTOLL&lt;/code&gt; symbol, which indicates to the C program that the strtoll() routine is available.</source>
          <target state="translated">이 변수는 조건부로 &lt;code&gt;HAS_STRTOLL&lt;/code&gt; 기호를 정의합니다 . 이는 C 프로그램에 strtoll () 루틴을 사용할 수 있음을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="3c41f45d6566d0379002c0f44a1d0b13c3bd3578" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_STRTOQ&lt;/code&gt; symbol, which indicates to the C program that the strtoq() routine is available.</source>
          <target state="translated">이 변수는 조건 적으로 &lt;code&gt;HAS_STRTOQ&lt;/code&gt; 기호를 정의합니다 . 이는 C 프로그램에 strtoq () 루틴을 사용할 수 있음을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="15dee005d531cb27f730bcb33fec29967a9b086e" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_STRTOUL&lt;/code&gt; symbol, which indicates to the C program that the strtoul() routine is available to provide conversion of strings to unsigned long.</source>
          <target state="translated">이 변수는 조건 적으로 &lt;code&gt;HAS_STRTOUL&lt;/code&gt; 기호를 정의합니다 . 이는 C 프로그램에 strtoul () 루틴을 사용하여 문자열을 부호없는 long으로 변환 할 수 있음을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="b4c34f50f555ef99da020f2bf42d80275ccad790" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_STRTOULL&lt;/code&gt; symbol, which indicates to the C program that the strtoull() routine is available.</source>
          <target state="translated">이 변수는 조건 적으로 &lt;code&gt;HAS_STRTOULL&lt;/code&gt; 기호를 정의합니다 . 이는 C 프로그램에 strtoull () 루틴을 사용할 수 있음을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="202f2b2facf6aaca768403cde9f69a78fbed5c70" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_STRTOUQ&lt;/code&gt; symbol, which indicates to the C program that the strtouq() routine is available.</source>
          <target state="translated">이 변수는 조건 적으로 &lt;code&gt;HAS_STRTOUQ&lt;/code&gt; 기호를 정의합니다 . 이는 C 프로그램에 strtouq () 루틴을 사용할 수 있음을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="908f7281b1b2806240e541ecfb60649f6724c78c" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_STRUCT_CMSGHDR&lt;/code&gt; symbol, which indicates that the struct cmsghdr is supported.</source>
          <target state="translated">이 변수는 조건 적으로 &lt;code&gt;HAS_STRUCT_CMSGHDR&lt;/code&gt; 기호를 정의하며 , 이는 cmsghdr 구조체가 지원됨을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="0c2cc131f4bd644627be6586614b95caae06037e" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_STRUCT_FS_DATA&lt;/code&gt; symbol, which indicates that the struct fs_data is supported.</source>
          <target state="translated">이 변수 는 struct fs_data가 지원됨을 나타내는 &lt;code&gt;HAS_STRUCT_FS_DATA&lt;/code&gt; 기호를 조건부로 정의합니다 .</target>
        </trans-unit>
        <trans-unit id="70b83a4618c8974c01762678297179761ed9cb4b" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_STRUCT_MSGHDR&lt;/code&gt; symbol, which indicates that the struct msghdr is supported.</source>
          <target state="translated">이 변수 는 struct msghdr이 지원됨을 나타내는 &lt;code&gt;HAS_STRUCT_MSGHDR&lt;/code&gt; 기호를 조건부로 정의합니다 .</target>
        </trans-unit>
        <trans-unit id="07c61153b69ba06c16d25e731d8375cc69106eb9" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_STRUCT_STATFS&lt;/code&gt; symbol, which indicates that the struct statfs is supported.</source>
          <target state="translated">이 변수 는 struct statfs가 지원됨을 나타내는 &lt;code&gt;HAS_STRUCT_STATFS&lt;/code&gt; 기호를 조건부로 정의합니다 .</target>
        </trans-unit>
        <trans-unit id="6952abd4dbae9393322867e0eaeee3370be3451e" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_STRUCT_STATFS_F_FLAGS&lt;/code&gt; symbol, which indicates to struct statfs from has f_flags member. This kind of struct statfs is coming from</source>
          <target state="translated">이 변수는 조건부로 &lt;code&gt;HAS_STRUCT_STATFS_F_FLAGS&lt;/code&gt; 기호를 정의합니다 .이 기호는 statfs를 구성하는 f_flags 멤버를 나타냅니다. 이런 종류의 구조체 통계는</target>
        </trans-unit>
        <trans-unit id="7058bd273716b9561ffb2269bc1ec12c4cfdd2ba" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_SYMLINK&lt;/code&gt; symbol, which indicates to the C program that the symlink() routine is available to create symbolic links.</source>
          <target state="translated">이 변수는 조건부로 &lt;code&gt;HAS_SYMLINK&lt;/code&gt; 기호를 정의합니다 .이 기호는 C 프로그램에 symlink () 루틴을 사용하여 기호 링크를 작성할 수 있음을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="a5982888f52282170460652400623692cf5fbd8f" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_SYSCALL_PROTO&lt;/code&gt; symbol, which indicates to the C program that the system provides a prototype for the syscall() function. Otherwise, it is up to the program to supply one.</source>
          <target state="translated">이 변수는 &lt;code&gt;HAS_SYSCALL_PROTO&lt;/code&gt; 기호를 조건부로 정의합니다 . 이는 시스템이 syscall () 함수의 프로토 타입을 제공함을 C 프로그램에 표시합니다. 그렇지 않으면 프로그램을 제공하는 것은 프로그램의 책임입니다.</target>
        </trans-unit>
        <trans-unit id="88ccca60eed9e4c30c2d48cd303ea8e18766bc9f" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_SYSCONF&lt;/code&gt; symbol, which indicates to the C program that the sysconf() routine is available to determine system related limits and options.</source>
          <target state="translated">이 변수는 &lt;code&gt;HAS_SYSCONF&lt;/code&gt; 기호를 조건부로 정의합니다 .이 기호는 C 프로그램에 sysconf () 루틴을 사용하여 시스템 관련 한계 및 옵션을 결정할 수 있음을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="3a7ca1a6ef66dc4719c180d21b1b7c1fe5dafcaf" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_TCGETPGRP&lt;/code&gt; symbol, which indicates to the C program that the tcgetpgrp() routine is available. to get foreground process group &lt;code&gt;ID&lt;/code&gt; .</source>
          <target state="translated">이 변수는 조건 적으로 &lt;code&gt;HAS_TCGETPGRP&lt;/code&gt; 기호를 정의합니다 .이 기호는 C 프로그램에 tcgetpgrp () 루틴을 사용할 수 있음을 나타냅니다. 포 그라운드 프로세스 그룹 &lt;code&gt;ID&lt;/code&gt; 를 가져옵니다 .</target>
        </trans-unit>
        <trans-unit id="1050e2783e77959b181f6d5b9722430aa60feff4" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_TCSETPGRP&lt;/code&gt; symbol, which indicates to the C program that the tcsetpgrp() routine is available to set foreground process group &lt;code&gt;ID&lt;/code&gt; .</source>
          <target state="translated">이 변수는 조건부로 &lt;code&gt;HAS_TCSETPGRP&lt;/code&gt; 기호를 정의합니다 . 이는 tcsetpgrp () 루틴을 사용하여 포 그라운드 프로세스 그룹 &lt;code&gt;ID&lt;/code&gt; 를 설정할 수 있음을 C 프로그램에 표시합니다 .</target>
        </trans-unit>
        <trans-unit id="4e109b631fbc101f5c36849cbd52d05af1365890" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_TELLDIR_PROTO&lt;/code&gt; symbol, which indicates to the C program that the system provides a prototype for the telldir() function. Otherwise, it is up to the program to supply one.</source>
          <target state="translated">이 변수는 &lt;code&gt;HAS_TELLDIR_PROTO&lt;/code&gt; 기호를 조건부로 정의하며 , 이는 시스템이 telldir () 함수의 프로토 타입을 제공함을 C 프로그램에 표시합니다. 그렇지 않으면 프로그램을 제공하는 것은 프로그램의 책임입니다.</target>
        </trans-unit>
        <trans-unit id="a356aa1bf30cdcca4c04217ed5143321ebf27333" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_TGAMMA&lt;/code&gt; symbol, which indicates to the C program that the tgamma() routine is available for the gamma function. See also d_lgamma.</source>
          <target state="translated">이 변수는 조건 적으로 &lt;code&gt;HAS_TGAMMA&lt;/code&gt; 기호를 정의합니다 .이 기호는 C 프로그램에 감마 함수에 tgamma () 루틴을 사용할 수 있음을 나타냅니다. d_lgamma도 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="e0d3b04e3e15a7fbddd6ff5771df57b8daf49b9a" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_TIME&lt;/code&gt; symbol, which indicates that the time() routine exists. The time() routine is normally provided on &lt;code&gt;UNIX&lt;/code&gt; systems.</source>
          <target state="translated">이 변수 는 time () 루틴이 존재 함을 나타내는 &lt;code&gt;HAS_TIME&lt;/code&gt; 기호를 조건부로 정의 합니다. time () 루틴은 일반적으로 &lt;code&gt;UNIX&lt;/code&gt; 시스템에서 제공됩니다 .</target>
        </trans-unit>
        <trans-unit id="2e45a747b9e83aef73ebd2b721af8f5b725c2d2b" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_TIMEGM&lt;/code&gt; symbol, which indicates to the C program that the timegm () routine is available.</source>
          <target state="translated">이 변수는 조건부로 &lt;code&gt;HAS_TIMEGM&lt;/code&gt; 기호를 정의합니다 .이 기호는 C 프로그램에 timegm () 루틴을 사용할 수 있음을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="aed39f91f6f498dc30b78a6b99daa12a0c8dbe22" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_TIMES&lt;/code&gt; symbol, which indicates that the times() routine exists. The times() routine is normally provided on &lt;code&gt;UNIX&lt;/code&gt; systems. You may have to include &amp;lt;sys/times.h&amp;gt;.</source>
          <target state="translated">이 변수는 &lt;code&gt;HAS_TIMES&lt;/code&gt; 기호를 조건부로 정의하며 , 이는 times () 루틴이 존재 함을 나타냅니다. times () 루틴은 일반적으로 &lt;code&gt;UNIX&lt;/code&gt; 시스템에서 제공됩니다 . &amp;lt;sys / times.h&amp;gt;를 포함해야 할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="cc99d5487b8407f3d121903a90c54d0962e21c30" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_TMPNAM_R&lt;/code&gt; symbol, which indicates to the C program that the tmpnam_r() routine is available.</source>
          <target state="translated">이 변수는 조건부로 &lt;code&gt;HAS_TMPNAM_R&lt;/code&gt; 기호를 정의합니다 .이 기호는 C 프로그램에 tmpnam_r () 루틴을 사용할 수 있음을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="9060e5c9a5e11902a46a7c0c6c1231242e9cd84a" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_TRUNC&lt;/code&gt; symbol, which indicates to the C program that the trunc() routine is available to round doubles towards zero.</source>
          <target state="translated">이 변수는 조건부로 &lt;code&gt;HAS_TRUNC&lt;/code&gt; 기호를 정의합니다 . 이는 C 프로그램에 trunc () 루틴을 사용하여 double을 0으로 반올림 할 수 있음을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="ba90122d3cb0eaaeaced75e42cef2af23baad2e3" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_TRUNCL&lt;/code&gt; symbol, which indicates to the C program that the truncl() routine is available to round long doubles towards zero. If copysignl is also present, we can emulate modfl.</source>
          <target state="translated">이 변수는 조건부로 &lt;code&gt;HAS_TRUNCL&lt;/code&gt; 기호를 정의합니다 . 이는 C 프로그램에 truncl () 루틴을 사용하여 long double을 0으로 반올림 할 수 있음을 나타냅니다. copysignl도 있으면 modfl을 에뮬레이션 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b5598b74dd4b4c646e4f128679fa9e98d79530a8" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_TTYNAME_R&lt;/code&gt; symbol, which indicates to the C program that the ttyname_r() routine is available.</source>
          <target state="translated">이 변수는 조건부로 &lt;code&gt;HAS_TTYNAME_R&lt;/code&gt; 기호를 정의합니다 .이 기호는 C 프로그램에 ttyname_r () 루틴을 사용할 수 있음을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="4f46afd77f6d5e168add253df39f6058155babaf" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_UALARM&lt;/code&gt; symbol, which indicates to the C program that the ualarm() routine is available.</source>
          <target state="translated">이 변수는 조건 적으로 &lt;code&gt;HAS_UALARM&lt;/code&gt; 기호를 정의합니다 .이 기호는 C 프로그램에 ualarm () 루틴을 사용할 수 있음을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="d8665a1dcaac89f591d28c05d0cf1043cba55443" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_UMASK&lt;/code&gt; symbol, which indicates to the C program that the umask() routine is available. to set and get the value of the file creation mask.</source>
          <target state="translated">이 변수는 조건 적으로 &lt;code&gt;HAS_UMASK&lt;/code&gt; 기호를 정의합니다 .이 기호는 C 프로그램에 umask () 루틴을 사용할 수 있음을 나타냅니다. 파일 생성 마스크의 값을 설정하고 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="a77432fbea9492a12b8bf7dfeb3725ff8f4cdabe" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_UNAME&lt;/code&gt; symbol, which indicates to the C program that the uname() routine may be used to derive the host name.</source>
          <target state="translated">이 변수는 &lt;code&gt;HAS_UNAME&lt;/code&gt; 기호를 조건부로 정의합니다 . 이는 C 프로그램에 uname () 루틴이 호스트 이름을 파생시키는 데 사용될 수 있음을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="deb135c3cd199e3ea7a7396cd244ad4542edcf21" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_UNORDERED&lt;/code&gt; symbol, which indicates to the C program that the unordered() routine is available.</source>
          <target state="translated">이 변수는 조건부로 &lt;code&gt;HAS_UNORDERED&lt;/code&gt; 기호를 정의하며 , 이는 unorder () 루틴이 사용 가능함을 C 프로그램에 표시합니다.</target>
        </trans-unit>
        <trans-unit id="cb97b5f948d41e4ab4bd4c80a95f592c5192864c" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_UNSETENV&lt;/code&gt; symbol, which indicates to the C program that the unsetenv () routine is available.</source>
          <target state="translated">이 변수 는 C 프로그램에 unsetenv () 루틴을 사용할 수 있음을 나타내는 &lt;code&gt;HAS_UNSETENV&lt;/code&gt; 기호를 조건부로 정의합니다 .</target>
        </trans-unit>
        <trans-unit id="987e30d987fc704b3bc810fe70e4613f9b4db2ea" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_USLEEP_PROTO&lt;/code&gt; symbol, which indicates to the C program that the system provides a prototype for the usleep() function. Otherwise, it is up to the program to supply one.</source>
          <target state="translated">이 변수는 &lt;code&gt;HAS_USLEEP_PROTO&lt;/code&gt; 기호를 조건부로 정의하며 , 이는 시스템이 usleep () 함수의 프로토 타입을 제공함을 C 프로그램에 표시합니다. 그렇지 않으면 프로그램을 제공하는 것은 프로그램의 책임입니다.</target>
        </trans-unit>
        <trans-unit id="9bc323a120864193ae678dcfc7901dfba9c56f93" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_VFORK&lt;/code&gt; symbol, which indicates the vfork() routine is available.</source>
          <target state="translated">이 변수는 조건 적으로 vfork () 루틴이 사용 가능함을 나타내는 &lt;code&gt;HAS_VFORK&lt;/code&gt; 기호를 정의합니다 .</target>
        </trans-unit>
        <trans-unit id="c572f38c8f8383dc93ca3e52a2e1d968736e2e1a" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_VPRINTF&lt;/code&gt; symbol, which indicates to the C program that the vprintf() routine is available to printf with a pointer to an argument list.</source>
          <target state="translated">이 변수는 조건 적으로 &lt;code&gt;HAS_VPRINTF&lt;/code&gt; 기호를 정의합니다 . 이는 C 프로그램에 vprintf () 루틴을 인수 목록에 대한 포인터로 printf에 사용할 수 있음을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="327856483c81a4ce6287b58d5490e63b7e042d6d" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_VSNPRINTF&lt;/code&gt; symbol, which indicates to the C program that the vsnprintf () library function is available.</source>
          <target state="translated">이 변수는 조건 적으로 &lt;code&gt;HAS_VSNPRINTF&lt;/code&gt; 기호를 정의합니다 .이 기호는 C 프로그램에 vsnprintf () 라이브러리 함수를 사용할 수 있음을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="b3eaf32082b6322f61da77cb85175181a6175cf0" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_WCSCMP&lt;/code&gt; symbol if the wcscmp() routine is available and can be used to compare wide character strings.</source>
          <target state="translated">이 변수 는 wcscmp () 루틴이 사용 가능하고 넓은 문자열을 비교하는 데 사용할 수있는 경우 &lt;code&gt;HAS_WCSCMP&lt;/code&gt; 기호를 조건부로 정의합니다 .</target>
        </trans-unit>
        <trans-unit id="dfd2c81bf0cabf879e52f350bf5cabdae3221fae" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_WCSTOMBS&lt;/code&gt; symbol, which indicates to the C program that the wcstombs() routine is available to convert wide character strings to multibyte strings.</source>
          <target state="translated">이 변수는 조건부로 &lt;code&gt;HAS_WCSTOMBS&lt;/code&gt; 기호를 정의합니다 . 이는 C 프로그램에 wcstombs () 루틴을 사용하여 와이드 문자열을 멀티 바이트 문자열로 변환 할 수 있음을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="eb15fb80afbef828248291d223546ec89a111743" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_WCSXFRM&lt;/code&gt; symbol if the wcsxfrm() routine is available and can be used to compare wide character strings.</source>
          <target state="translated">이 변수 는 wcsxfrm () 루틴이 사용 가능하고 넓은 문자열을 비교하는 데 사용할 수있는 경우 &lt;code&gt;HAS_WCSXFRM&lt;/code&gt; 기호를 조건부로 정의합니다 .</target>
        </trans-unit>
        <trans-unit id="adca00def3cf99930881010172d517772ff01cb0" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_WCTOMB&lt;/code&gt; symbol, which indicates to the C program that the wctomb() routine is available to convert a wide character to a multibyte.</source>
          <target state="translated">이 변수는 조건부로 &lt;code&gt;HAS_WCTOMB&lt;/code&gt; 기호를 정의합니다 . 이는 C 프로그램에 wctomb () 루틴을 사용하여 와이드 문자를 멀티 바이트로 변환 할 수 있음을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="a3a65a5b94dfaebe80d8d3e396ae7b2d0b8a024d" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;HAS_WRITEV&lt;/code&gt; symbol, which indicates to the C program that the writev() routine is available.</source>
          <target state="translated">이 변수는 조건 적으로 &lt;code&gt;HAS_WRITEV&lt;/code&gt; 기호를 정의합니다 .이 기호는 C 프로그램에 writev () 루틴을 사용할 수 있음을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="5b37ccd48a866251041f6754fa3144da516a653b" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;I_ARPA_INET&lt;/code&gt; symbol, and indicates whether a C program should include &amp;lt;arpa/inet.h&amp;gt;.</source>
          <target state="translated">이 변수는 &lt;code&gt;I_ARPA_INET&lt;/code&gt; 기호를 조건부로 정의하고 C 프로그램에 &amp;lt;arpa / inet.h&amp;gt;를 포함해야하는지 여부를 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="38de0a70ee039486049f502528ebe93b32c48695" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;I_ASSERT&lt;/code&gt; symbol, which indicates to the C program that &amp;lt;assert.h&amp;gt; exists and could be included.</source>
          <target state="translated">이 변수는 조건 적으로 &lt;code&gt;I_ASSERT&lt;/code&gt; 기호를 정의합니다 .이 기호는 C 프로그램에 &amp;lt;assert.h&amp;gt;가 있으며 포함 할 수 있음을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="e8ceb682bc74a6d5170915453c49e74891fdee08" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;I_BFD&lt;/code&gt; symbol, and indicates whether a C program can include &amp;lt;bfd.h&amp;gt;.</source>
          <target state="translated">이 변수는 조건 적으로 &lt;code&gt;I_BFD&lt;/code&gt; 기호를 정의하고 C 프로그램에 &amp;lt;bfd.h&amp;gt;를 포함 할 수 있는지 여부를 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="618ff64cf78453d8369b09fbbee5c454011af3de" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;I_CRYPT&lt;/code&gt; symbol, and indicates whether a C program should include &amp;lt;crypt.h&amp;gt;.</source>
          <target state="translated">이 변수는 &lt;code&gt;I_CRYPT&lt;/code&gt; 기호를 조건부로 정의하고 C 프로그램에 &amp;lt;crypt.h&amp;gt;를 포함해야하는지 여부를 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="e181a6075b3d31a85ace9e0a8706631c621e8931" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;I_DB&lt;/code&gt; symbol, and indicates whether a C program may include Berkeley's &lt;code&gt;DB&lt;/code&gt; include file &amp;lt;db.h&amp;gt;.</source>
          <target state="translated">이 변수는 조건 적으로 &lt;code&gt;I_DB&lt;/code&gt; 기호를 정의하고 C 프로그램에 Berkeley의 &lt;code&gt;DB&lt;/code&gt; 포함 파일 &amp;lt;db.h&amp;gt; 가 포함되는지 여부를 나타냅니다 .</target>
        </trans-unit>
        <trans-unit id="9e9f2cf4b3b3a834426c71e6c170553bcc453f35" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;I_DBM&lt;/code&gt; symbol, which indicates to the C program that &amp;lt;dbm.h&amp;gt; exists and should be included.</source>
          <target state="translated">이 변수는 조건 적으로 &lt;code&gt;I_DBM&lt;/code&gt; 기호를 정의합니다 .이 기호는 C 프로그램에 &amp;lt;dbm.h&amp;gt;가 있으며 포함해야 함을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="1fda34b3c8854e05caf22abc8bc2ff1272f55d68" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;I_DLFCN&lt;/code&gt; symbol, which indicates to the C program that &amp;lt;dlfcn.h&amp;gt; exists and should be included.</source>
          <target state="translated">이 변수는 조건부로 &lt;code&gt;I_DLFCN&lt;/code&gt; 기호를 정의합니다 .이 기호는 C 프로그램에 &amp;lt;dlfcn.h&amp;gt;가 있으며 포함해야 함을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="47233cae3f7c26727170122f208c3a632e57278c" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;I_EXECINFO&lt;/code&gt; symbol, and indicates whether a C program may include &amp;lt;execinfo.h&amp;gt;, for backtrace() support.</source>
          <target state="translated">이 변수는 조건부로 &lt;code&gt;I_EXECINFO&lt;/code&gt; 기호를 정의하고 backtrace () 지원을 위해 C 프로그램에 &amp;lt;execinfo.h&amp;gt;가 포함되는지 여부를 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="9fb583436cd82d895b62e3a6edde63c2f0d4ab92" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;I_FENV&lt;/code&gt; symbol, which indicates to the C program that &amp;lt;fenv.h&amp;gt; exists and should be included.</source>
          <target state="translated">이 변수는 조건 적으로 &lt;code&gt;I_FENV&lt;/code&gt; 기호를 정의합니다 .이 기호는 C 프로그램에 &amp;lt;fenv.h&amp;gt;가 있으며 포함해야 함을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="6f342c2b480c167c27ed27fcafea94fa631b2106" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;I_FLOAT&lt;/code&gt; symbol, and indicates whether a C program may include &amp;lt;float.h&amp;gt; to get symbols like &lt;code&gt;DBL_MAX&lt;/code&gt; or &lt;code&gt;DBL_MIN&lt;/code&gt; ,</source>
          <target state="translated">이 변수는 조건부로 &lt;code&gt;I_FLOAT&lt;/code&gt; 기호를 정의하고 C 프로그램이 &amp;lt;float.h&amp;gt;를 포함하여 &lt;code&gt;DBL_MAX&lt;/code&gt; 또는 &lt;code&gt;DBL_MIN&lt;/code&gt; 과 같은 기호를 가져올 수 있는지 여부를 나타냅니다 .</target>
        </trans-unit>
        <trans-unit id="fa2205a6f0f1c56938c16ff1d94aafbc27568faf" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;I_FP&lt;/code&gt; symbol, and indicates whether a C program should include &amp;lt;fp.h&amp;gt;.</source>
          <target state="translated">이 변수는 조건 적으로 &lt;code&gt;I_FP&lt;/code&gt; 기호를 정의하고 C 프로그램에 &amp;lt;fp.h&amp;gt;를 포함해야하는지 여부를 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="9c2efed86c33937d4e3c39e522c7f9d125f78081" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;I_FP_CLASS&lt;/code&gt; symbol, and indicates whether a C program should include &amp;lt;fp_class.h&amp;gt;.</source>
          <target state="translated">이 변수는 &lt;code&gt;I_FP_CLASS&lt;/code&gt; 기호를 조건부로 정의하고 C 프로그램에 &amp;lt;fp_class.h&amp;gt;를 포함해야하는지 여부를 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="3fd4f87d1f78f8ea7be044b153e2b9fcab964547" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;I_GDBM&lt;/code&gt; symbol, which indicates to the C program that &amp;lt;gdbm.h&amp;gt; exists and should be included.</source>
          <target state="translated">이 변수는 조건 적으로 &lt;code&gt;I_GDBM&lt;/code&gt; 기호를 정의합니다 .이 기호는 C 프로그램에 &amp;lt;gdbm.h&amp;gt;가 있으며 포함해야 함을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="632bb9813acea05557477d7f7308698aaf133394" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;I_GDBMNDBM&lt;/code&gt; symbol, which indicates to the C program that &amp;lt;gdbm/ndbm.h&amp;gt; exists and should be included. This was the location of the</source>
          <target state="translated">이 변수는 조건 적으로 &lt;code&gt;I_GDBMNDBM&lt;/code&gt; 기호를 정의합니다 .이 기호는 C 프로그램에 &amp;lt;gdbm / ndbm.h&amp;gt;가 존재하고 포함되어야 함을 나타냅니다. 이것은의 위치였다</target>
        </trans-unit>
        <trans-unit id="3f486c464538a4e72286c856211ffe5c7783f79d" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;I_GDBM_NDBM&lt;/code&gt; symbol, which indicates to the C program that &amp;lt;gdbm-</source>
          <target state="translated">이 변수는 조건부로 &lt;code&gt;I_GDBM_NDBM&lt;/code&gt; 기호를 정의합니다 .이 기호는 C 프로그램에 &amp;lt;gdbm-</target>
        </trans-unit>
        <trans-unit id="9492102cf6dc481064530ae7f5450725bf6d6d51" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;I_GRP&lt;/code&gt; symbol, and indicates whether a C program should include &amp;lt;grp.h&amp;gt;.</source>
          <target state="translated">이 변수는 조건 적으로 &lt;code&gt;I_GRP&lt;/code&gt; 기호를 정의하고 C 프로그램에 &amp;lt;grp.h&amp;gt;를 포함해야하는지 여부를 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="11d71d9b0b583a497cb38a5712c2aec0b4e4b642" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;I_IEEEFP&lt;/code&gt; symbol, and indicates whether a C program should include &amp;lt;ieeefp.h&amp;gt;.</source>
          <target state="translated">이 변수는 조건 적으로 &lt;code&gt;I_IEEEFP&lt;/code&gt; 기호를 정의하고 C 프로그램에 &amp;lt;ieeefp.h&amp;gt;를 포함해야하는지 여부를 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="64557796fbb946feae3ed0b391c186b6f4833a1a" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;I_INTTYPES&lt;/code&gt; symbol, and indicates whether a C program should include &amp;lt;inttypes.h&amp;gt;.</source>
          <target state="translated">이 변수는 조건 적으로 &lt;code&gt;I_INTTYPES&lt;/code&gt; 기호를 정의하고 C 프로그램에 &amp;lt;inttypes.h&amp;gt;를 포함해야하는지 여부를 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="97b12d663c1d9030c23feb1c10bb41c5fd90a8f7" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;I_LANGINFO&lt;/code&gt; symbol, and indicates whether a C program should include &amp;lt;langinfo.h&amp;gt;.</source>
          <target state="translated">이 변수는 조건 적으로 &lt;code&gt;I_LANGINFO&lt;/code&gt; 기호를 정의하고 C 프로그램에 &amp;lt;langinfo.h&amp;gt;를 포함해야하는지 여부를 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="9960a7be3c917c0e4158c71dbf678da70bb9cc48" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;I_LIBUTIL&lt;/code&gt; symbol, and indicates whether a C program should include &amp;lt;libutil.h&amp;gt;.</source>
          <target state="translated">이 변수는 &lt;code&gt;I_LIBUTIL&lt;/code&gt; 기호를 조건부로 정의하고 C 프로그램에 &amp;lt;libutil.h&amp;gt;를 포함해야하는지 여부를 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="911609c3cdeee7207528d6979182e0bc6c4fd930" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;I_LIMITS&lt;/code&gt; symbol, and indicates whether a C program may include &amp;lt;limits.h&amp;gt; to get symbols like &lt;code&gt;WORD_BIT&lt;/code&gt; and friends.</source>
          <target state="translated">이 변수는 조건부로 &lt;code&gt;I_LIMITS&lt;/code&gt; 기호를 정의하고 C 프로그램에 &amp;lt;limits.h&amp;gt;가 포함되어 &lt;code&gt;WORD_BIT&lt;/code&gt; 및 프렌즈 와 같은 기호를 가져올 수 있는지 여부를 나타냅니다 .</target>
        </trans-unit>
        <trans-unit id="4f462ee34f69dff4f8fdc68eb25bc7c27681be3c" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;I_LOCALE&lt;/code&gt; symbol, and indicates whether a C program should include &amp;lt;locale.h&amp;gt;.</source>
          <target state="translated">이 변수는 &lt;code&gt;I_LOCALE&lt;/code&gt; 기호를 조건부로 정의하고 C 프로그램에 &amp;lt;locale.h&amp;gt;를 포함해야하는지 여부를 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="58db16277630a4f74dd8d50d88f86b8863d21079" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;I_MACH_CTHREADS&lt;/code&gt; symbol, and indicates whether a C program should include &amp;lt;mach/cthreads.h&amp;gt;.</source>
          <target state="translated">이 변수는 조건 적으로 &lt;code&gt;I_MACH_CTHREADS&lt;/code&gt; 기호를 정의하고 C 프로그램에 &amp;lt;mach / cthreads.h&amp;gt;를 포함해야하는지 여부를 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="6aa93fab852b3d83f9af5bf15f48d738e7be3785" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;I_MALLOC&lt;/code&gt; symbol, and indicates whether a C program should include &amp;lt;malloc.h&amp;gt;.</source>
          <target state="translated">이 변수는 조건 적으로 &lt;code&gt;I_MALLOC&lt;/code&gt; 기호를 정의하고 C 프로그램에 &amp;lt;malloc.h&amp;gt;를 포함해야하는지 여부를 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="50c90e2ec31de5808dcba00494cd651bad89cadd" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;I_MALLOCMALLOC&lt;/code&gt; symbol, and indicates whether a C program should include &amp;lt;malloc/malloc.h&amp;gt;.</source>
          <target state="translated">이 변수는 &lt;code&gt;I_MALLOCMALLOC&lt;/code&gt; 기호를 조건부로 정의하고 C 프로그램에 &amp;lt;malloc / malloc.h&amp;gt;를 포함해야하는지 여부를 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="a89667a03401c90a98fd9edd26bef51b9cd968a1" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;I_MATH&lt;/code&gt; symbol, and indicates whether a C program may include &amp;lt;math.h&amp;gt;.</source>
          <target state="translated">이 변수는 조건부로 &lt;code&gt;I_MATH&lt;/code&gt; 기호를 정의하고 C 프로그램에 &amp;lt;math.h&amp;gt;가 포함될 수 있는지 여부를 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="c1627af7e21d52c52bc1b3aa39d832dccd3c1aaa" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;I_MEMORY&lt;/code&gt; symbol, and indicates whether a C program should include &amp;lt;memory.h&amp;gt;.</source>
          <target state="translated">이 변수는 조건 적으로 &lt;code&gt;I_MEMORY&lt;/code&gt; 기호를 정의하고 C 프로그램에 &amp;lt;memory.h&amp;gt;를 포함해야하는지 여부를 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="3a1f03c65a2ef8da8e85b3acb3a3f2e913de02f6" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;I_MNTENT&lt;/code&gt; symbol, and indicates whether a C program should include &amp;lt;mntent.h&amp;gt;.</source>
          <target state="translated">이 변수는 조건 적으로 &lt;code&gt;I_MNTENT&lt;/code&gt; 기호를 정의하고 C 프로그램에 &amp;lt;mntent.h&amp;gt;를 포함해야하는지 여부를 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="8038db7dd0fcd1104d7333a8363c5504bfccb8f7" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;I_NDBM&lt;/code&gt; symbol, which indicates to the C program that &amp;lt;ndbm.h&amp;gt; exists and should be included.</source>
          <target state="translated">이 변수는 조건 적으로 &lt;code&gt;I_NDBM&lt;/code&gt; 기호를 정의합니다 .이 기호는 C 프로그램에 &amp;lt;ndbm.h&amp;gt;가 존재하고 포함되어야 함을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="0573473833eeafa395e7285ff8b1e78395df0230" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;I_NETDB&lt;/code&gt; symbol, and indicates whether a C program should include &amp;lt;netdb.h&amp;gt;.</source>
          <target state="translated">이 변수는 &lt;code&gt;I_NETDB&lt;/code&gt; 기호를 조건부로 정의하고 C 프로그램에 &amp;lt;netdb.h&amp;gt;를 포함해야하는지 여부를 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="7a61f0751ce344d35be6b0a3887f51333b342e4f" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;I_NETINET_TCP&lt;/code&gt; symbol, and indicates whether a C program should include &amp;lt;netinet/tcp.h&amp;gt;.</source>
          <target state="translated">이 변수는 &lt;code&gt;I_NETINET_TCP&lt;/code&gt; 기호를 조건부로 정의하고 C 프로그램에 &amp;lt;netinet / tcp.h&amp;gt;를 포함해야하는지 여부를 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="e1b20b4d01af95d7a379ff8450329b0c8b290d61" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;I_NET_ERRNO&lt;/code&gt; symbol, which indicates to the C program that &amp;lt;net/errno.h&amp;gt; exists and should be included.</source>
          <target state="translated">이 변수는 조건 적으로 &lt;code&gt;I_NET_ERRNO&lt;/code&gt; 기호를 정의합니다 .이 기호는 C 프로그램에 &amp;lt;net / errno.h&amp;gt;가 있으며 포함해야 함을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="d1a57640c29d817c955a30902e3dbbfa4895726e" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;I_POLL&lt;/code&gt; symbol, and indicates whether a C program should include &amp;lt;poll.h&amp;gt;.</source>
          <target state="translated">이 변수는 &lt;code&gt;I_POLL&lt;/code&gt; 기호를 조건부로 정의하고 C 프로그램에 &amp;lt;poll.h&amp;gt;를 포함해야하는지 여부를 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="8784fa6e98152577e3bed7b4cdb551938c218a97" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;I_PROT&lt;/code&gt; symbol, and indicates whether a C program should include &amp;lt;prot.h&amp;gt;.</source>
          <target state="translated">이 변수는 조건 적으로 &lt;code&gt;I_PROT&lt;/code&gt; 기호를 정의하고 C 프로그램에 &amp;lt;prot.h&amp;gt;를 포함해야하는지 여부를 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="f36fa31bdff87a9f1c895ce3edc562cc991e35d0" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;I_PTHREAD&lt;/code&gt; symbol, and indicates whether a C program should include &amp;lt;pthread.h&amp;gt;.</source>
          <target state="translated">이 변수는 조건 적으로 &lt;code&gt;I_PTHREAD&lt;/code&gt; 기호를 정의하고 C 프로그램에 &amp;lt;pthread.h&amp;gt;를 포함해야하는지 여부를 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="cd22f7bcb9e441cf01c1649489c7a2c75c854e83" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;I_RPCSVC_DBM&lt;/code&gt; symbol, which indicates to the C program that &amp;lt;rpcsvc/dbm.h&amp;gt; exists and should be included. Some System V systems might need this instead of &amp;lt;dbm.h&amp;gt;.</source>
          <target state="translated">이 변수는 조건부로 &lt;code&gt;I_RPCSVC_DBM&lt;/code&gt; 기호를 정의합니다 .이 기호는 C 프로그램에 &amp;lt;rpcsvc / dbm.h&amp;gt;가 있으며 포함해야 함을 나타냅니다. 일부 System V 시스템은 &amp;lt;dbm.h&amp;gt; 대신 이것을 필요로합니다.</target>
        </trans-unit>
        <trans-unit id="3988d7fe91eec6641b1362fe8b54bb08b4454adb" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;I_SGTTY&lt;/code&gt; symbol, which indicates to the C program that it should include &amp;lt;sgtty.h&amp;gt; rather than &amp;lt;termio.h&amp;gt;.</source>
          <target state="translated">이 변수는 조건 적으로 &lt;code&gt;I_SGTTY&lt;/code&gt; 기호를 정의합니다 .이 기호는 C 프로그램에 &amp;lt;termio.h&amp;gt; 대신 &amp;lt;sgtty.h&amp;gt;를 포함해야 함을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="bb3b540315aee14d77a2bc3bfffff57a73fdfc15" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;I_SHADOW&lt;/code&gt; symbol, and indicates whether a C program should include &amp;lt;shadow.h&amp;gt;.</source>
          <target state="translated">이 변수는 &lt;code&gt;I_SHADOW&lt;/code&gt; 기호를 조건부로 정의하고 C 프로그램에 &amp;lt;shadow.h&amp;gt;를 포함해야하는지 여부를 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="75871d5e31c2c963e5ed266fd0ea1b9bd7fb9eae" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;I_SOCKS&lt;/code&gt; symbol, and indicates whether a C program should include &amp;lt;socks.h&amp;gt;.</source>
          <target state="translated">이 변수는 &lt;code&gt;I_SOCKS&lt;/code&gt; 기호를 조건부로 정의하고 C 프로그램에 &amp;lt;socks.h&amp;gt;를 포함해야하는지 여부를 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="87cbeeee91eeaeebfa0c195273e06cf9134a3716" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;I_STDARG&lt;/code&gt; symbol, which indicates to the C program that &amp;lt;stdarg.h&amp;gt; exists and should be included.</source>
          <target state="translated">이 변수는 조건 적으로 &lt;code&gt;I_STDARG&lt;/code&gt; 기호를 정의합니다 .이 기호는 C 프로그램에 &amp;lt;stdarg.h&amp;gt;가 있으며 포함해야 함을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="017e1a6409088fd5ee8041c8cdca5a8f3929edcf" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;I_STDBOOL&lt;/code&gt; symbol, which indicates to the C program that &amp;lt;stdbool.h&amp;gt; exists and should be included.</source>
          <target state="translated">이 변수는 조건 적으로 &lt;code&gt;I_STDBOOL&lt;/code&gt; 기호를 정의합니다 .이 기호는 C 프로그램에 &amp;lt;stdbool.h&amp;gt;가 있으며 포함되어야 함을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="3c481d3044a99f0f56e8efebfb5986a383b80cb7" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;I_STDDEF&lt;/code&gt; symbol, which indicates to the C program that &amp;lt;stddef.h&amp;gt; exists and should be included.</source>
          <target state="translated">이 변수는 조건 적으로 &lt;code&gt;I_STDDEF&lt;/code&gt; 기호를 정의합니다 .이 기호는 C 프로그램에 &amp;lt;stddef.h&amp;gt;가 있으며 포함해야 함을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="f2aa6a5e81005208f5117f617804e065966bc3cb" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;I_STDINT&lt;/code&gt; symbol, which indicates to the C program that &amp;lt;stdint.h&amp;gt; exists and should be included.</source>
          <target state="translated">이 변수는 조건 적으로 &lt;code&gt;I_STDINT&lt;/code&gt; 기호를 정의합니다 .이 기호는 C 프로그램에 &amp;lt;stdint.h&amp;gt;가 있으며 포함해야 함을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="59db84f58ae7226a26a29746f54c1c07906a47e4" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;I_STDLIB&lt;/code&gt; symbol, which indicates to the C program that &amp;lt;stdlib.h&amp;gt; exists and should be included.</source>
          <target state="translated">이 변수는 조건 적으로 &lt;code&gt;I_STDLIB&lt;/code&gt; 기호를 정의합니다 .이 기호는 C 프로그램에 &amp;lt;stdlib.h&amp;gt;가 있으며 포함해야 함을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="2a17bf40c115f989fbde46864b0ed9fd0cd731c1" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;I_STRING&lt;/code&gt; symbol, which indicates that &amp;lt;string.h&amp;gt; should be included rather than &amp;lt;strings.h&amp;gt;.</source>
          <target state="translated">이 변수는 조건부로 &lt;code&gt;I_STRING&lt;/code&gt; 기호를 정의하며 &amp;lt;strings.h&amp;gt; 대신 &amp;lt;string.h&amp;gt;가 포함되어야 함을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="4e270281a556378928b44e0908a17858d139eff7" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;I_SUNMATH&lt;/code&gt; symbol, and indicates whether a C program should include &amp;lt;sunmath.h&amp;gt;.</source>
          <target state="translated">이 변수는 조건부로 &lt;code&gt;I_SUNMATH&lt;/code&gt; 기호를 정의하고 C 프로그램에 &amp;lt;sunmath.h&amp;gt;를 포함해야하는지 여부를 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="84dd7a9f0f875087ae8429f84e48a1dff0c655f8" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;I_SYSLOG&lt;/code&gt; symbol, and indicates whether a C program should include &amp;lt;syslog.h&amp;gt;.</source>
          <target state="translated">이 변수는 조건 적으로 &lt;code&gt;I_SYSLOG&lt;/code&gt; 기호를 정의하고 C 프로그램에 &amp;lt;syslog.h&amp;gt;를 포함해야하는지 여부를 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="6bcb56f11b97d9c8d8c8b9652382170b24f3cb5c" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;I_SYSMODE&lt;/code&gt; symbol, and indicates whether a C program should include &amp;lt;sys/mode.h&amp;gt;.</source>
          <target state="translated">이 변수는 조건 적으로 &lt;code&gt;I_SYSMODE&lt;/code&gt; 기호를 정의하고 C 프로그램에 &amp;lt;sys / mode.h&amp;gt;를 포함해야하는지 여부를 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="167931bb43c027628470c1801ae2590f3697a3d1" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;I_SYSMOUNT&lt;/code&gt; symbol, and indicates whether a C program should include &amp;lt;sys/mount.h&amp;gt;.</source>
          <target state="translated">이 변수는 조건부로 &lt;code&gt;I_SYSMOUNT&lt;/code&gt; 기호를 정의하고 C 프로그램에 &amp;lt;sys / mount.h&amp;gt;를 포함해야하는지 여부를 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="1ff9945df7a1a7ed6a359f6328d4e12b2fa3d755" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;I_SYSSTATFS&lt;/code&gt; symbol, and indicates whether a C program should include &amp;lt;sys/statfs.h&amp;gt;.</source>
          <target state="translated">이 변수는 &lt;code&gt;I_SYSSTATFS&lt;/code&gt; 기호를 조건부로 정의하고 C 프로그램에 &amp;lt;sys / statfs.h&amp;gt;를 포함해야하는지 여부를 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="eebce9643d4dd45d5aa223a288b5127165052bb2" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;I_SYSSTATVFS&lt;/code&gt; symbol, and indicates whether a C program should include &amp;lt;sys/statvfs.h&amp;gt;.</source>
          <target state="translated">이 변수는 &lt;code&gt;I_SYSSTATVFS&lt;/code&gt; 기호를 조건부로 정의하고 C 프로그램에 &amp;lt;sys / statvfs.h&amp;gt;를 포함해야하는지 여부를 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="15989fd014d6ab35f9e8414efcab2d4b2e9b75a2" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;I_SYSUIO&lt;/code&gt; symbol, and indicates whether a C program should include &amp;lt;sys/uio.h&amp;gt;.</source>
          <target state="translated">이 변수는 조건 적으로 &lt;code&gt;I_SYSUIO&lt;/code&gt; 기호를 정의하고 C 프로그램에 &amp;lt;sys / uio.h&amp;gt;를 포함해야하는지 여부를 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="2aad992f571346b5929b4d5c3b8c71ad92d816e5" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;I_SYSUTSNAME&lt;/code&gt; symbol, and indicates whether a C program should include &amp;lt;sys/utsname.h&amp;gt;.</source>
          <target state="translated">이 변수는 &lt;code&gt;I_SYSUTSNAME&lt;/code&gt; 기호를 조건부로 정의하고 C 프로그램에 &amp;lt;sys / utsname.h&amp;gt;를 포함해야하는지 여부를 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="8b380864f1bbd1d4ad6b624ebdce2806f3237a2a" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;I_SYSVFS&lt;/code&gt; symbol, and indicates whether a C program should include &amp;lt;sys/vfs.h&amp;gt;.</source>
          <target state="translated">이 변수는 조건 적으로 &lt;code&gt;I_SYSVFS&lt;/code&gt; 기호를 정의하고 C 프로그램에 &amp;lt;sys / vfs.h&amp;gt;를 포함해야하는지 여부를 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="f8526e65b8d8a1a49b6d2941191524ed4ad627ee" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;I_SYS_ACCESS&lt;/code&gt; symbol, and indicates whether a C program should include &amp;lt;sys/access.h&amp;gt;.</source>
          <target state="translated">이 변수는 조건 적으로 &lt;code&gt;I_SYS_ACCESS&lt;/code&gt; 기호를 정의하고 C 프로그램에 &amp;lt;sys / access.h&amp;gt;를 포함해야하는지 여부를 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="0e409c38fb38320b4ea584fe80f27cffa07ba03b" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;I_SYS_BSDIOCTL&lt;/code&gt; symbol, which indicates to the C program that &amp;lt;sys/bsdioctl.h&amp;gt; exists and should be included.</source>
          <target state="translated">이 변수는 조건 적으로 &lt;code&gt;I_SYS_BSDIOCTL&lt;/code&gt; 기호를 정의합니다 .이 기호는 C 프로그램에 &amp;lt;sys / bsdioctl.h&amp;gt;가 있으며 포함해야 함을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="5c774583d925acf3051a7cb2c54ca61103511014" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;I_SYS_DIR&lt;/code&gt; symbol, and indicates whether a C program should include &amp;lt;sys/dir.h&amp;gt;.</source>
          <target state="translated">이 변수는 &lt;code&gt;I_SYS_DIR&lt;/code&gt; 기호를 조건부로 정의하고 C 프로그램에 &amp;lt;sys / dir.h&amp;gt;를 포함해야하는지 여부를 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="efa433e860cce7eb69ccf06be6bc32874836593e" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;I_SYS_FILE&lt;/code&gt; symbol, and indicates whether a C program should include &amp;lt;sys/file.h&amp;gt; to get &lt;code&gt;R_OK&lt;/code&gt; and friends.</source>
          <target state="translated">이 변수는 조건 적으로 &lt;code&gt;I_SYS_FILE&lt;/code&gt; 기호를 정의하고 C 프로그램에 &amp;lt;sys / &lt;code&gt;R_OK&lt;/code&gt; &amp;gt;를 포함 시켜 R_OK 및 친구 를 가져야하는지 여부를 나타냅니다 .</target>
        </trans-unit>
        <trans-unit id="a14464a70b9c474007cc4d97fa93cd15f4a4206b" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;I_SYS_FILIO&lt;/code&gt; symbol, which indicates to the C program that &amp;lt;sys/filio.h&amp;gt; exists and should be included in preference to &amp;lt;sys/ioctl.h&amp;gt;.</source>
          <target state="translated">이 변수는 조건부로 &lt;code&gt;I_SYS_FILIO&lt;/code&gt; 기호를 정의합니다 .이 기호는 C 프로그램에 &amp;lt;sys / filio.h&amp;gt;가 있으며 &amp;lt;sys / ioctl.h&amp;gt;보다 우선적으로 포함되어야 함을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="06d79bf020e5c0dcae9b847351a497b9917e8473" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;I_SYS_IOCTL&lt;/code&gt; symbol, which indicates to the C program that &amp;lt;sys/ioctl.h&amp;gt; exists and should be included.</source>
          <target state="translated">이 변수는 조건 적으로 &lt;code&gt;I_SYS_IOCTL&lt;/code&gt; 기호를 정의합니다 .이 기호는 C 프로그램에 &amp;lt;sys / ioctl.h&amp;gt;가 있으며 포함해야 함을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="648c665d707fda6e099228964130dcb5af73f64b" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;I_SYS_MMAN&lt;/code&gt; symbol, and indicates whether a C program should include &amp;lt;sys/mman.h&amp;gt;.</source>
          <target state="translated">이 변수는 &lt;code&gt;I_SYS_MMAN&lt;/code&gt; 기호를 조건부로 정의하고 C 프로그램에 &amp;lt;sys / mman.h&amp;gt;를 포함해야하는지 여부를 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="fcf8fbd7ff6528b55d6280b1c9ede75d46f3598a" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;I_SYS_NDIR&lt;/code&gt; symbol, and indicates whether a C program should include &amp;lt;sys/ndir.h&amp;gt;.</source>
          <target state="translated">이 변수는 &lt;code&gt;I_SYS_NDIR&lt;/code&gt; 기호를 조건부로 정의하고 C 프로그램에 &amp;lt;sys / ndir.h&amp;gt;를 포함해야하는지 여부를 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="14f92a96e40712199af5270b8a4dffbde1d9d2b8" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;I_SYS_PARAM&lt;/code&gt; symbol, and indicates whether a C program should include &amp;lt;sys/param.h&amp;gt;.</source>
          <target state="translated">이 변수는 &lt;code&gt;I_SYS_PARAM&lt;/code&gt; 기호를 조건부로 정의하고 C 프로그램에 &amp;lt;sys / param.h&amp;gt;를 포함해야하는지 여부를 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="5c54f629f282f42517d68cadc3a60c15b76bfc80" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;I_SYS_POLL&lt;/code&gt; symbol, which indicates to the C program that it should include &amp;lt;sys/poll.h&amp;gt;.</source>
          <target state="translated">이 변수는 조건부로 &lt;code&gt;I_SYS_POLL&lt;/code&gt; 기호를 정의합니다 .이 기호는 C 프로그램에 &amp;lt;sys / poll.h&amp;gt;를 포함해야 함을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="6a872df56baffb45c7f65f8b33c7e3562c697a54" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;I_SYS_RESOURCE&lt;/code&gt; symbol, and indicates whether a C program should include &amp;lt;sys/resource.h&amp;gt;.</source>
          <target state="translated">이 변수는 &lt;code&gt;I_SYS_RESOURCE&lt;/code&gt; 기호를 조건부로 정의하고 C 프로그램에 &amp;lt;sys / resource.h&amp;gt;를 포함해야하는지 여부를 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="361f36566ac0806779062d1a65cc8318aef4ef8f" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;I_SYS_SECURITY&lt;/code&gt; symbol, and indicates whether a C program should include &amp;lt;sys/security.h&amp;gt;.</source>
          <target state="translated">이 변수는 &lt;code&gt;I_SYS_SECURITY&lt;/code&gt; 기호를 조건부로 정의하고 C 프로그램에 &amp;lt;sys / security.h&amp;gt;를 포함해야하는지 여부를 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="ee3384bb6b7f55f1a0780f5cceaaaa3758ab0f7b" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;I_SYS_STAT&lt;/code&gt; symbol, and indicates whether a C program should include &amp;lt;sys/stat.h&amp;gt;.</source>
          <target state="translated">이 변수는 &lt;code&gt;I_SYS_STAT&lt;/code&gt; 기호를 조건부로 정의하고 C 프로그램에 &amp;lt;sys / stat.h&amp;gt;를 포함해야하는지 여부를 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="7286623f6d23ad59f781be6430b8b39e4236aa23" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;I_SYS_TIMES&lt;/code&gt; symbol, and indicates whether a C program should include &amp;lt;sys/times.h&amp;gt;.</source>
          <target state="translated">이 변수는 조건 적으로 &lt;code&gt;I_SYS_TIMES&lt;/code&gt; 기호를 정의하고 C 프로그램에 &amp;lt;sys / times.h&amp;gt;를 포함해야하는지 여부를 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="2dd9dea323f51df11b9210f8fbc73225522398af" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;I_SYS_TYPES&lt;/code&gt; symbol, and indicates whether a C program should include &amp;lt;sys/types.h&amp;gt;.</source>
          <target state="translated">이 변수는 &lt;code&gt;I_SYS_TYPES&lt;/code&gt; 기호를 조건부로 정의하고 C 프로그램에 &amp;lt;sys / types.h&amp;gt;를 포함해야하는지 여부를 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="04caebcfd496e60bf36be20e313d54241f17c741" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;I_TERMIO&lt;/code&gt; symbol, which indicates to the C program that it should include &amp;lt;termio.h&amp;gt; rather than &amp;lt;sgtty.h&amp;gt;.</source>
          <target state="translated">이 변수는 조건 적으로 &lt;code&gt;I_TERMIO&lt;/code&gt; 기호를 정의합니다 .이 기호는 C 프로그램에 &amp;lt;sgtty.h&amp;gt; 대신 &amp;lt;termio.h&amp;gt;를 포함해야 함을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="9b0122844748f475eaaba2b90b4f644b3d857e16" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;I_TERMIOS&lt;/code&gt; symbol, which indicates to the C program that the &lt;code&gt;POSIX&lt;/code&gt; &amp;lt;termios.h&amp;gt; file is to be included.</source>
          <target state="translated">이 변수는 조건 적으로 &lt;code&gt;I_TERMIOS&lt;/code&gt; 기호를 정의하며 , &lt;code&gt;POSIX&lt;/code&gt; &amp;lt;termios.h&amp;gt; 파일이 포함됨을 C 프로그램에 표시합니다 .</target>
        </trans-unit>
        <trans-unit id="a89ebcc940e74af2ec68fcddb7c5344f66e12653" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;I_UNISTD&lt;/code&gt; symbol, and indicates whether a C program should include &amp;lt;unistd.h&amp;gt;.</source>
          <target state="translated">이 변수는 &lt;code&gt;I_UNISTD&lt;/code&gt; 기호를 조건부로 정의하고 C 프로그램에 &amp;lt;unistd.h&amp;gt;를 포함해야하는지 여부를 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="d2ff605490c13a29a88686ae5b6df2720121f131" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;I_USTAT&lt;/code&gt; symbol, and indicates whether a C program should include &amp;lt;ustat.h&amp;gt;.</source>
          <target state="translated">이 변수는 &lt;code&gt;I_USTAT&lt;/code&gt; 기호를 조건부로 정의하고 C 프로그램에 &amp;lt;ustat.h&amp;gt;를 포함해야하는지 여부를 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="fd3f460e16850c7cdd02bac08ea0c96e1a25b43b" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;I_UTIME&lt;/code&gt; symbol, and indicates whether a C program should include &amp;lt;utime.h&amp;gt;.</source>
          <target state="translated">이 변수는 조건부로 &lt;code&gt;I_UTIME&lt;/code&gt; 기호를 정의하고 C 프로그램에 &amp;lt;utime.h&amp;gt;를 포함해야하는지 여부를 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="f578c6547b8c0e3a116073ddab83e9d67b0c1ea1" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;I_VALUES&lt;/code&gt; symbol, and indicates whether a C program may include &amp;lt;values.h&amp;gt; to get symbols like &lt;code&gt;MAXLONG&lt;/code&gt; and friends.</source>
          <target state="translated">이 변수는 조건부로 &lt;code&gt;I_VALUES&lt;/code&gt; 기호를 정의하고 C 프로그램에 &lt;code&gt;MAXLONG&lt;/code&gt; 및 프렌즈와 같은 기호를 얻기 위해 &amp;lt;values.h&amp;gt;가 포함되는지 여부를 나타냅니다 .</target>
        </trans-unit>
        <trans-unit id="35b172751ebc720027cae8e5434d066f5dbf7644" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;I_VFORK&lt;/code&gt; symbol, and indicates whether a C program should include</source>
          <target state="translated">이 변수는 &lt;code&gt;I_VFORK&lt;/code&gt; 기호를 조건부로 정의하고 C 프로그램에 포함되어야하는지 여부를 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="62b747c44079799965407b991599f1eba26bad2e" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;LIBM_LIB_VERSION&lt;/code&gt; symbol, which indicates to the C program that</source>
          <target state="translated">이 변수는 &lt;code&gt;LIBM_LIB_VERSION&lt;/code&gt; 기호를 조건부로 정의하며 이는 C 프로그램에 다음을 표시합니다.</target>
        </trans-unit>
        <trans-unit id="24ffdb24ad26447394edc4490faa5a2814041a65" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;LOCALTIME_R_NEEDS_TZSET&lt;/code&gt; symbol, which makes us call tzset before localtime_r()</source>
          <target state="translated">이 변수는 조건부로 &lt;code&gt;LOCALTIME_R_NEEDS_TZSET&lt;/code&gt; 기호를 정의하여 localtime_r () 전에 tzset을 호출하게합니다.</target>
        </trans-unit>
        <trans-unit id="325956fac710712b805dd7e43f69d13a9a0d7a64" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;MULTIARCH&lt;/code&gt; symbol which signifies the presence of multiplatform files. This is normally set by hints files.</source>
          <target state="translated">이 변수 는 다중 플랫폼 파일의 존재를 나타내는 &lt;code&gt;MULTIARCH&lt;/code&gt; 기호를 조건부로 정의 합니다. 이것은 일반적으로 힌트 파일에 의해 설정됩니다.</target>
        </trans-unit>
        <trans-unit id="8540755d1c3453c30b1a6f9cd5ebe1807ce9e2bb" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;MULTIPLICITY&lt;/code&gt; symbol, and indicates that Perl should be built to use multiplicity.</source>
          <target state="translated">이 변수는 &lt;code&gt;MULTIPLICITY&lt;/code&gt; 기호를 조건부로 정의하며 다중성을 사용하도록 Perl을 빌드해야 함을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="a0cf84fbefe3887a8d09ca446fefa63c396cb409" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;NDBM_H_USES_PROTOTYPES&lt;/code&gt; symbol, which indicates that the</source>
          <target state="translated">이 변수는 &lt;code&gt;NDBM_H_USES_PROTOTYPES&lt;/code&gt; 기호를 조건부로 정의합니다 .</target>
        </trans-unit>
        <trans-unit id="1acd05495f1fdc9f43244ea5cbd13523560ee957" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;NDBM_H_USES_PROTOTYPES&lt;/code&gt; symbol, which indicates that the gdbm-</source>
          <target state="translated">이 변수는 조건 적으로 &lt;code&gt;NDBM_H_USES_PROTOTYPES&lt;/code&gt; 기호를 정의합니다 . 이는 gdbm-</target>
        </trans-unit>
        <trans-unit id="c0152e4a0d6c8424c2085184c7ba82705afba20a" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;OLDSOCKET&lt;/code&gt; symbol, which indicates that the &lt;code&gt;BSD&lt;/code&gt; socket interface is based on 4.1c and not 4.2.</source>
          <target state="translated">이 변수는 조건 적으로 &lt;code&gt;OLDSOCKET&lt;/code&gt; 기호를 정의합니다 . 이는 &lt;code&gt;BSD&lt;/code&gt; 소켓 인터페이스가 4.2가 아닌 4.1c를 기반으로 함을 나타냅니다 .</target>
        </trans-unit>
        <trans-unit id="80a51e38d944fcaafb5a6e3916e37e8e76396cdf" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;OLD_PTHREADS_API&lt;/code&gt; symbol, and indicates that Perl should be built to use the old draft &lt;code&gt;POSIX&lt;/code&gt; threads &lt;code&gt;API&lt;/code&gt; . This is only potentially meaningful if usethreads is set.</source>
          <target state="translated">이 변수는 조건부로 &lt;code&gt;OLD_PTHREADS_API&lt;/code&gt; 기호를 정의 하고 이전 초안 &lt;code&gt;POSIX&lt;/code&gt; 스레드 &lt;code&gt;API&lt;/code&gt; 를 사용하도록 Perl을 빌드해야 함을 나타냅니다 . usethreads가 설정된 경우에만 잠재적으로 의미가 있습니다.</target>
        </trans-unit>
        <trans-unit id="2437ae4b2a2bbc44030e2a4934ff71ef05a6a7fd" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;PORTABLE&lt;/code&gt; symbol, which indicates to the C program that it should not assume that it is running on the machine it was compiled on.</source>
          <target state="translated">이 변수는 조건부로 &lt;code&gt;PORTABLE&lt;/code&gt; 기호를 정의하며 , 이는 C 프로그램에게 그것이 컴파일 된 머신에서 실행되고 있다고 가정해서는 안됨을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="1778fa2f3bb108d81e2630764767aed6f5135d24" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;USE_CPLUSPLUS&lt;/code&gt; symbol, which indicates that a C++ compiler was used to compiled Perl and will be used to compile extensions.</source>
          <target state="translated">이 변수는 조건부로 &lt;code&gt;USE_CPLUSPLUS&lt;/code&gt; 기호를 정의합니다 .이 기호는 C ++ 컴파일러가 Perl을 컴파일하는 데 사용되었으며 확장을 컴파일하는 데 사용됨을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="1d36e9b75557200af00a5170c3a204fc71e7e973" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;USE_CROSS_COMPILE&lt;/code&gt; symbol, and indicates that Perl has been cross-compiled.</source>
          <target state="translated">이 변수는 조건부로 &lt;code&gt;USE_CROSS_COMPILE&lt;/code&gt; 기호를 정의하고 Perl이 크로스 컴파일되었음을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="cb00793033063be42397359833680437d8e18627" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;USE_FAST_STDIO&lt;/code&gt; symbol, and indicates that Perl should be built to use &lt;code&gt;fast stdio&lt;/code&gt; . Defaults to define in Perls 5.8 and earlier, to undef later.</source>
          <target state="translated">이 변수는 조건부로 &lt;code&gt;USE_FAST_STDIO&lt;/code&gt; 기호를 정의하고 &lt;code&gt;fast stdio&lt;/code&gt; 를 사용하도록 Perl을 빌드해야 함을 나타냅니다 . 나중에 정의를 해제하기 위해 Perls 5.8 및 이전 버전에서 정의하는 기본값입니다.</target>
        </trans-unit>
        <trans-unit id="764a259e510b3d9e4c494c9cfda551272fc0d509" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;USE_ITHREADS&lt;/code&gt; symbol, and indicates that Perl should be built to use the interpreter-based threading implementation.</source>
          <target state="translated">이 변수는 조건부로 &lt;code&gt;USE_ITHREADS&lt;/code&gt; 기호를 정의하고 Perl이 인터프리터 기반 스레딩 구현을 사용하도록 빌드되어야 함을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="213908d3721e9bfe227a2a413c4feadf4070f8fe" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;USE_LARGE_FILES&lt;/code&gt; symbol, and indicates that large file interfaces should be used when available.</source>
          <target state="translated">이 변수는 조건부로 &lt;code&gt;USE_LARGE_FILES&lt;/code&gt; 기호를 정의하고 사용 가능한 경우 큰 파일 인터페이스를 사용해야 함을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="7f5dc44011a68a389ebcf97bb91748106c228b5c" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;USE_LONG_DOUBLE&lt;/code&gt; symbol, and indicates that long doubles should be used when available.</source>
          <target state="translated">이 변수는 조건부로 &lt;code&gt;USE_LONG_DOUBLE&lt;/code&gt; 기호를 정의하고 사용 가능한 경우 긴 복식을 사용해야 함을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="b0f8db3e310399153016ad5960325a7b1884e984" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;USE_MORE_BITS&lt;/code&gt; symbol, and indicates that explicit 64-bit interfaces and long doubles should be used when available.</source>
          <target state="translated">이 변수는 조건부로 &lt;code&gt;USE_MORE_BITS&lt;/code&gt; 기호를 정의하고 사용 가능한 경우 명시 적 64 비트 인터페이스와 긴 이중을 사용해야 함을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="8724e5fac36c0888a500de196c1e3decd0f0fa98" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;USE_PERLIO&lt;/code&gt; symbol, and indicates that the PerlIO abstraction should be used throughout.</source>
          <target state="translated">이 변수는 조건부로 &lt;code&gt;USE_PERLIO&lt;/code&gt; 기호를 정의하고 PerlIO 추상화가 전체적으로 사용되어야 함을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="76c768520b4582f002a8989aec6723f3ce24219e" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;USE_QUADMATH&lt;/code&gt; symbol, and indicates that the quadmath library __float128 long doubles should be used when available.</source>
          <target state="translated">이 변수는 조건부로 &lt;code&gt;USE_QUADMATH&lt;/code&gt; 기호를 정의 하며 사용 가능한 경우 quadmath 라이브러리 __float128 long double을 사용해야 함을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="c8b6e613aba1ef809ff391b7a793c1fb394fa250" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;USE_REENTRANT_API&lt;/code&gt; symbol, which indicates that the thread code may try to use the various _r versions of library functions. This is only potentially meaningful if usethreads is set and is very experimental, it is not even prompted for.</source>
          <target state="translated">이 변수는 조건부로 &lt;code&gt;USE_REENTRANT_API&lt;/code&gt; 기호를 정의합니다 . 이는 스레드 코드가 다양한 _r 버전의 라이브러리 함수를 사용할 수 있음을 나타냅니다. usethreads가 설정되어 있고 매우 실험적인 경우에만 잠재적으로 의미가 있습니다.</target>
        </trans-unit>
        <trans-unit id="02025b4c6732782be5bbef95a81c12fb1bf089ae" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;USE_SOCKS&lt;/code&gt; symbol, and indicates that Perl should be built to use &lt;code&gt;SOCKS&lt;/code&gt; .</source>
          <target state="translated">이 변수는 조건부로 &lt;code&gt;USE_SOCKS&lt;/code&gt; 기호를 정의하고 &lt;code&gt;SOCKS&lt;/code&gt; 를 사용하도록 Perl을 빌드해야 함을 나타냅니다 .</target>
        </trans-unit>
        <trans-unit id="73388951ebd61aba92935296bbd7b560a2e51506" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;USE_STRUCT_COPY&lt;/code&gt; symbol, which indicates to the C program that this C compiler knows how to copy structures.</source>
          <target state="translated">이 변수는 조건부로 &lt;code&gt;USE_STRUCT_COPY&lt;/code&gt; 기호를 정의합니다 .이 기호는이 C 컴파일러가 구조를 복사하는 방법을 알고 있음을 C 프로그램에 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="d831c84de3db14a96b45ffd5dc2be779b200bb9f" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the &lt;code&gt;USE_THREADS&lt;/code&gt; symbol, and indicates that Perl should be built to use threads.</source>
          <target state="translated">이 변수는 조건부로 &lt;code&gt;USE_THREADS&lt;/code&gt; 기호를 정의하고 스레드를 사용하도록 Perl을 빌드해야 함을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="bc1caff2288ef91b70b77f204555fc86b0644a87" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the HAS_ASCTIME64 symbol, which indicates to the C program that the asctime64 () routine is available.</source>
          <target state="translated">이 변수는 조건부로 HAS_ASCTIME64 기호를 정의합니다. 이는 C 프로그램에 asctime64 () 루틴을 사용할 수 있음을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="4f5ee37b27170ed1ad083cd9dddc5c9d963f253a" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the HAS_C99_VARIADIC_MACROS symbol, which indicates to the C program that C99 variadic macros are available.</source>
          <target state="translated">이 변수는 조건 적으로 HAS_C99_VARIADIC_MACROS 기호를 정의합니다.이 기호는 C 프로그램에 C99 가변 매크로를 사용할 수 있음을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="0b61a5a1fcc8fdbc5f2fb3ea898085886e3acc6e" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the HAS_CTIME64 symbol, which indicates to the C program that the ctime64 () routine is available.</source>
          <target state="translated">이 변수는 조건 적으로 HAS_CTIME64 기호를 정의합니다. 이는 C 프로그램에 ctime64 () 루틴을 사용할 수 있음을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="7f5fe8e1b41515c0e510e4b20cf900e8c67340fc" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the HAS_DIFFTIME64 symbol, which indicates to the C program that the difftime64 () routine is available.</source>
          <target state="translated">이 변수는 조건부로 HAS_DIFFTIME64 기호를 정의합니다.이 기호는 C 프로그램에 difftime64 () 루틴을 사용할 수 있음을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="27c03e0bca211d3b818ddcab0e891569652759fa" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the HAS_DRAND48_PROTO symbol, which indicates to the C program that the system provides a prototype for the drand48() function. Otherwise, it is up to the program to supply one.</source>
          <target state="translated">이 변수는 HAS_DRAND48_PROTO 기호를 조건부로 정의하며, 이는 시스템이 drand48 () 함수의 프로토 타입을 제공함을 C 프로그램에 표시합니다. 그렇지 않으면 프로그램을 제공하는 것은 프로그램의 책임입니다.</target>
        </trans-unit>
        <trans-unit id="68a1a3c08dc2ffbdae0df9755d296fe6676df11a" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the HAS_DRAND48_R symbol, which indicates to the C program that the drand48_r() routine is available.</source>
          <target state="translated">이 변수는 조건부로 HAS_DRAND48_R 기호를 정의하며, 이는 drand48_r () 루틴이 사용 가능함을 C 프로그램에 표시합니다.</target>
        </trans-unit>
        <trans-unit id="e16e9f9db5cdfbb67ed86204b76ca924c4d0a262" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the HAS_EXP2 symbol, which indicates to the C program that the exp2() routine is available.</source>
          <target state="translated">이 변수는 조건 적으로 HAS_EXP2 기호를 정의합니다.이 기호는 C 프로그램에 exp2 () 루틴을 사용할 수 있음을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="c1e92329178544537ab41a6903a6ae57efe38d8a" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the HAS_EXPM1 symbol, which indicates to the C program that the expm1() routine is available.</source>
          <target state="translated">이 변수는 조건 적으로 HAS_EXPM1 기호를 정의합니다.이 기호는 C 프로그램에 expm1 () 루틴을 사용할 수 있음을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="00264c277ea844160e6a35335c5bf499f44c2918" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the HAS_GETPGRP2 symbol, which indicates to the C program that the getpgrp2() (as in</source>
          <target state="translated">이 변수는 조건부로 HAS_GETPGRP2 기호를 정의합니다.이 기호는 C 프로그램에 getpgrp2 ()</target>
        </trans-unit>
        <trans-unit id="868523e0b8cb466706b0f6ac8e17774e12245806" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the HAS_GMTIME64 symbol, which indicates to the C program that the gmtime64 () routine is available.</source>
          <target state="translated">이 변수는 조건 적으로 HAS_GMTIME64 기호를 정의합니다.이 기호는 C 프로그램에 gmtime64 () 루틴을 사용할 수 있음을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="47b3ac40e791447cf867048b09d1eb678be26309" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the HAS_IPV6_MREQ symbol, which indicates the availability of a struct ipv6_mreq.</source>
          <target state="translated">이 변수는 struct ipv6_mreq의 가용성을 나타내는 HAS_IPV6_MREQ 기호를 조건부로 정의합니다.</target>
        </trans-unit>
        <trans-unit id="7bc70baabf29063f7a9160eb18be954a8348d6bc" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the HAS_IPV6_MREQ_SOURCE symbol, which indicates the availability of a struct ipv6_mreq_source.</source>
          <target state="translated">이 변수는 struct ipv6_mreq_source의 가용성을 나타내는 HAS_IPV6_MREQ_SOURCE 기호를 조건부로 정의합니다.</target>
        </trans-unit>
        <trans-unit id="4015575c1895989ee5ebc5a4f91d618397b07819" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the HAS_J0 symbol, which indicates to the C program that the j0() routine is available.</source>
          <target state="translated">이 변수는 조건부로 HAS_J0 기호를 정의합니다.이 기호는 C 프로그램에 j0 () 루틴을 사용할 수 있음을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="2958b939dd297fe8c5f58f3a308a498ee2c0da40" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the HAS_J0L symbol, which indicates to the C program that the j0l() routine is available.</source>
          <target state="translated">이 변수는 조건 적으로 HAS_J0L 기호를 정의합니다.이 기호는 C 프로그램에 j0l () 루틴을 사용할 수 있음을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="4b528a785cad69d0c699d6c89f20c9d67ee7ac13" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the HAS_LOCALTIME64 symbol, which indicates to the C program that the localtime64 () routine is available.</source>
          <target state="translated">이 변수는 조건부로 HAS_LOCALTIME64 기호를 정의하며, 이는 localtime64 () 루틴을 사용할 수 있음을 C 프로그램에 표시합니다.</target>
        </trans-unit>
        <trans-unit id="392ec9a233f9ca18e7d68e79e5b3f6c2a051bd91" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the HAS_LOG1P symbol, which indicates to the C program that the logp1() routine is available to compute log(1 + x) for values of x close to zero.</source>
          <target state="translated">이 변수는 조건 적으로 HAS_LOG1P 기호를 정의합니다. 이는 C 프로그램에 logp1 () 루틴을 사용하여 x 값이 0에 가까운 log (1 + x)를 계산할 수 있음을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="f4f21b1971543b5f17e561aa18c91920af53a368" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the HAS_LOG2 symbol, which indicates to the C program that the log2() routine is available to compute log base two.</source>
          <target state="translated">이 변수는 조건부로 HAS_LOG2 기호를 정의합니다. 이는 C 프로그램에 log2 () 루틴이 로그베이스 2를 계산할 수 있음을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="b204a4d25594bf54b3f56d7089446b98325ba0f9" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the HAS_MKTIME64 symbol, which indicates to the C program that the mktime64 () routine is available.</source>
          <target state="translated">이 변수는 조건 적으로 HAS_MKTIME64 기호를 정의합니다.이 기호는 C 프로그램에 mktime64 () 루틴을 사용할 수 있음을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="50c6e2109621c970846ef07831b272d585f4b720" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the HAS_MODFL_POW32_BUG symbol, which indicates that modfl() is broken for long doubles &amp;gt;= pow(2, 32). For example from 4294967303.150000 one would get 4294967302.000000 and 1.150000. The bug has been seen in certain versions of glibc, release 2.2.2 is known to be okay.</source>
          <target state="translated">이 변수는 조건부로 HAS_MODFL_POW32_BUG 기호를 정의합니다.이 기호는 modfl ()이 long doubles&amp;gt; = pow (2, 32)에 대해 손상되었음을 나타냅니다. 예를 들어 4294967303.150000에서 4294967302.000000과 1.150000을 얻습니다. 버그는 특정 버전의 glibc에서 나타났습니다. 릴리스 2.2.2는 괜찮습니다.</target>
        </trans-unit>
        <trans-unit id="a49ff24a9a41a7301dc9c301443e6aca1bdb6b91" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the HAS_OPEN3 manifest constant, which indicates to the C program that the 3 argument version of the open(2) function is available.</source>
          <target state="translated">이 변수는 조건 적으로 HAS_OPEN3 매니페스트 상수를 정의합니다.이 상수는 C 프로그램에 3 인수 버전의 open (2) 함수를 사용할 수 있음을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="8f0e591d149253e6ed3d5123bea29e442784b82a" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the HAS_READDIR64_R symbol, which indicates to the C program that the readdir64_r() routine is available.</source>
          <target state="translated">이 변수는 조건부로 HAS_READDIR64_R 기호를 정의합니다.이 기호는 C 프로그램에 readdir64_r () 루틴을 사용할 수 있음을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="7fd43e7b803b9b0ee002f7ca3ea56fe7d2466697" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the HAS_SETPGRP2 symbol, which indicates to the C program that the setpgrp2() (as in</source>
          <target state="translated">이 변수는 조건 적으로 HAS_SETPGRP2 기호를 정의합니다.이 기호는 C 프로그램에 setpgrp2 ()</target>
        </trans-unit>
        <trans-unit id="66467d3be758a985d871e724f30d72c920345bce" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the HAS_SIN6_SCOPE_ID symbol, which indicates that a struct sockaddr_in6 structure has the sin6_scope_id member.</source>
          <target state="translated">이 변수는 HAS_SIN6_SCOPE_ID 기호를 조건부로 정의하는데, 이는 구조체 sockaddr_in6 구조에 sin6_scope_id 멤버가 있음을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="4b85f6aa3b279a58df8dfed5839902e28255690c" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the HAS_SOCKADDR_IN6 symbol, which indicates the availability of a struct sockaddr_in6.</source>
          <target state="translated">이 변수는 조건부로 HAS_SOCKADDR_IN6 기호를 정의하며, 이는 구조체 sockaddr_in6의 가용성을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="ae3c85ee8535fbb1341bd2e653877e357640c25b" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the HAS_SOCKS5_INIT symbol, which indicates to the C program that the socks5_init() routine is available.</source>
          <target state="translated">이 변수는 HAS_SOCKS5_INIT 기호를 조건부로 정의하며, 이는 socks5_init () 루틴을 사용할 수 있음을 C 프로그램에 표시합니다.</target>
        </trans-unit>
        <trans-unit id="365879b177d2333b7e5646335c36ab0a8574dc8b" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the HAS_SRAND48_R symbol, which indicates to the C program that the srand48_r() routine is available.</source>
          <target state="translated">이 변수는 조건 적으로 HAS_SRAND48_R 기호를 정의합니다.이 기호는 C 프로그램에 srand48_r () 루틴을 사용할 수 있음을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="4cd6a6e5084f3eaadded4412817c845cdfa71dbc" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the HAS_WAIT4 symbol, which indicates the wait4() routine is available.</source>
          <target state="translated">이 변수는 조건 적으로 wait4 () 루틴이 사용 가능함을 나타내는 HAS_WAIT4 기호를 정의합니다.</target>
        </trans-unit>
        <trans-unit id="2cead5d3e2f81379743712b717355fbba12100c0" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the PERL_PRIXU64 symbol, which indicates that stdio has a symbol to print 64-bit hExADECimAl numbers. The &lt;code&gt;U&lt;/code&gt; in the name is to separate this from d_PRIx64 so that even case-blind systems can see the difference.</source>
          <target state="translated">이 변수는 조건부로 PERL_PRIXU64 기호를 정의합니다. 이는 stdio에 64 비트 hExADECimAl 숫자를 인쇄하는 기호가 있음을 나타냅니다. 이름 의 &lt;code&gt;U&lt;/code&gt; 는 이것을 d_PRIx64와 분리하여 대소-맹인 시스템에서도 차이를 볼 수 있도록합니다.</target>
        </trans-unit>
        <trans-unit id="d43ac3bcdec043d50a0095e67884ecec7caaa8b4" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the PERL_PRId64 symbol, which indicates that stdio has a symbol to print 64-bit decimal numbers.</source>
          <target state="translated">이 변수는 조건부로 PERL_PRId64 기호를 정의합니다. 이는 stdio에 64 비트 10 진수를 인쇄하는 기호가 있음을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="87a235966199082b8608fb9d04be95d5718676a0" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the PERL_PRIfldbl symbol, which indicates that stdio has a symbol to print long doubles.</source>
          <target state="translated">이 변수는 조건부로 PERL_PRIfldbl 기호를 정의합니다. 이는 stdio에 long doubles를 인쇄 할 기호가 있음을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="623ac1429d0cdcb58b93bdc78689554c377b9547" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the PERL_PRIfldbl symbol, which indicates that stdio has a symbol to print long doubles. The &lt;code&gt;U&lt;/code&gt; in the name is to separate this from d_PRIeldbl so that even case-blind systems can see the difference.</source>
          <target state="translated">이 변수는 조건부로 PERL_PRIfldbl 기호를 정의합니다. 이는 stdio에 long doubles를 인쇄 할 기호가 있음을 나타냅니다. 이름 의 &lt;code&gt;U&lt;/code&gt; 는 이것을 d_PRIeldbl과 분리하여 대소 맹검 시스템에서도 차이를 볼 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="30516a078624e689046c27ee1bc5a4d720eafca8" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the PERL_PRIfldbl symbol, which indicates that stdio has a symbol to print long doubles. The &lt;code&gt;U&lt;/code&gt; in the name is to separate this from d_PRIfldbl so that even case-blind systems can see the difference.</source>
          <target state="translated">이 변수는 조건부로 PERL_PRIfldbl 기호를 정의합니다. 이는 stdio에 long doubles를 인쇄 할 기호가 있음을 나타냅니다. 이름 의 &lt;code&gt;U&lt;/code&gt; 는 이것을 d_PRIfldbl과 분리하여 대소 맹검 시스템에서도 차이를 볼 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="bfe7a3d170626abb9116c4a938a40a5a65febd86" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the PERL_PRIfldbl symbol, which indicates that stdio has a symbol to print long doubles. The &lt;code&gt;U&lt;/code&gt; in the name is to separate this from d_PRIgldbl so that even case-blind systems can see the difference.</source>
          <target state="translated">이 변수는 조건부로 PERL_PRIfldbl 기호를 정의합니다. 이는 stdio에 long doubles를 인쇄 할 기호가 있음을 나타냅니다. 이름 의 &lt;code&gt;U&lt;/code&gt; 는 이것을 d_PRIgldbl과 분리하여 대소 맹검 시스템에서도 차이를 볼 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f18874353f5e54ed77b39e6c4e48143ccd649481" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the PERL_PRIfldbl symbol, which indicates that stdio has a symbol to scan long doubles.</source>
          <target state="translated">이 변수는 조건부로 PERL_PRIfldbl 기호를 정의합니다. 이는 stdio에 long double을 스캔 할 기호가 있음을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="82ccb10b56ba3b5a14d3a32f6637790a43ca6c57" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the PERL_PRIi64 symbol, which indicates that stdio has a symbol to print 64-bit decimal numbers.</source>
          <target state="translated">이 변수는 조건부로 PERL_PRIi64 기호를 정의합니다. 이는 stdio에 64 비트 10 진수를 인쇄하는 기호가 있음을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="488c6d194bed6fea84f7faf1f7d73af7eb20bb2d" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the PERL_PRIo64 symbol, which indicates that stdio has a symbol to print 64-bit octal numbers.</source>
          <target state="translated">이 변수는 조건부로 PERL_PRIo64 기호를 정의합니다. 이는 stdio에 64 비트 8 진수를 인쇄하는 기호가 있음을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="161615db0dc3dfcce8507f49ba6aedb9f96628e9" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the PERL_PRIu64 symbol, which indicates that stdio has a symbol to print 64-bit unsigned decimal numbers.</source>
          <target state="translated">이 변수는 조건부로 PERL_PRIu64 기호를 정의합니다. 이는 stdio에 64 비트 부호없는 10 진수를 인쇄하는 기호가 있음을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="d492a963913ac3bee3082b9efc121915975836be" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the PERL_PRIx64 symbol, which indicates that stdio has a symbol to print 64-bit hexadecimal numbers.</source>
          <target state="translated">이 변수는 조건부로 PERL_PRIx64 기호를 정의합니다. 이는 stdio에 64 비트 16 진수를 인쇄하는 기호가 있음을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="e77c21dc7ff5153a48f1d50c7831f115466e22a1" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the USE_5005THREADS symbol, and indicates that Perl should be built to use the 5.005-based threading implementation. Only valid up to 5.8.x.</source>
          <target state="translated">이 변수는 조건부로 USE_5005THREADS 기호를 정의하고 5.005 기반 스레딩 구현을 사용하도록 Perl을 빌드해야 함을 나타냅니다. 5.8.x까지만 유효합니다.</target>
        </trans-unit>
        <trans-unit id="6922cb5181d20063d977ecb7c34dc91623247d99" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the USE_64_BIT_ALL symbol, and indicates that 64-bit integer types should be used when available. The maximal possible 64-bitness is employed: LP64 or ILP64, meaning that you will be able to use more than 2 gigabytes of memory. This mode is even more binary incompatible than USE_64_BIT_INT. You may not be able to run the resulting executable in a 32-bit &lt;code&gt;CPU&lt;/code&gt; at all or you may need at least to reboot your &lt;code&gt;OS&lt;/code&gt; to 64-bit mode.</source>
          <target state="translated">이 변수는 조건부로 USE_64_BIT_ALL 기호를 정의하며 사용 가능한 경우 64 비트 정수 유형을 사용해야 함을 나타냅니다. 가능한 최대 64 비트 (LP64 또는 ILP64)가 사용됩니다. 즉, 2 기가 바이트 이상의 메모리를 사용할 수 있습니다. 이 모드는 USE_64_BIT_INT보다 바이너리가 호환되지 않습니다. 결과 실행 파일을 32 비트 &lt;code&gt;CPU&lt;/code&gt; 에서 전혀 실행할 수 없거나 &lt;code&gt;OS&lt;/code&gt; 를 64 비트 모드 로 재부팅해야 할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="ccafec54f627d828fab5b391bf87532c8831a4dd" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the USE_64_BIT_INT symbol, and indicates that 64-bit integer types should be used when available. The minimal possible 64-bitness is employed, just enough to get 64-bit integers into Perl. This may mean using for example &quot;long longs&quot;, while your memory may still be limited to 2 gigabytes.</source>
          <target state="translated">이 변수는 조건부로 USE_64_BIT_INT 기호를 정의하며 사용 가능한 경우 64 비트 정수 유형을 사용해야 함을 나타냅니다. 64 비트 정수를 Perl로 가져 오기에 충분한 최소 64 비트가 사용됩니다. 예를 들어 &quot;long longs&quot;를 사용하는 것을 의미 할 수 있지만 메모리는 여전히 2GB로 제한 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5eb58b08d71611a050838836968d1ed70419850b" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the symbol &lt;code&gt;DOSUID&lt;/code&gt; , which tells the C program that it should insert setuid emulation code on hosts which have setuid #! scripts disabled.</source>
          <target state="translated">이 변수는 조건 적으로 &lt;code&gt;DOSUID&lt;/code&gt; 기호를 정의합니다.이 기호 는 C 프로그램에게 setuid #!가있는 호스트에 setuid 에뮬레이션 코드를 삽입해야 함을 알려줍니다. 스크립트가 비활성화되었습니다.</target>
        </trans-unit>
        <trans-unit id="ffd2d4a964e69ae6561dec6c99512a189ad1356c" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the symbol &lt;code&gt;XENIX&lt;/code&gt; , which alerts the C program that it runs under Xenix.</source>
          <target state="translated">이 변수는 조건부로 &lt;code&gt;XENIX&lt;/code&gt; 기호를 정의하여 Xenix에서 실행되는 C 프로그램에 경고합니다.</target>
        </trans-unit>
        <trans-unit id="3e1de11d99c647c7289474724701eac664c6b90d" translate="yes" xml:space="preserve">
          <source>This variable conditionally defines the symbols &lt;code&gt;EUNICE&lt;/code&gt; and &lt;code&gt;VAX&lt;/code&gt; , which alerts the C program that it must deal with idiosyncrasies of &lt;code&gt;VMS&lt;/code&gt; .</source>
          <target state="translated">이 변수는 조건부로 &lt;code&gt;EUNICE&lt;/code&gt; 및 &lt;code&gt;VAX&lt;/code&gt; 기호를 정의합니다.이 기호 는 C 프로그램이 &lt;code&gt;VMS&lt;/code&gt; 의 고유성을 처리해야 함을 C 프로그램에 경고합니다 .</target>
        </trans-unit>
        <trans-unit id="d1ca2d90eb402e38b96cd60ca8c6170895e15658" translate="yes" xml:space="preserve">
          <source>This variable contains &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt; depending whether the nm extraction is wanted or not.</source>
          <target state="translated">이 변수 는 nm 추출이 필요한지 여부에 따라 &lt;code&gt;true&lt;/code&gt; 또는 &lt;code&gt;false&lt;/code&gt; 를 포함 합니다 .</target>
        </trans-unit>
        <trans-unit id="7789add9e4ce8db70151777bf15fb8c9314dedb7" translate="yes" xml:space="preserve">
          <source>This variable contains &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt; depending whether the nm extraction should be performed or not, according to the value of usenm and the flags on the Configure command line.</source>
          <target state="translated">이 변수에는 usenm 값과 Configure 명령 행의 플래그에 따라 nm 추출 수행 여부에 따라 &lt;code&gt;true&lt;/code&gt; 또는 &lt;code&gt;false&lt;/code&gt; 가 포함 됩니다.</target>
        </trans-unit>
        <trans-unit id="9cf7a39f79ae1b1c46d6edd60aef0768b27d46c3" translate="yes" xml:space="preserve">
          <source>This variable contains a colon-separated set of paths for the perl binary to search for additional library files or modules. These directories will be tacked to the end of @&lt;code&gt;INC&lt;/code&gt; . Perl will automatically search below each path for version- and architecture-specific directories. See inc_version_list for more details. A value of  means &lt;code&gt;none&lt;/code&gt; and is used to preserve this value for the next run through Configure.</source>
          <target state="translated">이 변수에는 perl 바이너리가 추가 라이브러리 파일 또는 모듈을 검색 할 수 있도록 콜론으로 구분 된 경로 세트가 포함됩니다. 이 디렉토리는 @ &lt;code&gt;INC&lt;/code&gt; 끝까지 고정됩니다 . Perl은 각 경로 아래에서 버전 및 아키텍처 별 디렉토리를 자동으로 검색합니다. 자세한 내용은 inc_version_list를 참조하십시오. 값은 &lt;code&gt;none&lt;/code&gt; 을 의미 하며 다음 번 Configure를 통해이 값을 유지하는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="707ea9bc36cd648405d5edb5da9108efe778b83a" translate="yes" xml:space="preserve">
          <source>This variable contains a command that produces the text of the</source>
          <target state="translated">이 변수는 텍스트를 생성하는 명령을 포함합니다</target>
        </trans-unit>
        <trans-unit id="8c7123c4cc027b6651559034f6d471c197d1b07e" translate="yes" xml:space="preserve">
          <source>This variable contains a flag that precise difficulties the compiler has casting odd floating values to unsigned long: 0 = ok 1 = couldn't cast &amp;lt; 0 2 = couldn't cast &amp;gt;= 0x80000000 4 = couldn't cast in argument expression list</source>
          <target state="translated">이 변수에는 컴파일러가 홀수 부동 값을 부호없는 long으로 캐스팅하는 데 어려움이있는 플래그가 포함되어 있습니다. 0 = ok 1 = 캐스팅 할 수 없음 &amp;lt;0 2 = 캐스팅 할 수 없음&amp;gt; = 0x80000000 4 = 인수 표현식 목록에서 캐스팅 할 수 없음</target>
        </trans-unit>
        <trans-unit id="00b11161091cfee0cf25e9f51e8a95a7705212ed" translate="yes" xml:space="preserve">
          <source>This variable contains a list of additional directories to be searched by the compiler. The appropriate &lt;code&gt;-I&lt;/code&gt; directives will be added to ccflags. This is intended to simplify setting local directories from the Configure command line. It's not much, but it parallels the loclibpth stuff in</source>
          <target state="translated">이 변수에는 컴파일러가 검색 할 추가 디렉토리 목록이 포함되어 있습니다. 적절한 &lt;code&gt;-I&lt;/code&gt; 지시문이 ccflags에 추가됩니다. 이는 Configure 명령 행에서 로컬 디렉토리 설정을 단순화하기위한 것입니다. 별로 많지는 않지만 엽록소와 평행을 이룹니다.</target>
        </trans-unit>
        <trans-unit id="05511db594a7800a25c5ea5343f234ccd5ad0170" translate="yes" xml:space="preserve">
          <source>This variable contains a path that will be created on the target host using targetmkdir, and then used to copy the cross-compiled executables to. Defaults to</source>
          <target state="translated">이 변수에는 targetmkdir을 사용하여 대상 호스트에서 생성 된 경로가 포함되어 있으며 크로스 컴파일 된 실행 파일을 복사하는 데 사용됩니다. 기본값은</target>
        </trans-unit>
        <trans-unit id="51943cf698ef05d17fe5d82d757a5689e36488dd" translate="yes" xml:space="preserve">
          <source>This variable contains a single string giving the command-line arguments passed to Configure. Spaces within arguments, quotes, and escaped characters are not correctly preserved. To reconstruct the command line, you must assemble the individual command line pieces, given in config_arg[0-9]*.</source>
          <target state="translated">이 변수에는 Configure에 전달 된 명령 줄 인수를 제공하는 단일 문자열이 포함됩니다. 인수, 따옴표 및 이스케이프 문자 내의 공백은 올바르게 유지되지 않습니다. 명령 행을 재구성하려면 config_arg [0-9] *에 제공된 개별 명령 행 조각을 조립해야합니다.</target>
        </trans-unit>
        <trans-unit id="1870764ed2f16247e997e4fc2ffcccd95f21cdb4" translate="yes" xml:space="preserve">
          <source>This variable contains an identification of the concatenation mechanism used by the C preprocessor.</source>
          <target state="translated">이 변수에는 C 프리 프로세서가 사용하는 연결 메커니즘의 식별이 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="4cc7e831510259e1b95cf27702ac0bf8180ffe21" translate="yes" xml:space="preserve">
          <source>This variable contains any</source>
          <target state="translated">이 변수는</target>
        </trans-unit>
        <trans-unit id="b29e3afba1dd84b209dc7db462e8ad44197fd63a" translate="yes" xml:space="preserve">
          <source>This variable contains any additional C compiler flags desired by the user. It is up to the Makefile to use this.</source>
          <target state="translated">이 변수에는 사용자가 원하는 추가 C 컴파일러 플래그가 포함됩니다. 이것을 사용하는 것은 Makefile에 달려 있습니다.</target>
        </trans-unit>
        <trans-unit id="2e14682ed38ba7191551af860aff8caab5bc3848" translate="yes" xml:space="preserve">
          <source>This variable contains any additional C loader flags desired by the user. It is up to the Makefile to use this.</source>
          <target state="translated">이 변수는 사용자가 원하는 추가 C 로더 플래그를 포함합니다. 이것을 사용하는 것은 Makefile에 달려 있습니다.</target>
        </trans-unit>
        <trans-unit id="6ad9e023bf2dd89f5286a41ed686017358d7a26c" translate="yes" xml:space="preserve">
          <source>This variable contains any additional C partial linker flags desired by the user. It is up to the Makefile to use this.</source>
          <target state="translated">이 변수는 사용자가 원하는 추가 C 부분 링커 플래그를 포함합니다. 이것을 사용하는 것은 Makefile에 달려 있습니다.</target>
        </trans-unit>
        <trans-unit id="4d2a2a9ee98225c8879b23a7c406a7850a758c7e" translate="yes" xml:space="preserve">
          <source>This variable contains any additional yacc flags desired by the user. It is up to the Makefile to use this.</source>
          <target state="translated">이 변수는 사용자가 원하는 추가 yacc 플래그를 포함합니다. 이것을 사용하는 것은 Makefile에 달려 있습니다.</target>
        </trans-unit>
        <trans-unit id="c71cfb21747c7289d8dd43881a4dc9c236332312" translate="yes" xml:space="preserve">
          <source>This variable contains any special flags that might need to be passed to $ld to create a shared library suitable for dynamic loading. It is up to the makefile to use it. For hpux, it should be &lt;code&gt;-b&lt;/code&gt; . For sunos 4.1, it is empty.</source>
          <target state="translated">이 변수에는 동적로드에 적합한 공유 라이브러리를 작성하기 위해 $ ld로 전달해야하는 특수 플래그가 포함되어 있습니다. 그것을 사용하는 것은 makefile에 달려 있습니다. hpux의 경우 &lt;code&gt;-b&lt;/code&gt; 여야합니다 . sunos 4.1의 경우 비어 있습니다.</target>
        </trans-unit>
        <trans-unit id="ef776f318eef91dd59a51bd972ca0cd250435b2b" translate="yes" xml:space="preserve">
          <source>This variable contains any special flags that might need to be passed to cc to link with a shared library for dynamic loading. It is up to the makefile to use it. For sunos 4.1, it should be empty.</source>
          <target state="translated">이 변수에는 동적로드를 위해 공유 라이브러리와 링크하기 위해 cc에 전달해야 할 특수 플래그가 포함되어 있습니다. 그것을 사용하는 것은 makefile에 달려 있습니다. sunos 4.1의 경우 비어 있어야합니다.</target>
        </trans-unit>
        <trans-unit id="c937584a03d3d71ac242d079a3ec6ea28558e74f" translate="yes" xml:space="preserve">
          <source>This variable contains any special flags that might need to be passed with &lt;code&gt;cc -c&lt;/code&gt; to compile modules to be used to create a shared library that will be used for dynamic loading. For hpux, this should be +z. It is up to the makefile to use it.</source>
          <target state="translated">이 변수에는 동적로드에 사용될 공유 라이브러리를 작성하는 데 사용될 모듈을 컴파일하기 위해 &lt;code&gt;cc -c&lt;/code&gt; 와 함께 전달되어야하는 특수 플래그가 포함되어 있습니다 . hpux의 경우 + z 여야합니다. 그것을 사용하는 것은 makefile에 달려 있습니다.</target>
        </trans-unit>
        <trans-unit id="4c28e32568cc2ea73a8b3fd6585b9210a871da1e" translate="yes" xml:space="preserve">
          <source>This variable contains compile-time hints for the Perl interpreter. At the end of compilation of a BLOCK the value of this variable is restored to the value when the interpreter started to compile the BLOCK.</source>
          <target state="translated">이 변수는 Perl 인터프리터에 대한 컴파일 타임 힌트를 포함합니다. BLOCK 컴파일 종료시이 변수의 값은 인터프리터가 BLOCK 컴파일을 시작했을 때 값으로 복원됩니다.</target>
        </trans-unit>
        <trans-unit id="1bb304267cd377c3c3a5992e35332c4910b33d6c" translate="yes" xml:space="preserve">
          <source>This variable contains the &lt;code&gt;-n&lt;/code&gt; flag if that is what causes the echo command to suppress newline. Otherwise it is null. Correct usage is $echo $n &quot;prompt for a question: $c&quot;.</source>
          <target state="translated">echo 명령이 개행을 억제하게하는 원인 인 경우이 변수에 &lt;code&gt;-n&lt;/code&gt; 플래그가 포함 됩니다. 그렇지 않으면 null입니다. 올바른 사용법은 $ echo $ n &quot;질문에 대한 프롬프트 : $ c&quot;입니다.</target>
        </trans-unit>
        <trans-unit id="8fecd752336e81d7e2ade12636de67dfd91b6ee3" translate="yes" xml:space="preserve">
          <source>This variable contains the C type used for Perl's &lt;code&gt;IV&lt;/code&gt; .</source>
          <target state="translated">이 변수에는 Perl의 &lt;code&gt;IV&lt;/code&gt; 에 사용 된 C 유형이 포함됩니다 .</target>
        </trans-unit>
        <trans-unit id="345b277d5cbf9a500362949b83977d6ed36031ec" translate="yes" xml:space="preserve">
          <source>This variable contains the C type used for Perl's &lt;code&gt;NV&lt;/code&gt; .</source>
          <target state="translated">이 변수에는 Perl의 &lt;code&gt;NV&lt;/code&gt; 에 사용되는 C 유형이 포함됩니다 .</target>
        </trans-unit>
        <trans-unit id="c1b93087a0e96bdaf5ade955c0aba4e163e8ffe4" translate="yes" xml:space="preserve">
          <source>This variable contains the C type used for Perl's &lt;code&gt;UV&lt;/code&gt; .</source>
          <target state="translated">이 변수에는 Perl의 &lt;code&gt;UV&lt;/code&gt; 에 사용되는 C 유형이 포함됩니다 .</target>
        </trans-unit>
        <trans-unit id="44c045826dc48e009792b582a1a15241a4802f80" translate="yes" xml:space="preserve">
          <source>This variable contains the C type used for Perl's I16.</source>
          <target state="translated">이 변수에는 Perl의 I16에 사용 된 C 유형이 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="77c6b2c95a4c678ebae1f177568ad739253f7470" translate="yes" xml:space="preserve">
          <source>This variable contains the C type used for Perl's I32.</source>
          <target state="translated">이 변수에는 Perl의 I32에 사용 된 C 유형이 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="d2c7ec1b0973092afd2b50f8b1058bea9b89894d" translate="yes" xml:space="preserve">
          <source>This variable contains the C type used for Perl's I64.</source>
          <target state="translated">이 변수에는 Perl의 I64에 사용 된 C 유형이 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="7e8c981cfb8e030f8b5f0c15730537642443797f" translate="yes" xml:space="preserve">
          <source>This variable contains the C type used for Perl's I8.</source>
          <target state="translated">이 변수에는 Perl의 I8에 사용 된 C 유형이 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="28245845d557a529e4ec28b86a43601fb8bd87bb" translate="yes" xml:space="preserve">
          <source>This variable contains the C type used for Perl's U16.</source>
          <target state="translated">이 변수에는 Perl의 U16에 사용 된 C 유형이 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="4ecbb618578306999ef15a8c24654c1e837662e5" translate="yes" xml:space="preserve">
          <source>This variable contains the C type used for Perl's U32.</source>
          <target state="translated">이 변수에는 Perl의 U32에 사용 된 C 유형이 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="f4e9d8c5f164aae8dfb8f1ce5f1c7a20d5d800bd" translate="yes" xml:space="preserve">
          <source>This variable contains the C type used for Perl's U64.</source>
          <target state="translated">이 변수에는 Perl의 U64에 사용 된 C 유형이 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="ac9af6096c62dbdeff18c33175ad9b73e88a2fbc" translate="yes" xml:space="preserve">
          <source>This variable contains the C type used for Perl's U8.</source>
          <target state="translated">이 변수에는 Perl의 U8에 사용 된 C 유형이 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="041becfddfe8c13e3949ddfb21dff17c1055b2b4" translate="yes" xml:space="preserve">
          <source>This variable contains the \c string if that is what causes the echo command to suppress newline. Otherwise it is null. Correct usage is $echo $n &quot;prompt for a question: $c&quot;.</source>
          <target state="translated">echo 변수가 개행을 억제하는 원인이라면이 변수는 \ c 문자열을 포함합니다. 그렇지 않으면 null입니다. 올바른 사용법은 $ echo $ n &quot;질문에 대한 프롬프트 : $ c&quot;입니다.</target>
        </trans-unit>
        <trans-unit id="00b68536bbb58e1d485d32e8b6dfac5ba3ccbfe6" translate="yes" xml:space="preserve">
          <source>This variable contains the command necessary to spit out a runnable shell on this system. It is either cat or a grep &lt;code&gt;-v&lt;/code&gt; for # comments.</source>
          <target state="translated">이 변수는이 시스템에서 실행 가능한 쉘을 뱉어내는 데 필요한 명령을 포함합니다. # 주석의 경우 cat 또는 grep &lt;code&gt;-v&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="3fa4df2e22fe28eadbf2d1c8e81d9f2fd361bb39" translate="yes" xml:space="preserve">
          <source>This variable contains the command used by Configure to copy and execute a cross-compiled executable in the target host. Useful and available only during Perl build. Empty string '' if not cross-compiling.</source>
          <target state="translated">이 변수에는 대상 호스트에서 크로스 컴파일 된 실행 파일을 복사하고 실행하기 위해 Configure에서 사용하는 명령이 포함됩니다. 유용하고 Perl 빌드 중에 만 사용 가능합니다. 크로스 컴파일이 아닌 경우 빈 문자열 ''</target>
        </trans-unit>
        <trans-unit id="c688f914beea4c8062df73ea0350090c15f41811" translate="yes" xml:space="preserve">
          <source>This variable contains the command used by Configure to copy files from the target host. Useful and available only during Perl build. The string &lt;code&gt;:&lt;/code&gt; if not cross-compiling.</source>
          <target state="translated">이 변수에는 Configure에서 대상 호스트에서 파일을 복사하는 데 사용되는 명령이 포함됩니다. 유용하고 Perl 빌드 중에 만 사용 가능합니다. 문자열 &lt;code&gt;:&lt;/code&gt; 크로스 컴파일이 아닌 경우.</target>
        </trans-unit>
        <trans-unit id="5e13a39f33e98c693ecd8d6ff26d17bc90eb69da" translate="yes" xml:space="preserve">
          <source>This variable contains the command used by Configure to copy to from the target host. Useful and available only during Perl build. The string &lt;code&gt;:&lt;/code&gt; if not cross-compiling.</source>
          <target state="translated">이 변수에는 Configure에서 대상 호스트에서 복사하기 위해 사용하는 명령이 포함됩니다. 유용하고 Perl 빌드 중에 만 사용 가능합니다. 문자열 &lt;code&gt;:&lt;/code&gt; 크로스 컴파일이 아닌 경우.</target>
        </trans-unit>
        <trans-unit id="bb94d1eef23d72732f398f9a66136979145fe7b5" translate="yes" xml:space="preserve">
          <source>This variable contains the command used by Configure to create a new directory on the target host.</source>
          <target state="translated">이 변수에는 Configure에서 대상 호스트에 새 디렉토리를 작성하는 데 사용하는 명령이 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="c78211fb16c1e978653a576621ccd16e492debf5" translate="yes" xml:space="preserve">
          <source>This variable contains the command which can be used to compute the host name. The command is fully qualified by its absolute path, to make it safe when used by a process with super-user privileges.</source>
          <target state="translated">이 변수에는 호스트 이름을 계산하는 데 사용할 수있는 명령이 포함되어 있습니다. 이 명령은 절대 경로로 정규화되어 수퍼 유저 권한이있는 프로세스에서 사용할 때 안전합니다.</target>
        </trans-unit>
        <trans-unit id="d6552f12a6078612b5d72ad16983a9c71ba33d06" translate="yes" xml:space="preserve">
          <source>This variable contains the command which will invoke a C preprocessor on standard input and put the output to stdout. It is guaranteed not to be a wrapper and may be a null string if no preprocessor can be made directly available. This preprocessor might be different from the one used by the C compiler. Don't forget to append cpplast after the preprocessor options.</source>
          <target state="translated">이 변수에는 표준 입력에서 C 프리 프로세서를 호출하고 출력을 stdout에 넣는 명령이 포함되어 있습니다. 랩퍼가 될 수 없으며 전처리기를 직접 사용할 수없는 경우 널 문자열 일 수 있습니다. 이 전처리 기는 C 컴파일러가 사용하는 것과 다를 수 있습니다. 전 처리기 옵션 다음에 cpplast를 추가하는 것을 잊지 마십시오.</target>
        </trans-unit>
        <trans-unit id="3a73917a29e02031ae0d151482d486274cbe063a" translate="yes" xml:space="preserve">
          <source>This variable contains the command which will invoke the C preprocessor on standard input and put the output to stdout. It is primarily used by other Configure units that ask about preprocessor symbols.</source>
          <target state="translated">이 변수에는 표준 입력에서 C 프리 프로세서를 호출하고 출력을 stdout에 넣는 명령이 포함되어 있습니다. 주로 전 처리기 기호를 묻는 다른 구성 단위에서 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="42ea91a7559eaae0c08bb16c2d907dc6ab592732" translate="yes" xml:space="preserve">
          <source>This variable contains the compiler flags needed by large file builds and added to ccflags by hints files.</source>
          <target state="translated">이 변수에는 큰 파일 빌드에 필요하고 힌트 파일에 의해 ccflags에 추가 된 컴파일러 플래그가 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="aa305454e9d017b091405e1d6e58ed0b66d591fd" translate="yes" xml:space="preserve">
          <source>This variable contains the eventual value of the &lt;code&gt;HAS_FDS_BITS&lt;/code&gt; symbol, which indicates if your fd_set typedef contains the fds_bits member. If you have an fd_set typedef, but the dweebs who installed it did a half-fast job and neglected to provide the macros to manipulate an fd_set, &lt;code&gt;HAS_FDS_BITS&lt;/code&gt; will let us know how to fix the gaffe.</source>
          <target state="translated">이 변수에는 &lt;code&gt;HAS_FDS_BITS&lt;/code&gt; 기호 의 최종 값이 포함 되는데 , 이는 fd_set typedef에 fds_bits 멤버가 포함되어 있는지 여부를 나타냅니다. fd_set typedef가 있지만이를 설치 한 dweeb가 절반의 빠른 작업을 수행하여 fd_set를 조작하기위한 매크로를 제공하지 않은 경우 &lt;code&gt;HAS_FDS_BITS&lt;/code&gt; 는 gaffe 수정 방법을 알려줍니다.</target>
        </trans-unit>
        <trans-unit id="3f053152d3ad698f63f197f6238e4216a91fe558" translate="yes" xml:space="preserve">
          <source>This variable contains the eventual value of the &lt;code&gt;HAS_FD_MACROS&lt;/code&gt; symbol, which indicates if your C compiler knows about the macros which manipulate an fd_set.</source>
          <target state="translated">이 변수에는 &lt;code&gt;HAS_FD_MACROS&lt;/code&gt; 기호 의 최종 값이 포함되어 있습니다. 이는 C 컴파일러가 fd_set를 조작하는 매크로에 대해 알고 있는지 여부를 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="a7c799a91500256076e905c9fd4c5c92e1c18fd3" translate="yes" xml:space="preserve">
          <source>This variable contains the eventual value of the &lt;code&gt;HAS_FD_SET&lt;/code&gt; symbol, which indicates if your C compiler knows about the fd_set typedef.</source>
          <target state="translated">이 변수는 &lt;code&gt;HAS_FD_SET&lt;/code&gt; 심볼 의 최종 값을 포함하며 , 이는 C 컴파일러가 fd_set typedef에 대해 알고 있는지 여부를 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="8c853438251fb9800ca93c85ea5a1ca1d3e32223" translate="yes" xml:space="preserve">
          <source>This variable contains the eventual value of the &lt;code&gt;MYDOMAIN&lt;/code&gt; symbol, which is the domain of the host the program is going to run on. The domain must be appended to myhostname to form a complete host name. The dot comes with mydomain, and need not be supplied by the program.</source>
          <target state="translated">이 변수에는 프로그램이 실행될 호스트의 도메인 인 &lt;code&gt;MYDOMAIN&lt;/code&gt; 기호 의 최종 값이 포함 됩니다. 완전한 호스트 이름을 형성하려면 도메인을 myhostname에 추가해야합니다. 점은 mydomain과 함께 제공되며 프로그램에서 제공하지 않아도됩니다.</target>
        </trans-unit>
        <trans-unit id="72d6cd7d676d8a003864d8c96da4fa2d54d67a60" translate="yes" xml:space="preserve">
          <source>This variable contains the eventual value of the &lt;code&gt;MYHOSTNAME&lt;/code&gt; symbol, which is the name of the host the program is going to run on. The domain is not kept with hostname, but must be gotten from mydomain. The dot comes with mydomain, and need not be supplied by the program.</source>
          <target state="translated">이 변수에는 프로그램이 실행될 호스트의 이름 인 &lt;code&gt;MYHOSTNAME&lt;/code&gt; 기호 의 최종 값이 포함 됩니다. 도메인은 호스트 이름으로 유지되지 않지만 mydomain에서 가져와야합니다. 점은 mydomain과 함께 제공되며 프로그램에서 제공하지 않아도됩니다.</target>
        </trans-unit>
        <trans-unit id="66a56e44c20bd9c15e4c7375f7a0436fcceec916" translate="yes" xml:space="preserve">
          <source>This variable contains the eventual value of the &lt;code&gt;PERLPATH&lt;/code&gt; symbol, which contains the name of the perl interpreter to be used in shell scripts and in the &quot;eval &lt;code&gt;&lt;a href=&quot;functions/exec&quot;&gt;exec&lt;/a&gt;&lt;/code&gt;&quot; idiom. This variable is not necessarily the pathname of the file containing the perl interpreter; you must append the executable extension (_exe) if it is not already present. Note that Perl code that runs during the Perl build process cannot reference this variable, as Perl may not have been installed, or even if installed, may be a different version of Perl.</source>
          <target state="translated">이 변수에는 &lt;code&gt;PERLPATH&lt;/code&gt; 기호 의 최종 값 이 포함되며, 여기에는 쉘 스크립트 및 &quot;eval &lt;code&gt;&lt;a href=&quot;functions/exec&quot;&gt;exec&lt;/a&gt;&lt;/code&gt; &quot;관용구 에서 사용되는 perl 인터프리터의 이름이 포함됩니다 . 이 변수는 반드시 perl 인터프리터를 포함하는 파일의 경로 이름 일 필요는 없습니다. 실행 파일 확장명 (_exe)이 아직 없으면 추가해야합니다. Perl이 설치되지 않았거나 설치되어 있어도 다른 버전의 Perl 일 수 있으므로 Perl 빌드 프로세스 중에 실행되는 Perl 코드는이 변수를 참조 할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="9989ec6203a503b3646290c6301ece934c5ddbc2" translate="yes" xml:space="preserve">
          <source>This variable contains the eventual value of the &lt;code&gt;PHOSTNAME&lt;/code&gt; symbol, which is a command that can be fed to popen() to get the host name. The program should probably not presume that the domain is or isn't there already.</source>
          <target state="translated">이 변수에는 &lt;code&gt;PHOSTNAME&lt;/code&gt; 기호 의 최종 값이 포함되며 , 이는 호스트 이름을 얻기 위해 popen ()에 제공 될 수있는 명령입니다. 프로그램은 아마도 도메인이 존재하거나 존재하지 않는 것으로 추정해서는 안됩니다.</target>
        </trans-unit>
        <trans-unit id="681ef0e06ff2c2aa03837e83e0b26a89f0665ee3" translate="yes" xml:space="preserve">
          <source>This variable contains the eventual value of the &lt;code&gt;PRIVLIB&lt;/code&gt; symbol, which is the name of the private library for this package. It may have a</source>
          <target state="translated">이 변수에는 &lt;code&gt;PRIVLIB&lt;/code&gt; 기호 의 최종 값이 포함 되며이 패키지의 개인 라이브러리 이름입니다. 있을 수 있습니다</target>
        </trans-unit>
        <trans-unit id="31cac01ab4bc1534aaee7c44b869f93540f7ce61" translate="yes" xml:space="preserve">
          <source>This variable contains the eventual value of the &lt;code&gt;SITEARCH&lt;/code&gt; symbol, which is the name of the private library for this package. It may have a</source>
          <target state="translated">이 변수에는 &lt;code&gt;SITEARCH&lt;/code&gt; 기호 의 최종 값이 포함 되며이 패키지의 개인 라이브러리 이름입니다. 있을 수 있습니다</target>
        </trans-unit>
        <trans-unit id="3ae87ee11e0493672ee92db082729fa18598335e" translate="yes" xml:space="preserve">
          <source>This variable contains the eventual value of the &lt;code&gt;SITELIB&lt;/code&gt; symbol, which is the name of the private library for this package. It may have a</source>
          <target state="translated">이 변수에는 &lt;code&gt;SITELIB&lt;/code&gt; 기호 의 최종 값이 포함 되며이 패키지의 개인 라이브러리 이름입니다. 있을 수 있습니다</target>
        </trans-unit>
        <trans-unit id="d56cfa107b207ecfcf834b0fd84160e5fff95865" translate="yes" xml:space="preserve">
          <source>This variable contains the eventual value of the &lt;code&gt;VENDORBIN&lt;/code&gt; symbol. It may have a</source>
          <target state="translated">이 변수는 &lt;code&gt;VENDORBIN&lt;/code&gt; 심볼 의 최종 값을 포함합니다 . 있을 수 있습니다</target>
        </trans-unit>
        <trans-unit id="d675524e802856fc61eb7a77fa2f9bf4194ef473" translate="yes" xml:space="preserve">
          <source>This variable contains the eventual value of the &lt;code&gt;VENDORLIB&lt;/code&gt; symbol, which is the name of the private library for this package. The standard distribution will put nothing in this directory. Vendors who distribute perl may wish to place their own modules in this directory with MakeMaker</source>
          <target state="translated">이 변수에는 &lt;code&gt;VENDORLIB&lt;/code&gt; 기호 의 최종 값이 포함 되며이 패키지의 개인 라이브러리 이름입니다. 표준 배포판은이 디렉토리에 아무것도 넣지 않습니다. Perl을 배포하는 공급 업체는 MakeMaker를 사용하여이 디렉토리에 자체 모듈을 배치 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="84f0902ec141639e2292b921d397aa58ed24bcc1" translate="yes" xml:space="preserve">
          <source>This variable contains the eventual value of the &lt;code&gt;VENDORSCRIPT&lt;/code&gt; symbol. It may have a</source>
          <target state="translated">이 변수에는 &lt;code&gt;VENDORSCRIPT&lt;/code&gt; 기호 의 최종 값이 포함 됩니다. 있을 수 있습니다</target>
        </trans-unit>
        <trans-unit id="2b6eeff26a226454b3d2eecac05e8c69edeb89c9" translate="yes" xml:space="preserve">
          <source>This variable contains the extension that is to be used for the dynamically loaded modules that perl generates.</source>
          <target state="translated">이 변수에는 perl이 생성하는 동적으로로드 된 모듈에 사용되는 확장이 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="8bb9527894f8803c37af4d876343817e482eb48a" translate="yes" xml:space="preserve">
          <source>This variable contains the extension that the manual page should have: one of &lt;code&gt;n&lt;/code&gt; , &lt;code&gt;l&lt;/code&gt; , or &lt;code&gt;1&lt;/code&gt; . The Makefile must supply the</source>
          <target state="translated">이 변수에는 매뉴얼 페이지의 확장명이 포함됩니다 : &lt;code&gt;n&lt;/code&gt; , &lt;code&gt;l&lt;/code&gt; 또는 &lt;code&gt;1&lt;/code&gt; 중 하나 . Makefile은</target>
        </trans-unit>
        <trans-unit id="56be569e75e7f90bf4c40331efd74c6e45583b38" translate="yes" xml:space="preserve">
          <source>This variable contains the extension that the manual page should have: one of &lt;code&gt;n&lt;/code&gt; , &lt;code&gt;l&lt;/code&gt; , or &lt;code&gt;3&lt;/code&gt; . The Makefile must supply the</source>
          <target state="translated">이 변수에는 매뉴얼 페이지의 확장명이 포함됩니다 : &lt;code&gt;n&lt;/code&gt; , &lt;code&gt;l&lt;/code&gt; 또는 &lt;code&gt;3&lt;/code&gt; 중 하나 . Makefile은</target>
        </trans-unit>
        <trans-unit id="3bf7d64c8407c2f4b3f97c92afa4b89d3be58a19" translate="yes" xml:space="preserve">
          <source>This variable contains the format string used for printing a Gid_t.</source>
          <target state="translated">이 변수는 Gid_t 인쇄에 사용되는 형식 문자열을 포함합니다.</target>
        </trans-unit>
        <trans-unit id="4392b845666e9577f16b65ad169c9cf0067ea608" translate="yes" xml:space="preserve">
          <source>This variable contains the format string used for printing a Perl &lt;code&gt;IV&lt;/code&gt; as a signed decimal integer.</source>
          <target state="translated">이 변수에는 Perl &lt;code&gt;IV&lt;/code&gt; 를 부호있는 10 진 정수로 인쇄하는 데 사용되는 형식 문자열이 포함됩니다 .</target>
        </trans-unit>
        <trans-unit id="81c050c162c31ff90f6ab45539f58e0c54f0d6f3" translate="yes" xml:space="preserve">
          <source>This variable contains the format string used for printing a Perl &lt;code&gt;NV&lt;/code&gt; using %E-ish floating point format.</source>
          <target state="translated">이 변수는 % E-ish 부동 소수점 형식을 사용하여 Perl &lt;code&gt;NV&lt;/code&gt; 를 인쇄하는 데 사용되는 형식 문자열을 포함 합니다.</target>
        </trans-unit>
        <trans-unit id="70e4383bbcfeb9283f099cb5c709d82ed17812ed" translate="yes" xml:space="preserve">
          <source>This variable contains the format string used for printing a Perl &lt;code&gt;NV&lt;/code&gt; using %F-ish floating point format.</source>
          <target state="translated">이 변수는 % F-ish 부동 소수점 형식을 사용하여 Perl &lt;code&gt;NV&lt;/code&gt; 를 인쇄하는 데 사용되는 형식 문자열을 포함 합니다.</target>
        </trans-unit>
        <trans-unit id="5e6b640c8b3aae499b4ae49f6dd7991d1d5f3ab3" translate="yes" xml:space="preserve">
          <source>This variable contains the format string used for printing a Perl &lt;code&gt;NV&lt;/code&gt; using %G-ish floating point format.</source>
          <target state="translated">이 변수는 % G-ish 부동 소수점 형식을 사용하여 Perl &lt;code&gt;NV&lt;/code&gt; 를 인쇄하는 데 사용되는 형식 문자열을 포함 합니다.</target>
        </trans-unit>
        <trans-unit id="09c558703f3957189e97a2c901f2809a9b8678da" translate="yes" xml:space="preserve">
          <source>This variable contains the format string used for printing a Perl &lt;code&gt;NV&lt;/code&gt; using %e-ish floating point format.</source>
          <target state="translated">이 변수는 % e-ish 부동 소수점 형식을 사용하여 Perl &lt;code&gt;NV&lt;/code&gt; 를 인쇄하는 데 사용되는 형식 문자열을 포함 합니다.</target>
        </trans-unit>
        <trans-unit id="d686d27acb5a517f06abbf394a85843f55c788e0" translate="yes" xml:space="preserve">
          <source>This variable contains the format string used for printing a Perl &lt;code&gt;NV&lt;/code&gt; using %f-ish floating point format.</source>
          <target state="translated">이 변수는 % f-ish 부동 소수점 형식을 사용하여 Perl &lt;code&gt;NV&lt;/code&gt; 를 인쇄하는 데 사용되는 형식 문자열을 포함 합니다.</target>
        </trans-unit>
        <trans-unit id="a5928777cb232771a9f0d3707f90840a31922926" translate="yes" xml:space="preserve">
          <source>This variable contains the format string used for printing a Perl &lt;code&gt;NV&lt;/code&gt; using %g-ish floating point format.</source>
          <target state="translated">이 변수는 % g-ish 부동 소수점 형식을 사용하여 Perl &lt;code&gt;NV&lt;/code&gt; 를 인쇄하는 데 사용되는 형식 문자열을 포함 합니다.</target>
        </trans-unit>
        <trans-unit id="e111caa6ae4d05c237ea64219d8162495f8ddfb8" translate="yes" xml:space="preserve">
          <source>This variable contains the format string used for printing a Perl &lt;code&gt;UV&lt;/code&gt; as an unsigned decimal integer.</source>
          <target state="translated">이 변수에는 Perl &lt;code&gt;UV&lt;/code&gt; 를 부호없는 10 진수 정수로 인쇄하는 데 사용되는 형식 문자열이 포함되어 있습니다 .</target>
        </trans-unit>
        <trans-unit id="20ed6436ee30fb3c3ef5843d66ae8e4efca76617" translate="yes" xml:space="preserve">
          <source>This variable contains the format string used for printing a Perl &lt;code&gt;UV&lt;/code&gt; as an unsigned hexadecimal integer in lowercase abcdef.</source>
          <target state="translated">이 변수는 소문자 abcdef에서 부호없는 16 진수 정수로 Perl &lt;code&gt;UV&lt;/code&gt; 를 인쇄하는 데 사용되는 형식 문자열을 포함합니다 .</target>
        </trans-unit>
        <trans-unit id="7ec7c123a8e1e9412d82da57f785f0d98f02e6d5" translate="yes" xml:space="preserve">
          <source>This variable contains the format string used for printing a Perl &lt;code&gt;UV&lt;/code&gt; as an unsigned hexadecimal integer in uppercase &lt;code&gt;ABCDEF&lt;/code&gt; .</source>
          <target state="translated">이 변수는 대문자 &lt;code&gt;ABCDEF&lt;/code&gt; 의 부호없는 16 진수 정수로 Perl &lt;code&gt;UV&lt;/code&gt; 를 인쇄하는 데 사용되는 형식 문자열을 포함합니다 .</target>
        </trans-unit>
        <trans-unit id="26cf0f51d012ad12cbca2bac7a21c548bcb996a2" translate="yes" xml:space="preserve">
          <source>This variable contains the format string used for printing a Perl &lt;code&gt;UV&lt;/code&gt; as an unsigned octal integer.</source>
          <target state="translated">이 변수는 Perl &lt;code&gt;UV&lt;/code&gt; 를 부호없는 8 진 정수로 인쇄하는 데 사용되는 형식 문자열을 포함합니다 .</target>
        </trans-unit>
        <trans-unit id="40bef71c1b4167fbc2be9cbda6b84cd7802b0fd8" translate="yes" xml:space="preserve">
          <source>This variable contains the format string used for printing a Uid_t.</source>
          <target state="translated">이 변수는 Uid_t 인쇄에 사용되는 형식 문자열을 포함합니다.</target>
        </trans-unit>
        <trans-unit id="b8fe88ecf74d2a5960422f3df3e47d323835c786" translate="yes" xml:space="preserve">
          <source>This variable contains the full path (if any) to a previously installed</source>
          <target state="translated">이 변수에는 이전에 설치된 전체 경로 (있는 경우)가 포함됩니다</target>
        </trans-unit>
        <trans-unit id="e653f8b76748020b456bba7f0b78d4106dbd88e3" translate="yes" xml:space="preserve">
          <source>This variable contains the full pathname of the shell used on this system to execute Bourne shell scripts. Usually, this will be</source>
          <target state="translated">이 변수에는이 시스템에서 Bourne 쉘 스크립트를 실행하는 데 사용되는 쉘의 전체 경로 이름이 포함됩니다. 보통 이것은</target>
        </trans-unit>
        <trans-unit id="87df586ce4d6ba89bae38fa2ba87e4feedee0381" translate="yes" xml:space="preserve">
          <source>This variable contains the full pathname to &lt;code&gt;ar&lt;/code&gt; , whether or not the user has specified &lt;code&gt;portability&lt;/code&gt; . This is only used in the</source>
          <target state="translated">이 변수 는 사용자가 &lt;code&gt;portability&lt;/code&gt; 을 지정했는지 여부에 관계없이 &lt;code&gt;ar&lt;/code&gt; 에 대한 전체 경로 이름을 포함합니다 . 이것은 오직</target>
        </trans-unit>
        <trans-unit id="666afd97c41a408c3dace894f00d85b8b0663e5f" translate="yes" xml:space="preserve">
          <source>This variable contains the full pathname to &lt;code&gt;csh&lt;/code&gt; , whether or not the user has specified &lt;code&gt;portability&lt;/code&gt; . This is only used in the compiled C program, and we assume that all systems which can share this executable will have the same full pathname to</source>
          <target state="translated">이 변수 는 사용자가 &lt;code&gt;portability&lt;/code&gt; 을 지정했는지 여부에 관계없이 &lt;code&gt;csh&lt;/code&gt; 에 대한 전체 경로 이름을 포함합니다 . 이것은 컴파일 된 C 프로그램에서만 사용되며이 실행 파일을 공유 할 수있는 모든 시스템의 경로 이름은 동일합니다.</target>
        </trans-unit>
        <trans-unit id="53d921b5e623ee82e1f71030369d6828667c2182" translate="yes" xml:space="preserve">
          <source>This variable contains the full pathname to &lt;code&gt;sed&lt;/code&gt; , whether or not the user has specified &lt;code&gt;portability&lt;/code&gt; . This is only used in the compiled C program, and we assume that all systems which can share this executable will have the same full pathname to</source>
          <target state="translated">이 변수 는 사용자가 &lt;code&gt;portability&lt;/code&gt; 을 지정했는지 여부에 관계없이 &lt;code&gt;sed&lt;/code&gt; 에 대한 전체 경로 이름을 포함합니다 . 이것은 컴파일 된 C 프로그램에서만 사용되며이 실행 파일을 공유 할 수있는 모든 시스템의 경로 이름은 동일합니다.</target>
        </trans-unit>
        <trans-unit id="49c792bc38405bf518c8c8e5b6d328a1ae48e695" translate="yes" xml:space="preserve">
          <source>This variable contains the kind of ptr returned by malloc and realloc.</source>
          <target state="translated">이 변수에는 malloc 및 realloc에 ​​의해 반환되는 ptr 종류가 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="eeab1bf0260966958fb0d2e99127c5d9966ca140" translate="yes" xml:space="preserve">
          <source>This variable contains the libraries needed by large file builds and added to ldflags by hints files. It is a space separated list of the library names without the &lt;code&gt;lib&lt;/code&gt; prefix or any suffix, just like</source>
          <target state="translated">이 변수에는 대용량 파일 빌드에 필요한 라이브러리가 포함되어 있으며 힌트 파일로 ldflags에 추가됩니다. &lt;code&gt;lib&lt;/code&gt; 접두사 또는 접미사 가없는 공백으로 구분 된 라이브러리 이름 목록입니다.</target>
        </trans-unit>
        <trans-unit id="5e5ba6a7659b13aba59fd413ba52f7824409ec3b" translate="yes" xml:space="preserve">
          <source>This variable contains the loader flags needed by large file builds and added to ldflags by hints files.</source>
          <target state="translated">이 변수에는 큰 파일 빌드에 필요하고 힌트 파일에 의해 ldflags에 추가 된 로더 플래그가 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="62334e1e9b49cc54d2249facaa6f5075bbc89332" translate="yes" xml:space="preserve">
          <source>This variable contains the location of the C library.</source>
          <target state="translated">이 변수는 C 라이브러리의 위치를 ​​포함합니다.</target>
        </trans-unit>
        <trans-unit id="82c3786bcf212d85922076051dff18755d0a2587" translate="yes" xml:space="preserve">
          <source>This variable contains the major version number of Berkeley &lt;code&gt;DB&lt;/code&gt; found in the &amp;lt;db.h&amp;gt; header file.</source>
          <target state="translated">이 변수 는 &amp;lt;db.h&amp;gt; 헤더 파일에있는 Berkeley &lt;code&gt;DB&lt;/code&gt; 의 주요 버전 번호를 포함 합니다.</target>
        </trans-unit>
        <trans-unit id="1a3c1e73644df79adc77f1d1bf90e009d42833ac" translate="yes" xml:space="preserve">
          <source>This variable contains the minor version number of Berkeley &lt;code&gt;DB&lt;/code&gt; found in the &amp;lt;db.h&amp;gt; header file. For &lt;code&gt;DB&lt;/code&gt; version 1 this is always 0.</source>
          <target state="translated">이 변수 는 &amp;lt;db.h&amp;gt; 헤더 파일에서 발견 된 부 버전의 Berkeley &lt;code&gt;DB&lt;/code&gt; 를 포함 합니다. 를 들어 &lt;code&gt;DB&lt;/code&gt; 의 버전 1이 항상 0입니다.</target>
        </trans-unit>
        <trans-unit id="3b43d343a9ad7cbc86eb48452602b4c59119bd29" translate="yes" xml:space="preserve">
          <source>This variable contains the name of a separate host machine that can be used to run compiled test programs and perl tests on. Set to empty string if not in use.</source>
          <target state="translated">이 변수에는 컴파일 된 테스트 프로그램 및 perl 테스트를 실행하는 데 사용할 수있는 별도의 호스트 시스템 이름이 포함됩니다. 사용하지 않는 경우 빈 문자열로 설정하십시오.</target>
        </trans-unit>
        <trans-unit id="84ed7d23339b69d574b634cc2b184426122e2ab7" translate="yes" xml:space="preserve">
          <source>This variable contains the name of the</source>
          <target state="translated">이 변수에는</target>
        </trans-unit>
        <trans-unit id="f77e80aae1dc8785152029295d9b9c195326376c" translate="yes" xml:space="preserve">
          <source>This variable contains the name of the directory for html library pages. It may have a</source>
          <target state="translated">이 변수는 html 라이브러리 페이지의 디렉토리 이름을 포함합니다. 있을 수 있습니다</target>
        </trans-unit>
        <trans-unit id="53aae0b1b4a9c485200f31d66256d7973fd08ef8" translate="yes" xml:space="preserve">
          <source>This variable contains the name of the directory for html pages. It may have a</source>
          <target state="translated">이 변수는 html 페이지의 디렉토리 이름을 포함합니다. 있을 수 있습니다</target>
        </trans-unit>
        <trans-unit id="4f04511d366fd64867ceda4692dd89862650c87d" translate="yes" xml:space="preserve">
          <source>This variable contains the name of the directory for man1 pages. It may have a</source>
          <target state="translated">이 변수는 man1 페이지의 디렉토리 이름을 포함합니다. 있을 수 있습니다</target>
        </trans-unit>
        <trans-unit id="3028cc7db66d7f7dc5ba76e2500d27d9ae120566" translate="yes" xml:space="preserve">
          <source>This variable contains the name of the directory for man3 pages. It may have a</source>
          <target state="translated">이 변수는 man3 페이지의 디렉토리 이름을 포함합니다. 있을 수 있습니다</target>
        </trans-unit>
        <trans-unit id="2032a960d64db4a2e61339d4ad831b61b46590d0" translate="yes" xml:space="preserve">
          <source>This variable contains the name of the directory in which html source pages are to be put. This directory is for pages that describe libraries or modules. It is intended to correspond roughly to section 3 of the Unix manuals.</source>
          <target state="translated">이 변수에는 html 소스 페이지를 넣을 디렉토리 이름이 포함됩니다. 이 디렉토리는 라이브러리 또는 모듈을 설명하는 페이지를위한 것입니다. 대략 유닉스 매뉴얼의 섹션 3에 해당합니다.</target>
        </trans-unit>
        <trans-unit id="e2db316424aee739997b3d848c4c1c81eb62c6f5" translate="yes" xml:space="preserve">
          <source>This variable contains the name of the directory in which html source pages are to be put. This directory is for pages that describe whole programs, not libraries or modules. It is intended to correspond roughly to section 1 of the Unix manuals.</source>
          <target state="translated">이 변수에는 html 소스 페이지를 넣을 디렉토리 이름이 포함됩니다. 이 디렉토리는 라이브러리 나 모듈이 아닌 전체 프로그램을 설명하는 페이지를위한 것입니다. 대략 유닉스 매뉴얼의 섹션 1에 해당합니다.</target>
        </trans-unit>
        <trans-unit id="6aad821264e83d93cc14e8be74ff6150e4812277" translate="yes" xml:space="preserve">
          <source>This variable contains the name of the directory in which manual source pages are to be put. It is the responsibility of the</source>
          <target state="translated">이 변수에는 수동 소스 페이지를 넣을 디렉토리 이름이 포함됩니다. 의 책임입니다</target>
        </trans-unit>
        <trans-unit id="48e7d075019c68b1fd6867acdf1234dd4a89a96e" translate="yes" xml:space="preserve">
          <source>This variable contains the name of the directory in which site-specific html source pages are to be put. It is the responsibility of the</source>
          <target state="translated">이 변수에는 사이트 별 html 소스 페이지를 넣을 디렉토리 이름이 포함됩니다. 의 책임입니다</target>
        </trans-unit>
        <trans-unit id="ff86f832c1651cbf8a3bef6c25f66b0ee1dd9fb8" translate="yes" xml:space="preserve">
          <source>This variable contains the name of the directory in which site-specific library html source pages are to be put. It is the responsibility of the</source>
          <target state="translated">이 변수에는 사이트 별 라이브러리 html 소스 페이지를 넣을 디렉토리 이름이 포함됩니다. 의 책임입니다</target>
        </trans-unit>
        <trans-unit id="4f047bbc3c219d4ef5dc1d4f5bc050a459762176" translate="yes" xml:space="preserve">
          <source>This variable contains the name of the directory in which site-specific library man source pages are to be put. It is the responsibility of the</source>
          <target state="translated">이 변수에는 사이트 별 라이브러리 매뉴얼 소스 페이지를 넣을 디렉토리 이름이 포함됩니다. 의 책임입니다</target>
        </trans-unit>
        <trans-unit id="e1261594b14cb3a4bcb48599c79a08d6eb2cc31c" translate="yes" xml:space="preserve">
          <source>This variable contains the name of the directory in which site-specific manual source pages are to be put. It is the responsibility of the</source>
          <target state="translated">이 변수에는 사이트 별 수동 소스 페이지를 넣을 디렉토리 이름이 포함됩니다. 의 책임입니다</target>
        </trans-unit>
        <trans-unit id="c97060d593ac9eeb06b027ed12fa4f00f0051665" translate="yes" xml:space="preserve">
          <source>This variable contains the name of the dynamic loading file that will be used with the package.</source>
          <target state="translated">이 변수에는 패키지와 함께 사용될 동적 로딩 파일의 이름이 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="262990e4448b8d9e9dd273d5c220f74ecad3a4ec" translate="yes" xml:space="preserve">
          <source>This variable contains the name of the package being constructed, with the first letter uppercased,</source>
          <target state="translated">이 변수에는 첫 글자가 대문자 인 패키지 이름이 포함되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="90ba722d808f7f7dfd5279b81ed1710320bfc5a9" translate="yes" xml:space="preserve">
          <source>This variable contains the name of the package being constructed. It is primarily intended for the use of later Configure units.</source>
          <target state="translated">이 변수에는 구성중인 패키지 이름이 포함됩니다. 주로 나중에 구성 단위를 사용하기위한 것입니다.</target>
        </trans-unit>
        <trans-unit id="cf439ccfa6fc9a87625717801e1ab1184e34254c" translate="yes" xml:space="preserve">
          <source>This variable contains the name of the preferred pager on the system. Usual values are (the full pathnames of) more, less, pg, or cat.</source>
          <target state="translated">이 변수는 시스템에서 선호하는 호출기의 이름을 포함합니다. 일반적인 값은 (전체 경로 이름) more, less, pg 또는 cat입니다.</target>
        </trans-unit>
        <trans-unit id="b13f78b71d672b962a73afef2f863a69e8a121de" translate="yes" xml:space="preserve">
          <source>This variable contains the number of a network port to be used to connect to the host in targethost, if unset defaults to 22 for ssh.</source>
          <target state="translated">ssh의 기본값이 22로 설정되어 있으면 targethost의 호스트에 연결하는 데 사용되는 네트워크 포트 번호가이 변수에 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="c2db571a0f2c34cfa840ebf958f4ff98e0584e37" translate="yes" xml:space="preserve">
          <source>This variable contains the number of command-line arguments passed to Configure, as reported by the shell in the $# variable. The individual arguments are stored as variables config_arg1, config_arg2, etc.</source>
          <target state="translated">이 변수에는 $ # 변수의 셸에서보고 된대로 Configure에 전달 된 명령 줄 인수 수가 포함됩니다. 개별 인수는 변수 config_arg1, config_arg2 등으로 저장됩니다.</target>
        </trans-unit>
        <trans-unit id="b4ce4564a0f99cefb51b9efd2ccc9f729f25a239" translate="yes" xml:space="preserve">
          <source>This variable contains the number of elements of the sig_name and sig_num arrays.</source>
          <target state="translated">이 변수는 sig_name 및 sig_num 배열의 요소 수를 포함합니다.</target>
        </trans-unit>
        <trans-unit id="58b59d2afde508a46585fda8036739926a05c1ca" translate="yes" xml:space="preserve">
          <source>This variable contains the operating system name (e.g. sunos, solaris, hpux, etc.). It can be useful later on for setting defaults. Any spaces are replaced with underscores. It is set to a null string if we can't figure it out.</source>
          <target state="translated">이 변수에는 운영 체제 이름 (예 : sunos, solaris, hpux 등)이 포함됩니다. 나중에 기본값을 설정하는 데 유용 할 수 있습니다. 공백은 밑줄로 바뀝니다. 우리가 알아낼 수 없으면 null 문자열로 설정됩니다.</target>
        </trans-unit>
        <trans-unit id="dcfc3bcf0c49ab8c4a6c6e473572b4f66ea1da77" translate="yes" xml:space="preserve">
          <source>This variable contains the operating system version (e.g. 4.1.3, 5.2, etc.). It is primarily used for helping select an appropriate hints file, but might be useful elsewhere for setting defaults. It is set to '' if we can't figure it out. We try to be flexible about how much of the version number to keep, e.g. if 4.1.1, 4.1.2, and 4.1.3 are essentially the same for this package, hints files might just be</source>
          <target state="translated">이 변수에는 운영 체제 버전이 포함됩니다 (예 : 4.1.3, 5.2 등). 주로 적절한 힌트 파일을 선택하는 데 사용되지만 기본값을 설정하는 데 유용 할 수 있습니다. 알아낼 수 없으면 ''로 설정되어 있습니다. 4.1.1, 4.1.2 및 4.1.3이이 패키지에서 본질적으로 동일한 경우 버전 번호의 양을 유연하게 조정하려고합니다. 힌트 파일은</target>
        </trans-unit>
        <trans-unit id="e6c33aa5736d61dbb768900879f654847d88a5b1" translate="yes" xml:space="preserve">
          <source>This variable contains the original value of &lt;code&gt;$^O&lt;/code&gt; for hostperl when cross-compiling. This is useful to pick the proper tools when running build code in the host. Empty string '' if not cross-compiling.</source>
          <target state="translated">이 변수는 크로스 컴파일시 hostperl에 대한 원래 값 &lt;code&gt;$^O&lt;/code&gt; 를 포함합니다 . 호스트에서 빌드 코드를 실행할 때 적절한 도구를 선택하는 데 유용합니다. 크로스 컴파일이 아닌 경우 빈 문자열 ''</target>
        </trans-unit>
        <trans-unit id="4f689eca772c52e17d8ba8f33ed5e7e2f3173215" translate="yes" xml:space="preserve">
          <source>This variable contains the patch version number of Berkeley &lt;code&gt;DB&lt;/code&gt; found in the &amp;lt;db.h&amp;gt; header file. For &lt;code&gt;DB&lt;/code&gt; version 1 this is always 0.</source>
          <target state="translated">이 변수 는 &amp;lt;db.h&amp;gt; 헤더 파일에있는 Berkeley &lt;code&gt;DB&lt;/code&gt; 의 패치 버전 번호를 포함 합니다. 를 들어 &lt;code&gt;DB&lt;/code&gt; 의 버전 1이 항상 0입니다.</target>
        </trans-unit>
        <trans-unit id="af6b8673c54c09e29a14614a73e050a4b6ca1c1d" translate="yes" xml:space="preserve">
          <source>This variable contains the path to a generate_uudmap binary that can be run on the host &lt;code&gt;OS&lt;/code&gt; when cross-compiling. Useful and available only during Perl build. Empty string '' if not cross-compiling.</source>
          <target state="translated">이 변수에는 크로스 컴파일시 호스트 &lt;code&gt;OS&lt;/code&gt; 에서 실행할 수있는 generate_uudmap 바이너리의 경로가 포함 됩니다. 유용하고 Perl 빌드 중에 만 사용 가능합니다. 크로스 컴파일이 아닌 경우 빈 문자열 ''</target>
        </trans-unit>
        <trans-unit id="259437970b64c29ae5cd9baddfd9c2ca6e85c172" translate="yes" xml:space="preserve">
          <source>This variable contains the path to a miniperl binary that can be run on the host &lt;code&gt;OS&lt;/code&gt; when cross-compiling. Useful and available only during Perl build. Empty string '' if not cross-compiling.</source>
          <target state="translated">이 변수에는 크로스 컴파일시 호스트 &lt;code&gt;OS&lt;/code&gt; 에서 실행할 수있는 miniperl 바이너리의 경로가 포함 됩니다. 유용하고 Perl 빌드 중에 만 사용 가능합니다. 크로스 컴파일이 아닌 경우 빈 문자열 ''</target>
        </trans-unit>
        <trans-unit id="74fb37dccbb5c1946851e771a3c3c66b6848b972" translate="yes" xml:space="preserve">
          <source>This variable contains the return type of free(). It is usually void, but occasionally int.</source>
          <target state="translated">이 변수는 free ()의 리턴 유형을 포함합니다. 일반적으로 무효이지만 때로는 int입니다.</target>
        </trans-unit>
        <trans-unit id="c5afbf9aa8fad73d9c199b2d3112b28c07387f1d" translate="yes" xml:space="preserve">
          <source>This variable contains the second part of the string which will invoke the C preprocessor on the standard input and produce to standard output. This variable will have the value &lt;code&gt;-&lt;/code&gt; if cppstdin needs a minus to specify standard input, otherwise the value is &quot;&quot;.</source>
          <target state="translated">이 변수에는 표준 입력에서 C 프리 프로세서를 호출하고 표준 출력으로 생성하는 문자열의 두 번째 부분이 포함됩니다. 이 변수는 값을가집니다 &lt;code&gt;-&lt;/code&gt; cppstdin 표준 입력을 지정 마이너스를 필요로하는 경우 &quot;&quot;그렇지 않으면 값이.</target>
        </trans-unit>
        <trans-unit id="58e55c3028521ff576dd5afe84e41961ae33fdc9" translate="yes" xml:space="preserve">
          <source>This variable contains the signedness of a gidtype. 1 for unsigned, -1 for signed.</source>
          <target state="translated">이 변수는 gidtype의 부호를 포함합니다. 부호없는 경우 1, 부호있는 경우 -1</target>
        </trans-unit>
        <trans-unit id="dc8d2c8099b49c6b5096fda773c172c57b8b5b16" translate="yes" xml:space="preserve">
          <source>This variable contains the signedness of a uidtype. 1 for unsigned, -1 for signed.</source>
          <target state="translated">이 변수는 uidtype의 부호를 포함합니다. 부호없는 경우 1, 부호있는 경우 -1</target>
        </trans-unit>
        <trans-unit id="5484e90332e55ff70b74d3d035ad3057f52d3786" translate="yes" xml:space="preserve">
          <source>This variable contains the signedness of struct stat's st_ino. 1 for unsigned, -1 for signed.</source>
          <target state="translated">이 변수는 struct stat의 st_ino의 부호를 포함합니다. 부호없는 경우 1, 부호있는 경우 -1</target>
        </trans-unit>
        <trans-unit id="77b0505696dfbc7f84fe52dcb5457cf6ae9d5ab1" translate="yes" xml:space="preserve">
          <source>This variable contains the size of a fpostype in bytes.</source>
          <target state="translated">이 변수는 fpostype의 크기를 바이트 단위로 포함합니다.</target>
        </trans-unit>
        <trans-unit id="1f39fc67cd6fb11f9c6b31d5d0a5d8f46a34cae7" translate="yes" xml:space="preserve">
          <source>This variable contains the size of a gidtype in bytes.</source>
          <target state="translated">이 변수는 gidtype의 크기를 바이트 단위로 포함합니다.</target>
        </trans-unit>
        <trans-unit id="4d46623604fef864c2c0f619cd8bf48e9e08262c" translate="yes" xml:space="preserve">
          <source>This variable contains the size of a sizetype in bytes.</source>
          <target state="translated">이 변수는 sizetype의 크기를 바이트 단위로 포함합니다.</target>
        </trans-unit>
        <trans-unit id="e5309d41bdedc360994290bf527b628094f6d624" translate="yes" xml:space="preserve">
          <source>This variable contains the size of a uidtype in bytes.</source>
          <target state="translated">이 변수는 바이트 단위의 uidtype 크기를 포함합니다.</target>
        </trans-unit>
        <trans-unit id="aebe0d63cd08dd0655a9d2d6ffcc33046457a65f" translate="yes" xml:space="preserve">
          <source>This variable contains the size of struct stat's st_ino in bytes.</source>
          <target state="translated">이 변수는 struct stat의 st_ino 크기를 바이트 단위로 포함합니다.</target>
        </trans-unit>
        <trans-unit id="3a08d90d6572621c3e20edf61eab9e3e189aafbe" translate="yes" xml:space="preserve">
          <source>This variable contains the string #! if this system supports that construct.</source>
          <target state="translated">이 변수는 문자열 #!을 포함합니다. 이 시스템이 해당 구문을 지원하는 경우</target>
        </trans-unit>
        <trans-unit id="c2ab6102c9f5f6be04048d6c313b18f41b75a948" translate="yes" xml:space="preserve">
          <source>This variable contains the string to put on the front of a perl script to make sure (hopefully) that it runs with perl and not some shell. Of course, that leading line must be followed by the classical perl idiom: eval 'exec perl -S $0 ${1+&lt;code&gt;$@&lt;/code&gt; }' if $running_under_some_shell; to guarantee perl startup should the shell execute the script. Note that this magic incantation is not understood by csh.</source>
          <target state="translated">이 변수에는 셸이 아닌 perl로 실행되도록 펄 스크립트 앞에 놓을 문자열이 들어 있습니다. 물론, 그 선두 줄 뒤에는 고전적인 perl 관용구가 와야합니다. eval 'exec perl -S $ 0 $ {1+ &lt;code&gt;$@&lt;/code&gt; }'if $ running_under_some_shell; 쉘이 스크립트를 실행해야 펄 시작을 보장합니다. 이 마법의 주문은 csh에 의해 이해되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="40cb4c7debca58e209e43bee1a3e6ac2254b44bc" translate="yes" xml:space="preserve">
          <source>This variable contains the string to put on the front of a shell script to make sure (hopefully) that it runs with sh and not some other shell.</source>
          <target state="translated">이 변수는 쉘 스크립트 앞에 놓아서 다른 쉘이 아닌 sh로 실행되도록하는 문자열을 포함합니다.</target>
        </trans-unit>
        <trans-unit id="6fa073316ec1d8ef745fa4daca76d227a91de6d7" translate="yes" xml:space="preserve">
          <source>This variable contains the string used to invoke the Configure command, as reported by the shell in the $0 variable.</source>
          <target state="translated">이 변수에는 $ 0 변수의 셸에서보고 된대로 Configure 명령을 호출하는 데 사용되는 문자열이 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="b526d370cfb43492d8517403917abb6d76e8800d" translate="yes" xml:space="preserve">
          <source>This variable contains the type of the hash structure element in the &amp;lt;db.h&amp;gt; header file. In older versions of &lt;code&gt;DB&lt;/code&gt; , it was int, while in newer ones it is u_int32_t.</source>
          <target state="translated">이 변수는 &amp;lt;db.h&amp;gt; 헤더 파일의 해시 구조 요소 유형을 포함합니다. 이전 버전의 &lt;code&gt;DB&lt;/code&gt; 에서는 int 였고 최신 버전에서는 u_int32_t입니다.</target>
        </trans-unit>
        <trans-unit id="3e1708b25bad84e4b4ab479d9cc5822c9e2c2f68" translate="yes" xml:space="preserve">
          <source>This variable contains the type of the prefix structure element in the &amp;lt;db.h&amp;gt; header file. In older versions of &lt;code&gt;DB&lt;/code&gt; , it was int, while in newer ones it is size_t.</source>
          <target state="translated">이 변수는 &amp;lt;db.h&amp;gt; 헤더 파일의 접두사 구조 요소 유형을 포함합니다. 이전 버전의 &lt;code&gt;DB&lt;/code&gt; 에서는 int 였고 최신 버전에서는 size_t입니다.</target>
        </trans-unit>
        <trans-unit id="f73d5c2ddda24d749b2c414d6e8bbb8ed5e31094" translate="yes" xml:space="preserve">
          <source>This variable contains the value of the &lt;code&gt;CHARBITS&lt;/code&gt; symbol, which indicates to the C program how many bits there are in a character.</source>
          <target state="translated">이 변수는 &lt;code&gt;CHARBITS&lt;/code&gt; 기호 의 값을 포함하며 , 이는 문자에 몇 비트가 있는지 C 프로그램에 표시합니다.</target>
        </trans-unit>
        <trans-unit id="209e197394356fcf2c299b86e0f21ff169c4927a" translate="yes" xml:space="preserve">
          <source>This variable contains the value of the &lt;code&gt;CHARSIZE&lt;/code&gt; symbol, which indicates to the C program how many bytes there are in a character.</source>
          <target state="translated">이 변수는 &lt;code&gt;CHARSIZE&lt;/code&gt; 기호 의 값을 포함하며 , 이는 문자에 몇 바이트가 있는지 C 프로그램에 표시합니다.</target>
        </trans-unit>
        <trans-unit id="cc286ba6029721ed19ac8dad08800887d476cedb" translate="yes" xml:space="preserve">
          <source>This variable contains the value of the &lt;code&gt;DOUBLESIZE&lt;/code&gt; symbol, which indicates to the C program how many bytes there are in a double.</source>
          <target state="translated">이 변수는 &lt;code&gt;DOUBLESIZE&lt;/code&gt; 기호 의 값을 포함합니다.이 값은 C 프로그램에 몇 개의 바이트가 있는지를 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="4cfdf48ce6d11af6304dee26f16788a53a9bb7f4" translate="yes" xml:space="preserve">
          <source>This variable contains the value of the &lt;code&gt;INTSIZE&lt;/code&gt; symbol, which indicates to the C program how many bytes there are in an int.</source>
          <target state="translated">이 변수는 &lt;code&gt;INTSIZE&lt;/code&gt; 기호 의 값을 포함하며 , 이는 int에 몇 바이트가 있는지 C 프로그램에 표시합니다.</target>
        </trans-unit>
        <trans-unit id="f854b6ef78ada4a24f54ef958a082d07595fb3d3" translate="yes" xml:space="preserve">
          <source>This variable contains the value of the &lt;code&gt;LONGLONGSIZE&lt;/code&gt; symbol, which indicates to the C program how many bytes there are in a long long, if this system supports long long.</source>
          <target state="translated">이 변수는 &lt;code&gt;LONGLONGSIZE&lt;/code&gt; 기호 의 값을 포함합니다.이 값은 이 시스템이 long long을 지원하는 경우 C 프로그램에 long 바이트 수를 표시합니다.</target>
        </trans-unit>
        <trans-unit id="70e97491a5af598c014eb83782bcb307bee739a6" translate="yes" xml:space="preserve">
          <source>This variable contains the value of the &lt;code&gt;LONGSIZE&lt;/code&gt; symbol, which indicates to the C program how many bytes there are in a long.</source>
          <target state="translated">이 변수는 &lt;code&gt;LONGSIZE&lt;/code&gt; 기호 의 값을 포함합니다.이 값은 C 프로그램에 얼마나 많은 바이트가 있는지를 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="d7cc214dec53bb89ae3a31c1c1d3d0bacfbab5b1" translate="yes" xml:space="preserve">
          <source>This variable contains the value of the &lt;code&gt;LONG_DOUBLESIZE&lt;/code&gt; symbol, which indicates to the C program how many bytes there are in a long double, if this system supports long doubles. Note that this is sizeof(long double), which may include unused bytes.</source>
          <target state="translated">이 변수는 &lt;code&gt;LONG_DOUBLESIZE&lt;/code&gt; 기호 의 값을 포함합니다 .이 시스템은 long double을 지원하는 경우 long double에 몇 바이트가 있는지 C 프로그램에 표시합니다. 이것은 sizeof (long double)이며 사용되지 않는 바이트를 포함 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="1aec829ead07ded2d249359c3cd2ddd87bd6e01e" translate="yes" xml:space="preserve">
          <source>This variable contains the value of the &lt;code&gt;PERL_VENDORARCH&lt;/code&gt; symbol. It may have a</source>
          <target state="translated">이 변수는 &lt;code&gt;PERL_VENDORARCH&lt;/code&gt; 기호 의 값을 포함합니다 . 있을 수 있습니다</target>
        </trans-unit>
        <trans-unit id="0dfad5e2212e95ab6605941fa3f8cb002cb9cf07" translate="yes" xml:space="preserve">
          <source>This variable contains the value of the &lt;code&gt;PTRSIZE&lt;/code&gt; symbol, which indicates to the C program how many bytes there are in a pointer.</source>
          <target state="translated">이 변수는 &lt;code&gt;PTRSIZE&lt;/code&gt; 기호 의 값을 포함합니다.이 값은 C 프로그램이 포인터에 몇 바이트가 있는지를 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="d4ab537b053bd3008bd948d42ae7727b9de067d3" translate="yes" xml:space="preserve">
          <source>This variable contains the value of the &lt;code&gt;SHORTSIZE&lt;/code&gt; symbol which indicates to the C program how many bytes there are in a short.</source>
          <target state="translated">이 변수에는 &lt;code&gt;SHORTSIZE&lt;/code&gt; 기호 의 값이 포함되어 있으며, 이는 C 프로그램에 짧은 바이트 수를 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="2b26dafc433ba42b4f41b7596dce470eb0eff69b" translate="yes" xml:space="preserve">
          <source>This variable contains the value to be passed to the tr(1) command to transliterate a newline. Typical values are &lt;code&gt;\012&lt;/code&gt; and &lt;code&gt;\n&lt;/code&gt; . This is needed for &lt;code&gt;EBCDIC&lt;/code&gt; systems where newline is not necessarily &lt;code&gt;\012&lt;/code&gt; .</source>
          <target state="translated">이 변수에는 개행을 음역하기 위해 tr (1) 명령에 전달할 값이 포함됩니다. 일반적인 값은 &lt;code&gt;\012&lt;/code&gt; 및 &lt;code&gt;\n&lt;/code&gt; 입니다. 이것은 개행 문자가 반드시 &lt;code&gt;\012&lt;/code&gt; 필요는없는 &lt;code&gt;EBCDIC&lt;/code&gt; 시스템에 필요합니다 .</target>
        </trans-unit>
        <trans-unit id="650a5aef6d940a90952e3b649b01f712f6f01862" translate="yes" xml:space="preserve">
          <source>This variable contains the version number of the &lt;code&gt;GNU&lt;/code&gt; C library. It is usually something like</source>
          <target state="translated">이 변수는 &lt;code&gt;GNU&lt;/code&gt; C 라이브러리 의 버전 번호를 포함합니다 . 보통 같은</target>
        </trans-unit>
        <trans-unit id="d12fcc9b6ed9177ed0004a61c1e880e6a313373f" translate="yes" xml:space="preserve">
          <source>This variable contains y if the malloc that comes with this package is desired over the system's version of malloc. People often include special versions of malloc for efficiency, but such versions are often less portable. See also mallocsrc and mallocobj. If this is &lt;code&gt;&lt;a href=&quot;functions/y&quot;&gt;y&lt;/a&gt;&lt;/code&gt;, then -lmalloc is removed from $libs.</source>
          <target state="translated">이 패키지와 함께 제공되는 malloc이 시스템 버전의 malloc보다 필요한 경우이 변수는 y를 포함합니다. 사람들은 종종 효율성을 위해 특수 버전의 malloc을 포함하지만 그러한 버전은 종종 이식성이 떨어집니다. mallocsrc 및 mallocobj도 참조하십시오. 이것이 &lt;code&gt;&lt;a href=&quot;functions/y&quot;&gt;y&lt;/a&gt;&lt;/code&gt; 인 경우 -lmalloc이 $ libs에서 제거됩니다.</target>
        </trans-unit>
        <trans-unit id="5d3099bfd683f8bb7f73a965931102e4bd71e75f" translate="yes" xml:space="preserve">
          <source>This variable contains y if we are wrapping malloc to prevent integer overflow during size calculations.</source>
          <target state="translated">크기 계산 중에 정수 오버플로를 방지하기 위해 malloc을 래핑하는 경우이 변수에 y가 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="c70c19573821ebe6141202f1eb70b58f097c28fe" translate="yes" xml:space="preserve">
          <source>This variable controls the state of the internal UTF-8 offset caching code. 1 for on (the default), 0 for off, -1 to debug the caching code by checking all its results against linear scans, and panicking on any discrepancy.</source>
          <target state="translated">이 변수는 내부 UTF-8 오프셋 캐싱 코드의 상태를 제어합니다. 1 (켜기) (기본값), 0 (끄기), -1은 선형 스캔에 대해 모든 결과를 확인하고 불일치에 대해 패닝하여 캐싱 코드를 디버그합니다.</target>
        </trans-unit>
        <trans-unit id="ba813b77fb4a52d2ab44f399ca962e4e007a985e" translate="yes" xml:space="preserve">
          <source>This variable controls the value of &lt;code&gt;I_FCNTL&lt;/code&gt; (which tells the C program to include &amp;lt;fcntl.h&amp;gt;).</source>
          <target state="translated">이 변수는 &lt;code&gt;I_FCNTL&lt;/code&gt; 의 값을 제어합니다 (C 프로그램에 &amp;lt;fcntl.h&amp;gt;를 포함하도록 지시합니다).</target>
        </trans-unit>
        <trans-unit id="16648c794aaf375a82806f400964bf1aaaa11260" translate="yes" xml:space="preserve">
          <source>This variable controls whether &lt;code&gt;can_run&lt;/code&gt; will return all instances of the binary it finds in the &lt;code&gt;PATH&lt;/code&gt; when called in a list context.</source>
          <target state="translated">이 변수는 &lt;code&gt;can_run&lt;/code&gt; 이 목록 컨텍스트에서 호출 될 때 &lt;code&gt;PATH&lt;/code&gt; 에서 찾은 이진의 모든 인스턴스를 반환 할지 여부를 제어합니다 .</target>
        </trans-unit>
        <trans-unit id="8f229115b8b6d2974688e6cec6494958f13faf42" translate="yes" xml:space="preserve">
          <source>This variable controls whether &lt;code&gt;run&lt;/code&gt; will remove any empty/null arguments it finds in command arguments.</source>
          <target state="translated">이 변수는 &lt;code&gt;run&lt;/code&gt; 이 명령 인수에서 찾은 빈 / 널 인수를 제거 할지 여부를 제어합니다 .</target>
        </trans-unit>
        <trans-unit id="73dae8e10552a74a934e3edcd6deb9eedabfc9a5" translate="yes" xml:space="preserve">
          <source>This variable controls whether IPC::Cmd will try to use &lt;a href=&quot;http://search.cpan.org/perldoc/IPC::Run&quot;&gt;IPC::Run&lt;/a&gt; when available and suitable.</source>
          <target state="translated">이 변수는 IPC :: Cmd가 사용 가능하고 적합한 경우 &lt;a href=&quot;http://search.cpan.org/perldoc/IPC::Run&quot;&gt;IPC :: Run&lt;/a&gt; 을 사용할지 여부를 제어합니다 .</target>
        </trans-unit>
        <trans-unit id="15b099300427310ae1fce8f71d090c3e400da728" translate="yes" xml:space="preserve">
          <source>This variable controls whether IPC::Cmd will try to use &lt;a href=&quot;open3&quot;&gt;IPC::Open3&lt;/a&gt; when available and suitable. Defaults to true.</source>
          <target state="translated">이 변수는 IPC :: Cmd가 사용 가능하고 적합한 경우 &lt;a href=&quot;open3&quot;&gt;IPC :: Open3&lt;/a&gt; 을 사용할지 여부를 제어합니다 . 기본값은 true입니다.</target>
        </trans-unit>
        <trans-unit id="3bf94506621997659019c91ef2357243eb7dce4b" translate="yes" xml:space="preserve">
          <source>This variable controls whether errors encountered internally by &lt;code&gt;File::Fetch&lt;/code&gt; should be &lt;code&gt;carp&lt;/code&gt; 'd or not.</source>
          <target state="translated">에 의해 내부적으로 발생한 오류 여부를이 변수 제어 &lt;code&gt;File::Fetch&lt;/code&gt; 해야 &lt;code&gt;carp&lt;/code&gt; 'd 또는 없습니다.</target>
        </trans-unit>
        <trans-unit id="d6454fe809442a8e9b28c9d809c33b66949380ff" translate="yes" xml:space="preserve">
          <source>This variable controls whether run-time warnings should be issued, like the failure to load an &lt;code&gt;IPC::*&lt;/code&gt; module you explicitly requested.</source>
          <target state="translated">이 변수는 명시 적으로 요청한 &lt;code&gt;IPC::*&lt;/code&gt; 모듈 을로드하지 못하는 등 런타임 경고를 발행할지 여부를 제어합니다 .</target>
        </trans-unit>
        <trans-unit id="da3307b9dcc6b2a969e12a66c4e064218075e131" translate="yes" xml:space="preserve">
          <source>This variable controls whether the environment variable &lt;code&gt;FTP_PASSIVE&lt;/code&gt; and any passive switches to commandline tools will be set to true.</source>
          <target state="translated">이 변수는 환경 변수 &lt;code&gt;FTP_PASSIVE&lt;/code&gt; 및 명령 줄 도구에 대한 모든 수동 스위치가 true로 설정 되는지 여부를 제어합니다 .</target>
        </trans-unit>
        <trans-unit id="c73cb87a35ceea52349d01d5f6931e3feaf5c750" translate="yes" xml:space="preserve">
          <source>This variable could be set in the</source>
          <target state="translated">이 변수는</target>
        </trans-unit>
        <trans-unit id="52febabe758cb38494b64a9f0c008e4d28b17ca2" translate="yes" xml:space="preserve">
          <source>This variable defines &lt;code&gt;PIDTYPE&lt;/code&gt; to be something like pid_t, int, ushort, or whatever type is used to declare process ids in the kernel.</source>
          <target state="translated">이 변수는 &lt;code&gt;PIDTYPE&lt;/code&gt; 을 pid_t, int, ushort 또는 커널에서 프로세스 ID를 선언하는 데 사용되는 모든 유형으로 정의합니다.</target>
        </trans-unit>
        <trans-unit id="63ec3c820b10a99429de580c574585ce1b0da917" translate="yes" xml:space="preserve">
          <source>This variable defines Fpos_t to be something like fpos_t, long, uint, or whatever type is used to declare file positions in libc.</source>
          <target state="translated">이 변수는 Fpos_t를 fpos_t, long, uint 또는 libc에서 파일 위치를 선언하는 데 사용되는 모든 유형으로 정의합니다.</target>
        </trans-unit>
        <trans-unit id="b1883c70d873dd99d9839178075eb2cc693f95fc" translate="yes" xml:space="preserve">
          <source>This variable defines Gid_t to be something like gid_t, int, ushort, or whatever type is used to declare the return type of getgid(). Typically, it is the type of group ids in the kernel.</source>
          <target state="translated">이 변수는 Gid_t를 gid_t, int, ushort 또는 getgid ()의 반환 유형을 선언하는 데 사용되는 모든 유형으로 정의합니다. 일반적으로 커널의 그룹 ID 유형입니다.</target>
        </trans-unit>
        <trans-unit id="2525b2f1f81c42b0058a304dcd2695c0db054f3b" translate="yes" xml:space="preserve">
          <source>This variable defines Groups_t to be something like gid_t, int, ushort, or whatever type is used for the second argument to getgroups() and setgroups(). Usually, this is the same as gidtype (gid_t), but sometimes it isn't.</source>
          <target state="translated">이 변수는 Groups_t를 gid_t, int, ushort 또는 getgroups () 및 setgroups ()의 두 번째 인수에 사용되는 모든 유형으로 정의합니다. 일반적으로 이것은 gidtype (gid_t)과 동일하지만 때로는 그렇지 않습니다.</target>
        </trans-unit>
        <trans-unit id="f583b94ee2a9381689db4973892883c89c57ad70" translate="yes" xml:space="preserve">
          <source>This variable defines Quad_t to be something like long, int, long long, int64_t, or whatever type is used for 64-bit integers.</source>
          <target state="translated">이 변수는 Quad_t를 long, int, long long, int64_t 또는 64 비트 정수에 사용되는 모든 유형으로 정의합니다.</target>
        </trans-unit>
        <trans-unit id="508ca97bbdf41f627d10fb00c18f7336c146b204" translate="yes" xml:space="preserve">
          <source>This variable defines Uid_t to be something like uid_t, int, ushort, or whatever type is used to declare user ids in the kernel.</source>
          <target state="translated">이 변수는 Uid_t를 uid_t, int, ushort 또는 커널에서 사용자 ID를 선언하는 데 사용되는 모든 유형으로 정의합니다.</target>
        </trans-unit>
        <trans-unit id="40d1dde1a49ef2cf1656b74529b7ac0c5be46a1a" translate="yes" xml:space="preserve">
          <source>This variable defines Uquad_t to be something like unsigned long, unsigned int, unsigned long long, uint64_t, or whatever type is used for 64-bit integers.</source>
          <target state="translated">이 변수는 Uquad_t를 부호없는 long, 부호없는 int, 부호없는 long long, uint64_t 또는 64 비트 정수에 사용되는 모든 유형과 같은 것으로 정의합니다.</target>
        </trans-unit>
        <trans-unit id="25c0e71707dca8d5b5d218b9372bd0061c0fcbaf" translate="yes" xml:space="preserve">
          <source>This variable defines any additional objects that must be linked in with the program on this architecture. On unix, it is usually empty. It is typically used to include emulations of unix calls or other facilities. For perl on</source>
          <target state="translated">이 변수는이 아키텍처에서 프로그램과 연결되어야하는 추가 객체를 정의합니다. 유닉스에서는 일반적으로 비어 있습니다. 일반적으로 유닉스 통화 또는 기타 시설의 에뮬레이션을 포함하는 데 사용됩니다. 펄</target>
        </trans-unit>
        <trans-unit id="466b0e2c0c9cef84d53b60846c289ca645574bb7" translate="yes" xml:space="preserve">
          <source>This variable defines how, given a &lt;code&gt;FILE&lt;/code&gt; pointer, fp, to access the _base field (or equivalent) of</source>
          <target state="translated">이 변수는 &lt;code&gt;FILE&lt;/code&gt; 포인터 fp가 _base 필드 (또는 이에 상응하는)에 액세스하는 방법을 정의합니다.</target>
        </trans-unit>
        <trans-unit id="a59c1ad52202cc501b802875969a4dbaf153ecca" translate="yes" xml:space="preserve">
          <source>This variable defines how, given a &lt;code&gt;FILE&lt;/code&gt; pointer, fp, to access the _cnt field (or equivalent) of</source>
          <target state="translated">이 변수는 &lt;code&gt;FILE&lt;/code&gt; 포인터 fp가 _cnt 필드 (또는 이에 상응하는)에 액세스하는 방법을 정의합니다.</target>
        </trans-unit>
        <trans-unit id="6c724a8a49a90e3cbd913b9e7b087f4a6e00a051" translate="yes" xml:space="preserve">
          <source>This variable defines how, given a &lt;code&gt;FILE&lt;/code&gt; pointer, fp, to access the _ptr field (or equivalent) of</source>
          <target state="translated">이 변수는 &lt;code&gt;FILE&lt;/code&gt; 포인터 fp가 _ptr 필드 (또는 이에 상응하는)에 액세스하는 방법을 정의합니다.</target>
        </trans-unit>
        <trans-unit id="c93debd3e967483ff58eeea9c9d97721d631c8cd" translate="yes" xml:space="preserve">
          <source>This variable defines how, given a &lt;code&gt;FILE&lt;/code&gt; pointer, fp, to determine the number of bytes store in the I/O buffer pointer to by the _base field (or equivalent) of</source>
          <target state="translated">이 변수는 &lt;code&gt;FILE&lt;/code&gt; 포인터가 fp 인 경우 I / O 버퍼 포인터에 저장되는 바이트 수를 _base 필드 (또는 이에 상응하는)로 결정하는 방법을 정의합니다.</target>
        </trans-unit>
        <trans-unit id="e00a415cd2cf300853e1a23ddccb8780ee11f707" translate="yes" xml:space="preserve">
          <source>This variable defines how, given a &lt;code&gt;FILE&lt;/code&gt; pointer, fp, to tell stdio to refill its internal buffers (?). This will be used to define the macro FILE_filbuf(fp).</source>
          <target state="translated">이 변수는 &lt;code&gt;FILE&lt;/code&gt; 포인터 fp가 주어지면 stdio가 내부 버퍼를 다시 채우도록 하는 방법을 정의합니다 (?). 매크로 FILE_filbuf (fp)를 정의하는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="595afe5bb6e3f768b7da1ed296fa7c1643388437" translate="yes" xml:space="preserve">
          <source>This variable defines lseektype to be something like off_t, long, or whatever type is used to declare lseek offset's type in the kernel (which also appears to be lseek's return type).</source>
          <target state="translated">이 변수는 lseektype을 off_t, long 또는 커널에서 lseek 오프셋 유형을 선언하는 데 사용되는 모든 유형 (lseek의 리턴 유형으로 표시됨)으로 정의합니다.</target>
        </trans-unit>
        <trans-unit id="d97cebe8fae7c189d13c8f48c5b6ab8c4968f94c" translate="yes" xml:space="preserve">
          <source>This variable defines modetype to be something like mode_t, int, unsigned short, or whatever type is used to declare file modes for system calls.</source>
          <target state="translated">이 변수는 modetype을 mode_t, int, unsigned short 또는 시스템 호출의 파일 모드를 선언하는 데 사용되는 모든 유형으로 정의합니다.</target>
        </trans-unit>
        <trans-unit id="eb71f11d43d33a453603c76902f18199870e472e" translate="yes" xml:space="preserve">
          <source>This variable defines sizetype to be something like size_t, unsigned long, or whatever type is used to declare length parameters for string functions.</source>
          <target state="translated">이 변수는 sizetype을 size_t, unsigned long 또는 문자열 함수의 길이 매개 변수를 선언하는 데 사용되는 모든 유형으로 정의합니다.</target>
        </trans-unit>
        <trans-unit id="101baad5e9aec0534406a23db1b78f5a701bdcb7" translate="yes" xml:space="preserve">
          <source>This variable defines ssizetype to be something like ssize_t, long or int. It is used by functions that return a count of bytes or an error condition. It must be a signed type. We will pick a type such that sizeof(SSize_t) == sizeof(Size_t).</source>
          <target state="translated">이 변수는 ssizetype을 ssize_t, long 또는 int와 같은 것으로 정의합니다. 바이트 수 또는 오류 조건을 반환하는 함수에서 사용합니다. 서명 된 유형이어야합니다. sizeof (SSize_t) == sizeof (Size_t)와 같은 유형을 선택합니다.</target>
        </trans-unit>
        <trans-unit id="5ac7bf6f6a5f7759ef7065400de48a35b1e2cda3" translate="yes" xml:space="preserve">
          <source>This variable defines the &lt;code&gt;PERL_STATIC_INLINE&lt;/code&gt; symbol to the best-guess incantation to use for static inline functions. Possibilities include static inline (c99) static __inline__ (gcc -ansi) static __inline (&lt;code&gt;MSVC&lt;/code&gt; ) static _inline (older &lt;code&gt;MSVC&lt;/code&gt; ) static (c89 compilers)</source>
          <target state="translated">이 변수는 &lt;code&gt;PERL_STATIC_INLINE&lt;/code&gt; 기호를 정적 인라인 함수에 사용할 최상의 추측 수법으로 정의합니다 . 가능한 방법으로는 정적 인라인 (c99) 정적 __inline __ ( gcc -ansi) 정적 __inline ( &lt;code&gt;MSVC&lt;/code&gt; ) 정적 _inline (이전 &lt;code&gt;MSVC&lt;/code&gt; ) 정적 (c89 컴파일러)</target>
        </trans-unit>
        <trans-unit id="46927ca4ff59ab7c0f7008732e11d122f034e081" translate="yes" xml:space="preserve">
          <source>This variable defines the constant to use for creating joinable (aka undetached) pthreads. Unused if</source>
          <target state="translated">이 변수는 결합 가능한 (일명 분리되지 않은) pthread를 작성하는 데 사용할 상수를 정의합니다. 사용하지 않는 경우</target>
        </trans-unit>
        <trans-unit id="b42419fbc9e55f0808270c4c7af104fa3ecce8f8" translate="yes" xml:space="preserve">
          <source>This variable defines the extension used for executable files. &lt;code&gt;DJGPP&lt;/code&gt; , Cygwin and</source>
          <target state="translated">이 변수는 실행 파일에 사용되는 확장자를 정의합니다. &lt;code&gt;DJGPP&lt;/code&gt; , Cygwin 및</target>
        </trans-unit>
        <trans-unit id="d25c6cbfaff8128f7b7614c26b89ea706c48d482" translate="yes" xml:space="preserve">
          <source>This variable defines the extension used for object files. For unix, it is</source>
          <target state="translated">이 변수는 객체 파일에 사용되는 확장자를 정의합니다. 유닉스의 경우</target>
        </trans-unit>
        <trans-unit id="1cfcbaaed9abc9ba708cba78b72b275b12b6bb6f" translate="yes" xml:space="preserve">
          <source>This variable defines the extension used for ordinary library files. For unix, it is</source>
          <target state="translated">이 변수는 일반 라이브러리 파일에 사용되는 확장자를 정의합니다. 유닉스의 경우</target>
        </trans-unit>
        <trans-unit id="61e4d2e1a5792efdf2347a0450ea4e72d1eaabb6" translate="yes" xml:space="preserve">
          <source>This variable defines the first file searched by make. On unix, it is makefile (then Makefile). On case-insensitive systems, it might be something else. This is only used to deal with convoluted make depend tricks.</source>
          <target state="translated">이 변수는 make로 검색된 첫 번째 파일을 정의합니다. 유닉스에서는 makefile (Makefile)입니다. 대소 문자를 구분하지 않는 시스템에서는 다른 것일 수 있습니다. 이것은 복잡한 make 의존 트릭을 다루기 위해서만 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="461bd9a24654ff2c3751169e02550316cfa7f16d" translate="yes" xml:space="preserve">
          <source>This variable defines the maximum value of the time_t offset that the system function gmtime () accepts</source>
          <target state="translated">이 변수는 시스템 함수 gmtime ()이 허용하는 time_t 오프셋의 최대 값을 정의합니다.</target>
        </trans-unit>
        <trans-unit id="118dc8807136308ad6d8c3341362e12544dbaa96" translate="yes" xml:space="preserve">
          <source>This variable defines the maximum value of the time_t offset that the system function localtime () accepts</source>
          <target state="translated">이 변수는 시스템 함수 localtime ()이 허용하는 time_t 오프셋의 최대 값을 정의합니다.</target>
        </trans-unit>
        <trans-unit id="002244d8170673ab8dec24ecc11076d87eb7c135" translate="yes" xml:space="preserve">
          <source>This variable defines the minimum value of the time_t offset that the system function gmtime () accepts</source>
          <target state="translated">이 변수는 시스템 함수 gmtime ()이 허용하는 time_t 오프셋의 최소값을 정의합니다.</target>
        </trans-unit>
        <trans-unit id="b41d7ca0acff026630ae3eb3657b81d0f74cbc00" translate="yes" xml:space="preserve">
          <source>This variable defines the minimum value of the time_t offset that the system function localtime () accepts</source>
          <target state="translated">이 변수는 시스템 함수 localtime ()이 허용하는 time_t 오프셋의 최소값을 정의합니다.</target>
        </trans-unit>
        <trans-unit id="f7b9ed49ec2fca27b0c2fe0400522c8358098c4b" translate="yes" xml:space="preserve">
          <source>This variable defines the way to yield the execution of the current thread.</source>
          <target state="translated">이 변수는 현재 스레드를 실행하는 방법을 정의합니다.</target>
        </trans-unit>
        <trans-unit id="57f99c42c44eacf0044be559cbd9d8361928ec2b" translate="yes" xml:space="preserve">
          <source>This variable defines whether sprintf returns the length of the string (as per the &lt;code&gt;ANSI&lt;/code&gt; spec). Some C libraries retain compatibility with pre-&lt;code&gt;ANSI&lt;/code&gt; C and return a pointer to the passed in buffer; for these this variable will be undef.</source>
          <target state="translated">이 변수는 sprintf가 ( &lt;code&gt;ANSI&lt;/code&gt; 스펙에 따라) 문자열의 길이를 리턴하는지 여부를 정의합니다 . 일부 C 라이브러리는 &lt;code&gt;ANSI&lt;/code&gt; C 이전과의 호환성을 유지 하고 전달 된 버퍼에 대한 포인터를 반환합니다. 이러한 경우이 변수는 정의되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="5003973b1c55a943c2145dfca9fa05f0f4ce532c" translate="yes" xml:space="preserve">
          <source>This variable describes the &lt;code&gt;style&lt;/code&gt; of the perl installation. This is intended to be useful for tools that need to manipulate entire perl distributions. Perl itself doesn't use this to find its libraries -- the library directories are stored directly in</source>
          <target state="translated">이 변수 는 perl 설치 &lt;code&gt;style&lt;/code&gt; 을 설명 합니다. 이는 전체 펄 배포판을 조작해야하는 도구에 유용합니다. Perl 자체는 라이브러리를 찾기 위해 이것을 사용하지 않습니다. 라이브러리 디렉토리는</target>
        </trans-unit>
        <trans-unit id="567d29e4d961e48c885f35dbc475bb29eda4cd6f" translate="yes" xml:space="preserve">
          <source>This variable determines how many additional call frames are to be skipped that would not otherwise be when reporting where an error occurred on a call to one of &lt;code&gt;Carp&lt;/code&gt; 's functions. It is fairly easy to count these call frames on calls that generate a full stack backtrace. However it is much harder to do this accounting for calls that generate a short message. Usually people skip too many call frames. If they are lucky they skip enough that &lt;code&gt;Carp&lt;/code&gt; goes all of the way through the call stack, realizes that something is wrong, and then generates a full stack backtrace. If they are unlucky then the error is reported from somewhere misleading very high in the call stack.</source>
          <target state="translated">이 변수는 &lt;code&gt;Carp&lt;/code&gt; 의 함수 중 하나에 대한 호출에서 오류가 발생한 위치를보고 할 때 생략 할 추가 호출 프레임 수를 결정합니다 . 전체 스택 역 추적을 생성하는 호출에서 이러한 호출 프레임을 계산하는 것은 매우 쉽습니다. 그러나 짧은 메시지를 생성하는 통화에 대해서는이 계산을 수행하기가 훨씬 어렵습니다. 일반적으로 사람들은 너무 많은 통화 프레임을 건너 뜁니다. 운이 좋으면 &lt;code&gt;Carp&lt;/code&gt; 이 콜 스택을 완전히 통과하고 무언가 잘못되었음을 인식 한 다음 전체 스택 역 추적을 생성 할만큼 충분히 건너 뜁니다 . 운이 좋지 않으면 호출 스택에서 오해의 소지가있는 곳에서 오류가보고됩니다.</target>
        </trans-unit>
        <trans-unit id="997faf6374edf42d5e810894f080e0b56690a757" translate="yes" xml:space="preserve">
          <source>This variable determines how many arguments to each function to show. Use a value of &lt;code&gt;0&lt;/code&gt; to show all arguments to a function call.</source>
          <target state="translated">이 변수는 각 함수에 표시 할 인수 수를 결정합니다. 함수 호출에 대한 모든 인수를 표시 하려면 값 &lt;code&gt;0&lt;/code&gt; 을 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="4ed22a5320f680b267f097f8ff88f0b0c8170860" translate="yes" xml:space="preserve">
          <source>This variable determines how many characters of a string-eval are to be shown in the output. Use a value of &lt;code&gt;0&lt;/code&gt; to show all text.</source>
          <target state="translated">이 변수는 출력에 표시 할 문자열 평가 문자 수를 결정합니다. 모든 텍스트를 표시 하려면 값 &lt;code&gt;0&lt;/code&gt; 을 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="52d4b8eed6ae9311134a5ba11cf6525085261616" translate="yes" xml:space="preserve">
          <source>This variable determines how many characters of each argument to a function to print. Use a value of &lt;code&gt;0&lt;/code&gt; to show the full length of the argument.</source>
          <target state="translated">이 변수는 인쇄 할 함수에 대한 각 인수의 문자 수를 결정합니다. 인수의 전체 길이를 표시하려면 값 &lt;code&gt;0&lt;/code&gt; 을 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="77076b88649a056f417b113352e176bb16a344a3" translate="yes" xml:space="preserve">
          <source>This variable encodes the prototype of asctime_r. It is zero if d_asctime_r is undef, and one of the &lt;code&gt;REENTRANT_PROTO_T_ABC&lt;/code&gt; macros of</source>
          <target state="translated">이 변수는 asctime_r의 프로토 타입을 인코딩합니다. d_asctime_r이 중 하나 미확정이며, 경우는 0이다 &lt;code&gt;REENTRANT_PROTO_T_ABC&lt;/code&gt; 의 의 매크로</target>
        </trans-unit>
        <trans-unit id="de787ee4aff8e807719797f703d324a175fd91b3" translate="yes" xml:space="preserve">
          <source>This variable encodes the prototype of crypt_r. It is zero if d_crypt_r is undef, and one of the &lt;code&gt;REENTRANT_PROTO_T_ABC&lt;/code&gt; macros of</source>
          <target state="translated">이 변수는 crypt_r의 프로토 타입을 인코딩합니다. d_crypt_r이 중 하나 미확정이며, 경우는 0이다 &lt;code&gt;REENTRANT_PROTO_T_ABC&lt;/code&gt; 의 의 매크로</target>
        </trans-unit>
        <trans-unit id="0ae14801df7af6e6ac0db7bac4125e988d2b5e57" translate="yes" xml:space="preserve">
          <source>This variable encodes the prototype of ctermid_r. It is zero if d_ctermid_r is undef, and one of the &lt;code&gt;REENTRANT_PROTO_T_ABC&lt;/code&gt; macros of</source>
          <target state="translated">이 변수는 ctermid_r의 프로토 타입을 인코딩합니다. d_ctermid_r이 중 하나 미확정이며, 경우는 0이다 &lt;code&gt;REENTRANT_PROTO_T_ABC&lt;/code&gt; 의 의 매크로</target>
        </trans-unit>
        <trans-unit id="0805fc34063d828b12f62fd3f69ff44ea81048d0" translate="yes" xml:space="preserve">
          <source>This variable encodes the prototype of ctime_r. It is zero if d_ctime_r is undef, and one of the &lt;code&gt;REENTRANT_PROTO_T_ABC&lt;/code&gt; macros of</source>
          <target state="translated">이 변수는 ctime_r의 프로토 타입을 인코딩합니다. d_ctime_r이 중 하나 미확정이며, 경우는 0이다 &lt;code&gt;REENTRANT_PROTO_T_ABC&lt;/code&gt; 의 의 매크로</target>
        </trans-unit>
        <trans-unit id="702d4b4627f77054b8ab5df334f9cb4c5a8583c2" translate="yes" xml:space="preserve">
          <source>This variable encodes the prototype of drand48_r. It is zero if d_drand48_r is undef, and one of the &lt;code&gt;REENTRANT_PROTO_T_ABC&lt;/code&gt; macros of</source>
          <target state="translated">이 변수는 drand48_r의 프로토 타입을 인코딩합니다. d_drand48_r이 중 하나 미확정이며, 경우는 0이다 &lt;code&gt;REENTRANT_PROTO_T_ABC&lt;/code&gt; 의 의 매크로</target>
        </trans-unit>
        <trans-unit id="9cc29a76f000e331b538e9e41caa895d97dd93be" translate="yes" xml:space="preserve">
          <source>This variable encodes the prototype of endgrent_r. It is zero if d_endgrent_r is undef, and one of the &lt;code&gt;REENTRANT_PROTO_T_ABC&lt;/code&gt; macros of</source>
          <target state="translated">이 변수는 endgrent_r의 프로토 타입을 인코딩합니다. d_endgrent_r이 중 하나 미확정이며, 경우는 0이다 &lt;code&gt;REENTRANT_PROTO_T_ABC&lt;/code&gt; 의 의 매크로</target>
        </trans-unit>
        <trans-unit id="de1d199b08d6056cc88345595fa889018468cd32" translate="yes" xml:space="preserve">
          <source>This variable encodes the prototype of endhostent_r. It is zero if d_endhostent_r is undef, and one of the &lt;code&gt;REENTRANT_PROTO_T_ABC&lt;/code&gt; macros of</source>
          <target state="translated">이 변수는 endhostent_r의 프로토 타입을 인코딩합니다. d_endhostent_r이 중 하나 미확정이며, 경우는 0이다 &lt;code&gt;REENTRANT_PROTO_T_ABC&lt;/code&gt; 의 의 매크로</target>
        </trans-unit>
        <trans-unit id="ede3a995a2b3214faa1fe1274bba14bfea9d7364" translate="yes" xml:space="preserve">
          <source>This variable encodes the prototype of endnetent_r. It is zero if d_endnetent_r is undef, and one of the &lt;code&gt;REENTRANT_PROTO_T_ABC&lt;/code&gt; macros of</source>
          <target state="translated">이 변수는 endnetent_r의 프로토 타입을 인코딩합니다. d_endnetent_r이 중 하나 미확정이며, 경우는 0이다 &lt;code&gt;REENTRANT_PROTO_T_ABC&lt;/code&gt; 의 의 매크로</target>
        </trans-unit>
        <trans-unit id="b379a49ea21fce80c07d9827af82947e143a3285" translate="yes" xml:space="preserve">
          <source>This variable encodes the prototype of endprotoent_r. It is zero if d_endprotoent_r is undef, and one of the &lt;code&gt;REENTRANT_PROTO_T_ABC&lt;/code&gt; macros of</source>
          <target state="translated">이 변수는 endprotoent_r의 프로토 타입을 인코딩합니다. d_endprotoent_r이 중 하나 미확정이며, 경우는 0이다 &lt;code&gt;REENTRANT_PROTO_T_ABC&lt;/code&gt; 의 의 매크로</target>
        </trans-unit>
        <trans-unit id="7e733296d7417ef9b28980006c6890141c2bcc01" translate="yes" xml:space="preserve">
          <source>This variable encodes the prototype of endpwent_r. It is zero if d_endpwent_r is undef, and one of the &lt;code&gt;REENTRANT_PROTO_T_ABC&lt;/code&gt; macros of</source>
          <target state="translated">이 변수는 endpwent_r의 프로토 타입을 인코딩합니다. d_endpwent_r이 중 하나 미확정이며, 경우는 0이다 &lt;code&gt;REENTRANT_PROTO_T_ABC&lt;/code&gt; 의 의 매크로</target>
        </trans-unit>
        <trans-unit id="cd55bba0e23735327a9ebfafc95b9aaff20c4cb5" translate="yes" xml:space="preserve">
          <source>This variable encodes the prototype of endservent_r. It is zero if d_endservent_r is undef, and one of the &lt;code&gt;REENTRANT_PROTO_T_ABC&lt;/code&gt; macros of</source>
          <target state="translated">이 변수는 endservent_r의 프로토 타입을 인코딩합니다. d_endservent_r이 중 하나 미확정이며, 경우는 0이다 &lt;code&gt;REENTRANT_PROTO_T_ABC&lt;/code&gt; 의 의 매크로</target>
        </trans-unit>
        <trans-unit id="0de43fcc27cebc0d62fa7b534e1b44568f665cf1" translate="yes" xml:space="preserve">
          <source>This variable encodes the prototype of getgrent_r. It is zero if d_getgrent_r is undef, and one of the &lt;code&gt;REENTRANT_PROTO_T_ABC&lt;/code&gt; macros of</source>
          <target state="translated">이 변수는 getgrent_r의 프로토 타입을 인코딩합니다. d_getgrent_r이 중 하나 미확정이며, 경우는 0이다 &lt;code&gt;REENTRANT_PROTO_T_ABC&lt;/code&gt; 의 의 매크로</target>
        </trans-unit>
        <trans-unit id="75862579b5eb6edbd30ae05058f7cced72f32e60" translate="yes" xml:space="preserve">
          <source>This variable encodes the prototype of getgrgid_r. It is zero if d_getgrgid_r is undef, and one of the &lt;code&gt;REENTRANT_PROTO_T_ABC&lt;/code&gt; macros of</source>
          <target state="translated">이 변수는 getgrgid_r의 프로토 타입을 인코딩합니다. d_getgrgid_r이 중 하나 미확정이며, 경우는 0이다 &lt;code&gt;REENTRANT_PROTO_T_ABC&lt;/code&gt; 의 의 매크로</target>
        </trans-unit>
        <trans-unit id="d3328c284b1850cfc504973317f44e12ef299907" translate="yes" xml:space="preserve">
          <source>This variable encodes the prototype of getgrnam_r. It is zero if d_getgrnam_r is undef, and one of the &lt;code&gt;REENTRANT_PROTO_T_ABC&lt;/code&gt; macros of</source>
          <target state="translated">이 변수는 getgrnam_r의 프로토 타입을 인코딩합니다. d_getgrnam_r이 중 하나 미확정이며, 경우는 0이다 &lt;code&gt;REENTRANT_PROTO_T_ABC&lt;/code&gt; 의 의 매크로</target>
        </trans-unit>
        <trans-unit id="99b5c4a7729e662ed55030f64938c984d1047567" translate="yes" xml:space="preserve">
          <source>This variable encodes the prototype of gethostbyaddr_r. It is zero if d_gethostbyaddr_r is undef, and one of the &lt;code&gt;REENTRANT_PROTO_T_ABC&lt;/code&gt; macros of</source>
          <target state="translated">이 변수는 gethostbyaddr_r의 프로토 타입을 인코딩합니다. d_gethostbyaddr_r이 중 하나 미확정이며, 경우는 0이다 &lt;code&gt;REENTRANT_PROTO_T_ABC&lt;/code&gt; 의 의 매크로</target>
        </trans-unit>
        <trans-unit id="61a05020b439068ce997a4d6e6507d50660e1527" translate="yes" xml:space="preserve">
          <source>This variable encodes the prototype of gethostbyname_r. It is zero if d_gethostbyname_r is undef, and one of the &lt;code&gt;REENTRANT_PROTO_T_ABC&lt;/code&gt; macros of</source>
          <target state="translated">이 변수는 gethostbyname_r의 프로토 타입을 인코딩합니다. d_gethostbyname_r이 중 하나 미확정이며, 경우는 0이다 &lt;code&gt;REENTRANT_PROTO_T_ABC&lt;/code&gt; 의 의 매크로</target>
        </trans-unit>
        <trans-unit id="5cfad2b24c69d1a2165ac84d5c4c42b582eb4f29" translate="yes" xml:space="preserve">
          <source>This variable encodes the prototype of gethostent_r. It is zero if d_gethostent_r is undef, and one of the &lt;code&gt;REENTRANT_PROTO_T_ABC&lt;/code&gt; macros of</source>
          <target state="translated">이 변수는 gethostent_r의 프로토 타입을 인코딩합니다. d_gethostent_r이 중 하나 미확정이며, 경우는 0이다 &lt;code&gt;REENTRANT_PROTO_T_ABC&lt;/code&gt; 의 의 매크로</target>
        </trans-unit>
        <trans-unit id="17e46936472129bbd3e4ad1775d12b7553e0f162" translate="yes" xml:space="preserve">
          <source>This variable encodes the prototype of getlogin_r. It is zero if d_getlogin_r is undef, and one of the &lt;code&gt;REENTRANT_PROTO_T_ABC&lt;/code&gt; macros of</source>
          <target state="translated">이 변수는 getlogin_r의 프로토 타입을 인코딩합니다. d_getlogin_r이 중 하나 미확정이며, 경우는 0이다 &lt;code&gt;REENTRANT_PROTO_T_ABC&lt;/code&gt; 의 의 매크로</target>
        </trans-unit>
        <trans-unit id="ac36667369ef9364808f90ec1d2987b05ae37198" translate="yes" xml:space="preserve">
          <source>This variable encodes the prototype of getnetbyaddr_r. It is zero if d_getnetbyaddr_r is undef, and one of the &lt;code&gt;REENTRANT_PROTO_T_ABC&lt;/code&gt; macros of</source>
          <target state="translated">이 변수는 getnetbyaddr_r의 프로토 타입을 인코딩합니다. d_getnetbyaddr_r이 중 하나 미확정이며, 경우는 0이다 &lt;code&gt;REENTRANT_PROTO_T_ABC&lt;/code&gt; 의 의 매크로</target>
        </trans-unit>
        <trans-unit id="bb812b9537bfde1e8fcef630220446a5c3b49a32" translate="yes" xml:space="preserve">
          <source>This variable encodes the prototype of getnetbyname_r. It is zero if d_getnetbyname_r is undef, and one of the &lt;code&gt;REENTRANT_PROTO_T_ABC&lt;/code&gt; macros of</source>
          <target state="translated">이 변수는 getnetbyname_r의 프로토 타입을 인코딩합니다. d_getnetbyname_r이 중 하나 미확정이며, 경우는 0이다 &lt;code&gt;REENTRANT_PROTO_T_ABC&lt;/code&gt; 의 의 매크로</target>
        </trans-unit>
        <trans-unit id="bc3215cb0ef1e5500893aea4c1dab114f1c1846d" translate="yes" xml:space="preserve">
          <source>This variable encodes the prototype of getnetent_r. It is zero if d_getnetent_r is undef, and one of the &lt;code&gt;REENTRANT_PROTO_T_ABC&lt;/code&gt; macros of</source>
          <target state="translated">이 변수는 getnetent_r의 프로토 타입을 인코딩합니다. d_getnetent_r이 중 하나 미확정이며, 경우는 0이다 &lt;code&gt;REENTRANT_PROTO_T_ABC&lt;/code&gt; 의 의 매크로</target>
        </trans-unit>
        <trans-unit id="d220800ac1a2663e875a7dcc5e7dd64ac85ae4e9" translate="yes" xml:space="preserve">
          <source>This variable encodes the prototype of getprotobyname_r. It is zero if d_getprotobyname_r is undef, and one of the &lt;code&gt;REENTRANT_PROTO_T_ABC&lt;/code&gt; macros of</source>
          <target state="translated">이 변수는 getprotobyname_r의 프로토 타입을 인코딩합니다. d_getprotobyname_r이 중 하나 미확정이며, 경우는 0이다 &lt;code&gt;REENTRANT_PROTO_T_ABC&lt;/code&gt; 의 의 매크로</target>
        </trans-unit>
        <trans-unit id="cec3a44a5250aeda0ba0198647b3e28f5aee002c" translate="yes" xml:space="preserve">
          <source>This variable encodes the prototype of getprotobynumber_r. It is zero if d_getprotobynumber_r is undef, and one of the &lt;code&gt;REENTRANT_PROTO_T_ABC&lt;/code&gt; macros of</source>
          <target state="translated">이 변수는 getprotobynumber_r의 프로토 타입을 인코딩합니다. d_getprotobynumber_r이 중 하나 미확정이며, 경우는 0이다 &lt;code&gt;REENTRANT_PROTO_T_ABC&lt;/code&gt; 의 의 매크로</target>
        </trans-unit>
        <trans-unit id="fbb38274bc261fdcec5355c97b238c09bfd982ce" translate="yes" xml:space="preserve">
          <source>This variable encodes the prototype of getprotoent_r. It is zero if d_getprotoent_r is undef, and one of the &lt;code&gt;REENTRANT_PROTO_T_ABC&lt;/code&gt; macros of</source>
          <target state="translated">이 변수는 getprotoent_r의 프로토 타입을 인코딩합니다. d_getprotoent_r이 중 하나 미확정이며, 경우는 0이다 &lt;code&gt;REENTRANT_PROTO_T_ABC&lt;/code&gt; 의 의 매크로</target>
        </trans-unit>
        <trans-unit id="bb1ce88c17c834c27c1e2d0cb4116a5b720cbc03" translate="yes" xml:space="preserve">
          <source>This variable encodes the prototype of getpwent_r. It is zero if d_getpwent_r is undef, and one of the &lt;code&gt;REENTRANT_PROTO_T_ABC&lt;/code&gt; macros of</source>
          <target state="translated">이 변수는 getpwent_r의 프로토 타입을 인코딩합니다. d_getpwent_r이 중 하나 미확정이며, 경우는 0이다 &lt;code&gt;REENTRANT_PROTO_T_ABC&lt;/code&gt; 의 의 매크로</target>
        </trans-unit>
        <trans-unit id="cac9a0afc263ab4adae659a32c58331c9c65ff64" translate="yes" xml:space="preserve">
          <source>This variable encodes the prototype of getpwnam_r. It is zero if d_getpwnam_r is undef, and one of the &lt;code&gt;REENTRANT_PROTO_T_ABC&lt;/code&gt; macros of</source>
          <target state="translated">이 변수는 getpwnam_r의 프로토 타입을 인코딩합니다. d_getpwnam_r이 중 하나 미확정이며, 경우는 0이다 &lt;code&gt;REENTRANT_PROTO_T_ABC&lt;/code&gt; 의 의 매크로</target>
        </trans-unit>
        <trans-unit id="7fa93e2cb1e68516ffadfdeec198d26d2d7ffa68" translate="yes" xml:space="preserve">
          <source>This variable encodes the prototype of getpwuid_r. It is zero if d_getpwuid_r is undef, and one of the &lt;code&gt;REENTRANT_PROTO_T_ABC&lt;/code&gt; macros of</source>
          <target state="translated">이 변수는 getpwuid_r의 프로토 타입을 인코딩합니다. d_getpwuid_r이 중 하나 미확정이며, 경우는 0이다 &lt;code&gt;REENTRANT_PROTO_T_ABC&lt;/code&gt; 의 의 매크로</target>
        </trans-unit>
        <trans-unit id="1397056679cf94b1aa8274eed81b107a65915c02" translate="yes" xml:space="preserve">
          <source>This variable encodes the prototype of getservbyname_r. It is zero if d_getservbyname_r is undef, and one of the &lt;code&gt;REENTRANT_PROTO_T_ABC&lt;/code&gt; macros of</source>
          <target state="translated">이 변수는 getservbyname_r의 프로토 타입을 인코딩합니다. d_getservbyname_r이 중 하나 미확정이며, 경우는 0이다 &lt;code&gt;REENTRANT_PROTO_T_ABC&lt;/code&gt; 의 의 매크로</target>
        </trans-unit>
        <trans-unit id="e90daf53790ef74b86e1f2def419b1f4193d3aa0" translate="yes" xml:space="preserve">
          <source>This variable encodes the prototype of getservbyport_r. It is zero if d_getservbyport_r is undef, and one of the &lt;code&gt;REENTRANT_PROTO_T_ABC&lt;/code&gt; macros of</source>
          <target state="translated">이 변수는 getservbyport_r의 프로토 타입을 인코딩합니다. d_getservbyport_r이 중 하나 미확정이며, 경우는 0이다 &lt;code&gt;REENTRANT_PROTO_T_ABC&lt;/code&gt; 의 의 매크로</target>
        </trans-unit>
        <trans-unit id="56c3e77b49073a73727b4e6b83e8aadf3e2cee65" translate="yes" xml:space="preserve">
          <source>This variable encodes the prototype of getservent_r. It is zero if d_getservent_r is undef, and one of the &lt;code&gt;REENTRANT_PROTO_T_ABC&lt;/code&gt; macros of</source>
          <target state="translated">이 변수는 getservent_r의 프로토 타입을 인코딩합니다. d_getservent_r이 중 하나 미확정이며, 경우는 0이다 &lt;code&gt;REENTRANT_PROTO_T_ABC&lt;/code&gt; 의 의 매크로</target>
        </trans-unit>
        <trans-unit id="fe216b5546f8c82d765de160338a319beb2ced0f" translate="yes" xml:space="preserve">
          <source>This variable encodes the prototype of getspnam_r. It is zero if d_getspnam_r is undef, and one of the &lt;code&gt;REENTRANT_PROTO_T_ABC&lt;/code&gt; macros of</source>
          <target state="translated">이 변수는 getspnam_r의 프로토 타입을 인코딩합니다. d_getspnam_r이 중 하나 미확정이며, 경우는 0이다 &lt;code&gt;REENTRANT_PROTO_T_ABC&lt;/code&gt; 의 의 매크로</target>
        </trans-unit>
        <trans-unit id="75284163ca383200ec5b71f5946854cc96f04875" translate="yes" xml:space="preserve">
          <source>This variable encodes the prototype of gmtime_r. It is zero if d_gmtime_r is undef, and one of the &lt;code&gt;REENTRANT_PROTO_T_ABC&lt;/code&gt; macros of</source>
          <target state="translated">이 변수는 gmtime_r의 프로토 타입을 인코딩합니다. d_gmtime_r이 중 하나 미확정이며, 경우는 0이다 &lt;code&gt;REENTRANT_PROTO_T_ABC&lt;/code&gt; 의 의 매크로</target>
        </trans-unit>
        <trans-unit id="4fc46c6d7a2f4353984026d6f4b4efcea6f57571" translate="yes" xml:space="preserve">
          <source>This variable encodes the prototype of localtime_r. It is zero if d_localtime_r is undef, and one of the &lt;code&gt;REENTRANT_PROTO_T_ABC&lt;/code&gt; macros of</source>
          <target state="translated">이 변수는 localtime_r의 프로토 타입을 인코딩합니다. d_localtime_r이 중 하나 미확정이며, 경우는 0이다 &lt;code&gt;REENTRANT_PROTO_T_ABC&lt;/code&gt; 의 의 매크로</target>
        </trans-unit>
        <trans-unit id="ecf69c1eec26472056e4dd4b880462f0a7febb4d" translate="yes" xml:space="preserve">
          <source>This variable encodes the prototype of random_r. It is zero if d_random_r is undef, and one of the &lt;code&gt;REENTRANT_PROTO_T_ABC&lt;/code&gt; macros of</source>
          <target state="translated">이 변수는 random_r의 프로토 타입을 인코딩합니다. d_random_r이 중 하나 미확정이며, 경우는 0이다 &lt;code&gt;REENTRANT_PROTO_T_ABC&lt;/code&gt; 의 의 매크로</target>
        </trans-unit>
        <trans-unit id="53c2a31de4b469208fdd1bc6957b7349423c1cc9" translate="yes" xml:space="preserve">
          <source>This variable encodes the prototype of readdir64_r. It is zero if d_readdir64_r is undef, and one of the &lt;code&gt;REENTRANT_PROTO_T_ABC&lt;/code&gt; macros of</source>
          <target state="translated">이 변수는 readdir64_r의 프로토 타입을 인코딩합니다. d_readdir64_r이 중 하나 미확정이며, 경우는 0이다 &lt;code&gt;REENTRANT_PROTO_T_ABC&lt;/code&gt; 의 의 매크로</target>
        </trans-unit>
        <trans-unit id="55a22491bdf92d7db2f6bc8ae7f5dd00d7dfa228" translate="yes" xml:space="preserve">
          <source>This variable encodes the prototype of readdir_r. It is zero if d_readdir_r is undef, and one of the &lt;code&gt;REENTRANT_PROTO_T_ABC&lt;/code&gt; macros of</source>
          <target state="translated">이 변수는 readdir_r의 프로토 타입을 인코딩합니다. d_readdir_r이 중 하나 미확정이며, 경우는 0이다 &lt;code&gt;REENTRANT_PROTO_T_ABC&lt;/code&gt; 의 의 매크로</target>
        </trans-unit>
        <trans-unit id="9c27a4dd90ee7695513b1d454b420fb2b813936b" translate="yes" xml:space="preserve">
          <source>This variable encodes the prototype of setgrent_r. It is zero if d_setgrent_r is undef, and one of the &lt;code&gt;REENTRANT_PROTO_T_ABC&lt;/code&gt; macros of</source>
          <target state="translated">이 변수는 setgrent_r의 프로토 타입을 인코딩합니다. d_setgrent_r이 중 하나 미확정이며, 경우는 0이다 &lt;code&gt;REENTRANT_PROTO_T_ABC&lt;/code&gt; 의 의 매크로</target>
        </trans-unit>
        <trans-unit id="ed4de308a2fc22b806c4279d3f2ee1518c03079b" translate="yes" xml:space="preserve">
          <source>This variable encodes the prototype of sethostent_r. It is zero if d_sethostent_r is undef, and one of the &lt;code&gt;REENTRANT_PROTO_T_ABC&lt;/code&gt; macros of</source>
          <target state="translated">이 변수는 sethostent_r의 프로토 타입을 인코딩합니다. d_sethostent_r이 중 하나 미확정이며, 경우는 0이다 &lt;code&gt;REENTRANT_PROTO_T_ABC&lt;/code&gt; 의 의 매크로</target>
        </trans-unit>
        <trans-unit id="55e3159962fbec7696dfbf5921274442d357dc46" translate="yes" xml:space="preserve">
          <source>This variable encodes the prototype of setlocale_r. It is zero if d_setlocale_r is undef, and one of the &lt;code&gt;REENTRANT_PROTO_T_ABC&lt;/code&gt; macros of</source>
          <target state="translated">이 변수는 setlocale_r의 프로토 타입을 인코딩합니다. d_setlocale_r이 중 하나 미확정이며, 경우는 0이다 &lt;code&gt;REENTRANT_PROTO_T_ABC&lt;/code&gt; 의 의 매크로</target>
        </trans-unit>
        <trans-unit id="a237071191ca78ffa0aceca32e9a6a6a9cd732a5" translate="yes" xml:space="preserve">
          <source>This variable encodes the prototype of setnetent_r. It is zero if d_setnetent_r is undef, and one of the &lt;code&gt;REENTRANT_PROTO_T_ABC&lt;/code&gt; macros of</source>
          <target state="translated">이 변수는 setnetent_r의 프로토 타입을 인코딩합니다. d_setnetent_r이 중 하나 미확정이며, 경우는 0이다 &lt;code&gt;REENTRANT_PROTO_T_ABC&lt;/code&gt; 의 의 매크로</target>
        </trans-unit>
        <trans-unit id="3c102ae2f4bb19143cfc0440ca6633947562fb3a" translate="yes" xml:space="preserve">
          <source>This variable encodes the prototype of setprotoent_r. It is zero if d_setprotoent_r is undef, and one of the &lt;code&gt;REENTRANT_PROTO_T_ABC&lt;/code&gt; macros of</source>
          <target state="translated">이 변수는 setprotoent_r의 프로토 타입을 인코딩합니다. d_setprotoent_r이 중 하나 미확정이며, 경우는 0이다 &lt;code&gt;REENTRANT_PROTO_T_ABC&lt;/code&gt; 의 의 매크로</target>
        </trans-unit>
        <trans-unit id="3b5a6fbff52ee8a94448fb77aa9a579793aff7d0" translate="yes" xml:space="preserve">
          <source>This variable encodes the prototype of setpwent_r. It is zero if d_setpwent_r is undef, and one of the &lt;code&gt;REENTRANT_PROTO_T_ABC&lt;/code&gt; macros of</source>
          <target state="translated">이 변수는 setpwent_r의 프로토 타입을 인코딩합니다. d_setpwent_r이 중 하나 미확정이며, 경우는 0이다 &lt;code&gt;REENTRANT_PROTO_T_ABC&lt;/code&gt; 의 의 매크로</target>
        </trans-unit>
        <trans-unit id="66ca6e75602958c11d93157db62827e9aded10f9" translate="yes" xml:space="preserve">
          <source>This variable encodes the prototype of setservent_r. It is zero if d_setservent_r is undef, and one of the &lt;code&gt;REENTRANT_PROTO_T_ABC&lt;/code&gt; macros of</source>
          <target state="translated">이 변수는 setservent_r의 프로토 타입을 인코딩합니다. d_setservent_r이 중 하나 미확정이며, 경우는 0이다 &lt;code&gt;REENTRANT_PROTO_T_ABC&lt;/code&gt; 의 의 매크로</target>
        </trans-unit>
        <trans-unit id="723b3dc7f826374a55564f74aeae7c6269954e3b" translate="yes" xml:space="preserve">
          <source>This variable encodes the prototype of srand48_r. It is zero if d_srand48_r is undef, and one of the &lt;code&gt;REENTRANT_PROTO_T_ABC&lt;/code&gt; macros of</source>
          <target state="translated">이 변수는 srand48_r의 프로토 타입을 인코딩합니다. d_srand48_r이 중 하나 미확정이며, 경우는 0이다 &lt;code&gt;REENTRANT_PROTO_T_ABC&lt;/code&gt; 의 의 매크로</target>
        </trans-unit>
        <trans-unit id="bd7d67d3f9c1284961f6d9d35f6f33d6f58fbfe4" translate="yes" xml:space="preserve">
          <source>This variable encodes the prototype of srandom_r. It is zero if d_srandom_r is undef, and one of the &lt;code&gt;REENTRANT_PROTO_T_ABC&lt;/code&gt; macros of</source>
          <target state="translated">이 변수는 srandom_r의 프로토 타입을 인코딩합니다. d_srandom_r이 중 하나 미확정이며, 경우는 0이다 &lt;code&gt;REENTRANT_PROTO_T_ABC&lt;/code&gt; 의 의 매크로</target>
        </trans-unit>
        <trans-unit id="374862131b4a81d40f6aae4b04b7d2e7909432a3" translate="yes" xml:space="preserve">
          <source>This variable encodes the prototype of strerror_r. It is zero if d_strerror_r is undef, and one of the &lt;code&gt;REENTRANT_PROTO_T_ABC&lt;/code&gt; macros of</source>
          <target state="translated">이 변수는 strerror_r의 프로토 타입을 인코딩합니다. d_strerror_r이 중 하나 미확정이며, 경우는 0이다 &lt;code&gt;REENTRANT_PROTO_T_ABC&lt;/code&gt; 의 의 매크로</target>
        </trans-unit>
        <trans-unit id="808ce759358ec66389650a0f02059e528dfc9a21" translate="yes" xml:space="preserve">
          <source>This variable encodes the prototype of tmpnam_r. It is zero if d_tmpnam_r is undef, and one of the &lt;code&gt;REENTRANT_PROTO_T_ABC&lt;/code&gt; macros of</source>
          <target state="translated">이 변수는 tmpnam_r의 프로토 타입을 인코딩합니다. d_tmpnam_r이 중 하나 미확정이며, 경우는 0이다 &lt;code&gt;REENTRANT_PROTO_T_ABC&lt;/code&gt; 의 의 매크로</target>
        </trans-unit>
        <trans-unit id="2fbf36e39ded2b8e6c78fbcfa5544ba7ca7b014c" translate="yes" xml:space="preserve">
          <source>This variable encodes the prototype of ttyname_r. It is zero if d_ttyname_r is undef, and one of the &lt;code&gt;REENTRANT_PROTO_T_ABC&lt;/code&gt; macros of</source>
          <target state="translated">이 변수는 ttyname_r의 프로토 타입을 인코딩합니다. d_ttyname_r이 중 하나 미확정이며, 경우는 0이다 &lt;code&gt;REENTRANT_PROTO_T_ABC&lt;/code&gt; 의 의 매크로</target>
        </trans-unit>
        <trans-unit id="74e469970e1ce91386a2146482d3d7a642baa309" translate="yes" xml:space="preserve">
          <source>This variable first appeared in perl v5.6.0; earlier versions of perl will see an undefined value. Before perl v5.10.0 &lt;code&gt;$^V&lt;/code&gt; was represented as a v-string rather than a &lt;a href=&quot;version&quot;&gt;version&lt;/a&gt; object.</source>
          <target state="translated">이 변수는 perl v5.6.0에서 처음 나타났습니다. 이전 버전의 perl에는 정의되지 않은 값이 표시됩니다. perl v5.10.0 이전에는 &lt;code&gt;$^V&lt;/code&gt; 가 &lt;a href=&quot;version&quot;&gt;버전&lt;/a&gt; 오브젝트가 아닌 v- 문자열로 표시되었습니다 .</target>
        </trans-unit>
        <trans-unit id="19584564e558acab878c1e03d9ea77a749d30b2e" translate="yes" xml:space="preserve">
          <source>This variable gives the largest integer value that NVs can hold as a constant floating point expression. If it could not be determined, it holds the value 0.</source>
          <target state="translated">이 변수는 NV가 상수 부동 소수점 표현식으로 보유 할 수있는 가장 큰 정수 값을 제공합니다. 판별 할 수 없으면 값 0을 보유합니다.</target>
        </trans-unit>
        <trans-unit id="aa260934e72ed375b13d409d34b7b8cae7563c50" translate="yes" xml:space="preserve">
          <source>This variable has any cpp &lt;code&gt;-I&lt;/code&gt; flags needed for socket support.</source>
          <target state="translated">이 변수에는 소켓 지원에 필요한 cpp &lt;code&gt;-I&lt;/code&gt; 플래그가 있습니다.</target>
        </trans-unit>
        <trans-unit id="16b31013a54b92bb850553d166694d8d4b830687" translate="yes" xml:space="preserve">
          <source>This variable has the names of any libraries needed for socket support.</source>
          <target state="translated">이 변수는 소켓 지원에 필요한 라이브러리 이름을 갖습니다.</target>
        </trans-unit>
        <trans-unit id="770c2c93752302b9c1d357199ea8c5d632cd9b17" translate="yes" xml:space="preserve">
          <source>This variable has the same functionality as cppminus, only it applies to cpprun and not cppstdin.</source>
          <target state="translated">이 변수는 cppminus와 기능이 동일하며 cppstdin이 아닌 cpprun에만 적용됩니다.</target>
        </trans-unit>
        <trans-unit id="2d53502c7fa0dc256b2f29066de84e8dade39388" translate="yes" xml:space="preserve">
          <source>This variable holds -lcrypt or the path to a</source>
          <target state="translated">이 변수에는 -lcrypt 또는</target>
        </trans-unit>
        <trans-unit id="569a9104a53bc335c6f288cd33ea306d407d25d7" translate="yes" xml:space="preserve">
          <source>This variable holds a boolean indicating if we currently have &lt;code&gt;IO::String&lt;/code&gt; support loaded. This will be enabled for any perl that has a loadable &lt;code&gt;IO::String&lt;/code&gt; module.</source>
          <target state="translated">이 변수에는 현재 &lt;code&gt;IO::String&lt;/code&gt; 지원이로드되어 있는지 여부를 나타내는 부울 값이 있습니다 . 로드 가능한 &lt;code&gt;IO::String&lt;/code&gt; 모듈 이있는 모든 perl에 대해 활성화됩니다 .</target>
        </trans-unit>
        <trans-unit id="c9d62ed61b805febfda03e2e33c314276369d903" translate="yes" xml:space="preserve">
          <source>This variable holds a boolean indicating if we currently have &lt;code&gt;perlio&lt;/code&gt; support loaded. This will be enabled for any perl greater than &lt;code&gt;5.8&lt;/code&gt; compiled with &lt;code&gt;perlio&lt;/code&gt; .</source>
          <target state="translated">이 변수에는 현재 &lt;code&gt;perlio&lt;/code&gt; 지원이로드되어 있는지 여부를 나타내는 부울 값이 있습니다 . 이것은 &lt;code&gt;perlio&lt;/code&gt; 로 컴파일 된 &lt;code&gt;5.8&lt;/code&gt; 보다 큰 모든 perl에 대해 활성화됩니다 .</target>
        </trans-unit>
        <trans-unit id="a16823268f739e59a6193e58e6bea531b1dbabf8" translate="yes" xml:space="preserve">
          <source>This variable holds a boolean indicating if we will create zero padded numbers for &lt;code&gt;size&lt;/code&gt; , &lt;code&gt;mtime&lt;/code&gt; and &lt;code&gt;checksum&lt;/code&gt; . The default is &lt;code&gt;0&lt;/code&gt; , indicating that we will create space padded numbers. Added for compatibility with &lt;code&gt;busybox&lt;/code&gt; implementations.</source>
          <target state="translated">이 변수는 &lt;code&gt;size&lt;/code&gt; , &lt;code&gt;mtime&lt;/code&gt; 및 &lt;code&gt;checksum&lt;/code&gt; 에 대해 0으로 채워진 숫자를 만들지 여부를 나타내는 부울을 보유 합니다 . 기본값은 &lt;code&gt;0&lt;/code&gt; 이며 공백으로 채워진 숫자를 만들 것임을 나타냅니다. &lt;code&gt;busybox&lt;/code&gt; 구현 과의 호환성을 위해 추가되었습니다 .</target>
        </trans-unit>
        <trans-unit id="dcaa3eace57327111f674ce275307423813fd054" translate="yes" xml:space="preserve">
          <source>This variable holds a list of &lt;code&gt;XS&lt;/code&gt; extension files we want to link dynamically into the package. It is used by Makefile.</source>
          <target state="translated">이 변수에는 패키지에 동적으로 연결하려는 &lt;code&gt;XS&lt;/code&gt; 확장 파일 목록이 있습니다. Makefile에서 사용합니다.</target>
        </trans-unit>
        <trans-unit id="02c4fc4c9c6ca19a63491a02da2cec84150c6cbe" translate="yes" xml:space="preserve">
          <source>This variable holds a list of &lt;code&gt;XS&lt;/code&gt; extension files we want to link statically into the package. It is used by Makefile.</source>
          <target state="translated">이 변수에는 패키지에 정적으로 연결하려는 &lt;code&gt;XS&lt;/code&gt; 확장 파일 목록이 있습니다. Makefile에서 사용합니다.</target>
        </trans-unit>
        <trans-unit id="ae6a8cf68ce9d86bbf3e6bf16d7b19b3a825347a" translate="yes" xml:space="preserve">
          <source>This variable holds a list of all extension files (both &lt;code&gt;XS&lt;/code&gt; and non-xs) installed with the package. It is propagated to</source>
          <target state="translated">이 변수는 패키지와 함께 설치된 모든 확장 파일 ( &lt;code&gt;XS&lt;/code&gt; 및 비 x) 파일 목록을 보유 합니다. 전파된다</target>
        </trans-unit>
        <trans-unit id="45f9db0c3707e47edf13f37f57cabf1b6bf90b2f" translate="yes" xml:space="preserve">
          <source>This variable holds a list of all extensions (both &lt;code&gt;XS&lt;/code&gt; and non-xs) included in the package source distribution. This information is only really of use during the Perl build, as the list makes no distinction between extensions which were build and installed, and those which where not. See &lt;code&gt;extensions&lt;/code&gt; for the list of extensions actually built and available.</source>
          <target state="translated">이 변수는 패키지 소스 배포에 포함 된 모든 확장 ( &lt;code&gt;XS&lt;/code&gt; 및 비 X 모두) 목록을 보유합니다 . 이 정보는 Perl 빌드 중에 만 사용됩니다. 목록은 빌드 및 설치된 확장과 그렇지 않은 확장을 구분하지 않기 때문입니다. 실제로 빌드되고 사용 가능한 확장 목록은 &lt;code&gt;extensions&lt;/code&gt; 을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="ce91840da35a3602aef016ebb54df014ef7e13f8" translate="yes" xml:space="preserve">
          <source>This variable holds a list of all non-xs extensions built and installed by the package. By default, all non-xs extensions distributed will be built, with the exception of platform-specific extensions (currently only one &lt;code&gt;VMS&lt;/code&gt; specific extension).</source>
          <target state="translated">이 변수는 패키지가 빌드하고 설치 한 모든 비 xs 확장명 목록을 보유합니다. 기본적으로 플랫폼 별 확장 (현재는 하나의 &lt;code&gt;VMS&lt;/code&gt; 특정 확장)을 제외하고 분산 된 모든 비 xs 확장이 빌드됩니다 .</target>
        </trans-unit>
        <trans-unit id="9135bb6bf8982e929b7f9877ccb23fbe0c19466d" translate="yes" xml:space="preserve">
          <source>This variable holds a list of all the libraries we want to search. The order is chosen to pick up the c library ahead of ucb or bsd libraries for SVR4.</source>
          <target state="translated">이 변수에는 검색하려는 모든 라이브러리의 목록이 있습니다. 순서는 SVR4의 ucb 또는 bsd 라이브러리보다 먼저 c 라이브러리를 선택하도록 선택됩니다.</target>
        </trans-unit>
        <trans-unit id="479e1040c3432761a045df4f0da66a00f3f9a656" translate="yes" xml:space="preserve">
          <source>This variable holds a list of extra modules to install.</source>
          <target state="translated">이 변수에는 설치할 추가 모듈 목록이 있습니다.</target>
        </trans-unit>
        <trans-unit id="2439016b40bec1323d2673316d7a1a02f31fc9bb" translate="yes" xml:space="preserve">
          <source>This variable holds a number larger than the largest valid signal number. This is usually the same as the &lt;code&gt;NSIG&lt;/code&gt; macro.</source>
          <target state="translated">이 변수는 유효한 최대 신호 번호보다 큰 숫자를 보유합니다. 일반적으로 &lt;code&gt;NSIG&lt;/code&gt; 매크로 와 동일합니다 .</target>
        </trans-unit>
        <trans-unit id="0803fbf9d844442a0a7500553677d8e37aeb277f" translate="yes" xml:space="preserve">
          <source>This variable holds either &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt; to indicate whether the &lt;code&gt;POSIX&lt;/code&gt; extension should be used. The sole use for this currently is to allow an easy mechanism for hints files to indicate that &lt;code&gt;POSIX&lt;/code&gt; will not compile on a particular system.</source>
          <target state="translated">이 변수는 &lt;code&gt;true&lt;/code&gt; 또는 &lt;code&gt;false&lt;/code&gt; 를 유지 하여 &lt;code&gt;POSIX&lt;/code&gt; 확장을 사용해야하는지 여부를 나타냅니다 . 이것의 유일한 용도는 현재 힌트 파일을위한 쉬운 메커니즘으로 &lt;code&gt;POSIX&lt;/code&gt; 가 특정 시스템에서 컴파일되지 않음 을 표시하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="bd430aed4d74207b0887d90b980987612d48607b" translate="yes" xml:space="preserve">
          <source>This variable holds either &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt; to indicate whether the Opcode extension should be used. The sole use for this currently is to allow an easy mechanism for users to skip the Opcode extension from the Configure command line.</source>
          <target state="translated">이 변수는 &lt;code&gt;true&lt;/code&gt; 또는 &lt;code&gt;false&lt;/code&gt; 를 보유 하여 Opcode 확장을 사용해야하는지 여부를 나타냅니다. 현재 유일한 용도는 사용자가 Configure 명령 줄에서 Opcode 확장명을 쉽게 건너 뛸 수 있도록하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="1891cdf77349fdbe3913ff9b3046168dd9aa991e" translate="yes" xml:space="preserve">
          <source>This variable holds extra path (space-separated) used to find libraries on this platform, for example &lt;code&gt;CPU&lt;/code&gt; -specific libraries (on multi-&lt;code&gt;CPU&lt;/code&gt; platforms) may be listed here.</source>
          <target state="translated">이 변수는이 플랫폼에서 라이브러리를 찾는 데 사용되는 추가 경로 (공백으로 구분)를 보유합니다. 예를 들어 &lt;code&gt;CPU&lt;/code&gt; 특정 라이브러리 (멀티 &lt;code&gt;CPU&lt;/code&gt; 플랫폼)가 여기에 나열 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c92b53ab7496a25bcb89e5a3b7c7dca4f88276df" translate="yes" xml:space="preserve">
          <source>This variable holds the (possibly relative) path of the package source. It is up to the Makefile to use this variable and set &lt;code&gt;VPATH&lt;/code&gt; accordingly to find the sources remotely. Use $pkgsrc to have an absolute path.</source>
          <target state="translated">이 변수는 패키지 소스의 경로를 보유합니다. 이 변수를 사용하고 그에 따라 &lt;code&gt;VPATH&lt;/code&gt; 를 설정 하여 소스를 원격으로 찾는 것은 Makefile에 달려 있습니다. 절대 경로를 가지려면 $ pkgsrc를 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="26cd54e1caf2965ac6b4ab80d24f799e08ff4bf0" translate="yes" xml:space="preserve">
          <source>This variable holds the additional libraries we want to use. It is up to the Makefile to deal with it. The list can be empty.</source>
          <target state="translated">이 변수에는 사용하려는 추가 라이브러리가 있습니다. 그것을 처리하는 것은 Makefile에 달려 있습니다. 목록이 비어있을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d67bea02284d93c795ab19c14386365eeeba5dc1" translate="yes" xml:space="preserve">
          <source>This variable holds the architecture name computed by Configure in a previous run. It is not intended to be perused by any user and should never be set in a hint file.</source>
          <target state="translated">이 변수는 이전 실행에서 Configure에 의해 계산 된 아키텍처 이름을 보유합니다. 사용자가 사용하도록 의도 된 것이 아니며 힌트 파일에 설정해서는 안됩니다.</target>
        </trans-unit>
        <trans-unit id="f6009107700fe052e70e48ed0acdbb45bec8ad80" translate="yes" xml:space="preserve">
          <source>This variable holds the byte order in a &lt;code&gt;UV&lt;/code&gt; . In the following, larger digits indicate more significance. The variable byteorder is either 4321 on a big-endian machine, or 1234 on a little-endian, or 87654321 on a Cray ... or 3412 with weird order !</source>
          <target state="translated">이 변수는 &lt;code&gt;UV&lt;/code&gt; 에서 바이트 순서를 유지합니다 . 다음에서 숫자가 클수록 더 중요 함을 나타냅니다. 변수 바이트 순서는 빅 엔디안 머신에서 4321, 리틀 엔디안에서 1234 또는 Cray에서 87654321 또는 이상한 순서의 3412입니다!</target>
        </trans-unit>
        <trans-unit id="eb93a71d13ad751a95bfa1f121ddd7ed296dd475" translate="yes" xml:space="preserve">
          <source>This variable holds the command to do a grep with a proper return status. On most sane systems it is simply &lt;code&gt;&lt;a href=&quot;functions/grep&quot;&gt;grep&lt;/a&gt;&lt;/code&gt;. On insane systems it is a grep followed by a cat followed by a test. This variable is primarily for the use of other Configure units.</source>
          <target state="translated">이 변수는 적절한 리턴 상태로 grep을 수행하는 명령을 보유합니다. 대부분의 제정신 시스템에서는 단순히 &lt;code&gt;&lt;a href=&quot;functions/grep&quot;&gt;grep&lt;/a&gt;&lt;/code&gt; 입니다. 미친 시스템에서는 grep 다음에 cat 다음에 테스트를합니다. 이 변수는 주로 다른 구성 단위를 사용하기위한 것입니다.</target>
        </trans-unit>
        <trans-unit id="1a1edbf32f1571970fef4bbcc8ef5e7af09dffe9" translate="yes" xml:space="preserve">
          <source>This variable holds the directory names aka dirnames of the libraries we found and accepted, duplicates are removed.</source>
          <target state="translated">이 변수는 우리가 발견하고 받아 들인 라이브러리의 디렉토리 이름, 즉 중복 된 디렉토리를 제거합니다.</target>
        </trans-unit>
        <trans-unit id="2fbd69fb325167b36b276f4a0d8cb628f8150687" translate="yes" xml:space="preserve">
          <source>This variable holds the directory names probed for libraries.</source>
          <target state="translated">이 변수는 라이브러리에 대해 프로브 된 디렉토리 이름을 보유합니다.</target>
        </trans-unit>
        <trans-unit id="f9e3cbc6bc40988088c265c36d158522efc1915b" translate="yes" xml:space="preserve">
          <source>This variable holds the environment type for the mips system. Possible values are &quot;BSD 4.3&quot; and &quot;System V&quot;.</source>
          <target state="translated">이 변수는 밉스 시스템의 환경 유형을 보유합니다. 가능한 값은 &quot;BSD 4.3&quot;및 &quot;System V&quot;입니다.</target>
        </trans-unit>
        <trans-unit id="966d28971a8bfa0f32560d0dded91f151f931902" translate="yes" xml:space="preserve">
          <source>This variable holds the eventual value of &lt;code&gt;CAN_PROTOTYPE&lt;/code&gt; , which indicates the C compiler can handle function prototypes.</source>
          <target state="translated">이 변수는 C 컴파일러가 함수 프로토 타입을 처리 할 수 ​​있음을 나타내는 &lt;code&gt;CAN_PROTOTYPE&lt;/code&gt; 의 최종 값을 보유합니다 .</target>
        </trans-unit>
        <trans-unit id="79e4aa76daed7f43088806fdf47b70fc2dd3e0a4" translate="yes" xml:space="preserve">
          <source>This variable holds the extension used to identify shared libraries (also known as shared objects) on the system. Usually set to &lt;code&gt;so&lt;/code&gt; .</source>
          <target state="translated">이 변수는 시스템에서 공유 라이브러리 (공유 객체라고도 함)를 식별하는 데 사용되는 확장을 보유합니다. 일반적으로 &lt;code&gt;so&lt;/code&gt; 설정합니다 .</target>
        </trans-unit>
        <trans-unit id="58123ba08a4b3d6dbc11172b8356340c0359d485" translate="yes" xml:space="preserve">
          <source>This variable holds the filenames aka basenames of the libraries we found and accepted.</source>
          <target state="translated">이 변수는 파일 이름을 발견하고 승인 한 라이브러리의 기본 이름으로 유지합니다.</target>
        </trans-unit>
        <trans-unit id="92169ed5116f14968c6cb5953cc6f5a8657835cb" translate="yes" xml:space="preserve">
          <source>This variable holds the flags that will be passed to the C pre- processor. It is up to the Makefile to use it.</source>
          <target state="translated">이 변수는 C 프리 프로세서에 전달 될 플래그를 보유합니다. 그것을 사용하는 것은 Makefile에 달려 있습니다.</target>
        </trans-unit>
        <trans-unit id="707ad12994c63b69ae61542833a4ff764f7b872f" translate="yes" xml:space="preserve">
          <source>This variable holds the full absolute path of installprefix with all</source>
          <target state="translated">이 변수는 installprefix의 전체 절대 경로를 모두 보유합니다.</target>
        </trans-unit>
        <trans-unit id="a37b040263ffe00152d172f7c86428ab6ae7a7d8" translate="yes" xml:space="preserve">
          <source>This variable holds the full absolute path of the directory below which the user will install add-on packages. Derived from siteprefix.</source>
          <target state="translated">이 변수는 사용자가 애드온 패키지를 설치할 디렉토리의 전체 절대 경로를 보유합니다. siteprefix에서 파생됩니다.</target>
        </trans-unit>
        <trans-unit id="0e268743c69d5fc7b412bb8c6e9c822148c6d896" translate="yes" xml:space="preserve">
          <source>This variable holds the full absolute path of the directory below which the user will install add-on packages. See &lt;code&gt;INSTALL&lt;/code&gt; for usage and examples.</source>
          <target state="translated">이 변수는 사용자가 애드온 패키지를 설치할 디렉토리의 전체 절대 경로를 보유합니다. 사용법과 예제는 &lt;code&gt;INSTALL&lt;/code&gt; 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="fab6defbb66c0af1cc5db1f7d0cd8b6ff2d55586" translate="yes" xml:space="preserve">
          <source>This variable holds the full absolute path of the directory below which the user will install the package. Derived from prefix.</source>
          <target state="translated">이 변수는 사용자가 패키지를 설치할 디렉토리의 전체 절대 경로를 보유합니다. 접두사에서 파생됩니다.</target>
        </trans-unit>
        <trans-unit id="a52da8d161feedb6f9a0bd3e4ad9fe4daff334cd" translate="yes" xml:space="preserve">
          <source>This variable holds the full absolute path of the directory below which the vendor will install add-on packages. Derived from vendorprefix.</source>
          <target state="translated">이 변수는 공급 업체가 애드온 패키지를 설치할 디렉토리의 전체 절대 경로를 유지합니다. vendorprefix에서 파생되었습니다.</target>
        </trans-unit>
        <trans-unit id="31a14a36047ec40a20f6dc4ef464120eb79ee0b8" translate="yes" xml:space="preserve">
          <source>This variable holds the full absolute path of the directory below which the vendor will install add-on packages. See &lt;code&gt;INSTALL&lt;/code&gt; for usage and examples.</source>
          <target state="translated">이 변수는 공급 업체가 애드온 패키지를 설치할 디렉토리의 전체 절대 경로를 유지합니다. 사용법과 예제는 &lt;code&gt;INSTALL&lt;/code&gt; 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="a844e2cfcb71feea424cee7b20d6100141a5950f" translate="yes" xml:space="preserve">
          <source>This variable holds the full path of the included time header(s).</source>
          <target state="translated">이 변수는 포함 된 시간 헤더의 전체 경로를 보유합니다.</target>
        </trans-unit>
        <trans-unit id="ede7cf70c94577fee8891466bffe6dc75b5e0310" translate="yes" xml:space="preserve">
          <source>This variable holds the full path of the string header that will be used. Typically</source>
          <target state="translated">이 변수는 사용될 문자열 헤더의 전체 경로를 보유합니다. 일반적으로</target>
        </trans-unit>
        <trans-unit id="46f0b9cbc0d1240ea9ec0f560349fd12732bd780" translate="yes" xml:space="preserve">
          <source>This variable holds the full pathnames of the libraries we found and accepted.</source>
          <target state="translated">이 변수는 우리가 발견하고 받아 들인 라이브러리의 전체 경로 이름을 보유합니다.</target>
        </trans-unit>
        <trans-unit id="c1cbbb2dc59a4faacea882b16563852de611cb85" translate="yes" xml:space="preserve">
          <source>This variable holds the general path (space-separated) used to find libraries. It is intended to be used by other units.</source>
          <target state="translated">이 변수는 라이브러리를 찾는 데 사용되는 일반 경로 (공백으로 구분)를 보유합니다. 다른 장치에서 사용하도록 고안되었습니다.</target>
        </trans-unit>
        <trans-unit id="cbc0c3ebfc700cf900f98e2a667c88e64a8026f5" translate="yes" xml:space="preserve">
          <source>This variable holds the general path (space-separated) used to find libraries. It may contain directories that do not exist on this platform, libpth is the cleaned-up version.</source>
          <target state="translated">이 변수는 라이브러리를 찾는 데 사용되는 일반 경로 (공백으로 구분)를 보유합니다. 이 플랫폼에 존재하지 않는 디렉토리를 포함 할 수 있습니다. libpth는 정리 된 버전입니다.</target>
        </trans-unit>
        <trans-unit id="8e62e6eaaa1168c99e42038cf78b8b1380b9cde3" translate="yes" xml:space="preserve">
          <source>This variable holds the location of the dtrace executable.</source>
          <target state="translated">이 변수는 dtrace 실행 파일의 위치를 ​​유지합니다.</target>
        </trans-unit>
        <trans-unit id="76de82227b67efc7bf089d3d69a9968d2d88b26c" translate="yes" xml:space="preserve">
          <source>This variable holds the minimum number of bits operated by select. That is, if you do select(n, ...), how many bits at least will be cleared in the masks if some activity is detected. Usually this is either n or 32*ceil(</source>
          <target state="translated">이 변수는 select에 의해 작동되는 최소 비트 수를 유지합니다. 즉, select (n, ...)를 수행하면 일부 활동이 감지되면 마스크에서 최소한 몇 비트가 지워질 지 결정됩니다. 일반적으로 이것은 n 또는 32 * ceil (</target>
        </trans-unit>
        <trans-unit id="22f1730c886394cffcf4758150622d7e197c9315" translate="yes" xml:space="preserve">
          <source>This variable holds the name of a command to execute a C compiler which can resolve multiple global references that happen to have the same name. Usual values are &lt;code&gt;cc&lt;/code&gt; and &lt;code&gt;gcc&lt;/code&gt; . Fervent &lt;code&gt;ANSI&lt;/code&gt; compilers may be called &lt;code&gt;c89&lt;/code&gt; . &lt;code&gt;AIX&lt;/code&gt; has xlc.</source>
          <target state="translated">이 변수는 이름이 같은 여러 글로벌 참조를 해결할 수있는 C 컴파일러를 실행하기위한 명령 이름을 보유합니다. 일반적인 값은 &lt;code&gt;cc&lt;/code&gt; 및 &lt;code&gt;gcc&lt;/code&gt; 입니다. 완벽한 &lt;code&gt;ANSI&lt;/code&gt; 컴파일러는 &lt;code&gt;c89&lt;/code&gt; 라고 합니다. &lt;code&gt;AIX&lt;/code&gt; 에는 xlc가 있습니다.</target>
        </trans-unit>
        <trans-unit id="975ca3f70cd3a560b8d47cb79f7f5ae056d86c86" translate="yes" xml:space="preserve">
          <source>This variable holds the name of the command to make symbolic links (if they are supported). It can be used in the Makefile. It is either &lt;code&gt;ln -s&lt;/code&gt; or &lt;code&gt;ln&lt;/code&gt;</source>
          <target state="translated">이 변수는 지원되는 경우 기호 링크를 작성하기위한 명령 이름을 보유합니다. Makefile에서 사용할 수 있습니다. 이 중 하나입니다 &lt;code&gt;ln -s&lt;/code&gt; 또는 &lt;code&gt;ln&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b4e63c640916e4d45a393aa7ba953903e1015ee0" translate="yes" xml:space="preserve">
          <source>This variable holds the name of the compiler compiler we want to use in the Makefile. It can be yacc, byacc, or bison -y.</source>
          <target state="translated">이 변수에는 Makefile에서 사용하려는 컴파일러 컴파일러의 이름이 있습니다. yacc, byacc 또는 bison -y 일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="66ff1cc0edf423df08402bc955673a38bb21e390" translate="yes" xml:space="preserve">
          <source>This variable holds the name of the directory below which &quot;make install&quot; will install the package. For most users, this is the same as prefix. However, it is useful for installing the software into a different (usually temporary) location after which it can be bundled up and moved somehow to the final location specified by prefix.</source>
          <target state="translated">이 변수에는 &quot;make install&quot;이 패키지를 설치할 디렉토리의 이름이 있습니다. 대부분의 사용자에게 이것은 접두사와 동일합니다. 그러나 소프트웨어를 다른 (일반적으로 임시) 위치에 설치 한 후 번들로 묶어 접두사로 지정된 최종 위치로 이동할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b6b5f492c648b27c0e99f5e141ec5680c17598b0" translate="yes" xml:space="preserve">
          <source>This variable holds the name of the directory below which the user will install the package. Usually, this is</source>
          <target state="translated">이 변수는 사용자가 패키지를 설치할 디렉토리의 이름을 보유합니다. 보통 이것은</target>
        </trans-unit>
        <trans-unit id="ceeb3908532b2e3b64aa64212b74bbec369421e2" translate="yes" xml:space="preserve">
          <source>This variable holds the name of the directory in which the user wants to put add-on publicly executable files for the package in question. It is most often a local directory such as</source>
          <target state="translated">이 변수는 사용자가 해당 패키지에 대해 공개적으로 실행 가능한 애드온 파일을 넣고 자하는 디렉토리의 이름을 보유합니다. 가장 자주 다음과 같은 로컬 디렉토리입니다.</target>
        </trans-unit>
        <trans-unit id="d8a1f0d4666d11f921227b07ac31fce5006d5d88" translate="yes" xml:space="preserve">
          <source>This variable holds the name of the directory in which the user wants to put architecture-dependent public library files for $package. It is most often a local directory such as</source>
          <target state="translated">이 변수는 사용자가 $ package에 아키텍처 종속 공용 라이브러리 파일을 넣을 디렉토리의 이름을 보유합니다. 가장 자주 다음과 같은 로컬 디렉토리입니다.</target>
        </trans-unit>
        <trans-unit id="8041cb76721adac083fe9d12d751a8f81f64180a" translate="yes" xml:space="preserve">
          <source>This variable holds the name of the directory in which the user wants to put publicly executable images for the package in question. It is most often a local directory such as</source>
          <target state="translated">이 변수는 사용자가 해당 패키지에 대해 공개적으로 실행 가능한 이미지를 넣고 자하는 디렉토리의 이름을 보유합니다. 가장 자주 다음과 같은 로컬 디렉토리입니다.</target>
        </trans-unit>
        <trans-unit id="deb4221d3db7c3e442dee03567b8ff60d06f4f03" translate="yes" xml:space="preserve">
          <source>This variable holds the name of the directory in which the user wants to put publicly scripts for the package in question. It is either the same directory as for binaries, or a special one that can be mounted across different architectures, like</source>
          <target state="translated">이 변수는 사용자가 패키지의 공개 스크립트를 넣을 디렉토리 이름을 보유합니다. 바이너리와 동일한 디렉토리이거나 다른 아키텍처에 마운트 할 수있는 특수 디렉토리입니다.</target>
        </trans-unit>
        <trans-unit id="81114c9e1633658a873727462bf8b79d7dabe6ec" translate="yes" xml:space="preserve">
          <source>This variable holds the name of the shared library search path, often &lt;code&gt;LD_LIBRARY_PATH&lt;/code&gt; . To get an empty string, the hints file must set this to &lt;code&gt;none&lt;/code&gt; .</source>
          <target state="translated">이 변수는 공유 라이브러리 검색 경로의 이름 (보통 &lt;code&gt;LD_LIBRARY_PATH&lt;/code&gt; )을 보유합니다 . 빈 문자열을 얻으려면 힌트 파일이 이것을 &lt;code&gt;none&lt;/code&gt; 으로 설정해야합니다 .</target>
        </trans-unit>
        <trans-unit id="b0f939672c88c90f90861168c6f1060d11bd061c" translate="yes" xml:space="preserve">
          <source>This variable holds the number of bytes required to align a double-- or a long double when applicable. Usual values are 2, 4 and 8. The default is eight, for safety.</source>
          <target state="translated">이 변수는 적용 가능한 경우 double 또는 long double을 정렬하는 데 필요한 바이트 수를 보유합니다. 일반적인 값은 2, 4 및 8입니다. 안전을 위해 기본값은 8입니다.</target>
        </trans-unit>
        <trans-unit id="7e6ce35a538280fdbe8a4a59b476fc486e5cca71" translate="yes" xml:space="preserve">
          <source>This variable holds the options that may be necessary for nm to work on a shared library but that can not be used on an archive library. Currently, this is only used by Linux, where nm --dynamic is *required* to get symbols from an &lt;code&gt;ELF&lt;/code&gt; library which has been stripped, but nm --dynamic is *fatal* on an archive library. Maybe Linux should just always set usenm=false.</source>
          <target state="translated">이 변수에는 nm가 공유 라이브러리에서 작업하는 데 필요할 수 있지만 아카이브 라이브러리에서는 사용할 수없는 옵션이 있습니다. 현재 이것은 Linux에서만 사용되며 여기서 nm --dynamic은 * 필수 * 되어 제거 된 &lt;code&gt;ELF&lt;/code&gt; 라이브러리 에서 기호를 가져 오지만 nm --dynamic은 아카이브 라이브러리에서 * 치명적입니다. 아마도 리눅스는 항상 usenm = false로 설정해야합니다.</target>
        </trans-unit>
        <trans-unit id="5fb94dfaf3c5cf5b9350b21ad652f5f73ff1b166" translate="yes" xml:space="preserve">
          <source>This variable holds the options that may be necessary for nm.</source>
          <target state="translated">이 변수에는 nm에 필요할 수있는 옵션이 있습니다.</target>
        </trans-unit>
        <trans-unit id="3249abffffbb5aa711d6199a15a75382b81101e2" translate="yes" xml:space="preserve">
          <source>This variable holds the path of the include files, which is usually</source>
          <target state="translated">이 변수는 포함 파일의 경로를 유지합니다.</target>
        </trans-unit>
        <trans-unit id="6f49f8eac2d8870189ce1b166a19b4092ac00fcb" translate="yes" xml:space="preserve">
          <source>This variable holds the paths (space-separated) used to find local libraries. It is prepended to libpth, and is intended to be easily set from the command line.</source>
          <target state="translated">이 변수는 로컬 라이브러리를 찾는 데 사용되는 경로 (공백으로 구분)를 보유합니다. libpth 앞에 추가되며 명령 행에서 쉽게 설정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="6095846195c500c11318c3bb4b690d204039493e" translate="yes" xml:space="preserve">
          <source>This variable holds the place where the manual is located on this system. It is not the place where the user wants to put his manual pages. Rather it is the place where Configure may look to find manual for unix commands (section 1 of the manual usually). See mansrc.</source>
          <target state="translated">이 변수는이 시스템에서 매뉴얼이있는 위치를 유지합니다. 사용자가 매뉴얼 페이지를 넣기를 원하는 곳이 아닙니다. 오히려 Configure가 unix 명령에 대한 매뉴얼을 찾을 수있는 곳입니다 (보통 매뉴얼의 섹션 1). mansrc를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="f846938e7f55c147f7df02834d562c782659796c" translate="yes" xml:space="preserve">
          <source>This variable holds the return code from read() when no data is present. It should be -1, but some systems return 0 when &lt;code&gt;O_NDELAY&lt;/code&gt; is used, which is a shame because you cannot make the difference between no data and an</source>
          <target state="translated">이 변수는 데이터가 없을 때 read ()의 리턴 코드를 보유합니다. -1이어야하지만 &lt;code&gt;O_NDELAY&lt;/code&gt; 를 사용하는 경우 일부 시스템 은 0을 반환합니다. 데이터가없는 것과</target>
        </trans-unit>
        <trans-unit id="08528885a64385bf0b06ecc9d26f661f2e16f288" translate="yes" xml:space="preserve">
          <source>This variable holds the same list as inc_version_list, but each item is enclosed in double quotes and separated by commas, suitable for use in the &lt;code&gt;PERL_INC_VERSION_LIST&lt;/code&gt; initialization.</source>
          <target state="translated">이 변수는 inc_version_list와 동일한 목록을 보유하지만 각 항목은 큰 따옴표로 묶고 쉼표로 구분되며 &lt;code&gt;PERL_INC_VERSION_LIST&lt;/code&gt; 초기화 에 사용하기에 적합합니다 .</target>
        </trans-unit>
        <trans-unit id="e260a05f295acb14a40f2d355811442a73b0af9b" translate="yes" xml:space="preserve">
          <source>This variable holds the signal names, enclosed in double quotes and separated by commas, suitable for use in the &lt;code&gt;SIG_NAME&lt;/code&gt; definition below. A &lt;code&gt;ZERO&lt;/code&gt; is prepended to the list, and the list is terminated with a plain 0. The leading &lt;code&gt;SIG&lt;/code&gt; in signal names is removed. See sig_num.</source>
          <target state="translated">이 변수는 신호 이름을 큰 따옴표로 &lt;code&gt;SIG_NAME&lt;/code&gt; 쉼표로 구분하여 아래 SIG_NAME 정의 에 사용하기에 적합 합니다. &lt;code&gt;ZERO&lt;/code&gt; 는 목록 앞에 추가되며, 목록은 주요 일반 0으로 종료 &lt;code&gt;SIG&lt;/code&gt; 신호 이름에서가 제거됩니다. sig_num을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="bd870c73c0db86179a8cc1eb403ac85c756fd6d4" translate="yes" xml:space="preserve">
          <source>This variable holds the signal names, space separated. The leading &lt;code&gt;SIG&lt;/code&gt; in signal name is removed. A &lt;code&gt;ZERO&lt;/code&gt; is prepended to the list. This is currently not used, sig_name_init is used instead.</source>
          <target state="translated">이 변수는 공백으로 구분 된 신호 이름을 보유합니다. 신호 이름 의 선행 &lt;code&gt;SIG&lt;/code&gt; 가 제거됩니다. &lt;code&gt;ZERO&lt;/code&gt; 는 목록 앞에 추가됩니다. 이것은 현재 사용되지 않고 sig_name_init가 대신 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="b97ca55dcd3d8d803aa8719a3b4c9510d4745654" translate="yes" xml:space="preserve">
          <source>This variable holds the signal numbers, enclosed in double quotes and separated by commas, suitable for use in the &lt;code&gt;SIG_NUM&lt;/code&gt; definition below. A &lt;code&gt;ZERO&lt;/code&gt; is prepended to the list, and the list is terminated with a plain 0.</source>
          <target state="translated">이 변수는 신호 번호를 큰 따옴표로 &lt;code&gt;SIG_NUM&lt;/code&gt; 쉼표로 구분하여 아래 SIG_NUM 정의 에 사용하기에 적합 합니다. &lt;code&gt;ZERO&lt;/code&gt; 는 목록 앞에 추가되며, 목록은 보통 0으로 종료됩니다.</target>
        </trans-unit>
        <trans-unit id="2375dff2a285afefde99330b46bfa57ea8534ffd" translate="yes" xml:space="preserve">
          <source>This variable holds the signal numbers, space separated. A &lt;code&gt;ZERO&lt;/code&gt; is prepended to the list (corresponding to the fake &lt;code&gt;SIGZERO&lt;/code&gt; ). Those numbers correspond to the value of the signal listed in the same place within the sig_name list. This is currently not used, sig_num_init is used instead.</source>
          <target state="translated">이 변수는 공간을 구분하여 신호 번호를 유지합니다. &lt;code&gt;ZERO&lt;/code&gt; 는 (가짜 대응리스트 앞에 추가 &lt;code&gt;SIGZERO&lt;/code&gt; ). 이 숫자는 sig_name 목록 내의 동일한 위치에 나열된 신호 값에 해당합니다. 이것은 현재 사용되지 않고 sig_num_init가 대신 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="a254e0c24e9fa59422a416ba718851c0afb2ae7a" translate="yes" xml:space="preserve">
          <source>This variable holds the test command to test for a symbolic link (if they are supported). Typical values include &lt;code&gt;test -h&lt;/code&gt; and &lt;code&gt;test -L&lt;/code&gt; .</source>
          <target state="translated">이 변수는 테스트 명령을 보유하여 기호 링크를 테스트합니다 (지원되는 경우). 일반적인 값은 &lt;code&gt;test -h&lt;/code&gt; 및 &lt;code&gt;test -L&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="2e2e09da600c3938acbbf56b6465b40820091c78" translate="yes" xml:space="preserve">
          <source>This variable holds the type of the signal handler (void or int).</source>
          <target state="translated">이 변수는 신호 핸들러 유형 (void 또는 int)을 보유합니다.</target>
        </trans-unit>
        <trans-unit id="835e9573e72b439b8d28649076a101b5439bf3dd" translate="yes" xml:space="preserve">
          <source>This variable holds the type returned by time(). It can be long, or time_t on &lt;code&gt;BSD&lt;/code&gt; sites (in which case &amp;lt;sys/types.h&amp;gt; should be included). Anyway, the type Time_t should be used.</source>
          <target state="translated">이 변수는 time ()에 의해 리턴 된 유형을 보유합니다. &lt;code&gt;BSD&lt;/code&gt; 사이트 에서 시간이 길거나 time_t 일 수 있습니다 (이 경우 &amp;lt;sys / types.h&amp;gt;가 포함되어야 함). 어쨌든, Time_t 유형을 사용해야합니다.</target>
        </trans-unit>
        <trans-unit id="e2138af6020e97cba54a0b84e76f1bfeb8d4c320" translate="yes" xml:space="preserve">
          <source>This variable holds the type returned by times(). It can be long, or clock_t on &lt;code&gt;BSD&lt;/code&gt; sites (in which case &amp;lt;sys/types.h&amp;gt; should be included).</source>
          <target state="translated">이 변수는 times ()에 의해 리턴 된 타입을 유지합니다. 길이가 길거나 &lt;code&gt;BSD&lt;/code&gt; 사이트에서 clock_t 일 수 있습니다 (이 경우 &amp;lt;sys / types.h&amp;gt;가 포함되어야 함).</target>
        </trans-unit>
        <trans-unit id="9b97141a0ff974e240f17b7201f774cd17b413f3" translate="yes" xml:space="preserve">
          <source>This variable holds the type used for the 1st argument to gethostbyaddr(). Usually, this is char * or void *, possibly with or without a const prefix. This is only useful if you have gethostbyaddr(), naturally.</source>
          <target state="translated">이 변수는 gethostbyaddr ()의 첫 번째 인수에 사용 된 유형을 보유합니다. 일반적으로 이것은 const 접두어가 있거나없는 char * 또는 void *입니다. 이것은 gethostbyaddr ()이 자연스럽게있는 경우에만 유용합니다.</target>
        </trans-unit>
        <trans-unit id="b0b750d1dfbe60a15a4cbc06031ed8175b0067f3" translate="yes" xml:space="preserve">
          <source>This variable holds the type used for the 1st argument to getnetbyaddr(). Usually, this is int or long. This is only useful if you have getnetbyaddr(), naturally.</source>
          <target state="translated">이 변수는 getnetbyaddr ()의 첫 번째 인수에 사용 된 유형을 보유합니다. 일반적으로 이것은 int 또는 long입니다. getnetbyaddr ()이 자연스럽게있는 경우에만 유용합니다.</target>
        </trans-unit>
        <trans-unit id="2fe93bf333aa5d2b80ae756d0da019849eca1d39" translate="yes" xml:space="preserve">
          <source>This variable holds the type used for the 2nd argument to gethostbyaddr(). Usually, this is int or size_t or unsigned. This is only useful if you have gethostbyaddr(), naturally.</source>
          <target state="translated">이 변수는 gethostbyaddr ()의 두 번째 인수에 사용 된 유형을 보유합니다. 일반적으로 이것은 int 또는 size_t이거나 부호가 없습니다. 이것은 gethostbyaddr ()이 자연스럽게있는 경우에만 유용합니다.</target>
        </trans-unit>
        <trans-unit id="bdd4821764a5baaa298226e4d505d8a9e05c90e7" translate="yes" xml:space="preserve">
          <source>This variable holds the type used for the 2nd, 3rd, and 4th arguments to select. Usually, this is &lt;code&gt;fd_set *&lt;/code&gt; , if &lt;code&gt;HAS_FD_SET&lt;/code&gt; is defined, and &lt;code&gt;&lt;a href=&quot;functions/int&quot;&gt;int&lt;/a&gt; *&lt;/code&gt; otherwise. This is only useful if you have select(), naturally.</source>
          <target state="translated">이 변수는 선택할 두 번째, 세 번째 및 네 번째 인수에 사용되는 유형을 보유합니다. 일반적으로 &lt;code&gt;HAS_FD_SET&lt;/code&gt; 이 정의 되면 &lt;code&gt;fd_set *&lt;/code&gt; 이고 그렇지 않으면 &lt;code&gt;&lt;a href=&quot;functions/int&quot;&gt;int&lt;/a&gt; *&lt;/code&gt; * 입니다. 이것은 select ()가 자연스럽게있는 경우에만 유용합니다.</target>
        </trans-unit>
        <trans-unit id="4bb6f61a9cb2d21622b5b2bdf0037c4090e6a8b6" translate="yes" xml:space="preserve">
          <source>This variable holds the type used for the argument to gethostbyname(). Usually, this is char * or const char *. This is only useful if you have gethostbyname(), naturally.</source>
          <target state="translated">이 변수는 gethostbyname ()의 인수에 사용 된 유형을 보유합니다. 일반적으로 이것은 char * 또는 const char *입니다. gethostbyname ()이 자연스럽게있는 경우에만 유용합니다.</target>
        </trans-unit>
        <trans-unit id="91acaa24e66816e27e0f44e6a4f8a203219e9254" translate="yes" xml:space="preserve">
          <source>This variable holds the type used for the size argument for various socket calls like accept. Usual values include socklen_t, size_t, and int.</source>
          <target state="translated">이 변수는 accept와 같은 다양한 소켓 호출의 size 인수에 사용되는 유형을 보유합니다. 일반적인 값은 socklen_t, size_t 및 int입니다.</target>
        </trans-unit>
        <trans-unit id="a016f4c917bb6fe8e73e1581d6b6a1bc240909ba" translate="yes" xml:space="preserve">
          <source>This variable holds what Gconvert is defined as to convert floating point numbers into strings. By default, Configure sets &lt;code&gt;this&lt;/code&gt; macro to use the first of gconvert, gcvt, or sprintf that pass sprintf-%g-like behavior tests. If perl is using long doubles, the macro uses the first of the following functions that pass Configure's tests: qgcvt, sprintf (if Configure knows how to make sprintf format long doubles--see sPRIgldbl), gconvert, gcvt, and sprintf (casting to double). The gconvert_preference and gconvert_ld_preference variables can be used to alter Configure's preferences, for doubles and long doubles, respectively. If present, they contain a space-separated list of one or more of the above function names in the order they should be tried.</source>
          <target state="translated">이 변수는 부동 소수점 숫자를 문자열로 변환하기 위해 Gconvert가 정의한 것을 유지합니다. 기본적으로 Configure (구성)는 sprintf- % g와 유사한 동작 테스트를 통과하는 gconvert, gcvt 또는 sprintf 중 첫 번째를 사용하도록 &lt;code&gt;this&lt;/code&gt; 매크로를 설정 합니다 . perl이 long doubles를 사용하는 경우 매크로는 Configure의 테스트를 통과하는 다음 함수 중 첫 번째 기능을 사용합니다. qgcvt, sprintf (Sconfigf 형식을 long doubles로 만드는 방법을 알고있는 경우 (sPRIgldbl 참조), gconvert, gcvt 및 sprintf로 캐스팅) 더블). gconvert_preference 및 gconvert_ld_preference 변수는 Double 및 Long Double 각각에 대해 Configure의 환경 설정을 변경하는 데 사용할 수 있습니다. 존재하는 경우 위의 함수 이름 중 하나 이상의 공백으로 구분 된 목록을 시도해야하는 순서대로 포함합니다.</target>
        </trans-unit>
        <trans-unit id="1d1ef6edaf977f495c0f8ceba5e239974bd28f68" translate="yes" xml:space="preserve">
          <source>This variable holds what Strerror is defined as to translate an error code condition into an error message string. It could be &lt;code&gt;strerror&lt;/code&gt; or a more &lt;code&gt;complex&lt;/code&gt; macro emulating strerror with sys_errlist[], or the &lt;code&gt;unknown&lt;/code&gt; string when both strerror and sys_errlist are missing.</source>
          <target state="translated">이 변수는 오류 코드 조건을 오류 메시지 문자열로 변환하기 위해 Strerror가 정의 된 내용을 보유합니다. 그것은 될 수 &lt;code&gt;strerror&lt;/code&gt; 는 나보다 &lt;code&gt;complex&lt;/code&gt; sys_errlist [매크로 Emulation 소프트웨어의 strerror는, 또는 &lt;code&gt;unknown&lt;/code&gt; 두 함수 strerror과 sys_errlist이 누락 된 문자열입니다.</target>
        </trans-unit>
        <trans-unit id="555c7cb58cfa387e81ec11203f592f8fc30775b3" translate="yes" xml:space="preserve">
          <source>This variable indicates how many of bits type uvtype a variable nvtype can preserve.</source>
          <target state="translated">이 변수는 변수 nvtype이 유지할 수있는 비트 uvtype 비트 수를 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="37315ab0bbb2f1b790234bf7eff0aa816f70a0cb" translate="yes" xml:space="preserve">
          <source>This variable indicates if the system supports dynamic loading of some sort. See also dlsrc and dlobj.</source>
          <target state="translated">이 변수는 시스템이 일종의 동적로드를 지원하는지 여부를 나타냅니다. dlsrc 및 dlobj도 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="46d5a9bd26c4ac236b1625459381e1e1d32d92da" translate="yes" xml:space="preserve">
          <source>This variable indicates that Perl was configured with development features enabled. This should not be done for production builds.</source>
          <target state="translated">이 변수는 Perl이 개발 기능을 사용하도록 구성되었음을 나타냅니다. 프로덕션 빌드에서는 수행하지 않아야합니다.</target>
        </trans-unit>
        <trans-unit id="d297b07fdd2b645c4639e3d15bbea8c486b8fb0c" translate="yes" xml:space="preserve">
          <source>This variable indicates the program to be used to link libraries for dynamic loading. On some systems, it is &lt;code&gt;ld&lt;/code&gt; . On &lt;code&gt;ELF&lt;/code&gt; systems, it should be $cc. Mostly, we'll try to respect the hint file setting.</source>
          <target state="translated">이 변수는 동적로드를 위해 라이브러리를 링크하는 데 사용되는 프로그램을 나타냅니다. 일부 시스템에서는 &lt;code&gt;ld&lt;/code&gt; 입니다. 에 &lt;code&gt;ELF&lt;/code&gt; 의 시스템, 그것은 $ cc로한다. 대부분 힌트 파일 설정을 존중하려고합니다.</target>
        </trans-unit>
        <trans-unit id="f5818397556c3a8c4145c58d41b9bccac760b1ec" translate="yes" xml:space="preserve">
          <source>This variable indicates whether &lt;code&gt;Archive::Tar&lt;/code&gt; should allow files to be extracted outside their current working directory.</source>
          <target state="translated">이 변수는 &lt;code&gt;Archive::Tar&lt;/code&gt; 이 파일을 현재 작업 디렉토리 외부에서 추출 할 수 있는지 여부를 나타냅니다 .</target>
        </trans-unit>
        <trans-unit id="151069eb8d78b9a9342c4d345c48c0a16d7c5f71" translate="yes" xml:space="preserve">
          <source>This variable indicates whether a UTF-8 locale was detected by perl at startup. This information is used by perl when it's in adjust-utf8ness-to-locale mode (as when run with the &lt;code&gt;-CL&lt;/code&gt; command-line switch); see &lt;a href=&quot;perlrun&quot;&gt;perlrun&lt;/a&gt; for more info on this.</source>
          <target state="translated">이 변수는 시작할 때 perl이 UTF-8 로케일을 감지했는지 여부를 나타냅니다. 이 글은 때이 정보는 펄에 의해 사용되는 조정 - utf8ness - 투 - 로케일 모드 (실행 때와 &lt;code&gt;-CL&lt;/code&gt; 명령 줄 스위치를) 이에 대한 자세한 내용은 &lt;a href=&quot;perlrun&quot;&gt;perlrun&lt;/a&gt; 을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="0481413057d3fd60ec1f26a9455751a82a664140" translate="yes" xml:space="preserve">
          <source>This variable indicates whether a variable of type nvtype can preserve all the bits a variable of type uvtype.</source>
          <target state="translated">이 변수는 nvtype 유형의 변수가 모든 비트를 uvtype 유형의 변수로 유지할 수 있는지 여부를 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="1c5b4da0cfe1527f7d6965711fbd7ec27de16fce" translate="yes" xml:space="preserve">
          <source>This variable indicates whether a variable of type nvtype stores 0.0 in memory as all bits zero.</source>
          <target state="translated">이 변수는 nvtype 유형의 변수가 0.0을 메모리에 모든 비트 0으로 저장하는지 여부를 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="f702bf0d72fdaae7c4d169eaa6c6d6d3dad3f312" translate="yes" xml:space="preserve">
          <source>This variable indicates whether to include the $api_versionstring as a component of the $archname.</source>
          <target state="translated">이 변수는 $ api_versionstring을 $ archname의 구성 요소로 포함할지 여부를 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="d1830e35d3e22d472801f88e943e3491e50c0c52" translate="yes" xml:space="preserve">
          <source>This variable indicates whether we are compiling with backtrace support.</source>
          <target state="translated">이 변수는 역 추적 지원으로 컴파일 중인지 여부를 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="fa8f3b3aa143cf4250bcebb2be4443524871f355" translate="yes" xml:space="preserve">
          <source>This variable indicates whether we are compiling with dtrace support. See also dtrace.</source>
          <target state="translated">이 변수는 dtrace 지원으로 컴파일하는지 여부를 나타냅니다. dtrace도 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="0f575d208b36b67de55efd9845cf5c38b416dbf6" translate="yes" xml:space="preserve">
          <source>This variable is $sitelibexp with any trailing version-specific component removed. The elements in inc_version_list (</source>
          <target state="translated">이 변수는 $ sitelibexp이며 후행 버전 별 구성 요소가 제거됩니다. inc_version_list의 요소 (</target>
        </trans-unit>
        <trans-unit id="b5c08538519dfb05911d74ae1341e3f7b0d84f4c" translate="yes" xml:space="preserve">
          <source>This variable is $vendorlibexp with any trailing version-specific component removed. The elements in inc_version_list (</source>
          <target state="translated">이 변수는 $ vendorlibexp이며 후행 버전 별 구성 요소가 제거됩니다. inc_version_list의 요소 (</target>
        </trans-unit>
        <trans-unit id="bc073cc81fa954a4b369ce8d24558858dc65f377" translate="yes" xml:space="preserve">
          <source>This variable is &lt;code&gt;true&lt;/code&gt; if the components of libraries must be ordered (with `lorder $* | tsort`) before placing them in an archive. Set to &lt;code&gt;false&lt;/code&gt; if ranlib or ar can generate random libraries.</source>
          <target state="translated">이 변수는 라이브러리 구성 요소를 아카이브에 배치하기 전에 라이브러리 구성 요소를`lorder $ * | tsort`로 주문해야하는 경우에 &lt;code&gt;true&lt;/code&gt; 됩니다. ranlib 또는 ar이 임의 라이브러리를 생성 할 수 있으면 &lt;code&gt;false&lt;/code&gt; 로 설정하십시오 .</target>
        </trans-unit>
        <trans-unit id="71a55e8db2e943cb225dd0d36724e0df3080af17" translate="yes" xml:space="preserve">
          <source>This variable is a short name to characterize the current architecture. It is used mainly to construct the default archlib.</source>
          <target state="translated">이 변수는 현재 아키텍처의 특징을 나타내는 짧은 이름입니다. 주로 기본 archlib를 구성하는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="df7e46c7aff5a3664a9ce3ca0f389e4ee9b4ee1c" translate="yes" xml:space="preserve">
          <source>This variable is by default set to</source>
          <target state="translated">이 변수는 기본적으로</target>
        </trans-unit>
        <trans-unit id="563043fdcd8a3cf878649849ec4ad986138fbba3" translate="yes" xml:space="preserve">
          <source>This variable is defined but not used by Configure. The value is the empty string and is not useful.</source>
          <target state="translated">이 변수는 Configure에 의해 정의되었지만 사용되지 않습니다. 값이 빈 문자열이며 유용하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="d7354fd489f73abc189fcb21ccf9445303cedb8f" translate="yes" xml:space="preserve">
          <source>This variable is defined if the target system insists on unique basenames for shared library files. This is currently true on Android, false everywhere else we know of. Defaults to &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">대상 시스템이 공유 라이브러리 파일의 고유 한 기본 이름을 요구하는 경우이 변수가 정의됩니다. 이것은 현재 Android에서 사실이며, 우리가 아는 모든 곳에서는 거짓입니다. 기본값은 &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="438a2f52b84d08ef97749ca01be6af2cf059879d" translate="yes" xml:space="preserve">
          <source>This variable is empty unless supplied by the Configure user. It can contain a path to an alternative root directory, under which headers and libraries for the compilation target can be found. This is generally used when cross-compiling using a gcc-like compiler.</source>
          <target state="translated">구성 사용자가 제공하지 않으면이 변수는 비어 있습니다. 여기에는 컴파일 대상의 헤더와 라이브러리를 찾을 수있는 대체 루트 디렉토리의 경로가 포함될 수 있습니다. 이것은 일반적으로 gcc와 같은 컴파일러를 사용하여 크로스 컴파일 할 때 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="b994172e2c74255d8ab90abbbfe0d21ed67674e5" translate="yes" xml:space="preserve">
          <source>This variable is read-only and dynamically-scoped.</source>
          <target state="translated">이 변수는 읽기 전용이며 동적 범위입니다.</target>
        </trans-unit>
        <trans-unit id="1fa2151871e1b4975e68cb75f48313e72ac189c6" translate="yes" xml:space="preserve">
          <source>This variable is read-only.</source>
          <target state="translated">이 변수는 읽기 전용입니다.</target>
        </trans-unit>
        <trans-unit id="9ed35678467f3acdb08d6502a28a6136cae960c5" translate="yes" xml:space="preserve">
          <source>This variable is really the same as archlibexp but may differ on those systems using &lt;code&gt;AFS&lt;/code&gt; . For extra portability, only this variable should be used in makefiles.</source>
          <target state="translated">이 변수는 실제로 archlibexp와 동일하지만 &lt;code&gt;AFS&lt;/code&gt; 를 사용하는 시스템에서는 다를 수 있습니다 . 이식성을 높이려면 makefile에서이 변수 만 사용해야합니다.</target>
        </trans-unit>
        <trans-unit id="5e74bc7790705750de113e67001e1a300fd53d91" translate="yes" xml:space="preserve">
          <source>This variable is really the same as html1direxp, unless you are using a different installprefix. For extra portability, you should only use this variable within your makefiles.</source>
          <target state="translated">다른 installprefix를 사용하지 않는 한이 변수는 실제로 html1direxp와 동일합니다. 추가 이식성을 위해 makefile 내에서만이 변수를 사용해야합니다.</target>
        </trans-unit>
        <trans-unit id="d55c6831b8205aa811ac71d6d8d26cce0d1a855c" translate="yes" xml:space="preserve">
          <source>This variable is really the same as html3direxp, unless you are using a different installprefix. For extra portability, you should only use this variable within your makefiles.</source>
          <target state="translated">다른 installprefix를 사용하지 않는 한이 변수는 실제로 html3direxp와 동일합니다. 추가 이식성을 위해 makefile 내에서만이 변수를 사용해야합니다.</target>
        </trans-unit>
        <trans-unit id="50a7bfba00b530fee70e29ec25feaed211fa1d6a" translate="yes" xml:space="preserve">
          <source>This variable is really the same as man1direxp, unless you are using &lt;code&gt;AFS&lt;/code&gt; in which case it points to the read/write location whereas man1direxp only points to the read-only access location. For extra portability, you should only use this variable within your makefiles.</source>
          <target state="translated">이 변수는 &lt;code&gt;AFS&lt;/code&gt; 를 사용하지 않는 한 man1direxp와 동일합니다.이 경우 man1direxp는 읽기 전용 액세스 위치만을 가리 킵니다. 추가 이식성을 위해 makefile 내에서만이 변수를 사용해야합니다.</target>
        </trans-unit>
        <trans-unit id="999d681ac0ec5579727ba4615a2201604d7d6527" translate="yes" xml:space="preserve">
          <source>This variable is really the same as man3direxp, unless you are using &lt;code&gt;AFS&lt;/code&gt; in which case it points to the read/write location whereas man3direxp only points to the read-only access location. For extra portability, you should only use this variable within your makefiles.</source>
          <target state="translated">이 변수는 &lt;code&gt;AFS&lt;/code&gt; 를 사용하지 않는 한 man3direxp와 동일합니다.이 경우 man3direxp는 읽기 전용 액세스 위치만을 가리 킵니다. 추가 이식성을 위해 makefile 내에서만이 변수를 사용해야합니다.</target>
        </trans-unit>
        <trans-unit id="50afdd151ec44994a25d8b6533a689c8db499272" translate="yes" xml:space="preserve">
          <source>This variable is really the same as privlibexp but may differ on those systems using &lt;code&gt;AFS&lt;/code&gt; . For extra portability, only this variable should be used in makefiles.</source>
          <target state="translated">이 변수는 실제로 privlibexp와 동일하지만 &lt;code&gt;AFS&lt;/code&gt; 를 사용하는 시스템에서는 다를 수 있습니다 . 이식성을 높이려면 makefile에서이 변수 만 사용해야합니다.</target>
        </trans-unit>
        <trans-unit id="34018f4da475a27d958fa480840777564a3a60a0" translate="yes" xml:space="preserve">
          <source>This variable is really the same as sitearchexp but may differ on those systems using &lt;code&gt;AFS&lt;/code&gt; . For extra portability, only this variable should be used in makefiles.</source>
          <target state="translated">이 변수는 sitearchexp와 동일하지만 &lt;code&gt;AFS&lt;/code&gt; 를 사용하는 시스템에서는 다를 수 있습니다 . 이식성을 높이려면 makefile에서이 변수 만 사용해야합니다.</target>
        </trans-unit>
        <trans-unit id="bea943fbbd3dd2d693fd02d1e8105424cad7a803" translate="yes" xml:space="preserve">
          <source>This variable is really the same as sitehtml1direxp, unless you are using &lt;code&gt;AFS&lt;/code&gt; in which case it points to the read/write location whereas html1direxp only points to the read-only access location. For extra portability, you should only use this variable within your makefiles.</source>
          <target state="translated">&lt;code&gt;AFS&lt;/code&gt; 를 사용하지 않는 한이 변수는 sitehtml1direxp와 동일합니다.이 경우 읽기 / 쓰기 위치를 가리키고 html1direxp는 읽기 전용 액세스 위치 만 가리 킵니다. 추가 이식성을 위해 makefile 내에서만이 변수를 사용해야합니다.</target>
        </trans-unit>
        <trans-unit id="45d79d3eb206ef4c15f60dedd6aea3e6410af2c3" translate="yes" xml:space="preserve">
          <source>This variable is really the same as sitehtml3direxp, unless you are using &lt;code&gt;AFS&lt;/code&gt; in which case it points to the read/write location whereas html3direxp only points to the read-only access location. For extra portability, you should only use this variable within your makefiles.</source>
          <target state="translated">&lt;code&gt;AFS&lt;/code&gt; 를 사용하지 않는 한이 변수는 sitehtml3direxp와 동일합니다.이 경우 읽기 / 쓰기 위치를 가리키고 html3direxp는 읽기 전용 액세스 위치 만 가리 킵니다. 추가 이식성을 위해 makefile 내에서만이 변수를 사용해야합니다.</target>
        </trans-unit>
        <trans-unit id="7957319e58af526cf1b091d0ef7e541ca87afab9" translate="yes" xml:space="preserve">
          <source>This variable is really the same as sitelibexp but may differ on those systems using &lt;code&gt;AFS&lt;/code&gt; . For extra portability, only this variable should be used in makefiles.</source>
          <target state="translated">이 변수는 sitelibexp와 동일하지만 &lt;code&gt;AFS&lt;/code&gt; 를 사용하는 시스템에서는 다를 수 있습니다 . 이식성을 높이려면 makefile에서이 변수 만 사용해야합니다.</target>
        </trans-unit>
        <trans-unit id="70355eafb6a69bb2fb90974b9c7427568cf25e7c" translate="yes" xml:space="preserve">
          <source>This variable is really the same as siteman1direxp, unless you are using &lt;code&gt;AFS&lt;/code&gt; in which case it points to the read/write location whereas man1direxp only points to the read-only access location. For extra portability, you should only use this variable within your makefiles.</source>
          <target state="translated">&lt;code&gt;AFS&lt;/code&gt; 를 사용하지 않는 한이 변수는 siteman1direxp와 동일합니다.이 경우 man1direxp는 읽기 전용 액세스 위치만을 가리 킵니다. 추가 이식성을 위해 makefile 내에서만이 변수를 사용해야합니다.</target>
        </trans-unit>
        <trans-unit id="01ab2ec5205fd8a6ae9e2c46b8f01e25f6f082c0" translate="yes" xml:space="preserve">
          <source>This variable is really the same as siteman3direxp, unless you are using &lt;code&gt;AFS&lt;/code&gt; in which case it points to the read/write location whereas man3direxp only points to the read-only access location. For extra portability, you should only use this variable within your makefiles.</source>
          <target state="translated">&lt;code&gt;AFS&lt;/code&gt; 를 사용하지 않는 한이 변수는 siteman3direxp와 동일합니다.이 경우 man3direxp는 읽기 전용 액세스 위치만을 가리 킵니다. 추가 이식성을 위해 makefile 내에서만이 변수를 사용해야합니다.</target>
        </trans-unit>
        <trans-unit id="b623ff8c0c787fbe302ea47c2d37c73c90761cea" translate="yes" xml:space="preserve">
          <source>This variable is really the same as vendorarchexp but may differ on those systems using &lt;code&gt;AFS&lt;/code&gt; . For extra portability, only this variable should be used in makefiles.</source>
          <target state="translated">이 변수는 실제로 vendorarchexp와 동일하지만 &lt;code&gt;AFS&lt;/code&gt; 를 사용하는 시스템에서는 다를 수 있습니다 . 이식성을 높이려면 makefile에서이 변수 만 사용해야합니다.</target>
        </trans-unit>
        <trans-unit id="419c7fab5c49b8960bb4adc3967427dec7408564" translate="yes" xml:space="preserve">
          <source>This variable is really the same as vendorbinexp but may differ on those systems using &lt;code&gt;AFS&lt;/code&gt; . For extra portability, only this variable should be used in makefiles.</source>
          <target state="translated">이 변수는 실제로 vendorbinexp와 동일하지만 &lt;code&gt;AFS&lt;/code&gt; 를 사용하는 시스템에서는 다를 수 있습니다 . 이식성을 높이려면 makefile에서이 변수 만 사용해야합니다.</target>
        </trans-unit>
        <trans-unit id="3dde84202d73dd762519711107d71200f961e048" translate="yes" xml:space="preserve">
          <source>This variable is really the same as vendorhtml1direxp but may differ on those systems using &lt;code&gt;AFS&lt;/code&gt; . For extra portability, only this variable should be used in makefiles.</source>
          <target state="translated">이 변수는 실제로 vendorhtml1direxp와 동일하지만 &lt;code&gt;AFS&lt;/code&gt; 를 사용하는 시스템에서는 다를 수 있습니다 . 이식성을 높이려면 makefile에서이 변수 만 사용해야합니다.</target>
        </trans-unit>
        <trans-unit id="b179dc37f4ad39ba568301ac153d5a72f010eaa0" translate="yes" xml:space="preserve">
          <source>This variable is really the same as vendorhtml3direxp but may differ on those systems using &lt;code&gt;AFS&lt;/code&gt; . For extra portability, only this variable should be used in makefiles.</source>
          <target state="translated">이 변수는 실제로 vendorhtml3direxp와 동일하지만 &lt;code&gt;AFS&lt;/code&gt; 를 사용하는 시스템에서는 다를 수 있습니다 . 이식성을 높이려면 makefile에서이 변수 만 사용해야합니다.</target>
        </trans-unit>
        <trans-unit id="9750eb69d2d34215cb53f734f3e642aa5a73ed65" translate="yes" xml:space="preserve">
          <source>This variable is really the same as vendorlibexp but may differ on those systems using &lt;code&gt;AFS&lt;/code&gt; . For extra portability, only this variable should be used in makefiles.</source>
          <target state="translated">이 변수는 실제로 vendorlibexp와 동일하지만 &lt;code&gt;AFS&lt;/code&gt; 를 사용하는 시스템에서는 다를 수 있습니다 . 이식성을 높이려면 makefile에서이 변수 만 사용해야합니다.</target>
        </trans-unit>
        <trans-unit id="21b154ff80aa7714d3e43e4f3b8ca378cb141c61" translate="yes" xml:space="preserve">
          <source>This variable is really the same as vendorman1direxp but may differ on those systems using &lt;code&gt;AFS&lt;/code&gt; . For extra portability, only this variable should be used in makefiles.</source>
          <target state="translated">이 변수는 실제로 vendorman1direxp와 동일하지만 &lt;code&gt;AFS&lt;/code&gt; 를 사용하는 시스템에서는 다를 수 있습니다 . 이식성을 높이려면 makefile에서이 변수 만 사용해야합니다.</target>
        </trans-unit>
        <trans-unit id="dd8b4508a198efebd31cea43e79a82c47aafa7d9" translate="yes" xml:space="preserve">
          <source>This variable is really the same as vendorman3direxp but may differ on those systems using &lt;code&gt;AFS&lt;/code&gt; . For extra portability, only this variable should be used in makefiles.</source>
          <target state="translated">이 변수는 실제로 vendorman3direxp와 동일하지만 &lt;code&gt;AFS&lt;/code&gt; 를 사용하는 시스템에서는 다를 수 있습니다 . 이식성을 높이려면 makefile에서이 변수 만 사용해야합니다.</target>
        </trans-unit>
        <trans-unit id="58c74522c48ef7271151c76300c619a62c9d0241" translate="yes" xml:space="preserve">
          <source>This variable is really the same as vendorscriptexp but may differ on those systems using &lt;code&gt;AFS&lt;/code&gt; . For extra portability, only this variable should be used in makefiles.</source>
          <target state="translated">이 변수는 실제로 vendorscriptexp와 동일하지만 &lt;code&gt;AFS&lt;/code&gt; 를 사용하는 시스템에서는 다를 수 있습니다 . 이식성을 높이려면 makefile에서이 변수 만 사용해야합니다.</target>
        </trans-unit>
        <trans-unit id="810fd248fc75863b9e5a25a636083775a330d4a1" translate="yes" xml:space="preserve">
          <source>This variable is set during Perl startup and is thereafter read-only.</source>
          <target state="translated">이 변수는 Perl 시작 중에 설정되며 이후 읽기 전용입니다.</target>
        </trans-unit>
        <trans-unit id="6899a5826d3dd415cbabf0ad51f385d86e6f15c8" translate="yes" xml:space="preserve">
          <source>This variable is set if the user needs to run ansi2knr. Currently, this is not supported, so we just abort.</source>
          <target state="translated">이 변수는 사용자가 ansi2knr을 실행해야하는 경우 설정됩니다. 현재이 기능은 지원되지 않으므로 중단합니다.</target>
        </trans-unit>
        <trans-unit id="6e16668d152fc94801a0f911730fa94354a063cc" translate="yes" xml:space="preserve">
          <source>This variable is set to &lt;code&gt;true&lt;/code&gt; if &lt;code&gt;AFS&lt;/code&gt; (Andrew File System) is used on the system, &lt;code&gt;false&lt;/code&gt; otherwise. It is possible to override this with a hint value or command line option, but you'd better know what you are doing.</source>
          <target state="translated">시스템에서 &lt;code&gt;AFS&lt;/code&gt; (Andrew File System)가 사용 되면 이 변수는 &lt;code&gt;true&lt;/code&gt; 로 설정되고 그렇지 않으면 &lt;code&gt;false&lt;/code&gt; 로 설정 됩니다. 힌트 값 또는 명령 행 옵션으로이를 대체 할 수 있지만 수행중인 작업을 더 잘 알 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="17b9f4d814d6b072856824ec57ca5295208fac52" translate="yes" xml:space="preserve">
          <source>This variable is set to &lt;code&gt;true&lt;/code&gt; if the user wishes to build a shared libperl, and &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="translated">사용자가 공유 libperl을 빌드하려는 경우이 변수는 &lt;code&gt;true&lt;/code&gt; 로 설정되고 그렇지 않으면 &lt;code&gt;false&lt;/code&gt; 로 설정 됩니다.</target>
        </trans-unit>
        <trans-unit id="13f5a8ad06f8210a3d258db2e56f63f1a0bb3741" translate="yes" xml:space="preserve">
          <source>This variable is set to the pathname of the ranlib program, if it is needed to generate random libraries. Set to &lt;code&gt;:&lt;/code&gt; if ar can generate random libraries or if random libraries are not supported</source>
          <target state="translated">이 변수는 임의 라이브러리를 생성해야하는 경우 ranlib 프로그램의 경로 이름으로 설정됩니다. 로 설정 &lt;code&gt;:&lt;/code&gt; 임의의 라이브러리가 지원되지 않는 경우 또는 AR 임의의 라이브러리를 생성 할 수있는 경우</target>
        </trans-unit>
        <trans-unit id="e326c71eb086e3d88af32485f7ded61e3c037c60" translate="yes" xml:space="preserve">
          <source>This variable is set to true to indicate that perl should relocate @&lt;code&gt;INC&lt;/code&gt; entries at runtime based on the path to the perl binary. Any @&lt;code&gt;INC&lt;/code&gt; paths starting</source>
          <target state="translated">이 변수는 perl이 perl 바이너리의 경로를 기반으로 런타임에 @ &lt;code&gt;INC&lt;/code&gt; 항목을 재배치해야 함을 나타내도록 true로 설정됩니다 . 모든 @ &lt;code&gt;INC&lt;/code&gt; 경로 시작</target>
        </trans-unit>
        <trans-unit id="e96912472278f99e1406c9b20c15ac7755aeeae3" translate="yes" xml:space="preserve">
          <source>This variable is set to true when the user accepts to use vfork. It is set to false when no vfork is available or when the user explicitly requests not to use vfork.</source>
          <target state="translated">이 변수는 사용자가 vfork 사용을 수락하면 true로 설정됩니다. 사용 가능한 vfork가 없거나 사용자가 명시 적으로 vfork를 사용하지 말 것을 요청하면 false로 설정됩니다.</target>
        </trans-unit>
        <trans-unit id="78a76ad3dff1cd7280ddc55d4c477a35972ada82" translate="yes" xml:space="preserve">
          <source>This variable is set to true when the user requires a mechanism that allows the sysadmin to add entries to @&lt;code&gt;INC&lt;/code&gt; at runtime. This variable being set, makes perl run</source>
          <target state="translated">이 변수는 사용자에게 sysadmin이 런타임시 @ &lt;code&gt;INC&lt;/code&gt; 에 항목을 추가 할 수있는 메커니즘이 필요할 때 true로 설정 됩니다. 이 변수를 설정하면 펄이 실행됩니다</target>
        </trans-unit>
        <trans-unit id="a862a983beaa291a37770e6a6356b9960f9204e4" translate="yes" xml:space="preserve">
          <source>This variable is the</source>
          <target state="translated">이 변수는</target>
        </trans-unit>
        <trans-unit id="f7e5e5e3de9c01fc6b721beb3ed50f8f0758ebbf" translate="yes" xml:space="preserve">
          <source>This variable is the same as binexp unless &lt;code&gt;AFS&lt;/code&gt; is running in which case the user is explicitly prompted for it. This variable should always be used in your makefiles for maximum portability.</source>
          <target state="translated">이 변수는 &lt;code&gt;AFS&lt;/code&gt; 가 실행되고 있지 않으면 binexp와 동일하며 ,이 경우 사용자에게 명시 적으로 프롬프트됩니다. 이식성을 극대화하려면이 변수를 항상 makefile에 사용해야합니다.</target>
        </trans-unit>
        <trans-unit id="8c3919634a5ad3e8ed0f82c0eda3efc42d6b3640" translate="yes" xml:space="preserve">
          <source>This variable is the same as scriptdir, but is filename expanded at configuration time, for programs not wanting to bother with it.</source>
          <target state="translated">이 변수는 scriptdir과 동일하지만 구성 시간에 파일 이름이 확장되어 해당 파일을 방해하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="2123b620e822bcdfe3648baf5e383aa0450097bc" translate="yes" xml:space="preserve">
          <source>This variable is the same as the archlib variable, but is filename expanded at configuration time, for convenient use.</source>
          <target state="translated">이 변수는 archlib 변수와 동일하지만 편리한 사용을 위해 구성시 파일 이름이 확장됩니다.</target>
        </trans-unit>
        <trans-unit id="6c0ee0ff94fdfd65be0eadf5caeb8d85f2795739" translate="yes" xml:space="preserve">
          <source>This variable is the same as the html1dir variable, but is filename expanded at configuration time, for convenient use in makefiles.</source>
          <target state="translated">이 변수는 html1dir 변수와 동일하지만 makefile에서 편리하게 사용할 수 있도록 구성시 확장 된 파일 이름입니다.</target>
        </trans-unit>
        <trans-unit id="1d6f2c324ea1c7f18f4e354fe859b70d0620f36a" translate="yes" xml:space="preserve">
          <source>This variable is the same as the html3dir variable, but is filename expanded at configuration time, for convenient use in makefiles.</source>
          <target state="translated">이 변수는 html3dir 변수와 동일하지만 makefile에서 편리하게 사용할 수 있도록 구성시 확장 된 파일 이름입니다.</target>
        </trans-unit>
        <trans-unit id="e1de0cbcfe39efe0be07beb03f93ddf9334e35e7" translate="yes" xml:space="preserve">
          <source>This variable is the same as the man1dir variable, but is filename expanded at configuration time, for convenient use in makefiles.</source>
          <target state="translated">이 변수는 man1dir 변수와 동일하지만 makefile에서 편리하게 사용할 수 있도록 구성시 파일 이름이 확장됩니다.</target>
        </trans-unit>
        <trans-unit id="dd8b85550c57901175ee874061659585fed98949" translate="yes" xml:space="preserve">
          <source>This variable is the same as the man3dir variable, but is filename expanded at configuration time, for convenient use in makefiles.</source>
          <target state="translated">이 변수는 man3dir 변수와 동일하지만 makefile에서 편리하게 사용할 수 있도록 구성시 파일 이름이 확장됩니다.</target>
        </trans-unit>
        <trans-unit id="c4f283164bb5d1bde4a431c6e8f65dd5a43e683c" translate="yes" xml:space="preserve">
          <source>This variable is the same as the sitehtml1dir variable, but is filename expanded at configuration time, for convenient use in makefiles.</source>
          <target state="translated">이 변수는 sitehtml1dir 변수와 동일하지만 makefile에서 편리하게 사용할 수 있도록 구성시 확장 된 파일 이름입니다.</target>
        </trans-unit>
        <trans-unit id="0add776a8d076c56a099328a200dcb183e4e8de8" translate="yes" xml:space="preserve">
          <source>This variable is the same as the sitehtml3dir variable, but is filename expanded at configuration time, for convenient use in makefiles.</source>
          <target state="translated">이 변수는 sitehtml3dir 변수와 동일하지만 makefile에서 편리하게 사용할 수 있도록 구성시 확장 된 파일 이름입니다.</target>
        </trans-unit>
        <trans-unit id="97b9449b8fb9d7b64c271a02aa81ce89a29b3659" translate="yes" xml:space="preserve">
          <source>This variable is the same as the siteman1dir variable, but is filename expanded at configuration time, for convenient use in makefiles.</source>
          <target state="translated">이 변수는 siteman1dir 변수와 동일하지만 makefile에서 편리하게 사용할 수 있도록 구성시 파일 이름이 확장됩니다.</target>
        </trans-unit>
        <trans-unit id="83527f5b42856a247b794e5d16c6d400e55378eb" translate="yes" xml:space="preserve">
          <source>This variable is the same as the siteman3dir variable, but is filename expanded at configuration time, for convenient use in makefiles.</source>
          <target state="translated">이 변수는 siteman3dir 변수와 동일하지만 makefile에서 편리하게 사용할 수 있도록 구성시 파일 이름이 확장됩니다.</target>
        </trans-unit>
        <trans-unit id="26f87cee2d0b058ef6b1b7b2ab4579bade1d8312" translate="yes" xml:space="preserve">
          <source>This variable is the size of a &lt;code&gt;UV&lt;/code&gt; in bytes.</source>
          <target state="translated">이 변수는 &lt;code&gt;UV&lt;/code&gt; 의 크기 ( 바이트)입니다.</target>
        </trans-unit>
        <trans-unit id="3a64db50ff71e0a329ed77aa96ddc41780e6c96c" translate="yes" xml:space="preserve">
          <source>This variable is the size of a Perl &lt;code&gt;NV&lt;/code&gt; in bytes. Note that some floating point formats have unused bytes.</source>
          <target state="translated">이 변수는 Perl &lt;code&gt;NV&lt;/code&gt; 의 크기 ( 바이트)입니다. 일부 부동 소수점 형식에는 사용되지 않은 바이트가 있습니다.</target>
        </trans-unit>
        <trans-unit id="3fcddfc8480fab2e6837b2a2309ba373a3ad0329" translate="yes" xml:space="preserve">
          <source>This variable is the size of an &lt;code&gt;IV&lt;/code&gt; in bytes.</source>
          <target state="translated">이 변수는 &lt;code&gt;IV&lt;/code&gt; 의 크기 ( 바이트)입니다.</target>
        </trans-unit>
        <trans-unit id="509f77ea9800cc190d87729ac5229648994695e7" translate="yes" xml:space="preserve">
          <source>This variable is the size of an I16 in bytes.</source>
          <target state="translated">이 변수는 I16의 크기 (바이트)입니다.</target>
        </trans-unit>
        <trans-unit id="7573d3aaa98e16789e91568e5e20f9dd62c7781a" translate="yes" xml:space="preserve">
          <source>This variable is the size of an I32 in bytes.</source>
          <target state="translated">이 변수는 I32의 크기 (바이트)입니다.</target>
        </trans-unit>
        <trans-unit id="0d4173d02d00bf42b0446cd88a98af8fdad85400" translate="yes" xml:space="preserve">
          <source>This variable is the size of an I64 in bytes.</source>
          <target state="translated">이 변수는 I64의 크기 (바이트)입니다.</target>
        </trans-unit>
        <trans-unit id="4cf88f21c1117b8dcf54efd63224b9e20a3b07a1" translate="yes" xml:space="preserve">
          <source>This variable is the size of an I8 in bytes.</source>
          <target state="translated">이 변수는 I8의 크기 (바이트)입니다.</target>
        </trans-unit>
        <trans-unit id="8fd347f6d28de13c64330af7f091b23a39b60b02" translate="yes" xml:space="preserve">
          <source>This variable is the size of an U16 in bytes.</source>
          <target state="translated">이 변수는 U16의 크기 (바이트)입니다.</target>
        </trans-unit>
        <trans-unit id="c6e9458dee656c7b37b07377ec6d8b3505d200fa" translate="yes" xml:space="preserve">
          <source>This variable is the size of an U32 in bytes.</source>
          <target state="translated">이 변수는 U32의 크기 (바이트)입니다.</target>
        </trans-unit>
        <trans-unit id="bee40658c5a4aeb1200cbc282feb3185d248d855" translate="yes" xml:space="preserve">
          <source>This variable is the size of an U64 in bytes.</source>
          <target state="translated">이 변수는 U64의 크기 (바이트)입니다.</target>
        </trans-unit>
        <trans-unit id="9342a54a087f15eac23a2878ba998e4936f3aded" translate="yes" xml:space="preserve">
          <source>This variable is the size of an U8 in bytes.</source>
          <target state="translated">이 변수는 U8의 크기 (바이트)입니다.</target>
        </trans-unit>
        <trans-unit id="018225ba228dc3f483ce8d8f19998d8fd590abeb" translate="yes" xml:space="preserve">
          <source>This variable is used for the 64-bitness part of $archname.</source>
          <target state="translated">이 변수는 $ archname의 64 비트 부분에 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="cafa7fdb1ab1cb50623ad179359f0208ff71ea47" translate="yes" xml:space="preserve">
          <source>This variable is used internally by Configure to determine the full pathname (if any) of the ar program. After Configure runs, the value is reset to a plain &lt;code&gt;ar&lt;/code&gt; and is not useful.</source>
          <target state="translated">이 변수는 Configure에서 내부적으로 사용하여 ar 프로그램의 전체 경로 이름 (있는 경우)을 판별합니다. Configure 실행 후 값은 일반 &lt;code&gt;ar&lt;/code&gt; 로 재설정되며 유용하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="4a43ffc4e7759d305bc8fcad420c3ecf5147ba0e" translate="yes" xml:space="preserve">
          <source>This variable is used internally by Configure to determine the full pathname (if any) of the awk program. After Configure runs, the value is reset to a plain &lt;code&gt;awk&lt;/code&gt; and is not useful.</source>
          <target state="translated">이 변수는 Configure에서 내부적으로 사용하여 awk 프로그램의 전체 경로 이름 (있는 경우)을 결정합니다. Configure 실행 후에는 값이 일반 &lt;code&gt;awk&lt;/code&gt; 로 재설정되며 유용하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="95cf374646ddb3e9aa4901f073dd57999e9facea" translate="yes" xml:space="preserve">
          <source>This variable is used internally by Configure to determine the full pathname (if any) of the bison program. After Configure runs, the value is reset to a plain &lt;code&gt;bison&lt;/code&gt; and is not useful.</source>
          <target state="translated">이 변수는 Configure에서 내부적으로 사용하여 bison 프로그램의 전체 경로 이름 (있는 경우)을 판별합니다. Configure 실행 후 값은 일반 &lt;code&gt;bison&lt;/code&gt; 재설정되며 유용하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="99af84b2af938a941cf679c645674054506a6e73" translate="yes" xml:space="preserve">
          <source>This variable is used internally by Configure to determine the full pathname (if any) of the byacc program. After Configure runs, the value is reset to a plain &lt;code&gt;byacc&lt;/code&gt; and is not useful.</source>
          <target state="translated">이 변수는 Configure에서 내부적으로 사용하여 byacc 프로그램의 전체 경로 이름 (있는 경우)을 결정합니다. Configure 실행 후 값은 일반 &lt;code&gt;byacc&lt;/code&gt; 로 재설정되며 유용하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="8860a58fab40bbd4b287351313d685ad7736cc01" translate="yes" xml:space="preserve">
          <source>This variable is used internally by Configure to determine the full pathname (if any) of the cat program. After Configure runs, the value is reset to a plain &lt;code&gt;cat&lt;/code&gt; and is not useful.</source>
          <target state="translated">이 변수는 Configure에서 내부적으로 사용하여 cat 프로그램의 전체 경로 이름 (있는 경우)을 결정합니다. Configure 실행 후 값은 일반 &lt;code&gt;cat&lt;/code&gt; 재설정되며 유용하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="3135d55aeb898a8a92ab427f140ec217dc594895" translate="yes" xml:space="preserve">
          <source>This variable is used internally by Configure to determine the full pathname (if any) of the chmod program. After Configure runs, the value is reset to a plain &lt;code&gt;&lt;a href=&quot;functions/chmod&quot;&gt;chmod&lt;/a&gt;&lt;/code&gt; and is not useful.</source>
          <target state="translated">이 변수는 Configure에서 내부적으로 사용하여 chmod 프로그램의 전체 경로 이름 (있는 경우)을 결정합니다. Configure가 실행 된 후 값은 일반 &lt;code&gt;&lt;a href=&quot;functions/chmod&quot;&gt;chmod&lt;/a&gt;&lt;/code&gt; 로 재설정되며 유용하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="b6a7312b6e4f0f9c2b689bf9e247a8f1ded24f90" translate="yes" xml:space="preserve">
          <source>This variable is used internally by Configure to determine the full pathname (if any) of the comm program. After Configure runs, the value is reset to a plain &lt;code&gt;comm&lt;/code&gt; and is not useful.</source>
          <target state="translated">이 변수는 Configure에서 내부적으로 사용하여 comm 프로그램의 전체 경로 이름 (있는 경우)을 결정합니다. Configure가 실행 된 후에는 값이 일반 &lt;code&gt;comm&lt;/code&gt; 재설정되므로 유용하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="9bd5e095ac9bd8ac6418b107fda9174db13910fa" translate="yes" xml:space="preserve">
          <source>This variable is used internally by Configure to determine the full pathname (if any) of the cp program. After Configure runs, the value is reset to a plain &lt;code&gt;cp&lt;/code&gt; and is not useful.</source>
          <target state="translated">이 변수는 Configure에서 내부적으로 사용하여 cp 프로그램의 전체 경로 이름 (있는 경우)을 결정합니다. Configure가 실행 된 후 값은 일반 &lt;code&gt;cp&lt;/code&gt; 로 재설정되며 유용하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="8bb18f0bb346bc78558664c287abeffbf55c011f" translate="yes" xml:space="preserve">
          <source>This variable is used internally by Configure to determine the full pathname (if any) of the cpp program. After Configure runs, the value is reset to a plain &lt;code&gt;cpp&lt;/code&gt; and is not useful.</source>
          <target state="translated">이 변수는 Configure에서 내부적으로 사용하여 cpp 프로그램의 전체 경로 이름 (있는 경우)을 결정합니다. Configure 실행 후 값은 일반 &lt;code&gt;cpp&lt;/code&gt; 로 재설정되며 유용하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="c1c84e1955563d74e3ad50d1d7515422e80d2350" translate="yes" xml:space="preserve">
          <source>This variable is used internally by Configure to determine the full pathname (if any) of the csh program. After Configure runs, the value is reset to a plain &lt;code&gt;csh&lt;/code&gt; and is not useful.</source>
          <target state="translated">이 변수는 Configure에서 내부적으로 사용되어 csh 프로그램의 전체 경로 이름 (있는 경우)을 결정합니다. Configure 실행 후 값은 일반 &lt;code&gt;csh&lt;/code&gt; 로 재설정되며 유용하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="bdd8e5c138ebe8284eadf99c58ad6cd781806fb3" translate="yes" xml:space="preserve">
          <source>This variable is used internally by Configure to determine the full pathname (if any) of the date program. After Configure runs, the value is reset to a plain &lt;code&gt;date&lt;/code&gt; and is not useful.</source>
          <target state="translated">이 변수는 날짜 프로그램의 전체 경로 이름 (있는 경우)을 판별하기 위해 Configure에서 내부적으로 사용됩니다. Configure 실행 후에는 값이 일반 &lt;code&gt;date&lt;/code&gt; 재설정되므로 유용하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="a6ac81210b0bc2a8ad1694015f35ce937a81b0fb" translate="yes" xml:space="preserve">
          <source>This variable is used internally by Configure to determine the full pathname (if any) of the echo program. After Configure runs, the value is reset to a plain &lt;code&gt;echo&lt;/code&gt; and is not useful.</source>
          <target state="translated">이 변수는 Configure에서 내부적으로 사용하여 에코 프로그램의 전체 경로 이름 (있는 경우)을 결정합니다. Configure가 실행 된 후에는 값이 일반 &lt;code&gt;echo&lt;/code&gt; 재설정되며 유용하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="2b6e334c267834e99a027d238d14bba5601ac9b6" translate="yes" xml:space="preserve">
          <source>This variable is used internally by Configure to determine the full pathname (if any) of the egrep program. After Configure runs, the value is reset to a plain &lt;code&gt;egrep&lt;/code&gt; and is not useful.</source>
          <target state="translated">이 변수는 Configure에서 내부적으로 사용하여 egrep 프로그램의 전체 경로 이름 (있는 경우)을 결정합니다. Configure 실행 후 값은 일반 &lt;code&gt;egrep&lt;/code&gt; 으로 재설정되며 유용하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="009c3270bd9f47fb99eefebac6f86488db643c7d" translate="yes" xml:space="preserve">
          <source>This variable is used internally by Configure to determine the full pathname (if any) of the expr program. After Configure runs, the value is reset to a plain &lt;code&gt;expr&lt;/code&gt; and is not useful.</source>
          <target state="translated">이 변수는 Configure에서 내부적으로 사용하여 expr 프로그램의 전체 경로 이름 (있는 경우)을 결정합니다. Configure 실행 후에는 값이 일반 &lt;code&gt;expr&lt;/code&gt; 로 재설정되며 유용하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="7c613e1382a31501efc804fc4d8acaa28f1dfcf7" translate="yes" xml:space="preserve">
          <source>This variable is used internally by Configure to determine the full pathname (if any) of the gmake program. After Configure runs, the value is reset to a plain &lt;code&gt;gmake&lt;/code&gt; and is not useful.</source>
          <target state="translated">이 변수는 Configure에서 gmake 프로그램의 전체 경로 이름 (있는 경우)을 결정하기 위해 내부적으로 사용됩니다. Configure 실행 후 값은 일반 &lt;code&gt;gmake&lt;/code&gt; 로 재설정되며 유용하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="6b40acfb3ed646d47a439f54bcee3b29ef3afcdc" translate="yes" xml:space="preserve">
          <source>This variable is used internally by Configure to determine the full pathname (if any) of the grep program. After Configure runs, the value is reset to a plain &lt;code&gt;&lt;a href=&quot;functions/grep&quot;&gt;grep&lt;/a&gt;&lt;/code&gt; and is not useful.</source>
          <target state="translated">이 변수는 Configure에서 내부적으로 사용하여 grep 프로그램의 전체 경로 이름 (있는 경우)을 결정합니다. Configure 실행 후에는 값이 일반 &lt;code&gt;&lt;a href=&quot;functions/grep&quot;&gt;grep&lt;/a&gt;&lt;/code&gt; 으로 재설정되며 유용하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="9b36018f3c73be8f055672b9bf7a587b92e52bb0" translate="yes" xml:space="preserve">
          <source>This variable is used internally by Configure to determine the full pathname (if any) of the gzip program. After Configure runs, the value is reset to a plain &lt;code&gt;gzip&lt;/code&gt; and is not useful.</source>
          <target state="translated">이 변수는 Configure에서 gzip 프로그램의 전체 경로 이름 (있는 경우)을 결정하기 위해 내부적으로 사용됩니다. Configure 실행 후 값은 일반 &lt;code&gt;gzip&lt;/code&gt; 으로 재설정되며 유용하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="77d721e2749f2412f21272e73849986d4a142e72" translate="yes" xml:space="preserve">
          <source>This variable is used internally by Configure to determine the full pathname (if any) of the less program. After Configure runs, the value is reset to a plain &lt;code&gt;less&lt;/code&gt; and is not useful.</source>
          <target state="translated">이 변수는 Configure에서 내부적으로 사용하여 적은 프로그램의 전체 경로 이름 (있는 경우)을 결정합니다. 구성 실행 후, 값은 일반 재설정은 &lt;code&gt;less&lt;/code&gt; 하고 유용하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="fa1424961bee5eee2bf1426420dae32ea3094721" translate="yes" xml:space="preserve">
          <source>This variable is used internally by Configure to determine the full pathname (if any) of the ln program. After Configure runs, the value is reset to a plain &lt;code&gt;ln&lt;/code&gt; and is not useful.</source>
          <target state="translated">이 변수는 Configure에서 내부적으로 사용하여 ln 프로그램의 전체 경로 이름 (있는 경우)을 결정합니다. Configure 실행 후에는 값이 일반 &lt;code&gt;ln&lt;/code&gt; 으로 재설정되며 유용하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="65f251104aa914960f09050e80f65d4c433487aa" translate="yes" xml:space="preserve">
          <source>This variable is used internally by Configure to determine the full pathname (if any) of the ls program. After Configure runs, the value is reset to a plain &lt;code&gt;ls&lt;/code&gt; and is not useful.</source>
          <target state="translated">이 변수는 ls 프로그램의 전체 경로 이름 (있는 경우)을 판별하기 위해 Configure에서 내부적으로 사용됩니다. Configure 실행 후 값이 일반 &lt;code&gt;ls&lt;/code&gt; 로 재설정되고 유용하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="1b5ee5bc0e134b5f95d85702e6e2d398289142fc" translate="yes" xml:space="preserve">
          <source>This variable is used internally by Configure to determine the full pathname (if any) of the make program. After Configure runs, the value is reset to a plain &lt;code&gt;make&lt;/code&gt; and is not useful.</source>
          <target state="translated">이 변수는 Configure에서 make 프로그램의 전체 경로 이름 (있는 경우)을 결정하기 위해 내부적으로 사용됩니다. Configure 실행 후에는 값이 일반 &lt;code&gt;make&lt;/code&gt; 재설정되며 유용하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="744ad0880cace18fa215312fdf99a49919ec701f" translate="yes" xml:space="preserve">
          <source>This variable is used internally by Configure to determine the full pathname (if any) of the mkdir program. After Configure runs, the value is reset to a plain &lt;code&gt;&lt;a href=&quot;functions/mkdir&quot;&gt;mkdir&lt;/a&gt;&lt;/code&gt; and is not useful.</source>
          <target state="translated">이 변수는 Configure에서 내부적으로 사용하여 mkdir 프로그램의 전체 경로 이름 (있는 경우)을 판별합니다. Configure가 실행 된 후 값은 일반 &lt;code&gt;&lt;a href=&quot;functions/mkdir&quot;&gt;mkdir&lt;/a&gt;&lt;/code&gt; 로 재설정되며 유용하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="7e4fd88b59349429f1ba846d193845169632f0ae" translate="yes" xml:space="preserve">
          <source>This variable is used internally by Configure to determine the full pathname (if any) of the more program. After Configure runs, the value is reset to a plain &lt;code&gt;more&lt;/code&gt; and is not useful.</source>
          <target state="translated">이 변수는 Configure에서 내부적으로 사용하여 추가 프로그램의 전체 경로 이름 (있는 경우)을 결정합니다. 구성 실행 후, 값은 일반으로 재설정 &lt;code&gt;more&lt;/code&gt; 유용하지 않다.</target>
        </trans-unit>
        <trans-unit id="7a82b160af8bcd4e76718aed64697ee09d69e794" translate="yes" xml:space="preserve">
          <source>This variable is used internally by Configure to determine the full pathname (if any) of the nm program. After Configure runs, the value is reset to a plain &lt;code&gt;nm&lt;/code&gt; and is not useful.</source>
          <target state="translated">이 변수는 Configure에서 내부적으로 사용하여 nm 프로그램의 전체 경로 이름 (있는 경우)을 결정합니다. Configure 실행 후 값은 일반 &lt;code&gt;nm&lt;/code&gt; 로 재설정되며 유용하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="4d5aaade193ddd818ef2032ec15984484a7dde1c" translate="yes" xml:space="preserve">
          <source>This variable is used internally by Configure to determine the full pathname (if any) of the nroff program. After Configure runs, the value is reset to a plain &lt;code&gt;nroff&lt;/code&gt; and is not useful.</source>
          <target state="translated">이 변수는 Configure에서 내부적으로 사용하여 nroff 프로그램의 전체 경로 이름 (있는 경우)을 결정합니다. Configure 실행 후 값은 일반 &lt;code&gt;nroff&lt;/code&gt; 로 재설정되며 유용하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="2f0926218d0bb1f93722013193d4320b8bb5ba4f" translate="yes" xml:space="preserve">
          <source>This variable is used internally by Configure to determine the full pathname (if any) of the perl program. After Configure runs, the value is reset to a plain &lt;code&gt;perl&lt;/code&gt; and is not useful.</source>
          <target state="translated">이 변수는 Configure에서 내부적으로 사용하여 perl 프로그램의 전체 경로 이름 (있는 경우)을 판별합니다. Configure가 실행 된 후에는 값이 일반 &lt;code&gt;perl&lt;/code&gt; 로 재설정되며 유용하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="aa7fe1387877c317234ea7e4c47059e69955a1ac" translate="yes" xml:space="preserve">
          <source>This variable is used internally by Configure to determine the full pathname (if any) of the pg program. After Configure runs, the value is reset to a plain &lt;code&gt;pg&lt;/code&gt; and is not useful.</source>
          <target state="translated">이 변수는 Configure에서 내부적으로 사용하여 pg 프로그램의 전체 경로 이름 (있는 경우)을 결정합니다. Configure 실행 후에는 값이 일반 &lt;code&gt;pg&lt;/code&gt; 로 재설정되며 유용하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="98b71e9251a2652da024c60ecebea65afc6661b9" translate="yes" xml:space="preserve">
          <source>This variable is used internally by Configure to determine the full pathname (if any) of the rm program. After Configure runs, the value is reset to a plain &lt;code&gt;rm&lt;/code&gt; and is not useful.</source>
          <target state="translated">이 변수는 Configure에서 내부적으로 사용하여 rm 프로그램의 전체 경로 이름 (있는 경우)을 결정합니다. Configure 실행 후 값은 일반 &lt;code&gt;rm&lt;/code&gt; 으로 재설정되며 유용하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="38755f22f1cc16f6da8a7c53276b2d7dfe2983be" translate="yes" xml:space="preserve">
          <source>This variable is used internally by Configure to determine the full pathname (if any) of the sed program. After Configure runs, the value is reset to a plain &lt;code&gt;sed&lt;/code&gt; and is not useful.</source>
          <target state="translated">이 변수는 Configure에서 내부적으로 사용하여 sed 프로그램의 전체 경로 이름 (있는 경우)을 결정합니다. Configure 실행 후 값은 일반 &lt;code&gt;sed&lt;/code&gt; 로 재설정되며 유용하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="7b7165488c50ef7a6c02f7ed5de71b2345e8f9b6" translate="yes" xml:space="preserve">
          <source>This variable is used internally by Configure to determine the full pathname (if any) of the sort program. After Configure runs, the value is reset to a plain &lt;code&gt;&lt;a href=&quot;functions/sort&quot;&gt;sort&lt;/a&gt;&lt;/code&gt; and is not useful.</source>
          <target state="translated">이 변수는 Configure에서 내부적으로 사용하여 정렬 프로그램의 전체 경로 이름 (있는 경우)을 결정합니다. Configure가 실행 된 후에는 값이 일반 &lt;code&gt;&lt;a href=&quot;functions/sort&quot;&gt;sort&lt;/a&gt;&lt;/code&gt; 재설정되므로 유용하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="53aff58e0d1462752cc4e7d201d457805a2f1086" translate="yes" xml:space="preserve">
          <source>This variable is used internally by Configure to determine the full pathname (if any) of the test program. After Configure runs, the value is reset to a plain &lt;code&gt;test&lt;/code&gt; and is not useful.</source>
          <target state="translated">이 변수는 Configure에서 내부적으로 사용하여 테스트 프로그램의 전체 경로 이름 (있는 경우)을 결정합니다. Configure 실행 후 값은 일반 &lt;code&gt;test&lt;/code&gt; 재설정되며 유용하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="cb486fbb72146b39bd866df9d65908c560cacd8d" translate="yes" xml:space="preserve">
          <source>This variable is used internally by Configure to determine the full pathname (if any) of the touch program. After Configure runs, the value is reset to a plain &lt;code&gt;touch&lt;/code&gt; and is not useful.</source>
          <target state="translated">이 변수는 터치 프로그램의 전체 경로 이름 (있는 경우)을 결정하기 위해 Configure에서 내부적으로 사용합니다. Configure 실행 후 값이 일반 &lt;code&gt;touch&lt;/code&gt; 재설정되고 유용하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="27dfd9853f59e3abc8b26fedaaf1d68c1bb2ebbb" translate="yes" xml:space="preserve">
          <source>This variable is used internally by Configure to determine the full pathname (if any) of the tr program. After Configure runs, the value is reset to a plain &lt;code&gt;&lt;a href=&quot;functions/tr&quot;&gt;tr&lt;/a&gt;&lt;/code&gt; and is not useful.</source>
          <target state="translated">이 변수는 Configure에서 내부적으로 사용하여 tr 프로그램의 전체 경로 이름 (있는 경우)을 결정합니다. Configure 실행 후 값은 일반 &lt;code&gt;&lt;a href=&quot;functions/tr&quot;&gt;tr&lt;/a&gt;&lt;/code&gt; 로 재설정되며 유용하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="72c85eba28014b20220c69c6783d2f9366450300" translate="yes" xml:space="preserve">
          <source>This variable is used internally by Configure to determine the full pathname (if any) of the uname program. After Configure runs, the value is reset to a plain &lt;code&gt;uname&lt;/code&gt; and is not useful.</source>
          <target state="translated">이 변수는 Configure에서 내부적으로 사용하여 uname 프로그램의 전체 경로 이름 (있는 경우)을 결정합니다. Configure가 실행 된 후에는 값이 일반 &lt;code&gt;uname&lt;/code&gt; 으로 재설정되며 유용하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="3f9914faa62081d6431f26e1217ca40b4ce3a973" translate="yes" xml:space="preserve">
          <source>This variable is used internally by Configure to determine the full pathname (if any) of the uniq program. After Configure runs, the value is reset to a plain &lt;code&gt;uniq&lt;/code&gt; and is not useful.</source>
          <target state="translated">이 변수는 Configure에서 내부적으로 사용하여 uniq 프로그램의 전체 경로 이름 (있는 경우)을 결정합니다. Configure 실행 후 값은 일반 &lt;code&gt;uniq&lt;/code&gt; 로 재설정되며 유용하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="45d7e075b81b0f7f804813b898bc650e9d75f256" translate="yes" xml:space="preserve">
          <source>This variable is used internally by Configure to determine the full pathname (if any) of the zip program. After Configure runs, the value is reset to a plain &lt;code&gt;zip&lt;/code&gt; and is not useful.</source>
          <target state="translated">이 변수는 Zip 프로그램의 전체 경로 이름 (있는 경우)을 판별하기 위해 Configure에서 내부적으로 사용합니다. Configure 실행 후 값은 일반 &lt;code&gt;zip&lt;/code&gt; 으로 재설정되며 유용하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="571e3cc68685a935369dc84741a86b8a5366fb42" translate="yes" xml:space="preserve">
          <source>This variable is usually the same as scriptdirexp, unless you are on a system running &lt;code&gt;AFS&lt;/code&gt; , in which case they may differ slightly. You should always use this variable within your makefiles for portability.</source>
          <target state="translated">&lt;code&gt;AFS&lt;/code&gt; 를 실행중인 시스템에 있지 않으면이 변수는 보통 scriptdirexp와 동일합니다.이 경우 약간 다를 수 있습니다. 이식성을 위해 항상 makefile 내에서이 변수를 사용해야합니다.</target>
        </trans-unit>
        <trans-unit id="b3aa39786b9d4d7129f7471ce2e3b36215c549da" translate="yes" xml:space="preserve">
          <source>This variable is usually the same as sitebinexp, unless you are on a system running &lt;code&gt;AFS&lt;/code&gt; , in which case they may differ slightly. You should always use this variable within your makefiles for portability.</source>
          <target state="translated">이 변수는 &lt;code&gt;AFS&lt;/code&gt; 를 실행하는 시스템에 있지 않은 경우 일반적으로 sitebinexp와 동일하며 ,이 경우에는 약간 다를 수 있습니다. 이식성을 위해 항상 makefile 내에서이 변수를 사용해야합니다.</target>
        </trans-unit>
        <trans-unit id="45b52c0cb08be0e04216436b97b6099f82b1dd20" translate="yes" xml:space="preserve">
          <source>This variable is usually the same as sitescriptexp, unless you are on a system running &lt;code&gt;AFS&lt;/code&gt; , in which case they may differ slightly. You should always use this variable within your makefiles for portability.</source>
          <target state="translated">이 변수는 &lt;code&gt;AFS&lt;/code&gt; 를 실행하는 시스템에 있지 않은 경우 일반적으로 sitescriptexp와 동일하며 ,이 경우 약간 다를 수 있습니다. 이식성을 위해 항상 makefile 내에서이 변수를 사용해야합니다.</target>
        </trans-unit>
        <trans-unit id="0e0d79399e6ff81639ca7d69ba6ebfee357f7c2a" translate="yes" xml:space="preserve">
          <source>This variable makes &lt;code&gt;carp()&lt;/code&gt; and &lt;code&gt;croak()&lt;/code&gt; generate stack backtraces just like &lt;code&gt;cluck()&lt;/code&gt; and &lt;code&gt;confess()&lt;/code&gt; . This is how &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; Carp 'verbose'&lt;/code&gt; is implemented internally.</source>
          <target state="translated">이 변수는 &lt;code&gt;carp()&lt;/code&gt; 및 &lt;code&gt;croak()&lt;/code&gt; &lt;code&gt;cluck()&lt;/code&gt; 및 &lt;code&gt;confess()&lt;/code&gt; 와 같이 스택 역 추적을 생성하도록 합니다. 이것은 어떻게 &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; Carp 'verbose'&lt;/code&gt; 내부적으로 구현됩니다.</target>
        </trans-unit>
        <trans-unit id="1c9399d4b0d54d58afe31981aca3b57c88106d7e" translate="yes" xml:space="preserve">
          <source>This variable must precede the normal include path to get the right one, as in</source>
          <target state="translated">이 변수는 다음과 같이 올바른 경로를 얻으려면 일반 포함 경로 앞에 와야합니다.</target>
        </trans-unit>
        <trans-unit id="47d3e94fd5e31189a0f4a13c643cffba5bdfecb4" translate="yes" xml:space="preserve">
          <source>This variable provides direct access to VMS status values in vaxc$errno, which are often more specific than the generic Unix-style error messages in &lt;code&gt;$!&lt;/code&gt; . Its numeric value is the value of vaxc$errno, and its string value is the corresponding VMS message string, as retrieved by sys$getmsg(). Setting &lt;code&gt;$^E&lt;/code&gt; sets vaxc$errno to the value specified.</source>
          <target state="translated">이 변수는 vaxc $ errno의 VMS 상태 값에 대한 직접 액세스를 제공합니다.이 값은 &lt;code&gt;$!&lt;/code&gt; 의 일반 Unix 스타일 오류 메시지보다 더 구체적입니다 . . 숫자 값은 vaxc $ errno의 값이고 문자열 값은 sys $ getmsg ()에 의해 검색되는 해당 VMS 메시지 문자열입니다. 설정 &lt;code&gt;$^E&lt;/code&gt; 지정된 값으로 설정 vaxc $의 errno는.</target>
        </trans-unit>
        <trans-unit id="c65e2bf13c9e205e35cd67ed1f92c6d441a3ed5c" translate="yes" xml:space="preserve">
          <source>This variable saves the result from configure if generated binaries are in &lt;code&gt;ELF&lt;/code&gt; format. Only set to defined when the test has actually been performed, and the result was positive.</source>
          <target state="translated">이 변수는 생성 된 바이너리가 &lt;code&gt;ELF&lt;/code&gt; 형식 인 경우 configure의 결과를 저장 합니다. 테스트가 실제로 수행되고 결과가 긍정적일 때만 정의로 설정되었습니다.</target>
        </trans-unit>
        <trans-unit id="9b39166bbb9c952b273549b70649d44448918c67" translate="yes" xml:space="preserve">
          <source>This variable sets a general argument formatter to display references. Plain scalars and objects that implement &lt;code&gt;CARP_TRACE&lt;/code&gt; will not go through this formatter. Calling &lt;code&gt;Carp&lt;/code&gt; from within this function is not supported.</source>
          <target state="translated">이 변수는 참조를 표시하도록 일반 인수 포맷터를 설정합니다. &lt;code&gt;CARP_TRACE&lt;/code&gt; 를 구현하는 일반 스칼라 및 객체는 이 포맷터를 거치지 않습니다. 이 기능 내에서 &lt;code&gt;Carp&lt;/code&gt; 호출 은 지원되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="311cafbd7b64d08d13202dff34007567f089a3c9" translate="yes" xml:space="preserve">
          <source>This variable should be non-empty if non-versioned shared libraries (</source>
          <target state="translated">버전이 지정되지 않은 공유 라이브러리 인 경우이 변수는 비어 있지 않아야합니다 (</target>
        </trans-unit>
        <trans-unit id="b8f7f59f92a41a309f2960753f9fe56dca1e1ebd" translate="yes" xml:space="preserve">
          <source>This variable shows if the loader accepts scripts in the form of -Wl,--version-script=</source>
          <target state="translated">이 변수는 로더가 -Wl,-version-script = 형식의 스크립트를 허용하는지 표시합니다.</target>
        </trans-unit>
        <trans-unit id="d16ff2badb89345a88dec337cf8812f1b2ae4d77" translate="yes" xml:space="preserve">
          <source>This variable specifies the list of subdirectories in over which</source>
          <target state="translated">이 변수는 하위 디렉토리 목록을 지정합니다.</target>
        </trans-unit>
        <trans-unit id="dd28be9b0220074830139f9210189ef37322c879" translate="yes" xml:space="preserve">
          <source>This variable stores the index of the first element in an array, and of the first character in a substring. The default is 0, but you could theoretically set it to 1 to make Perl behave more like &lt;b&gt;awk&lt;/b&gt; (or Fortran) when subscripting and when evaluating the index() and substr() functions.</source>
          <target state="translated">이 변수는 첫 번째 요소의 색인을 배열에 저장하고 첫 번째 문자의 색인을 하위 문자열에 저장합니다. 기본값은 0이지만, 이론적으로는 첨자를 작성할 때와 index () 및 substr () 함수를 평가할 때 Perl이 &lt;b&gt;awk&lt;/b&gt; (또는 Fortran) 처럼 동작하도록 1로 설정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="00bf900bc17346d76f185309081cf1ecab7829b9" translate="yes" xml:space="preserve">
          <source>This variable tells further Configure units whether your sh can handle # comments.</source>
          <target state="translated">이 변수는 sh가 주석을 처리 할 수 ​​있는지 여부를 추가 구성 단위에 알려줍니다.</target>
        </trans-unit>
        <trans-unit id="907ba32114e33d7fdd5ef788a526df450d19f047" translate="yes" xml:space="preserve">
          <source>This variable tells the name of the array holding the stdio streams. Usual values include _iob, __iob, and __sF.</source>
          <target state="translated">이 변수는 stdio 스트림을 보유하는 배열의 이름을 알려줍니다. 일반적인 값은 _iob, __iob 및 __sF입니다.</target>
        </trans-unit>
        <trans-unit id="494f95065eda468dab54f63ca3320964e75f3c2c" translate="yes" xml:space="preserve">
          <source>This variable tells whether Perl should be installed also as</source>
          <target state="translated">이 변수는 Perl을 다음과 같이 설치해야하는지 여부를 알려줍니다.</target>
        </trans-unit>
        <trans-unit id="a037df9326698e2d5f1829d2c9bf56c0ce29dce7" translate="yes" xml:space="preserve">
          <source>This variable tells whether the vendorprefix and consequently other vendor* paths are in use.</source>
          <target state="translated">이 변수는 vendorprefix 및 결과적으로 다른 vendor * 경로가 사용 중인지 여부를 알려줍니다.</target>
        </trans-unit>
        <trans-unit id="43b0644e7ef62be40223c2fd3c8ff3478bee6235" translate="yes" xml:space="preserve">
          <source>This variable tells whether there is an array holding the stdio streams.</source>
          <target state="translated">이 변수는 stdio 스트림을 보유하는 배열이 있는지 여부를 알려줍니다.</target>
        </trans-unit>
        <trans-unit id="c3a3ba987aaf3c91c970660de1c1716dc849dee5" translate="yes" xml:space="preserve">
          <source>This variable tells whether you must access character data through U32-aligned pointers.</source>
          <target state="translated">이 변수는 U32 정렬 포인터를 통해 문자 데이터에 액세스해야하는지 여부를 알려줍니다.</target>
        </trans-unit>
        <trans-unit id="e0df6b39148d59f299e4cde68d7e93d1379e4cd9" translate="yes" xml:space="preserve">
          <source>This variable was added in Perl 5.003.</source>
          <target state="translated">이 변수는 Perl 5.003에서 추가되었습니다.</target>
        </trans-unit>
        <trans-unit id="2dd0be83736a8bae79e56b1656c3b08d37e549b1" translate="yes" xml:space="preserve">
          <source>This variable was added in Perl 5.004.</source>
          <target state="translated">이 변수는 Perl 5.004에서 추가되었습니다.</target>
        </trans-unit>
        <trans-unit id="311fc40d984f46456ec94abb16d77586cc2d734e" translate="yes" xml:space="preserve">
          <source>This variable was added in Perl 5.005.</source>
          <target state="translated">이 변수는 Perl 5.005에서 추가되었습니다.</target>
        </trans-unit>
        <trans-unit id="247153dff2b48a81ffd2df708abe3a8417462536" translate="yes" xml:space="preserve">
          <source>This variable was added in Perl 5.14.0.</source>
          <target state="translated">이 변수는 Perl 5.14.0에서 추가되었습니다.</target>
        </trans-unit>
        <trans-unit id="081a7d1c509461c2c73842efcf1f979d8d59e806" translate="yes" xml:space="preserve">
          <source>This variable was added in Perl 5.8.2.</source>
          <target state="translated">이 변수는 Perl 5.8.2에서 추가되었습니다.</target>
        </trans-unit>
        <trans-unit id="2ab68154504ebd4131559dd9fab0a84f44da18fe" translate="yes" xml:space="preserve">
          <source>This variable was added in Perl v5.10.0.</source>
          <target state="translated">이 변수는 Perl v5.10.0에서 추가되었습니다.</target>
        </trans-unit>
        <trans-unit id="529ae72a49a47a40fc24b807262667413ffe7c41" translate="yes" xml:space="preserve">
          <source>This variable was added in Perl v5.18.0.</source>
          <target state="translated">이 변수는 Perl v5.18.0에서 추가되었습니다.</target>
        </trans-unit>
        <trans-unit id="4737556119a019968cc8f1307ac337ee3bdb60e8" translate="yes" xml:space="preserve">
          <source>This variable was added in Perl v5.6.0.</source>
          <target state="translated">이 변수는 Perl v5.6.0에서 추가되었습니다.</target>
        </trans-unit>
        <trans-unit id="2f3edc2fce9c9a390050064f26e73b3803343968" translate="yes" xml:space="preserve">
          <source>This variable was added in Perl v5.8.0.</source>
          <target state="translated">이 변수는 Perl v5.8.0에서 추가되었습니다.</target>
        </trans-unit>
        <trans-unit id="3ca2db4875ccc44a7fc8462985ed1e8567dd734b" translate="yes" xml:space="preserve">
          <source>This variable was added in Perl v5.8.2.</source>
          <target state="translated">이 변수는 Perl v5.8.2에서 추가되었습니다.</target>
        </trans-unit>
        <trans-unit id="6bf43c1820932f7ae57b0f3470f15e621c27c904" translate="yes" xml:space="preserve">
          <source>This variable was added in Perl v5.8.8.</source>
          <target state="translated">이 변수는 Perl v5.8.8에서 추가되었습니다.</target>
        </trans-unit>
        <trans-unit id="8b26834cf767edc73ca24b342d850bf2cb435db7" translate="yes" xml:space="preserve">
          <source>This variable was added in Perl v5.8.9. It is subject to change or removal without notice, but is currently used to avoid recalculating the boundaries of multi-byte UTF-8-encoded characters.</source>
          <target state="translated">이 변수는 Perl v5.8.9에서 추가되었습니다. 사전 통지없이 변경되거나 제거 될 수 있지만 현재 멀티 바이트 UTF-8 인코딩 문자의 경계를 다시 계산하지 않도록 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="5043598cad5663df819749d9e02cff0d9f0ce8c1" translate="yes" xml:space="preserve">
          <source>This variable,</source>
          <target state="translated">이 변수는</target>
        </trans-unit>
        <trans-unit id="1e7208c83b365a198f309e4e5126878f19c7e8ae" translate="yes" xml:space="preserve">
          <source>This variable, if defined, contains the string used by stdio to format 64-bit decimal numbers (format &lt;code&gt;d&lt;/code&gt; ) for output.</source>
          <target state="translated">이 변수는 정의 된 경우 stdio에서 64 비트 10 진수 형식 ( &lt;code&gt;d&lt;/code&gt; 형식 )을 출력에 사용하는 문자열을 포함합니다 .</target>
        </trans-unit>
        <trans-unit id="8ae5f938ab7a5d83a52240928c9fc8f756451386" translate="yes" xml:space="preserve">
          <source>This variable, if defined, contains the string used by stdio to format 64-bit decimal numbers (format &lt;code&gt;i&lt;/code&gt; ) for output.</source>
          <target state="translated">이 변수는 정의 된 경우 stdio에서 64 비트 10 진수 형식 ( &lt;code&gt;i&lt;/code&gt; 형식 )을 출력에 사용하는 문자열을 포함합니다 .</target>
        </trans-unit>
        <trans-unit id="b81a10e07e19ecd9ea940b8094c09118247d9976" translate="yes" xml:space="preserve">
          <source>This variable, if defined, contains the string used by stdio to format 64-bit hExADECimAl numbers (format &lt;code&gt;X&lt;/code&gt; ) for output. The &lt;code&gt;U&lt;/code&gt; in the name is to separate this from sPRIx64 so that even case-blind systems can see the difference.</source>
          <target state="translated">이 변수는 정의 된 경우 stdio에서 64 비트 hExADECimAl 숫자 형식 ( &lt;code&gt;X&lt;/code&gt; 형식 )을 출력에 사용하는 문자열을 포함합니다 . 이름 의 &lt;code&gt;U&lt;/code&gt; 는 이것을 sPRIx64와 분리하여 대소 맹인 시스템에서도 차이를 볼 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="9ec40980af277a53203a731f456671009736e566" translate="yes" xml:space="preserve">
          <source>This variable, if defined, contains the string used by stdio to format 64-bit hexadecimal numbers (format &lt;code&gt;x&lt;/code&gt; ) for output.</source>
          <target state="translated">이 변수는 정의 된 경우 stdio에서 출력을 위해 64 비트 16 진수 (형식 &lt;code&gt;x&lt;/code&gt; ) 를 형식화하는 데 사용하는 문자열을 포함합니다 .</target>
        </trans-unit>
        <trans-unit id="31b88a2a561747708142859b385e21cffab2ae43" translate="yes" xml:space="preserve">
          <source>This variable, if defined, contains the string used by stdio to format 64-bit octal numbers (format &lt;code&gt;o&lt;/code&gt; ) for output.</source>
          <target state="translated">이 변수는 정의 된 경우 stdio에서 출력을 위해 64 비트 8 진수 (형식 &lt;code&gt;o&lt;/code&gt; ) 를 형식화하는 데 사용하는 문자열을 포함합니다 .</target>
        </trans-unit>
        <trans-unit id="8e6ccb1849bdac1320c428c08feac83669cad758" translate="yes" xml:space="preserve">
          <source>This variable, if defined, contains the string used by stdio to format 64-bit unsigned decimal numbers (format &lt;code&gt;u&lt;/code&gt; ) for output.</source>
          <target state="translated">이 변수는 정의 된 경우 stdio에서 64 비트 부호없는 10 진수 형식 ( &lt;code&gt;u&lt;/code&gt; 형식 )을 출력에 사용하는 문자열을 포함합니다 .</target>
        </trans-unit>
        <trans-unit id="222bb5647e9123694b13cf58d9917c77bccc21a6" translate="yes" xml:space="preserve">
          <source>This variable, if defined, contains the string used by stdio to format long doubles (format &lt;code&gt;E&lt;/code&gt; ) for output. The &lt;code&gt;U&lt;/code&gt; in the name is to separate this from sPRIeldbl so that even case-blind systems can see the difference.</source>
          <target state="translated">이 변수는 정의 된 경우 stdio에서 출력을 위해 long double (형식 &lt;code&gt;E&lt;/code&gt; ) 을 형식화하는 데 사용하는 문자열을 포함합니다 . 이름 의 &lt;code&gt;U&lt;/code&gt; 는 이것을 sPRIeldbl과 분리하여 대소-맹인 시스템에서도 차이를 볼 수 있도록합니다.</target>
        </trans-unit>
        <trans-unit id="19eff6d51cf0aa4f54340246c25b4fe22c0a7043" translate="yes" xml:space="preserve">
          <source>This variable, if defined, contains the string used by stdio to format long doubles (format &lt;code&gt;F&lt;/code&gt; ) for output. The &lt;code&gt;U&lt;/code&gt; in the name is to separate this from sPRIfldbl so that even case-blind systems can see the difference.</source>
          <target state="translated">이 변수는 정의 된 경우 stdio에서 출력을 위해 long double (형식 &lt;code&gt;F&lt;/code&gt; ) 을 형식화하는 데 사용하는 문자열을 포함합니다 . 이름 의 &lt;code&gt;U&lt;/code&gt; 는 이것을 sPRIfldbl과 분리하여 대소-맹인 시스템에서도 차이를 볼 수 있도록합니다.</target>
        </trans-unit>
        <trans-unit id="b6d81738452d04eab1f933bf7232ed90f2df15fa" translate="yes" xml:space="preserve">
          <source>This variable, if defined, contains the string used by stdio to format long doubles (format &lt;code&gt;G&lt;/code&gt; ) for output. The &lt;code&gt;U&lt;/code&gt; in the name is to separate this from sPRIgldbl so that even case-blind systems can see the difference.</source>
          <target state="translated">이 변수는 정의 된 경우 stdio에서 출력을 위해 long double (형식 &lt;code&gt;G&lt;/code&gt; ) 을 형식화하는 데 사용하는 문자열을 포함합니다 . 이름 의 &lt;code&gt;U&lt;/code&gt; 는 이것을 sPRIgldbl과 분리하여 대소-맹인 시스템에서도 차이를 볼 수 있도록합니다.</target>
        </trans-unit>
        <trans-unit id="4115d1a6f75fdc4020d61ac608e2060b9c155a10" translate="yes" xml:space="preserve">
          <source>This variable, if defined, contains the string used by stdio to format long doubles (format &lt;code&gt;e&lt;/code&gt; ) for output.</source>
          <target state="translated">이 변수는 정의 된 경우 stdio에서 출력을 위해 long double (형식 &lt;code&gt;e&lt;/code&gt; ) 을 형식화하는 데 사용하는 문자열을 포함합니다 .</target>
        </trans-unit>
        <trans-unit id="01930f22e76b74b59d1c31877d972228ff93ba53" translate="yes" xml:space="preserve">
          <source>This variable, if defined, contains the string used by stdio to format long doubles (format &lt;code&gt;f&lt;/code&gt; ) for input.</source>
          <target state="translated">이 변수는 정의 된 경우 입력을 위해 long double (형식 &lt;code&gt;f&lt;/code&gt; )을 형식화하기 위해 stdio에서 사용하는 문자열을 포함합니다 .</target>
        </trans-unit>
        <trans-unit id="9cb55332554b23f3aa4a22de66b9e7bcac1d0693" translate="yes" xml:space="preserve">
          <source>This variable, if defined, contains the string used by stdio to format long doubles (format &lt;code&gt;f&lt;/code&gt; ) for output.</source>
          <target state="translated">이 변수는 정의 된 경우 stdio에서 출력을 위해 long double (형식 &lt;code&gt;f&lt;/code&gt; ) 을 형식화하는 데 사용하는 문자열을 포함합니다 .</target>
        </trans-unit>
        <trans-unit id="89b45d6978a0a0f110d2a827f50454d233b58449" translate="yes" xml:space="preserve">
          <source>This variable, if defined, contains the string used by stdio to format long doubles (format &lt;code&gt;g&lt;/code&gt; ) for output.</source>
          <target state="translated">이 변수는 정의 된 경우 stdio에서 출력을 위해 long double (형식 &lt;code&gt;g&lt;/code&gt; ) 을 형식화하는 데 사용하는 문자열을 포함합니다 .</target>
        </trans-unit>
        <trans-unit id="9c4b2499caf3daffc937f7d1cd2b93bf83f7b0ec" translate="yes" xml:space="preserve">
          <source>This variable, if defined, encodes the type of a double: 1 = &lt;code&gt;IEEE&lt;/code&gt; 754 32-bit big little endian, 2 = &lt;code&gt;IEEE&lt;/code&gt; 754 32-bit big big endian, 3 = &lt;code&gt;IEEE&lt;/code&gt; 754 64-bit big little endian, 4 = &lt;code&gt;IEEE&lt;/code&gt; 754 64-bit big big endian, 5 = &lt;code&gt;IEEE&lt;/code&gt; 754 128-bit big little endian, 6 = &lt;code&gt;IEEE&lt;/code&gt; 754 128-bit big big endian, 7 = &lt;code&gt;IEEE&lt;/code&gt; 754 64-bit big mixed endian le-be, 8 = &lt;code&gt;IEEE&lt;/code&gt; 754 64-bit big mixed endian be-le, -1 = unknown format.</source>
          <target state="translated">이 변수는 정의 된 경우 double 유형을 인코딩합니다. 1 = &lt;code&gt;IEEE&lt;/code&gt; 754 32 비트 빅 리틀 엔디안, 2 = &lt;code&gt;IEEE&lt;/code&gt; 754 32 비트 빅 빅 엔디안, 3 = &lt;code&gt;IEEE&lt;/code&gt; 754 64 비트 빅 리틀 엔디안, 4 = &lt;code&gt;IEEE&lt;/code&gt; 754 64 비트 빅 빅 엔디안, 5 = &lt;code&gt;IEEE&lt;/code&gt; 754 128 비트 빅 리틀 엔디안, 6 = &lt;code&gt;IEEE&lt;/code&gt; 754 128 비트 빅 빅 엔디안, 7 = &lt;code&gt;IEEE&lt;/code&gt; 754 64 비트 빅 혼합 엔디안 le-be, 8 = &lt;code&gt;IEEE&lt;/code&gt; 754 64 비트 큰 혼합 엔디안 벨 -1 = 알 수없는 형식.</target>
        </trans-unit>
        <trans-unit id="6d1304e84a7f4ed50e62aa480c26a3922856d446" translate="yes" xml:space="preserve">
          <source>This variable, if defined, encodes the type of a long double: 0 = double, 1 = &lt;code&gt;IEEE&lt;/code&gt; 754 128-bit big little endian, 2 = &lt;code&gt;IEEE&lt;/code&gt; 754 128-bit big big endian, 3 = x86 80-bit little endian, 4 = x86 80-bit big endian, 5 = double-double 128-bit little endian, 6 = double-double 128-bit big endian, -1 = unknown format.</source>
          <target state="translated">이 변수는 정의 된 경우 long double의 유형을 인코딩합니다. 0 = double, 1 = &lt;code&gt;IEEE&lt;/code&gt; 754 128 비트 빅 리틀 엔디안, 2 = &lt;code&gt;IEEE&lt;/code&gt; 754 128 비트 빅 빅 엔디안, 3 = x86 80 비트 리틀 엔디안, 4 = x86 80 비트 빅 엔디안, 5 = 더블 더블 128 비트 리틀 엔디안, 6 = 더블 더블 128 비트 빅 엔디안, -1 = 알 수없는 형식입니다.</target>
        </trans-unit>
        <trans-unit id="2a280f8227b0adcb74f96bd4a84586fde60a2c87" translate="yes" xml:space="preserve">
          <source>This variable, if defined, encodes the type of a quad: 1 = int, 2 = long, 3 = long long, 4 = int64_t.</source>
          <target state="translated">이 변수는 정의 된 경우 쿼드의 유형을 인코딩합니다 (1 = int, 2 = long, 3 = long long, 4 = int64_t).</target>
        </trans-unit>
        <trans-unit id="9d4d7d23fb68dfb0e56a5dbb549631b71c22498b" translate="yes" xml:space="preserve">
          <source>This variable, if defined, tells that there's a 64-bit integer type, quadtype.</source>
          <target state="translated">이 변수는 정의 된 경우 64 비트 정수 유형 인 quadtype이 있음을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="2ec4246dee0f43c0b7b758a9ec91d6ccc69de145" translate="yes" xml:space="preserve">
          <source>This variable, indicates that we can use sysctl with &lt;code&gt;KERN_PROC_PATHNAME&lt;/code&gt; to get a full path for the executable, and hence convert $^X to an absolute path.</source>
          <target state="translated">이 변수는 &lt;code&gt;KERN_PROC_PATHNAME&lt;/code&gt; 과 함께 sysctl을 사용 하여 실행 파일의 전체 경로를 가져 와서 $ ^ X를 절대 경로로 변환 할 수 있음을 나타냅니다 .</target>
        </trans-unit>
        <trans-unit id="fa78f147d9884daa116a5882818c1ec5ea0dcb5e" translate="yes" xml:space="preserve">
          <source>This venerable module has been the de-facto standard for Perl code profiling for more than a decade, but has been replaced by a number of other modules which have brought us back to the 21st century. Although you're recommended to evaluate your tool from the several mentioned here and from the CPAN list at the base of this document, (and currently &lt;a href=&quot;http://search.cpan.org/perldoc/Devel::NYTProf&quot;&gt;Devel::NYTProf&lt;/a&gt; seems to be the weapon of choice - see below), we'll take a quick look at the output from &lt;a href=&quot;http://search.cpan.org/perldoc/Devel::DProf&quot;&gt;Devel::DProf&lt;/a&gt; first, to set a baseline for Perl profiling tools. Run the above program under the control of &lt;code&gt;Devel::DProf&lt;/code&gt; by using the &lt;code&gt;-d&lt;/code&gt; switch on the command-line.</source>
          <target state="translated">이 유서 깊은 모듈은 10 년 이상 Perl 코드 프로파일 링을위한 사실상의 표준 이었지만, 21 세기로 우리를 데려온 여러 다른 모듈로 대체되었습니다. 여기에 언급 된 여러 문서와이 문서의 기초에있는 CPAN 목록에서 도구를 평가하는 것이 좋지만 현재 &lt;a href=&quot;http://search.cpan.org/perldoc/Devel::NYTProf&quot;&gt;Devel :: NYTProf&lt;/a&gt; 가 선택한 무기 인 것 같습니다 (아래 참조). Perl 프로파일 링 도구의 기준을 설정 &lt;a href=&quot;http://search.cpan.org/perldoc/Devel::DProf&quot;&gt;하려면&lt;/a&gt; 먼저 Devel :: DProf 의 출력을 살펴보십시오 . 명령 행 에서 &lt;code&gt;-d&lt;/code&gt; 스위치를 사용하여 &lt;code&gt;Devel::DProf&lt;/code&gt; 의 제어하에 위의 프로그램을 실행하십시오 .</target>
        </trans-unit>
        <trans-unit id="d8b7da5503989109939012afef8ef4e8d0e19732" translate="yes" xml:space="preserve">
          <source>This version of &lt;b&gt;DB_File&lt;/b&gt; will work with either version 1.x, 2.x or 3.x of Berkeley DB, but is limited to the functionality provided by version 1.</source>
          <target state="translated">이 버전의 &lt;b&gt;DB_File&lt;/b&gt; 은 버전 1.x, 2.x 또는 3.x의 Berkeley DB와 함께 작동하지만 버전 1에서 제공하는 기능으로 제한됩니다.</target>
        </trans-unit>
        <trans-unit id="0a150a56d3915850d7ba6874be9e5ac297420d19" translate="yes" xml:space="preserve">
          <source>This version of B::Terse is really just a wrapper that calls &lt;a href=&quot;concise&quot;&gt;B::Concise&lt;/a&gt; with the &lt;b&gt;-terse&lt;/b&gt; option. It is provided for compatibility with old scripts (and habits) but using B::Concise directly is now recommended instead.</source>
          <target state="translated">이 B :: Terse 버전은 실제로 &lt;b&gt;-terse&lt;/b&gt; 옵션 과 함께 &lt;a href=&quot;concise&quot;&gt;B :: Concise&lt;/a&gt; 를 호출하는 래퍼입니다 . 이전 스크립트 및 습관과의 호환성을 위해 제공되지만 B :: Concise를 직접 사용하는 것이 좋습니다.&lt;b&gt;&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="f7beea27edd37499cd6d29dd522284d798300531" translate="yes" xml:space="preserve">
          <source>This version of Storable will defer croaking until it encounters a data type in the file that it does not recognize. This means that it will continue to read files generated by newer Storable modules which are careful in what they write out, making it easier to upgrade Storable modules in a mixed environment.</source>
          <target state="translated">이 버전의 Storable은 파일에서 인식 할 수없는 데이터 유형이 발견 될 때까지 크로 킹을 연기합니다. 즉, 새로운 Storable 모듈에서 생성 된 파일을주의 깊게 읽어서 혼합 된 환경에서 Storable 모듈을 쉽게 업그레이드 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5eaf48998d3dac5c6c583e6c7a41844ecc68cbdc" translate="yes" xml:space="preserve">
          <source>This version of Tie::Handle is neither related to nor compatible with the Tie::Handle (3.0) module available on CPAN. It was due to an accident that two modules with the same name appeared. The namespace clash has been cleared in favor of this module that comes with the perl core in September 2000 and accordingly the version number has been bumped up to 4.0.</source>
          <target state="translated">이 버전의 Tie :: Handle은 CPAN에서 사용 가능한 Tie :: Handle (3.0) 모듈과 관련되거나 호환되지 않습니다. 이름이 같은 두 개의 모듈이 등장한 것은 사고 때문입니다. 네임 스페이스 충돌은 2000 년 9 월에 펄 코어와 함께 제공되는이 모듈을 위해 명확 해졌으며 따라서 버전 번호는 4.0까지 올라갔습니다.</target>
        </trans-unit>
        <trans-unit id="90d5427fd8fb6285ef2a8069dc284898c742f957" translate="yes" xml:space="preserve">
          <source>This version of Tie::RefHash seems to no longer work with 5.004. This has not been throughly investigated. Patches welcome ;-)</source>
          <target state="translated">이 버전의 Tie :: RefHash는 더 이상 5.004에서 작동하지 않는 것 같습니다. 이것은 철저하게 조사되지 않았습니다. 패치는 환영합니다 ;-)</target>
        </trans-unit>
        <trans-unit id="7ba74e67d43f1dcfdfea27ea433084f1ae0841f7" translate="yes" xml:space="preserve">
          <source>This version promises absolutely nothing about the internals, which may change without notice. A future version of the module will have a well-defined and stable subclassing API.</source>
          <target state="translated">이 버전은 내부에 대해 전혀 약속하지 않으며 통지없이 변경 될 수 있습니다. 향후 버전의 모듈에는 잘 정의되고 안정적인 서브 클래 싱 API가 있습니다.</target>
        </trans-unit>
        <trans-unit id="0cd942caf754c58fe17da1e32e8323477ac4ba5d" translate="yes" xml:space="preserve">
          <source>This warning category was added in the specified Perl version (a development release). Without the &lt;code&gt;'if'&lt;/code&gt; , trying to use it in an earlier release would generate an unknown warning category error.</source>
          <target state="translated">이 경고 범주는 지정된 Perl 버전 (개발 릴리스)에 추가되었습니다. &lt;code&gt;'if'&lt;/code&gt; 가 없으면 이전 릴리스에서 사용하려고하면 알 수없는 경고 범주 오류가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="1e633ddd1e5bf36f7ac48a03da45d1264ed96ee5" translate="yes" xml:space="preserve">
          <source>This warning is emitted when you try to store a key or a value that is too long. It means that the change was not recorded in the database. See BUGS AND WARNINGS below.</source>
          <target state="translated">이 경고는 키 또는 너무 긴 값을 저장하려고 할 때 발생합니다. 변경 사항이 데이터베이스에 기록되지 않았 음을 의미합니다. 아래의 버그 및 경고를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="e8cff43243ebcf6f3dd6cc489bc961145ec38b74" translate="yes" xml:space="preserve">
          <source>This warning will not be issued for numerical constants equal to 0 or 1 since they are often used in statements like</source>
          <target state="translated">이 경고는 다음과 같은 명령문에서 자주 사용되므로 0 또는 1과 같은 숫자 상수에 대해서는 발행되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="88527b08bd7fd0eb304080fa0991400d2de28f89" translate="yes" xml:space="preserve">
          <source>This was a badly misnamed method. It indicates which TODO tests unexpectedly succeeded. Will now issue a warning and call &lt;code&gt;todo_passed&lt;/code&gt; .</source>
          <target state="translated">이것은 이름이 잘못 지정된 방법이었습니다. 예기치 않은 TODO 테스트를 나타냅니다. 이제 경고를 발행하고 &lt;code&gt;todo_passed&lt;/code&gt; 를 호출 합니다 .</target>
        </trans-unit>
        <trans-unit id="b45cf862902bfae8835d878b4e23a6c4625a4b39" translate="yes" xml:space="preserve">
          <source>This was a long-standing bug that was removed in Perl 5.16, as there was no way to tie the scalar itself when it held a typeglob, and no way to untie a scalar that had had a typeglob assigned to it. If you see this message, you must be using an older version.</source>
          <target state="translated">이것은 타입 글롭을 가질 때 스칼라 자체를 묶을 방법이없고 타입 글로브가 할당 된 스칼라를 풀 수있는 방법이 없었기 때문에 Perl 5.16에서 제거 된 오래된 버그였습니다. 이 메시지가 표시되면 이전 버전을 사용해야합니다.</target>
        </trans-unit>
        <trans-unit id="a8f651ba658ca750c49bd019c617379c7670ef2f" translate="yes" xml:space="preserve">
          <source>This was admittedly a rather silly example, because you're using string literals whose content is perfectly safe. There is therefore no cause to resort to the harder-to-read, multi-argument form of pipe open(). However, whenever you cannot be assured that the program arguments are free of shell metacharacters, the fancier form of open() should be used. For example:</source>
          <target state="translated">내용이 완벽하게 안전한 문자열 리터럴을 사용하고 있기 때문에 이것은 다소 어리석은 예입니다. 따라서 읽기 어려운 다중 인수 형식의 파이프 open ()에 의존 할 이유가 없습니다. 그러나 프로그램 인수에 쉘 메타 문자가 없다고 확신 할 수없는 경우에는 더 멋진 형식의 open ()을 사용해야합니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="b7d7dc7d321351f8bc93d1d89d80efcb1109c89d" translate="yes" xml:space="preserve">
          <source>This was needed to compile &lt;code&gt;Perl/Tk&lt;/code&gt; for XFree86-OS/2 out-of-the-box, and link with DLLs for other useful libraries, which typically are compiled with &lt;code&gt;-Zmt -Zcrtdll&lt;/code&gt; .</source>
          <target state="translated">이는 XFree86-OS / 2 용 &lt;code&gt;Perl/Tk&lt;/code&gt; 를 즉시 컴파일하고 다른 유용한 라이브러리 (DLL은 일반적으로 &lt;code&gt;-Zmt -Zcrtdll&lt;/code&gt; 로 컴파일 됨)에 대한 DLL과 링크하는 데 필요했습니다 .</target>
        </trans-unit>
        <trans-unit id="833ec61263166849d2a9c2ebdf6cb1d3f6ab0212" translate="yes" xml:space="preserve">
          <source>This was once handled by &lt;a href=&quot;http://search.cpan.org/perldoc/Encode::Bytes&quot;&gt;Encode::Bytes&lt;/a&gt; but because of all those unusual specifications, Encode 2.20 has relocated the support to this module.</source>
          <target state="translated">이것은 &lt;a href=&quot;http://search.cpan.org/perldoc/Encode::Bytes&quot;&gt;Encode :: Bytes에&lt;/a&gt; 의해 한 번 처리 되었지만 모든 비정상적인 사양으로 인해 Encode 2.20은이 모듈에 대한 지원을 재배치했습니다.</target>
        </trans-unit>
        <trans-unit id="673c10b2478f050683d1e4c485023459285fac78" translate="yes" xml:space="preserve">
          <source>This was released in Test::More 0.88 and first shipped with Perl in 5.10.1 as part of Test::More 0.92.</source>
          <target state="translated">이것은 Test :: More 0.88에서 출시되었으며 Test :: More 0.92의 일부로 5.10.1에서 Perl과 함께 처음 제공되었습니다.</target>
        </trans-unit>
        <trans-unit id="4a133adb902d85c6cf121910a483b79ef0cf0ad5" translate="yes" xml:space="preserve">
          <source>This way you ensure that your library really works 100% within Math::BigInt.</source>
          <target state="translated">이렇게하면 Math :: BigInt 내에서 라이브러리가 실제로 100 % 작동하게됩니다.</target>
        </trans-unit>
        <trans-unit id="ce6198ece9bfb71059f3d726e5c12d16f2b9fa36" translate="yes" xml:space="preserve">
          <source>This way, we avoid namespace pollution by not creating global variables and we've simplified our code as well.</source>
          <target state="translated">이런 식으로 전역 변수를 만들지 않고 네임 스페이스 오염을 피하고 코드를 단순화했습니다.</target>
        </trans-unit>
        <trans-unit id="8dbee524f7a0db93b950c3c6b304adf98088982f" translate="yes" xml:space="preserve">
          <source>This way, you can filter on any attribute of the files in the archive. Consult the &lt;code&gt;Archive::Tar::File&lt;/code&gt; documentation on how to use these objects.</source>
          <target state="translated">이 방법으로 아카이브에있는 파일의 모든 속성을 필터링 할 수 있습니다. 이러한 객체를 사용하는 방법에 대해서는 &lt;code&gt;Archive::Tar::File&lt;/code&gt; 설명서를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="035be350abab307537bd4a5157d94ede32ad2db2" translate="yes" xml:space="preserve">
          <source>This way, you'll be forced to declare all your variables with my() and also disallow accidental &quot;symbolic dereferencing&quot;. Therefore if you'd done this:</source>
          <target state="translated">이런 식으로 my ()를 사용하여 모든 변수를 선언하고 우발적 인 &quot;기호 역 참조&quot;를 허용하지 않습니다. 따라서이 작업을 수행 한 경우 :</target>
        </trans-unit>
        <trans-unit id="4eea9ab96b86c2e70b488d8aa5e8991a1b8d5b3c" translate="yes" xml:space="preserve">
          <source>This where the firewall machine runs an ftp server. This kind of firewall will only let you access ftp servers outside the firewall. This is usually done by connecting to the firewall with ftp, then entering a username like &quot;user@outside.host.com&quot;.</source>
          <target state="translated">방화벽 시스템이 ftp 서버를 실행하는 곳입니다. 이러한 종류의 방화벽은 방화벽 외부의 ftp 서버에만 액세스 할 수 있습니다. 일반적으로 ftp로 방화벽에 연결 한 다음 &quot;user@outside.host.com&quot;과 같은 사용자 이름을 입력하면됩니다.</target>
        </trans-unit>
        <trans-unit id="a1b36c3523eae51f237d9a16581fa97335171ca3" translate="yes" xml:space="preserve">
          <source>This whole affair is quite dangerous, as you may block forever. It assumes it's going to talk to something like &lt;b&gt;bc&lt;/b&gt;, both writing to it and reading from it. This is presumably safe because you &quot;know&quot; that commands like &lt;b&gt;bc&lt;/b&gt; will read a line at a time and output a line at a time. Programs like &lt;b&gt;sort&lt;/b&gt; that read their entire input stream first, however, are quite apt to cause deadlock.</source>
          <target state="translated">당신이 영원히 차단할 수 있기 때문에이 모든 사건은 매우 위험합니다. 그것은 쓰기와 읽기 모두에서 &lt;b&gt;bc&lt;/b&gt; 와 같은 것으로 이야기 할 것이라고 가정 합니다. 이것은 &lt;b&gt;bc&lt;/b&gt; 와 같은 명령이 한 번에 한 줄을 읽고 한 번에 한 줄을 출력 한다는 것을 &quot;알기&quot;때문에 아마도 안전합니다 . 그러나 전체 입력 스트림을 먼저 읽는 &lt;b&gt;정렬&lt;/b&gt; 과 &lt;b&gt;같은&lt;/b&gt; 프로그램은 교착 상태가 발생하기 쉽습니다.</target>
        </trans-unit>
        <trans-unit id="0f0b5462a666458a41aebef2f79e13773386a813" translate="yes" xml:space="preserve">
          <source>This will arrange to have &lt;code&gt;my_start_hook&lt;/code&gt; called at the start of compiling every lexical scope. The available hooks are:</source>
          <target state="translated">이렇게하면 모든 어휘 범위를 컴파일 할 때 &lt;code&gt;my_start_hook&lt;/code&gt; 을 호출하게됩니다. 사용 가능한 후크는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="5676c2e017cdc717b4c080a4e42c0c92fc23cd0b" translate="yes" xml:space="preserve">
          <source>This will be adequate if you ever need to have only one callback registered at any time. An example could be an error handler like the code sketched out above. Remember though, repeated calls to &lt;code&gt;register_fatal&lt;/code&gt; will replace the previously registered callback function with the new one.</source>
          <target state="translated">언제든지 하나의 콜백 만 등록해야하는 경우에 적합합니다. 예를 들어 위에서 설명한 코드와 같은 오류 처리기가있을 수 있습니다. &lt;code&gt;register_fatal&lt;/code&gt; 을 반복해서 호출 하면 이전에 등록 된 콜백 함수가 새로운 함수로 대체됩니다.</target>
        </trans-unit>
        <trans-unit id="e49ef6980bc11da9126cc73cebced07915750bd4" translate="yes" xml:space="preserve">
          <source>This will be hopefully fixed soon ;)</source>
          <target state="translated">이것은 곧 고쳐질 것입니다;)</target>
        </trans-unit>
        <trans-unit id="9e10c44561f52b9bb33ad9f3f6e795b031a63516" translate="yes" xml:space="preserve">
          <source>This will be used by Perl to see what flags the regexp was compiled with, this will normally be set to the value of the flags parameter by the &lt;a href=&quot;#comp&quot;&gt;comp&lt;/a&gt; callback. See the &lt;a href=&quot;#comp&quot;&gt;comp&lt;/a&gt; documentation for valid flags.</source>
          <target state="translated">이것은 정규 표현식이 컴파일 된 플래그를 확인하기 위해 Perl에 의해 사용되며, 일반적으로 &lt;a href=&quot;#comp&quot;&gt;comp&lt;/a&gt; 콜백에 의해 flags 매개 변수의 값으로 설정됩니다 . 유효한 플래그 는 &lt;a href=&quot;#comp&quot;&gt;comp&lt;/a&gt; 설명서를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="14f01a7800d3c6ae7f1d36562ddb036bcb0f3fef" translate="yes" xml:space="preserve">
          <source>This will call &lt;code&gt;process(&quot;arg1&quot;)&lt;/code&gt; while &lt;code&gt;$width&lt;/code&gt; is &lt;code&gt;80&lt;/code&gt; , &lt;code&gt;process(&quot;arg2&quot;)&lt;/code&gt; while &lt;code&gt;$width&lt;/code&gt; is &lt;code&gt;72&lt;/code&gt; , and &lt;code&gt;process(&quot;arg3&quot;)&lt;/code&gt; while &lt;code&gt;$width&lt;/code&gt; is &lt;code&gt;60&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;$width&lt;/code&gt; 가 &lt;code&gt;80&lt;/code&gt; 인 동안 &lt;code&gt;process(&quot;arg1&quot;)&lt;/code&gt; , &lt;code&gt;$width&lt;/code&gt; 가 &lt;code&gt;72&lt;/code&gt; 인 동안 &lt;code&gt;process(&quot;arg2&quot;)&lt;/code&gt; , &lt;code&gt;$width&lt;/code&gt; 가 &lt;code&gt;60&lt;/code&gt; 인 &lt;code&gt;process(&quot;arg3&quot;)&lt;/code&gt; 를 호출 합니다 .</target>
        </trans-unit>
        <trans-unit id="6f9f81bd2d1f19a3ddd018a3abad8eeb66f3f8eb" translate="yes" xml:space="preserve">
          <source>This will call the callback routine for arg1 and arg2, and then terminate GetOptions() leaving &lt;code&gt;&quot;arg3&quot;&lt;/code&gt; in &lt;code&gt;@ARGV&lt;/code&gt; .</source>
          <target state="translated">이것은 arg1과 arg2에 대한 콜백 루틴을 호출 한 다음 &lt;code&gt;@ARGV&lt;/code&gt; 에 &lt;code&gt;&quot;arg3&quot;&lt;/code&gt; 을 남겨두고 GetOptions ()를 종료 합니다.</target>
        </trans-unit>
        <trans-unit id="3b1923af4c70dd0486d19861010f7f67dda0840b" translate="yes" xml:space="preserve">
          <source>This will cause &lt;code&gt;TAP::Parser&lt;/code&gt; to pass custom configuration to two of the built- in source handlers - &lt;a href=&quot;parser/sourcehandler/perl&quot;&gt;TAP::Parser::SourceHandler::Perl&lt;/a&gt;, &lt;a href=&quot;parser/sourcehandler/file&quot;&gt;TAP::Parser::SourceHandler::File&lt;/a&gt; - and attempt to load the &lt;code&gt;MyCustom&lt;/code&gt; class. See &lt;a href=&quot;parser/iteratorfactory#load_handlers&quot;&gt;load_handlers in TAP::Parser::IteratorFactory&lt;/a&gt; for more detail.</source>
          <target state="translated">이로 인해 &lt;code&gt;TAP::Parser&lt;/code&gt; 가 두 개의 내장 소스 핸들러 ( &lt;a href=&quot;parser/sourcehandler/perl&quot;&gt;TAP :: Parser :: SourceHandler :: Perl&lt;/a&gt; , &lt;a href=&quot;parser/sourcehandler/file&quot;&gt;TAP :: Parser :: SourceHandler :: File)에&lt;/a&gt; 사용자 정의 구성을 전달 하고 &lt;code&gt;MyCustom&lt;/code&gt; 클래스 로드를 시도합니다. . 자세한 내용 &lt;a href=&quot;parser/iteratorfactory#load_handlers&quot;&gt;은 TAP :: Parser :: IteratorFactory의 load_handlers를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="0b1f393b5aa15620c16e7dffc32aa8ea367c1f0a" translate="yes" xml:space="preserve">
          <source>This will cause Perl with the prebuilt @INC of</source>
          <target state="translated">이것은 사전 빌드 된 @INC를 가진 Perl을 야기 할 것입니다.</target>
        </trans-unit>
        <trans-unit id="76fec5adda9b5970b64c5f42a2c8bf602e1ee608" translate="yes" xml:space="preserve">
          <source>This will cause the data array ref to be removed, allowing normal garbage collection to clean it up. With AnyEvent, that will cause $data-&amp;gt;[0] to be cleaned up, and AnyEvent will automatically cancel the watcher at that time. If another loop requires more than that to clean up a file watcher, that will be up to the caller to handle.</source>
          <target state="translated">이로 인해 데이터 배열 참조가 제거되어 일반 가비지 콜렉션이 정리할 수 있습니다. AnyEvent를 사용하면 $ data-&amp;gt; [0]이 (가) 정리되고 AnyEvent가 자동으로 감시자를 취소합니다. 다른 루프가 파일 감시자를 정리하기 위해 그 이상의 루프를 필요로하는 경우, 호출자가 처리해야합니다.</target>
        </trans-unit>
        <trans-unit id="67ac58793459c7b76692726a54173eedfed44523" translate="yes" xml:space="preserve">
          <source>This will copy the newly compiled perl and libraries into your DJGPP directory structure. Perl.exe and the utilities go into &lt;code&gt;($DJDIR)/bin&lt;/code&gt; , and the library goes under &lt;code&gt;($DJDIR)/lib/perl5&lt;/code&gt; . The pod documentation goes under &lt;code&gt;($DJDIR)/lib/perl5/pod&lt;/code&gt; .</source>
          <target state="translated">새로 컴파일 된 perl 및 라이브러리가 DJGPP 디렉토리 구조에 복사됩니다. Perl.exe와 유틸리티는 &lt;code&gt;($DJDIR)/bin&lt;/code&gt; 이동하고 라이브러리는 &lt;code&gt;($DJDIR)/lib/perl5&lt;/code&gt; 합니다. 포드 설명서는 &lt;code&gt;($DJDIR)/lib/perl5/pod&lt;/code&gt; 있습니다.</target>
        </trans-unit>
        <trans-unit id="0ded09f0f6527aa84cb6b52847b25c42890b11fc" translate="yes" xml:space="preserve">
          <source>This will create a new thread that will begin execution with the specified entry point function, and give it the</source>
          <target state="translated">그러면 지정된 진입 점 함수로 실행을 시작하는 새 스레드가 생성되어</target>
        </trans-unit>
        <trans-unit id="7feae50769e88d3667c6e843c8c3f60be4ca7ae4" translate="yes" xml:space="preserve">
          <source>This will create objects with numbers stored in two different backend libraries, and &lt;b&gt;VERY BAD THINGS&lt;/b&gt; will happen when you use these together:</source>
          <target state="translated">이렇게하면 두 개의 서로 다른 백엔드 라이브러리에 숫자가 저장된 객체가 생성되며,이 둘을 함께 사용하면 &lt;b&gt;매우 나쁜 결과&lt;/b&gt; 가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="3b0d8d3754e191837d6089eefe1c10fd8b43be6c" translate="yes" xml:space="preserve">
          <source>This will create the new directory &lt;code&gt;($DJDIR)/Text-CSV-0.01&lt;/code&gt; , filling it with the source for this module.</source>
          <target state="translated">새 디렉토리 &lt;code&gt;($DJDIR)/Text-CSV-0.01&lt;/code&gt; 이 생성 되어이 모듈의 소스로 채워집니다.</target>
        </trans-unit>
        <trans-unit id="0492d7e2f7ae4ff241ecd4e3581f4b8beed997ff" translate="yes" xml:space="preserve">
          <source>This will display a line like this:</source>
          <target state="translated">다음과 같은 줄이 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="179f02e4ac0dea4bbf8e34372089742f745f888c" translate="yes" xml:space="preserve">
          <source>This will do some preprocessing then run the Configure script for you. The Configure script is interactive, but in most cases you just need to press ENTER. The &quot;set&quot; command ensures that DJGPP preserves the letter case of file names when reading directories. If you already issued this set command when unpacking the archive, and you are in the same DOS session as when you unpacked the archive, you don't have to issue the set command again. This command is necessary *before* you start to (re)configure or (re)build perl in order to ensure both that perl builds correctly and that building XS-type modules can succeed. See the DJGPP info entry for &quot;_preserve_fncase&quot; for more information:</source>
          <target state="translated">이것은 사전 처리를 수행 한 다음 Configure 스크립트를 실행합니다. Configure 스크립트는 대화식이지만 대부분의 경우 Enter 키만 누르면됩니다. &quot;set&quot;명령은 디렉토리를 읽을 때 DJGPP가 파일 이름의 대소 문자를 보존하도록합니다. 아카이브 압축을 풀 때이 set 명령을 이미 실행했고 아카이브 압축을 풀 때와 동일한 DOS 세션에있는 경우 set 명령을 다시 실행할 필요가 없습니다. 이 명령은 perl이 올바르게 빌드되고 XS 유형 모듈을 빌드 할 수 있도록하기 위해 perl을 (재구성) 또는 (재) 빌드하기 전에 필요합니다. 자세한 정보는 &quot;_preserve_fncase&quot;에 대한 DJGPP 정보 항목을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="675c6b6318fd0296508995ff2fb40f1a73999db5" translate="yes" xml:space="preserve">
          <source>This will do the same as the above example, along with printing additional arguments for linking with the &lt;code&gt;Socket&lt;/code&gt; extension.</source>
          <target state="translated">이것은 &lt;code&gt;Socket&lt;/code&gt; 확장 과 연결하기위한 추가 인수를 인쇄하는 것과 함께 위 예제와 동일하게 수행됩니다 .</target>
        </trans-unit>
        <trans-unit id="94a2b2e485b64f8289df8501ad4445804a71f181" translate="yes" xml:space="preserve">
          <source>This will export the symbols one level 'above' the current package - ie: to the program or module that used package A.</source>
          <target state="translated">이렇게하면 심볼이 현재 패키지 위의 한 레벨 즉, 패키지 A를 사용한 프로그램이나 모듈로 내보내집니다.</target>
        </trans-unit>
        <trans-unit id="8ac204334b95f4e740c8716e51afe8da1ef03360" translate="yes" xml:space="preserve">
          <source>This will generate a make fragment which runs the @cmds in the given $dir. The rough equivalent to this, except cross platform.</source>
          <target state="translated">이것은 주어진 $ dir에서 @cmds를 실행하는 make 조각을 생성합니다. 크로스 플랫폼을 제외하고 이것과 대략 같습니다.</target>
        </trans-unit>
        <trans-unit id="4a8e38bf0f1124ee8cd2f4c246969afdbdca1fd0" translate="yes" xml:space="preserve">
          <source>This will generate a perl one-liner safe for the particular platform you're on based on the given $perl_code and @switches (a -e is assumed) suitable for using in a make target. It will use the proper shell quoting and escapes.</source>
          <target state="translated">이것은 주어진 $ perl_code 및 make 스위치에 사용하기에 적합한 @ 스위치 (a -e로 가정)를 기반으로 특정 플랫폼에 대해 perl one-liner safe을 생성합니다. 적절한 셸 인용 및 이스케이프를 사용합니다.</target>
        </trans-unit>
        <trans-unit id="2fe60433bffca1c65e9d3e8cf9d5d49faaafa689" translate="yes" xml:space="preserve">
          <source>This will generate code for linking with &lt;code&gt;DynaLoader&lt;/code&gt; and each static extension found in &lt;code&gt;$Config{static_ext}&lt;/code&gt; . The code is written to the default file name</source>
          <target state="translated">그러면 &lt;code&gt;$Config{static_ext}&lt;/code&gt; 있는 &lt;code&gt;DynaLoader&lt;/code&gt; 및 각 정적 확장 프로그램과 연결하기위한 코드가 생성됩니다 . 코드는 기본 파일 이름으로 작성됩니다</target>
        </trans-unit>
        <trans-unit id="c6f2639aaf13d9987fd657edd9bdf38a6bb02bde" translate="yes" xml:space="preserve">
          <source>This will generate code with an &lt;code&gt;xs_init&lt;/code&gt; function that glues the perl &lt;code&gt;Socket::bootstrap&lt;/code&gt; function to the C &lt;code&gt;boot_Socket&lt;/code&gt; function and writes it to a file named</source>
          <target state="translated">이것은 perl &lt;code&gt;Socket::bootstrap&lt;/code&gt; 함수를 C &lt;code&gt;boot_Socket&lt;/code&gt; 함수에 &lt;code&gt;xs_init&lt;/code&gt; 함수를 사용하여 코드를 생성 하여 이름이 지정된 파일에 씁니다.</target>
        </trans-unit>
        <trans-unit id="cdd63235e2a6d84a12c5f4085006a244e21d9d51" translate="yes" xml:space="preserve">
          <source>This will go into the &lt;code&gt;build_requires&lt;/code&gt; field of your</source>
          <target state="translated">이것은 당신 의 &lt;code&gt;build_requires&lt;/code&gt; 필드로 이동합니다</target>
        </trans-unit>
        <trans-unit id="b69aab99f02e831fdaf85f1e3ecb658a4bca7288" translate="yes" xml:space="preserve">
          <source>This will go into the &lt;code&gt;configure_requires&lt;/code&gt; field of your</source>
          <target state="translated">이것은 귀하 의 &lt;code&gt;configure_requires&lt;/code&gt; 필드로 이동합니다</target>
        </trans-unit>
        <trans-unit id="044f8f7fc28b6f913f2eb7261e1be2cd16a84799" translate="yes" xml:space="preserve">
          <source>This will go into the &lt;code&gt;requires&lt;/code&gt; field of your</source>
          <target state="translated">이것은 당신 의 &lt;code&gt;requires&lt;/code&gt; 필드로 이동합니다</target>
        </trans-unit>
        <trans-unit id="7b80864e93830ef0ed83edd0adbf1c600a67743b" translate="yes" xml:space="preserve">
          <source>This will hold all the output of a command. It needs to be a reference to a scalar. Note that this will hold both the STDOUT and STDERR messages, and you have no way of telling which is which. If you require this distinction, run the &lt;code&gt;run&lt;/code&gt; command in list context and inspect the individual buffers.</source>
          <target state="translated">이것은 명령의 모든 출력을 보유합니다. 스칼라에 대한 참조 여야합니다. STDOUT 및 STDERR 메시지를 모두 보유하며 어떤 메시지인지를 알 수있는 방법이 없습니다. 이 구별이 필요한 경우 list 컨텍스트에서 &lt;code&gt;run&lt;/code&gt; 명령을 실행 하고 개별 버퍼를 검사하십시오.</target>
        </trans-unit>
        <trans-unit id="02c623985a1a7dc417e0a406fc6886bed2478d0f" translate="yes" xml:space="preserve">
          <source>This will indeed make the value &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt;, but if you try to modify the value of &lt;code&gt;key&lt;/code&gt; , you'll get the following error:</source>
          <target state="translated">이것은 실제로 &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; 값을 만들지 만 &lt;code&gt;key&lt;/code&gt; 값을 수정하려고 하면 다음 오류가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="6c59ff5ece51fef3713b13fdc203a334520a2680" translate="yes" xml:space="preserve">
          <source>This will indeed remove all references to destroyed objects, but the remaining references to objects will be strong, causing the remaining objects to never be destroyed because there is now always a strong reference to them in the @object array.</source>
          <target state="translated">이렇게하면 실제로 파괴 된 오브젝트에 대한 모든 참조가 제거되지만, 오브젝트에 대한 나머지 참조는 강력 해 지므로 @object 배열에는 항상 오브젝트에 대한 강한 참조가 있기 때문에 나머지 오브젝트는 절대로 파괴되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="502a4e7b5c19c4f943e0927f97d4e589d92242b6" translate="yes" xml:space="preserve">
          <source>This will install Perl, including</source>
          <target state="translated">이것은 다음을 포함하여 Perl을 설치합니다</target>
        </trans-unit>
        <trans-unit id="5360f0733d6fa5a59167722a15beb5e5d0628299" translate="yes" xml:space="preserve">
          <source>This will install all files in the module under your home directory, with man pages and libraries going into an appropriate place (usually ~/man and ~/lib). How the exact location is determined is complicated and depends on how your Perl was configured. INSTALL_BASE works more like what other build systems call &quot;prefix&quot; than PREFIX and we recommend you use that instead.</source>
          <target state="translated">그러면 맨 페이지와 라이브러리가 적절한 위치 (보통 ~ / man 및 ~ / lib)로 이동하여 모듈의 모든 파일이 홈 디렉토리 아래에 설치됩니다. 정확한 위치를 결정하는 방법은 복잡하며 Perl의 구성 방법에 따라 다릅니다. INSTALL_BASE는 PREFIX가 아닌 다른 빌드 시스템이 &quot;접두사&quot;라고 부르는 것과 더 유사하므로 대신 사용하는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="c93de459956112e67c32897f139a786020e9ae92" translate="yes" xml:space="preserve">
          <source>This will install the module's architecture-independent files into ~/lib, the architecture-dependent files into ~/lib/$archname.</source>
          <target state="translated">그러면 모듈의 아키텍처 독립적 파일은 ~ / lib에 설치되고 아키텍처 종속 파일은 ~ / lib / $ archname에 설치됩니다.</target>
        </trans-unit>
        <trans-unit id="037930b84c250a860d75497404c0fa5cd777c91f" translate="yes" xml:space="preserve">
          <source>This will invoke &lt;code&gt;MyExpirePolicy-&amp;gt;TIEHASH(args)&lt;/code&gt; . MyExpirePolicy::TIEHASH should do whatever is appropriate to set up the cache, and it should return the cache object to the caller.</source>
          <target state="translated">&lt;code&gt;MyExpirePolicy-&amp;gt;TIEHASH(args)&lt;/code&gt; 가 호출됩니다 . MyExpirePolicy :: TIEHASH는 캐시를 설정하기 위해 적절한 모든 작업을 수행해야하며 캐시 객체를 호출자에게 반환해야합니다.</target>
        </trans-unit>
        <trans-unit id="8b7f85cc213a9528b5fae8654b1de379039b58cd" translate="yes" xml:space="preserve">
          <source>This will invoke the Perl script</source>
          <target state="translated">이것은 Perl 스크립트를 호출합니다</target>
        </trans-unit>
        <trans-unit id="3d7846c6fc3f33f521fafde1ba9db4c27782855d" translate="yes" xml:space="preserve">
          <source>This will likely require many formatters to have tables mapping from treatable Unicode codepoints (such as the &quot;\xE9&quot; for the e-acute character) to the escape sequences or codes necessary for conveying such sequences in the target output format. A converter to *roff would, for example know that &quot;\xE9&quot; (whether conveyed literally, or via a E&amp;lt;...&amp;gt; sequence) is to be conveyed as &quot;e\\*'&quot;. Similarly, a program rendering Pod in a Mac OS application window, would presumably need to know that &quot;\xE9&quot; maps to codepoint 142 in MacRoman encoding that (at time of writing) is native for Mac OS. Such Unicode2whatever mappings are presumably already widely available for common output formats. (Such mappings may be incomplete! Implementers are not expected to bend over backwards in an attempt to render Cherokee syllabics, Etruscan runes, Byzantine musical symbols, or any of the other weird things that Unicode can encode.) And if a Pod document uses a character not found in such a mapping, the formatter should consider it an unrenderable character.</source>
          <target state="translated">이를 위해서는 많은 포맷터가 처리 가능한 유니 코드 코드 포인트 (예 : e-acute 문자의 경우 &quot;\ xE9&quot;)에서 이스케이프 시퀀스 또는 이러한 시퀀스를 대상 출력 형식으로 전달하는 데 필요한 코드로 테이블을 매핑해야합니다. 예를 들어 * roff 로의 변환기는 &quot;\ xE9&quot;(문자 그대로 전달하든 E &amp;lt;...&amp;gt; 시퀀스를 통해 전달되는지)가 &quot;e \\ * '&quot;로 전달되어야 함을 알고 있습니다. 마찬가지로, Mac OS 응용 프로그램 윈도우에서 포드를 렌더링하는 프로그램은 아마도 &quot;\ xE9&quot;가 MacRoman 인코딩에서 코드 포인트 142 (매핑 시점)가 Mac OS에 고유하다는 것을 코드 포인트 142에 매핑한다는 것을 알아야합니다. 이러한 유니 코드 2 매핑은 아마도 일반적인 출력 형식에 이미 널리 사용 가능할 것입니다. (이러한 매핑은 불완전 할 수 있습니다!구현 자들은 체로키 음절, 에트루리아 룬 문자, 비잔틴 음악 기호 또는 유니 코드가 인코딩 할 수있는 다른 이상한 것들을 렌더링하려는 시도에서 뒤로 구부러지지 않을 것으로 예상됩니다.) 그리고 포드 문서가 그러한 매핑에서 찾을 수없는 문자를 사용하는 경우 포맷터는 렌더링 할 수없는 문자로 간주해야합니다.</target>
        </trans-unit>
        <trans-unit id="b9af5931254814b66f0bff8fcce1663d48d23196" translate="yes" xml:space="preserve">
          <source>This will load the core of the Getopt::Long module and prepare your program for using it. Most of the actual Getopt::Long code is not loaded until you really call one of its functions.</source>
          <target state="translated">Getopt :: Long 모듈의 핵심을로드하고 프로그램을 사용할 수 있도록 준비합니다. 실제 Getopt :: Long 코드의 대부분은 실제로 함수 중 하나를 호출 할 때까지로드되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="84613dc13583c880545edeaa7309fbaf7d904405" translate="yes" xml:space="preserve">
          <source>This will load the necessary things (like BigInt) when they are needed, and automatically.</source>
          <target state="translated">필요한 경우 자동으로 필요한 항목 (BigInt 등)을로드합니다.</target>
        </trans-unit>
        <trans-unit id="9d8f3b44f04663247b0f9e8a7dffb832852e0f5e" translate="yes" xml:space="preserve">
          <source>This will match all non-Unicode code points, since every one of them is not in Kana. You can use intersection to exclude these, if desired, as this modified example shows:</source>
          <target state="translated">이 코드는 모두 유니 코드가 아닌 코드 포인트와 일치합니다. 하나는 모두 Kana에 없기 때문입니다. 이 수정 된 예에서 볼 수 있듯이 교차점을 사용하여 원하는 경우 이들을 제외 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="944f02167d664ef9e70480a5d72868212b398166" translate="yes" xml:space="preserve">
          <source>This will match all the digit characters that are in the Thai script.</source>
          <target state="translated">태국어 스크립트에있는 모든 숫자 문자와 일치합니다.</target>
        </trans-unit>
        <trans-unit id="6273e23b6c541cdfeea4c27da4fef2152f6377e8" translate="yes" xml:space="preserve">
          <source>This will only show up under use strict (another good reason to run under use strict).</source>
          <target state="translated">이것은 엄격하게 사용하는 경우에만 표시됩니다 (사용이 엄격한 상태에서 실행해야하는 또 다른 이유).</target>
        </trans-unit>
        <trans-unit id="c65fa159bab1e30bba712c2c1e9c30d9ac5133d7" translate="yes" xml:space="preserve">
          <source>This will optimize down to &lt;code&gt;&quot;foo&quot;&lt;/code&gt; , so &lt;code&gt;&quot;bar&quot;&lt;/code&gt; will never be considered (even though the rules say to use a smartmatch on &lt;code&gt;&quot;foo&quot;&lt;/code&gt; ). For an alternation like this, an array ref will work, because this will instigate smartmatching:</source>
          <target state="translated">이 규칙은 &lt;code&gt;&quot;foo&quot;&lt;/code&gt; 로 최적화 되므로 &lt;code&gt;&quot;bar&quot;&lt;/code&gt; 는 고려되지 않습니다 (규칙에서 &lt;code&gt;&quot;foo&quot;&lt;/code&gt; 에서 스마트 매치를 사용한다고 말하더라도 ). 이와 같은 대체의 경우 배열 참조가 작동합니다. 이는 스마트 매칭을 요구하기 때문입니다.</target>
        </trans-unit>
        <trans-unit id="d8cbe9fcb0b43d3c677dc5305458ee2e62e4a31f" translate="yes" xml:space="preserve">
          <source>This will predeclare all the subroutine whose names are in the list, allowing you to use them without parentheses even before they're declared.</source>
          <target state="translated">이름이 목록에있는 모든 서브 루틴을 미리 선언하여 선언하기 전에 괄호없이 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="0485931e797f0d3157ea50aac95b26b852bb2c34" translate="yes" xml:space="preserve">
          <source>This will predeclare all the variables whose names are in the list, allowing you to use them under &quot;use strict&quot;, and disabling any typo warnings.</source>
          <target state="translated">이름이 목록에있는 모든 변수를 미리 선언하여 &quot;엄격한 사용&quot;하에서 오타 경고를 비활성화 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2ed7ee1155828d2b2b40b29d755792b670ff1874" translate="yes" xml:space="preserve">
          <source>This will print</source>
          <target state="translated">이것은 인쇄됩니다</target>
        </trans-unit>
        <trans-unit id="0c513de1733ecd2b8ffce2a2e048c7fdbe91583f" translate="yes" xml:space="preserve">
          <source>This will print -3, not -2 (as it would if you divide -5 by 2 and truncate the result).</source>
          <target state="translated">이것은 -2가 아닌 -3을 인쇄합니다 (-5를 2로 나누고 결과를 자르는 것처럼).</target>
        </trans-unit>
        <trans-unit id="e88a5abf01aa2eb9eaafc62c5178572c3f0dcb93" translate="yes" xml:space="preserve">
          <source>This will print a grouped list of Perl's functions, like the &lt;a href=&quot;../perlfunc#Perl-Functions-by-Category&quot;&gt;Perl Functions by Category in perlfunc&lt;/a&gt; section.</source>
          <target state="translated">&lt;a href=&quot;../perlfunc#Perl-Functions-by-Category&quot;&gt;perlfunc&lt;/a&gt; 섹션의 카테고리 별 Perl 함수 와 같이 Perl의 기능을 그룹화 된 목록으로 인쇄합니다 .</target>
        </trans-unit>
        <trans-unit id="06f3c28ca20ac2a91e7b3a25f9cd8948580e5a8c" translate="yes" xml:space="preserve">
          <source>This will print arguments for linking with &lt;code&gt;libperl&lt;/code&gt; and extensions found in &lt;code&gt;$Config{static_ext}&lt;/code&gt; . This includes libraries found in &lt;code&gt;$Config{libs}&lt;/code&gt; and the first ModuleName.a library for each extension that is found by searching &lt;code&gt;@INC&lt;/code&gt; or the path specified by the &lt;b&gt;-I&lt;/b&gt; option. In addition, when ModuleName.a is found, additional linker arguments are picked up from the</source>
          <target state="translated">&lt;code&gt;$Config{static_ext}&lt;/code&gt; 에 있는 &lt;code&gt;libperl&lt;/code&gt; 및 확장과 연결하기위한 인수를 인쇄 합니다 . 여기에는 &lt;code&gt;$Config{libs}&lt;/code&gt; 에있는 라이브러리와 &lt;code&gt;@INC&lt;/code&gt; 또는 &lt;b&gt;-I&lt;/b&gt; 옵션으로 지정된 경로 를 검색하여 찾은 각 확장에 대한 첫 번째 ModuleName.a 라이브러리가 포함됩니다 . 또한 ModuleName.a가 발견되면 추가 링커 인수가&lt;b&gt;&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="672df04456226246b8abe50d62f0bbee0ad0889a" translate="yes" xml:space="preserve">
          <source>This will print out</source>
          <target state="translated">인쇄됩니다</target>
        </trans-unit>
        <trans-unit id="0a53fd47cfa0cb2aa29facae441d5e18a6061c7b" translate="yes" xml:space="preserve">
          <source>This will print out a warning about overwriting Mytest2, but that's okay. Our files are stored in Mytest2/mylib, and will be untouched.</source>
          <target state="translated">Mytest2 덮어 쓰기에 대한 경고가 표시되지만 괜찮습니다. 우리의 파일은 Mytest2 / mylib에 저장되며 변경되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="6e363eb5c9d1e189e7877f05521713cb961f9afe" translate="yes" xml:space="preserve">
          <source>This will print:</source>
          <target state="translated">인쇄됩니다 :</target>
        </trans-unit>
        <trans-unit id="899924678036d32490097cf13a3010a6c2e916cc" translate="yes" xml:space="preserve">
          <source>This will produce: &quot;&lt;code&gt;$a &amp;lt;=&amp;gt; $b&lt;/code&gt; &quot;</source>
          <target state="translated">&quot; &lt;code&gt;$a &amp;lt;=&amp;gt; $b&lt;/code&gt; &quot; 가 생성됩니다.</target>
        </trans-unit>
        <trans-unit id="f9e190e6e848eda316c1f8903ac738aaf6f899b4" translate="yes" xml:space="preserve">
          <source>This will put modules into</source>
          <target state="translated">이것은 모듈을 넣을 것입니다</target>
        </trans-unit>
        <trans-unit id="7f52025f3fd591756e387158d1cd6ccc53bfb3a5" translate="yes" xml:space="preserve">
          <source>This will quote $text so it is interpreted literally in the shell.</source>
          <target state="translated">이것은 $ text를 인용하여 문자 그대로 쉘에서 해석됩니다.</target>
        </trans-unit>
        <trans-unit id="a3fa038bab0a35a1278c1028a76b1b599ab2f3c7" translate="yes" xml:space="preserve">
          <source>This will return the</source>
          <target state="translated">이것은</target>
        </trans-unit>
        <trans-unit id="2912d0daea2e211af97d7e1a3ea98a0298d18c0b" translate="yes" xml:space="preserve">
          <source>This will return the filename based on the template but will not open this file. Cannot be used in conjunction with UNLINK set to true. Default is to always open the file to protect from possible race conditions. A warning is issued if warnings are turned on. Consider using the tmpnam() and mktemp() functions described elsewhere in this document if opening the file is not required.</source>
          <target state="translated">템플릿에 따라 파일 이름이 반환되지만이 파일은 열리지 않습니다. UNLINK를 true로 설정하면 사용할 수 없습니다. 기본값은 가능한 경쟁 조건으로부터 보호하기 위해 항상 파일을 여는 것입니다. 경고가 설정되면 경고가 발행됩니다. 파일을 열 필요가없는 경우이 문서의 다른 곳에 설명 된 tmpnam () 및 mktemp () 함수 사용을 고려하십시오.</target>
        </trans-unit>
        <trans-unit id="afb834590329aede62a7b1a0c021d221b2c6d004" translate="yes" xml:space="preserve">
          <source>This will run Configure and keep a record:</source>
          <target state="translated">그러면 Configure 및 record 기록이 실행됩니다.</target>
        </trans-unit>
        <trans-unit id="3ec88525a1d6ccafa3d30457de14d7bad4de11c0" translate="yes" xml:space="preserve">
          <source>This will search for a module named &lt;code&gt;App::Prove::Plugin::MyPlugin&lt;/code&gt; , or failing that, &lt;code&gt;MyPlugin&lt;/code&gt; . If the plugin can't be found, &lt;code&gt;prove&lt;/code&gt; will complain &amp;amp; exit.</source>
          <target state="translated">이 명명 된 모듈을 검색합니다 &lt;code&gt;App::Prove::Plugin::MyPlugin&lt;/code&gt; , 또는 실패, &lt;code&gt;MyPlugin&lt;/code&gt; . 플러그인을 찾을 수없는 경우, &lt;code&gt;prove&lt;/code&gt; 불평 및 종료됩니다.</target>
        </trans-unit>
        <trans-unit id="74d8c906bb8ef849bacade7aef9b4a5b44d353f1" translate="yes" xml:space="preserve">
          <source>This will still print 10, not 20. Remember that local() affects package variables, which are all &quot;global&quot; to the package.</source>
          <target state="translated">이것은 여전히 ​​20이 아닌 10을 인쇄합니다. local ()은 패키지 변수에 영향을 미치며 패키지 변수는 모두 패키지에 &quot;전역&quot;입니다.</target>
        </trans-unit>
        <trans-unit id="feff36db777feae7b7039051928fb49050eaab4e" translate="yes" xml:space="preserve">
          <source>This will terminate if the file is undeleteable for some reason (protected, not there, and so on).</source>
          <target state="translated">어떤 이유로 파일을 삭제할 수없는 경우 (보호되거나없는 등) 종료됩니다.</target>
        </trans-unit>
        <trans-unit id="1bd914f7804d4417b7bb5813b67988d44deeaf55" translate="yes" xml:space="preserve">
          <source>This will try to read &lt;code&gt;&quot;unicore/pro_alias.pl&quot;&lt;/code&gt; from the &lt;code&gt;@INC&lt;/code&gt; path. This file should return a list in plain perl:</source>
          <target state="translated">&lt;code&gt;@INC&lt;/code&gt; 경로 에서 &lt;code&gt;&quot;unicore/pro_alias.pl&quot;&lt;/code&gt; 을 읽으려고 합니다. 이 파일은 일반 펄로리스트를 반환해야합니다 :</target>
        </trans-unit>
        <trans-unit id="14ef65510ce174baa0db67a974cf806364df6c54" translate="yes" xml:space="preserve">
          <source>This will unblock any thread that is blocked trying to &lt;code&gt;down&lt;/code&gt; the semaphore if the &lt;code&gt;up&lt;/code&gt; raises the semaphore's count above the amount that the &lt;code&gt;down&lt;/code&gt; is trying to decrement it by. For example, if three threads are blocked trying to &lt;code&gt;down&lt;/code&gt; a semaphore by one, and another thread &lt;code&gt;up&lt;/code&gt; s the semaphore by two, then two of the blocked threads (which two is indeterminate) will become unblocked.</source>
          <target state="translated">이하려고 차단 된 임의의 스레드 차단을 해제합니다 &lt;code&gt;down&lt;/code&gt; 경우 세마포어 &lt;code&gt;up&lt;/code&gt; 하는 금액 위의 세마포어의 카운트 제기 &lt;code&gt;down&lt;/code&gt; 하여 감소하려고합니다. 예를 들어, 세 개의 스레드가 세마포어를 하나씩 &lt;code&gt;down&lt;/code&gt; 려고 시도 하고 다른 스레드 가 세마포어를 두 번 &lt;code&gt;up&lt;/code&gt; 차단 된 스레드 중 두 개 (결정되지 않은 두 개)가 차단 해제됩니다.</target>
        </trans-unit>
        <trans-unit id="6f351c4b6aca96e53a16da8efca1e61fe6247c18" translate="yes" xml:space="preserve">
          <source>This will use miniperl to complete the rest of the build.</source>
          <target state="translated">miniperl을 사용하여 나머지 빌드를 완료합니다.</target>
        </trans-unit>
        <trans-unit id="c16d64a3c76763b9210f27c1d7475ba78b790318" translate="yes" xml:space="preserve">
          <source>This will wait for the corresponding thread to complete its execution. When the thread finishes, &lt;code&gt;-&amp;gt;join()&lt;/code&gt; will return the return value(s) of the entry point function.</source>
          <target state="translated">해당 스레드가 실행을 완료 할 때까지 기다립니다. 스레드가 완료되면 &lt;code&gt;-&amp;gt;join()&lt;/code&gt; 은 진입 점 함수의 반환 값을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="2af730ddaf4e289f57edfe5d0943ccf22cf812f6" translate="yes" xml:space="preserve">
          <source>This won't expand &lt;code&gt;&quot;\n&quot;&lt;/code&gt; or &lt;code&gt;&quot;\t&quot;&lt;/code&gt; or any other special escapes.</source>
          <target state="translated">&lt;code&gt;&quot;\n&quot;&lt;/code&gt; 또는 &lt;code&gt;&quot;\t&quot;&lt;/code&gt; 또는 기타 특수 이스케이프는 확장되지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="d34159428b026fd2a257dac5cc4d16c93aa663f8" translate="yes" xml:space="preserve">
          <source>This workaround is unnecessary since Unicode 6.3.0.</source>
          <target state="translated">이 해결 방법은 유니 코드 6.3.0부터 필요하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="8c1458dfe63303a12ab8e9dcbe389526ca2f043c" translate="yes" xml:space="preserve">
          <source>This works</source>
          <target state="translated">이 작동합니다</target>
        </trans-unit>
        <trans-unit id="881dcb6cd52e1e6c1fe3d0de8f69b6f16afcd3ed" translate="yes" xml:space="preserve">
          <source>This works because field hashes respond to keys that are not references like a normal hash would and use the string offered as the hash key. Thus, if a method is called as a class method, the field hash is presented with the class name instead of an object and blithely uses it as a key. Since the keys of real objects are decimal numbers, there is no conflict and the slot in the field hash can be used like any other. The &lt;code&gt;id()&lt;/code&gt; function behaves correspondingly with respect to non-reference arguments.</source>
          <target state="translated">이것은 필드 해시가 일반 해시처럼 참조가 아닌 키에 응답하고 해시 키로 제공된 문자열을 사용하기 때문에 작동합니다. 따라서 메소드가 클래스 메소드로 호출되면 필드 해시에는 객체 대신 클래스 이름이 표시되고 키로 사용됩니다. 실제 객체의 키는 십진수이기 때문에 충돌이 없으며 필드 해시의 슬롯을 다른 것과 같이 사용할 수 있습니다. &lt;code&gt;id()&lt;/code&gt; 함수가 아닌 기준 인자에 대하여 대응 동작.</target>
        </trans-unit>
        <trans-unit id="ee37bc8498bec33db688cccd48192a7818024c7e" translate="yes" xml:space="preserve">
          <source>This works even if the package variable has not been used before, as package variables spring into existence when first used.</source>
          <target state="translated">패키지 변수가 처음 사용되었을 때 존재하기 때문에 패키지 변수가 이전에 사용되지 않은 경우에도 작동합니다.</target>
        </trans-unit>
        <trans-unit id="2dd7e5f2596a2fbf8c9fd904eb776f4f1a29ce3e" translate="yes" xml:space="preserve">
          <source>This works exactly like calling &lt;code&gt;$file-&amp;gt;save()&lt;/code&gt; . This can be very useful for writing dynamic code. For example, it allows you to pass a method name to be called as a parameter to another method.</source>
          <target state="translated">이것은 &lt;code&gt;$file-&amp;gt;save()&lt;/code&gt; 호출과 동일하게 작동합니다 . 동적 코드 작성에 매우 유용합니다. 예를 들어, 매개 변수로 호출 할 메소드 이름을 다른 메소드에 전달할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5594cfec5e61454de66a12e73e2e1b179cf923ba" translate="yes" xml:space="preserve">
          <source>This works if the dereference produces a string</source>
          <target state="translated">역 참조가 문자열을 생성하는 경우 작동합니다.</target>
        </trans-unit>
        <trans-unit id="38266e487c0f4fb0b669611ed55fd5e57c3bf09c" translate="yes" xml:space="preserve">
          <source>This works just like &lt;code&gt;/bin/tar&lt;/code&gt;'s &lt;code&gt;-h&lt;/code&gt; option.</source>
          <target state="translated">이것은 &lt;code&gt;/bin/tar&lt;/code&gt; 의 &lt;code&gt;-h&lt;/code&gt; 옵션 과 동일하게 작동합니다 .</target>
        </trans-unit>
        <trans-unit id="219577552fb5335aa48c2b04bb85269685e4f05b" translate="yes" xml:space="preserve">
          <source>This works just like &lt;code&gt;parse_file&lt;/code&gt; except that it reads the Pod content not from a file, but from a string that you have already in memory.</source>
          <target state="translated">이것은 파일에서가 아니라 이미 메모리에있는 문자열에서 Pod 컨텐츠를 읽는다는 점을 제외하면 &lt;code&gt;parse_file&lt;/code&gt; 과 동일하게 작동 합니다.</target>
        </trans-unit>
        <trans-unit id="97ee63f99fe6452186fce78a0713bcb1bd8591fa" translate="yes" xml:space="preserve">
          <source>This works just like patching anything else, with one extra consideration.</source>
          <target state="translated">이것은 한 가지 추가 고려 사항으로 다른 것을 패치하는 것과 똑같이 작동합니다.</target>
        </trans-unit>
        <trans-unit id="e00aef65607bdbfd4bbca8fcf5fc5917d56249a8" translate="yes" xml:space="preserve">
          <source>This works like &amp;lt;$fh&amp;gt; described in &lt;a href=&quot;perlop#I%2fO-Operators&quot;&gt;I/O Operators in perlop&lt;/a&gt; except that it's more readable and can be safely called in a list context but still returns just one line.</source>
          <target state="translated">이것은 더 읽기 쉽고 목록 컨텍스트에서 안전하게 호출 할 수 있지만 여전히 한 줄만 반환한다는 점을 제외하고 &lt;a href=&quot;perlop#I%2fO-Operators&quot;&gt;perlop의 I / O 연산자에&lt;/a&gt; 설명 된 &amp;lt;$ fh&amp;gt;와 같이 작동 합니다.</target>
        </trans-unit>
        <trans-unit id="dcebba3c0143d6834639907ecbbcce5227295c40" translate="yes" xml:space="preserve">
          <source>This works like &amp;lt;$fh&amp;gt; when called in a list context to read all the remaining lines in a file, except that it's more readable. It will also croak() if accidentally called in a scalar context.</source>
          <target state="translated">이것은리스트 컨텍스트에서 호출 될 때 &amp;lt;$ fh&amp;gt;와 같이 작동하여 파일에서 더 읽기 쉬운 것을 제외하고 파일의 나머지 행을 모두 읽습니다. 또한 실수로 스칼라 컨텍스트에서 호출 된 경우 croak ()됩니다.</target>
        </trans-unit>
        <trans-unit id="7450c62face5ca7b9e02c283184e4738197040fb" translate="yes" xml:space="preserve">
          <source>This works like &amp;lt;$io&amp;gt; described in &lt;a href=&quot;../perlop#I%2fO-Operators&quot;&gt;I/O Operators in perlop&lt;/a&gt; except that it's more readable and can be safely called in a list context but still returns just one line. If used as the conditional +within a &lt;code&gt;while&lt;/code&gt; or C-style &lt;code&gt;for&lt;/code&gt; loop, however, you will need to +emulate the functionality of &amp;lt;$io&amp;gt; with &lt;code&gt;&lt;a href=&quot;../functions/defined&quot;&gt;defined&lt;/a&gt;($_ = $io-&amp;gt;getline)&lt;/code&gt; .</source>
          <target state="translated">이것은 더 읽기 쉽고 목록 컨텍스트에서 안전하게 호출 할 수 있지만 여전히 한 줄만 반환한다는 점을 제외하고 &lt;a href=&quot;../perlop#I%2fO-Operators&quot;&gt;perlop의 I / O 연산자에&lt;/a&gt; 설명 된 &amp;lt;$ io&amp;gt;와 같이 작동 합니다. 그러나 &lt;code&gt;while&lt;/code&gt; 또는 C 스타일 &lt;code&gt;for&lt;/code&gt; 루프 내에서 조건부로 사용되는 경우 &lt;code&gt;&lt;a href=&quot;../functions/defined&quot;&gt;defined&lt;/a&gt;($_ = $io-&amp;gt;getline)&lt;/code&gt; 하여 &amp;lt;$ io&amp;gt;의 기능을 + 에뮬레이션해야합니다 .</target>
        </trans-unit>
        <trans-unit id="c8787e54def79a3f32ab71769162cbf50a0d2256" translate="yes" xml:space="preserve">
          <source>This works like &amp;lt;$io&amp;gt; when called in a list context to read all the remaining lines in a file, except that it's more readable. It will also croak() if accidentally called in a scalar context.</source>
          <target state="translated">이것은 더 읽기 쉬운 것을 제외하고 파일의 나머지 행을 모두 읽기 위해 목록 컨텍스트에서 호출 될 때 &amp;lt;$ io&amp;gt;처럼 작동합니다. 또한 실수로 스칼라 컨텍스트에서 호출 된 경우 croak ()됩니다.</target>
        </trans-unit>
        <trans-unit id="2bc655ffdbbb7b5de088685237be5925d7bbe434" translate="yes" xml:space="preserve">
          <source>This works like &lt;code&gt;implicate_supers&lt;/code&gt; except that the implicated forms are added to the end of the return list.</source>
          <target state="translated">이 같은 작품 &lt;code&gt;implicate_supers&lt;/code&gt; 연루 형태 반환 목록의 끝에 추가된다는 점을 제외하고.</target>
        </trans-unit>
        <trans-unit id="86cdc5ca018e3bf7bd5f95614dd661c8b598198f" translate="yes" xml:space="preserve">
          <source>This works like get_title except that it returns the contents of the &quot;=head1 AUTHOR\n\nParagraph...\n&quot; section, assuming that that section isn't terribly long. To recognize a &quot;=head1 Author\n\nParagraph\n&quot; section, pass the &lt;code&gt;nocase&lt;/code&gt; option:</source>
          <target state="translated">이것은 &quot;= head1 AUTHOR \ n \ nParagraph ... \ n&quot;섹션의 내용을 반환한다는 점을 제외하고는 get_title과 비슷하게 작동합니다. 섹션이 너무 길지 않다고 가정합니다. &quot;= head1 Author \ n \ nParagraph \ n&quot;섹션을 인식하려면 &lt;code&gt;nocase&lt;/code&gt; 옵션을 전달하십시오 .</target>
        </trans-unit>
        <trans-unit id="64a77cc5fc2dfee3e1cafa417d88e53b294176fe" translate="yes" xml:space="preserve">
          <source>This works like get_title except that it returns the contents of the &quot;=head1 DESCRIPTION\n\nParagraph...\n&quot; section, assuming that that section isn't terribly long. To recognize a &quot;=head1 Description\n\nParagraph\n&quot; section, pass the &lt;code&gt;nocase&lt;/code&gt; option:</source>
          <target state="translated">이것은 &quot;= head1 DESCRIPTION \ n \ nParagraph ... \ n&quot;섹션의 내용을 반환한다는 점을 제외하고 get_title과 유사하게 작동합니다. 섹션이 너무 길지 않다고 가정합니다. &quot;= head1 Description \ n \ nParagraph \ n&quot;섹션을 인식하려면 &lt;code&gt;nocase&lt;/code&gt; 옵션을 전달하십시오 .</target>
        </trans-unit>
        <trans-unit id="26df8521ce0593af395e7709eafe289696c2f1f5" translate="yes" xml:space="preserve">
          <source>This works like get_title except that it returns the contents of the &quot;=head1 VERSION\n\n[BIG BLOCK]\n&quot; block. Note that this does NOT return the module's &lt;code&gt;$VERSION&lt;/code&gt; !! To recognize a &quot;=head1 Version\n\n[BIG BLOCK]\n&quot; section, pass the &lt;code&gt;nocase&lt;/code&gt; option:</source>
          <target state="translated">&quot;= head1 VERSION \ n \ n [BIG BLOCK] \ n&quot;블록의 내용을 반환한다는 점을 제외하면 get_title과 유사하게 작동합니다. 이것은 모듈의 &lt;code&gt;$VERSION&lt;/code&gt; 반환하지 않습니다 ! &quot;= head1 Version \ n \ n [BIG BLOCK] \ n&quot;섹션을 인식하려면 &lt;code&gt;nocase&lt;/code&gt; 옵션을 전달하십시오 .</target>
        </trans-unit>
        <trans-unit id="0009c0f22b1f9b3091524f0133e652a04ae0337e" translate="yes" xml:space="preserve">
          <source>This works like the &lt;code&gt;strict_type&lt;/code&gt; option you can pass to &lt;code&gt;check&lt;/code&gt; , which will turn on &lt;code&gt;strict_type&lt;/code&gt; globally for all calls to &lt;code&gt;check&lt;/code&gt; .</source>
          <target state="translated">등이 작품 &lt;code&gt;strict_type&lt;/code&gt; 의 옵션은 당신을 전달할 수 있습니다 &lt;code&gt;check&lt;/code&gt; 을 켜 것이다, &lt;code&gt;strict_type&lt;/code&gt; 에 대한 모든 호출에 대해 전역 &lt;code&gt;check&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="362f494acfae36c73643784bd959c4c06fb6c5c4" translate="yes" xml:space="preserve">
          <source>This works most like other language's behavior when you specify a prefix. We recommend this method.</source>
          <target state="translated">이것은 접두사를 지정할 때 다른 언어의 동작과 가장 유사합니다. 이 방법을 권장합니다.</target>
        </trans-unit>
        <trans-unit id="55b95f28c493942c265a9070f59ae310c120e01c" translate="yes" xml:space="preserve">
          <source>This works under Unix and Windows, and the current version doesn't look half as bad under Windows as it used to. Some of the gui elements still don't 'feel' quite right, though. The interface is very natural and 'perlish', making it easy to use in small scripts that just need a simple gui. It hasn't been updated in a while.</source>
          <target state="translated">이것은 Unix와 Windows에서 작동하며 현재 버전은 Windows에서 사용했던 것보다 절반 정도 나쁘지 않습니다. gui 요소 중 일부는 여전히 정확하지 않습니다. 이 인터페이스는 매우 자연스럽고 'Perlish'이므로 간단한 GUI가 필요한 작은 스크립트에서 쉽게 사용할 수 있습니다. 한동안 업데이트되지 않았습니다.</target>
        </trans-unit>
        <trans-unit id="455be4bb715491d8c40b42c1f8dcc680c608eb5f" translate="yes" xml:space="preserve">
          <source>This works well, and means that XS authors can gleefully write:</source>
          <target state="translated">이것은 잘 작동하며 XS 작성자가 즐겁게 쓸 수 있음을 의미합니다.</target>
        </trans-unit>
        <trans-unit id="b707b9d283df75f490a344769164044f8e4c5af9" translate="yes" xml:space="preserve">
          <source>This works with leading special strings, dynamically determined:</source>
          <target state="translated">이것은 동적으로 결정되는 주요 특수 문자열과 함께 작동합니다.</target>
        </trans-unit>
        <trans-unit id="ff04426d22726a3d4a81073dac982b940cab46f5" translate="yes" xml:space="preserve">
          <source>This would install the complete distribution file (say BAR/Foo-1.23.tar.gz) with all accompanying material. But if you would like to install version 1.23_90, you need to know where the distribution file resides on CPAN relative to the authors/id/ directory. If the author is BAR, this might be BAR/Foo-1.23_90.tar.gz; so you would have to say</source>
          <target state="translated">그러면 모든 배포 자료와 함께 완전한 배포 파일 (예 : BAR / Foo-1.23.tar.gz)이 설치됩니다. 그러나 버전 1.23_90을 설치하려면, authors / id / 디렉토리와 관련하여 CPAN에서 분배 파일이있는 위치를 알아야합니다. 작성자가 BAR 인 경우 BAR / Foo-1.23_90.tar.gz 일 수 있습니다. 그래서 당신은 말할 것</target>
        </trans-unit>
        <trans-unit id="56ee25d704c11c02d7362a5e6635fcc0e634817b" translate="yes" xml:space="preserve">
          <source>This would make &lt;code&gt;Carp&lt;/code&gt; report the error as coming from a caller not in &lt;code&gt;My::Carping::Package&lt;/code&gt; , nor from &lt;code&gt;My::Friendly::Caller&lt;/code&gt; .</source>
          <target state="translated">이로 인해 &lt;code&gt;My::Carping::Package&lt;/code&gt; 또는 &lt;code&gt;My::Friendly::Caller&lt;/code&gt; 아닌 호출자가 &lt;code&gt;Carp&lt;/code&gt; 에서 오류를보고 하게 됩니다.</target>
        </trans-unit>
        <trans-unit id="bd1a277e3dce80fb2a8014b20af5fd4775d02c21" translate="yes" xml:space="preserve">
          <source>This would produce.</source>
          <target state="translated">이것은 생산할 것입니다.</target>
        </trans-unit>
        <trans-unit id="d3b8e94b68c600a8d4a422c5367048147e22fdaf" translate="yes" xml:space="preserve">
          <source>This would signal to the parser that paragraphs in this begin...end region are subject to normal handling as ordinary/verbatim paragraphs (while still tagged as meant only for processors that understand the &quot;biblio&quot; identifier). The same effect could be had with:</source>
          <target state="translated">이것은이 시작 ... 종료 영역의 단락이 일반 / 언어 적 단락 (일반적으로 &quot;biblio&quot;식별자를 이해하는 프로세서에 대해서만 의미가있는 태그)으로 취급된다는 것을 파서에 알립니다. 동일한 효과가 발생할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="15fd697862c8639869e1e78b476a5aeed8efb2ef" translate="yes" xml:space="preserve">
          <source>This would start</source>
          <target state="translated">이것은 시작할 것이다</target>
        </trans-unit>
        <trans-unit id="00bebdd1c33f014f6c6f83be97cd8f7afa9c4c0a" translate="yes" xml:space="preserve">
          <source>This wrapping happens always when compiling Perl core source (PERL_CORE is defined) or the Perl core extensions (PERL_EXT is defined). When compiling XS code outside of Perl core the wrapping does not take place. Note, however, that intermixing the _r-forms (as Perl compiled for multithreaded operation will do) and the _r-less forms is neither well-defined (inconsistent results, data corruption, or even crashes become more likely), nor is it very portable.</source>
          <target state="translated">This wrapping happens always when compiling Perl core source (PERL_CORE is defined) or the Perl core extensions (PERL_EXT is defined). When compiling XS code outside of Perl core the wrapping does not take place. Note, however, that intermixing the _r-forms (as Perl compiled for multithreaded operation will do) and the _r-less forms is neither well-defined (inconsistent results, data corruption, or even crashes become more likely), nor is it very portable.</target>
        </trans-unit>
        <trans-unit id="14e5fcab8c4178b44f80118d0d0e8c790e5ed2e6" translate="yes" xml:space="preserve">
          <source>This zero-width assertion executes any embedded Perl code. It always succeeds, and its return value is set as &lt;code&gt;$^R&lt;/code&gt; .</source>
          <target state="translated">이 폭이 0 인 어설 션은 내장 된 Perl 코드를 실행합니다. 항상 성공하고 반환 값은 &lt;code&gt;$^R&lt;/code&gt; 로 설정됩니다 .</target>
        </trans-unit>
        <trans-unit id="018c0e68c94f9f979bcddcd227e8ad92dfe5e9c0" translate="yes" xml:space="preserve">
          <source>This zero-width pattern can be used to mark the point reached in a string when a certain part of the pattern has been successfully matched. This mark may be given a name. A later &lt;code&gt;(*SKIP)&lt;/code&gt; pattern will then skip forward to that point if backtracked into on failure. Any number of &lt;code&gt;(*MARK)&lt;/code&gt; patterns are allowed, and the NAME portion may be duplicated.</source>
          <target state="translated">이 폭이 0 인 패턴을 사용하면 패턴의 특정 부분이 성공적으로 일치했을 때 문자열에 도달 한 지점을 표시 할 수 있습니다. 이 마크에는 이름이 주어질 수 있습니다. 그런 다음 이후 &lt;code&gt;(*SKIP)&lt;/code&gt; 패턴은 실패시 역 추적되는 경우 해당 지점으로 건너 뜁니다. 여러 &lt;code&gt;(*MARK)&lt;/code&gt; 패턴이 허용되며 NAME 부분은 복제 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3e845add8e49d7a0ebfe26e6329051032e10440f" translate="yes" xml:space="preserve">
          <source>This zero-width pattern is similar to &lt;code&gt;(*PRUNE)&lt;/code&gt; , except that on failure it also signifies that whatever text that was matched leading up to the &lt;code&gt;(*SKIP)&lt;/code&gt; pattern being executed cannot be part of</source>
          <target state="translated">이 폭이 0 인 패턴은 &lt;code&gt;(*PRUNE)&lt;/code&gt; 과 유사하지만 , 실패시 실행되는 &lt;code&gt;(*SKIP)&lt;/code&gt; 패턴에 일치하는 텍스트 는 실행할 수 없음을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="8c4b9623686b3758cfd382a28c93e0707ac9367e" translate="yes" xml:space="preserve">
          <source>This zero-width pattern prunes the backtracking tree at the current point when backtracked into on failure. Consider the pattern &lt;code&gt;A (*PRUNE) B&lt;/code&gt;, where A and B are complex patterns. Until the &lt;code&gt;(*PRUNE)&lt;/code&gt; verb is reached, A may backtrack as necessary to match. Once it is reached, matching continues in B, which may also backtrack as necessary; however, should B not match, then no further backtracking will take place, and the pattern will fail outright at the current starting position.</source>
          <target state="translated">이 폭이 0 인 패턴은 실패시 역 추적 될 때 현재 지점에서 역 추적 트리를 제거합니다. 패턴 &lt;code&gt;A (*PRUNE) B&lt;/code&gt; 고려하십시오. 여기서 A 및 B는 복잡한 패턴입니다. &lt;code&gt;(*PRUNE)&lt;/code&gt; 동사에 도달 할 때까지 A는 일치시키기 위해 필요에 따라 역 추적 할 수 있습니다. 도달하면 B에서 계속 일치하며, 필요에 따라 역 추적 할 수도 있습니다. 그러나 B가 일치하지 않으면 더 이상 역 추적이 발생하지 않으며 패턴이 현재 시작 위치에서 완전히 실패합니다.</target>
        </trans-unit>
        <trans-unit id="6ab6320cf6b57ad1eb41183660b9a012d0721d64" translate="yes" xml:space="preserve">
          <source>Thomas Dorner</source>
          <target state="translated">토마스 도너</target>
        </trans-unit>
        <trans-unit id="81e4e8d1869fa873203b699ef2f7c28f0d0f204c" translate="yes" xml:space="preserve">
          <source>Those can be rather inefficient though. If they aren't fast enough for you, you might just read chunks of data and count the number of newlines:</source>
          <target state="translated">그러나 다소 비효율적 일 수 있습니다. 그들이 당신을 위해 충분히 빠르지 않은 경우, 당신은 단지 데이터 덩어리를 읽고 줄 바꿈 수를 계산할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="1fd34bde8d27f4db80e364187fff01e57e24dcf5" translate="yes" xml:space="preserve">
          <source>Those debugging perl with the DDD frontend over gdb may find the following useful:</source>
          <target state="translated">gdb를 통한 DDD 프론트 엔드를 사용한 디버깅 perl은 다음과 같은 유용한 정보를 찾을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d8de155d193899f771792e739cfd779f42445bfd" translate="yes" xml:space="preserve">
          <source>Those discouraged forms are accepted as input to &lt;code&gt;prop_aliases&lt;/code&gt; , but are not returned in the lists. &lt;code&gt;prop_aliases('isL&amp;amp;')&lt;/code&gt; and &lt;code&gt;prop_aliases('isL_')&lt;/code&gt; , which are old synonyms for &lt;code&gt;&quot;Is_LC&quot;&lt;/code&gt; and should not be used in new code, are examples of this. These both return &lt;code&gt;(Is_LC, Cased_Letter)&lt;/code&gt; . Thus this function allows you to take a discouraged form, and find its acceptable alternatives. The same goes with single-form Block property equivalences. Only the forms that begin with &lt;code&gt;&quot;In_&quot;&lt;/code&gt; are not discouraged; if you pass &lt;code&gt;prop_aliases&lt;/code&gt; a discouraged form, you will get back the equivalent ones that begin with &lt;code&gt;&quot;In_&quot;&lt;/code&gt; . It will otherwise look like a new-style block name (see. &lt;a href=&quot;#Old-style-versus-new-style-block-names&quot;&gt;Old-style versus new-style block names&lt;/a&gt;).</source>
          <target state="translated">권장하지 않는 양식은 &lt;code&gt;prop_aliases&lt;/code&gt; 에 대한 입력으로 허용 되지만 목록에는 리턴되지 않습니다. &lt;code&gt;prop_aliases('isL&amp;amp;')&lt;/code&gt; 및 &lt;code&gt;prop_aliases('isL_')&lt;/code&gt; 는 &lt;code&gt;&quot;Is_LC&quot;&lt;/code&gt; 에 대한 오래된 동의어 이며 새 코드에서 사용해서는 안됩니다. 둘 다 &lt;code&gt;(Is_LC, Cased_Letter)&lt;/code&gt; 반환 합니다. 따라서이 기능을 사용하면 낙담 된 형태를 취하고 적절한 대안을 찾을 수 있습니다. 단일 형식의 블록 속성과 동일합니다. &lt;code&gt;&quot;In_&quot;&lt;/code&gt; 로 시작하는 양식 만 권장하지 않습니다. 권장하지 않는 양식 &lt;code&gt;prop_aliases&lt;/code&gt; 를 전달 하면 &lt;code&gt;&quot;In_&quot;&lt;/code&gt; 로 시작하는 해당 양식이 다시 표시됩니다.. 그렇지 않으면 새로운 스타일의 블록 이름처럼 보일 것입니다 ( &lt;a href=&quot;#Old-style-versus-new-style-block-names&quot;&gt;구식과 새로운 스타일의 블록 이름 참조&lt;/a&gt; ).</target>
        </trans-unit>
        <trans-unit id="6da32d7b6dfc1f76299003b85142b3301014ca18" translate="yes" xml:space="preserve">
          <source>Those examples also illustrate that you should not try to use &lt;code&gt;&lt;a href=&quot;functions/pack&quot;&gt;pack&lt;/a&gt;&lt;/code&gt;/&lt;code&gt;&lt;a href=&quot;functions/unpack&quot;&gt;unpack&lt;/a&gt;&lt;/code&gt; as a substitute for the &lt;a href=&quot;encode&quot;&gt;Encode&lt;/a&gt; module.</source>
          <target state="translated">또한 이러한 예제는 &lt;a href=&quot;encode&quot;&gt;Encode&lt;/a&gt; 모듈 대신 &lt;code&gt;&lt;a href=&quot;functions/pack&quot;&gt;pack&lt;/a&gt;&lt;/code&gt; / &lt;code&gt;&lt;a href=&quot;functions/unpack&quot;&gt;unpack&lt;/a&gt;&lt;/code&gt; 을 사용해서는 안된다는 것을 보여줍니다 .</target>
        </trans-unit>
        <trans-unit id="a75c1c6107c9c80616709d9370ed7d64d72897ff" translate="yes" xml:space="preserve">
          <source>Those examples also illustrate that you should not try to use &lt;code&gt;&lt;a href=&quot;pack&quot;&gt;pack&lt;/a&gt;&lt;/code&gt;/&lt;code&gt;&lt;a href=&quot;unpack&quot;&gt;unpack&lt;/a&gt;&lt;/code&gt; as a substitute for the &lt;a href=&quot;../encode&quot;&gt;Encode&lt;/a&gt; module.</source>
          <target state="translated">또한 이러한 예제는 &lt;a href=&quot;../encode&quot;&gt;Encode&lt;/a&gt; 모듈 대신 &lt;code&gt;&lt;a href=&quot;pack&quot;&gt;pack&lt;/a&gt;&lt;/code&gt; / &lt;code&gt;&lt;a href=&quot;unpack&quot;&gt;unpack&lt;/a&gt;&lt;/code&gt; 을 사용해서는 안된다는 것을 보여줍니다 .</target>
        </trans-unit>
        <trans-unit id="956b46dcd2869bcc1ce846f30fe79b6d32253a71" translate="yes" xml:space="preserve">
          <source>Those methods which override default MM_Unix methods are marked &quot;(override)&quot;, while methods unique to MM_VMS are marked &quot;(specific)&quot;. For overridden methods, documentation is limited to an explanation of why this method overrides the MM_Unix method; see the ExtUtils::MM_Unix documentation for more details.</source>
          <target state="translated">기본 MM_Unix 메소드를 대체하는 메소드는 &quot;(재정의)&quot;로 표시되는 반면 MM_VMS에 고유 한 메소드는 &quot;(특정)&quot;으로 표시됩니다. 재정의 된 메소드의 경우,이 메소드가 MM_Unix 메소드를 대체하는 이유에 대한 설명으로 문서가 제한됩니다. 자세한 내용은 ExtUtils :: MM_Unix 설명서를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="89694826230f33ec41f3391ad1e9d0ae75075e89" translate="yes" xml:space="preserve">
          <source>Those not usable within a bracketed character class (like &lt;code&gt;[\da-z]&lt;/code&gt; ) are marked as &lt;code&gt;Not in [].&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;[\da-z]&lt;/code&gt; 와 같이 괄호로 묶은 문자 클래스 내에서 사용할 수 &lt;code&gt;Not in [].&lt;/code&gt; 표시됩니다 .</target>
        </trans-unit>
        <trans-unit id="5c59400870fdcf39cd37f7130db3cbffeeca3151" translate="yes" xml:space="preserve">
          <source>Those options are explained in &lt;a href=&quot;../man&quot;&gt;Pod::Man&lt;/a&gt;.</source>
          <target state="translated">이러한 옵션은 &lt;a href=&quot;../man&quot;&gt;Pod :: Man에&lt;/a&gt; 설명되어 있습니다 .</target>
        </trans-unit>
        <trans-unit id="b8a06e11acd02f600ac3a6ff09284942503ee656" translate="yes" xml:space="preserve">
          <source>Though forcing an argument into a particular form does not change the stored number, Perl remembers the result of such conversions. In particular, though the first such conversion may be time-consuming, repeated operations will not need to redo the conversion.</source>
          <target state="translated">인수를 특정 형식으로 강요하더라도 저장된 숫자는 변경되지 않지만 Perl은 이러한 변환 결과를 기억합니다. 특히, 최초의 이러한 변환은 시간 소모적 일 수 있지만, 반복 된 동작은 변환을 다시 실행할 필요가 없을 것이다.</target>
        </trans-unit>
        <trans-unit id="f3be83a9aceb8b170431d7d56170a63bf06c2048" translate="yes" xml:space="preserve">
          <source>Though much can be written about the inconsistency and coverage problems of gcc warnings (like &lt;code&gt;-Wall&lt;/code&gt; not meaning &quot;all the warnings&quot;, or some common portability problems not being covered by &lt;code&gt;-Wall&lt;/code&gt; , or &lt;code&gt;-ansi&lt;/code&gt; and &lt;code&gt;-pedantic&lt;/code&gt; both being a poorly defined collection of warnings, and so forth), gcc is still a useful tool in keeping our coding nose clean.</source>
          <target state="translated">같은 많은 (GCC 경고의 불일치 및 적용 범위 문제에 대해 설명 할 수 있지만 &lt;code&gt;-Wall&lt;/code&gt; 이 적용되지 않는 &quot;모든 경고&quot;, 또는 일반적인 이동성 문제를 의미하지 &lt;code&gt;-Wall&lt;/code&gt; , 또는 &lt;code&gt;-ansi&lt;/code&gt; 와 &lt;code&gt;-pedantic&lt;/code&gt; 모두있는 잘못 정의 모음 gcc는 여전히 코딩 코를 깨끗하게 유지하는 데 유용한 도구입니다.</target>
        </trans-unit>
        <trans-unit id="419ade92c2c3a75f745587c25bed6b20ff3a2dd8" translate="yes" xml:space="preserve">
          <source>Though this module can be used without any &lt;code&gt;table&lt;/code&gt; file, to use this module easily, it is recommended to install a table file in the UCA format, by copying it under the directory &amp;lt;a place in @INC&amp;gt;/Unicode/Collate.</source>
          <target state="translated">이 모듈을 &lt;code&gt;table&lt;/code&gt; 파일 없이 사용할 수 있지만이 모듈을 쉽게 사용하려면 &amp;lt;INC의 위치&amp;gt; / Unicode / Collate 디렉토리 아래에 파일을 복사하여 UCA 형식으로 테이블 파일을 설치하는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="7863f7503e5377891a3b7452c7d6cc377d443fe7" translate="yes" xml:space="preserve">
          <source>Thread</source>
          <target state="translated">Thread</target>
        </trans-unit>
        <trans-unit id="0d8bdcbf638d7eb68b070735be885cf9e96d329d" translate="yes" xml:space="preserve">
          <source>Thread - Manipulate threads in Perl (for old code only)</source>
          <target state="translated">스레드-Perl에서 스레드 조작 (이전 코드에만 해당)</target>
        </trans-unit>
        <trans-unit id="c918ac60574a68bba66c3da27f233195a15f2b9b" translate="yes" xml:space="preserve">
          <source>Thread Basics</source>
          <target state="translated">스레드 기본</target>
        </trans-unit>
        <trans-unit id="ebe1f739c1cdedc327a9eae1c397ab14c9d64437" translate="yes" xml:space="preserve">
          <source>Thread IDs</source>
          <target state="translated">스레드 ID</target>
        </trans-unit>
        <trans-unit id="898f39e0ee67463e37091c0ab76e5df497814e8b" translate="yes" xml:space="preserve">
          <source>Thread Pitfalls: Races</source>
          <target state="translated">함정 함정 : 인종</target>
        </trans-unit>
        <trans-unit id="b66b6cbe04365929e922b75680e179e46127f3a3" translate="yes" xml:space="preserve">
          <source>Thread Safety</source>
          <target state="translated">스레드 안전</target>
        </trans-unit>
        <trans-unit id="c4066c9a805adec4e9141cb77efe0020bace9560" translate="yes" xml:space="preserve">
          <source>Thread objects also have an overloaded &lt;code&gt;==&lt;/code&gt; comparison so that you can do comparison on them as you would with normal objects.</source>
          <target state="translated">스레드 객체에는 오버로드 &lt;code&gt;==&lt;/code&gt; 비교 기능이 있으므로 일반 객체와 비교할 때 비교할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="549ccddc66fc92574e2a5d76a4615e0548e5e609" translate="yes" xml:space="preserve">
          <source>Thread support is a Perl compile-time option. It's something that's turned on or off when Perl is built at your site, rather than when your programs are compiled. If your Perl wasn't compiled with thread support enabled, then any attempt to use threads will fail.</source>
          <target state="translated">스레드 지원은 Perl 컴파일 타임 옵션입니다. 프로그램이 컴파일되는 것이 아니라 사이트에서 Perl을 빌드 할 때 켜거나 끄는 것입니다. 스레드 지원이 활성화 된 상태에서 Perl이 컴파일되지 않은 경우 스레드 사용 시도가 실패합니다.</target>
        </trans-unit>
        <trans-unit id="46bddf5c24ca2d6a4d9042e8357ff7786b5311d0" translate="yes" xml:space="preserve">
          <source>Thread support is not tested in this version of the djgpp perl.</source>
          <target state="translated">이 버전의 djgpp perl에서는 스레드 지원이 테스트되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="c46da741d2999f303803e3f917e3740fdda50340" translate="yes" xml:space="preserve">
          <source>Thread support is not very reliable before 5.10.1, but that's because threads are not very reliable before 5.10.1.</source>
          <target state="translated">스레드 지원은 5.10.1 이전에는 매우 안정적이지 않지만 5.10.1 이전에는 스레드가 매우 안정적이지 않기 때문입니다.</target>
        </trans-unit>
        <trans-unit id="8fed753691ece692a240fff0998afe0f2ace9f0d" translate="yes" xml:space="preserve">
          <source>Thread-Safe Modules</source>
          <target state="translated">스레드 안전 모듈</target>
        </trans-unit>
        <trans-unit id="7481655dbaa92f6baf98738070e27520e97d079c" translate="yes" xml:space="preserve">
          <source>Thread-Safety of System Libraries</source>
          <target state="translated">시스템 라이브러리의 스레드 안전성</target>
        </trans-unit>
        <trans-unit id="932b17e3a913e7164b20d08cedb16d8eee3d76fc" translate="yes" xml:space="preserve">
          <source>Thread-aware system interfaces</source>
          <target state="translated">스레드 인식 시스템 인터페이스</target>
        </trans-unit>
        <trans-unit id="a04c2c8f868b7f546d5c03554daa6de042ed3f5f" translate="yes" xml:space="preserve">
          <source>Thread-safe queues</source>
          <target state="translated">스레드 안전 큐</target>
        </trans-unit>
        <trans-unit id="6ec24d7d376e4c8018f31c516a824eaf616af734" translate="yes" xml:space="preserve">
          <source>Thread-safe semaphores</source>
          <target state="translated">스레드 안전 세마포어</target>
        </trans-unit>
        <trans-unit id="396f10461adcaf1d700d25868c55c05cc6b1f668" translate="yes" xml:space="preserve">
          <source>Thread::Queue</source>
          <target state="translated">Thread::Queue</target>
        </trans-unit>
        <trans-unit id="a99444903cfd04a299ea92dd5417034d9b8ba995" translate="yes" xml:space="preserve">
          <source>Thread::Queue - Thread-safe queues</source>
          <target state="translated">Thread :: Queue-스레드 안전 큐</target>
        </trans-unit>
        <trans-unit id="762634ef60addc5dc2601bb4e594eccb63b09b78" translate="yes" xml:space="preserve">
          <source>Thread::Queue Discussion Forum on CPAN: &lt;a href=&quot;http://www.cpanforum.com/dist/Thread-Queue&quot;&gt;http://www.cpanforum.com/dist/Thread-Queue&lt;/a&gt;</source>
          <target state="translated">글타래 (쓰레드) :: 큐 토론 포럼 : &lt;a href=&quot;http://www.cpanforum.com/dist/Thread-Queue&quot;&gt;http://www.cpanforum.com/dist/Thread-Queue&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="0074185a9ba92a372e711b37e0503d776af40535" translate="yes" xml:space="preserve">
          <source>Thread::Semaphore</source>
          <target state="translated">Thread::Semaphore</target>
        </trans-unit>
        <trans-unit id="5153c71809c73fa56e9f450e40e65e39c3a75a98" translate="yes" xml:space="preserve">
          <source>Thread::Semaphore - Thread-safe semaphores</source>
          <target state="translated">글타래 (쓰레드) :: Semaphore-Thread-safe semaphores</target>
        </trans-unit>
        <trans-unit id="b671103ebdb4e0b4d2ecc230ad75192d06191f6c" translate="yes" xml:space="preserve">
          <source>Thread::Semaphore Discussion Forum on CPAN: &lt;a href=&quot;http://www.cpanforum.com/dist/Thread-Semaphore&quot;&gt;http://www.cpanforum.com/dist/Thread-Semaphore&lt;/a&gt;</source>
          <target state="translated">글타래 (쓰레드) :: 세마포어 토론 포럼 CPAN : &lt;a href=&quot;http://www.cpanforum.com/dist/Thread-Semaphore&quot;&gt;http://www.cpanforum.com/dist/Thread-Semaphore&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="a01c8841eeee1a585b966adef58341ccb26f6e3f" translate="yes" xml:space="preserve">
          <source>Threaded Perl</source>
          <target state="translated">스레드 펄</target>
        </trans-unit>
        <trans-unit id="b3c18742ec345b212b0e3561e0712bc0736d2fd7" translate="yes" xml:space="preserve">
          <source>Threaded Perl &amp;lt; 5L</source>
          <target state="translated">스레드 펄 &amp;lt;5L</target>
        </trans-unit>
        <trans-unit id="896b80373adefd94b0d4d1ca953da0068f3de675" translate="yes" xml:space="preserve">
          <source>Threaded Perl on HP-UX</source>
          <target state="translated">HP-UX의 스레드 펄</target>
        </trans-unit>
        <trans-unit id="278ce1d68672d63d7d64a6301d587c6d418cdd49" translate="yes" xml:space="preserve">
          <source>Threaded Perl on Tru64</source>
          <target state="translated">Tru64의 스레드 펄</target>
        </trans-unit>
        <trans-unit id="3e5a5f323fc4b225e8b871ec76ea2983f10ebd12" translate="yes" xml:space="preserve">
          <source>Threaded Program Models</source>
          <target state="translated">스레드 프로그램 모델</target>
        </trans-unit>
        <trans-unit id="5541d0b76d127f6a3c54bbc247ffcc1b6c2bbc25" translate="yes" xml:space="preserve">
          <source>Threading</source>
          <target state="translated">Threading</target>
        </trans-unit>
        <trans-unit id="bb12e8aaaecc434fd51e448fe7669bced1bdd107" translate="yes" xml:space="preserve">
          <source>Threads</source>
          <target state="translated">Threads</target>
        </trans-unit>
        <trans-unit id="6596a15b769c831a3f0b4a20d6206e9aaff0ff18" translate="yes" xml:space="preserve">
          <source>Threads And Data</source>
          <target state="translated">스레드와 데이터</target>
        </trans-unit>
        <trans-unit id="ce6a15cf18170dad63898b28647ad599c148d2e2" translate="yes" xml:space="preserve">
          <source>Threads and PERL_NO_GET_CONTEXT</source>
          <target state="translated">스레드와 PERL_NO_GET_CONTEXT</target>
        </trans-unit>
        <trans-unit id="f29a9672c8b3e91f034cbb02629e17bf739af74a" translate="yes" xml:space="preserve">
          <source>Threads are executed in an &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt; context. This method will return &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; if the thread terminates</source>
          <target state="translated">스레드는 &lt;code&gt;&lt;a href=&quot;functions/eval&quot;&gt;eval&lt;/a&gt;&lt;/code&gt; 컨텍스트 에서 실행됩니다 . 스레드가 종료되면 이 메소드는 &lt;code&gt;&lt;a href=&quot;functions/undef&quot;&gt;undef&lt;/a&gt;&lt;/code&gt; 를 리턴 합니다.</target>
        </trans-unit>
        <trans-unit id="b839f3a9a828ffa9cf5380fd081f2abe973e818b" translate="yes" xml:space="preserve">
          <source>Threads created after the stack size is set will then either call &lt;code&gt;pthread_attr_setstacksize()&lt;/code&gt;</source>
          <target state="translated">스택 크기가 설정된 후 생성 된 스레드는 &lt;code&gt;pthread_attr_setstacksize()&lt;/code&gt; 호출합니다.</target>
        </trans-unit>
        <trans-unit id="94467b457a28016ce826b824829b4d6d15c2d05d" translate="yes" xml:space="preserve">
          <source>Threads in perl on Solaris.</source>
          <target state="translated">Solaris에서 펄의 스레드.</target>
        </trans-unit>
        <trans-unit id="9bf016cf50be3949ad3553a7f6154f5ec7b5a4bd" translate="yes" xml:space="preserve">
          <source>Threads seem to work OK, though at the moment not all tests pass when threads are used in combination with 64-bit configurations.</source>
          <target state="translated">스레드가 제대로 작동하는 것처럼 보이지만 현재 스레드가 64 비트 구성과 함께 사용될 때 모든 테스트가 통과되는 것은 아닙니다.</target>
        </trans-unit>
        <trans-unit id="4cfcad8da4f4097a771977a006ace86ca57e64ee" translate="yes" xml:space="preserve">
          <source>Three additional functions allow access to this statistic from Perl. First, use &lt;code&gt;mstats_fillhash(%hash)&lt;/code&gt; to get the information contained in the output of mstat() into %hash. The field of this hash are</source>
          <target state="translated">Perl에서이 통계에 액세스 할 수있는 세 가지 추가 기능이 있습니다. 먼저 &lt;code&gt;mstats_fillhash(%hash)&lt;/code&gt; 를 사용하여 mstat () 의 출력에 포함 된 정보를 % hash 로 가져옵니다. 이 해시의 필드는</target>
        </trans-unit>
        <trans-unit id="26e5837be2de4b1aebd256f3b85dedb9966c5789" translate="yes" xml:space="preserve">
          <source>Three arguments are passed to all subroutines specified in the &lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; overload&lt;/code&gt; directive (with exceptions - see below, particularly &lt;a href=&quot;#nomethod&quot;&gt;nomethod&lt;/a&gt;).</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;functions/use&quot;&gt;use&lt;/a&gt; overload&lt;/code&gt; 지시문에 지정된 모든 서브 루틴에 세 개의 인수가 전달됩니다 (예외-특히 &lt;a href=&quot;#nomethod&quot;&gt;nomethod&lt;/a&gt; 참조 ).</target>
        </trans-unit>
        <trans-unit id="3cd6b1128d59a894465f4f165820b4021adc3e92" translate="yes" xml:space="preserve">
          <source>Three basic types of firewalls</source>
          <target state="translated">세 가지 기본 유형의 방화벽</target>
        </trans-unit>
        <trans-unit id="c4ffe47253803edde038382d85662a60a52eedba" translate="yes" xml:space="preserve">
          <source>Three examples illustrate locale-dependent tainting. The first program, which ignores its locale, won't run: a value taken directly from the command line may not be used to name an output file when taint checks are enabled.</source>
          <target state="translated">세 가지 예는 로케일에 따른 오염을 보여줍니다. 로케일을 무시하는 첫 번째 프로그램은 실행되지 않습니다. 오염 검사가 활성화 된 경우 명령 행에서 직접 가져온 값을 사용하여 출력 파일의 이름을 지정할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="6141ac98876a4853f17c73073300c31f8ef5f853" translate="yes" xml:space="preserve">
          <source>Three kinds of values are supported: integer numbers, floating point numbers, and strings.</source>
          <target state="translated">정수, 부동 소수점 숫자 및 문자열의 세 가지 값이 지원됩니다.</target>
        </trans-unit>
        <trans-unit id="1e762c22c180faab240d71e43cfef464b083afa9" translate="yes" xml:space="preserve">
          <source>Three techniques can make regular expressions maintainable and understandable.</source>
          <target state="translated">세 가지 기술로 정규식을 유지 관리하고 이해할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="1e024ca38a0a0e2a4280224604ff002f7a982d0a" translate="yes" xml:space="preserve">
          <source>Through &lt;code&gt;ignoreChar&lt;/code&gt; , any character matching &lt;code&gt;&lt;a href=&quot;../functions/qr&quot;&gt;qr/$ignoreChar/&lt;/a&gt;&lt;/code&gt; will be ignored. Through &lt;code&gt;ignoreName&lt;/code&gt; , any character whose name (given in the &lt;code&gt;table&lt;/code&gt; file as a comment) matches &lt;code&gt;&lt;a href=&quot;../functions/qr&quot;&gt;qr/$ignoreName/&lt;/a&gt;&lt;/code&gt; will be ignored.</source>
          <target state="translated">&lt;code&gt;ignoreChar&lt;/code&gt; 를 통해 &lt;code&gt;&lt;a href=&quot;../functions/qr&quot;&gt;qr/$ignoreChar/&lt;/a&gt;&lt;/code&gt; 일치하는 모든 문자 는 무시됩니다. &lt;code&gt;ignoreName&lt;/code&gt; 을 통해 이름 ( &lt;code&gt;table&lt;/code&gt; 파일에 주석으로 &lt;code&gt;&lt;a href=&quot;../functions/qr&quot;&gt;qr/$ignoreName/&lt;/a&gt;&lt;/code&gt; )이 qr / $ ignoreName / 과 일치 하는 문자는 무시됩니다.</target>
        </trans-unit>
        <trans-unit id="2656f0fc85c8406c01f3e25365ba08b9847d1444" translate="yes" xml:space="preserve">
          <source>Through &lt;code&gt;overrideCJK&lt;/code&gt; , ordering of CJK unified ideographs (including extensions) can be overridden.</source>
          <target state="translated">&lt;code&gt;overrideCJK&lt;/code&gt; 를 통해 CJK 통합 표의 문자 (확장자 포함)의 순서 를 무시할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d41b6131470dc9be4067c613ceb5bce948ecfe0f" translate="yes" xml:space="preserve">
          <source>Through &lt;code&gt;undefChar&lt;/code&gt; , any character matching &lt;code&gt;&lt;a href=&quot;../functions/qr&quot;&gt;qr/$undefChar/&lt;/a&gt;&lt;/code&gt; will be undefined. Through &lt;code&gt;undefName&lt;/code&gt; , any character whose name (given in the &lt;code&gt;table&lt;/code&gt; file as a comment) matches &lt;code&gt;&lt;a href=&quot;../functions/qr&quot;&gt;qr/$undefName/&lt;/a&gt;&lt;/code&gt; will be undefined.</source>
          <target state="translated">&lt;code&gt;undefChar&lt;/code&gt; 를 통해 &lt;code&gt;&lt;a href=&quot;../functions/qr&quot;&gt;qr/$undefChar/&lt;/a&gt;&lt;/code&gt; 일치하는 문자 는 정의되지 않습니다. &lt;code&gt;undefName&lt;/code&gt; 을 통해 ( &lt;code&gt;table&lt;/code&gt; 파일에 주석으로 제공된) 이름이 &lt;code&gt;&lt;a href=&quot;../functions/qr&quot;&gt;qr/$undefName/&lt;/a&gt;&lt;/code&gt; 과 일치 하는 문자는 정의되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="d077a4a651b19b1e4364e9f887336a0ac7a1fd1b" translate="yes" xml:space="preserve">
          <source>Throughout Perl's documentation, you'll find numerous examples intended to help explain the discussed features. Please keep in mind that many of them are code fragments rather than complete programs.</source>
          <target state="translated">Perl의 문서 전체에서 논의 된 기능을 설명하는 데 도움이되는 수많은 예제가 있습니다. 이들 중 다수는 완전한 프로그램이 아니라 코드 조각이라는 점을 명심하십시오.</target>
        </trans-unit>
        <trans-unit id="c8b395c4fc736d7a1ffa585c8b907d633728a128" translate="yes" xml:space="preserve">
          <source>Throughout the previous section all the examples have used the syntax:</source>
          <target state="translated">이전 섹션에서 모든 예제는 다음 구문을 사용했습니다.</target>
        </trans-unit>
        <trans-unit id="04ea385bf46d02438c73b811e0575313e27e41c8" translate="yes" xml:space="preserve">
          <source>Throughout this document a variety of interfaces to the rpcb_gettime() XSUB will be explored. The XSUBs will take their parameters in different orders or will take different numbers of parameters. In each case the XSUB is an abstraction between Perl and the real C rpcb_gettime() function, and the XSUB must always ensure that the real rpcb_gettime() function is called with the correct parameters. This abstraction will allow the programmer to create a more Perl-like interface to the C function.</source>
          <target state="translated">이 문서 전체에서 rpcb_gettime () XSUB에 대한 다양한 인터페이스를 살펴 봅니다. XSUB는 매개 변수를 다른 순서로 사용하거나 다른 수의 매개 변수를 사용합니다. 각 경우에 XSUB는 Perl과 실제 C rpcb_gettime () 함수 사이의 추상화이며 XSUB는 항상 실제 rpcb_gettime () 함수가 올바른 매개 변수로 호출되는지 확인해야합니다. 이 추상화는 프로그래머가 C 함수에 대한보다 Perl과 유사한 인터페이스를 만들 수 있도록합니다.</target>
        </trans-unit>
        <trans-unit id="b15b9c197ac6c931d6850ebe19f2134cab6a760f" translate="yes" xml:space="preserve">
          <source>Throughout this document you'll see references to other parts of the Perl documentation. You can read that documentation using the &lt;code&gt;perldoc&lt;/code&gt; command or whatever method you're using to read this document.</source>
          <target state="translated">이 문서 전체에서 Perl 문서의 다른 부분에 대한 참조를 볼 수 있습니다. &lt;code&gt;perldoc&lt;/code&gt; 명령 또는이 문서를 읽는 데 사용하는 방법을 사용하여 해당 문서를 읽을 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="d384b2c788b5330a252672c9c0d9ed4dcefe6cd2" translate="yes" xml:space="preserve">
          <source>Throughout this document, &quot;Pod&quot; has been the preferred spelling for the name of the documentation format. One may also use &quot;POD&quot; or &quot;pod&quot;. For the documentation that is (typically) in the Pod format, you may use &quot;pod&quot;, or &quot;Pod&quot;, or &quot;POD&quot;. Understanding these distinctions is useful; but obsessing over how to spell them, usually is not.</source>
          <target state="translated">이 문서 전체에서 &quot;포드&quot;는 문서 형식의 이름에 가장 적합한 철자입니다. &quot;POD&quot;또는 &quot;pod&quot;를 사용할 수도 있습니다. 일반적으로 Pod 형식 인 설명서의 경우 &quot;pod&quot;또는 &quot;Pod&quot;또는 &quot;POD&quot;를 사용할 수 있습니다. 이러한 차이점을 이해하면 유용합니다. 그러나 철자를 쓰는 법에 집착하는 것은 보통 그렇지 않습니다.</target>
        </trans-unit>
        <trans-unit id="6a4f24f440cbc4008a46d5ea71d57cb32fa115ff" translate="yes" xml:space="preserve">
          <source>Throw in some dubious extra macros for Makefile args.</source>
          <target state="translated">Makefile 인수에 대해 모호한 추가 매크로를 던져보십시오.</target>
        </trans-unit>
        <trans-unit id="d1f7b26cf9b0b9d2fcaec187b02a47e2ac8cf9d0" translate="yes" xml:space="preserve">
          <source>Thus Perl allows such constructs, by</source>
          <target state="translated">따라서 Perl은 다음과 같은 구성을 허용합니다.</target>
        </trans-unit>
        <trans-unit id="ab203f90d156d52e2f73ed76c1de89f7fea26e7e" translate="yes" xml:space="preserve">
          <source>Thus Perl returns true on success and false on failure, yet you can still easily determine the actual value returned by the operating system:</source>
          <target state="translated">따라서 Perl은 성공하면 true를, 실패하면 false를 반환하지만 운영 체제에서 반환 한 실제 값을 쉽게 확인할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="68e6804dcc6b004791c6943dada1f9eeda86eed7" translate="yes" xml:space="preserve">
          <source>Thus means that you need to get some copy of a</source>
          <target state="translated">따라서 일부 사본을 받아야 함을 의미합니다.</target>
        </trans-unit>
        <trans-unit id="2e4d332fae9a917754e083395b2e8d74491bb6fd" translate="yes" xml:space="preserve">
          <source>Thus the pattern &lt;code&gt;/foo(?:\w+|\d+|\s+)bar/&lt;/code&gt; can be thought of as the following chart:</source>
          <target state="translated">따라서 &lt;code&gt;/foo(?:\w+|\d+|\s+)bar/&lt;/code&gt; 은 다음 차트로 생각할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f633037050d154781c387ade59e7e2912691ab20" translate="yes" xml:space="preserve">
          <source>Thus the warning is raised for many fewer cases than in earlier Perls, and only when what the result is could be arguable. It turns out that none of the optimizations made by Perl (or are ever likely to be made) cause the warning to be skipped, so it solves both problems of Perl's earlier approach. The most commonly used property that is affected by this change is &lt;code&gt;\p{Unassigned}&lt;/code&gt; which is a short form for &lt;code&gt;\p{General_Category=Unassigned}&lt;/code&gt; . Starting in v5.20, all non-Unicode code points are considered &lt;code&gt;Unassigned&lt;/code&gt; . In earlier releases the matches failed because the result was considered undefined.</source>
          <target state="translated">따라서 경고는 이전 Perls보다 훨씬 적은 경우에 대해 결과가 논쟁의 여지가있을 때만 발생합니다. Perl에 의해 만들어진 최적화 (또는 가능성이 높지 않음)로 경고를 건너 뛰는 일이 없기 때문에 Perl의 초기 접근 방식의 두 가지 문제를 모두 해결합니다. 이 변경의 영향을받는 가장 일반적으로 사용되는 속성은 &lt;code&gt;\p{Unassigned}&lt;/code&gt; 이며 이는 &lt;code&gt;\p{General_Category=Unassigned}&lt;/code&gt; 의 짧은 형식입니다 . v5.20부터는 비 유니 코드 코드 포인트가 모두 &lt;code&gt;Unassigned&lt;/code&gt; 것으로 간주됩니다 . 이전 릴리스에서는 결과가 정의되지 않은 것으로 간주되어 일치가 실패했습니다.</target>
        </trans-unit>
        <trans-unit id="198082eebbb223fde4a47c55ef1e44319568487c" translate="yes" xml:space="preserve">
          <source>Thus you can say</source>
          <target state="translated">따라서 당신은 말할 수 있습니다</target>
        </trans-unit>
        <trans-unit id="61d7278739eb25e7e5958e1c5b254402dd825eb3" translate="yes" xml:space="preserve">
          <source>Thus, after a match against &lt;code&gt;$_&lt;/code&gt; , &lt;code&gt;$&amp;amp;&lt;/code&gt; coincides with &lt;code&gt;&lt;a href=&quot;functions/substr&quot;&gt;substr&lt;/a&gt; $_, $-[0],
$+[0] - $-[0]&lt;/code&gt; . Similarly, $</source>
          <target state="translated">따라서, 일치에 대해 후 &lt;code&gt;$_&lt;/code&gt; , &lt;code&gt;$&amp;amp;&lt;/code&gt; 일치 &lt;code&gt;&lt;a href=&quot;functions/substr&quot;&gt;substr&lt;/a&gt; $_, $-[0], $+[0] - $-[0]&lt;/code&gt; . 마찬가지로 $</target>
        </trans-unit>
        <trans-unit id="c9649f9466e2d92d8678d66258528b39110e1a08" translate="yes" xml:space="preserve">
          <source>Thus, techniques are of interest that store object data</source>
          <target state="translated">따라서 객체 데이터를 저장하는 기술에 관심이 있습니다.</target>
        </trans-unit>
        <trans-unit id="69514cb2285daf6fa2a75d85f6f93569b1ec1fbe" translate="yes" xml:space="preserve">
          <source>Thus, the following code:</source>
          <target state="translated">따라서 다음 코드는</target>
        </trans-unit>
        <trans-unit id="fdfd242e087e9b16796271aa3a036f7d0bbc20a8" translate="yes" xml:space="preserve">
          <source>Thus, when an SV is determined to be magical and of type &lt;code&gt;PERL_MAGIC_sv&lt;/code&gt; , if a get operation is being performed, the routine &lt;code&gt;magic_get&lt;/code&gt; is called. All the various routines for the various magical types begin with &lt;code&gt;magic_&lt;/code&gt; . NOTE: the magic routines are not considered part of the Perl API, and may not be exported by the Perl library.</source>
          <target state="translated">따라서 SV가 마법적이고 &lt;code&gt;PERL_MAGIC_sv&lt;/code&gt; 유형 인 것으로 판별 되면, get 조작이 수행되는 경우 루틴 &lt;code&gt;magic_get&lt;/code&gt; 이 호출됩니다. 다양한 마법 유형에 대한 모든 다양한 루틴은 &lt;code&gt;magic_&lt;/code&gt; 로 시작합니다 . 참고 : 매직 루틴은 Perl API의 일부로 간주되지 않으며 Perl 라이브러리에서 내보낼 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="792b045fd76c8a8e326c6a926aab95f7dc272599" translate="yes" xml:space="preserve">
          <source>Tidies a pod file. It's a good idea to run this on a pod file you've patched.</source>
          <target state="translated">포드 파일을 정리합니다. 패치 한 포드 파일에서이를 실행하는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="296860fe60dd454f0fedbc6ccca9835dfde819d9" translate="yes" xml:space="preserve">
          <source>Tidy up a pad at the end of compilation of the code to which it belongs. Jobs performed here are: remove most stuff from the pads of anonsub prototypes; give it a @_; mark temporaries as such.</source>
          <target state="translated">해당 코드가 컴파일 될 때 패드를 정리하십시오. 여기서 수행되는 작업은 다음과 같습니다. anonsub 프로토 타입의 패드에서 대부분의 물건을 제거합니다. 그것을 _; 임시로 표시하십시오.</target>
        </trans-unit>
        <trans-unit id="7d075f169d648523eaa03bb2a98984e48aa65769" translate="yes" xml:space="preserve">
          <source>Tie</source>
          <target state="translated">Tie</target>
        </trans-unit>
        <trans-unit id="0bb65db42104858e7d9b646133b08eaaeba3381c" translate="yes" xml:space="preserve">
          <source>Tie::Array</source>
          <target state="translated">Tie::Array</target>
        </trans-unit>
        <trans-unit id="75e3c18c1d17d4f15800c858036a1510e1e1f0e6" translate="yes" xml:space="preserve">
          <source>Tie::Array - base class for tied arrays</source>
          <target state="translated">Tie :: Array-묶인 배열의 기본 클래스</target>
        </trans-unit>
        <trans-unit id="3315a464fcfacdc6f9533f0ecfd375368fedb11d" translate="yes" xml:space="preserve">
          <source>Tie::File</source>
          <target state="translated">Tie::File</target>
        </trans-unit>
        <trans-unit id="a8bb1e5ad4fcbd12edf8be28ae56bee14e6f545c" translate="yes" xml:space="preserve">
          <source>Tie::File - Access the lines of a disk file via a Perl array</source>
          <target state="translated">Tie :: File-Perl 배열을 통해 디스크 파일의 라인에 액세스</target>
        </trans-unit>
        <trans-unit id="6319e96a453cce98221083d4f3fd8db235526699" translate="yes" xml:space="preserve">
          <source>Tie::Handle</source>
          <target state="translated">Tie::Handle</target>
        </trans-unit>
        <trans-unit id="0a548ea9945566563847425cd86bcbb7a0d010cc" translate="yes" xml:space="preserve">
          <source>Tie::Handle - base class definitions for tied handles</source>
          <target state="translated">Tie :: Handle-연결 핸들에 대한 기본 클래스 정의</target>
        </trans-unit>
        <trans-unit id="cd52c37918e2c0b25f36b5f416810f9f4f61d1e1" translate="yes" xml:space="preserve">
          <source>Tie::Hash</source>
          <target state="translated">Tie::Hash</target>
        </trans-unit>
        <trans-unit id="b1f9afc2a333da12fb6b6ad2b6d5e266f06e1fc4" translate="yes" xml:space="preserve">
          <source>Tie::Hash, Tie::StdHash, Tie::ExtraHash - base class definitions for tied hashes</source>
          <target state="translated">Tie :: Hash, Tie :: StdHash, Tie :: ExtraHash-묶인 해시의 기본 클래스 정의</target>
        </trans-unit>
        <trans-unit id="c8d3a75ba1b0a3910318dc42acaa46468a63fedd" translate="yes" xml:space="preserve">
          <source>Tie::Hash::NamedCapture</source>
          <target state="translated">Tie::Hash::NamedCapture</target>
        </trans-unit>
        <trans-unit id="fe35d5fd9c32e90217b32911caa7181fd20d6a89" translate="yes" xml:space="preserve">
          <source>Tie::Hash::NamedCapture - Named regexp capture buffers</source>
          <target state="translated">타이 :: 해시 :: NamedCapture-명명 된 정규 표현식 캡처 버퍼</target>
        </trans-unit>
        <trans-unit id="703b368dc238bcde88f5095c837de68b527d723e" translate="yes" xml:space="preserve">
          <source>Tie::Memoize</source>
          <target state="translated">Tie::Memoize</target>
        </trans-unit>
        <trans-unit id="7b3289a8b6604631463790d9f588d4dd69111f3a" translate="yes" xml:space="preserve">
          <source>Tie::Memoize - add data to hash when needed</source>
          <target state="translated">넥타이 :: 메모-필요할 때 해시에 데이터 추가</target>
        </trans-unit>
        <trans-unit id="aeeb15286d4bc809144814ad40c79ee05c416c3a" translate="yes" xml:space="preserve">
          <source>Tie::RefHash</source>
          <target state="translated">Tie::RefHash</target>
        </trans-unit>
        <trans-unit id="4bb364c89cbd37ee3daa5c39771c2605b0633761" translate="yes" xml:space="preserve">
          <source>Tie::RefHash - use references as hash keys</source>
          <target state="translated">Tie :: RefHash-참조를 해시 키로 사용</target>
        </trans-unit>
        <trans-unit id="fb9e6a1ad57553eb30c0b9f049adcbf5c6d8c3ed" translate="yes" xml:space="preserve">
          <source>Tie::Scalar</source>
          <target state="translated">Tie::Scalar</target>
        </trans-unit>
        <trans-unit id="14241eaa440004f0f7b17e76185eebd008e2584c" translate="yes" xml:space="preserve">
          <source>Tie::Scalar vs Tie::StdScalar</source>
          <target state="translated">타이 :: 스칼라 vs 타이 :: StdScalar</target>
        </trans-unit>
        <trans-unit id="9c8072ce734013166993c6f0143dd7123d88fcc5" translate="yes" xml:space="preserve">
          <source>Tie::Scalar, Tie::StdScalar - base class definitions for tied scalars</source>
          <target state="translated">Tie :: Scalar, Tie :: StdScalar-연결된 스칼라에 대한 기본 클래스 정의</target>
        </trans-unit>
        <trans-unit id="24703e371c3e7f945d3b78d21edd36185f76ca6e" translate="yes" xml:space="preserve">
          <source>Tie::StdHandle</source>
          <target state="translated">Tie::StdHandle</target>
        </trans-unit>
        <trans-unit id="a6e6391cf784418a4b559abce054165c18d48250" translate="yes" xml:space="preserve">
          <source>Tie::StdHandle - base class definitions for tied handles</source>
          <target state="translated">Tie :: StdHandle-연결 핸들에 대한 기본 클래스 정의</target>
        </trans-unit>
        <trans-unit id="2f3439068e890141de6922d6924a5c42144d9aab" translate="yes" xml:space="preserve">
          <source>Tie::SubstrHash</source>
          <target state="translated">Tie::SubstrHash</target>
        </trans-unit>
        <trans-unit id="6980b3892c06ab7d2c795b8a0449ed68a3aed6bd" translate="yes" xml:space="preserve">
          <source>Tie::SubstrHash - Fixed-table-size, fixed-key-length hashing</source>
          <target state="translated">Tie :: SubstrHash-고정 테이블 크기, 고정 키 길이 해싱</target>
        </trans-unit>
        <trans-unit id="464ee826aae53453c130a0c1497f3c4ca331982d" translate="yes" xml:space="preserve">
          <source>Tied access to ndbm files</source>
          <target state="translated">ndbm 파일에 대한 연결 액세스</target>
        </trans-unit>
        <trans-unit id="8a33955c62ec97774e8693644b322775bd7663ae" translate="yes" xml:space="preserve">
          <source>Tied access to odbm files</source>
          <target state="translated">odbm 파일에 대한 액세스 권한</target>
        </trans-unit>
        <trans-unit id="1588828c9e5b2bd88f7d08cd7f3e57f7ec8ffbf5" translate="yes" xml:space="preserve">
          <source>Tied access to sdbm files</source>
          <target state="translated">sdbm 파일에 대한 액세스 권한</target>
        </trans-unit>
        <trans-unit id="1720e98baff7940aea5456c5ab89cbd8f4faa4be" translate="yes" xml:space="preserve">
          <source>Tied filehandles are still incomplete. sysopen(), truncate(), flock(), fcntl(), stat() and -X can't currently be trapped.</source>
          <target state="translated">묶인 파일 핸들이 여전히 불완전합니다. sysopen (), truncate (), flock (), fcntl (), stat () 및 -X는 현재 트랩 될 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="45a90cde1e783db9283275e5312c014bb1cb705f" translate="yes" xml:space="preserve">
          <source>Tied hash/array slices cause multiple FETCH/STORE pairs, there are no tie methods for slice operations.</source>
          <target state="translated">묶인 해시 / 배열 슬라이스는 여러 FETCH / STORE 쌍을 발생 시키며 슬라이스 연산을위한 타이 방법은 없습니다.</target>
        </trans-unit>
        <trans-unit id="44a21f1b3d2e469d8d4dbb6af794f7ad93c019a6" translate="yes" xml:space="preserve">
          <source>Tied hashes and arrays are magical beasts of the &lt;code&gt;PERL_MAGIC_tied&lt;/code&gt; magic type.</source>
          <target state="translated">묶인 해시와 배열은 &lt;code&gt;PERL_MAGIC_tied&lt;/code&gt; 마술 유형 의 마술 짐승입니다 .</target>
        </trans-unit>
        <trans-unit id="83884faf685c9098ec150488288e4d48b3ce8cb8" translate="yes" xml:space="preserve">
          <source>Tied hashes may have a different ordering behaviour to perl's hash implementation.</source>
          <target state="translated">묶인 해시는 펄의 해시 구현과 다른 순서 동작을 가질 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d3d1d3d65efd2c22754237fd41c0e585f040ec15" translate="yes" xml:space="preserve">
          <source>Tied hashes may have their own ordering and algorithmic complexity attacks.</source>
          <target state="translated">묶인 해시는 고유 한 순서와 알고리즘 복잡성 공격을 가질 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="24b5ed066516a43ed14f22509aac06d08e585ed9" translate="yes" xml:space="preserve">
          <source>Ties are handled by choosing the first handler.</source>
          <target state="translated">첫 번째 핸들러를 선택하여 타이를 처리합니다.</target>
        </trans-unit>
        <trans-unit id="64d5dd10fdcd493eede6caa7c5fa5f02730895e8" translate="yes" xml:space="preserve">
          <source>Tim Bunce and Charles Bailey. Currently maintained by David Landgren &amp;lt;</source>
          <target state="translated">팀 번스와 찰스 베일리 현재 David Landgren &amp;lt;</target>
        </trans-unit>
        <trans-unit id="3ddc0a76c09f699fa94ee0a72995b7039d633486" translate="yes" xml:space="preserve">
          <source>Tim Bunce, 11 August 1994.</source>
          <target state="translated">1994 년 8 월 11 일 Tim Bunce.</target>
        </trans-unit>
        <trans-unit id="8cf374401e16921c8b9927b27c7d0a5e707f664a" translate="yes" xml:space="preserve">
          <source>Tim Bunce, 2nd June 1995.</source>
          <target state="translated">팀 번스, 1995 년 6 월 2 일.</target>
        </trans-unit>
        <trans-unit id="3175b9a598f6f77b48765e43cfb7cd7d7b509655" translate="yes" xml:space="preserve">
          <source>Tim Jenness</source>
          <target state="translated">팀 젠 네스</target>
        </trans-unit>
        <trans-unit id="ba097d23c99b23a50efd8f2fea03c845fd6c6c33" translate="yes" xml:space="preserve">
          <source>Tim Jenness &amp;lt;t.jenness@jach.hawaii.edu&amp;gt; provided &lt;code&gt;pod_where&lt;/code&gt; and &lt;code&gt;contains_pod&lt;/code&gt; .</source>
          <target state="translated">Tim Jenness &amp;lt;t.jenness@jach.hawaii.edu&amp;gt;는 &lt;code&gt;pod_where&lt;/code&gt; 및 &lt;code&gt;contains_pod&lt;/code&gt; 를 제공 했습니다 .</target>
        </trans-unit>
        <trans-unit id="93e2988b00d7b32dc16eda9dda1443c70d8e538b" translate="yes" xml:space="preserve">
          <source>Tim.Bunce (at) ig.co.uk</source>
          <target state="translated">Tim.Bunce (at) ig.co.uk</target>
        </trans-unit>
        <trans-unit id="d077aa36842cc868f42990d7049841ea88af7d34" translate="yes" xml:space="preserve">
          <source>Tim.Bunce@ig.co.uk</source>
          <target state="translated">Tim.Bunce@ig.co.uk</target>
        </trans-unit>
        <trans-unit id="e4179a3f25309044bcb58d588fe8e8bd90fd67c9" translate="yes" xml:space="preserve">
          <source>Time COUNT iterations of CODE. CODE may be a string to eval or a code reference; either way the CODE will run in the caller's package. Results will be printed to STDOUT as TITLE followed by the times. TITLE defaults to &quot;timethis COUNT&quot; if none is provided. STYLE determines the format of the output, as described for timestr() below.</source>
          <target state="translated">CODE의 COUNT 번 반복 CODE는 평가할 문자열이거나 코드 참조 일 수 있습니다. 어느 쪽이든 코드가 호출자의 패키지에서 실행될 것입니다. 결과는 TITLE로 STDOUT에 인쇄 된 후 시간이 인쇄됩니다. 제공되지 않은 경우 TITLE의 기본값은 &quot;timethis COUNT&quot;입니다. STYLE은 아래 timestr ()에 설명 된대로 출력 형식을 결정합니다.</target>
        </trans-unit>
        <trans-unit id="3b32a6d9639a8d4119ec2ee525234d95d8857ca9" translate="yes" xml:space="preserve">
          <source>Time and Date</source>
          <target state="translated">시간과 날짜</target>
        </trans-unit>
        <trans-unit id="ba899f435a04612971ed3cd90f1a2814efd01889" translate="yes" xml:space="preserve">
          <source>Time and daytime network client interface</source>
          <target state="translated">시간 및 주간 네트워크 클라이언트 인터페이스</target>
        </trans-unit>
        <trans-unit id="ac91bba7fcbd91c8d367a4f56e1aba373023bebd" translate="yes" xml:space="preserve">
          <source>Time::HiRes</source>
          <target state="translated">Time::HiRes</target>
        </trans-unit>
        <trans-unit id="e7a9e6eb81fae6fdb1dc6f6133fdfcde6d6d2e8f" translate="yes" xml:space="preserve">
          <source>Time::HiRes - High resolution alarm, sleep, gettimeofday, interval timers</source>
          <target state="translated">시간 :: 고해상도-고해상도 알람, 절전, gettimeofday, 간격 타이머</target>
        </trans-unit>
        <trans-unit id="94df31ba192f82c8d905bfd5f68e42a860c364a4" translate="yes" xml:space="preserve">
          <source>Time::Local</source>
          <target state="translated">Time::Local</target>
        </trans-unit>
        <trans-unit id="068e2f4f422dc17d00b1dbbf4d66d078ee8c1c17" translate="yes" xml:space="preserve">
          <source>Time::Local - efficiently compute time from local and GMT time</source>
          <target state="translated">Time :: Local-로컬 및 GMT 시간에서 시간을 효율적으로 계산</target>
        </trans-unit>
        <trans-unit id="0a2a9a0e5d10ea8cd730c55ab8fbc21a6da6bc46" translate="yes" xml:space="preserve">
          <source>Time::Piece</source>
          <target state="translated">Time::Piece</target>
        </trans-unit>
        <trans-unit id="3b1c89f6e740fb1373ec42ee463919eaf109abbc" translate="yes" xml:space="preserve">
          <source>Time::Piece - Object Oriented time objects</source>
          <target state="translated">Time :: Piece-객체 지향 시간 객체</target>
        </trans-unit>
        <trans-unit id="ac2e609ce173a3276a7464b9debe21218246f96d" translate="yes" xml:space="preserve">
          <source>Time::Piece has a built-in strptime() function (from FreeBSD), allowing you incredibly flexible date parsing routines. For example:</source>
          <target state="translated">Time :: Piece에는 내장 strptime () 함수 (FreeBSD에서 제공)가있어 매우 유연한 날짜 구문 분석 루틴을 사용할 수 있습니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="d40344d994e23d7372c530bbf0bbd03eeb00a6dc" translate="yes" xml:space="preserve">
          <source>Time::Seconds</source>
          <target state="translated">Time::Seconds</target>
        </trans-unit>
        <trans-unit id="39f6129fd39e3df4fcacf60c5d99f5c6192c805d" translate="yes" xml:space="preserve">
          <source>Time::Seconds - a simple API to convert seconds to other date values</source>
          <target state="translated">Time :: Seconds-초를 다른 날짜 값으로 변환하는 간단한 API</target>
        </trans-unit>
        <trans-unit id="cbf1ec1195a651fc24927b61f20ae1c2b1743372" translate="yes" xml:space="preserve">
          <source>Time::Seconds also exports the following constants:</source>
          <target state="translated">Time :: Seconds는 다음 상수도 내 보냅니다.</target>
        </trans-unit>
        <trans-unit id="16d75647463ccb98ccc9ac22ce0d58439164ffe1" translate="yes" xml:space="preserve">
          <source>Time::gmtime</source>
          <target state="translated">Time::gmtime</target>
        </trans-unit>
        <trans-unit id="ca443191990262bcf077810f460d0cd5da0a2497" translate="yes" xml:space="preserve">
          <source>Time::gmtime - by-name interface to Perl's built-in gmtime() function</source>
          <target state="translated">Time :: gmtime-Perl의 내장 gmtime () 함수에 대한 이름 별 인터페이스</target>
        </trans-unit>
        <trans-unit id="1e32398fc4863ae4d240a706fe6661194fea16dc" translate="yes" xml:space="preserve">
          <source>Time::localtime</source>
          <target state="translated">Time::localtime</target>
        </trans-unit>
        <trans-unit id="1c04f7003a511410fc2dc340400d8f81416e8250" translate="yes" xml:space="preserve">
          <source>Time::localtime - by-name interface to Perl's built-in localtime() function</source>
          <target state="translated">Time :: localtime-Perl의 내장 localtime () 함수에 대한 이름 별 인터페이스</target>
        </trans-unit>
        <trans-unit id="de41baa484e46c7cf981eab70afe99b8805cc8b2" translate="yes" xml:space="preserve">
          <source>Time::tm</source>
          <target state="translated">Time::tm</target>
        </trans-unit>
        <trans-unit id="21f72c1b3c5d75c7e3444254a7622f9392f93a3d" translate="yes" xml:space="preserve">
          <source>Time::tm - internal object used by Time::gmtime and Time::localtime</source>
          <target state="translated">Time :: tm-Time :: gmtime 및 Time :: localtime에서 사용하는 내부 객체</target>
        </trans-unit>
        <trans-unit id="ca2b6328d392947cda8eed37cd6fd0fce114f5ab" translate="yes" xml:space="preserve">
          <source>Timeout for inactivity during {Makefile,Build}.PL?</source>
          <target state="translated">{Makefile, Build} .PL 동안 비활성 시간 초과?</target>
        </trans-unit>
        <trans-unit id="6202f67c7c444f6f4c73b3c31ad99a53b9159e1b" translate="yes" xml:space="preserve">
          <source>Timeout for parsing module versions?</source>
          <target state="translated">모듈 버전 구문 분석에 대한 시간 초과?</target>
        </trans-unit>
        <trans-unit id="eb3cc8be33f220718da61643e6e0bc1c501663fd" translate="yes" xml:space="preserve">
          <source>Tips and Techniques</source>
          <target state="translated">팁과 기법</target>
        </trans-unit>
        <trans-unit id="f7fb128ab2b2b606667607db6ec0f87259f7a1e5" translate="yes" xml:space="preserve">
          <source>Titlecase</source>
          <target state="translated">Titlecase</target>
        </trans-unit>
        <trans-unit id="75e9f1113dd228531b5734915ff74dd66ea601f0" translate="yes" xml:space="preserve">
          <source>To (re)open &lt;code&gt;STDOUT&lt;/code&gt; or &lt;code&gt;STDERR&lt;/code&gt; as an in-memory file, close it first:</source>
          <target state="translated">&lt;code&gt;STDOUT&lt;/code&gt; 또는 &lt;code&gt;STDERR&lt;/code&gt; 을 메모리 내 파일로 (다시) 열려면 먼저 닫으십시오.</target>
        </trans-unit>
        <trans-unit id="7a790472031c710be009a7b4a42a45592085ee5d" translate="yes" xml:space="preserve">
          <source>To OO or not to OO?</source>
          <target state="translated">OO로 또는 OO로?</target>
        </trans-unit>
        <trans-unit id="2e5fb83e42913577879316262366950ec7aec439" translate="yes" xml:space="preserve">
          <source>To access servers outside these type of firewalls with perl, you need Net::FTP.</source>
          <target state="translated">perl을 사용하여 이러한 유형의 방화벽 외부의 서버에 액세스하려면 Net :: FTP가 필요합니다.</target>
        </trans-unit>
        <trans-unit id="9715ff5bc3ceda6802c5265803ef21d4705c83eb" translate="yes" xml:space="preserve">
          <source>To access servers outside these types of firewalls with perl (even for ftp), you need LWP or HTTP::Tiny.</source>
          <target state="translated">ftp를 사용하여 이러한 유형의 방화벽 외부의 서버에 액세스하려면 LWP 또는 HTTP :: Tiny가 필요합니다.</target>
        </trans-unit>
        <trans-unit id="75353a5a7f7320bec3542821474a8dbab7c8c12c" translate="yes" xml:space="preserve">
          <source>To access the actual value that an SV points to, you can use the macros:</source>
          <target state="translated">SV가 가리키는 실제 값에 액세스하기 위해 매크로를 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="18ca46dd427588f094e1ba9ca5a38e797fcd2ac7" translate="yes" xml:space="preserve">
          <source>To access this functionality without the core overrides, pass the &lt;code&gt;&lt;a href=&quot;../functions/use&quot;&gt;use&lt;/a&gt;&lt;/code&gt; an empty import list, and then access function functions with their full qualified names. On the other hand, the built-ins are still available via the &lt;code&gt;CORE::&lt;/code&gt; pseudo-package.</source>
          <target state="translated">코어 재정의없이이 기능에 액세스하려면 빈 가져 오기 목록 &lt;code&gt;&lt;a href=&quot;../functions/use&quot;&gt;use&lt;/a&gt;&lt;/code&gt; 전달한 다음 정규화 된 이름으로 함수 기능에 액세스하십시오. 반면, 내장 기능은 여전히 &lt;code&gt;CORE::&lt;/code&gt; 유사 패키지 를 통해 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="dca3331d12806630976595e1bbb7790e715a99c2" translate="yes" xml:space="preserve">
          <source>To access this functionality without the core overrides, pass the &lt;code&gt;&lt;a href=&quot;../functions/use&quot;&gt;use&lt;/a&gt;&lt;/code&gt; an empty import list, and then access function functions with their full qualified names. The built-ins are always still available via the &lt;code&gt;CORE::&lt;/code&gt; pseudo-package.</source>
          <target state="translated">코어 재정의없이이 기능에 액세스하려면 빈 가져 오기 목록 &lt;code&gt;&lt;a href=&quot;../functions/use&quot;&gt;use&lt;/a&gt;&lt;/code&gt; 전달한 다음 정규화 된 이름으로 함수 기능에 액세스하십시오. 내장 기능은 항상 &lt;code&gt;CORE::&lt;/code&gt; pseudo-package 를 통해 계속 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="ce78b43e2a908e0a4f8a1b6833f38009e23883a3" translate="yes" xml:space="preserve">
          <source>To accomplish this behaviour, simply specify an array reference as the destination for the option:</source>
          <target state="translated">이 동작을 수행하려면 배열 참조를 옵션의 대상으로 지정하십시오.</target>
        </trans-unit>
        <trans-unit id="f61067f007c7ba160effec3a91d355b4f290080e" translate="yes" xml:space="preserve">
          <source>To actually alter the visible command line, you can assign to the variable $0 as documented in &lt;a href=&quot;perlvar&quot;&gt;perlvar&lt;/a&gt;. This won't work on all operating systems, though. Daemon programs like sendmail place their state there, as in:</source>
          <target state="translated">보이는 명령 행을 실제로 변경하려면 &lt;a href=&quot;perlvar&quot;&gt;perlvar에&lt;/a&gt; 설명 된대로 $ 0 변수를 지정할 수 있습니다 . 그러나 모든 운영 체제에서 작동하지는 않습니다. sendmail과 같은 데몬 프로그램은 다음과 같이 상태를 유지합니다.</target>
        </trans-unit>
        <trans-unit id="e6257d01bcff432617bc3aaafa5362a537c023ed" translate="yes" xml:space="preserve">
          <source>To actually do the magic method call, we have to call a subroutine in Perl space: &lt;code&gt;call_method&lt;/code&gt; takes care of that, and it's described in &lt;a href=&quot;perlcall&quot;&gt;perlcall&lt;/a&gt;. We call the &lt;code&gt;PUSH&lt;/code&gt; method in scalar context, and we're going to discard its return value. The call_method() function removes the top element of the mark stack, so there is nothing for the caller to clean up.</source>
          <target state="translated">실제로 매직 메소드 호출을 수행하려면 Perl 공간에서 서브 루틴을 호출해야합니다. &lt;code&gt;call_method&lt;/code&gt; 가이 를 처리하고 &lt;a href=&quot;perlcall&quot;&gt;perlcall에&lt;/a&gt; 설명되어 있습니다 . 우리 는 스칼라 문맥에서 &lt;code&gt;PUSH&lt;/code&gt; 메소드를 호출하고 그 반환 값을 버릴 것입니다. call_method () 함수는 마크 스택의 맨 위 요소를 제거하므로 호출자가 정리할 항목이 없습니다.</target>
        </trans-unit>
        <trans-unit id="2c5d4ebd8ab0875fd7f6df0d61ffd7b676158145" translate="yes" xml:space="preserve">
          <source>To add a new alias to a given encoding, use:</source>
          <target state="translated">주어진 인코딩에 새 별칭을 추가하려면 다음을 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="504c5fdbd3b3208314b10451eb998ac1dfbb6a34" translate="yes" xml:space="preserve">
          <source>To add lines before a certain line, you can add a line (or lines!) before Perl prints &lt;code&gt;$_&lt;/code&gt; :</source>
          <target state="translated">특정 줄 앞에 줄을 추가하려면 Perl이 &lt;code&gt;$_&lt;/code&gt; 인쇄하기 전에 줄을 추가하십시오 .</target>
        </trans-unit>
        <trans-unit id="41c5424e693984510192a96a5bd33b04a6c7bcb7" translate="yes" xml:space="preserve">
          <source>To add one to something automatically, hence the name of the &lt;code&gt;++&lt;/code&gt; operator. To instead subtract one from something automatically is known as an &amp;ldquo;autodecrement&amp;rdquo;.</source>
          <target state="translated">자동으로 무언가를 추가하려면 &lt;code&gt;++&lt;/code&gt; 연산자 의 이름입니다 . 대신 자동으로 무언가에서 하나를 빼는 것을 &quot;자동 감소&quot;라고합니다.</target>
        </trans-unit>
        <trans-unit id="62767b0d851017800baeabeacc96e05ce69f9c80" translate="yes" xml:space="preserve">
          <source>To add to user-friendliness, our server prompts the user for commands. Most servers don't do this. Because of the prompt without a newline, you'll have to use the &lt;code&gt;&lt;a href=&quot;functions/sysread&quot;&gt;sysread&lt;/a&gt;&lt;/code&gt; variant of the interactive client above.</source>
          <target state="translated">사용자 편의성을 높이기 위해 서버는 사용자에게 명령을 요구합니다. 대부분의 서버는이 작업을 수행하지 않습니다. 줄 바꿈이없는 프롬프트 때문에 위의 대화식 클라이언트 의 &lt;code&gt;&lt;a href=&quot;functions/sysread&quot;&gt;sysread&lt;/a&gt;&lt;/code&gt; 변형 을 사용해야합니다 .</target>
        </trans-unit>
        <trans-unit id="0c2508ff4f655eadc6c615c0836ceada22445901" translate="yes" xml:space="preserve">
          <source>To address these deficiencies, the concept of locales was invented (formally the ISO C, XPG4, POSIX 1.c &quot;locale system&quot;). And applications were and are being written that use the locale mechanism. The process of making such an application take account of its users' preferences in these kinds of matters is called &lt;b&gt;internationalization&lt;/b&gt; (often abbreviated as &lt;b&gt;i18n&lt;/b&gt;); telling such an application about a particular set of preferences is known as &lt;b&gt;localization&lt;/b&gt; (&lt;b&gt;l10n&lt;/b&gt;).</source>
          <target state="translated">이러한 결함을 해결하기 위해 로케일 개념이 개발되었습니다 (공식적으로 ISO C, XPG4, POSIX 1.c &quot;로케일 시스템&quot;). 그리고 로케일 메커니즘을 사용하는 응용 프로그램이 작성되고 작성되었습니다. 이러한 응용 프로그램이 이러한 종류의 문제에서 사용자의 선호도를 고려하도록하는 프로세스를 &lt;b&gt;국제화&lt;/b&gt; (종종 &lt;b&gt;i18n&lt;/b&gt; 이라고 함)라고합니다 . 이러한 애플리케이션에 특정 선호도 세트를 알리는 것을 &lt;b&gt;현지화&lt;/b&gt; ( &lt;b&gt;l10n&lt;/b&gt; )라고한다.</target>
        </trans-unit>
        <trans-unit id="38480288701c4661e4a26dcbd6037e4ac31c3101" translate="yes" xml:space="preserve">
          <source>To aid debugging, the source file</source>
          <target state="translated">소스 파일 디버깅을 돕기 위해</target>
        </trans-unit>
        <trans-unit id="b056ef758d989b19b1755b858981a3d1c4ee3ad4" translate="yes" xml:space="preserve">
          <source>To alleviate the second problem (partially) it is advised to write your scripts like this:</source>
          <target state="translated">두 번째 문제를 부분적으로 완화하려면 다음과 같이 스크립트를 작성하는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="033bf41b49c5ad8519d831cfcfc92f95acf893c1" translate="yes" xml:space="preserve">
          <source>To allow programs to process arguments that look like switches, but aren't, both functions will stop processing switches when they see the argument &lt;code&gt;--&lt;/code&gt; . The &lt;code&gt;--&lt;/code&gt; will be removed from @ARGV.</source>
          <target state="translated">프로그램이 스위치처럼 보이지만 그렇지 않은 인수를 처리 할 수 ​​있도록하기 위해 두 함수 모두 인수 &lt;code&gt;--&lt;/code&gt; 를 볼 때 스위치 처리를 중지 합니다. 은 &lt;code&gt;--&lt;/code&gt; @ARGV에서 제거됩니다.</target>
        </trans-unit>
        <trans-unit id="2288a81816c59a1de87c3ad78e6617983dda9fd7" translate="yes" xml:space="preserve">
          <source>To allow the XSUB for rpcb_gettime() to have a default host value the parameters to the XSUB could be rearranged. The XSUB will then call the real rpcb_gettime() function with the parameters in the correct order. This XSUB can be called from Perl with either of the following statements:</source>
          <target state="translated">rpcb_gettime ()에 대한 XSUB가 기본 호스트 값을 갖도록하기 위해 XSUB에 대한 매개 변수를 재 배열 할 수 있습니다. 그러면 XSUB는 정확한 순서로 매개 변수와 함께 실제 rpcb_gettime () 함수를 호출합니다. 이 XSUB는 다음 명령문 중 하나를 사용하여 Perl에서 호출 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="4bdd80dbd948c58cb0887db4e2666aa7ba8a1b77" translate="yes" xml:space="preserve">
          <source>To ask for the next layer down use PerlIONext(PerlIO *f).</source>
          <target state="translated">다음 계층을 다운하려면 PerlIONext (PerlIO * f)를 사용하십시오.</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
