<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="webpack">
    <body>
      <group id="webpack">
        <trans-unit id="a0cb60196f3d5ef223c010b6bc1d8a5b79eee62a" translate="yes" xml:space="preserve">
          <source>Synchronously retrieve the exports from another module. The compiler will ensure that the dependency is available in the output bundle.</source>
          <target state="translated">다른 모듈에서 내보내기를 동 기적으로 검색합니다. 컴파일러는 출력 번들에서 종속성을 사용할 수 있는지 확인합니다.</target>
        </trans-unit>
        <trans-unit id="2db728216720705fa5f530d0d1a1de00c43e5eb0" translate="yes" xml:space="preserve">
          <source>TODO:</source>
          <target state="translated">TODO:</target>
        </trans-unit>
        <trans-unit id="4d795e4cf5fa1aaecdf870a34e0202ec5f468b04" translate="yes" xml:space="preserve">
          <source>Take caution when installing these bleeding edge releases! They may still contain bugs and therefore should not be used in production.</source>
          <target state="translated">이 블리딩 에지 ​​릴리스를 설치할 때주의하십시오! 버그가 여전히 포함되어있을 수 있으므로 프로덕션 환경에서 사용해서는 안됩니다.</target>
        </trans-unit>
        <trans-unit id="f8315068ea71991e2dfa9c8df96ee0db2c0f4771" translate="yes" xml:space="preserve">
          <source>Tapable</source>
          <target state="translated">Tapable</target>
        </trans-unit>
        <trans-unit id="61ad50a9b9189cc3cf1874568e35e7901ff4c982" translate="yes" xml:space="preserve">
          <source>Target</source>
          <target state="translated">Target</target>
        </trans-unit>
        <trans-unit id="2478527eeae38abf9fca0c3ca3badc4eff20092a" translate="yes" xml:space="preserve">
          <source>Target of compilation. Passed from configuration options.</source>
          <target state="translated">편집 대상. 구성 옵션에서 전달되었습니다.</target>
        </trans-unit>
        <trans-unit id="2d8a95e4db20a5baed4f682053222211756aa583" translate="yes" xml:space="preserve">
          <source>Targeted modules of this loader must export either a &lt;code&gt;Function&lt;/code&gt; or &lt;code&gt;Promise&lt;/code&gt; that returns an object containing a &lt;code&gt;code&lt;/code&gt; property at a minimum, but can contain any number of additional properties.</source>
          <target state="translated">이 로더의 대상 모듈은 최소한 &lt;code&gt;code&lt;/code&gt; 특성을 포함하는 오브젝트를 리턴하는 &lt;code&gt;Function&lt;/code&gt; 또는 &lt;code&gt;Promise&lt;/code&gt; 을 내 보내야 하지만 추가 특성을 여러 개 포함 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d35260a00f655f27edcc35a7eb16da44a4f671a6" translate="yes" xml:space="preserve">
          <source>Targets</source>
          <target state="translated">Targets</target>
        </trans-unit>
        <trans-unit id="45471e9213df8d8312d92d340acd4ec7518b19db" translate="yes" xml:space="preserve">
          <source>Technically, &lt;code&gt;NODE_ENV&lt;/code&gt; is a system environment variable that Node.js exposes into running scripts. It is used by convention to determine dev-vs-prod behavior by server tools, build scripts, and client-side libraries. Contrary to expectations, &lt;code&gt;process.env.NODE_ENV&lt;/code&gt; is not set to &lt;code&gt;&quot;production&quot;&lt;/code&gt;&lt;strong&gt;within&lt;/strong&gt; the build script &lt;code&gt;webpack.config.js&lt;/code&gt;, see &lt;a href=&quot;https://github.com/webpack/webpack/issues/2537&quot;&gt;#2537&lt;/a&gt;. Thus, conditionals like &lt;code&gt;process.env.NODE_ENV === 'production' ? '[name].[hash].bundle.js' : '[name].bundle.js'&lt;/code&gt; within webpack configurations do not work as expected.</source>
          <target state="translated">기술적으로 &lt;code&gt;NODE_ENV&lt;/code&gt; 는 Node.js가 실행중인 스크립트에 노출하는 시스템 환경 변수입니다. 서버 도구, 빌드 스크립트 및 클라이언트 측 라이브러리에 의한 dev-vs-prod 동작을 결정하기 위해 규칙에 의해 사용됩니다. 예상과 달리 &lt;code&gt;process.env.NODE_ENV&lt;/code&gt; 는 빌드 스크립트 &lt;code&gt;webpack.config.js&lt;/code&gt; &lt;strong&gt;내&lt;/strong&gt; 에서 &lt;code&gt;&quot;production&quot;&lt;/code&gt; 으로 설정되어 있지 않습니다 ( &lt;a href=&quot;https://github.com/webpack/webpack/issues/2537&quot;&gt;# 2537&lt;/a&gt; 참조) . 따라서 &lt;code&gt;process.env.NODE_ENV === 'production' ? '[name].[hash].bundle.js' : '[name].bundle.js'&lt;/code&gt; 과 같은 조건은 ? 웹팩 구성 내의 '[name]. [hash] .bundle.js': '[name] .bundle.js' 가 예상대로 작동하지 않습니다.&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e370f5ffe24ac7d3c786805283b6450e6061395b" translate="yes" xml:space="preserve">
          <source>Tell the server to watch the files served by the &lt;code&gt;devServer.contentBase&lt;/code&gt; option. File changes will trigger a full page reload.</source>
          <target state="translated">&lt;code&gt;devServer.contentBase&lt;/code&gt; 옵션이 제공하는 파일을 보도록 서버에 지시하십시오 . 파일 변경으로 전체 페이지 다시로드가 트리거됩니다.</target>
        </trans-unit>
        <trans-unit id="8eaf46561f2c82818e5487f1fad2c2c1a9b03109" translate="yes" xml:space="preserve">
          <source>Tell the server where to serve content from. This is only necessary if you want to serve static files. &lt;a href=&quot;#devserver-publicpath-&quot;&gt;&lt;code&gt;devServer.publicPath&lt;/code&gt;&lt;/a&gt; will be used to determine where the bundles should be served from, and takes precedence.</source>
          <target state="translated">서버에게 컨텐츠를 제공 할 위치를 알려줍니다. 정적 파일을 제공하려는 경우에만 필요합니다. &lt;a href=&quot;#devserver-publicpath-&quot;&gt; &lt;code&gt;devServer.publicPath&lt;/code&gt; &lt;/a&gt; 는 번들이 제공 될 위치를 결정하고 우선 순위를 결정하는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="6eed8e8f3698f73914c4b5b2e893f7b06987d73d" translate="yes" xml:space="preserve">
          <source>Tell webpack to minimize the bundle using the &lt;a href=&quot;../plugins/uglifyjs-webpack-plugin&quot;&gt;UglifyjsWebpackPlugin&lt;/a&gt;.</source>
          <target state="translated">UglifyjsWebpackPlugin을 사용하여 번들을 최소화하도록 &lt;a href=&quot;../plugins/uglifyjs-webpack-plugin&quot;&gt;webpack에 지시하십시오&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="e4addd77c60356ceaa8d70fc96c0d83183363874" translate="yes" xml:space="preserve">
          <source>Tell webpack to remove a module from the module instance cache (&lt;code&gt;require.cache&lt;/code&gt;) if it throws an exception when it is &lt;code&gt;require&lt;/code&gt;d.</source>
          <target state="translated">&lt;code&gt;require&lt;/code&gt; 때 예외가 발생하면 모듈 인스턴스 캐시 ( &lt;code&gt;require.cache&lt;/code&gt; ) 에서 모듈을 제거하도록 webpack에 지시하십시오 . d.</target>
        </trans-unit>
        <trans-unit id="ad1cc548590d63ecaaf377363e425ba51831d6f1" translate="yes" xml:space="preserve">
          <source>Tell webpack what directories should be searched when resolving modules.</source>
          <target state="translated">모듈을 해결할 때 어떤 디렉토리를 검색해야하는지 webpack에 알려주십시오.</target>
        </trans-unit>
        <trans-unit id="002f265592e0a31a76086e3fa4ac479ad83d1202" translate="yes" xml:space="preserve">
          <source>Tells the &lt;a href=&quot;https://github.com/webpack/loader-runner&quot;&gt;loader-runner&lt;/a&gt; that the loader intends to call back asynchronously. Returns &lt;code&gt;this.callback&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/webpack/loader-runner&quot;&gt;로더가&lt;/a&gt; 비동기 적으로 콜백 할 것을 로더 러너 에게 알려줍니다 . &lt;code&gt;this.callback&lt;/code&gt; 을 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="678849cdcfae499dc3bf39b28e35e9ed9493aec2" translate="yes" xml:space="preserve">
          <source>Tells webpack to detect and remove chunks which are empty. Setting &lt;code&gt;optimization.removeEmptyChunks&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt; will disable this optimization.</source>
          <target state="translated">비어있는 청크를 감지하고 제거하도록 웹팩에 지시합니다. 설정 &lt;code&gt;optimization.removeEmptyChunks&lt;/code&gt; 을 에 &lt;code&gt;false&lt;/code&gt; 이 최적화를 비활성화합니다.</target>
        </trans-unit>
        <trans-unit id="5ff451f631199311fa712e6d24be429e485ab51b" translate="yes" xml:space="preserve">
          <source>Tells webpack to detect and remove modules from chunks when these modules are already included in all parents. Setting &lt;code&gt;optimization.removeAvailableModules&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt; will disable this optimization.</source>
          <target state="translated">이러한 모듈이 이미 모든 부모에 포함 된 경우 청크에서 모듈을 감지하고 제거하도록 웹팩에 지시합니다. 설정 &lt;code&gt;optimization.removeAvailableModules&lt;/code&gt; 을 에 &lt;code&gt;false&lt;/code&gt; 이 최적화를 비활성화합니다.</target>
        </trans-unit>
        <trans-unit id="4d555ade81cd8447fdc4e7d090f9249ae596d436" translate="yes" xml:space="preserve">
          <source>Tells webpack to determine and flag chunks which are subsets of other chunks in a way that subsets don&amp;rsquo;t have to be loaded when the bigger chunk has been already loaded. By default &lt;code&gt;optimization.flagIncludedChunks&lt;/code&gt; is enabled in &lt;code&gt;production&lt;/code&gt;&lt;a href=&quot;../concepts/mode&quot;&gt;mode&lt;/a&gt; and disabled elsewise.</source>
          <target state="translated">더 큰 청크가 이미로드 된 경우 서브 세트를로드 할 필요가없는 방식으로 다른 청크의 서브 세트 인 청크를 결정하고 플래그를 지정하도록 웹팩에 지시합니다. 기본적으로 &lt;code&gt;optimization.flagIncludedChunks&lt;/code&gt; 는 &lt;code&gt;production&lt;/code&gt; &lt;a href=&quot;../concepts/mode&quot;&gt;모드&lt;/a&gt; 에서 활성화되고 그렇지 않으면 비활성화됩니다.</target>
        </trans-unit>
        <trans-unit id="49b0cf198c848627a5a85418a4e575b1c5ef1e2c" translate="yes" xml:space="preserve">
          <source>Tells webpack to determine used exports for each module. This depends on &lt;a href=&quot;#optimization-occurrenceorder&quot;&gt;&lt;code&gt;optimization.providedExports&lt;/code&gt;&lt;/a&gt;. Information collected by &lt;code&gt;optimization.usedExports&lt;/code&gt; is used by other optimizations or code generation i.e. exports are not generated for unused exports, export names are mangled to single char identifiers when all usages are compatible. Dead code elimination in minimizers will benefit from this and can remove unused exports. By default &lt;code&gt;optimization.usedExports&lt;/code&gt; is enabled in &lt;code&gt;production&lt;/code&gt;&lt;a href=&quot;../concepts/mode&quot;&gt;mode&lt;/a&gt; and disabled elsewise.</source>
          <target state="translated">각 모듈에 사용 된 내보내기를 결정하도록 웹팩에 지시합니다. 이것은 &lt;a href=&quot;#optimization-occurrenceorder&quot;&gt; &lt;code&gt;optimization.providedExports&lt;/code&gt; 에&lt;/a&gt; 의존 합니다 . &lt;code&gt;optimization.usedExports&lt;/code&gt; 에 의해 수집 된 정보 는 다른 최적화 또는 코드 생성에 의해 사용됩니다. 즉, 사용되지 않은 내보내기에 대해 내보내기가 생성되지 않으며, 모든 사용이 호환되는 경우 내보내기 이름이 단일 문자 식별자로 엉망이됩니다. 최소화 기의 데드 코드 제거는 이로 인해 혜택을 받고 사용하지 않는 내보내기를 제거 할 수 있습니다. 기본적으로 &lt;code&gt;optimization.usedExports&lt;/code&gt; .usedExports 는 &lt;code&gt;production&lt;/code&gt; &lt;a href=&quot;../concepts/mode&quot;&gt;모드&lt;/a&gt; 에서 활성화되고 그렇지 않으면 비활성화됩니다.</target>
        </trans-unit>
        <trans-unit id="53346d778cc236a954ab23a350d012de81c68945" translate="yes" xml:space="preserve">
          <source>Tells webpack to figure out an order of modules which will result in the smallest initial bundle. By default &lt;code&gt;optimization.occurrenceOrder&lt;/code&gt; is enabled in &lt;code&gt;production&lt;/code&gt;&lt;a href=&quot;../concepts/mode&quot;&gt;mode&lt;/a&gt; and disabled elsewise.</source>
          <target state="translated">가장 작은 초기 번들을 생성하는 모듈 순서를 파악하도록 웹팩에 지시합니다. 기본적으로 &lt;code&gt;optimization.occurrenceOrder&lt;/code&gt; 는 &lt;code&gt;production&lt;/code&gt; &lt;a href=&quot;../concepts/mode&quot;&gt;모드&lt;/a&gt; 에서 사용 가능하고 그렇지 않으면 사용 불가능합니다.</target>
        </trans-unit>
        <trans-unit id="767b81cab8dc96a3bac18a6ba2b717cfba1c8930" translate="yes" xml:space="preserve">
          <source>Tells webpack to figure out which exports are provided by modules to generate more efficient code for &lt;code&gt;export * from ...&lt;/code&gt;. By default &lt;code&gt;optimization.providedExports&lt;/code&gt; is enabled.</source>
          <target state="translated">webpack에게 모듈에서 어떤 내보내기가 제공되는지 알아내어보다 효율적인 &lt;code&gt;export * from ...&lt;/code&gt; 코드를 생성하도록 지시 합니다. 기본적으로 &lt;code&gt;optimization.providedExports&lt;/code&gt; 가 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="3471cdb0c7bb551a61a5f66be480922f5f06b708" translate="yes" xml:space="preserve">
          <source>Tells webpack to find segments of the module graph which can be safely concatenated into a single module. Depends on &lt;a href=&quot;#optimization-providedexports&quot;&gt;&lt;code&gt;optimization.providedExports&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#optimization-usedexports&quot;&gt;&lt;code&gt;optimization.usedExports&lt;/code&gt;&lt;/a&gt;. By default &lt;code&gt;optimization.concatenateModules&lt;/code&gt; is enabled in &lt;code&gt;production&lt;/code&gt;&lt;a href=&quot;../concepts/mode&quot;&gt;mode&lt;/a&gt; and disabled elsewise.</source>
          <target state="translated">단일 모듈로 안전하게 연결할 수있는 모듈 그래프의 세그먼트를 찾도록 webpack에 지시합니다. 에 따라 다름 &lt;a href=&quot;#optimization-providedexports&quot;&gt; &lt;code&gt;optimization.providedExports&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;#optimization-usedexports&quot;&gt; &lt;code&gt;optimization.usedExports&lt;/code&gt; &lt;/a&gt; . 기본적으로 &lt;code&gt;optimization.concatenateModules&lt;/code&gt; 는 &lt;code&gt;production&lt;/code&gt; &lt;a href=&quot;../concepts/mode&quot;&gt;모드&lt;/a&gt; 에서 활성화되고 그렇지 않으면 비활성화됩니다.</target>
        </trans-unit>
        <trans-unit id="35aec2c0f0349e1f86c07ebb33883970eccbfd46" translate="yes" xml:space="preserve">
          <source>Tells webpack to include comments in bundles with information about the contained modules. This option defaults to &lt;code&gt;true&lt;/code&gt; in &lt;code&gt;development&lt;/code&gt; and &lt;code&gt;false&lt;/code&gt; in &lt;code&gt;production&lt;/code&gt;&lt;a href=&quot;../concepts/mode&quot;&gt;mode&lt;/a&gt; respectively.</source>
          <target state="translated">포함 된 모듈에 대한 정보가있는 번들에 주석을 포함하도록 웹팩에 지시합니다. 이 옵션은 기본적으로 &lt;code&gt;true&lt;/code&gt; 에 &lt;code&gt;development&lt;/code&gt; 과 &lt;code&gt;false&lt;/code&gt; 의 &lt;code&gt;production&lt;/code&gt; &lt;a href=&quot;../concepts/mode&quot;&gt;모드&lt;/a&gt; 각각.</target>
        </trans-unit>
        <trans-unit id="e51482cc3f1d2bedf8bced5bba0c82b5d42c230b" translate="yes" xml:space="preserve">
          <source>Tells webpack to merge chunks which contain the same modules. Setting &lt;code&gt;optimization.mergeDuplicateChunks&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt; will disable this optimization.</source>
          <target state="translated">동일한 모듈을 포함하는 청크를 병합하도록 웹팩에 지시합니다. 설정 &lt;code&gt;optimization.mergeDuplicateChunks&lt;/code&gt; 을 에 &lt;code&gt;false&lt;/code&gt; 이 최적화를 비활성화합니다.</target>
        </trans-unit>
        <trans-unit id="b58296314b274ed9f5e0ac6d182c74666bcd178f" translate="yes" xml:space="preserve">
          <source>Tells webpack to recognise the &lt;a href=&quot;https://github.com/webpack/webpack/blob/master/examples/side-effects/README.md&quot;&gt;&lt;code&gt;sideEffects&lt;/code&gt;&lt;/a&gt; flag in &lt;code&gt;package.json&lt;/code&gt; or rules to skip over modules which are flagged to contain no side effects when exports are not used.</source>
          <target state="translated">webpack이 &lt;code&gt;package.json&lt;/code&gt; 의 &lt;a href=&quot;https://github.com/webpack/webpack/blob/master/examples/side-effects/README.md&quot;&gt; &lt;code&gt;sideEffects&lt;/code&gt; &lt;/a&gt; 플래그 를 인식하도록 지시 하거나 내보내기를 사용하지 않을 때 부작용이없는 것으로 플래그가 지정된 모듈을 건너 뛰도록 규칙에 지시합니다.</target>
        </trans-unit>
        <trans-unit id="29f35228e53a433d0b2ca4e42a82a658b3ba86ed" translate="yes" xml:space="preserve">
          <source>Tells webpack to set &lt;code&gt;process.env.NODE_ENV&lt;/code&gt; to a given string value. &lt;code&gt;optimization.nodeEnv&lt;/code&gt; uses &lt;a href=&quot;../plugins/define-plugin&quot;&gt;DefinePlugin&lt;/a&gt; unless set to &lt;code&gt;false&lt;/code&gt;. &lt;code&gt;optimization.nodeEnv&lt;/code&gt;&lt;strong&gt;defaults&lt;/strong&gt; to &lt;a href=&quot;../concepts/mode&quot;&gt;mode&lt;/a&gt; if set, else falls back to &lt;code&gt;&quot;production&quot;&lt;/code&gt;.</source>
          <target state="translated">webpack에 &lt;code&gt;process.env.NODE_ENV&lt;/code&gt; 를 지정된 문자열 값 으로 설정하도록 지시 합니다. &lt;code&gt;optimization.nodeEnv&lt;/code&gt; 는 &lt;code&gt;false&lt;/code&gt; 로 설정되지 않는 한 &lt;a href=&quot;../plugins/define-plugin&quot;&gt;DefinePlugin을&lt;/a&gt; 사용합니다 . &lt;code&gt;optimization.nodeEnv&lt;/code&gt; 는&lt;strong&gt;기본적&lt;/strong&gt; 으로 &lt;a href=&quot;../concepts/mode&quot;&gt;mode로&lt;/a&gt; 설정되고 그렇지 않으면 &lt;code&gt;&quot;production&quot;&lt;/code&gt; 으로 대체됩니다 .&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="5c2c5b8993daed03b59d36b12cfb045e9697ee0b" translate="yes" xml:space="preserve">
          <source>Tells webpack to use readable chunk identifiers for better debugging. This option is enabled by default for &lt;a href=&quot;../concepts/mode&quot;&gt;mode&lt;/a&gt;&lt;code&gt;development&lt;/code&gt; and disabled for &lt;a href=&quot;../concepts/mode&quot;&gt;mode&lt;/a&gt;&lt;code&gt;production&lt;/code&gt; if no option is provided in webpack config.</source>
          <target state="translated">더 나은 디버깅을 위해 읽을 수있는 청크 식별자를 사용하도록 웹팩에 지시합니다. 이 옵션은 기본적으로 &lt;a href=&quot;../concepts/mode&quot;&gt;모드 &lt;/a&gt; &lt;code&gt;development&lt;/code&gt; 에 사용 되며 webpack 구성에 옵션이 제공되지 않으면 &lt;a href=&quot;../concepts/mode&quot;&gt;모드 &lt;/a&gt; &lt;code&gt;production&lt;/code&gt; 사용되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="0f2f2c942de55c59c53a2f31de1a4dd6e58cd92e" translate="yes" xml:space="preserve">
          <source>Tells webpack to use readable module identifiers for better debugging. When &lt;code&gt;optimization.namedModules&lt;/code&gt; is not set in webpack config, webpack will enable it by default for &lt;a href=&quot;../concepts/mode&quot;&gt;mode&lt;/a&gt;&lt;code&gt;development&lt;/code&gt; and disable for &lt;a href=&quot;../concepts/mode&quot;&gt;mode&lt;/a&gt;&lt;code&gt;production&lt;/code&gt;.</source>
          <target state="translated">더 나은 디버깅을 위해 읽을 수있는 모듈 식별자를 사용하도록 웹팩에 지시합니다. 때 &lt;code&gt;optimization.namedModules&lt;/code&gt; 가 웹팩 설정, 웹팩에 설정되지 않은 경우 기본적으로 활성화됩니다 &lt;a href=&quot;../concepts/mode&quot;&gt;모드 &lt;/a&gt; &lt;code&gt;development&lt;/code&gt; 및 비활성화 &lt;a href=&quot;../concepts/mode&quot;&gt;모드 &lt;/a&gt; &lt;code&gt;production&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="3ec1ae061c27325c7ecb543adf91235e22cbc9ed" translate="yes" xml:space="preserve">
          <source>Template</source>
          <target state="translated">Template</target>
        </trans-unit>
        <trans-unit id="200be3445e2bde1ede81d4c95d33bd1076a8277f" translate="yes" xml:space="preserve">
          <source>Templating</source>
          <target state="translated">Templating</target>
        </trans-unit>
        <trans-unit id="f8dcbd31ecdaba6d4d938252d7d557647540e187" translate="yes" xml:space="preserve">
          <source>Terser minify options.</source>
          <target state="translated">Terser 축소 옵션.</target>
        </trans-unit>
        <trans-unit id="cca680f3e51dedd055b5b7479ead7486d3946d3b" translate="yes" xml:space="preserve">
          <source>TerserWebpackPlugin</source>
          <target state="translated">TerserWebpackPlugin</target>
        </trans-unit>
        <trans-unit id="cb1dc79df1cb9310379fcd3a272451d5d79e44e9" translate="yes" xml:space="preserve">
          <source>Test all loaded modules for updates and, if updates exist, &lt;code&gt;apply&lt;/code&gt; them.</source>
          <target state="translated">로드 된 모든 모듈의 업데이트를 테스트하고 업데이트가 있으면 &lt;code&gt;apply&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="18180da60ee4b39df19792be2645538d6c578338" translate="yes" xml:space="preserve">
          <source>Test to match files against</source>
          <target state="translated">파일과 일치하도록 테스트</target>
        </trans-unit>
        <trans-unit id="fae6e75610ee85d5156a1dc129b2d22f8fb6fe80" translate="yes" xml:space="preserve">
          <source>Test to match files against.</source>
          <target state="translated">파일이 일치하는지 테스트하십시오.</target>
        </trans-unit>
        <trans-unit id="39fdec1194d94212b871a28b2aa04a73cd40fce1" translate="yes" xml:space="preserve">
          <source>Tests</source>
          <target state="translated">Tests</target>
        </trans-unit>
        <trans-unit id="5f768c28a658c6bc08900e35d9efed4bd2ce04c9" translate="yes" xml:space="preserve">
          <source>Thanks to Javier (&lt;a href=&quot;https://github.com/vieron&quot;&gt;@vieron&lt;/a&gt;) for authoring this plugin.</source>
          <target state="translated">이 플러그인을 &lt;a href=&quot;https://github.com/vieron&quot;&gt;작성해 주신&lt;/a&gt; Javier ( @vieron )에게 감사합니다 .</target>
        </trans-unit>
        <trans-unit id="16f1b9980bfe0cab0829dfb2682d18033b865745" translate="yes" xml:space="preserve">
          <source>That's all you need. Since we're already using the &lt;code&gt;DefinePlugin&lt;/code&gt; on our configuration, &lt;code&gt;process.env.ASSET_PATH&lt;/code&gt; will always be defined so we can safely do that.</source>
          <target state="translated">그게 당신이 필요한 전부입니다. 구성 에서 &lt;code&gt;DefinePlugin&lt;/code&gt; 을 이미 사용하고 있으므로 &lt;code&gt;process.env.ASSET_PATH&lt;/code&gt; 가 항상 정의되어 있으므로 안전하게 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5aed75fadc485a43ba5d84a71779dcd723dd4182" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#rule-enforce&quot;&gt;&lt;code&gt;enforce&lt;/code&gt;&lt;/a&gt; property affects the loader category. Whether it's a normal, pre- or post- loader.</source>
          <target state="translated">&lt;a href=&quot;#rule-enforce&quot;&gt; &lt;code&gt;enforce&lt;/code&gt; &lt;/a&gt; 속성은 로더 범주에 영향을 미칩니다. 일반, 프리 로더 또는 포스트 로더인지 여부.</target>
        </trans-unit>
        <trans-unit id="e63386709206a80b9a4b95abfe8e4511c665fc19" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;#rule-parser&quot;&gt;&lt;code&gt;parser&lt;/code&gt;&lt;/a&gt; property affects the parser options.</source>
          <target state="translated">&lt;a href=&quot;#rule-parser&quot;&gt; &lt;code&gt;parser&lt;/code&gt; &lt;/a&gt; 속성은 파서 옵션에 영향을 미칩니다.</target>
        </trans-unit>
        <trans-unit id="984f0c2ce0cdc62b5cb0946806fd79297dc76335" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../configuration/target&quot;&gt;targeted&lt;/a&gt; execution environment</source>
          <target state="translated">&lt;a href=&quot;../configuration/target&quot;&gt;대상으로&lt;/a&gt; 실행 환경</target>
        </trans-unit>
        <trans-unit id="65096c8d5d07c0fb9a0318f78ab4250c620ce1b5" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../loaders/script-loader&quot;&gt;&lt;code&gt;script-loader&lt;/code&gt;&lt;/a&gt; evaluates code in the global context, similar to inclusion via a &lt;code&gt;script&lt;/code&gt; tag. In this mode, every normal library should work. &lt;code&gt;require&lt;/code&gt;, &lt;code&gt;module&lt;/code&gt;, etc. are undefined.</source>
          <target state="translated">&lt;a href=&quot;../loaders/script-loader&quot;&gt; &lt;code&gt;script-loader&lt;/code&gt; &lt;/a&gt; 비아를 포함 유사한 국제적인 맥락에서 코드를 평가 &lt;code&gt;script&lt;/code&gt; 태그입니다. 이 모드에서는 모든 일반 라이브러리가 작동해야합니다. &lt;code&gt;require&lt;/code&gt; , &lt;code&gt;module&lt;/code&gt; 등은 정의되어 있지 않습니다.</target>
        </trans-unit>
        <trans-unit id="73fd6aaf9d6e2fa659d002e4ff65bdd6d7bf958e" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../plugins/commons-chunk-plugin&quot;&gt;&lt;code&gt;CommonsChunkPlugin&lt;/code&gt;&lt;/a&gt; is also used to split vendor modules from core application code using &lt;a href=&quot;../plugins/commons-chunk-plugin#explicit-vendor-chunk&quot;&gt;explicit vendor chunks&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../plugins/commons-chunk-plugin&quot;&gt; &lt;code&gt;CommonsChunkPlugin&lt;/code&gt; 은&lt;/a&gt; 또한 사용 코어 애플리케이션 코드로부터 분할 공급 모듈에 사용되는 &lt;a href=&quot;../plugins/commons-chunk-plugin#explicit-vendor-chunk&quot;&gt;명시 벤더 덩어리&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="03d0dd7e91926471fe0f29a0fdc35aea2f423d79" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../plugins/provide-plugin&quot;&gt;&lt;code&gt;ProvidePlugin&lt;/code&gt;&lt;/a&gt; makes a package available as a variable in every module compiled through webpack. If webpack sees that variable used, it will include the given package in the final bundle. Let's go ahead by removing the &lt;code&gt;import&lt;/code&gt; statement for &lt;code&gt;lodash&lt;/code&gt; and instead providing it via the plugin:</source>
          <target state="translated">&lt;a href=&quot;../plugins/provide-plugin&quot;&gt; &lt;code&gt;ProvidePlugin&lt;/code&gt; 는&lt;/a&gt; 웹팩을 통해 컴파일 된 모든 모듈의 변수로 사용할 수있는 패키지를합니다. 웹팩에서 사용 된 변수를 발견하면 최종 패키지에 지정된 패키지가 포함됩니다. &lt;code&gt;lodash&lt;/code&gt; 에 대한 &lt;code&gt;import&lt;/code&gt; 문을 제거 하고 대신 플러그인을 통해 제공해 봅시다 :</target>
        </trans-unit>
        <trans-unit id="1e2a49bbe348f32531395726882d0edadf5b7798" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../plugins/split-chunks-plugin&quot;&gt;&lt;code&gt;SplitChunks&lt;/code&gt;&lt;/a&gt; allows us to extract common dependencies into an existing entry chunk or an entirely new chunk. Let's use this to de-duplicate the &lt;code&gt;lodash&lt;/code&gt; dependency from the previous example:</source>
          <target state="translated">&lt;a href=&quot;../plugins/split-chunks-plugin&quot;&gt; &lt;code&gt;SplitChunks&lt;/code&gt; 은&lt;/a&gt; 우리가 기존 항목 청크 또는 완전히 새로운 덩어리로 일반적인 종속성을 추출 할 수 있습니다. 이것을 사용 하여 이전 예제에서 &lt;code&gt;lodash&lt;/code&gt; 종속성을 중복 제거하십시오 .</target>
        </trans-unit>
        <trans-unit id="0dea7e34dbdd9c4b5a070e1afdd0a51fda969ff2" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;cli&quot;&gt;webpack CLI&lt;/a&gt; uses this information to display nicely formatted output in your console.</source>
          <target state="translated">&lt;a href=&quot;cli&quot;&gt;웹팩 CLI는&lt;/a&gt; 콘솔에 잘 형식화 된 출력을 표시하려면이 정보를 사용합니다.</target>
        </trans-unit>
        <trans-unit id="172e8069c798268e6ac5af79ba1c2895a1cbf705" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import&quot;&gt;&lt;code&gt;import&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export&quot;&gt;&lt;code&gt;export&lt;/code&gt;&lt;/a&gt; statements have been standardized in &lt;a href=&quot;https://babeljs.io/learn-es2015/&quot;&gt;ES2015&lt;/a&gt; and &lt;a href=&quot;https://caniuse.com/#search=modules&quot;&gt;are supported in most browsers&lt;/a&gt;. Some older browsers still lag behind but webpack supports modules out of the box.</source>
          <target state="translated">&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import&quot;&gt; &lt;code&gt;import&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export&quot;&gt; &lt;code&gt;export&lt;/code&gt; &lt;/a&gt; 문은 표준화 된 &lt;a href=&quot;https://babeljs.io/learn-es2015/&quot;&gt;ES2015&lt;/a&gt; 과 &lt;a href=&quot;https://caniuse.com/#search=modules&quot;&gt;대부분의 브라우저에서 지원됩니다&lt;/a&gt; . 일부 구형 브라우저는 여전히 뒤쳐져 있지만 웹팩은 기본적으로 모듈을 지원합니다.</target>
        </trans-unit>
        <trans-unit id="5b464e9919940e8342cebed4d751a8883d9f4d56" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://en.wikipedia.org/wiki/Cryptographic_hash_function&quot;&gt;digest&lt;/a&gt; that the hash function should use. Valid values include: base26, base32, base36, base49, base52, base58, base62, base64, and hex.</source>
          <target state="translated">는 &lt;a href=&quot;https://en.wikipedia.org/wiki/Cryptographic_hash_function&quot;&gt;다이제스트&lt;/a&gt; 해시 함수를 사용하도록. 유효한 값은 base26, base32, base36, base49, base52, base58, base62, base64 및 hex입니다.</target>
        </trans-unit>
        <trans-unit id="2a0d507b74b1361bbb471f7da349d2e25a854d48" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://github.com/jantimon/html-webpack-plugin&quot;&gt;&lt;code&gt;HtmlWebpackPlugin&lt;/code&gt;&lt;/a&gt; simplifies creation of HTML files to serve your webpack bundles. This is especially useful for webpack bundles that include a hash in the filename which changes every compilation. You can either let the plugin generate an HTML file for you, supply your own template using &lt;a href=&quot;https://lodash.com/docs#template&quot;&gt;lodash templates&lt;/a&gt;, or use your own &lt;a href=&quot;https://webpack.js.org/loaders&quot;&gt;loader&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/jantimon/html-webpack-plugin&quot;&gt; &lt;code&gt;HtmlWebpackPlugin&lt;/code&gt; &lt;/a&gt; HTML의 단순화 창조는 당신의 웹팩 번들을 제공하기 위해 파일. 이것은 모든 컴파일을 변경하는 파일 이름에 해시를 포함하는 웹팩 번들에 특히 유용합니다. 플러그인이 HTML 파일을 생성하도록 하거나 &lt;a href=&quot;https://lodash.com/docs#template&quot;&gt;lodash 템플릿을&lt;/a&gt; 사용하여 고유 한 템플릿 을 제공하거나 고유 한 &lt;a href=&quot;https://webpack.js.org/loaders&quot;&gt;로더를&lt;/a&gt; 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="88bb274fd4fe206846ce7f3e91467f530bc06a11" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://github.com/webpack-contrib/karma-webpack&quot;&gt;&lt;code&gt;karma-webpack&lt;/code&gt;&lt;/a&gt; package allows you to use webpack to pre-process files in &lt;a href=&quot;http://karma-runner.github.io/1.0/index.html&quot;&gt;Karma&lt;/a&gt;. It also makes use of &lt;a href=&quot;https://github.com/webpack/webpack-dev-middleware&quot;&gt;&lt;code&gt;webpack-dev-middleware&lt;/code&gt;&lt;/a&gt; and allows passing configurations for both. A simple example may look something like this:</source>
          <target state="translated">&lt;a href=&quot;https://github.com/webpack-contrib/karma-webpack&quot;&gt; &lt;code&gt;karma-webpack&lt;/code&gt; &lt;/a&gt; 패키지는 당신이 파일 프로세스 사전 웹팩을 사용할 수 있습니다 &lt;a href=&quot;http://karma-runner.github.io/1.0/index.html&quot;&gt;카르마&lt;/a&gt; . 또한 &lt;a href=&quot;https://github.com/webpack/webpack-dev-middleware&quot;&gt; &lt;code&gt;webpack-dev-middleware&lt;/code&gt; &lt;/a&gt; 를 사용하며 두 구성에 모두 구성을 전달할 수 있습니다. 간단한 예는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="1ca847605a463d73a62672d6de824616533f7c10" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://github.com/zinserjan/mocha-webpack&quot;&gt;&lt;code&gt;mocha-webpack&lt;/code&gt;&lt;/a&gt; utility can be used for a clean integration with Mocha. The repository offers more details on the pros and cons but essentially &lt;code&gt;mocha-webpack&lt;/code&gt; is a simple wrapper that provides almost the same CLI as Mocha itself and provides various webpack functionality like an improved watch mode and improved path resolution. Here is a small example of how you would install it and use it to run a test suite (found within &lt;code&gt;./test&lt;/code&gt;):</source>
          <target state="translated">&lt;a href=&quot;https://github.com/zinserjan/mocha-webpack&quot;&gt; &lt;code&gt;mocha-webpack&lt;/code&gt; &lt;/a&gt; 유틸리티는 모카와 깨끗한 통합을 위해 사용할 수 있습니다. 이 저장소는 장단점에 대한 자세한 내용을 제공하지만 본질적으로 &lt;code&gt;mocha-webpack&lt;/code&gt; 은 Mocha 자체와 거의 동일한 CLI를 제공하고 개선 된 감시 모드 및 개선 된 경로 확인과 같은 다양한 웹팩 기능을 제공하는 간단한 래퍼입니다. 다음은 설치 및 테스트 스위트 실행 방법 ( &lt;code&gt;./test&lt;/code&gt; 내에 있음 )에 대한 작은 예입니다 .</target>
        </trans-unit>
        <trans-unit id="0c507e93dd92050022154621cc61d736d4327733" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://nodejs.org/api/all.html#modules_require_resolve&quot;&gt;&lt;code&gt;require.resolve&lt;/code&gt;&lt;/a&gt; call is a Node.js function (unrelated to &lt;code&gt;require.resolve&lt;/code&gt; in webpack processing). &lt;code&gt;require.resolve&lt;/code&gt; gives you the absolute path to the module (&lt;code&gt;&quot;/.../app/node_modules/react/react.js&quot;&lt;/code&gt;). So the expose only applies to the react module. And it's only exposed when used in the bundle.</source>
          <target state="translated">&lt;a href=&quot;https://nodejs.org/api/all.html#modules_require_resolve&quot;&gt; &lt;code&gt;require.resolve&lt;/code&gt; 의&lt;/a&gt; 호출 (관계없는 Node.js를 함수이다 &lt;code&gt;require.resolve&lt;/code&gt; 웹팩 처리). &lt;code&gt;require.resolve&lt;/code&gt; 는 모듈의 절대 경로를 제공합니다 ( &lt;code&gt;&quot;/.../app/node_modules/react/react.js&quot;&lt;/code&gt; ). 따라서 노출은 반응 모듈에만 적용됩니다. 그리고 번들에서 사용될 때만 노출됩니다.</target>
        </trans-unit>
        <trans-unit id="f2bbd217d1f4c8709483289baec1094e4af77573" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://whatwg.github.io/loader/&quot;&gt;ES2015 Loader spec&lt;/a&gt; defines &lt;code&gt;import()&lt;/code&gt; as method to load ES2015 modules dynamically on runtime.</source>
          <target state="translated">&lt;a href=&quot;https://whatwg.github.io/loader/&quot;&gt;ES2015 로더 사양&lt;/a&gt; 정의는 &lt;code&gt;import()&lt;/code&gt; 런타임에 동적 ES2015 모듈을 로딩 방법으로서.</target>
        </trans-unit>
        <trans-unit id="1d4ceea676a0dc4f72c17f6c8e79b7333f549174" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;'commonjs ' + request&lt;/code&gt; defines the type of module that needs to be externalized.</source>
          <target state="translated">&lt;code&gt;'commonjs ' + request&lt;/code&gt; 요구 외부화 해당 모듈의 유형을 정의한다.</target>
        </trans-unit>
        <trans-unit id="8e28c37fb671c088eac2ae6cc1422587c9c06286" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;--env&lt;/code&gt; argument accepts various syntaxes:</source>
          <target state="translated">&lt;code&gt;--env&lt;/code&gt; 인수는 다양한 구문을 허용합니다</target>
        </trans-unit>
        <trans-unit id="468a640ae6f8d45f738ff5d3259257ff8609ccf5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;--json &amp;gt; compilation-stats.json&lt;/code&gt; flag indicates to webpack that it should emit the &lt;code&gt;compilation-stats.json&lt;/code&gt; containing the dependency graph and various other build information. Typically, the &lt;code&gt;--profile&lt;/code&gt; flag is also added so that a &lt;code&gt;profile&lt;/code&gt; section is added to each &lt;a href=&quot;#module-objects&quot;&gt;&lt;code&gt;modules&lt;/code&gt; object&lt;/a&gt; containing module-specific compilation stats.</source>
          <target state="translated">&lt;code&gt;--json &amp;gt; compilation-stats.json&lt;/code&gt; 플래그가 발광해야 할 웹팩 나타내는 &lt;code&gt;compilation-stats.json&lt;/code&gt; 종속성 그래프 등 다양한 빌드 정보를 포함한다. 일반적으로 &lt;code&gt;--profile&lt;/code&gt; 플래그도 추가되어 &lt;code&gt;profile&lt;/code&gt; 섹션이 모듈 별 컴파일 통계를 포함하는 각 &lt;a href=&quot;#module-objects&quot;&gt; &lt;code&gt;modules&lt;/code&gt; 객체에&lt;/a&gt; 추가됩니다 .</target>
        </trans-unit>
        <trans-unit id="6c70e73b803827a95816e2c064e16a024ac534a8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;--profile&lt;/code&gt; option captures timing information for each step of the compilation and includes this in the output.</source>
          <target state="translated">&lt;code&gt;--profile&lt;/code&gt; 컴파일 각 단계 옵션 캡처 타이밍 정보가 출력이 포함된다.</target>
        </trans-unit>
        <trans-unit id="0c35b3fcaf6ac18ef5f8234261238cae474e94ad" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;AutomaticPrefetchPlugin&lt;/code&gt; discovers &lt;strong&gt;all modules&lt;/strong&gt; from the previous compilation upfront while watching for changes, trying to improve the incremental build times. Compared to &lt;a href=&quot;prefetch-plugin&quot;&gt;&lt;code&gt;PrefetchPlugin&lt;/code&gt;&lt;/a&gt; which discovers a &lt;strong&gt;single module&lt;/strong&gt; upfront.</source>
          <target state="translated">&lt;code&gt;AutomaticPrefetchPlugin&lt;/code&gt; 는 발견 &lt;strong&gt;모든 모듈을&lt;/strong&gt; 증분 빌드 시간을 개선하기 위해 노력하고, 변화를 보면서 이전 컴파일 선행에서. &lt;strong&gt;단일 모듈을&lt;/strong&gt; 미리 발견하는 &lt;a href=&quot;prefetch-plugin&quot;&gt; &lt;code&gt;PrefetchPlugin&lt;/code&gt; &lt;/a&gt; 과 비교합니다 .&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="01c891b15ca8f85929028eb5d51f636779e61b69" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;CommonsChunkPlugin&lt;/code&gt; is an opt-in feature that creates a separate file (known as a chunk), consisting of common modules shared between multiple entry points.</source>
          <target state="translated">&lt;code&gt;CommonsChunkPlugin&lt;/code&gt; 가 옵트 인 기능 다중 엔트리 포인트간에 공유되는 공통 모듈로 이루어진, (청크라고 함)를 별도의 파일을 생성한다.</target>
        </trans-unit>
        <trans-unit id="c70b8ad61375954fcc9153bfd2c445225bd7e75e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Compilation&lt;/code&gt; class also extends &lt;code&gt;Tapable&lt;/code&gt; and provides the following lifecycle hooks. They can be tapped the same way as compiler hooks:</source>
          <target state="translated">&lt;code&gt;Compilation&lt;/code&gt; 클래스는 확장 &lt;code&gt;Tapable&lt;/code&gt; 을 다음과 같은 라이프 사이클 후크를 제공합니다. 컴파일러 후크와 같은 방식으로 탭핑 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="73fa0a0250e3aa593b96eb19e97b237fe917e574" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Compilation&lt;/code&gt; module is used by the &lt;code&gt;Compiler&lt;/code&gt; to create new compilations (or builds). A &lt;code&gt;compilation&lt;/code&gt; instance has access to all modules and their dependencies (most of which are circular references). It is the literal compilation of all the modules in the dependency graph of an application. During the compilation phase, modules are loaded, sealed, optimized, chunked, hashed and restored.</source>
          <target state="translated">&lt;code&gt;Compilation&lt;/code&gt; 모듈에 의해 사용되는 &lt;code&gt;Compiler&lt;/code&gt; 새로 컴파일을 만드는 데 (또는 빌드). &lt;code&gt;compilation&lt;/code&gt; 인스턴스는 모든 모듈 및 종속성 (그 중 대부분이 순환 참조입니다)에 액세스 할 수 있습니다. 응용 프로그램의 종속성 그래프에있는 모든 모듈의 리터럴 컴파일입니다. 컴파일 단계에서 모듈은로드, 봉인, 최적화, 청크, 해시 및 복원됩니다.</target>
        </trans-unit>
        <trans-unit id="9dd316958031d96ce135ceaf6610378edf9a60ba" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Compiler&lt;/code&gt; module is the main engine that creates a compilation instance with all the options passed through the &lt;a href=&quot;cli&quot;&gt;CLI&lt;/a&gt; or &lt;a href=&quot;node&quot;&gt;Node API&lt;/a&gt;. It extends the &lt;code&gt;Tapable&lt;/code&gt; class in order to register and call plugins. Most user facing plugins are first registered on the &lt;code&gt;Compiler&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Compiler&lt;/code&gt; 모듈은 통과 모든 옵션과 함께 컴파일 인스턴스를 생성하는 주요 엔진입니다 &lt;a href=&quot;cli&quot;&gt;CLI&lt;/a&gt; 또는 &lt;a href=&quot;node&quot;&gt;노드 API를&lt;/a&gt; . 플러그인을 등록하고 호출하기 위해 &lt;code&gt;Tapable&lt;/code&gt; 클래스를 확장합니다 . 대부분의 사용자 용 플러그인은 먼저 &lt;code&gt;Compiler&lt;/code&gt; 등록됩니다 .</target>
        </trans-unit>
        <trans-unit id="5c434c0055358215a66a00b62876f8493d91a621" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Compiler&lt;/code&gt; supports &lt;a href=&quot;node#watching&quot;&gt;watching&lt;/a&gt; which monitors the file system and recompiles as files change. When in watch mode, the compiler will emit the additional events such as &lt;code&gt;watchRun&lt;/code&gt;, &lt;code&gt;watchClose&lt;/code&gt;, and &lt;code&gt;invalid&lt;/code&gt;. This is typically used in &lt;a href=&quot;../guides/development&quot;&gt;development&lt;/a&gt;, usually under the hood of tools like &lt;code&gt;webpack-dev-server&lt;/code&gt;, so that the developer doesn't need to re-compile manually every time. Watch mode can also be entered via the &lt;a href=&quot;cli#watch-options&quot;&gt;CLI&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;Compiler&lt;/code&gt; 지원 &lt;a href=&quot;node#watching&quot;&gt;보고&lt;/a&gt; 파일 변경 등의 파일 시스템과 재 컴파일을 모니터링한다. watch 모드에있을 때 컴파일러는 &lt;code&gt;watchRun&lt;/code&gt; , &lt;code&gt;watchClose&lt;/code&gt; 및 &lt;code&gt;invalid&lt;/code&gt; 와 같은 추가 이벤트를 생성 합니다. 일반적으로 &lt;a href=&quot;../guides/development&quot;&gt;개발 단계&lt;/a&gt; 에서 일반적으로 &lt;code&gt;webpack-dev-server&lt;/code&gt; 와 같은 도구를 사용 하므로 개발자는 매번 수동으로 다시 컴파일 할 필요가 없습니다. &lt;a href=&quot;cli#watch-options&quot;&gt;CLI&lt;/a&gt; 를 통해 감시 모드로 들어갈 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="9de4640dc1cf3d5a03b561edc521bf2fe418e2a1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ContextReplacementPlugin&lt;/code&gt; allows you to override the inferred information. There are various ways to configure the plugin:</source>
          <target state="translated">&lt;code&gt;ContextReplacementPlugin&lt;/code&gt; 는 당신이 추정 정보를 대체 할 수 있습니다. 플러그인을 구성하는 방법에는 여러 가지가 있습니다.</target>
        </trans-unit>
        <trans-unit id="e2b3dbb477bb74d901776059eefe25b97e65b6b7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;DefinePlugin&lt;/code&gt; allows you to create global constants which can be configured at &lt;strong&gt;compile&lt;/strong&gt; time. This can be useful for allowing different behavior between development builds and release builds. If you perform logging in your development build but not in the release build you might use a global constant to determine whether logging takes place. That's where &lt;code&gt;DefinePlugin&lt;/code&gt; shines, set it and forget it rules for development and release builds.</source>
          <target state="translated">&lt;code&gt;DefinePlugin&lt;/code&gt; 는 당신이 구성 할 수 있습니다 전역 상수 만들 수 있습니다 &lt;strong&gt;컴파일&lt;/strong&gt; 시간을. 이는 개발 빌드와 릴리스 빌드간에 다른 동작을 허용하는 데 유용 할 수 있습니다. 개발 빌드에서는 로깅을 수행하지만 릴리스 빌드에서는 로깅을 수행하지 않는 경우 글로벌 상수를 사용하여 로깅 발생 여부를 판별 할 수 있습니다. 여기에서 &lt;code&gt;DefinePlugin&lt;/code&gt; 이 빛을 발하고 설정하고 개발 및 릴리스 빌드 규칙을 잊어 버립니다.</target>
        </trans-unit>
        <trans-unit id="367e8377d371646e4dc3d8685d9a61a01cf7f9d2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;DllPlugin&lt;/code&gt; and &lt;code&gt;DllReferencePlugin&lt;/code&gt; provide means to split bundles in a way that can drastically improve build time performance.</source>
          <target state="translated">&lt;code&gt;DllPlugin&lt;/code&gt; 및 &lt;code&gt;DllReferencePlugin&lt;/code&gt; 은 크게 빌드시 성능을 향상시킬 수있는 방법으로 분할 번들 수단을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="557f7aaf93c67ec25d77447cf5baa46aa5b3d28f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;EnvironmentPlugin&lt;/code&gt; accepts either an array of keys or an object mapping its keys to their default values.</source>
          <target state="translated">&lt;code&gt;EnvironmentPlugin&lt;/code&gt; 는 키의 배열 또는 기본값으로 그 키를 매핑하는 객체 중 하나를 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="529504bcf17aec34f1796b4d3aac75440813d169" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;EnvironmentPlugin&lt;/code&gt; is shorthand for using the &lt;a href=&quot;define-plugin&quot;&gt;&lt;code&gt;DefinePlugin&lt;/code&gt;&lt;/a&gt; on &lt;a href=&quot;https://nodejs.org/api/process.html#process_process_env&quot;&gt;&lt;code&gt;process.env&lt;/code&gt;&lt;/a&gt; keys.</source>
          <target state="translated">&lt;code&gt;EnvironmentPlugin&lt;/code&gt; 는 사용 속기 &lt;a href=&quot;define-plugin&quot;&gt; &lt;code&gt;DefinePlugin&lt;/code&gt; 을&lt;/a&gt; 에 &lt;a href=&quot;https://nodejs.org/api/process.html#process_process_env&quot;&gt; &lt;code&gt;process.env&lt;/code&gt; 의&lt;/a&gt; 키.</target>
        </trans-unit>
        <trans-unit id="c7dbd12a03472b0bafe433439b4a86e42ba3b280" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;LoaderOptionsPlugin&lt;/code&gt; is unlike other plugins in that it is built for migration from webpack 1 to 2. In webpack 2, the schema for a &lt;code&gt;webpack.config.js&lt;/code&gt; became stricter; no longer open for extension by other loaders and plugins. The intention is that you pass &lt;code&gt;options&lt;/code&gt; directly to loaders and plugins (i.e. &lt;code&gt;options&lt;/code&gt; are &lt;strong&gt;not&lt;/strong&gt; global or shared).</source>
          <target state="translated">&lt;code&gt;LoaderOptionsPlugin&lt;/code&gt; 는 이 웹팩 (2),의 스키마에서 2로 웹팩 1에서 마이그레이션을 위해 만들어진된다는 점에서 다른 플러그인 달리 &lt;code&gt;webpack.config.js&lt;/code&gt; 이 강화되었다; 더 이상 다른 로더 및 플러그인에 의한 확장을 위해 열리지 않습니다. 의도는 &lt;code&gt;options&lt;/code&gt; 을 로더 및 플러그인에 직접 전달하는 것입니다 (즉, &lt;code&gt;options&lt;/code&gt; 이 전역 또는 공유 &lt;strong&gt;되지 않음&lt;/strong&gt; ).</target>
        </trans-unit>
        <trans-unit id="758b1aa7bc2934fb9f463d6b2fe62ac3f7f812ff" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;MultiCompiler&lt;/code&gt; module allows webpack to run multiple configurations in separate compilers. If the &lt;code&gt;options&lt;/code&gt; parameter in the webpack's NodeJS api is an array of options, webpack applies separate compilers and calls the &lt;code&gt;callback&lt;/code&gt; method at the end of each compiler execution.</source>
          <target state="translated">&lt;code&gt;MultiCompiler&lt;/code&gt; 의 모듈은 별도의 컴파일러에서 여러 구성을 실행 웹팩 수 있습니다. 경우] &lt;code&gt;options&lt;/code&gt; 웹팩의 NodeJS API의 파라미터 옵션들의 어레이이다 웹팩 별도 컴파일러를 적용하고 호출 &lt;code&gt;callback&lt;/code&gt; 각 컴파일러 실행 끝에 방법.</target>
        </trans-unit>
        <trans-unit id="0384e3cf0c84ae1fe040c1a2858cc9d50c384db2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;NormalModuleReplacementPlugin&lt;/code&gt; allows you to replace resources that match &lt;code&gt;resourceRegExp&lt;/code&gt; with &lt;code&gt;newResource&lt;/code&gt;. If &lt;code&gt;newResource&lt;/code&gt; is relative, it is resolved relative to the previous resource. If &lt;code&gt;newResource&lt;/code&gt; is a function, it is expected to overwrite the request attribute of the supplied resource.</source>
          <target state="translated">&lt;code&gt;NormalModuleReplacementPlugin&lt;/code&gt; 은 당신이 일치하는 자원을 대체 할 수 있습니다 &lt;code&gt;resourceRegExp&lt;/code&gt; 을 함께 &lt;code&gt;newResource&lt;/code&gt; 을 . &lt;code&gt;newResource&lt;/code&gt; 가 상대적인 경우 이전 자원을 기준으로 분석됩니다. 경우 &lt;code&gt;newResource&lt;/code&gt; 는 함수이고, 이는 제공된 리소스의 요구 특성을 덮어 예상된다.</target>
        </trans-unit>
        <trans-unit id="d095d6c691b6167c5bd5fda19eccfdfd9ef79f68" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;[name]&lt;/code&gt;, &lt;code&gt;[id]&lt;/code&gt;, &lt;code&gt;[hash]&lt;/code&gt; and &lt;code&gt;[chunkhash]&lt;/code&gt; substitutions from &lt;a href=&quot;#output-filename&quot;&gt;#output-filename&lt;/a&gt; can be used. In addition to those, you can use substitutions listed below. The &lt;code&gt;[file]&lt;/code&gt; placeholder is replaced with the filename of the original file. We recommend &lt;strong&gt;only using the &lt;code&gt;[file]&lt;/code&gt; placeholder&lt;/strong&gt;, as the other placeholders won't work when generating SourceMaps for non-chunk files.</source>
          <target state="translated">&lt;code&gt;[name]&lt;/code&gt; , &lt;code&gt;[id]&lt;/code&gt; , &lt;code&gt;[hash]&lt;/code&gt; 및 &lt;code&gt;[chunkhash]&lt;/code&gt; 에서 대체 &lt;a href=&quot;#output-filename&quot;&gt;# - 출력 파일명이&lt;/a&gt; 사용될 수있다. 그 외에도 아래 나열된 대체를 사용할 수 있습니다. &lt;code&gt;[file]&lt;/code&gt; 자리는 원본 파일의 파일명으로 대체된다. 청크 이외의 파일에 대한 SourceMap을 생성 할 때는 다른 플레이스 홀더가 작동하지 않으므로 &lt;strong&gt; &lt;code&gt;[file]&lt;/code&gt; &lt;/strong&gt;&lt;strong&gt; 플레이스 홀더 &lt;/strong&gt;&lt;strong&gt;만 사용하는&lt;/strong&gt; 것이 좋습니다 .</target>
        </trans-unit>
        <trans-unit id="d5e58eefd13d2e79cd01743b2a2668988072f0e7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;apply&lt;/code&gt; method flags all updated modules as invalid. For each invalid module, there needs to be an update handler in the module or in its parent(s). Otherwise, the invalid flag bubbles up and invalidates parent(s) as well. Each bubble continues until the app's entry point or a module with an update handler is reached (whichever comes first). If it bubbles up from an entry point, the process fails.</source>
          <target state="translated">는 &lt;code&gt;apply&lt;/code&gt; 무효로 방법 플래그를 업데이트 된 모든 모듈을. 유효하지 않은 각 모듈마다 모듈 또는 해당 상위에 업데이트 핸들러가 있어야합니다. 그렇지 않으면 유효하지 않은 플래그가 버블 링되고 부모도 무효화됩니다. 각 버블은 앱의 진입 점 또는 업데이트 처리기가있는 모듈에 도달 할 때까지 계속됩니다 (둘 중 빠른 것). 진입 점에서 버블 링되면 프로세스가 실패합니다.</target>
        </trans-unit>
        <trans-unit id="197ed7042dd4c4fae277edc431967fab263cb1fa" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;autoApply&lt;/code&gt; parameter can either be a boolean or &lt;code&gt;options&lt;/code&gt; to pass to the &lt;code&gt;apply&lt;/code&gt; method when called.</source>
          <target state="translated">&lt;code&gt;autoApply&lt;/code&gt; 의 매개 변수 중 하나 부울 또는 수 있습니다 &lt;code&gt;options&lt;/code&gt; 에 전달할 &lt;code&gt;apply&lt;/code&gt; 호출 할 때 방법.</target>
        </trans-unit>
        <trans-unit id="c2873faf34087491ab56ed7bbc7b9c4e199b8217" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;babel-preset-env&lt;/code&gt; package uses &lt;a href=&quot;https://github.com/browserslist/browserslist&quot;&gt;browserslist&lt;/a&gt; to transpile only what is not supported in your browsers matrix. This preset comes with the &lt;code&gt;useBuiltIns&lt;/code&gt; option, &lt;code&gt;false&lt;/code&gt; by default, which converts your global &lt;code&gt;babel-polyfill&lt;/code&gt; import to a more granular feature by feature &lt;code&gt;import&lt;/code&gt; pattern:</source>
          <target state="translated">&lt;code&gt;babel-preset-env&lt;/code&gt; 패키지 사용은 &lt;a href=&quot;https://github.com/browserslist/browserslist&quot;&gt;browserslist&lt;/a&gt; 귀하의 브라우저 매트릭스에서 지원되지 않는 것만 transpile 할 수 있습니다. 이 사전 설정은 &lt;code&gt;useBuiltIns&lt;/code&gt; 옵션 과 함께 기본적으로 &lt;code&gt;false&lt;/code&gt; 이며, 기능 &lt;code&gt;import&lt;/code&gt; 패턴에 따라 전역 &lt;code&gt;babel-polyfill&lt;/code&gt; 가져 오기를보다 세부적인 기능으로 변환합니다 .</target>
        </trans-unit>
        <trans-unit id="5df287b045d05393a528ac0d2dc007acad13c3be" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;cheap-source-map&lt;/code&gt; variants are more performant, if you can live with the slightly worse mapping quality.</source>
          <target state="translated">&lt;code&gt;cheap-source-map&lt;/code&gt; 이 약간 더 매핑 품질로 살 수있는 경우 변형, 더 확대됨에 있습니다.</target>
        </trans-unit>
        <trans-unit id="b156180554ea770e4ec3a2a43529512fc6e19c5e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;chunks&lt;/code&gt; object will also contain a list of &lt;code&gt;origins&lt;/code&gt; describing how the given chunk originated. Each &lt;code&gt;origins&lt;/code&gt; object follows the following schema:</source>
          <target state="translated">&lt;code&gt;chunks&lt;/code&gt; 객체는 목록 포함 &lt;code&gt;origins&lt;/code&gt; 지정된 청크 유래 방법을 설명한다. 각 &lt;code&gt;origins&lt;/code&gt; 개체는 다음 스키마를 따릅니다.</target>
        </trans-unit>
        <trans-unit id="d04ec951d561035013ce10196eb45f6875a4a4ce" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;count&lt;/code&gt; argument represents how many chunks the &lt;code&gt;module&lt;/code&gt; is used in.</source>
          <target state="translated">&lt;code&gt;count&lt;/code&gt; 인수는 얼마나 많은 덩어리 나타냅니다 &lt;code&gt;module&lt;/code&gt; 에 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="ecb4a6fa013e770c5aea51a42d6cc36866052e23" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;css-loader&lt;/code&gt; interprets &lt;code&gt;@import&lt;/code&gt; and &lt;code&gt;url()&lt;/code&gt; like &lt;code&gt;import/require()&lt;/code&gt; and will resolve them.</source>
          <target state="translated">&lt;code&gt;css-loader&lt;/code&gt; 해석은 &lt;code&gt;@import&lt;/code&gt; 및 &lt;code&gt;url()&lt;/code&gt; 와 같은 &lt;code&gt;import/require()&lt;/code&gt; 와이를 해결됩니다.</target>
        </trans-unit>
        <trans-unit id="9e59e1aaf4f1e81f5b28039b148fcc1a71b85705" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;err&lt;/code&gt; object &lt;strong&gt;will not&lt;/strong&gt; include compilation errors and those must be handled separately using &lt;code&gt;stats.hasErrors()&lt;/code&gt; which will be covered in detail in &lt;a href=&quot;#error-handling&quot;&gt;Error Handling&lt;/a&gt; section of this guide. The &lt;code&gt;err&lt;/code&gt; object will only contain webpack-related issues, such as misconfiguration, etc.</source>
          <target state="translated">&lt;code&gt;err&lt;/code&gt; 객체가 &lt;strong&gt;되지 않습니다&lt;/strong&gt; 컴파일 오류를 포함하고 그 사용 별도로 처리해야 &lt;code&gt;stats.hasErrors()&lt;/code&gt; 에서 자세히 설명 될 &lt;a href=&quot;#error-handling&quot;&gt;오류 처리&lt;/a&gt; 이 안내서의 섹션을 참조하십시오. &lt;code&gt;err&lt;/code&gt; 객체는 등 잘못된 같은 웹팩 관련 문제를 포함합니다</target>
        </trans-unit>
        <trans-unit id="bb371008522bc9f3a06d993b0234da62c0417680" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;errorHandler&lt;/code&gt; is fired when the evaluation of this module (or dependencies) has thrown an exception.</source>
          <target state="translated">&lt;code&gt;errorHandler&lt;/code&gt; 이 모듈 (또는 의존성)의 평가 예외가 발생 될 때 연소된다.</target>
        </trans-unit>
        <trans-unit id="15a6063eedfa1b8f8d44562d7e1aa8a218b4f303" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;errors&lt;/code&gt; and &lt;code&gt;warnings&lt;/code&gt; properties each contain a list of strings. Each string contains a message and stack trace:</source>
          <target state="translated">&lt;code&gt;errors&lt;/code&gt; 및 &lt;code&gt;warnings&lt;/code&gt; 특성을 각각 문자열 목록이 포함되어 있습니다. 각 문자열에는 메시지 및 스택 추적이 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="ebe7a596ff5e54934592c106b89d332d3bba5c9f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;extends&lt;/code&gt; property also supports naming installed NPM modules which export webpack configurations. Various configuration properties can also be filtered in different ways based on need.</source>
          <target state="translated">가 &lt;code&gt;extends&lt;/code&gt; 되는 수출 웹팩 구성 설치 NPM 모듈을 이름도 재산 지원합니다. 필요에 따라 다양한 구성 속성을 다른 방식으로 필터링 할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="8915101d6d0cf049bfb4b9f1127093b8d16acda4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;externals&lt;/code&gt; configuration option provides a way of excluding dependencies from the output bundles. Instead, the created bundle relies on that dependency to be present in the consumer's environment. This feature is typically most useful to &lt;strong&gt;library developers&lt;/strong&gt;, however there are a variety of applications for it.</source>
          <target state="translated">&lt;code&gt;externals&lt;/code&gt; 구성 옵션은 출력 번들에서 종속성을 제외하는 방법을 제공합니다. 대신, 작성된 번들은 해당 종속성을 사용하여 소비자 환경에 존재합니다. 이 기능은 일반적으로 &lt;strong&gt;라이브러리 개발자&lt;/strong&gt; 에게 가장 유용 하지만 다양한 응용 프로그램이 있습니다.</target>
        </trans-unit>
        <trans-unit id="b0f3b799fe5485060fbb228471725b1fc4660161" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;fileContext&lt;/code&gt; option is useful when you want to store source maps in an upper level directory to avoid &lt;code&gt;../../&lt;/code&gt; appearing in the absolute &lt;code&gt;[url]&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;fileContext&lt;/code&gt; 의 당신이 저장 소스로 할 때 옵션을 피하기 위해 상위 디렉토리에 매핑 유용 &lt;code&gt;../../&lt;/code&gt; 절대에 나타나는 &lt;code&gt;[url]&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="3ac9d0d856894e31e9e35e5216961c4e21678205" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;filePath&lt;/code&gt; is relative to the webpack config: output.path You can pass in a different formatter for the output file, if none is passed in the default/configured formatter will be used</source>
          <target state="translated">&lt;code&gt;filePath&lt;/code&gt; 웹팩 설정에 상대적입니다 : 당신은 출력 파일에 대해 다른 포맷으로 전달할 수 있습니다 output.path, 아무도 기본 / 구성 포맷터에서 사용되는 전달되지 않은 경우</target>
        </trans-unit>
        <trans-unit id="8e867fda39d4db878de512a003165a4320ef3ec0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;hooks&lt;/code&gt; property on a &lt;code&gt;Compiler&lt;/code&gt; instance is used to register a plugin to any hook event in the &lt;code&gt;Compiler&lt;/code&gt;'s lifecycle. The &lt;a href=&quot;https://github.com/webpack/webpack/blob/master/lib/WebpackOptionsDefaulter.js&quot;&gt;&lt;code&gt;WebpackOptionsDefaulter&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://github.com/webpack/webpack/blob/master/lib/WebpackOptionsApply.js&quot;&gt;&lt;code&gt;WebpackOptionsApply&lt;/code&gt;&lt;/a&gt; utilities are used by webpack to configure its &lt;code&gt;Compiler&lt;/code&gt; instance with all the built-in plugins.</source>
          <target state="translated">&lt;code&gt;hooks&lt;/code&gt; A의 속성 &lt;code&gt;Compiler&lt;/code&gt; 인스턴스는 임의 훅 이벤트 플러그인 등록하는데 사용되는 &lt;code&gt;Compiler&lt;/code&gt; 의 라이프 사이클. &lt;a href=&quot;https://github.com/webpack/webpack/blob/master/lib/WebpackOptionsDefaulter.js&quot;&gt; &lt;code&gt;WebpackOptionsDefaulter&lt;/code&gt; &lt;/a&gt; 및&lt;a href=&quot;https://github.com/webpack/webpack/blob/master/lib/WebpackOptionsApply.js&quot;&gt; &lt;code&gt;WebpackOptionsApply&lt;/code&gt; &lt;/a&gt; 유틸리티의 구성 웹팩에서 사용하는 &lt;code&gt;Compiler&lt;/code&gt; 모두와 함께 인스턴스를 내장 플러그인.</target>
        </trans-unit>
        <trans-unit id="c3bb9fd1827769306a6587d4f6b4960bfdea0b4f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;info&lt;/code&gt; parameter will be an object containing some of the following values:</source>
          <target state="translated">&lt;code&gt;info&lt;/code&gt; 매개 변수는 다음 값의 일부를 포함하는 객체가 될 것입니다 :</target>
        </trans-unit>
        <trans-unit id="ac2bce6f0611a346f5fe5bcff1092028d81fbe9c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;less-loader&lt;/code&gt; requires &lt;a href=&quot;https://github.com/less/less.js&quot;&gt;less&lt;/a&gt; as &lt;a href=&quot;https://docs.npmjs.com/files/package.json#peerdependencies&quot;&gt;&lt;code&gt;peerDependency&lt;/code&gt;&lt;/a&gt;. Thus you are able to control the versions accurately.</source>
          <target state="translated">&lt;code&gt;less-loader&lt;/code&gt; 필요 &lt;a href=&quot;https://github.com/less/less.js&quot;&gt;덜&lt;/a&gt; 등&lt;a href=&quot;https://docs.npmjs.com/files/package.json#peerdependencies&quot;&gt; &lt;code&gt;peerDependency&lt;/code&gt; &lt;/a&gt; . 따라서 버전을 정확하게 제어 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="8a7a85e47b4bb57e8a7c7a53a9c528cc33f8ac72" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;lineToLine&lt;/code&gt; object allows for the same &lt;code&gt;test&lt;/code&gt;, &lt;code&gt;include&lt;/code&gt;, and &lt;code&gt;exclude&lt;/code&gt; options described above.</source>
          <target state="translated">&lt;code&gt;lineToLine&lt;/code&gt; 의 객체는 같은 수 있습니다 &lt;code&gt;test&lt;/code&gt; , &lt;code&gt;include&lt;/code&gt; 및 &lt;code&gt;exclude&lt;/code&gt; 상술 옵션.</target>
        </trans-unit>
        <trans-unit id="2bba46138c47a0a7cf087fb38225f589eeebb1c3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;main&lt;/code&gt; bundle changed because of its new content.</source>
          <target state="translated">그만큼 &lt;code&gt;main&lt;/code&gt; 번들이 때문에 새로운 내용의 변경.</target>
        </trans-unit>
        <trans-unit id="95e185eaa4f7fa01feafa7f198567ac6d46bf21d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;module&lt;/code&gt; argument represents each module in the chunks you have provided via the &lt;code&gt;name&lt;/code&gt;/&lt;code&gt;names&lt;/code&gt; property. &lt;code&gt;module&lt;/code&gt; has the shape of a &lt;a href=&quot;https://github.com/webpack/webpack/blob/master/lib/NormalModule.js&quot;&gt;NormalModule&lt;/a&gt;, which has two particularly useful properties for this use case:</source>
          <target state="translated">&lt;code&gt;module&lt;/code&gt; 인수는을 통해 제공 한 덩어리의 각 모듈을 나타내는 &lt;code&gt;name&lt;/code&gt; / &lt;code&gt;names&lt;/code&gt; 속성을. &lt;code&gt;module&lt;/code&gt; 은 &lt;a href=&quot;https://github.com/webpack/webpack/blob/master/lib/NormalModule.js&quot;&gt;NormalModule&lt;/a&gt; 의 모양을 가지며이 사용 사례에 특히 유용한 두 가지 속성이 있습니다.</target>
        </trans-unit>
        <trans-unit id="a3cfb3d5cb7336d9511e7a4c809c722704ca080e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;module&lt;/code&gt; property should point to a script that utilizes ES2015 module syntax but no other syntax features that aren't yet supported by browsers or node. This enables webpack to parse the module syntax itself, allowing for lighter bundles via &lt;a href=&quot;tree-shaking&quot;&gt;tree shaking&lt;/a&gt; if users are only consuming certain parts of the library.</source>
          <target state="translated">&lt;code&gt;module&lt;/code&gt; 속성은 ES2015 모듈 구문 아직 브라우저 또는 노드에서 지원하지 않는 다른 구문 기능을 활용하는 스크립트를 가리켜 야합니다. 이를 통해 웹팩은 모듈 구문 자체를 구문 분석하여보다 가벼운 번들을 통해&lt;a href=&quot;tree-shaking&quot;&gt;&lt;/a&gt; 사용자가 라이브러리의 특정 부분 만 소비 하는 경우 트리 흔들림을 .</target>
        </trans-unit>
        <trans-unit id="f6e16ff706d3ad9a7f34ca2ac321ba5759f3186f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;moment/locale&lt;/code&gt; context is restricted to files matching &lt;code&gt;/de|fr|hu/&lt;/code&gt;. Thus only those locales are included (see &lt;a href=&quot;https://github.com/moment/moment/issues/2373&quot;&gt;this issue&lt;/a&gt; for more information).</source>
          <target state="translated">&lt;code&gt;moment/locale&lt;/code&gt; 컨텍스트가 일치하는 파일로 제한됩니다 &lt;code&gt;/de|fr|hu/&lt;/code&gt; . 따라서 해당 로케일 만 포함됩니다 ( 자세한 내용 은 &lt;a href=&quot;https://github.com/moment/moment/issues/2373&quot;&gt;이 문제&lt;/a&gt; 참조 ).</target>
        </trans-unit>
        <trans-unit id="69c7a1beab39f0986a8084e3f514abc10bb5b07b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;newContentCallback&lt;/code&gt; function is given a &lt;a href=&quot;../api/plugins/module-factories&quot;&gt;&lt;code&gt;data&lt;/code&gt; object of the &lt;code&gt;ContextModuleFactory&lt;/code&gt;&lt;/a&gt; and is expected to overwrite the &lt;code&gt;request&lt;/code&gt; attribute of the supplied object.</source>
          <target state="translated">&lt;code&gt;newContentCallback&lt;/code&gt; 의 함수는 주어진 &lt;a href=&quot;../api/plugins/module-factories&quot;&gt; &lt;code&gt;data&lt;/code&gt; 의 오브젝트 &lt;code&gt;ContextModuleFactory&lt;/code&gt; 를&lt;/a&gt; 상기 덮어 예상 &lt;code&gt;request&lt;/code&gt; 제공된 객체의 속성.</target>
        </trans-unit>
        <trans-unit id="d93a803cfd822e9f080183ae5a4bf2fc1cc0d823" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;newContentResource&lt;/code&gt; and &lt;code&gt;newContentCreateContextMap&lt;/code&gt; parameters are also available:</source>
          <target state="translated">&lt;code&gt;newContentResource&lt;/code&gt; 및 &lt;code&gt;newContentCreateContextMap&lt;/code&gt; 매개 변수도 사용할 수 있습니다 :</target>
        </trans-unit>
        <trans-unit id="a19a4d88397a085c68dfd0c0f7af1b957ed12287" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;options&lt;/code&gt; property has been deprecated in webpack 3 and removed in webpack 4.</source>
          <target state="translated">&lt;code&gt;options&lt;/code&gt; 속성은 웹팩 3에서 사용되지 및 웹팩 4에서 제거되었습니다.</target>
        </trans-unit>
        <trans-unit id="77d82bf40f2e270972ea89ce304490f1b508185b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;output&lt;/code&gt; property has &lt;a href=&quot;../configuration/output&quot;&gt;many more configurable features&lt;/a&gt; and if you like to know more about the concepts behind it, you can &lt;a href=&quot;output&quot;&gt;read more in the output section&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;output&lt;/code&gt; 속성을 가지고 &lt;a href=&quot;../configuration/output&quot;&gt;더 많은 구성 가능한 기능을&lt;/a&gt; 하고 그 뒤에 개념에 대한 자세한 내용을 알고 싶은 경우에, 당신은 할 수&lt;a href=&quot;output&quot;&gt; 더 많은 출력 섹션에 읽을&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="00a1ab1dde43ec150840bd4f6b6641f52c20f76a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;parser&lt;/code&gt; instance, found in the &lt;code&gt;compiler&lt;/code&gt;, is used to parse each module being processed by webpack. The &lt;code&gt;parser&lt;/code&gt; is yet another webpack class that extends &lt;code&gt;tapable&lt;/code&gt; and provides a variety of &lt;code&gt;tapable&lt;/code&gt; hooks that can be used by plugin authors to customize the parsing process.</source>
          <target state="translated">&lt;code&gt;parser&lt;/code&gt; 검색된 경우, &lt;code&gt;compiler&lt;/code&gt; , 웹팩 의해 처리되는 각 모듈을 분석하는 데 사용된다. &lt;code&gt;parser&lt;/code&gt; 확장 또 다른 웹팩 클래스입니다 &lt;code&gt;tapable&lt;/code&gt; 과의 다양한 제공 &lt;code&gt;tapable&lt;/code&gt; 을 파싱 과정을 사용자 정의 플러그인 저자에 의해 사용될 수 후크를.</target>
        </trans-unit>
        <trans-unit id="7687177981a2fd47de4971bcb71521b7fdd4ee22" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;parser&lt;/code&gt; is found within &lt;a href=&quot;compiler-hooks#normalmodulefactory&quot;&gt;module factories&lt;/a&gt; and therefore takes little more work to access:</source>
          <target state="translated">&lt;code&gt;parser&lt;/code&gt; 내에서 발견된다&lt;a href=&quot;compiler-hooks#normalmodulefactory&quot;&gt; 모듈 공장&lt;/a&gt; 때문에 접근에 조금 더 많은 일을한다 :</target>
        </trans-unit>
        <trans-unit id="7ba56a2710d7efe8d8ee49077d7d9a0b872efb5f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;plugins&lt;/code&gt; option is used to customize the webpack build process in a variety of ways. webpack comes with a variety built-in plugins available under &lt;code&gt;webpack.[plugin-name]&lt;/code&gt;. See &lt;a href=&quot;https://webpack.js.org/plugins&quot;&gt;this page&lt;/a&gt; for a list of plugins and documentation but note that there are a lot more out in the community.</source>
          <target state="translated">&lt;code&gt;plugins&lt;/code&gt; 옵션은 다양한 방법으로 웹팩 빌드 프로세스를 사용자 지정하는 데 사용됩니다. webpack은 &lt;code&gt;webpack.[plugin-name]&lt;/code&gt; 에서 사용 가능한 다양한 내장 플러그인과 함께 제공됩니다 . 보다&lt;a href=&quot;https://webpack.js.org/plugins&quot;&gt;&lt;/a&gt;플러그인 및 설명서 목록은 이 페이지 를 . 커뮤니티에는 더 많은 정보가 있습니다.</target>
        </trans-unit>
        <trans-unit id="440b7e1d609564f2203fd525c43f9da6f0a213ab" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;proxy_set_header&lt;/code&gt; lines are important, because they allow the WebSockets to work correctly.</source>
          <target state="translated">&lt;code&gt;proxy_set_header&lt;/code&gt; 그들이 WebSocket을 제대로 작동 할 수 있기 때문에 라인이 중요하다.</target>
        </trans-unit>
        <trans-unit id="959497ef27be2ffe34adb1545ac77f2b65dccb71" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;publicPath&lt;/code&gt; can be changed so the bundle is put in a directory:</source>
          <target state="translated">&lt;code&gt;publicPath&lt;/code&gt; 번들이 디렉토리에 넣어되도록 변경 될 수 있습니다 :</target>
        </trans-unit>
        <trans-unit id="67beac7259210a810639de807db709b25609a215" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;publicPath&lt;/code&gt; configuration option can be quite useful in a variety of scenarios. It allows you to specify the base path for all the assets within your application.</source>
          <target state="translated">&lt;code&gt;publicPath&lt;/code&gt; 구성 옵션은 다양한 시나리오에서 매우 유용 할 수 있습니다. 애플리케이션 내 모든 자산의 기본 경로를 지정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2cd29ccbf03730a8b2edc90124528dbcf16d9bf8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;publicPath&lt;/code&gt; will be used within our server script as well in order to make sure files are served correctly on &lt;code&gt;http://localhost:3000&lt;/code&gt;. We'll specify the port number later. The next step is setting up our custom &lt;code&gt;express&lt;/code&gt; server:</source>
          <target state="translated">&lt;code&gt;publicPath&lt;/code&gt; 는 잘 확인 파일이 제대로 제공하고 있는지 확인하기 위해 우리의 서버 스크립트 내에서 사용됩니다 &lt;code&gt;http://localhost:3000&lt;/code&gt; . 나중에 포트 번호를 지정하겠습니다. 다음 단계는 커스텀 &lt;code&gt;express&lt;/code&gt; 서버를 설정하는 것입니다 .</target>
        </trans-unit>
        <trans-unit id="bfa85c6fb79a4dfb066d5382813b76a6d20780bd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;requestRegExp&lt;/code&gt; parameter passed to &lt;code&gt;IgnorePlugin&lt;/code&gt; is not tested against the resolved file names or absolute module names being imported or required, but rather against the &lt;em&gt;string&lt;/em&gt; passed to &lt;code&gt;require&lt;/code&gt; or &lt;code&gt;import&lt;/code&gt;&lt;em&gt;within the source code where the import is taking place&lt;/em&gt;. For example, if you're trying to exclude &lt;code&gt;node_modules/moment/locale/*.js&lt;/code&gt;, this won't work:</source>
          <target state="translated">&lt;code&gt;requestRegExp&lt;/code&gt; 의 전달 매개 변수 &lt;code&gt;IgnorePlugin&lt;/code&gt; 가 해결 된 파일 이름 또는 절대 모듈 이름에 대해 테스트되지는 수입 또는 필요하지만 오히려에 대한되는 &lt;em&gt;문자열&lt;/em&gt; 에 전달 &lt;code&gt;require&lt;/code&gt; 하거나 &lt;code&gt;import&lt;/code&gt; &lt;em&gt;가져 오기가 진행되는 소스 코드 내에서&lt;/em&gt; . 예를 들어 &lt;code&gt;node_modules/moment/locale/*.js&lt;/code&gt; 를 제외하려고 시도하면 작동하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="aa343c1130af70aabd487d99912dab97138f9348" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;run&lt;/code&gt; method is then used to kickstart all compilation work. Upon completion, the given &lt;code&gt;callback&lt;/code&gt; function is executed. The final logging of stats and errors should be done in this &lt;code&gt;callback&lt;/code&gt; function.</source>
          <target state="translated">&lt;code&gt;run&lt;/code&gt; 방법은 모든 편집 작업을 킥 스타트하는 데 사용됩니다. 완료되면 주어진 &lt;code&gt;callback&lt;/code&gt; 함수가 실행됩니다. 이 &lt;code&gt;callback&lt;/code&gt; 함수 에서 통계 및 오류의 최종 로깅을 수행해야합니다 .</target>
        </trans-unit>
        <trans-unit id="0fa1ceeebc223dab1f3f6c432ee757cc7bd5987b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;stats&lt;/code&gt; object that is passed as a second argument of the &lt;a href=&quot;#webpack-&quot;&gt;&lt;code&gt;webpack()&lt;/code&gt;&lt;/a&gt; callback, is a good source of information about the code compilation process. It includes:</source>
          <target state="translated">&lt;a href=&quot;#webpack-&quot;&gt; &lt;code&gt;webpack()&lt;/code&gt; &lt;/a&gt; 콜백 의 두 번째 인수로 전달 되는 &lt;code&gt;stats&lt;/code&gt; 객체 는 코드 컴파일 프로세스에 대한 좋은 정보 소스입니다. 다음을 포함합니다 :</target>
        </trans-unit>
        <trans-unit id="9dff24e3b8a34791e7bc80a01e4ab6eed1e802b0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;stats&lt;/code&gt; option lets you precisely control what bundle information gets displayed. This can be a nice middle ground if you don't want to use &lt;code&gt;quiet&lt;/code&gt; or &lt;code&gt;noInfo&lt;/code&gt; because you want some bundle information, but not all of it.</source>
          <target state="translated">&lt;code&gt;stats&lt;/code&gt; 옵션은 정확하게 번들 정보가 표시됩니다 무엇을 제어 할 수 있습니다. 일부 번들 정보를 원하지만 모든 정보를 원하지 않기 때문에 &lt;code&gt;quiet&lt;/code&gt; 또는 &lt;code&gt;noInfo&lt;/code&gt; 를 사용하지 않으려는 경우 좋은 중간 지점이 될 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="4c79769622f460ee03342b8e1cd130200177a876" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;style-loader&lt;/code&gt; injects the styles lazily making them useable on-demand via &lt;code&gt;style.use()&lt;/code&gt; / &lt;code&gt;style.unuse()&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;style-loader&lt;/code&gt; 게으르게 그들을 통해 온 디맨드 가능한 만드는 스타일을 주입 &lt;code&gt;style.use()&lt;/code&gt; / &lt;code&gt;style.unuse()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="77a959b54b097574b4bea60118a29fb435f0f872" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;test&lt;/code&gt; property identifies which file or files should be transformed.</source>
          <target state="translated">&lt;code&gt;test&lt;/code&gt; 하는 파일이나 파일 속성 식별이 변화되어야한다.</target>
        </trans-unit>
        <trans-unit id="c92c3b6d9a4ff7441cc25b272c0de894b3c2d423" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;this.callback&lt;/code&gt; method is more flexible as it allows multiple arguments to be passed as opposed to just the &lt;code&gt;content&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;this.callback&lt;/code&gt; 그것은 그냥 반대로 여러 인수가 전달 될 수 있도록 같은 방법은 더 유연 &lt;code&gt;content&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="f6345b4bc86354b4abc5d07dca6da56646b9e249" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;thread-loader&lt;/code&gt; can be used to offload expensive loaders to a worker pool.</source>
          <target state="translated">&lt;code&gt;thread-loader&lt;/code&gt; 작업자 풀에 비싼 로더를 오프로드하는 데 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="20f8772fda6c35ab683bfd8148d1a50c11515e74" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;use&lt;/code&gt; property indicates which loader should be used to do the transforming.</source>
          <target state="translated">&lt;code&gt;use&lt;/code&gt; 속성은 변형을 수행하는 데 사용되어야하는 로더를 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="e6e2e9ef8dbc3d5383c141533d231f09eb89ee0d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;vendor&lt;/code&gt; bundle changed because its &lt;code&gt;module.id&lt;/code&gt; was changed.</source>
          <target state="translated">&lt;code&gt;vendor&lt;/code&gt; 의 때문에 번들 변경 &lt;code&gt;module.id&lt;/code&gt; 이 변경되었습니다.</target>
        </trans-unit>
        <trans-unit id="82960aa0f6caf9f5689cf5935d850c7f66ec1a40" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;watch&lt;/code&gt; method returns a &lt;code&gt;Watching&lt;/code&gt; instance that exposes &lt;code&gt;.close(callback)&lt;/code&gt; method. Calling this method will end watching:</source>
          <target state="translated">&lt;code&gt;watch&lt;/code&gt; 방법은 반환 &lt;code&gt;Watching&lt;/code&gt; 노출하는 것을 예를 &lt;code&gt;.close(callback)&lt;/code&gt; 방법. 이 메소드를 호출하면 시청이 종료됩니다.</target>
        </trans-unit>
        <trans-unit id="4a0b36b6ece61696347cc27cab3d20af2ce94c6c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;webpack-dev-server&lt;/code&gt; comes with many configurable options. Head over to the &lt;a href=&quot;../configuration/dev-server&quot;&gt;documentation&lt;/a&gt; to learn more.</source>
          <target state="translated">&lt;code&gt;webpack-dev-server&lt;/code&gt; 많은 구성 옵션이 함께 제공됩니다. 자세한 내용 은 &lt;a href=&quot;../configuration/dev-server&quot;&gt;설명서&lt;/a&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="7fc0861e809d209dbbcf6f243915a671c9cd26a6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;webpack-dev-server&lt;/code&gt; provides you with a simple web server and the ability to use live reloading. Let's set it up:</source>
          <target state="translated">&lt;code&gt;webpack-dev-server&lt;/code&gt; 간단한 웹 서버와 라이브 다시로드를 사용할 수있는 기능을 제공합니다. 설정해 봅시다 :</target>
        </trans-unit>
        <trans-unit id="48c48bfe39c90a41f2aa4d0d5851ecb894e963e3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;webpack.config.js&lt;/code&gt; file will be intelligently extended with properties from &lt;code&gt;base.config.js&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;webpack.config.js&lt;/code&gt; 의 파일은 지능적에서 속성으로 확장됩니다 &lt;code&gt;base.config.js&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="4ad3e989709e306fec071f2cefb6ed11206b1cf9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;webpack&lt;/code&gt; compiler can understand modules written as ES2015 modules, CommonJS or AMD. However, some third party libraries may expect global dependencies (e.g. &lt;code&gt;$&lt;/code&gt; for &lt;code&gt;jQuery&lt;/code&gt;). The libraries might also create globals which need to be exported. These &quot;broken modules&quot; are one instance where &lt;em&gt;shimming&lt;/em&gt; comes into play.</source>
          <target state="translated">&lt;code&gt;webpack&lt;/code&gt; 컴파일러는 ES2015 모듈, CommonJS 또는 AMD로 작성 모듈을 이해할 수있다. 그러나 일부 타사 라이브러리는 전역 종속성 (예 : &lt;code&gt;$&lt;/code&gt; for &lt;code&gt;jQuery&lt;/code&gt; )을 기대할 수 있습니다 . 라이브러리는 내 보내야하는 전역을 만들 수도 있습니다. 이러한 &quot;손상된 모듈&quot;은 &lt;em&gt;shimming&lt;/em&gt; 이 발생하는 한 예입니다&lt;em&gt;&lt;/em&gt; 이 작동 입니다.</target>
        </trans-unit>
        <trans-unit id="635124a1b4ade80ec417a236748826993e343c3c" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;first option&lt;/strong&gt; is to open your &lt;code&gt;tsconfig.json&lt;/code&gt; file and look for &lt;code&gt;compilerOptions&lt;/code&gt;. Set &lt;code&gt;target&lt;/code&gt; to &lt;code&gt;&quot;ES5&quot;&lt;/code&gt; and &lt;code&gt;module&lt;/code&gt; to &lt;code&gt;&quot;CommonJS&quot;&lt;/code&gt; (or completely remove the &lt;code&gt;module&lt;/code&gt; option).</source>
          <target state="translated">첫 &lt;strong&gt;번째 옵션&lt;/strong&gt; 은 &lt;code&gt;tsconfig.json&lt;/code&gt; 파일 을 열고 &lt;code&gt;compilerOptions&lt;/code&gt; 를 찾는 것입니다 . 설정 &lt;code&gt;target&lt;/code&gt; 에 &lt;code&gt;&quot;ES5&quot;&lt;/code&gt; 및 &lt;code&gt;module&lt;/code&gt; 에 &lt;code&gt;&quot;CommonJS&quot;&lt;/code&gt; (또는 완전히 제거 &lt;code&gt;module&lt;/code&gt; 옵션).</target>
        </trans-unit>
        <trans-unit id="4b753724968fd4a8aa6110a6c955d7aa4b30e944" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;output&lt;/strong&gt; property tells webpack where to emit the &lt;em&gt;bundles&lt;/em&gt; it creates and how to name these files. It defaults to &lt;code&gt;./dist/main.js&lt;/code&gt; for the main output file and to the &lt;code&gt;./dist&lt;/code&gt; folder for any other generated file.</source>
          <target state="translated">&lt;strong&gt;출력&lt;/strong&gt; 속성은 어디 방출하는 웹팩 알려줍니다 &lt;em&gt;번들&lt;/em&gt; 이 생성을하는 방법과 이러한 파일의 이름을 지정합니다. 기본 출력 파일의 경우 기본적으로 &lt;code&gt;./dist/main.js&lt;/code&gt; 및 &lt;code&gt;./dist&lt;/code&gt; 다른 생성 된 파일의 폴더입니다.</target>
        </trans-unit>
        <trans-unit id="2b7f1d87a6236de23ae9ee9e25e2ea1b90bec2d2" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;second option&lt;/strong&gt; is to install the &lt;code&gt;tsconfig-paths&lt;/code&gt; package:</source>
          <target state="translated">두 &lt;strong&gt;번째 옵션&lt;/strong&gt; 은 &lt;code&gt;tsconfig-paths&lt;/code&gt; 패키지 를 설치하는 것입니다 .</target>
        </trans-unit>
        <trans-unit id="12fb1858a3514d997f15b5204dc79149205e49c3" translate="yes" xml:space="preserve">
          <source>The API only supports a single concurrent compilation at a time. When using &lt;code&gt;run&lt;/code&gt;, wait for it to finish before calling &lt;code&gt;run&lt;/code&gt; or &lt;code&gt;watch&lt;/code&gt; again. When using &lt;code&gt;watch&lt;/code&gt;, call &lt;code&gt;close&lt;/code&gt; and wait for it to finish before calling &lt;code&gt;run&lt;/code&gt; or &lt;code&gt;watch&lt;/code&gt; again. Concurrent compilations will corrupt the output files.</source>
          <target state="translated">API는 한 번에 하나의 동시 컴파일 만 지원합니다. 사용하는 경우 &lt;code&gt;run&lt;/code&gt; 이 호출하기 전에 끝날 때까지 기다리 &lt;code&gt;run&lt;/code&gt; 또는 &lt;code&gt;watch&lt;/code&gt; 다시. 사용하는 경우 &lt;code&gt;watch&lt;/code&gt; , 전화 &lt;code&gt;close&lt;/code&gt; 과 대기 그것은 호출하기 전에 종료 될 때까지 &lt;code&gt;run&lt;/code&gt; 하거나 &lt;code&gt;watch&lt;/code&gt; 다시. 동시 컴파일은 출력 파일을 손상시킵니다.</target>
        </trans-unit>
        <trans-unit id="5ce1205cb2c56dae5668475d974ac376cca81c42" translate="yes" xml:space="preserve">
          <source>The Command Line Interface (CLI) to configure and interact with your build. It is especially useful in the case of early prototyping and profiling. For the most part, the CLI is simply used to kick off the process using a configuration file and a few flags (e.g. &lt;code&gt;--env&lt;/code&gt;).</source>
          <target state="translated">빌드를 구성하고 상호 작용하기위한 CLI (명령 줄 인터페이스) 초기 프로토 타이핑 및 프로파일 링의 경우 특히 유용합니다. 대부분의 경우 CLI는 구성 파일과 몇 가지 플래그 (예 : &lt;code&gt;--env&lt;/code&gt; )를 사용하여 프로세스를 시작하는 데 사용됩니다 .</target>
        </trans-unit>
        <trans-unit id="5234b711ebe571f702de271664fe3fad3a23178e" translate="yes" xml:space="preserve">
          <source>The CommonsChunkPlugin has been removed in webpack v4 legato. To learn how chunks are treated in the latest version, check out the &lt;a href=&quot;../plugins/split-chunks-plugin&quot;&gt;SplitChunksPlugin&lt;/a&gt;.</source>
          <target state="translated">CommonsChunkPlugin은 webpack v4 legato에서 제거되었습니다. 최신 버전에서 청크를 처리하는 방법을 알아 &lt;a href=&quot;../plugins/split-chunks-plugin&quot;&gt;보려면 SplitChunksPlugin을&lt;/a&gt; 확인하십시오 .</target>
        </trans-unit>
        <trans-unit id="229e84c0b0f542eaf2480b8ad349fd816795c9e4" translate="yes" xml:space="preserve">
          <source>The CommonsChunkPlugin has been removed in webpack v4 legato. To learn how chunks are treated in the latest version, check out the &lt;a href=&quot;split-chunks-plugin&quot;&gt;SplitChunksPlugin&lt;/a&gt;.</source>
          <target state="translated">CommonsChunkPlugin은 webpack v4 legato에서 제거되었습니다. 최신 버전에서 청크를 처리하는 방법을 알아 &lt;a href=&quot;split-chunks-plugin&quot;&gt;보려면 SplitChunksPlugin을&lt;/a&gt; 확인하십시오 .</target>
        </trans-unit>
        <trans-unit id="4507304153be0db0cb962df914f0c5b2ab856e13" translate="yes" xml:space="preserve">
          <source>The Fine Art of the webpack 3 Config</source>
          <target state="translated">웹팩 3 구성의 순수 기술</target>
        </trans-unit>
        <trans-unit id="b1c2b221613da1e5b10aea2457d7a2fd9e875d85" translate="yes" xml:space="preserve">
          <source>The ID of the current module.</source>
          <target state="translated">현재 모듈의 ID입니다.</target>
        </trans-unit>
        <trans-unit id="c723a58153b1097bc6e5d48b2d40385bb0879aef" translate="yes" xml:space="preserve">
          <source>The JSON files to use for descriptions. Default:</source>
          <target state="translated">설명에 사용할 JSON 파일. 기본:</target>
        </trans-unit>
        <trans-unit id="2bd6ce3e5799557f02fb6ef11c6634c82897b1b8" translate="yes" xml:space="preserve">
          <source>The Loader Context</source>
          <target state="translated">로더 컨텍스트</target>
        </trans-unit>
        <trans-unit id="8c69b75adc810300f3fa44f52599a074382fbe2c" translate="yes" xml:space="preserve">
          <source>The Manifest</source>
          <target state="translated">매니페스트</target>
        </trans-unit>
        <trans-unit id="20f70436a9d57cb1461c13fd70b6f74f082ee97c" translate="yes" xml:space="preserve">
          <source>The Node.js API is useful in scenarios in which you need to customize the build or development process since all the reporting and error handling must be done manually and webpack only does the compiling part. For this reason the &lt;a href=&quot;../configuration/stats&quot;&gt;&lt;code&gt;stats&lt;/code&gt;&lt;/a&gt; configuration options will not have any effect in the &lt;code&gt;webpack()&lt;/code&gt; call.</source>
          <target state="translated">Node.js API는 모든보고 및 오류 처리를 수동으로 수행해야하고 웹팩은 컴파일 부분 만 수행하므로 빌드 또는 개발 프로세스를 사용자 정의해야하는 시나리오에 유용합니다. 이러한 이유로 &lt;a href=&quot;../configuration/stats&quot;&gt; &lt;code&gt;stats&lt;/code&gt; &lt;/a&gt; 구성 옵션은 &lt;code&gt;webpack()&lt;/code&gt; 호출에 영향을 미치지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="355c15d3884285cbe9de6e8c0623457a61fdc6ca" translate="yes" xml:space="preserve">
          <source>The Problem</source>
          <target state="translated">문제</target>
        </trans-unit>
        <trans-unit id="fd5fa9a5b25de9fdd4bc4bc759ae247c0b3e4737" translate="yes" xml:space="preserve">
          <source>The Unix socket to listen to (instead of a host).</source>
          <target state="translated">청취하는 유닉스 소켓 (호스트 대신).</target>
        </trans-unit>
        <trans-unit id="4d5406ba559c1d91f6260313b9fbba08b5f54e12" translate="yes" xml:space="preserve">
          <source>The absolute filename</source>
          <target state="translated">절대 파일 이름</target>
        </trans-unit>
        <trans-unit id="63cd9df0f8725b031bddd6167b7fadab8bda770f" translate="yes" xml:space="preserve">
          <source>The allowances were the ability to restrict registrations to a specific version or to support different sandboxes with different defined modules.</source>
          <target state="translated">허용량은 등록을 특정 버전으로 제한하거나 정의 된 모듈이 서로 다른 샌드 박스를 지원하는 기능이었습니다.</target>
        </trans-unit>
        <trans-unit id="16b86c144a0a521ee168253a8c4f98de7b78f15d" translate="yes" xml:space="preserve">
          <source>The application asks the HMR runtime to check for updates.</source>
          <target state="translated">응용 프로그램은 HMR 런타임에 업데이트를 확인하도록 요청합니다.</target>
        </trans-unit>
        <trans-unit id="1ebbe790435ed6809e144b26b79df8536bc5f553" translate="yes" xml:space="preserve">
          <source>The application then asks the runtime to apply the updates.</source>
          <target state="translated">그런 다음 응용 프로그램은 런타임에 업데이트를 적용하도록 요청합니다.</target>
        </trans-unit>
        <trans-unit id="d824c0a8e805904e477cac16a6a89a050cf96b63" translate="yes" xml:space="preserve">
          <source>The arguments passed to &lt;code&gt;require.context&lt;/code&gt; must be literals!</source>
          <target state="translated">&lt;code&gt;require.context&lt;/code&gt; 에 전달 된 인수는 리터럴이어야합니다!</target>
        </trans-unit>
        <trans-unit id="3b269a2b9e4dd52dc81aafc9c739893dbdcca239" translate="yes" xml:space="preserve">
          <source>The array accepts relative, absolute, and glob patterns to the relevant files. It uses &lt;a href=&quot;https://github.com/micromatch/micromatch#matching-features&quot;&gt;micromatch&lt;/a&gt; under the hood.</source>
          <target state="translated">배열은 관련 파일에 대한 상대, 절대 및 글로브 패턴을 허용합니다. 후드 아래에서 &lt;a href=&quot;https://github.com/micromatch/micromatch#matching-features&quot;&gt;마이크로 매치&lt;/a&gt; 를 사용합니다 .</target>
        </trans-unit>
        <trans-unit id="7f24e06847c7c8c09a6910743fe0e2b89b2d5d81" translate="yes" xml:space="preserve">
          <source>The assets has been optimized.</source>
          <target state="translated">자산이 최적화되었습니다.</target>
        </trans-unit>
        <trans-unit id="2bad31d0c6e7fc07307f1bde0b4eadebf87145fb" translate="yes" xml:space="preserve">
          <source>The banner text that points to the extracted file and will be added on top of the original file. Can be &lt;code&gt;false&lt;/code&gt; (no banner), a &lt;code&gt;String&lt;/code&gt;, or a &lt;code&gt;Function&amp;lt;(string) -&amp;gt; String&amp;gt;&lt;/code&gt; that will be called with the filename where extracted comments have been stored. Will be wrapped into comment.</source>
          <target state="translated">추출 된 파일을 가리키고 원본 파일 위에 추가 될 배너 텍스트입니다. 할 수 &lt;code&gt;false&lt;/code&gt; (NO 배너)하는 &lt;code&gt;String&lt;/code&gt; , 또는 &lt;code&gt;Function&amp;lt;(string) -&amp;gt; String&amp;gt;&lt;/code&gt; 추출 된 의견이 저장되어있는 파일 이름으로 호출됩니다. 댓글로 포장됩니다.</target>
        </trans-unit>
        <trans-unit id="1f097a937bb4ef262288a8da73a495320626168c" translate="yes" xml:space="preserve">
          <source>The banner text that points to the extracted file and will be added on top of the original file. Can be &lt;code&gt;false&lt;/code&gt; (no banner), a &lt;code&gt;{String}&lt;/code&gt;, or a &lt;code&gt;{Function&amp;lt;(string) -&amp;gt; {String}&lt;/code&gt; that will be called with the filename where extracted comments have been stored. Will be wrapped into comment</source>
          <target state="translated">추출 된 파일을 가리키고 원본 파일 위에 추가 될 배너 텍스트입니다. 할 수 &lt;code&gt;false&lt;/code&gt; (NO 배너)하는 &lt;code&gt;{String}&lt;/code&gt; 또는 &lt;code&gt;{Function&amp;lt;(string) -&amp;gt; {String}&lt;/code&gt; 추출 된 의견이 저장되어있는 파일 이름으로 호출됩니다. 댓글로 포장됩니다</target>
        </trans-unit>
        <trans-unit id="ea0c3fb19eeb0a5ca2d5f787f8510cd22467c43d" translate="yes" xml:space="preserve">
          <source>The base directory, an &lt;strong&gt;absolute path&lt;/strong&gt;, for resolving entry points and loaders from configuration.</source>
          <target state="translated">구성에서 진입 점 및 로더를 해석하기위한 기본 &lt;strong&gt;경로&lt;/strong&gt; 인 &lt;strong&gt;절대 경로&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="dade99eb4c9c3fd9dd88d5f0ba2df781c3d633a2" translate="yes" xml:space="preserve">
          <source>The basename of the file/resource.</source>
          <target state="translated">파일 / 리소스의 기본 이름입니다.</target>
        </trans-unit>
        <trans-unit id="d328278dab4c04b62fd3bf91761c4b0d051ef9fa" translate="yes" xml:space="preserve">
          <source>The basic project structure may look like this:</source>
          <target state="translated">기본 프로젝트 구조는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="829bc837727bbafc63b76aeeb9da90175a1667ce" translate="yes" xml:space="preserve">
          <source>The browser provides a &lt;code&gt;console&lt;/code&gt; object with a very similar interface to the Node.js &lt;code&gt;console&lt;/code&gt;, so a polyfill is generally not needed.</source>
          <target state="translated">브라우저는 Node.js &lt;code&gt;console&lt;/code&gt; 과 매우 유사한 인터페이스를 가진 &lt;code&gt;console&lt;/code&gt; 객체를 제공 하므로 일반적으로 폴리 필이 필요하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="aa3f5c75700c8ef9230b4071d77253ca4fd0187a" translate="yes" xml:space="preserve">
          <source>The bundle can be included as part of a script tag, and the bundle can be invoked like so:</source>
          <target state="translated">번들은 스크립트 태그의 일부로 포함될 수 있으며 다음과 같이 번들을 호출 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ba7f6b7207278a6abb170c11f3d09b65779ebeaa" translate="yes" xml:space="preserve">
          <source>The bundle will also be available as &lt;code&gt;http://localhost:8080/assets/bundle.js&lt;/code&gt;.</source>
          <target state="translated">번들은 &lt;code&gt;http://localhost:8080/assets/bundle.js&lt;/code&gt; 로도 제공 됩니다.</target>
        </trans-unit>
        <trans-unit id="217dc2584c0fb5dc2dc7d41450dd433af073e169" translate="yes" xml:space="preserve">
          <source>The bundle will now be available as &lt;code&gt;http://localhost:8080/assets/bundle.js&lt;/code&gt;.</source>
          <target state="translated">번들은 이제 &lt;code&gt;http://localhost:8080/assets/bundle.js&lt;/code&gt; 로 사용 가능 합니다.</target>
        </trans-unit>
        <trans-unit id="117b01d486ab05dc2a1b9418e5da87dc9698edff" translate="yes" xml:space="preserve">
          <source>The bundle with external dependencies can be used in various module contexts, such as &lt;a href=&quot;../concepts/modules&quot;&gt;CommonJS, AMD, global and ES2015 modules&lt;/a&gt;. The external library may be available in any of these forms:</source>
          <target state="translated">외부 종속성이있는 번들은 &lt;a href=&quot;../concepts/modules&quot;&gt;CommonJS, AMD, 글로벌 및 ES2015 모듈과&lt;/a&gt; 같은 다양한 모듈 컨텍스트에서 사용될 수 있습니다 . 외부 라이브러리는 다음 형식 중 하나로 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d8ac10f7b894229890ea38ddef1c239a04440579" translate="yes" xml:space="preserve">
          <source>The bundled files will be available in the browser under this path.</source>
          <target state="translated">번들 파일은이 경로 아래의 브라우저에서 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5b301ff5f26e6e3457e880e7aa52e034b6cdffe9" translate="yes" xml:space="preserve">
          <source>The chunk assets have been optimized.</source>
          <target state="translated">청크 자산이 최적화되었습니다.</target>
        </trans-unit>
        <trans-unit id="f12d781d5ccfce31d9164c466ca027e17c249776" translate="yes" xml:space="preserve">
          <source>The chunk is requested, when you require the bundle.</source>
          <target state="translated">번들이 필요할 때 청크가 요청됩니다.</target>
        </trans-unit>
        <trans-unit id="34a6deff48e1d6a0c1e725fa06e2ce2bc0d257ae" translate="yes" xml:space="preserve">
          <source>The command to start webpack-dev-server can then be changed to this:</source>
          <target state="translated">그런 다음 webpack-dev-server를 시작하는 명령을 다음과 같이 변경할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3789f3b9960fd99acb1e00a2ccf2ffd85b4a7fd4" translate="yes" xml:space="preserve">
          <source>The compiler ensures that module IDs and chunk IDs are consistent between these builds. It typically stores these IDs in memory (e.g. with &lt;a href=&quot;../configuration/dev-server&quot;&gt;webpack-dev-server&lt;/a&gt;), but it's also possible to store them in a JSON file.</source>
          <target state="translated">컴파일러는 이러한 빌드간에 모듈 ID와 청크 ID가 일관되도록합니다. 일반적으로 이러한 ID를 메모리에 저장하지만 (예 : &lt;a href=&quot;../configuration/dev-server&quot;&gt;webpack-dev-server 사용&lt;/a&gt; ) JSON 파일에 저장할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="a788f2ca0f3e40c85c64806e9b2de8d22c971d5e" translate="yes" xml:space="preserve">
          <source>The configuration above has defined a &lt;code&gt;rules&lt;/code&gt; property for a single module with two required properties: &lt;code&gt;test&lt;/code&gt; and &lt;code&gt;use&lt;/code&gt;. This tells webpack's compiler the following:</source>
          <target state="translated">위의 구성은 두 개의 필수 특성 ( &lt;code&gt;test&lt;/code&gt; 및 &lt;code&gt;use&lt;/code&gt; )이 있는 단일 모듈 의 &lt;code&gt;rules&lt;/code&gt; 특성을 정의했습니다 . 이것은 webpack의 컴파일러에게 다음을 알려줍니다.</target>
        </trans-unit>
        <trans-unit id="a9919e757b665eea3b236fa8b39ebf3977dac665" translate="yes" xml:space="preserve">
          <source>The configuration is the same, switch out &lt;code&gt;sass-loader&lt;/code&gt; for &lt;code&gt;less-loader&lt;/code&gt; when necessary.</source>
          <target state="translated">구성은 동일 합니다. 필요할 때 &lt;code&gt;less-loader&lt;/code&gt; &lt;code&gt;sass-loader&lt;/code&gt; 위해 sass-loader 를 끄십시오 .</target>
        </trans-unit>
        <trans-unit id="7f4253f2f740bbba896793645215e3f4e3bbd342" translate="yes" xml:space="preserve">
          <source>The consumer also can use the library by loading it via a script tag:</source>
          <target state="translated">소비자는 스크립트 태그를 통해 라이브러리를로드하여 라이브러리를 사용할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="2364eb772d89ad06b53d703338f09b71a5aff0a6" translate="yes" xml:space="preserve">
          <source>The content of the dll is accessible under a module prefix. i.e. with &lt;code&gt;scope = &quot;xyz&quot;&lt;/code&gt; a file &lt;code&gt;abc&lt;/code&gt; in the dll can be access via &lt;code&gt;require(&quot;xyz/abc&quot;)&lt;/code&gt;.</source>
          <target state="translated">dll의 내용은 모듈 접두사로 액세스 할 수 있습니다. 즉, &lt;code&gt;scope = &quot;xyz&quot;&lt;/code&gt; 경우 dll의 &lt;code&gt;abc&lt;/code&gt; 파일 &lt;code&gt;require(&quot;xyz/abc&quot;)&lt;/code&gt; 를 통해 액세스 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="11ae20ea60d038bb99e3a1098b149daca67d4310" translate="yes" xml:space="preserve">
          <source>The content of the dll is mapped to the current directory. If a required file matches a file in the dll (after resolving), then the file from the dll is used instead.</source>
          <target state="translated">dll의 내용은 현재 디렉토리에 매핑됩니다. 필요한 파일이 dll의 파일과 일치하면 (해결 후) dll의 파일이 대신 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="708e4611472f279bbeba23fd301b7b262d8b3c33" translate="yes" xml:space="preserve">
          <source>The context module also contains some runtime logic to access the map.</source>
          <target state="translated">컨텍스트 모듈에는 맵에 액세스하기위한 런타임 로직도 포함되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="3bb6021b3aba746e4cb4d8440fb0a5fe485718c3" translate="yes" xml:space="preserve">
          <source>The coolest part of everything mentioned above, is that loading assets this way allows you to group modules and assets together in a more intuitive way. Instead of relying on a global &lt;code&gt;/assets&lt;/code&gt; directory that contains everything, you can group assets with the code that uses them. For example, a structure like this can be very useful:</source>
          <target state="translated">위에서 언급 한 모든 것의 가장 멋진 부분은이 방법으로 자산을로드하면 모듈과 자산을보다 직관적 인 방식으로 그룹화 할 수 있다는 것입니다. 모든 것을 포함 하는 전역 &lt;code&gt;/assets&lt;/code&gt; 디렉토리 에 의존하는 대신 자산을 사용하는 코드로 자산을 그룹화 할 수 있습니다. 예를 들어, 이와 같은 구조는 매우 유용 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f3e4f99776cfd10bf043a53e3dc62767ec7acb98" translate="yes" xml:space="preserve">
          <source>The default value is an empty string &lt;code&gt;&quot;&quot;&lt;/code&gt;.</source>
          <target state="translated">기본값은 빈 문자열 &lt;code&gt;&quot;&quot;&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="a0f3744670086d967a82bcb9b8b24e02fa908f0e" translate="yes" xml:space="preserve">
          <source>The dependencies for your library will be defined by the &lt;a href=&quot;externals&quot;&gt;&lt;code&gt;externals&lt;/code&gt;&lt;/a&gt; config.</source>
          <target state="translated">라이브러리의 종속성은 &lt;a href=&quot;externals&quot;&gt; &lt;code&gt;externals&lt;/code&gt; &lt;/a&gt; 구성에 의해 정의됩니다 .</target>
        </trans-unit>
        <trans-unit id="e550230c9fc8a5a10bf3c0c43fb181c596afa9bd" translate="yes" xml:space="preserve">
          <source>The dependency module can be from the application code or a third party library. The resolver helps webpack find the module code that needs to be included in the bundle for every such &lt;code&gt;require&lt;/code&gt;/&lt;code&gt;import&lt;/code&gt; statement. webpack uses &lt;a href=&quot;https://github.com/webpack/enhanced-resolve&quot;&gt;enhanced-resolve&lt;/a&gt; to resolve file paths while bundling modules.</source>
          <target state="translated">종속성 모듈은 응용 프로그램 코드 또는 타사 라이브러리에서 제공 될 수 있습니다. 리졸버는 웹팩이 그러한 &lt;code&gt;require&lt;/code&gt; / &lt;code&gt;import&lt;/code&gt; 문 마다 번들에 포함되어야하는 모듈 코드를 찾도록 도와줍니다 . webpack은 &lt;a href=&quot;https://github.com/webpack/enhanced-resolve&quot;&gt;확장&lt;/a&gt; 번들을 사용하여 모듈을 번들링하는 동안 파일 경로를 확인합니다.</target>
        </trans-unit>
        <trans-unit id="8d540fc23da7657e0a52f955d13989f2f80069e5" translate="yes" xml:space="preserve">
          <source>The deprecated webpack 1 constructor &lt;code&gt;new webpack.optimize.CommonsChunkPlugin(options, filenameTemplate, selectedChunks, minChunks)&lt;/code&gt; is no longer supported. Use a corresponding options object instead.</source>
          <target state="translated">더 이상 사용되지 않는 webpack 1 생성자 인 &lt;code&gt;new webpack.optimize.CommonsChunkPlugin(options, filenameTemplate, selectedChunks, minChunks)&lt;/code&gt; 은 더 이상 지원되지 않습니다. 대신 해당 옵션 개체를 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="72453a9bde8a4946f5cce2f9940ffc13f8a61a43" translate="yes" xml:space="preserve">
          <source>The dev-server makes use of the powerful &lt;a href=&quot;https://github.com/chimurai/http-proxy-middleware&quot;&gt;http-proxy-middleware&lt;/a&gt; package. Checkout its &lt;a href=&quot;https://github.com/chimurai/http-proxy-middleware#options&quot;&gt;documentation&lt;/a&gt; for more advanced usages.</source>
          <target state="translated">dev-server는 강력한 &lt;a href=&quot;https://github.com/chimurai/http-proxy-middleware&quot;&gt;http-proxy-middleware&lt;/a&gt; 패키지를 사용합니다. 그 체크 아웃 &lt;a href=&quot;https://github.com/chimurai/http-proxy-middleware#options&quot;&gt;문서를&lt;/a&gt; 고급 용도로.</target>
        </trans-unit>
        <trans-unit id="6c18a4469d6bbf0544a03a7f1589a9b97bc3e787" translate="yes" xml:space="preserve">
          <source>The enabled rules for minimizing by default are the following ones:</source>
          <target state="translated">기본적으로 최소화하기 위해 활성화 된 규칙은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="bd76b56f90cc7ad0a0f72461fe52bce7d07a8517" translate="yes" xml:space="preserve">
          <source>The encoding to use when generating the hash, defaults to &lt;code&gt;'hex'&lt;/code&gt;. All encodings from Node.JS' &lt;a href=&quot;https://nodejs.org/api/crypto.html#crypto_hash_digest_encoding&quot;&gt;&lt;code&gt;hash.digest&lt;/code&gt;&lt;/a&gt; are supported. Using &lt;code&gt;'base64'&lt;/code&gt; for filenames might be problematic since it has the character &lt;code&gt;/&lt;/code&gt; in its alphabet. Likewise &lt;code&gt;'latin1'&lt;/code&gt; could contain any character.</source>
          <target state="translated">해시를 생성 할 때 사용할 인코딩은 기본적으로 &lt;code&gt;'hex'&lt;/code&gt; 입니다. Node.JS의 &lt;a href=&quot;https://nodejs.org/api/crypto.html#crypto_hash_digest_encoding&quot;&gt; &lt;code&gt;hash.digest&lt;/code&gt; 의&lt;/a&gt; 모든 인코딩 이 지원됩니다. 파일 이름에 &lt;code&gt;'base64'&lt;/code&gt; 를 사용하면 알파벳 문자 &lt;code&gt;/&lt;/code&gt; 가 있으므로 문제가 될 수 있습니다 . 마찬가지로 &lt;code&gt;'latin1'&lt;/code&gt; 은 모든 문자를 포함 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b02a1c64523524bd6887bba721827df362037305" translate="yes" xml:space="preserve">
          <source>The entries chunks are decorated to form a library &lt;code&gt;name&lt;/code&gt; of type &lt;code&gt;type&lt;/code&gt;.</source>
          <target state="translated">항목 청크는 type &lt;code&gt;type&lt;/code&gt; 의 라이브러리 &lt;code&gt;name&lt;/code&gt; 을 형성하도록 장식되어 있습니다 .</target>
        </trans-unit>
        <trans-unit id="f6cf3d762c8a748dfe2b4b1ed7cec7a292cb77cb" translate="yes" xml:space="preserve">
          <source>The entry object is where webpack looks to start building the bundle. The context is an absolute string to the directory that contains the entry files.</source>
          <target state="translated">entry 객체는 webpack이 번들 빌드를 시작하는 곳입니다. 컨텍스트는 항목 파일이 포함 된 디렉토리의 절대 문자열입니다.</target>
        </trans-unit>
        <trans-unit id="0607d4a03e47e5ea4019d6170f114d90e541894a" translate="yes" xml:space="preserve">
          <source>The example above will create a &lt;code&gt;lib.js&lt;/code&gt; and &lt;code&gt;lib.node.js&lt;/code&gt; file in your &lt;code&gt;dist&lt;/code&gt; folder.</source>
          <target state="translated">위 예제는 &lt;code&gt;dist&lt;/code&gt; 폴더 에 &lt;code&gt;lib.js&lt;/code&gt; 및 &lt;code&gt;lib.node.js&lt;/code&gt; 파일을 만듭니다 .</target>
        </trans-unit>
        <trans-unit id="550fb5db8af67f8ea949e6d036a7d750562bb809" translate="yes" xml:space="preserve">
          <source>The example above will only give you performance hints based on &lt;code&gt;.js&lt;/code&gt; files.</source>
          <target state="translated">위의 예는 &lt;code&gt;.js&lt;/code&gt; 파일을 기반으로 한 성능 힌트 만 제공 합니다.</target>
        </trans-unit>
        <trans-unit id="8cd99ede41e0d24db8a2e291b6738350a5b14058" translate="yes" xml:space="preserve">
          <source>The examples in this guide stem from &lt;a href=&quot;getting-started&quot;&gt;getting started&lt;/a&gt;, &lt;a href=&quot;output-management&quot;&gt;output management&lt;/a&gt; and &lt;a href=&quot;code-splitting&quot;&gt;code splitting&lt;/a&gt;.</source>
          <target state="translated">이 안내서의 예제는 &lt;a href=&quot;getting-started&quot;&gt;시작&lt;/a&gt; , &lt;a href=&quot;output-management&quot;&gt;출력 관리&lt;/a&gt; 및 &lt;a href=&quot;code-splitting&quot;&gt;코드 분할&lt;/a&gt; 에서 비롯됩니다 .</target>
        </trans-unit>
        <trans-unit id="2e118d1734b9ca216adaa508bfc0d9a7da7241a5" translate="yes" xml:space="preserve">
          <source>The exported function has 3 properties: &lt;code&gt;resolve&lt;/code&gt;, &lt;code&gt;keys&lt;/code&gt;, &lt;code&gt;id&lt;/code&gt;.</source>
          <target state="translated">내 보낸 함수에는 &lt;code&gt;resolve&lt;/code&gt; , &lt;code&gt;keys&lt;/code&gt; , &lt;code&gt;id&lt;/code&gt; 의 3 가지 속성이 있습니다.</target>
        </trans-unit>
        <trans-unit id="389b350eb8413c4a925b5a6a40afccde32eca5c0" translate="yes" xml:space="preserve">
          <source>The extensions/suffixes which that are used when resolving loaders. Since version two, we &lt;a href=&quot;../guides/migrating#automatic-loader-module-name-extension-removed&quot;&gt;strongly recommend&lt;/a&gt; using the full name, e.g. &lt;code&gt;example-loader&lt;/code&gt;, as much as possible for clarity. However, if you really wanted to exclude the &lt;code&gt;-loader&lt;/code&gt; bit, i.e. just use &lt;code&gt;example&lt;/code&gt;, you can use this option to do so:</source>
          <target state="translated">로더를 해석 할 때 사용되는 확장 / 접미사. 버전 2부터는 명확성을 위해 전체 이름 (예 : &lt;code&gt;example-loader&lt;/code&gt; )을 사용하는 &lt;a href=&quot;../guides/migrating#automatic-loader-module-name-extension-removed&quot;&gt;것이 좋습니다&lt;/a&gt; . 그러나 &lt;code&gt;-loader&lt;/code&gt; 비트 를 제외하고 싶다면 , 예를 &lt;code&gt;example&lt;/code&gt; 그냥 사용하십시오.이 옵션을 사용하여 그렇게 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="794aa4e261a7c6a0554650d5905cee89cc73cfa7" translate="yes" xml:space="preserve">
          <source>The extract-loader evaluates the given source code on the fly and returns the result as string. Its main use-case is to resolve urls within HTML and CSS coming from their respective loaders. Use the &lt;a href=&quot;file-loader&quot;&gt;file-loader&lt;/a&gt; to emit the extract-loader's result as separate file.</source>
          <target state="translated">추출 로더는 주어진 소스 코드를 즉시 평가하고 결과를 문자열로 리턴합니다. 주요 사용 사례는 해당 로더에서 오는 HTML 및 CSS 내의 URL을 확인하는 것입니다. &lt;a href=&quot;file-loader&quot;&gt;파일 로더&lt;/a&gt; 를 사용하여 추출 로더의 결과를 별도의 파일로 내보내십시오.</target>
        </trans-unit>
        <trans-unit id="453084e89f5428bcc7e5ed45107b51b910c05098" translate="yes" xml:space="preserve">
          <source>The extract-loader works similar to the &lt;a href=&quot;../plugins/extract-text-webpack-plugin&quot;&gt;extract-text-webpack-plugin&lt;/a&gt; and is meant as a lean alternative to it. When evaluating the source code, it provides a fake context which was especially designed to cope with the code generated by the &lt;a href=&quot;html-loader&quot;&gt;html-&lt;/a&gt; or the &lt;a href=&quot;css-loader&quot;&gt;css-loader&lt;/a&gt;. Thus it might not work in other situations.</source>
          <target state="translated">추출 로더는 &lt;a href=&quot;../plugins/extract-text-webpack-plugin&quot;&gt;extract-text-webpack-plugin&lt;/a&gt; 과 유사하게 작동 하며 이에 대한 대체 대안으로 사용됩니다. 소스 코드를 평가할 때 &lt;a href=&quot;html-loader&quot;&gt;html-&lt;/a&gt; 또는 &lt;a href=&quot;css-loader&quot;&gt;css-loader에&lt;/a&gt; 의해 생성 된 코드를 처리하도록 특별히 설계된 가짜 컨텍스트를 제공합니다 . 따라서 다른 상황에서는 작동하지 않을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="16d5d63de6fda830696b84c6adce09e4cc8d99c4" translate="yes" xml:space="preserve">
          <source>The fallback loader will receive the same configuration options as url-loader.</source>
          <target state="translated">대체 로더에는 url-loader와 동일한 구성 옵션이 제공됩니다.</target>
        </trans-unit>
        <trans-unit id="24a12e3645cc54e3f1d24478d16f98c7ce1b82c6" translate="yes" xml:space="preserve">
          <source>The file extension is then resolved in a similar way using the &lt;code&gt;resolve.extensions&lt;/code&gt; option.</source>
          <target state="translated">그런 다음 &lt;code&gt;resolve.extensions&lt;/code&gt; 옵션을 사용하여 유사한 방식으로 파일 확장자를 분석 합니다.</target>
        </trans-unit>
        <trans-unit id="19c2603ed5d45d2ba7f1dcca02a02345da1c6750" translate="yes" xml:space="preserve">
          <source>The file extension of the target file/resource.</source>
          <target state="translated">대상 파일 / 리소스의 파일 확장자입니다.</target>
        </trans-unit>
        <trans-unit id="8117b59c7f4e6ea23fdb3229936a65a8a033880e" translate="yes" xml:space="preserve">
          <source>The file is requested when you require the &lt;code&gt;bundle-loader&lt;/code&gt;. If you want it to request it lazy, use:</source>
          <target state="translated">파일은 &lt;code&gt;bundle-loader&lt;/code&gt; 가 필요할 때 요청됩니다 . 지연을 요청하려면 다음을 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="66e51225d686d671805bbc321a2ba8d33de15225" translate="yes" xml:space="preserve">
          <source>The file where the extracted comments will be stored. Can be either a &lt;code&gt;{String}&lt;/code&gt; or a &lt;code&gt;{Function&amp;lt;(string) -&amp;gt; {String}&amp;gt;}&lt;/code&gt;, which will be given the original filename. Default is to append the suffix &lt;code&gt;.LICENSE&lt;/code&gt; to the original filename</source>
          <target state="translated">추출 된 주석이 저장 될 파일입니다. 될 수 중 하나 &lt;code&gt;{String}&lt;/code&gt; 또는 &lt;code&gt;{Function&amp;lt;(string) -&amp;gt; {String}&amp;gt;}&lt;/code&gt; , 원래의 파일 이름을 부여 할 것이다. 기본값은 접미사 &lt;code&gt;.LICENSE&lt;/code&gt; 를 원래 파일 이름 에 추가하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="5c0ad8e4b7dc560580c3d7f3e7a9b350ee96549f" translate="yes" xml:space="preserve">
          <source>The file where the extracted comments will be stored. Default is to append the suffix &lt;code&gt;.LICENSE&lt;/code&gt; to the original filename.</source>
          <target state="translated">추출 된 주석이 저장 될 파일입니다. 기본값은 접미사 &lt;code&gt;.LICENSE&lt;/code&gt; 를 원래 파일 이름 에 추가하는 것 입니다.</target>
        </trans-unit>
        <trans-unit id="42691448a39272a04c7623d4ac9237529f167323" translate="yes" xml:space="preserve">
          <source>The filename that is considered the index file.</source>
          <target state="translated">인덱스 파일로 간주되는 파일 이름입니다.</target>
        </trans-unit>
        <trans-unit id="9a7fe9404151c99b0fe504095a9cff5fbb57d21c" translate="yes" xml:space="preserve">
          <source>The filename to be used while resolving directories. Default:</source>
          <target state="translated">디렉토리를 분석 할 때 사용할 파일 이름입니다. 기본:</target>
        </trans-unit>
        <trans-unit id="1adb1b5390fbdfac478c72a15607cdb2748376e0" translate="yes" xml:space="preserve">
          <source>The first and last are expected -- it's the &lt;code&gt;vendor&lt;/code&gt; hash we want to fix. Luckily, there are two plugins we can use to resolve this issue. The first is the &lt;code&gt;NamedModulesPlugin&lt;/code&gt;, which will use the path to the module rather than a numerical identifier. While this plugin is useful during development for more readable output, it does take a bit longer to run. The second option is the &lt;a href=&quot;../plugins/hashed-module-ids-plugin&quot;&gt;&lt;code&gt;HashedModuleIdsPlugin&lt;/code&gt;&lt;/a&gt;, which is recommended for production builds:</source>
          <target state="translated">첫 번째와 마지막이 예상 됩니다. 수정하려는 &lt;code&gt;vendor&lt;/code&gt; 해시입니다. 다행히이 문제를 해결하는 데 사용할 수있는 두 가지 플러그인이 있습니다. 첫 번째는 &lt;code&gt;NamedModulesPlugin&lt;/code&gt; 이며, 숫자 식별자 대신 모듈의 경로를 사용합니다. 이 플러그인은 개발 중에 더 읽기 쉬운 출력을 위해 유용하지만 실행하는 데 시간이 조금 더 걸립니다. 두 번째 옵션은 &lt;a href=&quot;../plugins/hashed-module-ids-plugin&quot;&gt; &lt;code&gt;HashedModuleIdsPlugin&lt;/code&gt; &lt;/a&gt; 이며 프로덕션 빌드에 권장됩니다.</target>
        </trans-unit>
        <trans-unit id="285df81918288a75eff9819c28e80e90c6e6647c" translate="yes" xml:space="preserve">
          <source>The first argument must be an &lt;code&gt;Error&lt;/code&gt; or &lt;code&gt;null&lt;/code&gt;</source>
          <target state="translated">첫 번째 인수는 &lt;code&gt;Error&lt;/code&gt; 또는 &lt;code&gt;null&lt;/code&gt; 이어야합니다</target>
        </trans-unit>
        <trans-unit id="5d624090a9474a6049647db4976a8af625747830" translate="yes" xml:space="preserve">
          <source>The first loader is passed one argument: the content of the resource file. The compiler expects a result from the last loader. The result should be a &lt;code&gt;String&lt;/code&gt; or a &lt;code&gt;Buffer&lt;/code&gt; (which is converted to a string), representing the JavaScript source code of the module. An optional SourceMap result (as JSON object) may also be passed.</source>
          <target state="translated">첫 번째 로더에는 하나의 인수, 즉 리소스 파일의 내용이 전달됩니다. 컴파일러는 마지막 로더의 결과를 기대합니다. 결과는 모듈의 JavaScript 소스 코드를 나타내는 &lt;code&gt;String&lt;/code&gt; 또는 &lt;code&gt;Buffer&lt;/code&gt; (문자열로 변환 됨) 여야합니다 . 선택적 SourceMap 결과 (JSON 객체)도 전달 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="526e4cbb061a7ecff58a71d4a1abe32510b836e6" translate="yes" xml:space="preserve">
          <source>The first of these two points is definitely an issue for our example, as &lt;code&gt;lodash&lt;/code&gt; is also imported within &lt;code&gt;./src/index.js&lt;/code&gt; and will thus be duplicated in both bundles. Let's remove this duplication by using the &lt;code&gt;SplitChunks&lt;/code&gt; plugin.</source>
          <target state="translated">&lt;code&gt;lodash&lt;/code&gt; 도 &lt;code&gt;./src/index.js&lt;/code&gt; 내에서 가져 와서 두 번들에 복제 되므로이 두 점 중 첫 번째 점은이 예에서 분명히 문제 가됩니다. &lt;code&gt;SplitChunks&lt;/code&gt; 플러그인 을 사용하여이 중복을 제거합시다 .</target>
        </trans-unit>
        <trans-unit id="7d9234d6eea4d64eafd089788ed4bb6c494468bd" translate="yes" xml:space="preserve">
          <source>The first parameter of the tap method of the compiler hook should be a camelized version of the plugin name. It is advisable to use a constant for this so it can be reused in all hooks.</source>
          <target state="translated">컴파일러 후크의 탭 메소드의 첫 번째 매개 변수는 플러그인 이름의 낙타 버전이어야합니다. 모든 후크에서 재사용 할 수 있도록 상수를 사용하는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="4ef7ab2fdbe131166ce0f45896431e42dc48f933" translate="yes" xml:space="preserve">
          <source>The following &lt;code&gt;webpack.config.js&lt;/code&gt; can load CSS files, embed small PNG/JPG/GIF/SVG images as well as fonts as &lt;a href=&quot;https://tools.ietf.org/html/rfc2397&quot;&gt;Data URLs&lt;/a&gt; and copy larger files to the output directory.</source>
          <target state="translated">다음 &lt;code&gt;webpack.config.js&lt;/code&gt; 는 CSS 파일을로드하고 작은 PNG / JPG / GIF / SVG 이미지와 글꼴을 &lt;a href=&quot;https://tools.ietf.org/html/rfc2397&quot;&gt;데이터 URL로 포함&lt;/a&gt; 하고 더 큰 파일을 출력 디렉토리에 복사 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e09c768c657b45613fcdaaddfbfe084cc9e39dd6" translate="yes" xml:space="preserve">
          <source>The following NPM installation will make &lt;code&gt;webpack&lt;/code&gt; available globally:</source>
          <target state="translated">다음 NPM 설치는 &lt;code&gt;webpack&lt;/code&gt; 전 세계적으로 사용할 수있게합니다.</target>
        </trans-unit>
        <trans-unit id="e57f2c4591b00f570d0a42bac7dba6e81f6332bc" translate="yes" xml:space="preserve">
          <source>The following approach will not work either:</source>
          <target state="translated">다음 방법도 작동하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="3a2f57e1f4b8865d88e8bbdcf153e1450567e0da" translate="yes" xml:space="preserve">
          <source>The following article will walk through both of these use cases.</source>
          <target state="translated">다음 기사에서는 이러한 두 가지 사용 사례를 모두 설명합니다.</target>
        </trans-unit>
        <trans-unit id="678973c41a6b79f5b722e9b40c1f281d633c89b0" translate="yes" xml:space="preserve">
          <source>The following best practices should help whether or not you are in &lt;a href=&quot;development&quot;&gt;development&lt;/a&gt; or building for &lt;a href=&quot;production&quot;&gt;production&lt;/a&gt;.</source>
          <target state="translated">다음 모범 사례는 &lt;a href=&quot;development&quot;&gt;개발&lt;/a&gt; 또는 &lt;a href=&quot;production&quot;&gt;프로덕션&lt;/a&gt; 용 건물 인지 여부에 도움이됩니다 .</target>
        </trans-unit>
        <trans-unit id="bd3d71fbc90b4965eee8e8c2d91c6a81f72260f9" translate="yes" xml:space="preserve">
          <source>The following code would exclude source maps for any modules in the &lt;code&gt;vendor.js&lt;/code&gt; bundle:</source>
          <target state="translated">다음 코드는 &lt;code&gt;vendor.js&lt;/code&gt; 번들의 모든 모듈에 대한 소스 맵을 제외 합니다.</target>
        </trans-unit>
        <trans-unit id="8709f36c191d4f117275510a4bc1f38092fe4b33" translate="yes" xml:space="preserve">
          <source>The following configuration disables automatic per-file runtime injection in babel, instead requiring &lt;code&gt;babel-plugin-transform-runtime&lt;/code&gt; and making all helper references use it.</source>
          <target state="translated">다음 구성은 babel에서 파일 당 자동 런타임 주입을 비활성화하고 대신 &lt;code&gt;babel-plugin-transform-runtime&lt;/code&gt; 을 필요로하고 모든 도우미 참조가이를 사용하도록합니다.</target>
        </trans-unit>
        <trans-unit id="8fe90b1288f44498fb756129bc5a0a2af786bb67" translate="yes" xml:space="preserve">
          <source>The following configurations are supported:</source>
          <target state="translated">다음 구성이 지원됩니다.</target>
        </trans-unit>
        <trans-unit id="b13725a6ae447ef21a0afad19188e76009a3e8cf" translate="yes" xml:space="preserve">
          <source>The following examples below describe how webpack's configuration object can be both expressive and configurable because &lt;em&gt;it is code&lt;/em&gt;:</source>
          <target state="translated">아래의 예제는 웹팩의 구성 객체 &lt;em&gt;가 코드&lt;/em&gt; 이기 때문에 표현적이고 구성 가능한 방법을 설명합니다 .</target>
        </trans-unit>
        <trans-unit id="d845fb6e558a229ab97eb2a6aba515891d721d5b" translate="yes" xml:space="preserve">
          <source>The following examples demonstrate a few ways this plugin can be used.</source>
          <target state="translated">다음 예제는이 플러그인을 사용할 수있는 몇 가지 방법을 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="26f4af435cad2a96ac6af4b806fbcad458532c0d" translate="yes" xml:space="preserve">
          <source>The following examples demonstrate some common use cases for this plugin.</source>
          <target state="translated">다음 예제는이 플러그인의 일반적인 사용 사례를 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="1849f61df45d0162d9079faaf0c67c7edbd85004" translate="yes" xml:space="preserve">
          <source>The following examples show how one might use &lt;code&gt;file-loader&lt;/code&gt; and what the result would be.</source>
          <target state="translated">다음 예제는 &lt;code&gt;file-loader&lt;/code&gt; 사용하는 방법 과 결과를 보여줍니다 .</target>
        </trans-unit>
        <trans-unit id="a052f6a1445904f054ec0a6caedf2123b8ca8e0e" translate="yes" xml:space="preserve">
          <source>The following lifecycle hooks are exposed by the &lt;code&gt;compiler&lt;/code&gt; and can be accessed as such:</source>
          <target state="translated">다음 수명주기 후크는 &lt;code&gt;compiler&lt;/code&gt; 의해 노출되며 그대로 액세스 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a0b945c38650ddf7d6afcf4290fc738ecb312a93" translate="yes" xml:space="preserve">
          <source>The following lifecycle hooks are exposed by the &lt;code&gt;parser&lt;/code&gt; and can be accessed as such:</source>
          <target state="translated">다음 수명주기 후크는 &lt;code&gt;parser&lt;/code&gt; 의해 노출되며 그대로 액세스 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d72a562a0b2950b13a0175ee7b8eb0439c9a57b5" translate="yes" xml:space="preserve">
          <source>The following methods are supported...</source>
          <target state="translated">다음과 같은 방법이 지원됩니다 ...</target>
        </trans-unit>
        <trans-unit id="e4d77afab2cb5c0e79177397fed4c21c74e5e9f3" translate="yes" xml:space="preserve">
          <source>The following options are accepted:</source>
          <target state="translated">다음과 같은 옵션이 허용됩니다.</target>
        </trans-unit>
        <trans-unit id="c50a926ca6ac44ce44b0b0c4408cf022677665b6" translate="yes" xml:space="preserve">
          <source>The following options are ideal for development:</source>
          <target state="translated">다음 옵션은 개발에 이상적입니다.</target>
        </trans-unit>
        <trans-unit id="d84d03f469cd5c6bd18b7e42fd7802b60d6ad892" translate="yes" xml:space="preserve">
          <source>The following options are not ideal for development nor production. They are needed for some special cases, i. e. for some 3rd party tools.</source>
          <target state="translated">다음 옵션은 개발이나 생산에 적합하지 않습니다. 특수한 경우, 즉 일부 타사 도구에 필요합니다.</target>
        </trans-unit>
        <trans-unit id="3ab6a9f1a0bbaef19cacfbc5c31136467bf2e22d" translate="yes" xml:space="preserve">
          <source>The following options are supported:</source>
          <target state="translated">다음과 같은 옵션이 지원됩니다.</target>
        </trans-unit>
        <trans-unit id="df764edfdfccdeb5073770c5372a6d62f6fea17c" translate="yes" xml:space="preserve">
          <source>The following parameters are supported in the order specified above:</source>
          <target state="translated">다음 매개 변수는 위에서 지정한 순서대로 지원됩니다.</target>
        </trans-unit>
        <trans-unit id="f0dd5a0b610e80f1bc7f0e825cff0c25a34dce73" translate="yes" xml:space="preserve">
          <source>The following pseudo JavaScript explains the algorithm:</source>
          <target state="translated">다음 의사 JavaScript는 알고리즘을 설명합니다.</target>
        </trans-unit>
        <trans-unit id="358a3d576958f5f1b3e7c42e523d1d2554052390" translate="yes" xml:space="preserve">
          <source>The following sections provide some basic examples of the different types of loaders. Note that the &lt;code&gt;map&lt;/code&gt; and &lt;code&gt;meta&lt;/code&gt; parameters are optional, see &lt;a href=&quot;loaders#this-callback&quot;&gt;&lt;code&gt;this.callback&lt;/code&gt;&lt;/a&gt; below.</source>
          <target state="translated">다음 섹션에서는 다양한 유형의 로더에 대한 몇 가지 기본 예를 제공합니다. 참고 것을 &lt;code&gt;map&lt;/code&gt; 및 &lt;code&gt;meta&lt;/code&gt; 매개 변수는 선택 사항을 참조 &lt;a href=&quot;loaders#this-callback&quot;&gt; &lt;code&gt;this.callback&lt;/code&gt; &lt;/a&gt; 아래.</target>
        </trans-unit>
        <trans-unit id="1c2f6bec656ab12985a3d65fbee3d5f476e86100" translate="yes" xml:space="preserve">
          <source>The following steps allow modules to be swapped in and out of an application:</source>
          <target state="translated">다음 단계를 통해 모듈을 응용 프로그램 내외부로 교환 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="eb00badcb3449f08d67086ef9131607ceef57096" translate="yes" xml:space="preserve">
          <source>The following steps are especially useful in &lt;em&gt;development&lt;/em&gt;.</source>
          <target state="translated">다음 단계는 특히 &lt;em&gt;개발에&lt;/em&gt; 유용합니다 .</target>
        </trans-unit>
        <trans-unit id="4308c488d5fc825f759c2149b59c6977cd8020af" translate="yes" xml:space="preserve">
          <source>The following steps are especially useful in &lt;em&gt;production&lt;/em&gt;.</source>
          <target state="translated">다음 단계는 특히 &lt;em&gt;생산에&lt;/em&gt; 유용합니다 .</target>
        </trans-unit>
        <trans-unit id="b7cdaed98fa9728f3dcb7fbd1bd9e9dde0fef43e" translate="yes" xml:space="preserve">
          <source>The following steps can increase the speed of resolving:</source>
          <target state="translated">다음 단계는 해결 속도를 높일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="78064ebad412dafd7f97cab0302ad0ffbb211b83" translate="yes" xml:space="preserve">
          <source>The following string values are supported via &lt;a href=&quot;https://github.com/webpack/webpack/blob/master/lib/WebpackOptionsApply.js&quot;&gt;&lt;code&gt;WebpackOptionsApply&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">다음 문자열 값은 &lt;a href=&quot;https://github.com/webpack/webpack/blob/master/lib/WebpackOptionsApply.js&quot;&gt; &lt;code&gt;WebpackOptionsApply&lt;/code&gt; &lt;/a&gt; 를 통해 지원됩니다 .</target>
        </trans-unit>
        <trans-unit id="58f9d8bd855a58eaf844f5bdd0eb9e6333c59dbe" translate="yes" xml:space="preserve">
          <source>The following string values are supported:</source>
          <target state="translated">다음 문자열 값이 지원됩니다.</target>
        </trans-unit>
        <trans-unit id="292d4638ace13f846ef8f5e4299bbc764dab8797" translate="yes" xml:space="preserve">
          <source>The following substitutions are available in template strings (via webpack's internal &lt;a href=&quot;https://github.com/webpack/webpack/blob/master/lib/ModuleFilenameHelpers.js&quot;&gt;&lt;code&gt;ModuleFilenameHelpers&lt;/code&gt;&lt;/a&gt;):</source>
          <target state="translated">다음 대체는 템플릿 문자열에서 사용할 수 있습니다 (웹팩의 내부 &lt;a href=&quot;https://github.com/webpack/webpack/blob/master/lib/ModuleFilenameHelpers.js&quot;&gt; &lt;code&gt;ModuleFilenameHelpers&lt;/code&gt; 사용&lt;/a&gt; ).</target>
        </trans-unit>
        <trans-unit id="d43ba6fd87e03b99bf4c08264e8937a094bc5a6c" translate="yes" xml:space="preserve">
          <source>The following substitutions are available in template strings (via webpack's internal &lt;a href=&quot;https://github.com/webpack/webpack/blob/master/lib/TemplatedPathPlugin.js&quot;&gt;&lt;code&gt;TemplatedPathPlugin&lt;/code&gt;&lt;/a&gt;):</source>
          <target state="translated">웹 문자열의 내부 &lt;a href=&quot;https://github.com/webpack/webpack/blob/master/lib/TemplatedPathPlugin.js&quot;&gt; &lt;code&gt;TemplatedPathPlugin&lt;/code&gt; 을&lt;/a&gt; 통해 템플리트 문자열에서 다음 대체를 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="00c83362a2351fb229e86b82b5cc384b190a6627" translate="yes" xml:space="preserve">
          <source>The following syntaxes are accepted...</source>
          <target state="translated">다음과 같은 구문이 허용됩니다 ...</target>
        </trans-unit>
        <trans-unit id="cdcae432bd2b6c399318440c9434100436e71338" translate="yes" xml:space="preserve">
          <source>The following table explains other cases:</source>
          <target state="translated">다음 표는 다른 경우에 대한 설명입니다.</target>
        </trans-unit>
        <trans-unit id="e8d6fb0b5a199393021b21ed46adcf28660dbc55" translate="yes" xml:space="preserve">
          <source>The following tools have certain problems that can degrade build performance.</source>
          <target state="translated">다음 도구에는 빌드 성능을 저하시킬 수있는 특정 문제가 있습니다.</target>
        </trans-unit>
        <trans-unit id="3b4ce38a560cabaa301d282bfce9aac7becbf9e2" translate="yes" xml:space="preserve">
          <source>The following utilities improve performance by compiling and serving assets in memory rather than writing to disk:</source>
          <target state="translated">다음 유틸리티는 디스크에 쓰지 않고 메모리에서 자산을 컴파일하고 제공하여 성능을 향상시킵니다.</target>
        </trans-unit>
        <trans-unit id="ca15d1d0d8aa11d93d6ca1a567cc9ff1370ac2c0" translate="yes" xml:space="preserve">
          <source>The function, which can return filename [string]</source>
          <target state="translated">파일 이름 [문자열]을 반환 할 수있는 함수</target>
        </trans-unit>
        <trans-unit id="59c7450e94d45d1d7509992f8d7fb34895023310" translate="yes" xml:space="preserve">
          <source>The generated output will be defined with the name &quot;MyLibrary&quot;, i.e.</source>
          <target state="translated">생성 된 출력은 &quot;MyLibrary&quot;라는 이름으로 정의됩니다.</target>
        </trans-unit>
        <trans-unit id="4ee640bb2b9cec6c071382b82b303d30815f1e04" translate="yes" xml:space="preserve">
          <source>The goal of CommonJS is to specify an ecosystem for JavaScript outside the browser. The following CommonJS methods are supported by webpack:</source>
          <target state="translated">CommonJS의 목표는 브라우저 외부에서 JavaScript를위한 에코 시스템을 지정하는 것입니다. 다음과 같은 CommonJS 메소드가 웹팩에서 지원됩니다.</target>
        </trans-unit>
        <trans-unit id="89250071811de7ae2e1e9e79e9c0f6750a60c64b" translate="yes" xml:space="preserve">
          <source>The goals of &lt;em&gt;development&lt;/em&gt; and &lt;em&gt;production&lt;/em&gt; builds differ greatly. In &lt;em&gt;development&lt;/em&gt;, we want strong source mapping and a localhost server with live reloading or hot module replacement. In &lt;em&gt;production&lt;/em&gt;, our goals shift to a focus on minified bundles, lighter weight source maps, and optimized assets to improve load time. With this logical separation at hand, we typically recommend writing &lt;strong&gt;separate webpack configurations&lt;/strong&gt; for each environment.</source>
          <target state="translated">&lt;em&gt;개발&lt;/em&gt; 및 &lt;em&gt;생산&lt;/em&gt; 빌드 의 목표는 크게 다릅니다. 에서 &lt;em&gt;개발&lt;/em&gt; , 우리는 강력한 소스 매핑 및 라이브 다시로드 또는 뜨거운 모듈 교체와 함께 로컬 호스트 서버를합니다. 에서 &lt;em&gt;생산&lt;/em&gt; , 우리의 목표는로드 시간을 개선하기 위해 축소 된 번들, 가벼운 무게 소스지도, 최적화 된 자산을 중심으로 이동. 이러한 논리적 분리가 가능 &lt;strong&gt;하므로&lt;/strong&gt; 일반적으로 각 환경에 대해 &lt;strong&gt;별도의 웹팩 구성&lt;/strong&gt; 을 작성하는 것이 좋습니다 .</target>
        </trans-unit>
        <trans-unit id="e60ad30497663537eaf49d2e92c1776638d808a4" translate="yes" xml:space="preserve">
          <source>The good news is that, while there is some overlap, task runners and bundlers can play well together if approached in the right way. This guide provides a high-level overview of how webpack can be integrated into some of the more popular task runners.</source>
          <target state="translated">좋은 소식은 겹치는 부분이 있지만 올바른 방식으로 접근하면 작업 주자와 번 들러가 함께 재생할 수 있다는 것입니다. 이 안내서는 웹팩을 널리 사용되는 일부 작업 러너에 통합하는 방법에 대한 고급 개요를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="6791ae6e37e5d1649383b3ad158ea70d586c7f09" translate="yes" xml:space="preserve">
          <source>The guides get more and more advanced as you go on. Most serve as a starting point, and once completed you should feel more comfortable diving into the actual &lt;a href=&quot;https://webpack.js.org/configuration&quot;&gt;documentation&lt;/a&gt;.</source>
          <target state="translated">진행하면서 가이드가 점점 더 고급화됩니다. 대부분은 출발점으로 사용되며, 완료되면 실제 &lt;a href=&quot;https://webpack.js.org/configuration&quot;&gt;문서&lt;/a&gt; 를보다 편안하게 다이빙 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="4ed4a6a2f4161a7511f3c084677b67ac58fdbd34" translate="yes" xml:space="preserve">
          <source>The hash of the chunk content</source>
          <target state="translated">청크 내용의 해시</target>
        </trans-unit>
        <trans-unit id="5cbf4bef2adda69cc22f1bbb6067da1d45217eae" translate="yes" xml:space="preserve">
          <source>The hash of the module identifier</source>
          <target state="translated">모듈 식별자의 해시</target>
        </trans-unit>
        <trans-unit id="0463d3a8c9f9c6747f6d1cdde4358b6206cbd3fe" translate="yes" xml:space="preserve">
          <source>The hashing algorithm to use, defaults to &lt;code&gt;'md4'&lt;/code&gt;. All functions from Node.JS' &lt;a href=&quot;https://nodejs.org/api/crypto.html#crypto_crypto_createhash_algorithm_options&quot;&gt;&lt;code&gt;crypto.createHash&lt;/code&gt;&lt;/a&gt; are supported. Since &lt;code&gt;4.0.0-alpha2&lt;/code&gt;, the &lt;code&gt;hashFunction&lt;/code&gt; can now be a constructor to a custom hash function. You can provide a non-crypto hash function for performance reasons.</source>
          <target state="translated">사용할 해시 알고리즘의 기본값은 &lt;code&gt;'md4'&lt;/code&gt; 입니다. Node.JS의 &lt;a href=&quot;https://nodejs.org/api/crypto.html#crypto_crypto_createhash_algorithm_options&quot;&gt; &lt;code&gt;crypto.createHash&lt;/code&gt; 의&lt;/a&gt; 모든 기능 이 지원됩니다. 이후 &lt;code&gt;4.0.0-alpha2&lt;/code&gt; 의 &lt;code&gt;hashFunction&lt;/code&gt; 는 이제 사용자 정의 해시 함수에 생성자가 될 수 있습니다. 성능상의 이유로 비 암호화 해시 기능을 제공 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="878c17956b8381cfc39a06c30d11d4d9bbcdeec7" translate="yes" xml:space="preserve">
          <source>The html-loader will parse the URLs, require the images and everything you expect. The extract loader will parse the javascript back into a proper html file, ensuring images are required and point to proper path, and the file loader will write the &lt;em&gt;.html&lt;/em&gt; file for you. Example:</source>
          <target state="translated">html-loader는 URL을 구문 분석하고 이미지와 필요한 모든 것을 요구합니다. 추출 로더는 자바 스크립트를 올바른 html 파일로 다시 구문 분석하여 이미지가 필요하고 올바른 경로를 가리 키도록하고 파일 로더가 &lt;em&gt;.html&lt;/em&gt; 파일을 작성합니다. 예:</target>
        </trans-unit>
        <trans-unit id="cb4462897b8bd3c12c191602b87d8b211ce96cd9" translate="yes" xml:space="preserve">
          <source>The imported &lt;code&gt;webpack&lt;/code&gt; function is fed a webpack &lt;a href=&quot;https://webpack.js.org/configuration/&quot;&gt;Configuration Object&lt;/a&gt; and runs the webpack compiler if a callback function is provided:</source>
          <target state="translated">가져온 &lt;code&gt;webpack&lt;/code&gt; 함수에는 웹팩 &lt;a href=&quot;https://webpack.js.org/configuration/&quot;&gt;구성 오브젝트&lt;/a&gt; 가 제공되며 콜백 함수가 제공되는 경우 웹팩 컴파일러를 실행합니다.</target>
        </trans-unit>
        <trans-unit id="33a4cf0e8036e462ed9b4942a05234b23e76115e" translate="yes" xml:space="preserve">
          <source>The imports loader allows you to use modules that depend on specific global variables.</source>
          <target state="translated">가져 오기 로더를 사용하면 특정 전역 변수에 의존하는 모듈을 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="7185d7d5136017864a86f672276402ec9aa6fdb6" translate="yes" xml:space="preserve">
          <source>The index in the loaders array of the current loader.</source>
          <target state="translated">현재 로더의 로더 배열에있는 인덱스입니다.</target>
        </trans-unit>
        <trans-unit id="622eb7846c820895ecfaad87d57f13ab3bfdab01" translate="yes" xml:space="preserve">
          <source>The index of a function contained within &lt;code&gt;options.transforms&lt;/code&gt; which to use to transform the target file(s).</source>
          <target state="translated">&lt;code&gt;options.transforms&lt;/code&gt; 에 포함 된 함수의 색인으로 대상 파일을 변환하는 데 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="7f184dd511af3ce37021703d7bf7ff188cfdcd35" translate="yes" xml:space="preserve">
          <source>The inner workings here are heavily inspired by &lt;a href=&quot;worker-loader&quot;&gt;worker-loader&lt;/a&gt;. It's worth a read!</source>
          <target state="translated">내부 작업은 &lt;a href=&quot;worker-loader&quot;&gt;worker-loader에서&lt;/a&gt; 큰 영향을받습니다 . 읽을 가치가 있습니다!</target>
        </trans-unit>
        <trans-unit id="43e822b9d87b538c0f6aa00d47a247647f62e872" translate="yes" xml:space="preserve">
          <source>The internal &lt;code&gt;LabeledModulesPlugin&lt;/code&gt; enables you to use the following methods for exporting and requiring within your modules:</source>
          <target state="translated">내부 &lt;code&gt;LabeledModulesPlugin&lt;/code&gt; 을 사용하면 모듈 내에서 내보내기 및 요구에 다음 방법을 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="4301641a17ae1438d40dabf59f4701492ac2fb96" translate="yes" xml:space="preserve">
          <source>The internal chunk loading function. Takes two arguments:</source>
          <target state="translated">내부 청크 로딩 기능. 두 가지 주장을 취합니다.</target>
        </trans-unit>
        <trans-unit id="3efc7bf124d5e8cb340af1ccedcabdd90e4fa1d3" translate="yes" xml:space="preserve">
          <source>The issuer: An absolute path to the file of the module which requested the resource. It's the location of the import.</source>
          <target state="translated">발급자 : 리소스를 요청한 모듈 파일의 절대 경로입니다. 가져 오기 위치입니다.</target>
        </trans-unit>
        <trans-unit id="e0f5006bb4c868b9ea27a3396647799ddfdd1706" translate="yes" xml:space="preserve">
          <source>The key &lt;code&gt;main&lt;/code&gt; refers to the &lt;a href=&quot;https://docs.npmjs.com/files/package.json#main&quot;&gt;standard from &lt;code&gt;package.json&lt;/code&gt;&lt;/a&gt;, and &lt;code&gt;module&lt;/code&gt; to &lt;a href=&quot;https://github.com/dherman/defense-of-dot-js/blob/master/proposal.md&quot;&gt;a&lt;/a&gt;&lt;a href=&quot;https://github.com/rollup/rollup/wiki/pkg.module&quot;&gt;proposal&lt;/a&gt; to allow the JavaScript ecosystem upgrade to use ES2015 modules without breaking backwards compatibility.</source>
          <target state="translated">주요 &lt;code&gt;main&lt;/code&gt; 받는 의미 &lt;a href=&quot;https://docs.npmjs.com/files/package.json#main&quot;&gt;에서 표준 &lt;code&gt;package.json&lt;/code&gt; &lt;/a&gt; 및 &lt;code&gt;module&lt;/code&gt; 에 &lt;a href=&quot;https://github.com/rollup/rollup/wiki/pkg.module&quot;&gt;제안&lt;/a&gt; 자바 스크립트 생태계가 이전 버전과의 호환성을 깨지 않고 ES2015 모듈을 사용하도록 업그레이드 할 수 있도록.&lt;a href=&quot;https://github.com/dherman/defense-of-dot-js/blob/master/proposal.md&quot;&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="e003c18060496c40fdaa02f7ca1fc43ec879fc1c" translate="yes" xml:space="preserve">
          <source>The keyword here is &lt;strong&gt;statically&lt;/strong&gt;. Normal &lt;code&gt;import&lt;/code&gt; statement cannot be used dynamically within other logic or contain variables. See the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import&quot;&gt;spec&lt;/a&gt; for more information and &lt;code&gt;import()&lt;/code&gt; below for dynamic usage.</source>
          <target state="translated">키워드는 &lt;strong&gt;정적으로&lt;/strong&gt; 입니다. 일반 &lt;code&gt;import&lt;/code&gt; 문은 다른 논리 내에서 동적으로 사용되거나 변수를 포함 할 수 없습니다. 자세한 내용은 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import&quot;&gt;사양&lt;/a&gt; 을 참조하고 동적 사용에 대해서는 아래 &lt;code&gt;import()&lt;/code&gt; 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="a9d54d05466f8e81e809ba86dee0999b728a7661" translate="yes" xml:space="preserve">
          <source>The latest webpack release is:</source>
          <target state="translated">최신 웹팩 릴리스는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="5500211f9001a63bab0626a741e206c512be6985" translate="yes" xml:space="preserve">
          <source>The lengths of &lt;code&gt;[hash]&lt;/code&gt; and &lt;code&gt;[chunkhash]&lt;/code&gt; can be specified using &lt;code&gt;[hash:16]&lt;/code&gt; (defaults to 20). Alternatively, specify &lt;a href=&quot;#output-hashdigestlength&quot;&gt;&lt;code&gt;output.hashDigestLength&lt;/code&gt;&lt;/a&gt; to configure the length globally.</source>
          <target state="translated">&lt;code&gt;[hash]&lt;/code&gt; 및 &lt;code&gt;[chunkhash]&lt;/code&gt; 의 길이는 [hash &lt;code&gt;[hash:16]&lt;/code&gt; (기본값은 20)을 사용하여 지정할 수 있습니다 . 또는 &lt;a href=&quot;#output-hashdigestlength&quot;&gt; &lt;code&gt;output.hashDigestLength&lt;/code&gt; &lt;/a&gt; 를 지정 하여 길이를 전체적으로 구성하십시오.</target>
        </trans-unit>
        <trans-unit id="75512c1d03470514d5cf05338997168251cab9bd" translate="yes" xml:space="preserve">
          <source>The limit can be specified via loader options and defaults to no limit.</source>
          <target state="translated">제한은 로더 옵션을 통해 지정할 수 있으며 기본값은 제한이 없습니다.</target>
        </trans-unit>
        <trans-unit id="02717a18cddb27586d8d91e9a2358d691d091400" translate="yes" xml:space="preserve">
          <source>The loader allows you to write mixed HTML, CSS and JavaScript Polymer elements and still use the full webpack ecosystem including module bundling and code splitting.</source>
          <target state="translated">로더를 사용하면 혼합 HTML, CSS 및 JavaScript Polymer 요소를 작성하고 모듈 번들링 및 코드 분할을 포함한 전체 웹팩 에코 시스템을 계속 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ae685df6df8c28074d878a1e547602dd9d6ae5cd" translate="yes" xml:space="preserve">
          <source>The loader context represents the properties that are available inside of a loader assigned to the &lt;code&gt;this&lt;/code&gt; property.</source>
          <target state="translated">로더의 콘텍스트는 할당 된 로더 가능한 내부에 나타내는 속성 &lt;code&gt;this&lt;/code&gt; 속성.</target>
        </trans-unit>
        <trans-unit id="607e721094d3631e0620ceb231f0a7e78b6a13d9" translate="yes" xml:space="preserve">
          <source>The loader replaces local selectors with unique identifiers. The choosen unique identifiers are exported by the module.</source>
          <target state="translated">로더는 로컬 선택기를 고유 식별자로 대체합니다. 선택한 고유 식별자는 모듈에서 내 보냅니다.</target>
        </trans-unit>
        <trans-unit id="299350ec237fdcb85e12d63661c686bb20a1954e" translate="yes" xml:space="preserve">
          <source>The loader supports all options supported by &lt;code&gt;istanbul-lib-instrument&lt;/code&gt;</source>
          <target state="translated">로더는 &lt;code&gt;istanbul-lib-instrument&lt;/code&gt; 가 지원하는 모든 옵션을 지원 합니다</target>
        </trans-unit>
        <trans-unit id="b31bd1bb8fc2430ef42ba02f03db77c3e1639cff" translate="yes" xml:space="preserve">
          <source>The loader transforms your components:</source>
          <target state="translated">로더는 컴포넌트를 변환합니다.</target>
        </trans-unit>
        <trans-unit id="1aeead07c2f08f9b8fc8d5b0f49d1e895dc026c7" translate="yes" xml:space="preserve">
          <source>The loader will only replace a &lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt; if the href is a relative path. Any link attempting to access an external link i.e. &lt;code&gt;http&lt;/code&gt;, &lt;code&gt;https&lt;/code&gt; or &lt;code&gt;//&lt;/code&gt; will not be replaced.</source>
          <target state="translated">href가 상대 경로 인 경우 로더는 &lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt; 만 대체합니다 . 외부 링크 (예 : &lt;code&gt;http&lt;/code&gt; , &lt;code&gt;https&lt;/code&gt; 또는 &lt;code&gt;//&lt;/code&gt; ) 에 액세스하려는 링크 는 대체되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="50aa09ae1377da238a1a8574aee2960a5a76e525" translate="yes" xml:space="preserve">
          <source>The manifest contains the new compilation hash and a list of all updated chunks. Each of these chunks contains the new code for all updated modules (or a flag indicating that the module was removed).</source>
          <target state="translated">매니페스트에는 새로운 컴파일 해시와 모든 업데이트 된 청크 목록이 포함되어 있습니다. 이러한 각 청크에는 업데이트 된 모든 모듈에 대한 새 코드 (또는 모듈이 제거되었음을 나타내는 플래그)가 포함되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="22f4b76b689d538d97a9f56b12c6f429c5ca6101" translate="yes" xml:space="preserve">
          <source>The manifest data can be extracted into a json file for easy consumption using the &lt;a href=&quot;https://github.com/danethurber/webpack-manifest-plugin&quot;&gt;&lt;code&gt;WebpackManifestPlugin&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/danethurber/webpack-manifest-plugin&quot;&gt; &lt;code&gt;WebpackManifestPlugin&lt;/code&gt; 을&lt;/a&gt; 사용하면 매니페스트 데이터를 json 파일로 추출하여 쉽게 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="ca8c533ca9e0eeb7b0f1a5cf47de1c99d487b8a5" translate="yes" xml:space="preserve">
          <source>The minimum requirements for the &lt;code&gt;output&lt;/code&gt; property in your webpack config is to set its value to an object including the following thing:</source>
          <target state="translated">webpack 설정에서 &lt;code&gt;output&lt;/code&gt; 속성 의 최소 ​​요구 사항 은 다음을 포함하여 값을 객체로 설정하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="f51cb967bd5a63ed817746d4a2210c7604937c57" translate="yes" xml:space="preserve">
          <source>The module &lt;a href=&quot;https://nodejs.org/api/path.html#path_path_basename_path_ext&quot;&gt;basename&lt;/a&gt;</source>
          <target state="translated">모듈 &lt;a href=&quot;https://nodejs.org/api/path.html#path_path_basename_path_ext&quot;&gt;기본 이름&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="2cf9a0f6cdd1a3915e69f0d5d77882cc041b2b99" translate="yes" xml:space="preserve">
          <source>The module also validates found configurations against webpack's options schema to ensure that the configuration is correct before webpack attempts to use it.</source>
          <target state="translated">이 모듈은 또한 웹팩이 사용하기 전에 구성이 올바른지 확인하기 위해 웹팩의 옵션 스키마에 대해 찾은 구성의 유효성을 검증합니다.</target>
        </trans-unit>
        <trans-unit id="449ce0de57d3e2a0be319a99debc55b86880760c" translate="yes" xml:space="preserve">
          <source>The module filename</source>
          <target state="translated">모듈 파일 이름</target>
        </trans-unit>
        <trans-unit id="88e0aa6c2168cb0078e139454481c7292d3e21ab" translate="yes" xml:space="preserve">
          <source>The module identifier</source>
          <target state="translated">모듈 식별자</target>
        </trans-unit>
        <trans-unit id="90462cd9df48197a4f39715938a23e7e8c5fa7a7" translate="yes" xml:space="preserve">
          <source>The module is also tested with the following compilers:</source>
          <target state="translated">이 모듈은 다음 컴파일러로도 테스트됩니다.</target>
        </trans-unit>
        <trans-unit id="1635800c659f8343bb6f76cf0577b6d8050a774a" translate="yes" xml:space="preserve">
          <source>The module name</source>
          <target state="translated">모듈 이름</target>
        </trans-unit>
        <trans-unit id="afd3b0e2f82e2ca4daf7fc9a50ca4e0078eb08f5" translate="yes" xml:space="preserve">
          <source>The module query, i.e., the string following &lt;code&gt;?&lt;/code&gt; in the filename</source>
          <target state="translated">모듈 쿼리, 즉 &lt;code&gt;?&lt;/code&gt; 파일 이름에</target>
        </trans-unit>
        <trans-unit id="af18f009cb9333df7606f5912ce79a0a55814780" translate="yes" xml:space="preserve">
          <source>The modules namespace. This is usually the library name when building as a library, empty otherwise</source>
          <target state="translated">모듈 네임 스페이스 일반적으로 라이브러리로 빌드 할 때 라이브러리 이름이며, 그렇지 않으면 비어 있습니다.</target>
        </trans-unit>
        <trans-unit id="479f4a5514e62fd84fc68ed0da97f9dd5e36b267" translate="yes" xml:space="preserve">
          <source>The moral of the story is that there are a variety of ways to &lt;code&gt;hook&lt;/code&gt; into the &lt;code&gt;compiler&lt;/code&gt;, each one allowing your plugin to run as it sees fit.</source>
          <target state="translated">이야기의 교훈은에 다양한 방법이 있다는 것입니다 &lt;code&gt;hook&lt;/code&gt; 에 &lt;code&gt;compiler&lt;/code&gt; , 각각이 적절하게 인식하는 것과 동일한 플러그인 실행을 허용.</target>
        </trans-unit>
        <trans-unit id="ff7aa3f3b92830a27310d668b1d59b019023d65e" translate="yes" xml:space="preserve">
          <source>The most important part to take away from this document is that there are many different ways to format and style your webpack configuration. The key is to stick with something consistent that you and your team can understand and maintain.</source>
          <target state="translated">이 문서에서 제거해야 할 가장 중요한 부분은 웹팩 구성을 형식화하고 스타일을 지정하는 여러 가지 방법이 있다는 것입니다. 열쇠는 당신과 당신 팀이 이해하고 유지할 수있는 일관된 것을 고수하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="d25fd948c0de18e0c4fa3e7b34e3ac980bb16168" translate="yes" xml:space="preserve">
          <source>The n-th match obtained from matching the current file name against the regExp</source>
          <target state="translated">현재 파일 이름과 regExp를 일치시켜 얻은 n 번째 일치</target>
        </trans-unit>
        <trans-unit id="b6d69ad1e3c80b8f04fd87e8a4a8826c68af723f" translate="yes" xml:space="preserve">
          <source>The name of the &lt;code&gt;browserify&lt;/code&gt; transform you wish to use.</source>
          <target state="translated">사용하려는 &lt;code&gt;browserify&lt;/code&gt; 변환 의 이름입니다 .</target>
        </trans-unit>
        <trans-unit id="304749ae004320108b2d78b3c7dc01ae50172e2e" translate="yes" xml:space="preserve">
          <source>The name of the JSONP function used for chunk loading</source>
          <target state="translated">청크로드에 사용되는 JSONP 함수의 이름</target>
        </trans-unit>
        <trans-unit id="bd981b17d1b1d68795c45fcc3ef348cad98e993a" translate="yes" xml:space="preserve">
          <source>The name of the split chunk. Providing &lt;code&gt;true&lt;/code&gt; will automatically generate a name based on chunks and cache group key. Providing a string or function will allow you to use a custom name. If the name matches an entry point name, the entry point will be removed.</source>
          <target state="translated">스플릿 청크의 이름입니다. &lt;code&gt;true&lt;/code&gt; 를 제공 하면 청크 및 캐시 그룹 키를 기반으로 이름이 자동으로 생성됩니다. 문자열이나 함수를 제공하면 사용자 정의 이름을 사용할 수 있습니다. 이름이 진입 점 이름과 일치하면 진입 점이 제거됩니다.</target>
        </trans-unit>
        <trans-unit id="a224dab019a12c6616086a01e53970556f85c794" translate="yes" xml:space="preserve">
          <source>The node API for &lt;code&gt;babel&lt;/code&gt; has been moved to &lt;code&gt;babel-core&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;babel&lt;/code&gt; 의 노드 API 가 &lt;code&gt;babel-core&lt;/code&gt; 로 이동되었습니다 .</target>
        </trans-unit>
        <trans-unit id="8b076d7bad0e04847bd9e1af7347fa7a6f1a813c" translate="yes" xml:space="preserve">
          <source>The normal module loader is the function that actually loads all the modules in the module graph (one-by-one).</source>
          <target state="translated">일반 모듈 로더는 실제로 모듈 그래프의 모든 모듈을 하나씩로드하는 기능입니다.</target>
        </trans-unit>
        <trans-unit id="4f1d19f9faa2d8d0722a0e1e23f02607e587a9c1" translate="yes" xml:space="preserve">
          <source>The object syntax is more verbose. However, this is the most scalable way of defining entry/entries in your application.</source>
          <target state="translated">객체 구문이 더 장황합니다. 그러나 이것은 응용 프로그램에서 항목 / 항목을 정의하는 가장 확장 가능한 방법입니다.</target>
        </trans-unit>
        <trans-unit id="5154efdb42e2cf3f6948724e000c0d2ef408a7f6" translate="yes" xml:space="preserve">
          <source>The ones performed by UglifyJS</source>
          <target state="translated">UglifyJS가 수행 한 것</target>
        </trans-unit>
        <trans-unit id="09bda428bc2298b8b7539bca171a741433df356b" translate="yes" xml:space="preserve">
          <source>The ones performed by webpack</source>
          <target state="translated">webpack에 의해 수행되는 것들</target>
        </trans-unit>
        <trans-unit id="4bfd2812dad7481714822f78b90c34b30c6ddfde" translate="yes" xml:space="preserve">
          <source>The only downside is that you have to refresh your browser in order to see the changes. It would be much nicer if that would happen automatically as well, so let's try &lt;code&gt;webpack-dev-server&lt;/code&gt; which will do exactly that.</source>
          <target state="translated">유일한 단점은 변경 사항을 보려면 브라우저를 새로 고쳐야한다는 것입니다. 자동으로 발생하면 훨씬 좋을 &lt;code&gt;webpack-dev-server&lt;/code&gt; 를 사용해보십시오 .</target>
        </trans-unit>
        <trans-unit id="9970124635086c07500f383cb7b08142f6b26d7d" translate="yes" xml:space="preserve">
          <source>The only placeholders allowed here are &lt;code&gt;[id]&lt;/code&gt; and &lt;code&gt;[hash]&lt;/code&gt;, the default being:</source>
          <target state="translated">여기에서 허용되는 유일한 자리 표시자는 &lt;code&gt;[id]&lt;/code&gt; 및 &lt;code&gt;[hash]&lt;/code&gt; 이며 기본값은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="d67957273bfa0ed43d68187e13270aeec8738d11" translate="yes" xml:space="preserve">
          <source>The option can be set to a function:</source>
          <target state="translated">옵션은 기능으로 설정할 수 있습니다 :</target>
        </trans-unit>
        <trans-unit id="ca2f308489f3cb4c9753c5ecdf071432bde39e75" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;options&lt;/code&gt; object can include the following properties:</source>
          <target state="translated">선택적 &lt;code&gt;options&lt;/code&gt; 오브젝트는 다음 특성을 포함 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="31ed028b00e592643594c4ed1b5accbc50db710c" translate="yes" xml:space="preserve">
          <source>The output directory as an &lt;strong&gt;absolute&lt;/strong&gt; path.</source>
          <target state="translated">출력 경로 는 &lt;strong&gt;절대&lt;/strong&gt; 경로입니다.</target>
        </trans-unit>
        <trans-unit id="3d39fb2dccd697e1450cca6b83dff11da76a49b5" translate="yes" xml:space="preserve">
          <source>The output file system you provide needs to be compatible with Node&amp;rsquo;s own &lt;a href=&quot;https://nodejs.org/api/fs.html&quot;&gt;&lt;code&gt;fs&lt;/code&gt;&lt;/a&gt; interface, which requires the &lt;code&gt;mkdirp&lt;/code&gt; and &lt;code&gt;join&lt;/code&gt; helper methods.</source>
          <target state="translated">제공하는 출력 파일 시스템 은 &lt;code&gt;mkdirp&lt;/code&gt; 및 &lt;code&gt;join&lt;/code&gt; helper 메소드 가 필요한 Node의 자체 &lt;a href=&quot;https://nodejs.org/api/fs.html&quot;&gt; &lt;code&gt;fs&lt;/code&gt; &lt;/a&gt; 인터페이스 와 호환 되어야합니다 .</target>
        </trans-unit>
        <trans-unit id="97cfcf8af47a75058c06094f0eff166707f2e3f7" translate="yes" xml:space="preserve">
          <source>The output filename for additional chunks</source>
          <target state="translated">추가 청크의 출력 파일 이름</target>
        </trans-unit>
        <trans-unit id="267ff8bf01e4b400d5b984269cf06c01ded82d1d" translate="yes" xml:space="preserve">
          <source>The output filename for the SourceMap</source>
          <target state="translated">SourceMap의 출력 파일 이름</target>
        </trans-unit>
        <trans-unit id="a550b694aeec3339247a8ab6597116fefa3e71ad" translate="yes" xml:space="preserve">
          <source>The output filename of the bundle</source>
          <target state="translated">번들의 출력 파일 이름</target>
        </trans-unit>
        <trans-unit id="3c0e63df9024e8b756c01e045992b68f60f8d2a8" translate="yes" xml:space="preserve">
          <source>The output in webpack CLI will usually be:</source>
          <target state="translated">webpack CLI의 출력은 일반적으로 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="819f3534522471c5ea0e340b7688ce6e2986c41e" translate="yes" xml:space="preserve">
          <source>The output path for compilation assets</source>
          <target state="translated">컴파일 자산의 출력 경로</target>
        </trans-unit>
        <trans-unit id="d5cc37f8dd4438bd7f133d72882c40b943ab6a5b" translate="yes" xml:space="preserve">
          <source>The output shown from running webpack in the guides may differ slightly from the output of newer versions. This is to be expected. As long as the bundles look similar and run correctly, then there shouldn't be any issues. If you do come across an example that seems to be broken by a new version, please create an issue and we will do our best to resolve the discrepancy.</source>
          <target state="translated">안내서에서 웹팩을 실행 한 결과는 최신 버전의 결과와 약간 다를 수 있습니다. 이것은 예상됩니다. 번들이 비슷하게 보이고 올바르게 실행되는 한 아무런 문제가 없습니다. 새 버전으로 인해 깨진 것처럼 보이는 예를 발견 한 경우 문제를 작성하십시오. 불일치를 해결하기 위해 최선을 다하겠습니다.</target>
        </trans-unit>
        <trans-unit id="d7864ae5ef3f0b7a2f3aacd5831a1402dbade9c3" translate="yes" xml:space="preserve">
          <source>The output will be:</source>
          <target state="translated">출력은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="ac4f620d683122799ae83cf0db02aafdf66bbefc" translate="yes" xml:space="preserve">
          <source>The overhead for each chunks is provided by &lt;code&gt;options.chunkOverhead&lt;/code&gt; or defaults to 10000. Entry chunks sizes are multiplied by &lt;code&gt;options.entryChunkMultiplicator&lt;/code&gt; (or 10).</source>
          <target state="translated">각 청크의 오버 헤드는 &lt;code&gt;options.chunkOverhead&lt;/code&gt; 에 의해 제공 되거나 기본값은 10000입니다. 엔트리 청크 크기에는 &lt;code&gt;options.entryChunkMultiplicator&lt;/code&gt; (또는 10) 가 곱해집니다 .</target>
        </trans-unit>
        <trans-unit id="48346b22135d618621c9aadccdd01f3e12289eee" translate="yes" xml:space="preserve">
          <source>The passphrase to a SSL PFX file.</source>
          <target state="translated">SSL PFX 파일의 암호입니다.</target>
        </trans-unit>
        <trans-unit id="548967eebc482b64ca17750fb858725c0c97647c" translate="yes" xml:space="preserve">
          <source>The path of the resource relative to the webpack/config context.</source>
          <target state="translated">webpack / config 컨텍스트와 관련된 리소스의 경로입니다.</target>
        </trans-unit>
        <trans-unit id="4c78e5d4376b497fb07e64c8073838d051cabd9d" translate="yes" xml:space="preserve">
          <source>The path used to resolve the file and any query params used on the first loader</source>
          <target state="translated">파일을 해결하는 데 사용되는 경로 및 첫 번째 로더에서 사용 된 모든 쿼리 매개 변수</target>
        </trans-unit>
        <trans-unit id="bc1748e296ada53329650dd514e6aaa68127c896" translate="yes" xml:space="preserve">
          <source>The path used to resolve the file without any query params</source>
          <target state="translated">쿼리 매개 변수없이 파일을 확인하는 데 사용되는 경로</target>
        </trans-unit>
        <trans-unit id="b0beb6d3ff727ba937ba38f74f40c0298b2547ed" translate="yes" xml:space="preserve">
          <source>The plugin controls several compiler flags. The following flags should not be used in any mode:</source>
          <target state="translated">플러그인은 여러 컴파일러 플래그를 제어합니다. 다음 플래그는 어떤 모드에서도 사용해서는 안됩니다.</target>
        </trans-unit>
        <trans-unit id="9b11e7a0a95723e0438e10960cc010fdaf0de33c" translate="yes" xml:space="preserve">
          <source>The plugin interface allows users to tap directly into the compilation process. Plugins can register handlers on lifecycle hooks that run at different points throughout a compilation. When each hook is executed, the plugin will have full access to the current state of the compilation.</source>
          <target state="translated">플러그인 인터페이스를 통해 사용자는 컴파일 프로세스에 직접 액세스 할 수 있습니다. 플러그인은 컴파일 과정에서 다른 지점에서 실행되는 수명주기 후크에 핸들러를 등록 할 수 있습니다. 각 후크가 실행될 때 플러그인은 현재 컴파일 상태에 대한 전체 액세스 권한을 갖습니다.</target>
        </trans-unit>
        <trans-unit id="a775448e75f0a6a6305222c79f1e629ab2a7f917" translate="yes" xml:space="preserve">
          <source>The plugin supports addons. For a list see the &lt;a href=&quot;https://github.com/jantimon/html-webpack-plugin#third-party-addons&quot;&gt;documentation&lt;/a&gt;.</source>
          <target state="translated">플러그인은 애드온을 지원합니다. 목록은 &lt;a href=&quot;https://github.com/jantimon/html-webpack-plugin#third-party-addons&quot;&gt;설명서를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="72e5541fb2a2286d59ee1b4f3ca68de005f71fb2" translate="yes" xml:space="preserve">
          <source>The plugin will generate an HTML5 file for you that includes all your webpack bundles in the body using &lt;code&gt;script&lt;/code&gt; tags. Just add the plugin to your webpack config as follows:</source>
          <target state="translated">플러그인은 &lt;code&gt;script&lt;/code&gt; 태그를 사용하여 본문에 모든 웹팩 번들을 포함하는 HTML5 파일을 생성 합니다. 다음과 같이 웹팩 구성에 플러그인을 추가하십시오.</target>
        </trans-unit>
        <trans-unit id="23dbb446b166d9f36a900050b47f2d3ab1a6afa9" translate="yes" xml:space="preserve">
          <source>The plugins should be used if you run the bundle in a Node.js environment.</source>
          <target state="translated">Node.js 환경에서 번들을 실행하는 경우 플러그인을 사용해야합니다.</target>
        </trans-unit>
        <trans-unit id="6472732673cddb28039954632e457f1b136ce099" translate="yes" xml:space="preserve">
          <source>The point or points to enter the application. At this point the application starts executing. If an array is passed all items will be executed.</source>
          <target state="translated">응용 프로그램을 시작할 지점입니다. 이 시점에서 응용 프로그램이 실행되기 시작합니다. 배열이 전달되면 모든 항목이 실행됩니다.</target>
        </trans-unit>
        <trans-unit id="dbc0c621862eb10035838f19d0cd0730d204ee81" translate="yes" xml:space="preserve">
          <source>The polling interval for watching (also enable polling)</source>
          <target state="translated">시청을위한 폴링 간격 (폴링 사용 가능)</target>
        </trans-unit>
        <trans-unit id="c11efdad805348277f06f272a3b9067b34acad77" translate="yes" xml:space="preserve">
          <source>The prefix length of the hash digest to use, defaults to &lt;code&gt;20&lt;/code&gt;.</source>
          <target state="translated">사용할 해시 다이제스트의 접두사 길이는 기본적으로 &lt;code&gt;20&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="cfe78750ed83bb76df27ef5f00b72ad4f03945b1" translate="yes" xml:space="preserve">
          <source>The previous &lt;code&gt;Promise&lt;/code&gt; library is referenced and used before it is overridden.</source>
          <target state="translated">이전 &lt;code&gt;Promise&lt;/code&gt; 라이브러리는 재정의되기 전에 참조되고 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="392b59f1ddb5800fa5975bed7c141104e2fb531e" translate="yes" xml:space="preserve">
          <source>The process is calling the &lt;code&gt;accept&lt;/code&gt; handlers and re-executing self-accepted modules</source>
          <target state="translated">프로세스가 &lt;code&gt;accept&lt;/code&gt; 핸들러를 호출하고 자체 승인 모듈을 다시 실행합니다.</target>
        </trans-unit>
        <trans-unit id="6521adb388facad5268660cc975a5e88f24fce11" translate="yes" xml:space="preserve">
          <source>The process is calling the &lt;code&gt;dispose&lt;/code&gt; handlers on the modules that will be replaced</source>
          <target state="translated">프로세스가 대체 될 모듈 에서 &lt;code&gt;dispose&lt;/code&gt; 핸들러를 호출합니다.</target>
        </trans-unit>
        <trans-unit id="ad173f9a14c3ddc81844b3f1137e787fca15d523" translate="yes" xml:space="preserve">
          <source>The process is checking for updates</source>
          <target state="translated">프로세스가 업데이트 확인 중입니다</target>
        </trans-unit>
        <trans-unit id="4759bc6ae5559dc09c35f8668d736f2ae3508206" translate="yes" xml:space="preserve">
          <source>The process is getting ready for the update (e.g. downloading the updated module)</source>
          <target state="translated">프로세스가 업데이트 준비 중입니다 (예 : 업데이트 된 모듈 다운로드)</target>
        </trans-unit>
        <trans-unit id="39b0a4c5329372428d4ac3023ae6b4a24f3adef6" translate="yes" xml:space="preserve">
          <source>The process is waiting for a call to &lt;code&gt;check&lt;/code&gt; (see below)</source>
          <target state="translated">프로세스가 통화 &lt;code&gt;check&lt;/code&gt; 기다리는 중입니다 (아래 참조).</target>
        </trans-unit>
        <trans-unit id="da0d9c2bcbd05524ccb997bcead89cb202e57f85" translate="yes" xml:space="preserve">
          <source>The public path for the assets</source>
          <target state="translated">자산의 공개 경로</target>
        </trans-unit>
        <trans-unit id="6e000088ad11082bbbe5a98b178ad198d4f76470" translate="yes" xml:space="preserve">
          <source>The query of the resource.</source>
          <target state="translated">자원의 질의.</target>
        </trans-unit>
        <trans-unit id="9ffb3bc216dc8a7e0d1139c2c7c1d7964b2fcb6e" translate="yes" xml:space="preserve">
          <source>The query parameter &lt;code&gt;importLoaders&lt;/code&gt; allows to configure how many loaders before &lt;code&gt;css-loader&lt;/code&gt; should be applied to &lt;code&gt;@import&lt;/code&gt;ed resources.</source>
          <target state="translated">쿼리 매개 변수 &lt;code&gt;importLoaders&lt;/code&gt; 를 사용하면 &lt;code&gt;css-loader&lt;/code&gt; 를 &lt;code&gt;@import&lt;/code&gt; ed 리소스에 적용 하기 전에 로더 수를 구성 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a6676ec8ba190e154043d97da697c1d7c9a7c0d0" translate="yes" xml:space="preserve">
          <source>The query parameter &lt;code&gt;modules&lt;/code&gt; enables the &lt;strong&gt;CSS Modules&lt;/strong&gt; spec.</source>
          <target state="translated">쿼리 매개 변수 &lt;code&gt;modules&lt;/code&gt; 은 &lt;strong&gt;CSS 모듈&lt;/strong&gt; 사양을 활성화합니다 .</target>
        </trans-unit>
        <trans-unit id="3505e465d18f3771163a660a2e747e533a6a0c35" translate="yes" xml:space="preserve">
          <source>The raw require function. This expression isn't parsed by the Parser for dependencies.</source>
          <target state="translated">원시 기능이 필요합니다. 이 표현은 파서가 의존성을 위해 파싱하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="092899a9890c9149ab3ac8291fc14610f558cc74" translate="yes" xml:space="preserve">
          <source>The remainder of this guide will stem from &lt;a href=&quot;getting-started&quot;&gt;Getting Started&lt;/a&gt;. If you haven't read through that guide already, please do so now.</source>
          <target state="translated">이 안내서의 나머지 부분은 &lt;a href=&quot;getting-started&quot;&gt;시작하기&lt;/a&gt; 에서 나옵니다 . 이 안내서를 아직 읽지 않았다면 지금 읽어보십시오.</target>
        </trans-unit>
        <trans-unit id="f1829880bae1c785aa269cd8ac49c93162f07fa2" translate="yes" xml:space="preserve">
          <source>The reporter function will be excuted with the loader context as &lt;code&gt;this&lt;/code&gt;. You may emit messages using &lt;code&gt;this.emitWarning(...)&lt;/code&gt; or &lt;code&gt;this.emitError(...)&lt;/code&gt;. See &lt;a href=&quot;../api/loaders#the-loader-context&quot;&gt;webpack docs on loader context&lt;/a&gt;.</source>
          <target state="translated">로더 컨텍스트는 &lt;code&gt;this&lt;/code&gt; 과 같이 리포터 기능이 수행됩니다 . &lt;code&gt;this.emitWarning(...)&lt;/code&gt; 또는 &lt;code&gt;this.emitError(...)&lt;/code&gt; 사용하여 메시지를 생성 할 수 있습니다 . &lt;a href=&quot;../api/loaders#the-loader-context&quot;&gt;로더 컨텍스트에서 webpack 문서를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="46056f0f9b6a95a54bd9a4410020bf916e27bee7" translate="yes" xml:space="preserve">
          <source>The reporter function will be passed an array of errors/warnings produced by JSHint with the following structure:</source>
          <target state="translated">리포터 기능은 JSHint가 다음과 같은 구조로 생성 한 오류 / 경고 배열을 전달합니다.</target>
        </trans-unit>
        <trans-unit id="9832e252c089a76e52186789fa74082b68c95b94" translate="yes" xml:space="preserve">
          <source>The resolved request string.</source>
          <target state="translated">해결 된 요청 문자열</target>
        </trans-unit>
        <trans-unit id="ce32757da121c3a937bde8602723d7dd668a47da" translate="yes" xml:space="preserve">
          <source>The resolver plugins, e.g. &lt;a href=&quot;https://github.com/shaketbaby/directory-named-webpack-plugin&quot;&gt;&lt;code&gt;DirectoryNamedPlugin&lt;/code&gt;&lt;/a&gt;, can be included directly in &lt;code&gt;resolve.plugins&lt;/code&gt; rather than using standard plugins. Note that the &lt;code&gt;resolve&lt;/code&gt; configuration affects the &lt;code&gt;normal&lt;/code&gt; and &lt;code&gt;context&lt;/code&gt; resolvers while &lt;code&gt;resolveLoader&lt;/code&gt; is used to modify the &lt;code&gt;loader&lt;/code&gt; resolver.</source>
          <target state="translated">리졸버 플러그인 (예 : &lt;a href=&quot;https://github.com/shaketbaby/directory-named-webpack-plugin&quot;&gt; &lt;code&gt;DirectoryNamedPlugin&lt;/code&gt; &lt;/a&gt; )은 표준 플러그인을 사용하지 않고 &lt;code&gt;resolve.plugins&lt;/code&gt; 에 직접 포함될 수 있습니다 . 점을 유의 &lt;code&gt;resolve&lt;/code&gt; 구성이 영향을 &lt;code&gt;normal&lt;/code&gt; 및 &lt;code&gt;context&lt;/code&gt; 동안 리졸버를 &lt;code&gt;resolveLoader&lt;/code&gt; 을 수정하는 데 사용됩니다 &lt;code&gt;loader&lt;/code&gt; 해결합니다.</target>
        </trans-unit>
        <trans-unit id="f0f4846e8028f9a80dd0d8c0ef30ddcd09e4241e" translate="yes" xml:space="preserve">
          <source>The resolvers mentioned above can also be customized via a configuration file with the &lt;a href=&quot;../configuration/resolve&quot;&gt;&lt;code&gt;resolve&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../configuration/resolve#resolveloader&quot;&gt;&lt;code&gt;resolveLoader&lt;/code&gt;&lt;/a&gt; options. These options allow users to change the resolving behavior through a variety of options including through resolve &lt;code&gt;plugins&lt;/code&gt;.</source>
          <target state="translated">위에서 언급 한 리졸버는 &lt;a href=&quot;../configuration/resolve&quot;&gt; &lt;code&gt;resolve&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;../configuration/resolve#resolveloader&quot;&gt; &lt;code&gt;resolveLoader&lt;/code&gt; &lt;/a&gt; 옵션 으로 구성 파일을 통해 사용자 정의 할 수도 있습니다. 이 옵션을 통해 사용자는 resolve &lt;code&gt;plugins&lt;/code&gt; 을 포함한 다양한 옵션을 통해 해결 동작을 변경할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="5d0fd93852dd662bc6b879642ac9e4e4d5b03796" translate="yes" xml:space="preserve">
          <source>The resource file.</source>
          <target state="translated">리소스 파일</target>
        </trans-unit>
        <trans-unit id="a4cd8313da62b6881779fdfaa0180a987b0cdd4f" translate="yes" xml:space="preserve">
          <source>The resource part of the request, including query.</source>
          <target state="translated">쿼리를 포함한 요청의 리소스 부분.</target>
        </trans-unit>
        <trans-unit id="a4c514f8ccaf5649c6351763537ef961c30fd000" translate="yes" xml:space="preserve">
          <source>The resource query of the current module. If the following &lt;code&gt;require&lt;/code&gt; call were made, then the query string would be available in &lt;code&gt;file.js&lt;/code&gt;.</source>
          <target state="translated">현재 모듈의 리소스 쿼리 다음과 같은 호출이 &lt;code&gt;require&lt;/code&gt; 경우 &lt;code&gt;file.js&lt;/code&gt; 에서 쿼리 문자열을 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="e4780d56cbc686c5ce3270f7769038e13ae838f0" translate="yes" xml:space="preserve">
          <source>The resource: An absolute path to the file requested. It's already resolved according to the &lt;a href=&quot;resolve&quot;&gt;&lt;code&gt;resolve&lt;/code&gt; rules&lt;/a&gt;.</source>
          <target state="translated">리소스 : 요청 된 파일의 절대 경로입니다. &lt;a href=&quot;resolve&quot;&gt; &lt;code&gt;resolve&lt;/code&gt; 규칙&lt;/a&gt; 에 따라 이미 해결되었습니다 .</target>
        </trans-unit>
        <trans-unit id="01c6e113f51546fcaa75367b348564232431d01b" translate="yes" xml:space="preserve">
          <source>The resulting configuration object would resemble:</source>
          <target state="translated">결과 구성 오브젝트는 다음과 유사합니다.</target>
        </trans-unit>
        <trans-unit id="d5fcb09293cddfb6fac196a1f2ae3817a3ca173b" translate="yes" xml:space="preserve">
          <source>The rules can be disabled using the following options in your &lt;code&gt;webpack.conf.js&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;webpack.conf.js&lt;/code&gt; 에서 다음 옵션을 사용하여 규칙을 비활성화 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="97262fc608fb5c3c1ca59507abc23b2d97ffaa58" translate="yes" xml:space="preserve">
          <source>The runtime asynchronously downloads the updates and notifies the application.</source>
          <target state="translated">런타임은 비동기 적으로 업데이트를 다운로드하고 애플리케이션에 알립니다.</target>
        </trans-unit>
        <trans-unit id="6fca03cfbb7a42f44c98900865cadf2c926101c4" translate="yes" xml:space="preserve">
          <source>The runtime code detects already added CSS via &lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt; or &lt;code&gt;&amp;lt;style&amp;gt;&lt;/code&gt; tag. This can be useful when injecting CSS on server-side for Server-Side-Rendering. The &lt;code&gt;href&lt;/code&gt; of the &lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt; tag has to match the URL that will be used for loading the CSS chunk. The &lt;code&gt;data-href&lt;/code&gt; attribute can be used for &lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;style&amp;gt;&lt;/code&gt; too. When inlining CSS &lt;code&gt;data-href&lt;/code&gt; must be used.</source>
          <target state="translated">런타임 코드는 &lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt; 또는 &lt;code&gt;&amp;lt;style&amp;gt;&lt;/code&gt; 태그 를 통해 이미 추가 된 CSS를 감지 합니다. 서버 측 렌더링을 위해 서버 측에 CSS를 삽입 할 때 유용 할 수 있습니다. &lt;code&gt;href&lt;/code&gt; 의 &lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt; 태그는 CSS 청크를로드하기 위해 사용되는 URL과 일치해야합니다. &lt;code&gt;data-href&lt;/code&gt; 속성은 사용할 수 있습니다 &lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt; 과 &lt;code&gt;&amp;lt;style&amp;gt;&lt;/code&gt; 도. CSS를 인라인 할 때는 &lt;code&gt;data-href&lt;/code&gt; 를 사용해야합니다.</target>
        </trans-unit>
        <trans-unit id="a78efb0808055f65bb7c8c45f825cc95b4914fbe" translate="yes" xml:space="preserve">
          <source>The runtime synchronously applies the updates.</source>
          <target state="translated">런타임은 업데이트를 동 기적으로 적용합니다.</target>
        </trans-unit>
        <trans-unit id="2b665da5e519d5e540da3b313a41a99cd0ecf3a1" translate="yes" xml:space="preserve">
          <source>The sass-loader requires &lt;a href=&quot;https://github.com/webpack&quot;&gt;webpack&lt;/a&gt; as a &lt;a href=&quot;https://docs.npmjs.com/files/package.json#peerdependencies&quot;&gt;&lt;code&gt;peerDependency&lt;/code&gt;&lt;/a&gt; and it requires you to install either &lt;a href=&quot;https://github.com/sass/node-sass&quot;&gt;Node Sass&lt;/a&gt; or &lt;a href=&quot;https://github.com/sass/dart-sass&quot;&gt;Dart Sass&lt;/a&gt; on your own. This allows you to control the versions of all your dependencies, and to choose which Sass implementation to use.</source>
          <target state="translated">sass-loader에는 &lt;a href=&quot;https://github.com/webpack&quot;&gt;peerDependency&lt;/a&gt; 로 &lt;a href=&quot;https://docs.npmjs.com/files/package.json#peerdependencies&quot;&gt; &lt;code&gt;peerDependency&lt;/code&gt; &lt;/a&gt; 이 필요하며 &lt;a href=&quot;https://github.com/sass/node-sass&quot;&gt;Node Sass&lt;/a&gt; 또는 &lt;a href=&quot;https://github.com/sass/dart-sass&quot;&gt;Dart Sass&lt;/a&gt; 를 직접 설치해야합니다 . 이를 통해 모든 종속성의 버전을 제어하고 사용할 Sass 구현을 선택할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="34aa382924eb34a97b5ff040bbe8c678d0951eb6" translate="yes" xml:space="preserve">
          <source>The second argument a &lt;code&gt;string&lt;/code&gt; or a &lt;a href=&quot;https://nodejs.org/api/buffer.html&quot;&gt;&lt;code&gt;Buffer&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">두 번째 인수는 &lt;code&gt;string&lt;/code&gt; 또는 &lt;a href=&quot;https://nodejs.org/api/buffer.html&quot;&gt; &lt;code&gt;Buffer&lt;/code&gt; &lt;/a&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="9eb3a2178fb08052e95c8397dfaf7a97e66d1c0a" translate="yes" xml:space="preserve">
          <source>The server should be accessible on &lt;code&gt;http://10.10.10.61:8080&lt;/code&gt; now. If you make a change in &lt;code&gt;app.js&lt;/code&gt;, it should live reload.</source>
          <target state="translated">서버는 &lt;code&gt;http://10.10.10.61:8080&lt;/code&gt; 에서 액세스 할 수 있어야합니다 . &lt;code&gt;app.js&lt;/code&gt; 를 변경 하면 실시간으로 새로 고침됩니다.</target>
        </trans-unit>
        <trans-unit id="36694462fb15a2bc75a3fea2f02d4342fbda1a03" translate="yes" xml:space="preserve">
          <source>The single entry syntax for the &lt;code&gt;entry&lt;/code&gt; property is a shorthand for:</source>
          <target state="translated">&lt;code&gt;entry&lt;/code&gt; 속성 의 단일 항목 구문 은 다음과 같은 약어입니다.</target>
        </trans-unit>
        <trans-unit id="115c455da79a8006628c20e59f638f4b9b64b4d0" translate="yes" xml:space="preserve">
          <source>The source code you, and maybe your team, have written.</source>
          <target state="translated">당신과 아마도 당신의 팀이 작성한 소스 코드.</target>
        </trans-unit>
        <trans-unit id="28cb8cd49852f753c9f2be8f92238b51bbe3f7ae" translate="yes" xml:space="preserve">
          <source>The spec for &lt;code&gt;import&lt;/code&gt; doesn't allow control over the chunk's name or other properties as &quot;chunks&quot; are only a concept within webpack. Luckily webpack allows some special parameters via comments so as to not break the spec:</source>
          <target state="translated">&quot;청크&quot;는 웹팩 내의 개념 일 뿐이므로 &lt;code&gt;import&lt;/code&gt; 사양 에서는 청크 이름 또는 기타 속성을 제어 할 수 없습니다. 운 좋게 webpack은 사양을 위반하지 않도록 주석을 통해 일부 특수 매개 변수를 허용합니다.</target>
        </trans-unit>
        <trans-unit id="13755577ac5a47dc78ee4c995fe1dfc9e99d9c04" translate="yes" xml:space="preserve">
          <source>The special &lt;code&gt;implementation&lt;/code&gt; option determines which implementation of Sass to use. It takes either a [Node Sass][] or a [Dart Sass][] module. For example, to use Dart Sass, you'd pass:</source>
          <target state="translated">특수 &lt;code&gt;implementation&lt;/code&gt; 옵션은 사용할 Sass 구현을 결정합니다. [Node Sass] [] 또는 [Dart Sass] [] 모듈이 필요합니다. 예를 들어 Dart Sass를 사용하려면 다음을 통과하십시오.</target>
        </trans-unit>
        <trans-unit id="5c4b162f681173ae925ce59ee2d62441d980bbc0" translate="yes" xml:space="preserve">
          <source>The steps above would be shortened to:</source>
          <target state="translated">위의 단계는 다음과 같이 단축됩니다.</target>
        </trans-unit>
        <trans-unit id="c086ef368c2e61193dc23f5a88ecd75a1567c8f6" translate="yes" xml:space="preserve">
          <source>The syntax &lt;code&gt;:local(.className)&lt;/code&gt; can be used to declare &lt;code&gt;className&lt;/code&gt; in the local scope. The local identifiers are exported by the module.</source>
          <target state="translated">&lt;code&gt;:local(.className)&lt;/code&gt; 구문을 사용 하여 로컬 범위에서 &lt;code&gt;className&lt;/code&gt; 을 선언 할 수 있습니다 . 로컬 식별자는 모듈에서 내 보냅니다.</target>
        </trans-unit>
        <trans-unit id="6c080a2f2285ca1d1604a8b397e768aea30b9793" translate="yes" xml:space="preserve">
          <source>The syntax is as follows:</source>
          <target state="translated">구문은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="636a5736cf2581279ebfb2a0261adf16ae389bb9" translate="yes" xml:space="preserve">
          <source>The target asset name. &lt;code&gt;[file]&lt;/code&gt; is replaced with the original asset. &lt;code&gt;[path]&lt;/code&gt; is replaced with the path of the original asset and &lt;code&gt;[query]&lt;/code&gt; with the query</source>
          <target state="translated">대상 자산 이름 &lt;code&gt;[file]&lt;/code&gt; 이 원래 자산으로 교체되었습니다. &lt;code&gt;[path]&lt;/code&gt; 는 원래 자산의 경로로 대체되고 &lt;code&gt;[query]&lt;/code&gt; 는 쿼리 로 대체됩니다</target>
        </trans-unit>
        <trans-unit id="eba2325dc692f9ab9bafbbb2beda8299b674eba5" translate="yes" xml:space="preserve">
          <source>The third-party &lt;a href=&quot;https://github.com/mrsteele/dotenv-webpack&quot;&gt;&lt;code&gt;DotenvPlugin&lt;/code&gt;&lt;/a&gt; (&lt;code&gt;dotenv-webpack&lt;/code&gt;) allows you to expose (a subset of) &lt;a href=&quot;https://www.npmjs.com/package/dotenv&quot;&gt;dotenv variables&lt;/a&gt;:</source>
          <target state="translated">타사 &lt;a href=&quot;https://github.com/mrsteele/dotenv-webpack&quot;&gt; &lt;code&gt;DotenvPlugin&lt;/code&gt; &lt;/a&gt; ( &lt;code&gt;dotenv-webpack&lt;/code&gt; )을 사용하면 &lt;a href=&quot;https://www.npmjs.com/package/dotenv&quot;&gt;dotenv 변수를&lt;/a&gt; 서브 세트로 노출 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="ba0623dec4dcfaa3539a27d267af37d4a6c6159b" translate="yes" xml:space="preserve">
          <source>The tools in this guide are &lt;strong&gt;only meant for development&lt;/strong&gt;, please &lt;strong&gt;avoid&lt;/strong&gt; using them in production!</source>
          <target state="translated">이 안내서의 도구는 &lt;strong&gt;개발 용&lt;/strong&gt; 이므로 프로덕션 &lt;strong&gt;환경&lt;/strong&gt; 에서는 사용 &lt;strong&gt;하지 마십시오&lt;/strong&gt; !</target>
        </trans-unit>
        <trans-unit id="d03833fb081139e2861c0b6bac6df6e16c42c69b" translate="yes" xml:space="preserve">
          <source>The top-level &lt;code&gt;output&lt;/code&gt; key contains set of options instructing webpack on how and where it should output your bundles, assets and anything else you bundle or load with webpack.</source>
          <target state="translated">최상위 레벨 &lt;code&gt;output&lt;/code&gt; 키에는 번들, 자산 및 웹팩과 함께 번들 또는로드하는 항목을 출력하는 방법과 위치에 대한 웹팩을 지시하는 옵션 세트가 포함되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="23ddc8426f41fcf0c2f24729e02738cbc0c4ea94" translate="yes" xml:space="preserve">
          <source>The top-level structure of the output JSON file is fairly straightforward but there are a few nested data structures as well. Each nested structure has a dedicated section below to make this document more consumable. Note that you can click links within the top-level structure below to jump to relevant sections and documentation:</source>
          <target state="translated">출력 JSON 파일의 최상위 구조는 매우 간단하지만 중첩 된 데이터 구조도 있습니다. 각 중첩 구조에는 아래에 전용 섹션이있어이 문서를보다 소모품으로 만들 수 있습니다. 아래의 최상위 구조 내에서 링크를 클릭하면 관련 섹션 및 문서로 이동할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="bcc561d5b45341ac9ae52e7eceff1b71c210b154" translate="yes" xml:space="preserve">
          <source>The type for exposing the exports of the entry point as library</source>
          <target state="translated">진입 점 내보내기를 라이브러리로 노출하기위한 유형</target>
        </trans-unit>
        <trans-unit id="52496825e602d46c2484208661a0dbf58d19c31d" translate="yes" xml:space="preserve">
          <source>The type of hash that the has function should use. Valid values include: md5, sha1, sha256, and sha512.</source>
          <target state="translated">has 함수가 사용해야하는 해시 유형입니다. 유효한 값은 md5, sha1, sha256 및 sha512입니다.</target>
        </trans-unit>
        <trans-unit id="eb1ba693e91aeced7bfd7d3c4973add619d0c630" translate="yes" xml:space="preserve">
          <source>The update is prepared and available</source>
          <target state="translated">업데이트 준비 및 사용 가능</target>
        </trans-unit>
        <trans-unit id="61a9637f0952375cb9aed04469dd726cfd952673" translate="yes" xml:space="preserve">
          <source>The updated &lt;a href=&quot;manifest&quot;&gt;manifest&lt;/a&gt; (JSON)</source>
          <target state="translated">업데이트 된 &lt;a href=&quot;manifest&quot;&gt;매니페스트&lt;/a&gt; (JSON)</target>
        </trans-unit>
        <trans-unit id="b7f04ddab5440093506974af2f71afb5c69d6443" translate="yes" xml:space="preserve">
          <source>The usage of these properties is highly discouraged since we are planning to remove them from the context. They are still listed here for documentation purposes.</source>
          <target state="translated">이러한 속성은 컨텍스트에서 제거 할 계획이므로 사용하지 않는 것이 좋습니다. 문서화 목적으로 여기에 계속 나열됩니다.</target>
        </trans-unit>
        <trans-unit id="09a01ba6fc5ac28730420b58f620f492ea97a0a5" translate="yes" xml:space="preserve">
          <source>The usage specification for the library use will be as follows:</source>
          <target state="translated">라이브러리 사용에 대한 사용 사양은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="ad8f6ee6214c162258ff694b7015ecaf7841b5c9" translate="yes" xml:space="preserve">
          <source>The use of &lt;code&gt;System.import&lt;/code&gt; in webpack &lt;a href=&quot;https://github.com/webpack/webpack/issues/2163&quot;&gt;did not fit the proposed spec&lt;/a&gt;, so it was deprecated in webpack &lt;a href=&quot;https://github.com/webpack/webpack/releases/tag/v2.1.0-beta.28&quot;&gt;2.1.0-beta.28&lt;/a&gt; in favor of &lt;code&gt;import()&lt;/code&gt;.</source>
          <target state="translated">webpack에서 &lt;code&gt;System.import&lt;/code&gt; 를 사용하는 &lt;a href=&quot;https://github.com/webpack/webpack/issues/2163&quot;&gt;것이 제안 된 사양에 맞지&lt;/a&gt; 않으므로 &lt;code&gt;import()&lt;/code&gt; 를 위해 webpack &lt;a href=&quot;https://github.com/webpack/webpack/releases/tag/v2.1.0-beta.28&quot;&gt;2.1.0-beta.28&lt;/a&gt; 에서 더 이상 사용되지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="43ce4cf602e81313a6d20c96af3f2f1a73a256a9" translate="yes" xml:space="preserve">
          <source>The value &lt;code&gt;&quot;single&quot;&lt;/code&gt; instead creates a runtime file to be shared for all generated chunks. This setting is an alias for:</source>
          <target state="translated">&lt;code&gt;&quot;single&quot;&lt;/code&gt; 값 은 대신 생성 된 모든 청크에 대해 공유 할 런타임 파일을 작성합니다. 이 설정은 다음에 대한 별명입니다.</target>
        </trans-unit>
        <trans-unit id="b1229e71274c5a0848ada24997f99c0e90c13985" translate="yes" xml:space="preserve">
          <source>The value of the option is prefixed to every URL created by the runtime or loaders. Because of this &lt;strong&gt;the value of this option ends with &lt;code&gt;/&lt;/code&gt;&lt;/strong&gt; in most cases.</source>
          <target state="translated">옵션 값은 런타임 또는 로더가 작성한 모든 URL 앞에 접두어가 붙습니다. 이 때문에 &lt;strong&gt;이 옵션 종료의 값 &lt;code&gt;/&lt;/code&gt; &lt;/strong&gt; 대부분의 경우이다.</target>
        </trans-unit>
        <trans-unit id="89761bd1af99839698fc977f7b95894b8d804bab" translate="yes" xml:space="preserve">
          <source>The values will be inlined into the code allowing a minification pass to remove the redundant conditional.</source>
          <target state="translated">값이 코드에 인라인되어 최소화 조건이 중복 제거되도록 최소화 단계가 수행됩니다.</target>
        </trans-unit>
        <trans-unit id="a9aa12557f06576dffeddc570ca96e258d06e4f9" translate="yes" xml:space="preserve">
          <source>The variable &lt;code&gt;MyLibrary&lt;/code&gt; will be bound with the return value of your entry file, if the resulting output is included as a script tag in an HTML page.</source>
          <target state="translated">결과 출력이 HTML 페이지에 스크립트 태그로 포함 된 경우 &lt;code&gt;MyLibrary&lt;/code&gt; 변수 는 입력 파일의 반환 값에 바인딩됩니다.</target>
        </trans-unit>
        <trans-unit id="adc4f01ea35788d18caa049991ad53d743ab4a33" translate="yes" xml:space="preserve">
          <source>The way this is accomplished is the &lt;code&gt;&quot;sideEffects&quot;&lt;/code&gt; package.json property.</source>
          <target state="translated">이것이 달성되는 방식은 &lt;code&gt;&quot;sideEffects&quot;&lt;/code&gt; package.json 특성입니다.</target>
        </trans-unit>
        <trans-unit id="cc0f8180a2809a16c731d6f278b809d648c76948" translate="yes" xml:space="preserve">
          <source>The webcomponent polyfills must be added in a specific order. If you do not delay loading the main bundle with your components, you will see the following exceptions in the browser console:</source>
          <target state="translated">웹 컴포넌트 폴리 필은 특정 순서로 추가해야합니다. 컴포넌트와 함께 기본 번들로드를 지연하지 않으면 브라우저 콘솔에 다음 예외가 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="891b65ff2555253127d610f04559b1a2a11cfb73" translate="yes" xml:space="preserve">
          <source>The webpack 2 release came with built-in support for ES2015 modules (alias &lt;em&gt;harmony modules&lt;/em&gt;) as well as unused module export detection. The new webpack 4 release expands on this capability with a way to provide hints to the compiler via the &lt;code&gt;&quot;sideEffects&quot;&lt;/code&gt;&lt;code&gt;package.json&lt;/code&gt; property to denote which files in your project are &quot;pure&quot; and therefore safe to prune if unused.</source>
          <target state="translated">webpack 2 릴리스에는 ES2015 모듈 (별칭 &lt;em&gt;하모니 모듈&lt;/em&gt; ) 및 사용되지 않은 모듈 내보내기 감지 기능이 내장되어 있습니다. 새로운 webpack 4 릴리스는 &lt;code&gt;&quot;sideEffects&quot;&lt;/code&gt; &lt;code&gt;package.json&lt;/code&gt; 속성을 통해 컴파일러에 힌트를 제공 하여 프로젝트에서 &quot;순수한&quot;파일을 나타내므로 사용하지 않을 경우 정리할 수있는 방법으로이 기능을 확장 합니다.</target>
        </trans-unit>
        <trans-unit id="478a5519b2320811d6017390c8de571fe8e886eb" translate="yes" xml:space="preserve">
          <source>The webpack &lt;code&gt;target&lt;/code&gt; property is not to be confused with the &lt;code&gt;output.libraryTarget&lt;/code&gt; property. For more information see &lt;a href=&quot;output&quot;&gt;our guide&lt;/a&gt; on the &lt;code&gt;output&lt;/code&gt; property.</source>
          <target state="translated">웹팩 &lt;code&gt;target&lt;/code&gt; 특성을 &lt;code&gt;output.libraryTarget&lt;/code&gt; 특성 과 혼동하지 마십시오 . 자세한 내용 은 &lt;code&gt;output&lt;/code&gt; 속성 에 &lt;a href=&quot;output&quot;&gt;대한 안내서&lt;/a&gt; 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="67d0c64e1b2084b3dd8a7172e708b0db5df6c2ff" translate="yes" xml:space="preserve">
          <source>The webpack command line &lt;a href=&quot;../api/cli#environment-options&quot;&gt;environment option&lt;/a&gt;&lt;code&gt;--env&lt;/code&gt; allows you to pass in as many environment variables as you like. Environment variables will be made accessible in your &lt;code&gt;webpack.config.js&lt;/code&gt;. For example, &lt;code&gt;--env.production&lt;/code&gt; or &lt;code&gt;--env.NODE_ENV=local&lt;/code&gt; (&lt;code&gt;NODE_ENV&lt;/code&gt; is conventionally used to define the environment type, see &lt;a href=&quot;https://dzone.com/articles/what-you-should-know-about-node-env&quot;&gt;here&lt;/a&gt;.)</source>
          <target state="translated">webpack 명령 줄 &lt;a href=&quot;../api/cli#environment-options&quot;&gt;환경 옵션 &lt;/a&gt; &lt;code&gt;--env&lt;/code&gt; 를 사용하면 원하는만큼 환경 변수를 전달할 수 있습니다. 환경 변수는 &lt;code&gt;webpack.config.js&lt;/code&gt; 에서 액세스 할 수 있습니다 . 예를 들어 &lt;code&gt;--env.production&lt;/code&gt; 또는 &lt;code&gt;--env.NODE_ENV=local&lt;/code&gt; ( &lt;code&gt;NODE_ENV&lt;/code&gt; 는 일반적으로 환경 유형을 정의하는 데 사용됩니다 ( &lt;a href=&quot;https://dzone.com/articles/what-you-should-know-about-node-env&quot;&gt;여기&lt;/a&gt; 참조 )).</target>
        </trans-unit>
        <trans-unit id="2fd569f3866762654c84dc07b32b03a8679ee57a" translate="yes" xml:space="preserve">
          <source>The webpack repository contains an &lt;a href=&quot;https://github.com/webpack/webpack/tree/master/examples/source-map&quot;&gt;example showing the effect of all &lt;code&gt;devtool&lt;/code&gt; variants&lt;/a&gt;. Those examples will likely help you to understand the differences.</source>
          <target state="translated">웹팩 저장소에는 &lt;a href=&quot;https://github.com/webpack/webpack/tree/master/examples/source-map&quot;&gt;모든 &lt;code&gt;devtool&lt;/code&gt; 변형 의 영향을 보여주는 예제&lt;/a&gt; 가 포함되어 있습니다 . 이러한 예는 차이점을 이해하는 데 도움이 될 것입니다.</target>
        </trans-unit>
        <trans-unit id="2124200555434f2d7def0b1a661c16c179c98b22" translate="yes" xml:space="preserve">
          <source>The webpack-dev-server also takes a hint from &lt;code&gt;publicPath&lt;/code&gt;, using it to determine where to serve the output files from.</source>
          <target state="translated">webpack-dev-server는 &lt;code&gt;publicPath&lt;/code&gt; 에서 힌트를 가져 와서 출력 파일을 제공 할 위치를 결정합니다.</target>
        </trans-unit>
        <trans-unit id="a1a810a24b9f17b1d07f0266bc2e5374f6b81734" translate="yes" xml:space="preserve">
          <source>The worker file can import dependencies just like any other file:</source>
          <target state="translated">작업자 파일은 다른 파일과 마찬가지로 종속성을 가져올 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f318d1321d0bcb60d6c6c01420fcb068660bff69" translate="yes" xml:space="preserve">
          <source>Then &lt;code&gt;import&lt;/code&gt; the target file somewhere in your app:</source>
          <target state="translated">그런 다음 앱 어딘가에 대상 파일을 &lt;code&gt;import&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="35f38ddf8489e854be4dc0f70af5f6fa83090c8f" translate="yes" xml:space="preserve">
          <source>Then add the loader to the desired &lt;code&gt;require&lt;/code&gt; calls. For example:</source>
          <target state="translated">그런 다음 원하는 &lt;code&gt;require&lt;/code&gt; 호출에 로더를 추가하십시오 . 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="ffad5e3e9f9bce8ff26817bbf8bcb40fe6825333" translate="yes" xml:space="preserve">
          <source>Then add the loader to your &lt;code&gt;webpack&lt;/code&gt; config. For example:</source>
          <target state="translated">그런 다음 로더를 &lt;code&gt;webpack&lt;/code&gt; 구성에 추가하십시오 . 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="5ecc72b143ba414bace5339e99ab892cad6a01ae" translate="yes" xml:space="preserve">
          <source>Then add the plugin to your &lt;code&gt;webpack&lt;/code&gt; config. For example:</source>
          <target state="translated">그런 다음 &lt;code&gt;webpack&lt;/code&gt; 구성에 플러그인을 추가하십시오 . 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="aa553c5c8715ed65e20b9514b424640be97e4c70" translate="yes" xml:space="preserve">
          <source>Then import that config using the keyword you're looking for in the regexp:</source>
          <target state="translated">그런 다음 정규 표현식에서 찾고있는 키워드를 사용하여 해당 구성을 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="cb2125d4922a805933e12a6b7b007a9414ad8b65" translate="yes" xml:space="preserve">
          <source>Then in any of our source code:</source>
          <target state="translated">그런 다음 소스 코드 중 하나에서</target>
        </trans-unit>
        <trans-unit id="eba20bf51e1fac8e7c59f5ae2aa0c0f1ac3c67fd" translate="yes" xml:space="preserve">
          <source>Then invoke the loader through a require like so:</source>
          <target state="translated">그런 다음 요구 사항을 통해 로더를 호출하십시오.</target>
        </trans-unit>
        <trans-unit id="d73eb206650f19435ae7b09b1dd4c91b4d7875da" translate="yes" xml:space="preserve">
          <source>Then modify your &lt;code&gt;webpack.config.js&lt;/code&gt;:</source>
          <target state="translated">그런 다음 &lt;code&gt;webpack.config.js&lt;/code&gt; 를 수정하십시오 .</target>
        </trans-unit>
        <trans-unit id="8ece6c64eaee4ab7ee3f8b124192a78d7721667b" translate="yes" xml:space="preserve">
          <source>Then register a configuration and load the task:</source>
          <target state="translated">그런 다음 구성을 등록하고 태스크를로드하십시오.</target>
        </trans-unit>
        <trans-unit id="1079055dbdfefa1ebd4ed5f99bb4f3a3ab94f6aa" translate="yes" xml:space="preserve">
          <source>Then require the webpack module in your Node.js script:</source>
          <target state="translated">그런 다음 Node.js 스크립트에 웹팩 모듈이 필요합니다.</target>
        </trans-unit>
        <trans-unit id="59ed0740687cc965bad0e350a9024363567dd315" translate="yes" xml:space="preserve">
          <source>Then set the environment variable &lt;code&gt;process.env.TS_NODE_PROJECT&lt;/code&gt; provided by &lt;code&gt;tsconfig-path&lt;/code&gt; like so:</source>
          <target state="translated">그런 다음 &lt;code&gt;tsconfig-path&lt;/code&gt; 에서 제공 한 환경 변수 &lt;code&gt;process.env.TS_NODE_PROJECT&lt;/code&gt; 를 다음과 같이 설정하십시오 .</target>
        </trans-unit>
        <trans-unit id="667f02d92bdbdede5b7c2dd5cadd7691d23cc47e" translate="yes" xml:space="preserve">
          <source>Then you can easily disable the AMD path by writing</source>
          <target state="translated">그런 다음 작성하여 AMD 경로를 쉽게 비활성화 할 수 있습니다</target>
        </trans-unit>
        <trans-unit id="da73ede351abacaec57b8883eebc3e85b7c8c032" translate="yes" xml:space="preserve">
          <source>There are a couple of different options available in webpack that help you automatically compile your code whenever it changes:</source>
          <target state="translated">웹팩에는 코드가 변경 될 때마다 자동으로 컴파일하는 데 도움이되는 몇 가지 옵션이 있습니다.</target>
        </trans-unit>
        <trans-unit id="98fc5926f0ed61dca265bd1d5a8cfdd128aec8ab" translate="yes" xml:space="preserve">
          <source>There are a few other tools that can help when dealing with legacy modules.</source>
          <target state="translated">레거시 모듈을 처리 할 때 도움이되는 몇 가지 다른 도구가 있습니다.</target>
        </trans-unit>
        <trans-unit id="0a1d4e9ccad0c8085ac2c42a3a84ab4c7625d32e" translate="yes" xml:space="preserve">
          <source>There are a few use cases in real applications where this feature becomes especially neat. Essentially, every file emitted to your &lt;code&gt;output.path&lt;/code&gt; directory will be referenced from the &lt;code&gt;output.publicPath&lt;/code&gt; location. This includes child chunks (created via &lt;a href=&quot;code-splitting&quot;&gt;code splitting&lt;/a&gt;) and any other assets (e.g. images, fonts, etc.) that are a part of your dependency graph.</source>
          <target state="translated">이 기능이 특히 깔끔 해지는 실제 응용 프로그램에는 몇 가지 사용 사례가 있습니다. 기본적으로 &lt;code&gt;output.path&lt;/code&gt; 디렉토리로 방출 된 모든 파일 은 &lt;code&gt;output.publicPath&lt;/code&gt; 위치 에서 참조 됩니다. 여기에는 하위 &lt;a href=&quot;code-splitting&quot;&gt;코드&lt;/a&gt; ( 코드 분할을 통해 생성됨 ) 및 종속성 그래프의 일부인 기타 자산 (예 : 이미지, 글꼴 등)이 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="f59b5b432af60faa3acb5fbb371c18c640f63351" translate="yes" xml:space="preserve">
          <source>There are a lot of &lt;a href=&quot;../configuration/devtool&quot;&gt;different options&lt;/a&gt; available when it comes to source maps. Be sure to check them out so you can configure them to your needs.</source>
          <target state="translated">소스 맵과 관련하여 사용할 수 있는 &lt;a href=&quot;../configuration/devtool&quot;&gt;다양한 옵션이&lt;/a&gt; 있습니다. 필요에 따라 구성 할 수 있도록 확인하십시오.</target>
        </trans-unit>
        <trans-unit id="8d407574a6dd2574ff77db703ce9dc21ace6991e" translate="yes" xml:space="preserve">
          <source>There are different export formats available:</source>
          <target state="translated">사용 가능한 다른 내보내기 형식이 있습니다.</target>
        </trans-unit>
        <trans-unit id="2ec1856436537a88e242c66fae83ad8d15cb9bb3" translate="yes" xml:space="preserve">
          <source>There are many modules that check for a &lt;code&gt;define&lt;/code&gt; function before using CommonJS. Since webpack is capable of both, they default to AMD in this case, which can be a problem if the implementation is quirky.</source>
          <target state="translated">CommonJS를 사용하기 전에 &lt;code&gt;define&lt;/code&gt; 함수 를 확인하는 많은 모듈이 있습니다 . 웹팩은 두 가지를 모두 지원할 수 있으므로이 경우 기본적으로 AMD로 설정되며, 구현이 기발한 경우 문제가 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="231f8d33886d63700143f71de278ecc37e1e9ea7" translate="yes" xml:space="preserve">
          <source>There are many other loaders and examples out in the community to make HMR interact smoothly with a variety of frameworks and libraries...</source>
          <target state="translated">HMR이 다양한 프레임 워크 및 라이브러리와 원활하게 상호 작용할 수 있도록 커뮤니티에 다른 로더와 예제가 많이 있습니다 ...</target>
        </trans-unit>
        <trans-unit id="53aa2c97152f93fa32cbf84d5d7317fbd59e3f34" translate="yes" xml:space="preserve">
          <source>There are many plugins that webpack provides out of the box! Check out the &lt;a href=&quot;https://webpack.js.org/plugins&quot;&gt;list of plugins&lt;/a&gt;.</source>
          <target state="translated">webpack이 기본적으로 제공하는 많은 플러그인이 있습니다! &lt;a href=&quot;https://webpack.js.org/plugins&quot;&gt;플러그인 목록을&lt;/a&gt; 확인하십시오 .</target>
        </trans-unit>
        <trans-unit id="71e77a34d84d086ac72c127ae4906c48c99dd408" translate="yes" xml:space="preserve">
          <source>There are multiple optimizations in production mode regarding dead branches:</source>
          <target state="translated">운영 중단 모드에서는 죽은 분기에 대한 여러 최적화가 있습니다.</target>
        </trans-unit>
        <trans-unit id="3bcc2fea8cf939a9d3651476df04dc1a6ee79e59" translate="yes" xml:space="preserve">
          <source>There are problems with managing JavaScript projects this way:</source>
          <target state="translated">이런 식으로 JavaScript 프로젝트를 관리하는 데 문제가 있습니다.</target>
        </trans-unit>
        <trans-unit id="4993d4d2cc5cb72c5891a9d1ab5d8f7272cf5966" translate="yes" xml:space="preserve">
          <source>There are some issues with Source Maps in Chrome. &lt;a href=&quot;https://github.com/webpack/webpack/issues/3165&quot;&gt;We need your help!&lt;/a&gt;.</source>
          <target state="translated">Chrome의 소스 맵에 문제가 있습니다. &lt;a href=&quot;https://github.com/webpack/webpack/issues/3165&quot;&gt;우리는 당신의 도움이 필요합니다! &lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="9295a056060a1cd9d98ae0dd581e17215a4f5384" translate="yes" xml:space="preserve">
          <source>There are some presets available to use as a shortcut. Use them like this:</source>
          <target state="translated">바로 가기로 사용할 수있는 몇 가지 사전 설정이 있습니다. 다음과 같이 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="635b1a30cc14512dd700d2c6b33056a04cc5290a" translate="yes" xml:space="preserve">
          <source>There are three general approaches to code splitting available:</source>
          <target state="translated">사용 가능한 코드 분할에는 세 가지 일반적인 접근 방식이 있습니다.</target>
        </trans-unit>
        <trans-unit id="267e07e43a45d9a1ca7399cfda987a9aee4304fd" translate="yes" xml:space="preserve">
          <source>There are three types of built-in resolvers available on the &lt;code&gt;compiler&lt;/code&gt; class:</source>
          <target state="translated">&lt;code&gt;compiler&lt;/code&gt; 클래스 에는 세 가지 유형의 내장 리졸버가 있습니다 .</target>
        </trans-unit>
        <trans-unit id="4f92300c3888d24aa7e5e015926b4dda7365ed5a" translate="yes" xml:space="preserve">
          <source>There are three ways to use loaders in your application:</source>
          <target state="translated">애플리케이션에서 로더를 사용하는 세 가지 방법이 있습니다.</target>
        </trans-unit>
        <trans-unit id="cfbf2ca72bd8b5e52cf781d5d1d0ed6763357e5f" translate="yes" xml:space="preserve">
          <source>There are two input values for the conditions:</source>
          <target state="translated">조건에 대한 두 가지 입력 값이 있습니다.</target>
        </trans-unit>
        <trans-unit id="3c7bd6cb5a385da0b04381463b8a65bb5f007ab0" translate="yes" xml:space="preserve">
          <source>There are two output values of a Rule:</source>
          <target state="translated">규칙에는 두 가지 출력 값이 있습니다.</target>
        </trans-unit>
        <trans-unit id="421884df0658635b32d095b666151cd8fdaeb897" translate="yes" xml:space="preserve">
          <source>There are two phases that all loaders enter one after the other:</source>
          <target state="translated">모든 로더가 차례로 들어가는 두 단계가 있습니다.</target>
        </trans-unit>
        <trans-unit id="b6af33372ea92fb3a1592ac062e55d75a6290f0e" translate="yes" xml:space="preserve">
          <source>There are two possibilities to extract a style sheet from the bundle:</source>
          <target state="translated">번들에서 스타일 시트를 추출 할 수있는 두 가지 가능성이 있습니다.</target>
        </trans-unit>
        <trans-unit id="b2d870d1394aaba2ab5f8a4c5504447f9a976509" translate="yes" xml:space="preserve">
          <source>There are two solutions to this issue:</source>
          <target state="translated">이 문제에 대한 두 가지 해결책이 있습니다.</target>
        </trans-unit>
        <trans-unit id="96f079b98b93fb7f704da117338a35992b2e29f7" translate="yes" xml:space="preserve">
          <source>There has been a &lt;a href=&quot;https://github.com/nodejs/node/issues/19769&quot;&gt;performance regression&lt;/a&gt; in the latest stable versions of Node.js and its ES2015 &lt;code&gt;Map&lt;/code&gt; and &lt;code&gt;Set&lt;/code&gt; implementations. A fix has been merged in master, but a release has yet to be made. In the meantime, to get the most out of incremental build speeds, try to stick with version 8.9.x (problem exists between 8.9.10 - 9.11.1). webpack has moved to using those ES2015 data structures liberally, and it will improve the initial build times as well.</source>
          <target state="translated">이 있었다 &lt;a href=&quot;https://github.com/nodejs/node/issues/19769&quot;&gt;성능 저하&lt;/a&gt; Node.js를하고 ES2015의 최신 안정 버전의 &lt;code&gt;Map&lt;/code&gt; 및 &lt;code&gt;Set&lt;/code&gt; 구현. 수정 프로그램이 마스터에 병합되었지만 아직 릴리스되지 않았습니다. 그 동안 증분 빌드 속도를 최대한 활용하려면 버전 8.9.x를 사용하십시오 (문제는 8.9.10-9.11.1 사이에 있음). webpack은 이러한 ES2015 데이터 구조를 자유롭게 사용하기 시작했으며 초기 빌드 시간도 향상시킬 것입니다.</target>
        </trans-unit>
        <trans-unit id="d9d05322318799384d1e0b0c5b64e4a53b00f44d" translate="yes" xml:space="preserve">
          <source>There is a &lt;a href=&quot;https://github.com/TypeStrong/ts-loader/tree/master/examples/fast-incremental-builds&quot;&gt;full example&lt;/a&gt; on the ts-loader github repository</source>
          <target state="translated">ts-loader github 저장소에 대한 &lt;a href=&quot;https://github.com/TypeStrong/ts-loader/tree/master/examples/fast-incremental-builds&quot;&gt;전체 예가&lt;/a&gt; 있습니다.</target>
        </trans-unit>
        <trans-unit id="028fda8bd113b7126322aeb6aa11e8851c9e9ab8" translate="yes" xml:space="preserve">
          <source>There is a known problem with Less and &lt;a href=&quot;https://github.com/css-modules/css-modules&quot;&gt;CSS modules&lt;/a&gt; regarding relative file paths in &lt;code&gt;url(...)&lt;/code&gt; statements. &lt;a href=&quot;https://github.com/webpack-contrib/less-loader/issues/109#issuecomment-253797335&quot;&gt;See this issue for an explanation&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;url(...)&lt;/code&gt; 문의 상대 파일 경로와 관련 하여 Less 및 &lt;a href=&quot;https://github.com/css-modules/css-modules&quot;&gt;CSS 모듈&lt;/a&gt; 에 알려진 문제가 있습니다. &lt;a href=&quot;https://github.com/webpack-contrib/less-loader/issues/109#issuecomment-253797335&quot;&gt;설명은이 문제를 참조하십시오&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="7f98e90c6aa491e1ad9072a05a6ec97f5153bcc4" translate="yes" xml:space="preserve">
          <source>There is also an &lt;code&gt;extract&lt;/code&gt; function on the instance. You should use this if you have more than one instance of &lt;code&gt;ExtractTextPlugin&lt;/code&gt;.</source>
          <target state="translated">인스턴스 에는 &lt;code&gt;extract&lt;/code&gt; 기능 도 있습니다 . &lt;code&gt;ExtractTextPlugin&lt;/code&gt; 의 인스턴스가 둘 이상인 경우이를 사용해야합니다 .</target>
        </trans-unit>
        <trans-unit id="aca6f0f8988a8ba1fdf3cdcb454b3a2847afa5c5" translate="yes" xml:space="preserve">
          <source>There is also an additional category &quot;inlined loader&quot; which are loaders applied inline of the import/require.</source>
          <target state="translated">가져 오기 / 요구 사항의 인라인으로 적용되는 로더 인 추가 범주 &quot;인라인 로더&quot;도 있습니다.</target>
        </trans-unit>
        <trans-unit id="63dc4b8122508bfde5c2b3cd6c0dbba7d8b69700" translate="yes" xml:space="preserve">
          <source>There is currently exactly one option: &lt;code&gt;publicPath&lt;/code&gt;. If you are using a relative &lt;code&gt;publicPath&lt;/code&gt; in webpack's &lt;a href=&quot;../configuration/output#output-publicpath&quot;&gt;output options&lt;/a&gt; and extracting to a file with the &lt;code&gt;file-loader&lt;/code&gt;, you might need this to account for the location of your extracted file.</source>
          <target state="translated">현재 정확히 하나의 옵션 인 &lt;code&gt;publicPath&lt;/code&gt; 가 있습니다. webpack의 &lt;a href=&quot;../configuration/output#output-publicpath&quot;&gt;출력 옵션&lt;/a&gt; 에서 상대 &lt;code&gt;publicPath&lt;/code&gt; 를 사용하고 &lt;code&gt;file-loader&lt;/code&gt; 로 파일을 추출하는 경우 추출 된 파일의 위치를 ​​설명하기 위해 이것이 필요할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="9b97843cd1416b0f8c95b15bcea142c8b9e09f01" translate="yes" xml:space="preserve">
          <source>There is no need to change it.</source>
          <target state="translated">변경할 필요가 없습니다.</target>
        </trans-unit>
        <trans-unit id="46994b7b987e4c2023ce27e138386b6cdc8bd10d" translate="yes" xml:space="preserve">
          <source>There is no option to provide a chunk name.</source>
          <target state="translated">청크 이름을 제공하는 옵션이 없습니다.</target>
        </trans-unit>
        <trans-unit id="b8ed6d814eca2d0cbf9ffca110d21faeddc6d1fe" translate="yes" xml:space="preserve">
          <source>There is one change that you will have to make to your webpack config. Typically, &lt;code&gt;module.exports&lt;/code&gt; points to the configuration object. To use the &lt;code&gt;env&lt;/code&gt; variable, you must convert &lt;code&gt;module.exports&lt;/code&gt; to a function:</source>
          <target state="translated">웹팩 설정을 변경해야합니다. 일반적으로 &lt;code&gt;module.exports&lt;/code&gt; 는 구성 객체를 가리 킵니다. &lt;code&gt;env&lt;/code&gt; 변수 를 사용하려면 &lt;code&gt;module.exports&lt;/code&gt; 를 함수 로 변환해야합니다 .</target>
        </trans-unit>
        <trans-unit id="52799d35176455f8706d99232f96e666a9d333a5" translate="yes" xml:space="preserve">
          <source>There's a lot of ways to load polyfills. For example, to include the &lt;a href=&quot;https://babeljs.io/docs/usage/polyfill/&quot;&gt;&lt;code&gt;babel-polyfill&lt;/code&gt;&lt;/a&gt; we might simply:</source>
          <target state="translated">폴리 필을로드하는 방법에는 여러 가지가 있습니다. 예를 들어 &lt;a href=&quot;https://babeljs.io/docs/usage/polyfill/&quot;&gt; &lt;code&gt;babel-polyfill&lt;/code&gt; &lt;/a&gt; 을 포함시키기 위해 간단히 다음을 수행 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d94ad9229ad8612f68566c5b1de57d970fdc31a1" translate="yes" xml:space="preserve">
          <source>These allow you to configure the webpack &lt;a href=&quot;../configuration/resolve&quot;&gt;resolver&lt;/a&gt; with aliases and extensions.</source>
          <target state="translated">이를 통해 별명 및 확장자로 웹팩 &lt;a href=&quot;../configuration/resolve&quot;&gt;분석기&lt;/a&gt; 를 구성 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="2566a954a0d02deae7eb0cd9561460980b0c8c7b" translate="yes" xml:space="preserve">
          <source>These are the defaults:</source>
          <target state="translated">이것이 기본값입니다 :</target>
        </trans-unit>
        <trans-unit id="5c0bd375a87af39a4fcc4d939a8d4bc34eb2793b" translate="yes" xml:space="preserve">
          <source>These are the remaining configuration options supported by webpack.</source>
          <target state="translated">이들은 웹팩에서 지원하는 나머지 구성 옵션입니다.</target>
        </trans-unit>
        <trans-unit id="ccf6d61b4ad3823e787101eb37a3b1386c459707" translate="yes" xml:space="preserve">
          <source>These options allow webpack to display various &lt;a href=&quot;../configuration/stats&quot;&gt;stats&lt;/a&gt; and style them differently in the console output.</source>
          <target state="translated">이 옵션을 사용하면 웹팩에서 다양한 &lt;a href=&quot;../configuration/stats&quot;&gt;통계&lt;/a&gt; 를 표시 하고 콘솔 출력에서 ​​다르게 스타일을 지정할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="2e0869eb46e5f04ea6e2b1f165c826b5b338ead2" translate="yes" xml:space="preserve">
          <source>These options allow you to bind &lt;a href=&quot;../configuration/module&quot;&gt;modules&lt;/a&gt; as allowed by webpack</source>
          <target state="translated">이 옵션을 사용하면 웹팩에서 허용하는대로 &lt;a href=&quot;../configuration/module&quot;&gt;모듈&lt;/a&gt; 을 바인딩 할 수 있습니다</target>
        </trans-unit>
        <trans-unit id="d8bf2146c955380560f55188ae1ce7347c666b6e" translate="yes" xml:space="preserve">
          <source>These options allow you to manipulate optimisations for a production build using webpack</source>
          <target state="translated">이 옵션을 사용하면 웹팩을 사용하여 프로덕션 빌드에 대한 최적화를 조작 할 수 있습니다</target>
        </trans-unit>
        <trans-unit id="1007a4ad40966f93fd98a21ab15571601e8096f3" translate="yes" xml:space="preserve">
          <source>These options allows you to control how webpack notifies you of assets and entry points that exceed a specific file limit. This feature was inspired by the idea of &lt;a href=&quot;https://github.com/webpack/webpack/issues/3216&quot;&gt;webpack Performance Budgets&lt;/a&gt;.</source>
          <target state="translated">이 옵션을 사용하면 특정 파일 제한을 초과하는 자산 및 진입 점을 웹팩에 알리는 방법을 제어 할 수 있습니다. 이 기능은 &lt;a href=&quot;https://github.com/webpack/webpack/issues/3216&quot;&gt;webpack 성능 예산&lt;/a&gt; 이라는 아이디어에서 영감을 얻었습니다 .</target>
        </trans-unit>
        <trans-unit id="79407cc7a6ab20b192d9e99545132870bb628e82" translate="yes" xml:space="preserve">
          <source>These options are experimental and may be deprecated. As mentioned above, they are typically not necessary and including a &lt;code&gt;new webpack.HotModuleReplacementPlugin()&lt;/code&gt; is enough.</source>
          <target state="translated">이 옵션은 실험용이므로 더 이상 사용되지 않을 수 있습니다. 위에서 언급했듯이, 그것들은 일반적으로 필요하지 않으며 &lt;code&gt;new webpack.HotModuleReplacementPlugin()&lt;/code&gt; 포함합니다 . HotModuleReplacementPlugin () 이면 충분합니다.</target>
        </trans-unit>
        <trans-unit id="0103698eace700deceff10513d7687368a419e01" translate="yes" xml:space="preserve">
          <source>These options are typically used in production:</source>
          <target state="translated">이러한 옵션은 일반적으로 프로덕션에서 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="a79b628e2c2b80d262daaaf5e89a2b05a2721975" translate="yes" xml:space="preserve">
          <source>These options assign the return value of the entry point (e.g. whatever the entry point exported) to a specific object under the name defined by &lt;code&gt;output.library&lt;/code&gt;.</source>
          <target state="translated">이 옵션은 &lt;code&gt;output.library&lt;/code&gt; 에 의해 정의 된 이름으로 특정 객체에 진입 점의 반환 값 (예 : 내 보낸 진입 점)을 지정합니다 .</target>
        </trans-unit>
        <trans-unit id="22b90ab37b5ba5275785aeca2a1aaf4ff18b86db" translate="yes" xml:space="preserve">
          <source>These options assign the return value of the entry point (e.g. whatever the entry point exported) to the name provided by &lt;code&gt;output.library&lt;/code&gt; at whatever scope the bundle was included at.</source>
          <target state="translated">이 옵션 은 번들이 포함 된 모든 범위에서 &lt;code&gt;output.library&lt;/code&gt; 가 제공 한 이름에 진입 점 (예 : 내 보낸 진입 점)의 반환 값을 할당합니다 .</target>
        </trans-unit>
        <trans-unit id="a7d8234fcb48114f73a0a6667f67ab696c51cde7" translate="yes" xml:space="preserve">
          <source>These options change how modules are resolved. webpack provides reasonable defaults, but it is possible to change the resolving in detail. Have a look at &lt;a href=&quot;../concepts/module-resolution&quot;&gt;Module Resolution&lt;/a&gt; for more explanation of how the resolver works.</source>
          <target state="translated">이 옵션은 모듈 해결 방법을 변경합니다. webpack은 합리적인 기본값을 제공하지만 해결 방법을 자세히 변경할 수 있습니다. 한 번 봐 가지고 &lt;a href=&quot;../concepts/module-resolution&quot;&gt;모듈 분해능&lt;/a&gt; 리졸버의 작동 방식을 더 설명에 대한합니다.</target>
        </trans-unit>
        <trans-unit id="502f606f9f22867ba7b4202ff6f348f30f97e661" translate="yes" xml:space="preserve">
          <source>These options configure whether to polyfill or mock certain &lt;a href=&quot;https://nodejs.org/docs/latest/api/globals.html&quot;&gt;Node.js globals&lt;/a&gt; and modules. This allows code originally written for the Node.js environment to run in other environments like the browser.</source>
          <target state="translated">이 옵션은 특정 &lt;a href=&quot;https://nodejs.org/docs/latest/api/globals.html&quot;&gt;Node.js 전역&lt;/a&gt; 및 모듈 을 폴리 필할지 모의할지 구성합니다 . 이를 통해 원래 Node.js 환경 용으로 작성된 코드가 브라우저와 같은 다른 환경에서 실행될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5748337f019e8736c4c08ddb1aaa946717932550" translate="yes" xml:space="preserve">
          <source>These options describe the default settings for the context created when a dynamic dependency is encountered.</source>
          <target state="translated">이 옵션은 동적 종속성이 발생할 때 작성된 컨텍스트의 기본 설정을 설명합니다.</target>
        </trans-unit>
        <trans-unit id="fe61c54946c1acdaaac5a110beb75c2abe251578" translate="yes" xml:space="preserve">
          <source>These options determine how the &lt;a href=&quot;../concepts/modules&quot;&gt;different types of modules&lt;/a&gt; within a project will be treated.</source>
          <target state="translated">이 옵션 은 프로젝트 내의 &lt;a href=&quot;../concepts/modules&quot;&gt;다른 유형의 모듈을&lt;/a&gt; 처리 하는 방법을 결정합니다 .</target>
        </trans-unit>
        <trans-unit id="4f6511d8b476377c46f5d4c2dc3654f0c2d86dd1" translate="yes" xml:space="preserve">
          <source>These options makes the build &lt;a href=&quot;../configuration/watch&quot;&gt;watch&lt;/a&gt; for changes in files of the dependency graph and perform the build again.</source>
          <target state="translated">이 옵션을 사용하면 빌드 가 종속성 그래프 파일의 변경 사항을 &lt;a href=&quot;../configuration/watch&quot;&gt;감시&lt;/a&gt; 하고 빌드를 다시 수행합니다.</target>
        </trans-unit>
        <trans-unit id="454c972b24168045e7370d16bc161582d1d9c81e" translate="yes" xml:space="preserve">
          <source>These options will result in a bundle that comes with a more complete header to ensure compatibility with various module systems. The &lt;code&gt;output.library&lt;/code&gt; option will take on a different meaning under the following &lt;code&gt;output.libraryTarget&lt;/code&gt; options.</source>
          <target state="translated">이러한 옵션은 다양한 모듈 시스템과의 호환성을 보장하기 위해보다 완벽한 헤더와 함께 번들을 제공합니다. &lt;code&gt;output.library&lt;/code&gt; 옵션은 다음에 따라 다른 의미에 걸립니다 &lt;code&gt;output.libraryTarget&lt;/code&gt; 의 옵션을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="08cf024ae104b7e9e8a8a0d48311f520b3337630" translate="yes" xml:space="preserve">
          <source>These properties affect the loaders: &lt;a href=&quot;#rule-loader&quot;&gt;&lt;code&gt;loader&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#rule-options-rule-query&quot;&gt;&lt;code&gt;options&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#rule-use&quot;&gt;&lt;code&gt;use&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">이러한 특성은 로더에 영향을줍니다 ( &lt;a href=&quot;#rule-loader&quot;&gt; &lt;code&gt;loader&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;#rule-options-rule-query&quot;&gt; &lt;code&gt;options&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;#rule-use&quot;&gt; &lt;code&gt;use&lt;/code&gt; )&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="f724bae2af621776d8e318cd6c0f8e5bb1bcca74" translate="yes" xml:space="preserve">
          <source>These rules are evaluated when the Rule condition matches.</source>
          <target state="translated">이러한 규칙은 규칙 조건이 일치 할 때 평가됩니다.</target>
        </trans-unit>
        <trans-unit id="012c1550965907b42ec6d480f2bfaac07754c8c0" translate="yes" xml:space="preserve">
          <source>These steps would occur:</source>
          <target state="translated">이 단계는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="57d372ece1047febfc2ceef2a98e5fe436082e4a" translate="yes" xml:space="preserve">
          <source>These two parameters can be used together to redirect requests in a more targeted way. The &lt;code&gt;newContentCreateContextMap&lt;/code&gt; allows you to map runtime requests to compile requests in the form of an object:</source>
          <target state="translated">이 두 매개 변수를 함께 사용하면보다 구체적인 방식으로 요청을 리디렉션 할 수 있습니다. &lt;code&gt;newContentCreateContextMap&lt;/code&gt; 는 당신이 객체의 형태로 컴파일 요청에 대한 런타임 요청을 매핑 할 수 있습니다 :</target>
        </trans-unit>
        <trans-unit id="f2417bbde2d2cb573d2628acc3066e13e3600335" translate="yes" xml:space="preserve">
          <source>They also serve the purpose of doing &lt;strong&gt;anything else&lt;/strong&gt; that a &lt;a href=&quot;loaders&quot;&gt;loader&lt;/a&gt; cannot do.</source>
          <target state="translated">또한 수행의 목적으로 제공 &lt;strong&gt;아무것도&lt;/strong&gt; &amp;bull; 그래도 &lt;a href=&quot;loaders&quot;&gt;로더가&lt;/a&gt; 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3d4c374abb62de5d26d0baf6648ec4bfbb523c24" translate="yes" xml:space="preserve">
          <source>They are not enabled by default because they expose a runtime overhead and increase in bundle size (JS source maps do not). In addition to that relative paths are buggy and you need to use an absolute public path which include the server URL.</source>
          <target state="translated">런타임 오버 헤드가 노출되고 번들 크기가 증가하므로 기본적으로 사용되지 않습니다 (JS 소스 맵은 그렇지 않음). 또한 상대 경로는 버그가 있으므로 서버 URL을 포함하는 절대 공용 경로를 사용해야합니다.</target>
        </trans-unit>
        <trans-unit id="6967131bc5ac15c7eedbcd99737fb8d7b6bcbf81" translate="yes" xml:space="preserve">
          <source>Third party addons</source>
          <target state="translated">타사 애드온</target>
        </trans-unit>
        <trans-unit id="7049c64126a5ef56b2771dde6ee8579603f61c49" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;stats&lt;/code&gt; object exposes the following methods:</source>
          <target state="translated">이 &lt;code&gt;stats&lt;/code&gt; 객체는 다음과 같은 메소드를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="c856cbc45e829c1fa37cb33d1001f29567b6f09e" translate="yes" xml:space="preserve">
          <source>This CANNOT be used in an async function.</source>
          <target state="translated">비동기 기능에서는 사용할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="5ede9a9f06a97791ce57472a51006e343016b504" translate="yes" xml:space="preserve">
          <source>This CANNOT be used in an asynchronous function.</source>
          <target state="translated">비동기 기능에는 사용할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="d6fcf631173dfe5541552e3cd115c778ac244bb4" translate="yes" xml:space="preserve">
          <source>This Webpack loader inlines SVG as module. If you use Adobe suite or Sketch to export SVGs, you will get auto-generated, unneeded crusts. This loader removes it for you, too.</source>
          <target state="translated">이 웹팩 로더는 SVG를 모듈로 인라인합니다. Adobe 제품군 또는 Sketch를 사용하여 SVG를 내 보내면 자동으로 생성되고 불필요한 크러스트가 생성됩니다. 이 로더도 당신을 위해 그것을 제거합니다.</target>
        </trans-unit>
        <trans-unit id="9bbc872ea1fac7265c2fd82e9ad634bb871e11e4" translate="yes" xml:space="preserve">
          <source>This article will focus on the last of these three parts, the runtime and in particular the manifest.</source>
          <target state="translated">이 기사에서는 이러한 세 부분 중 마지막 부분 인 런타임과 특히 매니페스트에 중점을 둘 것입니다.</target>
        </trans-unit>
        <trans-unit id="a21549500935266e3533d6a74c4979f993c4dcf4" translate="yes" xml:space="preserve">
          <source>This becomes a problem when the module is executed in a CommonJS context where &lt;code&gt;this&lt;/code&gt; is equal to &lt;code&gt;module.exports&lt;/code&gt;. In this case you can override &lt;code&gt;this&lt;/code&gt; using the &lt;a href=&quot;../loaders/imports-loader&quot;&gt;&lt;code&gt;imports-loader&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">모듈은 CommonJS 콘텍스트에서 실행되는 경우에 문제가된다 &lt;code&gt;this&lt;/code&gt; 같은지 &lt;code&gt;module.exports&lt;/code&gt; . 이 경우 대체 할 수 있습니다 &lt;code&gt;this&lt;/code&gt; 사용하여 &lt;a href=&quot;../loaders/imports-loader&quot;&gt; &lt;code&gt;imports-loader&lt;/code&gt; &lt;/a&gt; :</target>
        </trans-unit>
        <trans-unit id="baec1fec2435cd7acf759f93d8b8be9e1c4855c5" translate="yes" xml:space="preserve">
          <source>This boolean is set to true when this is compiled by webpack.</source>
          <target state="translated">이 부울은 웹팩에 의해 컴파일 될 때 true로 설정됩니다.</target>
        </trans-unit>
        <trans-unit id="f899d8d2c6f2c05b71df74eabdec78e2e7328f65" translate="yes" xml:space="preserve">
          <source>This boots the max number of workers in the pool and loads specified modules into the node.js module cache.</source>
          <target state="translated">그러면 풀의 최대 작업자 수가 부팅되고 지정된 모듈이 node.js 모듈 캐시에로드됩니다.</target>
        </trans-unit>
        <trans-unit id="c0bc6ef24b6b80a9bf49aeb98312bc918d80974b" translate="yes" xml:space="preserve">
          <source>This bundle will not work as expected, or not work at all (in the case of the almond loader) if loaded directly with a &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag. It will only work through a RequireJS compatible asynchronous module loader through the actual path to that file, so in this case, the &lt;code&gt;output.path&lt;/code&gt; and &lt;code&gt;output.filename&lt;/code&gt; may become important for this particular setup if these are exposed directly on the server.</source>
          <target state="translated">이 번들은 &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; 태그로 직접로드 된 경우 예상대로 작동하지 않거나 아몬드 로더의 경우 전혀 작동하지 않습니다 . 해당 파일의 실제 경로를 통해 RequireJS 호환 비동기 모듈 로더를 통해서만 작동하므로이 경우 &lt;code&gt;output.path&lt;/code&gt; 및 &lt;code&gt;output.filename&lt;/code&gt; 이 서버에 직접 노출되는 경우이 특정 설정에 중요 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3bbdfa3acc96c26d61ba3ce08b93f184f93f43db" translate="yes" xml:space="preserve">
          <source>This can be done using the &lt;code&gt;externals&lt;/code&gt; configuration:</source>
          <target state="translated">&lt;code&gt;externals&lt;/code&gt; 구성을 사용하여 수행 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="9580dc90d48db5f49636b2d7b71da6ad0884a869" translate="yes" xml:space="preserve">
          <source>This can be especially helpful when implementing some sort of data visualization using a tool like &lt;a href=&quot;https://github.com/d3&quot;&gt;d3&lt;/a&gt;. Instead of making an ajax request and parsing the data at runtime you can load it into your module during the build process so that the parsed data is ready to go as soon as the module hits the browser.</source>
          <target state="translated">이것은 &lt;a href=&quot;https://github.com/d3&quot;&gt;d3&lt;/a&gt; 과 같은 도구를 사용하여 일종의 데이터 시각화를 구현할 때 특히 유용 합니다. 런타임에 Ajax 요청을 작성하고 데이터를 구문 분석하는 대신 모듈이 브라우저에 충돌하자마자 구문 분석 된 데이터가 준비 될 수 있도록 빌드 프로세스 중에 모듈에 데이터를로드 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="7e1bf4407126d15752d86781be25b8cf248f1d37" translate="yes" xml:space="preserve">
          <source>This can be fixed by using Node's &lt;code&gt;--preserve-symlinks&lt;/code&gt; flag which will allow you to develop cross-module, without experiencing inconsistencies when comparing against a normal, non-linked install:</source>
          <target state="translated">이는 노드의 &lt;code&gt;--preserve-symlinks&lt;/code&gt; 플래그를 사용하여 해결할 수 있습니다.이 플래그를 사용하면 일반 비 링크 설치와 비교할 때 불일치하지 않고 크로스 모듈을 개발할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="eb1652868b3142e361ae8e70d6e1db4dfbc49f14" translate="yes" xml:space="preserve">
          <source>This can be useful for allowing different behaviour between builds.</source>
          <target state="translated">빌드간에 다른 동작을 허용하는 데 유용 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="44f088e20304c744db728f5661a86aa4d21f05b1" translate="yes" xml:space="preserve">
          <source>This can be useful if you want to require all files in a directory or matching a pattern, Example:</source>
          <target state="translated">이것은 디렉토리의 모든 파일을 요구하거나 패턴과 일치하려는 경우에 유용 할 수 있습니다 (예 :</target>
        </trans-unit>
        <trans-unit id="8676024628a920433edffaa7ae6a6bad09d7f6a9" translate="yes" xml:space="preserve">
          <source>This can either be a &lt;code&gt;boolean&lt;/code&gt; value or the cache directory path(ex: &lt;code&gt;'./.eslint-loader-cache'&lt;/code&gt;).</source>
          <target state="translated">이 중 하나가 될 수 &lt;code&gt;boolean&lt;/code&gt; (: 예 값 또는 캐시 디렉터리 경로 &lt;code&gt;'./.eslint-loader-cache'&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="5aa95a44f7b56fa270e7540b0c4516d6afc23ae5" translate="yes" xml:space="preserve">
          <source>This concatenation behavior is called &amp;ldquo;scope hoisting.&amp;rdquo;</source>
          <target state="translated">이 연결 동작을 &quot;스코프 호이 스팅&quot;이라고합니다.</target>
        </trans-unit>
        <trans-unit id="a1b60edc5c47b09819f1b28410a8fcf699414214" translate="yes" xml:space="preserve">
          <source>This concept may be used to obtain implicit common vendor chunks:</source>
          <target state="translated">이 개념은 암시 적 공통 공급 업체 청크를 얻는 데 사용될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="8b14c6199ca975479eddf0911297de4ba6c2b77a" translate="yes" xml:space="preserve">
          <source>This configuration can enlarge your initial bundles, it is recommended to use dynamic imports when a module is not immediately needed.</source>
          <target state="translated">이 구성은 초기 번들을 확대 할 수 있으므로 모듈이 즉시 필요하지 않은 경우 동적 가져 오기를 사용하는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="f8178aeab727f5b2ae39ef8a55f0f3db44980db5" translate="yes" xml:space="preserve">
          <source>This configuration object represents the default behavior of the &lt;code&gt;SplitChunksPlugin&lt;/code&gt;.</source>
          <target state="translated">이 구성 객체는 &lt;code&gt;SplitChunksPlugin&lt;/code&gt; 의 기본 동작을 나타냅니다 .</target>
        </trans-unit>
        <trans-unit id="b426c6694d3980dd6d187a7b69ccfdfdc20ed06a" translate="yes" xml:space="preserve">
          <source>This configuration would output a single &lt;code&gt;bundle.js&lt;/code&gt; file into the &lt;code&gt;dist&lt;/code&gt; directory.</source>
          <target state="translated">이 구성은 단일 &lt;code&gt;bundle.js&lt;/code&gt; 파일을 &lt;code&gt;dist&lt;/code&gt; 디렉토리에 출력합니다 .</target>
        </trans-unit>
        <trans-unit id="fa12d5e0203ded4efe2f2beb27f665fe78f5300e" translate="yes" xml:space="preserve">
          <source>This document is intended to give a &lt;strong&gt;high-level&lt;/strong&gt; overview of these concepts, while providing links to detailed concept specific use cases.</source>
          <target state="translated">이 문서는 제공하기위한 것입니다 &lt;strong&gt;높은 수준의&lt;/strong&gt; 상세한 개념 특정 사용 사례에 대한 링크를 제공하면서, 이러한 개념의 개요.</target>
        </trans-unit>
        <trans-unit id="3b55640f7b32656e0d1d0d69041cf653588b5957" translate="yes" xml:space="preserve">
          <source>This doesn't result in any change to the CSS itself but exports multiple classnames.</source>
          <target state="translated">CSS 자체는 변경되지 않지만 여러 클래스 이름을 내 보냅니다.</target>
        </trans-unit>
        <trans-unit id="599f08e0438def7468d189bca38955cb98998e6b" translate="yes" xml:space="preserve">
          <source>This enables local scoped CSS by default. (You can switch it off with &lt;code&gt;:global(...)&lt;/code&gt; or &lt;code&gt;:global&lt;/code&gt; for selectors and/or rules.).</source>
          <target state="translated">기본적으로 로컬 범위 CSS를 활성화합니다. 선택기 및 / 또는 규칙의 경우 &lt;code&gt;:global(...)&lt;/code&gt; 또는 &lt;code&gt;:global&lt;/code&gt; 을 사용 하여 끌 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="3bad9fc6c6d0140a761114db8b4526c2bdc7ed1a" translate="yes" xml:space="preserve">
          <source>This enables you to &lt;code&gt;import './style.css'&lt;/code&gt; into the file that depends on that styling. Now, when that module is run, a &lt;code&gt;&amp;lt;style&amp;gt;&lt;/code&gt; tag with the stringified css will be inserted into the &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; of your html file.</source>
          <target state="translated">이를 통해 &lt;code&gt;import './style.css'&lt;/code&gt; 를 해당 스타일에 따라 파일로 가져올 수 있습니다 . 이제 해당 모듈이 실행되면 문자열로 된 CSS가 포함 된 &lt;code&gt;&amp;lt;style&amp;gt;&lt;/code&gt; 태그가 html 파일 의 &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; 에 삽입 됩니다.</target>
        </trans-unit>
        <trans-unit id="bd65cf352aa69ab40ac2d0a4ed9c1dfdf6de6cea" translate="yes" xml:space="preserve">
          <source>This exposes your library bundle available as a global variable named &lt;code&gt;webpackNumbers&lt;/code&gt; when imported. To make the library compatible with other environments, add &lt;code&gt;libraryTarget&lt;/code&gt; property to the config. This will add the different options about how the library can be exposed.</source>
          <target state="translated">그러면 라이브러리 번들을 가져올 때 &lt;code&gt;webpackNumbers&lt;/code&gt; 라는 전역 변수로 사용할 수 있습니다 . 라이브러리가 다른 환경과 호환되도록하려면 &lt;code&gt;libraryTarget&lt;/code&gt; 특성을 구성에 추가하십시오 . 라이브러리 노출 방법에 대한 다양한 옵션이 추가됩니다.</target>
        </trans-unit>
        <trans-unit id="69ef084d40688e7b5d5d8996554e04e0ca6cfd1c" translate="yes" xml:space="preserve">
          <source>This feature is great for productivity. All we need to do is update our &lt;a href=&quot;https://github.com/webpack/webpack-dev-server&quot;&gt;webpack-dev-server&lt;/a&gt; configuration, and use webpack's built in HMR plugin. We'll also remove the entry point for &lt;code&gt;print.js&lt;/code&gt; as it will now be consumed by the &lt;code&gt;index.js&lt;/code&gt; module.</source>
          <target state="translated">이 기능은 생산성에 좋습니다. &lt;a href=&quot;https://github.com/webpack/webpack-dev-server&quot;&gt;webpack-dev-server&lt;/a&gt; 설정을 업데이트하고 내장 된 HMR 플러그인을 사용하기 만하면됩니다. 또한 &lt;code&gt;index.js&lt;/code&gt; 모듈에 의해 사용될 &lt;code&gt;print.js&lt;/code&gt; 의 진입 점도 제거 할 것 입니다.</target>
        </trans-unit>
        <trans-unit id="79ad76420d55e87371fad64492f2963aea24c4eb" translate="yes" xml:space="preserve">
          <source>This feature is provided by webpack's internal &lt;a href=&quot;https://github.com/webpack/webpack/blob/master/lib/NodeStuffPlugin.js&quot;&gt;&lt;code&gt;NodeStuffPlugin&lt;/code&gt;&lt;/a&gt; plugin. If the target is &quot;web&quot; (default) or &quot;webworker&quot;, the &lt;a href=&quot;https://github.com/webpack/webpack/blob/master/lib/node/NodeSourcePlugin.js&quot;&gt;&lt;code&gt;NodeSourcePlugin&lt;/code&gt;&lt;/a&gt; plugin is also activated.</source>
          <target state="translated">이 기능은 웹팩의 내부 &lt;a href=&quot;https://github.com/webpack/webpack/blob/master/lib/NodeStuffPlugin.js&quot;&gt; &lt;code&gt;NodeStuffPlugin&lt;/code&gt; &lt;/a&gt; 플러그인에 의해 제공됩니다 . 대상이 &quot;web&quot;(기본값) 또는 &quot;webworker&quot;인 경우 &lt;a href=&quot;https://github.com/webpack/webpack/blob/master/lib/node/NodeSourcePlugin.js&quot;&gt; &lt;code&gt;NodeSourcePlugin&lt;/code&gt; &lt;/a&gt; 플러그인도 활성화됩니다.</target>
        </trans-unit>
        <trans-unit id="b704dfb503dd69b6a849b0e22a57a5d32765f8b9" translate="yes" xml:space="preserve">
          <source>This feature relies on &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise&quot;&gt;&lt;code&gt;Promise&lt;/code&gt;&lt;/a&gt; internally. If you use &lt;code&gt;import()&lt;/code&gt; with older browsers, remember to shim &lt;code&gt;Promise&lt;/code&gt; using a polyfill such as &lt;a href=&quot;https://github.com/stefanpenner/es6-promise&quot;&gt;es6-promise&lt;/a&gt; or &lt;a href=&quot;https://github.com/taylorhakes/promise-polyfill&quot;&gt;promise-polyfill&lt;/a&gt;.</source>
          <target state="translated">이 기능은 내부적 으로 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise&quot;&gt; &lt;code&gt;Promise&lt;/code&gt; 를&lt;/a&gt; 사용합니다 . 당신이 사용하는 경우 &lt;code&gt;import()&lt;/code&gt; 이전 버전의 브라우저로를 심은 기억 &lt;code&gt;Promise&lt;/code&gt; 같은 polyfill을 사용 &lt;a href=&quot;https://github.com/stefanpenner/es6-promise&quot;&gt;ES6-약속&lt;/a&gt; 또는 &lt;a href=&quot;https://github.com/taylorhakes/promise-polyfill&quot;&gt;약속-polyfill&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="a46c09f986aa73dc78c4b47b58c94cabba924769" translate="yes" xml:space="preserve">
          <source>This feature relies on &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise&quot;&gt;&lt;code&gt;Promise&lt;/code&gt;&lt;/a&gt; internally. If you use &lt;code&gt;require.ensure&lt;/code&gt; with older browsers, remember to shim &lt;code&gt;Promise&lt;/code&gt; using a polyfill such as &lt;a href=&quot;https://github.com/stefanpenner/es6-promise&quot;&gt;es6-promise&lt;/a&gt; or &lt;a href=&quot;https://github.com/taylorhakes/promise-polyfill&quot;&gt;promise-polyfill&lt;/a&gt;.</source>
          <target state="translated">이 기능은 내부적 으로 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise&quot;&gt; &lt;code&gt;Promise&lt;/code&gt; 를&lt;/a&gt; 사용합니다 . 구형 브라우저에서 &lt;code&gt;require.ensure&lt;/code&gt; 를 사용하는 경우 &lt;a href=&quot;https://github.com/stefanpenner/es6-promise&quot;&gt;es6-promise&lt;/a&gt; 또는 &lt;a href=&quot;https://github.com/taylorhakes/promise-polyfill&quot;&gt;promise-polyfill&lt;/a&gt; 과 같은 polyfill을 사용하여 &lt;code&gt;Promise&lt;/code&gt; 를 shim 해야 합니다.</target>
        </trans-unit>
        <trans-unit id="1784fa4ee081d52871ddd8875156431960fca6ae" translate="yes" xml:space="preserve">
          <source>This feature relies on &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise&quot;&gt;&lt;code&gt;Promise&lt;/code&gt;&lt;/a&gt; internally. If you use AMD with older browsers (e.g. Internet Explorer 11), remember to shim &lt;code&gt;Promise&lt;/code&gt; using a polyfill such as &lt;a href=&quot;https://github.com/stefanpenner/es6-promise&quot;&gt;es6-promise&lt;/a&gt; or &lt;a href=&quot;https://github.com/taylorhakes/promise-polyfill&quot;&gt;promise-polyfill&lt;/a&gt;.</source>
          <target state="translated">이 기능은 내부적 으로 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise&quot;&gt; &lt;code&gt;Promise&lt;/code&gt; 를&lt;/a&gt; 사용합니다 . 이전 브라우저 (예 : Internet Explorer 11)에서 AMD를 사용하는 경우 &lt;a href=&quot;https://github.com/stefanpenner/es6-promise&quot;&gt;es6-promise&lt;/a&gt; 또는 &lt;a href=&quot;https://github.com/taylorhakes/promise-polyfill&quot;&gt;promise-polyfill&lt;/a&gt; 과 같은 폴리 필을 사용하여 &lt;code&gt;Promise&lt;/code&gt; 를 shim 해야 합니다.</target>
        </trans-unit>
        <trans-unit id="2f10d727220baca2938b1a342e008a2d35949f1c" translate="yes" xml:space="preserve">
          <source>This follows the same rules as those specified for file resolution. But the &lt;a href=&quot;../configuration/resolve#resolveloader&quot;&gt;&lt;code&gt;resolveLoader&lt;/code&gt;&lt;/a&gt; configuration option can be used to have separate resolution rules for loaders.</source>
          <target state="translated">이는 파일 확인에 지정된 규칙과 동일한 규칙을 따릅니다. 그러나 &lt;a href=&quot;../configuration/resolve#resolveloader&quot;&gt; &lt;code&gt;resolveLoader&lt;/code&gt; &lt;/a&gt; 구성 옵션을 사용하여 로더에 대한 별도의 분석 규칙을 가질 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f32268d39ceea09d3d6306eb50cca10ac3efd123" translate="yes" xml:space="preserve">
          <source>This guide contains some useful tips for improving build/compilation performance.</source>
          <target state="translated">이 안내서에는 빌드 / 컴파일 성능을 향상시키는 데 유용한 팁이 있습니다.</target>
        </trans-unit>
        <trans-unit id="6e74ee278b6483e63e246262d4b0558794583866" translate="yes" xml:space="preserve">
          <source>This guide extends on code examples found in the &lt;a href=&quot;asset-management&quot;&gt;&lt;code&gt;Asset Management&lt;/code&gt;&lt;/a&gt; guide.</source>
          <target state="translated">이 안내서는 &lt;a href=&quot;asset-management&quot;&gt; &lt;code&gt;Asset Management&lt;/code&gt; &lt;/a&gt; 안내서 에있는 코드 예제를 확장합니다 .</target>
        </trans-unit>
        <trans-unit id="5b251b76cf265164795401de844aec084670ed8b" translate="yes" xml:space="preserve">
          <source>This guide extends on code examples found in the &lt;a href=&quot;development&quot;&gt;Development&lt;/a&gt; guide.</source>
          <target state="translated">이 안내서는 &lt;a href=&quot;development&quot;&gt;개발&lt;/a&gt; 안내서 에있는 코드 예제를 확장합니다 .</target>
        </trans-unit>
        <trans-unit id="e695885af13bd16faad41148a2a86747da0469ea" translate="yes" xml:space="preserve">
          <source>This guide extends on code examples found in the &lt;a href=&quot;output-management&quot;&gt;Output Management&lt;/a&gt; guide.</source>
          <target state="translated">이 안내서는 &lt;a href=&quot;output-management&quot;&gt;출력 관리&lt;/a&gt; 안내서 에있는 코드 예제를 확장합니다 .</target>
        </trans-unit>
        <trans-unit id="e586717908f30e2eb3dae17b0c51e6aa57c70149" translate="yes" xml:space="preserve">
          <source>This guide extends the examples provided in &lt;a href=&quot;getting-started&quot;&gt;Getting Started&lt;/a&gt; and &lt;a href=&quot;output-management&quot;&gt;Output Management&lt;/a&gt;. Please make sure you are at least familiar with the examples provided in them.</source>
          <target state="translated">이 안내서는 &lt;a href=&quot;getting-started&quot;&gt;시작&lt;/a&gt; 및 &lt;a href=&quot;output-management&quot;&gt;출력 관리에&lt;/a&gt; 제공된 예제를 확장합니다 . 최소한 제공된 예제에 익숙해 지십시오.</target>
        </trans-unit>
        <trans-unit id="73feb60d4ff54e1bed9cecb930b3d4cb4688b9bd" translate="yes" xml:space="preserve">
          <source>This guide focuses on the configuration needed to ensure files produced by webpack compilation can remain cached unless their contents has changed.</source>
          <target state="translated">이 안내서는 웹팩 컴파일에 의해 생성 된 파일의 내용이 변경되지 않는 한 캐시 된 상태를 유지하는 데 필요한 구성에 중점을 둡니다.</target>
        </trans-unit>
        <trans-unit id="28ff626f461f33c15358e30a2a67dd11c6916c34" translate="yes" xml:space="preserve">
          <source>This guide goes through the various methods used to install webpack.</source>
          <target state="translated">이 안내서는 웹팩 설치에 사용되는 다양한 방법을 설명합니다.</target>
        </trans-unit>
        <trans-unit id="04ab105d2ba31796ba8058507be23bb87f5478d3" translate="yes" xml:space="preserve">
          <source>This guide is a small follow-up to &lt;a href=&quot;code-splitting&quot;&gt;Code Splitting&lt;/a&gt;. If you have not yet read through that guide, please do so now.</source>
          <target state="translated">이 안내서는 &lt;a href=&quot;code-splitting&quot;&gt;코드 분할에&lt;/a&gt; 대한 간단한 후속 조치 입니다. 이 안내서를 아직 읽지 않았다면 지금 읽어보십시오.</target>
        </trans-unit>
        <trans-unit id="9515b6e28f5a9f26a4966a59ee8efe94d078667b" translate="yes" xml:space="preserve">
          <source>This guide stems from the &lt;a href=&quot;getting-started&quot;&gt;&lt;em&gt;Getting Started&lt;/em&gt;&lt;/a&gt; guide.</source>
          <target state="translated">이 안내서는 &lt;a href=&quot;getting-started&quot;&gt;&lt;em&gt;시작&lt;/em&gt;&lt;/a&gt; 안내서 에서 발췌 한 것 입니다.</target>
        </trans-unit>
        <trans-unit id="7db5a0744cb411b222f5ddf37115a92427f093c9" translate="yes" xml:space="preserve">
          <source>This indicates which chunks will be selected for optimization. If a string is provided, possible values are &lt;code&gt;all&lt;/code&gt;, &lt;code&gt;async&lt;/code&gt;, and &lt;code&gt;initial&lt;/code&gt;. Providing &lt;code&gt;all&lt;/code&gt; can be particularly powerful because it means that chunks can be shared even between async and non-async chunks.</source>
          <target state="translated">최적화를 위해 어떤 청크가 선택 될지를 나타냅니다. 문자열이 제공되면 가능한 값은 &lt;code&gt;all&lt;/code&gt; , &lt;code&gt;async&lt;/code&gt; 및 &lt;code&gt;initial&lt;/code&gt; 입니다. 청크와 비동기가 아닌 청크 간에도 청크를 공유 할 수 있으므로 &lt;code&gt;all&lt;/code&gt; 제공 하는 것이 특히 강력 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="8df877acd9008859a1bdb1efea3293a6acf64ffc" translate="yes" xml:space="preserve">
          <source>This is &lt;code&gt;false&lt;/code&gt; if the module is currently executing, and &lt;code&gt;true&lt;/code&gt; if the sync execution has finished.</source>
          <target state="translated">이다 &lt;code&gt;false&lt;/code&gt; 모듈이 현재 실행되는 경우와 &lt;code&gt;true&lt;/code&gt; 동기 실행이 완료된 경우.</target>
        </trans-unit>
        <trans-unit id="ecb3ef0422ffd6e3c5b0a329b020146b6b6f51bb" translate="yes" xml:space="preserve">
          <source>This is &lt;code&gt;true&lt;/code&gt; by default in &lt;code&gt;production&lt;/code&gt; mode.</source>
          <target state="translated">이다 &lt;code&gt;true&lt;/code&gt; 에 기본적으로 &lt;code&gt;production&lt;/code&gt; 모드.</target>
        </trans-unit>
        <trans-unit id="df1f3325933036ef23805a4ec9f47646d400ceed" translate="yes" xml:space="preserve">
          <source>This is a great choice when you are looking to quickly setup a webpack configuration for an application or tool with one entry point (i.e., a library). However, there is not much flexibility in extending or scaling your configuration with this syntax.</source>
          <target state="translated">하나의 진입 점 (예 : 라이브러리)으로 응용 프로그램 또는 도구에 대한 웹팩 구성을 신속하게 설정하려는 경우이 옵션을 선택하십시오. 그러나이 구문을 사용하여 구성을 확장하거나 확장 할 때 유연성이 그리 크지 않습니다.</target>
        </trans-unit>
        <trans-unit id="c87ce6ad59d4ba0a8d22cf3002d88ef702a80d86" translate="yes" xml:space="preserve">
          <source>This is a list of plugins which are used by webpack internally.</source>
          <target state="translated">웹팩에서 내부적으로 사용되는 플러그인 목록입니다.</target>
        </trans-unit>
        <trans-unit id="8886144b094f0f97dada64e907fc12e5eda8ec9e" translate="yes" xml:space="preserve">
          <source>This is an important option when using on-demand-loading or loading external resources like images, files, etc. If an incorrect value is specified you'll receive 404 errors while loading these resources.</source>
          <target state="translated">이 옵션은 주문형로드를 사용하거나 이미지, 파일 등과 같은 외부 리소스를로드 할 때 중요한 옵션입니다. 잘못된 값을 지정하면 이러한 리소스를로드하는 동안 404 오류가 발생합니다.</target>
        </trans-unit>
        <trans-unit id="0757868f46be2aa16e1835586e0d7a20832c2a91" translate="yes" xml:space="preserve">
          <source>This is an object where each property is the name of a Node global or module and each value may be one of the following...</source>
          <target state="translated">이것은 각 속성이 Node 전역 또는 모듈의 이름이고 각 값이 다음 중 하나 일 수있는 객체입니다.</target>
        </trans-unit>
        <trans-unit id="48cde90b57a464eb3fff794ce73eb3c3ac1fa916" translate="yes" xml:space="preserve">
          <source>This is because webpack includes certain boilerplate, specifically the runtime and manifest, in the entry chunk.</source>
          <target state="translated">이는 웹팩에 항목 청크에 특정 상용구, 특히 런타임 및 매니페스트가 포함되어 있기 때문입니다.</target>
        </trans-unit>
        <trans-unit id="560b1952bb069ebc7dec6531e687fec09448474f" translate="yes" xml:space="preserve">
          <source>This is by far the easiest, and most intuitive, way to split code. However, it is more manual and has some pitfalls we will go over. Let's take a look at how we might split another module from the main bundle:</source>
          <target state="translated">이것은 코드를 분할하는 가장 쉽고 직관적 인 방법입니다. 그러나 더 수동적이며 우리가 극복해야 할 함정이 있습니다. 메인 번들에서 다른 모듈을 분리하는 방법을 살펴 보겠습니다 :</target>
        </trans-unit>
        <trans-unit id="e22332e1691cc2177c430d4688ce63cb96fe89c0" translate="yes" xml:space="preserve">
          <source>This is equivalent to the following &lt;code&gt;DefinePlugin&lt;/code&gt; application:</source>
          <target state="translated">이것은 다음 &lt;code&gt;DefinePlugin&lt;/code&gt; 응용 프로그램 과 동일 합니다.</target>
        </trans-unit>
        <trans-unit id="a247f4b44e6328f72d37accf666f7af5287fe2f2" translate="yes" xml:space="preserve">
          <source>This is happening because the button's &lt;code&gt;onclick&lt;/code&gt; event handler is still bound to the original &lt;code&gt;printMe&lt;/code&gt; function.</source>
          <target state="translated">버튼의 &lt;code&gt;onclick&lt;/code&gt; 이벤트 핸들러가 여전히 원래 &lt;code&gt;printMe&lt;/code&gt; 함수에 바인딩되어 있기 때문에 이런 일이 발생 합니다.</target>
        </trans-unit>
        <trans-unit id="cfbbab771cd3e0d8e7090c42bd261a535ae96610" translate="yes" xml:space="preserve">
          <source>This is just one example, but there are many others that can easily trip people up. Luckily, there are a lot of loaders out there (some of which are mentioned below) that will make hot module replacement much easier.</source>
          <target state="translated">이것은 하나의 예일 뿐이지 만 사람들을 쉽게 여행 할 수있는 다른 많은 것들이 있습니다. 운 좋게도, 핫 모듈을 훨씬 쉽게 교체 할 수있는 로더가 많이 있습니다 (일부는 아래에 언급 됨).</target>
        </trans-unit>
        <trans-unit id="ed595ad5f73af435979138b3d3627bf88533699b" translate="yes" xml:space="preserve">
          <source>This is only needed in rare cases for compatibility!</source>
          <target state="translated">호환성을 위해 드문 경우에만 필요합니다!</target>
        </trans-unit>
        <trans-unit id="0a04aff2cecd73b8ca74cfcee6fa3f22d2d86581" translate="yes" xml:space="preserve">
          <source>This is useful for third-party modules that rely on global variables like &lt;code&gt;$&lt;/code&gt; or &lt;code&gt;this&lt;/code&gt; being the &lt;code&gt;window&lt;/code&gt; object. The imports loader can add the necessary &lt;code&gt;require('whatever')&lt;/code&gt; calls, so those modules work with webpack.</source>
          <target state="translated">이것은 세계와 같은 변수에 의존하는 타사 모듈에 유용 &lt;code&gt;$&lt;/code&gt; 또는 &lt;code&gt;this&lt;/code&gt; 되는 &lt;code&gt;window&lt;/code&gt; 객체입니다. 가져 오기 로더는 필요한 &lt;code&gt;require('whatever')&lt;/code&gt; 호출을 추가 할 수 있으므로 해당 모듈은 웹팩에서 작동합니다.</target>
        </trans-unit>
        <trans-unit id="5c2df09178c8def03e43ef498bdd896740082e04" translate="yes" xml:space="preserve">
          <source>This is what we aim to change. Once we reach the end of this module we should be able to stop the server, hit refresh and still see our application.</source>
          <target state="translated">이것이 우리의 목표입니다. 이 모듈의 끝에 도달하면 서버를 중지하고 새로 고침을 누르고 응용 프로그램을 계속 볼 수 있어야합니다.</target>
        </trans-unit>
        <trans-unit id="b45f7eb5f9affbddb392058c7d7f4abfaa7fad00" translate="yes" xml:space="preserve">
          <source>This leaves any dependent modules unchanged, i.e. the code shown below will still work:</source>
          <target state="translated">이렇게하면 종속 모듈이 변경되지 않습니다. 즉, 아래 표시된 코드는 여전히 작동합니다.</target>
        </trans-unit>
        <trans-unit id="46a3f41a9605c3c4e04a060a9596421064960a0d" translate="yes" xml:space="preserve">
          <source>This loader [cannot be used] with [CSS Modules] out of the box due to the way &lt;code&gt;css-loader&lt;/code&gt; processes file imports. To make them work properly, either add the css-loader&amp;rsquo;s [&lt;code&gt;importLoaders&lt;/code&gt;] option.</source>
          <target state="translated">&lt;code&gt;css-loader&lt;/code&gt; 가 파일 가져 오기를 처리 하는 방식으로 인해이 로더 는 즉시 [CSS 모듈]과 함께 사용할 수 없습니다 . 제대로 작동하게하려면 css-loader의 [ &lt;code&gt;importLoaders&lt;/code&gt; ] 옵션을 추가하십시오 .</target>
        </trans-unit>
        <trans-unit id="5d190b8c7f6d0f3902b044fdeec81f5b5fe3f35d" translate="yes" xml:space="preserve">
          <source>This loader allows use of &lt;a href=&quot;https://github.com/substack/node-browserify/wiki/list-of-transforms&quot;&gt;browserify transforms&lt;/a&gt; via a webpack loader.</source>
          <target state="translated">이 로더를 사용 하면 웹팩 로더를 통해 browserify &lt;a href=&quot;https://github.com/substack/node-browserify/wiki/list-of-transforms&quot;&gt;변환&lt;/a&gt; 을 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="fe9d535f7bc40b833c73bb475459fe6f55acdbac" translate="yes" xml:space="preserve">
          <source>This loader also supports the following loader-specific option:</source>
          <target state="translated">이 로더는 다음 로더 특정 옵션도 지원합니다.</target>
        </trans-unit>
        <trans-unit id="7f1d3b58142cc368ab79e7a3d3404472a3fa8c0c" translate="yes" xml:space="preserve">
          <source>This loader is especially useful when using 3rd-party libraries having their own source maps. If not extracted and processed into the source map of the webpack bundle, browsers may misinterpret source map data. &lt;code&gt;source-map-loader&lt;/code&gt; allows webpack to maintain source map data continuity across libraries so ease of debugging is preserved.</source>
          <target state="translated">이 로더는 자체 소스 맵이있는 타사 라이브러리를 사용할 때 특히 유용합니다. 웹팩 번들의 소스 맵으로 추출되어 처리되지 않으면 브라우저가 소스 맵 데이터를 잘못 해석 할 수 있습니다. &lt;code&gt;source-map-loader&lt;/code&gt; 를 사용하면 웹팩이 라이브러리에서 소스 맵 데이터 연속성을 유지하므로 디버깅이 쉬워집니다.</target>
        </trans-unit>
        <trans-unit id="c13ed36167d63c496c0f6f91ea0830c119623ac7" translate="yes" xml:space="preserve">
          <source>This makes the server only accessible on &lt;code&gt;127.0.0.1&lt;/code&gt;, which is fine, because nginx takes care of making it available on your host PC.</source>
          <target state="translated">이것은 nginx가 호스트 PC 에서 서버를 사용할 수 있도록 관리하기 때문에 &lt;code&gt;127.0.0.1&lt;/code&gt; 에서만 서버에 액세스 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f6d2ee006876cf0259837350ed2e7e14e3c6e566" translate="yes" xml:space="preserve">
          <source>This may change in the future, when the module system (i. e. webpack) supports loader matching by origin.</source>
          <target state="translated">모듈 시스템 (예 : 웹팩)이 원점에 따라 로더 일치를 지원할 때 향후 변경 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="aa062b6d5cead179ec54169c8e5af773c2ed6f12" translate="yes" xml:space="preserve">
          <source>This may degrade build performance.</source>
          <target state="translated">빌드 성능이 저하 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d33959ca5bc487e790d0b48b89538a6812c28404" translate="yes" xml:space="preserve">
          <source>This means dynamic requires are supported but will cause all possible modules to be included in the bundle.</source>
          <target state="translated">이는 동적 요구가 지원되지만 가능한 모든 모듈이 번들에 포함되도록합니다.</target>
        </trans-unit>
        <trans-unit id="d283638a7cf787c4d96d0cb34244baab95292b27" translate="yes" xml:space="preserve">
          <source>This means that when we &lt;code&gt;import * as D3 from &quot;d3&quot;&lt;/code&gt; this will really resolve to the file in the &lt;code&gt;browser&lt;/code&gt; property. The &lt;code&gt;browser&lt;/code&gt; property takes precedence here because it's the first item in &lt;code&gt;mainFields&lt;/code&gt;. Meanwhile, a Node.js application bundled by webpack will resolve by default to the file in the &lt;code&gt;module&lt;/code&gt; field.</source>
          <target state="translated">즉 &lt;code&gt;import * as D3 from &quot;d3&quot;&lt;/code&gt; 때 &lt;code&gt;browser&lt;/code&gt; 속성 의 파일로 실제로 해석됩니다 . &lt;code&gt;browser&lt;/code&gt; 가의 첫 번째 항목이기 때문에 속성은 여기에 우선합니다 &lt;code&gt;mainFields&lt;/code&gt; . 한편, 웹팩에 번들로 제공되는 Node.js 애플리케이션은 기본적으로 &lt;code&gt;module&lt;/code&gt; 필드 의 파일로 해석됩니다 .</target>
        </trans-unit>
        <trans-unit id="a5409a29ade1ec4c17b7eaa00e7d86e1af4d2f79" translate="yes" xml:space="preserve">
          <source>This means that your library expects a dependency named &lt;code&gt;lodash&lt;/code&gt; to be available in the consumer's environment.</source>
          <target state="translated">이는 라이브러리가 &lt;code&gt;lodash&lt;/code&gt; 라는 종속성 이 소비자 환경에서 사용 가능할 것으로 예상 함을 의미 합니다.</target>
        </trans-unit>
        <trans-unit id="f777fcccade65135ca746231b68bbfa503391afc" translate="yes" xml:space="preserve">
          <source>This might result in a large chunk containing all external packages. It is recommended to only include your core frameworks and utilities and dynamically load the rest of the dependencies.</source>
          <target state="translated">이로 인해 모든 외부 패키지가 포함 된 큰 덩어리가 생길 수 있습니다. 핵심 프레임 워크와 유틸리티 만 포함하고 나머지 종속성을 동적으로로드하는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="d526e1e403decb2661013c42f1e3e331b6d3a771" translate="yes" xml:space="preserve">
          <source>This module adds stuff from Node.js that is not available in non Node.js environments.</source>
          <target state="translated">이 모듈은 Node.js가 아닌 환경에서는 사용할 수없는 Node.js의 항목을 추가합니다.</target>
        </trans-unit>
        <trans-unit id="6ab0268836547089f2dcf783f9be200724a579dd" translate="yes" xml:space="preserve">
          <source>This module can support non-standard JavaScript file formats when a compatible compiler is registered via the &lt;code&gt;require&lt;/code&gt; option. If the option is defined, &lt;code&gt;config-loader&lt;/code&gt; will attempt to require the specified module(s) before the target config is found and loaded.</source>
          <target state="translated">이 모듈은 호환 옵션 이 &lt;code&gt;require&lt;/code&gt; 옵션을 통해 등록 될 때 비표준 JavaScript 파일 형식을 지원할 수 있습니다 . 옵션이 정의되면 &lt;code&gt;config-loader&lt;/code&gt; 는 대상 구성을 찾아서로드하기 전에 지정된 모듈을 요구합니다.</target>
        </trans-unit>
        <trans-unit id="f45c003c14dd79dda08fe5ed461cf012badc0fdf" translate="yes" xml:space="preserve">
          <source>This module is exposed as &lt;code&gt;webpack.Compiler&lt;/code&gt; and can be used directly. See &lt;a href=&quot;https://github.com/pksjce/webpack-internal-examples/tree/master/compiler-example&quot;&gt;this example&lt;/a&gt; for more information.</source>
          <target state="translated">이 모듈은 &lt;code&gt;webpack.Compiler&lt;/code&gt; 로 제공되며 직접 사용할 수 있습니다. 자세한 내용은 &lt;a href=&quot;https://github.com/pksjce/webpack-internal-examples/tree/master/compiler-example&quot;&gt;이 예&lt;/a&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="6cba27f11c42ca7da5420b0f4d9f2641d3844e73" translate="yes" xml:space="preserve">
          <source>This module requires a minimum of Node v6.9.0 and Webpack v4.0.0.</source>
          <target state="translated">이 모듈에는 최소 노드 v6.9.0 및 Webpack v4.0.0이 필요합니다.</target>
        </trans-unit>
        <trans-unit id="b3a35d9e538001d0d628d180d914a08e8f5c0837" translate="yes" xml:space="preserve">
          <source>This module requires a minimum of Node v6.9.0 and webpack v4.0.0.</source>
          <target state="translated">이 모듈에는 최소 노드 v6.9.0 및 웹팩 v4.0.0이 필요합니다.</target>
        </trans-unit>
        <trans-unit id="f881a340456fac03baeb3dd035c116286f43e93a" translate="yes" xml:space="preserve">
          <source>This module requires a minimum of Node v6.9.0 and works with Webpack v3 and Webpack v4.</source>
          <target state="translated">이 모듈에는 최소 노드 v6.9.0이 필요하며 Webpack v3 및 Webpack v4에서 작동합니다.</target>
        </trans-unit>
        <trans-unit id="c109cc9d524df5e8821464e562a600dcd9557732" translate="yes" xml:space="preserve">
          <source>This module supports extending webpack configuration files with &lt;a href=&quot;https://eslint.org/docs/user-guide/configuring#extending-configuration-files&quot;&gt;ESLint-style&lt;/a&gt;&lt;code&gt;extends&lt;/code&gt; functionality. This feature allows users to create a &quot;base&quot; config and in essence, &quot;inherit&quot; from that base config in a separate config. A bare-bones example:</source>
          <target state="translated">이 모듈은 &lt;a href=&quot;https://eslint.org/docs/user-guide/configuring#extending-configuration-files&quot;&gt;ESLint 스타일 &lt;/a&gt; &lt;code&gt;extends&lt;/code&gt; 기능 으로 웹팩 구성 파일 확장을 지원 합니다. 이 기능을 통해 사용자는 &quot;기본&quot;구성을 만들 수 있으며 본질적으로 별도의 구성으로 해당 기본 구성에서 &quot;상속&quot;할 수 있습니다. 베어 본 예제 :</target>
        </trans-unit>
        <trans-unit id="0dba5974c2e26fd236ce4621f1e4d99eac196b30" translate="yes" xml:space="preserve">
          <source>This module utilizes &lt;a href=&quot;https://github.com/davidtheclark/cosmiconfig&quot;&gt;&lt;code&gt;cosmiconfig&lt;/code&gt;&lt;/a&gt; which supports declaring a webpack configuration in a number of different file formats including; &lt;code&gt;.webpackrc&lt;/code&gt;, &lt;code&gt;webpack.config.js&lt;/code&gt;, and a &lt;code&gt;webpack&lt;/code&gt; property in a &lt;code&gt;package.json&lt;/code&gt;.</source>
          <target state="translated">이 모듈은 &lt;a href=&quot;https://github.com/davidtheclark/cosmiconfig&quot;&gt; &lt;code&gt;cosmiconfig&lt;/code&gt; &lt;/a&gt; 를 사용 하여 다음과 같은 다양한 파일 형식으로 웹팩 구성 선언을 지원합니다. &lt;code&gt;.webpackrc&lt;/code&gt; 는 , &lt;code&gt;webpack.config.js&lt;/code&gt; 및 &lt;code&gt;webpack&lt;/code&gt; A의 특성 &lt;code&gt;package.json&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="005b9fb11eab47f37d7ae0f0642a6320e8d309df" translate="yes" xml:space="preserve">
          <source>This needs to be changed if multiple webpack runtimes (from different compilation) are used on the same webpage.</source>
          <target state="translated">동일한 웹 페이지에서 여러 웹팩 런타임 (다른 컴파일의)을 사용하는 경우이를 변경해야합니다.</target>
        </trans-unit>
        <trans-unit id="fade0e5971b52e5136488a11c9a7a0a582ad3d8b" translate="yes" xml:space="preserve">
          <source>This object is passed straight to Node.js HTTPS module, so see the &lt;a href=&quot;https://nodejs.org/api/https.html&quot;&gt;HTTPS documentation&lt;/a&gt; for more information.</source>
          <target state="translated">이 객체는 Node.js HTTPS 모듈로 바로 전달되므로 자세한 내용은 &lt;a href=&quot;https://nodejs.org/api/https.html&quot;&gt;HTTPS 설명서&lt;/a&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="a4aaf96997e7b0c90746fd6c3567a4f7aa2c8ac4" translate="yes" xml:space="preserve">
          <source>This only works when using &lt;code&gt;contentBase&lt;/code&gt; as a &lt;code&gt;string&lt;/code&gt;.</source>
          <target state="translated">이것은 &lt;code&gt;contentBase&lt;/code&gt; 를 &lt;code&gt;string&lt;/code&gt; 로 사용할 때만 작동 합니다 .</target>
        </trans-unit>
        <trans-unit id="79925c99f93c2ec0087ae0ffced8f00ba5d1c9ed" translate="yes" xml:space="preserve">
          <source>This option allows you to set the key your module looks for to a truthy value. As it happens, the AMD support in webpack ignores the defined name anyways.</source>
          <target state="translated">이 옵션을 사용하면 모듈이 찾는 키를 정확한 값으로 설정할 수 있습니다. 웹팩의 AMD 지원은 정의 된 이름을 무시합니다.</target>
        </trans-unit>
        <trans-unit id="a6afd747886b88535614a5e26c65d541e9551535" translate="yes" xml:space="preserve">
          <source>This option allows you to whitelist services that are allowed to access the dev server.</source>
          <target state="translated">이 옵션을 사용하면 개발자 서버에 액세스 할 수있는 서비스를 허용 목록에 추가 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="81ebe300973eaab68c9516ed46654327e6a950da" translate="yes" xml:space="preserve">
          <source>This option broadcasts the server via ZeroConf networking on start</source>
          <target state="translated">이 옵션은 시작시 ZeroConf 네트워킹을 통해 서버를 브로드 캐스트합니다.</target>
        </trans-unit>
        <trans-unit id="ea6a426438d914faf36d6b6546285906e19b322a" translate="yes" xml:space="preserve">
          <source>This option can be used to apply loaders to the dependencies of a specific module or set of modules.</source>
          <target state="translated">이 옵션은 로더를 특정 모듈 또는 모듈 세트의 종속성에 적용하는 데 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="6c5b0689cf315f1fa55cc15e5495f2b28e91801e" translate="yes" xml:space="preserve">
          <source>This option closes the server when stdin ends.</source>
          <target state="translated">이 옵션은 stdin이 종료되면 서버를 닫습니다.</target>
        </trans-unit>
        <trans-unit id="e40c156196854884ee36846872a829a5ea05f019" translate="yes" xml:space="preserve">
          <source>This option controls if and how source maps are generated.</source>
          <target state="translated">이 옵션은 소스 맵 생성 여부와 방법을 제어합니다.</target>
        </trans-unit>
        <trans-unit id="25a84ffd7582fe4058e843c749db628513a0ab92" translate="yes" xml:space="preserve">
          <source>This option determines the modules namespace used with the &lt;a href=&quot;#output-devtoolmodulefilenametemplate&quot;&gt;&lt;code&gt;output.devtoolModuleFilenameTemplate&lt;/code&gt;&lt;/a&gt;. When not specified, it will default to the value of: &lt;a href=&quot;#output-library&quot;&gt;&lt;code&gt;output.library&lt;/code&gt;&lt;/a&gt;. It's used to prevent source file path collisions in source maps when loading multiple libraries built with webpack.</source>
          <target state="translated">이 옵션은 &lt;a href=&quot;#output-devtoolmodulefilenametemplate&quot;&gt; &lt;code&gt;output.devtoolModuleFilenameTemplate&lt;/code&gt; &lt;/a&gt; 과 함께 사용되는 모듈 네임 스페이스를 결정합니다 . 지정하지 않으면 기본값은 &lt;a href=&quot;#output-library&quot;&gt; &lt;code&gt;output.library&lt;/code&gt; &lt;/a&gt; 입니다. 웹팩으로 빌드 된 여러 라이브러리를로드 할 때 소스 맵에서 소스 파일 경로 충돌을 방지하는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="0b05266442b54b0e6cddc19a8b33de324b93c206" translate="yes" xml:space="preserve">
          <source>This option determines the name of each output bundle. The bundle is written to the directory specified by the &lt;a href=&quot;#output-path&quot;&gt;&lt;code&gt;output.path&lt;/code&gt;&lt;/a&gt; option.</source>
          <target state="translated">이 옵션은 각 출력 번들의 이름을 결정합니다. 번들은 &lt;a href=&quot;#output-path&quot;&gt; &lt;code&gt;output.path&lt;/code&gt; &lt;/a&gt; 옵션으로 지정된 디렉토리에 작성됩니다 .</target>
        </trans-unit>
        <trans-unit id="134a18d88afd40fa1eb2c26f1e4104950925ab2d" translate="yes" xml:space="preserve">
          <source>This option determines the name of non-entry chunk files. See &lt;a href=&quot;#output-filename&quot;&gt;&lt;code&gt;output.filename&lt;/code&gt;&lt;/a&gt; option for details on the possible values.</source>
          <target state="translated">이 옵션은 비 입력 청크 파일의 이름을 결정합니다. 가능한 값에 대한 자세한 내용 은 &lt;a href=&quot;#output-filename&quot;&gt; &lt;code&gt;output.filename&lt;/code&gt; &lt;/a&gt; 옵션을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="d4e4e471712f459632f09e0c39bf27d36a6dbdb0" translate="yes" xml:space="preserve">
          <source>This option does not have any effect when using the Node.js API.</source>
          <target state="translated">Node.js API를 사용할 때는이 옵션이 적용되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="5458bee731a283c4d30a78fb34bb6abbb6b5e834" translate="yes" xml:space="preserve">
          <source>This option has no effect when used with &lt;code&gt;quiet&lt;/code&gt; or &lt;code&gt;noInfo&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;quiet&lt;/code&gt; 또는 &lt;code&gt;noInfo&lt;/code&gt; 와 함께 사용하면이 옵션이 적용되지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="5bfcabd6c992e600f41a1aa251ee7329a7ba5fb6" translate="yes" xml:space="preserve">
          <source>This option is &lt;strong&gt;deprecated&lt;/strong&gt; in favor of &lt;code&gt;Rule.use&lt;/code&gt;.</source>
          <target state="translated">이 옵션은 &lt;code&gt;Rule.use&lt;/code&gt; 대신 &lt;strong&gt;사용되지 않습니다&lt;/strong&gt; .</target>
        </trans-unit>
        <trans-unit id="0b2615cafe4c11a02e3c6b641329caeb2b73812b" translate="yes" xml:space="preserve">
          <source>This option is &lt;strong&gt;deprecated&lt;/strong&gt; in favor of &lt;code&gt;before&lt;/code&gt; and will be removed in v3.0.0.</source>
          <target state="translated">이 옵션은 &lt;strong&gt;사용되지&lt;/strong&gt; 찬성 &lt;code&gt;before&lt;/code&gt; 및 v3.0.0에서 제거 될 예정입니다.</target>
        </trans-unit>
        <trans-unit id="eeeee94e8478cf5a5c7d08179d6f3b8a21bf53e1" translate="yes" xml:space="preserve">
          <source>This option is only activated (via &lt;code&gt;NodeSourcePlugin&lt;/code&gt;) when the target is unspecified, &quot;web&quot; or &quot;webworker&quot;.</source>
          <target state="translated">이 옵션은 대상이 지정되지 않은 경우 ( &quot;web&quot;또는 &quot;webworker&quot;인 경우 에만 &lt;code&gt;NodeSourcePlugin&lt;/code&gt; 을 통해 ) 활성화됩니다 .</target>
        </trans-unit>
        <trans-unit id="a526b9466ed989feda820cb55f9f69f26039a4f1" translate="yes" xml:space="preserve">
          <source>This option is only used when &lt;a href=&quot;devtool&quot;&gt;&lt;code&gt;devtool&lt;/code&gt;&lt;/a&gt; uses a SourceMap option which writes an output file.</source>
          <target state="translated">이 옵션은 &lt;a href=&quot;devtool&quot;&gt; &lt;code&gt;devtool&lt;/code&gt; &lt;/a&gt; 이 출력 파일을 쓰는 SourceMap 옵션을 사용하는 경우에만 사용됩니다 .</target>
        </trans-unit>
        <trans-unit id="9d105f5fd42ba76d220e6270bcb29980c2aad7c5" translate="yes" xml:space="preserve">
          <source>This option is only used when &lt;a href=&quot;devtool&quot;&gt;&lt;code&gt;devtool&lt;/code&gt;&lt;/a&gt; uses an options which requires module names.</source>
          <target state="translated">이 옵션은 &lt;a href=&quot;devtool&quot;&gt; &lt;code&gt;devtool&lt;/code&gt; &lt;/a&gt; 이 모듈 이름이 필요한 옵션을 사용하는 경우에만 사용됩니다 .</target>
        </trans-unit>
        <trans-unit id="de31799adc89f7a4cd6058f2c07e2539b194dca6" translate="yes" xml:space="preserve">
          <source>This option is useful when you want to have fine-grained control over how the CommonsChunk algorithm determines where modules should be moved to.</source>
          <target state="translated">이 옵션은 CommonsChunk 알고리즘이 모듈을 이동할 위치를 결정하는 방법을 세밀하게 제어하려는 경우에 유용합니다.</target>
        </trans-unit>
        <trans-unit id="fc94bd5f6db752fb7c18f0955317532502daaadf" translate="yes" xml:space="preserve">
          <source>This option lets the browser open with your local IP.</source>
          <target state="translated">이 옵션을 사용하면 브라우저가 로컬 IP로 열립니다.</target>
        </trans-unit>
        <trans-unit id="28aab3ea772c4e463a58a18eed36c7b2231756dc" translate="yes" xml:space="preserve">
          <source>This option lets you precisely control what bundle information gets displayed. This can be a nice middle ground if you want some bundle information, but not all of it.</source>
          <target state="translated">이 옵션을 사용하면 표시 할 번들 정보를 정확하게 제어 할 수 있습니다. 번들 정보를 원한다면 모두 좋은 것은 아닙니다.</target>
        </trans-unit>
        <trans-unit id="7179b6103bce281929f60e10386c1b58232fbfd9" translate="yes" xml:space="preserve">
          <source>This option lets you reduce the compilations in &lt;strong&gt;lazy mode&lt;/strong&gt;. By default in &lt;strong&gt;lazy mode&lt;/strong&gt;, every request results in a new compilation. With &lt;code&gt;filename&lt;/code&gt;, it's possible to only compile when a certain file is requested.</source>
          <target state="translated">이 옵션을 사용하면 &lt;strong&gt;지연 모드&lt;/strong&gt; 에서 컴파일을 줄일 수 있습니다 . &lt;strong&gt;지연 모드&lt;/strong&gt; 에서는 기본적으로 모든 요청에 ​​새로운 컴파일이 수행됩니다. &lt;code&gt;filename&lt;/code&gt; 을 사용하면 특정 파일이 요청 된 경우에만 컴파일 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="792f455240a68f9b61e21b9e79e2fc861945d378" translate="yes" xml:space="preserve">
          <source>This option specifies the &lt;strong&gt;public URL&lt;/strong&gt; of the output directory when referenced in a browser. A relative URL is resolved relative to the HTML page (or &lt;code&gt;&amp;lt;base&amp;gt;&lt;/code&gt; tag). Server-relative URLs, protocol-relative URLs or absolute URLs are also possible and sometimes required, i. e. when hosting assets on a CDN.</source>
          <target state="translated">이 옵션 은 브라우저에서 참조 될 때 출력 디렉토리 의 &lt;strong&gt;공용 URL&lt;/strong&gt; 을 지정 합니다. 상대 URL은 HTML 페이지 (또는 &lt;code&gt;&amp;lt;base&amp;gt;&lt;/code&gt; 태그)를 기준으로 확인됩니다. 서버 기준 URL, 프로토콜 기준 URL 또는 절대 URL도 가능하며 때로는 CDN에서 자산을 호스팅 할 때 필요합니다.</target>
        </trans-unit>
        <trans-unit id="60acf0ba0bbca59f35e19be67e124a4e268482f8" translate="yes" xml:space="preserve">
          <source>This option will enable &lt;a href=&quot;http://eslint.org/docs/user-guide/command-line-interface#fix&quot;&gt;ESLint autofix feature&lt;/a&gt;.</source>
          <target state="translated">이 옵션은 &lt;a href=&quot;http://eslint.org/docs/user-guide/command-line-interface#fix&quot;&gt;ESLint 자동 수정 기능&lt;/a&gt; 을 활성화 합니다 .</target>
        </trans-unit>
        <trans-unit id="e44d33ad69dc261c348171441ef0d4d67723a9af" translate="yes" xml:space="preserve">
          <source>This option will enable caching of the linting results into a file. This is particularly useful in reducing linting time when doing a full build.</source>
          <target state="translated">이 옵션은 린트 결과를 파일로 캐싱 할 수 있습니다. 이것은 전체 빌드를 수행 할 때 보푸라기 시간을 줄이는 데 특히 유용합니다.</target>
        </trans-unit>
        <trans-unit id="b43f40ea06f007473435e0404327c4b4d96e7f5c" translate="yes" xml:space="preserve">
          <source>This package allows transpiling JavaScript files using &lt;a href=&quot;https://github.com/babel/babel&quot;&gt;Babel&lt;/a&gt; and &lt;a href=&quot;https://github.com/webpack/webpack&quot;&gt;webpack&lt;/a&gt;.</source>
          <target state="translated">이 패키지는 &lt;a href=&quot;https://github.com/babel/babel&quot;&gt;Babel&lt;/a&gt; 및 &lt;a href=&quot;https://github.com/webpack/webpack&quot;&gt;webpack을&lt;/a&gt; 사용하여 JavaScript 파일을 변환 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="e114be6f0d2032ec10de78d94815095479360859" translate="yes" xml:space="preserve">
          <source>This page describes the options that affect the behavior of webpack-dev-server (short: dev-server).</source>
          <target state="translated">이 페이지는 webpack-dev-server의 동작에 영향을주는 옵션에 대해 설명합니다 (약식 : dev-server).</target>
        </trans-unit>
        <trans-unit id="eee9d72cff11504900ba3d87265458efdd7aab58" translate="yes" xml:space="preserve">
          <source>This plugin and it's options can also be invoked via the CLI:</source>
          <target state="translated">이 플러그인과 옵션은 CLI를 통해 호출 할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="8d6ec8e843f819d7e74de36d5d13f0736352ecb7" translate="yes" xml:space="preserve">
          <source>This plugin can be used in two different modes, &lt;em&gt;scoped&lt;/em&gt; and &lt;em&gt;mapped&lt;/em&gt;.</source>
          <target state="translated">이 플러그인은 &lt;em&gt;scoped&lt;/em&gt; 및 &lt;em&gt;map의&lt;/em&gt; 두 가지 모드로 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="fda8ea39c72e0e691ebbc3795728b5fc978d18df" translate="yes" xml:space="preserve">
          <source>This plugin creates bundles with translations baked in. So you can serve the translated bundle to your clients.</source>
          <target state="translated">이 플러그인은 번역이 포함 된 번들을 작성하므로 번역 된 번들을 클라이언트에 제공 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="46f3843161330f7496c2a700471ef010db97a960" translate="yes" xml:space="preserve">
          <source>This plugin enables more fine grained control of source map generation. It is also enabled automatically by certain settings of the &lt;a href=&quot;../configuration/devtool&quot;&gt;&lt;code&gt;devtool&lt;/code&gt;&lt;/a&gt; configuration option.</source>
          <target state="translated">이 플러그인을 사용하면 소스 맵 생성을보다 세밀하게 제어 할 수 있습니다. 또한 &lt;a href=&quot;../configuration/devtool&quot;&gt; &lt;code&gt;devtool&lt;/code&gt; &lt;/a&gt; 구성 옵션 의 특정 설정에 의해 자동으로 활성화됩니다 .</target>
        </trans-unit>
        <trans-unit id="308436c86675d805a1b54d3185c57d08f2121250" translate="yes" xml:space="preserve">
          <source>This plugin extracts CSS into separate files. It creates a CSS file per JS file which contains CSS. It supports On-Demand-Loading of CSS and SourceMaps.</source>
          <target state="translated">이 플러그인은 CSS를 별도의 파일로 추출합니다. CSS를 포함하는 JS 파일 당 CSS 파일을 작성합니다. CSS 및 SourceMap의 주문형 로딩을 지원합니다.</target>
        </trans-unit>
        <trans-unit id="52604672e0fee1f1648352992bdf12b764549a3c" translate="yes" xml:space="preserve">
          <source>This plugin is used in a separate webpack config exclusively to create a dll-only-bundle. It creates a &lt;code&gt;manifest.json&lt;/code&gt; file, which is used by the &lt;a href=&quot;dll-plugin#dllreferenceplugin&quot;&gt;&lt;code&gt;DllReferencePlugin&lt;/code&gt;&lt;/a&gt; to map dependencies.</source>
          <target state="translated">이 플러그인은 별도의 webpack 설정에서 독점적으로 dll 전용 번들을 만드는 데 사용됩니다. &lt;a href=&quot;dll-plugin#dllreferenceplugin&quot;&gt; &lt;code&gt;DllReferencePlugin&lt;/code&gt; &lt;/a&gt; 이 종속성을 맵핑하는 데 사용 하는 &lt;code&gt;manifest.json&lt;/code&gt; 파일을 작성합니다 .</target>
        </trans-unit>
        <trans-unit id="95ab448688001829beed83209692c645fd511719" translate="yes" xml:space="preserve">
          <source>This plugin is used in the primary webpack config, it references the dll-only-bundle(s) to require pre-built dependencies.</source>
          <target state="translated">이 플러그인은 기본 웹팩 구성에서 사용되며 사전 빌드 된 종속성을 요구하기 위해 dll 전용 번들을 참조합니다.</target>
        </trans-unit>
        <trans-unit id="8f11ee21edd3718f762dd02cff0cac34b96334ca" translate="yes" xml:space="preserve">
          <source>This plugin should be used only on &lt;code&gt;production&lt;/code&gt; builds without &lt;code&gt;style-loader&lt;/code&gt; in the loaders chain, especially if you want to have HMR in &lt;code&gt;development&lt;/code&gt;.</source>
          <target state="translated">이 플러그인은 로더 체인에 &lt;code&gt;style-loader&lt;/code&gt; 가 없는 &lt;code&gt;production&lt;/code&gt; 빌드 , 특히 HMR을 &lt;code&gt;development&lt;/code&gt; 하려는 경우에만 사용해야합니다 .</target>
        </trans-unit>
        <trans-unit id="f5cca03718053fc9520367846f9709b01dcb7529" translate="yes" xml:space="preserve">
          <source>This plugin supports the following options:</source>
          <target state="translated">이 플러그인은 다음 옵션을 지원합니다.</target>
        </trans-unit>
        <trans-unit id="feee9da7ca86409cd9c2790742caad4fc594057c" translate="yes" xml:space="preserve">
          <source>This plugin supports the use of Google's Closure Tools with webpack.</source>
          <target state="translated">이 플러그인은 웹팩에서 Google의 폐쇄 도구 사용을 지원합니다.</target>
        </trans-unit>
        <trans-unit id="b06506995ff20545e054b285bfd17c9d57869022" translate="yes" xml:space="preserve">
          <source>This plugin uses &lt;a href=&quot;https://github.com/fabiosantoscode/terser&quot;&gt;terser&lt;/a&gt; to minify your JavaScript.</source>
          <target state="translated">이 플러그인은 &lt;a href=&quot;https://github.com/fabiosantoscode/terser&quot;&gt;terser&lt;/a&gt; 를 사용 하여 JavaScript를 축소합니다.</target>
        </trans-unit>
        <trans-unit id="2ccca80fad8f11ea1ca02f91ea558e659f64b4f4" translate="yes" xml:space="preserve">
          <source>This plugin uses &lt;a href=&quot;https://github.com/mishoo/UglifyJS2/tree/harmony&quot;&gt;UglifyJS v3 &lt;/a&gt;&lt;a href=&quot;https://npmjs.com/package/uglify-es&quot;&gt;(&lt;code&gt;uglify-es&lt;/code&gt;)&lt;/a&gt; to minify your JavaScript</source>
          <target state="translated">이 플러그인은 &lt;a href=&quot;https://github.com/mishoo/UglifyJS2/tree/harmony&quot;&gt;UglifyJS v3 &lt;/a&gt;&lt;a href=&quot;https://npmjs.com/package/uglify-es&quot;&gt;( &lt;code&gt;uglify-es&lt;/code&gt; )&lt;/a&gt; 를 사용하여 JavaScript를 축소 합니다</target>
        </trans-unit>
        <trans-unit id="a87a75bf8d2601bfb557a819c4f455325b79b898" translate="yes" xml:space="preserve">
          <source>This plugin will be removed in the future as it only exists for migration.</source>
          <target state="translated">이 플러그인은 마이그레이션 용으로 만 존재하므로 향후에 제거 될 예정입니다.</target>
        </trans-unit>
        <trans-unit id="417ca5f69549104dc84916c24cec679ccbbff0a8" translate="yes" xml:space="preserve">
          <source>This plugin will cause hashes to be based on the relative path of the module, generating a four character string as the module id. Suggested for use in production.</source>
          <target state="translated">이 플러그인은 해시가 모듈의 상대 경로를 기반으로하여 모듈 ID로 4 개의 문자열을 생성합니다. 생산에 사용하도록 제안합니다.</target>
        </trans-unit>
        <trans-unit id="69190150b569dd2720829fe25dc4429844f6fdb0" translate="yes" xml:space="preserve">
          <source>This plugin will enable the same concatenation behavior in webpack.</source>
          <target state="translated">이 플러그인은 웹팩에서 동일한 연결 동작을 활성화합니다.</target>
        </trans-unit>
        <trans-unit id="e20365f34269feb4c5eead0efe10e444b9130e1c" translate="yes" xml:space="preserve">
          <source>This project was inspired by, and is a heavily modified version of &lt;code&gt;sasslint-webpack-plugin&lt;/code&gt;.</source>
          <target state="translated">이 프로젝트는 영감을 받았으며 크게 수정 된 &lt;code&gt;sasslint-webpack-plugin&lt;/code&gt; 버전입니다 .</target>
        </trans-unit>
        <trans-unit id="790283d62998f77b2077ace49fbf145534de7451" translate="yes" xml:space="preserve">
          <source>This property allows webpack to control what files are used to calculate performance hints. The default function is seen below:</source>
          <target state="translated">이 속성을 사용하면 웹팩에서 성능 힌트를 계산하는 데 사용되는 파일을 제어 할 수 있습니다. 기본 기능은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="5ce7936b8dd1ab00c6a839051bb3b049b5d0046c" translate="yes" xml:space="preserve">
          <source>This section contains guides for understanding and mastering the wide variety of tools and features that webpack offers. The first is a simple guide that takes you through &lt;a href=&quot;guides/installation&quot;&gt;installation&lt;/a&gt;.</source>
          <target state="translated">이 섹션에는 웹팩이 제공하는 다양한 도구 및 기능을 이해하고 마스터하기위한 안내서가 포함되어 있습니다. 첫 번째는 &lt;a href=&quot;guides/installation&quot;&gt;설치 과정을&lt;/a&gt; 안내하는 간단한 안내서입니다 .</target>
        </trans-unit>
        <trans-unit id="766149f8898bac17386a9e716229c762e8f543e5" translate="yes" xml:space="preserve">
          <source>This section covers all &lt;strong&gt;variables&lt;/strong&gt; available in code compiled with webpack. Modules will have access to certain data from the compilation process through &lt;code&gt;module&lt;/code&gt; and other variables.</source>
          <target state="translated">이 섹션은 웹팩으로 컴파일 된 코드에서 사용 가능한 모든 &lt;strong&gt;변수를&lt;/strong&gt; 다룹니다 . 모듈은 &lt;code&gt;module&lt;/code&gt; 및 기타 변수를 통해 컴파일 프로세스에서 특정 데이터에 액세스 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="2a158e22d6effe6b38eb57854423c9c249557bde" translate="yes" xml:space="preserve">
          <source>This section covers all methods available in code compiled with webpack. When using webpack to bundle your application, you can pick from a variety of module syntax styles including &lt;a href=&quot;https://en.wikipedia.org/wiki/ECMAScript#6th_Edition_-_ECMAScript_2015&quot;&gt;ES6&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/CommonJS&quot;&gt;CommonJS&lt;/a&gt;, and &lt;a href=&quot;https://en.wikipedia.org/wiki/Asynchronous_module_definition&quot;&gt;AMD&lt;/a&gt;.</source>
          <target state="translated">이 섹션은 웹팩으로 컴파일 된 코드에서 사용 가능한 모든 메소드를 다룹니다. 웹팩을 사용하여 애플리케이션을 번들링 할 때 &lt;a href=&quot;https://en.wikipedia.org/wiki/ECMAScript#6th_Edition_-_ECMAScript_2015&quot;&gt;ES6&lt;/a&gt; , &lt;a href=&quot;https://en.wikipedia.org/wiki/CommonJS&quot;&gt;CommonJS&lt;/a&gt; 및 &lt;a href=&quot;https://en.wikipedia.org/wiki/Asynchronous_module_definition&quot;&gt;AMD를&lt;/a&gt; 포함한 다양한 모듈 구문 스타일 중에서 선택할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="86a104a27c2cf4c551b1216d744083e3310b40f0" translate="yes" xml:space="preserve">
          <source>This section will focus on adding an offline experience to our app. We'll achieve this using a Google project called &lt;a href=&quot;https://github.com/GoogleChrome/workbox&quot;&gt;Workbox&lt;/a&gt; which provides tools that help make offline support for web apps easier to setup.</source>
          <target state="translated">이 섹션에서는 앱에 오프라인 환경을 추가하는 데 중점을 둡니다. &lt;a href=&quot;https://github.com/GoogleChrome/workbox&quot;&gt;웹앱&lt;/a&gt; 에 대한 오프라인 지원을보다 쉽게 ​​설정할 수있는 도구를 제공하는 Workbox 라는 Google 프로젝트를 사용하여이를 달성 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3efc36ab784fb7c924e3fdee5581efb69eaec3d5" translate="yes" xml:space="preserve">
          <source>This set of options allows you to better debug the application containing assets compiled with webpack</source>
          <target state="translated">이 옵션 세트를 사용하면 웹팩으로 컴파일 된 자산이 포함 된 응용 프로그램을보다 효과적으로 디버깅 할 수 있습니다</target>
        </trans-unit>
        <trans-unit id="98aa68cf05a9c0e5328953ace43257566681626c" translate="yes" xml:space="preserve">
          <source>This set of options allows you to manipulate certain &lt;a href=&quot;../configuration/output&quot;&gt;output&lt;/a&gt; parameters of your build.</source>
          <target state="translated">이 옵션 세트를 사용하면 빌드의 특정 &lt;a href=&quot;../configuration/output&quot;&gt;출력&lt;/a&gt; 매개 변수 를 조작 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="1b7899ac54672adc98b8151b2866a403aa9d27ff" translate="yes" xml:space="preserve">
          <source>This set of options is identical to the &lt;code&gt;resolve&lt;/code&gt; property set above, but is used only to resolve webpack's &lt;a href=&quot;../concepts/loaders&quot;&gt;loader&lt;/a&gt; packages. Default:</source>
          <target state="translated">이 옵션 세트는 위에 설정된 &lt;code&gt;resolve&lt;/code&gt; 속성 과 동일 하지만 webpack의 &lt;a href=&quot;../concepts/loaders&quot;&gt;로더&lt;/a&gt; 패키지 를 확인하는 데만 사용됩니다 . 기본:</target>
        </trans-unit>
        <trans-unit id="1f833ed9c75f47b94fbdc43cd56d37d70b51115f" translate="yes" xml:space="preserve">
          <source>This set of options is picked up by &lt;a href=&quot;https://github.com/webpack/webpack-dev-server&quot;&gt;webpack-dev-server&lt;/a&gt; and can be used to change its behavior in various ways. Here's a simple example that gzips and serves everything from our &lt;code&gt;dist/&lt;/code&gt; directory:</source>
          <target state="translated">이 옵션 세트는 &lt;a href=&quot;https://github.com/webpack/webpack-dev-server&quot;&gt;webpack-dev-server에&lt;/a&gt; 의해 선택 되며 다양한 방식으로 동작을 변경하는 데 사용될 수 있습니다. 다음은 &lt;code&gt;dist/&lt;/code&gt; 디렉토리 에서 모든 것을 압축하고 제공하는 간단한 예제입니다 :</target>
        </trans-unit>
        <trans-unit id="a8eecff3ab5954bf0b0246b89e983ae677f253d2" translate="yes" xml:space="preserve">
          <source>This setting is primarily used as a workaround for &lt;a href=&quot;https://github.com/webpack-contrib/style-loader/issues/163&quot;&gt;css clashes&lt;/a&gt; when using one or more &lt;a href=&quot;https://robertknight.github.io/posts/webpack-dll-plugins/&quot;&gt;DllPlugin&lt;/a&gt;'s. &lt;code&gt;base&lt;/code&gt; allows you to prevent either the &lt;em&gt;app&lt;/em&gt;'s css (or &lt;em&gt;DllPlugin2&lt;/em&gt;'s css) from overwriting &lt;em&gt;DllPlugin1&lt;/em&gt;'s css by specifying a css module id base which is greater than the range used by &lt;em&gt;DllPlugin1&lt;/em&gt; e.g.:</source>
          <target state="translated">이 설정은 주로 하나 이상의 &lt;a href=&quot;https://robertknight.github.io/posts/webpack-dll-plugins/&quot;&gt;DllPlugin을&lt;/a&gt; 사용할 때 &lt;a href=&quot;https://github.com/webpack-contrib/style-loader/issues/163&quot;&gt;CSS 충돌에&lt;/a&gt; 대한 해결 방법으로 사용됩니다 . &lt;code&gt;base&lt;/code&gt; 는 어느 것을 방지 할 수 있도록 &lt;em&gt;응용 프로그램&lt;/em&gt; 의 CSS (또는 &lt;em&gt;DllPlugin2&lt;/em&gt; 덮어의 CSS)를 &lt;em&gt;DllPlugin1&lt;/em&gt; 에서 사용하는 범위보다 큰 CSS 모듈 ID베이스 지정의 CSS를 &lt;em&gt;DllPlugin1&lt;/em&gt; 예를 :&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="f8fccd0349e08bbe9dad684332c1fd923a8ec939" translate="yes" xml:space="preserve">
          <source>This setup makes your code a lot more portable as everything that is closely coupled now lives together. Let's say you want to use &lt;code&gt;/my-component&lt;/code&gt; in another project, simply copy or move it into the &lt;code&gt;/components&lt;/code&gt; directory over there. As long as you've installed any &lt;em&gt;external dependencies&lt;/em&gt; and your &lt;em&gt;configuration has the same loaders&lt;/em&gt; defined, you should be good to go.</source>
          <target state="translated">이 설정은 밀접하게 결합 된 모든 것이 함께 존재하므로 코드를 훨씬 더 이식성있게 만듭니다. 다른 프로젝트에서 &lt;code&gt;/my-component&lt;/code&gt; 를 사용하고 싶은 경우 간단히 &lt;code&gt;/components&lt;/code&gt; 디렉토리 로 복사하거나 이동하십시오 . &lt;em&gt;외부 종속성을&lt;/em&gt; 설치 하고 &lt;em&gt;구성에 동일한 로더가&lt;/em&gt; 정의되어 있으면 계속 진행해야합니다.</target>
        </trans-unit>
        <trans-unit id="5ea123abc7292c6bf233ab48356c85638b29b540" translate="yes" xml:space="preserve">
          <source>This simply prepends &lt;code&gt;var $ = require(&quot;jquery&quot;);&lt;/code&gt; to &lt;code&gt;example.js&lt;/code&gt;.</source>
          <target state="translated">이것은 단순히 앞에 추가합니다. &lt;code&gt;var $ = require(&quot;jquery&quot;);&lt;/code&gt; 에 &lt;code&gt;example.js&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="e10024d095957cbce567008893996f42ae796af8" translate="yes" xml:space="preserve">
          <source>This small library is a core utility in webpack but can also be used elsewhere to provide a similar plugin interface. Many objects in webpack extend the &lt;code&gt;Tapable&lt;/code&gt; class. The class exposes &lt;code&gt;tap&lt;/code&gt;, &lt;code&gt;tapAsync&lt;/code&gt;, and &lt;code&gt;tapPromise&lt;/code&gt; methods which plugins can use to inject custom build steps that will be fired throughout a compilation.</source>
          <target state="translated">이 작은 라이브러리는 웹팩의 핵심 유틸리티이지만 유사한 플러그인 인터페이스를 제공하기 위해 다른 곳에서도 사용할 수 있습니다. 웹팩의 많은 객체는 &lt;code&gt;Tapable&lt;/code&gt; 클래스를 확장합니다 . 이 클래스는 &lt;code&gt;tap&lt;/code&gt; , &lt;code&gt;tapAsync&lt;/code&gt; 및 &lt;code&gt;tapPromise&lt;/code&gt; 메소드를 제공 합니다.이 메소드는 플러그인이 컴파일 과정 에서 시작될 사용자 정의 빌드 단계를 주입하는 데 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e5ea9cb5352fb456a9a9457c25f28a4bfdc7c1d4" translate="yes" xml:space="preserve">
          <source>This syntax is used to describe all the possible ways that an external library can be available. &lt;code&gt;lodash&lt;/code&gt; here is available as &lt;code&gt;lodash&lt;/code&gt; under AMD and CommonJS module systems but available as &lt;code&gt;_&lt;/code&gt; in a global variable form. &lt;code&gt;subtract&lt;/code&gt; here is available via the property &lt;code&gt;subtract&lt;/code&gt; under the global &lt;code&gt;math&lt;/code&gt; object (e.g. &lt;code&gt;window['math']['subtract']&lt;/code&gt;).</source>
          <target state="translated">이 구문은 외부 라이브러리를 사용할 수있는 모든 가능한 방법을 설명하는 데 사용됩니다. &lt;code&gt;lodash&lt;/code&gt; 는 AMD 및 CommonJS 모듈 시스템에서 &lt;code&gt;lodash&lt;/code&gt; 로 사용할 수 있지만 전역 변수 형식 으로 &lt;code&gt;_&lt;/code&gt; 로 사용할 수 있습니다 . &lt;code&gt;subtract&lt;/code&gt; 여기하는 속성을 통해 볼 수 있습니다 &lt;code&gt;subtract&lt;/code&gt; 세계에서 &lt;code&gt;math&lt;/code&gt; 객체 (예 : &lt;code&gt;window['math']['subtract']&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="427ef31c4a006d01b5992ffbd53818e83fa34ef1" translate="yes" xml:space="preserve">
          <source>This tells &lt;code&gt;webpack-dev-server&lt;/code&gt; to serve the files from the &lt;code&gt;dist&lt;/code&gt; directory on &lt;code&gt;localhost:8080&lt;/code&gt;.</source>
          <target state="translated">이것은 &lt;code&gt;webpack-dev-server&lt;/code&gt; 가 &lt;code&gt;localhost:8080&lt;/code&gt; 의 &lt;code&gt;dist&lt;/code&gt; 디렉토리에서 파일을 제공하도록 지시 합니다 .</target>
        </trans-unit>
        <trans-unit id="4cc861c1f2b80d6e02a543239491223597388780" translate="yes" xml:space="preserve">
          <source>This uses the &lt;code&gt;jade-loader&lt;/code&gt; for &lt;code&gt;.jade&lt;/code&gt; files, and the &lt;a href=&quot;../loaders/style-loader&quot;&gt;&lt;code&gt;style-loader&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../loaders/css-loader&quot;&gt;&lt;code&gt;css-loader&lt;/code&gt;&lt;/a&gt; for &lt;code&gt;.css&lt;/code&gt; files.</source>
          <target state="translated">이것은 사용 &lt;code&gt;jade-loader&lt;/code&gt; 에 대한 &lt;code&gt;.jade&lt;/code&gt; 파일 및 &lt;a href=&quot;../loaders/style-loader&quot;&gt; &lt;code&gt;style-loader&lt;/code&gt; &lt;/a&gt; 와 &lt;a href=&quot;../loaders/css-loader&quot;&gt; &lt;code&gt;css-loader&lt;/code&gt; &lt;/a&gt; 에 대한 &lt;code&gt;.css&lt;/code&gt; 파일을.</target>
        </trans-unit>
        <trans-unit id="7c17361464bcd8285937109314dec7f4ead3d25c" translate="yes" xml:space="preserve">
          <source>This variable is equal to default value of &lt;code&gt;module.exports&lt;/code&gt; (i.e. an object). If &lt;code&gt;module.exports&lt;/code&gt; gets overwritten, &lt;code&gt;exports&lt;/code&gt; will no longer be exported.</source>
          <target state="translated">이 변수는 &lt;code&gt;module.exports&lt;/code&gt; 의 기본값 (예 : 객체)과 같습니다. 경우 &lt;code&gt;module.exports&lt;/code&gt; 가 덮어 도착, &lt;code&gt;exports&lt;/code&gt; 더 이상 수출되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="d39d49f3373eb27aa1cf74db3b29f828968cc1a8" translate="yes" xml:space="preserve">
          <source>This variable is only available with the &lt;code&gt;HotModuleReplacementPlugin&lt;/code&gt; or the &lt;code&gt;ExtendedAPIPlugin&lt;/code&gt;. It provides access to the hash of the compilation.</source>
          <target state="translated">이 변수는 &lt;code&gt;HotModuleReplacementPlugin&lt;/code&gt; 또는 &lt;code&gt;ExtendedAPIPlugin&lt;/code&gt; 에서만 사용할 수 있습니다 . 컴파일 해시에 대한 액세스를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="c7b6d958a04307a8e984f741ba381d787423c0c9" translate="yes" xml:space="preserve">
          <source>This walkthrough stems from &lt;a href=&quot;tree-shaking&quot;&gt;Tree Shaking&lt;/a&gt; and &lt;a href=&quot;development&quot;&gt;Development&lt;/a&gt;. Please ensure you are familiar with the concepts/setup introduced in those guides before continuing on.</source>
          <target state="translated">이 연습은 &lt;a href=&quot;tree-shaking&quot;&gt;Tree Shaking&lt;/a&gt; and &lt;a href=&quot;development&quot;&gt;Development에서 시작&lt;/a&gt; 됩니다. 계속하기 전에 해당 안내서에 소개 된 개념 / 설정에 익숙해야합니다.</target>
        </trans-unit>
        <trans-unit id="a6ba31004997005b6c7977fd4e63f3ec4f27b1b2" translate="yes" xml:space="preserve">
          <source>This will bundle your source code with entry as &lt;code&gt;index.js&lt;/code&gt; and the output bundle file will have a path of &lt;code&gt;dist&lt;/code&gt; and the filename will be &lt;code&gt;bundle.js&lt;/code&gt;</source>
          <target state="translated">그러면 소스 코드가 &lt;code&gt;index.js&lt;/code&gt; 로 입력되고 출력 번들 파일의 경로는 &lt;code&gt;dist&lt;/code&gt; 이며 파일 이름은 &lt;code&gt;bundle.js&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="974910be502dc0a84469dbdf2c5a0b42eda9befe" translate="yes" xml:space="preserve">
          <source>This will direct webpack to &lt;em&gt;enter&lt;/em&gt; through &lt;code&gt;./index.ts&lt;/code&gt;, &lt;em&gt;load&lt;/em&gt; all &lt;code&gt;.ts&lt;/code&gt; and &lt;code&gt;.tsx&lt;/code&gt; files through the &lt;code&gt;ts-loader&lt;/code&gt;, and &lt;em&gt;output&lt;/em&gt; a &lt;code&gt;bundle.js&lt;/code&gt; file in our current directory.</source>
          <target state="translated">이렇게하는 웹팩 지시합니다 &lt;em&gt;입력&lt;/em&gt; 을 통해 &lt;code&gt;./index.ts&lt;/code&gt; , &lt;em&gt;로드&lt;/em&gt; 모든 &lt;code&gt;.ts&lt;/code&gt; 및 &lt;code&gt;.tsx&lt;/code&gt; 관통 파일을 &lt;code&gt;ts-loader&lt;/code&gt; 및 &lt;em&gt;출력&lt;/em&gt; a는 &lt;code&gt;bundle.js&lt;/code&gt; 우리의 현재 디렉토리에 파일을.</target>
        </trans-unit>
        <trans-unit id="55f886a1ec8370f98de9de4e1874a73184be8854" translate="yes" xml:space="preserve">
          <source>This will force webpack to exit its bundling process.</source>
          <target state="translated">그러면 웹팩이 번들링 프로세스를 종료합니다.</target>
        </trans-unit>
        <trans-unit id="00541a540816f3e9bbd4c867606284cd75c32912" translate="yes" xml:space="preserve">
          <source>This will form the bundle with both the files as separate entry points.</source>
          <target state="translated">이렇게하면 두 파일이 모두 별도의 진입 점으로 번들이 형성됩니다.</target>
        </trans-unit>
        <trans-unit id="7f4446d56893c546a3bc2bc1c768154f63d09482" translate="yes" xml:space="preserve">
          <source>This will generate a file &lt;code&gt;dist/index.html&lt;/code&gt; containing the following:</source>
          <target state="translated">다음을 포함하는 &lt;code&gt;dist/index.html&lt;/code&gt; 파일이 생성됩니다 .</target>
        </trans-unit>
        <trans-unit id="7160226d2ca3d86e071b9fa526002cfef710b369" translate="yes" xml:space="preserve">
          <source>This will result in &lt;code&gt;&amp;lt;link rel=&quot;prefetch&quot; href=&quot;login-modal-chunk.js&quot;&amp;gt;&lt;/code&gt; being appended in the head of the page, which will instruct the browser to prefetch in idle time the &lt;code&gt;login-modal-chunk.js&lt;/code&gt; file.</source>
          <target state="translated">그러면 페이지 헤드 에 &lt;code&gt;&amp;lt;link rel=&quot;prefetch&quot; href=&quot;login-modal-chunk.js&quot;&amp;gt;&lt;/code&gt; 가 추가되어 브라우저가 유휴 시간에 &lt;code&gt;login-modal-chunk.js&lt;/code&gt; 를 프리 페치하도록 지시합니다. 파일.</target>
        </trans-unit>
        <trans-unit id="c85e87d9ec602f1d997bca703285880f56410641" translate="yes" xml:space="preserve">
          <source>This will result in following output:</source>
          <target state="translated">결과는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="dd75db9f1ff33f0b55c972ee38e1768f886c967a" translate="yes" xml:space="preserve">
          <source>This will simply export the provided &lt;code&gt;value&lt;/code&gt;. The &lt;code&gt;value&lt;/code&gt; here can be anything except a function.</source>
          <target state="translated">제공된 &lt;code&gt;value&lt;/code&gt; 간단히 내 보냅니다 . 여기서 &lt;code&gt;value&lt;/code&gt; 은 함수를 제외한 모든 것이 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="efed152efc8461a74df43e343c4dd0ad810e7a79" translate="yes" xml:space="preserve">
          <source>This will yield the following build result:</source>
          <target state="translated">결과는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="945fcbc1787185641ce61384de9325b8f50d7afe" translate="yes" xml:space="preserve">
          <source>This would expose your index.html file to the polymer-webpack-loader based on the process used by the html-loader. In this case you would need to exclude your html file from the polymer-webpack-loader or look for other ways to avoid this conflict. See: &lt;a href=&quot;https://github.com/jantimon/html-webpack-plugin/blob/master/docs/template-option.md&quot;&gt;html-webpack-plugin template options&lt;/a&gt;</source>
          <target state="translated">그러면 html-loader가 사용하는 프로세스를 기반으로 index.html 파일이 polymer-webpack-loader에 노출됩니다. 이 경우 polymer-webpack-loader에서 html 파일을 제외하거나이 충돌을 피할 수있는 다른 방법을 찾아야합니다. &lt;a href=&quot;https://github.com/jantimon/html-webpack-plugin/blob/master/docs/template-option.md&quot;&gt;html-webpack-plugin 템플릿 옵션을&lt;/a&gt; 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="2ea4357ef4b413d69e9589461b2acd2f1ec82b54" translate="yes" xml:space="preserve">
          <source>This would go nicely with &lt;a href=&quot;tree-shaking&quot;&gt;Tree Shaking&lt;/a&gt; as the rest of the &lt;code&gt;lodash&lt;/code&gt; library should get dropped.</source>
          <target state="translated">&lt;code&gt;lodash&lt;/code&gt; 라이브러리 의 나머지 부분을 제거 해야하기 때문에 &lt;a href=&quot;tree-shaking&quot;&gt;Tree Shaking&lt;/a&gt; 과 잘 어울립니다 .</target>
        </trans-unit>
        <trans-unit id="b166a6d72bc0ecd96b32dc3dc3968cf48187e1f5" translate="yes" xml:space="preserve">
          <source>This wraps the &lt;code&gt;require('file.js')&lt;/code&gt; in a &lt;code&gt;require.ensure&lt;/code&gt; block</source>
          <target state="translated">이것은 &lt;code&gt;require('file.js')&lt;/code&gt; 를 &lt;code&gt;require.ensure&lt;/code&gt; 블록으로 감싸줍니다.</target>
        </trans-unit>
        <trans-unit id="db0f1255d05986e69c5d921d1eea45817e63296f" translate="yes" xml:space="preserve">
          <source>This: available through the &lt;code&gt;this&lt;/code&gt; object (&lt;code&gt;libraryTarget:'this'&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;libraryTarget:'this'&lt;/code&gt; &lt;code&gt;this&lt;/code&gt; 객체를 통해 사용할 수 있습니다 ( libraryTarget : 'this' ).</target>
        </trans-unit>
        <trans-unit id="3ffef249f4c6fcea2923ee5d65836d74d834ecab" translate="yes" xml:space="preserve">
          <source>Three simple ways to inspect a webpack bundle</source>
          <target state="translated">웹팩 번들을 검사하는 세 가지 간단한 방법</target>
        </trans-unit>
        <trans-unit id="22975e15fe01eb83dd38a4fdd63bcdb34c745980" translate="yes" xml:space="preserve">
          <source>Throughout the Guides we will use &lt;code&gt;diff&lt;/code&gt; blocks to show you what changes we're making to directories, files, and code.</source>
          <target state="translated">가이드 전체에서 &lt;code&gt;diff&lt;/code&gt; 블록을 사용 하여 디렉토리, 파일 및 코드에 어떤 변경 사항이 있는지 보여줍니다.</target>
        </trans-unit>
        <trans-unit id="921008c663ca39740d7eff1fc3116a1d5032c017" translate="yes" xml:space="preserve">
          <source>Thus, &lt;code&gt;window.$&lt;/code&gt; is then available in the browser console.</source>
          <target state="translated">따라서 브라우저 콘솔에서 &lt;code&gt;window.$&lt;/code&gt; 를 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="03dcb8ddd180c79b7cbef1fbef09bd9b811c6229" translate="yes" xml:space="preserve">
          <source>Timeout for gathering changes while watching</source>
          <target state="translated">시청하는 동안 변경 사항을 수집하기위한 제한 시간</target>
        </trans-unit>
        <trans-unit id="661d4063b8ec8980f63428513015c42d7d7a39d4" translate="yes" xml:space="preserve">
          <source>Timings</source>
          <target state="translated">Timings</target>
        </trans-unit>
        <trans-unit id="54963bcda5c44c101aba88a7600754b4d08bd65b" translate="yes" xml:space="preserve">
          <source>Tips for Use</source>
          <target state="translated">사용 팁</target>
        </trans-unit>
        <trans-unit id="b2660960645189e282a8a216a50f1f554af01560" translate="yes" xml:space="preserve">
          <source>To approach this problem you can easily use a good old environment variable. Let's say we have a variable &lt;code&gt;ASSET_PATH&lt;/code&gt;:</source>
          <target state="translated">이 문제에 접근하기 위해 좋은 오래된 환경 변수를 쉽게 사용할 수 있습니다. &lt;code&gt;ASSET_PATH&lt;/code&gt; 변수가 있다고 가정 해 봅시다 .</target>
        </trans-unit>
        <trans-unit id="dcbc79a6d6d80f687151d525406640646c99705e" translate="yes" xml:space="preserve">
          <source>To automatically load &lt;code&gt;jquery&lt;/code&gt; we can simply point both variables it exposes to the corresponding node module:</source>
          <target state="translated">&lt;code&gt;jquery&lt;/code&gt; 를 자동으로로드 하기 위해 해당 노드 모듈에 노출되는 두 변수를 가리킬 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2cff0b80a6edf97df3a239f888cd3d2406dca34c" translate="yes" xml:space="preserve">
          <source>To be compatible with existing css files (if not in CSS Module mode).</source>
          <target state="translated">CSS 모듈 모드가 아닌 경우 기존 CSS 파일과 호환됩니다.</target>
        </trans-unit>
        <trans-unit id="07015a6889ed2ed55c54e13b2a92e0506c83e9bb" translate="yes" xml:space="preserve">
          <source>To be safe, you can use &lt;code&gt;enforce: &quot;pre&quot;&lt;/code&gt; section to check source files, not modified by other loaders (like &lt;code&gt;babel-loader&lt;/code&gt;)</source>
          <target state="translated">안전을 위해, &lt;code&gt;enforce: &quot;pre&quot;&lt;/code&gt; 섹션을 사용 하여 다른 로더 (예 : &lt;code&gt;babel-loader&lt;/code&gt; )에 의해 수정되지 않은 소스 파일을 확인할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="82bf60baa207e3a2a73e2e85ad00daef03147bec" translate="yes" xml:space="preserve">
          <source>To begin, you'll need to install &lt;code&gt;config-loader&lt;/code&gt;:</source>
          <target state="translated">시작하려면 &lt;code&gt;config-loader&lt;/code&gt; 를 설치해야합니다 .</target>
        </trans-unit>
        <trans-unit id="fce74b425fc9b393fe6da8939201756b11c8ae82" translate="yes" xml:space="preserve">
          <source>To begin, you'll need to install &lt;code&gt;exports-loader&lt;/code&gt;:</source>
          <target state="translated">시작하려면 &lt;code&gt;exports-loader&lt;/code&gt; 를 설치해야합니다 .</target>
        </trans-unit>
        <trans-unit id="411e791be25b2b16d7093ec79dbcbde9a51e71f2" translate="yes" xml:space="preserve">
          <source>To begin, you'll need to install &lt;code&gt;expose-loader&lt;/code&gt;:</source>
          <target state="translated">시작하려면 &lt;code&gt;expose-loader&lt;/code&gt; 를 설치해야합니다 :</target>
        </trans-unit>
        <trans-unit id="0fc7fc961b47a051b19e226656bde393653c4789" translate="yes" xml:space="preserve">
          <source>To begin, you'll need to install &lt;code&gt;file-loader&lt;/code&gt;:</source>
          <target state="translated">시작하려면 &lt;code&gt;file-loader&lt;/code&gt; 를 설치해야 합니다 .</target>
        </trans-unit>
        <trans-unit id="94d3f896c040c5941000c3f6d1a93ff1345b8612" translate="yes" xml:space="preserve">
          <source>To begin, you'll need to install &lt;code&gt;jshint-loader&lt;/code&gt;:</source>
          <target state="translated">시작하려면 &lt;code&gt;jshint-loader&lt;/code&gt; 를 설치해야합니다 :</target>
        </trans-unit>
        <trans-unit id="a41ac440dc6238694d68258e618bb49fc94caf83" translate="yes" xml:space="preserve">
          <source>To begin, you'll need to install &lt;code&gt;less-loader&lt;/code&gt;:</source>
          <target state="translated">시작하려면 &lt;code&gt;less-loader&lt;/code&gt; 설치해야합니다 .</target>
        </trans-unit>
        <trans-unit id="746daaee86d341274baa9bbbb6cb39c7d79f5f35" translate="yes" xml:space="preserve">
          <source>To begin, you'll need to install &lt;code&gt;mocha-loader&lt;/code&gt;:</source>
          <target state="translated">시작하려면 &lt;code&gt;mocha-loader&lt;/code&gt; 를 설치해야합니다 .</target>
        </trans-unit>
        <trans-unit id="89e5dc0915c471dd5741c80947af93e44d49291a" translate="yes" xml:space="preserve">
          <source>To begin, you'll need to install &lt;code&gt;multi-loader&lt;/code&gt;:</source>
          <target state="translated">시작하려면 &lt;code&gt;multi-loader&lt;/code&gt; 를 설치해야합니다 .</target>
        </trans-unit>
        <trans-unit id="00fb7c36e27d5f602e02b051008f9368bbec1510" translate="yes" xml:space="preserve">
          <source>To begin, you'll need to install &lt;code&gt;node-loader&lt;/code&gt;:</source>
          <target state="translated">시작하려면 &lt;code&gt;node-loader&lt;/code&gt; 를 설치해야합니다 .</target>
        </trans-unit>
        <trans-unit id="ac04354afe29bdc0eb01bb123082874b29e12c09" translate="yes" xml:space="preserve">
          <source>To begin, you'll need to install &lt;code&gt;null-loader&lt;/code&gt;:</source>
          <target state="translated">시작하려면 &lt;code&gt;null-loader&lt;/code&gt; 를 설치해야합니다 .</target>
        </trans-unit>
        <trans-unit id="ed9f11b49e3b0ac8754e0ab515a232c4c7bab089" translate="yes" xml:space="preserve">
          <source>To begin, you'll need to install &lt;code&gt;raw-loader&lt;/code&gt;:</source>
          <target state="translated">시작하려면 &lt;code&gt;raw-loader&lt;/code&gt; 를 설치해야합니다 .</target>
        </trans-unit>
        <trans-unit id="5336d91f3599dbace4c9133e6c80c99d248c2d4f" translate="yes" xml:space="preserve">
          <source>To begin, you'll need to install &lt;code&gt;react-proxy-loader&lt;/code&gt;:</source>
          <target state="translated">시작하려면 &lt;code&gt;react-proxy-loader&lt;/code&gt; 를 설치해야합니다 .</target>
        </trans-unit>
        <trans-unit id="c6f54944c9d87a57b6782a0d8c4ab4d25eb93f5f" translate="yes" xml:space="preserve">
          <source>To begin, you'll need to install &lt;code&gt;stylelint-webpack-plugin&lt;/code&gt;:</source>
          <target state="translated">시작하려면 &lt;code&gt;stylelint-webpack-plugin&lt;/code&gt; 을 설치해야합니다 :</target>
        </trans-unit>
        <trans-unit id="38782f5d9cd214d47d0d542d22e218c43a6dee53" translate="yes" xml:space="preserve">
          <source>To begin, you'll need to install &lt;code&gt;terser-webpack-plugin&lt;/code&gt;:</source>
          <target state="translated">시작하려면 &lt;code&gt;terser-webpack-plugin&lt;/code&gt; 을 설치해야합니다 :</target>
        </trans-unit>
        <trans-unit id="ee9d1d253ebff7e4e9d72665d987bd70ba4b9a08" translate="yes" xml:space="preserve">
          <source>To begin, you'll need to install &lt;code&gt;transform-loader&lt;/code&gt;:</source>
          <target state="translated">시작하려면 &lt;code&gt;transform-loader&lt;/code&gt; 를 설치해야합니다 .</target>
        </trans-unit>
        <trans-unit id="3c3ed3c5eaa5eefb4adabc155747e61cb046b303" translate="yes" xml:space="preserve">
          <source>To begin, you'll need to install &lt;code&gt;url-loader&lt;/code&gt;:</source>
          <target state="translated">시작하려면 &lt;code&gt;url-loader&lt;/code&gt; 를 설치해야합니다 .</target>
        </trans-unit>
        <trans-unit id="e5d36d38e77ff2fe0084bc1096c8a1da57aa1351" translate="yes" xml:space="preserve">
          <source>To begin, you'll need to install &lt;code&gt;val-loader&lt;/code&gt;:</source>
          <target state="translated">시작하려면 &lt;code&gt;val-loader&lt;/code&gt; 를 설치해야합니다 .</target>
        </trans-unit>
        <trans-unit id="829c18e6ac496ea95656902cbe84d34833c84385" translate="yes" xml:space="preserve">
          <source>To begin, you'll need to install &lt;code&gt;worker-loader&lt;/code&gt;:</source>
          <target state="translated">시작하려면 &lt;code&gt;worker-loader&lt;/code&gt; 를 설치해야합니다 .</target>
        </trans-unit>
        <trans-unit id="bfeceae384afd1256e3e284ec202d194d889bbda" translate="yes" xml:space="preserve">
          <source>To begin, you'll need to install &lt;code&gt;yaml-frontmatter-loader&lt;/code&gt;:</source>
          <target state="translated">시작하려면 &lt;code&gt;yaml-frontmatter-loader&lt;/code&gt; 를 설치해야합니다 .</target>
        </trans-unit>
        <trans-unit id="06c638119ebe6bdd9660a0f8df0f71a8e0b13de5" translate="yes" xml:space="preserve">
          <source>To bundle the &lt;code&gt;lodash&lt;/code&gt; dependency with &lt;code&gt;index.js&lt;/code&gt;, we'll need to install the library locally:</source>
          <target state="translated">&lt;code&gt;lodash&lt;/code&gt; 종속성을 &lt;code&gt;index.js&lt;/code&gt; 와 번들 로 제공하려면 라이브러리를 로컬로 설치해야합니다.</target>
        </trans-unit>
        <trans-unit id="dfa7d608afec42e0cdc2c58c9c250dda0d690d1a" translate="yes" xml:space="preserve">
          <source>To completely disable tag-attribute processing (for instance, if you're handling image loading on the client side) you can pass in &lt;code&gt;attrs=false&lt;/code&gt;.</source>
          <target state="translated">태그 속성 처리를 완전히 비활성화하려면 (예 : 클라이언트 측에서 이미지로드를 처리하는 경우) &lt;code&gt;attrs=false&lt;/code&gt; 를 전달하면 됩니다.</target>
        </trans-unit>
        <trans-unit id="f72579134926fff1a800442bd52c8ff45bbcd816" translate="yes" xml:space="preserve">
          <source>To create a code coverage report for all components (even for those for which you have no tests yet) you have to require all the 1) sources and 2) tests. Something like it's described in &lt;a href=&quot;https://github.com/webpack/karma-webpack#alternative-usage&quot;&gt;&quot;alternative usage&quot; of karma-webpack&lt;/a&gt;</source>
          <target state="translated">모든 구성 요소 (아직 테스트가없는 구성 요소에 대해서도)에 대한 코드 적용 범위 보고서를 만들려면 1) 소스 및 2) 테스트가 모두 필요합니다. &lt;a href=&quot;https://github.com/webpack/karma-webpack#alternative-usage&quot;&gt;karma-webpack의 &quot;대체 사용법&quot;에&lt;/a&gt; 설명되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="869e6e2ac6874691b0a280a2def88cb61d298df9" translate="yes" xml:space="preserve">
          <source>To disable &lt;code&gt;@import&lt;/code&gt; resolving by &lt;code&gt;css-loader&lt;/code&gt; set the option to &lt;code&gt;false&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;css-loader&lt;/code&gt; 로 &lt;code&gt;@import&lt;/code&gt; 해결 을 비활성화하려면 옵션을 &lt;code&gt;false&lt;/code&gt; 로 설정하십시오.</target>
        </trans-unit>
        <trans-unit id="361551aaf1d19b454740101d98c789ddb47cdcd1" translate="yes" xml:space="preserve">
          <source>To disable &lt;code&gt;contentBase&lt;/code&gt;:</source>
          <target state="translated">사용하지 않으려면 &lt;code&gt;contentBase&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="fe870f47c32f3704bff3eff2d3ef13906efa0316" translate="yes" xml:space="preserve">
          <source>To disable &lt;code&gt;url()&lt;/code&gt; resolving by &lt;code&gt;css-loader&lt;/code&gt; set the option to &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;css-loader&lt;/code&gt; 로 &lt;code&gt;url()&lt;/code&gt; 확인 을 비활성화하려면 옵션을 &lt;code&gt;false&lt;/code&gt; 로 설정하십시오 .</target>
        </trans-unit>
        <trans-unit id="e02862c99560640eb94080cfcb8a40ef213be8f5" translate="yes" xml:space="preserve">
          <source>To disable this feature in some common editors, see the list below:</source>
          <target state="translated">일부 일반적인 편집기에서이 기능을 비활성화하려면 아래 목록을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="41c8815ef9e8f8a631a2f83b99b5626c9ea326d0" translate="yes" xml:space="preserve">
          <source>To disambiguate in your &lt;code&gt;webpack.config.js&lt;/code&gt; between &lt;a href=&quot;development&quot;&gt;development&lt;/a&gt; and &lt;a href=&quot;production&quot;&gt;production builds&lt;/a&gt; you may use environment variables.</source>
          <target state="translated">&lt;a href=&quot;development&quot;&gt;개발&lt;/a&gt; 및 &lt;a href=&quot;production&quot;&gt;프로덕션 빌드&lt;/a&gt; 간에 &lt;code&gt;webpack.config.js&lt;/code&gt; 를 명확하게하기 위해 환경 변수를 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="500ff0470316e19a35544952710d7f6e843d15e4" translate="yes" xml:space="preserve">
          <source>To enable CSS source maps, you'll need to pass the &lt;code&gt;sourceMap&lt;/code&gt; option to the &lt;code&gt;less-loader&lt;/code&gt;&lt;em&gt;and&lt;/em&gt; the &lt;code&gt;css-loader&lt;/code&gt;. Your &lt;code&gt;webpack.config.js&lt;/code&gt; should look like this:</source>
          <target state="translated">CSS 소스지도를 사용하려면 통과해야합니다 &lt;code&gt;sourceMap&lt;/code&gt; 를 받는 옵션을 &lt;code&gt;less-loader&lt;/code&gt; &lt;em&gt;와 &lt;/em&gt; &lt;code&gt;css-loader&lt;/code&gt; . 귀하의 &lt;code&gt;webpack.config.js&lt;/code&gt; 다음과 같아야합니다 :</target>
        </trans-unit>
        <trans-unit id="29ddb3ba3e454446fe1a7da01fa6a7ea800f1aca" translate="yes" xml:space="preserve">
          <source>To enable CSS source maps, you'll need to pass the &lt;code&gt;sourceMap&lt;/code&gt; option to the sass-loader &lt;em&gt;and&lt;/em&gt; the css-loader. Your &lt;code&gt;webpack.config.js&lt;/code&gt; should look like this:</source>
          <target state="translated">CSS 소스 맵을 활성화하려면 &lt;code&gt;sourceMap&lt;/code&gt; 옵션을 sass-loader &lt;em&gt;및&lt;/em&gt; css-loader 에 전달해야합니다 . 귀하의 &lt;code&gt;webpack.config.js&lt;/code&gt; 다음과 같아야합니다 :</target>
        </trans-unit>
        <trans-unit id="5f7892b1e37621678647b50e59d05e015a186798" translate="yes" xml:space="preserve">
          <source>To enable HMR, you also need to modify your webpack configuration object to include the HMR entry points. The &lt;code&gt;webpack-dev-server&lt;/code&gt; package includes a method called &lt;code&gt;addDevServerEntrypoints&lt;/code&gt; which you can use to do this. Here's a small example of how that might look:</source>
          <target state="translated">HMR을 사용 가능하게하려면 HMR 진입 점을 포함하도록 웹팩 구성 오브젝트도 수정해야합니다. &lt;code&gt;webpack-dev-server&lt;/code&gt; 패키지라는 방법은, &lt;code&gt;addDevServerEntrypoints&lt;/code&gt; 이 작업을 수행하는 데 사용할 수 있습니다. 다음은 그 모습을 보여주는 작은 예입니다.</target>
        </trans-unit>
        <trans-unit id="b2fc05b2ff61f26beeae4af670843b3d9e871698" translate="yes" xml:space="preserve">
          <source>To enable source maps, we must configure TypeScript to output inline source maps to our compiled JavaScript files. The following line must be added to our TypeScript configuration:</source>
          <target state="translated">소스 맵을 사용하려면 인라인 소스 맵을 컴파일 된 JavaScript 파일로 출력하도록 TypeScript를 구성해야합니다. TypeScript 구성에 다음 줄을 추가해야합니다.</target>
        </trans-unit>
        <trans-unit id="1a389a84023632649f39402ea3de4ce188a82054" translate="yes" xml:space="preserve">
          <source>To exclude &lt;code&gt;node_modules&lt;/code&gt;, see the &lt;code&gt;exclude&lt;/code&gt; option in the &lt;code&gt;loaders&lt;/code&gt; config as documented above.</source>
          <target state="translated">&lt;code&gt;node_modules&lt;/code&gt; 를 제외하려면 위에서 설명한대로 &lt;code&gt;loaders&lt;/code&gt; 설정 에서 &lt;code&gt;exclude&lt;/code&gt; 옵션을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="38a9c27a9e0ab77f048bbdd92dbf6f8e9201f83c" translate="yes" xml:space="preserve">
          <source>To expose stylesheets associated with your library, the &lt;a href=&quot;../plugins/extract-text-webpack-plugin&quot;&gt;&lt;code&gt;ExtractTextPlugin&lt;/code&gt;&lt;/a&gt; should be used. Users can then consume and load these as they would any other stylesheet.</source>
          <target state="translated">라이브러리와 연관된 스타일 시트를 표시하려면 &lt;a href=&quot;../plugins/extract-text-webpack-plugin&quot;&gt; &lt;code&gt;ExtractTextPlugin&lt;/code&gt; 을&lt;/a&gt; 사용해야합니다. 그런 다음 사용자는 다른 스타일 시트와 마찬가지로 소비하고로드 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b58c10e9810b7cd86447de7048c410bbfbdf9685" translate="yes" xml:space="preserve">
          <source>To extract the webpack bootstrap logic into a separate file, use the &lt;code&gt;CommonsChunkPlugin&lt;/code&gt; on a &lt;code&gt;name&lt;/code&gt; which is not defined as &lt;code&gt;entry&lt;/code&gt;. Commonly the name &lt;code&gt;manifest&lt;/code&gt; is used. See the &lt;a href=&quot;../guides/caching&quot;&gt;caching guide&lt;/a&gt; for details.</source>
          <target state="translated">웹팩 부트 스트랩 로직을 별도의 파일로 추출하려면 &lt;code&gt;entry&lt;/code&gt; 로 정의되지 않은 &lt;code&gt;name&lt;/code&gt; &lt;code&gt;CommonsChunkPlugin&lt;/code&gt; 을 사용하십시오 . 일반적으로 이름 &lt;code&gt;manifest&lt;/code&gt; 가 사용됩니다. 자세한 내용은 &lt;a href=&quot;../guides/caching&quot;&gt;캐싱 안내서&lt;/a&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="38ed89ed4d2d579580e96d0f69f192abda5d4002" translate="yes" xml:space="preserve">
          <source>To fix this you should uninstall the npm package &lt;code&gt;babel&lt;/code&gt; as it is deprecated in babel v6. (instead install &lt;code&gt;babel-cli&lt;/code&gt; or &lt;code&gt;babel-core&lt;/code&gt;) In the case one of your dependencies is installing &lt;code&gt;babel&lt;/code&gt; and you cannot uninstall it yourself, use the complete name of the loader in the webpack config:</source>
          <target state="translated">이 문제를 해결하려면 babel v6에서 더 이상 사용되지 않는 npm 패키지 &lt;code&gt;babel&lt;/code&gt; 을 제거해야합니다 . (대신 &lt;code&gt;babel-cli&lt;/code&gt; 또는 &lt;code&gt;babel-core&lt;/code&gt; 설치) 의존성 중 하나가 &lt;code&gt;babel&lt;/code&gt; 을 설치하고 직접 제거 할 수없는 경우 webpack 구성에서 로더의 전체 이름을 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="6021058192262f03686a1a0bd715439d2f2cf191" translate="yes" xml:space="preserve">
          <source>To gain typechecking again, use the &lt;a href=&quot;https://www.npmjs.com/package/fork-ts-checker-webpack-plugin&quot;&gt;&lt;code&gt;ForkTsCheckerWebpackPlugin&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">유형 검사를 다시 &lt;a href=&quot;https://www.npmjs.com/package/fork-ts-checker-webpack-plugin&quot;&gt; &lt;code&gt;ForkTsCheckerWebpackPlugin&lt;/code&gt; &lt;/a&gt; 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="e1a1f2b68224bef3bc79c709c34bf3103ba22925" translate="yes" xml:space="preserve">
          <source>To get started you only need to understand its &lt;strong&gt;Core Concepts&lt;/strong&gt;:</source>
          <target state="translated">시작하려면 &lt;strong&gt;핵심 개념&lt;/strong&gt; 만 이해하면됩니다 .</target>
        </trans-unit>
        <trans-unit id="348e1ea64c185f95f73506889858e9ce259285e2" translate="yes" xml:space="preserve">
          <source>To import a built-in module, use &lt;a href=&quot;../api/module-variables#__non_webpack_require__-webpack-specific-&quot;&gt;&lt;code&gt;__non_webpack_require__&lt;/code&gt;&lt;/a&gt;, i.e. &lt;code&gt;__non_webpack_require__('modulename')&lt;/code&gt; instead of &lt;code&gt;require('modulename')&lt;/code&gt;.</source>
          <target state="translated">내장 된 모듈을 사용 가져 오려면 &lt;a href=&quot;../api/module-variables#__non_webpack_require__-webpack-specific-&quot;&gt; &lt;code&gt;__non_webpack_require__&lt;/code&gt; &lt;/a&gt; , 즉 &lt;code&gt;__non_webpack_require__('modulename')&lt;/code&gt; 대신 &lt;code&gt;require('modulename')&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="a5ae4d7aa8a104c8ccb3aa651a7bc57b7fa04613" translate="yes" xml:space="preserve">
          <source>To import a local classname from another module.</source>
          <target state="translated">다른 모듈에서 로컬 클래스 이름을 가져옵니다.</target>
        </trans-unit>
        <trans-unit id="e2c64aae8fc990d22b375b4c008a28a50ef2b4f0" translate="yes" xml:space="preserve">
          <source>To import from multiple modules use multiple &lt;code&gt;composes:&lt;/code&gt; rules.</source>
          <target state="translated">여러 모듈에서 가져 오려면 여러 &lt;code&gt;composes:&lt;/code&gt; 규칙을 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="47e9aa3b08def6333cf943d0fb6cd429f52aa435" translate="yes" xml:space="preserve">
          <source>To include source maps set the &lt;code&gt;sourceMap&lt;/code&gt; option.</source>
          <target state="translated">소스 맵을 포함하려면 &lt;code&gt;sourceMap&lt;/code&gt; 옵션을 설정하십시오 .</target>
        </trans-unit>
        <trans-unit id="a1015f4201a74cca3e3ac70cdc79b7f3b6a6d867" translate="yes" xml:space="preserve">
          <source>To install the latest release or a specific version, run one of the following commands:</source>
          <target state="translated">최신 릴리스 또는 특정 버전을 설치하려면 다음 명령 중 하나를 실행하십시오.</target>
        </trans-unit>
        <trans-unit id="1884df3f25a3bbb6d7b71df607746c88bfb41cb2" translate="yes" xml:space="preserve">
          <source>To integrate with TypeScript, you will need to define a custom module for the exports of your worker</source>
          <target state="translated">TypeScript와 통합하려면 작업자 내보내기를위한 사용자 정의 모듈을 정의해야합니다.</target>
        </trans-unit>
        <trans-unit id="6bcc914a800145c90ef98d17eac32a8bc02e16aa" translate="yes" xml:space="preserve">
          <source>To learn more about source maps, see the &lt;a href=&quot;development&quot;&gt;development guide&lt;/a&gt;.</source>
          <target state="translated">소스 맵에 대한 자세한 내용은 &lt;a href=&quot;development&quot;&gt;개발 안내서를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="3a177cf38e45191d1a14eeceb328a37a99ad1a1a" translate="yes" xml:space="preserve">
          <source>To learn more about webpack configuration, see the &lt;a href=&quot;../concepts/configuration&quot;&gt;configuration concepts&lt;/a&gt;.</source>
          <target state="translated">웹팩 구성에 대한 자세한 내용은 &lt;a href=&quot;../concepts/configuration&quot;&gt;구성 개념을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="3e748d8b605e30f64d9404df3cdd168090d45ff8" translate="yes" xml:space="preserve">
          <source>To make this work with HMR we need to update that binding to the new &lt;code&gt;printMe&lt;/code&gt; function using &lt;code&gt;module.hot.accept&lt;/code&gt;:</source>
          <target state="translated">HMR에서이 작업을 수행하려면 &lt;code&gt;module.hot.accept&lt;/code&gt; 를 사용하여 새 &lt;code&gt;printMe&lt;/code&gt; 함수 에 대한 바인딩을 업데이트해야합니다 .</target>
        </trans-unit>
        <trans-unit id="06ca871bf3949e7877aca45fc526601107359dd1" translate="yes" xml:space="preserve">
          <source>To mimic a more production-like environment, it is also possible to proxy the webpack-dev-server with nginx.</source>
          <target state="translated">보다 생산적인 환경을 모방하기 위해 nginx로 webpack-dev-server를 프록시하는 것도 가능합니다.</target>
        </trans-unit>
        <trans-unit id="19f8115b103436185bc4f73cf8023e4431cc5a22" translate="yes" xml:space="preserve">
          <source>To pass your own certificate via the CLI use the following options</source>
          <target state="translated">CLI를 통해 자신의 인증서를 전달하려면 다음 옵션을 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="6647a87d1cb201b2abb16749321598ec33fa1589" translate="yes" xml:space="preserve">
          <source>To prevent the high delay when booting workers it possible to warmup the worker pool.</source>
          <target state="translated">작업자를 부팅 할 때 높은 지연을 방지하기 위해 작업자 풀을 예열 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="6472c575009f9527693ccb1eb7975cf2b5bb6a74" translate="yes" xml:space="preserve">
          <source>To run the local installation of webpack you can access its bin version as &lt;code&gt;node_modules/.bin/webpack&lt;/code&gt;.</source>
          <target state="translated">웹팩의 로컬 설치를 실행하려면 bin 버전에 &lt;code&gt;node_modules/.bin/webpack&lt;/code&gt; 으로 액세스 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="3a6e637bcd7f8c82f7ecb2b72b80d94077bbbc98" translate="yes" xml:space="preserve">
          <source>To set a custom name for the output script, use the &lt;code&gt;name&lt;/code&gt; parameter. The name may contain the string &lt;code&gt;[hash]&lt;/code&gt;, which will be replaced with a content dependent hash for caching purposes. When using &lt;code&gt;name&lt;/code&gt; alone &lt;code&gt;[hash]&lt;/code&gt; is omitted.</source>
          <target state="translated">출력 스크립트의 사용자 정의 이름을 설정하려면 &lt;code&gt;name&lt;/code&gt; 매개 변수를 사용하십시오 . 이름에는 문자열 &lt;code&gt;[hash]&lt;/code&gt; 가 포함될 수 있으며 캐싱 목적으로 컨텐츠 종속 해시로 대체됩니다. &lt;code&gt;name&lt;/code&gt; 만 사용할 경우 &lt;code&gt;[hash]&lt;/code&gt; 는 생략됩니다.</target>
        </trans-unit>
        <trans-unit id="dac38352ca87e4dd20fd92ae4b4d17c3a6910808" translate="yes" xml:space="preserve">
          <source>To set the &lt;code&gt;target&lt;/code&gt; property, you simply set the target value in your webpack config:</source>
          <target state="translated">&lt;code&gt;target&lt;/code&gt; 속성 을 설정하려면 웹팩 구성에서 대상 값을 설정하면됩니다.</target>
        </trans-unit>
        <trans-unit id="d7739566e3958f0e427ab0f8fd3a0e62883980cf" translate="yes" xml:space="preserve">
          <source>To show only errors in your bundle:</source>
          <target state="translated">번들에 오류 만 표시하려면</target>
        </trans-unit>
        <trans-unit id="144def8245316e56bae55c0aa633ce63f74cdd87" translate="yes" xml:space="preserve">
          <source>To specify an unset default value, use &lt;code&gt;null&lt;/code&gt; instead of &lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="translated">설정되지 않은 기본값을 지정하려면 &lt;code&gt;undefined&lt;/code&gt; 대신 &lt;code&gt;null&lt;/code&gt; 을 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="7929162fe7ecd963c36f31e3a8c0790d5dcf5b99" translate="yes" xml:space="preserve">
          <source>To start using webpack Node.js API, first install webpack if you haven&amp;rsquo;t yet:</source>
          <target state="translated">webpack Node.js API를 사용하려면 먼저 webpack을 설치하지 않은 경우 설치하십시오.</target>
        </trans-unit>
        <trans-unit id="9c156f8d22007693b411c0a6e5d1ef4987eb8bdf" translate="yes" xml:space="preserve">
          <source>To start, make sure that the &lt;code&gt;Vagrantfile&lt;/code&gt; has a static IP;</source>
          <target state="translated">시작하려면 &lt;code&gt;Vagrantfile&lt;/code&gt; 에 고정 IP가 있는지 확인하십시오 .</target>
        </trans-unit>
        <trans-unit id="559f3ffdd386200d39a9e0ed2f0bf1bcfb8133ef" translate="yes" xml:space="preserve">
          <source>To use non-code assets with TypeScript, we need to defer the type for these imports. This requires a &lt;code&gt;custom.d.ts&lt;/code&gt; file which signifies custom definitions for TypeScript in our project. Let's set up a declaration for &lt;code&gt;.svg&lt;/code&gt; files:</source>
          <target state="translated">TypeScript에서 비 코드 자산을 사용하려면 이러한 가져 오기에 대한 유형을 연기해야합니다. 여기에는 프로젝트에서 TypeScript에 대한 사용자 정의를 나타내는 &lt;code&gt;custom.d.ts&lt;/code&gt; 파일 이 필요합니다 . &lt;code&gt;.svg&lt;/code&gt; 파일에 대한 선언을 설정합시다 :</target>
        </trans-unit>
        <trans-unit id="f47e2685aba87fc596fb60b79c57346015b6eeaf" translate="yes" xml:space="preserve">
          <source>To use this option with the CLI pass the &lt;code&gt;--allowed-hosts&lt;/code&gt; option a comma-delimited string.</source>
          <target state="translated">CLI와 함께이 옵션을 사용하려면 &lt;code&gt;--allowed-hosts&lt;/code&gt; 옵션을 쉼표로 구분 된 문자열로 전달하십시오 .</target>
        </trans-unit>
        <trans-unit id="c7251e927f90574f1c93d0aab322bd244ce7bc38" translate="yes" xml:space="preserve">
          <source>To wait until the chunk is available (and get the exports) you need to async wait for it.</source>
          <target state="translated">청크를 사용할 수있을 때까지 기다렸다가 (내보내기를 가져 오려면) 청크를 기다려야합니다.</target>
        </trans-unit>
        <trans-unit id="cb9583a28cf56d89a0848b6749cfcca0381af814" translate="yes" xml:space="preserve">
          <source>To write the webpack configuration in &lt;a href=&quot;http://www.typescriptlang.org/&quot;&gt;TypeScript&lt;/a&gt;, you would first install the necessary dependencies:</source>
          <target state="translated">에서 웹팩 구성을 작성하려면 &lt;a href=&quot;http://www.typescriptlang.org/&quot;&gt;타이프 라이터를&lt;/a&gt; 먼저 필요한 패키지를 설치합니다 :</target>
        </trans-unit>
        <trans-unit id="b3ca19b09afec2f63af696e7e940998ab6ae784f" translate="yes" xml:space="preserve">
          <source>Toggle between the dev-server's two different modes. By default the application will be served with &lt;em&gt;inline mode&lt;/em&gt; enabled. This means that a script will be inserted in your bundle to take care of live reloading, and build messages will appear in the browser console.</source>
          <target state="translated">개발자 서버의 두 가지 모드 간을 전환합니다. 기본적으로 응용 프로그램은 &lt;em&gt;인라인 모드가&lt;/em&gt; 활성화 된 상태 로 제공됩니다 . 즉, 라이브 재로드를 처리하기 위해 스크립트가 번들에 삽입되고 빌드 메시지가 브라우저 콘솔에 나타납니다.</target>
        </trans-unit>
        <trans-unit id="1a02f440362f76dd74ced4f9fbfee17146a758be" translate="yes" xml:space="preserve">
          <source>Transform/Conditionally load CSS by passing a transform/condition function</source>
          <target state="translated">변환 / 조건 함수를 전달하여 CSS를 변환 / 조건부로드</target>
        </trans-unit>
        <trans-unit id="626a681bf03395c3c640839f0d5ec24dccbb5e1f" translate="yes" xml:space="preserve">
          <source>Transpiling</source>
          <target state="translated">Transpiling</target>
        </trans-unit>
        <trans-unit id="0342403a32191cb5b268774041560f46a913b84c" translate="yes" xml:space="preserve">
          <source>Tree Shaking</source>
          <target state="translated">나무 동요</target>
        </trans-unit>
        <trans-unit id="92ee5435c87b7237526ef2d2b3c89bdeda428523" translate="yes" xml:space="preserve">
          <source>Tries to evaluate expressions in &lt;code&gt;if (...)&lt;/code&gt; statements and ternaries to replace them with &lt;code&gt;true&lt;/code&gt;/&lt;code&gt;false&lt;/code&gt; for further possible dead branch elimination using hooks fired by the parser.</source>
          <target state="translated">파서에 의해 발생 된 후크를 사용하여 죽은 분기 제거를 가능하게 하기 위해 &lt;code&gt;if (...)&lt;/code&gt; 문과 삼항 에서 식을 평가 하여 &lt;code&gt;true&lt;/code&gt; / &lt;code&gt;false&lt;/code&gt; 로 바꿉니다 .</target>
        </trans-unit>
        <trans-unit id="f48dbb4a06d50125f4b45400d23b5309c350e2b5" translate="yes" xml:space="preserve">
          <source>Triggered after chunk &lt;code&gt;id&lt;/code&gt; optimization has finished.</source>
          <target state="translated">청크 &lt;code&gt;id&lt;/code&gt; 최적화가 완료된 후 트리거 됩니다.</target>
        </trans-unit>
        <trans-unit id="016425652fe92febb10e1a63fc9cd2be53ec09b2" translate="yes" xml:space="preserve">
          <source>Triggered at the beginning of the optimization phase.</source>
          <target state="translated">최적화 단계 시작시 트리거됩니다.</target>
        </trans-unit>
        <trans-unit id="728b9f27106bfa00dc2e96b9deec761104277599" translate="yes" xml:space="preserve">
          <source>Triggered before a module build has started.</source>
          <target state="translated">모듈 빌드가 시작되기 전에 트리거됩니다.</target>
        </trans-unit>
        <trans-unit id="285ec850c11d78bac10f6bfa31b69a37f1b257c9" translate="yes" xml:space="preserve">
          <source>Troubleshooting</source>
          <target state="translated">Troubleshooting</target>
        </trans-unit>
        <trans-unit id="ffb2ecf6611790daff972e263d7001c037770c42" translate="yes" xml:space="preserve">
          <source>Try to keep the chunk count below a limit</source>
          <target state="translated">청크 수를 제한 아래로 유지하십시오</target>
        </trans-unit>
        <trans-unit id="b525bcfcdd619ae45cbe7b652f2a2e93cc867f70" translate="yes" xml:space="preserve">
          <source>Try to keep the chunk size above a limit</source>
          <target state="translated">청크 크기를 제한보다 높게 유지하십시오</target>
        </trans-unit>
        <trans-unit id="6b517438de5f4b79f54fb3ec50b752a1392cebdf" translate="yes" xml:space="preserve">
          <source>Turn on &lt;a href=&quot;https://whatis.techtarget.com/definition/polling&quot;&gt;polling&lt;/a&gt; by passing &lt;code&gt;true&lt;/code&gt;, or specifying a poll interval in milliseconds:</source>
          <target state="translated">를 켜고 &lt;a href=&quot;https://whatis.techtarget.com/definition/polling&quot;&gt;폴링&lt;/a&gt; 전달하여 &lt;code&gt;true&lt;/code&gt; 또는 밀리 초 단위로 폴링 간격을 지정 :</target>
        </trans-unit>
        <trans-unit id="38fca6ee99a8e2eb5692ba03fc79c782860fdf0d" translate="yes" xml:space="preserve">
          <source>Turn on debugging mode</source>
          <target state="translated">디버깅 모드를 켭니다</target>
        </trans-unit>
        <trans-unit id="0b364042060d283631bdc472627fff2ec14242bf" translate="yes" xml:space="preserve">
          <source>Turn on watch mode. This means that after the initial build, webpack will continue to watch for changes in any of the resolved files. Watch mode is turned off by default:</source>
          <target state="translated">시계 모드를 켭니다. 즉, 초기 빌드 후에도 웹팩은 해결 된 파일의 변경 사항을 계속 감시합니다. 시계 모드는 기본적으로 꺼져 있습니다.</target>
        </trans-unit>
        <trans-unit id="b9173d10bd7a6471f8b2bcda45935dfcb7aa6ea4" translate="yes" xml:space="preserve">
          <source>Turns hints on/off. In addition, tells webpack to throw either an error or a warning when hints are found. This property is set to &lt;code&gt;&quot;warning&quot;&lt;/code&gt; by default.</source>
          <target state="translated">힌트를 켜거나 끕니다. 또한 힌트를 찾을 때 오류나 경고가 발생하도록 웹팩에 지시합니다. 이 속성은 기본적 으로 &lt;code&gt;&quot;warning&quot;&lt;/code&gt; 로 설정되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="5ce6d5323234bd0947f55f8ac9407c285c721c2b" translate="yes" xml:space="preserve">
          <source>Tweak styling faster -- almost comparable to changing styles in the browser's debugger.</source>
          <target state="translated">브라우저 디버거에서 스타일을 변경하는 것과 거의 비슷한 스타일을 더 빠르게 조정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="8e1a738f77891efb46fed43843ce712380ab54a1" translate="yes" xml:space="preserve">
          <source>Two similar techniques are supported by webpack when it comes to dynamic code splitting. The first and recommended approach is to use the &lt;a href=&quot;../api/module-methods#import-&quot;&gt;&lt;code&gt;import()&lt;/code&gt; syntax&lt;/a&gt; that conforms to the &lt;a href=&quot;https://github.com/tc39/proposal-dynamic-import&quot;&gt;ECMAScript proposal&lt;/a&gt; for dynamic imports. The legacy, webpack-specific approach is to use &lt;a href=&quot;../api/module-methods#require-ensure&quot;&gt;&lt;code&gt;require.ensure&lt;/code&gt;&lt;/a&gt;. Let's try using the first of these two approaches...</source>
          <target state="translated">동적 코드 분할과 관련하여 웹팩에서 유사한 두 가지 기술을 지원합니다. 첫 번째 권장 방법은 동적 가져 오기에 대한 &lt;a href=&quot;https://github.com/tc39/proposal-dynamic-import&quot;&gt;ECMAScript 제안&lt;/a&gt; 을 준수 하는 &lt;a href=&quot;../api/module-methods#import-&quot;&gt; &lt;code&gt;import()&lt;/code&gt; 구문&lt;/a&gt; 을 사용하는 것 입니다. 기존의 웹 팩별 접근 방식은 &lt;a href=&quot;../api/module-methods#require-ensure&quot;&gt; &lt;code&gt;require.ensure&lt;/code&gt; &lt;/a&gt; 를 사용하는 것 입니다. 이 두 가지 방법 중 첫 번째 방법을 사용해 봅시다 ...</target>
        </trans-unit>
        <trans-unit id="3deb7456519697ecf4eefc455516c969a3681bae" translate="yes" xml:space="preserve">
          <source>Type</source>
          <target state="translated">Type</target>
        </trans-unit>
        <trans-unit id="94a229b08fb0895570dee34d92dd44e883395943" translate="yes" xml:space="preserve">
          <source>Type: &lt;code&gt;Array[Function]&lt;/code&gt; Default: &lt;code&gt;undefined&lt;/code&gt;</source>
          <target state="translated">유형 : &lt;code&gt;Array[Function]&lt;/code&gt; 기본값 : &lt;code&gt;undefined&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f15a23ea737e87dd7451dd5e0e9e29e27f4055b6" translate="yes" xml:space="preserve">
          <source>Type: &lt;code&gt;Array[Object]&lt;/code&gt; Default: &lt;code&gt;undefined&lt;/code&gt;</source>
          <target state="translated">유형 : &lt;code&gt;Array[Object]&lt;/code&gt; 기본값 : &lt;code&gt;undefined&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="99b4afaa36767e15dfc4084c10fbd22041b73af8" translate="yes" xml:space="preserve">
          <source>Type: &lt;code&gt;Array[String]&lt;/code&gt; Default: &lt;code&gt;[]&lt;/code&gt;</source>
          <target state="translated">유형 : &lt;code&gt;Array[String]&lt;/code&gt; 기본값 : &lt;code&gt;[]&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e1786d5f336b7023a095ff9d273b42e018467359" translate="yes" xml:space="preserve">
          <source>Type: &lt;code&gt;Boolean&lt;/code&gt;</source>
          <target state="translated">유형 : &lt;code&gt;Boolean&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="48f390c9de4ea544dff9d1ec37c3523911fa118e" translate="yes" xml:space="preserve">
          <source>Type: &lt;code&gt;Boolean&lt;/code&gt; Default: &lt;code&gt;false&lt;/code&gt;</source>
          <target state="translated">유형 : &lt;code&gt;Boolean&lt;/code&gt; 기본값 : &lt;code&gt;false&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="4f822f4d91655775283eeb9acc861e91bb8593e6" translate="yes" xml:space="preserve">
          <source>Type: &lt;code&gt;Boolean&lt;/code&gt; Default: &lt;code&gt;true&lt;/code&gt;</source>
          <target state="translated">유형 : &lt;code&gt;Boolean&lt;/code&gt; 기본값 : &lt;code&gt;true&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="24d4453466129b8bf2e49bdf3cd712902713dd56" translate="yes" xml:space="preserve">
          <source>Type: &lt;code&gt;Boolean&lt;/code&gt; Default: &lt;code&gt;undefined&lt;/code&gt;</source>
          <target state="translated">유형 : &lt;code&gt;Boolean&lt;/code&gt; 기본값 : &lt;code&gt;undefined&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b84b9bc7aaebed88083d6cb3754bfb6954242dfe" translate="yes" xml:space="preserve">
          <source>Type: &lt;code&gt;Boolean|Number&lt;/code&gt; Default: &lt;code&gt;false&lt;/code&gt;</source>
          <target state="translated">유형 : &lt;code&gt;Boolean|Number&lt;/code&gt; 기본값 : &lt;code&gt;false&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a45789cbb27a158b6b7a1d196c4567be588ed494" translate="yes" xml:space="preserve">
          <source>Type: &lt;code&gt;Boolean|String&lt;/code&gt; Default: &lt;code&gt;false&lt;/code&gt;</source>
          <target state="translated">유형 : &lt;code&gt;Boolean|String&lt;/code&gt; 기본값 : &lt;code&gt;false&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c102d3840abe1451f84b0caecaf1f118a0f7975e" translate="yes" xml:space="preserve">
          <source>Type: &lt;code&gt;Boolean|String|Function&amp;lt;(string) -&amp;gt; String&amp;gt;&lt;/code&gt; Default: &lt;code&gt;/*! For license information please see ${commentsFile} */&lt;/code&gt;</source>
          <target state="translated">유형 : &lt;code&gt;Boolean|String|Function&amp;lt;(string) -&amp;gt; String&amp;gt;&lt;/code&gt; 기본값 : &lt;code&gt;/*! For license information please see ${commentsFile} */&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="8868d15eb3fe0352c846a246f7ea008f1e7c3180" translate="yes" xml:space="preserve">
          <source>Type: &lt;code&gt;Boolean|String|RegExp|Function&amp;lt;(node, comment) -&amp;gt; Boolean|Object&amp;gt;&lt;/code&gt;</source>
          <target state="translated">유형 : &lt;code&gt;Boolean|String|RegExp|Function&amp;lt;(node, comment) -&amp;gt; Boolean|Object&amp;gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="2765b2640ca4d35ed492a2c7d20819253ddc2db8" translate="yes" xml:space="preserve">
          <source>Type: &lt;code&gt;Boolean|String|RegExp|Function&amp;lt;(node, comment) -&amp;gt; Boolean|Object&amp;gt;&lt;/code&gt; Default: &lt;code&gt;false&lt;/code&gt;</source>
          <target state="translated">유형 : &lt;code&gt;Boolean|String|RegExp|Function&amp;lt;(node, comment) -&amp;gt; Boolean|Object&amp;gt;&lt;/code&gt; 기본값 : &lt;code&gt;false&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="260402fdd52f9d5162c6febf7c4529ca530706d0" translate="yes" xml:space="preserve">
          <source>Type: &lt;code&gt;Function&amp;lt;(defaultCacheKeys, file) -&amp;gt; Object&amp;gt;&lt;/code&gt; Default: &lt;code&gt;defaultCacheKeys =&amp;gt; defaultCacheKeys&lt;/code&gt;</source>
          <target state="translated">유형 : &lt;code&gt;Function&amp;lt;(defaultCacheKeys, file) -&amp;gt; Object&amp;gt;&lt;/code&gt; 기본값 : &lt;code&gt;defaultCacheKeys =&amp;gt; defaultCacheKeys&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e5b22bb98280473acea9cd815eda355202cba26a" translate="yes" xml:space="preserve">
          <source>Type: &lt;code&gt;Function&amp;lt;(warning, source) -&amp;gt; Boolean&amp;gt;&lt;/code&gt; Default: &lt;code&gt;() =&amp;gt; true&lt;/code&gt;</source>
          <target state="translated">유형 : &lt;code&gt;Function&amp;lt;(warning, source) -&amp;gt; Boolean&amp;gt;&lt;/code&gt; 기본값 : &lt;code&gt;() =&amp;gt; true&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="6ed6bae83b76c8a2fcf92f4b5e1cf90a0af91066" translate="yes" xml:space="preserve">
          <source>Type: &lt;code&gt;Function&lt;/code&gt; Default: &lt;code&gt;undefined&lt;/code&gt;</source>
          <target state="translated">유형 : &lt;code&gt;Function&lt;/code&gt; 기본값 : &lt;code&gt;undefined&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="68be30dbb80b283998a4620ae5f2cdfd8a10de7a" translate="yes" xml:space="preserve">
          <source>Type: &lt;code&gt;Number&lt;/code&gt;</source>
          <target state="translated">유형 : &lt;code&gt;Number&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="1c50fda292f228e964a3c134d2d898e59768354f" translate="yes" xml:space="preserve">
          <source>Type: &lt;code&gt;Number&lt;/code&gt; Default: &lt;code&gt;9999&lt;/code&gt;</source>
          <target state="translated">유형 : &lt;code&gt;Number&lt;/code&gt; 기본값 : &lt;code&gt;9999&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0df7a0769e52452e3df73f39fb7b1a59df2977b3" translate="yes" xml:space="preserve">
          <source>Type: &lt;code&gt;Number&lt;/code&gt; Default: &lt;code&gt;undefined&lt;/code&gt;</source>
          <target state="translated">유형 : &lt;code&gt;Number&lt;/code&gt; 기본값 : &lt;code&gt;undefined&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="87a72a4a194580af6f23ca7095e7565efd80de57" translate="yes" xml:space="preserve">
          <source>Type: &lt;code&gt;Object&lt;/code&gt;</source>
          <target state="translated">유형 : &lt;code&gt;Object&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="aa1722ad0036438a3b69cf0e3b5d3e0af63f80d4" translate="yes" xml:space="preserve">
          <source>Type: &lt;code&gt;Object&lt;/code&gt; Default: &lt;a href=&quot;https://github.com/fabiosantoscode/terser#minify-options&quot;&gt;default&lt;/a&gt;</source>
          <target state="translated">유형 : &lt;code&gt;Object&lt;/code&gt; 기본값 : &lt;a href=&quot;https://github.com/fabiosantoscode/terser#minify-options&quot;&gt;기본값&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="690a74e8c6ac1a54d1b06a87192c7609fc70939c" translate="yes" xml:space="preserve">
          <source>Type: &lt;code&gt;Object&lt;/code&gt; Default: &lt;code&gt;require('stylelint').formatters.string&lt;/code&gt;</source>
          <target state="translated">유형 : &lt;code&gt;Object&lt;/code&gt; 기본값 : &lt;code&gt;require('stylelint').formatters.string&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a00bf287d8473e657b95694eeeebd890a935fbff" translate="yes" xml:space="preserve">
          <source>Type: &lt;code&gt;Object&lt;/code&gt; Default: &lt;code&gt;undefined&lt;/code&gt;</source>
          <target state="translated">유형 : &lt;code&gt;Object&lt;/code&gt; 기본값 : &lt;code&gt;undefined&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f1e7391bdda68bf329c48bd6c9153a513715a424" translate="yes" xml:space="preserve">
          <source>Type: &lt;code&gt;RegExp&lt;/code&gt; Default: &lt;code&gt;undefined&lt;/code&gt;</source>
          <target state="translated">유형 : &lt;code&gt;RegExp&lt;/code&gt; 기본값 : &lt;code&gt;undefined&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="2ad0c59a95b0e6d486f10a3a9d7eba6a82efa298" translate="yes" xml:space="preserve">
          <source>Type: &lt;code&gt;Regex|Function&amp;lt;(string) -&amp;gt; {String}&amp;gt;&lt;/code&gt; Default: &lt;code&gt;${file}.LICENSE&lt;/code&gt;</source>
          <target state="translated">유형 : &lt;code&gt;Regex|Function&amp;lt;(string) -&amp;gt; {String}&amp;gt;&lt;/code&gt; 기본값 : &lt;code&gt;${file}.LICENSE&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f9497118568642094db37dca1d955af12afd5eca" translate="yes" xml:space="preserve">
          <source>Type: &lt;code&gt;Sting|RegExp|Array&amp;lt;RegExp&amp;gt;&lt;/code&gt; Default: &lt;code&gt;/\.js(\?.*)?$/i&lt;/code&gt;</source>
          <target state="translated">유형 : &lt;code&gt;Sting|RegExp|Array&amp;lt;RegExp&amp;gt;&lt;/code&gt; 기본값 : &lt;code&gt;/\.js(\?.*)?$/i&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0ec6af7a195975bd36af2b460624abae040ba7ce" translate="yes" xml:space="preserve">
          <source>Type: &lt;code&gt;Sting|RegExp|Array&amp;lt;RegExp&amp;gt;&lt;/code&gt; Default: &lt;code&gt;undefined&lt;/code&gt;</source>
          <target state="translated">유형 : &lt;code&gt;Sting|RegExp|Array&amp;lt;RegExp&amp;gt;&lt;/code&gt; 기본값 : &lt;code&gt;undefined&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="3c3e574cd51824e490cce46575d42da6d5fbe4e3" translate="yes" xml:space="preserve">
          <source>Type: &lt;code&gt;String | Array[String]&lt;/code&gt; Default: &lt;code&gt;undefined&lt;/code&gt;</source>
          <target state="translated">유형 : &lt;code&gt;String | Array[String]&lt;/code&gt; 기본값 : &lt;code&gt;undefined&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="dad081ed1244c0f0182b6af2ed80d0835e74f031" translate="yes" xml:space="preserve">
          <source>Type: &lt;code&gt;String&lt;/code&gt;</source>
          <target state="translated">유형 : &lt;code&gt;String&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b67b322475209b0ccffe39f447c84533fd7ff84d" translate="yes" xml:space="preserve">
          <source>Type: &lt;code&gt;String&lt;/code&gt; Default: &lt;a href=&quot;../configuration/entry-context#context&quot;&gt;&lt;code&gt;context&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">유형 : &lt;code&gt;String&lt;/code&gt; 기본값 : &lt;a href=&quot;../configuration/entry-context#context&quot;&gt; &lt;code&gt;context&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="54223bad6aa67e8e06b399d5a079e2fe042e5381" translate="yes" xml:space="preserve">
          <source>Type: &lt;code&gt;String&lt;/code&gt; Default: &lt;code&gt;'file-loader'&lt;/code&gt;</source>
          <target state="translated">유형 : &lt;code&gt;String&lt;/code&gt; 기본값 : &lt;code&gt;'file-loader'&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="3450d9d063d640321d1424d901a3cc0370a43af5" translate="yes" xml:space="preserve">
          <source>Type: &lt;code&gt;String&lt;/code&gt; Default: &lt;code&gt;'hex'&lt;/code&gt;</source>
          <target state="translated">유형 : &lt;code&gt;String&lt;/code&gt; 기본값 : &lt;code&gt;'hex'&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f09c525848a9e04af4422213f7421822bdec9703" translate="yes" xml:space="preserve">
          <source>Type: &lt;code&gt;String&lt;/code&gt; Default: &lt;code&gt;'md5'&lt;/code&gt;</source>
          <target state="translated">유형 : &lt;code&gt;String&lt;/code&gt; 기본값 : &lt;code&gt;'md5'&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d338a21826be5e359d37d9946a8a9cc06244641e" translate="yes" xml:space="preserve">
          <source>Type: &lt;code&gt;String&lt;/code&gt; Default: &lt;code&gt;(file extension)&lt;/code&gt;</source>
          <target state="translated">유형 : &lt;code&gt;String&lt;/code&gt; 기본값 : &lt;code&gt;(file extension)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="458860cc8794fa1dce5c93964ce4854602e52c79" translate="yes" xml:space="preserve">
          <source>Type: &lt;code&gt;String&lt;/code&gt; Default: &lt;code&gt;[hash].worker.js&lt;/code&gt;</source>
          <target state="translated">유형 : &lt;code&gt;String&lt;/code&gt; 기본값 : &lt;code&gt;[hash].worker.js&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="64522537628ac15d313112de255758c15749456e" translate="yes" xml:space="preserve">
          <source>Type: &lt;code&gt;String&lt;/code&gt; Default: &lt;code&gt;compiler.context&lt;/code&gt;</source>
          <target state="translated">유형 : &lt;code&gt;String&lt;/code&gt; 기본값 : &lt;code&gt;compiler.context&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c2eabe9055d6691bbf54d928e4538a230fed05fc" translate="yes" xml:space="preserve">
          <source>Type: &lt;code&gt;String&lt;/code&gt; Default: &lt;code&gt;file.basename&lt;/code&gt;</source>
          <target state="translated">유형 : &lt;code&gt;String&lt;/code&gt; 기본값 : &lt;code&gt;file.basename&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="aa3afefe72790380f9808b4dff5a61622b6267d7" translate="yes" xml:space="preserve">
          <source>Type: &lt;code&gt;String&lt;/code&gt; Default: &lt;code&gt;file.dirname&lt;/code&gt;</source>
          <target state="translated">유형 : &lt;code&gt;String&lt;/code&gt; 기본값 : &lt;code&gt;file.dirname&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d8b5890ce141620217849910ef33a2967576fd9f" translate="yes" xml:space="preserve">
          <source>Type: &lt;code&gt;String&lt;/code&gt; Default: &lt;code&gt;file.extname&lt;/code&gt;</source>
          <target state="translated">유형 : &lt;code&gt;String&lt;/code&gt; 기본값 : &lt;code&gt;file.extname&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="6b40e8955703b7795ceda160c5ceadbd272eab79" translate="yes" xml:space="preserve">
          <source>Type: &lt;code&gt;String&lt;/code&gt; Default: &lt;code&gt;null&lt;/code&gt;</source>
          <target state="translated">유형 : &lt;code&gt;String&lt;/code&gt; 기본값 : &lt;code&gt;null&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="8388c10e54000d4de84160be8aca57b37c6901be" translate="yes" xml:space="preserve">
          <source>Type: &lt;code&gt;String&lt;/code&gt; Default: &lt;code&gt;process.cwd()&lt;/code&gt;</source>
          <target state="translated">유형 : &lt;code&gt;String&lt;/code&gt; 기본값 : &lt;code&gt;process.cwd()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="856eda01ea92fee417c94b9f976fd41b8817e945" translate="yes" xml:space="preserve">
          <source>Type: &lt;code&gt;String&lt;/code&gt; Default: &lt;code&gt;undefined&lt;/code&gt;</source>
          <target state="translated">유형 : &lt;code&gt;String&lt;/code&gt; 기본값 : &lt;code&gt;undefined&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="db8cb2d531af0482fa5e26cb76d4c1b4bd4ddf6e" translate="yes" xml:space="preserve">
          <source>Type: &lt;code&gt;String|Array[String]&lt;/code&gt; Default: &lt;code&gt;'**/*.s?(a|c)ss'&lt;/code&gt;</source>
          <target state="translated">유형 : &lt;code&gt;String|Array[String]&lt;/code&gt; 기본값 : &lt;code&gt;'**/*.s?(a|c)ss'&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0cfd43f77b19279843713625949db91e7de44cbc" translate="yes" xml:space="preserve">
          <source>Type: &lt;code&gt;String|Buffer&lt;/code&gt; Default: &lt;code&gt;undefined&lt;/code&gt;&lt;em&gt;Required&lt;/em&gt;</source>
          <target state="translated">유형 : &lt;code&gt;String|Buffer&lt;/code&gt; 기본값 : &lt;code&gt;undefined&lt;/code&gt; &lt;em&gt;필수&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="28283229d6030ab5c7fc80576b4f1863027b6f9e" translate="yes" xml:space="preserve">
          <source>Type: &lt;code&gt;String|Function&lt;/code&gt; Default: &lt;a href=&quot;../api/module-variables#__webpack_public_path__-webpack-specific-&quot;&gt;&lt;code&gt;__webpack_public_path__&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">유형 : &lt;code&gt;String|Function&lt;/code&gt; 기본값 : &lt;a href=&quot;../api/module-variables#__webpack_public_path__-webpack-specific-&quot;&gt; &lt;code&gt;__webpack_public_path__&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="360ab5e9d49ff583c21f7d76eb3d326afea79f20" translate="yes" xml:space="preserve">
          <source>Type: &lt;code&gt;String|Function&lt;/code&gt; Default: &lt;code&gt;'[hash].[ext]'&lt;/code&gt;</source>
          <target state="translated">유형 : &lt;code&gt;String|Function&lt;/code&gt; 기본값 : &lt;code&gt;'[hash].[ext]'&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="3091c75d84d793177ba7ea3b610ff90640c8fc55" translate="yes" xml:space="preserve">
          <source>Type: &lt;code&gt;String|Function&lt;/code&gt; Default: &lt;code&gt;undefined&lt;/code&gt;</source>
          <target state="translated">유형 : &lt;code&gt;String|Function&lt;/code&gt; 기본값 : &lt;code&gt;undefined&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="8113ae3d265d1a67acc2263bc2ca536d74c3ff2a" translate="yes" xml:space="preserve">
          <source>Type: &lt;code&gt;String|RegExp|Array&amp;lt;String,RegExp&amp;gt;&lt;/code&gt; Default: &lt;code&gt;undefined&lt;/code&gt;</source>
          <target state="translated">유형 : &lt;code&gt;String|RegExp|Array&amp;lt;String,RegExp&amp;gt;&lt;/code&gt; 기본값 : &lt;code&gt;undefined&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d4a86cb946d4af4766f6a695502b64f3ea0cd58b" translate="yes" xml:space="preserve">
          <source>TypeScript</source>
          <target state="translated">TypeScript</target>
        </trans-unit>
        <trans-unit id="c2d9ac914c647cad0dbcbcb87931238e275c6336" translate="yes" xml:space="preserve">
          <source>TypeScript Loader</source>
          <target state="translated">TypeScript 로더</target>
        </trans-unit>
        <trans-unit id="93b9e289e2842469d001eccf7ad5d79f3c302dc9" translate="yes" xml:space="preserve">
          <source>Types</source>
          <target state="translated">Types</target>
        </trans-unit>
        <trans-unit id="1f7c2dd82181496d2b141ba86b492b3af4761c11" translate="yes" xml:space="preserve">
          <source>Typical Use Cases</source>
          <target state="translated">일반적인 사용 사례</target>
        </trans-unit>
        <trans-unit id="6b1515c87f6a7ea85127e01e963023637ee473a4" translate="yes" xml:space="preserve">
          <source>Typically, only one master &lt;code&gt;Compiler&lt;/code&gt; instance is created, although child compilers can be created in order to delegate specific tasks. The &lt;code&gt;Compiler&lt;/code&gt; is ultimately just a function which performs bare minimum functionality to keep a lifecycle running. It delegates all the loading, bundling, and writing work to registered plugins.</source>
          <target state="translated">특정 작업을 위임하기 위해 자식 컴파일러를 만들 수 있지만 일반적으로 하나의 마스터 &lt;code&gt;Compiler&lt;/code&gt; 인스턴스 만 만들어집니다. &lt;code&gt;Compiler&lt;/code&gt; 궁극적으로 라이프 사이클을 계속 실행하기위한 최소한의 기능을 수행하는 단지 기능입니다. 모든로드, 번들 및 쓰기 작업을 등록 된 플러그인에 위임합니다.</target>
        </trans-unit>
        <trans-unit id="c3f8e78bf56c04e550ab81796136efb41f9da8c9" translate="yes" xml:space="preserve">
          <source>UMD: available after AMD or CommonJS &lt;code&gt;require&lt;/code&gt; (&lt;code&gt;libraryTarget:'umd'&lt;/code&gt;).</source>
          <target state="translated">UMD : AMD 또는 CommonJS가 &lt;code&gt;require&lt;/code&gt; 후에 사용 가능 합니다 ( &lt;code&gt;libraryTarget:'umd'&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="a7306d507f537995a908cdc2c667543de98fc215" translate="yes" xml:space="preserve">
          <source>UglifyJsPlugin</source>
          <target state="translated">UglifyJsPlugin</target>
        </trans-unit>
        <trans-unit id="3d9844683293513f543c7b29de1eca0738819eb5" translate="yes" xml:space="preserve">
          <source>UglifyjsWebpackPlugin</source>
          <target state="translated">UglifyjsWebpackPlugin</target>
        </trans-unit>
        <trans-unit id="a97df0e9ab39030d7a23b49ea204e7804ae6467e" translate="yes" xml:space="preserve">
          <source>Unfortunately, Less doesn't map all options 1-by-1 to camelCase. When in doubt, &lt;a href=&quot;https://github.com/less/less.js/blob/3.x/bin/lessc&quot;&gt;check their executable&lt;/a&gt; and search for the dash-case option.</source>
          <target state="translated">불행히도 Less는 모든 옵션을 카멜 케이스에 하나씩 매핑하지 않습니다. 때 의심, &lt;a href=&quot;https://github.com/less/less.js/blob/3.x/bin/lessc&quot;&gt;자신의 실행 파일을 확인&lt;/a&gt; 하고 대시 경우의 옵션을 검색합니다.</target>
        </trans-unit>
        <trans-unit id="02b28fce43a60e9b67980e224a3271b9d05a18d1" translate="yes" xml:space="preserve">
          <source>Unique ident for this plugin instance. (For advanced usage only, by default automatically generated)</source>
          <target state="translated">이 플러그인 인스턴스의 고유 ID입니다. (고급 사용의 경우 기본적으로 자동 생성됨)</target>
        </trans-unit>
        <trans-unit id="38096a0782d24be3f1ac8a005109a6f9e98a2e3c" translate="yes" xml:space="preserve">
          <source>Unlicense</source>
          <target state="translated">Unlicense</target>
        </trans-unit>
        <trans-unit id="87275ae56cb19d69dde22669d78018993c53c041" translate="yes" xml:space="preserve">
          <source>Unlike &lt;a href=&quot;define-plugin&quot;&gt;&lt;code&gt;DefinePlugin&lt;/code&gt;&lt;/a&gt;, default values are applied to &lt;code&gt;JSON.stringify&lt;/code&gt; by the &lt;code&gt;EnvironmentPlugin&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;define-plugin&quot;&gt; &lt;code&gt;DefinePlugin&lt;/code&gt; &lt;/a&gt; 과 달리 기본값 은 &lt;code&gt;EnvironmentPlugin&lt;/code&gt; 에 의해 &lt;code&gt;JSON.stringify&lt;/code&gt; 에 적용됩니다 .</target>
        </trans-unit>
        <trans-unit id="97906c9c9c0bfb96fc8e4c7b67d7ad433d30558b" translate="yes" xml:space="preserve">
          <source>Updates style &lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt;</source>
          <target state="translated">업데이트 스타일 &lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0bb18642b70b9f8a9c12ccf39487328f306b8e19" translate="yes" xml:space="preserve">
          <source>Usage</source>
          <target state="translated">Usage</target>
        </trans-unit>
        <trans-unit id="3439e83eddd9b986dc9a370152a22cf7dcf9b189" translate="yes" xml:space="preserve">
          <source>Usage example</source>
          <target state="translated">사용 예</target>
        </trans-unit>
        <trans-unit id="41cb38aef0f43893edb2a921684f2f6f40f9e95c" translate="yes" xml:space="preserve">
          <source>Usage via the CLI</source>
          <target state="translated">CLI를 통한 사용법</target>
        </trans-unit>
        <trans-unit id="049f5e1baa1376397ff904e81ced9390d85660bb" translate="yes" xml:space="preserve">
          <source>Usage with config file</source>
          <target state="translated">구성 파일 사용</target>
        </trans-unit>
        <trans-unit id="420dc5d6f5dd5e472ab220d4ffe705c20bd6dcc7" translate="yes" xml:space="preserve">
          <source>Usage with default values</source>
          <target state="translated">기본값이있는 사용법</target>
        </trans-unit>
        <trans-unit id="f0bda72188507cba1ef2ddbd4e83a886112b7438" translate="yes" xml:space="preserve">
          <source>Usage with require statement loader prefix</source>
          <target state="translated">require 문 로더 접두사와 함께 사용</target>
        </trans-unit>
        <trans-unit id="785ae0c3486e73e9f8b768557933a332df04dc7d" translate="yes" xml:space="preserve">
          <source>Usage without config file</source>
          <target state="translated">구성 파일이없는 사용법</target>
        </trans-unit>
        <trans-unit id="71ee1172757fd42561b9cf137f9ab461f5d586e7" translate="yes" xml:space="preserve">
          <source>Usage: &lt;code&gt;entry: string|Array&amp;lt;string&amp;gt;&lt;/code&gt;</source>
          <target state="translated">사용법 : &lt;code&gt;entry: string|Array&amp;lt;string&amp;gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e054d435d046f8777136e4b00386b25fc845a634" translate="yes" xml:space="preserve">
          <source>Usage: &lt;code&gt;entry: {[entryChunkName: string]: string|Array&amp;lt;string&amp;gt;}&lt;/code&gt;</source>
          <target state="translated">사용법 : &lt;code&gt;entry: {[entryChunkName: string]: string|Array&amp;lt;string&amp;gt;}&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="048a95d8e63a18a35214152fa9cdd1ca3affe9c9" translate="yes" xml:space="preserve">
          <source>Usage: Lodash Map</source>
          <target state="translated">사용법 : Lodash Map</target>
        </trans-unit>
        <trans-unit id="bd71a2d8f7fdfbd229f3ddfe2c52c1ebc36f92b1" translate="yes" xml:space="preserve">
          <source>Usage: Vue.js</source>
          <target state="translated">사용법 : Vue.js</target>
        </trans-unit>
        <trans-unit id="c71a7f709525e96282aab1489390403a74f7af5e" translate="yes" xml:space="preserve">
          <source>Usage: custom &lt;code&gt;outputPath&lt;/code&gt;</source>
          <target state="translated">사용법 : 사용자 정의 &lt;code&gt;outputPath&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="6074933fbc4d7ed357713b8393150012a221bc81" translate="yes" xml:space="preserve">
          <source>Usage: default</source>
          <target state="translated">사용법 : 기본값</target>
        </trans-unit>
        <trans-unit id="97aa9139b5759d53264af935bc8b66d67296c1c9" translate="yes" xml:space="preserve">
          <source>Usage: jQuery</source>
          <target state="translated">사용법 : jQuery</target>
        </trans-unit>
        <trans-unit id="c9948b5c3a0efb386160d78d9e95149d8988754d" translate="yes" xml:space="preserve">
          <source>Usage: jQuery with Angular 1</source>
          <target state="translated">사용법 : jQuery with Angular 1</target>
        </trans-unit>
        <trans-unit id="90283442f2ef3d264ecbf048521f8735be3ab70f" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;CommonsChunkPlugin&lt;/code&gt; to create bundles of shared application code between each page. Multi-page applications that reuse a lot of code/modules between entry points can greatly benefit from these techniques, as the amount of entry points increase.</source>
          <target state="translated">&lt;code&gt;CommonsChunkPlugin&lt;/code&gt; 을 사용 하여 각 페이지간에 공유 애플리케이션 코드 번들을 작성하십시오. 진입 점 사이에 많은 코드 / 모듈을 재사용하는 다중 페이지 응용 프로그램은 진입 점이 증가함에 따라 이러한 기술의 이점을 크게 활용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="6f1fed208551ff106887d8af5e80ff7ef296a976" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;module.rules&lt;/code&gt; whenever possible, as this will reduce boilerplate in your source code and allow you to debug or locate a loader faster if something goes south.</source>
          <target state="translated">가능하면 &lt;code&gt;module.rules&lt;/code&gt; 를 사용 하십시오. 소스 코드의 상용구가 줄어들고 남쪽으로가는 경우 로더를 더 빨리 디버깅하거나 찾을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c5c0671a0be6041e5f1d3866fb7667e4202e512d" translate="yes" xml:space="preserve">
          <source>Use Cases</source>
          <target state="translated">사용 사례</target>
        </trans-unit>
        <trans-unit id="e804363a0734db33e7dd8b2cf9fa692e9bd07cc6" translate="yes" xml:space="preserve">
          <source>Use ES2015 module syntax (i.e. &lt;code&gt;import&lt;/code&gt; and &lt;code&gt;export&lt;/code&gt;).</source>
          <target state="translated">ES2015 모듈 구문을 사용하십시오 (예 : &lt;code&gt;import&lt;/code&gt; 및 &lt;code&gt;export&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="8e3799199c2fd1385ca8a6679a7569bf770dc434" translate="yes" xml:space="preserve">
          <source>Use a &lt;code&gt;eval-source-map&lt;/code&gt; variant for incremental builds.</source>
          <target state="translated">증분 빌드 에는 &lt;code&gt;eval-source-map&lt;/code&gt; 변형을 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="3823015acd2a8397f2d349e0faf7bde67ec1677e" translate="yes" xml:space="preserve">
          <source>Use a different service URL in production/development builds:</source>
          <target state="translated">프로덕션 / 개발 빌드에서 다른 서비스 URL을 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="3423fcc4dce73b33f44b7a08148fbae5735d3851" translate="yes" xml:space="preserve">
          <source>Use different config file</source>
          <target state="translated">다른 구성 파일 사용</target>
        </trans-unit>
        <trans-unit id="5f963deeb0b38ab886479137bc92905c39af1075" translate="yes" xml:space="preserve">
          <source>Use fewer/smaller libraries.</source>
          <target state="translated">더 적거나 더 작은 라이브러리를 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="6ea91fd51d88210a0f6118413452bbea9e27499b" translate="yes" xml:space="preserve">
          <source>Use modules without having to use import/require</source>
          <target state="translated">가져 오기 / 필요없이 모듈 사용</target>
        </trans-unit>
        <trans-unit id="e2734a5814e4bc497b1db8f46457c27f5b96b2b7" translate="yes" xml:space="preserve">
          <source>Use multi-process parallel running to improve the build speed</source>
          <target state="translated">다중 프로세스 병렬 실행을 사용하여 빌드 속도 향상</target>
        </trans-unit>
        <trans-unit id="2f56bfa52ab19a884eb17c40d6e8a950a0ccd1d4" translate="yes" xml:space="preserve">
          <source>Use multi-process parallel running to improve the build speed. Default number of concurrent runs: &lt;code&gt;os.cpus().length - 1&lt;/code&gt;.</source>
          <target state="translated">빌드 속도를 높이려면 다중 프로세스 병렬 실행을 사용하십시오. 기본 동시 실행 수 : &lt;code&gt;os.cpus().length - 1&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="852a5e5247d5f01d785e00d48cebc874527016c3" translate="yes" xml:space="preserve">
          <source>Use of HtmlWebpackPlugin</source>
          <target state="translated">HtmlWebpackPlugin 사용</target>
        </trans-unit>
        <trans-unit id="b8a1bc5d1840853cc471934d460a60e714be6e6f" translate="yes" xml:space="preserve">
          <source>Use source maps to map error message locations to modules (This slows down the compilation) ⚠️ &lt;strong&gt;&lt;code&gt;cheap-source-map&lt;/code&gt; options don't work with this plugin&lt;/strong&gt;</source>
          <target state="translated">소스 맵을 사용하여 오류 메시지 위치를 모듈에 맵핑하십시오 (컴파일 속도가 느려짐). ⚠️ &lt;strong&gt; &lt;code&gt;cheap-source-map&lt;/code&gt; 옵션이이 플러그인에서 작동하지 않습니다&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="3568250533b173a47606070650342da08e05889e" translate="yes" xml:space="preserve">
          <source>Use source maps to map error message locations to modules (this slows down the compilation). If you use your own &lt;code&gt;minify&lt;/code&gt; function please read the &lt;code&gt;minify&lt;/code&gt; section for handling source maps correctly.</source>
          <target state="translated">소스 맵을 사용하여 오류 메시지 위치를 모듈에 맵핑하십시오 (이로 인해 컴파일 속도가 느려짐). 자체 &lt;code&gt;minify&lt;/code&gt; 기능 을 사용하는 경우 소스 맵을 올바르게 처리하기위한 &lt;code&gt;minify&lt;/code&gt; 섹션을 읽으십시오 .</target>
        </trans-unit>
        <trans-unit id="03afd1f2b8a63af2efbeb43ec2fe23408b535c2c" translate="yes" xml:space="preserve">
          <source>Use the &lt;a href=&quot;../guides/shimming#exports-loader&quot;&gt;exports-loader&lt;/a&gt; to add a module export to components which expect a symbol to be global.</source>
          <target state="translated">&lt;a href=&quot;../guides/shimming#exports-loader&quot;&gt;exports-loader&lt;/a&gt; 를 사용하여 심볼이 전역이 될 것으로 예상되는 컴포넌트에 모듈 내보내기를 추가하십시오.</target>
        </trans-unit>
        <trans-unit id="7047a6a883604b0b16f8494074ad551fccc60e76" translate="yes" xml:space="preserve">
          <source>Use the &lt;a href=&quot;../guides/shimming#imports-loader&quot;&gt;imports-loader&lt;/a&gt; when a script expects the &lt;code&gt;this&lt;/code&gt; keyword to reference &lt;code&gt;window&lt;/code&gt;.</source>
          <target state="translated">스크립트에서 &lt;code&gt;this&lt;/code&gt; 키워드가 &lt;code&gt;window&lt;/code&gt; 를 참조 할 것으로 예상되면 &lt;a href=&quot;../guides/shimming#imports-loader&quot;&gt;imports-loader를&lt;/a&gt; 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="29623b48270f1002c1bd8b54dc602f32f7ba9205" translate="yes" xml:space="preserve">
          <source>Use the &lt;a href=&quot;../guides/shimming#provideplugin&quot;&gt;ProvidePlugin&lt;/a&gt; to add a module import statement when a script expects a variable to be globally defined (but is now a module export).</source>
          <target state="translated">스크립트가 변수가 전역 적으로 정의 될 것으로 예상 할 때 (이제 모듈 내보내기 임) 모듈 가져 오기 명령문을 추가 하려면 &lt;a href=&quot;../guides/shimming#provideplugin&quot;&gt;ProvidePlugin&lt;/a&gt; 을 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="0f67fa4b9fb64dd98c2eb5ca8cdaa686cedc2d0b" translate="yes" xml:space="preserve">
          <source>Use the &lt;a href=&quot;../plugins/normal-module-replacement-plugin&quot;&gt;NormalModuleReplacementPlugin&lt;/a&gt; to have webpack swap a module-compliant version for a script.</source>
          <target state="translated">&lt;a href=&quot;../plugins/normal-module-replacement-plugin&quot;&gt;웹팩&lt;/a&gt; 이 스크립트를위한 모듈 호환 버전을 교환하도록 하려면 NormalModuleReplacementPlugin 을 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="a4c5aca3b91a835fa0116cb085e98809d051f74f" translate="yes" xml:space="preserve">
          <source>Use the &lt;a href=&quot;../plugins/source-map-dev-tool-plugin&quot;&gt;&lt;code&gt;SourceMapDevToolPlugin&lt;/code&gt;&lt;/a&gt; for a more fine grained configuration. See the &lt;a href=&quot;../loaders/source-map-loader&quot;&gt;&lt;code&gt;source-map-loader&lt;/code&gt;&lt;/a&gt; to deal with existing source maps.</source>
          <target state="translated">보다 세밀한 구성을 위해서는 &lt;a href=&quot;../plugins/source-map-dev-tool-plugin&quot;&gt; &lt;code&gt;SourceMapDevToolPlugin&lt;/code&gt; &lt;/a&gt; 을 사용하십시오 . 기존 소스 맵을 처리 하려면 &lt;a href=&quot;../loaders/source-map-loader&quot;&gt; &lt;code&gt;source-map-loader&lt;/code&gt; &lt;/a&gt; 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="a3fae1281abf983ea68fc5840def5bfe64a255ab" translate="yes" xml:space="preserve">
          <source>Use the &lt;a href=&quot;css-loader&quot;&gt;css-loader&lt;/a&gt; or the &lt;a href=&quot;raw-loader&quot;&gt;raw-loader&lt;/a&gt; to turn it into a JS module and the &lt;a href=&quot;../plugins/mini-css-extract-plugin&quot;&gt;MiniCssExtractPlugin&lt;/a&gt; to extract it into a separate file. Looking for the webpack 1 loader? Check out the &lt;a href=&quot;https://github.com/webpack-contrib/sass-loader/tree/archive/webpack-1&quot;&gt;archive/webpack-1 branch&lt;/a&gt;.</source>
          <target state="translated">사용 &lt;a href=&quot;css-loader&quot;&gt;CSS 로더&lt;/a&gt; 또는 &lt;a href=&quot;raw-loader&quot;&gt;원시 로더를&lt;/a&gt; JS 모듈과로를 설정하는 &lt;a href=&quot;../plugins/mini-css-extract-plugin&quot;&gt;MiniCssExtractPlugin&lt;/a&gt; 별도의 파일로 압축을 풉니 다. webpack 1 로더를 찾고 계십니까? &lt;a href=&quot;https://github.com/webpack-contrib/sass-loader/tree/archive/webpack-1&quot;&gt;archive / webpack-1 브랜치를&lt;/a&gt; 확인하십시오 .</target>
        </trans-unit>
        <trans-unit id="e8f5053cc9a5b3edfd022be6aa3ad7bbe8a89ce2" translate="yes" xml:space="preserve">
          <source>Use the &lt;a href=&quot;https://github.com/webpack/loader-utils#getoptions&quot;&gt;&lt;code&gt;getOptions&lt;/code&gt; method&lt;/a&gt; from &lt;code&gt;loader-utils&lt;/code&gt; to extract given loader options.</source>
          <target state="translated">주어진 로더 옵션을 추출하려면 &lt;code&gt;loader-utils&lt;/code&gt; 의 &lt;a href=&quot;https://github.com/webpack/loader-utils#getoptions&quot;&gt; &lt;code&gt;getOptions&lt;/code&gt; 메소드&lt;/a&gt; 를 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="d3246b4d7c38981b18ae1ec1216216ce55f906be" translate="yes" xml:space="preserve">
          <source>Use the &lt;a href=&quot;https://www.npmjs.com/package/stats-webpack-plugin&quot;&gt;StatsPlugin&lt;/a&gt; for more control over the generated profile.</source>
          <target state="translated">생성 된 프로파일을보다 세밀하게 제어 하려면 &lt;a href=&quot;https://www.npmjs.com/package/stats-webpack-plugin&quot;&gt;StatsPlugin&lt;/a&gt; 을 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="860721991110aab1ff27b582970ee9eb61d78c8b" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;CommonsChunkPlugin&lt;/code&gt; in &lt;code&gt;async&lt;/code&gt; mode in Multi-Page Applications.</source>
          <target state="translated">다중 페이지 응용 프로그램의 &lt;code&gt;async&lt;/code&gt; 모드에서 &lt;code&gt;CommonsChunkPlugin&lt;/code&gt; 을 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="951dd6398ced88957c9859db052edccc7d1f697e" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;CommonsChunkPlugin&lt;/code&gt; in Multi-Page Applications.</source>
          <target state="translated">다중 페이지 애플리케이션에서 &lt;code&gt;CommonsChunkPlugin&lt;/code&gt; 을 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="407ed185a0e815fd28205b6737de4f430df23ea0" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;DllPlugin&lt;/code&gt; to move code that is changed less often into a separate compilation. This will improve the application's compilation speed, although it does increase complexity of the build process.</source>
          <target state="translated">덜 자주 변경되는 코드를 별도의 컴파일로 이동 하려면 &lt;code&gt;DllPlugin&lt;/code&gt; 을 사용하십시오 . 이렇게하면 빌드 프로세스의 복잡성이 증가하지만 응용 프로그램의 컴파일 속도가 향상됩니다.</target>
        </trans-unit>
        <trans-unit id="4d5dba36cefe992d08bc8c0b9e38d294640a1015" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;fork-ts-checker-webpack-plugin&lt;/code&gt; for type checking in a separate process.</source>
          <target state="translated">별도의 프로세스에서 유형 검사에 &lt;code&gt;fork-ts-checker-webpack-plugin&lt;/code&gt; 을 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="7c3fc2640668db5a714dcb9a0de5b946c89e2776" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;include&lt;/code&gt; field to only apply the loader modules that actually need to be transformed by it:</source>
          <target state="translated">&lt;code&gt;include&lt;/code&gt; 필드를 사용하여 실제로 변환해야하는 로더 모듈을 적용하십시오.</target>
        </trans-unit>
        <trans-unit id="fbbfaa0dda995af3ea65e98d5191ff5346c703c6" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;optimization.noEmitOnErrors&lt;/code&gt; to skip the emitting phase whenever there are errors while compiling. This ensures that no erroring assets are emitted. The &lt;code&gt;emitted&lt;/code&gt; flag in the stats is &lt;code&gt;false&lt;/code&gt; for all assets.</source>
          <target state="translated">컴파일 중 오류가있을 때마다 발광 단계를 건너 뛰 려면 &lt;code&gt;optimization.noEmitOnErrors&lt;/code&gt; 를 사용하십시오 . 이를 통해 오류가있는 자산이 배출되지 않습니다. &lt;code&gt;emitted&lt;/code&gt; 통계에 플래그가 &lt;code&gt;false&lt;/code&gt; 모든 자산.</target>
        </trans-unit>
        <trans-unit id="3913a299d09b9025220f8c50bb09dcf00287f0af" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;ts-loader&lt;/code&gt; in &lt;code&gt;happyPackMode: true&lt;/code&gt; / &lt;code&gt;transpileOnly: true&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;happyPackMode: true&lt;/code&gt; / &lt;code&gt;transpileOnly: true&lt;/code&gt; 에서 &lt;code&gt;ts-loader&lt;/code&gt; 를 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="8bdf28e3536c978c9d5da7c7b4624bdcdb610692" translate="yes" xml:space="preserve">
          <source>Use the correct separators. I.e. &lt;code&gt;path.resolve(__dirname, &quot;app/folder&quot;)&lt;/code&gt; or &lt;code&gt;path.join(__dirname, &quot;app&quot;, &quot;folder&quot;)&lt;/code&gt;.</source>
          <target state="translated">올바른 구분 기호를 사용하십시오. 즉 &lt;code&gt;path.resolve(__dirname, &quot;app/folder&quot;)&lt;/code&gt; 또는 &lt;code&gt;path.join(__dirname, &quot;app&quot;, &quot;folder&quot;)&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="7379d2ab48a8375408752658fb495bfcc4fe6e48" translate="yes" xml:space="preserve">
          <source>Use the latest webpack version. We are always making performance improvements. The latest stable version of webpack is:</source>
          <target state="translated">최신 웹팩 버전을 사용하십시오. 우리는 항상 성능을 향상시키고 있습니다. 안정적인 최신 웹팩 버전은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="3794e2f2ca3183e0a2f1f8a8ff68c88df08489dd" translate="yes" xml:space="preserve">
          <source>Use these features when appropriate.</source>
          <target state="translated">적절한 경우이 기능을 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="44fb7f40b16f86e3c9d1a67800ba6d4f22b2a36d" translate="yes" xml:space="preserve">
          <source>Use this loader only for expensive operations!</source>
          <target state="translated">이 로더는 값 비싼 작업에만 사용하십시오!</target>
        </trans-unit>
        <trans-unit id="23a2d77df48f7534d7a83a9705ec7e9b4fd634be" translate="yes" xml:space="preserve">
          <source>Use this option to generate a JSON file containing webpack &quot;records&quot; -- pieces of data used to store module identifiers across multiple builds. You can use this file to track how modules change between builds. To generate one, simply specify a location:</source>
          <target state="translated">이 옵션을 사용하면 여러 빌드에서 모듈 식별자를 저장하는 데 사용되는 데이터 조각 인 웹팩 &quot;레코드&quot;를 포함하는 JSON 파일을 생성 할 수 있습니다. 이 파일을 사용하여 빌드 간 모듈 변경 방법을 추적 할 수 있습니다. 하나를 생성하려면 간단히 위치를 지정하십시오.</target>
        </trans-unit>
        <trans-unit id="9610bd59c5133421c8f3e6dfbbb7d9634045caa3" translate="yes" xml:space="preserve">
          <source>Use webpack's watch mode. Don't use other tools to watch your files and invoke webpack. The built in watch mode will keep track of timestamps and passes this information to the compilation for cache invalidation.</source>
          <target state="translated">웹팩의 시계 모드를 사용하십시오. 다른 도구를 사용하여 파일을보고 웹팩을 호출하지 마십시오. 내장 된 감시 모드는 타임 스탬프를 추적하고 캐시 무효화를 위해이 정보를 컴파일에 전달합니다.</target>
        </trans-unit>
        <trans-unit id="0b84f3bf4e0289f82295c4c1d5a1ffdb875f6fdb" translate="yes" xml:space="preserve">
          <source>Use with Babel (or other JS transpilers)</source>
          <target state="translated">Babel (또는 다른 JS 트랜스 필러)과 함께 사용</target>
        </trans-unit>
        <trans-unit id="35ca8091dbc2b566405680dbf80285e8b18d7b4b" translate="yes" xml:space="preserve">
          <source>UseEntry</source>
          <target state="translated">UseEntry</target>
        </trans-unit>
        <trans-unit id="e38960e325cc0f68417b6b1b71d40ee9740591d0" translate="yes" xml:space="preserve">
          <source>Used for migrating from webpack 1 to 2</source>
          <target state="translated">웹팩 1에서 2로 마이그레이션하는 데 사용</target>
        </trans-unit>
        <trans-unit id="5625e334052514a17c6f9f3ca6f42e9e6e306a18" translate="yes" xml:space="preserve">
          <source>Users have a choice between two CLI packages:</source>
          <target state="translated">사용자는 두 개의 CLI 패키지 중에서 선택할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="9c479f2d1ca6fe32e92cc9e767302871801f04b1" translate="yes" xml:space="preserve">
          <source>Users may also specify a length for the computed hash.</source>
          <target state="translated">사용자는 계산 된 해시의 길이를 지정할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="33ae43a361f7f98f7a19d9d0f97e82b984f74fce" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;enhanced-resolve&lt;/code&gt;, webpack can resolve three kinds of file paths:</source>
          <target state="translated">&lt;code&gt;enhanced-resolve&lt;/code&gt; 사용하여 webpack은 세 가지 파일 경로를 확인할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="592ad84b68126878fbfdffb1f8716ad6233721a2" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;eval()&lt;/code&gt;</source>
          <target state="translated">사용 &lt;code&gt;eval()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="fe814a133302a983806b7c5cad0cad9106094c3b" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;maxSize&lt;/code&gt; (either globally &lt;code&gt;optimization.splitChunks.maxSize&lt;/code&gt; per cache group &lt;code&gt;optimization.splitChunks.cacheGroups[x].maxSize&lt;/code&gt; or for the fallback cache group &lt;code&gt;optimization.splitChunks.fallbackCacheGroup.maxSize&lt;/code&gt;) tells webpack to try to split chunks bigger than &lt;code&gt;maxSize&lt;/code&gt; into smaller parts. Parts will be at least &lt;code&gt;minSize&lt;/code&gt; (next to &lt;code&gt;maxSize&lt;/code&gt;) in size. The algorithm is deterministic and changes to the modules will only have local impact. So that it is usable when using long term caching and doesn't require records. &lt;code&gt;maxSize&lt;/code&gt; is only a hint and could be violated when modules are bigger than &lt;code&gt;maxSize&lt;/code&gt; or splitting would violate &lt;code&gt;minSize&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;maxSize&lt;/code&gt; 를 사용하면 ( 캐시 그룹당 글로벌 &lt;code&gt;optimization.splitChunks.maxSize&lt;/code&gt; &lt;code&gt;optimization.splitChunks.cacheGroups[x].maxSize&lt;/code&gt; 또는 폴백 캐시 그룹 &lt;code&gt;optimization.splitChunks.fallbackCacheGroup.maxSize&lt;/code&gt; .splitChunks.fallbackCacheGroup.maxSize 사용) webpack이 &lt;code&gt;maxSize&lt;/code&gt; 보다 큰 청크 를 작은 부분으로 분할하려고합니다. . 부분 크기 는 최소 &lt;code&gt;minSize&lt;/code&gt; ( &lt;code&gt;maxSize&lt;/code&gt; 옆 )입니다. 알고리즘은 결정 론적이며 모듈을 변경하면 로컬에 영향을 미칩니다. 따라서 장기 캐싱을 사용할 때 사용할 수 있으며 레코드가 필요하지 않습니다. &lt;code&gt;maxSize&lt;/code&gt; 는 힌트 일 뿐이며 모듈이 &lt;code&gt;maxSize&lt;/code&gt; 보다 큰 경우 위반 될 수 있습니다.분할하면 &lt;code&gt;minSize&lt;/code&gt; 를 위반하게 됩니다.</target>
        </trans-unit>
        <trans-unit id="7eb388b7faf3e23b214a33a0d5906abfaadad16a" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;watching.invalidate&lt;/code&gt;, you can manually invalidate the current compiling round, without stopping the watch process:</source>
          <target state="translated">사용 &lt;code&gt;watching.invalidate&lt;/code&gt; 은 수동으로 시계 프로세스를 중지하지 않고, 현재 컴파일 내내 무효화 할 수 있습니다 :</target>
        </trans-unit>
        <trans-unit id="4864b84ad761309fe1200c9530d9247e825fecc4" translate="yes" xml:space="preserve">
          <source>Using Loaders</source>
          <target state="translated">로더 사용</target>
        </trans-unit>
        <trans-unit id="5855328d71e4db4f6dd615c5093f235d0d05f9d0" translate="yes" xml:space="preserve">
          <source>Using Records</source>
          <target state="translated">레코드 사용</target>
        </trans-unit>
        <trans-unit id="1dca7cbbab7fbff23530018b99c23edf26c5aec3" translate="yes" xml:space="preserve">
          <source>Using Third Party Libraries</source>
          <target state="translated">타사 라이브러리 사용</target>
        </trans-unit>
        <trans-unit id="8824c9d16039f13af26e6689d843673db147de08" translate="yes" xml:space="preserve">
          <source>Using Watch Mode</source>
          <target state="translated">시계 모드 사용</target>
        </trans-unit>
        <trans-unit id="9017fb4a027adbde133dec30bfbabf7edbf77ed6" translate="yes" xml:space="preserve">
          <source>Using a Configuration</source>
          <target state="translated">구성 사용</target>
        </trans-unit>
        <trans-unit id="a246793c7f0a39182d1aa8715b1258b8f768f028" translate="yes" xml:space="preserve">
          <source>Using entry name:</source>
          <target state="translated">항목 이름 사용 :</target>
        </trans-unit>
        <trans-unit id="441250bf314d4863c43a078bd39c6b6a70ad2c6a" translate="yes" xml:space="preserve">
          <source>Using function to return the filename:</source>
          <target state="translated">함수를 사용하여 파일 이름을 반환 :</target>
        </trans-unit>
        <trans-unit id="86144617cdddceef8ae1a3144422cf66197f56c7" translate="yes" xml:space="preserve">
          <source>Using function you can insert the styles into a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/ShadowRoot&quot;&gt;ShadowRoot&lt;/a&gt;, e.g</source>
          <target state="translated">함수를 사용하면 스타일을 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/ShadowRoot&quot;&gt;ShadowRoot에&lt;/a&gt; 삽입 할 수 있습니다 ( 예 :</target>
        </trans-unit>
        <trans-unit id="3d0d49e6e3cd8df3d8c1dbd9691bc35d8fa6302a" translate="yes" xml:space="preserve">
          <source>Using hashes based on each chunks' content:</source>
          <target state="translated">각 청크 내용을 기반으로 해시 사용 :</target>
        </trans-unit>
        <trans-unit id="519add25ba62dcd513c51cda4eb83bad8ae41195" translate="yes" xml:space="preserve">
          <source>Using hashes generated for extracted content:</source>
          <target state="translated">추출 된 컨텐츠에 대해 생성 된 해시 사용 :</target>
        </trans-unit>
        <trans-unit id="ec7eaf4ab9e3973e2bee8828b33d1738fc29e3c6" translate="yes" xml:space="preserve">
          <source>Using internal chunk id:</source>
          <target state="translated">내부 청크 ID 사용 :</target>
        </trans-unit>
        <trans-unit id="700c14ddf1b1e6edd056f1272f178fca24f039ef" translate="yes" xml:space="preserve">
          <source>Using it asynchronously may not have the expected effect.</source>
          <target state="translated">비동기 적으로 사용하면 예상되는 효과가 없을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="3200ec535332fa85a3bbf6cae69a6073171e40a3" translate="yes" xml:space="preserve">
          <source>Using it in an async function may not have the expected effect.</source>
          <target state="translated">비동기 함수에서 사용하면 예상 된 효과가 없을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="58ceb1cc3d8510d4682fc763f7e2829dbfbad46e" translate="yes" xml:space="preserve">
          <source>Using other Configuration Languages</source>
          <target state="translated">다른 구성 언어 사용</target>
        </trans-unit>
        <trans-unit id="59c2cac5921f99904e0b4511c5a819676e6bd84b" translate="yes" xml:space="preserve">
          <source>Using plugins in your webpack config is straightforward - however, there are many use cases that are worth further exploration. &lt;a href=&quot;plugins&quot;&gt;Learn more about them here&lt;/a&gt;.</source>
          <target state="translated">webpack 설정에서 플러그인을 사용하는 것은 간단합니다. 그러나 더 많은 조사가 필요한 유스 케이스가 많이 있습니다. &lt;a href=&quot;plugins&quot;&gt;이에 대한 자세한 내용은 여기를 참조하십시오&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="a8b8fdfd9b45b02f1be508c46368a7a4c4e384c6" translate="yes" xml:space="preserve">
          <source>Using preloaded or inlined CSS</source>
          <target state="translated">미리로드되거나 인라인 된 CSS 사용</target>
        </trans-unit>
        <trans-unit id="6518a5f2dc3744728446f85190c9fd202a9294a6" translate="yes" xml:space="preserve">
          <source>Using source maps</source>
          <target state="translated">소스 맵 사용</target>
        </trans-unit>
        <trans-unit id="467ce8c78e13c791befca2fb2c3b67684c469445" translate="yes" xml:space="preserve">
          <source>Using the unique hash generated for every build:</source>
          <target state="translated">모든 빌드에 대해 생성 된 고유 한 해시 사용</target>
        </trans-unit>
        <trans-unit id="6536132a79bf8af96ab8bfdefdbfab7d325013b8" translate="yes" xml:space="preserve">
          <source>Using these inline directives while declaring your imports allows webpack to output &amp;ldquo;Resource Hint&amp;rdquo; which tells the browser that for:</source>
          <target state="translated">가져 오기를 선언하면서 이러한 인라인 지시문을 사용하면 웹팩에서 &quot;Resource Hint&quot;를 출력하여 브라우저에 다음을 알려줍니다.</target>
        </trans-unit>
        <trans-unit id="d07483f679e606d7fb7e14d9533f6ea9b743b89b" translate="yes" xml:space="preserve">
          <source>Using this callback we can dynamically redirect requests to a new location:</source>
          <target state="translated">이 콜백을 사용하여 요청을 새로운 위치로 동적으로 리디렉션 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="1583a8e9f680bc09e6e3a1d5f218c361dd96f3b1" translate="yes" xml:space="preserve">
          <source>Using this will &lt;strong&gt;override the default array&lt;/strong&gt;, meaning that webpack will no longer try to resolve modules using the default extensions. For modules that are imported with their extension, e.g. &lt;code&gt;import SomeFile from &quot;./somefile.ext&quot;&lt;/code&gt;, to be properly resolved, a string containing &quot;*&quot; must be included in the array.</source>
          <target state="translated">이것을 사용 &lt;strong&gt;하면 기본 배열&lt;/strong&gt; 이 &lt;strong&gt;재정의됩니다&lt;/strong&gt; . 즉, 웹팩은 더 이상 기본 확장을 사용하여 모듈을 분석하려고 시도하지 않습니다. 확장자가있는 모듈 (예 : &lt;code&gt;import SomeFile from &quot;./somefile.ext&quot;&lt;/code&gt; )을 올바르게 해석하려면 &quot;*&quot;가 포함 된 문자열이 배열에 포함되어야합니다.</target>
        </trans-unit>
        <trans-unit id="5d3bed423980b935928474859e7c216545e36176" translate="yes" xml:space="preserve">
          <source>Using webpack's resolver, you can import any file type. You just need a loader that exports valid Less code. Often, you will also want to set the &lt;code&gt;issuer&lt;/code&gt; condition to ensure that this rule is only applied on imports originating from Less files:</source>
          <target state="translated">webpack의 리졸버를 사용하여 모든 파일 유형을 가져올 수 있습니다. 유효한 Less 코드를 내보내는 로더 만 있으면됩니다. 종종 이 규칙이 적은 파일에서 발생하는 가져 오기에만 적용되도록 &lt;code&gt;issuer&lt;/code&gt; 조건 을 설정하고자 할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="c7564130d0af85566bd3d5159841f2a0c0d22b57" translate="yes" xml:space="preserve">
          <source>Using webpack-dev-middleware</source>
          <target state="translated">webpack-dev-middleware 사용</target>
        </trans-unit>
        <trans-unit id="929b482a17818f7e179581abb73aad4f5bba1a17" translate="yes" xml:space="preserve">
          <source>Using webpack-dev-server</source>
          <target state="translated">webpack-dev-server 사용</target>
        </trans-unit>
        <trans-unit id="56404f43d6b2ed55415737b5df747c000d609a1b" translate="yes" xml:space="preserve">
          <source>Using webpackPreload incorrectly can actually hurt performance, so be careful when using it.</source>
          <target state="translated">webpackPreload를 잘못 사용하면 실제로 성능이 저하 될 수 있으므로 사용시주의하십시오.</target>
        </trans-unit>
        <trans-unit id="1727983f3b0fbe806fa9f0e578aa1c2905c45395" translate="yes" xml:space="preserve">
          <source>Usually your projects will need to extend this functionality, for this you can create a &lt;code&gt;webpack.config.js&lt;/code&gt; file in the root folder and webpack will automatically use it.</source>
          <target state="translated">일반적으로 프로젝트는이 기능을 확장해야합니다.이를 위해 루트 폴더에 &lt;code&gt;webpack.config.js&lt;/code&gt; 파일을 만들면 webpack 에서 자동으로 사용합니다.</target>
        </trans-unit>
        <trans-unit id="130ffa8a755784a8fff6c2f1afcbd6b0f4165b82" translate="yes" xml:space="preserve">
          <source>Usually, it's recommended to extract the style sheets into a dedicated file in production using the &lt;a href=&quot;../plugins/mini-css-extract-plugin&quot;&gt;MiniCssExtractPlugin&lt;/a&gt;. This way your styles are not dependent on JavaScript.</source>
          <target state="translated">일반적으로 &lt;a href=&quot;../plugins/mini-css-extract-plugin&quot;&gt;MiniCssExtractPlugin을&lt;/a&gt; 사용하여 프로덕션 환경에서 스타일 시트를 전용 파일로 추출하는 것이 좋습니다 . 이렇게하면 스타일이 JavaScript에 의존하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="230c0f6708f899e4998611800c671e1627e66bfb" translate="yes" xml:space="preserve">
          <source>Usually, it's recommended to extract the style sheets into a dedicated file in production using the &lt;a href=&quot;../plugins/mini-css-extract-plugin&quot;&gt;MiniCssExtractPlugin&lt;/a&gt;. This way your styles are not dependent on JavaScript:</source>
          <target state="translated">일반적으로 &lt;a href=&quot;../plugins/mini-css-extract-plugin&quot;&gt;MiniCssExtractPlugin을&lt;/a&gt; 사용하여 프로덕션 환경에서 스타일 시트를 전용 파일로 추출하는 것이 좋습니다 . 이렇게하면 스타일이 JavaScript에 의존하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="1b0e3aa76a2d97a44a5da8cd5260f85eb167e2d5" translate="yes" xml:space="preserve">
          <source>Variable: as a global variable made available by a &lt;code&gt;script&lt;/code&gt; tag (&lt;code&gt;libraryTarget:'var'&lt;/code&gt;).</source>
          <target state="translated">변수 : &lt;code&gt;script&lt;/code&gt; 태그 ( &lt;code&gt;libraryTarget:'var'&lt;/code&gt; )에 의해 사용 가능한 전역 변수 입니다.</target>
        </trans-unit>
        <trans-unit id="c1f31ae1f6a8b752e2c38c54066881ab58d1532d" translate="yes" xml:space="preserve">
          <source>Variables coming from &lt;code&gt;process.env&lt;/code&gt; are always strings.</source>
          <target state="translated">&lt;code&gt;process.env&lt;/code&gt; 에서 오는 변수 는 항상 문자열입니다.</target>
        </trans-unit>
        <trans-unit id="eab065a9a4d4690f9b81041691e90f286b2d778b" translate="yes" xml:space="preserve">
          <source>Verify that webpack is not being notified of changes by running webpack with the --progress flag. If progress shows on save but no files are outputted, it is likely a configuration issue, not a file watching issue.</source>
          <target state="translated">--progress 플래그와 함께 webpack을 실행하여 webpack에 변경 사항을 알리지 않는지 확인하십시오. 저장시 진행률이 표시되지만 파일이 출력되지 않으면 파일 감시 문제가 아닌 구성 문제 일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2f649eb36cd354b29c703f5db06d75d8bb5d8758" translate="yes" xml:space="preserve">
          <source>Verify that you have enough available watchers in your system. If this value is too low, the file watcher in Webpack won't recognize the changes:</source>
          <target state="translated">시스템에 사용 가능한 감시자가 충분한 지 확인하십시오. 이 값이 너무 낮 으면 Webpack의 파일 감시자가 변경 사항을 인식하지 못합니다.</target>
        </trans-unit>
        <trans-unit id="a9ad94597042a491f4c55e15e6796d1220ef197e" translate="yes" xml:space="preserve">
          <source>Version 2 of webpack supports ES6 module syntax natively, meaning you can use &lt;code&gt;import&lt;/code&gt; and &lt;code&gt;export&lt;/code&gt; without a tool like babel to handle this for you. Keep in mind that you will still probably need babel for other ES6+ features. The following methods are supported by webpack:</source>
          <target state="translated">webpack 버전 2는 기본적으로 ES6 모듈 구문을 지원하므로 babel과 같은 도구없이 &lt;code&gt;import&lt;/code&gt; 및 &lt;code&gt;export&lt;/code&gt; 를 사용하여이를 처리 할 수 ​​있습니다. 다른 ES6 + 기능을 사용하려면 여전히 babel이 필요할 것입니다. 웹팩에서 지원하는 방법은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="b716503145807543ea3a2f18e364920799166f3a" translate="yes" xml:space="preserve">
          <source>Very detailed debugging info</source>
          <target state="translated">매우 상세한 디버깅 정보</target>
        </trans-unit>
        <trans-unit id="24756aad73cd051a11a3ab3c84b08e6eccd66d67" translate="yes" xml:space="preserve">
          <source>Via the Node.js API</source>
          <target state="translated">Node.js API를 통해</target>
        </trans-unit>
        <trans-unit id="a78ad277616170813560c5fab7aabae8ac9cfb23" translate="yes" xml:space="preserve">
          <source>Vim</source>
          <target state="translated">Vim</target>
        </trans-unit>
        <trans-unit id="5761ff1a7f5b6160ce8e6d3a6a69b9769b16ee3a" translate="yes" xml:space="preserve">
          <source>Vue: &lt;a href=&quot;https://alexjoverm.github.io/2017/07/16/Lazy-load-in-Vue-using-Webpack-s-code-splitting/&quot;&gt;Lazy Load in Vue using Webpack's code splitting&lt;/a&gt;</source>
          <target state="translated">Vue : &lt;a href=&quot;https://alexjoverm.github.io/2017/07/16/Lazy-load-in-Vue-using-Webpack-s-code-splitting/&quot;&gt;Webpack의 코드 분할을 사용하여 Vue의 지연로드&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="db3e8c2c2fbe1c9fcd99b8675926cd59a846aa38" translate="yes" xml:space="preserve">
          <source>Want to rapidly generate webpack configuration file for your project requirements with few clicks away.</source>
          <target state="translated">몇 번의 클릭만으로 프로젝트 요구 사항에 맞는 웹팩 구성 파일을 신속하게 생성하려고합니다.</target>
        </trans-unit>
        <trans-unit id="3f5d8257134cdb4ea1e1eef0dd093276a302a5ad" translate="yes" xml:space="preserve">
          <source>Warn for dynamic dependencies: &lt;code&gt;wrappedContextCritical: true&lt;/code&gt;.</source>
          <target state="translated">동적 종속성을 경고 : &lt;code&gt;wrappedContextCritical: true&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="201d07914ddb690a7ce7fc96defe98625d72e806" translate="yes" xml:space="preserve">
          <source>Warns to console about attributes from inside the &lt;code&gt;&amp;lt;svg /&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&amp;lt;svg /&amp;gt;&lt;/code&gt; 내부의 속성에 대해 콘솔에 경고합니다 .</target>
        </trans-unit>
        <trans-unit id="1e2aae0cdb6f3a79d62e669c768545f8953beef6" translate="yes" xml:space="preserve">
          <source>Watch Options</source>
          <target state="translated">시계 옵션</target>
        </trans-unit>
        <trans-unit id="106bff2cd8202eecc0e264527e1aa359ef59b79d" translate="yes" xml:space="preserve">
          <source>Watch and WatchOptions</source>
          <target state="translated">시계 및 시계 옵션</target>
        </trans-unit>
        <trans-unit id="2bc4d4d7a4c4d5f9a1769fc308fa26c2a0867f00" translate="yes" xml:space="preserve">
          <source>Watch compilation has been invalidated.</source>
          <target state="translated">시계 편집이 무효화되었습니다.</target>
        </trans-unit>
        <trans-unit id="b437f78f9d520f5fcbaf0f0382cb781be53b36aa" translate="yes" xml:space="preserve">
          <source>Watch mode has stopped.</source>
          <target state="translated">시계 모드가 중지되었습니다.</target>
        </trans-unit>
        <trans-unit id="1cd42ab7e86a7c69fdc818850cdaebf6ab4df744" translate="yes" xml:space="preserve">
          <source>Watch the filesystem for changes</source>
          <target state="translated">파일 시스템의 변경 사항 확인</target>
        </trans-unit>
        <trans-unit id="95597606870fb7c27f696ca54f1d8fcb4ed539c0" translate="yes" xml:space="preserve">
          <source>WatchIgnorePlugin</source>
          <target state="translated">WatchIgnorePlugin</target>
        </trans-unit>
        <trans-unit id="96d9e027ee25023055aac45ad3d6c069c69e6c19" translate="yes" xml:space="preserve">
          <source>Watching</source>
          <target state="translated">Watching</target>
        </trans-unit>
        <trans-unit id="6d03d61c1bf166452be4ae04b24c13ac9975c1c5" translate="yes" xml:space="preserve">
          <source>We Don't Work Offline Now</source>
          <target state="translated">우리는 지금 오프라인으로 일하지 않습니다</target>
        </trans-unit>
        <trans-unit id="f430b691523ff1d9375dbaa59f361157ef2f8356" translate="yes" xml:space="preserve">
          <source>We also need to adjust our &lt;code&gt;package.json&lt;/code&gt; file in order to make sure we mark our package as &lt;code&gt;private&lt;/code&gt;, as well as removing the &lt;code&gt;main&lt;/code&gt; entry. This is to prevent an accidental publish of your code.</source>
          <target state="translated">패키지를 &lt;code&gt;private&lt;/code&gt; 으로 표시하고 &lt;code&gt;main&lt;/code&gt; 항목 을 제거하려면 &lt;code&gt;package.json&lt;/code&gt; 파일 도 조정해야합니다 . 실수로 코드를 게시하는 것을 방지하기위한 것입니다.</target>
        </trans-unit>
        <trans-unit id="36b83254e75e5a19d5c4cfaa006d12f741f4d823" translate="yes" xml:space="preserve">
          <source>We can also use the &lt;code&gt;ProvidePlugin&lt;/code&gt; to expose a single export of a module by configuring it with an &quot;array path&quot; (e.g. &lt;code&gt;[module, child, ...children?]&lt;/code&gt;). So let's imagine we only wanted to provide the &lt;code&gt;join&lt;/code&gt; method from &lt;code&gt;lodash&lt;/code&gt; wherever it's invoked:</source>
          <target state="translated">또한 &lt;code&gt;ProvidePlugin&lt;/code&gt; 을 사용하여 &quot;배열 경로&quot;(예 : &lt;code&gt;[module, child, ...children?]&lt;/code&gt; ) 로 구성하여 모듈의 단일 내보내기를 노출 할 수 있습니다 . 따라서 &lt;code&gt;lodash&lt;/code&gt; 가 호출 된 곳마다 &lt;code&gt;join&lt;/code&gt; 메소드 를 제공하려고한다고 상상해보십시오 .</target>
        </trans-unit>
        <trans-unit id="db530b33066f02b7472ab75814989f01e865334c" translate="yes" xml:space="preserve">
          <source>We can now see that our &lt;code&gt;main&lt;/code&gt; bundle does not contain &lt;code&gt;vendor&lt;/code&gt; code from &lt;code&gt;node_modules&lt;/code&gt; directory and is down in size to &lt;code&gt;240 bytes&lt;/code&gt;!</source>
          <target state="translated">우리는 지금 우리의 것을 볼 수 있습니다 &lt;code&gt;main&lt;/code&gt; 번들이 포함되지 않은 &lt;code&gt;vendor&lt;/code&gt; 에서 코드를 &lt;code&gt;node_modules&lt;/code&gt; 의 디렉토리에 크기 다운 &lt;code&gt;240 bytes&lt;/code&gt; !</target>
        </trans-unit>
        <trans-unit id="fe8c7c24676ac8c961e015d8356f493d6e9b7176" translate="yes" xml:space="preserve">
          <source>We can see that both builds yielded &lt;code&gt;55e79e5927a639d21a1b&lt;/code&gt; in the &lt;code&gt;vendor&lt;/code&gt; bundle's filename.</source>
          <target state="translated">&lt;code&gt;vendor&lt;/code&gt; 번들의 파일 이름 에 두 빌드 모두 &lt;code&gt;55e79e5927a639d21a1b&lt;/code&gt; 가 생성 된 것을 볼 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="751dd31f009f8d6497b7e09f7c2379b83804fcb7" translate="yes" xml:space="preserve">
          <source>We can see that the error also contains a reference to the file (&lt;code&gt;print.js&lt;/code&gt;) and line number (2) where the error occurred. This is great because now we know exactly where to look in order to fix the issue.</source>
          <target state="translated">오류에 오류가 발생한 파일 ( &lt;code&gt;print.js&lt;/code&gt; )과 줄 번호 (2)에 대한 참조도 포함되어 있음을 알 수 있습니다 . 이제이 문제를 해결하기 위해 어디를 찾아야하는지 정확히 알기 때문에 좋습니다.</target>
        </trans-unit>
        <trans-unit id="ca2f28e217702f1ad5e4a98510fd7c1dab1700ed" translate="yes" xml:space="preserve">
          <source>We can see that webpack generates our &lt;code&gt;print.bundle.js&lt;/code&gt; and &lt;code&gt;app.bundle.js&lt;/code&gt; files, which we also specified in our &lt;code&gt;index.html&lt;/code&gt; file. if you open &lt;code&gt;index.html&lt;/code&gt; in your browser, you can see what happens when you click the button.</source>
          <target state="translated">webpack은 &lt;code&gt;print.bundle.js&lt;/code&gt; 및 &lt;code&gt;app.bundle.js&lt;/code&gt; 파일을 생성 하며 &lt;code&gt;index.html&lt;/code&gt; 파일 에도 지정되어 있음을 알 수 있습니다 . 브라우저에서 &lt;code&gt;index.html&lt;/code&gt; 을 열면 버튼을 클릭하면 어떻게되는지 확인할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="1a91536621f215bce27491619c8b48f6ef07ef93" translate="yes" xml:space="preserve">
          <source>We can start with this basic webpack configuration:</source>
          <target state="translated">이 기본 웹팩 구성으로 시작할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="177ca5503ba9b50d48c9680cb6075d126fe313df" translate="yes" xml:space="preserve">
          <source>We encourage you to have source maps enabled in production, as they are useful for debugging as well as running benchmark tests. That said, you should choose one with a fairly quick build speed that's recommended for production use (see &lt;a href=&quot;../configuration/devtool&quot;&gt;&lt;code&gt;devtool&lt;/code&gt;&lt;/a&gt;). For this guide, we'll use the &lt;code&gt;source-map&lt;/code&gt; option in &lt;em&gt;production&lt;/em&gt; as opposed to the &lt;code&gt;inline-source-map&lt;/code&gt; we used in &lt;em&gt;development&lt;/em&gt;:</source>
          <target state="translated">벤치 마크 테스트를 실행하고 디버깅하는 데 유용하므로 프로덕션에서 소스 맵을 활성화하는 것이 좋습니다. 즉, 프로덕션 용도로 권장되는 빌드 속도가 상당히 빠른 것을 선택해야합니다 ( &lt;a href=&quot;../configuration/devtool&quot;&gt; &lt;code&gt;devtool&lt;/code&gt; &lt;/a&gt; 참조 ). 이 가이드에서는 &lt;em&gt;개발에&lt;/em&gt; 사용한 &lt;code&gt;inline-source-map&lt;/code&gt; 과 달리 &lt;em&gt;프로덕션&lt;/em&gt; 에서 &lt;code&gt;source-map&lt;/code&gt; 옵션을 사용합니다 .&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="282749558ba5da53eeeb6f04c218363bf29d42ee" translate="yes" xml:space="preserve">
          <source>We made the Vagrant box accessible from a static IP, and then made webpack-dev-server publicly accessible so it is reachable from a browser. We then tackled a common problem that VirtualBox doesn't send out filesystem events, causing the server to not reload on file changes.</source>
          <target state="translated">우리는 고정 IP에서 Vagrant 상자에 액세스 할 수 있도록 한 다음 브라우저에서 접근 할 수 있도록 webpack-dev-server를 공개적으로 액세스 할 수있게했습니다. 그런 다음 VirtualBox가 파일 시스템 이벤트를 보내지 않아 서버가 파일 변경 사항을 다시로드하지 못하는 일반적인 문제를 해결했습니다.</target>
        </trans-unit>
        <trans-unit id="e0be727f5fc53615fcc78dcf536f6d74c3da629c" translate="yes" xml:space="preserve">
          <source>We use &lt;code&gt;ts-loader&lt;/code&gt; in this guide as it makes enabling additional webpack features, such as importing other web assets, a bit easier.</source>
          <target state="translated">이 안내서 에서는 &lt;code&gt;ts-loader&lt;/code&gt; 를 사용 하여 다른 웹 자산 가져 오기와 같은 추가 웹팩 기능을 좀 더 쉽게 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="835362acb732e8765a43852621862db6316a6aa4" translate="yes" xml:space="preserve">
          <source>We won't go through a full example of how to use this plugin within your projects, but you can read up on &lt;a href=&quot;../concepts/manifest&quot;&gt;the concept page&lt;/a&gt; and the &lt;a href=&quot;caching&quot;&gt;caching guide&lt;/a&gt; to find out how this ties into long term caching.</source>
          <target state="translated">프로젝트 내에서이 플러그인을 사용하는 방법에 대한 전체 예는 다루지 않지만 &lt;a href=&quot;../concepts/manifest&quot;&gt;개념 페이지&lt;/a&gt; 와 &lt;a href=&quot;caching&quot;&gt;캐싱 안내서&lt;/a&gt; 를 읽고 이것이 장기 캐싱에 어떻게 연결되는지 알아볼 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="1ecd172656b0bb7ce4a53fbe55278abe78cbe5dc" translate="yes" xml:space="preserve">
          <source>WebWorkerTemplatePlugin</source>
          <target state="translated">WebWorkerTemplatePlugin</target>
        </trans-unit>
        <trans-unit id="642803d03826095e048310e6f6fdb2336f081224" translate="yes" xml:space="preserve">
          <source>Webpack</source>
          <target state="translated">Webpack</target>
        </trans-unit>
        <trans-unit id="82b6b2e18d79f25873504926b5f944fcf9abaaba" translate="yes" xml:space="preserve">
          <source>Webpack is capable of adding &lt;code&gt;nonce&lt;/code&gt; to all scripts that it loads. To activate the feature set a &lt;code&gt;__webpack_nonce__&lt;/code&gt; variable needs to be included in your entry script. A unique hash based nonce should be generated and provided for each unique page view this is why &lt;code&gt;__webpack_nonce__&lt;/code&gt; is specified in the entry file and not in the configuration. Please note that &lt;code&gt;nonce&lt;/code&gt; should always be a base64-encoded string.</source>
          <target state="translated">Webpack은 로드하는 모든 스크립트에 &lt;code&gt;nonce&lt;/code&gt; 를 추가 할 수 있습니다. 기능 세트를 활성화하려면 입력 스크립트에 &lt;code&gt;__webpack_nonce__&lt;/code&gt; 변수가 포함되어야합니다. 고유 한 해시 기반 nonce가 생성되어 각 고유 페이지보기에 제공되어야하므로 이것이 구성 파일이 아닌 항목 파일에 &lt;code&gt;__webpack_nonce__&lt;/code&gt; 가 지정된 이유 입니다. 있습니다 &lt;code&gt;nonce&lt;/code&gt; 항상 base64로 인코딩 된 문자열이어야합니다.</target>
        </trans-unit>
        <trans-unit id="158e95469747971b9e26b9ccc964ebc1f958f27d" translate="yes" xml:space="preserve">
          <source>Webpack is used to compile JavaScript modules. Once &lt;a href=&quot;installation&quot;&gt;installed&lt;/a&gt;, you can interface with webpack either from its &lt;a href=&quot;../api/cli&quot;&gt;CLI&lt;/a&gt; or &lt;a href=&quot;../api/node&quot;&gt;API&lt;/a&gt;. If you're still new to webpack, please read through the &lt;a href=&quot;https://webpack.js.org/concepts&quot;&gt;core concepts&lt;/a&gt; and &lt;a href=&quot;https://webpack.js.org/comparison&quot;&gt;this comparison&lt;/a&gt; to learn why you might use it over the other tools that are out in the community.</source>
          <target state="translated">Webpack은 JavaScript 모듈을 컴파일하는 데 사용됩니다. 일단 &lt;a href=&quot;installation&quot;&gt;설치&lt;/a&gt; 되면 &lt;a href=&quot;../api/cli&quot;&gt;CLI&lt;/a&gt; 또는 &lt;a href=&quot;../api/node&quot;&gt;API&lt;/a&gt; 에서 웹팩과 인터페이스 할 수 있습니다 . 당신은 여전히 웹팩를 처음 사용하는 경우는 읽어주십시오 &lt;a href=&quot;https://webpack.js.org/concepts&quot;&gt;핵심 개념&lt;/a&gt; 과 &lt;a href=&quot;https://webpack.js.org/comparison&quot;&gt;이 비교&lt;/a&gt; 는 지역 사회에서있는 다른 도구에 그것을 사용하는 이유를 알아.</target>
        </trans-unit>
        <trans-unit id="c0c5210e932b790099cb080bd655498066252fad" translate="yes" xml:space="preserve">
          <source>Webpack then tries to load the &lt;code&gt;babel&lt;/code&gt; package instead of the &lt;code&gt;babel-loader&lt;/code&gt;.</source>
          <target state="translated">그런 다음 Webpack 은 &lt;code&gt;babel-loader&lt;/code&gt; 대신 &lt;code&gt;babel&lt;/code&gt; 패키지 를로드하려고 시도합니다 .</target>
        </trans-unit>
        <trans-unit id="f93227f09a36564ddcbcc64edc8672d9a999d0d9" translate="yes" xml:space="preserve">
          <source>Webpack's Devtool Source Map</source>
          <target state="translated">Webpack의 Devtool 소스 맵</target>
        </trans-unit>
        <trans-unit id="a57d36dd7547d0d01d63f5a0dca33743ac6b0190" translate="yes" xml:space="preserve">
          <source>What does that mean?</source>
          <target state="translated">그게 무슨 뜻이야?</target>
        </trans-unit>
        <trans-unit id="e23722e1d334532d959d84961060e3ab54e8b4a7" translate="yes" xml:space="preserve">
          <source>What good would these statistics be without some description of the compiled application's actual modules? Each module in the dependency graph is represented by the following structure:</source>
          <target state="translated">컴파일 된 응용 프로그램의 실제 모듈에 대한 설명이 없으면 이러한 통계가 어떻게 좋을까요? 종속성 그래프의 각 모듈은 다음 구조로 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="3c405e511522608969dda969a09ff67810928f7b" translate="yes" xml:space="preserve">
          <source>What is a webpack Module</source>
          <target state="translated">웹팩 모듈이란?</target>
        </trans-unit>
        <trans-unit id="a15063f1f366503c5eca45c22ee9ce5c854143a3" translate="yes" xml:space="preserve">
          <source>What we've essentially done here is tell webpack...</source>
          <target state="translated">우리가 여기서 본질적으로 한 일은 webpack에게 알리는 것입니다 ...</target>
        </trans-unit>
        <trans-unit id="3f6cf47fe8f7eb3ed631b1c9020062f7333087c0" translate="yes" xml:space="preserve">
          <source>What's the reasoning behind this? &lt;code&gt;react&lt;/code&gt; probably won't change as often as your application code. By moving it into a separate chunk this chunk can be cached separately from your app code (assuming you are using chunkhash, records, Cache-Control or other long term cache approach).</source>
          <target state="translated">이 뒤에 추론은 무엇입니까? &lt;code&gt;react&lt;/code&gt; 아마도 응용 프로그램 코드만큼 자주 변경되지 않을 것입니다. 이 청크를 별도의 청크로 이동하면 청크 해시, 레코드, Cache-Control 또는 기타 장기 캐시 방식을 사용한다고 가정 할 때이 청크를 앱 코드와 별도로 캐시 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="097e7a8a57c079b0550af45266e062d2a4b75f4b" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;lazy&lt;/code&gt; is enabled, the dev-server will only compile the bundle when it gets requested. This means that webpack will not watch any file changes. We call this &lt;strong&gt;lazy mode&lt;/strong&gt;.</source>
          <target state="translated">때 &lt;code&gt;lazy&lt;/code&gt; 활성화가 요구됩니다 때 DEV-서버는 번들을 컴파일합니다. 이는 웹팩이 파일 변경을 감시하지 않음을 의미합니다. 우리는 이것을 &lt;strong&gt;게으른 모드&lt;/strong&gt; 라고 부릅니다 .</target>
        </trans-unit>
        <trans-unit id="a918636379f114af885a0d73833efa42c23d80cd" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;open&lt;/code&gt; is enabled, the dev server will open the browser.</source>
          <target state="translated">때 &lt;code&gt;open&lt;/code&gt; 활성화, dev에 서버가 브라우저를 엽니 다.</target>
        </trans-unit>
        <trans-unit id="936d0ae63cdd310640f2be4edcef55d8a668d108" translate="yes" xml:space="preserve">
          <source>When a page which uses the &lt;code&gt;ChartComponent&lt;/code&gt; is requested, the charting-library-chunk is also requested via &lt;code&gt;&amp;lt;link rel=&quot;preload&quot;&amp;gt;&lt;/code&gt;. Assuming the page-chunk is smaller and finishes faster, the page will be displayed with a &lt;code&gt;LoadingIndicator&lt;/code&gt;, until the already requested &lt;code&gt;charting-library-chunk&lt;/code&gt; finishes. This will give a little load time boost since it only needs one round-trip instead of two. Especially in high-latency environments.</source>
          <target state="translated">&lt;code&gt;ChartComponent&lt;/code&gt; 를 사용하는 페이지 가 요청되면 &lt;code&gt;&amp;lt;link rel=&quot;preload&quot;&amp;gt;&lt;/code&gt; 를 통해 charting-library-chunk도 요청됩니다 . 페이지 청크가 더 작고 더 빨리 완료된다고 가정하면, 이미 요청 된 &lt;code&gt;charting-library-chunk&lt;/code&gt; 가 완료 될 때까지 페이지에 &lt;code&gt;LoadingIndicator&lt;/code&gt; 가 표시됩니다 . 두 번이 아닌 한 번만 왕복하면되므로로드 시간이 약간 증가합니다. 특히 대기 시간이 긴 환경에서.</target>
        </trans-unit>
        <trans-unit id="4254af549da477b1173d6e70e64d52344b144aaf" translate="yes" xml:space="preserve">
          <source>When assigning equal names to different split chunks, all vendor modules are placed into a single shared chunk, though it's not recommend since it can result in more code downloaded.</source>
          <target state="translated">다른 분할 청크에 동일한 이름을 할당하면 모든 공급 업체 모듈이 단일 공유 청크에 배치되지만 더 많은 코드를 다운로드 할 수 있으므로 권장하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="c2a1936d8933244dd718faf821e675520875717c" translate="yes" xml:space="preserve">
          <source>When combining with the &lt;a href=&quot;output#output-library&quot;&gt;&lt;code&gt;output.library&lt;/code&gt;&lt;/a&gt; option: If an array is passed only the last item is exported.</source>
          <target state="translated">&lt;a href=&quot;output#output-library&quot;&gt; &lt;code&gt;output.library&lt;/code&gt; &lt;/a&gt; 옵션 과 결합 할 때 : 배열이 전달되면 마지막 항목 만 내 보냅니다.</target>
        </trans-unit>
        <trans-unit id="3546bb0ca2be567641a97a2d03578b6e40ea329f" translate="yes" xml:space="preserve">
          <source>When compiling source code with webpack, users can generate a JSON file containing statistics about modules. These statistics can be used to analyze an application's dependency graph as well as to optimize compilation speed. The file is typically generated with the following CLI command:</source>
          <target state="translated">웹팩으로 소스 코드를 컴파일 할 때 사용자는 모듈에 대한 통계가 포함 된 JSON 파일을 생성 할 수 있습니다. 이 통계는 응용 프로그램의 종속성 그래프를 분석하고 컴파일 속도를 최적화하는 데 사용할 수 있습니다. 파일은 일반적으로 다음 CLI 명령으로 생성됩니다.</target>
        </trans-unit>
        <trans-unit id="713580f1a6d5ae54743a4b9083ebeacf1983bef9" translate="yes" xml:space="preserve">
          <source>When declaring a local classname you can compose a local class from another local classname.</source>
          <target state="translated">로컬 클래스 이름을 선언 할 때 다른 로컬 클래스 이름에서 로컬 클래스를 작성할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="7a64d141b958f5e87111733dd5f7d8d676c38709" translate="yes" xml:space="preserve">
          <source>When defining values for &lt;code&gt;process&lt;/code&gt; prefer &lt;code&gt;'process.env.NODE_ENV': JSON.stringify('production')&lt;/code&gt; over &lt;code&gt;process: { env: { NODE_ENV: JSON.stringify('production') } }&lt;/code&gt;. Using the latter will overwrite the &lt;code&gt;process&lt;/code&gt; object which can break compatibility with some modules that expect other values on the process object to be defined.</source>
          <target state="translated">에 대한 값을 정의 할 때 &lt;code&gt;process&lt;/code&gt; 선호 &lt;code&gt;'process.env.NODE_ENV': JSON.stringify('production')&lt;/code&gt; 통해 &lt;code&gt;process: { env: { NODE_ENV: JSON.stringify('production') } }&lt;/code&gt; . 후자를 사용하면 &lt;code&gt;process&lt;/code&gt; 개체를 덮어 쓰므로 프로세스 개체의 다른 값이 정의 될 것으로 예상되는 일부 모듈과의 호환성이 손상 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="250af6c15c6b77347d259b8cfa2de3ce234b9bd0" translate="yes" xml:space="preserve">
          <source>When developing a plugin for webpack, you might want to know where each hook is called. To learn this, search for &lt;code&gt;hooks.&amp;lt;hook name&amp;gt;.call&lt;/code&gt; across the webpack source</source>
          <target state="translated">웹 팩용 플러그인을 개발할 때 각 후크가 호출되는 위치를 알고 싶을 수 있습니다. 이를 배우려면 웹팩 소스 에서 &lt;code&gt;hooks.&amp;lt;hook name&amp;gt;.call&lt;/code&gt; .call을 검색하십시오 .</target>
        </trans-unit>
        <trans-unit id="eac506339aaf8ca2ceab108281956c6327d3d307" translate="yes" xml:space="preserve">
          <source>When enabled, symlinked resources are resolved to their &lt;em&gt;real&lt;/em&gt; path, not their symlinked location. Note that this may cause module resolution to fail when using tools that symlink packages (like &lt;code&gt;npm link&lt;/code&gt;).</source>
          <target state="translated">활성화되면 심볼릭 링크 된 리소스는 심볼릭 링크 된 위치가 아닌 &lt;em&gt;실제&lt;/em&gt; 경로 로 확인됩니다 . 패키지를 심볼릭 링크하는 도구 (예 : &lt;code&gt;npm link&lt;/code&gt; )를 사용하면 모듈 확인에 실패 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="de4f213b38880204a9cc2ff95ea9d365e1a4a280" translate="yes" xml:space="preserve">
          <source>When executing &lt;code&gt;NODE_ENV=production webpack&lt;/code&gt; in the terminal to build, &lt;code&gt;entry.js&lt;/code&gt; becomes this:</source>
          <target state="translated">빌드 할 터미널에서 &lt;code&gt;NODE_ENV=production webpack&lt;/code&gt; 을 실행할 때 &lt;code&gt;entry.js&lt;/code&gt; 는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="7a0a8c8cee49129be667bdabcc325bc5a1ea3345" translate="yes" xml:space="preserve">
          <source>When importing from an npm package, e.g. &lt;code&gt;import * as D3 from &quot;d3&quot;&lt;/code&gt;, this option will determine which fields in its &lt;code&gt;package.json&lt;/code&gt; are checked. The default values will vary based upon the &lt;a href=&quot;../concepts/targets&quot;&gt;&lt;code&gt;target&lt;/code&gt;&lt;/a&gt; specified in your webpack configuration.</source>
          <target state="translated">npm 패키지에서 가져 오는 경우 (예 : &lt;code&gt;import * as D3 from &quot;d3&quot;&lt;/code&gt; )이 옵션은 &lt;code&gt;package.json&lt;/code&gt; 의 어떤 필드를 검사 할지 결정합니다 . 기본값은 웹팩 구성에 지정된 &lt;a href=&quot;../concepts/targets&quot;&gt; &lt;code&gt;target&lt;/code&gt; &lt;/a&gt; 따라 다릅니다 .</target>
        </trans-unit>
        <trans-unit id="aac832abcc21fcde37f9dc201dae0be38b70997a" translate="yes" xml:space="preserve">
          <source>When installing a package that will be bundled into your production bundle, you should use &lt;code&gt;npm install --save&lt;/code&gt;. If you're installing a package for development purposes (e.g. a linter, testing libraries, etc.) then you should use &lt;code&gt;npm install --save-dev&lt;/code&gt;. More information can be found in the &lt;a href=&quot;https://docs.npmjs.com/cli/install&quot;&gt;npm documentation&lt;/a&gt;.</source>
          <target state="translated">프로덕션 번들에 번들로 제공 될 패키지를 &lt;code&gt;npm install --save&lt;/code&gt; 때는 npm install --save를 사용해야 합니다. 개발 목적으로 패키지 (예 : 린터, 테스트 라이브러리 등)를 &lt;code&gt;npm install --save-dev&lt;/code&gt; 하는 경우 npm install --save-dev 를 사용해야합니다 . 자세한 내용은 &lt;a href=&quot;https://docs.npmjs.com/cli/install&quot;&gt;npm 설명서를 참조하십시오&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="ebd7d0c9e10b1536745313e0c7501b34e45c3140" translate="yes" xml:space="preserve">
          <source>When installing third party libraries from npm, it is important to remember to install the typing definition for that library. These definitions can be found at &lt;a href=&quot;http://microsoft.github.io/TypeSearch/&quot;&gt;TypeSearch&lt;/a&gt;.</source>
          <target state="translated">npm에서 타사 라이브러리를 설치할 때는 해당 라이브러리에 대한 타이핑 정의를 설치해야합니다. 이러한 정의는 &lt;a href=&quot;http://microsoft.github.io/TypeSearch/&quot;&gt;TypeSearch&lt;/a&gt; 에서 찾을 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="58456700867017ff4232dd40aae854d5f72d63f9" translate="yes" xml:space="preserve">
          <source>When processing modules with webpack, it is important to understand the different module syntaxes -- specifically the &lt;a href=&quot;module-methods&quot;&gt;methods&lt;/a&gt; and &lt;a href=&quot;module-variables&quot;&gt;variables&lt;/a&gt; -- that are supported.</source>
          <target state="translated">웹팩으로 모듈을 처리 할 때 지원되는 다양한 모듈 구문 (특히 &lt;a href=&quot;module-methods&quot;&gt;메서드&lt;/a&gt; 및 &lt;a href=&quot;module-variables&quot;&gt;변수)&lt;/a&gt; 을 이해해야합니다 .</target>
        </trans-unit>
        <trans-unit id="60f74f8cf364bb2c3b358ef9a5c871a34dd697e0" translate="yes" xml:space="preserve">
          <source>When set to &lt;code&gt;false&lt;/code&gt;, the module is not removed from cache, which results in the exception getting thrown only on the first &lt;code&gt;require&lt;/code&gt; call (making it incompatible with node.js).</source>
          <target state="translated">&lt;code&gt;false&lt;/code&gt; 로 설정 하면 모듈이 캐시에서 제거되지 않으므로 첫 번째 &lt;code&gt;require&lt;/code&gt; 호출 (예 : node.js와 호환되지 않음) 에서만 예외가 발생합니다 .</target>
        </trans-unit>
        <trans-unit id="f25a86f18aa4d9b660bcbd13b61019472052de54" translate="yes" xml:space="preserve">
          <source>When set to &lt;code&gt;true&lt;/code&gt; tells webpack to reduce the size of WASM by changing imports to shorter strings. It mangles module and export names.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 로 설정하면 가져 오기를 더 짧은 문자열로 변경하여 웹팩에 WASM 크기를 줄 이도록 지시합니다. 모듈과 내보내기 이름을 엉망으로 만듭니다.</target>
        </trans-unit>
        <trans-unit id="3e7756a0e6c1383ff6ce25f15f9104db9b4b9ff2" translate="yes" xml:space="preserve">
          <source>When set to true this option bypasses host checking. THIS IS NOT RECOMMENDED as apps that do not check the host are vulnerable to DNS rebinding attacks.</source>
          <target state="translated">true로 설정하면이 옵션은 호스트 검사를 무시합니다. 호스트를 확인하지 않는 앱은 DNS 리 바인딩 공격에 취약하므로 권장하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="8598222c4a511535ba42795fcaa12ff829a8437c" translate="yes" xml:space="preserve">
          <source>When the &lt;code&gt;target&lt;/code&gt; property is set to &lt;code&gt;webworker&lt;/code&gt;, &lt;code&gt;web&lt;/code&gt;, or left unspecified:</source>
          <target state="translated">때 &lt;code&gt;target&lt;/code&gt; 속성이 설정되어 &lt;code&gt;webworker&lt;/code&gt; , &lt;code&gt;web&lt;/code&gt; , 또는 지정되지 않은 상태 :</target>
        </trans-unit>
        <trans-unit id="06701e817af0679d68717f1453f2f36525b99925" translate="yes" xml:space="preserve">
          <source>When the chunk has a name already, each part will get a new name derived from that name. Depending on the value of &lt;code&gt;optimization.splitChunks.hidePathInfo&lt;/code&gt; it will add a key derived from the first module name or a hash of it.</source>
          <target state="translated">청크에 이미 이름이 있으면 각 부분은 해당 이름에서 파생 된 새 이름을 얻습니다. &lt;code&gt;optimization.splitChunks.hidePathInfo&lt;/code&gt; 의 값에 따라 첫 번째 모듈 이름 또는 그 해시에서 파생 된 키가 추가됩니다.</target>
        </trans-unit>
        <trans-unit id="1e3fc46744fdb3b1a110fd3c2978521c4e860cb8" translate="yes" xml:space="preserve">
          <source>When the server is started, there will be a message prior to the list of resolved modules:</source>
          <target state="translated">서버가 시작되면 해결 된 모듈 목록 이전에 메시지가 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="0eaea81b241689b7665ce3045340a1e191fe43f4" translate="yes" xml:space="preserve">
          <source>When the webpack configuration &lt;a href=&quot;../configuration/configuration-types#exporting-a-function&quot;&gt;exports a function&lt;/a&gt;, an &quot;environment&quot; may be passed to it.</source>
          <target state="translated">웹팩 구성 &lt;a href=&quot;../configuration/configuration-types#exporting-a-function&quot;&gt;에서 함수를 내&lt;/a&gt; 보내면 &quot;환경&quot;이 전달 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="104fe67f806e89dc0b4cb6167e899e6aaf78d66a" translate="yes" xml:space="preserve">
          <source>When there is no AMD/CommonJS version of the module and you want to include the &lt;code&gt;dist&lt;/code&gt;, you can flag this module in &lt;a href=&quot;../configuration/module#module-noparse&quot;&gt;&lt;code&gt;noParse&lt;/code&gt;&lt;/a&gt;. This will cause webpack to include the module without parsing it or resolving &lt;code&gt;require()&lt;/code&gt; and &lt;code&gt;import&lt;/code&gt; statements. This practice is also used to improve the build performance.</source>
          <target state="translated">AMD / CommonJS 버전의 모듈이없고 &lt;code&gt;dist&lt;/code&gt; 를 포함하려는 경우이 모듈을 &lt;a href=&quot;../configuration/module#module-noparse&quot;&gt; &lt;code&gt;noParse&lt;/code&gt; 에&lt;/a&gt; 플래그 지정할 수 있습니다 . 이로 인해 웹팩은 모듈을 파싱하거나 &lt;code&gt;require()&lt;/code&gt; 및 &lt;code&gt;import&lt;/code&gt; 문을 해결하지 않고 모듈을 포함하게됩니다 . 이 방법은 빌드 성능을 향상시키는 데에도 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="6c3edac4d7e24677449b34a30a3cf2f744e6b21b" translate="yes" xml:space="preserve">
          <source>When this module or dependencies are updated, this module can be disposed and re-evaluated without informing parents. This makes sense if this module has no exports (or exports are updated in another way).</source>
          <target state="translated">이 모듈 또는 종속성이 업데이트되면이 모듈을 부모에게 알리지 않고 폐기 및 재평가 할 수 있습니다. 이 모듈에 내보내기가없는 경우 (또는 다른 방법으로 내보내기가 업데이트되는 경우) 의미가 있습니다.</target>
        </trans-unit>
        <trans-unit id="6a91d92f665575307fbc5e27ed8a9cc8f85d5a48" translate="yes" xml:space="preserve">
          <source>When trying to fulfill the last two conditions, bigger chunks are preferred.</source>
          <target state="translated">마지막 두 조건을 충족 시키려고 할 때 더 큰 청크가 선호됩니다.</target>
        </trans-unit>
        <trans-unit id="f13ec3e770ee9a2585f9ba44d513c7d97bbea033" translate="yes" xml:space="preserve">
          <source>When used in tandem with &lt;a href=&quot;#output-library&quot;&gt;&lt;code&gt;output.library&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#output-librarytarget&quot;&gt;&lt;code&gt;output.libraryTarget&lt;/code&gt;&lt;/a&gt;, this option allows users to insert comments within the export wrapper. To insert the same comment for each &lt;code&gt;libraryTarget&lt;/code&gt; type, set &lt;code&gt;auxiliaryComment&lt;/code&gt; to a string:</source>
          <target state="translated">&lt;a href=&quot;#output-library&quot;&gt; &lt;code&gt;output.library&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;#output-librarytarget&quot;&gt; &lt;code&gt;output.libraryTarget&lt;/code&gt; &lt;/a&gt; 과 함께 사용되는 경우이 옵션을 사용하면 내보내기 래퍼 내에 주석을 삽입 할 수 있습니다. 각각 같은 코멘트를 삽입하려면 &lt;code&gt;libraryTarget&lt;/code&gt; 의 유형을 설정 &lt;code&gt;auxiliaryComment&lt;/code&gt; 를 문자열로 :</target>
        </trans-unit>
        <trans-unit id="fe3acd69f18cf0fa025e30d33b88f225ea5c83d7" translate="yes" xml:space="preserve">
          <source>When used via the CLI, a path to an SSL .pfx file. If used in options, it should be the bytestream of the .pfx file.</source>
          <target state="translated">CLI를 통해 사용될 경우 SSL .pfx 파일의 경로입니다. 옵션에 사용되는 경우 .pfx 파일의 바이트 스트림이어야합니다.</target>
        </trans-unit>
        <trans-unit id="1c14be284346b2e05f05ffa004de1e194103d2d4" translate="yes" xml:space="preserve">
          <source>When using &lt;a href=&quot;https://github.com/webpack/css-loader#css-scope&quot;&gt;local scoped CSS&lt;/a&gt; the module exports the generated identifiers (locals).</source>
          <target state="translated">사용하는 경우 &lt;a href=&quot;https://github.com/webpack/css-loader#css-scope&quot;&gt;지역 범위의 CSS를&lt;/a&gt; 모듈은 생성 된 식별자 (주민)을 보냅니다.</target>
        </trans-unit>
        <trans-unit id="5e52b25343b4e7444f621c3662c930885bf482d3" translate="yes" xml:space="preserve">
          <source>When using &lt;code&gt;CommonsChunkPlugin&lt;/code&gt; and there are extracted chunks (from &lt;code&gt;ExtractTextPlugin.extract&lt;/code&gt;) in the commons chunk, &lt;code&gt;allChunks&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be set to &lt;code&gt;true&lt;/code&gt;</source>
          <target state="translated">사용하는 경우 &lt;code&gt;CommonsChunkPlugin&lt;/code&gt; 을 (에서 덩어리를 거기 추출 &lt;code&gt;ExtractTextPlugin.extract&lt;/code&gt; 공유지 청크에서), &lt;code&gt;allChunks&lt;/code&gt; 는&lt;strong&gt;해야한다&lt;/strong&gt; 로 설정 &lt;code&gt;true&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d584c7aa7efcdb09381d3f6b9d1482bbb06767a9" translate="yes" xml:space="preserve">
          <source>When using &lt;code&gt;extends&lt;/code&gt; to extend a configuration which exists in a different package, care must be taken to ensure you don't hit module resolution issues if you are developing with these packages with symlinks (i.e. with &lt;code&gt;npm link&lt;/code&gt; or &lt;code&gt;yarn link&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;extends&lt;/code&gt; 을 사용하여 다른 패키지에 존재하는 구성을 확장 할 때 symlinks (예 : &lt;code&gt;npm link&lt;/code&gt; 또는 &lt;code&gt;yarn link&lt;/code&gt; )를 사용 하여 이러한 패키지로 개발하는 경우 모듈 해결 문제에 부딪치지 않도록주의해야합니다 .</target>
        </trans-unit>
        <trans-unit id="42a1f70eb012f0ac279351ce1c8ae39dded51ef8" translate="yes" xml:space="preserve">
          <source>When using &lt;code&gt;libraryTarget: &quot;umd&quot;&lt;/code&gt;, setting:</source>
          <target state="translated">사용하는 경우 &lt;code&gt;libraryTarget: &quot;umd&quot;&lt;/code&gt; , 설정 :</target>
        </trans-unit>
        <trans-unit id="d8509cf228c82b867eb33d3fca67143c84f437b4" translate="yes" xml:space="preserve">
          <source>When using &lt;em&gt;inline mode&lt;/em&gt; and you're proxying dev-server, the inline client script does not always know where to connect to. It will try to guess the URL of the server based on &lt;code&gt;window.location&lt;/code&gt;, but if that fails you'll need to use this.</source>
          <target state="translated">사용하는 경우 &lt;em&gt;인라인 모드를&lt;/em&gt; 하고 dev에 서버를 프록시하고, 인라인 클라이언트 스크립트는 항상 어디에 연결하는 방법을 알고하지 않습니다. &lt;code&gt;window.location&lt;/code&gt; 을 기반으로 서버의 URL을 추측하려고 시도 하지만 실패하면이 URL 을 사용해야합니다.</target>
        </trans-unit>
        <trans-unit id="6a8fb2fcc0f83ebd6a8e17c48a53fa8fbfea74f0" translate="yes" xml:space="preserve">
          <source>When using &lt;em&gt;inline mode&lt;/em&gt;, the console in your DevTools will show you messages e.g. before reloading, before an error or when Hot Module Replacement is enabled. This may be too verbose.</source>
          <target state="translated">&lt;em&gt;인라인 모드를&lt;/em&gt; 사용하면 DevTools의 콘솔에 다시로드하기 전, 오류 전 또는 핫 모듈 교체가 활성화 된 경우 메시지가 표시됩니다. 너무 자세한 정보 일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e77908eaf537ea00b0400a7f0669c1771a2c2d16" translate="yes" xml:space="preserve">
          <source>When using CommonJS you need to update dependencies manually by using &lt;code&gt;require()&lt;/code&gt; in the &lt;code&gt;callback&lt;/code&gt;. Omitting the &lt;code&gt;callback&lt;/code&gt; doesn't make sense here.</source>
          <target state="translated">CommonJS를 사용 &lt;code&gt;require()&lt;/code&gt; 경우 &lt;code&gt;callback&lt;/code&gt; 에서 require () 를 사용하여 종속성을 수동으로 업데이트해야합니다 . &lt;code&gt;callback&lt;/code&gt; 생략하는 것은 여기서 의미가 없습니다.</target>
        </trans-unit>
        <trans-unit id="2d1b2ed5e0a1638010c1de9b40f0ed9b77d94cd9" translate="yes" xml:space="preserve">
          <source>When using ESM &lt;code&gt;import&lt;/code&gt; all imported symbols from &lt;code&gt;dependencies&lt;/code&gt; are automatically updated. Note: The dependency string must match exactly with the &lt;code&gt;from&lt;/code&gt; string in the &lt;code&gt;import&lt;/code&gt;. In some cases &lt;code&gt;callback&lt;/code&gt; can even be omitted. Using &lt;code&gt;require()&lt;/code&gt; in the &lt;code&gt;callback&lt;/code&gt; doesn't make sense here.</source>
          <target state="translated">ESM &lt;code&gt;import&lt;/code&gt; 사용하면 &lt;code&gt;dependencies&lt;/code&gt; 에서 가져온 모든 심볼 이 자동으로 업데이트됩니다. 참고 : 종속성 문자열은 &lt;code&gt;import&lt;/code&gt; 의 &lt;code&gt;from&lt;/code&gt; 문자열 과 정확히 일치해야합니다 . 경우에 따라 &lt;code&gt;callback&lt;/code&gt; 을 생략 할 수도 있습니다. &lt;code&gt;callback&lt;/code&gt; 에서 &lt;code&gt;require()&lt;/code&gt; 를 사용 하는 것은 여기에서 의미가 없습니다.</target>
        </trans-unit>
        <trans-unit id="1fa046a03cd02035f2257c2025e95544e29659a3" translate="yes" xml:space="preserve">
          <source>When using Webpack Dev Server with the Node.js API, don't put the dev server options on the webpack config object. Instead, pass them as a second parameter upon creation. For example:</source>
          <target state="translated">Node.js API와 함께 Webpack Dev Server를 사용할 때 devpack 옵션을 webpack 구성 오브젝트에 두지 마십시오. 대신 생성시 두 번째 매개 변수로 전달하십시오. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="6a766071a3193d76645f623381de365a55ccca2a" translate="yes" xml:space="preserve">
          <source>When using a configuration file that exports a &lt;code&gt;Function&lt;/code&gt;, users of &lt;code&gt;webpack-cli&lt;/code&gt; have become accustom to the function signature:</source>
          <target state="translated">&lt;code&gt;Function&lt;/code&gt; 을 내보내는 구성 파일을 사용할 때 &lt;code&gt;webpack-cli&lt;/code&gt; 사용자 는 기능 서명에 익숙해졌습니다.</target>
        </trans-unit>
        <trans-unit id="310b24f99340893cb335c1ec87c6e0254c3bbfd0" translate="yes" xml:space="preserve">
          <source>When using a function, the same options are available camel-cased via the &lt;code&gt;info&lt;/code&gt; parameter:</source>
          <target state="translated">함수를 사용할 때 &lt;code&gt;info&lt;/code&gt; 매개 변수 를 통해 낙타의 경우와 동일한 옵션을 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="919345ad6e389eced39029048b259a4cce500f9f" translate="yes" xml:space="preserve">
          <source>When using automatic compilation of your code, you could run into issues when saving your files. Some editors have a &quot;safe write&quot; feature that can potentially interfere with recompilation.</source>
          <target state="translated">코드 자동 컴파일을 사용하면 파일을 저장할 때 문제가 발생할 수 있습니다. 일부 편집자에게는 재 컴파일을 방해 할 수있는 &quot;안전한 쓰기&quot;기능이 있습니다.</target>
        </trans-unit>
        <trans-unit id="3863f9978c0aa732f4c61cc2792a7f1e3151450e" translate="yes" xml:space="preserve">
          <source>When using dots in your path (common with Angular), you may need to use the &lt;code&gt;disableDotRule&lt;/code&gt;:</source>
          <target state="translated">경로에서 점을 사용할 때 (Angular와 공통) &lt;code&gt;disableDotRule&lt;/code&gt; 을 사용해야 할 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="8761434d42f3a9b76e21d7ed21d75e64db995149" translate="yes" xml:space="preserve">
          <source>When using multiple compilations the following tools can help:</source>
          <target state="translated">여러 컴파일을 사용할 때 다음 도구가 도움이 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5c9f9461d94f164d19f38f901fe893ed8dd5d108" translate="yes" xml:space="preserve">
          <source>When using multiple conditions, all conditions must match.</source>
          <target state="translated">여러 조건을 사용하는 경우 모든 조건이 일치해야합니다.</target>
        </trans-unit>
        <trans-unit id="dd0cc2f8465f531bd6706c4a0561dc824762abfc" translate="yes" xml:space="preserve">
          <source>When using the &lt;a href=&quot;../plugins/extract-text-webpack-plugin&quot;&gt;&lt;code&gt;ExtractTextWebpackPlugin&lt;/code&gt;&lt;/a&gt;, use &lt;code&gt;[contenthash]&lt;/code&gt; to obtain a hash of the extracted file (neither &lt;code&gt;[hash]&lt;/code&gt; nor &lt;code&gt;[chunkhash]&lt;/code&gt; work).</source>
          <target state="translated">사용시 &lt;a href=&quot;../plugins/extract-text-webpack-plugin&quot;&gt; &lt;code&gt;ExtractTextWebpackPlugin&lt;/code&gt; 를&lt;/a&gt; 사용 &lt;code&gt;[contenthash]&lt;/code&gt; 는 추출 된 파일 (도 해시 얻었다 &lt;code&gt;[hash]&lt;/code&gt; 이나 &lt;code&gt;[chunkhash]&lt;/code&gt; 일).</target>
        </trans-unit>
        <trans-unit id="87f281f1720ce6c08dcd03d5e9cd497de40e5c97" translate="yes" xml:space="preserve">
          <source>When using the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/History&quot;&gt;HTML5 History API&lt;/a&gt;, the &lt;code&gt;index.html&lt;/code&gt; page will likely have to be served in place of any &lt;code&gt;404&lt;/code&gt; responses. Enable this by passing:</source>
          <target state="translated">사용하는 경우 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/History&quot;&gt;HTML5 역사 API를&lt;/a&gt; 의 &lt;code&gt;index.html&lt;/code&gt; 페이지 가능성이있는 대신에 제공되어야 할 것이다 &lt;code&gt;404&lt;/code&gt; 응답. 다음을 전달하여 활성화하십시오.</target>
        </trans-unit>
        <trans-unit id="276c7019670e4d400db3de358930e2316c327086" translate="yes" xml:space="preserve">
          <source>When using the &lt;a href=&quot;plugins/compiler#multicompiler&quot;&gt;&lt;code&gt;MultiCompiler&lt;/code&gt;&lt;/a&gt;, a &lt;code&gt;MultiStats&lt;/code&gt; instance is returned that fulfills the same interface as &lt;code&gt;stats&lt;/code&gt;, i.e. the methods described below.</source>
          <target state="translated">&lt;a href=&quot;plugins/compiler#multicompiler&quot;&gt; &lt;code&gt;MultiCompiler&lt;/code&gt; 를&lt;/a&gt; 사용할 때 &lt;code&gt;stats&lt;/code&gt; 와 동일한 인터페이스 , 즉 아래 설명 된 방법 을 충족 하는 &lt;code&gt;MultiStats&lt;/code&gt; 인스턴스가 반환 됩니다.</target>
        </trans-unit>
        <trans-unit id="1c7fbdbf018a042f288bca0480aac1a0dd935def" translate="yes" xml:space="preserve">
          <source>When using the &lt;code&gt;script-loader&lt;/code&gt;, the module is added as a string to the bundle. It is not minimized by &lt;code&gt;webpack&lt;/code&gt;, so use a minimized version. There is also no &lt;code&gt;devtool&lt;/code&gt; support for libraries added by this loader.</source>
          <target state="translated">사용하는 경우 &lt;code&gt;script-loader&lt;/code&gt; , 모듈은 번들에 문자열로 추가됩니다. &lt;code&gt;webpack&lt;/code&gt; 으로 최소화되지 않았으므로 최소화 된 버전을 사용하십시오. 이 로더에 의해 추가 된 라이브러리에 대한 &lt;code&gt;devtool&lt;/code&gt; 지원 도 없습니다 .</target>
        </trans-unit>
        <trans-unit id="35bcd6894584cf84c4bbd4553695b7e117ff914a" translate="yes" xml:space="preserve">
          <source>When using the &lt;code&gt;uglifyjs-webpack-plugin&lt;/code&gt; you must provide the &lt;code&gt;sourceMap: true&lt;/code&gt; option to enable SourceMap support.</source>
          <target state="translated">사용하는 경우 &lt;code&gt;uglifyjs-webpack-plugin&lt;/code&gt; 사용자가 제공해야 &lt;code&gt;sourceMap: true&lt;/code&gt; SourceMap 지원을 활성화하는 옵션을 선택합니다.</target>
        </trans-unit>
        <trans-unit id="97233d852aa30f2553ea2f85b6692bafe80493d6" translate="yes" xml:space="preserve">
          <source>When using the JetBrains WebStorm IDE, you may find that saving changed files does not trigger the watcher as you might expect. Try disabling the &lt;code&gt;safe write&lt;/code&gt; option in the settings, which determines whether files are saved to a temporary location first before the originals are overwritten: uncheck &lt;code&gt;File &amp;gt; Settings... &amp;gt; System Settings &amp;gt; Use &quot;safe write&quot; (save changes to a temporary file first)&lt;/code&gt;.</source>
          <target state="translated">JetBrains WebStorm IDE를 사용할 때 변경된 파일을 저장해도 감시자가 트리거되지 않을 수 있습니다. 원본을 덮어 쓰기 전에 파일을 임시 위치에 저장할지 여부를 결정하는 설정에서 &lt;code&gt;safe write&lt;/code&gt; 옵션을 비활성화하십시오 . &lt;code&gt;File &amp;gt; Settings... &amp;gt; System Settings &amp;gt; Use &quot;safe write&quot; (save changes to a temporary file first)&lt;/code&gt; 선택 취소 하십시오 (임시 파일에 변경 사항 저장). 먼저) .</target>
        </trans-unit>
        <trans-unit id="56b52754e7ad80111717977869ce23013cb7a6ec" translate="yes" xml:space="preserve">
          <source>When using the Node API, you can also pass plugins via the &lt;code&gt;plugins&lt;/code&gt; property in the configuration.</source>
          <target state="translated">Node API를 사용하는 경우 구성 의 &lt;code&gt;plugins&lt;/code&gt; 특성을 통해 플러그인을 전달할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="fdfe4d1930f53e0d9cfa9c220feace784474da21" translate="yes" xml:space="preserve">
          <source>When using the loader via a &lt;code&gt;require&lt;/code&gt; query string you may specify one of two types; a loader name, or a function index.</source>
          <target state="translated">요청 쿼리 문자열을 통해 로더를 사용하는 &lt;code&gt;require&lt;/code&gt; 두 가지 유형 중 하나를 지정할 수 있습니다. 로더 이름 또는 함수 색인.</target>
        </trans-unit>
        <trans-unit id="2ae702c3304830e5429bd20f4a649b33c4fb04db" translate="yes" xml:space="preserve">
          <source>When using the webpack CLI, the &lt;code&gt;--display-optimization-bailout&lt;/code&gt; flag will display bailout reasons. When using the webpack config, just add the following to the &lt;code&gt;stats&lt;/code&gt; object:</source>
          <target state="translated">웹팩 CLI를 사용할 때 &lt;code&gt;--display-optimization-bailout&lt;/code&gt; 플래그는 구제 이유를 표시합니다. webpack 설정을 사용할 때 &lt;code&gt;stats&lt;/code&gt; 객체에 다음을 추가하십시오 .</target>
        </trans-unit>
        <trans-unit id="004d9ee41f05aa17b7744c631ce51c54f3d420a9" translate="yes" xml:space="preserve">
          <source>When using this option, an empty &lt;code&gt;output.library&lt;/code&gt; will result in a broken output bundle.</source>
          <target state="translated">이 옵션을 사용하면 비어있는 &lt;code&gt;output.library&lt;/code&gt; 가 출력 번들을 손상시킵니다.</target>
        </trans-unit>
        <trans-unit id="e896d01d12e1e189dc9114001aad48b3c763a86e" translate="yes" xml:space="preserve">
          <source>When using this option, an empty &lt;code&gt;output.library&lt;/code&gt; will result in no assignment.</source>
          <target state="translated">이 옵션을 사용하면 비어있는 &lt;code&gt;output.library&lt;/code&gt; 가 할당되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="db9f8cc21f6fd8bc5f78e4c898c05511d76c2ca3" translate="yes" xml:space="preserve">
          <source>When using with transpiling loaders (like &lt;code&gt;babel-loader&lt;/code&gt;), make sure they are in correct order (bottom to top). Otherwise files will be checked after being processed by &lt;code&gt;babel-loader&lt;/code&gt;</source>
          <target state="translated">트랜스 필링 로더 (예 : &lt;code&gt;babel-loader&lt;/code&gt; ) 와 함께 사용하는 경우 올바른 순서 (아래에서 위)인지 확인하십시오. 그렇지 않으면 &lt;code&gt;babel-loader&lt;/code&gt; 에서 처리 한 후 파일을 확인합니다.</target>
        </trans-unit>
        <trans-unit id="44264ff8810f39437b3ac96c0de9a14c153fd7ee" translate="yes" xml:space="preserve">
          <source>When webpack bundles your source code, it can become difficult to track down errors and warnings to their original location. For example, if you bundle three source files (&lt;code&gt;a.js&lt;/code&gt;, &lt;code&gt;b.js&lt;/code&gt;, and &lt;code&gt;c.js&lt;/code&gt;) into one bundle (&lt;code&gt;bundle.js&lt;/code&gt;) and one of the source files contains an error, the stack trace will simply point to &lt;code&gt;bundle.js&lt;/code&gt;. This isn't always helpful as you probably want to know exactly which source file the error came from.</source>
          <target state="translated">웹팩이 소스 코드를 번들로 제공하면 오류 및 경고를 원래 위치로 추적하기가 어려워 질 수 있습니다. 예를 들어, 3 개의 소스 파일 ( &lt;code&gt;a.js&lt;/code&gt; , &lt;code&gt;b.js&lt;/code&gt; 및 &lt;code&gt;c.js&lt;/code&gt; )을 하나의 번들 ( &lt;code&gt;bundle.js&lt;/code&gt; )로 묶고 소스 파일 중 하나에 오류가있는 경우 스택 추적은 단순히 &lt;code&gt;bundle.js&lt;/code&gt; 가리 킵니다 . JS . 오류가 발생한 소스 파일을 정확히 알고 싶을 때 항상 도움이되는 것은 아닙니다.</target>
        </trans-unit>
        <trans-unit id="f46f5ae2930894ac4decd988b473259db99c97b8" translate="yes" xml:space="preserve">
          <source>When webpack processes your application, it starts from a list of modules defined on the command line or in its config file. Starting from these &lt;em&gt;entry points&lt;/em&gt;, webpack recursively builds a &lt;em&gt;dependency graph&lt;/em&gt; that includes every module your application needs, then packages all of those modules into a small number of &lt;em&gt;bundles&lt;/em&gt; - often, just one - to be loaded by the browser.</source>
          <target state="translated">webpack이 응용 프로그램을 처리 할 때 명령 줄이나 구성 파일에 정의 된 모듈 목록에서 시작합니다. 이러한 &lt;em&gt;진입 점&lt;/em&gt; 에서 시작하여 webpack은 애플리케이션에 필요한 모든 모듈을 포함 하는 &lt;em&gt;종속성 그래프&lt;/em&gt; 를 재귀 적으로 빌드 한 다음 해당 모듈을 모두 소수의 &lt;em&gt;번들 (&lt;/em&gt; 일반적으로 하나의 브라우저)로로드하여 브라우저에서로드합니다.</target>
        </trans-unit>
        <trans-unit id="aef11ccc66d1ab692a1827836ba47687bb99f74f" translate="yes" xml:space="preserve">
          <source>When you exclude &lt;code&gt;node_modules&lt;/code&gt; from being run through the babel-loader, babel-minify optimizations are not applied to the excluded files as it doesn't pass through the minifier.</source>
          <target state="translated">babel-loader를 통해 &lt;code&gt;node_modules&lt;/code&gt; 가 실행되지 않도록 제외 하면 babel- minify 최적화는 제외자를 통과하지 않으므로 제외 된 파일에 적용되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="a7ddbe37af4e8529934dbc374d5393577cf53904" translate="yes" xml:space="preserve">
          <source>When you open &lt;code&gt;index.html&lt;/code&gt; and look at your console in your developer tools, you should be able to see your imported data being logged to the console!</source>
          <target state="translated">&lt;code&gt;index.html&lt;/code&gt; 을 열고 개발자 도구에서 콘솔을 보면 가져온 데이터가 콘솔에 기록되는 것을 볼 수 있습니다!</target>
        </trans-unit>
        <trans-unit id="f46663d990dfa702b8fa81974dab2190809ce73e" translate="yes" xml:space="preserve">
          <source>When you use the babel-loader with webpack, the code generated by webpack for the module system doesn't go through the loader and is not optimized by babel-minify.</source>
          <target state="translated">webpack과 함께 babel-loader를 사용하면 모듈 시스템을 위해 webpack에 의해 생성 된 코드는 로더를 거치지 않으며 babel-minify에 의해 최적화되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="080e8f4a6d7029364d0c1220731365b8161ca200" translate="yes" xml:space="preserve">
          <source>Whenever the &lt;code&gt;identifier&lt;/code&gt; is encountered as free variable in a module, the &lt;code&gt;module&lt;/code&gt; is loaded automatically and the &lt;code&gt;identifier&lt;/code&gt; is filled with the exports of the loaded &lt;code&gt;module&lt;/code&gt; (of &lt;code&gt;property&lt;/code&gt; in order to support named exports).</source>
          <target state="translated">&lt;code&gt;identifier&lt;/code&gt; 가 모듈에서 자유 변수로 발견 될 때마다 &lt;code&gt;module&lt;/code&gt; 이 자동으로 로드되고로드 된 &lt;code&gt;module&lt;/code&gt; 의 내보내기 ( 이름 지정된 내보내기를 지원하기 위해 &lt;code&gt;property&lt;/code&gt; 로 &lt;code&gt;identifier&lt;/code&gt; 가 채워집니다 .</target>
        </trans-unit>
        <trans-unit id="cc25856f57e27ee7b1d7d3124aa6b4a5336189b8" translate="yes" xml:space="preserve">
          <source>Where &lt;code&gt;[type]&lt;/code&gt; is one of the three resolvers mention above, specified as:</source>
          <target state="translated">여기서 &lt;code&gt;[type]&lt;/code&gt; 은 위에서 언급 한 세 가지 확인자 중 하나이며 다음과 같이 지정됩니다.</target>
        </trans-unit>
        <trans-unit id="79ebb1900c58b27bcf1a37c17fdac56e056052ad" translate="yes" xml:space="preserve">
          <source>Whether comments shall be extracted to a separate file, (see &lt;a href=&quot;https://github.com/webpack/webpack/commit/71933e979e51c533b432658d5e37917f9e71595a&quot;&gt;details&lt;/a&gt; (&lt;code&gt;webpack &amp;gt;= 2.3.0&lt;/code&gt;)</source>
          <target state="translated">주석을 별도의 파일로 추출할지 여부 ( &lt;a href=&quot;https://github.com/webpack/webpack/commit/71933e979e51c533b432658d5e37917f9e71595a&quot;&gt;세부 사항 참조&lt;/a&gt; ( &lt;code&gt;webpack &amp;gt;= 2.3.0&lt;/code&gt; )</target>
        </trans-unit>
        <trans-unit id="203a35ccffd8ac25f845fb1d624ed57b1f9e0ac8" translate="yes" xml:space="preserve">
          <source>Whether comments shall be extracted to a separate file, (see &lt;a href=&quot;https://github.com/webpack/webpack/commit/71933e979e51c533b432658d5e37917f9e71595a&quot;&gt;details&lt;/a&gt;). By default extract only comments using &lt;code&gt;/^\**!|@preserve|@license|@cc_on/&lt;/code&gt; regexp condition and remove remaining comments. If the original file is named &lt;code&gt;foo.js&lt;/code&gt;, then the comments will be stored to &lt;code&gt;foo.js.LICENSE&lt;/code&gt;. The &lt;code&gt;terserOptions.output.comments&lt;/code&gt; option specifies whether the comment will be preserved, i.e. it is possible to preserve some comments (e.g. annotations) while extracting others or even preserving comments that have been extracted.</source>
          <target state="translated">주석을 별도의 파일로 추출할지 여부 ( &lt;a href=&quot;https://github.com/webpack/webpack/commit/71933e979e51c533b432658d5e37917f9e71595a&quot;&gt;세부 사항 참조&lt;/a&gt; ). 기본적으로 &lt;code&gt;/^\**!|@preserve|@license|@cc_on/&lt;/code&gt; regexp 조건을 사용하여 주석 만 추출 하고 나머지 주석을 제거하십시오. 원본 파일의 이름이 &lt;code&gt;foo.js&lt;/code&gt; 이면 주석은 &lt;code&gt;foo.js.LICENSE&lt;/code&gt; 에 저장됩니다 . &lt;code&gt;terserOptions.output.comments&lt;/code&gt; 의 다른 사람을 추출 또는 추출 된 의견을 유지하면서 주석을 보존할지 여부 옵션을 지정합니다 (예 : 주석)은 몇 가지 의견을 보존 할 수 있습니다 즉.</target>
        </trans-unit>
        <trans-unit id="e9b17f79f6e341bfd915b100e6b6f6a8cf3abdcb" translate="yes" xml:space="preserve">
          <source>Whether to delete the original assets or not</source>
          <target state="translated">원본 자산을 삭제할지 여부</target>
        </trans-unit>
        <trans-unit id="40e41ac9d28aeb3dfb199e893fd052686b782a72" translate="yes" xml:space="preserve">
          <source>Whether to require to use an extension for modules (e.g. loaders). Default:</source>
          <target state="translated">모듈 (예 : 로더)에 확장을 사용해야하는지 여부입니다. 기본:</target>
        </trans-unit>
        <trans-unit id="899c5644850b9f680a11930564518fdc917caefd" translate="yes" xml:space="preserve">
          <source>Whether to resolve symlinks to their symlinked location.</source>
          <target state="translated">심볼릭 링크를 해당 심볼릭 링크 위치로 해결할지 여부</target>
        </trans-unit>
        <trans-unit id="acb77c7ff920751a5556066d72033f877d131b9c" translate="yes" xml:space="preserve">
          <source>While loaders are used to transform certain types of modules, plugins can be leveraged to perform a wider range of tasks like bundle optimization, asset management and injection of environment variables.</source>
          <target state="translated">로더는 특정 유형의 모듈을 변환하는 데 사용되지만 플러그인은 번들 최적화, 자산 관리 및 환경 변수 주입과 같은 광범위한 작업을 수행하는 데 사용될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d7463f4dddeb6f0e9da8e1c089bc6656e4667d6e" translate="yes" xml:space="preserve">
          <source>While merging chunks, webpack will try to identify those that have duplicate modules and merge them first. Nothing will be merged into the entry chunk, so as not to impact initial page loading time. Here's a small example:</source>
          <target state="translated">청크를 병합하는 동안 웹팩은 중복 모듈이있는 것을 식별하고 먼저 병합합니다. 초기 페이지로드 시간에 영향을 미치지 않도록 항목 청크에 아무것도 병합되지 않습니다. 다음은 작은 예입니다.</target>
        </trans-unit>
        <trans-unit id="9f260e047f557f0cc285e7fb1ad3a397bfc9d1d3" translate="yes" xml:space="preserve">
          <source>While most users can get away with just using the CLI along with a configuration file, more fine-grained control of the compilation can be achieved via the Node interface. This includes passing multiple configurations, programmatically running or watching, and collecting stats.</source>
          <target state="translated">대부분의 사용자는 구성 파일과 함께 CLI를 사용하여 벗어날 수 있지만 노드 인터페이스를 통해보다 세밀한 컴파일 제어를 수행 할 수 있습니다. 여기에는 여러 구성 전달, 프로그래밍 방식으로 실행 또는 관찰 및 통계 수집이 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="618a6129c7273b47da7b88dc7f09c407247264e4" translate="yes" xml:space="preserve">
          <source>While the data this comments can provide is very useful during development when reading the generated code, it &lt;strong&gt;should not&lt;/strong&gt; be used in production.</source>
          <target state="translated">이 주석이 제공 할 수있는 데이터는 개발 중에 생성 된 코드를 읽을 때 매우 유용하지만 프로덕션에서는 사용 &lt;strong&gt;하지 않아야&lt;/strong&gt; 합니다.</target>
        </trans-unit>
        <trans-unit id="394aa1bfc8d586082549d37618366c424d0e5ade" translate="yes" xml:space="preserve">
          <source>While these short hand methods are nice, we usually recommend just using the configuration as it's better to understand exactly what is being done for you in both cases. The configuration also gives you more control on fine tuning other options within both plugins.</source>
          <target state="translated">이 짧은 방법은 훌륭하지만 일반적으로 구성을 사용하는 것이 좋습니다. 두 경우 모두 수행되는 작업을 정확하게 이해하는 것이 좋습니다. 구성은 또한 두 플러그인 내에서 다른 옵션의 미세 조정에 대한 제어를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="220c801a72c608bf89df64387e02e35dd12b5cc0" translate="yes" xml:space="preserve">
          <source>While they are technically feasible, &lt;strong&gt;the following practices should be avoided&lt;/strong&gt;:</source>
          <target state="translated">기술적으로 실현 가능하지만 &lt;strong&gt;다음과 같은 관행을 피해야합니다&lt;/strong&gt; .</target>
        </trans-unit>
        <trans-unit id="3bc43142ff2adf0fed05e4f93e2b864229f2c73b" translate="yes" xml:space="preserve">
          <source>While we will separate the &lt;em&gt;production&lt;/em&gt; and &lt;em&gt;development&lt;/em&gt; specific bits out, note that we'll still maintain a &quot;common&quot; configuration to keep things DRY. In order to merge these configurations together, we'll use a utility called &lt;a href=&quot;https://github.com/survivejs/webpack-merge&quot;&gt;&lt;code&gt;webpack-merge&lt;/code&gt;&lt;/a&gt;. With the &quot;common&quot; configuration in place, we won't have to duplicate code within the environment-specific configurations.</source>
          <target state="translated">&lt;em&gt;프로덕션&lt;/em&gt; 및 &lt;em&gt;개발&lt;/em&gt; 관련 비트를 분리하지만 DRY를 유지하기 위해 여전히 &quot;공통&quot;구성을 유지합니다. 이러한 구성을 병합하기 위해 &lt;a href=&quot;https://github.com/survivejs/webpack-merge&quot;&gt; &lt;code&gt;webpack-merge&lt;/code&gt; &lt;/a&gt; 라는 유틸리티를 사용합니다 . &quot;공통&quot;구성을 사용하면 환경 별 구성 내에서 코드를 복제 할 필요가 없습니다.</target>
        </trans-unit>
        <trans-unit id="33e5ea407a7fb8346158cdb3db478357d3de7403" translate="yes" xml:space="preserve">
          <source>While webpack 5 is likely to come with a CSS minimizer built-in, with webpack 4 you need to bring your own. To minify the output, use a plugin like &lt;a href=&quot;https://github.com/NMFR/optimize-css-assets-webpack-plugin&quot;&gt;optimize-css-assets-webpack-plugin&lt;/a&gt;. Setting &lt;code&gt;optimization.minimizer&lt;/code&gt; overrides the defaults provided by webpack, so make sure to also specify a JS minimizer:</source>
          <target state="translated">webpack 5에는 CSS 최소화 기능이 내장되어 있지만 webpack 4를 사용하면 직접 가져와야합니다. 출력을 &lt;a href=&quot;https://github.com/NMFR/optimize-css-assets-webpack-plugin&quot;&gt;최소화&lt;/a&gt; 하려면 optimize-css-assets-webpack-plugin 과 같은 플러그인을 사용하십시오 . &lt;code&gt;optimization.minimizer&lt;/code&gt; 를 설정하면 웹팩에서 제공 한 기본값이 대체되므로 JS 최소화기를 지정해야합니다.</target>
        </trans-unit>
        <trans-unit id="d1aa8b232efdd93b632345393245511271349dab" translate="yes" xml:space="preserve">
          <source>While webpack supports multiple module syntaxes, we recommend following a single syntax for consistency and to avoid odd behaviors/bugs. Here's &lt;a href=&quot;https://github.com/webpack/webpack.js.org/issues/552&quot;&gt;one example&lt;/a&gt; of mixing ES6 and CommonJS, however there are surely others.</source>
          <target state="translated">웹팩은 여러 모듈 구문을 지원하지만 일관성을 유지하고 이상한 동작 / 버그를 피하려면 단일 구문을 따르는 것이 좋습니다. 다음은 ES6와 CommonJS를 혼합하는 &lt;a href=&quot;https://github.com/webpack/webpack.js.org/issues/552&quot;&gt;한 가지 예&lt;/a&gt; 입니다. 그러나 분명히 다른 것이 있습니다.</target>
        </trans-unit>
        <trans-unit id="2b59ea3340e8a9f13a9b795729f77e661ab41f51" translate="yes" xml:space="preserve">
          <source>While writing your code, you may have already added many code split points to load stuff on demand. After compiling you might notice that some chunks are too small - creating larger HTTP overhead. Luckily, this plugin can post-process your chunks by merging them.</source>
          <target state="translated">코드를 작성하는 동안 필요에 따라 물건을로드하기 위해 많은 코드 분할 지점을 이미 추가했을 수 있습니다. 컴파일 후 일부 청크가 너무 작아서 HTTP 오버 헤드가 커질 수 있습니다. 운 좋게도이 플러그인은 청크를 병합하여 사후 처리 할 수 ​​있습니다.</target>
        </trans-unit>
        <trans-unit id="21e2caea4476d26af34541ca7c909c7ff2fa4a7f" translate="yes" xml:space="preserve">
          <source>Why</source>
          <target state="translated">Why</target>
        </trans-unit>
        <trans-unit id="01bb3cc1876bfa59c8d1a9e7c71fc42eb2e30d27" translate="yes" xml:space="preserve">
          <source>Why:</source>
          <target state="translated">Why:</target>
        </trans-unit>
        <trans-unit id="0cb5dd4802cbd5e1f4424e1f24a53406f192c8c5" translate="yes" xml:space="preserve">
          <source>Will produce the following URL:</source>
          <target state="translated">다음 URL을 생성합니다.</target>
        </trans-unit>
        <trans-unit id="33d8d326d6e4611e0a87cfaaea2feefed77ccd63" translate="yes" xml:space="preserve">
          <source>Window: available trough the &lt;code&gt;window&lt;/code&gt; object, in the browser (&lt;code&gt;libraryTarget:'window'&lt;/code&gt;).</source>
          <target state="translated">Window : 브라우저에서 &lt;code&gt;window&lt;/code&gt; 객체를 통해 사용할 수 있습니다 ( &lt;code&gt;libraryTarget:'window'&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="444c4a26fea99b453258d90271520addbdddd9d9" translate="yes" xml:space="preserve">
          <source>Windows Paths</source>
          <target state="translated">Windows 경로</target>
        </trans-unit>
        <trans-unit id="da613a4c8d9ac0d530d7b6f4b1027eff5b02dc20" translate="yes" xml:space="preserve">
          <source>With &lt;a href=&quot;../guides/code-splitting&quot;&gt;Code Splitting&lt;/a&gt;, multiple child chunks of an entry chunk can have common dependencies. To prevent duplication these can be moved into the parent. This reduces overall size, but does have a negative effect on the initial load time. If it is expected that users will need to download many sibling chunks, i.e. children of the entry chunk, then this should improve load time overall.</source>
          <target state="translated">함께 &lt;a href=&quot;../guides/code-splitting&quot;&gt;코드 분할&lt;/a&gt; , 항목 청크의 여러 자식 덩어리 일반적인 종속성을 가질 수 있습니다. 중복을 방지하기 위해 부모로 이동할 수 있습니다. 이렇게하면 전체 크기가 줄어들지 만 초기로드 시간에는 부정적인 영향을 미칩니다. 사용자가 많은 형제 청크 (예 : 엔트리 청크의 자식)를 다운로드해야하는 경우 전체로드 시간이 향상됩니다.</target>
        </trans-unit>
        <trans-unit id="bbd80a59681363399f6dd172be13e509a8f7ad11" translate="yes" xml:space="preserve">
          <source>With &lt;code&gt;:local&lt;/code&gt; (without brackets) local mode can be switched on for this selector. &lt;code&gt;:global(.className)&lt;/code&gt; can be used to declare an explicit global selector. With &lt;code&gt;:global&lt;/code&gt; (without brackets) global mode can be switched on for this selector.</source>
          <target state="translated">하여 &lt;code&gt;:local&lt;/code&gt; (괄호)없이 로컬 모드 셀렉터에 대해 전환 될 수있다. &lt;code&gt;:global(.className)&lt;/code&gt; 을 사용하여 명시 적 전역 선택기를 선언 할 수 있습니다. 함께 &lt;code&gt;:global&lt;/code&gt; (괄호)없이 글로벌 모드 셀렉터에 대해 전환 될 수있다.</target>
        </trans-unit>
        <trans-unit id="5b225ce3e980419fcedac5c168209f1893afb65e" translate="yes" xml:space="preserve">
          <source>With &lt;code&gt;noInfo&lt;/code&gt; enabled, messages like the webpack bundle information that is shown when starting up and after each save, will be hidden. Errors and warnings will still be shown.</source>
          <target state="translated">함께 &lt;code&gt;noInfo&lt;/code&gt; 가 활성화되어 각 저장 한 후 시작할 때 표시되고 웹팩 번들 정보와 같은 메시지가 표시되지 않습니다. 오류 및 경고가 계속 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="1c1b3ec9c729a0c66fab9d9e13f38d92d5ea577c" translate="yes" xml:space="preserve">
          <source>With &lt;code&gt;quiet&lt;/code&gt; enabled, nothing except the initial startup information will be written to the console. This also means that errors or warnings from webpack are not visible.</source>
          <target state="translated">함께 &lt;code&gt;quiet&lt;/code&gt; 가능, 초기 시작 정보를 제외하고 아무것도 콘솔에 기록되지 않습니다. 이는 또한 웹팩의 오류 또는 경고가 표시되지 않음을 의미합니다.</target>
        </trans-unit>
        <trans-unit id="2261b00c5dbf984d31b8e8efe89283a28dff1f62" translate="yes" xml:space="preserve">
          <source>With &lt;code&gt;strictModuleExceptionHandling&lt;/code&gt; set to &lt;code&gt;false&lt;/code&gt;, only the first &lt;code&gt;require&lt;/code&gt; throws an exception:</source>
          <target state="translated">함께 &lt;code&gt;strictModuleExceptionHandling&lt;/code&gt; 에 세트를 &lt;code&gt;false&lt;/code&gt; 만이 첫번째 &lt;code&gt;require&lt;/code&gt; 예외가 발생합니다 :</target>
        </trans-unit>
        <trans-unit id="64396abb449717c242f124f529cce2f09650c835" translate="yes" xml:space="preserve">
          <source>With a backend on &lt;code&gt;localhost:3000&lt;/code&gt;, you can use this to enable proxying:</source>
          <target state="translated">&lt;code&gt;localhost:3000&lt;/code&gt; 에 백엔드를 사용하면이를 사용하여 프록시를 활성화 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="bb6a8ecee5a47fcee3409e523a4abb2ceedc1a1d" translate="yes" xml:space="preserve">
          <source>With an absolute path, it will only search in the given directory.</source>
          <target state="translated">절대 경로를 사용하면 지정된 디렉토리에서만 검색합니다.</target>
        </trans-unit>
        <trans-unit id="bdf18bc54e5096bd0a6188e6cf6be620da271522" translate="yes" xml:space="preserve">
          <source>With next config:</source>
          <target state="translated">다음 설정으로 :</target>
        </trans-unit>
        <trans-unit id="71ddcdb75862f1ccf43f751b9133266beb9cdfc8" translate="yes" xml:space="preserve">
          <source>With that in place, let's see what happens when we do an &lt;code&gt;npm run build&lt;/code&gt;:</source>
          <target state="translated">그 위치에서 &lt;code&gt;npm run build&lt;/code&gt; 를 수행하면 어떤 일이 발생하는지 봅시다 .</target>
        </trans-unit>
        <trans-unit id="eb60d89ccdec95062636744692239878a8311c6e" translate="yes" xml:space="preserve">
          <source>With that in place, let's update our entry script to utilize one of these new methods and remove &lt;code&gt;lodash&lt;/code&gt; for simplicity:</source>
          <target state="translated">그 자리에 입력 스크립트를 업데이트하여 다음과 같은 새로운 방법 중 하나를 활용 하고 간단하게 &lt;code&gt;lodash&lt;/code&gt; 를 제거 하겠습니다 .</target>
        </trans-unit>
        <trans-unit id="29a9b2b6d1e673ae67e5cea0f4d0192bed6a7832" translate="yes" xml:space="preserve">
          <source>With that in place, we can add the logic to conditionally load our new &lt;code&gt;polyfills.bundle.js&lt;/code&gt; file. How you make this decision depends on the technologies and browsers you need to support. We'll just do some simple testing to determine whether our polyfills are needed:</source>
          <target state="translated">이를 통해 로직을 추가하여 새로운 &lt;code&gt;polyfills.bundle.js&lt;/code&gt; 파일 을 조건부로로드 할 수 있습니다 . 이 결정을 내리는 방법은 지원해야하는 기술 및 브라우저에 따라 다릅니다. 폴리 필이 필요한지 확인하기 위해 간단한 테스트를 수행합니다.</target>
        </trans-unit>
        <trans-unit id="8a561e18dac29b32832d2f136d334bfd899388b2" translate="yes" xml:space="preserve">
          <source>With that said, let's run &lt;code&gt;npx webpack&lt;/code&gt;, which will take our script at &lt;code&gt;src/index.js&lt;/code&gt; as the &lt;a href=&quot;../concepts/entry-points&quot;&gt;entry point&lt;/a&gt;, and will generate &lt;code&gt;dist/main.js&lt;/code&gt; as the &lt;a href=&quot;../concepts/output&quot;&gt;output&lt;/a&gt;. The &lt;code&gt;npx&lt;/code&gt; command, which ships with Node 8.2/npm 5.2.0 or higher, runs the webpack binary (&lt;code&gt;./node_modules/.bin/webpack&lt;/code&gt;) of the webpack package we installed in the beginning:</source>
          <target state="translated">그렇게 말한다면, 이제 실행하자 &lt;code&gt;npx webpack&lt;/code&gt; 에서 우리의 스크립트를 취할 것이다, &lt;code&gt;src/index.js&lt;/code&gt; 는 AS &lt;a href=&quot;../concepts/entry-points&quot;&gt;진입 점&lt;/a&gt; , 그리고 생성 &lt;code&gt;dist/main.js&lt;/code&gt; 는 AS &lt;a href=&quot;../concepts/output&quot;&gt;출력을&lt;/a&gt; . Node 8.2 / npm 5.2.0 이상과 함께 제공 되는 &lt;code&gt;npx&lt;/code&gt; 명령 은 처음에 설치 한 웹팩 패키지 의 웹팩 바이너리 ( &lt;code&gt;./node_modules/.bin/webpack&lt;/code&gt; )를 실행합니다 .</target>
        </trans-unit>
        <trans-unit id="da94f4bc9bc2a74e22052ec871ba55495942d472" translate="yes" xml:space="preserve">
          <source>With that squared away, we can run another &lt;code&gt;npm run build&lt;/code&gt; and see if anything has changed.</source>
          <target state="translated">이를 제곱하면 다른 &lt;code&gt;npm run build&lt;/code&gt; 하고 변경된 것이 있는지 확인할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="11b8ad9c6db101c09c9ea40dfa534293e6654ae6" translate="yes" xml:space="preserve">
          <source>With the &lt;a href=&quot;../plugins/split-chunks-plugin&quot;&gt;&lt;code&gt;SplitChunks&lt;/code&gt;&lt;/a&gt; in place, we should now see the duplicate dependency removed from our &lt;code&gt;index.bundle.js&lt;/code&gt; and &lt;code&gt;another.bundle.js&lt;/code&gt;. The plugin should notice that we've separated &lt;code&gt;lodash&lt;/code&gt; out to a separate chunk and remove the dead weight from our main bundle. Let's do an &lt;code&gt;npm run build&lt;/code&gt; to see if it worked:</source>
          <target state="translated">으로 &lt;a href=&quot;../plugins/split-chunks-plugin&quot;&gt; &lt;code&gt;SplitChunks&lt;/code&gt; &lt;/a&gt; 장소에, 우리는 지금 우리의에서 제거 중복 의존성 볼 수 &lt;code&gt;index.bundle.js&lt;/code&gt; 및 &lt;code&gt;another.bundle.js&lt;/code&gt; 을 . 플러그인은 &lt;code&gt;lodash&lt;/code&gt; 를 별도의 덩어리로 분리하고 기본 번들에서 죽은 무게를 제거합니다. &lt;code&gt;npm run build&lt;/code&gt; 를 수행하여 작동하는지 확인하십시오.</target>
        </trans-unit>
        <trans-unit id="8a95996403d0479861a6b4e7a89511aeea3f2ee3" translate="yes" xml:space="preserve">
          <source>With the &lt;code&gt;libraryExport&lt;/code&gt; configurations specified above, the resulting libraries could be utilized as such:</source>
          <target state="translated">위에서 지정한 &lt;code&gt;libraryExport&lt;/code&gt; 구성을 사용하면 결과 라이브러리를 다음과 같이 활용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f8cc9918374023b808c6be47d5d665f11ee02edf" translate="yes" xml:space="preserve">
          <source>With the above setting a self-signed certificate is used, but you can provide your own:</source>
          <target state="translated">위의 설정에서 자체 서명 된 인증서가 사용되지만 고유 한 인증서를 제공 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c79c4fbc27f3e16e9bcfa18c8785f3041b90c961" translate="yes" xml:space="preserve">
          <source>With the extract-loader, you are able to reference your &lt;code&gt;main.css&lt;/code&gt; as regular &lt;code&gt;entry&lt;/code&gt;. The following &lt;code&gt;webpack.config.js&lt;/code&gt; shows how to load your styles with the &lt;a href=&quot;style-loader&quot;&gt;style-loader&lt;/a&gt; in development and as separate file in production.</source>
          <target state="translated">추출 로더를 사용하면 &lt;code&gt;main.css&lt;/code&gt; 를 일반 &lt;code&gt;entry&lt;/code&gt; 으로 참조 할 수 있습니다. 다음 &lt;code&gt;webpack.config.js&lt;/code&gt; 는 개발시 &lt;a href=&quot;style-loader&quot;&gt;스타일 로더&lt;/a&gt; 를 사용하여 프로덕션에서 별도의 파일로 스타일을로드하는 방법을 보여줍니다 .</target>
        </trans-unit>
        <trans-unit id="e879ed7ebe97ab514f9ac82d92789a1995b02f8a" translate="yes" xml:space="preserve">
          <source>With the loader configured and fonts in place, you can incorporate them via an &lt;code&gt;@font-face&lt;/code&gt; declaration. The local &lt;code&gt;url(...)&lt;/code&gt; directive will be picked up by webpack just as it was with the image:</source>
          <target state="translated">로더가 구성되고 글꼴이 배치 된 상태에서 &lt;code&gt;@font-face&lt;/code&gt; 선언을 통해 통합 할 수 있습니다 . 로컬 &lt;code&gt;url(...)&lt;/code&gt; 지시문은 이미지와 마찬가지로 webpack에 의해 선택됩니다.</target>
        </trans-unit>
        <trans-unit id="9aa3992e4ce723673608e4cd88c8061c3cc47c1f" translate="yes" xml:space="preserve">
          <source>With the same configuration as above:</source>
          <target state="translated">위와 동일한 구성으로 :</target>
        </trans-unit>
        <trans-unit id="87cceefb92302190536b2b8442673ced6c7194c6" translate="yes" xml:space="preserve">
          <source>With this configuration:</source>
          <target state="translated">이 구성으로 :</target>
        </trans-unit>
        <trans-unit id="23fc7d1082b4dd2dcbf10b62f03eb29c07d54435" translate="yes" xml:space="preserve">
          <source>With webpack 3.5.5, using &lt;code&gt;libraryTarget: { root:'_' }&lt;/code&gt; doesn't work properly (as stated in &lt;a href=&quot;https://github.com/webpack/webpack/issues/4824&quot;&gt;issue 4824&lt;/a&gt;). However, you can set &lt;code&gt;libraryTarget: { var: '_' }&lt;/code&gt; to expect the library as a global variable.</source>
          <target state="translated">webpack 3.5.5에서 &lt;code&gt;libraryTarget: { root:'_' }&lt;/code&gt; 사용 하면 {root : '_'} 가 제대로 작동하지 않습니다 ( &lt;a href=&quot;https://github.com/webpack/webpack/issues/4824&quot;&gt;문제 4824에&lt;/a&gt; 설명 된대로 ). 그러나 라이브러리를 전역 변수로 예상하도록 &lt;code&gt;libraryTarget: { var: '_' }&lt;/code&gt; 을 설정할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="8732f0a5e9a8bf5a55b6df25e3d01cfd8c8eef53" translate="yes" xml:space="preserve">
          <source>Within your webpack configuration object, you'll need to add the babel-loader to the list of modules, like so:</source>
          <target state="translated">웹팩 구성 객체 내에서 다음과 같이 babel-loader를 모듈 목록에 추가해야합니다.</target>
        </trans-unit>
        <trans-unit id="bddb13c140d09d38ff9bdf2addfdbde63717f1a3" translate="yes" xml:space="preserve">
          <source>Without &lt;code&gt;require.include('a')&lt;/code&gt; it would be duplicated in both anonymous chunks.</source>
          <target state="translated">&lt;code&gt;require.include('a')&lt;/code&gt; 가 없으면 익명의 두 덩어리에 복제됩니다.</target>
        </trans-unit>
        <trans-unit id="0b3f121ad6e6adf10645f307e2b236a6bd4df531" translate="yes" xml:space="preserve">
          <source>Without bundling &lt;code&gt;lodash&lt;/code&gt;, but requiring it to be loaded by the consumer using &lt;code&gt;externals&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;lodash&lt;/code&gt; 를 묶지 않고 &lt;code&gt;externals&lt;/code&gt; 사용하여 소비자가로드해야합니다 .</target>
        </trans-unit>
        <trans-unit id="b87ebfe4d9449847cae77868b59700d8b37ff9ec" translate="yes" xml:space="preserve">
          <source>Wondering the difference between CommonJS and CommonJS2 is? While they are similar, there are some subtle differences between them that are not usually relevant in the context of webpack. (For further details, please &lt;a href=&quot;https://github.com/webpack/webpack/issues/1114&quot;&gt;read this issue&lt;/a&gt;.)</source>
          <target state="translated">CommonJS와 CommonJS2의 차이점이 궁금하십니까? 그것들은 비슷하지만 일반적으로 webpack의 맥락에서 관련이없는 약간의 미묘한 차이점이 있습니다. (자세한 내용 &lt;a href=&quot;https://github.com/webpack/webpack/issues/1114&quot;&gt;은이 문제&lt;/a&gt; 를 참조하십시오 .)</target>
        </trans-unit>
        <trans-unit id="2bd1799686939d6c40b6fc6d1834a5070159c0aa" translate="yes" xml:space="preserve">
          <source>Worker Pool</source>
          <target state="translated">작업자 풀</target>
        </trans-unit>
        <trans-unit id="47da685d4ce43b86671c1b697e05862bb915ae12" translate="yes" xml:space="preserve">
          <source>Works beautifully with async/await</source>
          <target state="translated">async / await와 함께 아름답게 작동</target>
        </trans-unit>
        <trans-unit id="1ea79d6e6f4d7547a74b5be4b620fb97f6b83c66" translate="yes" xml:space="preserve">
          <source>Wrapping up</source>
          <target state="translated">마무리</target>
        </trans-unit>
        <trans-unit id="2a6fd277f08359dea3f96c16af1ecd77632ea198" translate="yes" xml:space="preserve">
          <source>Wraps a react component in a proxy component to enable Code Splitting, which loads a react component and its dependencies on demand.</source>
          <target state="translated">반응 구성 요소 및 프록시 구성 요소를 랩하여 코드 분할을 사용 가능하게하여 반응 구성 요소 및 요청시 종속성을로드합니다.</target>
        </trans-unit>
        <trans-unit id="36713ec5106504c6078cdd85306fc98592f85b98" translate="yes" xml:space="preserve">
          <source>Write long configurations (instead split the configuration into multiple files)</source>
          <target state="translated">긴 구성 쓰기 (구성을 여러 파일로 나누지 않음)</target>
        </trans-unit>
        <trans-unit id="31860e6ece8d648f15b2880b9f13b39001ab849b" translate="yes" xml:space="preserve">
          <source>Write the output of the errors to a file, for example a checkstyle xml file for use for reporting on Jenkins CI</source>
          <target state="translated">Jenkins CI에 대한보고에 사용하기 위해 checkstyle xml 파일과 같은 오류 출력을 파일에 작성하십시오.</target>
        </trans-unit>
        <trans-unit id="373464ffb250a399e37ccfde5f51d09a03e0cfff" translate="yes" xml:space="preserve">
          <source>YAML frontmatter loader for webpack. Converts YAML in files to JSON.</source>
          <target state="translated">웹 팩용 YAML 프론트 매터 로더. 파일의 YAML을 JSON으로 변환합니다.</target>
        </trans-unit>
        <trans-unit id="76c7f40c6c36b0415ea83ef88312618e6fa1647e" translate="yes" xml:space="preserve">
          <source>You also have the ability to pass the &lt;code&gt;minChunks&lt;/code&gt; property a function. This function is called by the &lt;code&gt;CommonsChunkPlugin&lt;/code&gt; and calls the function with &lt;code&gt;module&lt;/code&gt; and &lt;code&gt;count&lt;/code&gt; arguments.</source>
          <target state="translated">&lt;code&gt;minChunks&lt;/code&gt; 속성에 함수 를 전달할 수도 있습니다 . 이 함수는 &lt;code&gt;CommonsChunkPlugin&lt;/code&gt; 에 의해 호출되며 &lt;code&gt;module&lt;/code&gt; 및 &lt;code&gt;count&lt;/code&gt; 인수 와 함께 함수를 호출합니다 .</target>
        </trans-unit>
        <trans-unit id="8780dbb2bcb64c2cd9413c17145ff1cfe7f58a7e" translate="yes" xml:space="preserve">
          <source>You can also inline the worker as a BLOB with the &lt;code&gt;inline&lt;/code&gt; parameter</source>
          <target state="translated">&lt;code&gt;inline&lt;/code&gt; 매개 변수를 사용하여 작업자를 BLOB으로 인라인 할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="cd4349233181e0720f303ee495c8f6650f404dd3" translate="yes" xml:space="preserve">
          <source>You can also pass function to override default behavior and insert styles in your container, e.g</source>
          <target state="translated">기본 동작을 무시하고 컨테이너에 스타일을 삽입하는 함수를 전달할 수도 있습니다. 예 :</target>
        </trans-unit>
        <trans-unit id="761a52984c1b7fea199603367baae47da0358327" translate="yes" xml:space="preserve">
          <source>You can also pass options directly to [Node Sass][] or [Dart Sass][]:</source>
          <target state="translated">옵션을 [Node Sass] [] 또는 [Dart Sass] []에 직접 전달할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="041eb7668ce604823bb93f74d19e5870f189e246" translate="yes" xml:space="preserve">
          <source>You can also specify the absolute path to your custom &lt;code&gt;getLocalIdent&lt;/code&gt; function to generate classname based on a different schema. This requires &lt;code&gt;webpack &amp;gt;= 2.2.1&lt;/code&gt; (it supports functions in the &lt;code&gt;options&lt;/code&gt; object).</source>
          <target state="translated">다른 스키마를 기반으로 클래스 이름을 생성 하기 위해 사용자 정의 &lt;code&gt;getLocalIdent&lt;/code&gt; 함수 의 절대 경로를 지정할 수도 있습니다 . &lt;code&gt;webpack &amp;gt;= 2.2.1&lt;/code&gt; 이 필요합니다 ( &lt;code&gt;options&lt;/code&gt; 객체의 기능을 지원 합니다).</target>
        </trans-unit>
        <trans-unit id="d81bd4c9a456b16d9683dbcca85d3a7f655c8398" translate="yes" xml:space="preserve">
          <source>You can also speed up babel-loader by as much as 2x by using the &lt;code&gt;cacheDirectory&lt;/code&gt; option. This will cache transformations to the filesystem.</source>
          <target state="translated">&lt;code&gt;cacheDirectory&lt;/code&gt; 옵션 을 사용하여 babel-loader의 속도를 2 배까지 높일 수도 있습니다. 이것은 변환을 파일 시스템에 캐시합니다.</target>
        </trans-unit>
        <trans-unit id="bdf672d3d1b56fe885485c5286e800cac55a210d" translate="yes" xml:space="preserve">
          <source>You can also take a look at &lt;a href=&quot;https://github.com/jaketrent/html-webpack-template&quot;&gt;&lt;code&gt;html-webpack-template&lt;/code&gt;&lt;/a&gt; which provides a couple of extra features in addition to the default template.</source>
          <target state="translated">기본 템플릿 외에도 몇 가지 추가 기능을 제공하는 &lt;a href=&quot;https://github.com/jaketrent/html-webpack-template&quot;&gt; &lt;code&gt;html-webpack-template&lt;/code&gt; &lt;/a&gt; 을 살펴볼 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="f040ea81d8921273ccde3ba74d7118274a9c6a16" translate="yes" xml:space="preserve">
          <source>You can also use &lt;a href=&quot;https://github.com/babel/babel-loader&quot;&gt;babel-loader&lt;/a&gt; for webpack and include &lt;code&gt;minify&lt;/code&gt;&lt;a href=&quot;https://github.com/babel/minify#babel-preset&quot;&gt;as a preset&lt;/a&gt; and should be much faster than using this - as babel-minify will operate on smaller file sizes. But then, why does this plugin exist at all? -</source>
          <target state="translated">당신은 또한 사용할 수 있습니다 &lt;a href=&quot;https://github.com/babel/babel-loader&quot;&gt;바벨 로더를&lt;/a&gt; 웹팩과 포함 &lt;code&gt;minify&lt;/code&gt; &lt;a href=&quot;https://github.com/babel/minify#babel-preset&quot;&gt;사전 설정으로&lt;/a&gt; 훨씬 더 빠르게이를 사용하는 것보다해야 - 바벨 - 작게하다 작은 파일 크기에서 작동한다. 그런데 왜이 플러그인이 존재합니까? -</target>
        </trans-unit>
        <trans-unit id="617736dbb06e2cd8438887c3de0a15c79431e2f3" translate="yes" xml:space="preserve">
          <source>You can also use &lt;code&gt;chunkFilename&lt;/code&gt; to add hash values to the filename, since putting &lt;code&gt;[hash]&lt;/code&gt; in the bundle options parameter does not work correctly.</source>
          <target state="translated">번들 옵션 매개 변수 에 &lt;code&gt;[hash]&lt;/code&gt; 를 넣는 것이 올바르게 작동하지 않으므로 &lt;code&gt;chunkFilename&lt;/code&gt; 을 사용 하여 파일 이름에 해시 값을 추가 할 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="c09e6d58a25024dfb7321b1ce2655144f6ba3ed3" translate="yes" xml:space="preserve">
          <source>You can also use loaders through the CLI:</source>
          <target state="translated">CLI를 통해 로더를 사용할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="f02c51640dcbff4fab526c848361216560976627" translate="yes" xml:space="preserve">
          <source>You can also use the css-loader results directly as string, such as in Angular's component style.</source>
          <target state="translated">css-loader 결과를 Angular의 구성 요소 스타일과 같은 문자열로 직접 사용할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="c5fa58a1f470fbc9a3c3181fe1708557f60e11d1" translate="yes" xml:space="preserve">
          <source>You can also use the loader via:</source>
          <target state="translated">다음을 통해 로더를 사용할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="1e730148a496946a205ba9f1f83112cf0117cf5b" translate="yes" xml:space="preserve">
          <source>You can check further customization when including loaders in the &lt;a href=&quot;loaders&quot;&gt;loaders section&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;loaders&quot;&gt;로더 섹션에&lt;/a&gt; 로더를 포함시킬 때 추가 사용자 정의를 확인할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="81e1b23ffcecf3cccd1495b43a37853210c7fe63" translate="yes" xml:space="preserve">
          <source>You can combine this configuration with the &lt;a href=&quot;html-webpack-plugin&quot;&gt;HtmlWebpackPlugin&lt;/a&gt;. It will inject all the generated vendor chunks for you.</source>
          <target state="translated">이 구성을 &lt;a href=&quot;html-webpack-plugin&quot;&gt;HtmlWebpackPlugin&lt;/a&gt; 과 결합 할 수 있습니다 . 생성 된 모든 공급 업체 청크를 주입합니다.</target>
        </trans-unit>
        <trans-unit id="c65677943710e48b99e950158171b3819c14ca64" translate="yes" xml:space="preserve">
          <source>You can configure the generated ident with the &lt;code&gt;localIdentName&lt;/code&gt; query parameter. See &lt;a href=&quot;https://github.com/webpack/loader-utils#interpolatename&quot;&gt;loader-utils's documentation&lt;/a&gt; for more information on options.</source>
          <target state="translated">&lt;code&gt;localIdentName&lt;/code&gt; 쿼리 매개 변수를 사용하여 생성 된 ID를 구성 할 수 있습니다 . 옵션에 대한 자세한 내용 은 &lt;a href=&quot;https://github.com/webpack/loader-utils#interpolatename&quot;&gt;loader-utils의 설명서&lt;/a&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="ac56600c476e22d0da1a92f028132f8103ba01d0" translate="yes" xml:space="preserve">
          <source>You can configure this part of the process by specifying an &lt;code&gt;output&lt;/code&gt; field in your configuration:</source>
          <target state="translated">구성에서 &lt;code&gt;output&lt;/code&gt; 필드를 지정하여 프로세스의이 부분을 구성 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="37a7764535c2c96f4d8dd59ad1b7b7eb36730e2d" translate="yes" xml:space="preserve">
          <source>You can create your own context with the &lt;code&gt;require.context()&lt;/code&gt; function.</source>
          <target state="translated">&lt;code&gt;require.context()&lt;/code&gt; 함수로 자신 만의 컨텍스트를 만들 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="e84d58c60bb79fb0adbd43498e63742408e0e983" translate="yes" xml:space="preserve">
          <source>You can even add your &lt;code&gt;index.html&lt;/code&gt; as &lt;code&gt;entry&lt;/code&gt; and just reference your stylesheets from there. You just need to tell the html-loader to also pick up &lt;code&gt;link:href&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;index.html&lt;/code&gt; 을 &lt;code&gt;entry&lt;/code&gt; 으로 추가 하고 스타일 시트를 참조 할 수도 있습니다 . html-loader에게 &lt;code&gt;link:href&lt;/code&gt; 도 선택하도록 지시하면됩니다 .</target>
        </trans-unit>
        <trans-unit id="9222f57573caa95f98daa813595d8eeea95b2e0c" translate="yes" xml:space="preserve">
          <source>You can expose the library in the following ways:</source>
          <target state="translated">다음과 같은 방법으로 라이브러리를 노출 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="81d8b9ac87016044b7fcf31fda306fb4f151e86b" translate="yes" xml:space="preserve">
          <source>You can imagine your application as a tree. The source code and libraries you actually use represent the green, living leaves of the tree. Dead code represents the brown, dead leaves of the tree that are consumed by autumn. In order to get rid of the dead leaves, you have to shake the tree, causing them to fall.</source>
          <target state="translated">응용 프로그램을 트리로 상상할 수 있습니다. 실제로 사용하는 소스 코드와 라이브러리는 녹색의 살아있는 잎을 나타냅니다. 죽은 코드는 가을에 소비되는 나무의 갈색, 죽은 잎을 나타냅니다. 죽은 나뭇잎을 제거하려면 나무를 흔들어 떨어 뜨려야합니다.</target>
        </trans-unit>
        <trans-unit id="e3dcd2790a0eae44bfbe2be4ea325c06a42bb0e6" translate="yes" xml:space="preserve">
          <source>You can instead require the babel runtime as a separate module to avoid the duplication.</source>
          <target state="translated">대신 중복을 피하기 위해 babel 런타임을 별도의 모듈로 요구할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="9c3dc7f422b914ae1bd7eebc909a39372a9344da" translate="yes" xml:space="preserve">
          <source>You can instruct webpack to &quot;watch&quot; all files within your dependency graph for changes. If one of these files is updated, the code will be recompiled so you don't have to run the full build manually.</source>
          <target state="translated">변경 사항에 대한 종속성 그래프 내의 모든 파일을 &quot;감시&quot;하도록 webpack에 지시 할 수 있습니다. 이러한 파일 중 하나가 업데이트되면 코드가 다시 컴파일되므로 전체 빌드를 수동으로 실행할 필요가 없습니다.</target>
        </trans-unit>
        <trans-unit id="b1a26c63c168e909835bb6c8a229e8e0c0ebd9cf" translate="yes" xml:space="preserve">
          <source>You can manually specify the path to search for your config (&lt;code&gt;postcss.config.js&lt;/code&gt;) with the &lt;code&gt;config.path&lt;/code&gt; option. This is needed if you store your config in a separate e.g &lt;code&gt;./config || ./.config&lt;/code&gt; folder.</source>
          <target state="translated">&lt;code&gt;config.path&lt;/code&gt; 옵션 을 사용하여 구성을 검색 할 경로 ( &lt;code&gt;postcss.config.js&lt;/code&gt; )를 수동으로 지정할 수 있습니다 . 구성을 별도의 &lt;code&gt;./config || ./.config&lt;/code&gt; 에 저장하는 경우 필요합니다 ./config || ./.config 폴더.</target>
        </trans-unit>
        <trans-unit id="27129a62dfd905198fe6dba3dc207525e02dbcf5" translate="yes" xml:space="preserve">
          <source>You can override this property by passing your own function in:</source>
          <target state="translated">다음에 자신의 함수를 전달하여이 속성을 재정의 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="4abdad2c7b1098707f173e274bbc6d2550aa3940" translate="yes" xml:space="preserve">
          <source>You can pass &lt;a href=&quot;http://eslint.org/docs/developer-guide/nodejs-api#cliengine&quot;&gt;eslint options&lt;/a&gt; using standard webpack &lt;a href=&quot;../configuration/module#useentry&quot;&gt;loader options&lt;/a&gt;.</source>
          <target state="translated">표준 웹팩 &lt;a href=&quot;../configuration/module#useentry&quot;&gt;로더 옵션 &lt;/a&gt;&lt;a href=&quot;http://eslint.org/docs/developer-guide/nodejs-api#cliengine&quot;&gt;을&lt;/a&gt; 사용하여 eslint 옵션 을 전달할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="0e88b65dc47b88deac8cb49f88b3467dc69ea19e" translate="yes" xml:space="preserve">
          <source>You can pass a &lt;code&gt;cache&lt;/code&gt; object, where the modules are cached. Otherwise one is created per plugin instance.</source>
          <target state="translated">모듈이 캐시되는 &lt;code&gt;cache&lt;/code&gt; 개체를 전달할 수 있습니다 . 그렇지 않으면 플러그인 인스턴스 당 하나가 작성됩니다.</target>
        </trans-unit>
        <trans-unit id="aef4ad3023e402beb004c1702b78a0c56e0f6940" translate="yes" xml:space="preserve">
          <source>You can pass any Less specific options to the &lt;code&gt;less-loader&lt;/code&gt; via &lt;a href=&quot;../configuration/module#rule-options-rule-query&quot;&gt;loader options&lt;/a&gt;. See the &lt;a href=&quot;http://lesscss.org/usage/#command-line-usage-options&quot;&gt;Less documentation&lt;/a&gt; for all available options in dash-case. Since we're passing these options to Less programmatically, you need to pass them in camelCase here:</source>
          <target state="translated">&lt;a href=&quot;../configuration/module#rule-options-rule-query&quot;&gt;로더 옵션을&lt;/a&gt; 통해 덜 구체적인 옵션을 &lt;code&gt;less-loader&lt;/code&gt; 전달할 수 있습니다 . 사용 가능한 모든 옵션을 대소 문자로 표시 하려면 &lt;a href=&quot;http://lesscss.org/usage/#command-line-usage-options&quot;&gt;Less documentation&lt;/a&gt; 을 참조하십시오 . 이 옵션을 프로그래밍 방식으로 Less에 전달하고 있으므로 camelCase로 전달해야합니다.</target>
        </trans-unit>
        <trans-unit id="3b06afa23c1de47c44c56545299129b3b6430146" translate="yes" xml:space="preserve">
          <source>You can pass options to the loader by using the &lt;a href=&quot;../configuration/module#rule-options-rule-query&quot;&gt;options property&lt;/a&gt;:</source>
          <target state="translated">&lt;a href=&quot;../configuration/module#rule-options-rule-query&quot;&gt;options 속성&lt;/a&gt; 을 사용하여 옵션을 로더에 전달할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="8225b533fd04bef42ded925304519aad496b8786" translate="yes" xml:space="preserve">
          <source>You can prevent all these messages from showing, by using this option:</source>
          <target state="translated">이 옵션을 사용하여 이러한 모든 메시지가 표시되지 않도록 할 수 있습니다.</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
