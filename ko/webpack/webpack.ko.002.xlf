<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="webpack">
    <body>
      <group id="webpack">
        <trans-unit id="9c1ce282683fce7bb8c48ec88a9223e36f3e7a42" translate="yes" xml:space="preserve">
          <source>Async loading</source>
          <target state="translated">비동기 로딩</target>
        </trans-unit>
        <trans-unit id="256755156b47b213221f1a23ad8abb54f3a53985" translate="yes" xml:space="preserve">
          <source>Asynchronous Loaders</source>
          <target state="translated">비동기 로더</target>
        </trans-unit>
        <trans-unit id="b513c2cb40cb46c8be4a58fd1b68c9ae22d44bd8" translate="yes" xml:space="preserve">
          <source>Asynchronous Module Definition</source>
          <target state="translated">비동기 모듈 정의</target>
        </trans-unit>
        <trans-unit id="e3ceaf6cd3b4efd2c02f268aa98321ba6d6764bc" translate="yes" xml:space="preserve">
          <source>Asynchronous Module Definition (AMD) is a JavaScript specification that defines an interface for writing and loading modules. The following AMD methods are supported by webpack:</source>
          <target state="translated">비동기 모듈 정의 (AMD)는 모듈을 작성하고로드하기위한 인터페이스를 정의하는 JavaScript 사양입니다. 다음과 같은 AMD 방법이 웹팩에서 지원됩니다.</target>
        </trans-unit>
        <trans-unit id="355609822cd991b261e9f87c0a921684c0bf5d58" translate="yes" xml:space="preserve">
          <source>At a high level, &lt;strong&gt;loaders&lt;/strong&gt; have two properties in your webpack configuration:</source>
          <target state="translated">높은 수준의 &lt;strong&gt;로더&lt;/strong&gt; 는 웹팩 구성에 두 가지 특성이 있습니다.</target>
        </trans-unit>
        <trans-unit id="0bf38b80d843db75526ba6513ee39a89e444bffa" translate="yes" xml:space="preserve">
          <source>At its core, &lt;strong&gt;webpack&lt;/strong&gt; is a &lt;em&gt;static module bundler&lt;/em&gt; for modern JavaScript applications. When webpack processes your application, it internally builds a &lt;em&gt;dependency graph&lt;/em&gt; which maps every module your project needs and generates one or more &lt;em&gt;bundles&lt;/em&gt;.</source>
          <target state="translated">핵심적으로 &lt;strong&gt;webpack&lt;/strong&gt; 은 최신 JavaScript 응용 프로그램을위한 &lt;em&gt;정적 모듈 번 &lt;/em&gt;&lt;strong&gt;들러&lt;/strong&gt; 입니다 . 웹팩은 애플리케이션을 처리 할 때 프로젝트에 필요한 모든 모듈을 매핑하고 하나 이상의 &lt;em&gt;번들을&lt;/em&gt; 생성 하는 &lt;em&gt;종속성 그래프&lt;/em&gt; 를 내부적으로 빌드합니다.&lt;em&gt;&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="5967cde5d313643d89aba86fac277df19fade726" translate="yes" xml:space="preserve">
          <source>Authoring Libraries</source>
          <target state="translated">제작 라이브러리</target>
        </trans-unit>
        <trans-unit id="e275fdd84f813df47721bdb4af16f3be22fa912d" translate="yes" xml:space="preserve">
          <source>Authoring a Library</source>
          <target state="translated">라이브러리 작성</target>
        </trans-unit>
        <trans-unit id="872519df27b7f474838a2de064504ec253d0766d" translate="yes" xml:space="preserve">
          <source>Auto-install missing dependencies during development</source>
          <target state="translated">개발 중 누락 된 종속성 자동 설치</target>
        </trans-unit>
        <trans-unit id="700b001013b18cc91376d35fdeb0a4dcf4351d33" translate="yes" xml:space="preserve">
          <source>Automatic and explicit loaders and params up to the name of the first loader</source>
          <target state="translated">첫 번째 로더 이름까지 자동 및 명시 적 로더 및 매개 변수</target>
        </trans-unit>
        <trans-unit id="edd617309d56e34ddaee3650f46adb6add6fe476" translate="yes" xml:space="preserve">
          <source>AutomaticPrefetchPlugin</source>
          <target state="translated">AutomaticPrefetchPlugin</target>
        </trans-unit>
        <trans-unit id="edba83607c98ffa4a857d0755f4fdb5ca0012bb9" translate="yes" xml:space="preserve">
          <source>Automatically load modules instead of having to &lt;code&gt;import&lt;/code&gt; or &lt;code&gt;require&lt;/code&gt; them everywhere.</source>
          <target state="translated">&lt;code&gt;import&lt;/code&gt; 오거나 &lt;code&gt;require&lt;/code&gt; 하지 않고 자동으로 모듈로드어디서나 .</target>
        </trans-unit>
        <trans-unit id="393c1fe52a83083dd8d731e476ee7e8a32a575d7" translate="yes" xml:space="preserve">
          <source>Automatically resolve certain extensions. This defaults to:</source>
          <target state="translated">특정 확장명을 자동으로 해결합니다. 기본값은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="f28386f4f572bf1ea0d0d64767d5be40e0d2d827" translate="yes" xml:space="preserve">
          <source>Avoid &lt;code&gt;inline-***&lt;/code&gt; and &lt;code&gt;eval-***&lt;/code&gt; use in production as they can increase bundle size and reduce the overall performance.</source>
          <target state="translated">번들 크기를 늘리고 전체 성능을 저하시킬 수 있으므로 프로덕션에서 &lt;code&gt;inline-***&lt;/code&gt; 및 &lt;code&gt;eval-***&lt;/code&gt; 사용을 피하십시오 .</target>
        </trans-unit>
        <trans-unit id="4d9a8515bcc5bd8f608f25a7c98f070fb3983317" translate="yes" xml:space="preserve">
          <source>Avoid Extra Optimization Steps</source>
          <target state="translated">추가 최적화 단계를 피하십시오</target>
        </trans-unit>
        <trans-unit id="0a2e1880b2545aae1b10456c9052d8a573546a5f" translate="yes" xml:space="preserve">
          <source>Avoid Production Specific Tooling</source>
          <target state="translated">생산 별 툴링 피하기</target>
        </trans-unit>
        <trans-unit id="0ad961b259a0254bc5b2251b3c70c318d0409c1f" translate="yes" xml:space="preserve">
          <source>Avoid using these options as they are &lt;strong&gt;deprecated&lt;/strong&gt; and will soon be removed.</source>
          <target state="translated">이 옵션은 &lt;strong&gt;더 이상 사용되지 않으며&lt;/strong&gt; 곧 제거 될 예정 이므로 사용하지 마십시오 .</target>
        </trans-unit>
        <trans-unit id="42d01158bb88bd3a5711c54c4c55ac555ed9e86c" translate="yes" xml:space="preserve">
          <source>Avoid using this option as it is &lt;strong&gt;deprecated&lt;/strong&gt; and will soon be removed.</source>
          <target state="translated">이 옵션은 &lt;strong&gt;더 이상 사용되지 않으며&lt;/strong&gt; 곧 제거 될 예정 이므로 &lt;strong&gt;사용&lt;/strong&gt; 하지 마십시오 .</target>
        </trans-unit>
        <trans-unit id="f3bf8dee016caf43ae3970fbea5f976d54898ed9" translate="yes" xml:space="preserve">
          <source>Babel</source>
          <target state="translated">Babel</target>
        </trans-unit>
        <trans-unit id="5b478ad9bea66e33f8806fe711651bc27ba1a766" translate="yes" xml:space="preserve">
          <source>Babel and JSX</source>
          <target state="translated">바벨과 JSX</target>
        </trans-unit>
        <trans-unit id="ee81f2864adad3a5a2b97e6eb80a72781cfb196b" translate="yes" xml:space="preserve">
          <source>BabelMinifyWebpackPlugin</source>
          <target state="translated">BabelMinifyWebpackPlugin</target>
        </trans-unit>
        <trans-unit id="31606e55fcdfff742f333464058778f924d6caaf" translate="yes" xml:space="preserve">
          <source>BannerPlugin</source>
          <target state="translated">BannerPlugin</target>
        </trans-unit>
        <trans-unit id="1693255137e306c6fc37382f7e13919926f5e27e" translate="yes" xml:space="preserve">
          <source>Base Configuration</source>
          <target state="translated">기본 구성</target>
        </trans-unit>
        <trans-unit id="dac6b24f78471a132bc9a7ec7774530351b54fb0" translate="yes" xml:space="preserve">
          <source>Basic Example</source>
          <target state="translated">기본 예</target>
        </trans-unit>
        <trans-unit id="27c201541e9702b97c568e12cac1d3cd5245954c" translate="yes" xml:space="preserve">
          <source>Basic Setup</source>
          <target state="translated">기본 설정</target>
        </trans-unit>
        <trans-unit id="b20cbc384159fd820ed034fd3615298ec09f5902" translate="yes" xml:space="preserve">
          <source>Basic Usage</source>
          <target state="translated">기본 사용법</target>
        </trans-unit>
        <trans-unit id="66434b09cff80cd56df08ac98d63f8cf507d34a2" translate="yes" xml:space="preserve">
          <source>Basic Use Case</source>
          <target state="translated">기본 사용 사례</target>
        </trans-unit>
        <trans-unit id="67d0377c9b7724fe212d1da75f2843ecaabdb145" translate="yes" xml:space="preserve">
          <source>Be aware of the performance differences of the different &lt;code&gt;devtool&lt;/code&gt; settings.</source>
          <target state="translated">다른 &lt;code&gt;devtool&lt;/code&gt; 설정 의 성능 차이에 유의하십시오 .</target>
        </trans-unit>
        <trans-unit id="49c7f9b7366eda8a24ccd7fe6b0dadf7e181c418" translate="yes" xml:space="preserve">
          <source>Be aware that if &lt;code&gt;MyLibrary&lt;/code&gt; isn't defined earlier your library will be set in global scope.</source>
          <target state="translated">&lt;code&gt;MyLibrary&lt;/code&gt; 인 경우 이전에 정의되지 않은 라이브러리는 전역 범위에서 설정됩니다.</target>
        </trans-unit>
        <trans-unit id="64490bb96bb85507b6b0bdf1653ed21abd927a7a" translate="yes" xml:space="preserve">
          <source>Be aware that if you use ES6 module imports in your entry file the &lt;code&gt;__webpack_public_path__&lt;/code&gt; assignment will be done after the imports. In such cases, you'll have to move the public path assignment to its own dedicated module and then import it on top of your entry.js:</source>
          <target state="translated">입력 파일에서 ES6 모듈 가져 오기를 사용하는 경우 가져 오기 후에 &lt;code&gt;__webpack_public_path__&lt;/code&gt; 할당이 수행됩니다. 이 경우 공개 경로 할당을 전용 모듈로 옮긴 다음 entry.js 위에 가져와야합니다.</target>
        </trans-unit>
        <trans-unit id="a1cce8abc11175aa5de9add096d1e9aa89f4ed20" translate="yes" xml:space="preserve">
          <source>Be aware that when &lt;a href=&quot;configuration-types#exporting-multiple-configurations&quot;&gt;exporting multiple configurations&lt;/a&gt; only the &lt;code&gt;devServer&lt;/code&gt; options for the first configuration will be taken into account and used for all the configurations in the array.</source>
          <target state="translated">&lt;a href=&quot;configuration-types#exporting-multiple-configurations&quot;&gt;여러 구성을 내보낼&lt;/a&gt; 때는 첫 번째 구성에 대한 &lt;code&gt;devServer&lt;/code&gt; 옵션 만 고려하여 어레이의 모든 구성에 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="bf8b36e3f2bb96029493af5379ceb61ba054f795" translate="yes" xml:space="preserve">
          <source>Be careful! The resource is the &lt;em&gt;resolved&lt;/em&gt; path of the file, which means symlinked resources are the real path &lt;em&gt;not&lt;/em&gt; the symlink location. This is good to remember when using tools that symlink packages (like &lt;code&gt;npm link&lt;/code&gt;), common conditions like &lt;code&gt;/node_modules/&lt;/code&gt; may inadvertently miss symlinked files. Note that you can turn off symlink resolving (so that resources are resolved to the symlink path) via &lt;a href=&quot;resolve#resolve-symlinks&quot;&gt;&lt;code&gt;resolve.symlinks&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">조심해! 리소스는 파일 의 &lt;em&gt;확인 된&lt;/em&gt; 경로이므로 심볼릭 링크 된 리소스는 심볼릭 링크 위치가 &lt;em&gt;아닌&lt;/em&gt; 실제 경로 입니다. 이는 &lt;code&gt;npm link&lt;/code&gt; 와 같은 패키지를 심볼릭 링크하는 도구를 사용할 때 &lt;code&gt;/node_modules/&lt;/code&gt; 와 같은 일반적인 조건 이 심볼릭 링크 된 파일을 실수로 놓칠 수 있음을 기억하는 것이 좋습니다 . &lt;a href=&quot;resolve#resolve-symlinks&quot;&gt; &lt;code&gt;resolve.symlinks&lt;/code&gt; &lt;/a&gt; 를 통해 심볼릭 링크 해결 (자원이 심볼릭 링크 경로로 분석되도록)을 해제 할 수 있습니다. .</target>
        </trans-unit>
        <trans-unit id="8323e585bf6abf466094a1c8f4375995ea8fccd5" translate="yes" xml:space="preserve">
          <source>Bear in mind that when you define &lt;code&gt;configFile&lt;/code&gt;, &lt;code&gt;eslint&lt;/code&gt; doesn't automatically look for &lt;code&gt;.eslintrc&lt;/code&gt; files in the directory of the file to be linted. More information is available in official eslint documentation in section &lt;a href=&quot;http://eslint.org/docs/user-guide/configuring#using-configuration-files&quot;&gt;&lt;em&gt;Using Configuration Files&lt;/em&gt;&lt;/a&gt;. See &lt;a href=&quot;https://github.com/webpack-contrib/eslint-loader/issues/129&quot;&gt;#129&lt;/a&gt;.</source>
          <target state="translated">당신이 정의 할 때 명심 &lt;code&gt;configFile&lt;/code&gt; , &lt;code&gt;eslint&lt;/code&gt; 이 자동으로 찾지 않는 &lt;code&gt;.eslintrc&lt;/code&gt; 파일의 디렉토리에있는 파일은 linted합니다. 자세한 내용은 공식 eslint 설명서에서 &lt;a href=&quot;http://eslint.org/docs/user-guide/configuring#using-configuration-files&quot;&gt;&lt;em&gt;구성 파일 사용&lt;/em&gt;&lt;/a&gt; 섹션을 참조하십시오 . &lt;a href=&quot;https://github.com/webpack-contrib/eslint-loader/issues/129&quot;&gt;# 129&lt;/a&gt; 참조 .</target>
        </trans-unit>
        <trans-unit id="b8c835ecb895d167e27e8fef4a309459803e0e27" translate="yes" xml:space="preserve">
          <source>Because JavaScript can be written for both server and browser, webpack offers multiple deployment &lt;em&gt;targets&lt;/em&gt; that you can set in your webpack &lt;a href=&quot;https://webpack.js.org/configuration&quot;&gt;configuration&lt;/a&gt;.</source>
          <target state="translated">JavaScript는 서버와 브라우저 모두에 대해 작성 될 수 있으므로 웹팩은 웹팩 &lt;a href=&quot;https://webpack.js.org/configuration&quot;&gt;구성&lt;/a&gt; 에서 설정할 수있는 여러 배치 &lt;em&gt;대상&lt;/em&gt; 을 제공 합니다 .</target>
        </trans-unit>
        <trans-unit id="13fbfc61a9113110e07178279544789c4551bcc9" translate="yes" xml:space="preserve">
          <source>Because it's a standard Node.js CommonJS module, you &lt;strong&gt;can do the following&lt;/strong&gt;:</source>
          <target state="translated">표준 Node.js CommonJS 모듈이므로 다음 &lt;strong&gt;을 수행&lt;/strong&gt; 할 &lt;strong&gt;수 있습니다&lt;/strong&gt; .</target>
        </trans-unit>
        <trans-unit id="163e2075051ff4a436910011b3bfdd2afd416898" translate="yes" xml:space="preserve">
          <source>Because this happens after resolving every file in the dll bundle, the same paths must be available for the consumer of the dll bundle. i.e. if the dll contains &lt;code&gt;lodash&lt;/code&gt; and the file &lt;code&gt;abc&lt;/code&gt;, &lt;code&gt;require(&quot;lodash&quot;)&lt;/code&gt; and &lt;code&gt;require(&quot;./abc&quot;)&lt;/code&gt; will be used from the dll, rather than building them into the main bundle.</source>
          <target state="translated">이는 dll 번들의 모든 파일을 분석 한 후에 발생하므로 dll 번들 소비자에 대해 동일한 경로를 사용할 수 있어야합니다. DLL이 포함 즉 경우 &lt;code&gt;lodash&lt;/code&gt; 및 파일 &lt;code&gt;abc&lt;/code&gt; , &lt;code&gt;require(&quot;lodash&quot;)&lt;/code&gt; 하고 &lt;code&gt;require(&quot;./abc&quot;)&lt;/code&gt; 하지 않고 기본 번들로를 구축하는 것보다, DLL에서 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="be07ac447221892056e2d025e30a823d8ac53bb1" translate="yes" xml:space="preserve">
          <source>Because webpack expects absolute paths for many config options such as &lt;code&gt;__dirname + &quot;/app/folder&quot;&lt;/code&gt; the Windows &lt;code&gt;\&lt;/code&gt; path separator can break some functionality.</source>
          <target state="translated">webpack은 &lt;code&gt;__dirname + &quot;/app/folder&quot;&lt;/code&gt; 와 같은 많은 구성 옵션에 대한 절대 경로를 예상 하므로 Windows &lt;code&gt;\&lt;/code&gt; 경로 구분 기호는 일부 기능을 중단 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="6e44f654bf86561fd2e81fa4117d80c136d6849d" translate="yes" xml:space="preserve">
          <source>Before creating the chunk assets.</source>
          <target state="translated">청크 자산을 만들기 전에.</target>
        </trans-unit>
        <trans-unit id="bd745d8f127cf5570b5afe5d7a39b05e9f604b39" translate="yes" xml:space="preserve">
          <source>Before emitting assets to output dir</source>
          <target state="translated">dir을 출력하기 위해 자산을 방출하기 전에</target>
        </trans-unit>
        <trans-unit id="713480d8e3af90f2f73563649847aa62ee1f6022" translate="yes" xml:space="preserve">
          <source>Before reading on, make sure you at least skim through the &lt;a href=&quot;https://github.com/webpack/enhanced-resolve&quot;&gt;&lt;code&gt;enhanced-resolve&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;plugins#tapable&quot;&gt;&lt;code&gt;tapable&lt;/code&gt;&lt;/a&gt; documentation.</source>
          <target state="translated">계속 읽기 전에 적어도 &lt;a href=&quot;https://github.com/webpack/enhanced-resolve&quot;&gt; &lt;code&gt;enhanced-resolve&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;plugins#tapable&quot;&gt; &lt;code&gt;tapable&lt;/code&gt; &lt;/a&gt; 문서를 살펴보십시오 .</target>
        </trans-unit>
        <trans-unit id="5a6e6a920ad81484ce1cba3cab87e78c5ec299ac" translate="yes" xml:space="preserve">
          <source>Before the compilation is hashed.</source>
          <target state="translated">컴파일이 해시되기 전에.</target>
        </trans-unit>
        <trans-unit id="c25fd7fe8f4304734ea1be8350051a07c7845da8" translate="yes" xml:space="preserve">
          <source>Before we begin, make sure you have a fresh version of &lt;a href=&quot;https://nodejs.org/en/&quot;&gt;Node.js&lt;/a&gt; installed. The current Long Term Support (LTS) release is an ideal starting point. You may run into a variety of issues with the older versions as they may be missing functionality webpack and/or its related packages require.</source>
          <target state="translated">시작하기 전에 최신 버전의 &lt;a href=&quot;https://nodejs.org/en/&quot;&gt;Node.js가&lt;/a&gt; 설치되어 있는지 확인하십시오 . 현재 장기 지원 (LTS) 릴리스는 이상적인 시작점입니다. 웹 버전 및 / 또는 관련 패키지에 필요한 기능이 없을 수 있으므로 이전 버전과 관련하여 다양한 문제가 발생할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2ad6717bd794ace64523110ab6d5091da7c7d70f" translate="yes" xml:space="preserve">
          <source>Before we do a build, you should know that the &lt;code&gt;HtmlWebpackPlugin&lt;/code&gt; by default will generate its own &lt;code&gt;index.html&lt;/code&gt; file, even though we already have one in the &lt;code&gt;dist/&lt;/code&gt; folder. This means that it will replace our &lt;code&gt;index.html&lt;/code&gt; file with a newly generated one. Let's see what happens when we do an &lt;code&gt;npm run build&lt;/code&gt;:</source>
          <target state="translated">빌드하기 전에 &lt;code&gt;HtmlWebpackPlugin&lt;/code&gt; 이 &lt;code&gt;dist/&lt;/code&gt; 폴더 에 이미있는 경우에도 기본적으로 자체 &lt;code&gt;index.html&lt;/code&gt; 파일을 생성 한다는 것을 알아야 합니다. 즉, &lt;code&gt;index.html&lt;/code&gt; 파일이 새로 생성 된 파일로 대체됩니다 . &lt;code&gt;npm run build&lt;/code&gt; 수행 할 때 어떤 일이 발생하는지 봅시다 :</target>
        </trans-unit>
        <trans-unit id="418502eaf1784acc2d84d1963ab1673f09389d19" translate="yes" xml:space="preserve">
          <source>Before we start, let's remove the extra &lt;a href=&quot;../concepts/entry-points&quot;&gt;&lt;code&gt;entry&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../plugins/split-chunks-plugin&quot;&gt;&lt;code&gt;optimization.splitChunks&lt;/code&gt;&lt;/a&gt; from our config as they won't be needed for this next demonstration:</source>
          <target state="translated">시작하기 전에 다음 데모에서는 필요하지 않으므로 추가 &lt;a href=&quot;../concepts/entry-points&quot;&gt; &lt;code&gt;entry&lt;/code&gt; &lt;/a&gt; 과 &lt;a href=&quot;../plugins/split-chunks-plugin&quot;&gt; &lt;code&gt;optimization.splitChunks&lt;/code&gt; &lt;/a&gt; 를 구성에서 제거해 보겠습니다 .</target>
        </trans-unit>
        <trans-unit id="bf5906f504106e7ba0f99611e8498a8761611955" translate="yes" xml:space="preserve">
          <source>Behind the scenes, webpack actually &quot;transpiles&quot; the code so that older browsers can also run it. If you inspect &lt;code&gt;dist/main.js&lt;/code&gt;, you might be able to see how webpack does this, it's quite ingenious! Besides &lt;code&gt;import&lt;/code&gt; and &lt;code&gt;export&lt;/code&gt;, webpack supports various other module syntaxes as well, see &lt;a href=&quot;../api/module-methods&quot;&gt;Module API&lt;/a&gt; for more information.</source>
          <target state="translated">배후에서, 웹팩은 실제로 코드를 &quot;변환&quot;하여 오래된 브라우저에서도 실행할 수 있습니다. &lt;code&gt;dist/main.js&lt;/code&gt; 를 검사 하면 webpack이 어떻게 작동하는지 확인할 수 있습니다. 매우 독창적입니다! &lt;code&gt;import&lt;/code&gt; 및 &lt;code&gt;export&lt;/code&gt; 외에도 웹팩은 다양한 다른 모듈 구문도 지원합니다 . 자세한 정보는 &lt;a href=&quot;../api/module-methods&quot;&gt;모듈 API&lt;/a&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="a3532395da1be4cd651e9d3b4bc3020261b897c5" translate="yes" xml:space="preserve">
          <source>Being able to access the library inside Node.js.</source>
          <target state="translated">Node.js 내의 라이브러리에 액세스 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d6150e965a5ba4316e49bf83393097e5bc66ed38" translate="yes" xml:space="preserve">
          <source>Below is a list of entry configurations and their real-world use cases:</source>
          <target state="translated">다음은 항목 구성 및 실제 사용 사례 목록입니다.</target>
        </trans-unit>
        <trans-unit id="e2e975ebebd905ac031f4cd4219760e155ad10c3" translate="yes" xml:space="preserve">
          <source>Besides exporting a single config object, there are a few more ways that cover other needs as well.</source>
          <target state="translated">단일 구성 개체를 내보내는 것 외에도 다른 요구를 충족시키는 몇 가지 방법이 더 있습니다.</target>
        </trans-unit>
        <trans-unit id="a8c6bf285c1c3179f37b321b8da384b10b730e54" translate="yes" xml:space="preserve">
          <source>Bind an extension to a loader</source>
          <target state="translated">로더에 확장을 바인딩</target>
        </trans-unit>
        <trans-unit id="ceb73b5b9ef4ca69fd19033081bd06621f921946" translate="yes" xml:space="preserve">
          <source>Bind an extension to a post loader</source>
          <target state="translated">포스트 로더에 확장 기능 바인딩</target>
        </trans-unit>
        <trans-unit id="db5099d6f17256a1483c579f1dd632a678e50158" translate="yes" xml:space="preserve">
          <source>Bind an extension to a pre loader</source>
          <target state="translated">프리 로더에 익스텐션 바인딩</target>
        </trans-unit>
        <trans-unit id="8c91060c43bf62804b60107e165aa7afa7cd2914" translate="yes" xml:space="preserve">
          <source>Bleeding Edge</source>
          <target state="translated">최첨단</target>
        </trans-unit>
        <trans-unit id="cdb4a5969daa00f0cbae64436064b367ee6b5fd9" translate="yes" xml:space="preserve">
          <source>Boostrapping Your Application</source>
          <target state="translated">응용 프로그램 강화</target>
        </trans-unit>
        <trans-unit id="89ec4ec2bf400e823f3ca49d0cb938b0fedd7bab" translate="yes" xml:space="preserve">
          <source>Bootstrap</source>
          <target state="translated">Bootstrap</target>
        </trans-unit>
        <trans-unit id="93a13a7455862a7b6be4896354f79623810c4c86" translate="yes" xml:space="preserve">
          <source>Both &lt;a href=&quot;https://github.com/adrianhall/stylelint-loader&quot;&gt;&lt;code&gt;stylelint-loader&lt;/code&gt;&lt;/a&gt; and this module have their uses. &lt;code&gt;stylelint-loader&lt;/code&gt; lints the files you &lt;code&gt;require&lt;/code&gt; (or the ones you define as an &lt;code&gt;entry&lt;/code&gt; in your &lt;code&gt;webpack&lt;/code&gt; config). However, &lt;code&gt;@imports&lt;/code&gt; in files are not followed, meaning only the main file for each &lt;code&gt;require/entry&lt;/code&gt; is linted.</source>
          <target state="translated">두 &lt;a href=&quot;https://github.com/adrianhall/stylelint-loader&quot;&gt; &lt;code&gt;stylelint-loader&lt;/code&gt; &lt;/a&gt; 와이 모듈은 용도가있다. &lt;code&gt;stylelint-loader&lt;/code&gt; 는 &lt;code&gt;require&lt;/code&gt; 파일 (또는 &lt;code&gt;webpack&lt;/code&gt; 구성 에서 &lt;code&gt;entry&lt;/code&gt; 으로 정의한 파일)을 보푸라기합니다 . 그러나 파일의 &lt;code&gt;@imports&lt;/code&gt; 는 따르지 않으므로 각 &lt;code&gt;require/entry&lt;/code&gt; 의 기본 파일 만 보풀이됩니다.</target>
        </trans-unit>
        <trans-unit id="aac7378f1efd1829430797b0495fda2b1605e7e6" translate="yes" xml:space="preserve">
          <source>Browser Compatibility</source>
          <target state="translated">브라우저 호환성</target>
        </trans-unit>
        <trans-unit id="dd6cf7fe35fcfa4d1e8058c6b69b251c2fd078d9" translate="yes" xml:space="preserve">
          <source>Browser support is different.</source>
          <target state="translated">브라우저 지원이 다릅니다.</target>
        </trans-unit>
        <trans-unit id="69d8e5756047cb8878ca80bc9dd20cbe1df71ada" translate="yes" xml:space="preserve">
          <source>Build Performance</source>
          <target state="translated">성능 구축</target>
        </trans-unit>
        <trans-unit id="3b73f1435e147f0aede784f96558ac1b404bf3b9" translate="yes" xml:space="preserve">
          <source>Building Eval Source Maps</source>
          <target state="translated">평가판 소스 맵 작성</target>
        </trans-unit>
        <trans-unit id="b2e1660ccfec7f64296b6c5bbd2b584f0d6b0acb" translate="yes" xml:space="preserve">
          <source>Building Source Maps</source>
          <target state="translated">빌딩 소스 맵</target>
        </trans-unit>
        <trans-unit id="6730a35fb8bc77ceabda07b56124313531396e39" translate="yes" xml:space="preserve">
          <source>Bundle Analysis</source>
          <target state="translated">번들 분석</target>
        </trans-unit>
        <trans-unit id="e607c6d9fc658e5acdccba31af068a67299e9be2" translate="yes" xml:space="preserve">
          <source>Bundle loader for webpack</source>
          <target state="translated">웹 팩용 번들 로더</target>
        </trans-unit>
        <trans-unit id="184f61d1e928fe4d87f6ec1379d7b44b2a01bc47" translate="yes" xml:space="preserve">
          <source>Bundlers help you get your JavaScript and stylesheets ready for deployment, transforming them into a format that's suitable for the browser. For example, JavaScript can be &lt;a href=&quot;../plugins/uglifyjs-webpack-plugin&quot;&gt;minified&lt;/a&gt; or &lt;a href=&quot;code-splitting&quot;&gt;split into chunks&lt;/a&gt; and &lt;a href=&quot;lazy-loading&quot;&gt;lazy-loaded&lt;/a&gt; to improve performance. Bundling is one of the most important challenges in web development, and solving it well can remove a lot of pain from the process.</source>
          <target state="translated">Bundlers를 사용하면 JavaScript 및 스타일 시트를 배치 할 준비가되어 브라우저에 적합한 형식으로 변환 할 수 있습니다. 예를 들어, 자바 스크립트가 될 수있다 &lt;a href=&quot;../plugins/uglifyjs-webpack-plugin&quot;&gt;축소 된&lt;/a&gt; 또는 &lt;a href=&quot;code-splitting&quot;&gt;조각으로 분할&lt;/a&gt; 및 &lt;a href=&quot;lazy-loading&quot;&gt;로드 게으른&lt;/a&gt; 성능을 개선 할 수 있습니다. 번들링은 웹 개발에서 가장 중요한 문제 중 하나이며이를 해결하면 프로세스에서 많은 고통을 제거 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="6d70448d5c6321d04aec47b23d8f91d231d0f044" translate="yes" xml:space="preserve">
          <source>Bundles a tiny, purpose-built RPC implementation into your app</source>
          <target state="translated">소규모의 특수 목적 RPC 구현을 앱에 번들로 제공</target>
        </trans-unit>
        <trans-unit id="a6d74b73c44fe2d3e0effc86668ed93b7a7d4fae" translate="yes" xml:space="preserve">
          <source>Bundling CSS with webpack has some nice advantages like referencing images and fonts with hashed urls or &lt;a href=&quot;../concepts/hot-module-replacement&quot;&gt;hot module replacement&lt;/a&gt; in development. In production, on the other hand, it's not a good idea to apply your style sheets depending on JS execution. Rendering may be delayed or even a &lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_of_unstyled_content&quot;&gt;FOUC&lt;/a&gt; might be visible. Thus it's often still better to have them as separate files in your final production build.</source>
          <target state="translated">웹팩에 CSS를 번들링하면 해시 된 URL을 사용하여 이미지 및 글꼴을 참조하거나 개발시 &lt;a href=&quot;../concepts/hot-module-replacement&quot;&gt;핫 모듈을 교체하는&lt;/a&gt; 것과 같은 멋진 이점 이 있습니다. 반면, 프로덕션에서는 JS 실행에 따라 스타일 시트를 적용하는 것은 좋지 않습니다. 렌더링이 지연되거나 &lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_of_unstyled_content&quot;&gt;FOUC&lt;/a&gt; 가 표시 될 수도 있습니다. 따라서 최종 프로덕션 빌드에서 별도의 파일로 유지하는 것이 더 좋습니다.</target>
        </trans-unit>
        <trans-unit id="171c7c7f62a36342e46701f45bb347535d5b6161" translate="yes" xml:space="preserve">
          <source>Bundling CSS with webpack has some nice advantages like referencing images and fonts with hashed urls or &lt;a href=&quot;../concepts/hot-module-replacement&quot;&gt;hot module replacement&lt;/a&gt; in development. In production, on the other hand, it's not a good idea to apply your stylesheets depending on JS execution. Rendering may be delayed or even a &lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_of_unstyled_content&quot;&gt;FOUC&lt;/a&gt; might be visible. Thus it's still better to have them as separate files in your final production build.</source>
          <target state="translated">웹팩에 CSS를 번들링하면 해시 된 URL을 사용하여 이미지 및 글꼴을 참조하거나 개발시 &lt;a href=&quot;../concepts/hot-module-replacement&quot;&gt;핫 모듈을 교체하는&lt;/a&gt; 것과 같은 멋진 이점 이 있습니다. 반면, 프로덕션 환경에서는 JS 실행에 따라 스타일 시트를 적용하는 것은 좋지 않습니다. 렌더링이 지연되거나 &lt;a href=&quot;https://en.wikipedia.org/wiki/Flash_of_unstyled_content&quot;&gt;FOUC&lt;/a&gt; 가 표시 될 수도 있습니다. 따라서 최종 프로덕션 빌드에서 별도의 파일로 유지하는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="3512fd7f0984ce365b87e905286b2433e6b80fe7" translate="yes" xml:space="preserve">
          <source>Bundling your application is especially powerful for &lt;em&gt;HTTP/1.1&lt;/em&gt; clients, as it minimizes the number of times your app has to wait while the browser starts a new request. For &lt;em&gt;HTTP/2&lt;/em&gt;, you can also use Code Splitting and bundling through webpack for the &lt;a href=&quot;https://medium.com/webpack/webpack-http-2-7083ec3f3ce6#.7y5d3hz59&quot;&gt;best optimization&lt;/a&gt;.</source>
          <target state="translated">애플리케이션 번들링 은 브라우저가 새 요청을 시작하는 동안 앱이 대기해야하는 횟수를 최소화하므로 &lt;em&gt;HTTP / 1.1&lt;/em&gt; 클라이언트에 특히 강력합니다 . 들어 &lt;em&gt;HTTP / 2&lt;/em&gt; , 당신은 또한 대한 웹팩을 통해 코드 분할 및 번들을 사용하여 &lt;a href=&quot;https://medium.com/webpack/webpack-http-2-7083ec3f3ce6#.7y5d3hz59&quot;&gt;가장 최적화&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="03ebf631d70557595ad1f4dce27ea491ea6abce2" translate="yes" xml:space="preserve">
          <source>But what would happen if we changed the name of one of our entry points, or even added a new one? The generated bundles would be renamed on a build, but our &lt;code&gt;index.html&lt;/code&gt; file would still reference the old names. Let's fix that with the &lt;a href=&quot;../plugins/html-webpack-plugin&quot;&gt;&lt;code&gt;HtmlWebpackPlugin&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">그러나 진입 점 중 하나의 이름을 변경하거나 새로운 이름을 추가하면 어떻게됩니까? 생성 된 번들은 빌드에서 이름이 &lt;code&gt;index.html&lt;/code&gt; 만 index.html 파일은 여전히 ​​이전 이름을 참조합니다. &lt;a href=&quot;../plugins/html-webpack-plugin&quot;&gt; &lt;code&gt;HtmlWebpackPlugin&lt;/code&gt; 으로&lt;/a&gt; 수정 해 봅시다 .</target>
        </trans-unit>
        <trans-unit id="08ed099a4d61d9307ec723d06a6dd362fb9e8b26" translate="yes" xml:space="preserve">
          <source>By convention the &lt;code&gt;Reference Counter API&lt;/code&gt; should be bound to &lt;code&gt;.useable.css&lt;/code&gt; and the &lt;code&gt;.css&lt;/code&gt; should be loaded with basic &lt;code&gt;style-loader&lt;/code&gt; usage.(similar to other file types, i.e. &lt;code&gt;.useable.less&lt;/code&gt; and &lt;code&gt;.less&lt;/code&gt;).</source>
          <target state="translated">관례 적으로 &lt;code&gt;Reference Counter API&lt;/code&gt; 는 &lt;code&gt;.useable.css&lt;/code&gt; 에 바인딩되어야 하고 &lt;code&gt;.css&lt;/code&gt; 는 기본 &lt;code&gt;style-loader&lt;/code&gt; 사용법 으로로드되어야 합니다 (다른 파일 형식과 유사합니다 (예 : &lt;code&gt;.useable.less&lt;/code&gt; 및 &lt;code&gt;.less&lt;/code&gt; )).</target>
        </trans-unit>
        <trans-unit id="efc89ad11c97b4126b7bd8ec1724a2fead2ac60f" translate="yes" xml:space="preserve">
          <source>By default &lt;code&gt;[id].js&lt;/code&gt; is used or a value inferred from &lt;a href=&quot;#output-filename&quot;&gt;&lt;code&gt;output.filename&lt;/code&gt;&lt;/a&gt; (&lt;code&gt;[name]&lt;/code&gt; is replaced with &lt;code&gt;[id]&lt;/code&gt; or &lt;code&gt;[id].&lt;/code&gt; is prepended).</source>
          <target state="translated">기본적으로 &lt;code&gt;[id].js&lt;/code&gt; 가 사용되거나 &lt;a href=&quot;#output-filename&quot;&gt; &lt;code&gt;output.filename&lt;/code&gt; &lt;/a&gt; 에서 유추되는 값 ( &lt;code&gt;[name]&lt;/code&gt; 은 &lt;code&gt;[id]&lt;/code&gt; 또는 &lt;code&gt;[id].&lt;/code&gt; 로 대체됩니다 .) 이 앞에 옵니다 .</target>
        </trans-unit>
        <trans-unit id="4ff7a2a27d1f6b5f8c03d1054916c4f0c5799b38" translate="yes" xml:space="preserve">
          <source>By default &lt;code&gt;optimization.sideEffects&lt;/code&gt; is enabled in &lt;code&gt;production&lt;/code&gt;&lt;a href=&quot;../concepts/mode&quot;&gt;mode&lt;/a&gt; and disabled elsewise.</source>
          <target state="translated">기본적으로 &lt;code&gt;optimization.sideEffects&lt;/code&gt; 는 &lt;code&gt;production&lt;/code&gt; &lt;a href=&quot;../concepts/mode&quot;&gt;모드&lt;/a&gt; 에서 사용 가능하고 그렇지 않으면 사용 불가능합니다.</target>
        </trans-unit>
        <trans-unit id="200aa13deab520170795d754b122d8ffac28cd53" translate="yes" xml:space="preserve">
          <source>By default CSS exports all classnames into a global selector scope. Styles can be locally scoped to avoid globally scoping styles.</source>
          <target state="translated">기본적으로 CSS는 모든 클래스 이름을 전역 선택기 범위로 내 보냅니다. 스타일의 범위를 전역 적으로 지정하지 않도록 스타일 범위를 로컬로 지정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b90b124c2ae72e5f230ccf6d2e6e9e5e062b5d6a" translate="yes" xml:space="preserve">
          <source>By default dev-server will be served over HTTP. It can optionally be served over HTTP/2 with HTTPS:</source>
          <target state="translated">기본적으로 dev-server는 HTTP를 통해 제공됩니다. HTTPS를 사용하여 HTTP / 2를 통해 선택적으로 제공 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="fbe4a9033b29c501eb6363ef1e05b4b7164d954d" translate="yes" xml:space="preserve">
          <source>By default every local &lt;code&gt;&amp;lt;img src=&quot;image.png&quot;&amp;gt;&lt;/code&gt; is required (&lt;code&gt;require('./image.png')&lt;/code&gt;). You may need to specify loaders for images in your configuration (recommended &lt;code&gt;file-loader&lt;/code&gt; or &lt;code&gt;url-loader&lt;/code&gt;).</source>
          <target state="translated">기본적으로 모든 로컬 &lt;code&gt;&amp;lt;img src=&quot;image.png&quot;&amp;gt;&lt;/code&gt; 이 필요합니다 ( &lt;code&gt;require('./image.png')&lt;/code&gt; ). 구성에서 이미지의 로더를 지정해야 할 수도 있습니다 (권장 &lt;code&gt;file-loader&lt;/code&gt; 또는 &lt;code&gt;url-loader&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="9675d0ecb298ea9789816c49132a2bd7df6927b1" translate="yes" xml:space="preserve">
          <source>By default it only affects on-demand chunks because changing initial chunks would affect the script tags the HTML file should include to run the project.</source>
          <target state="translated">초기 청크를 변경하면 프로젝트를 실행하기 위해 HTML 파일에 포함해야하는 스크립트 태그에 영향을주기 때문에 기본적으로 주문형 청크에만 영향을줍니다.</target>
        </trans-unit>
        <trans-unit id="bbfeb129556180b79c92780f6344cbbb0cea4d74" translate="yes" xml:space="preserve">
          <source>By default it will use your current working directory to serve content, but you can modify this to another directory:</source>
          <target state="translated">기본적으로 현재 작업 디렉토리를 사용하여 컨텐츠를 제공하지만 다른 디렉토리로 수정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="7f794db7c0b232f4faf63f82799d448c51b00567" translate="yes" xml:space="preserve">
          <source>By default its value is &lt;code&gt;./src/index.js&lt;/code&gt;, but you can specify a different (or multiple entry points) by configuring the &lt;strong&gt;entry&lt;/strong&gt; property in the &lt;a href=&quot;https://webpack.js.org/configuration&quot;&gt;webpack configuration&lt;/a&gt;. For example:</source>
          <target state="translated">기본적으로 값은 &lt;code&gt;./src/index.js&lt;/code&gt; 이지만 webpack 구성에서 &lt;strong&gt;entry&lt;/strong&gt; 속성 을 구성하여 다른 (또는 여러 개의 진입 점)을 지정할 수 &lt;a href=&quot;https://webpack.js.org/configuration&quot;&gt;있습니다&lt;/a&gt; . 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="f60646698aea19a0f5fbedc3bd8c3b61a21d3f3a" translate="yes" xml:space="preserve">
          <source>By default plugin uses &lt;code&gt;uglify-es&lt;/code&gt; package.</source>
          <target state="translated">기본적으로 플러그인은 &lt;code&gt;uglify-es&lt;/code&gt; 패키지를 사용 합니다.</target>
        </trans-unit>
        <trans-unit id="984efafcc61ce6040cd5d9425aafa450a6596a34" translate="yes" xml:space="preserve">
          <source>By default the current directory is used, but it's recommended to pass a value in your configuration. This makes your configuration independent from CWD (current working directory).</source>
          <target state="translated">기본적으로 현재 디렉토리가 사용되지만 구성에 값을 전달하는 것이 좋습니다. 이것은 구성을 CWD (현재 작업 디렉토리)와 독립적으로 만듭니다.</target>
        </trans-unit>
        <trans-unit id="c63cf5c270bf69f972ef81767789ff2c98e88085" translate="yes" xml:space="preserve">
          <source>By default the plugin will dump full reporting of errors. Set &lt;code&gt;failOnError&lt;/code&gt; to true if you want &lt;code&gt;webpack&lt;/code&gt; build process breaking with any stylelint error. You can use the &lt;code&gt;quiet&lt;/code&gt; option to avoid error output to the console.</source>
          <target state="translated">기본적으로 플러그인은 전체 오류보고를 덤프합니다. stylelint 오류로 &lt;code&gt;webpack&lt;/code&gt; 빌드 프로세스가 중단 되도록 하려면 &lt;code&gt;failOnError&lt;/code&gt; 를 true로 설정하십시오 . 당신은 사용할 수 &lt;code&gt;quiet&lt;/code&gt; 콘솔에 오류 출력을 방지하기 위해 옵션을 선택합니다.</target>
        </trans-unit>
        <trans-unit id="8e021766745c0821508d2260184f8fd0bc58e74a" translate="yes" xml:space="preserve">
          <source>By default the server will only be accessible from localhost. We'll be accessing it from our host PC, so we need to change &lt;code&gt;--host&lt;/code&gt; to allow this.</source>
          <target state="translated">기본적으로 서버는 로컬 호스트에서만 액세스 할 수 있습니다. 호스트 PC에서 액세스 할 수 있으므로 이를 허용 하려면 &lt;code&gt;--host&lt;/code&gt; 를 변경해야합니다 .</target>
        </trans-unit>
        <trans-unit id="4650f2e544984361128cea9b6dbb9d7e787175e1" translate="yes" xml:space="preserve">
          <source>By default webpack v4+ provides new common chunks strategies out of the box for dynamically imported modules. See available options for configuring this behavior in the &lt;a href=&quot;../plugins/split-chunks-plugin&quot;&gt;SplitChunksPlugin&lt;/a&gt; page.</source>
          <target state="translated">기본적으로 webpack v4 +는 동적으로 가져온 모듈에 대해 새로운 공통 청크 전략을 제공합니다. &lt;a href=&quot;../plugins/split-chunks-plugin&quot;&gt;SplitChunksPlugin&lt;/a&gt; 페이지 에서이 동작을 구성하는 데 사용 가능한 옵션을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="7311382f9b33e099d7bba42e1454b4a416dd4811" translate="yes" xml:space="preserve">
          <source>By default webpack will generate names using origin and name of the chunk (e.g. &lt;code&gt;vendors~main.js&lt;/code&gt;). This option lets you specify the delimiter to use for the generated names.</source>
          <target state="translated">기본적으로 webpack은 출처와 청크 이름을 사용하여 이름을 생성합니다 (예 : &lt;code&gt;vendors~main.js&lt;/code&gt; ). 이 옵션을 사용하면 생성 된 이름에 사용할 구분 기호를 지정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="6d63f289045cdbe661c59e79cdcbc2d45fab641c" translate="yes" xml:space="preserve">
          <source>By default, &lt;code&gt;config-loader&lt;/code&gt; validates your webpack config against the &lt;a href=&quot;https://github.com/webpack/webpack/blob/master/schemas/WebpackOptions.json&quot;&gt;webpack config schema&lt;/a&gt;. However, it can be useful to append additional schema data to allow configs, which contain properties not present in the webpack schema, to pass validation.</source>
          <target state="translated">기본적으로 &lt;code&gt;config-loader&lt;/code&gt; 는 &lt;a href=&quot;https://github.com/webpack/webpack/blob/master/schemas/WebpackOptions.json&quot;&gt;webpack 구성 스키마&lt;/a&gt; 에 대해 webpack 구성의 유효성을 검증합니다 . 그러나 웹팩 스키마에없는 속성을 포함하는 구성이 유효성 검사를 통과 할 수 있도록 추가 스키마 데이터를 추가하는 것이 유용 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="97ef60af8ee795a2525079735581b601f175dafb" translate="yes" xml:space="preserve">
          <source>By default, &lt;code&gt;jshint-loader&lt;/code&gt; will provide a default reporter.</source>
          <target state="translated">기본적으로 &lt;code&gt;jshint-loader&lt;/code&gt; 는 기본 리포터를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="47ef46f73ede13250551f376ddf820436db38b23" translate="yes" xml:space="preserve">
          <source>By default, Node.js does not search for modules through symlinks, and so you may experience errors such as:</source>
          <target state="translated">기본적으로 Node.js는 심볼릭 링크를 통해 모듈을 검색하지 않으므로 다음과 같은 오류가 발생할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="e3a60c6ecc9c034ccbac409d962afe9fd7b083c8" translate="yes" xml:space="preserve">
          <source>By default, loader results are flagged as cacheable. Call this method passing &lt;code&gt;false&lt;/code&gt; to make the loader's result not cacheable.</source>
          <target state="translated">기본적으로 로더 결과는 캐시 가능으로 플래그됩니다. 로더의 결과를 캐시 할 수 없도록하려면 이 메소드를 &lt;code&gt;false&lt;/code&gt; 로 전달 하십시오.</target>
        </trans-unit>
        <trans-unit id="c4c21360c1f42d1c93ef817a33ab9c04c70ba95d" translate="yes" xml:space="preserve">
          <source>By default, the exported JSON keys mirror the class names. If you want to camelize class names (useful in JS), pass the query parameter &lt;code&gt;camelCase&lt;/code&gt; to css-loader.</source>
          <target state="translated">기본적으로 내 보낸 JSON 키는 클래스 이름을 미러링합니다. 클래스 이름을 카멜 리즈하려는 경우 (JS에서 유용) 쿼리 매개 변수 &lt;code&gt;camelCase&lt;/code&gt; 를 css-loader에 전달하십시오 .</target>
        </trans-unit>
        <trans-unit id="1e9df8c0eec9f9d45da92cc9239faeaed0f30b00" translate="yes" xml:space="preserve">
          <source>By default, the resource file is converted to a UTF-8 string and passed to the loader. By setting the &lt;code&gt;raw&lt;/code&gt; flag, the loader will receive the raw &lt;code&gt;Buffer&lt;/code&gt;. Every loader is allowed to deliver its result as &lt;code&gt;String&lt;/code&gt; or as &lt;code&gt;Buffer&lt;/code&gt;. The compiler converts them between loaders.</source>
          <target state="translated">기본적으로 자원 파일은 UTF-8 문자열로 변환되어 로더로 전달됩니다. &lt;code&gt;raw&lt;/code&gt; 플래그 를 설정함으로써 로더는 raw &lt;code&gt;Buffer&lt;/code&gt; 를 받습니다 . 모든 로더는 결과를 &lt;code&gt;String&lt;/code&gt; 또는 &lt;code&gt;Buffer&lt;/code&gt; 로 전달할 수 있습니다 . 컴파일러는 로더간에이를 변환합니다.</target>
        </trans-unit>
        <trans-unit id="a8a5338c3bd8aee6d5222feb44fc1870263d1b9d" translate="yes" xml:space="preserve">
          <source>By default, the style-loader appends &lt;code&gt;&amp;lt;style&amp;gt;&lt;/code&gt; elements to the end of the style target, which is the &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; tag of the page unless specified by &lt;code&gt;insertInto&lt;/code&gt;. This will cause CSS created by the loader to take priority over CSS already present in the target. To insert style elements at the beginning of the target, set this query parameter to 'top', e.g</source>
          <target state="translated">기본적으로 스타일 로더는 스타일 대상의 끝에 &lt;code&gt;&amp;lt;style&amp;gt;&lt;/code&gt; 요소를 추가 합니다. 이는 &lt;code&gt;insertInto&lt;/code&gt; 에 의해 지정되지 않는 한 페이지 의 &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; 태그입니다 . 그러면 로더가 작성한 CSS가 대상에 이미 존재하는 CSS보다 우선합니다. 대상의 시작 부분에 스타일 요소를 삽입하려면이 쿼리 매개 변수를 'top'으로 설정하십시오.</target>
        </trans-unit>
        <trans-unit id="24787b73adf49ae1cd12ebff5c4a06d3d869d262" translate="yes" xml:space="preserve">
          <source>By default, the style-loader inserts the &lt;code&gt;&amp;lt;style&amp;gt;&lt;/code&gt; elements into the &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; tag of the page. If you want the tags to be inserted somewhere else you can specify a CSS selector for that element here. If you target an &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/HTMLIFrameElement&quot;&gt;IFrame&lt;/a&gt; make sure you have sufficient access rights, the styles will be injected into the content document head.</source>
          <target state="translated">기본적으로 스타일 로더는 &lt;code&gt;&amp;lt;style&amp;gt;&lt;/code&gt; 요소를 페이지의 &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; 태그에 삽입합니다. 태그를 다른 곳에 삽입하려면 여기에서 해당 요소의 CSS 선택기를 지정할 수 있습니다. &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/HTMLIFrameElement&quot;&gt;IFrame&lt;/a&gt; 을 대상으로하는 경우 충분한 액세스 권한이 있는지 확인하십시오. 스타일은 컨텐츠 문서 헤드에 삽입됩니다.</target>
        </trans-unit>
        <trans-unit id="4bf2bb54beea4199ed924b9bf7fec6690b21dd18" translate="yes" xml:space="preserve">
          <source>By default, webpack reads files and writes files to disk using a normal file system. However, it is possible to change the input or output behavior using a different kind of file system (memory, webDAV, etc). To accomplish this, one can change the &lt;code&gt;inputFileSystem&lt;/code&gt; or &lt;code&gt;outputFileSystem&lt;/code&gt;. For example, you can replace the default &lt;code&gt;outputFileSystem&lt;/code&gt; with &lt;a href=&quot;https://github.com/webpack/memory-fs&quot;&gt;&lt;code&gt;memory-fs&lt;/code&gt;&lt;/a&gt; to write files to memory instead of to disk:</source>
          <target state="translated">기본적으로 webpack은 일반 파일 시스템을 사용하여 파일을 읽고 디스크에 파일을 씁니다. 그러나 다른 종류의 파일 시스템 (메모리, webDAV 등)을 사용하여 입력 또는 출력 동작을 변경할 수 있습니다. 이를 위해 &lt;code&gt;inputFileSystem&lt;/code&gt; 또는 &lt;code&gt;outputFileSystem&lt;/code&gt; 을 변경할 수 있습니다 . 예를 들어, 기본 &lt;code&gt;outputFileSystem&lt;/code&gt; 을 &lt;a href=&quot;https://github.com/webpack/memory-fs&quot;&gt; &lt;code&gt;memory-fs&lt;/code&gt; &lt;/a&gt; 로 바꾸어 파일을 디스크 대신 메모리에 쓸 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d38d305798cf5dce43fc31a2af6e01ab69de4ce0" translate="yes" xml:space="preserve">
          <source>By default, webpack will polyfill each library if there is a known polyfill or do nothing if there is not one. In the latter case, webpack will behave as if the module name was configured with the &lt;code&gt;false&lt;/code&gt; value.</source>
          <target state="translated">기본적으로 webpack은 알려진 polyfill이있는 경우 각 라이브러리를 polyfill하거나없는 경우 아무것도하지 않습니다. 후자의 경우, 웹팩은 모듈 이름이 &lt;code&gt;false&lt;/code&gt; 값 으로 구성된 것처럼 작동 합니다.</target>
        </trans-unit>
        <trans-unit id="085ab7a92184bd93a782a09d74ae8dd8d1a4466c" translate="yes" xml:space="preserve">
          <source>By passing an object this behavior can be controlled further using options like &lt;code&gt;rewrites&lt;/code&gt;:</source>
          <target state="translated">객체를 전달하면 &lt;code&gt;rewrites&lt;/code&gt; 와 같은 옵션을 사용하여이 동작을 추가로 제어 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="e97f5c01c89af0cefbd0d0cde69f806012180e4c" translate="yes" xml:space="preserve">
          <source>By separating common modules from bundles, the resulting chunked file can be loaded once initially, and stored in cache for later use. This results in page speed optimizations as the browser can quickly serve the shared code from cache, rather than being forced to load a larger bundle whenever a new page is visited.</source>
          <target state="translated">공통 모듈을 번들에서 분리함으로써 결과 청크 파일을 처음에 한 번로드 한 후 나중에 사용하기 위해 캐시에 저장할 수 있습니다. 따라서 새 페이지를 방문 할 때마다 더 큰 번들을로드하지 않고 브라우저가 캐시에서 공유 코드를 신속하게 제공 할 수 있으므로 페이지 속도가 최적화됩니다.</target>
        </trans-unit>
        <trans-unit id="a991e17a36449e26a7e54b70d0173a341f33732c" translate="yes" xml:space="preserve">
          <source>By setting &lt;code&gt;optimization.runtimeChunk&lt;/code&gt; to &lt;code&gt;object&lt;/code&gt; it is only possible to provide the &lt;code&gt;name&lt;/code&gt; property which stands for the name or name factory for the runtime chunks.</source>
          <target state="translated">&lt;code&gt;optimization.runtimeChunk&lt;/code&gt; 를 &lt;code&gt;object&lt;/code&gt; 로 설정 하면 다음을 제공 할 수 있습니다. &lt;code&gt;name&lt;/code&gt; 하면 런타임 청크의 이름 또는 이름 팩토리를 나타내는 name 특성 .</target>
        </trans-unit>
        <trans-unit id="14695fbd6ec12ac4e342fa79d9821e32c78f693f" translate="yes" xml:space="preserve">
          <source>By setting the &lt;code&gt;mode&lt;/code&gt; parameter to either &lt;code&gt;development&lt;/code&gt;, &lt;code&gt;production&lt;/code&gt; or &lt;code&gt;none&lt;/code&gt;, you can enable webpack's built-in optimizations that correspond to each environment. The default value is &lt;code&gt;production&lt;/code&gt;.</source>
          <target state="translated">설정에 따라 &lt;code&gt;mode&lt;/code&gt; 중 하나에 매개 변수를 &lt;code&gt;development&lt;/code&gt; , &lt;code&gt;production&lt;/code&gt; 또는 &lt;code&gt;none&lt;/code&gt; , 당신은 웹팩 내장에있어 최적화 그 대응을 각 환경에 사용할 수 있습니다. 기본값은 &lt;code&gt;production&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="9f9ab8853b825eb0487145595ae1c6752e14367c" translate="yes" xml:space="preserve">
          <source>By using content hashes within your bundle file names, you can indicate to the browser when the contents of a file has changed thus invalidating the cache. Once you start doing this though, you'll immediately notice some funny behavior. Certain hashes change even when their contents apparently do not. This is caused by the injection of the runtime and manifest which changes every build.</source>
          <target state="translated">번들 파일 이름 내에 컨텐츠 해시를 사용하여 파일의 컨텐츠가 변경된시기를 브라우저에 표시하여 캐시를 무효화 할 수 있습니다. 이 작업을 시작하면 즉시 재미있는 동작이 나타납니다. 특정 해시는 내용이 분명하지 않아도 변경됩니다. 이는 런타임의 주입과 모든 빌드를 변경하는 매니페스트로 인해 발생합니다.</target>
        </trans-unit>
        <trans-unit id="700b401ca52b1bd3071dc838bf11be9cdb19fc5f" translate="yes" xml:space="preserve">
          <source>CLI</source>
          <target state="translated">CLI</target>
        </trans-unit>
        <trans-unit id="886bbf2a80f95778693ae661f9a8c9c9073e263f" translate="yes" xml:space="preserve">
          <source>CLI Alternatives</source>
          <target state="translated">CLI 대안</target>
        </trans-unit>
        <trans-unit id="c4d980594bea8a509d459ae7077152d667b04ea9" translate="yes" xml:space="preserve">
          <source>CSP on MDN</source>
          <target state="translated">MDN의 CSP</target>
        </trans-unit>
        <trans-unit id="70e1670778a32d536afb3b23894d55b95195e617" translate="yes" xml:space="preserve">
          <source>CSS SourceMap (with &lt;code&gt;devtool: &quot;source-map&quot;&lt;/code&gt; and &lt;code&gt;extract-text-webpack-plugin?sourceMap&lt;/code&gt;)</source>
          <target state="translated">CSS SourceMap ( &lt;code&gt;devtool: &quot;source-map&quot;&lt;/code&gt; 및 &lt;code&gt;extract-text-webpack-plugin?sourceMap&lt;/code&gt; )</target>
        </trans-unit>
        <trans-unit id="c2287c82447df369d18e9d5bbb9e8519cae603e2" translate="yes" xml:space="preserve">
          <source>CSS cached separate</source>
          <target state="translated">CSS는 별도로 캐시</target>
        </trans-unit>
        <trans-unit id="3a2efc4fd89eab253bdbdcca0d1c1c0894b24826" translate="yes" xml:space="preserve">
          <source>CSS modules gotcha</source>
          <target state="translated">CSS 모듈</target>
        </trans-unit>
        <trans-unit id="4bc554087a5ece322d7f424d2e986222c59f507b" translate="yes" xml:space="preserve">
          <source>CSS requested in parallel</source>
          <target state="translated">동시에 요청 된 CSS</target>
        </trans-unit>
        <trans-unit id="174602ff70b2496c74d83f41e36b7c61bbaf7430" translate="yes" xml:space="preserve">
          <source>Cache And Parallel</source>
          <target state="translated">캐시와 병렬</target>
        </trans-unit>
        <trans-unit id="512abc45cd64a3405fcfeb6a96dedd1f7bacb199" translate="yes" xml:space="preserve">
          <source>Cache groups can inherit and/or override any options from &lt;code&gt;splitChunks.*&lt;/code&gt;; but &lt;code&gt;test&lt;/code&gt;, &lt;code&gt;priority&lt;/code&gt; and &lt;code&gt;reuseExistingChunk&lt;/code&gt; can only be configured on cache group level. To disable any of the default cache groups, set them to &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">캐시 그룹은 &lt;code&gt;splitChunks.*&lt;/code&gt; 모든 옵션을 상속 및 / 또는 무시할 수 있습니다 . * ; 그러나 &lt;code&gt;test&lt;/code&gt; , &lt;code&gt;priority&lt;/code&gt; 및 &lt;code&gt;reuseExistingChunk&lt;/code&gt; 는 캐시 그룹 레벨에서만 구성 할 수 있습니다. 기본 캐시 그룹을 비활성화하려면 해당 그룹을 &lt;code&gt;false&lt;/code&gt; 로 설정하십시오 .</target>
        </trans-unit>
        <trans-unit id="53c1c495f892fda2b308e7967ce7cd99069c38f5" translate="yes" xml:space="preserve">
          <source>Cache the generated webpack modules and chunks to improve build speed. Caching is enabled by default while in watch mode. To disable caching simply pass:</source>
          <target state="translated">생성 된 웹팩 모듈과 청크를 캐시하여 빌드 속도를 향상시킵니다. 캐싱은 시계 모드에서 기본적으로 활성화되어 있습니다. 캐싱을 비활성화하려면 간단히 전달하십시오.</target>
        </trans-unit>
        <trans-unit id="039011f7451d9da5c981ea386a10cfb3b869e201" translate="yes" xml:space="preserve">
          <source>CachePlugin</source>
          <target state="translated">CachePlugin</target>
        </trans-unit>
        <trans-unit id="69d33fae12825b692168f154ed5d210549251580" translate="yes" xml:space="preserve">
          <source>Caches the result of following loaders on disk (default) or in the database</source>
          <target state="translated">다음 로더의 결과를 디스크 (기본값) 또는 데이터베이스에 캐시합니다.</target>
        </trans-unit>
        <trans-unit id="60790f7c84170a8b87051d7e857118ffeb0465ee" translate="yes" xml:space="preserve">
          <source>Caching</source>
          <target state="translated">Caching</target>
        </trans-unit>
        <trans-unit id="db22fd64b088f5c7aaf8ec3fc69861df795199eb" translate="yes" xml:space="preserve">
          <source>Caching gets messy. Plain and simple. However the walk-through above should give you a running start to deploying consistent, cachable assets. See the &lt;em&gt;Further Reading&lt;/em&gt; section below to learn more.</source>
          <target state="translated">캐싱은 지저분해진다. 평범하고 단순합니다. 그러나 위의 연습을 통해 일관성 있고 캐싱 가능한 자산을 배포 할 수 있습니다. 참조&lt;em&gt; 더 읽기&lt;/em&gt; 아래 섹션을 .</target>
        </trans-unit>
        <trans-unit id="115b241217d0dcaea99f641cfd95874312de4849" translate="yes" xml:space="preserve">
          <source>Call &lt;code&gt;npm run coverage&lt;/code&gt; to check the test coverage (using &lt;a href=&quot;https://github.com/gotwarlost/istanbul&quot;&gt;istanbul&lt;/a&gt;)</source>
          <target state="translated">테스트 범위를 확인하려면 &lt;code&gt;npm run coverage&lt;/code&gt; 를 호출 하십시오 (&lt;a href=&quot;https://github.com/gotwarlost/istanbul&quot;&gt; istanbul&lt;/a&gt; ).</target>
        </trans-unit>
        <trans-unit id="828e9dac24c5fd2a27df7ca1873f35f641e9faae" translate="yes" xml:space="preserve">
          <source>Call &lt;code&gt;npm test&lt;/code&gt; to run the unit tests</source>
          <target state="translated">단위 &lt;code&gt;npm test&lt;/code&gt; 를 실행하려면 npm 테스트 를 호출하십시오.</target>
        </trans-unit>
        <trans-unit id="b1aad9b83ea0403539a0fe9a4289e014c7bae8f5" translate="yes" xml:space="preserve">
          <source>Calling the &lt;code&gt;run&lt;/code&gt; method on the &lt;code&gt;Compiler&lt;/code&gt; instance is much like the quick run method mentioned above:</source>
          <target state="translated">&lt;code&gt;Compiler&lt;/code&gt; 인스턴스 에서 &lt;code&gt;run&lt;/code&gt; 메소드를 호출하는 것은 위에서 언급 한 빠른 실행 메소드와 매우 유사합니다.</target>
        </trans-unit>
        <trans-unit id="720f4544ad245a6d29f86053f631e9835f993974" translate="yes" xml:space="preserve">
          <source>Calling the &lt;code&gt;watch&lt;/code&gt; method, triggers the webpack runner, but then watches for changes (much like CLI: &lt;code&gt;webpack --watch&lt;/code&gt;), as soon as webpack detects a change, runs again. Returns an instance of &lt;code&gt;Watching&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;watch&lt;/code&gt; 메소드를 호출하면 웹팩 러너가 트리거되지만 웹팩이 변경 사항을 감지하면 즉시 변경 사항 (CLI : &lt;code&gt;webpack --watch&lt;/code&gt; 와 같은 )을 감시합니다. &lt;code&gt;Watching&lt;/code&gt; 인스턴스를 반환합니다 .</target>
        </trans-unit>
        <trans-unit id="0346da988c1699290ca2e465cdfe45ddc3f4e812" translate="yes" xml:space="preserve">
          <source>CamelCase is recommended for local selectors. They are easier to use in the within the imported JS module.</source>
          <target state="translated">CamelCase는 지역 선택기에 권장됩니다. 가져온 JS 모듈 내에서 사용하기가 더 쉽습니다.</target>
        </trans-unit>
        <trans-unit id="a8e6ac54e30f25dd6e341c0f1e6f4ed8ac9c2575" translate="yes" xml:space="preserve">
          <source>Can be &lt;code&gt;(buffer, cb) =&amp;gt; cb(buffer)&lt;/code&gt; or if a &lt;code&gt;{String}&lt;/code&gt; is used the algorithm is taken from &lt;code&gt;zlib&lt;/code&gt;</source>
          <target state="translated">있을 수 &lt;code&gt;(buffer, cb) =&amp;gt; cb(buffer)&lt;/code&gt; 또는 경우 &lt;code&gt;{String}&lt;/code&gt; 사용되는 알고리즘에서 촬영 &lt;code&gt;zlib&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b51809cb7612895efb9c07bed8993e76f52a519f" translate="yes" xml:space="preserve">
          <source>Can be used to check if there were errors while compiling. Returns &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">컴파일하는 동안 오류가 있는지 확인하는 데 사용할 수 있습니다. &lt;code&gt;true&lt;/code&gt; 또는 &lt;code&gt;false&lt;/code&gt; 를 반환 합니다 .</target>
        </trans-unit>
        <trans-unit id="8f185afe20d4fbe0cc542a08a649e064e17ef660" translate="yes" xml:space="preserve">
          <source>Can be used to check if there were warnings while compiling. Returns &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">컴파일하는 동안 경고가 있는지 확인하는 데 사용할 수 있습니다. &lt;code&gt;true&lt;/code&gt; 또는 &lt;code&gt;false&lt;/code&gt; 를 반환 합니다 .</target>
        </trans-unit>
        <trans-unit id="fe49fdd03c0564c8662ed53f379107ddaef42b67" translate="yes" xml:space="preserve">
          <source>Can return true/false at this point</source>
          <target state="translated">이 시점에서 참 / 거짓을 반환 할 수 있습니다</target>
        </trans-unit>
        <trans-unit id="82a12680e0cdf13727e1b476490bf40353b4cef4" translate="yes" xml:space="preserve">
          <source>Capture a &quot;profile&quot; of the application, including statistics and hints, which can then be dissected using the &lt;a href=&quot;https://webpack.github.io/analyse/&quot;&gt;Analyze&lt;/a&gt; tool.</source>
          <target state="translated">통계 및 힌트를 포함하여 응용 프로그램의 &quot;프로필&quot;을 캡처 한 다음 &lt;a href=&quot;https://webpack.github.io/analyse/&quot;&gt;분석&lt;/a&gt; 도구를 사용하여 해부 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="d88c106f00406fefae460931f1d3b8ef590361d1" translate="yes" xml:space="preserve">
          <source>Categories of internal plugins:</source>
          <target state="translated">내부 플러그인 카테고리 :</target>
        </trans-unit>
        <trans-unit id="bcaa33a7ae44bd5042c37a9cdbea7f843b1cf7c8" translate="yes" xml:space="preserve">
          <source>Caveats</source>
          <target state="translated">Caveats</target>
        </trans-unit>
        <trans-unit id="158c1c9f05b3672bd60affa9411ba43e070b9474" translate="yes" xml:space="preserve">
          <source>Certain popular modules written for AMD, most notably jQuery versions 1.7.0 to 1.9.1, will only register as an AMD module if the loader indicates it has taken &lt;a href=&quot;https://github.com/amdjs/amdjs-api/wiki/jQuery-and-AMD&quot;&gt;special allowances&lt;/a&gt; for multiple versions being included on a page.</source>
          <target state="translated">AMD 용으로 작성된 특정 인기 모듈, 특히 jQuery 버전 1.7.0 ~ 1.9.1은 로더 가 페이지에 포함 된 여러 버전에 대해 &lt;a href=&quot;https://github.com/amdjs/amdjs-api/wiki/jQuery-and-AMD&quot;&gt;특별한 허용&lt;/a&gt; 을 받았다고 표시 한 경우에만 AMD 모듈로 등록 합니다.</target>
        </trans-unit>
        <trans-unit id="790ba14f6e0a1dd1d532e749b965c35d610d959c" translate="yes" xml:space="preserve">
          <source>Certain utilities, plugins and loader only make sense when building for production. For example, it usually doesn't make sense to minify and mangle your code with the &lt;code&gt;UglifyJsPlugin&lt;/code&gt; while in development. These tools should typically be excluded in development:</source>
          <target state="translated">특정 유틸리티, 플러그인 및 로더는 프로덕션 용으로 빌드 할 때만 의미가 있습니다. 예를 들어, 개발 중에 &lt;code&gt;UglifyJsPlugin&lt;/code&gt; 을 사용 하여 코드를 축소 하고 조작 하는 것은 일반적으로 의미가 없습니다 . 이러한 도구는 일반적으로 개발시 제외해야합니다.</target>
        </trans-unit>
        <trans-unit id="bc231d29d89d06dd02d1368c222f367429ec2a7d" translate="yes" xml:space="preserve">
          <source>Chain the &lt;code&gt;less-loader&lt;/code&gt; with the &lt;a href=&quot;css-loader&quot;&gt;&lt;code&gt;css-loader&lt;/code&gt;&lt;/a&gt; and the &lt;a href=&quot;style-loader&quot;&gt;&lt;code&gt;style-loader&lt;/code&gt;&lt;/a&gt; to immediately apply all styles to the DOM.</source>
          <target state="translated">체인 &lt;code&gt;less-loader&lt;/code&gt; 와 &lt;a href=&quot;css-loader&quot;&gt; &lt;code&gt;css-loader&lt;/code&gt; &lt;/a&gt; 와 &lt;a href=&quot;style-loader&quot;&gt; &lt;code&gt;style-loader&lt;/code&gt; &lt;/a&gt; 즉시 DOM에 모든 스타일을 적용합니다.</target>
        </trans-unit>
        <trans-unit id="c080570b98397e709b2ef035891a6fff9fef112d" translate="yes" xml:space="preserve">
          <source>Chain the sass-loader with the &lt;a href=&quot;css-loader&quot;&gt;css-loader&lt;/a&gt; and the &lt;a href=&quot;style-loader&quot;&gt;style-loader&lt;/a&gt; to immediately apply all styles to the DOM.</source>
          <target state="translated">sass-loader를 &lt;a href=&quot;css-loader&quot;&gt;css-loader&lt;/a&gt; 및 &lt;a href=&quot;style-loader&quot;&gt;style-loader&lt;/a&gt; 와 연결하여 모든 스타일을 DOM에 즉시 적용하십시오.</target>
        </trans-unit>
        <trans-unit id="c2fc7fe52ad254abdb779adb088ee24441733d50" translate="yes" xml:space="preserve">
          <source>Change the prefix for each line in the output bundles.</source>
          <target state="translated">출력 번들에서 각 행의 접 두부를 변경하십시오.</target>
        </trans-unit>
        <trans-unit id="717f1efe04610f8a87ad763461d474f4822c4cdc" translate="yes" xml:space="preserve">
          <source>Change the style on &lt;code&gt;body&lt;/code&gt; to &lt;code&gt;background: red;&lt;/code&gt; and you should immediately see the page's background color change without a full refresh.</source>
          <target state="translated">&lt;code&gt;body&lt;/code&gt; 의 스타일 을 &lt;code&gt;background: red;&lt;/code&gt; 변경하십시오 : 빨간색; 완전히 새로 고치지 않으면 페이지의 배경색이 즉시 변경됩니다.</target>
        </trans-unit>
        <trans-unit id="9d9ab8d44f7e6d414ead99be44e605be2e297d41" translate="yes" xml:space="preserve">
          <source>Change your config file to tell the dev server where to look for files:</source>
          <target state="translated">구성 파일을 변경하여 dev 서버에 파일을 찾을 위치를 알려주십시오.</target>
        </trans-unit>
        <trans-unit id="a36de5e6f5435df0307d72365fa3b066dcbad72d" translate="yes" xml:space="preserve">
          <source>Changes Seen But Not Processed</source>
          <target state="translated">확인되었지만 처리되지 않은 변경 사항</target>
        </trans-unit>
        <trans-unit id="5d36e6e53e59e192f7146b329e0d2a52283e686f" translate="yes" xml:space="preserve">
          <source>Changes to cached paths may cause failure in rare cases.</source>
          <target state="translated">캐시 된 경로를 변경하면 드물게 실패 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b29aaa06eef61420561a487ee74293a8d1d7047a" translate="yes" xml:space="preserve">
          <source>Check out the &lt;a href=&quot;../api/plugins&quot;&gt;plugin interface&lt;/a&gt; and how to use it to extend webpacks capabilities.</source>
          <target state="translated">&lt;a href=&quot;../api/plugins&quot;&gt;플러그인 인터페이스&lt;/a&gt; 와이를 사용하여 웹팩 기능을 확장하는 방법을 확인하십시오 .</target>
        </trans-unit>
        <trans-unit id="b37b8f309a7e7d264be99db20f4017f3824c3c6e" translate="yes" xml:space="preserve">
          <source>Choose a style of &lt;a href=&quot;http://blog.teamtreehouse.com/introduction-source-maps&quot;&gt;source mapping&lt;/a&gt; to enhance the debugging process. These values can affect build and rebuild speed dramatically.</source>
          <target state="translated">디버깅 프로세스를 향상시키기 위해 &lt;a href=&quot;http://blog.teamtreehouse.com/introduction-source-maps&quot;&gt;소스 매핑&lt;/a&gt; 스타일을 선택하십시오 . 이 값은 빌드 및 재구성 속도에 큰 영향을 줄 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d1466a275c114ce56a677f1c495dc5cffdb52e8d" translate="yes" xml:space="preserve">
          <source>Choosing a Development Tool</source>
          <target state="translated">개발 도구 선택</target>
        </trans-unit>
        <trans-unit id="40cd7fbd1aace6a9eff6acaffc58661c707ef949" translate="yes" xml:space="preserve">
          <source>Chunk Objects</source>
          <target state="translated">청크 객체</target>
        </trans-unit>
        <trans-unit id="8d9570b3c29f342d8ae5fb2089315e3d27e1c5a8" translate="yes" xml:space="preserve">
          <source>Chunks are loaded by &lt;code&gt;importScripts&lt;/code&gt;. Else it's similar to &lt;a href=&quot;#jsonptemplateplugin&quot;&gt;&lt;code&gt;JsonpTemplatePlugin&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">청크는 &lt;code&gt;importScripts&lt;/code&gt; 에 의해로드됩니다 . 그렇지 않으면 &lt;a href=&quot;#jsonptemplateplugin&quot;&gt; &lt;code&gt;JsonpTemplatePlugin&lt;/code&gt; &lt;/a&gt; 과 유사합니다 .</target>
        </trans-unit>
        <trans-unit id="c7a6d7bf0f6dd7635c76e9b56867633a3e69d460" translate="yes" xml:space="preserve">
          <source>Chunks are wrapped into JSONP-calls. A loading algorithm is included in entry chunks. It loads chunks by adding a &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag.</source>
          <target state="translated">청크는 JSONP 호출로 래핑됩니다. 로딩 알고리즘은 엔트리 청크에 포함됩니다. &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; 태그 를 추가하여 청크를로드합니다 .</target>
        </trans-unit>
        <trans-unit id="ce75eb0afc682140a4ba3e1a1ca4b6bd11f2fd52" translate="yes" xml:space="preserve">
          <source>Chunks are wrapped into Node.js modules exporting the bundled modules. The entry chunks loads chunks by requiring them.</source>
          <target state="translated">청크는 번들 모듈을 내보내는 Node.js 모듈로 래핑됩니다. 엔트리 청크는 청크를 요구하여 청크를로드합니다.</target>
        </trans-unit>
        <trans-unit id="57de86ffe67ed84839b6d609d3e52b58f87b579d" translate="yes" xml:space="preserve">
          <source>Chunks from &lt;code&gt;bundle-loader&lt;/code&gt;, however will load using the &lt;code&gt;chunkFilename&lt;/code&gt; rule, so the example files will produce &lt;code&gt;my-chunk.1.js&lt;/code&gt; and &lt;code&gt;file-2.js&lt;/code&gt; respectively.</source>
          <target state="translated">그러나 &lt;code&gt;bundle-loader&lt;/code&gt; 의 청크 는 &lt;code&gt;chunkFilename&lt;/code&gt; 규칙을 사용하여로드 되므로 예제 파일은 각각 &lt;code&gt;my-chunk.1.js&lt;/code&gt; 및 &lt;code&gt;file-2.js&lt;/code&gt; 를 생성 합니다.</target>
        </trans-unit>
        <trans-unit id="75606ec5eea8fa4fdc9f4d97f2b852dba3c67c49" translate="yes" xml:space="preserve">
          <source>Chunks that reduce the total size the most are merged first. If multiple combinations are equal the minimal merged size wins.</source>
          <target state="translated">총 크기를 가장 많이 줄인 청크가 먼저 병합됩니다. 여러 조합이 동일하면 최소 병합 크기가 이깁니다.</target>
        </trans-unit>
        <trans-unit id="25fa9188539cfc313f26fb9704119d1abb3ac869" translate="yes" xml:space="preserve">
          <source>Chunks with the same modules are merged.</source>
          <target state="translated">동일한 모듈을 가진 청크가 병합됩니다.</target>
        </trans-unit>
        <trans-unit id="a593ffe03282c3aca35f71fff6b39e5640fac889" translate="yes" xml:space="preserve">
          <source>Class names will be camelized</source>
          <target state="translated">학급 이름은 낙타 화됩니다</target>
        </trans-unit>
        <trans-unit id="d91448cecce89d1ca2c26bb671735c7ea1fa6d5e" translate="yes" xml:space="preserve">
          <source>Cleaning up the &lt;code&gt;/dist&lt;/code&gt; folder</source>
          <target state="translated">&lt;code&gt;/dist&lt;/code&gt; 폴더 정리</target>
        </trans-unit>
        <trans-unit id="110651c3698bc7ba17adfe848e35678aa3e7f3f8" translate="yes" xml:space="preserve">
          <source>Click on the name of each option in the configuration code below to jump to the detailed documentation. Also note that the items with arrows can be expanded to show more examples and, in some cases, more advanced configuration.</source>
          <target state="translated">아래 구성 코드에서 각 옵션의 이름을 클릭하여 자세한 설명서로 이동하십시오. 또한 화살표가있는 항목을 확장하여 더 많은 예제와 경우에 따라 고급 구성을 표시 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="72f870a55892a08271714d6717ddad51410ccebf" translate="yes" xml:space="preserve">
          <source>Close &lt;code&gt;Watching&lt;/code&gt;</source>
          <target state="translated">닫기 &lt;code&gt;Watching&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="3b99bcf0a23915a787c29e8a30648d974a2f8ad0" translate="yes" xml:space="preserve">
          <source>ClosureWebpackPlugin</source>
          <target state="translated">ClosureWebpackPlugin</target>
        </trans-unit>
        <trans-unit id="d4a989ae1369e4b664454339de990449f6d5be39" translate="yes" xml:space="preserve">
          <source>Code Splitting</source>
          <target state="translated">코드 분할</target>
        </trans-unit>
        <trans-unit id="3c2cfe661cc218216da6737337e382420fed415d" translate="yes" xml:space="preserve">
          <source>Code Splitting Example</source>
          <target state="translated">코드 분할 예</target>
        </trans-unit>
        <trans-unit id="8b5f15a51f0d6a05ff88e64ee3e7665192d51beb" translate="yes" xml:space="preserve">
          <source>Code passed along to webpack or the next loader that will replace the module.</source>
          <target state="translated">코드를 웹팩이나 모듈을 대체 할 다음 로더로 전달했습니다.</target>
        </trans-unit>
        <trans-unit id="06ef02df75db62bbf337ea89fef1b09f9d65f703" translate="yes" xml:space="preserve">
          <source>Code splitting is one of the most compelling features of webpack. This feature allows you to split your code into various bundles which can then be loaded on demand or in parallel. It can be used to achieve smaller bundles and control resource load prioritization which, if used correctly, can have a major impact on load time.</source>
          <target state="translated">코드 분할은 웹팩의 가장 강력한 기능 중 하나입니다. 이 기능을 사용하면 코드를 다양한 번들로 분할하여 요청시 또는 병렬로로드 할 수 있습니다. 더 작은 번들을 달성하고 올바르게 사용하는 경우로드 시간에 큰 영향을 줄 수있는 자원로드 우선 순위를 제어하는 ​​데 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="cdf59624ab1eb754830d01c3808f2b174b2191ef" translate="yes" xml:space="preserve">
          <source>Coffee Script Redux loader for Webpack.</source>
          <target state="translated">Webpack 용 Coffee Script Redux 로더.</target>
        </trans-unit>
        <trans-unit id="082a42c3704ee38739d3dd41511c5b78ea5ca8f3" translate="yes" xml:space="preserve">
          <source>CoffeeScript</source>
          <target state="translated">CoffeeScript</target>
        </trans-unit>
        <trans-unit id="215034c8c1e86ffc2c9c6292a8c2e42673f959e2" translate="yes" xml:space="preserve">
          <source>Combine this plugin with &lt;a href=&quot;../configuration/output#output-library&quot;&gt;&lt;code&gt;output.library&lt;/code&gt;&lt;/a&gt; option to expose (aka, put into the global scope) the dll function.</source>
          <target state="translated">이 플러그인을 &lt;a href=&quot;../configuration/output#output-library&quot;&gt; &lt;code&gt;output.library&lt;/code&gt; &lt;/a&gt; 옵션 과 결합 하여 dll 함수를 노출 (전역 범위에 넣음)하십시오.</target>
        </trans-unit>
        <trans-unit id="ffdd6f5debc93a2802f89344733e83d1441a439f" translate="yes" xml:space="preserve">
          <source>Combine with &lt;code&gt;parallelism: 1&lt;/code&gt; for better results.</source>
          <target state="translated">더 나은 결과를 얻으려면 &lt;code&gt;parallelism: 1&lt;/code&gt; 와 결합하십시오 .</target>
        </trans-unit>
        <trans-unit id="fbe792b6b57895fe63abc1efdb7540a05d3c2b02" translate="yes" xml:space="preserve">
          <source>Combining implicit common vendor chunks and manifest file</source>
          <target state="translated">암시 적 공통 공급 업체 청크와 매니페스트 파일 결합</target>
        </trans-unit>
        <trans-unit id="14c818412d017dcc7f2635ecf050b64a83410b23" translate="yes" xml:space="preserve">
          <source>Command Line Interface</source>
          <target state="translated">커맨드 라인 인터페이스</target>
        </trans-unit>
        <trans-unit id="f6eaa962650a97f840a2800c301825ed8d72a917" translate="yes" xml:space="preserve">
          <source>Common Options</source>
          <target state="translated">공통 옵션</target>
        </trans-unit>
        <trans-unit id="6ba0dd62f98c4d247e5c924d7aa6235ea82c0c8d" translate="yes" xml:space="preserve">
          <source>Common and Vendor Chunks</source>
          <target state="translated">일반 및 공급 업체 청크</target>
        </trans-unit>
        <trans-unit id="377dd01e05316c6519d98a0022d6976f8e76be87" translate="yes" xml:space="preserve">
          <source>CommonJS</source>
          <target state="translated">CommonJS</target>
        </trans-unit>
        <trans-unit id="536cb1f7506a3aa652817e315f74c2928dd26b08" translate="yes" xml:space="preserve">
          <source>CommonJS Wikipedia</source>
          <target state="translated">CommonJS 위키 백과</target>
        </trans-unit>
        <trans-unit id="9fe7ef22eebdaee79af746c149937fe76331c705" translate="yes" xml:space="preserve">
          <source>CommonJS module. i.e. &lt;code&gt;require('webpack-numbers')&lt;/code&gt;.</source>
          <target state="translated">CommonJS 모듈. 즉 &lt;code&gt;require('webpack-numbers')&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="b0913cf9cdbf013f331cbea850afa5a5ab4460ae" translate="yes" xml:space="preserve">
          <source>CommonJsPlugin</source>
          <target state="translated">CommonJsPlugin</target>
        </trans-unit>
        <trans-unit id="1cfbe1511d7ed2b2c47c6c0d32d3a6fbec40349e" translate="yes" xml:space="preserve">
          <source>Commons chunk for entries</source>
          <target state="translated">항목에 대한 공통 청크</target>
        </trans-unit>
        <trans-unit id="637fdec0938c11bdd0a5c45f3c20f8db007d11e2" translate="yes" xml:space="preserve">
          <source>CommonsChunkPlugin</source>
          <target state="translated">CommonsChunkPlugin</target>
        </trans-unit>
        <trans-unit id="9eec7c356108cb0ac946d29789ef6b5fa3651c56" translate="yes" xml:space="preserve">
          <source>Compared to the extract-text-webpack-plugin:</source>
          <target state="translated">extract-text-webpack-plugin과 비교 :</target>
        </trans-unit>
        <trans-unit id="07f2645ac7629285b3edd6eb5e6276f9a28a1c3d" translate="yes" xml:space="preserve">
          <source>CompatibilityPlugin</source>
          <target state="translated">CompatibilityPlugin</target>
        </trans-unit>
        <trans-unit id="a56fc9efdde452d3d371e42369e8bdab1d591d15" translate="yes" xml:space="preserve">
          <source>Compilation Hooks</source>
          <target state="translated">컴파일 훅</target>
        </trans-unit>
        <trans-unit id="1ddb3db8e65b61067fa6f18b06e707fcca810bbf" translate="yes" xml:space="preserve">
          <source>Compilation Hooks: additionalAssets</source>
          <target state="translated">컴파일 훅 : additionalAssets</target>
        </trans-unit>
        <trans-unit id="84762c7ce958d7913f4ca9b9e849019287f96ceb" translate="yes" xml:space="preserve">
          <source>Compilation Hooks: additionalChunkAssets</source>
          <target state="translated">컴파일 훅 : additionalChunkAssets</target>
        </trans-unit>
        <trans-unit id="2ef8f592f1c79f8d0c9c077d7d0f1c9f023ea583" translate="yes" xml:space="preserve">
          <source>Compilation Hooks: advancedOptimizeModuleOrder</source>
          <target state="translated">컴파일 후크 : advancedOptimizeModuleOrder</target>
        </trans-unit>
        <trans-unit id="a3a19408876660a5541b6ebabff0960613426241" translate="yes" xml:space="preserve">
          <source>Compilation Hooks: afterHash</source>
          <target state="translated">컴파일 후크 : afterHash</target>
        </trans-unit>
        <trans-unit id="922a5c9f35ad6cc26571cb0fc2f054938ffa782c" translate="yes" xml:space="preserve">
          <source>Compilation Hooks: afterOptimizeAssets</source>
          <target state="translated">컴파일 후크 : afterOptimizeAssets</target>
        </trans-unit>
        <trans-unit id="7f5363ee26cd3f673dc7450a870037b4558f9feb" translate="yes" xml:space="preserve">
          <source>Compilation Hooks: afterOptimizeChunkAssets</source>
          <target state="translated">컴파일 후크 : afterOptimizeChunkAssets</target>
        </trans-unit>
        <trans-unit id="420132f6f89449efaa6aafca997b194fa05776bb" translate="yes" xml:space="preserve">
          <source>Compilation Hooks: afterOptimizeChunkIds</source>
          <target state="translated">컴파일 후크 : afterOptimizeChunkIds</target>
        </trans-unit>
        <trans-unit id="68df5d547670fc08d09b20109161938112d316ea" translate="yes" xml:space="preserve">
          <source>Compilation Hooks: afterOptimizeChunkModules</source>
          <target state="translated">컴파일 후크 : afterOptimizeChunkModules</target>
        </trans-unit>
        <trans-unit id="f3f21cdf5ad9d1fbf1f1139493dbfa8d563a282d" translate="yes" xml:space="preserve">
          <source>Compilation Hooks: afterOptimizeChunks</source>
          <target state="translated">컴파일 후크 : afterOptimizeChunks</target>
        </trans-unit>
        <trans-unit id="2c0d4a7fb5a168ff0d61f49ff58f2368fdb80763" translate="yes" xml:space="preserve">
          <source>Compilation Hooks: afterOptimizeDependencies</source>
          <target state="translated">컴파일 후크 : afterOptimizeDependencies</target>
        </trans-unit>
        <trans-unit id="b7964ed79dd8bf654342351a3e03a5647199a9be" translate="yes" xml:space="preserve">
          <source>Compilation Hooks: afterOptimizeModuleIds</source>
          <target state="translated">컴파일 후크 : afterOptimizeModuleIds</target>
        </trans-unit>
        <trans-unit id="0086de0baf83f1bc6eb3150b1f7f4b2253fce625" translate="yes" xml:space="preserve">
          <source>Compilation Hooks: afterOptimizeModules</source>
          <target state="translated">컴파일 후크 : afterOptimizeModule</target>
        </trans-unit>
        <trans-unit id="5ca4d8129322de363f96b2fbfdc02e146ffb7177" translate="yes" xml:space="preserve">
          <source>Compilation Hooks: afterOptimizeTree</source>
          <target state="translated">컴파일 후크 : afterOptimizeTree</target>
        </trans-unit>
        <trans-unit id="c410316050cd182a35266f9db93264bbfa0f7522" translate="yes" xml:space="preserve">
          <source>Compilation Hooks: afterSeal</source>
          <target state="translated">컴파일 후크 : afterSeal</target>
        </trans-unit>
        <trans-unit id="85f9145a8d157ac26c71011ac5326cca27255af4" translate="yes" xml:space="preserve">
          <source>Compilation Hooks: assetPath</source>
          <target state="translated">컴파일 훅 : assetPath</target>
        </trans-unit>
        <trans-unit id="66b66fc8fcb17962968160ef1249af7036afc771" translate="yes" xml:space="preserve">
          <source>Compilation Hooks: beforeChunkAssets</source>
          <target state="translated">컴파일 후크 : beforeChunkAssets</target>
        </trans-unit>
        <trans-unit id="323dafbe802884c6b876d90cd6f65c632fb2072f" translate="yes" xml:space="preserve">
          <source>Compilation Hooks: beforeHash</source>
          <target state="translated">컴파일 후크 : beforeHash</target>
        </trans-unit>
        <trans-unit id="ad2569bddbf9012dfa76a3c0b43ff29a1d35aeeb" translate="yes" xml:space="preserve">
          <source>Compilation Hooks: beforeModuleAssets</source>
          <target state="translated">컴파일 후크 : beforeModuleAssets</target>
        </trans-unit>
        <trans-unit id="cc6565b8058629a09a8eb82905b283be28f0d840" translate="yes" xml:space="preserve">
          <source>Compilation Hooks: beforeModuleIds</source>
          <target state="translated">컴파일 후크 : beforeModuleIds</target>
        </trans-unit>
        <trans-unit id="d666fa47671c06156bc85a8d6e67723eb3f976bb" translate="yes" xml:space="preserve">
          <source>Compilation Hooks: beforeOptimizeChunkIds</source>
          <target state="translated">컴파일 후크 : beforeOptimizeChunkIds</target>
        </trans-unit>
        <trans-unit id="b6d6350740c272b6b1b3cc14a81e13b5c4d3127b" translate="yes" xml:space="preserve">
          <source>Compilation Hooks: buildModule</source>
          <target state="translated">컴파일 후크 : buildModule</target>
        </trans-unit>
        <trans-unit id="82c0ff81fa80838bc5e68fef5666159d3f6beeeb" translate="yes" xml:space="preserve">
          <source>Compilation Hooks: childCompiler</source>
          <target state="translated">컴파일 후크 : childCompiler</target>
        </trans-unit>
        <trans-unit id="c411ea9b3b60641e1f0728fbb4e4b1a4b001d98a" translate="yes" xml:space="preserve">
          <source>Compilation Hooks: chunkAsset</source>
          <target state="translated">컴파일 후크 : chunkAsset</target>
        </trans-unit>
        <trans-unit id="e0191d1ddc4ce94238cd897062047e57b2a224ca" translate="yes" xml:space="preserve">
          <source>Compilation Hooks: chunkHash</source>
          <target state="translated">컴파일 후크 : chunkHash</target>
        </trans-unit>
        <trans-unit id="5553498508057f19c722630e9e652392be5c92bf" translate="yes" xml:space="preserve">
          <source>Compilation Hooks: dependencyReference</source>
          <target state="translated">컴파일 후크 : dependencyReference</target>
        </trans-unit>
        <trans-unit id="63166bf3019b0cd8da8c2b7d0882d106abf9deff" translate="yes" xml:space="preserve">
          <source>Compilation Hooks: failedModule</source>
          <target state="translated">컴파일 후크 : failedModule</target>
        </trans-unit>
        <trans-unit id="7dee0889389c46d57816c3750ba8d7ab385fea3b" translate="yes" xml:space="preserve">
          <source>Compilation Hooks: finishModules</source>
          <target state="translated">컴파일 후크 : finishModules</target>
        </trans-unit>
        <trans-unit id="b333e5d715bd4719262c5652e85ec9efa51318e8" translate="yes" xml:space="preserve">
          <source>Compilation Hooks: finishRebuildingModule</source>
          <target state="translated">컴파일 후크 : finishRebuildingModule</target>
        </trans-unit>
        <trans-unit id="6c19e31deffbdc79ac02d5fa6d5b028dbb18c0d6" translate="yes" xml:space="preserve">
          <source>Compilation Hooks: moduleAsset</source>
          <target state="translated">컴파일 후크 : moduleAsset</target>
        </trans-unit>
        <trans-unit id="582a011e586ed4435a3167a2449ec7e83acb42b9" translate="yes" xml:space="preserve">
          <source>Compilation Hooks: moduleIds</source>
          <target state="translated">컴파일 후크 : moduleIds</target>
        </trans-unit>
        <trans-unit id="1391a2bc853d7c34cb07dabb90e36fd262cb314b" translate="yes" xml:space="preserve">
          <source>Compilation Hooks: needAdditionalPass</source>
          <target state="translated">컴파일 후크 : needAdditionalPass</target>
        </trans-unit>
        <trans-unit id="11cfaf4f0e54ba2e04a8f4321f4e7319e2bba889" translate="yes" xml:space="preserve">
          <source>Compilation Hooks: needAdditionalSeal</source>
          <target state="translated">컴파일 후크 : needAdditionalSeal</target>
        </trans-unit>
        <trans-unit id="44563f14d20fd07e59e0b38835fba12bbe9a22b4" translate="yes" xml:space="preserve">
          <source>Compilation Hooks: normalModuleLoader</source>
          <target state="translated">컴파일 후크 : normalModuleLoader</target>
        </trans-unit>
        <trans-unit id="2af830ab0932acce9a7b6137e266620a8cec34b4" translate="yes" xml:space="preserve">
          <source>Compilation Hooks: optimize</source>
          <target state="translated">컴파일 후크 : 최적화</target>
        </trans-unit>
        <trans-unit id="1230a372f55a4db9ab27f0456e3d151ee5af3077" translate="yes" xml:space="preserve">
          <source>Compilation Hooks: optimizeAssets</source>
          <target state="translated">컴파일 후크 : optimizeAssets</target>
        </trans-unit>
        <trans-unit id="78d3fadd2889f4bd0141541c9ba1941549fdc7db" translate="yes" xml:space="preserve">
          <source>Compilation Hooks: optimizeChunkAssets</source>
          <target state="translated">컴파일 후크 : optimizeChunkAssets</target>
        </trans-unit>
        <trans-unit id="b7a2aee64fa122625dc55a75a0b58ddc9069a6b3" translate="yes" xml:space="preserve">
          <source>Compilation Hooks: optimizeChunkIds</source>
          <target state="translated">컴파일 후크 : optimizeChunkIds</target>
        </trans-unit>
        <trans-unit id="32d4bbfeaf2088d215eaeba7193a499240d3404f" translate="yes" xml:space="preserve">
          <source>Compilation Hooks: optimizeChunkModules</source>
          <target state="translated">컴파일 후크 : optimizeChunkModules</target>
        </trans-unit>
        <trans-unit id="6a784e1845016d21879d16aa65b10a7a86f78e36" translate="yes" xml:space="preserve">
          <source>Compilation Hooks: optimizeChunkModulesAdvanced</source>
          <target state="translated">컴파일 후크 : optimizeChunkModulesAdvanced</target>
        </trans-unit>
        <trans-unit id="9fc39655488c30d5691b3fab0b195ab49dae24f3" translate="yes" xml:space="preserve">
          <source>Compilation Hooks: optimizeChunkModulesBasic</source>
          <target state="translated">컴파일 후크 : optimizeChunkModulesBasic</target>
        </trans-unit>
        <trans-unit id="d77acd02713d1eb8a0be56d0db70908cb3e9a4e0" translate="yes" xml:space="preserve">
          <source>Compilation Hooks: optimizeChunkOrder</source>
          <target state="translated">컴파일 후크 : optimizeChunkOrder</target>
        </trans-unit>
        <trans-unit id="41a00790b75b6e911c20cd9eb1e85932c17a2998" translate="yes" xml:space="preserve">
          <source>Compilation Hooks: optimizeChunks</source>
          <target state="translated">컴파일 후크 : optimizeChunks</target>
        </trans-unit>
        <trans-unit id="0192cc60602194532b4d9ec8dda64df30d66db88" translate="yes" xml:space="preserve">
          <source>Compilation Hooks: optimizeChunksAdvanced</source>
          <target state="translated">컴파일 후크 : optimizeChunksAdvanced</target>
        </trans-unit>
        <trans-unit id="0d37f7364d90d5999503b2ac8c99158b65998fef" translate="yes" xml:space="preserve">
          <source>Compilation Hooks: optimizeChunksBasic</source>
          <target state="translated">컴파일 후크 : optimizeChunksBasic</target>
        </trans-unit>
        <trans-unit id="ce7378701fc80c61840dc40f00cfd35da4a119c3" translate="yes" xml:space="preserve">
          <source>Compilation Hooks: optimizeDependencies</source>
          <target state="translated">컴파일 후크 : optimizeDependencies</target>
        </trans-unit>
        <trans-unit id="9813bd01aa224099ba00cc7ddb2019adbe8d9c04" translate="yes" xml:space="preserve">
          <source>Compilation Hooks: optimizeDependenciesAdvanced</source>
          <target state="translated">컴파일 후크 : optimizeDependenciesAdvanced</target>
        </trans-unit>
        <trans-unit id="4c69825300b8cb654c3da900c90684a4540c3f54" translate="yes" xml:space="preserve">
          <source>Compilation Hooks: optimizeDependenciesBasic</source>
          <target state="translated">컴파일 후크 : optimizeDependenciesBasic</target>
        </trans-unit>
        <trans-unit id="6f1e7acc6983066ee1e8b51859ce88c80ea9b825" translate="yes" xml:space="preserve">
          <source>Compilation Hooks: optimizeModuleIds</source>
          <target state="translated">컴파일 후크 : optimizeModuleIds</target>
        </trans-unit>
        <trans-unit id="68c2bdbc3105dd7d0dadaab2583f09f92234e7a7" translate="yes" xml:space="preserve">
          <source>Compilation Hooks: optimizeModuleOrder</source>
          <target state="translated">컴파일 후크 : optimizeModuleOrder</target>
        </trans-unit>
        <trans-unit id="94af93aeefb5ad3897f6c41e12e3a9758d110cf6" translate="yes" xml:space="preserve">
          <source>Compilation Hooks: optimizeModules</source>
          <target state="translated">컴파일 훅 : optimizeModules</target>
        </trans-unit>
        <trans-unit id="3bfb410357aeeadc353bd415d8a71244f964758a" translate="yes" xml:space="preserve">
          <source>Compilation Hooks: optimizeModulesAdvanced</source>
          <target state="translated">컴파일 후크 : optimizeModulesAdvanced</target>
        </trans-unit>
        <trans-unit id="690da39c9d73aef5bf4e9f00b565a5856357a837" translate="yes" xml:space="preserve">
          <source>Compilation Hooks: optimizeModulesBasic</source>
          <target state="translated">컴파일 후크 : optimizeModlesBasic</target>
        </trans-unit>
        <trans-unit id="2aa6f034320b817fe8d5450d7afaff5e2b52136e" translate="yes" xml:space="preserve">
          <source>Compilation Hooks: optimizeTree</source>
          <target state="translated">컴파일 후크 : optimizeTree</target>
        </trans-unit>
        <trans-unit id="068d048ba05c85905fa7a203d00129f4a651ea3f" translate="yes" xml:space="preserve">
          <source>Compilation Hooks: rebuildModule</source>
          <target state="translated">컴파일 훅 : rebuildModule</target>
        </trans-unit>
        <trans-unit id="aee90ba8e993d1a00f65da21949f1a2f1a289e70" translate="yes" xml:space="preserve">
          <source>Compilation Hooks: record</source>
          <target state="translated">컴파일 후크 : 레코드</target>
        </trans-unit>
        <trans-unit id="6f63aa0e9f7a95c8c13a994469f7ef3fbe4eb2e6" translate="yes" xml:space="preserve">
          <source>Compilation Hooks: recordChunks</source>
          <target state="translated">컴파일 훅 : recordChunks</target>
        </trans-unit>
        <trans-unit id="541cda56c9b149e4db8e16675c611c997ea91672" translate="yes" xml:space="preserve">
          <source>Compilation Hooks: recordHash</source>
          <target state="translated">컴파일 후크 : recordHash</target>
        </trans-unit>
        <trans-unit id="7678725e0cc90ea907ccaef4bcedb7e02af5cb37" translate="yes" xml:space="preserve">
          <source>Compilation Hooks: recordModules</source>
          <target state="translated">컴파일 훅 : recordModules</target>
        </trans-unit>
        <trans-unit id="64baf55545c66a790d6df5b92d087571e536bba7" translate="yes" xml:space="preserve">
          <source>Compilation Hooks: records</source>
          <target state="translated">편집 후크 : 레코드</target>
        </trans-unit>
        <trans-unit id="4b762db0944e6da9f90840e10db637d5acf9f2c8" translate="yes" xml:space="preserve">
          <source>Compilation Hooks: reviveChunks</source>
          <target state="translated">컴파일 훅 : reviveChunks</target>
        </trans-unit>
        <trans-unit id="8e783af3faf0dd09076d0bdfe8bc7e4eca31021a" translate="yes" xml:space="preserve">
          <source>Compilation Hooks: reviveModules</source>
          <target state="translated">컴파일 훅 : reviveModule</target>
        </trans-unit>
        <trans-unit id="1bc9fb03ad5d4661eb2b5a18924075099c785f9f" translate="yes" xml:space="preserve">
          <source>Compilation Hooks: seal</source>
          <target state="translated">컴파일 후크 : 씰</target>
        </trans-unit>
        <trans-unit id="95e347b629b88d6be74e5bd69bfeb2fed4fbf6e1" translate="yes" xml:space="preserve">
          <source>Compilation Hooks: shouldGenerateChunkAssets</source>
          <target state="translated">컴파일 후크 : shouldGenerateChunkAssets</target>
        </trans-unit>
        <trans-unit id="401cf8a773397274ebf52cea44a0186e31e8194c" translate="yes" xml:space="preserve">
          <source>Compilation Hooks: shouldRecord</source>
          <target state="translated">컴파일 후크 : shouldRecord</target>
        </trans-unit>
        <trans-unit id="4c6a3ee9744baab815d7dc63fa58aa758b5017bb" translate="yes" xml:space="preserve">
          <source>Compilation Hooks: succeedModule</source>
          <target state="translated">컴파일 후크 : successModule</target>
        </trans-unit>
        <trans-unit id="0d57b303b696e92f8550997408954244364c0e19" translate="yes" xml:space="preserve">
          <source>Compilation Hooks: unseal</source>
          <target state="translated">컴파일 후크 : 봉인 해제</target>
        </trans-unit>
        <trans-unit id="56f71105a89e85b4cb17b468be4d7d0118d1f9a8" translate="yes" xml:space="preserve">
          <source>Compilation errors (missing modules, syntax errors, etc)</source>
          <target state="translated">컴파일 오류 (모듈 누락, 구문 오류 등)</target>
        </trans-unit>
        <trans-unit id="79fd7cfef54038a28adadac5823e381b6da8a1be" translate="yes" xml:space="preserve">
          <source>Compilation has completed.</source>
          <target state="translated">편집이 완료되었습니다.</target>
        </trans-unit>
        <trans-unit id="6f5d66c968e210c40f409528aa5c63e3935edb8b" translate="yes" xml:space="preserve">
          <source>Compilation has failed.</source>
          <target state="translated">컴파일이 실패했습니다.</target>
        </trans-unit>
        <trans-unit id="01dcc6ff620a8099487cf5b342309c7beab9180f" translate="yes" xml:space="preserve">
          <source>Compilation warnings</source>
          <target state="translated">컴파일 경고</target>
        </trans-unit>
        <trans-unit id="7be5c8e8d4f16e73010199faa32fcb6e969e464c" translate="yes" xml:space="preserve">
          <source>Compile as WebWorker</source>
          <target state="translated">WebWorker로 컴파일</target>
        </trans-unit>
        <trans-unit id="a5c260c442ec0a9deee567e76e233d23293f7452" translate="yes" xml:space="preserve">
          <source>Compile for &lt;a href=&quot;https://electronjs.org/&quot;&gt;Electron&lt;/a&gt; for main process.</source>
          <target state="translated">메인 프로세스를 위한 &lt;a href=&quot;https://electronjs.org/&quot;&gt;Electron을&lt;/a&gt; 위한 컴파일</target>
        </trans-unit>
        <trans-unit id="dedbe3c4e607031c0871b78b0db16168b3f8ef72" translate="yes" xml:space="preserve">
          <source>Compile for &lt;a href=&quot;https://electronjs.org/&quot;&gt;Electron&lt;/a&gt; for renderer process, providing a target using &lt;code&gt;JsonpTemplatePlugin&lt;/code&gt;, &lt;code&gt;FunctionModulePlugin&lt;/code&gt; for browser environments and &lt;code&gt;NodeTargetPlugin&lt;/code&gt; and &lt;code&gt;ExternalsPlugin&lt;/code&gt; for CommonJS and Electron built-in modules.</source>
          <target state="translated">&lt;code&gt;JsonpTemplatePlugin&lt;/code&gt; , 브라우저 환경 용 &lt;code&gt;FunctionModulePlugin&lt;/code&gt; 및 CommonJS 및 Electron 내장 모듈 용 &lt;code&gt;NodeTargetPlugin&lt;/code&gt; 및 &lt;code&gt;ExternalsPlugin&lt;/code&gt; 을 사용하여 대상을 제공하는 렌더러 프로세스 용 &lt;a href=&quot;https://electronjs.org/&quot;&gt;Electron&lt;/a&gt; 용 컴파일</target>
        </trans-unit>
        <trans-unit id="f681ec4ede4423c4ecf6f613ad086e816257b2a9" translate="yes" xml:space="preserve">
          <source>Compile for usage in WebKit and uses JSONP for chunk loading. Allows importing of built-in Node.js modules and &lt;a href=&quot;http://docs.nwjs.io/en/latest/&quot;&gt;&lt;code&gt;nw.gui&lt;/code&gt;&lt;/a&gt; (experimental)</source>
          <target state="translated">WebKit에서 사용하도록 컴파일하고 청크로드에 JSONP를 사용합니다. 내장 Node.js 모듈 및 &lt;a href=&quot;http://docs.nwjs.io/en/latest/&quot;&gt; &lt;code&gt;nw.gui&lt;/code&gt; &lt;/a&gt; (실험) 가져 오기 가능</target>
        </trans-unit>
        <trans-unit id="759e2b7958520257a0f46e60fe3e9cfc28001bf9" translate="yes" xml:space="preserve">
          <source>Compile for usage in a Node.js-like environment (uses &lt;code&gt;fs&lt;/code&gt; and &lt;code&gt;vm&lt;/code&gt; to load chunks asynchronously)</source>
          <target state="translated">Node.js와 같은 환경에서 사용하기 위해 컴파일합니다 ( &lt;code&gt;fs&lt;/code&gt; 및 &lt;code&gt;vm&lt;/code&gt; 을 사용 하여 청크를 비동기 적으로로드 함)</target>
        </trans-unit>
        <trans-unit id="ccea1c28a6aeb77b888cc72622ce815e57a8a767" translate="yes" xml:space="preserve">
          <source>Compile for usage in a Node.js-like environment (uses Node.js &lt;code&gt;require&lt;/code&gt; to load chunks)</source>
          <target state="translated">Node.js와 같은 환경에서 사용하기 위해 컴파일합니다 (Node.js에서 청크를로드 &lt;code&gt;require&lt;/code&gt; 함)</target>
        </trans-unit>
        <trans-unit id="043c7234c12c0aac8c917501137c50e574808a26" translate="yes" xml:space="preserve">
          <source>Compile for usage in a browser-like environment &lt;strong&gt;(default)&lt;/strong&gt;</source>
          <target state="translated">브라우저와 같은 환경에서 사용하기위한 컴파일 &lt;strong&gt;(기본값)&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="bdbec98fbff9729c7ba6ba3b6067563cdd18738b" translate="yes" xml:space="preserve">
          <source>Compile in Memory</source>
          <target state="translated">메모리에서 컴파일</target>
        </trans-unit>
        <trans-unit id="1878e8afc002cb59bbb15b3303ed029fb43b2242" translate="yes" xml:space="preserve">
          <source>Compiler Flags</source>
          <target state="translated">컴파일러 플래그</target>
        </trans-unit>
        <trans-unit id="29355dce80ea2f26572145067fc4172fd22ee493" translate="yes" xml:space="preserve">
          <source>Compiler Hooks</source>
          <target state="translated">컴파일러 후크</target>
        </trans-unit>
        <trans-unit id="74608b3c7f4843ae841aaf3ef2668da02ed8fef7" translate="yes" xml:space="preserve">
          <source>Compiler Hooks: afterCompile</source>
          <target state="translated">컴파일러 후크 : afterCompile</target>
        </trans-unit>
        <trans-unit id="ab33ad2bdd743517f06a4fafe46e81fd080dbbd4" translate="yes" xml:space="preserve">
          <source>Compiler Hooks: afterEmit</source>
          <target state="translated">컴파일러 후크 : afterEmit</target>
        </trans-unit>
        <trans-unit id="a02fbb07c204edac8299df158ee93f32c81bdf66" translate="yes" xml:space="preserve">
          <source>Compiler Hooks: afterEnvironment</source>
          <target state="translated">컴파일러 후크 : afterEnvironment</target>
        </trans-unit>
        <trans-unit id="3a610e6a21d419b312a21764847acc1c1f50054b" translate="yes" xml:space="preserve">
          <source>Compiler Hooks: afterPlugins</source>
          <target state="translated">컴파일러 후크 : afterPlugins</target>
        </trans-unit>
        <trans-unit id="f6f182de4a43c8af9f6c4d936b4d22883e475cbb" translate="yes" xml:space="preserve">
          <source>Compiler Hooks: afterResolvers</source>
          <target state="translated">컴파일러 후크 : afterResolvers</target>
        </trans-unit>
        <trans-unit id="88de667306c323e23b10fa82471524e424b0d4b2" translate="yes" xml:space="preserve">
          <source>Compiler Hooks: beforeCompile</source>
          <target state="translated">컴파일러 후크 : beforeCompile</target>
        </trans-unit>
        <trans-unit id="6199812aaa7c64cfc47ec41b6bcbfe25e3d61d53" translate="yes" xml:space="preserve">
          <source>Compiler Hooks: beforeRun</source>
          <target state="translated">컴파일러 후크 : beforeRun</target>
        </trans-unit>
        <trans-unit id="881f50fa5d361d26b9985b0427d5abf71bf5d908" translate="yes" xml:space="preserve">
          <source>Compiler Hooks: compilation</source>
          <target state="translated">컴파일러 후크 : 컴파일</target>
        </trans-unit>
        <trans-unit id="9eb6a9f527d7471baefec6898b1eb483a9e5af73" translate="yes" xml:space="preserve">
          <source>Compiler Hooks: compile</source>
          <target state="translated">컴파일러 후크 : 컴파일</target>
        </trans-unit>
        <trans-unit id="dc740f39b8b565e9d026ef5af5d9f7a6c4cb4f7e" translate="yes" xml:space="preserve">
          <source>Compiler Hooks: contextModuleFactory</source>
          <target state="translated">컴파일러 후크 : contextModuleFactory</target>
        </trans-unit>
        <trans-unit id="bd7c026c099b60b6716a7f1456757db1de1e863e" translate="yes" xml:space="preserve">
          <source>Compiler Hooks: done</source>
          <target state="translated">컴파일러 후크 : 완료</target>
        </trans-unit>
        <trans-unit id="ab55175cac163211b20f8805e88095c848791971" translate="yes" xml:space="preserve">
          <source>Compiler Hooks: emit</source>
          <target state="translated">컴파일러 후크 : 방출</target>
        </trans-unit>
        <trans-unit id="f61914a6cf987e537981cd8ae51ebff4021ec2fc" translate="yes" xml:space="preserve">
          <source>Compiler Hooks: entryOption</source>
          <target state="translated">컴파일러 후크 : entryOption</target>
        </trans-unit>
        <trans-unit id="dc5bea7b990ff2d8083446066bc790896e58dd0e" translate="yes" xml:space="preserve">
          <source>Compiler Hooks: environment</source>
          <target state="translated">컴파일러 후크 : 환경</target>
        </trans-unit>
        <trans-unit id="708b694170ce1e29ba0f6ac02108e5952baf132b" translate="yes" xml:space="preserve">
          <source>Compiler Hooks: failed</source>
          <target state="translated">컴파일러 후크 : 실패</target>
        </trans-unit>
        <trans-unit id="a54231dccf8a3219615531c1e7a30437939e6195" translate="yes" xml:space="preserve">
          <source>Compiler Hooks: invalid</source>
          <target state="translated">컴파일러 후크 : 유효하지 않습니다</target>
        </trans-unit>
        <trans-unit id="9df4a48c5cb01ccf8462c2aa3e72974670080e6e" translate="yes" xml:space="preserve">
          <source>Compiler Hooks: make</source>
          <target state="translated">컴파일러 후크 : 확인</target>
        </trans-unit>
        <trans-unit id="a610b683846dc06997b8489512f3665b4f71b72e" translate="yes" xml:space="preserve">
          <source>Compiler Hooks: normalModuleFactory</source>
          <target state="translated">컴파일러 후크 : normalModuleFactory</target>
        </trans-unit>
        <trans-unit id="fce1fe3e883c338f3f3c6ce9093a7b2cd8e21d87" translate="yes" xml:space="preserve">
          <source>Compiler Hooks: run</source>
          <target state="translated">컴파일러 후크 : 실행</target>
        </trans-unit>
        <trans-unit id="1b33d03babfe5c7cb16f6b17a693fada0b72617f" translate="yes" xml:space="preserve">
          <source>Compiler Hooks: shouldEmit</source>
          <target state="translated">컴파일러 후크 : shouldEmit</target>
        </trans-unit>
        <trans-unit id="b7aabd6d7ef597c7e86df7febf3d57290af61513" translate="yes" xml:space="preserve">
          <source>Compiler Hooks: thisCompilation</source>
          <target state="translated">컴파일러 후크 : thisCompilation</target>
        </trans-unit>
        <trans-unit id="b8c3176f55416ca1da4c017bf9b84d949e470b12" translate="yes" xml:space="preserve">
          <source>Compiler Hooks: watchClose</source>
          <target state="translated">컴파일러 후크 : watchClose</target>
        </trans-unit>
        <trans-unit id="08b6b6a010af7337069abf47316dfc2f53b17fa7" translate="yes" xml:space="preserve">
          <source>Compiler Hooks: watchRun</source>
          <target state="translated">컴파일러 후크 : watchRun</target>
        </trans-unit>
        <trans-unit id="48fb82cdf0adb1c116afdd8de8d1759250d60807" translate="yes" xml:space="preserve">
          <source>Compiler Instance</source>
          <target state="translated">컴파일러 인스턴스</target>
        </trans-unit>
        <trans-unit id="82a9bb65997a18ab8dc2f11a3e481f145ddc743d" translate="yes" xml:space="preserve">
          <source>CompressionWebpackPlugin</source>
          <target state="translated">CompressionWebpackPlugin</target>
        </trans-unit>
        <trans-unit id="6f58d263f33944384921df8405fd4a36e06175e2" translate="yes" xml:space="preserve">
          <source>Concepts</source>
          <target state="translated">Concepts</target>
        </trans-unit>
        <trans-unit id="89034263aa6d8291b141e426356a5164cfd8c0c6" translate="yes" xml:space="preserve">
          <source>Concepts - Hot Module Replacement</source>
          <target state="translated">개념-핫 모듈 교체</target>
        </trans-unit>
        <trans-unit id="e39262defe80a83fac1b793497417432c8b1a879" translate="yes" xml:space="preserve">
          <source>Conclusion</source>
          <target state="translated">Conclusion</target>
        </trans-unit>
        <trans-unit id="2f4979324e03e4571b1d7eba701226670c2ee2da" translate="yes" xml:space="preserve">
          <source>Condition</source>
          <target state="translated">Condition</target>
        </trans-unit>
        <trans-unit id="4e3c8e3f583a041ed10c75869f820f753685a8e8" translate="yes" xml:space="preserve">
          <source>Condition 1: The chunk contains modules from &lt;code&gt;node_modules&lt;/code&gt;</source>
          <target state="translated">조건 1 : 청크는 &lt;code&gt;node_modules&lt;/code&gt; 의 모듈을 포함합니다</target>
        </trans-unit>
        <trans-unit id="3c554acd8793ef14c7d52d16912fe8bc24a7772b" translate="yes" xml:space="preserve">
          <source>Condition 1: The chunk is shared between both import calls</source>
          <target state="translated">조건 1 : 청크가 두 가져 오기 호출간에 공유됩니다.</target>
        </trans-unit>
        <trans-unit id="2b81ca62c1909ccca5d95f871829e4630be7f255" translate="yes" xml:space="preserve">
          <source>Condition 2: &lt;code&gt;helpers&lt;/code&gt; is bigger than 30kb</source>
          <target state="translated">조건 2 : &lt;code&gt;helpers&lt;/code&gt; 가 30kb보다 큼</target>
        </trans-unit>
        <trans-unit id="b791b81a1c068d75129b2c7083e5b91ca8ee36d2" translate="yes" xml:space="preserve">
          <source>Condition 2: &lt;code&gt;react&lt;/code&gt; is bigger than 30kb</source>
          <target state="translated">조건 2 : &lt;code&gt;react&lt;/code&gt; 이 30kb보다 큼</target>
        </trans-unit>
        <trans-unit id="04168c74a4987f8496ad6cd6904c000db678c585" translate="yes" xml:space="preserve">
          <source>Condition 3: Number of parallel requests at the import call is 2</source>
          <target state="translated">조건 3 : 가져 오기 호출에서 병렬 요청 수는 2입니다.</target>
        </trans-unit>
        <trans-unit id="585bf15cb4b72e1bfc32a12333074da02fe2b2ee" translate="yes" xml:space="preserve">
          <source>Condition 3: Number of parallel requests at the import calls is 2</source>
          <target state="translated">조건 3 : 가져 오기 호출에서 병렬 요청 수는 2입니다.</target>
        </trans-unit>
        <trans-unit id="bf7042222ecd43b60cce57c1f20e1e2248b01822" translate="yes" xml:space="preserve">
          <source>Condition 4: Doesn't affect request at initial page load</source>
          <target state="translated">조건 4 : 초기 페이지로드시 요청에 영향을 미치지 않습니다</target>
        </trans-unit>
        <trans-unit id="0543f6a17b3bcb298f32edc8723d65080d0a78a3" translate="yes" xml:space="preserve">
          <source>Condition what comments you need extract.</source>
          <target state="translated">추출해야 할 의견을 조건화하십시오.</target>
        </trans-unit>
        <trans-unit id="da0a0f5b614a9eb2aa8eb1d4a10afa594bea035a" translate="yes" xml:space="preserve">
          <source>Conditional build depending on an &lt;a href=&quot;../configuration/configuration-types&quot;&gt;specified environment&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../configuration/configuration-types&quot;&gt;지정된 환경&lt;/a&gt; 에 따른 조건부 빌드 .</target>
        </trans-unit>
        <trans-unit id="e8f4d6158eb07b051a083c07fda8b3d6e2583d06" translate="yes" xml:space="preserve">
          <source>Conditions can be one of these:</source>
          <target state="translated">조건은 다음 중 하나 일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="8851142da56fd885ce668a165b33fee7003e858d" translate="yes" xml:space="preserve">
          <source>Config</source>
          <target state="translated">Config</target>
        </trans-unit>
        <trans-unit id="6bb9831c5615d89f644b5e0ea840d1cc409e35c1" translate="yes" xml:space="preserve">
          <source>Config Options</source>
          <target state="translated">구성 옵션</target>
        </trans-unit>
        <trans-unit id="754164850f38c1ecdaf6b8ed894cb192bc36c5f4" translate="yes" xml:space="preserve">
          <source>Configuration</source>
          <target state="translated">Configuration</target>
        </trans-unit>
        <trans-unit id="0cce6cf5d4896e580927cc833b3c865d21195b14" translate="yes" xml:space="preserve">
          <source>Configuration Languages</source>
          <target state="translated">구성 언어</target>
        </trans-unit>
        <trans-unit id="b8577c99aaca7f628cb921ee68fce4bf962909c4" translate="yes" xml:space="preserve">
          <source>Configuration Options</source>
          <target state="translated">구성 옵션</target>
        </trans-unit>
        <trans-unit id="4423f6cc0cfc4280716d7e05543e1851972724a6" translate="yes" xml:space="preserve">
          <source>Configuration Types</source>
          <target state="translated">구성 유형</target>
        </trans-unit>
        <trans-unit id="c6040e04c3722248cf1662527fb32fa80dfcbd02" translate="yes" xml:space="preserve">
          <source>Configure a custom filename for your imported bundle</source>
          <target state="translated">가져온 번들에 대한 사용자 정의 파일 이름 구성</target>
        </trans-unit>
        <trans-unit id="3d1848f2f1a58932db5053524d41c2b40f1ce1dc" translate="yes" xml:space="preserve">
          <source>Configure how modules are resolved. For example, when calling &lt;code&gt;import &quot;lodash&quot;&lt;/code&gt; in ES2015, the &lt;code&gt;resolve&lt;/code&gt; options can change where webpack goes to look for &lt;code&gt;&quot;lodash&quot;&lt;/code&gt; (see &lt;a href=&quot;#resolve-modules&quot;&gt;&lt;code&gt;modules&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">모듈 해결 방법을 구성하십시오. 호출 할 때 예를 들어, &lt;code&gt;import &quot;lodash&quot;&lt;/code&gt; ES2015에서 &lt;code&gt;resolve&lt;/code&gt; 웹팩을 찾기 위해 어디로 옵션을 변경할 수 있습니다 &lt;code&gt;&quot;lodash&quot;&lt;/code&gt; (참조 &lt;a href=&quot;#resolve-modules&quot;&gt; &lt;code&gt;modules&lt;/code&gt; &lt;/a&gt; ).</target>
        </trans-unit>
        <trans-unit id="ec5dd780bf10be86d4b601052bb10556a49b79df" translate="yes" xml:space="preserve">
          <source>Configure how performance hints are shown. For example if you have an asset that is over 250kb, webpack will emit a warning notifying you of this.</source>
          <target state="translated">성능 힌트 표시 방법을 구성하십시오. 예를 들어 자산이 250kb를 초과하는 경우 webpack은이를 알리는 경고를 표시합니다.</target>
        </trans-unit>
        <trans-unit id="fc2d565d0a334b7fe4f58be9774138c168d8424b" translate="yes" xml:space="preserve">
          <source>Configure how source maps are named. By default &lt;code&gt;&quot;[file].map&quot;&lt;/code&gt; is used.</source>
          <target state="translated">소스 맵의 이름을 지정하는 방법을 구성하십시오. 기본적으로 &lt;code&gt;&quot;[file].map&quot;&lt;/code&gt; 이 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="a4459ba6d2659b573b996acb98b6064bf3f7daf9" translate="yes" xml:space="preserve">
          <source>Configure how the library will be exposed. Any one of the following options can be used. Please note that this option works in conjunction with the value assigned to &lt;a href=&quot;#output-library&quot;&gt;&lt;code&gt;output.library&lt;/code&gt;&lt;/a&gt;. For the following examples, it is assumed that this value is configured as &lt;code&gt;MyLibrary&lt;/code&gt;.</source>
          <target state="translated">라이브러리가 노출되는 방식을 구성하십시오. 다음 옵션 중 하나를 사용할 수 있습니다. 이 옵션은 &lt;a href=&quot;#output-library&quot;&gt; &lt;code&gt;output.library&lt;/code&gt; 에&lt;/a&gt; 지정된 값과 함께 작동합니다 . 다음 예제에서는이 값이 &lt;code&gt;MyLibrary&lt;/code&gt; 로 구성된 것으로 가정합니다 .</target>
        </trans-unit>
        <trans-unit id="baeb2e91265be01b8d0effc870b22dbdf089cb68" translate="yes" xml:space="preserve">
          <source>Configure loaders to skip type checking.</source>
          <target state="translated">유형 검사를 건너 뛰도록 로더를 구성하십시오.</target>
        </trans-unit>
        <trans-unit id="57c5e637c1d3171f48a96ec424c3aeed492a1770" translate="yes" xml:space="preserve">
          <source>Configure the generated ident</source>
          <target state="translated">생성 된 ID 구성</target>
        </trans-unit>
        <trans-unit id="5aeb15fc98240f6a5a535a86ed7c8315a2d9f893" translate="yes" xml:space="preserve">
          <source>Configure which module or modules will be exposed via the &lt;code&gt;libraryTarget&lt;/code&gt;. The default &lt;code&gt;_entry_return_&lt;/code&gt; value is the namespace or default module returned by your entry file. The examples below demonstrate the effect of this config when using &lt;code&gt;libraryTarget: &quot;var&quot;&lt;/code&gt;, but any target may be used.</source>
          <target state="translated">&lt;code&gt;libraryTarget&lt;/code&gt; 을 통해 노출 될 모듈을 구성하십시오 . 기본 &lt;code&gt;_entry_return_&lt;/code&gt; 값은 입력 파일이 반환 한 네임 스페이스 또는 기본 모듈입니다. 아래 예제는 &lt;code&gt;libraryTarget: &quot;var&quot;&lt;/code&gt; 사용할 때이 구성의 영향을 보여 주지만 모든 대상을 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="029298da9c6d161ae3944011b3d4718f78ee8f55" translate="yes" xml:space="preserve">
          <source>Configuring the &lt;code&gt;output&lt;/code&gt; configuration options tells webpack how to write the compiled files to disk. Note that, while there can be multiple &lt;code&gt;entry&lt;/code&gt; points, only one &lt;code&gt;output&lt;/code&gt; configuration is specified.</source>
          <target state="translated">구성 &lt;code&gt;output&lt;/code&gt; 구성 옵션은 디스크에 컴파일 된 파일을 작성하는 방법을 웹팩 알려줍니다. &lt;code&gt;entry&lt;/code&gt; 점이 여러 개있을 수 있지만 &lt;code&gt;output&lt;/code&gt; 구성은 하나만 지정됩니다.</target>
        </trans-unit>
        <trans-unit id="01020296bd681be79595ef24bba63f1af433a1c5" translate="yes" xml:space="preserve">
          <source>Configuring the Loader</source>
          <target state="translated">로더 구성</target>
        </trans-unit>
        <trans-unit id="28c2a8cdbb5934c857c998dc17b81a05adb25c8b" translate="yes" xml:space="preserve">
          <source>Configuring the Project</source>
          <target state="translated">프로젝트 구성</target>
        </trans-unit>
        <trans-unit id="c4824ca3a5912efbea89a4a1170c78e62bbcdee3" translate="yes" xml:space="preserve">
          <source>Consider removing this scenario in favor of the DllPlugin, which provides a better vendor-splitting.</source>
          <target state="translated">더 나은 벤더 분할을 제공하는 DllPlugin을 위해이 시나리오를 제거하십시오.</target>
        </trans-unit>
        <trans-unit id="4cccf26df7da12dd5539f5bc53fd6da6b8c6292d" translate="yes" xml:space="preserve">
          <source>ConsolePlugin</source>
          <target state="translated">ConsolePlugin</target>
        </trans-unit>
        <trans-unit id="5097db7d2b9bba7655dfe77f8e6372377a797ff6" translate="yes" xml:space="preserve">
          <source>ConstPlugin</source>
          <target state="translated">ConstPlugin</target>
        </trans-unit>
        <trans-unit id="2208194ec620f2383931ffab02ece4c0c0f5ccab" translate="yes" xml:space="preserve">
          <source>Contains the actual configuration object.</source>
          <target state="translated">실제 구성 개체를 포함합니다.</target>
        </trans-unit>
        <trans-unit id="454331227511b8d6726ba23606726e5dba70a0ea" translate="yes" xml:space="preserve">
          <source>Contains the full, absolute filesystem path to the configuration file.</source>
          <target state="translated">구성 파일에 대한 전체 절대 파일 시스템 경로를 포함합니다.</target>
        </trans-unit>
        <trans-unit id="d75b37c831a7e00e43c504a0a6fcdcd2340082fb" translate="yes" xml:space="preserve">
          <source>Content Callback</source>
          <target state="translated">콘텐츠 콜백</target>
        </trans-unit>
        <trans-unit id="67a698fe784e58e02cabab3ffbacd47ed828bcb7" translate="yes" xml:space="preserve">
          <source>Content Security Policies</source>
          <target state="translated">콘텐츠 보안 정책</target>
        </trans-unit>
        <trans-unit id="b3f68370dbac0f9c015160915e40e9fdab0dcd75" translate="yes" xml:space="preserve">
          <source>Context: Resolves a module within a given context.</source>
          <target state="translated">컨텍스트 : 주어진 컨텍스트 내에서 모듈을 해결합니다.</target>
        </trans-unit>
        <trans-unit id="001b2574a19311bb3f17c6c3098a19bae7997b98" translate="yes" xml:space="preserve">
          <source>ContextReplacementPlugin</source>
          <target state="translated">ContextReplacementPlugin</target>
        </trans-unit>
        <trans-unit id="669ad6cb7a7439319b4db9629d93459e543f9e0d" translate="yes" xml:space="preserve">
          <source>Continue the update process (as long as &lt;code&gt;module.hot.status() === 'ready'&lt;/code&gt;).</source>
          <target state="translated">업데이트 프로세스를 계속 진행하십시오 ( &lt;code&gt;module.hot.status() === 'ready'&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="2d82a4b27a4b305690d5ac612046a955778a9fa5" translate="yes" xml:space="preserve">
          <source>Contributing</source>
          <target state="translated">Contributing</target>
        </trans-unit>
        <trans-unit id="f399777d75d729ee19f056fbd4e43d75b61811a8" translate="yes" xml:space="preserve">
          <source>Control options related to watching the files.</source>
          <target state="translated">파일 시청과 관련된 제어 옵션.</target>
        </trans-unit>
        <trans-unit id="e516b0cd166538a9b77e217bd00a2c007f67919b" translate="yes" xml:space="preserve">
          <source>Controls verbosity of the lifecycle messaging, e.g. the &lt;code&gt;Started watching files...&lt;/code&gt; log. Setting &lt;code&gt;info-verbosity&lt;/code&gt; to &lt;code&gt;verbose&lt;/code&gt; will also message to console at the beginning and the end of incremental build. &lt;code&gt;info-verbosity&lt;/code&gt; is set to &lt;code&gt;info&lt;/code&gt; by default.</source>
          <target state="translated">수명주기 메시징의 세부 정보를 제어합니다 (예 : &lt;code&gt;Started watching files...&lt;/code&gt; 로그). &lt;code&gt;info-verbosity&lt;/code&gt; 를 &lt;code&gt;verbose&lt;/code&gt; 로 설정하면 증분 빌드의 시작과 끝에 콘솔에 메시지 가 표시 됩니다. &lt;code&gt;info-verbosity&lt;/code&gt; 는 기본적 으로 &lt;code&gt;info&lt;/code&gt; 로 설정되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="39395b19d3c0cfea722a4d8275649b122cd2cc7e" translate="yes" xml:space="preserve">
          <source>Controls which modules are selected by this cache group. Omitting it selects all modules. It can match the absolute module resource path or chunk names. When a chunk name is matched, all modules in the chunk are selected.</source>
          <target state="translated">이 캐시 그룹에 의해 선택된 모듈을 제어합니다. 생략하면 모든 모듈이 선택됩니다. 절대 모듈 자원 경로 또는 청크 이름과 일치 할 수 있습니다. 청크 이름이 일치하면 청크의 모든 모듈이 선택됩니다.</target>
        </trans-unit>
        <trans-unit id="1f426c12e382f599579be38bd20549851a638ce6" translate="yes" xml:space="preserve">
          <source>Converts relative URLs to absolute urls, when source maps are enabled</source>
          <target state="translated">소스 맵이 활성화 된 경우 상대 URL을 절대 URL로 변환</target>
        </trans-unit>
        <trans-unit id="4478348a81e692609f050811b8ea83316117550b" translate="yes" xml:space="preserve">
          <source>Copies files, regardless of modification when using watch or &lt;code&gt;webpack-dev-server&lt;/code&gt;. All files are copied on first build, regardless of this option</source>
          <target state="translated">watch 또는 &lt;code&gt;webpack-dev-server&lt;/code&gt; 사용시 수정에 관계없이 파일을 복사 합니다 . 이 옵션에 관계없이 모든 파일은 첫 번째 빌드에서 복사됩니다</target>
        </trans-unit>
        <trans-unit id="75b5dab1972ac646f88dcdfdf9867a170685bfaa" translate="yes" xml:space="preserve">
          <source>Copies individual files or entire directories to the build directory</source>
          <target state="translated">개별 파일 또는 전체 디렉토리를 빌드 디렉토리에 복사합니다.</target>
        </trans-unit>
        <trans-unit id="434df9547813406e50c0c80006916b8b53f3643e" translate="yes" xml:space="preserve">
          <source>CopyWebpackPlugin</source>
          <target state="translated">CopyWebpackPlugin</target>
        </trans-unit>
        <trans-unit id="d987992de2af617a5a9bc22868237975dca6bfe7" translate="yes" xml:space="preserve">
          <source>Courtesy of &lt;a href=&quot;https://twitter.com/_developit/status/769583291666169862&quot;&gt;Jason Miller&lt;/a&gt;</source>
          <target state="translated">씨의 &lt;a href=&quot;https://twitter.com/_developit/status/769583291666169862&quot;&gt;제이슨 밀러&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="9b907fd91e48bd5f3a3eb6de42b95ae7cf51e0c3" translate="yes" xml:space="preserve">
          <source>Create a &lt;code&gt;commons&lt;/code&gt; chunk, which includes all code shared between entry points.</source>
          <target state="translated">크리에이트 &lt;code&gt;commons&lt;/code&gt; 진입 점 사이에 공유하는 모든 코드가 포함되어 덩어리를.</target>
        </trans-unit>
        <trans-unit id="056457363b8cb7965d2efa981afb6fc721c99d55" translate="yes" xml:space="preserve">
          <source>Create a &lt;code&gt;vendors&lt;/code&gt; chunk, which includes all code from &lt;code&gt;node_modules&lt;/code&gt; in the whole application.</source>
          <target state="translated">전체 애플리케이션 에서 &lt;code&gt;node_modules&lt;/code&gt; 의 모든 코드를 포함 하는 &lt;code&gt;vendors&lt;/code&gt; 청크를 작성하십시오 .</target>
        </trans-unit>
        <trans-unit id="b54f7c51b57bf29242ed3e36cb0e78e5a75018e0" translate="yes" xml:space="preserve">
          <source>Create additional assets for the chunks.</source>
          <target state="translated">청크에 대한 추가 자산을 만듭니다.</target>
        </trans-unit>
        <trans-unit id="5e2e646fc0a653dc91c8b6f916f1e9e94df769ad" translate="yes" xml:space="preserve">
          <source>Create additional assets for the compilation. This hook can be used to download an image, for example:</source>
          <target state="translated">컴파일 할 추가 자산을 만듭니다. 이 후크는 이미지를 다운로드하는 데 사용할 수 있습니다 (예 :</target>
        </trans-unit>
        <trans-unit id="d92acd18ec73265188c27a675aaf7e93d1d544a6" translate="yes" xml:space="preserve">
          <source>Create aliases to &lt;code&gt;import&lt;/code&gt; or &lt;code&gt;require&lt;/code&gt; certain modules more easily. For example, to alias a bunch of commonly used &lt;code&gt;src/&lt;/code&gt; folders:</source>
          <target state="translated">별명을 작성하여 특정 모듈을 더 쉽게 &lt;code&gt;import&lt;/code&gt; 오거나 &lt;code&gt;require&lt;/code&gt; 하십시오 . 예를 들어, 일반적으로 사용되는 &lt;code&gt;src/&lt;/code&gt; 폴더 를 별명으로 지정하려면 다음을 수행하십시오.</target>
        </trans-unit>
        <trans-unit id="3f2db0869c76ff4d261a43827abdcf5a1c68c710" translate="yes" xml:space="preserve">
          <source>Create the two config files:</source>
          <target state="translated">두 개의 구성 파일을 작성하십시오.</target>
        </trans-unit>
        <trans-unit id="60f725f2ad5de7dd5053b7780561165cca6a1d00" translate="yes" xml:space="preserve">
          <source>Creates a &lt;code&gt;manifest.json&lt;/code&gt; which is written to the given &lt;code&gt;path&lt;/code&gt;. It contains mappings from require and import requests, to module ids. It is used by the &lt;code&gt;DllReferencePlugin&lt;/code&gt;.</source>
          <target state="translated">주어진 &lt;code&gt;path&lt;/code&gt; 쓰여지 는 &lt;code&gt;manifest.json&lt;/code&gt; 을 만듭니다 . 필수 및 가져 오기 요청에서 모듈 ID 로의 맵핑이 포함됩니다. &lt;code&gt;DllReferencePlugin&lt;/code&gt; 에 의해 사용됩니다 .</target>
        </trans-unit>
        <trans-unit id="857054f086ed1cc3cc6d636746933b3522c4d5e8" translate="yes" xml:space="preserve">
          <source>Creates an extracting loader from an existing loader. Supports loaders of type &lt;code&gt;{ loader: [name]-loader -&amp;gt; {String}, options: {} -&amp;gt; {Object} }&lt;/code&gt;.</source>
          <target state="translated">기존 로더에서 추출 로더를 작성합니다. &lt;code&gt;{ loader: [name]-loader -&amp;gt; {String}, options: {} -&amp;gt; {Object} }&lt;/code&gt; 로더를 지원합니다 .</target>
        </trans-unit>
        <trans-unit id="b8da3b8040cdfc045e69143f1fd5e254cec6befb" translate="yes" xml:space="preserve">
          <source>Creating a Bundle</source>
          <target state="translated">번들 만들기</target>
        </trans-unit>
        <trans-unit id="8a45d339a638ac247a1574d733c588c338c1cb6e" translate="yes" xml:space="preserve">
          <source>Credit</source>
          <target state="translated">Credit</target>
        </trans-unit>
        <trans-unit id="27d25b13436f48241892f2490c03b2bab9a05fc1" translate="yes" xml:space="preserve">
          <source>Cross-Origin Policy</source>
          <target state="translated">교차 출처 정책</target>
        </trans-unit>
        <trans-unit id="4a3b96fa19f58ec88be13ccd42724089c811cc6e" translate="yes" xml:space="preserve">
          <source>CssWebpackPlugin</source>
          <target state="translated">CssWebpackPlugin</target>
        </trans-unit>
        <trans-unit id="248c908368cf8fe57b5456c03f90c4b01d59670c" translate="yes" xml:space="preserve">
          <source>Ctrl-C</source>
          <target state="translated">Ctrl-C</target>
        </trans-unit>
        <trans-unit id="e7cb6e4a465aa7019b08da2fbd2daebc14018838" translate="yes" xml:space="preserve">
          <source>Current directory</source>
          <target state="translated">현재 디렉토리</target>
        </trans-unit>
        <trans-unit id="aa52b3fbc27cd7103334907a8d3cc92e212135bc" translate="yes" xml:space="preserve">
          <source>Currently useless. Ensures compatibility with other module loaders.</source>
          <target state="translated">현재 쓸모가 없습니다. 다른 모듈 로더와의 호환성을 보장합니다.</target>
        </trans-unit>
        <trans-unit id="9d21b726d8abf6d0f1ec67bcf1a64a0fd8ffd0c8" translate="yes" xml:space="preserve">
          <source>Custom Angular modules</source>
          <target state="translated">커스텀 앵귤러 모듈</target>
        </trans-unit>
        <trans-unit id="bca4b1427afbddc56ee57b9ae9e4eca963df2a63" translate="yes" xml:space="preserve">
          <source>Custom File Systems</source>
          <target state="translated">커스텀 파일 시스템</target>
        </trans-unit>
        <trans-unit id="14662ba0bd860469487e8b7cb5fa5a11fa760bf0" translate="yes" xml:space="preserve">
          <source>Custom Hooks</source>
          <target state="translated">커스텀 훅</target>
        </trans-unit>
        <trans-unit id="12692a94377b88c35509dae1863ffa6286551c42" translate="yes" xml:space="preserve">
          <source>Custom Minify Function</source>
          <target state="translated">맞춤 축소 기능</target>
        </trans-unit>
        <trans-unit id="cfcee953500ab100ee942415ed1c7a354e3deb21" translate="yes" xml:space="preserve">
          <source>Custom PostCSS Parser</source>
          <target state="translated">사용자 정의 PostCSS 파서</target>
        </trans-unit>
        <trans-unit id="1935666da3524024482703c561ee425d35940966" translate="yes" xml:space="preserve">
          <source>Custom PostCSS Stringifier</source>
          <target state="translated">커스텀 PostCSS Stringifier</target>
        </trans-unit>
        <trans-unit id="fd639b0297bc6e766bc745274491d13ae5484a1e" translate="yes" xml:space="preserve">
          <source>Custom PostCSS Syntax</source>
          <target state="translated">사용자 정의 PostCSS 구문</target>
        </trans-unit>
        <trans-unit id="691932b941818a3b279949fb3bf2b8f62422b38a" translate="yes" xml:space="preserve">
          <source>Custom Reporter</source>
          <target state="translated">맞춤형 기자</target>
        </trans-unit>
        <trans-unit id="998d8ef3657187784c37f9bfd061101a4e386a2c" translate="yes" xml:space="preserve">
          <source>Custom hashes can be used by specifying a hash with the following format: &lt;code&gt;[&amp;lt;hashType&amp;gt;:hash:&amp;lt;digestType&amp;gt;:&amp;lt;length&amp;gt;]&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;[&amp;lt;hashType&amp;gt;:hash:&amp;lt;digestType&amp;gt;:&amp;lt;length&amp;gt;]&lt;/code&gt; 형식으로 해시를 지정하여 사용자 지정 해시를 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="2fcc0c992a4dca7da996c179e8ede232bf5d21e4" translate="yes" xml:space="preserve">
          <source>Custom parameters can be passed to webpack by adding two dashes between the &lt;code&gt;npm run build&lt;/code&gt; command and your parameters, e.g. &lt;code&gt;npm run build -- --colors&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;npm run build&lt;/code&gt; 명령과 매개 변수 사이에 두 개의 대시 ( 예 : &lt;code&gt;npm run build -- --colors&lt;/code&gt; ---colors)를 추가하여 사용자 정의 매개 변수를 웹팩으로 전달할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="39be4a09fbe372ca9a7fe37819a308bb0b52ad1e" translate="yes" xml:space="preserve">
          <source>Custom plugins/loaders</source>
          <target state="translated">커스텀 플러그인 / 로더</target>
        </trans-unit>
        <trans-unit id="8c1574930d92cf1eadc4595b42aeee1c54d40ce5" translate="yes" xml:space="preserve">
          <source>Customize the filenames of hot update chunks. See &lt;a href=&quot;#output-filename&quot;&gt;&lt;code&gt;output.filename&lt;/code&gt;&lt;/a&gt; option for details on the possible values.</source>
          <target state="translated">핫 업데이트 청크의 파일 이름을 사용자 지정하십시오. 가능한 값에 대한 자세한 내용 은 &lt;a href=&quot;#output-filename&quot;&gt; &lt;code&gt;output.filename&lt;/code&gt; &lt;/a&gt; 옵션을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="4c8eadc99d2f8bde78fb161aaa64f4a4e0ee7afe" translate="yes" xml:space="preserve">
          <source>Customize the main hot update filename. See &lt;a href=&quot;#output-filename&quot;&gt;&lt;code&gt;output.filename&lt;/code&gt;&lt;/a&gt; option for details on the possible values.</source>
          <target state="translated">기본 핫 업데이트 파일 이름을 사용자 정의하십시오. 가능한 값에 대한 자세한 내용 은 &lt;a href=&quot;#output-filename&quot;&gt; &lt;code&gt;output.filename&lt;/code&gt; &lt;/a&gt; 옵션을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="4eab89a217a96fc1b34849fdacf58ef4c1bb8cb3" translate="yes" xml:space="preserve">
          <source>Customize the names used in each source map's &lt;code&gt;sources&lt;/code&gt; array. This can be done by passing a template string or function. For example, when using &lt;code&gt;devtool: 'eval'&lt;/code&gt;, this is the default:</source>
          <target state="translated">각 소스 맵의 &lt;code&gt;sources&lt;/code&gt; 배열 에서 사용되는 이름을 사용자 정의하십시오 . 템플릿 문자열이나 함수를 전달하면됩니다. 예를 들어 &lt;code&gt;devtool: 'eval'&lt;/code&gt; 경우 이것이 기본값입니다.</target>
        </trans-unit>
        <trans-unit id="bbf0ff6847bb346fc0637f6c861a6eb4fc1bf905" translate="yes" xml:space="preserve">
          <source>Customized Loader</source>
          <target state="translated">맞춤형 로더</target>
        </trans-unit>
        <trans-unit id="c986396b68941eb10ad6ff5c9bb2b1fa314bcc04" translate="yes" xml:space="preserve">
          <source>Debug Options</source>
          <target state="translated">디버그 옵션</target>
        </trans-unit>
        <trans-unit id="80df87c6227bd3f89ab08f7284e2d6c25f3dd63b" translate="yes" xml:space="preserve">
          <source>Debugging Optimization Bailouts</source>
          <target state="translated">최적화 Bailouts 디버깅</target>
        </trans-unit>
        <trans-unit id="3d0eaf72c69b7eb81365ae9ffd1f7924d71e78f6" translate="yes" xml:space="preserve">
          <source>Decorates the module template by wrapping each module in a &lt;code&gt;eval&lt;/code&gt; annotated with &lt;code&gt;// @sourceURL&lt;/code&gt;.</source>
          <target state="translated">A의 각 모듈을 배치함으로써 모듈 템플릿 장식 &lt;code&gt;eval&lt;/code&gt; 주석과 &lt;code&gt;// @sourceURL&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="d2f368cead2528a3444f22b6e4f3ee3e7fd688c2" translate="yes" xml:space="preserve">
          <source>Decorates the templates by generating a SourceMap for each chunk.</source>
          <target state="translated">각 청크에 대한 SourceMap을 생성하여 템플리트를 장식합니다.</target>
        </trans-unit>
        <trans-unit id="c849cd65bfede029da481524096bf18cb3e26d85" translate="yes" xml:space="preserve">
          <source>Decrease the total size of the compilation to increase build performance. Try to keep chunks small.</source>
          <target state="translated">컴파일 성능을 높이려면 컴파일의 전체 크기를 줄이십시오. 덩어리를 작게 유지하십시오.</target>
        </trans-unit>
        <trans-unit id="caa29382a8f4fa6fa0d75fbe4113f661882d15ce" translate="yes" xml:space="preserve">
          <source>DedupePlugin</source>
          <target state="translated">DedupePlugin</target>
        </trans-unit>
        <trans-unit id="6037f7cae1d39cb0249dc36931fa858570fad32d" translate="yes" xml:space="preserve">
          <source>Deduplicates modules and adds runtime code.</source>
          <target state="translated">모듈을 중복 제거하고 런타임 코드를 추가합니다.</target>
        </trans-unit>
        <trans-unit id="808d7dca8a74d84af27a2d6602c3d786de45fe1e" translate="yes" xml:space="preserve">
          <source>Default</source>
          <target state="translated">Default</target>
        </trans-unit>
        <trans-unit id="7df3641b6238b0a13072aec9c1c721a92c512cd6" translate="yes" xml:space="preserve">
          <source>Default cache keys:</source>
          <target state="translated">기본 캐시 키 :</target>
        </trans-unit>
        <trans-unit id="1db72e6a4b72e54bf9e63c8770fc4059daac1145" translate="yes" xml:space="preserve">
          <source>Default configuration was chosen to fit web performance best practices but the optimum strategy for your project might defer depending on the nature of it.</source>
          <target state="translated">기본 성능 구성은 웹 성능 모범 사례에 맞도록 선택되었지만 프로젝트의 특성에 따라 프로젝트에 대한 최적의 전략이 연기 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ebd3d869a355a884a2d2b5fd245d202b8fab7dd2" translate="yes" xml:space="preserve">
          <source>Default is &lt;code&gt;false&lt;/code&gt;: each entry chunk embeds runtime.</source>
          <target state="translated">기본값은 &lt;code&gt;false&lt;/code&gt; : 각 항목 청크에 런타임이 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="c2580d5b35883bf38b519d50b0c81313e0cfba9e" translate="yes" xml:space="preserve">
          <source>Default keys:</source>
          <target state="translated">기본 키 :</target>
        </trans-unit>
        <trans-unit id="a30f74d73d67a88a2c918ad834da4e203d5c0f48" translate="yes" xml:space="preserve">
          <source>Default string is null. You could provide a string such as &lt;code&gt;=== Build done ===&lt;/code&gt;</source>
          <target state="translated">기본 문자열은 null입니다. &lt;code&gt;=== Build done ===&lt;/code&gt; 과 같은 문자열을 제공 할 수 있습니다. 빌드 완료 ===</target>
        </trans-unit>
        <trans-unit id="bdffe654f8554300a98d2acefcbbf1d894339b2b" translate="yes" xml:space="preserve">
          <source>Default value</source>
          <target state="translated">기본값</target>
        </trans-unit>
        <trans-unit id="29174d0b2e09683e01266cc9ca282ecb2a3452f2" translate="yes" xml:space="preserve">
          <source>Default: &lt;code&gt;&quot;mock&quot;&lt;/code&gt;</source>
          <target state="translated">기본값 : &lt;code&gt;&quot;mock&quot;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d3f4fdc19015bd4bddba8a290839328edc7a7d79" translate="yes" xml:space="preserve">
          <source>Default: &lt;code&gt;&quot;var&quot;&lt;/code&gt;</source>
          <target state="translated">기본값 : &lt;code&gt;&quot;var&quot;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="011109a94964b6c24000b81a9a57c20cdb93224a" translate="yes" xml:space="preserve">
          <source>Default: &lt;code&gt;_entry_return_&lt;/code&gt;</source>
          <target state="translated">기본값 : &lt;code&gt;_entry_return_&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="614188609a5c964071cad1f8bd6a9a468d7e820f" translate="yes" xml:space="preserve">
          <source>Default: &lt;code&gt;false&lt;/code&gt;</source>
          <target state="translated">기본값 : &lt;code&gt;false&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="4d0b83b26a1706be41ebbd280d1bc7d8f1a895a8" translate="yes" xml:space="preserve">
          <source>Default: &lt;code&gt;true&lt;/code&gt;</source>
          <target state="translated">기본값 : &lt;code&gt;true&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="428819bf9e83cebda50efafb08cd2534c1583949" translate="yes" xml:space="preserve">
          <source>Defaults</source>
          <target state="translated">Defaults</target>
        </trans-unit>
        <trans-unit id="4b35d63a3d4db72ca17b6035d81afbacc478604e" translate="yes" xml:space="preserve">
          <source>Defaults: Example 1</source>
          <target state="translated">기본값 : 예 1</target>
        </trans-unit>
        <trans-unit id="b677e3d52a88827883cc99ad9a327a886d441ccb" translate="yes" xml:space="preserve">
          <source>Defaults: Example 2</source>
          <target state="translated">기본값 : 예 2</target>
        </trans-unit>
        <trans-unit id="360e1bc30e53b40d4a846fa609f8efe30ef7465d" translate="yes" xml:space="preserve">
          <source>Define &lt;a href=&quot;../configuration/devtool&quot;&gt;source map type&lt;/a&gt; for the bundled resources</source>
          <target state="translated">번들 자원에 대한 &lt;a href=&quot;../configuration/devtool&quot;&gt;소스 맵 유형&lt;/a&gt; 정의</target>
        </trans-unit>
        <trans-unit id="a2bbc1f6966718fbb58279c920ea20d96e5e2e78" translate="yes" xml:space="preserve">
          <source>Define any free variable, see &lt;a href=&quot;../guides/shimming&quot;&gt;shimming&lt;/a&gt;</source>
          <target state="translated">자유 변수 정의, &lt;a href=&quot;../guides/shimming&quot;&gt;shimming&lt;/a&gt; 참조</target>
        </trans-unit>
        <trans-unit id="968b857381061788cb55c83ca7e3c4534c2a54cf" translate="yes" xml:space="preserve">
          <source>Define constants for identifier.</source>
          <target state="translated">식별자 상수를 정의하십시오.</target>
        </trans-unit>
        <trans-unit id="83aca61196e55cfac8898e588878386369275c06" translate="yes" xml:space="preserve">
          <source>DefinePlugin</source>
          <target state="translated">DefinePlugin</target>
        </trans-unit>
        <trans-unit id="ead88ae0c42890aadcdae1c734788f77771f2790" translate="yes" xml:space="preserve">
          <source>Defines &lt;code&gt;module.hot&lt;/code&gt; as &lt;code&gt;false&lt;/code&gt; to remove hot module replacement code.</source>
          <target state="translated">핫 모듈 교체 코드를 제거하려면 &lt;code&gt;module.hot&lt;/code&gt; 을 &lt;code&gt;false&lt;/code&gt; 로 정의합니다 .</target>
        </trans-unit>
        <trans-unit id="b04e88c33c975492766f1e28aefd7f299254d7d3" translate="yes" xml:space="preserve">
          <source>Defines a &lt;code&gt;{RegExp}&lt;/code&gt; to match some parts of the file path. These capture groups can be reused in the name property using &lt;code&gt;[N]&lt;/code&gt; placeholder. Note that &lt;code&gt;[0]&lt;/code&gt; will be replaced by the entire path of the file, whereas &lt;code&gt;[1]&lt;/code&gt; will contain the first capturing parenthesis of your &lt;code&gt;{RegExp}&lt;/code&gt; and so on...</source>
          <target state="translated">파일 경로의 일부와 일치하도록 &lt;code&gt;{RegExp}&lt;/code&gt; 를 정의합니다 . 이러한 캡처 그룹은 &lt;code&gt;[N]&lt;/code&gt; 자리 표시자를 사용하여 이름 속성에서 재사용 할 수 있습니다 . 참고 &lt;code&gt;[0]&lt;/code&gt; 반면, 파일의 전체 경로에 의해 대체 될 것이다 &lt;code&gt;[1]&lt;/code&gt; 가 최초의 캡쳐하여 괄호 포함 &lt;code&gt;{RegExp}&lt;/code&gt; 등등과 ...</target>
        </trans-unit>
        <trans-unit id="935ceeb111b75412bc9b75822b890c2f58232283" translate="yes" xml:space="preserve">
          <source>Defines the value that will be returned when a consumer makes a &lt;code&gt;require&lt;/code&gt; call to the module (defaults to a new object).</source>
          <target state="translated">소비자가 모듈을 &lt;code&gt;require&lt;/code&gt; 때 반환 될 값을 정의합니다 (기본값은 새 객체).</target>
        </trans-unit>
        <trans-unit id="5793d12434d9f22ed375eb009d2501c750de4cd3" translate="yes" xml:space="preserve">
          <source>Defining &lt;code&gt;configFile&lt;/code&gt; or using &lt;code&gt;eslint -c path/.eslintrc&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;configFile&lt;/code&gt; 정의 또는 &lt;code&gt;eslint -c path/.eslintrc&lt;/code&gt; 사용</target>
        </trans-unit>
        <trans-unit id="e52c854d5631eec7468ba4727b4c77eb745f2965" translate="yes" xml:space="preserve">
          <source>Demo</source>
          <target state="translated">Demo</target>
        </trans-unit>
        <trans-unit id="3e87fc989e1193a3d6ca244b02919b6518cbc627" translate="yes" xml:space="preserve">
          <source>Dependency Graph</source>
          <target state="translated">의존성 그래프</target>
        </trans-unit>
        <trans-unit id="db47f0c33969776096cb6a17a01879d310cd54b7" translate="yes" xml:space="preserve">
          <source>Dependency Management</source>
          <target state="translated">의존성 관리</target>
        </trans-unit>
        <trans-unit id="ef7b1d20b0a5a77b56644a7ce10eab64d0d6ebaf" translate="yes" xml:space="preserve">
          <source>Depending on how you are using webpack, there are multiple ways to use plugins.</source>
          <target state="translated">웹팩 사용 방법에 따라 플러그인을 사용하는 여러 가지 방법이 있습니다.</target>
        </trans-unit>
        <trans-unit id="5999df43344c6ddfe854c7a8b9818ee49ecabeef" translate="yes" xml:space="preserve">
          <source>Depending on how you configure the HtmlWebpackPlugin you may encounter conflicts with the polymer-webpack-loader.</source>
          <target state="translated">HtmlWebpackPlugin 구성 방법에 따라 polymer-webpack-loader와 충돌이 발생할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="9f16fdb1a04497dc25830b3115af9386478ec804" translate="yes" xml:space="preserve">
          <source>Depending on need, any one of these built-in resolver used by the &lt;code&gt;compiler&lt;/code&gt; can be customized via plugins as such:</source>
          <target state="translated">필요에 따라 &lt;code&gt;compiler&lt;/code&gt; 에서 사용하는 내장 리졸버 중 하나 를 플러그인을 통해 다음과 같이 사용자 정의 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="726b6fe332ddcbb745c1faaf56842b8bb2e9cb7f" translate="yes" xml:space="preserve">
          <source>Depending on the config option &lt;code&gt;node.__dirname&lt;/code&gt;:</source>
          <target state="translated">구성 옵션 &lt;code&gt;node.__dirname&lt;/code&gt; 에 따라 :</target>
        </trans-unit>
        <trans-unit id="75d8e934e6e8acddf4fac4834e7412039f96531b" translate="yes" xml:space="preserve">
          <source>Depending on the config option &lt;code&gt;node.__filename&lt;/code&gt;:</source>
          <target state="translated">구성 옵션 &lt;code&gt;node.__filename&lt;/code&gt; 에 따라 :</target>
        </trans-unit>
        <trans-unit id="09d2b7408c6cb8e4513a527e61456188783a4ddb" translate="yes" xml:space="preserve">
          <source>Depending on the hook type, &lt;code&gt;tapAsync&lt;/code&gt; and &lt;code&gt;tapPromise&lt;/code&gt; may also be available.</source>
          <target state="translated">후크 유형에 따라 &lt;code&gt;tapAsync&lt;/code&gt; 및 &lt;code&gt;tapPromise&lt;/code&gt; 를 사용할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="9071f79345179a6e8f22930d2be8ed59b6cb439f" translate="yes" xml:space="preserve">
          <source>Depending on the hooks used and &lt;code&gt;tap&lt;/code&gt; methods applied, plugins can function in a different number of ways. The way this works is closely related to the &lt;a href=&quot;https://github.com/webpack/tapable#tapable&quot;&gt;hooks&lt;/a&gt; provided by &lt;code&gt;Tapable&lt;/code&gt;. The &lt;a href=&quot;compiler-hooks#hooks&quot;&gt;compiler hooks&lt;/a&gt; each note the underlying &lt;code&gt;Tapable&lt;/code&gt; hook indicating which &lt;code&gt;tap&lt;/code&gt; methods are available.</source>
          <target state="translated">사용 된 후크 및 적용된 &lt;code&gt;tap&lt;/code&gt; 방법에 따라 플러그인은 다른 방식으로 작동 할 수 있습니다. 이것이 작동하는 방식은 &lt;code&gt;Tapable&lt;/code&gt; 이 제공 하는 &lt;a href=&quot;https://github.com/webpack/tapable#tapable&quot;&gt;후크&lt;/a&gt; 와 밀접한 관련이 있습니다 . &lt;a href=&quot;compiler-hooks#hooks&quot;&gt;컴파일러 후크&lt;/a&gt; 각 참고 기초 &lt;code&gt;Tapable&lt;/code&gt; 있는지를 나타내는 후크 &lt;code&gt;tap&lt;/code&gt; 방법을 사용할 수있다.</target>
        </trans-unit>
        <trans-unit id="34a1ab04e3b77ce34e1df069bd72f7850490651c" translate="yes" xml:space="preserve">
          <source>Deprecated context properties</source>
          <target state="translated">더 이상 사용되지 않는 컨텍스트 속성</target>
        </trans-unit>
        <trans-unit id="55f8ebc805e65b5b71ddafdae390e3be2bcd69af" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="translated">Description</target>
        </trans-unit>
        <trans-unit id="739a063990551ecc759af8efb51aae87f2023c07" translate="yes" xml:space="preserve">
          <source>Detailed Explanation of a Simple Module Bundler</source>
          <target state="translated">간단한 모듈 번 들러에 대한 자세한 설명</target>
        </trans-unit>
        <trans-unit id="3021d37eec22538161a2f49e761c735872d91d87" translate="yes" xml:space="preserve">
          <source>DevServer</source>
          <target state="translated">DevServer</target>
        </trans-unit>
        <trans-unit id="4c17aadf5117487aab7bc50cbf056caf3977cc31" translate="yes" xml:space="preserve">
          <source>Development</source>
          <target state="translated">Development</target>
        </trans-unit>
        <trans-unit id="33ab938eb9f180caddf9e238c5584bbbca95bce7" translate="yes" xml:space="preserve">
          <source>Development - Vagrant</source>
          <target state="translated">개발-방랑자</target>
        </trans-unit>
        <trans-unit id="42a921dc8bf7915b4ed72f9233972474b8f2e9b7" translate="yes" xml:space="preserve">
          <source>Development: Vagrant</source>
          <target state="translated">개발 : 방랑자</target>
        </trans-unit>
        <trans-unit id="419d26b8118c00ffdf42ba0d5fe85c50956bcc4a" translate="yes" xml:space="preserve">
          <source>Devtool</source>
          <target state="translated">Devtool</target>
        </trans-unit>
        <trans-unit id="29dc2a1ec96d9045ea03542dbefbb29112fc9a43" translate="yes" xml:space="preserve">
          <source>Did you know: The example seen above is extremely similar to the &lt;a href=&quot;https://github.com/webpack/webpack/blob/e7087ffeda7fa37dfe2ca70b5593c6e899629a2c/bin/webpack.js#L290-L292&quot;&gt;webpack runtime itself!&lt;/a&gt; There are lots of great usage examples hiding in the &lt;a href=&quot;https://github.com/webpack/webpack&quot;&gt;webpack source code&lt;/a&gt; that you can apply to your own configurations and scripts!</source>
          <target state="translated">알고 계십니까 : 위의 예는 &lt;a href=&quot;https://github.com/webpack/webpack/blob/e7087ffeda7fa37dfe2ca70b5593c6e899629a2c/bin/webpack.js#L290-L292&quot;&gt;웹팩 런타임 자체&lt;/a&gt; 와 매우 유사 합니다! &lt;a href=&quot;https://github.com/webpack/webpack&quot;&gt;웹팩 소스 코드&lt;/a&gt; 에는 자신의 구성 및 스크립트에 적용 할 수 있는 유용한 사용 예제가 많이 있습니다!</target>
        </trans-unit>
        <trans-unit id="95a3af1b4b03701cb81e15895ce5ae5e22791bd8" translate="yes" xml:space="preserve">
          <source>Differences With stylelint-loader</source>
          <target state="translated">stylelint-loader와의 차이점</target>
        </trans-unit>
        <trans-unit id="09f778373f9a162ac11eb89f0c4bca75881fc5e1" translate="yes" xml:space="preserve">
          <source>Disable AMD</source>
          <target state="translated">AMD 비활성화</target>
        </trans-unit>
        <trans-unit id="96ee1f7f5883a5c48ba19b9c9436424e36406b5a" translate="yes" xml:space="preserve">
          <source>Disables order check (useful for CSS Modules!), &lt;code&gt;false&lt;/code&gt; by default</source>
          <target state="translated">순서 검사를 비활성화합니다 (CSS 모듈에 유용합니다). 기본적으로 &lt;code&gt;false&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="900cbd2651f5e5793adb3bc53c04ed5e2f519671" translate="yes" xml:space="preserve">
          <source>Disables the plugin</source>
          <target state="translated">플러그인을 비활성화합니다</target>
        </trans-unit>
        <trans-unit id="55bf46b308054bf0c9d2e073221a3f3e29fe2343" translate="yes" xml:space="preserve">
          <source>Display Warnings</source>
          <target state="translated">디스플레이 경고</target>
        </trans-unit>
        <trans-unit id="98c5a80b7744fbc48514b1df33d5991eef2c7a6d" translate="yes" xml:space="preserve">
          <source>Display also cached assets in the output</source>
          <target state="translated">캐시 된 자산도 출력에 표시</target>
        </trans-unit>
        <trans-unit id="5317cbb2e60cae7cc5b34759eb2748c73e479d8e" translate="yes" xml:space="preserve">
          <source>Display also cached modules in the output</source>
          <target state="translated">캐시 된 모듈을 출력에 표시</target>
        </trans-unit>
        <trans-unit id="48d96d1d76802c9850df0f919529f6c20f4db4d9" translate="yes" xml:space="preserve">
          <source>Display chunks in the output</source>
          <target state="translated">출력에 청크 표시</target>
        </trans-unit>
        <trans-unit id="8c50d42f7940c3f7177e115e7392ec7ba4705737" translate="yes" xml:space="preserve">
          <source>Display custom text after build output</source>
          <target state="translated">빌드 출력 후 사용자 정의 텍스트 표시</target>
        </trans-unit>
        <trans-unit id="307ccb3fffe064d3b124cc8d745641a26f17d709" translate="yes" xml:space="preserve">
          <source>Display details about errors</source>
          <target state="translated">오류에 대한 세부 사항 표시</target>
        </trans-unit>
        <trans-unit id="3b14a691a3a0e32a6c963e18efea49bf14d0793c" translate="yes" xml:space="preserve">
          <source>Display distance from entry point for each module</source>
          <target state="translated">각 모듈의 진입 점에서 표시 거리</target>
        </trans-unit>
        <trans-unit id="dd11af0bd5ceacae1dc179217c4ee8ecab1f0c60" translate="yes" xml:space="preserve">
          <source>Display entry points in the output</source>
          <target state="translated">출력에 진입 점 표시</target>
        </trans-unit>
        <trans-unit id="5fd5d5b41105cc5b90197f45d8ec7822054e2e34" translate="yes" xml:space="preserve">
          <source>Display even excluded modules in the output</source>
          <target state="translated">출력에서 제외 된 모듈도 표시</target>
        </trans-unit>
        <trans-unit id="d107b9fb099d0dd874a4ddb46bd1cc3bb0d3fc37" translate="yes" xml:space="preserve">
          <source>Display information about exports provided from modules</source>
          <target state="translated">모듈에서 제공된 내보내기에 대한 정보를 표시합니다.</target>
        </trans-unit>
        <trans-unit id="117a6853cbf92f86d97f31b4d1757f778d362108" translate="yes" xml:space="preserve">
          <source>Display information about used exports in modules (Tree Shaking)</source>
          <target state="translated">모듈에서 사용한 내보내기에 대한 정보 표시 (트리 쉐이킹)</target>
        </trans-unit>
        <trans-unit id="121f425543e820e9036ed4519b5c1de68c64c610" translate="yes" xml:space="preserve">
          <source>Display origins of chunks in the output</source>
          <target state="translated">출력에서 청크의 원점 표시</target>
        </trans-unit>
        <trans-unit id="6ca5b6fad8a0d1aaa73aefcb9dd815297a589921" translate="yes" xml:space="preserve">
          <source>Display reasons about module inclusion in the output</source>
          <target state="translated">출력에 모듈 포함에 대한 표시 이유</target>
        </trans-unit>
        <trans-unit id="74666863df8a53feaa87be9e33553f6690fce069" translate="yes" xml:space="preserve">
          <source>DllEntryPlugin source</source>
          <target state="translated">DllEntryPlugin 소스</target>
        </trans-unit>
        <trans-unit id="8c98fe10d90a56dc72985fa79c88a199118b650b" translate="yes" xml:space="preserve">
          <source>DllModuleFactory source</source>
          <target state="translated">DllModuleFactory 소스</target>
        </trans-unit>
        <trans-unit id="904c747ab699751e0badad99e2b4aacbd1ef73f2" translate="yes" xml:space="preserve">
          <source>DllPlugin</source>
          <target state="translated">DllPlugin</target>
        </trans-unit>
        <trans-unit id="9357790fdf94f0656c2848d9499b4500145153dc" translate="yes" xml:space="preserve">
          <source>DllPlugin creation test</source>
          <target state="translated">DllPlugin 생성 테스트</target>
        </trans-unit>
        <trans-unit id="646e3454a2f09cdbe606166cf553b431804bd527" translate="yes" xml:space="preserve">
          <source>DllPlugin source</source>
          <target state="translated">DllPlugin 소스</target>
        </trans-unit>
        <trans-unit id="934254bbc49dff0ad1a7f192a33b5a592b6dff72" translate="yes" xml:space="preserve">
          <source>DllPlugin without scope test</source>
          <target state="translated">범위 테스트가없는 DllPlugin</target>
        </trans-unit>
        <trans-unit id="7a726aa395a86a0058180552716bb43994919e03" translate="yes" xml:space="preserve">
          <source>DllReferencePlugin source</source>
          <target state="translated">DllReferencePlugin 소스</target>
        </trans-unit>
        <trans-unit id="5a98398c554d7e9bdf48c4ff00b34845a00a0ffe" translate="yes" xml:space="preserve">
          <source>DllReferencePlugin use Dll test</source>
          <target state="translated">DllReferencePlugin 사용 Dll 테스트</target>
        </trans-unit>
        <trans-unit id="589088b182d47730f01ee66d5641771f0079d1da" translate="yes" xml:space="preserve">
          <source>Dlls</source>
          <target state="translated">Dlls</target>
        </trans-unit>
        <trans-unit id="86ccf92f51e36e777c3c668ce8e70e1d260e0c01" translate="yes" xml:space="preserve">
          <source>Documentation: Using loaders</source>
          <target state="translated">설명서 : 로더 사용</target>
        </trans-unit>
        <trans-unit id="1c6a9671d4ec8902e27cca263ed2f76d2c637353" translate="yes" xml:space="preserve">
          <source>Don't forget to polyfill &lt;code&gt;require&lt;/code&gt; if you want to use it in node. See &lt;code&gt;webpack&lt;/code&gt; documentation.</source>
          <target state="translated">노드에서 사용 &lt;code&gt;require&lt;/code&gt; polyfill 요구 사항을 잊지 마십시오 . &lt;code&gt;webpack&lt;/code&gt; 설명서를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="64be087a6d66a0edac47c75c7c2fa5d2640c7392" translate="yes" xml:space="preserve">
          <source>Don't forget to polyfill require if you want to use it in Node.js. See the webpack documentation.</source>
          <target state="translated">Node.js에서 사용하려면 polyfill 요구 사항을 잊지 마십시오. 웹팩 설명서를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="ab82d227ff6a6a681581475176ebf682591e23e9" translate="yes" xml:space="preserve">
          <source>Don't share the cache between calls with different options.</source>
          <target state="translated">다른 옵션으로 통화간에 캐시를 공유하지 마십시오.</target>
        </trans-unit>
        <trans-unit id="0576d833d4eef865faa38464b954db865779eea6" translate="yes" xml:space="preserve">
          <source>Don't use babel - closure-compiler is also a transpiler. If you need &lt;a href=&quot;https://github.com/google/closure-compiler/wiki/ECMAScript6&quot;&gt;features not yet supported&lt;/a&gt; by closure-compiler, have babel only target those features.</source>
          <target state="translated">babel을 사용하지 마십시오-클로저-컴파일러도 트랜스 파일러입니다. 클로저-컴파일러가 &lt;a href=&quot;https://github.com/google/closure-compiler/wiki/ECMAScript6&quot;&gt;아직 지원하지 않는 기능&lt;/a&gt; 이 필요한 경우 babel 만 해당 기능을 대상으로합니다.</target>
        </trans-unit>
        <trans-unit id="59d7ca18bc82b728ba0e5a5703cb8d95dffcb0d0" translate="yes" xml:space="preserve">
          <source>Don't use too many workers as there is a boot overhead for the Node.js runtime and the loader. Minimize the module transfers between worker and main process. IPC is expensive.</source>
          <target state="translated">Node.js 런타임 및 로더에 대한 부트 오버 헤드가 있으므로 너무 많은 작업자를 사용하지 마십시오. 작업자와 기본 프로세스 간의 모듈 전송을 최소화하십시오. IPC는 비싸다.</target>
        </trans-unit>
        <trans-unit id="87b0159c9add19cc43345df17268d46b8aaede45" translate="yes" xml:space="preserve">
          <source>Drag and drop generated file (&lt;code&gt;events.json&lt;/code&gt; by default) into the profiler.</source>
          <target state="translated">생성 된 파일 ( 기본적으로 &lt;code&gt;events.json&lt;/code&gt; )을 프로파일 러로 끌어서 놓으십시오 .</target>
        </trans-unit>
        <trans-unit id="b67b7c79b252dee598276f6bea12deb60bbdff4e" translate="yes" xml:space="preserve">
          <source>Dynamic Imports</source>
          <target state="translated">동적 가져 오기</target>
        </trans-unit>
        <trans-unit id="b656b088866071db7937183c25b5462738b65f72" translate="yes" xml:space="preserve">
          <source>Dynamic Imports: Split code via inline function calls within modules.</source>
          <target state="translated">동적 가져 오기 : 모듈 내에서 인라인 함수 호출을 통해 코드를 분할합니다.</target>
        </trans-unit>
        <trans-unit id="6529e7ad9672c71463c2f7d4bbdad4f2843e5b48" translate="yes" xml:space="preserve">
          <source>Dynamic entry</source>
          <target state="translated">다이나믹 엔트리</target>
        </trans-unit>
        <trans-unit id="038c2aac43f79af2526fece6b4145228f8fee328" translate="yes" xml:space="preserve">
          <source>Dynamically load modules. Calls to &lt;code&gt;import()&lt;/code&gt; are treated as split points, meaning the requested module and it's children are split out into a separate chunk.</source>
          <target state="translated">동적으로 모듈을로드합니다. &lt;code&gt;import()&lt;/code&gt; 대한 호출 은 분할 지점으로 처리됩니다. 즉, 요청 된 모듈과 하위 항목이 별도의 청크로 분할됩니다.</target>
        </trans-unit>
        <trans-unit id="edede4463f4bccbb443461af012bcfe5d9411b99" translate="yes" xml:space="preserve">
          <source>E.g. for a browser request, you want to serve a HTML page, but for an API request you want to proxy it. You could do something like this:</source>
          <target state="translated">예를 들어 브라우저 요청의 경우 HTML 페이지를 제공하려고하지만 API 요청의 경우이를 프록시하려고합니다. 다음과 같이 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="57b326cf54b2a4eb3a52302b3daa58a89e84cca1" translate="yes" xml:space="preserve">
          <source>ES2015 module. i.e. &lt;code&gt;import webpackNumbers from 'webpack-numbers'&lt;/code&gt;.</source>
          <target state="translated">ES2015 모듈. 즉 &lt;code&gt;import webpackNumbers from 'webpack-numbers'&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="5abc2f410c47db3b782b0cdf3f0a42fa3a9ff9eb" translate="yes" xml:space="preserve">
          <source>ES6 (Recommended)</source>
          <target state="translated">ES6 (권장)</target>
        </trans-unit>
        <trans-unit id="c4a8a7f99056d959666a8f5b3a34fdc1e71dbaf8" translate="yes" xml:space="preserve">
          <source>ESNext (Babel)</source>
          <target state="translated">ESNext (바벨)</target>
        </trans-unit>
        <trans-unit id="86425a8942f6ffccb4be032063cd3b29d887d78f" translate="yes" xml:space="preserve">
          <source>Each &lt;code&gt;assets&lt;/code&gt; object represents an &lt;code&gt;output&lt;/code&gt; file emitted from the compilation. They all follow a similar structure:</source>
          <target state="translated">각 &lt;code&gt;assets&lt;/code&gt; 객체는 컴파일에서 &lt;code&gt;output&lt;/code&gt; 된 출력 파일을 나타냅니다 . 그들은 모두 비슷한 구조를 따릅니다.</target>
        </trans-unit>
        <trans-unit id="19e19150a3a66b2e2bcf8c16c34682c7c6ead62f" translate="yes" xml:space="preserve">
          <source>Each &lt;code&gt;chunks&lt;/code&gt; object represents a group of modules known as a &lt;a href=&quot;https://webpack.js.org/glossary#c&quot;&gt;chunk&lt;/a&gt;. Each object follows the following structure:</source>
          <target state="translated">각 &lt;code&gt;chunks&lt;/code&gt; 객체는 &lt;a href=&quot;https://webpack.js.org/glossary#c&quot;&gt;청크&lt;/a&gt; 로 알려진 모듈 그룹을 나타냅니다 . 각 객체는 다음 구조를 따릅니다.</target>
        </trans-unit>
        <trans-unit id="17d519510670916c41f01d98d35a4a48ff328dde" translate="yes" xml:space="preserve">
          <source>Each &lt;em&gt;target&lt;/em&gt; has a variety of deployment/environment specific additions, support to fit its needs. See what &lt;a href=&quot;../configuration/target&quot;&gt;targets are available&lt;/a&gt;.</source>
          <target state="translated">각 &lt;em&gt;대상&lt;/em&gt; 에는 다양한 배포 / 환경 별 추가 기능이 있으며 필요에 맞게 지원됩니다. &lt;a href=&quot;../configuration/target&quot;&gt;사용 가능한 대상을&lt;/a&gt; 확인하십시오 .</target>
        </trans-unit>
        <trans-unit id="dd16dceb95e6ccf0c33dc951908b6f3f73aa71d4" translate="yes" xml:space="preserve">
          <source>Each additional loader/plugin has a bootup time. Try to use as few different tools as possible.</source>
          <target state="translated">각 추가 로더 / 플러그인에는 부팅 시간이 있습니다. 가능한 적은 도구를 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="733b8fa87aac425691f9a7842e5466f37f8788c0" translate="yes" xml:space="preserve">
          <source>Each emitted module is wrapped in a function.</source>
          <target state="translated">방출 된 각 모듈은 함수로 싸여 있습니다.</target>
        </trans-unit>
        <trans-unit id="18838f66165edb8a1e49fc79a87f5716ade6e998" translate="yes" xml:space="preserve">
          <source>Each key passed into &lt;code&gt;DefinePlugin&lt;/code&gt; is an identifier or multiple identifiers joined with &lt;code&gt;.&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;DefinePlugin&lt;/code&gt; 에 전달 된 각 키 는 식별자 또는에 연결된 여러 식별자입니다 &lt;code&gt;.&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="5d6191605a24e9c32a4117ead142f6471379bf63" translate="yes" xml:space="preserve">
          <source>Each module has a smaller surface area than a full program, making verification, debugging, and testing trivial. Well-written &lt;em&gt;modules&lt;/em&gt; provide solid abstractions and encapsulation boundaries, so that each module has a coherent design and a clear purpose within the overall application.</source>
          <target state="translated">각 모듈은 전체 프로그램보다 면적이 작기 때문에 검증, 디버깅 및 테스트가 간단합니다. 잘 작성된 &lt;em&gt;모듈&lt;/em&gt; 은 견고한 추상화와 캡슐화 경계를 제공하므로 각 모듈은 전체 응용 프로그램 내에서 일관된 디자인과 명확한 목적을 갖습니다.</target>
        </trans-unit>
        <trans-unit id="c1ef94e7b2bb601dcaed1b4909872b85e76716ab" translate="yes" xml:space="preserve">
          <source>Each worker is a separate node.js process, which has an overhead of ~600ms. There is also an overhead of inter-process communication.</source>
          <target state="translated">각 작업자는 ~ 600ms의 오버 헤드를 갖는 별도의 node.js 프로세스입니다. 프로세스 간 통신 오버 헤드도 있습니다.</target>
        </trans-unit>
        <trans-unit id="b80c609668688e807970d5ca5d113c346e7d6328" translate="yes" xml:space="preserve">
          <source>Easier to use</source>
          <target state="translated">사용하기 쉬움</target>
        </trans-unit>
        <trans-unit id="25059fc7dd3b292f5e950cd040a72a2e087f8be0" translate="yes" xml:space="preserve">
          <source>Easily create HTML files to serve your bundles</source>
          <target state="translated">번들을 제공하기 위해 HTML 파일을 쉽게 생성</target>
        </trans-unit>
        <trans-unit id="3708e5745e7de168abae387fd944b0b542736bce" translate="yes" xml:space="preserve">
          <source>Either &lt;code&gt;return&lt;/code&gt; or &lt;code&gt;this.callback&lt;/code&gt; can be used to return the transformed &lt;code&gt;content&lt;/code&gt; synchronously:</source>
          <target state="translated">어느 &lt;code&gt;return&lt;/code&gt; 또는 &lt;code&gt;this.callback&lt;/code&gt; 는 변환 된 반환하는 데 사용할 수있는 &lt;code&gt;content&lt;/code&gt; 동 기적 :</target>
        </trans-unit>
        <trans-unit id="fe8504992a8d0aee8bac89ea86fb9563d9f71c92" translate="yes" xml:space="preserve">
          <source>Elaborate on the warning and example - calls with different configuration options?</source>
          <target state="translated">다른 구성 옵션을 사용하여 호출하는 경고 및 예를 자세히 설명 하시겠습니까?</target>
        </trans-unit>
        <trans-unit id="1161a647bb78b8a9f845c0a6ed2e4ee4720d3cfc" translate="yes" xml:space="preserve">
          <source>Emit a file. This is webpack-specific.</source>
          <target state="translated">파일을 방출하십시오. 이것은 웹팩에 따라 다릅니다.</target>
        </trans-unit>
        <trans-unit id="801fc18ee9ffb776c632915c1db539f33aa24d46" translate="yes" xml:space="preserve">
          <source>Emit a warning.</source>
          <target state="translated">경고를 방출하십시오.</target>
        </trans-unit>
        <trans-unit id="e217bbac1a72896169756556932c47936dd49917" translate="yes" xml:space="preserve">
          <source>Emit an error.</source>
          <target state="translated">오류를 방출하십시오.</target>
        </trans-unit>
        <trans-unit id="958f34fb9bea7b9cfffbca6e32513d78a90c46c9" translate="yes" xml:space="preserve">
          <source>Enable &lt;a href=&quot;https://betterexplained.com/articles/how-to-optimize-your-site-with-gzip-compression/&quot;&gt;gzip compression&lt;/a&gt; for everything served:</source>
          <target state="translated">제공되는 모든 항목에 대해 &lt;a href=&quot;https://betterexplained.com/articles/how-to-optimize-your-site-with-gzip-compression/&quot;&gt;gzip 압축&lt;/a&gt; 을 활성화하십시오 .</target>
        </trans-unit>
        <trans-unit id="a05bdd65c70c3d43b78e24ecc74045c8c9d7893e" translate="yes" xml:space="preserve">
          <source>Enable &lt;a href=&quot;https://developer.mozilla.org/en/docs/Web/HTML/Element/script#attr-crossorigin&quot;&gt;cross-origin&lt;/a&gt; loading of chunks. The following values are accepted...</source>
          <target state="translated">청크의 &lt;a href=&quot;https://developer.mozilla.org/en/docs/Web/HTML/Element/script#attr-crossorigin&quot;&gt;원본 간&lt;/a&gt; 로드를 활성화 합니다. 다음 값이 허용됩니다 ...</target>
        </trans-unit>
        <trans-unit id="62509773250e0bae652560327e3defa2516a4a7d" translate="yes" xml:space="preserve">
          <source>Enable &lt;code&gt;transform&lt;/code&gt; caching. You can use &lt;code&gt;{ cache: { key: 'my-cache-key' } }&lt;/code&gt; to invalidate the cache</source>
          <target state="translated">&lt;code&gt;transform&lt;/code&gt; 캐싱을 활성화합니다 . 당신은 사용할 수 있습니다 &lt;code&gt;{ cache: { key: 'my-cache-key' } }&lt;/code&gt; 캐시를 무효화</target>
        </trans-unit>
        <trans-unit id="99db96642414faefed26d594ccab55854eee3609" translate="yes" xml:space="preserve">
          <source>Enable CoffeeScript in Markdown (Code Blocks) e.g &lt;code&gt;file.coffee.md&lt;/code&gt;</source>
          <target state="translated">마크 다운 (코드 블록)에서 CoffeeScript 활성화 (예 : &lt;code&gt;file.coffee.md&lt;/code&gt; )</target>
        </trans-unit>
        <trans-unit id="022b20cafdc5842172be40c6a34c4a02f5386dc3" translate="yes" xml:space="preserve">
          <source>Enable Hot Module Replacement (HMR)</source>
          <target state="translated">핫 모듈 교체 (HMR) 활성화</target>
        </trans-unit>
        <trans-unit id="51c91d3464163535edc290a4f0ad4c1f3e00bee7" translate="yes" xml:space="preserve">
          <source>Enable IE8 Support</source>
          <target state="translated">IE8 지원 활성화</target>
        </trans-unit>
        <trans-unit id="a682c74c1e82c0e665e44c3de1c591bc10e90095" translate="yes" xml:space="preserve">
          <source>Enable Name Mangling (See &lt;a href=&quot;https://github.com/mishoo/UglifyJS2/tree/harmony#mangle-properties-options&quot;&gt;Mangle Properties&lt;/a&gt; for advanced setups, use with ⚠️)</source>
          <target state="translated">이름 맹 글링 활성화 ( 고급 설정은 앵글 &lt;a href=&quot;https://github.com/mishoo/UglifyJS2/tree/harmony#mangle-properties-options&quot;&gt;속성&lt;/a&gt; 참조 , ⚠️과 함께 사용)</target>
        </trans-unit>
        <trans-unit id="7be4652186b06de971c8e57ad5a6d8c0f728ac89" translate="yes" xml:space="preserve">
          <source>Enable PostCSS Parser support in &lt;code&gt;CSS-in-JS&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;CSS-in-JS&lt;/code&gt; 에서 PostCSS 파서 지원 활성화</target>
        </trans-unit>
        <trans-unit id="16f5781baf08bee96911fb9943dbc7ee91238887" translate="yes" xml:space="preserve">
          <source>Enable Source Maps</source>
          <target state="translated">소스 맵 사용</target>
        </trans-unit>
        <trans-unit id="0acb4cc5b23405cda64f2b8f74803538de1fdda1" translate="yes" xml:space="preserve">
          <source>Enable aggressive, but &lt;strong&gt;unsafe&lt;/strong&gt;, caching of modules. Passing &lt;code&gt;true&lt;/code&gt; will cache everything. Default:</source>
          <target state="translated">공격적이지만 &lt;strong&gt;안전하지 않은&lt;/strong&gt; 모듈 캐싱을 가능하게합니다. &lt;code&gt;true&lt;/code&gt; 를 전달하면 모든 것이 캐시됩니다. 기본:</target>
        </trans-unit>
        <trans-unit id="14732207bb11f3a578bdcf8cc9f9dd39a2c04727" translate="yes" xml:space="preserve">
          <source>Enable cache and multi-process parallel running.</source>
          <target state="translated">캐시 및 다중 프로세스 병렬 실행을 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="6ccbed29763e2731bce67a231c197b07a90bfb80" translate="yes" xml:space="preserve">
          <source>Enable cache of mangled variable and property names across multiple invocations</source>
          <target state="translated">여러 호출에서 맹 글링 된 변수 및 특성 이름의 캐시 사용</target>
        </trans-unit>
        <trans-unit id="eceb634ffda2948feb7e95487c541eb52318882f" translate="yes" xml:space="preserve">
          <source>Enable file caching</source>
          <target state="translated">파일 캐싱 사용</target>
        </trans-unit>
        <trans-unit id="c26fe2f6634a6d97b355b2de54f3fa3d0ec784e2" translate="yes" xml:space="preserve">
          <source>Enable file caching and set path to cache directory.</source>
          <target state="translated">파일 캐싱을 사용 가능하게하고 경로를 캐시 디렉토리로 설정하십시오.</target>
        </trans-unit>
        <trans-unit id="a35c7fee238749816bc9b59ff22d901fb16bb1bc" translate="yes" xml:space="preserve">
          <source>Enable file caching. Default path to cache directory: &lt;code&gt;node_modules/.cache/terser-webpack-plugin&lt;/code&gt;.</source>
          <target state="translated">파일 캐싱을 활성화하십시오. 캐시 디렉토리에 대한 기본 경로 : &lt;code&gt;node_modules/.cache/terser-webpack-plugin&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="f295c8d2e59063d9ce3fc8e8e20ea49ccba5b9ba" translate="yes" xml:space="preserve">
          <source>Enable file caching. Default path to cache directory: &lt;code&gt;node_modules/.cache/uglifyjs-webpack-plugin&lt;/code&gt;.</source>
          <target state="translated">파일 캐싱을 활성화하십시오. 캐시 디렉토리에 대한 기본 경로 : &lt;code&gt;node_modules/.cache/uglifyjs-webpack-plugin&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="51f0f3a7df984a3e40da0094359868d03e27a53b" translate="yes" xml:space="preserve">
          <source>Enable in memory caching [Enabled by default for watch]</source>
          <target state="translated">메모리 캐싱에서 활성화 [시계에 기본적으로 활성화 됨]</target>
        </trans-unit>
        <trans-unit id="35306b7bfe5556cba42ab8a9fa7523a1ab9e0328" translate="yes" xml:space="preserve">
          <source>Enable multi-process parallel running and set number of concurrent runs.</source>
          <target state="translated">다중 프로세스 병렬 실행을 활성화하고 동시 실행 수를 설정하십시오.</target>
        </trans-unit>
        <trans-unit id="dd0b0444b6452f5bf1981da608726b627480ef08" translate="yes" xml:space="preserve">
          <source>Enable parallelization. Default number of concurrent runs: &lt;code&gt;os.cpus().length - 1&lt;/code&gt;.</source>
          <target state="translated">병렬화를 활성화하십시오. 동시 실행의 기본 번호 : &lt;code&gt;os.cpus().length - 1&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="9bbb01139a2b6881d1a763e931bfb02c8aaf3411" translate="yes" xml:space="preserve">
          <source>Enable persistent caching with the &lt;code&gt;cache-loader&lt;/code&gt;. Clear cache directory on &lt;code&gt;&quot;postinstall&quot;&lt;/code&gt; in &lt;code&gt;package.json&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;cache-loader&lt;/code&gt; 영구 캐싱을 사용하십시오 . &lt;code&gt;package.json&lt;/code&gt; 의 &lt;code&gt;&quot;postinstall&quot;&lt;/code&gt; 에서 캐시 디렉토리를 지우십시오 .</target>
        </trans-unit>
        <trans-unit id="21c3509dd60db7867c0a476347ca2e8c9e64465f" translate="yes" xml:space="preserve">
          <source>Enable prevent discarding or mangling of class names</source>
          <target state="translated">클래스 이름의 버림 또는 맹 글링 방지</target>
        </trans-unit>
        <trans-unit id="be5c2ba3010b8bc793dac728542b0bcbdfcc2ba3" translate="yes" xml:space="preserve">
          <source>Enable prevent discarding or mangling of function names. Useful for code relying on &lt;code&gt;Function.prototype.name&lt;/code&gt;. If the top level minify option &lt;code&gt;keep_classnames&lt;/code&gt; is &lt;code&gt;undefined&lt;/code&gt; it will be overriden with the value of the top level minify option &lt;code&gt;keep_fnames&lt;/code&gt;</source>
          <target state="translated">함수 이름의 삭제 또는 조작을 방지하십시오. &lt;code&gt;Function.prototype.name&lt;/code&gt; 에 의존하는 코드에 유용합니다 . 최고 수준 작게하다 옵션의 경우 &lt;code&gt;keep_classnames&lt;/code&gt; 이 되어 &lt;code&gt;undefined&lt;/code&gt; 는 최상위 레벨 작게하다 옵션의 값을 오버라이드 (override) 할 것이다 &lt;code&gt;keep_fnames&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="1bae92de88ada11a7e72755cb1c1a4fc1dd85128" translate="yes" xml:space="preserve">
          <source>Enable top level variable and function name mangling and to drop unused variables and functions</source>
          <target state="translated">최상위 변수 및 함수 이름을 관리하고 사용하지 않는 변수 및 함수를 삭제</target>
        </trans-unit>
        <trans-unit id="ec4889ff451a09e59f04fd5c3ebd66cb5e3a7d18" translate="yes" xml:space="preserve">
          <source>Enable webpack's Hot Module Replacement feature:</source>
          <target state="translated">웹팩의 핫 모듈 교체 기능을 활성화하십시오.</target>
        </trans-unit>
        <trans-unit id="4cda3ae97443aec99989d8cf812b0dc7a81c9cbf" translate="yes" xml:space="preserve">
          <source>Enable work around Safari 10/11 bugs in loop scoping and &lt;code&gt;await&lt;/code&gt;</source>
          <target state="translated">루프 범위 지정에서 Safari 10/11 버그를 해결하고 &lt;code&gt;await&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f90d4ecf9f6523db071efcfe052d0ce44767facc" translate="yes" xml:space="preserve">
          <source>Enable/Disable &lt;code&gt;url()&lt;/code&gt; handling</source>
          <target state="translated">&lt;code&gt;url()&lt;/code&gt; 처리 활성화 / 비활성화</target>
        </trans-unit>
        <trans-unit id="b19da246b5273011e57b877055400e028428254e" translate="yes" xml:space="preserve">
          <source>Enable/Disable @import handling</source>
          <target state="translated">@import 처리 활성화 / 비활성화</target>
        </trans-unit>
        <trans-unit id="ac1a7303d7e9b4b2b306d2c12d6266c1c9fae17e" translate="yes" xml:space="preserve">
          <source>Enable/Disable CSS Modules</source>
          <target state="translated">CSS 모듈 활성화 / 비활성화</target>
        </trans-unit>
        <trans-unit id="068efc2310cdc82bb3217761baa30fb2b62c199c" translate="yes" xml:space="preserve">
          <source>Enable/Disable Sourcemaps</source>
          <target state="translated">소스 맵 활성화 / 비활성화</target>
        </trans-unit>
        <trans-unit id="bede32266255c66e06af512ce794ee775255e025" translate="yes" xml:space="preserve">
          <source>Enable/Disable source map loading</source>
          <target state="translated">소스 맵 로딩 활성화 / 비활성화</target>
        </trans-unit>
        <trans-unit id="a4d208e2490b9ef8d75c13b9a0e81e38ba92b580" translate="yes" xml:space="preserve">
          <source>Enable/disable Hot Module Replacement (HMR), if disabled no HMR Code will be added (good for non local development/production)</source>
          <target state="translated">HMR (핫 모듈 교체) 활성화 / 비활성화, 비활성화 된 경우 HMR 코드가 추가되지 않음 (비 로컬 개발 / 생산에 적합)</target>
        </trans-unit>
        <trans-unit id="ee4339076f3a9f38ef5e025db808b085e7483dfe" translate="yes" xml:space="preserve">
          <source>Enable/disable Hot Module Replacement (HMR), if disabled no HMR Code will be added. This could be used for non local development and production.</source>
          <target state="translated">핫 모듈 교체 (HMR)를 활성화 / 비활성화합니다. 비활성화 된 경우 HMR 코드가 추가되지 않습니다. 이것은 비 로컬 개발 및 생산에 사용될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a745e4cafa6fb7693ca7a237ef79e42d536e8b3c" translate="yes" xml:space="preserve">
          <source>Enable/disable extracting comments.</source>
          <target state="translated">주석 추출을 활성화 / 비활성화합니다.</target>
        </trans-unit>
        <trans-unit id="ccaa3a52fe2e4306d09e3d52bf59a1bd3d36c0d6" translate="yes" xml:space="preserve">
          <source>Enable/disable features in production/development build using &lt;a href=&quot;https://en.wikipedia.org/wiki/Feature_toggle&quot;&gt;feature flags&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://en.wikipedia.org/wiki/Feature_toggle&quot;&gt;기능 플래그를&lt;/a&gt; 사용하여 프로덕션 / 개발 빌드에서 기능을 활성화 / 비활성화합니다 .</target>
        </trans-unit>
        <trans-unit id="1cafb67624bd8a1c211e0f9fe1087b1953749c74" translate="yes" xml:space="preserve">
          <source>Enable/disable file caching.</source>
          <target state="translated">파일 캐싱을 활성화 / 비활성화합니다.</target>
        </trans-unit>
        <trans-unit id="eb33764677d743ac23ce0ae7e3593ba94c8d34b7" translate="yes" xml:space="preserve">
          <source>Enable/disable multi-process parallel running.</source>
          <target state="translated">다중 프로세스 병렬 실행을 활성화 / 비활성화합니다.</target>
        </trans-unit>
        <trans-unit id="9e569debc47ed458754766ce5151054ae80b9569" translate="yes" xml:space="preserve">
          <source>Enables &lt;a href=&quot;../concepts/hot-module-replacement&quot;&gt;Hot Module Replacement&lt;/a&gt;</source>
          <target state="translated">가능 &lt;a href=&quot;../concepts/hot-module-replacement&quot;&gt;핫 모듈 교체&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="2944bb66e757530d2d4214c4d16d806ca53c5809" translate="yes" xml:space="preserve">
          <source>Enables &lt;a href=&quot;../concepts/hot-module-replacement&quot;&gt;Hot Module Replacement&lt;/a&gt;, otherwise known as HMR.</source>
          <target state="translated">HMR이라고도하는 &lt;a href=&quot;../concepts/hot-module-replacement&quot;&gt;핫 모듈 교체를&lt;/a&gt; 활성화합니다 .</target>
        </trans-unit>
        <trans-unit id="99bbe6af5fcd676c23bc02ae555fdd4f8428dcea" translate="yes" xml:space="preserve">
          <source>Enables Hot Module Replacement (see &lt;a href=&quot;#devserver-hot&quot;&gt;&lt;code&gt;devServer.hot&lt;/code&gt;&lt;/a&gt;) without page refresh as fallback in case of build failures.</source>
          <target state="translated">빌드 실패시 페이지를 새로 고치지 않고 핫 모듈 교체 ( &lt;a href=&quot;#devserver-hot&quot;&gt; &lt;code&gt;devServer.hot&lt;/code&gt; &lt;/a&gt; 참조 )를 활성화합니다 .</target>
        </trans-unit>
        <trans-unit id="4b935532ee92b49fc59a5a3468cbf7658ac3d3df" translate="yes" xml:space="preserve">
          <source>Enables a more fine grained control of eval source maps</source>
          <target state="translated">평가 소스 맵을보다 세밀하게 제어 할 수 있습니다</target>
        </trans-unit>
        <trans-unit id="52921b94a3f1abcd4b5fff9a9d673f911a2ed798" translate="yes" xml:space="preserve">
          <source>Enables a more fine grained control of source maps</source>
          <target state="translated">소스 맵을보다 세밀하게 제어 할 수 있습니다</target>
        </trans-unit>
        <trans-unit id="448f1790f506c65777ede1788731ac238847d8db" translate="yes" xml:space="preserve">
          <source>Enables control of the version of UglifyJS in your project</source>
          <target state="translated">프로젝트에서 UglifyJS 버전을 제어 할 수 있습니다</target>
        </trans-unit>
        <trans-unit id="774522b615eaba60eae65e1e9bad5a1fb1e6a8cf" translate="yes" xml:space="preserve">
          <source>Enables labeled modules [Uses LabeledModulesPlugin]</source>
          <target state="translated">레이블이있는 모듈을 사용함 [LabeledModulesPlugin 사용]</target>
        </trans-unit>
        <trans-unit id="62eeaec02a2f53090995e3638181be4770b85914" translate="yes" xml:space="preserve">
          <source>Enables line to line mapping for all or some modules. This produces a simple source map where each line of the generated source is mapped to the same line of the original source. This is a performance optimization and should only be used if all input lines match generated lines.</source>
          <target state="translated">모든 또는 일부 모듈에 대한 라인 대 라인 매핑을 활성화합니다. 생성 된 소스의 각 라인이 원래 소스의 동일한 라인에 매핑되는 간단한 소스 맵이 생성됩니다. 이것은 성능 최적화이며 모든 입력 라인이 생성 된 라인과 일치하는 경우에만 사용해야합니다.</target>
        </trans-unit>
        <trans-unit id="b64c6ec0805681aa84397a0992a6122b1055a9cc" translate="yes" xml:space="preserve">
          <source>Enables loading gzipped resources.</source>
          <target state="translated">gzipped 자원을로드 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="096d29623e2edd31dfa0e832ff99891449c46bdb" translate="yes" xml:space="preserve">
          <source>Enables source map support, &lt;code&gt;postcss-loader&lt;/code&gt; will use the previous source map given by other loaders and update it accordingly, if no previous loader is applied before &lt;code&gt;postcss-loader&lt;/code&gt;, the loader will generate a source map for you.</source>
          <target state="translated">소스지도 지원 가능 &lt;code&gt;postcss-loader&lt;/code&gt; 다른 로더에 의해 주어진 이전 소스 맵을 사용하고 더 이전 로더가 전에 적용되지 않는 경우, 그에 따라 업데이트됩니다 &lt;code&gt;postcss-loader&lt;/code&gt; , 로더는 당신을위한 소스 맵을 생성합니다.</target>
        </trans-unit>
        <trans-unit id="c6e3feab8b394bee2ca4ca7780094ae81f0d6a1d" translate="yes" xml:space="preserve">
          <source>Enables/Disables colors on the console [default: (supports-color)]</source>
          <target state="translated">콘솔에서 색상을 활성화 / 비활성화합니다 [기본값 : (지원 색상)]</target>
        </trans-unit>
        <trans-unit id="8b88eb6d9a03b9d45854d4ea56e7672571ac3030" translate="yes" xml:space="preserve">
          <source>Enables/Disables colors on the console.</source>
          <target state="translated">콘솔에서 색상을 활성화 / 비활성화합니다.</target>
        </trans-unit>
        <trans-unit id="b8e5fb62c5f3c4b39097cd5ed214f52c3106727c" translate="yes" xml:space="preserve">
          <source>Enabling CSP</source>
          <target state="translated">CSP 활성화</target>
        </trans-unit>
        <trans-unit id="1af4b0952000148342363a144deab067c5b4b358" translate="yes" xml:space="preserve">
          <source>Enabling HMR</source>
          <target state="translated">HMR 활성화</target>
        </trans-unit>
        <trans-unit id="75289da4414c0ef07bec496e68bbb798ef95e283" translate="yes" xml:space="preserve">
          <source>Enabling HMR is easy and in most cases no options are necessary.</source>
          <target state="translated">HMR을 사용하는 것은 쉽고 대부분의 경우 옵션이 필요하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="b08deabf77a06a99389b7c449ea2bf6af4d93e10" translate="yes" xml:space="preserve">
          <source>Enabling Source Maps</source>
          <target state="translated">소스 맵 활성화</target>
        </trans-unit>
        <trans-unit id="19172e9e47fee4109f3d1d86c3076acdc36822f2" translate="yes" xml:space="preserve">
          <source>Entry</source>
          <target state="translated">Entry</target>
        </trans-unit>
        <trans-unit id="19fca74dfa5e6733a9a1065a6c28d4fe20a673ba" translate="yes" xml:space="preserve">
          <source>Entry Points</source>
          <target state="translated">진입 점</target>
        </trans-unit>
        <trans-unit id="8456d00782cacf57c6502aa1e361d9d97477a7d7" translate="yes" xml:space="preserve">
          <source>Entry Points: Manually split code using &lt;a href=&quot;../configuration/entry-context&quot;&gt;&lt;code&gt;entry&lt;/code&gt;&lt;/a&gt; configuration.</source>
          <target state="translated">진입 점 : &lt;a href=&quot;../configuration/entry-context&quot;&gt; &lt;code&gt;entry&lt;/code&gt; &lt;/a&gt; 구성을 사용하여 코드를 수동으로 분할 합니다.</target>
        </trans-unit>
        <trans-unit id="768a1f2bc644721536ad777b0c05042bcf4153e6" translate="yes" xml:space="preserve">
          <source>Entry and Context</source>
          <target state="translated">입장과 맥락</target>
        </trans-unit>
        <trans-unit id="9ad27b759de0ad89e186ac9524183f286093b62d" translate="yes" xml:space="preserve">
          <source>Environment Based</source>
          <target state="translated">환경 기반</target>
        </trans-unit>
        <trans-unit id="95e1752eccc38d5ee799e62cfff0d6c30ca5ac2d" translate="yes" xml:space="preserve">
          <source>Environment Options</source>
          <target state="translated">환경 옵션</target>
        </trans-unit>
        <trans-unit id="ec072bba7befaa68af710fe3549eb0491d7badd1" translate="yes" xml:space="preserve">
          <source>Environment Variables</source>
          <target state="translated">환경 변수</target>
        </trans-unit>
        <trans-unit id="14203bbea6184f6c333c5dfd9251c3e2eb169f2e" translate="yes" xml:space="preserve">
          <source>Environment passed to the config, when it is a function</source>
          <target state="translated">환경이 환경 일 때 환경 설정으로 전달</target>
        </trans-unit>
        <trans-unit id="1173b2e11bd16e5dc36c119a4b84f02be11626b5" translate="yes" xml:space="preserve">
          <source>Environment variables</source>
          <target state="translated">환경 변수</target>
        </trans-unit>
        <trans-unit id="8a5ff645eeabd7639910737608329030f384191e" translate="yes" xml:space="preserve">
          <source>EnvironmentPlugin</source>
          <target state="translated">EnvironmentPlugin</target>
        </trans-unit>
        <trans-unit id="09b6a6dcd3f6d4a7d3a95bceaad67a7f1800272f" translate="yes" xml:space="preserve">
          <source>Equals</source>
          <target state="translated">Equals</target>
        </trans-unit>
        <trans-unit id="a29b8a6474adb85d0d3a290efe4251502d695743" translate="yes" xml:space="preserve">
          <source>Equals the config option &lt;code&gt;debug&lt;/code&gt;.</source>
          <target state="translated">구성 옵션 &lt;code&gt;debug&lt;/code&gt; 와 같습니다 .</target>
        </trans-unit>
        <trans-unit id="66508c67ac3ea596832d5b66f561b5eccb44d825" translate="yes" xml:space="preserve">
          <source>Equals the config options &lt;code&gt;output.publicPath&lt;/code&gt;.</source>
          <target state="translated">구성 옵션 &lt;code&gt;output.publicPath&lt;/code&gt; 와 같습니다 .</target>
        </trans-unit>
        <trans-unit id="5fff1f56919b006049c274c6c76fbbe56470ee4c" translate="yes" xml:space="preserve">
          <source>Error Handling</source>
          <target state="translated">오류 처리</target>
        </trans-unit>
        <trans-unit id="753c5002c6b54759d98204a8260973033b1ae296" translate="yes" xml:space="preserve">
          <source>Error Reporting</source>
          <target state="translated">오류보고</target>
        </trans-unit>
        <trans-unit id="501a4ce287829b001484cd18d6337e3991e8e08d" translate="yes" xml:space="preserve">
          <source>Errors and Warning</source>
          <target state="translated">오류 및 경고</target>
        </trans-unit>
        <trans-unit id="f564d1f5c7659e009b0094aad94e9c92291aa429" translate="yes" xml:space="preserve">
          <source>Errors and Warnings</source>
          <target state="translated">오류 및 경고</target>
        </trans-unit>
        <trans-unit id="d8773bb9c41ba5834b29eae64c958a46afe6b672" translate="yes" xml:space="preserve">
          <source>Errors and Warnings (if any)</source>
          <target state="translated">오류 및 경고 (있는 경우)</target>
        </trans-unit>
        <trans-unit id="3a9b6873d5a1053c6b2e6a40cd536d8f96a1ae6a" translate="yes" xml:space="preserve">
          <source>EvalDevToolModulePlugin</source>
          <target state="translated">EvalDevToolModulePlugin</target>
        </trans-unit>
        <trans-unit id="5c36122ed1df2ed7c037300256b8e185b269b6f3" translate="yes" xml:space="preserve">
          <source>EvalSourceMapDevToolPlugin</source>
          <target state="translated">EvalSourceMapDevToolPlugin</target>
        </trans-unit>
        <trans-unit id="5444d6349155021c66b40ba0a22caf8366746168" translate="yes" xml:space="preserve">
          <source>Evaluate a call to a member function of a successfully evaluated expression.</source>
          <target state="translated">성공적으로 평가 된 식의 멤버 함수에 대한 호출을 평가합니다.</target>
        </trans-unit>
        <trans-unit id="ce5165dc75157c33f487946c4764f0c42ec65c79" translate="yes" xml:space="preserve">
          <source>Evaluate an expression.</source>
          <target state="translated">식을 평가하십시오.</target>
        </trans-unit>
        <trans-unit id="cd86d24b94f221f194c44a1baf40bcc429b167cf" translate="yes" xml:space="preserve">
          <source>Evaluate an identifier that is a defined variable.</source>
          <target state="translated">정의 된 변수 인 식별자를 평가하십시오.</target>
        </trans-unit>
        <trans-unit id="a7fb5d9ad6ff323c374cf439ab0a47911db29825" translate="yes" xml:space="preserve">
          <source>Evaluate an identifier that is a free variable.</source>
          <target state="translated">자유 변수 인 식별자를 평가하십시오.</target>
        </trans-unit>
        <trans-unit id="571fdd4647a3dfb161f9006c12f7451dd03fc8bf" translate="yes" xml:space="preserve">
          <source>Evaluate the type of an identifier.</source>
          <target state="translated">식별자의 유형을 평가하십시오.</target>
        </trans-unit>
        <trans-unit id="01099e1f4d48c1729753fae569d77ab4f79b4e4a" translate="yes" xml:space="preserve">
          <source>Eventually you will find the need to disambiguate in your &lt;code&gt;webpack.config.js&lt;/code&gt; between &lt;a href=&quot;../guides/development&quot;&gt;development&lt;/a&gt; and &lt;a href=&quot;../guides/production&quot;&gt;production builds&lt;/a&gt;. You have (at least) two options:</source>
          <target state="translated">결국 &lt;a href=&quot;../guides/development&quot;&gt;개발&lt;/a&gt; 과 &lt;a href=&quot;../guides/production&quot;&gt;생산 빌드&lt;/a&gt; 사이 의 &lt;code&gt;webpack.config.js&lt;/code&gt; 에서 명확하게 할 필요가 있습니다. 최소한 두 가지 옵션이 있습니다.</target>
        </trans-unit>
        <trans-unit id="54463d198feaf097127deaedff92e56e2a5580d9" translate="yes" xml:space="preserve">
          <source>Every dependency that matches the given regular expression will be excluded from the output bundles.</source>
          <target state="translated">주어진 정규식과 일치하는 모든 종속성은 출력 번들에서 제외됩니다.</target>
        </trans-unit>
        <trans-unit id="ad3fb2d98fb3a3fda1f5b2371966925fce578275" translate="yes" xml:space="preserve">
          <source>Every filesystem access is cached, so that multiple parallel or serial requests to the same file occur faster. In &lt;a href=&quot;../configuration/watch#watch&quot;&gt;watch mode&lt;/a&gt;, only modified files are evicted from the cache. If watch mode is off, then the cache gets purged before every compilation.</source>
          <target state="translated">모든 파일 시스템 액세스는 캐시되므로 동일한 파일에 대한 여러 병렬 또는 직렬 요청이 더 빨리 발생합니다. 에서 &lt;a href=&quot;../configuration/watch#watch&quot;&gt;시계 모드&lt;/a&gt; 만 수정 된 파일이 캐시에서 제거된다. 감시 모드가 꺼져 있으면 모든 컴파일 전에 캐시가 제거됩니다.</target>
        </trans-unit>
        <trans-unit id="6e322ba270c8b9b641ca3ce7022880a6ebb21785" translate="yes" xml:space="preserve">
          <source>Every module also contains a list of &lt;code&gt;reasons&lt;/code&gt; objects describing why that module was included in the dependency graph. Each &quot;reason&quot; is similar to the &lt;code&gt;origins&lt;/code&gt; seen above in the &lt;a href=&quot;#chunk-objects&quot;&gt;chunk objects&lt;/a&gt; section:</source>
          <target state="translated">모든 모듈에는 해당 모듈이 종속성 그래프에 포함 된 이유를 설명하는 &lt;code&gt;reasons&lt;/code&gt; 개체 목록도 포함되어 있습니다 . 각 &quot;이유&quot;는 &lt;a href=&quot;#chunk-objects&quot;&gt;청크 개체&lt;/a&gt; 섹션 에서 위에서 본 &lt;code&gt;origins&lt;/code&gt; 와 유사합니다 .</target>
        </trans-unit>
        <trans-unit id="e3f9e313ff5f768250c6be45ce43d7f476f10b2d" translate="yes" xml:space="preserve">
          <source>Every module that could potentially be requested on an &lt;code&gt;import()&lt;/code&gt; call is included. For example, &lt;code&gt;import(`./locale/${language}.json`)&lt;/code&gt; will cause every &lt;code&gt;.json&lt;/code&gt; file in the &lt;code&gt;./locale&lt;/code&gt; directory to be bundled into the new chunk. At run time, when the variable &lt;code&gt;language&lt;/code&gt; has been computed, any file like &lt;code&gt;english.json&lt;/code&gt; or &lt;code&gt;german.json&lt;/code&gt; will be available for consumption. Using the &lt;code&gt;webpackInclude&lt;/code&gt; and &lt;code&gt;webpackExclude&lt;/code&gt; options allows us to add regex patterns that reduce the files that webpack will bundle for this import.</source>
          <target state="translated">&lt;code&gt;import()&lt;/code&gt; 호출 에서 요청 될 수있는 모든 모듈 이 포함됩니다. 예를 들어 &lt;code&gt;import(`./locale/${language}.json`)&lt;/code&gt; 은 &lt;code&gt;./locale&lt;/code&gt; 디렉토리 의 모든 &lt;code&gt;.json&lt;/code&gt; 파일 이 새 청크에 번들되도록합니다. 런타임에 변수 &lt;code&gt;language&lt;/code&gt; 가 계산되면 &lt;code&gt;english.json&lt;/code&gt; 또는 &lt;code&gt;german.json&lt;/code&gt; 과 같은 파일을 사용할 수 있습니다. 은 Using &lt;code&gt;webpackInclude&lt;/code&gt; 및 &lt;code&gt;webpackExclude&lt;/code&gt; 옵션은 우리가 웹팩이 수입 번들 것이라는 파일을 감소 정규식 패턴을 추가 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="0f01ed56a1e32a05e5ef96e4d779f34784af9a96" translate="yes" xml:space="preserve">
          <source>Example</source>
          <target state="translated">Example</target>
        </trans-unit>
        <trans-unit id="654d7a479004b2b26e7de7b5ed9cd79a331ded80" translate="yes" xml:space="preserve">
          <source>Example Usage</source>
          <target state="translated">사용법 예</target>
        </trans-unit>
        <trans-unit id="c620ab44f45011400b2ea858d5da3e81166c8195" translate="yes" xml:space="preserve">
          <source>Example for an &lt;code&gt;expr&lt;/code&gt; dynamic dependency: &lt;code&gt;require(expr)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;expr&lt;/code&gt; 동적 종속성의 예 : &lt;code&gt;require(expr)&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="6cc88c63f365ab9c4cbc95ad29ce3f0c70961ff5" translate="yes" xml:space="preserve">
          <source>Example for an &lt;code&gt;unknown&lt;/code&gt; dynamic dependency: &lt;code&gt;require&lt;/code&gt;.</source>
          <target state="translated">의 예 &lt;code&gt;unknown&lt;/code&gt; 동적 의존성 : &lt;code&gt;require&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="1024b031aecaafd3656af98faeedae791f2b8b92" translate="yes" xml:space="preserve">
          <source>Example for an &lt;code&gt;wrapped&lt;/code&gt; dynamic dependency: &lt;code&gt;require(&quot;./templates/&quot; + expr)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;wrapped&lt;/code&gt; 동적 종속성의 예 : &lt;code&gt;require(&quot;./templates/&quot; + expr)&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="82fcdd045a9312715925e700f36000a82a50b154" translate="yes" xml:space="preserve">
          <source>Example values: &lt;code&gt;&quot;web&quot;&lt;/code&gt;, &lt;code&gt;&quot;node&quot;&lt;/code&gt;</source>
          <target state="translated">예제 값 : &lt;code&gt;&quot;web&quot;&lt;/code&gt; , &lt;code&gt;&quot;node&quot;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c63737abd7347a7ae582cb9fbdf37d6c0e5b251e" translate="yes" xml:space="preserve">
          <source>Example:</source>
          <target state="translated">Example:</target>
        </trans-unit>
        <trans-unit id="874c48b936ceea12e3685715441645c219f3c83e" translate="yes" xml:space="preserve">
          <source>Example: &lt;code&gt;function(compilation) { return /html-webpack/.test(compilation.name); }&lt;/code&gt;.</source>
          <target state="translated">예 : &lt;code&gt;function(compilation) { return /html-webpack/.test(compilation.name); }&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="eb01bf04c9a0e8a71c45816513df424f1c7ffedb" translate="yes" xml:space="preserve">
          <source>Examples</source>
          <target state="translated">Examples</target>
        </trans-unit>
        <trans-unit id="fb3447b632f6a431215776dcf254a01001a40c4f" translate="yes" xml:space="preserve">
          <source>Examples:</source>
          <target state="translated">Examples:</target>
        </trans-unit>
        <trans-unit id="2d6605d70cd1584a6cb3e7a76c0209c8ebcee7ea" translate="yes" xml:space="preserve">
          <source>Exclude Vendor Maps</source>
          <target state="translated">공급 업체 맵 제외</target>
        </trans-unit>
        <trans-unit id="46a4e07ef9dc3a439ffc4570b07d1fd85adf1503" translate="yes" xml:space="preserve">
          <source>Exclude certain modules from bundles</source>
          <target state="translated">번들에서 특정 모듈 제외</target>
        </trans-unit>
        <trans-unit id="a4243eefba0eb21fb5765ab0519871934936c9de" translate="yes" xml:space="preserve">
          <source>Exclude modules in the output</source>
          <target state="translated">출력에서 모듈 제외</target>
        </trans-unit>
        <trans-unit id="1d07e1b735f2c540d0c3fd11e242e58af545ea94" translate="yes" xml:space="preserve">
          <source>Execute some code fragment like a module. See &lt;a href=&quot;https://github.com/webpack/webpack.js.org/issues/1268#issuecomment-313513988&quot;&gt;this comment&lt;/a&gt; for a replacement method if needed.</source>
          <target state="translated">모듈과 같은 일부 코드 조각을 실행하십시오. 필요한 경우 교체 방법에 대해서는 &lt;a href=&quot;https://github.com/webpack/webpack.js.org/issues/1268#issuecomment-313513988&quot;&gt;이 설명&lt;/a&gt; 을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="8a175b4b8373093004fe450b0bf49724527cca0d" translate="yes" xml:space="preserve">
          <source>Executed before emitting the &lt;code&gt;compilation&lt;/code&gt; event (see below).</source>
          <target state="translated">&lt;code&gt;compilation&lt;/code&gt; 이벤트를 생성 하기 전에 실행됩니다 (아래 참조).</target>
        </trans-unit>
        <trans-unit id="3dd464f4b30347e65baf1a6da7f37965c4293704" translate="yes" xml:space="preserve">
          <source>Executed when a module has been built successfully.</source>
          <target state="translated">모듈이 성공적으로 빌드되면 실행됩니다.</target>
        </trans-unit>
        <trans-unit id="06131f72129e0b2511c3fff0516a39a88c63c7a6" translate="yes" xml:space="preserve">
          <source>Executes JS script once in global context.</source>
          <target state="translated">전역 컨텍스트에서 JS 스크립트를 한 번 실행합니다.</target>
        </trans-unit>
        <trans-unit id="f8c186ee40b7fabf2679513f83649d85ad03242a" translate="yes" xml:space="preserve">
          <source>Executes a plugin a environment setup is complete.</source>
          <target state="translated">환경 설정이 완료된 플러그인을 실행합니다.</target>
        </trans-unit>
        <trans-unit id="bf0a522b2efe3bd631de533756b9f72734730d24" translate="yes" xml:space="preserve">
          <source>Executes a plugin after &lt;a href=&quot;../configuration/entry-context#entry&quot;&gt;the &lt;code&gt;entry&lt;/code&gt; configuration&lt;/a&gt; from webpack options has been processed.</source>
          <target state="translated">webpack 옵션 &lt;a href=&quot;../configuration/entry-context#entry&quot;&gt;의 &lt;code&gt;entry&lt;/code&gt; 구성&lt;/a&gt; 이 처리 된 후 플러그인을 실행 합니다.</target>
        </trans-unit>
        <trans-unit id="d2769c054b406ddd5b3d8758ee96b20633d57a25" translate="yes" xml:space="preserve">
          <source>Executes a plugin after compilation parameters are created.</source>
          <target state="translated">컴파일 매개 변수가 작성된 후 플러그인을 실행합니다.</target>
        </trans-unit>
        <trans-unit id="d7d5011b30571461a27f7858bc3cd14e30c07254" translate="yes" xml:space="preserve">
          <source>Executes a plugin after resolver setup is complete.</source>
          <target state="translated">리졸버 설정이 완료된 후 플러그인을 실행합니다.</target>
        </trans-unit>
        <trans-unit id="10be817b6f02f0f6ac69999d8a75a390374a8453" translate="yes" xml:space="preserve">
          <source>Executes a plugin during watch mode after a new compilation is triggered but before the compilation is actually started.</source>
          <target state="translated">새 컴파일이 트리거 된 후 컴파일이 실제로 시작되기 전에 감시 모드 동안 플러그인을 실행합니다.</target>
        </trans-unit>
        <trans-unit id="86a98fb0b982d54c5e694b3971a7a758a96cdb39" translate="yes" xml:space="preserve">
          <source>Exit the process when stdin is closed</source>
          <target state="translated">stdin이 닫히면 프로세스를 종료하십시오.</target>
        </trans-unit>
        <trans-unit id="b32ef340ea4702fd5f41dbe4001671d76174ef71" translate="yes" xml:space="preserve">
          <source>Explanation</source>
          <target state="translated">Explanation</target>
        </trans-unit>
        <trans-unit id="57e4423e47a0841d4bf4a7e9d23053acc5900453" translate="yes" xml:space="preserve">
          <source>Explicit loaders and params up to the name of the first loader</source>
          <target state="translated">첫 번째 로더의 이름까지 명시 적 로더 및 매개 변수</target>
        </trans-unit>
        <trans-unit id="bd63f632f0d4f47eb50cc885bb5e56a31d561a15" translate="yes" xml:space="preserve">
          <source>Explicit vendor chunk</source>
          <target state="translated">명시 적 공급 업체 청크</target>
        </trans-unit>
        <trans-unit id="53031b5ce80e37222b11145ca017d86a838c9230" translate="yes" xml:space="preserve">
          <source>Export Classnames in CamelCase</source>
          <target state="translated">CamelCase에서 클래스 이름 내보내기</target>
        </trans-unit>
        <trans-unit id="2b313873cfc3031b1119050fe6948d6fb07bbc3f" translate="yes" xml:space="preserve">
          <source>Export anything as a &lt;code&gt;default&lt;/code&gt; or named export.</source>
          <target state="translated">&lt;code&gt;default&lt;/code&gt; 또는 명명 된 내보내기로 무엇이든 내 보냅니다.</target>
        </trans-unit>
        <trans-unit id="e7ad804ffec14d8a38c42e3f5a5dcad62ba1e9ba" translate="yes" xml:space="preserve">
          <source>Export formats</source>
          <target state="translated">내보내기 형식</target>
        </trans-unit>
        <trans-unit id="7e6c56347025df0796cb96cb07e342a18d2e2263" translate="yes" xml:space="preserve">
          <source>Export into HTML files</source>
          <target state="translated">HTML 파일로 내보내기</target>
        </trans-unit>
        <trans-unit id="3e5448d2ba9175e3c5ffb8c95f6344a1db77984c" translate="yes" xml:space="preserve">
          <source>Export non-deterministic values (calling webpack twice should result in the same output files)</source>
          <target state="translated">비 결정적 값 내보내기 (웹팩을 두 번 호출하면 동일한 출력 파일이 생성됨)</target>
        </trans-unit>
        <trans-unit id="f0feb102de069c652c1ff074568da541994fa901" translate="yes" xml:space="preserve">
          <source>Export the given &lt;code&gt;value&lt;/code&gt;. The label can occur before a function declaration or a variable declaration. The function name or variable name is the identifier under which the value is exported.</source>
          <target state="translated">주어진 &lt;code&gt;value&lt;/code&gt; . 레이블은 함수 선언 또는 변수 선언 전에 발생할 수 있습니다. 함수 이름 또는 변수 이름은 값을 내보내는 식별자입니다.</target>
        </trans-unit>
        <trans-unit id="c71ed04382d50e83283b23b9b459be2770eec890" translate="yes" xml:space="preserve">
          <source>Exporting a Function</source>
          <target state="translated">함수 내보내기</target>
        </trans-unit>
        <trans-unit id="05165758db04a4c3667f90819fce0bb66fc95a83" translate="yes" xml:space="preserve">
          <source>Exporting a Promise</source>
          <target state="translated">약속 내보내기</target>
        </trans-unit>
        <trans-unit id="17a87de3b37a2786896840bacd8eaac8b40280ca" translate="yes" xml:space="preserve">
          <source>Exporting multiple configurations</source>
          <target state="translated">여러 구성 내보내기</target>
        </trans-unit>
        <trans-unit id="3692094d4ed3c9420d1d968894f1bdd4f3b9efea" translate="yes" xml:space="preserve">
          <source>Exports HTML as string. HTML is minimized when the compiler demands.</source>
          <target state="translated">HTML을 문자열로 내 보냅니다. 컴파일러가 요구할 때 HTML이 최소화됩니다.</target>
        </trans-unit>
        <trans-unit id="fd13c85d6be7b15ab54ddc6bb98a0b9748889f10" translate="yes" xml:space="preserve">
          <source>Expose Via Object Assignment</source>
          <target state="translated">객체 할당을 통해 노출</target>
        </trans-unit>
        <trans-unit id="e19d3c834a7d03a59e90d546a26e227c64e7d78e" translate="yes" xml:space="preserve">
          <source>Expose a Variable</source>
          <target state="translated">변수 노출</target>
        </trans-unit>
        <trans-unit id="8c79073b5a7df1baceebe763dd532e4501d467bb" translate="yes" xml:space="preserve">
          <source>Expose custom values into the loader context.</source>
          <target state="translated">로더 컨텍스트에 사용자 정의 값을 노출하십시오.</target>
        </trans-unit>
        <trans-unit id="722807ca5e1b48783fa47dd7448b8378e6b12201" translate="yes" xml:space="preserve">
          <source>Expose the Library</source>
          <target state="translated">도서관 노출</target>
        </trans-unit>
        <trans-unit id="4067ffdf0f541117affd03d9eee6beab1dc3b929" translate="yes" xml:space="preserve">
          <source>Expose the exports of the entry point as library</source>
          <target state="translated">진입 점 내보내기를 라이브러리로 노출</target>
        </trans-unit>
        <trans-unit id="820fc4cab3e361043d2e31e2af89ba1150959af7" translate="yes" xml:space="preserve">
          <source>Exposing the library as a variable called &lt;code&gt;webpackNumbers&lt;/code&gt;.</source>
          <target state="translated">변수 호출로 라이브러리를 노출 &lt;code&gt;webpackNumbers&lt;/code&gt; 을 .</target>
        </trans-unit>
        <trans-unit id="806e203d5977933ba63f436026b31e7b162da68d" translate="yes" xml:space="preserve">
          <source>Extending Configuration Files</source>
          <target state="translated">구성 파일 확장</target>
        </trans-unit>
        <trans-unit id="497464d42606672185b1c3e3d511a15e14c73f25" translate="yes" xml:space="preserve">
          <source>Extending Configuration Files in Symlinked Modules</source>
          <target state="translated">심볼릭 링크 모듈에서 구성 파일 확장</target>
        </trans-unit>
        <trans-unit id="180bcb449f3e0f4376867872d55215241c4f1cf0" translate="yes" xml:space="preserve">
          <source>External Limitations</source>
          <target state="translated">외부 제한</target>
        </trans-unit>
        <trans-unit id="bc64277d68c992d91830d72bb560f5cc1d53aa0a" translate="yes" xml:space="preserve">
          <source>Externalize Lodash</source>
          <target state="translated">Lodash 외부화</target>
        </trans-unit>
        <trans-unit id="548bcef531f24042c1657c9c7bd347a1802c9d7a" translate="yes" xml:space="preserve">
          <source>Externals</source>
          <target state="translated">Externals</target>
        </trans-unit>
        <trans-unit id="1add294539dba3473eaa32d2b7d08bdac3ed392d" translate="yes" xml:space="preserve">
          <source>Extra async commons chunk</source>
          <target state="translated">여분의 비동기 공통 청크</target>
        </trans-unit>
        <trans-unit id="6d84ceaf60a66c278aca37fae32385bf018a47e8" translate="yes" xml:space="preserve">
          <source>Extract</source>
          <target state="translated">Extract</target>
        </trans-unit>
        <trans-unit id="c1d3192026c606b799b1699ea37e45d0c0471c69" translate="yes" xml:space="preserve">
          <source>Extract &lt;code&gt;all&lt;/code&gt; or &lt;code&gt;some&lt;/code&gt; (use &lt;code&gt;/^\**!|@preserve|@license|@cc_on/&lt;/code&gt; RegExp) comments.</source>
          <target state="translated">주석을 &lt;code&gt;all&lt;/code&gt; 또는 &lt;code&gt;some&lt;/code&gt; 추출 하십시오 ( &lt;code&gt;/^\**!|@preserve|@license|@cc_on/&lt;/code&gt; RegExp 사용).</target>
        </trans-unit>
        <trans-unit id="18a77834ec57531e67e4f9e781c9bd2027aa4d6f" translate="yes" xml:space="preserve">
          <source>Extract all legal comments (i.e. &lt;code&gt;/^\**!|@preserve|@license|@cc_on/&lt;/code&gt;) and preserve &lt;code&gt;/@license/i&lt;/code&gt; comments.</source>
          <target state="translated">모든 법적 의견 (예 : &lt;code&gt;/^\**!|@preserve|@license|@cc_on/&lt;/code&gt; )을 추출 하고 &lt;code&gt;/@license/i&lt;/code&gt; 의견을 유지하십시오.</target>
        </trans-unit>
        <trans-unit id="93911c813714bd183a79cd47773a2be1141f5eaf" translate="yes" xml:space="preserve">
          <source>Extract common modules shared between chunks</source>
          <target state="translated">청크간에 공유되는 공통 모듈 추출</target>
        </trans-unit>
        <trans-unit id="f9b574f6bd7098b02ae75e0919b666457ced807f" translate="yes" xml:space="preserve">
          <source>Extract from all additional chunks too (by default it extracts only from the initial chunk(s))</source>
          <target state="translated">모든 추가 청크에서도 추출 (기본적으로 초기 청크에서만 추출)</target>
        </trans-unit>
        <trans-unit id="e2d0b8aabd3addb48908a5fcffc8b865e17fba9e" translate="yes" xml:space="preserve">
          <source>Extract text (CSS) from your bundles into a separate file</source>
          <target state="translated">번들에서 텍스트 (CSS)를 별도의 파일로 추출</target>
        </trans-unit>
        <trans-unit id="123268be13637fa875d7448da59a2f2ab5eb612e" translate="yes" xml:space="preserve">
          <source>Extract text from a bundle, or bundles, into a separate file.</source>
          <target state="translated">번들에서 텍스트를 별도의 파일로 추출하십시오.</target>
        </trans-unit>
        <trans-unit id="3deb7e1b34cdb8a1cf16107c7fe170670a0827bc" translate="yes" xml:space="preserve">
          <source>ExtractTextWebpackPlugin</source>
          <target state="translated">ExtractTextWebpackPlugin</target>
        </trans-unit>
        <trans-unit id="51686b26f0f58fbfcd54996cb7b969b98c99c9b1" translate="yes" xml:space="preserve">
          <source>Extracting Boilerplate</source>
          <target state="translated">보일러 플레이트 추출</target>
        </trans-unit>
        <trans-unit id="cc57da2e140b44772e087d17a933ecd0a2d43db2" translate="yes" xml:space="preserve">
          <source>Extracting CSS based on entry</source>
          <target state="translated">항목을 기반으로 CSS 추출</target>
        </trans-unit>
        <trans-unit id="736c1328cfdac78c36047c9e87873aa7af75cde2" translate="yes" xml:space="preserve">
          <source>Extracting Sass or LESS</source>
          <target state="translated">Sass 또는 LESS 추출</target>
        </trans-unit>
        <trans-unit id="4fcac7899b084e0f5b540913b6cc7722349794bd" translate="yes" xml:space="preserve">
          <source>Extracting all CSS in a single file</source>
          <target state="translated">단일 파일에서 모든 CSS 추출</target>
        </trans-unit>
        <trans-unit id="6ea6dec2c2e048e3fcc7e5e44eecd7647d71af19" translate="yes" xml:space="preserve">
          <source>Extracting style sheets</source>
          <target state="translated">스타일 시트 추출</target>
        </trans-unit>
        <trans-unit id="86f0d1b49c07e17b22d11a7f26ca75fa972d8281" translate="yes" xml:space="preserve">
          <source>Extracts source maps from existing source files (from their &lt;code&gt;sourceMappingURL&lt;/code&gt;).</source>
          <target state="translated">기존 소스 파일 ( &lt;code&gt;sourceMappingURL&lt;/code&gt; ) 에서 소스 맵을 추출합니다 .</target>
        </trans-unit>
        <trans-unit id="14ca83e77c59c0a29005d09c39bd0028dff0cc99" translate="yes" xml:space="preserve">
          <source>Fail out on the first error instead of tolerating it. By default webpack will log these errors in red in the terminal, as well as the browser console when using HMR, but continue bundling. To enable it:</source>
          <target state="translated">허용하지 않고 첫 번째 오류가 발생하면 실패합니다. 기본적으로 webpack은 HMR을 사용할 때 브라우저 콘솔뿐만 아니라 터미널에서도 이러한 오류를 빨간색으로 기록하지만 번들링은 계속합니다. 사용하려면 다음을 수행하십시오.</target>
        </trans-unit>
        <trans-unit id="26017fc1f4b9afd13ef87c4b93809798f59c5ba0" translate="yes" xml:space="preserve">
          <source>Faster runtime (less code and DOM operations)</source>
          <target state="translated">빠른 런타임 (코드 및 DOM 작업이 적음)</target>
        </trans-unit>
        <trans-unit id="f2b1f00081dc02d0cadbe84ecbc1e2938cce7ad3" translate="yes" xml:space="preserve">
          <source>Fatal webpack errors (wrong configuration, etc)</source>
          <target state="translated">치명적인 웹팩 오류 (잘못된 구성 등)</target>
        </trans-unit>
        <trans-unit id="4f5a54627dea26b6876632913ba4f8191aad7605" translate="yes" xml:space="preserve">
          <source>Feature Flags</source>
          <target state="translated">기능 플래그</target>
        </trans-unit>
        <trans-unit id="fc338f87a058158eb824b53705961801516a9460" translate="yes" xml:space="preserve">
          <source>Features</source>
          <target state="translated">Features</target>
        </trans-unit>
        <trans-unit id="387426b88e122c175b24856eb5817e7d755a55c4" translate="yes" xml:space="preserve">
          <source>Feel free to run those scripts and see how the output changes as we continue adding to our &lt;em&gt;production&lt;/em&gt; configuration.</source>
          <target state="translated">해당 스크립트를 실행하고 &lt;em&gt;프로덕션&lt;/em&gt; 구성에 계속 추가하면서 출력이 어떻게 변경되는지 확인하십시오 .</target>
        </trans-unit>
        <trans-unit id="6361b663a3bfe269e61376666548fa2f9bd31d56" translate="yes" xml:space="preserve">
          <source>Fewer style tags (older IE has a limit)</source>
          <target state="translated">스타일 태그가 적음 (이전 IE에는 제한이 있음)</target>
        </trans-unit>
        <trans-unit id="e2f1bee71df47a63014f001b80f685e7cd2c1381" translate="yes" xml:space="preserve">
          <source>File location and read info</source>
          <target state="translated">파일 위치 및 정보 읽기</target>
        </trans-unit>
        <trans-unit id="6ce6c512ea433a7fc5c8841628e7696cd0ff7f2b" translate="yes" xml:space="preserve">
          <source>Files</source>
          <target state="translated">Files</target>
        </trans-unit>
        <trans-unit id="a8cfe1301941a91828e9dd741d845cc92bbca588" translate="yes" xml:space="preserve">
          <source>Files to &lt;code&gt;exclude&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;exclude&lt;/code&gt; 할 파일</target>
        </trans-unit>
        <trans-unit id="426129006308e471cd729639a2ed20f4ade0d520" translate="yes" xml:space="preserve">
          <source>Files to &lt;code&gt;include&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;include&lt;/code&gt; 할 파일</target>
        </trans-unit>
        <trans-unit id="88ad4711650474a843f6b189599efd8811dceeac" translate="yes" xml:space="preserve">
          <source>Files to exclude.</source>
          <target state="translated">제외 할 파일</target>
        </trans-unit>
        <trans-unit id="6fb86f6fdadaf02afe64ed5d96dc2c399fb79d77" translate="yes" xml:space="preserve">
          <source>Files to include.</source>
          <target state="translated">포함 할 파일</target>
        </trans-unit>
        <trans-unit id="c2229728b40339f4861573c421046144d5602901" translate="yes" xml:space="preserve">
          <source>Filesystem inaccuracies may trigger multiple builds for a single change. So, in the example above, the &lt;code&gt;console.log&lt;/code&gt; statement may fire multiple times for a single modification. Users should expect this behavior and may check &lt;code&gt;stats.hash&lt;/code&gt; to see if the file hash has actually changed.</source>
          <target state="translated">파일 시스템 부정확성은 단일 변경에 대해 여러 빌드를 트리거 할 수 있습니다. 따라서 위의 예에서 &lt;code&gt;console.log&lt;/code&gt; 문은 한 번의 수정으로 여러 번 실행될 수 있습니다. 사용자는이 동작을 예상 하고 파일 해시가 실제로 변경 되었는지 확인 &lt;code&gt;stats.hash&lt;/code&gt; 위해 stats.hash 를 검사 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="4479eeac566a1d5950e1954286cfeb45680f95bb" translate="yes" xml:space="preserve">
          <source>Final Steps</source>
          <target state="translated">마지막 단계</target>
        </trans-unit>
        <trans-unit id="b984c3a594e03d4e47017ebbf42f89b1aba1d79a" translate="yes" xml:space="preserve">
          <source>Finally, &lt;code&gt;&quot;sideEffects&quot;&lt;/code&gt; can also be set from the &lt;a href=&quot;../configuration/module#module-rules&quot;&gt;&lt;code&gt;module.rules&lt;/code&gt; configuration option&lt;/a&gt;.</source>
          <target state="translated">마지막으로 &lt;code&gt;&quot;sideEffects&quot;&lt;/code&gt; 는 &lt;a href=&quot;../configuration/module#module-rules&quot;&gt; &lt;code&gt;module.rules&lt;/code&gt; 구성 옵션&lt;/a&gt; 에서 설정할 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="82dc631b7d6bf3350f27e268967eab3438ed66eb" translate="yes" xml:space="preserve">
          <source>Fired after chunk optimization has completed.</source>
          <target state="translated">청크 최적화가 완료된 후 시작됩니다.</target>
        </trans-unit>
        <trans-unit id="1fc7ec5e434517a77b397df44ca1b8a1dfbb81eb" translate="yes" xml:space="preserve">
          <source>Fired at the beginning of dependency optimization.</source>
          <target state="translated">종속성 최적화가 시작될 때 시작됩니다.</target>
        </trans-unit>
        <trans-unit id="bb02302a65a96c19d50855ad714ab54dd7de9951" translate="yes" xml:space="preserve">
          <source>Fired before chunk &lt;code&gt;id&lt;/code&gt; optimization.</source>
          <target state="translated">청크 &lt;code&gt;id&lt;/code&gt; 최적화 전에 시작되었습니다 .</target>
        </trans-unit>
        <trans-unit id="c1d8bcf58c3d8f04688944f7def3c9492a2e93b9" translate="yes" xml:space="preserve">
          <source>Fired before rebuilding a module.</source>
          <target state="translated">모듈을 다시 빌드하기 전에 시작되었습니다.</target>
        </trans-unit>
        <trans-unit id="5aed89b7bcfb95405a50d009874078e5d2e9502d" translate="yes" xml:space="preserve">
          <source>Fired when a compilation begins accepting new modules.</source>
          <target state="translated">컴파일에서 새 모듈을 수락하기 시작하면 시작됩니다.</target>
        </trans-unit>
        <trans-unit id="cec0babb097d6758189ea86e9410f8087384aa0a" translate="yes" xml:space="preserve">
          <source>Fired when the compilation stops accepting new modules.</source>
          <target state="translated">컴파일이 새 모듈 수락을 중지하면 시작됩니다.</target>
        </trans-unit>
        <trans-unit id="79e276153519262fda3521a5754b4ba55b0c0262" translate="yes" xml:space="preserve">
          <source>First install the TypeScript compiler and loader by running:</source>
          <target state="translated">먼저 다음을 실행하여 TypeScript 컴파일러 및 로더를 설치하십시오.</target>
        </trans-unit>
        <trans-unit id="f845ec5e217d249b96e3572b9f76b2d5a0e8ee80" translate="yes" xml:space="preserve">
          <source>First install the necessary dependencies:</source>
          <target state="translated">먼저 필요한 종속성을 설치하십시오.</target>
        </trans-unit>
        <trans-unit id="7e7cf28d814a90cd567ea771390c97bd16c45d83" translate="yes" xml:space="preserve">
          <source>First install the plugin and adjust the &lt;code&gt;webpack.config.js&lt;/code&gt; file:</source>
          <target state="translated">먼저 플러그인을 설치하고 &lt;code&gt;webpack.config.js&lt;/code&gt; 파일을 조정 하십시오.</target>
        </trans-unit>
        <trans-unit id="f3f0e2eab98ee7d2bfa4e36b3bb5ad4a43dce3c5" translate="yes" xml:space="preserve">
          <source>First let's create a directory, initialize npm, &lt;a href=&quot;installation#local-installation&quot;&gt;install webpack locally&lt;/a&gt;, and install the webpack-cli (the tool used to run webpack on the command line):</source>
          <target state="translated">먼저 디렉토리를 만들고, npm을 초기화하고, &lt;a href=&quot;installation#local-installation&quot;&gt;로컬로 webpack&lt;/a&gt; 을 설치하고, webpack-cli (명령 줄에서 webpack을 실행하는 데 사용되는 도구)를 설치하십시오 :</target>
        </trans-unit>
        <trans-unit id="e9c68011e86c1f8f212218a7b9629bdd9bc0200a" translate="yes" xml:space="preserve">
          <source>First let's install both loaders with the following command:</source>
          <target state="translated">먼저 다음 명령을 사용하여 두 로더를 모두 설치하십시오.</target>
        </trans-unit>
        <trans-unit id="f7aa2754364fd47f495ae0e5db514f076aa84166" translate="yes" xml:space="preserve">
          <source>First we'll tweak our directory structure slightly, separating the &quot;source&quot; code (&lt;code&gt;/src&lt;/code&gt;) from our &quot;distribution&quot; code (&lt;code&gt;/dist&lt;/code&gt;). The &quot;source&quot; code is the code that we'll write and edit. The &quot;distribution&quot; code is the minimized and optimized &lt;code&gt;output&lt;/code&gt; of our build process that will eventually be loaded in the browser:</source>
          <target state="translated">먼저 &quot;배포&quot;코드 ( &lt;code&gt;/dist&lt;/code&gt; ) 에서 &quot;source&quot;코드 ( &lt;code&gt;/src&lt;/code&gt; )를 분리하여 디렉토리 구조를 약간 조정합니다 . &quot;소스&quot;코드는 작성하고 편집 할 코드입니다. &quot;배포&quot;코드는 빌드 프로세스 의 최소화 및 최적화 된 &lt;code&gt;output&lt;/code&gt; , 결국 브라우저에로드됩니다.</target>
        </trans-unit>
        <trans-unit id="ca547be96980c80fccd257e9a142306900605cdb" translate="yes" xml:space="preserve">
          <source>First, let's adjust our project a little bit:</source>
          <target state="translated">먼저 프로젝트를 약간 조정 해 보겠습니다.</target>
        </trans-unit>
        <trans-unit id="b4d4531e5905c812ac4512c67a4cfa6dec35e54c" translate="yes" xml:space="preserve">
          <source>First, the &lt;code&gt;data&lt;/code&gt; passed to the &lt;code&gt;pitch&lt;/code&gt; method is exposed in the execution phase as well under &lt;code&gt;this.data&lt;/code&gt; and could be useful for capturing and sharing information from earlier in the cycle.</source>
          <target state="translated">먼저, &lt;code&gt;pitch&lt;/code&gt; 방법으로 전달 된 &lt;code&gt;data&lt;/code&gt; 는 &lt;code&gt;this.data&lt;/code&gt; 아래의 실행 단계에서도 노출되며 주기 초기의 정보를 캡처하고 공유하는 데 유용 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="584245f03e450961f0ad3c1a61d7cda83e92283a" translate="yes" xml:space="preserve">
          <source>Firstly, you can inline the worker as a blob instead of downloading it as an external script via the &lt;a href=&quot;#inline&quot;&gt;&lt;code&gt;inline&lt;/code&gt;&lt;/a&gt; parameter</source>
          <target state="translated">먼저 &lt;a href=&quot;#inline&quot;&gt; &lt;code&gt;inline&lt;/code&gt; &lt;/a&gt; 매개 변수 를 통해 작업자를 외부 스크립트로 다운로드하는 대신 Blob으로 인라인 할 수 있습니다</target>
        </trans-unit>
        <trans-unit id="6551527edd64d92e64047b363c640c11b65112df" translate="yes" xml:space="preserve">
          <source>Flag a dependency as not-update-able. This makes sense when changing exports of this dependency can be handled or handling is not implemented yet. Depending on your HMR management code an update to this dependencies (or unaccepted dependencies of it) usually causes a full-reload of the page.</source>
          <target state="translated">종속성을 업데이트 할 수없는 것으로 플래그 지정하십시오. 이 종속성의 내보내기를 변경하거나 처리 할 수없는 경우에는 의미가 있습니다. HMR 관리 코드에 따라이 종속성 (또는 허용되지 않는 종속성)에 대한 업데이트는 일반적으로 페이지를 완전히 다시로드합니다.</target>
        </trans-unit>
        <trans-unit id="a30934bbebcaf8793fa9262d96b35e00c232b0fd" translate="yes" xml:space="preserve">
          <source>Flag this module as not-update-able. This make sense when this module has inrevertable side-effects, or HMR handling is not implemented for this module yet. Depending on your HMR management code an update to this module (or unaccepted dependencies) usually causes a full-reload of the page.</source>
          <target state="translated">이 모듈을 업데이트 할 수없는 것으로 표시하십시오. 이는이 모듈에 되돌릴 수없는 부작용이 있거나이 모듈에 대해 HMR 처리가 아직 구현되지 않은 경우에 적합합니다. HMR 관리 코드에 따라이 모듈 (또는 허용되지 않는 종속성)을 업데이트하면 일반적으로 페이지가 완전히 다시로드됩니다.</target>
        </trans-unit>
        <trans-unit id="caf4b23a98b0925f5e657315aefc4ab1b9143079" translate="yes" xml:space="preserve">
          <source>FlagIncludedChunksPlugin</source>
          <target state="translated">FlagIncludedChunksPlugin</target>
        </trans-unit>
        <trans-unit id="98f1cfa005d71afcbc462e3a744c789068342e71" translate="yes" xml:space="preserve">
          <source>For a better understanding of the ideas behind module bundlers and how they work under the hood consult these resources:</source>
          <target state="translated">모듈 번 들러의 기본 개념과 이들이 어떻게 작동하는지 이해하려면 다음 리소스를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="efc5c20809153aa4eb3674984e6265239cecfe8b" translate="yes" xml:space="preserve">
          <source>For a full list, see &lt;a href=&quot;https://webpack.js.org/loaders&quot;&gt;&lt;strong&gt;the list of loaders&lt;/strong&gt;&lt;/a&gt; or &lt;a href=&quot;../api/loaders&quot;&gt;&lt;strong&gt;write your own&lt;/strong&gt;&lt;/a&gt;.</source>
          <target state="translated">전체 목록 &lt;a href=&quot;https://webpack.js.org/loaders&quot;&gt;&lt;strong&gt;은 로더 목록을&lt;/strong&gt;&lt;/a&gt; 참조 하거나 &lt;a href=&quot;../api/loaders&quot;&gt;&lt;strong&gt;직접 작성하십시오&lt;/strong&gt;&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="c53fa1add2ed92b7c6c061470ef0fe314a1db2db" translate="yes" xml:space="preserve">
          <source>For a good error handling, you need to account for these three types of errors:</source>
          <target state="translated">올바른 오류 처리를 위해서는 다음 세 가지 유형의 오류를 고려해야합니다.</target>
        </trans-unit>
        <trans-unit id="69e9a7ca686aa0d593a7bd1e7a04191e2ee1c42d" translate="yes" xml:space="preserve">
          <source>For a high-level introduction to writing plugins, start with &lt;a href=&quot;https://webpack.js.org/contribute/writing-a-plugin&quot;&gt;writing a plugin&lt;/a&gt;.</source>
          <target state="translated">플러그인을 작성하는 높은 수준의 소개를 들어, 시작 &lt;a href=&quot;https://webpack.js.org/contribute/writing-a-plugin&quot;&gt;플러그인을 작성&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="0c240690fb0bc3e19d7bcee7b6b5c5c3eaebffe7" translate="yes" xml:space="preserve">
          <source>For a single &lt;a href=&quot;entry-context#entry&quot;&gt;&lt;code&gt;entry&lt;/code&gt;&lt;/a&gt; point, this can be a static name.</source>
          <target state="translated">단일 &lt;a href=&quot;entry-context#entry&quot;&gt; &lt;code&gt;entry&lt;/code&gt; &lt;/a&gt; 점의 경우 이는 정적 이름 일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="4ec6e06e644cffbc63772a86002cdaa0236f78ef" translate="yes" xml:space="preserve">
          <source>For all configuration options, please see the &lt;a href=&quot;https://github.com/jantimon/html-webpack-plugin#options&quot;&gt;plugin documentation&lt;/a&gt;.</source>
          <target state="translated">모든 구성 옵션은 &lt;a href=&quot;https://github.com/jantimon/html-webpack-plugin#options&quot;&gt;플러그인 설명서&lt;/a&gt; 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="4b0a1ebcbc4ec7b1cc5f8c899bcd3bcab1fa1ec1" translate="yes" xml:space="preserve">
          <source>For any other target (including &lt;code&gt;node&lt;/code&gt;):</source>
          <target state="translated">다른 대상 ( &lt;code&gt;node&lt;/code&gt; 포함 )의 경우 :</target>
        </trans-unit>
        <trans-unit id="ff9282145263a12d82e1ed3db1195337137628c3" translate="yes" xml:space="preserve">
          <source>For asynchronous loaders, &lt;a href=&quot;loaders#this-async&quot;&gt;&lt;code&gt;this.async&lt;/code&gt;&lt;/a&gt; is used to retrieve the &lt;code&gt;callback&lt;/code&gt; function:</source>
          <target state="translated">비동기 로더의 경우 &lt;a href=&quot;loaders#this-async&quot;&gt; &lt;code&gt;this.async&lt;/code&gt; &lt;/a&gt; 는 &lt;code&gt;callback&lt;/code&gt; 함수 를 검색하는 데 사용됩니다 .</target>
        </trans-unit>
        <trans-unit id="220d57652c6e3141e96033d0eed129608766a7d9" translate="yes" xml:space="preserve">
          <source>For compatibility a &lt;code&gt;query&lt;/code&gt; property is also possible, which is an alias for the &lt;code&gt;options&lt;/code&gt; property. Use the &lt;code&gt;options&lt;/code&gt; property instead.</source>
          <target state="translated">호환성 을 위해 &lt;code&gt;options&lt;/code&gt; 속성 의 별칭 인 &lt;code&gt;query&lt;/code&gt; 속성도 가능 합니다. &lt;code&gt;options&lt;/code&gt; 속성을 대신 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="fb8c4c4da20d811841bff532533510ebb0cea7ff" translate="yes" xml:space="preserve">
          <source>For compatibility also these properties: &lt;a href=&quot;#rule-options-rule-query&quot;&gt;&lt;code&gt;query&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#rule-loaders&quot;&gt;&lt;code&gt;loaders&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">호환성을 위해 &lt;a href=&quot;#rule-options-rule-query&quot;&gt; &lt;code&gt;query&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;#rule-loaders&quot;&gt; &lt;code&gt;loaders&lt;/code&gt; &lt;/a&gt; 속성도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="82962bc6a0e3d0baeb54eec357c66228971a937d" translate="yes" xml:space="preserve">
          <source>For details see &lt;a href=&quot;#output-jsonpfunction&quot;&gt;&lt;code&gt;output.jsonpFunction&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">자세한 내용은 &lt;a href=&quot;#output-jsonpfunction&quot;&gt; &lt;code&gt;output.jsonpFunction&lt;/code&gt; 을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="5a95278c7d79dc4008521d3f2a619571d809ff05" translate="yes" xml:space="preserve">
          <source>For developers that want to have more control over this functionality, webpack provides a set of options to better fit your needs. If you're changing the configuration, it's a good idea to measure the impact of your changes to ensure there's a real benefit.</source>
          <target state="translated">이 기능을보다 강력하게 제어하려는 개발자를 위해 webpack은 사용자의 요구에보다 잘 맞는 옵션을 제공합니다. 구성을 변경하는 경우 변경의 영향을 측정하여 실질적인 이점이 있는지 확인하는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="572ef11d0b33bdee4843c100b85cf0b7e5a1e02e" translate="yes" xml:space="preserve">
          <source>For each module, the following details are included in the output as applicable:</source>
          <target state="translated">각 모듈에 대해 다음 세부 사항이 출력에 포함됩니다 (해당되는 경우).</target>
        </trans-unit>
        <trans-unit id="1db4c11438f4b95d634168947935046d53a6a62b" translate="yes" xml:space="preserve">
          <source>For example if we want to install lodash we can run the following command to get the typings for it:</source>
          <target state="translated">예를 들어 lodash를 설치하려면 다음 명령을 실행하여 입력을 얻을 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c5838e77fa48d0f3cdacff621e48c21671c60c13" translate="yes" xml:space="preserve">
          <source>For example, if you don't want any of the plugins they applied:</source>
          <target state="translated">예를 들어, 적용한 플러그인을 원하지 않으면 다음을 수행하십시오.</target>
        </trans-unit>
        <trans-unit id="89ad1c2c18e0b88c94e326ad4de2f47af1847fe7" translate="yes" xml:space="preserve">
          <source>For example, if you have 2 libraries, with namespaces &lt;code&gt;library1&lt;/code&gt; and &lt;code&gt;library2&lt;/code&gt;, which both have a file &lt;code&gt;./src/index.js&lt;/code&gt; (with potentially different contents), they will expose these files as &lt;code&gt;webpack://library1/./src/index.js&lt;/code&gt; and &lt;code&gt;webpack://library2/./src/index.js&lt;/code&gt;.</source>
          <target state="translated">예를 들어, 네임 스페이스 &lt;code&gt;library1&lt;/code&gt; 및 &lt;code&gt;library2&lt;/code&gt; 가있는 두 개의 라이브러리 가 있고 둘 다 &lt;code&gt;./src/index.js&lt;/code&gt; 파일 (잠재적으로 내용이 다름) 인 &lt;code&gt;webpack://library1/./src/index.js&lt;/code&gt; 파일을 webpack : //library1/./src/ 하는 index.js 및 &lt;code&gt;webpack://library2/./src/index.js&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="1354cdb2732a48beec217a6d7eba166915ac9ade" translate="yes" xml:space="preserve">
          <source>For example, let's say you want to expose jQuery as a global called &lt;code&gt;$&lt;/code&gt;:</source>
          <target state="translated">예를 들어, jQuery를 &lt;code&gt;$&lt;/code&gt; 라는 전역으로 노출한다고 가정 해 봅시다 .</target>
        </trans-unit>
        <trans-unit id="23a7d3ecec5657cd69b44811ac0ca1f3638a8867" translate="yes" xml:space="preserve">
          <source>For example, the &lt;code&gt;package.json&lt;/code&gt; of &lt;a href=&quot;https://d3js.org/&quot;&gt;D3&lt;/a&gt; contains these fields:</source>
          <target state="translated">예를 들어, &lt;a href=&quot;https://d3js.org/&quot;&gt;D3&lt;/a&gt; 의 &lt;code&gt;package.json&lt;/code&gt; 은 다음 필드를 포함합니다.</target>
        </trans-unit>
        <trans-unit id="86cb5550fc2a447139864a2a923a8826ca965a57" translate="yes" xml:space="preserve">
          <source>For example, the dev-server is proxied by nginx, and available on &lt;code&gt;myapp.test&lt;/code&gt;:</source>
          <target state="translated">예를 들어, dev-server는 nginx에 의해 프록시되며 &lt;code&gt;myapp.test&lt;/code&gt; 에서 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="924336c3be08516736fd5a3f638e946b88547ec0" translate="yes" xml:space="preserve">
          <source>For example, to include &lt;a href=&quot;https://jquery.com/&quot;&gt;jQuery&lt;/a&gt; from a CDN instead of bundling it:</source>
          <target state="translated">예를 들어, CDN을 번들링하는 대신 &lt;a href=&quot;https://jquery.com/&quot;&gt;jQuery&lt;/a&gt; 를 포함 시키려면 다음을 수행 하십시오.</target>
        </trans-unit>
        <trans-unit id="1d1d780ff0f02c7b21754c6dbb38f16b2a1358fe" translate="yes" xml:space="preserve">
          <source>For example, to set the quality option of a responsive-loader above use:</source>
          <target state="translated">예를 들어, 위의 응답 로더의 품질 옵션을 설정하려면 다음을 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="678528317cc158c5d0b79e6bf40aa9dc39122b01" translate="yes" xml:space="preserve">
          <source>For example, when the &lt;code&gt;target&lt;/code&gt; is set to &lt;code&gt;&quot;electron&quot;&lt;/code&gt;, webpack includes multiple electron specific variables. For more information on which templates and externals are used, you can refer to webpack's &lt;a href=&quot;https://github.com/webpack/webpack/blob/master/lib/WebpackOptionsApply.js#L70-L185&quot;&gt;source code&lt;/a&gt;.</source>
          <target state="translated">예를 들어, &lt;code&gt;target&lt;/code&gt; 이 &lt;code&gt;&quot;electron&quot;&lt;/code&gt; 으로 설정 되면 webpack은 여러 전자 특정 변수를 포함합니다. 사용되는 템플릿 및 외부에 대한 자세한 내용은 웹팩의 &lt;a href=&quot;https://github.com/webpack/webpack/blob/master/lib/WebpackOptionsApply.js#L70-L185&quot;&gt;소스 코드를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="c3d04cf27bd4be6f7f21f13f220f31e3a32dcf41" translate="yes" xml:space="preserve">
          <source>For example, you can use loaders to tell webpack to load a CSS file or to convert TypeScript to JavaScript. To do this, you would start by installing the loaders you need:</source>
          <target state="translated">예를 들어, 로더를 사용하여 웹팩에 CSS 파일을로드하거나 TypeScript를 JavaScript로 변환하도록 지시 할 수 있습니다. 이렇게하려면 필요한 로더를 설치하여 시작하십시오.</target>
        </trans-unit>
        <trans-unit id="acfc565982752a0938baf7976a9c74b3f4a8e83a" translate="yes" xml:space="preserve">
          <source>For external library code, webpack provides &lt;a href=&quot;../guides/shimming&quot;&gt;shimming options&lt;/a&gt;.</source>
          <target state="translated">외부 라이브러리 코드의 경우 webpack은 &lt;a href=&quot;../guides/shimming&quot;&gt;shimming 옵션을&lt;/a&gt; 제공합니다 .</target>
        </trans-unit>
        <trans-unit id="51d1e42fced245894ad9fbe439c8baaacb5a0507" translate="yes" xml:space="preserve">
          <source>For fine-grained control over each &lt;code&gt;libraryTarget&lt;/code&gt; comment, pass an object:</source>
          <target state="translated">각 &lt;code&gt;libraryTarget&lt;/code&gt; 주석에 대한 세밀한 제어를 위해 오브젝트를 전달하십시오.</target>
        </trans-unit>
        <trans-unit id="e27efa5ffc707fccbc8083788ff642aa6778f963" translate="yes" xml:space="preserve">
          <source>For full library configuration and code please refer to &lt;a href=&quot;https://github.com/kalcifer/webpack-library-example&quot;&gt;webpack-library-example&lt;/a&gt;.</source>
          <target state="translated">전체 라이브러리 구성 및 코드는 &lt;a href=&quot;https://github.com/kalcifer/webpack-library-example&quot;&gt;webpack-library-example을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="9897dade2cf2820967287768b614edc99a77a1e8" translate="yes" xml:space="preserve">
          <source>For further hints on compatibility issues, check out &lt;a href=&quot;http://webpack.github.io/docs/shimming-modules.html&quot;&gt;Shimming Modules&lt;/a&gt; of the official docs.</source>
          <target state="translated">호환성 문제에 대한 추가 힌트 는 공식 문서의 &lt;a href=&quot;http://webpack.github.io/docs/shimming-modules.html&quot;&gt;Shimming Modules&lt;/a&gt; 를 확인하십시오 .</target>
        </trans-unit>
        <trans-unit id="7203d58eb1262e411dde32a02b39e84ca6f7bf88" translate="yes" xml:space="preserve">
          <source>For importing the default export of an ES2015 module, you have to specify the default property of module.</source>
          <target state="translated">ES2015 모듈의 기본 내보내기를 가져 오려면 module의 기본 속성을 지정해야합니다.</target>
        </trans-unit>
        <trans-unit id="0efc097b04b7fd44aed42642d28aea71debcce57" translate="yes" xml:space="preserve">
          <source>For instance, consider &lt;code&gt;module.js&lt;/code&gt;:</source>
          <target state="translated">예를 들어 &lt;code&gt;module.js&lt;/code&gt; 를 고려 하십시오 .</target>
        </trans-unit>
        <trans-unit id="f9ee0127d8cb25e19d11120026902b69db8c195b" translate="yes" xml:space="preserve">
          <source>For libraries that use several files from a dependency:</source>
          <target state="translated">종속성에서 여러 파일을 사용하는 라이브러리의 경우 :</target>
        </trans-unit>
        <trans-unit id="4b9e31327342e38267e644f4cd366f001e7888ee" translate="yes" xml:space="preserve">
          <source>For long term caching use &lt;code&gt;filename: &quot;[contenthash].css&quot;&lt;/code&gt;. Optionally add &lt;code&gt;[name]&lt;/code&gt;.</source>
          <target state="translated">장기 캐싱의 경우 &lt;code&gt;filename: &quot;[contenthash].css&quot;&lt;/code&gt; . 선택적으로 &lt;code&gt;[name]&lt;/code&gt; 을 추가하십시오 .</target>
        </trans-unit>
        <trans-unit id="56a3a561ace145ac5af72ac07a4a571ee1cb6dfa" translate="yes" xml:space="preserve">
          <source>For more granular control, it is possible to specify exactly what information you want. Please note that all of the options in this object are optional.</source>
          <target state="translated">보다 세밀한 제어를 위해 원하는 정보를 정확하게 지정할 수 있습니다. 이 개체의 모든 옵션은 선택 사항입니다.</target>
        </trans-unit>
        <trans-unit id="3236952e7ddfe477a162dbdb19da13ef2f15fec5" translate="yes" xml:space="preserve">
          <source>For more information on CSP and &lt;code&gt;nonce&lt;/code&gt; attribute, please refer to &lt;strong&gt;Further Reading&lt;/strong&gt; section at the bottom of this page.</source>
          <target state="translated">CSP에 대한 자세한 정보 및 내용은 &lt;code&gt;nonce&lt;/code&gt; 속성을 참조하시기 바랍니다 &lt;strong&gt;더 읽기&lt;/strong&gt; 이 페이지의 하단에있는 섹션.</target>
        </trans-unit>
        <trans-unit id="d04e06f57ad60a58bbd7337642d9bf746776c1b8" translate="yes" xml:space="preserve">
          <source>For more information on how to use this configuration, please refer to the article on &lt;a href=&quot;../guides/author-libraries&quot;&gt;how to author a library&lt;/a&gt;.</source>
          <target state="translated">이 구성을 사용하는 방법에 대한 자세한 내용 &lt;a href=&quot;../guides/author-libraries&quot;&gt;은 라이브러리를 작성하는 방법에&lt;/a&gt; 대한 기사를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="895a6618174ad6a74090d51665e8678334705826" translate="yes" xml:space="preserve">
          <source>For more information see &lt;a href=&quot;https://blogs.msdn.microsoft.com/typescript/2016/06/15/the-future-of-declaration-files/&quot;&gt;this blog post&lt;/a&gt;.</source>
          <target state="translated">자세한 내용은 &lt;a href=&quot;https://blogs.msdn.microsoft.com/typescript/2016/06/15/the-future-of-declaration-files/&quot;&gt;이 블로그 게시물을&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="d3e7badcb395aecbc49029810c774afdbbf3cb0b" translate="yes" xml:space="preserve">
          <source>For more information, please visit the &lt;a href=&quot;https://github.com/shama/webpack-stream&quot;&gt;repository&lt;/a&gt;.</source>
          <target state="translated">자세한 정보는 &lt;a href=&quot;https://github.com/shama/webpack-stream&quot;&gt;저장소&lt;/a&gt; 를 방문하십시오 .</target>
        </trans-unit>
        <trans-unit id="760310b94c1a80fc0896dec6de2cce158bcdb2c8" translate="yes" xml:space="preserve">
          <source>For more information, please visit the &lt;a href=&quot;https://github.com/webpack-contrib/grunt-webpack&quot;&gt;repository&lt;/a&gt;.</source>
          <target state="translated">자세한 정보는 &lt;a href=&quot;https://github.com/webpack-contrib/grunt-webpack&quot;&gt;저장소&lt;/a&gt; 를 방문하십시오 .</target>
        </trans-unit>
        <trans-unit id="64e050898d4f87c3696dd8ec0461a6d98ab28f33" translate="yes" xml:space="preserve">
          <source>For more information, please visit the &lt;a href=&quot;https://github.com/webpack-contrib/karma-webpack&quot;&gt;repository&lt;/a&gt;.</source>
          <target state="translated">자세한 정보는 &lt;a href=&quot;https://github.com/webpack-contrib/karma-webpack&quot;&gt;저장소&lt;/a&gt; 를 방문하십시오 .</target>
        </trans-unit>
        <trans-unit id="9b3f514d5b005df4310892576af4648ba658297e" translate="yes" xml:space="preserve">
          <source>For more information, please visit the &lt;a href=&quot;https://github.com/zinserjan/mocha-webpack&quot;&gt;repository&lt;/a&gt;.</source>
          <target state="translated">자세한 정보는 &lt;a href=&quot;https://github.com/zinserjan/mocha-webpack&quot;&gt;저장소&lt;/a&gt; 를 방문하십시오 .</target>
        </trans-unit>
        <trans-unit id="0b9a85b52ac416b997fd0dff50a1a7885a1c04c8" translate="yes" xml:space="preserve">
          <source>For more information, see the &lt;a href=&quot;stats&quot;&gt;&lt;strong&gt;stats documentation&lt;/strong&gt;&lt;/a&gt;.</source>
          <target state="translated">자세한 내용은 &lt;a href=&quot;stats&quot;&gt;&lt;strong&gt;통계 설명서를&lt;/strong&gt;&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="f76eef7e0117ad0717e3fc52109e5d79be63e187" translate="yes" xml:space="preserve">
          <source>For more options and information, see the &lt;a href=&quot;https://github.com/bripkens/connect-history-api-fallback&quot;&gt;connect-history-api-fallback&lt;/a&gt; documentation.</source>
          <target state="translated">자세한 옵션과 정보는 &lt;a href=&quot;https://github.com/bripkens/connect-history-api-fallback&quot;&gt;connect-history-api-fallback&lt;/a&gt; 설명서를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="d2f674b123a7233ec4fa637805fca776c8513288" translate="yes" xml:space="preserve">
          <source>For more third-party loaders, see the list from &lt;a href=&quot;https://github.com/webpack-contrib/awesome-webpack#loaders&quot;&gt;awesome-webpack&lt;/a&gt;.</source>
          <target state="translated">더 많은 타사 로더는 &lt;a href=&quot;https://github.com/webpack-contrib/awesome-webpack#loaders&quot;&gt;awesome-webpack&lt;/a&gt; 의 목록을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="cb7d2e7db4aa1e93db6a75ac7a98ec24068f5971" translate="yes" xml:space="preserve">
          <source>For more third-party plugins, see the list from &lt;a href=&quot;https://github.com/webpack-contrib/awesome-webpack#webpack-plugins&quot;&gt;awesome-webpack&lt;/a&gt;.</source>
          <target state="translated">더 많은 타사 플러그인에 대해서는 &lt;a href=&quot;https://github.com/webpack-contrib/awesome-webpack#webpack-plugins&quot;&gt;awesome-webpack&lt;/a&gt; 의 목록을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="e4578d63bf33346856deed41170e70b40f29518a" translate="yes" xml:space="preserve">
          <source>For production builds it's recommended to extract the CSS from your bundle being able to use parallel loading of CSS/JS resources later on. This can be achieved by using the &lt;a href=&quot;../plugins/mini-css-extract-plugin&quot;&gt;mini-css-extract-plugin&lt;/a&gt; to extract the CSS when running in production mode.</source>
          <target state="translated">프로덕션 빌드의 경우 나중에 CSS / JS 자원의 병렬로드를 사용할 수 있도록 번들에서 CSS를 추출하는 것이 좋습니다. 이것은 사용에 의해 달성 될 수있다 &lt;a href=&quot;../plugins/mini-css-extract-plugin&quot;&gt;미니 CSS-추출물 플러그인을&lt;/a&gt; 생산 모드에서 실행할 때 CSS를 추출 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a4b4bb89ca0fa8c44c49cd52426bf7ce160e01d4" translate="yes" xml:space="preserve">
          <source>For proper usage and easy distribution of this configuration, webpack can be configured with &lt;code&gt;webpack.config.js&lt;/code&gt;. Any parameters sent to the CLI will map to a corresponding parameter in the config file.</source>
          <target state="translated">적절한 사용이 구성을 쉽게 배포하는 웹팩을 구성 할 수 있습니다 &lt;code&gt;webpack.config.js&lt;/code&gt; . CLI로 전송 된 모든 매개 변수는 구성 파일의 해당 매개 변수에 맵핑됩니다.</target>
        </trans-unit>
        <trans-unit id="d07741f751074c25e3082e8444a9efd3eadf952b" translate="yes" xml:space="preserve">
          <source>For simplicity, this guide stems from the examples in &lt;a href=&quot;getting-started&quot;&gt;Getting Started&lt;/a&gt;. Please make sure you are familiar with the setup there before moving on.</source>
          <target state="translated">간단하게하기 위해이 안내서는 &lt;a href=&quot;getting-started&quot;&gt;시작하기&lt;/a&gt; 의 예제를 기반으로 합니다. 계속 진행하기 전에 설정에 익숙한 지 확인하십시오.</target>
        </trans-unit>
        <trans-unit id="faabcd38a8709eb7fd68e43284fea3704676e52e" translate="yes" xml:space="preserve">
          <source>For some systems, watching many file systems can result in a lot of CPU or memory usage. It is possible to exclude a huge folder like &lt;code&gt;node_modules&lt;/code&gt;:</source>
          <target state="translated">일부 시스템의 경우 많은 파일 시스템을 감시하면 많은 CPU 또는 메모리 사용이 발생할 수 있습니다. &lt;code&gt;node_modules&lt;/code&gt; 와 같은 거대한 폴더를 제외시킬 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="26db0a36f085d1722bb1b99b8c542931e58979f1" translate="yes" xml:space="preserve">
          <source>For the description of hook types, see &lt;a href=&quot;https://github.com/webpack/tapable#hook-types&quot;&gt;the Tapable docs&lt;/a&gt;.</source>
          <target state="translated">후크 유형에 대한 설명은 &lt;a href=&quot;https://github.com/webpack/tapable#hook-types&quot;&gt;Tapable docs를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="3cd71ac5d59d8ab2256d6ae4785eeab9cc228dca" translate="yes" xml:space="preserve">
          <source>For the module system runtime, additional code is emitted to track module &lt;code&gt;parents&lt;/code&gt; and &lt;code&gt;children&lt;/code&gt;. On the management side, the runtime supports two methods: &lt;code&gt;check&lt;/code&gt; and &lt;code&gt;apply&lt;/code&gt;.</source>
          <target state="translated">모듈 시스템 런타임의 경우 모듈 &lt;code&gt;parents&lt;/code&gt; 및 &lt;code&gt;children&lt;/code&gt; 를 추적하기 위해 추가 코드가 생성 됩니다. 관리 측면에서 런타임은 두 가지 방법 ( &lt;code&gt;check&lt;/code&gt; 및 &lt;code&gt;apply&lt;/code&gt; )을 지원합니다 .</target>
        </trans-unit>
        <trans-unit id="41c20a41c1473adb85307800627231b0f0140335" translate="yes" xml:space="preserve">
          <source>For the next guides we won't be using all the different assets we've used in this guide, so let's do some cleanup so we're prepared for the next piece of the guides &lt;a href=&quot;output-management&quot;&gt;Output Management&lt;/a&gt;:</source>
          <target state="translated">다음 가이드에서는이 가이드에서 사용한 모든 다른 자산을 사용하지 않으므로 정리를 수행하여 다음 가이드 &lt;a href=&quot;output-management&quot;&gt;출력 관리에&lt;/a&gt; 대비하십시오 .</target>
        </trans-unit>
        <trans-unit id="317c7e072d68d24707a43d33a6d5f58243ad6e80" translate="yes" xml:space="preserve">
          <source>For this configuration:</source>
          <target state="translated">이 구성의 경우 :</target>
        </trans-unit>
        <trans-unit id="f5515fcfda9c0c050d49bcfaf01676789803dd19" translate="yes" xml:space="preserve">
          <source>For this guide, let's use the &lt;code&gt;inline-source-map&lt;/code&gt; option, which is good for illustrative purposes (though not for production):</source>
          <target state="translated">이 안내서에서는 &lt;code&gt;inline-source-map&lt;/code&gt; 옵션을 사용합니다.이 옵션은 설명 용으로 적합하지만 프로덕션에는 적합하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="12c1241a8c3e3033a62a8ade78fe757c748682e0" translate="yes" xml:space="preserve">
          <source>For those using Grunt, we recommend the &lt;a href=&quot;https://www.npmjs.com/package/grunt-webpack&quot;&gt;&lt;code&gt;grunt-webpack&lt;/code&gt;&lt;/a&gt; package. With &lt;code&gt;grunt-webpack&lt;/code&gt; you can run webpack or &lt;a href=&quot;https://github.com/webpack/webpack-dev-server&quot;&gt;webpack-dev-server&lt;/a&gt; as a task, get access to stats within &lt;a href=&quot;https://gruntjs.com/api/grunt.template&quot;&gt;template tags&lt;/a&gt;, split development and production configurations and more. Start by installing &lt;code&gt;grunt-webpack&lt;/code&gt; as well as &lt;code&gt;webpack&lt;/code&gt; itself if you haven't already:</source>
          <target state="translated">Grunt를 사용하는 사람들은 &lt;a href=&quot;https://www.npmjs.com/package/grunt-webpack&quot;&gt; &lt;code&gt;grunt-webpack&lt;/code&gt; &lt;/a&gt; 패키지를 권장합니다 . &lt;code&gt;grunt-webpack&lt;/code&gt; 을 사용하면 webpack 또는 &lt;a href=&quot;https://github.com/webpack/webpack-dev-server&quot;&gt;webpack-dev-server&lt;/a&gt; 를 작업으로 실행하고, &lt;a href=&quot;https://gruntjs.com/api/grunt.template&quot;&gt;템플릿 태그&lt;/a&gt; 내에서 통계에 액세스하고 , 개발 및 프로덕션 구성을 분할 할 수 있습니다. &lt;code&gt;grunt-webpack&lt;/code&gt; 및 &lt;code&gt;webpack&lt;/code&gt; 자체를 아직 설치하지 않은 경우 설치하여 시작하십시오 .</target>
        </trans-unit>
        <trans-unit id="2a4510e3deee83c26f734c87058488af0f5e1e48" translate="yes" xml:space="preserve">
          <source>For urls that start with a &lt;code&gt;/&lt;/code&gt;, the default behavior is to not translate them. If a &lt;code&gt;root&lt;/code&gt; query parameter is set, however, it will be prepended to the url and then translated.</source>
          <target state="translated">&lt;code&gt;/&lt;/code&gt; 로 시작하는 URL의 경우 기본 동작은 해당 URL을 번역하지 않는 것입니다. 그러나 &lt;code&gt;root&lt;/code&gt; 쿼리 매개 변수가 설정되면 URL 앞에 추가 된 다음 번역됩니다.</target>
        </trans-unit>
        <trans-unit id="c33b8e0597956d13bd872c18b5e4812330a1853e" translate="yes" xml:space="preserve">
          <source>For webpack-command:</source>
          <target state="translated">웹팩 명령의 경우 :</target>
        </trans-unit>
        <trans-unit id="511109206e9408aadf4ee8e44278db56b180d7d2" translate="yes" xml:space="preserve">
          <source>For webpack-dev-server, this property needs to be in the &lt;code&gt;devServer&lt;/code&gt; object.</source>
          <target state="translated">webpack-dev-server의 경우이 속성은 &lt;code&gt;devServer&lt;/code&gt; 객체 에 있어야 합니다.</target>
        </trans-unit>
        <trans-unit id="aa93931191cd7d8e17d63d38c31201085f2e92fc" translate="yes" xml:space="preserve">
          <source>For webpack-serve:</source>
          <target state="translated">webpack-serve의 경우 :</target>
        </trans-unit>
        <trans-unit id="9273e4b7bcfa18d9f7463f261345960ebcfc63f8" translate="yes" xml:space="preserve">
          <source>For widespread use of the library, we would like it to be compatible in different environments, i.e. CommonJS, AMD, Node.js and as a global variable. To make your library available for consumption, add the &lt;code&gt;library&lt;/code&gt; property inside &lt;code&gt;output&lt;/code&gt;:</source>
          <target state="translated">라이브러리를 광범위하게 사용하기 위해 CommonJS, AMD, Node.js 및 전역 변수와 같은 다른 환경에서 호환되기를 원합니다. 라이브러리를 사용할 수있게하려면 &lt;code&gt;output&lt;/code&gt; 내에 &lt;code&gt;library&lt;/code&gt; 속성을 추가하십시오 .</target>
        </trans-unit>
        <trans-unit id="af39dd055c3ef8226fbe929d048cafb094dc8a51" translate="yes" xml:space="preserve">
          <source>Frameworks</source>
          <target state="translated">Frameworks</target>
        </trans-unit>
        <trans-unit id="b4c9c1af5a6f495b0e8cc1143440d8c923e8122d" translate="yes" xml:space="preserve">
          <source>From opening a bug report to creating a pull request: &lt;strong&gt;every contribution is appreciated and welcome&lt;/strong&gt;. If you're planing to implement a new feature or change the api please create an issue first. This way we can ensure that your precious work is not in vain.</source>
          <target state="translated">버그 보고서 열기에서 풀 요청 만들기까지 : &lt;strong&gt;모든 기여에 감사드립니다&lt;/strong&gt; . 새로운 기능을 구현하거나 API를 변경하려는 경우 먼저 문제를 만드십시오. 이런 식으로 우리는 당신의 소중한 일이 헛되지 않도록 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2aca14fe504f81ebc3842b7902159223ee607b34" translate="yes" xml:space="preserve">
          <source>Fully dynamic statements, such as &lt;code&gt;import(foo)&lt;/code&gt;, &lt;strong&gt;will fail&lt;/strong&gt; because webpack requires at least some file location information. This is because &lt;code&gt;foo&lt;/code&gt; could potentially be any path to any file in your system or project. The &lt;code&gt;import()&lt;/code&gt; must contain at least some information about where the module is located, so bundling can be limited to a specific directory or set of files.</source>
          <target state="translated">완전 같은 동적 명령문, &lt;code&gt;import(foo)&lt;/code&gt; , &lt;strong&gt;실패&lt;/strong&gt; 웹팩은 적어도 일부 파일 위치 정보를 필요로하기 때문이다. &lt;code&gt;foo&lt;/code&gt; 는 잠재적으로 시스템이나 프로젝트의 파일에 대한 경로 일 수 있기 때문 입니다. &lt;code&gt;import()&lt;/code&gt; 그래서 특정 디렉토리 나 파일의 집합을 제한 할 수 있습니다 번들, 모듈의 위치에 대한 적어도 일부 정보를 포함해야합니다.</target>
        </trans-unit>
        <trans-unit id="6bc0a35d4795d9b8d4c3a55a337eae2707309b45" translate="yes" xml:space="preserve">
          <source>Function or Promise that modifies file contents before copying</source>
          <target state="translated">복사하기 전에 파일 내용을 수정하는 기능 또는 약속</target>
        </trans-unit>
        <trans-unit id="8c3d3650248374e22dae36ea24fed3e7f2834e96" translate="yes" xml:space="preserve">
          <source>Function-Config Parameters</source>
          <target state="translated">기능 구성 매개 변수</target>
        </trans-unit>
        <trans-unit id="b4f7440917f92627acb31305e33864f678b72a2c" translate="yes" xml:space="preserve">
          <source>FunctionModulePlugin</source>
          <target state="translated">FunctionModulePlugin</target>
        </trans-unit>
        <trans-unit id="7e04cb07bda5c67ca189c527f3456f66f176f5a3" translate="yes" xml:space="preserve">
          <source>Further Optimizations</source>
          <target state="translated">추가 최적화</target>
        </trans-unit>
        <trans-unit id="bafd4b54282745a2bed1442852b73f4b3189a77a" translate="yes" xml:space="preserve">
          <source>Further Reading</source>
          <target state="translated">추가 자료</target>
        </trans-unit>
        <trans-unit id="779353a95ed3971a5e95d99c84766a154bcb40ce" translate="yes" xml:space="preserve">
          <source>Further expansion for other popular target values</source>
          <target state="translated">다른 인기있는 목표 값에 대한 추가 확장</target>
        </trans-unit>
        <trans-unit id="9239ee2cda84eca4c3440e2a7b50148af67da3d4" translate="yes" xml:space="preserve">
          <source>General</source>
          <target state="translated">General</target>
        </trans-unit>
        <trans-unit id="d9c16407b5f55c64ebbcb4529ce63733b1170477" translate="yes" xml:space="preserve">
          <source>General purpose hook that is called when parsing statements in a code fragment.</source>
          <target state="translated">코드 단편에서 명령문을 구문 분석 할 때 호출되는 범용 후크.</target>
        </trans-unit>
        <trans-unit id="267edaccd9dfd34ee233d2040cca1705a18a8234" translate="yes" xml:space="preserve">
          <source>Generate Chrome profile file which includes timings of plugins execution. Outputs &lt;code&gt;events.json&lt;/code&gt; file by default. It is possible to provide custom file path using &lt;code&gt;outputPath&lt;/code&gt; option.</source>
          <target state="translated">플러그인 실행 타이밍이 포함 된 Chrome 프로필 파일을 생성합니다. 기본적으로 &lt;code&gt;events.json&lt;/code&gt; 파일을 출력 합니다. &lt;code&gt;outputPath&lt;/code&gt; 옵션을 사용하여 사용자 정의 파일 경로를 제공 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b25535dfa281f8ff604ac5874d3d369127253b68" translate="yes" xml:space="preserve">
          <source>Generate an extra chunk, which contains common modules shared between entry points.</source>
          <target state="translated">진입 점간에 공유되는 공통 모듈이 포함 된 추가 청크를 생성합니다.</target>
        </trans-unit>
        <trans-unit id="2e5937364709991272132865ae71abeededd4207" translate="yes" xml:space="preserve">
          <source>Generate compact code</source>
          <target state="translated">컴팩트 코드 생성</target>
        </trans-unit>
        <trans-unit id="5b3d23beca0414fc368f0d72c3498bb9b340ac79" translate="yes" xml:space="preserve">
          <source>Generates a &lt;code&gt;require&lt;/code&gt; function that is not parsed by webpack. Can be used to do cool stuff with a global require function if available.</source>
          <target state="translated">웹팩에서 구문 분석하지 않은 &lt;code&gt;require&lt;/code&gt; 기능을 생성합니다 . 사용 가능한 경우 전역 필수 기능으로 멋진 작업을 수행하는 데 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="bd2cb051773a703fdbabd8c09f218722870e6d61" translate="yes" xml:space="preserve">
          <source>Get Started</source>
          <target state="translated">시작하다</target>
        </trans-unit>
        <trans-unit id="40c0a9e8fe5bb818000a38e6034f00a4e23928c2" translate="yes" xml:space="preserve">
          <source>Get access to the abstract syntax tree (AST) of a code fragment</source>
          <target state="translated">코드 조각의 추상 구문 트리 (AST)에 액세스</target>
        </trans-unit>
        <trans-unit id="010b85ad56b34c34c7c2a3b2436c740e30428ed5" translate="yes" xml:space="preserve">
          <source>Getting Started</source>
          <target state="translated">시작하기</target>
        </trans-unit>
        <trans-unit id="84b2ebe1fa32b1400265ee97855d671b85abdf8c" translate="yes" xml:space="preserve">
          <source>Given Babel's &lt;code&gt;PartialConfig&lt;/code&gt; object, return the &lt;code&gt;options&lt;/code&gt; object that should be passed to &lt;code&gt;babel.transform&lt;/code&gt;.</source>
          <target state="translated">바벨의 주어 &lt;code&gt;PartialConfig&lt;/code&gt; 의 객체 반환 &lt;code&gt;options&lt;/code&gt; 그에게 전달되어야 객체 &lt;code&gt;babel.transform&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="064d9270c9c0e2d5b1900fd2192142765c68e65b" translate="yes" xml:space="preserve">
          <source>Given Babel's result object, allow loaders to make additional tweaks to it.</source>
          <target state="translated">Babel의 결과 객체가 주어지면 로더가 추가로 조정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ff939cc0ef3ffab12f0cc0e0a59d5dee565dd204" translate="yes" xml:space="preserve">
          <source>Given an asset is created that is over 250kb:</source>
          <target state="translated">250kb가 넘는 자산이 생성 된 경우 :</target>
        </trans-unit>
        <trans-unit id="52313d5601981377b9e94081eb626a55c4145d49" translate="yes" xml:space="preserve">
          <source>Given it's not particularly fun to run a local copy of webpack from the CLI, we can set up a little shortcut. Let's adjust our &lt;em&gt;package.json&lt;/em&gt; by adding an &lt;a href=&quot;https://docs.npmjs.com/misc/scripts&quot;&gt;npm script&lt;/a&gt;:</source>
          <target state="translated">CLI에서 웹팩의 로컬 사본을 실행하는 것이 특히 재미 있지 않다면 약간의 단축키를 설정할 수 있습니다. &lt;a href=&quot;https://docs.npmjs.com/misc/scripts&quot;&gt;npm 스크립트&lt;/a&gt; 를 추가하여 &lt;em&gt;package.json&lt;/em&gt; 을 조정 해 봅시다 :</target>
        </trans-unit>
        <trans-unit id="ff8a077fda7fb23c426d98f1e43a017fd9146a07" translate="yes" xml:space="preserve">
          <source>Given the following example this require call is used: In &lt;code&gt;/abc/file.js&lt;/code&gt;:</source>
          <target state="translated">다음 예제에서 호출이 필요합니다. In &lt;code&gt;/abc/file.js&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="de72038d4b5ad14eb52c0ecb643c21057d3e0510" translate="yes" xml:space="preserve">
          <source>Given the loader's options, split custom options out of &lt;code&gt;babel-loader&lt;/code&gt;'s options.</source>
          <target state="translated">로더 옵션이 주어지면 &lt;code&gt;babel-loader&lt;/code&gt; 옵션에서 사용자 정의 옵션을 분리하십시오 .</target>
        </trans-unit>
        <trans-unit id="3af4a8e13463e1165de4a6589cdd9fc07d708cd4" translate="yes" xml:space="preserve">
          <source>Given you have this file &lt;code&gt;example.js&lt;/code&gt;</source>
          <target state="translated">이 파일이 &lt;code&gt;example.js&lt;/code&gt; 인 경우</target>
        </trans-unit>
        <trans-unit id="501c99a124322f7b0cea416e47fca960a9e40836" translate="yes" xml:space="preserve">
          <source>Global Assets</source>
          <target state="translated">글로벌 자산</target>
        </trans-unit>
        <trans-unit id="90a9850b6559af58556292d4779e0b6de4467981" translate="yes" xml:space="preserve">
          <source>Global Exports</source>
          <target state="translated">글로벌 수출</target>
        </trans-unit>
        <trans-unit id="2a102f27f850350772f2e44ae41ae0c25df0de90" translate="yes" xml:space="preserve">
          <source>Global Installation</source>
          <target state="translated">글로벌 설치</target>
        </trans-unit>
        <trans-unit id="51c71fb227428a199ad880c7f73f4dc02ad34ae6" translate="yes" xml:space="preserve">
          <source>Global variable when included through &lt;code&gt;script&lt;/code&gt; tag.</source>
          <target state="translated">&lt;code&gt;script&lt;/code&gt; 태그를 통해 포함 된 글로벌 변수 .</target>
        </trans-unit>
        <trans-unit id="95a8da0a3d2b63a2e6803b00a56d1544f59bbb9a" translate="yes" xml:space="preserve">
          <source>Globs accept &lt;a href=&quot;https://github.com/isaacs/minimatch&quot;&gt;minimatch options&lt;/a&gt;</source>
          <target state="translated">글로브는 &lt;a href=&quot;https://github.com/isaacs/minimatch&quot;&gt;미니 매치 옵션을&lt;/a&gt; 허용합니다</target>
        </trans-unit>
        <trans-unit id="bb329abd042a15a2d2a78ee9c7d36d13496c704c" translate="yes" xml:space="preserve">
          <source>Globs to ignore for this pattern</source>
          <target state="translated">이 패턴에 대해 무시할 글로브</target>
        </trans-unit>
        <trans-unit id="b99f921a818c45aa1b8368166af16bfc30e29cb1" translate="yes" xml:space="preserve">
          <source>Go to Chrome, open DevTools, and go to the &lt;code&gt;Performance&lt;/code&gt; tab (formerly &lt;code&gt;Timeline&lt;/code&gt;).</source>
          <target state="translated">Chrome으로 이동하여 DevTools를 열고 &lt;code&gt;Performance&lt;/code&gt; 탭 (이전의 &lt;code&gt;Timeline&lt;/code&gt; )으로 이동하십시오.</target>
        </trans-unit>
        <trans-unit id="0954c7435dbfd382732840badd4d1afd6a8cfbdf" translate="yes" xml:space="preserve">
          <source>Good loaders for requiring your assets are the &lt;a href=&quot;file-loader&quot;&gt;file-loader&lt;/a&gt; and the &lt;a href=&quot;url-loader&quot;&gt;url-loader&lt;/a&gt; which you should specify in your config (see &lt;a href=&quot;https://github.com/webpack-contrib/css-loader#assets&quot;&gt;below&lt;/a&gt;).</source>
          <target state="translated">자산을 요구하기에 적합한 &lt;a href=&quot;url-loader&quot;&gt;로더&lt;/a&gt; 는 설정에서 지정해야하는 &lt;a href=&quot;file-loader&quot;&gt;파일 로더&lt;/a&gt; 및 URL 로더 입니다 ( &lt;a href=&quot;https://github.com/webpack-contrib/css-loader#assets&quot;&gt;아래 참조&lt;/a&gt; ).</target>
        </trans-unit>
        <trans-unit id="000eb225364983805facb15a740de1dfd422fd39" translate="yes" xml:space="preserve">
          <source>Gotchas</source>
          <target state="translated">Gotchas</target>
        </trans-unit>
        <trans-unit id="c6981ea7b41b4e13bc33c49df856e07c4ced2efc" translate="yes" xml:space="preserve">
          <source>Granular Shimming</source>
          <target state="translated">세분화 된 쉬밍</target>
        </trans-unit>
        <trans-unit id="c06ca0601da1369de3d0247e6e4f8b7bbe8e4bfd" translate="yes" xml:space="preserve">
          <source>Grunt</source>
          <target state="translated">Grunt</target>
        </trans-unit>
        <trans-unit id="929a28d261428029e61c0f81c6161fd71ba0b2fe" translate="yes" xml:space="preserve">
          <source>Guides</source>
          <target state="translated">Guides</target>
        </trans-unit>
        <trans-unit id="584874506ed78c16764b272c293130eb3c227f02" translate="yes" xml:space="preserve">
          <source>Guides - Hot Module Replacement</source>
          <target state="translated">가이드-핫 모듈 교체</target>
        </trans-unit>
        <trans-unit id="5a6238801e2733bcdc7249e97a255df97e530fc4" translate="yes" xml:space="preserve">
          <source>Gulp</source>
          <target state="translated">Gulp</target>
        </trans-unit>
        <trans-unit id="162cda8d5696ebeaa3195028438031d0b7b1d8ac" translate="yes" xml:space="preserve">
          <source>Gulp is also a fairly straightforward integration with the help of the &lt;a href=&quot;https://github.com/shama/webpack-stream&quot;&gt;&lt;code&gt;webpack-stream&lt;/code&gt;&lt;/a&gt; package (a.k.a. &lt;code&gt;gulp-webpack&lt;/code&gt;). In this case, it is unnecessary to install &lt;code&gt;webpack&lt;/code&gt; separately as it is a direct dependency of &lt;code&gt;webpack-stream&lt;/code&gt;:</source>
          <target state="translated">Gulp는 또한 &lt;a href=&quot;https://github.com/shama/webpack-stream&quot;&gt; &lt;code&gt;webpack-stream&lt;/code&gt; &lt;/a&gt; 패키지 (일명 &lt;code&gt;gulp-webpack&lt;/code&gt; )를 사용 하여 매우 간단하게 통합됩니다 . 이 경우 &lt;code&gt;webpack-stream&lt;/code&gt; 의 직접적인 의존성이므로 &lt;code&gt;webpack&lt;/code&gt; 을 별도로 설치할 필요가 없습니다 .</target>
        </trans-unit>
        <trans-unit id="040f189f5df653616cc5f84c5b2d4f044112abdb" translate="yes" xml:space="preserve">
          <source>HMR Accepted</source>
          <target state="translated">받아 들여지는 HMR</target>
        </trans-unit>
        <trans-unit id="1018a3c5183c72da47fa44fb8982525184c94afd" translate="yes" xml:space="preserve">
          <source>HMR can be used in development as a LiveReload replacement. &lt;a href=&quot;../configuration/dev-server&quot;&gt;webpack-dev-server&lt;/a&gt; supports a &lt;code&gt;hot&lt;/code&gt; mode in which it tries to update with HMR before trying to reload the whole page. See the &lt;a href=&quot;../guides/hot-module-replacement&quot;&gt;Hot Module Replacement guide&lt;/a&gt; for details.</source>
          <target state="translated">HMR은 개발 과정에서 LiveReload 대체품으로 사용될 수 있습니다. &lt;a href=&quot;../configuration/dev-server&quot;&gt;webpack-dev-server&lt;/a&gt; 는 전체 페이지를 다시로드하기 전에 HMR로 업데이트를 시도 하는 &lt;code&gt;hot&lt;/code&gt; 모드를 지원합니다 . 자세한 내용은 &lt;a href=&quot;../guides/hot-module-replacement&quot;&gt;핫 모듈 교체 안내서&lt;/a&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="5d12f13c37448b6d29dd08187afe1a7f58393cf8" translate="yes" xml:space="preserve">
          <source>HMR is an opt-in feature that only affects modules containing HMR code. One example would be patching styling through the &lt;a href=&quot;https://github.com/webpack-contrib/style-loader&quot;&gt;&lt;code&gt;style-loader&lt;/code&gt;&lt;/a&gt;. In order for patching to work, the &lt;code&gt;style-loader&lt;/code&gt; implements the HMR interface; when it receives an update through HMR, it replaces the old styles with the new ones.</source>
          <target state="translated">HMR은 HMR 코드가 포함 된 모듈에만 영향을주는 옵트 인 기능입니다. 한 가지 예는 &lt;a href=&quot;https://github.com/webpack-contrib/style-loader&quot;&gt; &lt;code&gt;style-loader&lt;/code&gt; 를&lt;/a&gt; 통해 스타일을 패치하는 것 입니다 . 패치 적용을 위해 &lt;code&gt;style-loader&lt;/code&gt; 는 HMR 인터페이스를 구현합니다. HMR을 통해 업데이트를 받으면 이전 스타일을 새 스타일로 바꿉니다.</target>
        </trans-unit>
        <trans-unit id="cfe9b710019e4ee945740e00f1aeef2a5f017b29" translate="yes" xml:space="preserve">
          <source>HMR should &lt;strong&gt;never&lt;/strong&gt; be used in production.</source>
          <target state="translated">생산에 HMR을 사용해서는 &lt;strong&gt;안됩니다&lt;/strong&gt; .</target>
        </trans-unit>
        <trans-unit id="19e74394701c30e0fa9cd48a46d826fc558a6fd0" translate="yes" xml:space="preserve">
          <source>HMR support</source>
          <target state="translated">HMR 지원</target>
        </trans-unit>
        <trans-unit id="d63d0656280072a9a4d8ba809c85e7d8c4e8bc54" translate="yes" xml:space="preserve">
          <source>HMR with Stylesheets</source>
          <target state="translated">스타일 시트가있는 HMR</target>
        </trans-unit>
        <trans-unit id="74f2780df4ccf690821b5194f099735ba6bd6e76" translate="yes" xml:space="preserve">
          <source>Hacky access to the Compilation object of webpack.</source>
          <target state="translated">webpack의 Compilation 객체에 대한 해키 액세스.</target>
        </trans-unit>
        <trans-unit id="9683d34ca67b262aac8b1514f57d207315c5e8bf" translate="yes" xml:space="preserve">
          <source>Hacky access to the Compiler object of webpack.</source>
          <target state="translated">웹팩의 컴파일러 객체에 대한 해킹 액세스.</target>
        </trans-unit>
        <trans-unit id="cadc8997538f9ab2ffa07602fc1f67d5bb167917" translate="yes" xml:space="preserve">
          <source>Hacky access to the Module object being loaded.</source>
          <target state="translated">로드중인 모듈 개체에 대한 해킹 액세스</target>
        </trans-unit>
        <trans-unit id="dc238823d206c000a5a4e27a692803d92c2fdc10" translate="yes" xml:space="preserve">
          <source>Hash is required to enable HMR</source>
          <target state="translated">HMR을 활성화하려면 해시가 필요합니다</target>
        </trans-unit>
        <trans-unit id="2bb6cff94d1802bdd30f75ecaccbc14c2cd5a0a6" translate="yes" xml:space="preserve">
          <source>HashedModuleIdsPlugin</source>
          <target state="translated">HashedModuleIdsPlugin</target>
        </trans-unit>
        <trans-unit id="5551ebd48f7eaa66477f72c449e4b2ccfc0f9609" translate="yes" xml:space="preserve">
          <source>Hashes</source>
          <target state="translated">Hashes</target>
        </trans-unit>
        <trans-unit id="c7818998b4699953cff73d5d32aace74763ad2ee" translate="yes" xml:space="preserve">
          <source>Help Wanted: This page is still a work in progress. If you are familiar with any of the options for which the description or examples are incomplete, please create an issue and submit a PR at the &lt;a href=&quot;https://github.com/webpack/webpack.js.org&quot;&gt;docs repo&lt;/a&gt;!</source>
          <target state="translated">구함 도움말 :이 페이지는 아직 진행중인 작업입니다. 설명이나 예제가 불완전한 옵션에 익숙한 경우 문제를 작성하고 &lt;a href=&quot;https://github.com/webpack/webpack.js.org&quot;&gt;문서 저장소&lt;/a&gt; 에서 PR을 제출하십시오 !</target>
        </trans-unit>
        <trans-unit id="2b71253f8b512249fe3907dcd007dccf2d2ad058" translate="yes" xml:space="preserve">
          <source>Here are some other useful plugins and loaders provided by the community for splitting code:</source>
          <target state="translated">다음은 커뮤니티에서 코드 분할을 위해 제공하는 다른 유용한 플러그인 및 로더입니다.</target>
        </trans-unit>
        <trans-unit id="9e5dc64afbacaa12ee3a2a30bd098f6bd1c4e825" translate="yes" xml:space="preserve">
          <source>Here are the available options with their &lt;a href=&quot;https://github.com/webpack/webpack/blob/master/lib/WebpackOptionsDefaulter.js&quot;&gt;defaults&lt;/a&gt;:</source>
          <target state="translated">&lt;a href=&quot;https://github.com/webpack/webpack/blob/master/lib/WebpackOptionsDefaulter.js&quot;&gt;기본적으로&lt;/a&gt; 사용 가능한 옵션은 다음과 같습니다 .</target>
        </trans-unit>
        <trans-unit id="08b8f507d07f88f0fb9260497dafb27c0317c7aa" translate="yes" xml:space="preserve">
          <source>Here is an example to have both HMR in &lt;code&gt;development&lt;/code&gt; and your styles extracted in a file for &lt;code&gt;production&lt;/code&gt; builds.</source>
          <target state="translated">다음은 &lt;code&gt;development&lt;/code&gt; HMR 과 &lt;code&gt;production&lt;/code&gt; 빌드 용 파일에서 스타일을 추출 하는 예제 입니다.</target>
        </trans-unit>
        <trans-unit id="a2834dc75921a3465397c3c81181af70d68f53da" translate="yes" xml:space="preserve">
          <source>Here is no need to change it.</source>
          <target state="translated">변경할 필요가 없습니다.</target>
        </trans-unit>
        <trans-unit id="bbb9107ab5930b1c7f25ec41bad41f1f5ec937db" translate="yes" xml:space="preserve">
          <source>Here things get a bit more technical... if you're not interested in the internals, feel free to jump to the &lt;a href=&quot;../api/hot-module-replacement&quot;&gt;HMR API page&lt;/a&gt; or &lt;a href=&quot;../guides/hot-module-replacement&quot;&gt;HMR guide&lt;/a&gt;.</source>
          <target state="translated">내부 기술에 관심이 없다면 &lt;a href=&quot;../api/hot-module-replacement&quot;&gt;HMR API 페이지&lt;/a&gt; 또는 &lt;a href=&quot;../guides/hot-module-replacement&quot;&gt;HMR 안내서로&lt;/a&gt; 자유롭게 이동 하십시오 .</target>
        </trans-unit>
        <trans-unit id="7f1a28b3e5212fb6ea1e10afb5efc421f0c92bf1" translate="yes" xml:space="preserve">
          <source>Here we declare a new module for SVGs by specifying any import that ends in &lt;code&gt;.svg&lt;/code&gt; and defining the module's &lt;code&gt;content&lt;/code&gt; as &lt;code&gt;any&lt;/code&gt;. We could be more explicit about it being a url by defining the type as string. The same concept applies to other assets including CSS, SCSS, JSON and more.</source>
          <target state="translated">여기에서는 &lt;code&gt;.svg&lt;/code&gt; 로 끝나는 가져 오기를 지정 하고 모듈의 &lt;code&gt;content&lt;/code&gt; 을 &lt;code&gt;any&lt;/code&gt; 로 정의하여 SVG에 대한 새 모듈을 선언 합니다 . 유형을 문자열로 정의하여 URL임을 더 명확하게 알 수 있습니다. CSS, SCSS, JSON 등을 포함한 다른 자산에도 동일한 개념이 적용됩니다.</target>
        </trans-unit>
        <trans-unit id="689aa12a2c0bc32ff32aad2b0904efce3ab28b08" translate="yes" xml:space="preserve">
          <source>Here you can access the Express app object and add your own custom middleware to it. For example, to define custom handlers for some paths:</source>
          <target state="translated">여기에서 Express 앱 개체에 액세스하고 자신 만의 사용자 지정 미들웨어를 추가 할 수 있습니다. 예를 들어, 일부 경로에 대한 사용자 정의 핸들러를 정의하려면 다음을 수행하십시오.</target>
        </trans-unit>
        <trans-unit id="ce0b386112d4134d052dd168079add2f88e6013d" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s an [example] (&lt;a href=&quot;https://github.com/webpack/analyse/blob/master/app/pages/upload/example.json&quot;&gt;https://github.com/webpack/analyse/blob/master/app/pages/upload/example.json&lt;/a&gt;) of this function&amp;rsquo;s output.</source>
          <target state="translated">이 함수의 출력에 대한 [example] ( &lt;a href=&quot;https://github.com/webpack/analyse/blob/master/app/pages/upload/example.json&quot;&gt;https://github.com/webpack/analyse/blob/master/app/pages/upload/example.json&lt;/a&gt; )이 있습니다.</target>
        </trans-unit>
        <trans-unit id="53d9a8d812c90d1bf3d1e751fbcb4e044eed885d" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s an example of &lt;code&gt;stats.toString()&lt;/code&gt; usage:</source>
          <target state="translated">&lt;code&gt;stats.toString()&lt;/code&gt; 사용법 의 예는 다음과 같습니다 .</target>
        </trans-unit>
        <trans-unit id="c33d9dd45d505b6fa99ddb524e207925c8cb8208" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s an example that does all that:</source>
          <target state="translated">다음은 이러한 모든 작업을 수행하는 예입니다.</target>
        </trans-unit>
        <trans-unit id="f1468b5723560711f6a9fa401499b579863d4941" translate="yes" xml:space="preserve">
          <source>Here's a more complicated example of using a CDN and hashes for assets:</source>
          <target state="translated">자산에 CDN 및 해시를 사용하는보다 복잡한 예는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="68f54ed9ea375008e572f1c21ea20c9c86ce81fb" translate="yes" xml:space="preserve">
          <source>Here's a small example to restrict module usage:</source>
          <target state="translated">다음은 모듈 사용을 제한하는 간단한 예입니다.</target>
        </trans-unit>
        <trans-unit id="6fd5f6d46f40290b4a065612e3e7dc847f89a633" translate="yes" xml:space="preserve">
          <source>Here's an example of how this plugin might be used:</source>
          <target state="translated">이 플러그인을 사용하는 방법의 예는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="2f0661f064322e5bbcafdd8bf7f3fbce37cc9de7" translate="yes" xml:space="preserve">
          <source>Here's an example plugin from &lt;a href=&quot;https://github.com/boopathi&quot;&gt;@boopathi&lt;/a&gt; that outputs exactly what went into each chunk.</source>
          <target state="translated">다음 은 각 덩어리에 들어간 것을 정확하게 출력하는 &lt;a href=&quot;https://github.com/boopathi&quot;&gt;@boopathi의&lt;/a&gt; 플러그인 예제 입니다.</target>
        </trans-unit>
        <trans-unit id="7b49b26d8b3a7d28cded264e41a7228c10ffe73c" translate="yes" xml:space="preserve">
          <source>Here's an example that simply adds a banner to each chunk.</source>
          <target state="translated">다음은 각 청크에 단순히 배너를 추가하는 예입니다.</target>
        </trans-unit>
        <trans-unit id="a34da435080080952de44617951db93f8b8878fc" translate="yes" xml:space="preserve">
          <source>Hides info about modules</source>
          <target state="translated">모듈에 대한 정보를 숨 깁니다</target>
        </trans-unit>
        <trans-unit id="07098e74daabfa0b18217bfa2113a3f52f160192" translate="yes" xml:space="preserve">
          <source>Hook into the compiler before a new compilation is created.</source>
          <target state="translated">새 컴파일을 작성하기 전에 컴파일러에 연결하십시오.</target>
        </trans-unit>
        <trans-unit id="ca5b6d1176c2c7b471cc49cd14ff540b84005c96" translate="yes" xml:space="preserve">
          <source>Hook into the compiler before it begins reading records.</source>
          <target state="translated">레코드 읽기를 시작하기 전에 컴파일러에 연결하십시오.</target>
        </trans-unit>
        <trans-unit id="a2e1f8d8e1cd92fef4f507b2cc3733e6a624094f" translate="yes" xml:space="preserve">
          <source>Hook into the compiler to extract progress information. The &lt;code&gt;handler&lt;/code&gt; must have the signature &lt;code&gt;function(percentage, message)&lt;/code&gt;. Percentage is called with a value between 0 and 1, where 0 indicates the start and 1 the end.</source>
          <target state="translated">컴파일러에 연결하여 진행 정보를 추출하십시오. &lt;code&gt;handler&lt;/code&gt; 서명이 있어야합니다 &lt;code&gt;function(percentage, message)&lt;/code&gt; . 백분율은 0과 1 사이의 값으로 호출되며, 0은 시작을 나타내고 1은 끝을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="4bd8f3f03a576b2088bd73a2339d07fca1de805d" translate="yes" xml:space="preserve">
          <source>Hooks</source>
          <target state="translated">Hooks</target>
        </trans-unit>
        <trans-unit id="30f903d530f16bb49ddfdd004a066d5e761d940d" translate="yes" xml:space="preserve">
          <source>Host Source Maps Externally</source>
          <target state="translated">외부에서 호스트 소스 맵</target>
        </trans-unit>
        <trans-unit id="b195bbcb9d9ea75b33b88f6d3b7db65046872de6" translate="yes" xml:space="preserve">
          <source>Hot Module Replacement</source>
          <target state="translated">핫 모듈 교체</target>
        </trans-unit>
        <trans-unit id="92fd1c3e36496023416944609af68089022b4821" translate="yes" xml:space="preserve">
          <source>Hot Module Replacement (HMR) exchanges, adds, or removes &lt;a href=&quot;modules&quot;&gt;modules&lt;/a&gt; while an application is running, without a full reload. This can significantly speed up development in a few ways:</source>
          <target state="translated">HMR (핫 모듈 교체) 은 응용 프로그램이 실행되는 동안 전체 재로드없이 &lt;a href=&quot;modules&quot;&gt;모듈&lt;/a&gt; 을 교환, 추가 또는 제거 합니다 . 몇 가지 방법으로 개발 속도를 크게 높일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="faaedbcba12dd4a48cc801cf852346d66b60396f" translate="yes" xml:space="preserve">
          <source>Hot Module Replacement (or HMR) is one of the most useful features offered by webpack. It allows all kinds of modules to be updated at runtime without the need for a full refresh. This page focuses on &lt;strong&gt;implementation&lt;/strong&gt; while the &lt;a href=&quot;../concepts/hot-module-replacement&quot;&gt;concepts page&lt;/a&gt; gives more details on how it works and why it's useful.</source>
          <target state="translated">HMR (핫 모듈 교체)은 웹팩에서 제공하는 가장 유용한 기능 중 하나입니다. 모든 종류의 모듈을 완전히 새로 고칠 필요없이 런타임에 업데이트 할 수 있습니다. 이 페이지는 &lt;strong&gt;구현에&lt;/strong&gt; 중점을 둔 반면 &lt;a href=&quot;../concepts/hot-module-replacement&quot;&gt;개념 페이지&lt;/a&gt; 는 작동 방식과 유용한 이유에 대한 자세한 정보를 제공합니다.</target>
        </trans-unit>
        <trans-unit id="4192c11d0e4fe11d9d343eb4d029bac719a67d4d" translate="yes" xml:space="preserve">
          <source>Hot Module Replacement can be tricky. To show this, let's go back to our working example. If you go ahead and click the button on the example page, you will realize the console is printing the old &lt;code&gt;printMe&lt;/code&gt; function.</source>
          <target state="translated">핫 모듈 교체는 까다로울 수 있습니다. 이것을 보여주기 위해 작업 예제로 돌아가 봅시다. 계속해서 예제 페이지에서 버튼을 클릭하면 콘솔이 이전 &lt;code&gt;printMe&lt;/code&gt; 기능을 인쇄하고 있음을 알 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="853c05d1118610188f138d6f79c7f044f6c2797e" translate="yes" xml:space="preserve">
          <source>Hot Module Replacement with CSS is actually fairly straightforward with the help of the &lt;code&gt;style-loader&lt;/code&gt;. This loader uses &lt;code&gt;module.hot.accept&lt;/code&gt; behind the scenes to patch &lt;code&gt;&amp;lt;style&amp;gt;&lt;/code&gt; tags when CSS dependencies are updated.</source>
          <target state="translated">CSS를 사용한 핫 모듈 대체는 실제로 &lt;code&gt;style-loader&lt;/code&gt; 의 도움으로 매우 간단합니다 . 이 로더는 장면 뒤에서 &lt;code&gt;module.hot.accept&lt;/code&gt; 를 사용 하여 CSS 종속성이 업데이트 될 때 &lt;code&gt;&amp;lt;style&amp;gt;&lt;/code&gt; 태그 를 패치 합니다.</target>
        </trans-unit>
        <trans-unit id="a9c074676de58e8848f685cbf8e7911b0eadb590" translate="yes" xml:space="preserve">
          <source>Hot Module Replacement: accept</source>
          <target state="translated">핫 모듈 교체 : 수락</target>
        </trans-unit>
        <trans-unit id="547dfa545af481b7481187d8e5821fff3af70093" translate="yes" xml:space="preserve">
          <source>Hot Module Replacement: addStatusHandler</source>
          <target state="translated">핫 모듈 교체 : addStatusHandler</target>
        </trans-unit>
        <trans-unit id="1c06975c9d2ad6114a31f7680fabda50ec1b34b9" translate="yes" xml:space="preserve">
          <source>Hot Module Replacement: apply</source>
          <target state="translated">핫 모듈 교체 : 적용</target>
        </trans-unit>
        <trans-unit id="c6a5f2b24f45ef9ea292e22f41e12b764a091a14" translate="yes" xml:space="preserve">
          <source>Hot Module Replacement: check</source>
          <target state="translated">핫 모듈 교체 : 점검</target>
        </trans-unit>
        <trans-unit id="99f850a0046d9f71e971677be09918aec51f5ddb" translate="yes" xml:space="preserve">
          <source>Hot Module Replacement: decline</source>
          <target state="translated">핫 모듈 교체 : 거절</target>
        </trans-unit>
        <trans-unit id="8c5da94c72bc8ad7cd7742c8f058f8b4bd40f3d5" translate="yes" xml:space="preserve">
          <source>Hot Module Replacement: removeDisposeHandler</source>
          <target state="translated">핫 모듈 교체 : removeDisposeHandler</target>
        </trans-unit>
        <trans-unit id="d8dffb62bf37ecab81b1a58ddf475fb8c617afa6" translate="yes" xml:space="preserve">
          <source>Hot Module Replacement: removeStatusHandler</source>
          <target state="translated">핫 모듈 교체 : removeStatusHandler</target>
        </trans-unit>
        <trans-unit id="dda5826308cbdd5e9d619798a9aab1c671892e96" translate="yes" xml:space="preserve">
          <source>Hot Module Replacement: status</source>
          <target state="translated">핫 모듈 교체 : 상태</target>
        </trans-unit>
        <trans-unit id="c3a46d04c348ff50766e4c9ce140966a946d0c66" translate="yes" xml:space="preserve">
          <source>Hot loading stylesheets is as easy as importing them into a module:</source>
          <target state="translated">핫로드 스타일 시트는 모듈로 가져 오는 것만 큼 쉽습니다.</target>
        </trans-unit>
        <trans-unit id="42b2548d4460c34296f98d31e1dae1ae67093bda" translate="yes" xml:space="preserve">
          <source>HotModuleReplacementPlugin</source>
          <target state="translated">HotModuleReplacementPlugin</target>
        </trans-unit>
        <trans-unit id="8cecc82d72d68f9151cb0901cfe40eeac15bfca6" translate="yes" xml:space="preserve">
          <source>How It Works</source>
          <target state="translated">작동 원리</target>
        </trans-unit>
        <trans-unit id="8e979f2b774b8ab254c7973b1d82eeaacaeb2ca0" translate="yes" xml:space="preserve">
          <source>How the value of the &lt;code&gt;output.library&lt;/code&gt; is used depends on the value of the &lt;a href=&quot;#output-librarytarget&quot;&gt;&lt;code&gt;output.libraryTarget&lt;/code&gt;&lt;/a&gt; option; please refer to that section for the complete details. Note that the default option for &lt;code&gt;output.libraryTarget&lt;/code&gt; is &lt;code&gt;var&lt;/code&gt;, so if the following configuration option is used:</source>
          <target state="translated">&lt;code&gt;output.library&lt;/code&gt; 의 값 이 사용되는 방법은 &lt;a href=&quot;#output-librarytarget&quot;&gt; &lt;code&gt;output.libraryTarget&lt;/code&gt; &lt;/a&gt; 옵션 의 값에 따라 다릅니다 . 자세한 내용은 해당 섹션을 참조하십시오. &lt;code&gt;output.libraryTarget&lt;/code&gt; 의 기본 옵션 은 &lt;code&gt;var&lt;/code&gt; 이므로 다음 구성 옵션을 사용하는 경우 :</target>
        </trans-unit>
        <trans-unit id="b3443b5ab994d217f78e68297f8c770cdd684b58" translate="yes" xml:space="preserve">
          <source>However, for &lt;code&gt;run&lt;/code&gt; which utilizes the &lt;code&gt;AsyncHook&lt;/code&gt;, we can utilize &lt;code&gt;tapAsync&lt;/code&gt; or &lt;code&gt;tapPromise&lt;/code&gt; (as well as &lt;code&gt;tap&lt;/code&gt;):</source>
          <target state="translated">그러나 대한 &lt;code&gt;run&lt;/code&gt; 활용하는 &lt;code&gt;AsyncHook&lt;/code&gt; 을 우리가 활용할 수 &lt;code&gt;tapAsync&lt;/code&gt; 또는 &lt;code&gt;tapPromise&lt;/code&gt; (뿐만 아니라 &lt;code&gt;tap&lt;/code&gt; ) :</target>
        </trans-unit>
        <trans-unit id="351a3cd14e2756e50007cd947a86f585a361d70d" translate="yes" xml:space="preserve">
          <source>However, if you prefer a custom reporter, pass a function under the &lt;code&gt;reporter&lt;/code&gt; property in &lt;code&gt;jshint&lt;/code&gt; options. (see &lt;em&gt;usage&lt;/em&gt; above)</source>
          <target state="translated">그러나 사용자 정의 리포터를 선호하는 경우 &lt;code&gt;jshint&lt;/code&gt; 옵션 의 &lt;code&gt;reporter&lt;/code&gt; 속성 아래에 함수를 전달하십시오 . ( 위의 &lt;em&gt;사용법&lt;/em&gt; 참조)&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="dd7ef17b1178c0abec16330dd82d81766532031c" translate="yes" xml:space="preserve">
          <source>However, let's say you're locked into your old ways or you have some assets that are shared between multiple components (views, templates, modules, etc.). It's still possible to store these assets in a base directory and even use &lt;a href=&quot;../configuration/resolve#resolve-alias&quot;&gt;aliasing&lt;/a&gt; to make them easier to &lt;code&gt;import&lt;/code&gt;.</source>
          <target state="translated">그러나 이전 방식에 갇혀 있거나 여러 구성 요소 (보기, 템플릿, 모듈 등)간에 공유되는 자산이 있다고 가정 해 봅시다. 이러한 자산을 기본 디렉토리에 저장 하고 더 쉽게 &lt;code&gt;import&lt;/code&gt; 수 있도록 &lt;a href=&quot;../configuration/resolve#resolve-alias&quot;&gt;앨리어싱&lt;/a&gt; 을 사용할 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="066beae0ba9d7f7e51d7d73ac00f926f89b2af25" translate="yes" xml:space="preserve">
          <source>However, parser plugins may accept more than just a boolean. For example, the internal &lt;code&gt;NodeStuffPlugin&lt;/code&gt; can accept an object instead of &lt;code&gt;true&lt;/code&gt; to add additional options for a particular Rule.</source>
          <target state="translated">그러나 파서 플러그인은 부울 이상의 것을 허용 할 수 있습니다. 예를 들어, 내부 &lt;code&gt;NodeStuffPlugin&lt;/code&gt; 은 특정 규칙에 대한 추가 옵션을 추가하기 위해 &lt;code&gt;true&lt;/code&gt; 대신 오브젝트를 승인 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="6461913cec14b37c90ceed285e43899a06a7001c" translate="yes" xml:space="preserve">
          <source>However, until a loader has been updated to depend upon options being passed directly to them, the &lt;code&gt;LoaderOptionsPlugin&lt;/code&gt; exists to bridge the gap. You can configure global loader options with this plugin and all loaders will receive these options.</source>
          <target state="translated">그러나 직접 전달되는 옵션에 따라 로더가 업데이트 될 때까지 &lt;code&gt;LoaderOptionsPlugin&lt;/code&gt; 이 존재하여 간격을 메 웁니다 . 이 플러그인으로 글로벌 로더 옵션을 구성 할 수 있으며 모든 로더는이 옵션을받습니다.</target>
        </trans-unit>
        <trans-unit id="8bba7f88ec88a2d86d5d549a708573ec75734f15" translate="yes" xml:space="preserve">
          <source>However, when creating multiple bundles via more than one entry point, code splitting, or various plugins, you should use one of the following substitutions to give each bundle a unique name...</source>
          <target state="translated">그러나 하나 이상의 진입 점, 코드 분할 또는 다양한 플러그인을 통해 여러 번들을 작성할 때 다음 대체 중 하나를 사용하여 각 번들에 고유 한 이름을 지정해야합니다.</target>
        </trans-unit>
        <trans-unit id="4e41be80be7a17f3962a777aad1652e4f3f01a7f" translate="yes" xml:space="preserve">
          <source>HtmlWebpackPlugin</source>
          <target state="translated">HtmlWebpackPlugin</target>
        </trans-unit>
        <trans-unit id="d7a47bcbdab49f7a3986a07a90e9461cabfd388a" translate="yes" xml:space="preserve">
          <source>I. e. the extract-text-webpack-plugin can handle them.</source>
          <target state="translated">나. extract-text-webpack-plugin이이를 처리 할 수 ​​있습니다.</target>
        </trans-unit>
        <trans-unit id="b0d915587151b1b9036796c951b7b39da2693831" translate="yes" xml:space="preserve">
          <source>I18nWebpackPlugin</source>
          <target state="translated">I18nWebpackPlugin</target>
        </trans-unit>
        <trans-unit id="889dc8dca2ad7f6b9ba93f27d5ebcaf76306510b" translate="yes" xml:space="preserve">
          <source>If &lt;a href=&quot;../concepts/hot-module-replacement&quot;&gt;Hot Module Replacement&lt;/a&gt; has been enabled via the &lt;a href=&quot;../plugins/hot-module-replacement-plugin&quot;&gt;&lt;code&gt;HotModuleReplacementPlugin&lt;/code&gt;&lt;/a&gt;, its interface will be exposed under the &lt;a href=&quot;module-variables#module-hot-webpack-specific-&quot;&gt;&lt;code&gt;module.hot&lt;/code&gt; property&lt;/a&gt;. Typically, users will check to see if the interface is accessible, then begin working with it. As an example, here's how you might &lt;code&gt;accept&lt;/code&gt; an updated module:</source>
          <target state="translated">경우 &lt;a href=&quot;../concepts/hot-module-replacement&quot;&gt;핫 모듈 교체가&lt;/a&gt; 를 통해 활성화 된 &lt;a href=&quot;../plugins/hot-module-replacement-plugin&quot;&gt; &lt;code&gt;HotModuleReplacementPlugin&lt;/code&gt; &lt;/a&gt; , 그 인터페이스는 아래에 노출되는 &lt;a href=&quot;module-variables#module-hot-webpack-specific-&quot;&gt; &lt;code&gt;module.hot&lt;/code&gt; 의 특성&lt;/a&gt; . 일반적으로 사용자는 인터페이스에 액세스 할 수 있는지 확인한 후 작업을 시작합니다. 예를 들어, 업데이트 된 모듈을 &lt;code&gt;accept&lt;/code&gt; 하는 방법은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="34122748e05e97c8f36085544c7b19142aa9c343" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;cache: true&lt;/code&gt; is used, the cache file is written to the &lt;code&gt;./node_modules/.cache&lt;/code&gt; directory. This is the recommended usage.</source>
          <target state="translated">경우 &lt;code&gt;cache: true&lt;/code&gt; 사용되는 캐시 파일이 기록됩니다 &lt;code&gt;./node_modules/.cache&lt;/code&gt; 의 디렉토리. 권장되는 사용법입니다.</target>
        </trans-unit>
        <trans-unit id="4eeb510364afeab21d56daf7ad1b3b02b38218a7" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;dependencies&lt;/code&gt; are provided, &lt;code&gt;factoryMethod&lt;/code&gt; will be called with the exports of each dependency (in the same order). If &lt;code&gt;dependencies&lt;/code&gt; are not provided, &lt;code&gt;factoryMethod&lt;/code&gt; is called with &lt;code&gt;require&lt;/code&gt;, &lt;code&gt;exports&lt;/code&gt; and &lt;code&gt;module&lt;/code&gt; (for compatibility!). If this function returns a value, this value is exported by the module. The compiler ensures that each dependency is available.</source>
          <target state="translated">경우 &lt;code&gt;dependencies&lt;/code&gt; 제공된다 &lt;code&gt;factoryMethod&lt;/code&gt; 들은 (동일한 순서의) 각 의존성 수출로 호출된다. 경우 &lt;code&gt;dependencies&lt;/code&gt; 제공되지 않습니다, &lt;code&gt;factoryMethod&lt;/code&gt; 가 호출 될 &lt;code&gt;require&lt;/code&gt; , &lt;code&gt;exports&lt;/code&gt; 및 &lt;code&gt;module&lt;/code&gt; (호환성을 위해!). 이 함수가 값을 반환하면이 값을 모듈에서 내 보냅니다. 컴파일러는 각 종속성이 사용 가능한지 확인합니다.</target>
        </trans-unit>
        <trans-unit id="33d4bf1a62a46eb3b3090c3168fc0b527ef9a8b1" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;from&lt;/code&gt; is directory, &lt;code&gt;to&lt;/code&gt; has no extension or ends in &lt;code&gt;'/'&lt;/code&gt;</source>
          <target state="translated">경우 &lt;code&gt;from&lt;/code&gt; 디렉토리는, &lt;code&gt;to&lt;/code&gt; 에는 확장이나 끝이 없습니다 &lt;code&gt;'/'&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b408c2dc265da39c0dc82e0b895cac5e5dd366c3" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;library&lt;/code&gt; is set and &lt;code&gt;libraryTarget&lt;/code&gt; is not, &lt;code&gt;libraryTarget&lt;/code&gt; defaults to &lt;code&gt;var&lt;/code&gt; as specified in the &lt;a href=&quot;../configuration/output&quot;&gt;output configuration documentation&lt;/a&gt;. See &lt;a href=&quot;../configuration/output#output-librarytarget&quot;&gt;&lt;code&gt;output.libraryTarget&lt;/code&gt;&lt;/a&gt; there for a detailed list of all available options.</source>
          <target state="translated">경우 &lt;code&gt;library&lt;/code&gt; 설정되고 &lt;code&gt;libraryTarget&lt;/code&gt; 이 아닌, &lt;code&gt;libraryTarget&lt;/code&gt; 의 기본값 &lt;code&gt;var&lt;/code&gt; 에 지정된대로 &lt;a href=&quot;../configuration/output&quot;&gt;출력 구성 문서&lt;/a&gt; . 사용 가능한 모든 옵션에 대한 자세한 목록은 &lt;a href=&quot;../configuration/output#output-librarytarget&quot;&gt; &lt;code&gt;output.libraryTarget&lt;/code&gt; &lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="6ee47d4e1114d14d38c93c764db62d3a322407e2" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;name&lt;/code&gt; is used in a module it is filled by a module loaded by &lt;code&gt;require(&amp;lt;request&amp;gt;)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;name&lt;/code&gt; 이 모듈에서 사용 되면 &lt;code&gt;require(&amp;lt;request&amp;gt;)&lt;/code&gt; 의해로드 된 모듈로 채워집니다 .</target>
        </trans-unit>
        <trans-unit id="b3e1f075f259beb79f9112be4ab6886b9e262221" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;options.pathinfo&lt;/code&gt; is set, each module function is annotated with a comment containing the module identifier shortened to &lt;code&gt;context&lt;/code&gt; (absolute path).</source>
          <target state="translated">경우 &lt;code&gt;options.pathinfo&lt;/code&gt; 가 설정되고, 각 모듈은 기능 모듈 단축 식별자를 포함하는 주석이 주석이 &lt;code&gt;context&lt;/code&gt; (절대 경로).</target>
        </trans-unit>
        <trans-unit id="6e414dc45e43432219bacffa3a68f290925ad98f" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;output.filename&lt;/code&gt; is set to &lt;code&gt;bundle.js&lt;/code&gt; and &lt;code&gt;filename&lt;/code&gt; is used like this:</source>
          <target state="translated">경우 &lt;code&gt;output.filename&lt;/code&gt; 이 설정되어 &lt;code&gt;bundle.js&lt;/code&gt; 및 &lt;code&gt;filename&lt;/code&gt; 다음과 같이 사용된다 :</target>
        </trans-unit>
        <trans-unit id="b040e0e0352f09a83cbc48731ff94b99bf150416" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;output.library&lt;/code&gt; is not assigned a non-empty string, the default behavior is that all properties returned by the entry point will be assigned to the object as defined for the particular &lt;code&gt;output.libraryTarget&lt;/code&gt;, via the following code fragment:</source>
          <target state="translated">&lt;code&gt;output.library&lt;/code&gt; 에 비어 있지 않은 문자열이 할당되지 않은 경우 기본 동작은 진입 점에서 반환 된 모든 속성 이 다음 코드 조각을 통해 특정 &lt;code&gt;output.libraryTarget&lt;/code&gt; 에 대해 정의 된대로 객체에 할당되는 것입니다 .</target>
        </trans-unit>
        <trans-unit id="986dff084e7c4e6327decd3a7b8d6a15ace985c8" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;output.library&lt;/code&gt; is undefined, the following is generated instead.</source>
          <target state="translated">&lt;code&gt;output.library&lt;/code&gt; 가 정의되지 않은 경우 대신 다음이 생성됩니다.</target>
        </trans-unit>
        <trans-unit id="653ad8db2961c8b7c43c67b9207c81752b64e61b" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;to&lt;/code&gt; contains &lt;a href=&quot;https://github.com/webpack-contrib/file-loader#placeholders&quot;&gt;a template pattern&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://github.com/webpack-contrib/file-loader#placeholders&quot;&gt;템플릿 패턴 &lt;/a&gt; &lt;code&gt;to&lt;/code&gt; 포함 하는 경우</target>
        </trans-unit>
        <trans-unit id="950190fdaa548f29dbc37c6331fa3c0ab0a78d6b" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;to&lt;/code&gt; has extension or &lt;code&gt;from&lt;/code&gt; is file</source>
          <target state="translated">경우 &lt;code&gt;to&lt;/code&gt; 확장자가 또는 &lt;code&gt;from&lt;/code&gt; 파일입니다</target>
        </trans-unit>
        <trans-unit id="185802ed5473c2f7e8cb3f24f4ffa52ff1b7dcfa" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;true&lt;/code&gt;, it will not allow extension-less files. So by default &lt;code&gt;require('./foo')&lt;/code&gt; works if &lt;code&gt;./foo&lt;/code&gt; has a &lt;code&gt;.js&lt;/code&gt; extension, but with this enabled only &lt;code&gt;require('./foo.js')&lt;/code&gt; will work. Default:</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; 인 경우 확장명없는 파일을 허용하지 않습니다. 따라서 기본적으로 &lt;code&gt;require('./foo')&lt;/code&gt; 는 &lt;code&gt;./foo&lt;/code&gt; 에 &lt;code&gt;.js&lt;/code&gt; 확장자 가 있으면 작동 하지만이 기능을 사용하면 &lt;code&gt;require('./foo.js')&lt;/code&gt; 만 작동합니다. 기본:</target>
        </trans-unit>
        <trans-unit id="b50c08f5b71411f6a3e6a45904a9f742ae52ad16" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;true&lt;/code&gt;, specifies that the code can be re-used in watch mode if none of the &lt;code&gt;dependencies&lt;/code&gt; have changed.</source>
          <target state="translated">경우 &lt;code&gt;true&lt;/code&gt; , 지정 코드를 다시 사용하는 것도 경우 시계 모드에있을 수있는 &lt;code&gt;dependencies&lt;/code&gt; 변경되지했다.</target>
        </trans-unit>
        <trans-unit id="df48d4048b5bdeb409ec799b53a6e5ec78091008" translate="yes" xml:space="preserve">
          <source>If a &lt;code&gt;webpack.config.js&lt;/code&gt; is present, the &lt;code&gt;webpack&lt;/code&gt; command picks it up by default. We use the &lt;code&gt;--config&lt;/code&gt; option here only to show that you can pass a config of any name. This will be useful for more complex configurations that need to be split into multiple files.</source>
          <target state="translated">경우 &lt;code&gt;webpack.config.js&lt;/code&gt; 이 존재의 &lt;code&gt;webpack&lt;/code&gt; 명령은 기본적으로 그것을 선택합니다. 여기서는 &lt;code&gt;--config&lt;/code&gt; 옵션 만 사용하여 모든 이름의 구성을 전달할 수 있음을 보여줍니다. 여러 파일로 분할해야하는보다 복잡한 구성에 유용합니다.</target>
        </trans-unit>
        <trans-unit id="7e41b772e20c437afe0b411b7de6f248c54d850e" translate="yes" xml:space="preserve">
          <source>If a callback is added after dependencies were loaded, it will be called immediately.</source>
          <target state="translated">종속성이로드 된 후 콜백이 추가되면 즉시 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="f4dd7e2689ccc2b98e7c1c90d4993c46e7b87604" translate="yes" xml:space="preserve">
          <source>If a dependency is included but not used, the browser will be forced to download unnecessary code.</source>
          <target state="translated">종속성이 포함되어 있지만 사용되지 않으면 브라우저는 불필요한 코드를 강제로 다운로드합니다.</target>
        </trans-unit>
        <trans-unit id="07f33b8aa91a147067e9de02b1b1e50e00f59e5d" translate="yes" xml:space="preserve">
          <source>If a dependency is missing, or included in the wrong order, the application will not function properly.</source>
          <target state="translated">종속성이 없거나 잘못된 순서로 포함 된 경우 응용 프로그램이 제대로 작동하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="1e52467f5752b6a9c3fe25a8895e33f563202207" translate="yes" xml:space="preserve">
          <source>If a function is passed, then it will be called with the compiler as a parameter. Set it to a function if none of the predefined targets from the list above meet your needs.</source>
          <target state="translated">함수가 전달되면 컴파일러에서 매개 변수로 호출됩니다. 위 목록에서 사전 정의 된 대상이 사용자의 요구를 충족시키지 않으면 기능으로 설정하십시오.</target>
        </trans-unit>
        <trans-unit id="9ca3ed1813b95cb8adbef52e8fdd32e6da9b7528" translate="yes" xml:space="preserve">
          <source>If a string or array of strings is passed, the chunk is named &lt;code&gt;main&lt;/code&gt;. If an object is passed, each key is the name of a chunk, and the value describes the entry point for the chunk.</source>
          <target state="translated">문자열 또는 문자열 배열이 전달되면 청크 이름은 &lt;code&gt;main&lt;/code&gt; 입니다. 객체가 전달되면 각 키는 청크의 이름이며 값은 청크의 진입 점을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="0d6a51eb9233c67f994d457f4260e35be0b31994" translate="yes" xml:space="preserve">
          <source>If all went well, you should now see your icon as a repeating background, as well as an &lt;code&gt;img&lt;/code&gt; element beside our &lt;code&gt;Hello webpack&lt;/code&gt; text. If you inspect this element, you'll see that the actual filename has changed to something like &lt;code&gt;5c999da72346a995e7e2718865d019c8.png&lt;/code&gt;. This means webpack found our file in the &lt;code&gt;src&lt;/code&gt; folder and processed it!</source>
          <target state="translated">모든 것이 잘 되었다면 이제 아이콘이 반복 배경으로 표시되고 &lt;code&gt;Hello webpack&lt;/code&gt; 텍스트 옆의 &lt;code&gt;img&lt;/code&gt; 요소가 표시됩니다. 이 요소를 검사하면 실제 파일 이름이 &lt;code&gt;5c999da72346a995e7e2718865d019c8.png&lt;/code&gt; 와 같은 것으로 변경 되었음을 알 수 있습니다. 이것은 webpack이 &lt;code&gt;src&lt;/code&gt; 폴더 에서 파일을 찾아서 처리했음을 의미 합니다!</target>
        </trans-unit>
        <trans-unit id="64870bbe4c22e691ce428a2835d8d2c7e127f61a" translate="yes" xml:space="preserve">
          <source>If an object is passed, webpack will use this object for caching. Keeping a reference to this object will allow one to share the same cache between compiler calls:</source>
          <target state="translated">객체가 전달되면 웹팩은이 객체를 캐싱에 사용합니다. 이 객체에 대한 참조를 유지하면 컴파일러 호출간에 동일한 캐시를 공유 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="43b99e6352163b1d06ae88f4fb0bf982ddd87b32" translate="yes" xml:space="preserve">
          <source>If convertToAbsoluteUrls and sourceMaps are both enabled, relative urls will be converted to absolute urls right before the css is injected into the page. This resolves &lt;a href=&quot;https://github.com/webpack/style-loader/pull/96&quot;&gt;an issue&lt;/a&gt; where relative resources fail to load when source maps are enabled. You can enable it with the convertToAbsoluteUrls option.</source>
          <target state="translated">convertToAbsoluteUrls 및 sourceMaps가 모두 사용 가능한 경우 CSS가 페이지에 삽입되기 직전에 상대 URL이 절대 URL로 변환됩니다. 소스 맵이 사용 가능한 경우 상대 자원이로드되지 않는 &lt;a href=&quot;https://github.com/webpack/style-loader/pull/96&quot;&gt;문제를&lt;/a&gt; 해결합니다 . convertToAbsoluteUrls 옵션을 사용하여 활성화 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="7cfa6ea1a67ca3ceeb449fc2e2629a8148f2541b" translate="yes" xml:space="preserve">
          <source>If defined, style-loader will attach given attributes with their values on &lt;code&gt;&amp;lt;style&amp;gt;&lt;/code&gt; / &lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt; element.</source>
          <target state="translated">정의 된 경우 style-loader는 &lt;code&gt;&amp;lt;style&amp;gt;&lt;/code&gt; / &lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt; 요소 의 값과 함께 지정된 속성을 첨부합니다 .</target>
        </trans-unit>
        <trans-unit id="18d49a999b72016db961a09284a492d94304e784" translate="yes" xml:space="preserve">
          <source>If defined, the style-loader will reuse a single &lt;code&gt;&amp;lt;style&amp;gt;&amp;lt;/style&amp;gt;&lt;/code&gt; element, instead of adding/removing individual elements for each required module.</source>
          <target state="translated">정의 된 경우 스타일 로더는 각 필수 모듈마다 개별 요소를 추가 / 제거하는 대신 단일 &lt;code&gt;&amp;lt;style&amp;gt;&amp;lt;/style&amp;gt;&lt;/code&gt; 요소 를 재사용 합니다.</target>
        </trans-unit>
        <trans-unit id="f218065a4d485d9e3d6e6b6aa0d4a6bea489531d" translate="yes" xml:space="preserve">
          <source>If ensures that native modules are loaded correctly even if bundled.</source>
          <target state="translated">기본 모듈이 번들로 제공 되어도 올바르게로드되도록합니다.</target>
        </trans-unit>
        <trans-unit id="45d3588afa2786ab4d31277d9d14540030ce65e1" translate="yes" xml:space="preserve">
          <source>If exported module methods are already async, signature is unchanged</source>
          <target state="translated">내 보낸 모듈 메소드가 이미 비동기 인 경우 서명은 변경되지 않습니다</target>
        </trans-unit>
        <trans-unit id="0bfbdd1c3c27461d16567a5b7542a7805d1cb884" translate="yes" xml:space="preserve">
          <source>If for some reason you want to use different config file depending on certain situations you can change this via command line by using the &lt;code&gt;--config&lt;/code&gt; flag.</source>
          <target state="translated">어떤 이유로 특정 상황에 따라 다른 구성 파일을 사용하려는 경우 &lt;code&gt;--config&lt;/code&gt; 플래그 를 사용하여 명령 행을 통해이를 변경할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="69da252b8b51846f82d3cd898a8f9857c1028509" translate="yes" xml:space="preserve">
          <source>If multiple modules would result in the same name, &lt;a href=&quot;#output-devtoolfallbackmodulefilenametemplate&quot;&gt;&lt;code&gt;output.devtoolFallbackModuleFilenameTemplate&lt;/code&gt;&lt;/a&gt; is used instead for these modules.</source>
          <target state="translated">여러 모듈의 이름이 같은 경우 이러한 모듈 대신 &lt;a href=&quot;#output-devtoolfallbackmodulefilenametemplate&quot;&gt; &lt;code&gt;output.devtoolFallbackModuleFilenameTemplate&lt;/code&gt; &lt;/a&gt; 이 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="e3dfcdb0b1dc024842f447016ffd7e77ff903a2b" translate="yes" xml:space="preserve">
          <source>If no browser is provided (as shown above), your default browser will be used. To specify a different browser, just pass its name:</source>
          <target state="translated">브라우저가 제공되지 않으면 (위 그림 참조) 기본 브라우저가 사용됩니다. 다른 브라우저를 지정하려면 이름을 전달하십시오.</target>
        </trans-unit>
        <trans-unit id="d55a5575efd33d92f15721c5fbda8793dbf5d812" translate="yes" xml:space="preserve">
          <source>If not set, webpack sets &lt;code&gt;production&lt;/code&gt; as the default value for &lt;code&gt;mode&lt;/code&gt;. The supported values for mode are:</source>
          <target state="translated">설정하지 않으면 webpack은 &lt;code&gt;production&lt;/code&gt; 을 &lt;code&gt;mode&lt;/code&gt; 의 기본값으로 설정 합니다 . mode에 지원되는 값은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="f8b38a2515fd144328fb3bfee30e660e8581edf5" translate="yes" xml:space="preserve">
          <source>If set to true the loader will rewrite &lt;code&gt;&amp;lt;link import=&quot;css&quot; href=&quot;...&quot;&amp;gt;&lt;/code&gt; or &lt;code&gt;&amp;lt;link rel=&quot;stylesheet&quot; href=&quot;...&quot;&amp;gt;&lt;/code&gt; that are inside the dom-module with &lt;code&gt;&amp;lt;style&amp;gt;require('...')&amp;lt;/style&amp;gt;&lt;/code&gt;. This will allow for the file to be processed by loaders that are set up in the webpack config to handle their file type.</source>
          <target state="translated">true로 설정하면 로더는 &lt;code&gt;&amp;lt;style&amp;gt;require('...')&amp;lt;/style&amp;gt;&lt;/code&gt; 사용하여 dom- 모듈 내부에있는 &lt;code&gt;&amp;lt;link import=&quot;css&quot; href=&quot;...&quot;&amp;gt;&lt;/code&gt; 또는 &lt;code&gt;&amp;lt;link rel=&quot;stylesheet&quot; href=&quot;...&quot;&amp;gt;&lt;/code&gt; 합니다. require ( '...') &amp;lt;/ style&amp;gt; . 이를 통해 파일 유형을 처리하기 위해 webpack 구성에 설정된 로더가 파일을 처리 할 수 ​​있습니다.</target>
        </trans-unit>
        <trans-unit id="82479f8a654c0b86f8986eef236b26c84f34fba1" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;eslintPath&lt;/code&gt; is a folder like a official eslint, or specify a &lt;code&gt;formatter&lt;/code&gt; option. now you dont have to install &lt;code&gt;eslint&lt;/code&gt; .</source>
          <target state="translated">는 IF &lt;code&gt;eslintPath&lt;/code&gt; 는 공식적인 eslint 같은 폴더입니다, 또는 지정 &lt;code&gt;formatter&lt;/code&gt; 옵션을 선택합니다. 이제 &lt;code&gt;eslint&lt;/code&gt; 를 설치할 필요가 없습니다 .</target>
        </trans-unit>
        <trans-unit id="bd56a8742f9e2d9b6668ea31bedbcae5b6e7f991" translate="yes" xml:space="preserve">
          <source>If the current chunk contains modules already split out from the main bundle, it will be reused instead of a new one being generated. This can impact the resulting file name of the chunk.</source>
          <target state="translated">현재 청크에 기본 번들에서 이미 분리 된 모듈이 포함되어 있으면 새로 생성되는 대신 재사용됩니다. 이는 청크의 결과 파일 이름에 영향을 줄 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="24b5ffcaaf2eed75c47cd9fb37fc044c78957376" translate="yes" xml:space="preserve">
          <source>If the folder contains a &lt;code&gt;package.json&lt;/code&gt; file, then fields specified in &lt;a href=&quot;../configuration/resolve#resolve-mainfields&quot;&gt;&lt;code&gt;resolve.mainFields&lt;/code&gt;&lt;/a&gt; configuration option are looked up in order, and the first such field in &lt;code&gt;package.json&lt;/code&gt; determines the file path.</source>
          <target state="translated">폴더에 &lt;code&gt;package.json&lt;/code&gt; 파일이 포함되어 있으면 &lt;a href=&quot;../configuration/resolve#resolve-mainfields&quot;&gt; &lt;code&gt;resolve.mainFields&lt;/code&gt; &lt;/a&gt; 구성 옵션에 지정된 필드 가 순서대로 조회되고 &lt;code&gt;package.json&lt;/code&gt; 의 첫 번째 필드 가 파일 경로를 결정합니다.</target>
        </trans-unit>
        <trans-unit id="f5769605929f82e57430fb4717d6d76c443abc54" translate="yes" xml:space="preserve">
          <source>If the loader has no &lt;code&gt;options&lt;/code&gt;, but was invoked with a query string, this will be a string starting with &lt;code&gt;?&lt;/code&gt;.</source>
          <target state="translated">로더에 &lt;code&gt;options&lt;/code&gt; 이 없지만 쿼리 문자열로 호출 된 경우 &lt;code&gt;?&lt;/code&gt; 로 시작하는 문자열이됩니다 . .</target>
        </trans-unit>
        <trans-unit id="5d354e319cbac13ec902509db72cdb3b9d0ab9e9" translate="yes" xml:space="preserve">
          <source>If the loader was configured with an &lt;a href=&quot;../configuration/module#useentry&quot;&gt;&lt;code&gt;options&lt;/code&gt;&lt;/a&gt; object, this will point to that object.</source>
          <target state="translated">로더가 &lt;a href=&quot;../configuration/module#useentry&quot;&gt; &lt;code&gt;options&lt;/code&gt; &lt;/a&gt; 오브젝트 로 구성된 경우 이는 해당 오브젝트를 가리 킵니다.</target>
        </trans-unit>
        <trans-unit id="3c47481a0a68b0c995943a5ceaffa05a318b27fb" translate="yes" xml:space="preserve">
          <source>If the path has a file extension, then the file is bundled straightaway.</source>
          <target state="translated">경로에 파일 확장자가 있으면 파일이 곧바로 번들로 제공됩니다.</target>
        </trans-unit>
        <trans-unit id="73575a91ca074bb9d7d0b8a836cea304cb565e3f" translate="yes" xml:space="preserve">
          <source>If the path points to a folder, then the following steps are taken to find the right file with the right extension:</source>
          <target state="translated">경로가 폴더를 가리키는 경우 올바른 확장자를 가진 올바른 파일을 찾기 위해 다음 단계를 수행합니다.</target>
        </trans-unit>
        <trans-unit id="cdfe5f8c21d08ce5076228bb6801fbf96db868fa" translate="yes" xml:space="preserve">
          <source>If the resource (directory) matches &lt;code&gt;resourceRegExp&lt;/code&gt;, the plugin replaces the default resource, recursive flag or generated regular expression with &lt;code&gt;newContentResource&lt;/code&gt;, &lt;code&gt;newContentRecursive&lt;/code&gt; or &lt;code&gt;newContextRegExp&lt;/code&gt; respectively. If &lt;code&gt;newContentResource&lt;/code&gt; is relative, it is resolved relative to the previous resource.</source>
          <target state="translated">자원 (디렉토리)이 &lt;code&gt;resourceRegExp&lt;/code&gt; 와 일치 하면 플러그인은 기본 자원, 재귀 플래그 또는 생성 된 정규식을 각각 &lt;code&gt;newContentResource&lt;/code&gt; , &lt;code&gt;newContentRecursive&lt;/code&gt; 또는 &lt;code&gt;newContextRegExp&lt;/code&gt; 로 바꿉니다 . &lt;code&gt;newContentResource&lt;/code&gt; 가 상대적인 경우 이전 자원을 기준으로 분석됩니다.</target>
        </trans-unit>
        <trans-unit id="79abbcba526b248d039a0743ecd5335a433a83bc" translate="yes" xml:space="preserve">
          <source>If the value is a string it will be used as a code fragment.</source>
          <target state="translated">값이 문자열이면 코드 조각으로 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="8f1be205bff6517aa135228e2c7f797b13ff4efb" translate="yes" xml:space="preserve">
          <source>If the value is an object all keys are defined the same way.</source>
          <target state="translated">값이 객체이면 모든 키가 동일한 방식으로 정의됩니다.</target>
        </trans-unit>
        <trans-unit id="c80bd1536b13d414a6baa335b614baa6c76a4716" translate="yes" xml:space="preserve">
          <source>If the value isn't a string, it will be stringified (including functions).</source>
          <target state="translated">값이 문자열이 아닌 경우 문자열 화됩니다 (함수 포함).</target>
        </trans-unit>
        <trans-unit id="83a611854646adb309f27904f9ed35b750f2b5f1" translate="yes" xml:space="preserve">
          <source>If there are SourceMaps, they will also be included in the result string.</source>
          <target state="translated">SourceMap이 있으면 결과 문자열에도 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="4c2c55a655b84ae013eb6b53b4db03dec7b81683" translate="yes" xml:space="preserve">
          <source>If there are any duplicated modules between entry chunks they will be included in both bundles.</source>
          <target state="translated">엔트리 청크간에 중복 된 모듈이 있으면 두 번들에 모두 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="9d62d44f6e2f99d7094f3aa73779963bb10a3fd6" translate="yes" xml:space="preserve">
          <source>If there is no &lt;code&gt;package.json&lt;/code&gt; or if the main fields do not return a valid path, file names specified in the &lt;a href=&quot;../configuration/resolve#resolve-mainfiles&quot;&gt;&lt;code&gt;resolve.mainFiles&lt;/code&gt;&lt;/a&gt; configuration option are looked for in order, to see if a matching filename exists in the imported/required directory .</source>
          <target state="translated">거기에 더없는 경우 &lt;code&gt;package.json&lt;/code&gt; 또는 주요 필드가 유효한 경로를 반환하지 않는 경우에 지정된 파일 이름 &lt;a href=&quot;../configuration/resolve#resolve-mainfiles&quot;&gt; &lt;code&gt;resolve.mainFiles&lt;/code&gt; 의&lt;/a&gt; 구성 옵션은 일치하는 파일 이름이 가져온 / 필요한 디렉토리에 존재하는지, 위해 찾았다된다.</target>
        </trans-unit>
        <trans-unit id="a6aa5b2b56d2ca18437a2ac9b9a74e0476e7d9ee" translate="yes" xml:space="preserve">
          <source>If this is too heavy on the file system, you can change this to an integer to set the interval in milliseconds.</source>
          <target state="translated">파일 시스템에서 이것이 너무 무거 우면이를 밀리 초 단위로 설정하기 위해 정수로 변경할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="225c720ca42da60ed6e6d5611f8f3324ddfe0f70" translate="yes" xml:space="preserve">
          <source>If true, emits a file (writes a file to the filesystem). If false, the loader will return a public URI but &lt;em&gt;will not&lt;/em&gt; emit the file. It is often useful to disable this option for server-side packages.</source>
          <target state="translated">true 인 경우 파일을 내 보냅니다 (파일을 파일 시스템에 씁니다). false 인 경우 로더는 공용 URI를 리턴하지만 파일을 내 &lt;em&gt;보내지 않습니다&lt;/em&gt; . 서버 측 패키지에 대해서는이 옵션을 비활성화하는 것이 유용한 경우가 많습니다.</target>
        </trans-unit>
        <trans-unit id="1eda099c2c5782e0b3576789ac6b0a53cbc5cd8f" translate="yes" xml:space="preserve">
          <source>If true, pipes &lt;code&gt;stylelint&lt;/code&gt; error severity messages to the &lt;code&gt;webpack&lt;/code&gt; compiler's error message handler.</source>
          <target state="translated">true 인 경우 파이프 &lt;code&gt;stylelint&lt;/code&gt; 오류 심각도 메시지를 &lt;code&gt;webpack&lt;/code&gt; 컴파일러의 오류 메시지 핸들러로 스타일링 합니다.</target>
        </trans-unit>
        <trans-unit id="a06a0527c4531fe93a61e00d8ea52d6cb4b8954f" translate="yes" xml:space="preserve">
          <source>If true, throws a fatal error in the global build process. This will end the build process on any &lt;code&gt;stylelint&lt;/code&gt; error.</source>
          <target state="translated">true이면 전역 빌드 프로세스에서 치명적인 오류가 발생합니다. 모든 &lt;code&gt;stylelint&lt;/code&gt; 오류 에서 빌드 프로세스가 종료됩니다 .</target>
        </trans-unit>
        <trans-unit id="f7907c55ff2934d171f75429bbecb6ec83170412" translate="yes" xml:space="preserve">
          <source>If unsafe cache is enabled, includes &lt;code&gt;request.context&lt;/code&gt; in the cache key. This option is taken into account by the &lt;a href=&quot;https://github.com/webpack/enhanced-resolve/&quot;&gt;&lt;code&gt;enhanced-resolve&lt;/code&gt;&lt;/a&gt; module. Since webpack 3.1.0 context in resolve caching is ignored when resolve or resolveLoader plugins are provided. This addresses a performance regression.</source>
          <target state="translated">안전하지 않은 캐시가 활성화 된 경우 캐시 키에 &lt;code&gt;request.context&lt;/code&gt; 를 포함 시킵니다. 이 옵션은 &lt;a href=&quot;https://github.com/webpack/enhanced-resolve/&quot;&gt; &lt;code&gt;enhanced-resolve&lt;/code&gt; &lt;/a&gt; 모듈 에서 고려됩니다 . resolve 또는 resolveLoader 플러그인이 제공되면 resolve 캐싱의 webpack 3.1.0 컨텍스트가 무시됩니다. 이것은 성능 회귀를 해결합니다.</target>
        </trans-unit>
        <trans-unit id="db93f6c6e041ac2dce0096403148c102903e17fc" translate="yes" xml:space="preserve">
          <source>If used inside a expression that is parsed by the Parser, the config option is treated as &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">구문 분석기가 구문 분석 한 표현식 내에서 사용되는 경우 config 옵션은 &lt;code&gt;true&lt;/code&gt; 로 처리됩니다 .</target>
        </trans-unit>
        <trans-unit id="68cec0d3a09b30b5dfed3ac7037930cf262328ae" translate="yes" xml:space="preserve">
          <source>If using a function for this option, the function will be passed an object containing the substitutions in the table above.</source>
          <target state="translated">이 옵션에 함수를 사용하는 경우 함수는 위 표의 대체를 포함하는 객체로 전달됩니다.</target>
        </trans-unit>
        <trans-unit id="60f440352d9d184e19412ab7f330500fd8f0d080" translate="yes" xml:space="preserve">
          <source>If using the &lt;a href=&quot;#output-library&quot;&gt;&lt;code&gt;output.library&lt;/code&gt;&lt;/a&gt; option, the library name is automatically appended.</source>
          <target state="translated">&lt;a href=&quot;#output-library&quot;&gt; &lt;code&gt;output.library&lt;/code&gt; &lt;/a&gt; 옵션을 사용하는 경우 라이브러리 이름이 자동으로 추가됩니다.</target>
        </trans-unit>
        <trans-unit id="c47f47c9ee0d5881bd7175dbebc17a8cac454c6e" translate="yes" xml:space="preserve">
          <source>If watching does not work for you, try out this option. Watching does not work with NFS and machines in VirtualBox.</source>
          <target state="translated">시청할 수없는 경우이 옵션을 사용해보십시오. VirtualBox의 NFS 및 컴퓨터에서는 감시 기능이 작동하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="e8d5a4ed1e74100d39638592b4d0b327ca5068ed" translate="yes" xml:space="preserve">
          <source>If we run a build, we should still see the same output:</source>
          <target state="translated">빌드를 실행해도 여전히 동일한 출력이 표시되어야합니다.</target>
        </trans-unit>
        <trans-unit id="aa65c205269e7b023f234f65c15495f5a87b040b" translate="yes" xml:space="preserve">
          <source>If we run our build, another &lt;code&gt;polyfills.bundle.js&lt;/code&gt; file will be emitted and everything should still run smoothly in the browser. Note that this set up could likely be improved upon but it should give you a good idea of how you can provide polyfills only to the users that actually need them.</source>
          <target state="translated">빌드를 실행하면 다른 &lt;code&gt;polyfills.bundle.js&lt;/code&gt; 파일이 생성되며 모든 것이 브라우저에서 여전히 원활하게 실행됩니다. 이 설정은 개선 될 수 있지만 실제로 필요한 사용자에게만 폴리 필을 제공 할 수있는 방법에 대한 좋은 아이디어를 제공해야합니다.</target>
        </trans-unit>
        <trans-unit id="44b26b80d99e744c6c047afbad0f13d1c1deea72" translate="yes" xml:space="preserve">
          <source>If you are enthusiastic about using the latest that webpack has to offer, you can install beta versions or even directly from the webpack repository using the following commands:</source>
          <target state="translated">웹팩이 제공하는 최신 버전을 사용하는 데 관심이 있다면 다음 명령을 사용하여 베타 버전을 설치하거나 웹팩 저장소에서 직접 설치할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="fc325ce881228c1ddcf79037c94fad86d836afb0" translate="yes" xml:space="preserve">
          <source>If you are experiencing any issues, please see the following notes. There are a variety of reasons why webpack might miss a file change.</source>
          <target state="translated">문제가 발생하면 다음 참고 사항을 참조하십시오. webpack이 파일 변경을 놓칠 수있는 이유는 여러 가지가 있습니다.</target>
        </trans-unit>
        <trans-unit id="c951c9098069d4c65737f0bf9133d318b36d5ca5" translate="yes" xml:space="preserve">
          <source>If you are finding that urls are not resolving properly when you run webpack. You can expand your loader functionality with options. The &lt;code&gt;url: false&lt;/code&gt; property allows your paths resolved without any changes.</source>
          <target state="translated">webpack을 실행할 때 URL이 제대로 해결되지 않는 것을 발견 한 경우 옵션으로 로더 기능을 확장 할 수 있습니다. &lt;code&gt;url: false&lt;/code&gt; 속성은 당신의 경로를 변경하지 않고도 해결할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="88f1e1343a92b2bf27f3dc803b16dc14b51b3caf" translate="yes" xml:space="preserve">
          <source>If you are interested in more ways to optimize your output, please jump to the next guide for details on building for &lt;a href=&quot;production&quot;&gt;production&lt;/a&gt;.</source>
          <target state="translated">출력을 최적화하는 더 많은 방법에 관심이있는 경우 &lt;a href=&quot;production&quot;&gt;생산을&lt;/a&gt; 위한 구축에 대한 자세한 내용은 다음 안내서로 이동하십시오 .</target>
        </trans-unit>
        <trans-unit id="31a3d2c22bb25ed57334e2bb509b42c4fddc60e2" translate="yes" xml:space="preserve">
          <source>If you are using Babel elsewhere and have &lt;code&gt;modules&lt;/code&gt; set to &lt;code&gt;false&lt;/code&gt;, you will have to either maintain two separate &lt;code&gt;.babelrc&lt;/code&gt; files or use &lt;code&gt;const jsxobj = require('jsxobj');&lt;/code&gt; and &lt;code&gt;module.exports&lt;/code&gt; instead of the new &lt;code&gt;import&lt;/code&gt; and &lt;code&gt;export&lt;/code&gt; syntax. This is because while Node does support many new ES6 features, they don't yet support ES6 module syntax.</source>
          <target state="translated">Babel을 다른 곳에서 사용하고 &lt;code&gt;modules&lt;/code&gt; 을 &lt;code&gt;false&lt;/code&gt; 로 설정 한 경우 두 개의 개별 &lt;code&gt;.babelrc&lt;/code&gt; 파일을 유지 관리 하거나 &lt;code&gt;const jsxobj = require('jsxobj');&lt;/code&gt; 및 &lt;code&gt;module.exports&lt;/code&gt; 대신 새로운 &lt;code&gt;import&lt;/code&gt; 및 &lt;code&gt;export&lt;/code&gt; 구문. Node는 많은 새로운 ES6 기능을 지원하지만 아직 ES6 모듈 구문을 지원하지 않기 때문입니다.</target>
        </trans-unit>
        <trans-unit id="07611a267ed72bba48c7d5c7b5c7332c14be1f2d" translate="yes" xml:space="preserve">
          <source>If you are using webpack &lt;a href=&quot;../api/cli&quot;&gt;CLI&lt;/a&gt;, the webpack process will not exit with an error code while this plugin is enabled. If you want webpack to &quot;fail&quot; when using the CLI, please check out the &lt;a href=&quot;../api/cli#advanced-options&quot;&gt;&lt;code&gt;bail&lt;/code&gt; option&lt;/a&gt;.</source>
          <target state="translated">webpack &lt;a href=&quot;../api/cli&quot;&gt;CLI를&lt;/a&gt; 사용 하는 경우이 플러그인을 사용하는 동안 웹팩 프로세스가 오류 코드와 함께 종료되지 않습니다. CLI를 사용할 때 webpack을 &quot;실패&quot;시키려면 &lt;a href=&quot;../api/cli#advanced-options&quot;&gt; &lt;code&gt;bail&lt;/code&gt; 옵션을&lt;/a&gt; 확인하십시오 .</target>
        </trans-unit>
        <trans-unit id="efd68771538d112f86285a66966d1715a1e222a3" translate="yes" xml:space="preserve">
          <source>If you decide to try another minification plugin, just make sure your new choice also drops dead code as described in the &lt;a href=&quot;tree-shaking&quot;&gt;tree shaking&lt;/a&gt; guide and provide it as the &lt;a href=&quot;../configuration/optimization#optimization-minimizer&quot;&gt;&lt;code&gt;optimization.minimizer&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">다른 축소 플러그인을 사용하기로 결정한 경우, &lt;a href=&quot;tree-shaking&quot;&gt;트리 쉐이킹&lt;/a&gt; 안내서에 설명 된대로 새 선택 항목에서 데드 코드를 삭제 하고 &lt;a href=&quot;../configuration/optimization#optimization-minimizer&quot;&gt; &lt;code&gt;optimization.minimizer&lt;/code&gt; &lt;/a&gt; . 최소화기로 제공하십시오 .</target>
        </trans-unit>
        <trans-unit id="a72b6f3a091a93d008392a167246dd7b3740477e" translate="yes" xml:space="preserve">
          <source>If you don&amp;rsquo;t pass the &lt;code&gt;webpack&lt;/code&gt; runner function a callback, it will return a webpack &lt;code&gt;Compiler&lt;/code&gt; instance. This instance can be used to manually trigger the webpack runner or have it build and watch for changes, much like the &lt;a href=&quot;cli&quot;&gt;CLI&lt;/a&gt;. The &lt;code&gt;Compiler&lt;/code&gt; instance provides the following methods:</source>
          <target state="translated">&lt;code&gt;webpack&lt;/code&gt; 러너 함수에 콜백을 전달하지 않으면 웹팩 &lt;code&gt;Compiler&lt;/code&gt; 인스턴스 가 반환됩니다 . 이 인스턴스는 웹팩 러너를 수동으로 트리거하거나 &lt;a href=&quot;cli&quot;&gt;CLI&lt;/a&gt; 와 매우 유사하게 변경 사항을 빌드 및 감시하도록하는 데 사용할 수 있습니다 . &lt;code&gt;Compiler&lt;/code&gt; 인스턴스는 다음과 같은 방법을 제공합니다 :</target>
        </trans-unit>
        <trans-unit id="c305306239d969628f0a957d3f49a6c5ac50f44a" translate="yes" xml:space="preserve">
          <source>If you don't want &lt;code&gt;/api&lt;/code&gt; to be passed along, we need to rewrite the path:</source>
          <target state="translated">&lt;code&gt;/api&lt;/code&gt; 를 전달 하지 않으려면 경로를 다시 작성해야합니다.</target>
        </trans-unit>
        <trans-unit id="565f45b0e5bb38128e1a3f80b37d1f898320c639" translate="yes" xml:space="preserve">
          <source>If you encounter at least one instance of the variable &lt;code&gt;_&lt;/code&gt;, include the &lt;code&gt;lodash&lt;/code&gt; package and provide it to the modules that need it.</source>
          <target state="translated">변수 &lt;code&gt;_&lt;/code&gt; 의 인스턴스가 하나 이상 있는 경우 &lt;code&gt;lodash&lt;/code&gt; 패키지를 포함하고 이를 필요한 모듈에 제공하십시오.</target>
        </trans-unit>
        <trans-unit id="2e077f6bbdb882b1ac4039906e3e6695ca92666c" translate="yes" xml:space="preserve">
          <source>If you have a more advanced project and use &lt;a href=&quot;https://www.vagrantup.com/&quot;&gt;Vagrant&lt;/a&gt; to run your development environment in a Virtual Machine, you'll often want to also run webpack in the VM.</source>
          <target state="translated">고급 프로젝트가 있고 &lt;a href=&quot;https://www.vagrantup.com/&quot;&gt;Vagrant&lt;/a&gt; 를 사용 하여 가상 머신에서 개발 환경을 실행하는 경우 종종 VM에서 웹팩을 실행하는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="af148258b5dd22a17f7577a43a50d4264ded997f" translate="yes" xml:space="preserve">
          <source>If you have any CSS assets in webpack's output (for example, CSS extracted with the &lt;a href=&quot;extract-text-webpack-plugin&quot;&gt;ExtractTextPlugin&lt;/a&gt;) then these will be included with &lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt; tags in the HTML head.</source>
          <target state="translated">webpack의 출력에 CSS 자산이있는 경우 (예 &lt;a href=&quot;extract-text-webpack-plugin&quot;&gt;: ExtractTextPlugin으로&lt;/a&gt; 추출 된 CSS ) HTML 헤드에 &lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt; 태그 가 포함됩니다 .</target>
        </trans-unit>
        <trans-unit id="e03c745511a67cacba3f597cc0a4d8417eb6c550" translate="yes" xml:space="preserve">
          <source>If you have multiple webpack entry points, they will all be included with &lt;code&gt;script&lt;/code&gt; tags in the generated HTML.</source>
          <target state="translated">웹팩 시작점이 여러 개인 경우 생성 된 HTML에 모두 &lt;code&gt;script&lt;/code&gt; 태그 가 포함됩니다 .</target>
        </trans-unit>
        <trans-unit id="689bc0d9f09d4a2074a43552120fc8c0e2038b6f" translate="yes" xml:space="preserve">
          <source>If you haven't previously done so, run the command &lt;code&gt;npm run build&lt;/code&gt; to build your project. Then run the command &lt;code&gt;npm start&lt;/code&gt;. This should produce the following output:</source>
          <target state="translated">이전에 수행하지 않은 경우 &lt;code&gt;npm run build&lt;/code&gt; 명령을 실행 하여 프로젝트를 빌드하십시오. 그런 다음 &lt;code&gt;npm start&lt;/code&gt; 명령을 실행하십시오 . 결과는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="349cdf2452bc7cf7e0b6186f04e97bc9c5e0605d" translate="yes" xml:space="preserve">
          <source>If you know of any other loaders or plugins that help with or enhance Hot Module Replacement please submit a pull request to add to this list!</source>
          <target state="translated">핫 모듈 교체를 지원하거나 향상시키는 데 도움이되는 다른 로더 또는 플러그인을 알고있는 경우이 목록에 추가하려면 풀 요청을 제출하십시오!</target>
        </trans-unit>
        <trans-unit id="f1eb178e51c940150e982311e6fffe632a87860f" translate="yes" xml:space="preserve">
          <source>If you need to define two different loader configs, you can also change the config's property name via &lt;code&gt;html-loader?config=otherHtmlLoaderConfig&lt;/code&gt;:</source>
          <target state="translated">두 개의 다른 로더 구성을 정의해야하는 경우 &lt;code&gt;html-loader?config=otherHtmlLoaderConfig&lt;/code&gt; 를 통해 구성의 속성 이름을 변경할 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="77f0d6d82229ff0d53ed4faf2eefabc87a679d20" translate="yes" xml:space="preserve">
          <source>If you need to pass &lt;a href=&quot;https://github.com/webpack/html-loader/pull/46&quot;&gt;more advanced options&lt;/a&gt;, especially those which cannot be stringified, you can also define an &lt;code&gt;htmlLoader&lt;/code&gt;-property on your &lt;code&gt;webpack.config.js&lt;/code&gt;:</source>
          <target state="translated">&lt;a href=&quot;https://github.com/webpack/html-loader/pull/46&quot;&gt;더 고급 옵션&lt;/a&gt; , 특히 &lt;code&gt;webpack.config.js&lt;/code&gt; 화 할 수없는 옵션 을 전달 해야하는 경우 webpack.config.js 에서 &lt;code&gt;htmlLoader&lt;/code&gt; 속성을 정의 할 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="91242af898a06d58af220036209ec5d56d99b914" translate="yes" xml:space="preserve">
          <source>If you open &lt;code&gt;index.html&lt;/code&gt; in your code editor, you'll see that the &lt;code&gt;HtmlWebpackPlugin&lt;/code&gt; has created an entirely new file for you and that all the bundles are automatically added.</source>
          <target state="translated">코드 편집기에서 &lt;code&gt;index.html&lt;/code&gt; 을 열면 &lt;code&gt;HtmlWebpackPlugin&lt;/code&gt; 이 완전히 새로운 파일을 생성했으며 모든 번들이 자동으로 추가 된 것을 볼 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="aeca2dfc9ff183365ee9c8ebd340fc597fbdf457" translate="yes" xml:space="preserve">
          <source>If you open your browser to &lt;code&gt;http://localhost:8080&lt;/code&gt; (i.e. &lt;code&gt;http://127.0.0.1&lt;/code&gt;) you should see your webpack application being served up from the &lt;code&gt;dist&lt;/code&gt; directory. If you stop the server and refresh, the webpack application is no longer available.</source>
          <target state="translated">브라우저를 &lt;code&gt;http://localhost:8080&lt;/code&gt; (예 : &lt;code&gt;http://127.0.0.1&lt;/code&gt; )으로 열면 &lt;code&gt;dist&lt;/code&gt; 디렉토리 에서 웹팩 애플리케이션이 제공되는 것을 볼 수 있습니다 . 서버를 중지하고 새로 고치면 웹팩 애플리케이션을 더 이상 사용할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="4fb7db4d2429df6b27c9db5ba10da37161ee2934" translate="yes" xml:space="preserve">
          <source>If you pass a name to &lt;code&gt;--config-name&lt;/code&gt; flag, webpack will only build that specific configuration.</source>
          <target state="translated">&lt;code&gt;--config-name&lt;/code&gt; 플래그에 이름을 전달하면 webpack은 해당 특정 구성 만 빌드합니다.</target>
        </trans-unit>
        <trans-unit id="ad2be3219a352f8fa6b591ccbca064150835f610" translate="yes" xml:space="preserve">
          <source>If you pass the generated CSS on to the css-loader, all urls must be relative to the entry-file (e.g. &lt;code&gt;main.scss&lt;/code&gt;).</source>
          <target state="translated">생성 된 CSS를 css-loader로 전달하는 경우 모든 URL은 항목 파일과 관련이 있어야합니다 (예 : &lt;code&gt;main.scss&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="27f65f39502e6e0ddec9ed35ef7854d3bc12f547" translate="yes" xml:space="preserve">
          <source>If you prefix &lt;code&gt;typeof&lt;/code&gt; to the key, it's only defined for typeof calls.</source>
          <target state="translated">&lt;code&gt;typeof&lt;/code&gt; 를 키 앞에 붙이면 typeof 호출에 대해서만 정의됩니다.</target>
        </trans-unit>
        <trans-unit id="5af3362992e5c579579a607b6fc872a5aaf38485" translate="yes" xml:space="preserve">
          <source>If you receive this message it means that you have the npm package &lt;code&gt;babel&lt;/code&gt; installed and use the short notation of the loader in the webpack config (which is not valid anymore as of webpack 2.x):</source>
          <target state="translated">이 메시지가 표시되면 npm 패키지 &lt;code&gt;babel&lt;/code&gt; 이 설치되었고 webpack 구성에서 로더의 짧은 표기법을 사용 한다는 의미입니다 (webpack 2.x에서는 더 이상 유효하지 않음).</target>
        </trans-unit>
        <trans-unit id="620cb2bd729e26242cd5c6f1646930cc385dd4c8" translate="yes" xml:space="preserve">
          <source>If you specify the &lt;code&gt;paths&lt;/code&gt; option, the &lt;code&gt;less-loader&lt;/code&gt; will not use webpack's resolver. Modules, that can't be resolved in the local folder, will be searched in the given &lt;code&gt;paths&lt;/code&gt;. This is Less' default behavior. &lt;code&gt;paths&lt;/code&gt; should be an array with absolute paths:</source>
          <target state="translated">&lt;code&gt;paths&lt;/code&gt; 옵션 을 지정하면 &lt;code&gt;less-loader&lt;/code&gt; 가 웹팩의 리졸버를 사용하지 않습니다. 로컬 폴더에서 확인할 수없는 모듈은 지정된 &lt;code&gt;paths&lt;/code&gt; 에서 검색됩니다 . 이것은 기본 동작입니다. &lt;code&gt;paths&lt;/code&gt; 는 절대 경로가있는 배열이어야합니다.</target>
        </trans-unit>
        <trans-unit id="ccaba97492bbb20edf74e8ccb7f017d1bf70d952" translate="yes" xml:space="preserve">
          <source>If you took the route of using &lt;code&gt;webpack-dev-middleware&lt;/code&gt; instead of &lt;code&gt;webpack-dev-server&lt;/code&gt;, please use the &lt;a href=&quot;https://github.com/webpack-contrib/webpack-hot-middleware&quot;&gt;&lt;code&gt;webpack-hot-middleware&lt;/code&gt;&lt;/a&gt; package to enable HMR on your custom server or application.</source>
          <target state="translated">당신이 사용하는 경로했다 경우 &lt;code&gt;webpack-dev-middleware&lt;/code&gt; 대신 &lt;code&gt;webpack-dev-server&lt;/code&gt; 의 사용하십시오 &lt;a href=&quot;https://github.com/webpack-contrib/webpack-hot-middleware&quot;&gt; &lt;code&gt;webpack-hot-middleware&lt;/code&gt; &lt;/a&gt; 사용자 정의 서버 또는 응용 프로그램에 HMR 수 있도록 패키지를.</target>
        </trans-unit>
        <trans-unit id="257b41da17181f717f34d7e9b4aabec6c65516d5" translate="yes" xml:space="preserve">
          <source>If you use &lt;code&gt;&amp;lt;custom-elements&amp;gt;&lt;/code&gt;, and lots of them make use of a &lt;code&gt;custom-src&lt;/code&gt; attribute, you don't have to specify each combination &lt;code&gt;&amp;lt;tag&amp;gt;:&amp;lt;attribute&amp;gt;&lt;/code&gt;: just specify an empty tag like &lt;code&gt;attrs=:custom-src&lt;/code&gt; and it will match every element.</source>
          <target state="translated">당신이 사용하는 경우 &lt;code&gt;&amp;lt;custom-elements&amp;gt;&lt;/code&gt; 그들, 그리고 제비를 사용하게 &lt;code&gt;custom-src&lt;/code&gt; 속성을 각 조합을 지정할 필요가 없습니다 &lt;code&gt;&amp;lt;tag&amp;gt;:&amp;lt;attribute&amp;gt;&lt;/code&gt; : 단지 같은 빈 태그 지정 &lt;code&gt;attrs=:custom-src&lt;/code&gt; 및 모든 요소와 일치합니다.</target>
        </trans-unit>
        <trans-unit id="deed18356d0598e516166163156081b7d79c7134" translate="yes" xml:space="preserve">
          <source>If you use &lt;code&gt;require.context&lt;/code&gt;, webpack will watch your entire directory. You will need to ignore files and/or directories so that unwanted changes will not trigger a rebuild.</source>
          <target state="translated">&lt;code&gt;require.context&lt;/code&gt; 를 사용 하면 webpack은 전체 디렉토리를 감시합니다. 원하지 않는 변경으로 인해 재 구축이 트리거되지 않도록 파일 및 / 또는 디렉토리를 무시해야합니다.</target>
        </trans-unit>
        <trans-unit id="c304a1dc248e202f2e6dc69866582fd83a6a3356" translate="yes" xml:space="preserve">
          <source>If you use JS styles without the [&lt;code&gt;postcss-js&lt;/code&gt;][postcss-js] parser, add the &lt;code&gt;exec&lt;/code&gt; option.</source>
          <target state="translated">[ &lt;code&gt;postcss-js&lt;/code&gt; ] [postcss-js] 파서 없이 JS 스타일을 사용하는 경우 &lt;code&gt;exec&lt;/code&gt; 옵션을 추가하십시오 .</target>
        </trans-unit>
        <trans-unit id="78690a89ba0564d3d44fca1bb4464526f2f7ae9e" translate="yes" xml:space="preserve">
          <source>If you use the CLI, make sure &lt;strong&gt;inline mode&lt;/strong&gt; is disabled.</source>
          <target state="translated">CLI를 사용하는 경우 &lt;strong&gt;인라인 모드&lt;/strong&gt; 가 비활성화되어 있는지 확인하십시오 .</target>
        </trans-unit>
        <trans-unit id="5d00a18ab3b862fed22864bf39fbac55c69b2279" translate="yes" xml:space="preserve">
          <source>If you use your own &lt;code&gt;minify&lt;/code&gt; function please read the &lt;code&gt;minify&lt;/code&gt; section for cache invalidation correctly.</source>
          <target state="translated">자체 &lt;code&gt;minify&lt;/code&gt; 기능 을 사용하는 경우 캐시 무효화에 대한 &lt;code&gt;minify&lt;/code&gt; 섹션을 올바르게 읽으십시오 .</target>
        </trans-unit>
        <trans-unit id="69b1cffee5ef172fb6a952e822c97a2074033171" translate="yes" xml:space="preserve">
          <source>If you use your own &lt;code&gt;minify&lt;/code&gt; function please read the &lt;code&gt;minify&lt;/code&gt; section for handling source maps correctly.</source>
          <target state="translated">자체 &lt;code&gt;minify&lt;/code&gt; 기능 을 사용하는 경우 소스 맵을 올바르게 처리하기위한 &lt;code&gt;minify&lt;/code&gt; 섹션을 읽으십시오 .</target>
        </trans-unit>
        <trans-unit id="968f1b8beb2b4018803cc4c72d20171f373867ca" translate="yes" xml:space="preserve">
          <source>If you want to add a directory to search in that takes precedence over &lt;code&gt;node_modules/&lt;/code&gt;:</source>
          <target state="translated">검색 할 디렉토리를 추가하려면 &lt;code&gt;node_modules/&lt;/code&gt; 보다 우선합니다 .</target>
        </trans-unit>
        <trans-unit id="4536a1d96e062d79005d6ef15707ef6a91b0e0c2" translate="yes" xml:space="preserve">
          <source>If you want to change the behavior according to the &lt;strong&gt;mode&lt;/strong&gt; variable inside the &lt;em&gt;webpack.config.js&lt;/em&gt;, you have to export a function instead of an object:</source>
          <target state="translated">&lt;em&gt;webpack.config.js&lt;/em&gt; 내부의 &lt;strong&gt;모드&lt;/strong&gt; 변수 에 따라 동작을 변경하려면 객체 대신 함수를 내 &lt;em&gt;보내야&lt;/em&gt; 합니다.</target>
        </trans-unit>
        <trans-unit id="43705bee6375973feaf957218199905c3adacd95" translate="yes" xml:space="preserve">
          <source>If you want to edit the original Less files inside Chrome, &lt;a href=&quot;https://medium.com/@toolmantim/getting-started-with-css-sourcemaps-and-in-browser-sass-editing-b4daab987fb0&quot;&gt;there's a good blog post&lt;/a&gt;. The blog post is about Sass but it also works for Less.</source>
          <target state="translated">Chrome에서 원본 Less 파일을 편집하려면 &lt;a href=&quot;https://medium.com/@toolmantim/getting-started-with-css-sourcemaps-and-in-browser-sass-editing-b4daab987fb0&quot;&gt;좋은 블로그 게시물이&lt;/a&gt; 있습니다. 블로그 게시물은 Sass에 관한 것이지만 Less에도 적용됩니다.</target>
        </trans-unit>
        <trans-unit id="bfb20005c6ba18fa93c171fc19c4ab58f9ef6bbc" translate="yes" xml:space="preserve">
          <source>If you want to edit the original Sass files inside Chrome, &lt;a href=&quot;https://medium.com/@toolmantim/getting-started-with-css-sourcemaps-and-in-browser-sass-editing-b4daab987fb0&quot;&gt;there's a good blog post&lt;/a&gt;. Checkout &lt;a href=&quot;https://github.com/webpack-contrib/sass-loader/tree/master/test&quot;&gt;test/sourceMap&lt;/a&gt; for a running example.</source>
          <target state="translated">Chrome에서 원본 Sass 파일을 수정하려면 &lt;a href=&quot;https://medium.com/@toolmantim/getting-started-with-css-sourcemaps-and-in-browser-sass-editing-b4daab987fb0&quot;&gt;좋은 블로그 게시물이&lt;/a&gt; 있습니다. 체크 아웃 &lt;a href=&quot;https://github.com/webpack-contrib/sass-loader/tree/master/test&quot;&gt;테스트 / sourceMap&lt;/a&gt; 실행 예를 들어.</target>
        </trans-unit>
        <trans-unit id="3117df9404903a9d291836857e6647eadfed44c8" translate="yes" xml:space="preserve">
          <source>If you want to learn more about all the features and options that the &lt;code&gt;HtmlWebpackPlugin&lt;/code&gt; provides, then you should read up on it on the &lt;a href=&quot;https://github.com/jantimon/html-webpack-plugin&quot;&gt;&lt;code&gt;HtmlWebpackPlugin&lt;/code&gt;&lt;/a&gt; repo.</source>
          <target state="translated">&lt;code&gt;HtmlWebpackPlugin&lt;/code&gt; 이 제공 하는 모든 기능 및 옵션에 대한 자세한 내용을 보려면 &lt;a href=&quot;https://github.com/jantimon/html-webpack-plugin&quot;&gt; &lt;code&gt;HtmlWebpackPlugin&lt;/code&gt; &lt;/a&gt; 저장소 에서 해당 기능을 읽어보십시오 .</target>
        </trans-unit>
        <trans-unit id="97e1dec242e807347bf2fd93af746d1ce130a0f2" translate="yes" xml:space="preserve">
          <source>If you want to learn more about the inner workings of &lt;code&gt;package.json&lt;/code&gt;, then we recommend reading the &lt;a href=&quot;https://docs.npmjs.com/files/package.json&quot;&gt;npm documentation&lt;/a&gt;.</source>
          <target state="translated">당신의 내부 동작에 대한 자세한 내용을 원한다면 &lt;code&gt;package.json&lt;/code&gt; , 우리는 읽어 보시기 바랍니다 &lt;a href=&quot;https://docs.npmjs.com/files/package.json&quot;&gt;NPM 문서를&lt;/a&gt; .</target>
        </trans-unit>
        <trans-unit id="c12845e61292df537a108e68e63b76e33cc3a583" translate="yes" xml:space="preserve">
          <source>If you want to learn more about webpack's design, you can check out the &lt;a href=&quot;https://webpack.js.org/concepts&quot;&gt;basic concepts&lt;/a&gt; and &lt;a href=&quot;https://webpack.js.org/configuration&quot;&gt;configuration&lt;/a&gt; pages. Furthermore, the &lt;a href=&quot;https://webpack.js.org/api&quot;&gt;API&lt;/a&gt; section digs into the various interfaces webpack offers.</source>
          <target state="translated">웹팩 디자인에 대한 자세한 내용을 보려면 &lt;a href=&quot;https://webpack.js.org/concepts&quot;&gt;기본 개념&lt;/a&gt; 및 &lt;a href=&quot;https://webpack.js.org/configuration&quot;&gt;구성&lt;/a&gt; 페이지를 확인하십시오 . 또한 &lt;a href=&quot;https://webpack.js.org/api&quot;&gt;API&lt;/a&gt; 섹션은 웹팩이 제공하는 다양한 인터페이스를 다룹니다.</target>
        </trans-unit>
        <trans-unit id="2c4a2b3891ac41e2957230fe54b901d08e44f7a0" translate="yes" xml:space="preserve">
          <source>If you want to prepend Sass code before the actual entry file, you can set the &lt;code&gt;data&lt;/code&gt; option. In this case, the sass-loader will not override the &lt;code&gt;data&lt;/code&gt; option but just append the entry's content. This is especially useful when some of your Sass variables depend on the environment:</source>
          <target state="translated">실제 입력 파일 앞에 Sass 코드를 추가하려면 &lt;code&gt;data&lt;/code&gt; 옵션을 설정할 수 있습니다 . 이 경우 sass-loader는 &lt;code&gt;data&lt;/code&gt; 옵션을 무시하지 않고 항목의 내용 만 추가합니다. 이것은 Sass 변수 중 일부가 환경에 의존 할 때 특히 유용합니다.</target>
        </trans-unit>
        <trans-unit id="692a4cb93a9eaa0dd0bfc814d936beb18b2c98b8" translate="yes" xml:space="preserve">
          <source>If you want to process styles written in JavaScript, use the [postcss-js] parser.</source>
          <target state="translated">JavaScript로 작성된 스타일을 처리하려면 [postcss-js] 파서를 사용하십시오.</target>
        </trans-unit>
        <trans-unit id="cfd2b0a995875fef1de386a42151485fa10f8038" translate="yes" xml:space="preserve">
          <source>If you want to proxy multiple, specific paths to the same target, you can use an array of one or more objects with a &lt;code&gt;context&lt;/code&gt; property:</source>
          <target state="translated">동일한 대상에 대한 여러 특정 경로를 프록시하려는 경우 &lt;code&gt;context&lt;/code&gt; 특성 이있는 하나 이상의 오브젝트 배열을 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="8144f66e01c46baa3b7218d3b20c9b6ffb372686" translate="yes" xml:space="preserve">
          <source>If you want to show warnings as well as errors:</source>
          <target state="translated">오류뿐만 아니라 경고도 표시하려면 다음을 수행하십시오.</target>
        </trans-unit>
        <trans-unit id="bc2ffc5654813a1f51c3c4fe161d20c76df425a5" translate="yes" xml:space="preserve">
          <source>If you want to use a custom configuration for this plugin in &lt;a href=&quot;../concepts/mode#mode-development&quot;&gt;development mode&lt;/a&gt;, make sure to disable the default one. I.e. set &lt;code&gt;devtool: false&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;../concepts/mode#mode-development&quot;&gt;개발 모드&lt;/a&gt; 에서이 플러그인에 대한 사용자 정의 구성 을 사용하려면 기본 플러그인 을 사용 안함으로 설정하십시오. 즉 &lt;code&gt;devtool: false&lt;/code&gt; 설정 하십시오 .</target>
        </trans-unit>
        <trans-unit id="8ac1da0960780023da702e64f85c514373ee439d" translate="yes" xml:space="preserve">
          <source>If you would like to know more about how Hot Module Replacement works, we recommend you read the &lt;a href=&quot;hot-module-replacement&quot;&gt;Hot Module Replacement&lt;/a&gt; guide.</source>
          <target state="translated">핫 모듈 교체 작동 방식에 대한 자세한 내용은 &lt;a href=&quot;hot-module-replacement&quot;&gt;핫 모듈 교체&lt;/a&gt; 안내서를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="7b101f9e29bfabd0203dfc680c95c85731c80c8a" translate="yes" xml:space="preserve">
          <source>If you'd like to transpile the contents of your element's &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; block you can &lt;a href=&quot;../configuration/module#rule-use&quot;&gt;chain an additional loader&lt;/a&gt;.</source>
          <target state="translated">요소의 &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; 블록 의 내용을 변환하려면 &lt;a href=&quot;../configuration/module#rule-use&quot;&gt;추가 로더를 연결하면&lt;/a&gt; 됩니다.</target>
        </trans-unit>
        <trans-unit id="40478936be89404f1926380780d619d3713bb5e5" translate="yes" xml:space="preserve">
          <source>If you're &lt;a href=&quot;development#using-webpack-dev-middleware&quot;&gt;using &lt;code&gt;webpack-dev-middleware&lt;/code&gt;&lt;/a&gt;, check out the &lt;a href=&quot;https://github.com/webpack-contrib/webpack-hot-middleware&quot;&gt;&lt;code&gt;webpack-hot-middleware&lt;/code&gt;&lt;/a&gt; package to enable HMR on your custom dev server.</source>
          <target state="translated">이 경우 &lt;a href=&quot;development#using-webpack-dev-middleware&quot;&gt;사용 &lt;code&gt;webpack-dev-middleware&lt;/code&gt; &lt;/a&gt; 의 체크 아웃 &lt;a href=&quot;https://github.com/webpack-contrib/webpack-hot-middleware&quot;&gt; &lt;code&gt;webpack-hot-middleware&lt;/code&gt; &lt;/a&gt; 사용자 정의 dev에 서버에 HMR 수 있도록 패키지를.</target>
        </trans-unit>
        <trans-unit id="433f6609aab5593eb53510cc1a09e7e1d9a068e3" translate="yes" xml:space="preserve">
          <source>If you're having trouble, navigating to the &lt;code&gt;/webpack-dev-server&lt;/code&gt; route will show where files are served. For example, &lt;code&gt;http://localhost:9000/webpack-dev-server&lt;/code&gt;.</source>
          <target state="translated">문제가 발생하면 &lt;code&gt;/webpack-dev-server&lt;/code&gt; 경로로 이동하면 파일이 제공되는 위치가 표시됩니다. 예를 들어, &lt;code&gt;http://localhost:9000/webpack-dev-server&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="a6c4be9e29950c4aac888fe42e7fa088c7f4db54" translate="yes" xml:space="preserve">
          <source>If you're just generating CSS without passing it to the css-loader, it must be relative to your web root.</source>
          <target state="translated">CSS를 css-loader로 전달하지 않고 CSS를 생성하는 경우 웹 루트와 관련이 있어야합니다.</target>
        </trans-unit>
        <trans-unit id="955fcffcabfc468fe69038636f0fedc69977e502" translate="yes" xml:space="preserve">
          <source>If you're using a library like &lt;a href=&quot;https://reactjs.org/&quot;&gt;&lt;code&gt;react&lt;/code&gt;&lt;/a&gt;, you should actually see a significant drop in bundle size after adding this plugin. Also note that any of our local &lt;code&gt;/src&lt;/code&gt; code can key off of this as well, so the following check would be valid:</source>
          <target state="translated">&lt;a href=&quot;https://reactjs.org/&quot;&gt; &lt;code&gt;react&lt;/code&gt; &lt;/a&gt; 와 같은 라이브러리를 사용하는 경우 실제로이 플러그인을 추가 한 후 번들 크기가 크게 줄어 듭니다. 또한 로컬 &lt;code&gt;/src&lt;/code&gt; 코드 중 하나 라도이 키를 사용할 수 있으므로 다음 확인이 유효합니다.</target>
        </trans-unit>
        <trans-unit id="f4d7ea6782c3b0d78cacf60b4faecfbb8ec82c1c" translate="yes" xml:space="preserve">
          <source>If you're using dev-server through the Node.js API, the options in &lt;code&gt;devServer&lt;/code&gt; will be ignored. Pass the options as a second parameter instead: &lt;code&gt;new WebpackDevServer(compiler, {...})&lt;/code&gt;. &lt;a href=&quot;https://github.com/webpack/webpack-dev-server/tree/master/examples/api/simple&quot;&gt;See here&lt;/a&gt; for an example of how to use webpack-dev-server through the Node.js API.</source>
          <target state="translated">Node.js API를 통해 dev-server를 사용하는 경우 &lt;code&gt;devServer&lt;/code&gt; 의 옵션 이 무시됩니다. &lt;code&gt;new WebpackDevServer(compiler, {...})&lt;/code&gt; 대신 옵션을 두 번째 매개 변수로 전달하십시오 . Node.js API를 통해 webpack-dev-server를 사용하는 방법에 대한 예제는 &lt;a href=&quot;https://github.com/webpack/webpack-dev-server/tree/master/examples/api/simple&quot;&gt;여기&lt;/a&gt; 를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="473ca25b69608d4b3b3537758f74fa69dcd408bc" translate="yes" xml:space="preserve">
          <source>If you're using npm 5, you'll probably also see a &lt;code&gt;package-lock.json&lt;/code&gt; file in your directory.</source>
          <target state="translated">npm 5를 사용하는 경우 디렉토리에 &lt;code&gt;package-lock.json&lt;/code&gt; 파일도 있습니다.</target>
        </trans-unit>
        <trans-unit id="f9244edb3545b88e9adda0700b59345bdd1ee032" translate="yes" xml:space="preserve">
          <source>If you're using webpack v4 or later, you'll need to install a &lt;a href=&quot;../api/cli&quot;&gt;CLI&lt;/a&gt;.</source>
          <target state="translated">webpack v4 이상을 사용하는 경우 &lt;a href=&quot;../api/cli&quot;&gt;CLI&lt;/a&gt; 를 설치해야합니다 .</target>
        </trans-unit>
        <trans-unit id="1f854e87809cd03a2c329f4b3b53db2652e6fdb8" translate="yes" xml:space="preserve">
          <source>If you've been following the guides from the start, you will now have a small project that shows &quot;Hello webpack&quot;. Now let's try to incorporate some other assets, like images, to see how they can be handled.</source>
          <target state="translated">처음부터 가이드를 따랐다면, &quot;Hello webpack&quot;을 보여주는 작은 프로젝트가 생겼습니다. 이제 이미지와 같은 다른 자산을 통합하여 처리 방법을 살펴 보겠습니다.</target>
        </trans-unit>
        <trans-unit id="376dc09bff1bba9f0948a35a773edd37bbd4461e" translate="yes" xml:space="preserve">
          <source>If you've been following the guides, you should have a solid understanding of some of the webpack basics. Before we continue, let's look into setting up a development environment to make our lives a little easier.</source>
          <target state="translated">가이드를 따른다면 일부 웹팩 기본 사항을 제대로 이해해야합니다. 계속하기 전에 인생을 좀 더 편하게 만들기 위해 개발 환경을 설정해 봅시다.</target>
        </trans-unit>
        <trans-unit id="1a34d4c2e1eb1252875beb018564620f41e7cd46" translate="yes" xml:space="preserve">
          <source>If your code did have some side effects though, an array can be provided instead:</source>
          <target state="translated">코드에 부작용이 있다면 대신 배열을 제공 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f24ea5311ede964cc4eb9a58bffeba73c5319159" translate="yes" xml:space="preserve">
          <source>If your configuration creates more than a single &quot;chunk&quot; (as with multiple entry points or when using plugins like CommonsChunkPlugin), you should use &lt;a href=&quot;../configuration/output#output-filename&quot;&gt;substitutions&lt;/a&gt; to ensure that each file has a unique name.</source>
          <target state="translated">구성이 여러 개의 진입 점을 사용하거나 CommonsChunkPlugin과 같은 플러그인을 사용할 때와 같이 하나 이상의 &quot;청크&quot;를 작성하는 경우 &lt;a href=&quot;../configuration/output#output-filename&quot;&gt;대체&lt;/a&gt; 를 사용하여 각 파일의 이름이 고유해야합니다.</target>
        </trans-unit>
        <trans-unit id="c59d1a7b49cf233fef4246ce4878b9aa5af8c8e9" translate="yes" xml:space="preserve">
          <source>If your project structure is as follows -</source>
          <target state="translated">프로젝트 구조가 다음과 같은 경우-</target>
        </trans-unit>
        <trans-unit id="639afc9455bf507238e1acce0c048d9111fee986" translate="yes" xml:space="preserve">
          <source>If, for one reason or another, you need to extract CSS as a plain string resource (i.e. not wrapped in a JS module) you might want to check out the &lt;a href=&quot;https://github.com/peerigon/extract-loader&quot;&gt;extract-loader&lt;/a&gt;. It's useful when you, for instance, need to post process the CSS as a string.</source>
          <target state="translated">어떤 이유로 든 CSS를 일반 문자열 자원으로 추출해야하는 경우 (즉, JS 모듈로 랩핑되지 않은 경우) &lt;a href=&quot;https://github.com/peerigon/extract-loader&quot;&gt;extract-loader&lt;/a&gt; 를 체크 아웃 할 수 있습니다 . 예를 들어 CSS를 문자열로 포스트 프로세스해야 할 때 유용합니다.</target>
        </trans-unit>
        <trans-unit id="be4d8e6b8fcf3dfa1e1e239c21e1dc5cb4ba7a79" translate="yes" xml:space="preserve">
          <source>Ignore Moment Locales</source>
          <target state="translated">순간 로케일 무시</target>
        </trans-unit>
        <trans-unit id="a435148a01556fdc54ef2de21f7dd203f7ffae42" translate="yes" xml:space="preserve">
          <source>Ignore the specified files, i.e. those matching the provided paths or regular expressions, while in &lt;a href=&quot;../configuration/watch&quot;&gt;watch mode&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../configuration/watch&quot;&gt;감시 모드&lt;/a&gt; 에서 지정된 파일, 즉 제공된 경로 또는 정규식과 일치하는 파일은 무시하십시오 .</target>
        </trans-unit>
        <trans-unit id="c3794c06b693b8264fac92b3e7af27c42a0942c6" translate="yes" xml:space="preserve">
          <source>IgnorePlugin</source>
          <target state="translated">IgnorePlugin</target>
        </trans-unit>
        <trans-unit id="9fb0b9dff04d0a62760c3fff33ad7543f76cde23" translate="yes" xml:space="preserve">
          <source>Imagine that the server is running under &lt;code&gt;http://localhost:8080&lt;/code&gt; and &lt;code&gt;output.filename&lt;/code&gt; is set to &lt;code&gt;bundle.js&lt;/code&gt;. By default the &lt;code&gt;publicPath&lt;/code&gt; is &lt;code&gt;&quot;/&quot;&lt;/code&gt;, so your bundle is available as &lt;code&gt;http://localhost:8080/bundle.js&lt;/code&gt;.</source>
          <target state="translated">서버에서 실행되는 것을 상상해 &lt;code&gt;http://localhost:8080&lt;/code&gt; 및 &lt;code&gt;output.filename&lt;/code&gt; 이 설정되어 &lt;code&gt;bundle.js&lt;/code&gt; . 기본적으로 &lt;code&gt;publicPath&lt;/code&gt; 는 &lt;code&gt;&quot;/&quot;&lt;/code&gt; 이므로 번들은 &lt;code&gt;http://localhost:8080/bundle.js&lt;/code&gt; 로 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="f0cf4b0beaddcac14c35d71c0d46cfc1fd8eba33" translate="yes" xml:space="preserve">
          <source>Import (or &lt;code&gt;require&lt;/code&gt;) the target file(s) in one of the bundle's files:</source>
          <target state="translated">번들 파일 중 하나에서 대상 파일을 가져 오거나 &lt;code&gt;require&lt;/code&gt; 합니다.</target>
        </trans-unit>
        <trans-unit id="08454e30a8e2f79f5da7237c81da8a989d26ead0" translate="yes" xml:space="preserve">
          <source>Imported By Multiple Other Module Groups</source>
          <target state="translated">여러 다른 모듈 그룹에서 가져 오기</target>
        </trans-unit>
        <trans-unit id="d02ddeadb4764ce766326f1cbeb008729d6153c6" translate="yes" xml:space="preserve">
          <source>Imported By Non Import</source>
          <target state="translated">비 수입으로 가져 오기</target>
        </trans-unit>
        <trans-unit id="539edcd7d5dd1d51f7865c8bc1317fee010277e4" translate="yes" xml:space="preserve">
          <source>Imported From Other Chunk</source>
          <target state="translated">다른 청크에서 가져 오기</target>
        </trans-unit>
        <trans-unit id="5b9034dc51835388208edea073d26717ae663834" translate="yes" xml:space="preserve">
          <source>Imported With &lt;code&gt;import()&lt;/code&gt;</source>
          <target state="translated">으로 수입 &lt;code&gt;import()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="fd2f621378f748feef72292689f57fd2641f07c9" translate="yes" xml:space="preserve">
          <source>Imported modules are initialized for each runtime chunk separately, so if you include multiple entry points on a page, beware of this behavior. You will probably want to set it to &lt;code&gt;single&lt;/code&gt; or use another configuration that allows you to only have one runtime instance.</source>
          <target state="translated">가져온 모듈은 각 런타임 청크마다 별도로 초기화되므로 페이지에 여러 개의 진입 점을 포함하는 경우이 동작에주의하십시오. &lt;code&gt;single&lt;/code&gt; 인스턴스 로 설정 하거나 하나의 런타임 인스턴스 만 가질 수있는 다른 구성을 사용하려고합니다.</target>
        </trans-unit>
        <trans-unit id="96788976db605557505d68fac01ff154a7693417" translate="yes" xml:space="preserve">
          <source>Imported value is instantiable, just a decorated &lt;code&gt;Worker&lt;/code&gt;</source>
          <target state="translated">수입 된 가치는 단지 장식 가능한 &lt;code&gt;Worker&lt;/code&gt; 일뿐</target>
        </trans-unit>
        <trans-unit id="ec5e30b24de03faf9d94e192aaa57d42cbc2571e" translate="yes" xml:space="preserve">
          <source>Importing Other Assets</source>
          <target state="translated">다른 자산 가져 오기</target>
        </trans-unit>
        <trans-unit id="e42328ac01cd03a47978f064c93b392caf3861f0" translate="yes" xml:space="preserve">
          <source>Imports</source>
          <target state="translated">Imports</target>
        </trans-unit>
        <trans-unit id="6f93eaa8d0cbf9454a5cfafcab9af0120a82c0d2" translate="yes" xml:space="preserve">
          <source>In &lt;a href=&quot;https://en.wikipedia.org/wiki/Modular_programming&quot;&gt;modular programming&lt;/a&gt;, developers break programs up into discrete chunks of functionality called a &lt;em&gt;module&lt;/em&gt;.</source>
          <target state="translated">에서 &lt;a href=&quot;https://en.wikipedia.org/wiki/Modular_programming&quot;&gt;모듈 프로그래밍&lt;/a&gt; 개발자는 전화 기능 이산 덩어리로 프로그램을 중단 &lt;em&gt;모듈&lt;/em&gt; .</target>
        </trans-unit>
        <trans-unit id="65eccb467c3a0bedb1dc45797bad51730c3be1e7" translate="yes" xml:space="preserve">
          <source>In &lt;code&gt;webpack.common.js&lt;/code&gt;, we now have setup our &lt;code&gt;entry&lt;/code&gt; and &lt;code&gt;output&lt;/code&gt; configuration and we've included any plugins that are required for both environments. In &lt;code&gt;webpack.dev.js&lt;/code&gt;, we've set &lt;code&gt;mode&lt;/code&gt; to &lt;code&gt;development&lt;/code&gt;. Also, we've added the recommended &lt;code&gt;devtool&lt;/code&gt; for that environment (strong source mapping), as well as our simple &lt;code&gt;devServer&lt;/code&gt; configuration. Finally, in &lt;code&gt;webpack.prod.js&lt;/code&gt;,&lt;code&gt;mode&lt;/code&gt; is set to &lt;code&gt;production&lt;/code&gt; which loads &lt;code&gt;UglifyJSPlugin&lt;/code&gt; which was first introduced by the &lt;a href=&quot;tree-shaking&quot;&gt;tree shaking&lt;/a&gt; guide.</source>
          <target state="translated">에서 &lt;code&gt;webpack.common.js&lt;/code&gt; , 우리는 지금 설치 우리가 &lt;code&gt;entry&lt;/code&gt; 및 &lt;code&gt;output&lt;/code&gt; 구성을 우리는 모두 환경에 필요한 모든 플러그인을 포함 시켰습니다. 에서 &lt;code&gt;webpack.dev.js&lt;/code&gt; , 우리가 설정 한 &lt;code&gt;mode&lt;/code&gt; 로 &lt;code&gt;development&lt;/code&gt; . 또한 간단한 &lt;code&gt;devServer&lt;/code&gt; 구성 뿐만 아니라 해당 환경에 권장되는 &lt;code&gt;devtool&lt;/code&gt; (강력한 소스 매핑)을 추가했습니다 . 마지막으로 &lt;code&gt;webpack.prod.js&lt;/code&gt; 에서 &lt;code&gt;mode&lt;/code&gt; 는 &lt;code&gt;production&lt;/code&gt; 으로 설정되어 &lt;a href=&quot;tree-shaking&quot;&gt;트리 흔들림&lt;/a&gt; 안내서에 의해 처음 소개 된 &lt;code&gt;UglifyJSPlugin&lt;/code&gt; 을 로드합니다 .</target>
        </trans-unit>
        <trans-unit id="14d519ddcc60d79f99ddd5974173d9985e991418" translate="yes" xml:space="preserve">
          <source>In Aggressive Bundle Mode, a file can only appear in a single output chunk. Use the &lt;a href=&quot;commons-chunk-plugin&quot;&gt;Commons Chunk Plugin&lt;/a&gt; to split duplicated files into a single output chunk.</source>
          <target state="translated">공격적 번들 모드에서는 파일이 단일 출력 청크에만 나타날 수 있습니다. &lt;a href=&quot;commons-chunk-plugin&quot;&gt;Commons Chunk Plugin&lt;/a&gt; 을 사용하여 복제 된 파일을 단일 출력 청크로 분할하십시오.</target>
        </trans-unit>
        <trans-unit id="b937b6405cd612989b9db35b6a35c91ef79d75f4" translate="yes" xml:space="preserve">
          <source>In Multiple Chunks</source>
          <target state="translated">여러 덩어리에서</target>
        </trans-unit>
        <trans-unit id="ea5f4aa34c4be9c5a704b006300ca9419fe4a078" translate="yes" xml:space="preserve">
          <source>In a 100% ESM module world, identifying side effects is straightforward. However, we aren't there just yet, so in the mean time it's necessary to provide hints to webpack's compiler on the &quot;pureness&quot; of your code.</source>
          <target state="translated">100 % ESM 모듈 세계에서 부작용을 식별하는 것은 간단합니다. 그러나 우리는 아직 존재하지 않으므로 그 동안 코드의 &quot;순도&quot;에 대한 힌트를 웹팩의 컴파일러에 제공해야합니다.</target>
        </trans-unit>
        <trans-unit id="ac21d594ec06be5d523d2e717225eca39f697e30" translate="yes" xml:space="preserve">
          <source>In a Module</source>
          <target state="translated">모듈에서</target>
        </trans-unit>
        <trans-unit id="1e9a8c580cf3308262a0c6136b0859d06aae9640" translate="yes" xml:space="preserve">
          <source>In a Rule the properties &lt;a href=&quot;#rule-test&quot;&gt;&lt;code&gt;test&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#rule-include&quot;&gt;&lt;code&gt;include&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#rule-exclude&quot;&gt;&lt;code&gt;exclude&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#rule-resource&quot;&gt;&lt;code&gt;resource&lt;/code&gt;&lt;/a&gt; are matched with the resource and the property &lt;a href=&quot;#rule-issuer&quot;&gt;&lt;code&gt;issuer&lt;/code&gt;&lt;/a&gt; is matched with the issuer.</source>
          <target state="translated">규칙에서 특성 &lt;a href=&quot;#rule-test&quot;&gt; &lt;code&gt;test&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;#rule-include&quot;&gt; &lt;code&gt;include&lt;/code&gt; &lt;/a&gt; , &lt;a href=&quot;#rule-exclude&quot;&gt; &lt;code&gt;exclude&lt;/code&gt; &lt;/a&gt; 및 &lt;a href=&quot;#rule-resource&quot;&gt; &lt;code&gt;resource&lt;/code&gt; &lt;/a&gt; 이 자원 과 일치하고 특성 &lt;a href=&quot;#rule-issuer&quot;&gt; &lt;code&gt;issuer&lt;/code&gt; &lt;/a&gt; 가 발행자 와 일치합니다.</target>
        </trans-unit>
        <trans-unit id="4163b4c198a78f504b1ef17136f2514c27e67945" translate="yes" xml:space="preserve">
          <source>In a typical application or site built with webpack, there are three main types of code:</source>
          <target state="translated">웹팩으로 구축 된 일반적인 애플리케이션 또는 사이트에는 세 가지 주요 유형의 코드가 있습니다.</target>
        </trans-unit>
        <trans-unit id="9e7ec444f70c372f138fc14accb341e42525ff2a" translate="yes" xml:space="preserve">
          <source>In addition to normal assets, the compiler needs to emit an &quot;update&quot; to allow updating from previous version to the new version. The &quot;update&quot; consists of two parts:</source>
          <target state="translated">일반 자산 외에도 컴파일러는 이전 버전에서 새 버전으로 업데이트 할 수 있도록 &quot;업데이트&quot;를 내 보내야합니다. &quot;업데이트&quot;는 두 부분으로 구성됩니다.</target>
        </trans-unit>
        <trans-unit id="cc061cd021ca564464b785c5f393cbcaccfe4c92" translate="yes" xml:space="preserve">
          <source>In case this function is called, you should return undefined to avoid ambiguous loader results.</source>
          <target state="translated">이 함수가 호출되면 모호한 로더 결과를 피하기 위해 undefined를 반환해야합니다.</target>
        </trans-unit>
        <trans-unit id="244269a0cdb2ff21cb56e99e711a0b0c62fa93c1" translate="yes" xml:space="preserve">
          <source>In cases where the &lt;code&gt;publicPath&lt;/code&gt; of output files can't be known at compile time, it can be left blank and set dynamically at runtime in the entry file using the &lt;a href=&quot;https://stackoverflow.com/questions/12934929/what-are-free-variables&quot;&gt;free variable&lt;/a&gt;&lt;code&gt;__webpack_public_path__&lt;/code&gt;.</source>
          <target state="translated">출력 파일 의 &lt;code&gt;publicPath&lt;/code&gt; 를 컴파일 타임에 알 수없는 경우 빈 &lt;a href=&quot;https://stackoverflow.com/questions/12934929/what-are-free-variables&quot;&gt;변수로 &lt;/a&gt; &lt;code&gt;__webpack_public_path__&lt;/code&gt; 두고 비어있는 변수 __webpack_public_path__를 사용하여 입력 파일에서 런타임에 동적으로 설정할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="fb3d393902646f346128b9f248d1a7cbb745df73" translate="yes" xml:space="preserve">
          <source>In cases where the eventual &lt;code&gt;publicPath&lt;/code&gt; of output files isn't known at compile time, it can be left blank and set dynamically at runtime via the &lt;code&gt;__webpack_public_path__&lt;/code&gt; variable in the entry point file:</source>
          <target state="translated">출력 파일 의 최종 &lt;code&gt;publicPath&lt;/code&gt; 가 컴파일 시간에 알려지지 않은 경우, 입력 지점 파일 의 &lt;code&gt;__webpack_public_path__&lt;/code&gt; 변수를 통해 런타임에 공백으로 남겨두고 런타임에 동적으로 설정할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="ef8ee9d93555902b371b9272189cb28b1eb56c03" translate="yes" xml:space="preserve">
          <source>In combination with long term caching you may need to use the &lt;a href=&quot;https://github.com/soundcloud/chunk-manifest-webpack-plugin&quot;&gt;&lt;code&gt;ChunkManifestWebpackPlugin&lt;/code&gt;&lt;/a&gt; to avoid the vendor chunk changes. You should also use records to ensure stable module ids, e.g. using &lt;a href=&quot;named-modules-plugin&quot;&gt;&lt;code&gt;NamedModulesPlugin&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;hashed-module-ids-plugin&quot;&gt;&lt;code&gt;HashedModuleIdsPlugin&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">장기 캐싱과 함께 공급 업체 청크 변경을 피하기 위해 &lt;a href=&quot;https://github.com/soundcloud/chunk-manifest-webpack-plugin&quot;&gt; &lt;code&gt;ChunkManifestWebpackPlugin&lt;/code&gt; &lt;/a&gt; 을 사용해야 할 수도 있습니다 . 또한 &lt;a href=&quot;named-modules-plugin&quot;&gt; &lt;code&gt;NamedModulesPlugin&lt;/code&gt; &lt;/a&gt; 또는 &lt;a href=&quot;hashed-module-ids-plugin&quot;&gt; &lt;code&gt;HashedModuleIdsPlugin&lt;/code&gt; &lt;/a&gt; 과 같은 안정적인 모듈 ID를 보장하기 위해 레코드를 사용해야합니다 .</target>
        </trans-unit>
        <trans-unit id="7385ee2316c453fb9eb9ad7fd75fd4f793f00023" translate="yes" xml:space="preserve">
          <source>In contrast to &lt;a href=&quot;https://nodejs.org/api/modules.html&quot;&gt;Node.js modules&lt;/a&gt;, webpack &lt;em&gt;modules&lt;/em&gt; can express their &lt;em&gt;dependencies&lt;/em&gt; in a variety of ways. A few examples are:</source>
          <target state="translated">대조적으로 &lt;a href=&quot;https://nodejs.org/api/modules.html&quot;&gt;Node.js를 모듈&lt;/a&gt; , 웹팩 &lt;em&gt;모듈은&lt;/em&gt; 자신의 표현할 수있는 &lt;em&gt;종속성을&lt;/em&gt; 다양한 방법으로. 몇 가지 예는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="ed3712036a7771092fcf011e83d5f3c43c72b8eb" translate="yes" xml:space="preserve">
          <source>In development for example, we might have an &lt;code&gt;assets/&lt;/code&gt; folder that lives on the same level of our index page. This is fine, but what if we wanted to host all these static assets on a CDN in production?</source>
          <target state="translated">예를 들어, 개발 시, 동일한 수준의 색인 페이지에 존재하는 &lt;code&gt;assets/&lt;/code&gt; 폴더 가있을 수 있습니다 . 괜찮습니다. 그러나 이러한 정적 자산을 프로덕션 환경의 CDN에 호스팅하려면 어떻게해야합니까?</target>
        </trans-unit>
        <trans-unit id="8f04b3b962640e5fc5106b0f3fb9207860d577ee" translate="yes" xml:space="preserve">
          <source>In every other case, webpack prints out a set of stats showing bundle, chunk and timing details. Using this option the output can be a JSON object. This response is accepted by webpack's &lt;a href=&quot;https://webpack.github.io/analyse/&quot;&gt;analyse tool&lt;/a&gt;, or chrisbateman's &lt;a href=&quot;https://chrisbateman.github.io/webpack-visualizer/&quot;&gt;webpack-visualizer&lt;/a&gt;, or th0r's &lt;a href=&quot;https://github.com/webpack-contrib/webpack-bundle-analyzer&quot;&gt;webpack-bundle-analyzer&lt;/a&gt;. The analyse tool will take in the JSON and provide all the details of the build in graphical form.</source>
          <target state="translated">다른 모든 경우에, 웹팩은 번들, 청크 및 타이밍 세부 사항을 보여주는 통계 세트를 인쇄합니다. 이 옵션을 사용하면 출력이 JSON 객체가 될 수 있습니다. 이 응답은 webpack의 &lt;a href=&quot;https://webpack.github.io/analyse/&quot;&gt;분석 도구&lt;/a&gt; 또는 chrisbateman의 &lt;a href=&quot;https://chrisbateman.github.io/webpack-visualizer/&quot;&gt;webpack-visualizer&lt;/a&gt; 또는 th0r의 &lt;a href=&quot;https://github.com/webpack-contrib/webpack-bundle-analyzer&quot;&gt;webpack-bundle-analyzer&lt;/a&gt; 에서 승인 됩니다. 분석 도구는 JSON을 가져 와서 빌드의 모든 세부 사항을 그래픽 형식으로 제공합니다.</target>
        </trans-unit>
        <trans-unit id="6fa777b53033f85d1c3024d1e1df747d1ae22149" translate="yes" xml:space="preserve">
          <source>In general it's good practice to clean the &lt;code&gt;/dist&lt;/code&gt; folder before each build, so that only used files will be generated. Let's take care of that.</source>
          <target state="translated">일반적으로 각 빌드 전에 &lt;code&gt;/dist&lt;/code&gt; 폴더 를 정리하여 사용 된 파일 만 생성되도록하는 것이 좋습니다. 처리해 봅시다.</target>
        </trans-unit>
        <trans-unit id="497163f62c54912709b0f0838370a60d0c772b4d" translate="yes" xml:space="preserve">
          <source>In most cases, you probably would want to use &lt;code&gt;webpack-dev-server&lt;/code&gt;, but let's explore all of the above options.</source>
          <target state="translated">대부분의 경우 &lt;code&gt;webpack-dev-server&lt;/code&gt; 를 사용하고 싶을 수도 있지만 위의 모든 옵션을 살펴 보겠습니다.</target>
        </trans-unit>
        <trans-unit id="605c6d5c6f3020ca063b9b05df1f21c51a297e66" translate="yes" xml:space="preserve">
          <source>In order to &lt;code&gt;import&lt;/code&gt; a CSS file from within a JavaScript module, you need to install and add the &lt;a href=&quot;../loaders/style-loader&quot;&gt;style-loader&lt;/a&gt; and &lt;a href=&quot;../loaders/css-loader&quot;&gt;css-loader&lt;/a&gt; to your &lt;a href=&quot;../configuration/module&quot;&gt;&lt;code&gt;module&lt;/code&gt; configuration&lt;/a&gt;:</source>
          <target state="translated">JavaScript 모듈 내에서 CSS 파일 을 &lt;code&gt;import&lt;/code&gt; &lt;a href=&quot;../loaders/style-loader&quot;&gt;style-loader&lt;/a&gt; 및 &lt;a href=&quot;../loaders/css-loader&quot;&gt;css-loader&lt;/a&gt; 를 설치하고 &lt;a href=&quot;../configuration/module&quot;&gt; &lt;code&gt;module&lt;/code&gt; 구성에&lt;/a&gt; 추가해야 합니다 .</target>
        </trans-unit>
        <trans-unit id="a0010e55d5f007e43c6b8bb83f7330894c873584" translate="yes" xml:space="preserve">
          <source>In order to add a new hook to the compilation for other plugins to &lt;code&gt;tap&lt;/code&gt; into, simply &lt;code&gt;require&lt;/code&gt; the necessary hook class from &lt;code&gt;tapable&lt;/code&gt; and create one:</source>
          <target state="translated">다른 플러그인을 위해 편집에 새로운 후크를 추가하려면 &lt;code&gt;tap&lt;/code&gt; 으로, 단순히 &lt;code&gt;require&lt;/code&gt; 에서 필요한 후크 클래스를 &lt;code&gt;tapable&lt;/code&gt; 하나를 만들 :</target>
        </trans-unit>
        <trans-unit id="d402d94159e9b55e1f0512babfc935eb3d86a7cc" translate="yes" xml:space="preserve">
          <source>In order to make it easier to track down errors and warnings, JavaScript offers &lt;a href=&quot;http://blog.teamtreehouse.com/introduction-source-maps&quot;&gt;source maps&lt;/a&gt;, which maps your compiled code back to your original source code. If an error originates from &lt;code&gt;b.js&lt;/code&gt;, the source map will tell you exactly that.</source>
          <target state="translated">오류 및 경고를보다 쉽게 ​​추적 할 수 있도록 JavaScript는 컴파일 된 코드를 원래 소스 코드로 다시 매핑하는 &lt;a href=&quot;http://blog.teamtreehouse.com/introduction-source-maps&quot;&gt;소스 맵을&lt;/a&gt; 제공 합니다. &lt;code&gt;b.js&lt;/code&gt; 에서 오류가 발생 하면 소스 맵에서 정확히 알려줍니다.</target>
        </trans-unit>
        <trans-unit id="a980e74a18419863850bafb36bd3f4e9ee86f8e5" translate="yes" xml:space="preserve">
          <source>In order to obtain a single CSS file containing your application and vendor CSS, use the following &lt;code&gt;minChunks&lt;/code&gt; function together with &lt;a href=&quot;extract-text-webpack-plugin&quot;&gt;&lt;code&gt;ExtractTextPlugin&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">응용 프로그램 및 공급 업체 CSS가 포함 된 단일 CSS 파일을 얻으려면 &lt;a href=&quot;extract-text-webpack-plugin&quot;&gt; &lt;code&gt;ExtractTextPlugin&lt;/code&gt; &lt;/a&gt; 과 함께 다음 &lt;code&gt;minChunks&lt;/code&gt; 함수를 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="005b0ab749b2505005b6d8d506164f10b6fc4748" translate="yes" xml:space="preserve">
          <source>In order to use &lt;a href=&quot;http://lesscss.org/usage/#plugins&quot;&gt;plugins&lt;/a&gt;, simply set the &lt;code&gt;plugins&lt;/code&gt; option like this:</source>
          <target state="translated">&lt;a href=&quot;http://lesscss.org/usage/#plugins&quot;&gt;plugins&lt;/a&gt; 를 사용하려면 다음과 같이 &lt;code&gt;plugins&lt;/code&gt; 옵션을 설정하십시오 .</target>
        </trans-unit>
        <trans-unit id="5a1d560ceede023995a60b6d04bbed47efe9aa0f" translate="yes" xml:space="preserve">
          <source>In order to use a plugin, you need to &lt;code&gt;require()&lt;/code&gt; it and add it to the &lt;code&gt;plugins&lt;/code&gt; array. Most plugins are customizable through options. Since you can use a plugin multiple times in a config for different purposes, you need to create an instance of it by calling it with the &lt;code&gt;new&lt;/code&gt; operator.</source>
          <target state="translated">플러그인을 사용하려면 &lt;code&gt;require()&lt;/code&gt; 하고 &lt;code&gt;plugins&lt;/code&gt; 배열에 추가해야합니다 . 대부분의 플러그인은 옵션을 통해 사용자 정의 할 수 있습니다. 다른 목적으로 구성에서 플러그인을 여러 번 사용할 수 있으므로 &lt;code&gt;new&lt;/code&gt; 연산자를 사용하여 플러그인을 호출하여 인스턴스를 작성해야합니다 .</target>
        </trans-unit>
        <trans-unit id="3a3e7c6a8a852035484ef1b3e9a005fd31478315" translate="yes" xml:space="preserve">
          <source>In order to view the profile file:</source>
          <target state="translated">프로필 파일을 보려면</target>
        </trans-unit>
        <trans-unit id="ff8362e76f2b5492fce7b9ccc1912bcccbafff6a" translate="yes" xml:space="preserve">
          <source>In production</source>
          <target state="translated">생산 중</target>
        </trans-unit>
        <trans-unit id="72f9a01093882c0ed69ad1baf1c367b094548e7d" translate="yes" xml:space="preserve">
          <source>In some setups watching falls back to polling mode. With many watched files this can cause a lot of CPU load. In these cases you can increase the polling interval with &lt;code&gt;watchOptions.poll&lt;/code&gt;.</source>
          <target state="translated">일부 설정에서 시청은 폴링 모드로 돌아갑니다. 감시 된 파일이 많으면 CPU로드가 많이 발생할 수 있습니다. 이 경우 &lt;code&gt;watchOptions.poll&lt;/code&gt; 을 사용 하여 폴링 간격을 늘릴 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2df7af4577426d94f0e6d3d6e3b30f3a79f454bc" translate="yes" xml:space="preserve">
          <source>In the Application</source>
          <target state="translated">응용 프로그램에서</target>
        </trans-unit>
        <trans-unit id="4c36c113699aba5572e3c3366f135cc9ebfe837c" translate="yes" xml:space="preserve">
          <source>In the Compiler</source>
          <target state="translated">컴파일러에서</target>
        </trans-unit>
        <trans-unit id="46b2c15e3048e8556301ef6dfe4a9572c8aef2f3" translate="yes" xml:space="preserve">
          <source>In the Runtime</source>
          <target state="translated">런타임에서</target>
        </trans-unit>
        <trans-unit id="d18dc21c21fd18138c7c70becd88588cbe4ceb85" translate="yes" xml:space="preserve">
          <source>In the above example, webpack is unable to prune the branch, but Uglify does. However, if &lt;code&gt;FOO&lt;/code&gt; is defined using &lt;a href=&quot;define-plugin&quot;&gt;DefinePlugin&lt;/a&gt;, webpack will succeed.</source>
          <target state="translated">위의 예에서 웹팩은 분기를 제거 할 수 없지만 Uglify는 제거합니다. 그러나 &lt;a href=&quot;define-plugin&quot;&gt;DefinePlugin을&lt;/a&gt; 사용하여 &lt;code&gt;FOO&lt;/code&gt; 를 정의하면 webpack이 성공합니다.</target>
        </trans-unit>
        <trans-unit id="17698b5c62715c2b6b4a59f643935060bd44cc41" translate="yes" xml:space="preserve">
          <source>In the bundle, requiring the module then returns:</source>
          <target state="translated">번들에서 모듈을 요구하면 다음을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="ae53940b9dd2df93420909fe03fad81debfcde47" translate="yes" xml:space="preserve">
          <source>In the entry file:</source>
          <target state="translated">입력 파일에서 :</target>
        </trans-unit>
        <trans-unit id="f55075a4ab8b09e94e834b909e478abd70e9cd97" translate="yes" xml:space="preserve">
          <source>In the example above, the &lt;code&gt;html-webpack-plugin&lt;/code&gt; generates an HTML file for your application by injecting automatically all your generated bundles.</source>
          <target state="translated">위의 예에서 &lt;code&gt;html-webpack-plugin&lt;/code&gt; 은 생성 된 모든 번들을 자동으로 주입하여 애플리케이션의 HTML 파일을 생성합니다.</target>
        </trans-unit>
        <trans-unit id="2f51daa562f55687b724a0efd64ff04447dfe46c" translate="yes" xml:space="preserve">
          <source>In the example above, using &lt;code&gt;node&lt;/code&gt; webpack will compile for usage in a Node.js-like environment (uses Node.js &lt;code&gt;require&lt;/code&gt; to load chunks and not touch any built in modules like &lt;code&gt;fs&lt;/code&gt; or &lt;code&gt;path&lt;/code&gt;).</source>
          <target state="translated">위의 예에서 사용하는 &lt;code&gt;node&lt;/code&gt; 웹팩하는 환경 등 Node.js를-A의 사용을 위해 컴파일 (Node.js를 사용 할 &lt;code&gt;require&lt;/code&gt; 로드 청크와 같은 임의의 모듈에 내장 만지지 &lt;code&gt;fs&lt;/code&gt; 또는 &lt;code&gt;path&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="22afb88572026ab16bd5888974a20ef2312c8605" translate="yes" xml:space="preserve">
          <source>In the example above, we use the &lt;code&gt;output.filename&lt;/code&gt; and the &lt;code&gt;output.path&lt;/code&gt; properties to tell webpack the name of our bundle and where we want it to be emitted to. In case you're wondering about the path module being imported at the top, it is a core &lt;a href=&quot;https://nodejs.org/api/modules.html&quot;&gt;Node.js module&lt;/a&gt; that gets used to manipulate file paths.</source>
          <target state="translated">위의 예제에서 &lt;code&gt;output.filename&lt;/code&gt; 및 &lt;code&gt;output.path&lt;/code&gt; 속성을 사용하여 webpack에 번들 이름과 생성 위치를 알려줍니다. 맨 위에 경로 모듈을 가져 오는 것이 궁금 &lt;a href=&quot;https://nodejs.org/api/modules.html&quot;&gt;하다면&lt;/a&gt; 파일 경로를 조작하는 데 사용되는 핵심 Node.js 모듈 입니다.</target>
        </trans-unit>
        <trans-unit id="5b62d7eba36aafbd3cd87c1f43c49a07495d2f5f" translate="yes" xml:space="preserve">
          <source>In the example below JSX (React JavaScript Markup) and Babel are used to create a JSON Configuration that webpack can understand.</source>
          <target state="translated">아래 예에서 JSX (React JavaScript Markup) 및 Babel은 웹팩이 이해할 수있는 JSON 구성을 작성하는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="6c6e7a22eaacfa776abf6442cc14a2f231bbabc9" translate="yes" xml:space="preserve">
          <source>In the example:</source>
          <target state="translated">예제에서 :</target>
        </trans-unit>
        <trans-unit id="24104cad4e359ef92bd54d6d3c9f785430c41a74" translate="yes" xml:space="preserve">
          <source>In the example: &lt;code&gt;&quot;/abc/loader1.js?xyz!/abc/node_modules/loader2/index.js!/abc/resource.js?rrr&quot;&lt;/code&gt;</source>
          <target state="translated">예 : &lt;code&gt;&quot;/abc/loader1.js?xyz!/abc/node_modules/loader2/index.js!/abc/resource.js?rrr&quot;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="549510410fad46e6844e6f61a6e5cd14c5746c90" translate="yes" xml:space="preserve">
          <source>In the example: &lt;code&gt;&quot;/abc/resource.js&quot;&lt;/code&gt;</source>
          <target state="translated">예 : &lt;code&gt;&quot;/abc/resource.js&quot;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="014442bb269c275a88837c582651707ab9af07dd" translate="yes" xml:space="preserve">
          <source>In the example: &lt;code&gt;&quot;/abc/resource.js?rrr&quot;&lt;/code&gt;</source>
          <target state="translated">예를 들면 : &lt;code&gt;&quot;/abc/resource.js?rrr&quot;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="603091cff5544e1350f60fe39078169540d40e15" translate="yes" xml:space="preserve">
          <source>In the example: &lt;code&gt;&quot;?rrr&quot;&lt;/code&gt;</source>
          <target state="translated">예 : &lt;code&gt;&quot;?rrr&quot;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f1c90d3cdbfc14b3e5d704987b0b5002403d9bf7" translate="yes" xml:space="preserve">
          <source>In the example: &lt;code&gt;/abc&lt;/code&gt; because &lt;code&gt;resource.js&lt;/code&gt; is in this directory</source>
          <target state="translated">예 : &lt;code&gt;/abc&lt;/code&gt; 는 &lt;code&gt;resource.js&lt;/code&gt; 가이 디렉토리에 있기 때문에</target>
        </trans-unit>
        <trans-unit id="9b6e3fbc500c29545d36a97a130f9a78cbf437fb" translate="yes" xml:space="preserve">
          <source>In the example: in loader1: &lt;code&gt;0&lt;/code&gt;, in loader2: &lt;code&gt;1&lt;/code&gt;</source>
          <target state="translated">예 : loader1 : &lt;code&gt;0&lt;/code&gt; , loader2 : &lt;code&gt;1&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="605e7e29de2f12a581e9a4cdc1f438c21765e6c0" translate="yes" xml:space="preserve">
          <source>In the function you get access to the request, response and proxy options. It must return either &lt;code&gt;false&lt;/code&gt; or a path that will be served instead of continuing to proxy the request.</source>
          <target state="translated">이 기능에서는 요청, 응답 및 프록시 옵션에 액세스 할 수 있습니다. 요청을 계속 프록시 처리하는 대신 &lt;code&gt;false&lt;/code&gt; 또는 경로를 리턴해야합니다 .</target>
        </trans-unit>
        <trans-unit id="9ccb4220380a69de88bf58cef4be6c03e9cb4b0c" translate="yes" xml:space="preserve">
          <source>In the past, one of webpack&amp;rsquo;s trade-offs when bundling was that each module in your bundle would be wrapped in individual function closures. These wrapper functions made it slower for your JavaScript to execute in the browser. In comparison, tools like Closure Compiler and RollupJS &amp;lsquo;hoist&amp;rsquo; or concatenate the scope of all your modules into one closure and allow for your code to have a faster execution time in the browser.</source>
          <target state="translated">과거에는 번들로 묶을 때 웹팩의 단점 중 하나는 번들의 각 모듈이 개별 함수 클로저로 래핑되었다는 것입니다. 이러한 랩퍼 기능으로 인해 JavaScript가 브라우저에서 실행되는 속도가 느려졌습니다. 이에 비해 Closure Compiler 및 RollupJS '호이스트'와 같은 도구는 모든 모듈의 범위를 하나의 폐쇄로 연결하고 코드가 브라우저에서 더 빠르게 실행되도록합니다.</target>
        </trans-unit>
        <trans-unit id="39ab50af67bb23d98288ed625e40355073343a61" translate="yes" xml:space="preserve">
          <source>In this case any dependency named &lt;code&gt;jQuery&lt;/code&gt;, capitalized or not, or &lt;code&gt;$&lt;/code&gt; would be externalized.</source>
          <target state="translated">이 경우 &lt;code&gt;jQuery&lt;/code&gt; , 대문자 또는 &lt;code&gt;$&lt;/code&gt; 의 종속성은 외부화됩니다.</target>
        </trans-unit>
        <trans-unit id="fead69710bdd6ea463e6b61558b0e2f7c4a3abf1" translate="yes" xml:space="preserve">
          <source>In this case, all webpack features like importing non-Less files or aliasing won't work of course.</source>
          <target state="translated">이 경우 비 Less 파일 가져 오기 또는 앨리어싱과 같은 모든 웹팩 기능이 작동하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="5bf48ff4728092cd5f9c9689bc6d70e0f5abb931" translate="yes" xml:space="preserve">
          <source>In this case, the directory of the resource file where the &lt;code&gt;import&lt;/code&gt; or &lt;code&gt;require&lt;/code&gt; occurs is taken to be the context directory. The relative path specified in the &lt;code&gt;import/require&lt;/code&gt; is joined to this context path to produce the absolute path to the module.</source>
          <target state="translated">이 경우 &lt;code&gt;import&lt;/code&gt; 또는 &lt;code&gt;require&lt;/code&gt; 자원 파일의 디렉토리가 컨텍스트 디렉토리로 간주됩니다. &lt;code&gt;import/require&lt;/code&gt; 지정된 상대 경로 는이 컨텍스트 경로에 결합되어 모듈의 절대 경로를 생성합니다.</target>
        </trans-unit>
        <trans-unit id="012b39117961de4b87a4fd15687773628c9f61c0" translate="yes" xml:space="preserve">
          <source>In this case, you need the &lt;code&gt;library&lt;/code&gt; property to name your module:</source>
          <target state="translated">이 경우 모듈 이름을 지정 하려면 &lt;code&gt;library&lt;/code&gt; 속성 이 필요합니다 .</target>
        </trans-unit>
        <trans-unit id="713101c8c854ae5cd18d68f795dd0d2d0478ad9d" translate="yes" xml:space="preserve">
          <source>In this example the loader is configured to operator on a file name of &lt;code&gt;years-in-ms.js&lt;/code&gt;, execute the code, and store the result in the bundle as the result of the execution. This example passes &lt;code&gt;years&lt;/code&gt; as an &lt;code&gt;option&lt;/code&gt;, which corresponds to the &lt;code&gt;years&lt;/code&gt; parameter in the target module exported function:</source>
          <target state="translated">이 예제에서 로더는 &lt;code&gt;years-in-ms.js&lt;/code&gt; 파일 이름을 조작 하고 코드를 실행하며 결과를 실행 결과로 번들에 저장하도록 구성되어 있습니다. 이 예제는 &lt;code&gt;years&lt;/code&gt; 를 &lt;code&gt;option&lt;/code&gt; 으로 전달 하는데, 이는 대상 모듈 익스포트 된 함수 의 &lt;code&gt;years&lt;/code&gt; 매개 변수에 해당합니다.</target>
        </trans-unit>
        <trans-unit id="6f532a889a819f45497c5b35c1f39924b20cd994" translate="yes" xml:space="preserve">
          <source>In this example, there are implicit dependencies between the &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tags. Our &lt;code&gt;index.js&lt;/code&gt; file depends on &lt;code&gt;lodash&lt;/code&gt; being included in the page before it runs. This is because &lt;code&gt;index.js&lt;/code&gt; never explicitly declared a need for &lt;code&gt;lodash&lt;/code&gt;; it just assumes that the global variable &lt;code&gt;_&lt;/code&gt; exists.</source>
          <target state="translated">이 예에서는 &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; 태그 사이에 암시 적 종속성이 있습니다 . 우리의 &lt;code&gt;index.js&lt;/code&gt; 파일에 따라 &lt;code&gt;lodash&lt;/code&gt; 가 실행되기 전에 페이지에 포함된다. &lt;code&gt;index.js&lt;/code&gt; 가 &lt;code&gt;lodash&lt;/code&gt; 의 필요성을 명시 적으로 선언하지 않았기 때문입니다 . 전역 변수 &lt;code&gt;_&lt;/code&gt; 가 존재 한다고 가정 합니다.</target>
        </trans-unit>
        <trans-unit id="87879d9dd235c986c9cc31f2c39f0038514bfd2b" translate="yes" xml:space="preserve">
          <source>In this guide we'll dive into some of the best practices and utilities for building a production site or application.</source>
          <target state="translated">이 가이드에서는 프로덕션 사이트 또는 응용 프로그램을 구축하기위한 모범 사례 및 유틸리티에 대해 설명합니다.</target>
        </trans-unit>
        <trans-unit id="9b7f9036f4484c6e884395a9cc875374bac5fef6" translate="yes" xml:space="preserve">
          <source>In this mode, the compiler rewrites CommonJS modules and hoists require calls. Some modules are not compatible with this type of rewritting. In particular, hoisting will cause the following code to execute out of order:</source>
          <target state="translated">이 모드에서 컴파일러는 CommonJS 모듈을 다시 작성하고 호이스트에는 호출이 필요합니다. 일부 모듈은이 유형의 다시 쓰기와 호환되지 않습니다. 특히, 호이 스팅은 다음 코드가 순서대로 실행되지 않게합니다.</target>
        </trans-unit>
        <trans-unit id="7c8f046cd41700a29fca9f8d6c8e812aa51d26cb" translate="yes" xml:space="preserve">
          <source>In this setup, &lt;code&gt;index.js&lt;/code&gt; explicitly requires &lt;code&gt;lodash&lt;/code&gt; to be present, and binds it as &lt;code&gt;_&lt;/code&gt; (no global scope pollution). By stating what dependencies a module needs, webpack can use this information to build a dependency graph. It then uses the graph to generate an optimized bundle where scripts will be executed in the correct order.</source>
          <target state="translated">이 설정에서 &lt;code&gt;index.js&lt;/code&gt; 는 &lt;code&gt;lodash&lt;/code&gt; 를 명시 적으로 요구 하고이를 &lt;code&gt;_&lt;/code&gt; (전역 스코프 오염 없음) 로 바인드합니다 . 웹팩은 모듈에 필요한 종속성을 지정함으로써이 정보를 사용하여 종속성 그래프를 작성할 수 있습니다. 그런 다음 그래프를 사용하여 스크립트가 올바른 순서로 실행될 최적화 된 번들을 생성합니다.</target>
        </trans-unit>
        <trans-unit id="fa5294f1161b6b9bdd73411206fcd8021000dbe9" translate="yes" xml:space="preserve">
          <source>In webpack-dev-server and webpack-dev-middleware watch mode is enabled by default.</source>
          <target state="translated">webpack-dev-server 및 webpack-dev-middleware 감시 모드는 기본적으로 활성화되어 있습니다.</target>
        </trans-unit>
        <trans-unit id="b11f118011bd6b4042e5ab1684ccae363c0c2e8f" translate="yes" xml:space="preserve">
          <source>In your &lt;code&gt;webpack.config.js&lt;/code&gt;:</source>
          <target state="translated">당신에 &lt;code&gt;webpack.config.js&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="29d7d653c6bffb1e041df2f88cb76c81ff4e16d3" translate="yes" xml:space="preserve">
          <source>In your nginx config file, add the following:</source>
          <target state="translated">nginx 구성 파일에서 다음을 추가하십시오.</target>
        </trans-unit>
        <trans-unit id="7fd60cce8e7156652fe436394f2f3965c3f483ec" translate="yes" xml:space="preserve">
          <source>In your webpack configuration</source>
          <target state="translated">웹팩 구성에서</target>
        </trans-unit>
        <trans-unit id="9feadfc2309af3ca6ee84eaeaa3e2ac04c4071ab" translate="yes" xml:space="preserve">
          <source>Include a &lt;code&gt;dependency&lt;/code&gt; without executing it. This can be used for optimizing the position of a module in the output chunks.</source>
          <target state="translated">실행하지 않고 &lt;code&gt;dependency&lt;/code&gt; 을 포함 시킵니다. 출력 청크에서 모듈의 위치를 ​​최적화하는 데 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="0b3db040d66020554278821eb081b1ce817c6df7" translate="yes" xml:space="preserve">
          <source>Include a comment with the request for every dependency</source>
          <target state="translated">모든 의존성에 대한 요청과 함께 의견을 포함</target>
        </trans-unit>
        <trans-unit id="e5cdb56d2da7e08fb827421683cfb0254911f36e" translate="yes" xml:space="preserve">
          <source>Include a minifier that supports dead code removal (e.g. the &lt;code&gt;UglifyJSPlugin&lt;/code&gt;).</source>
          <target state="translated">데드 코드 제거를 지원하는 &lt;code&gt;UglifyJSPlugin&lt;/code&gt; 포함하십시오 (예 : UglifyJSPlugin ).</target>
        </trans-unit>
        <trans-unit id="ca814e53a9dd65aa14e6e0164296b9d774d3b0a0" translate="yes" xml:space="preserve">
          <source>Incremental Builds</source>
          <target state="translated">증분 빌드</target>
        </trans-unit>
        <trans-unit id="c1a2c1982c5ff1a21f7c65e255870f6449ecf7b0" translate="yes" xml:space="preserve">
          <source>Indicate what parts of the module contain side effects. See &lt;a href=&quot;../guides/tree-shaking#mark-the-file-as-side-effect-free&quot;&gt;Tree Shaking&lt;/a&gt; for details.</source>
          <target state="translated">부작용이있는 모듈 부분을 나타냅니다. 자세한 내용은 &lt;a href=&quot;../guides/tree-shaking#mark-the-file-as-side-effect-free&quot;&gt;트리 쉐이킹&lt;/a&gt; 을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="977153eb29097b9cbd6c3737981648e7f07049ed" translate="yes" xml:space="preserve">
          <source>Indicates whether or not &lt;a href=&quot;../concepts/hot-module-replacement&quot;&gt;Hot Module Replacement&lt;/a&gt; is enabled and provides an interface to the process. See the &lt;a href=&quot;hot-module-replacement&quot;&gt;HMR API page&lt;/a&gt; for details.</source>
          <target state="translated">&lt;a href=&quot;../concepts/hot-module-replacement&quot;&gt;핫 모듈 교체&lt;/a&gt; 가 활성화되어 있는지 여부를 나타내며 프로세스에 대한 인터페이스를 제공합니다. 자세한 내용은 &lt;a href=&quot;hot-module-replacement&quot;&gt;HMR API 페이지&lt;/a&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="5ac4378abde8c184828abb5dec0ab1ffd86d5fa4" translate="yes" xml:space="preserve">
          <source>Initialize npm, install webpack and lodash:</source>
          <target state="translated">npm을 초기화하고 webpack 및 lodash를 설치하십시오.</target>
        </trans-unit>
        <trans-unit id="2e347f4ceb23a6d8637cc8028fda9ad8c7b7c47f" translate="yes" xml:space="preserve">
          <source>Inline</source>
          <target state="translated">Inline</target>
        </trans-unit>
        <trans-unit id="2b9768e0fd9050af20d23c888ce38299bcc390c8" translate="yes" xml:space="preserve">
          <source>Inline loaders and &lt;code&gt;!&lt;/code&gt; prefixes should not be used as they are non-standard. They may be use by loader generated code.</source>
          <target state="translated">인라인 로더와 &lt;code&gt;!&lt;/code&gt; 접두사는 비표준이므로 사용해서는 안됩니다. 로더 생성 코드에서 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="069d91be0bb38bcc8509b0b632375462f7798984" translate="yes" xml:space="preserve">
          <source>Inline mode is recommended for Hot Module Replacement as it includes an HMR trigger from the websocket. Polling mode can be used as an alternative, but requires an additional entry point, &lt;code&gt;'webpack/hot/poll?1000'&lt;/code&gt;.</source>
          <target state="translated">웹 소켓의 HMR 트리거가 포함되어 있으므로 핫 모듈 교체에는 인라인 모드가 권장됩니다. 폴링 모드를 대안으로 사용할 수 있지만 추가 진입 점 &lt;code&gt;'webpack/hot/poll?1000'&lt;/code&gt; 합니다.</target>
        </trans-unit>
        <trans-unit id="8cd5aa56fde3d0e8b6b54a587a7e6616c70e6aa0" translate="yes" xml:space="preserve">
          <source>Inlined</source>
          <target state="translated">Inlined</target>
        </trans-unit>
        <trans-unit id="61bbcbfa889da817407bf948fa239f50c645e934" translate="yes" xml:space="preserve">
          <source>Input type</source>
          <target state="translated">입력 유형</target>
        </trans-unit>
        <trans-unit id="abe22966b84c9739ce4870f1c88f989a12bcad0b" translate="yes" xml:space="preserve">
          <source>Inserts &lt;code&gt;&amp;lt;style&amp;gt;&amp;lt;/style&amp;gt;&lt;/code&gt; at the given position</source>
          <target state="translated">주어진 위치에 &lt;code&gt;&amp;lt;style&amp;gt;&amp;lt;/style&amp;gt;&lt;/code&gt; 삽입</target>
        </trans-unit>
        <trans-unit id="313dfd56f875dc4f47032f08f0f9225e6c848a34" translate="yes" xml:space="preserve">
          <source>Inserts &lt;code&gt;&amp;lt;style&amp;gt;&amp;lt;/style&amp;gt;&lt;/code&gt; into the given position</source>
          <target state="translated">삽입 &lt;code&gt;&amp;lt;style&amp;gt;&amp;lt;/style&amp;gt;&lt;/code&gt; 지정된 위치에</target>
        </trans-unit>
        <trans-unit id="fd6c3ebf7befca9f8208f86c76e4d4180303745c" translate="yes" xml:space="preserve">
          <source>Install</source>
          <target state="translated">Install</target>
        </trans-unit>
        <trans-unit id="c1594fb84f280667e3d8b24b257f4b352e1dd610" translate="yes" xml:space="preserve">
          <source>Install &lt;code&gt;tsconfig-paths&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;tsconfig-paths&lt;/code&gt; 를 설치하십시오 .</target>
        </trans-unit>
        <trans-unit id="c81b79df3c6448eae7c4f80428b54cd5692a17d7" translate="yes" xml:space="preserve">
          <source>Installation</source>
          <target state="translated">Installation</target>
        </trans-unit>
        <trans-unit id="236e68cda5bea970d83dd18f3dc71441b5713fca" translate="yes" xml:space="preserve">
          <source>Installing locally is what we recommend for most projects. This makes it easier to upgrade projects individually when breaking changes are introduced. Typically webpack is run via one or more &lt;a href=&quot;https://docs.npmjs.com/misc/scripts&quot;&gt;npm scripts&lt;/a&gt; which will look for a webpack installation in your local &lt;code&gt;node_modules&lt;/code&gt; directory:</source>
          <target state="translated">로컬 설치는 대부분의 프로젝트에 권장되는 것입니다. 따라서 주요 변경 사항이 도입 될 때 프로젝트를 개별적으로 업그레이드하기가 더 쉬워집니다. 일반적으로 webpack은 하나 이상의 &lt;a href=&quot;https://docs.npmjs.com/misc/scripts&quot;&gt;npm 스크립트&lt;/a&gt; 를 통해 실행되며 로컬 &lt;code&gt;node_modules&lt;/code&gt; 디렉토리 에서 webpack 설치를 찾습니다 .</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
