<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="rails">
    <body>
      <group id="rails">
        <trans-unit id="4fbef9bd60e793c768cb13c835edd22d428f5422" translate="yes" xml:space="preserve">
          <source>SendGrid</source>
          <target state="translated">SendGrid</target>
        </trans-unit>
        <trans-unit id="671a6fc1bffae1273f1c36845d96724d0463b25c" translate="yes" xml:space="preserve">
          <source>Sending Emails</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="023bd64921fc5c4ca44aad85331543272477b4fb" translate="yes" xml:space="preserve">
          <source>Sending Emails with Dynamic Delivery Options</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2dfd5dc62ac40b04320f91e24d72a02dd4b87d2d" translate="yes" xml:space="preserve">
          <source>Sending Emails without Template Rendering</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6af644a6a47122fee8047cd0a0ca4042f66564f" translate="yes" xml:space="preserve">
          <source>Sending Files</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0662ea4ce2ba05b7f07ad1199c4b10caa58025d" translate="yes" xml:space="preserve">
          <source>Sending Messages</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="304904f7f73f8740fbf7551b8629fe5a710c6942" translate="yes" xml:space="preserve">
          <source>Sending Multipart Emails</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e734bc1dc9c526b52a0a7b9eb2e199e81edc474a" translate="yes" xml:space="preserve">
          <source>Sending attachment in emails is easy:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5eb5279fa870f46ef7f94665716a33ad74791933" translate="yes" xml:space="preserve">
          <source>Sending mail</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="467de7aa4f29de633fe149fbdd34d2b0a8e517b2" translate="yes" xml:space="preserve">
          <source>Sends any console called in the instance of a new application up to the &lt;code&gt;console&lt;/code&gt; method defined in &lt;a href=&quot;railtie&quot;&gt;Rails::Railtie&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f9b15e619e28b361cdd6a2c2584f870ccc42501" translate="yes" xml:space="preserve">
          <source>Sends any generators called in the instance of a new application up to the &lt;code&gt;generators&lt;/code&gt; method defined in &lt;a href=&quot;railtie&quot;&gt;Rails::Railtie&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac34d16783936b238c687d91017978a8f8aff7b6" translate="yes" xml:space="preserve">
          <source>Sends any runner called in the instance of a new application up to the &lt;code&gt;runner&lt;/code&gt; method defined in &lt;a href=&quot;railtie&quot;&gt;Rails::Railtie&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac7050a5a843fe296d26e1728ab01e9c4843fdff" translate="yes" xml:space="preserve">
          <source>Sends the &lt;code&gt;isolate_namespace&lt;/code&gt; method up to the class method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af1acda14951ddcc3c4bf533c51e0650f733ca10" translate="yes" xml:space="preserve">
          <source>Sends the file. This uses a server-appropriate method (such as X-Sendfile) via the Rack::Sendfile middleware. The header to use is set via &lt;code&gt;config.action_dispatch.x_sendfile_header&lt;/code&gt;. Your server can also configure this for you by setting the X-Sendfile-Type header.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c81acedd1636118272244a9174c66bfd04e9807" translate="yes" xml:space="preserve">
          <source>Sends the given binary data to the browser. This method is similar to &lt;code&gt;render plain: data&lt;/code&gt;, but also allows you to specify whether the browser should display the response as a file attachment (i.e. in a download dialog) or as inline data. You may also set the content type, the file name, and other things.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="640bb98208eb306a7d289fd8a5accd0f8959703a" translate="yes" xml:space="preserve">
          <source>Sends the initializers to the &lt;code&gt;initializer&lt;/code&gt; method defined in the Rails::Initializable module. Each &lt;a href=&quot;application&quot;&gt;Rails::Application&lt;/a&gt; class has its own set of initializers, as defined by the Initializable module.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32c54a430fd5867681ac3eacaedd80815466ce8a" translate="yes" xml:space="preserve">
          <source>Separate Assets &amp;amp; Precompiling</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89282363da677473acdbf45f0831bde9f4d3b6c4" translate="yes" xml:space="preserve">
          <source>Serialization</source>
          <target state="translated">Serialization</target>
        </trans-unit>
        <trans-unit id="1ae9ec4f94fc1e332a7d794875aa89d6263a49d8" translate="yes" xml:space="preserve">
          <source>Serialization#serializable_hash</source>
          <target state="translated">Serialization#serializable_hash</target>
        </trans-unit>
        <trans-unit id="34f34cc81f01b9046f28247b46d6ae928812b3ac" translate="yes" xml:space="preserve">
          <source>Serialized attributes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="71796031218483adb9338df6ac1fe8ad1217e178" translate="yes" xml:space="preserve">
          <source>Serializers</source>
          <target state="translated">Serializers</target>
        </trans-unit>
        <trans-unit id="acd97503c1e742c5b2e7d5aa81efbf87413f746e" translate="yes" xml:space="preserve">
          <source>Serializers::JSON</source>
          <target state="translated">Serializers::JSON</target>
        </trans-unit>
        <trans-unit id="30c0ab84f370070d666699e1db35fc2149c216dc" translate="yes" xml:space="preserve">
          <source>Serializers::JSON#as_json</source>
          <target state="translated">Serializers::JSON#as_json</target>
        </trans-unit>
        <trans-unit id="303c7351e4bd1391578d307fbea6d4c90cf9b38a" translate="yes" xml:space="preserve">
          <source>Serializers::JSON#from_json</source>
          <target state="translated">Serializers::JSON#from_json</target>
        </trans-unit>
        <trans-unit id="1849bed613c75cec7dca36bee73720387ffdf24d" translate="yes" xml:space="preserve">
          <source>Serializers::ObjectSerializer</source>
          <target state="translated">Serializers::ObjectSerializer</target>
        </trans-unit>
        <trans-unit id="b3668e0a5cc2b2656066a5b4ed9d32727b0317c3" translate="yes" xml:space="preserve">
          <source>Serializers::ObjectSerializer#deserialize</source>
          <target state="translated">Serializers::ObjectSerializer#deserialize</target>
        </trans-unit>
        <trans-unit id="1043ee33db4467019debc8d2d3a0fd43113332a0" translate="yes" xml:space="preserve">
          <source>Serializers::ObjectSerializer#klass</source>
          <target state="translated">Serializers::ObjectSerializer#klass</target>
        </trans-unit>
        <trans-unit id="99feeeaacf0633dec4e751a1e629a8b07537e79e" translate="yes" xml:space="preserve">
          <source>Serializers::ObjectSerializer#serialize</source>
          <target state="translated">Serializers::ObjectSerializer#serialize</target>
        </trans-unit>
        <trans-unit id="9c203425b666d0cfc0e5ca8bff856911b5b12995" translate="yes" xml:space="preserve">
          <source>Serializers::ObjectSerializer#serialize?</source>
          <target state="translated">Serializers::ObjectSerializer#serialize?</target>
        </trans-unit>
        <trans-unit id="eb78dcf3dc299d68ee53c9d82c9d55a1e45b4167" translate="yes" xml:space="preserve">
          <source>Serializes a set of arguments. Intrinsic types that can safely be serialized without mutation are returned as-is. Arrays/Hashes are serialized element by element. All other types are serialized using GlobalID.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bdb11f87a4accfd6fc8cbd58291c823022552a4c" translate="yes" xml:space="preserve">
          <source>Serializes an argument to a JSON primitive type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a8391ce7046294d29680eaa5499f32752db78fe" translate="yes" xml:space="preserve">
          <source>Serializes the relation objects &lt;a href=&quot;../array&quot;&gt;Array&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89acb0a24aa1942f438c0a5b34d614c969e757bb" translate="yes" xml:space="preserve">
          <source>Server-Side Components</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05508b9c507ab98e227d02216c9bc8b51e920da1" translate="yes" xml:space="preserve">
          <source>Server-Side Concerns</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="230bddf618c88e66eb0f729f912f688ccbb1e384" translate="yes" xml:space="preserve">
          <source>Server::Base</source>
          <target state="translated">Server::Base</target>
        </trans-unit>
        <trans-unit id="675d63c3e91d3fdf37c5e158ddcc4c166911ed99" translate="yes" xml:space="preserve">
          <source>Server::Base#call</source>
          <target state="translated">Server::Base#call</target>
        </trans-unit>
        <trans-unit id="5af9fdc915a1f584d157d94b3b2bdd0292f72820" translate="yes" xml:space="preserve">
          <source>Server::Base#config</source>
          <target state="translated">Server::Base#config</target>
        </trans-unit>
        <trans-unit id="a25bc12894eb81674c9b6868bee6759e60a2319f" translate="yes" xml:space="preserve">
          <source>Server::Base#connection_identifiers</source>
          <target state="translated">Server::Base#connection_identifiers</target>
        </trans-unit>
        <trans-unit id="8d94a44ccc89b9583bf94c7ef4137e9540de6cc3" translate="yes" xml:space="preserve">
          <source>Server::Base#disconnect</source>
          <target state="translated">Server::Base#disconnect</target>
        </trans-unit>
        <trans-unit id="47a4d996d07b7b4f2de14dc1caf1c706ecffb97b" translate="yes" xml:space="preserve">
          <source>Server::Base#event_loop</source>
          <target state="translated">Server::Base#event_loop</target>
        </trans-unit>
        <trans-unit id="b2e792721f7f694c114f8f742714bed08f8fc2e9" translate="yes" xml:space="preserve">
          <source>Server::Base#mutex</source>
          <target state="translated">Server::Base#mutex</target>
        </trans-unit>
        <trans-unit id="3b436db3bbb2cf8cd52e628ff6fb1a53b5527788" translate="yes" xml:space="preserve">
          <source>Server::Base#pubsub</source>
          <target state="translated">Server::Base#pubsub</target>
        </trans-unit>
        <trans-unit id="a41f314a47ee47a818afeeb4c19d66048eb11b31" translate="yes" xml:space="preserve">
          <source>Server::Base#remote_connections</source>
          <target state="translated">Server::Base#remote_connections</target>
        </trans-unit>
        <trans-unit id="99e13735645f13e2a1673643196ea4f731672bdc" translate="yes" xml:space="preserve">
          <source>Server::Base#restart</source>
          <target state="translated">Server::Base#restart</target>
        </trans-unit>
        <trans-unit id="379c8b216409b8072990a3433cb3217845c18031" translate="yes" xml:space="preserve">
          <source>Server::Base#worker_pool</source>
          <target state="translated">Server::Base#worker_pool</target>
        </trans-unit>
        <trans-unit id="15c8ed630a13912a350e23e63cd1fe7fba5c0178" translate="yes" xml:space="preserve">
          <source>Server::Base::logger</source>
          <target state="translated">Server::Base::logger</target>
        </trans-unit>
        <trans-unit id="9f50a05ea543dd8fc050de3ff769e4a53b557b06" translate="yes" xml:space="preserve">
          <source>Server::Base::new</source>
          <target state="translated">Server::Base::new</target>
        </trans-unit>
        <trans-unit id="ab25bf4c1d566022f1fe3cd5f000147d3f6f7395" translate="yes" xml:space="preserve">
          <source>Server::Broadcasting</source>
          <target state="translated">Server::Broadcasting</target>
        </trans-unit>
        <trans-unit id="6eb5134fd42a2df2cce38e2f8c4d05c80c3c5134" translate="yes" xml:space="preserve">
          <source>Server::Broadcasting#broadcast</source>
          <target state="translated">Server::Broadcasting#broadcast</target>
        </trans-unit>
        <trans-unit id="3615c614c22da3258f6c84736e997e8f5dd2dc69" translate="yes" xml:space="preserve">
          <source>Server::Broadcasting#broadcaster_for</source>
          <target state="translated">Server::Broadcasting#broadcaster_for</target>
        </trans-unit>
        <trans-unit id="6226fbda7901428652ab04f2eff2cb6ae2e7b21b" translate="yes" xml:space="preserve">
          <source>Server::Configuration</source>
          <target state="translated">Server::Configuration</target>
        </trans-unit>
        <trans-unit id="e706678bc0db21ca998ebba711b190bdd381368f" translate="yes" xml:space="preserve">
          <source>Server::Configuration#allow_same_origin_as_host</source>
          <target state="translated">Server::Configuration#allow_same_origin_as_host</target>
        </trans-unit>
        <trans-unit id="223acb0822a7d4341675598caa907c88ea24a3a2" translate="yes" xml:space="preserve">
          <source>Server::Configuration#allowed_request_origins</source>
          <target state="translated">Server::Configuration#allowed_request_origins</target>
        </trans-unit>
        <trans-unit id="73e8e82097487faac95160e531d4532d8479f361" translate="yes" xml:space="preserve">
          <source>Server::Configuration#cable</source>
          <target state="translated">Server::Configuration#cable</target>
        </trans-unit>
        <trans-unit id="3ee53f6850ef15b56677061887f27b661d8c344c" translate="yes" xml:space="preserve">
          <source>Server::Configuration#connection_class</source>
          <target state="translated">Server::Configuration#connection_class</target>
        </trans-unit>
        <trans-unit id="db710c595731563bc94e0468a51bd60cc0224d2e" translate="yes" xml:space="preserve">
          <source>Server::Configuration#disable_request_forgery_protection</source>
          <target state="translated">Server::Configuration#disable_request_forgery_protection</target>
        </trans-unit>
        <trans-unit id="19c59da7bd903ccd8b3aedd4045675c1b1f65021" translate="yes" xml:space="preserve">
          <source>Server::Configuration#log_tags</source>
          <target state="translated">Server::Configuration#log_tags</target>
        </trans-unit>
        <trans-unit id="7ea82da6c1ec4eec6c708889a4cd29b3ee2fdef4" translate="yes" xml:space="preserve">
          <source>Server::Configuration#logger</source>
          <target state="translated">Server::Configuration#logger</target>
        </trans-unit>
        <trans-unit id="04e04a2aeb3193f5eee13b357b938e8473e85bf5" translate="yes" xml:space="preserve">
          <source>Server::Configuration#mount_path</source>
          <target state="translated">Server::Configuration#mount_path</target>
        </trans-unit>
        <trans-unit id="7474c8ab89a79f788ed5579e19854b5009881e9d" translate="yes" xml:space="preserve">
          <source>Server::Configuration#pubsub_adapter</source>
          <target state="translated">Server::Configuration#pubsub_adapter</target>
        </trans-unit>
        <trans-unit id="a9dcfe888b92a19ee6f736a9ae54f2222c92c870" translate="yes" xml:space="preserve">
          <source>Server::Configuration#url</source>
          <target state="translated">Server::Configuration#url</target>
        </trans-unit>
        <trans-unit id="f34b6f10a0329e094a5fe53d4350b33ae709cda9" translate="yes" xml:space="preserve">
          <source>Server::Configuration#worker_pool_size</source>
          <target state="translated">Server::Configuration#worker_pool_size</target>
        </trans-unit>
        <trans-unit id="db741d9598fbfbf542cd90d6057123200b42a224" translate="yes" xml:space="preserve">
          <source>Server::Configuration::new</source>
          <target state="translated">Server::Configuration::new</target>
        </trans-unit>
        <trans-unit id="363af81ea36073e2766ddb0af600e4a1ec64b6b2" translate="yes" xml:space="preserve">
          <source>Serves files stored with the disk service in the same way that the cloud services do. This means using expiring, signed URLs that are meant for immediate access, not permanent linking. Always go through the BlobsController, or your own authenticated controller, rather than directly to the service URL.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="329cb8b6ba8c427be7c09b298295c655415c7ac9" translate="yes" xml:space="preserve">
          <source>Service</source>
          <target state="translated">Service</target>
        </trans-unit>
        <trans-unit id="ae89b1f741ac41b119455f4c1a5a2ba3a3de0c73" translate="yes" xml:space="preserve">
          <source>Service#delete</source>
          <target state="translated">Service#delete</target>
        </trans-unit>
        <trans-unit id="ec1663415aa13d972538ba4c5c7aa48a6d182471" translate="yes" xml:space="preserve">
          <source>Service#delete_prefixed</source>
          <target state="translated">Service#delete_prefixed</target>
        </trans-unit>
        <trans-unit id="ff81205faef92fb9d46b21b668fbab38f15473a5" translate="yes" xml:space="preserve">
          <source>Service#download</source>
          <target state="translated">Service#download</target>
        </trans-unit>
        <trans-unit id="246922ed0a48d4e50cd6f5e1b60fe4cf92c2504a" translate="yes" xml:space="preserve">
          <source>Service#download_chunk</source>
          <target state="translated">Service#download_chunk</target>
        </trans-unit>
        <trans-unit id="877d28c6ada6b1b8a8d802885a0bca39655c185a" translate="yes" xml:space="preserve">
          <source>Service#exist?</source>
          <target state="translated">Service#exist?</target>
        </trans-unit>
        <trans-unit id="63e87b05efde6e85ea7cb420efe6b49cea676f6b" translate="yes" xml:space="preserve">
          <source>Service#headers_for_direct_upload</source>
          <target state="translated">Service#headers_for_direct_upload</target>
        </trans-unit>
        <trans-unit id="72cf59d445e2150b1795af7de737f8d572222b76" translate="yes" xml:space="preserve">
          <source>Service#open</source>
          <target state="translated">Service#open</target>
        </trans-unit>
        <trans-unit id="5f856e199173f3a396690642df3dc375994c1bc9" translate="yes" xml:space="preserve">
          <source>Service#update_metadata</source>
          <target state="translated">Service#update_metadata</target>
        </trans-unit>
        <trans-unit id="646a2ad2e3cc8df225f4043cd43e572a20260844" translate="yes" xml:space="preserve">
          <source>Service#upload</source>
          <target state="translated">Service#upload</target>
        </trans-unit>
        <trans-unit id="8357f534dc4ea6bb70a265bb7d51ad17b943289b" translate="yes" xml:space="preserve">
          <source>Service#url</source>
          <target state="translated">Service#url</target>
        </trans-unit>
        <trans-unit id="af9244e475a52530d906c40bfe1c0d38fc8b6afd" translate="yes" xml:space="preserve">
          <source>Service#url_for_direct_upload</source>
          <target state="translated">Service#url_for_direct_upload</target>
        </trans-unit>
        <trans-unit id="f5c7d4e45ab8fee9744696f284ea29a914e156f5" translate="yes" xml:space="preserve">
          <source>Service::AzureStorageService</source>
          <target state="translated">Service::AzureStorageService</target>
        </trans-unit>
        <trans-unit id="f5306362af5aad495e157ef11dfcbe7b3b48a3e1" translate="yes" xml:space="preserve">
          <source>Service::AzureStorageService#blobs</source>
          <target state="translated">Service::AzureStorageService#blobs</target>
        </trans-unit>
        <trans-unit id="39accd17cef34ecbed9d437743cce771c389549e" translate="yes" xml:space="preserve">
          <source>Service::AzureStorageService#client</source>
          <target state="translated">Service::AzureStorageService#client</target>
        </trans-unit>
        <trans-unit id="59e16f07c8d882f243df9e25ec18e660cd2a91b9" translate="yes" xml:space="preserve">
          <source>Service::AzureStorageService#container</source>
          <target state="translated">Service::AzureStorageService#container</target>
        </trans-unit>
        <trans-unit id="c233c907f77bb362142284184cffd76cec782db7" translate="yes" xml:space="preserve">
          <source>Service::AzureStorageService#delete</source>
          <target state="translated">Service::AzureStorageService#delete</target>
        </trans-unit>
        <trans-unit id="6652802b59e13d38b62cbe34c7ec58456c61b6e2" translate="yes" xml:space="preserve">
          <source>Service::AzureStorageService#delete_prefixed</source>
          <target state="translated">Service::AzureStorageService#delete_prefixed</target>
        </trans-unit>
        <trans-unit id="c1560d7a4c750bfef0efb0edda1c64ca65bd86b0" translate="yes" xml:space="preserve">
          <source>Service::AzureStorageService#download</source>
          <target state="translated">Service::AzureStorageService#download</target>
        </trans-unit>
        <trans-unit id="33168e1a448d53fed56de91f991775e429eede6b" translate="yes" xml:space="preserve">
          <source>Service::AzureStorageService#download_chunk</source>
          <target state="translated">Service::AzureStorageService#download_chunk</target>
        </trans-unit>
        <trans-unit id="63a10ac54a528ba1f9fa57e7a8a71b7d16cd85d5" translate="yes" xml:space="preserve">
          <source>Service::AzureStorageService#exist?</source>
          <target state="translated">Service::AzureStorageService#exist?</target>
        </trans-unit>
        <trans-unit id="16ec2f6c65e27f8f2f5d22da54b95f2aa7192928" translate="yes" xml:space="preserve">
          <source>Service::AzureStorageService#headers_for_direct_upload</source>
          <target state="translated">Service::AzureStorageService#headers_for_direct_upload</target>
        </trans-unit>
        <trans-unit id="582b5711e3665a270d78d7a4799b0e81d22ea53e" translate="yes" xml:space="preserve">
          <source>Service::AzureStorageService#signer</source>
          <target state="translated">Service::AzureStorageService#signer</target>
        </trans-unit>
        <trans-unit id="dce1a6e7a9a1d31b1657da1871ab757e10406742" translate="yes" xml:space="preserve">
          <source>Service::AzureStorageService#upload</source>
          <target state="translated">Service::AzureStorageService#upload</target>
        </trans-unit>
        <trans-unit id="c8e793fc629e863a2bcd9fcb2d2f7546d8163baf" translate="yes" xml:space="preserve">
          <source>Service::AzureStorageService#url</source>
          <target state="translated">Service::AzureStorageService#url</target>
        </trans-unit>
        <trans-unit id="a629313467ab461033ab18893297c624908d5d6e" translate="yes" xml:space="preserve">
          <source>Service::AzureStorageService#url_for_direct_upload</source>
          <target state="translated">Service::AzureStorageService#url_for_direct_upload</target>
        </trans-unit>
        <trans-unit id="556ed5bcd82c70836e2b6295d80aa5769eb308d7" translate="yes" xml:space="preserve">
          <source>Service::AzureStorageService::new</source>
          <target state="translated">Service::AzureStorageService::new</target>
        </trans-unit>
        <trans-unit id="3360be5212ed8c07fbdbbb06974e77b5314ec1f8" translate="yes" xml:space="preserve">
          <source>Service::DiskService</source>
          <target state="translated">Service::DiskService</target>
        </trans-unit>
        <trans-unit id="1d61ecb44ab74340dae4ebb7f1ed6df50d0ceef4" translate="yes" xml:space="preserve">
          <source>Service::DiskService#delete</source>
          <target state="translated">Service::DiskService#delete</target>
        </trans-unit>
        <trans-unit id="08bcf3b3bf83c0b227a0b18fb8bb1d101510e2a0" translate="yes" xml:space="preserve">
          <source>Service::DiskService#delete_prefixed</source>
          <target state="translated">Service::DiskService#delete_prefixed</target>
        </trans-unit>
        <trans-unit id="b71293eb00c6e9f0dfd55e9206ee930a61179520" translate="yes" xml:space="preserve">
          <source>Service::DiskService#download</source>
          <target state="translated">Service::DiskService#download</target>
        </trans-unit>
        <trans-unit id="8f3b343bf7b7db29ab8ef955596fd0319c6a323a" translate="yes" xml:space="preserve">
          <source>Service::DiskService#download_chunk</source>
          <target state="translated">Service::DiskService#download_chunk</target>
        </trans-unit>
        <trans-unit id="9cc52354d23d3a76fc9344cf04b998d72e6955af" translate="yes" xml:space="preserve">
          <source>Service::DiskService#exist?</source>
          <target state="translated">Service::DiskService#exist?</target>
        </trans-unit>
        <trans-unit id="70a600bb8e92efdc61eb87103a076d5ae3cb0239" translate="yes" xml:space="preserve">
          <source>Service::DiskService#headers_for_direct_upload</source>
          <target state="translated">Service::DiskService#headers_for_direct_upload</target>
        </trans-unit>
        <trans-unit id="c25f39588778da64c113a9f109aa7887a510885a" translate="yes" xml:space="preserve">
          <source>Service::DiskService#root</source>
          <target state="translated">Service::DiskService#root</target>
        </trans-unit>
        <trans-unit id="9f8ba0869caef676c431d882a75b357933a6be82" translate="yes" xml:space="preserve">
          <source>Service::DiskService#upload</source>
          <target state="translated">Service::DiskService#upload</target>
        </trans-unit>
        <trans-unit id="962452a3bbbca1fe4f84c73e33f229fc48672fd1" translate="yes" xml:space="preserve">
          <source>Service::DiskService#url</source>
          <target state="translated">Service::DiskService#url</target>
        </trans-unit>
        <trans-unit id="2211cf6163eb8b645154b9c65586f97ff96ab7ca" translate="yes" xml:space="preserve">
          <source>Service::DiskService#url_for_direct_upload</source>
          <target state="translated">Service::DiskService#url_for_direct_upload</target>
        </trans-unit>
        <trans-unit id="717a37281fca63b31d69c0dab9e2903ecc1a0415" translate="yes" xml:space="preserve">
          <source>Service::DiskService::new</source>
          <target state="translated">Service::DiskService::new</target>
        </trans-unit>
        <trans-unit id="8a9166d15f1dc8370a37b6d1a4099dbaebff1398" translate="yes" xml:space="preserve">
          <source>Service::GCSService</source>
          <target state="translated">Service::GCSService</target>
        </trans-unit>
        <trans-unit id="e70ade69f301a050e527cc6990b9175af10125f3" translate="yes" xml:space="preserve">
          <source>Service::GCSService#delete</source>
          <target state="translated">Service::GCSService#delete</target>
        </trans-unit>
        <trans-unit id="5f61597165d7418a7878b61d3b42a4d5a28864d8" translate="yes" xml:space="preserve">
          <source>Service::GCSService#delete_prefixed</source>
          <target state="translated">Service::GCSService#delete_prefixed</target>
        </trans-unit>
        <trans-unit id="70ae659a244e4a303436a2a4960a93618ebca554" translate="yes" xml:space="preserve">
          <source>Service::GCSService#download</source>
          <target state="translated">Service::GCSService#download</target>
        </trans-unit>
        <trans-unit id="5749735278cb9bf1f45d5506c3753cdca994c542" translate="yes" xml:space="preserve">
          <source>Service::GCSService#download_chunk</source>
          <target state="translated">Service::GCSService#download_chunk</target>
        </trans-unit>
        <trans-unit id="1074edb0c6869314680a484c6ad993d9a695663f" translate="yes" xml:space="preserve">
          <source>Service::GCSService#exist?</source>
          <target state="translated">Service::GCSService#exist?</target>
        </trans-unit>
        <trans-unit id="8a0e50e87b3a57ab0f57869fb9747343958fb711" translate="yes" xml:space="preserve">
          <source>Service::GCSService#headers_for_direct_upload</source>
          <target state="translated">Service::GCSService#headers_for_direct_upload</target>
        </trans-unit>
        <trans-unit id="845fa94330b18291b8e197dbcedd8eeef4f3b2f2" translate="yes" xml:space="preserve">
          <source>Service::GCSService#update_metadata</source>
          <target state="translated">Service::GCSService#update_metadata</target>
        </trans-unit>
        <trans-unit id="3531c36be7579cd8195253865660baa8be08e412" translate="yes" xml:space="preserve">
          <source>Service::GCSService#upload</source>
          <target state="translated">Service::GCSService#upload</target>
        </trans-unit>
        <trans-unit id="bbc3eff352a8df56521a4872a328dfefcacc67a4" translate="yes" xml:space="preserve">
          <source>Service::GCSService#url</source>
          <target state="translated">Service::GCSService#url</target>
        </trans-unit>
        <trans-unit id="082c0f0ab6ef7c56f0d28e63fa2cd7b8979cb4cb" translate="yes" xml:space="preserve">
          <source>Service::GCSService#url_for_direct_upload</source>
          <target state="translated">Service::GCSService#url_for_direct_upload</target>
        </trans-unit>
        <trans-unit id="4050ab488cca8f292f72eeecffdba57bf87a3810" translate="yes" xml:space="preserve">
          <source>Service::GCSService::new</source>
          <target state="translated">Service::GCSService::new</target>
        </trans-unit>
        <trans-unit id="0062f37feca48965ee159f634360673ae90762bc" translate="yes" xml:space="preserve">
          <source>Service::MirrorService</source>
          <target state="translated">Service::MirrorService</target>
        </trans-unit>
        <trans-unit id="66418ee009228ae6d56ba77849c45461356cb963" translate="yes" xml:space="preserve">
          <source>Service::MirrorService#delete</source>
          <target state="translated">Service::MirrorService#delete</target>
        </trans-unit>
        <trans-unit id="6a850b593e958c0bcfbdbba675683dbb69eecba8" translate="yes" xml:space="preserve">
          <source>Service::MirrorService#delete_prefixed</source>
          <target state="translated">Service::MirrorService#delete_prefixed</target>
        </trans-unit>
        <trans-unit id="aa17c629b284f366b388221e5c5c71261ec90fbf" translate="yes" xml:space="preserve">
          <source>Service::MirrorService#mirrors</source>
          <target state="translated">Service::MirrorService#mirrors</target>
        </trans-unit>
        <trans-unit id="fc20eb17267645998189ec5df266e1bcacb57d79" translate="yes" xml:space="preserve">
          <source>Service::MirrorService#primary</source>
          <target state="translated">Service::MirrorService#primary</target>
        </trans-unit>
        <trans-unit id="98b0bc00703cfb0ddf9a2a4c80cc28078721ad90" translate="yes" xml:space="preserve">
          <source>Service::MirrorService#upload</source>
          <target state="translated">Service::MirrorService#upload</target>
        </trans-unit>
        <trans-unit id="f02d98475b57519230bc86a173881fccbfca82af" translate="yes" xml:space="preserve">
          <source>Service::MirrorService::new</source>
          <target state="translated">Service::MirrorService::new</target>
        </trans-unit>
        <trans-unit id="cfb67d630f4f3909bd34ff9fd58e9f8a2ce833c4" translate="yes" xml:space="preserve">
          <source>Service::S3Service</source>
          <target state="translated">Service::S3Service</target>
        </trans-unit>
        <trans-unit id="19c96dd063af2047484a8919013e706eac5751ad" translate="yes" xml:space="preserve">
          <source>Service::S3Service#bucket</source>
          <target state="translated">Service::S3Service#bucket</target>
        </trans-unit>
        <trans-unit id="feee05ffe8c089799cf0391284907602a0670106" translate="yes" xml:space="preserve">
          <source>Service::S3Service#client</source>
          <target state="translated">Service::S3Service#client</target>
        </trans-unit>
        <trans-unit id="3ca271e2987048550bfbed37b98f931229bc8843" translate="yes" xml:space="preserve">
          <source>Service::S3Service#delete</source>
          <target state="translated">Service::S3Service#delete</target>
        </trans-unit>
        <trans-unit id="7dbbaaecd162864e59aafbb766fd2942241c67f3" translate="yes" xml:space="preserve">
          <source>Service::S3Service#delete_prefixed</source>
          <target state="translated">Service::S3Service#delete_prefixed</target>
        </trans-unit>
        <trans-unit id="2ceabf45a68213f3edc98a0f17d5f6bfcefe3170" translate="yes" xml:space="preserve">
          <source>Service::S3Service#download</source>
          <target state="translated">Service::S3Service#download</target>
        </trans-unit>
        <trans-unit id="3d20dfb53c90f6fb246acf83f4f2283483e99e5e" translate="yes" xml:space="preserve">
          <source>Service::S3Service#download_chunk</source>
          <target state="translated">Service::S3Service#download_chunk</target>
        </trans-unit>
        <trans-unit id="05d5c68e087ecfe0df676b1a4947187aca236ea2" translate="yes" xml:space="preserve">
          <source>Service::S3Service#exist?</source>
          <target state="translated">Service::S3Service#exist?</target>
        </trans-unit>
        <trans-unit id="d4bcaea39c675f82cf54370b1bf2eaf842e13382" translate="yes" xml:space="preserve">
          <source>Service::S3Service#headers_for_direct_upload</source>
          <target state="translated">Service::S3Service#headers_for_direct_upload</target>
        </trans-unit>
        <trans-unit id="ebd3c263711f6de5a730ec1d6446c089a8de0d56" translate="yes" xml:space="preserve">
          <source>Service::S3Service#upload</source>
          <target state="translated">Service::S3Service#upload</target>
        </trans-unit>
        <trans-unit id="8feaea290da7f515d9932e0a3c5797597641fb48" translate="yes" xml:space="preserve">
          <source>Service::S3Service#upload_options</source>
          <target state="translated">Service::S3Service#upload_options</target>
        </trans-unit>
        <trans-unit id="ddca94b2fa3def96d5ca27120cf139d10d817bb6" translate="yes" xml:space="preserve">
          <source>Service::S3Service#url</source>
          <target state="translated">Service::S3Service#url</target>
        </trans-unit>
        <trans-unit id="822f8e6d1ea49f27250e96ebf4190ef43adabd69" translate="yes" xml:space="preserve">
          <source>Service::S3Service#url_for_direct_upload</source>
          <target state="translated">Service::S3Service#url_for_direct_upload</target>
        </trans-unit>
        <trans-unit id="7d9e4bc700be340d4cc1c5118005f706a1552e6a" translate="yes" xml:space="preserve">
          <source>Service::S3Service::new</source>
          <target state="translated">Service::S3Service::new</target>
        </trans-unit>
        <trans-unit id="9f50e1bbfbf3751a0568ecdce3b27126f4da4174" translate="yes" xml:space="preserve">
          <source>Service::configure</source>
          <target state="translated">Service::configure</target>
        </trans-unit>
        <trans-unit id="f7f1997c6cd1aa051279675742272a956e7db628" translate="yes" xml:space="preserve">
          <source>Session</source>
          <target state="translated">Session</target>
        </trans-unit>
        <trans-unit id="63112904f7f43bcd91d90c91cb32dc2c048c18cf" translate="yes" xml:space="preserve">
          <source>Session Expiry</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8b6e793dd782e47107366d97684b1da6d71d8de" translate="yes" xml:space="preserve">
          <source>Session Fixation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5319e9ea13cff6b5a4df98132097ff401f2d5f3d" translate="yes" xml:space="preserve">
          <source>Session Fixation - Countermeasures</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4efb8ccebbf5d914201f1f08ee681aebd5a590c4" translate="yes" xml:space="preserve">
          <source>Session Hijacking</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8083af2fb46038a7fe98a73486d2b235f7142b36" translate="yes" xml:space="preserve">
          <source>Session Storage</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e7b59fbd0a3bcae818038b504c8ec8185f7ea75" translate="yes" xml:space="preserve">
          <source>Session cookies do not invalidate themselves and can be maliciously reused. It may be a good idea to have your application invalidate old session cookies using a stored timestamp.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8accfba9c5c26b7a5d783ce7cbf636396ade1ca5" translate="yes" xml:space="preserve">
          <source>Session values are stored using key/value pairs like a hash:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3a7f0ff441a5a22d80b04cc13471f1cea012b4e7" translate="yes" xml:space="preserve">
          <source>Session::CacheStore</source>
          <target state="translated">Session::CacheStore</target>
        </trans-unit>
        <trans-unit id="2054510018c72692f5dbfcc03520fe4b183f4275" translate="yes" xml:space="preserve">
          <source>Session::CacheStore#delete_session</source>
          <target state="translated">Session::CacheStore#delete_session</target>
        </trans-unit>
        <trans-unit id="70ce18d5c7b388f1c2dc7a7dea80961653c2dc33" translate="yes" xml:space="preserve">
          <source>Session::CacheStore#find_session</source>
          <target state="translated">Session::CacheStore#find_session</target>
        </trans-unit>
        <trans-unit id="0917edae98fa410bc182262040fcb14b0085e84e" translate="yes" xml:space="preserve">
          <source>Session::CacheStore#write_session</source>
          <target state="translated">Session::CacheStore#write_session</target>
        </trans-unit>
        <trans-unit id="77e63bd7ff60daea5a9e26f83a1745601058ca26" translate="yes" xml:space="preserve">
          <source>Session::CacheStore::new</source>
          <target state="translated">Session::CacheStore::new</target>
        </trans-unit>
        <trans-unit id="5e3f05b4320371c9df55f626e4b1e12f61ad93a8" translate="yes" xml:space="preserve">
          <source>Session::CookieStore</source>
          <target state="translated">Session::CookieStore</target>
        </trans-unit>
        <trans-unit id="e344a485a90d3ac2d071d2dd5e73a54aad6747ec" translate="yes" xml:space="preserve">
          <source>Session::CookieStore#delete_session</source>
          <target state="translated">Session::CookieStore#delete_session</target>
        </trans-unit>
        <trans-unit id="c3ef5bc71e64fe1521b74b977806c4df250d9945" translate="yes" xml:space="preserve">
          <source>Session::CookieStore#load_session</source>
          <target state="translated">Session::CookieStore#load_session</target>
        </trans-unit>
        <trans-unit id="b23e01b27ee8dabbe7bef1f8998a999563cdad23" translate="yes" xml:space="preserve">
          <source>Session::CookieStore::new</source>
          <target state="translated">Session::CookieStore::new</target>
        </trans-unit>
        <trans-unit id="bf48f4c11d5414e59f9fb20af6688c7289454bac" translate="yes" xml:space="preserve">
          <source>Session::MemCacheStore</source>
          <target state="translated">Session::MemCacheStore</target>
        </trans-unit>
        <trans-unit id="b10fc9b22d40a648b5ae5531801abd8d3b886755" translate="yes" xml:space="preserve">
          <source>Session::MemCacheStore::new</source>
          <target state="translated">Session::MemCacheStore::new</target>
        </trans-unit>
        <trans-unit id="e11e37a9253b34ff1c7224447e143fabca1be9fd" translate="yes" xml:space="preserve">
          <source>Sessions</source>
          <target state="translated">Sessions</target>
        </trans-unit>
        <trans-unit id="57ab94e8a912498b6e986d720425f3bada4e8c24" translate="yes" xml:space="preserve">
          <source>Sessions allow you to store objects in between requests. This is useful for objects that are not yet ready to be persisted, such as a Signup object constructed in a multi-paged process, or objects that don't change much and are needed all the time, such as a User object for a system that requires login. The session should not be used, however, as a cache for objects where it's likely they could be changed unknowingly. It's usually too much work to keep it all synchronized &amp;ndash; something databases already excel at.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2348ceb43f3fadc3970ab360c6a7fe83707ea373" translate="yes" xml:space="preserve">
          <source>Sessions are lazily loaded. If you don't access sessions in your action's code, they will not be loaded. Hence you will never need to disable sessions, just not accessing them will do the job.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99ba2ccf0bae92e2a984a0b34a438c11fd45a884" translate="yes" xml:space="preserve">
          <source>Sessions are stored by default in a browser cookie that's cryptographically signed, but unencrypted. This prevents the user from tampering with the session but also allows them to see its contents.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2d2e6517f8a42a59e855d9328cc3ecefbfbb60f" translate="yes" xml:space="preserve">
          <source>Sessions enable the application to maintain user-specific state, while users interact with the application. For example, sessions allow users to authenticate once and remain signed in for future requests.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2fb70586a0cfcea39cf852bdbe5b73477d1f218d" translate="yes" xml:space="preserve">
          <source>Sessions typically contain at most a user_id and flash message; both fit within the 4K cookie size limit. A CookieOverflow exception is raised if you attempt to store more than 4K of data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc64ac8cf876a414e1952bfdf5a95bfc47abbaa1" translate="yes" xml:space="preserve">
          <source>Set &lt;code&gt;config.action_mailer.perform_caching&lt;/code&gt; in your config to determine whether your Action Mailer views should support caching.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a4b3f6939e8ce756e9a4dfe688a18c6015142fc" translate="yes" xml:space="preserve">
          <source>Set &lt;code&gt;config.ssl_options&lt;/code&gt; with &lt;code&gt;hsts: { ... }&lt;/code&gt; to configure HSTS:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8915281b7675b3815373c9bfe177e53e08b96de7" translate="yes" xml:space="preserve">
          <source>Set &lt;code&gt;shallow: false&lt;/code&gt; on a child resource to ignore a parent's shallow parameter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d25aa801d755c2b4d50c790cf711ae694d41c17e" translate="yes" xml:space="preserve">
          <source>Set a session in the cache.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2017dcb0c1e3a46c52330385c3d6d0c147016f84" translate="yes" xml:space="preserve">
          <source>Set cache read and write timeouts relatively low. Regenerating a cached value is often faster than waiting more than a second to retrieve it. Both read and write timeouts default to 1 second, but may be set lower if your network is consistently low-latency.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="366709f696cbdf4951268d883d887ac7c0002569" translate="yes" xml:space="preserve">
          <source>Set color by using a symbol or one of the defined constants. If a third option is set to &lt;code&gt;true&lt;/code&gt;, it also adds bold to the string. This is based on the Highline implementation and will automatically append &lt;a href=&quot;logsubscriber#CLEAR&quot;&gt;CLEAR&lt;/a&gt; to the end of the returned &lt;a href=&quot;../string&quot;&gt;String&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3db3a2566fc45295b071231aeb98943fabee3d4d" translate="yes" xml:space="preserve">
          <source>Set the authorized user for this session</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52b637a40ceb04a9d6d6c9973a14d93248bb197f" translate="yes" xml:space="preserve">
          <source>Set the client message level.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a234b36ca3758dd96a948e4b383d291379788af" translate="yes" xml:space="preserve">
          <source>Set the column to use for optimistic locking. Defaults to &lt;code&gt;lock_version&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f368ef0ae3a3c054157e3aa0b639801cafa386f" translate="yes" xml:space="preserve">
          <source>Set the following in your config to enable HSTS when using subdomains:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d40008e47365b99f31bd11bd44cda4a8e6d05eb6" translate="yes" xml:space="preserve">
          <source>Set the form builder to be used as the default for all forms in the views rendered by this controller and its subclasses.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2fa6a510440a4c07c0fbd15babb8fc72a7479e30" translate="yes" xml:space="preserve">
          <source>Set the sequence to the max value of the table's column.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="984a5bb3ecb7c59ea7521bdf62b171aa4fd52bed" translate="yes" xml:space="preserve">
          <source>Set the view paths.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d2b947a37db0bcaf0cef5d2b69132c8cb87df5b" translate="yes" xml:space="preserve">
          <source>Set this to &lt;code&gt;true&lt;/code&gt; if this is an abstract class (see &lt;code&gt;abstract_class?&lt;/code&gt;). If you are using inheritance with Active Record and don't want a class to be considered as part of the STI hierarchy, you must set this to true. &lt;code&gt;ApplicationRecord&lt;/code&gt;, for example, is generated as an abstract class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02978e0cbc470359ce585e6f6c44f95b202b9a43" translate="yes" xml:space="preserve">
          <source>Set this to true to make this a bulk alter query, such as</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1ddfa849513a7196d38ffcce6f0eae8ef827190" translate="yes" xml:space="preserve">
          <source>Set to &lt;code&gt;:cascade&lt;/code&gt; to drop dependent objects as well. Defaults to false.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="57f3f5d1d0e3540e86f5bf956bd8091ffec049d7" translate="yes" xml:space="preserve">
          <source>Set to &lt;code&gt;true&lt;/code&gt; to drop temporary table. Defaults to false.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c28b27045de5605b9a07642ed487f4c32664d9e3" translate="yes" xml:space="preserve">
          <source>Set to &lt;code&gt;true&lt;/code&gt; to only drop the table if it exists. Defaults to false.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12ac8d33b62919ddaca561abd528ff8b97d8f25e" translate="yes" xml:space="preserve">
          <source>Set to true to avoid raising an error when the table already exists. Defaults to false.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37261f2f5b6d0862d8d7c57b8599659aef040c29" translate="yes" xml:space="preserve">
          <source>Set to true to drop the table before creating it. Defaults to false.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bcc1430a76b44a480498f450171906c13383f059" translate="yes" xml:space="preserve">
          <source>Set to true to drop the table before creating it. Set to &lt;code&gt;:cascade&lt;/code&gt; to drop dependent objects as well. Defaults to false.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3431a3a1c44ba03d04131120b396e0d875e0fef" translate="yes" xml:space="preserve">
          <source>Set up hook for parallel testing. This can be used if you have multiple databases or any behavior that needs to be run after the process is forked but before the tests run.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="edd8df22f4964a88d401ae46ee2b49cf886787bd" translate="yes" xml:space="preserve">
          <source>Set whether table names should be the pluralized versions of the corresponding class names. If true, the default table name for a Product class will be &amp;ldquo;products&amp;rdquo;. If false, it would just be &amp;ldquo;product&amp;rdquo;. See table_name for the full rules on table/class naming. This is true, by default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b43a920b0a6f830b9d37ce98ef6d2b08374fcbae" translate="yes" xml:space="preserve">
          <source>SetCurrent</source>
          <target state="translated">SetCurrent</target>
        </trans-unit>
        <trans-unit id="c7f44eed2c4df85b5cebcf328b76779abec61486" translate="yes" xml:space="preserve">
          <source>Sets $VERBOSE for the duration of the block and back to its original value afterwards.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51fe28272e377118a6c4bac2caea9535290d9151" translate="yes" xml:space="preserve">
          <source>Sets $VERBOSE to &lt;code&gt;nil&lt;/code&gt; for the duration of the block and back to its original value afterwards.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2b4e0fabd97a75d3a82d964c9d4ead30dfb4b7a" translate="yes" xml:space="preserve">
          <source>Sets $VERBOSE to &lt;code&gt;true&lt;/code&gt; for the duration of the block and back to its original value afterwards.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="875821e0b942364cf286a5c6269404377541c97e" translate="yes" xml:space="preserve">
          <source>Sets &lt;code&gt;Date.beginning_of_week&lt;/code&gt; to a week start (e.g. :monday) for current request/thread.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e9bae05229d27a2481d422ecbe48460186e9a42" translate="yes" xml:space="preserve">
          <source>Sets &lt;code&gt;Time.zone&lt;/code&gt; to a TimeZone object for the current request/thread.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3589c59f95713f406905caf6a50c7e635228f0b8" translate="yes" xml:space="preserve">
          <source>Sets &lt;code&gt;env[&quot;rack.multithread&quot;]&lt;/code&gt; flag to &lt;code&gt;false&lt;/code&gt; and wraps the application within a Mutex.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01a53420ea6dea10adbd580ca6f078700111adde" translate="yes" xml:space="preserve">
          <source>Sets a WWW-Authenticate header to let the client know a token is desired.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1f6d67e2b6daed21f904b080e5fa986d20eccb2" translate="yes" xml:space="preserve">
          <source>Sets a flash that will not be available to the next action, only to the current.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af66b2cc87f71b6b4a7f5d0be6754d897a07c014" translate="yes" xml:space="preserve">
          <source>Sets a new default value for a column.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df8d8bf078c75caef833d12368576b18781fa8ea" translate="yes" xml:space="preserve">
          <source>Sets a new default value for a column:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac43141b812c9225d28868487733ba5ba189259d" translate="yes" xml:space="preserve">
          <source>Sets an HTTP 1.1 Cache-Control header of &lt;code&gt;no-cache&lt;/code&gt;. This means the resource will be marked as stale, so clients must always revalidate. Intermediate/browser caches may still store the asset.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a94080e51f223a10f8e90bf397c368e76d76aee" translate="yes" xml:space="preserve">
          <source>Sets an HTTP 1.1 Cache-Control header. Defaults to issuing a &lt;code&gt;private&lt;/code&gt; instruction, so that intermediate caches must not cache the response.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e071631c07f3ba57671a219d12c3c46e6b43446" translate="yes" xml:space="preserve">
          <source>Sets an X-Runtime header, containing the time (in seconds) taken to execute the request.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4025fb0f915228e144e139d09d04cdf08e512e9c" translate="yes" xml:space="preserve">
          <source>Sets an array of names of environments where destructive actions should be prohibited.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be614b4b4d72495777ea2ef286f54a0a2a1205e3" translate="yes" xml:space="preserve">
          <source>Sets attributes to be used when creating new records from a relation object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="198e3bd869ff43312db34a6194a0f8f02726e5f5" translate="yes" xml:space="preserve">
          <source>Sets cookies for the request.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="354d005ddfafc9923882cf0efa77f58d5e00761c" translate="yes" xml:space="preserve">
          <source>Sets defaults for parameters</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3fc63a2e6ac2c13f9893479d5477fdbfc3aa5ca" translate="yes" xml:space="preserve">
          <source>Sets log tags, logs the request, calls the app, and flushes the logs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b596de798dffa52ce54b6100fd42db45dc1c956" translate="yes" xml:space="preserve">
          <source>Sets or removes a &lt;code&gt;NOT NULL&lt;/code&gt; constraint on a column. The &lt;code&gt;null&lt;/code&gt; flag indicates whether the value can be &lt;code&gt;NULL&lt;/code&gt;. For example</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8e58eecc8fcbf4adecbba7943c7031cd98cf70d8" translate="yes" xml:space="preserve">
          <source>Sets readonly attributes for the returned relation. If value is true (default), attempting to update a record will result in an error.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c41af3af30fe2906bdb701a390a89b32f35123e5" translate="yes" xml:space="preserve">
          <source>Sets server specific X-Sendfile header. Configure this via &lt;code&gt;config.action_dispatch.x_sendfile_header&lt;/code&gt; option.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7581a3842a0cb59769ebe9dd2349c7ec2b8f35d4" translate="yes" xml:space="preserve">
          <source>Sets the &lt;a href=&quot;base#method-c-base_name&quot;&gt;::base_name&lt;/a&gt; taking into account the current class namespace.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9513da43aad9a4628e139f035e4985b18d2d9ec2" translate="yes" xml:space="preserve">
          <source>Sets the &lt;code&gt;ActiveStorage::Current.host&lt;/code&gt; attribute, which the disk service uses to generate URLs. Include this concern in custom controllers that call &lt;a href=&quot;blob#method-i-service_url&quot;&gt;ActiveStorage::Blob#service_url&lt;/a&gt;, &lt;a href=&quot;variant#method-i-service_url&quot;&gt;ActiveStorage::Variant#service_url&lt;/a&gt;, or &lt;a href=&quot;preview#method-i-service_url&quot;&gt;ActiveStorage::Preview#service_url&lt;/a&gt; so the disk service can generate URLs using the same host, protocol, and base path as the current request.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ad1d814505c510e9594336ab5bca5ba912e8b2f" translate="yes" xml:space="preserve">
          <source>Sets the &lt;code&gt;etag&lt;/code&gt; and/or &lt;code&gt;last_modified&lt;/code&gt; on the response and checks it against the client request. If the request doesn't match the options provided, the request is considered stale and should be generated from scratch. Otherwise, it's fresh and we don't need to generate anything and a reply of &lt;code&gt;304 Not
Modified&lt;/code&gt; is sent.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b375a11a9e13b9d4bf6ce51d8ac63fb0974ed3a9" translate="yes" xml:space="preserve">
          <source>Sets the &lt;code&gt;etag&lt;/code&gt;, &lt;code&gt;last_modified&lt;/code&gt;, or both on the response and renders a &lt;code&gt;304 Not Modified&lt;/code&gt; response if the request is already fresh.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da274ce7a2209d253ee67fb5714569736821721b" translate="yes" xml:space="preserve">
          <source>Sets the &lt;code&gt;permitted&lt;/code&gt; attribute to &lt;code&gt;true&lt;/code&gt;. This can be used to pass mass assignment. Returns &lt;code&gt;self&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9bd595b5f3e2065b79518d2a7fff593a390d44eb" translate="yes" xml:space="preserve">
          <source>Sets the HTTP character set. In case of &lt;code&gt;nil&lt;/code&gt; parameter it sets the charset to &lt;code&gt;default_charset&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="183f4b5c7e99d6db7ba06da8ddaf43e7f3d5325b" translate="yes" xml:space="preserve">
          <source>Sets the HTTP response's content MIME type. For example, in the controller you could write this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb33c90de9632e71830f8795f855446816c0413b" translate="yes" xml:space="preserve">
          <source>Sets the HTTP status code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9503c6c532bcca221a7dd0242c54ac04dae3c2a6" translate="yes" xml:space="preserve">
          <source>Sets the Rails environment.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="213772044812da2192fa34280a5e3049c14ba8d4" translate="yes" xml:space="preserve">
          <source>Sets the behavior to the specified value. Can be a single value, array, or an object that responds to &lt;code&gt;call&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc44f40ecf609175c799a2c26a115bdad4f1c77f" translate="yes" xml:space="preserve">
          <source>Sets the column to sort records by when no explicit order clause is used during an ordered finder call. Useful when the primary key is not an auto-incrementing integer, for example when it's a UUID. Note that using a non-unique column can result in non-deterministic results.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0191305ff15a33dde4177d96fe6147d3c07df20" translate="yes" xml:space="preserve">
          <source>Sets the columns names the model should ignore. Ignored columns won't have attribute accessors defined, and won't be referenced in SQL queries.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e7a23951ef99ccb4154d8a948df8c23fe8f3c11" translate="yes" xml:space="preserve">
          <source>Sets the controller class name. Useful if the name can't be inferred from test class. Normalizes &lt;code&gt;controller_class&lt;/code&gt; before using.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c98bec79679d345c54bdccb67170dfb8f1afff74" translate="yes" xml:space="preserve">
          <source>Sets the default wrapper key or model which will be used to determine wrapper key and attribute names. Called automatically when the module is inherited.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0755eb0e83afe7cc75c91fe1921c2c7c093757ff" translate="yes" xml:space="preserve">
          <source>Sets the defaults through app configuration:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ff31b1692387dbaf307820a5d66eff63a6b6eed" translate="yes" xml:space="preserve">
          <source>Sets the format by string extension, which can be used to force custom formats that are not controlled by the extension.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b727d92261862d82a0f74ae05c26f02ff38cb015" translate="yes" xml:space="preserve">
          <source>Sets the formats by string extensions. This differs from &lt;a href=&quot;mimenegotiation#method-i-format-3D&quot;&gt;format=&lt;/a&gt; by allowing you to set multiple, ordered formats, which is useful when you want to have a fallback.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9384a70a4bdd127f441c94800c74a0f10b8b4af" translate="yes" xml:space="preserve">
          <source>Sets the given value for the key mapped to @env.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b57797d5b7b4648c3f4395a913e68b730d9316a4" translate="yes" xml:space="preserve">
          <source>Sets the model &lt;code&gt;attributes&lt;/code&gt; from a &lt;a href=&quot;json&quot;&gt;JSON&lt;/a&gt; string. Returns &lt;code&gt;self&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68fc23bfb0d21758af42e6ab4cacef11bc2413bc" translate="yes" xml:space="preserve">
          <source>Sets the model class for a fixture when the class name cannot be inferred from the fixture name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e61d21dc4866f90d68d4b8d02b8d60ff9d6fb11" translate="yes" xml:space="preserve">
          <source>Sets the name of the internal metadata table.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dda6f8490f1ee3c2d3429005c8157a3056da4ac0" translate="yes" xml:space="preserve">
          <source>Sets the name of the primary key column.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1117cd05146b5d419c9b37fca72fe0bf00939c0b" translate="yes" xml:space="preserve">
          <source>Sets the name of the schema migrations table.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5801597043169a8b69be2ceec09ed14871eab4a0" translate="yes" xml:space="preserve">
          <source>Sets the name of the sequence to use when generating ids to the given value, or (if the value is &lt;code&gt;nil&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;) to the value returned by the given block. This is required for Oracle and is useful for any database which relies on sequences for primary key generation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4fb25e2a2e488606ce165b4f5493dd8c3d3625f1" translate="yes" xml:space="preserve">
          <source>Sets the name of the wrapper key, or the model which &lt;code&gt;ParamsWrapper&lt;/code&gt; would use to determine the attribute names from.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="377f98104a23edcff65cc1e62b9d97fe6024a5e8" translate="yes" xml:space="preserve">
          <source>Sets the order in which test cases are run.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2937ddcee47eacbe40e42cda33eb9a64dd2f4a72" translate="yes" xml:space="preserve">
          <source>Sets the prefix string to prepend to every table name. So if set to &amp;ldquo;basecamp_&amp;rdquo;, all table names will be named like &amp;ldquo;basecamp_projects&amp;rdquo;, &amp;ldquo;basecamp_people&amp;rdquo;, etc. This is a convenient way of creating a namespace for tables in a shared database. By default, the prefix is the empty string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a04ad29afdb9a2c17167e5d2c441d2155dc90f4" translate="yes" xml:space="preserve">
          <source>Sets the prefix type that will be prepended to every primary key column name. The options are &lt;code&gt;:table_name&lt;/code&gt; and &lt;code&gt;:table_name_with_underscore&lt;/code&gt;. If the first is specified, the Product class will look for &amp;ldquo;productid&amp;rdquo; instead of &amp;ldquo;id&amp;rdquo; as the primary column. If the latter is specified, the Product class will look for &amp;ldquo;product_id&amp;rdquo; instead of &amp;ldquo;id&amp;rdquo;. Remember that this is a global setting for all Active Records.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b43787634cecea2580fbe643879e5c9d4cb31a5" translate="yes" xml:space="preserve">
          <source>Sets the primary key column's value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89bc608d4cfb23cb71f5ab448c5eaa2635f29901" translate="yes" xml:space="preserve">
          <source>Sets the schema search path to a string of comma-separated schema names. Names beginning with $ have to be quoted (e.g. $user =&amp;gt; '$user'). See: &lt;a href=&quot;https://www.postgresql.org/docs/current/static/ddl-schemas.html&quot;&gt;www.postgresql.org/docs/current/static/ddl-schemas.html&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1cfcc7627b1f0b343d383ce2f5d1893949bd77f1" translate="yes" xml:space="preserve">
          <source>Sets the table name explicitly. Example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d8aba6cca3616dbbcc9d1f7c550fcf3504726cb" translate="yes" xml:space="preserve">
          <source>Sets the table name, overriding the default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e94c5f6f545f46cc77dba55204df1a6276c727a" translate="yes" xml:space="preserve">
          <source>Sets the value of &lt;a href=&quot;classmethods#method-i-inheritance_column&quot;&gt;#inheritance_column&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3fbb4b80dafa7d85972db33f2e4b721ba6143c1" translate="yes" xml:space="preserve">
          <source>Sets the variant for template.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8abc3d762b1756037946aa6d26ca2a4f8f32351d" translate="yes" xml:space="preserve">
          <source>Sets up the flash keys. Only available if &lt;code&gt;config.action_controller.session_store&lt;/code&gt; is set to a value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="073f313fb44e409618fa2585b16710e28a768eb1" translate="yes" xml:space="preserve">
          <source>Setting &lt;code&gt;:expires_in&lt;/code&gt; will set an expiration time on the cache. All caches support auto-expiring content after a specified number of seconds. This value can be specified as an option to the constructor (in which case all entries will be affected), or it can be supplied to the &lt;code&gt;fetch&lt;/code&gt; or &lt;code&gt;write&lt;/code&gt; method to effect just one entry.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="319cf08e0b434886e658c990b10bd70108d9132c" translate="yes" xml:space="preserve">
          <source>Setting &lt;code&gt;:race_condition_ttl&lt;/code&gt; is very useful in situations where a cache entry is used very frequently and is under heavy load. If a cache expires and due to heavy load several different processes will try to read data natively and then they all will try to write to cache. To avoid that case the first process to find an expired cache entry will bump the cache expiration time by the value set in &lt;code&gt;:race_condition_ttl&lt;/code&gt;. Yes, this process is extending the time for a stale value by another few seconds. Because of extended life of the previous cache, other processes will continue to use slightly stale data for a just a bit longer. In the meantime that first process will go ahead and will write into cache the new value. After that all the processes will start getting the new value. The key is to keep &lt;code&gt;:race_condition_ttl&lt;/code&gt; small.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ebb8034fbd1b7cd50257c72d12dce3de5500c5f5" translate="yes" xml:space="preserve">
          <source>Setting &lt;code&gt;:version&lt;/code&gt; verifies the cache stored under &lt;code&gt;name&lt;/code&gt; is of the same version. nil is returned on mismatches despite contents. This feature is used to support recyclable cache keys.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d102a117295afdb02423aa5b29b75ede53e3ddb" translate="yes" xml:space="preserve">
          <source>Setting &lt;code&gt;compress: false&lt;/code&gt; disables compression of the cache entry.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f19c7d7322c289bbdb51ea5138907662207f02ae" translate="yes" xml:space="preserve">
          <source>Setting &lt;code&gt;skip_nil: true&lt;/code&gt; will not cache nil result:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c8ece87f64466110c18bef99bf41fd2df0aabfa" translate="yes" xml:space="preserve">
          <source>Setting HTML options</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9db2985c0b166d84c7846f0386e53dfdc413ac6b" translate="yes" xml:space="preserve">
          <source>Setting Headers and CGI variables</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e049cf29496a783ca880f2b488c4e4e0d5392cc" translate="yes" xml:space="preserve">
          <source>Setting Inverses</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1f89bd291f0df57c8581b0dd547a58a60c92b7b" translate="yes" xml:space="preserve">
          <source>Setting and Passing a Locale</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ff58908bceb7aac5a0f1b5f6bda823a099248baf" translate="yes" xml:space="preserve">
          <source>Setting behaviors only affects deprecations that happen after boot time. &lt;a href=&quot;../deprecation&quot;&gt;Deprecation&lt;/a&gt; warnings raised by gems are not affected by this setting because they happen before Rails boots up.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5467fb89c0ccf50acafbe3fc70d9e899b85f3e2b" translate="yes" xml:space="preserve">
          <source>Setting behaviors only affects deprecations that happen after boot time. For more information you can read the documentation of the &lt;code&gt;behavior=&lt;/code&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2242210cc481f4d161ec5c238f5a17355dad75f2" translate="yes" xml:space="preserve">
          <source>Setting the &lt;code&gt;:as&lt;/code&gt; option indicates that this is a polymorphic association, as discussed &lt;a href=&quot;#polymorphic-associations&quot;&gt;earlier in this guide&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec390dc8fa5cc572a5c3b49fde979ae1f814426a" translate="yes" xml:space="preserve">
          <source>Setting the &lt;code&gt;:as&lt;/code&gt; option indicates that this is a polymorphic association. Polymorphic associations were discussed in detail &lt;a href=&quot;#polymorphic-associations&quot;&gt;earlier in this guide&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78334244e72ecd1a32b545d0bd3d1479bf5b6240" translate="yes" xml:space="preserve">
          <source>Setting the Application Home Page</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb8ef10be1c6e4c18efa42cc9216e68fab9d750e" translate="yes" xml:space="preserve">
          <source>Setting the Backend</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f4a554df62a102fc095ba6f20e698d055a49732" translate="yes" xml:space="preserve">
          <source>Setting the default to &lt;code&gt;nil&lt;/code&gt; effectively drops the default:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3200120544bb2975a999a1851a1244d7fd0f436d" translate="yes" xml:space="preserve">
          <source>Setting the layout to &lt;code&gt;nil&lt;/code&gt; forces it to be looked up in the filesystem and fallbacks to the parent behavior if none exists. Setting it to &lt;code&gt;nil&lt;/code&gt; is useful to re-enable template lookup overriding a previous configuration set in the parent:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07a863f82a9e13c0184987cef48a3b4e30ed06c3" translate="yes" xml:space="preserve">
          <source>Setting the method</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ffa6b0f744cbc85d7b1813d836d9dd6abb72482" translate="yes" xml:space="preserve">
          <source>Setting this up is simple.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ef7922e8449a32ac9e7f143eeaaed221f9fbeb1" translate="yes" xml:space="preserve">
          <source>Setting up your application</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7f73bb54d928922c3838bb789ee9fb8a5b1eb37" translate="yes" xml:space="preserve">
          <source>Settings</source>
          <target state="translated">Settings</target>
        </trans-unit>
        <trans-unit id="cdd7bb2816b7a8f88bce0e47be39943bc369516b" translate="yes" xml:space="preserve">
          <source>Setup</source>
          <target state="translated">Setup</target>
        </trans-unit>
        <trans-unit id="5638e444e552b6db9f433d8e0d789ad2f09001ec" translate="yes" xml:space="preserve">
          <source>Setup test connection with the specified identifiers:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d201d83c369f5ee001a841aa0c801d28497a110d" translate="yes" xml:space="preserve">
          <source>Setup the Database</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a28a8ada8bdc7d99b9bf64e96d122eb7c2b1fe7f" translate="yes" xml:space="preserve">
          <source>Setup the Rails Application for Internationalization</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d481f00240737246757b5039c311cb51272cfc04" translate="yes" xml:space="preserve">
          <source>Several classes in Rails overwrite this method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="157672747fef1afe6b26bb00ba7c42fad9f003b7" translate="yes" xml:space="preserve">
          <source>Several gems can help with this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a794a8960179250a980b6ff134694ff665df71e3" translate="yes" xml:space="preserve">
          <source>Several methods are provided in migrations that allow you to control all this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="943d08a5e49fd1222f68e5f08098bc5b6e546494" translate="yes" xml:space="preserve">
          <source>Severe Security Issues</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b40f8c6b312aa78981283ac7bcf07d39753f5f58" translate="yes" xml:space="preserve">
          <source>Sharding</source>
          <target state="translated">Sharding</target>
        </trans-unit>
        <trans-unit id="ba9c8ee4d68d6a21badd4962cfbc9ffa885325da" translate="yes" xml:space="preserve">
          <source>Shared Partial Caching</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15bc07e1b06e9b128672c074c1935dc3f2ae4f63" translate="yes" xml:space="preserve">
          <source>Short-hand examples</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11ffafa14b15f894a3f28fe629d5d8463c639244" translate="yes" xml:space="preserve">
          <source>Short-hand for &lt;a href=&quot;calculations#method-i-months_ago&quot;&gt;#months_ago&lt;/a&gt;(1).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e78b8ce239ceb540a12c1c9603043f685c1aa6b6" translate="yes" xml:space="preserve">
          <source>Short-hand for &lt;a href=&quot;calculations#method-i-months_ago&quot;&gt;#months_ago&lt;/a&gt;(3).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c682326b5f38d5c96147556b6160e05abc58daa" translate="yes" xml:space="preserve">
          <source>Short-hand for &lt;a href=&quot;calculations#method-i-months_since&quot;&gt;#months_since&lt;/a&gt;(3)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3d248e0e05e0c6db52bc88d7152b32f7a57d6da" translate="yes" xml:space="preserve">
          <source>Short-hand for &lt;a href=&quot;calculations#method-i-years_ago&quot;&gt;#years_ago&lt;/a&gt;(1).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4bbf60bcfe44a89fd337caf24bff2cbd2430c7d" translate="yes" xml:space="preserve">
          <source>Shortcut for &lt;code&gt;Rack::Test::UploadedFile.new(File.join(ActionDispatch::IntegrationTest.fixture_path,
path), type)&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8edb2799730bdc443329c787ce80a30869b3eb1b" translate="yes" xml:space="preserve">
          <source>Shortcut for &lt;code&gt;after_commit :hook, on: :create&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af91c5d0893cb989e9e4147ff5648cbbcf3cf6fa" translate="yes" xml:space="preserve">
          <source>Shortcut for &lt;code&gt;after_commit :hook, on: :destroy&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5046027583c2e0db93f0693ad76795ae086275c" translate="yes" xml:space="preserve">
          <source>Shortcut for &lt;code&gt;after_commit :hook, on: :update&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a8f663f50ddd30cdbe11ed9c4f299297ba87901" translate="yes" xml:space="preserve">
          <source>Shortcut for &lt;code&gt;after_commit :hook, on: [ :create, :update ]&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49cd721b595199c0b0a758299b55a51bfcac8f7a" translate="yes" xml:space="preserve">
          <source>Shortcut for &lt;code&gt;tempfile.close&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1edc69f7b5b7822f0479c811690dd6d412da6798" translate="yes" xml:space="preserve">
          <source>Shortcut for &lt;code&gt;tempfile.eof?&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7716a0479809149ad41124c6dcfe3483ee97595f" translate="yes" xml:space="preserve">
          <source>Shortcut for &lt;code&gt;tempfile.open&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="255bf70f0ce00a30ca13478c46d6c566558b2684" translate="yes" xml:space="preserve">
          <source>Shortcut for &lt;code&gt;tempfile.path&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8383ee1de3f9d2b3047d9c0f6f641bab300a1962" translate="yes" xml:space="preserve">
          <source>Shortcut for &lt;code&gt;tempfile.read&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52bde16965a1de7e6fd22f2901c49da91b1d8bdd" translate="yes" xml:space="preserve">
          <source>Shortcut for &lt;code&gt;tempfile.rewind&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b53fba2aede9e7f6d1b96a23423b05776befeb26" translate="yes" xml:space="preserve">
          <source>Shortcut for &lt;code&gt;tempfile.size&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc9a49fb2cfb88bfd214e9b806e6d89453183775" translate="yes" xml:space="preserve">
          <source>Shortcut for &lt;code&gt;tempfile.to_path&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aac815c5dd0316828fb846fc8272ae6a68f08e3b" translate="yes" xml:space="preserve">
          <source>Shortcut helper that returns all the &lt;a href=&quot;api&quot;&gt;ActionController::API&lt;/a&gt; modules except the ones passed as arguments:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9a13b306a8c8bdb0984a91c8fb5addfb9c9ff06" translate="yes" xml:space="preserve">
          <source>Shortcut helper that returns all the modules included in &lt;a href=&quot;base&quot;&gt;ActionController::Base&lt;/a&gt; except the ones passed as arguments:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2644474520952bede63ba52e9df7bffb5022a302" translate="yes" xml:space="preserve">
          <source>Shorthand for wrapping routes in a specific RESTful context. Valid values are &lt;code&gt;:member&lt;/code&gt;, &lt;code&gt;:collection&lt;/code&gt;, and &lt;code&gt;:new&lt;/code&gt;. Only use within &lt;code&gt;resource(s)&lt;/code&gt; block. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2eee144fcaae57b557bd9094b3685f5fcb57ed2f" translate="yes" xml:space="preserve">
          <source>Shorthand to decrypt any encrypted configurations or files.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="433a92b65e3dfa8c12b1915711081664a27c2d9f" translate="yes" xml:space="preserve">
          <source>Should be used with order.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d0313bec30b3bae6f7e24c6ac968a44eaa599ed" translate="yes" xml:space="preserve">
          <source>Should primary key values be selected from their corresponding sequence before the insert statement? If true, next_sequence_value is called before each insert to set the record's primary key.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="852afd47e530f7c318578326ab076256e1a0ae11" translate="yes" xml:space="preserve">
          <source>Should you wish to create a database constraint to prevent possible violations of a uniqueness validation using the &lt;code&gt;:scope&lt;/code&gt; option, you must create a unique index on both columns in your database. See &lt;a href=&quot;https://dev.mysql.com/doc/refman/5.7/en/multiple-column-indexes.html&quot;&gt;the MySQL manual&lt;/a&gt; for more details about multiple column indexes or &lt;a href=&quot;https://www.postgresql.org/docs/current/static/ddl-constraints.html&quot;&gt;the PostgreSQL manual&lt;/a&gt; for examples of unique constraints that refer to a group of columns.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4631eed240058a939a1d85e2af352b769d9ab46a" translate="yes" xml:space="preserve">
          <source>Shoulda then can tell generators to search for test_unit generators when some of them are not available by adding a fallback:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0193674035fb5e5bc435a0705a7d4c4e47f77310" translate="yes" xml:space="preserve">
          <source>Show a 404 page in the browser:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5770fa74493d925f193549290197d8447a8fda40" translate="yes" xml:space="preserve">
          <source>Show a JPEG in the browser:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dafa1913b9721c7cced785671b894105311c5f66" translate="yes" xml:space="preserve">
          <source>Show help message with available generators.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="655c9394cc6f564bde6061950315fb3591ca890c" translate="yes" xml:space="preserve">
          <source>Showing Articles</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e23ed7dadf824139070a98bdf95c37c300982377" translate="yes" xml:space="preserve">
          <source>Sidekiq</source>
          <target state="translated">Sidekiq</target>
        </trans-unit>
        <trans-unit id="333d1db2a611a7467fe7887bfdfb0559a06fd027" translate="yes" xml:space="preserve">
          <source>Sidekiq adapter for Active Job</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df867832e5738922ac3993df179d5f7eb1912bd4" translate="yes" xml:space="preserve">
          <source>Signal that the thread is finished with the current connection. &lt;a href=&quot;connectionpool#method-i-release_connection&quot;&gt;release_connection&lt;/a&gt; releases the connection-thread association and returns the connection to the pool.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a206321251fcb77e76f04d3082b79582ec71024" translate="yes" xml:space="preserve">
          <source>Signature of calls to UJS's event handlers has changed. Unlike the version with jQuery, all custom events return only one parameter: &lt;code&gt;event&lt;/code&gt;. In this parameter, there is an additional attribute &lt;code&gt;detail&lt;/code&gt; which contains an array of extra parameters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4cf0392296064579858651f856889aadbc2805e" translate="yes" xml:space="preserve">
          <source>Signatures</source>
          <target state="translated">Signatures</target>
        </trans-unit>
        <trans-unit id="62b23a2463aa4a9bac6516900cb02ee26c669c3e" translate="yes" xml:space="preserve">
          <source>Silence deprecation warnings within the block.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e949873a03c7e70cfa4c2108a5b6f74f7986da5" translate="yes" xml:space="preserve">
          <source>Silences the logger for the duration of the block.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d945ff88e3b670986d9b6fc77ad08e7bc9d5a7db" translate="yes" xml:space="preserve">
          <source>Silences the logger within a block.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4d48858e53cf3e050f2f939ce69f5baae52a175" translate="yes" xml:space="preserve">
          <source>Silences the logger.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19285667a820e102407753171e14f9c0c6abb69e" translate="yes" xml:space="preserve">
          <source>Silencing Warnings and Exceptions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b37d9ee51616c6ec34e13067c246ec5b9d49c4e" translate="yes" xml:space="preserve">
          <source>Silencing exceptions is also possible with &lt;code&gt;suppress&lt;/code&gt;. This method receives an arbitrary number of exception classes. If an exception is raised during the execution of the block and is &lt;code&gt;kind_of?&lt;/code&gt; any of the arguments, &lt;code&gt;suppress&lt;/code&gt; captures it and returns silently. Otherwise the exception is not captured:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f30e9c3151c99b55484e489df35cbb9e443c697e" translate="yes" xml:space="preserve">
          <source>Similar to &lt;a href=&quot;relation#method-i-create&quot;&gt;create&lt;/a&gt;, but calls &lt;a href=&quot;persistence/classmethods#method-i-create-21&quot;&gt;create!&lt;/a&gt; on the base class. Raises an exception if a validation error occurs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="585241fbbed890823dbe248276f33cb2329546e4" translate="yes" xml:space="preserve">
          <source>Similar to other callbacks in Rails, the &lt;code&gt;setup&lt;/code&gt; and &lt;code&gt;teardown&lt;/code&gt; methods can also be used by passing a block, lambda, or method name as a symbol to call.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ade4bc6509060c9451700d011f98feeaea316e9" translate="yes" xml:space="preserve">
          <source>Similar to the &lt;code&gt;(?)&lt;/code&gt; replacement style of params, you can also specify keys in your conditions string along with a corresponding keys/values hash:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9df17b152e5de2cacd599fc9be052f733257ee6c" translate="yes" xml:space="preserve">
          <source>Similar to the &lt;code&gt;:start&lt;/code&gt; option, &lt;code&gt;:finish&lt;/code&gt; allows you to configure the last ID of the sequence whenever the highest ID is not the one you need. This would be useful, for example, if you wanted to run a batch process using a subset of records based on &lt;code&gt;:start&lt;/code&gt; and &lt;code&gt;:finish&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aaaccd49de59da147a81dfea8d0a31658036b0c2" translate="yes" xml:space="preserve">
          <source>Similar to the Layout Inheritance logic, if a template or partial is not found in the conventional path, the controller will look for a template or partial to render in its inheritance chain. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="695606fd1c0a7a9d926c9b61fe10dd2f87ddf499" translate="yes" xml:space="preserve">
          <source>Similar to the normal callbacks that hook into the life cycle of an Active Record object, you can also define callbacks that get triggered when you add an object to or remove an object from an association collection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a64fce2045de9a662c3eaf568db7ba854339e8a8" translate="yes" xml:space="preserve">
          <source>Similarly to System Tests, files uploaded during Integration Tests will not be automatically cleaned up. If you want to clear the files, you can do it in an &lt;code&gt;after_teardown&lt;/code&gt; callback. Doing it here ensures that all connections created during the test are complete and you won't receive an error from Active Storage saying it can't find a file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b48546cfafa0cc772daa98c1d4cf7c84ddd69398" translate="yes" xml:space="preserve">
          <source>Similarly you can go through a &lt;a href=&quot;classmethods#method-i-has_one&quot;&gt;has_one&lt;/a&gt; association on the join model:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc4fb6a726563143c1c04086d201d673d7729dd3" translate="yes" xml:space="preserve">
          <source>Similarly,</source>
          <target state="translated">Similarly,</target>
        </trans-unit>
        <trans-unit id="806562895d5af40c31c40fc165782ac3423e2940" translate="yes" xml:space="preserve">
          <source>Similarly, &lt;code&gt;from&lt;/code&gt; returns the tail from the element at the passed index to the end. If the index is greater than the length of the array, it returns an empty array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="823520fbbf69df93831e662a9e22dab5f1079f6a" translate="yes" xml:space="preserve">
          <source>Similarly, &lt;code&gt;lib()&lt;/code&gt; creates a file in the &lt;code&gt;lib/&lt;/code&gt; directory and &lt;code&gt;vendor()&lt;/code&gt; creates a file in the &lt;code&gt;vendor/&lt;/code&gt; directory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5974f678df19ae54b99c747fcd5bb44117b5140" translate="yes" xml:space="preserve">
          <source>Similarly, &lt;code&gt;since&lt;/code&gt; moves forward:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2329f1ade7205a10179b4b8c15d32985ac70202" translate="yes" xml:space="preserve">
          <source>Similarly, a simple hash without a statement will generate conditions based on equality with the SQL AND operator. For instance:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0785d76353aeb4c3a94624a05a7d413689bccb50" translate="yes" xml:space="preserve">
          <source>Similarly, if any of the &lt;code&gt;before_remove&lt;/code&gt; callbacks throw an exception, the object will not be removed from the collection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f47d527c0c86fbae774ab2a16a4f749b6f9c6f2" translate="yes" xml:space="preserve">
          <source>Similarly, if minutes are zeroed, then seconds are too (unless it has given a value):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03eb58b7c7e7e685c07bfdbb00619b4bda4fe38c" translate="yes" xml:space="preserve">
          <source>Similarly, if you want it to also look up in the rails namespace, you just need to provide the :in value:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="941d435eae335610b820271b3500152c8c637229" translate="yes" xml:space="preserve">
          <source>Similarly, in the Rails console, if you have a user instance and reload:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5fca9025f3bd3799b63f239043c39a443bdef7a2" translate="yes" xml:space="preserve">
          <source>Similarly, it is only safe to perform an unload/reload when no application code is in mid-execution: after the reload, the &lt;code&gt;User&lt;/code&gt; constant, for example, may point to a different class. Without this rule, a poorly-timed reload would mean &lt;code&gt;User.new.class == User&lt;/code&gt;, or even &lt;code&gt;User == User&lt;/code&gt;, could be false.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84416df61fc2ffa9cca8fe2946b2d418de16f0d7" translate="yes" xml:space="preserve">
          <source>Similarly, module creation using the &lt;code&gt;module&lt;/code&gt; keyword as in</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30d7aa147060cb2e997e84c75d302a8b3911919e" translate="yes" xml:space="preserve">
          <source>Similarly, we can append paths:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4585d198d7124d59cef2e29618ac097b4e50978b" translate="yes" xml:space="preserve">
          <source>Similarly, you can generate a migration to remove a column from the command line:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9d7d47e90352b07c9b7c085f224bcbfdabaeff5" translate="yes" xml:space="preserve">
          <source>Similarly, you can retrieve &lt;code&gt;@product.pictures&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8d2689732c9ee9f176c92a96cb856ad45fe3f9e" translate="yes" xml:space="preserve">
          <source>Similarly, you can use the &lt;code&gt;asset_path&lt;/code&gt; helper in CoffeeScript files with &lt;code&gt;erb&lt;/code&gt; extension (e.g., &lt;code&gt;application.coffee.erb&lt;/code&gt;):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b55b4bbf22e661000fe5c59ce1522188f37eb46" translate="yes" xml:space="preserve">
          <source>Simple &lt;a href=&quot;token&quot;&gt;Token&lt;/a&gt; example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f69a6d9d30d9d67e1d2f51d89ede2ef55a3c7f4d" translate="yes" xml:space="preserve">
          <source>Simple Basic example</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f175d389144fd7058e79ab8ddddf02e7c045b49" translate="yes" xml:space="preserve">
          <source>Simple Digest example</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9ffb2958091ffbef95acd473936527d3c6257271" translate="yes" xml:space="preserve">
          <source>Simple download:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58550eb7ecb2f13baf24cd91c1032ecb6aebb58e" translate="yes" xml:space="preserve">
          <source>Simple formatter which only displays the message.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a418ab726df3acb6cb940caf827a61c3fd0495d7" translate="yes" xml:space="preserve">
          <source>Simple memory backed cache. This cache is not thread safe and is intended only for serving as a temporary memory cache for a single thread.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ffa1aa3a24dc79f541326784142d0ceaaf3775c8" translate="yes" xml:space="preserve">
          <source>Simple, efficient background processing for Ruby. Sidekiq uses threads to handle many jobs at the same time in the same process. It does not require Rails but will integrate tightly with it to make background processing dead simple.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e181ef792b8d98d2b618afb6c4fa50553c065a8d" translate="yes" xml:space="preserve">
          <source>Simply pass a file name like &quot;../../../etc/passwd&quot; to download the server's login information. A simple solution against this, is to &lt;em&gt;check that the requested file is in the expected directory&lt;/em&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6289e7104f6c09e541fedb477922ab57cd396af" translate="yes" xml:space="preserve">
          <source>Simply use &lt;a href=&quot;../connectionhandling#method-i-connection&quot;&gt;ActiveRecord::Base.connection&lt;/a&gt; as with Active Record 2.1 and earlier (pre-connection-pooling). Eventually, when you're done with the connection(s) and wish it to be returned to the pool, you call &lt;a href=&quot;connectionhandler#method-i-clear_active_connections-21&quot;&gt;ActiveRecord::Base.clear_active_connections!&lt;/a&gt;. This will be the default behavior for Active Record when used in conjunction with Action Pack's request handling cycle.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb12353bd4c58b286926ee0bb693828cfd6f9ebd" translate="yes" xml:space="preserve">
          <source>Simulate a DELETE request with the given parameters and set/volley the response. See &lt;code&gt;get&lt;/code&gt; for more details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ae40aaa29a492786034fe7fd7c5dad86b059e57" translate="yes" xml:space="preserve">
          <source>Simulate a GET request with the given parameters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80d4b0280bf9e776c0c3c47f99387a4ad0b9c227" translate="yes" xml:space="preserve">
          <source>Simulate a HEAD request with the given parameters and set/volley the response. See &lt;code&gt;get&lt;/code&gt; for more details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1c37a80a39760ec283c1e95a8e205a6fd58a1644" translate="yes" xml:space="preserve">
          <source>Simulate a PATCH request with the given parameters and set/volley the response. See &lt;code&gt;get&lt;/code&gt; for more details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47f9a7acf53f8a03a8bf4b584484fb51bceb3186" translate="yes" xml:space="preserve">
          <source>Simulate a POST request with the given parameters and set/volley the response. See &lt;code&gt;get&lt;/code&gt; for more details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ead1d9b5997c064f26ffafd1baaa1e07785e8dff" translate="yes" xml:space="preserve">
          <source>Simulate a PUT request with the given parameters and set/volley the response. See &lt;code&gt;get&lt;/code&gt; for more details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5056f9ec4cf3aeb7e78febe7edf1136ef70360d6" translate="yes" xml:space="preserve">
          <source>Simulate a connection attempt by calling &lt;code&gt;connect&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4361ab811eb89a95e36f61ee81ac06c6f03e46e" translate="yes" xml:space="preserve">
          <source>Simulate an HTTP request to &lt;code&gt;action&lt;/code&gt; by specifying request method, parameters and set/volley the response.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08601c8db0fa28cdaae2da24fc0bea686dfcde72" translate="yes" xml:space="preserve">
          <source>Since &lt;a href=&quot;railtie&quot;&gt;Rails::Railtie&lt;/a&gt; cannot be instantiated, any methods that call &lt;code&gt;instance&lt;/code&gt; are intended to be called only on subclasses of a &lt;a href=&quot;railtie&quot;&gt;Railtie&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7f7b0ec2b77f9c26c13c8c47b202e8e901b0889" translate="yes" xml:space="preserve">
          <source>Since &lt;code&gt;ActionController::Metal&lt;/code&gt; controllers cannot render, the controller must include &lt;code&gt;AbstractController::Rendering&lt;/code&gt;, &lt;code&gt;ActionController::Rendering&lt;/code&gt;, and &lt;code&gt;ActionController::Renderers&lt;/code&gt;, and have at least one renderer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23fce5a3f3ee6e01b490249ea633940672651f98" translate="yes" xml:space="preserve">
          <source>Since &lt;code&gt;DateTime&lt;/code&gt; is not DST-aware you can end up in a non-existing point in time with no warning or error telling you so.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3bb4ae803676c9c1b9f093d431f06db7d4011f0" translate="yes" xml:space="preserve">
          <source>Since &lt;code&gt;false.blank?&lt;/code&gt; is true, if you want to validate the presence of a boolean field you should use one of the following validations:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9a7dd0c368383af9c3b8c3a7214f0c322828823" translate="yes" xml:space="preserve">
          <source>Since &lt;code&gt;false.present?&lt;/code&gt; is false, if you want to validate the absence of a boolean field you should use &lt;code&gt;validates :field_name, exclusion: { in: [true, false] }&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d950e25a5b76c0d409b89859069376977b125bc" translate="yes" xml:space="preserve">
          <source>Since &lt;code&gt;web-console&lt;/code&gt; evaluates plain Ruby code remotely on the server, don't try to use it in production.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5d2ea6bb89d365280fe13905cecd5a67657ce1c" translate="yes" xml:space="preserve">
          <source>Since &lt;code&gt;with_options&lt;/code&gt; forwards calls to its receiver they can be nested. Each nesting level will merge inherited defaults in addition to their own.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8149c03564c999d819297ea64deee8de75cb4940" translate="yes" xml:space="preserve">
          <source>Since Action Cable is used at different levels inside your application, you'll need to test both the channels, connection classes themselves, and that other entities broadcast correct messages.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c2d5a6d51fa286fc341a373613bbdea4e8ce51b" translate="yes" xml:space="preserve">
          <source>Since HTML and JavaScript requests are typically made from the browser, we need to ensure to verify request authenticity for the web browser. We can use session-oriented authentication for these types of requests, by using the &lt;code&gt;protect_from_forgery&lt;/code&gt; method in our controllers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81528ec448a0b44f65741f2f6b53addb0d73824a" translate="yes" xml:space="preserve">
          <source>Since Rails 3.0, generators are built on top of &lt;a href=&quot;https://github.com/erikhuda/thor&quot;&gt;Thor&lt;/a&gt;. Thor provides powerful options for parsing and a great API for manipulating files. For instance, let's build a generator that creates an initializer file named &lt;code&gt;initializer.rb&lt;/code&gt; inside &lt;code&gt;config/initializers&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75070826b32ef1d49655e10f95c9fc706ca2f24d" translate="yes" xml:space="preserve">
          <source>Since Rails 3.0, this is easy to do due to the hooks concept. Our new helper does not need to be focused in one specific test framework, it can simply provide a hook and a test framework just needs to implement this hook in order to be compatible.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b12c112b07be0a713656dc6731fee33f00d683f" translate="yes" xml:space="preserve">
          <source>Since Rails checks the top-level namespace &lt;code&gt;User&lt;/code&gt; gets autoloaded just fine the first time the &lt;code&gt;user&lt;/code&gt; method is invoked. You only get the exception if the &lt;code&gt;User&lt;/code&gt; constant is known at that point, in particular in a &lt;em&gt;second&lt;/em&gt; call to &lt;code&gt;user&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d036f4f228ef580720a6781e483065832fa4a7e4" translate="yes" xml:space="preserve">
          <source>Since Rails doesn't restrict the symbols that you use to set I18n.locale, you can leverage this system to display different content depending on anything you like. For example, suppose you have some &quot;expert&quot; users that should see different pages from &quot;normal&quot; users. You could add the following to &lt;code&gt;app/controllers/application.rb&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86d1ed22d1346bb464c5198706ffe87567f6a766" translate="yes" xml:space="preserve">
          <source>Since Ruby is a dynamic language, some code will cause different Rails frameworks to load. Take this snippet for instance:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="837353e77da05a1579b00d60a353395a974fa411" translate="yes" xml:space="preserve">
          <source>Since all your controllers inherit from ApplicationController, they will use &lt;code&gt;app/views/layouts/application.html.erb&lt;/code&gt; if no other layout is specified or provided.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7817e46097e7dc12905e210219b4af7aa51b464" translate="yes" xml:space="preserve">
          <source>Since filenames on the load path are shared across gems, be sure that files you load through a railtie have unique names.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6520c3d3b73a2ffe81d795ac7d8a2a18a387b3c9" translate="yes" xml:space="preserve">
          <source>Since fixtures are a testing construct, we use them in our unit and functional tests. There are two ways to use the fixtures, but first let's take a look at a sample unit test:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8bb0cac962d1c344f493a08a09e0a517c801a789" translate="yes" xml:space="preserve">
          <source>Since in this case the name of the generated method is composed of the target object and target method names, the &lt;code&gt;:to&lt;/code&gt; option must be a method name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab139d63404dff462dc520e7f623b4efc9be75fa" translate="yes" xml:space="preserve">
          <source>Since it is possible to embed ERB in your &lt;code&gt;config/database.yml&lt;/code&gt; it is best practice to explicitly show you are using the &lt;code&gt;ENV['DATABASE_URL']&lt;/code&gt; to connect to your database. This is especially useful in production since you should not commit secrets like your database password into your source control (such as Git).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e9f4738f88a3d458e64f0551dc9a7d6ecf230ee0" translate="yes" xml:space="preserve">
          <source>Since it's just a &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt;, all of the information on &lt;code&gt;form_with&lt;/code&gt; also applies.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="afff38a6a841fc28bfd2a634f26a61e485d5aeac" translate="yes" xml:space="preserve">
          <source>Since jobs run in parallel to your Rails application, most queuing libraries require that you start a library-specific queuing service (in addition to starting your Rails app) for the job processing to work. Refer to library documentation for instructions on starting your queue backend.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73494a969c71c710ebb395a4f20bd85d6226ae1f" translate="yes" xml:space="preserve">
          <source>Since only one table is loaded at a time, conditions or orders cannot reference tables other than the main one. If this is the case, Active Record falls back to the previously used &lt;code&gt;LEFT OUTER JOIN&lt;/code&gt; based strategy. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93ff2408125421dba3c27ae137f9e9eef6adc6e9" translate="yes" xml:space="preserve">
          <source>Since pool is not in the &lt;code&gt;ENV['DATABASE_URL']&lt;/code&gt; provided connection information its information is merged in. Since &lt;code&gt;adapter&lt;/code&gt; is duplicate, the &lt;code&gt;ENV['DATABASE_URL']&lt;/code&gt; connection information wins.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e4627e7042c6cfc9023032fa82c17031973f8e1" translate="yes" xml:space="preserve">
          <source>Since processes will not share cache data when using &lt;code&gt;:memory_store&lt;/code&gt;, it will not be possible to manually read, write, or expire the cache via the Rails console.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9aaec5f3d7a66e0f1f0028cf4565da8e4e12bd4e" translate="yes" xml:space="preserve">
          <source>Since the &lt;code&gt;notice&lt;/code&gt; and &lt;code&gt;alert&lt;/code&gt; keys are a common idiom, convenience accessors are available:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6de71397c47fe8235cd9de4a2650397a6c5dbd38" translate="yes" xml:space="preserve">
          <source>Since the IP address may not be needed, we store the object here without calculating the IP to keep from slowing down the majority of requests. For those requests that do need to know the IP, the &lt;a href=&quot;remoteip/getip#method-i-calculate_ip&quot;&gt;ActionDispatch::RemoteIp::GetIp#calculate_ip&lt;/a&gt; method will calculate the memoized client IP address.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc6e06016bbdbd20c2d5d24525c6c819566708da" translate="yes" xml:space="preserve">
          <source>Since the connection pooling is handled inside of Active Record by default, all application servers (Thin, Puma, Unicorn etc.) should behave the same. The database connection pool is initially empty. As demand for connections increases it will create them until it reaches the connection pool limit.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="937911717a3add254583eaf6c8908a19d35075ca" translate="yes" xml:space="preserve">
          <source>Since the lookup is exhausted without success, a similar search for a directory is performed, we are going to see why in the &lt;a href=&quot;#automatic-modules&quot;&gt;next section&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15e111e4237fb0cbb145baaf5d6e92da0116cbe6" translate="yes" xml:space="preserve">
          <source>Since the return value of &lt;code&gt;default_url_options&lt;/code&gt; is cached per request, the URLs in a locale selector cannot be generated invoking helpers in a loop that sets the corresponding &lt;code&gt;I18n.locale&lt;/code&gt; in each iteration. Instead, leave &lt;code&gt;I18n.locale&lt;/code&gt; untouched, and pass an explicit &lt;code&gt;:locale&lt;/code&gt; option to the helper, or edit &lt;code&gt;request.original_fullpath&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="514f881e3fbcf45cd09ff19fe93c6d553072b04a" translate="yes" xml:space="preserve">
          <source>Since there are two ways to configure your connection (using &lt;code&gt;config/database.yml&lt;/code&gt; or using an environment variable) it is important to understand how they can interact.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb9a79b3fe37d17b076ae520a59064b28ee7c339" translate="yes" xml:space="preserve">
          <source>Since this incineration is set for the future, it'll automatically ignore any &lt;code&gt;InboundEmail&lt;/code&gt;s that have already been deleted and discard itself if so.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6a06bc8cf87dcf261c832053fec2a2e9e008b92" translate="yes" xml:space="preserve">
          <source>Since this is a frequent mistake, the format validator (validates_format_of) now raises an exception if the provided regular expression starts with ^ or ends with $. If you do need to use ^ and $ instead of \A and \z (which is rare), you can set the :multiline option to true, like so:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a80015205edd9e9d41fb2e0cf090b1c62521532" translate="yes" xml:space="preserve">
          <source>Since this is a regular Ruby source file you can use all of its features to help you define your routes but be careful with variable names as they can clash with the DSL methods of the router.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b42720c80b4b74a5d26f9406a0bab2ffdef61f29" translate="yes" xml:space="preserve">
          <source>Since using &lt;code&gt;after_commit&lt;/code&gt; callback only on create, update, or delete is common, there are aliases for those operations:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="844bf90fab048dd263df7b599d51a6792c28f7c9" translate="yes" xml:space="preserve">
          <source>Since we changed the &lt;code&gt;author_class&lt;/code&gt; method to return a &lt;code&gt;Class&lt;/code&gt; instead of a &lt;code&gt;String&lt;/code&gt;, we must also modify our &lt;code&gt;belongs_to&lt;/code&gt; definition in the &lt;code&gt;Blorgh::Article&lt;/code&gt; model:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48c43fc528d3ccee16f0d6bf0cd42002e7731fdd" translate="yes" xml:space="preserve">
          <source>Since we need to know all instance methods before attaching the log subscriber, the line above should be called after your &lt;code&gt;ActiveRecord::LogSubscriber&lt;/code&gt; definition.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fac40be2bb0904ce3a3c5901d84af7aff89d4ed7" translate="yes" xml:space="preserve">
          <source>Since you can now mount an engine inside application's routes, you do not have direct access to &lt;code&gt;Engine&lt;/code&gt;'s &lt;code&gt;url_helpers&lt;/code&gt; inside &lt;code&gt;Application&lt;/code&gt;. When you mount an engine in an application's routes, a special helper is created to allow you to do that. Consider such a scenario:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78324332fa433ec8196797bff29216842cc815a9" translate="yes" xml:space="preserve">
          <source>Since your custom jobs can be queued at different levels inside your application, you'll need to test both the jobs themselves (their behavior when they get enqueued) and that other entities correctly enqueue them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b133d88c1a11a2504ec7f0802f4a64c745597bf" translate="yes" xml:space="preserve">
          <source>Single Table Inheritance</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9e81a92be1ea8ba2afb85e461ae8359b4306ad3" translate="yes" xml:space="preserve">
          <source>Single Table Inheritance (STI) is a feature of Active Record that enables storing a hierarchy of models in one single table. The API of such models is aware of the hierarchy and encapsulates some common needs. For example, given these classes:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8c74a547c530b61b09111d7b3aea2fee5e55edf" translate="yes" xml:space="preserve">
          <source>Single Table Inheritance is a feature that doesn't play well with lazy loading. Reason is, its API generally needs to be able to enumerate the STI hierarchy to work correctly, whereas lazy loading defers loading classes until they are referenced. You can't enumerate what you haven't referenced yet.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b273dbf7f3afb156c056d3b029a701b4e1dc059b" translate="yes" xml:space="preserve">
          <source>Single aggregate value: The single value is type cast to &lt;a href=&quot;../integer&quot;&gt;Integer&lt;/a&gt; for COUNT, Float for AVG, and the given column's type for everything else.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39680f09ad98b7fcdc9f85ec906415abf8801cd8" translate="yes" xml:space="preserve">
          <source>Single table inheritance</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="964bd87e4bd8158c3246a0ad49d1a5eb6a613ef3" translate="yes" xml:space="preserve">
          <source>Singular Resources</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cba7c0cce0753bcb2998aa91de8bb3e0f159fb3f" translate="yes" xml:space="preserve">
          <source>Singular associations (one-to-one)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="136c9a55cf7f35c917c777f08c3361d7f0d8b441" translate="yes" xml:space="preserve">
          <source>Singular forms are aliased so you are able to say:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9bffce4ec80552790dcff2192314fd5640f381da" translate="yes" xml:space="preserve">
          <source>Singular names are not handled correctly:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e8a8f3f52578adcf1233137dcab410dc63cbdbd" translate="yes" xml:space="preserve">
          <source>Size of collection</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee0c71938e5513c6d9e70ab8176c95f3ac0bba7b" translate="yes" xml:space="preserve">
          <source>Skip a callback after actions. See &lt;a href=&quot;classmethods#method-i-_insert_callbacks&quot;&gt;#_insert_callbacks&lt;/a&gt; for parameter details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3aaa2af87c772c088867e6b79c9cbf6fc61a41a" translate="yes" xml:space="preserve">
          <source>Skip a callback around actions. See &lt;a href=&quot;classmethods#method-i-_insert_callbacks&quot;&gt;#_insert_callbacks&lt;/a&gt; for parameter details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3deadc66d7c47731a58204842ddf2fe333aa4c89" translate="yes" xml:space="preserve">
          <source>Skip a callback before actions. See &lt;a href=&quot;classmethods#method-i-_insert_callbacks&quot;&gt;#_insert_callbacks&lt;/a&gt; for parameter details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="748d3968f08889167bf852158bfae04c3fbcda4c" translate="yes" xml:space="preserve">
          <source>Skip a previously set callback. Like &lt;code&gt;set_callback&lt;/code&gt;, &lt;code&gt;:if&lt;/code&gt; or &lt;code&gt;:unless&lt;/code&gt; options may be passed in order to control when the callback is skipped.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e1ef9f1ecc8b1a5248ace834dc8c7953b889c40" translate="yes" xml:space="preserve">
          <source>Skipping Callbacks</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3de3554466187c5df8509ac5d1f77fad67b22efd" translate="yes" xml:space="preserve">
          <source>Skipping Validations</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b8d3bff7b282e8424f968f9e948b9dc2006e7fb" translate="yes" xml:space="preserve">
          <source>Slicing</source>
          <target state="translated">Slicing</target>
        </trans-unit>
        <trans-unit id="8d2b2d015bbba4712c276518940d0fde148920d4" translate="yes" xml:space="preserve">
          <source>Small macro to add ruby as an option to the generator with proper default value plus an instance helper method called shebang.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bacca391addb1d5ea01320b0aefde7a8812344ed" translate="yes" xml:space="preserve">
          <source>Sneakers</source>
          <target state="translated">Sneakers</target>
        </trans-unit>
        <trans-unit id="18283ebb9704237459b661e8eea133ede6aaa231" translate="yes" xml:space="preserve">
          <source>Sneakers adapter for Active Job</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2bf6d1f199a6352eae4a43c353049a14516fa1ba" translate="yes" xml:space="preserve">
          <source>Sniff the cookie in an insecure network. A wireless LAN can be an example of such a network. In an unencrypted wireless LAN, it is especially easy to listen to the traffic of all connected clients. For the web application builder this means to &lt;em&gt;provide a secure connection over SSL&lt;/em&gt;. In Rails 3.1 and later, this could be accomplished by always forcing SSL connection in your application config file:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36a22d776331316c2fe1fdfe4a2d0ec66f399cc2" translate="yes" xml:space="preserve">
          <source>So &lt;em&gt;attack vectors for Header Injection are based on the injection of CRLF characters in a header field.&lt;/em&gt; And what could an attacker do with a false redirection? They could redirect to a phishing site that looks the same as yours, but ask to login again (and sends the login credentials to the attacker). Or they could install malicious software through browser security holes on that site. Rails 2.1.2 escapes these characters for the Location field in the &lt;code&gt;redirect_to&lt;/code&gt; method. &lt;em&gt;Make sure you do it yourself when you build other header fields with user input.&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed1fdd6bb559ec92207c6b513feaf5f8ec58bd9d" translate="yes" xml:space="preserve">
          <source>So first, let's add the delete link in the &lt;code&gt;app/views/comments/_comment.html.erb&lt;/code&gt; partial:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e659a4aeeb3a24ba8d4616e7f9ee1e37e219754" translate="yes" xml:space="preserve">
          <source>So first, we'll wire up the Article show template (&lt;code&gt;app/views/articles/show.html.erb&lt;/code&gt;) to let us make a new comment:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="663030613cba72da1300efdd122528c3de899769" translate="yes" xml:space="preserve">
          <source>So for example, if you are sending this JSON content:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="547166c4574d2fdd3323e5154b3505de54f7c665" translate="yes" xml:space="preserve">
          <source>So that &lt;code&gt;self&lt;/code&gt;&lt;code&gt;acts_like?(:time)&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a82119b5a025f1d8592133ca05e639acbc3d5dc" translate="yes" xml:space="preserve">
          <source>So that would give you:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9d448448d8f1156262d386aefdd4a8656b26de5" translate="yes" xml:space="preserve">
          <source>So the payload is in the style attribute. But there are no quotes allowed in the payload, because single and double quotes have already been used. But JavaScript has a handy eval() function which executes any string as code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="459da2e04394151d279408b1b04fc4d6e076c8ec" translate="yes" xml:space="preserve">
          <source>So the values are scoped within the Thread.current space under the class name of the module.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="269ba714c689e29a9952e870c5b88c37ad7d462e" translate="yes" xml:space="preserve">
          <source>So this example for rendering all the products:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c22d762559bdf43a7b1431eba21c24832dbe598" translate="yes" xml:space="preserve">
          <source>So when passing such a model record, Rails infers the URL and method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7cd0d59ad93af98a63ca031c0d0dd6706d7280e" translate="yes" xml:space="preserve">
          <source>So you specify the object you want to be messaged on a given callback. When that callback is triggered, the object has a method by the name of the callback messaged. You can make these callbacks more flexible by passing in other initialization data such as the name of the attribute to work with:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eba727693650ff1f4048d128ae76034326618e44" translate="yes" xml:space="preserve">
          <source>So, all of the following equivalent lookups will return the &lt;code&gt;:short&lt;/code&gt; date format &lt;code&gt;&quot;%b %d&quot;&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d760144cbefdaa9df3aaa55690f762154f3f82d" translate="yes" xml:space="preserve">
          <source>So, for example, instead of the default error message &lt;code&gt;&quot;cannot be blank&quot;&lt;/code&gt; you could use the attribute name like this : &lt;code&gt;&quot;Please fill in your %{attribute}&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1b3fadcf15fa5f26208625f190c75c819296322" translate="yes" xml:space="preserve">
          <source>So, in the previous example, if &lt;code&gt;PostsController&lt;/code&gt; is not defined when the file is interpreted Rails autoloading is not going to be triggered, Ruby will just define the controller.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb0bdfb16aef90abc63d52423dc49bf9469d8ea8" translate="yes" xml:space="preserve">
          <source>So, in the process of &lt;em&gt;internationalizing&lt;/em&gt; your Rails application you have to:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="081ae573fc7c5d6538af8dc43c96cde33f2a9a2f" translate="yes" xml:space="preserve">
          <source>So, it is in general not equivalent to what Ruby would do in the same spot, had a real constant be evaluated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f565891e9fc28f9796df86cada91d1f283e16140" translate="yes" xml:space="preserve">
          <source>So, it not only doesn't end in &lt;code&gt;A&lt;/code&gt;, which does not even belong to the nesting, but it also contains &lt;code&gt;X::Y&lt;/code&gt;, which is independent from &lt;code&gt;A::B&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ac24190b05f32618eeb318196ff4e4c2cd2a220" translate="yes" xml:space="preserve">
          <source>So, let's internationalize a simple Rails application from the ground up in the next chapters!</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d61fa6718d92ad75dade88c21c785dacafcbe980" translate="yes" xml:space="preserve">
          <source>Solutions to common autoloading gotchas</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="639e2aafc30e6bd1823b94eef6efe9ce22e7c867" translate="yes" xml:space="preserve">
          <source>Some Rack servers concatenate repeated headers, like &lt;a href=&quot;https://www.w3.org/Protocols/rfc2616/rfc2616-sec4.html#sec4.2&quot;&gt;HTTP RFC 2616&lt;/a&gt; requires. Some Rack servers simply drop preceding headers, and only report the value that was &lt;a href=&quot;http://andre.arko.net/2011/12/26/repeated-headers-and-ruby-web-servers&quot;&gt;given in the last header&lt;/a&gt;. If you are behind multiple proxy servers (like NGINX to HAProxy to Unicorn) then you should test your Rack server to make sure your data is good.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17f2e4c3e2d9250a50f0ec9c6dfbc876f87186a2" translate="yes" xml:space="preserve">
          <source>Some adapters may support additional options; see the adapter specific API docs for further information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e02d0ea68388f1a5aca6f6331bd12fb3c073f1f8" translate="yes" xml:space="preserve">
          <source>Some cache implementation may optimize this method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22a99ee78a464d23e413764971063331ab262a92" translate="yes" xml:space="preserve">
          <source>Some commands cannot be reversed. If you care to define how to move up and down in these cases, you should define the &lt;code&gt;up&lt;/code&gt; and &lt;code&gt;down&lt;/code&gt; methods as before.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="acbccdbf68446579681db1db9f645f4c921a89bd" translate="yes" xml:space="preserve">
          <source>Some common modules you might want to add:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ccbc56884e438c261868175bf3abdb7682cbc3b" translate="yes" xml:space="preserve">
          <source>Some commonly used &lt;a href=&quot;#column-modifiers&quot;&gt;type modifiers&lt;/a&gt; can be passed directly on the command line. They are enclosed by curly braces and follow the field type:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="abdd0870e7d5561056334a82c8be6bd690fee6af" translate="yes" xml:space="preserve">
          <source>Some drivers require browser capabilities to be passed as a block instead of through the &lt;code&gt;options&lt;/code&gt; hash.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5bd0dc1b029806cd1653e46816c3d73177f3c7c5" translate="yes" xml:space="preserve">
          <source>Some engines choose to use this file to put global configuration options for their engine. It's a relatively good idea, so if you want to offer configuration options, the file where your engine's &lt;code&gt;module&lt;/code&gt; is defined is perfect for that. Place the methods inside the module and you'll be good to go.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b0b7b39663d630836476f0f8e55ebeb35233fd6" translate="yes" xml:space="preserve">
          <source>Some extensions can only be made to work with knowledge of the association's internals. Extensions can access relevant state using the following methods (where &lt;code&gt;items&lt;/code&gt; is the name of the association):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="012b0b0b7019094a8d3703407837ccd5a4d5bd6a" translate="yes" xml:space="preserve">
          <source>Some features of Action View are tied to Active Record, but that doesn't mean Action View depends on Active Record. Action View is an independent package that can be used with any sort of Ruby libraries.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ce42bce8b7533ed61df9cff307f393368b37bbf" translate="yes" xml:space="preserve">
          <source>Some implementations may not support all methods beyond the basic cache methods of &lt;code&gt;fetch&lt;/code&gt;, &lt;code&gt;write&lt;/code&gt;, &lt;code&gt;read&lt;/code&gt;, &lt;code&gt;exist?&lt;/code&gt;, and &lt;code&gt;delete&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c57ad4221b4b2489b3697c146e6a288361c268c2" translate="yes" xml:space="preserve">
          <source>Some implementations may not support this method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6cc2b40a58e318609a42ad261e97c48e83ff6ee4" translate="yes" xml:space="preserve">
          <source>Some non-image blobs can be previewed: that is, they can be presented as images. A video blob can be previewed by extracting its first frame, and a PDF blob can be previewed by extracting its first page.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9fadf5415820639e14342b0da5f1c3db366eaa54" translate="yes" xml:space="preserve">
          <source>Some non-image files can be previewed: that is, they can be presented as images. For example, a video file can be previewed by extracting its first frame. Out of the box, Active Storage supports previewing videos and PDF documents.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47a4fb7a899ec215af9678a4164bc8fde5777012" translate="yes" xml:space="preserve">
          <source>Some other tools to go further with the translation process of your application</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a324dea7fc9a2e196bcaee0d8c8b6b1102e7d8a8" translate="yes" xml:space="preserve">
          <source>Some parts of Rails can also be configured externally by supplying environment variables. The following environment variables are recognized by various parts of Rails:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e63f31c83cfffa801ba4ac52c8e5ed159e38583" translate="yes" xml:space="preserve">
          <source>Some parts of your application, notably routing, are not yet set up at the point where the &lt;code&gt;after_initialize&lt;/code&gt; block is called.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31f92cc3efa12a735cdb87dc805fef4752ac97b2" translate="yes" xml:space="preserve">
          <source>Some projects want something like &lt;code&gt;app/api/base.rb&lt;/code&gt; to define &lt;code&gt;API::Base&lt;/code&gt;, and add &lt;code&gt;app&lt;/code&gt; to the autoload paths to accomplish that in &lt;code&gt;classic&lt;/code&gt; mode. Since Rails adds all subdirectories of &lt;code&gt;app&lt;/code&gt; to the autoload paths automatically, we have another situation in which there are nested root directories, so that setup no longer works. Similar principle we explained above with &lt;code&gt;concerns&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49d43d0bd985a9db78999c33d930cad73582dd4f" translate="yes" xml:space="preserve">
          <source>Some transformations are destructive in a manner that cannot be reversed. Migrations of that kind should raise an &lt;code&gt;ActiveRecord::IrreversibleMigration&lt;/code&gt; exception in their &lt;code&gt;down&lt;/code&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1175d58ab8cc83e11600e1579e07f73192d1c005" translate="yes" xml:space="preserve">
          <source>Sometimes inexperienced developers think of &lt;code&gt;redirect_to&lt;/code&gt; as a sort of &lt;code&gt;goto&lt;/code&gt; command, moving execution from one place to another in your Rails code. This is &lt;em&gt;not&lt;/em&gt; correct. Your code stops running and waits for a new request from the browser. It just happens that you've told the browser what request it should make next, by sending back an HTTP 302 status code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c04851e2df3606facf9426c9ac1a3470704789a" translate="yes" xml:space="preserve">
          <source>Sometimes it is not possible or convenient to declare the valid keys of a hash parameter or its internal structure. Just map to an empty hash:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1a5aac90a7beeb064ddaa7cfd604a5c2715cb48" translate="yes" xml:space="preserve">
          <source>Sometimes it is useful to have access to the owner object when building the query. The owner is passed as a parameter to the block. For example, the following association would find all events that occur on the user's birthday:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="647c0f7c826271acfb85dc8d01def71f45cc6cf0" translate="yes" xml:space="preserve">
          <source>Sometimes it is useful to have multiple validations use one condition. It can be easily achieved using &lt;code&gt;with_options&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="806bfa8f6c9c40953e9c40e5b929ecaf7feb9b46" translate="yes" xml:space="preserve">
          <source>Sometimes it will make sense to validate an object only when a given predicate is satisfied. You can do that by using the &lt;code&gt;:if&lt;/code&gt; and &lt;code&gt;:unless&lt;/code&gt; options, which can take a symbol, a &lt;code&gt;Proc&lt;/code&gt; or an &lt;code&gt;Array&lt;/code&gt;. You may use the &lt;code&gt;:if&lt;/code&gt; option when you want to specify when the validation &lt;strong&gt;should&lt;/strong&gt; happen. If you want to specify when the validation &lt;strong&gt;should not&lt;/strong&gt; happen, then you may use the &lt;code&gt;:unless&lt;/code&gt; option.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0fa51c3c43cae44b1f6487b1407dbb7c4858da4a" translate="yes" xml:space="preserve">
          <source>Sometimes it's desirable to filter out from log files some sensitive locations your application is redirecting to. You can do that by using the &lt;code&gt;config.filter_redirect&lt;/code&gt; configuration option:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed5b349ad929e1f8b99a8a5db115fb944e252d8b" translate="yes" xml:space="preserve">
          <source>Sometimes the callback methods that you'll write will be useful enough to be reused by other models. Active Record makes it possible to create classes that encapsulate the callback methods, so it becomes very easy to reuse them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1aaab67ce17ac80d9d95e7c90dfdd8acc5415155" translate="yes" xml:space="preserve">
          <source>Sometimes the code needs that the callbacks execute in a specific order. For example, a &lt;code&gt;before_destroy&lt;/code&gt; callback (&lt;code&gt;log_children&lt;/code&gt; in this case) should be executed before the children get destroyed by the &lt;code&gt;dependent: :destroy&lt;/code&gt; option.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b813be917edfa92b272904aff35a7c104b222861" translate="yes" xml:space="preserve">
          <source>Sometimes we want to cache response, for example a static page, that never gets expired. To achieve this, we can use &lt;code&gt;http_cache_forever&lt;/code&gt; helper and by doing so browser and proxies will cache it indefinitely.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33431bbc0d57c3220576993d932bba29f50ce791" translate="yes" xml:space="preserve">
          <source>Sometimes when submitting data to an external resource, like a payment gateway, the fields that can be used in the form are limited by an external API and it may be undesirable to generate an &lt;code&gt;authenticity_token&lt;/code&gt;. To not send a token, simply pass &lt;code&gt;false&lt;/code&gt; to the &lt;code&gt;:authenticity_token&lt;/code&gt; option:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10d15bed3374c2996525b94716e6774265d7976f" translate="yes" xml:space="preserve">
          <source>Sometimes you do not want to subscribe to an event for the entire life of the application. There are two ways to unsubscribe.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fdb586e1026d32e3f563113c8cd0bf37268edb23" translate="yes" xml:space="preserve">
          <source>Sometimes you don't care about the content of the fixtures as much as you care about the volume. In these cases, you can mix ERB in with your YAML fixtures to create a bunch of fixtures for load testing, like:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b243f95e94a7888bcb94a26edb8be675e16266e7" translate="yes" xml:space="preserve">
          <source>Sometimes you may want to isolate engine, but use helpers that are defined for it. If you want to share just a few specific helpers you can add them to application's helpers in ApplicationController:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef44a6353c07c96f20fcbacbe8fec9be1c637614" translate="yes" xml:space="preserve">
          <source>Sometimes you may want to send a file to the user instead of rendering an HTML page. All controllers in Rails have the &lt;code&gt;send_data&lt;/code&gt; and the &lt;code&gt;send_file&lt;/code&gt; methods, which will both stream data to the client. &lt;code&gt;send_file&lt;/code&gt; is a convenience method that lets you provide the name of a file on the disk and it will stream the contents of that file for you.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e0379ea51bf56a083b447eac426a84eaf2d5f55" translate="yes" xml:space="preserve">
          <source>Sometimes you need to attach a file that doesn&amp;rsquo;t arrive via an HTTP request. For example, you may want to attach a file you generated on disk or downloaded from a user-submitted URL. You may also want to attach a fixture file in a model test. To do that, provide a Hash containing at least an open IO object and a filename:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc8cba81e63b8e7aff4d169aaa87a5258fa54be4" translate="yes" xml:space="preserve">
          <source>Sometimes you need to cache a particular value or query result instead of caching view fragments. Rails' caching mechanism works great for storing &lt;strong&gt;any&lt;/strong&gt; kind of information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64de16e91c52bfaa8ffdb8fcbb39548c8a5732ab" translate="yes" xml:space="preserve">
          <source>Sometimes you need to process a blob after it&amp;rsquo;s uploaded&amp;mdash;for example, to convert it to a different format. Use &lt;code&gt;ActiveStorage::Blob#download&lt;/code&gt; to read a blob&amp;rsquo;s binary data into memory:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b3ddb7670da52ddc35e9ee938e8e75ac77b4ba1" translate="yes" xml:space="preserve">
          <source>Sometimes you need to set up the session and cookie variables for a test. To do this just assign a value to the session or cookie collection:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4aedae8b0dc510d858ac862cd1594adf848336cd" translate="yes" xml:space="preserve">
          <source>Sometimes you want to be able to read the raw attribute data without having the column-determined typecast run its course first. That can be done by using the &lt;code&gt;&amp;lt;attribute&amp;gt;_before_type_cast&lt;/code&gt; accessors that all attributes have. For example, if your Account model has a &lt;code&gt;balance&lt;/code&gt; attribute, you can call &lt;code&gt;account.balance_before_type_cast&lt;/code&gt; or &lt;code&gt;account.id_before_type_cast&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49d4074beeb7c93559808203685fb780a8c50bd1" translate="yes" xml:space="preserve">
          <source>Sometimes you wish to show the name of the person instead of just their email address when they receive the email. The trick to doing that is to format the email address in the format &lt;code&gt;&quot;Full Name&quot; &amp;lt;email&amp;gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c9ab3dcf7dfac6150213638953cbbd774ea91ae" translate="yes" xml:space="preserve">
          <source>Sometimes you'll have template dependencies that can't be derived at all. This is typically the case when rendering happens in helpers. Here's an example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c21c99123bd84f91575af15fa475b039243781f1" translate="yes" xml:space="preserve">
          <source>Sometimes you'll have template dependencies that can't be derived at all. This is typically the case when you have template rendering that happens in helpers. Here's an example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0298e15ef7fcf403fa4d119b20e04be1bf749936" translate="yes" xml:space="preserve">
          <source>Sometimes you'll want to add a column in a migration and populate it immediately after. In that case, you'll need to make a call to &lt;code&gt;Base#reset_column_information&lt;/code&gt; in order to ensure that the model has the latest column data from after the new column was added. Example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32a7a741888121e5bd8b161f350cf1dd152745ef" translate="yes" xml:space="preserve">
          <source>Sometimes your migration will do something which is just plain irreversible; for example, it might destroy some data. In such cases, you can raise &lt;code&gt;ActiveRecord::IrreversibleMigration&lt;/code&gt; in your &lt;code&gt;down&lt;/code&gt; block. If someone tries to revert your migration, an error message will be displayed saying that it can't be done.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5ab51b57e4805fb41bee91c53a83c9e91908662" translate="yes" xml:space="preserve">
          <source>Sometimes, you have a resource that clients always look up without referencing an ID. A common example, /profile always shows the profile of the currently logged in user. In this case, you can use a singular resource to map /profile (rather than /profile/:id) to the show action.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="546121a7dab1a4264cb88f873279ee4930ab1d76" translate="yes" xml:space="preserve">
          <source>Sometimes, you have a resource that clients always look up without referencing an ID. A common example, /profile always shows the profile of the currently logged in user. In this case, you can use a singular resource to map /profile (rather than /profile/:id) to the show action:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9821aa65e416c54fbfb0e34583b018fdb941aa5a" translate="yes" xml:space="preserve">
          <source>Sometimes, you have a resource that clients always look up without referencing an ID. For example, you would like &lt;code&gt;/profile&lt;/code&gt; to always show the profile of the currently logged in user. In this case, you can use a singular resource to map &lt;code&gt;/profile&lt;/code&gt; (rather than &lt;code&gt;/profile/:id&lt;/code&gt;) to the &lt;code&gt;show&lt;/code&gt; action:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18588ba9588729a0bf11a0e540c18d32a4558c52" translate="yes" xml:space="preserve">
          <source>Sometimes, you may want to prevent some pages of your application to be visible on search sites like Google, Bing, Yahoo, or Duck Duck Go. The robots that index these sites will first analyze the &lt;code&gt;http://your-site.com/robots.txt&lt;/code&gt; file to know which pages it is allowed to index.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1e27c0054a21465319cde97e694530bd24339d2" translate="yes" xml:space="preserve">
          <source>Sometimes, you may want to share fields and behavior between different models. Let's say we have Car, Motorcycle, and Bicycle models. We will want to share the &lt;code&gt;color&lt;/code&gt; and &lt;code&gt;price&lt;/code&gt; fields and some methods for all of them, but having some specific behavior for each, and separated controllers too.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6c51f9b6ef06a1464e380f603a5374986275129" translate="yes" xml:space="preserve">
          <source>Sooner or later, most Rails developers will see the error message &quot;Can only render or redirect once per action&quot;. While this is annoying, it's relatively easy to fix. Usually it happens because of a fundamental misunderstanding of the way that &lt;code&gt;render&lt;/code&gt; works.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7bdd165a481c7aa816d352fe33656feacc3c8d28" translate="yes" xml:space="preserve">
          <source>Sort through the various IP address headers, looking for the IP most likely to be the address of the actual remote client making this request.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d09ba380a0c2361c460cc9a3ccaa945d28ef61c4" translate="yes" xml:space="preserve">
          <source>SourceAnnotationExtractor</source>
          <target state="translated">SourceAnnotationExtractor</target>
        </trans-unit>
        <trans-unit id="5482a68ef43c637689bec6a442a1d3acc636a786" translate="yes" xml:space="preserve">
          <source>SourceAnnotationExtractor#display</source>
          <target state="translated">SourceAnnotationExtractor#display</target>
        </trans-unit>
        <trans-unit id="e7a66f7425ddb187f9dcc8f8df06a20bcea69da6" translate="yes" xml:space="preserve">
          <source>SourceAnnotationExtractor#extract_annotations_from</source>
          <target state="translated">SourceAnnotationExtractor#extract_annotations_from</target>
        </trans-unit>
        <trans-unit id="fdc04db5109a2859337ac2b3ba6c5808566129db" translate="yes" xml:space="preserve">
          <source>SourceAnnotationExtractor#find</source>
          <target state="translated">SourceAnnotationExtractor#find</target>
        </trans-unit>
        <trans-unit id="b2636aa55dda5a020380bc878d9eac92b72e4302" translate="yes" xml:space="preserve">
          <source>SourceAnnotationExtractor#find_in</source>
          <target state="translated">SourceAnnotationExtractor#find_in</target>
        </trans-unit>
        <trans-unit id="6b27fad1615133c4a3cd64065f87ca1dbc3e97b9" translate="yes" xml:space="preserve">
          <source>SourceAnnotationExtractor#tag</source>
          <target state="translated">SourceAnnotationExtractor#tag</target>
        </trans-unit>
        <trans-unit id="927fb266f3e3360f474cd7a0665d263cc8a460fa" translate="yes" xml:space="preserve">
          <source>SourceAnnotationExtractor::Annotation</source>
          <target state="translated">SourceAnnotationExtractor::Annotation</target>
        </trans-unit>
        <trans-unit id="ca3e27dbf340caff55cc11e0cf6fe57a55428525" translate="yes" xml:space="preserve">
          <source>SourceAnnotationExtractor::Annotation#to_s</source>
          <target state="translated">SourceAnnotationExtractor::Annotation#to_s</target>
        </trans-unit>
        <trans-unit id="80ab6a0be76ce99b08d36c2d692dc9e96c509d22" translate="yes" xml:space="preserve">
          <source>SourceAnnotationExtractor::Annotation::directories</source>
          <target state="translated">SourceAnnotationExtractor::Annotation::directories</target>
        </trans-unit>
        <trans-unit id="d1057a9993333a60ebfe1d1ae1310d55cdf0134e" translate="yes" xml:space="preserve">
          <source>SourceAnnotationExtractor::Annotation::extensions</source>
          <target state="translated">SourceAnnotationExtractor::Annotation::extensions</target>
        </trans-unit>
        <trans-unit id="feed024322ee2a1069c0891c232ed9da6762ada3" translate="yes" xml:space="preserve">
          <source>SourceAnnotationExtractor::Annotation::register_directories</source>
          <target state="translated">SourceAnnotationExtractor::Annotation::register_directories</target>
        </trans-unit>
        <trans-unit id="ad678d2fb4ccb863b5664792c66a5cffce7398f6" translate="yes" xml:space="preserve">
          <source>SourceAnnotationExtractor::Annotation::register_extensions</source>
          <target state="translated">SourceAnnotationExtractor::Annotation::register_extensions</target>
        </trans-unit>
        <trans-unit id="a5a79c0ac5b48348aa3825b1a9ef593794466f04" translate="yes" xml:space="preserve">
          <source>SourceAnnotationExtractor::Annotation::register_tags</source>
          <target state="translated">SourceAnnotationExtractor::Annotation::register_tags</target>
        </trans-unit>
        <trans-unit id="ae95b9b997d92ec149736a86ae55d11f27ff9cc8" translate="yes" xml:space="preserve">
          <source>SourceAnnotationExtractor::Annotation::tags</source>
          <target state="translated">SourceAnnotationExtractor::Annotation::tags</target>
        </trans-unit>
        <trans-unit id="28635467b0cb2ccb387308c58280c73065485395" translate="yes" xml:space="preserve">
          <source>SourceAnnotationExtractor::enumerate</source>
          <target state="translated">SourceAnnotationExtractor::enumerate</target>
        </trans-unit>
        <trans-unit id="73bdc7ab302c6f6629a825b60c95a9c65a801977" translate="yes" xml:space="preserve">
          <source>SourceAnnotationExtractor::new</source>
          <target state="translated">SourceAnnotationExtractor::new</target>
        </trans-unit>
        <trans-unit id="31b61123ccbccac8855d652a6c8ed6da520016af" translate="yes" xml:space="preserve">
          <source>Sources may be paths to JavaScript files. Relative paths are assumed to be relative to &lt;code&gt;assets/javascripts&lt;/code&gt;, full paths are assumed to be relative to the document root. Relative paths are idiomatic, use absolute paths only when needed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fac2d07e97aeb0877dc2a2bac23ef3a6cb4ba986" translate="yes" xml:space="preserve">
          <source>Special features:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ff74bb4dfd9917012b52e83db57b21942a3fa6f" translate="yes" xml:space="preserve">
          <source>Special instance variables</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93a7e480fca31e54d3a1bf415987f972c987379d" translate="yes" xml:space="preserve">
          <source>Special methods</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4af57eba847e3cf2725b588c58458cf772cbc93f" translate="yes" xml:space="preserve">
          <source>Specific directories can be explicitly set using the &lt;code&gt;:dirs&lt;/code&gt; key in &lt;code&gt;options&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb802eb1ee79c5b27bc9c23c21a620b0c083065e" translate="yes" xml:space="preserve">
          <source>Specifically performs these transformations:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fbfe67187fc913c3d83dc6af8d54778678e1f2ec" translate="yes" xml:space="preserve">
          <source>Specifically, performs these transformations:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9ff7d39e693899b2fb01c2af7e0b9aad8efd43b" translate="yes" xml:space="preserve">
          <source>Specifically:</source>
          <target state="translated">Specifically:</target>
        </trans-unit>
        <trans-unit id="8a0bdde06d07aab22546ac6a6b532fd4009adb8f" translate="yes" xml:space="preserve">
          <source>Specifies a Join Model through which to perform the query. Options for &lt;code&gt;:class_name&lt;/code&gt;, &lt;code&gt;:primary_key&lt;/code&gt;, and &lt;code&gt;:foreign_key&lt;/code&gt; are ignored, as the association uses the source reflection. You can only use a &lt;code&gt;:through&lt;/code&gt; query through a &lt;a href=&quot;classmethods#method-i-has_one&quot;&gt;has_one&lt;/a&gt; or &lt;a href=&quot;classmethods#method-i-belongs_to&quot;&gt;belongs_to&lt;/a&gt; association on the join model.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aae67c493e6f1a2408aa18f00d193a760c563d04" translate="yes" xml:space="preserve">
          <source>Specifies a gem dependency of the application.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97313da8de06e04f3bdf4d5f952ae2257bac51f6" translate="yes" xml:space="preserve">
          <source>Specifies a humanized form of a string by a regular expression rule or by a string mapping. When using a regular expression based replacement, the normal humanize formatting is called after the replacement. When a string is used, the human form should be specified as desired (example: 'The name', not 'the_name').</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="497bd2e2f7d95dff3f019f51563ec431fc530a0e" translate="yes" xml:space="preserve">
          <source>Specifies a limit for the number of records to retrieve.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe09c4e9e2b9c459105f3660498de67b8607a911" translate="yes" xml:space="preserve">
          <source>Specifies a many-to-many relationship with another class. This associates two classes via an intermediate join table. Unless the join table is explicitly specified as an option, it is guessed using the lexical order of the class names. So a join between Developer and Project will give the default join table name of &amp;ldquo;developers_projects&amp;rdquo; because &amp;ldquo;D&amp;rdquo; precedes &amp;ldquo;P&amp;rdquo; alphabetically. Note that this precedence is calculated using the &lt;code&gt;&amp;lt;&lt;/code&gt; operator for &lt;a href=&quot;../../string&quot;&gt;String&lt;/a&gt;. This means that if the strings are of different lengths, and the strings are equal when compared up to the shortest length, then the longer string is considered of higher lexical precedence than the shorter one. For example, one would expect the tables &amp;ldquo;paper_boxes&amp;rdquo; and &amp;ldquo;papers&amp;rdquo; to generate a join table name of &amp;ldquo;papers_paper_boxes&amp;rdquo; because of the length of the name &amp;ldquo;paper_boxes&amp;rdquo;, but it in fact generates a join table name of &amp;ldquo;paper_boxes_papers&amp;rdquo;. Be aware of this caveat, and use the custom &lt;code&gt;:join_table&lt;/code&gt; option if you need to. If your tables share a common prefix, it will only appear once at the beginning. For example, the tables &amp;ldquo;catalog_categories&amp;rdquo; and &amp;ldquo;catalog_products&amp;rdquo; generate a join table name of &amp;ldquo;catalog_categories_products&amp;rdquo;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a49975effc908442d753877bf979f24ae760dd0e" translate="yes" xml:space="preserve">
          <source>Specifies a module or array of modules that will be extended into the association object returned. Useful for defining methods on associations, especially when they should be shared between multiple association objects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5773bbaec0df3c2c8227e76ede82be19307fa4a8" translate="yes" xml:space="preserve">
          <source>Specifies a new acronym. An acronym must be specified as it will appear in a camelized string. An underscore string that contains the acronym will retain the acronym when passed to &lt;code&gt;camelize&lt;/code&gt;, &lt;code&gt;humanize&lt;/code&gt;, or &lt;code&gt;titleize&lt;/code&gt;. A camelized string that contains the acronym will maintain the acronym when titleized or humanized, and will convert the acronym into a non-delimited single lowercase word when passed to &lt;code&gt;underscore&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c92231b602b642675647b55d36bfb2ba59dc313" translate="yes" xml:space="preserve">
          <source>Specifies a new irregular that applies to both pluralization and singularization at the same time. This can only be used for strings, not regular expressions. You simply pass the irregular in singular and plural form.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12a3acd3f57b124d25f27e8afb0a0641d0ce3f9d" translate="yes" xml:space="preserve">
          <source>Specifies a new pluralization rule and its replacement. The rule can either be a string or a regular expression. The replacement should always be a string that may include references to the matched data from the rule.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0fe24c8b47ec5801abdd1631a08ae2e02844bda1" translate="yes" xml:space="preserve">
          <source>Specifies a new singularization rule and its replacement. The rule can either be a string or a regular expression. The replacement should always be a string that may include references to the matched data from the rule.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76e91936e0990326c304e2ab01286b643a9d43d1" translate="yes" xml:space="preserve">
          <source>Specifies a one-to-many association. The following methods for retrieval and query of collections of associated objects will be added:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="191187e1c4d2e58c0f2c2cd4617d4a533667c793" translate="yes" xml:space="preserve">
          <source>Specifies a one-to-one association with another class. This method should only be used if the other class contains the foreign key. If the current class contains the foreign key, then you should use &lt;a href=&quot;classmethods#method-i-belongs_to&quot;&gt;belongs_to&lt;/a&gt; instead. See also ActiveRecord::Associations::ClassMethods's overview on when to use &lt;a href=&quot;classmethods#method-i-has_one&quot;&gt;has_one&lt;/a&gt; and when to use &lt;a href=&quot;classmethods#method-i-belongs_to&quot;&gt;belongs_to&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a80cf3b603f5dcc767e145fe2229165b67d97724" translate="yes" xml:space="preserve">
          <source>Specifies a one-to-one association with another class. This method should only be used if this class contains the foreign key. If the other class contains the foreign key, then you should use &lt;a href=&quot;classmethods#method-i-has_one&quot;&gt;has_one&lt;/a&gt; instead. See also ActiveRecord::Associations::ClassMethods's overview on when to use &lt;a href=&quot;classmethods#method-i-has_one&quot;&gt;has_one&lt;/a&gt; and when to use &lt;a href=&quot;classmethods#method-i-belongs_to&quot;&gt;belongs_to&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d45efdcc74feb0f063b7be11327735c1f00cec40" translate="yes" xml:space="preserve">
          <source>Specifies a polymorphic interface (See &lt;a href=&quot;classmethods#method-i-belongs_to&quot;&gt;belongs_to&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6eb5ac257a24db94c6a1351b9bd9c29aff9ecb8" translate="yes" xml:space="preserve">
          <source>Specifies an association through which to perform the query. This can be any other type of association, including other &lt;code&gt;:through&lt;/code&gt; associations. Options for &lt;code&gt;:class_name&lt;/code&gt;, &lt;code&gt;:primary_key&lt;/code&gt; and &lt;code&gt;:foreign_key&lt;/code&gt; are ignored, as the association uses the source reflection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52d206b3aed6f0aa58164f4538b439b810de3a67" translate="yes" xml:space="preserve">
          <source>Specifies columns which shouldn't be exposed while calling &lt;code&gt;#inspect&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e13ff060fa28f84989e6f6f2c3d6981bc90dd05" translate="yes" xml:space="preserve">
          <source>Specifies locking settings (default to &lt;code&gt;true&lt;/code&gt;). For more information on locking, please see ActiveRecord::Locking.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97d46425821c91360f211489773a35b33c354282" translate="yes" xml:space="preserve">
          <source>Specifies table from which the records will be fetched. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a72c5652a3fedf402e36b02edd76ede1411b6b9" translate="yes" xml:space="preserve">
          <source>Specifies the name of the &lt;a href=&quot;classmethods#method-i-belongs_to&quot;&gt;belongs_to&lt;/a&gt; association on the associated object that is the inverse of this &lt;a href=&quot;classmethods#method-i-has_many&quot;&gt;has_many&lt;/a&gt; association. See ActiveRecord::Associations::ClassMethods's overview on Bi-directional associations for more detail.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b07abe39e032f758ecd1d9057056d8bdc5be748" translate="yes" xml:space="preserve">
          <source>Specifies the name of the &lt;a href=&quot;classmethods#method-i-belongs_to&quot;&gt;belongs_to&lt;/a&gt; association on the associated object that is the inverse of this &lt;a href=&quot;classmethods#method-i-has_one&quot;&gt;has_one&lt;/a&gt; association. See ActiveRecord::Associations::ClassMethods's overview on Bi-directional associations for more detail.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a077ae553584190a84c5e0d8089075e47f7b709" translate="yes" xml:space="preserve">
          <source>Specifies the name of the &lt;a href=&quot;classmethods#method-i-has_one&quot;&gt;has_one&lt;/a&gt; or &lt;a href=&quot;classmethods#method-i-has_many&quot;&gt;has_many&lt;/a&gt; association on the associated object that is the inverse of this &lt;a href=&quot;classmethods#method-i-belongs_to&quot;&gt;belongs_to&lt;/a&gt; association. See ActiveRecord::Associations::ClassMethods's overview on Bi-directional associations for more detail.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5f86652e142f240f808ad28a1accc3bc8146f92" translate="yes" xml:space="preserve">
          <source>Specifies the name of the queue to process the job on.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59ee5c5465bd12c13bb84cdad89dbf83206bdf14" translate="yes" xml:space="preserve">
          <source>Specifies the number of rows to skip before returning rows.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47ae845c87cf3279f2141e90b1426824be55100c" translate="yes" xml:space="preserve">
          <source>Specifies the priority of the queue to create the job with.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83ae9a08e23486bcdfba2e22d27bd502ac2b610e" translate="yes" xml:space="preserve">
          <source>Specifies the queue adapter to use with all Active Job test helpers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c273e81afbbb87896db2dda5b2515ac9aa8d757a" translate="yes" xml:space="preserve">
          <source>Specifies the relation between a single attachment and the model.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="206524e3a7ee1aad9b71de35d221fdc93f871fa3" translate="yes" xml:space="preserve">
          <source>Specifies the relation between multiple attachments and the model.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd97744ba14130b3a9d7a806b5c4d5ea99b07000" translate="yes" xml:space="preserve">
          <source>Specifies the source association name used by &lt;a href=&quot;classmethods#method-i-has_many&quot;&gt;has_many&lt;/a&gt;&lt;code&gt;:through&lt;/code&gt; queries. Only use it if the name cannot be inferred from the association. &lt;code&gt;has_many :subscribers, through:
:subscriptions&lt;/code&gt; will look for either &lt;code&gt;:subscribers&lt;/code&gt; or &lt;code&gt;:subscriber&lt;/code&gt; on Subscription, unless a &lt;code&gt;:source&lt;/code&gt; is given.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="277e7c7ac697e944e9536f91fc5dbf9fdae5fd3d" translate="yes" xml:space="preserve">
          <source>Specifies the source association name used by &lt;a href=&quot;classmethods#method-i-has_one&quot;&gt;has_one&lt;/a&gt;&lt;code&gt;:through&lt;/code&gt; queries. Only use it if the name cannot be inferred from the association. &lt;code&gt;has_one :favorite, through: :favorites&lt;/code&gt; will look for a &lt;code&gt;:favorite&lt;/code&gt; on Favorite, unless a &lt;code&gt;:source&lt;/code&gt; is given.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8701300cfb234df49803a159f3c9549487ef738a" translate="yes" xml:space="preserve">
          <source>Specifies type of the source association used by &lt;a href=&quot;classmethods#method-i-has_many&quot;&gt;has_many&lt;/a&gt;&lt;code&gt;:through&lt;/code&gt; queries where the source association is a polymorphic &lt;a href=&quot;classmethods#method-i-belongs_to&quot;&gt;belongs_to&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6c7e7f31eb36a0a498fce37f588d4aabd6a9eb5" translate="yes" xml:space="preserve">
          <source>Specifies type of the source association used by &lt;a href=&quot;classmethods#method-i-has_one&quot;&gt;has_one&lt;/a&gt;&lt;code&gt;:through&lt;/code&gt; queries where the source association is a polymorphic &lt;a href=&quot;classmethods#method-i-belongs_to&quot;&gt;belongs_to&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f37bee7001e66a53036dce523de0321b55c7733" translate="yes" xml:space="preserve">
          <source>Specifies whether the records should be unique or not.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76f35f9f62fc508378a4d94946408633de5583ee" translate="yes" xml:space="preserve">
          <source>Specifies whether the records should be unique or not. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f04fceb21e7dd90c71e062128d6e76116300d1f" translate="yes" xml:space="preserve">
          <source>Specifies words that are uncountable and should not be inflected.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ebe1693be4c270b8cf226f69241902b498ac17d" translate="yes" xml:space="preserve">
          <source>Specify &lt;code&gt;options&lt;/code&gt; with additional translating options.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d7e66b98abb2a573166f38b116c1d11ffe0ef4a" translate="yes" xml:space="preserve">
          <source>Specify binary encoding for parameters for a given action.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d952bcd3f96500e2c14cc9a6bbf0ac568ed5d009" translate="yes" xml:space="preserve">
          <source>Specify either an argument or a block.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3dc99ea253debb40eb07a9af0988e4b3db7a4d4d" translate="yes" xml:space="preserve">
          <source>Specify optimizer hints to be used in the SELECT statement.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85c66c083df063e41c51a870d80bc4aabc120fc6" translate="yes" xml:space="preserve">
          <source>Specify relationships to be included in the result set. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86595ed74563dfdb981c8f6e79053187369eaca3" translate="yes" xml:space="preserve">
          <source>Specify that a given action's parameters should all be encoded as ASCII-8BIT (it &amp;ldquo;skips&amp;rdquo; the encoding default of UTF-8).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55823b908779657eb16a820be966ff2143acda87" translate="yes" xml:space="preserve">
          <source>Specify the backend queue provider. The default queue adapter is the &lt;code&gt;:async&lt;/code&gt; queue. See &lt;a href=&quot;../queueadapters&quot;&gt;QueueAdapters&lt;/a&gt; for more information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="885aa862bc6e44cdfa845c8426e91ba27b7211a4" translate="yes" xml:space="preserve">
          <source>Specify the class name of the association. Use it only if that name can't be inferred from the association name. So &lt;code&gt;belongs_to
:author&lt;/code&gt; will by default be linked to the Author class, but if the real class name is Person, you'll have to specify it with this option.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70a5e6fb65da82a2fb4f602e75bb6e666b6cd024" translate="yes" xml:space="preserve">
          <source>Specify the class name of the association. Use it only if that name can't be inferred from the association name. So &lt;code&gt;has_and_belongs_to_many :projects&lt;/code&gt; will by default be linked to the Project class, but if the real class name is SuperProject, you'll have to specify it with this option.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d2b273573d0250f10e426bfe9e12638866178792" translate="yes" xml:space="preserve">
          <source>Specify the class name of the association. Use it only if that name can't be inferred from the association name. So &lt;code&gt;has_many
:products&lt;/code&gt; will by default be linked to the &lt;code&gt;Product&lt;/code&gt; class, but if the real class name is &lt;code&gt;SpecialProduct&lt;/code&gt;, you'll have to specify it with this option.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d33c470a825930ab28b6a939252c71c8c144f47" translate="yes" xml:space="preserve">
          <source>Specify the class name of the association. Use it only if that name can't be inferred from the association name. So &lt;code&gt;has_one
:manager&lt;/code&gt; will by default be linked to the Manager class, but if the real class name is Person, you'll have to specify it with this option.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="225e927248eca6d940464c669ee43e6f9eb299e3" translate="yes" xml:space="preserve">
          <source>Specify the column used to store the associated object's type, if this is a polymorphic association. By default this is guessed to be the name of the association with a &amp;ldquo;_type&amp;rdquo; suffix. So a class that defines a &lt;code&gt;belongs_to :taggable, polymorphic: true&lt;/code&gt; association will use &amp;ldquo;taggable_type&amp;rdquo; as the default &lt;code&gt;:foreign_type&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ebe40e3cc390f08c2ce384f3ba7b14096b00fb56" translate="yes" xml:space="preserve">
          <source>Specify the column used to store the associated object's type, if this is a polymorphic association. By default this is guessed to be the name of the polymorphic association specified on &amp;ldquo;as&amp;rdquo; option with a &amp;ldquo;_type&amp;rdquo; suffix. So a class that defines a &lt;code&gt;has_many :tags, as: :taggable&lt;/code&gt; association will use &amp;ldquo;taggable_type&amp;rdquo; as the default &lt;code&gt;:foreign_type&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aca786970e05c6d7f529287932956735638bed3c" translate="yes" xml:space="preserve">
          <source>Specify the column used to store the associated object's type, if this is a polymorphic association. By default this is guessed to be the name of the polymorphic association specified on &amp;ldquo;as&amp;rdquo; option with a &amp;ldquo;_type&amp;rdquo; suffix. So a class that defines a &lt;code&gt;has_one :tag, as: :taggable&lt;/code&gt; association will use &amp;ldquo;taggable_type&amp;rdquo; as the default &lt;code&gt;:foreign_type&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4e2c11e67c5dd736c36d56590671bf2afa0b845" translate="yes" xml:space="preserve">
          <source>Specify the foreign key used for the association on the receiving side of the association. By default this is guessed to be the name of the associated class in lower-case and &amp;ldquo;_id&amp;rdquo; suffixed. So if a Person class makes a &lt;a href=&quot;classmethods#method-i-has_and_belongs_to_many&quot;&gt;has_and_belongs_to_many&lt;/a&gt; association to Project, the association will use &amp;ldquo;project_id&amp;rdquo; as the default &lt;code&gt;:association_foreign_key&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80e0350f2d4322606364411ef6b3c1dfc406ad6c" translate="yes" xml:space="preserve">
          <source>Specify the foreign key used for the association. By default this is guessed to be the name of the association with an &amp;ldquo;_id&amp;rdquo; suffix. So a class that defines a &lt;code&gt;belongs_to :person&lt;/code&gt; association will use &amp;ldquo;person_id&amp;rdquo; as the default &lt;code&gt;:foreign_key&lt;/code&gt;. Similarly, &lt;code&gt;belongs_to :favorite_person, class_name: &quot;Person&quot;&lt;/code&gt; will use a foreign key of &amp;ldquo;favorite_person_id&amp;rdquo;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a83b08ea9ac04cbf6da0bd4b47b0a19defc92997" translate="yes" xml:space="preserve">
          <source>Specify the foreign key used for the association. By default this is guessed to be the name of this class in lower-case and &amp;ldquo;_id&amp;rdquo; suffixed. So a Person class that makes a &lt;a href=&quot;classmethods#method-i-has_and_belongs_to_many&quot;&gt;has_and_belongs_to_many&lt;/a&gt; association to Project will use &amp;ldquo;person_id&amp;rdquo; as the default &lt;code&gt;:foreign_key&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac165ad7018cf39f7055e03af4fbe06c3dd2ee98" translate="yes" xml:space="preserve">
          <source>Specify the foreign key used for the association. By default this is guessed to be the name of this class in lower-case and &amp;ldquo;_id&amp;rdquo; suffixed. So a Person class that makes a &lt;a href=&quot;classmethods#method-i-has_many&quot;&gt;has_many&lt;/a&gt; association will use &amp;ldquo;person_id&amp;rdquo; as the default &lt;code&gt;:foreign_key&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="418e68cc079803c5ca4710d43bcb06a747293c69" translate="yes" xml:space="preserve">
          <source>Specify the foreign key used for the association. By default this is guessed to be the name of this class in lower-case and &amp;ldquo;_id&amp;rdquo; suffixed. So a Person class that makes a &lt;a href=&quot;classmethods#method-i-has_one&quot;&gt;has_one&lt;/a&gt; association will use &amp;ldquo;person_id&amp;rdquo; as the default &lt;code&gt;:foreign_key&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a29d5f3630b11a255e7b8ab841b7e36ec40765f" translate="yes" xml:space="preserve">
          <source>Specify the layout to use for this class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e1a94495c3662425c496be9343da1635a331141" translate="yes" xml:space="preserve">
          <source>Specify the method that returns the primary key of associated object used for the association. By default this is &lt;code&gt;id&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08e12d1c0c341aefbdddfdb9fed12aea57b0a8fd" translate="yes" xml:space="preserve">
          <source>Specify the method that returns the primary key used for the association. By default this is &lt;code&gt;id&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dab45fea74e16eacf512452806b6d81962031dee" translate="yes" xml:space="preserve">
          <source>Specify the name of the column to use as the primary key for the association. By default this is &lt;code&gt;id&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa8d991fe97c6d10ca259daf546b590a79f70062" translate="yes" xml:space="preserve">
          <source>Specify the name of the join table if the default based on lexical order isn't what you want. &lt;strong&gt;WARNING:&lt;/strong&gt; If you're overwriting the table name of either class, the &lt;code&gt;table_name&lt;/code&gt; method MUST be declared underneath any &lt;a href=&quot;classmethods#method-i-has_and_belongs_to_many&quot;&gt;has_and_belongs_to_many&lt;/a&gt; declaration in order to work.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7c1c97489bd76bb4fb1c357d1d4c7212df163bf" translate="yes" xml:space="preserve">
          <source>Specify this association is a polymorphic association by passing &lt;code&gt;true&lt;/code&gt;. Note: If you've enabled the counter cache, then you may want to add the counter cache attribute to the &lt;code&gt;attr_readonly&lt;/code&gt; list in the associated classes (e.g. &lt;code&gt;class
Post; attr_readonly :comments_count; end&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b37d627e2d35b74b7acc89769bc6aa03d24ae539" translate="yes" xml:space="preserve">
          <source>Specify whether or not the session should mimic a secure HTTPS request.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f90cd188c94ff438b63ca4775438d2d50939ca5" translate="yes" xml:space="preserve">
          <source>Specifying Conditions on Eager Loaded Associations</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="badad5d000b173432028b69520e39fc48ef3ee34" translate="yes" xml:space="preserve">
          <source>Specifying Constraints</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41fc5d76713cc80fa202d0b1dce4b7224a7a9fd6" translate="yes" xml:space="preserve">
          <source>Specifying a Controller to Use</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e671c125d388a318e613291417f6e629ff5df030" translate="yes" xml:space="preserve">
          <source>Specifying connection identifiers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="838f99467accb7a6580d92f0d66cdc2683142373" translate="yes" xml:space="preserve">
          <source>Specifying foreign keys in fixtures can be very fragile, not to mention difficult to read. Since Active Record can figure out the ID of any fixture from its label, you can specify FK's by label instead of ID.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c6e82bfb1740e9395d4ce7a9772d3d1d42f9688" translate="yes" xml:space="preserve">
          <source>Specifying:</source>
          <target state="translated">Specifying:</target>
        </trans-unit>
        <trans-unit id="7a86646db863e5b3be076646cd48d46e5b757867" translate="yes" xml:space="preserve">
          <source>Splits or iterates over the array in &lt;code&gt;number&lt;/code&gt; of groups, padding any remaining slots with &lt;code&gt;fill_with&lt;/code&gt; unless it is &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55822158c40b4f9518997cbd575a11ed73a1c924" translate="yes" xml:space="preserve">
          <source>Splits or iterates over the array in groups of size &lt;code&gt;number&lt;/code&gt;, padding any remaining slots with &lt;code&gt;fill_with&lt;/code&gt; unless it is &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89677615c2ec030bc5542abbacb5c286b12096fe" translate="yes" xml:space="preserve">
          <source>Spring</source>
          <target state="translated">Spring</target>
        </trans-unit>
        <trans-unit id="7127aa5fa59c9abc757cff2204cb8d590029ed5d" translate="yes" xml:space="preserve">
          <source>Spring reloads the application code if something changes. In the &lt;code&gt;test&lt;/code&gt; environment you need to enable reloading for that to work:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6dcebd81cfd763cdbe024fd43b26618f50cdee93" translate="yes" xml:space="preserve">
          <source>Springify your binstubs with &lt;code&gt;bundle exec spring binstub --all&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77ecab1b28a222b2eb0f08a4bc966b8031011d38" translate="yes" xml:space="preserve">
          <source>Sprockets also sets the &lt;code&gt;Cache-Control&lt;/code&gt; HTTP header to &lt;code&gt;max-age=31536000&lt;/code&gt;. This signals all caches between your server and the client browser that this content (the file served) can be cached for 1 year. The effect of this is to reduce the number of requests for this asset from your server; the asset has a good chance of being in the local browser cache or some intermediate cache.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac09c2fe68b4659344d9b2e652cd2c7158914a39" translate="yes" xml:space="preserve">
          <source>Sprockets concatenates all JavaScript files into one master &lt;code&gt;.js&lt;/code&gt; file and all CSS files into one master &lt;code&gt;.css&lt;/code&gt; file. As you'll learn later in this guide, you can customize this strategy to group files any way you like. In production, Rails inserts an SHA256 fingerprint into each filename so that the file is cached by the web browser. You can invalidate the cache by altering this fingerprint, which happens automatically whenever you change the file contents.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f387bc2faffb12649890a08259893ebd3ff6daa" translate="yes" xml:space="preserve">
          <source>Sprockets does not add any new methods to access your assets - you still use the familiar &lt;code&gt;javascript_include_tag&lt;/code&gt; and &lt;code&gt;stylesheet_link_tag&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b13764af9f148291c25a397e3142ef6b35bfaebb" translate="yes" xml:space="preserve">
          <source>Sprockets uses Processors, Transformers, Compressors, and Exporters to extend Sprockets functionality. Have a look at &lt;a href=&quot;https://github.com/rails/sprockets/blob/master/guides/extending_sprockets.md&quot;&gt;Extending Sprockets&lt;/a&gt; to learn more. Here we registered a preprocessor to add a comment to the end of text/css (&lt;code&gt;.css&lt;/code&gt;) files.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7565b4913500cb7bd5a658ee5b78fa21ce96b025" translate="yes" xml:space="preserve">
          <source>Sprockets uses files named &lt;code&gt;index&lt;/code&gt; (with the relevant extensions) for a special purpose.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="199cb6bc94954c0426aaaf16efcfb331999692e9" translate="yes" xml:space="preserve">
          <source>Sprockets uses manifest files to determine which assets to include and serve. These manifest files contain &lt;em&gt;directives&lt;/em&gt; - instructions that tell Sprockets which files to require in order to build a single CSS or JavaScript file. With these directives, Sprockets loads the files specified, processes them if necessary, concatenates them into one single file, and then compresses them (based on value of &lt;code&gt;Rails.application.config.assets.js_compressor&lt;/code&gt;). By serving one file rather than many, the load time of pages can be greatly reduced because the browser makes fewer requests. Compression also reduces file size, enabling the browser to download them faster.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea2fadf113309ae22d55b43e43b08e5d0b03213a" translate="yes" xml:space="preserve">
          <source>Sprockets will also look through the paths specified in &lt;code&gt;config.assets.paths&lt;/code&gt;, which includes the standard application paths and any paths added by Rails engines.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46d0fe2daaa4f1858226d1c239a8cddc764eb858" translate="yes" xml:space="preserve">
          <source>SqlServer: &lt;code&gt;:precision&lt;/code&gt; [1..38], &lt;code&gt;:scale&lt;/code&gt; [0..38]. Default (38,0).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="615d1c4837a689f9b4efbdc327b67ba8089a1737" translate="yes" xml:space="preserve">
          <source>Stable, Autogenerated IDs</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="afad13aea5bcf6c4ecc20fa264b9795665fe4333" translate="yes" xml:space="preserve">
          <source>Stable, autogenerated IDs</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76db759a841b010afed436c6a66ac5ebea4d8d1e" translate="yes" xml:space="preserve">
          <source>Stand-Alone Active Support</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d10323c27ec5f9982ad73377fd582ff949840f8" translate="yes" xml:space="preserve">
          <source>Standalone</source>
          <target state="translated">Standalone</target>
        </trans-unit>
        <trans-unit id="c8d0927de99b47225b3f6cb4fb5e8c2b14a078e4" translate="yes" xml:space="preserve">
          <source>Standard configuration options (&lt;code&gt;:on&lt;/code&gt;, &lt;code&gt;:if&lt;/code&gt; and &lt;code&gt;:unless&lt;/code&gt;), which are available on the class version of &lt;code&gt;validates_with&lt;/code&gt;, should instead be placed on the &lt;code&gt;validates&lt;/code&gt; method as these are applied and tested in the callback.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f26a1ddbb78925032da81ac42c3a4d582ed50ba" translate="yes" xml:space="preserve">
          <source>StandardError</source>
          <target state="translated">StandardError</target>
        </trans-unit>
        <trans-unit id="477344d232738a1940fb13fed234ad833fbb080f" translate="yes" xml:space="preserve">
          <source>Start Here</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3390431059d011633232d5d5149050478b09e423" translate="yes" xml:space="preserve">
          <source>Start streaming from the named &lt;code&gt;broadcasting&lt;/code&gt; pubsub queue. Optionally, you can pass a &lt;code&gt;callback&lt;/code&gt; that'll be used instead of the default of just transmitting the updates straight to the subscriber. Pass &lt;code&gt;coder: ActiveSupport::JSON&lt;/code&gt; to decode messages as JSON before passing to the callback. Defaults to &lt;code&gt;coder: nil&lt;/code&gt; which does no decoding, passes raw messages.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c70b4153270784145514567fc8ccd3f8651f8c2" translate="yes" xml:space="preserve">
          <source>Start streaming the pubsub queue for the &lt;code&gt;model&lt;/code&gt; in this channel. Optionally, you can pass a &lt;code&gt;callback&lt;/code&gt; that'll be used instead of the default of just transmitting the updates straight to the subscriber.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e606f88cb97405a2021b27b1621034cb0699afaf" translate="yes" xml:space="preserve">
          <source>Started GET &amp;ldquo;/session/new&amp;rdquo; for 127.0.0.1 at 2012-09-26 14:51:42 -0700</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7bcf6547cb31361cfe053a6c56f162fe533ef178" translate="yes" xml:space="preserve">
          <source>Starting the Backend</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9603728e42349f4f328c1221f2dceee879953324" translate="yes" xml:space="preserve">
          <source>Starting up the Web Server</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6877845679f40739019603593367f5c06633009e" translate="yes" xml:space="preserve">
          <source>Starts a form tag that points the action to a URL configured with &lt;code&gt;url_for_options&lt;/code&gt; just like &lt;code&gt;ActionController::Base#url_for&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6c181d343d8842af28b370b9f7956e6ed763a4c" translate="yes" xml:space="preserve">
          <source>Starts a form tag that points the action to a URL configured with &lt;code&gt;url_for_options&lt;/code&gt; just like ActionController::Base#url_for. The method for the form defaults to POST.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a7b5c5d1987e4bcde7a61798432e1fa62eaff7c" translate="yes" xml:space="preserve">
          <source>StatementTimeout</source>
          <target state="translated">StatementTimeout</target>
        </trans-unit>
        <trans-unit id="a5c8da6c409b3396d49583451e5d88c90288d8e0" translate="yes" xml:space="preserve">
          <source>Statements after &lt;code&gt;redirect_to&lt;/code&gt; in our controller get executed, so &lt;code&gt;redirect_to&lt;/code&gt; doesn't stop the execution of the function. To terminate the execution of the function immediately after the &lt;code&gt;redirect_to&lt;/code&gt;, use return.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af92969a73d6478fcb802c1a76b95af4d1cc533c" translate="yes" xml:space="preserve">
          <source>Static</source>
          <target state="translated">Static</target>
        </trans-unit>
        <trans-unit id="038391114739af9945958226e259492fbda7c1be" translate="yes" xml:space="preserve">
          <source>Static Segments</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e5eaca9e57d33af5533d63cdc799eb62a3e5ddf" translate="yes" xml:space="preserve">
          <source>Static#call</source>
          <target state="translated">Static#call</target>
        </trans-unit>
        <trans-unit id="acc9a648cd3240999feeeb5c892f2af94cf4db48" translate="yes" xml:space="preserve">
          <source>Static::new</source>
          <target state="translated">Static::new</target>
        </trans-unit>
        <trans-unit id="83f35fdcf43eb7934900986f5ca93fbf00ccf340" translate="yes" xml:space="preserve">
          <source>Step by Step</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="319c6dffe302722f1fe1e99fbea7196cf0c45430" translate="yes" xml:space="preserve">
          <source>Stoppable events</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8c13d19b0addd989941e6ed2b0bbe19028362ad8" translate="yes" xml:space="preserve">
          <source>Store the resulting dictionaries somewhere.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9504854f781e848fc54c4d2477b61b706e65ce8a" translate="yes" xml:space="preserve">
          <source>Store#read_store_attribute</source>
          <target state="translated">Store#read_store_attribute</target>
        </trans-unit>
        <trans-unit id="b8dfd11da6a4f2e8423b2f84b8c9d2be0f567a36" translate="yes" xml:space="preserve">
          <source>Store#write_store_attribute</source>
          <target state="translated">Store#write_store_attribute</target>
        </trans-unit>
        <trans-unit id="fc7523f61bf8e7e5c204726c00d765694778e007" translate="yes" xml:space="preserve">
          <source>Store::local_stored_attributes</source>
          <target state="translated">Store::local_stored_attributes</target>
        </trans-unit>
        <trans-unit id="9bf57482a99343fbc640bc42de7e0226edb2223d" translate="yes" xml:space="preserve">
          <source>Stores some of the Rails initial environment parameters which will be used by middlewares and engines to configure themselves.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04ea6a4ff4a01680d4b0732061b62bd88db496aa" translate="yes" xml:space="preserve">
          <source>Storing the ha1 hash: MD5(username:realm:password), is better than storing a plain password. If the password file or database is compromised, the attacker would be able to use the ha1 hash to authenticate as the user at this &lt;code&gt;realm&lt;/code&gt;, but would not have the user's password to try using at other sites.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e8325521df6e6903ede77955f9bf1a333363aed" translate="yes" xml:space="preserve">
          <source>Streaming</source>
          <target state="translated">Streaming</target>
        </trans-unit>
        <trans-unit id="35f6a851e42b26a581af7488b4e6c97f3d9edf01" translate="yes" xml:space="preserve">
          <source>Streaming and File Downloads</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="192ee001fb014ad09dfca9f18f6839bbe436fa76" translate="yes" xml:space="preserve">
          <source>Streaming arbitrary data is an extremely powerful tool. As shown in the previous examples, you can choose when and what to send across a response stream. However, you should also note the following things:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74985da267c6803b262f117de72af2d02e48029f" translate="yes" xml:space="preserve">
          <source>Streams</source>
          <target state="translated">Streams</target>
        </trans-unit>
        <trans-unit id="a44d219b82cbb08d6ea4bab1c16e360bad239585" translate="yes" xml:space="preserve">
          <source>Strict Validations</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3df63b7acb0522da685dad5fe84b81fdd7b25264" translate="yes" xml:space="preserve">
          <source>String</source>
          <target state="translated">String</target>
        </trans-unit>
        <trans-unit id="7aca66c7ec7a4c792eb79f36bb1ecfb0a5e508ec" translate="yes" xml:space="preserve">
          <source>String#at</source>
          <target state="translated">String#at</target>
        </trans-unit>
        <trans-unit id="6100cc069a1d3bea7f3f18e280e8c4f03bfccb7f" translate="yes" xml:space="preserve">
          <source>String#from</source>
          <target state="translated">String#from</target>
        </trans-unit>
        <trans-unit id="9977e7c72a2512a46640cc0cdc4e7ac04ae50b67" translate="yes" xml:space="preserve">
          <source>String#last</source>
          <target state="translated">String#last</target>
        </trans-unit>
        <trans-unit id="e1277632def52b9d696a2f08ce5b40a1a9f64175" translate="yes" xml:space="preserve">
          <source>String#to</source>
          <target state="translated">String#to</target>
        </trans-unit>
        <trans-unit id="b045f0b3a287dd1172445a70eb4ee204434dd9fd" translate="yes" xml:space="preserve">
          <source>StringInquirer</source>
          <target state="translated">StringInquirer</target>
        </trans-unit>
        <trans-unit id="b47e266eec75ea9b0ff7dc8d77699f0ce31cffa5" translate="yes" xml:space="preserve">
          <source>Strings are considered to be &lt;em&gt;unsafe&lt;/em&gt; by default:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84b249ddb512b46a5e2cbb34558ad46b2b214c2a" translate="yes" xml:space="preserve">
          <source>Strips all HTML tags from &lt;code&gt;html&lt;/code&gt;, including comments and special characters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="401e4794eb9d27cf669af09313d76be50ac6d891" translate="yes" xml:space="preserve">
          <source>Strips all HTML tags from the html, including comments. This functionality is powered by the rails-html-sanitizer gem.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd489406c1b756709cd42bf56a7b3cd2c70e145c" translate="yes" xml:space="preserve">
          <source>Strips all link tags from &lt;code&gt;html&lt;/code&gt; leaving just the link text.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a4c4d7a574dfee85453e08901b18410dcf7dc6b" translate="yes" xml:space="preserve">
          <source>Strips all link tags from text leaving just the link text.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bda0366bad34ec3e654dc5aa2e015351c79b45ec" translate="yes" xml:space="preserve">
          <source>Strips indentation in heredocs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3fa5327e4e1a1393c3e84e9a8fa380742d482fb" translate="yes" xml:space="preserve">
          <source>Strong ETags are considered byte-for-byte identical. They allow a browser or proxy cache to support &lt;a href=&quot;../../../range&quot;&gt;Range&lt;/a&gt; requests, useful for paging through a PDF file or scrubbing through a video. Some CDNs only support strong ETags and will ignore weak ETags entirely.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="372e29ad81d51edeb8dec5bcafbeaac686348fb6" translate="yes" xml:space="preserve">
          <source>Strong Parameters</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9c20f0e77037ca26119ee07680d1b682fcaf8e0" translate="yes" xml:space="preserve">
          <source>Strong v/s Weak ETags</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6ad7ced857223c1588ddd933f4821f92b73e58e" translate="yes" xml:space="preserve">
          <source>StrongParameters</source>
          <target state="translated">StrongParameters</target>
        </trans-unit>
        <trans-unit id="9573a3f85dd0628732029021a858a48321b86bb7" translate="yes" xml:space="preserve">
          <source>StrongParameters#params</source>
          <target state="translated">StrongParameters#params</target>
        </trans-unit>
        <trans-unit id="eda6fc838db7766c3ce2185c447e5567d9d8f706" translate="yes" xml:space="preserve">
          <source>StrongParameters#params=</source>
          <target state="translated">StrongParameters#params=</target>
        </trans-unit>
        <trans-unit id="fac54cb7827ec9cbcf328aea07d359a1fb61c56d" translate="yes" xml:space="preserve">
          <source>Struct.new(:line, :tag, :text)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b783c40f9ae28c67ffedf6b7ac63ce40e5bfad3" translate="yes" xml:space="preserve">
          <source>Structuring Layouts</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="577f879ea561929d58760376d09a963be361d62b" translate="yes" xml:space="preserve">
          <source>Stub `stream_from` to track streams for the channel. Add public aliases for `subscription_confirmation_sent?` and `subscription_rejected?`.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a540dc63b82395ff517cc2d44d374af7126ff09" translate="yes" xml:space="preserve">
          <source>Subclasses &amp;amp; Descendants</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98bf96aed4c7ad74e13f0bbe219e5661f8aa0d6e" translate="yes" xml:space="preserve">
          <source>Subject of the mail</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95cc599688b5a3532c17882df9ea310b0ee22570" translate="yes" xml:space="preserve">
          <source>Subscribe While a Block Runs</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="507ed395e553adb98d85d517842087c5a38d0dab" translate="yes" xml:space="preserve">
          <source>Subscribe to a given event name with the passed &lt;code&gt;block&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79de4a850f8cd914e08095c8d86d3096d3dc1734" translate="yes" xml:space="preserve">
          <source>Subscribe to the Rails security &lt;a href=&quot;https://groups.google.com/forum/#!forum/rubyonrails-security&quot;&gt;mailing list&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25003e234056e1839774d9e4feb586528d08c14d" translate="yes" xml:space="preserve">
          <source>Subscribe to the channel under test. Optionally pass subscription parameters as a &lt;a href=&quot;../../../hash&quot;&gt;Hash&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16b20e68bb281a3bd7e3649e8fa90b958868b4f8" translate="yes" xml:space="preserve">
          <source>Subscriber</source>
          <target state="translated">Subscriber</target>
        </trans-unit>
        <trans-unit id="6f13df39a03f7577fd7dff463e4c31b98c1f1fe2" translate="yes" xml:space="preserve">
          <source>Subscribers</source>
          <target state="translated">Subscribers</target>
        </trans-unit>
        <trans-unit id="c59cac1615815b2801d50eb6a6128f79e6123bd9" translate="yes" xml:space="preserve">
          <source>Subscribers using a regexp or other pattern-matching object will remain subscribed to all events that match their original pattern, unless those events match a string passed to `unsubscribe`:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="625ec023fc0108feafd040158b9473e9d205e5cd" translate="yes" xml:space="preserve">
          <source>Subscribing to an event</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="231395de64abd491f9a7b27fe4193fb3ed9cd853" translate="yes" xml:space="preserve">
          <source>Subscribing to an event is easy. Use &lt;code&gt;ActiveSupport::Notifications.subscribe&lt;/code&gt; with a block to listen to any notification.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="702df9f3517327d6a8a249fcd292c96fc8f8c180" translate="yes" xml:space="preserve">
          <source>Subscription Adapter</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5697fd85adbd13bf85f28712f9a136e80cc8067e" translate="yes" xml:space="preserve">
          <source>Subscriptions</source>
          <target state="translated">Subscriptions</target>
        </trans-unit>
        <trans-unit id="ff835d8dd510709fc31f47635b9f005bfd4db8cf" translate="yes" xml:space="preserve">
          <source>Subsequent calls to order on the same relation will be appended. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f28208be67a73faf2caaceb50fb78da55decb76d" translate="yes" xml:space="preserve">
          <source>Subsequent to the file being uploaded server-side to the service via &lt;code&gt;create_after_upload!&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="979f3a019ab008c009daab8febe80b609ead16b7" translate="yes" xml:space="preserve">
          <source>Subtracts an interval of time and returns a new &lt;a href=&quot;timewithzone&quot;&gt;TimeWithZone&lt;/a&gt; object unless the other value `acts_like?` time. Then it will return a Float of the difference between the two times that represents the difference between the current object's time and the &lt;code&gt;other&lt;/code&gt; time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08d813740814578218109fba9a27c5cbb7019f46" translate="yes" xml:space="preserve">
          <source>Subtracts an interval of time from the current object's time and returns the result as a new &lt;a href=&quot;timewithzone&quot;&gt;TimeWithZone&lt;/a&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2e61fabb7e50ad1a369cd42d300db7a63d1128b" translate="yes" xml:space="preserve">
          <source>Subtracts another &lt;a href=&quot;duration&quot;&gt;Duration&lt;/a&gt; or a &lt;a href=&quot;../numeric&quot;&gt;Numeric&lt;/a&gt; from this &lt;a href=&quot;duration&quot;&gt;Duration&lt;/a&gt;. &lt;a href=&quot;../numeric&quot;&gt;Numeric&lt;/a&gt; values are treated as seconds.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="301400cbac8a5522faf132838c9a8542df7c0da2" translate="yes" xml:space="preserve">
          <source>Sucker Punch</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="832a0022546f31343c2a592da2fe4d3dd93fd712" translate="yes" xml:space="preserve">
          <source>Sucker Punch adapter for Active Job</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="380c96bb3ab21964280206e0e71296308edb1ea5" translate="yes" xml:space="preserve">
          <source>Sucker Punch is a single-process Ruby asynchronous processing library. This reduces the cost of hosting on a service like Heroku along with the memory footprint of having to maintain additional jobs if hosting on a dedicated server. All queues can run within a single application (eg. Rails, Sinatra, etc.) process.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55def06ef8f1600ccd99614df91de64b76a84710" translate="yes" xml:space="preserve">
          <source>Suite of assertions to test routes generated by Rails and the handling of requests made to them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc9ce14b28c6f2c3b72caf056ca604b2b96f7d2b" translate="yes" xml:space="preserve">
          <source>Sum</source>
          <target state="translated">Sum</target>
        </trans-unit>
        <trans-unit id="24262a45db4d161c9006621695f56a1bd47ad303" translate="yes" xml:space="preserve">
          <source>Superclass for &lt;a href=&quot;../actioncontroller&quot;&gt;ActionController&lt;/a&gt; functional tests. Functional tests allow you to test a single controller action per test method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="903af6ddba5c11814fffc31d0703b3c576a1d9f8" translate="yes" xml:space="preserve">
          <source>Superclass for Action Cable channel functional tests.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ec7e34292e03f923d0471ad925211bc8291d59d" translate="yes" xml:space="preserve">
          <source>Superclass for all database execution errors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a52a90425b1b70b16916267003e91d93a8fd7861" translate="yes" xml:space="preserve">
          <source>Superclass for the evaluation contexts used by ERB fixtures.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe97687c91ba17c2df83823e939a7e57acd41463" translate="yes" xml:space="preserve">
          <source>Support for YAML defaults</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8dedcc6914c497c35b06e372d67140fc548c21a" translate="yes" xml:space="preserve">
          <source>Support for basic, digest, or token HTTP authentication:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef6e10d5c48658ba49c9dbd0df687d6bb3f5d375" translate="yes" xml:space="preserve">
          <source>Support for parsing XML parameters has been extracted into a gem named &lt;code&gt;actionpack-xml_parser&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e477f230a76431e262cdbb28cbf50edf224a60d" translate="yes" xml:space="preserve">
          <source>Support for the &lt;code&gt;encode_json&lt;/code&gt; hook</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f487ba2540991716280679dc9e72980e433d485" translate="yes" xml:space="preserve">
          <source>Support of the Rails framework is divided into four groups: New features, bug fixes, security issues, and severe security issues. They are handled as follows, all versions in &lt;code&gt;X.Y.Z&lt;/code&gt; format.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0377706508a1a8ffc7b2445d9c4711ecfe46bce" translate="yes" xml:space="preserve">
          <source>Supported options:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8bd727993a3ef646ebfbc8b3e4ec95bb22e84b1" translate="yes" xml:space="preserve">
          <source>Supported types for arguments</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="801578d1d06b0498f389b5bb1d0766bb8c1e5bc6" translate="yes" xml:space="preserve">
          <source>Supporting polymorphic relationships is a little bit more complicated, since Active Record needs to know what type your association is pointing at. Something like this should look familiar:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3820158b0fc129eec745e83611668190fcc5797f" translate="yes" xml:space="preserve">
          <source>Supports Memcached-like sharding across Redises with Redis::Distributed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ddcc77ee0dbfd6244922750694bb918fc9afb95" translate="yes" xml:space="preserve">
          <source>Supports Redis KEYS glob patterns:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db0d714d929fa801e05f92a5b913d229a0597ef7" translate="yes" xml:space="preserve">
          <source>Supports vanilla Redis, hiredis, and Redis::Distributed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18b4964675b1cd3cd8d3fb3adfa8c16dafeafea2" translate="yes" xml:space="preserve">
          <source>Suppose an application has a back office whose controllers are stored in &lt;code&gt;app/controllers/admin&lt;/code&gt;. If the &lt;code&gt;Admin&lt;/code&gt; module is not yet loaded when &lt;code&gt;Admin::UsersController&lt;/code&gt; is hit, Rails needs first to autoload the constant &lt;code&gt;Admin&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7837dd1c94b5cb5759cca35488f69c778f36446a" translate="yes" xml:space="preserve">
          <source>Suppose we want to set the 'locked' attribute to &lt;code&gt;false&lt;/code&gt; if we're creating a new record, but we don't want to include it in the query. So we want to find the client named &quot;Andy&quot;, or if that client doesn't exist, create a client named &quot;Andy&quot; which is not locked.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ad450dd8e471cd06e75d26ef921ab65c010a7e8" translate="yes" xml:space="preserve">
          <source>Suppose you have the following &lt;code&gt;ApplicationController&lt;/code&gt; layout:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3d11bbf1d07f3d43cd223bb80894692584f27f55" translate="yes" xml:space="preserve">
          <source>Suppose you want to find a client named 'Andy', and if there's none, create one. You can do so by running:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74748fd2ce1853df2d624ceae27d6cff178f8bbb" translate="yes" xml:space="preserve">
          <source>Supposing we use the same &lt;code&gt;_box&lt;/code&gt; partial from above, this would produce the same output as the previous example.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ecb095a1d31fe57faf4030aeca0620792d462a67" translate="yes" xml:space="preserve">
          <source>Supposing you have an action that adds a new person, optionally creating their company (by name) if it does not already exist, without web-services, it might look like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2215e21b3e8eab906ba2b0d344f18a3c944554f" translate="yes" xml:space="preserve">
          <source>Suppresses logger output for asset requests.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bcae4260789113e711f6533263005d75038f3860" translate="yes" xml:space="preserve">
          <source>Suppressor</source>
          <target state="translated">Suppressor</target>
        </trans-unit>
        <trans-unit id="e697510e0dc70abe4f2d625af0e99c4d736cd4f6" translate="yes" xml:space="preserve">
          <source>Surround string with single quotes if there is no quotes. Otherwise fall back to double quotes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="521fb7097b70476a3e1f5e4b812e25f28991cb8f" translate="yes" xml:space="preserve">
          <source>Switches</source>
          <target state="translated">Switches</target>
        </trans-unit>
        <trans-unit id="3f84ef531f9db996694ad09a8fdddbca1440577e" translate="yes" xml:space="preserve">
          <source>Symbol</source>
          <target state="translated">Symbol</target>
        </trans-unit>
        <trans-unit id="83c10bd7cb5e68bfcc1e6740c4f8828d95cffc70" translate="yes" xml:space="preserve">
          <source>Synchronously deletes the attachment and &lt;a href=&quot;blob#method-i-purge&quot;&gt;purges the blob&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="feb7b286d3df45fe6154980884296c21ba52d056" translate="yes" xml:space="preserve">
          <source>System Test configuration options</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7321567c1645835acdd615d9fd0005a2b3a61ff1" translate="yes" xml:space="preserve">
          <source>System Testing</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03b36ad7cfb863944816cacaf4fb1e5d8c7555f0" translate="yes" xml:space="preserve">
          <source>System tests allow you to test user interactions with your application, running tests in either a real or a headless browser. System tests use Capybara under the hood.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9b102a58115c6aadfb64f4319e8e8e4b589ec06" translate="yes" xml:space="preserve">
          <source>System tests clean up test data by rolling back a transaction. Because destroy is never called on an object, the attached files are never cleaned up. If you want to clear the files, you can do it in an &lt;code&gt;after_teardown&lt;/code&gt; callback. Doing it here ensures that all connections created during the test are complete and you won't receive an error from Active Storage saying it can't find a file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1156c7a0363fcf22ca25f6102b6c8c549235d8bd" translate="yes" xml:space="preserve">
          <source>System tests let you test applications in the browser. Because system tests use a real browser experience, you can test all of your JavaScript easily from your test suite.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c77084d21acae6f8c2d4222b6d473c40b6d2eaf4" translate="yes" xml:space="preserve">
          <source>SystemTestCase</source>
          <target state="translated">SystemTestCase</target>
        </trans-unit>
        <trans-unit id="46dc0d3f321794633fd0c4a556d79d4c85d508b2" translate="yes" xml:space="preserve">
          <source>SystemTestCase::driven_by</source>
          <target state="translated">SystemTestCase::driven_by</target>
        </trans-unit>
        <trans-unit id="f9549ffb9fc58054defacc4f194375cda4042343" translate="yes" xml:space="preserve">
          <source>TAG_PREFIXES</source>
          <target state="translated">TAG_PREFIXES</target>
        </trans-unit>
        <trans-unit id="055e75774170e1877813218f0e2eab812a3858bb" translate="yes" xml:space="preserve">
          <source>TERABYTE</source>
          <target state="translated">TERABYTE</target>
        </trans-unit>
        <trans-unit id="b7845ed63315e19f79b6f587db2845951a920e8e" translate="yes" xml:space="preserve">
          <source>TERMINATOR</source>
          <target state="translated">TERMINATOR</target>
        </trans-unit>
        <trans-unit id="4e74750220b607df053346351e7dc44867c52d38" translate="yes" xml:space="preserve">
          <source>TODO This should be broken apart into AD::Request::Session and probably be included by the session middleware.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb5059f80352e807395706f9e9cd3d2cd449728e" translate="yes" xml:space="preserve">
          <source>TOKEN_KEY</source>
          <target state="translated">TOKEN_KEY</target>
        </trans-unit>
        <trans-unit id="8c909df47790e0c75fe7152350f29f93ff67ad45" translate="yes" xml:space="preserve">
          <source>TOKEN_REGEX</source>
          <target state="translated">TOKEN_REGEX</target>
        </trans-unit>
        <trans-unit id="233afe6bd93e5cc12d4160127b2c56cf3855e4e6" translate="yes" xml:space="preserve">
          <source>TRAILING_STAR_REGEXP</source>
          <target state="translated">TRAILING_STAR_REGEXP</target>
        </trans-unit>
        <trans-unit id="7db07191d94b47216e39fc6c70336641ddf25a9f" translate="yes" xml:space="preserve">
          <source>TRUSTED_PROXIES</source>
          <target state="translated">TRUSTED_PROXIES</target>
        </trans-unit>
        <trans-unit id="6807e0735b6059d7a99f2ec2389b4167294c34b5" translate="yes" xml:space="preserve">
          <source>Table / Schema</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a718ab92137990bec263184e8eb00254c478179d" translate="yes" xml:space="preserve">
          <source>Table Aliasing</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ab839ed3b8ed404e1dbbba2076ea0f547184960" translate="yes" xml:space="preserve">
          <source>Table aliases are automatically truncated according to the maximum length of table identifiers according to the specific database.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="038c47a8f7df80e532f13b0c12580ccf60b70c2e" translate="yes" xml:space="preserve">
          <source>TagHelper</source>
          <target state="translated">TagHelper</target>
        </trans-unit>
        <trans-unit id="bb33f29c4a1d21b28dc40804eddd2d69ea5d0938" translate="yes" xml:space="preserve">
          <source>TagHelper#rich_text_area_tag</source>
          <target state="translated">TagHelper#rich_text_area_tag</target>
        </trans-unit>
        <trans-unit id="eca0e79cafc77f47eb9c8c218542610a51ce7d3b" translate="yes" xml:space="preserve">
          <source>Tagged Logging</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d73054e08c4e9b1654c368ff22d698ff3723a14e" translate="yes" xml:space="preserve">
          <source>TaggedLogging</source>
          <target state="translated">TaggedLogging</target>
        </trans-unit>
        <trans-unit id="47d8ff52eec9de9f2cc923b503fbaff3780bf2bc" translate="yes" xml:space="preserve">
          <source>TaggedLogging#flush</source>
          <target state="translated">TaggedLogging#flush</target>
        </trans-unit>
        <trans-unit id="3bcacd6ce7f2f56780a308e3dfa17158cb7834fc" translate="yes" xml:space="preserve">
          <source>TaggedLogging#tagged</source>
          <target state="translated">TaggedLogging#tagged</target>
        </trans-unit>
        <trans-unit id="e5207dbb761b482765d04cf1e0f51241d8cd49a2" translate="yes" xml:space="preserve">
          <source>TaggedLogging::new</source>
          <target state="translated">TaggedLogging::new</target>
        </trans-unit>
        <trans-unit id="96de2c5e218ef5002dfeff7c4351f7077746be3e" translate="yes" xml:space="preserve">
          <source>Tags can pass content to embed within it:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1616c055ee36c429b40247275c77135a2316f8d" translate="yes" xml:space="preserve">
          <source>Take a signed permanent reference for a blob and turn it into an expiring service URL for download. Note: These URLs are publicly accessible. If you need to enforce access protection beyond the security-through-obscurity factor of the signed blob references, you'll need to implement your own authenticated redirection controller.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b477286ef60f876305a6a465f03c8fb03fb83d7" translate="yes" xml:space="preserve">
          <source>Take a signed permanent reference for a blob representation and turn it into an expiring service URL for download. Note: These URLs are publicly accessible. If you need to enforce access protection beyond the security-through-obscurity factor of the signed blob and variation reference, you'll need to implement your own authenticated redirection controller.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04696b2453d8ff7ac5959375ac8137654bf9ea9e" translate="yes" xml:space="preserve">
          <source>Take a simple example where the layout expects the template to tell which title to use:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="02d2d9cd65513be9e3502248262cb253ec7afc36" translate="yes" xml:space="preserve">
          <source>Take callback names and an optional callback proc, normalize them, then call the block with each callback. This allows us to abstract the normalization across several methods that use it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08157dd667277244caf647513c42fc94e94d213e" translate="yes" xml:space="preserve">
          <source>Take into account that &lt;code&gt;reverse_merge!&lt;/code&gt; may change the hash in the caller, which may or may not be a good idea.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d69e3a256a140ee269a0eb844cc081701064bb6" translate="yes" xml:space="preserve">
          <source>Take note that in that last case, the results are sorted in ascending order:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="534a7ed75c29ff95c79fbd24a14c2fdbb855abca" translate="yes" xml:space="preserve">
          <source>Take the &lt;code&gt;uglifier&lt;/code&gt; gem, for example. This gem wraps &lt;a href=&quot;https://github.com/mishoo/UglifyJS&quot;&gt;UglifyJS&lt;/a&gt; (written for NodeJS) in Ruby. It compresses your code by removing white space and comments, shortening local variable names, and performing other micro-optimizations such as changing &lt;code&gt;if&lt;/code&gt; and &lt;code&gt;else&lt;/code&gt; statements to ternary operators where possible.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97458793447e253c29fa9cbd7697be51f88b72ca" translate="yes" xml:space="preserve">
          <source>Take the following route definition as an example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00ab0668cc4037d13a78d51b2de2f3350c9bf1d0" translate="yes" xml:space="preserve">
          <source>Take the text and format it, indented two spaces for each line, and wrapped at 72 columns:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80827ac08d589be82ab5b75a2e510da9a7cd38c0" translate="yes" xml:space="preserve">
          <source>Takes &lt;a href=&quot;token#method-i-raw_params&quot;&gt;#raw_params&lt;/a&gt; and turns it into an array of parameters</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e260df2f7f4d21e3db25f1e10c2c0292dfc55bf0" translate="yes" xml:space="preserve">
          <source>Takes a &lt;code&gt;workers&lt;/code&gt; argument that controls how many times the process is forked. For each process a new database will be created suffixed with the worker number.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73e8bea27e03a91d0b0382ae6d5a774f07343fa2" translate="yes" xml:space="preserve">
          <source>Takes a PP and prettily prints this record to it, allowing you to get a nice result from &lt;code&gt;pp record&lt;/code&gt; when pp is required.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="722622396c0849ef712a4da3e31d4e5eec9ced81" translate="yes" xml:space="preserve">
          <source>Takes a block as an argument and suppresses any output generated by the block.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d114eb5f1bc121ebb9d30bf7396084cdc4e4dd92" translate="yes" xml:space="preserve">
          <source>Takes a message argument and outputs it as is. A second boolean argument can be passed to specify whether to indent or not.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9991f402c10632d0d25b1be4c6c65a27d2ce7a5e" translate="yes" xml:space="preserve">
          <source>Takes a path to a file. If the file is found, has valid encoding, and has correct read permissions, the return value is a URI-escaped string representing the filename. Otherwise, false is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a118d88e1345a61585a699f8f43a9cfdfa482eee" translate="yes" xml:space="preserve">
          <source>Takes a screenshot of the current page in the browser if the test failed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a904476056859e92bcc9f33efdb63755b84adffb" translate="yes" xml:space="preserve">
          <source>Takes a screenshot of the current page in the browser.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31e1a9a4deced66bfaa21c00bd039d1768be9d23" translate="yes" xml:space="preserve">
          <source>Takes in an array of nested modules and extracts the last module</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="499478e0a853c9a543410dbe5b69960c7d83c08e" translate="yes" xml:space="preserve">
          <source>Takes same options as &lt;a href=&quot;base#method-i-match&quot;&gt;match&lt;/a&gt; as well as:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8b6d206a345676b80a5d0dc0d5123fc0f1bedd6" translate="yes" xml:space="preserve">
          <source>Takes same options as &lt;a href=&quot;resources#method-i-resources&quot;&gt;resources&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83252175577cff3fec0bf4b1d1b478d05b61359e" translate="yes" xml:space="preserve">
          <source>Takes same options as &lt;code&gt;Base#match&lt;/code&gt; and &lt;code&gt;Resources#resources&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb31df6bbff65d639d70ca3fa844d6812f0e7ad9" translate="yes" xml:space="preserve">
          <source>Target a specific controller with &lt;code&gt;-c&lt;/code&gt;, or grep routes using &lt;code&gt;-g&lt;/code&gt;. Useful in conjunction with &lt;code&gt;--expanded&lt;/code&gt; which displays routes vertically.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0892020a0cdd8c6ec728a7ae7349611e6bf37a4c" translate="yes" xml:space="preserve">
          <source>Technically other types of keys are accepted:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf7c0e5122af6fbdc8e2493c1ca46d3002391c7c" translate="yes" xml:space="preserve">
          <source>Technically this method can be used to fetch terminal values:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ef22b6c4f4be2de9c868066d9e70180113d906f" translate="yes" xml:space="preserve">
          <source>Technically, a route can have even more than one wildcard segment. The matcher assigns segments to parameters in an intuitive way. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09234dd0d54b4dac62a69875a96c7dba4dab7ffb" translate="yes" xml:space="preserve">
          <source>Technically, it looks for the least indented line in the whole string, and removes that amount of leading whitespace.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da90f4490ac0a7a4c19d09950e536af9fda11b99" translate="yes" xml:space="preserve">
          <source>Technically, it looks for the least indented non-empty line in the whole string, and removes that amount of leading whitespace.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85c6acdfae02d5da422da59f20d9b2382fc20bcd" translate="yes" xml:space="preserve">
          <source>Tell Action Mailbox to accept emails from Mailgun:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7c7794919f526dfab440f9f984fe50ec88e654dd" translate="yes" xml:space="preserve">
          <source>Tell Action Mailbox to accept emails from Mandrill:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="004e8569a68dee9e8f7eea4e8dea53ea7978520b" translate="yes" xml:space="preserve">
          <source>Tell Action Mailbox to accept emails from Postmark:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8bd9f466b88ee9c472108886ec525453bf214da3" translate="yes" xml:space="preserve">
          <source>Tell Action Mailbox to accept emails from SendGrid:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c23ccdf27384c9ca7eb0a0b36e13222d4799c25e" translate="yes" xml:space="preserve">
          <source>Tell Action Mailbox to accept emails from an SMTP relay:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf1793c33bffea42c2250ff33c826b23c3cd059f" translate="yes" xml:space="preserve">
          <source>Tell Active Storage which service to use by setting &lt;code&gt;Rails.application.config.active_storage.service&lt;/code&gt;. Because each environment will likely use a different service, it is recommended to do this on a per-environment basis. To use the disk service from the previous example in the development environment, you would add the following to &lt;code&gt;config/environments/development.rb&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1970188a38fa2dfa746826ff189edd026ac40f80" translate="yes" xml:space="preserve">
          <source>Tell Rails how to set, preserve, and switch locales.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e349249451f4dcca763123bc3400d6bee9fd5c02" translate="yes" xml:space="preserve">
          <source>Tell Rails where to find locale dictionaries.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ec1ae061c27325c7ecb543adf91235e22cbc9ed" translate="yes" xml:space="preserve">
          <source>Template</source>
          <target state="translated">Template</target>
        </trans-unit>
        <trans-unit id="e6f1ec42ae0af9f2599a77525cba82e65dfc5e18" translate="yes" xml:space="preserve">
          <source>Template API</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27db086ed1982e3939e97c9d1de883e62fe48717" translate="yes" xml:space="preserve">
          <source>Template digest</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a988abdac750fcba1801b94fb0f125fbab5a3afc" translate="yes" xml:space="preserve">
          <source>Template#encode!</source>
          <target state="translated">Template#encode!</target>
        </trans-unit>
        <trans-unit id="75caeea506c740afca670a3e0fe29e58e8240864" translate="yes" xml:space="preserve">
          <source>Template#format</source>
          <target state="translated">Template#format</target>
        </trans-unit>
        <trans-unit id="44b92e2f18b7f3c5926b2e8a248fd303933be0b1" translate="yes" xml:space="preserve">
          <source>Template#formats</source>
          <target state="translated">Template#formats</target>
        </trans-unit>
        <trans-unit id="437534ff0a64d844edcb21c7a69fc7fdf34239d8" translate="yes" xml:space="preserve">
          <source>Template#formats=</source>
          <target state="translated">Template#formats=</target>
        </trans-unit>
        <trans-unit id="5510da485bab99464c13795f7c1e8bea259ff569" translate="yes" xml:space="preserve">
          <source>Template#handler</source>
          <target state="translated">Template#handler</target>
        </trans-unit>
        <trans-unit id="bee4407d7aac10a500cb3a4aa20095ecaa41694c" translate="yes" xml:space="preserve">
          <source>Template#identifier</source>
          <target state="translated">Template#identifier</target>
        </trans-unit>
        <trans-unit id="9c93ef01230a4b0c6e9413e6b724e1025921ffbe" translate="yes" xml:space="preserve">
          <source>Template#inspect</source>
          <target state="translated">Template#inspect</target>
        </trans-unit>
        <trans-unit id="2aa6be504f9af0b81c6e7341db1162355e416923" translate="yes" xml:space="preserve">
          <source>Template#local_assigns</source>
          <target state="translated">Template#local_assigns</target>
        </trans-unit>
        <trans-unit id="534da4c572d07a2acf374b496b9ab7c02b24b681" translate="yes" xml:space="preserve">
          <source>Template#locals</source>
          <target state="translated">Template#locals</target>
        </trans-unit>
        <trans-unit id="42677365fa1ed52fe4caa914830df00663bc9fcf" translate="yes" xml:space="preserve">
          <source>Template#locals=</source>
          <target state="translated">Template#locals=</target>
        </trans-unit>
        <trans-unit id="7d8427241318884f4dcd368982c121714984667c" translate="yes" xml:space="preserve">
          <source>Template#original_encoding</source>
          <target state="translated">Template#original_encoding</target>
        </trans-unit>
        <trans-unit id="8a2d972e9283235d30f1e211bd8094c84fe08da2" translate="yes" xml:space="preserve">
          <source>Template#refresh</source>
          <target state="translated">Template#refresh</target>
        </trans-unit>
        <trans-unit id="7e512ed8fc7a00338ed2cfed6bb9cd5778abcc47" translate="yes" xml:space="preserve">
          <source>Template#render</source>
          <target state="translated">Template#render</target>
        </trans-unit>
        <trans-unit id="18e6fde14cb20ee39a2943fb5ecb61b51a889efd" translate="yes" xml:space="preserve">
          <source>Template#short_identifier</source>
          <target state="translated">Template#short_identifier</target>
        </trans-unit>
        <trans-unit id="d249d55d024d39938d21edf3672823a8857fc8d1" translate="yes" xml:space="preserve">
          <source>Template#source</source>
          <target state="translated">Template#source</target>
        </trans-unit>
        <trans-unit id="85eb26f509caaab1ddc7b2d4fff2bcbdeb396d49" translate="yes" xml:space="preserve">
          <source>Template#supports_streaming?</source>
          <target state="translated">Template#supports_streaming?</target>
        </trans-unit>
        <trans-unit id="92b0c49bf608156b505d2c3eb633b7fbbcd71578" translate="yes" xml:space="preserve">
          <source>Template#type</source>
          <target state="translated">Template#type</target>
        </trans-unit>
        <trans-unit id="ee935fcbf9498f428b2ec4cb6c074e152e85ca1c" translate="yes" xml:space="preserve">
          <source>Template#updated_at</source>
          <target state="translated">Template#updated_at</target>
        </trans-unit>
        <trans-unit id="a1766375955dc5f62a079cb3efd634ef30a4ebd3" translate="yes" xml:space="preserve">
          <source>Template#variable</source>
          <target state="translated">Template#variable</target>
        </trans-unit>
        <trans-unit id="2ab0e16f4491eb7a4b4a9e82a11afe59a022a8f6" translate="yes" xml:space="preserve">
          <source>Template#variant</source>
          <target state="translated">Template#variant</target>
        </trans-unit>
        <trans-unit id="c89a5d28897e212012f3efe6b3d69a0031ad9786" translate="yes" xml:space="preserve">
          <source>Template#variants</source>
          <target state="translated">Template#variants</target>
        </trans-unit>
        <trans-unit id="5ffb23c29909cc087160fe2ff49d32d34cd53f9d" translate="yes" xml:space="preserve">
          <source>Template#variants=</source>
          <target state="translated">Template#variants=</target>
        </trans-unit>
        <trans-unit id="b4de236c80cb6ba141bf2456243d18ec31693dea" translate="yes" xml:space="preserve">
          <source>Template#virtual_path</source>
          <target state="translated">Template#virtual_path</target>
        </trans-unit>
        <trans-unit id="20e257c5089a124df3221445ac9030387ae172f6" translate="yes" xml:space="preserve">
          <source>Template#virtual_path=</source>
          <target state="translated">Template#virtual_path=</target>
        </trans-unit>
        <trans-unit id="e380bd72a674340c87fd31ebf091103ee699b516" translate="yes" xml:space="preserve">
          <source>Template::finalize_compiled_template_methods</source>
          <target state="translated">Template::finalize_compiled_template_methods</target>
        </trans-unit>
        <trans-unit id="a4a78bc50cc15ce74ce7d6b08ba68c8cff2d7902" translate="yes" xml:space="preserve">
          <source>Template::finalize_compiled_template_methods=</source>
          <target state="translated">Template::finalize_compiled_template_methods=</target>
        </trans-unit>
        <trans-unit id="31cf835ff6cca4055ff672e5471b442194bed455" translate="yes" xml:space="preserve">
          <source>Template::new</source>
          <target state="translated">Template::new</target>
        </trans-unit>
        <trans-unit id="dccdca2628d9b37c054cb25df79bd849837986aa" translate="yes" xml:space="preserve">
          <source>TemplateError</source>
          <target state="translated">TemplateError</target>
        </trans-unit>
        <trans-unit id="f25b700ed9f092123a43acb205a6869342cf9dd6" translate="yes" xml:space="preserve">
          <source>Templates</source>
          <target state="translated">Templates</target>
        </trans-unit>
        <trans-unit id="8750acb81f707d74be6d6f1a9ae71cafdd679224" translate="yes" xml:space="preserve">
          <source>Templates don't have to be stored on the local system, the &lt;code&gt;-m&lt;/code&gt; option also supports online templates:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9c021d25388b1c36184057f5b9e846bb0fba19c" translate="yes" xml:space="preserve">
          <source>Templates in the collection not already cached are written to cache.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80bfd647cf3e8afda59a70978d9fcc1b513845be" translate="yes" xml:space="preserve">
          <source>Templates, Partials, and Layouts</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8fd79cf7ca310836dc3efd1147c1023d5fc20b1" translate="yes" xml:space="preserve">
          <source>Temporarily give up all held Share locks while executing the supplied block, allowing any &lt;code&gt;compatible&lt;/code&gt; exclusive lock request to proceed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b81216bc5901aea2c5cca49af2e45eb4190dd8d" translate="yes" xml:space="preserve">
          <source>Temporary Subscriptions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14d9fae7ff38145ff674aa620216bc205178c6dd" translate="yes" xml:space="preserve">
          <source>Temporary files (like cache and pid files).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21d278837034557e7a9b46210d42d6e7b8075142" translate="yes" xml:space="preserve">
          <source>Terminology</source>
          <target state="translated">Terminology</target>
        </trans-unit>
        <trans-unit id="a89b0dbcd302d4f9ba9ec7aca5a0f8a1ccc06a1a" translate="yes" xml:space="preserve">
          <source>Test Coverage</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91debbd7909f53f0f0dda96fef1638811dd165a7" translate="yes" xml:space="preserve">
          <source>Test Mode: Ditto development mode.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f77f19383df82a67888e2e9df641885912ee303b" translate="yes" xml:space="preserve">
          <source>Test adapter for Active Job</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f539a2e722fc44f789dfad6474958f56b919df4" translate="yes" xml:space="preserve">
          <source>Test cases can use begin+rollback to isolate their changes to the database instead of having to delete+insert for every test case.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5136085a12b174930954dcf2fe15567c3c66f2cf" translate="yes" xml:space="preserve">
          <source>Test helpers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44058f4cacb363bbf7a1fa46cd5fc79819f1b662" translate="yes" xml:space="preserve">
          <source>Test if any threads are currently waiting on the queue.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="084ff63b1922c0ad9eb2f7699aa72dceb5c3d081" translate="yes" xml:space="preserve">
          <source>Test numeric difference between the return value of an expression as a result of what is evaluated in the yielded block.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9b0bfb40611a91c3cc526c68e3b7ec7f4ea3193" translate="yes" xml:space="preserve">
          <source>Test that the result of evaluating an expression is changed after invoking the passed in block.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c6dcbe46a43cf592e434d9d4c0c0423c479a0ce0" translate="yes" xml:space="preserve">
          <source>Test the result of evaluating an expression is not changed after invoking the passed in block.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0820b32b206b7352858e8903a838ed14319acdfd" translate="yes" xml:space="preserve">
          <source>Testing</source>
          <target state="translated">Testing</target>
        </trans-unit>
        <trans-unit id="15df5dddf30d65534a6e9dbf13158abb26d90fd3" translate="yes" xml:space="preserve">
          <source>Testing &lt;code&gt;flash&lt;/code&gt; notices</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f02449fad497f5746672e6db83c7b975d0ed40ca" translate="yes" xml:space="preserve">
          <source>Testing Action Cable</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e309e778695eab20a3a8bc01dba2b39e99684bfe" translate="yes" xml:space="preserve">
          <source>Testing Helpers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c757636c5ff71450c83aeb2b9ba36f516c29a6af" translate="yes" xml:space="preserve">
          <source>Testing Jobs</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c1cec33acef2da69a41a9b2a6fbab0917acf803" translate="yes" xml:space="preserve">
          <source>Testing Rails Applications</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3beda4357979b576777318de0cd80c86b2eba9a4" translate="yes" xml:space="preserve">
          <source>Testing Routes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36eda9c408d9007d8fcffeae891ca0570fb93eb9" translate="yes" xml:space="preserve">
          <source>Testing Time-Dependent Code</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27930d6adb941d651dc7113c11aaa10a6ece41d0" translate="yes" xml:space="preserve">
          <source>Testing Views</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd9ee71a2010a9b6e9741fadf4dcdc3de2e7b394" translate="yes" xml:space="preserve">
          <source>Testing XHR (AJAX) requests</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c17d65ba14a6bcd81f9c22f0a76d367efe003011" translate="yes" xml:space="preserve">
          <source>Testing Your Mailers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="00c9371970622bce1caee73822f975e97fb208f7" translate="yes" xml:space="preserve">
          <source>Testing Your Newly Generated Plugin</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4b5aa2573986d4ba08f8799057c1c2d76676552" translate="yes" xml:space="preserve">
          <source>Testing an engine</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f6b155456d3a55a2b9be9939622a8ad937dd49c" translate="yes" xml:space="preserve">
          <source>Testing broadcasting</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be81effb259a9625916ca370950bd77325f0ecdf" translate="yes" xml:space="preserve">
          <source>Testing controller internals</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88285115476c8432d0aa5f67436f3f4089bf51fe" translate="yes" xml:space="preserve">
          <source>Testing harness for the comment model</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1581a87ff10028a8433ac829c419f8ce4baaa470" translate="yes" xml:space="preserve">
          <source>Testing mailboxes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cbc3eb31b5f1649ce6df88bb1dce233aab3e6761" translate="yes" xml:space="preserve">
          <source>Testing mailer classes requires some specific tools to do a thorough job.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5416316810fe2cf1b0935afa9b68152a41caf0d7" translate="yes" xml:space="preserve">
          <source>Testing membership still loops, but it's going to be faster than our own loop that converts values. Also, we are not going to build a new array object per fetch.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="858aabd21a4b208b4990451877453e2f43803b2b" translate="yes" xml:space="preserve">
          <source>Testing named routes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a96b0403a66bd2cdd9fd2035807e3b98555843ff" translate="yes" xml:space="preserve">
          <source>Testing support was woven into the Rails fabric from the beginning. It wasn't an &quot;oh! let's bolt on support for running tests because they're new and cool&quot; epiphany.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d933869eb687d1a93233e716600f55cc0d9511c" translate="yes" xml:space="preserve">
          <source>Testing the response to your request by asserting the presence of key HTML elements and their content is a common way to test the views of your application. Like route tests, view tests reside in &lt;code&gt;test/controllers/&lt;/code&gt; or are part of controller tests. The &lt;code&gt;assert_select&lt;/code&gt; method allows you to query HTML elements of the response by using a simple yet powerful syntax.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b975b53956e5b4022f33f796326d8440fac5084b" translate="yes" xml:space="preserve">
          <source>Tests if a response body is set. Used to determine if the &lt;code&gt;process_action&lt;/code&gt; callback needs to be terminated in &lt;code&gt;AbstractController::Callbacks&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67baecdf6ad8c853dcc7bd51bacc60ecaddb0834" translate="yes" xml:space="preserve">
          <source>Tests if render or redirect has already happened.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a916676dc22150c80edaf0e5035702e3aad3f08d" translate="yes" xml:space="preserve">
          <source>Textile Injection</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce4993745bb791939aa2db5b830778a18882d0ab" translate="yes" xml:space="preserve">
          <source>That action implicitly responds to all formats, but formats can also be explicitly enumerated:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce3f9c329f208b68d6211b0f38ee6c43fca539bd" translate="yes" xml:space="preserve">
          <source>That code depends on the execution path.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f81c7db4c172b40fd85be5c3f2e5def3677eacb" translate="yes" xml:space="preserve">
          <source>That code returns right away, you are just subscribing to &amp;ldquo;render&amp;rdquo; events. The block is saved and will be called whenever someone instruments &amp;ldquo;render&amp;rdquo;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e768896f2099f5b20209f22f36bdb90d96c0e3f" translate="yes" xml:space="preserve">
          <source>That code will pull in the partial from &lt;code&gt;app/views/shared/_menu.html.erb&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53da4ba21c26bc31882ad8e059725174aa6b09ce" translate="yes" xml:space="preserve">
          <source>That completes the comment function of the blogging engine. Now it's time to use it within an application.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5f855fdb395c8bbe0020aa47af7e54b9dadde1e" translate="yes" xml:space="preserve">
          <source>That does not even put the entire Active Support in memory upfront indeed, some stuff is configured via &lt;code&gt;autoload&lt;/code&gt;, so it is only loaded if used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ece9ddb52132adcef0786c7d0fa102944e2787e0" translate="yes" xml:space="preserve">
          <source>That does not match Ruby semantics because &lt;code&gt;Foo&lt;/code&gt; is not in the nesting, and won't work at all in &lt;code&gt;zeitwerk&lt;/code&gt; mode. If you find such corner case you can use the qualified name &lt;code&gt;Foo::Wadus&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24a576279892b73d2575f07ca9df3896b3a8fc01" translate="yes" xml:space="preserve">
          <source>That does not mean you're stuck with these limitations, though. The Ruby I18n gem makes it very easy to exchange the Simple backend implementation with something else that fits better for your needs, by passing a backend instance to the &lt;code&gt;I18n.backend=&lt;/code&gt; setter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce4019b6d948fdf56234665c8cfef2131e917e46" translate="yes" xml:space="preserve">
          <source>That environment is no different than the default ones, start a server with &lt;code&gt;rails server -e staging&lt;/code&gt;, a console with &lt;code&gt;rails console -e staging&lt;/code&gt;, &lt;code&gt;Rails.env.staging?&lt;/code&gt; works, etc.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d2c1504f222a2c1ca8ac9b002226cbe01c01134" translate="yes" xml:space="preserve">
          <source>That first executes the block and then notifies all subscribers once done.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9e8bd10c57fb6d4f16dcf8f09fee57f44dc8da7" translate="yes" xml:space="preserve">
          <source>That idiom may convey &lt;em&gt;grouping&lt;/em&gt; to the reader as well. For example, say you want to send a newsletter whose language depends on the user. Somewhere in the mailer you could group locale-dependent bits like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c22581285b8dfcd73fdfca03cbe8d8fd970e4912" translate="yes" xml:space="preserve">
          <source>That is not a bug, the query includes all &lt;em&gt;known&lt;/em&gt; descendants of &lt;code&gt;Rectangle&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d62c3e6981eec14788d4b285f05dd95b08925cd" translate="yes" xml:space="preserve">
          <source>That is what &lt;code&gt;delegate&lt;/code&gt; does for you:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e59bb5ef1bd5209e36baf54d8171a81d25b01372" translate="yes" xml:space="preserve">
          <source>That is why we talk about &lt;em&gt;constant&lt;/em&gt; autoloading, Rails has the ability to load constants on the fly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8e33e066d832e6b9bb13721a10ba606e5883e59" translate="yes" xml:space="preserve">
          <source>That is,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7702b46a26c7069e2ad4b3e1d6985a651f44c089" translate="yes" xml:space="preserve">
          <source>That may be handy if upgrading to Rails 6 in different phases, but classic mode is discouraged for new applications.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39ee893b0d13309f83464fc59425f185d72e1d06" translate="yes" xml:space="preserve">
          <source>That may be handy if you need to preload STIs or configure a custom inflector, for example.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06298edc42151d93ebdb407ae147bc7ed8dbc145" translate="yes" xml:space="preserve">
          <source>That may be handy to compute method names in a language that follows that convention, for example JavaScript.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b49fb4b854805fcd494633c0a640ffec4a5183b6" translate="yes" xml:space="preserve">
          <source>That may speed legit &lt;code&gt;require&lt;/code&gt; calls a bit, since there are less lookups. Also, if your application uses &lt;a href=&quot;https://github.com/Shopify/bootsnap&quot;&gt;Bootsnap&lt;/a&gt;, that saves the library from building unnecessary indexes, and saves the RAM they would need.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c88e9d9d34556bf7fcdb7ff1a90e7f217c2d1ff" translate="yes" xml:space="preserve">
          <source>That means that you can require it like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d172f05feb9afa315e08d56bcb0b405e7f87d093" translate="yes" xml:space="preserve">
          <source>That said, when streaming, you need to properly check your templates and choose when to use &lt;code&gt;provide&lt;/code&gt; and &lt;code&gt;content_for&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb3573ece5a90fa144f82252b4a13874f6817d32" translate="yes" xml:space="preserve">
          <source>That syntactic sugar is used a lot in Rails to avoid positional arguments where there would be too many, offering instead interfaces that emulate named parameters. In particular it is very idiomatic to use a trailing hash for options.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78cef66da724ce0d1e0e3a78ea18c92c1cdc458c" translate="yes" xml:space="preserve">
          <source>That will place &lt;code&gt;script&lt;/code&gt; tags for your default set of JavaScript files on the page; this technique is useful if you'll only be using these scripts in a few views.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a92e3377de3938c7286c918aa563c7f9c131f6a" translate="yes" xml:space="preserve">
          <source>That would add something like &amp;ldquo;Process data files (345.2ms)&amp;rdquo; to the log, which you can then use to compare timings when optimizing your code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f23cf4d5a2e097ae20f2581c0d4f0df92efe46b" translate="yes" xml:space="preserve">
          <source>That'll create the &lt;code&gt;app/components&lt;/code&gt; directory and put &lt;code&gt;foo.rb&lt;/code&gt; in there.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9739eb4bce7cc4b1ad8a53b15fb4744e003f2195" translate="yes" xml:space="preserve">
          <source>That's a little bit better, but what about multiple links that have the same effect?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ce8a1c0e4b527351113079c7704709f896516e54" translate="yes" xml:space="preserve">
          <source>That's how you typically work with resources.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e93f4cf2c16977aa0828b84202ee64df60519c65" translate="yes" xml:space="preserve">
          <source>That's it!</source>
          <target state="translated">그게 다야!</target>
        </trans-unit>
        <trans-unit id="d05b46ead4ca78bb00c6fe99342067ed3323a458" translate="yes" xml:space="preserve">
          <source>That's it! Uploads begin upon form submission.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="363fea70f776a925725d9c37d77891c3571eaaff" translate="yes" xml:space="preserve">
          <source>That's it. The News views will use the new layout, hiding the top menu and adding a new right menu inside the &quot;content&quot; div.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="168a4527a7795a04ef6dc0c3871fa1e7c8b7e4de" translate="yes" xml:space="preserve">
          <source>That's what you want the bulk of the time. New comment creates a new Notification. But there may well be off cases, like copying a commentable and its comments, where you don't want that. So you'd have a concern something like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf4dee0188a07f2400c57ee1c5d1195b29503ae8" translate="yes" xml:space="preserve">
          <source>The &quot;Welcome aboard&quot; page is the &lt;em&gt;smoke test&lt;/em&gt; for a new Rails application: it makes sure that you have your software configured correctly enough to serve a page.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af072efeaa05ddb76a2c9285266e138ca94f42df" translate="yes" xml:space="preserve">
          <source>The &quot;role&quot; in the &lt;code&gt;connected_to&lt;/code&gt; call looks up the connections that are connected on that connection handler (or role). The &lt;code&gt;reading&lt;/code&gt; connection handler will hold all the connections that were connected via &lt;code&gt;connects_to&lt;/code&gt; with the role name of &lt;code&gt;reading&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d48e1ee5a98a7d2ed01d63a5da586a276d95250b" translate="yes" xml:space="preserve">
          <source>The (&lt;code&gt;:references&lt;/code&gt;) keyword used in the bash command is a special data type for models. It creates a new column on your database table with the provided model name appended with an &lt;code&gt;_id&lt;/code&gt; that can hold integer values. To get a better understanding, analyze the &lt;code&gt;db/schema.rb&lt;/code&gt; file after running the migration.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="559c6f509da8b502c0dec8768154122c729b822b" translate="yes" xml:space="preserve">
          <source>The :as and :object options</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c904230ea5c4a3c778541f72b97fae0cdf2a9d8" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../../date&quot;&gt;Date&lt;/a&gt; Helper primarily creates select/option tags for different kinds of dates and times or date and time elements. All of the select-type methods share a number of common options that are as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa0054734ede68c7a4f50447426137180fe4c23d" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;application&quot;&gt;Application&lt;/a&gt; is also responsible for building the middleware stack.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2cfc8d36804f6e24895f238930e685db4dfd80d6" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;application#method-i-secret_key_base&quot;&gt;#secret_key_base&lt;/a&gt; is used as the input secret to the application's key generator, which in turn is used to create all MessageVerifiers/MessageEncryptors, including the ones that sign and encrypt cookies.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3189f82d4273b6a375724e9691bc4638f9be2090" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;batches#method-i-find_each&quot;&gt;find_each&lt;/a&gt; method uses &lt;a href=&quot;batches#method-i-find_in_batches&quot;&gt;find_in_batches&lt;/a&gt; with a batch size of 1000 (or as specified by the &lt;code&gt;:batch_size&lt;/code&gt; option).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c568a4a14d4b7f217f7eaaddea80ee90e6ae2d30" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;classmethods#method-i-default_scope&quot;&gt;default_scope&lt;/a&gt; is also applied while creating/building a record. It is not applied while updating a record.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b298a52c1f512dd4e9635bdbc6c5c1efacb2982e" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;classmethods#method-i-transaction&quot;&gt;transaction&lt;/a&gt; method is also available as a model instance method. For example, you can also do this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="261bc3f27bcfd410fb1140e954de0fd2e215e7d5" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;connectionhandler&quot;&gt;ConnectionHandler&lt;/a&gt; class is not coupled with the Active models, as it has no knowledge about the model. The model needs to pass a specification name to the handler, in order to look up the correct connection pool.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ff3c5bb0465d3c0362a71937800d9619714b7d6" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;databaseselector&quot;&gt;DatabaseSelector&lt;/a&gt;Middleware provides a framework for automatically swapping from the primary to the replica database connection. Rails provides a basic framework to determine when to swap and allows for applications to write custom strategy classes to override the default behavior.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e72c1700fc3f73534e38f61cdbe5b3b90a3c7fa" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;formhelper#method-i-form_for&quot;&gt;#form_for&lt;/a&gt; method automatically includes the model id as a hidden field in the form. This is used to maintain the correlation between the form data and its associated model. Some ORM systems do not use IDs on nested models so in this case you want to be able to disable the hidden id.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df9e35f6ee0a47f892194874e01bbfb8e13f9178" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;getip&quot;&gt;GetIp&lt;/a&gt; class exists as a way to defer processing of the request data into an actual IP address. If the &lt;a href=&quot;../request#method-i-remote_ip&quot;&gt;ActionDispatch::Request#remote_ip&lt;/a&gt; method is called, this class will calculate the value and then memoize it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac5886a6eceaddecba8fcab9b5ccbeaf7b4ada05" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;http://www.securiteam.com/securitynews/5LP051FHPE.html&quot;&gt;moz-binding&lt;/a&gt; CSS property proved to be another way to introduce JavaScript in CSS in Gecko-based browsers (Firefox, for example).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a694c845448b989193ceea97802b63d0b7cb7189" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://api.rubyonrails.org/v4.1/classes/ActionDispatch/Assertions/TagAssertions.html&quot;&gt;&lt;code&gt;TagAssertions&lt;/code&gt; module&lt;/a&gt; (containing methods such as &lt;code&gt;assert_tag&lt;/code&gt;), &lt;a href=&quot;https://github.com/rails/rails/blob/6061472b8c310158a2a2e8e9a6b81a1aef6b60fe/actionpack/lib/action_dispatch/testing/assertions/dom.rb&quot;&gt;has been deprecated&lt;/a&gt; in favor of the &lt;code&gt;assert_select&lt;/code&gt; methods from the &lt;code&gt;SelectorAssertions&lt;/code&gt; module, which has been extracted into the &lt;a href=&quot;https://github.com/rails/rails-dom-testing&quot;&gt;rails-dom-testing gem&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="daea83b9fd6b436428a0b06d769841ce27585f73" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://groups.google.com/group/rubyonrails-talk&quot;&gt;Ruby on Rails mailing list&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="676f80b78a6efb7968cadd8a7a713d07cfa6edf8" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://www.railstutorial.org/book&quot;&gt;Ruby on Rails Tutorial&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de98df7609ac53515b88c2b836906330c083880b" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.9&quot;&gt;cache control header&lt;/a&gt; is a W3C specification that describes how a request can be cached. When no CDN is used, a browser will use this information to cache contents. This is very helpful for assets that are not modified so that a browser does not need to re-download a website's CSS or JavaScript on every request. Generally we want our Rails server to tell our CDN (and browser) that the asset is &quot;public&quot;, that means any cache can store the request. Also we commonly want to set &lt;code&gt;max-age&lt;/code&gt; which is how long the cache will store the object before invalidating the cache. The &lt;code&gt;max-age&lt;/code&gt; value is set to seconds with a maximum possible value of &lt;code&gt;31536000&lt;/code&gt; which is one year. You can do this in your Rails application by setting</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe48602bab3bf0121faae0525720959c41a152ae" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;index&quot;&gt;Ruby on Rails Guides&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8793e08ceca2e5c463ad8a2a149f6846d821162" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;inflector&quot;&gt;Inflector&lt;/a&gt; transforms words from singular to plural, class names to table names, modularized class names to ones without, and class names to foreign keys. The default inflections for pluralization, singularization, and uncountable words are kept in inflections.rb.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7dd16d82f328c90fd355e114c85e41f099e74d93" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;irc://irc.freenode.net/#rubyonrails&quot;&gt;#rubyonrails&lt;/a&gt; channel on irc.freenode.net</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e99c9a76f707b4aa558869b5e91070c55e7c3c0b" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;layouts_and_rendering&quot;&gt;Layouts &amp;amp; Rendering Guide&lt;/a&gt; explains this in more detail.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae1f12b1da6851092c076486248eaafcd73d1d92" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;renderer&quot;&gt;Renderer&lt;/a&gt; will parse the options from the &lt;code&gt;render&lt;/code&gt; or &lt;code&gt;render_body&lt;/code&gt; method and render a partial or a template based on the options. The &lt;code&gt;TemplateRenderer&lt;/code&gt; and &lt;code&gt;PartialRenderer&lt;/code&gt; objects are wrappers which do all the setup and logic necessary to render a view and a new object is created each time &lt;code&gt;render&lt;/code&gt; is called.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa8e2542d9b4643b4728b2c24985be0da08ae74a" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;richtext&quot;&gt;RichText&lt;/a&gt; record holds the content produced by the Trix editor in a serialized &lt;code&gt;body&lt;/code&gt; attribute. It also holds all the references to the embedded files, which are stored using Active Storage. This record is then associated with the Active Record model the application desires to have rich text content using the &lt;code&gt;has_rich_text&lt;/code&gt; class method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38da1c72c68070bb4df53e815adfffaae3b56293" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;sanitizehelper&quot;&gt;SanitizeHelper&lt;/a&gt; module provides a set of methods for scrubbing text of undesired HTML elements. These helper methods extend Action View making them callable within your template files.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3aeaa555bf0ae986fab284085599376e99a05e09" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;security&quot;&gt;Security Guide&lt;/a&gt; has more about this and a lot of other security-related issues that you should be aware of when developing a web application.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="958ee654031b54500f16681aec9f86f2cad92bbb" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;session#attribute-i-remote_addr&quot;&gt;#remote_addr&lt;/a&gt; used in the last request.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc5945571a8ced080126f503e3ff3c4dadf1c8ca" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;texthelper&quot;&gt;TextHelper&lt;/a&gt; module provides a set of methods for filtering, formatting and transforming strings, which can reduce the amount of inline Ruby code in your views. These helper methods extend Action View making them callable within your template files.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="917c36aa1c0f73e61c01109543064fb98ceb2654" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;timezone&quot;&gt;TimeZone&lt;/a&gt; class serves as a wrapper around TZInfo::Timezone instances. It allows us to do the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d88d4996921266f4620f00041489241493ebb076" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;unicode&quot;&gt;Unicode&lt;/a&gt; version that is supported by the implementation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28a47febaca078cb6da04aeacf7bed2756a147a5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;--mountable&lt;/code&gt; option tells the generator that you want to create a &quot;mountable&quot; and namespace-isolated engine. This generator will provide the same skeleton structure as would the &lt;code&gt;--full&lt;/code&gt; option. The &lt;code&gt;--full&lt;/code&gt; option tells the generator that you want to create an engine, including a skeleton structure that provides the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a31a32da1e13841a06036adefa9f0ce3ffe7bf6c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;--mountable&lt;/code&gt; option will add to the &lt;code&gt;--full&lt;/code&gt; option:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1cee14827d08f7dbf8ff0e3f38f3a845d3fd202b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;-b&lt;/code&gt; option binds Rails to the specified IP, by default it is localhost. You can run a server as a daemon by passing a &lt;code&gt;-d&lt;/code&gt; option.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7745367da6a6589cf590599c2b25a5c35718b6f4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:allow_blank&lt;/code&gt; option is similar to the &lt;code&gt;:allow_nil&lt;/code&gt; option. This option will let validation pass if the attribute's value is &lt;code&gt;blank?&lt;/code&gt;, like &lt;code&gt;nil&lt;/code&gt; or an empty string for example.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a7dc78687bf59aec5a1cf84126b6c699e0c0cc1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:allow_nil&lt;/code&gt; option skips the validation when the value being validated is &lt;code&gt;nil&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7fc394632435d57f94dd290f6cb0bf23c5d802b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:as&lt;/code&gt; option lets you override the normal naming for the named route helpers. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c894466ba90f3dc16de466d84d6825a9e1830d2a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:as&lt;/code&gt; option may be used when rendering partials.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae26e393c502265acb97179057642282b551c57c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:as&lt;/code&gt; option overrides the automatically-generated name for the resource in nested route helpers. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41c7a6f671a46a5697ee3a45561bbf891ff95e69" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:batch_size&lt;/code&gt; option allows you to specify the number of records to be retrieved in each batch, before being passed individually to the block. For example, to retrieve records in batches of 5000:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e691995ccde41ad605241f34eab4e951f9d732d4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:controller&lt;/code&gt; option lets you explicitly specify a controller to use for the resource. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="292c456fe0e276257c118bcd9442b2ae2aa88470" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:count&lt;/code&gt; interpolation variable has a special role in that it both is interpolated to the translation and used to pick a pluralization from the translations according to the pluralization rules defined in the pluralization backend. By default, only the English pluralization rules are applied.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c8c9bbd139a784cdeba19fab7c52f51e8cf82f9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:counter_cache&lt;/code&gt; option can be used to make finding the number of belonging objects more efficient. Consider these models:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e25153a45dd1aa53e746f9349c48c09991180c68" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:debug&lt;/code&gt; option is redundant if debug mode is already on.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa325e355306a799628c5b98499926d49b2a8dd7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:dependent&lt;/code&gt; option can have different values which specify how the deletion is done. For more information, see the documentation for this option on the different specific association types. When no option is given, the behavior is to do nothing with the associated records when destroying a record.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f5d2d501585bc8f55259e8b0161ff54396d0108" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:destroy&lt;/code&gt; and &lt;code&gt;:delete_all&lt;/code&gt; options also affect the semantics of the &lt;code&gt;collection.delete&lt;/code&gt; and &lt;code&gt;collection=&lt;/code&gt; methods by causing them to destroy associated objects when they are removed from the collection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8c6a623c208fc9933af1acc6839da24472e0610" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:except&lt;/code&gt; option specifies a route or list of routes that Rails should &lt;em&gt;not&lt;/em&gt; create:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26daae7abab493bc4cfea145f93fbcfe6ad2b81c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:force&lt;/code&gt; option is useful when you're calling some other method to ask whether you should force a cache write. Otherwise, it's clearer to just call &lt;code&gt;Cache#write&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2696c1bee386e09903f0cb4f6dfa58cce345908c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:foreign_key&lt;/code&gt; and &lt;code&gt;:association_foreign_key&lt;/code&gt; options are useful when setting up a many-to-many self-join. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="deb069581b1d26703133d1c4d0bb057db473cf0c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:inverse_of&lt;/code&gt; option specifies the name of the &lt;code&gt;belongs_to&lt;/code&gt; association that is the inverse of this association.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86c1b1f7637bbf5a9bfd940ec141a7bd2ef3f1b3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:inverse_of&lt;/code&gt; option specifies the name of the &lt;code&gt;has_many&lt;/code&gt; or &lt;code&gt;has_one&lt;/code&gt; association that is the inverse of this association.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2858db3bd177b9f0370fcc2ef7920a8257be347a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:on&lt;/code&gt; option lets you specify when the validation should happen. The default behavior for all the built-in validation helpers is to be run on save (both when you're creating a new record and when you're updating it). If you want to change it, you can use &lt;code&gt;on: :create&lt;/code&gt; to run the validation only when a new record is created or &lt;code&gt;on: :update&lt;/code&gt; to run the validation only when a record is updated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="848c1a5f8ce665bec81bf2358864856f7db2703e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:on&lt;/code&gt; option specifies when a callback will be fired. If you don't supply the &lt;code&gt;:on&lt;/code&gt; option the callback will fire for every action.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1cb24f09350b9feaa2734b838de0933ed88c438d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:only&lt;/code&gt; and &lt;code&gt;:except&lt;/code&gt; options can be used to limit the attributes included, and work similar to the &lt;code&gt;attributes&lt;/code&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f040e498acfaa176f80797566d22af51cb60565" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:param&lt;/code&gt; option overrides the default resource identifier &lt;code&gt;:id&lt;/code&gt; (name of the &lt;a href=&quot;routing#dynamic-segments&quot;&gt;dynamic segment&lt;/a&gt; used to generate the routes). You can access that segment from your controller using &lt;code&gt;params[&amp;lt;:param&amp;gt;]&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91be0f44a2f6d7abcff0e1ee9634e98883d0d56a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:path&lt;/code&gt;, &lt;code&gt;:as&lt;/code&gt;, &lt;code&gt;:module&lt;/code&gt;, &lt;code&gt;:shallow_path&lt;/code&gt; and &lt;code&gt;:shallow_prefix&lt;/code&gt; options all default to the name of the namespace.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1cda9cd8b5e64e9d56669135cf4bce2c9023cc41" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:path_names&lt;/code&gt; option lets you override the automatically-generated &lt;code&gt;new&lt;/code&gt; and &lt;code&gt;edit&lt;/code&gt; segments in paths:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4152ad9053d8410855811afa4d2dd1a03aadb061" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:prefix&lt;/code&gt; option is the key used to retrieve the hash of date components from the &lt;code&gt;params&lt;/code&gt; hash. Here it was set to &lt;code&gt;start_date&lt;/code&gt;, if omitted it will default to &lt;code&gt;date&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9ee026ad460113bb0501877d8801521fc596d2e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:shallow_prefix&lt;/code&gt; option adds the specified parameter to the named route helpers:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8052ed415f969ce656c9c4487ab9b7b1dcb497db" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:source&lt;/code&gt; option specifies the source association name for a &lt;code&gt;has_many :through&lt;/code&gt; association. You only need to use this option if the name of the source association cannot be automatically inferred from the association name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81e187b37149ac27035f9755fa4af6c96d9b2e3a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:source&lt;/code&gt; option specifies the source association name for a &lt;code&gt;has_one :through&lt;/code&gt; association.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8542647b437fdb753ab220a4ecf2d0b655ab2b7c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:source_type&lt;/code&gt; option specifies the source association type for a &lt;code&gt;has_many :through&lt;/code&gt; association that proceeds through a polymorphic association.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5efa326f329c0932358427b872da8e3b7c0957ed" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:source_type&lt;/code&gt; option specifies the source association type for a &lt;code&gt;has_one :through&lt;/code&gt; association that proceeds through a polymorphic association.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f299f9a212488b3cde726fc3ba2f5b7f8d04c7e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:through&lt;/code&gt; option specifies a join model through which to perform the query. &lt;code&gt;has_many :through&lt;/code&gt; associations provide a way to implement many-to-many relationships, as discussed &lt;a href=&quot;#the-has-many-through-association&quot;&gt;earlier in this guide&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e9557156abaea6c7fbe15e0c4c7758aa427c47c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:through&lt;/code&gt; option specifies a join model through which to perform the query. &lt;code&gt;has_one :through&lt;/code&gt; associations were discussed in detail &lt;a href=&quot;#the-has-one-through-association&quot;&gt;earlier in this guide&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0377d88c2d0c583cca57f0d48f4694242d3931aa" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:value_method&lt;/code&gt; and &lt;code&gt;:text_method&lt;/code&gt; parameters are methods to be called on each member of &lt;code&gt;collection&lt;/code&gt;. The return values are used as the &lt;code&gt;value&lt;/code&gt; attribute and contents of each &lt;code&gt;&amp;lt;option&amp;gt;&lt;/code&gt; tag, respectively. They can also be any object that responds to &lt;code&gt;call&lt;/code&gt;, such as a &lt;code&gt;proc&lt;/code&gt;, that will be called for each member of the &lt;code&gt;collection&lt;/code&gt; to retrieve the value/text.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8e671f57a429e4781c7a29cf97fa964cf7a4356" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:value_method&lt;/code&gt; and &lt;code&gt;:text_method&lt;/code&gt; parameters are methods to be called on each member of &lt;code&gt;collection&lt;/code&gt;. The return values are used as the &lt;code&gt;value&lt;/code&gt; attribute and contents of each check box tag, respectively. They can also be any object that responds to &lt;code&gt;call&lt;/code&gt;, such as a &lt;code&gt;proc&lt;/code&gt;, that will be called for each member of the &lt;code&gt;collection&lt;/code&gt; to retrieve the value/text.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82db8871070d23b557651bd9b85f7c2e1b95fb35" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:value_method&lt;/code&gt; and &lt;code&gt;:text_method&lt;/code&gt; parameters are methods to be called on each member of &lt;code&gt;collection&lt;/code&gt;. The return values are used as the &lt;code&gt;value&lt;/code&gt; attribute and contents of each radio button tag, respectively. They can also be any object that responds to &lt;code&gt;call&lt;/code&gt;, such as a &lt;code&gt;proc&lt;/code&gt;, that will be called for each member of the &lt;code&gt;collection&lt;/code&gt; to retrieve the value/text.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1288e57d419dd6039e2c3a0099f9798303225628" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@article&lt;/code&gt; object is available to any partials rendered in the view because we defined it as an instance variable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47a9686bfae327dbe1333af874d0f48d9e0e68c0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;APP_PATH&lt;/code&gt; constant will be used later in &lt;code&gt;rails/commands&lt;/code&gt;. The &lt;code&gt;config/boot&lt;/code&gt; file referenced here is the &lt;code&gt;config/boot.rb&lt;/code&gt; file in our application which is responsible for loading Bundler and setting it up.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0abd6a2fc15c8113379e5b9593c34c6022f95cbd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Accept-Language&lt;/code&gt; HTTP header indicates the preferred language for request's response. Browsers &lt;a href=&quot;http://www.w3.org/International/questions/qa-lang-priorities&quot;&gt;set this header value based on the user's language preference settings&lt;/a&gt;, making it a good first choice when inferring a locale.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b0f3c166ef7f45a91e1254dfa71348a0bf9e846" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ActionCable.startDebugging()&lt;/code&gt; and &lt;code&gt;ActionCable.stopDebugging()&lt;/code&gt; methods have been removed and replaced with the property &lt;code&gt;ActionCable.logger.enabled&lt;/code&gt;. If you are using these methods you will need to make these changes:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8617a6a529ef1d67e05d36ce95b4f099f7b3846" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ActionMailer::Base.deliveries&lt;/code&gt; array is only reset automatically in &lt;code&gt;ActionMailer::TestCase&lt;/code&gt; and &lt;code&gt;ActionDispatch::IntegrationTest&lt;/code&gt; tests. If you want to have a clean slate outside these test cases, you can reset it manually with: &lt;code&gt;ActionMailer::Base.deliveries.clear&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5dec93f2fc310490b42484ea22c3c9b7ee82d2c0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ActionMailer::MessageDelivery&lt;/code&gt; class is a wrapper around a delegate that will call your method to generate the mail. If you want direct access to the delegator, or &lt;code&gt;Mail::Message&lt;/code&gt;, you can call the &lt;code&gt;message&lt;/code&gt; method on the &lt;code&gt;ActionMailer::MessageDelivery&lt;/code&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4331b6721a13fcfe7770e1cceb07998d04ec2ac" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ActionMailer::MessageDelivery&lt;/code&gt; class is used by &lt;a href=&quot;base&quot;&gt;ActionMailer::Base&lt;/a&gt; when creating a new mailer. &lt;code&gt;MessageDelivery&lt;/code&gt; is a wrapper (&lt;code&gt;Delegator&lt;/code&gt; subclass) around a lazy created &lt;code&gt;Mail::Message&lt;/code&gt;. You can get direct access to the &lt;code&gt;Mail::Message&lt;/code&gt;, deliver the email or schedule the email to be sent through Active Job.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f8b065b132ca0228bb9b12b89407ad6edcbcb87" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ActiveModel::AttributeMethods&lt;/code&gt; module can add custom prefixes and suffixes on methods of a class. It is used by defining the prefixes and suffixes and which methods on the object will use them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a13a9b64a8e5e0132933cff970f2c7b11d046be" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ActiveModel::Validations&lt;/code&gt; module adds the ability to validate objects like in Active Record.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90cf0fe7f5b116b1f1475bc23b99131b756f6ffc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Application&lt;/code&gt; class adds a couple more paths to this set. And as in your &lt;code&gt;Application&lt;/code&gt;, all folders under &lt;code&gt;app&lt;/code&gt; are automatically added to the load path. If you have an &lt;code&gt;app/services&lt;/code&gt; folder for example, it will be added by default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="995282b43e33743ec793eb6540e1f2c4e4c0612a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ApplicationController&lt;/code&gt; class inside an engine is named just like a Rails application in order to make it easier for you to convert your applications into engines.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dcc72d2ebe727fca6de8bcf5a46106ef5e2bf0a1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ArticleTest&lt;/code&gt; class defines a &lt;em&gt;test case&lt;/em&gt; because it inherits from &lt;code&gt;ActiveSupport::TestCase&lt;/code&gt;. &lt;code&gt;ArticleTest&lt;/code&gt; thus has all the methods available from &lt;code&gt;ActiveSupport::TestCase&lt;/code&gt;. Later in this guide, we'll see some of the methods it gives us.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6fe455c29cc86d41c9fc4aeddbc07e87e2893468" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ArticlesController&lt;/code&gt; class inherits from &lt;code&gt;Blorgh::ApplicationController&lt;/code&gt;, not the application's &lt;code&gt;ApplicationController&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52e3b46c39c89d87670d20296e3c925061f35a9f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;BankController&lt;/code&gt; uses the &amp;ldquo;bank&amp;rdquo; layout.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70e5726fee6f341f37fbb1aa3bd3b3474106f916" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Blorgh::Article&lt;/code&gt; model should then have some code to convert the &lt;code&gt;author_name&lt;/code&gt; field into an actual &lt;code&gt;User&lt;/code&gt; object and associate it as that article's &lt;code&gt;author&lt;/code&gt; before the article is saved. It will also need to have an &lt;code&gt;attr_accessor&lt;/code&gt; set up for this field, so that the setter and getter methods are defined for it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9215b60a92a952bfbcd421ada3a8af006baecfeb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Concerns::&lt;/code&gt; namespace worked with the classic autoloader as a side-effect of the implementation, but it was not really an intended behavior. An application using &lt;code&gt;Concerns::&lt;/code&gt; needs to rename those classes and modules to be able to run in &lt;code&gt;zeitwerk&lt;/code&gt; mode.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8232b3112a03b35d7d55cec93247fa9acf5289d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;CookieStore&lt;/code&gt; uses the &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/ActionDispatch/Cookies/ChainedCookieJars.html#method-i-encrypted&quot;&gt;encrypted&lt;/a&gt; cookie jar to provide a secure, encrypted location to store session data. Cookie-based sessions thus provide both integrity as well as confidentiality to their contents. The encryption key, as well as the verification key used for &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/ActionDispatch/Cookies/ChainedCookieJars.html#method-i-signed&quot;&gt;signed&lt;/a&gt; cookies, is derived from the &lt;code&gt;secret_key_base&lt;/code&gt; configuration value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a567707ba3618c845930fb33cfc7fef61732f0bf" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;CurrencyController&lt;/code&gt; inherits the layout from BankController.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9e62f90f79df75fbb185ca8d4adf379735c32c66" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Dungeon&lt;/code&gt; instances &lt;code&gt;d&lt;/code&gt; and &lt;code&gt;t.dungeon&lt;/code&gt; in the above example refer to the same in-memory instance since the association matches the name of the class. The result would be the same if we added &lt;code&gt;:inverse_of&lt;/code&gt; to our model definitions:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="512bdbc16f725c80265087dcc852e9088fdb8508" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;EmployeeController&lt;/code&gt; uses the &amp;ldquo;employee&amp;rdquo; layout, because it set the layout to &lt;code&gt;nil&lt;/code&gt;, resetting the parent configuration.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30d309ca5055b500c4b666677e00c3e8db0a2c02" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ExchangeController&lt;/code&gt; uses the &amp;ldquo;exchange&amp;rdquo; layout.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="446e5d3ada5afccce0c4d2329738bdb9df2d23ca" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;FormBuilder&lt;/code&gt; object can be thought of as serving as a proxy for the methods in the &lt;code&gt;FormHelper&lt;/code&gt; module. This class, however, allows you to call methods with the model object you are building the form for.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="13ef95dd28af1dbc27ca71c6b0dc671ec1901510" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;I18n.locale&lt;/code&gt; defaults to &lt;code&gt;I18n.default_locale&lt;/code&gt; which defaults to :&lt;code&gt;en&lt;/code&gt;. The default locale can be set like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ddb92b53d2fbde8c6af3b5d7156374887195ac9c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;InboundEmail&lt;/code&gt; is an Active Record that keeps a reference to the raw email stored in Active Storage and tracks the status of processing. By default, incoming emails will go through the following lifecycle:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d28b616a355cfd7302f884aa71c76c6db8e1618b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;InformationController&lt;/code&gt; uses the &amp;ldquo;information&amp;rdquo; layout, explicitly set.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f5174d48a308eee6290d167708394c1dd616f56" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Message-ID&lt;/code&gt; as specified by rfc822 is supposed to be a unique identifier for that individual email. That makes it an ideal tracking token for debugging and forensics, just like &lt;code&gt;X-Request-Id&lt;/code&gt; does for web request.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1fcd9fe2dd65ed179d6f83c92caaf5c04f3f9a2f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Path&lt;/code&gt; object is simply an enumerable and allows you to easily add extra paths:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bdb9381a7c99a1ca93b6db726e0fe6f6e344dcfc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Rack::Builder.parse_file&lt;/code&gt; method here takes the content from this &lt;code&gt;config.ru&lt;/code&gt; file and parses it using this code:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="780ec8946d6d975ef4d543524480fec8a1302f16" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Rails.application.routes.draw do ... end&lt;/code&gt; block that wraps your route definitions is required to establish the scope for the router DSL and must not be deleted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="12a63717254fae15846708f3d8a04f5bd94ba915" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Rails.root/tmp&lt;/code&gt; directory is, like the *nix /tmp directory, the holding place for temporary files like process id files and cached actions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="34fb54473f3a1dabd314dd2222f27ff56a751712" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Rails::Application&lt;/code&gt; class, as defined in &lt;code&gt;railties/lib/rails/application.rb&lt;/code&gt; defines &lt;code&gt;bootstrap&lt;/code&gt;, &lt;code&gt;railtie&lt;/code&gt;, and &lt;code&gt;finisher&lt;/code&gt; initializers. The &lt;code&gt;bootstrap&lt;/code&gt; initializers prepare the application (like initializing the logger) while the &lt;code&gt;finisher&lt;/code&gt; initializers (like building the middleware stack) are run last. The &lt;code&gt;railtie&lt;/code&gt; initializers are the initializers which have been defined on the &lt;code&gt;Rails::Application&lt;/code&gt; itself and are run between the &lt;code&gt;bootstrap&lt;/code&gt; and &lt;code&gt;finishers&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63d1ad47d1e7f4302683af470619daeb2273dd73" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Rails::Server&lt;/code&gt; class is defined in this file by inheriting from &lt;code&gt;Rack::Server&lt;/code&gt;. When &lt;code&gt;Rails::Server.new&lt;/code&gt; is called, this calls the &lt;code&gt;initialize&lt;/code&gt; method in &lt;code&gt;rails/commands/server/server_command.rb&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="05b5c9dcc941205e4fc8484e5cb7dc0727bbc5cb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Rails::Server&lt;/code&gt; inherits from &lt;code&gt;Rack::Server&lt;/code&gt; and calls the &lt;code&gt;Rack::Server#start&lt;/code&gt; method this way:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b79c182480194b2438e94677109762e762e63025" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ScreenshotHelper&lt;/code&gt; is a helper designed to capture screenshots of your tests. This can be helpful for viewing the browser at the point a test failed, or to view screenshots later for debugging.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e80d8531c4648515a82be3858eccc3cd90ba5c71" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;String&lt;/code&gt; MIME type of the request.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8eb94e6a4f6516c608728ffc088d7f02808f5c96" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;TellerController&lt;/code&gt; also uses the &amp;ldquo;information&amp;rdquo; layout, because the parent explicitly set it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed9c022121591947b6319500340680df7d8c5afc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;TillController&lt;/code&gt; does not use a layout at all.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f42154dc918af702dc2de6a35668a6e9564594e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;VaultController&lt;/code&gt; chooses a layout dynamically by calling the &lt;code&gt;access_level_layout&lt;/code&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f5b74b8d88911be8233b7161cba1081373bf25d4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;WebNotificationsChannel.broadcast_to&lt;/code&gt; call places a message in the current subscription adapter's pubsub queue under a separate broadcasting name for each user. For a user with an ID of 1, the broadcasting name would be &lt;code&gt;web_notifications:1&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac5d2dd4da0f88c0bb967d3ae082f07cf6c89da2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;WebNotificationsChannel.broadcast_to&lt;/code&gt; call places a message in the current subscription adapter's pubsub queue under a separate broadcasting name for each user. The default pubsub queue for Action Cable is &lt;code&gt;redis&lt;/code&gt; in production and &lt;code&gt;async&lt;/code&gt; in development and test environments. For a user with an ID of 1, the broadcasting name would be &lt;code&gt;web_notifications:1&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="489de8bc423b62f305c4ced795938cfa23d0fa57" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;action&lt;/code&gt; method returns a valid Rack application for the Rails router to dispatch to.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37ee48f4b4b99e6d99333401d2bbcf1a69bfa300" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;activerecord-deprecated_finders&lt;/code&gt; gem is no longer supported in Rails 5.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a68821c94d0ef2eb923072ed5726f47809e49a8f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;add&lt;/code&gt; method accepts the following options as arguments: &lt;a href=&quot;root#method-i-eager_load&quot;&gt;#eager_load&lt;/a&gt;, autoload, &lt;a href=&quot;root#method-i-autoload_once&quot;&gt;#autoload_once&lt;/a&gt;, and glob.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6df5698ac314752a07ae5afb85ff8a7e829e920" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;add&lt;/code&gt; method lets you add an error message related to a particular attribute. It takes as arguments the attribute and the error message.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4359fd85422b72835e2eb432161232ec7be96ca" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;after_find&lt;/code&gt; callback will be called whenever Active Record loads a record from the database. &lt;code&gt;after_find&lt;/code&gt; is called before &lt;code&gt;after_initialize&lt;/code&gt; if both are defined.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2dcf034a922fdda0fdd2391002757aa1743f26c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;after_initialize&lt;/code&gt; and &lt;code&gt;after_find&lt;/code&gt; callbacks have no &lt;code&gt;before_*&lt;/code&gt; counterparts, but they can be registered just like the other Active Record callbacks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="986ba74ea390f9f2a28b3b1a5ce90b135012938f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;after_initialize&lt;/code&gt; callback is triggered every time a new object of the class is initialized.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3466fc342afa60293cb131b7b31e285f10c1afaf" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;after_initialize&lt;/code&gt; callback will be called whenever an Active Record object is instantiated, either by directly using &lt;code&gt;new&lt;/code&gt; or when a record is loaded from the database. It can be useful to avoid the need to directly override your Active Record &lt;code&gt;initialize&lt;/code&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8190ffa40891dbaada92ba09a3c27935c245862f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;after_touch&lt;/code&gt; callback will be called whenever an Active Record object is touched.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3faf7c5697e0c5912622f8172afb8259c89553ad" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;app/views/users/_user.html.erb&lt;/code&gt; partial contains the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="daa7967904c796b301f5a144fd59e89ffb1a36bb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;app&lt;/code&gt; method here is defined like so:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad1a8b5ee37aabfb2fe44e022ca83ab9488aa067" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;application_system_test_case.rb&lt;/code&gt; holds the default configuration for your system tests.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef7da1c9cab78d0e3ad6571c5ada1b9dae7127f0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;args&lt;/code&gt; argument also accepts a proc which will get passed the actual job's arguments. Your proc needs to return a boolean value determining if the job's arguments matches your expectation. This is useful to check only for a subset of arguments.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9cee6ead745fefabcca8a3eb89d510783b0bd567" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;articles_path&lt;/code&gt; helper tells Rails to point the form to the URI Pattern associated with the &lt;code&gt;articles&lt;/code&gt; prefix; and the form will (by default) send a &lt;code&gt;POST&lt;/code&gt; request to that route. This is associated with the &lt;code&gt;create&lt;/code&gt; action of the current controller, the &lt;code&gt;ArticlesController&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f90d906d34fc152167959be09451a5b3e0dee57" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;as&lt;/code&gt; option passes an &amp;ldquo;application/json&amp;rdquo; Accept header (thereby setting the request format to JSON unless overridden), sets the content type to &amp;ldquo;application/json&amp;rdquo; and encodes the parameters as JSON.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="978ab81b21128cded8f6402a12991cf27afd7f26" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;as_json&lt;/code&gt; method, similar to &lt;code&gt;serializable_hash&lt;/code&gt;, provides a Hash representing the model.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16ea7af1e8bda3242e0a4b7e4ea21e654f157a15" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;assert_emails&lt;/code&gt; method is not tied to a particular deliver method and will work with emails delivered with either the &lt;code&gt;deliver_now&lt;/code&gt; or &lt;code&gt;deliver_later&lt;/code&gt; method. If we explicitly want to assert that the email has been enqueued we can use the &lt;code&gt;assert_enqueued_emails&lt;/code&gt; method. More information can be found in the &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/ActionMailer/TestHelper.html&quot;&gt;documentation here&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="168b638dbf32b91b876a243e23d48b9517dbf41f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;assert_routing&lt;/code&gt; assertion checks the route both ways: it tests that the path generates the options, and that the options generate the path. Thus, it combines the functions of &lt;code&gt;assert_generates&lt;/code&gt; and &lt;code&gt;assert_recognizes&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab874f7e30f3c283b9369f9e07f8f9a75b8f7d92" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;association&lt;/code&gt; method returns the associated object, if any. If no associated object is found, it returns &lt;code&gt;nil&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="476e0dbf3b7e0cea0d8386eb35697c5545d28de9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;association=&lt;/code&gt; method assigns an associated object to this object. Behind the scenes, this means extracting the primary key from the associated object and setting this object's foreign key to the same value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87d788d6aa7f5da07bd82517271257b60c5d9a02" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;association=&lt;/code&gt; method assigns an associated object to this object. Behind the scenes, this means extracting the primary key from this object and setting the associated object's foreign key to the same value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4156503e04aa58ba86fc17c228914c4236e76ab2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;attributes&lt;/code&gt; parameter can be either a &lt;a href=&quot;../../hash&quot;&gt;Hash&lt;/a&gt; or an &lt;a href=&quot;../../array&quot;&gt;Array&lt;/a&gt; of Hashes. These Hashes describe the attributes on the objects that are to be created.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cda693db66bf994b658cdb64082c47f90d3c9707" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;attributes&lt;/code&gt; parameter can be either a &lt;a href=&quot;../../hash&quot;&gt;Hash&lt;/a&gt; or an &lt;a href=&quot;../../array&quot;&gt;Array&lt;/a&gt; of Hashes. These describe which attributes to be created on the object, or multiple objects when given an &lt;a href=&quot;../../array&quot;&gt;Array&lt;/a&gt; of Hashes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="65e8c8afb26a8d0550889ece9847f4da4ed02a6f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;attributes&lt;/code&gt; parameter is an &lt;a href=&quot;../../array&quot;&gt;Array&lt;/a&gt; of Hashes. Every &lt;a href=&quot;../../hash&quot;&gt;Hash&lt;/a&gt; determines the attributes for a single row and must have the same keys.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef4e53a226622662f666129b309d1689851b494a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;audio_tag&lt;/code&gt; helper builds an HTML 5 &lt;code&gt;&amp;lt;audio&amp;gt;&lt;/code&gt; tag to the specified file. By default, files are loaded from &lt;code&gt;public/audios&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8fcc7d30359ba20c6b5c0513a057ca3443d5a048" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;authenticate_or_request_with_http_digest&lt;/code&gt; block must return the user's password or the ha1 digest hash so the framework can appropriately hash to check the user's credentials. Returning &lt;code&gt;nil&lt;/code&gt; will cause authentication to fail.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07b464c19356fc247976ab29163633961fa421f6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;authenticate_unsafely&lt;/code&gt; method inserts the parameters directly into the query and is thus susceptible to SQL-injection attacks if the &lt;code&gt;user_name&lt;/code&gt; and &lt;code&gt;password&lt;/code&gt; parameters come directly from an HTTP request. The &lt;code&gt;authenticate_safely&lt;/code&gt; and &lt;code&gt;authenticate_safely_simply&lt;/code&gt; both will sanitize the &lt;code&gt;user_name&lt;/code&gt; and &lt;code&gt;password&lt;/code&gt; before inserting them in the query, which will ensure that an attacker can't escape the query and fake the login (or worse).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1a6368975d0a9e05935cb9b020d9002161c79c2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;auto_discovery_link_tag&lt;/code&gt; helper builds HTML that most browsers and feed readers can use to detect the presence of RSS, Atom, or JSON feeds. It takes the type of the link (&lt;code&gt;:rss&lt;/code&gt;, &lt;code&gt;:atom&lt;/code&gt;, or &lt;code&gt;:json&lt;/code&gt;), a hash of options that are passed through to url_for, and a hash of options for the tag:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93ef8a18a0958a1d6344ef5ae021376ed58c4816" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;belongs_to&lt;/code&gt; Association</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="daacc4f15537eab1ef54a042d9ee2b25a00b5957" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;belongs_to&lt;/code&gt; association creates a one-to-one match with another model. In database terms, this association says that this class contains the foreign key. If the other class contains the foreign key, then you should use &lt;code&gt;has_one&lt;/code&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e600885b0c485e521aabc43a3f5904587aa3ab46" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;belongs_to&lt;/code&gt; association supports these options:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="239366ae72fd5c1d9d5e49f33633a6e0e0bce17c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;block&lt;/code&gt; will receive five parameters with information about the event:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a4b6d715b8daf1902eeb4abfab67c675d0e54c0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;blog&lt;/code&gt; directory has a number of auto-generated files and folders that make up the structure of a Rails application. Most of the work in this tutorial will happen in the &lt;code&gt;app&lt;/code&gt; folder, but here's a basic rundown on the function of each of the files and folders that Rails created by default:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f03bea6398fe6c1ed26c879de514ff9caf65c7c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;body&lt;/code&gt; param is required by Sprockets.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3134ea964c8a80a7b2090c68a8df79d719c116f5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;box&lt;/code&gt; layout simply wraps the &lt;code&gt;_article&lt;/code&gt; partial in a &lt;code&gt;div&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40ba52a7c21c638df1e45032e79561bce1402224" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;build_association&lt;/code&gt; method returns a new object of the associated type. This object will be instantiated from the passed attributes, and the link through its foreign key will be set, but the associated object will &lt;em&gt;not&lt;/em&gt; yet be saved.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2a44e348f4a472b4365912e2287829ce7d17427" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;build_association&lt;/code&gt; method returns a new object of the associated type. This object will be instantiated from the passed attributes, and the link through this object's foreign key will be set, but the associated object will &lt;em&gt;not&lt;/em&gt; yet be saved.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8483fcebc98c253f8c944baa529a8a326217ba6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;cached: true&lt;/code&gt; will make Action View's rendering read several templates from cache at once instead of one call per template.</source>
          <target state="new"/>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
