<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="rails">
    <body>
      <group id="rails">
        <trans-unit id="7f0b8f085b6b34d32aa31323fd7908c3de645358" translate="yes" xml:space="preserve">
          <source>This will generate the singular URL &lt;code&gt;/basket&lt;/code&gt; instead of the usual &lt;code&gt;/baskets/:id&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="663c5100646cf743362210ccbdfad09d1498a4e0" translate="yes" xml:space="preserve">
          <source>This will include both records as part of the cache key and updating either of them will expire the cache.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b352830fe1df01f65c1b930436aa1335a1c894a8" translate="yes" xml:space="preserve">
          <source>This will load all comments with a single query. This reduces the total number of queries to 3. In general, the number of queries will be 1 plus the number of associations named (except if some of the associations are polymorphic &lt;a href=&quot;classmethods#method-i-belongs_to&quot;&gt;belongs_to&lt;/a&gt; - see below).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4030dae2ab54a06c17c1020824cc6a1584faa4b" translate="yes" xml:space="preserve">
          <source>This will load posts and eager load the &lt;code&gt;approved_comments&lt;/code&gt; association, which contains only those comments that have been approved.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c5bed33aa62906c23be081ddddbed686fcb8380" translate="yes" xml:space="preserve">
          <source>This will make the attack work: &quot;&amp;lt;sc&amp;lt;script&amp;gt;ript&amp;gt;&quot;.gsub(&quot;&amp;lt;script&amp;gt;&quot;, &quot;&quot;)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c9a0b2e4b0c8b84a85bcbba91bd96fa2b37fbed7" translate="yes" xml:space="preserve">
          <source>This will now generate &amp;ldquo;/basket&amp;rdquo; when a &lt;code&gt;Basket&lt;/code&gt; instance is passed to &lt;code&gt;link_to&lt;/code&gt; or &lt;code&gt;form_for&lt;/code&gt; instead of the standard &amp;ldquo;/baskets/:id&amp;rdquo;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="14e0af3af91612b7c122e5d298a20e55a03249d0" translate="yes" xml:space="preserve">
          <source>This will now render the partial in &lt;code&gt;app/views/comments/_comment.html.erb&lt;/code&gt; once for each comment that is in the &lt;code&gt;@article.comments&lt;/code&gt; collection. As the &lt;code&gt;render&lt;/code&gt; method iterates over the &lt;code&gt;@article.comments&lt;/code&gt; collection, it assigns each comment to a local variable named the same as the partial, in this case &lt;code&gt;comment&lt;/code&gt;, which is then available in the partial for us to show.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5b85ab1e962bdcb10ff35cb96c42d807c436122" translate="yes" xml:space="preserve">
          <source>This will output the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd5591df3781acd48ab78e8490e397802d2e9698" translate="yes" xml:space="preserve">
          <source>This will override the controller-wide &amp;ldquo;weblog_standard&amp;rdquo; layout, and will render the help action with the &amp;ldquo;help&amp;rdquo; layout instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f34fe9ed99abaa35b278b9d8369304819085494" translate="yes" xml:space="preserve">
          <source>This will produce:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc2abc7eeaebbfaa37268ec8fbe05fccd7faae35" translate="yes" xml:space="preserve">
          <source>This will provide all three standard callbacks (before, around and after) for both the &lt;code&gt;:create&lt;/code&gt; and &lt;code&gt;:update&lt;/code&gt; methods. To implement, you need to wrap the methods you want callbacks on in a block so that the callbacks get a chance to fire:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="966e4162ba17319602b15108a248a2b32a2e9a47" translate="yes" xml:space="preserve">
          <source>This will provide route helpers such as &lt;code&gt;admin_photos_path&lt;/code&gt;, &lt;code&gt;new_admin_photo_path&lt;/code&gt;, etc.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0dd000d30ab70a07f9d33dc333d13603abf46d44" translate="yes" xml:space="preserve">
          <source>This will provide you with URLs such as &lt;code&gt;/bob/articles/1&lt;/code&gt; and will allow you to reference the &lt;code&gt;username&lt;/code&gt; part of the path as &lt;code&gt;params[:username]&lt;/code&gt; in controllers, helpers, and views.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d549dce2bbbb5b998d08591ae8f24883abfa26a6" translate="yes" xml:space="preserve">
          <source>This will put the &lt;code&gt;Magical::Unicorns&lt;/code&gt; middleware on the end of the stack. You can use &lt;code&gt;insert_before&lt;/code&gt; if you wish to add a middleware before another.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f16dc26385bb93210fee9ce4b42f84f567d852aa" translate="yes" xml:space="preserve">
          <source>This will put the &lt;code&gt;Magical::Unicorns&lt;/code&gt; middleware on the end of the stack. You can use &lt;code&gt;insert_before&lt;/code&gt; if you wish to add a middleware before another:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35bee4fa664a5ce62139a41a4446f687f3b4a00f" translate="yes" xml:space="preserve">
          <source>This will read and stream the file 4kB at the time, avoiding loading the entire file into memory at once. You can turn off streaming with the &lt;code&gt;:stream&lt;/code&gt; option or adjust the block size with the &lt;code&gt;:buffer_size&lt;/code&gt; option.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6317ff1d9a51578dc98ad305996078e724cd16d2" translate="yes" xml:space="preserve">
          <source>This will ready a consumer that'll connect against &lt;code&gt;/cable&lt;/code&gt; on your server by default. The connection won't be established until you've also specified at least one subscription you're interested in having.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="681aa462d49a41c8f583994cfef922a7f5a5136b" translate="yes" xml:space="preserve">
          <source>This will recognize &lt;code&gt;/photos/1/preview&lt;/code&gt; with GET, and route to the &lt;code&gt;preview&lt;/code&gt; action of &lt;code&gt;PhotosController&lt;/code&gt;, with the resource id value passed in &lt;code&gt;params[:id]&lt;/code&gt;. It will also create the &lt;code&gt;preview_photo_url&lt;/code&gt; and &lt;code&gt;preview_photo_path&lt;/code&gt; helpers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b75dfb1d2eec29998635431a37b4da0b0cb28e57" translate="yes" xml:space="preserve">
          <source>This will recognize &lt;code&gt;/photos/1/preview&lt;/code&gt; with GET, and route to the preview action of &lt;code&gt;PhotosController&lt;/code&gt;. It will also create the &lt;code&gt;preview_photo_url&lt;/code&gt; and &lt;code&gt;preview_photo_path&lt;/code&gt; helpers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c086908b29df3abf3f09b68aac989519fe5ce75b" translate="yes" xml:space="preserve">
          <source>This will redirect the user to the main action if they tried to access a legacy action. The intention was to preserve the URL parameters to the legacy action and pass them to the main action. However, it can be exploited by attacker if they included a host key in the URL:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a742e1f089acb7ff335ba3060e79e75ce69e493" translate="yes" xml:space="preserve">
          <source>This will redirect the user, while changing only the specified parts of the request, for example the &lt;code&gt;path&lt;/code&gt; option in the last example. &lt;code&gt;/stories&lt;/code&gt;, &lt;code&gt;/stories?foo=bar&lt;/code&gt;, redirect to &lt;code&gt;/posts&lt;/code&gt; and &lt;code&gt;/posts?foo=bar&lt;/code&gt; respectively.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d6fda0736cb28123e462ff25d48c8367bb386f9" translate="yes" xml:space="preserve">
          <source>This will redirect the user, while ignoring certain parts of the request, including query string, etc. &lt;code&gt;/stories&lt;/code&gt;, &lt;code&gt;/stories?foo=bar&lt;/code&gt;, etc all redirect to &lt;code&gt;/posts&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a01ce434bc393a0a6550820837934c7b8473be83" translate="yes" xml:space="preserve">
          <source>This will render &lt;code&gt;advertiser/_ad.html.erb&lt;/code&gt; and pass the local variable &lt;code&gt;ad&lt;/code&gt; to the template for display. An iteration object will automatically be made available to the template with a name of the form &lt;code&gt;partial_name_iteration&lt;/code&gt;. The iteration object has knowledge about which index the current object has in the collection and the total size of the collection. The iteration object also has two convenience methods, &lt;code&gt;first?&lt;/code&gt; and &lt;code&gt;last?&lt;/code&gt;. In the case of the example above, the template would be fed &lt;code&gt;ad_iteration&lt;/code&gt;. For backwards compatibility the &lt;code&gt;partial_name_counter&lt;/code&gt; is still present and is mapped to the iteration's &lt;code&gt;index&lt;/code&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="698a441c5b09122ba621305f26cddd605525816b" translate="yes" xml:space="preserve">
          <source>This will render a book with &lt;code&gt;special?&lt;/code&gt; set with the &lt;code&gt;special_show&lt;/code&gt; template, while other books will render with the default &lt;code&gt;show&lt;/code&gt; template.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5d0b81f7e4fa3fa841e449fba16f64dc99d9bbb" translate="yes" xml:space="preserve">
          <source>This will render a console inside your view. You don't need to care about the location of the &lt;code&gt;console&lt;/code&gt; call; it won't be rendered on the spot of its invocation but next to your HTML content.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb68ff9be1ac7859d78b72758e0512fdc7ac4428" translate="yes" xml:space="preserve">
          <source>This will render a file named &lt;code&gt;_menu.html.erb&lt;/code&gt; at that point within the view being rendered. Note the leading underscore character: partials are named with a leading underscore to distinguish them from regular views, even though they are referred to without the underscore. This holds true even when you're pulling in a partial from another folder:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f45b4bd7eb9c27a0f58eb80a13d0e37782d9ecd" translate="yes" xml:space="preserve">
          <source>This will render a file named &lt;code&gt;_menu.html.erb&lt;/code&gt; at that point within the view that is being rendered. Note the leading underscore character: partials are named with a leading underscore to distinguish them from regular views, even though they are referred to without the underscore. This holds true even when you're pulling in a partial from another folder:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56dfc66467558f6050b46077a3a4306dfb20347f" translate="yes" xml:space="preserve">
          <source>This will render the layout for each user and yield to the block, passing the user, each time.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6ba11e5dcb30c836570ac2f15aecd3c4ec288990" translate="yes" xml:space="preserve">
          <source>This will render the partial &lt;code&gt;advertisement/_ad.html.erb&lt;/code&gt; regardless of which controller this is being called from.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d230c74d01704cac9b56b96aa1e51fae1536b68" translate="yes" xml:space="preserve">
          <source>This will render the show template if the request isn't sending a matching ETag or If-Modified-Since header and just a &lt;code&gt;304 Not
Modified&lt;/code&gt; response if there's a match.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c27ca8b6330ab956ecffed5c9367136b728d74d8" translate="yes" xml:space="preserve">
          <source>This will render the template 'another_template.html.erb' for the HTML part and use the rendered text for the text part. The render command is the same one used inside of Action Controller, so you can use all the same options, such as &lt;code&gt;:text&lt;/code&gt;, &lt;code&gt;:inline&lt;/code&gt; etc.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7b4fcca36c8532c33b51dcfa96b075aea80995a" translate="yes" xml:space="preserve">
          <source>This will result in a &lt;code&gt;params&lt;/code&gt; hash that looks like</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="663febf4758d5a2b69988d78f730cb88d605e99c" translate="yes" xml:space="preserve">
          <source>This will result in a single SQL query with joins along the lines of: &lt;code&gt;LEFT OUTER JOIN comments ON comments.post_id = posts.id&lt;/code&gt; and &lt;code&gt;LEFT OUTER JOIN authors ON authors.id = posts.author_id&lt;/code&gt;. Note that using conditions like this can have unintended consequences. In the above example, posts with no approved comments are not returned at all because the conditions apply to the SQL statement as a whole and not just to the association.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3e4840c8603d5b4a06e304043585fcc08a41571" translate="yes" xml:space="preserve">
          <source>This will result in the following SQL query:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c075ba2bbd1d0762f769564b87ddd6d9bf1b94e" translate="yes" xml:space="preserve">
          <source>This will result in the following SQL:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d54ad2fd65b654fba8f2df8951cf535f8d73c2d" translate="yes" xml:space="preserve">
          <source>This will return a number (possibly a floating point number such as 3.14159265) representing the average value in the field.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c2fba0c077f2ff172d17f8a4d2d1cdc7c5900ed" translate="yes" xml:space="preserve">
          <source>This will rollback the latest migration, either by reverting the &lt;code&gt;change&lt;/code&gt; method or by running the &lt;code&gt;down&lt;/code&gt; method. If you need to undo several migrations you can provide a &lt;code&gt;STEP&lt;/code&gt; parameter:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d237910321741fee8d5a4eb892438f7067240437" translate="yes" xml:space="preserve">
          <source>This will route to the &lt;code&gt;Admin::UserPermissions&lt;/code&gt; controller.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="164157eae978fee986e74cfd1b4ddc538abbf3d3" translate="yes" xml:space="preserve">
          <source>This will run all test methods from the test case.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b72ee07c69c7720817ebb51926bfb311c6c80efe" translate="yes" xml:space="preserve">
          <source>This will send the supplied string to the browser with a MIME type of &lt;code&gt;text/javascript&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd015d1164984982431932abd6f39ff61b13a6eb" translate="yes" xml:space="preserve">
          <source>This will simply find the first record in the database, and grants access to this user.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4f89e91cdbccde5c8e48b2382bbcf38015ed859" translate="yes" xml:space="preserve">
          <source>This will tell you that everything got generated properly and you are ready to start adding functionality.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40c8fe16e6bbe35419e9e8cc45d6fae5b1e8e450" translate="yes" xml:space="preserve">
          <source>This will throw an &lt;code&gt;ArgumentError&lt;/code&gt; if the argument doesn't respond to &lt;code&gt;#include?&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f01719616b6fad3daac567c1a4643143ed728f1" translate="yes" xml:space="preserve">
          <source>This will work fine, because both the &lt;code&gt;Supplier&lt;/code&gt; and the &lt;code&gt;Account&lt;/code&gt; class are defined within the same scope. But the following will &lt;em&gt;not&lt;/em&gt; work, because &lt;code&gt;Supplier&lt;/code&gt; and &lt;code&gt;Account&lt;/code&gt; are defined in different scopes:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4035999e6b772290381343414db9ca8460af90c" translate="yes" xml:space="preserve">
          <source>This will work similarly to formats and MIME types negotiation. If there is no &lt;code&gt;:tablet&lt;/code&gt; variant declared, the &lt;code&gt;:phone&lt;/code&gt; variant will be used:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c787e17fa75f3571fe17f46c680fd9141652976c" translate="yes" xml:space="preserve">
          <source>This works by using a type column in addition to a foreign key to specify the associated record. In the Asset example, you'd need an &lt;code&gt;attachable_id&lt;/code&gt; integer column and an &lt;code&gt;attachable_type&lt;/code&gt; string column.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="780f4766354c112798620bcc4f97e9f1ea86e865" translate="yes" xml:space="preserve">
          <source>This works exactly the same as:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e158ec7313604d8047a3dd3bab1a9f48db091ea6" translate="yes" xml:space="preserve">
          <source>This works for mysql2 where table.column can be used to resolve ambiguity.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9a3fe6d3ce74d58b904dcedaa6687cd2f76af008" translate="yes" xml:space="preserve">
          <source>This works the same as &lt;a href=&quot;classmethods#method-i-increment_counter&quot;&gt;increment_counter&lt;/a&gt; but reduces the column value by 1 instead of increasing it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb94a6cf1a0ae3ce707fd86dde6870669f262cb5" translate="yes" xml:space="preserve">
          <source>This works with any class that mixes in &lt;code&gt;GlobalID::Identification&lt;/code&gt;, which by default has been mixed into Active Record classes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e6d15fd8e37d7ed52955318d0e70d4b257f3f1d" translate="yes" xml:space="preserve">
          <source>This would add something like &quot;Process data files (0.34523)&quot; to the log, which you can then use to compare timings when optimizing your code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f96ee07389e9746ed51318aa375fc3f3bc4bf41f" translate="yes" xml:space="preserve">
          <source>This would cause the routing to recognize paths such as:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91a4b5a51dd6ff89a612b1513b5671963be035af" translate="yes" xml:space="preserve">
          <source>This would detect that there are no books with the specified ID, populate the &lt;code&gt;@books&lt;/code&gt; instance variable with all the books in the model, and then directly render the &lt;code&gt;index.html.erb&lt;/code&gt; template, returning it to the browser with a flash alert message to tell the user what happened.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44d5f8c2e2d24f1f452b35591a3b73609c5c7b3a" translate="yes" xml:space="preserve">
          <source>This would first render &lt;code&gt;advertiser/_account.html.erb&lt;/code&gt; with &lt;code&gt;@buyer&lt;/code&gt; passed in as the local variable &lt;code&gt;account&lt;/code&gt;, then render &lt;code&gt;advertiser/_ad.html.erb&lt;/code&gt; and pass the local variable &lt;code&gt;ad&lt;/code&gt; to the template for display.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa4a7abea851f46070c7c730755deacdb8ffc3db" translate="yes" xml:space="preserve">
          <source>This would generate SQL like:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f0e1c1f0cdaa556dfdba1dd229fa16060a7947f" translate="yes" xml:space="preserve">
          <source>This would generate a query which contains a &lt;code&gt;LEFT OUTER JOIN&lt;/code&gt; whereas the &lt;code&gt;joins&lt;/code&gt; method would generate one using the &lt;code&gt;INNER JOIN&lt;/code&gt; function instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e354575ff67ecbdf5b3d0737b5525ef034f36bd" translate="yes" xml:space="preserve">
          <source>This would look for a partial named &lt;code&gt;_link_area.html.erb&lt;/code&gt; and render it using the layout &lt;code&gt;_graybar.html.erb&lt;/code&gt;. Note that layouts for partials follow the same leading-underscore naming as regular partials, and are placed in the same folder with the partial that they belong to (not in the master &lt;code&gt;layouts&lt;/code&gt; folder).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6b55ed4dd6ec101ed4ad3780bfa5055c960f2b37" translate="yes" xml:space="preserve">
          <source>This would produce the following header:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15722a91035ff2ace8574da4506361bd5cf74ae0" translate="yes" xml:space="preserve">
          <source>This would re-raise only the &lt;code&gt;MissingTranslationData&lt;/code&gt; exception, passing all other input to the default exception handler.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8af52b3704413d695e1faff03a478a965a6c0a3c" translate="yes" xml:space="preserve">
          <source>This would render &amp;ldquo;advertiser/_account.html.erb&amp;rdquo;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="856505a9cf7e940add8cfdd09b3f5ea89f8e82d7" translate="yes" xml:space="preserve">
          <source>This would result in &lt;code&gt;params[:person][:addresses]&lt;/code&gt; being an array of hashes with keys &lt;code&gt;line1&lt;/code&gt;, &lt;code&gt;line2&lt;/code&gt;, and &lt;code&gt;city&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ffcd031fa00742bc180b1c7dddb773b8624776c" translate="yes" xml:space="preserve">
          <source>This would result in &lt;code&gt;params[:person][:phone_number]&lt;/code&gt; being an array containing the inputted phone numbers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="41e985c3b4dfd7c8234665043e2275c3407a0535" translate="yes" xml:space="preserve">
          <source>This would then turn the above code for &lt;code&gt;set_author&lt;/code&gt; into this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56f479c2662bdcaf2c0265c4d70139b0ac312c97" translate="yes" xml:space="preserve">
          <source>This would transparently migrate your existing &lt;code&gt;Marshal&lt;/code&gt;-serialized cookies into the new &lt;code&gt;JSON&lt;/code&gt;-based format.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15e58a84e6445aea236c46b5b12a25f2d090ecec" translate="yes" xml:space="preserve">
          <source>This writes the path to the particular asset being referenced.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="59913b15baf3eedd5d31cc088230eeac598bb7c9" translate="yes" xml:space="preserve">
          <source>This writes the path to the particular asset being referenced. In this example, it would make sense to have an image in one of the asset load paths, such as &lt;code&gt;app/assets/images/image.png&lt;/code&gt;, which would be referenced here. If this image is already available in &lt;code&gt;public/assets&lt;/code&gt; as a fingerprinted file, then that path is referenced.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b750bf91c273e4f3ddb4f320d7202fe3ec31f456" translate="yes" xml:space="preserve">
          <source>Thor</source>
          <target state="translated">Thor</target>
        </trans-unit>
        <trans-unit id="6983f57bf3da8d5d31c7f429bcfee6f63af50673" translate="yes" xml:space="preserve">
          <source>Thor::Group</source>
          <target state="translated">Thor::Group</target>
        </trans-unit>
        <trans-unit id="d4fda76aa6b524cc426498c47eb39a3ee08e52f5" translate="yes" xml:space="preserve">
          <source>Those labels can be customized using I18n under the &lt;code&gt;helpers.submit&lt;/code&gt; key (the same as submit helper) and using &lt;code&gt;%{model}&lt;/code&gt; for translation interpolation:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5213151b847d46237ea5b6531280a5a655b15e61" translate="yes" xml:space="preserve">
          <source>Those labels can be customized using I18n under the &lt;code&gt;helpers.submit&lt;/code&gt; key and using &lt;code&gt;%{model}&lt;/code&gt; for translation interpolation:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b08d8785f315537bf824bc86ed876bc1b75d232" translate="yes" xml:space="preserve">
          <source>Though if both the secret and the cipher was changed at the same time, the above should be combined into:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d824669e552950472572d84ecc126191a248c6b" translate="yes" xml:space="preserve">
          <source>Though the &lt;a href=&quot;classmethods#method-i-transaction&quot;&gt;transaction&lt;/a&gt; class method is called on some Active Record class, the objects within the transaction block need not all be instances of that class. This is because transactions are per-database connection, not per-model.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f224d0c3de1019984b8ae2b2815fdd756e88990c" translate="yes" xml:space="preserve">
          <source>Though the above would most likely be combined into one rotation:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66fa2a7b7cfaed86c5ba19ef94fe296967ab46d3" translate="yes" xml:space="preserve">
          <source>Threaded Active Job adapters, including the built-in Async, will likewise execute several jobs at the same time. Action Cable channels are managed this way too.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb3738e0b3f2e613545ddf6035342e58d072708f" translate="yes" xml:space="preserve">
          <source>Threading and Code Execution in Rails</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb12e8aaaecc434fd51e448fe7669bced1bdd107" translate="yes" xml:space="preserve">
          <source>Threads</source>
          <target state="translated">Threads</target>
        </trans-unit>
        <trans-unit id="2844122520e178f0a9d4d76f874b0a9ea6926882" translate="yes" xml:space="preserve">
          <source>Threadsafe, fair, LIFO queue. Meant to be used by &lt;a href=&quot;../connectionpool&quot;&gt;ConnectionPool&lt;/a&gt; with which it shares a Monitor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8551f86c307e1f569085e575597e44ab3d9521c" translate="yes" xml:space="preserve">
          <source>Three kinds of callbacks are supported: before callbacks, run before a certain event; after callbacks, run after the event; and around callbacks, blocks that surround the event, triggering it when they yield. Callback code can be contained in instance methods, procs or lambdas, or callback objects that respond to certain predetermined methods. See &lt;code&gt;ClassMethods.set_callback&lt;/code&gt; for details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d78446bdeec376dff2212d816a0563b91589188e" translate="yes" xml:space="preserve">
          <source>Thus &lt;code&gt;data-user-id&lt;/code&gt; can be accessed as &lt;code&gt;dataset.userId&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="533163ca96b70fcdb1bd5e4ec1f7540f6ee285cc" translate="yes" xml:space="preserve">
          <source>Thus the following calls are equivalent:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7fd6a465cd88627e0ee8a7a50b362426d406516" translate="yes" xml:space="preserve">
          <source>Thus we encourage everybody to experiment with new ideas and features in gems or other libraries and make them available to the community. (Don't forget to announce your work on our &lt;a href=&quot;https://groups.google.com/forum/#!forum/rails-i18n&quot;&gt;mailing list&lt;/a&gt;!)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64299f77b698aabcadcfb4203c1f1d473b65ee14" translate="yes" xml:space="preserve">
          <source>Thus, after a simple require like:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="125198aa1018b31d1828449e8e9c3447d4fda2bf" translate="yes" xml:space="preserve">
          <source>Thus, an informal expression like &quot;the &lt;code&gt;String&lt;/code&gt; class&quot; technically means the class object stored in the constant called &quot;String&quot;. That constant, in turn, belongs to the class object stored in the constant called &quot;Object&quot;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="943596e1932a1bfbf04c7e6b388cd68e2d80ea35" translate="yes" xml:space="preserve">
          <source>Thus, in our example it will try the following keys in this order and return the first result:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="854b45834349a9434ba70eb84a05b8f7f4964ddb" translate="yes" xml:space="preserve">
          <source>Thus, the Ruby I18n gem is split into two parts:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e7e457daaa427e0c57ee44631058c674daa9cb8" translate="yes" xml:space="preserve">
          <source>Thus, to load all extensions to &lt;code&gt;Object&lt;/code&gt; (including &lt;code&gt;blank?&lt;/code&gt;):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c82e6dd86807ee3db07e3c82bec1ae1ce00b08b" translate="yes" xml:space="preserve">
          <source>Time</source>
          <target state="translated">Time</target>
        </trans-unit>
        <trans-unit id="0479dbb889a6a5e40e9b16e0c07736df269d0080" translate="yes" xml:space="preserve">
          <source>Time Constructors</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7cb101b09abe53e3970615e26d1c5ac1a5a1a0f2" translate="yes" xml:space="preserve">
          <source>Time Zone and Country Select</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="758bb3a92d2943b681c1f3053c0ac441e1cf96bc" translate="yes" xml:space="preserve">
          <source>Time when it finished</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03f428e3c88d569287d827deae102c6dbdd168d3" translate="yes" xml:space="preserve">
          <source>Time when it started</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82f05dbf9bd40d142582cbabaf13c9ec714f7fc8" translate="yes" xml:space="preserve">
          <source>Time#-</source>
          <target state="translated">Time#-</target>
        </trans-unit>
        <trans-unit id="7a7aa7d8e4b40a785503fa9c8daf43ea4bc56d53" translate="yes" xml:space="preserve">
          <source>Time#- can also be used to determine the number of seconds between two &lt;a href=&quot;time&quot;&gt;Time&lt;/a&gt; instances. We're layering on additional behavior so that &lt;a href=&quot;activesupport/timewithzone&quot;&gt;ActiveSupport::TimeWithZone&lt;/a&gt; instances are coerced into values that Time#- will recognize</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5bb87c2f9d9945ef31886829761b28fbf4ea3900" translate="yes" xml:space="preserve">
          <source>Time#ago</source>
          <target state="translated">Time#ago</target>
        </trans-unit>
        <trans-unit id="535061e30d3ec336298cfcce028fd03250f67a69" translate="yes" xml:space="preserve">
          <source>Time#eql?</source>
          <target state="translated">Time#eql?</target>
        </trans-unit>
        <trans-unit id="f49e737bf31856a03111c5200f6835d9c041ed09" translate="yes" xml:space="preserve">
          <source>Time#in</source>
          <target state="translated">Time#in</target>
        </trans-unit>
        <trans-unit id="e5f35007f2fd715805bc7ee4f6619bdeaedd28b2" translate="yes" xml:space="preserve">
          <source>Time#noon</source>
          <target state="translated">Time#noon</target>
        </trans-unit>
        <trans-unit id="9a4fe8b3bc5da5b531b4d49404f6219c94b730de" translate="yes" xml:space="preserve">
          <source>Time#to_s</source>
          <target state="translated">Time#to_s</target>
        </trans-unit>
        <trans-unit id="072bb1013189d6ec714afa16f54db8ee314e4e97" translate="yes" xml:space="preserve">
          <source>Time::===</source>
          <target state="translated">Time::===</target>
        </trans-unit>
        <trans-unit id="f52704cb2dbee04fc88151aaddbbd5c040769349" translate="yes" xml:space="preserve">
          <source>Time::at</source>
          <target state="translated">Time::at</target>
        </trans-unit>
        <trans-unit id="71fee4b114e10fd6ff1eb8600d86ffa3eda424ec" translate="yes" xml:space="preserve">
          <source>Time::zone</source>
          <target state="translated">Time::zone</target>
        </trans-unit>
        <trans-unit id="002a7fb356856a5683fcfcda3bf71e15fce88416" translate="yes" xml:space="preserve">
          <source>Time::zone=</source>
          <target state="translated">Time::zone=</target>
        </trans-unit>
        <trans-unit id="d4c45de0fe64ac43c72a798c67faaadadfaa1b90" translate="yes" xml:space="preserve">
          <source>Timeout</source>
          <target state="translated">Timeout</target>
        </trans-unit>
        <trans-unit id="19eabc961735d78f12fc7be906ffcb033853cf85" translate="yes" xml:space="preserve">
          <source>Timestamp</source>
          <target state="translated">Timestamp</target>
        </trans-unit>
        <trans-unit id="2e12f675325012e3b51130cfc4c0495653df0d78" translate="yes" xml:space="preserve">
          <source>Timestamp when the job should be performed</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e603c1d718c3407ed978ed5e5b448466af8b8ed4" translate="yes" xml:space="preserve">
          <source>Timestamped Migrations</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7afe964a9bc9490c0d91ac3e8197cd7bf16e3f7" translate="yes" xml:space="preserve">
          <source>Timestamping can be turned off by setting:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e740a2d0dd5f664f5f8152670d8f74f5c2a8cfc" translate="yes" xml:space="preserve">
          <source>Timestamps are in UTC by default but you can use the local timezone by setting:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f84b4e1e741a5e90fb140baa746fb6bacc4ae5a" translate="yes" xml:space="preserve">
          <source>Timezone to be used during the job.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="50790fb9896851d0217b7037f6684381e6eec66d" translate="yes" xml:space="preserve">
          <source>Tips, Tricks, and Warnings</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e78cb5861cde261d84b6558812d6edfa320b4cc6" translate="yes" xml:space="preserve">
          <source>To accept the rich text content, all you have to do is permit the referenced attribute:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75310a470346acf45b4ddbf0767e37cfd3626f2e" translate="yes" xml:space="preserve">
          <source>To access this class outside of Rails, require the core extension with:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b26e949303bd19506657d5954b82082666b0c3ab" translate="yes" xml:space="preserve">
          <source>To accomplish this &lt;code&gt;atomic_write&lt;/code&gt; creates a temporary file. That's the file the code in the block actually writes to. On completion, the temporary file is renamed, which is an atomic operation on POSIX systems. If the target file exists &lt;code&gt;atomic_write&lt;/code&gt; overwrites it and keeps owners and permissions. However there are a few cases where &lt;code&gt;atomic_write&lt;/code&gt; cannot change the file ownership or permissions, this error is caught and skipped over trusting in the user/filesystem to ensure the file is accessible to the processes that need it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f5bcf57447f814c8cabe3a4a635247fcb017bc2" translate="yes" xml:space="preserve">
          <source>To activate the automatic connection switching middleware, add or uncomment the following lines in your application config.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b4253576554c00dac0b6079c6cdb38ea0ed38c3" translate="yes" xml:space="preserve">
          <source>To add a member route, add a member block into the resource block:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9bd9aac489abd4edfbf6d7a28f4c9ed8c99b95c" translate="yes" xml:space="preserve">
          <source>To add a member route, just add a &lt;code&gt;member&lt;/code&gt; block into the resource block:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="937e828fc31ed7e34181ae0bd7c880fd1631f5ec" translate="yes" xml:space="preserve">
          <source>To add a new value before/after existing one you should use &lt;a href=&quot;https://www.postgresql.org/docs/current/static/sql-altertype.html&quot;&gt;ALTER TYPE&lt;/a&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f999cb973e6514ebc7a2a6d32402e38ef26f669b" translate="yes" xml:space="preserve">
          <source>To add a route to the collection:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d03ef418b9cd36529a460479553deeba036cf313" translate="yes" xml:space="preserve">
          <source>To add an alternate new action using the &lt;code&gt;:on&lt;/code&gt; shortcut:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49c115b6642d137473c3aaaa584da6da37c682c9" translate="yes" xml:space="preserve">
          <source>To add an initialization step to the Rails boot process from your railtie, just define the initialization code with the &lt;code&gt;initializer&lt;/code&gt; macro:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35d2629b284412f93bdcd4df4ef6d62207b48798" translate="yes" xml:space="preserve">
          <source>To add behavior to the initialize method, use the following signature:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f1cfe63bc585e778e420e9972aae33ffbcee874" translate="yes" xml:space="preserve">
          <source>To add initial data after a database is created, Rails has a built-in 'seeds' feature that makes the process quick and easy. This is especially useful when reloading the database frequently in development and test environments. It's easy to get started with this feature: just fill up &lt;code&gt;db/seeds.rb&lt;/code&gt; with some Ruby code, and run &lt;code&gt;rails db:seed&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7323553094572549fa65d6ecebe3434015f73143" translate="yes" xml:space="preserve">
          <source>To add new secret to credentials, first run &lt;code&gt;rails secret&lt;/code&gt; to get a new secret. Then run &lt;code&gt;rails credentials:edit&lt;/code&gt; to edit credentials, and add the secret. Running &lt;code&gt;credentials:edit&lt;/code&gt; creates new credentials file and master key, if they did not already exist.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0386aff0dfdb18b409bb13e26e6bfd4cc0be0e3a" translate="yes" xml:space="preserve">
          <source>To add redirection helpers to your metal controller, do the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56ec8b69fe3f17ee1c2beaa71a1520726bd1261d" translate="yes" xml:space="preserve">
          <source>To address(es) of the mail</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6a319777b2f46687810f2e7f72d3f9fc8200ecc" translate="yes" xml:space="preserve">
          <source>To allow you to upgrade to new defaults one by one, the update task has created a file &lt;code&gt;config/initializers/new_framework_defaults.rb&lt;/code&gt;. Once your application is ready to run with new defaults, you can remove this file and flip the &lt;code&gt;config.load_defaults&lt;/code&gt; value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="710f3ed0bda349db8b844b07d069b0e1bcf0d49e" translate="yes" xml:space="preserve">
          <source>To apply &lt;code&gt;LIMIT&lt;/code&gt; to the SQL fired by the &lt;code&gt;Model.find&lt;/code&gt;, you can specify the &lt;code&gt;LIMIT&lt;/code&gt; using &lt;code&gt;limit&lt;/code&gt; and &lt;code&gt;offset&lt;/code&gt; methods on the relation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d32215c583e6a7cb865ecd8a46e772e4bf03f4c" translate="yes" xml:space="preserve">
          <source>To apply a &lt;code&gt;GROUP BY&lt;/code&gt; clause to the SQL fired by the finder, you can use the &lt;code&gt;group&lt;/code&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68719bf2f7e1a16dab187d1a075aba5a0fb05510" translate="yes" xml:space="preserve">
          <source>To apply a template, you need to provide the Rails generator with the location of the template you wish to apply using the &lt;code&gt;-m&lt;/code&gt; option. This can either be a path to a file or a URL.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d90a4ed6971546eb44b2ac49131bae5e67069b67" translate="yes" xml:space="preserve">
          <source>To assign a specific layout for the entire application, use a &lt;code&gt;layout&lt;/code&gt; declaration in your &lt;code&gt;ApplicationController&lt;/code&gt; class:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17cb9d18619396360a8e49bebcea3ab1ca897a51" translate="yes" xml:space="preserve">
          <source>To associate a model with a model in a different namespace, you must specify the complete class name in your association declaration:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3aed1b17dd2e4287dd54e4f8bd9403a70bfe9854" translate="yes" xml:space="preserve">
          <source>To avoid N+1 queries, you can include the attached blobs in your query like so:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea489f383516c76da4a7f269dd9247bb36e8b6ab" translate="yes" xml:space="preserve">
          <source>To avoid code duplication, you can add your own test helpers. Sign in helper can be a good example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef7716f9a480e0433559d033ee267ce1e4f96d72" translate="yes" xml:space="preserve">
          <source>To be described.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc73d760d95c9df877c5e1f99331f6766682de9a" translate="yes" xml:space="preserve">
          <source>To be yielded each record one by one, use &lt;a href=&quot;batches#method-i-find_each&quot;&gt;find_each&lt;/a&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc604ec989e6bbee406239991a8d4ac088c25d5f" translate="yes" xml:space="preserve">
          <source>To begin with, let's get some text up on screen quickly. To do this, you need to get your Rails application server running.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ea1e1b24e1a85c3f3db47188cf0dfee80b9e5cc" translate="yes" xml:space="preserve">
          <source>To begin, set up your files so that you have:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="39200511a539f80edb1bbf2925522826dfd27790" translate="yes" xml:space="preserve">
          <source>To block just specific pages, it's necessary to use a more complex syntax. Learn it on the &lt;a href=&quot;https://www.robotstxt.org/robotstxt.html&quot;&gt;official documentation&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4a7a3f273395b097f236317a0c48f0ed6b14ad2" translate="yes" xml:space="preserve">
          <source>To call this &lt;code&gt;published&lt;/code&gt; scope we can call it on either the class:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10f0261a562574d1f5d1142f959f0cb7127b97bb" translate="yes" xml:space="preserve">
          <source>To cause a validation error, you must add to the &lt;code&gt;record&lt;/code&gt;'s errors directly from within the validators message.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad374d91ad0c8548890300274c240b4c3484aaee" translate="yes" xml:space="preserve">
          <source>To change defaults for multiple uses, for example adding table tags to the default:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bad29effaa4191b70ae371023004bffacc8d0fdc" translate="yes" xml:space="preserve">
          <source>To change the default mailer view for your action you do something like:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f23a72ff1318bf30b85765355052f6ccfb8b080" translate="yes" xml:space="preserve">
          <source>To change the parallelization method to use threads over forks put the following in your &lt;code&gt;test_helper.rb&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="392f97008d02fb517f2541a9f486cba6f2b790a9" translate="yes" xml:space="preserve">
          <source>To check which validations failed on an invalid attribute, you can use &lt;code&gt;errors.details[:attribute]&lt;/code&gt;. It returns an array of hashes with an &lt;code&gt;:error&lt;/code&gt; key to get the symbol of the validator:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4afd5456c33df31a6c7a7ba4584a36ffecbba4c" translate="yes" xml:space="preserve">
          <source>To choose the analyzer for a blob, Active Storage calls &lt;code&gt;accept?&lt;/code&gt; on each registered analyzer in order. It uses the first analyzer for which &lt;code&gt;accept?&lt;/code&gt; returns true when given the blob. If no registered analyzer accepts the blob, no metadata is extracted from it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="390e981b342dacb4143c4d7e30d20b9c832af99e" translate="yes" xml:space="preserve">
          <source>To choose the previewer for a blob, Active Storage calls &lt;code&gt;accept?&lt;/code&gt; on each registered previewer in order. It uses the first previewer for which &lt;code&gt;accept?&lt;/code&gt; returns true when given the blob. In a Rails application, add or remove previewers by manipulating &lt;code&gt;Rails.application.config.active_storage.previewers&lt;/code&gt; in an initializer:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e0c01104cd1c8ca5e77c5041d6716de6209a9968" translate="yes" xml:space="preserve">
          <source>To clear the cookies for a test just clear the cookie collection:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e992d6d51c0fe85dc91d410d8aeec6437095e50e" translate="yes" xml:space="preserve">
          <source>To configure the URL, add a call to &lt;code&gt;action_cable_meta_tag&lt;/code&gt; in your HTML layout HEAD. This uses a URL or path typically set via &lt;code&gt;config.action_cable.url&lt;/code&gt; in the environment configuration files.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6812ced846bc801d5b224d2be55af57aa6c28a16" translate="yes" xml:space="preserve">
          <source>To configure the adapter's thread pool, instantiate the adapter and pass your own config:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40d784490f47da8895d33a26078b04dd82fd6398" translate="yes" xml:space="preserve">
          <source>To control the queue from the job level you can pass a block to &lt;code&gt;#queue_as&lt;/code&gt;. The block will be executed in the job context (so you can access &lt;code&gt;self.arguments&lt;/code&gt;) and you must return the queue name:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47ddbde908d6c9f96d05be4ab26c385e2ace4199" translate="yes" xml:space="preserve">
          <source>To create a download link, use the &lt;code&gt;rails_blob_{path|url}&lt;/code&gt; helper. Using this helper allows you to set the disposition.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9245a4a88b5bf153248b7ec7ba1d2256a662eb4c" translate="yes" xml:space="preserve">
          <source>To create a form within this template, you will use a &lt;em&gt;form builder&lt;/em&gt;. The primary form builder for Rails is provided by a helper method called &lt;code&gt;form_with&lt;/code&gt;. To use this method, add this code into &lt;code&gt;app/views/articles/new.html.erb&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="096a2e619a88efda798f6d12421ef4a182f77fba" translate="yes" xml:space="preserve">
          <source>To create a new application, you can instantiate a new instance of a class that has already been created:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72a4671ecb62ee15b867e38a9465be1c7903c736" translate="yes" xml:space="preserve">
          <source>To create a new controller, you will need to run the &quot;controller&quot; generator and tell it you want a controller called &quot;Welcome&quot; with an action called &quot;index&quot;, just like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="547474f51f2efc29c4d208520bd3c7cf66306490" translate="yes" xml:space="preserve">
          <source>To create a system test in your application, extend your test class from &lt;code&gt;ApplicationSystemTestCase&lt;/code&gt;. System tests use Capybara as a base and allow you to configure the settings through your &lt;code&gt;application_system_test_case.rb&lt;/code&gt; file that is generated with a new application or scaffold.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b33d60921c8ff3d53b349d9a6069f98d8eaa12c" translate="yes" xml:space="preserve">
          <source>To create a variation of the image, call &lt;code&gt;variant&lt;/code&gt; on the &lt;code&gt;Blob&lt;/code&gt;. You can pass any transformation to the method supported by the processor. The default processor is &lt;a href=&quot;https://github.com/minimagick/minimagick&quot;&gt;MiniMagick&lt;/a&gt;, but you can also use &lt;a href=&quot;https://www.rubydoc.info/gems/ruby-vips/Vips/Image&quot;&gt;Vips&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ff342a1cdcc24d29eb0fbd0257273c9ddf047cd" translate="yes" xml:space="preserve">
          <source>To create more intricate nestings, you can specify the first part of the input name (&lt;code&gt;person[address]&lt;/code&gt; in the previous example) explicitly:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8fba31f1400964b6c1854db1b89f26a91dae0c5c" translate="yes" xml:space="preserve">
          <source>To create proper abstraction, the I18n gem ships with a feature called variable interpolation that allows you to use variables in translation definitions and pass the values for these variables to the translation method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="33f409d9d7ae9405e9eabade073887085e3d56bf" translate="yes" xml:space="preserve">
          <source>To create this form you will use &lt;code&gt;form_with&lt;/code&gt;, &lt;code&gt;label_tag&lt;/code&gt;, &lt;code&gt;text_field_tag&lt;/code&gt;, and &lt;code&gt;submit_tag&lt;/code&gt;, respectively. Like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="027708544c7e7fec5f1d396bf06d7030bfe0a2d8" translate="yes" xml:space="preserve">
          <source>To declare that the value in &lt;code&gt;params&lt;/code&gt; must be an array of permitted scalar values, map the key to an empty array:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56a15fec74f909dcbda296e8f1e1a76710eb68ab" translate="yes" xml:space="preserve">
          <source>To define a reversible migration, define the &lt;code&gt;change&lt;/code&gt; method in your migration like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5d3624e2f8f797d4ea168d1ef170ebc861f6ef6" translate="yes" xml:space="preserve">
          <source>To define a simple scope, we use the &lt;code&gt;scope&lt;/code&gt; method inside the class, passing the query that we'd like to run when this scope is called:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="938bc598b7814f6d826a43048f0356eddb4f6fce" translate="yes" xml:space="preserve">
          <source>To define a template to be used with a mailer, create an &lt;code&gt;.erb&lt;/code&gt; file with the same name as the method in your mailer model. For example, in the mailer defined above, the template at &lt;code&gt;app/views/notifier_mailer/welcome.text.erb&lt;/code&gt; would be used to generate the email.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba09086ccc99ad6bd2736882c2ac961ab635a69d" translate="yes" xml:space="preserve">
          <source>To define an Active Job object:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe8a71d3ee050eac685d5f7d17d4a9b2e05610ec" translate="yes" xml:space="preserve">
          <source>To define an event for these hooks, use the block syntax within a &lt;code&gt;Rails::Application&lt;/code&gt;, &lt;code&gt;Rails::Railtie&lt;/code&gt; or &lt;code&gt;Rails::Engine&lt;/code&gt; subclass:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="44ce21fa1a4b27f2bc8184a44c594fed6d9034f5" translate="yes" xml:space="preserve">
          <source>To define this configuration setting, you should use a &lt;code&gt;mattr_accessor&lt;/code&gt; inside the &lt;code&gt;Blorgh&lt;/code&gt; module for the engine. Add this line to &lt;code&gt;lib/blorgh.rb&lt;/code&gt; inside the engine:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5db9aae221a0a52fc270b44f4f60d7466dd1909c" translate="yes" xml:space="preserve">
          <source>To delete breakpoints: use the command &lt;code&gt;delete n&lt;/code&gt; to remove the breakpoint number &lt;em&gt;n&lt;/em&gt;. If no number is specified, it deletes all breakpoints that are currently active.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b8df7c430f219b8b7e4a3c26240fefab718180b2" translate="yes" xml:space="preserve">
          <source>To demonstrate this, we are going to create a new helper generator that simply adds some instance variable readers. First, we create a generator within the rails namespace, as this is where rails searches for generators used as hooks:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ceea890f8b0f50a4e35c3522e899a131253d5fce" translate="yes" xml:space="preserve">
          <source>To disable and allow requests from any origin:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="548445a44f1b0aabb815523fb70c2b0469d4e0ae" translate="yes" xml:space="preserve">
          <source>To disable it (and allow I18n to accept &lt;em&gt;any&lt;/em&gt; locale option) add the following configuration to your application:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e3faeb04b1006d46d20f0c6a5cff1221e804701" translate="yes" xml:space="preserve">
          <source>To disable the assets cache store:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7295d8456167fa9cd998ecceff7742edb85d1f35" translate="yes" xml:space="preserve">
          <source>To do all this, you'll need to add the &lt;code&gt;attr_accessor&lt;/code&gt; for &lt;code&gt;author_name&lt;/code&gt;, the association for the author and the &lt;code&gt;before_validation&lt;/code&gt; call into &lt;code&gt;app/models/blorgh/article.rb&lt;/code&gt;. The &lt;code&gt;author&lt;/code&gt; association will be hard-coded to the &lt;code&gt;User&lt;/code&gt; class for the time being.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e9da0f19895e1e63c4d541ddb83d79d381ebfb6" translate="yes" xml:space="preserve">
          <source>To do so it sends &lt;code&gt;to_xml&lt;/code&gt; to every item in turn, and collects the results under a root node. All items must respond to &lt;code&gt;to_xml&lt;/code&gt;, an exception is raised otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ffe90f518143f4ccf33f12ab90cdec6562f3fbc" translate="yes" xml:space="preserve">
          <source>To do so, the helper forces &lt;code&gt;I18n#translate&lt;/code&gt; to raise exceptions no matter what exception handler is defined by setting the &lt;code&gt;:raise&lt;/code&gt; option:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8fcb58e0779136e79f7bbcd3196e309246aa6ef1" translate="yes" xml:space="preserve">
          <source>To do so, the method loops over the pairs and builds nodes that depend on the &lt;em&gt;values&lt;/em&gt;. Given a pair &lt;code&gt;key&lt;/code&gt;, &lt;code&gt;value&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b053d6c50340712c08c7806b10d1a9151d6f8b4" translate="yes" xml:space="preserve">
          <source>To do that, use the &lt;code&gt;endpoint&lt;/code&gt; method:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40a1955f6ad9fd6fd4678d97c32b0354df563059" translate="yes" xml:space="preserve">
          <source>To do that, we can change the generator this way:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4761e5af2e6702f7ebe03db792973054a0bf591c" translate="yes" xml:space="preserve">
          <source>To do this Rails provides a &lt;code&gt;connected_to&lt;/code&gt; method that will switch to the connection you need.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6eba38e7fdf3924f23e81a7c2eae21ab04284c38" translate="yes" xml:space="preserve">
          <source>To enable parallelization add the following to your &lt;code&gt;test_helper.rb&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab59146610828010aa5555a3267e4452009d74b6" translate="yes" xml:space="preserve">
          <source>To enable the appropriate extension, which is a requirement, use the &lt;code&gt;enable_extension&lt;/code&gt; method in your migrations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1378316695e919c5817f8048de1dc745aae7fb6a" translate="yes" xml:space="preserve">
          <source>To enable this option set:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99fbec6d3c8fdd9b9ce47c612da35a0bb97143f0" translate="yes" xml:space="preserve">
          <source>To enable this, pass a new object to the config option in &lt;code&gt;application.rb&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="024ea0333ad0d945de873fba9a797e2af84c26f5" translate="yes" xml:space="preserve">
          <source>To enable variants, add the &lt;code&gt;image_processing&lt;/code&gt; gem to your &lt;code&gt;Gemfile&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6aa5989f41d10407c003eb26b665f9faed067396" translate="yes" xml:space="preserve">
          <source>To enforce the object's &lt;code&gt;before_destroy&lt;/code&gt; and &lt;code&gt;after_destroy&lt;/code&gt; callbacks or any &lt;code&gt;:dependent&lt;/code&gt; association options, use &lt;code&gt;#destroy&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0fc00875e6021b8e408bc81e21fdbfd465d66d0c" translate="yes" xml:space="preserve">
          <source>To enqueue a job to be performed as soon as the queuing system is free:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90c95572a7dc8e66dff500217c7718530d16f63c" translate="yes" xml:space="preserve">
          <source>To enqueue a job to be processed at some point in the future:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e24b230b2b5da9b1632d7f5df306befa662b3db7" translate="yes" xml:space="preserve">
          <source>To ensure a meaningful root element use the &lt;code&gt;:root&lt;/code&gt; option:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88a27c5ba00b8c431e25f158798dc9a15474dfeb" translate="yes" xml:space="preserve">
          <source>To ensure entries fit within the specified memory prune the cache by removing the least recently accessed entries.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cbc6ad495926f0523f5406d698dc5e76e974f3a4" translate="yes" xml:space="preserve">
          <source>To exit the debugger, use the &lt;code&gt;quit&lt;/code&gt; command (abbreviated to &lt;code&gt;q&lt;/code&gt;). Or, type &lt;code&gt;q!&lt;/code&gt; to bypass the &lt;code&gt;Really quit? (y/n)&lt;/code&gt; prompt and exit unconditionally.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="acded72b905a0761483848340f3d75bac8d23714" translate="yes" xml:space="preserve">
          <source>To extend Rails using a railtie, create a subclass of &lt;code&gt;Rails::Railtie&lt;/code&gt;. This class must be loaded during the Rails boot process, and is conventionally called &lt;code&gt;MyNamespace::Railtie&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68d1ab2efb87e7f33694124b475fa832dd36471c" translate="yes" xml:space="preserve">
          <source>To find all callbacks in the before_save callback chain:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d189f8a2472510551f99eaa440f8b44f3c278c4" translate="yes" xml:space="preserve">
          <source>To find out more about different &lt;code&gt;rackup&lt;/code&gt; options, you can run:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="103656aabc25933b2a11db53c60e6c84adc391f9" translate="yes" xml:space="preserve">
          <source>To find the current layout, Rails first looks for a file in &lt;code&gt;app/views/layouts&lt;/code&gt; with the same base name as the controller. For example, rendering actions from the &lt;code&gt;PhotosController&lt;/code&gt; class will use &lt;code&gt;app/views/layouts/photos.html.erb&lt;/code&gt; (or &lt;code&gt;app/views/layouts/photos.builder&lt;/code&gt;). If there is no such controller-specific layout, Rails will use &lt;code&gt;app/views/layouts/application.html.erb&lt;/code&gt; or &lt;code&gt;app/views/layouts/application.builder&lt;/code&gt;. If there is no &lt;code&gt;.erb&lt;/code&gt; layout, Rails will use a &lt;code&gt;.builder&lt;/code&gt; layout if one exists. Rails also provides several ways to more precisely assign specific layouts to individual controllers and actions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e148e7771d973e0a356bb26cc07da701ba30d055" translate="yes" xml:space="preserve">
          <source>To find this gotcha the qualifying namespace has to be a class, &lt;code&gt;Object&lt;/code&gt; is not an ancestor of modules.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11574492354d5a8c9f0f8f200d0f4a66fe002321" translate="yes" xml:space="preserve">
          <source>To fix the regular expression, \A and \z should be used instead of ^ and $, like so:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8a6013ec55134e7e11173f7f2def5ca05d72167" translate="yes" xml:space="preserve">
          <source>To fix this, just remove the wildcards:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4430a5941a340ead709901a28a50cc72a199fcae" translate="yes" xml:space="preserve">
          <source>To force the radio button to be checked pass &lt;code&gt;checked: true&lt;/code&gt; in the &lt;code&gt;options&lt;/code&gt; hash. You may pass HTML options there as well.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24b199107473b75c5135ff12f64973bd46d6dab1" translate="yes" xml:space="preserve">
          <source>To further check if the before_save chain contains a proc defined as &lt;code&gt;rest_when_dead&lt;/code&gt; use the &lt;code&gt;filter&lt;/code&gt; property of the callback object:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b203e8b921a74e8f30ff1716c858cd5cfb46d25c" translate="yes" xml:space="preserve">
          <source>To generate a new migration, you can use</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f8d7ec5e93b43baed7318e30d2b6aa0f9ac8180" translate="yes" xml:space="preserve">
          <source>To generate an engine, you will need to run the plugin generator and pass it options as appropriate to the need. For the &quot;blorgh&quot; example, you will need to create a &quot;mountable&quot; engine, running this command in a terminal:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4d7c4beb69092cc1a08407a29c44b57ec37bc70" translate="yes" xml:space="preserve">
          <source>To generate this new column, run this command within the engine:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a24c8c074630c3cf1a20fadc6b55b97c00ab6685" translate="yes" xml:space="preserve">
          <source>To get Rails saying &quot;Hello&quot;, you need to create at minimum a &lt;em&gt;controller&lt;/em&gt; and a &lt;em&gt;view&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e48f7755253b50af5dc1c908eff57509fd33120d" translate="yes" xml:space="preserve">
          <source>To get a complete list of the available routes in your application, visit &lt;code&gt;http://localhost:3000/rails/info/routes&lt;/code&gt; in your browser while your server is running in the &lt;strong&gt;development&lt;/strong&gt; environment. You can also execute the &lt;code&gt;rails routes&lt;/code&gt; command in your terminal to produce the same output.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="005b30d0773b78f7961678c7d254cb64cc3d37a2" translate="yes" xml:space="preserve">
          <source>To get more details see the API Documentation for &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/ActiveJob/Exceptions/ClassMethods.html&quot;&gt;ActiveJob::Exceptions&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31dccd8cea944d0dfe178d04bafd1f9356872ee8" translate="yes" xml:space="preserve">
          <source>To get multiple fixtures at once, you can pass in a list of fixture names. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6bd97cf8c74b564d1224b7a61ffaa5d95f62dd45" translate="yes" xml:space="preserve">
          <source>To get started with PostgreSQL have a look at the &lt;a href=&quot;configuring#configuring-a-postgresql-database&quot;&gt;configuring Rails guide&lt;/a&gt;. It describes how to properly setup Active Record for PostgreSQL.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0f7a5ce473e6081ec973450d35899d117b17c518" translate="yes" xml:space="preserve">
          <source>To get started, add the redis gem to your Gemfile:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="328b48ce6e54d247c89f00f6889988392fc6aaad" translate="yes" xml:space="preserve">
          <source>To get the previous behavior it is needed to explicitly remove the &lt;code&gt;default_scope&lt;/code&gt; condition using &lt;code&gt;unscoped&lt;/code&gt;, &lt;code&gt;unscope&lt;/code&gt;, &lt;code&gt;rewhere&lt;/code&gt; or &lt;code&gt;except&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa553d3e7e28e5369ebe98308895cae960fc7eab" translate="yes" xml:space="preserve">
          <source>To get the total of grouped items on a single query, call &lt;code&gt;count&lt;/code&gt; after the &lt;code&gt;group&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e25850423c07981f25d5934d7647129abcd3a3d9" translate="yes" xml:space="preserve">
          <source>To have better control applications may let the asset pipeline manage their favicon storing the file under &lt;code&gt;app/assets/images&lt;/code&gt;, and using this helper to generate its corresponding link tag.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e566cc8c8c0c7006a31ae9012d8a81229af6f83" translate="yes" xml:space="preserve">
          <source>To hook into the initialization process of one of the following classes use the available hook.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee6e3360c651cd5d86470fb56bf96c6fa916d002" translate="yes" xml:space="preserve">
          <source>To implement the corresponding hosts you can either setup four actual hosts or use wildcard DNS to CNAME the wildcard to a single asset host. You can read more about setting up your DNS CNAME records from your ISP.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="556118047d0a5ae15941c45d48edd45c47888016" translate="yes" xml:space="preserve">
          <source>To implement the validate method, you must have a &lt;code&gt;record&lt;/code&gt; parameter defined, which is the record to be validated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07f64f1b212c808a355458602b5bdea3f5e65ae4" translate="yes" xml:space="preserve">
          <source>To implement, just extend &lt;a href=&quot;naming&quot;&gt;ActiveModel::Naming&lt;/a&gt; in your object:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f9e69da3b593fd84fd7e8edc7d07700603a0f4a" translate="yes" xml:space="preserve">
          <source>To improve security, Rails embeds the purpose information in encrypted or signed cookies value. Rails can then thwart attacks that attempt to copy the signed/encrypted value of a cookie and use it as the value of another cookie.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e7e45a50afda0b2eb7660a4c1d963a9a94b5ce6" translate="yes" xml:space="preserve">
          <source>To improve security, Rails now embeds the expiry information also in encrypted or signed cookies value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b939bc00c6e583531512c02fea1326ca0373b18" translate="yes" xml:space="preserve">
          <source>To improve the error details to contain the unallowed characters set for instance, you can pass additional keys to &lt;code&gt;errors.add&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f60091bed62823549ee21d98eb4634d84b7b37b" translate="yes" xml:space="preserve">
          <source>To include &lt;code&gt;app/assets/javascripts/main.js&lt;/code&gt; and &lt;code&gt;app/assets/javascripts/photos/columns.js&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b2735bcf794c8b8e3dbcb0818bf9b1adfb01e0e" translate="yes" xml:space="preserve">
          <source>To include &lt;code&gt;app/assets/stylesheets/main.css&lt;/code&gt; and &lt;code&gt;app/assets/stylesheets/columns.css&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21531652ba1e3d89bf747da7459ad4fedc967168" translate="yes" xml:space="preserve">
          <source>To include &lt;code&gt;app/assets/stylesheets/main.css&lt;/code&gt; and &lt;code&gt;app/assets/stylesheets/photos/columns.css&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="779772c8fa8959eb00580d4c13aa16a7bc510c71" translate="yes" xml:space="preserve">
          <source>To include &lt;code&gt;http://example.com/main.css&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d0ce90d4b25f9d33890d4a654b5a83b9b12a097" translate="yes" xml:space="preserve">
          <source>To include &lt;code&gt;http://example.com/main.js&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d33d58e1685fdeed02bffcca2b4f6e263c8aec1" translate="yes" xml:space="preserve">
          <source>To include a deep hierarchy of associations, use a hash:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9529df18a672e31493d1940461618054ec2bc1c9" translate="yes" xml:space="preserve">
          <source>To include associations use &lt;code&gt;:include&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7a06b85fbcecfa0afdb70a283e80c6c9bfb4543" translate="yes" xml:space="preserve">
          <source>To include multiple files such as &lt;code&gt;app/assets/javascripts/main.js&lt;/code&gt; and &lt;code&gt;app/assets/javascripts/columns.js&lt;/code&gt; at the same time:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d835a88e3ac4a8adea51bc2effafbfe3b1f2844" translate="yes" xml:space="preserve">
          <source>To include the result of some method calls on the model use &lt;code&gt;:methods&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe9a73c629a5b04262b8524874199438d75d8b58" translate="yes" xml:space="preserve">
          <source>To insert something verbatim use the &lt;code&gt;raw&lt;/code&gt; helper rather than calling &lt;code&gt;html_safe&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d1e94e3837bd32d9b9e63fda18996b46188ee74" translate="yes" xml:space="preserve">
          <source>To install Rails, use the &lt;code&gt;gem install&lt;/code&gt; command provided by RubyGems:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07105a68e26c48f757865bdaccecf2bc5d1b5dd0" translate="yes" xml:space="preserve">
          <source>To instrument an event you just need to do:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a465d1c6a94688a2116777f5f6bfe9d3c5205899" translate="yes" xml:space="preserve">
          <source>To invoke our new generator, we just need to do:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e20eda985f292acd30c70cf04867cd1ab356742" translate="yes" xml:space="preserve">
          <source>To iterate over these one hundred posts, we'll generate 201 database queries. Let's first just optimize it for retrieving the author:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="87ded5cfd23a78b91a3c27ef331c2040caf078c6" translate="yes" xml:space="preserve">
          <source>To keep Rails secure by default, &lt;code&gt;deep_munge&lt;/code&gt; replaces some of the values with &lt;code&gt;nil&lt;/code&gt;. Below table shows what the parameters look like based on &lt;code&gt;JSON&lt;/code&gt; sent in request:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e09c0b8fb45739bb60fdf13680d7675cc4ee3ae7" translate="yes" xml:space="preserve">
          <source>To keep it simple in this case, the application will have a class called &lt;code&gt;User&lt;/code&gt; that represents the users of the application (we'll get into making this configurable further on). It can be generated using this command inside the application:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e93f4f233cb7b557883bd4655238bb1cf4e4924" translate="yes" xml:space="preserve">
          <source>To learn more about the different types of associations, read the next section of this guide. That's followed by some tips and tricks for working with associations, and then by a complete reference to the methods and options for associations in Rails.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3384d06e6e691dc9b9354e577ada2a426d01d10" translate="yes" xml:space="preserve">
          <source>To leverage time zone support in Rails, you have to ask your users what time zone they are in. Doing so would require generating select options from a list of pre-defined &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/ActiveSupport/TimeZone.html&quot;&gt;&lt;code&gt;ActiveSupport::TimeZone&lt;/code&gt;&lt;/a&gt; objects using &lt;code&gt;collection_select&lt;/code&gt;, but you can simply use the &lt;code&gt;time_zone_select&lt;/code&gt; helper that already wraps this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72d7d61c72997b4cbf28bfa14fdf1e2d9d17fab5" translate="yes" xml:space="preserve">
          <source>To list all active catchpoints use &lt;code&gt;catch&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c808fe2b9636543eefc5142e38fb64613521faf1" translate="yes" xml:space="preserve">
          <source>To load the schema from &lt;code&gt;db/structure.sql&lt;/code&gt;, run &lt;code&gt;rails db:structure:load&lt;/code&gt;. Loading this file is done by executing the SQL statements it contains. By definition, this will create a perfect copy of the database's structure.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9842772e3117449f3a953e7ace41a17296023709" translate="yes" xml:space="preserve">
          <source>To localize store and update &lt;em&gt;content&lt;/em&gt; in your application (e.g. translate blog posts), see the &lt;a href=&quot;#translating-model-content&quot;&gt;Translating model content&lt;/a&gt; section.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="949250dd89ebeeaeeb6033d743505186074bd17b" translate="yes" xml:space="preserve">
          <source>To look up multiple translations at once, an array of keys can be passed:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4dfb51ce5c8fdb161af5ab17a3e8b708ac6f79c1" translate="yes" xml:space="preserve">
          <source>To make an error actionable, include the &lt;code&gt;ActiveSupport::ActionableError&lt;/code&gt; module and invoke the &lt;code&gt;action&lt;/code&gt; class macro to define the action. An action needs a name and a block to execute.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1dbde35d1046f5cdc63670a343e680166021bbc9" translate="yes" xml:space="preserve">
          <source>To make the &quot;Unknown action&quot; go away, you can define a &lt;code&gt;create&lt;/code&gt; action within the &lt;code&gt;ArticlesController&lt;/code&gt; class in &lt;code&gt;app/controllers/articles_controller.rb&lt;/code&gt;, underneath the &lt;code&gt;new&lt;/code&gt; action, as shown:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="921a7ea4bbe0b0e11218dced5eedc6573cfc2e9d" translate="yes" xml:space="preserve">
          <source>To make the engine's functionality accessible from within an application, it needs to be mounted in that application's &lt;code&gt;config/routes.rb&lt;/code&gt; file:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a9c45a8275560a053195914f7b79861295936d9d" translate="yes" xml:space="preserve">
          <source>To make this behavior consistent with other parts of the framework, isolated engines also have an effect on &lt;code&gt;ActiveModel::Naming&lt;/code&gt;. In a normal Rails app, when you use a namespaced model such as &lt;code&gt;Namespace::Article&lt;/code&gt;, &lt;code&gt;ActiveModel::Naming&lt;/code&gt; will generate names with the prefix &amp;ldquo;namespace&amp;rdquo;. In an isolated engine, the prefix will be omitted in URL helpers and form fields, for convenience.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1d90b485d54c8610af9229969e151cf347fb128" translate="yes" xml:space="preserve">
          <source>To make this route always use the engine's &lt;code&gt;articles_path&lt;/code&gt; routing helper method, we must call the method on the routing proxy method that shares the same name as the engine.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd5ff9b158d9be25892d88a1b07fc4ea7716c66c" translate="yes" xml:space="preserve">
          <source>To manually define an action inside a controller, all you need to do is to define a new method inside the controller. Open &lt;code&gt;app/controllers/articles_controller.rb&lt;/code&gt; and inside the &lt;code&gt;ArticlesController&lt;/code&gt; class, define the &lt;code&gt;new&lt;/code&gt; method so that your controller now looks like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10ee3825bdd39797018ef838218447c460850360" translate="yes" xml:space="preserve">
          <source>To match a wildcard parameter, it must have a name assigned to it. Without a variable name to attach the glob parameter to, the route can't be parsed.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c44663ac68a7142de4628d90c3a983aeada5b915" translate="yes" xml:space="preserve">
          <source>To omit the instance reader method, pass &lt;code&gt;instance_reader:
false&lt;/code&gt; or &lt;code&gt;instance_accessor: false&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb64965d9e729741db712ff6ad1f00ac24b32cb6" translate="yes" xml:space="preserve">
          <source>To omit the instance writer method, pass &lt;code&gt;instance_writer:
false&lt;/code&gt; or &lt;code&gt;instance_accessor: false&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54d7f9b5323081bba96cda32f5880c9ac55b25d6" translate="yes" xml:space="preserve">
          <source>To omit the instance writer method, pass &lt;code&gt;instance_writer:
false&lt;/code&gt;. To omit the instance reader method, pass &lt;code&gt;instance_reader: false&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="387874b4f7e3aeb4135421cd53cc3c908662c48f" translate="yes" xml:space="preserve">
          <source>To opt out of both instance methods, pass &lt;code&gt;instance_accessor:
false&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6a9c311437d073e9fbcaf6cfacf7848796a7292" translate="yes" xml:space="preserve">
          <source>To opt out of the instance reader method, pass &lt;code&gt;instance_reader:
false&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10e6ced416fc62ee3f668828d410bdfb909473cc" translate="yes" xml:space="preserve">
          <source>To opt out of the instance writer method, pass &lt;code&gt;instance_writer:
false&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="697798c3fe3ccdc6d31e234baab2537794dff892" translate="yes" xml:space="preserve">
          <source>To override the name of the &lt;code&gt;lock_version&lt;/code&gt; column, &lt;code&gt;ActiveRecord::Base&lt;/code&gt; provides a class attribute called &lt;code&gt;locking_column&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d053ebaa181a7f197d1a43234f804f7a26afe160" translate="yes" xml:space="preserve">
          <source>To pass a local variable to a partial in only specific cases use the &lt;code&gt;local_assigns&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a5b697325c8cdfb93a093ea707e3321adfe02cd" translate="yes" xml:space="preserve">
          <source>To pass arguments to your custom rake task:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e35109b3045d21b832476a81c851256780c03c6" translate="yes" xml:space="preserve">
          <source>To perform the computation the method first increments years, then months, then weeks, and finally days. This order is important towards the end of months. Say for example we are at the end of February of 2010, and we want to move one month and one day forward.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99b4d018fd49bbe2363ea2588891470154dbe746" translate="yes" xml:space="preserve">
          <source>To permit an entire hash of parameters, the &lt;code&gt;permit!&lt;/code&gt; method can be used:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9332de03e10b7d988d606a6e444b4daceb57f837" translate="yes" xml:space="preserve">
          <source>To play nicely with JavaScript conventions, sub-attributes are dasherized.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de4cba0eac3a8e27e7e9e076afcf1a49468737fc" translate="yes" xml:space="preserve">
          <source>To prefix a group of route helpers, use &lt;code&gt;:as&lt;/code&gt; with &lt;code&gt;scope&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd912753995b4784d9b4b09641cfac3382b7ddda" translate="yes" xml:space="preserve">
          <source>To preserve the case of the characters in a string, use the &lt;code&gt;preserve_case&lt;/code&gt; argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79c4278c653cf99eaee1a51746aaac987a08f05d" translate="yes" xml:space="preserve">
          <source>To preserve the case of the string, set the &lt;code&gt;preserve_case&lt;/code&gt; argument to true. By default, &lt;code&gt;preserve_case&lt;/code&gt; is set to false.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb61f563e80d658169538a885bdf4aff1315e13f" translate="yes" xml:space="preserve">
          <source>To prevent problems with case-insensitive filesystems, especially in combination with databases which treat indices as case-sensitive, all blob keys generated are going to only contain the base-36 character alphabet and will therefore be lowercase. To maintain the same or higher amount of entropy as in the base-58 encoding used by `has_secure_token` the number of bytes used is increased to 28 from the standard 24</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4e9764587fb31e1cbd7f9e23b59e4667ae1cc19" translate="yes" xml:space="preserve">
          <source>To prevent that block from being called anymore, just unsubscribe passing that reference:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3fdb463e6e86ebf6894664d744889ba80523f357" translate="yes" xml:space="preserve">
          <source>To prevent this deadlock, the outer thread can &lt;code&gt;permit_concurrent_loads&lt;/code&gt;. By calling this method, the thread guarantees it will not dereference any possibly-autoloaded constant inside the supplied block. The safest way to meet that promise is to put it as close as possible to the blocking call:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d74ebca5dacf007cb62ec644a58e3da5c60614d5" translate="yes" xml:space="preserve">
          <source>To prevent this the helper generates an auxiliary hidden field before every collection of radio buttons. The hidden field has the same name as collection radio button and blank value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e8537f67d7c81138cfcbd0b4e188c38a24c5453" translate="yes" xml:space="preserve">
          <source>To prevent this the helper generates an auxiliary hidden field before every multiple select. The hidden field has the same name as multiple select and blank value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2c066b6b948fd18ae5c6932ab988a9969e24e2d8" translate="yes" xml:space="preserve">
          <source>To prevent this the helper generates an auxiliary hidden field before the very check box. The hidden field has the same name and its attributes mimic an unchecked check box.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c3ffe3bd9eca23fdcbd13e0773ed39790a3759d5" translate="yes" xml:space="preserve">
          <source>To protect against all other forged requests, we introduce a &lt;em&gt;required security token&lt;/em&gt; that our site knows but other sites don't know. We include the security token in requests and verify it on the server. This is a one-liner in your application controller, and is the default for newly created Rails applications:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fbacf730e1f12d7ec162c71112b3231589ee1b04" translate="yes" xml:space="preserve">
          <source>To quickly install Ruby and Ruby on Rails on your system in Windows, you can use &lt;a href=&quot;http://railsinstaller.org&quot;&gt;Rails Installer&lt;/a&gt;. For more installation methods for most Operating Systems take a look at &lt;a href=&quot;https://www.ruby-lang.org/en/documentation/installation/&quot;&gt;ruby-lang.org&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90fe648660dadf05da27b9950635a3eaa940745f" translate="yes" xml:space="preserve">
          <source>To raise an exception when the value is blank, append a bang to the key name, like:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7014e07a3174e5afc62b83dc5349302192a4817" translate="yes" xml:space="preserve">
          <source>To re-enable the old finders, you can use the &lt;a href=&quot;https://github.com/rails/activerecord-deprecated_finders&quot;&gt;activerecord-deprecated_finders gem&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9734f2bc5fb4092de8e84c7cf219d91ff62d9e83" translate="yes" xml:space="preserve">
          <source>To reconfigure an existing &lt;a href=&quot;backtracecleaner&quot;&gt;BacktraceCleaner&lt;/a&gt; (like the default one in Rails) and show as much data as possible, you can always call &lt;code&gt;BacktraceCleaner#remove_silencers!&lt;/code&gt;, which will restore the backtrace to a pristine state. If you need to reconfigure an existing &lt;a href=&quot;backtracecleaner&quot;&gt;BacktraceCleaner&lt;/a&gt; so that it does not filter or modify the paths of any lines of the backtrace, you can call &lt;code&gt;BacktraceCleaner#remove_filters!&lt;/code&gt; These two methods will give you a completely untouched backtrace.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22cdc363aec48d3827e0a2a82515f3665e8d29b4" translate="yes" xml:space="preserve">
          <source>To refer to such a delayed on-demand variant, simply link to the variant through the resolved route provided by Active Storage like so:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e71e6885d80604fc3a6024543fd47eff444bf0ec" translate="yes" xml:space="preserve">
          <source>To remove a csv renderer:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68c23a1c0e409b22fae595b820777eee58c5f6c0" translate="yes" xml:space="preserve">
          <source>To remove an attachment from a model, call &lt;code&gt;purge&lt;/code&gt; on the attachment. Removal can be done in the background if your application is setup to use Active Job. Purging deletes the blob and the file from the storage service.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22b532370cc31b688fc45986722a1140d028fdff" translate="yes" xml:space="preserve">
          <source>To remove something from the session, delete the key/value pair:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca7b121751735ab45370bc21bac0f765524f83f4" translate="yes" xml:space="preserve">
          <source>To render a partial as part of a view, you use the &lt;code&gt;render&lt;/code&gt; method within the view:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="135841158f4edb521fd4516410bd234cfc795c9c" translate="yes" xml:space="preserve">
          <source>To render an HTML page with debugging information, use the value &lt;code&gt;:default&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8d97e4f9f5b36ef96884483c6dc6c22fe61bcd3" translate="yes" xml:space="preserve">
          <source>To render debugging information preserving the response format, use the value &lt;code&gt;:api&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d48a62f0223661865f5b011e8f914109fcf6ff3" translate="yes" xml:space="preserve">
          <source>To reset the entire session, use &lt;code&gt;reset_session&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8232b3c8cf1eb150127b13a571021c18224213f7" translate="yes" xml:space="preserve">
          <source>To resolve &lt;code&gt;User&lt;/code&gt; Ruby checks &lt;code&gt;Admin&lt;/code&gt; in the former case, but it does not in the latter because it does not belong to the nesting (see &lt;a href=&quot;#nesting&quot;&gt;Nesting&lt;/a&gt; and &lt;a href=&quot;#resolution-algorithms&quot;&gt;Resolution Algorithms&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6743c0ebbcdb84c8d2eee31727667945df512865" translate="yes" xml:space="preserve">
          <source>To retrieve objects from the database, Active Record provides several finder methods. Each finder method allows you to pass arguments into it to perform certain queries on your database without writing raw SQL.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="86a73c29a7459929d4b5f13b87e34a853279f83c" translate="yes" xml:space="preserve">
          <source>To retrieve records from the database in a specific order, you can use the &lt;code&gt;order&lt;/code&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c10c89631b9702ef45bf2d36366eb1588de95e2f" translate="yes" xml:space="preserve">
          <source>To roll the database back to a previous migration version, use &lt;code&gt;rails
db:rollback VERSION=X&lt;/code&gt; where &lt;code&gt;X&lt;/code&gt; is the version to which you wish to downgrade. Alternatively, you can also use the STEP option if you wish to rollback last few migrations. &lt;code&gt;rails db:rollback
STEP=2&lt;/code&gt; will rollback the latest two migrations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7784a5056ff1425ce0a3c8586fb49ecd8c14da1a" translate="yes" xml:space="preserve">
          <source>To run migrations against the currently configured database, use &lt;code&gt;rails db:migrate&lt;/code&gt;. This will update the database by running all of the pending migrations, creating the &lt;code&gt;schema_migrations&lt;/code&gt; table (see &amp;ldquo;About the schema_migrations table&amp;rdquo; section below) if missing. It will also invoke the db:schema:dump command, which will update your db/schema.rb file to match the structure of your database.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa864a5a164067933873cc6f0c116ff0c44e5d96" translate="yes" xml:space="preserve">
          <source>To run these migrations within the context of the application, simply run &lt;code&gt;rails
db:migrate&lt;/code&gt;. When accessing the engine through &lt;code&gt;http://localhost:3000/blog&lt;/code&gt;, the articles will be empty. This is because the table created inside the application is different from the one created within the engine. Go ahead, play around with the newly mounted engine. You'll find that it's the same as when it was only an engine.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f74ad12044b7c77a663d91b88b0fde3656571e5" translate="yes" xml:space="preserve">
          <source>To save having to call &lt;code&gt;constantize&lt;/code&gt; on the &lt;code&gt;author_class&lt;/code&gt; result all the time, you could instead just override the &lt;code&gt;author_class&lt;/code&gt; getter method inside the &lt;code&gt;Blorgh&lt;/code&gt; module in the &lt;code&gt;lib/blorgh.rb&lt;/code&gt; file to always call &lt;code&gt;constantize&lt;/code&gt; on the saved value before returning the result:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4f816dbde6fc978a92fd8d2eb21ad09b497b5a6" translate="yes" xml:space="preserve">
          <source>To see demonstrations of other engines, check out &lt;a href=&quot;https://github.com/plataformatec/devise&quot;&gt;Devise&lt;/a&gt;, an engine that provides authentication for its parent applications, or &lt;a href=&quot;https://github.com/thredded/thredded&quot;&gt;Thredded&lt;/a&gt;, an engine that provides forum functionality. There's also &lt;a href=&quot;https://github.com/spree/spree&quot;&gt;Spree&lt;/a&gt; which provides an e-commerce platform, and &lt;a href=&quot;https://github.com/refinery/refinerycms&quot;&gt;Refinery CMS&lt;/a&gt;, a CMS engine.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9be3f9111f77091831c08e5ba6bc78c18378c49" translate="yes" xml:space="preserve">
          <source>To see how a test failure is reported, you can add a failing test to the &lt;code&gt;article_test.rb&lt;/code&gt; test case.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="507825aa0aae71c1e54d11afb68d3712e90fe378" translate="yes" xml:space="preserve">
          <source>To see how an error gets reported, here's a test containing an error:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6ce7ecfcf66b239276cfcf6ffb2689eee7f93fa" translate="yes" xml:space="preserve">
          <source>To see the previous ten lines you should type &lt;code&gt;list-&lt;/code&gt; (or &lt;code&gt;l-&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d3f85a07b2c38e9d8337984659364cd696a5cd9" translate="yes" xml:space="preserve">
          <source>To see this in action, change to the &lt;code&gt;test/dummy&lt;/code&gt; directory, fire up a console, and start squawking:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="567b7bc9a60c885565522b57611b72ecd6492739" translate="yes" xml:space="preserve">
          <source>To select only a subset of fields from the result set, you can specify the subset via the &lt;code&gt;select&lt;/code&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a69d93078f95ccc83e160e3298809a99d4bcd7c" translate="yes" xml:space="preserve">
          <source>To send a hash, you include the key name inside the brackets:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63b384ea2f65ddc99ec87a175bafa9a268fcb101" translate="yes" xml:space="preserve">
          <source>To send parameters to interpolation use the &lt;code&gt;default_i18n_subject&lt;/code&gt; method on the mailer.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d3d50281051232bbbf2f78142bdf9fd69c47dfb" translate="yes" xml:space="preserve">
          <source>To set a default value for the attribute, pass &lt;code&gt;default:&lt;/code&gt;, like so:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06e130748a07154eadb5824402046314c29c4d17" translate="yes" xml:space="preserve">
          <source>To set an authenticity token you need to pass an &lt;code&gt;:authenticity_token&lt;/code&gt; parameter</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3e35ed1f4878e8bebe8ad2f8794d8110386ed9ad" translate="yes" xml:space="preserve">
          <source>To set asset compression methods, set the appropriate configuration options in &lt;code&gt;production.rb&lt;/code&gt; - &lt;code&gt;config.assets.css_compressor&lt;/code&gt; for your CSS and &lt;code&gt;config.assets.js_compressor&lt;/code&gt; for your JavaScript:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d82df840cae83b58010e025ce07e289f9af3d12" translate="yes" xml:space="preserve">
          <source>To set the default allowed tags or attributes across your application:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6421ec43350f7a4f6013290b472bcbac6c163f8" translate="yes" xml:space="preserve">
          <source>To set this configuration setting within the application, an initializer should be used. By using an initializer, the configuration will be set up before the application starts and calls the engine's models, which may depend on this configuration setting existing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d111bf390e547005d29462846e73b7785cde0a5" translate="yes" xml:space="preserve">
          <source>To set up your CDN you have to have your application running in production on the internet at a publicly available URL, for example &lt;code&gt;example.com&lt;/code&gt;. Next you'll need to sign up for a CDN service from a cloud hosting provider. When you do this you need to configure the &quot;origin&quot; of the CDN to point back at your website &lt;code&gt;example.com&lt;/code&gt;, check your provider for documentation on configuring the origin server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6db10e18e62f9ef0cd6fcf1049650533e80fcbdd" translate="yes" xml:space="preserve">
          <source>To show the comments on an article, edit &lt;code&gt;app/views/blorgh/articles/show.html.erb&lt;/code&gt; and add this line before the &quot;Edit&quot; link:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22b911e46af9524858086fadd412be7aa89058be" translate="yes" xml:space="preserve">
          <source>To show the uploaded files in a form:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82e0e06c38d69dd9f52808d8b71a6b06bd31ccb7" translate="yes" xml:space="preserve">
          <source>To simulate &lt;code&gt;GET&lt;/code&gt;, &lt;code&gt;POST&lt;/code&gt;, &lt;code&gt;PATCH&lt;/code&gt;, &lt;code&gt;PUT&lt;/code&gt;, &lt;code&gt;DELETE&lt;/code&gt; and &lt;code&gt;HEAD&lt;/code&gt; requests prefer using &lt;a href=&quot;behavior#method-i-get&quot;&gt;get&lt;/a&gt;, &lt;a href=&quot;behavior#method-i-post&quot;&gt;post&lt;/a&gt;, &lt;a href=&quot;behavior#method-i-patch&quot;&gt;patch&lt;/a&gt;, &lt;a href=&quot;behavior#method-i-put&quot;&gt;put&lt;/a&gt;, &lt;a href=&quot;behavior#method-i-delete&quot;&gt;delete&lt;/a&gt; and &lt;a href=&quot;behavior#method-i-head&quot;&gt;head&lt;/a&gt; methods respectively which will make tests more expressive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="053b225e23faecc1b2f5f015e3c6fb9a248938b8" translate="yes" xml:space="preserve">
          <source>To skip duplicate rows, see &lt;code&gt;ActiveRecord::Persistence#insert_all&lt;/code&gt;. To replace them, see &lt;code&gt;ActiveRecord::Persistence#upsert_all&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5c82c3d0de5a3a42ef5f4e4e32977c025b23f45c" translate="yes" xml:space="preserve">
          <source>To skip rows according to just one unique index pass &lt;code&gt;:unique_by&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec0007085506b84d0313a26ec7f7c87e62499ef7" translate="yes" xml:space="preserve">
          <source>To specify a dependency that should be installed with the engine during a traditional &lt;code&gt;gem install&lt;/code&gt;, specify it inside the &lt;code&gt;Gem::Specification&lt;/code&gt; block inside the &lt;code&gt;.gemspec&lt;/code&gt; file in the engine:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bfb1b80eb175598abe6f4f144c8d542768d16d33" translate="yes" xml:space="preserve">
          <source>To specify a dependency that should only be installed as a development dependency of the application, specify it like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fea55d37307ae227eb72c159fcf3b2893b1226da" translate="yes" xml:space="preserve">
          <source>To start out, write a failing test that shows the behavior you'd like:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a39bbb3fa9ebdd7c9fa5b7f16f18cadece0e18d7" translate="yes" xml:space="preserve">
          <source>To stop the web server, hit Ctrl+C in the terminal window where it's running. To verify the server has stopped you should see your command prompt cursor again. For most UNIX-like systems including macOS this will be a dollar sign &lt;code&gt;$&lt;/code&gt;. In development mode, Rails does not generally require you to restart the server; changes you make in files will be automatically picked up by the server.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9fa5042ed4dcfd31d06ae06e8d8bbfacf10d4b7" translate="yes" xml:space="preserve">
          <source>To store something in the session, just assign it to the key like a hash:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4780fc0f55aaba749bf674b4c8fb89803edfb087" translate="yes" xml:space="preserve">
          <source>To stream data to the client, use &lt;code&gt;send_data&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c5576362a518735466c660f07ea0a3f03e740714" translate="yes" xml:space="preserve">
          <source>To support a formatter, you must manually assign a formatter from the &lt;code&gt;config.log_formatter&lt;/code&gt; value to the logger.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db920e29a22b02f878501e4d8ef6fa55d8e07a21" translate="yes" xml:space="preserve">
          <source>To support silencing, the logger must include &lt;code&gt;ActiveSupport::LoggerSilence&lt;/code&gt; module. The &lt;code&gt;ActiveSupport::Logger&lt;/code&gt; class already includes these modules.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d690bfc46b8e35f3c61f13f097453813c24f4b0f" translate="yes" xml:space="preserve">
          <source>To support tagged logs, the log instance must be wrapped with &lt;code&gt;ActiveSupport::TaggedLogging&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a3e4bfdda24efd27566a387296c9d24337cb9532" translate="yes" xml:space="preserve">
          <source>To suppress leading and trailing whitespaces, you can use &lt;code&gt;&amp;lt;%-&lt;/code&gt;&lt;code&gt;-%&amp;gt;&lt;/code&gt; interchangeably with &lt;code&gt;&amp;lt;%&lt;/code&gt; and &lt;code&gt;%&amp;gt;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07c568d4eb419bf85521ea6d1a52e125bc8f2258" translate="yes" xml:space="preserve">
          <source>To switch to the Vips processor, you would add the following to &lt;code&gt;config/application.rb&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d07682b0f4f98f71c0d52367bf6f551d905f0b3" translate="yes" xml:space="preserve">
          <source>To test AJAX requests, you can specify the &lt;code&gt;xhr: true&lt;/code&gt; option to &lt;code&gt;get&lt;/code&gt;, &lt;code&gt;post&lt;/code&gt;, &lt;code&gt;patch&lt;/code&gt;, &lt;code&gt;put&lt;/code&gt;, and &lt;code&gt;delete&lt;/code&gt; methods. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="76abbf20f513adf380a34c5d6935ff1faa5fb00b" translate="yes" xml:space="preserve">
          <source>To test that your method does what it says it does, run the unit tests with &lt;code&gt;bin/test&lt;/code&gt; from your plugin directory.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="563d9d2a9205fcb53f07d7d86c5597f1f586d6df" translate="yes" xml:space="preserve">
          <source>To turn off HSTS, omitting the header is not enough. Browsers will remember the original HSTS directive until it expires. Instead, use the header to tell browsers to expire HSTS immediately. Setting &lt;code&gt;hsts: false&lt;/code&gt; is a shortcut for &lt;code&gt;hsts: { expires: 0 }&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79c3168a1a8d09ad93e4cdbd3715a216cdfee62b" translate="yes" xml:space="preserve">
          <source>To unregister a MIME type:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="334e52eb6863fd42a7ffce014c801acc16fe897d" translate="yes" xml:space="preserve">
          <source>To upload binary files on Windows, pass &lt;code&gt;:binary&lt;/code&gt; as the last parameter. This will not affect other platforms:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f86cfed7413cbd53bd2f76385b8b2bb26543569f" translate="yes" xml:space="preserve">
          <source>To use &lt;code&gt;ActiveModel::Serializers::JSON&lt;/code&gt; you only need to change the module you are including from &lt;code&gt;ActiveModel::Serialization&lt;/code&gt; to &lt;code&gt;ActiveModel::Serializers::JSON&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29afb7c5d099e377b716dbeb9e7edb10838d1ba5" translate="yes" xml:space="preserve">
          <source>To use &lt;code&gt;rackup&lt;/code&gt; instead of Rails' &lt;code&gt;rails server&lt;/code&gt;, you can put the following inside &lt;code&gt;config.ru&lt;/code&gt; of your Rails application's root directory:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31a513a06016a34caf7c0901b08d1c4419a32387" translate="yes" xml:space="preserve">
          <source>To use Action Mailer, you need to create a mailer model.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63efbbc2d83d6f08dc36f06dd855914c5c196627" translate="yes" xml:space="preserve">
          <source>To use Backburner set the queue_adapter config to &lt;code&gt;:backburner&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cfb26a8f671852501054716a4fb612efbd5f3940" translate="yes" xml:space="preserve">
          <source>To use Delayed Job, set the queue_adapter config to &lt;code&gt;:delayed_job&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78abd79732709f235b41ac26f54e0f27ef464edb" translate="yes" xml:space="preserve">
          <source>To use Que set the queue_adapter config to &lt;code&gt;:que&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bfec63c8c0fb5ab4af67cc939815ff9fc93fabfd" translate="yes" xml:space="preserve">
          <source>To use Resque set the queue_adapter config to &lt;code&gt;:resque&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eeac0f03c2323191770ea66f043353ac2edcd693" translate="yes" xml:space="preserve">
          <source>To use Sidekiq set the queue_adapter config to &lt;code&gt;:sidekiq&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0c64df5b7e96718906edd95865302dacfcc66d1" translate="yes" xml:space="preserve">
          <source>To use Sneakers set the queue_adapter config to &lt;code&gt;:sneakers&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="089f8ca62ac95b9b15cef2ae944fcffa19f1e9de" translate="yes" xml:space="preserve">
          <source>To use Sucker Punch set the queue_adapter config to &lt;code&gt;:sucker_punch&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d93032f353f3684dff439b924d144a3239e8303" translate="yes" xml:space="preserve">
          <source>To use a UUID primary key without any of the extensions, set the &lt;code&gt;:default&lt;/code&gt; option to &lt;code&gt;nil&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01a6560ac359f0b45e5d768bf7caef4a4fb00654" translate="yes" xml:space="preserve">
          <source>To use a custom cache store, simply set the cache store to a new instance of your custom class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16cdfe80fbab3d09c99a31e7b52ae4835d807d27" translate="yes" xml:space="preserve">
          <source>To use a custom local variable name within the partial, specify the &lt;code&gt;:as&lt;/code&gt; option in the call to the partial:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cbb124cd3e42b858d7854133d16f1d8b2e013e5f" translate="yes" xml:space="preserve">
          <source>To use a custom separator, override the &lt;code&gt;separator&lt;/code&gt; argument.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be137bccdb82824afa32a43a7660755352537faf" translate="yes" xml:space="preserve">
          <source>To use a headless driver, like Poltergeist, update your Gemfile to use Poltergeist instead of Selenium and then declare the driver name in the &lt;code&gt;application_system_test_case.rb&lt;/code&gt; file. In this case, you would leave out the &lt;code&gt;:using&lt;/code&gt; option because the driver is headless, but you can still use &lt;code&gt;:screen_size&lt;/code&gt; to change the size of the browser screen, also you can use &lt;code&gt;:options&lt;/code&gt; to pass options supported by the driver. Please refer to your driver documentation to learn about supported options.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d749486cb0ce9dfa9e6537e7edf3206e24ced0c" translate="yes" xml:space="preserve">
          <source>To use engine's migrations in application you can use the rake task below, which copies them to application's dir:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f72fb95ec784f0f0b4396a61a188a60e22e4305" translate="yes" xml:space="preserve">
          <source>To use it, insert it near the top of the middleware stack, using &lt;code&gt;config/application.rb&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9034872b1f2e613b63f4393ca1728d7d452b7374" translate="yes" xml:space="preserve">
          <source>To use queue_classic set the queue_adapter config to &lt;code&gt;:queue_classic&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="35d41298efb8b0ad5a971a7547f7bdd79e5b6645" translate="yes" xml:space="preserve">
          <source>To use the &lt;a href=&quot;databaseselector&quot;&gt;DatabaseSelector&lt;/a&gt; in your application with default settings add the following options to your environment config:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bdb9175c626f67f07a3f428fac07fa2bee7bb390" translate="yes" xml:space="preserve">
          <source>To use the Amazon S3 service in production, you add the following to &lt;code&gt;config/environments/production.rb&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1977fd7fff7138c1c55295f34f91a3003f3ecd2" translate="yes" xml:space="preserve">
          <source>To use the Inline set the queue_adapter config to &lt;code&gt;:inline&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c85bb3f433af75d0fd44ee10dd89abfc7bcf6cc1" translate="yes" xml:space="preserve">
          <source>To use the authentication system, we specify it at the top of our &lt;code&gt;ArticlesController&lt;/code&gt; in &lt;code&gt;app/controllers/articles_controller.rb&lt;/code&gt;. In our case, we want the user to be authenticated on every action except &lt;code&gt;index&lt;/code&gt; and &lt;code&gt;show&lt;/code&gt;, so we write that:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3750efae37071f6319bf02d295410aab0ccc20ec" translate="yes" xml:space="preserve">
          <source>To use the csv renderer in a controller action:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f0f37b40b3e37338bbe274234d7a5e6c3bcb135d" translate="yes" xml:space="preserve">
          <source>To use the new test runner simply type &lt;code&gt;rails test&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="80ce1d3d33bb996930297986e6c3050ecb27747f" translate="yes" xml:space="preserve">
          <source>To use the test adapter set &lt;code&gt;adapter&lt;/code&gt; value to &lt;code&gt;test&lt;/code&gt; in your &lt;code&gt;config/cable.yml&lt;/code&gt; file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e481bec70694153e7aa7954047de1caac06c9fc2" translate="yes" xml:space="preserve">
          <source>To use the test adapter set queue_adapter config to &lt;code&gt;:test&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7cf909b63cdef87788c291bfb956e81c0ecc07f9" translate="yes" xml:space="preserve">
          <source>To use the test service when testing, you add the following to &lt;code&gt;config/environments/test.rb&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98ea955b18d2b3a5365f8fa2e4739abe3c3951fe" translate="yes" xml:space="preserve">
          <source>To use this adapter, set queue adapter to &lt;code&gt;:async&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="81c857c7d69847a983fe06c67541e315571c191a" translate="yes" xml:space="preserve">
          <source>To use this configuration, create a test inside &lt;code&gt;test/system&lt;/code&gt; that inherits from &lt;code&gt;MobileSystemTestCase&lt;/code&gt;. Now you can test your app using multiple different configurations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8775ee80a19bf753d531a588ada614dc6fa75569" translate="yes" xml:space="preserve">
          <source>To use this generator, open a terminal, navigate to a directory where you have rights to create files, and type:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db2602f2d32a298873beee1cbe1cf38680278083" translate="yes" xml:space="preserve">
          <source>To use this, your client will need to make a request with JSON-encoded parameters and specify the &lt;code&gt;Content-Type&lt;/code&gt; as &lt;code&gt;application/json&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2de46ef2c7ebb33a8887eb8c5d0f157f87ebb167" translate="yes" xml:space="preserve">
          <source>To use, pass an attribute name (as string or symbol). Be sure to declare &lt;code&gt;define_attribute_method&lt;/code&gt; after you define any prefix, suffix or affix method, or they will not hook in.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc63230c58d5b21923a27d0485a76965d959d345" translate="yes" xml:space="preserve">
          <source>To use, pass attribute names (as strings or symbols). Be sure to declare &lt;code&gt;define_attribute_methods&lt;/code&gt; after you define any prefix, suffix or affix methods, or they will not hook in.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="873cf75d77dd753ab46a7e35040b692e2a17e5ea" translate="yes" xml:space="preserve">
          <source>To verify that you have everything installed correctly, you should be able to run the following:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1285ddbbd6082ff3c0815dc0e62efeb98c2016cf" translate="yes" xml:space="preserve">
          <source>To verify whether or not a particular attribute of an object is valid, you can use &lt;code&gt;errors[:attribute]&lt;/code&gt;. It returns an array of all the errors for &lt;code&gt;:attribute&lt;/code&gt;. If there are no errors on the specified attribute, an empty array is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6fbc729c716fb26282a9761b80de4f7202017c7f" translate="yes" xml:space="preserve">
          <source>To write in the current log use the &lt;code&gt;logger.(debug|info|warn|error|fatal|unknown)&lt;/code&gt; method from within a controller, model, or mailer:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e7fbc811015943c1c30e7ceeea8b05c76a8ee58" translate="yes" xml:space="preserve">
          <source>To:</source>
          <target state="translated">To:</target>
        </trans-unit>
        <trans-unit id="0a5cf543cd4d686dcf3ac6e33aedc11950b90b8c" translate="yes" xml:space="preserve">
          <source>Top-level &lt;code&gt;HashWithIndifferentAccess&lt;/code&gt; is soft-deprecated</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="10f575d9251c4dbc59e91d83151f5a50ffa87866" translate="yes" xml:space="preserve">
          <source>Total of grouped items</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="022312f469e4cf2940eea5c2774be1b0a2ff51bc" translate="yes" xml:space="preserve">
          <source>Touches all records in the current relation without instantiating records first with the &lt;code&gt;updated_at&lt;/code&gt;/&lt;code&gt;updated_on&lt;/code&gt; attributes set to the current time or the time specified. This method can be passed attribute names and an optional time argument. If attribute names are passed, they are updated along with &lt;code&gt;updated_at&lt;/code&gt;/&lt;code&gt;updated_on&lt;/code&gt; attributes. If no time argument is passed, the current time is used as default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae540dce1659c1d1aa822c4cbdb17e93f0dc5a48" translate="yes" xml:space="preserve">
          <source>Tracing Autoloads</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82d5289f6f1087b5881413ee7d99895f16e8ea68" translate="yes" xml:space="preserve">
          <source>Track both previous and current value of the changed attribute. Returns an array if changed, otherwise returns nil.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0eabbcb5df3c900b5b9056b76cbe9c7db52939eb" translate="yes" xml:space="preserve">
          <source>Track the previous value of the attribute.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6650dc39257b665514df322a12ffb3043e12d653" translate="yes" xml:space="preserve">
          <source>Track when a job was enqueued</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc1d68f19a8818a014f7f8000486ff7f3f0f6c02" translate="yes" xml:space="preserve">
          <source>Track whether the particular attribute has been changed or not.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7952082338d4b4e017572cad8a6217092afda9b8" translate="yes" xml:space="preserve">
          <source>Traditionally, when people said that they used Rails as an &quot;API&quot;, they meant providing a programmatically accessible API alongside their web application. For example, GitHub provides &lt;a href=&quot;https://developer.github.com&quot;&gt;an API&lt;/a&gt; that you can use from your own custom clients.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92cda78aedf9a7224672a0a74a47de9961784386" translate="yes" xml:space="preserve">
          <source>Transaction Callbacks</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="95acd4a389ae050d0389bc3d1f75f842a801e716" translate="yes" xml:space="preserve">
          <source>Transaction isolation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84b5f207a62cdad2712d08229eb509de9b5c38c2" translate="yes" xml:space="preserve">
          <source>Transactional Migrations</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a00edfce4dccdd473d0b5b4aa4b9431839e6d94" translate="yes" xml:space="preserve">
          <source>Transactional Tests</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e3281a962e6db2e54e787f796eb7d2b1582389a" translate="yes" xml:space="preserve">
          <source>Transactions</source>
          <target state="translated">Transactions</target>
        </trans-unit>
        <trans-unit id="270dfa7b05b65e4d6ee78138df006c68703ff066" translate="yes" xml:space="preserve">
          <source>Transactions are protective blocks where SQL statements are only permanent if they can all succeed as one atomic action. The classic example is a transfer between two accounts where you can only have a deposit if the withdrawal succeeded and vice versa. Transactions enforce the integrity of the database and guard the data against program errors or database break-downs. So basically you should use transaction blocks whenever you have a number of statements that must be executed together or not at all.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38e996af47c2368fdbb151ed9844e2d4f71df67d" translate="yes" xml:space="preserve">
          <source>Transactions::ClassMethods</source>
          <target state="translated">Transactions::ClassMethods</target>
        </trans-unit>
        <trans-unit id="2a84a05169c2f3e4d6a1d7045a581c88b7430fce" translate="yes" xml:space="preserve">
          <source>Transactions::ClassMethods#after_commit</source>
          <target state="translated">Transactions::ClassMethods#after_commit</target>
        </trans-unit>
        <trans-unit id="acbf0cbda9bc720f3ef4a97b33b7696783161277" translate="yes" xml:space="preserve">
          <source>Transactions::ClassMethods#after_create_commit</source>
          <target state="translated">Transactions::ClassMethods#after_create_commit</target>
        </trans-unit>
        <trans-unit id="b0030800dee0f15a62044c09afa3fb2b628ce2c6" translate="yes" xml:space="preserve">
          <source>Transactions::ClassMethods#after_destroy_commit</source>
          <target state="translated">Transactions::ClassMethods#after_destroy_commit</target>
        </trans-unit>
        <trans-unit id="801a0b3236661b839fc0a038020be43381351c68" translate="yes" xml:space="preserve">
          <source>Transactions::ClassMethods#after_rollback</source>
          <target state="translated">Transactions::ClassMethods#after_rollback</target>
        </trans-unit>
        <trans-unit id="baa3610af3e4304f396e9764c6cb826da966e595" translate="yes" xml:space="preserve">
          <source>Transactions::ClassMethods#after_save_commit</source>
          <target state="translated">Transactions::ClassMethods#after_save_commit</target>
        </trans-unit>
        <trans-unit id="0270461fea9c66564f7a254959fb51e5e3a6cc9d" translate="yes" xml:space="preserve">
          <source>Transactions::ClassMethods#after_update_commit</source>
          <target state="translated">Transactions::ClassMethods#after_update_commit</target>
        </trans-unit>
        <trans-unit id="bab7d9a3a43c06b0404aa40dff8874797553fbf9" translate="yes" xml:space="preserve">
          <source>Transactions::ClassMethods#transaction</source>
          <target state="translated">Transactions::ClassMethods#transaction</target>
        </trans-unit>
        <trans-unit id="68c317b8b642e4941db4a5d8067bb3406ffbda72" translate="yes" xml:space="preserve">
          <source>Transform the model name into a more human format, using I18n. By default, it will underscore then humanize the class name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1a5f09e5a6f5a362edfb0ba9e56cc9962e60e03" translate="yes" xml:space="preserve">
          <source>Transformers::Transformer</source>
          <target state="translated">Transformers::Transformer</target>
        </trans-unit>
        <trans-unit id="6c5f528c2a7bc72201870dcef72ffbe0cdc3fff8" translate="yes" xml:space="preserve">
          <source>Transformers::Transformer#process</source>
          <target state="translated">Transformers::Transformer#process</target>
        </trans-unit>
        <trans-unit id="712ae41fc53fcc53fb6bc77f5e1f3c26bf682305" translate="yes" xml:space="preserve">
          <source>Transformers::Transformer#transform</source>
          <target state="translated">Transformers::Transformer#transform</target>
        </trans-unit>
        <trans-unit id="448c20e676f6e539a81309bdcb9680320cf14d0a" translate="yes" xml:space="preserve">
          <source>Transformers::Transformer#transformations</source>
          <target state="translated">Transformers::Transformer#transformations</target>
        </trans-unit>
        <trans-unit id="83cce67c3bfd7dab546d2d1ec6c3a8117035395c" translate="yes" xml:space="preserve">
          <source>Transformers::Transformer::new</source>
          <target state="translated">Transformers::Transformer::new</target>
        </trans-unit>
        <trans-unit id="741ef17a1a9e0bbed6465fd207e9b13dfc50cd2d" translate="yes" xml:space="preserve">
          <source>Transforming Images</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbc65aff8daf8c3789a28da57b533aed205bdbd8" translate="yes" xml:space="preserve">
          <source>Transforms attribute names into a more human format, such as &amp;ldquo;First name&amp;rdquo; instead of &amp;ldquo;first_name&amp;rdquo;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ada596db991c7089250e37cf5f2573c952122c7d" translate="yes" xml:space="preserve">
          <source>Translated Paths</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f5191448f501cba2ff1cf27dfb0c8dcff629095" translate="yes" xml:space="preserve">
          <source>Translates an error message in its default scope (&lt;code&gt;activemodel.errors.messages&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42776285f240d676b2502e1ff1fabc97b2bba5b3" translate="yes" xml:space="preserve">
          <source>Translates the &lt;code&gt;subject&lt;/code&gt; using Rails I18n class under &lt;code&gt;[mailer_scope, action_name]&lt;/code&gt; scope. If it does not find a translation for the &lt;code&gt;subject&lt;/code&gt; under the specified scope it will default to a humanized version of the &lt;code&gt;action_name&lt;/code&gt;. If the subject has interpolations, you can pass them through the &lt;code&gt;interpolations&lt;/code&gt; parameter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="451243e728b090f06ea2905406617e392e05f974" translate="yes" xml:space="preserve">
          <source>Translating Model Content</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac26a7a94ea2e66490f932b6415a09ef6f2a913c" translate="yes" xml:space="preserve">
          <source>Translation</source>
          <target state="translated">Translation</target>
        </trans-unit>
        <trans-unit id="1da446c621416aed5e89e23280ee0dee5502a10e" translate="yes" xml:space="preserve">
          <source>Translation#human_attribute_name</source>
          <target state="translated">Translation#human_attribute_name</target>
        </trans-unit>
        <trans-unit id="cfd2977e6d37f586290990b52509fff595b9206a" translate="yes" xml:space="preserve">
          <source>Translation#i18n_scope</source>
          <target state="translated">Translation#i18n_scope</target>
        </trans-unit>
        <trans-unit id="bbcb54e4fece5d63d168777ded2dbf56c7955264" translate="yes" xml:space="preserve">
          <source>Translation#l</source>
          <target state="translated">Translation#l</target>
        </trans-unit>
        <trans-unit id="a8e462e8b6b6581114df95ae2b2ad84e9e9dbb43" translate="yes" xml:space="preserve">
          <source>Translation#localize</source>
          <target state="translated">Translation#localize</target>
        </trans-unit>
        <trans-unit id="cae63062268efd18edcab78113cd64c60f168461" translate="yes" xml:space="preserve">
          <source>Translation#lookup_ancestors</source>
          <target state="translated">Translation#lookup_ancestors</target>
        </trans-unit>
        <trans-unit id="6b766b011404e22667100c4991f00a7b14ff6db0" translate="yes" xml:space="preserve">
          <source>Translation#t</source>
          <target state="translated">Translation#t</target>
        </trans-unit>
        <trans-unit id="2e3fe21781b2c4b0f228341cf66372b1c7a9ea67" translate="yes" xml:space="preserve">
          <source>Translation#translate</source>
          <target state="translated">Translation#translate</target>
        </trans-unit>
        <trans-unit id="5207e6b5769fe3f227e176eb6b6a97ced9ce6dff" translate="yes" xml:space="preserve">
          <source>Translations are looked up by keys which can be both Symbols or Strings, so these calls are equivalent:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c365f2b247782e821ad585bd66f22f34f0b7939" translate="yes" xml:space="preserve">
          <source>Translations for Action Mailer E-Mail Subjects</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b434ddd996dd8df0569be77900d2b06e26fafa2f" translate="yes" xml:space="preserve">
          <source>Translations for Active Record Models</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="588983786c2ebc0b3412d0182f08796e220a36a0" translate="yes" xml:space="preserve">
          <source>Transliteration is restricted to UTF-8, US-ASCII and GB18030 strings Other encodings will raise an ArgumentError.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6230f283c922a3fd41da712237a699a19a2d9312" translate="yes" xml:space="preserve">
          <source>Transmit a hash of data to the subscriber. The hash will automatically be wrapped in a JSON envelope with the proper channel identifier marked as the recipient.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b035d9862f906227381e58258979f84224681f6" translate="yes" xml:space="preserve">
          <source>Tries to create a new record with the same scoped attributes defined in the relation. Returns the initialized object if validation fails.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83961326424f9a7272aca3321be90cbfe594de7a" translate="yes" xml:space="preserve">
          <source>Tries to find a constant with the name specified in the argument string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8461928898bbc3cebe9fb6d033e453ccd41aad0e" translate="yes" xml:space="preserve">
          <source>Tries to get the description from a USAGE file one folder above the command root.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa092bf41414cbc1443e40799908b7ce0c0ddf7d" translate="yes" xml:space="preserve">
          <source>Tries to get the description from a USAGE file one folder above the source root otherwise uses a default description.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6f8e660762e2cb553d1eb746cdd150b447dbe3e" translate="yes" xml:space="preserve">
          <source>Tries to retrieve the application name or simply return application.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d6de1bee1185f778a232930344f458d671e7f96" translate="yes" xml:space="preserve">
          <source>Trix compared to other rich text editors</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0829f6055ca9f0bf1c12d891f066ae7593340e97" translate="yes" xml:space="preserve">
          <source>Trix sidesteps these inconsistencies by treating contenteditable as an I/O device: when input makes its way to the editor, Trix converts that input into an editing operation on its internal document model, then re-renders that document back into the editor. This gives Trix complete control over what happens after every keystroke, and avoids the need to use execCommand at all.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="285ec850c11d78bac10f6bfa31b69a37f1b257c9" translate="yes" xml:space="preserve">
          <source>Troubleshooting</source>
          <target state="translated">Troubleshooting</target>
        </trans-unit>
        <trans-unit id="0ccf79d25e402d20be8d38fefc4a68a4f34dab9f" translate="yes" xml:space="preserve">
          <source>True if an ETag is set and it isn't a weak validator (not preceded with W/)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f999dce782ba950dccd6235342c05c3ed0f68323" translate="yes" xml:space="preserve">
          <source>True if an ETag is set and it's a weak validator (preceded with W/)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="42f070ece09be8113ce2504be6379a421a9a277b" translate="yes" xml:space="preserve">
          <source>True if the current request URI was generated by the given &lt;code&gt;options&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a1dda8798f23498a695ab6ea87125795e7cebf75" translate="yes" xml:space="preserve">
          <source>True if the request came from localhost, 127.0.0.1, or ::1.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a88ea7cfcdafcd734a5e64234ba924227207df8c" translate="yes" xml:space="preserve">
          <source>TrueClass</source>
          <target state="translated">TrueClass</target>
        </trans-unit>
        <trans-unit id="716f32804687a13f07883955aa2fe0d069a60866" translate="yes" xml:space="preserve">
          <source>Truncates &lt;code&gt;text&lt;/code&gt; to at most &lt;code&gt;bytesize&lt;/code&gt; bytes in length without breaking string encoding by splitting multibyte characters or breaking grapheme clusters (&amp;ldquo;perceptual characters&amp;rdquo;) by truncating at combining characters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="229c72321fcef0654c5eb45ca3554249950cdd39" translate="yes" xml:space="preserve">
          <source>Truncates a given &lt;code&gt;text&lt;/code&gt; after a given &lt;code&gt;:length&lt;/code&gt; if &lt;code&gt;text&lt;/code&gt; is longer than &lt;code&gt;:length&lt;/code&gt; (defaults to 30). The last characters will be replaced with the &lt;code&gt;:omission&lt;/code&gt; (defaults to &amp;ldquo;&amp;hellip;&amp;rdquo;) for a total length not exceeding &lt;code&gt;:length&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9c9efe5cb7cb8c1ee33987116b845efc87ad9149" translate="yes" xml:space="preserve">
          <source>Truncates a given &lt;code&gt;text&lt;/code&gt; after a given &lt;code&gt;length&lt;/code&gt; if &lt;code&gt;text&lt;/code&gt; is longer than &lt;code&gt;length&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="85f9db5f5d445b422cbffa33c28686e2fa06af9f" translate="yes" xml:space="preserve">
          <source>Truncates a given &lt;code&gt;text&lt;/code&gt; after a given number of words (&lt;code&gt;words_count&lt;/code&gt;):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db23ca36a73ab9b9a56a247e534891b0c32ca1e7" translate="yes" xml:space="preserve">
          <source>Truncates a table alias according to the limits of the current adapter.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b9d33ec4e682f118e01ef0c2b353843b7bf12f0" translate="yes" xml:space="preserve">
          <source>Try this now by creating a new file at &lt;code&gt;app/views/blorgh/articles/index.html.erb&lt;/code&gt; and put this content in it:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="918efeb2e8025ca4630caf3e29c7dae9e380980d" translate="yes" xml:space="preserve">
          <source>Turbolinks</source>
          <target state="translated">Turbolinks</target>
        </trans-unit>
        <trans-unit id="5a4a18da00fa2f7a7985c559eafc6f9d59f51e3a" translate="yes" xml:space="preserve">
          <source>Turbolinks attaches a click handler to all &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; tags on the page. If your browser supports &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Guide/API/DOM/Manipulating_the_browser_history#The_pushState%28%29_method&quot;&gt;PushState&lt;/a&gt;, Turbolinks will make an Ajax request for the page, parse the response, and replace the entire &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; of the page with the &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; of the response. It will then use PushState to change the URL to the correct one, preserving refresh semantics and giving you pretty URLs.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f75f7fa5b73752d097b071127bbdf41bf30d3520" translate="yes" xml:space="preserve">
          <source>Turn off request forgery protection. This is a wrapper for:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89d848b3296473ec08bb3d7a7a0ffdd09335a7d0" translate="yes" xml:space="preserve">
          <source>Turn on request forgery protection. Bear in mind that GET and HEAD requests are not checked.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a90d2006baab2ca930929e2fbd1668398a7d807" translate="yes" xml:space="preserve">
          <source>Turning Debugging Off</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="721957126d5094366b6c74ad4aa234e718a87a40" translate="yes" xml:space="preserve">
          <source>Turning Digests Off</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3d07f364049a6501b9c51135e874de6226fe9f4" translate="yes" xml:space="preserve">
          <source>Turning the model into this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b996a8c15dfca44529c2b9e029ff080374b18979" translate="yes" xml:space="preserve">
          <source>Turns a number into an ordinal string used to denote the position in an ordered sequence such as 1st, 2nd, 3rd, 4th.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1446fccd880899c1483d7710d37fe0d152a45920" translate="yes" xml:space="preserve">
          <source>Turns the &lt;a href=&quot;response&quot;&gt;Response&lt;/a&gt; into a Rack-compatible array of the status, headers, and body. Allows explicit splatting:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e3205860e2b0e7f5105c43a5ca3d1319a0e9bbe" translate="yes" xml:space="preserve">
          <source>Tweaks an attribute name for display to end users.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a1b1a3e57333daa9389b56a7e6d0492592324de" translate="yes" xml:space="preserve">
          <source>Two commands allow you to open code from the debugger into an editor:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f44bcfdfa9e186456ae325a9ebb2be5aaf91a2e2" translate="yes" xml:space="preserve">
          <source>Two controllers can share a set of partials and render them like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11e102f73a14fd5e563e62a3454880aa08cd4378" translate="yes" xml:space="preserve">
          <source>Two hooks are provided, one runs when the process is forked, and one runs before the forked process is closed. These can be useful if your app uses multiple databases or perform other tasks that depend on the number of workers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a74518314cc6a3e80c7c90c435dfc986a510668" translate="yes" xml:space="preserve">
          <source>Two methods are provided: &lt;code&gt;take_screenshot&lt;/code&gt; and &lt;code&gt;take_failed_screenshot&lt;/code&gt;. &lt;code&gt;take_failed_screenshot&lt;/code&gt; is automatically included in &lt;code&gt;after_teardown&lt;/code&gt; inside Rails.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27050ab54586a24372500c9eaa4d9adf614024f1" translate="yes" xml:space="preserve">
          <source>Two new scrubbers have also been added: &lt;code&gt;PermitScrubber&lt;/code&gt; and &lt;code&gt;TargetScrubber&lt;/code&gt;. Read the &lt;a href=&quot;https://github.com/rails/rails-html-sanitizer&quot;&gt;gem's readme&lt;/a&gt; for more information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a9e39c5aa23c594ae6bea7989e8327747001649" translate="yes" xml:space="preserve">
          <source>Two of these symbols are special, &lt;code&gt;:controller&lt;/code&gt; maps to the controller and &lt;code&gt;:action&lt;/code&gt; to the controller's action. A pattern can also map wildcard segments (globs) to params:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8d951020529e23a2f164edce4c02b22dab9447c9" translate="yes" xml:space="preserve">
          <source>Two very common sources of data that are not UTF-8:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60b4aa8f0c6f7bfd3e77f4c18be637a857d7754a" translate="yes" xml:space="preserve">
          <source>Type casts a value from user input (e.g. from a setter). This value may be a string from the form builder, or a ruby object passed to a setter. There is currently no way to differentiate between which source it came from.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d03e84fa5cbd437c7599591870ecfbc248a0cc7e" translate="yes" xml:space="preserve">
          <source>Type safety with &lt;a href=&quot;../associationtypemismatch&quot;&gt;ActiveRecord::AssociationTypeMismatch&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70eedd6be67bed3e5278fff0d3fbc3e782940c60" translate="yes" xml:space="preserve">
          <source>Type#==</source>
          <target state="translated">Type#==</target>
        </trans-unit>
        <trans-unit id="e253330b0e19f451958206d78e4201bb54107783" translate="yes" xml:space="preserve">
          <source>Type#===</source>
          <target state="translated">Type#===</target>
        </trans-unit>
        <trans-unit id="d5151a313bbdd168fba277ae194d0a2e01572f08" translate="yes" xml:space="preserve">
          <source>Type#=~</source>
          <target state="translated">Type#=~</target>
        </trans-unit>
        <trans-unit id="7a58f8047699658c3f943af46d9311c93d3ba721" translate="yes" xml:space="preserve">
          <source>Type#all?</source>
          <target state="translated">Type#all?</target>
        </trans-unit>
        <trans-unit id="cac32e745fced6d7b3fac342ea0f2fdd6f3a6116" translate="yes" xml:space="preserve">
          <source>Type#eql?</source>
          <target state="translated">Type#eql?</target>
        </trans-unit>
        <trans-unit id="513d32ab592de9da104c543b01edd5b70971d99e" translate="yes" xml:space="preserve">
          <source>Type#hash</source>
          <target state="translated">Type#hash</target>
        </trans-unit>
        <trans-unit id="21bca60bb03cf0fdafe70c2ea69a4465e887d7db" translate="yes" xml:space="preserve">
          <source>Type#html?</source>
          <target state="translated">Type#html?</target>
        </trans-unit>
        <trans-unit id="47446a7cc32e1afcb0934f1bdbcd6d63ddde1724" translate="yes" xml:space="preserve">
          <source>Type#ref</source>
          <target state="translated">Type#ref</target>
        </trans-unit>
        <trans-unit id="f800af5354c3b0e7abb9acd147c84290df77f929" translate="yes" xml:space="preserve">
          <source>Type#string</source>
          <target state="translated">Type#string</target>
        </trans-unit>
        <trans-unit id="e131db716ae84bcdcddbb105b2589f219a22e201" translate="yes" xml:space="preserve">
          <source>Type#symbol</source>
          <target state="translated">Type#symbol</target>
        </trans-unit>
        <trans-unit id="f0170a989fe95f1fc94ce242cc662e51d0b0b27a" translate="yes" xml:space="preserve">
          <source>Type#synonyms</source>
          <target state="translated">Type#synonyms</target>
        </trans-unit>
        <trans-unit id="4e3fc6d8bf8f360412d16805036f06a6d2b58d67" translate="yes" xml:space="preserve">
          <source>Type#to_s</source>
          <target state="translated">Type#to_s</target>
        </trans-unit>
        <trans-unit id="e08bc36e3be91892e9cd4c65242ee620a68c889d" translate="yes" xml:space="preserve">
          <source>Type#to_str</source>
          <target state="translated">Type#to_str</target>
        </trans-unit>
        <trans-unit id="40251e498cade26feba7eebb0b8e48a1092b22db" translate="yes" xml:space="preserve">
          <source>Type#to_sym</source>
          <target state="translated">Type#to_sym</target>
        </trans-unit>
        <trans-unit id="6ed52ae83d714f0aedeedb5a8e281c6c6435132c" translate="yes" xml:space="preserve">
          <source>Type::Boolean</source>
          <target state="translated">Type::Boolean</target>
        </trans-unit>
        <trans-unit id="55a02481631d24d704a514ac5099b4d22142ffd3" translate="yes" xml:space="preserve">
          <source>Type::Value</source>
          <target state="translated">Type::Value</target>
        </trans-unit>
        <trans-unit id="cefe33cf5d55722ccc1aa0755e83175b11681d85" translate="yes" xml:space="preserve">
          <source>Type::Value#==</source>
          <target state="translated">Type::Value#==</target>
        </trans-unit>
        <trans-unit id="faa5ad48f972d3d4d4ca4e2cbbae4699a93d96d1" translate="yes" xml:space="preserve">
          <source>Type::Value#assert_valid_value</source>
          <target state="translated">Type::Value#assert_valid_value</target>
        </trans-unit>
        <trans-unit id="6c0aff9be5d9179659e8af1583f91360c9bcd9ea" translate="yes" xml:space="preserve">
          <source>Type::Value#cast</source>
          <target state="translated">Type::Value#cast</target>
        </trans-unit>
        <trans-unit id="7cf4282cae829eb3975d0ba7d60311fe81083e4c" translate="yes" xml:space="preserve">
          <source>Type::Value#cast_value</source>
          <target state="translated">Type::Value#cast_value</target>
        </trans-unit>
        <trans-unit id="a7e3c3db61c8d5865de3fe60f82873fae7c8d19f" translate="yes" xml:space="preserve">
          <source>Type::Value#changed?</source>
          <target state="translated">Type::Value#changed?</target>
        </trans-unit>
        <trans-unit id="19d0050c341c48152d8ec6a0605bf19b16732ef4" translate="yes" xml:space="preserve">
          <source>Type::Value#changed_in_place?</source>
          <target state="translated">Type::Value#changed_in_place?</target>
        </trans-unit>
        <trans-unit id="8c7c8315b671fff22506155d7b916ece65e458ad" translate="yes" xml:space="preserve">
          <source>Type::Value#deserialize</source>
          <target state="translated">Type::Value#deserialize</target>
        </trans-unit>
        <trans-unit id="1d45f9ccf86ef634727640e87dce569c21f5223b" translate="yes" xml:space="preserve">
          <source>Type::Value#eql?</source>
          <target state="translated">Type::Value#eql?</target>
        </trans-unit>
        <trans-unit id="b5a97a89e656338242619c663ee4c50a04b5607e" translate="yes" xml:space="preserve">
          <source>Type::Value#hash</source>
          <target state="translated">Type::Value#hash</target>
        </trans-unit>
        <trans-unit id="bb2041821d9527ec17636b705d6e6070bff77f49" translate="yes" xml:space="preserve">
          <source>Type::Value#limit</source>
          <target state="translated">Type::Value#limit</target>
        </trans-unit>
        <trans-unit id="0f8aca54515e88e6aaef8facd5ba68c965e80ad6" translate="yes" xml:space="preserve">
          <source>Type::Value#precision</source>
          <target state="translated">Type::Value#precision</target>
        </trans-unit>
        <trans-unit id="18c1701f42c2beb5a0b96a34c1e96be08b9db92b" translate="yes" xml:space="preserve">
          <source>Type::Value#scale</source>
          <target state="translated">Type::Value#scale</target>
        </trans-unit>
        <trans-unit id="3974fa80caaa3040083289520f7c71d78309a104" translate="yes" xml:space="preserve">
          <source>Type::Value#serialize</source>
          <target state="translated">Type::Value#serialize</target>
        </trans-unit>
        <trans-unit id="fc3d927851dafa40adf395bbfc372cadaaf14511" translate="yes" xml:space="preserve">
          <source>Type::Value::new</source>
          <target state="translated">Type::Value::new</target>
        </trans-unit>
        <trans-unit id="3577c9f58f179a7b52913fff7af3a82b48c1856a" translate="yes" xml:space="preserve">
          <source>Type::lookup</source>
          <target state="translated">Type::lookup</target>
        </trans-unit>
        <trans-unit id="6f6ef7e26ed165521133a28497bb7c7a4447d35d" translate="yes" xml:space="preserve">
          <source>Type::lookup_by_extension</source>
          <target state="translated">Type::lookup_by_extension</target>
        </trans-unit>
        <trans-unit id="7fabc23c2c0529c94ca05853b970db98539529f8" translate="yes" xml:space="preserve">
          <source>Type::new</source>
          <target state="translated">Type::new</target>
        </trans-unit>
        <trans-unit id="d545ac43d0a1752f254503fc1d584aefc5003c79" translate="yes" xml:space="preserve">
          <source>Type::parse</source>
          <target state="translated">Type::parse</target>
        </trans-unit>
        <trans-unit id="61605c38ebf720cabfe9107cb208c7baada914ef" translate="yes" xml:space="preserve">
          <source>Type::parse_data_with_trailing_star</source>
          <target state="translated">Type::parse_data_with_trailing_star</target>
        </trans-unit>
        <trans-unit id="d66593b5c5c35064b800b52c1ff715082ce19097" translate="yes" xml:space="preserve">
          <source>Type::parse_trailing_star</source>
          <target state="translated">Type::parse_trailing_star</target>
        </trans-unit>
        <trans-unit id="05513a01e5697e5651dc6d679724a5964bd6cac3" translate="yes" xml:space="preserve">
          <source>Type::register</source>
          <target state="translated">Type::register</target>
        </trans-unit>
        <trans-unit id="7987f11e625d678759427fa50fdbff80a8c9765e" translate="yes" xml:space="preserve">
          <source>Type::register_alias</source>
          <target state="translated">Type::register_alias</target>
        </trans-unit>
        <trans-unit id="5c96ed588fc02ab74c08dd741eba090b2e184c1e" translate="yes" xml:space="preserve">
          <source>Type::register_callback</source>
          <target state="translated">Type::register_callback</target>
        </trans-unit>
        <trans-unit id="2b347d24136f70387e62deaf0bac4399892d3fef" translate="yes" xml:space="preserve">
          <source>Type::unregister</source>
          <target state="translated">Type::unregister</target>
        </trans-unit>
        <trans-unit id="1feacabb18c28e13a3223b47ffab3264d9a9e217" translate="yes" xml:space="preserve">
          <source>Typecasted bind parameters</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="53cd1974e6d6c2e75c56c16edc2e858959717c41" translate="yes" xml:space="preserve">
          <source>Types are autoloaded as needed. For example, if &lt;code&gt;Polygon.first&lt;/code&gt; is a rectangle and &lt;code&gt;Rectangle&lt;/code&gt; has not yet been loaded, Active Record autoloads it and the record is correctly instantiated.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3aa5d9093670a17ac027519a74e11368f6b450cf" translate="yes" xml:space="preserve">
          <source>Types of Schema Dumps</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5f1c2301fbfd8c3a40fe45fc272c4c99db2a2ffb" translate="yes" xml:space="preserve">
          <source>Types of callbacks</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64eae8a8ff4eede77761ede521e3e8267797dda0" translate="yes" xml:space="preserve">
          <source>Types of layouts</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="306957293a5e5f5c4043ed13afd00c6ca6dd9828" translate="yes" xml:space="preserve">
          <source>Typically, a form designed to create or update a resource reflects the identity of the resource in several ways: (i) the URL that the form is sent to (the form element's &lt;code&gt;action&lt;/code&gt; attribute) should result in a request being routed to the appropriate controller action (with the appropriate &lt;code&gt;:id&lt;/code&gt; parameter in the case of an existing resource), (ii) input fields should be named in such a way that in the controller their values appear in the appropriate places within the &lt;code&gt;params&lt;/code&gt; hash, and (iii) for an existing record, when the form is initially displayed, input fields corresponding to attributes of the resource should show the current values of those attributes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3d00e0d2dda9ad7a33716397137a8bf6cba04ed" translate="yes" xml:space="preserve">
          <source>Typically, you will instantiate a new session using IntegrationTest#open_session, rather than instantiating &lt;a href=&quot;session&quot;&gt;Integration::Session&lt;/a&gt; directly.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a22641b9fc9c9910a6cdbff4d4c69eb3d13192f7" translate="yes" xml:space="preserve">
          <source>UNICODE_VERSION</source>
          <target state="translated">UNICODE_VERSION</target>
        </trans-unit>
        <trans-unit id="b296e0d65d77d85f051e6120bc2bc5c312d75daf" translate="yes" xml:space="preserve">
          <source>UNIQUE_VIOLATION</source>
          <target state="translated">UNIQUE_VIOLATION</target>
        </trans-unit>
        <trans-unit id="ecf6935551740f32426d106a5d0859eb03b85cea" translate="yes" xml:space="preserve">
          <source>UNIVERSAL_OPTIONS</source>
          <target state="translated">UNIVERSAL_OPTIONS</target>
        </trans-unit>
        <trans-unit id="2765f56ff22ae032d9156af82bdb05fbcf2fe0b5" translate="yes" xml:space="preserve">
          <source>URI_REGEXP</source>
          <target state="translated">URI_REGEXP</target>
        </trans-unit>
        <trans-unit id="d8b1d74794e482364b89230c6c1a7a3ed552c390" translate="yes" xml:space="preserve">
          <source>URL Generation: The flip side of routing is URL generation. A good API based on HTTP includes URLs (see &lt;a href=&quot;https://developer.github.com/v3/gists/&quot;&gt;the GitHub Gist API&lt;/a&gt; for an example).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="276a71602ff7a982b823d0e2189710373a95484b" translate="yes" xml:space="preserve">
          <source>URL generation for named routes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b7ebf9fda9ab546056939feaf89320d2f22f9a0" translate="yes" xml:space="preserve">
          <source>URL generation from parameters</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd4e02965b295f6181cb637b78ec0a6f5258e6f5" translate="yes" xml:space="preserve">
          <source>URL to redirect to</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d3912a8c2b4f9ccd4590912a211c1fb37602b02" translate="yes" xml:space="preserve">
          <source>URL_OPTIONS</source>
          <target state="translated">URL_OPTIONS</target>
        </trans-unit>
        <trans-unit id="3c3c17d0516c69d6695ab1fcc55b7460ff094916" translate="yes" xml:space="preserve">
          <source>URLs can be generated in mailer views using &lt;code&gt;url_for&lt;/code&gt; or named routes. Unlike controllers from Action Pack, the mailer instance doesn't have any context about the incoming request, so you'll need to provide all of the details needed to generate a URL.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="304c11c5b012328b4cbe99b4a1ca85729b62dd52" translate="yes" xml:space="preserve">
          <source>USE_AUTHENTICATED_COOKIE_ENCRYPTION</source>
          <target state="translated">USE_AUTHENTICATED_COOKIE_ENCRYPTION</target>
        </trans-unit>
        <trans-unit id="3a6c69dd5faf1bd4fbbe76b7551d2d73518abc1a" translate="yes" xml:space="preserve">
          <source>USE_COOKIES_WITH_METADATA</source>
          <target state="translated">USE_COOKIES_WITH_METADATA</target>
        </trans-unit>
        <trans-unit id="21bf75a5255af008f6315cb6aca4bb3bdccee521" translate="yes" xml:space="preserve">
          <source>UUID</source>
          <target state="translated">UUID</target>
        </trans-unit>
        <trans-unit id="58a48be00fb22fa73f24a8d12dad3179d27be081" translate="yes" xml:space="preserve">
          <source>UUID Primary Keys</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="021e81d8648661e31cc6e51e1189b6f09047d4d5" translate="yes" xml:space="preserve">
          <source>UUID::uuid_from_hash</source>
          <target state="translated">UUID::uuid_from_hash</target>
        </trans-unit>
        <trans-unit id="b94798dd5e5504b3623f44686fd5bf2ac50ced13" translate="yes" xml:space="preserve">
          <source>UUID::uuid_v3</source>
          <target state="translated">UUID::uuid_v3</target>
        </trans-unit>
        <trans-unit id="c782a4bef4c1f7a1ea4624387e03a6e7c7f13c37" translate="yes" xml:space="preserve">
          <source>UUID::uuid_v4</source>
          <target state="translated">UUID::uuid_v4</target>
        </trans-unit>
        <trans-unit id="37b07911c467d4abe28dca941f852b09fa148875" translate="yes" xml:space="preserve">
          <source>UUID::uuid_v5</source>
          <target state="translated">UUID::uuid_v5</target>
        </trans-unit>
        <trans-unit id="2000fecb3a1caaf67afb388ca9c64a08f82d78ff" translate="yes" xml:space="preserve">
          <source>Unbound methods are not duplicable:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea18adfa28d13e37ee806750a0df3ce347f3cff9" translate="yes" xml:space="preserve">
          <source>UnboundMethod</source>
          <target state="translated">UnboundMethod</target>
        </trans-unit>
        <trans-unit id="d5e36a93eb4d9ef9d780b4e4e3eb287f9e7ddcbe" translate="yes" xml:space="preserve">
          <source>Under certain circumstances this would present the malicious HTML to the victim. However, this only seems to work with Keep-Alive connections (and many browsers are using one-time connections). But you can't rely on this. &lt;em&gt;In any case this is a serious bug, and you should update your Rails to version 2.0.5 or 2.1.2 to eliminate Header Injection (and thus response splitting) risks.&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a0ad6d65b92b9f3641e86d1bd8b6d7c694ca0bc2" translate="yes" xml:space="preserve">
          <source>Under normal circumstances the default &lt;code&gt;config.assets.digest&lt;/code&gt; option should not be changed. If there are no digests in the filenames, and far-future headers are set, remote clients will never know to refetch the files when their content changes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="979c53e0a63d64498379e54d5ec41239a5d62d51" translate="yes" xml:space="preserve">
          <source>Under the covers, this relationship is implemented as a &lt;code&gt;has_many&lt;/code&gt; association to a &lt;a href=&quot;../attachment&quot;&gt;ActiveStorage::Attachment&lt;/a&gt; record and a &lt;code&gt;has_many-through&lt;/code&gt; association to a &lt;a href=&quot;../blob&quot;&gt;ActiveStorage::Blob&lt;/a&gt; record. These associations are available as &lt;code&gt;photos_attachments&lt;/code&gt; and &lt;code&gt;photos_blobs&lt;/code&gt;. But you shouldn't need to work with these associations directly in most circumstances.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d0dfa8881b0933f23273353d3fc54d3f993619d5" translate="yes" xml:space="preserve">
          <source>Under the covers, this relationship is implemented as a &lt;code&gt;has_one&lt;/code&gt; association to a &lt;a href=&quot;../attachment&quot;&gt;ActiveStorage::Attachment&lt;/a&gt; record and a &lt;code&gt;has_one-through&lt;/code&gt; association to a &lt;a href=&quot;../blob&quot;&gt;ActiveStorage::Blob&lt;/a&gt; record. These associations are available as &lt;code&gt;avatar_attachment&lt;/code&gt; and &lt;code&gt;avatar_blob&lt;/code&gt;. But you shouldn't need to work with these associations directly in most circumstances.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5ea37943946c1a2d58797561f1bc7d382ebb6f7" translate="yes" xml:space="preserve">
          <source>Understanding &lt;code&gt;yield&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5796618103c03fb0bd0dae7ab9cb0306de669eab" translate="yes" xml:space="preserve">
          <source>Understanding Middlewares</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83ad114002c4850a875263e2823d8278257f5782" translate="yes" xml:space="preserve">
          <source>Understanding Parameter Naming Conventions</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f88769326773fa7aeb7457b71fc4f0a127d26859" translate="yes" xml:space="preserve">
          <source>Understanding The Method Chaining</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="563be52e5a36ed2f3d1c023ae0efdeefd5cdd59b" translate="yes" xml:space="preserve">
          <source>Unescapes bytea output from a database to the binary string it represents. NOTE: This is NOT an inverse of &lt;a href=&quot;quoting#method-i-escape_bytea&quot;&gt;#escape_bytea&lt;/a&gt;! This is only to be used on escaped binary output from database drive.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7d1a730dd8928742f355234b8f0cbd8dc71e967b" translate="yes" xml:space="preserve">
          <source>Unfortunately Rails autoloading does not know the nesting in the spot where the constant was missing and so it is not able to act as Ruby would. In particular, &lt;code&gt;Admin::User&lt;/code&gt; will get autoloaded in either case.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ddd02f51727327e3f5b4ba274b09305dc204d056" translate="yes" xml:space="preserve">
          <source>Unfortunately that workaround does not work when the check box goes within an array-like parameter, as in</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa4c1858289a6a0201b436aab1c15577cd0ab1d5" translate="yes" xml:space="preserve">
          <source>Unfortunately this won't work, since when &lt;code&gt;Foo&lt;/code&gt; is included, its &lt;code&gt;base&lt;/code&gt; is the &lt;code&gt;Bar&lt;/code&gt; module, not the &lt;code&gt;Host&lt;/code&gt; class. With &lt;code&gt;ActiveSupport::Concern&lt;/code&gt;, module dependencies are properly resolved:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8a2ae1bb3af7b7bdfd514223e02bbd22a88dc76d" translate="yes" xml:space="preserve">
          <source>Unicode character routes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6fe0c87681010662cf422daf78146c3b0400e1a2" translate="yes" xml:space="preserve">
          <source>Unicode whitespace is supported:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c04888dcb0aeb3a9fb64735c366d3fcba247df66" translate="yes" xml:space="preserve">
          <source>Unicorn</source>
          <target state="translated">Unicorn</target>
        </trans-unit>
        <trans-unit id="dab32b9631850cb2c080a8c1c70ab95d976d2be6" translate="yes" xml:space="preserve">
          <source>Unicorn supports streaming but it needs to be configured. For this, you need to create a config file as follow:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf8719e9da213bcad0a2fe349d1f8f9f739c1793" translate="yes" xml:space="preserve">
          <source>Unique indexes can be identified by columns or name:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="438d23452047f4defac8e18aecae37372fcea335" translate="yes" xml:space="preserve">
          <source>Unit Testing</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8edb8bca8eec90529e5cf5ed945cc70ec2e5f3c6" translate="yes" xml:space="preserve">
          <source>Unit test Action Cable connections.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="280d5622079a1771bd9e5368f811959d15abfb04" translate="yes" xml:space="preserve">
          <source>Unit testing allows us to test the attributes of the email while functional and system testing allows us to test whether user interactions appropriately trigger the email to be delivered. For example, you can check that the invite friend operation is sending an email appropriately:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ed33368b6004fce86600d3d398ff6212dd36618" translate="yes" xml:space="preserve">
          <source>Unit tests are written as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7939729166ceaf4af03afc6e3d4c365637c2ae6" translate="yes" xml:space="preserve">
          <source>Unit tests, fixtures, and other test apparatus. These are covered in &lt;a href=&quot;testing&quot;&gt;Testing Rails Applications&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0f6cd025d55ddd1816778abdc9f3fabb48c6ccc" translate="yes" xml:space="preserve">
          <source>UnknownAttributeError</source>
          <target state="translated">UnknownAttributeError</target>
        </trans-unit>
        <trans-unit id="0318f9423a678f7c0cad6dd3df9e56ab292e1f1f" translate="yes" xml:space="preserve">
          <source>Unless an error is raised, returns true.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="142a90e8a09e23fa3511b7df0b410e75b492dca5" translate="yes" xml:space="preserve">
          <source>Unless overridden, your response returned from this render option will be &lt;code&gt;text/plain&lt;/code&gt;, as that is the default content type of Action Dispatch response.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a2c726244b307ec087748252b6a12d01c65580af" translate="yes" xml:space="preserve">
          <source>Unless you have disabled the Asset Pipeline, &lt;a href=&quot;https://github.com/rails/rails/tree/master/actionview/app/assets/javascripts&quot;&gt;rails-ujs&lt;/a&gt; provides the JavaScript half, and the regular Ruby view helpers add appropriate tags to your DOM.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="225f2ea6c736a01787a8ead588fa3db8dadd49a5" translate="yes" xml:space="preserve">
          <source>Unlike &lt;code&gt;Shirt.find(...)&lt;/code&gt;, however, the object returned by &lt;code&gt;Shirt.red&lt;/code&gt; is not an &lt;a href=&quot;../../../array&quot;&gt;Array&lt;/a&gt; but an &lt;a href=&quot;../../relation&quot;&gt;ActiveRecord::Relation&lt;/a&gt;, which is composable with other scopes; it resembles the association object constructed by a &lt;a href=&quot;../../associations/classmethods#method-i-has_many&quot;&gt;has_many&lt;/a&gt; declaration. For instance, you can invoke &lt;code&gt;Shirt.red.first&lt;/code&gt;, &lt;code&gt;Shirt.red.count&lt;/code&gt;, &lt;code&gt;Shirt.red.where(size:
'small')&lt;/code&gt;. Also, just as with the association objects, named scopes act like an &lt;a href=&quot;../../../array&quot;&gt;Array&lt;/a&gt;, implementing &lt;a href=&quot;../../../enumerable&quot;&gt;Enumerable&lt;/a&gt;; &lt;code&gt;Shirt.red.each(&amp;amp;block)&lt;/code&gt;, &lt;code&gt;Shirt.red.first&lt;/code&gt;, and &lt;code&gt;Shirt.red.inject(memo, &amp;amp;block)&lt;/code&gt; all behave as if &lt;code&gt;Shirt.red&lt;/code&gt; really was an array.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8270e40d2a70d907ff7c7199378b61246ce411f5" translate="yes" xml:space="preserve">
          <source>Unlike &lt;code&gt;select&lt;/code&gt;, &lt;code&gt;pluck&lt;/code&gt; directly converts a database result into a Ruby &lt;code&gt;Array&lt;/code&gt;, without constructing &lt;code&gt;ActiveRecord&lt;/code&gt; objects. This can mean better performance for a large or often-running query. However, any model method overrides will not be available. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="448e9ede861e58842a90f671783ee0b54a9a0737" translate="yes" xml:space="preserve">
          <source>Unlike autoloading, &lt;code&gt;require_dependency&lt;/code&gt; does not expect the file to define any particular constant. Exploiting this behavior would be a bad practice though, file and constant paths should match.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eab625bb97462db62c29eb84c28767872f5e5861" translate="yes" xml:space="preserve">
          <source>Unlike controllers, the mailer instance doesn't have any context about the incoming request so you'll need to provide the &lt;code&gt;:asset_host&lt;/code&gt; parameter yourself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3516db260b80f91dfb9c18a0327dbeab354d2817" translate="yes" xml:space="preserve">
          <source>Unlike controllers, the mailer instance doesn't have any context about the incoming request so you'll need to provide the &lt;code&gt;:host&lt;/code&gt; parameter yourself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07727714d62ff3231aeed3b3fb12a2b8852bb105" translate="yes" xml:space="preserve">
          <source>Unlike index, the create action will not render a template. After performing its main purpose (creating a new post), it initiates a redirect instead. This redirect works by returning an external &lt;code&gt;302
Moved&lt;/code&gt; HTTP response that takes the user to the index action.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8b4de84015c64bbfdcdde2ddfb1dfd5fd6801124" translate="yes" xml:space="preserve">
          <source>Unlike subclasses of &lt;a href=&quot;../../actioncontroller/base&quot;&gt;ActionController::Base&lt;/a&gt;, channels do not follow a RESTful constraint form for their actions. Instead, Action Cable operates through a remote-procedure call model. You can declare any public method on the channel (optionally taking a &lt;code&gt;data&lt;/code&gt; argument), and this method is automatically exposed as callable to the client.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="62287c06d23a0ec4dffee3d990df5c208b99dba6" translate="yes" xml:space="preserve">
          <source>Unlike weak ETag, strong ETag implies that response should be exactly the same and byte by byte identical. Useful when doing Range requests within a large video or PDF file. Some CDNs support only strong ETags, like Akamai. If you absolutely need to generate a strong ETag, it can be done as follows.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b90bd5e957335727b9455e3bcbc345929fa6f4e7" translate="yes" xml:space="preserve">
          <source>Unloads the association. Returns &lt;code&gt;self&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="781744eed2cbfe0f2f0bb6fb5bf19898e9264c90" translate="yes" xml:space="preserve">
          <source>Unobtrusive JavaScript</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b83532493b596dd7f3d3047e3bb9dc634b590ade" translate="yes" xml:space="preserve">
          <source>Unobtrusive JavaScript.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b0a399f575a70073a7ab4cd7d190cbc2a1d23c0" translate="yes" xml:space="preserve">
          <source>Unpack the string at grapheme boundaries. Returns a list of character lists.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bca8789f06329e10775c6a304ede93ceb69168e4" translate="yes" xml:space="preserve">
          <source>Unpermitted keys</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9856dae355fda3395412371f480dac40ebe10c25" translate="yes" xml:space="preserve">
          <source>Unregister a previously registered Interceptor. Either a class or a string can be passed in as the Interceptor. If a string is passed in it will be constantized.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="128f6d018b3c418efde99c433ebf40c8d484043f" translate="yes" xml:space="preserve">
          <source>Unregister a previously registered Interceptor. Either a class, string or symbol can be passed in as the Interceptor. If a string or symbol is passed in it will be camelized and constantized.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f62864c1dd5409e6088f0e5effc0a53f3b7d66df" translate="yes" xml:space="preserve">
          <source>Unregister a previously registered Observer. Either a class, string or symbol can be passed in as the Observer. If a string or symbol is passed in it will be camelized and constantized.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="788cd52ca24c180fb6af6e4edda29ffe6e83dfe2" translate="yes" xml:space="preserve">
          <source>Unregister one or more previously registered Interceptors.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04d0c5eb12518bb698dc72b77fbc49f021bc6091" translate="yes" xml:space="preserve">
          <source>Unregister one or more previously registered Observers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c241e9a594cce9fbcbb489c2a466c6f7e1c69477" translate="yes" xml:space="preserve">
          <source>Unsafe Query Generation</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ccc340a5964868283853155bd253181b213ee2a3" translate="yes" xml:space="preserve">
          <source>Unsaved objects and associations</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b65b5decf9a439fd03d47b77477a54d67be4357" translate="yes" xml:space="preserve">
          <source>Unsubscribe the subscription under test.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="46a592aa76213a60f36ac5dacd431bb714bdb2b3" translate="yes" xml:space="preserve">
          <source>Unsubscribes all streams associated with this channel from the pubsub queue.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="66b5840a9586c2f79dd11e0936d555c13ef22e51" translate="yes" xml:space="preserve">
          <source>Unsupported Release Series</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb91e24fa52d8d2b32937bf04d843f730319a902" translate="yes" xml:space="preserve">
          <source>Update</source>
          <target state="translated">Update</target>
        </trans-unit>
        <trans-unit id="6269561658447fcbe6e337ddec8ae97e76a51ab3" translate="yes" xml:space="preserve">
          <source>Update metadata for the file identified by &lt;code&gt;key&lt;/code&gt; in the service. Override in subclasses only if the service needs to store specific metadata that has to be updated upon identification.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="337c3f98b23b5570174103fb2e891190de492220" translate="yes" xml:space="preserve">
          <source>Updates a single attribute and saves the record. This is especially useful for boolean flags on existing records. Also note that</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3c3434cd4da48f273545d98086fde2f2c1e181a" translate="yes" xml:space="preserve">
          <source>Updates all records in the current relation with details given. This method constructs a single SQL UPDATE statement and sends it straight to the database. It does not instantiate the involved models and it does not trigger Active Record callbacks or validations. However, values passed to &lt;a href=&quot;relation#method-i-update_all&quot;&gt;update_all&lt;/a&gt; will still go through Active Record's normal type casting and serialization.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89ed0bee658ed8a576853a3e21c980745c8d546b" translate="yes" xml:space="preserve">
          <source>Updates all the attributes that are dirty in this object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f755f336cd1b6e9a7bcf86b24186c35caee849b" translate="yes" xml:space="preserve">
          <source>Updates an object (or multiple objects) and saves it to the database, if validations pass. The resulting object is returned whether the object was saved successfully to the database or not.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51de37362cff3124cb6588b061df057813c882db" translate="yes" xml:space="preserve">
          <source>Updates its receiver just like &lt;a href=&quot;persistence#method-i-update&quot;&gt;update&lt;/a&gt; but calls &lt;a href=&quot;persistence#method-i-save-21&quot;&gt;save!&lt;/a&gt; instead of &lt;code&gt;save&lt;/code&gt;, so an exception is raised if the record is invalid and saving will fail.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef6b4725002f392b098a6e4d52696e4004ad52ad" translate="yes" xml:space="preserve">
          <source>Updates or inserts (upserts) a single record into the database in a single SQL INSERT statement. It does not instantiate any models nor does it trigger Active Record callbacks or validations. Though passed values go through Active Record's type casting and serialization.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a1c02217be146bad426fc812a9bc0ba3a26548b" translate="yes" xml:space="preserve">
          <source>Updates or inserts (upserts) multiple records into the database in a single SQL INSERT statement. It does not instantiate any models nor does it trigger Active Record callbacks or validations. Though passed values go through Active Record's type casting and serialization.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83ff8bad4f1f02f18cacee0c7622935e2dd3773e" translate="yes" xml:space="preserve">
          <source>Updates the attribute identified by &lt;code&gt;attr_name&lt;/code&gt; with the specified &lt;code&gt;value&lt;/code&gt;. (Alias for the protected &lt;a href=&quot;attributemethods/write#method-i-write_attribute&quot;&gt;write_attribute&lt;/a&gt; method).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8294f7a9f36c9fb5201db1158ce9c3e54c9cf4e9" translate="yes" xml:space="preserve">
          <source>Updates the attribute identified by &lt;code&gt;attr_name&lt;/code&gt; with the specified &lt;code&gt;value&lt;/code&gt;. Empty strings for &lt;a href=&quot;../../integer&quot;&gt;Integer&lt;/a&gt; and Float columns are turned into &lt;code&gt;nil&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e7f07a45119de0e275fd9697bea9f645f5d54020" translate="yes" xml:space="preserve">
          <source>Updates the attributes directly in the database issuing an UPDATE SQL statement and sets them in the receiver:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2f7738a57643e75f93169276968624a8e9bf816" translate="yes" xml:space="preserve">
          <source>Updates the attributes of the model from the passed-in hash and saves the record, all wrapped in a transaction. If the object is invalid, the saving will fail and false will be returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8049e7441f408e3e647b1d09027f5d945b5734c0" translate="yes" xml:space="preserve">
          <source>Updates the receiver in-place, merging in the hash passed as argument:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06eb0cf61945f2baa84ba448f966ac0c0d4766a7" translate="yes" xml:space="preserve">
          <source>Updating Articles</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f9a4a6beacead0d3e974590ae81ff652f9640b13" translate="yes" xml:space="preserve">
          <source>Updating an Object</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f37df6119e88526a6d6c16ae5c25f6c05d98b0fe" translate="yes" xml:space="preserve">
          <source>Updating the Schema</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de66c667684eb170cba69498a8c821a27dc6a0b8" translate="yes" xml:space="preserve">
          <source>Updating the schema</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb7a4cdfc584efada3231e3b09d46fecb6b7ded3" translate="yes" xml:space="preserve">
          <source>Upgrading Ruby on Rails</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9df57e5528d7bb0c306b04800c096c9a86077d6f" translate="yes" xml:space="preserve">
          <source>Upgrading from Rails 3.0 to Rails 3.1</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bb17c01cc46b77915a100f16617b05c62fb9941c" translate="yes" xml:space="preserve">
          <source>Upgrading from Rails 3.1 to Rails 3.2</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d840859cfe4df027c95bbf2da3c972c5dc7203e3" translate="yes" xml:space="preserve">
          <source>Upgrading from Rails 3.2 to Rails 4.0</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa469338f8c99d5cac7f703bbbe44ad7d9a7a8cb" translate="yes" xml:space="preserve">
          <source>Upgrading from Rails 4.0 to Rails 4.1</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2f5376a7b76407efdf98e53c793ecf3654b8a4d" translate="yes" xml:space="preserve">
          <source>Upgrading from Rails 4.1 to Rails 4.2</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="31eb82b48a38920868e97cefa5128714838c6c20" translate="yes" xml:space="preserve">
          <source>Upgrading from Rails 4.2 to Rails 5.0</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b3716e8c06c1789906b13d68b581c33cfe3c4fc" translate="yes" xml:space="preserve">
          <source>Upgrading from Rails 5.0 to Rails 5.1</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e7598dce8a15ab3a932908dda4c52357cf3ae98" translate="yes" xml:space="preserve">
          <source>Upgrading from Rails 5.1 to Rails 5.2</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7c9ef69952f303ffb092a48e8fe958e62fc7bfb" translate="yes" xml:space="preserve">
          <source>Upgrading from Rails 5.2 to Rails 6.0</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6627794b6a332dc444fa428bd745620b3a90136" translate="yes" xml:space="preserve">
          <source>Upload the &lt;code&gt;io&lt;/code&gt; to the &lt;code&gt;key&lt;/code&gt; specified to all services. If a &lt;code&gt;checksum&lt;/code&gt; is provided, all services will ensure a match when the upload has completed or raise an &lt;a href=&quot;../integrityerror&quot;&gt;ActiveStorage::IntegrityError&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8ca1d57b446d81445fbb90b92b10f983f82c70c8" translate="yes" xml:space="preserve">
          <source>Upload the &lt;code&gt;io&lt;/code&gt; to the &lt;code&gt;key&lt;/code&gt; specified. If a &lt;code&gt;checksum&lt;/code&gt; is provided, the service will ensure a match when the upload has completed or raise an &lt;a href=&quot;integrityerror&quot;&gt;ActiveStorage::IntegrityError&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2191358108795cd5ed3f4e195309fe37b113dc2a" translate="yes" xml:space="preserve">
          <source>Uploaded files are temporary files whose lifespan is one request. When the object is finalized Ruby unlinks the file, so there is no need to clean them with a separate maintenance task.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="943e26649b772824ba55708d2fd502f15bc84dd0" translate="yes" xml:space="preserve">
          <source>Uploading Files</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa757087ad251b34a2a2fc3efa9e9d225c0b8a97" translate="yes" xml:space="preserve">
          <source>Uploads the &lt;code&gt;io&lt;/code&gt; to the service on the &lt;code&gt;key&lt;/code&gt; for this blob. Blobs are intended to be immutable, so you shouldn't be using this method after a file has already been uploaded to fit with a blob. If you want to create a derivative blob, you should instead simply create a new blob based on the old one.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b4f5f343ed6dc1fcf87b83614a5733833cb275b" translate="yes" xml:space="preserve">
          <source>Upon form submission the value entered by the user will be stored in &lt;code&gt;params[:person][:name]&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2384d7787e8da51142d799aec6a1bc2b5934b94f" translate="yes" xml:space="preserve">
          <source>UrlFor</source>
          <target state="translated">UrlFor</target>
        </trans-unit>
        <trans-unit id="defeee97f6e140ce602558dbbf51a5d88c3163bd" translate="yes" xml:space="preserve">
          <source>UrlFor#url_options</source>
          <target state="translated">UrlFor#url_options</target>
        </trans-unit>
        <trans-unit id="0bb18642b70b9f8a9c12ccf39487328f306b8e19" translate="yes" xml:space="preserve">
          <source>Usage</source>
          <target state="translated">Usage</target>
        </trans-unit>
        <trans-unit id="f41cddc9c59b23a19c5d3bc2d0080f3210745cfb" translate="yes" xml:space="preserve">
          <source>Usage of &lt;code&gt;return&lt;/code&gt; within inline callback blocks</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7cb69b72008ab09ae192909df198675d2b69b56" translate="yes" xml:space="preserve">
          <source>Usage with mounted engines</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="497bf6d2658a85a833b2a8a8dfacdaf82da38eb9" translate="yes" xml:space="preserve">
          <source>Usage within the framework</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="861a0e430ffac5e4ae6e11b7a947f2c32d388cf4" translate="yes" xml:space="preserve">
          <source>Usage:</source>
          <target state="translated">Usage:</target>
        </trans-unit>
        <trans-unit id="27fe65747fd2c8338c812e062578e5abc605fedb" translate="yes" xml:space="preserve">
          <source>Use &quot;GET&quot; as the method for search forms. This allows users to bookmark a specific search and get back to it. More generally Rails encourages you to use the right HTTP verb for an action.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b93418ad06b6f98d33605d6333e196e91a59fb76" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;calculations#method-i-pluck&quot;&gt;pluck&lt;/a&gt; as a shortcut to select one or more attributes without loading a bunch of records just to grab the attributes you want.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="96e7b09b40e35f040a0d0a01b7a01dae48d1581d" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;classmethods#method-i-has_many&quot;&gt;has_many&lt;/a&gt; in the base, and &lt;a href=&quot;classmethods#method-i-belongs_to&quot;&gt;belongs_to&lt;/a&gt; in the associated model.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b7f49683dc74ccaee081089bf0d73cdcfd86185" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;classmethods#method-i-has_one&quot;&gt;has_one&lt;/a&gt; in the base, and &lt;a href=&quot;classmethods#method-i-belongs_to&quot;&gt;belongs_to&lt;/a&gt; in the associated model.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18f2269ce2dc7d437df0219a4efd8538c8ac5df5" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;connectionpool#method-i-with_connection&quot;&gt;ActiveRecord::Base.connection_pool.with_connection(&amp;amp;block)&lt;/a&gt;, which obtains a connection, yields it as the sole argument to the block, and returns it to the pool after the block completes.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07c0d1794a4170e8a909082eb55b0f10fc61c49b" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/ActionView/Helpers/CspHelper.html#method-i-csp_meta_tag&quot;&gt;&lt;code&gt;csp_meta_tag&lt;/code&gt;&lt;/a&gt; helper to create a meta tag &quot;csp-nonce&quot; with the per-session nonce value for allowing inline &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tags.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4f94e7afd8b4da4bd5df152bf785036ba3d03b7" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;ActiveSupport::Notifications&lt;/code&gt; to notify &lt;code&gt;deprecation.rails&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6bb89df638cd2a3252a75fd356169eab4400adfb" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;info breakpoints&lt;/code&gt; to list breakpoints. If you supply a number, it lists that breakpoint. Otherwise it lists all breakpoints.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="75c2b9b3aad1e841645366974d35a7dd6539f214" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;photos_path&lt;/code&gt;, &lt;code&gt;new_photo_path&lt;/code&gt;, etc. to generate paths for this resource.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89a2e23d873d17b6617ca2bae11c592c20d21ea9" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;rails credentials:edit&lt;/code&gt; to add the password to your application's encrypted credentials under &lt;code&gt;action_mailbox.ingress_password&lt;/code&gt;, where Action Mailbox will automatically find it:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45b259a69119c8958ee530c4044a470358f61d87" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;rails credentials:edit&lt;/code&gt; to add your API key to your application's encrypted credentials under &lt;code&gt;action_mailbox.mailgun_api_key&lt;/code&gt;, where Action Mailbox will automatically find it:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20cdb22bdf4606cc94b204563d1b7a7ccfd205a2" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;rails credentials:edit&lt;/code&gt; to add your API key to your application's encrypted credentials under &lt;code&gt;action_mailbox.mandrill_api_key&lt;/code&gt;, where Action Mailbox will automatically find it:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ac78de1984cae37f85dac2ee223d4d597ce15c55" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;rails&lt;/code&gt; for running tasks and tests</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eb64bc58530a10c1764d50f24ba7bdb1eb6e5d5f" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;rake secret&lt;/code&gt; to generate new keys for the &lt;code&gt;development&lt;/code&gt; and &lt;code&gt;test&lt;/code&gt; sections.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="28077c934adec4f2169ba53822cb9e9c852ab12c" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;root&lt;/code&gt; as a shorthand to name a route for the root path &amp;ldquo;/&amp;rdquo;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbbfe321f6d7c3927e3ea6641c35d0c7df7854d9" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;step&lt;/code&gt; (abbreviated &lt;code&gt;s&lt;/code&gt;) to continue running your program until the next logical stopping point and return control to the debugger. &lt;code&gt;next&lt;/code&gt; is similar to &lt;code&gt;step&lt;/code&gt;, but while &lt;code&gt;step&lt;/code&gt; stops at the next line of code executed, doing just a single step, &lt;code&gt;next&lt;/code&gt; moves to the next line without descending inside methods.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="274b88e01f3b64b3968e92b05885330929e5a263" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;true&lt;/code&gt; with boolean attributes that can render with no value, like &lt;code&gt;disabled&lt;/code&gt; and &lt;code&gt;readonly&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0608d6576ffbe1c001dea0eb8bbc222203b3fd00" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;url_for(variant)&lt;/code&gt; (or the implied form, like +link_to variant+ or +redirect_to variant+) to get the stable URL for a variant that points to the &lt;a href=&quot;representationscontroller&quot;&gt;ActiveStorage::RepresentationsController&lt;/a&gt;, which in turn will use this &lt;code&gt;service_call&lt;/code&gt; method for its redirection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a17f1c06d0a981dbe36a183966b72ecb02d25ddf" translate="yes" xml:space="preserve">
          <source>Use Case</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="26f404eb8cc8ae0980b6b401669aec365ac80afc" translate="yes" xml:space="preserve">
          <source>Use Rails default banner.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bed922950e1655b47caa5f635e2de962347f8612" translate="yes" xml:space="preserve">
          <source>Use Rails' default banner.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e7e93c5643fb11747c304691bdb43553979a7ff" translate="yes" xml:space="preserve">
          <source>Use \ to escape special characters if you want to match them verbatim.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c4cabf2287be80fce231291c8267ef9ac7b9acb3" translate="yes" xml:space="preserve">
          <source>Use a local cache for the duration of block.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="51ae29353f1aced001bf2b6f5c582e01012c3c7c" translate="yes" xml:space="preserve">
          <source>Use before_action except: [...] instead of only: [...] for security-related actions. This way you don't forget to enable security checks for newly added actions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ebec1e4a0f5d2c5515d720ad801748906b023707" translate="yes" xml:space="preserve">
          <source>Use integration style controller tests over functional style controller tests.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fa4f3cb54f8fc6394a2cd5527926a3d8e3241fa9" translate="yes" xml:space="preserve">
          <source>Use symbol keyed options to add attributes to the generated tag.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fab7cf7741e6eb878a9e07c53a8b569134d53b6d" translate="yes" xml:space="preserve">
          <source>Use that class method when you need to know the ordinal value of an enum. For example, you can use that when manually building SQL strings:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5abf28e6ad48f1bf6c454117025a4849e3edc4f0" translate="yes" xml:space="preserve">
          <source>Use the :filter_html option to remove HTML which was not created by the Textile processor.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b50a3385aecdb9f3669d0dd02838831cce505e9e" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;content_security_policy_report_only&lt;/code&gt; configuration attribute to set &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy-Report-Only&quot;&gt;Content-Security-Policy-Report-Only&lt;/a&gt; in order to report only content violations for migrating legacy content</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea696925906e0b613ee942443a5bac4fe4724115" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;distinct&lt;/code&gt; method to keep the collection free of duplicates. This is mostly useful together with the &lt;code&gt;:through&lt;/code&gt; option.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2590c4c46cbbf2ff350679676a2daf370586db9e" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;distinct&lt;/code&gt; method to remove duplicates from the collection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="20bfe585e9e1c970f2c9ac6250e74b949db5037c" translate="yes" xml:space="preserve">
          <source>Use the logger configured for &lt;a href=&quot;base&quot;&gt;ActionMailer::Base&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be25d2c50b3a98e48c767577f64f752714e885a4" translate="yes" xml:space="preserve">
          <source>Use the named concerns</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19c7d249fd08c6e3f63c4d63714724cce8d7eab4" translate="yes" xml:space="preserve">
          <source>Use the reversible method in &lt;code&gt;#change&lt;/code&gt; method:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ebd6ca02c5e3bebbf6d0dbdd9646e3c46012fecb" translate="yes" xml:space="preserve">
          <source>Use the time in UTC for comparisons.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="604a226219823e732dca84b27b5cdd3cd3650c73" translate="yes" xml:space="preserve">
          <source>Use this if you already have some hash and you want to create a new one based on it.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="88f8e4b3dd276e55fd0c57f5caa3dd71e543517f" translate="yes" xml:space="preserve">
          <source>Use this macro in your model to set a default scope for all operations on the model.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="134df6ad14a1550af1187abfda16cde343d20a3d" translate="yes" xml:space="preserve">
          <source>Use this method carefully as browser/proxy won't be able to invalidate the cached response unless browser cache is forcefully cleared.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="06555ead0dcfcbb1deffcb46e9a485042942d259" translate="yes" xml:space="preserve">
          <source>Use this method in code that absolutely needs a certain constant to be defined at that point. A typical use case is to make constant name resolution deterministic for constants with the same relative name in different namespaces whose evaluation would depend on load order otherwise.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d20515f3c9dee7633547ddf24e8894a446a15293" translate="yes" xml:space="preserve">
          <source>Use this method to shell out to a system library (e.g. muPDF or FFmpeg) for preview image generation. The resulting tempfile can be used as the &lt;code&gt;:io&lt;/code&gt; value in an attachable Hash:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df8e9498307dfce677563bfd75fe3100d5a5a7b5" translate="yes" xml:space="preserve">
          <source>Use to indicate that the given &lt;code&gt;table_names&lt;/code&gt; are referenced by an SQL string, and should therefore be JOINed in any query rather than loaded separately. This method only works in conjunction with &lt;a href=&quot;querymethods#method-i-includes&quot;&gt;includes&lt;/a&gt;. See &lt;a href=&quot;querymethods#method-i-includes&quot;&gt;includes&lt;/a&gt; for more details.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3e811188cf667a2f4f3762760c3cc63817ef388" translate="yes" xml:space="preserve">
          <source>Use your existing &lt;code&gt;secret_key_base&lt;/code&gt; from the &lt;code&gt;secret_token.rb&lt;/code&gt; initializer to set the SECRET_KEY_BASE environment variable for whichever users running the Rails application in production mode. Alternatively, you can simply copy the existing &lt;code&gt;secret_key_base&lt;/code&gt; from the &lt;code&gt;secret_token.rb&lt;/code&gt; initializer to &lt;code&gt;secrets.yml&lt;/code&gt; under the &lt;code&gt;production&lt;/code&gt; section, replacing '&amp;lt;%= ENV[&quot;SECRET_KEY_BASE&quot;] %&amp;gt;'.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="32ca60b01a12a103be58fe7235a10b686a069e56" translate="yes" xml:space="preserve">
          <source>Used by &lt;a href=&quot;base#method-i-mail&quot;&gt;mail&lt;/a&gt; to set the content type of the message.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7ae3e9071b62b4104b2482b330f6dfb5ca9d821" translate="yes" xml:space="preserve">
          <source>Used by the &lt;code&gt;Static&lt;/code&gt; class to check the existence of a valid file in the server's &lt;code&gt;public/&lt;/code&gt; directory (see &lt;a href=&quot;static#method-i-call&quot;&gt;ActionDispatch::Static#call&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d678e1d1c674d84cb7906827a13797c8cc50edba" translate="yes" xml:space="preserve">
          <source>Used for</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2b1b36bcffe16e9b93df752661b8c0397f38b2ed" translate="yes" xml:space="preserve">
          <source>Used for memory caching. This cache is not thread safe.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="514a7490440f51de257674d689e8b288bee09457" translate="yes" xml:space="preserve">
          <source>Used for thread safe code reloading during development.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97e1938f542aca745007c1fdd487eca665009c3f" translate="yes" xml:space="preserve">
          <source>Used in &lt;code&gt;ActionController::Base&lt;/code&gt; and &lt;code&gt;ActionController::API&lt;/code&gt; to include all renderers by default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16320627b2911e853ea13a759ed559c7ac1824a1" translate="yes" xml:space="preserve">
          <source>Used in cases where a method or scope could return zero records but the result needs to be chainable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="956030772ed680b410762c1da2637605b1ba46d6" translate="yes" xml:space="preserve">
          <source>Used to avoid updating the counter cache unnecessarily.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f592248d356cdfe10cd072a97e114514d9f02ed" translate="yes" xml:space="preserve">
          <source>Used to extend a scope with additional methods, either through a module or through a block provided.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="72e93f3a23186570dcca957e636dabf8a1e4ecde" translate="yes" xml:space="preserve">
          <source>Used to serve static files from the public directory. Disabled if &lt;code&gt;config.public_file_server.enabled&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04197c85751f127a95a62d791131086b5bb5150c" translate="yes" xml:space="preserve">
          <source>Used to specify an operation that can be run in one direction or another. Call the methods &lt;code&gt;up&lt;/code&gt; and &lt;code&gt;down&lt;/code&gt; of the yielded object to run a block only in one given direction. The whole block will be called in the right order within the migration.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91525b7d9cd32254b4e0ea0ba41129b93c07a0e5" translate="yes" xml:space="preserve">
          <source>Used to specify an operation that is only run when migrating up (for example, populating a new column with its initial values).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="89738fbe783a7db5d7b75f3c0a4098fda98cb267" translate="yes" xml:space="preserve">
          <source>Useful to check whether a connection's &lt;code&gt;identified_by&lt;/code&gt; gets assigned properly and that any improper connection requests are rejected.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ca6e571e0d3add6b3954eb296783de689f78dc1" translate="yes" xml:space="preserve">
          <source>User Management</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc69f43450d8bd0922dbc92c9debe3313e180189" translate="yes" xml:space="preserve">
          <source>User defined rake tasks will run in the &lt;code&gt;development&lt;/code&gt; environment by default. If you want them to run in other environments consult the &lt;a href=&quot;https://github.com/rails/spring#rake&quot;&gt;Spring README&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d96a0f2a2f93f83c4e4332a2c73f40caf7f1512d" translate="yes" xml:space="preserve">
          <source>Users may also define their own custom types, as long as they respond to the methods defined on the value type. The method &lt;code&gt;deserialize&lt;/code&gt; or &lt;code&gt;cast&lt;/code&gt; will be called on your type object, with raw input from the database or from your controllers. See &lt;a href=&quot;../../activemodel/type/value&quot;&gt;ActiveModel::Type::Value&lt;/a&gt; for the expected API. It is recommended that your type objects inherit from an existing type, or from &lt;a href=&quot;../../activemodel/type/value&quot;&gt;ActiveRecord::Type::Value&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db8d27f42fe698ba4cd4ab166c6645bd7165c8d2" translate="yes" xml:space="preserve">
          <source>Uses &lt;a href=&quot;../date&quot;&gt;Date&lt;/a&gt; to provide precise &lt;a href=&quot;../time&quot;&gt;Time&lt;/a&gt; calculations for years, months, and days according to the proleptic Gregorian calendar. The result is returned as a new &lt;a href=&quot;timewithzone&quot;&gt;TimeWithZone&lt;/a&gt; object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52670980f6a057673646f8676ea6ee713fa9c10f" translate="yes" xml:space="preserve">
          <source>Uses &lt;a href=&quot;date&quot;&gt;Date&lt;/a&gt; to provide precise &lt;a href=&quot;time&quot;&gt;Time&lt;/a&gt; calculations for years, months, and days according to the proleptic Gregorian calendar. The &lt;code&gt;options&lt;/code&gt; parameter takes a hash with any of these keys: &lt;code&gt;:years&lt;/code&gt;, &lt;code&gt;:months&lt;/code&gt;, &lt;code&gt;:weeks&lt;/code&gt;, &lt;code&gt;:days&lt;/code&gt;, &lt;code&gt;:hours&lt;/code&gt;, &lt;code&gt;:minutes&lt;/code&gt;, &lt;code&gt;:seconds&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5040634ced459a0127c4fdadffadd779e1b70be6" translate="yes" xml:space="preserve">
          <source>Uses &lt;a href=&quot;date&quot;&gt;Date&lt;/a&gt; to provide precise &lt;a href=&quot;time&quot;&gt;Time&lt;/a&gt; calculations for years, months, and days. The &lt;code&gt;options&lt;/code&gt; parameter takes a hash with any of these keys: &lt;code&gt;:years&lt;/code&gt;, &lt;code&gt;:months&lt;/code&gt;, &lt;code&gt;:weeks&lt;/code&gt;, &lt;code&gt;:days&lt;/code&gt;, &lt;code&gt;:hours&lt;/code&gt;, &lt;code&gt;:minutes&lt;/code&gt;, &lt;code&gt;:seconds&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5eeac64e9013b0f5b4be64a298f24b0464f9f1cb" translate="yes" xml:space="preserve">
          <source>Uses an MD5 digest based on time to generate a value to be used only once.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="79fafb5c4a55b7390185721a11815aae5f26e3a9" translate="yes" xml:space="preserve">
          <source>Uses the internal channel to disconnect the connection.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e956017bff10fa87252a6efee7ede0ff681c8b34" translate="yes" xml:space="preserve">
          <source>Using .gemspecs as Intended</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a45a1854c029fad86f58cc64d3f32eaa571e8d1" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;:as&lt;/code&gt; in Nested Resources</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6d361e456c9f8b3ec5c765405e6c85ce97180cb" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;:if&lt;/code&gt; and &lt;code&gt;:unless&lt;/code&gt; with a &lt;code&gt;Proc&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c61e9703d2e3bcc88f03129ac3d9e0f0b34714cc" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;:if&lt;/code&gt; and &lt;code&gt;:unless&lt;/code&gt; with a &lt;code&gt;Symbol&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fda2ff294ecaf73403c0dc270c23cf45258a2165" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;:locale&lt;/code&gt; option:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30368b696f08cb91014e942bfe032a57ea1dbb62" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;Class#class_eval&lt;/code&gt; is great for simple adjustments, but for more complex class modifications, you might want to consider using &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/ActiveSupport/Concern.html&quot;&gt;&lt;code&gt;ActiveSupport::Concern&lt;/code&gt;&lt;/a&gt;. ActiveSupport::Concern manages load order of interlinked dependent modules and classes at run time allowing you to significantly modularize your code.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bef57ac02b970daacc2b2fc67d2082eacfa334ab" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;OrderedOptions&lt;/code&gt;, the above code could be reduced to:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3f1b10eabf3885e7fbfa38e98ce85edbc2c9c67" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;details&lt;/code&gt; with custom validators is covered in the &lt;a href=&quot;#working-with-validation-errors&quot;&gt;Working with Validation Errors&lt;/a&gt; section.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4e26e907726fee95003c34aed3c35cb55cf263ad" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;head&lt;/code&gt; To Build Header-Only Responses</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec0a2f4b1cb6627a64af32d9baae3c063d752c40" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;redirect_to&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c34f25e0ec395f5452eb90d0d02b342464eb2744" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;render&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c3a3fe0d8933ce00db0895cd486bf3dc564d1b6" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;rescue_from&lt;/code&gt; with &lt;code&gt;Exception&lt;/code&gt; or &lt;code&gt;StandardError&lt;/code&gt; would cause serious side-effects as it prevents Rails from handling exceptions properly. As such, it is not recommended to do so unless there is a strong reason.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e5dffcbc275081fb12b83397187245d58456dc2" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;resolve&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="56f4662a7096f000433e6b4a9084757e43f4977a" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;reversible&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ef61be3f99b31a04f5d1aec9bb7d9c7d696ee8f" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;reversible&lt;/code&gt; will ensure that the instructions are executed in the right order too. If the previous example migration is reverted, the &lt;code&gt;down&lt;/code&gt; block will be run after the &lt;code&gt;home_page_url&lt;/code&gt; column is removed and right before the table &lt;code&gt;distributors&lt;/code&gt; is dropped.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eec9f30d27d6d70d3264961c05ab7e4f85d4b976" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;root&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="761245540698f2d11c0a3828a047a6ac3cf71b0c" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;scope&lt;/code&gt;, we can alter path names generated by &lt;code&gt;resources&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="93e741feae9b800b8bf3041dab9968f2241a1deb" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;t.bigint :supplier_id&lt;/code&gt; makes the foreign key naming obvious and explicit. In current versions of Rails, you can abstract away this implementation detail by using &lt;code&gt;t.references :supplier&lt;/code&gt; instead.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="268c16bfef01e6ad855010c27e0131589bf60442" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;where&lt;/code&gt; like this will only work when you pass it a Hash. For SQL-fragments you need to use &lt;code&gt;references&lt;/code&gt; to force joined tables:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee0d347a14edcc5b4e6139a52d4ba2a529ba6717" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;with_options&lt;/code&gt;, we can remove the duplication:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e1619d01885f58fab7932830dc9006ed21c70b59" translate="yes" xml:space="preserve">
          <source>Using Action Mailer Helpers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4801bfa85cb4646ac866191b4ff929e6c94d479" translate="yes" xml:space="preserve">
          <source>Using Action View with Rails</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="689b87a4c52c48aa5c75e211634ce8d6e5176f48" translate="yes" xml:space="preserve">
          <source>Using ActionDispatch::Request</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="98b4728e19597ee77408adeedb067e58164f4ce8" translate="yes" xml:space="preserve">
          <source>Using Active Record, Redis, etc within your channel actions means you'll get a separate connection from each thread in the worker pool. Plan your deployment accordingly: 5 servers each running 5 Puma workers each running an 8-thread worker pool means at least 200 database connections.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b885a388e1785207455bd2726a8add6d27d8bfd9" translate="yes" xml:space="preserve">
          <source>Using Active Storage, an application can transform image uploads with &lt;a href=&quot;https://www.imagemagick.org&quot;&gt;ImageMagick&lt;/a&gt;, generate image representations of non-image uploads like PDFs and videos, and extract metadata from arbitrary files.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="023cdb9a7e592718426d2dc557941f6b6cffe0ef" translate="yes" xml:space="preserve">
          <source>Using Date and Time Form Helpers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b0264128715992de2a3caae255bd4b486d078dca" translate="yes" xml:space="preserve">
          <source>Using Different Backends</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d25a3491e53f3cddb1d54b127f5a17ba102fc8f" translate="yes" xml:space="preserve">
          <source>Using Different Exception Handlers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58638d8c86a7a54ea83d04eda52f2c384a7a582c" translate="yes" xml:space="preserve">
          <source>Using Digest::MD5 generates version 3 UUIDs; Digest::SHA1 generates version 5 UUIDs. &lt;a href=&quot;uuid#method-c-uuid_from_hash&quot;&gt;::uuid_from_hash&lt;/a&gt; always generates the same &lt;a href=&quot;uuid&quot;&gt;UUID&lt;/a&gt; for a given name and namespace combination.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2156c7f04d7195148f3c510e3dfd9851d1e37e5a" translate="yes" xml:space="preserve">
          <source>Using ERB, you can also inject dynamic values into your fixtures with inserts like &lt;code&gt;&amp;lt;%=
Date.today.strftime(&quot;%Y-%m-%d&quot;) %&amp;gt;&lt;/code&gt;. This is however a feature to be used with some caution. The point of fixtures are that they're stable units of predictable sample data. If you feel that you need to inject dynamic values, then perhaps you should reexamine whether your application is properly testable. Hence, dynamic values in fixtures are to be considered a code smell.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe36e51897a24bbb93f2054ef4f0d1ff67a9dd17" translate="yes" xml:space="preserve">
          <source>Using Engine's routes outside &lt;a href=&quot;engine&quot;&gt;Engine&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a95b2ed1497e192cc87881fabe7ffe384963956d" translate="yes" xml:space="preserve">
          <source>Using Fixtures in Test Cases</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db97588a7c818188089d64beac1a13913a323bba" translate="yes" xml:space="preserve">
          <source>Using Form Helpers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bc0482276b0c1c32311dc3afe61a57fca707ec57" translate="yes" xml:space="preserve">
          <source>Using Initializer Files</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b182a342f13730214993d743c33ab88e4f17ffa2" translate="yes" xml:space="preserve">
          <source>Using Nested Layouts</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd4669ca9c2fe5d3bc7226103f94706530f82eb9" translate="yes" xml:space="preserve">
          <source>Using Partials</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d1756ed605c4bde531129152f324f566ad4ddcd" translate="yes" xml:space="preserve">
          <source>Using Rack::Sendfile</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6df79c4be72b595e98d2693aa2b4a5dae292231" translate="yes" xml:space="preserve">
          <source>Using Rails for API-only Applications</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4bef2888ddda4e0cb2132bc5f2e388ccbde1ae44" translate="yes" xml:space="preserve">
          <source>Using Safe HTML Translations</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a1c092a8a121e4cf3eab9a3b63f28450913b696" translate="yes" xml:space="preserve">
          <source>Using Webpacker</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="213d394d6e1fb632b04b4460c21397cd533ef532" translate="yes" xml:space="preserve">
          <source>Using Your Own Compressor</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b879007491eccd6fe1737da3feb44441b98f130d" translate="yes" xml:space="preserve">
          <source>Using a Class Provided by the Application</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c57fcb3657328d62eb218b876a331c97dc7870ea" translate="yes" xml:space="preserve">
          <source>Using a Proc with &lt;code&gt;:if&lt;/code&gt; and &lt;code&gt;:unless&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2195f914c11a6c74a4c824c2f1be36419f3dfb15" translate="yes" xml:space="preserve">
          <source>Using a Symbol with &lt;code&gt;:if&lt;/code&gt; and &lt;code&gt;:unless&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9cdf73cd7c50969cdb83f98e51f88fde6bcc1156" translate="yes" xml:space="preserve">
          <source>Using a block</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ed32afa6e804b4c4f488fd2fc4ed44dc5f7c91ae" translate="yes" xml:space="preserve">
          <source>Using a class method is the preferred way to accept arguments for scopes. These methods will still be accessible on the association objects:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fbe9a0432f218f90338c41dfe3c1a24f65a35f1f" translate="yes" xml:space="preserve">
          <source>Using a custom deprecator directly:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4851c91b2ad607dec75ecc5584fff41d065b743" translate="yes" xml:space="preserve">
          <source>Using a different layout in the action render call</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5eeb9ff231016b33951f753c8c0c163bed3faaaa" translate="yes" xml:space="preserve">
          <source>Using a model after changing its table</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab15994fed6aed4a7f4ed362a4b401e9650676b1" translate="yes" xml:space="preserve">
          <source>Using a module</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba85a8af7530f7d54f21ae22192f4284960b4de4" translate="yes" xml:space="preserve">
          <source>Using an engine within an application is very easy. This section covers how to mount the engine into an application and the initial setup required, as well as linking the engine to a &lt;code&gt;User&lt;/code&gt; class provided by the application to provide ownership for articles and comments within the engine.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b89a3557ce5e44502a24701aaac783261ba1ba5b" translate="yes" xml:space="preserve">
          <source>Using asset hosts</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="38fdabe951d39e3cfb212c670d738ad00e89765b" translate="yes" xml:space="preserve">
          <source>Using both &lt;code&gt;after_create_commit&lt;/code&gt; and &lt;code&gt;after_update_commit&lt;/code&gt; in the same model will only allow the last callback defined to take effect, and will override all others.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec25ccb18505ba836bfd208492088b6084d46bb4" translate="yes" xml:space="preserve">
          <source>Using comments:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b2aa95366043b6b8a9992fb7e236707a6bc71519" translate="yes" xml:space="preserve">
          <source>Using conditionals</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="936c3379c38ee34f5f9e2764536948cc6b3c552c" translate="yes" xml:space="preserve">
          <source>Using either of these alternate methods incurs a performance hit, as the fixtured data must be fully traversed in the database to create the fixture hash and/or instance variables. This is expensive for large sets of fixtured data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fde3600b3d594ce47576d05a6f75575f36787c1b" translate="yes" xml:space="preserve">
          <source>Using form_for and form_tag</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67cee99a82e7ec274245195ecfd79922dab76347" translate="yes" xml:space="preserve">
          <source>Using generators will save you a large amount of time by writing &lt;strong&gt;boilerplate code&lt;/strong&gt;, code that is necessary for the app to work.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1959ce923ef24486e6019618b44e946a5e0db1fc" translate="yes" xml:space="preserve">
          <source>Using manual connection switching</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4705df440ea955459ce1f4ba6887c30baa8818a" translate="yes" xml:space="preserve">
          <source>Using parameterized mailers, this can be rewritten as:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c05921aba904fe76e5dcac8531640232c94f2782" translate="yes" xml:space="preserve">
          <source>Using partials to clean up duplication in views</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b5a312d20d9fd624f811d93a48484f327e47227a" translate="yes" xml:space="preserve">
          <source>Using polymorphic associations in combination with single table inheritance (STI) is a little tricky. In order for the associations to work as expected, ensure that you store the base model for the STI models in the type column of the polymorphic association. To continue with the asset example above, suppose there are guest posts and member posts that use the posts table for STI. In this case, there must be a &lt;code&gt;type&lt;/code&gt; column in the posts table.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07dd432b234fcf64098360f5f1027190f778714e" translate="yes" xml:space="preserve">
          <source>Using sub templates</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e312f8c45b096c27e26464507b9c200fa033fc0" translate="yes" xml:space="preserve">
          <source>Using sub templates allows you to sidestep tedious replication and extract common display structures in shared templates. The classic example is the use of a header and footer (even though the Action Pack-way would be to use &lt;a href=&quot;layouts&quot;&gt;Layouts&lt;/a&gt;):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60763bcda71485e926368984197adec3bcb5671c" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;--skip-sprockets&lt;/code&gt; option will prevent Rails from adding them to your &lt;code&gt;Gemfile&lt;/code&gt;, so if you later want to enable the asset pipeline you will have to add those gems to your &lt;code&gt;Gemfile&lt;/code&gt;. Also, creating an application with the &lt;code&gt;--skip-sprockets&lt;/code&gt; option will generate a slightly different &lt;code&gt;config/application.rb&lt;/code&gt; file, with a require statement for the sprockets railtie that is commented-out. You will have to remove the comment operator on that line to later enable the asset pipeline:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="539de5431aa809d46158cd02e68c2fea25c85a0d" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;:debug&lt;/code&gt; level will have a greater performance penalty than &lt;code&gt;:fatal&lt;/code&gt;, as a far greater number of strings are being evaluated and written to the log output (e.g. disk).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c681c8a6c956ed1f97555ed0b5212cc737b04d65" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;:file&lt;/code&gt; option in combination with users input can lead to security problems since an attacker could use this action to access security sensitive files in your file system.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8cf19fe34e1459832fe27f9bc55093009a5fa87a" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;change&lt;/code&gt; Method</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="872a402aa33bee5bd17f24ca5d6bb2fce87a2e8b" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;config/database.yml&lt;/code&gt; file you can specify all the information needed to access your database:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bbd3e9cdb1250e1a2706f1206ab90caace876603" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;content_for&lt;/code&gt; Method</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9beb91e4609e1f813b6cb91e9a78e3cf8b7b4398" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;find&lt;/code&gt; method, you can retrieve the object corresponding to the specified &lt;em&gt;primary key&lt;/em&gt; that matches any supplied options. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cabc83e0fd6211dce17a0f662cb287686f600b58" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;new&lt;/code&gt; method, an object can be instantiated without being saved:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d4dd6e0bbbd401894d9d01d0e95488479b17ed53" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;up&lt;/code&gt;/&lt;code&gt;down&lt;/code&gt; Methods</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7279b8cb41471ed203f579283e7fcd454b6a751" translate="yes" xml:space="preserve">
          <source>Using the Cache Middleware</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="276a3ddb2fa39f74d0fc4919b4e5eff212e38d4f" translate="yes" xml:space="preserve">
          <source>Using the asset pipeline:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c661bcf5534ac03e7b7817b9e9ba77c83029f6d1" translate="yes" xml:space="preserve">
          <source>Using the asynchronous queue from a Rake task (for example, to send an email using &lt;code&gt;.deliver_later&lt;/code&gt;) will generally not work because Rake will likely end, causing the in-process thread pool to be deleted, before any/all of the &lt;code&gt;.deliver_later&lt;/code&gt; emails are processed. To avoid this problem, use &lt;code&gt;.deliver_now&lt;/code&gt; or run a persistent queue in development.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df43169ba187647b62e9dc8b1907f06856294a51" translate="yes" xml:space="preserve">
          <source>Using the default deprecator:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17a5cb03e1a7a9f2ced51100769bcb259634ec7c" translate="yes" xml:space="preserve">
          <source>Using the multiline modifier will raise an &lt;code&gt;ArgumentError&lt;/code&gt;. Encoding regular expression modifiers are silently ignored. The match will always use the default encoding or ASCII.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="397250e72fded40099b8630808f7d9faa2bed5e3" translate="yes" xml:space="preserve">
          <source>Using the npm package:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be4ff635aaef9c488d572c7ea61e96e4288359d7" translate="yes" xml:space="preserve">
          <source>Using the route above, the URL &amp;ldquo;localhost:3000/articles/2005/11/06&amp;rdquo; maps to</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="492dfec3cea453f778c8c9a230f1aaf52dac64db" translate="yes" xml:space="preserve">
          <source>Using this helper, &lt;code&gt;last_modified&lt;/code&gt; header is set to &lt;code&gt;Time.new(2011, 1, 1).utc&lt;/code&gt; and &lt;code&gt;expires&lt;/code&gt; header is set to a 100 years.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="afbd307f83503bca84be93989a914c1268e92c33" translate="yes" xml:space="preserve">
          <source>Using this method inside a &lt;code&gt;form_for&lt;/code&gt; block will set the enclosing form's encoding to &lt;code&gt;multipart/form-data&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7bc913f59c0de6cf5a0c520abd2281d62e7bf235" translate="yes" xml:space="preserve">
          <source>Using this validation method in conjunction with &lt;a href=&quot;../persistence#method-i-save&quot;&gt;ActiveRecord::Base#save&lt;/a&gt; does not guarantee the absence of duplicate record insertions, because uniqueness checks on the application level are inherently prone to race conditions. For example, suppose that two users try to post a Comment at the same time, and a Comment's title must be unique. At the database-level, the actions performed by these users could be interleaved in the following manner:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c47046323f3eb153fc07f6281c631e1e7d5568ae" translate="yes" xml:space="preserve">
          <source>Using this, the &lt;code&gt;:id&lt;/code&gt; parameter here will default to 'home'.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18d5303ebafaf29b879154d4cc9b2944f48e8e24" translate="yes" xml:space="preserve">
          <source>Usually a web application includes access control. The user enters their login credentials and the web application tries to find the matching record in the users table. The application grants access when it finds a record. However, an attacker may possibly bypass this check with SQL injection. The following shows a typical database query in Rails to find the first record in the users table which matches the login credentials parameters supplied by the user.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="99af370507e8c2db0ea6423f554ac847847e6357" translate="yes" xml:space="preserve">
          <source>Usually key value pairs are handled something like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21966f865db52398da0ed7ccc010e283a939d5a6" translate="yes" xml:space="preserve">
          <source>Usually, specifying the engine inside the &lt;code&gt;Gemfile&lt;/code&gt; would be done by specifying it as a normal, everyday gem.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="acb582f88e04130b94ebbdffa8786b76613ce258" translate="yes" xml:space="preserve">
          <source>Util::h</source>
          <target state="translated">Util::h</target>
        </trans-unit>
        <trans-unit id="66c8b0c5e8f978049160f5f96bcae23108de7879" translate="yes" xml:space="preserve">
          <source>Util::html_escape</source>
          <target state="translated">Util::html_escape</target>
        </trans-unit>
        <trans-unit id="99698cc7b024d8229a6c8aafc9eba7baf6683dc3" translate="yes" xml:space="preserve">
          <source>Util::html_escape_once</source>
          <target state="translated">Util::html_escape_once</target>
        </trans-unit>
        <trans-unit id="2aaaf7d878c8ebc2dcce832444b5b4ebd53d1c92" translate="yes" xml:space="preserve">
          <source>Util::json_escape</source>
          <target state="translated">Util::json_escape</target>
        </trans-unit>
        <trans-unit id="c01f409cc1bd8b6f90b3894727727d645de3b553" translate="yes" xml:space="preserve">
          <source>VALID_ON_OPTIONS</source>
          <target state="translated">VALID_ON_OPTIONS</target>
        </trans-unit>
        <trans-unit id="124e3f293f5e7b74a9c64b32a62b41143cbe7216" translate="yes" xml:space="preserve">
          <source>VALID_UNSCOPING_VALUES</source>
          <target state="translated">VALID_UNSCOPING_VALUES</target>
        </trans-unit>
        <trans-unit id="41757882d3f1b0c8a89363a82826b5700e5594cb" translate="yes" xml:space="preserve">
          <source>VALUE_LIMIT_VIOLATION</source>
          <target state="translated">VALUE_LIMIT_VIOLATION</target>
        </trans-unit>
        <trans-unit id="56cad5221326233028bedbfd58a31074884c516e" translate="yes" xml:space="preserve">
          <source>VALUE_METHODS</source>
          <target state="translated">VALUE_METHODS</target>
        </trans-unit>
        <trans-unit id="7e41e0686706967ebd2b2906728d198ef627a005" translate="yes" xml:space="preserve">
          <source>Valgrind</source>
          <target state="translated">Valgrind</target>
        </trans-unit>
        <trans-unit id="36a991d3b114b907b1646c8dffacb955f5e22424" translate="yes" xml:space="preserve">
          <source>Valid Options:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8bca504ff63903bf18d85f84c0ce122920623ed3" translate="yes" xml:space="preserve">
          <source>Valid isolation levels are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="37fce7b7492a6bef44ee3324a04c2384aa436c32" translate="yes" xml:space="preserve">
          <source>Valid options are &lt;code&gt;:only&lt;/code&gt;, &lt;code&gt;:except&lt;/code&gt;, &lt;code&gt;:methods&lt;/code&gt; and &lt;code&gt;:include&lt;/code&gt;. The following are all valid examples:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="36194dddeba7fe68aa399e3341203b27b9a2552d" translate="yes" xml:space="preserve">
          <source>Valid unverified request handling methods are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="54ab4d2b0820b79cad074569faeb8edd50fa89ef" translate="yes" xml:space="preserve">
          <source>Valid values are:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5a2623cdc63e643d609715aee708f085aa5f1538" translate="yes" xml:space="preserve">
          <source>Validate models before they get persisted to the database.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77961bc221c22a821a30dc0717177eafe7ea17da" translate="yes" xml:space="preserve">
          <source>Validates all keys in a hash match &lt;code&gt;*valid_keys&lt;/code&gt;, raising &lt;code&gt;ArgumentError&lt;/code&gt; on a mismatch.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bf58f85ad0b76e58cebfb24a1d16255fb2ed95db" translate="yes" xml:space="preserve">
          <source>Validates each attribute against a block.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9f2c6255dcc91e5f805b40b204c9fe2c6b9b192" translate="yes" xml:space="preserve">
          <source>Validates that the specified attributes are blank (as defined by &lt;a href=&quot;../../object#method-i-blank-3F&quot;&gt;Object#blank?&lt;/a&gt;). Happens by default on save.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="597c81e76b7981ffaf708754e1d17381204762d8" translate="yes" xml:space="preserve">
          <source>Validates that the specified attributes are not blank (as defined by &lt;a href=&quot;../../object#method-i-blank-3F&quot;&gt;Object#blank?&lt;/a&gt;), and, if the attribute is an association, that the associated object is not marked for destruction. Happens by default on save.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d8ad38c92631e6bc9eb69a49c2010ebb3ae07552" translate="yes" xml:space="preserve">
          <source>Validates that the specified attributes are not blank (as defined by &lt;a href=&quot;../../object#method-i-blank-3F&quot;&gt;Object#blank?&lt;/a&gt;). Happens by default on save.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="58337ba49a75d8bf9dffe21cf2b9fa1eb601e1fb" translate="yes" xml:space="preserve">
          <source>Validates that the specified attributes are not present (as defined by &lt;a href=&quot;../../object#method-i-present-3F&quot;&gt;Object#present?&lt;/a&gt;). If the attribute is an association, the associated object is considered absent if it was marked for destruction.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fab315ea04be9de812b12df8a5daa4272206f490" translate="yes" xml:space="preserve">
          <source>Validates that the specified attributes match the length restrictions supplied. If the attribute is an association, records that are marked for destruction are not counted.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f196972086e067a296aba6bf58ca3a20a29b64d" translate="yes" xml:space="preserve">
          <source>Validates that the specified attributes match the length restrictions supplied. Only one constraint option can be used at a time apart from &lt;code&gt;:minimum&lt;/code&gt; and &lt;code&gt;:maximum&lt;/code&gt; that can be combined together:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="19fefe051acdcb3dd097341147e99eacde4f0190" translate="yes" xml:space="preserve">
          <source>Validates that the value of the specified attribute is not in a particular enumerable object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fef402f9089ade40be43e111761a19c005fe1d26" translate="yes" xml:space="preserve">
          <source>Validates the constraint named &lt;code&gt;constraint_name&lt;/code&gt; on &lt;code&gt;accounts&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="07bd560f237c6024bb5a357bcd5d4674eb2a02da" translate="yes" xml:space="preserve">
          <source>Validates the foreign key named &lt;code&gt;special_fk_name&lt;/code&gt; on the &lt;code&gt;accounts&lt;/code&gt; table.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2dc422b85df861d9b7182e0266ae03a042a5b747" translate="yes" xml:space="preserve">
          <source>Validates the foreign key on &lt;code&gt;accounts.branch_id&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="74c3fbc3672c59bbe26b1ce09c8d9fb0652ae747" translate="yes" xml:space="preserve">
          <source>Validates the foreign key on &lt;code&gt;accounts.owner_id&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83fb9f92c7613a920724477bd086c9fb9fd91187" translate="yes" xml:space="preserve">
          <source>Validates the given constraint.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6f0b0e25b51c4688754d80e76696b9d4f99a91dd" translate="yes" xml:space="preserve">
          <source>Validates the given foreign key.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5682b5cd3be009b89d8376b3adf0ae573a67cb6c" translate="yes" xml:space="preserve">
          <source>Validates whether the associated object or objects are all valid. Works with any kind of association.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e8c728a071cb7ecdda7e9c17738e2fe460b9133" translate="yes" xml:space="preserve">
          <source>Validates whether the value of the specified attribute is available in a particular enumerable object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5ece8a5945f594e4b8856ead7945504b74a0d209" translate="yes" xml:space="preserve">
          <source>Validates whether the value of the specified attribute is numeric by trying to convert it to a float with &lt;a href=&quot;../../kernel&quot;&gt;Kernel&lt;/a&gt;.Float (if &lt;code&gt;only_integer&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt;) or applying it to the regular expression &lt;code&gt;/\A[+\-]?\d+\z/&lt;/code&gt; (if &lt;code&gt;only_integer&lt;/code&gt; is set to &lt;code&gt;true&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="699caf7ddc934eba8a82503bdefa24d80d21c69f" translate="yes" xml:space="preserve">
          <source>Validates whether the value of the specified attribute is of the correct form, going by the regular expression provided. You can require that the attribute matches the regular expression:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b370e9c0767f915d3fb8cc810a7fdfa5b2ff8dd8" translate="yes" xml:space="preserve">
          <source>Validates whether the value of the specified attributes are unique across the system. Useful for making sure that only one user can be named &amp;ldquo;davidhh&amp;rdquo;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7501e942215e0ecb7ac558f3ab1f18da4ef7152f" translate="yes" xml:space="preserve">
          <source>Validating the presence of a parent model</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd74d182c641e4c78502d863b44d0aeff1575e54" translate="yes" xml:space="preserve">
          <source>Validation</source>
          <target state="translated">Validation</target>
        </trans-unit>
        <trans-unit id="dd439173462c91b634e6ec99928abb177fcbea7d" translate="yes" xml:space="preserve">
          <source>Validation Helpers</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4ff28f38b3d0b2dc3f5561d8f3e0ad431e2de4f0" translate="yes" xml:space="preserve">
          <source>Validation is a very important issue to consider when persisting to the database, so the methods &lt;code&gt;save&lt;/code&gt; and &lt;code&gt;update&lt;/code&gt; take it into account when running: they return &lt;code&gt;false&lt;/code&gt; when validation fails and they don't actually perform any operations on the database. All of these have a bang counterpart (that is, &lt;code&gt;save!&lt;/code&gt; and &lt;code&gt;update!&lt;/code&gt;), which are stricter in that they raise the exception &lt;code&gt;ActiveRecord::RecordInvalid&lt;/code&gt; if validation fails. A quick example to illustrate:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6bb4276350a5281c4528a2929cc5c42cda16c9d2" translate="yes" xml:space="preserve">
          <source>Validation is skipped.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c259e54dcc7188e7cfe33403eca78cda53017fc" translate="yes" xml:space="preserve">
          <source>Validations</source>
          <target state="translated">Validations</target>
        </trans-unit>
        <trans-unit id="b584cd9d0f7ec99ba0e510a491f7887d39a1bf91" translate="yes" xml:space="preserve">
          <source>Validations Overview</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ecba43f7828b96ab8176550032cc85559ef178f2" translate="yes" xml:space="preserve">
          <source>Validations are skipped.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd9a96ba7cfeb53963864af65f313a391314975b" translate="yes" xml:space="preserve">
          <source>Validations are used to ensure that only valid data is saved into your database. For example, it may be important to your application to ensure that every user provides a valid email address and mailing address. Model-level validations are the best way to ensure that only valid data is saved into your database. They are database agnostic, cannot be bypassed by end users, and are convenient to test and maintain. Rails makes them easy to use, provides built-in helpers for common needs, and allows you to create your own validation methods as well.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b97643974eaad9f57e2db4889d955de94f19663" translate="yes" xml:space="preserve">
          <source>Validations such as &lt;code&gt;validates :foreign_key, uniqueness: true&lt;/code&gt; are one way in which models can enforce data integrity. The &lt;code&gt;:dependent&lt;/code&gt; option on associations allows models to automatically destroy child objects when the parent is destroyed. Like anything which operates at the application level, these cannot guarantee referential integrity and so some people augment them with &lt;a href=&quot;#foreign-keys&quot;&gt;foreign key constraints&lt;/a&gt; in the database.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8fabab6b6255e4f24fc0b9f631b13f8e74b29655" translate="yes" xml:space="preserve">
          <source>Validations with no &lt;code&gt;:on&lt;/code&gt; option will run no matter the context. Validations with some &lt;code&gt;:on&lt;/code&gt; option will only run in the specified context.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dbb55dfd7a38fdeed72819a4da5faf2f18c1aaf7" translate="yes" xml:space="preserve">
          <source>Validations#save</source>
          <target state="translated">Validations#save</target>
        </trans-unit>
        <trans-unit id="321679676d428be91b1784978676eef3771f7768" translate="yes" xml:space="preserve">
          <source>Validations#save!</source>
          <target state="translated">Validations#save!</target>
        </trans-unit>
        <trans-unit id="5402be86d2ff660ed9b077198b43703fbfe125a7" translate="yes" xml:space="preserve">
          <source>Validations#valid?</source>
          <target state="translated">Validations#valid?</target>
        </trans-unit>
        <trans-unit id="f946bcd5c349a3edbf777f57f9b4002faa7d6c91" translate="yes" xml:space="preserve">
          <source>Validations#validate</source>
          <target state="translated">Validations#validate</target>
        </trans-unit>
        <trans-unit id="75014a552c0d1c2dbb3c4f2151a7de2692d405a9" translate="yes" xml:space="preserve">
          <source>Validations::ClassMethods</source>
          <target state="translated">Validations::ClassMethods</target>
        </trans-unit>
        <trans-unit id="8f96dc1128104318dc9a770000a2945360492cd7" translate="yes" xml:space="preserve">
          <source>Validations::ClassMethods#validates_absence_of</source>
          <target state="translated">Validations::ClassMethods#validates_absence_of</target>
        </trans-unit>
        <trans-unit id="946658c647c42982d56f860bd504252a039b3e28" translate="yes" xml:space="preserve">
          <source>Validations::ClassMethods#validates_associated</source>
          <target state="translated">Validations::ClassMethods#validates_associated</target>
        </trans-unit>
        <trans-unit id="753de92fd37c5587df62760389567b29a35fd747" translate="yes" xml:space="preserve">
          <source>Validations::ClassMethods#validates_length_of</source>
          <target state="translated">Validations::ClassMethods#validates_length_of</target>
        </trans-unit>
        <trans-unit id="5a60d080bccf06cb8e38e48b4d60927eab575bec" translate="yes" xml:space="preserve">
          <source>Validations::ClassMethods#validates_presence_of</source>
          <target state="translated">Validations::ClassMethods#validates_presence_of</target>
        </trans-unit>
        <trans-unit id="75e3dfa6bd563c2c2070196d9461c8e8064d710a" translate="yes" xml:space="preserve">
          <source>Validations::ClassMethods#validates_size_of</source>
          <target state="translated">Validations::ClassMethods#validates_size_of</target>
        </trans-unit>
        <trans-unit id="9ee0d964eb9ebdb6179f5e30086aae695cb3b452" translate="yes" xml:space="preserve">
          <source>Validations::ClassMethods#validates_uniqueness_of</source>
          <target state="translated">Validations::ClassMethods#validates_uniqueness_of</target>
        </trans-unit>
        <trans-unit id="8dce170de238b1feda2ecd9674ea3ca0d068fbcb" translate="yes" xml:space="preserve">
          <source>Value</source>
          <target state="translated">Value</target>
        </trans-unit>
        <trans-unit id="c4f35f628041304ad157bcf70adb2ce05c395c52" translate="yes" xml:space="preserve">
          <source>Value objects are immutable and interchangeable objects that represent a given value, such as a Money object representing $5. Two Money objects both representing $5 should be equal (through methods such as &lt;code&gt;==&lt;/code&gt; and &lt;code&gt;&amp;lt;=&amp;gt;&lt;/code&gt; from Comparable if ranking makes sense). This is unlike entity objects where equality is determined by identity. An entity class such as Customer can easily have two different objects that both have an address on Hyancintvej. Entity identity is determined by object or relational unique identifiers (such as primary keys). Normal &lt;a href=&quot;../base&quot;&gt;ActiveRecord::Base&lt;/a&gt; classes are entity objects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ddc800cac5089570f0e49b3fad0ca0a6b80632fa" translate="yes" xml:space="preserve">
          <source>Value objects can also be composed of multiple attributes, such as the case of Address. The order of the mappings will determine the order of the parameters.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a4ebd7561159ce4df90c97b704841724fd68e78" translate="yes" xml:space="preserve">
          <source>ValueTooLong</source>
          <target state="translated">ValueTooLong</target>
        </trans-unit>
        <trans-unit id="f2a318c03d40ec772b81f6a126f7ad3a1b89a883" translate="yes" xml:space="preserve">
          <source>Values from forms can be at the top level of the &lt;code&gt;params&lt;/code&gt; hash or nested in another hash. For example, in a standard &lt;code&gt;create&lt;/code&gt; action for a Person model, &lt;code&gt;params[:person]&lt;/code&gt; would usually be a hash of all the attributes for the person to create. The &lt;code&gt;params&lt;/code&gt; hash can also contain arrays, arrays of hashes, and so on.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d374f127537e8c09cf17335c36cab4162f4ae45a" translate="yes" xml:space="preserve">
          <source>Values longer than 20 characters will be truncated. The value is truncated word by word.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="90d92e2ddc27f4ac06a3d48a1c2de0e4169277e3" translate="yes" xml:space="preserve">
          <source>Values set from user input will first be coerced into the appropriate ruby type. Coercion behavior is roughly mapped to Ruby's boolean semantics.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5700f937f14c9600df3c7814d8452af0ecb19e9a" translate="yes" xml:space="preserve">
          <source>Values set on &lt;a href=&quot;configuration#method-i-app_generators&quot;&gt;#app_generators&lt;/a&gt; will become defaults for application, unless application overwrites them.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5768d58066a6d1a4696ade8e571bb65592ec7e48" translate="yes" xml:space="preserve">
          <source>Values such as &lt;code&gt;[nil]&lt;/code&gt; or &lt;code&gt;[nil, nil, ...]&lt;/code&gt; in &lt;code&gt;params&lt;/code&gt; are replaced with &lt;code&gt;[]&lt;/code&gt; for security reasons by default. See &lt;a href=&quot;security#unsafe-query-generation&quot;&gt;Security Guide&lt;/a&gt; for more information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64adf9975415ea68a91f9f5189b34834e2c73e15" translate="yes" xml:space="preserve">
          <source>Variables defined in the methods of your mailer model are accessible as instance variables in their corresponding view.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cc91b1ea2c16519ab22614ae2929960a271dbb5c" translate="yes" xml:space="preserve">
          <source>Variant</source>
          <target state="translated">Variant</target>
        </trans-unit>
        <trans-unit id="1ebbf6cb1febc84cef8d1fb90c1da885aade5345" translate="yes" xml:space="preserve">
          <source>Variant#blob</source>
          <target state="translated">Variant#blob</target>
        </trans-unit>
        <trans-unit id="cf05bca5d7de9abb50f30de3db937695f25a538f" translate="yes" xml:space="preserve">
          <source>Variant#image</source>
          <target state="translated">Variant#image</target>
        </trans-unit>
        <trans-unit id="fce54cf5ae3558137753bcbda6f23efc55eb191e" translate="yes" xml:space="preserve">
          <source>Variant#key</source>
          <target state="translated">Variant#key</target>
        </trans-unit>
        <trans-unit id="084c8a2a9307ef18d7ae74bf5f0687adeca17d2b" translate="yes" xml:space="preserve">
          <source>Variant#processed</source>
          <target state="translated">Variant#processed</target>
        </trans-unit>
        <trans-unit id="4cbaf3c82ca9401302a99cee620f5ce1bf5e8e8a" translate="yes" xml:space="preserve">
          <source>Variant#service_url</source>
          <target state="translated">Variant#service_url</target>
        </trans-unit>
        <trans-unit id="d31b880ee662f11985cdf16b0d2b01c3e0d41411" translate="yes" xml:space="preserve">
          <source>Variant#variation</source>
          <target state="translated">Variant#variation</target>
        </trans-unit>
        <trans-unit id="79c4cb1ba570d8e6857a0098f6e94e73b78af027" translate="yes" xml:space="preserve">
          <source>Variant::new</source>
          <target state="translated">Variant::new</target>
        </trans-unit>
        <trans-unit id="319e0e33c16d31af795a2f7010fa84d1a1ae9eaf" translate="yes" xml:space="preserve">
          <source>Variants also support common &lt;code&gt;any&lt;/code&gt;/&lt;code&gt;all&lt;/code&gt; block that formats have.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4b6a806b5f82b5a5ba1da52f8681ee43c93b15e" translate="yes" xml:space="preserve">
          <source>Variants rely on &lt;a href=&quot;https://github.com/janko-m/image_processing&quot;&gt;ImageProcessing&lt;/a&gt; gem for the actual transformations of the file, so you must add &lt;code&gt;gem
&quot;image_processing&quot;&lt;/code&gt; to your Gemfile if you wish to use variants. By default, images will be processed with &lt;a href=&quot;http://imagemagick.org&quot;&gt;ImageMagick&lt;/a&gt; using the &lt;a href=&quot;https://github.com/minimagick/minimagick&quot;&gt;MiniMagick&lt;/a&gt; gem, but you can also switch to the &lt;a href=&quot;http://jcupitt.github.io/libvips/&quot;&gt;libvips&lt;/a&gt; processor operated by the &lt;a href=&quot;https://github.com/jcupitt/ruby-vips&quot;&gt;ruby-vips&lt;/a&gt; gem).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="15920a45faf632f2fdca0b9eea26e92547dcc0bf" translate="yes" xml:space="preserve">
          <source>Variation</source>
          <target state="translated">Variation</target>
        </trans-unit>
        <trans-unit id="f3d61f4c40e7452799c23f7370a9ce6c92ce7b44" translate="yes" xml:space="preserve">
          <source>Variation#key</source>
          <target state="translated">Variation#key</target>
        </trans-unit>
        <trans-unit id="a91a28bd82444cf5c8a847df56619e97ea85840b" translate="yes" xml:space="preserve">
          <source>Variation#transform</source>
          <target state="translated">Variation#transform</target>
        </trans-unit>
        <trans-unit id="66ae462f9edbc1cbfddcd235446eaa4e3e9fc80b" translate="yes" xml:space="preserve">
          <source>Variation#transformations</source>
          <target state="translated">Variation#transformations</target>
        </trans-unit>
        <trans-unit id="d35b48eba444755e6ab87e30a92f75f7fca5bafb" translate="yes" xml:space="preserve">
          <source>Variation::decode</source>
          <target state="translated">Variation::decode</target>
        </trans-unit>
        <trans-unit id="5eb4c4f1ff125b29fa8bdf48dfda9c80cd8549df" translate="yes" xml:space="preserve">
          <source>Variation::encode</source>
          <target state="translated">Variation::encode</target>
        </trans-unit>
        <trans-unit id="a7da1060e72aae4fe0fd8caa64c5722a56d767e6" translate="yes" xml:space="preserve">
          <source>Variation::new</source>
          <target state="translated">Variation::new</target>
        </trans-unit>
        <trans-unit id="f47a7455a52d0d0ef326dd35d846c646e3161bff" translate="yes" xml:space="preserve">
          <source>Variation::wrap</source>
          <target state="translated">Variation::wrap</target>
        </trans-unit>
        <trans-unit id="8ef6907701a65d0b41b004c8fe706912caa67ab8" translate="yes" xml:space="preserve">
          <source>Variations of &lt;a href=&quot;findermethods#method-i-find&quot;&gt;find&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a458cb9b2bdec174612eb212cdc8c0c99abcef51" translate="yes" xml:space="preserve">
          <source>Verbose Query Logs</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a03899f8ad47fb0c762591858b229265bba36533" translate="yes" xml:space="preserve">
          <source>Verbose query logs are enabled by default in the development environment logs after Rails 5.2.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="97a0b3c118281c4ccfdeaf988010555351ec4d55" translate="yes" xml:space="preserve">
          <source>Verifies existence of an index with a given name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5760da5a5da5cbad917abb4dd59eac80109c2e20" translate="yes" xml:space="preserve">
          <source>Verifies the existence of an index with a given name.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8cded5b9aaf370af103c0aa1094ae38a4aa2e210" translate="yes" xml:space="preserve">
          <source>Version 2.2 - November 2008</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8e17f51af3e1914213243aa81ee23ba4a30341c" translate="yes" xml:space="preserve">
          <source>Version 2.3 - March 2009</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="29523e7b7178a18b51fc813b45a7ca10e05808a5" translate="yes" xml:space="preserve">
          <source>Version 3.0 - August 2010</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b6c1c2061a56b072ba59cb0c0a7ce6e35c338416" translate="yes" xml:space="preserve">
          <source>Version 3.1 - August 2011</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4f38c53c179cb9118c9410709cd56253b82cdce4" translate="yes" xml:space="preserve">
          <source>Version 3.2 - January 2012</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ef103e57f81f797671dd23a649d68e4cdfa89480" translate="yes" xml:space="preserve">
          <source>Version 4.0 - June 2013</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3b5b8d38b37d175ca574ce8df5da6dee56c7b28" translate="yes" xml:space="preserve">
          <source>Version 4.1 - April 2014</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c8a1fef102390070f53e62e7c591b10cdb51b13" translate="yes" xml:space="preserve">
          <source>Version 4.2 - December 2014</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="22d6f26dec42074d6f355d9727ed700b37808224" translate="yes" xml:space="preserve">
          <source>Version 5.0 - June 2016</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ff1fa8bd890c4b744824597386b9da0731caa8e" translate="yes" xml:space="preserve">
          <source>Version 5.1 - April 2017</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b211c1618af3497a6eb3e18ca69c1f1db19dc49" translate="yes" xml:space="preserve">
          <source>Version 5.2 - April 2018</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f4958130cc67c07201808b083855af0b043d0925" translate="yes" xml:space="preserve">
          <source>Versus the CDN copy.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69a7be7d74e8b54ef69683eb73c3addbe24661a5" translate="yes" xml:space="preserve">
          <source>Via</source>
          <target state="translated">Via</target>
        </trans-unit>
        <trans-unit id="c9734f6499b89840948f2e3c2b7c47b9f45f11ee" translate="yes" xml:space="preserve">
          <source>View Helpers for Debugging</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78430d2fda6680f0e395b491d0282e5241d62986" translate="yes" xml:space="preserve">
          <source>View Paths</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0cfb068ec9d455c33b99a40e5a2e61a037705351" translate="yes" xml:space="preserve">
          <source>View a list of all your routes</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="08afad212f0be9b5e638a274d3e1cfac9547d8d1" translate="yes" xml:space="preserve">
          <source>ViewPaths</source>
          <target state="translated">ViewPaths</target>
        </trans-unit>
        <trans-unit id="a77261d3867c396f7c7610af1e83e16c6b8eba18" translate="yes" xml:space="preserve">
          <source>ViewPaths#append_view_path</source>
          <target state="translated">ViewPaths#append_view_path</target>
        </trans-unit>
        <trans-unit id="4bfc792e50de0e9805510514a1653cc06f92fe49" translate="yes" xml:space="preserve">
          <source>ViewPaths#details_for_lookup</source>
          <target state="translated">ViewPaths#details_for_lookup</target>
        </trans-unit>
        <trans-unit id="320f98df4fa951c66a1c14f7dea98789eedc9c4f" translate="yes" xml:space="preserve">
          <source>ViewPaths#lookup_context</source>
          <target state="translated">ViewPaths#lookup_context</target>
        </trans-unit>
        <trans-unit id="d4104b15eec8ac79a40530776a267cc655ac9e10" translate="yes" xml:space="preserve">
          <source>ViewPaths#prepend_view_path</source>
          <target state="translated">ViewPaths#prepend_view_path</target>
        </trans-unit>
        <trans-unit id="3024c5b9b4319a21c921058e991c41fd09de86e0" translate="yes" xml:space="preserve">
          <source>ViewPaths::ClassMethods</source>
          <target state="translated">ViewPaths::ClassMethods</target>
        </trans-unit>
        <trans-unit id="6f67d4bdd16c95504f9c72412ef4e34285d9b39b" translate="yes" xml:space="preserve">
          <source>ViewPaths::ClassMethods#append_view_path</source>
          <target state="translated">ViewPaths::ClassMethods#append_view_path</target>
        </trans-unit>
        <trans-unit id="14174bc924492f257e7a8bd813d042ddc7ce1d26" translate="yes" xml:space="preserve">
          <source>ViewPaths::ClassMethods#prepend_view_path</source>
          <target state="translated">ViewPaths::ClassMethods#prepend_view_path</target>
        </trans-unit>
        <trans-unit id="65704031fc2c361c8cf8378b7f6f0e2a064e1e6f" translate="yes" xml:space="preserve">
          <source>ViewPaths::ClassMethods#view_paths</source>
          <target state="translated">ViewPaths::ClassMethods#view_paths</target>
        </trans-unit>
        <trans-unit id="d093e8d241542fe96a01eee06d1979e0c4fa74e1" translate="yes" xml:space="preserve">
          <source>ViewPaths::ClassMethods#view_paths=</source>
          <target state="translated">ViewPaths::ClassMethods#view_paths=</target>
        </trans-unit>
        <trans-unit id="24be61285e096fa817d4cdb0a0ed8294ea5bd2fb" translate="yes" xml:space="preserve">
          <source>Views</source>
          <target state="translated">Views</target>
        </trans-unit>
        <trans-unit id="cc0a43b53de35d76033970850208bca0446bb503" translate="yes" xml:space="preserve">
          <source>Views of the controller are stored here</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d08fe758cc443e8833c432605507d384e194a6b" translate="yes" xml:space="preserve">
          <source>Visit the following links for a list of available ImageProcessing commands and ImageMagick/libvips operations:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bdc752c9be3af97e684d1ccc96f6f02a311f7cc3" translate="yes" xml:space="preserve">
          <source>Vocabulary</source>
          <target state="translated">Vocabulary</target>
        </trans-unit>
        <trans-unit id="a2e8043ece674da22afc45fed36cfb79559fbb0d" translate="yes" xml:space="preserve">
          <source>WARNING: &lt;code&gt;content_for&lt;/code&gt; is ignored in caches. So you shouldn't use it for elements that will be fragment cached.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ee60cdc3ada497395d10d46b78075ee653c48698" translate="yes" xml:space="preserve">
          <source>WARNING: The instrumentation framework is designed for long-running subscribers, use this feature sparingly because it wipes some internal caches and that has a negative impact on performance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6e760f2bbde93bd56121f6bc045230dd68f709f9" translate="yes" xml:space="preserve">
          <source>WARNING: This validation must not be used on both ends of an association. Doing so will lead to a circular dependency and cause infinite recursion.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dfd3facc8e523ca55e2b27b930498a9c83232fa6" translate="yes" xml:space="preserve">
          <source>WARNING: this helper only works with valid JSON. Using this on non-JSON values will open up serious XSS vulnerabilities. For example, if you replace the &lt;code&gt;current_user.to_json&lt;/code&gt; in the example above with user input instead, the browser will happily eval() that string as JavaScript.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b1051102d01e44761f374446c27c97e8b87de41c" translate="yes" xml:space="preserve">
          <source>WEB_IMAGE_CONTENT_TYPES</source>
          <target state="translated">WEB_IMAGE_CONTENT_TYPES</target>
        </trans-unit>
        <trans-unit id="299decfbd735112c1a5007294bc1f4c4a258baa1" translate="yes" xml:space="preserve">
          <source>WEBrick servers buffer all responses, and so including &lt;code&gt;ActionController::Live&lt;/code&gt; will not work. You must use a web server which does not automatically buffer responses.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af92ecf91686bf2e99b9dd00a6ac5a31ea826c64" translate="yes" xml:space="preserve">
          <source>WEEKEND_DAYS</source>
          <target state="translated">WEEKEND_DAYS</target>
        </trans-unit>
        <trans-unit id="40d23f3b3af90554dade75ca1449213a1776239f" translate="yes" xml:space="preserve">
          <source>WHITE</source>
          <target state="translated">WHITE</target>
        </trans-unit>
        <trans-unit id="4d7285cafd4ab47eeb444f812e48e1fb97a945a6" translate="yes" xml:space="preserve">
          <source>WIP: Not all the helpers are listed here. For a full list see the &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/ActionView/Helpers.html&quot;&gt;API documentation&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="27dc0925dbb0875327e5c55ee8c69902566ebe96" translate="yes" xml:space="preserve">
          <source>Wait notifications to be published.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7cebd14f08ab49c4cc3ac3e9740b274ae40810f1" translate="yes" xml:space="preserve">
          <source>Walkthrough to Generating a Mailer</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6eb0c9e3dc0c281b408b4ce67a3fdb6bca09bd74" translate="yes" xml:space="preserve">
          <source>Warnings, gotchas or tips that might help users and save them time</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4a225a7e421157620fcd0d618d25d5daea5cfcf3" translate="yes" xml:space="preserve">
          <source>Was the delegate loaded, causing the mailer action to be processed?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2caac259998a19a0b82d6ff21bd354498ad7eefc" translate="yes" xml:space="preserve">
          <source>Was this exception raised because the given name was missing?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e6c4ce2fbb29b0bb74563ebfc6cda037566f3d08" translate="yes" xml:space="preserve">
          <source>We also want to allow only authenticated users to delete comments, so in the &lt;code&gt;CommentsController&lt;/code&gt; (&lt;code&gt;app/controllers/comments_controller.rb&lt;/code&gt;) we write:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5597fb441fd4a1e3152a150399496097ca814d37" translate="yes" xml:space="preserve">
          <source>We are able to call the methods like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="674ecbc23144b4d1cdf785619bb9c8f8e150f2ae" translate="yes" xml:space="preserve">
          <source>We are going to cover how constant autoloading works in more detail later, but the idea is that when a constant like &lt;code&gt;Post&lt;/code&gt; is hit and missing, if there's a &lt;code&gt;post.rb&lt;/code&gt; file for example in &lt;code&gt;app/models&lt;/code&gt; Rails is going to find it, evaluate it, and have &lt;code&gt;Post&lt;/code&gt; defined as a side-effect.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e984878fb53aff11a66108b7ca69680f0f0411df" translate="yes" xml:space="preserve">
          <source>We call &lt;em&gt;autoload paths&lt;/em&gt; to the list of application directories whose contents are to be autoloaded. For example, &lt;code&gt;app/models&lt;/code&gt;. Such directories represent the root namespace: &lt;code&gt;Object&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="158c098bf791e16a613f557387ab53daa7f7c6ca" translate="yes" xml:space="preserve">
          <source>We call this 'unobtrusive' JavaScript because we're no longer mixing our JavaScript into our HTML. We've properly separated our concerns, making future change easy. We can easily add behavior to any link by adding the data attribute. We can run all of our JavaScript through a minimizer and concatenator. We can serve our entire JavaScript bundle on every page, which means that it'll get downloaded on the first page load and then be cached on every page after that. Lots of little benefits really add up.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45d7b2227d635b0a2cac1d9b60d848a104986cee" translate="yes" xml:space="preserve">
          <source>We can achieve this in two ways. The first is to use &lt;code&gt;create_with&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d006ab704ee27e4d7971b50c941bb36b13942b80" translate="yes" xml:space="preserve">
          <source>We can add other locations and give them a certain precedence when resolving paths using the &lt;code&gt;prepend_view_path&lt;/code&gt; and &lt;code&gt;append_view_path&lt;/code&gt; methods.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="60f96ebdc972aee31fd3e28df505ab9034f58590" translate="yes" xml:space="preserve">
          <source>We can also add a test for updating an existing Article.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fd05c98d271d3659c58c6aca0bdad1b98162be45" translate="yes" xml:space="preserve">
          <source>We can also pass in the symbol arguments instead of strings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2a5945ca3693e9a07a3ced8ffe36836cc1e5368a" translate="yes" xml:space="preserve">
          <source>We can also see that our new generator has a class method called &lt;code&gt;source_root&lt;/code&gt;. This method points to where our generator templates will be placed, if any, and by default it points to the created directory &lt;code&gt;lib/generators/initializer/templates&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e5c17c70425bc282e5f632f739761b7ac072ab15" translate="yes" xml:space="preserve">
          <source>We can also set the locale from the &lt;em&gt;subdomain&lt;/em&gt; in a very similar way:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="73e8aa9cf06c7b905a18521d06b56328e8e076ef" translate="yes" xml:space="preserve">
          <source>We can detach a subscriber as well:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2461ab48a48cc7fd7ca68271451ce166765dd8c1" translate="yes" xml:space="preserve">
          <source>We can do this by using:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f29e014ab286c906b45549a0efc2101199a46f0d" translate="yes" xml:space="preserve">
          <source>We can easily simulate this behavior by changing our &lt;code&gt;config/application.rb&lt;/code&gt; once again:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="671986b1c75b856b2f16d053ed41b695a0b6c2d0" translate="yes" xml:space="preserve">
          <source>We can improve upon the situation further by referencing both associations in the finder with:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8f9f17b3a72f43793c39b51e4f807af49d66692a" translate="yes" xml:space="preserve">
          <source>We can include something like this in our &lt;code&gt;ApplicationController&lt;/code&gt; then:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fef2b7b6094cfeac80754e509876d8b1cb897617" translate="yes" xml:space="preserve">
          <source>We can mix and match &lt;code&gt;scope&lt;/code&gt; and &lt;code&gt;where&lt;/code&gt; conditions and the final sql will have all conditions joined with &lt;code&gt;AND&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="25cb9b87a15d330a11745a3f48d175290efd0104" translate="yes" xml:space="preserve">
          <source>We can mix and match these two concepts. One element of a hash might be an array as in the previous example, or you can have an array of hashes. For example, a form might let you create any number of addresses by repeating the following form fragment</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc6819d94def13c221c19ffe706c8fae83893aa2" translate="yes" xml:space="preserve">
          <source>We can notice on the output that our new helper was invoked instead of the Rails default. However one thing is missing, which is tests for our new generator and to do that, we are going to reuse old helpers test generators.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0468e35a369b93b1b16b95a37bc73d5315229e1c" translate="yes" xml:space="preserve">
          <source>We can run all of our tests at once by using the &lt;code&gt;rails test&lt;/code&gt; command.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d38a51f63747d2436139903e5bc3ed829bf1722" translate="yes" xml:space="preserve">
          <source>We can see how it works by looking at some &lt;code&gt;rails console&lt;/code&gt; output:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="01a1baf74a78b8f20f805911d9a8b84c2922e0ca" translate="yes" xml:space="preserve">
          <source>We can see in this example that the name of a class or module that belongs to a certain nesting does not necessarily correlate with the namespaces at the spot.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be2a93364734b3fcdc7789f4a368481d9597ef1c" translate="yes" xml:space="preserve">
          <source>We can see that by invoking the description of this new generator (don't forget to delete the old generator file):</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6d2024991dba3905de582d767072f01911bd0d36" translate="yes" xml:space="preserve">
          <source>We can see that now an initializer named core_extensions was created at &lt;code&gt;config/initializers/core_extensions.rb&lt;/code&gt; with the contents of our template. That means that &lt;code&gt;copy_file&lt;/code&gt; copied a file in our source root to the destination path we gave. The method &lt;code&gt;file_name&lt;/code&gt; is automatically created when we inherit from &lt;code&gt;Rails::Generators::NamedBase&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e820cc6d7557cbdde9b1f7da39dd1eeb92aba846" translate="yes" xml:space="preserve">
          <source>We can test the output of this method like this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be2f3584318b837bc0d2a9930c88ab57e12e159b" translate="yes" xml:space="preserve">
          <source>We can try out our new generator by creating a helper for products:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="988076117425df2e6aa7ffaa293e0e2a4f6179f1" translate="yes" xml:space="preserve">
          <source>We can't distinguish a &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag's origin&amp;mdash;whether it's a tag on your own site or on some other malicious site&amp;mdash;so we must block all &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; across the board, even if it's actually a safe same-origin script served from your own site. In these cases, explicitly skip CSRF protection on actions that serve JavaScript meant for a &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43dd581f3c1b42e5ea1b1293196c423436420c0f" translate="yes" xml:space="preserve">
          <source>We don&amp;rsquo;t bump dependencies just to encourage use of new versions, including for security issues. This is because application owners need to manually update their gems regardless of our efforts. Use &lt;code&gt;bundle update --conservative gem_name&lt;/code&gt; to safely update vulnerable dependencies.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="517d3ba81d6b07ef763f75a5074b23149aa43b40" translate="yes" xml:space="preserve">
          <source>We don't want to use the whole &amp;ldquo;encryption stack&amp;rdquo; for connection unit-tests, but we want to make sure that users test against the correct types of cookies (i.e. signed or encrypted or plain)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77f455faf6ade11252b257d5515c568205713174" translate="yes" xml:space="preserve">
          <source>We had to create the &lt;strong&gt;gitapp&lt;/strong&gt; directory and initialize an empty git repository before Rails would add files it created to our repository. Let's see what it put in our database configuration:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7f13236051ab994384c1a30307aac3630cdf19c8" translate="yes" xml:space="preserve">
          <source>We have to define our permitted controller parameters to prevent wrongful mass assignment. In this case, we want to both allow and require the &lt;code&gt;title&lt;/code&gt; and &lt;code&gt;text&lt;/code&gt; parameters for valid use of &lt;code&gt;create&lt;/code&gt;. The syntax for this introduces &lt;code&gt;require&lt;/code&gt; and &lt;code&gt;permit&lt;/code&gt;. The change will involve one line in the &lt;code&gt;create&lt;/code&gt; action:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9135c45478b9c5024a0ede42b557604327de6716" translate="yes" xml:space="preserve">
          <source>We may want to disable CSRF protection for APIs since they are typically designed to be state-less. That is, the request &lt;a href=&quot;api&quot;&gt;API&lt;/a&gt; client will handle the session for you instead of Rails.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23cac8b8050308a836a07beb92d693696614f8bb" translate="yes" xml:space="preserve">
          <source>We need to store the &lt;a href=&quot;generators#RAILS_DEV_PATH&quot;&gt;RAILS_DEV_PATH&lt;/a&gt; in a constant, otherwise the path can change in Ruby 1.8.7 when we FileUtils.cd.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc98ca6ae3281fe5ac661f54e9a6b0e529873ba2" translate="yes" xml:space="preserve">
          <source>We often find ourselves with a medium-sized chunk of behavior that we'd like to extract, but only mix in to a single class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f93b715190506ee3f1c41e95e1f22115faecb785" translate="yes" xml:space="preserve">
          <source>We often need to iterate over a large set of records, as when we send a newsletter to a large set of users, or when we export data.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b4ba83b3173b99928fe5dd25dde5519737fdcf6" translate="yes" xml:space="preserve">
          <source>We often want to render different html/json/xml templates for phones, tablets, and desktop browsers. Variants make it easy.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab597975bed681fdb296905f3831e1248c42c3b3" translate="yes" xml:space="preserve">
          <source>We override this in the sqlite3 and postgresql adapters to use only the column name (as per syntax requirements).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4413ece56758f843156efc2e004d815da81905ff" translate="yes" xml:space="preserve">
          <source>We pass &lt;code&gt;id: false&lt;/code&gt; to &lt;code&gt;create_table&lt;/code&gt; because that table does not represent a model. That's required for the association to work properly. If you observe any strange behavior in a &lt;code&gt;has_and_belongs_to_many&lt;/code&gt; association like mangled model IDs, or exceptions about conflicting IDs, chances are you forgot that bit.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7fee75db6450cb2fa5440d3ea28269a8848f74df" translate="yes" xml:space="preserve">
          <source>We recommend against using this setting in production environments. It relies on Ruby's &lt;code&gt;Kernel#caller&lt;/code&gt; method which tends to allocate a lot of memory in order to generate stacktraces of method calls.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="598ad582df169550ec2a05dad6dc014c3f36a551" translate="yes" xml:space="preserve">
          <source>We reuse the &lt;code&gt;article_params&lt;/code&gt; method that we defined earlier for the create action.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4689ed968b7698f822bbde5b4716d0e09d3ae563" translate="yes" xml:space="preserve">
          <source>We start by calling the &lt;code&gt;:new&lt;/code&gt; action on our Articles controller. This response should be successful.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb2d3dc0dbaa073429414d4a0570d3c5c87cf5a5" translate="yes" xml:space="preserve">
          <source>We still need a way to list all our articles, so let's do that. The route for this as per output of &lt;code&gt;rails routes&lt;/code&gt; is:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="386d303e4a3e14aac757da3b562d6d7ab4f23a12" translate="yes" xml:space="preserve">
          <source>We use the &lt;code&gt;delete&lt;/code&gt; method for destroying resources, and this route is mapped to the &lt;code&gt;destroy&lt;/code&gt; action inside &lt;code&gt;app/controllers/articles_controller.rb&lt;/code&gt;, which doesn't exist yet. The &lt;code&gt;destroy&lt;/code&gt; method is generally the last CRUD action in the controller, and like the other public CRUD actions, it must be placed before any &lt;code&gt;private&lt;/code&gt; or &lt;code&gt;protected&lt;/code&gt; methods. Let's add it:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db9f005888bcc67e9d1a7d8e26cd233984d79f30" translate="yes" xml:space="preserve">
          <source>We want to add a &lt;code&gt;flash&lt;/code&gt; message to our blog application whenever someone successfully creates a new Article.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1d5686b34c1f72bc6d9677d7ddd5606fc194c062" translate="yes" xml:space="preserve">
          <source>We were able to successfully test a very small workflow for visiting our blog and creating a new article. If we wanted to take this further we could add tests for commenting, removing articles, or editing comments. Integration tests are a great place to experiment with all kinds of use cases for our applications.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb0bc5f2a0af19baa04cd89f2e7e17c0bccaf2bf" translate="yes" xml:space="preserve">
          <source>We will also add code to define the &lt;code&gt;acts_as_yaffle&lt;/code&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77c6582bd3fe3362720bd7a8b7d2e096e44434e8" translate="yes" xml:space="preserve">
          <source>We will be deprecating the use of &lt;code&gt;render :text&lt;/code&gt; in a future version. So please start using the more precise &lt;code&gt;:plain&lt;/code&gt;, &lt;code&gt;:html&lt;/code&gt;, and &lt;code&gt;:body&lt;/code&gt; options instead. Using &lt;code&gt;render :text&lt;/code&gt; may pose a security risk, as the content is sent as &lt;code&gt;text/html&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e10c11c72647528df053e440cfdf6cd1b5232923" translate="yes" xml:space="preserve">
          <source>We will be redirected back to the articles index page and there we assert that the text from the new article's title is on the articles index page.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca2a76503c2daca7ff0d901068d3558daac36b14" translate="yes" xml:space="preserve">
          <source>We will set up a simple resource called &quot;HighScore&quot; that will keep track of our highest score on video games we play.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a153c35b15dc1ba45b477ea77bf677c1bd87303b" translate="yes" xml:space="preserve">
          <source>We will take a look at &lt;code&gt;assert_select&lt;/code&gt; to query the resulting HTML of a request in the &quot;Testing Views&quot; section below. It is used for testing the response of our request by asserting the presence of key HTML elements and their content.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6a10ac9549cf6a77795a3a9fce4918b95fd9124e" translate="yes" xml:space="preserve">
          <source>We won't dig into the server configuration itself, but this is the last piece of our journey in the Rails initialization process.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="691cdc30ae7b6c06dccc449b81aeaae6287dbe5b" translate="yes" xml:space="preserve">
          <source>We'll cover validation errors in greater depth in the &lt;a href=&quot;#working-with-validation-errors&quot;&gt;Working with Validation Errors&lt;/a&gt; section.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8081622cc93f1b7df35fe01c9c1d6af41f86595" translate="yes" xml:space="preserve">
          <source>We'll start by generating our integration test skeleton:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="48cb234ea63e47db5a7d0886a550a6f6493ae294" translate="yes" xml:space="preserve">
          <source>We're going to see the same generator that we used before when creating the &lt;code&gt;Article&lt;/code&gt; model. This time we'll create a &lt;code&gt;Comment&lt;/code&gt; model to hold a reference to an article. Run this command in your terminal:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2432a238cbf87e5d31e0c2da682062f2bea384f6" translate="yes" xml:space="preserve">
          <source>We're now ready to cover the &quot;D&quot; part of CRUD, deleting articles from the database. Following the REST convention, the route for deleting articles as per output of &lt;code&gt;rails routes&lt;/code&gt; is:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bed2fd2a7e71a99ceca5ee6a4f7ad67dac5876a7" translate="yes" xml:space="preserve">
          <source>We've covered the &quot;CR&quot; part of CRUD. Now let's focus on the &quot;U&quot; part, updating articles.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab6e6b9f618b70a68d436f247846a40e619f778a" translate="yes" xml:space="preserve">
          <source>Weak ETags are considered to be semantically equivalent but not byte-for-byte identical. This is perfect for browser caching of HTML pages where we don't care about exact equality, just what the user is viewing.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1efac46adc87ab5e99b26566d02e756f2c0ac46" translate="yes" xml:space="preserve">
          <source>Weak ETags are what we almost always need, so they're the default. Check out &lt;a href=&quot;response#method-i-strong_etag-3D&quot;&gt;strong_etag=&lt;/a&gt; to provide a strong ETag validator.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1809c79cb6993ea5165a1e1a7aba04c7dd6c2e17" translate="yes" xml:space="preserve">
          <source>Weak ETags have a leading &lt;code&gt;W/&lt;/code&gt; to differentiate them from strong ETags.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b9b9b2ee5726745022f21194fc8ef89c2b16d1d0" translate="yes" xml:space="preserve">
          <source>Web Console</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5db3d41b2112390b308d756fcf86fb277aea165d" translate="yes" xml:space="preserve">
          <source>Web Console is a bit like &lt;code&gt;byebug&lt;/code&gt;, but it runs in the browser. In any page you are developing, you can request a console in the context of a view or a controller. The console would be rendered next to your HTML content.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4b13fcfbda413aee7f023233e61f35cf81af0f17" translate="yes" xml:space="preserve">
          <source>Web application frameworks are made to help developers build web applications. Some of them also help you with securing the web application. In fact one framework is not more secure than another: If you use it correctly, you will be able to build secure apps with many frameworks. Ruby on Rails has some clever helper methods, for example against SQL injection, so that this is hardly a problem.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9459860984e13bab0b19b2b839d079cd058433a8" translate="yes" xml:space="preserve">
          <source>Web server support</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3a632997ac534438cd8c7edb335b4db1970be6a" translate="yes" xml:space="preserve">
          <source>What Action Cable is and its integration backend and frontend</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1da74eaae94addafb45efbffe7cc81eba07ef0b1" translate="yes" xml:space="preserve">
          <source>What Action View is and how to use it with Rails.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f23b42ccb59d8b1e94efd1ce43552074b550775c" translate="yes" xml:space="preserve">
          <source>What Core Extensions are.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b3e557cc5eb5d49af393a6975a0fdfa6c35c59ba" translate="yes" xml:space="preserve">
          <source>What Does a Controller Do?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5808a900063fa17fa58def0da49f6fe152fe47df" translate="yes" xml:space="preserve">
          <source>What Gets Uploaded</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="377640760eee84961d2597103438b89b3f4cfa3f" translate="yes" xml:space="preserve">
          <source>What Object Relational Mapping and Active Record are and how they are used in Rails.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="731aed874aa7562696a22b8345f05ee0bbef9ac1" translate="yes" xml:space="preserve">
          <source>What Rails provides for API-only applications</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dc735b4a91689a6b0c1cd2a521cf567d7b434e98" translate="yes" xml:space="preserve">
          <source>What all did this generate? It made sure a bunch of directories were in our application, and created a controller file, a view file, a functional test file, a helper for the view, a JavaScript file, and a stylesheet file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5331cbb3aab936a45b55b0258419f877600a5970" translate="yes" xml:space="preserve">
          <source>What are &lt;code&gt;on_load&lt;/code&gt; hooks?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="61980490925b2287fbd6e03eba35fc86d21c4601" translate="yes" xml:space="preserve">
          <source>What are Schema Files for?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a8e230295d6da231e35ba0da6a98ee97cef06624" translate="yes" xml:space="preserve">
          <source>What are Sessions?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="18753ba5f3591b086952d3a88034a5c0b0c96ea1" translate="yes" xml:space="preserve">
          <source>What are engines?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fe645fceba7cb5bffc3a665941912046e3a21c94" translate="yes" xml:space="preserve">
          <source>What are the &lt;code&gt;autoload_paths&lt;/code&gt; and how does eager loading work in production?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d295ebe7c060d87e9a7904f3c26eda1e85a27413" translate="yes" xml:space="preserve">
          <source>What can be written like this with the regular calls to column:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c370d90e9cfbca6a3d3d41e1f07192abe838d2f4" translate="yes" xml:space="preserve">
          <source>What code Rails will automatically execute concurrently</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5507f34300cda018ef142c69fc5871f3373c40bb" translate="yes" xml:space="preserve">
          <source>What date and time helpers Rails provides.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="707e2c0ad1b42dd6b5323c58d12996b2cd43585c" translate="yes" xml:space="preserve">
          <source>What extensions Active Support provides.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a62c204fac121cf84945fcd1b32f3cd8a2fcc074" translate="yes" xml:space="preserve">
          <source>What features are supported and what's still a work in progress.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6b6230b58382dd496e7de5884d9da552f1660df" translate="yes" xml:space="preserve">
          <source>What gets deleted?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="883f686d758fc7dd93d88c6c17345881cb2ab4d6" translate="yes" xml:space="preserve">
          <source>What happens is that Rails puts the string into the Location header field and sends a 302 (redirect) status to the browser. The first thing a malicious user would do, is this:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="637714eacdf4d49939fad1c1bcac935defb3e06a" translate="yes" xml:space="preserve">
          <source>What helpers are provided by Action View.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="84ad34fa9714027d7d5f3eb91f0ecc477bfe5a7a" translate="yes" xml:space="preserve">
          <source>What if you need to follow a different naming convention or need to use your Rails application with a legacy database? No problem, you can easily override the default conventions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="16968bfee38573c60cb9126c18ff6ec79984cf42" translate="yes" xml:space="preserve">
          <source>What if you want to render a template from an entirely different controller from the one that contains the action code? You can also do that with &lt;code&gt;render&lt;/code&gt;, which accepts the full path (relative to &lt;code&gt;app/views&lt;/code&gt;) of the template to render. For example, if you're running code in an &lt;code&gt;AdminProductsController&lt;/code&gt; that lives in &lt;code&gt;app/controllers/admin&lt;/code&gt;, you can render the results of an action to a template in &lt;code&gt;app/views/products&lt;/code&gt; this way:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bfcbd26fb8792616656cadecb0a102ca942ad797" translate="yes" xml:space="preserve">
          <source>What instrumentation can provide.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b7510d5c855b0466de31658d924b9b24c576d27" translate="yes" xml:space="preserve">
          <source>What is &lt;a href=&quot;optimistic&quot;&gt;Optimistic&lt;/a&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ffe9bde2548568650a087bb9f56844ea838c8ee6" translate="yes" xml:space="preserve">
          <source>What is &lt;code&gt;require_dependency&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1daaa6123f7f78197717b9c04c2225cfe869416f" translate="yes" xml:space="preserve">
          <source>What is Action View?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4271fcb36c696c0f14de5c35ec1841aba9789b24" translate="yes" xml:space="preserve">
          <source>What is Active Record?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="55044abdd93bfa7aa0fb954e641bd0b1d01ae9b0" translate="yes" xml:space="preserve">
          <source>What is Active Storage?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91a2de52cedb56ac3998839b193aa1e475ab4ad5" translate="yes" xml:space="preserve">
          <source>What is Fingerprinting and Why Should I Care?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="211d0a0c0924f1407ad9be67d7e72c97bc720e49" translate="yes" xml:space="preserve">
          <source>What is Pub/Sub</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9d0ec7f0a54c4ec9b7f19d205b0e3ea2bc07aa67" translate="yes" xml:space="preserve">
          <source>What is Rails?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aadb021c7938ecb68d4c5c03234d9e87705fca62" translate="yes" xml:space="preserve">
          <source>What is an API Application?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b34de056fb84303ea45fbd5f5d73c535ad7672d5" translate="yes" xml:space="preserve">
          <source>What is described above are the defaults with a newly generated Rails app. There are multiple ways this can be configured differently (see &lt;a href=&quot;configuring#rails-general-configuration&quot;&gt;Configuring Rails Applications&lt;/a&gt;. ). But using &lt;code&gt;autoload_paths&lt;/code&gt; on its own in the past (before Rails 5) developers might configure &lt;code&gt;autoload_paths&lt;/code&gt; to add in extra locations (e.g. &lt;code&gt;lib&lt;/code&gt; which used to be an autoload path list years ago, but no longer is). However this is now discouraged for most purposes, as it is likely to lead to production-only errors. It is possible to add new locations to both &lt;code&gt;config.eager_load_paths&lt;/code&gt; and &lt;code&gt;config.autoload_paths&lt;/code&gt; but use at your own risk.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a7db466839adbfdf088467c12b16bb3fef88e784" translate="yes" xml:space="preserve">
          <source>What is the Asset Pipeline?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e118285478ff4646fc09fbec324b9e7e1a9707d8" translate="yes" xml:space="preserve">
          <source>What is the Logger?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f060f003e3e2c1860322ce1f1abe12370a1e7205" translate="yes" xml:space="preserve">
          <source>What makes a file upload form different.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="17c46f2185e25674c663db7f9762acaf61fb891e" translate="yes" xml:space="preserve">
          <source>What makes an engine.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="735318354513c0ce7ddbc7d0ad50e85efde82d76" translate="yes" xml:space="preserve">
          <source>What that says is, &amp;ldquo;if the client wants HTML or JS in response to this action, just respond as we would have before, but if the client wants XML, return them the list of people in XML format.&amp;rdquo; (Rails determines the desired response format from the HTTP Accept header submitted by the client.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3b02bce111cfb857b7949cef7571c4947bf68733" translate="yes" xml:space="preserve">
          <source>What the asset pipeline is and what it does.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9bd95d92fe357c3a610a687a84bcef23484537c2" translate="yes" xml:space="preserve">
          <source>What this isolation of the namespace means is that a model generated by a call to &lt;code&gt;rails g model&lt;/code&gt;, such as &lt;code&gt;rails g model article&lt;/code&gt;, won't be called &lt;code&gt;Article&lt;/code&gt;, but instead be namespaced and called &lt;code&gt;Blorgh::Article&lt;/code&gt;. In addition, the table for the model is namespaced, becoming &lt;code&gt;blorgh_articles&lt;/code&gt;, rather than simply &lt;code&gt;articles&lt;/code&gt;. Similar to the model namespacing, a controller called &lt;code&gt;ArticlesController&lt;/code&gt; becomes &lt;code&gt;Blorgh::ArticlesController&lt;/code&gt; and the views for that controller will not be at &lt;code&gt;app/views/articles&lt;/code&gt;, but &lt;code&gt;app/views/blorgh/articles&lt;/code&gt; instead. Mailers are namespaced as well.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="239f63ac463508b40e526c47f96b3b39a0046c8f" translate="yes" xml:space="preserve">
          <source>What to include in your Functional Tests</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b27f6f85f9c4e479fb6f422e48bab7cafd3e56ba" translate="yes" xml:space="preserve">
          <source>What versions of Ruby on Rails are currently supported, and when to expect new versions.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="331888654b4dabb3a255cf4c53c2bfe533404fb8" translate="yes" xml:space="preserve">
          <source>What you have to pay attention to when working with files or providing an administration interface.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b4b55f6cfd078420bf0221c4065d97c6d4136bb1" translate="yes" xml:space="preserve">
          <source>What's Next?</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="feeb2e55f8b3b7efdc2b9943e6ad0ed6e3caa46b" translate="yes" xml:space="preserve">
          <source>Whatever the name, you must manually generate the join table with an appropriate migration. For example, consider these associations:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad6a0728457c013305f4a2c08710aba0556181ef" translate="yes" xml:space="preserve">
          <source>When &lt;a href=&quot;../querymethods#method-i-where&quot;&gt;ActiveRecord::Base.where&lt;/a&gt; is called, it will use the type defined by the model class to convert the value to SQL, calling &lt;code&gt;serialize&lt;/code&gt; on your type object. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="efe0a05236142bfa202038bc2d6d613ee18dbec5" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;:autosave&lt;/code&gt; is not declared new children are saved when their parent is saved:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e75fe6e5264d07423781d81d9474c20fb60be7c" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;:autosave&lt;/code&gt; is true all children are saved, no matter whether they are new records or not:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ca35aa659a5c1de3f47d7fc3fb8c6d55084116ca" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;:include_blank&lt;/code&gt; or &lt;code&gt;:prompt&lt;/code&gt; are not present, &lt;code&gt;:include_blank&lt;/code&gt; is forced true if the select attribute &lt;code&gt;required&lt;/code&gt; is true, display &lt;code&gt;size&lt;/code&gt; is one, and &lt;code&gt;multiple&lt;/code&gt; is not true.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2843d3495329a2af8182ca2c8d53bd7cefa5545" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;:instance_reader&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt;, the instance predicate returns a &lt;code&gt;NoMethodError&lt;/code&gt; just like the reader method.</source>
          <target state="new"/>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
