<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ko" datatype="htmlbody" original="rails">
    <body>
      <group id="rails">
        <trans-unit id="11424233e768847d3266423079cdc824e54208cd" translate="yes" xml:space="preserve">
          <source>Attached::One#blank?</source>
          <target state="translated">Attached::One#blank?</target>
        </trans-unit>
        <trans-unit id="8ae3a7bed37ab4f0defad6c15f0f48aad669f682" translate="yes" xml:space="preserve">
          <source>Attached::One#detach</source>
          <target state="translated">Attached::One#detach</target>
        </trans-unit>
        <trans-unit id="685ab8ae18a2351e0b0ea6fbda8cbd9a89c86730" translate="yes" xml:space="preserve">
          <source>Attached::One#purge</source>
          <target state="translated">Attached::One#purge</target>
        </trans-unit>
        <trans-unit id="93453d44fdaae67b5b80ab7708f96e27937e77b4" translate="yes" xml:space="preserve">
          <source>Attached::One#purge_later</source>
          <target state="translated">Attached::One#purge_later</target>
        </trans-unit>
        <trans-unit id="d977d1420192c1c019baf7a4f25181e58df91f97" translate="yes" xml:space="preserve">
          <source>Attached::new</source>
          <target state="translated">Attached::new</target>
        </trans-unit>
        <trans-unit id="6d534afdf781f4bb515241843aae7bdf7eb19229" translate="yes" xml:space="preserve">
          <source>Attaches an &lt;code&gt;attachable&lt;/code&gt; to the record.</source>
          <target state="translated">부착 &lt;code&gt;attachable&lt;/code&gt; 기록을합니다.</target>
        </trans-unit>
        <trans-unit id="f3b1bd044860d8ace5531413441b90f181c11e3b" translate="yes" xml:space="preserve">
          <source>Attaches one or more &lt;code&gt;attachables&lt;/code&gt; to the record.</source>
          <target state="translated">하나 이상의 첨부 &lt;code&gt;attachables&lt;/code&gt; 기록을합니다.</target>
        </trans-unit>
        <trans-unit id="93907acaebb9ed407168f8b419d2d0b1e943d01b" translate="yes" xml:space="preserve">
          <source>Attaches the stored job data to the current instance. Receives a hash returned from &lt;code&gt;serialize&lt;/code&gt;</source>
          <target state="translated">저장된 작업 데이터를 현재 인스턴스에 첨부합니다. &lt;code&gt;serialize&lt;/code&gt; 에서 반환 된 해시를받습니다.</target>
        </trans-unit>
        <trans-unit id="e9472dd2fad9bf83e3c90525254c0933d6f08f21" translate="yes" xml:space="preserve">
          <source>Attaching File/IO Objects</source>
          <target state="translated">파일 / IO 객체 첨부</target>
        </trans-unit>
        <trans-unit id="09c820291ba1639c344cae2eb54113a53189698b" translate="yes" xml:space="preserve">
          <source>Attaching Files to Records</source>
          <target state="translated">레코드에 파일 첨부</target>
        </trans-unit>
        <trans-unit id="83a56249e5cff48f561d2d725143f1fc2eb3228c" translate="yes" xml:space="preserve">
          <source>Attachment</source>
          <target state="translated">Attachment</target>
        </trans-unit>
        <trans-unit id="6f4d6538d20f508f6906574ab58775678fda96a8" translate="yes" xml:space="preserve">
          <source>Attachment#purge</source>
          <target state="translated">Attachment#purge</target>
        </trans-unit>
        <trans-unit id="fddcd3b8491309fcfa9d3c0fd749b5dd0bf16741" translate="yes" xml:space="preserve">
          <source>Attachment#purge_later</source>
          <target state="translated">Attachment#purge_later</target>
        </trans-unit>
        <trans-unit id="6771ade6e8965a499bc298107ffb52e9a18dd7e3" translate="yes" xml:space="preserve">
          <source>Attachments</source>
          <target state="translated">Attachments</target>
        </trans-unit>
        <trans-unit id="f42fa310d306f581dd200948e59b22d9cea5f0d8" translate="yes" xml:space="preserve">
          <source>Attachments associate records with blobs. Usually that's a one record-many blobs relationship, but it is possible to associate many different records with the same blob. A foreign-key constraint on the attachments table prevents blobs from being purged if they&amp;rsquo;re still attached to any records.</source>
          <target state="translated">첨부는 레코드를 blob과 연관시킵니다. 일반적으로 이는 하나의 레코드-많은 얼룩 관계이지만 많은 다른 레코드를 동일한 얼룩과 연관시킬 수 있습니다. 첨부 파일 테이블의 외래 키 제약 조건으로 인해 Blob이 레코드에 연결되어있는 경우 Blob이 제거되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="cd7c0b6e99f8f68f29c55a617dd9e10085a728fd" translate="yes" xml:space="preserve">
          <source>Attempts to create a record with the given attributes in a table that has a unique constraint on one or several of its columns. If a row already exists with one or several of these unique constraints, the exception such an insertion would normally raise is caught, and the existing record with those attributes is found using &lt;a href=&quot;findermethods#method-i-find_by-21&quot;&gt;find_by!&lt;/a&gt;.</source>
          <target state="translated">하나 이상의 열에 대해 고유 한 제한 조건이있는 테이블에서 주어진 속성으로 레코드를 작성하려고합니다. 이러한 고유 제한 조건 중 하나 또는 여러 개가 포함 된 행이 이미 존재하는 경우 일반적으로 이러한 삽입으로 발생하는 예외가 발견되고 해당 속성을 가진 기존 레코드는 &lt;a href=&quot;findermethods#method-i-find_by-21&quot;&gt;find_by! &lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="a26452d452a6006a8c2ef8e3dfe6ca22ff936fb1" translate="yes" xml:space="preserve">
          <source>Attempts to pluralize the &lt;code&gt;singular&lt;/code&gt; word unless &lt;code&gt;count&lt;/code&gt; is 1. If &lt;code&gt;plural&lt;/code&gt; is supplied, it will use that when count is &amp;gt; 1, otherwise it will use the Inflector to determine the plural form for the given locale, which defaults to I18n.locale</source>
          <target state="translated">&lt;code&gt;count&lt;/code&gt; 가 1이 아니면 &lt;code&gt;singular&lt;/code&gt; 을 복수로 시도합니다 . &lt;code&gt;plural&lt;/code&gt; 이 제공된 경우 count가&amp;gt; 1 일 때이를 사용합니다. 그렇지 않으면 Inflector를 사용하여 주어진 로케일에 대한 복수형을 결정합니다 (기본값은 I18n입니다).</target>
        </trans-unit>
        <trans-unit id="b31e144d6ebf723a73b4ca38cdf4803d78ea6fcc" translate="yes" xml:space="preserve">
          <source>Attempts to save the record just like &lt;a href=&quot;validations#method-i-save&quot;&gt;ActiveRecord::Base#save&lt;/a&gt; but will raise an &lt;a href=&quot;recordinvalid&quot;&gt;ActiveRecord::RecordInvalid&lt;/a&gt; exception instead of returning &lt;code&gt;false&lt;/code&gt; if the record is not valid.</source>
          <target state="translated">&lt;a href=&quot;validations#method-i-save&quot;&gt;ActiveRecord :: Base # save&lt;/a&gt; 와 같이 레코드를 저장하려고 시도 하지만 레코드가 유효하지 않은 경우 &lt;code&gt;false&lt;/code&gt; 를 리턴하는 대신 &lt;a href=&quot;recordinvalid&quot;&gt;ActiveRecord :: RecordInvalid&lt;/a&gt; 예외가 발생 합니다.</target>
        </trans-unit>
        <trans-unit id="a086d942884a301b827479029ba19c2746237425" translate="yes" xml:space="preserve">
          <source>Attribute</source>
          <target state="translated">Attribute</target>
        </trans-unit>
        <trans-unit id="c1cc84dd516c4d9f904650ad60b1c8220808971b" translate="yes" xml:space="preserve">
          <source>Attribute Methods</source>
          <target state="translated">속성 방법</target>
        </trans-unit>
        <trans-unit id="a3acf6ee3669ec0cace5b972a9483639da64b10a" translate="yes" xml:space="preserve">
          <source>Attribute query methods</source>
          <target state="translated">속성 쿼리 방법</target>
        </trans-unit>
        <trans-unit id="b8460031022d281a771f177fac04a6a17a6a2b3c" translate="yes" xml:space="preserve">
          <source>Attribute that keeps track of converted arrays, if any, to avoid double looping in the common use case permit + mass-assignment. Defined in a method to instantiate it only if needed.</source>
          <target state="translated">일반적인 사용 사례에서 이중 루프를 피하기 위해 변환 된 배열을 추적하는 속성 (있는 경우) + 대량 할당. 필요한 경우에만 인스턴스화하는 방법으로 정의됩니다.</target>
        </trans-unit>
        <trans-unit id="6e1f402c935c188fda2ea7b958c12a212f9a3dd0" translate="yes" xml:space="preserve">
          <source>Attribute#has_rich_text</source>
          <target state="translated">Attribute#has_rich_text</target>
        </trans-unit>
        <trans-unit id="6468d126d56ad4b3d743b3b3bf44322d88e95d3a" translate="yes" xml:space="preserve">
          <source>AttributeAssignment</source>
          <target state="translated">AttributeAssignment</target>
        </trans-unit>
        <trans-unit id="b82e62a1cf7f3c870cdc4feea7b568a87d484d5e" translate="yes" xml:space="preserve">
          <source>AttributeAssignment#assign_attributes</source>
          <target state="translated">AttributeAssignment#assign_attributes</target>
        </trans-unit>
        <trans-unit id="a9da9116d74f50a609e3363f4336824b1dc8789a" translate="yes" xml:space="preserve">
          <source>AttributeAssignment#attributes=</source>
          <target state="translated">AttributeAssignment#attributes=</target>
        </trans-unit>
        <trans-unit id="03740362ee6cffa006356a99c20d197d620ff727" translate="yes" xml:space="preserve">
          <source>AttributeMethods</source>
          <target state="translated">AttributeMethods</target>
        </trans-unit>
        <trans-unit id="81cbf61753dda49d30ecf4b5ca4378e08a88a294" translate="yes" xml:space="preserve">
          <source>AttributeMethods#attribute_missing</source>
          <target state="translated">AttributeMethods#attribute_missing</target>
        </trans-unit>
        <trans-unit id="571b3f26f91f08044caf599c3ddc0b6906c81d82" translate="yes" xml:space="preserve">
          <source>AttributeMethods#method_missing</source>
          <target state="translated">AttributeMethods#method_missing</target>
        </trans-unit>
        <trans-unit id="ef9afb01b89c255126253d60ec6d973d29c1dcb9" translate="yes" xml:space="preserve">
          <source>AttributeMethods#respond_to?</source>
          <target state="translated">AttributeMethods#respond_to?</target>
        </trans-unit>
        <trans-unit id="61928b454fd5f05fafa5a648b22b514335d93cd8" translate="yes" xml:space="preserve">
          <source>AttributeMethods#respond_to_without_attributes?</source>
          <target state="translated">AttributeMethods#respond_to_without_attributes?</target>
        </trans-unit>
        <trans-unit id="085646afade2a3a196129e97ba8a72d29cfbf208" translate="yes" xml:space="preserve">
          <source>AttributeMethods::ClassMethods</source>
          <target state="translated">AttributeMethods::ClassMethods</target>
        </trans-unit>
        <trans-unit id="9a34bdf8fed2fb0fe2a3e5712779520845bdc726" translate="yes" xml:space="preserve">
          <source>AttributeMethods::ClassMethods#alias_attribute</source>
          <target state="translated">AttributeMethods::ClassMethods#alias_attribute</target>
        </trans-unit>
        <trans-unit id="400740a178000992adf086f138b8cdbf506770cd" translate="yes" xml:space="preserve">
          <source>AttributeMethods::ClassMethods#attribute_alias</source>
          <target state="translated">AttributeMethods::ClassMethods#attribute_alias</target>
        </trans-unit>
        <trans-unit id="fe6ddf02285147e25e9a6e4165eab5d85bdecf6e" translate="yes" xml:space="preserve">
          <source>AttributeMethods::ClassMethods#attribute_alias?</source>
          <target state="translated">AttributeMethods::ClassMethods#attribute_alias?</target>
        </trans-unit>
        <trans-unit id="779108de3a1241ec5ed29ac863cfa0e4406d9e58" translate="yes" xml:space="preserve">
          <source>AttributeMethods::ClassMethods#attribute_method_affix</source>
          <target state="translated">AttributeMethods::ClassMethods#attribute_method_affix</target>
        </trans-unit>
        <trans-unit id="06ca2e29e4bfa7cb581ea72192728464066de9fc" translate="yes" xml:space="preserve">
          <source>AttributeMethods::ClassMethods#attribute_method_prefix</source>
          <target state="translated">AttributeMethods::ClassMethods#attribute_method_prefix</target>
        </trans-unit>
        <trans-unit id="f86f6c8aeff4b4907d0eb427df428d12abb02079" translate="yes" xml:space="preserve">
          <source>AttributeMethods::ClassMethods#attribute_method_suffix</source>
          <target state="translated">AttributeMethods::ClassMethods#attribute_method_suffix</target>
        </trans-unit>
        <trans-unit id="0970249a112289f368e6e2b45a81fafb93a62ac2" translate="yes" xml:space="preserve">
          <source>AttributeMethods::ClassMethods#define_attribute_method</source>
          <target state="translated">AttributeMethods::ClassMethods#define_attribute_method</target>
        </trans-unit>
        <trans-unit id="ad6ba241b39e5542e0aea449a1e8b5452c21eab1" translate="yes" xml:space="preserve">
          <source>AttributeMethods::ClassMethods#define_attribute_methods</source>
          <target state="translated">AttributeMethods::ClassMethods#define_attribute_methods</target>
        </trans-unit>
        <trans-unit id="201f1394867fc3f3f97cdc7b9bd7e03704a4c646" translate="yes" xml:space="preserve">
          <source>AttributeMethods::ClassMethods#undefine_attribute_methods</source>
          <target state="translated">AttributeMethods::ClassMethods#undefine_attribute_methods</target>
        </trans-unit>
        <trans-unit id="a6652617f2c799eb11ee727b16c5646c48af6905" translate="yes" xml:space="preserve">
          <source>Attributes</source>
          <target state="translated">Attributes</target>
        </trans-unit>
        <trans-unit id="3593917c9e4cf99993e91196dd29a880770166ba" translate="yes" xml:space="preserve">
          <source>Attributes do not need to be backed by a database column.</source>
          <target state="translated">데이터베이스 열에서 속성을 백업 할 필요는 없습니다.</target>
        </trans-unit>
        <trans-unit id="b5030566c4a5d4475e181733a9d1060532fadedd" translate="yes" xml:space="preserve">
          <source>Attributes::ClassMethods</source>
          <target state="translated">Attributes::ClassMethods</target>
        </trans-unit>
        <trans-unit id="5bad13a55b52cfdb36cfd597c6a30e2479335526" translate="yes" xml:space="preserve">
          <source>Attributes::ClassMethods#attribute</source>
          <target state="translated">Attributes::ClassMethods#attribute</target>
        </trans-unit>
        <trans-unit id="328d1f8f2a6a0f286b557039958c5e06206b83cc" translate="yes" xml:space="preserve">
          <source>Attributes::ClassMethods#attribute_names</source>
          <target state="translated">Attributes::ClassMethods#attribute_names</target>
        </trans-unit>
        <trans-unit id="1c25f8e5d94b88e80b5316dcaee6232b577ae824" translate="yes" xml:space="preserve">
          <source>Authenticate with HTTP &lt;a href=&quot;../digest&quot;&gt;Digest&lt;/a&gt;, returns true or false</source>
          <target state="translated">HTTP &lt;a href=&quot;../digest&quot;&gt;Digest로&lt;/a&gt; 인증하고 true 또는 false를 리턴합니다.</target>
        </trans-unit>
        <trans-unit id="499c0a6ae500684ed58292397bb780f01eb3db11" translate="yes" xml:space="preserve">
          <source>Authenticates requests by validating their signatures.</source>
          <target state="translated">서명을 확인하여 요청을 인증합니다.</target>
        </trans-unit>
        <trans-unit id="681ee1dfde38a5c5a6126303263b1e73e91d59a7" translate="yes" xml:space="preserve">
          <source>Authenticates requests using HTTP basic access authentication. The username is always &lt;code&gt;actionmailbox&lt;/code&gt;, and the password is read from the application's encrypted credentials or an environment variable. See the Usage section below.</source>
          <target state="translated">HTTP 기본 액세스 인증을 사용하여 요청을 인증합니다. 사용자 이름은 항상 &lt;code&gt;actionmailbox&lt;/code&gt; 이며 비밀번호는 애플리케이션의 암호화 된 신임 정보 또는 환경 변수에서 읽습니다. 아래 사용법 섹션을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="d2a52548bd0852b99153ddd79a1f550f70674c7d" translate="yes" xml:space="preserve">
          <source>Authors</source>
          <target state="translated">Authors</target>
        </trans-unit>
        <trans-unit id="66eda6c9340afc8890a555b3acc498d5102b0fee" translate="yes" xml:space="preserve">
          <source>Auto encoding header values</source>
          <target state="translated">자동 인코딩 헤더 값</target>
        </trans-unit>
        <trans-unit id="6d742219a1916d7ea572270128c90d11e1124659" translate="yes" xml:space="preserve">
          <source>Auto-generated methods</source>
          <target state="translated">자동 생성 방법</target>
        </trans-unit>
        <trans-unit id="ff61b24e9bd2730acaf8369ffb6afbc18881f156" translate="yes" xml:space="preserve">
          <source>Autofilled &lt;a href=&quot;timestamp&quot;&gt;Timestamp&lt;/a&gt; Columns</source>
          <target state="translated">자동 완성 된 &lt;a href=&quot;timestamp&quot;&gt;타임 스탬프&lt;/a&gt; 열</target>
        </trans-unit>
        <trans-unit id="93f6173a5f6c7a618f6c18ee2ec81361e57509cb" translate="yes" xml:space="preserve">
          <source>Autofilled timestamp columns</source>
          <target state="translated">자동 완성 된 타임 스탬프 열</target>
        </trans-unit>
        <trans-unit id="c2e779e790c1d4dc28d4326306803dbf362b481e" translate="yes" xml:space="preserve">
          <source>Autoload</source>
          <target state="translated">Autoload</target>
        </trans-unit>
        <trans-unit id="a7d41bda6667e2eac5b9610fa36e07e48224a25e" translate="yes" xml:space="preserve">
          <source>Autoload paths</source>
          <target state="translated">자동로드 경로</target>
        </trans-unit>
        <trans-unit id="4187092df21ebb5653e311705908daa20517e5e6" translate="yes" xml:space="preserve">
          <source>Autoload paths are added to &lt;code&gt;$LOAD_PATH&lt;/code&gt; by default. However, Zeitwerk uses absolute file names internally, and your application should not issue &lt;code&gt;require&lt;/code&gt; calls for autoloadable files, so those directories are actually not needed there. You can opt-out with this flag:</source>
          <target state="translated">자동로드 경로는 기본적 으로 &lt;code&gt;$LOAD_PATH&lt;/code&gt; 에 추가됩니다 . 그러나 Zeitwerk는 내부적으로 절대 파일 이름을 사용하므로 응용 프로그램은 자동로드 가능한 파일에 대한 호출을 &lt;code&gt;require&lt;/code&gt; 하지 않아야 하므로 해당 디렉토리는 실제로 필요하지 않습니다. 이 플래그를 사용하여 옵트 아웃 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="44bfe76c8f9b7161e179ace1145449892b50b026" translate="yes" xml:space="preserve">
          <source>Autoload paths are called &lt;em&gt;root directories&lt;/em&gt; in Zeitwerk documentation, but we'll stay with &quot;autoload path&quot; in this guide.</source>
          <target state="translated">Zeitwerk 문서에서는 자동로드 경로를 &lt;em&gt;루트 디렉토리&lt;/em&gt; 라고 하지만이 안내서에서는 &quot;자동로드 경로&quot;를 유지합니다.</target>
        </trans-unit>
        <trans-unit id="5778fbadfdcce5526c3994f39a87ec543c2e3537" translate="yes" xml:space="preserve">
          <source>Autoload paths automatically pick any custom directories under &lt;code&gt;app&lt;/code&gt;. For example, if your application has &lt;code&gt;app/presenters&lt;/code&gt;, or &lt;code&gt;app/services&lt;/code&gt;, etc., they are added to autoload paths.</source>
          <target state="translated">자동로드 경로는 &lt;code&gt;app&lt;/code&gt; 에서 자동으로 사용자 정의 디렉토리를 선택합니다 . 예를 들어, 애플리케이션에 &lt;code&gt;app/presenters&lt;/code&gt; 또는 &lt;code&gt;app/services&lt;/code&gt; 등이있는 경우 자동로드 경로에 추가됩니다.</target>
        </trans-unit>
        <trans-unit id="34d7646dfb584221400e8c5a9ac37977b0a0e74e" translate="yes" xml:space="preserve">
          <source>Autoload#autoload</source>
          <target state="translated">Autoload#autoload</target>
        </trans-unit>
        <trans-unit id="f0aab6fc398db2e5e92d777b5f75c5b337155d05" translate="yes" xml:space="preserve">
          <source>Autoload#autoload_at</source>
          <target state="translated">Autoload#autoload_at</target>
        </trans-unit>
        <trans-unit id="aa0101c19439d3b82ed342209e3f01d0146fee34" translate="yes" xml:space="preserve">
          <source>Autoload#autoload_under</source>
          <target state="translated">Autoload#autoload_under</target>
        </trans-unit>
        <trans-unit id="14087a65cc1e3dc403050da222f6dc0c48634df8" translate="yes" xml:space="preserve">
          <source>Autoload#autoloads</source>
          <target state="translated">Autoload#autoloads</target>
        </trans-unit>
        <trans-unit id="d3b8774067ff67daa030fd5b1844925877ca31bf" translate="yes" xml:space="preserve">
          <source>Autoload#eager_autoload</source>
          <target state="translated">Autoload#eager_autoload</target>
        </trans-unit>
        <trans-unit id="476d5ddab22d6728a0454a78c45bac394a6cb28b" translate="yes" xml:space="preserve">
          <source>Autoload#eager_load!</source>
          <target state="translated">Autoload#eager_load!</target>
        </trans-unit>
        <trans-unit id="3fa81ba949fafdad4688aed6d9380f82976ca9d7" translate="yes" xml:space="preserve">
          <source>Autoloading</source>
          <target state="translated">Autoloading</target>
        </trans-unit>
        <trans-unit id="7eb2f782a52a6a44926887186eaa3366d0559231" translate="yes" xml:space="preserve">
          <source>Autoloading &lt;code&gt;ApplicationController&lt;/code&gt; looks directly under the directories of &lt;code&gt;autoload_paths&lt;/code&gt; because the nesting in that spot is empty. The situation of &lt;code&gt;Post&lt;/code&gt; is different, the nesting in that line is &lt;code&gt;[PostsController]&lt;/code&gt; and support for namespaces comes into play.</source>
          <target state="translated">Autoloading &lt;code&gt;ApplicationController&lt;/code&gt; 는 &lt;code&gt;autoload_paths&lt;/code&gt; 의 디렉토리를 직접 찾습니다 . 해당 지점의 중첩이 비어 있기 때문입니다. &lt;code&gt;Post&lt;/code&gt; 의 상황 이 다르면 해당 행의 중첩은 &lt;code&gt;[PostsController]&lt;/code&gt; 이며 네임 스페이스에 대한 지원이 작동합니다.</target>
        </trans-unit>
        <trans-unit id="6b46259d25a99931ef4429cb20b0b0dd80202338" translate="yes" xml:space="preserve">
          <source>Autoloading Algorithms</source>
          <target state="translated">자동 로딩 알고리즘</target>
        </trans-unit>
        <trans-unit id="a174db4cf6fb7bfefa81636d26be1e7cda7daf2e" translate="yes" xml:space="preserve">
          <source>Autoloading Availability</source>
          <target state="translated">자동 로딩 가용성</target>
        </trans-unit>
        <trans-unit id="2992ae7235d9b4f9cb6da0e81721d9192afe7fd8" translate="yes" xml:space="preserve">
          <source>Autoloading and &lt;code&gt;require&lt;/code&gt;</source>
          <target state="translated">자동 로딩 및 &lt;code&gt;require&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a722403584f07efd8ce02703bdf7a4024c3dc464" translate="yes" xml:space="preserve">
          <source>Autoloading and Initializers</source>
          <target state="translated">자동 로딩 및 이니셜 라이저</target>
        </trans-unit>
        <trans-unit id="dd4cbc97fe810120bacd6972e92725e0307f7f44" translate="yes" xml:space="preserve">
          <source>Autoloading and Reloading Constants</source>
          <target state="translated">자동로드 및 재로드 상수</target>
        </trans-unit>
        <trans-unit id="1ebf8c64997fd1ab5fb993060eec87b7963e0413" translate="yes" xml:space="preserve">
          <source>Autoloading and Reloading Constants (Classic Mode)</source>
          <target state="translated">상수 자동로드 및 다시로드 (클래식 모드)</target>
        </trans-unit>
        <trans-unit id="a36dae2c36591f19e018498888df9b217b238c7c" translate="yes" xml:space="preserve">
          <source>Autoloading and Reloading Constants (Zeitwerk Mode)</source>
          <target state="translated">자동로드 및 재로드 상수 (Zeitwerk 모드)</target>
        </trans-unit>
        <trans-unit id="89fb506b62afb863c31998a41bd7850ea8aef782" translate="yes" xml:space="preserve">
          <source>Autoloading and STI</source>
          <target state="translated">자동 로딩 및 STI</target>
        </trans-unit>
        <trans-unit id="4018c02c540f32a63769cbd886fb3221512fce9e" translate="yes" xml:space="preserve">
          <source>Autoloading in &lt;code&gt;BasicObject&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;BasicObject&lt;/code&gt; 에서 자동 로딩</target>
        </trans-unit>
        <trans-unit id="e9f7cf7cbd47bfbe4ad35280f16fc02f2bed49f1" translate="yes" xml:space="preserve">
          <source>Autoloading in the Test Environment</source>
          <target state="translated">테스트 환경에서 자동 로딩</target>
        </trans-unit>
        <trans-unit id="7cd9577824fac1b217392adae4e1dba3b6a3b3a2" translate="yes" xml:space="preserve">
          <source>Autoloading is Disabled After Booting in the Production Environment</source>
          <target state="translated">프로덕션 환경에서 부팅 한 후 자동로드가 비활성화됩니다</target>
        </trans-unit>
        <trans-unit id="4415cd33e743b5524681160460fa571940c150f3" translate="yes" xml:space="preserve">
          <source>Autoloading is now disabled after booting in the production environment by default.</source>
          <target state="translated">기본적으로 프로덕션 환경에서 부팅 한 후 자동 로딩이 비활성화됩니다.</target>
        </trans-unit>
        <trans-unit id="f33512af71b53d9f24d0a1199e4aed7e114adc56" translate="yes" xml:space="preserve">
          <source>Autoloading keeps track of autoloaded constants. Reloading is implemented by removing them all from their respective classes and modules using &lt;code&gt;Module#remove_const&lt;/code&gt;. That way, when the code goes on, those constants are going to be unknown again, and files reloaded on demand.</source>
          <target state="translated">자동 로딩은 자동 로딩 된 상수를 추적합니다. Reloading은 &lt;code&gt;Module#remove_const&lt;/code&gt; 를 사용하여 해당 클래스와 모듈에서 모두 제거하여 구현됩니다 . 이렇게하면 코드가 진행될 때 해당 상수를 다시 알 수 없게되고 파일은 필요할 때 다시로드됩니다.</target>
        </trans-unit>
        <trans-unit id="25204c9db7f68110bc30240bbedadb04680e2194" translate="yes" xml:space="preserve">
          <source>Autoloading modes</source>
          <target state="translated">자동 로딩 모드</target>
        </trans-unit>
        <trans-unit id="a5ac554c50bb070398899db8d39aa9a9113fcd75" translate="yes" xml:space="preserve">
          <source>Autoloading within Singleton Classes</source>
          <target state="translated">싱글 톤 클래스 내에서 자동 로딩</target>
        </trans-unit>
        <trans-unit id="562d6a16180d0ad35edaf5718c6447fcce4c58d7" translate="yes" xml:space="preserve">
          <source>Autoloading, reloading, and eager loading</source>
          <target state="translated">자동 로딩, 리로딩 및 열성적인 로딩</target>
        </trans-unit>
        <trans-unit id="e04696079e7df7626b6d5f756a2134238ddcfcaf" translate="yes" xml:space="preserve">
          <source>Automatic Concurrency</source>
          <target state="translated">자동 동시성</target>
        </trans-unit>
        <trans-unit id="2054994a61a34a725170e5ba7eb90b59c833cad5" translate="yes" xml:space="preserve">
          <source>Automatic Modules</source>
          <target state="translated">자동 모듈</target>
        </trans-unit>
        <trans-unit id="564b362bcda882d81d1936d5c12b3c5c0b5e7572" translate="yes" xml:space="preserve">
          <source>Automatic connection switching for the model you're working with</source>
          <target state="translated">작업중인 모델의 자동 연결 전환</target>
        </trans-unit>
        <trans-unit id="5380f670ada2102805ff57e5a550cbf3d9a200ad" translate="yes" xml:space="preserve">
          <source>Automatic conversion to HTML safe translate text is only available from the &lt;code&gt;translate&lt;/code&gt; view helper method.</source>
          <target state="translated">HTML 안전 번역 텍스트로 자동 변환은 &lt;code&gt;translate&lt;/code&gt; 보기 도우미 메서드 에서만 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="fffce4ccaf2382b77835e4d14cce41f0faf1e777" translate="yes" xml:space="preserve">
          <source>Automatic deletion of join models is direct, no destroy callbacks are triggered.</source>
          <target state="translated">조인 모델의 자동 삭제는 직접적이며 파괴 콜백이 트리거되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="3616e41a4f97ade3651233c28c0989523241d066" translate="yes" xml:space="preserve">
          <source>Automatic disabling</source>
          <target state="translated">자동 비활성화</target>
        </trans-unit>
        <trans-unit id="bd6f19d17a1faadd4e5ff75d64c7137453e02d39" translate="yes" xml:space="preserve">
          <source>Automatic swapping between the primary and replica depending on the HTTP verb and recent writes</source>
          <target state="translated">HTTP 동사 및 최근 쓰기에 따라 기본 및 복제본 간의 자동 스와핑</target>
        </trans-unit>
        <trans-unit id="c1db44ed6812cdd876dd4a25aef67afda835d700" translate="yes" xml:space="preserve">
          <source>Automatic switching allows the application to switch from the primary to replica or replica to primary based on the HTTP verb and whether there was a recent write.</source>
          <target state="translated">자동 전환을 통해 애플리케이션은 HTTP 동사 및 최근 쓰기가 있는지 여부에 따라 기본에서 복제본 또는 복제본에서 기본으로 전환 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c90e6c8d1a84feb4f78e747c0c0d811c5cadd1b8" translate="yes" xml:space="preserve">
          <source>Automatic translation scoping by partial is only available from the &lt;code&gt;translate&lt;/code&gt; view helper method.</source>
          <target state="translated">부분별로 자동 번역 범위 지정은 &lt;code&gt;translate&lt;/code&gt; 보기 도우미 메소드 에서만 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="32ce27fbf195ec2e139ebc10751a2013fcdfffca" translate="yes" xml:space="preserve">
          <source>Available Assertions</source>
          <target state="translated">사용 가능한 어설 션</target>
        </trans-unit>
        <trans-unit id="9f73d5afeacc68e362bb63f9bbe84c084bec644b" translate="yes" xml:space="preserve">
          <source>Available Callbacks</source>
          <target state="translated">사용 가능한 콜백</target>
        </trans-unit>
        <trans-unit id="3b2fdd97a32809830b6fd0048316a7f1bf86fea4" translate="yes" xml:space="preserve">
          <source>Available Hooks</source>
          <target state="translated">사용 가능한 후크</target>
        </trans-unit>
        <trans-unit id="51b4f34cf294112f56388fbf398c1adcb83fd76d" translate="yes" xml:space="preserve">
          <source>Available Request Types for Functional Tests</source>
          <target state="translated">기능 테스트에 사용 가능한 요청 유형</target>
        </trans-unit>
        <trans-unit id="36af02284187018311542e1342b5f89d0ae67c03" translate="yes" xml:space="preserve">
          <source>Available behaviors:</source>
          <target state="translated">사용 가능한 동작 :</target>
        </trans-unit>
        <trans-unit id="7da4c36a54ae7a349bf4428686c3741afe2a7fa3" translate="yes" xml:space="preserve">
          <source>Available callbacks</source>
          <target state="translated">사용 가능한 콜백</target>
        </trans-unit>
        <trans-unit id="2f7899655285d735a9395d321f4c1c351403478b" translate="yes" xml:space="preserve">
          <source>Available options are (none of these exists by default):</source>
          <target state="translated">사용 가능한 옵션은 다음과 같습니다 (기본적으로 존재하지 않음).</target>
        </trans-unit>
        <trans-unit id="a5325c58f3190f03981f3d4b6e263a0fcae8b5bc" translate="yes" xml:space="preserve">
          <source>Available options are:</source>
          <target state="translated">사용 가능한 옵션은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="f9aa5f6262d2afb5b1051cad712d719b7b837433" translate="yes" xml:space="preserve">
          <source>Available so that &lt;a href=&quot;timezone&quot;&gt;TimeZone&lt;/a&gt; instances respond like TZInfo::Timezone instances.</source>
          <target state="translated">&lt;a href=&quot;timezone&quot;&gt;TimeZone&lt;/a&gt; 인스턴스가 TZInfo :: Timezone 인스턴스처럼 응답 하도록 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="8c69fad5dcb600f5296509eb398388d406d7a59b" translate="yes" xml:space="preserve">
          <source>Available transformations</source>
          <target state="translated">사용 가능한 변환</target>
        </trans-unit>
        <trans-unit id="78cb2598327e5eb1d8f02ad1fa42087d1cb42048" translate="yes" xml:space="preserve">
          <source>Available transformations are:</source>
          <target state="translated">사용 가능한 변환은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="15f86c051ecf0b64e5f8cdc8c689552f42595942" translate="yes" xml:space="preserve">
          <source>Average</source>
          <target state="translated">Average</target>
        </trans-unit>
        <trans-unit id="c34b3a58cbbc2881b6cd091bf62f0f9ec0fc2cf4" translate="yes" xml:space="preserve">
          <source>Avoid loading Rails frameworks with Load and Configuration Hooks</source>
          <target state="translated">로드 및 구성 후크가있는 Rails 프레임 워크로드 방지</target>
        </trans-unit>
        <trans-unit id="642182c393722575f3adbbcf890bd3ee42b01561" translate="yes" xml:space="preserve">
          <source>Avoid processing previews synchronously in views. Instead, link to a controller action that processes them on demand. Active Storage provides one, but you may want to create your own (for example, if you need authentication). Here&amp;rsquo;s how to use the built-in version:</source>
          <target state="translated">뷰에서 미리보기를 동 기적으로 처리하지 마십시오. 대신 요청시 처리하는 컨트롤러 작업에 연결하십시오. Active Storage는 하나를 제공하지만 인증이 필요한 경우 직접 만들 수 있습니다. 내장 버전을 사용하는 방법은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="c387fd31de75a58d0b8bf5c46d8589635ed174fd" translate="yes" xml:space="preserve">
          <source>Avoiding Name Collisions</source>
          <target state="translated">이름 충돌 방지</target>
        </trans-unit>
        <trans-unit id="9ff3c65b4ff1c7c91d3f9100694c630bd5914457" translate="yes" xml:space="preserve">
          <source>Avoiding name collisions</source>
          <target state="translated">이름 충돌 방지</target>
        </trans-unit>
        <trans-unit id="673463e69a25accb3c683fd49bec899923c12309" translate="yes" xml:space="preserve">
          <source>Awkward, right? We could pull the function definition out of the click handler, and turn it into CoffeeScript:</source>
          <target state="translated">어색한가? 클릭 핸들러에서 함수 정의를 가져와 CoffeeScript로 바꿀 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="10f92cffcf1fc3e4eaff53ef13abff56cc63453e" translate="yes" xml:space="preserve">
          <source>BASE36_ALPHABET</source>
          <target state="translated">BASE36_ALPHABET</target>
        </trans-unit>
        <trans-unit id="4e49107074d61735f9f5ca6499b3ee753b534435" translate="yes" xml:space="preserve">
          <source>BASE58_ALPHABET</source>
          <target state="translated">BASE58_ALPHABET</target>
        </trans-unit>
        <trans-unit id="062a1f98ddb38e836c564b72119a3db1e8ff832e" translate="yes" xml:space="preserve">
          <source>BCC addresses of the mail</source>
          <target state="translated">메일의 숨은 참조 주소</target>
        </trans-unit>
        <trans-unit id="16512b6a8848e5ffed5954f0d247e95c9db877f5" translate="yes" xml:space="preserve">
          <source>BCrypt hash function can handle maximum 72 bytes, and if we pass password of length more than 72 bytes it ignores extra characters. Hence need to put a restriction on password length.</source>
          <target state="translated">BCrypt 해시 함수는 최대 72 바이트를 처리 할 수 ​​있으며, 길이가 72 바이트를 초과하는 비밀번호를 전달하면 추가 문자를 무시합니다. 따라서 비밀번호 길이를 제한해야합니다.</target>
        </trans-unit>
        <trans-unit id="a9414ab04c2bdab21e6b6d136628a187e0dfaa4c" translate="yes" xml:space="preserve">
          <source>BLACK</source>
          <target state="translated">BLACK</target>
        </trans-unit>
        <trans-unit id="6fa32eb0aecb85330ce033e004ee7885d149cd60" translate="yes" xml:space="preserve">
          <source>BLANK_RE</source>
          <target state="translated">BLANK_RE</target>
        </trans-unit>
        <trans-unit id="c4f8490d87d22bb11f7e9b82a4a72913b3d84d06" translate="yes" xml:space="preserve">
          <source>BLUE</source>
          <target state="translated">BLUE</target>
        </trans-unit>
        <trans-unit id="7f5468283ffb5e8bbed87d8fba2648d355d1d029" translate="yes" xml:space="preserve">
          <source>BOLD</source>
          <target state="translated">BOLD</target>
        </trans-unit>
        <trans-unit id="b95d5d0fd82e817510e17b67e4dff4aa9a5ce753" translate="yes" xml:space="preserve">
          <source>BOOLEAN_ATTRIBUTES</source>
          <target state="translated">BOOLEAN_ATTRIBUTES</target>
        </trans-unit>
        <trans-unit id="27b5046463060aaa74714a515614d734e3c6f049" translate="yes" xml:space="preserve">
          <source>BROWSER_LIKE_ACCEPTS</source>
          <target state="translated">BROWSER_LIKE_ACCEPTS</target>
        </trans-unit>
        <trans-unit id="5964fab5c3386b4e4eb9864a5b4ca0a9b4ff3223" translate="yes" xml:space="preserve">
          <source>BUTTON_TAG_METHOD_VERBS</source>
          <target state="translated">BUTTON_TAG_METHOD_VERBS</target>
        </trans-unit>
        <trans-unit id="cf236754d646f6b76a99ee847de9bc7a2116f061" translate="yes" xml:space="preserve">
          <source>Back in &lt;code&gt;ArticlesController&lt;/code&gt;, we need to change the &lt;code&gt;create&lt;/code&gt; action to use the new &lt;code&gt;Article&lt;/code&gt; model to save the data in the database. Open &lt;code&gt;app/controllers/articles_controller.rb&lt;/code&gt; and change the &lt;code&gt;create&lt;/code&gt; action to look like this:</source>
          <target state="translated">&lt;code&gt;ArticlesController&lt;/code&gt; 로 돌아가서 새 &lt;code&gt;Article&lt;/code&gt; 모델을 사용하여 데이터베이스에 데이터를 저장하려면 &lt;code&gt;create&lt;/code&gt; 조치 를 변경해야 합니다. &lt;code&gt;app/controllers/articles_controller.rb&lt;/code&gt; 를 열고 다음과 같이 &lt;code&gt;create&lt;/code&gt; 조치를 변경하십시오 .</target>
        </trans-unit>
        <trans-unit id="b83119198e033dfab17f972ab6fcf3182966a684" translate="yes" xml:space="preserve">
          <source>Back to &lt;code&gt;config/environment.rb&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;config/environment.rb&lt;/code&gt; 로 돌아 가기</target>
        </trans-unit>
        <trans-unit id="81c871ed1924278a5daf0383a5034b99b3e89927" translate="yes" xml:space="preserve">
          <source>Backburner</source>
          <target state="translated">Backburner</target>
        </trans-unit>
        <trans-unit id="34f110511fb75cb9a439e457bbbe43821e046099" translate="yes" xml:space="preserve">
          <source>Backburner adapter for Active Job</source>
          <target state="translated">활성 작업용 백 버너 어댑터</target>
        </trans-unit>
        <trans-unit id="534054bdb32a57cede7122e7b6fdce61148ed216" translate="yes" xml:space="preserve">
          <source>Backburner is a beanstalkd-powered job queue that can handle a very high volume of jobs. You create background jobs and place them on multiple work queues to be processed later. Read more about Backburner &lt;a href=&quot;https://github.com/nesquena/backburner&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">Backburner는 매우 많은 양의 작업을 처리 할 수있는 beantalkd 기반 작업 대기열입니다. 백그라운드 작업을 작성하고 나중에 처리하기 위해 여러 작업 큐에 배치합니다. Backburner에 대한 자세한 내용은 &lt;a href=&quot;https://github.com/nesquena/backburner&quot;&gt;여기를&lt;/a&gt; 참조 하십시오 .</target>
        </trans-unit>
        <trans-unit id="b3776d63ad7b7a84bfe20d9c6d4a53a2b25d0e43" translate="yes" xml:space="preserve">
          <source>Backends</source>
          <target state="translated">Backends</target>
        </trans-unit>
        <trans-unit id="4f01b201bfc2cd6d3d886e183749d3c60bea57aa" translate="yes" xml:space="preserve">
          <source>Backends Features</source>
          <target state="translated">백엔드 기능</target>
        </trans-unit>
        <trans-unit id="907c3be6b0ec77e15554c5638d2db70ea8c0e315" translate="yes" xml:space="preserve">
          <source>BacktraceCleaner</source>
          <target state="translated">BacktraceCleaner</target>
        </trans-unit>
        <trans-unit id="1061f74e6b6d0a0c577fe219b37379861e2dad3c" translate="yes" xml:space="preserve">
          <source>BacktraceCleaner#add_filter</source>
          <target state="translated">BacktraceCleaner#add_filter</target>
        </trans-unit>
        <trans-unit id="fa87a5ba9f02bf91d23b5f58c92f1b3c2c556f09" translate="yes" xml:space="preserve">
          <source>BacktraceCleaner#add_silencer</source>
          <target state="translated">BacktraceCleaner#add_silencer</target>
        </trans-unit>
        <trans-unit id="4451f25c6ec3c4c761978ae68fe9288aaee3ec08" translate="yes" xml:space="preserve">
          <source>BacktraceCleaner#clean</source>
          <target state="translated">BacktraceCleaner#clean</target>
        </trans-unit>
        <trans-unit id="7afd58c1e8b3c18d9fc32fb462e4f55078c5973a" translate="yes" xml:space="preserve">
          <source>BacktraceCleaner#filter</source>
          <target state="translated">BacktraceCleaner#filter</target>
        </trans-unit>
        <trans-unit id="1c04cd47389cf5efd3831611a1e77e12c438d5e5" translate="yes" xml:space="preserve">
          <source>BacktraceCleaner#remove_filters!</source>
          <target state="translated">BacktraceCleaner#remove_filters!</target>
        </trans-unit>
        <trans-unit id="15b57b82ccebad1b6a62ab2b49a9baf93742ad1b" translate="yes" xml:space="preserve">
          <source>BacktraceCleaner#remove_silencers!</source>
          <target state="translated">BacktraceCleaner#remove_silencers!</target>
        </trans-unit>
        <trans-unit id="20da332a8ebcaaedb283b4a9865d80f3d8811676" translate="yes" xml:space="preserve">
          <source>BacktraceCleaner::new</source>
          <target state="translated">BacktraceCleaner::new</target>
        </trans-unit>
        <trans-unit id="0a9f20074dc82611526899697ae2997094af024f" translate="yes" xml:space="preserve">
          <source>Backtraces often include many lines that are not relevant for the context under review. This makes it hard to find the signal amongst the backtrace noise, and adds debugging time. With a &lt;a href=&quot;backtracecleaner&quot;&gt;BacktraceCleaner&lt;/a&gt;, filters and silencers are used to remove the noisy lines, so that only the most relevant lines remain.</source>
          <target state="translated">역 추적에는 종종 검토중인 컨텍스트와 관련이없는 많은 행이 포함됩니다. 이로 인해 역 추적 잡음 중에서 신호를 찾기가 어려워지고 디버깅 시간이 추가됩니다. A를 &lt;a href=&quot;backtracecleaner&quot;&gt;BacktraceCleaner&lt;/a&gt; , 필터, 소음기는 가장 관련성 라인이 남아 그래서, 시끄러운 줄을 제거하는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="fa33d557dc6e8a8a4e62b0bb691fdf84359cf4b6" translate="yes" xml:space="preserve">
          <source>Barebones Helpers</source>
          <target state="translated">바레 본 도우미</target>
        </trans-unit>
        <trans-unit id="375c012ed7a59a31890125a6f4b37c45212c0928" translate="yes" xml:space="preserve">
          <source>Base#action_methods</source>
          <target state="translated">Base#action_methods</target>
        </trans-unit>
        <trans-unit id="e311e3dae5dd72db3a6bf46bd8274ea5e838d2fe" translate="yes" xml:space="preserve">
          <source>Base#action_name</source>
          <target state="translated">Base#action_name</target>
        </trans-unit>
        <trans-unit id="c5cfe01df4db0097e675b528824c284d4ef361c1" translate="yes" xml:space="preserve">
          <source>Base#attachments</source>
          <target state="translated">Base#attachments</target>
        </trans-unit>
        <trans-unit id="0cb8443f4291fd8a41dfa1a53b995e9b402488b3" translate="yes" xml:space="preserve">
          <source>Base#available_action?</source>
          <target state="translated">Base#available_action?</target>
        </trans-unit>
        <trans-unit id="6bd29b3ca9fe425eb1230cc048ccad187253215d" translate="yes" xml:space="preserve">
          <source>Base#bounce_with</source>
          <target state="translated">Base#bounce_with</target>
        </trans-unit>
        <trans-unit id="4e89ec37a039af70e764c3e0e19619ac97ce5f70" translate="yes" xml:space="preserve">
          <source>Base#compiled_method_container</source>
          <target state="translated">Base#compiled_method_container</target>
        </trans-unit>
        <trans-unit id="00b52f00712dcb8f1666e437989df8c0e5d2ffe2" translate="yes" xml:space="preserve">
          <source>Base#controller_path</source>
          <target state="translated">Base#controller_path</target>
        </trans-unit>
        <trans-unit id="c2ed62eabcbae95341d9cba7d0c361a4f7e699ae" translate="yes" xml:space="preserve">
          <source>Base#default_i18n_subject</source>
          <target state="translated">Base#default_i18n_subject</target>
        </trans-unit>
        <trans-unit id="d37ff6f4b8396aeb7b76f376fb1a3aa8a0d05518" translate="yes" xml:space="preserve">
          <source>Base#formats</source>
          <target state="translated">Base#formats</target>
        </trans-unit>
        <trans-unit id="4c23a360bea5c578220a6b9a67147f128c60fba8" translate="yes" xml:space="preserve">
          <source>Base#headers</source>
          <target state="translated">Base#headers</target>
        </trans-unit>
        <trans-unit id="74921f1ad6aead937da3416b20801a3f4a376bc6" translate="yes" xml:space="preserve">
          <source>Base#in_rendering_context</source>
          <target state="translated">Base#in_rendering_context</target>
        </trans-unit>
        <trans-unit id="1d59e843cdc677b01467db652a9fd6bbdd2644a2" translate="yes" xml:space="preserve">
          <source>Base#inbound_email</source>
          <target state="translated">Base#inbound_email</target>
        </trans-unit>
        <trans-unit id="6c681b01d3c39caf86ca5a3c3977277641bb59ec" translate="yes" xml:space="preserve">
          <source>Base#lookup_context</source>
          <target state="translated">Base#lookup_context</target>
        </trans-unit>
        <trans-unit id="c38e5120e6a933d3b7df826b8e635b626ade1045" translate="yes" xml:space="preserve">
          <source>Base#mail</source>
          <target state="translated">Base#mail</target>
        </trans-unit>
        <trans-unit id="9384f0f769f92095bc20aef9504bcf240533554f" translate="yes" xml:space="preserve">
          <source>Base#mailer_name</source>
          <target state="translated">Base#mailer_name</target>
        </trans-unit>
        <trans-unit id="f9d4c9fca70cfd384dae0b4448d7b2015e1a775f" translate="yes" xml:space="preserve">
          <source>Base#performed?</source>
          <target state="translated">Base#performed?</target>
        </trans-unit>
        <trans-unit id="182c9d498630daeaf39ac1a374369cbe652988c3" translate="yes" xml:space="preserve">
          <source>Base#process</source>
          <target state="translated">Base#process</target>
        </trans-unit>
        <trans-unit id="13661f485b1dd1c327a03179c438fcd3a249003a" translate="yes" xml:space="preserve">
          <source>Base#request</source>
          <target state="translated">Base#request</target>
        </trans-unit>
        <trans-unit id="49e0a2a7139f08d3043136140a591336e2162fbb" translate="yes" xml:space="preserve">
          <source>Base#response</source>
          <target state="translated">Base#response</target>
        </trans-unit>
        <trans-unit id="3e96a7b7a26ff067210ebd8711b30b5c36d241c3" translate="yes" xml:space="preserve">
          <source>Base#response_body</source>
          <target state="translated">Base#response_body</target>
        </trans-unit>
        <trans-unit id="684a8e55048112994f91ef9526560fec3494e135" translate="yes" xml:space="preserve">
          <source>Base#set_content_type</source>
          <target state="translated">Base#set_content_type</target>
        </trans-unit>
        <trans-unit id="da2adcb465595deeebc18e37dd8cdef58f114ff6" translate="yes" xml:space="preserve">
          <source>Base#view_renderer</source>
          <target state="translated">Base#view_renderer</target>
        </trans-unit>
        <trans-unit id="48f904c756e1ee547be4a2d326b9d4df6ac17830" translate="yes" xml:space="preserve">
          <source>Base::abstract</source>
          <target state="translated">Base::abstract</target>
        </trans-unit>
        <trans-unit id="cc352050973106a5ef28e73533d1fb7a8f26a730" translate="yes" xml:space="preserve">
          <source>Base::abstract!</source>
          <target state="translated">Base::abstract!</target>
        </trans-unit>
        <trans-unit id="8609fa35a18a58f1244d09ff544322176e84af6c" translate="yes" xml:space="preserve">
          <source>Base::abstract?</source>
          <target state="translated">Base::abstract?</target>
        </trans-unit>
        <trans-unit id="a07f71455878bb999fc949f8bbe3164ae4352569" translate="yes" xml:space="preserve">
          <source>Base::action_methods</source>
          <target state="translated">Base::action_methods</target>
        </trans-unit>
        <trans-unit id="cf494bf361513391af1c5e8e3f12119079c33bc1" translate="yes" xml:space="preserve">
          <source>Base::cache_template_loading</source>
          <target state="translated">Base::cache_template_loading</target>
        </trans-unit>
        <trans-unit id="fe27b55b855a64f4faeb3ba9f55e0e5131b1bc24" translate="yes" xml:space="preserve">
          <source>Base::cache_template_loading=</source>
          <target state="translated">Base::cache_template_loading=</target>
        </trans-unit>
        <trans-unit id="227621b446fbc5177c301dfb217b2ad3e587e546" translate="yes" xml:space="preserve">
          <source>Base::clear_action_methods!</source>
          <target state="translated">Base::clear_action_methods!</target>
        </trans-unit>
        <trans-unit id="e2f51416171e0640c8fa2c7c5f3714c665d7cd07" translate="yes" xml:space="preserve">
          <source>Base::controller_path</source>
          <target state="translated">Base::controller_path</target>
        </trans-unit>
        <trans-unit id="c9645de23d55e14922f2d301efd67bcaad9cd2f8" translate="yes" xml:space="preserve">
          <source>Base::default</source>
          <target state="translated">Base::default</target>
        </trans-unit>
        <trans-unit id="ce5f1a60f76f0a05aee62a5744575c5e2beff0be" translate="yes" xml:space="preserve">
          <source>Base::default_options=</source>
          <target state="translated">Base::default_options=</target>
        </trans-unit>
        <trans-unit id="c17688b07bc2fad690d664be2568ef90353ba3e0" translate="yes" xml:space="preserve">
          <source>Base::internal_methods</source>
          <target state="translated">Base::internal_methods</target>
        </trans-unit>
        <trans-unit id="b3f7054eebf163a2d8c1c6c36b4c2353ffa77a8b" translate="yes" xml:space="preserve">
          <source>Base::mailer_name</source>
          <target state="translated">Base::mailer_name</target>
        </trans-unit>
        <trans-unit id="7fcf407717aaacb7857ed621900c3687691f2380" translate="yes" xml:space="preserve">
          <source>Base::method_added</source>
          <target state="translated">Base::method_added</target>
        </trans-unit>
        <trans-unit id="40963defaaa9b28933eaf72f480bf95572c47198" translate="yes" xml:space="preserve">
          <source>Base::new</source>
          <target state="translated">Base::new</target>
        </trans-unit>
        <trans-unit id="e4a2077b9383f0c8d8a57346b65cd94734ade94e" translate="yes" xml:space="preserve">
          <source>Base::receive</source>
          <target state="translated">Base::receive</target>
        </trans-unit>
        <trans-unit id="8f5dc0eb99ddad212c6622c8e739aacdeb91727e" translate="yes" xml:space="preserve">
          <source>Base::register_interceptor</source>
          <target state="translated">Base::register_interceptor</target>
        </trans-unit>
        <trans-unit id="9caf16596a77f58de5eb22b9bd501de9975412dc" translate="yes" xml:space="preserve">
          <source>Base::register_interceptors</source>
          <target state="translated">Base::register_interceptors</target>
        </trans-unit>
        <trans-unit id="939120360df0ee3affb0d8a18fe4a6d0e4318b6f" translate="yes" xml:space="preserve">
          <source>Base::register_observer</source>
          <target state="translated">Base::register_observer</target>
        </trans-unit>
        <trans-unit id="06ab69d15fe42d5fdac77b7360de8410ad09ff71" translate="yes" xml:space="preserve">
          <source>Base::register_observers</source>
          <target state="translated">Base::register_observers</target>
        </trans-unit>
        <trans-unit id="fd40f87e945e999573c0d3071612410a821b1d0b" translate="yes" xml:space="preserve">
          <source>Base::supports_path?</source>
          <target state="translated">Base::supports_path?</target>
        </trans-unit>
        <trans-unit id="b8e1a62819cfcd04128acc95b2f747b81beb3155" translate="yes" xml:space="preserve">
          <source>Base::unregister_interceptor</source>
          <target state="translated">Base::unregister_interceptor</target>
        </trans-unit>
        <trans-unit id="4dfed71b1c39d644e8f09d1407896fd69baa6aef" translate="yes" xml:space="preserve">
          <source>Base::unregister_interceptors</source>
          <target state="translated">Base::unregister_interceptors</target>
        </trans-unit>
        <trans-unit id="fdd25aae6227f4beea9f604b7cecabb8d5ec2485" translate="yes" xml:space="preserve">
          <source>Base::unregister_observer</source>
          <target state="translated">Base::unregister_observer</target>
        </trans-unit>
        <trans-unit id="2e301451342aa1a0cfabc9b0c4ac0ef795924dcb" translate="yes" xml:space="preserve">
          <source>Base::unregister_observers</source>
          <target state="translated">Base::unregister_observers</target>
        </trans-unit>
        <trans-unit id="3c40492a0dab2b4c634f3e08dabe0a659023487d" translate="yes" xml:space="preserve">
          <source>Base::without_modules</source>
          <target state="translated">Base::without_modules</target>
        </trans-unit>
        <trans-unit id="b217417f8ade7eeef1ffc4b3ee10a4083040d9c5" translate="yes" xml:space="preserve">
          <source>BaseController</source>
          <target state="translated">BaseController</target>
        </trans-unit>
        <trans-unit id="e553d923f564455ff43620929aee3223d197ecd7" translate="yes" xml:space="preserve">
          <source>Based on the above example, the subscribers of this channel will get whatever data is put into the, let's say, &lt;code&gt;comments_for_45&lt;/code&gt; broadcasting as soon as it's put there.</source>
          <target state="translated">위의 예를 기반으로,이 채널의 가입자는 데이터를 넣는 즉시 &lt;code&gt;comments_for_45&lt;/code&gt; 브로드 캐스트에 넣은 모든 데이터를 가져옵니다 .</target>
        </trans-unit>
        <trans-unit id="1f356b23d4ea952d7069a240305dcc3f49cf628e" translate="yes" xml:space="preserve">
          <source>Basic &lt;a href=&quot;metal#method-i-url_for&quot;&gt;#url_for&lt;/a&gt; that can be overridden for more robust functionality.</source>
          <target state="translated">보다 강력한 기능을 위해 재정의 할 수있는 기본 &lt;a href=&quot;metal#method-i-url_for&quot;&gt;#url_for&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="1d7840b08e10434e110bce3eaf01fc3db578812b" translate="yes" xml:space="preserve">
          <source>Basic Authentication</source>
          <target state="translated">기본 인증</target>
        </trans-unit>
        <trans-unit id="849ea12fa0a6d20a31c7f74ac328669c8eac099f" translate="yes" xml:space="preserve">
          <source>Basic Caching</source>
          <target state="translated">기본 캐싱</target>
        </trans-unit>
        <trans-unit id="fe9d4d6903c7ac3542b2ccc456e660b132226da5" translate="yes" xml:space="preserve">
          <source>Basic Structures</source>
          <target state="translated">기본 구조</target>
        </trans-unit>
        <trans-unit id="20b19d89ef0aed3f2d4f1afed1d3f801c6b85aa5" translate="yes" xml:space="preserve">
          <source>Basic example</source>
          <target state="translated">기본 예</target>
        </trans-unit>
        <trans-unit id="f382d74ea61e17c6d328d05dccff557575e5b389" translate="yes" xml:space="preserve">
          <source>Basic knowledge of relational database management systems (RDBMS) and structured query language (SQL) is helpful in order to fully understand Active Record. Please refer to &lt;a href=&quot;https://www.w3schools.com/sql/default.asp&quot;&gt;this tutorial&lt;/a&gt; (or &lt;a href=&quot;http://www.sqlcourse.com/&quot;&gt;this one&lt;/a&gt;) or study them by other means if you would like to learn more.</source>
          <target state="translated">관계형 데이터베이스 관리 시스템 (RDBMS) 및 구조적 쿼리 언어 (SQL)에 대한 기본 지식은 Active Record를 완전히 이해하는 데 도움이됩니다. 를 참조하십시오 &lt;a href=&quot;https://www.w3schools.com/sql/default.asp&quot;&gt;이 튜토리얼&lt;/a&gt; (또는 &lt;a href=&quot;http://www.sqlcourse.com/&quot;&gt;이 하나&lt;/a&gt; ) 또는 더 배우고 싶은 경우에 다른 방법으로 그들을 공부합니다.</target>
        </trans-unit>
        <trans-unit id="6f0e5325e32134dcafcfb324412a467d07e460c0" translate="yes" xml:space="preserve">
          <source>Basic types (&lt;code&gt;NilClass&lt;/code&gt;, &lt;code&gt;String&lt;/code&gt;, &lt;code&gt;Integer&lt;/code&gt;, &lt;code&gt;Float&lt;/code&gt;, &lt;code&gt;BigDecimal&lt;/code&gt;, &lt;code&gt;TrueClass&lt;/code&gt;, &lt;code&gt;FalseClass&lt;/code&gt;)</source>
          <target state="translated">기본 유형 ( &lt;code&gt;NilClass&lt;/code&gt; , &lt;code&gt;String&lt;/code&gt; , &lt;code&gt;Integer&lt;/code&gt; , &lt;code&gt;Float&lt;/code&gt; , &lt;code&gt;BigDecimal&lt;/code&gt; , &lt;code&gt;TrueClass&lt;/code&gt; , &lt;code&gt;FalseClass&lt;/code&gt; )</target>
        </trans-unit>
        <trans-unit id="2748fa0ed1a815c4ef78fdc11be77bba36b711c2" translate="yes" xml:space="preserve">
          <source>Basic, Digest, and Token Authentication: Rails comes with out-of-the-box support for three kinds of HTTP authentication.</source>
          <target state="translated">기본, 다이제스트 및 토큰 인증 : Rails는 3 가지 종류의 HTTP 인증을 기본적으로 지원합니다.</target>
        </trans-unit>
        <trans-unit id="b1fe19370a0775e7f6fe60baa64e80b58c0895a9" translate="yes" xml:space="preserve">
          <source>BasicObject</source>
          <target state="translated">BasicObject</target>
        </trans-unit>
        <trans-unit id="221bca2d148b0d0e8838e8b0060011bbd6540587" translate="yes" xml:space="preserve">
          <source>Be aware that because the type column is an attribute on the record every new subclass will instantly be marked as dirty and the type column will be included in the list of changed attributes on the record. This is different from non Single Table Inheritance(STI) classes:</source>
          <target state="translated">유형 열은 레코드의 속성이므로 모든 새 하위 클래스는 즉시 더티로 표시되며 유형 열은 레코드의 변경된 속성 목록에 포함됩니다. 이것은 비 STI (Single Table Inheritance) 클래스와 다릅니다.</target>
        </trans-unit>
        <trans-unit id="70aa7849eb504bf9c07c7a1932de11af61c3c9c2" translate="yes" xml:space="preserve">
          <source>Be aware that some resources, while still excellent, cover versions of Ruby as old as 1.6, and commonly 1.8, and will not include some syntax that you will see in day-to-day development with Rails.</source>
          <target state="translated">일부 리소스는 여전히 우수하지만 1.6 이전 및 일반적으로 1.8 이전의 Ruby 버전을 다루며 Rails를 통한 일상적인 개발에서 볼 수있는 일부 구문은 포함하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="2e0909fff00b24909ce18b83501fc8f0f24db92d" translate="yes" xml:space="preserve">
          <source>Be aware that, when given in the &lt;code&gt;Array&lt;/code&gt; format, &lt;code&gt;default_scope&lt;/code&gt; query arguments cannot be converted to a &lt;code&gt;Hash&lt;/code&gt; for default attribute assignment. E.g.:</source>
          <target state="translated">에 주어 졌을 때,주의하십시오 &lt;code&gt;Array&lt;/code&gt; 형식, &lt;code&gt;default_scope&lt;/code&gt; 쿼리 인수는 변환 할 수 없습니다 &lt;code&gt;Hash&lt;/code&gt; 기본 속성에 할당합니다. 예 :</target>
        </trans-unit>
        <trans-unit id="2faa87e7ea85c26498f769492cf25a453b1e1c98" translate="yes" xml:space="preserve">
          <source>Be careful because this also means you're initializing a model object with only the fields that you've selected. If you attempt to access a field except &lt;code&gt;id&lt;/code&gt; that is not in the initialized record you'll receive:</source>
          <target state="translated">선택한 필드만으로 모델 객체를 초기화한다는 의미이므로주의하십시오. 초기화 된 레코드에없는 &lt;code&gt;id&lt;/code&gt; 를 제외한 필드에 액세스하려고하면 다음을 수신합니다.</target>
        </trans-unit>
        <trans-unit id="35c2d48e416e85a403337ba02395acf385887c8e" translate="yes" xml:space="preserve">
          <source>Be careful because this also means you're initializing a model object with only the fields that you've selected. If you attempt to access a field that is not in the initialized record you'll receive:</source>
          <target state="translated">선택한 필드만으로 모델 객체를 초기화한다는 의미이므로주의하십시오. 초기화 된 레코드에없는 필드에 액세스하려고하면 다음과 같은 메시지가 나타납니다.</target>
        </trans-unit>
        <trans-unit id="59a32b6bb43173d6a527b6b817a9b30fc6c9ce08" translate="yes" xml:space="preserve">
          <source>Be careful because this opens the door to arbitrary input. In this case, &lt;code&gt;permit&lt;/code&gt; ensures values in the returned structure are permitted scalars and filters out anything else.</source>
          <target state="translated">임의 입력의 문이 열리므로주의하십시오. 이 경우, &lt;code&gt;permit&lt;/code&gt; 는 반환 된 구조체의 값에 스칼라를 허용하고 다른 것을 필터링합니다.</target>
        </trans-unit>
        <trans-unit id="030f51bb92aa5ae8a3b18ffa3dfebfa089e5fa0c" translate="yes" xml:space="preserve">
          <source>Be careful to sanitize the path parameter if it is coming from a web page. &lt;code&gt;send_file(params[:path])&lt;/code&gt; allows a malicious user to download any file on your server.</source>
          <target state="translated">웹 페이지에서 오는 경우 path 매개 변수를 삭제해야합니다. &lt;code&gt;send_file(params[:path])&lt;/code&gt; 사용하면 악의적 인 사용자가 서버의 모든 파일을 다운로드 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="9ecda37e980467d768a8bfffb1da32c255f0f749" translate="yes" xml:space="preserve">
          <source>Be careful when using data coming from the client (params, cookies, etc.) to locate the file on disk, as this is a security risk that might allow someone to gain access to files they are not meant to.</source>
          <target state="translated">클라이언트에서 오는 데이터 (매개 변수, 쿠키 등)를 사용하여 디스크에서 파일을 찾을 때주의하십시오. 이는 의도하지 않은 파일에 액세스 할 수있는 보안 위험 요소입니다.</target>
        </trans-unit>
        <trans-unit id="9a3e05169abda0bcdb051a78c3ae51438591cab7" translate="yes" xml:space="preserve">
          <source>Be careful when using the older argument style, as an extra literal hash is needed:</source>
          <target state="translated">리터럴 해시가 추가로 필요하므로 이전 인수 스타일을 사용할 때는주의하십시오.</target>
        </trans-unit>
        <trans-unit id="6ead1f640942e8fe8801f87804b55d59092bdeb9" translate="yes" xml:space="preserve">
          <source>Be sure to look at the documentation of those specific classes for more information.</source>
          <target state="translated">자세한 내용은 해당 클래스의 설명서를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="72eaff06e3602b38f11760f6dab14baffdb8a174" translate="yes" xml:space="preserve">
          <source>Be sure to read the &lt;a href=&quot;https://nginx.org/en/docs/&quot;&gt;NGINX documentation&lt;/a&gt; for the most up-to-date information.</source>
          <target state="translated">최신 정보 는 &lt;a href=&quot;https://nginx.org/en/docs/&quot;&gt;NGINX 설명서&lt;/a&gt; 를 읽으십시오 .</target>
        </trans-unit>
        <trans-unit id="66cfdf2a980141a0d9ad0e6769bc83f470812b73" translate="yes" xml:space="preserve">
          <source>Be sure to specify the same class as the &lt;code&gt;value_method&lt;/code&gt; when specifying selected or disabled options. Failure to do this will produce undesired results. Example:</source>
          <target state="translated">선택 또는 비활성화 된 옵션을 지정할 때 &lt;code&gt;value_method&lt;/code&gt; 와 동일한 클래스를 지정하십시오 . 그렇지 않으면 원하지 않는 결과가 발생합니다. 예:</target>
        </trans-unit>
        <trans-unit id="b7c7b12e7d961d7da34597cee8ca83ae237dfdc9" translate="yes" xml:space="preserve">
          <source>Because &lt;a href=&quot;cookiestore&quot;&gt;CookieStore&lt;/a&gt; extends Rack::Session::Abstract::Persisted, many of the options described there can be used to customize the session cookie that is generated. For example:</source>
          <target state="translated">때문에 &lt;a href=&quot;cookiestore&quot;&gt;의 CookieStore는&lt;/a&gt; 랙을 확장 :: 세션 :: 추상 :: 지속 형은 대부분의 옵션은 생성되는 세션 쿠키를 사용자 정의하는 데 사용할 수있다 설명했다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="30a5131845c3216a67c8ccc8a543e7aca63b6fe3" translate="yes" xml:space="preserve">
          <source>Because &lt;code&gt;ActionDispatch::SystemTestCase&lt;/code&gt; is a shim between Capybara and Rails, any driver that is supported by Capybara is supported by system tests as long as you include the required gems and files.</source>
          <target state="translated">&lt;code&gt;ActionDispatch::SystemTestCase&lt;/code&gt; 는 Capybara 와 Rails 사이의 shim 이므로 Capybara 가 지원하는 모든 드라이버는 필요한 gem과 파일을 포함하는 한 시스템 테스트에서 지원됩니다.</target>
        </trans-unit>
        <trans-unit id="e720139c6d33d2393cf4fa1aebb3fea383426ca3" translate="yes" xml:space="preserve">
          <source>Because &lt;code&gt;Rails::Application&lt;/code&gt; inherits from &lt;code&gt;Rails::Railtie&lt;/code&gt; (indirectly), you can use the &lt;code&gt;initializer&lt;/code&gt; method in &lt;code&gt;config/application.rb&lt;/code&gt; to define initializers for the application.</source>
          <target state="translated">&lt;code&gt;Rails::Application&lt;/code&gt; 은 &lt;code&gt;Rails::Railtie&lt;/code&gt; (간접적으로) 에서 상속 하기 때문에 &lt;code&gt;config/application.rb&lt;/code&gt; 의 &lt;code&gt;initializer&lt;/code&gt; 메소드를 사용하여 애플리케이션의 초기화를 정의 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="06998ca6310237a9999773e96a918141bf6229f6" translate="yes" xml:space="preserve">
          <source>Because Rails controllers generally share code for things like authentication and accessing session variables, they inherit from &lt;code&gt;ApplicationController&lt;/code&gt; by default. Rails engines, however are scoped to run independently from the main application, so each engine gets a scoped &lt;code&gt;ApplicationController&lt;/code&gt;. This namespace prevents code collisions, but often engine controllers need to access methods in the main application's &lt;code&gt;ApplicationController&lt;/code&gt;. An easy way to provide this access is to change the engine's scoped &lt;code&gt;ApplicationController&lt;/code&gt; to inherit from the main application's &lt;code&gt;ApplicationController&lt;/code&gt;. For our Blorgh engine this would be done by changing &lt;code&gt;app/controllers/blorgh/application_controller.rb&lt;/code&gt; to look like:</source>
          <target state="translated">Rails 컨트롤러는 일반적으로 인증 및 세션 변수 액세스와 같은 코드를 공유하므로 기본적으로 &lt;code&gt;ApplicationController&lt;/code&gt; 에서 상속됩니다 . 그러나 Rails 엔진은 기본 애플리케이션과 독립적으로 실행되도록 범위가 지정되므로 각 엔진은 범위가 지정된 &lt;code&gt;ApplicationController&lt;/code&gt; 를 얻습니다 . 이 네임 스페이스는 코드 충돌을 방지하지만 종종 엔진 컨트롤러는 기본 애플리케이션의 &lt;code&gt;ApplicationController&lt;/code&gt; 의 메소드에 액세스해야합니다 . 이 액세스를 제공하는 쉬운 방법은 엔진의 범위가 지정된 &lt;code&gt;ApplicationController&lt;/code&gt; 를 기본 애플리케이션의 &lt;code&gt;ApplicationController&lt;/code&gt; 에서 상속 하도록 변경하는 것 입니다. Blorgh 엔진의 경우 &lt;code&gt;app/controllers/blorgh/application_controller.rb&lt;/code&gt; 를 변경하면됩니다. 처럼 보이는 :</target>
        </trans-unit>
        <trans-unit id="ec7a3d4eac0133e388925aeffc1dae7c7d1a806c" translate="yes" xml:space="preserve">
          <source>Because every application handles this kind of thing differently, Rails does not include any view helpers to help you generate these messages directly. However, due to the rich number of methods Rails gives you to interact with validations in general, it's fairly easy to build your own. In addition, when generating a scaffold, Rails will put some ERB into the &lt;code&gt;_form.html.erb&lt;/code&gt; that it generates that displays the full list of errors on that model.</source>
          <target state="translated">모든 응용 프로그램은 이러한 종류의 작업을 다르게 처리하기 때문에 Rails에는 이러한 메시지를 직접 생성하는 데 도움이되는 뷰 도우미가 포함되어 있지 않습니다. 그러나 Rails가 일반적으로 유효성 검사와 상호 작용할 수있는 다양한 방법으로 인해 자신 만의 빌드가 매우 쉽습니다. 또한 스캐 폴드를 생성 할 때 Rails는 ERB를 생성 한 &lt;code&gt;_form.html.erb&lt;/code&gt; 에 해당 모델의 전체 오류 목록을 표시합니다.</target>
        </trans-unit>
        <trans-unit id="a867b2a6962f519bdeca9ed4f9eaa0f52c9997c4" translate="yes" xml:space="preserve">
          <source>Because it relies on &lt;code&gt;url_for&lt;/code&gt;, &lt;code&gt;link_to&lt;/code&gt; supports both older-style controller/action/id arguments and newer RESTful routes. Current Rails style favors RESTful routes whenever possible, so base your application on resources and use</source>
          <target state="translated">그것은 사용하기 때문에 &lt;code&gt;url_for&lt;/code&gt; , &lt;code&gt;link_to&lt;/code&gt; 모두 지원 오래된 스타일의 컨트롤러 / 액션 / ID를 인수하고 새로운 편안하고 경로. Current Rails 스타일은 가능할 때마다 RESTful 경로를 선호하므로 응용 프로그램을 리소스 및 기반으로 사용하십시오</target>
        </trans-unit>
        <trans-unit id="9966d531a4c5fdc9bfda4d712e067930db3e5689" translate="yes" xml:space="preserve">
          <source>Because it relies on the index information from the database &lt;code&gt;:unique_by&lt;/code&gt; is recommended to be paired with Active Record's schema_cache.</source>
          <target state="translated">데이터베이스의 인덱스 정보에 의존하기 때문에 &lt;code&gt;:unique_by&lt;/code&gt; 는 Active Record의 schema_cache와 쌍을 이루는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="c1ec1ab86808178f948933e58dc2edab0caade62" translate="yes" xml:space="preserve">
          <source>Because of Unobtrusive JavaScript, the Rails &quot;Ajax helpers&quot; are actually in two parts: the JavaScript half and the Ruby half.</source>
          <target state="translated">눈에 잘 띄지 않는 JavaScript로 인해 Rails &quot;Ajax helper&quot;는 실제로 JavaScript 부분과 Ruby 부분의 두 부분으로 구성됩니다.</target>
        </trans-unit>
        <trans-unit id="4647714862cdc3e0d96dd2b7ca190224c548ed10" translate="yes" xml:space="preserve">
          <source>Because of that, it is not a good idea to autoload constants on application initialization.</source>
          <target state="translated">따라서 응용 프로그램 초기화시 상수를 자동로드하는 것은 좋지 않습니다.</target>
        </trans-unit>
        <trans-unit id="3a2327fba79580533b4d74ad10fe2d12d1c5c87f" translate="yes" xml:space="preserve">
          <source>Because of the modular nature of the testing framework, it is possible to create your own assertions. In fact, that's exactly what Rails does. It includes some specialized assertions to make your life easier.</source>
          <target state="translated">테스트 프레임 워크의 모듈 식 특성으로 인해 고유 한 어설 션을 만들 수 있습니다. 사실, 이것이 바로 Rails가하는 일입니다. 그것은 당신의 인생을 더 쉽게하기 위해 몇 가지 전문화 된 주장을 포함합니다.</target>
        </trans-unit>
        <trans-unit id="9f0c14d4074af7ab463fd2136d643f6539d3c349" translate="yes" xml:space="preserve">
          <source>Because of the way that Ruby does constant lookup you may run into a situation where your engine controller is inheriting from the main application controller and not your engine's application controller. Ruby is able to resolve the &lt;code&gt;ApplicationController&lt;/code&gt; constant, and therefore the autoloading mechanism is not triggered. See the section &lt;a href=&quot;autoloading_and_reloading_constants#when-constants-aren-t-missed&quot;&gt;When Constants Aren't Missed&lt;/a&gt; of the &lt;a href=&quot;autoloading_and_reloading_constants&quot;&gt;Autoloading and Reloading Constants&lt;/a&gt; guide for further details. The best way to prevent this from happening is to use &lt;code&gt;require_dependency&lt;/code&gt; to ensure that the engine's application controller is loaded. For example:</source>
          <target state="translated">Ruby가 지속적으로 조회하는 방식 때문에 엔진 컨트롤러가 엔진의 애플리케이션 컨트롤러가 아닌 기본 애플리케이션 컨트롤러에서 상속되는 상황이 발생할 수 있습니다. Ruby는 &lt;code&gt;ApplicationController&lt;/code&gt; 상수를 확인할 수 있으므로 자동 로딩 메커니즘이 트리거되지 않습니다. 자세한 내용은 &lt;a href=&quot;autoloading_and_reloading_constants#when-constants-aren-t-missed&quot;&gt;상수가 &lt;/a&gt;&lt;a href=&quot;autoloading_and_reloading_constants&quot;&gt;자동로드 및 다시로드 상수&lt;/a&gt; 에서 누락되지 않은 경우 섹션을 참조 하십시오. 이를 방지하는 가장 좋은 방법은 &lt;code&gt;require_dependency&lt;/code&gt; 를 사용 하여 엔진의 애플리케이션 컨트롤러가로드되도록하는 것입니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="23169a9b2d9e1c5dc4de9b85636cce7266ee35d8" translate="yes" xml:space="preserve">
          <source>Because of this behavior you cannot use any of the &lt;code&gt;*_path&lt;/code&gt; helpers inside of an email. Instead you will need to use the associated &lt;code&gt;*_url&lt;/code&gt; helper. For example instead of using</source>
          <target state="translated">이 동작 으로 인해 이메일 내부 에서 &lt;code&gt;*_path&lt;/code&gt; 헬퍼를 사용할 수 없습니다 . 대신 관련 &lt;code&gt;*_url&lt;/code&gt; 도우미 를 사용해야합니다 . 예를 들어</target>
        </trans-unit>
        <trans-unit id="e727a35a6d6fa4bb2d3c57078f7ad67894827271" translate="yes" xml:space="preserve">
          <source>Because of this, most web applications will display a generic error message &quot;user name or password not correct&quot;, if one of these are not correct. If it said &quot;the user name you entered has not been found&quot;, an attacker could automatically compile a list of user names.</source>
          <target state="translated">이로 인해 대부분의 웹 응용 프로그램에는 &quot;사용자 이름 또는 암호가 올바르지 않습니다&quot;라는 일반 오류 메시지가 표시됩니다. &quot;입력 한 사용자 이름을 찾을 수 없습니다&quot;라는 메시지가 표시되면 공격자가 자동으로 사용자 이름 목록을 컴파일 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="908ba7cdc92d1a69805da00e59ab9d376b779455" translate="yes" xml:space="preserve">
          <source>Because requesting various HTTP verbs with a single action has security implications, you must either specify the actions in the via options or use one of the &lt;a href=&quot;httphelpers&quot;&gt;HttpHelpers&lt;/a&gt; instead &lt;code&gt;match&lt;/code&gt;</source>
          <target state="translated">단일 작업으로 다양한 HTTP 동사를 요청하는 보안 문제가 있기 때문에, 당신도 옵션을 통해에 작업을 지정하거나 중 하나를 사용합니다 &lt;a href=&quot;httphelpers&quot;&gt;HttpHelpers을&lt;/a&gt; 대신 &lt;code&gt;match&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="16a5e80e523d0473c8f3749750a4ef284a8314a1" translate="yes" xml:space="preserve">
          <source>Because schema files are commonly used to create new databases, it is strongly recommended that you check your schema file into source control.</source>
          <target state="translated">스키마 파일은 일반적으로 새 데이터베이스를 작성하는 데 사용되므로 스키마 파일을 소스 제어로 점검하는 것이 좋습니다.</target>
        </trans-unit>
        <trans-unit id="13443a7680d7ec88680920b0c0c627048b2dfa83" translate="yes" xml:space="preserve">
          <source>Because submitting forms with HTTP methods other than GET and POST isn't widely supported across browsers, all other HTTP methods are actually sent over POST with the intended method indicated in the &lt;code&gt;_method&lt;/code&gt; parameter. Rails automatically detects and compensates for this.</source>
          <target state="translated">GET 및 POST 이외의 HTTP 메소드를 사용하여 양식을 제출하는 것은 브라우저에서 널리 지원되지 않기 때문에 다른 모든 HTTP 메소드는 실제로 &lt;code&gt;_method&lt;/code&gt; 매개 변수에 표시된 의도 된 메소드를 사용하여 POST를 통해 전송 됩니다. Rails는이를 자동으로 감지하고 보상합니다.</target>
        </trans-unit>
        <trans-unit id="51dc3dbf358f9c481107b8615d8e38570402d686" translate="yes" xml:space="preserve">
          <source>Because the &lt;code&gt;default_locale&lt;/code&gt; hasn't changed, translations use the &lt;code&gt;:en&lt;/code&gt; locale and the response renders the english strings:</source>
          <target state="translated">&lt;code&gt;default_locale&lt;/code&gt; 이 변경되지 않았 으므로 번역에서 &lt;code&gt;:en&lt;/code&gt; 로케일을 사용하고 응답은 영어 문자열을 렌더링합니다.</target>
        </trans-unit>
        <trans-unit id="4d880daaea2369c3038e718c9922aff8c3202105" translate="yes" xml:space="preserve">
          <source>Because the &lt;code&gt;has_many&lt;/code&gt; is defined inside a class that is inside the &lt;code&gt;Blorgh&lt;/code&gt; module, Rails will know that you want to use the &lt;code&gt;Blorgh::Comment&lt;/code&gt; model for these objects, so there's no need to specify that using the &lt;code&gt;:class_name&lt;/code&gt; option here.</source>
          <target state="translated">&lt;code&gt;has_many&lt;/code&gt; 가 &lt;code&gt;Blorgh&lt;/code&gt; 모듈 내부의 클래스 내에 정의되어 있기 때문에 Rails는 이러한 객체에 &lt;code&gt;Blorgh::Comment&lt;/code&gt; 모델 을 사용하려는 것을 알고 있으므로 여기 에서 &lt;code&gt;:class_name&lt;/code&gt; 옵션 을 사용하여 지정할 필요는 없습니다 .</target>
        </trans-unit>
        <trans-unit id="94f730380a3d056c7afb2228ec6d386218c10f74" translate="yes" xml:space="preserve">
          <source>Because the generated param begins with the record's &lt;code&gt;id&lt;/code&gt;, it is suitable for passing to &lt;code&gt;find&lt;/code&gt;. In a controller, for example:</source>
          <target state="translated">생성 된 매개 변수는 레코드의 &lt;code&gt;id&lt;/code&gt; 로 시작 하므로 &lt;code&gt;find&lt;/code&gt; 에 전달하는 데 적합합니다 . 컨트롤러에서 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="18c830452f8fdb170bad1a89b1e573874c42f67e" translate="yes" xml:space="preserve">
          <source>Because the object is not yet stored in the database, the SQL generated looks like this:</source>
          <target state="translated">오브젝트가 아직 데이터베이스에 저장되어 있지 않기 때문에 생성 된 SQL은 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="207cfeebcece35de9441ba829a80f6d8d8ef5bc7" translate="yes" xml:space="preserve">
          <source>Because the router uses the HTTP verb and URL to match inbound requests, four URLs map to seven different actions.</source>
          <target state="translated">라우터는 HTTP 동사와 URL을 사용하여 인바운드 요청을 일치시키기 때문에 4 개의 URL이 7 개의 다른 작업에 매핑됩니다.</target>
        </trans-unit>
        <trans-unit id="17cb2a896ede26fa41a40fc6b070d96e2525adf4" translate="yes" xml:space="preserve">
          <source>Because these APIs were never fully specified or documented, and because WYSIWYG HTML editors are enormous in scope, each browser's implementation has its own set of bugs and quirks, and JavaScript developers are left to resolve the inconsistencies.</source>
          <target state="translated">이러한 API는 완전히 지정되거나 문서화되지 않았으며 WYSIWYG HTML 편집기의 범위가 엄청 나기 때문에 각 브라우저의 구현에는 고유 한 버그와 단점이 있으며 JavaScript 개발자는 불일치를 해결해야합니다.</target>
        </trans-unit>
        <trans-unit id="b858462d2d453584119063f4f49ca3a3e4e2d0c0" translate="yes" xml:space="preserve">
          <source>Because these overrides are not referenced by your Rails application itself, Rails' autoloading system will not kick in and load your overrides. This means that you need to require them yourself.</source>
          <target state="translated">이러한 재정의는 Rails 애플리케이션 자체에서 참조하지 않기 때문에 Rails의 자동 로딩 시스템은 재정의를 시작하지 않습니다. 즉, 직접 요구해야합니다.</target>
        </trans-unit>
        <trans-unit id="105657bd45b1c77a9b31b12f9bd5d3b248e7b8a8" translate="yes" xml:space="preserve">
          <source>Because you might want to use the same controller for a singular route (&lt;code&gt;/account&lt;/code&gt;) and a plural route (&lt;code&gt;/accounts/45&lt;/code&gt;), singular resources map to plural controllers. So that, for example, &lt;code&gt;resource :photo&lt;/code&gt; and &lt;code&gt;resources :photos&lt;/code&gt; creates both singular and plural routes that map to the same controller (&lt;code&gt;PhotosController&lt;/code&gt;).</source>
          <target state="translated">단일 경로 ( &lt;code&gt;/account&lt;/code&gt; ) 및 복수 경로 ( &lt;code&gt;/accounts/45&lt;/code&gt; )에 동일한 컨트롤러를 사용하려는 경우 단일 리소스가 복수 컨트롤러에 매핑됩니다. 예를 들어 &lt;code&gt;resource :photo&lt;/code&gt; 및 &lt;code&gt;resources :photos&lt;/code&gt; 는 동일한 컨트롤러 ( &lt;code&gt;PhotosController&lt;/code&gt; )에 매핑되는 단일 및 복수 경로를 모두 만듭니다 .</target>
        </trans-unit>
        <trans-unit id="76038c087039c40b7b7284e3c2ef010433a7bf3c" translate="yes" xml:space="preserve">
          <source>Because you're working in the development environment by default, this command will apply to the database defined in the &lt;code&gt;development&lt;/code&gt; section of your &lt;code&gt;config/database.yml&lt;/code&gt; file. If you would like to execute migrations in another environment, for instance in production, you must explicitly pass it when invoking the command: &lt;code&gt;rails db:migrate RAILS_ENV=production&lt;/code&gt;.</source>
          <target state="translated">기본적으로 개발 환경에서 작업하기 때문에이 명령은 &lt;code&gt;config/database.yml&lt;/code&gt; 파일 의 &lt;code&gt;development&lt;/code&gt; 섹션에 정의 된 데이터베이스에 적용 됩니다. 다른 환경 (예 : 프로덕션)에서 마이그레이션을 실행하려면 다음 명령을 호출 할 때 명시 적으로 전달해야합니다. &lt;code&gt;rails db:migrate RAILS_ENV=production&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="e949293bb3141d39921183faafd54e8bcb4089c2" translate="yes" xml:space="preserve">
          <source>Becomes:</source>
          <target state="translated">Becomes:</target>
        </trans-unit>
        <trans-unit id="545653a2c89d898acc0569e3f9fcc83a512936a8" translate="yes" xml:space="preserve">
          <source>Before &lt;code&gt;form_with&lt;/code&gt; was introduced in Rails 5.1 its functionality used to be split between &lt;code&gt;form_tag&lt;/code&gt; and &lt;code&gt;form_for&lt;/code&gt;. Both are now soft-deprecated. Documentation on their usage can be found in &lt;a href=&quot;https://guides.rubyonrails.org/v5.2/form_helpers.html&quot;&gt;older versions of this guide&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;form_with&lt;/code&gt; 가 Rails 5.1에 도입 되기 전에는 그 기능이 &lt;code&gt;form_tag&lt;/code&gt; 와 &lt;code&gt;form_for&lt;/code&gt; 로 분리되었습니다 . 둘 다 이제 더 이상 사용되지 않습니다. 사용법에 대한 &lt;a href=&quot;https://guides.rubyonrails.org/v5.2/form_helpers.html&quot;&gt;설명서는이 안내서의 이전 버전&lt;/a&gt; 에서 찾을 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="12627681aa34b60f834bdbb239cdfeea9abab3d0" translate="yes" xml:space="preserve">
          <source>Before and around callbacks are called in the order that they are set; after callbacks are called in the reverse order.</source>
          <target state="translated">사전 및 주변 콜백은 설정된 순서대로 호출됩니다. 콜백이 역순으로 호출 된 후</target>
        </trans-unit>
        <trans-unit id="2fdc910d76e3932d8df3d5739e154250f1c98a2c" translate="yes" xml:space="preserve">
          <source>Before attempting to upgrade an existing application, you should be sure you have a good reason to upgrade. You need to balance several factors: the need for new features, the increasing difficulty of finding support for old code, and your available time and skills, to name a few.</source>
          <target state="translated">기존 애플리케이션을 업그레이드하기 전에 업그레이드해야 할 적절한 이유가 있는지 확인해야합니다. 새로운 기능의 필요성, 기존 코드에 대한 지원 찾기가 점점 어려워지는 시간, 사용 가능한 시간과 기술 등 몇 가지 요소의 균형을 유지해야합니다.</target>
        </trans-unit>
        <trans-unit id="c786675ac78dac6c58b8e805179d7e0c0f3d52a5" translate="yes" xml:space="preserve">
          <source>Before entering the wrapped block, the Reloader will check whether the running application needs to be reloaded -- for example, because a model's source file has been modified. If it determines a reload is required, it will wait until it's safe, and then do so, before continuing. When the application is configured to always reload regardless of whether any changes are detected, the reload is instead performed at the end of the block.</source>
          <target state="translated">랩핑 된 블록에 들어가기 전에 리 로더는 모델의 소스 파일이 수정되어 실행중인 애플리케이션을 다시로드해야하는지 여부를 확인합니다. 재 장전이 필요하다고 판단되면, 안전 할 때까지 기다렸다가 계속 진행하십시오. 변경 사항이 감지되는지 여부에 관계없이 응용 프로그램이 항상 다시로드되도록 구성된 경우 블록의 끝에서 다시로드가 수행됩니다.</target>
        </trans-unit>
        <trans-unit id="92cc49e1a63e26fcb03606431c4cf021fd28643c" translate="yes" xml:space="preserve">
          <source>Before making a request to store a file.</source>
          <target state="translated">파일 저장을 요청하기 전에</target>
        </trans-unit>
        <trans-unit id="96bad9625d528f015a284057725eb2d7c03a9c2d" translate="yes" xml:space="preserve">
          <source>Before making a request to your application for direct upload metadata.</source>
          <target state="translated">직접 업로드 메타 데이터를 애플리케이션에 요청하기 전에.</target>
        </trans-unit>
        <trans-unit id="d54209975d6e366779eb34c6aa47bd36f14c7b0e" translate="yes" xml:space="preserve">
          <source>Before saving an Active Record object, Rails runs your validations. If these validations produce any errors, Rails does not save the object.</source>
          <target state="translated">활성 레코드 객체를 저장하기 전에 Rails는 유효성 검사를 실행합니다. 이러한 유효성 검사로 오류가 발생하면 Rails는 객체를 저장하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="fd483032d7ea0c68b6f2b1b22679305976657178" translate="yes" xml:space="preserve">
          <source>Before the interceptor can do its job you need to register it with the Action Mailer framework. You can do this in an initializer file &lt;code&gt;config/initializers/sandbox_email_interceptor.rb&lt;/code&gt;</source>
          <target state="translated">인터셉터가 작업을 수행하기 전에 Action Mailer 프레임 워크에 등록해야합니다. 이니셜 라이저 파일 &lt;code&gt;config/initializers/sandbox_email_interceptor.rb&lt;/code&gt; 에서이를 수행 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="61bbc428198e4eed1b347c0bc85e5c8e08c372fe" translate="yes" xml:space="preserve">
          <source>Before the request is sent.</source>
          <target state="translated">요청을 보내기 전에</target>
        </trans-unit>
        <trans-unit id="85655d1730f3271e69fdc17495cf3a5e4534d688" translate="yes" xml:space="preserve">
          <source>Before the whole ajax business.</source>
          <target state="translated">전체 아약스 사업 전에.</target>
        </trans-unit>
        <trans-unit id="af606de8bea1b7291f8e6d37069a8c5b33d63bb5" translate="yes" xml:space="preserve">
          <source>Before we customize our workflow, let's first see what our scaffold looks like:</source>
          <target state="translated">워크 플로우를 커스터마이징하기 전에 먼저 스캐 폴드가 어떻게 보이는지 봅시다 :</target>
        </trans-unit>
        <trans-unit id="9448bd23e0d779c107e02e8dc01496d49981e1e6" translate="yes" xml:space="preserve">
          <source>Before we dig into more details, let's talk about how validations fit into the big picture of your application.</source>
          <target state="translated">자세한 내용을 살펴보기 전에 유효성 검사가 응용 프로그램의 큰 그림에 어떻게 적용되는지에 대해 이야기 해 보겠습니다.</target>
        </trans-unit>
        <trans-unit id="64fb9e4dcc61f277a71d85fd7082b915f88e59db" translate="yes" xml:space="preserve">
          <source>Before we go on, let's see our brand new generator description:</source>
          <target state="translated">계속하기 전에 새로운 발전기 설명을 보자.</target>
        </trans-unit>
        <trans-unit id="1f2f3246d7575514388863a9eaa261e40a36cb93" translate="yes" xml:space="preserve">
          <source>Before you install Rails, you should check to make sure that your system has the proper prerequisites installed. These include Ruby and SQLite3.</source>
          <target state="translated">Rails를 설치하기 전에 시스템에 올바른 전제 조건이 설치되어 있는지 확인해야합니다. 여기에는 Ruby 및 SQLite3이 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="842beb51ca9c5417a27f472386d0e0d52dcc074f" translate="yes" xml:space="preserve">
          <source>Before:</source>
          <target state="translated">Before:</target>
        </trans-unit>
        <trans-unit id="8cf0b865ce0821948992d3642584fcb7e901151e" translate="yes" xml:space="preserve">
          <source>Begins a transaction.</source>
          <target state="translated">거래를 시작합니다.</target>
        </trans-unit>
        <trans-unit id="76b32e11c19446e1dbace2daddb66ca46e38e9b0" translate="yes" xml:space="preserve">
          <source>Begins the transaction (and turns off auto-committing).</source>
          <target state="translated">트랜잭션을 시작하고 자동 커밋을 해제합니다.</target>
        </trans-unit>
        <trans-unit id="cecbd7657f04c4c0e06cb767937c491048185d4a" translate="yes" xml:space="preserve">
          <source>Begins the transaction with the isolation level set. Raises an error by default; adapters that support setting the isolation level should implement this method.</source>
          <target state="translated">격리 수준이 설정된 트랜잭션을 시작합니다. 기본적으로 오류를 발생시킵니다. 격리 수준 설정을 지원하는 어댑터는이 방법을 구현해야합니다.</target>
        </trans-unit>
        <trans-unit id="7f9cabf9e7571243022125db750278f3a3262e72" translate="yes" xml:space="preserve">
          <source>Being an &lt;code&gt;ActiveSupport::Notifications&lt;/code&gt; consumer, &lt;code&gt;ActiveSupport::LogSubscriber&lt;/code&gt; exposes a simple interface to check if instrumented code raises an exception. It is common to log a different message in case of an error, and this can be achieved by extending the previous example:</source>
          <target state="translated">인 &lt;code&gt;ActiveSupport::Notifications&lt;/code&gt; 소비자, &lt;code&gt;ActiveSupport::LogSubscriber&lt;/code&gt; 계측 코드가 예외를 발생 여부를 확인하는 간단한 인터페이스를 제공합니다. 오류가 발생하면 다른 메시지를 기록하는 것이 일반적이며 이전 예를 확장하면됩니다.</target>
        </trans-unit>
        <trans-unit id="7a4d9b5038b06d02476b832e69dbc48e5e679e43" translate="yes" xml:space="preserve">
          <source>Below each database statement you can see arrows pointing to the specific source filename (and line number) of the method that resulted in a database call. This can help you identify and address performance problems caused by N+1 queries: single database queries that generates multiple additional queries.</source>
          <target state="translated">각 데이터베이스 명령문 아래에 데이터베이스 호출을 야기한 메소드의 특정 소스 파일 이름 (및 행 번호)을 가리키는 화살표가 있습니다. 이는 여러 개의 추가 쿼리를 생성하는 단일 데이터베이스 쿼리 인 N + 1 쿼리로 인한 성능 문제를 식별하고 해결하는 데 도움이됩니다.</target>
        </trans-unit>
        <trans-unit id="cbce83db6f9a124adce655f5fe4dcbe863f14635" translate="yes" xml:space="preserve">
          <source>Below is a comprehensive list of all the initializers found in Rails in the order that they are defined (and therefore run in, unless otherwise stated).</source>
          <target state="translated">아래는 Rails에서 발견 된 모든 이니셜 라이저의 전체 목록을 정의 된 순서대로 나열한 것입니다 (따라서 명시하지 않는 한 실행).</target>
        </trans-unit>
        <trans-unit id="f18490fdbfcdd7f60245bd307197c940895bab95" translate="yes" xml:space="preserve">
          <source>Below is a full-length RSS example actually used on Basecamp:</source>
          <target state="translated">아래는 Basecamp에서 실제로 사용되는 전체 길이 RSS 예제입니다.</target>
        </trans-unit>
        <trans-unit id="cda90971ef992e478bbe678d30eaa7f8de07a67a" translate="yes" xml:space="preserve">
          <source>Below is a list of the subscription adapters available for end users.</source>
          <target state="translated">아래는 최종 사용자가 사용할 수있는 구독 어댑터 목록입니다.</target>
        </trans-unit>
        <trans-unit id="8d63719ab6fb0ad6cf999e2c7170b6bcc2826f99" translate="yes" xml:space="preserve">
          <source>Below lists scenarios that apply to &lt;code&gt;asset_path&lt;/code&gt; whether or not you're using the asset pipeline.</source>
          <target state="translated">아래는 자산 파이프 라인 사용 여부와 &lt;code&gt;asset_path&lt;/code&gt; 없이 asset_path에 적용되는 시나리오를 보여줍니다 .</target>
        </trans-unit>
        <trans-unit id="9ed99e75a9b04f273de29c9fef2bd3fb53d2e2de" translate="yes" xml:space="preserve">
          <source>Benchmark</source>
          <target state="translated">Benchmark</target>
        </trans-unit>
        <trans-unit id="b1c5a3d2419b25693490862e8a8d7af395160a5e" translate="yes" xml:space="preserve">
          <source>Benchmark::ms</source>
          <target state="translated">Benchmark::ms</target>
        </trans-unit>
        <trans-unit id="61c7d2483623bf49a95324c835eeeea3d896ceed" translate="yes" xml:space="preserve">
          <source>BenchmarkHelper</source>
          <target state="translated">BenchmarkHelper</target>
        </trans-unit>
        <trans-unit id="ab531d87837a41431e7812354e2bb816e9f86a50" translate="yes" xml:space="preserve">
          <source>Benchmarkable</source>
          <target state="translated">Benchmarkable</target>
        </trans-unit>
        <trans-unit id="bf16fd62f23795238d1a429513c931501554ad9e" translate="yes" xml:space="preserve">
          <source>Benchmarkable#benchmark</source>
          <target state="translated">Benchmarkable#benchmark</target>
        </trans-unit>
        <trans-unit id="37cb47e161f37d441638b3086246ee8f23aeed8f" translate="yes" xml:space="preserve">
          <source>Besides &lt;code&gt;:only_integer&lt;/code&gt;, this helper also accepts the following options to add constraints to acceptable values:</source>
          <target state="translated">게다가 &lt;code&gt;:only_integer&lt;/code&gt; ,이 도우미도 사용할 수있는 값에 제약 조건을 추가 할 수있는 다음과 같은 옵션을 받아 들인다 :</target>
        </trans-unit>
        <trans-unit id="2f8fcc5301064d4d18d8e8349dd2ca12262510fc" translate="yes" xml:space="preserve">
          <source>Besides &lt;code&gt;change_column&lt;/code&gt;, the &lt;code&gt;change_column_null&lt;/code&gt; and &lt;code&gt;change_column_default&lt;/code&gt; methods are used specifically to change a not null constraint and default values of a column.</source>
          <target state="translated">게다가 &lt;code&gt;change_column&lt;/code&gt; 의 &lt;code&gt;change_column_null&lt;/code&gt; 및 &lt;code&gt;change_column_default&lt;/code&gt; 방법은 컬럼의 NOT NULL 제약 조건 및 기본 값을 변경하기 위해 특별히 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="b273b9e310b9983e2ceca1f1acae2be6dadbf579" translate="yes" xml:space="preserve">
          <source>Besides providing the same configuration as &lt;a href=&quot;engine&quot;&gt;Rails::Engine&lt;/a&gt; and &lt;a href=&quot;railtie&quot;&gt;Rails::Railtie&lt;/a&gt;, the application object has several specific configurations, for example &amp;ldquo;cache_classes&amp;rdquo;, &amp;ldquo;consider_all_requests_local&amp;rdquo;, &amp;ldquo;filter_parameters&amp;rdquo;, &amp;ldquo;logger&amp;rdquo; and so forth.</source>
          <target state="translated">&lt;a href=&quot;engine&quot;&gt;Rails :: Engine&lt;/a&gt; 및 &lt;a href=&quot;railtie&quot;&gt;Rails :: Railtie&lt;/a&gt; 와 동일한 구성을 제공하는 것 외에도 응용 프로그램 객체에는&amp;ldquo;cache_classes&amp;rdquo;,&amp;ldquo;consider_all_requests_local&amp;rdquo;,&amp;ldquo;filter_parameters&amp;rdquo;,&amp;ldquo;logger&amp;rdquo;등과 같은 몇 가지 특정 구성이 있습니다.</target>
        </trans-unit>
        <trans-unit id="2da3343850e81078f39f15d9792eada74f620161" translate="yes" xml:space="preserve">
          <source>Besides that, it is &lt;em&gt;important to know what you are doing when building response headers partly based on user input.&lt;/em&gt; For example you want to redirect the user back to a specific page. To do that you introduced a &quot;referer&quot; field in a form to redirect to the given address:</source>
          <target state="translated">또한 &lt;em&gt;사용자 입력에 따라 부분적으로 응답 헤더를 작성할 때 수행중인 작업을 알아야합니다. &lt;/em&gt;예를 들어 사용자를 특정 페이지로 다시 리디렉션하려고합니다. 이를 위해 지정된 주소로 경로 재지 정하는 양식에 &quot;참조&quot;필드를 도입했습니다.</target>
        </trans-unit>
        <trans-unit id="8545eb43f2284081f46fb7f0c8953acca8bd63e1" translate="yes" xml:space="preserve">
          <source>Besides that, one can use &lt;code&gt;deep_stringify_keys&lt;/code&gt; and &lt;code&gt;deep_stringify_keys!&lt;/code&gt; to stringify all the keys in the given hash and all the hashes nested into it. An example of the result is:</source>
          <target state="translated">그 외에도 &lt;code&gt;deep_stringify_keys&lt;/code&gt; 와 &lt;code&gt;deep_stringify_keys!&lt;/code&gt; 사용할 수 있습니다 ! 주어진 해시의 모든 키와 그 안에 중첩 된 모든 해시를 문자열 화합니다. 결과의 예는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="214e4b29afd4f83b2e93b3009d2f09bb58dfcb40" translate="yes" xml:space="preserve">
          <source>Besides that, one can use &lt;code&gt;deep_symbolize_keys&lt;/code&gt; and &lt;code&gt;deep_symbolize_keys!&lt;/code&gt; to symbolize all the keys in the given hash and all the hashes nested into it. An example of the result is:</source>
          <target state="translated">그 외에도 &lt;code&gt;deep_symbolize_keys&lt;/code&gt; 및 &lt;code&gt;deep_symbolize_keys!&lt;/code&gt; 사용할 수 있습니다 ! 주어진 해시의 모든 키와 그 안에 중첩 된 모든 해시를 상징합니다. 결과의 예는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="dc1d2796081e7e123cf618a79177fc8b8f7db0a7" translate="yes" xml:space="preserve">
          <source>Besides the &lt;code&gt;Railtie&lt;/code&gt; configuration which is shared across the application, in a &lt;code&gt;Rails::Engine&lt;/code&gt; you can access &lt;code&gt;autoload_paths&lt;/code&gt;, &lt;code&gt;eager_load_paths&lt;/code&gt; and &lt;code&gt;autoload_once_paths&lt;/code&gt;, which, differently from a &lt;code&gt;Railtie&lt;/code&gt;, are scoped to the current engine.</source>
          <target state="translated">외에 &lt;code&gt;Railtie&lt;/code&gt; 의 A의 응용 프로그램에서 공유되는 구성 &lt;code&gt;Rails::Engine&lt;/code&gt; 당신이 액세스 할 수 &lt;code&gt;autoload_paths&lt;/code&gt; , &lt;code&gt;eager_load_paths&lt;/code&gt; 및 &lt;code&gt;autoload_once_paths&lt;/code&gt; 다르게에서, &lt;code&gt;Railtie&lt;/code&gt; , 현재 엔진에 범위됩니다.</target>
        </trans-unit>
        <trans-unit id="aab16ad223bf98798817cb7f4151913493253843" translate="yes" xml:space="preserve">
          <source>Besides the overwritable callback methods, it's also possible to register callbacks through the use of the callback macros. Their main advantage is that the macros add behavior into a callback queue that is kept intact down through an inheritance hierarchy.</source>
          <target state="translated">덮어 쓸 수있는 콜백 메소드 외에도 콜백 매크로를 사용하여 콜백을 등록 할 수도 있습니다. 주요 장점은 매크로가 상속 계층 구조를 통해 그대로 유지되는 콜백 대기열에 동작을 추가한다는 것입니다.</target>
        </trans-unit>
        <trans-unit id="21156cd53a58551456986b2a836ef2e22d98636a" translate="yes" xml:space="preserve">
          <source>Besides the standard &lt;code&gt;assets/*&lt;/code&gt; paths, additional (fully qualified) paths can be added to the pipeline in &lt;code&gt;config/initializers/assets.rb&lt;/code&gt;. For example:</source>
          <target state="translated">표준 &lt;code&gt;assets/*&lt;/code&gt; 경로 외에도 &lt;code&gt;config/initializers/assets.rb&lt;/code&gt; 의 파이프 라인에 추가 (정규화 된) 경로를 추가 할 수 있습니다 . 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="93c5a13cb41e0090ea6481efce8635ed8f60c844" translate="yes" xml:space="preserve">
          <source>Besides these usual middleware, you can add your own by using the &lt;code&gt;config.middleware.use&lt;/code&gt; method:</source>
          <target state="translated">이 일반적인 미들웨어 외에도 &lt;code&gt;config.middleware.use&lt;/code&gt; 메소드 를 사용하여 직접 추가 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="efb3be83bd096c085ea66d166340ff1dbac9ea78" translate="yes" xml:space="preserve">
          <source>Beware of configurations like</source>
          <target state="translated">다음과 같은 구성에주의하십시오</target>
        </trans-unit>
        <trans-unit id="3f40c83c125e2729add8d9adae11da2d6301551c" translate="yes" xml:space="preserve">
          <source>Bi-directional Associations</source>
          <target state="translated">양방향 협회</target>
        </trans-unit>
        <trans-unit id="00caaf1ca5c6603e4daf7784ab89b990d28e81b3" translate="yes" xml:space="preserve">
          <source>Bi-directional associations</source>
          <target state="translated">양방향 연관</target>
        </trans-unit>
        <trans-unit id="92438720ccb09a8bc6b241c5b27a00fb72144c25" translate="yes" xml:space="preserve">
          <source>BigInteger</source>
          <target state="translated">BigInteger</target>
        </trans-unit>
        <trans-unit id="66639f7d455dd71faa9147f5d69e5ce885d8bebd" translate="yes" xml:space="preserve">
          <source>Binary</source>
          <target state="translated">Binary</target>
        </trans-unit>
        <trans-unit id="cde7d7e61529b7ae189c0763f21d8d4410fe2064" translate="yes" xml:space="preserve">
          <source>Bind parameters</source>
          <target state="translated">바인드 매개 변수</target>
        </trans-unit>
        <trans-unit id="494b23be585e2de38fd7c056357b7c026bef5fad" translate="yes" xml:space="preserve">
          <source>Binding a Form to an Object</source>
          <target state="translated">폼을 객체에 바인딩</target>
        </trans-unit>
        <trans-unit id="e1ec8af5ed0ac3706706e7ca0257fb8472997bd9" translate="yes" xml:space="preserve">
          <source>Bit String Types</source>
          <target state="translated">비트 문자열 타입</target>
        </trans-unit>
        <trans-unit id="5b568c1cb1f852ea2c03b68238b8fcca647d77e2" translate="yes" xml:space="preserve">
          <source>Bite-sized separation of concerns</source>
          <target state="translated">한입 크기의 우려 분리</target>
        </trans-unit>
        <trans-unit id="205071dffbd46bb5d063897ef7efc85392333d51" translate="yes" xml:space="preserve">
          <source>Blob#audio?</source>
          <target state="translated">Blob#audio?</target>
        </trans-unit>
        <trans-unit id="c0f2e5379fe8f9e9b75ea79286523ea934bffbee" translate="yes" xml:space="preserve">
          <source>Blob#delete</source>
          <target state="translated">Blob#delete</target>
        </trans-unit>
        <trans-unit id="9f7aeeabc9608a7ac413662a854375f21e08ac0d" translate="yes" xml:space="preserve">
          <source>Blob#download</source>
          <target state="translated">Blob#download</target>
        </trans-unit>
        <trans-unit id="551cda9c9f08f35bee9b38fd7ca0f206df1ad8da" translate="yes" xml:space="preserve">
          <source>Blob#filename</source>
          <target state="translated">Blob#filename</target>
        </trans-unit>
        <trans-unit id="062577b47bd61636fd48a4da0b2cacc173fbd426" translate="yes" xml:space="preserve">
          <source>Blob#image?</source>
          <target state="translated">Blob#image?</target>
        </trans-unit>
        <trans-unit id="1a615dbc6ac1b528463c96c4c0d85da171d09499" translate="yes" xml:space="preserve">
          <source>Blob#key</source>
          <target state="translated">Blob#key</target>
        </trans-unit>
        <trans-unit id="6f6874ae3b2e04411de9ef49300a521a64c511e7" translate="yes" xml:space="preserve">
          <source>Blob#open</source>
          <target state="translated">Blob#open</target>
        </trans-unit>
        <trans-unit id="461c5b7e462d5d34f2018fe8df6f9dfde7473f25" translate="yes" xml:space="preserve">
          <source>Blob#purge</source>
          <target state="translated">Blob#purge</target>
        </trans-unit>
        <trans-unit id="8057966b9902bfb47c709f89bb8c52c3985e3092" translate="yes" xml:space="preserve">
          <source>Blob#purge_later</source>
          <target state="translated">Blob#purge_later</target>
        </trans-unit>
        <trans-unit id="a1b14a8d320d930b469d6a28afcc8b9dd347c79f" translate="yes" xml:space="preserve">
          <source>Blob#service_headers_for_direct_upload</source>
          <target state="translated">Blob#service_headers_for_direct_upload</target>
        </trans-unit>
        <trans-unit id="cc0289228c4a049664a83df09fb12c63b4921c50" translate="yes" xml:space="preserve">
          <source>Blob#service_url</source>
          <target state="translated">Blob#service_url</target>
        </trans-unit>
        <trans-unit id="02355ecb60f2141e333df20e5d691ec0d5c9afb1" translate="yes" xml:space="preserve">
          <source>Blob#service_url_for_direct_upload</source>
          <target state="translated">Blob#service_url_for_direct_upload</target>
        </trans-unit>
        <trans-unit id="362c4c414702a744987ca294e1506e200a1595f1" translate="yes" xml:space="preserve">
          <source>Blob#signed_id</source>
          <target state="translated">Blob#signed_id</target>
        </trans-unit>
        <trans-unit id="255279f90ecffe1a02e8b5ee3248cf30ffa88c3d" translate="yes" xml:space="preserve">
          <source>Blob#text?</source>
          <target state="translated">Blob#text?</target>
        </trans-unit>
        <trans-unit id="897ee09a33aac5a498a01550ae49c0188fd56704" translate="yes" xml:space="preserve">
          <source>Blob#upload</source>
          <target state="translated">Blob#upload</target>
        </trans-unit>
        <trans-unit id="15057224bf777f3a288148cf8f86da801cbf1f10" translate="yes" xml:space="preserve">
          <source>Blob#video?</source>
          <target state="translated">Blob#video?</target>
        </trans-unit>
        <trans-unit id="6fd4d098cec060ec874c59bdef537fd96dc16b61" translate="yes" xml:space="preserve">
          <source>Blob::Analyzable</source>
          <target state="translated">Blob::Analyzable</target>
        </trans-unit>
        <trans-unit id="9c1fd8002446938076feb90864262fe6c339d90e" translate="yes" xml:space="preserve">
          <source>Blob::Analyzable#analyze</source>
          <target state="translated">Blob::Analyzable#analyze</target>
        </trans-unit>
        <trans-unit id="b1489080533fb50a06a9d00386131e20f9c76830" translate="yes" xml:space="preserve">
          <source>Blob::Analyzable#analyze_later</source>
          <target state="translated">Blob::Analyzable#analyze_later</target>
        </trans-unit>
        <trans-unit id="bf6d294fd2b51394dbe6cfed00e9a8801f3f88a9" translate="yes" xml:space="preserve">
          <source>Blob::Analyzable#analyzed?</source>
          <target state="translated">Blob::Analyzable#analyzed?</target>
        </trans-unit>
        <trans-unit id="9cce94030261fa09b1ac6e88485076cd9c5ed278" translate="yes" xml:space="preserve">
          <source>Blob::Representable</source>
          <target state="translated">Blob::Representable</target>
        </trans-unit>
        <trans-unit id="09f9bffe6fb87bbf452510982d2455607f9093fa" translate="yes" xml:space="preserve">
          <source>Blob::Representable#preview</source>
          <target state="translated">Blob::Representable#preview</target>
        </trans-unit>
        <trans-unit id="c7c04d7f40a5d6f44cc5c249f0a4b5cb3e437fbb" translate="yes" xml:space="preserve">
          <source>Blob::Representable#previewable?</source>
          <target state="translated">Blob::Representable#previewable?</target>
        </trans-unit>
        <trans-unit id="d0ebd2dcd0d1df27f1b9a5b4d8df9983a8266e37" translate="yes" xml:space="preserve">
          <source>Blob::Representable#representable?</source>
          <target state="translated">Blob::Representable#representable?</target>
        </trans-unit>
        <trans-unit id="ad296e55f203a0159a85ad82d638c761761aa405" translate="yes" xml:space="preserve">
          <source>Blob::Representable#representation</source>
          <target state="translated">Blob::Representable#representation</target>
        </trans-unit>
        <trans-unit id="f91393b361dc460a92b8e08b1040fd88d7f96bd0" translate="yes" xml:space="preserve">
          <source>Blob::Representable#variable?</source>
          <target state="translated">Blob::Representable#variable?</target>
        </trans-unit>
        <trans-unit id="a9f010d40020c6bfdbfefb34d563ca6551c7016f" translate="yes" xml:space="preserve">
          <source>Blob::Representable#variant</source>
          <target state="translated">Blob::Representable#variant</target>
        </trans-unit>
        <trans-unit id="eb3f2c7f44600307c9b1d1eda69f0dc33e70aa0f" translate="yes" xml:space="preserve">
          <source>Blob::build_after_upload</source>
          <target state="translated">Blob::build_after_upload</target>
        </trans-unit>
        <trans-unit id="f7b39f785df5648619be5fcd6f09e23692041334" translate="yes" xml:space="preserve">
          <source>Blob::create_after_upload!</source>
          <target state="translated">Blob::create_after_upload!</target>
        </trans-unit>
        <trans-unit id="4ab8dd4f5cc417b4eef20203324810a7b0cfab8d" translate="yes" xml:space="preserve">
          <source>Blob::create_before_direct_upload!</source>
          <target state="translated">Blob::create_before_direct_upload!</target>
        </trans-unit>
        <trans-unit id="4c904b51f9f8216fa16c6efc56f81c6bf405d9f8" translate="yes" xml:space="preserve">
          <source>Blob::find_signed</source>
          <target state="translated">Blob::find_signed</target>
        </trans-unit>
        <trans-unit id="5465f9647c35ce9168216bde522e726d2ad6c7da" translate="yes" xml:space="preserve">
          <source>Blob::generate_unique_secure_token</source>
          <target state="translated">Blob::generate_unique_secure_token</target>
        </trans-unit>
        <trans-unit id="9ca19de4a7dd7c7132b16051d0812df797cb1369" translate="yes" xml:space="preserve">
          <source>Blobs are intended to be immutable in as-so-far as their reference to a specific file goes. You're allowed to update a blob's metadata on a subsequent pass, but you should not update the key or change the uploaded file. If you need to create a derivative or otherwise change the blob, simply create a new blob and purge the old one.</source>
          <target state="translated">Blob은 특정 파일에 대한 참조가있는 한 변경 불가능합니다. 후속 패스에서 Blob의 메타 데이터를 업데이트 할 수 있지만 키를 업데이트하거나 업로드 된 파일을 변경해서는 안됩니다. 파생 상품을 생성하거나 블롭을 변경해야하는 경우 새 블롭을 생성하고 이전 블랍을 제거하십시오.</target>
        </trans-unit>
        <trans-unit id="a854d4455429804c5c9b3fe43297cfec95f5dc00" translate="yes" xml:space="preserve">
          <source>BlobsController</source>
          <target state="translated">BlobsController</target>
        </trans-unit>
        <trans-unit id="b2329837c803e87699d4ca14c33c780ec8f32032" translate="yes" xml:space="preserve">
          <source>BlobsController#show</source>
          <target state="translated">BlobsController#show</target>
        </trans-unit>
        <trans-unit id="557758c8174336d6369c72e1c97a88e6c9ef1fba" translate="yes" xml:space="preserve">
          <source>Block Parameters</source>
          <target state="translated">블록 매개 변수</target>
        </trans-unit>
        <trans-unit id="c105cc5dcc58a17f4df8de56aee738e2affa3ce3" translate="yes" xml:space="preserve">
          <source>Block form</source>
          <target state="translated">블록 형태</target>
        </trans-unit>
        <trans-unit id="87fed2a8d44961d99d69ac5ed105137f7b3ab238" translate="yes" xml:space="preserve">
          <source>Block form, with shorthand</source>
          <target state="translated">속기의 블록 형태</target>
        </trans-unit>
        <trans-unit id="bc86d3933fd780e0de8527decc560ab444e91b5a" translate="yes" xml:space="preserve">
          <source>Blocks and ignores any exception passed as argument if raised within the block.</source>
          <target state="translated">블록 내에서 발생하면 인수로 전달 된 예외를 차단하고 무시합니다.</target>
        </trans-unit>
        <trans-unit id="dc0fdc434d42e79f807c0abff3555a02772c809b" translate="yes" xml:space="preserve">
          <source>Blog::Engine.load_seed</source>
          <target state="translated">Blog::Engine.load_seed</target>
        </trans-unit>
        <trans-unit id="e27a5cc1456d9d83ae27e658d8cec24c9f939fe3" translate="yes" xml:space="preserve">
          <source>Bob browses a message board and views a post from a hacker where there is a crafted HTML image element. The element references a command in Bob's project management application, rather than an image file: &lt;code&gt;&amp;lt;img src=&quot;http://www.webapp.com/project/1/destroy&quot;&amp;gt;&lt;/code&gt;</source>
          <target state="translated">Bob은 게시판을 탐색하고 제작 된 HTML 이미지 요소가있는 해커의 게시물을 봅니다. 이 요소는 이미지 파일 대신 Bob의 프로젝트 관리 응용 프로그램에서 명령을 참조합니다. &lt;code&gt;&amp;lt;img src=&quot;http://www.webapp.com/project/1/destroy&quot;&amp;gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b4022afa55f9be446626514bc35ad446e21a73c5" translate="yes" xml:space="preserve">
          <source>Bob doesn't notice the attack - but a few days later he finds out that project number one is gone.</source>
          <target state="translated">밥은 그 공격을 알아 차리지 못했지만 며칠 후 프로젝트 번호 1이 사라 졌다는 것을 알게되었습니다.</target>
        </trans-unit>
        <trans-unit id="d8dc330cd94b38663a068b0a6e6888f78ac2225a" translate="yes" xml:space="preserve">
          <source>Bob's session at &lt;code&gt;www.webapp.com&lt;/code&gt; is still alive, because he didn't log out a few minutes ago.</source>
          <target state="translated">몇 분 전에 로그 아웃하지 않았기 때문에 &lt;code&gt;www.webapp.com&lt;/code&gt; 에서 Bob의 세션 은 여전히 ​​유효합니다.</target>
        </trans-unit>
        <trans-unit id="9ceebac60b7316be982d3af3f57d4ebc374e06a4" translate="yes" xml:space="preserve">
          <source>Book, ScaryBook and GoodBook will all use the same connection pool to &amp;ldquo;library_db&amp;rdquo; while Author, BankAccount, and any other models you create will use the default connection pool to &amp;ldquo;my_application&amp;rdquo;.</source>
          <target state="translated">Book, ScaryBook 및 GoodBook은 모두&amp;ldquo;library_db&amp;rdquo;에 동일한 연결 풀을 사용하고 Author, BankAccount 및 사용자가 만든 다른 모델은 기본 연결 풀을&amp;ldquo;my_application&amp;rdquo;에 사용합니다.</target>
        </trans-unit>
        <trans-unit id="b76ff4906f33c2dd97ddd929b9662ba8cac6174c" translate="yes" xml:space="preserve">
          <source>Boolean</source>
          <target state="translated">Boolean</target>
        </trans-unit>
        <trans-unit id="3257a1cf164a185295a19a39c20a7d45dfb48804" translate="yes" xml:space="preserve">
          <source>Boolean hooks</source>
          <target state="translated">부울 후크</target>
        </trans-unit>
        <trans-unit id="a2e5b8bbbb9aea3028b29ecd4d2f7ebded715eb5" translate="yes" xml:space="preserve">
          <source>Boolean to anchor a &lt;code&gt;match&lt;/code&gt; pattern. Default is true. When set to false, the pattern matches any request prefixed with the given path.</source>
          <target state="translated">&lt;code&gt;match&lt;/code&gt; 패턴 을 고정하는 부울 입니다. 기본값은 true입니다. false로 설정하면 패턴은 지정된 경로가 접두사로 지정된 요청과 일치합니다.</target>
        </trans-unit>
        <trans-unit id="a387f88ccec79b881befdd016fd4a1542c94b2a3" translate="yes" xml:space="preserve">
          <source>Booting process</source>
          <target state="translated">부팅 과정</target>
        </trans-unit>
        <trans-unit id="0f3cdb97cafb8d382ef2a9a51b6459ca14a7428d" translate="yes" xml:space="preserve">
          <source>Bootsnap</source>
          <target state="translated">Bootsnap</target>
        </trans-unit>
        <trans-unit id="3f52d991339eb605a8bb20e3530ef3385f78c68e" translate="yes" xml:space="preserve">
          <source>Bootsnap should be at least version 1.4.2.</source>
          <target state="translated">부트 스냅은 1.4.2 이상이어야합니다.</target>
        </trans-unit>
        <trans-unit id="ba98b2298a4f99c1a5f946cf1a466dec784a8eaf" translate="yes" xml:space="preserve">
          <source>Both &lt;a href=&quot;../persistence#method-i-save&quot;&gt;#save&lt;/a&gt; and &lt;a href=&quot;../persistence#method-i-destroy&quot;&gt;#destroy&lt;/a&gt; come wrapped in a transaction that ensures that whatever you do in validations or callbacks will happen under its protected cover. So you can use validations to check for values that the transaction depends on or you can raise exceptions in the callbacks to rollback, including &lt;code&gt;after_*&lt;/code&gt; callbacks.</source>
          <target state="translated">두 &lt;a href=&quot;../persistence#method-i-save&quot;&gt;#save&lt;/a&gt; 및 &lt;a href=&quot;../persistence#method-i-destroy&quot;&gt;#destroy은&lt;/a&gt; 당신이 검증 또는 콜백에서 할 어떤 보장이 보호 덮개 아래에 일어날 것을 트랜잭션에 싸여 온. 따라서 유효성 검사를 사용하여 트랜잭션이 의존하는 값을 확인하거나 &lt;code&gt;after_*&lt;/code&gt; 콜백을 포함하여 롤백 할 콜백에서 예외를 발생시킬 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="157db79c19de4ef2600c830de151e35019c09b78" translate="yes" xml:space="preserve">
          <source>Both &lt;code&gt;ActionController::Base&lt;/code&gt; and &lt;code&gt;ActionController::API&lt;/code&gt; include &lt;code&gt;ActionController::Renderers::All&lt;/code&gt;, making all renderers available in the controller. See &lt;code&gt;Renderers::RENDERERS&lt;/code&gt; and &lt;code&gt;Renderers.add&lt;/code&gt;.</source>
          <target state="translated">두 &lt;code&gt;ActionController::Base&lt;/code&gt; 와 &lt;code&gt;ActionController::API&lt;/code&gt; 포함 &lt;code&gt;ActionController::Renderers::All&lt;/code&gt; 컨트롤러의 모든 렌더러 사용할 수 있도록. &lt;code&gt;Renderers::RENDERERS&lt;/code&gt; 및 &lt;code&gt;Renderers.add&lt;/code&gt; .add를 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="8f1722a92dd8d1338653ed4eebeea1daf12b85dd" translate="yes" xml:space="preserve">
          <source>Both &lt;code&gt;has_many&lt;/code&gt; and &lt;code&gt;has_many :through&lt;/code&gt; dependencies default to the &lt;code&gt;:delete_all&lt;/code&gt; strategy if the &lt;code&gt;:dependent&lt;/code&gt; option is set to &lt;code&gt;:destroy&lt;/code&gt;. Records are not instantiated and callbacks will not be fired.</source>
          <target state="translated">두 &lt;code&gt;has_many&lt;/code&gt; 와 &lt;code&gt;has_many :through&lt;/code&gt; 종속 기본받는 사람 &lt;code&gt;:delete_all&lt;/code&gt; 전략 경우 &lt;code&gt;:dependent&lt;/code&gt; 옵션이 설정됩니다 &lt;code&gt;:destroy&lt;/code&gt; . 레코드가 인스턴스화되지 않고 콜백이 시작되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="9c449a1ef47562c98d0448717ef51832fa3ca22b" translate="yes" xml:space="preserve">
          <source>Both &lt;code&gt;next_week&lt;/code&gt; and &lt;code&gt;prev_week&lt;/code&gt; work as expected when &lt;code&gt;Date.beginning_of_week&lt;/code&gt; or &lt;code&gt;config.beginning_of_week&lt;/code&gt; are set.</source>
          <target state="translated">두 &lt;code&gt;next_week&lt;/code&gt; 및 &lt;code&gt;prev_week&lt;/code&gt; 때 작업이 예상대로 &lt;code&gt;Date.beginning_of_week&lt;/code&gt; 또는 &lt;code&gt;config.beginning_of_week&lt;/code&gt; 이 설정됩니다.</target>
        </trans-unit>
        <trans-unit id="bfbde4b4ac193db335adf055e0fc97e17822d93d" translate="yes" xml:space="preserve">
          <source>Both calls delete the affected posts all at once with a single DELETE statement. If you need to destroy dependent associations or call your &lt;code&gt;before_*&lt;/code&gt; or &lt;code&gt;after_destroy&lt;/code&gt; callbacks, use the &lt;a href=&quot;relation#method-i-destroy_all&quot;&gt;destroy_all&lt;/a&gt; method instead.</source>
          <target state="translated">두 호출 모두 단일 DELETE 문으로 영향을받는 게시물을 한 번에 삭제합니다. 종속 연관을 제거하거나 &lt;code&gt;before_*&lt;/code&gt; 또는 &lt;code&gt;after_destroy&lt;/code&gt; 콜백을 호출 해야하는 경우 &lt;a href=&quot;relation#method-i-destroy_all&quot;&gt;destroy_all&lt;/a&gt; 메소드를 대신 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="6556bf08884e4feb1db798537f2593fa18135073" translate="yes" xml:space="preserve">
          <source>Both express a 1-1 relationship. The difference is mostly where to place the foreign key, which goes on the table for the class declaring the &lt;a href=&quot;classmethods#method-i-belongs_to&quot;&gt;belongs_to&lt;/a&gt; relationship.</source>
          <target state="translated">둘 다 1-1 관계를 나타냅니다. 차이점은 주로 외래 키를 어디에 두어야하는지에 따라 &lt;a href=&quot;classmethods#method-i-belongs_to&quot;&gt;belongs_to&lt;/a&gt; 관계를 선언하는 클래스의 테이블로 이동합니다 .</target>
        </trans-unit>
        <trans-unit id="4beceb001434626ae6adf3ec55abf2131e329d65" translate="yes" xml:space="preserve">
          <source>Both families of helpers use the same core set of functions to generate the individual select tags and so both accept largely the same options. In particular, by default Rails will generate year options 5 years either side of the current year. If this is not an appropriate range, the &lt;code&gt;:start_year&lt;/code&gt; and &lt;code&gt;:end_year&lt;/code&gt; options override this. For an exhaustive list of the available options, refer to the &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/ActionView/Helpers/DateHelper.html&quot;&gt;API documentation&lt;/a&gt;.</source>
          <target state="translated">두 헬퍼 제품군은 동일한 핵심 기능 세트를 사용하여 개별 선택 태그를 생성하므로 둘 다 거의 동일한 옵션을 허용합니다. 특히 기본적으로 Rails는 현재 연도의 어느 쪽이든 5 년 연도 옵션을 생성합니다. 이 범위가 적절하지 않으면 &lt;code&gt;:start_year&lt;/code&gt; 및 &lt;code&gt;:end_year&lt;/code&gt; 옵션이이를 대체합니다. 사용 가능한 옵션의 전체 목록은 &lt;a href=&quot;https://edgeapi.rubyonrails.org/classes/ActionView/Helpers/DateHelper.html&quot;&gt;API 설명서를&lt;/a&gt; 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="d19803df257990e27b0da1ef75889f77ce28322e" translate="yes" xml:space="preserve">
          <source>Both kinds of dependencies will be installed when &lt;code&gt;bundle install&lt;/code&gt; is run inside of the application. The development dependencies for the gem will only be used when the development and tests for the engine are running.</source>
          <target state="translated">&lt;code&gt;bundle install&lt;/code&gt; 가 응용 프로그램 내에서 실행될 때 두 종류의 종속성이 모두 설치됩니다 . gem의 개발 종속성은 엔진의 개발 및 테스트가 실행될 때만 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="42c69f94db1c4042ee89f322592fa9cd7514f1b8" translate="yes" xml:space="preserve">
          <source>Both methods will list all of your routes, in the same order that they appear in &lt;code&gt;config/routes.rb&lt;/code&gt;. For each route, you'll see:</source>
          <target state="translated">두 방법 모두 &lt;code&gt;config/routes.rb&lt;/code&gt; 에 나타나는 순서대로 모든 경로를 나열합니다 . 각 경로마다 다음이 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="63609044abb9db54754b71e4785875c492df400d" translate="yes" xml:space="preserve">
          <source>Both of these constraints are addressed by the Load Interlock. It keeps track of which threads are currently running application code, loading a class, or unloading autoloaded constants.</source>
          <target state="translated">이 두 가지 제약 조건 모두로드 인터록으로 해결됩니다. 현재 응용 프로그램 코드를 실행중인 스레드, 클래스로드 또는 자동로드 된 상수 언로드를 추적합니다.</target>
        </trans-unit>
        <trans-unit id="3e73f0b91f7733e0d67e21b4ce943d28d334dffe" translate="yes" xml:space="preserve">
          <source>Both of these families of helpers will create a series of select boxes for the different components (year, month, day etc.).</source>
          <target state="translated">이 두 헬퍼 패밀리는 서로 다른 구성 요소 (년, 월, 일 등)에 대한 일련의 선택 상자를 작성합니다.</target>
        </trans-unit>
        <trans-unit id="8585c9e981d0bbb7ca5b65fa3f1b89b6322a46b3" translate="yes" xml:space="preserve">
          <source>Both the &lt;code&gt;:only&lt;/code&gt; and &lt;code&gt;:except&lt;/code&gt; condition can accept an arbitrary number of method references, so #&lt;code&gt;except: [ :rss,
:text_only ]&lt;/code&gt; is valid, as is &lt;code&gt;except: :rss&lt;/code&gt;.</source>
          <target state="translated">둘 &lt;code&gt;:only&lt;/code&gt; 하고 &lt;code&gt;:except&lt;/code&gt; # 그래서 조건, 방법 참조의 임의의 수를 수용 할 수 &lt;code&gt;except: [ :rss, :text_only ]&lt;/code&gt; 같이, 유효 &lt;code&gt;except: :rss&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="8a674c5c01638ab003945e8f913a75835278d340" translate="yes" xml:space="preserve">
          <source>Both the &lt;code&gt;matches?&lt;/code&gt; method and the lambda gets the &lt;code&gt;request&lt;/code&gt; object as an argument.</source>
          <target state="translated">두 &lt;code&gt;matches?&lt;/code&gt; 메소드와 람다는 &lt;code&gt;request&lt;/code&gt; 객체를 인수로 가져옵니다 .</target>
        </trans-unit>
        <trans-unit id="4ffd2c626f16ba9f4b0edea3564f62690de75bb9" translate="yes" xml:space="preserve">
          <source>Bottom line: &lt;strong&gt;do not cache reloadable classes or modules&lt;/strong&gt;.</source>
          <target state="translated">결론 : 다시 &lt;strong&gt;로드 가능한 클래스 또는 모듈을 캐시하지 마십시오&lt;/strong&gt; .</target>
        </trans-unit>
        <trans-unit id="67effde6e5543ec42ad977ea468b55fee4ba5825" translate="yes" xml:space="preserve">
          <source>Bounced: Rejected processing by the specific mailbox and bounced to sender.</source>
          <target state="translated">반송 : 특정 사서함에 의한 처리가 거부되고 발신자에게 반송됩니다.</target>
        </trans-unit>
        <trans-unit id="b211b44c8fef9c4e7e80724ee05ec6bb360ac928" translate="yes" xml:space="preserve">
          <source>Bound Parameters</source>
          <target state="translated">바운드 매개 변수</target>
        </trans-unit>
        <trans-unit id="21a8752f2df54d656b09cd2a499cb3a3403ec7ca" translate="yes" xml:space="preserve">
          <source>Breakpoints</source>
          <target state="translated">Breakpoints</target>
        </trans-unit>
        <trans-unit id="c1583d017da577c338d4fd7b493f26c41dd6a0d6" translate="yes" xml:space="preserve">
          <source>Broadcast a hash directly to a named &lt;code&gt;broadcasting&lt;/code&gt;. This will later be JSON encoded.</source>
          <target state="translated">이름이 지정된 &lt;code&gt;broadcasting&lt;/code&gt; 직접 해시를 브로드 캐스트하십시오 . 나중에 JSON으로 인코딩됩니다.</target>
        </trans-unit>
        <trans-unit id="4b3c51f07aabe1b52a98a6c8cadc29b6b35a71e9" translate="yes" xml:space="preserve">
          <source>Broadcast a hash to a unique broadcasting for this &lt;code&gt;model&lt;/code&gt; in this channel.</source>
          <target state="translated">이 채널 에서이 &lt;code&gt;model&lt;/code&gt; 의 고유 한 브로드 캐스트로 해시를 브로드 캐스트하십시오 .</target>
        </trans-unit>
        <trans-unit id="fdbdbf3e4a5bd910928cd6eac7eefe4156582d0b" translate="yes" xml:space="preserve">
          <source>Broadcast content to a web notification channel instance from elsewhere in your application:</source>
          <target state="translated">애플리케이션의 다른 곳에서 웹 알림 채널 인스턴스로 컨텐츠를 브로드 캐스트하십시오.</target>
        </trans-unit>
        <trans-unit id="ba459229366746c447e3cdf752eb917433152cfe" translate="yes" xml:space="preserve">
          <source>Broadcasting</source>
          <target state="translated">Broadcasting</target>
        </trans-unit>
        <trans-unit id="0e9cb843d094b3978b52e51e7f4b7821940d49fd" translate="yes" xml:space="preserve">
          <source>Broadcastings are purely an online queue and time-dependent. If a consumer is not streaming (subscribed to a given channel), they'll not get the broadcast should they connect later.</source>
          <target state="translated">방송은 순전히 온라인 대기열이며 시간에 따라 다릅니다. 소비자가 스트리밍하지 않으면 (주어진 채널에 가입 한 경우) 나중에 연결해야 브로드 캐스트를받을 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="30471433380fc894eed956523e21927189b002fb" translate="yes" xml:space="preserve">
          <source>Broadcasts are called elsewhere in your Rails application:</source>
          <target state="translated">방송은 Rails 애플리케이션의 다른 곳에서 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="1b12cd6f22e74bf11b60058c812151276e67a6d7" translate="yes" xml:space="preserve">
          <source>Browsers open a limited number of simultaneous connections to a single host. The exact number varies by browser and version. This limit may cause some asset downloads to wait for previous assets to finish before they can begin. You can use the &lt;code&gt;%d&lt;/code&gt; wildcard in the &lt;code&gt;asset_host&lt;/code&gt; to distribute the requests over four hosts. For example, &lt;code&gt;assets%d.example.com&lt;/code&gt; will spread the asset requests over &amp;ldquo;assets0.example.com&amp;rdquo;, &amp;hellip;, &amp;ldquo;assets3.example.com&amp;rdquo;.</source>
          <target state="translated">브라우저는 단일 호스트에 대한 제한된 수의 동시 연결을 엽니 다. 정확한 숫자는 브라우저와 버전에 따라 다릅니다. 이 제한으로 인해 일부 자산 다운로드가 이전 자산이 완료되기 전에 대기 할 수 있습니다. &lt;code&gt;asset_host&lt;/code&gt; 에서 &lt;code&gt;%d&lt;/code&gt; 와일드 카드를 사용하여 4 개의 호스트에 요청을 분배 할 수 있습니다. 예를 들어 &lt;code&gt;assets%d.example.com&lt;/code&gt; 은&amp;ldquo;assets0.example.com&amp;rdquo;,&amp;hellip;,&amp;ldquo;assets3.example.com&amp;rdquo;을 통해 자산 요청을 분산시킵니다.</target>
        </trans-unit>
        <trans-unit id="8f3e3b7cf657210643fad7a1a3f201fb5c1638b9" translate="yes" xml:space="preserve">
          <source>Browsers request pages from Rails by making a request for a URL using a specific HTTP method, such as &lt;code&gt;GET&lt;/code&gt;, &lt;code&gt;POST&lt;/code&gt;, &lt;code&gt;PATCH&lt;/code&gt;, &lt;code&gt;PUT&lt;/code&gt; and &lt;code&gt;DELETE&lt;/code&gt;. Each method is a request to perform an operation on the resource. A resource route maps a number of related requests to actions in a single controller.</source>
          <target state="translated">브라우저는 &lt;code&gt;GET&lt;/code&gt; , &lt;code&gt;POST&lt;/code&gt; , &lt;code&gt;PATCH&lt;/code&gt; , &lt;code&gt;PUT&lt;/code&gt; 및 &lt;code&gt;DELETE&lt;/code&gt; 와 같은 특정 HTTP 메소드를 사용하여 URL을 요청하여 Rails에서 페이지를 요청합니다 . 각 방법은 리소스에 대한 작업을 수행하기위한 요청입니다. 리소스 경로는 여러 관련 요청을 단일 컨트롤러의 작업에 매핑합니다.</target>
        </trans-unit>
        <trans-unit id="121e9c72fc76e149b6990a1a650936fe1bf5d4ff" translate="yes" xml:space="preserve">
          <source>Brute-Forcing Accounts</source>
          <target state="translated">무차별 계정</target>
        </trans-unit>
        <trans-unit id="57a6465f9c4b12d9c6da8b9fa760e0daef844727" translate="yes" xml:space="preserve">
          <source>Bug Fixes</source>
          <target state="translated">버그 수정</target>
        </trans-unit>
        <trans-unit id="0f5d6570f9fe202eec4029000763d6918fc8cda7" translate="yes" xml:space="preserve">
          <source>Build ISO 8601 &lt;a href=&quot;duration&quot;&gt;Duration&lt;/a&gt; string for this duration. The &lt;code&gt;precision&lt;/code&gt; parameter can be used to limit seconds' precision of duration.</source>
          <target state="translated">이 기간 동안 ISO 8601 &lt;a href=&quot;duration&quot;&gt;Duration&lt;/a&gt; 문자열을 작성하십시오 . &lt;code&gt;precision&lt;/code&gt; 매개 변수는 기간의 제한 초의 정밀도로 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="4759bf14d7a511508e86c343c934894b6e8db533" translate="yes" xml:space="preserve">
          <source>Builder</source>
          <target state="translated">Builder</target>
        </trans-unit>
        <trans-unit id="19356ab0a221fb2d10911be2c1c5a857849a9ebd" translate="yes" xml:space="preserve">
          <source>Builder templates are a more programmatic alternative to ERB. They are especially useful for generating XML content. An XmlMarkup object named &lt;code&gt;xml&lt;/code&gt; is automatically made available to templates with a &lt;code&gt;.builder&lt;/code&gt; extension.</source>
          <target state="translated">빌더 템플릿은 ERB에 대한 프로그래밍 방식의 대안입니다. XML 컨텐츠를 생성하는 데 특히 유용합니다. &lt;code&gt;xml&lt;/code&gt; 이라는 XmlMarkup 개체 는 확장명 이 &lt;code&gt;.builder&lt;/code&gt; 인 템플릿에 자동으로 제공됩니다 .</target>
        </trans-unit>
        <trans-unit id="029de9b54b3fd776589e260c54563469ca8dd1ed" translate="yes" xml:space="preserve">
          <source>Building Complex Forms</source>
          <target state="translated">복잡한 양식 작성</target>
        </trans-unit>
        <trans-unit id="0a44f284741faa0296f69ce7c46a39a0e20336ba" translate="yes" xml:space="preserve">
          <source>Building HTML tags</source>
          <target state="translated">HTML 태그 작성</target>
        </trans-unit>
        <trans-unit id="00ada69adb195101fca28695c5c9f66d664a15bd" translate="yes" xml:space="preserve">
          <source>Building a custom instrumentation implementation.</source>
          <target state="translated">맞춤형 계측 구현</target>
        </trans-unit>
        <trans-unit id="dccfc2f6526c4a206c337ca5c77e29c20c7bc817" translate="yes" xml:space="preserve">
          <source>Building your own conditions as pure strings can leave you vulnerable to SQL injection exploits. For example, &lt;code&gt;Client.where(&quot;first_name LIKE '%#{params[:first_name]}%'&quot;)&lt;/code&gt; is not safe. See the next section for the preferred way to handle conditions using an array.</source>
          <target state="translated">순수한 문자열로 자신 만의 조건을 구축하면 SQL 주입 공격에 취약해질 수 있습니다. 예를 들어 &lt;code&gt;Client.where(&quot;first_name LIKE '%#{params[:first_name]}%'&quot;)&lt;/code&gt; 는 안전하지 않습니다. 배열을 사용하여 조건을 처리하는 기본 방법은 다음 섹션을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="3c9666134672c8d310e0a76a56ba47182838b385" translate="yes" xml:space="preserve">
          <source>Builds HTML5 compliant tags with a tag proxy. Every tag can be built with:</source>
          <target state="translated">태그 프록시를 사용하여 HTML5 호환 태그를 작성합니다. 모든 태그는 다음을 사용하여 만들 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2d9994b780d6f13d3baf0395941a33e0f0851cf2" translate="yes" xml:space="preserve">
          <source>Builds a &lt;a href=&quot;hash&quot;&gt;Hash&lt;/a&gt; from XML just like &lt;code&gt;Hash.from_xml&lt;/code&gt;, but also allows Symbol and YAML.</source>
          <target state="translated">&lt;code&gt;Hash.from_xml&lt;/code&gt; 과 마찬가지로 XML 에서 &lt;a href=&quot;hash&quot;&gt;해시&lt;/a&gt; 를 작성 하지만 Symbol 및 YAML도 허용합니다.</target>
        </trans-unit>
        <trans-unit id="b3948cdfeec5d7084c46054833c1854395ab2ad5" translate="yes" xml:space="preserve">
          <source>Builds a &lt;code&gt;QC::Queue&lt;/code&gt; object to schedule jobs on.</source>
          <target state="translated">&lt;code&gt;QC::Queue&lt;/code&gt; 오브젝트를 빌드하여 작업을 스케줄합니다.</target>
        </trans-unit>
        <trans-unit id="7998e59d701a8696fc25146f2f6266408261fbbd" translate="yes" xml:space="preserve">
          <source>Built-in Helpers</source>
          <target state="translated">내장 헬퍼</target>
        </trans-unit>
        <trans-unit id="a8efa9c49ad21edaf36e22b1b0e7e5aaddcc1511" translate="yes" xml:space="preserve">
          <source>Built-in ingress commands are available for these popular SMTP servers:</source>
          <target state="translated">다음과 같은 인기있는 SMTP 서버에 내장 수신 명령을 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="8f05a85abb427f1fa4982472f3e2195fcae1dbd0" translate="yes" xml:space="preserve">
          <source>But if &lt;code&gt;Hotel::Services&lt;/code&gt; is not known, Rails is not able to autoload it, the application raises &lt;code&gt;NameError&lt;/code&gt;.</source>
          <target state="translated">그러나 &lt;code&gt;Hotel::Services&lt;/code&gt; 를 알 수 없으면 Rails에서 자동로드 할 수 없으면 응용 프로그램에서 &lt;code&gt;NameError&lt;/code&gt; 가 발생 합니다.</target>
        </trans-unit>
        <trans-unit id="320b072e513e0c67ae1816fc8dcaa8b884d8ab2f" translate="yes" xml:space="preserve">
          <source>But if not having a profile yet is fine and should not be an error condition:</source>
          <target state="translated">그러나 아직 프로파일이 없으면 오류 상태가 아니어야합니다.</target>
        </trans-unit>
        <trans-unit id="defecf77c4c7a77e61a98c22395f1cf97f6f20ca" translate="yes" xml:space="preserve">
          <source>But instead of generating a model directly (which we'll be doing later), let's set up a scaffold. A &lt;strong&gt;scaffold&lt;/strong&gt; in Rails is a full set of model, database migration for that model, controller to manipulate it, views to view and manipulate the data, and a test suite for each of the above.</source>
          <target state="translated">그러나 모델을 직접 생성하는 대신 (나중에 수행 할) 스캐 폴드를 설정하겠습니다. Rails 의 &lt;strong&gt;스캐 폴드&lt;/strong&gt; 는 전체 모델 세트, 해당 모델을위한 데이터베이스 마이그레이션, 모델을 조작하기위한 컨트롤러, 데이터를보고 조작하기위한보기 및 각각에 대한 테스트 스위트입니다.</target>
        </trans-unit>
        <trans-unit id="ef6d93c02a2e876ffe6dc76bb8ede8e874eb1284" translate="yes" xml:space="preserve">
          <source>But only if it hasn't been required before, which would be the case in &lt;code&gt;rails server&lt;/code&gt; but &lt;strong&gt;wouldn't&lt;/strong&gt; be the case with Passenger.</source>
          <target state="translated">그러나 이전에 필요하지 않은 경우에만 &lt;code&gt;rails server&lt;/code&gt; 하지만 승객에게는 해당 &lt;strong&gt;되지 않습니다&lt;/strong&gt; .</target>
        </trans-unit>
        <trans-unit id="e4ab3e6c895a3a7baed82f7abc9b67e75510fe4c" translate="yes" xml:space="preserve">
          <source>But reject malformed input</source>
          <target state="translated">그러나 잘못된 입력을 거부</target>
        </trans-unit>
        <trans-unit id="baea68a6bd8d5f6df2f3b242802484ddb6f14a49" translate="yes" xml:space="preserve">
          <source>But there's a caveat here: How does Active Record know that the class &lt;code&gt;Square&lt;/code&gt; exists at all?</source>
          <target state="translated">그러나 여기서주의 할 점이 있습니다. Active Record는 &lt;code&gt;Square&lt;/code&gt; 클래스 가 존재 한다는 것을 어떻게 알 수 있습니까?</target>
        </trans-unit>
        <trans-unit id="b41a04124345e574ece1f10ce3fe6b627eeeee28" translate="yes" xml:space="preserve">
          <source>But this approach becomes increasingly impractical as the table size increases, since &lt;code&gt;User.all.each&lt;/code&gt; instructs Active Record to fetch &lt;em&gt;the entire table&lt;/em&gt; in a single pass, build a model object per row, and then keep the entire array of model objects in memory. Indeed, if we have a large number of records, the entire collection may exceed the amount of memory available.</source>
          <target state="translated">그러나 &lt;code&gt;User.all.each&lt;/code&gt; 가 Active Record에 &lt;em&gt;전체 테이블&lt;/em&gt; 을 단일 패스 로 페치 &lt;em&gt;하고&lt;/em&gt; 행당 모델 오브젝트를 빌드 한 다음 모델 오브젝트의 전체 배열을 메모리에 보관하도록 지시 하므로이 방법 은 테이블 크기가 증가함에 따라 점점 비실용적 입니다. 실제로 많은 수의 레코드가있는 경우 전체 컬렉션이 사용 가능한 메모리 양을 초과 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="252fbc2fa213bd11b83a84ba11eb0140899699c0" translate="yes" xml:space="preserve">
          <source>But what if you want to reload the cache, because data might have been changed by some other part of the application? Just call &lt;code&gt;reload&lt;/code&gt; on the association:</source>
          <target state="translated">그러나 응용 프로그램의 다른 부분에서 데이터가 변경되었을 수 있으므로 캐시를 다시로드하려면 어떻게해야합니까? 협회에서 &lt;code&gt;reload&lt;/code&gt; 를 호출 하십시오.</target>
        </trans-unit>
        <trans-unit id="0064eceabe114827327b7e9afd5152a8df8b2954" translate="yes" xml:space="preserve">
          <source>But why should &lt;code&gt;Host&lt;/code&gt; care about &lt;code&gt;Bar&lt;/code&gt;'s dependencies, namely &lt;code&gt;Foo&lt;/code&gt;? We could try to hide these from &lt;code&gt;Host&lt;/code&gt; directly including &lt;code&gt;Foo&lt;/code&gt; in &lt;code&gt;Bar&lt;/code&gt;:</source>
          <target state="translated">그러나 왜 &lt;code&gt;Host&lt;/code&gt; 가 &lt;code&gt;Bar&lt;/code&gt; 의 의존성, 즉 &lt;code&gt;Foo&lt;/code&gt; 에 관심을 가져야 합니까? &lt;code&gt;Foo&lt;/code&gt; in &lt;code&gt;Bar&lt;/code&gt; 를 포함하여 &lt;code&gt;Host&lt;/code&gt; 직접 숨길 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="fe541cd0809b340b0cf22191c9519c5ad244a120" translate="yes" xml:space="preserve">
          <source>But you don't have to restrict yourself to static includes. Templates can share variables amongst themselves by using instance variables defined using the regular embedding tags. Like this:</source>
          <target state="translated">그러나 정적 포함으로 제한 할 필요는 없습니다. 템플릿은 일반 임베딩 태그를 사용하여 정의 된 인스턴스 변수를 사용하여 변수를 공유 할 수 있습니다. 이처럼 :</target>
        </trans-unit>
        <trans-unit id="b79e5a4b434ab347685ec5212a9126b548607346" translate="yes" xml:space="preserve">
          <source>By convention, Rails assumes that the &lt;code&gt;id&lt;/code&gt; column is used to hold the primary key of its tables. The &lt;code&gt;:primary_key&lt;/code&gt; option allows you to specify a different column.</source>
          <target state="translated">일반적으로 Rails는 &lt;code&gt;id&lt;/code&gt; 열이 테이블의 기본 키를 보유하는 데 사용 된다고 가정합니다 . &lt;code&gt;:primary_key&lt;/code&gt; 와 옵션은 다른 열을 지정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f99a3615c46012d4f9a741c034b68249344f92b6" translate="yes" xml:space="preserve">
          <source>By convention, Rails assumes that the column in the join table used to hold the foreign key pointing to the other model is the name of that model with the suffix &lt;code&gt;_id&lt;/code&gt; added. The &lt;code&gt;:association_foreign_key&lt;/code&gt; option lets you set the name of the foreign key directly:</source>
          <target state="translated">일반적으로 Rails는 다른 모델을 가리키는 외래 키를 보유하는 데 사용되는 조인 테이블의 열이 접미사 &lt;code&gt;_id&lt;/code&gt; 가 추가 된 해당 모델의 이름이라고 가정합니다 . &lt;code&gt;:association_foreign_key&lt;/code&gt; 의 옵션은 직접 외부 키의 이름을 설정할 수 있습니다 :</target>
        </trans-unit>
        <trans-unit id="0831197366da161ca2a7bb80825db30b60188a33" translate="yes" xml:space="preserve">
          <source>By convention, Rails assumes that the column in the join table used to hold the foreign key pointing to this model is the name of this model with the suffix &lt;code&gt;_id&lt;/code&gt; added. The &lt;code&gt;:foreign_key&lt;/code&gt; option lets you set the name of the foreign key directly:</source>
          <target state="translated">일반적으로 Rails는이 모델을 가리키는 외래 키를 보유하는 데 사용되는 조인 테이블의 열이 접미사 &lt;code&gt;_id&lt;/code&gt; 가 추가 된 이 모델의 이름이라고 가정합니다 . &lt;code&gt;:foreign_key&lt;/code&gt; 옵션은 직접 외부 키의 이름을 설정할 수 있습니다 :</target>
        </trans-unit>
        <trans-unit id="5a2673aa31432b8ee63ac18876756d83a45c1e14" translate="yes" xml:space="preserve">
          <source>By convention, Rails assumes that the column used to hold the foreign key on the other model is the name of this model with the suffix &lt;code&gt;_id&lt;/code&gt; added. The &lt;code&gt;:foreign_key&lt;/code&gt; option lets you set the name of the foreign key directly:</source>
          <target state="translated">일반적으로 Rails는 다른 모델에서 외래 키를 보유하는 데 사용되는 열이 접미사 &lt;code&gt;_id&lt;/code&gt; 가 추가 된 이 모델의 이름이라고 가정합니다 . &lt;code&gt;:foreign_key&lt;/code&gt; 옵션은 직접 외부 키의 이름을 설정할 수 있습니다 :</target>
        </trans-unit>
        <trans-unit id="663fe609dfa005dcd544af9f930ebb35f84bd075" translate="yes" xml:space="preserve">
          <source>By convention, Rails assumes that the column used to hold the foreign key on this model is the name of the association with the suffix &lt;code&gt;_id&lt;/code&gt; added. The &lt;code&gt;:foreign_key&lt;/code&gt; option lets you set the name of the foreign key directly:</source>
          <target state="translated">일반적으로 Rails는이 모델에서 외래 키를 보유하는 데 사용되는 열이 추가 된 접미사 &lt;code&gt;_id&lt;/code&gt; 와의 연결 이름이라고 가정합니다 . &lt;code&gt;:foreign_key&lt;/code&gt; 옵션은 직접 외부 키의 이름을 설정할 수 있습니다 :</target>
        </trans-unit>
        <trans-unit id="b6f22b624ef4fdd21b2606abd0685e590066c20f" translate="yes" xml:space="preserve">
          <source>By convention, Rails assumes that the column used to hold the primary key of the association is &lt;code&gt;id&lt;/code&gt;. You can override this and explicitly specify the primary key with the &lt;code&gt;:primary_key&lt;/code&gt; option.</source>
          <target state="translated">일반적으로 Rails는 연관의 기본 키를 보유하는 데 사용되는 열이 &lt;code&gt;id&lt;/code&gt; 라고 가정합니다 . 이를 무시하고 &lt;code&gt;:primary_key&lt;/code&gt; 옵션을 사용하여 기본 키를 명시 적으로 지정할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="e6d3c6cfa18e13af2a386acdf23d52850388ad51" translate="yes" xml:space="preserve">
          <source>By convention, Rails assumes that the column used to hold the primary key of this model is &lt;code&gt;id&lt;/code&gt;. You can override this and explicitly specify the primary key with the &lt;code&gt;:primary_key&lt;/code&gt; option.</source>
          <target state="translated">일반적으로 Rails는이 모델의 기본 키를 보유하는 데 사용 된 열이 &lt;code&gt;id&lt;/code&gt; 라고 가정합니다 . 이를 무시하고 &lt;code&gt;:primary_key&lt;/code&gt; 옵션을 사용하여 기본 키를 명시 적으로 지정할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="857770aa87edf4cfd394244a97bcc916a3e871f7" translate="yes" xml:space="preserve">
          <source>By default &lt;a href=&quot;partialrenderer&quot;&gt;ActionView::PartialRenderer&lt;/a&gt; doesn't have any local variables. The &lt;code&gt;:object&lt;/code&gt; option can be used to pass an object to the partial. For instance:</source>
          <target state="translated">기본적으로 &lt;a href=&quot;partialrenderer&quot;&gt;ActionView :: PartialRenderer&lt;/a&gt; 에는 로컬 변수가 없습니다. &lt;code&gt;:object&lt;/code&gt; 옵션 부분에 개체를 전달하는 데 사용할 수 있습니다. 예를 들어 :</target>
        </trans-unit>
        <trans-unit id="659170628dd1b9261a94dbe4d10a860f6751764b" translate="yes" xml:space="preserve">
          <source>By default &lt;code&gt;ActionView::Partials::PartialRenderer&lt;/code&gt; has its object in a local variable with the same name as the template. So, given:</source>
          <target state="translated">기본적으로 &lt;code&gt;ActionView::Partials::PartialRenderer&lt;/code&gt; 에는 템플릿과 이름이 같은 로컬 변수에 객체가 있습니다. 그래서, 주어진 :</target>
        </trans-unit>
        <trans-unit id="30fa5979b399779546ae2eaaaa0e3aabcca28e34" translate="yes" xml:space="preserve">
          <source>By default &lt;code&gt;form_with&lt;/code&gt; attaches the &lt;code&gt;data-remote&lt;/code&gt; attribute submitting the form via an XMLHTTPRequest in the background if an Unobtrusive JavaScript driver, like rails-ujs, is used. See the &lt;code&gt;:local&lt;/code&gt; option for more.</source>
          <target state="translated">rails-ujs와 같은 눈에 띄지 않는 JavaScript 드라이버가 사용되는 경우 기본적으로 &lt;code&gt;form_with&lt;/code&gt; 는 백그라운드에서 XMLHTTPRequest를 통해 양식을 제출 하는 &lt;code&gt;data-remote&lt;/code&gt; 속성을 첨부합니다 . 자세한 내용은 &lt;code&gt;:local&lt;/code&gt; 옵션을 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="95d86d6e56479fe144142ad18a4719d9a55d2e91" translate="yes" xml:space="preserve">
          <source>By default &lt;code&gt;form_with&lt;/code&gt; submits forms using Ajax thereby skipping full page redirects. To make this guide easier to get into we've disabled that with &lt;code&gt;local: true&lt;/code&gt; for now.</source>
          <target state="translated">기본적으로 &lt;code&gt;form_with&lt;/code&gt; 는 Ajax를 사용하여 양식을 제출하므로 전체 페이지 리디렉션을 건너 뜁니다. 이 가이드를보다 쉽게 ​​이해할 수 있도록 &lt;code&gt;local: true&lt;/code&gt; 로 비활성화했습니다 .</target>
        </trans-unit>
        <trans-unit id="6c736a198d3f4ea8b8932e32773ff3efe5d6c2f5" translate="yes" xml:space="preserve">
          <source>By default &lt;code&gt;to_param&lt;/code&gt; just calls &lt;code&gt;to_s&lt;/code&gt;:</source>
          <target state="translated">기본적으로 &lt;code&gt;to_param&lt;/code&gt; 은 &lt;code&gt;to_s&lt;/code&gt; 만 호출합니다 .</target>
        </trans-unit>
        <trans-unit id="9f220f72f7dba7a33ca581690702875f959abd2a" translate="yes" xml:space="preserve">
          <source>By default Active Record uses database features like prepared statements and advisory locks. You might need to disable those features if you're using an external connection pooler like PgBouncer:</source>
          <target state="translated">기본적으로 Active Record는 준비된 명령문 및 권고 잠금과 같은 데이터베이스 기능을 사용합니다. PgBouncer와 같은 외부 연결 풀러를 사용하는 경우 해당 기능을 비활성화해야 할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="3bc510dc116e4bcc27634b6dbc398842fc099193" translate="yes" xml:space="preserve">
          <source>By default Rails expects that your application is running at the root (eg. &lt;code&gt;/&lt;/code&gt;). This section explains how to run your application inside a directory.</source>
          <target state="translated">기본적으로 Rails는 애플리케이션이 루트 (예 : &lt;code&gt;/&lt;/code&gt; ) 에서 실행 중일 것으로 예상합니다 . 이 섹션에서는 디렉토리 내에서 애플리케이션을 실행하는 방법에 대해 설명합니다.</target>
        </trans-unit>
        <trans-unit id="cd7a686d8d2e062d847e4909a11866e28958bb81" translate="yes" xml:space="preserve">
          <source>By default Rails expects the database roles to be &lt;code&gt;writing&lt;/code&gt; and &lt;code&gt;reading&lt;/code&gt; for the primary and replica respectively. If you have a legacy system you may already have roles set up that you don't want to change. In that case you can set a new role name in your application config.</source>
          <target state="translated">기본적으로 Rails는 데이터베이스 역할 이 기본 및 복제본 각각에 대해 &lt;code&gt;writing&lt;/code&gt; 및 &lt;code&gt;reading&lt;/code&gt; 를 기대합니다 . 레거시 시스템이있는 경우 변경하지 않으려는 역할이 이미 설정되어있을 수 있습니다. 이 경우 응용 프로그램 구성에서 새 역할 이름을 설정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2717c4a16b9c82ebc6974a604791e4b511b4e4da" translate="yes" xml:space="preserve">
          <source>By default Rails ships with three environments: &quot;development&quot;, &quot;test&quot;, and &quot;production&quot;. While these are sufficient for most use cases, there are circumstances when you want more environments.</source>
          <target state="translated">기본적으로 Rails는 &quot;development&quot;, &quot;test&quot;및 &quot;production&quot;의 세 가지 환경으로 제공됩니다. 이것들은 대부분의 사용 사례에 충분하지만 더 많은 환경을 원하는 상황이 있습니다.</target>
        </trans-unit>
        <trans-unit id="69006f2046cd6b96bca069ef449b5cb501626768" translate="yes" xml:space="preserve">
          <source>By default a production application will render either a 404 or a 500 error message, in the development environment all unhandled exceptions are raised. These messages are contained in static HTML files in the public folder, in &lt;code&gt;404.html&lt;/code&gt; and &lt;code&gt;500.html&lt;/code&gt; respectively. You can customize these files to add some extra information and style, but remember that they are static HTML; i.e. you can't use ERB, SCSS, CoffeeScript, or layouts for them.</source>
          <target state="translated">기본적으로 프로덕션 응용 프로그램은 개발 환경에서 처리되지 않은 모든 예외가 발생하면 404 또는 500 오류 메시지를 렌더링합니다. 이러한 메시지는 공용 폴더의 정적 HTML 파일 ( &lt;code&gt;404.html&lt;/code&gt; 및 &lt;code&gt;500.html&lt;/code&gt; )에 각각 포함되어 있습니다. 이러한 파일을 사용자 정의하여 추가 정보와 스타일을 추가 할 수 있지만 정적 HTML임을 기억하십시오. 즉, ERB, SCSS, CoffeeScript 또는 레이아웃을 사용할 수 없습니다.</target>
        </trans-unit>
        <trans-unit id="c25e4ceabf84ae285c70b353dcdc0277b065c6cb" translate="yes" xml:space="preserve">
          <source>By default any message can be used throughout your app. But they can also be confined to a specific &lt;code&gt;:purpose&lt;/code&gt;.</source>
          <target state="translated">기본적으로 모든 메시지를 앱 전체에서 사용할 수 있습니다. 그러나 특정 &lt;code&gt;:purpose&lt;/code&gt; 으로 제한 될 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="c9dddd50cf8533c62b42b8cd728487b067271192" translate="yes" xml:space="preserve">
          <source>By default any rotated encryptors use the values of the primary encryptor unless specified otherwise.</source>
          <target state="translated">기본적으로 회전 된 암호화 기는 달리 지정하지 않는 한 기본 암호화 기의 값을 사용합니다.</target>
        </trans-unit>
        <trans-unit id="59b2ff00996be6ebb1306a60a90eef6839b05e99" translate="yes" xml:space="preserve">
          <source>By default any rotated verifiers use the values of the primary verifier unless specified otherwise.</source>
          <target state="translated">기본적으로 회전 검증기는 달리 지정하지 않는 한 기본 검증기의 값을 사용합니다.</target>
        </trans-unit>
        <trans-unit id="2db3e74acd1d14daa31e7898ac837c25cedec77b" translate="yes" xml:space="preserve">
          <source>By default cached responses will be private, cached only on the user's web browser. To allow proxies to cache the response, set &lt;code&gt;public: true&lt;/code&gt; to indicate that they can serve the cached response to all users.</source>
          <target state="translated">기본적으로 캐시 된 응답은 개인용이며 사용자의 웹 브라우저에만 캐시됩니다. 프록시가 응답을 캐시 할 수있게하려면 모든 사용자에게 캐시 된 응답을 제공 할 수 있음을 표시하려면 &lt;code&gt;public: true&lt;/code&gt; 로 설정 하십시오.</target>
        </trans-unit>
        <trans-unit id="d4fcea903daea8008c14b0e6a78b8eaf3a97d8ef" translate="yes" xml:space="preserve">
          <source>By default callbacks are halted by throwing &lt;code&gt;:abort&lt;/code&gt;. See &lt;code&gt;ClassMethods.define_callbacks&lt;/code&gt; for details.</source>
          <target state="translated">기본적으로 콜백은 &lt;code&gt;:abort&lt;/code&gt; 를 던져 중단 됩니다. 자세한 내용은 &lt;code&gt;ClassMethods.define_callbacks&lt;/code&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="7c83878563a2ef1e498fead952f3dbb1ba89a59c" translate="yes" xml:space="preserve">
          <source>By default it is set to &lt;code&gt;false&lt;/code&gt; which results in following output:</source>
          <target state="translated">기본적으로 &lt;code&gt;false&lt;/code&gt; 로 설정 되어 다음과 같은 출력이 발생합니다.</target>
        </trans-unit>
        <trans-unit id="41e04b5f4b5b5a52e8f80185641f60b9256cf75c" translate="yes" xml:space="preserve">
          <source>By default it uses Marshal to serialize the message. If you want to use another serialization method, you can set the serializer in the options hash upon initialization:</source>
          <target state="translated">기본적으로 Marshal을 사용하여 메시지를 직렬화합니다. 다른 직렬화 방법을 사용하려면 초기화시 해시 옵션에서 직렬 변환기를 설정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ae123002596f4342871858c45f7e76f804a77eaa" translate="yes" xml:space="preserve">
          <source>By default messages last forever and verifying one year from now will still return the original value. But messages can be set to expire at a given time with &lt;code&gt;:expires_in&lt;/code&gt; or &lt;code&gt;:expires_at&lt;/code&gt;.</source>
          <target state="translated">기본적으로 메시지는 영구적이며 지금부터 1 년을 확인하면 원래 값이 반환됩니다. 그러나 메시지는 주어진 시간에 &lt;code&gt;:expires_in&lt;/code&gt; 또는 &lt;code&gt;:expires_at&lt;/code&gt; 로 만료되도록 설정할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="f5dd8879356318f4bd3fd2573f9f5a8141f5729a" translate="yes" xml:space="preserve">
          <source>By default migrations tell you exactly what they're doing and how long it took. A migration creating a table and adding an index might produce output like this</source>
          <target state="translated">기본적으로 마이그레이션은 수행중인 작업과 소요 시간을 정확하게 알려줍니다. 테이블을 작성하고 색인을 추가하면 마이그레이션이 다음과 같은 결과를 생성 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="295710fb504d4e6e27c6f5d71128595e6c44173d" translate="yes" xml:space="preserve">
          <source>By default name of the node for the children of root is &lt;code&gt;root.singularize&lt;/code&gt;. You can change it with the &lt;code&gt;:children&lt;/code&gt; option.</source>
          <target state="translated">기본적으로 루트 하위의 노드 이름은 &lt;code&gt;root.singularize&lt;/code&gt; 입니다. &lt;code&gt;:children&lt;/code&gt; 옵션을 사용하여 변경할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="9a8f55c96c35b5948c9e582cd392d63544237ff5" translate="yes" xml:space="preserve">
          <source>By default running &lt;code&gt;rails db:migrate&lt;/code&gt; will run in the &lt;code&gt;development&lt;/code&gt; environment. To run migrations against another environment you can specify it using the &lt;code&gt;RAILS_ENV&lt;/code&gt; environment variable while running the command. For example to run migrations against the &lt;code&gt;test&lt;/code&gt; environment you could run:</source>
          <target state="translated">기본적으로 &lt;code&gt;rails db:migrate&lt;/code&gt; 실행 db : migrate 는 &lt;code&gt;development&lt;/code&gt; 환경 에서 실행됩니다 . 다른 환경에 대해 마이그레이션 을 실행하려면 명령을 실행하는 동안 &lt;code&gt;RAILS_ENV&lt;/code&gt; 환경 변수를 사용하여 마이그레이션을 지정할 수 있습니다 . 예를 들어 &lt;code&gt;test&lt;/code&gt; 환경 에서 마이그레이션을 실행하려면 다음을 실행할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="b1939f6a2e0851b7b6819fa7499fd4fc7bf0dcfa" translate="yes" xml:space="preserve">
          <source>By default the &lt;code&gt;:id&lt;/code&gt; parameter doesn't accept dots - this is because the dot is used as a separator for formatted routes. If you need to use a dot within an &lt;code&gt;:id&lt;/code&gt; add a constraint which overrides this - for example &lt;code&gt;id: /[^\/]+/&lt;/code&gt; allows anything except a slash.</source>
          <target state="translated">기본적으로 &lt;code&gt;:id&lt;/code&gt; 매개 변수는 점을 허용하지 않습니다. 이는 점이 형식화 된 경로의 구분 기호로 사용되기 때문입니다. &lt;code&gt;:id&lt;/code&gt; 내에 점을 사용해야하는 경우 이를 무시하는 제한 조건을 추가하십시오 (예 &lt;code&gt;id: /[^\/]+/&lt;/code&gt; 는 슬래시를 제외한 모든 것을 허용합니다).</target>
        </trans-unit>
        <trans-unit id="1677d70afabfedc19b943aeea5449ec54f9572cd" translate="yes" xml:space="preserve">
          <source>By default the &lt;code&gt;:id&lt;/code&gt; parameter doesn't accept dots. If you need to use dots as part of the &lt;code&gt;:id&lt;/code&gt; parameter add a constraint which overrides this restriction, e.g:</source>
          <target state="translated">기본적으로 &lt;code&gt;:id&lt;/code&gt; 매개 변수는 점을 허용하지 않습니다. &lt;code&gt;:id&lt;/code&gt; 매개 변수의 일부로 점을 사용해야 하는 경우이 제한을 무시하는 제한 조건을 추가 하십시오 . 예 :</target>
        </trans-unit>
        <trans-unit id="18fc7c6108a03196d5290ceddbf9fa1dfc293288" translate="yes" xml:space="preserve">
          <source>By default the associated records are protected from being destroyed. If you want to destroy any of the associated records through the attributes hash, you have to enable it first using the &lt;code&gt;:allow_destroy&lt;/code&gt; option. This will allow you to also use the &lt;code&gt;_destroy&lt;/code&gt; key to destroy existing records:</source>
          <target state="translated">기본적으로 관련 레코드는 삭제되지 않습니다. 속성 해시를 통해 연결된 레코드를 삭제하려면 먼저 &lt;code&gt;:allow_destroy&lt;/code&gt; 옵션을 사용하여 레코드를 활성화해야합니다 . &lt;code&gt;_destroy&lt;/code&gt; 키를 사용하여 기존 레코드를 삭제할 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="6a8d01d917bb8e0d1022f2ef273afea5fa8d1bc3" translate="yes" xml:space="preserve">
          <source>By default the internal instance variable is named with a leading underscore, &lt;code&gt;@_log_level&lt;/code&gt; in the example above. That's configurable via &lt;code&gt;Module.attr_internal_naming_format&lt;/code&gt; though, you can pass any &lt;code&gt;sprintf&lt;/code&gt;-like format string with a leading &lt;code&gt;@&lt;/code&gt; and a &lt;code&gt;%s&lt;/code&gt; somewhere, which is where the name will be placed. The default is &lt;code&gt;&quot;@_%s&quot;&lt;/code&gt;.</source>
          <target state="translated">기본적으로 내부 인스턴스 변수의 이름은 위의 예제에서 선행 밑줄 ( &lt;code&gt;@_log_level&lt;/code&gt; 됩니다. &lt;code&gt;Module.attr_internal_naming_format&lt;/code&gt; 을 통해 구성 할 수 있지만 이름이 배치 될 곳은 앞에 &lt;code&gt;@&lt;/code&gt; 와 &lt;code&gt;%s&lt;/code&gt; 있는 &lt;code&gt;sprintf&lt;/code&gt; 와 같은 형식 문자열을 전달할 수 있습니다 . 기본값은 &lt;code&gt;&quot;@_%s&quot;&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="4a57917f3dfcef7071fb7eb3f6f00a1d9482bbf6" translate="yes" xml:space="preserve">
          <source>By default the root node is &quot;hash&quot;, but that's configurable via the &lt;code&gt;:root&lt;/code&gt; option.</source>
          <target state="translated">기본적으로 루트 노드는 &quot;해시&quot;이지만 &lt;code&gt;:root&lt;/code&gt; 옵션을 통해 구성 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="670ee9f8cbf06051c9ae0f5bcccefcba40bb2627" translate="yes" xml:space="preserve">
          <source>By default the root node is &amp;ldquo;hash&amp;rdquo;, but that's configurable via the &lt;code&gt;:root&lt;/code&gt; option.</source>
          <target state="translated">기본적으로 루트 노드는 &quot;해시&quot;이지만 &lt;code&gt;:root&lt;/code&gt; 옵션을 통해 구성 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a897672892639be53cb6df5d8a909b7eb37376ee" translate="yes" xml:space="preserve">
          <source>By default value objects are initialized by calling the &lt;code&gt;new&lt;/code&gt; constructor of the value class passing each of the mapped attributes, in the order specified by the &lt;code&gt;:mapping&lt;/code&gt; option, as arguments. If the value class doesn't support this convention then &lt;a href=&quot;classmethods#method-i-composed_of&quot;&gt;composed_of&lt;/a&gt; allows a custom constructor to be specified.</source>
          <target state="translated">기본적으로 값 객체는 &lt;code&gt;:mapping&lt;/code&gt; 옵션에 지정된 순서대로 매핑 된 각 속성을 전달하는 값 클래스 의 &lt;code&gt;new&lt;/code&gt; 생성자를 호출하여 초기화됩니다 . 값 클래스가이 규칙을 지원하지 않으면 &lt;a href=&quot;classmethods#method-i-composed_of&quot;&gt;configured_of를&lt;/a&gt; 사용하면 사용자 정의 생성자를 지정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="988933825983ae1fa0f4c6b19a5c4e9a51a4ea96" translate="yes" xml:space="preserve">
          <source>By default when &lt;code&gt;config.force_ssl&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;, URLs generated for hosts will use the HTTPS protocol.</source>
          <target state="translated">&lt;code&gt;config.force_ssl&lt;/code&gt; 이 &lt;code&gt;true&lt;/code&gt; 인 경우 기본적으로 호스트에 대해 생성 된 URL은 HTTPS 프로토콜을 사용합니다.</target>
        </trans-unit>
        <trans-unit id="e36e710b72496db14bd9b353c634f06ba3802b36" translate="yes" xml:space="preserve">
          <source>By default you will only be able to set and update attributes on the associated model. If you want to destroy the associated model through the attributes hash, you have to enable it first using the &lt;code&gt;:allow_destroy&lt;/code&gt; option.</source>
          <target state="translated">기본적으로 관련 모델의 속성 만 설정하고 업데이트 할 수 있습니다. 속성 해시를 통해 연결된 모델을 삭제하려면 먼저 &lt;code&gt;:allow_destroy&lt;/code&gt; 옵션을 사용하여 해당 모델을 활성화해야합니다 .</target>
        </trans-unit>
        <trans-unit id="5d1344b5b01cc738fa97694695930ea32a8a15e1" translate="yes" xml:space="preserve">
          <source>By default, &lt;a href=&quot;persistence#method-i-save&quot;&gt;save&lt;/a&gt; also sets the &lt;code&gt;updated_at&lt;/code&gt;/&lt;code&gt;updated_on&lt;/code&gt; attributes to the current time. However, if you supply &lt;code&gt;touch: false&lt;/code&gt;, these timestamps will not be updated.</source>
          <target state="translated">기본적으로 &lt;a href=&quot;persistence#method-i-save&quot;&gt;save&lt;/a&gt; 는 &lt;code&gt;updated_at&lt;/code&gt; / &lt;code&gt;updated_on&lt;/code&gt; 속성도 현재 시간으로 설정합니다. 그러나 &lt;code&gt;touch: false&lt;/code&gt; 하면 이러한 타임 스탬프가 업데이트되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="2d9050805eb48947667d6e7e159b98ace896a033" translate="yes" xml:space="preserve">
          <source>By default, &lt;a href=&quot;persistence#method-i-save-21&quot;&gt;save!&lt;/a&gt; also sets the &lt;code&gt;updated_at&lt;/code&gt;/&lt;code&gt;updated_on&lt;/code&gt; attributes to the current time. However, if you supply &lt;code&gt;touch: false&lt;/code&gt;, these timestamps will not be updated.</source>
          <target state="translated">기본적으로 &lt;a href=&quot;persistence#method-i-save-21&quot;&gt;저장하십시오! &lt;/a&gt;또한 &lt;code&gt;updated_at&lt;/code&gt; / &lt;code&gt;updated_on&lt;/code&gt; 속성을 현재 시간으로 설정합니다. 그러나 &lt;code&gt;touch: false&lt;/code&gt; 하면 이러한 타임 스탬프가 업데이트되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="98d1514c8103f16682a8c4de564165ae7db68e16" translate="yes" xml:space="preserve">
          <source>By default, &lt;a href=&quot;persistence#method-i-save-21&quot;&gt;save!&lt;/a&gt; always runs validations. If any of them fail &lt;a href=&quot;recordinvalid&quot;&gt;ActiveRecord::RecordInvalid&lt;/a&gt; gets raised, and the record won't be saved. However, if you supply &lt;code&gt;validate:
false&lt;/code&gt;, validations are bypassed altogether. See &lt;a href=&quot;validations&quot;&gt;ActiveRecord::Validations&lt;/a&gt; for more information.</source>
          <target state="translated">기본적으로 &lt;a href=&quot;persistence#method-i-save-21&quot;&gt;저장하십시오!&lt;/a&gt; 항상 유효성 검사를 실행합니다. 이들 중 하나라도 실패하면 &lt;a href=&quot;recordinvalid&quot;&gt;ActiveRecord :: RecordInvalid&lt;/a&gt; 가 발생하고 레코드가 저장되지 않습니다. 그러나 &lt;code&gt;validate: false&lt;/code&gt; 하면 유효성 검증이 모두 무시됩니다. 자세한 내용은 &lt;a href=&quot;validations&quot;&gt;ActiveRecord :: Validations&lt;/a&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="ebf5096ba8c919255c8be86858412508d224e657" translate="yes" xml:space="preserve">
          <source>By default, &lt;code&gt;ActionDispatch::SystemTestCase&lt;/code&gt; is driven by the Selenium driver, with the Chrome browser, and a browser size of 1400x1400.</source>
          <target state="translated">기본적으로 &lt;code&gt;ActionDispatch::SystemTestCase&lt;/code&gt; 는 Selenium 드라이버 (Chrome 브라우저 및 브라우저 크기 1400x1400)에 의해 구동됩니다.</target>
        </trans-unit>
        <trans-unit id="003bcc717658d1b560b3587e1bc470a20ad89fe1" translate="yes" xml:space="preserve">
          <source>By default, &lt;code&gt;ActiveJob::TestCase&lt;/code&gt; will set the queue adapter to &lt;code&gt;:test&lt;/code&gt; so that your jobs are performed inline. It will also ensure that all previously performed and enqueued jobs are cleared before any test run so you can safely assume that no jobs have already been executed in the scope of each test.</source>
          <target state="translated">기본적으로 &lt;code&gt;ActiveJob::TestCase&lt;/code&gt; 는 작업이 인라인으로 수행되도록 큐 어댑터를 &lt;code&gt;:test&lt;/code&gt; 로 설정합니다 . 또한 모든 테스트 실행 전에 이전에 수행되고 대기중인 모든 작업이 지워지도록 보장하므로 각 테스트 범위에서 이미 실행 된 작업이 없다고 가정 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="a0a3ede5612aa0d454b5aed1361a4c6451de3876" translate="yes" xml:space="preserve">
          <source>By default, &lt;code&gt;Model.find&lt;/code&gt; selects all the fields from the result set using &lt;code&gt;select *&lt;/code&gt;.</source>
          <target state="translated">기본적으로 &lt;code&gt;Model.find&lt;/code&gt; 는 &lt;code&gt;select *&lt;/code&gt; 를 사용하여 결과 집합에서 모든 필드를 선택 합니다.</target>
        </trans-unit>
        <trans-unit id="4db5e2957f4391cb51be8e098598115a9041c46a" translate="yes" xml:space="preserve">
          <source>By default, &lt;code&gt;camelize&lt;/code&gt; converts strings to UpperCamelCase. If the argument to camelize is set to &lt;code&gt;:lower&lt;/code&gt; then camelize produces lowerCamelCase.</source>
          <target state="translated">기본적으로 &lt;code&gt;camelize&lt;/code&gt; 는 문자열을 UpperCamelCase로 변환합니다. camelize에 대한 인수가 &lt;code&gt;:lower&lt;/code&gt; 로 설정되면 camelize는 lowerCamelCase를 생성합니다.</target>
        </trans-unit>
        <trans-unit id="ae47017c99fcc104709e3ad36a44e3fd0b9c32c0" translate="yes" xml:space="preserve">
          <source>By default, &lt;code&gt;config.debug_exception_response_format&lt;/code&gt; is set to &lt;code&gt;:api&lt;/code&gt;, when &lt;code&gt;config.api_only&lt;/code&gt; is set to true.</source>
          <target state="translated">&lt;code&gt;config.api_only&lt;/code&gt; 가 true로 설정 되면 기본적으로 &lt;code&gt;config.debug_exception_response_format&lt;/code&gt; 이 &lt;code&gt;:api&lt;/code&gt; 로 설정됩니다.</target>
        </trans-unit>
        <trans-unit id="9c771945258166f777f3bb7cb26c1b6ff17387b8" translate="yes" xml:space="preserve">
          <source>By default, &lt;code&gt;create_table&lt;/code&gt; will create a primary key called &lt;code&gt;id&lt;/code&gt;. You can change the name of the primary key with the &lt;code&gt;:primary_key&lt;/code&gt; option (don't forget to update the corresponding model) or, if you don't want a primary key at all, you can pass the option &lt;code&gt;id: false&lt;/code&gt;. If you need to pass database specific options you can place an SQL fragment in the &lt;code&gt;:options&lt;/code&gt; option. For example:</source>
          <target state="translated">기본적으로 &lt;code&gt;create_table&lt;/code&gt; 은 &lt;code&gt;id&lt;/code&gt; 라는 기본 키를 만듭니다 . &lt;code&gt;:primary_key&lt;/code&gt; 옵션 을 사용하여 기본 키 이름을 변경 하거나 (해당 모델을 업데이트하는 것을 잊지 마십시오) 기본 키를 원하지 않으면 &lt;code&gt;id: false&lt;/code&gt; 옵션을 전달할 수 있습니다 . 데이터베이스 특정 옵션을 전달해야하는 경우 &lt;code&gt;:options&lt;/code&gt; 옵션 에 SQL 조각을 배치 할 수 있습니다 . 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="db005b1fc0750fc170278eb94df6c7c7518e433f" translate="yes" xml:space="preserve">
          <source>By default, &lt;code&gt;model&lt;/code&gt; is the &lt;a href=&quot;../../activesupport/timezone&quot;&gt;ActiveSupport::TimeZone&lt;/a&gt; constant (which can be obtained in Active Record as a value object). The &lt;code&gt;model&lt;/code&gt; parameter must respond to &lt;code&gt;all&lt;/code&gt; and return an array of objects that represent time zones; each object must respond to &lt;code&gt;name&lt;/code&gt;. If a Regexp is given it will attempt to match the zones using the &amp;lt;code&amp;gt;=~&amp;lt;code&amp;gt; operator.</source>
          <target state="translated">기본적으로 &lt;code&gt;model&lt;/code&gt; 은 &lt;a href=&quot;../../activesupport/timezone&quot;&gt;ActiveSupport :: TimeZone&lt;/a&gt; 상수입니다 (액티브 레코드에서 값 개체로 얻을 수 있음). &lt;code&gt;model&lt;/code&gt; 매개 변수에 응답해야합니다 &lt;code&gt;all&lt;/code&gt; 시간 영역을 나타내는 객체의 배열을 반환; 각 객체는 &lt;code&gt;name&lt;/code&gt; 에 응답해야합니다 . 정규 표현식이 제공되면 &amp;lt;code&amp;gt; = ~ &amp;lt;code&amp;gt; 연산자를 사용하여 영역을 일치 시키려고 시도합니다.</target>
        </trans-unit>
        <trans-unit id="fa901eb60a6c0d43aeecda5b5cdad5b8dd8208a3" translate="yes" xml:space="preserve">
          <source>By default, &lt;code&gt;numericality&lt;/code&gt; doesn't allow &lt;code&gt;nil&lt;/code&gt; values. You can use &lt;code&gt;allow_nil: true&lt;/code&gt; option to permit it.</source>
          <target state="translated">기본적으로 &lt;code&gt;numericality&lt;/code&gt; 는 &lt;code&gt;nil&lt;/code&gt; 값을 허용하지 않습니다 . &lt;code&gt;allow_nil: true&lt;/code&gt; 옵션을 사용 하여 허용 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="2aa43d4933e33c1bc8273711f977df79302df5ee" translate="yes" xml:space="preserve">
          <source>By default, &lt;code&gt;post.person_id&lt;/code&gt; is the selected option. Specify &lt;code&gt;selected: value&lt;/code&gt; to use a different selection or &lt;code&gt;selected: nil&lt;/code&gt; to leave all options unselected. Similarly, you can specify values to be disabled in the option tags by specifying the &lt;code&gt;:disabled&lt;/code&gt; option. This can either be a single value or an array of values to be disabled.</source>
          <target state="translated">기본적으로 &lt;code&gt;post.person_id&lt;/code&gt; 가 선택된 옵션입니다. 다른 옵션 을 사용하려면 &lt;code&gt;selected: value&lt;/code&gt; 을 지정 하거나 모든 옵션을 선택하지 않은 상태로 유지하려면 &lt;code&gt;selected: nil&lt;/code&gt; 을 지정하십시오. 마찬가지로 &lt;code&gt;:disabled&lt;/code&gt; 옵션 을 지정하여 옵션 태그에서 비활성화 할 값을 지정할 수 있습니다. 이 값은 단일 값이거나 사용하지 않을 값의 배열 일 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="887a9c178a164cbccfe4428c38b53a2102358519" translate="yes" xml:space="preserve">
          <source>By default, &lt;code&gt;test_helper.rb&lt;/code&gt; will load all of your fixtures into your test database, so this test will succeed.</source>
          <target state="translated">기본적으로 &lt;code&gt;test_helper.rb&lt;/code&gt; 는 모든 조명기를 테스트 데이터베이스에로드 하므로이 테스트는 성공합니다.</target>
        </trans-unit>
        <trans-unit id="2eff7d5645935cbef41a28d7cdbf03d348e2a966" translate="yes" xml:space="preserve">
          <source>By default, Action Cable allows all requests from localhost:3000 when running in the development environment.</source>
          <target state="translated">기본적으로 Action Cable은 개발 환경에서 실행될 때 localhost : 3000의 모든 요청을 허용합니다.</target>
        </trans-unit>
        <trans-unit id="3c0f4e5876a30f50ce6617215e2c991b7379f49d" translate="yes" xml:space="preserve">
          <source>By default, Action Cable looks for a configuration file in &lt;code&gt;config/cable.yml&lt;/code&gt;. The file must specify an adapter for each Rails environment. See the &lt;a href=&quot;#dependencies&quot;&gt;Dependencies&lt;/a&gt; section for additional information on adapters.</source>
          <target state="translated">기본적으로 Action Cable은 &lt;code&gt;config/cable.yml&lt;/code&gt; 에서 구성 파일을 찾습니다 . 파일은 각 Rails 환경에 대한 어댑터를 지정해야합니다. 어댑터에 대한 추가 정보 는 &lt;a href=&quot;#dependencies&quot;&gt;종속성&lt;/a&gt; 섹션을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="3eb4c3e59a71047cc9d1f630979ced609e593d29" translate="yes" xml:space="preserve">
          <source>By default, Active Record uses some naming conventions to find out how the mapping between models and database tables should be created. Rails will pluralize your class names to find the respective database table. So, for a class &lt;code&gt;Book&lt;/code&gt;, you should have a database table called &lt;strong&gt;books&lt;/strong&gt;. The Rails pluralization mechanisms are very powerful, being capable of pluralizing (and singularizing) both regular and irregular words. When using class names composed of two or more words, the model class name should follow the Ruby conventions, using the CamelCase form, while the table name must contain the words separated by underscores. Examples:</source>
          <target state="translated">기본적으로 Active Record는 몇 가지 명명 규칙을 사용하여 모델과 데이터베이스 테이블 간의 매핑을 만드는 방법을 찾습니다. Rails는 각 데이터베이스 테이블을 찾기 위해 클래스 이름을 복수화합니다. 따라서 &lt;code&gt;Book&lt;/code&gt; 클래스의 경우 &lt;strong&gt;books&lt;/strong&gt; 라는 데이터베이스 테이블이 있어야합니다 . Rails의 복수형 메커니즘은 매우 강력하여 규칙적인 단어와 불규칙적 인 단어를 모두 복수화 (및 단일화) 할 수 있습니다. 둘 이상의 단어로 구성된 클래스 이름을 사용하는 경우 모델 클래스 이름은 CamelCase 양식을 사용하여 Ruby 규칙을 따라야하며 테이블 이름은 밑줄로 구분 된 단어를 포함해야합니다. 예 :</target>
        </trans-unit>
        <trans-unit id="b09dcd81d0395e0cf546d26903583713638df25a" translate="yes" xml:space="preserve">
          <source>By default, Rails creates routes for the seven default actions (&lt;code&gt;index&lt;/code&gt;, &lt;code&gt;show&lt;/code&gt;, &lt;code&gt;new&lt;/code&gt;, &lt;code&gt;create&lt;/code&gt;, &lt;code&gt;edit&lt;/code&gt;, &lt;code&gt;update&lt;/code&gt;, and &lt;code&gt;destroy&lt;/code&gt;) for every RESTful route in your application. You can use the &lt;code&gt;:only&lt;/code&gt; and &lt;code&gt;:except&lt;/code&gt; options to fine-tune this behavior. The &lt;code&gt;:only&lt;/code&gt; option tells Rails to create only the specified routes:</source>
          <target state="translated">기본적으로 Rails 는 애플리케이션의 모든 RESTful 경로에 대해 7 가지 기본 조치 ( &lt;code&gt;index&lt;/code&gt; , &lt;code&gt;show&lt;/code&gt; , &lt;code&gt;new&lt;/code&gt; , &lt;code&gt;create&lt;/code&gt; , &lt;code&gt;edit&lt;/code&gt; , &lt;code&gt;update&lt;/code&gt; 및 &lt;code&gt;destroy&lt;/code&gt; )에 대한 경로를 작성합니다. 당신은 사용할 수 있습니다 &lt;code&gt;:only&lt;/code&gt; 와 &lt;code&gt;:except&lt;/code&gt; 미세 조정이 동작에 대한 옵션을 제공합니다. &lt;code&gt;:only&lt;/code&gt; 옵션은 지정된 경로를 만들 레일을 알려줍니다 :</target>
        </trans-unit>
        <trans-unit id="ca1ba60d991f6a1a44df234d2532502cc88877e0" translate="yes" xml:space="preserve">
          <source>By default, Rails eager loads the application files when it boots in production mode, so most of the autoloading going on in development does not happen. But autoloading may still be triggered during eager loading.</source>
          <target state="translated">기본적으로 Rails 열망은 애플리케이션 모드가 프로덕션 모드로 부팅 될 때 애플리케이션 파일을로드하므로 개발 중에 진행되는 대부분의 자동 로딩이 발생하지 않습니다. 그러나 열망하는 동안 자동 로딩이 여전히 트리거 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="99b0703b560dc2b47b23a52d4429312e1080f52c" translate="yes" xml:space="preserve">
          <source>By default, Rails generates migrations that look like:</source>
          <target state="translated">기본적으로 Rails는 다음과 같은 마이그레이션을 생성합니다.</target>
        </trans-unit>
        <trans-unit id="33ede8ac555571138ffd9fa34ed9a5d1552947c6" translate="yes" xml:space="preserve">
          <source>By default, Rails includes an &lt;a href=&quot;https://github.com/rails/rails/blob/master/actionview/app/assets/javascripts&quot;&gt;unobtrusive scripting adapter&lt;/a&gt;, which adds a header called &lt;code&gt;X-CSRF-Token&lt;/code&gt; with the security token on every non-GET Ajax call. Without this header, non-GET Ajax requests won't be accepted by Rails. When using another library to make Ajax calls, it is necessary to add the security token as a default header for Ajax calls in your library. To get the token, have a look at &lt;code&gt;&amp;lt;meta name='csrf-token' content='THE-TOKEN'&amp;gt;&lt;/code&gt; tag printed by &lt;code&gt;&amp;lt;%= csrf_meta_tags %&amp;gt;&lt;/code&gt; in your application view.</source>
          <target state="translated">기본적으로 Rails에는 &lt;a href=&quot;https://github.com/rails/rails/blob/master/actionview/app/assets/javascripts&quot;&gt;눈에 거슬리지 않는 스크립팅 어댑터가&lt;/a&gt; 포함되어 있습니다.이 어댑터 는 모든 비 GET Ajax 호출에서 보안 토큰과 함께 &lt;code&gt;X-CSRF-Token&lt;/code&gt; 이라는 헤더를 추가합니다 . 이 헤더가 없으면 비 GET Ajax 요청은 Rails에서 수락되지 않습니다. 다른 라이브러리를 사용하여 Ajax 호출을 수행하는 경우 라이브러리에서 Ajax 호출의 기본 헤더로 보안 토큰을 추가해야합니다. 토큰을 얻으 려면 응용 프로그램보기에서 &lt;code&gt;&amp;lt;%= csrf_meta_tags %&amp;gt;&lt;/code&gt; 로 인쇄 된 &amp;lt; &lt;code&gt;&amp;lt;meta name='csrf-token' content='THE-TOKEN'&amp;gt;&lt;/code&gt; 태그를 살펴보십시오.</target>
        </trans-unit>
        <trans-unit id="8c8eac25dff8383c46558f863c6eabbdc9303e73" translate="yes" xml:space="preserve">
          <source>By default, Rails links to these assets on the current host in the public folder, but you can direct Rails to link to assets from a dedicated asset server by setting &lt;code&gt;ActionController::Base.asset_host&lt;/code&gt; in the application configuration, typically in &lt;code&gt;config/environments/production.rb&lt;/code&gt;. For example, you'd define &lt;code&gt;assets.example.com&lt;/code&gt; to be your asset host this way, inside the &lt;code&gt;configure&lt;/code&gt; block of your environment-specific configuration files or &lt;code&gt;config/application.rb&lt;/code&gt;:</source>
          <target state="translated">기본적으로 Rails는 공용 폴더에있는 현재 호스트의 이러한 자산에 연결되지만 , 애플리케이션 구성, 일반적으로 &lt;code&gt;config/environments/production.rb&lt;/code&gt; 에서 &lt;code&gt;ActionController::Base.asset_host&lt;/code&gt; 를 설정하여 Rails가 전용 자산 서버의 자산에 연결하도록 지시 할 수 있습니다. production.rb . 예를 들어, 환경 별 구성 파일 또는 &lt;code&gt;config/application.rb&lt;/code&gt; 의 &lt;code&gt;configure&lt;/code&gt; 블록 내에서 &lt;code&gt;assets.example.com&lt;/code&gt; 을 이런 방식으로 자산 호스트로 정의 합니다 .</target>
        </trans-unit>
        <trans-unit id="94cf64770f8747de375db9b3f0b69f1fb644eca7" translate="yes" xml:space="preserve">
          <source>By default, Rails links to these assets on the current host in the public folder, but you can direct Rails to link to assets from a dedicated assets server by setting &lt;code&gt;config.action_controller.asset_host&lt;/code&gt; in the application configuration, typically in &lt;code&gt;config/environments/production.rb&lt;/code&gt;. For example, let's say your asset host is &lt;code&gt;assets.example.com&lt;/code&gt;:</source>
          <target state="translated">기본적으로 Rails는 공용 폴더의 현재 호스트에서 이러한 자산에 연결되지만 , 일반적으로 &lt;code&gt;config/environments/production.rb&lt;/code&gt; 에서 응용 프로그램 구성에서 &lt;code&gt;config.action_controller.asset_host&lt;/code&gt; 를 설정하여 Rails가 전용 자산 서버의 자산에 연결하도록 지시 할 수 있습니다 .rb . 예를 들어 자산 호스트가 &lt;code&gt;assets.example.com&lt;/code&gt; 이라고 가정 해 보겠습니다 .</target>
        </trans-unit>
        <trans-unit id="58ffd5b0bf1c7183a6bc017c43f65e4e0618259a" translate="yes" xml:space="preserve">
          <source>By default, Rails loads generators from your load path. However, if you want to place your generators at a different location, you can specify in your railtie a block which will load them during normal generators lookup:</source>
          <target state="translated">기본적으로 Rails는로드 경로에서 생성기를로드합니다. 그러나 생성기를 다른 위치에 배치하려면 일반 생성기 조회 중에 생성 할 블록을 레일에 지정할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="653644533f4a25a2f43ae795e7b51e862020b44a" translate="yes" xml:space="preserve">
          <source>By default, Rails logs all requests being made to the web application. But log files can be a huge security issue, as they may contain login credentials, credit card numbers et cetera. When designing a web application security concept, you should also think about what will happen if an attacker got (full) access to the web server. Encrypting secrets and passwords in the database will be quite useless, if the log files list them in clear text. You can &lt;em&gt;filter certain request parameters from your log files&lt;/em&gt; by appending them to &lt;code&gt;config.filter_parameters&lt;/code&gt; in the application configuration. These parameters will be marked [FILTERED] in the log.</source>
          <target state="translated">기본적으로 Rails는 웹 애플리케이션에 대한 모든 요청을 기록합니다. 그러나 로그 파일에는 로그인 자격 증명, 신용 카드 번호 등이 포함될 수 있으므로 큰 보안 문제가 될 수 있습니다. 웹 응용 프로그램 보안 개념을 디자인 할 때 공격자가 웹 서버에 완전히 액세스 할 경우 어떻게 될지 고려해야합니다. 로그 파일에 일반 텍스트로 나열되어 있으면 데이터베이스의 비밀 및 암호를 암호화하는 것은 쓸모가 없습니다. 애플리케이션 구성에서 &lt;code&gt;config.filter_parameters&lt;/code&gt; 에 추가 &lt;em&gt;하여 로그 파일에서 특정 요청 매개 변수를 필터링&lt;/em&gt; 할 수 있습니다 . 이 매개 변수는 로그에 [FILTERED]로 표시됩니다.</target>
        </trans-unit>
        <trans-unit id="64e383f3a19de1e39ee356c463e2c87dfa36de1b" translate="yes" xml:space="preserve">
          <source>By default, Rails renders views by first rendering the template and then the layout. The response is sent to the client after the whole template is rendered, all queries are made, and the layout is processed.</source>
          <target state="translated">기본적으로 Rails는 먼저 템플릿을 렌더링 한 다음 레이아웃을 렌더링하여보기를 렌더링합니다. 전체 템플릿이 렌더링되고 모든 쿼리가 작성되고 레이아웃이 처리 된 후 응답이 클라이언트로 전송됩니다.</target>
        </trans-unit>
        <trans-unit id="2d711c6baa51139f594d2802d65d28fa59996302" translate="yes" xml:space="preserve">
          <source>By default, Rails will add a middleware that provides a cache store based on the configuration of your application (memcache by default). This means that the built-in HTTP cache will rely on it.</source>
          <target state="translated">기본적으로 Rails는 애플리케이션 구성 (기본적으로 memcache)을 기반으로 캐시 저장소를 제공하는 미들웨어를 추가합니다. 이는 내장 HTTP 캐시가이를 사용한다는 것을 의미합니다.</target>
        </trans-unit>
        <trans-unit id="13f3a2a5f89a14aa238b8cef8512599a9986d648" translate="yes" xml:space="preserve">
          <source>By default, Rails will compile each template to a method in order to render it. When you alter a template, Rails will check the file's modification time and recompile it in development mode.</source>
          <target state="translated">기본적으로 Rails는 렌더링하기 위해 각 템플릿을 메소드로 컴파일합니다. 템플릿을 변경하면 Rails는 파일의 수정 시간을 확인하고 개발 모드에서 다시 컴파일합니다.</target>
        </trans-unit>
        <trans-unit id="de04a4ec43bbb36f8e68fec991143afd0f5dc085" translate="yes" xml:space="preserve">
          <source>By default, Rails will serve the results of a rendering operation with the MIME content-type of &lt;code&gt;text/html&lt;/code&gt; (or &lt;code&gt;application/json&lt;/code&gt; if you use the &lt;code&gt;:json&lt;/code&gt; option, or &lt;code&gt;application/xml&lt;/code&gt; for the &lt;code&gt;:xml&lt;/code&gt; option.). There are times when you might like to change this, and you can do so by setting the &lt;code&gt;:content_type&lt;/code&gt; option:</source>
          <target state="translated">기본적으로 Rails는 MIME 컨텐츠 유형의 &lt;code&gt;text/html&lt;/code&gt; (또는 &lt;code&gt;:json&lt;/code&gt; 옵션 을 사용하는 경우 &lt;code&gt;application/json&lt;/code&gt; 또는 &lt;code&gt;:xml&lt;/code&gt; 옵션을 위해 &lt;code&gt;application/xml&lt;/code&gt; ) 로 렌더링 작업의 결과를 제공합니다 . 이것을 변경하고 싶을 때가 있는데 &lt;code&gt;:content_type&lt;/code&gt; 옵션 을 설정하면됩니다 :</target>
        </trans-unit>
        <trans-unit id="0a580905b5d01927b4c9ba4c3b8033a0f2f4d165" translate="yes" xml:space="preserve">
          <source>By default, Sprockets caches assets in &lt;code&gt;tmp/cache/assets&lt;/code&gt; in development and production environments. This can be changed as follows:</source>
          <target state="translated">기본적으로 Sprockets 는 개발 및 프로덕션 환경에서 자산을 &lt;code&gt;tmp/cache/assets&lt;/code&gt; 에 캐시 합니다. 다음과 같이 변경할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5a28a552591e4c96ff1d6d4d3be0a08ce2af1332" translate="yes" xml:space="preserve">
          <source>By default, a single session is automatically created for you, but you can use this method to open multiple sessions that ought to be tested simultaneously.</source>
          <target state="translated">기본적으로 단일 세션이 자동으로 생성되지만이 방법을 사용하여 동시에 테스트해야하는 여러 세션을 열 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="75bef760a1dd7b140d0e56ca5f3cfe2e194d5e49" translate="yes" xml:space="preserve">
          <source>By default, adding values to the flash will make them available to the next request, but sometimes you may want to access those values in the same request. For example, if the &lt;code&gt;create&lt;/code&gt; action fails to save a resource and you render the &lt;code&gt;new&lt;/code&gt; template directly, that's not going to result in a new request, but you may still want to display a message using the flash. To do this, you can use &lt;code&gt;flash.now&lt;/code&gt; in the same way you use the normal &lt;code&gt;flash&lt;/code&gt;:</source>
          <target state="translated">기본적으로 플래시에 값을 추가하면 다음 요청에서 값을 사용할 수 있지만 때로는 동일한 요청에서 해당 값에 액세스하려고 할 수 있습니다. 예를 들어, &lt;code&gt;create&lt;/code&gt; 조치가 자원을 저장하지 못하고 &lt;code&gt;new&lt;/code&gt; 템플리트를 직접 렌더링하는 경우 새 요청이 발생하지 않지만 플래시를 사용하여 메시지를 표시 할 수 있습니다. 이렇게하려면 일반 &lt;code&gt;flash&lt;/code&gt; 를 사용하는 것과 같은 방식으로 &lt;code&gt;flash.now&lt;/code&gt; 를 사용할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="ef9f55c84c0a7e4d657d37fbe126507f8e1c91b2" translate="yes" xml:space="preserve">
          <source>By default, all controllers and views have access to a special version of &lt;a href=&quot;urlfor#method-i-url_for&quot;&gt;#url_for&lt;/a&gt;, that already knows what the current hostname is. So if you use &lt;a href=&quot;urlfor#method-i-url_for&quot;&gt;#url_for&lt;/a&gt; in your controllers or your views, then you don't need to explicitly pass the &lt;code&gt;:host&lt;/code&gt; argument.</source>
          <target state="translated">기본적으로 모든 컨트롤러와보기는 현재 호스트 이름이 무엇인지 이미 알고 있는 특수 버전의 &lt;a href=&quot;urlfor#method-i-url_for&quot;&gt;#url_for에&lt;/a&gt; 액세스 할 수 있습니다 . 따라서 컨트롤러 또는 뷰에서 &lt;a href=&quot;urlfor#method-i-url_for&quot;&gt;#url_for&lt;/a&gt; 를 사용 하면 명시 적으로 &lt;code&gt;:host&lt;/code&gt; 인수를 전달할 필요가 없습니다 .</target>
        </trans-unit>
        <trans-unit id="6ce3b19fb0251b5ea46aad4cd7b932e097e42696" translate="yes" xml:space="preserve">
          <source>By default, all newly created &lt;code&gt;InboundEmail&lt;/code&gt; records that have the status of &lt;code&gt;pending&lt;/code&gt;, which is the default, will be scheduled for automatic, deferred routing.</source>
          <target state="translated">기본적 으로 &lt;code&gt;pending&lt;/code&gt; 상태 인 기본값으로 새로 생성 된 모든 &lt;code&gt;InboundEmail&lt;/code&gt; 레코드는 자동 지연 라우팅으로 예약됩니다.</target>
        </trans-unit>
        <trans-unit id="8f5b0a9ff8d0e2eb57162a716afae48a1a569a9e" translate="yes" xml:space="preserve">
          <source>By default, an InboundEmail that has been successfully processed will be incinerated after 30 days. This ensures you're not holding on to people's data willy-nilly after they may have canceled their accounts or deleted their content. The intention is that after you've processed an email, you should have extracted all the data you needed and turned it into domain models and content on your side of the application. The InboundEmail simply stays in the system for the extra time to provide debugging and forensics options.</source>
          <target state="translated">기본적으로 성공적으로 처리 된 InboundEmail은 30 일 후에 소각됩니다. 이렇게하면 사람들이 자신의 계정을 취소하거나 콘텐츠를 삭제 한 후에도 사용자의 데이터를 보유하지 않을 수 있습니다. 전자 메일을 처리 한 후에는 필요한 모든 데이터를 추출하여 해당 응용 프로그램의 도메인 모델 및 콘텐츠로 변환해야합니다. InboundEmail은 단순히 시스템에 남아있어 디버깅 및 법의학 옵션을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="4cebebc40ca032328213ba837e90fd2c03899b5c" translate="yes" xml:space="preserve">
          <source>By default, associations look for objects only within the current module's scope. This can be important when you declare Active Record models within a module. For example:</source>
          <target state="translated">기본적으로 연결은 현재 모듈 범위 내에서만 개체를 ​​찾습니다. 모듈 내에서 Active Record 모델을 선언 할 때 중요 할 수 있습니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="64a0aa5de03f66794c1d5af124d930b67b1707db" translate="yes" xml:space="preserve">
          <source>By default, associations will look for objects within the current module scope. Consider:</source>
          <target state="translated">기본적으로 연결은 현재 모듈 범위 내에서 개체를 찾습니다. 치다:</target>
        </trans-unit>
        <trans-unit id="af633a4b620679a511bd4b8737e7642209a20f89" translate="yes" xml:space="preserve">
          <source>By default, caching is only enabled in your production environment. To play around with caching locally you'll want to enable caching in your local environment by setting &lt;code&gt;config.action_controller.perform_caching&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; in the relevant &lt;code&gt;config/environments/*.rb&lt;/code&gt; file:</source>
          <target state="translated">기본적으로 캐싱은 프로덕션 환경에서만 사용 가능합니다. 로컬로 캐싱을 해결하려면 관련 &lt;code&gt;config/environments/*.rb&lt;/code&gt; 파일 에서 &lt;code&gt;config.action_controller.perform_caching&lt;/code&gt; 을 &lt;code&gt;true&lt;/code&gt; 로 설정하여 로컬 환경에서 캐싱을 사용하도록 설정 하십시오.</target>
        </trans-unit>
        <trans-unit id="1ee0dce7300ef46c96341e4ca00abeed7834d412" translate="yes" xml:space="preserve">
          <source>By default, dynamic segments don't accept dots - this is because the dot is used as a separator for formatted routes. If you need to use a dot within a dynamic segment, add a constraint that overrides this &amp;ndash; for example, &lt;code&gt;id: /[^\/]+/&lt;/code&gt; allows anything except a slash.</source>
          <target state="translated">기본적으로 동적 세그먼트는 점을 허용하지 않습니다. 이는 점이 형식화 된 경로의 구분 기호로 사용되기 때문입니다. 동적 세그먼트 내에서 점을 사용해야하는 경우이를 무시하는 제한 조건을 추가하십시오 (예 &lt;code&gt;id: /[^\/]+/&lt;/code&gt; 는 슬래시를 제외한 모든 것을 허용합니다).</target>
        </trans-unit>
        <trans-unit id="ff592ec5bfc5f8437e36bded91665d1a24834ada" translate="yes" xml:space="preserve">
          <source>By default, each log is created under &lt;code&gt;Rails.root/log/&lt;/code&gt; and the log file is named after the environment in which the application is running.</source>
          <target state="translated">기본적으로 각 로그는 &lt;code&gt;Rails.root/log/&lt;/code&gt; 아래에 작성 되며 로그 파일은 애플리케이션이 실행중인 환경의 이름을 따라 이름이 지정됩니다.</target>
        </trans-unit>
        <trans-unit id="e654fbdc3f1531ee78cb8e973c84d91d7ba22a45" translate="yes" xml:space="preserve">
          <source>By default, every Rails application has three environments: development, test, and production.</source>
          <target state="translated">기본적으로 모든 Rails 애플리케이션에는 개발, 테스트 및 프로덕션의 세 가지 환경이 있습니다.</target>
        </trans-unit>
        <trans-unit id="fa393fb6f3de66087f0367251e9568615f464d5f" translate="yes" xml:space="preserve">
          <source>By default, every Rails application has three environments: development, test, and production. The database for each one of them is configured in &lt;code&gt;config/database.yml&lt;/code&gt;.</source>
          <target state="translated">기본적으로 모든 Rails 애플리케이션에는 개발, 테스트 및 프로덕션의 세 가지 환경이 있습니다. 각각의 데이터베이스는 &lt;code&gt;config/database.yml&lt;/code&gt; 에 구성되어 있습니다 .</target>
        </trans-unit>
        <trans-unit id="3852d5eb5c515cf372a7e56db16ac7d8a4cec7ae" translate="yes" xml:space="preserve">
          <source>By default, gzipped version of compiled assets will be generated, along with the non-gzipped version of assets. Gzipped assets help reduce the transmission of data over the wire. You can configure this by setting the &lt;code&gt;gzip&lt;/code&gt; flag.</source>
          <target state="translated">기본적으로 컴파일되지 않은 자산의 압축 된 버전은 압축되지 않은 버전의 자산과 함께 생성됩니다. 압축 된 자산은 와이어를 통한 데이터 전송을 줄입니다. &lt;code&gt;gzip&lt;/code&gt; 플래그 를 설정하여이를 구성 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="51730220ac5248cfff0276f2d39fbed4c4232071" translate="yes" xml:space="preserve">
          <source>By default, if the delegation raises &lt;code&gt;NoMethodError&lt;/code&gt; and the target is &lt;code&gt;nil&lt;/code&gt; the exception is propagated. You can ask that &lt;code&gt;nil&lt;/code&gt; is returned instead with the &lt;code&gt;:allow_nil&lt;/code&gt; option:</source>
          <target state="translated">기본적으로 위임에서 &lt;code&gt;NoMethodError&lt;/code&gt; 가 발생 하고 대상이 &lt;code&gt;nil&lt;/code&gt; 이면 예외가 전파됩니다. &lt;code&gt;:allow_nil&lt;/code&gt; 옵션을 사용하여 대신 &lt;code&gt;nil&lt;/code&gt; 을 반환 하도록 요청할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="bfd8d4585264cd393a7a0bed71a51cfc2802227a" translate="yes" xml:space="preserve">
          <source>By default, if you don't specify the key in which the parameters would be wrapped to, &lt;code&gt;ParamsWrapper&lt;/code&gt; will actually try to determine if there's a model related to it or not. This controller, for example:</source>
          <target state="translated">기본적으로 매개 변수가 랩핑 될 키를 지정하지 않으면 &lt;code&gt;ParamsWrapper&lt;/code&gt; 는 실제로 관련 모델이 있는지 여부를 판별하려고 시도합니다. 이 컨트롤러는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="02de027ce5e8d2cd7c46d23d8bcee582e736b04f" translate="yes" xml:space="preserve">
          <source>By default, if you use the &lt;code&gt;:plain&lt;/code&gt; option, the text is rendered without using the current layout. If you want Rails to put the text into the current layout, you need to add the &lt;code&gt;layout: true&lt;/code&gt; option and use the &lt;code&gt;.text.erb&lt;/code&gt; extension for the layout file.</source>
          <target state="translated">기본적으로 &lt;code&gt;:plain&lt;/code&gt; 옵션을 사용하면 현재 레이아웃을 사용하지 않고 텍스트가 렌더링됩니다. Rails가 텍스트를 현재 레이아웃에 배치하려면 &lt;code&gt;layout: true&lt;/code&gt; 옵션 을 추가 하고 레이아웃 파일에 &lt;code&gt;.text.erb&lt;/code&gt; 확장자를 사용해야 합니다.</target>
        </trans-unit>
        <trans-unit id="80e66b8c426b3f5d574609aa83a001a8df0c8755" translate="yes" xml:space="preserve">
          <source>By default, inline rendering uses ERB. You can force it to use Builder instead with the &lt;code&gt;:type&lt;/code&gt; option:</source>
          <target state="translated">기본적으로 인라인 렌더링은 ERB를 사용합니다. &lt;code&gt;:type&lt;/code&gt; 옵션 대신 Builder를 사용하도록 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="1d3c77833f612f6f41a293bc6e3197ddfbb58f85" translate="yes" xml:space="preserve">
          <source>By default, it will search in &lt;code&gt;app&lt;/code&gt;, &lt;code&gt;config&lt;/code&gt;, &lt;code&gt;db&lt;/code&gt;, &lt;code&gt;lib&lt;/code&gt;, and &lt;code&gt;test&lt;/code&gt; directories for FIXME, OPTIMIZE, and TODO annotations in files with extension &lt;code&gt;.builder&lt;/code&gt;, &lt;code&gt;.rb&lt;/code&gt;, &lt;code&gt;.rake&lt;/code&gt;, &lt;code&gt;.yml&lt;/code&gt;, &lt;code&gt;.yaml&lt;/code&gt;, &lt;code&gt;.ruby&lt;/code&gt;, &lt;code&gt;.css&lt;/code&gt;, &lt;code&gt;.js&lt;/code&gt;, and &lt;code&gt;.erb&lt;/code&gt;.</source>
          <target state="translated">기본적으로, 그것은에서 검색합니다 &lt;code&gt;app&lt;/code&gt; , &lt;code&gt;config&lt;/code&gt; , &lt;code&gt;db&lt;/code&gt; , &lt;code&gt;lib&lt;/code&gt; 및 &lt;code&gt;test&lt;/code&gt; 확장자를 가진 파일에 FIXME, 최적화 및 TODO 주석의 디렉토리 &lt;code&gt;.builder&lt;/code&gt; , &lt;code&gt;.rb&lt;/code&gt; , &lt;code&gt;.rake&lt;/code&gt; , &lt;code&gt;.yml&lt;/code&gt; , &lt;code&gt;.yaml&lt;/code&gt; , &lt;code&gt;.ruby&lt;/code&gt; , &lt;code&gt;.css&lt;/code&gt; , &lt;code&gt;.js&lt;/code&gt; 및 &lt;code&gt;.erb&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="609eab092255b2f3c0b9e4ae2ebc833becaa5a42" translate="yes" xml:space="preserve">
          <source>By default, migrations will describe the actions they are taking, writing them to the console as they happen, along with benchmarks describing how long each step took.</source>
          <target state="translated">기본적으로 마이그레이션은 수행중인 조치를 설명하고 발생하는대로 콘솔에 작성하며 각 단계에 소요 된 시간을 설명하는 벤치 마크와 함께합니다.</target>
        </trans-unit>
        <trans-unit id="b5db4c2914e33c41d414c6a67805390aaa6216c3" translate="yes" xml:space="preserve">
          <source>By default, only instances of &lt;a href=&quot;hash&quot;&gt;Hash&lt;/a&gt; itself are extractable. Subclasses of &lt;a href=&quot;hash&quot;&gt;Hash&lt;/a&gt; may implement this method and return true to declare themselves as extractable. If a &lt;a href=&quot;hash&quot;&gt;Hash&lt;/a&gt; is extractable, &lt;a href=&quot;array#method-i-extract_options-21&quot;&gt;Array#extract_options!&lt;/a&gt; pops it from the &lt;a href=&quot;array&quot;&gt;Array&lt;/a&gt; when it is the last element of the &lt;a href=&quot;array&quot;&gt;Array&lt;/a&gt;.</source>
          <target state="translated">기본적으로 &lt;a href=&quot;hash&quot;&gt;해시&lt;/a&gt; 자체의 인스턴스 만 추출 가능합니다. &lt;a href=&quot;hash&quot;&gt;Hash의&lt;/a&gt; 서브 클래스는 이 메소드를 구현하고 자체를 추출 가능으로 선언하기 위해 true를 리턴 할 수 있습니다. &lt;a href=&quot;hash&quot;&gt;해시&lt;/a&gt; 를 추출 할 수 있으면 &lt;a href=&quot;array#method-i-extract_options-21&quot;&gt;Array # extract_options! &lt;/a&gt;&lt;a href=&quot;array&quot;&gt;Array&lt;/a&gt; 의 마지막 요소 인 경우 &lt;a href=&quot;array&quot;&gt;Array&lt;/a&gt; 에서 팝합니다 .</target>
        </trans-unit>
        <trans-unit id="d198eb7fc31bdb2fdbb335d1984f9c33fbf7ed07" translate="yes" xml:space="preserve">
          <source>By default, only the ApplicationController in a Rails application inherits from &lt;code&gt;ActionController::Base&lt;/code&gt;. All other controllers inherit from ApplicationController. This gives you one class to configure things such as request forgery protection and filtering of sensitive request parameters.</source>
          <target state="translated">기본적으로 Rails 애플리케이션의 ApplicationController만이 &lt;code&gt;ActionController::Base&lt;/code&gt; 에서 상속받습니다 . 다른 모든 컨트롤러는 ApplicationController에서 상속됩니다. 이를 통해 요청 위조 방지 및 중요한 요청 매개 변수 필터링과 같은 항목을 구성 할 수있는 하나의 클래스가 제공됩니다.</target>
        </trans-unit>
        <trans-unit id="86bb53fd89c3fc069086208470cad95eac49b68c" translate="yes" xml:space="preserve">
          <source>By default, records are fetched in ascending order of the primary key. The &lt;code&gt;:start&lt;/code&gt; option allows you to configure the first ID of the sequence whenever the lowest ID is not the one you need. This would be useful, for example, if you wanted to resume an interrupted batch process, provided you saved the last processed ID as a checkpoint.</source>
          <target state="translated">기본적으로 레코드는 기본 키의 오름차순으로 가져옵니다. &lt;code&gt;:start&lt;/code&gt; 옵션은 가장 낮은 ID는 당신이 필요로하는 것이 아니다 때마다 순서의 첫 번째 ID를 구성 할 수 있습니다. 예를 들어, 마지막으로 처리 된 ID를 검사 점으로 저장 한 경우 중단 된 배치 프로세스를 재개하려는 경우에 유용합니다.</target>
        </trans-unit>
        <trans-unit id="e16ce60273cc883089e65450bdf8d547aa8e28be" translate="yes" xml:space="preserve">
          <source>By default, running &lt;code&gt;rails test&lt;/code&gt; won't run your system tests. Make sure to run &lt;code&gt;rails test:system&lt;/code&gt; to actually run them.</source>
          <target state="translated">기본적으로 &lt;code&gt;rails test&lt;/code&gt; 실행은 시스템 테스트를 실행하지 않습니다. 실제로 &lt;code&gt;rails test:system&lt;/code&gt; 을 실행하려면 rails test : system 을 실행하십시오.</target>
        </trans-unit>
        <trans-unit id="114050fe2f645f328e15725ae7bb0ecb7aa5f877" translate="yes" xml:space="preserve">
          <source>By default, save always runs validations. If any of them fail the action is cancelled and &lt;a href=&quot;persistence#method-i-save&quot;&gt;save&lt;/a&gt; returns &lt;code&gt;false&lt;/code&gt;, and the record won't be saved. However, if you supply &lt;code&gt;validate: false&lt;/code&gt;, validations are bypassed altogether. See &lt;a href=&quot;validations&quot;&gt;ActiveRecord::Validations&lt;/a&gt; for more information.</source>
          <target state="translated">기본적으로 save는 항상 유효성 검사를 실행합니다. 이 중 하나라도 실패하면 작업이 취소되고 &lt;a href=&quot;persistence#method-i-save&quot;&gt;save&lt;/a&gt; 가 &lt;code&gt;false&lt;/code&gt; 를 반환 하고 레코드가 저장되지 않습니다. 그러나 &lt;code&gt;validate: false&lt;/code&gt; 하면 유효성 검증이 모두 무시됩니다. 자세한 내용은 &lt;a href=&quot;validations&quot;&gt;ActiveRecord :: Validations&lt;/a&gt; 를 참조하십시오.</target>
        </trans-unit>
        <trans-unit id="fcb578a472cb6b7e250feb08c2df8620ec4ff9ee" translate="yes" xml:space="preserve">
          <source>By default, such validations will run every time you call &lt;code&gt;valid?&lt;/code&gt; or save the object. But it is also possible to control when to run these custom validations by giving an &lt;code&gt;:on&lt;/code&gt; option to the &lt;code&gt;validate&lt;/code&gt; method, with either: &lt;code&gt;:create&lt;/code&gt; or &lt;code&gt;:update&lt;/code&gt;.</source>
          <target state="translated">기본적으로 이러한 유효성 검사는 &lt;code&gt;valid?&lt;/code&gt; 전화를 걸 때마다 실행 됩니까? 또는 객체를 저장하십시오. 그러나 &lt;code&gt;:create&lt;/code&gt; 또는 &lt;code&gt;:update&lt;/code&gt; 중 하나 를 사용하여 &lt;code&gt;validate&lt;/code&gt; 메소드 &lt;code&gt;:on&lt;/code&gt; 옵션을 제공하여 이러한 사용자 정의 유효성 검증을 실행할시기를 제어 할 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="f01a8aba0a28fcc401541acdb2b7b6c490f844a7" translate="yes" xml:space="preserve">
          <source>By default, system tests are run with the Selenium driver, using the Chrome browser, and a screen size of 1400x1400. The next section explains how to change the default settings.</source>
          <target state="translated">기본적으로 시스템 테스트는 Chrome 브라우저 및 화면 크기 1400x1400을 사용하여 Selenium 드라이버로 실행됩니다. 다음 섹션에서는 기본 설정을 변경하는 방법에 대해 설명합니다.</target>
        </trans-unit>
        <trans-unit id="13a3105d36fb085c46f1408d8fb5d1a92329036b" translate="yes" xml:space="preserve">
          <source>By default, the &lt;a href=&quot;mysql2adapter&quot;&gt;Mysql2Adapter&lt;/a&gt; will consider all columns of type &lt;code&gt;tinyint(1)&lt;/code&gt; as boolean. If you wish to disable this emulation you can add the following line to your application.rb file:</source>
          <target state="translated">기본적으로 &lt;a href=&quot;mysql2adapter&quot;&gt;Mysql2Adapter&lt;/a&gt; 는 &lt;code&gt;tinyint(1)&lt;/code&gt; 유형의 모든 열을 부울로 간주합니다 . 이 에뮬레이션을 비활성화하려면 application.rb 파일에 다음 줄을 추가하십시오.</target>
        </trans-unit>
        <trans-unit id="23b5d82eca2c31f1d3e2c79d85b68ec43db63d1b" translate="yes" xml:space="preserve">
          <source>By default, the &lt;code&gt;stylesheet_link_tag&lt;/code&gt; creates links with &lt;code&gt;media=&quot;screen&quot; rel=&quot;stylesheet&quot;&lt;/code&gt;. You can override any of these defaults by specifying an appropriate option (&lt;code&gt;:media&lt;/code&gt;, &lt;code&gt;:rel&lt;/code&gt;):</source>
          <target state="translated">기본적으로 &lt;code&gt;stylesheet_link_tag&lt;/code&gt; 는 &lt;code&gt;media=&quot;screen&quot; rel=&quot;stylesheet&quot;&lt;/code&gt; 링크를 만듭니다 . 적절한 옵션 ( &lt;code&gt;:media&lt;/code&gt; , &lt;code&gt;:rel&lt;/code&gt; ) 을 지정하여 이러한 기본값을 무시할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="dfc59ae651f3fde8b88ed44b95d08d2644ebb247" translate="yes" xml:space="preserve">
          <source>By default, the Action Text editor and content is styled by the Trix defaults. If you want to change these defaults, you'll want to remove the &lt;code&gt;app/assets/stylesheets/actiontext.scss&lt;/code&gt; linker and base your stylings on the &lt;a href=&quot;https://raw.githubusercontent.com/basecamp/trix/master/dist/trix.css&quot;&gt;contents of that file&lt;/a&gt;.</source>
          <target state="translated">기본적으로 작업 텍스트 편집기 및 내용은 Trix 기본값으로 스타일이 지정됩니다. 이러한 기본값을 변경하려면 &lt;code&gt;app/assets/stylesheets/actiontext.scss&lt;/code&gt; 링커 를 제거하고 &lt;a href=&quot;https://raw.githubusercontent.com/basecamp/trix/master/dist/trix.css&quot;&gt;해당 파일&lt;/a&gt; 의 내용에 스타일 을 적용하십시오 .</target>
        </trans-unit>
        <trans-unit id="a81aff0fd3bf0ce9494d54d3dc738cefd4f69d26" translate="yes" xml:space="preserve">
          <source>By default, the autoload paths of an application consist of all the subdirectories of &lt;code&gt;app&lt;/code&gt; that exist when the application boots ---except for &lt;code&gt;assets&lt;/code&gt;, &lt;code&gt;javascripts&lt;/code&gt;, &lt;code&gt;views&lt;/code&gt;,--- plus the autoload paths of engines it might depend on.</source>
          <target state="translated">기본적으로 응용 프로그램의 자동로드 경로는 모두의 서브 디렉토리로 구성 &lt;code&gt;app&lt;/code&gt; 응용 프로그램 부팅 ---를 제외하면 존재하는 &lt;code&gt;assets&lt;/code&gt; , &lt;code&gt;javascripts&lt;/code&gt; , &lt;code&gt;views&lt;/code&gt; , --- 플러스가 의존 할 수 엔진의 자동로드 경로를.</target>
        </trans-unit>
        <trans-unit id="b036d1ab8f25dd551edd0b6dd0770ed0bfc10ce0" translate="yes" xml:space="preserve">
          <source>By default, the cache store will not attempt to reconnect to Redis if the connection fails during a request. If you experience frequent disconnects you may wish to enable reconnect attempts.</source>
          <target state="translated">요청 중에 연결이 실패하면 캐시 저장소는 기본적으로 Redis에 다시 연결을 시도하지 않습니다. 연결이 자주 끊기는 경우 다시 연결 시도를 활성화 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="4f3d7be08271d638affa89bbbf6a43b2e42533fc" translate="yes" xml:space="preserve">
          <source>By default, the email will be enqueued using &lt;code&gt;ActionMailer::DeliveryJob&lt;/code&gt;. Each &lt;code&gt;ActionMailer::Base&lt;/code&gt; class can specify the job to use by setting the class variable &lt;code&gt;delivery_job&lt;/code&gt;.</source>
          <target state="translated">기본적으로 &lt;code&gt;ActionMailer::DeliveryJob&lt;/code&gt; 사용하여 이메일을 대기열에 넣습니다 . 각 &lt;code&gt;ActionMailer::Base&lt;/code&gt; 클래스는 클래스 변수 &lt;code&gt;delivery_job&lt;/code&gt; 을 설정하여 사용할 작업을 지정할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="1490d241c5b56612ffd80e62ec99cac3c0166235" translate="yes" xml:space="preserve">
          <source>By default, the engine's controllers inherit from &lt;code&gt;Blorgh::ApplicationController&lt;/code&gt;. So, after making this change they will have access to the main application's &lt;code&gt;ApplicationController&lt;/code&gt;, as though they were part of the main application.</source>
          <target state="translated">기본적으로 엔진의 컨트롤러는 &lt;code&gt;Blorgh::ApplicationController&lt;/code&gt; 에서 상속받습니다 . 따라서이 변경을 수행 한 후에는 기본 애플리케이션의 일부인 것처럼 기본 애플리케이션의 &lt;code&gt;ApplicationController&lt;/code&gt; 에 액세스 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="c48eb6439a23d2c938084f80398ea13b3f1cbaac" translate="yes" xml:space="preserve">
          <source>By default, the generated form element has a class name of &lt;code&gt;button_to&lt;/code&gt; to allow styling of the form itself and its children. This can be changed using the &lt;code&gt;:form_class&lt;/code&gt; modifier within &lt;code&gt;html_options&lt;/code&gt;. You can control the form submission and input element behavior using &lt;code&gt;html_options&lt;/code&gt;. This method accepts the &lt;code&gt;:method&lt;/code&gt; modifier described in the &lt;code&gt;link_to&lt;/code&gt; documentation. If no &lt;code&gt;:method&lt;/code&gt; modifier is given, it will default to performing a POST operation. You can also disable the button by passing &lt;code&gt;disabled: true&lt;/code&gt; in &lt;code&gt;html_options&lt;/code&gt;. If you are using RESTful routes, you can pass the &lt;code&gt;:method&lt;/code&gt; to change the HTTP verb used to submit the form.</source>
          <target state="translated">기본적으로 생성 된 양식 요소의 양식 이름은 &lt;code&gt;button_to&lt;/code&gt; 이며 양식 자체 및 해당 하위 스타일을 지정할 수 있습니다. 이것은 사용하여 변경할 수 있습니다 &lt;code&gt;:form_class&lt;/code&gt; 내 수정 &lt;code&gt;html_options&lt;/code&gt; 을 . &lt;code&gt;html_options&lt;/code&gt; 를 사용하여 양식 제출 및 입력 요소 동작을 제어 할 수 있습니다 . 이 메소드는 &lt;code&gt;link_to&lt;/code&gt; 문서에 설명 된 &lt;code&gt;:method&lt;/code&gt; 수정자를 허용합니다 . &lt;code&gt;:method&lt;/code&gt; 수정자가 제공 되지 않으면 POST 작업이 기본적으로 수행됩니다. &lt;code&gt;html_options&lt;/code&gt; 에서 &lt;code&gt;disabled: true&lt;/code&gt; 를 전달하여 버튼을 비활성화 할 수도 있습니다 . RESTful 경로를 사용하는 경우 &lt;code&gt;:method&lt;/code&gt; 를 전달할 수 있습니다 . 양식을 제출하는 데 사용되는 HTTP 동사를 변경합니다.</target>
        </trans-unit>
        <trans-unit id="c5c3dd83daf1b5c8bb51b72e89c88ca23da6a2b7" translate="yes" xml:space="preserve">
          <source>By default, the name of the join table comes from the union of the first two arguments provided to create_join_table, in alphabetical order. To customize the name of the table, provide a &lt;code&gt;:table_name&lt;/code&gt; option:</source>
          <target state="translated">기본적으로 조인 테이블의 이름은 알파벳 순서로 create_join_table에 제공된 처음 두 인수의 합집합에서 비롯됩니다. 테이블 이름을 사용자 정의하려면 &lt;code&gt;:table_name&lt;/code&gt; 옵션을 제공하십시오 .</target>
        </trans-unit>
        <trans-unit id="700a335ca370f09fccdda8f0085d2839f1f5cb8c" translate="yes" xml:space="preserve">
          <source>By default, the name of the root element is the underscored and dasherized plural of the name of the class of the first item, provided the rest of elements belong to that type (checked with &lt;code&gt;is_a?&lt;/code&gt;) and they are not hashes. In the example above that's &quot;contributors&quot;.</source>
          <target state="translated">기본적으로 루트 요소의 이름은 첫 번째 항목 클래스의 이름에 밑줄이 쳐진 복수형입니다. 나머지 요소는 해당 유형에 속하고 ( &lt;code&gt;is_a?&lt;/code&gt; 로 확인 ) 해시가 아닙니다. 위의 예에서는 &quot;기여자&quot;입니다.</target>
        </trans-unit>
        <trans-unit id="66400cdcdfde722a493445a2d8861c5bedfa5144" translate="yes" xml:space="preserve">
          <source>By default, the tempfile is created in &lt;code&gt;Dir.tmpdir&lt;/code&gt;. Pass &lt;code&gt;tmpdir:&lt;/code&gt; to create it in a different directory:</source>
          <target state="translated">기본적으로 임시 파일은 &lt;code&gt;Dir.tmpdir&lt;/code&gt; 에 작성됩니다 . 패스 &lt;code&gt;tmpdir:&lt;/code&gt; 다른 디렉토리에 생성 :</target>
        </trans-unit>
        <trans-unit id="c1df720e8481feda893ebf065ca301feae7d8bd8" translate="yes" xml:space="preserve">
          <source>By default, these preview classes live in &lt;code&gt;test/mailers/previews&lt;/code&gt;. This can be configured using the &lt;code&gt;preview_path&lt;/code&gt; option. For example, if you want to change it to &lt;code&gt;lib/mailer_previews&lt;/code&gt;, you can configure it in &lt;code&gt;config/application.rb&lt;/code&gt;:</source>
          <target state="translated">기본적으로 이러한 미리보기 클래스는 &lt;code&gt;test/mailers/previews&lt;/code&gt; 에 있습니다. 이것은 &lt;code&gt;preview_path&lt;/code&gt; 옵션을 사용하여 구성 할 수 있습니다 . 예를 들어, &lt;code&gt;lib/mailer_previews&lt;/code&gt; 로 변경하려면 &lt;code&gt;config/application.rb&lt;/code&gt; 에서 구성 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="b6a1ab98b65e63bb770806e66d96be70cb05aaf6" translate="yes" xml:space="preserve">
          <source>By default, this file contains the application's &lt;code&gt;secret_key_base&lt;/code&gt;, but it could also be used to store other credentials such as access keys for external APIs.</source>
          <target state="translated">기본적으로이 파일에는 애플리케이션의 &lt;code&gt;secret_key_base&lt;/code&gt; 가 포함 되지만 외부 API의 액세스 키와 같은 다른 신임 정보를 저장하는 데 사용될 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="b8d1df8b8ac93d6ff3bc7e29deefcb4884ef4930" translate="yes" xml:space="preserve">
          <source>By default, this will use the &lt;code&gt;gen_random_uuid()&lt;/code&gt; function from the &lt;code&gt;pgcrypto&lt;/code&gt; extension. As that extension is only available in PostgreSQL 9.4+, for earlier versions an explicit default can be set to use &lt;code&gt;uuid_generate_v4()&lt;/code&gt; from the &lt;code&gt;uuid-ossp&lt;/code&gt; extension instead:</source>
          <target state="translated">기본적으로 이것은 &lt;code&gt;pgcrypto&lt;/code&gt; 확장 의 &lt;code&gt;gen_random_uuid()&lt;/code&gt; 함수를 사용합니다 . 해당 확장은 PostgreSQL 9.4+에서만 사용할 수 있으므로 이전 버전의 경우 &lt;code&gt;uuid-ossp&lt;/code&gt; 확장 에서 &lt;code&gt;uuid_generate_v4()&lt;/code&gt; 를 대신 사용하도록 명시 적 기본값을 설정할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="273d6eb3c883bb60a19e62f608fab6886e38cfbe" translate="yes" xml:space="preserve">
          <source>By default, when you generate a channel, an associated test will be generated as well under the &lt;code&gt;test/channels&lt;/code&gt; directory. Here's an example test with a chat channel:</source>
          <target state="translated">기본적으로 채널을 생성하면 &lt;code&gt;test/channels&lt;/code&gt; 디렉토리 아래에 관련 테스트가 생성됩니다 . 채팅 채널을 사용한 테스트 예는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="cd1554b258f5a2aecf73784ca5a0c00c73b9d0f1" translate="yes" xml:space="preserve">
          <source>By default, when you generate a job, an associated test will be generated as well under the &lt;code&gt;test/jobs&lt;/code&gt; directory. Here's an example test with a billing job:</source>
          <target state="translated">기본적으로 작업을 생성하면 &lt;code&gt;test/jobs&lt;/code&gt; 디렉토리 아래에 연관된 테스트가 생성됩니다 . 청구 작업으로 테스트하는 예제는 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="b9012e51b12767ab405ee91151aab4284106d0a1" translate="yes" xml:space="preserve">
          <source>By default, when you generate new Rails application with Action Cable, a test for the base connection class (&lt;code&gt;ApplicationCable::Connection&lt;/code&gt;) is generated as well under &lt;code&gt;test/channels/application_cable&lt;/code&gt; directory.</source>
          <target state="translated">기본적으로 Action Cable을 사용하여 새 Rails 애플리케이션을 생성하면 &lt;code&gt;test/channels/application_cable&lt;/code&gt; 디렉토리에 기본 연결 클래스 ( &lt;code&gt;ApplicationCable::Connection&lt;/code&gt; )에 대한 테스트 가 생성됩니다 .</target>
        </trans-unit>
        <trans-unit id="0143d11bdfa5c90611cf827738b7aa873d344cef" translate="yes" xml:space="preserve">
          <source>By following along with this guide, you'll create a Rails project called &lt;code&gt;blog&lt;/code&gt;, a (very) simple weblog. Before you can start building the application, you need to make sure that you have Rails itself installed.</source>
          <target state="translated">이 안내서와 함께 간단한 &lt;code&gt;blog&lt;/code&gt; 인 blog 라는 Rails 프로젝트를 만들 것 입니다. 애플리케이션 빌드를 시작하기 전에 Rails 자체가 설치되어 있는지 확인해야합니다.</target>
        </trans-unit>
        <trans-unit id="270520a6a2936fb60a250a09806cd7d04dcacfa0" translate="yes" xml:space="preserve">
          <source>By having isolated routes such as this, if you wish to link to an area of an engine from within an application, you will need to use the engine's routing proxy method. Calls to normal routing methods such as &lt;code&gt;articles_path&lt;/code&gt; may end up going to undesired locations if both the application and the engine have such a helper defined.</source>
          <target state="translated">이와 같은 경로를 분리하여 응용 프로그램 내에서 엔진 영역에 연결하려면 엔진의 라우팅 프록시 방법을 사용해야합니다. 애플리케이션과 엔진 모두에 헬퍼가 정의되어 있으면 &lt;code&gt;articles_path&lt;/code&gt; 와 같은 일반 라우팅 메소드에 대한 호출로 인해 원하지 않는 위치가 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="1ac9809861dfe61aa3198ba37e6f1b489cb0e06d" translate="yes" xml:space="preserve">
          <source>By including the &lt;code&gt;:inverse_of&lt;/code&gt; option in the &lt;code&gt;has_many&lt;/code&gt; association declaration, Active Record will now recognize the bi-directional association:</source>
          <target state="translated">&lt;code&gt;has_many&lt;/code&gt; 연관 선언 에 &lt;code&gt;:inverse_of&lt;/code&gt; 옵션 을 포함 시키면 Active Record는 이제 양방향 연관을 인식합니다.</target>
        </trans-unit>
        <trans-unit id="bf0f5954725fbd86c76ebc77fc590ecf4dc14b94" translate="yes" xml:space="preserve">
          <source>By inheriting from the &lt;code&gt;Rails::Engine&lt;/code&gt; class, this gem notifies Rails that there's an engine at the specified path, and will correctly mount the engine inside the application, performing tasks such as adding the &lt;code&gt;app&lt;/code&gt; directory of the engine to the load path for models, mailers, controllers, and views.</source>
          <target state="translated">이 gem 은 &lt;code&gt;Rails::Engine&lt;/code&gt; 클래스 에서 상속 하여 지정된 경로에 엔진이 있음을 Rails에 알리고 엔진을 애플리케이션의 엔진에 올바르게 마운트하여 모델의로드 경로에 엔진 의 &lt;code&gt;app&lt;/code&gt; 디렉토리 추가와 같은 작업을 수행합니다. , 메일러, 컨트롤러 및보기</target>
        </trans-unit>
        <trans-unit id="6b2a116e887e4db06311e729e0bc3d70bea386fa" translate="yes" xml:space="preserve">
          <source>By now you've caught a glimpse of some of the assertions that are available. Assertions are the worker bees of testing. They are the ones that actually perform the checks to ensure that things are going as planned.</source>
          <target state="translated">이제 사용 가능한 어설 션 중 일부를 엿볼 수 있습니다. 주장은 작업자의 테스트 꿀벌입니다. 실제로 점검을 수행하여 계획대로 진행되는지 확인합니다.</target>
        </trans-unit>
        <trans-unit id="baf3d27e97eb611cbb61948d23726cc57a70ae96" translate="yes" xml:space="preserve">
          <source>By opting-out you optimize &lt;code&gt;$LOAD_PATH&lt;/code&gt; lookups (less directories to check), and save Bootsnap work and memory consumption, since it does not need to build an index for these directories.</source>
          <target state="translated">선택 해제하면 &lt;code&gt;$LOAD_PATH&lt;/code&gt; 조회 (검사 할 디렉토리가 적음) 를 최적화 하고 부트 스냅 작업 및 메모리 소비를 절약 할 수 있습니다. 이러한 디렉토리에 대한 색인을 작성할 필요가 없기 때문입니다.</target>
        </trans-unit>
        <trans-unit id="08b554be520c671986e55508aa34703171b8cd58" translate="yes" xml:space="preserve">
          <source>By quieting the mix-in noise, we arrive at a natural, low-ceremony way to separate bite-sized concerns.</source>
          <target state="translated">믹스 인 소음을 줄임으로써 우리는 물린 크기의 문제를 분리 할 수있는 자연스럽고 낮은 의식 방식에 도달합니다.</target>
        </trans-unit>
        <trans-unit id="03bc04356767a24bf079177a476e594ca026f752" translate="yes" xml:space="preserve">
          <source>By representing the &lt;code&gt;author&lt;/code&gt; association's object with the &lt;code&gt;User&lt;/code&gt; class, a link is established between the engine and the application. There needs to be a way of associating the records in the &lt;code&gt;blorgh_articles&lt;/code&gt; table with the records in the &lt;code&gt;users&lt;/code&gt; table. Because the association is called &lt;code&gt;author&lt;/code&gt;, there should be an &lt;code&gt;author_id&lt;/code&gt; column added to the &lt;code&gt;blorgh_articles&lt;/code&gt; table.</source>
          <target state="translated">표현으로 &lt;code&gt;author&lt;/code&gt; 와 협회의 객체를 &lt;code&gt;User&lt;/code&gt; 클래스, 링크가 엔진과 응용 프로그램 사이에 설정됩니다. &lt;code&gt;blorgh_articles&lt;/code&gt; 테이블의 레코드를 &lt;code&gt;users&lt;/code&gt; 테이블 의 레코드와 연관시키는 방법이 필요 합니다. 연계가 호출되기 때문에 &lt;code&gt;author&lt;/code&gt; ,이 생길 수 있어야 &lt;code&gt;author_id&lt;/code&gt; 받는 추가 열 &lt;code&gt;blorgh_articles&lt;/code&gt; 의 테이블.</target>
        </trans-unit>
        <trans-unit id="f5b4de4d1dea24b5a8e1668f7ca2637ea3d34895" translate="yes" xml:space="preserve">
          <source>By requesting &lt;code&gt;'/foo/bar.json'&lt;/code&gt;, your &lt;code&gt;params[:pages]&lt;/code&gt; will be equal to &lt;code&gt;'foo/bar'&lt;/code&gt; with the request format of JSON. If you want the old 3.0.x behavior back, you could supply &lt;code&gt;format: false&lt;/code&gt; like this:</source>
          <target state="translated">요청에 의해 &lt;code&gt;'/foo/bar.json'&lt;/code&gt; 를 , 당신의 &lt;code&gt;params[:pages]&lt;/code&gt; 와 동일합니다 &lt;code&gt;'foo/bar'&lt;/code&gt; JSON의 요청 형식. 이전 3.0.x 동작을 다시 원하면 다음 과 같이 &lt;code&gt;format: false&lt;/code&gt; 제공 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="a74d66e293c28ea3c03fbedbc34d4a00acee5d4a" translate="yes" xml:space="preserve">
          <source>By requiring this file, &lt;code&gt;test_helper.rb&lt;/code&gt; the default configuration to run our tests is loaded. We will include this with all the tests we write, so any methods added to this file are available to all our tests.</source>
          <target state="translated">이 파일이 필요하면 &lt;code&gt;test_helper.rb&lt;/code&gt; 테스트를 실행하기위한 기본 구성이로드됩니다. 우리가 작성한 모든 테스트에이를 포함 시키므로이 파일에 추가 된 모든 방법을 모든 테스트에서 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="fb971cc67109a58ca4971d8c6fe817c86f37825a" translate="yes" xml:space="preserve">
          <source>By running your Rails tests you can ensure your code adheres to the desired functionality even after some major code refactoring.</source>
          <target state="translated">Rails 테스트를 실행하면 주요 코드 리팩토링 후에도 코드가 원하는 기능을 준수하는지 확인할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="86d406b41de4b45d97167a5b7c1714d54bca8de4" translate="yes" xml:space="preserve">
          <source>By using &lt;code&gt;ActiveSupport::Concern&lt;/code&gt; the above module could instead be written as:</source>
          <target state="translated">&lt;code&gt;ActiveSupport::Concern&lt;/code&gt; 을 사용 하면 위 모듈을 대신 다음과 같이 작성할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="fe081363c5f5900bb3966403cff5cc265c7e77cc" translate="yes" xml:space="preserve">
          <source>By using one of these validations, you will ensure the value will NOT be &lt;code&gt;nil&lt;/code&gt; which would result in a &lt;code&gt;NULL&lt;/code&gt; value in most cases.</source>
          <target state="translated">이러한 유효성 검증 중 하나를 사용하면 대부분의 경우 &lt;code&gt;NULL&lt;/code&gt; 값을 초래 하는 값이 &lt;code&gt;nil&lt;/code&gt; 이 아닌지 확인합니다 .</target>
        </trans-unit>
        <trans-unit id="0f98d1ed5123cb2427de398074cdddf80592a5d5" translate="yes" xml:space="preserve">
          <source>By using the &lt;code&gt;after_commit&lt;/code&gt; callback we can account for this case.</source>
          <target state="translated">&lt;code&gt;after_commit&lt;/code&gt; 콜백 을 사용 하여이 경우를 설명 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="7d9b34b7252c73d97dd60be03b3ab86b04ff5d5d" translate="yes" xml:space="preserve">
          <source>By using the full URL, your links will now work in your emails.</source>
          <target state="translated">전체 URL을 사용하면 이제 링크가 이메일에서 작동합니다.</target>
        </trans-unit>
        <trans-unit id="a5738629055acf1d8891486f4875af7d513ca49f" translate="yes" xml:space="preserve">
          <source>By viewing the post, the browser finds an image tag. It tries to load the suspected image from &lt;code&gt;www.webapp.com&lt;/code&gt;. As explained before, it will also send along the cookie with the valid session ID.</source>
          <target state="translated">게시물을 보면 브라우저가 이미지 태그를 찾습니다. &lt;code&gt;www.webapp.com&lt;/code&gt; 에서 의심되는 이미지를로드하려고 시도합니다 . 앞에서 설명한 것처럼 유효한 세션 ID와 함께 쿠키를 함께 보냅니다.</target>
        </trans-unit>
        <trans-unit id="17f5804ad4199750e2017568dcba1c9c39229943" translate="yes" xml:space="preserve">
          <source>Byte range attempted to be read</source>
          <target state="translated">바이트 범위를 읽으려고했습니다</target>
        </trans-unit>
        <trans-unit id="50dd937e8d231565b5121caa2cc20cbd6f42f956" translate="yes" xml:space="preserve">
          <source>Bytea</source>
          <target state="translated">Bytea</target>
        </trans-unit>
        <trans-unit id="8e5fdab92dece79d7629d6d901687613ddc6ab5a" translate="yes" xml:space="preserve">
          <source>Bytes</source>
          <target state="translated">Bytes</target>
        </trans-unit>
        <trans-unit id="f6b6da81dc05b360fab06bfc3fc2464fc9da1dab" translate="yes" xml:space="preserve">
          <source>CACHED_PLAN_HEURISTIC</source>
          <target state="translated">CACHED_PLAN_HEURISTIC</target>
        </trans-unit>
        <trans-unit id="f6665c2627be2b969dcd410132185e0dd599f37b" translate="yes" xml:space="preserve">
          <source>CALLBACKS</source>
          <target state="translated">CALLBACKS</target>
        </trans-unit>
        <trans-unit id="8aff5ec0eef0285b65bb0c07577155d1fe4d5c29" translate="yes" xml:space="preserve">
          <source>CALLBACKS_OPTIONS</source>
          <target state="translated">CALLBACKS_OPTIONS</target>
        </trans-unit>
        <trans-unit id="181ebf8ab9eb21dbca1c3786fcc0b0a0f1d47841" translate="yes" xml:space="preserve">
          <source>CALLBACK_FILTER_TYPES</source>
          <target state="translated">CALLBACK_FILTER_TYPES</target>
        </trans-unit>
        <trans-unit id="29f7fab2e2080fba054676783db80fe3ca4907d2" translate="yes" xml:space="preserve">
          <source>CALL_COMPILABLE_REGEXP</source>
          <target state="translated">CALL_COMPILABLE_REGEXP</target>
        </trans-unit>
        <trans-unit id="c58e18057f4c6bb2b96a3da70e5a0e885500bc92" translate="yes" xml:space="preserve">
          <source>CANONICAL_ACTIONS</source>
          <target state="translated">CANONICAL_ACTIONS</target>
        </trans-unit>
        <trans-unit id="98309270c5f22edef17d751ed5749e7b245bfe30" translate="yes" xml:space="preserve">
          <source>CAPTCHAs</source>
          <target state="translated">CAPTCHAs</target>
        </trans-unit>
        <trans-unit id="a9afdd444207a53663ccdb3e250f3351c7b41795" translate="yes" xml:space="preserve">
          <source>CC addresses of the mail</source>
          <target state="translated">메일의 CC 주소</target>
        </trans-unit>
        <trans-unit id="fc4e3d3cd53388319d8062949a23653dc830fbb9" translate="yes" xml:space="preserve">
          <source>CDN stands for &lt;a href=&quot;https://en.wikipedia.org/wiki/Content_delivery_network&quot;&gt;Content Delivery Network&lt;/a&gt;, they are primarily designed to cache assets all over the world so that when a browser requests the asset, a cached copy will be geographically close to that browser. If you are serving assets directly from your Rails server in production, the best practice is to use a CDN in front of your application.</source>
          <target state="translated">CDN은 &lt;a href=&quot;https://en.wikipedia.org/wiki/Content_delivery_network&quot;&gt;Content Delivery Network의&lt;/a&gt; 약어로 , 브라우저가 자산을 요청할 때 캐시 된 사본이 해당 브라우저와 지리적으로 가깝도록 전 세계의 자산을 캐시하도록 설계되었습니다. 프로덕션 환경에서 Rails 서버에서 직접 자산을 제공하는 경우 가장 좋은 방법은 응용 프로그램 앞에서 CDN을 사용하는 것입니다.</target>
        </trans-unit>
        <trans-unit id="3437afd36f4442b9e8cd1507b7915d934b960f93" translate="yes" xml:space="preserve">
          <source>CDNs</source>
          <target state="translated">CDNs</target>
        </trans-unit>
        <trans-unit id="c7587bfed0f37d68cff25bbcb047d9ca1123c982" translate="yes" xml:space="preserve">
          <source>CGI_VARIABLES</source>
          <target state="translated">CGI_VARIABLES</target>
        </trans-unit>
        <trans-unit id="c5fe2cad4d8f219d3d223c341ee78037a40253fa" translate="yes" xml:space="preserve">
          <source>CHANNEL_IDENTIFIER</source>
          <target state="translated">CHANNEL_IDENTIFIER</target>
        </trans-unit>
        <trans-unit id="da14546bc67bd0821d615e140eecc7a9aca59d37" translate="yes" xml:space="preserve">
          <source>CLAUSE_METHODS</source>
          <target state="translated">CLAUSE_METHODS</target>
        </trans-unit>
        <trans-unit id="16ec74fc0a433fb02e0d1f99b9c32251a3f73264" translate="yes" xml:space="preserve">
          <source>CLEAR</source>
          <target state="translated">CLEAR</target>
        </trans-unit>
        <trans-unit id="cda5a66b5406a89ff0c00fef5a02877780db7ad6" translate="yes" xml:space="preserve">
          <source>COLLATE_REGEX</source>
          <target state="translated">COLLATE_REGEX</target>
        </trans-unit>
        <trans-unit id="88f7a90855a5254dd50088e2503388866f1bf65c" translate="yes" xml:space="preserve">
          <source>COMMON_YEAR_DAYS_IN_MONTH</source>
          <target state="translated">COMMON_YEAR_DAYS_IN_MONTH</target>
        </trans-unit>
        <trans-unit id="025c408a5504f0e808d096b14c696e6a19ee3cbf" translate="yes" xml:space="preserve">
          <source>CONTENT_TYPE</source>
          <target state="translated">CONTENT_TYPE</target>
        </trans-unit>
        <trans-unit id="36a20a00bc3401eee46edc84d861382007cf5ef2" translate="yes" xml:space="preserve">
          <source>COOKIES_DIGEST</source>
          <target state="translated">COOKIES_DIGEST</target>
        </trans-unit>
        <trans-unit id="af3f8f2925d0534db2f13cd455db7a0e6d6629da" translate="yes" xml:space="preserve">
          <source>COOKIES_ROTATIONS</source>
          <target state="translated">COOKIES_ROTATIONS</target>
        </trans-unit>
        <trans-unit id="937389534246662530913edbd7c28f14d9ac2b06" translate="yes" xml:space="preserve">
          <source>COOKIES_SERIALIZER</source>
          <target state="translated">COOKIES_SERIALIZER</target>
        </trans-unit>
        <trans-unit id="b3b739b0968d8cd23b4bed1ed4c8726168a30675" translate="yes" xml:space="preserve">
          <source>CRUD is an acronym for the four verbs we use to operate on data: &lt;strong&gt;C&lt;/strong&gt;reate, &lt;strong&gt;R&lt;/strong&gt;ead, &lt;strong&gt;U&lt;/strong&gt;pdate and &lt;strong&gt;D&lt;/strong&gt;elete. Active Record automatically creates methods to allow an application to read and manipulate data stored within its tables.</source>
          <target state="translated">: CRUD 우리가 데이터를 조작하는 데 사용하는 네 개의 동사의 약자입니다 &lt;strong&gt;C&lt;/strong&gt; reate, &lt;strong&gt;R&lt;/strong&gt; EAD, &lt;strong&gt;U&lt;/strong&gt; pdate 및 &lt;strong&gt;D의&lt;/strong&gt; elete. Active Record는 애플리케이션이 테이블에 저장된 데이터를 읽고 조작 할 수있는 메소드를 자동으로 작성합니다.</target>
        </trans-unit>
        <trans-unit id="20d3b6904feea6ac3f025993cad3434a70cee874" translate="yes" xml:space="preserve">
          <source>CRUD, Verbs, and Actions</source>
          <target state="translated">CRUD, 동사 및 동작</target>
        </trans-unit>
        <trans-unit id="1328e3aaaf388b4c74b39253cc6d1fd40915fcb7" translate="yes" xml:space="preserve">
          <source>CRUD: Reading and Writing Data</source>
          <target state="translated">CRUD : 데이터 읽기 및 쓰기</target>
        </trans-unit>
        <trans-unit id="e97b0dd260baac0ea1c94950b57ae5e734afec7e" translate="yes" xml:space="preserve">
          <source>CSRF Countermeasures</source>
          <target state="translated">CSRF 대책</target>
        </trans-unit>
        <trans-unit id="f44ba7b2d1e229975192b6f2bc5310840dd4ad7e" translate="yes" xml:space="preserve">
          <source>CSRF appears very rarely in CVE (Common Vulnerabilities and Exposures) - less than 0.1% in 2006 - but it really is a 'sleeping giant' [Grossman]. This is in stark contrast to the results in many security contract works - &lt;em&gt;CSRF is an important security issue&lt;/em&gt;.</source>
          <target state="translated">CSRF는 2006 년 0.1 % 미만인 CVE (Common Vulnerabilities and Exposures)에서 거의 나타나지 않지만 실제로는 '자고있는 자'입니다. 이는 많은 보안 계약 작업의 결과와 완전히 대조적 입니다. &lt;em&gt;CSRF는 중요한 보안 문제&lt;/em&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="faf3aa982f8b33be835a7607215523965fbca07c" translate="yes" xml:space="preserve">
          <source>CSRF protection from remote &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tags</source>
          <target state="translated">원격 &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; 태그 로부터 CSRF 보호</target>
        </trans-unit>
        <trans-unit id="433845392a5af61bb562a694ae8386f4e997d811" translate="yes" xml:space="preserve">
          <source>CSRF protection is turned on with the &lt;code&gt;protect_from_forgery&lt;/code&gt; method. By default &lt;code&gt;protect_from_forgery&lt;/code&gt; protects your session with &lt;code&gt;:null_session&lt;/code&gt; method, which provides an empty session during request.</source>
          <target state="translated">&lt;code&gt;protect_from_forgery&lt;/code&gt; 메소드 를 사용하여 CSRF 보호를 설정합니다 . &lt;code&gt;protect_from_forgery&lt;/code&gt; 는 기본적 으로 &lt;code&gt;:null_session&lt;/code&gt; 메소드를 사용 하여 세션을 보호합니다 .이 메소드는 요청 중에 빈 세션을 제공합니다.</target>
        </trans-unit>
        <trans-unit id="bd9c2bd62c396c8a3391e4e9f8cc38953d3f7ecc" translate="yes" xml:space="preserve">
          <source>CSS Compression</source>
          <target state="translated">CSS 압축</target>
        </trans-unit>
        <trans-unit id="60b283e590cf24258b8cdb952a9699f1d6aaddbd" translate="yes" xml:space="preserve">
          <source>CSS Injection</source>
          <target state="translated">CSS 주입</target>
        </trans-unit>
        <trans-unit id="f8f799376df785198a83a9a20380d8c2765b5149" translate="yes" xml:space="preserve">
          <source>CSS Injection is explained best by the well-known &lt;a href=&quot;https://samy.pl/myspace/tech.html&quot;&gt;MySpace Samy worm&lt;/a&gt;. This worm automatically sent a friend request to Samy (the attacker) simply by visiting his profile. Within several hours he had over 1 million friend requests, which created so much traffic that MySpace went offline. The following is a technical explanation of that worm.</source>
          <target state="translated">CSS 주입은 잘 알려진 &lt;a href=&quot;https://samy.pl/myspace/tech.html&quot;&gt;MySpace Samy 웜에&lt;/a&gt; 의해 가장 잘 설명됩니다 . 이 웜은 프로필을 방문하여 친구 요청을 Samy (공격자)에게 자동으로 보냈습니다. 몇 시간 안에 그는 100 만 명 이상의 친구 요청을 받았으며, 이로 인해 MySpace가 오프라인 상태가되었습니다. 다음은 해당 웜에 대한 기술적 설명입니다.</target>
        </trans-unit>
        <trans-unit id="500c0eea71096dca5a0df60433171c4b004efda8" translate="yes" xml:space="preserve">
          <source>CYAN</source>
          <target state="translated">CYAN</target>
        </trans-unit>
        <trans-unit id="757d01855d94c04c93ac97f98ebbbf5ceb7e8a2d" translate="yes" xml:space="preserve">
          <source>Cache Keys</source>
          <target state="translated">캐시 키</target>
        </trans-unit>
        <trans-unit id="1133721a8c022238bccc194ce97bed010598bd2e" translate="yes" xml:space="preserve">
          <source>Cache Stores</source>
          <target state="translated">캐시 저장소</target>
        </trans-unit>
        <trans-unit id="89aa889a78ebfa6b532acfd052782999b83a8b63" translate="yes" xml:space="preserve">
          <source>Cache fragments of a view if &lt;code&gt;condition&lt;/code&gt; is true</source>
          <target state="translated">&lt;code&gt;condition&lt;/code&gt; 이 참인 경우 뷰의 조각 캐시</target>
        </trans-unit>
        <trans-unit id="76456c8c8ab0971cafc1abcfcba941f75cbdafd0" translate="yes" xml:space="preserve">
          <source>Cache fragments of a view unless &lt;code&gt;condition&lt;/code&gt; is true</source>
          <target state="translated">&lt;code&gt;condition&lt;/code&gt; 이 참이 아닌 한 뷰의 캐시 조각</target>
        </trans-unit>
        <trans-unit id="9dc4b1fffb074271e7ecaa967d8d84870ff650ca" translate="yes" xml:space="preserve">
          <source>Cache fragments will also be expired when the view fragment changes (e.g., the HTML in the view changes). The string of characters at the end of the key is a template tree digest. It is a hash digest computed based on the contents of the view fragment you are caching. If you change the view fragment, the digest will change, expiring the existing file.</source>
          <target state="translated">뷰 조각이 변경되면 캐시 조각도 만료됩니다 (예 :보기의 HTML이 변경됨). 키 끝에있는 문자열은 템플릿 트리 다이제스트입니다. 캐싱중인 뷰 조각의 내용을 기반으로 계산 된 해시 다이제스트입니다. 뷰 조각을 변경하면 다이제스트가 변경되어 기존 파일이 만료됩니다.</target>
        </trans-unit>
        <trans-unit id="05df6c1e2a121a1511f6aa66fb44b40b41f7e64c" translate="yes" xml:space="preserve">
          <source>Cache or yield the block. The cache is supposed to never expire.</source>
          <target state="translated">블록을 캐시하거나 생성합니다. 캐시는 만료되지 않아야합니다.</target>
        </trans-unit>
        <trans-unit id="610602231c22f14dadda17b3e0990fd23287458d" translate="yes" xml:space="preserve">
          <source>Cache reads and writes never raise exceptions; they just return &lt;code&gt;nil&lt;/code&gt; instead, behaving as if there was nothing in the cache. To gauge whether your cache is hitting exceptions, you may provide an &lt;code&gt;error_handler&lt;/code&gt; to report to an exception gathering service. It must accept three keyword arguments: &lt;code&gt;method&lt;/code&gt;, the cache store method that was originally called; &lt;code&gt;returning&lt;/code&gt;, the value that was returned to the user, typically &lt;code&gt;nil&lt;/code&gt;; and &lt;code&gt;exception&lt;/code&gt;, the exception that was rescued.</source>
          <target state="translated">캐시 읽기 및 쓰기는 예외를 발생시키지 않습니다. 대신 캐시에 아무것도없는 것처럼 동작하는 대신 &lt;code&gt;nil&lt;/code&gt; 을 반환 합니다. 캐시가 예외에 도달하는지 여부를 측정하기 위해 &lt;code&gt;error_handler&lt;/code&gt; 를 제공 하여 예외 수집 서비스에보고 할 수 있습니다 . 세 개의 키워드 인수를 허용해야합니다. &lt;code&gt;method&lt;/code&gt; , 원래 호출 된 캐시 저장소 메소드; &lt;code&gt;returning&lt;/code&gt; , 전형적으로, 사용자에게 리턴 된 값 &lt;code&gt;nil&lt;/code&gt; ; 및 &lt;code&gt;exception&lt;/code&gt; , 구출 된 예외.</target>
        </trans-unit>
        <trans-unit id="e223cb63eecd9d3e06d86b8344b561d181e0deb6" translate="yes" xml:space="preserve">
          <source>Cache stores like Memcached will automatically delete old cache files.</source>
          <target state="translated">Memcached와 같은 캐시 저장소는 오래된 캐시 파일을 자동으로 삭제합니다.</target>
        </trans-unit>
        <trans-unit id="053035034efe23a2724666eed186ace003063ae1" translate="yes" xml:space="preserve">
          <source>Cache stores may add their own keys</source>
          <target state="translated">캐시 저장소는 자체 키를 추가 할 수 있습니다</target>
        </trans-unit>
        <trans-unit id="9b8082abdebc0e560d5ba3d6d0f5a93f549b2b3d" translate="yes" xml:space="preserve">
          <source>CacheHelper</source>
          <target state="translated">CacheHelper</target>
        </trans-unit>
        <trans-unit id="6b36a50614d9d4e6fdfff80174c8f172a4c4ad2a" translate="yes" xml:space="preserve">
          <source>Cached data larger than 1kB are compressed by default. To turn off compression, pass &lt;code&gt;compress: false&lt;/code&gt; to the initializer or to individual &lt;code&gt;fetch&lt;/code&gt; or &lt;code&gt;write&lt;/code&gt; method calls. The 1kB compression threshold is configurable with the &lt;code&gt;:compress_threshold&lt;/code&gt; option, specified in bytes.</source>
          <target state="translated">1kB보다 큰 캐시 데이터는 기본적으로 압축됩니다. 압축을 해제하려면 &lt;code&gt;compress: false&lt;/code&gt; 를 초기화 자 또는 개별 &lt;code&gt;fetch&lt;/code&gt; 또는 &lt;code&gt;write&lt;/code&gt; 메소드 호출에 전달하십시오. 1kB 압축 임계 값은 바이트 단위로 지정된 &lt;code&gt;:compress_threshold&lt;/code&gt; 옵션을 사용하여 구성 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="f0cc1be3f62be894bb2f1b3966f24ffa2a9007e0" translate="yes" xml:space="preserve">
          <source>Caches that implement &lt;a href=&quot;localcache&quot;&gt;LocalCache&lt;/a&gt; will be backed by an in-memory cache for the duration of a block. Repeated calls to the cache for the same key will hit the in-memory cache for faster access.</source>
          <target state="translated">&lt;a href=&quot;localcache&quot;&gt;LocalCache&lt;/a&gt; 를 구현 하는 캐시는 블록 기간 동안 메모리 내 캐시에 의해 백업됩니다. 동일한 키에 대해 반복적으로 캐시를 호출하면 더 빠른 액세스를 위해 메모리 내 캐시에 충돌합니다.</target>
        </trans-unit>
        <trans-unit id="127e4bbfd32e8c216318d5d051ba6bdbc8161d05" translate="yes" xml:space="preserve">
          <source>Caches the number of belonging objects on the associate class through the use of &lt;a href=&quot;../countercache/classmethods#method-i-increment_counter&quot;&gt;ActiveRecord::CounterCache::ClassMethods#increment_counter&lt;/a&gt; and &lt;a href=&quot;../countercache/classmethods#method-i-decrement_counter&quot;&gt;ActiveRecord::CounterCache::ClassMethods#decrement_counter&lt;/a&gt;. The counter cache is incremented when an object of this class is created and decremented when it's destroyed. This requires that a column named &lt;code&gt;#{table_name}_count&lt;/code&gt; (such as &lt;code&gt;comments_count&lt;/code&gt; for a belonging Comment class) is used on the associate class (such as a Post class) - that is the migration for &lt;code&gt;#{table_name}_count&lt;/code&gt; is created on the associate class (such that &lt;code&gt;Post.comments_count&lt;/code&gt; will return the count cached, see note below). You can also specify a custom counter cache column by providing a column name instead of a &lt;code&gt;true&lt;/code&gt;/&lt;code&gt;false&lt;/code&gt; value to this option (e.g., &lt;code&gt;counter_cache: :my_custom_counter&lt;/code&gt;.) Note: Specifying a counter cache will add it to that model's list of readonly attributes using &lt;code&gt;attr_readonly&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;../countercache/classmethods#method-i-increment_counter&quot;&gt;ActiveRecord :: CounterCache :: ClassMethods # increment_counter&lt;/a&gt; 및 &lt;a href=&quot;../countercache/classmethods#method-i-decrement_counter&quot;&gt;ActiveRecord :: CounterCache :: ClassMethods # decrement_counter를&lt;/a&gt; 사용하여 연관 클래스에 속하는 오브젝트 수를 캐시합니다 . 카운터 캐시는이 클래스의 오브젝트가 작성 될 때 증가하고 소멸 될 때 감소합니다. 이를 위해서는 &lt;code&gt;#{table_name}_count&lt;/code&gt; (예 : 속하는 Comment 클래스의 &lt;code&gt;comments_count&lt;/code&gt; ) 열이 Associate 클래스 (Post 클래스 등)에서 사용되어야합니다. 즉, &lt;code&gt;#{table_name}_count&lt;/code&gt; 에 대한 마이그레이션 은 동료에 생성됩니다. 클래스 (예 : &lt;code&gt;Post.comments_count&lt;/code&gt; 캐시 된 수를 반환합니다 (아래 참고 참조). 이 옵션에 &lt;code&gt;true&lt;/code&gt; / &lt;code&gt;false&lt;/code&gt; 값 대신 열 이름을 제공하여 사용자 지정 카운터 캐시 열을 지정할 수도 있습니다 (예 &lt;code&gt;counter_cache: :my_custom_counter&lt;/code&gt; . 참고 : 카운터 캐시를 지정하면 다음을 사용하여 해당 모델의 읽기 전용 특성 목록에 추가됩니다. &lt;code&gt;attr_readonly&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="60790f7c84170a8b87051d7e857118ffeb0465ee" translate="yes" xml:space="preserve">
          <source>Caching</source>
          <target state="translated">Caching</target>
        </trans-unit>
        <trans-unit id="00db52a45773e0e8751020a5ebbc1a42f0fbad67" translate="yes" xml:space="preserve">
          <source>Caching in Development</source>
          <target state="translated">개발 캐싱</target>
        </trans-unit>
        <trans-unit id="f3dd9ea94a5505a5f3239cc5aea00117873568ab" translate="yes" xml:space="preserve">
          <source>Caching is a cheap way of speeding up slow applications by keeping the result of calculations, renderings, and database calls around for subsequent requests.</source>
          <target state="translated">캐싱은 후속 요청에 대한 계산, 렌더링 및 데이터베이스 호출 결과를 유지하여 느린 응용 프로그램 속도를 높이는 저렴한 방법입니다.</target>
        </trans-unit>
        <trans-unit id="fde40cf6d2efaa12e638454e318f3351f0436438" translate="yes" xml:space="preserve">
          <source>Caching is often the most effective way to boost an application's performance. Through caching, web sites running on a single server with a single database can sustain a load of thousands of concurrent users.</source>
          <target state="translated">캐싱은 종종 응용 프로그램의 성능을 향상시키는 가장 효과적인 방법입니다. 캐싱을 통해 단일 데이터베이스가있는 단일 서버에서 실행되는 웹 사이트는 수천 명의 동시 사용자를 유지할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="4206c7dbbc17941c8d44829ec60344804a828caa" translate="yes" xml:space="preserve">
          <source>Caching means to store content generated during the request-response cycle and to reuse it when responding to similar requests.</source>
          <target state="translated">캐싱은 요청-응답주기 동안 생성 된 컨텐츠를 저장하고 유사한 요청에 응답 할 때이를 재사용하는 것을 의미합니다.</target>
        </trans-unit>
        <trans-unit id="0467f2527ad70935710248dd17ceb0a9a625c1fe" translate="yes" xml:space="preserve">
          <source>Caching stores</source>
          <target state="translated">캐싱 상점</target>
        </trans-unit>
        <trans-unit id="d51842e4068c0a2db8b483640beb34a02ebf25ee" translate="yes" xml:space="preserve">
          <source>Caching with Rails: An Overview</source>
          <target state="translated">레일을 이용한 캐싱 : 개요</target>
        </trans-unit>
        <trans-unit id="9fe812f0fae22f62c0c374f965f7bb3b85963926" translate="yes" xml:space="preserve">
          <source>Caching#cache</source>
          <target state="translated">Caching#cache</target>
        </trans-unit>
        <trans-unit id="4128fbe82f9e4fe866600565d80840ed45665924" translate="yes" xml:space="preserve">
          <source>Caching#view_cache_dependencies</source>
          <target state="translated">Caching#view_cache_dependencies</target>
        </trans-unit>
        <trans-unit id="85fde14c0912434b8f2b6d3afaf206a66f2e5865" translate="yes" xml:space="preserve">
          <source>Caching: Rails provides page, action, and fragment caching. Fragment caching is especially helpful when building up a nested JSON object.</source>
          <target state="translated">캐싱 : Rails는 페이지, 액션 및 조각 캐싱을 제공합니다. 조각 캐싱은 중첩 된 JSON 객체를 구축 할 때 특히 유용합니다.</target>
        </trans-unit>
        <trans-unit id="cedd3a35a5621523c12b11e7375bc992593ee453" translate="yes" xml:space="preserve">
          <source>Caching::Fragments</source>
          <target state="translated">Caching::Fragments</target>
        </trans-unit>
        <trans-unit id="f4ac3127a2f3e74a7713036a3aab03fe7edf416d" translate="yes" xml:space="preserve">
          <source>Caching::Fragments#combined_fragment_cache_key</source>
          <target state="translated">Caching::Fragments#combined_fragment_cache_key</target>
        </trans-unit>
        <trans-unit id="cc39982bc7d9e1fbed34c0a848dced0b11ec151b" translate="yes" xml:space="preserve">
          <source>Caching::Fragments#expire_fragment</source>
          <target state="translated">Caching::Fragments#expire_fragment</target>
        </trans-unit>
        <trans-unit id="a08c8aa90307817f86740e43777ad0de5ce45b08" translate="yes" xml:space="preserve">
          <source>Caching::Fragments#fragment_exist?</source>
          <target state="translated">Caching::Fragments#fragment_exist?</target>
        </trans-unit>
        <trans-unit id="83a7ded4d59236b808d526e00f6ae764032be84e" translate="yes" xml:space="preserve">
          <source>Caching::Fragments#read_fragment</source>
          <target state="translated">Caching::Fragments#read_fragment</target>
        </trans-unit>
        <trans-unit id="cbcf9150683bc06cb5f66edf3d036824f30fd5b5" translate="yes" xml:space="preserve">
          <source>Caching::Fragments#write_fragment</source>
          <target state="translated">Caching::Fragments#write_fragment</target>
        </trans-unit>
        <trans-unit id="f5d2063225a415734eafa894a1403a7eacb56559" translate="yes" xml:space="preserve">
          <source>Caching::Fragments::ClassMethods</source>
          <target state="translated">Caching::Fragments::ClassMethods</target>
        </trans-unit>
        <trans-unit id="70298737a32bd47430cbb9cc5a59fb09294ec105" translate="yes" xml:space="preserve">
          <source>Caching::Fragments::ClassMethods#fragment_cache_key</source>
          <target state="translated">Caching::Fragments::ClassMethods#fragment_cache_key</target>
        </trans-unit>
        <trans-unit id="82fa0f07bb6cb81e94cedbfdbb668a58015b0b40" translate="yes" xml:space="preserve">
          <source>Calculates a new &lt;a href=&quot;../time&quot;&gt;Time&lt;/a&gt; or &lt;a href=&quot;../date&quot;&gt;Date&lt;/a&gt; that is as far in the future as this &lt;a href=&quot;duration&quot;&gt;Duration&lt;/a&gt; represents.</source>
          <target state="translated">이 &lt;a href=&quot;duration&quot;&gt;기간이&lt;/a&gt; 나타내는 한 미래 의 새로운 &lt;a href=&quot;../time&quot;&gt;시간&lt;/a&gt; 또는 &lt;a href=&quot;../date&quot;&gt;날짜&lt;/a&gt; 를 계산합니다 .</target>
        </trans-unit>
        <trans-unit id="e55ea553372f9ab5e9bd9e9acadef11271d09b34" translate="yes" xml:space="preserve">
          <source>Calculates a new &lt;a href=&quot;../time&quot;&gt;Time&lt;/a&gt; or &lt;a href=&quot;../date&quot;&gt;Date&lt;/a&gt; that is as far in the past as this &lt;a href=&quot;duration&quot;&gt;Duration&lt;/a&gt; represents.</source>
          <target state="translated">이 &lt;a href=&quot;duration&quot;&gt;기간이&lt;/a&gt; 나타내는 한 과거 의 새로운 &lt;a href=&quot;../time&quot;&gt;시간&lt;/a&gt; 또는 &lt;a href=&quot;../date&quot;&gt;날짜&lt;/a&gt; 를 계산합니다 .</target>
        </trans-unit>
        <trans-unit id="017aba8c550f8d3205ad83e90624ec48881ca2ae" translate="yes" xml:space="preserve">
          <source>Calculates a sum from the elements.</source>
          <target state="translated">요소에서 합계를 계산합니다.</target>
        </trans-unit>
        <trans-unit id="3c75ade474b66716d6ca47d093e3a180dc4dc0ed" translate="yes" xml:space="preserve">
          <source>Calculates the average value on a given column. Returns &lt;code&gt;nil&lt;/code&gt; if there's no row. See &lt;a href=&quot;calculations#method-i-calculate&quot;&gt;calculate&lt;/a&gt; for examples with options.</source>
          <target state="translated">주어진 열의 평균값을 계산합니다. 행이 없으면 &lt;code&gt;nil&lt;/code&gt; 을 반환 합니다. 옵션이있는 예제는 &lt;a href=&quot;calculations#method-i-calculate&quot;&gt;계산&lt;/a&gt; 을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="a1faf38dff1e8dfa1e39a55ca6cb98b3718929da" translate="yes" xml:space="preserve">
          <source>Calculates the maximum value on a given column. The value is returned with the same data type of the column, or &lt;code&gt;nil&lt;/code&gt; if there's no row. See &lt;a href=&quot;calculations#method-i-calculate&quot;&gt;calculate&lt;/a&gt; for examples with options.</source>
          <target state="translated">주어진 열의 최대 값을 계산합니다. 열의 동일한 데이터 유형으로 값이 리턴되거나 행이 없으면 &lt;code&gt;nil&lt;/code&gt; 이 리턴됩니다 . 옵션이있는 예제는 &lt;a href=&quot;calculations#method-i-calculate&quot;&gt;계산&lt;/a&gt; 을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="a492c2502713a4f03730718b2509d9e756457e6a" translate="yes" xml:space="preserve">
          <source>Calculates the minimum value on a given column. The value is returned with the same data type of the column, or &lt;code&gt;nil&lt;/code&gt; if there's no row. See &lt;a href=&quot;calculations#method-i-calculate&quot;&gt;calculate&lt;/a&gt; for examples with options.</source>
          <target state="translated">주어진 열의 최소값을 계산합니다. 열의 동일한 데이터 유형으로 값이 리턴되거나 행이 없으면 &lt;code&gt;nil&lt;/code&gt; 이 리턴됩니다 . 옵션이있는 예제는 &lt;a href=&quot;calculations#method-i-calculate&quot;&gt;계산&lt;/a&gt; 을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="8f116cc8acaab61ae663d0b33a0f56b0da9727fc" translate="yes" xml:space="preserve">
          <source>Calculates the sum of values on a given column. The value is returned with the same data type of the column, &lt;code&gt;0&lt;/code&gt; if there's no row. See &lt;a href=&quot;calculations#method-i-calculate&quot;&gt;calculate&lt;/a&gt; for examples with options.</source>
          <target state="translated">주어진 열에서 값의 합계를 계산합니다. 열의 동일한 데이터 유형으로 값이 리턴되고 행이 없으면 &lt;code&gt;0&lt;/code&gt; 이 리턴됩니다 . 옵션이있는 예제는 &lt;a href=&quot;calculations#method-i-calculate&quot;&gt;계산&lt;/a&gt; 을 참조하십시오 .</target>
        </trans-unit>
        <trans-unit id="05d27dcc239bf9ea22989ad95d110b65fd4d9edb" translate="yes" xml:space="preserve">
          <source>Calculations</source>
          <target state="translated">Calculations</target>
        </trans-unit>
        <trans-unit id="712f1edd4d3e086a636814e1fcd9fb3a91307dfc" translate="yes" xml:space="preserve">
          <source>Calculations#after?</source>
          <target state="translated">Calculations#after?</target>
        </trans-unit>
        <trans-unit id="ee656666ff89dce92dbb1bfa41fbac15dbb913f4" translate="yes" xml:space="preserve">
          <source>Calculations#all_day</source>
          <target state="translated">Calculations#all_day</target>
        </trans-unit>
        <trans-unit id="66476ae460b6538916d5ff950087908ab1054347" translate="yes" xml:space="preserve">
          <source>Calculations#all_month</source>
          <target state="translated">Calculations#all_month</target>
        </trans-unit>
        <trans-unit id="5613a2be82a6e874953ab68da7242993a1d7a7b2" translate="yes" xml:space="preserve">
          <source>Calculations#all_quarter</source>
          <target state="translated">Calculations#all_quarter</target>
        </trans-unit>
        <trans-unit id="bc037c45f52a004b063a946c53d624fb3a98e105" translate="yes" xml:space="preserve">
          <source>Calculations#all_week</source>
          <target state="translated">Calculations#all_week</target>
        </trans-unit>
        <trans-unit id="2be2098e91f164bf6e32109d72eea337d4385ef9" translate="yes" xml:space="preserve">
          <source>Calculations#all_year</source>
          <target state="translated">Calculations#all_year</target>
        </trans-unit>
        <trans-unit id="ea07a94719162f2fff2bc16c16480a2984b1ef89" translate="yes" xml:space="preserve">
          <source>Calculations#at_beginning_of_month</source>
          <target state="translated">Calculations#at_beginning_of_month</target>
        </trans-unit>
        <trans-unit id="81609eecfc256ec58b1474caef9e31019c37ac31" translate="yes" xml:space="preserve">
          <source>Calculations#at_beginning_of_quarter</source>
          <target state="translated">Calculations#at_beginning_of_quarter</target>
        </trans-unit>
        <trans-unit id="a32e9ad1b84a334a149ab1fd206593d11b2befa1" translate="yes" xml:space="preserve">
          <source>Calculations#at_beginning_of_week</source>
          <target state="translated">Calculations#at_beginning_of_week</target>
        </trans-unit>
        <trans-unit id="5029176ec7cbbf6911f31b7081713d2587816e2d" translate="yes" xml:space="preserve">
          <source>Calculations#at_beginning_of_year</source>
          <target state="translated">Calculations#at_beginning_of_year</target>
        </trans-unit>
        <trans-unit id="aac24ee3d4cb347217dbc1d2acac88b3b15cce50" translate="yes" xml:space="preserve">
          <source>Calculations#at_end_of_month</source>
          <target state="translated">Calculations#at_end_of_month</target>
        </trans-unit>
        <trans-unit id="47866a0099a9ea55358146de68c57fbe74451a1f" translate="yes" xml:space="preserve">
          <source>Calculations#at_end_of_quarter</source>
          <target state="translated">Calculations#at_end_of_quarter</target>
        </trans-unit>
        <trans-unit id="573b4d90cae89317e8efb2c720f9c8090ab6b0ec" translate="yes" xml:space="preserve">
          <source>Calculations#at_end_of_week</source>
          <target state="translated">Calculations#at_end_of_week</target>
        </trans-unit>
        <trans-unit id="ebb159dad102bc5c3b7f56c1a83946371f14aaa8" translate="yes" xml:space="preserve">
          <source>Calculations#at_end_of_year</source>
          <target state="translated">Calculations#at_end_of_year</target>
        </trans-unit>
        <trans-unit id="51924d9b420c94307c9ed7e6192705e71ddf6e6d" translate="yes" xml:space="preserve">
          <source>Calculations#before?</source>
          <target state="translated">Calculations#before?</target>
        </trans-unit>
        <trans-unit id="ba848ec2ee482c1021bf8f6dd0448ecdfc062ebc" translate="yes" xml:space="preserve">
          <source>Calculations#beginning_of_month</source>
          <target state="translated">Calculations#beginning_of_month</target>
        </trans-unit>
        <trans-unit id="89ed20a135df48cdd190acff34a2092d70b0e85a" translate="yes" xml:space="preserve">
          <source>Calculations#beginning_of_quarter</source>
          <target state="translated">Calculations#beginning_of_quarter</target>
        </trans-unit>
        <trans-unit id="632bb8860bdcc49b6513110b6560bee1c5c13273" translate="yes" xml:space="preserve">
          <source>Calculations#beginning_of_week</source>
          <target state="translated">Calculations#beginning_of_week</target>
        </trans-unit>
        <trans-unit id="255a419a38c5a29061506fd8e8dd0f6a0ac0fb94" translate="yes" xml:space="preserve">
          <source>Calculations#beginning_of_year</source>
          <target state="translated">Calculations#beginning_of_year</target>
        </trans-unit>
        <trans-unit id="b6848faa0e3041a5b700a9900f0d5d082a334c9c" translate="yes" xml:space="preserve">
          <source>Calculations#days_ago</source>
          <target state="translated">Calculations#days_ago</target>
        </trans-unit>
        <trans-unit id="8ad4652680ffb71d3817ed7ae3d712fb94f97891" translate="yes" xml:space="preserve">
          <source>Calculations#days_since</source>
          <target state="translated">Calculations#days_since</target>
        </trans-unit>
        <trans-unit id="c1cfe3a338686fcd2b8c35978821a14c9eee459f" translate="yes" xml:space="preserve">
          <source>Calculations#days_to_week_start</source>
          <target state="translated">Calculations#days_to_week_start</target>
        </trans-unit>
        <trans-unit id="86641deda46f9f19a414e4a23aba428e064e1b4d" translate="yes" xml:space="preserve">
          <source>Calculations#end_of_month</source>
          <target state="translated">Calculations#end_of_month</target>
        </trans-unit>
        <trans-unit id="81f818eed1a589ad5082090167954ba4fc0a2eb9" translate="yes" xml:space="preserve">
          <source>Calculations#end_of_quarter</source>
          <target state="translated">Calculations#end_of_quarter</target>
        </trans-unit>
        <trans-unit id="d4a805ea8fa8334c1d706f03e36393a454627af6" translate="yes" xml:space="preserve">
          <source>Calculations#end_of_week</source>
          <target state="translated">Calculations#end_of_week</target>
        </trans-unit>
        <trans-unit id="4e9249dc8e5d9c67a09ee96842442b354660f75c" translate="yes" xml:space="preserve">
          <source>Calculations#end_of_year</source>
          <target state="translated">Calculations#end_of_year</target>
        </trans-unit>
        <trans-unit id="bf62082a3109bcc8c2ea7e094df15d14c66293af" translate="yes" xml:space="preserve">
          <source>Calculations#future?</source>
          <target state="translated">Calculations#future?</target>
        </trans-unit>
        <trans-unit id="51b1871bdb0251cd26e0fc6a1874e57d9aaf6baa" translate="yes" xml:space="preserve">
          <source>Calculations#last_month</source>
          <target state="translated">Calculations#last_month</target>
        </trans-unit>
        <trans-unit id="4284818f6779f29828f8ff4efa731d17573e71fe" translate="yes" xml:space="preserve">
          <source>Calculations#last_quarter</source>
          <target state="translated">Calculations#last_quarter</target>
        </trans-unit>
        <trans-unit id="7a1c4fc54c643247fdf44af7d78eeb4a171a02f6" translate="yes" xml:space="preserve">
          <source>Calculations#last_week</source>
          <target state="translated">Calculations#last_week</target>
        </trans-unit>
        <trans-unit id="170ab395b55a6ca9f3ee430332626b7155adfba9" translate="yes" xml:space="preserve">
          <source>Calculations#last_weekday</source>
          <target state="translated">Calculations#last_weekday</target>
        </trans-unit>
        <trans-unit id="a5ef4c99b016057c4b4c01c0e36bd7a21759e5f8" translate="yes" xml:space="preserve">
          <source>Calculations#last_year</source>
          <target state="translated">Calculations#last_year</target>
        </trans-unit>
        <trans-unit id="7a53e252aa09bb06b6dd1ed226699fa0b33c6df1" translate="yes" xml:space="preserve">
          <source>Calculations#monday</source>
          <target state="translated">Calculations#monday</target>
        </trans-unit>
        <trans-unit id="837dfa1360d97bd4773a5b4f02ac596e1dc0a97c" translate="yes" xml:space="preserve">
          <source>Calculations#months_ago</source>
          <target state="translated">Calculations#months_ago</target>
        </trans-unit>
        <trans-unit id="2f8b6cd484f0ab48a74389c1534b85ac9c687fdf" translate="yes" xml:space="preserve">
          <source>Calculations#months_since</source>
          <target state="translated">Calculations#months_since</target>
        </trans-unit>
        <trans-unit id="59f62cf363428bcb8ab5cfa94da01789346bce80" translate="yes" xml:space="preserve">
          <source>Calculations#next_occurring</source>
          <target state="translated">Calculations#next_occurring</target>
        </trans-unit>
        <trans-unit id="1662a597c728f112883e88fb3fc031266b36e54c" translate="yes" xml:space="preserve">
          <source>Calculations#next_quarter</source>
          <target state="translated">Calculations#next_quarter</target>
        </trans-unit>
        <trans-unit id="382bcc28e652fe2e65a6cc9fe1d6b745862b2e2a" translate="yes" xml:space="preserve">
          <source>Calculations#next_week</source>
          <target state="translated">Calculations#next_week</target>
        </trans-unit>
        <trans-unit id="2b9017fa289cf8a49142431f6972fd20589a171a" translate="yes" xml:space="preserve">
          <source>Calculations#next_weekday</source>
          <target state="translated">Calculations#next_weekday</target>
        </trans-unit>
        <trans-unit id="2fd008f37c2bc52ec5917fcd6822097b6ac65318" translate="yes" xml:space="preserve">
          <source>Calculations#on_weekday?</source>
          <target state="translated">Calculations#on_weekday?</target>
        </trans-unit>
        <trans-unit id="1569feb3799aa1d91d3e11447502ee32885459eb" translate="yes" xml:space="preserve">
          <source>Calculations#on_weekend?</source>
          <target state="translated">Calculations#on_weekend?</target>
        </trans-unit>
        <trans-unit id="78efab25dc241bdb276cd35d7e1809b2a560077e" translate="yes" xml:space="preserve">
          <source>Calculations#past?</source>
          <target state="translated">Calculations#past?</target>
        </trans-unit>
        <trans-unit id="36f5fd301a881c16ebe0ed775e4c30bf6da8a811" translate="yes" xml:space="preserve">
          <source>Calculations#prev_occurring</source>
          <target state="translated">Calculations#prev_occurring</target>
        </trans-unit>
        <trans-unit id="fab619249fdcd70e13a1a0e6484e332fd9bf37e1" translate="yes" xml:space="preserve">
          <source>Calculations#prev_quarter</source>
          <target state="translated">Calculations#prev_quarter</target>
        </trans-unit>
        <trans-unit id="d3cd7c6fd565498feda0269dc4ac3306bc1e0f14" translate="yes" xml:space="preserve">
          <source>Calculations#prev_week</source>
          <target state="translated">Calculations#prev_week</target>
        </trans-unit>
        <trans-unit id="c95e506bb30dde76dfb450b6af6da024ae90f568" translate="yes" xml:space="preserve">
          <source>Calculations#prev_weekday</source>
          <target state="translated">Calculations#prev_weekday</target>
        </trans-unit>
        <trans-unit id="f848ce005413b9a16f6321e91ae035ef52292713" translate="yes" xml:space="preserve">
          <source>Calculations#sunday</source>
          <target state="translated">Calculations#sunday</target>
        </trans-unit>
        <trans-unit id="9693a89ec821b644262e18dba657aae498ba5df9" translate="yes" xml:space="preserve">
          <source>Calculations#today?</source>
          <target state="translated">Calculations#today?</target>
        </trans-unit>
        <trans-unit id="c4a007b232f03f4850e8bfdf72c321c3f9fff698" translate="yes" xml:space="preserve">
          <source>Calculations#tomorrow</source>
          <target state="translated">Calculations#tomorrow</target>
        </trans-unit>
        <trans-unit id="3c59d4ab12c2d429e61d75f4355fbec4db170fc6" translate="yes" xml:space="preserve">
          <source>Calculations#weeks_ago</source>
          <target state="translated">Calculations#weeks_ago</target>
        </trans-unit>
        <trans-unit id="91290bfd806257dda9f8408eef1dec8415a57931" translate="yes" xml:space="preserve">
          <source>Calculations#weeks_since</source>
          <target state="translated">Calculations#weeks_since</target>
        </trans-unit>
        <trans-unit id="f1a6820a9121d3b6576979018f07de60d84f85a3" translate="yes" xml:space="preserve">
          <source>Calculations#years_ago</source>
          <target state="translated">Calculations#years_ago</target>
        </trans-unit>
        <trans-unit id="4b6aee5ce80346e88beeb39735a03280eea7551b" translate="yes" xml:space="preserve">
          <source>Calculations#years_since</source>
          <target state="translated">Calculations#years_since</target>
        </trans-unit>
        <trans-unit id="059acf72e46a42902bad8abe3a46ac25f7939f6f" translate="yes" xml:space="preserve">
          <source>Calculations#yesterday</source>
          <target state="translated">Calculations#yesterday</target>
        </trans-unit>
        <trans-unit id="7eb8dc48ea15a5135a9f0fbecfc58efcf0143b1e" translate="yes" xml:space="preserve">
          <source>Call &lt;code&gt;[attr_name]_will_change!&lt;/code&gt; before each change to the tracked attribute.</source>
          <target state="translated">&lt;code&gt;[attr_name]_will_change!&lt;/code&gt; 전화 하세요! 추적 된 속성이 변경 될 때마다</target>
        </trans-unit>
        <trans-unit id="02efb434f37aa84f67e8f054dc21445cb069b2fa" translate="yes" xml:space="preserve">
          <source>Call &lt;code&gt;avatar.attach&lt;/code&gt; to attach an avatar to an existing user:</source>
          <target state="translated">&lt;code&gt;avatar.attach&lt;/code&gt; 를 호출 하여 기존 사용자에게 아바타를 첨부하십시오.</target>
        </trans-unit>
        <trans-unit id="f37bd1452e4ff97ea76bd72ad2d37249a449999b" translate="yes" xml:space="preserve">
          <source>Call &lt;code&gt;avatar.attached?&lt;/code&gt; to determine whether a particular user has an avatar:</source>
          <target state="translated">&lt;code&gt;avatar.attached?&lt;/code&gt; 에게 전화 하십시오. 특정 사용자에게 아바타가 있는지 확인하려면 :</target>
        </trans-unit>
        <trans-unit id="73626324999442287dcb4362e55d94e5a2dee375" translate="yes" xml:space="preserve">
          <source>Call &lt;code&gt;changes_applied&lt;/code&gt; after the changes are persisted.</source>
          <target state="translated">변경 사항이 지속 된 후 &lt;code&gt;changes_applied&lt;/code&gt; 를 호출 하십시오 .</target>
        </trans-unit>
        <trans-unit id="245b6f0da039ce0f965e8bbf3b87bed0db659049" translate="yes" xml:space="preserve">
          <source>Call &lt;code&gt;clear_changes_information&lt;/code&gt; when you want to reset the changes information.</source>
          <target state="translated">변경 정보를 재설정하려면 &lt;code&gt;clear_changes_information&lt;/code&gt; 을 호출 하십시오.</target>
        </trans-unit>
        <trans-unit id="44ff14d8171a16edf1db7f69347abff9d1d1a9c7" translate="yes" xml:space="preserve">
          <source>Call &lt;code&gt;define_attribute_methods&lt;/code&gt; after the other methods are called.</source>
          <target state="translated">전화 &lt;code&gt;define_attribute_methods&lt;/code&gt; 다른 방법 후 호출된다.</target>
        </trans-unit>
        <trans-unit id="d37c40372e533513cd47276b62e897c38eb505bd" translate="yes" xml:space="preserve">
          <source>Call &lt;code&gt;define_attribute_methods&lt;/code&gt; passing each method you want to track.</source>
          <target state="translated">추적하려는 각 메소드를 전달하여 &lt;code&gt;define_attribute_methods&lt;/code&gt; 를 호출 하십시오 .</target>
        </trans-unit>
        <trans-unit id="bec6345f8f31ecf3e2b2eaf23af0833bdd193458" translate="yes" xml:space="preserve">
          <source>Call &lt;code&gt;head&lt;/code&gt; to create a response consisting solely of HTTP headers to send back to the browser</source>
          <target state="translated">브라우저로 다시 보낼 HTTP 헤더만으로 구성된 응답을 작성하기위한 콜 &lt;code&gt;head&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="518f4e43fa1199eef2ee4176747ecbcd026b85fc" translate="yes" xml:space="preserve">
          <source>Call &lt;code&gt;images.attach&lt;/code&gt; to add new images to an existing message:</source>
          <target state="translated">&lt;code&gt;images.attach&lt;/code&gt; 를 호출 하여 기존 메시지에 새 이미지를 추가하십시오.</target>
        </trans-unit>
        <trans-unit id="afa05343b90bb98bc8dff47c081c8775a92e327c" translate="yes" xml:space="preserve">
          <source>Call &lt;code&gt;images.attached?&lt;/code&gt; to determine whether a particular message has any images:</source>
          <target state="translated">&lt;code&gt;images.attached?&lt;/code&gt; 전화 ? 특정 메시지에 이미지가 있는지 확인하려면 :</target>
        </trans-unit>
        <trans-unit id="608d20f1934b32ca2ad7b709dd7af3b8770c4b41" translate="yes" xml:space="preserve">
          <source>Call &lt;code&gt;lock('some locking clause')&lt;/code&gt; to use a database-specific locking clause of your own such as 'LOCK IN SHARE MODE' or 'FOR UPDATE NOWAIT'. Example:</source>
          <target state="translated">&lt;code&gt;lock('some locking clause')&lt;/code&gt; 을 호출 하여 'LOCK IN SHARE MODE'또는 'FOR UPDATE NOWAIT'과 같은 사용자 고유의 데이터베이스 별 잠금 절을 사용하십시오. 예:</target>
        </trans-unit>
        <trans-unit id="10651352ff56d70748718dbcb7b40bda9259d958" translate="yes" xml:space="preserve">
          <source>Call &lt;code&gt;redirect_to&lt;/code&gt; to send an HTTP redirect status code to the browser</source>
          <target state="translated">HTTP 리디렉션 상태 코드를 브라우저로 보내려면 &lt;code&gt;redirect_to&lt;/code&gt; 를 호출 하십시오.</target>
        </trans-unit>
        <trans-unit id="4385a73a2a00f1387485f72d262e0a7eb18677bb" translate="yes" xml:space="preserve">
          <source>Call &lt;code&gt;render&lt;/code&gt; to create a full response to send back to the browser</source>
          <target state="translated">&lt;code&gt;render&lt;/code&gt; 을 호출 하여 브라우저로 다시 보낼 전체 응답을 만듭니다.</target>
        </trans-unit>
        <trans-unit id="05f094031ef80b8bd3ff1a65d4dcb97fdf1bdd00" translate="yes" xml:space="preserve">
          <source>Call &lt;code&gt;restore_attributes&lt;/code&gt; when you want to restore previous data.</source>
          <target state="translated">이전 데이터를 복원하려는 경우 &lt;code&gt;restore_attributes&lt;/code&gt; 를 호출하십시오 .</target>
        </trans-unit>
        <trans-unit id="eb396a5f6c42b4b686b4ce858bf6e64854d448fa" translate="yes" xml:space="preserve">
          <source>Call each of its methods you want to add, such as &lt;code&gt;attribute_method_suffix&lt;/code&gt; or &lt;code&gt;attribute_method_prefix&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;attribute_method_suffix&lt;/code&gt; 또는 &lt;code&gt;attribute_method_prefix&lt;/code&gt; 와 같이 추가하려는 각 메소드를 호출하십시오 .</target>
        </trans-unit>
        <trans-unit id="66ea9b9d41a33137d518236735dc7786623c3ba7" translate="yes" xml:space="preserve">
          <source>Call the scope as if it were a class method:</source>
          <target state="translated">클래스 메소드 인 것처럼 스코프를 호출하십시오.</target>
        </trans-unit>
        <trans-unit id="3c4e19c4819977125cbde26f7269421dc91ae6ab" translate="yes" xml:space="preserve">
          <source>Callback Classes</source>
          <target state="translated">콜백 클래스</target>
        </trans-unit>
        <trans-unit id="d01c8ec8571f8c8e1934947cc52b79acca946301" translate="yes" xml:space="preserve">
          <source>Callback Registration</source>
          <target state="translated">콜백 등록</target>
        </trans-unit>
        <trans-unit id="9fdc2cfe374fa5bde1e4e458854875e1709add1c" translate="yes" xml:space="preserve">
          <source>Callbacks</source>
          <target state="translated">Callbacks</target>
        </trans-unit>
        <trans-unit id="3877a81afc12a91326b9495691f1f7c0cb45ef55" translate="yes" xml:space="preserve">
          <source>Callbacks Overview</source>
          <target state="translated">콜백 개요</target>
        </trans-unit>
        <trans-unit id="8ff201a31487f87fb5589145b8451e4b17be1a74" translate="yes" xml:space="preserve">
          <source>Callbacks allow you to trigger logic before or after an alteration of an object's state.</source>
          <target state="translated">콜백을 사용하면 객체 상태 변경 전후에 로직을 트리거 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c2f2882b51c1143d0961cbdae847011f4d3d4d32" translate="yes" xml:space="preserve">
          <source>Callbacks are hooks into the life cycle of an Active Record object that allow you to trigger logic before or after an alteration of the object state. This can be used to make sure that associated and dependent objects are deleted when &lt;a href=&quot;persistence#method-i-destroy&quot;&gt;ActiveRecord::Base#destroy&lt;/a&gt; is called (by overwriting &lt;code&gt;before_destroy&lt;/code&gt;) or to massage attributes before they're validated (by overwriting &lt;code&gt;before_validation&lt;/code&gt;). As an example of the callbacks initiated, consider the &lt;a href=&quot;persistence#method-i-save&quot;&gt;ActiveRecord::Base#save&lt;/a&gt; call for a new record:</source>
          <target state="translated">콜백은 객체 상태 변경 전후에 로직을 트리거 할 수있는 활성 레코드 객체의 수명주기에 연결됩니다. 이것은 확실 할 때 관련 및 종속 객체가 삭제되어 있는지 확인하는 데 사용할 수있는 &lt;a href=&quot;persistence#method-i-destroy&quot;&gt;액티브 :: 자료 # 파괴&lt;/a&gt; (덮어 쓰기에 의해 불려 &lt;code&gt;before_destroy&lt;/code&gt; 을 그들이 검증되기 전에 (덮어 쓰기) 또는 속성을 마사지 &lt;code&gt;before_validation&lt;/code&gt; ). 시작된 콜백의 예로 새 레코드에 대한 &lt;a href=&quot;persistence#method-i-save&quot;&gt;ActiveRecord :: Base # save&lt;/a&gt; 호출을 고려하십시오 .</target>
        </trans-unit>
        <trans-unit id="c43a336d866a31adc5194e99b64223f3ba8905cc" translate="yes" xml:space="preserve">
          <source>Callbacks are invoked.</source>
          <target state="translated">콜백이 호출됩니다.</target>
        </trans-unit>
        <trans-unit id="596bacb89730a272245b6fc80dbbe6e0d98723f5" translate="yes" xml:space="preserve">
          <source>Callbacks are methods that get called at certain moments of an object's life cycle. With callbacks it is possible to write code that will run whenever an Active Record object is created, saved, updated, deleted, validated, or loaded from the database.</source>
          <target state="translated">콜백은 객체 수명주기의 특정 순간에 호출되는 메소드입니다. 콜백을 사용하면 데이터베이스에서 Active Record 객체를 생성, 저장, 업데이트, 삭제, 검증 또는로드 할 때마다 실행될 코드를 작성할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="33a6c80cc27c3baf41d39bb92107a0c90ec80c2b" translate="yes" xml:space="preserve">
          <source>Callbacks are skipped.</source>
          <target state="translated">콜백을 건너 뜁니다.</target>
        </trans-unit>
        <trans-unit id="ee4610a86273e3a883389497b4f3aaa59648e99b" translate="yes" xml:space="preserve">
          <source>Callbacks can also be registered to only fire on certain life cycle events:</source>
          <target state="translated">콜백은 특정 수명주기 이벤트에서만 발생하도록 등록 할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="818f242607d4e5fbb7f0483208686a61231bb420" translate="yes" xml:space="preserve">
          <source>Callbacks in Action Mailer are implemented using &lt;code&gt;AbstractController::Callbacks&lt;/code&gt;, so you can define and configure callbacks in the same manner that you would use callbacks in classes that inherit from &lt;code&gt;ActionController::Base&lt;/code&gt;.</source>
          <target state="translated">Action Mailer의 콜백은 &lt;code&gt;AbstractController::Callbacks&lt;/code&gt; 사용하여 구현 되므로 &lt;code&gt;ActionController::Base&lt;/code&gt; 에서 상속되는 클래스에서 콜백을 사용하는 것과 같은 방식으로 콜백을 정의하고 구성 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="b26cb4b40cd2678785076057e529d41d937d1ae4" translate="yes" xml:space="preserve">
          <source>Callbacks work through model relationships, and can even be defined by them. Suppose an example where a user has many articles. A user's articles should be destroyed if the user is destroyed. Let's add an &lt;code&gt;after_destroy&lt;/code&gt; callback to the &lt;code&gt;User&lt;/code&gt; model by way of its relationship to the &lt;code&gt;Article&lt;/code&gt; model:</source>
          <target state="translated">콜백은 모델 관계를 통해 작동하며이를 정의 할 수도 있습니다. 사용자에게 많은 기사가있는 예를 가정하십시오. 사용자가 파괴되면 사용자의 기사를 폐기해야합니다. &lt;code&gt;Article&lt;/code&gt; 모델 과의 관계를 통해 &lt;code&gt;User&lt;/code&gt; 모델에 &lt;code&gt;after_destroy&lt;/code&gt; 콜백을 추가해 보겠습니다 .</target>
        </trans-unit>
        <trans-unit id="8581601e0e500c32bfafca61e54fb8ff27f9161d" translate="yes" xml:space="preserve">
          <source>Callbacks#after_processing</source>
          <target state="translated">Callbacks#after_processing</target>
        </trans-unit>
        <trans-unit id="c3b7c2f32efcf3ec9e130423dac1d077676df259" translate="yes" xml:space="preserve">
          <source>Callbacks#around_processing</source>
          <target state="translated">Callbacks#around_processing</target>
        </trans-unit>
        <trans-unit id="db40736dff6cdea07344f3dd67ab2dd8af25e789" translate="yes" xml:space="preserve">
          <source>Callbacks#before_processing</source>
          <target state="translated">Callbacks#before_processing</target>
        </trans-unit>
        <trans-unit id="314fd1b6f6fe4854e4ae9631a3c3f906406ae44b" translate="yes" xml:space="preserve">
          <source>Callbacks#call</source>
          <target state="translated">Callbacks#call</target>
        </trans-unit>
        <trans-unit id="d0087bc3fe55585355833ea4dd164ff2d3548a4b" translate="yes" xml:space="preserve">
          <source>Callbacks#define_model_callbacks</source>
          <target state="translated">Callbacks#define_model_callbacks</target>
        </trans-unit>
        <trans-unit id="70b1cd250d9842a00c59ff9fa95128bf16fd54ea" translate="yes" xml:space="preserve">
          <source>Callbacks#process_action</source>
          <target state="translated">Callbacks#process_action</target>
        </trans-unit>
        <trans-unit id="771859ee608364f55f3885ad86605cae5bd4a53a" translate="yes" xml:space="preserve">
          <source>Callbacks#run_callbacks</source>
          <target state="translated">Callbacks#run_callbacks</target>
        </trans-unit>
        <trans-unit id="c5476eba5efc884bd47aaeb7996c819c2b497541" translate="yes" xml:space="preserve">
          <source>Callbacks::ClassMethods</source>
          <target state="translated">Callbacks::ClassMethods</target>
        </trans-unit>
        <trans-unit id="3ce3f6debc36ac888dd6681345f6d7bd0a557049" translate="yes" xml:space="preserve">
          <source>Callbacks::ClassMethods#after_action</source>
          <target state="translated">Callbacks::ClassMethods#after_action</target>
        </trans-unit>
        <trans-unit id="d926d99ea2a7d53eb67d50eb2c1ab642cdd0401c" translate="yes" xml:space="preserve">
          <source>Callbacks::ClassMethods#after_enqueue</source>
          <target state="translated">Callbacks::ClassMethods#after_enqueue</target>
        </trans-unit>
        <trans-unit id="337b95793db57d6d9bdbf31c68d22ee47536452a" translate="yes" xml:space="preserve">
          <source>Callbacks::ClassMethods#after_perform</source>
          <target state="translated">Callbacks::ClassMethods#after_perform</target>
        </trans-unit>
        <trans-unit id="8a8b314c48f2f4e446c47b0b0fc5d4cc6b2217de" translate="yes" xml:space="preserve">
          <source>Callbacks::ClassMethods#append_after_action</source>
          <target state="translated">Callbacks::ClassMethods#append_after_action</target>
        </trans-unit>
        <trans-unit id="4a8e2b727d0223dc2bb9b8bbaca5c2b8a23f8de8" translate="yes" xml:space="preserve">
          <source>Callbacks::ClassMethods#append_around_action</source>
          <target state="translated">Callbacks::ClassMethods#append_around_action</target>
        </trans-unit>
        <trans-unit id="55bf5ab36cf2b60d7035866ca5404e24f47d6fea" translate="yes" xml:space="preserve">
          <source>Callbacks::ClassMethods#append_before_action</source>
          <target state="translated">Callbacks::ClassMethods#append_before_action</target>
        </trans-unit>
        <trans-unit id="f4ac633f99f22c772d97fb7a8586ed430efe0d24" translate="yes" xml:space="preserve">
          <source>Callbacks::ClassMethods#around_action</source>
          <target state="translated">Callbacks::ClassMethods#around_action</target>
        </trans-unit>
        <trans-unit id="06fa64b8cef3f394187fe1fbff8a8350dec5f864" translate="yes" xml:space="preserve">
          <source>Callbacks::ClassMethods#around_enqueue</source>
          <target state="translated">Callbacks::ClassMethods#around_enqueue</target>
        </trans-unit>
        <trans-unit id="a8a0f6e3e091d31d4811d5786a3c25647dd16660" translate="yes" xml:space="preserve">
          <source>Callbacks::ClassMethods#around_perform</source>
          <target state="translated">Callbacks::ClassMethods#around_perform</target>
        </trans-unit>
        <trans-unit id="ee5cdb39fb48ac6662b188adca11edf89f171a95" translate="yes" xml:space="preserve">
          <source>Callbacks::ClassMethods#before_action</source>
          <target state="translated">Callbacks::ClassMethods#before_action</target>
        </trans-unit>
        <trans-unit id="ef821b756cd64e37d9f88dc213ad62f1853c0bab" translate="yes" xml:space="preserve">
          <source>Callbacks::ClassMethods#before_enqueue</source>
          <target state="translated">Callbacks::ClassMethods#before_enqueue</target>
        </trans-unit>
        <trans-unit id="2827fa477417258f089c396d12bb098f1612218b" translate="yes" xml:space="preserve">
          <source>Callbacks::ClassMethods#before_perform</source>
          <target state="translated">Callbacks::ClassMethods#before_perform</target>
        </trans-unit>
        <trans-unit id="3ae9d78523f1dad76f6a872f34232a57097b7d71" translate="yes" xml:space="preserve">
          <source>Callbacks::ClassMethods#define_callbacks</source>
          <target state="translated">Callbacks::ClassMethods#define_callbacks</target>
        </trans-unit>
        <trans-unit id="d57423db5f8cccbff909ea821b2a9f6fa1998214" translate="yes" xml:space="preserve">
          <source>Callbacks::ClassMethods#prepend_after_action</source>
          <target state="translated">Callbacks::ClassMethods#prepend_after_action</target>
        </trans-unit>
        <trans-unit id="29ffe9d819e351ed9d5086159a2e84b21de4c1b1" translate="yes" xml:space="preserve">
          <source>Callbacks::ClassMethods#prepend_around_action</source>
          <target state="translated">Callbacks::ClassMethods#prepend_around_action</target>
        </trans-unit>
        <trans-unit id="6447c20bee22673362025c35cf95f8640025ca6e" translate="yes" xml:space="preserve">
          <source>Callbacks::ClassMethods#prepend_before_action</source>
          <target state="translated">Callbacks::ClassMethods#prepend_before_action</target>
        </trans-unit>
        <trans-unit id="1397d4566c6959e1d9226ed661b9e3e1e2a4b364" translate="yes" xml:space="preserve">
          <source>Callbacks::ClassMethods#reset_callbacks</source>
          <target state="translated">Callbacks::ClassMethods#reset_callbacks</target>
        </trans-unit>
        <trans-unit id="c4045310132203c31143ce83b907e65129e75599" translate="yes" xml:space="preserve">
          <source>Callbacks::ClassMethods#set_callback</source>
          <target state="translated">Callbacks::ClassMethods#set_callback</target>
        </trans-unit>
        <trans-unit id="20c4aaa9a164301b119f7d297dd0953d43879b27" translate="yes" xml:space="preserve">
          <source>Callbacks::ClassMethods#skip_after_action</source>
          <target state="translated">Callbacks::ClassMethods#skip_after_action</target>
        </trans-unit>
        <trans-unit id="a199d1737b2f9b8e872bfdd5d7e08f6f05f76661" translate="yes" xml:space="preserve">
          <source>Callbacks::ClassMethods#skip_around_action</source>
          <target state="translated">Callbacks::ClassMethods#skip_around_action</target>
        </trans-unit>
        <trans-unit id="0da2e2c5e1ec6a3b1b702bbd7d0938430e6b5d63" translate="yes" xml:space="preserve">
          <source>Callbacks::ClassMethods#skip_before_action</source>
          <target state="translated">Callbacks::ClassMethods#skip_before_action</target>
        </trans-unit>
        <trans-unit id="f97a390876c82f772925cb1084781abf5ccb822d" translate="yes" xml:space="preserve">
          <source>Callbacks::ClassMethods#skip_callback</source>
          <target state="translated">Callbacks::ClassMethods#skip_callback</target>
        </trans-unit>
        <trans-unit id="0989cef85f7c641bbd7b7d12c0fe93e67295d58e" translate="yes" xml:space="preserve">
          <source>Callbacks::after</source>
          <target state="translated">Callbacks::after</target>
        </trans-unit>
        <trans-unit id="1875071045d34430617fd34996ae87c3742a5544" translate="yes" xml:space="preserve">
          <source>Callbacks::before</source>
          <target state="translated">Callbacks::before</target>
        </trans-unit>
        <trans-unit id="8724a258da3e5f4a12073013b8cbcee9d2722a33" translate="yes" xml:space="preserve">
          <source>Callbacks::new</source>
          <target state="translated">Callbacks::new</target>
        </trans-unit>
        <trans-unit id="d1f89ceff04164704cd7b9492c12dd3b2de2f509" translate="yes" xml:space="preserve">
          <source>Called by &lt;code&gt;render&lt;/code&gt; in &lt;code&gt;AbstractController::Rendering&lt;/code&gt; which sets the return value as the &lt;code&gt;response_body&lt;/code&gt;.</source>
          <target state="translated">리턴 값을 &lt;code&gt;response_body&lt;/code&gt; 로 설정하는 &lt;code&gt;AbstractController::Rendering&lt;/code&gt; 에서 &lt;code&gt;render&lt;/code&gt; 에 의해 호출됩니다 .</target>
        </trans-unit>
        <trans-unit id="23efec9fa774c9abe4eab7d9323791969da8c2c1" translate="yes" xml:space="preserve">
          <source>Called by Rack to setup the server.</source>
          <target state="translated">랙을 호출하여 서버를 설정합니다.</target>
        </trans-unit>
        <trans-unit id="d494f9d213f153de147a01ecd86a5feb7044d120" translate="yes" xml:space="preserve">
          <source>Called once a consumer has become a subscriber of the channel. Usually the place to setup any streams you want this channel to be sending to the subscriber.</source>
          <target state="translated">소비자가 채널의 가입자가되면 호출됩니다. 일반적으로이 채널이 구독자에게 보내려는 스트림을 설정하는 장소입니다.</target>
        </trans-unit>
        <trans-unit id="ba9bae4158cb252623694327ecaff8830dd6dd1b" translate="yes" xml:space="preserve">
          <source>Called once a consumer has cut its cable connection. Can be used for cleaning up connections or marking users as offline or the like.</source>
          <target state="translated">소비자가 케이블 연결을 끊으면 호출됩니다. 연결을 정리하거나 사용자를 오프라인 등으로 표시하는 데 사용할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="5318037ffa5ce23b7e91503553295957ad0bb3f3" translate="yes" xml:space="preserve">
          <source>Called when object is nested under an object that receives &lt;a href=&quot;hash#method-i-with_indifferent_access&quot;&gt;with_indifferent_access&lt;/a&gt;. This method will be called on the current object by the enclosing object and is aliased to &lt;a href=&quot;hash#method-i-with_indifferent_access&quot;&gt;with_indifferent_access&lt;/a&gt; by default. Subclasses of &lt;a href=&quot;hash&quot;&gt;Hash&lt;/a&gt; may overwrite this method to return &lt;code&gt;self&lt;/code&gt; if converting to an &lt;code&gt;ActiveSupport::HashWithIndifferentAccess&lt;/code&gt; would not be desirable.</source>
          <target state="translated">&lt;a href=&quot;hash#method-i-with_indifferent_access&quot;&gt;with_indifferent_access&lt;/a&gt; 를받는 객체 아래에 객체가 중첩 될 때 호출됩니다 . 이 메서드는 둘러싸는 개체에 의해 현재 개체에서 &lt;a href=&quot;hash#method-i-with_indifferent_access&quot;&gt;호출&lt;/a&gt; 되며 기본적 으로 with_indifferent_access 로 별칭이 지정됩니다 . &lt;code&gt;ActiveSupport::HashWithIndifferentAccess&lt;/code&gt; 로 변환하는 것이 바람직하지 않은 경우 &lt;a href=&quot;hash&quot;&gt;Hash의&lt;/a&gt; 서브 클래스 가이 메소드를 겹쳐 써서 &lt;code&gt;self&lt;/code&gt; 를 리턴 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="d148979e195ae7848779ec6de8eff97839ba3b4c" translate="yes" xml:space="preserve">
          <source>Calling &lt;code&gt;content_for&lt;/code&gt; stores a block of markup in an identifier for later use. In order to access this stored content in other templates, helper modules or the layout, you would pass the identifier as an argument to &lt;code&gt;content_for&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;content_for&lt;/code&gt; 를 호출 하면 나중에 사용하기 위해 식별자에 마크 업 블록이 저장됩니다. 다른 템플릿, 도우미 모듈 또는 레이아웃에서이 저장된 콘텐츠에 액세스하려면 식별자를 &lt;code&gt;content_for&lt;/code&gt; 에 인수로 전달합니다 .</target>
        </trans-unit>
        <trans-unit id="a83dfec0636f31480607b998902dac524c3a6840" translate="yes" xml:space="preserve">
          <source>Calling &lt;code&gt;content_for&lt;/code&gt; stores a block of markup in an identifier for later use. You can make subsequent calls to the stored content in other templates or the layout by passing the identifier as an argument to &lt;code&gt;yield&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;content_for&lt;/code&gt; 를 호출 하면 나중에 사용하기 위해 식별자에 마크 업 블록이 저장됩니다. &lt;code&gt;yield&lt;/code&gt; 에 인수로 식별자를 전달하여 다른 템플릿 또는 레이아웃의 저장된 컨텐츠를 후속 호출 할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="b704ea6e08f44fc71a9312e1aff2379a47344f2b" translate="yes" xml:space="preserve">
          <source>Calling &lt;code&gt;define_callbacks&lt;/code&gt; multiple times with the same &lt;code&gt;names&lt;/code&gt; will overwrite previous callbacks registered with &lt;code&gt;set_callback&lt;/code&gt;.</source>
          <target state="translated">호출 &lt;code&gt;define_callbacks&lt;/code&gt; 에게 같은 여러 번 &lt;code&gt;names&lt;/code&gt; 등록 이전 콜백을 덮어 쓰게됩니다 &lt;code&gt;set_callback&lt;/code&gt; 을 .</target>
        </trans-unit>
        <trans-unit id="d79813dcc4936f4a84aadb122836a14d695746b3" translate="yes" xml:space="preserve">
          <source>Calling &lt;code&gt;dup&lt;/code&gt; or &lt;code&gt;clone&lt;/code&gt; on safe strings yields safe strings.</source>
          <target state="translated">안전한 문자열에서 &lt;code&gt;dup&lt;/code&gt; 또는 &lt;code&gt;clone&lt;/code&gt; 을 호출 하면 안전한 문자열이 생성됩니다.</target>
        </trans-unit>
        <trans-unit id="fa4023e05763207bf570b434e1498bc96da84391" translate="yes" xml:space="preserve">
          <source>Calling &lt;code&gt;params&lt;/code&gt; in your application will now return an object instead of a hash. If your parameters are already permitted, then you will not need to make any changes. If you are using &lt;code&gt;map&lt;/code&gt; and other methods that depend on being able to read the hash regardless of &lt;code&gt;permitted?&lt;/code&gt; you will need to upgrade your application to first permit and then convert to a hash.</source>
          <target state="translated">응용 프로그램에서 &lt;code&gt;params&lt;/code&gt; 를 호출 하면 해시 대신 객체가 반환됩니다. 매개 변수가 이미 허용 된 경우 변경할 필요가 없습니다. &lt;code&gt;permitted?&lt;/code&gt; 여부에 관계없이 해시를 읽을 수있는 &lt;code&gt;map&lt;/code&gt; 및 기타 방법을 사용 하는 경우? 먼저 응용 프로그램을 업그레이드하여 해시로 변환해야합니다.</target>
        </trans-unit>
        <trans-unit id="6b0c43bbad79750364b915f0b82b1fa4484b32dd" translate="yes" xml:space="preserve">
          <source>Calling &lt;code&gt;parsed_body&lt;/code&gt; on the response parses the response body based on the last response MIME type.</source>
          <target state="translated">응답에서 &lt;code&gt;parsed_body&lt;/code&gt; 를 호출 하면 마지막 응답 MIME 유형에 따라 응답 본문이 구문 분석됩니다.</target>
        </trans-unit>
        <trans-unit id="08c255e2aa12ef31e00075ca0219bc8509b20f17" translate="yes" xml:space="preserve">
          <source>Calling &lt;code&gt;to_s&lt;/code&gt; on a safe string returns a safe string, but coercion with &lt;code&gt;to_str&lt;/code&gt; returns an unsafe string.</source>
          <target state="translated">안전한 문자열에서 &lt;code&gt;to_s&lt;/code&gt; 를 호출 하면 안전한 문자열이 반환되지만 &lt;code&gt;to_str&lt;/code&gt; 과의 강제 변환 은 안전하지 않은 문자열을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="ee5b8ccf8d951bb0770055b220226db3c7fb6c55" translate="yes" xml:space="preserve">
          <source>Calling &lt;code&gt;try!&lt;/code&gt; on &lt;code&gt;nil&lt;/code&gt; always returns &lt;code&gt;nil&lt;/code&gt;.</source>
          <target state="translated">전화 걸기 &lt;code&gt;try!&lt;/code&gt; 에 &lt;code&gt;nil&lt;/code&gt; 항상 반환 &lt;code&gt;nil&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="fb9df1e8d5fe7c77787d6c179483f8ed5f70d822" translate="yes" xml:space="preserve">
          <source>Calling &lt;code&gt;try&lt;/code&gt; on &lt;code&gt;nil&lt;/code&gt; always returns &lt;code&gt;nil&lt;/code&gt;. It becomes especially helpful when navigating through associations that may return &lt;code&gt;nil&lt;/code&gt;.</source>
          <target state="translated">통화 &lt;code&gt;try&lt;/code&gt; 에 &lt;code&gt;nil&lt;/code&gt; 항상 반환 &lt;code&gt;nil&lt;/code&gt; . &lt;code&gt;nil&lt;/code&gt; 을 리턴 할 수있는 연관을 탐색 할 때 특히 유용 합니다.</target>
        </trans-unit>
        <trans-unit id="231095aa95bef2cd6c0cde40717ca6359507879c" translate="yes" xml:space="preserve">
          <source>Calling methods on a connection without ownership is subject to the thread-safety guarantees of the underlying method. Many of the methods on connection adapter classes are inherently multi-thread unsafe.</source>
          <target state="translated">소유권이없는 연결에서 메소드를 호출하면 기본 메소드의 스레드 안전성이 보장됩니다. 연결 어댑터 클래스의 많은 메소드는 본질적으로 다중 스레드 안전하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="032be6353568f22d1044b99b43822aaf7349d675" translate="yes" xml:space="preserve">
          <source>Calling multiple redirects or renders</source>
          <target state="translated">여러 리디렉션 또는 렌더링 호출</target>
        </trans-unit>
        <trans-unit id="f38a953c65996b9789aa177e14e889fe5d7d3c4c" translate="yes" xml:space="preserve">
          <source>Calling the same filter multiple times with different options will not work, since the last filter definition will overwrite the previous ones.</source>
          <target state="translated">마지막 필터 정의가 이전 필터를 덮어 쓰기 때문에 다른 옵션으로 동일한 필터를 여러 번 호출하면 작동하지 않습니다.</target>
        </trans-unit>
        <trans-unit id="a4812f798918be9e748796ed9d69cfc7f8326b36" translate="yes" xml:space="preserve">
          <source>Calls &lt;code&gt;to_param&lt;/code&gt; on all its elements and joins the result with slashes. This is used by &lt;code&gt;url_for&lt;/code&gt; in Action Pack.</source>
          <target state="translated">모든 요소에서 &lt;code&gt;to_param&lt;/code&gt; 을 호출 하고 결과를 슬래시로 결합합니다. 이것은 Action Pack의 &lt;code&gt;url_for&lt;/code&gt; 에 의해 사용됩니다 .</target>
        </trans-unit>
        <trans-unit id="bf95614bebe92e8c0d29060aa6daab6769bfed14" translate="yes" xml:space="preserve">
          <source>Calls &lt;code&gt;travel_to&lt;/code&gt; with &lt;code&gt;Time.now&lt;/code&gt;.</source>
          <target state="translated">통화는 &lt;code&gt;travel_to&lt;/code&gt; 와 &lt;code&gt;Time.now&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="7ffc66ad1f52697993aba946230b1d55b63c5e94" translate="yes" xml:space="preserve">
          <source>Calls block once for each key in the parameters, passing the key. If no block is given, an enumerator is returned instead.</source>
          <target state="translated">매개 변수의 각 키에 대해 블록을 한 번 호출하여 키를 전달합니다. 블록을 지정하지 않으면 열거자가 대신 반환됩니다.</target>
        </trans-unit>
        <trans-unit id="d4568c7488bd757275952dcb035d525cea291830" translate="yes" xml:space="preserve">
          <source>Calls superclass method</source>
          <target state="translated">수퍼 클래스 메소드 호출</target>
        </trans-unit>
        <trans-unit id="dcc2b9e34b431ddaab1b1d0b77e1ce25586d4eca" translate="yes" xml:space="preserve">
          <source>Calls superclass method &lt;a href=&quot;../../store#method-c-new&quot;&gt;ActiveSupport::Cache::Store.new&lt;/a&gt;</source>
          <target state="translated">수퍼 클래스 메소드 &lt;a href=&quot;../../store#method-c-new&quot;&gt;ActiveSupport :: Cache :: Store.new를 호출합니다.&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="31daa1aac58584f1687f3139d0ee251602291f16" translate="yes" xml:space="preserve">
          <source>Calls superclass method &lt;a href=&quot;../../testhelper#method-i-assert_broadcast_on&quot;&gt;ActionCable::TestHelper#assert_broadcast_on&lt;/a&gt;</source>
          <target state="translated">수퍼 클래스 메소드 &lt;a href=&quot;../../testhelper#method-i-assert_broadcast_on&quot;&gt;ActionCable :: TestHelper # assert_broadcast_on을 호출합니다.&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="fca30bdd9ac886fe9acba29bc62cc40c2fc56e0f" translate="yes" xml:space="preserve">
          <source>Calls superclass method &lt;a href=&quot;../../testhelper#method-i-assert_broadcasts&quot;&gt;ActionCable::TestHelper#assert_broadcasts&lt;/a&gt;</source>
          <target state="translated">수퍼 클래스 메소드 &lt;a href=&quot;../../testhelper#method-i-assert_broadcasts&quot;&gt;ActionCable :: TestHelper # assert_broadcasts를 호출합니다.&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="addab59254678922886cc1b1ed799cc5d226d8c1" translate="yes" xml:space="preserve">
          <source>Calls superclass method &lt;a href=&quot;../activemodel/attributemethods#method-i-respond_to-3F&quot;&gt;ActiveModel::AttributeMethods#respond_to?&lt;/a&gt;</source>
          <target state="translated">수퍼 클래스 메소드 &lt;a href=&quot;../activemodel/attributemethods#method-i-respond_to-3F&quot;&gt;ActiveModel :: AttributeMethods # respond_to?&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="c6997ec0d7fe57742b0565aa1232ea0a857efb52" translate="yes" xml:space="preserve">
          <source>Calls superclass method &lt;a href=&quot;../activemodel/validations#method-i-valid-3F&quot;&gt;ActiveModel::Validations#valid?&lt;/a&gt;</source>
          <target state="translated">수퍼 클래스 메소드 &lt;a href=&quot;../activemodel/validations#method-i-valid-3F&quot;&gt;ActiveModel :: Validations # valid?&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="a799a43bb12327b1062db75a8684b622e3c68b05" translate="yes" xml:space="preserve">
          <source>Calls superclass method &lt;a href=&quot;../engine/configuration#method-c-new&quot;&gt;Rails::Engine::Configuration.new&lt;/a&gt;</source>
          <target state="translated">수퍼 클래스 메소드 &lt;a href=&quot;../engine/configuration#method-c-new&quot;&gt;Rails :: Engine :: Configuration.new를&lt;/a&gt; 호출합니다.</target>
        </trans-unit>
        <trans-unit id="27d8ec021bf8f7df9af4463a84b593e440c6d603" translate="yes" xml:space="preserve">
          <source>Calls superclass method &lt;a href=&quot;../engine/configuration#method-i-paths&quot;&gt;Rails::Engine::Configuration#paths&lt;/a&gt;</source>
          <target state="translated">수퍼 클래스 메소드 &lt;a href=&quot;../engine/configuration#method-i-paths&quot;&gt;Rails :: Engine :: Configuration # paths&lt;/a&gt; 호출</target>
        </trans-unit>
        <trans-unit id="d86651ef80bf943dd77436d270fc01eaa2c2e23e" translate="yes" xml:space="preserve">
          <source>Calls superclass method &lt;a href=&quot;../enumerable#method-i-many-3F&quot;&gt;Enumerable#many?&lt;/a&gt;</source>
          <target state="translated">수퍼 클래스 메소드 &lt;a href=&quot;../enumerable#method-i-many-3F&quot;&gt;Enumerable # many?&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="87d6ff5c2cdcee3981c969da1f11dd9ddd0cec23" translate="yes" xml:space="preserve">
          <source>Calls superclass method &lt;a href=&quot;../hash#method-i-reverse_merge&quot;&gt;Hash#reverse_merge&lt;/a&gt;</source>
          <target state="translated">수퍼 클래스 메소드 &lt;a href=&quot;../hash#method-i-reverse_merge&quot;&gt;Hash # reverse_merge를&lt;/a&gt; 호출합니다.</target>
        </trans-unit>
        <trans-unit id="a8fc4a4be52dd82093207f9d570c0cad64950851" translate="yes" xml:space="preserve">
          <source>Calls superclass method &lt;a href=&quot;../hash#method-i-reverse_merge-21&quot;&gt;Hash#reverse_merge!&lt;/a&gt;</source>
          <target state="translated">수퍼 클래스 메소드 &lt;a href=&quot;../hash#method-i-reverse_merge-21&quot;&gt;Hash # reverse_merge를&lt;/a&gt; 호출합니다 !</target>
        </trans-unit>
        <trans-unit id="7e1f3c6ab9ba88311442e490c59d8a496c54257d" translate="yes" xml:space="preserve">
          <source>Calls superclass method &lt;a href=&quot;../hash#method-i-slice-21&quot;&gt;Hash#slice!&lt;/a&gt;</source>
          <target state="translated">수퍼 클래스 메소드 &lt;a href=&quot;../hash#method-i-slice-21&quot;&gt;Hash # slice를&lt;/a&gt; 호출합니다 !</target>
        </trans-unit>
        <trans-unit id="0a7c6d8f206c9760741b1efc73b12383687764a9" translate="yes" xml:space="preserve">
          <source>Calls superclass method &lt;a href=&quot;../railtie/configuration#method-c-new&quot;&gt;Rails::Railtie::Configuration.new&lt;/a&gt;</source>
          <target state="translated">수퍼 클래스 메소드 &lt;a href=&quot;../railtie/configuration#method-c-new&quot;&gt;Rails :: Railtie :: Configuration.new를&lt;/a&gt; 호출합니다.</target>
        </trans-unit>
        <trans-unit id="e3d41f1e8ed7716331ac002c905458702ae53a2e" translate="yes" xml:space="preserve">
          <source>Calls superclass method &lt;a href=&quot;../routing/urlfor#method-c-new&quot;&gt;ActionDispatch::Routing::UrlFor.new&lt;/a&gt;</source>
          <target state="translated">수퍼 클래스 메소드 &lt;a href=&quot;../routing/urlfor#method-c-new&quot;&gt;ActionDispatch :: Routing :: UrlFor.new를 호출합니다.&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="150e05675a03713dac08bd653de9ffa3aee2183f" translate="yes" xml:space="preserve">
          <source>Calls superclass method &lt;a href=&quot;abstractadapter#method-i-disconnect-21&quot;&gt;ActiveRecord::ConnectionAdapters::AbstractAdapter#disconnect!&lt;/a&gt;</source>
          <target state="translated">수퍼 클래스 메소드 &lt;a href=&quot;abstractadapter#method-i-disconnect-21&quot;&gt;ActiveRecord :: ConnectionAdapters :: AbstractAdapter # disconnect!를&lt;/a&gt; 호출합니다 .</target>
        </trans-unit>
        <trans-unit id="b64dbd552707ac94e666f5241dd06781deab28f7" translate="yes" xml:space="preserve">
          <source>Calls superclass method &lt;a href=&quot;abstractadapter#method-i-reconnect-21&quot;&gt;ActiveRecord::ConnectionAdapters::AbstractAdapter#reconnect!&lt;/a&gt;</source>
          <target state="translated">수퍼 클래스 메소드 &lt;a href=&quot;abstractadapter#method-i-reconnect-21&quot;&gt;ActiveRecord :: ConnectionAdapters :: AbstractAdapter # reconnect를&lt;/a&gt; 호출합니다 !</target>
        </trans-unit>
        <trans-unit id="958ce8eac99a5fc2dbe20ed75fa8827974f6f970" translate="yes" xml:space="preserve">
          <source>Calls superclass method &lt;a href=&quot;abstractmysqladapter#method-c-new&quot;&gt;ActiveRecord::ConnectionAdapters::AbstractMysqlAdapter.new&lt;/a&gt;</source>
          <target state="translated">수퍼 클래스 메서드 &lt;a href=&quot;abstractmysqladapter#method-c-new&quot;&gt;ActiveRecord :: ConnectionAdapters :: AbstractMysqlAdapter.new를&lt;/a&gt; 호출합니다.</target>
        </trans-unit>
        <trans-unit id="810e810da6f71d56cdc33665efd9631fd584e073" translate="yes" xml:space="preserve">
          <source>Calls superclass method &lt;a href=&quot;executionwrapper#method-c-wrap&quot;&gt;ActiveSupport::ExecutionWrapper.wrap&lt;/a&gt;</source>
          <target state="translated">수퍼 클래스 메소드 &lt;a href=&quot;executionwrapper#method-c-wrap&quot;&gt;ActiveSupport :: ExecutionWrapper.wrap을&lt;/a&gt; 호출합니다.</target>
        </trans-unit>
        <trans-unit id="6c20159e7c45d2002f9ae032246a3f3abcce67e7" translate="yes" xml:space="preserve">
          <source>Calls superclass method &lt;a href=&quot;http/url#method-c-new&quot;&gt;ActionDispatch::Http::URL.new&lt;/a&gt;</source>
          <target state="translated">수퍼 클래스 메소드 &lt;a href=&quot;http/url#method-c-new&quot;&gt;ActionDispatch :: Http :: URL.new를 호출합니다.&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="2e8f6efcacd06de1957d3c1d7ad7c6aab802fd68" translate="yes" xml:space="preserve">
          <source>Calls superclass method &lt;a href=&quot;querycache#method-c-new&quot;&gt;ActiveRecord::ConnectionAdapters::QueryCache.new&lt;/a&gt;</source>
          <target state="translated">수퍼 클래스 메소드 &lt;a href=&quot;querycache#method-c-new&quot;&gt;ActiveRecord :: ConnectionAdapters :: QueryCache.new를&lt;/a&gt; 호출합니다.</target>
        </trans-unit>
        <trans-unit id="af1ec396b96804ec11516980ef13f8a9c87b7839" translate="yes" xml:space="preserve">
          <source>Calls superclass method &lt;a href=&quot;schemastatements#method-i-rename_index&quot;&gt;ActiveRecord::ConnectionAdapters::SchemaStatements#rename_index&lt;/a&gt;</source>
          <target state="translated">수퍼 클래스 메소드 &lt;a href=&quot;schemastatements#method-i-rename_index&quot;&gt;ActiveRecord :: ConnectionAdapters :: SchemaStatements # rename_index를 호출합니다.&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="099f53e8659f402292888902f6283e1507e287c6" translate="yes" xml:space="preserve">
          <source>Calls superclass method &lt;a href=&quot;statementinvalid#method-c-new&quot;&gt;ActiveRecord::StatementInvalid.new&lt;/a&gt;</source>
          <target state="translated">수퍼 클래스 메소드 &lt;a href=&quot;statementinvalid#method-c-new&quot;&gt;ActiveRecord :: StatementInvalid.new를&lt;/a&gt; 호출합니다.</target>
        </trans-unit>
        <trans-unit id="c8ebf9c923e82c2adc126e6c53a6bb1c085bdbf4" translate="yes" xml:space="preserve">
          <source>Calls superclass method &lt;a href=&quot;store#method-c-new&quot;&gt;ActiveSupport::Cache::Store.new&lt;/a&gt;</source>
          <target state="translated">수퍼 클래스 메소드 &lt;a href=&quot;store#method-c-new&quot;&gt;ActiveSupport :: Cache :: Store.new를 호출합니다.&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="4770c576e6aec39d37d485afb3e6aa3ffbf91f26" translate="yes" xml:space="preserve">
          <source>Calls superclass method &lt;a href=&quot;store#method-i-cleanup&quot;&gt;ActiveSupport::Cache::Store#cleanup&lt;/a&gt;</source>
          <target state="translated">수퍼 클래스 메소드 &lt;a href=&quot;store#method-i-cleanup&quot;&gt;ActiveSupport :: Cache :: Store # cleanup을&lt;/a&gt; 호출합니다.</target>
        </trans-unit>
        <trans-unit id="05ecf709a4d778eb987e6b36994ebfa0b9f64846" translate="yes" xml:space="preserve">
          <source>Calls superclass method &lt;a href=&quot;store#method-i-read_multi&quot;&gt;ActiveSupport::Cache::Store#read_multi&lt;/a&gt;</source>
          <target state="translated">수퍼 클래스 메소드 &lt;a href=&quot;store#method-i-read_multi&quot;&gt;ActiveSupport :: Cache :: Store # read_multi를 호출합니다.&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="ef884e4c77cffe2a32c024c12140ac356f165d5c" translate="yes" xml:space="preserve">
          <source>Calls superclass method ActionDispatch::Session::Compatibility.new</source>
          <target state="translated">수퍼 클래스 메소드 ActionDispatch :: Session :: Compatibility.new를 호출합니다.</target>
        </trans-unit>
        <trans-unit id="1179f62fa03227dbf6187f0b189894981eda85d3" translate="yes" xml:space="preserve">
          <source>Calls superclass method ActiveRecord::ConnectionAdapters::QueryCache::ConnectionPoolConfiguration.new</source>
          <target state="translated">수퍼 클래스 메소드 ActiveRecord :: ConnectionAdapters :: QueryCache :: ConnectionPoolConfiguration.new를 호출합니다.</target>
        </trans-unit>
        <trans-unit id="b9842c4f34082ab2bee1d6a39cb45fa6c7152e72" translate="yes" xml:space="preserve">
          <source>Calls the action going through the entire action dispatch stack.</source>
          <target state="translated">전체 작업 디스패치 스택을 통과하는 작업을 호출합니다.</target>
        </trans-unit>
        <trans-unit id="3982b6b14fbab7485e1f090df545be3563ca005e" translate="yes" xml:space="preserve">
          <source>Calls the before and around callbacks in the order they were set, yields the block (if given one), and then runs the after callbacks in reverse order.</source>
          <target state="translated">이전 및 주변 콜백을 설정된 순서대로 호출하고, 블록이 제공되면 (한 경우), 콜백을 역순으로 실행합니다.</target>
        </trans-unit>
        <trans-unit id="dc3afbc650b2faa9d0c737f3b3012be300c6f21f" translate="yes" xml:space="preserve">
          <source>Calls the given block once for each element in row collection, passing row as parameter.</source>
          <target state="translated">행 콜렉션의 각 요소에 대해 주어진 블록을 한 번 호출하여 행을 매개 변수로 전달합니다.</target>
        </trans-unit>
        <trans-unit id="34cde50f691912bea32c091472239ce972ebc022" translate="yes" xml:space="preserve">
          <source>Calls this block after &lt;a href=&quot;currentattributes#method-i-reset&quot;&gt;reset&lt;/a&gt; is called on the instance. Used for resetting external collaborators, like &lt;a href=&quot;../time#method-c-zone&quot;&gt;Time.zone&lt;/a&gt;.</source>
          <target state="translated">인스턴스에서 &lt;a href=&quot;currentattributes#method-i-reset&quot;&gt;재설정&lt;/a&gt; 이 호출 된 후이 블록을 호출 합니다. &lt;a href=&quot;../time#method-c-zone&quot;&gt;Time.zone&lt;/a&gt; 과 같은 외부 공동 작업자를 재설정하는 데 사용됩니다 .</target>
        </trans-unit>
        <trans-unit id="df7a4d3f12d1ef41edd97aa43a8849515a41e9aa" translate="yes" xml:space="preserve">
          <source>Calls this block before &lt;a href=&quot;currentattributes#method-i-reset&quot;&gt;reset&lt;/a&gt; is called on the instance. Used for resetting external collaborators that depend on current values.</source>
          <target state="translated">인스턴스에서 &lt;a href=&quot;currentattributes#method-i-reset&quot;&gt;재설정&lt;/a&gt; 이 호출 되기 전에이 블록을 호출 합니다. 현재 값에 의존하는 외부 공동 작업자를 재설정하는 데 사용됩니다.</target>
        </trans-unit>
        <trans-unit id="88672c7e867465ae7f4b59d3d2160fa0cdf4c2c2" translate="yes" xml:space="preserve">
          <source>Calls to &lt;code&gt;require_dependency&lt;/code&gt; have to be strategically written in autoloaded spots.</source>
          <target state="translated">&lt;code&gt;require_dependency&lt;/code&gt; 에 대한 호출은 전략적으로 자동로드 된 지점에 작성되어야합니다.</target>
        </trans-unit>
        <trans-unit id="29c4d457eb575c3a3f9dcc15ce8d70b991ca0a7f" translate="yes" xml:space="preserve">
          <source>Calls to the &lt;code&gt;render&lt;/code&gt; method generally accept five options:</source>
          <target state="translated">&lt;code&gt;render&lt;/code&gt; 메소드 호출은 일반적으로 5 가지 옵션을 허용합니다.</target>
        </trans-unit>
        <trans-unit id="8ddb92ee7b9b51784c38f4ecff1620c11bb7b500" translate="yes" xml:space="preserve">
          <source>Can accept other relation objects. For example:</source>
          <target state="translated">다른 관계 객체를 받아 들일 수 있습니다. 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="dd2387e9ac4b59e97521e3a24d571c07d533951c" translate="yes" xml:space="preserve">
          <source>Can also be written as follows using references:</source>
          <target state="translated">참조를 사용하여 다음과 같이 작성할 수도 있습니다.</target>
        </trans-unit>
        <trans-unit id="964341536257c138e26e6bbe5e0834e45c1e2b63" translate="yes" xml:space="preserve">
          <source>Can be given a block that will evaluate in the context of the job allowing &lt;code&gt;self.arguments&lt;/code&gt; to be accessed so that a dynamic queue name can be applied:</source>
          <target state="translated">동적 큐 이름을 적용 할 수 있도록 &lt;code&gt;self.arguments&lt;/code&gt; 에 액세스 할 수 있도록 작업 컨텍스트에서 평가할 블록을 제공 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="82d4b14432746d0aeb75562a8b1acb8f3c763164" translate="yes" xml:space="preserve">
          <source>Can comments for tables, columns, and indexes be specified in create/alter table statements?</source>
          <target state="translated">테이블 작성, 변경 테이블 명령문에서 테이블, 컬럼 및 인덱스에 대한 주석을 지정할 수 있습니까?</target>
        </trans-unit>
        <trans-unit id="80a5a7745b018b7c043ff303c1e40a3d42c9e66f" translate="yes" xml:space="preserve">
          <source>Can we do better? You bet!</source>
          <target state="translated">더 잘할 수 있을까요? 물론이지!</target>
        </trans-unit>
        <trans-unit id="7a2947e914be5d5ebe6f81efaadb413a7ede63aa" translate="yes" xml:space="preserve">
          <source>Can you safely dup this object?</source>
          <target state="translated">이 개체를 안전하게 두 드릴 수 있습니까?</target>
        </trans-unit>
        <trans-unit id="ba3a00bb8d5cdcba1e279c57b5ab1648b382efd5" translate="yes" xml:space="preserve">
          <source>Canceling callbacks</source>
          <target state="translated">콜백 취소</target>
        </trans-unit>
        <trans-unit id="7e5a853cb9e07c22b1b312eb402542bd4a9d3f47" translate="yes" xml:space="preserve">
          <source>Capistrano (v2.15.1 and above) includes a recipe to handle this in deployment. Add the following line to &lt;code&gt;Capfile&lt;/code&gt;:</source>
          <target state="translated">Capistrano (v2.15.1 이상)에는 배포시이를 처리 할 수있는 레시피가 포함되어 있습니다. &lt;code&gt;Capfile&lt;/code&gt; 에 다음 행을 추가하십시오 .</target>
        </trans-unit>
        <trans-unit id="e4414bb9363fc0381adc643fb12d2867938ea1e5" translate="yes" xml:space="preserve">
          <source>Capitalizes all the words and replaces some characters in the string to create a nicer looking title. &lt;code&gt;titleize&lt;/code&gt; is meant for creating pretty output. It is not used in the Rails internals.</source>
          <target state="translated">모든 단어를 대문자로 표시하고 문자열에서 일부 문자를 대체하여 더보기 좋은 제목을 만듭니다. &lt;code&gt;titleize&lt;/code&gt; 는 예쁜 출력물을 만들기위한 것입니다. Rails 내부에서는 사용되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="d0bfa44e518afa4f714d9452d2777776f2b6d273" translate="yes" xml:space="preserve">
          <source>Capitalizes the first letter of every word, when possible.</source>
          <target state="translated">가능하면 모든 단어의 첫 글자를 대문자로 표기하십시오.</target>
        </trans-unit>
        <trans-unit id="24a46986e8bed887828eb6b35eee1c26d7ae56a4" translate="yes" xml:space="preserve">
          <source>Capitalizes the first word, turns underscores into spaces, and (by default)strips a trailing '_id' if present. Like &lt;code&gt;titleize&lt;/code&gt;, this is meant for creating pretty output.</source>
          <target state="translated">첫 번째 단어를 대문자로 표시하고 밑줄을 공백으로 바꾸고 기본적으로 후행 '_id'를 표시합니다. &lt;code&gt;titleize&lt;/code&gt; 와 마찬가지로 이것은 예쁜 출력을 만들기위한 것입니다.</target>
        </trans-unit>
        <trans-unit id="4a32a4258483429d664ef45d615145d22a49c07b" translate="yes" xml:space="preserve">
          <source>Capitalizes the first word.</source>
          <target state="translated">첫 단어를 대문자로 표기합니다.</target>
        </trans-unit>
        <trans-unit id="082706e64261e155b952b36a3e3df0fa9a672553" translate="yes" xml:space="preserve">
          <source>CaptureHelper</source>
          <target state="translated">CaptureHelper</target>
        </trans-unit>
        <trans-unit id="13e6e57427cec7b4c752e5760f50248e3fd8dd3a" translate="yes" xml:space="preserve">
          <source>Cardinality and associations</source>
          <target state="translated">카디널리티 및 협회</target>
        </trans-unit>
        <trans-unit id="c2d56d958a5b9dd98819cb352d5b123736ff9ab6" translate="yes" xml:space="preserve">
          <source>Cascading style sheet for the controller</source>
          <target state="translated">컨트롤러 용 캐스 케이 딩 스타일 시트</target>
        </trans-unit>
        <trans-unit id="309f3f80f3ec7e6d709c08c10f29a150253b1684" translate="yes" xml:space="preserve">
          <source>Cast a &lt;code&gt;value&lt;/code&gt; to a type that the database understands. For example, SQLite does not understand dates, so this method will convert a &lt;a href=&quot;../../date&quot;&gt;Date&lt;/a&gt; to a &lt;a href=&quot;../../string&quot;&gt;String&lt;/a&gt;.</source>
          <target state="translated">데이터베이스가 이해하는 유형 으로 &lt;code&gt;value&lt;/code&gt; 을 캐스트하십시오 . 예를 들어, SQLite는 날짜를 이해하지 못하므로이 메소드는 &lt;a href=&quot;../../date&quot;&gt;Date&lt;/a&gt; 를 &lt;a href=&quot;../../string&quot;&gt;String으로&lt;/a&gt; 변환합니다 .</target>
        </trans-unit>
        <trans-unit id="3e663e266115925eff5513a7308bc53606370327" translate="yes" xml:space="preserve">
          <source>Casts a value from the ruby type to a type that the database knows how to understand. The returned value from this method should be a &lt;code&gt;String&lt;/code&gt;, &lt;code&gt;Numeric&lt;/code&gt;, &lt;code&gt;Date&lt;/code&gt;, &lt;code&gt;Time&lt;/code&gt;, &lt;code&gt;Symbol&lt;/code&gt;, &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt;, or &lt;code&gt;nil&lt;/code&gt;.</source>
          <target state="translated">루비 유형의 값을 데이터베이스가 이해하는 유형으로 캐스트합니다. 이 메서드에서 반환 된 값은 &lt;code&gt;String&lt;/code&gt; , &lt;code&gt;Numeric&lt;/code&gt; , &lt;code&gt;Date&lt;/code&gt; , &lt;code&gt;Time&lt;/code&gt; , &lt;code&gt;Symbol&lt;/code&gt; , &lt;code&gt;true&lt;/code&gt; , &lt;code&gt;false&lt;/code&gt; 또는 &lt;code&gt;nil&lt;/code&gt; 이어야합니다 .</target>
        </trans-unit>
        <trans-unit id="7f9f355a82119f3e163324362f390106ba4e87af" translate="yes" xml:space="preserve">
          <source>Catch the exception and reschedule job for re-execution after so many seconds, for a specific number of attempts. If the exception keeps getting raised beyond the specified number of attempts, the exception is allowed to bubble up to the underlying queuing system, which may have its own retry mechanism or place it in a holding queue for inspection.</source>
          <target state="translated">특정 횟수만큼 시도한 후 몇 초 후에 다시 실행되도록 예외를 잡아서 작업을 다시 예약하십시오. 예외가 지정된 시도 횟수 이상으로 계속 발생하면 자체의 재시도 메커니즘이 있거나 검사를 위해 보류 큐에 배치 할 수있는 기본 큐 시스템으로 예외가 버블 링 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="cbf0eb43a0f74729b670cb70ee447e8dafe2ae8e" translate="yes" xml:space="preserve">
          <source>Catching Exceptions</source>
          <target state="translated">예외 잡기</target>
        </trans-unit>
        <trans-unit id="395a7add4b4896c22499b14bbfe49d2e0cdf6eab" translate="yes" xml:space="preserve">
          <source>Causes the records to be loaded from the database if they have not been loaded already. You can use this if for some reason you need to explicitly load some records before actually using them. The return value is the relation itself, not the records.</source>
          <target state="translated">레코드가 아직로드되지 않은 경우 데이터베이스에서 레코드를로드합니다. 어떤 이유로 어떤 레코드를 실제로 사용하기 전에 명시 적으로로드해야하는 경우이를 사용할 수 있습니다. 반환 값은 레코드가 아니라 관계 자체입니다.</target>
        </trans-unit>
        <trans-unit id="bcaa33a7ae44bd5042c37a9cdbea7f843b1cf7c8" translate="yes" xml:space="preserve">
          <source>Caveats</source>
          <target state="translated">Caveats</target>
        </trans-unit>
        <trans-unit id="252ee1b6a3b5cdef06837cde982ffa0f432000ad" translate="yes" xml:space="preserve">
          <source>Certain elements of your page aren't actually referring to any URL, but you may want them to trigger Ajax calls. Specifying the &lt;code&gt;data-url&lt;/code&gt; attribute along with the &lt;code&gt;data-remote&lt;/code&gt; one will trigger an Ajax call to the given URL. You can also specify extra parameters through the &lt;code&gt;data-params&lt;/code&gt; attribute.</source>
          <target state="translated">페이지의 특정 요소는 실제로 URL을 참조하지 않지만 Ajax 호출을 트리거하도록 할 수 있습니다. &lt;code&gt;data-remote&lt;/code&gt; 속성과 함께 &lt;code&gt;data-url&lt;/code&gt; 속성을 지정하면 지정된 URL에 대한 Ajax 호출이 트리거됩니다. &lt;code&gt;data-params&lt;/code&gt; 속성을 통해 추가 매개 변수를 지정할 수도 있습니다 .</target>
        </trans-unit>
        <trans-unit id="62634253720719cbce25f498d277f39259118b9c" translate="yes" xml:space="preserve">
          <source>Certain exceptions are only rescuable from the &lt;code&gt;ApplicationController&lt;/code&gt; class, as they are raised before the controller gets initialized and the action gets executed.</source>
          <target state="translated">컨트롤러가 초기화되고 작업이 실행되기 전에 발생 하는 일부 예외는 &lt;code&gt;ApplicationController&lt;/code&gt; 클래스 에서만 구할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="6319ce8d203f15fc6cba48832f17a4ab6ba77291" translate="yes" xml:space="preserve">
          <source>Chain &lt;code&gt;ActiveRecord::Base#find&lt;/code&gt; to &lt;code&gt;ActiveRecord::QueryMethods#lock&lt;/code&gt; to obtain an exclusive lock on the selected rows:</source>
          <target state="translated">체인 &lt;code&gt;ActiveRecord::Base#find&lt;/code&gt; 에 &lt;code&gt;ActiveRecord::QueryMethods#lock&lt;/code&gt; 선택한 행에 대한 배타적 잠금을 구하는 방법</target>
        </trans-unit>
        <trans-unit id="73a05f4d1fffbe78d173e824018a0e81d66df9df" translate="yes" xml:space="preserve">
          <source>Change the name:</source>
          <target state="translated">이름을 변경하십시오.</target>
        </trans-unit>
        <trans-unit id="13c27eba3e40965958cdeda0269f57d8773ed716" translate="yes" xml:space="preserve">
          <source>Change the primary key column type</source>
          <target state="translated">기본 키 열 유형 변경</target>
        </trans-unit>
        <trans-unit id="4c2345e058672e575c4c61171442e257214ba174" translate="yes" xml:space="preserve">
          <source>Change the username and password in the &lt;code&gt;development&lt;/code&gt; section as appropriate.</source>
          <target state="translated">&lt;code&gt;development&lt;/code&gt; 섹션 에서 사용자 이름과 비밀번호 를 적절히 변경하십시오 .</target>
        </trans-unit>
        <trans-unit id="6f58bf8c89843cce8382cb8e500aaa0d3c01894d" translate="yes" xml:space="preserve">
          <source>Change to the application's path if there is no &lt;code&gt;config.ru&lt;/code&gt; file in current directory. This allows us to run &lt;code&gt;rails server&lt;/code&gt; from other directories, but still get the main &lt;code&gt;config.ru&lt;/code&gt; and properly set the &lt;code&gt;tmp&lt;/code&gt; directory.</source>
          <target state="translated">현재 디렉토리에 &lt;code&gt;config.ru&lt;/code&gt; 파일 이 없으면 응용 프로그램 경로로 변경하십시오 . 이를 통해 다른 디렉토리에서 &lt;code&gt;rails server&lt;/code&gt; 를 실행할 수 있지만 여전히 메인 &lt;code&gt;config.ru&lt;/code&gt; 를 가져 와서 &lt;code&gt;tmp&lt;/code&gt; 디렉토리를 올바르게 설정하십시오 .</target>
        </trans-unit>
        <trans-unit id="f230a3861cb3a3714e8c048bfd3894bd909fb4ca" translate="yes" xml:space="preserve">
          <source>Changes '::' to '/' to convert namespaces to paths.</source>
          <target state="translated">네임 스페이스를 경로로 변환하기 위해 '::'를 '/'로 변경합니다.</target>
        </trans-unit>
        <trans-unit id="01af96627bfe14ed634e9d19418bb929feb84c2b" translate="yes" xml:space="preserve">
          <source>Changes current time to the given time by stubbing &lt;code&gt;Time.now&lt;/code&gt;, &lt;code&gt;Date.today&lt;/code&gt;, and &lt;code&gt;DateTime.now&lt;/code&gt; to return the time or date passed into this method. The stubs are automatically removed at the end of the test.</source>
          <target state="translated">스텁에 의해 주어진 시간에 현재 시간을 변경 &lt;code&gt;Time.now&lt;/code&gt; , &lt;code&gt;Date.today&lt;/code&gt; 및 &lt;code&gt;DateTime.now&lt;/code&gt; 을 이 방법으로 전달 된 시간이나 날짜를 반환 할 수 있습니다. 시험 종료시 스텁이 자동으로 제거됩니다.</target>
        </trans-unit>
        <trans-unit id="3e2abb31fec8b0f91c38942eb4e1308cabbf5ffa" translate="yes" xml:space="preserve">
          <source>Changes current time to the time in the future or in the past by a given time difference by stubbing &lt;code&gt;Time.now&lt;/code&gt;, &lt;code&gt;Date.today&lt;/code&gt;, and &lt;code&gt;DateTime.now&lt;/code&gt;. The stubs are automatically removed at the end of the test.</source>
          <target state="translated">스텁에 의해 주어진 시간 차이에 의해 미래 나 과거의 시간에 현재 시간을 변경 &lt;code&gt;Time.now&lt;/code&gt; , &lt;code&gt;Date.today&lt;/code&gt; 및 &lt;code&gt;DateTime.now&lt;/code&gt; 을 . 시험 종료시 스텁이 자동으로 제거됩니다.</target>
        </trans-unit>
        <trans-unit id="0f229fcf4f839be8a2e035405cf03d852dd3c512" translate="yes" xml:space="preserve">
          <source>Changes in JSON handling</source>
          <target state="translated">JSON 처리의 변경</target>
        </trans-unit>
        <trans-unit id="1b8ab56a8f8d912d4cf12ba6b649558ab44246e7" translate="yes" xml:space="preserve">
          <source>Changes on Default Scopes</source>
          <target state="translated">기본 범위의 변경</target>
        </trans-unit>
        <trans-unit id="7a03582b3ac30de8089085b4d86397edbb2f04a9" translate="yes" xml:space="preserve">
          <source>Changes the column's definition according to the new options.</source>
          <target state="translated">새 옵션에 따라 열의 정의를 변경합니다.</target>
        </trans-unit>
        <trans-unit id="8faf69d1a354a444cb42a8efba060c258ee7c100" translate="yes" xml:space="preserve">
          <source>Changes the column's definition according to the new options. See &lt;a href=&quot;tabledefinition#method-i-column&quot;&gt;ActiveRecord::ConnectionAdapters::TableDefinition#column&lt;/a&gt; for details of the options you can use.</source>
          <target state="translated">새 옵션에 따라 열의 정의를 변경합니다. 참조 &lt;a href=&quot;tabledefinition#method-i-column&quot;&gt;액티브 :: ConnectionAdapters :: TableDefinition # 열&lt;/a&gt; 사용할 수있는 옵션에 대한 자세한 내용은.</target>
        </trans-unit>
        <trans-unit id="ca7e1f568d3a733ae690ddca170349b6be460ab2" translate="yes" xml:space="preserve">
          <source>Changes the comment for a column or removes it if &lt;code&gt;nil&lt;/code&gt;.</source>
          <target state="translated">열의 주석을 변경하거나 &lt;code&gt;nil&lt;/code&gt; 인 경우 제거합니다 .</target>
        </trans-unit>
        <trans-unit id="1b8a1ed18d88bb87126a4ef85ada6050badbed9c" translate="yes" xml:space="preserve">
          <source>Changes the comment for a table or removes it if &lt;code&gt;nil&lt;/code&gt;.</source>
          <target state="translated">테이블의 주석을 변경하거나 &lt;code&gt;nil&lt;/code&gt; 인 경우 제거합니다 .</target>
        </trans-unit>
        <trans-unit id="241e22b3faa804c005e792541fa926ad469a5cb4" translate="yes" xml:space="preserve">
          <source>Changes to test helper</source>
          <target state="translated">테스트 헬퍼 변경</target>
        </trans-unit>
        <trans-unit id="a66c25b7ddfb192655416b1ecb09027cc94420d3" translate="yes" xml:space="preserve">
          <source>Changes with JSON/JSONB serialization</source>
          <target state="translated">JSON / JSONB 직렬화로 변경</target>
        </trans-unit>
        <trans-unit id="7c4e46c1697d630c0294a24132d51a63b88ec96b" translate="yes" xml:space="preserve">
          <source>Changing Columns</source>
          <target state="translated">열 변경</target>
        </trans-unit>
        <trans-unit id="bb5114af7f11606260b4090f9bf1e88514fec519" translate="yes" xml:space="preserve">
          <source>Changing Existing Migrations</source>
          <target state="translated">기존 마이그레이션 변경</target>
        </trans-unit>
        <trans-unit id="582e771a391d143e0f172e4d4d9bfdfdd7ce0552" translate="yes" xml:space="preserve">
          <source>Changing Tables</source>
          <target state="translated">테이블 변경</target>
        </trans-unit>
        <trans-unit id="1f7824ca94319f2fc9d42a0a36de869494f3d625" translate="yes" xml:space="preserve">
          <source>Changing an existing application</source>
          <target state="translated">기존 애플리케이션 변경</target>
        </trans-unit>
        <trans-unit id="1c802e2d8ba51a09a7dc9e785f355ecdd665289c" translate="yes" xml:space="preserve">
          <source>Changing the &lt;em&gt;assets&lt;/em&gt; Path</source>
          <target state="translated">&lt;em&gt;자산&lt;/em&gt; 경로 변경</target>
        </trans-unit>
        <trans-unit id="c643e55e89a6b2de0e65f36cc2328867b75361d7" translate="yes" xml:space="preserve">
          <source>Changing the Output of Running Migrations</source>
          <target state="translated">마이그레이션 실행 결과 변경</target>
        </trans-unit>
        <trans-unit id="2f4d171e7961ee6750a402b0fc5f121cc40f9872" translate="yes" xml:space="preserve">
          <source>Changing the default settings</source>
          <target state="translated">기본 설정 변경</target>
        </trans-unit>
        <trans-unit id="323c2bb37624fc396e958826c6f7d0fe8e534aa6" translate="yes" xml:space="preserve">
          <source>Changing the driver configuration options is easy. Let's say you want to use the Firefox browser instead of Chrome. In your &lt;code&gt;application_system_test_case.rb&lt;/code&gt; file add the following:</source>
          <target state="translated">드라이버 구성 옵션을 쉽게 변경할 수 있습니다. Chrome 대신 Firefox 브라우저를 사용한다고 가정 해 보겠습니다. 당신에 &lt;code&gt;application_system_test_case.rb&lt;/code&gt; 의 파일에 다음을 추가합니다 :</target>
        </trans-unit>
        <trans-unit id="d11fd9e74ba924a2d5c7bf1dceb97c3651048fca" translate="yes" xml:space="preserve">
          <source>Changing the request encoding</source>
          <target state="translated">요청 인코딩 변경</target>
        </trans-unit>
        <trans-unit id="62f23b22363e0b883e74c4e4fe288cf98fc84376" translate="yes" xml:space="preserve">
          <source>Changing the secret_key_base when using the &lt;code&gt;CookieStore&lt;/code&gt; will invalidate all existing sessions.</source>
          <target state="translated">&lt;code&gt;CookieStore&lt;/code&gt; 를 사용할 때 secret_key_base를 변경하면 모든 기존 세션이 무효화됩니다.</target>
        </trans-unit>
        <trans-unit id="62d7eaa2091111b08a960e2ee82af38ba7b28389" translate="yes" xml:space="preserve">
          <source>Changing the value of &lt;code&gt;config.action_controller.perform_caching&lt;/code&gt; will only have an effect on the caching provided by the Action Controller component. For instance, it will not impact low-level caching, that we address &lt;a href=&quot;#low-level-caching&quot;&gt;below&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;config.action_controller.perform_caching&lt;/code&gt; 의 값을 변경하면 Action Controller 구성 요소가 제공하는 캐싱에만 영향을 미칩니다. 예를 들어, &lt;a href=&quot;#low-level-caching&quot;&gt;아래에서&lt;/a&gt; 다루는 저수준 캐싱에는 영향을 미치지 않습니다 .</target>
        </trans-unit>
        <trans-unit id="42aa7cb3b5b450e9fb445b27f6aefde9f798bb85" translate="yes" xml:space="preserve">
          <source>Channel Test Case</source>
          <target state="translated">채널 테스트 사례</target>
        </trans-unit>
        <trans-unit id="0099b82a50cec8d8329d0797acce9c27e2cf4b62" translate="yes" xml:space="preserve">
          <source>Channel instances are long-lived. A channel object will be instantiated when the cable consumer becomes a subscriber, and then lives until the consumer disconnects. This may be seconds, minutes, hours, or even days. That means you have to take special care not to do anything silly in a channel that would balloon its memory footprint or whatever. The references are forever, so they won't be released as is normally the case with a controller instance that gets thrown away after every request.</source>
          <target state="translated">채널 인스턴스는 오래 지속됩니다. 케이블 소비자가 가입자가되면 채널 객체가 인스턴스화되고 소비자가 연결을 끊을 때까지 유지됩니다. 이것은 초, 분, 시간 또는 일일 수 있습니다. 즉, 메모리 풋 프린트 나 그 밖의 무엇이든 벌어 질 수있는 채널에서 어리석은 행동을하지 않도록 특별한주의를 기울여야합니다. 참조는 영구적이므로 모든 요청 후에 폐기되는 컨트롤러 인스턴스의 경우와 같이 일반적으로 해제되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="dcc6107d2259842c6bdf9874dad91725a291c67a" translate="yes" xml:space="preserve">
          <source>Channel::Base</source>
          <target state="translated">Channel::Base</target>
        </trans-unit>
        <trans-unit id="0bf3d88d764f364bbefc4382a3484db015e0e199" translate="yes" xml:space="preserve">
          <source>Channel::Base#connection</source>
          <target state="translated">Channel::Base#connection</target>
        </trans-unit>
        <trans-unit id="c91227d30aeadcbff1f7a4e0ccd3b0d01860c90f" translate="yes" xml:space="preserve">
          <source>Channel::Base#defer_subscription_confirmation!</source>
          <target state="translated">Channel::Base#defer_subscription_confirmation!</target>
        </trans-unit>
        <trans-unit id="392c9e90df9b3f2e8e747cdab0e9d9c87367dab4" translate="yes" xml:space="preserve">
          <source>Channel::Base#defer_subscription_confirmation?</source>
          <target state="translated">Channel::Base#defer_subscription_confirmation?</target>
        </trans-unit>
        <trans-unit id="a7ac4bdde1159cfbd0ea68811b819e7474bec25f" translate="yes" xml:space="preserve">
          <source>Channel::Base#ensure_confirmation_sent</source>
          <target state="translated">Channel::Base#ensure_confirmation_sent</target>
        </trans-unit>
        <trans-unit id="84bd3100249a9eed4ddb7a1bacb2c4510b46b384" translate="yes" xml:space="preserve">
          <source>Channel::Base#identifier</source>
          <target state="translated">Channel::Base#identifier</target>
        </trans-unit>
        <trans-unit id="3ae983f3cd110396a04fee284b62d5409b964c38" translate="yes" xml:space="preserve">
          <source>Channel::Base#params</source>
          <target state="translated">Channel::Base#params</target>
        </trans-unit>
        <trans-unit id="e7f6c9a7c6cd93a0078a41e4eed65583f57394bc" translate="yes" xml:space="preserve">
          <source>Channel::Base#perform_action</source>
          <target state="translated">Channel::Base#perform_action</target>
        </trans-unit>
        <trans-unit id="2ca0b5ba6de671a2ea18e47bba873102c6df88de" translate="yes" xml:space="preserve">
          <source>Channel::Base#reject</source>
          <target state="translated">Channel::Base#reject</target>
        </trans-unit>
        <trans-unit id="13b8da2e62787e7035b0ad9cf264bae9b69d869c" translate="yes" xml:space="preserve">
          <source>Channel::Base#subscribe_to_channel</source>
          <target state="translated">Channel::Base#subscribe_to_channel</target>
        </trans-unit>
        <trans-unit id="8e611e099888607d2d7b4139b8db99bba68f6d28" translate="yes" xml:space="preserve">
          <source>Channel::Base#subscribed</source>
          <target state="translated">Channel::Base#subscribed</target>
        </trans-unit>
        <trans-unit id="7152c1fee495d21c5a9b5d7af405e2e7cced329a" translate="yes" xml:space="preserve">
          <source>Channel::Base#subscription_confirmation_sent?</source>
          <target state="translated">Channel::Base#subscription_confirmation_sent?</target>
        </trans-unit>
        <trans-unit id="b397797a4610caea8f3b8dc07fe9790a97b3f433" translate="yes" xml:space="preserve">
          <source>Channel::Base#subscription_rejected?</source>
          <target state="translated">Channel::Base#subscription_rejected?</target>
        </trans-unit>
        <trans-unit id="e895a840c4ec9207d85cdcc5eab8ca70a3806e2e" translate="yes" xml:space="preserve">
          <source>Channel::Base#transmit</source>
          <target state="translated">Channel::Base#transmit</target>
        </trans-unit>
        <trans-unit id="33c472fd7b81b9278aab92934b6e9c96ea9895d7" translate="yes" xml:space="preserve">
          <source>Channel::Base#unsubscribed</source>
          <target state="translated">Channel::Base#unsubscribed</target>
        </trans-unit>
        <trans-unit id="e19ce5f7c2b70de0bd9e7ae7cd7fa60c7aa6f000" translate="yes" xml:space="preserve">
          <source>Channel::Base::action_methods</source>
          <target state="translated">Channel::Base::action_methods</target>
        </trans-unit>
        <trans-unit id="d3f413a182cd8c221a5c328ffcafa7b66642c971" translate="yes" xml:space="preserve">
          <source>Channel::Base::clear_action_methods!</source>
          <target state="translated">Channel::Base::clear_action_methods!</target>
        </trans-unit>
        <trans-unit id="2d804e3cdb06b563b2355cb0e12a4d321fd94470" translate="yes" xml:space="preserve">
          <source>Channel::Base::method_added</source>
          <target state="translated">Channel::Base::method_added</target>
        </trans-unit>
        <trans-unit id="30f458c915d4061b931ee304012102779d32fdce" translate="yes" xml:space="preserve">
          <source>Channel::Base::new</source>
          <target state="translated">Channel::Base::new</target>
        </trans-unit>
        <trans-unit id="9a855b731671a6b6ff4ba3d912bbbefd3fbef309" translate="yes" xml:space="preserve">
          <source>Channel::Broadcasting::ClassMethods</source>
          <target state="translated">Channel::Broadcasting::ClassMethods</target>
        </trans-unit>
        <trans-unit id="7750564d945387595a317ae4610e4a8bbb922bc7" translate="yes" xml:space="preserve">
          <source>Channel::Broadcasting::ClassMethods#broadcast_to</source>
          <target state="translated">Channel::Broadcasting::ClassMethods#broadcast_to</target>
        </trans-unit>
        <trans-unit id="c5da2174eba476f780115dfd071d35aa945ee105" translate="yes" xml:space="preserve">
          <source>Channel::Broadcasting::ClassMethods#broadcasting_for</source>
          <target state="translated">Channel::Broadcasting::ClassMethods#broadcasting_for</target>
        </trans-unit>
        <trans-unit id="c455260f270edcfc0b66e8d7673489586fa2d2e4" translate="yes" xml:space="preserve">
          <source>Channel::ChannelStub</source>
          <target state="translated">Channel::ChannelStub</target>
        </trans-unit>
        <trans-unit id="dec84f0d8bb57f1877c323bc50bc008d2825f85d" translate="yes" xml:space="preserve">
          <source>Channel::ChannelStub#confirmed?</source>
          <target state="translated">Channel::ChannelStub#confirmed?</target>
        </trans-unit>
        <trans-unit id="095e010bd1423f04be4360cd97499e7026836d5c" translate="yes" xml:space="preserve">
          <source>Channel::ChannelStub#rejected?</source>
          <target state="translated">Channel::ChannelStub#rejected?</target>
        </trans-unit>
        <trans-unit id="bee40cd6a71f5767feafeca237eca75c3d7347a9" translate="yes" xml:space="preserve">
          <source>Channel::ChannelStub#start_periodic_timers</source>
          <target state="translated">Channel::ChannelStub#start_periodic_timers</target>
        </trans-unit>
        <trans-unit id="14c31701d808a22e1e53670ec1e269f8f27c4dba" translate="yes" xml:space="preserve">
          <source>Channel::ChannelStub#stop_all_streams</source>
          <target state="translated">Channel::ChannelStub#stop_all_streams</target>
        </trans-unit>
        <trans-unit id="9fbc8b995cd322409e00efb1e50bade26d919628" translate="yes" xml:space="preserve">
          <source>Channel::ChannelStub#stop_periodic_timers</source>
          <target state="translated">Channel::ChannelStub#stop_periodic_timers</target>
        </trans-unit>
        <trans-unit id="32817e60938f95a74736e92bf1a3facdce70d3e9" translate="yes" xml:space="preserve">
          <source>Channel::ChannelStub#stream_from</source>
          <target state="translated">Channel::ChannelStub#stream_from</target>
        </trans-unit>
        <trans-unit id="0ab15642f4e66f6c6a1a95f8dc193749726aba91" translate="yes" xml:space="preserve">
          <source>Channel::ChannelStub#streams</source>
          <target state="translated">Channel::ChannelStub#streams</target>
        </trans-unit>
        <trans-unit id="0eba55b68c9548f5ada3e24a395025ef95fe979e" translate="yes" xml:space="preserve">
          <source>Channel::Naming::ClassMethods</source>
          <target state="translated">Channel::Naming::ClassMethods</target>
        </trans-unit>
        <trans-unit id="14c8464702c8397beed6ab30c829d76603d2fd6a" translate="yes" xml:space="preserve">
          <source>Channel::Naming::ClassMethods#channel_name</source>
          <target state="translated">Channel::Naming::ClassMethods#channel_name</target>
        </trans-unit>
        <trans-unit id="50358968fe5b63622cef417a97130e7358260a0f" translate="yes" xml:space="preserve">
          <source>Channel::PeriodicTimers::ClassMethods</source>
          <target state="translated">Channel::PeriodicTimers::ClassMethods</target>
        </trans-unit>
        <trans-unit id="9020630a6bcbecb89b7ea05db569be946c0c07a6" translate="yes" xml:space="preserve">
          <source>Channel::PeriodicTimers::ClassMethods#periodically</source>
          <target state="translated">Channel::PeriodicTimers::ClassMethods#periodically</target>
        </trans-unit>
        <trans-unit id="71f92ba11cd45e88e78872bdaf897c29b3884e4f" translate="yes" xml:space="preserve">
          <source>Channel::Streams</source>
          <target state="translated">Channel::Streams</target>
        </trans-unit>
        <trans-unit id="5d7d9e6fe78e0f6984a30e5963da8533f21a6f50" translate="yes" xml:space="preserve">
          <source>Channel::Streams#stop_all_streams</source>
          <target state="translated">Channel::Streams#stop_all_streams</target>
        </trans-unit>
        <trans-unit id="57cfb65f7a26112f18efe962fabbf6d44468096f" translate="yes" xml:space="preserve">
          <source>Channel::Streams#stream_for</source>
          <target state="translated">Channel::Streams#stream_for</target>
        </trans-unit>
        <trans-unit id="ac48c7b94624e5ba64b9063e13795e90abc16c48" translate="yes" xml:space="preserve">
          <source>Channel::Streams#stream_from</source>
          <target state="translated">Channel::Streams#stream_from</target>
        </trans-unit>
        <trans-unit id="18e03e2a37ba37df713f9665ef752fb8b40fc1e8" translate="yes" xml:space="preserve">
          <source>Channels</source>
          <target state="translated">Channels</target>
        </trans-unit>
        <trans-unit id="034e27330489dbd79dd52ada1f349e61e54dee04" translate="yes" xml:space="preserve">
          <source>Chapters</source>
          <target state="translated">Chapters</target>
        </trans-unit>
        <trans-unit id="dc22454aef99015cca1c1bd46d773564669b7c1f" translate="yes" xml:space="preserve">
          <source>Characters considered unsafe for storage (e.g. , $, and the RTL override character) are replaced with a dash.</source>
          <target state="translated">저장에 안전하지 않은 것으로 간주되는 문자 (예 :, $ 및 RTL 대체 문자)는 대시로 바뀝니다.</target>
        </trans-unit>
        <trans-unit id="fca0e860f0a1018aba0f98129e9f3b6504561628" translate="yes" xml:space="preserve">
          <source>Check &lt;a href=&quot;../naming&quot;&gt;ActiveModel::Naming&lt;/a&gt; for more information.</source>
          <target state="translated">확인 &lt;a href=&quot;../naming&quot;&gt;ActiveModel을 :: 명명&lt;/a&gt; 자세한 내용은.</target>
        </trans-unit>
        <trans-unit id="3cd78dfb5fb8322b68ffb7e94e1562abf703fff7" translate="yes" xml:space="preserve">
          <source>Check &lt;a href=&quot;application/configuration&quot;&gt;Rails::Application::Configuration&lt;/a&gt; to see them all.</source>
          <target state="translated">확인 &lt;a href=&quot;application/configuration&quot;&gt;레일 :: 응용 :: 구성을&lt;/a&gt; 모두 볼 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ac7941548cb82b0d16e8d5c9a877a12b776bf931" translate="yes" xml:space="preserve">
          <source>Check for cross-origin JavaScript responses.</source>
          <target state="translated">교차 출처 JavaScript 응답을 확인하십시오.</target>
        </trans-unit>
        <trans-unit id="196eb6ea3ad56a8e3e29ea4c0c3fbf880435596c" translate="yes" xml:space="preserve">
          <source>Check here for more details: &lt;a href=&quot;https://git.postgresql.org/gitweb/?p=postgresql.git;a=blob;f=src/backend/utils/cache/plancache.c#l573&quot;&gt;git.postgresql.org/gitweb/?p=postgresql.git;a=blob;f=src/backend/utils/cache/plancache.c#l573&lt;/a&gt;</source>
          <target state="translated">자세한 내용은 여기를 확인하십시오 : &lt;a href=&quot;https://git.postgresql.org/gitweb/?p=postgresql.git;a=blob;f=src/backend/utils/cache/plancache.c#l573&quot;&gt;git.postgresql.org/gitweb/?p=postgresql.git;a=blob;f=src/backend/utils/cache/plancache.c#l573&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="c0b01acd2375d41431ade9399a06e7f24ffe3d44" translate="yes" xml:space="preserve">
          <source>Check if a cached fragment from the location signified by &lt;code&gt;key&lt;/code&gt; exists (see &lt;code&gt;expire_fragment&lt;/code&gt; for acceptable formats).</source>
          <target state="translated">&lt;code&gt;key&lt;/code&gt; 표시된 위치에서 캐시 된 조각이 있는지 확인하십시오 ( 허용되는 형식 은 &lt;code&gt;expire_fragment&lt;/code&gt; 참조 ).</target>
        </trans-unit>
        <trans-unit id="a28a3911c7b9c577a233f872738aeb512105b268" translate="yes" xml:space="preserve">
          <source>Check if any of the entries were updated. If so, the watched and/or updated_at values are cached until the block is executed via &lt;code&gt;execute&lt;/code&gt; or &lt;code&gt;execute_if_updated&lt;/code&gt;.</source>
          <target state="translated">업데이트 된 항목이 있는지 확인하십시오. 그렇다면 watched 및 / 또는 updated_at 값은 블록이 &lt;code&gt;execute&lt;/code&gt; 또는 &lt;code&gt;execute_if_updated&lt;/code&gt; 를 통해 실행될 때까지 캐시 됩니다.</target>
        </trans-unit>
        <trans-unit id="7e6a35e32dec654fac86e2ab4997bd22748d359b" translate="yes" xml:space="preserve">
          <source>Check if this is the first iteration of the partial.</source>
          <target state="translated">이것이 부분의 첫 번째 반복인지 확인하십시오.</target>
        </trans-unit>
        <trans-unit id="a39394b681e51ab19fefed6407bb87b2d9646d50" translate="yes" xml:space="preserve">
          <source>Check if this is the last iteration of the partial.</source>
          <target state="translated">이것이 부분의 마지막 반복인지 확인하십시오.</target>
        </trans-unit>
        <trans-unit id="875150d32e04803f849d39e3c4799c8f1a3d2605" translate="yes" xml:space="preserve">
          <source>Check out &lt;code&gt;ActiveRecord::Locking::Pessimistic&lt;/code&gt; for an alternative.</source>
          <target state="translated">대안은 &lt;code&gt;ActiveRecord::Locking::Pessimistic&lt;/code&gt; 을 확인하십시오 .</target>
        </trans-unit>
        <trans-unit id="376e7f4e698015406a7c9d34d29714386198d1b6" translate="yes" xml:space="preserve">
          <source>Check out the controller and modify it a little (in &lt;code&gt;app/controllers/greetings_controller.rb&lt;/code&gt;):</source>
          <target state="translated">컨트롤러를 확인하고 약간 수정하십시오 ( &lt;code&gt;app/controllers/greetings_controller.rb&lt;/code&gt; 에서 ).</target>
        </trans-unit>
        <trans-unit id="be1b9bef8ba2034413737cc5fed9ba4fbe471621" translate="yes" xml:space="preserve">
          <source>Check response freshness (Last-Modified and ETag) against request If-Modified-Since and If-None-Match conditions. If both headers are supplied, both must match, or the request is not considered fresh.</source>
          <target state="translated">요청 If-Modified-Since 및 If-None-Match 조건에 대해 응답 신선도 (마지막 수정 및 ETag)를 확인하십시오. 두 헤더가 모두 제공되는 경우 두 헤더가 모두 일치해야합니다. 그렇지 않으면 요청이 새로운 것으로 간주되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="2e405d12f6338ce7abce83349be45f35bdeb1be0" translate="yes" xml:space="preserve">
          <source>Check the &lt;code&gt;Rails::Paths::Path&lt;/code&gt; documentation for more information.</source>
          <target state="translated">자세한 내용 은 &lt;code&gt;Rails::Paths::Path&lt;/code&gt; 설명서를 확인하십시오.</target>
        </trans-unit>
        <trans-unit id="13b6c42d356f2de8b868eff7238a94752d4970cf" translate="yes" xml:space="preserve">
          <source>Check the connection back in to the connection pool</source>
          <target state="translated">연결 풀로 다시 연결 확인</target>
        </trans-unit>
        <trans-unit id="9576dab774c6a7cf09b22556659b2a695b3ef9d5" translate="yes" xml:space="preserve">
          <source>Check whether the integer is evenly divisible by the argument.</source>
          <target state="translated">정수가 인수로 균등하게 나눌 수 있는지 확인하십시오.</target>
        </trans-unit>
        <trans-unit id="48eb6d16d6889fa905ca140bee41b3b56f6b3d32" translate="yes" xml:space="preserve">
          <source>Check your CDN documentation for any additional information they may provide such as &lt;code&gt;X-Cache&lt;/code&gt; or for any additional headers they may add.</source>
          <target state="translated">&lt;code&gt;X-Cache&lt;/code&gt; 와 같이 제공 할 수있는 추가 정보 나 추가 할 수있는 추가 헤더 는 CDN 설명서를 확인하십시오 .</target>
        </trans-unit>
        <trans-unit id="c785d4171ccc78a8a79c08226159ac2e71fae378" translate="yes" xml:space="preserve">
          <source>Check-in a database connection back into the pool, indicating that you no longer need this connection.</source>
          <target state="translated">풀에 다시 데이터베이스 연결을 체크인하여 더 이상이 연결이 필요하지 않음을 나타냅니다.</target>
        </trans-unit>
        <trans-unit id="e10fbc8c0e80c4c396d936cd663ffad0d3430a6d" translate="yes" xml:space="preserve">
          <source>Check-out a database connection from the pool, indicating that you want to use it. You should call &lt;a href=&quot;connectionpool#method-i-checkin&quot;&gt;checkin&lt;/a&gt; when you no longer need this.</source>
          <target state="translated">풀에서 데이터베이스 연결을 체크 아웃하여 사용함을 나타냅니다. 당신은 호출해야 &lt;a href=&quot;connectionpool#method-i-checkin&quot;&gt;체크인&lt;/a&gt; 더 이상이 필요하지 않을 때.</target>
        </trans-unit>
        <trans-unit id="7f7b24282ced63cc92b7de9aebe4194b8776a3c1" translate="yes" xml:space="preserve">
          <source>Checkboxes are form controls that give the user a set of options they can enable or disable:</source>
          <target state="translated">확인란은 사용자가 활성화 또는 비활성화 할 수있는 옵션 세트를 제공하는 양식 컨트롤입니다.</target>
        </trans-unit>
        <trans-unit id="550833600b70a89c685c990b41ed31e91be0f65b" translate="yes" xml:space="preserve">
          <source>Checks for IP spoofing attacks.</source>
          <target state="translated">IP 스푸핑 공격을 확인합니다.</target>
        </trans-unit>
        <trans-unit id="b48ee2984c71753f67c6a55be3a6ac5817751f25" translate="yes" xml:space="preserve">
          <source>Checks if a signed message could have been generated by signing an object with the &lt;code&gt;MessageVerifier&lt;/code&gt;'s secret.</source>
          <target state="translated">&lt;code&gt;MessageVerifier&lt;/code&gt; 의 비밀로 개체에 서명하여 서명 된 메시지가 생성 될 수 있는지 확인합니다 .</target>
        </trans-unit>
        <trans-unit id="868977511d695e49f28c3a64cbe882aeed9ece9c" translate="yes" xml:space="preserve">
          <source>Checks if any of the authenticity tokens from the request are valid.</source>
          <target state="translated">요청의 인증 토큰이 유효한지 확인합니다.</target>
        </trans-unit>
        <trans-unit id="9c94d968cbb5302f333fea2251628408c1a97284" translate="yes" xml:space="preserve">
          <source>Checks if the application's configurations are empty.</source>
          <target state="translated">응용 프로그램 구성이 비어 있는지 확인합니다.</target>
        </trans-unit>
        <trans-unit id="434c5d8cb183ed054265d20f0bc50a45df2ad873" translate="yes" xml:space="preserve">
          <source>Checks if the controller allows forgery protection.</source>
          <target state="translated">컨트롤러가 위조 방지를 허용하는지 확인합니다.</target>
        </trans-unit>
        <trans-unit id="6070cc08d916e2eb095892d656a5c99b143fd482" translate="yes" xml:space="preserve">
          <source>Checks if the request originated from the same origin by looking at the Origin header.</source>
          <target state="translated">Origin 헤더를보고 요청이 동일한 출처에서 시작되었는지 확인합니다.</target>
        </trans-unit>
        <trans-unit id="99323fcfd6ae5ce537512fdc7d6818d8acf25048" translate="yes" xml:space="preserve">
          <source>Checks pending migrations and raises &lt;code&gt;ActiveRecord::PendingMigrationError&lt;/code&gt; if any migrations are pending.</source>
          <target state="translated">보류중인 마이그레이션을 확인 하고 마이그레이션이 보류중인 경우 &lt;code&gt;ActiveRecord::PendingMigrationError&lt;/code&gt; 발생 시킵니다 .</target>
        </trans-unit>
        <trans-unit id="a82ac065433b3c9becd14df5993e30ee1f620a8f" translate="yes" xml:space="preserve">
          <source>Checks the client's masked token to see if it matches the session token. Essentially the inverse of &lt;code&gt;masked_authenticity_token&lt;/code&gt;.</source>
          <target state="translated">클라이언트의 마스킹 된 토큰이 세션 토큰과 일치하는지 확인합니다. 본질적으로 &lt;code&gt;masked_authenticity_token&lt;/code&gt; 의 반대입니다 .</target>
        </trans-unit>
        <trans-unit id="a9b38f8058e25834c4df470bcf748616d93cbfe3" translate="yes" xml:space="preserve">
          <source>Checks the hash for a key matching the argument passed in:</source>
          <target state="translated">전달 된 인수와 일치하는 키에 대한 해시를 확인합니다.</target>
        </trans-unit>
        <trans-unit id="3a2fbfe6e15fa114bde1520c13fcb2c90ebfa60a" translate="yes" xml:space="preserve">
          <source>Checks to see if a column exists in a given table.</source>
          <target state="translated">주어진 테이블에 열이 있는지 확인합니다.</target>
        </trans-unit>
        <trans-unit id="0358c91bcdb73355358abcb749e74a1473c191e7" translate="yes" xml:space="preserve">
          <source>Checks to see if a column exists.</source>
          <target state="translated">열이 존재하는지 확인합니다.</target>
        </trans-unit>
        <trans-unit id="931c1417f62b25c16765d500637fc4ce60b6b273" translate="yes" xml:space="preserve">
          <source>Checks to see if a foreign key exists on a table for a given foreign key definition.</source>
          <target state="translated">주어진 외래 키 정의에 대한 외래 키가 테이블에 존재하는지 확인합니다.</target>
        </trans-unit>
        <trans-unit id="333d52866904d05fdedff85cd1ae966d66394c42" translate="yes" xml:space="preserve">
          <source>Checks to see if a foreign key exists.</source>
          <target state="translated">외래 키가 있는지 확인합니다.</target>
        </trans-unit>
        <trans-unit id="e98a31f6835f78df7625e5e8b8655b0df6b83d7d" translate="yes" xml:space="preserve">
          <source>Checks to see if an index exists on a table for a given index definition.</source>
          <target state="translated">주어진 인덱스 정의에 대한 인덱스가 테이블에 존재하는지 확인합니다.</target>
        </trans-unit>
        <trans-unit id="b4603b09d9aa2c8e97e5128f683e439c4d9f86fa" translate="yes" xml:space="preserve">
          <source>Checks to see if an index exists.</source>
          <target state="translated">색인이 존재하는지 확인합니다.</target>
        </trans-unit>
        <trans-unit id="8b5f8d48d660550d41273d52695e040ff77d7342" translate="yes" xml:space="preserve">
          <source>Checks to see if the data source &lt;code&gt;name&lt;/code&gt; exists on the database.</source>
          <target state="translated">데이터베이스에 데이터 소스 &lt;code&gt;name&lt;/code&gt; 이 있는지 확인 합니다.</target>
        </trans-unit>
        <trans-unit id="ae3525bbc86136b3ef79c2837eeaf2c84c8b5c30" translate="yes" xml:space="preserve">
          <source>Checks to see if the table &lt;code&gt;table_name&lt;/code&gt; exists on the database.</source>
          <target state="translated">&lt;code&gt;table_name&lt;/code&gt; 테이블 이 데이터베이스에 있는지 확인 합니다.</target>
        </trans-unit>
        <trans-unit id="12f786eac6dabe2d81212d7334e4752af6533946" translate="yes" xml:space="preserve">
          <source>Checks to see if the view &lt;code&gt;view_name&lt;/code&gt; exists on the database.</source>
          <target state="translated">&lt;code&gt;view_name&lt;/code&gt; 뷰 가 데이터베이스에 있는지 확인 합니다.</target>
        </trans-unit>
        <trans-unit id="f35d12aeb6fe3308d5b9f0ebc9dba3426411ba76" translate="yes" xml:space="preserve">
          <source>Checks whether an associated object with the given conditions exists. Uses the same rules as &lt;a href=&quot;../findermethods#method-i-exists-3F&quot;&gt;ActiveRecord::FinderMethods#exists?&lt;/a&gt;.</source>
          <target state="translated">주어진 조건과 관련된 개체가 존재하는지 확인합니다. &lt;a href=&quot;../findermethods#method-i-exists-3F&quot;&gt;ActiveRecord :: FinderMethods # exists&lt;/a&gt; 와 같은 규칙을 사용 합니까? .</target>
        </trans-unit>
        <trans-unit id="273aa88cf3bfea8faa4469152ad6e4d6e4816aef" translate="yes" xml:space="preserve">
          <source>Checks whether the columns hash is already cached for a table.</source>
          <target state="translated">열 해시가 이미 테이블에 대해 캐시되어 있는지 확인합니다.</target>
        </trans-unit>
        <trans-unit id="842027f70c4cc295de4ac0f8bc26841139db8d16" translate="yes" xml:space="preserve">
          <source>Checks whether the connection to the database is still active (i.e. not stale). This is done under the hood by calling &lt;a href=&quot;abstractadapter#method-i-active-3F&quot;&gt;active?&lt;/a&gt;. If the connection is no longer active, then this method will reconnect to the database.</source>
          <target state="translated">데이터베이스 연결이 여전히 활성화되어 있는지 (즉, 오래되지 않았는지) 확인합니다. 이것은 &lt;a href=&quot;abstractadapter#method-i-active-3F&quot;&gt;active&lt;/a&gt; 를 호출하여 후드 아래에서 수행 됩니까? . 연결이 더 이상 활성화되어 있지 않으면이 방법은 데이터베이스에 다시 연결됩니다.</target>
        </trans-unit>
        <trans-unit id="eacf13efada050f2cb4ef9776d3881710b71758a" translate="yes" xml:space="preserve">
          <source>Checks whether the connection to the database is still active. This includes checking whether the database is actually capable of responding, i.e. whether the connection isn't stale.</source>
          <target state="translated">데이터베이스에 대한 연결이 여전히 활성인지 확인합니다. 여기에는 데이터베이스가 실제로 응답 할 수 있는지, 즉 연결이 오래되었는지 여부를 확인하는 작업이 포함됩니다.</target>
        </trans-unit>
        <trans-unit id="75af4c692ca06a3f9e51fdb949872b4067774cd0" translate="yes" xml:space="preserve">
          <source>Checksum to ensure integrity</source>
          <target state="translated">무결성을 보장하기위한 체크섬</target>
        </trans-unit>
        <trans-unit id="3eaec49b293a25be72bc0fc2ec48cfad8f4d90f4" translate="yes" xml:space="preserve">
          <source>Child records are validated unless &lt;code&gt;:validate&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;:validate&lt;/code&gt; 가 &lt;code&gt;false&lt;/code&gt; 가 아닌 한 하위 레코드의 유효성이 검사됩니다 .</target>
        </trans-unit>
        <trans-unit id="1f15cfc83840bf272d8ef2670bd7bc023fe49b9a" translate="yes" xml:space="preserve">
          <source>Choose these in certain, specific cases. It's the opinion of the Rails team that model-level validations are the most appropriate in most circumstances.</source>
          <target state="translated">특정한 경우에 이것을 선택하십시오. 레일스 팀은 대부분의 상황에서 모델 수준의 검증이 가장 적합하다고 생각합니다.</target>
        </trans-unit>
        <trans-unit id="cdde0bb81983f00ae222cd8b5f50aca226e5802f" translate="yes" xml:space="preserve">
          <source>Choosing Between &lt;code&gt;belongs_to&lt;/code&gt; and &lt;code&gt;has_one&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;belongs_to&lt;/code&gt; 와 &lt;code&gt;has_one&lt;/code&gt; 사이에서 선택하기</target>
        </trans-unit>
        <trans-unit id="4a87a5f90d156fdc81ed6adc138ea34793a3206b" translate="yes" xml:space="preserve">
          <source>Choosing Between &lt;code&gt;has_many :through&lt;/code&gt; and &lt;code&gt;has_and_belongs_to_many&lt;/code&gt;</source>
          <target state="translated">중 선택 &lt;code&gt;has_many :through&lt;/code&gt; 와 &lt;code&gt;has_and_belongs_to_many&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5ef3ada4adae5826e3eddb5cd2326610e2b78da8" translate="yes" xml:space="preserve">
          <source>Choosing Controller Modules</source>
          <target state="translated">컨트롤러 모듈 선택</target>
        </trans-unit>
        <trans-unit id="5f2cc73a761e23bb4214e0426f511edaf7e8d3b8" translate="yes" xml:space="preserve">
          <source>Choosing Middleware</source>
          <target state="translated">미들웨어 선택</target>
        </trans-unit>
        <trans-unit id="b57c05ac052a7782682cb87c033e225e2f8b9305" translate="yes" xml:space="preserve">
          <source>Choosing which way to build a many-to-many relationship is not always simple. If you need to work with the relationship model as its own entity, use &lt;a href=&quot;classmethods#method-i-has_many&quot;&gt;has_many&lt;/a&gt;&lt;code&gt;:through&lt;/code&gt;. Use &lt;a href=&quot;classmethods#method-i-has_and_belongs_to_many&quot;&gt;has_and_belongs_to_many&lt;/a&gt; when working with legacy schemas or when you never work directly with the relationship itself.</source>
          <target state="translated">다 대 다 관계를 구축하는 방법을 선택하는 것이 항상 간단한 것은 아닙니다. 관계 모델을 자체 엔티티로 작업해야하는 경우 &lt;a href=&quot;classmethods#method-i-has_many&quot;&gt;has_many &lt;/a&gt; &lt;code&gt;:through&lt;/code&gt; 를 사용하십시오 . 레거시 스키마를 사용하거나 관계 자체를 직접 사용하지 않는 경우 &lt;a href=&quot;classmethods#method-i-has_and_belongs_to_many&quot;&gt;has_and_belongs_to_many를&lt;/a&gt; 사용하십시오 .</target>
        </trans-unit>
        <trans-unit id="00821ecc555bc3c7fcee43debd98a4dad7c19ae2" translate="yes" xml:space="preserve">
          <source>Circular data structure detection</source>
          <target state="translated">원형 데이터 구조 탐지</target>
        </trans-unit>
        <trans-unit id="41ff354b2b330bd1f8a0587675e43cb32a731f33" translate="yes" xml:space="preserve">
          <source>Class</source>
          <target state="translated">Class</target>
        </trans-unit>
        <trans-unit id="b61f0a22825590e758c140f4660a2686e60cc8fc" translate="yes" xml:space="preserve">
          <source>Class Attributes</source>
          <target state="translated">클래스 속성</target>
        </trans-unit>
        <trans-unit id="0499841f82a37405901d9c23e86ff3370d0d3689" translate="yes" xml:space="preserve">
          <source>Class Unload</source>
          <target state="translated">클래스 언로드</target>
        </trans-unit>
        <trans-unit id="491573e040c4d09fb5fe3ae25a6cd2f507eda966" translate="yes" xml:space="preserve">
          <source>Class and Module Definitions are Constant Assignments</source>
          <target state="translated">클래스 및 모듈 정의는 상수 할당입니다</target>
        </trans-unit>
        <trans-unit id="a369a9421a799eecd10cbd877fc7bb63ad1b2f15" translate="yes" xml:space="preserve">
          <source>Class and module definitions can be nested to create namespaces:</source>
          <target state="translated">네임 스페이스를 만들기 위해 클래스 및 모듈 정의를 중첩 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="353fcd07b045e60e6bec72a65403ddb877945e28" translate="yes" xml:space="preserve">
          <source>Class methods on your model are automatically available on scopes. Assuming the following setup:</source>
          <target state="translated">모델의 클래스 메소드는 범위에서 자동으로 사용 가능합니다. 다음 설정을 가정합니다.</target>
        </trans-unit>
        <trans-unit id="361baf3a82b5d3ccefc50ea7b7db5aaa19a372e8" translate="yes" xml:space="preserve">
          <source>Classes and ids for CSS are easy to produce:</source>
          <target state="translated">CSS의 클래스와 ID는 쉽게 생성 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c995e5cbb9b2728eaaa1b27ffdab877822cf979c" translate="yes" xml:space="preserve">
          <source>Clean up hook for parallel testing. This can be used to drop databases if your app uses multiple write/read databases or other clean up before the tests finish. This runs before the forked process is closed.</source>
          <target state="translated">병렬 테스트를 위해 후크를 청소하십시오. 테스트가 완료되기 전에 앱에서 여러 쓰기 / 읽기 데이터베이스 또는 기타 정리를 사용하는 경우 데이터베이스를 삭제하는 데 사용할 수 있습니다. 분기 프로세스가 종료되기 전에 실행됩니다.</target>
        </trans-unit>
        <trans-unit id="7a1f8b34202cf03bf28a97aa80097921712fb066" translate="yes" xml:space="preserve">
          <source>Cleans up tempfiles used to buffer multipart requests.</source>
          <target state="translated">멀티 파트 요청을 버퍼링하는 데 사용되는 임시 파일을 정리합니다.</target>
        </trans-unit>
        <trans-unit id="ad8a688b8596838da6ffe31b6375adddca9341fe" translate="yes" xml:space="preserve">
          <source>Cleanups the cache by removing expired entries.</source>
          <target state="translated">만료 된 항목을 제거하여 캐시를 정리합니다.</target>
        </trans-unit>
        <trans-unit id="081af779487a5d2df7b3ce28614a144ba44674ff" translate="yes" xml:space="preserve">
          <source>Clear any caching the database adapter may be doing.</source>
          <target state="translated">데이터베이스 어댑터가 수행중인 캐싱을 지우십시오.</target>
        </trans-unit>
        <trans-unit id="e070e36061f62abb4505efd54e1899c49e56fc3b" translate="yes" xml:space="preserve">
          <source>Clear out internal caches for the data source &lt;code&gt;name&lt;/code&gt;.</source>
          <target state="translated">데이터 소스 &lt;code&gt;name&lt;/code&gt; 의 내부 캐시를 지우십시오 .</target>
        </trans-unit>
        <trans-unit id="ce3a4c75ed2818253a84d95c37e8a8f79310a943" translate="yes" xml:space="preserve">
          <source>Clear the entire cache on all Redis servers. Safe to use on shared servers if the cache is namespaced.</source>
          <target state="translated">모든 Redis 서버에서 전체 캐시를 지우십시오. 캐시가 네임 스페이스 인 경우 공유 서버에서 사용하기에 안전합니다.</target>
        </trans-unit>
        <trans-unit id="b7a212e73c3d628fce1fad2710e181efcc739fac" translate="yes" xml:space="preserve">
          <source>Clear the entire cache on all memcached servers. This method should be used with care when shared cache is being used.</source>
          <target state="translated">모든 memcached 서버에서 전체 캐시를 지우십시오. 이 방법은 공유 캐시를 사용할 때주의해서 사용해야합니다.</target>
        </trans-unit>
        <trans-unit id="f26b89622db50eb00ae2463a25bee9b99ded07e9" translate="yes" xml:space="preserve">
          <source>Clear the error messages.</source>
          <target state="translated">오류 메시지를 지우십시오.</target>
        </trans-unit>
        <trans-unit id="8b72b5c3df2d467ac9f0af6a398ad097211ad0d4" translate="yes" xml:space="preserve">
          <source>Clears all dirty data: current changes and previous changes.</source>
          <target state="translated">더티 데이터 (현재 변경 사항 및 이전 변경 사항)를 모두 지 웁니다.</target>
        </trans-unit>
        <trans-unit id="5996507354e5a7ef678b5702a66f28e3649c42d7" translate="yes" xml:space="preserve">
          <source>Clears all of the validators and validations.</source>
          <target state="translated">모든 유효성 검사기와 유효성 검사를 지 웁니다.</target>
        </trans-unit>
        <trans-unit id="c504d454a2ef4f73c12578bd0a59fc27df49b92e" translate="yes" xml:space="preserve">
          <source>Clears dirty data and moves &lt;code&gt;changes&lt;/code&gt; to &lt;code&gt;previously_changed&lt;/code&gt; and &lt;code&gt;mutations_from_database&lt;/code&gt; to &lt;code&gt;mutations_before_last_save&lt;/code&gt; respectively.</source>
          <target state="translated">더티 데이터를 지우고 &lt;code&gt;changes&lt;/code&gt; 을 &lt;code&gt;previously_changed&lt;/code&gt; 및 &lt;code&gt;mutations_from_database&lt;/code&gt; 에서 &lt;code&gt;mutations_before_last_save&lt;/code&gt; 로 각각 이동합니다.</target>
        </trans-unit>
        <trans-unit id="54c11ac331bff40950483680e2200c5c2f799452" translate="yes" xml:space="preserve">
          <source>Clears out internal caches</source>
          <target state="translated">내부 캐시를 지 웁니다.</target>
        </trans-unit>
        <trans-unit id="0582e2ce5f27f30cc834464e9d911c65e217f174" translate="yes" xml:space="preserve">
          <source>Clears the cache which maps classes and re-connects connections that require reloading.</source>
          <target state="translated">클래스를 매핑하고 다시로드해야하는 연결을 다시 연결하는 캐시를 지 웁니다.</target>
        </trans-unit>
        <trans-unit id="cd7246c7da7cc1c997919db3351ed9adac25ae89" translate="yes" xml:space="preserve">
          <source>Clears the cache which maps classes.</source>
          <target state="translated">클래스를 매핑하는 캐시를 지 웁니다.</target>
        </trans-unit>
        <trans-unit id="47fbce31f79cdf60bc4f4560c4403feeea7556ef" translate="yes" xml:space="preserve">
          <source>Clears the entire cache. Be careful with this method since it could affect other processes if shared cache is being used.</source>
          <target state="translated">전체 캐시를 지 웁니다. 공유 캐시를 사용중인 경우 다른 프로세스에 영향을 줄 수 있으므로이 방법에주의하십시오.</target>
        </trans-unit>
        <trans-unit id="7bc7c2fa94e548dac10db75be0b0a0fac202a4b9" translate="yes" xml:space="preserve">
          <source>Clears the loaded inflections within a given scope (default is &lt;code&gt;:all&lt;/code&gt;). Give the scope as a symbol of the inflection type, the options are: &lt;code&gt;:plurals&lt;/code&gt;, &lt;code&gt;:singulars&lt;/code&gt;, &lt;code&gt;:uncountables&lt;/code&gt;, &lt;code&gt;:humans&lt;/code&gt;.</source>
          <target state="translated">주어진 범위 내에서로드 된 변곡을 지 웁니다 (기본값은 &lt;code&gt;:all&lt;/code&gt; ). 범위를 변곡 유형의 상징으로 지정하십시오. 옵션은 &lt;code&gt;:plurals&lt;/code&gt; , &lt;code&gt;:singulars&lt;/code&gt; , &lt;code&gt;:uncountables&lt;/code&gt; , &lt;code&gt;:humans&lt;/code&gt; 입니다.</target>
        </trans-unit>
        <trans-unit id="300556a311400e5adcf318c389853564ebefe204" translate="yes" xml:space="preserve">
          <source>Clears the query cache for all connections associated with the current thread.</source>
          <target state="translated">현재 스레드와 관련된 모든 연결에 대한 쿼리 캐시를 지 웁니다.</target>
        </trans-unit>
        <trans-unit id="49c99b8b6d5723a2750f968e7ee6d764e3125596" translate="yes" xml:space="preserve">
          <source>Clears the query cache.</source>
          <target state="translated">쿼리 캐시를 지 웁니다.</target>
        </trans-unit>
        <trans-unit id="3fc08edaa28cc21d94391069eb118d1fe5e5fadd" translate="yes" xml:space="preserve">
          <source>Clears up all existing helpers in this class, only keeping the helper with the same name as this class.</source>
          <target state="translated">이 클래스의 기존 도우미를 모두 지우고이 클래스와 이름이 같은 도우미 만 유지합니다.</target>
        </trans-unit>
        <trans-unit id="30800a1c32c916bf971e667b76bc522a983a474b" translate="yes" xml:space="preserve">
          <source>Clicking this new &quot;Destroy Comment&quot; link will fire off a &lt;code&gt;DELETE
/articles/:article_id/comments/:id&lt;/code&gt; to our &lt;code&gt;CommentsController&lt;/code&gt;, which can then use this to find the comment we want to delete, so let's add a &lt;code&gt;destroy&lt;/code&gt; action to our controller (&lt;code&gt;app/controllers/comments_controller.rb&lt;/code&gt;):</source>
          <target state="translated">이 새로운 &quot;Destroy Comment&quot;링크를 클릭하면 &lt;code&gt;DELETE /articles/:article_id/comments/:id&lt;/code&gt; 가 &lt;code&gt;CommentsController&lt;/code&gt; 로 시작되며,이를 사용하여 삭제하려는 주석을 찾을 수 있으므로 컨트롤러에 &lt;code&gt;destroy&lt;/code&gt; 조치를 추가하겠습니다. ( &lt;code&gt;app/controllers/comments_controller.rb&lt;/code&gt; ) :</target>
        </trans-unit>
        <trans-unit id="c6f33a316221540fd1f8d5d52c69f12c782c96a7" translate="yes" xml:space="preserve">
          <source>Client-Server Interactions</source>
          <target state="translated">클라이언트-서버 상호 작용</target>
        </trans-unit>
        <trans-unit id="c47150a31a2427e1b432c90809d5e033c5c292d7" translate="yes" xml:space="preserve">
          <source>Client-Side Components</source>
          <target state="translated">클라이언트 측 구성 요소</target>
        </trans-unit>
        <trans-unit id="949a316118e339b82aea2478cbfecc5a3c2df0f2" translate="yes" xml:space="preserve">
          <source>Client-side validations can be useful, but are generally unreliable if used alone. If they are implemented using JavaScript, they may be bypassed if JavaScript is turned off in the user's browser. However, if combined with other techniques, client-side validation can be a convenient way to provide users with immediate feedback as they use your site.</source>
          <target state="translated">클라이언트 측 유효성 검사는 유용 할 수 있지만 단독으로 사용하는 경우 일반적으로 신뢰할 수 없습니다. 자바 스크립트를 사용하여 구현 된 경우 사용자 브라우저에서 자바 스크립트가 꺼져 있으면 무시 될 수 있습니다. 그러나 다른 기술과 결합하면 클라이언트 측 유효성 검사는 사용자가 사이트를 사용할 때 즉각적인 피드백을 제공하는 편리한 방법이 될 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="c9ddf8d2efa01ee55b19ab7ab5eee03e556fe3e6" translate="yes" xml:space="preserve">
          <source>Clone and freeze the attributes hash such that associations are still accessible, even on destroyed records, but cloned models will not be frozen.</source>
          <target state="translated">삭제 된 레코드에서도 연결에 여전히 액세스 할 수 있도록 속성 해시를 복제 및 고정하지만 복제 된 모델은 고정되지 않습니다.</target>
        </trans-unit>
        <trans-unit id="ca35c042679d8378e47afdb675ff547d5fa3c927" translate="yes" xml:space="preserve">
          <source>Close the WebSocket connection.</source>
          <target state="translated">WebSocket 연결을 닫습니다.</target>
        </trans-unit>
        <trans-unit id="60dd6d6f5a84988986892e1b35538b54303d473a" translate="yes" xml:space="preserve">
          <source>Close then reopen the connection.</source>
          <target state="translated">연결을 닫았다가 다시여십시오.</target>
        </trans-unit>
        <trans-unit id="2584c1152dd2935ef28999bbe008880eec795456" translate="yes" xml:space="preserve">
          <source>Closes the WebSocket connection if it is open and returns a 404 &amp;ldquo;File not Found&amp;rdquo; response.</source>
          <target state="translated">WebSocket 연결이 열려 있으면 닫고 404 &quot;파일을 찾을 수 없음&quot;응답을 반환합니다.</target>
        </trans-unit>
        <trans-unit id="783dd96212b79b8bb2fafd6b29e2d68e618bee12" translate="yes" xml:space="preserve">
          <source>Clustering and load balancing. One can specify multiple memcached servers, and &lt;a href=&quot;memcachestore&quot;&gt;MemCacheStore&lt;/a&gt; will load balance between all available servers. If a server goes down, then &lt;a href=&quot;memcachestore&quot;&gt;MemCacheStore&lt;/a&gt; will ignore it until it comes back up.</source>
          <target state="translated">클러스터링 및로드 밸런싱. 하나는 여러 개의 memcached 서버를 지정할 수 있으며 &lt;a href=&quot;memcachestore&quot;&gt;MemCacheStore&lt;/a&gt; 는 사용 가능한 모든 서버간에로드 밸런스를 수행합니다. 서버가 다운되면 &lt;a href=&quot;memcachestore&quot;&gt;MemCacheStore&lt;/a&gt; 는 서버가 다시 시작될 때까지 무시합니다.</target>
        </trans-unit>
        <trans-unit id="f5f5398604ae2974d04c2b30dbd393f1a4c31fc2" translate="yes" xml:space="preserve">
          <source>Code examples throughout this guide will refer to one or more of the following models:</source>
          <target state="translated">이 안내서 전체의 코드 예제는 다음 모델 중 하나 이상을 참조합니다.</target>
        </trans-unit>
        <trans-unit id="0d7fefea0506d55fed18734a984fc78b2a86bacb" translate="yes" xml:space="preserve">
          <source>Coding Links to Assets</source>
          <target state="translated">자산에 대한 링크 코딩</target>
        </trans-unit>
        <trans-unit id="85aad7f0894409ac648fb5dd0eda6c6081f1bc5a" translate="yes" xml:space="preserve">
          <source>Coerces time to a string for &lt;a href=&quot;json&quot;&gt;JSON&lt;/a&gt; encoding. The default format is ISO 8601. You can get %Y/%m/%d %H:%M:%S +offset style by setting &lt;code&gt;ActiveSupport::JSON::Encoding.use_standard_json_time_format&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;json&quot;&gt;JSON&lt;/a&gt; 인코딩을 위해 시간을 문자열로 변환합니다 . 기본 형식은 ISO 8601입니다. &lt;code&gt;ActiveSupport::JSON::Encoding.use_standard_json_time_format&lt;/code&gt; 을 &lt;code&gt;false&lt;/code&gt; 로 설정하여 % Y / % m / % d % H : % M : % S + offset 스타일을 얻을 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="a809433cf66e2c59e60de4aa71c982ddad377c2c" translate="yes" xml:space="preserve">
          <source>Coercion</source>
          <target state="translated">Coercion</target>
        </trans-unit>
        <trans-unit id="769d57dd906a07c372b6c954d0b29f2a74f135d5" translate="yes" xml:space="preserve">
          <source>Collection Caching</source>
          <target state="translated">수집 캐싱</target>
        </trans-unit>
        <trans-unit id="f401eafb998eb98a9694bda56df18c6938af43bb" translate="yes" xml:space="preserve">
          <source>Collection associations (one-to-many / many-to-many)</source>
          <target state="translated">수집 협회 (일대 다 / 다 대다)</target>
        </trans-unit>
        <trans-unit id="59b097061899a987daf9b40660bdf6b202faebcc" translate="yes" xml:space="preserve">
          <source>Collection proxies in Active Record are middlemen between an &lt;code&gt;association&lt;/code&gt;, and its &lt;code&gt;target&lt;/code&gt; result set.</source>
          <target state="translated">Active Record의 콜렉션 프록시는 &lt;code&gt;association&lt;/code&gt; 과 &lt;code&gt;target&lt;/code&gt; 결과 세트 사이의 중간 입니다.</target>
        </trans-unit>
        <trans-unit id="4bbb632f02fd69807705c0179999c17d35c93b0f" translate="yes" xml:space="preserve">
          <source>Collections</source>
          <target state="translated">Collections</target>
        </trans-unit>
        <trans-unit id="8f75f05b69e8c701c97f35b0100b402af06c5ab0" translate="yes" xml:space="preserve">
          <source>Collects the configs for the environment and optionally the specification name passed in. To include replica configurations pass &lt;code&gt;include_replicas: true&lt;/code&gt;.</source>
          <target state="translated">환경에 대한 구성 및 선택적으로 전달 된 사양 이름을 수집합니다. 복제본 구성을 포함하려면 &lt;code&gt;include_replicas: true&lt;/code&gt; 전달하십시오 .</target>
        </trans-unit>
        <trans-unit id="88d5e4cac104ffc3f02dd54f2f0f1074fd33fd9b" translate="yes" xml:space="preserve">
          <source>Colors</source>
          <target state="translated">Colors</target>
        </trans-unit>
        <trans-unit id="aa7e8c5d82aa2c31713fffa65ba604fcd753ce3d" translate="yes" xml:space="preserve">
          <source>Column Modifiers</source>
          <target state="translated">열 수정 자</target>
        </trans-unit>
        <trans-unit id="21d399da3911177c35324e298452b0eb86f1425c" translate="yes" xml:space="preserve">
          <source>Column modifiers can be applied when creating or changing a column:</source>
          <target state="translated">열을 만들거나 변경할 때 열 수정자를 적용 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="ab1566f64ebf60a70522f152bc05256ab417bc98" translate="yes" xml:space="preserve">
          <source>Combining Callback Conditions</source>
          <target state="translated">콜백 조건 결합</target>
        </trans-unit>
        <trans-unit id="9fbcc3cf1cf8cf24d69c06eac6736ee11f60dbb0" translate="yes" xml:space="preserve">
          <source>Combining Them</source>
          <target state="translated">그들을 결합</target>
        </trans-unit>
        <trans-unit id="fa017bf8186069310abe6ecdc2efc79a3201614e" translate="yes" xml:space="preserve">
          <source>Combining Validation Conditions</source>
          <target state="translated">유효성 검사 조건 결합</target>
        </trans-unit>
        <trans-unit id="8901895fb1b1d4c4ea2fec368c25176bf73e2f7e" translate="yes" xml:space="preserve">
          <source>Command</source>
          <target state="translated">Command</target>
        </trans-unit>
        <trans-unit id="4ea6c56b2de3d67e89efd28d4177d20af3ce5727" translate="yes" xml:space="preserve">
          <source>Command Line Basics</source>
          <target state="translated">커맨드 라인 기본</target>
        </trans-unit>
        <trans-unit id="fed7378d16561a0220c3c4ce880282824df0e484" translate="yes" xml:space="preserve">
          <source>Command Line Injection</source>
          <target state="translated">커맨드 라인 주입</target>
        </trans-unit>
        <trans-unit id="2dbdff57ff7cfcc51652495ae36ff41725ddebf4" translate="yes" xml:space="preserve">
          <source>Command class for carrying out the actual incineration of the &lt;code&gt;InboundMail&lt;/code&gt; that's been scheduled for removal. Before the incineration &amp;ndash; which really is just a call to &lt;code&gt;#destroy!&lt;/code&gt; &amp;ndash; is run, we verify that it's both eligible (by virtue of having already been processed) and time to do so (that is, the &lt;code&gt;InboundEmail&lt;/code&gt; was processed after the &lt;code&gt;incinerate_after&lt;/code&gt; time).</source>
          <target state="translated">제거 예정인 &lt;code&gt;InboundMail&lt;/code&gt; 의 실제 소각을 수행하기위한 명령 클래스 . 소각 전 &amp;ndash; 이것은 실제로 &lt;code&gt;#destroy!&lt;/code&gt; 대한 호출입니다 ! &amp;ndash; 실행 된 경우 (이미 처리 되었기 때문에) 자격이 있는지와 처리 시간 (즉 , &lt;code&gt;incinerate_after&lt;/code&gt; 시간 이후에 &lt;code&gt;InboundEmail&lt;/code&gt; 이 처리됨 )인지 확인합니다.</target>
        </trans-unit>
        <trans-unit id="08be4b0809e18902e0cbadfd949e15ce066b38c0" translate="yes" xml:space="preserve">
          <source>Command::Actions</source>
          <target state="translated">Command::Actions</target>
        </trans-unit>
        <trans-unit id="3c8b9a1b26cdcdad8df489d5abd54d1e64efc2c3" translate="yes" xml:space="preserve">
          <source>Command::Actions#load_generators</source>
          <target state="translated">Command::Actions#load_generators</target>
        </trans-unit>
        <trans-unit id="55196bd60805481bc7b7c0cff67bd25f05021bbb" translate="yes" xml:space="preserve">
          <source>Command::Actions#load_tasks</source>
          <target state="translated">Command::Actions#load_tasks</target>
        </trans-unit>
        <trans-unit id="708b9b3221296d64cc725dfe85b887c8f2ca54c9" translate="yes" xml:space="preserve">
          <source>Command::Actions#require_application!</source>
          <target state="translated">Command::Actions#require_application!</target>
        </trans-unit>
        <trans-unit id="266f52fe801eec33d3f3dc6b188c90c6dd3ba426" translate="yes" xml:space="preserve">
          <source>Command::Actions#require_application_and_environment!</source>
          <target state="translated">Command::Actions#require_application_and_environment!</target>
        </trans-unit>
        <trans-unit id="4f16f28aa07f3c5bf4d5f433dcdfbe2e08fbb66a" translate="yes" xml:space="preserve">
          <source>Command::Actions#require_environment!</source>
          <target state="translated">Command::Actions#require_environment!</target>
        </trans-unit>
        <trans-unit id="2cf3e9ddcee3da860e95d855061043b2e75d7f9a" translate="yes" xml:space="preserve">
          <source>Command::Actions#set_application_directory!</source>
          <target state="translated">Command::Actions#set_application_directory!</target>
        </trans-unit>
        <trans-unit id="026e0af9b091db6514c218258bef10b9acd09adf" translate="yes" xml:space="preserve">
          <source>Command::Base</source>
          <target state="translated">Command::Base</target>
        </trans-unit>
        <trans-unit id="413c3ee5f2e5080fe2284469fd6059483fe86832" translate="yes" xml:space="preserve">
          <source>Command::Base#help</source>
          <target state="translated">Command::Base#help</target>
        </trans-unit>
        <trans-unit id="6c3d1ebba03721cab6bfaef06f2cf6e6ec1c422d" translate="yes" xml:space="preserve">
          <source>Command::Base::banner</source>
          <target state="translated">Command::Base::banner</target>
        </trans-unit>
        <trans-unit id="63e29e838264cba5cfcaee7f273525e3a3796cee" translate="yes" xml:space="preserve">
          <source>Command::Base::base_name</source>
          <target state="translated">Command::Base::base_name</target>
        </trans-unit>
        <trans-unit id="cb0c9a061643df4c762a2a4f46a0edf5c10a167c" translate="yes" xml:space="preserve">
          <source>Command::Base::command_name</source>
          <target state="translated">Command::Base::command_name</target>
        </trans-unit>
        <trans-unit id="c34094b4aa4d7cdffb008bc0bc9bc7af2e14bb7e" translate="yes" xml:space="preserve">
          <source>Command::Base::default_command_root</source>
          <target state="translated">Command::Base::default_command_root</target>
        </trans-unit>
        <trans-unit id="ca03241d99914d52dcdb8a80d3b629c0c6b7b434" translate="yes" xml:space="preserve">
          <source>Command::Base::desc</source>
          <target state="translated">Command::Base::desc</target>
        </trans-unit>
        <trans-unit id="05b3296ffb63095aa6b238866cf5223899320f78" translate="yes" xml:space="preserve">
          <source>Command::Base::engine?</source>
          <target state="translated">Command::Base::engine?</target>
        </trans-unit>
        <trans-unit id="e3cdf91f3f59429849edf7ec64eb0408bb9ef0fb" translate="yes" xml:space="preserve">
          <source>Command::Base::executable</source>
          <target state="translated">Command::Base::executable</target>
        </trans-unit>
        <trans-unit id="902f57b490d6c302986e799001e68e647d0af8d8" translate="yes" xml:space="preserve">
          <source>Command::Base::hide_command!</source>
          <target state="translated">Command::Base::hide_command!</target>
        </trans-unit>
        <trans-unit id="7c3a9c8b42430e05e14ba37041dfb5481cbe6b38" translate="yes" xml:space="preserve">
          <source>Command::Base::namespace</source>
          <target state="translated">Command::Base::namespace</target>
        </trans-unit>
        <trans-unit id="584db94576227b10b9c839d239811107c265dd58" translate="yes" xml:space="preserve">
          <source>Command::Base::printing_commands</source>
          <target state="translated">Command::Base::printing_commands</target>
        </trans-unit>
        <trans-unit id="dcecccc5f9ed90488048ed52decbff5fd43bc9b1" translate="yes" xml:space="preserve">
          <source>Command::Base::usage_path</source>
          <target state="translated">Command::Base::usage_path</target>
        </trans-unit>
        <trans-unit id="43a0f267d2fc6ab52660cf33b91cc9629ec9735c" translate="yes" xml:space="preserve">
          <source>Command::command_type</source>
          <target state="translated">Command::command_type</target>
        </trans-unit>
        <trans-unit id="87213fd6f67b207c3ead379974423f07a6b4f88e" translate="yes" xml:space="preserve">
          <source>Command::file_lookup_paths</source>
          <target state="translated">Command::file_lookup_paths</target>
        </trans-unit>
        <trans-unit id="38429120cbbee8343e4c466530c400010ca22f67" translate="yes" xml:space="preserve">
          <source>Command::invoke</source>
          <target state="translated">Command::invoke</target>
        </trans-unit>
        <trans-unit id="79d552b54cc7d1f750da8e0fc914e08666c9af7f" translate="yes" xml:space="preserve">
          <source>Command::lookup_paths</source>
          <target state="translated">Command::lookup_paths</target>
        </trans-unit>
        <trans-unit id="3909a9b64f9204378d3ac57b2e654e08f3c6f355" translate="yes" xml:space="preserve">
          <source>Command::root</source>
          <target state="translated">Command::root</target>
        </trans-unit>
        <trans-unit id="a4f2663020448563286d316ca2ebc61473f2dfa7" translate="yes" xml:space="preserve">
          <source>Commits a transaction.</source>
          <target state="translated">트랜잭션을 커밋합니다.</target>
        </trans-unit>
        <trans-unit id="3288d23c7212dd32ac0d02695d6008f1b582b8c0" translate="yes" xml:space="preserve">
          <source>Commits the transaction (and turns on auto-committing).</source>
          <target state="translated">트랜잭션을 커밋하고 자동 커밋을 설정합니다.</target>
        </trans-unit>
        <trans-unit id="86e54558a727f34642f8027f0919c63723bd2740" translate="yes" xml:space="preserve">
          <source>Common Gotchas</source>
          <target state="translated">공통점</target>
        </trans-unit>
        <trans-unit id="f6eaa962650a97f840a2800c301825ed8d72a917" translate="yes" xml:space="preserve">
          <source>Common Options</source>
          <target state="translated">공통 옵션</target>
        </trans-unit>
        <trans-unit id="ecc0b21a0a93f5a1084804a65190edb9d732556a" translate="yes" xml:space="preserve">
          <source>Common Validation Options</source>
          <target state="translated">일반적인 유효성 검사 옵션</target>
        </trans-unit>
        <trans-unit id="9c00d095b063c1821efcfa9d476864f6a4fa0f48" translate="yes" xml:space="preserve">
          <source>Communication between layout and template</source>
          <target state="translated">레이아웃과 템플릿 간 통신</target>
        </trans-unit>
        <trans-unit id="a10953a02727df0828dbbbe7ca1fabc0418a6324" translate="yes" xml:space="preserve">
          <source>Compare &lt;a href=&quot;timezone#attribute-i-name&quot;&gt;name&lt;/a&gt; and TZInfo identifier to a supplied regexp, returning &lt;code&gt;true&lt;/code&gt; if a match is found.</source>
          <target state="translated">&lt;a href=&quot;timezone#attribute-i-name&quot;&gt;이름&lt;/a&gt; 과 TZInfo 식별자를 제공된 정규 표현식과 비교 하여 일치하는 것이 있으면 &lt;code&gt;true&lt;/code&gt; 를 반환 합니다 .</target>
        </trans-unit>
        <trans-unit id="aaac9a35feeb83fe68d812c77f219d485f0b9fcd" translate="yes" xml:space="preserve">
          <source>Compare this time zone to the parameter. The two are compared first on their offsets, and then by name.</source>
          <target state="translated">이 시간대를 매개 변수와 비교하십시오. 두 가지를 먼저 오프셋에서 비교 한 다음 이름별로 비교합니다.</target>
        </trans-unit>
        <trans-unit id="5b1d2ac80e538d97ed99f12eeeb719c3b013cdae" translate="yes" xml:space="preserve">
          <source>Compare two ranges and see if they overlap each other</source>
          <target state="translated">두 범위를 비교하여 서로 겹치는 지 확인하십시오.</target>
        </trans-unit>
        <trans-unit id="987e84c7251288c09500c7dbc8d29973aafaf62f" translate="yes" xml:space="preserve">
          <source>CompareWithRange</source>
          <target state="translated">CompareWithRange</target>
        </trans-unit>
        <trans-unit id="fc0b33e3f2bc8e959474eaef069c2490aaf25f83" translate="yes" xml:space="preserve">
          <source>CompareWithRange#===</source>
          <target state="translated">CompareWithRange#===</target>
        </trans-unit>
        <trans-unit id="df94f07e201a0a0b74989d02dd085c77170680b3" translate="yes" xml:space="preserve">
          <source>CompareWithRange#cover?</source>
          <target state="translated">CompareWithRange#cover?</target>
        </trans-unit>
        <trans-unit id="9221302ab3ecde72fdc6c065b450dc9ee68cbd64" translate="yes" xml:space="preserve">
          <source>CompareWithRange#include?</source>
          <target state="translated">CompareWithRange#include?</target>
        </trans-unit>
        <trans-unit id="f66dc3a44be3ec011e46c442300ae1c6d972f729" translate="yes" xml:space="preserve">
          <source>Compares one &lt;a href=&quot;duration&quot;&gt;Duration&lt;/a&gt; with another or a &lt;a href=&quot;../numeric&quot;&gt;Numeric&lt;/a&gt; to this &lt;a href=&quot;duration&quot;&gt;Duration&lt;/a&gt;. &lt;a href=&quot;../numeric&quot;&gt;Numeric&lt;/a&gt; values are treated as seconds.</source>
          <target state="translated">한 비교 &lt;a href=&quot;duration&quot;&gt;기간&lt;/a&gt; 또 다른 나에 &lt;a href=&quot;../numeric&quot;&gt;숫자를&lt;/a&gt; 이에 &lt;a href=&quot;duration&quot;&gt;시간을&lt;/a&gt; . &lt;a href=&quot;../numeric&quot;&gt;숫자&lt;/a&gt; 값은 초로 처리됩니다.</target>
        </trans-unit>
        <trans-unit id="00b404c6cc619fee507752d6454ece908f254cd4" translate="yes" xml:space="preserve">
          <source>Compares two relations for equality.</source>
          <target state="translated">두 관계가 동일한 지 비교합니다.</target>
        </trans-unit>
        <trans-unit id="db9a34714077df6f64ffd4998daaa5523e19ebdb" translate="yes" xml:space="preserve">
          <source>Compatibility can be checked with the &lt;code&gt;zeitwerk:check&lt;/code&gt; task:</source>
          <target state="translated">&lt;code&gt;zeitwerk:check&lt;/code&gt; 작업으로 호환성을 확인할 수 있습니다 .</target>
        </trans-unit>
        <trans-unit id="0c638dc17527522c4da28520ee248e2e503b3067" translate="yes" xml:space="preserve">
          <source>Compiled assets are written to the location specified in &lt;code&gt;config.assets.prefix&lt;/code&gt;. By default, this is the &lt;code&gt;/assets&lt;/code&gt; directory.</source>
          <target state="translated">컴파일 된 자산은 &lt;code&gt;config.assets.prefix&lt;/code&gt; 에 지정된 위치에 기록됩니다 . 기본적으로이 디렉토리 는 &lt;code&gt;/assets&lt;/code&gt; 디렉토리입니다.</target>
        </trans-unit>
        <trans-unit id="0c983443ef2923c2082346a62739cd628e522b26" translate="yes" xml:space="preserve">
          <source>Compiles reader methods so we don't have to go through method_missing.</source>
          <target state="translated">독자 메소드를 컴파일하여 method_missing을 거치지 않아도됩니다.</target>
        </trans-unit>
        <trans-unit id="ca3c686ced561e5621717b4d5914bbf4a0222268" translate="yes" xml:space="preserve">
          <source>Complete List of Action Mailer Methods</source>
          <target state="translated">조치 메일러 메소드의 전체 목록</target>
        </trans-unit>
        <trans-unit id="a869c65ff250386de97d2f4d30334dedcd3850cd" translate="yes" xml:space="preserve">
          <source>Complete path to the file</source>
          <target state="translated">파일의 전체 경로</target>
        </trans-unit>
        <trans-unit id="783920efa93cc8bacd29717c0253926837419f76" translate="yes" xml:space="preserve">
          <source>Complete this in-flight execution. This method &lt;strong&gt;must&lt;/strong&gt; be called exactly once on the result of any call to &lt;code&gt;run!&lt;/code&gt;.</source>
          <target state="translated">이 기내 실행을 완료하십시오. 이 메소드 &lt;strong&gt;는 &lt;/strong&gt; &lt;code&gt;run!&lt;/code&gt; 호출 결과에서 정확히 한 번만 호출되어야 합니다! .</target>
        </trans-unit>
        <trans-unit id="0aa9e6bda911c7cdc1a944b8d257b78415176107" translate="yes" xml:space="preserve">
          <source>Complex migrations may require processing that Active Record doesn't know how to reverse. You can use &lt;code&gt;reversible&lt;/code&gt; to specify what to do when running a migration and what else to do when reverting it. For example:</source>
          <target state="translated">복잡한 마이그레이션에는 Active Record가 되돌릴 방법을 모르는 처리가 필요할 수 있습니다. &lt;code&gt;reversible&lt;/code&gt; 을 사용하여 마이그레이션을 실행할 때 수행 할 작업과 되돌릴 때 수행 할 작업을 지정할 수 있습니다 . 예를 들면 다음과 같습니다.</target>
        </trans-unit>
        <trans-unit id="fc0ccc765bdf3edfecd5fb56e67a35f6abb55be9" translate="yes" xml:space="preserve">
          <source>Compose decomposed characters to the composed form.</source>
          <target state="translated">분해 된 문자를 작성된 형식으로 작성하십시오.</target>
        </trans-unit>
        <trans-unit id="7bf0ab10fb9860e23b1ca89e4313be7fafb258f7" translate="yes" xml:space="preserve">
          <source>Composite Types</source>
          <target state="translated">복합 유형</target>
        </trans-unit>
        <trans-unit id="d3854db1bd68fdcad7425af93eef805f3562edc1" translate="yes" xml:space="preserve">
          <source>Compresses a string using gzip.</source>
          <target state="translated">gzip을 사용하여 문자열을 압축합니다.</target>
        </trans-unit>
        <trans-unit id="178674d4f08129ee266c6df6b5a75493d5bb5cf9" translate="yes" xml:space="preserve">
          <source>Compression is enabled by default with a 1kB threshold, so cached values larger than 1kB are automatically compressed. Disable by passing &lt;code&gt;compress: false&lt;/code&gt; or change the threshold by passing &lt;code&gt;compress_threshold: 4.kilobytes&lt;/code&gt;.</source>
          <target state="translated">압축은 기본적으로 1kB 임계 값으로 활성화되므로 1kB보다 큰 캐시 된 값은 자동으로 압축됩니다. &lt;code&gt;compress: false&lt;/code&gt; 를 전달하여 비활성화 하거나 &lt;code&gt;compress_threshold: 4.kilobytes&lt;/code&gt; 를 전달하여 임계 값을 변경하십시오 .</target>
        </trans-unit>
        <trans-unit id="ef4481132ecc120241808d9e015c82ef654a70ce" translate="yes" xml:space="preserve">
          <source>Compute extname to append to asset path. Returns &lt;code&gt;nil&lt;/code&gt; if nothing should be added.</source>
          <target state="translated">자산 경로에 추가 할 extname을 계산하십시오. 추가해야 할 것이 없으면 &lt;code&gt;nil&lt;/code&gt; 을 반환 합니다.</target>
        </trans-unit>
        <trans-unit id="dfbf2293d7caf9d4c66e61d1fe1d80062b56830d" translate="yes" xml:space="preserve">
          <source>Computes asset path to public directory. Plugins and extensions can override this method to point to custom assets or generate digested paths or query strings.</source>
          <target state="translated">공용 디렉토리에 대한 자산 경로를 계산합니다. 플러그인 및 확장은이 메소드를 대체하여 사용자 정의 자산을 가리 키거나 요약 된 경로 또는 쿼리 문자열을 생성 할 수 있습니다.</target>
        </trans-unit>
        <trans-unit id="9ae961c1491bcbbc4b6cce7de4f3e820d27b544d" translate="yes" xml:space="preserve">
          <source>Computes the URL to a JavaScript asset in the &lt;code&gt;app/assets/javascripts&lt;/code&gt; directory. This will call &lt;code&gt;javascript_path&lt;/code&gt; internally and merge with your current host or your asset host.</source>
          <target state="translated">&lt;code&gt;app/assets/javascripts&lt;/code&gt; 디렉토리 에서 URL을 JavaScript 자산으로 계산합니다 . 내부적으로 &lt;code&gt;javascript_path&lt;/code&gt; 를 호출 하고 현재 호스트 또는 자산 호스트와 병합합니다.</target>
        </trans-unit>
        <trans-unit id="f1401b32c6d5a61b3abc3d32a5712fdcba7b405f" translate="yes" xml:space="preserve">
          <source>Computes the URL to a stylesheet asset in the &lt;code&gt;app/assets/stylesheets&lt;/code&gt; directory. This will call &lt;code&gt;stylesheet_path&lt;/code&gt; internally and merge with your current host or your asset host.</source>
          <target state="translated">&lt;code&gt;app/assets/stylesheets&lt;/code&gt; 디렉토리 에서 스타일 시트 자산에 대한 URL을 계산합니다 . 내부적으로 &lt;code&gt;stylesheet_path&lt;/code&gt; 를 호출 하고 현재 호스트 또는 자산 호스트와 병합합니다.</target>
        </trans-unit>
        <trans-unit id="609686e83dfce62614488482ee7e9e9948d2f3c3" translate="yes" xml:space="preserve">
          <source>Computes the URL to an image asset in the &lt;code&gt;app/assets/images&lt;/code&gt; directory. This will call &lt;code&gt;image_path&lt;/code&gt; internally and merge with your current host or your asset host.</source>
          <target state="translated">&lt;code&gt;app/assets/images&lt;/code&gt; 디렉토리 의 이미지 자산에 대한 URL을 계산합니다 . 내부적으로 &lt;code&gt;image_path&lt;/code&gt; 를 호출 하고 현재 호스트 또는 자산 호스트와 병합합니다.</target>
        </trans-unit>
        <trans-unit id="b69d51c9fe12e9b6b8ff7516847b170f7ae86efb" translate="yes" xml:space="preserve">
          <source>Computes the full URL to a JavaScript asset in the public javascripts directory. This will use &lt;code&gt;javascript_path&lt;/code&gt; internally, so most of their behaviors will be the same. Since &lt;code&gt;javascript_url&lt;/code&gt; is based on &lt;code&gt;asset_url&lt;/code&gt; method you can set :host options. If :host options is set, it overwrites global &lt;code&gt;config.action_controller.asset_host&lt;/code&gt; setting.</source>
          <target state="translated">공개 javascripts 디렉토리의 JavaScript 자산에 대한 전체 URL을 계산합니다. 이것은 내부적으로 &lt;code&gt;javascript_path&lt;/code&gt; 를 사용 하므로 대부분의 동작은 동일합니다. &lt;code&gt;javascript_url&lt;/code&gt; 은 &lt;code&gt;asset_url&lt;/code&gt; 메소드를 기반으로 하기 때문에 : host 옵션을 설정할 수 있습니다. : host 옵션을 설정하면 전역 &lt;code&gt;config.action_controller.asset_host&lt;/code&gt; 설정을 덮어 씁니다 .</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
